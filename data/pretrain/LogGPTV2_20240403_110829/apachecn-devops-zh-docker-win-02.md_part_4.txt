 Volume in drive C has no label.
 Volume Serial Number is BC8F-B36C
 Directory of C:\data
02/06/2019  11:00 AM              .
02/06/2019  11:00 AM              ..
02/06/2019  11:00 AM                17 file1.txt
02/06/2019  11:00 AM                17 file2.txt 
```
您知道映像层是只读的，每个容器都有自己的可写层，因此结果应该是有意义的。新容器`c2`具有来自映像的原始文件，而没有来自第一个容器`c1`的更改，这些文件存储在`c1`的可写层中。每个容器的文件系统都是隔离的，因此一个容器看不到另一个容器所做的任何更改。
如果要在容器之间或容器与主机之间共享数据，可以使用 Docker 卷。
# 在具有卷的容器之间共享数据
卷是存储单位。它们与容器有一个独立的生命周期，因此它们可以独立创建，然后安装在一个或多个容器中。您可以使用 Dockerfile 中的`VOLUME`指令确保容器始终使用卷存储创建。
您可以使用目标目录指定卷，目标目录是容器内卷出现的位置。当您运行包含映像中定义的卷的容器时，该卷将映射到主机上特定于该容器的物理位置。从同一映像运行的更多容器会将其卷映射到不同的主机位置。
在 Windows 中，卷目录需要为空。在 Dockerfile 中，您不能在目录中创建文件，然后将其公开为卷。还需要在映像中存在的磁盘上定义卷。在 Windows 基本映像中，只有一个`C`驱动器可用，因此需要在`C`驱动器上创建卷。
`dockeronwindows/ch02-volumes:2e`的 Dockerfile 创建了一个包含两个卷的映像，并在从该映像运行容器时将`cmd`外壳明确指定为`ENTRYPOINT`:
```
# escape=`
FROM mcr.microsoft.com/windows/nanoserver:1809
VOLUME C:\app\config
VOLUME C:\app\logs
USER ContainerAdministrator
ENTRYPOINT cmd /S /C
```
Remember the Nano Server image uses a least-privilege user by default. Volumes are not accessible by that user, so this Dockerfile switches to the administrative account, and when you run a container from the image you can access volume directories.
当我从该映像运行一个容器时，Docker 从三个来源创建了一个虚拟文件系统。映像层是只读的，容器层是可写的，卷可以设置为只读或可写:
![](img/f630b9fe-5ce9-44cb-b8ac-9f76da4fb8ab.png)
因为卷与容器是分开的，所以即使源容器没有运行，它们也可以与其他容器共享。我可以从该映像运行一个任务容器，并使用命令在卷中创建一个新文件:
```
docker container run --name source dockeronwindows/ch02-volumes:2e "echo 'start' > c:\app\logs\log-1.txt"
```
Docker 启动写文件的容器，然后退出。该容器及其卷尚未删除，因此我可以使用`--volumes-from`选项并通过指定我的第一个容器的名称来连接到另一个容器中的卷:
```
docker container run -it --volumes-from source dockeronwindows/ch02-volumes:2e cmd
```
这是一个交互容器，当我列出`C:\app`目录的内容时，我会看到两个目录，`logs`和`config`，它们是第一个容器的卷:
```
> ls C:\app
 Directory: C:\app
Mode     LastWriteTime      Length  Name
----     -------------      ------  ----
d----l   6/22/2017 8:11 AM          config
d----l   6/22/2017 8:11 AM          logs 
```
共享卷具有读写权限，因此我可以看到在第一个容器中创建的文件并将其追加到该文件中:
```
C:\>type C:\app\logs\log-1.txt
'start'
C:\>echo 'more' >> C:\app\logs\log-1.txt
C:\>type C:\app\logs\log-1.txt
'start'
'more'
```
像这样在容器之间共享数据非常有用；您可以运行一个任务容器，从长期运行的后台容器中获取数据或日志文件的备份。默认访问权限是卷是可写的，但这是需要警惕的，因为您可能会编辑数据并破坏在源容器中运行的应用。
Docker 允许您以只读模式从另一个容器装载卷，方法是在`--volumes-from`选项中的容器名称上添加`:ro`标志。如果您想在不做更改的情况下读取数据，这是一种更安全的访问数据方式。我将运行一个新容器，以只读模式共享原始容器中的相同卷:
```
> docker container run -it --volumes-from source:ro dockeronwindows/ch02-volumes:2e cmd
C:\>type C:\app\logs\log-1.txt
'start'
'more'
C:\>echo 'more' >> C:\app\logs\log-1.txt
Access is denied.
C:\>echo 'new' >> C:\app\logs\log-2.txt
Access is denied.
```
在新容器中，我不能创建新文件或写入现有的日志文件，但我可以从原始容器中看到日志文件中的内容，以及第二个容器附加的行。
# 使用卷在容器和主机之间共享数据
容器卷存储在主机上，因此您可以从运行 Docker 的机器上直接访问它们，但是它们将位于 Docker 程序数据目录中的某个嵌套目录中。`docker container inspect`命令告诉您容器卷的物理位置，以及更多信息，包括容器的标识、名称和容器在 Docker 网络中的虚拟 IP 地址。
我可以在`container inspect`命令中使用 JSON 格式，通过一个查询只提取`Mounts`字段中的体积信息。该命令将 Docker 输出传输到 PowerShell cmdlet 中，以友好的格式显示 JSON:
```
> docker container inspect --format '{{ json .Mounts }}' source | ConvertFrom-Json
Type        : volume
Name        : 65ab1b420a27bfd79d31d0d325622d0868e6b3f353c74ce3133888fafce972d9
Source      : C:\ProgramData\docker\volumes\65ab1b42...\_data
Destination : c:\app\config
Driver      : local
RW          : TruePropagation :
Type        : volume
Name        : b1451fde3e222adbe7f0f058a461459e243ac15af8770a2f7a4aefa7516e0761
Source      : C:\ProgramData\docker\volumes\b1451fde...\_data
Destination : c:\app\logs
Driver      : local
RW          : True
```
我已经缩短了输出，但是在`Source`字段中，您可以看到卷数据存储在主机上的完整路径。我可以使用该源目录直接从主机访问容器的文件。当我在我的 Windows 机器上运行此命令时，我将看到在容器卷内创建的文件:
```
> ls C:\ProgramData\docker\volumes\b1451fde...\_data
   Directory: C:\ProgramData\docker\volumes\b1451fde3e222adbe7f0f058a461459e243ac15af8770a2f7a4aefa7516e0761\_data
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----       06/02/2019     13:33             19 log-1.txt
```
通过这种方式可以访问主机上的文件，但是使用带有卷标识的嵌套目录位置会很尴尬。相反，您可以在创建容器时从主机上的特定位置装载卷。
# 从主机目录装载卷
您可以使用`--volume`选项从主机上的已知位置显式映射容器中的目录。容器中的目标位置可以是使用`VOLUME`命令创建的目录，也可以是容器文件系统中的任何目录。如果目标位置已经存在于 Docker 映像中，它将被卷装载隐藏，因此您将看不到任何映像文件。
我将在我的 Windows 机器上的`C`驱动器的目录中为我的应用创建一个虚拟配置文件:
```
PS> mkdir C:\app-config | Out-Null
PS> echo 'VERSION=18.09' > C:\app-config\version.txt
```
现在，我将运行一个从主机映射卷的容器，并读取实际存储在主机上的配置文件:
```
> docker container run `
 --volume C:\app-config:C:\app\config `
 dockeronwindows/ch02-volumes:2e `
 type C:\app\config\version.txt
VERSION=18.09
```
`--volume`选项以`{source}:{target}`的格式指定挂载。源是主机位置，它需要存在。目标是容器位置，它不需要存在，但是如果存在，现有的内容将被隐藏。
Volume mounts are different in Windows and Linux containers. In Linux containers, Docker merges the contents from the source into the target, so if files exist in the image, you see them as well as the contents of the volume source. Docker on Linux also lets you mount a single file location, but on Windows you can only mount whole directories.
卷装载对于在容器(如数据库)中运行有状态应用非常有用。您可以在容器中运行 SQL Server，并将数据库文件存储在主机上的某个位置，该位置可能是服务器上的 RAID 阵列。当模式更新时，从更新的 Docker 映像中移除旧容器并启动新容器。您对新容器使用相同的卷装载，以便从旧容器中保留数据。
# 使用卷进行配置和状态
在容器中运行应用时，应用状态是一个重要的考虑因素。容器可以是长期运行的，但它们并不是永久性的。与传统计算模型相比，容器的最大优势之一是您可以轻松替换它们，并且只需几秒钟。当您需要部署新功能或修补安全漏洞时，只需构建和测试升级的映像，停止旧容器，并从新映像开始替换。
通过将数据与应用容器分开，卷允许您管理升级过程。我将用一个简单的 web 应用来演示这一点，该应用将页面的命中次数存储在一个文本文件中；每次浏览页面时，网站都会增加计数。
`dockeronwindows/ch02-hitcount-website`映像的 Dockerfile 使用多阶段构建，使用`microsoft/dotnet`映像编译应用，并使用`microsoft/aspnetcore`作为基础打包最终应用: