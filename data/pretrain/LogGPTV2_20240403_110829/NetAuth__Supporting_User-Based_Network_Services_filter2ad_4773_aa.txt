title:NetAuth: Supporting User-Based Network Services
author:Manigandan Radhakrishnan and
Jon A. Solworth
NetAuth: Supporting User-Based Network Services
Manigandan Radhakrishnan
PI:EMAIL
University of Illinois at Chicago
Jon A. Solworth
PI:EMAIL
University of Illinois at Chicago
Abstract
In User-Based Network Services (UBNS), the process
servicing requests from user U runs under U’s ID. This
enables (operating system) access controls to tailor ser-
vice authorization to U. Like privilege separation, UBNS
partitions applications into processes in such a way that
each process’ permission is minimized. However, be-
cause UBNS fundamentally affects the structure of an
application, it is best performed early in the design pro-
cess.
UBNS depends on other security mechanisms, most
notably authentication and cryptographic protections.
These seemingly straightforward needs add considerable
complexity to application programming. To avoid this
complexity, programmers regularly ignore security is-
sues at the start of program construction. However, after
the application is constructed, UBNS is difﬁcult to ap-
ply since it would require signiﬁcant structural changes
to the application code.
This paper describes easy-to-use security mechanisms
supporting UBNS, and thus signiﬁcantly reducing the
complexity of building UBNS applications. This sim-
pliﬁcation enables much earlier (and hence more effec-
tive) use of UBNS. It focuses the application developer’s
attention on the key security task in application develop-
ment, partitioning applications so that least privilege can
be effectively applied. It removes vulnerabilities due to
poor application implementation or selection of security
mechanisms. Finally, it enables signiﬁcant control to be
externally exerted on the application, increasing the abil-
ity of system administrators to control, understand, and
secure such services.
1
Introduction
Computer networking was designed in a different era, in
which computers were kept in locked rooms and com-
munication occurred over leased lines, isolating systems
from external attackers. Then, physical security went a
long way in ensuring adequate computer security. To-
day, however, attackers can remotely target a computer
system from anywhere in the world over the Internet.
Given that physical separation is no longer an alterna-
tive, securing networked applications requires isolation
of a different form, including in general:
1. authentication of both users and hosts;
2. protection of communication conﬁdentiality and in-
tegrity; and
3. authorization (also known as access controls) using
least privilege [32].
The ﬁrst two tasks are typically provided for within the
application, for example by using SSL [12] or Kerberos
[38]. The last task is ideally enforced by the Operating
System (OS), since then failures in the application (e.g.,
a buffer overﬂow) do not bypass authorization.
But (1) and (2) are complicated by Application Pro-
gram Interfaces (APIs) which are both difﬁcult and te-
dious to use; for example, in addition to the basic au-
thentication mechanism, it is necessary to communicate
information from client to server (perhaps using GSSAPI
[24]), interface to PAM [33], and the OS. The application
programmer must choose from a large variety of authen-
tication techniques (e.g., password or public-key), and
compensate for their weaknesses. Since complexity is
the enemy of security, it is especially important to avoid
complexity in security critical code. And authentication
is often attacked, for example, password dictionary at-
tacks against SSH1, as well as the implementations of
authentication2.
Consider the dovecot IMAP server. Over 9,000 lines
are devoted to (1) and (2), consuming 37% of the IMAP
service code (see Section 6 for details). Clearly, this is a
large burden on application developers, and as we shall
show, unnecessary.
In contrast, the partitioning of the
application into processes, and their attendant privileges,
USENIX Association  
17th USENIX Security Symposium 
227
is a concern of application programmers since it is fun-
damental to program structure. The impact of this parti-
tioning includes the number and purposes of processes,
the privileges associated with processes, the communica-
tion between processes, the organization of data the pro-
cesses access, the data and operations which must be per-
formed within a process, the sequencing of operations,
and the security vulnerabilities. For a general discussions
of these issues, see [4].
One important way of partitioning network services is
by the remote user U they serve. That is, a server process
which receives requests from U runs under U’s user ID,
so that its “ownership” is visible to, and limited by, exter-
nal authorization. Although this scheme is widely used,
we don’t know a term for it, so we shall call it User-
Based Network Services (UBNS). UBNS is used, for ex-
ample, in dovecot, SSH, and qmail. It prevents a user’s
private data from being commingled with other user’s
data and provides the basis for OS authorization. The lat-
ter enables system administrators to be able to conﬁgure
secure services easily. Given the many sources of service
code—and frequent releases of the services—it is highly
desirable to move the security conﬁguration and enforce-
ment outside the service. This minimizes the harm that
errant services can do, reduces the need to understand
(often poorly documented) application security, enables
strong protections independent of service code, is more
resilient in the presence of security holes, and vastly in-
creases the effectiveness of validating service security.
Despite the advantages of UBNS, authentication is of-
ten performed in a service-speciﬁc way or not at all.
A prime example is the Apache web server (and most
other web servers). In Apache, the users are not visible
to the OS. The crucial independent check provided by
OS-based authorization is lost. And application devel-
opers often avoid service-speciﬁc authentication, due to
the complexity it engenders. Hence, an application’s ini-
tial design often forgoes security concerns which then
must be retroﬁtted after the fact [13]. But retroﬁtting
UBNS requires restructuring and re-implementing sub-
stantial portions of the application. And since it is difﬁ-
cult to restructure existing applications, the service may
never be made into a UBNS.
If UBNS were easier to implement at the application
level, it could be integrated from the beginning of system
design. Application complexity would be decreased and
security would be improved. In this paper, we describe
how to radically reduce complexity in UBNS service us-
ing netAuth—our network authentication and authoriza-
tion framework.
In netAuth, a service requires only 4
lines of code to implement authentication and 0 for en-
cryption and authorization. Hence, netAuth
1. allows authenticated services to be easily integrated
and
2. enables requests for the same user to be directed to
the same back-end server.
The ﬁrst is essential to support UBNS. The second makes
it easier to re-use per user processes, removing the need
for concurrent programming while increasing system ef-
ﬁciency.
In addition, these mechanisms enable more
modular construction of applications.
We describe NetAuth APIs and the implementations
it gives rise to. By making these mechanisms almost
entirely transparent, an application developer adds only
minimal code to use these mechanisms. We describe
sufﬁcient networking interfaces to support UBNS and
describe their implementations. These mechanisms are
quite simple and thus are easy to use. The protections
provided are also considerably stronger than those in
most applications. We then describe a port of a UBNS
service, dovecot to netAuth, and the substantial savings
of code, simpliﬁcations to process structure, and reduced
attack surface of this port.
The remainder of the paper is organized as follows:
Section 2 describes related work. Section 3 describes the
overview of our system. We then describe our system in
more depth: Section 4 describes how our authentication
mechanism can be used to write application. Section 5
describes brieﬂy our implementation and some perfor-
mance numbers. In Section 6, we describe the experi-
ence of porting dovecot to netAuth. Section 7 discusses
the security achieved and ﬁnally we conclude.
2 Related work
UBNS is not the only way to partition a service into mul-
tiple processes. Another complementary way is privi-
lege separation [29]—in which an application is parti-
tioned into two processes, one privileged and one un-
privileged. For example, the listening part of the ser-
vice which performs generic processing—initialization,
waiting for new connections, etc. is often run as root
(i.e., with administrative privileges) because some ac-
tions need these privileges (for example, to read the ﬁle
containing hashed passwords or to bind to a port). Un-
fortunately, exploiting a security hole in a root level pro-
cess fully compromises the computer. By splitting the
server into two processes, the exposure of a root level
process is minimized. In contrast to UBNS, retroﬁtting
privilege separation is not difﬁcult, and there exists both
libraries [20] and compiler techniques [6] to do it. Both
UBNS and privilege separation are design strategies to
maximize the value of least privilege [32].
SSH is a widely used UBNS service [42, 29], but is ill-
suited to implement UBNS services—such as mail, cal-
endaring, source control systems, remote ﬁle systems—
because of the way network services are built.
In the
228 
17th USENIX Security Symposium 
USENIX Association
network case, the listening process exists before the con-
nection is made and must at connect time know what user
is associated with the service. SSH’s port forwarding3
performs user authentication at the service host—but not
at the service—and hence, to the service the users of a
host are undifferentiated4. As a result, traditional UBNS
services use authentication mechanisms such as SSL or
passwords and OS mechanisms such as setuid which are
awkward to program and may not be secure. In contrast,
netAuth both authenticates and authorizes the user on a
per service basis, so that the service runs only with the
permission of the user. Unlike SSH, netAuth provides
end-to-end securing from client to service.
Distributed Firewalls [5] (based on Keynote [5]) in
contrast to SSH, implements per user authorization for
services by adding this semantics to the connect and
accept APIs. While Distributed Firewalls sit in front
of the service, and thus are not integrated with the ser-
vice, Virtual Private Services are integrated and thus can
provide UBNS services [16]. In DisCFS [27], an inter-
esting scheme is used to extend the set of users on the
ﬂy by adding their public keys; although we have not yet
implemented it, we intend to use this mechanism to al-
low anonymous access (assuming authorization allows it
for a service) thus combining the best of authenticated
and public services.
Shamon [25, 17] is a distributed access control system
which runs on Virtual Machines (VMs).
It “knits” to-
gether the access control speciﬁcations for different sys-
tems, and ensures the integrity of the resulting system
using TPM and attestation techniques. Its communica-
tion, like netAuth, is implemented in IPsec and uses a
modiﬁed xinetd to perform the authorization. Shamon
implements a very comprehensive mechanism for autho-
rization (targeted for very tightly integrated systems), in
contrast to netAuth’s less complete but simpler service-
by-service authorization.
We do not describe the authorization part of netAuth
in this paper for two reasons. First, there is not suf-
ﬁcient space. Second, the authentication mechanism
can be used with any authorization model. For exam-
ple, even POSIX authorization, privilege separation, and
VMs could be combined to provide a reasonable base for
UBNS. The most value for authorization is gained when
privileges are based both on the executable and the user
of the process, increasing the value of privilege separa-
tion. Such separation is essential to allow multiple priv-
ilege separated services to run on the same OS. Exam-
ples of such mechanisms include SELinux [34], AppAr-
mor [9], and KernelSec [30]. Janus[15], MAPBox[2],
Ostia[14] and systrace[28, 22] are examples of sandbox-
ing mechanisms which attenuate privileges.
SANE/Ethane [8, 7] has a novel method of autho-
rizing trafﬁc in the network. An authorizing controller
intercepts trafﬁc and—based on user authentication for
that host—determines whether to allow or deny the net-
work ﬂow. This enables errant hosts or routers to be
isolated. However, the authentication information avail-
able to Ethane using traditional OS mechanisms is coarse
grain (it cannot distinguish individual users or appli-
cations). Ethane and netAuth are complementary ap-
proaches, which could be combined to provide network-
based authentication with ﬁne-grained authentication.
Distributed authentication consist of two components:
a mechanism to authenticate the remote user and a means
to change the ownership of a process. Traditionally,
UNIX performs user authentication in a (user space)
process and then sets the User ID by calling setuid.
The process doing setuid needs to run as the supe-
ruser (administrative mode in Windows) [39]. To reduce
the dangers of exploits using such highly privileged pro-
cesses, Compartmented Mode Workstations divided root
privileges into about 30 separate capabilities [3], includ-
ing a SETUID capability. These capabilities were also
adopted by the POSIX 1e draft standard [1], which was
widely implemented, including in Linux.
To limit the setuid privileges further, Plan9 uses an
even ﬁner grain one-time-use capability [10], which al-
lows a process owned by U1 to change its owner to U2.
NetAuth takes a further step in narrowing this privilege
since it is limited to a particular connection and is non-
transferable; but a more important effect is that it is stat-
ically declared and thus enhances information assurance
whether manually or automatically performed.
The traditional mechanism to provide user authenti-
cation in distributed systems is passwords. Such pass-
words are subject to dictionary and other types of at-
tacks, and are regularly compromised. Even mechanisms
like SSL typically use password based authentication for
users [12] even though they can support public key en-
cryption.
Kerberos [38] performs encryption using private key
cryptography. Kerberos has a single point of failure if
the KDC is compromised; private key also means that
there is no non-repudiation to prove that the user did au-
thenticate against a server; and requires that the KDC be
trusted by both parties. Microsoft Window’s primary au-
thentication mechanism is Kerberos.
Plan9 uses a separate (privilege-separated) process
called factotum, to hold authentication information
and verify authentication. The factotum process asso-
ciated with the server is required to create the change-of-
owner capability. But factotum is invoked by the ser-
vice, and hence can be bypassed allowing unauthenti-
cated users to access the service. Of course, it is in prin-
ciple possible to examine the source code for the service
to determine whether authentication is bypassed, but this
is an error prone process and must be done anew each
USENIX Association  
17th USENIX Security Symposium 
229
time an application is modiﬁed. NetAuth, enforces au-
thentication and authorization which cannot be bypassed
and is easier to analyze.
The OKWS web server [21], built on top of the As-
bestos OS [11] does a per user demultiplex, so that each
web server process is owned by a single user. This in
turn is based on HTTP-based connections, in which there
can be multiple connections per user, tied together via
cookies. It uses the web-speciﬁc mechanism for sharing
authentication across multiple connections. OKWS was
an inspiration for netAuth, which allows multiple con-
nections from a user to go to the same server. NetAuth
works by unambiguously naming the connection so that
it works with any TCP/IP connection; and hence is much
broader than web-based techniques.
3 System overview
NetAuth is modular, so that the different implementa-
tions and algorithms can be used for each of the follow-
ing three components:
1. User authentication is triggered by new network
APIs which (a) transparently perform cryptographic
(public key) authentication over the network and
(b) provide OS-based ownership of processes. Part
(b) inherently requires an authorization mechanism
which controls the conditions under which the user
of a process can be changed.
2. Encrypted communication between authenti-
cated hosts ensures that conﬁdentiality and in-
tegrity of communications are maintained, and also
performs host authentication. This encryption is
provided by the system and requires no application
code.
3. Authorization is used to determine if a process can
(a) change ownership, (b) authenticate as a client,
(c) perform network operations to a given address,
and (d) access ﬁles (and other OS objects).
In
UBNS this ideally depends on both the service and
the user. Thus, the authentication mechanism es-
sentially labels server processes with the user on
whose behalf the service is being performed so that
external authorization can be done effectively. It is
highly desirable that the authorization system pre-
vent attacks on one service spilling over to other
services.
Due to space limitations, this paper focuses on user
authentication. Authentication may seem trivial, but it
requires signiﬁcant amount of code in applications, so
much so, that this mechanism is justiﬁed solely to im-
prove authentication (without also improving authoriza-
tion). Our server implementation is in the Linux kernel,
but our client is user-space code which can be ported to
any OS, including proprietary ones.
For encryption we require that hosts be authenticated
and that cryptographic protections be set up transparently
between hosts. Host authentication is important since if
the end computer is owned by an attacker then security
is lost. Such end devices can be highly portable devices
such as cellphones. (For less important application one
can use untrusted hosts.) Encryption can be triggered ei-
ther in the network stack or by a standalone process. Cur-
rently, we are using IPsec [19, 18] for this purpose as re-
cent standards for IPsec have made it signiﬁcantly more
attractive as it allows for one of the hosts to be NATed
[40]. But we expect to replace it with a new suite being
developed which will be far less complex and faster.
The netAuth API can be used with any authorization
model, which would need to control both change of own-
ership and client authentication, perhaps using simple
conﬁguration ﬁles [20] as well as networking and ﬁle
systems to some extent. NetAuth’s authorization model
controls who may bind, accept, and connect to re-
mote services on a per user basis as well as ﬁne-grain
support for the user and services which can access a ﬁle.