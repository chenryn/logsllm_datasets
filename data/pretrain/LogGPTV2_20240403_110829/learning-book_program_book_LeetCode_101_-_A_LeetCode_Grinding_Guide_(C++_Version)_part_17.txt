们可以在O(nlogn)的时间内查找一个值是否存在：从根节点开始，若当前节点的值大于查找值
则向左下走，若当前节点的值小于查找值则向右下走。同时因为二叉查找树是有序的，对其中序
逾历的结果即为排好序的数组。
一个二叉查找树的实现如下。
---
## Page 131
14.5二叉查找树
126/143 -
图141：二叉查找树样例
template 
class BST {
T data;
Kode+ left;
Node+ right;
;
Node* root;
Node* makeEmpty(Node* t) {
if (t -- NULL) return NULL;
makeEmpty(t->1eft) ;
makeEmpty(t->right) ;
delete t;
return NULL;
Node* insert(Node* t, T x) {
if (t == NULL) {
n n = 4
t->data = x;
t->1eft = t->right - NULL;
}else if (x data) {
t->left = insert(t->left, x);
}else if (x >t->data){
t->right = insert(t->right, x);
return t;
Node* find(Node* t, T x) {
if (t == NULL) return NULL;
if (x data) return find(t->left, x);
if (x > t->data) return find(t->right, x);
return t;
---
## Page 132
14.5二叉查找树
127/143 
Node* findMin(Node* t) {
if (t == NULL 11 t->1eft
=NULL) return t;
return findMin(t->left);
Node* findMax(Node* t) {
if (t == NULL 11 t->right
==NULL) return t;
return findMax(t->right);
Node* remove(Node* t,T x) {
Node+ temp;
if (t == NULL) return NULL;
else if (x data) t->left = remove(t->left, x);
else if (x > t->data) t->right = remove(t->right,x);
else if (t->left &k t->right){
temp = findMin(t->right);
t->data = temp->data;
t->right = remove(t->right, t->data);
}else {
temp = t;
if (t->left == NULL) t = t->right;
else if (t->right == NULL) t = t->left;
delete temp;
return t;
public:
BST(): root(NULL) {}
BST(){
root = makeEmpty(root);
void insert(T x) {
insert (root, x);
void remove(T x) {
remove (root, x) ;
}；
99. Recover Binary Search Tree (Hard)
题目描述
给定一个二叉查找树，已知有两个节点被不小心交换了，试复原此树。
输人输出样例
输入是一个被误交换两个节点的二叉查找树，输出是改正后的二叉查找树。
---
## Page 133
14.5二叉查找树
128/143
Input:
E
/
Dutput:
2
2
/
4
在这个样例中，2和3被不小心交换了。
题解
我们可以使用中序遍历这个二叉查找树，同时设置一个prev指针，记录当前节点中序遍历
时的前节点。如果当前节点大于prev节点的值，说明需要调整次序。有一个技巧是如果遍历整个
序列过程中只出现了一次次序错误，说明就是这两个相邻节点需要被交换：如果出现了两次次序
错误，那就需要交换这两个节点。
//主函数
void recoverTree(TreeNode*root){
TreeNode *mistake1 = nullptr, *mistake2 = nullptr, *prev = nullptr;
inorder(root, mistake1, mistake2, prev) ;
if (mistake1 &k mistake2) {
int tenp = mistake1->val;
mistake1->val = mistake2->val;
mistake2->val = temp;
//辅函数
void inorder(TreeNode* root, TreeNode*& mistake1, TreeNode*& mistake2, Treelode
*& prev){
if (!root){
return;
if (root->left){
inorder(root->left, mistake1, mistake2, prev) ;
if(prev && root->valval){
if (!mistake1）{
mistake1 - prev;
mistake2 = root;
}else {
mistake2 = root;
cout val;
上
cout val;
prev = root;
if (root->right){
inorder(root->right, mistake1,mistake2, prev);
---
## Page 134
14.6字共树
129/143 -
669. Trim a Binary Search Tree (Easy)
题目描述
给定一个二叉查找树和两个整数L和R，且Lval > R) {
return trimBST(root->left, L, R);
if (root->valright, L, R);
root->left = trimBST(root->left,L, R);
F
root->right = trimBST(root->right, L, R);
return root;
14.6字典树
字典树（Trie）用于判断字符中是否存在或者是否具有某种字符中前缀：
---
## Page 135
14.6字共树
130/143 -
15
tea
tec
ten
inn
3
12
6
图14.2:字典树，存储了单词A、to、tea、ted、ten、i，in 和inn，以及它们的频率
使用哈希，在其中搜索一个单词的实际开销也是非常大的，且无法轻易支持搜索单词前缓。然而
由于一个英文单词的长度n通常在10以内，如果我们使用字典树，则可以在0（n）近似0（1)
的时间内完成搜索，且额外开销非常小。
208.Implement Trie (Prefix Tree) (Medium)
题目描述
尝试建立一个字典树，支持快速插人单词、查找单词、查找单词前级的功能。
输人输出样例
以下是数据结构的调用样例。
Trie trie = neu Trie();
trie.insert("apple*) ;
trie search("apple) ;
// true
trie.search("app");
// false
trie.startsWith("app"); / / true
trie.insert("app");
trie.search("app");
//true
题解
以下是字典树的典型实现方法。
class Trielode {
public:
TrieNode* childNode[26] ;
bool isVal;
TrieNode(): isVal(false) {
for (int i = 0; i childNode[uord[i] -a*]) {
temp>childNode[vord[i] -'a′] = nev Triellode() ;
temp = temp->chi1dNode [word[i]-a²];
temp->isVal = true;
//判断字典树里是否有一个词
bool search(string uord) {
TrieNode* temp = root;
for (int i - O; i chi1dNode [word[1] -a²];
return temp? temp->isVal: false;
//判断字典树是否有一个以词开始的前
bool startsWith(string prefix) {
Trielode* temp - root;
for (int i = O; i chi1dNode [prefix[i]-’a²];
return temp;
};
14.7练习
基础难度
226.Invert Binary Tree (Easy)
巧用递归，你可以在五行内完成这道题
---
## Page 137
14.7练习
132/143 
617. Merge Two Binary Trees (Easy)
同样的，利用递归可以轻松搞定。
572. Subtree of Another Tree (Easy)
子树是对称树的姊妹题，写法也十分类似。
404. Sum of Left Leaves (Easy)
怎么判断一个节点是不是左节点呢？一种可行的方法是，在辅函数里多传一个参数，表示当
前节点是不是父节点的左节点。
513.Find Bottom Left Tree Value (Easy)
最左下角的节点满足什么条件？针对这种条件，我们该如何找到它？
538. Convert BST to Greater Tree (Easy)
尝试利用某种遍历方式来解决此题，每个节点只需遍历一次。
235. Lowest Common Ancestor of a Binary Search Tree (Easy)
利用BST的独特性质，这道题可以很轻松完成。
530.Minimum Absolute Difference in BST (Easy)
还记得我们所说的，对于BST应该利用哪种遍历吗？
进阶难度
889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)
给定任意两种遍历结果，我们都可以重建树的结构。
106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)
给定任意两种遍历结果，我们都可以重建树的结构。
94.Binary Tree Inorder Traversal (Medium)
因为前中序后遍历是用递归实现的，而递归的底层实现是栈操作，因此我们总能用栈实现。
145. Binary Tree Postorder Traversal (Medium)
因为前中序后遍历是用递归实现的，而递归的底层实现是栈操作，因此我们总能用栈实现。
236. Lowest Common Ancestor of a Binary Tree (Medium)
现在不是BST，而是普通的二叉树了，该怎么办？
---
## Page 138
14.7练习
133/143 
109. Convert Sorted List to Binary Search Tree (Medium)
把排好序的链表变成BST。为了使得BST尽量平衡，我们需要寻找链表的中点。
897.Increasing Order Search Tree (Easy)
把BST压成一个链表，务必考虑清楚指针操作的顺序，否则可能会出现环路。
653. Two Sum IV - Input is a BST (Easy)
啊哈，这道题可能会把你骗到。
450. Delete Node in a BST (Medium)
当寻找到待删节点时，你可以分情况考虑一当前节点是叶节点、只有一个子节点和有两个
子节点。建议同时回收内存。
---
## Page 139
第15章指针三剑客之三：图
内容提要
数据结构介绍
拓扑排序
二分图
15.1数据结构介绍
作为指针三剑客之三，图是树的升级版。图通常分为有向（directed）或无向（undirected），有
循环（cyclic）或无循环（acyclic），所有节点相连（connected）或不相连（disconnected）。树即是
一个相连的无向无环图，而另一种很常见的图是有向无环图（Directed Acyclic Graph，DAG）。
D
E
图15.1：有向无环图样例
图通常有两种表示方法。假设图中一共有n个节点、m条边。第一种表示方法是邻接矩阵
（adjacency matrix）：我们可以建立一个nxn的矩阵G，如果第i个节点连向第j个节点，则G[i]i]
=1，反之为0：如果图是无向的，则这个矩阵一定是对称矩阵，即G[]]=G[][i]。第二种表示
方法是邻接链表（adjacencylist）：我们可以建立一个大小为n的数组，每个位置i储存一个数组