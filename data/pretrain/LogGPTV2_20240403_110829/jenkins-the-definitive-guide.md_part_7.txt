28
}
return cellRepresentedBySymbol;
}
public String getSymbol() {
return symbol;
}
}
The application can print the state of the grid as a text array. Currently, the application prints our live
cells as an asterisk (*), and dead cells appear as a minus character (–). So a five-by-five grid containing
a single living cell in the center would look like this:
-----
--*--
-----
Now users have asked for a change to the application—they want pluses (+) instead of stars! So we are
going to make a slight change to the Cell class method, and rewrite it as follows (the modifications
are in bold):
package com.wakaleo.gameoflife.domain;
public enum Cell {
LIVE_CELL("+"), DEAD_CELL(".");
private String symbol;
private Cell(String symbol) {
this.symbol = symbol;
}
@Override
public String toString() {
return symbol;
}
static Cell fromSymbol(String symbol) {
Cell cellRepresentedBySymbol = null;
for (Cell cell : Cell.values()) {
if (cell.symbol.equals(symbol)) {
cellRepresentedBySymbol = cell;
break;
}
}
return cellRepresentedBySymbol;
}
public String getSymbol() {
return symbol;
}
}
29
Save this change, and then commit them to the local Git repository by running git commit:
$ git commit -a -m "Changes stars to pluses"
[master 61ce946] Changes stars to pluses
1 files changed, 1 insertions(+), 1 deletions(-)
This will commit the changes locally, but since Git is a distributed repository, you now have to push
these changes through to your fork on GitHub. You do this by running git push:
$ git push
Counting objects: 21, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (11/11), 754 bytes, done.
Total 11 (delta 4), reused 0 (delta 0)
To PI:EMAIL:john-smart/game-of-life.git
7882d5c..61ce946 master -> master
Now go back to the Jenkins web page. After a minute or so, a new build should kick off, and fail. In fact,
there are several other places which are affected by this change, and the regression tests related to these
features are now failing. On the build job home page, you will see a second build in the build history with
an ominous red ball (see Figure 2.21, “A failed build”)—this tells you that the latest build has failed.
You might also notice some clouds next to the Build History title—this is the same “weather” icon that
we saw on the home page, and serves the same purpose—to give you a general idea of how stable your
build is over time.
Figure 2.21. A failed build
If you click on the new build history entry, Jenkins will give you some more details about what went
wrong (see Figure 2.22, “The list of all the broken tests”). Jenkins tells us that there were 11 new test
30
failures in this build, something which can be seen at a glance in the Test Result Trend graph—red
indicates test failures. You can even see which tests are failing, and how long they have been broken.
Figure 2.22. The list of all the broken tests
If you want to know exactly what went wrong, that’s easy enough to figure out as well. If you click on
the failed test classes, Jenkins brings up the actual details of the test failures (see Figure 2.23, “Details
about a failed test”), which is a great help when it comes to reproducing and fixing the issue.
Figure 2.23. Details about a failed test
31
Jenkins displays a host of information about the failed test in a very readable form, including the error
message the test produced, the stack trace, how long the test has been broken, and how long it took to
run. Often, this in itself is enough to put a developer on the right track towards fixing the issue.
Now let’s fix the build. To make things simple, we’ll just back out our changes and recommit the code
in its original state (the end users just changed their mind about the asterisks, anyway). So just undo the
changes you made to the Cell class (again, the changes are highlighted in bold):
package com.wakaleo.gameoflife.domain;
public enum Cell {
LIVE_CELL("*"), DEAD_CELL(".");
private String symbol;
private Cell(String symbol) {
this.symbol = symbol;
}
@Override
public String toString() {
return symbol;
}
static Cell fromSymbol(String symbol) {
Cell cellRepresentedBySymbol = null;
for (Cell cell : Cell.values()) {
if (cell.symbol.equals(symbol)) {
cellRepresentedBySymbol = cell;
break;
}
}
return cellRepresentedBySymbol;
}
public String getSymbol() {
return symbol;
}
}
When you’ve done this, commit your changes again:
$ git commit -a -m "Restored the star"
[master bc924be] Restored the star
1 files changed, 1 insertions(+), 1 deletions(-)
$ git push
Counting objects: 21, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (11/11), 752 bytes, done.
Total 11 (delta 4), reused 6 (delta 0)
To PI:EMAIL:john-smart/game-of-life.git
61ce946..bc924be master -> master
32
Once you’ve committed these changes, Jenkins should pick them up and kick off a build. Once this is
done, you will be able to see the fruit of your work on the build job home page (see Figure 2.24, “Now
the build is back to normal”)—the build status is blue again and all is well. Also notice the way we are
building up a trend graph showing the number of succeeding unit tests over time—this sort of report
really is one of Jenkins’s strong points.
Figure 2.24. Now the build is back to normal
2.7. More Reporting—Displaying Javadocs
For many Java projects, Javadoc comments are an important source of low-level technical
documentation. There are even tools, such as UmlGraph, that let you produce Javadoc with embedded
UML diagrams to give you a better picture of how the classes fit together in the application. This sort of
technical documentation has the advantage of being cheap to produce, accurate and always up-to-date.
Jenkins can integrate Javadoc API documentation directly into the Jenkins website. This way, everyone
can find the latest Javadoc easily, in a well known place. Often, this sort of task is performed in a separate
build job, but for simplicity we are going to add another build step to the gameoflife-default build job
to generate and display Javadoc documention for the Game of Life API.
Start off by going into the “gameoflife-default” configuration screen again. Click on “Add build step”,
and add a new build step to “Invoke top level Maven targets” (see Figure 2.25, “Adding a new build step
and report to generate Javadoc”). In the Goals field, place javadoc:javadoc—this will tell Maven to
generate the Javadoc documentation.
33
Figure 2.25. Adding a new build step and report to generate Javadoc
Now go to the “Post-build Action” and tick the “Publish Javadoc” checkbox. This project is a
multimodule project, so a separate subdirectory is generated for each module (core, services, web and
so forth). For this example, we are interested in displaying the documentation for the core module. In
the Javadoc directory field, enter gameoflife-core/target/site/apidocs—this is where Maven
will place the Javadocs it generates for the core module. Jenkins may display an error message saying
that this directory doesn’t exist at first. Jenkins is correct—this directory won’t exist until we run the
javadoc:javadoc goal, but since we haven’t run this command yet we can safely ignore the message
at this stage.
If you tick “Retain Javadoc for each successful build”, Jenkins will also keep track of the Javadocs for
previous builds—not always useful, but it can come in handy at times.
Now trigger a build manually. You can do this either from the build job’s home page (using the Build
Now link), or directly from the server home page. Once the build is finished, open the build job summary
page. You should now see a Javadoc link featuring prominently on the screen—this link will open the
latest version of the Javadoc documentation (see Figure 2.26, “Jenkins will add a Javadoc link to your
build results”). You will also see this link on the build details page, where it will point to the Javadoc
for that particular build, if you have asked Jenkins to store Javadoc for each build.
34
Figure 2.26. Jenkins will add a Javadoc link to your build results
2.8. Adding Code Coverage and Other Metrics
As we mentioned earlier, reporting is one of Jenkins’s strong points. We have seen how easy it is to
display test results and to publish Javadocs, but you can also publish a large number of other very useful
reports using Jenkins’s plugins.
Plugins are another one of Jenkins’s selling points—there are plugins for doing just about anything,
from integrating new build tools or version control systems to notification mechanisms and reporting.
In addition, Jenkins plugins are very easy to install and integrate smoothly into the existing Jenkins
architecture.
To see how the plugins work, we are going to integrate code coverage metrics using the Cobertura
plugin. Code coverage is an indication of how much of your application code is actually executed during
your tests—it can be a useful tool in particular for finding areas of code that have not been tested by
your test suites. It can also give some indication as to how well a team is applying good testing practices
such as Test-Driven Development or Behavior-Driven Development.
Cobertura17 is an open source code coverage tool that works well with both Maven and Jenkins. Our
Maven demonstration project is already configured to record code coverage metrics, so all we need
to do is to install the Jenkins Cobertura plugin and generate the code coverage metrics for Jenkins to
record and display.
17 http://cobertura.sourceforge.net
35
Figure 2.27. Jenkins has a large range of plugins available
To install a new plugin, go to the Manage Jenkins page and click on the Manage Plugins entry. This
will display a list of the available plugins as well as the plugins already installed on your server (see
Figure 2.27, “Jenkins has a large range of plugins available”). If your build server doesn’t have an
Internet connection, you can also manually install a plugin by downloading the plugin file elsewhere and
uploading it to your Jenkins installation (just open the Advanced tab in Figure 2.27, “Jenkins has a large
range of plugins available”), or by copying the plugin to the $JENKINS_HOME/plugins directory.
In our case, we are interested in the Cobertura plugin, so go to the Available tab and scroll down until
you find the Cobertura Plugin entry in the Build Reports section. Click on the checkbox and then click
on the Install button at the bottom of the screen.
This will download and install the plugin for you. Once it is done, you will need to restart your Jenkins
instance to see the fruits of your labor. When you have restarted Jenkins, go back to the Manage Plugins
screen and click on the Installed tab—there should now be a Cobertura Plugin entry in the list of installed
plugins on this page.
Once you have made sure the plugin was successfully installed, go to the configuration page for the
gameoflife-default build job.
To set up code coverage metrics in our project, we need to do two things. First we need to generate the
Cobertura coverage data in an XML form that Jenkins can use; then we need to configure Jenkins to
display the coverage reports.
Our Game of Life project already has been configured to generate XML code coverage reports if we
ask it. All you need to do is to run mvn cobertura:cobertura to generate the reports in XML form.
Cobertura can also generate HTML reports, but in our case we will be letting Jenkins take care of the
reporting, so we can save on build time by not generating the For this example, for simplicity, we will
just add the cobertura:cobertura goal to the second build step (see Figure 2.28, “Adding another
Maven goal to generating test coverage metrics”). You could also add a new build step just for the code
36
coverage metrics. In a real-world project, code quality metrics like this are typically placed in a distinct
build job, which is run less frequently than the default build.
Figure 2.28. Adding another Maven goal to generating test coverage metrics
Next, we need to tell Jenkins to keep track of our code coverage metrics. Scroll down to the “Post-build
Actions” section. You should see a new checkbox labeled Publish Cobertura Reports. Jenkins will often
add UI elements like this when you install a new plugin. When you tick this box, Jenkins will display the
configuration options for the Cobertura plugin that we installed earlier (see Figure 2.29, “Configuring
the test coverage metrics in Jenkins”).
Like most of the code-quality related plugins in Jenkins, the Cobertura plugin lets you fine-tune not only
the way Jenkins displays the report data, but also how it interprets the data. In the Coverage Metrics
Targets section, you can define what you consider to be the minimum acceptable levels of code coverage.
In Figure 2.29, “Configuring the test coverage metrics in Jenkins”, we have configured Jenkins to list
any builds with less than 50% test coverage as “unstable” (indicated by a yellow ball), and notify the
team accordingly.
37
Figure 2.29. Configuring the test coverage metrics in Jenkins
This fine-tuning often comes in handy in real-world builds. For example, you may want to impose a
special code coverage constraint in release builds, to ensure high code coverage in release versions.
Another strategy that can be useful for legacy projects is to gradually increase the minimum tolerated
code coverage level over time. This way you can avoid having to retro-fit unit tests on legacy code just
to raise the code coverage, but you do encourage all new code and bug fixes to be well tested.
Now trigger a build manually. The first time you run the build job with Cobertura reporting activated,
you will see coverage statistics for your build displayed on the build home page, along with a Coverage
Report link when you can go for more details (see Figure 2.30, “Jenkins displays code coverage metrics
on the build home page”). The Cobertura report shows different types of code coverage for the build
we just ran. Since we have only run the test coverage metrics once, the coverage will be displayed as
red and green bars.
38
Figure 2.30. Jenkins displays code coverage metrics on the build home page
If you click on the Coverage Report icon, you will see code coverage for each package in your
application, and even drill down to see the code coverage (or lack thereof) for an individual class (see
Figure 2.31, “Jenkins lets you display code coverage metrics for packages and classes”). When you get
to this level, Jenkins displays both the overall coverage statistics for the class, and also highlights the
lines that were executed in green, and those that weren’t in red.
This reporting gets better with time. Jenkins not only reports metrics data for the latest build, but also
keeps track of metrics over time, so that you can see how they evolve throughout the life of the project.
For example, if you drill down into the coverage reports, you will notice that certain parts of this code
are not tested (for example the Cell.java class in Figure 2.31, “Jenkins lets you display code coverage
metrics for packages and classes”).
39
Figure 2.31. Jenkins lets you display code coverage metrics for packages and classes
Code coverage metrics are a great way to isolate code that has not been tested, in order to add extra
tests for corner cases that were not properly tested during the initial development, for example. The
Jenkins code coverage graphs are also a great way of keeping track of your code coverage metrics as
the project grows. Indeed, as you add new tests, you will notice that Jenkins will display a graph of
code coverage over time, not just the latest results (see Figure 2.32, “Jenkins also displays a graph of
code coverage over time”).
40
Figure 2.32. Jenkins also displays a graph of code coverage over time
Note that our objective here is not to improve the code coverage just for the sake of improving code
coverage—we are adding an extra test to verify some code that was not previously tested, and as a result
the code coverage goes up. There is a subtle but important difference here—code coverage, as with any
other metric, is very much a means to an end (high code quality and low maintenance costs), and not
an end in itself.
Nevertheless, metrics like this can give you a great insight into the health of your project, and Jenkins
presents them in a particularly accessible way.
This is just one of the code quality metrics plugins that have been written for Jenkins. There are many
more (over fifty reporting plugins alone at the time of writing). We’ll look at some more of them in