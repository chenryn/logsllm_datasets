### Code Changes and Version Control

The `Cell` class in the application is used to represent the state of each cell in the grid. Currently, the application prints live cells as an asterisk (`*`) and dead cells as a minus character (`-`). For example, a 5x5 grid with a single live cell in the center would look like this:

```
-----
--*--
-----
```

Users have requested a change: they want pluses (`+`) instead of asterisks. To accommodate this, we will modify the `Cell` class. The updated code is as follows (changes are highlighted in bold):

```java
package com.wakaleo.gameoflife.domain;

public enum Cell {
    LIVE_CELL("+"), DEAD_CELL(".");
    
    private String symbol;
    
    private Cell(String symbol) {
        this.symbol = symbol;
    }
    
    @Override
    public String toString() {
        return symbol;
    }
    
    static Cell fromSymbol(String symbol) {
        Cell cellRepresentedBySymbol = null;
        for (Cell cell : Cell.values()) {
            if (cell.symbol.equals(symbol)) {
                cellRepresentedBySymbol = cell;
                break;
            }
        }
        return cellRepresentedBySymbol;
    }
    
    public String getSymbol() {
        return symbol;
    }
}
```

After making these changes, commit them to the local Git repository:

```sh
$ git commit -a -m "Changes stars to pluses"
[master 61ce946] Changes stars to pluses
1 files changed, 1 insertions(+), 1 deletions(-)
```

Next, push the changes to your fork on GitHub:

```sh
$ git push
Counting objects: 21, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (11/11), 754 bytes, done.
Total 11 (delta 4), reused 0 (delta 0)
To PI:EMAIL:john-smart/game-of-life.git
7882d5c..61ce946 master -> master
```

### Jenkins Build and Test Failures

Once the changes are pushed, Jenkins will automatically trigger a new build. After a few minutes, you will see that the build has failed. The build history will show a red ball, indicating a failed build (Figure 2.21, “A failed build”).

Clicking on the build history entry will provide more details about the failures. Jenkins reports 11 new test failures, which can be seen in the Test Result Trend graph (Figure 2.22, “The list of all the broken tests”).

For more detailed information, click on the failed test classes. Jenkins will display the error messages, stack traces, and other relevant details (Figure 2.23, “Details about a failed test”).

### Reverting the Changes

To fix the build, revert the changes made to the `Cell` class and recommit the code to its original state. The updated code is as follows:

```java
package com.wakaleo.gameoflife.domain;

public enum Cell {
    LIVE_CELL("*"), DEAD_CELL(".");
    
    private String symbol;
    
    private Cell(String symbol) {
        this.symbol = symbol;
    }
    
    @Override
    public String toString() {
        return symbol;
    }
    
    static Cell fromSymbol(String symbol) {
        Cell cellRepresentedBySymbol = null;
        for (Cell cell : Cell.values()) {
            if (cell.symbol.equals(symbol)) {
                cellRepresentedBySymbol = cell;
                break;
            }
        }
        return cellRepresentedBySymbol;
    }
    
    public String getSymbol() {
        return symbol;
    }
}
```

Commit the changes:

```sh
$ git commit -a -m "Restored the star"
[master bc924be] Restored the star
1 files changed, 1 insertions(+), 1 deletions(-)
$ git push
Counting objects: 21, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (11/11), 752 bytes, done.
Total 11 (delta 4), reused 6 (delta 0)
To PI:EMAIL:john-smart/game-of-life.git
61ce946..bc924be master -> master
```

Jenkins will pick up the changes and trigger a new build. Once the build is successful, the build status will turn blue again, and the trend graph will show the number of succeeding unit tests over time (Figure 2.24, “Now the build is back to normal”).

### Adding Javadoc Documentation

Javadoc comments are an important source of technical documentation for Java projects. Jenkins can integrate Javadoc API documentation directly into the Jenkins website.

1. Go to the configuration screen for the `gameoflife-default` build job.
2. Click on “Add build step” and add a new build step to “Invoke top level Maven targets”.
3. In the Goals field, enter `javadoc:javadoc` to generate the Javadoc documentation.
4. Go to the “Post-build Action” section and tick the “Publish Javadoc” checkbox.
5. Enter `gameoflife-core/target/site/apidocs` in the Javadoc directory field.
6. Optionally, tick “Retain Javadoc for each successful build” to keep track of Javadocs for previous builds.

Trigger a manual build. Once the build is finished, you will see a Javadoc link on the build job summary page, leading to the latest version of the Javadoc documentation (Figure 2.26, “Jenkins will add a Javadoc link to your build results”).

### Adding Code Coverage Metrics

Code coverage metrics help identify untested parts of the code. We will use the Cobertura plugin to integrate code coverage into Jenkins.

1. Go to the Manage Jenkins page and click on “Manage Plugins”.
2. Install the Cobertura Plugin from the Available tab.
3. Restart Jenkins after the installation.
4. Go to the configuration page for the `gameoflife-default` build job.
5. Add the `cobertura:cobertura` goal to the second build step.
6. In the “Post-build Actions” section, tick the “Publish Cobertura Reports” checkbox.
7. Configure the minimum acceptable levels of code coverage in the Coverage Metrics Targets section.

Trigger a manual build. The first time you run the build job with Cobertura reporting, you will see coverage statistics on the build home page, along with a Coverage Report link for more details (Figure 2.30, “Jenkins displays code coverage metrics on the build home page”).

You can drill down to see code coverage for individual packages and classes (Figure 2.31, “Jenkins lets you display code coverage metrics for packages and classes”). Jenkins also displays a graph of code coverage over time (Figure 2.32, “Jenkins also displays a graph of code coverage over time”).

### Conclusion

Jenkins provides powerful tools for continuous integration, including test result reporting, Javadoc generation, and code coverage metrics. These features help ensure high code quality and low maintenance costs. There are many more plugins available for Jenkins, providing a wide range of additional functionalities.