	+ 如果键也没有出现在 inifile 处理器中，dba\_delete() 现在会返回 false。
* GMP
	+ 现在要求 libgmp 版本 4.2 或更新。
	+ gmp\_setbit() 和 gmp\_clrbit() 对于负指标返回 FALSE，和其它的 GMP 函数一致。
* Intl:
	+ 移除废弃的别名 datefmt\_set\_timezone\_id() 和 IntlDateFormatter::setTimeZoneID()。替代使用 datefmt\_set\_timezone() 和 IntlDateFormatter::setTimeZone()。
* libxml:
	+ 增加 LIBXML\_BIGLINES 解析器选项。从 libxml 2.9.0 开始可用，并增加了在错误报告中行号大于 16 位的支持。
* Mcrypt
	+ 移除等同于 mcrypt\_generic\_deinit() 的废弃别名 mcrypt\_generic\_end()。
	+ 移除废弃的 mcrypt\_ecb()、 mcrypt\_cbc()、 mcrypt\_cfb() 和 mcrypt\_ofb() 函数，它们等同于使用 MCRYPT\_MODE\_\* 标志的 mcrypt\_encrypt() 和 mcrypt\_decrypt() 。
* Session
	+ session\_start() 以数组方式接受所有的 INI 设置。例如， ['cache\_limiter'=>'private'] 会设置 session.cache\_limiter=private 。也支持 'read\_and\_close' 以在读取数据后立即关闭会话数据。
	+ 会话保存处理器接受使用 validate\_sid() 和 update\_timestamp() 来校验会话 ID 是否存在、更新会话时间戳。对旧式的用户定义的会话保存处理器继续兼容。
	+ 增加了 SessionUpdateTimestampHandlerInterface 。 validateSid()、 updateTimestamp() 定义在接口里面。
	+ session.lazy\_write(默认是 On) 的 INI 设置支持仅在会话数据更新时写入。
* Opcache
	+ 移除 opcache.load\_comments 配置语句。现在文件内备注载入无成本，并且总是启用的。
* OpenSSL:
	+ 移除 "rsa\_key\_size" SSL 上下文选项，按给出的协商的加密算法自动设置适当的大小。
	+ 移除 "CN\_match" 和 "SNI\_server\_name" SSL 上下文选项。使用自动侦测或 "peer\_name" 选项替代。
* PCRE:
	+ 移除对 /e (PREG\_REPLACE\_EVAL) 修饰符的支持，使用 preg\_replace\_callback() 替代。
* PDO\_pgsql:
	+ 移除 PGSQL\_ATTR\_DISABLE\_NATIVE\_PREPARED\_STATEMENT 属性，等同于 ATTR\_EMULATE\_PREPARES。
* Standard:
	+ 移除 setlocale() 中的字符串类目支持。使用 LC\_\* 常量替代。 instead.
	+ 移除 set\_magic\_quotes\_runtime() 及其别名 magic\_quotes\_runtime()。
* JSON:
	+ 拒绝 json\_decode 中的 RFC 7159 不兼容数字格式 - 顶层 (07, 0xff, .1, -.1) 和所有层的 ([1.], [1.e1])
	+ 用一个参数调用 json\_decode 等价于用空的 PHP 字符串或值调用，转换为空字符串（NULL, FALSE）的结果是 JSON 格式错误。
* Stream:
	+ 移除 set\_socket\_blocking() ，等同于其别名 stream\_set\_blocking()。
* XSL:
	+ 移除 xsl.security\_prefs ini 选项，使用 XsltProcessor::setSecurityPrefs() 替代。
2. 新功能
------
* Core
	+ 增加了组式 use 声明。 (RFC: )
	+ 增加了 null 合并操作符 (??)。 (RFC: )
	+ 在 64 位架构上支持长度 >= 2 31 字节的字符串。
	+ 增加了 Closure::call() 方法（仅工作在用户侧的类）。
	+ 在双引号字符串和 here 文档中增加了 \u{xxxxxx} Unicode 码点转义格式。
	+ define() 现在支持数组作为常量值，修复了一个当 define() 还不支持数组常量值时的疏忽。
	+ 增加了比较操作符 ()，即太空船操作符。 (RFC: )
	+ 为委托生成器添加了类似协程的 yield from 操作符。 (RFC: )
	+ 保留的关键字现在可以用在几种新的上下文中。 (RFC: )
	+ 增加了标量类型的声明支持，并可以使用 declare(strict\_types=1) 的声明严格模式。 (RFC: )
	+ 增加了对加密级安全的用户侧的随机数发生器的支持。 (RFC: )
* Opcache
	+ 增加了基于文件的二级 opcode 缓存（实验性——默认禁用）。要启用它，PHP 需要使用 --enable-opcache-file 配置和构建，然后 opcache.file\_cache= 配置指令就可以设置在 php.ini 中。二级缓存也许可以提升服务器重启或 SHM 重置时的性能。此外，也可以设置 opcache.file\_cache\_only=1 来使用文件缓存而根本不用 SHM（也许对于共享主机有用）；设置 opcache.file\_cache\_consistency\_checks=0 来禁用文件缓存一致性检查，以加速载入过程，有安全风险。
* OpenSSL
	+ 当用 OpenSSL 1.0.2 及更新构建时，增加了 "alpn\_protocols" SSL 上下文选项来允许加密的客户端/服务器流使用 ALPN TLS 扩展去协商替代的协议。协商后的协议信息可以通过 stream\_get\_meta\_data() 输出访问。
* Reflection
	+ 增加了一个 ReflectionGenerator 类（yield from Traces，当前文件/行等等）。
	+ 增加了一个 ReflectionType 类来更好的支持新的返回类型和标量类型声明功能。新的 ReflectionParameter::getType() 和 ReflectionFunctionAbstract::getReturnType() 方法都返回一个 ReflectionType 实例。
* Stream
	+ 添加了新的仅用于 Windows 的流上下文选项以允许阻塞管道读取。要启用该功能，当创建流上下文时，传递 array("pipe" => array("blocking" => true)) 。要注意的是，该选项会导致管道缓冲区的死锁，然而它在几个命令行场景中有用。
3. SAPI 模块的变化
-------------
* FPM
	+ 修复错误 #65933 （不能设置超过1024字节的配置行）。
	+ Listen = port 现在监听在所有地址上（IPv6 和 IPv4 映射的）。
4. 废弃的功能
--------
* Core
	+ 废弃了 PHP 4 风格的构建函数（即构建函数名必须与类名相同）。
	+ 废弃了对非静态方法的静态调用。
* OpenSSL
	+ 废弃了 "capture\_session\_meta" SSL 上下文选项。 在流资源上活动的加密相关的元数据可以通过 stream\_get\_meta\_data() 的返回值访问。
5. 函数的变化
--------
* parse\_ini\_file():
* parse\_ini\_string():
	+ 添加了扫描模式 INI*SCANNER*TYPED 来得到 yield 类型的 .ini 值。
* unserialize():
	+ 给 unserialize 函数添加了第二个参数 (RFC: ) 来指定可接受的类： unserialize($foo, ["allowed\_classes" => ["MyClass", "MyClass2"]]);
* proc\_open():
	+ 可以被 proc\_open() 使用的最大管道数以前被硬编码地限制为 16。现在去除了这个限制，只受限于 PHP 的可用内存大小。
	+ 新添加的仅用于 Windows 的配置选项 "blocking\_pipes" 可以用于强制阻塞对子进程管道的读取。这可以用于几种命令行应用场景，但是它会导致死锁。此外，这与新的流的管道上下文选项相关。
* array\_column():
	+ 该函数现在支持把对象数组当做二维数组。只有公开属性会被处理，对象里面使用 \_\_get() 的动态属性必须也实现 \_\_isset() 才行。
* stream\_context\_create()
	+ 现在可以接受一个仅 Windows 可用的配置 array("pipe" => array("blocking" => )) 来强制阻塞管道读取。该选项应该小心使用，该平台有可能导致管道缓冲区的死锁。
6. 新函数
------
* GMP
	+ 添加了 gmp\_random\_seed()。
* PCRE:
	+ 添加了 preg\_replace\_callback\_array 函数。 (RFC: )
* Standard . 添加了整数除法 intdiv() 函数。 . 添加了重置错误状态的 error\_clear\_last() 函数。
* Zlib: . 添加了 deflate\_init()、 deflate\_add()、 inflate\_init()、 inflate\_add() 函数来运行递增和流的压缩/解压。
7. 新的类和接口
---------
（暂无）
8. 移除的扩展和 SAPI
--------------
* sapi/aolserver
* sapi/apache
* sapi/apache\_hooks
* sapi/apache2filter
* sapi/caudium
* sapi/continuity
* sapi/isapi
* sapi/milter
* sapi/nsapi
* sapi/phttpd
* sapi/pi3web
* sapi/roxen
* sapi/thttpd
* sapi/tux
* sapi/webjames
* ext/mssql
* ext/mysql
* ext/sybase\_ct
* ext/ereg
更多细节参见：
* 
* 
注意：NSAPI 没有在 RFC 中投票，不过它会在以后移除。这就是说，它相关的 SDK 今后不可用。
9. 扩展的其它变化
----------
* Mhash
	+ Mhash 今后不是一个扩展了，使用 function\_exists("mhash") 来检查器是否可用。
10. 新的全局常量
----------
* Core . 添加 PHP\_INT\_MIN
* Zlib
	+ 添加的这些常量用于控制新的增量deflate\_add() 和 inflate\_add() 函数的刷新行为：
	+ ZLIB\_NO\_FLUSH
	+ ZLIB\_PARTIAL\_FLUSH
	+ ZLIB\_SYNC\_FLUSH
	+ ZLIB\_FULL\_FLUSH
	+ ZLIB\_BLOCK
	+ ZLIB\_FINISH
* GD
	+ 移除了 T1Lib 支持，这样由于对 T1Lib 的可选依赖，如下将来不可用：函数：
	+ imagepsbbox()
	+ imagepsencodefont()
	+ imagepsextendedfont()
	+ imagepsfreefont()
	+ imagepsloadfont()
	+ imagepsslantfont()
	+ imagepstext()资源：
	+ 'gd PS font'
	+ 'gd PS encoding'
11. INI 文件处理的变化
---------------
* Core
	+ 移除了 asp\_tags ini 指令。如果启用它会导致致命错误。
	+ 移除了 always\_populate\_raw\_post\_data ini 指令。
12. Windows 支持
--------------
* Core
	+ 在 64 位系统上支持原生的 64 位整数。
	+ 在 64 位系统上支持大文件。
	+ 支持 getrusage()。
* ftp
	+ 所带的 ftp 扩展总是共享库的。
	+ 对于 SSL 支持，取消了对 openssl 扩展的依赖，取而代之仅依赖 openssl 库。如果在编译时需要，会自动启用 ftp\_ssl\_connect()。
* odbc
	+ 所带的 odbc 扩展总是共享库的。
13. 其它变化
--------
* Core
	+ NaN 和 Infinity 转换为整数时总是 0，而不是未定义和平台相关的。
	+ 对非对象调用方法会触发一个可捕获错误，而不是致命错误；参见： 
	+ zend\_parse\_parameters、类型提示和转换，现在总是用 "integer" 和 "float"，而不是 "long" 和 "double"。
	+ 如果 ignore\_user\_abort 设置为 true ，对应中断的连接，输出缓存会继续工作。
---
via: 
作者：[php](https://github.com/php) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出