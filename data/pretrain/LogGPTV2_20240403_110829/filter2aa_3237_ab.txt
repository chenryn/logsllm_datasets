# American Fuzzy Lop (AFL) for Code Path Exploration and Bug Discovery

**Introduction to AFL**
- **Overview**: AFL is a coverage-guided fuzzer designed to explore new code paths efficiently.
- **Use Case**: Ideal for generating a comprehensive test corpus and quickly identifying buggy code paths.
- **Reference**: For more details, visit [http://lcamtuf.coredump.cx/afl/](http://lcamtuf.coredump.cx/afl/).

**Second Round Methodology for Stagefright Testing**
1. **Harness Development**: Create a testing harness specifically for Stagefright.
2. **Fuzzing Execution**: Run AFL on high-performance hardware.
3. **Periodic Analysis**: Regularly triage, analyze, and restart the fuzzer.
4. **Bug Management**: Catalog and fix bugs as they are discovered.

**Second Round Results**
- **Duration**: Approximately 3 weeks of testing.
- **Modes Used**: Both default and dictionary-based modes.
- **ASAN Usage**: Tested with and without AddressSanitizer (ASAN).
- **Performance**: Achieved around 3200 tests per second.
- **Total CPU Time**: Over 6 months of CPU time.
- **Critical Issues Found**: Discovered five critical issues and numerous less-severe crashing bugs.
- **Final Status**: The code was fuzzed clean by the end of the testing period.

**Bug Summary**
- **CVE-2015-1538 #1**: MP4 'stsc' Integer Overflow
- **CVE-2015-1538 #2**: MP4 'ctts' Integer Overflow
- **CVE-2015-1538 #3**: MP4 'stts' Integer Overflow
- **CVE-2015-1538 #4**: MP4 'stss' Integer Overflow
- **CVE-2015-1539**: MP4 'esds' Integer Underflow
- **CVE-2015-3824**: MP4 'tx3g' Integer Overflow
- **CVE-2015-3826**: MP4 3GPP Buffer Overread
- **CVE-2015-3827**: MP4 'covr' Integer Underflow
- **CVE-2015-3828**: MP4 3GPP Integer Underflow
- **CVE-2015-3829**: MP4 'covr' Integer Overflow
- **Additional Fixes**: Numerous stability improvements.

**Vulnerability Details**
- **Example Fix**: 
  ```c
  @@ -330,6 +330,10 @@ status_t SampleTable::setTimeToSampleParams(
      }
      mTimeToSampleCount = U32_AT(&header[4]);
  +    uint64_t allocSize = mTimeToSampleCount * 2 * sizeof(uint32_t);
  +    if (allocSize > SIZE_MAX) {
  +        return ERROR_OUT_OF_RANGE;
  +    }
      mTimeToSample = new uint32_t[mTimeToSampleCount * 2];
      size_t size = sizeof(uint32_t) * mTimeToSampleCount * 2;
  ```

**Exploitability Analysis**
- **Memory Corruption**: Many vulnerabilities result in heap memory corruption.
- **Historical Exploits**: Similar issues have been exploited in the past.
- **Android Mitigations**: Android's security features provide some protection.
- **Ecosystem Diversity**: The diversity of the Android ecosystem complicates research but does not prevent exploitation.

**mediaserver Recap**
- **Properties**:
  - **Init Spawn**: Spawns from `init` (a native service), bypassing Zygote ASLR.
  - **Attack Retries**: Possible to retry attacks indefinitely.
  - **ASLR Bypass**: Potential to bypass ASLR through brute force.
  - **Multi-threading**: Less deterministic heap usage.

**New Mitigation in Android 5.0**
- **Heap Implementation**: Switched to jemalloc.
- **Integer Overflow Mitigation**: Introduced in GCC 5.0.
- **Code Equivalence**:
  ```c
  236     mSampleToChunkEntries =
  237         new SampleToChunkEntry[mNumSampleToChunkOffsets];
  236     mSampleToChunkEntries =
  237         malloc(mNumSampleToChunkOffsets * sizeof(SampleToChunkEntry));
  ```

**Mitigation Summary**
- **SELinux**: Not applicable.
- **Stack Cookies**: Not applicable.
- **FORTIFY_SOURCE**: Not applicable.
- **ASLR**: Only in Android >= 4.0.
- **NX**: Can be bypassed with Return-Oriented Programming (ROP).
- **GCC new[] mitigation**: Not applicable.
- **ASLR Bypass**: Partially possible on ICS and later versions.

**Disclosure Process**
- **Patch Submission**: Reported via patches to Google, Mozilla, and Blackphone.
- **Embargo Request**: 90-day embargo requested despite a 30-day policy.
- **Fix Deployment**: Patches accepted and applied within 4 days by Android, Mozilla, and Blackphone.

**Update Deployment**
- **Ongoing**: Still in progress.
- **Impact**: Significant positive impact on Android security.
- **Improvements**: New 30-day patch cycles for Google and Samsung, and updates for older devices.

**Conclusions**
- **Audit and Fuzz**: More attention needed for auditing, fuzzing, and testing.
- **Vendor Responsibility**: Vendors should be more proactive in finding and fixing flaws, and more aggressive in deploying fixes.
- **Positive Trend**: Improvements are being made, as discussed in Adrian's talk.

**Contact Information**
- **Name**: Joshua J. Drake
- **Email**: PI:EMAIL
- **Social Media**: @jduck (Twitter/IRC)
- **Website**: [www.droidsec.org](http://www.droidsec.org)

**Bonus Slides**
- **Media Scanner Discovery**: Detailed journey into the MediaScanner and its various invocation points.
- **Vectors into the Media Scanner**: Multiple entry points and applications that use the MediaScanner.
- **MTP/PTP and MMS Testing**: Challenges and solutions for testing via MTP/PTP and MMS without carriers.

Thank you for your time! Any questions?