argument.length value is annotated to have a range of 0 to 2**16-2. This assumption is true 
if a function is invoked by using standard syntax like target_function(arg_1, 
arg_2,/*..*/, arg_n). However, in JavaScript functions can also be invoked via the 
apply() function as demonstrated in lines 13 and 15. Using this syntax more than 2**16-2 
arguments can be passed to the function. Also note that a third alternative exists to pass 
more arguments using the spread operator: opt(...small) 
Because the opt function is called in line 13 in a loop, compilation of the function is triggered. 
The compiler assumes that the maximum value of x in line 2 is 2**16-1 = 0xfffe. In line 
5, the value is shifted 16 bits to the right. The result of this shift operation is for inputs like 
0xfffe or smaller values always zero. The compiler therefore assumes that the array access 
in a1 in line 5 is always in bounds because index 0 is accessible in an array of length 0x10.  
The compiler therefore removes bound checks. However, using the apply function, 
arguments.length can be bigger than the compiler assumed value which leads to OOB 
access in the function invocation in line 15. The large argument array stores 65,536 = 
0x10000 elements. When this value is shifted 16 bits right in line 5 the result is 1. After 
multiplication, it leads to an access of index 0xf00000 which is an OOB access because of 
the removed bounds check. 
The array from line 4 is not required to trigger the vulnerability. However, if the multiplication 
in line 5 is changed to a multiplication by 0x15, the code overwrites the length field of array 
a2 with the OOB access. After that, a2 can be used for OOB read and write access. 
A full exploit from Tianfu Cup 2019 is available in the bug tracker 162. A detailed writeup and 
another exploit is available at 163. 
162 https://bugs.chromium.org/p/chromium/issues/detail?id=906043 
163 https://github.com/vngkv123/aSiagaming/blob/master/Chrome-v8-906043/Chrome%20V8%20-%20-CVE-
2019-5782%20Tianfu%20Cup%20Qihoo%20360%20S0rrymybad-%20-ENG-.pdf 
86 
Generalization for variation analysis: 
• 
A fuzzer should implement the function.apply syntax as well as the spread operator 
to pass a large number of arguments to functions. 
• 
A fuzzer should integrate new language features such as the spread operator. 
• 
A fuzzer should add array access code similar to line 5 to identify OOB array 
accesses. 
Edge CVE-2019-0539 – Type-Confusion via InitClass 
01: function opt(o, c, value) { 
02:     o.b = 1; 
// Step1: Add a type check 
03:     class A extends c { // Step2: trigger side effect; transition the object 
04:     } 
05:     o.a = value; // Step3: Access without type check; overwrite slot array pointer 
06: } 
07: for (let i = 0; i  
• 
A fuzzer should modify the prototype of objects. 
• 
If an optimized function writes to a property, code which reads the property after the 
function invocation should be added. For example, line 6 writes to property a and 
therefore line 15 was added which attempts to access this property. This does not 
only detect type confusions between inlined properties and the usage of the slots-
pointer, but also detects type confusions between raw double encoded values and 
double values stored in heap objects.  
Firefox bug 1537924, CVE-2019-9810 (Pwn2Own 2019) – Incorrect alias information in 
Array.prototype.slice() 
01: let Arr = null; let Spray = []; let trigger = false; 
02: function opt(Special, Idx, Value) { 
03:     Arr[Idx] = 0x41414141;  // Step1: Access is protected with a bounds check 
04:     Special.slice();        // Step2: Compiler incorrectly assumes no side effect 
05:     Arr[Idx] = Value;       // Step3: Bound check is not performed again 
06: } 
07: class SoSpecial extends Array { 
08:     static get [Symbol.species]() { 
09:         return function () { 
10:             if (!trigger) { 
11:                 return; 
12:             } 
13:             Arr.length = 0;     // Perform the side effect 
14:             gc();               // Trigger garbage collection 
15:         }; 
16:     } 
17: }; 
18: const specialArray = new SoSpecial(); 
19: Arr = new Array(0x7e); 
20: for (let Idx = 0; Idx < 0x400; Idx++) { 
21:     opt(specialArray, 0x30, Idx); 
22: } 
23: trigger = true; 
24: opt(specialArray, 0x20, 0xBBBBBBBB); 
In the opt function the array is accessed at the passed index. Because of this access, the 
compiler adds code which checks the index against the array bounds to protect against OOB 
access. The index is accessed two times, in line 3 and 5 in the opt function. The compiler 
assumes that the slice function cannot have a side effect and therefore that the bound check 
must not be performed again because the array cannot change in the meantime. However, 
this assumption is wrong because Symbol.species can be used to introduce a side effect.  
88 
Symbol.species specifies the new constructor for the array when the array gets copied. 
When the slice method gets called this happens and the specified constructor function gets 
invoked. In this function the array length is modified to a length of zero and garbage collection 
is triggered to free the previous array memory. Because the bound check was removed for 
the second array access in line 5, this access leads to OOB read and write. 
This vulnerability was exploited by the fluoroacetate team during Pwn2Own 2019. A detailed 
writeup can be found at 165 and at 166. A public exploit is available at 167 and a full chain exploit 
including a sandbox escape is available at 168. 
Generalization for variation analysis: 
• 
The code construct from line 7 to 9 should be used to trigger a callback function via 
Symbol.species. 
• 
A fuzzer should integrate a global variable trigger, which is initially set to false and 
which gets flipped to true at a random code location. A fuzzer should flip the variable 
more frequently to true before the last invocation of the opt function, after function 
compilation was already triggered. A callback, triggered by the opt function, should 
perform state modification operations if the trigger value is true. 
• 
The state modification operations should depend on the code structure of the opt 
function. For example, in line 3 and 5 array access operations are performed on the 
Arr variable. The callback should therefore modify the array length of the Arr variable. 
165 https://doar-e.github.io/blog/2019/06/17/a-journey-into-ionmonkey-root-causing-cve-2019-9810/ 
166 https://www.zerodayinitiative.com/blog/2019/4/18/the-story-of-two-winning-pwn2own-jit-vulnerabilities-in-
mozilla-firefox 
167 https://github.com/0vercl0k/CVE-2019-9810 
168 https://github.com/0vercl0k/CVE-2019-11708 
89 
Chromium issue 1053604, CVE-2020-6418 – Incorrect side effect modelling for 
JSCreate 
01: ITERATIONS = 10000; 
02: TRIGGER = false; 
03: function opt(a, p) { 
04:     return a.pop(Reflect.construct(function() {}, arguments, p)); 
05: } 
06: let a; 
07: let p = new Proxy(Object, { 
08:     get: function() { 
09:         if (TRIGGER) { 
10:             a[2] = 1.1; // Change elements-kind to double values 
11:         } 
12:         return Object.prototype; 
13:     } 
14: }); 
15: for (let i = 0; i < ITERATIONS; i++) { 
16:     let isLastIteration = i == ITERATIONS - 1; 
17:     a = [0, 1, 2, 3, 4]; // Just store SMI values 
18:     if (isLastIteration) 
19:         TRIGGER = true; 
20:     print(opt(a, p)); 
21: } 
The opt function calls the Array.prototype.pop() function which gets incorrectly optimized. 
This function call is translated in the sea-of-nodes to a JSCall node. The Reflect.construct() 
function creates a new object and becomes therefore a JSCreate node. The problem occurs 
when the JSCall node gets reduced and inlined during optimization. 
Since the array could store all kind of elements like integers, doubles or objects, typically 
generic code must be added which handles all elements. However, if the compiler can 
ensure that only specific values like SMIs (small integers) are passed, the compiler can avoid 
the slow generic code and instead only add code which handles SMIs. The compiler adds a 
CheckMaps node which verifies at runtime that the assumed type is correct and deoptimizes 
otherwise. If the compiler already added a CheckMaps node before, the second CheckMaps 
node can be removed if no side effect can occur between the operations. To find previous 
CheckMaps nodes the sea-of-nodes is traversed backwards starting from the JSCall node 
by following the effect edges. Effect edges are special edges in the sea-of-nodes. 
The root cause of the vulnerability is the handling of JSCreate nodes during backward 
traversal. The patch diff 169 shows that in line 360 the result is set to kReliableReceiverMaps. 
In a loop all node types are checked and the result is accordingly adapted. This is a blacklist 
instead of a whitelist approach and it contained a flaw where the result was not updated to 
kUnreliableReceiverMaps and therefore the default value kReliableReceiverMaps from line 
360 was returned. 
That means, that the compiler assumed a reliable map of the object instead of an unreliable 
one. For example, in the above PoC the compiler infers that the passed array just contains 
SMIs and it assumes that this map is reliable. However, it is not reliable because the 
169 https://chromium-review.googlesource.com/c/v8/v8/+/2062396/4/src/compiler/node-properties.cc#360 
90 
JSCreate node can have a side effect. It is important that the Reflect.construct() return value 
is passed as argument to the Array.prototype.pop() call to create the required effect edge 
between the two nodes. This is required because the JSCreate node, which was added for 
the Reflect.construct() function call, must be visited during the backward traversal to trigger 
the vulnerability. Note that per default the Array.prototype.pop() function does not receive 
input arguments, however, in JavaScript such arguments can still be passed. 
The Reflect.construct() call, which is translated to the JSCreate node, can change the type 
of the array because a proxy can be applied on the third argument. In the PoC the proxy 
modifies in line 10 the second element of the array to store a double value. This changes 
the elements-kind of the array and therefore the map. However, the compiler assumed that 
this cannot happen and therefore just added code to pop values from a SMI array. The 
inlined pop operation therefore incorrectly interprets the double value from line 10 as integer. 
The following figures demonstrate the vulnerability. Figure 6 shows not vulnerable code 
because the Reflect.construct() output is not passed as an argument and the vulnerability is 
therefore not triggered because of the missing effect edge. 
Figure 6: Sea-of-nodes of a not vulnerable version of the code 
Node 34 performs the call to Reflect.construct() which corresponds to a JSCreate. In node 
218 a DeoptimizeIf node was added which deoptimizes if elements-kind is not SMI. The 
Array.pop() implementation for SMI values starts at the IfFalse node 229. The branch at 
node 228 checks if the array length is 0 and therefore the false branch contains the code to 
pop a value. The actual nodes, which perform the pop operation and which adapt the array 
length, are not shown above because only control flow nodes are visible. 
91 
Figure 7 shows the generated graph in the vulnerable case. The compiler initially added two 
CheckMap nodes which translated in a later compiler phase to DeoptimizeIf and 
DeoptimizeUnless nodes. Since the DeoptimizeIf node 219 already performed a check 
before call node 40, the DeoptimizeIf node afterwards, which was added together with node 
228, was removed. The vulnerability can be identified by comparing the graph from Figure 6 
with the graph from Figure 7. In the first case a DeoptimizeIf node is located after the call 
node whereas in the second case this node is missing which introduces the vulnerability. 
The node removal was done by the compiler under the assumption that the call from node 
40 cannot have a side effect. However, it can have a side effect and modify the elements-
kind of the array. That means, that the inlined Array.prototype.pop() code, which is located 
around node 236, incorrectly performs a pop operation on SMI values, although the array 
can already store objects or double values. 
Figure 7: Sea-of-nodes for vulnerable code 
By using a push instead of the pop operation and by storing initially double values and 
changing the elements-kind to generic elements inside the proxy callback, an OOB write can 
be performed. This is possible because double values are stored using eight bytes and when 
elements-kind changes to generic elements, double values and objects are stored by using 
pointers to heap objects. Because of pointer compression170 171 a pointer can be stored by 
just using four bytes on 64-bit systems. The inlined push operation assumes eight bytes per 
170 https://v8.dev/blog/pointer-compression 
171 https://docs.google.com/document/d/10qh2-b4C5OtSg-xLwyZpEI5ZihVBPtn1xwKBbQC26yI/edit# 
92 
index but the array just uses four bytes per index and therefore the write operation is done 
OOB of the array on adjacent memory. This can be used to overwrite the length field of a 
subsequent array which can be turned to full code executing by using classic exploitation 
techniques. 
The vulnerability was exploited in the wild and detected by the Google threat analysis group. 
It was reported to the Chromium team on 2020-02-18, a public commit with the fix and a 
regression test was available on 2020-02-19. A fixed version was shipped on 2020-02-25. 
Exodus Intelligence published a full exploit with a writeup 172 on 2020-02-24 which was 
developed based on the public available commit message. 
When this vulnerability was analyzed as part of the thesis research, the newest available 
Foxit Reader version was 9.7.1.29511, which was released on 2020-01-16. This version 
uses v8 in version 7.7.299.6 which was released on 2019-08-26. This version is affected by 
the vulnerability and can therefore be exploited. Since Foxit Reader disabled some language 
features the public available exploit must slightly be adapted. 
The author of this thesis developed together with the second supervisor a reliable exploit for 
the vulnerability which achieves full code execution without crashing Foxit Reader, bypasses 
all in-place memory protections and is invisible for victims. The vulnerability was reported 
together with the exploit to TrendMicro’s Zero Day Initiative which reported the vulnerability 
to Foxit Cooperation. The vulnerability is tracked as ZDI-20-933 173. The vulnerability was 
fixed on 2020-07-31. CVE-2020-15638 was assigned to this vulnerability. 
The vulnerability was also exploited by Röttger to attack the Steam browser on Linux 174 
which uses an outdated Chromium fork. 
Generalization for variation analysis: 
• 
A fuzzer can create code which passes more arguments to functions than the 
function expects. This should not change the semantics of the code, but it can create 
additional effect edges in the sea-of-nodes which can trigger vulnerabilities. 
Especially function invocations can be passed as additional arguments. 
• 
A fuzzer should create code similar to lines 15 to 21. This code just executes 
additional code in the last loop iteration to trigger the vulnerabilities. 
• 
A fuzzer should use proxies to introduce side effects. 