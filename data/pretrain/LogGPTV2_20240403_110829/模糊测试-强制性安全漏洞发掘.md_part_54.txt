globa1 snapshot_taken, hit_count, address
exception_address = \
dbg-u.Exception.ExceptionRecord.ExceptionAddress
然后，我们进行检查以确定是否处于快照钩子点。如果是，我们将递增hit_count变量，
并且输出一条关于我们当前位置的信息。
if exception_address == snapshot_hook:
sunosay4 % _u\pa 44 xoou 3oysdeus, upud
hit_count += 1
接下来，我们要检查布尔标志snapshot_taken。如果fuzz_server的一个快照在以前没有被
获取过，那么就通过调用PyDbg的process_snapshot（）例程来获取该快照。我们在该操作中加
人了一个定时器以确定执行时间等信息，并且将snapshot_taken标志更新为True。
 if a process snapshot has not yet been
#taken,take one now.
if not snapshot_taken:
start =time.time
print “taking process snapshot...",
pydbg-process_snapshot()
print “done. took %.03f seconds\n* % end
end = tine.time() - start
. Ihesaab
要注意我们仍然在if块中，在这里异常地址与钩子点的地址是相同的。下一个代码块将考
虑数据的变异。针对hit_count的条件检查确保了直到使用原始数据来第一次循环遍历解析例
程之后，我们才对该参数进行变异。这并不是一个必需的条件。如果发现了一个以前所分配的
地址（很快就会清楚该地址来自于何处），我们就使用PyDbg的方便的函数virtua1_free（）来
释放它。
if hit_count >= 1:
ff address:
print “freeing last chunk at*,
pydbg.virtual_free(\
print "%08x* % address
address,
1
1000,
由于我们仍然处于hit_count>=1的if块中，因此使用PyDbg的方便的函数virtua1
alloc（）来在fuzz_server的进程空间中分配一个内存块。这是我们刚看到的一个空闲空间的分
---
## Page 256
第20章内存数据的模糊测试：自动化241
配。为什么我们首先要分配内存呢？因为比起在适当的位置修改传递到解析例程的原始数据，
将我们的变异数据放置到fuzz_server的进程空间的其他地方要容易的多，并且可以简单地将指
向原始数据的指针修改为指向变异块的指针。在这里需要注意的一件事情是潜在的栈破坏可能
会向堆破坏那样发生，因为漏洞缓冲区已经潜在的从栈中被移出了。
address = pydbg.virtua1_a11oc(\
1000,
None,
MEM_COMMIT,
PACE_READWRITE)
print “a11ocation at %08x\n* % address
我们假定服务器只能够解析ASCII数据，并且使用一个简单的数据生成算法来生成模糊数
据以填充到被分配的变异块中。以一个包含A字符的长字符申开始，我们为该字符串选择一个
随机的索引并插人一个随机的ASCII字符。这是个足够简单的例子，如下所示：
print “generating mutant...".
randon_1ndex = random.randint(0, 750)
fuzz =“A"* 750
nutant -fuzz[0:random_index]
mutant += chr(random.randint(32,126))
mutant += fuzz[randon_index:]
print“done.\n*
00x=+ue
接下来，我们使用PyDbg的方便的write_process_memory（）例程将模糊数据写人到前面所
分配的内存块中：
pydbg.write_process_menory（address,mutant)
print
最后，我们修改函数参数的指针，以使其指向我们新分配的内存块。回忆一下图20-11所示
的情形，指向包含我们原始的反模糊化数据缓冲区的指针，位于我们当前的栈指针的4个正向
偏移量的位置处。然后我们继续执行。
aue sun, 5upou, ud
pydbg.write_process_memory（\
pydbg.f1ip_endian(address))
context.Esp +4,
print
print “continuing execution...\n*
再回过头来看一下断点回调函数处理器定义中的剩余部分，我们看到还有最后一个if块，
其作用是当到达恢复钩子点时处理快照的恢复。这一点可以通过调用PyDbg的
process_restore（）API来简单地实现。同样，我们在该块中增加了一个计时器以获取有关时
---
## Page 257
242
第二部分目标和自动化
间信息：
if exception_address =- restore_hook:
start-time.time()
print “restoring process snapshot...",
pydbg.process_restore()
end=time.timeO-start
print “done. took %.03f seconds\n* % end
pydbg.bp_set(restore_hook)
HDG
return DBG_CONTINUE
_N3H
下面我们就可以进行实际的测试了，首先来启动服务器：
HTERWIAER
s ./fuzz_server.exe
Listenfng and waiting for client to connect...
然后启动内存数据模糊器：
entering debug event 1oop
接着启动客户端程序：
5 ./fuzz_client.exe 192.168.197.1 *sending some data*
connecting....
sending...
o+
sent...
0.6.3 2Y1
只要客户端的传输量达到了有效载荷，那么就到达了快照钩子点，并且我们的内存数据模
糊器开始运转：
snapshot / mutate hook point hit #1
taking process snapshot... done. took 0.015 seconds
在获取了一个快照之后，执行将继续进行。解析过程完成，fuzz_server打印其输出消息，
然后等待退出：
received 17 bytes.
parsing: sending sone data
exiting...
然而在它得到退出的机会之前，将到达恢复钩子点，并且我们的内存数据模糊器将再次开
始运转：
restoring process snapshot...done.took o.ooo seconds
fuzz_server的进程状态已经成功回退到我们的快照点，并且执行将继续进行。这一次，由
于hit_count的值现在要大于1，因此处于断点处理器内部的变异块将被执行：
snapshot / nutate hook point hit #2
a1locating chunk ofmemory to hold mutation
91
memory a11ocated at 003c0000
generating mutant... done.
---
## Page 258
第20章内存数据的模糊测试：自动化243
writing mutant into target memory space
nodifying function argument to point to mutant
continuing execution...
内存将被分配，一个模糊变异体生成并被写入fuzz_scrver，并且参数指针被修改。当继续
执行时，fuzz_server的输出消息将证实我们的第一个快照成功恢复了变异：
parsing:
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAA
AAAAAAAAAAAA)AAAAA
AAAAAAAAAAAAAAAAAUAAUAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMA
exiting...
注意上面用粗体突出显示的、插入在A字符中间的）字符。同样，fuzz_server想要退出，
但是从没有得到退出的机会，因为进程状态被回退到恢复点。在下一次选代过程中，以前所
分配的内存块将被释放，一个新的内存块将被创建井分配，然后进程继续执行。尽管在不同
的机器上运行这个例子将会产生不同的结果，但是在本书中运行该例子的目的是为了得到如
下的结果，
continuing execution...
restoring process snapshot... done. took 0.016 seconds
snapshot / mutate hook point hit #265
allocating chunk of memory to hold mutation
freeing 1ast chunk at 01930000
1menory a1located at 01940000
generating mutant... done.
writing mutant into target memory space
modifying function argument to point to mutant
continuing execution...
***ACCESS VIOLATI0N 041414141[UNRES0LVED] ***
read violation on 41414141
terminating debuggee
在基于SRM的概念验证模糊器的第256次选代过程中，在我们的例子目标应用中发现了一
个明显的可利用漏洞。访问违规@41414141意味着进程试图从虚拟地址0x41414141处读取并执
行一条指令，结果该操作失败，因为该地址处的内存是不可读的。如果你现在还没有猜到的话，
---
## Page 259
第二部分目标和自动化
0x41其实就是ASCII字符A的十六进制表示。来自于我们的模糊器的数据导致了一个溢出，并
且覆盖了栈上的一个返回地址。当发生溢出的函数将执行权返回给调用者时，就会发生访问违
规，并且被我们的模糊器所获取。攻击者可以非常容易地利用这个漏洞，但是不要忘记，模糊
例程将必定要被解释以攻击服务器（在现实情况中，你可能不会很容易地命令客户端发送任意
的数据）。分析相关的源代码或二进制代码，以查明该漏洞的本质以及导致该漏洞原因，留作
一个练习供读者完成。
20.7小结
我们已经花费了很长的篇幅来讨论一个崭新的、理论性很强的模测试方法，该理论是非
常有趣的，并且值得我们去阅读分析该理论的一些具体应用。然面，我们鼓励读者去下载示例
文件，并且实际去执行示例测试。只通过书本所提供的这种非交互式的媒介方式，不能够很好
地理解这些例子。
最后两章的内容很好地激发了读者的阅读兴趣，它所提供的方法可能会应用于你所面对的
一个特定问题的某些方面。PyDbg平台和示例应用程序都是开源的，并且可以自由地进行修改。
可以从http://www.fuzzing.org处下载它们并进行分析研究。同我们所有的项目一样，我们希望
读者为我们提供有关该工具的改进意见、错误报告、补丁程序以及实例应用等信息，共同努力
来使该工具不断地得到更新并获得动态的发展。
SC
---
## Page 260
第三部分高级模糊测试技术
第21章模糊测试框架
在田纳西州有一个古老的请语（我知道它是在得充萨斯州，也可能是在田纳西州），是这
样说的：一旦你款骗我，那么为你感到羞愧。欺骗我—你不会再次受到欺骗。”
George W.Bush,Nashville,TN,2002年9月17日
这里有一些可用的、专门化的模糊测试工具，它们面向许多普通的并且公开的网络协议和