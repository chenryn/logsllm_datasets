# 编写自己的存储插件：FlexVolume 与 CSI

你好，我是张磊。今天我和你分享的主题是：编写自己的存储插件之 FlexVolume 与 CSI。

在上一篇文章中，我为你详细介绍了 Kubernetes 中的持久化存储体系，讲解了 PV 和 PVC 的具体实现原理，并提到了这样的设计实际上是为了增强整个存储体系的可扩展性。而在今天这篇文章中，我将向你介绍如何利用这些机制来开发自己的存储插件。

在 Kubernetes 中，存储插件的开发有两种方式：FlexVolume 和 CSI。接下来，我会先剖析一下 FlexVolume 的原理和使用方法，然后介绍 CSI 插件体系的设计原理及其优势。

## FlexVolume 原理及使用方法

假设我们要编写一个基于 NFS 实现的 FlexVolume 插件。对于一个 FlexVolume 类型的 PV，其 YAML 文件如下所示：

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-flex-nfs
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  flexVolume:
    driver: "k8s/nfs"
    fsType: "nfs"
    options:
      server: "10.10.0.25"  # 请替换为你的 NFS 服务器地址
      share: "export"
```

在这个 PV 定义中，`volume` 类型被指定为 `flexVolume`，并且我们指定了 `driver` 为 `k8s/nfs`。这个名字非常重要，因为它决定了插件的路径。`options` 字段是一个自定义字段，你可以在此处添加所需的参数。例如，在我们的例子中，`options` 指定了 NFS 服务器的地址（`server: "10.10.0.25"`）以及共享目录的名字（`share: "export"`）。

### 处理流程

当这个 PV 被创建并与某个 PVC 绑定时，它会进入 Volume 处理流程。这一流程分为两个阶段：“Attach 阶段”和“Mount 阶段”。这两个阶段的主要作用是在 Pod 所绑定的宿主机上完成 Volume 目录的持久化过程，例如为虚拟机挂载磁盘（Attach）或挂载一个 NFS 共享目录（Mount）。

在具体的控制循环中，这两个操作调用的是 Kubernetes 的 `pkg/volume` 目录下的存储插件。在我们这个例子中，就是 `pkg/volume/flexvolume` 目录中的代码。这个目录实际上是 FlexVolume 插件的入口。

以“Mount 阶段”为例，FlexVolume 目录中的处理过程非常简单，如下所示：

```go
func (f *flexVolumeMounter) SetUpAt(dir string, fsGroup *int64) error {
  ...
  call := f.plugin.NewDriverCall(mountCmd)
  
  // Interface parameters
  call.Append(dir)

  extraOptions := make(map[string]string)

  // pod metadata
  extraOptions[optionKeyPodName] = f.podName
  extraOptions[optionKeyPodNamespace] = f.podNamespace

  ...
  call.AppendSpec(f.spec, f.plugin.host, extraOptions)

  _, err := call.Run()
  ...
  return nil
}
```

`SetUpAt()` 方法封装了一行命令（即 `NewDriverCall`），由 kubelet 在“Mount 阶段”执行。在我们的例子中，kubelet 要通过插件在宿主机上执行的命令如下：

```bash
/usr/libexec/kubernetes/kubelet-plugins/volume/exec/k8s~nfs/nfs mount
```

其中，`/usr/libexec/kubernetes/kubelet-plugins/volume/exec/k8s~nfs/nfs` 是插件的可执行文件路径。这个名叫 `nfs` 的文件正是你要编写的插件实现。它可以是一个二进制文件或脚本，只要能在宿主机上执行即可。路径中的 `k8s~nfs` 部分是从 `driver: "k8s/nfs"` 字段解析出来的。

紧跟在可执行文件后面的 `mount` 参数定义了当前的操作。在 FlexVolume 中，这些操作参数的名字是固定的，如 `init`、`mount`、`unmount`、`attach` 和 `detach` 等，分别对应不同的 Volume 处理操作。

跟在 `mount` 参数后面的两个字段分别是 `dir` 和 `options`，这是 FlexVolume 必须提供给这条命令的两个执行参数。第一个参数 `dir` 表示当前正在处理的 Volume 在宿主机上的目录。第二个参数 `options` 是一个 JSON Map 格式的参数列表，包含了我们在 PV 中定义的 `options` 字段值以及 Pod 的元数据。

### 插件实现

在明白了存储插件的调用方式和参数列表之后，插件的可执行文件实现就非常容易理解了。在这个例子中，我编写了一个简单的 shell 脚本来作为插件的实现，它对“Mount 阶段”的处理过程如下：

```bash
domount() {
  MNTPATH=$1
  NFS_SERVER=$(echo $2 | jq -r '.server')
  SHARE=$(echo $2 | jq -r '.share')

  mkdir -p ${MNTPATH} &> /dev/null
  mount -t nfs ${NFS_SERVER}:/${SHARE} ${MNTPATH} &> /dev/null

  if [ $? -ne 0 ]; then
    echo "{ \"status\": \"Failure\", \"message\": \"Failed to mount ${NFS_SERVER}:${SHARE} at ${MNTPATH}\"}"
    exit 1
  fi

  echo '{"status": "Success"}'
  exit 0
}
```

当 kubelet 在宿主机上执行 `nfs mount` 命令时，这个名为 `nfs` 的脚本可以直接从 `dir` 参数中获取 Volume 在宿主机上的目录，并从 `options` 参数中提取 NFS 服务器和共享目录的信息，然后执行 `mount -t nfs` 命令。完成后，返回一个 JSON 格式的字符串，如 `{"status": "Success"}`，以便 kubelet 判断这次调用是否成功。

### 局限性

虽然这种 FlexVolume 实现方式简单，但局限性很大。例如，它不支持 Dynamic Provisioning（即为每个 PVC 自动创建 PV 和对应的 Volume），除非你再为其编写一个专门的 External Provisioner。此外，每次对插件可执行文件的调用都是完全独立的，无法保存中间状态，这限制了其灵活性和功能。

## CSI 插件体系设计原理

CSI（Container Storage Interface）是一种更完善、更编程友好的插件方式。CSI 插件体系的设计思想是将 Provision 阶段以及 Kubernetes 中的一部分存储管理功能从主干代码中剥离出来，做成几个单独的组件。这些组件通过 Watch API 监听 Kubernetes 中与存储相关的事件变化，如 PVC 的创建，并执行具体的存储管理动作。

### 组件介绍

CSI 插件体系多了三个独立的外部组件（External Components），分别是：

- **Driver Registrar**：负责将插件注册到 kubelet 中。
- **External Provisioner**：负责 Provision 阶段，监听 APIServer 中的 PVC 对象，调用 CSI Controller 的 `CreateVolume` 方法创建对应的 PV。
- **External Attacher**：负责“Attach 阶段”，监听 APIServer 中的 `VolumeAttachment` 对象，调用 CSI Controller 服务的 `ControllerPublish` 方法完成 Volume 的 Attach 阶段。

这些外部组件虽然独立于 Kubernetes，但仍由 Kubernetes 社区开发和维护。

### CSI 插件服务

一个 CSI 插件只有一个二进制文件，但它通过 gRPC 方式对外提供三个服务：

- **CSI Identity**：暴露插件本身的信息。
- **CSI Controller**：定义对 CSI Volume（对应 Kubernetes 中的 PV）的管理接口，如创建、删除、Attach/Dettach（Publish/Unpublish）、Snapshot 等。
- **CSI Node**：定义在宿主机上执行的操作，如 Stage/Unstage、Publish/Unpublish、GetVolumeStats 等。

### 总结

在本文中，我详细讲解了 FlexVolume 和 CSI 这两种自定义存储插件的工作原理。相比于 FlexVolume，CSI 的设计思想将插件的职责从“两阶段处理”扩展为 Provision、Attach 和 Mount 三个阶段。有了 CSI 插件后，Kubernetes 依然按照原有的方式工作，但在 Attach 和 Mount 阶段会通过 pkg/volume/csi 目录调用 CSI 插件。

在下一篇文章中，我将带你实践一个 CSI 存储插件的完整实现过程。

## 思考题

假设现在，你的宿主机是阿里云的一台虚拟机，你要实现的容器持久化存储是基于阿里云提供的云盘。你能准确地描述出在 Provision、Attach 和 Mount 阶段，CSI 插件都需要做哪些操作吗？

感谢你的收听，欢迎你给我留言，也欢迎分享给更多的朋友一起阅读。