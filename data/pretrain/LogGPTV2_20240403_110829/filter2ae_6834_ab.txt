            {
                $message = preg_replace_callback($replace['find'], $replace['replacement'], $message);
            }
        }
我们把上面的流程简单的具象化，假设我们在内容中输入了
    [video=youtube]youtube.com/test[/video][url]test.com[/url]
后台会首先处理`[video]`，然后内容就变成了
    [url]test.com[/url]
然后会处理`[url]`标签，最后内容变成
乍一看好像没什么问题，每个标签内容都会被拼接到标签相应的属性内，还会被`htmlspecialchars_uni`处理，也没办法逃逸双引号的包裹。
但假如我们输入这样的内容呢?
    [video=youtube]http://test/test#[url]onload=alert();//[/url]&amp;1=1[/video]
首先跟入到函数`/inc/class_parse.php line 1385行 mycode_parse_video`中
链接经过`parse_url`处理被分解为
    array (size=4)
      'scheme' => string 'http' (length=4)
      'host' => string 'test' (length=4)
      'path' => string '/test' (length=5)
      'fragment' => string '[url]onmousemove=alert();//[/url]&amp;1=1' (length=41)
然后在1420行，各个参数会被做相应的处理，由于我们必须保留`=`号以及`/` 号，所以这里我们选择把内容放在fragment中。
在1501行case youtube中，被拼接到id上
    case "youtube":
        if($fragments[0])
        {
            $id = str_replace('!v=', '', $fragments[0]); // http://www.youtube.com/watch#!v=fds123
        }
        elseif($input['v'])
        {
            $id = $input['v']; // http://www.youtube.com/watch?v=fds123
        }
        else
        {
            $id = $path[1]; // http://www.youtu.be/fds123
        }
        break;
最后id会经过一次htmlspecialchars_uni，然后生成模板。
    $id = htmlspecialchars_uni($id);
    eval("\$video_code = \"".$templates->get("video_{$video}_embed", 1, 0)."\";");
    return $video_code;
当然这并不影响到我们上面的内容。
到此为止我们的内容变成了
紧接着再经过对`[url]`的处理，上面的内容变为
    http://onload=alert();//" frameborder="0" allowfullscreen>
我们再把前面的内容简化看看，链接由
    [video=youtube]http://test/test#[url]onload=alert();//[/url]&amp;1=1[/video]
变成了
由于我们插入在`iframe`标签中的href被转变成了``,
由于双引号没有转义，所以iframe的href在a标签的href中被闭合，而原本的a标签中的href内容被直接暴露在了标签中，onload就变成了有效的属性！
最后浏览器会做简单的解析分割处理，最后生成了相应的标签，当url中的链接加载完毕，标签的动作属性就可以被触发了。
## 管理员后台文件创建漏洞
在Mybb的管理员后台中，管理员可以自定义论坛的模板和主题，除了普通的导入主题以外，他们允许管理员直接创建新的css文件，当然，服务端限制了管理员的这种行为，它要求管理员只能创建文件结尾为`.css`的文件。
    /admin/inc/functions_themes.php line 264
    function import_theme_xml($xml, $options=array())
    {
        ...
        foreach($theme['stylesheets']['stylesheet'] as $stylesheet)
        {
            if(substr($stylesheet['attributes']['name'], -4) != ".css")
            {
                continue;
            }
            ...
看上去好像并没有什么办法绕过，但值得注意的是，代码中先将文件名先写入了数据库中。
紧接着我们看看数据库结构
我们可以很明显的看到name的类型为varchar且长度只有30位。
如果我们在上传的xml文件中构造name为`tttttttttttttttttttttttttt.php.css`时，name在存入数据库时会被截断，并只保留前30位，也就是`tttttttttttttttttttttttttt.php`.
                test
紧接着我们需要寻找一个获取name并创建文件的地方。
在/admin/modules/style/themes.php 的1252行，这个变量被从数据库中提取出来。
theme_stylesheet 的name作为字典的键被写入相关的数据。
当`$mybb->input['do'] == "save_orders"`时，当前主题会被修改。
在保存了当前主题之后，后台会检查每个文件是否存在，如果不存在，则会获取name并写入相应的内容。
可以看到我们成功的写入了php文件
# 完成的漏洞复现过程
## 储存型xss
找到任意一个发送信息的地方，如发表文章、发送私信等....
发送下面这些信息
    [video=youtube]http://test/test#[url]onload=alert();//[/url]&amp;amp;1=1[/video]
然后阅读就可以触发
## 管理员后台文件创建漏洞
找到后台加载theme的地方
构造上传文件test.xml
                test
需要注意要勾选 Ignore Version Compatibility。
然后查看Theme列表，找到新添加的theme
然后保存并访问相应tid地址的文件即可
# 补丁
  * 
## 储存型xss
这里的iframe标签的链接被encode_url重新处理，一旦被转义，那么`[url]`就不会被继续解析，则不会存在问题。
## 管理员后台文件创建漏洞
在判断文件名后缀之前，加入了字符数的截断，这样一来就无法通过数据库字符截断来构造特殊的name了。
# 写在最后
整个漏洞其实说到实际利用来说，其实不算太苛刻，基本上来说只要能注册这个论坛的账号就可以构造xss，由于是储存型xss，所以无论是发送私信还是广而告之都有很大的概率被管理员点击，当管理员触发之后，之后的js构造exp就只是代码复杂度的问题了。
抛开实际的利用不谈，这个漏洞的普适性才更加的特殊，bbcode是现在主流的论坛复杂环境的解决方案，事实上，可能会有不少cms会忽略和mybb一样的问题，毕竟人才是最大的安全问题，当人自以为是理解了机器的一切想法时，就会理所当然得忽略那些还没被发掘的问题，安全问题，也就在这种情况下悄然诞生了...
* * *