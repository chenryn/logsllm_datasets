M = MM ^ d
for vec in M:
    flag = long_to_bytes(int(''.join(map(str, vec[:167])), 2))
    if b'}' in flag:
        print(flag)
# part 1
# from https://github.com/pcw109550/write-up/blob/master/2022/zer0pts/Karen/solve.sage
n = 60
m = 330
def allpmones(v):
    return len([vj for vj in v if vj in [-1, 0, 1]]) == len(v)
# We generate the lattice of vectors orthogonal to b modulo x0
def orthoLattice(b, x0):
    m = b.length()
    M = Matrix(ZZ, m, m)
    for i in range(1, m):
        M[i, i] = 1
    M[1:m, 0] = -b[1:m] * inverse_mod(b[0], x0)
    M[0, 0] = x0
    for i in range(1, m):
        M[i, 0] = mod(M[i, 0], x0)
    return M
def allones(v):
    if len([vj for vj in v if vj in [0, 1]]) == len(v):
        return v
    if len([vj for vj in v if vj in [0, -1]]) == len(v):
        return -v
    return None
def recoverBinary(M5):
    lv = [allones(vi) for vi in M5 if allones(vi)]
    n = M5.nrows()
    for v in lv:
        for i in range(n):
            nv = allones(M5[i] - v)
            if nv and nv not in lv:
                lv.append(nv)
            nv = allones(M5[i] + v)
            if nv and nv not in lv:
                lv.append(nv)
    return Matrix(lv)
def kernelLLL(M):
    n = M.nrows()
    m = M.ncols()
    if m  170:
        return
    beta = 2
    tbk = cputime()
    while beta  32 14 5  -> md5  (Polybius)
合并起来得到 flag{md5(base64(Unc1e:))}
按要求运算得到flag
Game
是兄弟就来砍我
注册账号，进游戏，聊天区就有flag。
初⼊⻔径
先去每⽇领奖那个⼈那⾥领绑定元宝，领完去抽奖员那抽奖，抽奖能有概率获得元宝，抽够1000元宝去买1000元
宝的召唤书，召唤boss，打死掉flag。
擂台决⽃
构造 cklogin.php 接⼝的 flag 参数实现任意账户登录，登录GM账号即可。
Other
签到
$username = $argv[1];
$time = $argv[2];
echo md5($username.urlencode($username).$time."jwjeDljl-
sdlj213988WED^W9kjasdjlkoie2130942323");
在关于⻚⾯的视频中有个⼆维码，扫⼀下会出跳转的url，url最后的base64⼀下就是flag。
MEDIUMBLACKOCR
⿊盒对抗样本，可以采⽤boundry attack (https://arxiv.org/pdf/1712.04248.pdf)的思想攻击。
由于L2限制较松且攻击容易，构造 $ adv = (origin+target)/2 $即可。
from PIL import Image, ImageDraw, ImageFont
import numpy as np
from base64 import b64encode, b64decode
import requests
import IPython
import io
FONT_SIZE = 30
TEXT_LENGTH = 10
FIG_SHAPE = (FONT_SIZE * TEXT_LENGTH // 2 + 20, FONT_SIZE + 8)
BASE_URL = 'http://47.97.127.1:23167/'
START_URL = BASE_URL + 'start'
PREDICT_URL = BASE_URL + 'predict'
FLAG_URL = BASE_URL + 'get_flag'
s = requests.Session()
def array2b64(np_array):
    buffer = np_array.tobytes()
    return b64encode(buffer)
def b642array(bb64_buffer):
    try:
        x = np.frombuffer(b64decode(bb64_buffer), dtype=np.float32)
        return x
    except Exception as e:
        print(e)
        print("No Hack ! BAD BUFFER")
        return False
def generate_fig(text_raw, font_size=FONT_SIZE):
    s = io.BytesIO()
    im = Image.new("L", FIG_SHAPE, 255)
    dr = ImageDraw.Draw(im)
    font = ImageFont.truetype("ubuntu.ttf", font_size)
    dr.text((0, 0), text_raw, font=font, fill="#000000")
    im.save(s, 'png')
    return Image.open(s)
for _ in range(100):
    q = s.get(START_URL).text
    tmp = q.split('`')
    ori = tmp[1]
    target = tmp[3]
    print(ori, target)
    benign = np.array(generate_fig(ori), dtype=np.float32) / 255
    target = np.array(generate_fig(target), dtype=np.float32) / 255
    diff = (target - benign)/2
    attack = benign + diff
    # print(_predict(benign))
    print(s.post(FLAG_URL, data={"b64_image": array2b64(attack)}).text)
# l2 = np.mean(np.linalg.norm(diff.reshape(diff.shape[0], -1), ord=2, axis=1))
# IPython.embed()
WORDS_CHECK
随便找个中⽂ocr的模型即可。
import os
import sys
import sys
import requests
import base64
from io import BytesIO
from PIL import Image
from cnocr import CnOcr 
import IPython
host, port = "47.97.127.1", 20599
base_url = f'http://{host}:{port}'
token_url = f'{base_url}/getToken'
words_url = f'{base_url}/getViolWords'
pic_url = f'{base_url}/getPic'
submit_url = f'{base_url}/submits'
flag_url = f'{base_url}/getFlag'
def getToken():
    res = requests.get(token_url).json()
    assert not res['errCode'], 'get token error'
    return res['data']['token']
def getViolWords():
    res = requests.get(words_url).json()
    assert not res['errCode'], 'get words error'
    return res['data']['violWords']
def getPic():
    res = requests.post(pic_url, json={'token':token}).json()
    assert not res['errCode'], 'get pic error'
    print(res['data']['words'].keys())
    im = base64.b64decode(res['data']['words']['w1'])
    with open('test.jpg', 'wb') as f:
        f.write(im)
def submit(result):
    res = requests.post(submit_url, json={'token':token, 'answer':result}).json()
    assert not res['errCode'], 'submit error'
    print(res['data'])
def getFlag():
    res = requests.post(flag_url, json={'token':token}).json()
    assert not res['errCode'], 'get flag error'
    print(res['data'])
Ppc
BABY LINE
HILBERT
token = getToken()
print(token)
words = getViolWords()
for _ in range(50):
    getPic()
    ocr = CnOcr()    
    res = ''.join(ocr.ocr_for_single_line('test.jpg')[0])
    print(res)
    for word in words:
        if word in res:
            submit(False)
            break
    else:
        submit(True)
IPython.embed()
r = int(input())
for _ in range(r):
    m, n, k = map(int, input().split())
    mat = []
    for i in range(m):
        mat.append((list(map(int, input().split())).count(1),i))
    mat.sort()
    ans = [mat[i][1] for i in range(k)]
    print(' '.join(map(str,ans)))
import sys
def hilbert_to_d(n, x, y):
    d = 0
    s = n // 2
    while s > 0:
        rx = (x & s) > 0
        ry = (y & s) > 0
        d += s * s * ((3 * rx) ^ ry)
        x, y = rotate(n, x, y, rx, ry)
        s //= 2
    return d
def d_to_hilbert(n, d):
    x, y = 0, 0
    t = d
    s = 1
    while s < n:
        rx = 1 & (t // 2)
        ry = 1 & (t ^ rx)
        x, y = rotate(s, x, y, rx, ry)
        x += s * rx
        y += s * ry
        t //= 4
        s *= 2
    return x, y
def rotate(n, x, y, rx, ry):
    if ry == 0:
        if rx == 1:
            x , y = n - 1 - x, n - 1 - y
        x,y = y, x
    return x, y
data = sys.stdin.read().splitlines()
for line in data:
    n, x, y = map(int, line.split())
    pos = x-1, y-1
    d = hilbert_to_d(2**n, x-1, y-1)
    if d == 0:
        print(0)
        continue
    elif d == 4**n-1:
        print(-1)
        continue
    pre = d_to_hilbert(2**n, d-1)
    post = d_to_hilbert(2**n, d+1)
    xs = [pre[0], post[0], pos[0]]
    ys = [pre[1], post[1], pos[1]]
    set_x = set(xs)
    set_y = set(ys)
    if len(set_x) == 1:
        print(5)
    elif len(set_y) == 1:
        print(6)
    elif xs.count(min(xs)) == 2 and ys.count(min(ys)) == 2:
        print(3)
    elif xs.count(max(xs)) == 2 and ys.count(max(ys)) == 2:
        print(2)
    elif xs.count(min(xs)) == 2 and ys.count(max(ys)) == 2:
        print(1)
    elif xs.count(max(xs)) == 2 and ys.count(min(ys)) == 2:
        print(4)