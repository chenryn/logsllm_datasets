    框架也要求此链与传入的数据包回复匹配。
    :::
    请注意，您必须将 `--`{.literal} 选项传给 `nft`{.literal}
    命令，以避免 shell 将负优先级的值解析为 `nft`{.literal}
    命令的一个选项。
3.  在 `postrouting`{.literal} 链中添加一条与 `ens3`{.literal}
    接口上的传出数据包匹配的规则：
    ``` literallayout
    # nft add rule nat postrouting oifname "ens3" masquerade
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#configuring-source-nat-using-nftables_configuring-nat-using-nftables}使用 nftables 配置源 NAT {.title}
:::
在路由器中，源 NAT（SNAT）可让您将通过接口发送的数据包 IP 改为专门的 IP
地址。
以下流程描述了如何将通过 `ens3`{.literal} 接口的离开路由器的数据包的源
IP 替换为 `192.0.2.1`{.literal}。
::: orderedlist
**流程**
1.  创建一个表：
    ``` literallayout
    # nft add table nat
    ```
2.  将 `prerouting`{.literal} 和 `postrouting`{.literal} 链添加到表中：
    ``` literallayout
    # nft -- add chain nat prerouting { type nat hook prerouting priority -100 \; }
    # nft add chain nat postrouting { type nat hook postrouting priority 100 \; }
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    即使您没有向 `postrouting`{.literal}
    链添加规则，`nftables`{.literal}
    框架也要求此链与传出的数据包回复匹配。
    :::
    请注意，您必须将 `--`{.literal} 选项传给 `nft`{.literal}
    命令，以避免 shell 将负优先级的值解析为 `nft`{.literal}
    命令的一个选项。
3.  在 `postrouting`{.literal} 链中添加一条规则，其将通过
    `ens3`{.literal} 传出的数据包的源 IP 替换为 `192.0.2.1`{.literal} ：
    ``` literallayout
    # nft add rule nat postrouting oifname "ens3" snat to 192.0.2.1
    ```
:::
::: itemizedlist
**其它资源**
-   lin:https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-nftables_configuring-and-managing-networking#forwarding-incoming-packets-on-a-specific-local-port-to-a-different-host_configuring-port-forwarding-using-nftables\[Forwarding
    incoming packets on a specific local port to a different host\]
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#configuring-destination-nat-using-nftables_configuring-nat-using-nftables}使用 nftables 配置目标 NAT {.title}
:::
目标 NAT 可让您将路由器中的流量重新指向无法直接从互联网访问的主机。
以下流程描述了如何将发送到路由器端口 `80`{.literal} 和 `443`{.literal}
的传入流量重定向到 IP 地址为 `192.0.2.1`{.literal} 的主机。
::: orderedlist
**流程**
1.  创建一个表：
    ``` literallayout
    # nft add table nat
    ```
2.  将 `prerouting`{.literal} 和 `postrouting`{.literal} 链添加到表中：
    ``` literallayout
    # nft -- add chain nat prerouting { type nat hook prerouting priority -100 \; }
    # nft add chain nat postrouting { type nat hook postrouting priority 100 \; }
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    即使您没有向 `postrouting`{.literal}
    链添加规则，`nftables`{.literal}
    框架也要求此链与传出的数据包回复匹配。
    :::
    请注意，您必须将 `--`{.literal} 选项传给 `nft`{.literal}
    命令，以避免 shell 将负优先级的值解析为 `nft`{.literal}
    命令的一个选项。
3.  在 `prerouting`{.literal} 链中添加一条规则，将发送到端口
    `80`{.literal} 和 `443`{.literal} 的 `ens3`{.literal}
    接口上的传入流量重定向到 IP 为 `192.0.2.1`{.literal} 的主机：
    ``` literallayout
    # nft add rule nat prerouting iifname ens3 tcp dport { 80, 443 } dnat to 192.0.2.1
    ```
4.  根据您的环境，添加 SNAT 或伪装规则以更改源地址：
    ::: orderedlist
    1.  如果 `ens3`{.literal} 接口使用动态 IP 地址，请添加一条伪装规则：
        ``` literallayout
        # nft add rule nat postrouting oifname "ens3" masquerade
        ```
    2.  如果 `ens3`{.literal} 接口使用静态 IP 地址，请添加一条 SNAT
        规则。例如，如果 `ens3`{.literal} 使用 `198.51.100.1`{.literal}
        IP 地址：
        ``` literallayout
        # nft add rule nat postrouting oifname "ens3" snat to 198.51.100.1
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   [不同的 NAT 类型： masquerading、source NAT、destination NAT 和
    redirect](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-nftables_configuring-and-managing-networking#the-different-nat-types-masquerading-source-nat-destination-nat-and-redirect_configuring-nat-using-nftables){.link}
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#proc_configuring-a-redirect-using-nftables_configuring-nat-using-nftables}使用 nftables 配置重定向 {.title}
:::
`重定向`{.literal} 功能是目标网络地址转换(DNAT)的一种特殊情况，它根据链
hook 将数据包重定向到本地计算机。
以下流程描述了如何将发送到本地主机端口 `22`{.literal}
的传入和转发流量重定向到端口 `2222`{.literal}。
::: orderedlist
**流程**
1.  创建一个表：
    ``` literallayout
    # nft add table nat
    ```
2.  在表中添加 `prerouting`{.literal} 链:
    ``` literallayout
    # nft -- add chain nat prerouting { type nat hook prerouting priority -100 \; }
    ```
    请注意，您必须将 `--`{.literal} 选项传给 `nft`{.literal}
    命令，以避免 shell 将负优先级的值解析为 `nft`{.literal}
    命令的一个选项。
3.  在 `prerouting`{.literal} 链中添加一条规则，将端口 `22`{.literal}
    上的传入流量重定向到端口 `2222`{.literal} ：
    ``` literallayout
    # nft add rule nat prerouting tcp dport 22 redirect to 2222
    ```
:::
::: itemizedlist
**其它资源**
-   [不同的 NAT 类型： masquerading、source NAT、destination NAT 和
    redirect](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-nftables_configuring-and-managing-networking#the-different-nat-types-masquerading-source-nat-destination-nat-and-redirect_configuring-nat-using-nftables){.link}
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#using-sets-in-nftables-commands_getting-started-with-nftables}使用 nftables 命令中的设置 {.title}
:::
`nftables`{.literal}
框架原生支持集合。您可以使用一个集合，例如，规则匹配多个 IP
地址、端口号、接口或其他匹配标准。
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#using-anonymous-sets-in-nftables_using-sets-in-nftables-commands}在 nftables 中使用匿名集合 {.title}
:::
匿名集合包含以逗号分开的值，用花括号括起来，如
`{ 22、80、443 }`{.literal}，你可以直接在规则中使用。您还可以将匿名集合用于
IP 地址或其他匹配标准。
匿名集合的缺陷是，如果要更改集合，则需要替换规则。对于动态解决方案，使用命名集合，如
[在 nftables
中使用命名集合](#getting-started-with-nftables_securing-networks.html#using-named-sets-in-nftables_using-sets-in-nftables-commands "在 nftables 中使用命名集"){.link}
中所述。
::: itemizedlist
**先决条件**
-   `inet`{.literal} 系列中的 `example_chain`{.literal} 链和
    `example_table`{.literal} 表存在。
:::
::: orderedlist
**流程**
1.  例如，在 `example_table`{.literal} 中的 `example_chain`{.literal}
    中添加一条规则，允许传入流量流到端口 `22`{.literal}、`80`{.literal}
    和 `443`{.literal} ：
    ``` literallayout
    # nft add rule inet example_table example_chain tcp dport { 22, 80, 443 } accept
    ```
2.  另外，还可在 `example_table`{.literal} 中显示所有的链及其规则：
    ``` literallayout
    # nft list table inet example_table
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
        tcp dport { ssh, http, https } accept
      }
    }
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#using-named-sets-in-nftables_using-sets-in-nftables-commands}在 nftables 中使用命名集 {.title}
:::
`nftables`{.literal}
框架支持可变命名集。命名集是一个列表或一组元素，您可以在表中的多个规则中使用。匿名集合的另外一个好处在于，您可以更新命名的集合而不必替换使用集合的规则。
当您创建一个命名集时，必须指定集合包含的元素类型。您可以设置以下类型：
::: itemizedlist
-   包含 IPv4 地址或范围的集合的 `ipv4_addr`{.literal}，如
    `192.0.2.1`{.literal} 或 `192.0.2.0/24`{.literal}。
-   包含 IPv6 地址或范围的集合的 `ipv6_addr`{.literal}，如
    `2001:db8:1::1`{.literal} 或 `2001:db8:1::1/64`{.literal}。
-   包含介质访问控制(MAC)地址列表的集合的 `ether_addr`{.literal}，如
    `52:54:00:6b:66:42`{.literal}。
-   包含 Internet 协议类型列表的集合的 `inet_proto`{.literal} ，如
    `tcp`{.literal}。
-   包含互联网服务列表的集合的 `inet_service`{.literal}，如
    `ssh`{.literal}。
-   包含数据包标记列表的集合的 `mark`{.literal}。数据包标记可以是任何 32
    位正整数值（`0`{.literal} 到 `2147483647`{.literal}）。
:::
::: itemizedlist
**先决条件**
-   `example_chain`{.literal} 链和 `example_table`{.literal} 表存在。
:::
::: orderedlist
**流程**
1.  创建一个空集。以下示例为 IPv4 地址创建了一个集合：
    ::: itemizedlist
    -   要创建可存储多个独立 IPv4 地址的集合：
        ``` literallayout
        # nft add set inet example_table example_set { type ipv4_addr \; }
        ```
    -   要创建可存储 IPv4 地址范围的集合：
        ``` literallayout
        # nft add set inet example_table example_set { type ipv4_addr \; flags interval \; }
        ```
    :::
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    要避免 shell 认为分号作为命令结尾，您必须用反斜杠转义分号。
    :::
2.  另外，还可创建使用该集合的规则。例如，以下命令向
    `example_table`{.literal} 中的 `example_chain`{.literal}
    添加一条规则，该规则将丢弃来自 `example_set`{.literal} 中 IPv4
    地址的所有数据包。
    ``` literallayout
    # nft add rule inet example_table example_chain ip saddr @example_set drop
    ```
    因为 `example_set`{.literal} 仍然为空，因此该规则目前无效。
3.  在 `example_set`{.literal} 中添加 IPv4 地址：
    ::: itemizedlist
    -   如果您创建存储单个 IPv4 地址的集合，请输入：
        ``` literallayout
        # nft add element inet example_table example_set { 192.0.2.1, 192.0.2.2 }
        ```
    -   如果您创建存储 IPv4 范围的集合，请输入：
        ``` literallayout
        # nft add element inet example_table example_set { 192.0.2.0-192.0.2.255 }
        ```
        当指定 IP
        地址范围时，你也可以使用无类别域间路由(CIDR)标记，如上例中的
        `192.0.2.0/24`{.literal}。
    :::
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#_additional_resources_4}其它资源 {.title}
:::
::: itemizedlist
-   `nft(8)`{.literal} 手册页中的 `Sets`{.literal} 部分
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#using-verdict-maps-in-nftables-commands_getting-started-with-nftables}在 nftables 命令中使用 verdict 映射 {.title}