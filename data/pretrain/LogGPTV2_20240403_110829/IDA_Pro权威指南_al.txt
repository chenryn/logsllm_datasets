要求调用函数从栈中删除参数，意味着你将经常看到：指令在由被调用的函数返回后，会立即对程序栈指针进行调整。如果函数能够接受数量可变的参数，则调用方非常适于进行这种调整，因为它清楚地知道，它向函数传递了多少个参数，因而能够轻松做出正确的调整。而被调用的函数事先无法知道自己会收到多少个参数，因而很难对栈做出必要的调整。
在下面的例子中，我们调用一个拥有以下原型的函数：
void demo_cdecl(int w, int x, int y, int z);
默认情况下，这个函数将使用cdecl
 调用约定，并希望你按从右到左的顺序压入4个参数，同时要求调用方清除栈中的参数。编译器可能会为这个函数的调用生成以下代码：
   ; demo_cdecl(1, 2, 3, 4);   //programmer calls demo_cdecl
➊  push   4           ; push parameter z  
   push   3           ; push parameter y  
   push   2           ; push parameter x  
   push   1           ; push parameter w  
   call   demo_cdecl  ; call the function  
➋  add    esp, 16     ; adjust esp to its former value  
从➊ 开始的4 个push
 操作使程序栈指针（ESP ）发生16 个字节（在32 位体系结构上为4*sizeof(int)
 ）的变化，从demo_cdecl
 返回后，它们在➋处被撤销。如果demo_cdecl
 被调用50 次，那么，每次调用之后，都会发生类似于➋处的调整。下面的例子同样遵照cdecl
 调用约定，但是，在每次调用demo_cdecl
 后，调用方不需要删除栈中的参数。
; demo_cdecl(1, 2, 3, 4);   //programmer calls demo_cdecl  
   mov   [esp+12], 4   ; move parameter z to fourth position on stack  
   mov   [esp+8], 3    ; move parameter y to third position on stack  
   mov   [esp+4], 2    ; move parameter x to second position on stack  
   mov   [esp], 1      ; move parameter w to top of stack  
   call   demo_cdecl  ; call the function  
在这个例子中，在函数的“序言”阶段，编译器已经在栈顶为demo_cdecl
 的参数预先分配了存储空间。在demo_cdecl
 的参数放到栈上时，并不需要修改程序栈指针，因此，在调用demo_cdecl
 结束后，也就不需要调整栈指针。GNU编译器（gcc和g++ ）正是利用这种技巧将函数参数放到栈上的。注意，无论采用哪一种方法，在调用函数时，栈指针都会指向最左边的参数。
2. 标准调用约定
这里的标准
 似乎有些用词不当，因为它是微软为自己的调用约定所起的名称。这种约定在函数声明中使用了修饰符_stdcall
 ，如下所示：
void _stdcall demo_stdcall(int w, int x, int y);
为避免标准
 一词引起混淆，在本书的剩余部分，我们将这种调用约定称为stdcall
 调用约定。
和cdecl
 调用约定一样，stdcall
 调用约定按从右到左的顺序将函数参数放在程序栈上。使用stdcall
 调用约定的区别在于：函数结束执行时，应由被调用的函数负责删除栈中的函数参数。对被调用的函数而言，要完成这个任务，它必须清楚知道栈中有多少个参数，这只有在函数接受的参数数量固定不变时才有可能。因此，printf
 这种接受数量可变的参数的函数不能使用stdcall
 调用约定。例如，demo_stdcall
 函数需要3 个整数参数，在栈上共占用12个字节（在32位体系结构上为3 * sizeof(int)
 ）的空间。x86 编译器能够使用RET
 指令的一种特殊形式，同时从栈顶提取返回地址，并给栈指针加上12，以清除函数参数。demo_stdcall
 可能会使用以下指令返回到调用方：
ret 12     ; return and clear 12 bytes from the stack
使用stdcall
 的主要优点在于，在每次函数调用之后，不需要通过代码从栈中清除参数，因而能够生成体积稍小、速度稍快的程序。根据惯例，微软对所有由共享库（DLL ）文件输出的参数数量固定的函数使用stdcall
 约定。如果你正尝试为某个共享库组件生成函数原型或与二进制兼容的替代者，请一定记住这一点。
3. x86 fastcall约定
fastcall
 约定是stdcall
 约定的一个变体，它向CPU 寄存器（而非程序栈）最多传递两个参数。Microsoft Visual C/C++ 和GNU gcc/g++（3.4及更低版本）编译器能够识别函数声明中的fastcall
 修饰符。如果指定使用fastcall
 约定，则传递给函数的前两个参数将分别位于ECX 和EDX寄存器中。剩余的其他参数则以类似于stdcall
 约定的方式从右到左放入栈上。同样与stdcall
 约定类似的是，在返回其调用方时，fastcall
 函数负责从栈中删除参数。下面的声明中即使用了fastcall
 修饰符：
void fastcall demo_fastcall(int w, int x, int y, int z);
为调用demo_fastcall
 ，编译器可能会生成以下代码：
; demo_fastcall(1, 2, 3, 4);   //programmer calls demo_fastcall  
   push   4              ; move parameter z to second position on stack  
   push   3              ; move parameter y to top position on stack  
   mov    edx, 2         ; move parameter x to edx  
   mov    ecx, 1         ; move parameter w to ecx  
   call   demo_fastcall  ; call the function
注意，调用demo_fastcall
 返回后，并不需要调整栈，因为demo_fastcall
 负责在返回到调用方时从栈中清除参数y
 和z
 。由于有两个参数被传递到寄存器中，被调用的函数仅仅需要从栈中清除8字节，即使该函数拥有4个参数也是如此，理解这一点很重要。
4. C++ 调用约定
C++ 类中的非静态成员函数与标准函数不同，它们需要使用this
 指针，该指针指向用于调用函数的对象。用于调用函数的对象的地址必须由调用方提供，因此，它在调用非静态成员函数时作为参数提供。C++ 语言标准并未规定应如何向非静态成员函数传递this
 指针，因此，不同编译器使用不同的技巧来传递this
 指针，这点也就不足为奇了。
Microsoft Visual C++ 提供thiscall
 调用约定，它将this
 传递到ECX寄存器中，并且和在stdcall
 中一样，它要求非静态成员函数清除栈中的参数。GNU g++编译器将this
 看成是任何非静态成员函数的第一个隐含参数，而在所有其他方面与使用cdecl
 约定相同。因此，对使用g++ 编译的代码来说，在调用非静态成员函数之前，this
 被放置到栈顶，且调用方负责在函数返回时删除栈中的参数（至少有一个参数）。已编译的C++ 代码的其他特性将在第8章中讨论。
5. 其他调用约定
要完整地介绍现有的每一个调用约定，可能需要写一本书。调用约定通常是特定于语言、编译器和CPU 的。如果遇到由更少见的编译器生成的代码，可能需要你自己进行一番研究。但是，以下这些情况需要特别注意：优化代码、定制汇编语言代码和系统调用。
如果输出函数（如库函数）是为了供其他程序员使用，那么，它必须遵照主流的调用约定，以便程序员能够轻松调用这些函数。另外如果函数仅供内部程序使用，则该函数需要采用只有函数的程序才了解的调用约定。在这类情况下，优化编译器会选择使用备用的调用约定，以生成运行速度更快的代码。这样的例子包括：在Microsoft Visual C++中使用/GL
 选项，以及在GNU gcc/g++中使用regparm
 关键字。
如果程序员不怕麻烦，使用了汇编语言，那么，他们就能够完全控制如何向他们创建的函数传递参数。除非他们希望创建供其他程序员使用的函数，否则，汇编语言程序员能够以任何他们认为适当的方式传递参数。因此，在分析自定义汇编代码时，请格外小心。在模糊例程（obfuscation routine ）和shellcode 中经常可以看到自定义汇编代码。
系统调用
 是一种特殊的函数调用，用于请求一项操作系统服务。通常，系统调用会造成状态转换，由用户模式进入内核模式，以便操作系统内核执行用户的请求。启动系统调用的方式因操作系统和CPU 而异。例如，Linux x86系统调用使用int 0x80
 指令或sysenter
 指令启动，而其他x86操作系统可能只使用sysenter
 指令。在许多x86系统（Linux是一个例外）上，系统调用的参数位于运行时栈上，并在启动系统调用之前，在EAX寄存器中放入一个系统调用编号。Linux系统调用接受位于特定寄存器中的参数，有时候，如果可用寄存器无法存储所有的参数，它也接受位于内存中的参数。
6.2.2 局部变量布局
存在规定如何向函数传递参数的调用约定，但不存在规定函数的局部变量布局的约定。编译器的第一个任务是，计算出函数的局部变量所需的空间。编译器的第二个任务，则是确定这些变量是否可在CPU 寄存器中分配，或者它们是否必须在程序栈上分配。至于具体的分配方式，既与函数的调用方无关，也与被调用的函数无关。值得注意的是，通过检查函数的源代码，通常无法确定函数的局部变量布局。
6.2.3 栈帧示例
以下面这个在32位x86计算机上编译的函数为例：
void bar(int j, int k);   // a function to call  
void demo_stackframe(int a, int b, int c) {  
   int x;  
   char buffer[64];  
   int y;  
   int z;  
   // body of function not terribly relevant other than  
   bar(z, y);  
}
计算得出，局部变量最少需要76 字节的栈空间（3个4字节整数和1个64 字节缓冲区）。这个函数可能使用stdcall
 或cdecl
 调用约定，它们的栈帧完全相同。如图6-3所示是一个用于调用demo_stackframe
 的栈帧实现，假设它并没有使用帧指针寄存器（因此栈指针ESP 作为帧指针）。进入demo_stackframe
 时，可以使用下面的一行“序言”配置这个栈帧：
sub   esp, 76     ; allocate sufficient space for all local variables
其中的“偏移量”栏显示的是引用栈帧中的任何局部变量或参数所需的基址+位移地址：
图6-3 基于ESP 的栈帧
生成利用栈指针计算所有变量引用的函数需要编译器做更多工作，因为栈指针会频繁变化，编译器必须确保它在引用栈帧中的任何变量时始终使用了正确的偏移量。以对demo_stack- frame
 函数中bar
 的调用代码为例：
➊  push   dword [esp+4]     ; push y  
➋  push   dword [esp+4]     ; push z  
   call   bar  
   add    esp, 8              ; cdecl requires caller to clear parameters
根据图6-3中的偏移量，➊ 处的push
 准确地将局部变量y
 压入栈中。初看起来，似乎➋ 处的push
 错误地再次引用了局部变量y
 。但是，因为我们处理的是一个基于ESP 的帧，且➊ 处的push
 修改ESP
 ，所以每次ESP 发生改变，图6-3中的所有偏移量都会临时进行调整。于是，在➊ 之后，➋ 处的push
 中正确引用的局部变量z
 的新偏移量变为[esp+4]
 。在分析使用栈指针引用栈帧变量的函数时，你必须小心，注意栈指针的任何变化，并对所有未来的变量偏移量进行相应调整。使用栈指针引用所有栈帧变量的好处在于：所有其他寄存器仍可用于其他目的。
demo_stackframe
 完成后，它需要返回调用方。最终，需要使用ret
 指令从栈顶弹出所需返回地址，并将其插入指令指针寄存器（此时为EIP）中。在弹出返回地址之前，需要从栈顶删除局部变量，以便在ret