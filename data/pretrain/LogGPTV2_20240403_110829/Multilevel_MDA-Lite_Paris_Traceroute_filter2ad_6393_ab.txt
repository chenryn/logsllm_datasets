which ensures that each probe packet that goes to the subsequent
hop does so via the chosen vertex.
We have illustrated node control with the highlighted vertex
at hop 2, and the hypothesis that it has two successor vertices at
hop 3. The MDA needs to identify a minimum of n1 flow IDs that
bring probes having a TTL of 2 to the highlighted vertex in order
to send probes to TTL 3 via that vertex. In order to exercise node
control for each of the four vertices at hop 2, a minimum of 4n1
probes must be sent to hop 2. Depending upon the specific stopping
point values, it can be unlikely or even impossible for the n4 probes
that had initially discovered the vertices at hop 2 to have resulted
in at least n1 of them reaching each of the four vertices. To take
a numerical example from Veitch et al.’s Table 1 [47, Sec. III.B],
n1 = 9 and n4 = 33. In this case, it is impossible for the 33 probes
that were used in hop 2 discovery to yield 9 flow IDs for each of
hop 2’s four vertices; at least 4 × 9 = 36 probes would be required
for that. 36 probes are unlikely to be distributed perfectly evenly,
so some additional probing is necessary. The annotation at hop 2 is
updated in the illustration for hop 3 to indicate that 4n1 + δ probes
have been sent to hop 2, where δ is a non-negative integer.
The node control problem is an instance of the Multiple Coupon
Collector’s problem, which is described by Newman et al. [38] and
more recently by Ferrante et al. [26].
Figure 1: MDA discovery of an unmeshed and a meshed diamond
Hop 3: Having generated the flow IDs necessary for node con-
trol, the MDA now sends probes to hop 3: n1 probes via each of the
four hop 2 vertices. For the unmeshed topology in this example,
only one successor vertex is discovered for each hop 2 vertex. The
annotation shows a total of 4n1 probes having been sent to hop 3.
Hop 4: The MDA also exercises node control at hop 3 in order to
probe hop 4. In this example, since n1 probes have already reached
each hop 3 vertex, no further flow IDs need to be generated. The
annotation shows a total of 2n1 probes having been sent to hop 4,
where the diamond’s convergence point is discovered.
A total of 11n1 + δ probes will have been sent overall to discover
this topology. Using the values from Veitch et al., 99 + δ probes
will have been required by the MDA. The values from Veitch et al.
illustrate the cost of node control: 4n1 = 36 probes were sent to
hop 3, whereas only n2 = 17 probes were strictly necessary at that
hop, and twice as many probes than necessary were sent to hop 4.
Hop 2 node control under meshing: The numbers differ for
the meshed diamond starting at the third hop, which we distinguish
in Fig. 1 with the label 3′. Each hop 2 vertex has two successors
at hop 3′, as opposed to just one at hop 3. Presuming the MDA
discovers the second successor in each case, node control requires
additional probes to be sent to hop 2 such that there are at least n2
flow IDs that reach each vertex at that hop. The annotation shows
a total of 4n2 + δ′ probes having been sent to hop 2 for the meshed
diamond.
Hop 3′: As the annotation shows, a total of 4n2 probes are sent
to hop 3′. The meshing results in more probes than the 4n1 probes
sent to hop 3 in the unmeshed diamond.
Hop 4′: There being only one node at hop 4′, the annotation
shows a total of 2n1 robes are sent to that hop, just as for hop 4 in
the unmeshed diamond.
A total of 8n2 + 3n1 + δ′ probes will have been sent overall
to discover the meshed topology. Using the values from Veitch et
al., 163 + δ′ probes will have been required by the MDA. Again,
we see the cost of node control, here accentuated by the multiple
successors to each hop 2 vertex.
Per-packet load balancing: Since per-packet load balancing
was found to be rare in Augustin et al.’s 2011 survey [19], we con-
sider that the assumption (2) of no per-packet load balancing de-
scribed at the start of this subsection is a reasonably good one, and
we have omitted the additional packets to check for per-packet load
balancing from our implementation of the MDA, as well as from
the MDA-Lite.
2.2 Uniformity and meshing
As we see in the Fig. 1 examples, the MDA’s use of node control
is costly in the number of probes that it requires. However, node
control is only necessary for certain kinds of diamonds, which we
describe here. If diamonds that require node control are sufficiently
rare, an “MDA-Lite” could do away with much of the need for
node control. As we shall see, a small degree of node control is still
required in order to determine which sort of diamond has been
encountered. When necessary, the MDA-Lite can switch over to
the MDA with full node control.
We have identified a diamond feature that we call “uniformity”
that allows full topology discovery without node control. We have
also identified a characteristic of diamonds that we call “meshing”
that counteracts the potential for probe savings that uniformity
otherwise offers. We define uniformity and meshing here and, as
we show in Sec. 5.1, uniform unmeshed diamonds are indeed very
common. Therefore, probe savings can be realized by using the
MDA-Lite.
Uniformity: We define a uniform hop as one at which there
is an equal probability for each of its vertices to be reached by a
probe with that hop’s TTL and a randomly chosen flow identifier.
For a uniform hop, the failure probability bounds associated with
the MDA’s stopping points, the values nk, apply to discovery of all
the vertices at a hop, and node control is not required. A diamond
as a whole is considered a uniform diamond if all of its hops are
uniform.
Meshing: As already implied, meshing has to do with the links
between adjacent hops. Consider hops at TTLs i and i +1. We define
these to be meshed hops if one of the three following conditions
applies:
• The hops have identical numbers of vertices and the out-
degree of at least one of the vertices at hop i is two or more.
Equivalently, the in-degree of at least one of the vertices at
hop i + 1 is two or more.
• Hop i has fewer vertices than hop i + 1 and the in-degree of
• Hop i has more vertices than hop i + 1 and the out-degree
at least one of the vertices at hop i + 1 is two or more.
of at least one of the vertices at hop i is two or more.
We define a meshed diamond as a diamond with at least one pair
of meshed hops. The right-hand side of Fig. 6 illustrates a meshed
diamond, in which hop pairs (2, 3) and (4, 5) are meshed.
n1n1n1??n41234n1  + 4n1n144n1  + 4n12n1n13ʹ4n2  + ʹ4n2n14ʹ4n22n14n2  + ʹ2.3 The MDA-Lite algorithm
The MDA proceeds vertex by vertex, employing node control to
seek the successors to each vertex individually. The MDA-Lite,
however, reserves node control for particular cases and proceeds
hop by hop in the general case. At each hop it seeks to discover all
of the vertices at that hop, and in doing so discovers some portion
of the edges between that hop and the prior hop. It then seeks
out the remaining edges. It operates on the assumption that the
diamonds that it encounters will be uniform and unmeshed. If this
assumption holds, hop-by-hop probing will maintain the MDA’s
failure probability bounds. Because these two topology assumptions
might not hold, the MDA-Lite tests for a lack of uniformity and the
presence of meshing using methods that are less costly than full
application of the MDA. When it detects a diamond that does not
adhere to one of the assumptions, it switches to the MDA. These
steps are described below.
2.3.1 Uniform, unmeshed diamonds. The MDA-Lite, operating on
the assumption that a hop is uniform, sends probes to that hop
without node control. It starts by reusing one flow identifier from
each of the vertices that it has discovered at the previous hop,
continuing with additional previously-used flow identifiers and
then new ones. It applies the MDA’s stopping rule to remain within
the MDA’s failure probability bounds for vertex detection.
To take as examples the topologies in Fig. 1, the MDA-Lite sends
n4 probes to hop 2, n2 probes to hop 3, and n1 probes to hop 4.
Discovery of all vertices in the diamond therefore requires n4 +
n2 + 2n1 probes, or 68 probes when applying the values in Veitch
et al.’s Table 1, regardless of whether the diamond is unmeshed
or meshed. This compares to the numbers for the MDA that we
determined above: 99 + δ probes for the unmeshed diamond and
163 + δ′ probes for the meshed diamond.
Discovering all of the vertices at adjacent hops i and i + 1 does
not imply that the MDA-Lite will have discovered all of the edges.
Finishing up the edge discovery is straightforward, though, for
unmeshed hops, in the sense that it is deterministic rather than
stochastic. It consists of tracing backward from each vertex at hop i+
1 that does not yet have an identified predecessor or forward from
each vertex at hop i that does not yet have an identified successor.
There are three cases to consider:
• Hop i + 1 has fewer vertices than hop i. For each hop i
vertex that does not yet have an identified successor, the
flow identifier of a probe that has discovered that vertex is
used to send a probe to hop i + 1. Assuming no meshing, this
completes the edge discovery.
• Hop i + 1 has more vertices than hop i. For each vertex at
hop i + 1 that does not yet have an identified predecessor,
the flow identifier of a probe that has discovered that vertex
is used to send a probe to hop i. Assuming no meshing, this
completes the edge discovery.
• Hop i +1 has the same number of vertices as hop i. We apply
both of the methods just explained above.
Because a diamond could be meshed or non-uniform, the MDA-
Lite tries to detect those cases, as described below.
2.3.2 Detecting meshing. To detect meshing, stochastic probing is
required, and this involves a limited application of node control.
For a pair of hops having two or more vertices each, the meshing
test consists of tracing from the hop with the greater number of
vertices to the one with the lesser number of vertices, or tracing in
either direction if the hops have equal numbers of vertices. When
tracing forwards, meshing is detected if any predecessor vertex
has an out-degree of 2 or more. For backwards tracing, it is if any
successor vertex has an in-degree of 2 or more. The test requires
node control: We introduce a parameter, ϕ ⩾ 2, for the MDA-Lite,
which determines the number of flow identifiers that have to be
generated for each vertex at the hop from which tracing will begin.
Probes with these flow IDs are sent to the other hop.
The probability of failing to detect meshing depends upon ϕ. We
calculate this probability as follows. Suppose that the test is through
forward tracing, and let V be the set of two or more vertices at hop i
and let σ(v) designate the set of successor nodes of a vertex v ∈ V .
When ϕ flow IDs are generated for each vertex v ∈ V and probes
with those flow identifiers are sent to hop i + 1, the probability of
failing to detect meshing is:
1
|σ(v)|ϕ−1
(1)
v ∈V
This probability calculation extends with trivial adjustments to the
case of backward tracing.
A minimum value ϕ = 2 is required in order to detect meshing.
Whether to use a higher value, with a lower failure probability, is
up to the MDA-Lite implementation. We examined how well this
minimum value would work on the meshed diamonds identified
by the MDA in the survey that is described in Sec. 5.1. Looking
at the topology of each hop pair, we calculated the probability of
the MDA-Lite failing to detect the meshing. We did this both for
measured diamonds, which is to say that each diamond is weighted
by the number of times that it is encountered in the survey, and
for distinct diamonds, in which we weight each diamond just once,
regardless of how many times it has been seen. Fig. 2 plots CDFs
for the probability of the MDA-Lite with ϕ = 2 missing meshing
at a hop pair for which the MDA detected meshing. We see that,
(a) Measured
(b) Distinct
Figure 2: The probability of failing to detect meshing
for both measured and distinct diamonds, the probability of failing
to detect meshing is 0.1 or less on 70% of meshed hop pairs and
0.25 or less on 95% of the cases. If we consider this to be too high a
probability, ϕ is tunable, and we can set it to 3 or 4.
The overhead generated by the meshing test is lower than the
overhead of the MDA’s use of node control. Even with a value of ϕ
of 3 or 4, this is lower than n1 = 9, the minimum number of flow
identifiers per vertex required by the MDA’s use of node control in
106105104103102101100Missing meshing probability0.00.20.40.60.81.0CDF of hops106105104103102101100Missing meshing probability0.00.20.40.60.81.0CDF of hopsVeitch et al.. Furthermore, the MDA-Lite’s meshing test is applied
only to a minority of diamonds. As previous surveys have shown,
and our survey confirms, nearly half of all diamonds consist of only
a single multi-vertex hop (48% for measured and 45% for distinct
diamonds). The MDA-Lite’s meshing test only applies where there
are two adjacent multi-vertex hops, but the MDA applies node
control whenever there is a multi-vertex hop.
2.3.3 Detecting non-uniformity. Once edge discovery is complete,
and if the MDA has not been engaged because of meshing, the
MDA-Lite tests for non-uniformity. The test is a purely topologi-
cal one because the MDA-Lite makes the same assumption as the
MDA about the evenness of load balancing: that each load balancer
dispatches flow IDs in a uniform manner. (Based upon our expe-
rience, this appears to be a realistic assumption, but a survey on
this particular point would be worthwhile.) What we term “width
asymmetry” in our survey (see Sec. 5) is therefore the indicator of
non-uniformity.
The MDA-Lite detects width asymmetry as follows. For a pair of
hops i and i +1, if the number of successors is not identical for every