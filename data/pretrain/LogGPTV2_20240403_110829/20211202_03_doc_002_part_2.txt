query is expected to return duplicate rows.
5 This is equivalent to SELECT DISTINCT ON (‹c₁›,...,‹cₖ›) ‹c₁›,...,‹cₖ› FROM ....
10 ┆ Summarizing Values: Aggregates
Aggregate functions (short: aggregates) reduce a collection
of values to a single value (think summation, maximum).
Simplest form: collection ≡ entire table:
SELECT ‹agg₁›(‹e₁›) AS ‹c₁›, ..., ‹aggₙ›(‹eₙ›) AS ‹cₙ›
FROM ...
Reduction of input rows: result table will have one row.
Cannot mix aggregates with non-aggregate expression ‹e›
in SELECT clause:6 which value of ‹e› should we pick?
6 But see GROUP BY later on.
Aggregate Functions: Semantics
SELECT agg(e) AS c -- e will typically refer to t
FROM T AS t -- range over entire table T
Aggregate agg defined by triple (∅ᵃᵍᵍ, zᵃᵍᵍ, ⨁ᵃᵍᵍ):
∅ᵃᵍᵍ (empty): aggregate of the empty value collection
zᵃᵍᵍ (zero): aggregate value initialiser
⨁ᵃᵍᵍ (merge): add value to existing aggregate
a ← ∅ᵃᵍᵍ -- a will be aggregate value
for t in T: -- iterate over all rows of T
x ← e(t) -- value to be aggregated
if x ≠ NULL: -- aggregates ignore NULL values (⁑)
if a = ∅ᵃᵍᵍ: -- once we see first non-NULL value:
a ← zᵃᵍᵍ -- initialize aggregate
a ← ⨁ᵃᵍᵍ(a, x) -- maintain running aggregate
Aggregate Functions: Semantics
Aggregate agg ∅∅ᵃᵍᵍ zᵃᵍᵍ ⨁⨁ᵃᵍᵍ(a, x)
COUNT 0 0 a + 1
SUM NULL7 0 a + x
AVG8 NULL ‹0, 0› ‹a.1 + x, a.2 + 1›
MAX NULL -∞ max₂(a, x)
MIN NULL +∞ min₂(a, x)
bool_and NULL true a ∧ x
bool_or NULL false a ∨ x
⋮ ⋮ ⋮ ⋮
The special form COUNT(*) counts rows regardless of their
fields' contents (NULL, in particular).
7 If you think “this is wrong,” we're two already. Possible upside: sum differentiates between
summation over an empty collection vs. a collection of all 0s.
8 Returns a.1 / a.2 as final aggregate value.
Aggregate Functions on Table T ✎
SELECT COUNT(*) AS "#rows",
COUNT(t.d) AS "#d",
SUM(t.d) AS "∑d",
MAX(t.b) AS "max(b)",
bool_and(t.c) AS "∀c",
bool_or(t.d = 30) AS "∃d=30"
FROM T AS t
WHERE ‹p›
‹p› ≡ true
#rows #d ∑d max(b) ∀∀c ∃d=30
5 4 100 'y' false true
‹p› ≡ false
#rows #d ∑d max(b) ∀∀c ∃d=30
0 0 NULL NULL NULL NULL
Ordered Aggregates ✎
For most aggregates agg, ⨁ᵃᵍᵍ is commutative (and
associative): row order does not matter.
Order-sensitive aggregates admit a trailing
ORDER BY ‹e₁›,...,‹eₙ› argument that defines row order:9
-- cast to text separator string
-- " "
SELECT string_agg(t.a :: text, ',' ORDER BY t.d) AS "all a"
FROM T AS t
all a
'1,4,3,2,5'
9 ⨁ˢᵗʳⁱⁿᵍ⁻ᵃᵍᵍ essentially is || (string concatenation) which is not commutative.
Filtered and Unique Aggregates ✎
SELECT ‹agg›(‹e›) FILTER (WHERE ‹p›)
FROM ...
FILTER clause alters aggregate semantics (see ⁑):
⋮
x ← e(t)
if x ≠ NULL ∧ p(x):
⋮
SELECT ‹agg›(DISTINCT ‹e›)
FROM ...
Aggregates distinct (non-NULL) values of expression ‹e›.
(May use ALL to flag that duplicates are expected.)
11 ┆ Forming Groups of Rows
Once FROM has generated row bindings, SQL clauses operate
row-by-row. After GROUP BY: operate group-by-group:
SELECT ‹e₁›, ..., ‹eₘ› -- ➎
FROM ... -- ➊
WHERE ... -- ➋
GROUP BY ‹g₁›, ..., ‹gₙ› -- ➌
HAVING ‹p› -- ➍
All rows that agree on all expressions ‹gᵢ› (the set of
grouping criteria) form one group.
⇒ At ➍ and ➎ we now process groups (not individual
rows). This affects ‹p› and the ‹eⱼ›.
GROUP BY Partitions Rows
SELECT ... ⯇──┐
FROM ... ├─ evaluated once per group (not per row)
GROUP BY A₁ |
HAVING ... ⯇──┘
┌─────┬─────┬─────┐
│ A₁ │ A₂ │ ⋯ │
├─────┼─────┼─────┤
│ ⋮ │ ⋮ │ ⋮ │
│┈┈┈┈┈│┈┈┈┈┈│┈┈┈┈┈│ Grouping partitions the row
the xᵢ group ⎰ │ xᵢ │ yᵢ₁ │ ⋮ │ bindings:
⎱ │ xᵢ │ yᵢ₂ │ ⋮ │
┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ │┈┈┈┈┈│┈┈┈┈┈│┈┈┈┈┈│ • there are no empty groups
the xⱼ group ⎧ │ xⱼ │ yⱼ₁ │ ⋮ │
⎱ │ xⱼ │ yⱼ₂ │ ⋮ │ • each row belongs to exactly
│┈┈┈┈┈│┈┈┈┈┈│┈┈┈┈┈│ one group
│ ⋮ │ ⋮ │ ⋮ │
└─────┴─────┴─────┘
GROUP BY Changes Field Types From τ To bag(τ)10
⁂
# $ #
↓ ↓ ↓ ↓
SELECT t.b, t.d ┊ SELECT the(t.b) AS b, SUM(t.d) AS "∑d"
FROM T AS t ┊ FROM T AS t
GROUP BY t.b ┊ GROUP BY t.b
t.d references current group of d values: violates 1NF!
⇒ After GROUP BY: must use aggregates on field values.
t.b references current group of b values all of which are
equal in a group ⇒ SQL: using just t.b is OK.
(⁂ May think of hypothetical aggregate the(‹e›) that
picks one among equal ‹e› values.)
10 A view of GROUP BY that is due to Philip Wadler.
Aggregates are Evaluated Once Per Group ✎
SELECT t.b AS "group",
COUNT(*) AS size,
SUM(t.d) AS "∑d",
bool_and(t.a % 2 = 0) AS "∀even(a)",
string_agg(t.a :: text, ';') AS "all a"
FROM T AS t
GROUP BY t.b;
group size ∑d ∀∀even(a) all a
'x' 2 60 true '2;4'
'y' 3 40 false '1;3;5'
HAVING ‹p› acts like WHERE but after grouping:
‹p› = false discards groups (not rows).
Grouping Criteria
The grouping criteria ‹gᵢ› form a set — order is
irrelevant.
Grouping on a key effectively puts each row in its own
singleton group. (Typically a query smell 9.)
Expressions that are functionally dependent on the ‹gᵢ›
are constant within a group (and may be used in SELECT).
If SQL does not know about the FD, explicitly add ‹e›
to the set of ‹gᵢ› — this will not affect the
grouping.
12 ┆ Bag and Set Operations
Tables contain bags of rows. SQL provides the common family
of binary bag operations (no row order):
‹q₁› UNION ALL ‹q₂› -- ⋃⁺ (bag union)
‹q₁› INTERSECT ALL ‹q₂› -- ⋂⁺ (bag intersection)
‹q₁› EXCEPT ALL ‹q₂› -- ∖⁺ (bag difference)
Row types (field names/types) of queries ‹qᵢ› must match.
With ALL, row multiplicities are respected: if row r
occurs nᵢ times in ‹qᵢ›, r will occur max(n₁-n₂,0) times
in ‹q₁› EXCEPT ALL ‹q₂› (INTERSECT ALL: min(n₁,n₂)).
Without ALL: obtain set semantics (no duplicates).
13 ┆ Multi-Dimensional Data
Relational representation of measures (facts) depending
on multiple parameters (dimensions).
Example: table prehistoric with dimensions class,
herbivore?, legs, fact species:
Table prehistoric
class herbivore? legs species
'mammalia' true 2 'Megatherium'
'mammalia' true 4 'Paraceratherium'
'mammalia' false 2 NULL
'mammalia' false 4 'Sabretooth'
'reptilia' true 2 'Iguanodon'
'reptilia' true 4 'Brachiosaurus'
'reptilia' false 2 'Velociraptor'
'reptilia' false 4 NULL
Multiple GROUP BYs: GROUPING SETS ✎
Analyze (here: group, then aggregate) table ‹T› along
multiple dimensions ⇒ perform separate GROUP BYs on each
relevant dimension:
SQL syntactic sugar:
SELECT ‹e₁›, ..., ‹eₘ›
FROM ‹T› -- Gᵢ: grouping criteria
GROUP BY GROUPING SETS (G₁,...,Gₙ) -- sets in ((cid:42247))
Yields n individual GROUP BY queries qᵢ, glued together
by UNION ALL. If ‹eⱼ› ∉ Gᵢ, ‹eⱼ› ≡ NULL in qᵢ.
Hierarchical Dimensions: ROLLUP ✎
Group along a path from any node Gₙ up to the root:
ROLLUP (G₁,...,Gₙ) ≡ GROUPING SETS ((G₁,...,Gₙ₋₁,Gₙ),
(G₁,...,Gₙ₋₁), ...,
(G₁),
()) -- root
⚠
hierarchy prehistoric animals
class: mammals reptiles
herbivore?: t f t f
legs: 2 4 2 4 2 4 2 4
Megatherium ⋯ ⋯ ⋯ ⋯ ⋯ ⋯ NULL
Analyze All Dimension Combinations: CUBE ✎
● slice for herbivore? = true ● ●
⬮
● ●
⬮
true ● ● 4
herbivore? legs
false 2
mam rep
class
CUBE (G₁,...Gₙ) ≡ GROUPING SETS ((G₁,...,Gₙ), ⎫ all 2ⁿ
⋮ ⎬ subsets
()) ⎭ considered
14 ┆ SQL Evaluation vs. Reading Order
SELECT DISTINCT ON (‹es› ➐) ‹es› ➌, ‹aggs› ➏
FROM ‹qs› ➊
WHERE ‹p› ➋
GROUP BY ‹es› ➍
HAVING ‹p› ➎
UNION / EXCEPT / INTERSECT ➑ ⎱ repeated 0 or more times,
⋮ ⎰ all evaluated before ➒
ORDER BY ‹es› ➒
OFFSET ‹n› ➓
LIMIT ‹n› ➓
Reading order is: (➐,➌,➏,➊ ,➋,➍,➎,➑)⁺,➒,➓.
⚠
Query Nesting and (Non-)Readability
SELECT ⋯
FROM (SELECT ⋯
FROM (SELECT ⋯
FROM ⋯
⋮ ) AS ‹descriptive›
⋮ ) AS ⋯
⋮
The more complex the query and the more useful the
‹descriptive› name becomes, the deeper it is buried.
$
Query is a syntactic monolith. Tough to develop a query
in stages/phases and assess the correctness of its parts.
15 ┆ The let…in of SQL: WITH (Common Table Expressions)
Use common table expressions (CTEs) to bind table names
before they are used, potentially multiple times:
WITH
‹T₁›(‹c₁₁›,...,‹c₁﹐ₖ₁›) AS (
‹q₁› ),
⋮ ⎫ Query ‹qᵢ› may refer to
‹Tₙ›(‹cₙ₁›,...,‹cₙ﹐ₖₙ›) AS ( ⎬ tables ‹T₁›,...,‹Tᵢ₋₁›
‹qₙ› ), ⎭
‹q› } ‹q› may refer to all ‹Tᵢ›
“Literate SQL”: Reading and writing order coincide.
Think of let ‹T₁› = ‹q₁›, ... in ‹q› in your favorite FP
language. The ‹Tᵢ› are undefined outside WITH.
SQL With WITH
1. Define queries in stages, intermediate results in tables
‹Tᵢ›. May use ‹q› ≡ TABLE ‹Tᵢ›11 to debug stage i.
2. Bundle a query with test data:
WITH
prehistoric(class,"herbivore?",legs,species) AS (
VALUES ('mammalia',true,2,'Megatherium'),
⋮
('reptilia',false,4,NULL)
)
SELECT MAX(p.legs)
FROM prehistoric AS p
11 Syntactic sugar for SELECT t.* FROM ‹Tᵢ› AS t.
E
16 ┆ Use Case: WITH (Dinosaur Body Shapes)
Paleontology: dinosaur body shape (height/length ratio) and
form of locomotion (using 2 or 4 legs) correlate:
Use this correlation to infer bipedality (quadropedality)
in incomplete dinosaur data sets:
species height length legs
Gallimimus 2.4 5.5 ?
E
Dinosaur Body Shapes
Table dinosaurs
species height length legs
Ceratosaurus 4.0 6.1 2
Deinonychus 1.5 2.7 2
Microvenator 0.8 1.2 2
Plateosaurus 2.1 7.9 2
Spinosaurus 2.4 12.2 2
Tyrannosaurus 7.0 15.2 2
Velociraptor 0.6 1.8 2
Apatosaurus 2.2 22.9 4
Brachiosaurus 7.6 30.5 4
Diplodocus 3.6 27.1 4
Supersaurus 10.0 30.5 4
Albertosaurus 4.6 9.1 NULL
Argentinosaurus 10.7 36.6 NULL
Compsognathus 0.6 0.9 NULL
Gallimimus 2.4 5.5 NULL
Mamenchisaurus 5.3 21.0 NULL
Oviraptor 0.9 1.5 NULL
Ultrasaurus 8.1 30.5 NULL
E
Dinosaur Body Shapes
WITH
bodies(legs, shape) AS (
SELECT d.legs, AVG(d.height / d.length) AS shape
FROM dinosaurs AS d
WHERE d.legs IS NOT NULL
GROUP BY d.legs
)
⋮
Transient Table bodies
legs shape
2 0.201
4 0.447
E
Dinosaur Body Shapes
Query Plan:12 ✎
1. Assume average body shapes in bodies are available
2. Iterate over all dinosaurs d:
If locomotion for d is known, output d as is
If locomotion for d is unknown:
Compute body shape for d
Find the shape entry b in bodies that matches d
the closest
Use the locomotion in b to complete d, output
completed d
12 In this course, query plan refers to a “plan of attack” for a query problem, not EXPLAIN output.