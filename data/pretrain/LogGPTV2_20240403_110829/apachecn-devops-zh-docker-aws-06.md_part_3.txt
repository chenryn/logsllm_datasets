    amazon-ebs: Cleanup : python27-2.7.12-2.121.amzn1.x86_64 4/6
    amazon-ebs: Cleanup : python27-libs-2.7.12-2.121.amzn1.x86_64 5/6
    amazon-ebs: Cleanup : elfutils-libelf-0.163-3.18.amzn1.x86_64 6/6
    amazon-ebs: Verifying : python27-libs-2.7.13-2.122.amzn1.x86_64 1/6
    amazon-ebs: Verifying : elfutils-libelf-0.168-8.19.amzn1.x86_64 2/6
    amazon-ebs: Verifying : python27-2.7.13-2.122.amzn1.x86_64 3/6
    amazon-ebs: Verifying : python27-libs-2.7.12-2.121.amzn1.x86_64 4/6
    amazon-ebs: Verifying : elfutils-libelf-0.163-3.18.amzn1.x86_64 5/6
    amazon-ebs: Verifying : python27-2.7.12-2.121.amzn1.x86_64 6/6
    amazon-ebs:
    amazon-ebs: Updated:
    amazon-ebs: elfutils-libelf.x86_64 0:0.168-8.19.amzn1
    amazon-ebs: python27.x86_64 0:2.7.13-2.122.amzn1
    amazon-ebs: python27-libs.x86_64 0:2.7.13-2.122.amzn1
    amazon-ebs:
    amazon-ebs: Complete!
==> amazon-ebs: Stopping the source instance...
    amazon-ebs: Stopping instance, attempt 1
==> amazon-ebs: Waiting for the instance to stop...
==> amazon-ebs: Creating the AMI: docker-in-aws-ecs 1518934269
    amazon-ebs: AMI: ami-57415b2d
==> amazon-ebs: Waiting for AMI to become ready...
==> amazon-ebs: Adding tags to AMI (ami-57415b2d)...
==> amazon-ebs: Tagging snapshot: snap-0bc767fd982333bf8
==> amazon-ebs: Tagging snapshot: snap-0104c1a352695c1e9
==> amazon-ebs: Creating AMI tags
    amazon-ebs: Adding tag: "SourceAMI": "ami-5e414e24"
    amazon-ebs: Adding tag: "DockerVersion": "17.09.1-ce"
    amazon-ebs: Adding tag: "ECSAgentVersion": "1.17.0-2"
    amazon-ebs: Adding tag: "Name": "Docker in AWS ECS Base Image 2017.09.h"
==> amazon-ebs: Creating snapshot tags
==> amazon-ebs: Terminating the source AWS instance...
==> amazon-ebs: Cleaning up any extra volumes...
==> amazon-ebs: No volumes to clean up, skipping
==> amazon-ebs: Deleting temporary security group...
==> amazon-ebs: Deleting temporary keypair...
==> amazon-ebs: Running post-processor: manifest
Build 'amazon-ebs' finished.
==> Builds finished. The artifacts of successful builds are:
--> amazon-ebs: AMIs were created:
us-east-1: ami-57415b2d
```
Running a Packer build
回到前面的例子和前面例子的输出，请注意在`build`任务中，构建 Packer 映像的命令只是`packer build `，在本例中是`packer build packer.json`。
如果您查看前面示例的输出，您可以看到 Packer 执行了以下步骤:
*   Packer 首先验证源 AMI，然后生成临时 SSH 密钥对和安全组，以便能够访问临时 EC2 实例。
*   Packer 从源 AMI 启动一个临时 EC2 实例，然后等待，直到它能够建立 SSH 访问。
*   Packer 执行模板的置备程序部分中定义的置备操作。在这种情况下，您可以看到 yum `update`命令的输出，这是我们当前的单个供应操作。
*   一旦完成，Packer 将停止实例并创建 EBS 卷实例的快照，这将生成一个具有适当名称和 ID 的 AMI。
*   创建 AMI 后，Packer 终止实例，删除临时 SSH 密钥对和安全组，并输出新的 AMI ID。
回想一下前面的例子，您在模板中添加了一个清单后处理器，您应该会发现一个名为`manifest.json`的文件已经在您的存储库的根目录下输出，您通常不希望将其提交到您的 **packer-ecs** 存储库:
```
> cat manifest.json
{
  "builds": [
    {
      "name": "amazon-ebs",
      "builder_type": "amazon-ebs",
      "build_time": 1518934504,
      "files": null,
 "artifact_id": "us-east-1:ami-57415b2d",
      "packer_run_uuid": "db07ccb3-4100-1cc8-f0be-354b9f9b021d"
    }
  ],
  "last_run_uuid": "db07ccb3-4100-1cc8-f0be-354b9f9b021d"
}
> echo manifest.json >> .gitignore
```
Viewing the Packer build manifest
# 使用 Packer 构建定制的 ECS 容器实例映像
在前一节中，您使用 Packer 建立了用于构建自定义 AMI 的基础模板，并继续构建和发布您的第一个自定义 AMI。此时，您还没有执行任何特定于供应 ECS 容器实例的用例的定制，因此本节将着重于增强您的 Packer 模板以包括这样的定制。
您现在将了解的自定义包括以下内容:
*   定义自定义存储配置
*   安装附加软件包和配置操作系统设置
*   配置清理脚本
*   创建第一次运行脚本
有了这些定制，我们将通过构建您的最终定制 ECS 容器实例 AMI 并启动一个实例来验证各种定制来完成这一章。
# 定义自定义存储配置
AWS ECS 优化的 AMI 包括使用 30 GB EBS 卷的默认存储配置，该卷按如下方式分区:
*   `/dev/xvda`:一个 8 GB 的卷，作为根文件系统挂载，并作为操作系统分区。
*   `dev/xvdcz`:配置为逻辑卷管理(LVM)设备的 22 GB 卷，用于 Docker 映像和元数据存储。
The ECS-Optimized AMI uses the devicemapper storage driver for Docker image and metadata storage, which you can learn more about at [https://docs.docker.com/v17.09/engine/userguide/storagedriver/device-mapper-driver/](https://docs.docker.com/storage/storagedriver/device-mapper-driver/).
对于大多数使用情况，这种存储配置应该足够了，但是在一些情况下，您可能需要修改默认配置:
*   **您需要更多的 Docker 映像和元数据存储**:这可以通过简单地将您的 ECS 容器实例配置为更大的卷大小来轻松解决。默认存储配置将始终为操作系统和根文件系统保留 8GB，剩余的存储将分配给 Docker 映像和元数据存储。
*   **您需要支持具有大存储需求的 Docker 卷**:默认情况下，ECS 优化的 AMI 将 Docker 卷存储在`/var/lib/docker/volumes`，这是 8GB `/dev/xvda`分区上根文件系统的一部分。如果您有更大的卷需求，这可能会导致您的操作系统分区很快变满，因此在这种情况下，您应该将卷存储分离到单独的 EBS 卷。
现在让我们看看如何修改您的 Packer 模板，为 Docker 卷存储添加一个新的专用卷，并确保在创建实例时正确装载该卷。
# 添加 EBS 卷
要向您的自定义 AMIs 添加 EBS 卷，您可以在亚马逊 EBS 生成器中配置`launch_block_device_mappings`参数:
```
{
  "variables": {...},
  "builders": [
    {
      "type": "amazon-ebs",
      "access_key": "{{user `aws_access_key_id`}}",
      "secret_key": "{{user `aws_secret_access_key`}}",
      "token": "{{user `aws_session_token`}}",
      "region": "us-east-1",
      "source_ami": "ami-5e414e24",
      "instance_type": "t2.micro",
      "ssh_username": "ec2-user",
      "associate_public_ip_address": "true",
      "ami_name": "docker-in-aws-ecs {{timestamp}}",
      "launch_block_device_mappings": [
 {
 "device_name": "/dev/xvdcy",
 "volume_size": 20,
 "volume_type": "gp2",
 "delete_on_termination": true
 }
 ],
      "tags": {
        "Name": "Docker in AWS ECS Base Image 2017.09.h",
        "SourceAMI": "ami-5e414e24",
        "DockerVersion": "17.09.1-ce",
        "ECSAgentVersion": "1.17.0-2"
      }
    }
  ],
  "provisioners": [...],
  "post-processors": [...]
}
```
Adding a launch block device mapping
在前面的示例中，为了简洁起见，我截断了 Packer 模板的其他部分，您可以看到我们添加了一个名为`/dev/xvdcy`的 20 GB 卷，该卷被配置为在实例终止时销毁。请注意，`volume_type`参数设置为`gp2`，这是一种通用固态硬盘存储类型，通常在 AWS 中提供最佳的整体性价比。
# 格式化和装入卷
有了前面示例的配置，我们接下来需要格式化并装载这个新卷。因为我们使用了`launch_block_device_mappings`参数(与`ami_block_device_mappings`参数相反)，块设备实际上是在映像构建时附加的(后一个参数仅在映像创建时附加)，我们可以在构建时执行所有格式化和装载配置设置。
要执行此配置，我们将添加一个外壳程序，该程序将一个名为`scripts/storage.sh`的文件引用到您的 Packer 模板中:
```
{
  "variables": {...},
  "builders": [...],
  "provisioners": [
    {
 "type": "shell",
 "script": "scripts/storage.sh"
 },
    {
      "type": "shell",
      "inline": [
        "sudo yum -y -x docker\\* -x ecs\\* update"
      ] 
    }
  ],
  "post-processors": [...]
}
```
Adding a shell provisioner for configuring storage
被引用的脚本被表示为相对于 Packer 模板的路径，因此您现在需要创建这个脚本:
```
> mkdir -p scripts
> touch scripts/storage.sh
> tree
.
├── Makefile
├── manifest.json
├── packer.json
└── scripts
 └── storage.sh
1 directory, 4 files
```
Creating a scripts folder
有了脚本文件，您现在可以在该脚本中定义各种 shell 配置操作，如下例所示:
```
#!/usr/bin/env bash
set -e
echo "### Configuring Docker Volume Storage ###"
sudo mkdir -p /data
sudo mkfs.ext4 -L docker /dev/xvdcy
echo -e "LABEL=docker\t/data\t\text4\tdefaults,noatime\t0\t0" | sudo tee -a /etc/fstab
sudo mount -a
```
Storage provisioning script
正如您在前面的示例中所看到的，该脚本是一个常规的 bash 脚本，始终为您的所有 Packer shell 脚本(`set -e`)设置错误标志是很重要的，这确保了如果脚本中的任何命令失败，该脚本将带着错误代码退出。
首先创建一个名为`/data`的文件夹，用于存储 Docker 卷，然后用`.ext4`文件系统格式化前面示例中连接的`/dev/xvdcy`设备，并附加一个名为`docker`的标签，这使得装载操作更容易执行。下一个`echo`命令向`/etc/fstab`文件添加一个条目，该条目定义了将在引导时应用的所有文件系统挂载，请注意，您必须将`echo`命令传送到`sudo tee -a /etc/fstab`，这将把`echo`输出附加到具有正确 sudo 权限的`/etc/fstab`文件。
最后，您可以通过运行`mount -a`命令来自动装载`/etc/fstab`文件中的新条目，虽然在映像构建时不需要该命令，但这是一种验证装载是否实际配置正确的简单方法(如果没有，该命令将失败，最终构建将失败)。
# 安装附加软件包和配置系统设置
您将执行的下一个自定义是安装其他软件包和配置系统设置。
# 安装附加软件包
我们还需要在定制的 ECS 容器实例中安装一些额外的包，包括以下内容: