title:A Formal Analysis of IEEE 802.11's WPA2: Countering the Kracks
Caused by Cracking the Counters
author:Cas Cremers and
Benjamin Kiesl and
Niklas Medinger
A Formal Analysis of IEEE 802.11’s WPA2: 
Countering the Kracks Caused by Cracking the Counters
Cas Cremers, Benjamin Kiesl, and Niklas Medinger, 
CISPA Helmholtz Center for Information Security
https://www.usenix.org/conference/usenixsecurity20/presentation/cremers
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.A Formal Analysis of IEEE 802.11’s WPA2:
Countering the Kracks Caused by Cracking the Counters
Cas Cremers
CISPA Helmholtz Center
for Information Security
Benjamin Kiesl
CISPA Helmholtz Center
for Information Security
Niklas Medinger
CISPA Helmholtz Center
for Information Security
Abstract
The IEEE 802.11 WPA2 protocol is widely used across the
globe to protect network connections. The protocol, which
is speciﬁed on more than three-thousand pages and has re-
ceived various patches over the years, is extremely complex
and therefore hard to analyze. In particular, it involves vari-
ous mechanisms that interact with each other in subtle ways,
which offers little hope for modular reasoning. Perhaps be-
cause of this, there exists no formal or cryptographic argument
that shows that the patches to the core protocol indeed pre-
vent the corresponding attacks, such as, e.g., the notorious
KRACK attacks from 2017.
In this work, we address this situation and present an ex-
tensive formal analysis of the WPA2 protocol design. Our
model is the ﬁrst that is detailed enough to detect the KRACK
attacks; it includes mechanisms such as the four-way hand-
shake, the group-key handshake, WNM sleep mode, the data-
conﬁdentiality protocol, and their complex interactions.
Our analysis provides the ﬁrst security argument, in any
formalism, that the patched WPA2 protocol meets its claimed
security guarantees in the face of complex modern attacks.
1 Introduction
The vast majority of consumer internet connections take place
over WiFi. In practice, this means that they use the security
protocol WPA2 (short for WiFi Protected Access 2), which
is part of the IEEE 802.11 WiFi standard. While there exists
a newer WPA3 standard since late 2018, the lack of WPA3
support in existing routers and end devices means that a sub-
stantial part of all end-user internet trafﬁc passes over WPA2
connections. For internet trafﬁc that does not use alternative
layers of protection (such as TLS), WPA2 is then the only line
of defense against anyone in range of the wireless connection.
Over time, the security of the WiFi standards has been a cat-
and-mouse game, with attacks and ﬁxes following each other
in sometimes rapid succession (e.g., [4, 8–10, 17, 20, 24–26,
28, 32]). Initial attacks exploited rather simple design errors,
but with the advent of WPA2 and a range of patches, many
protocol attacks were no longer possible. In 2005, researchers
published proof sketches of the core components of the WPA2
handshake protocol [18], deeming it secure. The main attack
vector that remained was a brute-force ofﬂine guessing attack,
which is inherent in the protocol’s design.
It came therefore as a substantial shock in 2017 when Van-
hoef and Piessens showed that it was possible to break the
WPA2 protocol entirely without guessing the password [29].
Their attacks exploit the combination of (i) WPA2’s use of
nonces (short for “numbers used once”) as initialization vec-
tors for its authenticated encryption schemes, (ii) the known
fact that the reuse of initialization vectors causes severe se-
curity issues, and (iii) the observation that the reinstalla-
tion of an encryption key in WPA2 updates its associated
nonce/initialization vector. The attacks force the reuse of
nonces by tricking a client into reinstalling a key. Hence, they
are called key-reinstallation attacks, or KRACKs in short.
While Vanhoef and Piessens proposed countermeasures
in [29], they argued only informally why these countermea-
sures would be effective. IEEE then implemented a slightly
different countermeasure. However, in 2018, Vanhoef and
Piessens showed new attack variants that circumvent their
previously suggested countermeasures as well as the one im-
plemented by IEEE [30]. In addition to proposing yet an-
other range of countermeasures, they state: “We conclude that
preventing key reinstallations is harder than expected, and
believe that (formally) modeling 802.11 would help to better
secure both implementations and the standard itself.” Their
work led to IEEE including new countermeasures in the draft
802.11 standard.
This brings us to the present: there still exists no security
analysis of the WPA2 protocol, in any methodology, that is
detailed enough to capture attacks such as the KRACK attacks.
Consequently, we still have no better conﬁdence in the latest
WPA2 drafts than the hope that no one has found yet another
attack variant.
This may come as a surprise, given that other complex mod-
ern security protocols such as TLS 1.3, Signal, and 5G AKA
USENIX Association
29th USENIX Security Symposium    1
have received substantial detailed analysis from the academic
community using a range of techniques, e.g., [2,3,5–7,11–13,
15]. So why haven’t we seen similar analyses for WPA2? We
conjecture that the underlying reason is that WPA2 uses a non-
standard combination of nonces and counters that are shared
across several mechanisms which interact in ways that are
hard to predict. In particular, this includes mechanisms that
might appear irrelevant for security, but actually turn out to be
a potential source of vulnerabilities (such as sleep frames, as
we will see later). These design choices complicate any anal-
ysis effort, and especially contrast with TLS 1.3’s relatively
analysis-friendly design. Perhaps because of this, no detailed
systematic analysis of WPA2 has been put forward, despite
its widespread global use.
In this work, we set out to rectify this situation, and develop
a detailed formal model of the WPA2 design that captures
intricate attacks, including the KRACK attacks and their vari-
ants. We perform an automated analysis on our model using
the Tamarin prover [23]. We show how our model exhibits the
KRACK attacks and their variants, and evaluate the proposed
countermeasures. While our work was originally motivated by
those attacks, our general attacker model and detailed model
of the standard capture many more subtle behaviors. Ulti-
mately, we ﬁnd that some countermeasures are sufﬁcient to
cover all attacks on our model, and hence show formally that
these patches indeed prevent the earlier attacks as well as a
much larger class of attacks.
Our main contributions are as follows:
• We present the ﬁrst detailed security analysis of the
WPA2 protocol design, including the four-way hand-
shake, group-key handshake, WNM sleep mode, and the
data-conﬁdentiality protocols used to protect messages.
• Our formal model generalizes traditional symbolic-
analysis approaches of symmetric encryption by allow-
ing the attacker to exploit the reuse of nonces in en-
crypted messages, thus loosening the assumption of per-
fect cryptography. This allows us to show that if we leave
out the countermeasures, our formal model exhibits the
key-reinstallation attacks.
• We prove that certain countermeasures, suggested by
Vanhoef and Piessens to prevent key-reinstallation at-
tacks, are indeed sufﬁcient to guarantee secrecy of the
pairwise transient key, secrecy of the group transient
keys, and authentication of the four-way handshake.
All our models, proofs, and documentation to reproduce our
results are available on a dedicated website corresponding to
this paper [14].
Paper Organization The rest of this paper is structured
as follows: In Section 2, we discuss background required to
understand the rest of the paper. In particular, we give a high-
level overview of the WPA2 protocol, discuss the notorious
key-reinstallation attacks, and explain Tamarin—the prover
used in our formal analysis. After this, we outline our formal
model of WPA2 and discuss modeling decisions in Section 3.
As it is impossible to discuss our entire model on just a few
pages, we focus on the most important parts. In Section 4,
we present our formal analysis—this includes a discussion
of the security properties we proved and details on how we
proved them; Section 4 is thus particularly interesting for
readers with practical experience in the symbolic analysis of
protocols. In Section 5, we then present the main results of
our analysis before discussing related work in Section 6 and
concluding in Section 7.
2 Background
2.1 Overview of WPA2
WPA2 is a protocol used for securing communication over
wireless networks. Speciﬁed in the more-than-three-thousand
pages long IEEE 802.11 standard [1], it allows a client (e.g., a
laptop or a smartphone) to establish cryptographic keys with
an access point (e.g., a router) in order to encrypt messages
exchanged over a network. The IEEE standard refers to the
two protocol participants as supplicant (on the client side)
and authenticator (on the access-point side); for consistency,
we stick to the terms used in the standard in the rest of the
paper. The two most important cryptographic keys deﬁned by
WPA2 are the so-called pairwise transient key (PTK) and the
group temporal key (GTK). In typical scenarios, the pairwise
transient key is used to secure a supplicant’s WiFi trafﬁc. The
group temporal key is used to secure broadcast messages from
an authenticator to its supplicants, e.g., for IP-multicast trafﬁc.
To establish these keys, the supplicant and the authenti-
cator exchange messages in a predeﬁned manner known as
the four-way handshake. Over the course of this four-way
handshake, the supplicant and the authenticator derive their
pairwise transient key, starting out from a preshared secret,
which could, for instance, be the password you enter when
connecting to a wireless network for the ﬁrst time. This pre-
shared secret is called the pairwise master key (PMK). As
part of the handshake, the authenticator also shares its current
group temporal key with the supplicant. Note here that the
pairwise transient key is derived from shared inputs by both
the authenticator and the supplicant whereas group temporal
keys are generated by the authenticator alone.
In a nutshell, an ideal execution of the four-way handshake
is as follows: The authenticator and the supplicant both gen-
erate a fresh nonce which they share with each other. Each
of them then combines the two nonces with the preshared
secret to derive their pairwise transient key. Once the authen-
2    29th USENIX Security Symposium
USENIX Association
Figure 1: Overview of a Successful Four-Way Handshake.
ticator has derived the pairwise transient key, it shares the
group temporal key with the supplicant. Note that the stan-
dard distinguishes between the derivation and the installation
of a key: once a party has derived a key, it knows the key
but it might not yet be ready to encrypt messages with that
key; only when the party installs the key can it also encrypt
messages with that key. In particular, after receiving the group
temporal key, the supplicant then installs both keys and sends
a conﬁrmation to the authenticator who, upon receipt of the
conﬁrmation, also installs the pairwise transient key.
Figure 1 shows a more detailed view of an ideal four-way
handshake. As shown in the ﬁgure, the handshake involves
the exchange of four messages as follows:
(1) The authenticator generates a fresh nonce, called the
ANonce, and together with a replay counter (i.e., a counter
used to protect the receiver against replay attacks) sends
it to the supplicant.
(2) The supplicant generates its own fresh nonce, the SNonce,
and uses a key derivation function to derive the pairwise
transient key (PTK) from the preshared secret (PMK) and
the two nonces: PTK = KDF(PMK,ANonce,SNonce).
Then, the supplicant sends the SNonce and the replay
counter it received in message 1 to the authenticator. Ad-
ditionally, to allow the authenticator to verify the integrity
of the message, it appends a message integrity code (MIC)
computed with the PTK. In the context of the WPA2 pro-
tocol, message integrity code is just another term for the
more common message authentication code (MAC).
(3) After receiving message 2, the authenticator also derives
the PTK and checks its message integrity code. It then
encrypts the GTK and—together with an incremented
replay counter and a MIC (also computed with the PTK)—
sends it to the supplicant.
(4) When the supplicant receives message 3, it checks the
message integrity code. In case the check is successful,
Figure 2: Overview of a Successful Group-Key Handshake.
it installs the GTK and the PTK, setting the PTK’s nonce
to 0; as we explain on the next page, this nonce functions
as an initialization vector in the encryption scheme. To
conﬁrm to the authenticator that the installation was suc-
cessful, the supplicant uses the PTK to compute a MIC
for the replay counter of message 3 and sends both the
replay counter and the MIC back to the authenticator.
At this point, the authenticator also installs the pairwise
transient key and the handshake is complete. Unfortunately,
this “ideal” handshake tells only part of the story. In reality,
there are many more mechanisms and details that make WPA2
an immensely complex protocol with lots of room for trouble.
One mechanism, aimed at improving security, is the exe-
cution of periodic renewals of the keys, so-called rekeys. A
rekey of the pairwise transient key involves a new iteration
of the four-way handshake. A rekey of the group temporal
key can involve a new iteration of the four-way handshake
with one supplicant (the one who initiated the rekey) and so-
called group-key handshakes with the other supplicants ([1], p.
2021). The purpose of such a group-key handshake is simply
to distribute the new group temporal key to all supplicants.
An ideal group-key handshake is shown in Figure 2. The
authenticator just sends the current group temporal key to-
gether with the current nonce and a message integrity code
to the supplicant, who then installs the key and conﬁrms the
installation to the authenticator. We discuss the group-key
handshake in more detail in Section 3.2.
Finally, there are other seemingly harmless mechanisms,
such as the possibility to send handshake messages multiple
times in order to deal with messages lost on the network, or
the so-called WNM sleep mode (WNM is short for wireless
network management), a mechanism that allows a supplicant
to reduce power consumption by temporarily shutting itself
off from certain trafﬁc.
Ultimately, the purpose of the keys in WPA2 is to se-
cure WiFi trafﬁc. This is achieved by using the keys as
encryption keys in so-called data-conﬁdentiality protocols
that protect messages exchanged over the network. These
data-conﬁdentiality protocols utilize authenticated encryption
schemes based on nonces, and the wrong use (in particular
the reuse) of these nonces can be exploited by attackers.
USENIX Association
29th USENIX Security Symposium    3
PlaceholderAuthenticatorSupplicantM1: ANonce, counter1GenerateANonceM3: encPTK(GTK, NonceGTK), counter2, MICPTKM2: SNonce, counter1, MICPTKM4: counter2, MICPTKGenerateSNonce andderive PTKInstall PTKInstall PTK + GTKDerive PTKAuthenticatorSupplicantM1: encPTK(GTK, NonceGTK), counter, MICPTK M2: counter, MICPTK Install GTKwith NonceGTKInstall GTKwith NonceGTKAuthenticated Encryption and Nonce Reuse WPA2 al-
lows to choose from three different data-conﬁdentiality proto-
cols that enable authenticated encryption ([1], p. 1953):
• TKIP (Temporal Key Integrity Protocol),
• CCMP (Counter Mode with CBC-MAC Protocol),
• GCMP (Galois Counter Mode Protocol).
All three use a key together with a nonce for encryption; the
nonces are analogous to initialization vectors in counter-mode
encryption: they are initialized with a certain value and then
incremented for every encrypted message. On the receiver
side, the nonces are also used to protect against replay attacks.
A problem that arises in this context is that the reuse of a
nonce for a particular key can have negative consequences
whose impact varies for the data-conﬁdentiality protocols.
However, what holds for all of them is that if a nonce is
reused, then this allows an attacker to decrypt messages sent
over the network as well as to replay messages. Additionally,
for TKIP, nonce reuse allows an attacker to forge messages in
one direction [27], and for GCMP it even allows an attacker
to forge messages in both directions [19]. As we will see in
the following, the reuse of nonces can, for instance, be caused
by the reinstallation of a key.