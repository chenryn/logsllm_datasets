10.2.2PythonGdb
PythonGdb使我们可以通过Python脚本来编写gdb调试脚本。详
细的文档请参见https://sourceware.org/gdb/wiki/PythonGdbTutorial。
之前介绍过的peda就是用PythonGdb编写的。
下面对几个经常会用到的功能进行简单包装。
1.断点功能
class OnBreakpoint(gdb.Breakpoint):
definit（self,loc,callback):
if isinstance(loc,int):
loc="+hex（loc)
super(OnBreakpoint, self).init_(loc, gdb.BP_BREAKPOINT,intermal=False)
self.callback=callback
def stop(self):
self.callback()
returnFalse
在loc处下断点，中断时，执行callback函数。
2.寄存器和内存操作
def get_reg(reg):
return int(gdb.parse_and_eval("$"+reg))
def set_reg(reg,value):
return gdb.execute("set $”+reg+”"+str(value)
---
## Page 272
CTF特训营：技术详解、解题方法与
10.2.2 PythonGdb
272/1144
def read_mem(address,length):
inferior=gdb.selected_inferior()
return inferior.read_memory(address,length)
def write_mem(address, value):
inferior = gdb.selected_inferior()
return inferior.write_memory(address, value)
---
## Page 273
CTF特训营：技术详解、解题方法与
10.2.3 pydbg
273/1144
10.2.3
pydbg
pydbg是基于Python实现的一个Windows调试器框架。基于它
可以实现对Windows下程序的自动化调试
一个pydbg的模板如下，通过bp_set可以在程序的任意点设置断
点，并添加对应的处理函数：
frompydbg import*
frompydbg.definesimport*
def handler1(dbg):
#some code here
returnDBG_CONTINUE
def main():
target='/reverse0.exe'
dbg=pydbg()
dbg.load(target,create_new_console=True)
#seta break point
dbg.bp_set(0x00415fad, handler=handler1)
dbg.run()
main()
---
## Page 274
CTF特训营：技术详解、解题方法与
10.2.4 Angr
274/1144
10.2.4Angr
Angr是一个强大的二进制分析工具，其官方文档在htps://
docs.angriol。在逆向中，一般使用Angr的动态符号执行解出flag。
Angr文档中提供了很多的实例（https://docs.angr.io/docs/
examples.html），可以通过这些实例学习Angr的使用。
一个常见的Angr脚本包括以下几个步骤。
1）使用angr.Project加载要分析的二进制程序，这里通常会将选
项auto_load_libs设置为false，使angr不加载动态链接库：
p = angr.Project(./vul, load_options={"auto_load_libs":False))
2）建立程序的一个初始化状态。
使用factory.entry_state直接在程序入口点建立一个初始化状态。
如果此时程序需要传递符号化的输入，那么还需要在建立初始化状态
时，进行符号化：
argv1=claripy.BVS("argv1",100*8)
---
## Page 275
CTF特训营：技术详解、解题方法与
10.2.4 Angr
275/1144
也可以使用factory.black_state在程序的任意指定地址建立一个状
态。此时，可以通过memory.store对状态中的部分内存进行符号化：
s=p.factory.blank_state(addr=0x401084)
s.memory.store(0x402159,s.solver.BVS("ans",8*40)
3）从初始化状态开始进行动态符号执行，使用explore进行路径
的探索，通过find参数指定需要到达的地址，avoid参数则用于指定不
要到达的地址：
sm=proj.factory.simulation_manager(initial_state)
sm.explore（find=0x400830,avoid=0x400850)
4）找到之后，通过约束求解器得到flag：
[opunoj'us =puno,
flag =found.solver.eval(argv1,cast_to=bytes)
---
## Page 276
CTF特训营：技术详解、解题方法与
10.3干扰分析技术及破解方法
276/1144
10.3干扰分析技术及破解方法
常见的干扰逆向分析的技术有花指令、反调试、加壳、控制流混
淆、双进程保护、虚拟机保护等技术，下面会简单介绍这几种技术
并介绍破解的基本思路。
---
## Page 277
CTF特训营：技术详解、解题方法与
10.3.1花指令277/1144
10.3.1花指令
花指令是代码保护中一种比较简单的技巧。其原理是在原始的代
码中插入一段无用的或者能够干扰反汇编引擎的代码，这段代码本身
没有任何功能性的作用，只是一种扰乱代码分析的手段。
1.基本思路
花指令主要是影响静态分析，在IDA中表现为一些指令无法识别
导致某些函数未能识别，从而无法对这些函数进行反编译。在IDA中
手动将花指令patch成nop空指令，可以去除花指令。如果二进制程序
中的花指令较多，那么可以通过分析花指令的特定模式，编写
IDAPython脚本对花指令进行自动化搜索和patch
2.实例分析
用IDA打开程序，发现加入了花指令，如图10-21所示。可以看出
在4010dd处插入了两个无用的字节，影响了IDA的反汇编，将这两个
无用字节修改为nop指令，可以去除该花指令，如图10-22所示
---
## Page 278
CTF特训营：技术详解、解题方法与
10.3.1花指令
278/1144
.text:004010D0
push
ebp
.text:00401001
mov
ebp,esp
.text:004010D3
sub
esp,14h
.text:00401006
push
ebx
.text:004010D7
push
esi
.text:004010D8
push
edi
.text:004010D9
jz
short near ptr
loc4010DD+2
.text:004010DB
jnz
short near ptr
1oc_401000+2
.text:00401000
.text:004010D01oc_4010DD:
；C0DEXREF:.text:004010D9tj
.text:00401000
.text:0040100Btj
.text:004010DD
call
far ptr
F07E68
图10-21
花指令影响IDA的反汇编
.text:00401000
push
ebp
.text:00401001
mov
ebp,esp
.text:00401003
sub
esp,14h
.text:00401006
push
ebx
text:00401007
push
esi
.text:00401008
push
edi
.text:00401009
jz
short 1oc_401eDF
.text:004010DB
jnz
short 1oc_401eDF
.text:0040100D
nop
.text:004010DE
nop
.text:0040100F
text:004010DF 1oc_4010DF:
；CODE XREF:.text:004010091j
text:004010DF
；.text:00401e0Btj
.text:004010DF
jle
short 1oc_4010E4
.text:004010E1
Jg
short 1oc_4010E4
图10-22
通过patch去除花指令
进一步分析这个程序，可以得到花指令的指令模式，
主要是在某
些特定的指令序列之后插入一至两个无用字节。通过IDA脚本自动去
除花指令的代码如下：
from idaapi import *
fromidcimport*
from idautils import *
---
## Page 279
CTF特训营：技术详解、解题方法与
10.3.1花指令
279/1144
start_ea=0x401000
print 'start....
patterns=[(7302，2）,(EB03',1),(72037301,1）,(74037501,1).(7E037F
01,1),(74047502,2)]
forpatterninpatterns:
ea=start_ea
while True:
ea=FindBinary(ea,SEARCH_DOWN,pattern[O])
ifea==idaapi.BADADDR:
break
ea+=len(pattern[0].replace(,")/2
foriinrange(pattern[1]):
PatchByte(ea+i,0x90)
MakeCode(ea+i)
---
## Page 280
CTF特训营：技术详解、解题方法与
10.3.2反调试280/1144
10.3.2反调试
反调试技术是指在程序运行过程中探测其是否处于被调试状态
如果发现其正在被调试，则使其无法正常运行。Windows下的反调试
方法有很多，网上也有很多文章对其进行了总结，而且在Windows下
通过OD的StringOD插件可以过滤掉大多数的反调试方法。所以，这
里主要针对Linux下一些常见的反调试方法进行介绍。
1.Linux下常见的反调试方法
（1）利用ptrace
Linux下的调试主要是通过ptrace系统调用来实现的。一个进程只
能被一个程序跟踪，所以如果程序被跟踪之后再来调用
ptrace（PTRACE_TRACEM)自然是会不成功的：
#include
#include
int main (int argc, char *argv)
if (ptrace(PTRACE_TRACEME,0,0, O) == -1)
printf ("Debugger detected\n");
return 1;
printf ("OKin");
---
## Page 281
CTF特训营：技术详解、解题方法与
10.3.2反调试
281/1144
return O;
}
(2）proc文件系统检测
读取/proc/self/目录下的部分文件，根据程序在调试和非调试状
态下的文件的不同来进行反调试。例如，/proc/self/status在非调试状
态下，则TracerPid为0，如图10-23所示。但若处于调试状态下，则
TracePid不为0，而是跟踪进程的Pid号，如图10-24所示。
cat/proc/self/status
Name:
cat
研究内容
Umask:
0002
State:
R（running)
论文阅读2018-09-2800:02
Tgid:
26008
.源码级的静态分析&
Ngid:
web学习
Pid:
26008
PPid:
25680
论文阅读2018-09-2800:02
TracerPid:
图10-23非调试状态下/proc/self/status文件的内容
strace-o
a.txt cat/proc/self/status
lame::
cat
Jmask:
0002
State:
R（running）
Tgid:
25857
td:
25857
PPid:
25854
TracerPid:
25854
---
## Page 282
CTF特训营：技术详解、解题方法与
10.3.2反调试
282/1144
图10-24调试状态下/proc/self/status文件的内容
(3）父进程检测
通过getppid系统调用获取得到程序的父进程，如果父进程是gdb
strace或者ltrace，则可以证明程序正在被调试。
2.基本思路
针对这些反调试方法，常用的方法就是定位到反调试的代码，然
后对程序进行patch，在不影响程序正常功能的情况下，跳过对调试
器的检测代码。
3.实例分析
本节所列举的实例来自defcampquals2015的r100.bin。直接运行
程序时，程序将会提示输入密码。但是在gdb中运行时，不会有任何
输出，猜测程序有反调试。
在程序的.init_array中有两个函数，如图10-25所示。这两个函数
会在main函数执行之前执行。
其中，sub_4007A8函数如图10-26所示，通过ptrace对调试器进
行检查，如果检查到调试器，则进入一个while死循环。对这个函数
---
## Page 283
CTF特训营：技术详解、解题方法与
10.3.2反调试
283/1144
进行patch，可以跳过对调试器的检查。
init_array:0000000000600E08off_600E08
dqoffset sub_4006D0
init_array:0000000000600E08
.init_array:0000000000600E10
dqoffset
sub_4007A8
图10-25r100.bin中的.init_array
int64
sub_4007A8(）
int64
result;//rax
4
L
（unsigned int)getenv（"LD_PRELOAD")）
6
while（1）
8
9
10
result=ptrace（PTRACE_TRACEME，OLL,OLL，OLL);
11
if
（result<θ）
12
{
13
while