### 2.3.4 ALTER QUEUE

#### Name
ALTER QUEUE -- Modify the attributes of a queue.

#### Synopsis
```sql
ALTER QUEUE queue_name SET (option_name = option_value, ...);
ALTER QUEUE queue_name ACCESS { START | STOP } [ FOR { enqueue | dequeue } ] [ NOWAIT ];
ALTER QUEUE queue_name { ADD | DROP } CALL TO location_name [ WITH callback_option ];
```

#### Description
The `ALTER QUEUE` command is used to modify the attributes of an existing queue. It supports several forms:

1. **Modify Queue Attributes:**
   - Use the `SET` clause to modify the attributes of the queue.
   - The `option_name` and `option_value` pairs are used to specify the options and their corresponding values.
   - If duplicate `option_name` values are provided, the server will return an error.
   - Supported `option_name` values:
     - `retries`: An integer representing the number of times a dequeue may be attempted.
     - `retrydelay`: A double-precision value representing the delay in seconds.
     - `retention`: A double-precision value representing the retention time in seconds.

2. **Enable or Disable Enqueuing and/or Dequeuing:**
   - Use the `ACCESS` keyword to enable or disable enqueuing and/or dequeuing on a particular queue.
   - The `START` and `STOP` keywords indicate the desired state of the queue.
   - The `FOR` clause specifies whether the state change applies to enqueuing or dequeuing.
   - The `NOWAIT` keyword can be used with `STOP` to specify that the server should not wait for the completion of outstanding transactions before changing the state of the queue.

3. **Add or Drop Callback Details:**
   - Use the `ADD` or `DROP` keywords to add or remove callback details for a queue.
   - `location_name` specifies the name of the callback procedure.
   - `callback_option` can be `context`, and you should specify a `RAW` value when including this clause.

#### Parameters
- **queue_name**: The name (optionally schema-qualified) of an existing queue.
- **option_name**: The name of the option to be associated with the new queue.
- **option_value**: The corresponding value of the option.
- **ACCESS**: Keyword to enable or disable enqueuing and/or dequeuing.
- **START | STOP**: Keywords to indicate the desired state of the queue.
- **FOR enqueue|dequeue**: Clause to specify if the state change applies to enqueuing or dequeuing.
- **NOWAIT**: Keyword to specify that the server should not wait for the completion of outstanding transactions.
- **ADD | DROP**: Keywords to add or remove callback details.
- **location_name**: The name of the callback procedure.
- **callback_option**: Optional parameter, can be `context`.

#### Examples
- **Rename a Queue:**
  ```sql
  ALTER QUEUE work_queue_east RENAME TO work_order;
  ```

- **Modify Queue Attributes:**
  ```sql
  ALTER QUEUE work_order SET (retries = 100, retrydelay = 2, retention = 10);
  ```

- **Enable Enqueuing and Dequeuing:**
  ```sql
  ALTER QUEUE work_order ACCESS START;
  ALTER QUEUE work_order ACCESS START FOR enqueue;
  ALTER QUEUE work_order ACCESS START FOR dequeue;
  ```

- **Disable Enqueuing and Dequeuing:**
  ```sql
  ALTER QUEUE work_order ACCESS STOP NOWAIT;
  ALTER QUEUE work_order ACCESS STOP FOR enqueue;
  ALTER QUEUE work_order ACCESS STOP FOR dequeue;
  ```

- **Add or Drop Callback Details:**
  ```sql
  ALTER QUEUE work_order ADD CALL TO my_callback WITH context 'RAW_VALUE';
  ALTER QUEUE work_order DROP CALL TO my_callback;
  ```

#### See Also
- `CREATE QUEUE`
- `DROP QUEUE`

---

### 2.3.5 ALTER QUEUE TABLE

#### Name
ALTER QUEUE TABLE -- Modify an existing queue table.

#### Synopsis
```sql
ALTER QUEUE TABLE name RENAME TO new_name;
```

#### Description
The `ALTER QUEUE TABLE` command allows a superuser or a user with the `aq_administrator_role` privilege to change the name of an existing queue table.

#### Parameters
- **name**: The name (optionally schema-qualified) of an existing queue table.
- **new_name**: The new name for the queue table.

#### Example
```sql
ALTER QUEUE TABLE wo_queue_east RENAME TO work_order_table;
```

#### See Also
- `CREATE QUEUE TABLE`
- `DROP QUEUE TABLE`

---

### 2.3.6 ALTER ROLE... IDENTIFIED BY

#### Name
ALTER ROLE -- Change the password associated with a database role.

#### Synopsis
```sql
ALTER ROLE role_name IDENTIFIED BY password [REPLACE prev_password];
```

#### Description
This command is used to change the password associated with a database role. A role without the `CREATEROLE` privilege can use this command to change their own password. If the `PASSWORD_VERIFY_FUNCTION` is not `NULL` in their profile, they must include the `REPLACE` clause with their previous password. A database superuser can use this command to change the password associated with any role. If a superuser includes the `REPLACE` clause, it is ignored.

#### Parameters
- **role_name**: The name of the role whose password is to be altered.
- **password**: The role's new password.
- **prev_password**: The role's previous password.

#### Examples
```sql
ALTER ROLE john IDENTIFIED BY xyRP35z REPLACE 23PJ74a;
```

#### See Also
- `CREATE ROLE`
- `DROP ROLE`
- `GRANT`
- `REVOKE`
- `SET ROLE`

---

### 2.3.7 ALTER ROLE - Managing Database Link and DBMS_RLS Privileges

#### Name
ALTER ROLE -- Manage database link and DBMS_RLS privileges.

#### Synopsis
```sql
ALTER ROLE role_name WITH [CREATEDBLINK | CREATE DATABASE LINK];
ALTER ROLE role_name WITH [NOCREATEDBLINK | NO CREATE DATABASE LINK];
ALTER ROLE role_name WITH [CREATEPUBLICDBLINK | CREATE PUBLIC DATABASE LINK];
ALTER ROLE role_name WITH [NOCREATEPUBLICDBLINK | NO CREATE PUBLIC DATABASE LINK];
ALTER ROLE role_name WITH [DROPPUBLICDBLINK | DROP PUBLIC DATABASE LINK];
ALTER ROLE role_name WITH [NODROPPUBLICDBLINK | NO DROP PUBLIC DATABASE LINK];
ALTER ROLE role_name WITH [POLICYEXEMPT | EXEMPT ACCESS POLICY];
ALTER ROLE role_name WITH [NOPOLICYEXEMPT | NO EXEMPT ACCESS POLICY];
```

#### Description
Advanced Server includes extra syntax for the `ALTER ROLE` command to manage privileges related to creating and dropping database links and fine-grained access control (using DBMS_RLS).

- **Create Private Database Link:**
  - Grant the `CREATE DATABASE LINK` privilege to a role.
  - Revoke the `CREATE DATABASE LINK` privilege from a role.

- **Create Public Database Link:**
  - Grant the `CREATE PUBLIC DATABASE LINK` privilege to a role.
  - Revoke the `CREATE PUBLIC DATABASE LINK` privilege from a role.

- **Drop Public Database Link:**
  - Grant the `DROP PUBLIC DATABASE LINK` privilege to a role.
  - Revoke the `DROP PUBLIC DATABASE LINK` privilege from a role.

- **Exempt Access Policy:**
  - Grant the `EXEMPT ACCESS POLICY` privilege to a role.
  - Revoke the `EXEMPT ACCESS POLICY` privilege from a role.

#### Parameters
- **role_name**: The name of the role to which the privileges are being granted or revoked.

#### Examples
- **Grant Create Private Database Link:**
  ```sql
  ALTER ROLE role_name WITH CREATE DATABASE LINK;
  ```

- **Revoke Create Private Database Link:**
  ```sql
  ALTER ROLE role_name WITH NO CREATE DATABASE LINK;
  ```

- **Grant Create Public Database Link:**
  ```sql
  ALTER ROLE role_name WITH CREATE PUBLIC DATABASE LINK;
  ```

- **Revoke Create Public Database Link:**
  ```sql
  ALTER ROLE role_name WITH NO CREATE PUBLIC DATABASE LINK;
  ```

- **Grant Drop Public Database Link:**
  ```sql
  ALTER ROLE role_name WITH DROP PUBLIC DATABASE LINK;
  ```

- **Revoke Drop Public Database Link:**
  ```sql
  ALTER ROLE role_name WITH NO DROP PUBLIC DATABASE LINK;
  ```

- **Grant Exempt Access Policy:**
  ```sql
  ALTER ROLE role_name WITH EXEMPT ACCESS POLICY;
  ```

- **Revoke Exempt Access Policy:**
  ```sql
  ALTER ROLE role_name WITH NO EXEMPT ACCESS POLICY;
  ```

#### See Also
- `CREATE ROLE`
- `DROP ROLE`
- `GRANT`
- `REVOKE`
- `SET ROLE`

---

### 2.3.8 ALTER SEQUENCE

#### Name
ALTER SEQUENCE -- Change the definition of a sequence generator.

#### Synopsis
```sql
ALTER SEQUENCE name [ INCREMENT BY increment ]
[ MINVALUE minvalue ] [ MAXVALUE maxvalue ]
[ CACHE cache | NOCACHE ] [ CYCLE ];
```

#### Description
The `ALTER SEQUENCE` command changes the parameters of an existing sequence generator. Any parameter not specifically set in the command retains its prior setting.

#### Parameters
- **name**: The name (optionally schema-qualified) of a sequence to be altered.
- **increment**: The optional clause `INCREMENT BY increment` determines the increment value. A positive value makes an ascending sequence, a negative one a descending sequence.
- **minvalue**: The optional clause `MINVALUE minvalue` determines the minimum value a sequence can generate.
- **maxvalue**: The optional clause `MAXVALUE maxvalue` determines the maximum value for the sequence.
- **cache**: The optional clause `CACHE cache` specifies how many sequence numbers are to be preallocated and stored in memory for faster access.
- **CYCLE**: The `CYCLE` option allows the sequence to wrap around when the `maxvalue` or `minvalue` has been reached.

#### Notes
- To avoid blocking concurrent transactions, `ALTER SEQUENCE` changes take effect immediately and are not reversible.
- Changes to the sequence parameters will not immediately affect `NEXTVAL` results in other backends that have pre-allocated (cached) sequence values.

#### Examples
- **Change the Increment and Cache Value:**
  ```sql
  ALTER SEQUENCE serial INCREMENT BY 2 CACHE 5;
  ```

#### See Also
- `CREATE SEQUENCE`
- `DROP SEQUENCE`

---

### 2.3.9 ALTER SESSION

#### Name
ALTER SESSION -- Change a runtime parameter.

#### Synopsis
```sql
ALTER SESSION SET name = value;
```

#### Description
The `ALTER SESSION` command changes runtime configuration parameters for the current session. Some parameters are provided for Oracle syntax compatibility and have no effect on the runtime behavior of Advanced Server.

#### Parameters
- **name**: The name of a settable runtime parameter.
- **value**: The new value of the parameter.

#### Configuration Parameters
- **NLS_DATE_FORMAT (string)**: Sets the display format for date and time values.
- **NLS_LANGUAGE (string)**: Sets the language in which messages are displayed.
- **NLS_LENGTH_SEMANTICS (string)**: Valid values are `BYTE` and `CHAR`. This parameter is provided for syntax compatibility only.
- **OPTIMIZER_MODE (string)**: Sets the default optimization mode for queries.
- **QUERY_REWRITE_ENABLED (string)**: Valid values are `TRUE`, `FALSE`, and `FORCE`. This parameter is provided for syntax compatibility only.
- **QUERY_REWRITE_INTEGRITY (string)**: Valid values are `ENFORCED`, `TRUSTED`, and `STALE_TOLERATED`. This parameter is provided for syntax compatibility only.

#### Examples
- **Set the Language:**
  ```sql
  ALTER SESSION SET NLS_LANGUAGE = 'en_US.UTF-8';
  ```

- **Set the Date Display Format:**
  ```sql
  ALTER SESSION SET NLS_DATE_FORMAT = 'dd/mm/yyyy';
  ```

#### See Also
- `CREATE SEQUENCE`
- `DROP SEQUENCE`

---

### 2.3.10 ALTER TABLE

#### Name
ALTER TABLE -- Change the definition of a table.

#### Synopsis
```sql
ALTER TABLE name
action [, ...]
ALTER TABLE name
RENAME COLUMN column TO new_column
ALTER TABLE name
RENAME TO new_name
```

#### Description
The `ALTER TABLE` command changes the definition of an existing table. There are several subforms:

- **Add Column:**
  - Adds a new column to the table using the same syntax as `CREATE TABLE`.
- **Drop Column:**
  - Drops a column from a table. Indexes and table constraints involving the column will be automatically dropped.
- **Add Table Constraint:**
  - Adds a new constraint to a table using the same syntax as `CREATE TABLE`.
- **Drop Constraint:**
  - Drops constraints on a table. All matching constraints will be dropped.
- **Rename:**
  - Changes the name of a table or an individual column in a table. There is no effect on the stored data.

#### Parameters
- **name**: The name (possibly schema-qualified) of an existing table to alter.
- **column**: Name of a new or existing column.
- **new_column**: New name for an existing column.
- **new_name**: New name for the table.
- **type**: Data type of the new column.
- **table_constraint**: New table constraint for the table.
- **constraint_name**: Name of an existing constraint to drop.
- **CASCADE**: Automatically drop objects that depend on the dropped constraint.

#### Examples
- **Add a Column:**
  ```sql
  ALTER TABLE my_table ADD column_name column_type;
  ```

- **Drop a Column:**
  ```sql
  ALTER TABLE my_table DROP COLUMN column_name;
  ```

- **Add a Table Constraint:**
  ```sql
  ALTER TABLE my_table ADD CONSTRAINT constraint_name PRIMARY KEY (column_name);
  ```

- **Drop a Constraint:**
  ```sql
  ALTER TABLE my_table DROP CONSTRAINT constraint_name CASCADE;
  ```

- **Rename a Column:**
  ```sql
  ALTER TABLE my_table RENAME COLUMN old_column TO new_column;
  ```

- **Rename a Table:**
  ```sql
  ALTER TABLE old_table RENAME TO new_table;
  ```

#### See Also
- `CREATE TABLE`
- `DROP TABLE`