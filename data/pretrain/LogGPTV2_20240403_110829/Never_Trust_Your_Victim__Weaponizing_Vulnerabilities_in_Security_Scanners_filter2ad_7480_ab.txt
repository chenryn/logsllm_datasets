### Flows and Vulnerabilities

Flows can be subject to various types of vulnerabilities, as discussed in Section 3. In this context, we focus specifically on Cross-Site Scripting (XSS). The heuristics implemented by the exploit checker are designed to recognize a vulnerable flow when an alert window is spawned by the corresponding tainted flow. Once identified, these vulnerable flows are stored in the confirmed vulnerabilities database.

### Definition of Injection Payloads

The definition of injection payloads is non-trivial. For more details, see Section 5.3.

### RevOK Prototype

Our prototype, RevOK, consists of two main modules: the test driver and the test stub. Below, we provide a detailed description of each module.

#### Test Driver

A dedicated test driver is used for each scanning system. The test driver performs the following tasks:
1. Triggers a scan against the test stub.
2. Saves the report in HTML format.
3. Processes the report to detect tainted and vulnerable flows (in Phase 1 and Phase 2, respectively).

While the report processing step (iii) is consistent across all scanning systems, steps (i) and (ii) may vary depending on whether the scanning system has a programmable interface or only a GUI.

- **Programmable Interface**: When a programmable interface is available, we implement a Python 3 client application. For example, we use the native `os` Python module to launch Nmap and save its report in a specific location, as described in Section 2. Similarly, we use the `requests` Python library to invoke the REST APIs provided by a scanning system and save the returned HTML report.

- **GUI-Based Interactions**: When the scanning system only supports GUI-based interactions, we use GUI automation. Specifically, we use the Selenium Python library for browser-based GUIs and PyAutoGUI for desktop GUIs. In this case, the test driver repeats a sequence of operations recorded during a manual test.

For the report processing step (iii), we distinguish between two operations:
- **Tainted Flow Detection**: This involves searching the report for the injected tokens provided by the response generator (see below).
- **Vulnerable Flow Confirmation**: This is done by checking the presence of alert windows using the Selenium function `switch_to_alert()`.

#### Test Stub

For the response generator, we implemented a PCFG grammar fuzzer in Python, as detailed in Section 4.2. Tokens are represented by randomly-generated Universally Unique Identifiers (UUIDs). A UUID consists of 32 hexadecimal characters organized into 5 groups separated by the `-` symbol. An example UUID is `018d54ae-b0d3-4e89-aa32-6f5106e00683`. As required in Section 4.2, UUIDs are both recognizable (due to their low collision probability) and uninterpreted (as they contain no HTML special characters).

Starting from a response, the exploit builder replaces a given UUID with an injection payload. These payloads are selected from a predefined list of polyglots, as discussed in Section 4.3.

### Considerations for Testing Performances

TEE applies to both on-premise and as-a-service scanning systems, but some issues must be considered. One such issue is testing performance. Scanning systems can take a considerable amount of time to perform a single scan. Additionally, as-a-service scanning systems should not be flooded with requests to avoid degrading the quality of service. Therefore, we aim to limit the number of payloads to check.

As discussed in Section 2.3, polyglots allow us to test multiple contexts with a single payload, increasing the success probability of each payload and reducing the overall number of tests.

In principle, we might use the polyglot from [11], which escapes 26 contexts. However, its length (144 characters) is not suitable because many scanning systems shorten long strings in their reports, preventing the exploit from taking place. To address this, we opted for shorter polyglots such as `"’/>"`. This polyglot is rendered by the browser when appearing inside both an HTML tag and an HTML attribute, allowing it to escape quoted attributes.

Furthermore, delivering the JavaScript payload in `onerror` has two advantages:
1. It circumvents basic input filtering methods, such as blacklisting the `script` string.
2. Our payload applies to both static and dynamic reports. Static reports consist of HTML pages created by the scanning system and loaded by the analyst's browser. Dynamic reports are loaded by the browser and updated by the scanning system during the scan process. The HTML5 standard specification [16, § 8.4.3] states that browsers can skip the execution of dynamically loaded scripts. Therefore, our payload binds the script execution to an error event triggered using a broken image link (i.e., `src='x'`). A concrete example of this scenario is discussed in Section 6.2.

### Implementation and Results

In this section, we present our prototype, RevOK, and the results of our experimental assessment.

#### Selection Criteria

We applied our prototype implementation to 78 scanning systems. The full list of scanning systems, along with our experimental results (see Section 5.3), is provided in Table 1. We use symbols to distinguish between as-a-service and on-premise scanning systems.

For our experiments, we considered scanning systems from various categories, including security scanners, server fingerprinting tools, SEO tools, redirect checkers, and more. We excluded scanning systems that were abandonware, paywalled, or only performed periodic scans.

#### Experimental Results

We applied RevOK to the scanning systems listed in Table 1. For each system, we executed 10 scan rounds and listed all detected tainted and vulnerable flows. We discovered that 67 scanning systems have tainted flows, and among them, 36 are vulnerable to XSS.

Table 1 reports the number of tainted and vulnerable flows (T and V, respectively) detected by RevOK for each scanning system. After running RevOK, we conducted a manual vulnerability assessment, which involved reviewing each tainted flow and generating manual payloads.

Under column M, a checkmark (✓) indicates that an XSS vulnerability was found by a human analyst starting from the outcome of RevOK. Notably, in one case (DupliChecker), RevOK resulted in a false negative. Upon investigation, we found that DupliChecker performs URL encoding on tainted locations, replacing white spaces with `%20` and invalidating our payloads. To bypass this, we replaced white spaces (U+0020) with non-breaking spaces (U+00A0) and defined a new polyglot payload. Using this new payload, RevOK could also detect the vulnerability in DupliChecker.

At the time of writing, all vulnerabilities detected by RevOK have been reported to the tool vendors and are undergoing a responsible disclosure process (see Appendix A).

### Frequency of Tainted and Vulnerable Flows

In Figure 6, we show the frequency of tainted and vulnerable flows over the 14 fields considered by RevOK. The Location field has the highest number of tainted flows (59) and 21 vulnerable flows. The Server field has 51 tainted flows and the highest number of vulnerable flows (26). On the other hand, the Body field has only 14 tainted flows and 1 vulnerable flow, highlighting that most scanning systems sanitize the Body field in their reports.

### Correlation Matrices

In Figures 7 and 8, we present the correlation matrices for tainted and vulnerable fields, respectively. From these matrices, we observe several key points:

- The Body field is almost unrelated to the other fields, both in terms of tainted and vulnerable flows. This is expected since the Body field is often neglected and sanitized to preserve the report layout.

### Experimental Results Table

| Name | T | V | M |
|------|---|---|---|
| AddMe | 11 | 11 | ✓ |
| AdResults | 14 | - | - |
| Arachni | 14 | - | - |
| AUKSEO | - | - | - |
| BeautifyTools | 13 | - | - |
| BrowserSPY | 9 | - | - |
| CheckHost | 1 | - | - |
| CheckMyHeaders.com | 1 | - | - |
| CheckSERP | 11 | - | - |
| CheckShortURL | 1 | - | - |
| Cloxy Tools | 11 | - | - |
| CookieLaw | 1 | - | - |
| CookieMetrix | 1 | - | - |
| DNS Checker | 2 | - | - |
| DNSTools | 1 | - | - |
| Dupli Checker | - | - | - |
| evilacid.com | 1 | - | - |
| expandUrl | 12 | - | - |
| FreeDirectoryWebsites | 1 | - | - |
| GDPR Cookie Scan | 12 | - | - |
| GeekFlare | 13 | - | - |
| Hacker Target | 12 | - | - |
| HTTP Tools | 14 | - | - |
| httpstatus.io | 3 | - | - |
| InsightVM | 1 | - | - |
| InternetMarketingNinjas | 1 | - | - |
| InternetOfficer | 1 | - | - |
| [Anonymous]† | - | - | - |
| iplocation.net | - | - | - |
| IPv6 Scanner | - | - | - |
| itEXPERsT | - | - | - |
| IVRE | - | - | - |
| JoydeepDeb | - | - | - |
| JSON Formatter | - | - | - |
| LucasZ ZeleznY | 1 | ✓ | - |
| Metasploit Pro | - | - | - |
| Monitor Backlinks | - | - | - |
| Nessus | 1 | ✓ | - |
| Nikto Online | - | - | - |

For more details, refer to the full list of scanning systems and experimental results in Table 1.