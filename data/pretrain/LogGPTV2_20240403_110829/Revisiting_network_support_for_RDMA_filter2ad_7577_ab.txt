### IRN Receiver and Loss Recovery Mechanism

Upon the arrival of an out-of-order packet, an IRN receiver sends a NACK. This NACK includes both the cumulative acknowledgment (indicating the expected sequence number) and the sequence number of the packet that triggered the NACK, serving as a simplified form of selective acknowledgment (SACK). An IRN sender enters loss recovery mode when it receives a NACK or when a timeout occurs. The sender maintains a bitmap to track packets that have been cumulatively and selectively acknowledged.

In loss recovery mode, the sender selectively retransmits lost packets as indicated by the bitmap, rather than sending new packets. The first retransmitted packet corresponds to the cumulative acknowledgment value. Subsequent packets are considered lost only if a higher-sequence-number packet has been selectively acknowledged. When there are no more lost packets to retransmit, the sender resumes transmitting new packets, provided the BDP-FC allows it. The sender exits loss recovery mode when it receives a cumulative acknowledgment greater than the recovery sequence, which is the last regular packet sent before retransmission.

SACKs enable efficient loss recovery when multiple packets are in flight. For single-packet messages, loss recovery is triggered via timeouts. A high timeout value can increase tail latency, while a low timeout value can lead to spurious retransmissions. Therefore, an IRN sender uses a low timeout value (RTOlow) when a small number of packets (N) are in flight, and a higher value (RTOhigh) otherwise. The values of these parameters are discussed in §4, along with how the timeout feature in current RoCE NICs can be extended to support this in §6.

### IRN’s BDP-FC Mechanism

The second key change in IRN is the introduction of BDP-FC, a basic end-to-end packet-level flow control mechanism. BDP-FC limits the number of outstanding packets in flight for a flow based on the bandwidth-delay product (BDP) of the network, as suggested in [17]. This static cap is computed by dividing the BDP of the longest path (in bytes) by the packet MTU set by the RDMA queue-pair (typically 1KB in RoCE NICs). An IRN sender transmits a new packet only if the number of packets in flight (computed as the difference between the current packet's sequence number and the last acknowledged sequence number) is less than this BDP cap.

BDP-FC improves performance by reducing unnecessary queuing in the network and significantly reduces the state required for tracking packet losses in the NICs. IRN’s loss recovery is inspired by TCP’s loss recovery but decouples it from congestion control, avoiding TCP congestion window control mechanisms like slow start, AIMD, or advanced fast recovery. IRN operates directly on RDMA segments, simplifying selective acknowledgment and loss tracking schemes. The impact of these changes on performance is discussed in §4.

### Evaluating IRN’s Transport Logic

The central question of this paper is whether RDMA requires a lossless network. If the answer is yes, PFC must be addressed; if no, network management can be simplified by eliminating PFC. We evaluate IRN’s transport logic through extensive simulations, showing that IRN performs better than RoCE without requiring PFC. We test this across various scenarios and performance metrics, including a comparison with Resilient RoCE [34] and iWARP [33].

#### Experimental Settings

Our simulator, obtained from a commercial NIC vendor, extends INET/OMNET++ [1, 2] to model the Mellanox ConnectX4 RoCE NIC [10]. RDMA queue-pairs (QPs) are modeled as UDP applications with either RoCE or IRN transport layer logic, generating flows as described later. A flow is defined as a unit of data transfer comprising one or more messages between the same source-destination pair. The simulator implements DCQCN as in the Mellanox ConnectX-4 ROCE NIC [34], and we add support for a NIC-based Timely implementation. Switches in the simulation are input-queued with virtual output ports, scheduled using round-robin, and can generate PFC frames based on buffer thresholds.

**Default Case Scenario:**
- **Topology:** 54-server three-tiered fat-tree topology with 45 6-port switches organized into 6 pods.
- **Links:** 40Gbps links with a 2µs propagation delay, resulting in a BDP of 120KB along the longest (6-hop) path, corresponding to ~110 MTU-sized packets.
- **Flow Generation:** Each end host generates new flows with Poisson inter-arrival times. Flow destinations are picked randomly, and sizes are drawn from a heavy-tailed distribution.
- **Network Load:** Set at 70% utilization for the default case, with ECMP for load-balancing.

**Parameters:**
- **RTOhigh:** Estimated maximum round trip time with one congested link, approximately 320µs.
- **RTOlow:** Set to 100µs for short messages, with N = 3.
- **RoCE without PFC:** Fixed timeout value of RTOhigh.
- **PFC:** Disabled when enabled to prevent spurious retransmissions. Buffers sized at twice the BDP (240KB), with PFC threshold set to buffer size minus the upstream link’s BDP (220KB).

**Metrics:**
- **Average Slowdown:** Completion time divided by the time it would take to traverse the path at line rate in an empty network.
- **Average FCT (Flow Completion Time):** Dominated by throughput-sensitive flows.
- **99%ile FCT (Tail FCT):** Dominated by latency-sensitive short flows.

### Basic Results

**IRN vs. RoCE:**
- **Performance Comparison:** IRN performs up to 2.8-3.7× better than RoCE across the three metrics (Figure 1).
- **No Need for PFC:** Enabling PFC with IRN degrades performance (Figure 2), indicating that IRN’s loss recovery is sufficient without PFC.
- **RoCE Requires PFC:** Disabling PFC with RoCE degrades performance by 1.5-3× (Figure 3).

**Explicit Congestion Control:**
- **Impact with Timely and DCQCN:** IRN continues to perform better by up to 1.5-2.2× (Figure 4).
- **PFC Impact with Explicit Congestion Control:** IRN’s performance is largely unaffected by PFC, with minimal improvements or degradations (Figure 5).
- **RoCE with Explicit Congestion Control:** Enabling PFC improves RoCE’s performance by 1.35× to 3.5× (Figure 6).

**Key Takeaways:**
1. IRN (without PFC) performs better than RoCE (with PFC).
2. IRN does not require PFC.
3. RoCE requires PFC.

### Factor Analysis of IRN

To study the significance of IRN’s key changes, we compare its performance with two variations:
1. **Go-Back-N Loss Recovery:** Results in worse performance due to redundant retransmissions (Figure 7).
2. **Disabling BDP-FC:** Also results in worse performance, highlighting the importance of BDP-FC in reducing unnecessary queuing and improving overall performance.

These results underscore the need for efficient loss recovery and the benefits of BDP-FC in IRN.