Alternatively, one can check the entire certiﬁcate-transparency
log for revocation records, but this is again linear in the number
of issued certiﬁcates. In §3.2, we show that proofs requiring
linear space and time require data sizes measured in tens or
hundreds of gigabytes, which makes them impractical.
As mentioned, the sparse Merkle tree is one of the proposed
data structures for revocation transparency. The other one is a
sorted list organised as a search tree. It is also used in con-
junction with the certiﬁcate-transparency log. But, similarly to
the sparse Merkle tree, the ideas only address how revocations
should be stored. Checking revocations remains linear in the
number of issued certiﬁcates.
2.3 Other approaches to handling certiﬁcates securely
There are many other proposals for ensuring the authentic-
ity of public key certiﬁcates. Early ones are based on croud-
sourcing, where a user’s assurance that a certiﬁcate is genuine
is increased if other users have received the same certiﬁcate.
3
h21
h19
h20
h16
h17
h18
h25
h11
h12
h13
h14
h15
h22
h26
h29
h1
h2
h3
h4
h5
h6
h7
h8
h9
h10
h23
h24
h27
h28
h30
h31
c1 c2
c3 c4
c5 c6
c7 c8
c9 c10
c11 c12
c13 c14
c15 c16
c17 c18
c19 c20
c21 c22
c23 c24
c25 c26
c27 c28
c29 c30
c31 c32
Fig. 2.
c12, h5, h14, h16, h20. To demonstrate that this tree is an extension of the one in the previous ﬁgure, it is sufﬁcient to provide the data h4, h17, h20.
A Merkle tree containing items c1, . . . , c32. To demonstrate that c11 is present
to provide the additional data
in the tree,
it
is sufﬁcient
Proposals in this vein include the SSL Observatory [31];
Certiﬁcate Patrol [32]; Perspectives [33]; DoubleCheck [34];
CertLock [35]; Covergence [36]; and TACK (2012) [37]. There
are also approaches based on using DNS, such as DANE [38];
and CAge (2013) [39].
Sovereign Keys [40] is, like certiﬁcate transparency, based
on the idea of a public log. Another recent proposal that
mixes several ideas and also relies heavily on public logs is
Accountable Key Infrastructure (AKI) [41].
2.4 End-to-end email encryption
As well as being useful to authenticate public keys for
organisations and web sites, public-key certiﬁcates can be
used for individuals, allowing end-to-end encrypted email. If
Alice wishes to send an encrypted email to Bob, she needs
to obtain an authentic copy of Bob’s public key. There are
two main standards in use for public key encryption of email,
called S/MIME2 and PGP3. They both require the user’s client
software to maintain the user’s private key, and the public keys
of the people she exchanges email with. The main conceptual
difference between S/MIME and PGP is the way in which a
user veriﬁes that he has an authentic copy of another user’s
public key. In S/MIME, public keys come with a certiﬁcate
from a CA. If Bob is an employee of a large corporation such
as Boeing, his company may act as a certiﬁcate authority for
his email public key. But if Bob’s email address is from a
smaller organisation or is not a company address, there is no
natural certiﬁcate authority. If there is one, then as previously
mentioned, users have to assume it is honest, which may not
be a reasonable assumption. For these reasons, S/MIME really
works only in a large corporate environment, where the email
is the property of the company, and the corporation can act as
a CA for all its employees. It is natural for both employees
2S/MIME stands for Secure MIME, and was designed in 1995 as an
extension of the MIME format. MIME stands for Multipurpose Internet Mail
Extensions and is the standard for email attachments. S/MIME version 3
(1999) is standardised by IETF.
3The ﬁrst version of PGP was designed in 1991. The name, Pretty Good
Privacy, is intended to be humorously ironic. OpenPGP, created in 1997, is
an open speciﬁcation being standardised by IETF.
and external users that correspond with employees to trust the
corporation for email related to its business. S/MIME works
less well for small organisations, because they may not wish
to take on the complexities of being a CA.
PGP is targeted at individual email users rather than corpo-
rate users, and aims to avoid the requirement of “authorities”
that certify public keys. This recognises that, in the case of
individuals, there are no entities that can fulﬁl the requirements
of being a CA (namely: well-known, trusted by all users,
and free to use). To solve this, PGP spreads the certifying
role across a set of users, each of whom are somewhat
trusted and somewhat known to the sender and receiver, with
the expectation that, taken together, this comprises enough
evidence for the authenticity of the public key. By signing
each other’s keys in a peer-to-peer fashion, PGP users create a
“web of trust” that works not because of some highly trusted
pillars like CAs, but because all the users support the trust web
in a small way.
2.4.1 Inhibitors to take-up of email encryption: In spite
of support on all major client software and signiﬁcant efforts
at supporting take-up, very few people use encrypted mail.
Yet, there are substantial motivations, including compliance
requirements as well as conﬁdentiality requirements. End-to-
end encrypted mail seems to have a dedicated following among
a small number of people in very speciﬁc sectors.
“Why Johnny can’t encrypt” is a 1999 classic paper [24]
explaining why PGP encryption for email has failed to take
off. Other papers have developed the explanation further. The
reasons encrypted email is not routinely used are:
•
•
It is too complicated for users to understand the model.
S/MIME is presented to users in a gobbledygook way,
asking them to understand public and private keys, key
servers, certiﬁcates, certiﬁcate authorities, etc. Most
users don’t want to have to spend time learning this
sort of stuff. The pain outweighs the gain.
S/MIME assumes a hierarchical certiﬁcate-authority
system for certifying keys which is expensive and
cumbersome even for companies, and it appears to be
4
prohibitive for SMEs and individuals. PGP is aimed
more at individuals, having a peer-to-peer certifying
arrangement, but this also has proved impossible for
any but the most determined users to master.
•
Even when set up on one platform (e.g., work desk-
top), the set-up has to be done again on other platforms
(laptop, phone) and is different each time. Again, users
have to copy keys around between devices, and the set-
up is different in different contexts (desktop, mobile,
webmail, etc.).
2.4.2 Identity-based encryption: Identity-based encryption
(IBE) [42], [43] aims to solve the problem of having to certify
public keys for individuals, by instead offering the possibility
of using a string representing their identity (e.g., their email
address string) as the public key. An identity provider publishes
a single public key (certiﬁed in the usual way), and then, for
each registered email address, it computes a private key for the
holder of the email address, and securely transmits it to him.
The encryption primitive takes as input the provider’s public
key, the email address of the addressee, and the message, and
returns a ciphertext. The ciphertext can now be decrypted using
the private key given by the provider to the email address
holder.
IBE is an attractive solution, because people are used to the
idea that a person is represented by a human-readable string
like an email address, rather than a public key. Unfortunately,
in IBE the identity provider computes the private keys for all
users, which means that the identity provider can decrypt any
ciphertext: this is called the key-escrow problem. Key escrow
can be considered reasonable in a corporate setting, where mail
is owned by the organisation, but not in other settings. Another
difﬁculty with IBE is key revocation, since the public key is
the email address.
Certiﬁcateless encryption [44] solves the key-escrow prob-
lem of IBE by allowing users to create by themselves a
public/private pair, which act in conjunction with, respectively,
the public email address and private key created by the
provider. In this setting, the encryption primitive takes as input
the provider’s public key, the addressee’s additional public
item, the email address of the addressee, and the message,
and returns a ciphertext. The ciphertext can now be decrypted
using the additional private item, and the private key given
by the provider to the email address holder. The identity
provider can’t decrypt because it doesn’t have the private item.
The public item does not need to be certiﬁed, justifying the
name “certiﬁcateless”, because a third party that fakes the
public item is not in possession of the private key from the
identity provider and therefore cannot decrypt. A remaining
weakness is that the identity provider can fake the public
item, allowing it to mount “active” attacks, but this is still
an improvement over IBE where the identity provider can
passively decrypt. Certiﬁcateless encryption does not solve the
revocation problem.
5
3 Certiﬁcate issuance and revocation trans-
parency (CIRT)
We detail our extension of certiﬁcate transparency, in par-
ticular showing how a certiﬁcate authority can create efﬁcient
proofs that a given key is current (issued and not revoked).
3.1 Proving correct management of certiﬁcates
We propose a method which allows users of public keys to
rely on certiﬁcate authorities without having to trust them. To
put this another way, the method allows CAs to prove to users
that they have behaved correctly. This solves the core problem
related to certiﬁcate authorities. It also allows companies to
provide end-to-end encrypted email in a form that appears to
be as user-friendly as ordinary email is today.
The method uses many ideas from certiﬁcate transparency
(§2.2). In particular, a public append-only log is maintained
of the certiﬁcates issued by a given certiﬁcate authority. In
our method, the maintainer of the log can offer a proof that
a certain certiﬁcate is current in the log, i.e., it has not been
replaced or revoked. This is in contrast with certiﬁcate trans-
parency, where proofs are that a certain certiﬁcate is present in
the log, but not necessarily current. There are attempts to make
certiﬁcate revocation work with certiﬁcate transparency, but as
mentioned in §2.2.1 they require space/time which is linear
(rather than logarithmic) in the number of certiﬁcates issued,
and therefore the methods do not scale up. We describe and
quantify this scalability aspect in §3.2.
A certiﬁcate prover (CP) is an entity that maintains a public
log of certiﬁcates issued by a certiﬁcate authority. CP is able to
issue proofs of extension of the log (that is, that the log is only
ever appended), and proofs of currency of a given certiﬁcate.
Suppose that CP’s log consists of a collection of certiﬁcates:
db = [cert(Alice, pk Alice), cert(Bob, pk Bob), . . .] .
To demonstrate its correct behaviour, CP must offer the
services listed in Figure 3. It is important that these operations
are done efﬁciently. More precisely, the data structure used for
db must allow these operations to be done so that the time and
transferred data is proportional to O(log n) or better, where n
is the number of certiﬁcates stored.
The database of certiﬁcates is maintained as a pair of
Merkle trees. In the ﬁrst tree, items are stored left-to-right
in chronological order, as in certiﬁcate transparency. We call
this tree ChronTree. Certiﬁcates are added chronologically, by
extending the tree to the right (see Figures 1 and 2). Revocation
of a certiﬁcate is done by adding a new (perhaps null) key for
the subject. Thus, a key for a subject is considered current
only if there is no later item for the subject. Using this tree,
insertion, revocation and the extension proof are O(log n),
by exploiting the properties of Merkle trees. However, as in
certiﬁcate transparency, the currency proof is O(n) because
one has to show that a given key has not been revoked; this
involves enumerating all the transactions that took place after
the key was inserted. Similarly, an absence proof involves
enumerating the whole tree.
input
–
(subj , pk subj )
result
h(db): the hash of the current database
Insertion: the certiﬁcate
cert(subj , pk subj ) is inserted into the
database.
(subj , pk subj ) Revocation: the certiﬁcate
h(db), h(db0)
h(db), subj
h(db), subj
cert(subj , pk subj ) is marked as revoked
in the database.
Extension proof: a proof that db0 is an
append-only extension of db. We write
this as h(db) v h(db0)
Currency proof: a proof that
cert(subj , pk subj ) is current according to
db
Absence proof: a proof that there are no
certiﬁcates for subj in db
Fig. 3. Services offered by a certiﬁcate prover.
h(d8,h(d4,h(d2,h(d1),h(d3)),h(d6,h(d5),h(d7))),h(d10,h(d9),h(d11))
d8
h(d4,h(d2,h(d1),h(d3)),h(d6,h(d5),h(d7)))
d4
d10
h(d10,h(d9),h(d11)
d2