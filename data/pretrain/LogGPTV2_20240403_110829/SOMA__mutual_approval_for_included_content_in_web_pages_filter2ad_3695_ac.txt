just single site code injection attacks, not cross-site attacks.
While SOMA provides no protection against local covert com-
munications channels, it does protect against most timing attacks
based upon cached content [11], simply because with SOMA the
attacker’s website will in general not be approved by the victim’s
for content inclusion.
4.1.3 Cross-site request forgery
Cross-site request forgery attacks occur when a malicious web
site causes a URL to be loaded from another, victim web site.
SOMA dictates that URLs can only be loaded if a site has been
mutually approved, which means that a site is only vulnerable to
cross-site request forgery from sites on its approval list. Speciﬁ-
cally, the approval ﬁles limit the possible attack vectors for a cross-
site request forgery attack, while the manifest ﬁle ensures that an
origin site cannot be used in an attack on another arbitrary site.
SOMA thus allows a new approach to protect web applications
from cross-site request forgery. Any page which performs an ac-
tion when loaded could be placed on a subdomain (by the server
operator) which grants approval only to trusted domains, such as
those they control. This change would limit attacks to cases where
the user has been fooled into clicking on a link. It is unlikely that
sites will need to grant external access to action-causing scripts:
even voting sites, which generally want to make it easy for people
to vote from an external domain with just a click, usually use an
intermediate page to prevent vote fraud.
SOMA also leaks less information to sites than the current
Referer HTML header (which is also sometimes used to pre-
vent cross-site request forgery [24]). Because the Referer header
contains the complete URL (and not just the domain), sensitive in-
formation can currently be leaked [20]. Many have already realized
the privacy concerns related to the Referer URL and have im-
plemented measures to block or change this header [41, 34]. These
proposals also prevent current cross-site request forgery detection
attempts; however, they do not conﬂict with SOMA.
4.1.4 Cross-site scripting
SOMA blocks the “cross” part of cross-site scripting, since in-
formation can no longer be loaded from or sent to external, unap-
proved domains. This change forces attackers to either compromise
the targeted origin host or one of its mutually approved partners, or
to inject their entire attack code into the web page. 4
Even if attack code manages to load, its communication chan-
nels are limited. Many attacks require that information such as
credit card numbers be sent to the attacker for later use; this will
no longer be possible with SOMA. Other attacks require the user
to load dangerous content hosted externally, and these would also
fail.
Thus, while some forms of cross-site scripting attacks remain
viable, they are limited to attacks on the existing page that do not
require communication through the browser to other non-approved
domains. For example, it is not possible to steal cookies if there is
no way to send the cookie information out to the attacker. It is pos-
sible that the site itself could provide the way (for example, cookies
could be emailed out of a compromised webmail client or posted
on a blog). Or, the attacker could instead choose to deface the page,
since this attack requires the script only to modify the page. How-
4Note that since the code needed to mount many attacks is of signif-
icant size (e.g., setting appropriate style attributes as camouﬂage),
when combined with SOMA, simple length restrictions already in
place on some user content may be sufﬁcient to prevent many at-
tacks.
4.1.5 Bandwidth stealing
SOMA allows content providers more control over who uses
their content. Thus SOMA offers a new way to prevent “bandwidth
theft” where someone is including images or other content from
a (non-consenting) content provider into their page using a direct
link to the original ﬁle. Many techniques require the web server to
verify the HTTP Referer header, which can be problematic (as
discussed in Section 4.1.3). SOMA provides a technique to do the
veriﬁcation in the browser, not relying on HTTP Referer.
Also known as hotlinking or inline linking, bandwidth theft is
used maliciously by phishing sites, but may also be used uninten-
tionally by people who do not know better [4]. Regardless of the
intent, this can still be damaging. While the content provider is
paying hosting costs associated with serving up that ﬁle, it may be
pulled in by, for example, a very popular blog or aggregate site that
would generate a huge number of additional views. At the extreme,
this could result in the content provider exceeding their bandwidth
cap and being charged extra hosting fees or having their site shut
down. SOMA helps prevent this sort of denial of service attack.
Browsers (with SOMA enabled) would enforce access rules set by
the site.
4.2 Incremental Deployment
SOMA is designed to gracefully handle sites which are unaware
of SOMA or have not yet been conﬁgured. More speciﬁcally, if
the soma-manifest and/or soma-approval ﬁles do not exist
(or do not contain SOMA speciﬁc identifying strings), the browser
defaults to current permissive behaviour, that is, it assumes that
inclusions are allowed. Thus, a SOMA-enabled browser can run
on current web pages without any difference in behaviour.
If only the origin site has a soma-manifest, then SOMA still
provides partial security coverage, enforcing the policy that is de-
ﬁned in the soma-manifest. If the origin site does not have a
manifest ﬁle, but the content provider gives approval information
through soma-approval then the policy deﬁned by the content
provider is enforced by the SOMA-enabled browser.
In order to verify that ﬁles returned in response to requests for
soma-manifest and soma-approval are related to SOMA,
we stipulate that the ﬁrst line of the soma-manifest ﬁle must
contain SOMA Manifest and the soma-approval ﬁle must
contain only the word YES or NO. This is necessary since many
websites return a generic page even when the request has not been
found, and this must not be confused with intentional responses to
SOMA requests.
The full beneﬁts of SOMA are available when origins and con-
tent providers both provide SOMA-related ﬁles, but the design is
such that it is possible for either side to start providing ﬁles with-
out needing extensive coordination to ensure that both are provided
at the same time. In other words, incremental deployment is pos-
sible. In addition, even if one site refuses to provide policy ﬁles
for whatever reason, others can still obtain lesser security beneﬁts.
Moreover, the support of SOMA at servers need not be synchro-
nized with deployment of SOMA at browsers.
A more security-oriented default policy would be possible, with
SOMA assuming a NO response if the manifest or approval ﬁles are
not found by the browser. This could potentially provide additional
security even on sites which do not provide policy, as well as en-
couraging sites which do not have policies to set them. However, it
would break almost all existing web pages, almost surely prevent-
ing the adoption of SOMA. The permissive default was chosen to
reﬂect current browser behaviour and to make it easier for SOMA
to be deployed.
4.3 Deployment Costs
The browser, the origin sites, and content inclusion provider sites
all bear the costs in deploying SOMA. Note that unlike some so-
lutions which rely heavily upon user knowledge (e.g., the NoScript
add-on for Mozilla Firefox [22]), SOMA requires no additional ef-
fort on the part of the user browsing the web site. Instead, policies
are set by server operators, who are expected have more informa-
tion about what constitutes good policy for their sites.
4.3.1 Deployment in the browser
The SOMA policy is enforced by the web browser, so changes
are required in the browser. We have created a prototype add-on for
Mozilla Firefox 2 and 3 as discussed in greater detail in Section 5.
4.3.2 Deployment on origin sites
Each origin site which wishes to beneﬁt from the protections of
SOMA needs to provide a soma-manifest ﬁle. This is a text ﬁle
containing a list of content-providing sites from which the origin
wishes to include content. As mentioned earlier, content providers
are speciﬁed by domain name, protocol and (optionally) port.
This list can be determined by looking at pages on the site and
compiling a list of content providers. This could be automated us-
ing a web crawler, or done by an admin who is willing to set pol-
icy. (It is possible that sites will wish to set more restrictive policy
than the site’s current behaviour.) We examined the main page on
popular sites to determine the approximate complexity of manifests
required. These results are detailed in Section 5.5.2.
4.3.3 Deployment on content provider sites
Content providers wishing to take advantage of SOMA need to
provide either a ﬁle or script which can handle requests to
soma-approval. The time needed to create this policy script
depends heavily upon the needs of the site in question, and may
range from a simple yes-to-all or no-to-all to more complex poli-
cies based upon client relationships. Fortunately, simple policies
are likely to be desired by smaller sites (which are unlikely to have
the resources to create complex policies), and complex policies are
likely to be required only by sites who have more expertise.
Many sites will not wish to be external content providers and
their needs will be easily served by a soma-approval ﬁle that
just contains NO. Such a conﬁguration will be common on smaller
sites such as personal blogs.
It will also be common on high-
security sites such as banks, who want to be especially careful to
avoid XSRF and having their images used by phishing sites. Phish-
ing sites will have to copy over images as opposed to linking to the
original image.
Other sites may wish to be content providers to everyone. Sites
such as Flickr and YouTube that wish to allow all users to include
content will probably want to have a simple YES policy. This is
achieved by creating a soma-approval ﬁle that contains the
word YES, or not hosting a soma-approval ﬁle (as the default
is YES).
The sites requiring the most conﬁguration are those who want to
allow some content inclusions rather than all or none. For example,
advertisers might want to provide code to sites displaying their ads.
The domains that need to be approved can be determined using the
list of domains already associated with each clients proﬁle. This
database could then be queried to generate the approval list. Or a
company with several web applications might want to keep them on
separate domains but still allow interaction between them. Again,
the necessary inclusions will be known in advance and necessary
policy could be created by a system administrator or web developer.
For an evaluation of the performance impact of SOMA, see Sec-
tion 5.5.3.
4.4 Limitations Summary
SOMA is designed to improve the same origin policy by impos-
ing further constraints upon external inclusions and thus external
communications. It does not prevent attacks that do not require ex-
ternal communications such as code and content injection. SOMA
can restrict outside communication frequently seen in current at-
tack code [27].
SOMA does not stop attacks to or from mutually approved part-
ners. In order to avoid these attacks, it would be necessary to im-
pose ﬁner-grained control or additional separation between com-
ponents. This sort of protection can be provided by the mashup
solutions described in Section 6, albeit at the cost of extensive and
often complex web site modiﬁcations.
SOMA cannot stop attacks on the origin where the entire at-
tack code is injected, if no outside communication is needed for
the attack. This could be web page defacement, same-site request
forgery, or sandbox-breaking attacks intended for the user’s ma-
chine. Some complex attacks might be stopped by size restrictions
on uploaded content. More subtle attacks might need to be caught
by heuristics used to detect cross-site scripting. Some of these so-
lutions are described in Section 6.
SOMA cannot stop attacks from malicious servers not includ-
ing content from remote domains. These would include phishing
attacks where the legitimate server is not involved.
5. PROTOTYPE
5.1 Description
In order to test SOMA, we created an add-on for Mozilla Firefox
2.0, licensed under the GNU GPL version 2 or later.5
It can be
installed in an unmodiﬁed installation of Mozilla Firefox the same
way as any other add-on: the user clicks an installation link and is
prompted to conﬁrm the install. If they click the install button, the
add-on is installed and begins to function after a browser restart.
The SOMA add-on provides a component that does the neces-
sary veriﬁcation of the soma-manifest and soma-approval
ﬁles before content is loaded.
Since it was not possible to insert test policy ﬁles onto sites over
which we had no control, we used a proxy server to simulate the
presence of manifest and approval ﬁles on popular sites.
5.2 Performance
The primary overhead in running SOMA is due to the additional
latency introduced by having to request a soma-manifest or
soma-approval from each domain referenced on a web page.
While these responses can be cached (like other web requests), the
initial load time for a page is increased by the time required to com-
plete these requests. Because the manifest can be loaded in parallel
with the origin page, we do not believe manifest load times will af-
fect total page load times. Because soma-approval ﬁles must
be retrieved before contacting other servers, however, overhead in
requesting them will increase page load times.
Because sites do not currently implement SOMA, we estimate
SOMA’s overhead using observed web request times. First, we de-
termined the average HTTP request round-trip time for each of 40
5See http://ccsl.carleton.ca/software/soma
representative web sites6 on a per-domain basis using PageStats [9].
We used this per-domain average as a proxy for the time to retrieve
a soma-approval from a given domain. Then, to calculate page
load times using SOMA, we increase the time to request all content
from each accessed domain by the soma-approval request es-
timate for that domain. The time of the last response from any
domain then serves as our ﬁnal page load time.
After running our test 30 times on 40 different web pages, we
found that the average additional network latency overhead due
to SOMA increased page load time from 2.9 to 3.3 seconds (or
13.28%) on non-cached page loads. On cached page loads, our
overhead is negligible (since soma-approval is cached). We
note that this increase in latency is due to network latency and not
CPU usage. If we assume that 58% of page loads are revisits [37],
the average network latency overhead of SOMA drops to 5.58%.
Because soma-approval responses are extremely small (see
Section 5.5.3), they should be faster to retrieve than the average
round-trip time estimate used in our experiments. Thus, these val-
ues should be seen as a worst-case scenario; in practice, we expect
SOMA’s overhead to be signiﬁcantly less.
5.3 Compatibility with Existing Web pages
To test compatibility with existing web pages, the global top
45 sites as ranked by Alexa [2] were visited in the browser with
and without the SOMA add-on. No SOMA compatibility issues
were detected. In addition, one author ran the SOMA add-on for
2 weeks while doing regular browsing, and no SOMA incompati-
bilities were observed. These results were expected, as SOMA was
designed for compatibility and incremental deployment.
5.4 Attacks
In order to verify that SOMA actively blocks information leak-
age, cross-site request forgery, cross-site scripting, and content steal-
ing, we created examples of these attacks. We speciﬁcally tested
the following attacks with the SOMA add-on:
1. A GET request for an image on another web site (testing both
GET based XSRF as well as content stealing).
2. A POST request to a page on another web site done through
JavaScript (testing POST based XSRF).
3. An iframe inclusion from another web site (testing iframe
injection based XSS).
4. Sending either a cookie or personal information to another
web site (testing information leakage).
5. A script inclusion from another web site (testing XSS injec-
tion).
All attacks were hosted at domain A and used domain B as the
other domain involved. All attacks were successful without SOMA.
With SOMA we found that these attacks were all prevented by ei-
ther a manifest at domain A not listing B or a soma-approval
at domain B which returned NO for domain A.
5.5 Deployment Costs
5.5.1 Browser: SOMA Add-on
The SOMA add-on, when prepared into the standard XPI pack-
age format used by Mozilla Firefox, is 16kB. Uncompressed, the
entire add-on is 18kB. The component which does the actual SOMA
mutual approval process is 12kB; the rest is installation ﬁles and
chrome so that the browser provides a visual indication that the
add-on is loaded.
6Our representative sample included banks, news sites, web e-mail,
e-commerce, social networking, and less popular sites.
5.5.2 Origin sites: Manifest ﬁles
To determine approximate sizes for manifests, we used the PageS-
tats add-on [9] to load the home page for the global top 500 sites as
reported by Alexa [2] and examined the resulting log, which con-
tains information about each request that was made. On average,
each site requested content from 5.45 domains other than the one
being loaded, with a standard deviation of 5.3. The maximum num-
ber of content providers was 32 and the minimum was 0 (for sites