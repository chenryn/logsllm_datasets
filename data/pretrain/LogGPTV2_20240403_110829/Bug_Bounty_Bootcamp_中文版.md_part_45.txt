最后，IDOR 可以影响除数据库对象之外的其他资源。另一种类型的 IDOR
发生在应用程序直接引用系统文件时。例如，此请求允许用户访问他们上传的文件：https://example.com/uploads?file=user1234-01.jpeg。
Since the value of the `      file     ` parameter is
`      user1234–01.jpeg     ` , we can easily deduce that user-uploaded
files follow the naming convention of
`      USER_ID-FILE_NUMBER     `{.variable} `      .     `
`      FILE_EXTENSION     `{.variable} . Therefore, another user's
uploaded files might be named `      user1233–01.jpeg     ` . If the
application doesn't restrict users' [ ]{#c10.xhtml#Page_177 .pagebreak
title="177"} access to files that belong to others, an attacker could
access anyone's uploaded files by guessing the filenames, like this:
*https://example.com/uploads?file=user1233-01.jpeg.*
由于文件参数的值为user1234-01.jpeg，我们可以轻松推断出用户上传的文件遵循USER_ID-FILE_NUMBER.FILE_EXTENSION的命名约定。因此，另一个用户上传的文件可能被命名为user1233-01.jpeg。如果应用程序不限制用户访问属于其他人的文件，攻击者可以通过猜测文件名来访问任何人上传的文件，就像这样：https://example.com/uploads?file=user1233-01.jpeg。
A malicious user might even be able to read sensitive system files
through this endpoint! For instance, */etc/shadow* is a file on Unix
systems used to keep track of user passwords. Because it is sensitive,
it should not be exposed to regular users. If you can read the file this
way, through a URL like
*https://example.com/uploads?file=/PATH/TO/etc/shadow,* then you've
found a vulnerability! Attackers being able to read files outside the
web root folder is also known as a *path traversal attack* , or
directory traversal attack. We will talk more about directory traversal
attacks in Chapter 17.
恶意用户甚至可以通过该端点读取敏感系统文件！例如，在UNIX系统上，/etc/shadow是用于跟踪用户密码的文件。因为它很敏感，所以不应暴露给普通用户。如果您可以通过以下网址https://example.com/uploads？file=/PATH/TO/etc/shadow读取文件，则已找到漏洞！攻击者能够读取Web根目录之外的文件也称为路径遍历攻击或目录遍历攻击。我们将在第17章更多地讨论目录遍历攻击。
## Prevention {#c10.xhtml#h1-501546c10-0002}
IDORs happen when an application fails at two things. First, it fails to
implement access control based on user identity. Second, it fails to
randomize object IDs and instead keeps references to data objects, like
a file or a database entry, predictable.
IDOR(IDentify-based Object-level
Restriction)的发生是应用程序在两个方面出现问题时发生的。首先，它未能基于用户身份实现访问控制。其次，它没有随机化对象ID，而是保持对数据对象（如文件或数据库记录）的引用可预测。
In this chapter's first example, you were able to see messages belonging
to user *1233* because the server didn't check the logged-in user's
identity before sending private info. The server wasn't verifying that
you were, in fact, user *1233* . It simply returned the information you
asked for.
在本章的第一个例子中，您能够看到属于用户1233的消息，因为服务器在发送私人信息之前并没有检查已登录用户的身份。服务器没有验证您确实是用户1233。它只是返回了您请求的信息。
In this case, since user IDs are simply numbers, it's easy to infer that
you can also retrieve the messages for user *1232* and user *1231* ,
like so:
在这种情况下，由于用户ID只是数字，因此可以轻松推断您也可以检索用户1232和用户1231的消息，如下所示：
1.  *https://example.com/messages?user_id=1232*
2.  *https://example.com/messages?user_id=1231*
This is why the vulnerability is called an insecure *direct object*
*reference* . The user's ID is used to directly reference the user's
private messages on this site. If not secured by proper access control,
these predictable *direct object references* expose the data hidden
behind them, allowing anyone to grab the information associated with the
reference.
这就是为什么漏洞被称为不安全的直接对象引用。用户的ID被用来直接引用该站点上的用户私信。如果没有经过正确的访问控制保护，这些可预测的直接对象引用会暴露其后面的数据，允许任何人获取与引用相关联的信息。
Applications can prevent IDORs in two ways. First, the application can
check the user's identity and permissions before granting access to a
resource. For example, the application can check if the user's session
cookies correspond to the `      user_id     ` whose messages the user
is requesting.
应用程序可以通过两种方式防止IDOR。首先，应用程序可以在授予对资源的访问权限之前检查用户的身份和权限。例如，应用程序可以检查用户的会话cookie是否与用户请求的消息所对应的用户ID相对应。
Second, the website can use a unique, unpredictable key or a hashed
identifier to reference each user's resources. *Hashing* refers to the
one-way process that transforms a value into another string. Hashing IDs
with a secure algorithm and a secret key makes it difficult for
attackers to guess the hashed ID strings. If *example.com* structured
its requests as follows, attackers would no longer be able to access
other users' messages, since there would be no way for an attacker to
guess such a long, random `      user_key     ` value:
其次，该网站可以使用一个唯一、难以预测的密钥或散列标识符来引用每个用户的资源。哈希是指将一个值转换为另一个字符串的单向过程。使用安全算法和秘密密钥对散列
ID 进行处理，可以使攻击者难以猜测散列的 ID 字符串。如果 example.com
将其请求结构化如下，攻击者将不再能够访问其他用户的消息，因为攻击者无法猜测出这样一个长的、随机的
user_key 值：
    https://example.com/messages?user_key=6MT9EalV9F7r9pns0mK1eDAEW
[ ]{#c10.xhtml#Page_178 .pagebreak title="178"} But this method isn't a
complete protection against IDORs. Attackers can still leak user
information if they can find a way to steal these URLs or
`      user_keys     ` . The best way to protect against IDORs is
fine-grained access control, or a combination of access control and
randomization or hashing of IDs.
但是这种方法并不能完全保护用户免受IDOR攻击。如果攻击者找到了窃取这些URL或用户密钥的方法，他们仍然可以泄露用户信息。防止IDOR攻击的最佳方法是精细的访问控制，或者将访问控制与ID的随机化或哈希化相结合。
## Hunting for IDORs {#c10.xhtml#h1-501546c10-0003}
Let's hunt for some IDORs! The best way to discover IDORs is through a
source code review that checks if all direct object references are
protected by access control. We'll talk about how to conduct source code
reviews in [ Chapter 22 ]{.xref itemid="xref_target_Chapter 22"} . But
if you cannot access the application's source code, here's a simple and
effective way to test for IDORs.
让我们寻找一些IDORs！发现IDOR的最佳方法是通过源代码审查，检查是否所有直接对象引用都受到访问控制的保护。我们将在第22章中讨论如何进行源代码审查。但是，如果您无法访问应用程序的源代码，这里有一种简单而有效的测试IDOR的方法。
### Step 1: Create Two Accounts {#c10.xhtml#h2-501546c10-0001}
First, create two different accounts on the target website. If users can
have different permissions on the site, create two accounts for each
permission level. For example, create two admin accounts, two regular
user accounts, two group member accounts, and two non-group-member
accounts. This will help you test for access control issues among
similar user accounts, as well as across users with different
privileges.
首先，在目标网站创建两个不同的账户。如果用户可以在网站上获得不同的权限，请为每个权限级别创建两个帐户。例如，创建两个管理员帐户、两个普通用户帐户、两个组成员帐户和两个非组成员帐户。这将帮助您测试类似用户帐户之间以及具有不同特权的用户之间的访问控制问题。
Continuing the previous example, you could create two accounts on
*example.com* : user *1235* and user *1236* . One of the accounts would
serve as your attacker account, used to carry out the IDOR attacks. The
other would be the victim account used to observe the effects of the
attack. The message pages for the two users would have the following
URLS:
在之前的例子中，你可以在example.com上创建两个帐户：用户1235和用户1236。其中一个帐户将充当攻击者帐户，用于进行IDOR攻击。另一个帐户将被用作受害者帐户，以观察攻击的影响。这两个用户的消息页面将具有以下URLS：
1.  *https://example.com/messages?user_id=1235* (Attacker)
2.  *https://example.com/messages?user_id=1236* (Victim)
If the application doesn't allow you to create so many accounts, you
could reach out to the company and ask for more accounts. Companies will
often grant you extra accounts if you explain that you're participating
in their bug bounty program. Also, if the application has paid
memberships, ask the company for a premium account or pay for one
yourself. Quite often, paying for these memberships is worth it, because
you gain access to new features to test.
如果应用程序不允许您创建很多帐户，您可以联系该公司并要求更多帐户。如果您解释说您正在参与他们的漏洞赏金计划，公司通常会授予您额外的帐户。另外，如果该应用程序有付费会员资格，可以要求公司提供高级帐户或自己支付。很多时候，支付这些会员资格是值得的，因为您可以获得新的测试功能的访问权限。
In addition to testing with two accounts, you should also repeat the
testing procedure without signing in. See if you can use an
unauthenticated session to access the information or functionalities
made available to legitimate users.
除了使用两个账户进行测试外，您还应该在未登录的情况下重复测试程序。查看您是否可以使用未经验证的会话来访问提供给合法用户的信息或功能。
### Step 2: Discover Features {#c10.xhtml#h2-501546c10-0002}
Next, try to discover as many application features as possible. Use the
highest-privileged account you own and go through the application,
looking for application features to test.
接下来，尝试尽可能多地发现应用程序的功能。使用您拥有的最高权限帐户，浏览应用程序，寻找要测试的应用程序功能。
[ ]{#c10.xhtml#Page_179 .pagebreak title="179"} Pay special attention to
functionalities that return user information or modify user data. Note
them for future reference. Here are some features that might have IDORs
on *example.com* :
特别注意返回用户信息或修改用户数据的功能。将它们记录下来以备将来参考。以下是一些在
example.com 上可能存在 IDOR 的功能特性：
1.  This endpoint lets you read user messages:
```{=html}
```
    https://example.com/messages?user_id=1236
1.  This one lets you read user files:
```{=html}
```
    https://example.com/uploads?file=user1236-01.jpeg
1.  This endpoint deletes user messages:
```{=html}
```
    POST /delete_message
    (POST request body)
    message_id=user1236-0111
1.  This one is for accessing group files:
```{=html}
```
    https://example.com/group_files?group=group3
1.  This one deletes a group:
```{=html}
```
    POST /delete_group
    (POST request body)
    group=group3
### Step 3: Capture Requests {#c10.xhtml#h2-501546c10-0003}
Browse through each application feature you mapped in the preceding step
and capture all the requests going from your web client to the server.
Inspect each request carefully and find the parameters that contain
numbers, usernames, or IDs. Remember that you can trigger IDORs from
different locations within a request, like URL parameters, form fields,
filepaths, headers, and cookies.
浏览您在先前步骤中映射的每个应用程序功能，并捕获所有从您的 Web
客户端发送到服务器的请求。仔细检查每个请求，找到包含数字、用户名或 ID
的参数。请记住，您可以从请求的不同位置触发 IDOR，例如 URL
参数、表单字段、文件路径、标头和 cookie。
To make testing more efficient, use two browsers, and log into a
different account in each. Then manipulate the requests coming from one
browser to see if the change is immediately reflected on the other
account. For example, let's say you create two accounts, *1235* and
*1236* . Log into *1235* in Firefox and *1236* in Chrome.
为了使测试更有效率，使用两个浏览器，在每个浏览器中登录不同的账户。然后通过一个浏览器来操纵请求，以查看在另一个账户上是否能立即看到更改。例如，假设您创建了两个账户，1235
和 1236。在 Firefox 中登录到 1235，在 Chrome 中登录到 1236。
Use Burp to modify the traffic coming from Firefox. Turn on Intercept in
the Proxy tab and edit requests in the proxy text window ( [Figure
10-1](#c10.xhtml#figure10-1){#c10.xhtml#figureanchor10-1} ). Check if
your attack has succeeded by observing the changes reflected on the
victim account in Chrome.
使用Burp修改来自Firefox
的流量。在代理选项卡中启用拦截，并在代理文本窗口（图10-1）中编辑请求。通过观察Chrome
中受害者账户反映的更改来检查攻击是否成功。
Also, note that APIs like Representational State Transfer (REST) and
GraphQL are often found to be vulnerable to IDOR too. We will talk more
about hacking APIs in [ Chapter 24 ]{.xref
itemid="xref_target_Chapter 24"} . Be on the lookout for these
endpoints. You can use the recon techniques from [ Chapter 5 ]{.xref
itemid="xref_target_Chapter 5"} to discover additional endpoints. Then
follow this testing methodology to switch out IDs found in those
endpoints as well.
还要注意，Representational State
Transfer（REST）和GraphQL等API通常也容易受到IDOR攻击。在第24章中，我们将详细讨论如何攻击API。请注意这些端点。您可以使用第5章的侦察技术发现其他端点，然后按照此测试方法来替换这些端点中发现的ID。
[ ]{#c10.xhtml#Page_180 .pagebreak title="180"}
![[Figure 10-1]{#c10.xhtml#figure10-1} : Modify the request in Burp's
proxy window to switch out the IDs. ¶
图10-1：在Burp代理窗口中修改请求以替换ID。](image_fi/501546c10/f10001.png){.keyline}
### Step 4: Change the IDs {#c10.xhtml#h2-501546c10-0004}
Finally, switch the IDs in the sensitive requests and check if the
information returned also changes. See if you can access the victim
account's information by using the attacker account. And check if you
can modify the second user's account from the first.