title:Complementing static and dynamic analysis approaches for better network
defense
author:Himanshu Pareek and
N. Sarat Chandra Babu
Complementing Static and Dynamic Analysis Approaches For 
Better Network Defense 
Himanshu Pareek 
N. Sarat Chandra Babu 
Center for Development of Advanced Computing 
Center for Development of Advanced Computing 
Hyderabad, India 
PI:EMAIL 
Bangalore, India 
PI:EMAIL
Abstract—  This  paper  presents  a  novel  approach  to  prevent 
execution  of  malicious  files  on  host  system  present  in  the 
network.  For  preventing  a  malicious  file  at  gateway  level,  it  is 
required  to  do  reassembly  of  packets  which  in  turn  reduces  the 
network  performance  by  huge  margins.  This  work  combines 
static  and  dynamic  analysis  approaches  and  implements  a 
minimal agent based system to prevent malicious files and in turn 
increase the dependability using existing systems. 
Keywords— network defense; heuristics; malware; 
I. 
INTRODUCTION 
The prevention of malicious code at gateway level remains 
a challenge [1]. Available malware prevention at gateway level 
scans  for  malware  signatures  at  per  packet  level  and  provides 
only  detection  at  file  level  which  requires  re-assembly  of 
packet stream [2] [3]. Signature based approaches are excellent 
in detecting previously known threats (we refer malicious files 
as  threat  onwards)  but  cannot  detect  new  threats.  When  it 
comes  to  heuristics,  static  analysis  based  approaches  are 
preferred to be deployed at network level rather than dynamic 
approaches.  Even  though  dynamic  approach  is  better  in 
detecting threat, its deployment either at host level or network 
level  will  be  awful  for  a  network  administrator.  Static 
approaches  based  on  heuristics  suffer  from  false  positive  rate 
and sometime threat goes undetected. 
II.  OBJECTIVE 
First, we assume that signature based solutions are quick to 
formulate  once  a  threat  has  been  recognized.  With  some  time 
taken  dynamic  analysis  based  approaches  with  zero  false 
negative  rates  are  generally  available  and  static  analysis 
approaches  with  zero  false  negative  rates are  late to conceive. 
This  is  shown  in  figure  1.  We  observe  that  static  heuristic 
approach  essentially  classify  the  files  into  three  categories: 
benign,  malicious  and  suspicious.  Suspicious  category  states 
that  file  may  be  malicious  but  not  compulsorily.  With  our 
work, we intend to achieve a system which can effectively take 
a  decision  on  suspicious  files  during  time  duration  (t3-t2) 
without  deploying  dynamic  analysis  based  detection  software 
at host level or submission control with the user. We focus on 
Windows  Portable  Executable  (PE)  and  PDF  files.  For  static 
analysis of PE and PDF files we used approaches inspired from 
Scott  Treadwell  [4]  and  Pavel  Laskov  [5]  respectively. 
However,  the  approach  explained  by  Pavel  Laskov  takes 
~20ms  to  scan  a  file  and  required  some  modifications  to 
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Figure 1. Timeline of remedies available for a threat 
decrease  time  taken  per  file.    For  dynamic  analysis  of  the 
suspicious file cuckoo sandbox is used [6]. 
III.  SYSTEM DESIGN 
System  has  four  main  components  which  are  defined 
below.  We  then  discuss  the  process  followed  in  the  system 
which is depicted in figure 2. 
1.  Host  Agent:  We  install  an  Agent  program  at  host  which 
monitors files requests and file responses (file arriving from 
internet location). 
2.  Gateway Controller: A controller program at gateway level 
coordinates the actions of detecting file type, sending file to 
static and dynamic analyzers.  
3.  Static Analyzer: Component which does the heuristic based 
static analysis.  
4.  Dynamic  Analyzer:  Component  which  does  the  Dynamic 
analysis and gives a verdict whether the file is benign. 
A.  Approach 
Whenever  a  file  request  is  sent,  host  agent  logs  this  file 
request.  When  gateway  receives  the  file,  controller  program 
sends  the  file  for  static  analysis.  For  this  mechanism,  we 
continue to forward the packets to host and keep on rebuilding 
the file. Once the last packet is received, static analysis can be 
performed.  For  this  we  sacrifice  the  accuracy  and  achieve  an 
implementation which takes ~5ms per file for analysis. If static 
analyzer tags the file as malicious then final packet is dropped. 
If  file  is  called  as  benign  or  suspicious  then  final  packet  is 
allowed.  With  the  decision  taken  on  final  packet,  controller 
program  sends  a  message  to  host  agent  telling  the  tag  of  the 
file.  If  tag  is  malicious,  file  would  not  have  arrived  at  host 
completely  as  last  packet  was  dropped  and  host  agent  will 
delete  the  file  (if  a  part  present  on  system)  and  terminate  the 
requestor program. If tag is benign, nothing is to be done other 
than removing the file from quarantine list. If tag is suspicious, 
then  controller  program  will  send  it  to  the  dynamic  analyzer 
and host agent will keep the file in quarantined state. Controller 
program  will  now  get  the  response  from  dynamic  analyzer  as 
either  benign  or  malicious.  This  new  tag  will  be  sent  to  host 
agent.   
Windows  OS.  In  host  agent  implementation,  NDIS(Network 
Device  Interface  Specification)  intermediate  filter  driver  is 
used  for  logging  file  requests  and  mini  filter  driver  is  used  to 
block  access 
to  suspicious  files.  However,  our  current 
implementation of gateway controller program is based on raw 
packet filtering but for invoking static analyzer, we are looking 
at OPES Callout Protocol [7]. 
V. CONCLUSION 
We have presented the problem in preventing malware files 
at  gateway  level  and  presented  a  system  approach  which  can 
utilize  the  currently  available  static  and  dynamic  analysis 
techniques to detect malware and increase a network's defense. 
We will include zip files and streaming applications in our tests 
and carry out comparison with other antivirus enabled UTMs. 
REFERENCES 
[1]  Martin  Stecher,  Stopping  malware  at  the  gateway  –  challenges  and 
solutions, Virus Bulletin Conference September 2007. 
[2]  Sonicwall  Inc., Sonicwall Gateway Antivirus Overview, Gateway Anti-
Virus, Anti-Spyware, Intrusion Prevention, and Application Intelligence 
and Control Service, 2011. 
[3]  McAfee Inc., McAfee Gateway Anti Malware Engine, 2012. 
[4]  Treadwell, Scott, and Mian Zhou. A heuristic approach for detection of 
obfuscated malware. IEEE International Conference on Intelligence and 
Security Informatics, 2009. 
[5]  Laskov,  Pavel,  and  Nedim  Šrndić.  "Static  detection  of  malicious 
JavaScript-bearing  PDF  documents."  Proceedings  of  the  27th  Annual 
Computer Security Applications Conference. ACM, 2011. 
[6]  Claudio Guarnieri, Cuckoo Sanbox, http://www.cuckoosandbox.org 
[7]  Rousskov,  Alex.  "RFC  4037:  Open  Pluggable  Edge  Services  (OPES) 
Callout Protocol (OCP) Core." IETF, March (2005). 
Figure 2: System Design 
IV. IMPLEMENTATION 
We  have  implemented  system  with  focus  on  PE  files  on 
Windows OS and PDF files. The host agent is implemented on