# Title: Complementing Static and Dynamic Analysis Approaches for Better Network Defense

## Authors:
- Himanshu Pareek
- N. Sarat Chandra Babu

### Affiliations:
- Center for Development of Advanced Computing, Hyderabad, India
- Center for Development of Advanced Computing, Bangalore, India

### Contact:
- PI: [EMAIL]

---

## Abstract
This paper introduces a novel approach to prevent the execution of malicious files on host systems within a network. To prevent malicious files at the gateway level, packet reassembly is typically required, which can significantly degrade network performance. Our work combines static and dynamic analysis methods and implements a minimal agent-based system to enhance network defense using existing infrastructure.

**Keywords:** Network defense, heuristics, malware

---

## 1. Introduction
Preventing malicious code at the gateway level remains a significant challenge [1]. Current gateway-level malware prevention techniques often scan for malware signatures at the per-packet level, which requires reassembling the packet stream to detect threats at the file level [2, 3]. Signature-based approaches are effective in detecting known threats but fail to identify new ones. Heuristic-based static analysis methods, while preferred for network-level deployment, suffer from high false positive rates. On the other hand, dynamic analysis, though more effective in threat detection, can be resource-intensive and challenging to deploy at either the host or network level.

---

## 2. Objective
We assume that signature-based solutions can be quickly formulated once a threat is identified. Dynamic analysis, although slower to implement, offers zero false negative rates and becomes available over time. Static analysis with zero false negatives, however, takes longer to develop (Figure 1). Our goal is to create a system that effectively handles suspicious files during the interim period (t3-t2) without deploying dynamic analysis software at the host level or requiring user intervention. We focus on Windows Portable Executable (PE) and PDF files, using static analysis techniques inspired by Scott Treadwell [4] and Pavel Laskov [5], respectively. For dynamic analysis, we use Cuckoo Sandbox [6].

![Timeline of Remedies Available for a Threat](figure1.png)

---

## 3. System Design
Our system consists of four main components:

1. **Host Agent**: An agent program installed on the host monitors file requests and responses.
2. **Gateway Controller**: A controller program at the gateway level coordinates file type detection and sends files to static and dynamic analyzers.
3. **Static Analyzer**: Performs heuristic-based static analysis.
4. **Dynamic Analyzer**: Conducts dynamic analysis and determines if the file is benign.

### 3.1. Approach
When a file request is sent, the host agent logs the request. Upon receiving the file, the gateway controller sends it for static analysis. The packets continue to be forwarded to the host, and the file is rebuilt. Once the last packet is received, static analysis is performed, taking approximately 5ms per file. If the static analyzer tags the file as malicious, the final packet is dropped. If the file is tagged as benign or suspicious, the final packet is allowed. The controller then informs the host agent of the file's tag. If the tag is malicious, the file is deleted, and the requesting program is terminated. If the tag is benign, no further action is needed. If the tag is suspicious, the file is sent to the dynamic analyzer and quarantined. The dynamic analyzer's verdict (benign or malicious) is then sent to the host agent.

---

## 4. Implementation
We have implemented the system focusing on PE files on Windows OS and PDF files. The host agent uses an NDIS (Network Device Interface Specification) intermediate filter driver for logging file requests and a mini filter driver to block access to suspicious files. The gateway controller is currently based on raw packet filtering, but we are exploring the use of the OPES Callout Protocol [7] for invoking the static analyzer.

---

## 5. Conclusion
We have presented a system approach that leverages both static and dynamic analysis techniques to detect and prevent malware at the gateway level, thereby enhancing network defense. Future work will include testing with zip files and streaming applications, and comparing our system with other antivirus-enabled UTM (Unified Threat Management) solutions.

---

## References
[1] Martin Stecher, Stopping malware at the gateway – challenges and solutions, Virus Bulletin Conference September 2007.

[2] Sonicwall Inc., Sonicwall Gateway Antivirus Overview, Gateway Anti-Virus, Anti-Spyware, Intrusion Prevention, and Application Intelligence and Control Service, 2011.

[3] McAfee Inc., McAfee Gateway Anti Malware Engine, 2012.

[4] Treadwell, Scott, and Mian Zhou. A heuristic approach for detection of obfuscated malware. IEEE International Conference on Intelligence and Security Informatics, 2009.

[5] Laskov, Pavel, and Nedim Šrndić. "Static detection of malicious JavaScript-bearing PDF documents." Proceedings of the 27th Annual Computer Security Applications Conference. ACM, 2011.

[6] Claudio Guarnieri, Cuckoo Sandbox, http://www.cuckoosandbox.org

[7] Rousskov, Alex. "RFC 4037: Open Pluggable Edge Services (OPES) Callout Protocol (OCP) Core." IETF, March (2005).

---

![System Design](figure2.png)