scapytcp 
0x00  
natgettcpnat
wendellh.323TCPTCPFTP
scapytcpscapy
0x01  
scapy
https://scapy.readthedocs.io/en/latest/
demo
https://akaljed.wordpress.com/2010/12/12/scapy-as-webserver/
demo
#!/usr/bin/python
from scapy.all import *
# Interacts with a client by going through the three-way handshake.
# Shuts down the connection immediately after the connection has been established.
# Akaljed Dec 2010, http://www.akaljed.wordpress.com
# Wait for client to connect.
a=sniff(count=1,filter="tcp and host 192.168.1.1 and port 80")
# some variables for later use.
ValueOfPort=a[0].sport
SeqNr=a[0].seq
AckNr=a[0].seq+1
# Generating the IP layer:
ip=IP(src="192.168.1.1", dst="192.168.1.2")
# Generating TCP layer:
TCP_SYNACK=TCP(sport=80, dport=ValueOfPort, flags="SA", seq=SeqNr, ack=AckNr, options=[('MSS', 1460)])
#send SYNACK to remote host AND receive ACK.
ANSWER=sr1(ip/TCP_SYNACK)
# Capture next TCP packets with dport 80. (contains http GET request)
GEThttp = sniff(filter="tcp and port 80",count=1,prn=lambda x:x.sprintf("{IP:%IP.src%: %TCP.dport%}"))
AckNr=AckNr+len(GEThttp[0].load)
SeqNr=a[0].seq+1
# Print the GET request
# (Sanity check: size of data should be greater than 1.)
if len(GEThttp[0].load)>1: print GEThttp[0].load
# Generate custom http file content.
html1="HTTP/1.1 200 OK\x0d\x0aDate: Wed, 29 Sep 2010 20:19:05 GMT\x0d\x0aServer: Testserver\x0d\x0aConnection: Keep-
Alive\x0d\x0aContent-Type: text/html; charset=UTF-8\x0d\x0aContent-Length: 291\x0d\x0a\x0d\x0aTestserver-Welcome to test server-----------
--------------------"
# Generate TCP data
data1=TCP(sport=80, dport=ValueOfPort, flags="PA", seq=SeqNr, ack=AckNr, options=[('MSS', 1460)])
# Construct whole network packet, send it and fetch the returning ack.
ackdata1=sr1(ip/data1/html1)
# Store new sequence number.
SeqNr=ackdata1.ack
# Generate RST-ACK packet
Bye=TCP(sport=80, dport=ValueOfPort, flags="FA", seq=SeqNr, ack=AckNr, options=[('MSS', 1460)])
send(ip/Bye)
0x02 demo 
iptables 
sudo iptables -A OUTPUT -p tcp --tcp-flags RST RST --sport 80 -j DROP
iptableswebsniff80sniff
iptables
sniff 
a=sniff(count=1,filter="tcp and host 192.168.1.1 and port 80")
tcpdumpa
sendsr1 
send
srsr1
answeranswersr1
0x03 tcp payload  
mssmtu 
mtuipippayloadmtuip
msstcpmtu1500mss1460
payloadNA
tcp 
tcpgetack
seq+len(payload)scapyackseq+offsetoffsetlen(payload)ack
seq+offsetseq+lenpayloadtcp retransmitiontcp
ack
ip=IP(src="192.168.1.1", dst="192.168.1.2")
SeqNr=ACK
AckNr=Seq+
TCP_ACK=TCP(sport=80, dport=ValueOfPort, flags="A", seq=SeqNr, ack=AckNr, options=[('MSS', 1460)])
send(IP/TCP_ACK)
ackseq
https://segmentfault.com/a/1190000016375111
tcp 
tcptcp windowwindow
window
ip=IP(src="192.168.1.1", dst="192.168.1.2")
SeqNr=ACK
AckNr=Seq+
TCP_ACK=TCP(window=50,sport=80, dport=ValueOfPort, flags="A", seq=SeqNr, ack=AckNr, options=[('MSS', 1460)])
send(IP/TCP_ACK)