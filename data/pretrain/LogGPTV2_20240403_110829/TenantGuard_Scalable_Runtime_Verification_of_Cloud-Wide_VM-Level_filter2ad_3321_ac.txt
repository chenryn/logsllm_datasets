forwarded by ExtNet_1 to the router RG_B1. If matching
forwarding rules for these packets are found at nodes RG_B1,
R_B1 and SN_B2, then the edges between RG_B1 and VP_B2
are traversed. At VP_B2, only packets matching the ingress
security group rules are forwarded to their destination. Note
that at the level of R_A1 (resp. R_B1), packets are transformed
using NAT rules by replacing the source (resp. destination)
private (resp. public) IP of VM_A1 (resp. VM_B2) with the
corresponding public (resp. private) IP.
More generally, the following deﬁnition models the way
packets traverse virtual networks using a forwarding and
ﬁltering function capturing respectively routing and security
group rules.
Deﬁnition 2: Forwarding and Filtering Function. Given
a virtual network model G = (V, E),
- let p ∈ P be a symbolic packet (similarly as in [37])
consisting of a set of header ﬁelds (e.g., source and
destination IPs) and their corresponding values in {0, 1}L
such that L is the length of the ﬁeld’s value, and
- let (p, (u, v)) be a forwarding state where (u,v) is the pair
of nodes in G representing respectively the previous hop
node (i.e., the sender node) and the current node (i.e., the
node v where the packet is located in the current state).
- The forwarding and ﬁltering function f dG returns the
i, (v, wi))}i∈N, such that
successor forwarding states {(p′
each wi ∈ V is a receiving node according to the results
is the symbolic
of rules matching at node v, and p′
i
packet resulting from a set of transformations (e.g.,
NAT) over packet p before being forwarded to wi where
{v, wi}∀i∈N ∈ E.
- A forwarding path for packet p from node u to node
v is a sequence of forwarding states (p, (null, u))· · ·
(p′, (v, null)).
As a convention, we will use null in forwarding states to
denote a forwarding state where the symbolic packet has been
dropped (e.g., (null, (w, null))), a packet initially placed on
a node v (e.g., (p, (null, v))), or a packet received by w after
the last hop (e.g., (p, (w, null))).
Network Isolation. With the virtual network model and for-
warding and ﬁltering function just deﬁned, we can formally
model network isolation and related properties as follows.
Deﬁnition 3: Given a virtual network model G = (V, E),
- for any u,v ∈ V , we say u and v are reachable if there
exists a packet p ∈ P and a forwarding path for p from
u to v. Otherwise, we say u and v are isolated.
- A forwarding loop exists between u ∈ V and v ∈ V if
there exists p ∈ P destined to v and w, w′ ∈ V such
that (p, (w, w′)) is a reachable forwarding state and that
f dG((p, (w, w′))) = (p, (w′, w)).
- A blackhole exists between u ∈ V and v ∈ V if
there exists p ∈ P destined to v and w, w′ ∈ V
such that (p, (w, w′)) is a reachable forwarding state and
f dG((p, (w, w′))) = (null, (w′, null)).
The properties given in Deﬁnition 3 can serve as the
building blocks of any network isolation policies speciﬁed
by a cloud tenant. The speciﬁc forms in which such security
policies are given are not important, as long as such policies
can unambiguously determine whether two nodes should be
reachable or isolated. Therefore, our main goal in verifying
a tenant’s security policies regarding network isolation is to
ensure any two nodes are reachable (resp. isolated) if and only
if this is speciﬁed in such policies. In addition, our veriﬁcation
algorithms introduced in Section IV can also identify forward-
ing loops and blackholes as anomalies in virtual networks.
IV. TENANTGUARD DESIGN AND IMPLEMENTATION
In this section, we ﬁrst provide an overview of our ap-
proach and then introduce the data structures and the veriﬁca-
tion algorthims in details.
A. Overview
Due to the sheer size of a cloud, verifying separately each
pair of VMs (query-based approach) or directly computing all
possible forwarding paths for all pairs of VMs (henceforth
called the baseline algorithm) would result in an unacceptable
response time, and not scale to large clouds, as will be
demonstrated through experiments in Section VI. Also, the use
of (possibly overlapping) private IPs and dynamically allocated
public IPs in the cloud can make things even worse. To address
those issues, TenantGuard leverages the hierarchical virtual
network model presented in Section III-B by partitioning the
veriﬁcation task into a preﬁx-level veriﬁcation followed by a
VM-level veriﬁcation. Preﬁx-level veriﬁcation splits further the
virtual networks into a set of private IP preﬁxes (i.e., tenants’
subnets) and a set of public IP preﬁxes (i.e., external network
IP preﬁxes), which results in a three-step approach, as it will be
5
Networking 
service
Compute 
service
Host Routes
Routers Tables
Subnets 
External 
networks
Ingress/Egress 
Security Groups
Security 
Policies
TenantGuard
Compliance 
V&V
Audit 
Report
Data Collection & 
Compliance Verification
Preparation
 & Reporting
Fig. 3. An Overview of TenantGuard
Yes
Same 
Component?
(Step1)
Private IP Prefix-
level verification
: 
not isolated
Isolated ?
No
No
(Step2)
Public IP Prefix-
level verification
(Step3)
VM-Level all-
pairs verification 
Reachable?
Yes
No
Yes
: 
isolated
Subnets: Not 
reachable 
Fig. 4. A Flow Chart Illustrating Our Three-Step Approach
detailed later. Furthermore, we use efﬁcient data structures that
allow handling all-pair veriﬁcation at once instead of a query-
based approach. As we will conﬁrm with experimental results
in Section VI, those conceptual advances allow to scale to
cloud-wide, VM-level veriﬁcation of network isolation. Figure
3 provides an overview of the TenantGuard system. Input data
from the cloud infrastructure management system, including
router rules, host routes, and security groups, are collected and
processed using efﬁcient data structures as it would be detailed
in Section IV-B. The preservation of collected data integrity
is discussed in Section III-A. Once the veriﬁcation results
are returned, compliance veriﬁcation compares such results
with the tenant’s pre-deﬁned security policies. Finally, the
corresponding auditing report is generated and presented to the
tenant. Figure 4 provides a high-level ﬂow graph corresponding
to our three-step approach. Each element of the graph will be
detailed in Section IV-C.
Example 3: Figure 5 illustrates the application of our
three-step veriﬁcation approach using our running example
shown in Figure 2. In Step 1 (ref. Section IV-C1), preﬁx-
level isolation veriﬁcation within the same components/sub-
graph using private IP is performed. For instance, the isolation
between Alice’s subnets SN_A2 and SN_A3 through the router
R_A1 is veriﬁed using their respective private IP preﬁxes
(e.g., 10.0.0.0/24 and 10.0.1.0/24). In Step 2 (ref.
Section IV-C1), preﬁx-level isolation veriﬁcation between dif-
ferent components (e.g., SN_A2 and SN_B2) is performed via
each adjacent external network (e.g., ExtNet_1). This step
is further decomposed into Step 2.a for verifying isolation
between the source subnet (e.g., SN_A2) and the external
network, and Step 2.b for verifying isolation between the
external network and the destination subnet (e.g., SN_B2).
This veriﬁcation also involves public and private IP NAT.
Finally, Step 3 (ref. Section IV-C2) performs VM-level
security groups veriﬁcation for any pair of subnets found to
be reachable using Step 1 and Step 2.
To grasp the intuition behind our three-step veriﬁcation
approach, we present an example.
Range 2: r3
Range 1: r2
Range 3: r1
Step2.a
Ext. Net
1.10.0.0/22
Step2.b
RG_A1
Step1
R_A1
R_A3
RG_B1
R_B1
IF_A11
IF_A12
IF_A31
IF_B12
SN_A2
10.0.0.0/24
SN_A3
10.0.1.0/24
Step3
VP_A1
VP_A2
Tenant Alice
SN_B2
19.0.0.0/24
VP_B2
Tenant Bob
Fig. 5. Example Application of Our Three-Step Veriﬁcation Approach
B. Data Models
In order to further improve the scalability and response-
time of our approach, we investigated preﬁx matching and
packet classiﬁcation literature. According to our ﬁndings, we
found out that both X-fast binary tries [16] and radix binary
tries [15] ﬁt our purpose. Different type of trie structures
have been used in prior works e.g., VeriFlow [21]. Indeed,
X-fast binary tries not only allow efﬁciently storing of all IP
addresses with their preﬁx relationships but also provide fast
insertion and searching operations. Furthermore, radix tries are
efﬁciently used to store routing and ﬁltering rules as well
as efﬁciently matching them against packet-headers. In the
following, we show how we use them in our approach.
1) Routing and Security Groups: We employ radix tries to
store routing and ﬁrewall rules and then to perform efﬁcient
rule matching against IP preﬁxes. We use variables for labeling
nodes to store information about the rules and their order.
Rules in Router R_A1
Rule
Prefix
Next-Hop
r0
r1
r2
r3
10.0.1.0/24
IF_A12
1.10.0.0/22 RG_A1
1.10.0.0/24
IF_A22
1.10.1.0/28
IF_A31
NH:null
0
NH:null
1
NH:null
….
0
NH: null
0
Longest
prefix match
NH: RG_A1
….
0
NH:null
0
NH: IF_A22
1
NH: null
….
1
NH: IF_A31
Preorder 
traversal
1.10.0.0
1.10.3.255
Fig. 6. An Illustrative Routing Table in Router R A1 and an Excerpt of the
Corresponding Radix Trie
Example 4: Figure 6 illustrates an example of a radix
trie (right-side) for an excerpt of the routing rules of router
R_A1 (upper left-side) with the different IP ranges (lower left-
side) resulting from matching all rules with the IP preﬁx of
ExtNet_1 (i.e., 1.10.0.0/22). Edges of the radix trie are la-
beled with binary values and nodes store different information
relevant to matching the bit-strings formed by concatenating all
labels of upstream edges starting from the root node [15]. The
matching consists in transforming the IP preﬁx into a bit string
(i.e., 0000.0001.0000.1010.00) and using it as a key search to
ﬁnd the corresponding node. The node’s variable NH stores the
matching rule’s next hop; for ﬁrewall rules (not shown in this
example), we use two variables, namely VAL for decision of
the matching rule (i.e., accept/deny), and SN for rules’ order.
In case of absence of a matching rule, those values are set to
6
null. For instance, the matched node is labeled NH = RG A1,
which corresponds to the next hop speciﬁed by rule r1 in the
routing table and it represents the longest-preﬁx matched rule.
means that the veriﬁcation is still ongoing for Range
1 and next hop should be evaluated based on the next
variable HR.
For routing rules matching with an IP preﬁx, the common
algorithm used by routers for matching a single packet, namely,
the longest-preﬁx match [38], would not be sufﬁcient. There-
fore, we only apply the longest-preﬁx match algorithm to any
rule that matches the destination preﬁx. Then, we apply a pre-
order traversal of the sub-trie starting from the node storing
the longest-preﬁx matching rule. The rationale is that other
more speciﬁc preﬁxes stored deeper in the radix trie (e.g.,
for a speciﬁc address range) will be needed for a consistent
matching result, which would result in splitting the matched
IP preﬁx into ranges, where each range is governed by the
appropriate rule, as it will be demonstrated in the following.
Example 5: As depicted in Figure 6, once rule r1 is found
using the longest preﬁx match algorithm for the IP preﬁx
1.10.0.0/22, the preorder traversal algorithm is applied on the
sub-trie from the node matching with r1. Thus, rules r2 and r3
are also found to match 1.10.0.0/22. Considering all matching
rules,
into three ranges,
namely, range 1: 1.10.0.0 · · · 1.10.0.255, range 2: 1.10.1.0 · · ·
1.10.1.15, and range 3: 1.10.2.0 · · · 1.10.3.255, respectively
governed by r2, r3 and r1.
the destination preﬁx IP is split
Note that for matching rules in security groups, we will
use the ﬁrst-match algorithm [39].
2) Preﬁx-to-Preﬁx Veriﬁcation Results Processing: The X-
fast binary tries [16] are used (Algorithm 1 in Section IV-C1)
to store and progressively compute veriﬁcation results, per
hop, in order to assess isolation between two IP preﬁxes (see
Figure 7). An X-fast trie (denoted by BT ries) is a binary
tree, where each node, including the root, is labeled with the
common preﬁx of the corresponding destination sub-tree. As
in radix tries, the left child speciﬁes a 0 bit at the end of the
preﬁx, while the right child speciﬁes a bit-value 1. Each node,
including leaves, is labeled with the bit-string from the root
to that leaf. We use the leaves to store intermediate and ﬁnal
results as explained in this example. The binary trie’s leaves
are created and modiﬁed progressively by the preﬁx-to-preﬁx
Algorithm 1.
Example 6: Figure 7 illustrates an example of intermediate
values of a BT ries built for source subnet SN_A2 and destina-
tion ExtNet_1. Leaves store the results of matching the radix
trie of Figure 6 with destination IP preﬁx 1.10.0.0/22, which
is actually the root of the X-fast binary trie. Three variables
are used at the leaf nodes:
- Variable B stores the boundary of the IP ranges for each
leaf. Its value is either L for the lowest bound, H for the
highest bound, or LH if a single leaf with a speciﬁc IP
address (e.g., 1.10.0.2/32). The leftmost leaf in Figure 7,
B is set to L, which means the current leaf is the lowest
bound of the IP range Range 1. The next leaf, B is set
to H to delimit the upper bound of Range 1.
- Variable RLB is a two-bit ﬂag that indicates the status
of the veriﬁcation process, where possible values are 00
for no decision yet, 01 for loop found, 10 for blackhole