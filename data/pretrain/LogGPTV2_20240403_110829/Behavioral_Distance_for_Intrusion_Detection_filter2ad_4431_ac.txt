the program source code. The phrase reduction algorithm takes the result from
TEIRESIAS and outputs a subset of the system call phrases that are neces-
sary to cover the training data. Note that other phrase extraction and reduction
algorithms can be used.
74
D. Gao, M.K. Reiter, and D. Song
For any given system call sequence, there might be more than one way of
breaking it into system call phrases. Here we consider all possible ways of break-
ing it for the behavioral distance calculation and use the minimum as the result.
We also group repeating phrases in a sequence and consider only one occurrence
of such phrase. The objective is not to “penalize” requests that require longer
processing. For example, http requests for large ﬁles normally result in long
system call sequences with many repeating phrases.
3.6 Parameter Settings
The settings of many functions and parameters may aﬀect the performance of
our system. In particular, the most important ones are the four functions f1(),
f2(), f3() and f4(). There are many ways to deﬁne these functions. Good deﬁni-
tions can improve the performance, especially in terms of the false positive and
false negative rates. Below we show how these functions are deﬁned in our ex-
periments. We consider as future work to investigate other ways to deﬁne these
functions, in order to improve the false positive and false negative rates.
These functions are deﬁned as follows in our experiments:
f1(x, y) = max(x, y) + 0.2 min(x, y)
f2(X) = m avg(X)
f3(x, y) = m(|x − y|)
f4(x, y) = m(0.8x + 0.2m
y)
(cid:3)
where m and m
distance table constant in each iteration.
(cid:3) are normalizing factors used to keep the sum of the costs in the
4 Evaluations and Discussions
In this section we evaluate an implementation of our system. We show that the
system is able to detect sophisticated mimicry attacks with a low false positive
rate. We also show that the performance overhead of our system is moderate.
4.1 Experimental Setup
We setup a system with two replicas running two webservers and one proxy
to serve http requests. Replica L runs Debian Linux on a desktop computer
with a 2.2 GHz Pentium IV processor, and replica W runs Windows XP on a
desktop computer with a 2.0 GHz Pentium IV processor. We use another desktop
computer with a 2.0 GHz Pentium IV processor to host a proxy server P. All the
three machines have 512 MB of memory. The Linux kernel on L is modiﬁed such
that system calls made by the webserver are captured and sent to P. On W,
we develop a kernel driver to capture the system calls made by the webserver.
A user program obtains the system calls from the kernel driver on W and sends
them to P.
Behavioral Distance for Intrusion Detection
75
P accepts client http requests and forwards them to both L and W. Af-
ter processing the requests, L and W send out responses and the system call
sequences made by the server programs. P calculates the behavioral distance be-
tween the two system call sequences, raising an alarm if the behavioral distance
exceeds a threshold, and forwards the response to the client if responses from L
and W are the same.
4.2 Behavioral Distance Between System Call Sequences
We run our experiments on three diﬀerent http server programs: Apache [11],
Myserver [1] and Abyss [32]. We choose these servers mainly because they work
on both Linux and Windows. A collection of html ﬁles of size from 0 to 5 MB are
served by these http servers. Training and testing data is obtained by simulating
a client that randomly chooses a ﬁle to download. The client sends 1000 requests,
out of which 800 are used as training data and the remaining 200 are used as
testing data.
We run two sets of tests. In the ﬁrst set of tests we run the same server
implementation on the replicas, i.e., both L and W run Apache, Myserver or
Abyss. Training data is used to learn the distances between system call phrases,
which are then used to calculate the behavioral distance between system call
sequences in the testing data. Results of the behavioral distance calculations on
the testing data are shown in Figure 3 in the form of cumulative distribution
functions (x-axis shows the behavioral distance, and y-axis shows the percentage
of requests with behavioral distance smaller than the corresponding value on
x-axis.). Figure 3 clearly shows that legitimate requests result in system call
sequences with small behavioral distance.
In the second set of tests, we run diﬀerent servers on L and W. Figure 4(a)
shows the results when L is running Myserver and W is running Apache, and
Figure 4(b) shows results when L is running Apache and W is running Myserver.
Although the behavioral distances calculated are not as small as those obtained
in the ﬁrst set of tests, the results are still very encouraging. This set of tests
shows that our system cannot only be used when replicas are running the same
servers on diﬀerent operating systems, but also be used when replicas are running
diﬀerent servers. Our approach is thus an alternative to output voting for server
100
80
60
40
20
s
t
s
e
u
q
e
r
f
o
e
g
a
t
n
e
c
r
e
P
0
0
5
10
Behavioral distance
(a) Apache
100
80
60
40
20
s
t
s
e
u
q
e
r
f
o
e
g
a
t
n
e
c
r
e
P
0
0
5
10
Behavioral distance
(b) Myserver
100
80
60
40
20
s
t
s
e
u
q
e
r
f
o
e
g
a
t
n
e
c
r
e
P
0
0
1
4
3
2
5
Behavioral distance
(c) Abyss
6
7
Fig. 3. CDF of behavioral distances when replicas are running the same server
76
D. Gao, M.K. Reiter, and D. Song
100
80
60
40
20
s
t
s
e
u
q
e
r
f
o
e
g
a
t
n
e
c
r
e
P
0
0
100
80
60
40
20
s
t
s
e
u
q
e
r
f
o
e
g
a
t
n
e
c
r
e
P
0
0
5
Behavioral distance
10
10
5
Behavioral distance
15
(a) Myserver (L) and Apache (W)
(b) Apache (L) and Myserver (W)
Fig. 4. CDF of behavioral distances when replicas are running diﬀerent servers
implementations that do not always provide identical responses to the same
request (c.f., [4]).
4.3 Resilience Against Mimicry Attacks
Section 4.2 shows that legitimate requests to the replicas result in system call
sequences with small behavioral distances. In this section, we show that at-
tack traﬃc will result in system call sequences of large behavioral distances.
However, our emphasis is not on simple attacks which can be detected by intru-
sion/anomaly detection systems on individual replicas. (We did try two known
attacks on an Abyss webserver, and results show that they are detected by iso-
lated anomaly detection systems [37] on any one of the replicas.) Instead, we
focus on more sophisticated attacks, namely mimicry attacks [36, 31].
An attack that injects code into the address space of a running process, and
then causes the process to jump to the injected code, results in a sequence of
system calls issued by the injected code. In a mimicry attack, the injected code is
crafted so that the “attack” system calls are embedded within a longer sequence
that is consistent with the program that should be running in the process. As
shown in [36, 13], mimicry attacks are typically able to evade detection by host-
based intrusion/anomaly detection systems that monitor system call sequences.
We analyze a very general mimicry attack, in which the attacker tries to make
system call open followed by system call write, when the vulnerable server is
processing a carefully crafted http request with attack code embedded. This
simple attack sequence is extremely common in many attacks, e.g., the addition
of a backdoor root account into the password ﬁle. We assume that the attacker
can launch such an attack on only one of the replicas using a single request; i.e.,
either the vulnerability exists only on one of the replicas, or if both replicas are
vulnerable, an attacker can inject code that makes system calls of his choice on
only one of the replicas. To our knowledge, there is no existing code-injection
attacks that violate this assumption, when the replicas are running Linux and
Microsoft Windows; nor do we know how to construct one except in very spe-
cialized cases.
We perform two tests with diﬀerent assumptions. The ﬁrst test assumes that
the attacker is trying to evade detection by an existing anomaly detection tech-
Behavioral Distance for Intrusion Detection
77
Table 1. Behavioral distance of mimicry attacks
Apache
Apache
Server on L
Server on W
Abyss Myserver Myserver Apache
Abyss Myserver Apache Myserver
Mimicry on L (test 1) 10.283194 9.821795 26.656983 6.908590 32.764897
100 % 99.4555 % 100 %
5.492936 9.967780 13.354194 5.280875
Mimicry on W (test 1) 6.842813
99.4555 % 99.9093 % 99.4555 % 100 % 99.4555 %
3.736
99.9093 % 100 %
1.828
2.731
Mimicry on L (test 2)