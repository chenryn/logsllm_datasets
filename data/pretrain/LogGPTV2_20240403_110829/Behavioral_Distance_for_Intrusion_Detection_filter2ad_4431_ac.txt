### Program Source Code and Phrase Reduction Algorithm

The phrase reduction algorithm processes the output from TEIRESIAS, generating a subset of system call phrases necessary to cover the training data. It is important to note that alternative phrase extraction and reduction algorithms can be utilized.

### System Call Sequence Analysis

For any given system call sequence, there may be multiple ways to break it into system call phrases. In our approach, we consider all possible ways of breaking the sequence for the behavioral distance calculation and use the minimum value as the result. Additionally, we group repeating phrases in a sequence and only consider one occurrence of such a phrase. This method aims to avoid "penalizing" requests that require longer processing. For example, HTTP requests for large files typically result in long system call sequences with many repeating phrases.

### Parameter Settings

The performance of our system is influenced by the settings of various functions and parameters. The most critical ones are the four functions \( f_1() \), \( f_2() \), \( f_3() \), and \( f_4() \). These functions can be defined in multiple ways, and good definitions can enhance performance, particularly in terms of false positive and false negative rates. Below are the definitions used in our experiments:

- \( f_1(x, y) = \max(x, y) + 0.2 \min(x, y) \)
- \( f_2(X) = m \cdot \text{avg}(X) \)
- \( f_3(x, y) = m \cdot |x - y| \)
- \( f_4(x, y) = m \cdot (0.8x + 0.2y) \)

Here, \( m \) and \( m' \) are normalizing factors used to keep the sum of the costs in the distance table constant in each iteration.

### Evaluations and Discussions

In this section, we evaluate an implementation of our system, demonstrating its ability to detect sophisticated mimicry attacks with a low false positive rate. We also show that the performance overhead of our system is moderate.

#### Experimental Setup

We set up a system with two replicas running two web servers and one proxy to serve HTTP requests. The setup includes:
- **Replica L**: Debian Linux on a desktop computer with a 2.2 GHz Pentium IV processor.
- **Replica W**: Windows XP on a desktop computer with a 2.0 GHz Pentium IV processor.
- **Proxy Server P**: Hosted on another desktop computer with a 2.0 GHz Pentium IV processor.

All three machines have 512 MB of memory. The Linux kernel on L is modified to capture system calls made by the web server and send them to P. On W, a kernel driver captures the system calls made by the web server, and a user program sends these calls to P.

P accepts client HTTP requests and forwards them to both L and W. After processing the requests, L and W send out responses and the system call sequences made by the server programs. P calculates the behavioral distance between the two system call sequences, raising an alarm if the distance exceeds a threshold, and forwards the response to the client if the responses from L and W are the same.

#### Behavioral Distance Between System Call Sequences

We conducted experiments using three different HTTP server programs: Apache, Myserver, and Abyss. These servers were chosen because they work on both Linux and Windows. A collection of HTML files ranging from 0 to 5 MB was served by these HTTP servers. Training and testing data were obtained by simulating a client that randomly chose a file to download. The client sent 1000 requests, with 800 used as training data and the remaining 200 used as testing data.

**First Set of Tests:**
- Both L and W run the same server (Apache, Myserver, or Abyss).
- Training data is used to learn the distances between system call phrases, which are then used to calculate the behavioral distance between system call sequences in the testing data.
- Results are shown in Figure 3, indicating that legitimate requests result in system call sequences with small behavioral distances.

**Second Set of Tests:**
- Different servers run on L and W (e.g., L runs Myserver and W runs Apache).
- Results are shown in Figure 4, indicating that although the behavioral distances are not as small as those in the first set of tests, the results are still encouraging.
- This set of tests shows that our system can be used even when replicas are running different servers, providing an alternative to output voting for server implementations that do not always provide identical responses to the same request.

#### Resilience Against Mimicry Attacks

Our system demonstrates that legitimate requests result in system call sequences with small behavioral distances. In this section, we focus on more sophisticated attacks, specifically mimicry attacks, where injected code is crafted to embed "attack" system calls within a longer, consistent sequence. Such attacks often evade detection by host-based intrusion/anomaly detection systems.

We analyze a general mimicry attack where the attacker tries to make a system call `open` followed by `write` during the processing of a carefully crafted HTTP request. We perform two tests with different assumptions:

- **Test 1:** Assumes the attacker is trying to evade detection by an existing anomaly detection technique.
- **Test 2:** Assesses the system's resilience under different conditions.

Table 1 summarizes the behavioral distances for mimicry attacks, showing the effectiveness of our system in detecting such attacks.

This comprehensive evaluation demonstrates the robustness and effectiveness of our system in detecting sophisticated mimicry attacks while maintaining a low false positive rate and moderate performance overhead.