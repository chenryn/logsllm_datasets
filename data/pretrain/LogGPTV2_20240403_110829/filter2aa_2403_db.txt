① 请参阅 Int13。 
② 请参阅 AMD13a。 
，都没有记载MOVSDX指令。它就是MOVSD指令。这就是说
异步社区会员 dearfuture(15918834820) 专享 尊重版权
400 
逆向工程权威指南（上册） 
x86 指令集的指令可能对应着多个名称（详情请参阅附录A.6.2）。而此处出现了这个指令，说明微软的研发人员希
望用指令名称来标明操作符的数据类型，避免产生混淆。它是把浮点值传递给XMM寄存器的低半部分的指令。 
pow()函数从 XMM0 和 XMM1 中读取参数，再把返回结果存储在 XMM0 寄存器。函数返回值又刻意
通过 RDX 寄存器传递给 printf()函数，不过这是为什么？坦白地讲，我不知道个中缘由。或许这是 printf()
的特性——可受理不同类型参数——造成的。 
指令清单 27.6  Optimizing GCC 4.4.6 x64 
.LC2: 
         .string "32.01 ^ 1.54 = %lf\n" 
main: 
         sub      rsp, 8 
         movsd   xmm1, QWORD PTR .LC0[rip] 
         movsd   xmm0, QWORD PTR .LC1[rip] 
         call    pow 
         ; result is now in XMM0 
         mov     edi, OFFSET FLAT:.LC2 
         mov     eax, 1 ; number of vector registers passed 
         call    printf 
         xor     eax, eax 
         add     rsp, 8 
         ret 
.LC0: 
         .long  171798692 
         .long  1073259479 
.LC1: 
         .long  2920577761 
         .long  1077936455 
GCC 的编译手法更易懂一些。它使用 XMM0 寄存器向 printf()函数传递浮点型参数。此外，在向 printf()
函数传递参数的时候，程序将 EAX 寄存器的值设置为 1。这就相当于告诉函数“有 1 个参数在矢量寄存器
里”。这种特例完全遵循了有关规范（请参阅 Mit13）。 
27.3  浮点数之间的比较 
#include  
double d_max (double a, double b) 
{ 
         if (a>b) 
                  return a; 
         return b;  
}; 
int main() 
{ 
         printf ("%f\n", d_max (1.2, 3.4)); 
         printf ("%f\n", d_max (5.6, -4)); 
}; 
27.3.1  x64 
指令清单 27.7  Optimizing MSVC 2012 x64 
a$ = 8 
b$ = 16 
d_max   PROC 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 27 章 SIMD 与浮点数的并行运算 
401 
         comisd   xmm0, xmm1 
         ja       SHORT $LN2@d_max 
         movaps   xmm0, xmm1 
$LN2@d_max: 
         fatret   0 
d_max   ENDP 
MSVC 的优化编译结果简明易懂。 
其中，COMISD 的全称是“Compare Scalar Ordered Double-Precision Floating-Point Values and Set 
EFLAGS”。它是比较双精度标量并设置标志位的指令。 
MSVC 的非优化编译结果同样不难阅读，只是程序的效率低了一些。 
指令清单 27.8  MSVC 2012 x64 
a$ = 8 
b$ = 16 
d_max   PROC 
         movsdx   QWORD PTR [rsp+16], xmm1 
         movsdx   QWORD PTR [rsp+8], xmm0 
         movsdx   xmm0, QWORD PTR a$[rsp] 
         comisd   xmm0, QWORD PTR b$[rsp] 
         jbe      SHORT $LN1@d_max 
         movsdx   xmm0, QWORD PTR a$[rsp] 
         jmp      SHORT $LN2@d_max 
$LN1@d_max: 
         movsdx   xmm0, QWORD PTR b$[rsp] 
$LN2@d_max: 
         fatret   0 
d_max   ENDP 
然而 GCC 4.4.6 优化得更为彻底。它直接使用 MAXSD 指令（Return Maximum Scalar Double-Precision 
Floating-Point Value），一步就可完成任务。 
指令清单 27.9  Optimizing GCC 4.4.6 x64 
d_max: 
          maxsd   xmm0, xmm1 
          ret 
27.3.2  x86 
使用 MSVC 2012 对上述代码进行优化编译，可得到如下所示的代码。 
指令清单 27.10  Optimizing MSVC 2012 x86 
_a$ = 8       
; size = 8 
_b$ = 16     
; size = 8 
_d_max  PROC 
         movsd    xmm0, QWORD PTR _a$[esp-4] 
         comisd   xmm0, QWORD PTR _b$[esp-4] 
         jbe      SHORT $LN1@d_max 
         fld      QWORD PTR _a$[esp-4] 
         ret      0 
$LN1@d_max: 
         fld      QWORD PTR _b$[esp-4] 
         ret      0 
_d_max  ENDP 
这个程序用栈向函数传递变量 a 和 b，并且把函数返回值存储在 ST(0)寄存器里。除此之外它和 64 位
的程序没有区别。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
402 
逆向工程权威指南（上册） 
使用 OllyDbg 调试这个程序，则可以观察 COMISD 指令比较数值、设置/清零 CF/PF 标识位的具体过
程，如图 27.6 所示。 
图 27.6  OllyDbg：COMISD 指令调整 CF 和 PF 标识位 
27.4  机器精 
本书在22.2.2 节就介绍过机器精度的具体计算算法。在这一节里，我们把它编译为如下所示的64 位应用程序。 
指令清单 27.11  Optimizing MSVC 2012 x64 
v$ = 8 
calculate_machine_epsilon PROC 
         movsdx   QWORD PTR v$[rsp], xmm0 
         movaps   xmm1, xmm0 
         inc       QWORD PTR v$[rsp] 
         movsdx   xmm0, QWORD PTR v$[rsp] 
         subsd    xmm0, xmm1 
         ret       0 
calculate_machine_epsilon ENDP 
由于 INC 指令无法对 128 位的 XMM 寄存器里的值进行操作，程序首先把寄存器的值传递到了内存中
的某个地址。 
然而这也不是必须如此。如果在此处直接使用 ADDSD（Add Scalar Double-Precision Floating-Point 
Values）指令，就能够直接对 XMM 寄存器的低 64 位进行加法运算，同时保持寄存器的高 64 位不变。或
许，我们不得不说 MSVC 2012 还有改善的余地。 
我们再看这个程序。在完成递增运算之后，程序把返回值再次回传给了 XMM 寄存器，然后对 XMM
寄存器进行减法（比较）操作。SUBSD 的全称是“Substract Scalar Double-Precision Floating-Point Values”。
它只对 128 位 XMM 寄存器的低 64 位进行操作。最后，减法运算的返回值保存在 XMM0 寄存器中。 
27.5  伪随机数生成程序（续） 
现在，我们再次利用 MSVC 2012 编译指令清单 22.1 的源程序。这个版本的 MSVC 编译器能够直接分
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 27 章 SIMD 与浮点数的并行运算 
403 
配 FPU 的 SIMD 指令。 
指令清单 27.12  Optimizing MSVC 2012 
__real@3f800000 DD 03f800000r   
; 1 
tv128 = -4 
_tmp$ = -4 
?float_rand@@YAMXZ PROC 
          push   
ecx 
          call  
?my_rand@@YAIXZ 
; EAX=pseudorandom value 
          and  
eax, 8388607  
; 007fffffH 
          or   
eax, 1065353216  
; 3f800000H 
; EAX=pseudorandom value & 0x007fffff | 0x3f800000 
; store it into local stack: 
          mov  
DWORD PTR _tmp$[esp+4], eax 
; reload it as float point number: 
          movss  xmm0, DWORD PTR _tmp$[esp+4] 
; subtract 1.0: 
          subss  xmm0, DWORD PTR __real@3f800000 
; move value to ST0 by placing it in temporary variable... 
          movss  DWORD PTR tv128[esp+4], xmm0 
; ... and reloading it into ST0: 
          fld  
DWORD PTR tv128[esp+4] 
          pop  
ecx 
          ret  
0 
?float_rand@@YAMXZ ENDP 
编译器大量使用了带有“-SS”后缀的指令。这个后缀是“Scalar Single”的缩写。“Scalar（标量）”表
明寄存器里只有一个值，“Single”则表明该值是单精度 float 型的数据。 
27.6  总结 
在 XMM 寄存器里存储 IEEE 754 格式格式浮点数的时候，本章的所有程序都只用到了 128 位寄存器空
间的低 64 位。 
这是由操作指令决定的。本章中的指令都带有-SD（Scalar Double-Precision）后缀。因此，所有指令操
作的数据类型都是 IEEE 754 格式的双精度浮点数。这种数据只会占用 XMM 寄存器的低 64 位。 
SIMD 指令集比 FPU 的指令更易理解。过去的那些 FPU 指令距离人类语言较远，而且它们还往往涉及
FPU 寄存器的栈结构，远不如 SIMD 指令直观。 
如果把本章源程序的数据类型都从 double 改为 float，那么操作浮点数的指令都将改为-SS 后缀（Scalar 
Single-Precision）。您将看到 MOVSS/COMISS/ADDSS 等指令。 
“Scalar”就是“标量”的意思，它表示寄存器里只含有一个值。如果一个寄存器里存有多个值，那么
对这些寄存器进行操作的指令的名字里都会带有“packed”字样。 
还需要强调的是，SSE2 指令的操作数都是 IEEE 754 格式的 64 位数据，而 FPU 内部则使用 80 位的数
据格式存储数据。所以 FPU 的误差较小、精度较高。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 2288 章
章    AARRM
M 指
指令
令详
详解
解  
28.1  立即数标识（#） 
在 Keil 编译器的链接文件里，以及在 IDA 和 objdump 程序显示 ARM 的汇编指令时，立即数（汇编指
令中的常量）前面都有“#”标识。然而 GCC 4.9 的编译文件中没有这种立即数标识。请对照一下 14.1.4
节和 39.3 节中的指令清单。 
本章列举了很多例子，它们是由多种编译器生成的汇编代码。有些汇编指令的立即数确实没有井号标
识，因为它们是 GCC 编译出来的文件。 
这种问题毕竟谈不上谁比谁更为正宗。我们也建议读者不必深究这种格式上的问题。 
28.2  变址寻址 
以 64 位的寻址指令为例： 
ldr      x0, [x29,24] 
上述指令从 X29 寄存器中取值，把这个值与 24 相加，再将算术和对应地址的值复制给 X0 寄存
器。请注意，X29 和 24 都在方括号之中。如果 24 不在方括号里，指令的涵义就完全不一样了。我
们来看： 
ldr      w4, [x1],28 
上述指令在 X1 寄存器所表示的地址取值，然后进行“指针 X1 所对应的值+28”的运算。 
ARM 可以在取值过程中进行立即数的加减运算。它即可以在取值前进行地址运算，还可以在取值后
进行数值运算。 
x86 的汇编指令不支持这种操作。但是包括旧式的 PDP-11 平台在内，许多其他处理器平台都支持
这种运算。PDP-11 平台的指令集支持前增量（pre-increment）、前减量（pre-decrement）、后增量（post- 
increment）、后减量（post-decrement）运算。这大体可以归咎于 C 语言（基于 PDP-11 平台开发的）
里的*ptr++、*++ptr、*ptr--、*--ptr 一类的指令。在 C 语言中，这些指令确实属于不易掌握的指令。本
文将之整理如下。 
C 术语 
ARM 术语 
C 语句 
工作原理 
后增量 
后变址寻址 
*ptr++ 
使用*ptr 的值后，再进行递增运算 
后减量 
后变址寻址 
*ptr-- 
使用*ptr 的值后，再进行递减运算 
前增量 
前变址寻址 
*++ptr 
ptr 先递增，后取*ptr 的值 
前减量 
前变址寻址 
*--ptr 
ptr 先递减，后取*ptr 的值 
前变址寻址的指令带感叹号标识。例如，指令清单 3.15 的第二条指令“stp x29, x30, [sp,#-16]!”。 
Dennis Ritchie（C 语言的作者之一）曾经提到过，变址寻址是 Ken Thompson（另一位 C 语言的作者）
根据 PDP-7 平台的特性开发的指令（请参阅［Rit86］[Rit93]）。现在 C 语言编译器仍然保持着这种兼容性，
只要硬件处理器支持，编译器就可以进行相应的优化编译。 
变址寻址的优越性集中体现在数组的操作方面。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 28 章  ARM 指令详解 
405 
28.3  常量赋值 
28.3.1  32 位 ARM 
所有的 Thumb 模式的汇编指令都是 2 字节指令，所有的 ARM 模式的汇编指令都是 4 字节指令。ARM
模式指令和 32 位的立即数都占用 4 字节，又如何进行 32 位立即数赋值呢？ 
我们来看： 
unsigned int f() 
{ 
         return 0x12345678; 
}; 
指令清单 28.1  GCC 4.6.3 -O3 ARM mode 
f: 
         ldr      r0, .L2 
         bx       lr 
.L2: 
         .word    305419896 ; 0x12345678 
可见，0x12345678 存储于内存之中，供其他指令调用。但是这种指令增加了 CPU 访问内存的次数。
我们可以改善这一状况。 
指令清单 28.2  GCC 4.6.3 -O3 -march=armv7-a (ARM mode) 
movw    r0, #22136      ; 0x5678 
movt    r0, #4660       ; 0x1234 
bx       lr 
上述指令把一个立即数分为 2 个部分，并依次存储到同一个寄存器里。它使用 MOVW 指令先把立即
数的低位部分存储到寄存器里，然后再使用 MOVT 存储这个数的高位部分。 
这也就是说，ARM 模式的程序需要 2 个指令才能加载一个 32 位的立即数。除了 0 和 1 之外，程序很
少用到常量，所以这种分步赋值的方法不会造成实际问题。有人会问，这种一分为二的做法会不会造成性
能的下降呢？虽然肯定比单条指令的效率要低，但是现在的 ARM 处理器能够检测到这种指令序列并能够
对这种指令进行优化。 
另外，IDA 这样的工具能够识别出这种一分为二指令，并在显示的时候把它们合二为一。 
MOV    R0, 0x12345678 
BX     LR 
28.3.2  ARM64 
uint64_t f() 
{ 
         return 0x12345678ABCDEF01; 
}; 
指令清单 28.3  GCC 4.9.1 -O3 
mov     x0, 61185    ; 0xef01 
movk    x0, 0xabcd, lsl 16 
movk    x0, 0x5678, lsl 32 
movk    x0, 0x1234, lsl 48 
ret 
其中，MOVK 是“MOV Keep”的缩写。它把 16 位数值存储到寄存器里，而保留寄存器里的其他比特
异步社区会员 dearfuture(15918834820) 专享 尊重版权
406 
逆向工程权威指南（上册） 
位。实际上这几个 MOVK 指令先使用 LSL 指令依次位移了 16、32、48 位，然后再进行的赋值操作。即，
程序通过 4 条指令把一个 64 位数值存储到寄存器里。 
浮点数 
一条指令就可把浮点型数据存储到 D-存储器里。我们来看： 
double a() 
{ 
         return 1.5; 
}; 
指令清单 28.4  GCC 4.9.1 -O3 + objdump 
0000000000000000 : 
   0:    1e6f1000         fmov    d0, #1.500000000000000000e+000  
   4:    d65f03c0         ret 
上面这个单条 32 位指令如何封装浮点数 1.5 呢？在ARM64 的FMOV指令里，有 8 个特殊的比特位。
这 8 位空间用于编排浮点型数据。通过VFPExpandImm()函数的算法，编译器把浮点数封装在FMOV指令的
8 位空间里。这种算法又叫作minifloat
①
28.4  重定位 
，实现方法请参见[ARM13a]。我测试了几个浮点数，发现编译器能
够通过该函数把 30.0 和 31.0 编排在 8 位指令空间里。但是这 8 位空间无法封装 32.0。根据IEEE 754 规范，
32.0 要占用 8 个字节的空间。 
double a()  
{ 
         return 32; 
}; 
上述源程序的汇编指令如下所示。 
指令清单 28.5  GCC 4.9.1 -O3 