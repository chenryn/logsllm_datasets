```
  > This bypasses WAF filters for SSRF, open-redirect, etc where any IP as input gets blacklisted.
For more information please see [How to Obscure Any URL](http://www.pc-help.org/obscure.htm) and [Magic IP Address Shortcuts](https://stuff-things.net/2014/09/25/magic-ip-address-shortcuts/).
###### Hashing, encryption and encoding (by [Michal Špaček](https://twitter.com/spazef0rze))
_Hashing_
plaintext :arrow_right: hash
hash :no_entry: plaintext
_Symmetric encryption_
plaintext :arrow_right: :key: :arrow_right: ciphertext
plaintext :arrow_left: :key: :arrow_left: ciphertext
(:key: shared key)
_Asymmetric encryption_
plaintext :arrow_right: :key: :arrow_right: ciphertext
plaintext :arrow_left: :part_alternation_mark: :arrow_left: ciphertext
(:key: public key, :part_alternation_mark: private key)
_Encoding_
text :arrow_right: encoded
text :arrow_left: encoded
#### Shell One-liners &nbsp;[[TOC]](#anger-table-of-contents)
##### Table of Contents
  * [terminal](#tool-terminal)
  * [busybox](#tool-busybox)
  * [mount](#tool-mount)
  * [fuser](#tool-fuser)
  * [lsof](#tool-lsof)
  * [ps](#tool-ps)
  * [top](#tool-top)
  * [vmstat](#tool-vmstat)
  * [iostat](#tool-iostat)
  * [strace](#tool-strace)
  * [kill](#tool-kill)
  * [find](#tool-find)
  * [diff](#tool-diff)
  * [vimdiff](#tool-vimdiff)
  * [tail](#tool-tail)
  * [cpulimit](#tool-cpulimit)
  * [pwdx](#tool-pwdx)
  * [tr](#tool-tr)
  * [chmod](#tool-chmod)
  * [who](#tool-who)
  * [last](#tool-last)
  * [screen](#tool-screen)
  * [script](#tool-script)
  * [du](#tool-du)
  * [inotifywait](#tool-inotifywait)
  * [openssl](#tool-openssl)
  * [secure-delete](#tool-secure-delete)
  * [dd](#tool-dd)
  * [gpg](#tool-gpg)
  * [system-other](#tool-system-other)
  * [curl](#tool-curl)
  * [httpie](#tool-httpie)
  * [ssh](#tool-ssh)
  * [linux-dev](#tool-linux-dev)
  * [tcpdump](#tool-tcpdump)
  * [tcpick](#tool-tcpick)
  * [ngrep](#tool-ngrep)
  * [hping3](#tool-hping3)
  * [nmap](#tool-nmap)
  * [netcat](#tool-netcat)
  * [socat](#tool-socat)
  * [p0f](#tool-p0f)
  * [gnutls-cli](#tool-gnutls-cli)
  * [netstat](#tool-netstat)
  * [rsync](#tool-rsync)
  * [host](#tool-host)
  * [dig](#tool-dig)
  * [certbot](#tool-certbot)
  * [network-other](#tool-network-other)
  * [git](#tool-git)
  * [awk](#tool-awk)
  * [sed](#tool-sed)
  * [grep](#tool-grep)
  * [perl](#tool-perl)
##### Tool: [terminal](https://en.wikipedia.org/wiki/Linux_console)
###### Reload shell without exit
```bash
exec $SHELL -l
```
###### Close shell keeping all subprocess running
```bash
disown -a && exit
```
###### Exit without saving shell history
```bash
kill -9 $$
unset HISTFILE && exit
```
###### Perform a branching conditional
```bash
true && echo success
false || echo failed
```
###### Pipe stdout and stderr to separate commands
```bash
some_command > >(/bin/cmd_for_stdout) 2> >(/bin/cmd_for_stderr)
```
###### Redirect stdout and stderr each to separate files and print both to the screen
```bash
(some_command 2>&1 1>&3 | tee errorlog ) 3>&1 1>&2 | tee stdoutlog
```
###### List of commands you use most often
```bash
history | \
awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | \
grep -v "./" | \
column -c3 -s " " -t | \
sort -nr | nl |  head -n 20
```
###### Sterilize bash history
```bash
function sterile() {
  history | awk '$2 != "history" { $1=""; print $0 }' | egrep -vi "\
curl\b+.*(-E|--cert)\b+.*\b*|\
curl\b+.*--pass\b+.*\b*|\
curl\b+.*(-U|--proxy-user).*:.*\b*|\
curl\b+.*(-u|--user).*:.*\b*
.*(-H|--header).*(token|auth.*)\b+.*|\
wget\b+.*--.*password\b+.*\b*|\
http.?://.+:.+@.*\
" > $HOME/histbuff; history -r $HOME/histbuff;
}
export PROMPT_COMMAND="sterile"
```
  > Look also: [A naive utility to censor credentials in command history](https://github.com/lbonanomi/go/blob/master/revisionist.go).
###### Quickly backup a file
```bash
cp filename{,.orig}
```
###### Empty a file (truncate to 0 size)
```bash
>filename
```
###### Delete all files in a folder that don't match a certain file extension
```bash
rm !(*.foo|*.bar|*.baz)
```
###### Pass multi-line string to a file
```bash
# cat  >filename ... - overwrite the file
# cat >>filename ... - append to a file
cat > filename  /etc/profile << __EOF__
_after_logout() {
  username=$(whoami)
  for _pid in $(ps afx | grep sshd | grep "$username" | awk '{print $1}') ; do
    kill -9 $_pid
  done
}
trap _after_logout EXIT
__EOF__
```
###### Generate a sequence of numbers
```bash
for ((i=1; i<=10; i+=2)) ; do echo $i ; done
# alternative: seq 1 2 10
for ((i=5; i<=10; ++i)) ; do printf '%02d\n' $i ; done
# alternative: seq -w 5 10
for i in {1..10} ; do echo $i ; done
```
###### Simple Bash filewatching
```bash
unset MAIL; export MAILCHECK=1; export MAILPATH='$FILE_TO_WATCH?$MESSAGE'
```
---
##### Tool: [busybox](https://www.busybox.net/)
###### Static HTTP web server
```bash
busybox httpd -p $PORT -h $HOME [-c httpd.conf]
```
___