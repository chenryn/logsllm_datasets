specific to each OS and virtualized environment.
4.2.1 Finding the Base and End Address
We used the following OS-specific information to get the
current mapping range of the running OS (see Table 2).
Linux.
In Linux, kernel and modules addresses are
mapped in different regions. The base address of the ker-
nel is in the 0xffffffff80000000–0xffffffffc0000000
address range, and there are only 64 slots where the kernel
can start (aligned at 16 MB). For the modules, the base
address can start in the range of 0xffffffffc0000000–
0xffffffffc0400000, and 1,024 slots are available for
base addresses for the modules (aligned at 4 KB). To find
the base address of each region, we sequentially scan
those slots.
After successfully determining the base address of the
region, we find the end address of each region as follows.
For the kernel, since it is always mapped as a whole chunk
in Linux, we set the first found unmapped page from the
kernel base address as the end address of the kernel area.
For the modules, while each module is mapped as a chunk,
there is a region of unmapped pages between the modules.
Thus, finding unmapped pages in the region can only tell
the number of modules loaded in the area. To identify the
end of module mapping area from this information, we
use the number of modules that is currently loaded in the
OS. This is available through a user level program lsmod,
which shows the list of currently loaded modules. If the
number of detected unmapped region matches the total
number of modules, we set the end address at that point.
Windows. Unlike Linux, Windows does not have sep-
arated areas for kernel and driver mappings. Specif-
ically, kernel pages and driver pages can both lie
in the same address range of 0xfffff80000000000–
0xfffff80400000000. To distinguish between kernel
pages and drivers, we use the following facts: 1) all kernel
pages in Windows are mapped with executable permis-
sion, 2) the kernel uses a page size of 2 MB, and its total
size is at most 6 pages (12 MB in size for the tested ver-
sion of Windows 10), and 3) the kernel can either come
first or come last.
Knowing this, we scan the whole available address
space from one end to the other, to find the first and the
last mapped pages in the area. If first and the last pages are
found, we look for a consecutive 12 MB area mapped with
executable permissions at either end. This area contains
kernel pages. After the kernel page range is determined,
we know the remaining space that is mapped to be the
module area.
OS X. For OS X, we only launched the attack to
find the base address (i.e., ASLR slide) of the kernel
image. Since the kernel can be mapped in the range
of 0xffffff8000000000–0xffffff8020000000 over 256
slots, we scan them to find the first mapped address.
8
On all tested operating systems, finding the kernel base
and end address can be done very quickly. All scans were
completed within several milliseconds (5 ms, 31 ms, and
797 ms in Linux, OS X and Windows, respectively).
4.2.2 Accuracy: Detecting Page Mappings
After discovering the base and the end address of kernel
mappings, we performed accuracy testing of the DrK
attack. Basically, we probed all mapped areas with DrK,
then compared the result from the attack to the ground
truth mappings extracted from the page tables.
Table 4 shows the result of our accuracy testing.
Linux. For Linux, we ran the attack on three different
CPUs (i7-6700K, i5-6300HQ, and E3-1271 v3), and on
the kernel version 4.4.0 running Ubuntu 16.04 LTS. DrK
measured 6,147 pages in total (3,075 for kernel and 3,072
pages for the modules) and it was able to identify their
mappings with 100% accuracy. In total, the attack took
around a half second (from retrieving the base address to
determining all page permissions).
Windows. For Windows, we ran the DrK attack on Sky-
lake i5-6300HQ processor running Windows 10 version
10.0.10586. Both kernel and drivers consisted of 34,258
pages (probing 8,192 of 2 MB pages for the base and end
addresses, and 26,066 pages for measuring 4 KB pages
for the module addresses) to be scanned. The total attack,
including scanning slots for the base address and mea-
suring each page, completed in under five seconds with
100 iterations of probing, which yields 100% (mapping)
and 90.45% (executable) accuracy in detecting module
mappings.
Running more iterations on Windows gives better re-
sults in finding executable pages. When running 1,000
iterations on each page, it yields 99.28% accuracy in de-
tecting executable pages, while taking long (45.9 s) for
probing.
4.2.3 Detecting Module Addresses
-
NAME
PERM
END_ADDR
BASE_ADDR
1 //
2 0xffffffffc035b000-0xffffffffc0360000 U
3 0xffffffffc0360000-0xffffffffc0364000 X libahci
4 0xffffffffc0364000-0xffffffffc0368000 NX libahci
5 0xffffffffc0368000-0xffffffffc036c000 U
6 0xffffffffc036c000-0xffffffffc036e000 X i2c_hid
7 0xffffffffc036e000-0xffffffffc0371000 NX i2c_hid
8 0xffffffffc0371000-0xffffffffc0376000 U
9 0xffffffffc0376000-0xffffffffc039a000 X drm
10 0xffffffffc039a000-0xffffffffc03cc000 NX drm
11 0xffffffffc03cc000-0xffffffffc03cd000 U
SIZE
4000
4000
2000
3000
24000
32000
Figure 7: List of module mappings in Linux kernel 4.4.0. Note
that the mapping is always done in the following sequence: X,
NX, U, and a chunk of unmapped pages separates the mappings
of consecutive modules. The sizes of X and NX pages are
diverse by the modules.
Fine-grained module detection.
The DrK attack al-
lows for a very accurate picture of the kernel address
space layout. This can be further exploited to identify
the exact location of a specific module (driver). For ex-
ample, from the mapping information, we can infer the
addresses of modules such as raid, drm, and libahci in
Linux, and locating the drivers such as NTFS, pci, and
msrpc in Windows.
The DrK attack uses the size information of executable
and non-executable pages of the module as a signature.
Figure 7 shows the list of module mappings in Linux. In
Linux, module mapping always start with a code area
(.text), which has executable permission. Subsequently,
areas such as .bss, .rodata with NX permission are
mapped. Note that the size of any single module is likely
different from that of the others. We set the size of X/NX
areas as the signature (e.g., X:0x2000 and NX:0x3000 for
i2c_hid module).
Among a total of 80 modules loaded in Ubuntu 16.04
LTS, we can determine the exact location of 29 modules
that have a unique size signature. However, the method
cannot detect modules with the same size. For example,
for the worst case, there were 27 modules with minimal
size which have a one page (0x1000) of X area and three
pages (0x3000) of NX area. Despite such a limitation,
this module detection can still be useful in the attacks
because the attacker can reduce the uncertainty of the
address (from targeting 80 modules to only targeting 27
modules in the worst case).
For Windows, we can uniquely detect 97 drivers among
a total of 141 drivers using size-based driver signatures.
Since the kernel drivers of Windows have discardable
mappings after initialization, we cannot directly use the
same signature for detecting Linux kernel modules. In-
stead, we use two sizes that are unchanging during the
lifetime of the module to build the signature: 1) the total
size of the driver memory region (from start of the driver,
but before the start address of the next mapped driver),
and the size of first contiguous executable region. On the
experiment, we observed 97 unique size signatures for
detecting the driver addresses.
A prior work [28] tried a similar method for detecting
kernel drivers on Windows. However, since the work can-
not distinguish X pages from NX pages, their detection
result is far smaller (21) than ours (97). Detection of
X/NX gives much better precision for determining the lo-
cation of the drivers, as it provides unique size signatures
for the drivers.
4.3 DrK in Virtualized Environment
To test the feasibility of the DrK attack in a cloud envi-
ronment, we carried out the attack on Linux running in a
hardware virtualized environment, i.e., HVM, under the
Xen hypervisor 4.4, to check whether the attack can be
9
Iterations
# incorrect
Accuracy (%)
2
239
92.22
5
70
97.72
20
18
99.41
50
8
99.74
100
0
100.0
Table 5: Achieved accuracy over the number of iterations for the
modules pages (3,072 pages in total) of Linux Kernel 4.4.0 on
Haswell (Xeon E3-1271 v3) processor. Probing the address with
more iterations gives better accuracy. For measuring with only 2
iterations (minimum iterations to measure TLB cache hit), 239
mapped pages were detected as unmapped pages, which renders
92.22% of accuracy. With more iterations, such as 20, 50, and
100, the number of incorrectly measured pages decreases as
18, 8, and 0, respectively. With 100 iterations, the DrK attack
achieves perfect accuracy on breaking KASLR.
launched within the VM. The setup emulates that of an
Amazon X1 instance [2]3, which uses Xen hypervisor
on the TSX-enabled Haswell processor. We did the same
experiment with the test that we did on the Linux that runs
on a bare-metal machine, in two (Skylake and Haswell)
systems.
Results. The DrK attack can detect 99.99%–100% of
kernel mappings in a virtualized environment. The ac-
curacy is slightly lower than the bare-metal result. We
believe that the difference in accuracy is caused by the
factors that can affect TSX execution, such as virtual
interrupts generated by hypervisor (e.g., VMEXIT).
Interestingly, we observed that a Skylake laptop proces-
sor (Core i5-6300HQ) with Xen resulted in timings that
were very different from other environments (Table 4).
We believe that this was due to speed throttling, i.e., Intel
Speed Step and Turbo Boost, because its clock rate was
lower than the same processor in a bare-metal environ-
ment (2.3 GHz versus 3.0 GHz). We will cover more
issues on clock speed in §4.4.
4.4 Controlling the Noise
Since DrK is a cache-based timing channel attack, it is
not free from the noise of the channel. On determining
page mapping status and executable status, we used the
minimum cycle observed when probing the pages as the
threshold. However, occasionally, we observed measure-
ment errors possibly due to hardware characteristics (e.g.,
cache coherence traffic and cache conflict).
We minimized such measurement errors by probing a
certain address multiple times. Table 5 shows how the
accuracy changes by the number of iterations. On the iter-
ation 2, 239 mapped pages were detected as unmapped,
among 3,072 pages in the scanned area (92.22% of ac-
curacy). However, as the number of iterations increased
such as 5, 20, and 50, the number of mis-detected pages
was drastically reduced, 70, 18, and 8, respectively. Fi-
3 Although Amazon X1 instance is up on the day of May 18th, 2016,
the instance is available upon request. We tried to request access for the
evaluation, but could not get the access on time.
nally, probing with 100 iteration, the accuracy reached
100%.
Note that the number of iterations to achieve the perfect
accuracy depends on the environment, such as processor
generation or software settings for generating interrupts
that is asynchronously handled in TSX. For example,
unlike Haswell that needed 100 iterations to get the 100%
accuracy on Linux, Skylake only required 10 iterations
to achieve the perfect accuracy (see the second row on
Table 4). For the virtualized environment, the measured
accuracy is slightly lower than the bare-metal running
with the same number (at 100) of iterations (100% vs
99.95%). However, still, we can manage the noise by
increasing the number of iterations: e.g., 500 iterations
achieved 99.99%–100% accuracy.
Dynamic frequency scaling (i.e., Intel Speed Step or
Intel Turbo Boost) also affects the timings. Since we use
the number of clock cycles (using rdtscp) to measure
timing, a change in the clock frequency would affect the
timing measurements [31, §17.14].
We solved this problem by making the processor busy.
We empirically observed that running two dummy loops
consuming 100% of CPU time was enough to maximize
the processor clock rate, and achieved the perfect accuracy
in this condition. This also implies that the DrK attack
works well with processors with high workload; i.e., when
the processor runs jobs other than the attacks.
4.5 Comparison with the Prior Attack
We summarize the evaluation result of the DrK attack by
comparing it with the prior attack presented by Hund et
al. [28].
Speed and accuracy. The DrK attack took about 0.5
seconds in Linux and about 5 seconds in Windows to
achieve 100% accuracy of detecting the full mapping
information of kernel and driver space. In contrast, the
prior attack requires 17 seconds to obtain 96% accuracy.
Noise of the channel.
Compare to the prior attack,
DrK is strong against measurement noise. As shown
in Figure 6, the timing difference between mapped and
unmapped pages was over 10% in DrK. In contrast, in
the prior attack, the timing difference between mapped
and unmapped pages was only around 1% (30–50 cycles
from 5,000 cycle), which can easily fluctuate.
Executable page detection.
Unlike the prior at-
tack, DrK can distinguish executable pages from non-
executable pages. Our new finding is to demonstrate an
accurate way of distinguishing executable pages from the
mapped pages, which allows an attacker to effectively
break KASLR, especially when detecting the exact loca-
tion of kernel drivers.
Module detection. As mentioned in §4.2.3, DrK de-
tected a larger number of drivers (97) than the prior attack
10
Trace point
READ
M
U
X
JUMP
NX
U
3,021,847 3,020,043 3,018,191 3,018,857 3,025,769
dTLB-loads
109
dTLB-load-misses
272
iTLB-loads
12 1,000,175
iTLB-load-misses
1,391
L1-icache-load-misses
L1-dcache-loads
3,021,885 3,020,081 3,018,229 3,018,895 3,025,807
L1-dcache-load-misses 1,000,856 1,000,787 1,002,456 1,000,603 1,002,539
84 2,000,086
425
267
6
6
1,027
1,092
64
91
590 1,000,247
31
1,157
1,190
Table 6: The number of TLB and cache loads and misses when
DrK probes single kernel memory page 1,000,000 times, mea-
sured by hardware performance counters. Probing methods are