### 4.3 Reversals and Error Correction

The primary challenge in this algorithm is handling malformed segments of the trace. Due to the internal structure of the motors, there are only two valid firing orders: one for forward movement and one for backward movement. The motor controller switches between these orders to execute a reversal (see Section 3 for details). Figure 9 illustrates this behavior.

**Figure 9:** A reversal captured in the trace. Peaks are annotated as A, B, C, or D to indicate the firing order. Note how the order reverses at 130.41s.

As discussed in Section 3, the trace contains both false-negative and false-positive peaks, which often occur around reversals, dwells, or during periods of inactivity. These invalid peaks can create an incorrect firing order, making it impossible to accurately reconstruct motion. If a section is recognized as correct but not accurate to the actual motor behavior, the reconstructed motion will drift, accumulating error based on the difference between the reconstruction and reality.

To correct these errors, we first segment the trace into sections with valid firing orders and sections with invalid firing orders. Valid sections are processed according to the normal logic of motor operation. For invalid sections, contextual information is gathered and saved alongside the section in a list. This list is then processed by a heuristic solver, which attempts to find the best weighted reconstruction for each section by adding and deleting peaks. The best solutions are applied to the trace.

### 4.4 Segmentation into Good and Bad Sections

Once all peaks are recognized, our approach identifies the firing order on each axis. Initial synchronization of the traces occurs on a long, linear, multiaxial move immediately before the print. This ensures a long enough section of consistent movement on every axis to dynamically recognize the firing order.

**Figure 10:** Pseudocode for identifying the firing order. Identifying the firing order from the data, rather than using a hard-coded order, makes the algorithm independent of the physical instrumentation, such as which wire is clamped by which probe. The firing order for an axis is "locked in" after the first 16 consistent peaks are detected and is maintained for the remainder of the print, though it may be inverted during reversals.

Next, the algorithm scans the list of peaks, comparing each in sequence to the firing order. It recognizes three cases: valid forward motion, valid reverse motion, and invalid firing orders. **Figure 11** outlines the process. If the last peak to fire was, for example, B, the next peak can be valid if it is on phases A or C. One phase represents forward motion, the other represents a reversal, depending on the history of the firing order.

When two nonadjacent peaks are processed in series, the algorithm treats this as the beginning of an invalid section. It then searches for the end of the section, which occurs when any valid sequence is detected for three consecutive peaks. Three peaks are necessary because the correction process (handled in the next stage) can require changes up to three peaks after the last invalid section. We achieve this by circularly shifting the firing order so that the current peakâ€™s phase is in the starting position, then compare the following peaks to the forward and reverse phases of the new firing order. Because there might be reversals in this sequence of three peaks, it may be necessary to invert the firing order again on the second valid peak.

When the end of a bad section is detected, the algorithm saves the endpoints and contextual information of the section to a list. The contextual information includes whether the firing order reversed during the section, the timestamps at the start and end of the section, and the axis on which the section occurred. The algorithm then resumes normal behavior and continues detecting reversals until all peaks in the axis are processed. The result is a partially annotated list of peaks and a list of invalid sections. This process is repeated for each axis.

### 4.5 Heuristic Correction of Bad Sections

The invalid sections identified in the previous stage are processed individually in this stage. We recognize two forms of error: missing peaks and duplicate peaks. Missing peaks are flagged whenever two nonadjacent phases are detected in sequence; duplicate peaks are flagged when the same phase is detected twice in a row. Badly ordered sections can contain any number of badly ordered pairs, and we have observed up to 20 in a single section in our test set.

Each badly ordered pair has multiple potential corrections: 4 for missing peaks and 3 for duplicate peaks. This produces a large problem space, and the available data does not clearly identify the correct solution. Therefore, we have developed a heuristic approach to search the problem space and identify the solution that best fits a defined set of metrics.

Correcting a badly ordered section involves either deleting the first or second peak of a badly ordered pair or inserting a new peak between them. The inserted peak can be on either the forward phase or the reverse phase. These four changes represent all the corrections the heuristic solver considers. All four apply to missing peak pairs. For duplicate peak pairs, deleting the first and deleting the second peak are functionally the same choice with respect to the firing order. Therefore, duplicate peak pairs have only the three solutions of deletion, insertion of a forward peak, and insertion of a reverse peak. This is illustrated in **Table 1**.

**Table 1:** Solutions considered for badly ordered pairs and their effects on firing order. The beginning ABCD exemplifies a possible firing order prior to the badly ordered pair (indicated in red and underlined).

| Detected | Corrected Solution |
|----------|--------------------|
| ABCDAC   | ABCDABC            |
|          | Insert Forward Peak |
| ABCDADC  | ABCDADC            |
|          | Insert Reverse Peak |
| ABCDC    | ABCDA              |
|          | Delete First Peak   |
| ABCDA    | ABCDA              |
|          | Delete Second Peak  |
| ABCDAA   | ABCDABA            |
|          | Insert Forward Peak |
| ABCDADA  | ABCDADA            |
|          | Insert Reverse Peak |
| ABCDA    | ABCDA              |
|          | Delete Peak         |

The solutions themselves can be compared on the quality of the peaks inserted or deleted. We define a cost function for each solution that considers the height, prominence, proximity to other peaks, and several other characteristics of the peaks to insert or delete. The insertion cost functions operate on the segment of a trace between the badly ordered peaks, searching for the best point to insert a new peak on the target phase. The deletion functions evaluate the first and second peaks of the badly ordered pair to determine which is more likely to be a false positive. Both use a relatively complex set of metrics and weightings, which we tuned by gradually identifying error cases in our test set and creating general metrics to correct them.

In addition to the heuristic costs for individual pairs, the solution must consider the entire section and its context to ensure the firing order is still valid. For example, consider the sequence ABCDACD. The badly ordered pair, AC, is identified as a missing peak pair and can be repaired by any of our four solutions. However, in the context of the surrounding sequence, different choices could produce an additional reversal, multiple reversals, or none at all. Based on the surrounding sequences, a badly ordered section should contain either an even or odd number of reversals; this is taken into account by the solver, which discards solutions that do not satisfy this constraint.

Pseudocode summarizing the heuristic process is presented in **Figures 12 and 13**. The solver consists of two portions: a non-recursive container and a recursive search function. The non-recursive container iterates over all badly ordered sections for each axis. The recursive search explores the solution space for each badly ordered section, eventually returning the solution with the lowest cost. The container then applies this solution to the trace, annotating the appropriate peaks with reversals. After the list of badly ordered sections is exhausted, the trace is fully annotated and can be used to produce a point cloud reconstruction of the 3D printed object.

**Figure 12:** Heuristic Solver Container.

```python
def badSectionSolverContainer(badSections):
    for section in badSections:
        solutions = []
        badPeakIndex = 0
        while badPeakIndex < len(section):
            if missingPeakError(badPeakIndex):
                solutions.append(missingSolutions(badPeakIndex))
            elif duplicatePeakError(badPeakIndex):
                solutions.append(duplicateSolutions(badPeakIndex))
            badPeakIndex += 1
        bestSolution, bestCost = searchSolutions(solutions, 0)
        applySolutionToTrace(bestSolution)
```

**Figure 13:** Recursive Search Function.

```python
def searchSolutions(solutions, cost):
    if len(solutions) == 0:
        return None, float('inf')
    # Implement the search logic here
```

This structured approach ensures that the trace is accurately reconstructed, even in the presence of errors and malformations.