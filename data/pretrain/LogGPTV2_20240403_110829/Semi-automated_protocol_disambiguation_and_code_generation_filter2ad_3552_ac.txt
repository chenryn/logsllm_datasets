example, ICMP specifies what operations to perform on IP
header fields (e.g., sentence G in §4), and does not specify but
assumes an implementation of one’s complement. Similarly,
standards descriptions do not explicitly specify what abstract
functionality they require of the underlying operating
system (e.g., the ability to read interface addresses).
To address this challenge, sage requires a pre-defined
static framework that provides such functionality along with
an API to access and manipulate headers of other protocols,
and to interface with the OS. sage’s generated code (dis-
cussed below) uses the static framework. The framework may
either contain a complete implementation of the protocols it
abstracts, or, more likely, invoke existing implementations
of these protocols and services provided by the OS.
Logical Forms as an Intermediate Representation. The
parser generates an LF to represent a sentence. For code
generation, these sentences (or fragments thereof) fall into
two categories: actionable and non-actionable sentences. Ac-
tionable sentences result in executable code: they describe
value assignments to fields, operations on headers, and com-
putations (e.g., checksum). Non-actionable sentences do not
specify executable code, but specify a future intent such as
“The checksum may be replaced in the future” or behavior
intended for other protocols such as “If a higher level protocol
uses port numbers, port numbers are assumed to be in the first
64 data bits of the original datagram’s data”. Humans may
intervene to identify non-actionable sentences; sage tags
their logical forms with a special predicate @AdvComment.
The second challenge is that parsers generate logical forms
for individual sentences, but the ordering of code generated
from these logical forms is not usually explicitly specified.
Often the order in which sentences occur matches the order
in which to generate code for those sentences. For example,
an RFC specifies how to set field values, and it is safe to
generate code for these fields in the order in which they
appear. There are, however, exceptions to this. Consider the
sentence in Figure 2, which specifies that, when computing
the checksum, the checksum field must be zero. This sentence
occurs in the RFC after the sentence that describes how
to compute checksum, but its executable code must occur
before. To address this, sage contains a lexical entry that
identifies, and appropriately tags (using a special predicate
@AdvBefore), sentences that describe such advice (as used
in functional and aspect-oriented languages).4
5.2 Logical Forms to Code
Pre-processing and contextual information. The pro-
cess of converting logical forms to code is multi-stage, as
shown in the right block of Figure 1. Code generation begins
with pre-processing actions. First, sage filters out logical
forms with the @AdvComment predicate. Then, it prepares
logical forms for code conversion by adding contextual in-
formation. A logical form does not, by itself, have sufficient
information to auto-generate code. For example, from a logi-
cal form that says ’Set (message) type to 3’ (@Is(type, 3)) it
is not clear what “type” means and must be inferred from
the context in which that sentence occurs. In RFCs, this con-
text is usually implicit from the document structure (the
section, paragraph heading, or indentation of text). sage
auto-generates a context dictionary for each logical form (or
sentence) to aid code generation (Table 4).
In addition to this dynamic context, sage also has a pre-
defined static context dictionary that encapsulates informa-
tion in the static context. This contains field names used
4Advice covers statements associated with a function that must be executed
before, after, or instead of that function. Here, the checksum must be set to
zero before computing the checksum.
7
LF @Is(’type’, ’3’)
{"protocol": "ICMP", "message": "Destination Unreachable
Message", "field": "type", "role": ""}
hdr->type = 3;
context
code
Table 4: Logical form with context and resulting code.
in lower-level protocols (e.g., the table maps terms source
and destination addresses to corresponding fields in the IP
header, or the term “one’s complement sum” to a function
that implements that term). During code generation, sage
first searches the dynamic context, then the static context.
Code generation. After preprocessing, sage generates code
for a logical form using a post-order traversal of the single
logical form obtained after disambiguation. For each pred-
icate, sage uses the context to convert the predicate to a
code snippet; concatenating these code snippets results in
executable code for the logical form.
sage then concatenates code for all the logical forms in
a message into a packet handling function. In general, for a
given message, it is important to distinguish between code
executed at the sender versus at the receiver, and to generate
two functions, one at the sender and one at the receiver.
Whether a logical form applies to the sender or the receiver
is also encoded in the context dictionary (Table 4). Also, sage
uses the context to generate unique names for the function,
based on the protocol, the message type, and the role, all of
which it obtains from the context dictionaries.
Finally, sage processes advice at this stage to decide on
the order of the generated executable code. In its current im-
plementation, it only supports @AdvBefore, which inserts
code before the invocation of a function.
Iterative discovery of non-actionable sentences. Non-
actionable sentences are those for which sage should not
generate code. Rather than assume that a human annotates
each RFC with such sentences before sage can execute, sage
provides support for iterative discovery of such sentences,
using the observation that a non-actionable sentence will usu-
ally result in a failure during code generation. So, to discover
such sentences, a user runs the RFC through sage repeat-
edly. When it fails to generate code for a sentence, it alerts
the user to confirm whether this was a non-actionable sen-
tence or not, and annotates the RFC accordingly. During
subsequent passes, it tags the sentence’s logical forms with
@AdvComment, which the code generator ignores.
In ICMP, for example, there are 35 such sentences. Among
RFCs we evaluated, sage can automatically tag such code
generation failures as @AdvComment without human inter-
vention (i.e., there were no cases of an actionable sentence
that failed code generation once we defined the context).
6 EVALUATION
Next we quantify sage’s ability to find spec ambiguities, its
generality across RFCs, and the importance of disambigua-
tion and of our parsing and code generation extensions.
6.1 Methodology
Implementation. sage includes a networking dictionary,
new CCG-parsable lexicon entries, a set of inconsistency
checks, and LF-to-code predicate handler functions. We used
the index of [41] to create a dictionary of about 400 terms.
sage adds 71 lexical entries to an nltk-based CCG parser [48].
Overall, sage consists of 7,128 lines of code.
To winnow ambiguous logical forms for ICMP (§4.2), we
defined 32 type checks, 7 argument ordering checks, 4 predi-
cate ordering checks, and 1 distributivity check. Argument
ordering and predicate ordering checks maintain a blocklist.
Type checks use an allowlist and are thus the most prevalent.
The distributivity check has a single implicit rule. For code
generation, we defined 25 predicate handler functions to
convert LFs to code snippets.
Test Scenarios. First we examine the ICMP RFC, which
defines eight ICMP message types.5 Like the student assign-
ments we analyzed earlier, we generated code for each ICMP
message type. To test this for each message, as with the stu-
dent projects, the client sends test messages to the router
which then responds with the appropriate ICMP message.
For each scenario, we captured both sender and receiver
packets and verified correctness with tcpdump. We include
details of each scenario in the Appendix. To demonstrate the
generality of sage, we also evaluated IGMP, NTP, and BFD.
6.2 End-to-end Evaluation
Next we verify that ICMP code generated by sage produces
packets that interoperate correctly with Linux tools.
Packet capture based verification. In the first experiment,
we examined the packet emitted by a sage-generated ICMP
implementation with tcpdump [73], to verify that tcpdump
can read packet contents correctly without warnings or er-
rors. Specifically, for each message type, for both sender and
receiver side, we use the static framework in sage-generated
code to generate and store the packet in a pcap file and verify
it using tcpdump. tcpdump output lists packet types (e.g., an
IP packet with a time-exceeded ICMP message) and will warn
if a packet of truncated or corrupted packets. In all of our
5ICMP message types include destination unreachable, time exceeded, pa-
rameter problem, source quench, redirect, echo/echo reply, timestamp/-
timestamp reply, and information request/reply.
8
experiments we found that sage generated code produces
correct packets with no warnings or errors.
Interoperation with existing tools. Here we test whether
a sage-generated ICMP implementation interoperates with
tools like ping and traceroute. To do so, we integrated our
static framework code and the sage-generated code into a
Mininet-based framework used for the course described in
§2. With this framework, we verified, with four Linux com-
mands (testing echo, destination unreachable, time exceeded,
and traceroute behavior), that a sage-generated receiver or
router correctly processes echo request packets sent by ping
and TTL-limited data packets or packets to non-existent des-
tinations sent by traceroute, and its responses are correctly
interpreted by those programs. For all these commands, the
generated code interoperates correctly with these tools.
6.3 Exploring Generality: IGMP and NTP
To understand the degree to which sage generalizes to other
protocols, we ran it on two other protocols: parts of IGMP v1
as specified in RFC 1112 [18] and NTP [53]. In §7, we discuss
what it will take to extend sage to completely parse these
RFCs and generalize it to a larger class of protocols.
IGMP. In RFC 1112 [18], we parsed the packet header de-
scription in Appendix I of the RFC. To do this, we added to
sage 8 lexical entries (beyond the 71 we had added for ICMP
entries), 4 predicate function handlers (from 21 for ICMP),
and 1 predicate ordering check (from 7 for ICMP). For IGMP,
sage generates the sending of host membership and query
message. We also verified interoperability of the generated
code. In our test, our generated code sends a host member-
ship query to a commodity switch. We verified, using packet
captures, that the switch’s response is correct, indicating
that it interoperates with the sender code.
NTP. For NTP [53], we parsed Appendices A and B: these
describe, respectively, how to encapsulate NTP messages
in UDP, and the NTP packet header format and field de-
scriptions. To parse these, we added only 5 additional lexical
entries and 1 predicate ordering check beyond what we al-
ready had for IGMP and NTP.
6.4 Exploring Generality: BFD
Thus far, we have discussed how sage supports headers, field
descriptions, constraints, and basic behaviors. We now ex-
plore applying sage to BFD [34], a recent protocol whose
spec contains sentences that describe how to initiate/up-
date state variables. We have use sage to parse such state
management sentences (§6.8.6 in RFC 5880).
BFD Introduction. BFD is used to detect faults between
two nodes. Each node maintains multiple state variables
for both protocol and connection state. Connection state is
represented by a 3-state machine and represents the status
(e.g., established, being established, or being torn down) of
the session between nodes. Protocol state variables are used
to track local and remote configuration.6
State Management Dictionary. A state management sen-
tence describes how to use or modify protocol or connection
state in terms of state management variables. For example,
bfd.SessionState is a connection state variable; Up is a permit-
ted value. We extend our term dictionary to include these
state variables and values as noun phrases.
Type
Example
Category Example
Count
More than
1 LF
0 LF
Imprecise
sentence
To form an echo reply message, the
source and destination addresses are
simply reversed, the type code changed
to 0, and the checksum recomputed.
Address of the gateway to which traffic
for the network specified in the internet
destination network field of the original
datagram’s data should be sent.
If code = 0, an identifier to aid in match-
ing echos and replies, may be zero.
4
1
6
Table 6: Examples of categorized rewritten text.
e
d
o
c
d
e
t
s
e
N
g
n
i
s
a
r
h
p
e
R
a
n
e
t
t
i
r
i
g
i
r
O
l If the Your Discriminator field is nonzero, it MUST be used
to select the session with which this BFD packet is associ-
ated. If no session is found, the packet MUST be discarded.
n If the Your Discriminator field is nonzero, it MUST be used
to select the session with which this BFD packet is associ-
ated. If the Your Discriminator field is nonzero and no session
is found, the packet MUST be discarded.
If bfd.RemoteDemandMode is 1, bfd.SessionState is Up, and
bfd.RemoteSessionState is Up, Demand mode is active on
the remote system and the local system MUST cease the
periodic transmission of BFD Control packets.
l
a
n
i
g
i
r
O
w
e
R
e
t
t
i
r
n If bfd.RemoteDemandMode is 1, bfd.SessionState is Up, and
bfd.RemoteSessionState is Up, the local system MUST cease
the periodic transmission of BFD Control packets.
w
e
R
Table 5: Challenging BFD state management sentences.
Limitations and More Challenges. When we performed
CCG parsing and code generation on state management
sentences, we found two types of sentences that could not
be parsed correctly (Table 5). Both of these sentences reveal
limitations in the underlying NLP approach we use.
The CCG parser treats each sentence independently, but
the first example in Table 5 illustrates dependencies across
sentences. Specifically, sage must infer that the reference
to no session in the second sentence must be matched to the
session in the first sentence. This is an instance of the general