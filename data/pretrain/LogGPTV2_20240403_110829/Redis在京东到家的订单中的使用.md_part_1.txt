Redis在京东到家的订单中的使用
发表于 2017-06-30 | 分类于 架构
背景
Redis作为一款性能优异的内存数据库，在互联网公司有着多种应用场景，下面介绍下Redis在京东到家的订单列表中的使用场景。主要从以下几
个方面来介绍：
1. 订单列表在Redis中的存储结构
2. Redis和DB数据一致性保证
3. Redis中的分布式锁
4. 缓存防穿透和雪崩
订单列表在Redis中的存储结构
订单列表数据在缓存中，是以用户的唯一标识作为键，以一个按下单时间倒序的有序集合为值进行存储的。大家都知道Redis的sorted set
中每个元素都有一个分数，Redis就是根据这个分数排序的。订单有序集合中的每个元素是将时间毫秒数+订单号最后3位作为分数进行排
序的。为什么不只用毫秒数作为分数呢？因为我们的下单时间只精确到秒，如果不加订单号最后3位，若同一秒有两个或两个以上订单时，
排序分数就会一样，从而导致根据分数从缓存查询订单时不能保证唯一性。而我们的订单号的生成规则可以保证同一秒内的订单号的最后3
位肯定不一样，从而可以解决上述问题。
有必要将一个用户的所有订单都放入缓存吗？针对用户订单是没有必要的，因为很少有用户去看很久以前的历史订单。真正的热点数据其
实也就是最近下过的一些订单，所以，为了节省内存空间，只需要存放一个用户最近下过的N条订单就行了，这个N，相当于一个阀值，超
过了这个阀值，再从数据库中查询订单数据，当然，这部分查库操作已经是很小概率的操作了。
Redis和DB数据一致性保证
只要有多份数据，就会涉及到数据一致性的问题。Redis和数据库的数据一致性，也是必然要面对的问题。我们这边的订单数据是先更新数据
库，数据库更新成功后，再更新缓存，若数据库操作成功，缓存操作失败了，就出现了数据不一致的情况。保证数据一致性我们前后使用过两种
方式：
方式一：
1. 循环5次更新缓存操作，直到更新成功退出循环，这一步主要能减小由于网络瞬间抖动导致的更新缓存失败的概率，对于缓存接口长时间不
可用，靠循环调用更新接口是不能补救接口调用失败的。
2. 如果循环5次还没有更新成功，就通过worker去定时扫描出数据库的数据，去和缓存中的数据进行比较，对缓存中的状态不正确的数据进
行纠正。
方式二：
1. 跟方式一的第一步操作一样
2. 若循环更新5次仍不成功，则发一个缓存更新失败的mq，通过消费mq去更新缓存，会比通过定时任务扫描更及时，也不会有扫库的耗时操
作。此方式也是我们现在使用的方式。
代码示例：
f1o r (int i = 0; i >jdCacheCloud.zAdd exception：", logSid, e);
8 if (i == 4) sendUpOrderCacheMQ(orderListVO, logSid); // 如果循环5次，仍添加缓存失败，发送MQ，通过MQ继续更新缓存
9 }
1}0
Redis中的分布式锁
分布式锁常用的实现方式有Redis和zookeeper，本文主要介绍下Redis的分布式锁，然后再介绍下我们使用分布式锁的场景。
Redis分布式锁在2.6.12版本之后的实现方式比较简单，只需要使用一个命令即可：
S1E T key value [EX seconds] [NX]
其中，可选参数EX seconds ：设置键的过期时间为 seconds 秒；NX ：只在键不存在时，才对键进行设置操作。
这个命令相当于2.6.12之前的setNx和expire两个命令的原子操作命令。Redis的JAVA客户端分布式锁实现示例代码：
2.6.12版本之后：
p1u blic booelan getLock(String lockKey, String lockValue){
2 if(shardedXCommands.set(key,lockValue,10,TimeUnit.SECONDS,false)) {
3 return true;
4 }
5 return false;
}6
2.6.12版本之前，由于没有一个上述的原子命令，需要一些命令组合实现，但不能简单的使用setNx、expire这两个命令，因为如果setNx成功，
expire命令失败时，恰好执行删除lockKey的也执行失败，key就永远不会过期，就会出现死锁问题，如：
p1u blic booelan getLock(String lockKey, String lockValue) {
2 boolean lock = false;
3 try{
4 lock = shardedXCommands.setNX(lockKey, lockValue);
5 shardedXCommands.expire(lockKey, 5); //（1）这个命令执行失败
6 } catch(Exception e) {
7 }
8
9 return lock;
1}0
1p1u blic void A(){
1 2 try{
1 3 if(getLock("订单号", "lockValue")) {
1 4 // doSomething
1 5 }
1 6 } finally {
1 7 unLock("订单号");// (2)系统崩溃，解锁失败
1 8 }
1}9
第(1)步设置lockKey失效时间失败，lockKey在缓存永久保存。
第(2)步没来得及释放锁时，系统崩溃，finally块没来得及执行，最终导致锁永远在缓存中，所有其他线程再也获取不到锁。所以不能单纯的依靠
设置锁的失效时间来防止释放锁失败，需要通过下列方法防止这种情况，但比较繁琐，不过2.6.12版本之前也必须通过如下方法才更为妥当：
p1u blic booelan getLock(String lockKey) {
2 boolean lock = false;
3 while (!lock) {
4 String expireTime = String.valueOf(System.currentTimeMillis() + 5000);
5 // (1)第一个获得锁的线程，将lockKey的值设置为当前时间+5000毫秒，后面会判断，如果5秒之后，获得锁的线程还没有执行完，会忽略之前获得锁的线程，而直接获取锁，所以这个时间需要根据自己业务的执行时间来设置长短。
6 lock = shardedXCommands.setNX(lockKey, expireTime);
7 if (lock) { // 已经获取了这个锁 直接返回已经获得锁的标识
8 return lock;
9 }
1 0 // 没获得锁的线程可以执行到这里：从Redis获取老的时间戳
1 1 String oldTimeStr = shardedXCommands.get(lockKey);
1 2 if (oldTimeStr != null && !"".equals(oldTimeStr.trim())) {