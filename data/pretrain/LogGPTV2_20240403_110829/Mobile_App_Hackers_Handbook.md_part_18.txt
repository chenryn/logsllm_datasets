NSLog(n);
[pool drain];
return 0;
}
Popping enough data to reach the user-controlled part of stack memory, you can see how the %@ specifier causes
a crash when dereferencing the pointer:
(gdb) r bbbbbbbbbbbbbbbb%x%x%x%x%x%x%x%%x%x%x%x%x%x%x%%x%x%x%x%x%x%x%x
%x%x%x%x%x%x%%x%x%x%x%x%x%x%%x%x%x%x%x%x%x%%x%x%x%x%x%x%x%%x%x%x%x%x%x
%x%%x%x%x%x%x%x%x%x%x%x%@
Starting program: /private/var/root/fmtstrtest
bbbbbbbbbbbbbbbb%x%x%x%x%x%x%x%%x%x%x%x%x%x%x%%x%x%x%x%x%x%x%%x%x%x%x
%x%x%x%%x%x%x%x%x%x%x%%x%x%x%x%x%x%x%x%x%x%x%x%x%x%%x%x%x%x%x%x%x%%x
%x%x%x%x%x%x%x%x%x%@
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x62626262
0x320f8fb6 in ?? ()
(gdb)
Similarly, in Swift, insecure code that ultimately leads to a format string being evaluated such as,
var str = "AAAA%x%x%x%x%x%x%x%x"
NSLog(str)
may lead to the following:
2014-11-10 20:53:58.245 fmtstrtest[22384:2258322] AAAA00000025852504
To prevent format string vulnerabilities, a secure implementation would include a format specifier, where
NSLog(str) would become NSLog("%@", str). Swift also introduces the concept of interpolation, which allows
you to create a string and easily populate it with other format types. Consider the following example that can be
used to create a new string (see
https://developer.apple.com/library/mac/documentation/swift/conceptual/swift_programming_language/StringsAndCharacters.html
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
Interpolation allows you to populate new types into a string by wrapping them in parentheses and prefixing
them with a backslash. However, you should still use a format specifier if it is later passed into a method that
requires one.
However, in most situations Objective-C and Swift will use the heap for storing objects and, therefore, in
practice, exploitation is unlikely.
Object Use-After-Free
Object use-after-free vulnerabilities occur when a reference to an object still exists after the object has been
freed. If this freed memory is reused and an attacker is able to influence the reused memory, in some
circumstances it may be possible to cause arbitrary code execution. Exploitation of use-after-free vulnerabilities
in Objective-C is documented in-depth within the Phrack article by nemo
(http://www.phrack.org/issues.html?issue=66&id=4) and is recommended reading for those looking for a
greater understanding of the topic. To demonstrate this type of exploitation at a high-level, consider the
following example:
MAHH *mahh = [[MAHH alloc] init];
[mahh release];
[mahh echo: @"MAHH example!"];
In the previous example an instance of the MAHH class is first created and then freed using release. However,
after the object has been released the echo method is called on the previously freed pointer. In this instance a
crash is unlikely, because the memory will not have been corrupted through reallocation or deconstruction.
However, consider an example whereby the heap has been sprayed with user-controlled data:
MAHH *mahh = [[MAHH alloc] init];
[mahh release];
for(int i=0; i<50000; i++) {
char *buf = strdup(argv[1]);
}
[mdsec echo: @"MAHH example!"];
Running this example causes an access violation when the echo method is called due to the reuse of heap
memory used by the previously freed object instance:
(gdb) r AAAA
Starting program: /private/var/root/objuse AAAA
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x41414149
0x320f8fbc in ?? ()
(gdb)
Since iOS 5, applications have had the option to use Automatic Reference Counting (ARC), which passes the
responsibility of memory management from the developer to the compiler and is required for applications that
use Swift. Consequently for applications using ARC, there is likely to be a significant reduction in the number of
use-after-free issues, because the developer no longer bears the responsibility for releasing or retaining objects.
For further details on ARC refer to Chapter 2.
Other Native Code Implementation Issues
Discovering native code programming vulnerabilities is a meaty topic and far beyond the scope of this book.
However, for the moment it is sufficient to understand that when intermingled with C and C++, iOS
applications can be affected by the traditional native code vulnerabilities such as buffer overflows, underflows,
signedness issues, and the like. To learn more about these types of issues many resources are available;
however, The Art of Software Security Assessment (ISBN-13: 978-0321444424; Dowd et al, Addison-Wesley
Professional) is particularly comprehensive.
Summary
In this chapter you learned about the common categories of vulnerability to which iOS applications can be
susceptible. Many of these issues arise by virtue of the iOS SDK APIs and may not be well known by developers,
and as such commonly exist in real-world applications.
Many iOS applications are prone to data leakage, which can present a problem for security-conscious
applications. Data leaks commonly occur as a result of an application's using features of the platform such as
WebViews, which are often prone to caching response data and cookies, both of which can have a negative
impact on the security of an application.
How applications handle personal and privacy-related data is also an important aspect of mobile security and
should form a key portion of any application review. In particular, the device should not log or disclose any
information pertaining to the user, the user's device, or location because doing so may turn the application into
a tracking device.
Although occurring less frequently than in other types of applications, such as server-side services, memory
corruption can occur in iOS applications. In practice, most memory corruption vulnerabilities in a third-party
application will result in no more than a Denial of Service unless chained with other vulnerabilities.
CHAPTER 5
Writing Secure iOS Applications
So far you have learned the various techniques that you can use to attack and exploit vulnerabilities within iOS
applications. This chapter progresses from the offensive aspects of mobile app security to documenting the ways
in which you can secure an application. Understanding the defensive strategies that an application can employ is
essential knowledge for any security professional or developer; it not only helps you offer remedial and
preventative advice but understanding the intricacies of defense can help you to become a better tester.
This chapter covers the ways in which you can protect the data in your application, not only at rest but also in
transit. It also details how you can avoid some of the injection attacks that were detailed in Chapter 3, as well as
how you begin to build defenses in to your application to slow down your adversary and hopefully make them
consider softer targets.
Protecting Data in Your Application
In most mobile applications the data is the thing that is of most interest to an attacker. As such, considering
how your data is received; processed; transmitted to other components, hosts, and ultimately destroyed is
important. This section details how to protect data within your application and reduce the likelihood of it being
intercepted or compromised by an attacker.
General Design Principles
Prior to implementation, considering how your desired functionality may impact the security of your application
is important. With a little thought and a carefully constructed design plan, you can avoid or mitigate many
common vulnerabilities. Following are several factors that you might want to consider when designing your
application:
How data is stored in the application—It goes without saying that the best approach to data storage is to
avoid storing data at all. Unfortunately, this is not feasible for many applications, particularly those that need
to operate in an “offline” mode. As part of the design process you should always consider what data your
application handles and how you can best reduce the amount of data that is persistently stored.
Furthermore, how and where the data is stored is an important consideration. For example, storing sensitive
data in NSDefaults will lead to its quickly being identified by an attacker, whereas data being stored using
steganography and embedded within an image file used by your application is likely to be discovered only by
a significant amount of reverse engineering. In addition to how you store data, you should consider what
data your application may be inadvertently storing by consequence of the functionality you have built in to it.
A good example is if your application uses a UIWebView: You may not be aware that you are inadvertently
caching web data, cookies, form input, and potentially other content just by virtue of using this class!
How and when data should be available—An important factor to consider when designing your
application is what states will exist and what data should be accessible in those states. For example, if your
application handles cryptographic key material, typically it should not be accessible or memory resident
when the application is in a locked state and should only be made available following user authentication.
Prior to implementation, creating a design plan showing the different state transitions and what data should
be accessible in each will help you to reduce the exposure of data within your application.
How access to the application will be protected—If your application is handling particularly important
data such as financial, corporate, or something equally sensitive, you may want to consider implementing
client-side authentication. Forcing a user to authenticate to the application can offer some mitigation against
unauthorized access in the event a device is lost or stolen. Where possible, you should also combine it with
authentication via iOS’ LocalAuthentication framework and TouchID, which can offer validation that the
user is physically present providing no tampering has taken place. You should also consider several
important factors when implementing client-side authentication: namely whether the passcode is stored and
if so, where; how it is validated; the key space of the passcode; and how other application areas will be
protected until the authentication has been completed.
What entry points exist—Identifying the entry points to your application at an early stage can help you
recognize areas where potentially tainted data may be introduced. Armed with this information, you can
define the types and format of the data that can enter your application, building appropriate sanitization
rules to parse this data along the way. Entry points to consider may include data originating from server-side
applications, Bluetooth, protocol handlers, quick response (QR) codes, and iBeacons, among many other
possible sources.
How third-party components affect the application—An interesting and yet often unexplored design
consideration is the impact and security of any third-party libraries that you might be using within your
application. In many cases developers bundle third-party libraries with their applications to reduce
development time and leverage already-mature functionality. However, these libraries may not have come
under close scrutiny, particularly if they are closed source. Using third-party libraries grants the library
developer the equivalent to code execution within your application as well as access to your application’s
data. An example of this would be the inclusion of a third-party ad library, for which many previous
examples of abuse exist, ranging from stealing the user’s address book to submitting UDID and geolocation
information to online resources.
These examples are just a handful of the key design considerations that you should assess prior to developing an
application. In general, design is a critical stage in the software development lifecycle (SDL) for any application
and you should use it to preempt vulnerabilities before development.
Implementing Encryption
As you will know from the section “Understanding the Data Protection API” in Chapter 2, you can encrypt
individual files on the filesystem using a key derived from the user’s passcode. However, the usual
recommendation to secure sensitive information is to supplement this encryption with your own encryption
implementation to give additional assurance against the following scenarios:
On-device attacks (for example, malware or drive-by-download exploitation)
Exploitation of any secure boot chain components that allow the filesystem to be mounted
Users who set an insecure or default passcode
Devices without a passcode
This section only briefly touches on the topic of encryption principles because a thorough examination is far
beyond the scope of this book.
Implementing an encryption scheme in your application is often a daunting task, and one that you should not
take lightly. You must consider many factors to avoid inadvertently exposing your data to unauthorized access.
The following is a set of guidelines that you should follow when implementing encryption within your
application:
Perhaps the most important point when debating how to implement an encryption solution is that you
should always use a tried-and-tested encryption algorithm. Never “roll your own” because it is always a
recipe for disaster! AES-XTS with a key size of 256 is widely accepted as being suitable for most use cases for
mobile applications. If hashing is required, then SHA-256 or higher is generally regarded as being sufficient.
You should implement key generation using an accepted key derivation function such as PBKDF2
(password-based key derivation function) with an accepted number of iterations. The acceptable number of
iterations is often a contentious point in crypto communities; however, it is widely believed that the figure
should increase each year to account for improving technologies. As a benchmark, Apple acknowledges that
it uses 10,000 iterations of PBKDF2 as part of the keybag design
(https://s3.amazonaws.com/s3.documentcloud.org/documents/1302613/ios-security-guide-sept-
2014.pdf).
When you use user input to derive a key, always keep your key space as large as possible. If you’re simply
prompting the user for a four-digit PIN then be aware that only 10,000 possible combinations exist. Using
this as the only input to derive your encryption key can clearly lead to its being brute-forced quite quickly!
A common problem faced by developers is how to protect your encryption key; this is where you should
consider master key encryption. In this scenario, the key used to ultimately encrypt your data is itself
encrypted, preferably using a key derived from the user or for further assurance also with a second key
derived from a post authentication server-side response. This solution has the added benefit that the user
can change his or her password without having to re-encrypt all their data. Only the master key would need
to be re-encrypted. If using public key cryptography, you can also use a similar technique to protect your
private key within the client.
When using a salt, always use a random value with at least 10,000 iterations (the higher the better, but be
aware of performance trade-offs). Following this advice will help to make brute-force and rainbow table
attacks against your implementation computationally expensive.
Apple provides a number of APIs to help you accomplish many of the common tasks that you will likely need to
do when implementing an encryption solution in your application, many of which come as part of the Security
framework or the Common Crypto library. You will find some example use cases in this section.
To obtain entropy or a cryptographically secure block of random bytes using the /dev/random random-number
generator, you can use the SecRandomCopyBytes function. A sample implementation used to generate a 128-bit
salt is shown here:
+(NSData*) generateSalt:(size_t) length
{
NSMutableData *data = [NSMutableData dataWithLength:length];
int result = SecRandomCopyBytes(kSecRandomDefault, length,
data.mutableBytes);
if(result != 0){
NSLog(@"%@", @"Unable to generate salt");
return nil;
}
return data;
}
+(NSData*) salt
{
return [self generateSalt:16];
}
Here is a simple implementation of how to generate a 256-bit AES key using PBKDF2 and the Common Crypto
library by virtue of the CCKeyDerivationPBKDF function:
+(NSData*) generateKey:(NSString*)password salt:(NSData*)salt
rounds:(uint)rounds
{
NSMutableData *key = [NSMutableData dataWithLength:16];
int result = CCKeyDerivationPBKDF(kCCPBKDF2, [password UTF8String],
[password lengthOfBytesUsingEncoding: NSUTF8StringEncoding],
[salt bytes], [salt length], kCCPRFHmacAlgSHA256, rounds, key.mutableBytes,
kCCKeySizeAES256);
if (result == kCCParamError)
{
NSLog(@"%@", @"Unable to generate key");
return nil;
}
return key;
}
A common problem faced by developers is how to go about encrypting content stored in a database, which often
leads to you “rolling your own” encryption solution to encrypt content before it is inserted into the database.
This has the obvious disadvantage of leaving the database metadata unencrypted. A popular solution to this
problem is SQLCipher (https://www.zetetic.net/sqlcipher/), which is an open-source SQLite database
implementation that supports encryption. Using SQLCipher certainly makes encryption of SQLite databases
relatively seamless. Here is a simple implementation:
-(void)OpenDatabaseConnection:(NSString*)dbName pass:(NSString*)password
{
NSString *databasePath = \
[[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, \
NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingPathComponent:\
dbName];
sqlite3 *db;
if (sqlite3_open([databasePath UTF8String], &db) == SQLITE_OK) {
const char* key = [password UTF8String];
sqlite3_key(db, key, strlen(key));
if (sqlite3_exec(db, (const char*) "SELECT count(*) FROM \
sqlite_master;", NULL, NULL, NULL) == SQLITE_OK) {
// password is correct
} else {
// incorrect password!
}
sqlite3_close(db);
}
}
In this example, a database relative to the application’s Documents folder can be opened using the appropriate
database encryption password. Of course, the same principles apply as previously noted and the key should be
derived from input that is taken from the user.
In summary, encryption is a key security control that you can use in your application to protect sensitive data
(not just on the filesystem!), and in most cases you should implement your own form of encryption in addition
to that of the Data Protection API. Although a number of pitfalls exist, implementing encryption securely is
possible and when doing so you should use a password derived from the user to generate your encryption key
instead of using a static or hard-coded key in your application.
Protecting Your Data in Transit
So far you have learned how to secure your data at rest. However, more than likely you will at some point need
to communicate your data to a server-side application. Chapter 3 detailed the need for a secure channel and also
covered some of the pitfalls that can occur when implementing one. You also learned how with sufficient access
to the operating system you could bypass security controls such as certificate pinning. However, pinning still