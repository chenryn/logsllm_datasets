Π (A, κ) we denote the following interaction between the instances of M, F and H with A:
Deﬁnition 6 (E2E / Tunnel AKE). Given a correct protocol Π, a uniformly chosen bit b, a type
of AKE-security α ∈ {ake-e2e, ake-t}, and a PPT adversary A with access to the queries Invoke, Send,
Corrupt, RevealKey, RevealTunnelKey, and TestKey (if α = ake-e2e) or TestTunnelKey (if α = ake-t), by
Gameα,b
– A interacts with instances via queries;
– Case α = ake-e2e: at some point A asks a TestKey query to an instance [P, s] which has accepted and
is e2e-fresh (and remains such by the end of the interaction);
Case α = ake-t: at some point A asks a TestTunnelKey query to an instance [P, s] which has accepted
and is t-fresh (and remains such by the end of the interaction);
– A continues interacting with instances and when A terminates, it outputs a bit, which is then set as
the output of the interaction.
A wins if the output of Gameα,b
advantage over the random guess of b, over all adversaries (running in time κ) is denoted
Π (A, κ) is identical to b. The maximum probability of the adversarial
Advα
Π(A, κ) = maxA |2 Pr[Gameα,b
Π (A, κ) = b] − 1|.
If this advantage is negligible in κ and α = ake-e2e (or α = ake-t) then Π provides end-to-end (or tunnel)
AKE-security.
Remark 1. Our notions of freshness restrict A from corruptions of M and H (in e2e-freshness) and
from corruptions of M, F, and H (in t-freshness). This implies that our deﬁnitions of AKE-security do
not consider forward secrecy. This is done on purpose, since the basic version of our protocol speciﬁed
and formally analyzed in Section 5 does not provide this property, mainly for the reasons of eﬃciency,
resulting in a possible use of the protocol for the performance-constrained mobile devices. Nevertheless,
in Section 6.1 we show, how forward secrecy for KM,H and Kt can be easily achieved using the classical
Diﬃe-Hellman technique [25].
5 Authentication and Key Establishment Protocol for WRT
In the following we introduce AWRT — our protocol for authentication and key establishment for WRT
between M, F, and H. This section describes its basic version, analyzes security and evaluates perfor-
mance. Optional security extensions and the discussion on the use of AWRT in commercial networks are
postponed to Section 6.
5.1 Building Blocks
AWRT uses several (well-known) cryptographic primitives:
10
M. Manulis, D. Leroy, F. Koeune, O. Bonaventure, and J.-J. Quisquater
– A pseudo-random function PRF : {0, 1}κ × {0, 1}∗ → {0, 1}∗ which is used for the purpose of key
derivation and can be realized using block-ciphers or keyed one-way hash functions. By Advprf
PRF(κ) we
denote the maximum advantage over all PPT adversaries (running within time κ) in distinguishing
the outputs of PRF from those of a random function better than by a random guess.
– An asymmetric encryption scheme satisfying the property of indistinguishability under (adaptive)
chosen-ciphertext attacks (IND-CCA2) [48] whose encryption and decryption operations are denoted
E and D, respectively. By Advind-cca2
(κ) we denote the maximum advantage over all PPT adversaries
(running within time κ) in breaking the IND-CCA2 property of (E,D) better than by a random
guess; The property of IND-CCA2 security is for example preserved in the several encryption schemes
including RSA-OAEP [14, 31], Cramer-Shoup [24], and DHIES [4].
(E,D)
– A digital signature scheme which provides existential unforgeability under chosen message attacks
(EUF-CMA) whose signing and veriﬁcation operations are denoted Sig and V er, respectively. By
Succeuf-cma
(Sig,V er)(κ) we denote the maximum success probability over all PPT adversaries (running within
time κ) given access to the signing oracle in ﬁnding a forgery; Examples of such schemes include
DSS [47] and PSS [15], though schemes that provide a stronger version of EUF-CMA (cf. [17,34]) can
be applied as well.
– A message authentication code function MAC that satisﬁes weak unforgeability against chosen message
attacks (WUF-CMA) [12], e.g., the popular function HMAC [10,11] can be used for this purpose. By
Succwuf-cma
(κ) we denote the maximum success probability over all PPT adversaries (running within
time κ) given access to the MAC oracle in ﬁnding a MAC forgery.
MAC
5.2 Initialization
We assume that prior to the execution of AWRT the involved parties are in possession of the following
long lived keys: LLF consists of a private/public signature/veriﬁcation key pair (skF , vkF) and a de-
cryption/encryption key pair (dkF , ekF); LLH consists of a private/public signature/veriﬁcation key pair
(skH, vkH) and a pair (M, (kM,αM)) where (kM, αM) is a high-entropy secret key consisting of a PRF
key kM and a MAC key αM shared with the hosted M; consequently LLM consists of (kM, αM). Note
that in practice it is suﬃcient for H and M to share kM and derive the corresponding MAC key αM as
PRFkM(l) for some publicly ﬁxed label l.
Further we assume that the public keys of networks are known amongst them in advance (implied
by their contract). They can also be handled via self-signed or classical PKI certiﬁcates. F and H can
choose their long-lived keys independently and H can choose kM for each hosted M according to their
assumed trust relationship.
Remark 2. Since the networks F and H can usually swap their roles (e.g., bidirectional roaming contracts
between H and F, or a roaming contract among some set of networks from which F and H can be seen as
any two chosen networks), LLH may include some (dkH, ekH) and LLF may also include (M, (kM, αM))
for each mobile device M hosted by F.
Remark 3. For the purpose of eﬃciency and scalability it might be desirable for the networks to use a
single private/public key pair to decrypt and to sign. There exist several secure schemes that support both
operations with the same public key pair (and could be deployed in our protocol), e.g., [23]. Nevertheless,
the use of the same key pair in two diﬀerent operations contradicts to the general principles of a secure
protocol design and is, therefore, not recommended.
5.3 Protocol Execution
In the following we provide some explanations on the techniques used in our AWRT protocol and their
relationship to the security goals. The actual speciﬁcation is illustrated in Figure 1.
First, we mention an optional time-stamp T which can be chosen by F and sent to H in order to address
possible accounting issues in commercial roaming scenarios where F should be reimbursed for the provided
tunnel connection; more discussion on this can be found in Section 6.4.
Authenticated Wireless Roaming via Tunnels: Making Mobile Feel at Home
11
Foreign Network F
{(skF , vkF ), (dkF , ekF )}
rF ∈r {0, 1}κ; A := F|rF
Home Network H
{(skH, vkH), (M, (kM, αM))}
Mobile Device M
{(kM, αM)}
rM ∈r {0, 1}κ; B := M|rM
←− A−−−−−−
−B|H
−−−−−−→
if H INVALID
then ABORT else
C := A|B
parse E as rH|µH
sidM := A|B|H|rH
if µH INVALID
then ABORT else
kt := PRFkM (l1|sidM)
µM := MACαM (1|sidM)
Kt := PRFkt (l2|sidM)
KM,H := PRFkM (l3|sidM)
ACCEPT
parse D as rH|χ|µH
sidF := C|H|rH
if σH INVALID
then ABORT else
kt := DdkF (χ)
E := rH|µH
←− E−−−−−−
− µM−−−−−−→
σF := SigskF (sidF|µM)
Kt := PRFkt (l2|sidF )
ACCEPT
CREATE TUNNEL
−C|[T ]
−−−−−−→
←−D|σH−−−−−−
parse C as F|rF|M|rM
if [T OR] M INVALID
then ABORT else
rH ∈r {0, 1}κ
sidH := C|H|rH
kt := PRFkM (l1|sidH)
χ := EekF (kt)
µH := MACαM (0|sidH)
D := rH|χ|µH
σH :=
SigskH (sidH|[T ]|χ|µH)
−µM|σF
−−−−−−→
if µM OR σF INVALID
then ABORT else
Kt := PRFkt (l2|sidH)
KM,H := PRFkM (l3|sidH)
ACCEPT
Fig. 1. Illustration of the basic version of AWRT between the participating mobile device M, foreign
network F, and home network H. At the end of the protocol: M and H hold the end-to-end key KM,H;
M, F, and H hold the tunnel key Kt, so that the tunnel between M and H can be established by F.
12
M. Manulis, D. Leroy, F. Koeune, O. Bonaventure, and J.-J. Quisquater
AWRT uses publicly known distinct labels li, i = 1,. . .,3, which are ﬁxed in advance and used as input
to PRF to derive various secret keys at diﬀerent protocol stages.
In AWRT each party P ∈ {M,F,H} computes own session id sidP as a concatenated bit string
F|rF|M|rM|H|rH where rP denotes a random nonce chosen by P .
The end-to-end key KM,H is derived by M and H as the output of PRF (with label l3 and the session
id) using the shared secret key kM. Obviously, the equality sidM = sidH is necessary for M and H to
compute the same value of KM,H. The assurance of this equality is given to M through the MAC value µH
since the corresponding MAC key αM is known only to M and H. Similarly, H gains this assurance from
the MAC value µM. Observe that bits 0 and 1 are used as additional inputs for the computation of µH
and µM, respectively, to break the “symmetry” and guarantee that µH (cid:54)= µM. Due to the construction of
session ids from fresh nonces (seen as challenges) the successful veriﬁcation of these MAC values provides
also the mutual authentication between M and H.
The mutual authentication between F and H is achieved via digital signatures σH and σF as the
signed messages include sidH and sidF, respectively.
The tunnel key Kt is derived by M, F, and H as the output of PRF (with label l2 and the session
id) using the pre-tunnel key kt which is computed by the parties in two diﬀerent ways: M and H derive
kt from PRF (with label l1 and the session id) using the shared secret kM, whereas F obtains kt via
decryption from the cipher-text χ received from H. The protection of χ by σH ensures F that H holds
the same value for kt. Since F produces σF subsequently to the veriﬁcation of σH the validity of σF
ensures H that the cipher-text χ was delivered to F without modiﬁcation allowing F to decrypt the same
value for kt. Note that the mutual authentication between M and H also implies that the partnered
instances of these two parties derive the same value for kt too.
5.4 Security Analysis
In this section we prove that AWRT satisﬁes the previously deﬁned security goals. In all our theorems by
q we denote the total number of the invoked protocol sessions in the corresponding interactions between
the adversary A and the protocol participants. We start by proving the deﬁned mutual authentication
goals.
Theorem 1 (MA between M and H). Given a WUF-CMA secure MAC the basic version of AWRT
described in Figure 1 provides mutual authentication between the participating mobile device and its home
network in the sense of Deﬁnition 2, and
Succma-m-h
AWRT
(κ) ≤ 2q2
2κ + 2Succwuf-cma
MAC
(κ).
Game G0. [Real protocol] This is the real Gamema-m-h
Proof. (Sketch) In our proofs we apply the meanwhile classical proving technique from [56]. Here we
construct a sequence of games Gi, i = 0, . . . , 2 and denote by Winma-m-h
the event that an adversary
A breaks the mutual authentication between M and H in game Gi, i.e., wins in the corresponding
interaction as described in Deﬁnition 2. Note that A is allowed to corrupt F for the winning conditions
(1) – (3), but not for (4).
(κ) played between a simulator ∆ and a PPT
adversary A. ∆ simulates the actions of the participating M, F, and H according to the protocol speci-
ﬁcation and answers all queries of A.
Game G1. [Collisions for chosen nonces rM and rH] In this game the simulation aborts if during
the interaction the simulator chooses the same random nonce rM resp. rH on behalf of M resp. H in two
diﬀerent protocol sessions. Considering the collision probability for the same nonce to be chosen twice we
obtain
AWRT
i
(1)
Note that since in AWRT a session id of P ∈ {M,F,H} is computed as concatenated string F|rF|M|rM|H|rH
this game rules out the occurrence of the same session ids computed by the instances of M and H in
1
0
]| ≤ 2q2