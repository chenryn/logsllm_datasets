**更多内容**
- [SSTI](../../Web安全/Web_Generic/SSTI.md)
### FreeMarker SSTI
**描述**
模板文件存放在 Web 服务器上，当访问指定模版文件时， FreeMarker 会动态转换模板，用最新的数据内容替换模板中 `${...}` 的部分，然后返回渲染结果。
**FreeMarker 基础**
- [FreeMarker](../../../../Develop/Java/笔记/Web/模版引擎/FreeMarker.md)
**FreeMarker SSTI POC**
```
${value("calc.exe")}
${value("open /Applications/Calculator.app")}
${value("id")}
${value("java.lang.ProcessBuilder","calc.exe").start()}
import os;os.system("calc.exe")
```
### Velocity SSTI
### Thymeleaf SSTI
**描述**
Thymeleaf 具有预处理表达式的功能，预处理是在正常表达式之前完成的表达式的执行，允许修改最终将执行的表达式。
预处理的表达式与普通表达式完全一样，但被双下划线符号（如 `__${expression}__` ）包围。
预处理可以解析执行表达式，也就是说找到一个可以控制预处理表达式的地方，让其解析执行我们的 payload 即可达到任意代码执行
**Thymeleaf 基础**
- [Thymeleaf](../../../../Develop/Java/笔记/Web/模版引擎/Thymeleaf.md)
**相关文章**
- [Thymeleaf 模板漏洞分析](http://x2y.pw/2020/11/15/Thymeleaf-%E6%A8%A1%E6%9D%BF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/)
- [Java安全之Thymeleaf SSTI分析](https://www.anquanke.com/post/id/254519)
**调试样本**
- https://github.com/hex0wn/learn-java-bug/tree/master/thymeleaf-ssti
**thymeleaf SSTI POC**
其实就是 SpEL 注入的 payload
```
${T(java.lang.Runtime).getRuntime().exec("open -a Calculator")}
```
---
## 文件上传漏洞
**相关文章**
- [Java文件上传漏洞](https://zhuanlan.zhihu.com/p/431392700)
**漏洞示例**
此处以 MultipartFile 为例，示例代码片段如下:
```java
    public String vul1(@RequestPart MultipartFile file) throws IOException {
        String fileName = file.getOriginalFilename();
        String filePath = path + fileName;
        File dest = new File(filePath);
        Files.copy(file.getInputStream(), dest.toPath());
        return "文件上传成功 : " + dest.getAbsolutePath();
    }
```
这里没有对后缀名做检测,同时还存在路径穿越漏洞,攻击者可以直接写计划任务到 /etc/cron.d/ 目录下
**审计函数**
```
MultipartFile
newStandardMultipartFile
getOriginalFilename
```
**搜索正则**
```
file\.getOriginalFilename\(\)|文件上传|文件|上传|uploadfile|upload
```
**更多内容**
- [文件上传漏洞](../../Web安全/Web_Generic/Upload.md)
### getOriginalFilename()
**描述**
在使用 SpringBoot 中当没有自己手动配置的情况下默认使用的是 StandardMultipartFile. 在这种情况下直接通过 getOriginalFilename 方法获取文件名后，不进行处理就使用会造成目录穿越漏洞。
- https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html#getOriginalFilename--
如果配置了使用 CommonsMultipartFile 的 getOriginalFilename 方法对文件名进行了处理,在 windows 可以使用 `../..\\..\\` 绕过造成目录穿越漏洞,官方在 Spring >= 4.1.9.RELEASE 修复该问题.
- https://github.com/spring-projects/spring-framework/releases/tag/v4.1.9.RELEASE
**相关文章**
- [原创 | 浅谈Springboot中的文件上传](https://mp.weixin.qq.com/s/wPgdnyv57qBwkHV0O60xIA)
- [Spring MultipartFile 文件上传的潜在威胁](https://forum.butian.net/share/815)
**相关的 issue**
- https://github.com/spring-projects/spring-framework/issues/18237
- https://github.com/spring-projects/spring-framework/issues/26299
---
## URL重定向
**漏洞示例**
示例代码片段如下:
```java
    public String vul(String url) {
        log.info(url);
        return"redirect:" + url;
    }
```
这里没有对传入的参数 url 做任何判断,直接进行了重定向
**审计函数**
java 程序中 URL 重定向的方法均可留意是否对跳转地址进行校验、重定向函数如下：
```
redirect:
sendRedirect
setHeader
forward
...
```
**搜索正则**
```
redirect\:|sendRedirect|setHeader|forward|getHost\(\)
```
**更多内容**
- [URL跳转漏洞](../../Web安全/Web_Generic/Web_Generic.md#URL跳转漏洞)
### getHost()
**相关文章**
- [任意URL跳转漏洞修复与JDK中getHost()方法之间的坑](https://cloud.tencent.com/developer/article/1420631)
**反斜杠绕过**
有些业务使用 java.net.URL 包中的 `getHost()` 方法获取了将要跳转 URL 的 host，判断 host 是否为目标域
```java
    @RequestMapping("/redirect/3")
    public String vul3(String url) {
        String host = "";
        try {
            host = new URL(url).getHost();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        if (host.endsWith(".ffffffff0x.com")){
            return"redirect:https://" + host;
        }else{
            return"redirect:/error";
        }
    }
```
`getHost()` 方法可以被反斜杠绕过，即 `?url=http://www.baidu.com%5Cwww.ffffffff0x.com` 会被代码认为是将要跳转到 ffffffff0x.com，而实际跳转到 www.baidu.com\www.ffffffff0x.com，最终还是跳到 www.baidu.com 的服务器。
**通过 # 井号绕过**
`getHost()` 方法的结果在不同 JDK 版本中对井号 #的处理结果不同，通常井号被用作页面锚点，对于 `https://www.aaa.com#www.bbb.com?x=123` 这个 URL，较高版本的 JDK 中，取出结果为 `www.aaa.com`，低版本中为 `www.aaa.com#www.bbb.com`，从而低版本又可绕过 `endsWith(".bbb.com")` 方法，成功跳转。
比如 JDK1.8.0_221 对 '\' 可以绕过，'#' 不可以绕过。JDK1.6.0_45 '\' 和 '#' 都可以绕过.
---
## CSRF
**漏洞示例**
由于开发人员对 CSRF 的了解不足，错把 “经过认证的浏览器发起的请求” 当成 “经过认证的用户发起的请求”，当已认证的用户点击攻击者构造的恶意链接后就“被” 执行了相应的操作。例如，一个博客删除文章是通过如下方式实现的：
```
GET http://blog.com/article/delete.jsp?id=102
```
当攻击者诱导用户点击下面的链接时，如果该用户登录博客网站的凭证尚未过期，那么他便在不知情的情况下删除了 id 为 102 的文章，简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。
**漏洞审计**
此类漏洞一般都会在框架中解决修复，所以在审计 csrf 漏洞时。首先要熟悉框架对 CSRF 的防护方案，一般审计时可查看增删改请求重是否有 token、formtoken 等关键字以及是否有对请求的 Referer 有进行校验。手动测试时, 如果有 token 等关键则替换 token 值为自定义值并重放请求，如果没有则替换请求 Referer 头为自定义链接或置空。重放请求看是否可以成功返回数据从而判断是否存在 CSRF 漏洞。
**更多内容**
- [CSRF](../../Web安全/Web_Generic/Web_Generic.md#CSRF)
---
## 命令执行
**漏洞示例**
此处以 getRuntime 为例，示例代码片段如下:
```java
String cmd = request.getParameter("cmd");
Runtime.getRuntime().exec(cmd);
```
**审计函数**
这种漏洞原理上很简单，重点是找到执行系统命令的函数，看命令是否可控。在一些特殊的业务场景是能判断出是否存在此类功能，这里举个典型的实例场景, 有的程序功能需求提供网页截图功能，笔者见过多数是使用 phantomjs 实现，那势必是需要调用系统命令执行 phantomjs 并传参实现截图。而参数大多数情况下应该是当前 url 或其中获取相关参数，此时很有可能存在命令执行漏洞，还有一些其它比较特别的场景可自行脑洞。
java 程序中执行系统命令的函数如下：
```
Runtime.exec
ProcessBuilder.start
GroovyShell.evaluate
```
**搜索正则**
```
Runtime\.exec|ProcessBuilder\.start|GroovyShell\.evaluate
```
**更多内容**
- [命令执行](../../Web安全/Web_Generic/RCE.md)
---
## 权限控制
**描述**
越权漏洞可以分为水平、垂直越权两种,程序在处理用户请求时未对用户的权限进行校验，使的用户可访问、操作其他相同角色用户的数据，这种情况是水平越权；如果低权限用户可访问、操作高权限用户则的数据，这种情况为垂直越权。
**漏洞示例**
```java
@RequestMapping(value="/getUserInfo",method = RequestMethod.GET)
public String getUserInfo(Model model, HttpServletRequest request) throws IOException {
    String userid = request.getParameter("userid");
    if(!userid.isEmpty()){
        String info=userModel.getuserInfoByid(userid);
        return info;
    }
    return "";
}
```
**审计函数**
水平、垂直越权不需关注特定函数，只要在处理用户操作请求时查看是否有对当前登陆用户权限做校验从而确定是否存在漏洞
**修复方案**
获取当前登陆用户并校验该用户是否具有当前操作权限，并校验请求操作数据是否属于当前登陆用户，当前登陆用户标识不能从用户可控的请求参数中获取。
---
## 批量请求
**描述**
业务中经常会有使用到发送短信校验码、短信通知、邮件通知等一些功能，这类请求如果不做任何限制，恶意攻击者可能进行批量恶意请求轰炸，大量短信、邮件等通知对正常用户造成困扰，同时也是对公司的资源造成损耗。
除了短信、邮件轰炸等，还有一种情况也需要注意，程序中可能存在很多接口，用来查询账号是否存在、账号名与手机或邮箱、姓名等的匹配关系，这类请求如不做限制也会被恶意用户批量利用，从而获取用户数据关系相关数据。对这类请求在代码审计时可关注是否有对请求做鉴权、和限制即可大致判断是否存在风险。
**漏洞示例**
```java
@RequestMapping(value="/ifUserExit",method = RequestMethod.GET)
public String ifUserExit(Model model, HttpServletRequest request) throws IOException {
    String phone = request.getParameter("phone");
    if(! phone.isEmpty()){
        boolean ifex=userModel.ifuserExitByPhone(phone);
        if (!ifex)
            return "用户不存在";
    }
    return "用户已被注册";
}
```
**修复方案**
* 对同一个用户发起这类请求的频率、每小时及每天发送量在服务端做限制，不可在前端实现限制
---
## XXE
**漏洞示例**
此处以 org.dom4j.io.SAXReader 为例，仅展示部分代码片段：
```java
String xmldata = request.getParameter("data");
SAXReader sax = new SAXReader();
// 创建一个SAXReader对象
Document document = sax.read(new ByteArrayInputStream(xmldata.getBytes()));
// 获取document对象,如果文档无节点，则会抛出Exception提前结束
Element root = document.getRootElement(); //获取根节点
List rowList = root.selectNodes("//msg");
Iterator iter1 = rowList.iterator();
if (iter1.hasNext()) {
    Element beanNode = (Element) iter1.next();
    modelMap.put("success",true);
    modelMap.put("resp",beanNode.getTextTrim());
}
...
```
**审计函数**
XML 解析一般在导入配置、数据传输接口等场景可能会用到，涉及到 XML 文件处理的场景可留意下 XML 解析器是否禁用外部实体，从而判断是否存在 XXE。部分 XML 解析接口如下：
```
javax.xml.parsers.DocumentBuilder
javax.xml.stream.XMLStreamReader
org.jdom.input.SAXBuilder
org.jdom2.input.SAXBuilder
javax.xml.parsers.SAXParser
org.dom4j.io.SAXReader
org.xml.sax.XMLReader
javax.xml.transform.sax.SAXSource
javax.xml.transform.TransformerFactory
javax.xml.transform.sax.SAXTransformerFactory
javax.xml.validation.SchemaFactory
javax.xml.bind.Unmarshaller
javax.xml.xpath.XPathExpression
...
```
**更多内容**
- [XXE](../../Web安全/Web_Generic/XXE.md)
---
## 第三方组件安全
**描述**
这个比较好理解，诸如 Struts2、不安全的编辑控件、XML 解析器以及可被其它漏洞利用的如 commons-collections:3.1 等第三方组件，这个可以在程序 pom 文件中查看是否有引入依赖。即便在代码中没有应用到或很难直接利用，也不应该使用不安全的版本，一个产品的周期很长，很难保证后面不会引入可被利用的漏洞点。
**相关工具**
- [墨菲安全](https://www.murphysec.com/)
    - https://github.com/murphysecurity/murphysec - 墨菲安全的 CLI 工具，用于在命令行检测指定目录代码的依赖安全问题，也可以基于 CLI 工具实现在 CI 流程的检测。
**修复方案**
* 使用最新或安全版本的第三方组件