title:FTSPM: A Fault-Tolerant ScratchPad Memory
author:Amir Mahdi Hosseini Monazzah and
Hamed Farbeh and
Seyed Ghassem Miremadi and
Mahdi Fazeli and
Hossein Asadi
FTSPM: A Fault-Tolerant ScratchPad Memory
Amir Mahdi Hosseini Monazzah1, Hamed Farbeh2, Seyed Ghassem Miremadi3, Mahdi Fazeli4, and Hossein Asadi5
Department of Computer Engineering
Sharif University of Technology
Tehran, Iran 11155-9517
Email: PI:EMAIL, PI:EMAIL, PI:EMAIL, 4m PI:EMAIL, and PI:EMAIL
implies
in safety-critical applications
Abstract—ScratchPad Memory (SPM) is an important part
of most modern embedded processors. The use of embedded
processors
including
fault tolerance in the design of SPM. This paper proposes
a method, called FTSPM, which integrates a multi-priority
mapping algorithm with a hybrid SPM structure. The proposed
structure divides SPM into three parts: 1) a part is equipped
with Non-Volatile Memory (NVM) which is immune against soft
errors, 2) a part is equipped with Error-Correcting Code, and 3)
a part is equipped with parity. The proposed mapping algorithm
is responsible to distribute the program blocks among the
above three parts with regards to their vulnerability level. The
simulation results demonstrate that the FTSPM reduces the SPM
vulnerability by about 7x in comparison to a pure SRAM-based
SPM. In addition,
the
proposed method is 77% and 47% less than that of a pure
NVM-based SPM and a pure SRAM-based SPM, respectively.
the dynamic energy consumption of
Keywords—Reliability, Mapping of SPM, SPM, Non-Volatile
Memory.
I.
INTRODUCTION
Energy consumption, performance, and reliability are the
major concerns in designing embedded processors [1]. These
concerns are mainly affected by on-chip memory cells that
constitute about 60% of the chip area [2]. On-chip mem-
ory cells, i.e., cache and scratchpad memories (SPMs), have
been widely used to decrease the energy consumption and
to improve the performance. A comparison between cache
and SPM shows that SPM requires less area and energy
than cache memory because of the absence of tag array
and controller circuits in SPM [3]. In addition, the use of
embedded processors in real-time applications are developed
explosively [4]. Here, predictability is one of the major re-
quirements of the real-time applications. In comparison to
software-managed SPM, hardware-controlled cache memory
complicates the predictability of the system [3]. Based on this
fact and due to lower power consumption of SPM, cache has
been replaced by SPM in many embedded processors [5].
One of the main applications of embedded processors is
in Safety-Critical Real-Time systems, where the reliability of
SPM is of decisive importance. Soft errors due to radiation-
induced bit-ﬂips are a major contributor affecting the reliability
of SPMs. With continuous down scaling of emerging technol-
ogy and the vulnerability paradigm shift from Single Event
Upsets (SEUs) to Multiple-Bit Upsets (MBUs), SPMs have
become more vulnerable to soft errors [6].
Almost all previous studies dealing with radiation-induced
soft errors in SPMs are based on either duplicating the memory
contents, or using traditional memory protection methods,
e.g., Error Correction Codes (ECC) [2], [7], [8]. Duplicating
the memory contents imposes high overheads in terms of
power and die size while ECCs have severe limitations on
correcting MBUs.
SPM mapping algorithms that deal with allocating SPM
space to program blocks are one of the major challenges in
exploiting SPM. Since various program blocks have different
vulnerability to soft errors, mapping algorithms have direct
effects on the reliability of SPM; however, the reliability of
SPM has not been considered in previous studies during the
mapping phase.
This paper proposes a Fault-Tolerant method for SPM,
called FTSPM, which integrates a multi-priority reliability-
aware mapping algorithm within a hybrid fault-tolerant SPM
structure. The proposed hybrid structure supports three levels
of protection: 1) a Non-Volatile Memory (NVM) which is
immune against soft errors, 2) a SRAM part protected with
ECC, and 3) a parity-protected SRAM. The proposed mapping
algorithm is responsible to distribute the program blocks
among the above three parts with regards to their vulnerability
level. Using NVM cells in the SPM structure results in the
following advantages:
1)
2)
The different structure of NVM cells from the tra-
ditional SRAM cells completely immunes some of
these memory technologies against radiation-induced
soft errors [9]. Consequently, we can immunize parts
of SPM area without imposing any protection redun-
dancy overhead to these parts.
Since NVMs have ultra-low leakage power [10],
using these memory cells alongside of SPM space
signiﬁcantly decreases SPM static energy consump-
tion.
Due to some limitations of NVMs, e.g., write latency and
endurance (maximum number of write operations that an NVM
cell can tolerate), SRAMs should be used in conjunction with
NVMs to take advantages of low latency and high endurance
of SRAMs and low leakage power of NVMs [10]. To strike
a balance among Reliability, Performance, Power, and NVM
Endurance,
the proposed multi-priority mapping algorithm
allocates different SPM areas to different program blocks
according to program blocks vulnerabilities. The proposed al-
gorithm is also able to optimize the mapping of program blocks
for reliability, performance, power, or endurance according to
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:45:05 UTC from IEEE Xplore.  Restrictions apply. 
system requirements.
The remaining of this paper is organized as follows. In
Section II, previous work is reviewed. In Section III,
the
proposed hybrid SPM structure and mapping algorithm are
explained. An example which helps to understand the details
of FTSPM is presented in Section IV. Section V describes
the simulation setup and results. Conclusions are presented in
Section VI.
II. RELATED WORK
Most of the previous studies in SPM have management
focused on proposing an optimized mapping algorithm to min-
imize energy consumption or to maximize the system perfor-
mance. The SPM mapping algorithm is responsible to manage
the limited SPM space and map the most frequently accessed
blocks of application to SPM space. SPM management is an
optimization problem that can be handled by the programmer
or the compiler [11]. Basically, there are two approaches to
map program blocks to SPM: static approach and dynamic
approach. In the static approach, a subset of program blocks
are transferred to SPM when the application starts and there
is no block transfer between the off-chip memory and SPM
during the application execution. In the dynamic approach,
program blocks can be transferred between SPM and the off-
chip memory during the application execution [12].
In addition to performance and energy consumption, SPM
as an SRAM-based on-chip memory plays a major role in the
reliability of embedded systems. It is a well-known fact that
SRAM cells are extremely susceptible to radiation-induced
errors,
i.e. soft errors [13]. As technology shrinks toward
nanometer era, they become even more vulnerable to these
errors [14].
Many investigations have been done to protect cache and
main memory against MBUs; however, there are a few studies
that focused on protecting SPMs against even SEUs. Thus in
this section, the previous studies including the methods for
improving the performance or energy consumption of SPM are
introduced ﬁrst and then the previous work on SPM reliability
is investigated.
A. Improving Performance and/or Energy Consumption of
SPM
In [15], a dynamic mapping algorithm, which maps the
code section of the programs to SPM, has been introduced.
In this study, coarse- and ﬁne-grained program blocks are
considered. In the coarse-grained mode, program blocks are
constructed from functions, and in the ﬁne-grained mode, a
sequence of instructions constructs a block. After partitioning
the program to the blocks, the number of accesses to each
block is computed by a static proﬁling. Based on the proﬁling
result,
the most frequent accessed blocks are selected as
candidates for mapping to the SPM. Then, the SPMs energy
consumption and performance of each mapping scenario are
calculated and the most efﬁcient mapping scenario is selected
for implementation. The method which used in this study
has also been exploited in many researches on SPM mapping
algorithms.
A dynamic mapping algorithm has been developed for
code section of the programs in [16] which implies hardware
modiﬁcations to the system. This study has introduced a SPM
controller unit that records the corresponding mapping address
of each block on the SPM space. The main difference of
this study and [15] is in the implementation of dynamic
transferring of program blocks to the SPM. This study has
suggested adding a new type of commands to the Istruction
Set Architecture (ISA) of processor, named as SPM Mapping
Instruction (SMI). SMI commands that stall the processor are
executed before the execution of candidate blocks. After this
interrupt, the candidate block is copied from its current address
in the off-chip memory to the allocated SPM space, which
registered in the SPM controller unit. Then in the execution of
program is resumed.
In [17], a dynamic SPM allocation algorithm for mapping
data section of programs has been presented. This study has
concentrated on mapping of arrays to SPM space. Unlike the
studies in [15] and [16], in this work, the related commands
for mapping the arrays are also generated automatically. The
proposed algorithm consists of three consequent steps. First,
the SPM space is partitioned into the sections with different
sizes. Each section of the SPM is then divided into different
parts with the same size alongside the section. In the second
step, the total amount of execution time related to each array
as well as the reference aggregation to the speciﬁc part of
each array is determined based on static proﬁling. Finally,
the candidate parts of arrays are selected and the transition
commands which will be added to the code are generated
automatically.
In recent years, the trend of using NVMs (e.g., STT-RAM,
MRAM, and PCM) in the design of caches and SPMs has
been increased; however, all of the previous work proposing
to use NVM-based SPMs have only concentrated on improving
performance or energy consumption of the system.
A dynamic SPM allocation algorithm has been proposed
in [10] to transfer the best subset of application blocks between
off-chip memory and hybrid SRAM-NVM SPM. Due to high
dynamic energy consumption and write latency of NVM,
write-intensive data blocks are mapped to the SRAM part and
read-intensive data blocks are mapped to the NVM part. In this
way, the write endurance of NVM and the energy consumption
and the latency of the SPM are improved.
In [18],
the energy overhead and the latency of write
operations into NVM cells are signiﬁcantly improved by
decreasing the retention time (the time which an NVM cell
could correctly sustain its value) in the STT-RAM cells . The
proposed algorithm has tried to allocate the STT-RAM part to
blocks with least life-time while keeping other blocks in the
SRAM part across the SPM space.
B. Improving SPM Reliability
To the best of our knowledge, among previous work for
improving SPM reliability, only three methods have targeted
dealing with soft errors caused by high-energy particle strike
while other studies have considered the reliability of SPM
against thermal ﬂuctuation across the SPM space. In this sec-
tion, ﬁrst the previous methods to cope with thermal ﬂuctuation
are reviewed and then studies on protecting the SPM against
soft errors are introduced.
In [19], a dynamic compiler-based mapping algorithm has
been proposed which concentrates on mapping data parts of
program to SPM. In the ﬁrst step of the algorithm, the most
frequently accessed blocks of program are determined. These
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:45:05 UTC from IEEE Xplore.  Restrictions apply. 
blocks mostly include the program loops. In the next step,
the candidate loops are partitioned based on their iterations.
Finally, the algorithm decides to map those loops only in some
of their iterations and leaves the remainder of loop iteration for
the cache. In this way, a thermal balance is formed between
cache and SPM and the algorithm prevents the formation of
hot-spots alongside of SPM and cache space.
Unlike the method presented in [19] which is only appli-
cable on the systems utilizing cache and SPM simultaneously,
a method has been introduced in [20] to improve the thermal
reliability of SPM without engaging other parts of the system.
This study has introduced an algorithm based on the regularity
or irregularity of memory access sequence in each program.
For regular access patterns, a hardware unit manipulates the
address bits of accessed blocks in order to distribute the
blocks alongside the SPM space and prevents the reference
aggregation at a speciﬁc part of SPM. For those programs
that have irregular access patterns,
the program codes are
analyzed and program blocks are categorized into two groups,
namely hot variables and cold variables. Then, the mapping
algorithm tries to map some cold variables between each hot
variable in order to form a thermal balance along SPM space.
As mentioned earlier, there are few studies concentrating
on the reliability of SPM against radiation-induced soft errors.
Indeed, these studies have focused on protecting the SPM
blocks against soft errors without considering the vulnerability
of blocks that should be mapped to the SPM space. The
proposed method in [3] is based on data block duplication
under the control of compiler. This method does not guarantee
to duplicate all data blocks and provides no solution for
updating the replicas.
In [8], with interpretation of Redundant Array of Indepen-
dent Disks (RAID) systems for memories, distributed SPMs
in multicore systems are protected against soft errors. To
reduce energy consumption of extra SPMs accesses due to
RAID architecture, an aggressive voltage scaling is applied
to the system which leads to exponentially increase in the
vulnerability of SPMs against soft errors.
In [7], the reliability of instruction part of SPM has been
increased by the means of traditional protection techniques.
The SPM space in this study is assumed to remain unchanged
during the program execution. Because of this assumption, the
proposed method cannot be applied to data part of SPM due to
frequent data update. In addition, the reliability achievement of
this method is limited to the ability of applied detection and
protection techniques to deal with bit ﬂips, which decreases
with technology scaling.
III. FTSPM: PROPOSED SPM STRUCTURE AND MAPPING
ALGORITHM
In this section,
the hybrid SPM structure as well as
the mapping algorithm of Fault-Tolerant SPM (FTSPM) is
explained in detail. To the best of our knowledge, this is the
ﬁrst work that has proposed to use NVM along SRAM cells
to design a reliable and low-power SPM structure. In addition,
this work has introduced a reliability-aware hybrid SPM space
mapping algorithm. For the NVM part of SPM, STT-RAM