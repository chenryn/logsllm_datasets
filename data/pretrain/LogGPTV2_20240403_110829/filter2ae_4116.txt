# 【技术分享】与Vault7披露相关的Longhorn木马和Black Lambert监控后门分析

#### 译文声明
本文是翻译文章，原文来源：[adelmas.com](https://adelmas.com)。具体内容及含义以原文为准。
译者：[myswsun](http://bobao.360.cn/member/contribute?uid=2606963099)
预估稿费：200 RMB
投稿方式：发送邮件至 linwei#360.cn 或通过网页版在线投稿

## 0x00 前言
几周前，我偶然发现了赛门铁克的一篇文章《Longhorn: Tools used by cyberespionage group linked to Vault 7》。由于最近Shadowbrokers的泄漏已经涵盖了大部分内容，且除了令人厌恶的勒索软件外，我没有找到其他值得研究的东西，因此我迫不及待地开始逆向这个恶意软件。

本文所分析的样本来自R136a1在Kernelmode.info上的分享。非常感谢他的分享。我们将探讨该木马的工作原理及其与Vault7泄漏的关系：

- 所有泄漏文档：[链接](https://fdik.org/wikileaks/year0/vault7/cms/space_11763715.html)
- 网络操作和内存代码执行：[链接](https://fdik.org/wikileaks/year0/vault7/cms/files/ICE-Spec-v3-final-SECRET.pdf)

主要分析集中在Longhorn木马加载器及其内存DLL加载功能上，这些功能被用于执行下载的有效载荷，并确保攻击者不留下任何痕迹。此功能在CIA泄漏的文档中有详细描述。此外，我们还将深入分析隐蔽的监控后门payload（Black Lambert），它被用于针对性攻击，并与CIA工具包相关联。

以下是Longhorn Trojan加载器和模块payload（Black Lambert）的哈希值：
```
[Trojan.LH1 和 Black Lambert 的哈希值]
```

## 0x01 Longhorn加载器的分析：Trojan.LH1

### 1. 持久性
加载器将其自身注册为Windows服务（服务名：BiosSrv）。服务例程启动主线程，连接C&C服务器并等待指令。

### 2. 注册表
使用 `UuidCreate()` 和 `UuidToStringW()` 生成客户端ID，并将其写入 `HKEY_LOCAL_MACHINE\SOFTWARE\BiosInnovations\ClientID`。

### 3. 通信
木马在资源“BINARY”下存储了两个资源：
- 101: SSL证书
- 102: C&C服务器域名

Longhorn使用WinHTTP API解析用户代理设置，并通过SSL与C&C服务器通信。

**安装证书**
为了与C&C服务器通信，Longhorn从其资源中释放一个SSL证书，并使用 `CertAddCertificateContextToStore()` 函数进行安装。该证书用于验证服务器，如果没有证书，访问C&C将显示错误页面。

**C&C**
类似地，C&C域名也从资源节中提取。在这个样本中，域名为 `mercury-vapor.net`。

一旦证书安装完毕且C&C域名提取成功，木马会启动一个线程来连接C&C，接收指令并获取文件。Longhorn使用随机延迟来尝试请求，以尽量保持隐蔽。

以下是URL示例：
```
[URL 示例]
```

### 4. 命令
- checkin
- get-scanner
- put-scan
- put-file
- destroy-agent

### 5. 内存payload加载
加载器的主要目的是下载扫描器，在内存中执行并获取输出。以下是 `get-scanner` 的伪代码：
```c
// 伪代码
```

扫描器使用LZ压缩，加载器使用 `RtlDecompressBuffer` 解压它。然后，加载器在内存中执行模块。具体过程如下：
- 映射PE头
- 映射节
- 映射导入地址表 (IAT)
- 修复内存权限
- 调用入口点和主导出函数

以下是加载扫描器模块DLL并在内存中执行的伪代码：
```c
// 伪代码
```

**与Vault7的ICE规范相似之处**
在这部分，我们将指出与Vault7泄漏规范中的相似之处。可以看到，赛门铁克没有提供更多细节，但加载器确实使用了文档中的多种规范。

首先，我们可以找到不同模块行为（如 ICE_FIRE, ICE_FIRE_AND_FORGET, ICE_FIRE_AND_COLLECT 和 ICE_FIRE_AND_INTERACT）的精确描述。由于Longhorn加载器简单地调用模块的导出函数并等待其返回和输出，而没有创建管道或发送输入，因此我们研究了一个“Fire和Collect”模块。

关于这个模块，它是木马的内存加载恶意软件，在我们的例子中是神秘的扫描器。下面是CIA实现的描述：
```c
// 伪代码
```

这就是我们的加载器：通过ordinal(1)获取导出函数。此外，正如我们所见，一个结构体被填充并传递给模块的导出函数。这个结构体在文档中有详细描述。

在文档的历史版本中，我们找到了Longhorn使用的结构体和扫描器模块的完美匹配。尽管文档指定加载器在加载到内存后不应修改模块的SEH，但我们将在下一部分看到Longhorn确实修改了它。

**修改SEH**
当尝试从使用SEH的内存中加载DLL时，Windows将弹出异常框。我们可以看到Longhorn在其ICE加载例程中修改了这一点。

Windows X86使用的SEH验证例程在此文章中有描述：[链接](https://www.blackhat.com/presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf)

基本检查标记 `ExecuteDispatchEnable` 和 `ImageDispatchEnable` 是否是进程标记，并且如果包含则返回TRUE，否则返回FALSE或 `ACCESS_VIOLATION`。Windows在NTDLL函数 `RtlIsValidHandler()` 中实现了这一验证过程。反汇编后，我们看到它使用参数 `lpProcessInformationClass = 0x22` 调用 `NtQueryInformationProcess()` 来获取 `ProcessExecuteFlags`。然后检查是否包含 `ImageDispatchEnable | ExecuteDispatchEnable = 0x30`。

以下是内存加载DLL的主函数：
```c
// 伪代码
```

SEH修改发生在 `hook_fix_seh()` 函数中。通过5字节Jmp的方式HOOK了 `NtQueryInformationProcess()`，指向 `hooker_NtQueryProcessInformation()`。以下是ntdll中的该函数的反汇编：
```asm
; 反汇编代码
```

正如我们所见，第一条指令是 `mov eax, IMM`，可以简单地使用一个jmp来覆盖。以下是加载器的新函数的伪代码：
```c
// 伪代码
```

这将强制 `NtQueryProcessInformation` 总是返回 `ImageDispatchEnable | ExecuteDispatchEnable`，使得 `RtlIsValidHandler()` 总是返回TRUE，从而使Windows认为SEH是正确的，不会显示错误。

**扫描器的输出**
扫描器的输出存储在一个文件中，路径由加载器的 `-o` 命令指定。当扫描器完成后，加载器使用 `MapViewOfFile()` 将输出文件映射到内存中，并通过POST请求发送到以下网页：
```
https://[CnC Domain]/agent/put-scan
```

## 0x02 逆向Vault7的监控后门：Black Lambert

卡巴斯基撰写了一篇关于Lambert恶意软件家族的文章，并将其与CIA工具包关联起来：[链接](https://securelist.com/blog/research/77990/unraveling-the-lamberts-toolkit/)。我们将分析其中之一：Black Lambert。

### 1. ICE模块
Black Lambert 是一个ICE模块payload，通过 ordinal(1) 导出了其入口点，名称并无可疑之处。根据Vault7的规范（上文），原始恶意软件名为 `winlib.dll`。

此外，该函数的参数完美匹配了 `MODULE_REMOTE_ARGS` 结构体。以下是导出函数的伪代码：
```c
// 伪代码
```

这证明了这两个恶意软件是同一部分。

### 2. 解密字符串
恶意软件中的大多数字符串都是加密的，通过偏移量 `0x10029C20` 处的函数解密。我将解释解密过程，并提供IDAPython脚本来解密字符串并添加注释。

**解密过程**
加密字符串存储在DWORD块中。第一个DWORD是加密字符串的数量。
- 字符串数量通过与 `0x90E7B322` 异或解码得到。
- 主要字符串的解密是多个逻辑运算符的组合。

进一步分析表明，Black Lambert 存储了命令列表，结构体如下：
```c
// 结构体定义
```

由于有超过50个结构体，解密加密字段将有助于我们了解后门的类型。我提供了IDAPython脚本以解密所有加密字符串和命令。

**IDAPython脚本**
以下是用于解密字符串并添加注释的IDAPython脚本。我还增加了一个函数来解密并重命名木马实现的命令：
- [脚本链接](https://gist.github.com/adelmas/678d3274c2656b91888e6aa903e05df6)
- [解密后的字符串](https://gist.github.com/adelmas/9a35488337ea33d935333ef11f16ec37)

恶意软件中注释了超过1000个解密字符串。每个操作后都会发送消息字符串（并清空），这使得逆向变得更快。

现在我们有了解码的字符串，可以找到与Black Lambert相关的构建数字（参见卡巴斯基的文章）。

### 3. 命令
前面的解混淆脚本还解密了命令并在IDA中重命名了它们。脚本的输出如下，在Black Lambert中有大量命令：
```c
// 命令列表
```

这些命令与Vault7中的CIA工具有关：[链接](https://wikileaks.org/vault7/document/Athena-v1_0-UserGuide/Athena-v1_0-UserGuide.pdf)。同时，查看命令列表及其实现让我想起了Duqu2.0，Black Lambert确实被Avira和Windows的AV标记为Duqu2。

大多数命令的名字都很容易理解：
- `cmd_cat*`：横向移动（参见下文）
- `cmd_wincontrol`：发送消息和窗口对象（参见下文）
- `cmd_idlewatch`：获取当前用户的上次输入（参见下文）
- `cmd_hash`：使用 `CryptHashData()` 计算文件哈希
- `cmd_at`：使用 `NetScheduleJobAdd()` 添加计划任务

接下来，我们将快速浏览一些有趣的命令和Black Lambert与Duqu2共有的功能。

### 4. 横向移动
`Catinstall` 命令：安装DCOM加载器
后门用于通过网络共享感染本地网络。它将连接远程计算机，添加防火墙规则，创建 `$IPC` 和 `$ADMIN` 共享，释放恶意软件副本，并最终移除共享。
- CLSID参考值：`{b7867b64-a163-4e5d-93bb-76e0cef7153b}`

### 5. 监控后门的功能

**远程桌面管理**
- `Cmd_idleWatch` 命令使用 `GetLastInputInfo()` 获取上次输入时间，并根据时间戳发送通知字符串。
- `Cmd_screenshot`：标准截屏功能
- `Cmd_winlist`：获取打开的窗口列表，以便准备下一条命令。
- `Cmd_winControl`：使用 `SendInput()` 发送鼠标事件，并使用 `PostMessage()` 和 `SendMessageTimeout()` 直接访问窗口对象。结合Black Lambert使用 `CreateDesktopW()` 创建的隐藏桌面，这使得攻击者可以在受害者看不见的情况下控制任何GUI应用程序。以下是一些窗口消息：
  - `0x188`：LB_GETCURSEL
  - `0x18A`：LB_GETTEXTLEN
  - `0x189`：LB_GETTEXT
  - `0x149`：CB_GETLBTEXTLEN
  - `0x147`：CB_GETCURSEL
  - `0x148`：CB_GETLBTEXT
  - `0x111`：WM_COMMAND
  - `0x010`：WM_CLOSE
  - `0x00D`：WM_GETTEXT

此外，Black Lambert 还能移动鼠标指针并左击（通过发送 `MOUSEEVENTF_*` 命令）。

**ModLoad命令**
该命令从内存加载DLL并调用 `DllMain()`。注意它没有使用ICE模块规范。

**网络和文件命令**
这部分没什么特别的，命令名称很明显。

**信息收集命令**
这是网络间谍恶意软件常见的数据收集命令。它们很标准：
- 检测进程是否运行在VMWare或Virtual PC中，可能受到以下文章启发：[链接](https://www.codeproject.com/Articles/9823/Detect-if-your-program-is-running-inside-a-Virtual)
- 使用 `cmd_strings` 查找字符串
- 使用 `cmd_match` 查找文件名匹配
- 使用 `cmd_get` 命令获取文件

## 0x03 Yara规则
以下Yara规则用于检测Longhorn木马和Black Lambert。请注意，我没有在我的恶意软件转储中发现更多样本，这两个恶意软件可能仅用于感染特定的计算机和网络，数量有限。

```yara
rule Longhorn_Trojan {
    meta:
        description = "Detects the Longhorn Trojan"
        author = "Your Name"
        date = "2023-10-01"
    strings:
        $a = { ... } // 特征码
        $b = { ... } // 特征码
    condition:
        all of ($*)
}

rule Black_Lambert {
    meta:
        description = "Detects the Black Lambert backdoor"
        author = "Your Name"
        date = "2023-10-01"
    strings:
        $a = { ... } // 特征码
        $b = { ... } // 特征码
    condition:
        all of ($*)
}
```

希望这篇优化后的文章更加清晰、连贯和专业。如果有任何进一步的问题或需要更多的信息，请随时告诉我。