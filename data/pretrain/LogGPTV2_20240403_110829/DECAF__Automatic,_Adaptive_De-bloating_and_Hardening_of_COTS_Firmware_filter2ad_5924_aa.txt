title:DECAF: Automatic, Adaptive De-bloating and Hardening of COTS Firmware
author:Jake Christensen and
Ionut Mugurel Anghel and
Rob Taglang and
Mihai Chiroiu and
Radu Sion
DECAF: Automatic, Adaptive De-bloating and 
Hardening of COTS Firmware
Jake Christensen, Private Machines; Ionut Mugurel Anghel, 
Univ. Politehnica Bucharest; Rob Taglang, Private Machines; Mihai Chiroiu, 
Univ. Politehnica Bucharest; Radu Sion, Private Machines
https://www.usenix.org/conference/usenixsecurity20/presentation/christensen
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.DECAF: Automatic, Adaptive De-bloating
and Hardening of COTS Firmware
Jake Christensen
Ionut Mugurel Anghel
Rob Taglang
Private Machines
Univ. Politehnica Bucharest
Private Machines
Mihai Chiroiu
Radu Sion
Univ. Politehnica Bucharest
Private Machines
Abstract
Once compromised, server ﬁrmware can surreptitiously and
permanently take over a machine and any stack running
thereon, with no hope for recovery, short of hardware-level
intervention. To make things worse, modern ﬁrmware con-
tains millions of lines of unnecessary code and hundreds of
unnecessary modules as a result of a long ﬁrmware supply
chain designed to optimize time-to-market and cost, but not
security. As a result, off-the-shelf motherboards contain large,
unnecessarily complex, closed-source vulnerability surfaces
that can completely and irreversibly compromise systems.
In this work, we address this problem by dramatically and
automatically reducing the vulnerability surface. DECAF is
an extensible platform for automatically pruning a wide class
of commercial UEFI ﬁrmware. DECAF intelligently runs
dynamic iterative surgery on UEFI ﬁrmware to remove a
maximal amount of code with no regressive effects on the
functionality and performance of higher layers in the stack
(OS, applications).
DECAF has successfully pruned over 70% of unnecessary,
redundant, reachable ﬁrmware in leading server-grade moth-
erboards with no effect on the upper layers, and increased
resulting system performance and boot times.
1 Introduction
Millions of lines of C, assembly, and microcode compose the
binaries residing on today’s motherboards.
Firmware is essential in managing and running the un-
derlying hardware. Yet, due to the complicated and inher-
ently market-driven process of hardware manufacture and
sale, much of the ﬁrmware delivered with modern mother-
boards is not necessary for the hardware on which it ships.
Manually customizing ﬁrmware for a given motherboard
and application is simply not practical. It can take thousands
of hours of work to do right and is not scalable to constantly
changing hardware, purchasing decisions, environments, and
applications of modern consumers and corporations.
As a result, a typical supply chain for Uniﬁed Extensi-
ble Firmware Interface (UEFI) ﬁrmware starts with EDK
II [3], the open source reference UEFI implementation from
TianoCore. The EDK II project measures up to roughly 2.5
million lines of code. Vendor speciﬁc implementations tend to
be even larger. A motherboard ﬁrmware company (American
Megatrends, Phoenix Technologies, etc.) adds the necessary
modules from Intel for a particular chipset along with any
other modules needed for their base design. Motherboard
manufacturers (Dell, ASUS, etc.) then add further modules
required to enable proprietary hardware or management fea-
tures, further bloating the ﬁrmware which ultimately ships
with the hardware. More details about the ﬁrmware layout
and the role of modules are given in Section 2.2
Due to the nature of this supply chain, the ﬁrmware trades
hands numerous times before it is delivered to a board and
ultimately to an end user. At each stage, modules are added to
the ﬁrmware, but typically, for time and cost reasons, nothing
is optimized or removed, including any generic modules that
do not apply to the speciﬁc hardware being delivered.
Furthermore, ﬁrmware ﬁxes are often neglected even for
motherboards only 6-12 months old. Worse still, even when
acting in good-faith, it is difﬁcult for manufacturers to ﬁx
bugs which may originate in a module from an upstream,
generic ﬁrmware vendor that propagate down to speciﬁc moth-
erboards. Addressing this problem is not trivial and places
security-conscious users in a difﬁcult position.
Most importantly, very large portions of existing ﬁrmware
are unnecessary, signiﬁcantly increasing the vulnerability
surface of a system and degrading performance. A bloated
ﬁrmware code base is not only a problem in terms of perfor-
mance and boot time, but also has major security implications.
A recent study has shown that because of the predictable
supply chain, the numerous additional modules in UEFI im-
ages, and large amount of code reuse between images, certain
attacks can be easily and reliably automated [45].
This is not a problem unique to ﬁrmware. In today’s highly
over-provisioned systems, it is simply cheaper and easier to
pile onto an existing code base than to design from the ground
USENIX Association
29th USENIX Security Symposium    1713
up. Modern software is bloated and routinely uses only a few
percentage points of the binary code. A recent study has
shown that only 10% of the shared libraries in Ubuntu 16.04
are used by actual programs [32].
To make matters worse, in the case of ﬁrmware, exploits can
completely compromise an entire system, including any trust
chains and security mechanisms such as “secure boot” [11].
Short of physical intervention and hardware reﬂashing, users
are often left with completely insecure systems, without any
ability to even detect the breach.
One of the ﬁrst steps that can be taken is to reduce this
vulnerability surface by eliminating any unnecessary bloat.
This results in a linear reduction of the overall vulnerability
surface and availability of exploits.
In this work we propose to automatically and dynamically
prune signiﬁcant amounts of unnecessary binary code from
a large class of COTS ﬁrmware without impacting the func-
tionality of the upper layer of the stack (OS, applications).
1.1 UEFI Has a Quality Problem
Bloat is not the only problem with UEFI. There are a great
many vulnerabilities in the wild that are completely avoid-
able, but exist due to manufacturer negligence. Many common
attack vectors on UEFI have modern mitigations that manu-
facturers fail to properly conﬁgure.
In a survey of ﬁrmware vulnerabilities [29] covering 2015-
2017, not only are the total numbers concerning, but there
is also an increasing trend in the number of vulnerabilities
due to lack of proper conﬁgurations of increasingly numerous
security options.
Firmware expert Nikolaj Schlej, perhaps best known as the
author of the widely used and popular UEFITool [36], has
been sounding the alarm for years through various of talks
and presentations. For example, in [38] numerous vulnerabil-
ities for off the shelf ﬁrmware are introduced. Compelling
arguments are made for users to immediately patch their own
systems rather than wait for manufacturer ﬁrmware updates
which may never come and rarely address bugs in time. "[I]f
the ﬁrmware can still boot your OS - it’s ﬁne to have [...]
components removed".
Unfortunately, this is easier said than done. For users (ei-
ther consumer or enterprise) of off-the-shelf ﬁrmware, it is
effectively a proprietary black box. Users do not have the
expertise and tools to properly prune a BIOS. They are thus
often left with 3-5 year old ﬁrmware with no recourse. This
is one of the main motivators behind DECAF, namely em-
powering non-expert users to easily remove old, unwanted or
buggy functionality from their ﬁrmware.
Since much of the ﬁrmware is closed-source, it is difﬁcult
to precisely evaluate ﬁrmware code quality and whether it is
that much better than the abysmal industry average featuring
multiple bugs for every hundred lines of code [25].
Yet, analysing open-source Intel code provides some in-
sight into what might be going on behind the scenes [37]. For
example, for the Intel Galileo board, using only a static code
analyzer restricted to search only for "obviously incorrect
code fragments" numerous bugs can be found, which appear
to be the result of lazy copy-pasting.
1.2 DECAF
Debloating is perfectly suited to ﬁrmware hardening because
of the previously described supplier model. If done properly,
as a result of the UEFI structure, it can be applied at module
granularity to any motherboard, even without access to the
source code.
DECAF is an extensible platform for automatically prun-
ing a wide class of commercial UEFI ﬁrmware. It utilizes a
conﬁgurable set of validation tests to tailor the retained func-
tionality to a particular use-case and intelligently performs a
dynamic iterative surgery process on UEFI binary ﬁrmware
to remove a maximal amount of code with no effect on func-
tionality and performance of higher layers in the stack (OS,
applications).
DECAF also supports module white and black listing to
take advantage of prior knowledge of the target ﬁrmware. For
example, an in-BIOS DHCP implementation is needed (for
example, for PXE boot), and the given ﬁrmware contains two
implementations: one from the EDK II standard and one from
the manufacturer. In this case, we can, for example, black list
the implementation from the manufacturer and white list the
open source one.
We evaluated DECAF experimentally in two conﬁgura-
tions: one targeted at running cloud hypervisors, and one
targeted at maximal byte removal (booting off of local media).
Results show that up 30% of the codebase can be pruned
automatically in the ﬁrst case and up to 70% in the latter with
no impact on the upper layers. The resulting ﬁrmware boots
signiﬁcantly faster as well.
At ﬁrst, it may seem that code that does not affect func-
tionality is unreachable, and thus its removal may be of little
security beneﬁt. This, however, is not the case. Most ﬁrmware
contains active, reachable code that is simply unused by the
upper layers but poses signiﬁcant vulnerability challenges
(e.g. multiple network stacks, obsolete drivers for tens of pe-
ripherals/USB/VGA, entire GUIs, etc.). Indeed, the fact that
pruned ﬁrmware boots signiﬁcantly faster than original im-
ages is incontrovertible evidence that the execution path is
modiﬁed. In summary:
1. DECAF is the ﬁrst extensible platform for automatically
pruning commercial UEFI ﬁrmware.
2. DECAF can automatically prune up to 70% of a UEFI
image.
3. DECAF includes a framework for automatic testing of
UEFI images on real boards.
1714    29th USENIX Security Symposium
USENIX Association
4. DECAF operates on binaries (no need for source code)
and can easily integrate with and operate on new moth-
erboards.
5. DECAF has been successfully applied on multiple (6)
motherboard lines; more are added periodically.
6. DECAFed ﬁrmware has been successfully running
in a production-grade data center environment since
mid 2017.
7. UEFI ﬁrmware can be easily customized to retain or
remove only desired functionality.
2 Background
2.1 UEFI
UEFI (originally EFI) was developed to replace legacy BIOS
with a more standardized solution in order to improve inter-
operability between vendors.
UEFI splits the lifetime of platform initialization into 4
distinct phases: (1) Security (SEC), (2) Pre-EFI Initialization
Environment (PEI), (3) Driver Execution Environment (DXE),
(4) Boot Device Selection (BDS).
The SEC stage is the root of trust of the system and
does very early hardware initialization and validation of the
ﬁrmware image. It then bootstraps and hands execution off to
the PEI stage. The PEI stage ﬁnalizes hardware initialization.
It enumerates platform information into a series of Hand Off
Blocks (HOBs) that are handed off to the DXE stage. The
PEI stage execution is heavily dependent on the processor
architecture as it only initially uses resources on the CPU
until main memory (RAM) is conﬁgured. Indeed, it is up to
the ﬁrmware to initialize the main memory (which happens in
the PEI stage under the UEFI spec). The code residing in this
stage is generally designed to be as simple as possible, while
the more advanced logic is handled later in the DXE stage.
The DXE stage loads what could be considered the user
space UEFI environment. Driver interfaces are installed onto
the initialized hardware to be used in the process of booting
the operating system and during OS runtime. It is respon-
sible for discovering, loading, and executing drivers in the
correct order. Finally, the DXE stage passes control to the
BDS where the OS boot loader takes over execution. A visual
representation of this process can be seen online [41].
In the context of this project, pruning is performed on the
modules executed in the PEI and DXE stages.
2.2 Firmware Layout
At a high level, UEFI ﬁrmware is composed of a ﬂash de-
scriptor region that identiﬁes other regions in the image. This
may include ﬁrmware for the Intel R(cid:13) Management Engine, or
e.g. the network interfaces. The region of interest here is the
BIOS region that follows afterwards.
The BIOS region space is split up into ﬁrmware volumes,
each containing a collection of modules, Figure 1. Typically
modules are grouped into a volume by their execution stage
in UEFI. So, for example, one volume will contain the core
start-up module for the DXE stage along with all of the other
DXE modules to be executed.
A module contains one or more sections. Most importantly,
some modules, but not all, contain a PE32 binary section that
will be executed by the system at runtime.
Figure 1: UEFI BIOS region layout
This project aims to exploit the modular nature of UEFI
ﬁrmware in order to reduce the attack surface area of all moth-
erboards that conform to the UEFI speciﬁcation. Individual
modules can be removed, with the BIOS region and ﬁrmware
volumes rebuilt into a new, pruned image.
In 2017, Intel made a statement that they would be ending
support for legacy BIOS compatibility by 2020 [23]. With
manufacturers abandoning older proprietary legacy BIOS,
this approach will continue to be valid for new motherboards.
2.3 Modules and Dependencies
For executable UEFI modules, one of the sections will contain
a PE32 binary image. This is a standalone executable that is
dispatched by the ﬁrmware. Executable modules will also con-
tain a dependency (DEPEX) section, which will determine the
order in which the modules are executed. During execution,
modules will install pointers to functions using UEFI system
functions. The installed functions are called protocols and
are identiﬁed by Globally Unique Identiﬁers (GUIDs). Other
modules use these GUIDs to look up the installed protocols
and call into them. This is how standalone modules inter-link.
Each module has a DEPEX section that tells the DXE
dispatcher what modules and protocols need to be initialized
prior to executing it. If the DEPEX expression evaluates to
true (i.e., required modules and protocols have already been
loaded), the module can be loaded, otherwise it is postponed.
Unfortunately, the dependency section is not very helpful in
determining which modules actually depend on one another.
Protocols may be listed in the dependency section strictly to
USENIX Association
29th USENIX Security Symposium    1715
BIOS RegionFirmware VolumeModuleSectionFirmware VolumeModuleModuleSectionchange the dispatching order, not because the binary actually
looks up the protocol and uses it. Likewise, protocols used
by a module do not need to be listed in the DEPEX section if
the protocol will already be installed by the time the module
runs. A module may also have a soft dependency where it
looks up a protocol, but still performs some valid behavior
even if it is not present. The DEPEX section may be omitted
entirely, in which case the module can be loaded right away.
What is more, dependencies can be changed at runtime (when
the DEPEX expression is evaluated), depending on various
events in the environment. In short, the dependency section is
only a reliable source of information for dispatch order, not
for determining actual dependencies between modules.
There has been some work in reverse engineering these
dependency lookups, but in a somewhat limited fashion. The
method in [8] involved setting up a fake UEFI environment
and then executing individual modules within that environ-
ment. Unfortunately, this does not fully account for system
state when the modules are loaded, and modules that interact
directly with hardware will not function properly. The only
way to fully identify these dependencies would be to mon-
itor the installation and lookup of protocols in the context
of the real system. We detail this approach and explain our