# Title: Getting to Know Your Card: Reverse-Engineering the Smart-Card Application Protocol Data Unit for PKCS#11 Functions

## Authors:
- Andriana Gkaniatsou
- Fiona McNeill
- Alan Bundy
- Graham Steel
- Riccardo Focardi
- Claudio Bozzato

## Affiliations:
- 1 University of Edinburgh
- 2 Heriot-Watt University
- 3 Cryptosense
- 4 Ca’ Foscari University

## Abstract
This paper presents a method for reverse-engineering the communication protocol between smart cards and their host systems, specifically focusing on the implementation of PKCS#11 functions. The REPROVE system is introduced as a tool for this purpose, which does not require access to the card's code or the API.

## 1. Problem Definition
Smart cards are secure, trusted, and tamper-resistant devices used for identification, authentication, data storage, and application processing in financial, communication, security, and data management contexts. However, the low-level implementation of PKCS#11 functions in these cards is often proprietary and opaque, making it difficult to verify their security and compliance with standards.

## 2. Methodology
### 2.1 Smart-Card Communication
The ISO/IEC 7816 standard defines the communication layer between the card and the reader. Key parts include:
- **Part 4**: Organization, security, and commands for interchange.
- **Part 8**: Commands for security operations.
- **Part 9**: Commands for card management.

### 2.2 APDU Command Structure
APDU (Application Protocol Data Unit) commands have the following structure:
- **CLA**: Instruction Class
- **INS**: Instruction Code
- **P1-P2**: Instruction Parameters
- **LC**: Length of sent data
- **D**: Sent data
- **LE**: Length of expected data

Example: `00 A4 08 0C 04 50 15 44 00 01`
- **CLA**: 00
- **INS**: A4
- **P1-P2**: 08 0C
- **LC**: 04
- **D**: 50 15 44 00
- **LE**: 01

### 2.3 Analysis Challenge
The challenge is to infer the semantics of proprietary commands, such as determining the meaning of `21 7 → a4`.

### 2.4 REPROVE System
REPROVE is a reverse-engineering system that:
- Does not require API access or card access.
- Is implementation-independent.
- Involves:
  - **APDU Semantics**
  - **On-card Operations**
  - **PKCS#11 Function Translation**

### 2.5 APDU Modelling
PKCS#11 functions are expressed as sets of functionalities. For example, `C_logIn` involves:
- Inputs/outputs specified by PKCS#11.
- Authentication as defined by ISO 7816.
- Additional operations like key usage, PIN verification, and internal data handling.

### 2.6 Reverse-Engineering Main Idea
The process involves:
1. **Step 1: Semantics of APDU** - Valid mappings and paths for functionalities.
2. **Step 2: On-card Operations** - Identifying how on-card operations are executed.
3. **Step 3: PKCS#11 Function** - Connecting PKCS#11 functionalities to paths.

## 3. REPROVE Evaluation
### 3.1 Experiments
- **Sniﬀed APDUs** from 5 commercially available smart cards.
- **PKCS#11 Functions** evaluated: `C_logIn`, `C_generateKey`, `C_sign`, `C_encrypt`, `C_findObjects`, `C_getAttributeValue`, `C_setAttributeValue`, `C_wrapKey`, `C_unwrapKey`.

### 3.2 Evaluation Metrics
- **Functional Success**: Successfully inferred at least one model.
- **Quality of Results**: Apart from 3 cases, a unique model matched exactly. In 3 cases, correct on-card operations were identified, with 2 suggested models and 1 exact match.
- **Search-Space Restriction**: No explosion in the search space.

### 3.3 Search-Space Sample
| Function | Card 2 | Card 4 | Card 5 |
|----------|--------|--------|--------|
| C_logIn  | 4      | 1      | 69     |
| C_findObjects | 3   | 400    | 512    |
| C_generateKey | 540x868 | 14     | 86     |
| C_setAttributeValue | 3 | 20     | 65     |
| C_encrypt | 7396   | 6      | 7396   |
| C_sign   | 54700816 | 1      | 86     |
| C_getAttributeValue | 1 | 1      | 53     |
| C_wrapKey | 12322  | 1      | 1      |

### 3.4 Violations Found
- **c_logIn Function**:
  - No session handles: All cards.
  - No verification: 1 card.
  - PIN sent in plaintext: 2 cards.
- **c_wrapKey Function**:
  - Function executed library-side: Sensitive keys sent in plaintext (1 card).
- **c_generateKey Function**:
  - Function executed library-side: Sensitive keys sent in plaintext (2 cards).
- **c_encrypt Function**:
  - Function executed library-side: Sensitive keys sent in plaintext (1 card).

## 4. Discussion
### 4.1 Inferred Model
- **3 Abstractions of the Protocol**: 7 levels of attacks.
- **Commands**: Semantics of exchanged commands, identifying sensitive data, injecting commands, and blinding reply sessions.
- **On-Card Operations**: Execution of on-card operations, performing unauthorized operations.
- **PKCS#11 Interconnection**: How specific cryptographic functions are executed at the APDU layer, enabling PKCS#11 attacks to bypass API restrictions.

### 4.2 Example
- **Sniﬀed Trace**:
  ```
  >00a4080c0450154400
  >9000>800a0200ea
  >Response
  >00a4080c08501550724b025502
  >9000>80bb01b803840102
  >9000>80aa808602ffff
  >Response
  ```

## 5. Conclusion
REPROVE is a fully automated system for reverse-engineering APDUs and discovering their interconnection with PKCS#11 functions. It does not require access to the card's code or the API, allowing for the verification of whether the card respects the standard. Two tested cards did not comply, and the system can be used to access PKCS#11 objects from the low level, bypassing API restrictions.

---

**Andriana Gkaniatsou**  
*Getting to Know Your Card: Reverse-Engineering the Smart-Card Application Protocol Data Unit for PKCS#11 Functions*