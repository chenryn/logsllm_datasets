title:Implementation and evaluation of a distributed and cooperative load-balancing
mechanism for dependable volunteer computing
author:Yoshitomo Murata and
Tsutomu Inaba and
Hiroyuki Takizawa and
Hiroaki Kobayashi
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Implementation and Evaluation of a Distributed and Cooperative
Load-Balancing Mechanism for Dependable Volunteer Computing
Yoshitomo Muratat, Tsutomu Inabatt, Hiroyuki Takizawat, Hiroaki Kobayashitt
tGraduate School of Information Sciences, Tohoku University, Sendai 980-8578, Japan
tInformation Synergy Center, Tohoku University, Sendai 980-8578, Japan
ttNTT East Corporation, Miyagi 984-8519, Japan
PI:EMAIL, PI:EMAIL, {tacky,koba}@isc.tohoku.ac.jp
Abstract
This paper proposes a P2P-based dynamic load balanc(cid:173)
ing mechanism to increase the dependability of volunteer
computing. The proposed mechanism is incorporated into a
volunteer computing middleware, called the Berkeley Open
Infrastructure for Network Computing(BOINC). The pro(cid:173)
posed mechanism provides two additional features: decen(cid:173)
tralized load balancing and proxy download. The former
feature reduces the variation of the execution times for in(cid:173)
dividual tasks, which are usually aggravated by dynamic
and unpredictable load changes on volunteer computing re(cid:173)
sources. The latter offers another way to assign tasks to idle
computing resources when the BOINC project server fails
in the task assignment. Using a prototype implementation,
this paper examines the effect of the proposed mechanism
on the performance of a real volunteer computing system.
The experimental results show that the proposed mechanism
can reduce the maximum turnaround time by 42% and fur(cid:173)
ther improve the total throughput ofthe volunteer comput(cid:173)
ing system by 27%.
1. Introduction
Thanks to the rapid evolution in computer and communi(cid:173)
cation technologies, high-performance computers and high(cid:173)
speed networks have become commonplace even for ordi(cid:173)
nary consumers. However, the consumers use the comput(cid:173)
ers only for word processing, e-mail and web browsing, and
so on; those computers seldom run out of their performance
and are almost always idle. Volunteer computing [3] is a
new and promising style of large-scale distributed comput(cid:173)
ing, which uses such idle computing resources of individu(cid:173)
als. There are many volunteer computing projects that ex(cid:173)
ploit the computing power of idle computers for distributed
computing applications [2, 4].
One important feature of a volunteer computing resource
is that its available computing power dynamically changes
according to the local processes launched by the owner.
Therefore, a volunteer computing system cannot guarantee
to achieve a certain processing speed in terms of both task
execution and the entire computation. The processing al(cid:173)
located for volunteer computing resource is unexpectedly
stalled when the allocated resource becomes suddenly busy,
resulting in the long delay in the execution time of the vol(cid:173)
unteer computing task. Therefore, dynamic load balancing
by monitoring changes in the load of each resource and ap(cid:173)
propriately reassigning tasks is required to increase the de(cid:173)
pendability of volunteer computing systems.
So far, we have proposed a distributed and cooperative
load balancing mechanism, which is a P2P-based schedul(cid:173)
ing mechanism for large-scale distributed computing envi(cid:173)
ronments [8]. The simulation results show that our mech(cid:173)
anism can effectively perform dynamic load balancing on
large-scale distributed computing environments, in which
quite a huge number of idle computing resources are in(cid:173)
cluded.
In this paper, we design and implement a dynamic
load balancing mechanism for dependable volunteer com(cid:173)
puting. We extend a distributed computing middleware,
called Berkeley Open Infrastructurefor Network Computing
(BOINC) [1]. Although BOINC is one of the most popular
platforms to realize a volunteer computing, it does not offer
explicit mechanisms for dynamic load balancing. There(cid:173)
fore, this paper incorporates our load balancing mechanism
into BOINC, and improves its dependability in terms of ef(cid:173)
ficiency of volunteer computing.
In the original BOINC, the project server assigns tasks
to each client during the computation, referred to as ver(cid:173)
tical scheduling. On the other hand, in the proposed task
scheduling mechanism, each client can exchange its tasks
with others so as to minimize the execution time by dy(cid:173)
namic load balancing among clients, referred to as horizon-
1-4244-2398-9/08/$20.00 Â©2008 IEEE
316
DSN 2008: Murata et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:10:16 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
tal scheduling. Since the vertical scheduling and the hor(cid:173)
izontal scheduling can be done independently, both can be
simultaneously applied to task scheduling ofvolunteer com(cid:173)
puting. As a result, the BOINC-based volunteer computing
proj ect can benefit from the dynamic task scheduling pro(cid:173)
vided by the proposed implementation.
The rest of this paper is organized as follows. Section 2
briefly reviews the BaINe platform used as the base system
of our implementation, and points out its problems. Section
3 describes our distributed and cooperative load balancing
mechanism, and also shows two features of the mechanism
that can solve the problems of the BOINC platform.
In
Section 4, we design an effective implementation that in(cid:173)
corporates the load balancing mechanism into the BOINC
platform. Then, Section 5 shows the experimental results
to evaluate the effects of dynamic load balancing on the
BaINC platform. Finally, Section 6 gives concluding re(cid:173)
marks and our future work.
2. Berkeley Open Infrastructure for Network
Computing
2.1. BOINC Platform
BOINC is the most popular middleware to realize a vol(cid:173)
unteer computing project [1]. Currently, BOINC is used in
a number of projects [2, 4, 5, 9].
The BOINC platform consists of the BOINC project
server programs and the BOINC client programs. The
project server programs are used by operators of a volun(cid:173)
teer computing project, and the client programs are exe(cid:173)
cuted on each computing resource whose computing power
is devoted to the project. The project server programs and
the client programs communicate using the hypertext trans(cid:173)
fer protocol (HTTP).
A project server is composed of several components:
Web interfaces, a task server, a data server, a database
server and backend programs [3]. A minimum unit of
task processed in volunteer computing is called a work unit
CWU), and the project server stores WUs in a database.
When the project server receives a WU request from a
BaINC client,
it retrieves unprocessed WUs from the
database and sends them to the client by HTTP. When a
BaINC client completes processing of WUs, it uploads the
results onto the project server by HTTP, and the results are
finally stored in the database.
A BaINC client is composed of three components: a
BOINC core client, an application client, and a client man(cid:173)
agement software. The BOINC core client is the main com(cid:173)
ponent of the client programs. To process WUs, the core
client invokes the application client program. The core
client is also responsible for downloading WUs and upload(cid:173)
ing the results. The client management software is an op-
tional component of BOINC client programs. It is used to
allow a user to control the BOINC core client. The commu(cid:173)
nication protocol between the BaINC core client and the
management software is defined as BOINC GUI-RPC.
Volunteer computing using the BOINC platform is sum(cid:173)
marized as follows. First,
the project operator registers
WUs of a volunteer computing project to a database used
by the project server in advance. Then, volunteers can par(cid:173)
ticipate in the project by installing, running, and configuring
the BOINC clients programs on their computing resources.
The core client on each computing resource downloads ap(cid:173)
plication programs and WUs from the project server. The
application programs run to process the WUs only when
the computing resource is in the idle state. Finally, the
BOINC core client uploads the processed results to the
project server.
2.2. Requirements for Dependable Volun(cid:173)
teer Computing
BOINC offers necessary features to realize a volunteer
computing project. However, BaINC cannot guarantee to
keep holding the current performance of a volunteer com(cid:173)
puting project, because the effective computing power of
each client being devoted to the project changes dynami(cid:173)
cally.
In the following two subsections, we point out two
problems that decrease the dependability of a BOINC-based
volunteer conlputing project regarding its conlputing effi(cid:173)
ciency.
2.2.1
Increase in Turnaround Time
To mitigate the load concentration on the project server and
improve the efficiency of a volunteer computing system,
BOINC allows the project server to dispatch two or more
WUs to a client at a time. However, in a practical envi(cid:173)
ronment, the load of every client dynamically changes. In
addition, every client often leaves from the volunteer com(cid:173)
puting system due to shutdown, hardware failures, and so
forth. Therefore, it is difficult to estimate the time required
by a client to process a WU. Moreover, WUs may indef(cid:173)
initely remain unprocessed if the client processing them
leaves from the volunteer computing system. As a result,
the turnaround time from the WU download to the result
upload varies widely and the variation severely degrades the
performance of the volunteer computing system.
By introducing the deadline to completion of each task
when it is allocated to a client, BaINC project server avoids
If the results are not up(cid:173)
waiting forever for the results.
loaded until the deadline, the allocated WU is considered
failure and the project server reassigns the WU to another
client. However, such a reassignment wastes the computa(cid:173)
tion power already used for the failed WU. Moreover, the
1-4244-2398-9/08/$20.00 Â©2008 IEEE
317
DSN 2008: Murata et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:10:16 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
turnaround time from the first WU download to the final
result upload is still long compared to that of the WU suc(cid:173)
cessfully processed at the first assignment. Accordingly, a
mechanism to increase the number of WUs whose results
are uploaded before the deadline is required to enhance the
dependability of volunteer computing.
2.2.2 Failure of WU Downloading
In the BOINC platfonn, each client itself first downloads
WUs. If a client fails in downloading, it cannot work for
volunteer computing at all, and remains idle until it suc(cid:173)
cessfully downloads WUs. WU downloading fails when
the project server is busy, because the busy project server
rejects some WU requests from clients. If a WU request is
rejected, a client must again request WUs to the server after
a certain period. In the BOINC client, the random exponen(cid:173)
tial backoff approach is employed to avoid conflicts among
clients [3]. As a result of frequent failures, therefore, the
idle time of a client increases exponentially. The comput(cid:173)
ing power available at that time for volunteer computing is
unused, and the utilization ratio of idle clients decreases.
The above discussion suggests that a mechanism to avoid
failing in WU downloading and further reduce the overhead
of the failure is required to effectively use idle clients in
volunteer computing. One approach is to manage the tim(cid:173)
ings of all accesses to the server and thereby efficiently
distribute WUs among clients. However, in the BOINC
platfonn, every client independently works and there is no
mechanism for the clients to work in a coordinated man(cid:173)
ner. Consequently, an additional mechanism that does not
need any centralized managenlent is necessary to efficiently
distribute WUs among those clients.
3. Distributed and Cooperative Scheduling for
Volunteer Computing
We propose volunteer computing with distributed and
cooperative scheduling.
In this paper, a distributed and
cooperative scheduling mechanism [8] is incorporated into
the BOINC middleware. This section first reviews the dis(cid:173)
tributed and cooperative scheduling mechanism, and then
describes how it can solve the two problems of the original
BOINC middleware discussed in Section 2.
3.1. Distributed and Cooperative Load Bal(cid:173)
ancing Mechanism
We have proposed a distributed and cooperative schedul(cid:173)
ing mechanism based on the P2P model that improves scal(cid:173)
ability and fault tolerance for a large-scale distributed com(cid:173)
puting [8].
In a large-scale distributed computing system
consisting of a huge number of clients, it is not practical
that a centralized server manages all the clients. There(cid:173)
fore, in the proposed task scheduling mechanism, clients are
grouped into several subsets. In each subset, clients com(cid:173)
pare their loads and trade WUs each other so as to balance
the loads within the subset.
Suppose that clients organize a P2P network to execute
ajob consisting ofWUs. Here, each client has a distributed
scheduler for scheduling WUs ofdistributed computing, be(cid:173)
sides a local scheduler for local tasks. In the proposed task
scheduling mechanism, then, a scheduling process runs for
a subset of clients connected via logical P2P links. Since
the number of clients in a subset is much fewer than that
of all clients, the scheduling process can be executed even
on a low performance client. Furthermore, global schedul(cid:173)
ing involving all clients is achieved by collaboration among
distributed schedulers on individual clients. For load bal(cid:173)
ancing within each subset, the conventional task scheduling
algorithms are available to compare loads and decide WU
transfers.
3.2. Dynamic Load Balancing
In this section, we discuss how the proposed task
scheduling mechanism can allow a volunteer computing
system to adapt to load changes of clients.
If a client with low performance, which includes the
case of less volunteer computing power due to heavy lo(cid:173)
cal computing enforced temporally, keeps many WUs for a
long time, the turnaround time of the WUs become longer,
and processing of the WUs cannot satisfy the deadline that
the project server assigned. As a result, the project server
must reassign the same WUs to other clients, and the entire
performance of a volunteer computing system severely de(cid:173)
grades. To prevent this situation, dynamic load balancing
is necessary because the computing performance of each
client for volunteer computing dynamically changes.
In the proposed task scheduling mechanism, WUs are
moved from one client to another at runtime for load bal(cid:173)
ancing. Each client itself periodically monitors its load, and
compares the estimated finish time with those of the neigh(cid:173)
bors for checking WU progress. If the estimated finish time
obviously passes the deadline, the client has too many WUs
and therefore asks the neighbors to process some of the
WUs, so as to minimize the variation of turnaround times.
On the other hand, a client that is about to leave from the
volunteer computing system moves all WUs to neighbors.
As a result, the proposed mechanism can alleviate the prob(cid:173)
lem of the original BOINC middleware in which dynamic
load changes often increase the turnaround time for process(cid:173)
ing each WU and the WU processing failures.
1-4244-2398-9/08/$20.00 Â©2008 IEEE
318
DSN 2008: Murata et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:10:16 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
BOINC
Project Server
BOINC
Project Server
BOINC
Implementation
A
B
c
o
A
B
c
o
BOINC Client
(a)
BOINC Client
(b)
Figure 1. Proxy Download
3.3. Proxy Download
The proposed task scheduling mechanism is also effec(cid:173)
tive to avoid critical performance degradation due to fre(cid:173)
quent failures in WU downloads. As illustrated in Figure
l-(a), BOINC in the default configuration requires a client
to access the project server to download WUs. On the other
hand, the BOINC with the proposed task scheduling mecha(cid:173)
nism can allow a client to download WUs collectively and to
distribute the WUs to others. In Figure l-(b), client B down(cid:173)
loads all the WUs of clients A, B, C and D. After that, client
B passes the WUs to clients A, C and D via the scheduling
mechanism. This is called the proxy download. The proxy
download can reduce the number of accesses to the project
server without changing the number ofWUs that the project
server distributes per unit time. Therefore, it can prevent
frequent failures usually caused by excessive accesses to the
project server.
In addition, the proxy download works as an alternative
mechanism for distributing WUs when the project server is
It can provide WUs to clients that do not have any
busy.
WUs. Therefore, when a client fails in WU downloading,
it can immediately ask its neighbors for sending their WUs.
Then, the neighbors send a part of their WUs to the client
that fails in WU downloading. As a result, all the avail(cid:173)
able clients can have WUs even if the server is temporarily
unavailable at the moment. Therefore, the proxy download
can significantly improve the total throughput of the volun(cid:173)
teer computing system.
4. Design and Implementation
This section designs an effective implementation of a
distributed and cooperative dynamic load-balancing mech(cid:173)
anism on the BOINC platform. The mechanism is not di(cid:173)
rectly embedded into the source codes of the BOINC mid(cid:173)
dleware, but implemented as an independent program.
~----..-:
~.. ---~
Irr1>lementation
:
Our
Figure 2. Implementation Overview
4.1. Overview
As illustrated in Figure 2, the proposed implementation
is designed to work with the BOINC middleware. The pro(cid:173)
posed mechanism can provide only the features related to
dynamic load balancing, and the others are provided by the
BOINC middleware. Hence, both the BOINC core client
and the proposed scheduler co-run on a client. We extend
BOINC GUI-RPC for communication between them. The
core client is responsible for communication between the
client and the server, while the proposed mechanism is for
communication among clients. WUs owned by a client are
basically managed by the core client, and are temporarily
passed to the proposed mechanism only when transferred to
other clients.
4.2. Construction of Logical Links
In this section, we describe how to construct logical
links, connecting BOINC clients, used by the proposed
mechanism.
Each client maintains a list of IP addresses of its neigh(cid:173)
bors for communication with them. Each client can freely
configure the IP address list based on its own policy. For
if one has multiple PCs, those PCs can be used
example.
to organize a community. Another possible situation is to
It should be noted
organize a community with friends.
that multiple communities can exist in a volunteer comput(cid:173)
ing project, and dynamic load balancing is performed only
within each community.
The current
implementation of the proposed task
scheduling mechanism does not support the dynamic link
reconnection, even though it
is required when a client