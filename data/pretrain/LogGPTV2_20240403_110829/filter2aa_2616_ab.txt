### Addressing Physical Memory and Cache Usage

When dealing with the real physical address on bare metal that the cache is using, there is an additional layer of translation. This is a complex problem to solve.

---

### Kernel Samepage Merging (KSM)

**Page De-duplication**

- **Functionality**: KSM enables the kernel to examine two or more running programs and compare their memory. If any memory regions or pages are identical, KSM merges them into a single physical page on the bare-metal host kernel.
- **Modification Handling**: If one of the programs wants to modify a shared page, KSM un-merges it.
- **Use Case**: This feature is particularly useful for virtualization with KVM. Once the guest is running, the contents of the guest operating system image can be shared when guests are running the same operating system or applications.

---

### Page Table De-obfuscation

**Objective**

- **Unique Pattern Creation**: The idea is to create a per-page unique pattern in memory that is the same across the client and server. This allows KSM to perform page de-duplication for us.

---

### Synchronization Across VMs

**Challenges and Solutions**

- **Synchronization Primitives**: There are no built-in synchronization primitives across processes running in different VMs. However, mechanisms like ivshmem exist but are not enabled in production environments.
- **Mutex Replacement**: We need a mechanism to replace the mutex for effective synchronization.

**Options for Synchronization**

1. **Option #1: Hope for the Best**
   - **Approach**: Ignore the synchronization aspect and rely on error correction.
   - **Pros**: Low CPU consumption.
   - **Cons**: Very low bit rates.

2. **Option #2: Busy Loop**
   - **Approach**: Use a busy loop where the client is faster than the server. Eventually, there will be an overlap, and the server will pick up the signal.
   - **Pros**: Acceptable bit rates.
   - **Cons**: High CPU consumption.
   - **Requirement**: Aim for <1% CPU usage to remain undetected.

3. **Option #3: Common Period ‘T’**
   - **Approach**: Define a common period ‘T’ for client-server phase locking.
   - **Steps**:
     - Server sends a sync pattern.
     - Client sweeps over the period to find the sync.
     - Adjust the phase once the sync is found.
   - **Requirements**:
     - A monotonic pulse.
     - Some jitter, but not too much (lots of noise in VMs; data evaporates out of the cache quickly).

**Achieving a Monotonic Pulse**

- **Timers**: Use timers to achieve a monotonic pulse.
- **Reasoning**: Timers allow the system to sleep, avoiding detection (<1% CPU usage).
- **Jitter Management**:
  - Jitter comes from both VMs.
  - Too much jitter can be problematic.
  - Padding up to a value above the maximum jitter can help, but it is subject to noise.
  - More time spent trying to immunize against noise results in more accumulated noise.
  - Padding consumes CPU, but stretching the timer period helps keep CPU usage under 1%.

**Solution Implementation**

- **Calibrated Software Loop**: Use a calibrated software loop kept in check with the Time Stamp Counter (TSC).
- **Example**:
  - On a 2.4GHz machine:
    - Idle system: ~50 cycles (20 nSec)
    - Loaded system: ~300 cycles (120 nSec)
  - Timers:
    - 100uSec = 240,000 cycles
    - 10uSec = 24,000 cycles (best case)

---

### Encoding/Decoding Based on Memory Access Time

- **Encoding/Decoding**: Based on memory access time (1 = slow, 0 = fast).
- **HW Prefetching**: Randomized access to cache lines/pages without disabling it from BIOS.
- **Shared Physical Memory Pages**: Thanks to KSM.
- **PLL and High Precision Inter-VM Synchronization**: Compensated timer with <120 nSec jitter.

**Recap and Demo**

- **Demo Time**: Let's see a live demonstration.

---

### Mitigation Strategies

- **Disable Page-Deduplication (KSM)**:
  - No inter-VM shared read-only pages.
  - `clflush` and reload won’t work.
  - No OS/Application fingerprinting (de-duplication page-fault).
  - Higher memory cost.
- **X86 `clflush` Instruction**: Consider microcode and privilege levels.
- **Co-location Policy**: Per-core, per-socket, or per-box.

**Detection Methods**

- **Hardware Counter**: Monitor for inter-VM scheduling abnormalities.
- **TSC Related Abnormalities**: Detect TSC-related issues.

---

### Conclusion

Thank you for your attention!

© 2009 Cisco Systems, Inc. All rights reserved.  
Cisco Confidential