# MouseJack and Beyond: Keystroke Sniffing and Injection Vulnerabilities in 2.4GHz Wireless Mice and Keyboards

**Author:** Marc Newlin  
**Email:** [marcnewlin@example.com](mailto:marcnewlin@example.com)  
**Twitter:** @marcnewlin  
**Date:** July 8, 2016  
**Version:** v0.1

## Abstract
This research reveals that non-Bluetooth wireless mice and keyboards from a variety of vendors, including Logitech, Microsoft, Dell, Lenovo, Hewlett-Packard, Gigabyte, Amazon, Toshiba, GE, Anker, RadioShack, Kensington, EagleTec, Insignia, ShhhMouse, and HDE, can be exploited as effective attack vectors. A total of 16 vulnerabilities were identified and disclosed to the affected vendors according to our disclosure policy [1]. These vulnerabilities enable keystroke sniffing, keystroke injection, forced device pairing, malicious macro programming, and denial of service. This document provides a detailed overview of the research process and results, reproduction steps for each vulnerability, vendor timelines and responses, and mitigation options where available.

At the time of writing, most of the affected vendors are still within the disclosure period, and therefore, vendor responses are not included in this document. An updated white paper and accompanying slide deck with vendor response and mitigation details will be available when this material is presented at DEF CON.

## Table of Contents
1. Introduction
2. Overview of Vulnerabilities
3. Transceivers
   - 3.1 Nordic Semiconductor nRF24L
   - 3.2 Texas Instruments CC254X
   - 3.3 MOSART Semiconductor
   - 3.4 Signia SGN6210
   - 3.5 GE Mystery Transceiver
4. Research Process
   - 4.1 Software Defined Radio
   - 4.2 NES Controller
   - 4.3 CrazyRadio PA Dongles
   - 4.4 Fuzzing
   - 4.5 First Vulnerability and Beyond
5. Logitech Unifying
   - 5.1 Encryption
   - 5.2 General Operation
     - 5.2.1 Addressing
     - 5.2.2 Keepalives and Channel Hopping
   - 5.3 Mouse Input
   - 5.4 Keyboard Input
   - 5.5 Dongle to Device Communication
   - 5.6 Pairing
   - 5.7 Vulnerabilities
     - 5.7.1 Forced Pairing (BN-0001)
     - 5.7.2 Unencrypted Keystroke Injection (BN-0002)
     - 5.7.3 Disguise Keyboard as Mouse (BN-0003)
     - 5.7.4 Unencrypted Keystroke Injection Fix Bypass (BN-0011)
     - 5.7.5 Encrypted Keystroke Injection (BN-0013)
   - 5.8 Logitech Unifying Packet Formats
6. Logitech G900
   - 6.1 Vulnerabilities
     - 6.1.1 Unencrypted Keystroke Injection (BN-0012)
     - 6.1.2 Malicious Macro Programming (BN-0016)
7. Chicony
   - 7.1 Vulnerabilities
     - 7.1.1 Unencrypted Keystroke Injection - AmazonBasics (BN-0007)
     - 7.1.2 Unencrypted Keystroke Injection - Dell KM632 (BN-0007)
     - 7.1.3 Encrypted Keystroke Injection - AmazonBasics (BN-0013)
     - 7.1.4 Encrypted Keystroke Injection - Dell KM632 (BN-0013)
8. MOSART
   - 8.1 Vulnerabilities
     - 8.1.1 Unencrypted Keystroke Sniffing and Injection (BN-0010)
9. Signia
   - 9.1 Vulnerabilities
     - 9.1.1 Unencrypted Keystroke Sniffing and Injection (BN-0010)
10. Unknown GE Transceiver
    - 10.1 Vulnerabilities
      - 10.1.1 Unencrypted Keystroke Sniffing and Injection (BN-0015)
11. Lenovo
    - 11.1 Vulnerabilities
      - 11.1.1 Denial of Service (BN-0008)
      - 11.1.2 Unencrypted Keystroke Injection (BN-0009)
      - 11.1.3 Encrypted Keystroke Injection (BN-0013)
12. Microsoft
    - 12.1 Vulnerabilities
      - 12.1.1 Unencrypted Keystroke Injection (BN-0004)
13. HP (non-MOSART)
    - 13.1 Vulnerabilities
      - 13.1.1 Encrypted Keystroke Injection (BN-0005)
14. Gigabyte
    - 14.1 Vulnerabilities
      - 14.1.1 Unencrypted Keystroke Injection and Sniffing (BN-0006)

## 1. Introduction
Wireless mice and keyboards commonly communicate using proprietary protocols operating in the 2.4GHz ISM band. Unlike Bluetooth, there is no industry standard for these devices, leaving each vendor to implement their own security measures.

These devices work by transmitting radio frequency packets to a USB dongle plugged into a userâ€™s computer. When a user presses a key on their keyboard or moves their mouse, information describing the actions is sent wirelessly to the USB dongle. The dongle listens for these radio frequency packets and notifies the computer whenever the user moves their mouse or types on their keyboard.

To prevent eavesdropping, many vendors encrypt the data being transmitted by wireless keyboards. The dongle knows the encryption key used by the keyboard, allowing it to decrypt the data and see what key was pressed. Without knowing the encryption key, an attacker cannot decrypt the data and thus cannot see what is being typed.

Conversely, none of the tested mice encrypt their wireless communications. This lack of authentication means the dongle cannot distinguish between packets transmitted by a legitimate mouse and those transmitted by an attacker. As a result, an attacker can impersonate a mouse and transmit their own movement/click packets to the dongle.

Problems in the way some dongles process received packets make it possible for an attacker to transmit specially crafted packets that generate keypresses instead of mouse movements or clicks. In other cases, protocol weaknesses allow an attacker to generate encrypted keyboard packets that appear authentic to the dongle.

A separate class of wireless keyboards and mice communicate with no encryption whatsoever. The unencrypted wireless protocols offer no protection, making it possible for an attacker to both inject malicious keystrokes and sniff keystrokes being typed by the user.

This document provides an overview of the vulnerabilities, affected vendors, and transceivers, followed by a discussion of the research process and techniques. Technical details of each vulnerability are then presented, including documentation of reverse-engineered protocols.

## 2. Overview of Vulnerabilities
A total of 16 vulnerabilities were identified in products from 16 vendors. According to our disclosure policy [1], all vendors were notified 90 days prior to the public disclosure date. We worked with vendors to address the vulnerabilities where possible, but most of the affected devices do not support firmware updates.

| Vulnerability Number | Description | Affected Vendors | Public Disclosure Date |
|----------------------|-------------|------------------|------------------------|
| BN-0001              | Forced pairing | Logitech, Dell | Feb 23, 2016 |
| BN-0002              | Unencrypted keystroke injection | Logitech, Dell | Feb 23, 2016 |
| BN-0003              | Disguise keyboard as mouse | Logitech, Dell | Feb 23, 2016 |
| BN-0004              | Unencrypted keystroke injection | Microsoft | Feb 23, 2016 |
| BN-0005              | Encrypted keystroke injection | Hewlett-Packard | Feb 23, 2016 |
| BN-0006              | Unencrypted keystroke injection / keystroke sniffing | Gigabyte | Feb 23, 2016 |
| BN-0007              | Unencrypted keystroke injection | AmazonBasics, Dell | Feb 23, 2016 |
| BN-0008              | Denial of service | Lenovo | Feb 23, 2016 |
| BN-0009              | Unencrypted keystroke injection | Lenovo | Feb 23, 2016 |
| BN-0010              | Unencrypted keystroke injection / keystroke sniffing | Hewlett-Packard, Anker, Kensington, RadioShack, HDE, Insignia, EagleTec, ShhhMouse | July 26, 2016 |
| BN-0011              | Firmware fix bypass - unencrypted keystroke injection | Logitech, Dell | July 26, 2016 |
| BN-0012              | Unencrypted keystroke injection | Logitech | July 26, 2016 |
| BN-0013              | Encrypted keystroke injection | Logitech, Dell, AmazonBasics, Lenovo | July 26, 2016 |
| BN-0014              | Unencrypted keystroke injection / keystroke sniffing | Toshiba | July 26, 2016 |

## 3. Transceivers
### 3.1 Nordic Semiconductor nRF24L
### 3.2 Texas Instruments CC254X
### 3.3 MOSART Semiconductor
### 3.4 Signia SGN6210
### 3.5 GE Mystery Transceiver

## 4. Research Process
### 4.1 Software Defined Radio
### 4.2 NES Controller
### 4.3 CrazyRadio PA Dongles
### 4.4 Fuzzing
### 4.5 First Vulnerability and Beyond

## 5. Logitech Unifying
### 5.1 Encryption
### 5.2 General Operation
#### 5.2.1 Addressing
#### 5.2.2 Keepalives and Channel Hopping
### 5.3 Mouse Input
### 5.4 Keyboard Input
### 5.5 Dongle to Device Communication
### 5.6 Pairing
### 5.7 Vulnerabilities
#### 5.7.1 Forced Pairing (BN-0001)
#### 5.7.2 Unencrypted Keystroke Injection (BN-0002)
#### 5.7.3 Disguise Keyboard as Mouse (BN-0003)
#### 5.7.4 Unencrypted Keystroke Injection Fix Bypass (BN-0011)
#### 5.7.5 Encrypted Keystroke Injection (BN-0013)
### 5.8 Logitech Unifying Packet Formats

## 6. Logitech G900
### 6.1 Vulnerabilities
#### 6.1.1 Unencrypted Keystroke Injection (BN-0012)
#### 6.1.2 Malicious Macro Programming (BN-0016)

## 7. Chicony
### 7.1 Vulnerabilities
#### 7.1.1 Unencrypted Keystroke Injection - AmazonBasics (BN-0007)
#### 7.1.2 Unencrypted Keystroke Injection - Dell KM632 (BN-0007)
#### 7.1.3 Encrypted Keystroke Injection - AmazonBasics (BN-0013)
#### 7.1.4 Encrypted Keystroke Injection - Dell KM632 (BN-0013)

## 8. MOSART
### 8.1 Vulnerabilities
#### 8.1.1 Unencrypted Keystroke Sniffing and Injection (BN-0010)

## 9. Signia
### 9.1 Vulnerabilities
#### 9.1.1 Unencrypted Keystroke Sniffing and Injection (BN-0010)

## 10. Unknown GE Transceiver
### 10.1 Vulnerabilities
#### 10.1.1 Unencrypted Keystroke Sniffing and Injection (BN-0015)

## 11. Lenovo
### 11.1 Vulnerabilities
#### 11.1.1 Denial of Service (BN-0008)
#### 11.1.2 Unencrypted Keystroke Injection (BN-0009)
#### 11.1.3 Encrypted Keystroke Injection (BN-0013)

## 12. Microsoft
### 12.1 Vulnerabilities
#### 12.1.1 Unencrypted Keystroke Injection (BN-0004)

## 13. HP (non-MOSART)
### 13.1 Vulnerabilities
#### 13.1.1 Encrypted Keystroke Injection (BN-0005)

## 14. Gigabyte
### 14.1 Vulnerabilities
#### 14.1.1 Unencrypted Keystroke Injection and Sniffing (BN-0006)