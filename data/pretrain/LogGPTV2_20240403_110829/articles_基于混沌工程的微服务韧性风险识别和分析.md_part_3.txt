服务韧性目标值的设立将依据各个服务的实际业务需求,其中没有意义的度量维度则不需要设立对应的目标
值(例如,以系统响应时间作为性能指标的服务不需要设立降级损失的服务韧性目标).
(3) 设置混沌实验参数
微服务架构韧性风险的识别过程中,需要对混沌实验进行参数限制以控制整个识别过程所花费的时间.混
沌实验的参数包含:
① 实验次数:一次韧性风险识别过程中将执行多少次混沌实验.
② 实验最大时长:每次混沌实验最多持续多少时间,若一次混沌实验的实验时间超过设置的最大时长,该
次混沌实验将被强制终止.
(4) 进行混沌实验
混沌实验将通过随机地生成系统环境扰动,并将其引入至正在运行的目标微服务架构系统中.在执行混沌
实验的过程中,为了保证每一次混沌实验不会被前一次混沌实验中引入的系统环境扰动所影响,混沌实验将利
用自动化构建工具将目标微服务系统进行重新构建、部署,并在实验结束后销毁实验环境.每一次混沌实验中,
将包括以下两个随机因素.
• 系统压力场景:在混沌实验中,目标微服务架构系统将承受一定的业务压力,从而使由于系统环境扰动
产生的服务降级更加明显.而为了使实验环境能够更加贴近系统真实运行环境,系统业务压力的模拟
将参考系统在真实运行环境中可能面临的业务压力场景.每一次混沌实验,将随机地选取一个压力场
景进行业务压力模拟.
• 系统环境扰动:混沌实验中,系统环境的扰动将按照以下方式生成:首先,系统环境扰动的生成工具将随
机地选择发生系统环境扰动的资源类型;随后,系统环境扰动的生成工具将在实验环境中指定资源类
型的实例中随机选取一个作为系统环境扰动发生的具体位置;最后,在该资源类型中可能发生的系统
环境扰动事件中随机地选取一个事件作为在混沌实验中发生的系统环境扰动事件.
在执行混沌实验的过程中,除了系统压力场景的模拟以及系统环境的扰动之外,还需要对目标系统实时地
监控并进行数据采集.数据采集的对象包括两部分:① 系统服务的服务性能数据,用以实验结束后度量实验中
引入系统环境扰动后产生的服务降级;② 系统资源性能数据(如CPU使用率、网络流量等).
(5) 韧性风险识别
在所有的混沌实验结束后,混沌实验中收集到的服务性能数据将与混沌实验前预设的服务性能基线数据
进行比较,判断系统环境扰动过程中系统服务是否发生了服务降级.若系统服务发生了服务降级,则根据
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1237
MRMM中的3个韧性度量维度对实验中发现的服务降级进行度量,并与预设的服务韧性目标比较:如果服务降
级的程度超出了服务韧性目标所预设的阈值,则说明这次混沌实验中所引入的系统环境扰动是严重影响系统
服务性能的韧性风险,该次混沌实验中生成收集得到系统服务性能数据和系统资源性能数据将作为韧性风险
分析的依据.
3 微服务架构系统的韧性风险分析
如本文引言中所述,本文提出的韧性风险分析方法将避免对微服务架构系统本身的额外开发成本,以无监
督的方法分析一个韧性风险如何影响目标系统并引发服务降级.该方法将以被识别的韧性风险所对应的混沌
实验中收集的系统性能数据为依据,通过因果搜索算法构建系统性能指标之间的因果关系图,随后根据系统性
能数据的上升和下降变化对因果关系图中的各条边赋予权重,最终输出若干由系统性能指标构成的韧性风险
的影响链路,这些影响链路将按照因果关系边的权重排序.微服务架构系统的运维人员可以根据韧性风险的影
响链路中涉及到的系统性能指标设计对应的系统优化方案.韧性风险分析方法的整体流程如图3所示.
Fig.3 Process of resilience risk analysis
图3 韧性风险分析过程
3.1 混沌实验数据收集
对于每一个被识别的韧性风险,其对应的混沌实验执行过程中的服务性能和资源性能的历史数据将作为
韧性风险如何产生服务降级的分析依据.本文提出的韧性风险分析方法所分析的目标为系统各项性能指标之
间的因果变化关系,因此会在每一次混沌实验中将通过监控工具收集目标系统在该次混沌实验中的系统性能
数据集{timestamp,K ,K ,…,K },其中,timestamp为时间戳,K ,…,K 为在该时间戳下的各项系统性能指标.图4为
1 2 n 1 n
一个样例的混沌实验数据集,其中,第1列为每一行性能数据对应的Unix时间戳,第2列开始的每一列表示某一
项系统性能指标(如第3列为cart服务的平均请求延时,单位为s),某一行某一列的数据表示该行第1列时间戳
下捕获到的该列所对应的系统性能指标的实际值.
Fig.4 A sample chaos experiment dataset
图4 混沌实验数据集样例
1238 Journal of Software 软件学报 Vol.32, No.5, May 2021
3.2 因果关系图构建
基于在混沌实验中收集的系统性能数据集,本文提出的韧性风险分析方法将首先通过因果搜索算法构建
性能指标之间的因果关系图.因果关系图为由一系列表示性能指标的节点和表示性能指标之间因果关系的边
组成,因果关系图中所有的边仅表示性能指标之间的直接因果关系,不包含间接因果关系.若某个性能指标 X 影
响了另一个性能指标Y,则用有向边X→Y表示.如果算法能明确两个性能指标X,Y之间存在因果关系但不能明
确是X影响了Y还是Y影响了X,则用无向边X—Y表示.
本文中使用的因果搜索算法参考了Sprite和Glymour所提出的PC算法[73]的主要思想,最终,算法将输出一
张包含有向边和无向边的因果关系图.因果关系构建算法的具体流程如算法 1 所示,其主要包含两个步骤:因果
关系确立以及因果方向确立.在因果关系确立阶段,算法首先构建以数据集内性能指标为节点的完全图;随后,
对于任意两个性能指标X,Y,算法通过判断X和Y是否条件独立来确定X和Y之间是否存在因果关系.若X和Y
条件独立,说明X和Y之间不存在直接的因果关系,则在完全图中删除对应的边;最后得到初步的仅包含无向边
的因果关系图.在因果方向确立阶段,算法将先根据 d-分隔原则确定因果关系图中所有的 X→Y←Z 的结构,即
V-Structure;随后,根据在V-Structure中已经确定的有向边和一些逻辑推断规则(算法1伪代码的第15行~第21
行),算法将进一步确定现有的因果关系图中部分剩余无向边的方向.例如,在已经确定图中所有 X→Y←Z 结构
的情况下,若发现结构A—B←C,则可以直接判断边A—B的方向为A←B.
算法1. 因果关系图构建算法.
输入:混沌实验数据集D,数据集D中的监控指标集合V.
输出:因果关系图G.
1. //因果关系确立
2. 以V中的元素作为节点,构建完全图G
3. n←V中元素的数量
4. for k from 0 to n:
5. for each X,Y为G中的两个相邻节点,且邻接于X的节点数量大于k:
6. for each 集合W⊂V\{Y}为邻接于X的节点集合,且W的元素数量为k:
7. if X,Y条件独立于W then:
8. 去除X与Y之间的边
9. 记录W
10.
11. //因果方向确立
12. for each G中相邻的3个节点X—Y—Z:
13. if Y不存在于所有使得X于Z独立的节点集合中:
14. 把G中X—Y—Z的方向修改为X→Y←Z
15. for each G中相邻的3个节点X,Y,Z:
16. if X→Y—Z:
17. 把Y—Z的方向修改为Y→Z
18. if X—Y and X→Z→Y:
19. 把X—Y的方向修改为X→Y
20. if X—Y and 存在另一变量L,使得X—Z→Y且X—L→Y:
21. 把X—Y的方向修改为X→Y
22. return G;
在确定两个性能指标 X,Y之间是否存在因果关系的过程中,基于 d-分隔原则,需要判断 X和Y在其他性能
指标为给定值的情况下是否条件独立.由于微服务架构系统中通过监控工具获取的系统性能数据大部分为连
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1239
续值,为了判断连续数据的条件独立性[74],本文使用了如下方法.
建立零假设H :性能指标X,Y在给定条件C下的偏相关系数ρ =0.其对应的备择假设H 为:X,Y在给定条
0 XY,C 1
件C下的偏相关系数ρ ≠0.通过F检验验证H 是否成立:若H 成立,则说明监控指标X,Y在给定条件C下条
XY,C 0 0
件独立,其实际意义为X,Y之间没有因果关系或者X,Y经由C产生了间接的因果关系.零假设H 在F检验下的
0
显著性水平z(ρ )的计算公式如公式(1)所示.
XY,C
n−|C|−3 1+ρ
z(ρ )= ⋅log XY,C (1)