Maximum length of identifiers:        64  
Maximum columns in an index:          32  
Maximum size of a TOAST chunk:        1996  
Size of a large-object chunk:         2048  
Date/time type storage:               64-bit integers  
Float4 argument passing:              by value  
Float8 argument passing:              by value  
Data page checksum version:           0  
Mock authentication nonce:            bc30e691ebffc41c768ea7c49e794a794bfa76c9ee86881a101431416540c6a6  
```  
## 检查控制文件的crc是否正确  
使用get_controlfile 获取控制文件内容，正常返回时，就是正确的。   
src/backend/utils/misc/pg_controldata.c  
```  
        /* read the control file */  
        ControlFile = get_controlfile(DataDir, &crc_ok);  
        if (!crc_ok)  
                ereport(ERROR,  
                                (errmsg("calculated CRC checksum does not match value stored in file")));  
```  
src/common/controldata_utils.c  
```  
/*  
 * get_controlfile()  
 *  
 * Get controlfile values.  The result is returned as a palloc'd copy of the  
 * control file data.  
 *  
 * crc_ok_p can be used by the caller to see whether the CRC of the control  
 * file data is correct.  
 */  
ControlFileData *  
get_controlfile(const char *DataDir, bool *crc_ok_p)  
{  
        ControlFileData *ControlFile;  
        int                     fd;  
        char            ControlFilePath[MAXPGPATH];  
        pg_crc32c       crc;  
        int                     r;  
        AssertArg(crc_ok_p);  
        ControlFile = palloc(sizeof(ControlFileData));  
        snprintf(ControlFilePath, MAXPGPATH, "%s/global/pg_control", DataDir);  
#ifndef FRONTEND  
        if ((fd = OpenTransientFile(ControlFilePath, O_RDONLY | PG_BINARY)) == -1)  
                ereport(ERROR,  
                                (errcode_for_file_access(),  
                                 errmsg("could not open file \"%s\" for reading: %m",  
                                                ControlFilePath)));  
#else  
        if ((fd = open(ControlFilePath, O_RDONLY | PG_BINARY, 0)) == -1)  
        {  
                pg_log_fatal("could not open file \"%s\" for reading: %m",  
                                         ControlFilePath);  
                exit(EXIT_FAILURE);  
        }  
#endif  
        r = read(fd, ControlFile, sizeof(ControlFileData));  
        if (r != sizeof(ControlFileData))  
        {  
                if (r crc);  
        /* Make sure the control file is valid byte order. */  
        if (ControlFile->pg_control_version % 65536 == 0 &&  
                ControlFile->pg_control_version / 65536 != 0)  
#ifndef FRONTEND  
                elog(ERROR, _("byte ordering mismatch"));  
#else  
                pg_log_warning("possible byte ordering mismatch\n"  
                                           "The byte ordering used to store the pg_control file might not match the one\n"  
                                           "used by this program.  In that case the results below would be incorrect, and\n"  
                                           "the PostgreSQL installation would be incompatible with this data directory.");  
#endif  
        return ControlFile;  
}  
```  
## 控制文件的crc算法与page的checksum算法不一样  
1、控制文件crc  
src/include/port/pg_crc32c.h  
```  
/*-------------------------------------------------------------------------  
 *  
 * pg_crc32c.h  
 *        Routines for computing CRC-32C checksums.  
 *  
 * The speed of CRC-32C calculation has a big impact on performance, so we  
 * jump through some hoops to get the best implementation for each  
 * platform. Some CPU architectures have special instructions for speeding  
 * up CRC calculations (e.g. Intel SSE 4.2), on other platforms we use the  
 * Slicing-by-8 algorithm which uses lookup tables.  
 *  
 * The public interface consists of four macros:  
 *  
 * INIT_CRC32C(crc)  
 *              Initialize a CRC accumulator  
 *  
 * COMP_CRC32C(crc, data, len)  
 *              Accumulate some (more) bytes into a CRC  
 *  
 * FIN_CRC32C(crc)  
 *              Finish a CRC calculation  
 *  
 * EQ_CRC32C(c1, c2)  
 *              Check for equality of two CRCs.  
 *  
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group  
 * Portions Copyright (c) 1994, Regents of the University of California  
 *  
 * src/include/port/pg_crc32c.h  
 *  
 *-------------------------------------------------------------------------  
 */  
```  
2、page checksum  
src/include/storage/checksum_impl.h  
```  
/*  
 * Block checksum algorithm.  The page must be adequately aligned  
 * (at least on 4-byte boundary).  
 */  
static uint32  
pg_checksum_block(const PGChecksummablePage *page)  
{  
        uint32          sums[N_SUMS];  
        uint32          result = 0;  
        uint32          i,  
                                j;  
        /* ensure that the size is compatible with the algorithm */  
        Assert(sizeof(PGChecksummablePage) == BLCKSZ);  
        /* initialize partial checksums to their corresponding offsets */  
        memcpy(sums, checksumBaseOffsets, sizeof(checksumBaseOffsets));  
        /* main checksum calculation */  
        for (i = 0; i data[i][j]);  
        /* finally add in two rounds of zeroes for additional mixing */  
        for (i = 0; i phdr));  
        /*  
         * Save pd_checksum and temporarily set it to zero, so that the checksum  
         * calculation isn't affected by the old checksum stored on the page.  
         * Restore it after, because actually updating the checksum is NOT part of  
         * the API of this function.  
         */  
        save_checksum = cpage->phdr.pd_checksum;  
        cpage->phdr.pd_checksum = 0;  
        checksum = pg_checksum_block(cpage);  
        cpage->phdr.pd_checksum = save_checksum;  
        /* Mix in the block number to detect transposed pages */  
        checksum ^= blkno;  
        /*  
         * Reduce to a uint16 (to fit in the pd_checksum field) with an offset of  
         * one. That avoids checksums of zero, which seems like a good idea.  
         */  
        return (checksum % 65535) + 1;  
}  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")