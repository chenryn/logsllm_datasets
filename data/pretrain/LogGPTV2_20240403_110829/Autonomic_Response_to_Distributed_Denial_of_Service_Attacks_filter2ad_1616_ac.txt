# Packet Reception Rate at Client 3 under Different Test Conditions

```
60
40
20
0
160
140
120
100
80
60
40
20
0
160
140
120
100
80
60
40
20
0
160
140
120
100
80
60
40
20
0
5
55
105
155
205
255
Time
305
355
405
455
Fig. 4. Rate of Packets Received at Client 3 under Different Test Conditions
```

## Duration of Data Transmission for Video Completion

| Mode | Seconds to Complete Video Data Transmission |
| --- | --- |
| Normal Operation (No Attack) | 310 |
| Autonomic Response with Full Recovery | 325 |
| Autonomic Response with Degraded Recovery | 475 |

### Analysis and Observations

The RealSystem server's log indicated that the server detected congestion and adjusted by reducing video quality, thereby lowering its demand for bandwidth. If CITRA’s autonomic response did not take effect quickly enough, the RealServer would detect congestion and attempt to make its own adjustments.

The speed of the detector (a 366 MHz Pentium II in our case) significantly influenced the mode change. When the detector acted quickly, full recovery was observed. Since the detector monitors the server’s LAN segment in promiscuous mode, it may have become overloaded with monitoring when the flood started. We hypothesized that a more efficient detection algorithm or a faster detector platform would likely produce more consistent results, with full recovery occurring on every run.

To validate these results, another research group reran the experiment in a different testbed [8] using the same software configuration but with higher performance hardware components. The normal and flood runs produced similar results, and in each run with autonomic response enabled, full recovery was observed. This supports our hypothesis that detector speed significantly affects the recovery of RealPlayer clients. With higher-speed routers, this testbed achieved 95% loading of the server’s LAN segment. In the rerun, CITRA’s autonomic response became effective less than two seconds after the start of the flood, compared to 10-12 seconds in our slower testbed, representing a significant improvement.

### Observations

CITRA-enabled routers in the experimental testbed traced and successfully mitigated the Stacheldraht attack much faster than possible via manual methods. Even though Stacheldraht agents continued to generate flood packets, the video sessions continued unimpeded.

These results, while encouraging, are preliminary and constitute a single data point in a large, multidimensional space of experimental variables. For example, if more flooding agents were used, creating greater congestion, IDIP traceback and mitigation requests would encounter more collisions, delaying their propagation upstream. This is why IDIP uses UDP as a transport protocol rather than TCP. Using UDP (augmented with acknowledgments and retransmission) allows a traceback and mitigation request to be transmitted via a single IP packet. TCP, however, requires the completion of a three-way handshake first. DDoS congestion might cause the handshake to fail repeatedly, adding significant delays to the upstream propagation. IDIP’s timeout and retransmit algorithm is derived from the cooperative “back off” algorithm used in TCP. An interesting question for further study is whether IDIP’s ability to push traceback requests through DDoS attacks could be further improved by using a more aggressive retransmission algorithm.

Another area for further research concerns the scalability of this technology to larger and higher-speed networks. The CITRA-enabled Linux routers in our testbed perform traceback by creating audit records for network flows on an ongoing basis and examining them for attack path evidence when presented with a traceback request. This technique enables routers to trace intrusions that consist of a single IP packet. For edge routers, such flow auditing may be practical, but for core routers, it might require maintaining an unacceptable amount of state or slowing speed-critical packet forwarding operations. One approach to improving the scalability and speed of flow auditing is to enable it selectively, i.e., only for flows currently under suspicion. While this might result in missing isolated instances of single-packet attacks, it might still be useful for tracing 1) single packet attacks that are repeated on a massive scale via hacker scripts, and 2) DDoS floods, which, by their very nature, continue for a period of time. Alternatively, if traceback is sought only for DDoS attacks, auditing individual flows is probably unnecessary. DDoS attacks can be traced to neighboring upstream routers simply by sampling input packets for a few seconds and identifying the input interface from which flood packets entered and the link layer addresses from which they were sent.

An additional topic for further research is the choice of appropriate rate-limiting parameters. Ideally, these would be chosen in a way that minimizes negative impact on benign traffic while mitigating a flood sufficiently to permit resumption of normal or near-normal operation. These parameters should be recomputed dynamically as a function of flood and normal traffic rates, topology, effect of upstream mitigation, and other factors. Optimizing the effects over a significant number of routers and network links while ensuring stability in the presence of dynamic local adjustments will probably require the application of control theory.

### Related Work

The most closely related research is recent work at AT&T Center for Internet Research at ICSI (ACIRI) called Aggregate-Based Congestion Control (ACC) and Pushback [10]. This work grew out of ACIRI’s development of congestion control and congestion management techniques for routers. Traditionally, such techniques are meant to stimulate improved behavior of TCP back-off mechanisms in conformant (cooperative) end systems. This is accomplished by discarding packets en route or sending signals such as Explicit Congestion Notifications to endpoints. In [11], ACIRI proposes using similar mechanisms, including Random Early Detection with Preferential Dropping, to limit the bandwidth utilized by non-cooperating flows such as the high-volume aggregate flows associated with DDoS attacks. Recognizing the limitations of local, self-adjusting mechanisms in autonomous routers and the need for explicit coordination across routers, [12] proposes adding an inter-router signaling protocol similar to IDIP. This protocol allows a router near a DDoS victim to request that upstream routers apply rate limiting to specified excessive flows. Like IDIP, these requests propagate upstream as far as possible towards the flooding sources, "pushing back" the flood.

In effect, the research group at ACIRI has arrived at an approach very similar to ours but by an entirely different route. They began with packet discard mechanisms for congestion management and recently added an upstream signaling protocol. We began with an upstream signaling protocol for attack traceback and mitigation and recently added packet discard as a form of attack mitigation specialized for DDoS.

Primary differences between ACIRI’s work and ours are as follows:

- **Signaling Protocol Refresh and Status Reports**: ACIRI’s signaling protocol includes periodic upstream refresh messages to request continued suppression of DDoS traffic and downstream status reports to determine whether suppression should be terminated. In CITRA, while the initial response to a DDoS attack is undertaken automatically by routers, the initial response is only temporary, e.g., for a few minutes. It is the responsibility of the DC in each administrative domain, potentially with human administrator oversight, to direct routers within that domain to continue the response, optimize it, and terminate it when no longer appropriate.
- **Detection and Identification**: Although [12] mentions that a server victimized by a DDoS attack could request initiation of pushback, [10], [12], and [11] focus on techniques that would allow congested routers to detect and identify DDoS attacks by analyzing their own packet drop histories. Our approach has been to develop a generalized intrusion response infrastructure into which a variety of IDSs (including ones specialized for DDoS) could be inserted to detect attacks and initiate traceback and mitigation.
- **Simulation vs. Empirical Data**: The results published by ACIRI to date are supported by simulations that describe the potential behaviors of pushback under a variety of conditions. The results presented here are based on empirical data gathered from a specific testbed and conditions that include a real DDoS toolkit (Stacheldraht) and a widely used Internet application (RealPlayer).

### Summary and Conclusion

DDoS attacks are an increasingly critical threat to the Internet. Yet the current state of practice for DDoS defense relies on the instant availability of expert administrators and time-consuming manual procedures that cannot scale up. CITRA and IDIP were designed as a general infrastructure for traceback and autonomic response to network intrusions. We have recently adapted our existing CITRA prototype for DDoS by integrating a rate-limiting function as an additional response option for CITRA-enabled Linux routers. The resulting system has been subjected to informal tests in a laboratory testbed. The results, which have been replicated in a second testbed by another research organization, show that under these conditions, the defense provided by CITRA-enabled components allowed RealPlayer streaming media sessions to continue operation despite a network saturation attack launched from the Stacheldraht toolkit. We are currently developing mechanisms to enforce policy-based restrictions on the exchange of traceback and response services across administrative domain boundaries such as those that exist between ISPs. Potential future work includes additional effectiveness testing and analysis and potential improvements in traceback speed and scalability, ability to reliably deliver IDIP traffic over DDoS-congested network links, and ability to compute optimal rate-limiting parameters dynamically.

### References

1. D. Schnackenberg, H. Holliday, R. Smith, K. Djahandari, and D. Sterne, “Cooperative Intrusion Traceback and Response Architecture (CITRA),” Proceedings of the Second DARPA Information Survivability Conference and Exposition (DISCEX II), Anaheim, CA, June 2001.
2. D. Schnackenberg, K. Djahandari, and D. Sterne, “Infrastructure for Intrusion Detection and Response,” Proceedings of the DARPA Information Survivability Conference and Exposition, Hilton Head, SC, January 2000.
3. Arbor Networks - <http://www.arbornetworks.com>.
4. Recourse Technologies ManHunt product description - <http://www.recourse.com/products/manhunt/features.html>.
5. R. Stone, “CenterTrack: An IP Overlay Network for Tracking DoS Floods,” Proceedings of the 9th USENIX Security Symposium, Denver, CO, August 14-17, 2000.
6. “Protocol Definition - Intruder Detection and Isolation Protocol Concept, Dynamic Cooperating Boundary Controllers Interim Technical Report,” Boeing Document Number D658-10732-1, Boeing Defense & Space Group, Seattle, WA, January 1997 (ftp://ftp.tislabs.com/pub/IDIP/DCBC Interim Report.pdf).
7. CERT c(cid:3)Advisory CA-2000-01 Denial-of-Service Developments, <http://www.cert.org/advisories/CA-2000-01.html>.
8. S. Ying, “IA0126 DDoS Automated Response Re-Run,” presentation given at DARPA Information Assurance Program Biweekly Meeting, September 29, 2000 (<https://ests.bbn.com/dscgi/ds.py/Get/File-2392/ia0126 Brief.ppt> or ftp://ftp.tislabs.com/pub/IDIP/Ying briefing.ppt).
9. L. Sanchez, W. Milliken, A. Snoeren, F. Tchakountio, C. Jones, S. Kent, C. Partridge, and W. Strayer, “Hardware Support for a Hash-Based IP Traceback,” Proceedings of the Second DARPA Information Survivability Conference and Exposition (DISCEX II), Anaheim, CA, June 2001.
10. S. Floyd, S. Bellovin, J. Ioannidis, R. Mahajan, V. Paxson, and S. Shenker, “Aggregate-Based Congestion Control and Pushback,” ACIRI Annual Review, December 5, 2000 (<http://www.aciri.org/floyd/talks/ACIRI-Dec00.pdf>).
11. R. Mahajan and S. Floyd, “Controlling High-Bandwidth Flows at the Congested Router,” AT&T Center for Internet Research at ICSI (ACIRI), Preliminary Draft, November 20, 2000 (<http://www.aciri.org/floyd/papers/red-pd.pdf>).
12. R. Mahajan, S. Bellovin, S. Floyd, J. Ioannidis, V. Paxson, and S. Shenker, “Controlling High Bandwidth Aggregates in the Network,” AT&T Center for Internet Research at ICSI (ACIRI), DRAFT, February 5, 2001 (<http://www.research.att.com/∼smb/papers/DDOS-lacc.pdf>).
13. Steven M. Bellovin, Editor, “ICMP Traceback Messages,” Internet Draft: draft-bellovin-itrace-00.txt, Mar. 2000.
14. Stefan Savage, David Wetherall, Anna Karlin, and Tom Anderson, “Practical Network Support for IP Traceback,” Proceedings of the 2000 ACM SIGCOMM Conference, August 2000.
15. Dawn X. Song and Adrian Perrig, “Advanced and Authenticated Marking Schemes for IP Traceback,” Report No. UCB/CSD-00-1107, Computer Science Division (EECS) University of California, Berkeley, California, June 2000.
16. H. Y. Chang, P. Chen, A. Hayatnagarkar, R. Narayan, P. Sheth, N. Vo, C. L. Wu, S. F. Wu, L. Zhang, X. Zhang, F. Gong, F. Jou, C. Sargor, and X. Wu, “Design and Implementation of A Real-Time Decentralized Source Identification System for Untrusted IP Packets,” Proceedings of the DARPA Information Survivability Conference & Exposition, January 2000.
17. Glenn Sager, “Security Fun with OCxmon and cflowd,” Presentation at the Internet-2 Measurement Working Group, November 1998 (<http://www.caida.org/projects/ngi/content/security/1198/mt0009.htm>).