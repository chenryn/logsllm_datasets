60
40
20
0
160
140
120
100
80
60
40
20
0
160
140
120
100
80
60
40
20
0
160
140
120
100
80
60
40
20
0
5
55
105
155
205
255
Time
305
355
405
455
Fig. 4. Rate of Packets Received at Client 3 under Diﬀerent Test Conditions
144
D. Sterne et al.
1/2) from the full recovery runs, and the duration of transmission spread out
over the full video length (i.e., it appeared as if client caching had been dis-
abled). The RealPlayer client video displays for degraded recovery runs were
visibly choppier. Table 1 shows the diﬀerences in time required for video data
transmission for the three diﬀerent cases where the video ran to completion.
Table 1. Duration of Data Transmission
Mode
Seconds to Complete Video
Data Transmission
Normal Operation (No Attack)
Autonomic Response with Full Recovery
Autonomic Response with Degraded Recovery
310
325
475
Examination of the RealSystem server’s log showed that the server had de-
tected congestion and adjusted by reducing video quality thereby lowering its
demand for bandwidth. Thus, if CITRA’s autonomic response did not take eﬀect
suﬃciently quickly, RealServer would detect congestion and attempt to make its
own adjustments.
The speed of the detector (a 366 MHz Pentium II in our case) seemed to be a
signiﬁcant contributor to this mode change. When the detector acted quickly, full
recovery was observed. Because the detector monitors the server’s LAN segment
in promiscuous mode, it may have become overloaded with monitoring when
the ﬂood started. We conjectured that a more eﬃcient detection algorithm or a
faster detector platform would likely produce more consistent results, with full
recovery occurring on every run.
In an attempt to validate these results independently, a research group in
another organization reran the experiment in a diﬀerent testbed [8]. They used
the same software conﬁguration, however, the hardware platforms diﬀered in
their conﬁguration. In each case, higher performance components were used.
The normal and ﬂood runs produced similar results, however, in each run with
autonomic response enabled, full recovery was observed, supporting our conjec-
ture that detector speed signiﬁcantly aﬀects the recovery of RealPlayer clients.
With higher speed routers, this testbed was also able to achieve 95% loading of
the server’s LAN segment. In the rerun, CITRA’s autonomic response became
eﬀective less than two seconds after the start of the ﬂood, as compared with the
10-12 seconds observed in our slower testbed, a signiﬁcant improvement.
5 Observations
As indicated by the data above, CITRA-enabled routers in the experimental
testbed traced and successfully mitigated the Stacheldraht attack much faster
than possible via manual methods. Even though Stacheldraht agents continued
to generate ﬂood packets, the video sessions continued unimpeded.
Autonomic Response to Distributed Denial of Service Attacks
145
These results, while encouraging, are preliminary. They constitute a single
data point in a large, multidimensional space of experimental variables. For
example, if more ﬂooding agents were used, creating greater congestion, IDIP
traceback and mitigation requests would encounter more collisions, delaying the
requests’ propagation upstream. It is for this reason that the IDIP uses UDP as
a transport protocol rather than TCP. Using UDP (augmented with acknowl-
edgements and retransmission) allows a traceback and mitigation request to be
transmitted via a single IP packet. TCP, however, requires the completion of a
three-way handshake ﬁrst. DDoS congestion might cause the handshake to fail re-
peatedly, adding signiﬁcant delays to the upstream propagation. IDIP’s timeout
and retransmit algorithm is derived from the cooperative “back oﬀ” algorithm
used in TCP. An interesting question for further study is whether IDIP’s ability
to push traceback requests through DDoS attacks could be further improved by
using a more aggressive retransmision algorithm.
Another area for further research concerns the scalability of this technology
to larger and higher speed networks. The CITRA-enabled Linux routers in our
testbed perform traceback by creating audit records for network ﬂows on an on-
going basis and examining them for attack path evidence when presented with a
traceback request. This technique enables routers to trace intrusions that consist
of a single IP packet. For edge routers, such ﬂow auditing may be practical, but
for core routers, it might require maintaining an unacceptable amount of state
or slowing speed-critical packet forwarding operations. (See Sanchez et al [9] for
a diﬀering view.) One approach to improving the scalability and speed of ﬂow
auditing is to enable it selectively, i.e., only for ﬂows currently under suspicion.
While this might result in missing isolated instances of single-packet attacks, it
might still be useful for tracing 1) single packet attacks that are repeated on a
massive scale via hacker scripts, and 2) DDoS ﬂoods which, by their very nature,
continue for a period of time. Alternatively, if traceback is sought only for DDoS
attacks, auditing individual ﬂows is probably unnecessary. DDoS attacks can be
traced to neighboring upstream routers simply by sampling input packets for a
few seconds and identifying the input interface from which ﬂood packets entered
and the link layer addresses from which they were sent.
An additional topic for further research is the choice of appropriate rate
limiting parameters. Ideally, these would be chosen in a way that minimizes
negative impact on benign traﬃc while mitigating a ﬂood suﬃciently to permit
resumption of normal or near-normal operation. These parameters should be
recomputed dynamically as a function of ﬂood and normal traﬃc rates, topology,
eﬀect of upstream mitigation, and other factors. Optimizing the eﬀects over a
signiﬁcant number of routers and network links while ensuring stability in the
presence of dynamic local adjustments will probably require the application of
control theory.
146
D. Sterne et al.
6 Related Work
The research most closely related to ours is recent work at AT&T Center for
Internet Research at ICSI (ACIRI) called Aggregate-Based Congestion Control
(ACC) and Pushback [10]. This work grew out of ACIRI’s development of con-
gestion control and congestion management techniques for routers. Tradition-
ally, such techniques are meant to stimulate improved behavior of TCP back
oﬀ mechanisms in conformant (cooperative) end systems. This is accomplished
by discarding packets en route or sending signals such as Explicit Congestion
Notiﬁcations to end points. In [11], ACIRI proposes using similar mechanisms
including Random Early Detection with Preferential Dropping to limit the band-
width utilized by non-cooperating ﬂows such as the high volume aggregate ﬂows
associated with DDoS attacks. Recognizing the limitations of local, self-adjusting
mechanisms in autonomous routers and the need for explicit coordination across
routers, [12] proposes adding an inter-router signaling protocol similar to IDIP.
This protocol allows a router near a DDoS victim to request that upstream
routers apply rate limiting to speciﬁed excessive ﬂows. Like IDIP, these requests
propagate upstream as far as possible towards the ﬂooding sources, “pushing
back” the ﬂood.
In eﬀect, the research group at ACIRI has arrived at an approach very sim-
ilar to ours but by an entirely diﬀerent route. They began with packet discard
mechanisms for congestion management and recently added an upstream signal-
ing protocol. We began with an upstream signaling protocol for attack traceback
and mitigation and recently added packet discard as a form of attack mitigation
specialized for DDoS.
Primary diﬀerences between ACIRI’s work and ours are as follows:
– ACIRI’s signaling protocol includes periodic upstream refresh messages to
request continued suppression of DDoS traﬃc and downstream status re-
ports to determine whether suppression should be terminated. In CITRA,
while the initial response to a DDoS attack is undertaken automatically by
routers, the initial response is only temporary, e.g., for a few minutes. It
is the responsibility of the DC in each administrative domain, potentially
with human administrator oversight, to direct routers within that domain
to continue the response, optimize it4, and terminate it when no longer ap-
propriate.
– Although [12] mentions that a server victimized by a DDoS attack could
request initiation of pushback, [10], [12], and [11] focus on techniques that
would allow congested routers to detect and identify DDoS attacks by an-
alyzing their own packet drop histories. Our approach has been to develop
a generalized intrusion response infrastructure into which a variety of IDSs
(including ones specialized for DDoS) could be inserted to detect attacks
and initiate traceback and mitigation.
– The results published by ACIRI to date are supported by simulations that
describe the potential behaviors of pushback under a variety of conditions.
4 This functionality has not been implemented.
Autonomic Response to Distributed Denial of Service Attacks
147
The results presented here are based on empirical data gathered from a spe-
ciﬁc testbed and conditions that include a real DDoS toolkit (Stacheldraht)
and a widely used Internet application (RealPlayer).
Arbor Networks [3] oﬀers a managed service based on a technology that is
purported to monitor router traﬃc for DDoS-speciﬁc anomalies, trace attacks
through neighboring routers, and recommend packet ﬁltering or rate limiting
rules to the router administrator to mitigate attacks. Because Arbor regards its
technology as proprietary, they have published few details. It appears however,
that the technology is intended for use within individual ISPs and end user
enterprises and does not attempt to propagate DDoS defense requests across
administrative domain boundaries.
Recourse Technologies’ ManHunt [4] is purported to “recognize and respond
to DOS attacks in real time by automatically tracking the attack through the
chain of ISPs so that the attack can be cut oﬀ at the source.” If an upstream
ISP uses ManHunt, it will be sent a machine readable trace back request which
it will propagate further upstream. If the ISP does not use ManHunt, it will be
sent a human readable advisory.
A number of techniques have been proposed recently for traceback of DDoS
attacks including itrace [13], packet marking [14,15], use of IP Security tunnels
[16], and packet ﬂow logging [17]. Unlike the work described here, these proposals
do not provide automated DDoS attack mitigation.
7 Summary and Conclusion
DDoS attacks are an increasingly critical threat to the Internet. Yet the current
state of practice for DDoS defense relies on the instant availability of expert
administrators and time-consuming manual procedures that cannot scale up.
CITRA and IDIP were designed as a general infrastructure for traceback and
autonomic response to network intrusions. We have recently adapted our existing
CITRA prototype for DDoS by integrating a rate limiting function as an addi-
tional response option for CITRA-enabled Linux routers. The resulting system
has been subjected to informal tests in a laboratory testbed. The results, which
have been replicated in a second testbed by another research organization, show
that under these conditions, the defense provided by CITRA-enabled compo-
nents allowed RealPlayer streaming media sessions to continue operation despite
a network saturation attack launched from the Stacheldraht toolkit. We are cur-
rently developing mechanisms to enforce policy-based restrictions on exchange of
traceback and response services across administrative domain boundaries such
as those that exist between ISPs. Potential future work includes additional eﬀec-
tiveness testing and analysis and potential improvements in traceback speed and
scalability, ability to reliably deliver IDIP traﬃc over DDoS-congested network
links, and ability to compute optimal rate limiting parameters dynamically.
148
D. Sterne et al.
References
1. D. Schnackenberg, H. Holliday, R. Smith, K. Djahandari, and D. Sterne, “Coop-
erative Intrusion Traceback and Response Architecture (CITRA),” Proceedings of
the Second DARPA Information Survivability Conference and Exposition (DIS-
CEX II), Anaheim, CA, June 2001.
2. D. Schnackenberg, K. Djahandari, and D. Sterne, “Infrastructure for Intrusion
Detection and Response,” Proceedings of the DARPA Information Survivability
Conference and Exposition, Hilton Head, SC, January 2000.
3. Arbor Networks - http://www.arbornetworks.com.
4. Recourse Technologies ManHunt product description -
http://www.recourse.com/products/manhunt/features.html.
5. R. Stone, “CenterTrack: An IP Overlay Network for Tracking DoS Floods,” Pro-
ceedings of the 9th USENIX Security Symposium, Denver, CO, August 14-17,
2000.
6. “Protocol Deﬁnition - Intruder Detection and Isolation Protocol Concept, Dynamic
Cooperating Boundary Controllers Interim Technical Report,” Boeing Document
Number D658-10732-1, Boeing Defense & Space Group, Seattle, WA, January 1997
(ftp://ftp.tislabs.com/pub/IDIP/DCBC Interim Report.pdf).
7. CERT c(cid:3)Advisory CA-2000-01 Denial-of-Service Developments,
http://www.cert.org/advisories/CA-2000-01.html.
8. S. Ying, “IA0126 DDoS Automated Response Re-Run,” presentation given at
DARPA Information Assurance Program Biweekly Meeting, September 29, 2000
(https://ests.bbn.com/dscgi/ds.py/Get/File-2392/ia0126 Brief.ppt or
ftp://ftp.tislabs.com/pub/IDIP/Ying briefing.ppt).
9. L. Sanchez, W. Milliken, A. Snoeren, F. Tchakountio, C. Jones, S. Kent, C. Par-
tridge, and W. Strayer, “Hardware Support for a Hash-Based IP Traceback,” Pro-
ceedings of the Second DARPA Information Survivability Conference and Exposi-
tion (DISCEX II), Anaheim, CA, June 2001.
10. S. Floyd, S. Bellovin, J. Ioannidis, R. Mahajan, V. Paxson, and S. Shenker,
“Aggregate-Based Congestion Control and Pushback,” ACIRI Annual Review, De-
cember 5, 2000 (http://www.aciri.org/floyd/talks/ACIRI-Dec00.pdf).
11. R. Mahajan and S. Floyd, “Controlling High-Bandwidth Flows at the Congested
Router,” AT&T Center for Internet Research at ICSI (ACIRI), Preliminary Draft,
November 20, 2000 (http://www.aciri.org/floyd/papers/red-pd.pdf).
12. R. Mahajan, S. Bellovin, S. Floyd, J. Ioannidis, V. Paxson, and S. Shenker, “Con-
trolling High Bandwidth Aggregates in the Network,” AT&T Center for Internet
Research at ICSI (ACIRI), DRAFT, February 5, 2001
(http://www.research.att.com/∼smb/papers/DDOS-lacc.pdf).
13. Steven M. Bellovin, Editor, “ICMP Traceback Messages,” Internet Draft:
draft-bellovin-itrace-00.txt, Mar. 2000.
14. Stefan Savage, David Wetherall, Anna Karlin, and Tom Anderson, “Practical Net-
work Support for IP Traceback,” Proceedings of the 2000 ACM SIGCOMM Con-
ference, August 2000.
15. Dawn X. Song and Adrian Perrig, “Advanced and Authenticated Marking Schemes
for IP Traceback,” Report No. UCB/CSD-00-1107, Computer Science Division
(EECS) University of California, Berkeley, California, June 2000.
Autonomic Response to Distributed Denial of Service Attacks
149
16. H. Y. Chang, P. Chen, A. Hayatnagarkar, R. Narayan, P. Sheth, N. Vo, C. L. Wu,
S. F. Wu, L. Zhang, X. Zhang, F. Gong, F. Jou, C. Sargor, and X. Wu, “Design
and Implementation of A Real-Time Decentralized Source Identiﬁcation System
for Untrusted IP Packets,” Proceedings of the DARPA Information Survivability
Conference & Exposition, January 2000.
17. Glenn Sager, “Security Fun with OCxmon and cﬂowd,” Presentation at the
Internet-2 Measurement Working Group, November 1998
(http://www.caida.org/projects/ngi/content/security/1198/mt0009.htm).