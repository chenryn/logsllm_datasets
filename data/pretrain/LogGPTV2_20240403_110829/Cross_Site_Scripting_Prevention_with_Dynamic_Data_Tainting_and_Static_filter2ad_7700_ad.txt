### Table 2: Top-30 Destination Domains Causing the Majority of Alert Prompts

| Rank | Domain Type | Number of Flows |
|------|-------------|-----------------|
| 1    | Tracking, Web Statistics | 502 |
| 2    | Tracking, Web Statistics | 470 |
| 3    | Tracking, Web Statistics | 466 |
| 4    | Tracking, Web Statistics | 438 |
| 5    | Tracking, Web Statistics | 430 |
| 6    | Web Statistics | 382 |
| 7    | Tracking, Advertisement | 363 |
| 8    | Blogging Service (Tracking) | 360 |
| 9    | Web Statistics, Tracking | 354 |
| 10   | Tracking, Web Statistics | 339 |
| 11   | Web Statistics | 330 |
| 12   | Tracking, Web Statistics | 316 |
| 13   | Web Statistics, Tracking | 296 |
| 14   | Web Statistics | 296 |
| 15   | Advertisement | 278 |
| 16   | Tracking, Advertisement | 267 |
| 17   | Advertisement | - |
| 18   | Career Network (Tracking) | - |
| 19   | Web Statistics, Tracking | - |
| 20   | Tracking, Web Statistics | - |
| 21   | Web Statistics | - |
| 22   | Advertisement | - |
| 23   | Web Statistics, Tracking | - |
| 24   | Advertisement | - |
| 25   | Tracking, Web Statistics | - |
| 26   | Advertisement | - |
| 27   | Advertisement | - |
| 28   | Tracking, Web Statistics | - |
| 29   | Advertisement | - |
| 30   | Tracking, Web Statistics | - |

### Analysis of JavaScript Code and Event Triggers

Web pages often contain JavaScript code that is executed in response to specific user actions, such as `onclick` or `onmouseover`. To ensure comprehensive coverage of embedded code, our crawler deliberately triggers these events and continues its analysis on any pages that are requested as a result. By using this crawler, we were able to perform a large-scale empirical evaluation of our XSS protection mechanisms, visiting a total of 1,033,000 unique web pages. To achieve broad domain coverage, we limited the number of pages visited per domain to 100. From all visited pages, 88,589 (8.58%) triggered an XSS alert prompt.

Upon closer inspection, it became evident that a majority of these alerts were caused by attempted connections to a few destination domains. As expected from our manual experiments, these domains belong to companies that collect traffic statistics for their customers' websites. Table 2 lists the top 30 domains that were the target of most information flows, along with the number of flows and the types of companies that own them. By providing rules (deny or accept) for only these top 30 domains, the number of alert prompts can be reduced to 13,964 (1.35%). This could be achieved by shipping the enhanced browser with a built-in list of these domains and denying the transfer of sensitive information to them by default. Users with fewer privacy concerns can still change some or all of these rules into accept rules.

### Further Reduction of Alert Prompts

Further reduction of alert prompts can be achieved by being less restrictive about what kind of data is considered sensitive. Our current implementation is quite restrictive, even protecting less critical pieces of data such as `document.lastModified`. Typically, the primary information that needs to be protected to thwart XSS attacks is the data stored in cookies. Analyzing the remaining alerts not caused by the top 30 domains, it was found that only 5,289 alerts were due to attempts to transfer cookie data. By focusing on the protection of cookies, the number of alert prompts can be further reduced from 13,964 to 5,289, which amounts to one prompt for every two hundred random pages visited. A more detailed breakdown of the different causes for alert prompts is provided in Table 3.

### Detailed Breakdown of Sensitive Information Transfers

| Sensitive Source(s) | Number of Flows |
|---------------------|-----------------|
| Cookie              | 5,289           |
| Form Data           | 735             |
| Location            | 8,187           |
| Referrer            | 8,696           |
| Title               | 4,246           |
| Links and Anchor     | 171             |
| Status              | 726             |

### Inspection of Cookie-Related Alerts

After inspecting a small sample of the 5,289 cases responsible for cookie-related alert prompts, it was found that many of these cases involved user information being sent to lesser-known tracking sites not listed in the top 30. Another group of warnings were "semantic" false positives, where cookie information was transferred to a different domain but not across company borders. For example, there was an exchange of sensitive data between `cnn.net` and `cnn.com`. In another case, data transfer occurred between `discover.com` and `unitedstreaming.com`, which belong to the same company. Additionally, some false positives were due to our conservative tainting approach. For instance, some pages use JavaScript to check if the browser allows cookies to be set. The script first stores a string in a cookie and immediately reads it back, then checks if the value was successfully stored. Because the cookie is considered sensitive, this check opens a tainted scope. All values written in this scope must be tainted, and if one of these values is later used in a cross-domain connection, a warning is raised.

### Summary of Empirical Evaluation

The results of our empirical evaluation demonstrate that only a small number of false warnings are generated. Even though these warnings do not correspond to real XSS attacks, they still provide users with additional control over their web privacy. Given that our protection approach provides strong security against cross-site scripting, we believe that our system is a practical and viable solution against XSS attacks.

### Conclusions

Cross-site scripting (XSS) is one of the most common vulnerabilities in modern web applications. Many service providers are either unwilling or unable to provide sufficient protection to their users. This paper proposes a novel, client-side solution to this problem. By modifying the popular Firefox web browser, we are able to dynamically track the flow of sensitive values (e.g., user cookies) on the client side. Whenever such a sensitive value is about to be transferred to a third party, the user is given the option to stop the connection. To protect against more subtle types of XSS attacks that try to leak information through non-dynamic control dependencies, we also employ an auxiliary, efficient static analysis. With this combination of dynamic and static techniques, we can reliably and efficiently protect users against XSS attacks. To validate our concepts, we automatically tested the enhanced browser on more than one million web pages using a crawler capable of interpreting JavaScript code. The results of this large-scale evaluation show that only a small number of false positives are generated, and our underlying concepts are feasible in practice.

### Acknowledgments

This work was supported by the Austrian Science Foundation (FWF) under grants P18368 (Omnis) and P18764 (Web-Defense), and by the Secure Business Austria competence center.

### References

1. addmimistrator@gmail.com. MyBB 1.0.2 XSS Attack in search.php Redirection. [Online]. Available: http://www.securityfocus.com/archive/1/423135, January 2006.
2. A. Aho, R. Sethi, and J. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 1986.
3. M. Arciemowicz. Perl Version 5.8.8 Documentation - Perlsec. [Online]. Available: http://perldoc.perl.org/perlsec.pdf, 2006.
4. marndt@bulldog.tzo.org. WebCal - A Web Based Calendar Program. [Online]. Available: http://bulldog.tzo.org/webcal/webcal.html, May 2003.
5. S. Bubrouski. Advisory: XSS in WebCal (v1.11-v3.04). [Online]. Available: http://archives.neohapsis.com/archives/fulldisclosure/2005-12/0810.html%, December 2005.
6. S. Chen, J. Xu, N. Nakka, Z. Kalbarczyk, and R. Iyer. Defeating Memory Corruption Attacks via Pointer Taintedness Detection. In IEEE International Conference on Dependable Systems and Networks (DSN), 2004.
7. D. E. Denning. A Lattice Model of Secure Information Flow. In Communications of the ACM, 1976.
8. J. Goguen and J. Meseguer. Security Policies and Security Models. In IEEE Symposium on Security and Privacy, 1982.
9. M. Group. MyBB - Home. [Online]. Available: http://www.mybboard.com/, 2006.
10. V. Haldar, D. Chandra, and M. Franz. Dynamic Taint Propagation for Java. In Twenty-First Annual Computer Security Applications Conference (ACSAC), 2005.
11. O. Hallaraker and G. Vigna. Detecting Malicious JavaScript Code in Mozilla. In 10th IEEE International Conference on Engineering of Complex Computer Systems (ICECCS05), 2005.
12. O. Ismail, M. Etoh, Y. Kadobayashi, and S. Yamaguchi. A Proposal and Implementation of Automatic Detection/Collection System for Cross-Site Scripting Vulnerability. In Proceedings of the 18th International Conference on Advanced Information Networking and Application (AINA04), March 2004.
13. N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities (Short Paper). In IEEE Symposium on Security and Privacy, 2006.
14. E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A Client-Side Solution for Mitigating Cross-Site Scripting Attacks. In The 21st ACM Symposium on Applied Computing (SAC 2006), 2006.
15. C. Kruegel and G. Vigna. Anomaly Detection of Web-based Attacks. In 10th ACM Conference on Computer and Communication Security (CCS-03) Washington, DC, USA, October 27-31, pages 251 – 261, October 2003.
16. G. D. Lucca, A. Fasolino, M. Mastroianni, and P. Tramontana. Identifying Cross Site Scripting Vulnerabilities in Web Applications. In Sixth IEEE International Workshop on Web Site Evolution (WSE’04), pages 71 – 80, September 2004.
17. Mozilla Foundation. SpiderMonkey - MDC. [Online]. Available: http://developer.mozilla.org/en/docs/SpiderMonkey, December 2005.
18. Mozilla Foundation. JavaScript Security: Same Origin. [Online]. Available: http://www.mozilla.org/projects/security/components/same-origin.html, February 2006.
19. Mozilla Foundation. Mozilla.org - Home of the Mozilla Project. [Online]. Available: http://www.mozilla.org, 2006.
20. Netscape. Using data security for tainting. [Online]. Available: http://wp.netscape.com/eng/mozilla/3.0/handbook/javascript/advtopic.htm%, 2006.
21. J. Newsome and D. Song. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In Network and Distributed System Security Symposium (NDSS), 2005.
22. A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically Hardening Web Applications Using Precise Tainting. In 20th IFIP International Information Security Conference, Makuhari-Messe, Chiba, Japan, 05 06 2005.
23. F. Nielson, H. Nielson, and C. Hankin. Principles of Program Analysis. Springer-Verlag New York, Inc., Secaucus, NJ, USA, 1999.
24. phpBB Group. phpBB.com :: Creating Communities. [Online]. Available: http://www.phpbb.com, 2006.
25. T. Pietraszek and C. Berghe. Defending against Injection Attacks through Context-Sensitive String Evaluation. In Recent Advances in Intrusion Detection (RAID), 2005.
26. A. Sabelfeld and A. Myers. Language-Based Information-Flow Security. In IEEE Journal on Selected Areas in Communications, pages 5 – 19, January 2003.
27. G. Suh, J. Lee, and S. Devadas. Secure Program Execution via Dynamic Information Flow Tracking. In International Conference on Architectural Support for Programming Languages and Operating Systems, 2004.
28. W3C - World Wide Web Consortium. Document Object Model (DOM) Level 3 Core Specification. [Online]. Available: http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/DOM3-Core.pdf, April 2004.
29. W. Xu, S. Bhatkar, and R. Sekar. Taint-Enhanced Policy Enforcement: A Practical Approach to Defeat a Wide Range of Attacks. In 15th Usenix Security Symposium, 2006.