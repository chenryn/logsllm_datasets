502
470
466
438
430
382
363
360
354
339
330
316
296
296
278
267
Type of Domain
tracking, web statistics
tracking, web statistics
tracking, web statistics
tracking, web statistics
tracking, web statistics
web statistics
tracking, advertisement
blogging service (tracking)
web statistics, tracking
tracking, web statistics
web statistics
tracking, web statistics
web statistics, tracking
web statistics
advertisement
tracking, advertisement
advertisement
advertisement
career network (tracking)
web statistics, tracking
tracking, web statistics
web statistics
advertisement
advertisement
web statistics, tracking
advertisement
tracking, web statistics
advertisement
advertisement
tracking, web statistics
Table 2. Top-30 destination domains that caused the majority of the alert prompts.
web pages contain JavaScript code that is executed in as-
sociation with speciﬁc user actions (such as onclick or
onmouseover). To achieve exhaustive coverage of code
embedded in web pages, our crawler deliberately triggers
these events and also continues its analysis on pages that
are requested as a consequence of triggering these events.
By using our crawler, we were able to perform a large-
scale empirical evaluation of our XSS protection mecha-
nisms, visiting a total of 1,033,000 unique web pages. To
achieve a broad coverage of visited domains, we limited the
maximum number of pages to be visited per domain to 100.
From all visited pages, 88,589 (8.58%) triggered an XSS
alert prompt. After a closer inspection of these warnings, it
turned out that a majority of them were caused by attempted
connections to only a few destination domains. Just as we
expected from our manual experiments, these domains be-
long to companies that collect statistics about trafﬁc on the
web sites of their customers. Table 2 lists the top 30 do-
mains that were the target of most information ﬂows, the
number of ﬂows to these domains, and the types of compa-
nies that own them. When providing rules (deny or accept)
for only these top 30 domains, it is possible to reduce the
number of alert prompts to 13,964 (1.35%). For instance,
this could be achieved by shipping the enhanced browser
with a built-in list of these domains, and by denying the
transfer of sensitive information to these domains by de-
fault. If the user has fewer concerns about privacy, she can
still change some or all of these rules into accept rules.
A further reduction of the number of alert prompts can
be achieved by being less restrictive about what kind of data
is considered to be sensitive. Our current implementation is
rather restrictive in this respect, and even protects less crit-
ical pieces of data such as document.lastModified.
Usually, the sole information that has to be protected in or-
der to foil XSS attacks is information stored in cookies. By
analyzing those remaining alerts that were not caused by the
Top-30 domains mentioned above, it turned out that only
5,289 of these alerts were due to attempts to transfer cookie
data. This means that by focusing on the protection of cook-
ies, the number of alert prompts can be further reduced from
13,964 to 5,289 (this value amounts to one prompt for ev-
ery two hundred random pages that are visited). A more
detailed breakdown of the different causes for alert prompts
can be found in Table 3. Note that some prompts are the
result of more than one sensitive source.
After inspecting a small sample of the 5,289 cases re-
sponsible for cookie-related alert prompts, it turned out
that in many of these cases, user information was sent to
less-known tracking sites that happened to be not in the
Top-30 list. Another group of warnings were "semantic"
false positives, in the sense that even though cookie infor-
mation was transferred to a different domain, it was not
transferred across company borders. For instance, we ob-
Sensitive Source(s)
Cookie
Form Data
Location
Referrer
Title
Links and Anchor
Status
Information Flows
5,289
735
8,187
8,696
4,246
171
726
Table 3. Sensitive information transferred to
the remaining domains (not Top-30).
served an exchange of sensitive data between cnn.net
and cnn.com.
In a less obvious case, data transfer
took place between the domains discover.com and
unitedstreaming.com, which turned out to belong
to the same company. Finally, we also observed some
false positives that were due to our conservative tainting ap-
proach. For example, some pages use JavaScript to check
whether the browser allows cookies to be set. To this end,
the script ﬁrst stores some string into a cookie and imme-
diately reads it back. Then, a check is made to determine
whether the value was successfully stored. Because the
cookie is considered sensitive, this check opens a tainted
scope. As we want to prevent information leaks that exploit
indirect control ﬂows, all values written in this scope have
to be tainted. When one of these values is later used in a
cross-domain connection, a warning is raised.
In summary,
the results of our empirical evaluation
demonstrate that only a small number of false warnings is
generated. Besides, even though these warnings do not cor-
respond to real XSS attacks, they still provide the user with
additional control in terms of web privacy. Given that our
protection approach provides strong security against cross-
site scripting, we believe that our system is a practical and
viable solution against XSS attacks.
8 Conclusions
Cross-site scripting (XSS) is one of the most frequent
vulnerabilities found in modern web applications. Never-
theless, many service providers are either not willing or not
able to provide sufﬁcient protection to their users. This pa-
per proposes a novel, client-side solution to this problem.
By modifying the popular Firefox web browser, we are able
to dynamically track the ﬂow of sensitive values (e.g., user
cookies) on the client side. Whenever such a sensitive value
is about to be transferred to a third party (i.e., the adversary),
the user is given the possibility to stop the connection. To
ensure protection against more subtle types of XSS attacks
that try to leak information through non-dynamic control
dependencies, we additionally employ an auxiliary, efﬁcient
static analysis, where necessary. With this combination of
dynamic and static techniques, we are able to protect the
user against XSS attacks in a reliable and efﬁcient way. To
validate our concepts, we automatically tested the enhanced
browser on more than one million web pages by means of a
crawler that is capable of interpreting JavaScript code. The
results of this large-scale evaluation demonstrate that only
a small number of false positives is generated, and that our
underlying concepts are feasible in practice.
9 Acknowledgments
This work was supported by the Austrian Science Foun-
dation (FWF) under grants P18368 (Omnis) and P18764
(Web-Defense), and by the Secure Business Austria com-
petence center.
References
[1] addmimistrator@gmail.com.
tack in search.php Redirection.
securityfocus.com/archive/1/423135,
January 2006.
MyBB 1.0.2 XSS At-
http://www.
[2] A. Aho, R. Sethi, and J. Ullman. Compilers: Principles,
Techniques, and Tools. Addison-Wesley Longman Publish-
ing Co., Inc., Boston, MA, USA, 1986.
[3] J. Allen.
[4] M. Arciemowicz.
Perl Version 5.8.8 Documentation - Perlsec.
http://perldoc.perl.org/perlsec.pdf, 2006.
phpBB 2.0.18 XSS and Full Path
http://archives.neohapsis.com/
Disclosure.
archives/fulldisclosure/2005-12/0829.
html%, December 2005.
[5] S. Bubrouski. Advisory: XSS in WebCal (v1.11-v3.04).
http://archives.neohapsis.com/archives/
fulldisclosure/2005-12/0810.html%, Decem-
ber 2005.
[6] S. Chen, J. Xu, N. Nakka, Z. Kalbarczyk, and R. Iyer. De-
feating Memory Corruption Attacks via Pointer Taintedness
Detection.
In IEEE International Conference on Depend-
able Systems and Networks (DSN), 2004.
[7] D. E. Denning. A Lattice Model of Secure Information
Flow. In Communications of the ACM, 1976.
[8] J. Goguen and J. Meseguer. Security Policies and Security
Models. In IEEE Symposium on Security and Privacy, 1982.
[9] M. Group. MyBB - Home. http://www.mybboard.
com/, 2006.
[10] V. Haldar, D. Chandra, and M. Franz. Dynamic Taint Prop-
agation for Java. In Twenty-First Annual Computer Security
Applications Conference (ACSAC), 2005.
[11] O. Hallaraker and G. Vigna. Detecting Malicious JavaScript
Code in Mozilla.
In 10th IEEE International Conference
on Engineering of Complex Computer Systems (ICECCS05),
2005.
[28] G. Suh, J. Lee, and S. Devadas. Secure Program Execution
via Dynamic Information Flow Tracking. In International
Conference on Architectural Support for Programming Lan-
guages and Operating Systems, 2004.
[29] W3C - World Wide Web Consortium.
Docu-
(DOM) Level 3 Core Spec-
http://www.w3.org/TR/2004/
ment Object Model
iﬁcation.
REC-DOM-Level-3-Core-20040407/
DOM3-Core.pdf, April 2004.
[30] W. Xu, S. Bhatkar, and R. Sekar. Taint-Enhanced Policy
Enforcement: A Practical Approach to Defeat a Wide Range
of Attacks. In 15th Usenix Security Symposium, 2006.
[12] O. Ismail, M. Etoh, Y. Kadobayashi, and S. Yamaguchi. A
Proposal and Implementation of Automatic Detection/Col-
lection System for Cross-Site Scripting Vulnerability.
In
Proceedings of the 18th International Conference on Ad-
vanced Information Networking and Application (AINA04),
March 2004.
[13] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A Static
Analysis Tool for Detecting Web Application Vulnerabilities
(Short Paper). In IEEE Symposium on Security and Privacy,
2006.
[14] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A
Client-Side Solution for Mitigating Cross-Site Scripting At-
tacks. In The 21st ACM Symposium on Applied Computing
(SAC 2006), 2006.
[15] C. Kruegel and G. Vigna. Anomaly Detection of Web-based
Attacks. In 10th ACM Conference on Computer and Com-
munication Security (CCS-03) Washington, DC, USA, Octo-
ber 27-31, pages 251 – 261, October 2003.
[16] G. D. Lucca, A. Fasolino, M. Mastroianni, and P. Tramon-
tana. Identifying Cross Site Scripting Vulnerabilities in Web
Applications. In Sixth IEEE International Workshop on Web
Site Evolution (WSE’04), pages 71 – 80, September 2004.
[17] marndt@bulldog.tzo.org. WebCal - A Web Based Calen-
dar Program. http://bulldog.tzo.org/webcal/
webcal.html, May 2003.
[18] Mozilla
Foundation.
SpiderMonkey
- MDC.
http://developer.mozilla.org/en/docs/
SpiderMonkey, December 2005.
[19] Mozilla Foundation.
JavaScript Security: Same Ori-
http://www.mozilla.org/projects/
gin.
security/components/same-origin.html,
February 2006.
[20] Mozilla Foundation. Mozilla.org - Home of the Mozilla
Project. http://www.mozilla.org, 2006.
for
tainting
Using
[21] Netscape.
data
security.
http://wp.netscape.com/eng/mozilla/3.
0/handbook/javascript/advtopic.htm%, 2006.
[22] J. Newsome and D. Song. Dynamic Taint Analysis for Auto-
matic Detection, Analysis, and Signature Generation of Ex-
ploits on Commodity Software. In Network and Distributed
System Security Symposium (NDSS), 2005.
[23] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and
D. Evans. Automatically Hardening Web Applications Us-
ing Precise Tainting. In 20th IFIP International Information
Security Conference, Makuhari-Messe, Chiba, Japan, 05 06
2005.
[24] F. Nielson, H. Nielson, and C. Hankin. Principles of Pro-
gram Analysis. Springer-Verlag New York, Inc., Secaucus,
NJ, USA, 1999.
[25] phpBB Group.
phpBB.com :: Creating Communities.
http://www.phpbb.com, 2006.
[26] T. Pietraszek and C. Berghe. Defending against Injection
Attacks through Context-Sensitive String Evaluation. In Re-
cent Advances in Intrusion Detection (RAID), 2005.
[27] A. Sabelfeld and A. Myers. Language-Based Information-
Flow Security. In IEEE Journal on Selected Areas in Com-
munications, pages 5 – 19, January 2003.