sk(cid:3)
i ← genSE(1k) if ti = skse,
sk(cid:3)
].word if Dui[hnd ui = lhnd
:= (ski)i=1,...,n with ski
i
i
and sk(cid:3)
i ←  otherwise.
3
4.2 Preservation of Key Secrecy
We can now state our main key-secrecy theorem:
If
for certain honest users H and a secret-key belief function
seckeys, the ideal cryptographic library keeps the keys in
seckeys symbolically secret, then every conﬁguration of H
with the real cryptographic library keeps the keys in seckeys
cryptographically secret.
Theorem 4.1 (Symbolic Key Secrecy Implies Crypto-
graphic Key Secrecy) Let a polynomial-time honest user H
cryH }, S cryH ) of the ideal cryptographic li-
of a structure ({TH
brary Sys cry,id and a secret-key belief function seckeys for
H be given such that the cryptographic library with this user
keeps the keys in seckeys strictly symbolically secret. Then
every polynomial-time conﬁguration ( ˆM cryH , S cryH , H, A) of
the real cryptographic library Sys cry,real
E,S,A,SE (with the same
user H) keeps the keys in seckeys cryptographically secret.
2
This theorem makes statements about adversary handles
and real keys, which only exist in either the ideal or the
real cryptographic library, respectively. Hence the theo-
rem cannot be proved solely as a consequence of the as-
secure-as relation, in other words reactive simulatability,
between these two systems, because reactive simulatabil-
ity only concerns the indistinguishability of the views of
the honest users H. We therefore extend the simulatabil-
ity proof from [11, 12, 9] to the desired property. The ba-
∗
H is deﬁned
sic proof structure is that a combined system C
that essentially contains all elements of both the real and
Syscry, real
cry
Mu
cry
Mv
A
Figure 5. Cryptographic key secrecy
Deﬁnition 4.2 (Secret-key Belief Function) A secret-key
belief function for a set H (intuitively the indices of hon-
est participants) is a function seckeys with domain Σ∗
and
range (H × HNDS × {ska, skse})∗
3
We ﬁrst deﬁne symbolic key secrecy for such a function.
In addition to the conditions for individual keys, we require
that all elements point to different terms, so that we can
expect the corresponding list of cryptographic keys to be
entirely random.
.
Deﬁnition 4.3 (Symbolic Key Secrecy for the Ideal Cryp-
tographic Library) Let a user H suitable for a structure
cryH }, S cryH ) of the cryptographic library Sys cry,id and a
({TH
secret-key belief function seckeys for H be given. We say
that the cryptographic library with this user keeps the keys
in seckeys strictly symbolically secret iff for all conﬁgura-
cryH }, S cryH , H, A) of this structure, every
tions conf = ({TH
v ∈ view conf (H), and every element (ui, lhnd
, ti) of the list
seckeys(v), the term under (ui, lhnd
) is a symbolically se-
].ind (cid:14)= D[hnd uj =
cret key of type ti, and D[hnd ui = lhnd
lhnd
j
].ind for all i (cid:14)= j.
3
i
i
i
This deﬁnition lends itself to automated proof tools because
it is entirely symbolic and belongs to the typical class of
secrecy properties proven with such tools. The typical for-
mulation is that no ideal adversary can obtain certain des-
ignated terms into its symbolic knowledge set. In the given
model, the knowledge sets are deﬁned by the possession of
handles to terms.
We deﬁne cryptographic key secrecy similar to crypto-
graphic deﬁnitions for key-exchange protocols: We demand
that no polynomial-time adversary can distinguish the keys
designated by the function seckeys from fresh keys. This is
illustrated in Figure 5.
Deﬁnition 4.4 (Cryptographic Key Secrecy for the Real
Cryptographic Library) Let a polynomial-time conﬁgura-
tion conf = ( ˆM cryH , S cryH , H, A) of the real cryptographic li-
brary Sys cry,real
E,S,A,SE and a secret-key belief function seckeys
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
proof, we furthermore obtain that also nonces without ad-
versary handle, i.e., nonces that are symbolically secret, are
indistinguishable from randomly chosen bitstrings of the
same length in the real cryptographic library.
5 Conclusion
For the ﬁrst time, we have related symbolic secrecy as
used in all usual automated proof tools for cryptographic
protocols with real cryptographic secrecy notions. Sym-
bolic secrecy is essentially deﬁned by the absence of terms
from an adversary’s knowledge set, cryptographic secrecy
by the indistinguishability of the real secret bitstrings from
fresh random bitstrings of the same type, given the view of
a real, cryptographic adversary. We based our results on the
Dolev-Yao-style ideal cryptographic library from [11, 12, 9]
and its provably secure implementation. We pointed out
why symbolic secrecy does not imply cryptographic se-
crecy for all terms and in all situations and therefore in-
vestigated two particularly important cases separately, mes-
sage (payload) secrecy and key secrecy. For the former,
we came up with a general cryptographic secrecy deﬁnition
that separates information leakage about a payload by the
users themselves from information leakage in the system,
and we showed that symbolic key secrecy of the protocol
implies that no information leaks in the protocol. For key
secrecy, we deﬁned realistic, symbolically veriﬁable con-
ditions beyond the absence of a key from the adversary’s
knowledge set and showed that these conditions imply full
cryptographic secrecy of the corresponding real key.
References
[1] M. Abadi and A. D. Gordon. A calculus for cryptographic
protocols: The spi calculus. In Proc. 4th ACM Conference
on Computer and Communications Security, pages 36–47,
1997.
[2] M. Abadi and J. J¨urjens. Formal eavesdropping and its com-
putational interpretation. In Proc. 4th International Sympo-
sium on Theoretical Aspects of Computer Software (TACS),
pages 82–94, 2001.
[3] M. Abadi and P. Rogaway. Reconciling two views of cryp-
tography: The computational soundness of formal encryp-
tion. In Proc. 1st IFIP International Conference on Theo-
retical Computer Science, volume 1872 of Lecture Notes in
Computer Science, pages 3–22. Springer, 2000.
[4] M. Backes. A cryptographically sound Dolev-Yao style se-
curity proof of the Otway-Rees protocol. In Proc. 9th Eu-
ropean Symposium on Research in Computer Security (ES-
ORICS), volume 3193 of Lecture Notes in Computer Sci-
ence, pages 89–108. Springer, 2004.
[5] M. Backes and C. Jacobi. Cryptographically sound and
machine-assisted veriﬁcation of security protocols. In Proc.
the ideal system. In particular, it contains a database struc-
tured like D but with an additional attribute word for real
bitstrings corresponding to the terms, as they are generated
by the simulator. A second combined system CH contains
the real bitstrings as generated by the real machines. An
∗
H is word secrecy, which states that
important invariant of C
no information ﬂows from certain variables into others that
are or may later become known to the adversary. We use
the following word-secrecy lemma as a basis for our key
secrecy proof.
Lemma 4.1 (Word Secrecy with Symmetric Keys) Let H
and A be machines such that ( ˆM cryH , S cryH , H, A) is a
polynomial-time conﬁguration of the real cryptographic li-
brary Sys cry,real
E,S,A,SE. Then the following invariant holds in
H}, S cryH , H, A) except with
runs of the conﬁguration ({C
∗
negligible probability: Given a state DC∗
H of the database
of the combined system, let the set Pub Var of “public”
variables contain
H[i].word with DC∗
• all words DC∗
H[i].hnd a (cid:14)= ↓, i.e.,
the real messages where the adversary has learned the
corresponding term symbolically,
• the state of A and H, and the TH
cryH -part of the state of
∗
H,
C
• the secret keys of public-key schemes where the pub-
lic keys are known to the adversary, i.e., the words
H[i − 1].type ∈ {pke, pks} and
DC∗
DC∗
H[i].word with DC∗
H[i − 1].hnd a (cid:14)= ↓, and1
• the symmetric secret keys for which an encryption or
H[i].word
H[j].hnd a (cid:14)= ↓ and
H[j].arg[2] =
authenticator is public, i.e., the words DC∗
where an index j exists with DC∗
DC∗
i − 1.
H[j].type ∈ {aut, symenc} and DC∗
Then no information from other variables has ﬂown into
Pub Var in the sense of information ﬂow in programming
languages, i.e., static program analysis.
2
Lemma 4.1 gives the tight correspondence of symbolic se-
crecy and cryptographic secrecy for individual keys that was
mentioned in the introductory sections. However, such per-
key considerations only work for information-theoretic se-
curity; this is why the lemma is formulated for the combined
∗
H which contains some simulated aspects instead
system C
of the combined system CH with the completely real bit-
strings; for CH we only show more abstract key secrecy
similar to Deﬁnition 4.4.
The proof of Theorem 4.1 based on the word-secrecy
lemma is given in the long version. As a by-product of this
1These secret keys are included because information from them ﬂows
into the public keys, but they do not get adversary handles when the public
keys are published.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
[17] J. Herzog, M. Liskov, and S. Micali. Plaintext awareness via
key registration. In Advances in Cryptology: CRYPTO 2003,
volume 2729 of Lecture Notes in Computer Science, pages
548–564. Springer, 2003.
[18] R. Kemmerer, C. Meadows, and J. Millen. Three systems
for cryptographic protocol analysis. Journal of Cryptology,
7(2):79–130, 1994.
[19] P. Laud. Semantics and program analysis of computationally
secure information ﬂow. In Proc. 10th European Symposium
on Programming (ESOP), pages 77–91, 2001.
[20] G. Lowe. Breaking and ﬁxing the Needham-Schroeder
public-key protocol using FDR. In Proc. 2nd International
Conference on Tools and Algorithms for the Construction
and Analysis of Systems (TACAS), volume 1055 of Lecture
Notes in Computer Science, pages 147–166. Springer, 1996.
[21] G. Lowe. Casper: A compiler for the analysis of security
protocols. In Proc. 10th IEEE Computer Security Founda-
tions Workshop (CSFW), pages 18–30, 1997.
[22] C. Meadows. Using narrowing in the analysis of key man-
agement protocols. In Proc. 10th IEEE Symposium on Secu-
rity & Privacy, pages 138–147, 1989.
[23] M. Merritt. Cryptographic Protocols. PhD thesis, Georgia
Institute of Technology, 1983.
[24] D. Micciancio and B. Warinschi. Soundness of formal en-
cryption in the presence of active adversaries. In Proc. 1st
Theory of Cryptography Conference (TCC), volume 2951
of Lecture Notes in Computer Science, pages 133–151.
Springer, 2004.
[25] J. K. Millen. The interrogator: A tool for cryptographic pro-
tocol security. In Proc. 5th IEEE Symposium on Security &
Privacy, pages 134–141, 1984.
[26] L. Paulson. The inductive approach to verifying crypto-
Journal of Cryptology, 6(1):85–128,
graphic protocols.
1998.
[27] B. Pﬁtzmann and M. Waidner. A model for asynchronous
reactive systems and its application to secure message trans-
mission. In Proc. 22nd IEEE Symposium on Security & Pri-
vacy, pages 184–200, 2001. Extended version of the model
(with Michael Backes) IACR Cryptology ePrint Archive
2004/082, http://eprint.iacr.org/.
[28] A. W. Roscoe. Modelling and verifying key-exchange pro-
tocols using CSP and FDR. In Proc. 8th IEEE Computer Se-
curity Foundations Workshop (CSFW), pages 98–107, 1995.
[29] S. Schneider. Security properties and CSP. In Proc. 17th
IEEE Symposium on Security & Privacy, pages 174–187,
1996.
[30] A. C. Yao. Theory and applications of trapdoor functions.
In Proc. 23rd IEEE Symposium on Foundations of Computer
Science (FOCS), pages 80–91, 1982.
20th Annual Symposium on Theoretical Aspects of Com-
puter Science (STACS), volume 2607 of Lecture Notes in
Computer Science, pages 675–686. Springer, 2003.
[6] M. Backes and B. Pﬁtzmann. Computational probabilistic
non-interference. In Proc. 7th European Symposium on Re-
search in Computer Security (ESORICS), volume 2502 of
Lecture Notes in Computer Science, pages 1–23. Springer,
2002.
[7] M. Backes and B. Pﬁtzmann. A cryptographically sound
security proof of the Needham-Schroeder-Lowe public-key
protocol.
In Proc. 23rd Conference on Foundations of
Software Technology and Theoretical Computer Science
(FSTTCS), pages 1–12, 2003. Full version in IACR Cryp-
tology ePrint Archive 2003/121, Jun. 2003, http://
eprint.iacr.org/.
[8] M. Backes and B. Pﬁtzmann. Intransitive non-interference
for cryptographic purposes. In Proc. 24th IEEE Symposium
on Security & Privacy, pages 140–152, 2003.
[9] M. Backes and B. Pﬁtzmann. Symmetric encryption in
a simulatable Dolev-Yao style cryptographic library.
In
Proc. 17th IEEE Computer Security Foundations Workshop
(CSFW), 2004. Full version in IACR Cryptology ePrint
Archive 2004/059, Feb. 2004, http://eprint.iacr.
org/.
[10] M. Backes, B. Pﬁtzmann, M. Steiner, and M. Waidner. Poly-
nomial fairness and liveness. In Proc. 15th IEEE Computer
Security Foundations Workshop (CSFW), pages 160–174,
2002.
[11] M. Backes, B. Pﬁtzmann, and M. Waidner. A composable
cryptographic library with nested operations (extended ab-
stract).
In Proc. 10th ACM Conference on Computer and
Communications Security, pages 220–230, 2003. Full ver-
sion in IACR Cryptology ePrint Archive 2003/015, Jan.
2003, http://eprint.iacr.org/.
[12] M. Backes, B. Pﬁtzmann, and M. Waidner. Symmetric au-
thentication within a simulatable cryptographic library. In
Proc. 8th European Symposium on Research in Computer
Security (ESORICS), volume 2808 of Lecture Notes in Com-
puter Science, pages 271–290. Springer, 2003. Extended
version in IACR Cryptology ePrint Archive 2003/145, Jul.
2003, http://eprint.iacr.org/.
[13] M. Backes, B. Pﬁtzmann, and M. Waidner. A general com-
position theorem for secure reactive systems. In Proc. 1st
Theory of Cryptography Conference (TCC), volume 2951
of Lecture Notes in Computer Science, pages 336–354.
Springer, 2004.
[14] R. Canetti and J. Herzog. Universally composable symbolic
analysis of cryptographic protocols (the case of encryption-
based mutual authentication and key exchange). Cryptol-
ogy ePrint Archive, Report 2004/334, 2004. http://
eprint.iacr.org/.
[15] D. Dolev and A. C. Yao. On the security of public key proto-
cols. IEEE Transactions on Information Theory, 29(2):198–
208, 1983.
[16] S. Even and O. Goldreich. On the security of multi-party
In Proc. 24th IEEE Symposium on
ping-pong protocols.
Foundations of Computer Science (FOCS), pages 34–39,
1983.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE