deadlock_timeout = 1s  
```  
3\. 配置recovery.conf  
```  
restore_command = 'cp $PGARCHIVE/%f %p'         # e.g. 'cp /mnt/server/archivedir/%f %p'  
archive_cleanup_command = 'pg_archivecleanup $PGARCHIVE %r'  
standby_mode = 'on'  
trigger_file = '/database/pgdata/tbs1/pg_root/postgresql.trigger.1921'  
```  
4\. 启动slave节点  
启动完后,可以通过top看到slave节点在拼命的恢复pg_start_backup以来的所有wal.  
恢复完后修改hot_standby = on,重启slave节点  
## 七、测试  
1\. (on master)新建用户  
```  
create role digoal nosuperuser login encrypted password 'digoal';  
```  
2\. 新建表空间  
```  
on master  
su - postgres  
mkdir /database/pgdata/tbs3/tbs_test  
on slave  
su - postgres  
mkdir /database/pgdata/tbs3/tbs_test  
on master  
create tablespace tbs_digoal owner test location '/database/pgdata/tbs3/tbs_digoal';  
```  
3\. (on master)新建数据库  
```  
create database digoal with owner digoal template template0 encoding 'UTF8' tablespace tbs_digoal;  
```  
4\. (on master)新建schema  
```  
\c digoal digoal  
create schema digoal authorization digoal;  
```  
5\. (on master)新建表  
```  
\c digoal digoal  
create table tbl_users (id int8 , nick varchar(32));  
```  
6\. (on master)插入测试数据  
```  
insert into tbl_users select generate_series(1,10000000),'digoal';  
由于插入数据量比较大,可以很明显的看到pg_arch目录中的WAL在增加,如  
-rw------- 1 postgres postgres      254 Dec 30 15:17 000000010000000000000004.00000020.backup  
-rw------- 1 postgres postgres 67108864 Dec 30 15:19 000000010000000100000024  
-rw------- 1 postgres postgres 67108864 Dec 30 15:19 000000010000000100000025  
生成WAL后,slave节点又开始recover事件,recover完成后等待下一个wal如:  
25456 postgres  18   0 2389m 1364  736 S  0.0  0.0   0:00.00 postgres: startup process   waiting for 00000001000000010000000E   
```  
7\. (on master)使用DDL测试冲突  
on master  
```  
alter table tbl_users add column first_name default 'zhou';  
alter table tbl_users add column last_name default 'digoal';  
```  
在slave恢复期间,在slave节点执行 select count(*) from tbl_users;发生等待事件.  
on slave   
```  
/var/applog/pg_log中查看最近一个日志文件,  
2010-12-30 15:04:01.462 CST,"digoal","digoal",25240,"127.0.0.1:43079",4d1c2edf.6298,1,"SELECT waiting",2010-12-30 15:03:59 CST,2/14,0,LOG,00000,"process 25240 still waiting for AccessShareLock on relation 16388 of database 16386 after 1000.564 ms",,,,,,"select count(*) from tbl_users;",22,,"psql"  
```  
如果数据库没有其他操作了,不再发生ARCHIVE操作时,你可能会发现主节点已经alter完了,slave节点还是在等待.  
原因是alter完的log信息存在的XLOG还没有发生归档,slave节点会一直等待下去(这时可以手工执行pg_switch_xlog).  
8\. (on master)测试checkpoint  
在PostgreSQL中发生checkpoint后,在此之前的WAL在做数据库恢复时就用不到了,因为确保数据都写入数据文件了.  
pg_archivecleanup也是根据checkpoint来判断和删除不需要的WAL的.  
9\. (on slave)测试cleanarchive  
在做checkpoint前,去看$PGARCHIVE目录,已经被apply的文件还存在,并没有被pg_archivecleanup命令清除掉,原因就是这些文件是最近一次checkpoint以来的WAL文件,在数据库恢复时是需要用到的.  
如果你手工执行pg_archivecleanup $PGARCHIVE 000000010000000200000031 (假设000000010000000200000031这个是在$PGARCHIVE中的一个WAL的文件名)  
这条命令将删除000000010000000200000031以前生成的所有WAL文件,一定要小心操作,万一不小心把最近一次CHECKPOINT以来的WAL删除了,  
补救的方法是赶紧到master上做一次checkpoint,让slave知道这次checkpoint,否则的话下次slave启动还会读到000000010000000200000031这个文件以前的文件,那时候就只能找到这些文件或重建slave了.  
10\. (on slave)测试active slave  
激活SLAVE很简单,了解到已经apply了最新的WAL后,执行以下  
```  
su - postgres  
touch /database/pgdata/tbs1/pg_root/postgresql.trigger.1921  
```  
数据库会触发激活的动作,激活后/database/pgdata/tbs1/pg_root/postgresql.trigger.1921这个文件会自动删掉,并且recovery.conf被重命名为recovery.done.  
激活后的slave不可逆转为slave了.需要重建.  
11\. 监控  
```  
pg_current_xlog_insert_location  
pg_current_xlog_location  
pg_last_xlog_receive_location  
pg_last_xlog_replay_location  
top  
CREATE OR REPLACE VIEW pg_stat_replication AS  
    SELECT  
            S.procpid,  
            S.usesysid,  
            U.rolname AS usename,  
            S.application_name,  
            S.client_addr,  
            S.client_port,  
            S.backend_start  
    FROM pg_stat_get_activity(NULL) AS S, pg_authid U  
    WHERE S.usesysid = U.oid AND S.datid = 0;  
```  
八、附pgctl.sh脚本  
```  
#!/bin/bash  
# environment.  
# Get the aliases and functions  
if [ -f ~/.bashrc ]; then  
        . ~/.bashrc  
fi  
# User specific environment and startup programs  
export PGHOME=/opt/pgsql  
export PATH=$PGHOME/bin:$PATH  
export PGDATA=/database/pgdata/tbs1/pg_root  
export PGPORT=1921  
export LANG='en_US.utf8'  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib  
RETVAL=1  
start() {  
su - postgres -c "/usr/bin/nohup $PGHOME/bin/postgres -D $PGDATA -p $PGPORT >/dev/null 2>>/var/applog/pg_log/start_err.log  </dev/null &"  
         RETVAL=$?  
         return $RETVAL  
}  
stop() {  
su - postgres -c "$PGHOME/bin/pg_ctl stop -D $PGDATA -m fast"  
         RETVAL=$?  
         return $RETVAL  
}  
reload() {  
su - postgres -c "$PGHOME/bin/pg_ctl reload -D $PGDATA"  
         RETVAL=$?  
         return $RETVAL  
}  
# See how we were called.  
case "$1" in  
  start)  
        start  
        ;;  
  stop)  
        stop  
        ;;  
  restart)  
        stop  
        start  
        ;;  
  reload)  
        reload  
        ;;  
  *)  
        echo $"Usage: $prog {start|stop|restart|reload}"  
        exit 2  
esac  
exit $RETVAL  
# Auth Digoal.Zhou  
# Corp. Sky-Mobi  
```  
## 久、其他  
1\. 自9.0以后,PostgreSQL引入了一个叫pg_archivecleanup的模块,简化了standby的配置.以前通过pg_standby来实现的.  
2\. 第二象限开发的基于PostgreSQL 内部复制的产品  
http://projects.2ndquadrant.com/repmgr  
3\. other blog  
PostgreSQL 9.1 Allow standby recovery to switch to a new timeline automatically  
http://blog.163.com/digoal@126/blog/static/163877040201182395310376/  
PostgreSQL 9.2 devel adding cascading replication support  
http://blog.163.com/digoal@126/blog/static/1638770402012012361519/  
PostgreSQL HOT STANDBY using Stream  
http://blog.163.com/digoal@126/blog/static/16387704020110442050808/  
PostgreSQL cluster role switchover between primary and standby  
http://blog.163.com/digoal@126/blog/static/163877040201141154024306/  
We can ignore the performance influence when use sync replication in PostgreSQL 9.1    
http://blog.163.com/digoal@126/blog/static/163877040201192203458765/  
PostgreSQL 9.1 Replication role privilege change to REPLICATION from SUPERUSER  
http://blog.163.com/digoal@126/blog/static/16387704020114112379185/  
PostgreSQL 9.0.2 Replication Best Practices  
http://blog.163.com/digoal@126/blog/static/1638770402010113034232645/  
PostgreSQL replication monitor  
http://blog.163.com/digoal@126/blog/static/163877040201141134748660/  
New replication mode: async, write, fsync, replay  
http://blog.163.com/digoal@126/blog/static/16387704020121231117557/  
PostgreSQL HOT STANDBY using log shipping  
http://blog.163.com/digoal@126/blog/static/1638770402010113053825671/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")