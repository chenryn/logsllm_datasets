第28章
:accessor index
:accessor
:reader
:reader file
实践：Shoutcast服务器
songs
title
www.TopSage.com
:initform 0)))
:initform 
:initarg
:initarg :file)
(make-array 10 :adjustable t :fill-pointer 0))
:title)
---
## Page 368
函数：
特性交互，就不能使用第26章的define-url-function宏。你需要编写一个像下面这样的正规
可以将该服务器实现成AllegroServe中的一个函数。不过，由于你需要与AllegroServe的一些底层
28.3
type上的方法，它返回保存在*songs*中的实例。
现在可以开始实现Shoutcast服务器了。由于Shoutcast协议在很大程度上是基于HTTP的，你
(defun shoutcast (request'entity)
另外出于测试的目的，可以提供一种方式向队列中添加歌曲。
(defmethod still-current-p (song (source simple-song-queue))
现在只需实现Shoutcast服务器将会用到的三个广义函数上的方法就可以了。
然后，可以在find-song-source之上定义一个通过符号singleton上的EQL特化符特化在
(defun file->song (file)
(defmethod maybe-move-to-next-song (song (source simple-song-queue))
(defmethod current-song ((source simple-song-queue))
(((+sbuosx sbuos) (attJ buosThis Stream blah blah blah")
www.TopSage.com
(request-uri request))
Grrr.
So we just
turn it off.
 doesn't understand
---
## Page 370
play-current:
ID3标签开始，那么你需要跳过它。如果你不过多地考虑IO性能，那么可以像下面这样来实现
直到要么遇到文件结尾，要么当前歌曲不再是当前歌曲了。
曲源里得到当前的歌曲，打开该歌曲的文件，然后循环地从文件中读取数据并写入到socket中，
HANDLER-CASE在LOOP之外，对错误进行处理将中断循环，从而允许play-SOngs返回。
断开并导致对socket的写入失败时，用它捕捉在play-current中抛出的错误。由于
play-current从歌曲源里得到了NIL，那么它也返回NIL，这使play-songs中的循环得以停
它必须告诉你相同的事情，这样它才能将该信息传递到下一个play-current调用里。如果
下来。
文件无关，在每次调用play-current时你需要告诉它下一个元数据何时到期，而当它返回时，
送元数据。
发送单个MP3文件的内容、跳过ID3标签以及嵌入ICY元数据。唯一的亮点是你需要跟踪何时发
制，目前你可以将其设置成singleton以使用你之前实现的simple-song-queue。
隔则来自全局变量*metadata-interval*。歌曲源的类型由变量*song-source-type*来控
该流是从请求对象中获取的socket，歌曲源通过调用find-song-source获取到，而元数据间
用来发送数据的流、歌曲源以及应当使用的元数据间隔，或者在客户端不想要元数据时为NIL。
这里只有两个复杂之处：一个是需要确保在正确的间隔上发送元数据；另一个是如果文件以
除了处理循环以外，play-Songs还提供了一个HANDLER-CASE，当MP3客户端从服务器上
由于你必须以特定的间隔来发送元数据片段，而与你何时碰巧从一个MP3文件切换到下一个
最终，你可以实现play-current了，它用来实际发送Shoutcast数据。基本思想是，你从歌
函数play-songs本身并不做太多事。它循环调用做所有粗活的函数play-current，包括
在函数shoutcast的with-http-body中，实际流出的是MP3数据。函数play-songs接受
(defun play-current (out song-source next-metadata metadata-interval)
(defun play-songs (stream song-source metadata-interval)
(defparameter*song-source-type*'singleton)
(defparameter *metadata-interval*(expt 212))
(let ((song (current-song song-source)))
(handler-case
(setf (request-reply-strategy request)
(error(e)（format*trace-output*
(loop
whilenext-metadata)
then (play-current
for next-metadata = metadata-interval
metadata-interval)
next-metadata
song-source
stream
www.TopSage.com
"Caught error in play-songs:~a"e))))
---
## Page 371
片段的字节数组，它的实现也是相当直接的。
况，它都返回在下一个元数据到期前剩余的字节数，以便传给play-current的下一次调用。?
否则，它跳出循环是因为有人改变了当前正在播放的歌曲，那么函数就只是返回。无论是哪种情
next-metadata。一旦它完成了循环，就会检查歌曲是否仍是歌曲源的当前歌曲。如果是的话，
next-metadata得到了零（如果允许发送元数据），那么它就将metadata写入到流中并重置
然后它开始从文件中读取字节并将它们写到请求的流中。
metadata来发送的元数据。接着它打开文件并使用两参数形式的FILE-POSITION跳过ID3标签。
②那些从Scheme迁移到Common Lisp的人们可能想知道为什么play-current不是递归地调用其自身。在Scheme
①多数MP3播放软件都会在用户接口的某个地方显示元数据。不过，Linux上的XMMS程序默认不这样做，为了让
函数make-icy-metadata接受当前歌曲的标题，并生成一个含有正确格式化的ICY元数据
当到达文件的结尾或是当歌曲源的当前歌曲发生改变时，循环就会中断。同时，无论何时
③禾
(defun make-icy-metadata (title)
该函数从歌曲源中得到当前歌曲，并得到一个缓冲区，含有将要通过传递标题给make-icy-
可以使用CHAR-CODE将Lisp的CHARACTER对象转化成ASCI数据的字节。
和你编写的其他代码一样，这个函数假设你的Lisp实现的内部字符编码方式是ASCI或ASCII的一个超集，因此你
循环构造来编写循环，而不是递归。
tail calls）。Common Lisp实现也允许带有这一属性，但这不是语言标准要求的。因此，Common Lisp习惯上使用
中这确实工作得很好，因为Scheme实现在规范要求下必须支持“无限次活跃尾递归”（unbounded number ofactive
“流”标签，并在标签底部的SHOUTCAST/Icecast部分里选中“Enable SHOUTCAST/Icecastitlestreaming”复选框。
下是最左边的标签）选择MPEGLayer 1/2/3Player（libmpg123.so）并按下Configure按钮；然后选择配置窗口中的
XMMS显示Shoutcast元数据，需要按Ctrl+P来打开Preferences面板；接着在AudioVOPlugins标签栏（在版本1.2.10
(let* ((text (format nil "StreamTitle='~a';" (substitute #\Space #\' title)))
(loop
(setf (aref buffer O) blocks)
(when song
next-metadata)))
(let ((metadata (make-icy-metadata (title song))))
第28章
((8 a2nq-pau6tsun): adxz-zuawata: (buos atts) eau) atTI-uado-uatm)
(buffer
(blocks (ceiling (length text) 16))
(maybe-move-to-next-song song song-source)))
(unless (file-position mp3 (id3-size song))
when (and (zerop next-metadata) metadata-interval) do
(error
(write-byte byte out)
实践：Shoutcast 服务器
(setf next-metadata metadata-interval))
(decf next-metadata)
www.TopSage.com
{read-byte mp3 1
:initial-element 0))}
:element-type
nil
'(unsigned-byte 8)
(id3-size song) (file song)))
---
## Page 372
current版本如下所示：
小相匹配，从而为你带来最佳的磁盘吞吐量。当然，无论你使用多大的缓冲区，跟踪何时发送元
SEQUENCE来一次性读写多个字节。你也给自己一个机会将文件读取操作与文件系统的自然块大
话，你绝不想在几分钟里对其调用数百万次。
派发通常足够高效让你不必担心，但它还是比非广义的函数调用成本更高一些，如果能够避免的
和WRITE-BYTE可能导致对广义函数的调用，该函数在底层派发到流参数的类上。虽说广义函数
的成本也仍然存在。特别是在使用所谓的Gray Streams提供用户可扩展流的实现里，READ-BYTE