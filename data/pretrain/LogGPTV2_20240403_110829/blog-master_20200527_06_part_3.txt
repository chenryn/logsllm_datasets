《PostgreSQL 最佳实践 - 块级别增量备份(pg\_rman baseon LSN)源码浅析与使用》    
https://github.com/digoal/blog/blob/master/201608/20160826_01.md    
块级别增量备份, ptrack, pg\_RMAN    
https://github.com/digoal/blog/blob/master/202003/20200326_14.md    
多租户, cgroup     
https://github.com/MasahikoSawada/pg_cgroup    
https://github.com/digoal/blog/blob/master/201905/20190514_01.md    
《PostgreSQL 用户进程优先级调度插件 - task schedule - pg\_prioritize》    
 https://github.com/digoal/blog/blob/master/202003/20200324_05.md    
《PostgreSQL 磁盘配额功能插件 - diskquota》    
https://github.com/digoal/blog/blob/master/202003/20200324_04.md    
PostgreSQL dba常用扩展函数库 - pg\_cheat\_funcs    
https://github.com/digoal/blog/blob/master/202003/20200324_41.md    
pg\_stat\_kcache: dba常用功能, 通过sql直接监测实例实时cpu,mem,blockdev等资源消耗.     
https://github.com/digoal/blog/blob/master/202003/20200324_28.md    
数据库job功能 pg\_cron    
https://github.com/digoal/blog/blob/master/201305/20130531_01.md    
在线垃圾回收, pg\_repack    
https://github.com/reorg/pg_repack/    
《PostgreSQL SQL审计日志回放工具 pgreplay》    
https://github.com/digoal/blog/blob/master/202003/20200324_23.md    
os pagecache 内存使用标签, pg\_fincore 内存标签功能. 热数据可以持久化, 非热数据可以尽快释放内存. 提高内存使用效率.     
https://github.com/klando/pgfincore    
真实IO统计(不包括os page cache hit) 《PostgreSQL pg\_stat\_kcache - Gathers statistics about real reads and writes done by the filesystem layer.》    
https://github.com/digoal/blog/blob/master/202003/20200324_28.md    
icu_ext    
https://github.com/dverite/icu_ext    
plprofiler, 存储过程profile统计    
https://github.com/digoal/blog/blob/master/201611/20161121_02.md    
pg\_pathman, 分区表性能提升, 自动分区, 自动增加分区等    
https://github.com/postgrespro/pg_pathman    
log精细化配置, 支持sqlstate code过滤    
https://github.com/digoal/blog/blob/master/202003/20200326_16.md    
《PostgreSQL 数据结构比对工具 pgquarrel - pg diff》    
https://github.com/digoal/blog/blob/master/202003/20200324_18.md    
《PostgreSQL pg\_top pgcenter - 实时top类工具》    
https://github.com/digoal/blog/blob/master/201810/20181003_01.md    
通用gpu加速功能    
https://github.com/digoal/blog/blob/master/201806/20180602_02.md    
http://heterodb.github.io/pg-strom/release_note/  
《PostgreSQL 数据结构比对工具 pgquarrel - pg diff》    
https://github.com/digoal/blog/blob/master/202003/20200324_18.md    
### 18 扩展开发    
《PostgreSQL 外围 SQL parser lib库》    
https://github.com/digoal/blog/blob/master/202003/20200324_16.md    
pgmasq: 只读库实现写功能, 扩展只读库的使用边界.     
https://github.com/digoal/blog/blob/master/202003/20200326_12.md     
wal 流计算hook,     
https://github.com/digoal/blog/blob/master/202003/20200326_24.md    
shared buffer 老化算法插件,     
https://github.com/digoal/blog/blob/master/202003/20200326_22.md    
ctid scan支持block范围搜索    
https://github.com/digoal/blog/blob/master/202003/20200326_04.md    
aqo优化器    
https://github.com/digoal/blog/blob/master/201803/20180322_04.md    
https://github.com/postgrespro/aqo    
《PostgreSQL mongodb query 语法兼容插件 - monq》    
https://github.com/digoal/blog/blob/master/202003/20200324_08.md    
### 19 内置插件    
https://www.postgresql.org/docs/current/contrib.html    
用得比较多的插件:     
- auth_delay, 防止暴力破解    
- auto_explain, 将慢sql的执行计划写入日志    
- btree_gin, 普通字段支持gin倒排索引    
- btree_gist, 普通字段支持gist索引    
- citext, 忽略大小写的数据类型    
- dblink, 不解释    
- earthdistance, 轻量化地球模型类型    
- file_fdw, 以外部表的形式读写文件    
- fuzzystrmatch, 语音模糊搜索    
- intagg, 整型聚合功能扩展    
- intarray, 整型数组GIST索引扩展功能    
- lo, 大对象处理    
- pageinspect, 内窥数据库BLOCK的内容    
- passwordcheck, 密码复杂度检测    
- pg\_buffercache, 统计数据库shared buffer的内容    
- pgcrypto, 加密插件    
- pg\_freespacemap, 观察数据库fsm文件内容    
- pgrowlocks, 行锁统计    
- pgstattuple, 记录级别统计信息观察    
- pg\_trgm, 模糊查询, 相似文本查询    
- pg\_visibility, 观察数据库block的vm标签值(all visibility, frozen, dirty等)    
- postgres_fdw, postgresql外部表    
- spi, 一些常用的跟踪触发器函数, 例如最后变更事件跟踪    
- test_decoding, 逻辑复制decoder    
- tsm_system_rows, 采样扩展模块    
- tsm_system_time, 采样扩展模块    
- uuid-ossp, UUID生成模块    
- xml2, XML类型模块    
- pg\_stat\_statements, 观察数据库的sql运行统计信息, 例如top sql    
- cube, cube类型, 支持多种距离排序算法, 也可以用于相似向量搜索    
- ltree, 树类型    
- pg\_prewarm, buffer预热功能    
- tablefunc, 行列变换插件    
## 二、可改进点
### 1 开发者功能  
delete|update limit , 适合批量操作  
update|delete skip locked , 提升批量并发操作(当前需要select for update skip locked, 然后update. 需要交互几次)  
index skip scan optimizer, 目前需要cte递归模拟  
### 2 内核功能  
1、数据块级别压缩,  
2、undo 引擎, 减少膨胀  
3、垃圾回收改进, 只保留需要的版本, 精细化vacuum，目前只有oldest xid一个判断维度。很多可以回收的垃圾并没有回收。  
4、global cache , 在大量分区表、或者PaaS用户场景中, 对象特别多, 目前使用的是会话级catalog cache, 可能导致大量的对象元数据内存空间占用, 导致内存大量浪费.  
5、flashback query  
6、flashback instance, instance snapshot  
https://github.com/digoal/blog/blob/master/201809/20180909_01.md  
7、分区表全局索引  
8、索引分区(不是分区表索引)  
8、sql语法支持绕过shared buffer的查询和写入, 突发大表查询不影响shared buffer  
9、并行写wal日志, 目前大量数据导入, 可能有两个性能瓶颈, datalbock extend exclusive lock, 或者wal insert exclusive lock  
10、按db划分wal, 实现db pluggable功能  
11、文件级迁移能力, 降低上云门槛, 提高上云速度(跑满带宽). 市面上支持的:  
postgrespro: pg_transport  
aws: pg_transport  
12、支持增量迁移、备份tablespace, db.  
https://github.com/digoal/blog/blob/master/202003/20200326_25.md  
https://github.com/digoal/blog/blob/master/201910/20191012_01.md  
12、pg_upgrade支持增量大版本升级, 物理升级记录下wal位点, 升级后转成逻辑增量同步, 实现增量大版本迁移.   
13、gin 支持index scan, 目前当一个key的tuples非常多时, index scan要扫描整个tree, 如果用户发起了limit过滤, 实际上也用不上, 需要全扫, 性能问题.  
14、index scan sample method , 对应table sample, 这个是索引扫描的随机采样功能.  
15、index search condition pushdown, 支持在索引的branch或leaf 节点增加附加column或表达式value, 当where条件有这些column时, 这些value用于提前过滤, 减少索引扫描或减少回表扫描.  
https://github.com/digoal/blog/blob/master/202004/20200429_01.md  
16、online ddl, 增强 pg_repack   
17、多租户功能, rsq, resource queue.  
18、多租户功能, 分时动态配置quota  
多租户能力, quota, 分时, 分域  
多租户，存储配额功能（table级、用户级、schema级别、db级）  
paas类业务需求，例如一个企业一个schema的场景，不同企业根据等级分配不同的资源限制。  
多租户，资源隔离（会话级、用户级、db级、schema级）  
19、基于mv log的物化视图  
20、rotate table, 指定表的大小上限, 记录数上限, lilo, fifo等可配置的数据老化.  
21、thread pool , 解决大并发连接性能问题 , 类似oracle shared server模式.   
22、上游支持通过 restore command 获取wal并发送给下游 . (解决上游需要wal keep segment大量的问题)    
23、基于共享存储的读写, 类似oracle rac   
24、全局临时表, 解决临时表导致的catalog 膨胀问题  
25、持久化shared buffer缓存池, 热表不会被挤出buffer   
26、内存表 . 支持配置内存表的异步持久化时间间隔(例如覆盖写一个普通表). 启动时可以选择是否自动加载持久化内容.  
https://postgrespro.com/docs/enterprise/11/in-memory   
27、logical slot failover功能, 主从复制高可用模式下,当主从发生切换时,逻辑订阅slot信息不丢失.   
27\.1、logical 支持按table写逻辑日志, 目前wal_level=logical需要记录下整个cluster的逻辑日志, 日志量很大, 如果业务只需要少量的共享表, 能支持基于表级别的开启logical可以大幅减少log量.  
28、SQL翻译功能(oracle|mysql|ms sql to pg)  
29、TDE  
30、SGX加密  
31、只读实例支持写操作, 只读实例支持写临时对象、写主库操作. 解决只读实例用于分析, 多阶段分析需要临时存储的问题.  
https://github.com/digoal/blog/blob/master/202003/20200326_12.md   
32、query cache, 重复执行大计算量, 且数据未变化大场景. 性能提升比较明显.  
33、内置三节点, 自动failover  
34、逻辑订阅支持多master, 全球化部署企业，单元化功能。  
https://github.com/timbira/krahodb  
https://github.com/postgrespro/postgres_cluster  
35、内置mpp功能  
36、优化器增强(复杂sql, 大量join, 大量子查询, 分析场景)  
[《PostgreSQL merge join 扫描方法实例细说，以及SQL写法注意 或 内核优化建议 - query rewrite》](../201907/20190713_01.md)  
37、并行vacuum, 并行checkpoint, 并行wal write (解决essd云盘先天缺陷, 单线程打不满IO的问题)  
38、主从半同步模式, 可配置自动降级  
39、standby 支持多上游节点, 主从切换不影响只读实例. (开源版本有一部分概率上游节点发生HA切换后可能需要重新搭建只读库)  
40、增强自定义视图、函数安全, 解决自定义函数安全陷阱问题. 当高权限账号不小心调用了攻击者编写的陷阱函数时, 间接帮助攻击者实现提权、越权、破坏等操作.  
41、密码遮掩, 在审计日志、视图、dblink、FDW外部表中隐藏密码. (社区版本为明文显示, 有安全风险)  
42、超过100纬度的向量索引, cube最多100纬度, 只支持float8. 建议增加float4类型或int2类型向量.  pase 向量索引, 相似特征推荐, 图像识别  
43、向量距离索引支持自定义距离算法, 方便各个行业和场景自定义算法使用  
44、审计日志管道优化, 高吞吐QPS提升1倍  
45、函数内支持commit,rollback  
46、on disk位图索引,  
https://github.com/digoal/blog/blob/master/202003/20200326_23.md  
47、基于非易失内存的改良存储引擎,  
https://github.com/digoal/blog/blob/master/202003/20200326_19.md  
48、支持pl/sql存储过程  
https://github.com/digoal/blog/blob/master/202003/20200326_17.md  
49、统计信息快照, 支持查询过去的统计信息, 回放sql查询过去的执行计划是否正确  
50、在线分区表转换, 在线分裂, 在线合并, 在线转换为分区表  
51、慢查询支持等待事件输出, 例如等了什么事件, 等了多久, 便于排查慢sql性能问题.  
52、pl/pgsql 代码覆盖测试  
https://github.com/funbringer/pg_linegazer  
53、fast open, recovery性能改进. 在recovery时立即打开, 当数据库恢复未达到一致时, 如果用户sql访问到不一致block时, 跳过或报错. 但是可以缩短不可用时间.  
54、索引失效功能, invalid index， 不影响执行计划， 但是继续保持索引的更新， 随时可以打开。 用于某些场景， 观测索引的影响。 关闭后一段时间没有使用就可以消掉。 实际上也可以通过索引的使用统计来区分是否要继续使用这个索引， 参照我写的dba常用sql.  
55、混合负载的支持， 增加慢查询队列，确保短查询有足够资源。 自动化，可配置， 例如一个请求超过1s后自动进入慢查询队列， 排队处理。 腾出socket给高并发小请求使用。   
### 3 其他来自网友的诉求:   
https://github.com/digoal/blog/issues/76  
行业: 传统  
功能期望: 登录失败超过限制之后，就锁定用户  
解决什么问题: 提高安全性, 防止暴力破解, 兼容oracle  
期望功能分级: 选项 [有就一定用、没有就不用、其他]  
替代方案: auth_delay  
开发提示: login hook  
行业: 通用  
功能期望: PG大版本迁移, 业务兼容性评估, 包括元数据、SQL等  
解决什么问题: 希望使用大版本的功能或提升性能, 兼容性评估, 用于业务改造和迁移决策  
期望功能分级: 选项 [有就一定用、没有就不用、其他]  
替代方案: 人肉查看release notes migration建议部分  
开发提示: 类似adam, 采集元数据, 采集应用请求(sql请求), 在目标版本库中回放, 判断是否兼容.  
列式存储  
吸纳Yogabyte 的分布式设计+RocksDB存储层  
JSON/JSONB的列式存储  
JSONB语法简化，支持数字类型引用  
吸纳PipelineDB的流视图  
行业: 互联网  
功能期望: WAL 日志能够完美解析；pg_basebackup能够多线程备份  
WAL解析的功能确实有必要, 例如可以在任何时候解析出最近1天的wal的sql. 可以考虑加一个GUC参数, 保证最后N分钟内的catalog版本, 可以解析最后N分钟内产生的WAL内容, 而不需要开一个logical decode一直在那解析.  
解决什么问题: MySQL binlog能够解析出具体的语句，能够更加准确的帮助恢复数据，希望PG能够引入该功能；对于大数据量的备份，pg_basebackup 单线程就显得很无力。耗时很久  
期望功能分级: 有就一定用  
行业: 通用  
功能期望: 通过WAL 日志修复坏块.  
解决什么问题: 当出现数据坏块时, 目前需要通过PITR全量恢复, 耗时, 耗资源.  
期望功能分级: 有就一定用  