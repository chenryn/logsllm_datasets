#define ShareLock                       5    /* CREATE INDEX (WITHOUT CONCURRENTLY) */  
#define ShareRowExclusiveLock           6    /* CREATE TRIGGER and many forms of ALTER TABLE, like EXCLUSIVE MODE, but allows ROW SHARE */  
#define ExclusiveLock                   7    /* REFRESH MATERIALIZED VIEW CONCURRENTLY, blocks ROW SHARE/SELECT...FOR UPDATE */  
#define AccessExclusiveLock             8    /* many ALTER TABLE, DROP TABLE, TRUNCATE, REINDEX, CLUSTER,   
                                              * VACUUM FULL, and REFRESH MATERIALIZED VIEW (without CONCURRENTLY)  
                                              * and unqualified LOCK TABLE */  
```  
alter table 不同的操作，请求的锁也不一样，详见  
https://www.postgresql.org/docs/9.6/static/sql-altertable.html  
表级锁冲突列表  
Requested Lock Mode|    ACCESS SHARE|   ROW SHARE|      ROW EXCLUSIVE|  SHARE UPDATE EXCLUSIVE| SHARE|  SHARE ROW EXCLUSIVE|    EXCLUSIVE|      ACCESS EXCLUSIVE  
---|---|---|---|---|---|---|---|---  
ACCESS SHARE|   -|-|-|-|-|-|-|  X  
ROW SHARE        |      -|-|-|-|-|-|                                            X|      X  
ROW EXCLUSIVE    |      -|-|-|-|                                X|      X|      X|      X  
SHARE UPDATE EXCLUSIVE| -|-|-|                          X|      X|      X|      X|      X  
SHARE|  -|-|                                            X|      X|-|    X|      X|      X  
SHARE ROW EXCLUSIVE|    -|-|                     X|     X|      X|      X|      X|      X  
EXCLUSIVE|      -|                      X|      X|      X|      X|      X|      X|      X  
ACCESS EXCLUSIVE|               X|      X|      X|      X|      X|      X|      X|      X  
3\. 行级锁  
src/include/access/heapam.h  
```  
/*  
 * Possible lock modes for a tuple.  
 */  
typedef enum LockTupleMode  
{  
        /* SELECT FOR KEY SHARE */  
        LockTupleKeyShare,  
        /* SELECT FOR SHARE */  
        LockTupleShare,  
        /* SELECT FOR NO KEY UPDATE, and UPDATEs that don't modify key columns */  
        LockTupleNoKeyExclusive,  
        /* SELECT FOR UPDATE, UPDATEs that modify key columns, and DELETE */  
        LockTupleExclusive  
} LockTupleMode;  
```  
行级锁冲突列表  
Requested Lock Mode| FOR KEY SHARE|     FOR SHARE|      FOR NO KEY UPDATE|      FOR UPDATE  
---|---|---|---|---  
FOR KEY SHARE|-|-|-|                            X  
FOR SHARE|-|-|                  X|      X|  
FOR NO KEY UPDATE|-|            X|      X|      X  
FOR UPDATE|     X|      X|      X|      X  
例子  
测试数据 :     
```    
digoal=# CREATE TABLE A (    
digoal(#         AID integer not null,    
digoal(#         Col1 integer,    
digoal(#         PRIMARY KEY (AID)    
digoal(#   );    
CREATE TABLE    
digoal=#     
digoal=#   CREATE TABLE B (    
digoal(#         BID integer not null,    
digoal(#         AID integer not null,    
digoal(#         Col2 integer,    
digoal(#         PRIMARY KEY (BID),    
digoal(#         FOREIGN KEY (AID) REFERENCES A(AID)    
digoal(#   );    
CREATE TABLE    
digoal=# INSERT INTO A (AID) VALUES (1),(2);    
INSERT 0 2    
digoal=#   INSERT INTO B (BID,AID) VALUES (2,1);    
INSERT 0 1    
digoal=# create extension pgrowlocks;  -- 观察行锁的插件  
CREATE EXTENSION    
```    
场景1 :    
SESSION A :     
```    
digoal=# begin;    
BEGIN    
digoal=# insert into b (aid,bid) values (1,1);    
INSERT 0 1    
```    
SESSION B :     
```    
digoal=# select * from pgrowlocks('a');    
 locked_row | locker | multi |  xids  |       modes       |  pids       
------------+--------+-------+--------+-------------------+---------    
 (0,1)      |   1706 | f     | {1706} | {"For Key Share"} | {18172}    
(1 row)    
-- 注意锁模式是"For Key Share", 锁的是a表的aid=1的记录    
digoal=# select * from pgrowlocks('b');    
 locked_row | locker | multi | xids | modes | pids     
------------+--------+-------+------+-------+------    
(0 rows)    
digoal=# select * from a where ctid='(0,1)';    
 aid | col1     
-----+------    
   1 |         
(1 row)    
digoal=# update a set col1=22 where aid=1;    
UPDATE 1    
-- 更新A表的非键值无需等待    
```    
场景2 :     
SESSION A :     
```    
digoal=# begin;    
BEGIN    
digoal=# update b set aid=2 where aid<>2;    
UPDATE 2    
SESSION B :     
digoal=# select * from pgrowlocks('a');    
 locked_row | locker | multi |  xids  |       modes       |  pids       
------------+--------+-------+--------+-------------------+---------    
 (0,2)    |   1708 | f     | {1708} | {"For Key Share"} | {18172}    
(1 row)    
-- 注意锁模式是"For Key Share" , 锁的是a表的aid=2的记录     
digoal=# select * from a where ctid='(0,2)';    
 aid | col1     
-----+------    
   2 |         
(1 row)    
digoal=# update a set col1=22 where aid=2;    
UPDATE 1    
-- 更新A表的非键值无需等待    
```    
会话B更新A表的时候, 是什么锁？    
场景3 :     
SESSION A :     
```    
digoal=# begin;    
BEGIN    
digoal=# update b set aid=2 where aid<>2;    
UPDATE 2    
```    
SESSION B :     
```    
digoal=# begin;    
BEGIN    
digoal=# update a set col1=22 where aid=1;    
UPDATE 1    
digoal=# update a set col1=22 where aid=2;    
UPDATE 1    
```    
SESSION C :     
```    
-- 一定要在第三个会话才能看到这些锁的状态.    
-- 因为MVCC, 本地会话看到的是已经更新后的TUPLE, 新的tuple头上的infomask的信息.    
-- 要看旧版本的infomask, 必须在其他会话查看.     
digoal=# select * from pgrowlocks('a');    
 locked_row | locker | multi |    xids     |             modes             |     pids          
------------+--------+-------+-------------+-------------------------------+---------------    
 (0,3)      |   1710 | f     | {1710}      | {Update}                      | {18332}    
 (0,4)      |      3 | t     | {1708,1710} | {"Key Share","No Key Update"} | {18172,18332}    
(2 rows)    
-- 注意会话B获取了1个No Key Update锁, 就是digoal=# update a set col1=22 where aid=2;这条产生的.    
因为更新的不是键值相关的.    
digoal=# select * from pgrowlocks('b');    
 locked_row | locker | multi |  xids  |  modes   |  pids       
------------+--------+-------+--------+----------+---------    
 (0,1)      |   1708 | f     | {1708} | {Update} | {18172}    
 (0,2)      |   1708 | f     | {1708} | {Update} | {18172}    
(2 rows)    
```    
4\. 用户锁  
用户轻量锁，锁ID值，支持事务级或者会话级持锁粒度，支持touch锁操作（touch不到锁，则返回false）。  
常用于长时间持锁的场景，或者用于秒杀场景。  
```  
SELECT pg_advisory_lock(id) FROM foo WHERE id = 12345; -- ok  
SELECT pg_advisory_lock(id) FROM foo WHERE id > 12345 LIMIT 100; -- danger!  
SELECT pg_advisory_lock(q.id) FROM  
(  
  SELECT id FROM foo WHERE id > 12345 LIMIT 100  
) q; -- ok  
```  
秒杀例子  
```  
create table test(id int primary key, crt_time timestamp);  
insert into test values (1);  
```  
```  
vi test.sql  
update test set crt_time=now() where id=1 and pg_try_advisory_xact_lock(1);  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -T 100  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 64  
number of threads: 64  
duration: 100 s  
number of transactions actually processed: 39104368  
latency average = 0.163 ms  
latency stddev = 0.216 ms  
tps = 391012.743072 (including connections establishing)  
tps = 391175.983419 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.163  update test set crt_time=now() where id=1 and pg_try_advisory_xact_lock(1);  
```  
5\. 死锁  
当发生会话之间相互等待时，出现死锁  
例子  
会话 1   
```  
postgres=# create table d_lock(id int, info text);  
CREATE TABLE  
postgres=# insert into d_lock values (1,'test');  
INSERT 0 1  
postgres=# insert into d_lock values (2,'test');  
INSERT 0 1  
postgres=# begin;  
BEGIN  
postgres=# update d_lock set info='a' where id=1;  
UPDATE 1  
```  
会话 2   
```  
postgres=# begin;  
BEGIN  
postgres=# update d_lock set info='b' where id=2;  
UPDATE 1  
postgres=# update d_lock set info='b' where id=1;  
等待  
```  
会话 1   
```  
postgres=# update d_lock set info='a' where id=2;  -- 等待，检测到死锁，自动回滚  
ERROR:  deadlock detected  
DETAIL:  Process 13602 waits for ShareLock on transaction 96548629; blocked by process 18060.  
Process 18060 waits for ShareLock on transaction 96548628; blocked by process 13602.  
HINT:  See server log for query details.  
CONTEXT:  while updating tuple (0,2) in relation "d_lock"  
```  
会话 2   
```  