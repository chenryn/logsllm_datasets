```
$ curl -H "Content-Type: application/json" "https://www.virustotal.com/vtapi/v2/file/report?apikey=$VIRUS_FEEDS_API_KEY&resource=e86db6abf96f5851ee476eeb8c847cd73aebd0bd903827a 362c07389d71bc728" | jq .
```
`$VIRUS_FEEDS_API_KEY`是您访问病毒总应用编程接口服务的应用编程接口密钥，然后提供以下报告:
```
{
  "scans": {
    "Fortinet": {
      "detected": true,
      "version": "6.2.142.0",
      "result": "Riskware/CoinMiner",
      "update": "20200413"
    },
    ...
    "Antiy-AVL": {
      "detected": true,
      "version": "3.0.0.1",
      "result": "RiskWare[RiskTool]/Linux.BitCoinMiner.a",
      "update": "20200413"
    },
  },
  ...
  "resource": "e86db6abf96f5851ee476eeb8c847cd73aebd0bd903827a362c07389d71bc 728",
  "scan_date": "2020-04-13 18:22:56",
  "total": 60,
  "positives": 25,
  "sha256": "e86db6abf96f5851ee476eeb8c847cd73aebd0bd903827a362c07389d71bc 728",
 }
```
病毒总量报告显示`/tmp/minerd2`已被 25 个不同的来源报告为恶意软件，如富通网和安蒂 AVL。通过在您的配置项/光盘管道中集成映像扫描工具和恶意软件馈送服务，您可以在开发生命周期的早期阶段帮助检测恶意软件。然而，这种单一方法的缺点是，如果将挖掘二进制文件从命令和控制服务器下载到一个运行的 pod 中，您将错过加密挖掘攻击。另一个限制是，如果提要服务器没有任何关于加密二进制文件的信息，您肯定会错过它。
我们已经讨论了检测加密挖掘攻击的四种不同方法。这些方法各有其优点和局限性；将这些方法中的一些一起应用以提高它们的检测能力和检测效率将是理想的。
接下来，让我们回顾一下我们在本书中讨论的内容，并综合使用这些知识来预防一般的 nt 攻击。
# 防御攻击
在前一节中，我们讨论了检测加密挖掘活动的几种方法。在本节中，我们将讨论通过保护 Kubernetes 集群来防御一般攻击。因此，这不仅仅是针对特定攻击的防御，而是针对各种攻击的防御。四个主要的防御领域是 Kubernetes 集群供应、构建、部署和运行时。首先，让我们谈谈保护 kubernet 的群集资源调配。
## 保护 Kubernetes 群集资源调配
有多种方法来供应 Kubernetes 集群，如`kops`和`kubeadm`。无论您使用哪种工具来配置集群，都需要安全地配置每个 Kubernetes 组件。使用`kube-bench`对您的 Kubernetes 集群进行基准测试，并改进安全配置。确保 RBAC 已启用，`--anonymous-auth`标志已禁用，网络连接已加密，等等。以下是我们在 [*第 6 章*](06.html#_idTextAnchor170)*保护集群组件*和 [*第 7 章*](07.html#_idTextAnchor186)*身份验证、授权和准入控制*中介绍的关键领域:
*   为 Kubernetes 控制平面、`kubelet`等正确配置身份验证和授权
*   保护 Kubernetes 组件之间的通信，例如`kube-apiserver`、`kubelet`、`kube-apiserver`和`etcd`之间的通信
*   为`etcd`启用静态数据加密
*   确保您不启动不必要的组件，如仪表板
*   确保启用所有必要的准入控制器，同时禁用不推荐使用的准入控制器
有了安全配置的 Kubernetes 集群，黑客很难轻易入侵您的 Kubernetes 集群，就像特斯拉的集群一样(仪表板不需要身份验证)。接下来，让我们讨论一下如何保护构建。
## 保护建筑
保护 Kubernetes 集群还包括保护微服务。保护微服务必须从 CI/CD 管道的开始开始。以下是一些关键的对策，如第 8 章[](08.html#_idTextAnchor249)**保护 KubernetesPod *和 [*第 9 章*](09.html#_idTextAnchor277)*在 DevOps 管道*中进行映像扫描以保护构建阶段的微服务中所讨论的:*
 **   为您的微服务适当地解决由映像扫描工具发现的漏洞，以便通过利用应用漏洞成功入侵的可能性很小。
*   基准 Dockerfiles 以改进映像的安全配置。确保映像中没有存储敏感数据，所有相关包都已更新，等等。
*   扫描映像中的可执行文件，确保映像中没有恶意软件。
*   为工作负载正确配置 Kubernetes 安全上下文。遵循最小权限原则，限制对系统资源的访问，如使用主机级命名空间、主机路径等，并删除不必要的 Linux 功能，只授予所需的功能。
*   不要启用自动装载服务帐户。如果工作负载不需要服务帐户，请不要为其创建服务帐户。
*   遵循最小权限原则，尝试了解您的工作负载正在执行的任务，并且只向服务帐户授予所需的权限。
*   遵循最小权限原则，尝试估计工作负载的资源使用情况，并对工作负载应用适当的资源请求和限制。
当然，保护构建也可以扩展到保护整个 CI/CD 管道，比如源代码管理和 CI/CD 组件。然而，这超出了本书的范围。我们将只建议我们认为与保护您的 Kubernetes 集群最相关的选项。接下来，让我们谈谈的安全部署。
## 确保部署安全
我们已经在 [*第 7 章*](07.html#_idTextAnchor186)*认证、授权和准入控制*和 [*第 8 章*](08.html#_idTextAnchor249)*中讨论了 Kubernetes 集群中不同类型的准入控制器，以及在 DevOps 管道*中使用映像扫描准入控制器( [*第 9 章*](09.html#_idTextAnchor277) 、*映像扫描的需要使用准入控制器和其他内置机制可以为您的工作负载提供强大的安全保障。以下是一些关键的应对措施:*
*   为命名空间和工作负载应用网络策略。这可能是为了限制对工作负载的访问(入站网络策略)，也可能是为了实施最低权限原则(出站网络策略)。当给定一个工作负载时，如果您知道出站连接的目标 IP 块，您应该为该工作负载创建一个网络策略来限制其出站连接。出站网络策略应该阻止任何目的地超出白名单 IP 块的流量，例如从命令和控制服务器下载加密挖掘二进制文件。
*   使用**开放策略代理** ( **OPA** )确保仅允许可信映像注册表中的映像在集群中运行。使用此策略，OPA 应该阻止来自不可信来源的任何映像运行。例如，包含加密挖掘二进制文件的恶意映像可能驻留在 Docker Hub 中，因此您不应该将 Docker Hub 视为受信任的映像注册表。
*   使用映像扫描准入控制器确保只有符合扫描策略的映像才允许在集群中运行。我们已经在 [*第 9 章*](09.html#_idTextAnchor277)*映像扫描中在 DevOps Pipelines* 中谈到了这一点。部署工作负载时，可能会发现新的漏洞，并且会更新漏洞数据库。部署前需要扫描。
*   使用 OPA 或 pod 安全策略来确保工作负载具有有限的 Linux 功能，并限制对主机级命名空间、主机路径等的访问。
*   理想的情况是在工作节点上启用 apparemor，并且为部署的每个映像应用 apparemor 配置文件。虽然实际的保护发生在运行时，但是限制 AppArmor 配置文件是在工作负载部署时完成的。一个很好的用例是，当您知道容器内正在运行的进程时，构建一个 apparemor 配置文件来将允许的进程列入白名单，以便其他进程，如加密挖掘进程，将被 apparemor 阻止。
一定要利用准入控制器的功能，为您的工作负载部署构建一个看门人。接下来，让我们谈谈在运行时保护工作负载。
## 保护运行时间
最有可能的是，你的 Kubernetes 集群是对抗黑客的前沿战场。虽然我们讨论了不同的策略来确保构建和部署，但所有这些策略最终都旨在减少 Kubernetes 集群中的攻击面。你不能简单地闭上眼睛，就认为在你的 Kubernetes 集群中一切都会好起来。这就是为什么我们在 [*第 10 章*](10.html#_idTextAnchor305)*中讨论了资源监控，在*中讨论了 Kubernetes 集群的实时监控和资源管理，在 [*中讨论了审计、机密管理、检测和取证，在*](11.html#_idTextAnchor324) 中讨论了*深度防御*。概括一下这两章中的内容，以下是保护运行时的关键对策:
*   部署适当的监控工具，如普罗米修斯和格拉夫纳，来监控您的 Kubernetes 集群中的资源使用情况。这对于确保服务的可用性至关重要，此外，加密挖掘等攻击可能会触发 CPU 使用率激增。
*   启用 Kubernetes 的审核策略来记录 Kubernetes 事件和活动。
*   确保您的基础架构、Kubernetes 组件和工作负载的高可用性。
*   使用合适的机密管理工具(如 Vault)来管理和提供微服务的机密。
*   部署像样的检测工具，如 Falco，以检测 Kubernetes 集群中的可疑活动。
*   最好有取证工具来收集和分析可疑事件。
您可能会注意到，没有提到保护微服务之间的通信。服务网格是一个热门话题，有助于确保微服务之间以及微服务之外的通信安全。但是，本书没有涉及服务网格，原因有二:
*   服务网格给工作负载和 Kubernetes 集群带来了性能开销，因此它们还不是服务间安全通信的完美解决方案。
*   从应用安全的角度来看，使用 CA 签名的证书在端口`443`上强制执行服务侦听很容易，因此通信是加密的。如果微服务也执行身份验证和授权，那么只有受信任的微服务才能访问授权的资源。服务网格不是服务之间安全通信的不可替代的解决方案。
为了抵御对 Kubernetes 集群的攻击，我们需要端到端地保护 Kubernetes 集群的配置、构建、部署和运行时。它们都应该被认为是同等重要的，因为你的防守强度是由你最薄弱的环节决定的。
# 总结
在这一章中，我们讲述了过去两年中发生的几起加密挖掘攻击，这些攻击将人们的注意力引向了保护容器化环境的需要。然后，我们向您展示了如何使用不同的开源工具检测加密挖掘攻击。最后但并非最不重要的一点，我们讨论了如何通过概括我们在前几章中讨论的内容来保护您的 Kubernetes 集群免受攻击。
我们希望您理解保护 Kubernetes 集群的核心概念，这意味着保护集群配置、构建、部署和运行时阶段。开始使用安戈、普罗米修斯、格拉夫纳和法尔科时，你也应该感到舒适。
正如我们所知，Kubernetes 仍在发展，它并不完美。在下一章中，我们将讨论一些已知的 Kubernetes **常见漏洞和暴露** ( **CVEs** )以及一些可以保护集群免受未知变化影响的缓解措施。下一章的目的是让你准备好应对未来发现的任何 Kubernetes 的简历。
# 问题
*   在特斯拉的 Kubernetes 集群中，使密码挖掘攻击成为可能的缺陷是什么？
*   如果你是特斯拉的 DevOps，你会怎么做来阻止密码挖掘攻击？
*   当您看到容器中的 CPU 使用率激增时，您能断定发生了加密挖掘攻击吗？
*   你能想到一个绕过`Detect crypto miners using the Stratum protocol`法尔科规则的密码挖掘过程吗？
*   为了保护 Kubernetes 集群，您需要保护哪四个区域？
# 进一步阅读
有关本章所涵盖主题的更多信息，请参考以下链接:
*   特斯拉密码挖掘攻击:[https://redlock.io/blog/cryptojacking-tesla](https://redlock.io/blog/cryptojacking-tesla)
*   密码蠕虫攻击:[https://unit 42 . paloaltonetwoks . com/graboid-有史以来第一次密码劫持-蠕虫-在 docker-hub 上的映像中找到/](https://unit42.paloaltonetworks.com/graboid-first-ever-cryptojacking-worm-found-in-images-on-docker-hub/)
*   普罗米修斯:https://prometheus.io/docs/introduction/overview/
*   猎鹰: [https://falco.org/docs/](https://falco.org/docs/)
*   病毒总污染指数:[https://developers.virustotal.com/v3.0/reference](https://developers.virustotal.com/v3.0/reference)
*   密码挖掘攻击分析:[https://kromtech . com/blog/security-center/crypto jacking-intruss-cloud-how-modern-containing-trend-被攻击者利用](https://kromtech.com/blog/security-center/cryptojacking-invades-cloud-how-modern-containerization-trend-is-exploited-by-attackers)
*   哈勃:[https://github.com/cilium/hubble](https://github.com/cilium/hubble)**