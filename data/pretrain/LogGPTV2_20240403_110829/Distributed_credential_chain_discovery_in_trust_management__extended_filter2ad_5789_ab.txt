also has the attribute A.r.
A role expression is an entity, a role, a linked role, or an
intersection. We use e, e1, e2, etc, to denote role expressions.
By contrast, we use f1, . . . , fk to denote the intersection-free
expressions occurring in intersections. All credentials in RT0
take the form, A.r←− e, where e is a role expression. Such
a credential means that members(A.r) ⊇ members(e), as we
formalize in section 2.2 below. We say that this credential
deﬁnes the role A.r. (This choice of terminology is moti-
vated by analogy to name deﬁnitions in SDSI, as well as
to predicate deﬁnitions in logic programming.) We call A
the issuer, e the right-hand side, and each entity in base(e) a
subject of this credential, where base(e) is deﬁned as follows:
base(A) = {A}, base(A.r) = {A}, base(A.r1.r2) = {A},
base(f1 ∩ ··· ∩ fk) = base(f1) ∪ ··· ∪ base(fk).
Example 3. Combining examples 1 and 2, EPub oﬀers
a special discount to anyone who is both a preferred cus-
tomer of EOrg and a student. To identify legitimate uni-
versities, EPub accepts accrediting credentials issued by the
ﬁctitious Accrediting Board for Universities (ABU). The fol-
lowing credentials prove Alice is eligible for the special dis-
count:
EPub.spdiscount←− EOrg.preferred ∩ EPub.student,
EOrg.preferred←− ACM.member,
ACM.member←− Alice,
EPub.student←− EPub.university.stuID,
EPub.university←− ABU.accredited,
ABU.accredited←− StateU,
StateU.stuID←− Alice
Readers familiar with Simple Distributed Security Infras-
tructure (SDSI) [8, 10] may notice the similarity between
RT0 and SDSI’s name certiﬁcates.
Indeed, our design is
heavily inﬂuenced by existing trust-management systems,
especially SDSI and Delegation Logic (DL) [15]. RT0 can be
viewed as an extension to SDSI 2.0 or a syntactically sugared
version of a subset of DL. The arrows in RT0 credentials are
the reverse direction of those in SPKI/SDSI. We choose to
use this direction to be consistent with an underlying logic
programming reading of credentials and with directed edges
in credential graphs, introduced below in section 3. In addi-
tion, RT0 diﬀers from SDSI 2.0 in the following two aspects.
First, SDSI allows arbitrarily long linked names, while
we allow only length-2 linked roles. There are a couple of
reasons for this design. We are not losing any expressive
power; one can always break up a long chain by introducing
additional roles and credentials. Moreover, it often makes
sense to break long chains up, as doing so creates more
If A wants to use B.r1.r2.··· .rk in its
modular policies.
credential, then B.r1.r2.··· .rk−1 must mean something to
A; otherwise, why would A delegate power to members of
B.r1.r2.··· .rk−1? Having to create a new role makes A
think about what B.r1.r2.··· .rk−1 means. Finally, restrict-
ing lengths of linked roles simpliﬁes the design of algorithms
for chain discovery.
Second, SDSI doesn’t have RT0’s type-4 credentials, and
so RT0 is more expressive than the current version of SDSI
Intersections and threshold structures (e.g., those in
2.0.
[10]) can be used to implement one another. Threshold
structures may appear in name certiﬁcates according to [10]
and earlier versions of [11]. This is disallowed in [8] and the
most up-to-date version of [11], because threshold structures
are viewed as too complex [8]. Intersections provide similar
functionality with simple and clear semantics.
2.2 The Semantics of RT0
This section presents a non-operational semantics of RT0.
Given a set C of RT0 credentials, we deﬁne a map SC :
Roles → ℘(Entities), where ℘(Entities) is the power set of
Entities. SC is given by the least solution to a system of
set inequalities that is parameterized by a ﬁnite, set-valued
function, rmem : Roles → ℘(Entities). That is, the semantics
is the least such function that satisﬁes the system, where
the ordering is pointwise subset. We use a least ﬁxpoint so
as to resolve circular role dependencies. To help construct
the system of inequalities, we extend rmem to arbitrary role
expressions (whose domain we denote by RoleExpressions)
through the use of an auxiliary semantic function, exprrmem :
RoleExpressions → ℘(Entities) deﬁned as follows:
exprrmem(B) = {B}
exprrmem(A.r) = rmem(A.r)
(cid:9)
exprrmem(A.r1.r2) =
exprrmem(f1 ∩ ··· ∩ fk) =
rmem(B.r2)
B∈rmem(A.r1)
(cid:10)
exprrmem(fj)
1≤j≤k
We now deﬁne SC to be the least value of rmem satisfying
the following system of inequalities:
(cid:11)
exprrmem(e) ⊆ rmem(A.r)
(cid:12)(cid:12) A.r←− e ∈ C (cid:13)
.
A.r←−e ∈ C
As with rmem, we use expr to extend SC to role expressions,
writing exprSC (e) for the members of role expression e.
The least solution to such a system can be constructed
as the limit of a sequence {rmemi}i∈N , where N is the set
of natural numbers, and where for each i, rmemi : Roles →
℘(Entities). The sequence is deﬁned inductively by taking
rmem0(A.r) = ∅ for each role A.r and by deﬁning rmemi+1
so that for each role A.r,
rmemi+1(A.r) =
exprrmemi (e).
(cid:9)
The function that relates the values of {rmemi}i∈N is mono-
tonic, because the operators used to construct it (∩ and ∪)
are monotonic. Furthermore, Roles → ℘(Entities) is a com-
plete lattice. So this sequence is known to converge to the
function’s least ﬁxpoint, which is clearly also the least solu-
tion to the inequalities. (As the lattice is ﬁnite, convergence
takes place ﬁnitely.) Thus, the least solution exists and is
easily constructed. For instance, referring to example 3 and
showing only changes in the function’s value, successive val-
ues of rmemi have: for i = 1, ABU.accredited = {StateU},
StateU.stuID = {Alice}, ACM.member = {Alice}; for i = 2,
EPub.university = {StateU}, EOrg.preferred = {Alice}; for
i = 3, EPub.student = {Alice}; for i = 4, EPub.spdiscount =
{Alice}, where they stabilize.
158of queries are:
3. CENTRALIZED CHAIN DISCOVERY
Given a set of credentials C in RT0, three important kinds
1. Given a role A.r, determine its member set, SC(A.r);
2. Given an entity D, determine all the roles it belongs
to, i.e., all role A.r’s such that D ∈ SC(A.r);
D ∈ SC(A.r).
3. Given a role A.r and an entity D, determine whether
In this section, we study credential chain discovery for
RT0 when credentials are centralized. We give goal-oriented
algorithms for answering the above three kinds of queries.
3.1 Algorithm Requirements
Chain discovery in RT0 shares two key problem charac-
teristics with discovery in SDSI: linked names give creden-
tial chains a non-linear structure and role deﬁnitions can be
cyclic. Cyclic dependencies must be managed to avoid non-
termination. Clarke et al. [8] have given an algorithm for
chain discovery in SPKI/SDSI 2.0. Their algorithm views
each certiﬁcate as a rewriting rule and views discovery as a
term-rewriting problem. It manages cyclic dependency by
using a bottom-up approach—it performs a closure opera-
tion over the set of all credentials before it ﬁnds one chain.
This may be suitable when large numbers of queries are
made about a slowly changing credential pool of modest
size. However, as the frequency of changes to the credential
pool (particularly deletions, such as credential expirations or
revocations) approaches the frequency of queries against the
pool, the eﬃciency of the bottom-up approach deteriorates
rapidly, particularly when pool size is large.
Li [14] gave a 4-rule logic program to calculate mean-
ings of SDSI credentials. Cyclic dependencies are managed
by using XSB [17] to evaluate the program. XSB’s exten-
sion table mechanism avoids non-termination problems to
which other Prolog engines succumb. Yet, for many trust-
management applications, this solution is excessively heavy-
weight. Moreover, in its current form, the resulting evalua-
tion mechanism cannot be used to drive credential collection.
As discussed in section 1, because we seek techniques
that work well when the credential pool is distributed or
changes frequently, we require chain discovery algorithms
that are goal-directed and that can drive the collection pro-
cess. They also must support interleaving credential collec-
tion and chain construction (i.e., evaluation) steps.
We meet these requirements by providing graph-based
evaluation algorithms. Credentials are represented by edges.
Chain discovery is performed by starting at the node rep-
resenting the requester, or the node representing the role
(permission) to be proven, or both, and then traversing
paths in the graph trying to build an appropriate chain.
In addition to being goal-directed, this approach allows the
elaboration of the graph to be scheduled ﬂexibly. Also, the
graphical representation of the evaluation state makes it rel-
atively straightforward to manage cyclic dependencies. To
our knowledge, our algorithms are the ﬁrst to use a graphical
representation to handle linked roles.
3.2 A Graph Representation of Credentials
We deﬁne a directed graph, which we call a credential
graph, to represent a set of credentials and their meanings.
Each node in the graph represents a role expression occur-
ring in a credential in C. Every credential A.r ←− e ∈ C
contributes an edge e→ A.r.1 (This holds for credentials of
all types.) The destinations of these edges are roles. Edges
are also added whose destinations are linked roles and inter-
sections. We call these derived edges because their inclusion
come from the existence of other, semantically related, paths
in the graph.
(Credential Graph). For a set of cre-
dentials C, the corresponding credential graph is given by
GC = (cid:19)NC, EC(cid:20) where NC and EC are deﬁned as follows.
Definition 1
(cid:9)
{A.r, e}.
NC =
A.r←−e ∈ C
EC is the least set of edges over NC that satisﬁes the follow-
ing three closure properties:
Closure Property 1: If A.r←− e ∈ C, then e→ A.r ∈ EC.
Closure Property 2: If B.r2, A.r1.r2 ∈ NC and there is a
∗→ A.r1 in EC, then B.r2 → A.r1.r2 ∈ EC; we
∗→ A.r1.
Closure Property 3: If D, f1∩···∩ fk ∈ NC and for each
∗→ fj, then D→ f1 ∩ ··· ∩
j ∈ [1..k] there is a path D
fk ∈ EC; we say that this edge is derived from the paths
D
path B
say that this edge is derived from the path B
∗→ fj, for j ∈ [1..k].
This deﬁnition can be made eﬀective by inductively con-
structing a sequence of edge sets {EC i}i∈N whose limit is
EC. We take EC 0 = {e → A.r | A.r ←− e ∈ C} and con-
struct EC i+1 from EC i by adding one edge according to ei-
ther closure property 2 or 3. Since C is ﬁnite, we do not
have to worry about scheduling these additions. At some
ﬁnite stage, no more edges will be added, and the sequence
converges to EC.
Theorem 1
(Soundness). Given an entity D and a
∗→ e in EC, then
role expression e, if there is a path D
D ∈ exprSC (e).
Proof. The proof is by induction on the steps of the con-
struction of {EC i}i∈N shown above. We prove an induction
hypothesis that is slightly stronger than the theorem: For
each i ∈ N and for any role expressions e1 and e, if there is
a path e1
∗→ e in EC i, then exprSC (e1) ⊆ exprSC (e).
∗→ e) = (e1
We show the base case by using a second, inner induction
∗→ e in EC 0. The inner base
on the length of the path e1
case, in which e1 = e, is trivial; we consider the step. Sup-
∗→ e2 → e). Because each edge in EC 0
pose (e1
corresponds to a credential, we have e ←− e2 ∈ C. It fol-
lows that exprSC (e2) ⊆ exprSC (e), by deﬁnition of SC. The
induction assumption gives us exprSC (e1) ⊆ exprSC (e2), so
exprSC (e1) ⊆ exprSC (e).
We prove the step by again using an inner induction on the
∗→ e, which we now assume is in EC i+1. Again
length of e1
∗→ e into
the basis is trivial. For the step, we decompose e1
∗→ e2 → e. There are three cases, depending on which
e1
closure property introduced the edge e2→ e.
case 1: When e2 → e is introduced by closure property 1,
the argument proceeds along the same lines as the base case,
∗→ e2 to derive
using the inner induction hypothesis on e1
exprSC (e1) ⊆ exprSC (e2).
lefthand arrows (←−) represent credentials,
1While long,
short, righthand arrows (→) represent edges, and short,
∗→) represent paths, which con-
righthand arrows with stars (
sist of zero or more edges.
159case 2: When e2→ e is introduced by closure property 2, e