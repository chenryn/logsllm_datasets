### Process Map and Dynamic Procedure Update

#### Figure 1: Process Map
```
read i i r i l r ~ w  
read  vnlee\ec 
Mapped File 
cih  - 
crh  - 
[heap1 - 
methods.k  so  I 
methods-Lo  SQ I 
llbi IO I 
llbcso I 
[anon 1 
L anM 1 
Lo sa I 
loro I 
Iibc.prrso  I 
libmapmallocro I 
libmapmallocro  I 
libdl so  I 
Id  so I 
Id io I __ 
[ s l a c i ]  - 
Fig 1 : Process map
```

#### Figure 2: Concept of Dynamic Procedure Update
Consider an environment where a process is executing an old version of an executable file (Figure 2). Suppose the software vendor changes the source code of a procedure ("Old Procedure" in the figure) to add a new feature and releases a new version of the executable file. A user wants to dynamically update the running software to incorporate this change.

Since the size of the procedure can increase or decrease, we can extract the new version of the procedure and map it into the unmapped area of the running process (the area between the heap and stack in Solaris, as shown in Figure 1). We then modify the old version of the procedure to jump to the new version's location when called (Figure 2). This ensures that when the old version procedure is called, the new version will be executed.

**Observations:**
1. The method is low-level and involves dealing with the internals of a running process.
2. It aims to dynamically incorporate changes in text and local data but is not applicable for changes in static data structures.
3. Updates are not permanent; if the process is stopped and restarted, dynamic updates are lost, and an off-line upgrade may be necessary. Additionally, after multiple dynamic updates, the memory image may become messy, necessitating an off-line upgrade.
4. The purpose of the method is to reduce the number of off-line upgrades.

#### Addressing Key Issues
To make the method work correctly, two important issues must be addressed:

1. **Symbol Address Mismatch:**
   - The sizes of the old and new procedures may differ, leading to different addresses for external symbols.
   - Even if global data structures do not change, the location of a global variable can change due to the altered text area size.
   - To resolve this, we must alter the external symbol references in the new version procedure to be compatible with the old version address space. This is discussed in Section 3.3.

2. **Correct Operation and Performance:**
   - A method for dynamic procedure update must ensure correct operation and minimal performance loss. This is discussed in the next subsection.

#### 3.2. Update Sequence
Dynamic software update must ensure correct operation and minimal performance loss. The sequence consists of four steps (Figure 3):

1. **Extract New Version Procedure:**
   - Extract information about the locations and sizes of the old and new version procedures from the symbol tables of the old and new executable files.
   - Extract the new version procedure into a separate file, called the new version procedure file.

2. **Map New Version Procedure:**
   - Map the new version procedure file into the unmapped area of the old version process address space using the `mmap` system call.
   - Use the signal mechanism to perform the mapping. Set a signal in the target program and define a signal handler routine to perform the actual mapping.
   - An external control process sends a signal to the target process to initiate the mapping. The signal handler returns the mapped location back to the control process.

3. **Correct External Symbol References:**
   - Identify and correct external symbol references in the new version procedure to be compatible with the old version address space.

4. **Change Old Version Procedure:**
   - Modify the old version procedure to jump to the new version's location.
   - Ensure the old version procedure is not activated during the update to avoid incorrect software execution.

#### 3.3. Handling Activated Procedures
- **Check Activation Status:**
  - Use the `pstack(1)` command to check the process's run-time stack.
  - If the target procedure is not activated, proceed to the next step. Otherwise, wait for a certain amount of time or keep monitoring until the procedure is deactivated.

- **Watched Area:**
  - Use the concept of a watched area to minimize performance loss. Set the target procedure area as a watched area using the watchpoint trap.
  - The process is trapped only when the code in the watched area is fetched, allowing us to stop the process only when the target procedure is about to be activated.

#### Setting a Watchpoint Trap
The watchpoint trap was originally developed for debugging. In Solaris, you can set a watchpoint trap using the "ctl" file of the process file system. Specifically, send a control message with the starting location and size of the code area to watch. Figure 7 shows a piece of pseudo code representing the steps for setting a watchpoint trap.

This approach efficiently reduces performance loss while ensuring correct operation during the update.

---

**Note:** This document is authorized for limited use by Tsinghua University and downloaded on March 19, 2021, at 04:05:53 UTC from IEEE Xplore. Restrictions apply.