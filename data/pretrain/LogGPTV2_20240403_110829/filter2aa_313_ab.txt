N
N
N
N
Y
13
N
Y
Y
Y
Y
Y
N
N
14
N
N
N
N
N
N
N
Y
15
N
N
N
N
N
N
N
Y
16
N
N
N
N
N
N
N
Y
17
N
N
N
N
N
N
N
Y
18
N
N
Y
Y
N
N
N
Y
19
N
Y
N
Y
Y
N
N
Y
20
N
N
N
N
Y
N
N
Y
21
N
N
N
N
N
N
N
Y
22
N
N
N
N
N
N
N
Y
23
Y
N
N
Y
Y
N
N
Y
HORNECYBER.COM
  PAGE 7
ANALYSIS
As a whole, it is straightforward to look at the chart and come to the conclusion that concerns about the security of 
penetration testing operations are not a well-covered part of most available learning resources. Out of 23 works studied, 
14 works did not address any of the basic issues put forward in the questions. Only four works addressed more than two. 
Almost every single work in the study describes practices that, if conducted across the public Internet or other hostile 
network, could result in the disclosure of client information, systems, or the penetration tester’s system to malicious 
third parties. By simple “yes”/”no” results, three works did not describe weak practices. The one color coded in green 
followed descriptions of potentially dangerous actions with a warning about performing those actions across unencrypted 
networks. Of the two that are color coded in yellow, one did not cover technical practices, only focusing on procedure. The 
other did not discuss insecure practices by virtue of being fraudulent: a self-published Kindle book that consisted only 
of material on terminology that appeared to be from various online sources, with no instruction whatsoever on technical 
or operational matters of penetration testing.
The most common insecure practice described was the usage of post-exploitation payloads (especially those built into 
Metasploit, since it is so popular) that allow for third-party monitoring and hijacking. The Metasploit project contributors 
are aware of (and have discussed publicly) the potential for these kinds of attacks, and have developed new functionality 
for the Meterpreter payload to secure its command-and-control [7]. With “paranoid mode” Meterpreter functionality only 
being added within the past year, it was not unexpected to see many works describe insecure practices for command-
and-control of client systems. It is, however, not impossible and would have been desirable to have seen discussion of 
the risks, along with guidance for conducting tests locally, over VPNs, or other secure tunnels. The demonstration in the 
companion talk to this paper demonstrates hijacking post-exploitation command-and-control.
Beyond what was expected, a number of books described practices that represent an even clearer danger to the security 
of communications and client systems than was expected. Anecdotally, the following notably insecure practices were 
described in the context of penetration testing:
• The use of online hash cracking services
• The use of plaintext FTP services opened up on penetration testers’ systems for transferring payloads and the 
exﬁltration of client data
• Persistent netcat listeners running on client systems, backed by shells, without authentication, and left open for 
later access by penetration testers
• The use of unencrypted web shell backdoors to maintain access to target systems
• Plaintext command-and-control between penetration testers’ workstations and devices left behind in the target’s 
physical/network space
• The use of Tor and/or public proxy lists found through search engines to ﬁnd proxies through which attacks could be 
anonymized. 
• Enabling a Windows telnet daemon for continued access to a system
A single resource addressed all of the questions, and did not present any technically insecure practices without also 
having some description of the risks inherent to those practices. While for the overall purpose of this study, the titles and 
authors of the works are not disclosed, in this speciﬁc case it is worth pointing out that Professional Penetration Testing, 
Second Edition, by Thomas Wilhelm [12] is the work that managed to address each point (row 5 in the chart). While this 
is not a book review, and the work was not read thoroughly for its overall quality, it is commendable that there is at least 
some mention of the potential problems that penetration testers face with security.
CONDUCTING SECURE PROFESSIONAL PENETRATION TESTS
Practices can be adopted to minimize the risk that penetration testers face with regards to the security of their own 
operations, as well as the operations, communications, and data security of their clients. The following recommendations 
relate to the questions posed in this paper’s study and are described such that, with an expected degree of effort, they 
can be integrated into the workﬂow of a professional penetration testing ﬁrm.
CLIENT COMMUNICATIONS SECURITY IN SCOPING, PROGRESS UPDATES, EMERGENCY, AND DELIVERY
Initial meetings to discuss and scope upcoming penetration tests should establish secure means by which clients and 
testers can communicate. If both parties already have the capability, end-to-end encrypted email would be recommended. 
If the capability does not already exist with the client, a secure HTTPS ﬁle sharing solution hosted by the penetration 
tester could be used by both parties to transfer sensitive network information for scoping, as well as reports later on. For 
emergency contact, mechanisms that are out-of-band from the client network are necessary, such as a mobile phone, 
though when possible and as time and circumstances allow, sensitive data should be exchanged through more secure 
means.
OPEN SOURCE INTELLIGENCE GATHERING OPERATIONAL SECURITY
During open source intelligence gathering efforts, careful consideration should be given to the set of search terms 
being used, and where they are being submitted. While company names and other non-sensitive information can serve 
as appropriate search terms, testers should be careful as they branch out using information they’ve derived from a 
combination of sources. Note that search terms typically passed along to sites as part of the referral URLs provided by 
the web browser. Take measures to prevent the nature of your search from being apparent to the sites that you visit. If the 
identity of the penetration testing ﬁrm can be deduced from the IP address performing OSINT, information that ties that 
ﬁrm to a current engagement with a client can leak out, as well.
Carefully consider what actions are taken over TOR or other proxy systems. Do not search for or view information over such 
systems that you would not want the unknown operator of an exit node or proxy to also view. In most cases, it should be 
understood by the target organization that you will be conducting operations using your own resources, so it may not be 
necessary (or appropriate) for you to proxy activities over third party connections.
POTENTIAL THREATS, CLIENT DATA IN TRANSIT, AND INSECURE PRACTICES
All members of the penetration testing team need to be aware of the network environment in which they are operating. 
In tests that are conducted across the Internet, unencrypted wireless, or other transports that are not under penetration 
tester or client control, those networks must be assumed to have malicious threat actors participating in them. The 
penetration tester and the target do not exist in a vacuum.
HORNECYBER.COM
HORNECYBER.COM
  PAGE 9
When tests occur over these uncontrolled networks, care must be taken to ensure that when command-and-control is 
established, that it cannot be monitored or hijacked. If client data is the target for exﬁltration, that data must be transferred 
over a secure channel. If tools that are naturally insecure (as described in I Hunt Penetration Testers) are used, all attempts 
should be made to tunnel that tool over a more secure protocol.
This solution is not perfect, in that a third party might identify the initial vulnerability by which a tester compromised a 
system. In some cases, this may be unavoidable when the end goal is to identify all of the vulnerabilities an attacker might 
be able to exploit. It is recommended, however, that when circumstances allow, the test should be conducted from a position 
on the network that is as close as possible to the client being tested. Performing a test on-site is one option, though a 
similar result can be obtained by using an appliance designed to “phone home” securely back to the penetration testers, 
allowing them to conduct their test over a VPN connection to appropriate points just outside of (or within) the client network. 
PENETRATION TESTER HOST SECURITY
Penetration testers should be aware of the attack surface that their tools represent. Many penetration testing tools act 
as servers for agent software, exposing to a third party attacker an interface that they can interact with. Many tools are 
primarily developed as proof-of-concepts for vulnerabilities, and have not been designed with the goal of providing security, 
reliability, and resilience in operational use by penetration testers. Penetration testers should routinely examine their own 
systems, tools, and practices to determine what opportunities a third party would have to subvert them. 
CLIENT HOST SECURITY
Penetration testers should take great care in not creating more vulnerabilities in target systems than already exist. The 
necessity of persistence mechanisms should be determined as a balance between the need to maintain access to systems 
balanced against the stability of re-exploiting certain vulnerabilities. While memory corruption attacks have the potential 
to crash a system when exploited many times in succession, most web-based vulnerabilities are much more reliable. While 
it should be needless to say that access and persistence mechanisms should only be accessible by the penetration tester, 
and not third parties that happen to ﬁnd them, it is clear from this paper’s study that it does need to be stated. 
CLIENT DATA AT REST
After exﬁltration, data gathered from clients should be stored on penetration testers’ systems in a controlled way. In addition 
to the controls recommended for securing penetration testing workstations, devices that are outside the physical control 
of testers should not be used to store client information for any longer than is necessary. Such devices can be physically 
compromised, or become the targets of remote compromise (as disclosed in the two previous talks on this subject). 
After an engagement, it is recommended that only a minimum amount of information about the client should be kept long-
term. This is something that must be discussed with a client prior to an engagement to set appropriate expectations. There 
will certainly be something left, if only agreement documents proving the test actually occurred, alongside the report. More 
may be stored if there if engagements are meant to be on-going or recurring periodically. Any remaining data should be 
protected with encryption and access controls, and anything that is to be discarded should be wiped securely.
DEMONSTRATING ATTACKS ON PENETRATION TESTERS
This section describes a tool that part of the live demonstration of the talk that corresponds to this paper. The attack that is 
demonstrated by this tool illustrates threats to penetration testing operations that, while known to be technically feasible, 
HORNECYBER.COM
  PAGE 10
are not normally considered during an engagement. While one should not feel ashamed to ﬁnd enjoyment in seeing 
or presenting something being hacked on stage, these demonstrations and tools serve the additional goal of raising 
awareness and, hopefully, forcing the issue of increased rigor in penetration testing learning material, operations, and 
client expectations.
TO DOWNLOAD THIS TOOL AND THE LATEST COPY OF THIS WHITEPAPER WITH MORE DETAIL ON ITS USE, VISIT HORNECYBER.COM.
Snagterpreter – Hijacking HTTP and HTTPS Meterpreter Sessions
Metasploit is the most featured and mature free platform for the development of exploits as well as operationally 
conducting a wide variety of penetration testing activities [4]. The most fully featured post-exploitation payload for 
Metasploit is the Meterpreter agent, which provides many more features than the typical reverse shell payload used 
by traditional stand-alone exploits. Meterpreter has features that provide resilience for the connection between the 
penetration tester and their target, evasion of both host and network based detection, and a rich set of post-exploitation 
and exﬁltration capabilities [5]. Given their capabilities, stability, and ease of use, the combination of Metasploit and 
the Meterpreter payload are a ubiquitous part of most testers’ training, no matter how brief.
Meterpreter sessions frequently take place across hostile networks, including the public Internet. Such sessions are 
valuable to a third party attacker that would seek to seize control of the same systems that have been compromised by 
the penetration tester. Such sessions might be the result of more than direct exploitation of external-facing systems, 
in the case of post-exploitation pivoting or social engineering, and therefore represent more than just an extension of 
existing and accessible vulnerability that a third party could exploit in parallel to the tester’s activities. For these reasons, 
Meterpreter sessions must be considered as part of the attack surface that a malicious threat actor “shadowing” a 
penetration tester would seek to compromise. 
Meterpreter sessions operate using a Type-Length-Value (TLV) protocol for issuing commands and responses, and 
can operate over a variety of transport mechanisms. The most common means conﬁgured for a Meterpreter agent to 
communicate to a penetration tester’s system are direct reverse TCP sessions (using a TCP socket directly), HTTP, and 
HTTPS. While the “reverse TCP” transport is commonly presented in learning material that predates (or is sourced 
from material that predates) the addition of HTTP/HTTPS transports to Meterpreter in 2011, the use of HTTP/HTTPS 
is considered to be generally more desirable for reasons of being more resilient (requests can be broken up among 
separate stateless HTTP requests) and stealthy (such trafﬁc blends well with “normal” trafﬁc in an organization) [6].
While most common conﬁgurations of the Meterpreter agent support obfuscation and encryption of trafﬁc, it is (in these 
conﬁgurations) for the purpose of evading detection, rather than to protect the session from monitoring or hijacking. 
In this context, exclusive-or obfuscation of trafﬁc is used, as well as SSL sessions that do not require the presence 
of trusted certiﬁcates. The Metasploit developers are well-aware of the security issues (even if the end users are not 
necessarily as cognizant), demonstrated by a recent change, as of June 2015. Meterpreter can now be conﬁgured in a 
“paranoid mode” that requires the agent to verify the signature of the SSL web server that it is connecting to, allowing 
the penetration tester to deploy agents that will only complete connections to a veriﬁed listener. This mode is not yet 
widely used, however, due to it being a recent development as well a lack of general understanding of the susceptibility 
of non-“paranoid mode”. A Google search for meterpreter “paranoid mode” on 3/1/2016 resulted in less than 400 
hits, the vast majority of which were not relevant to this feature, or reproduced the text of the Metasploit project’s 
description of the feature.
  PAGE 11
The Snagterpreter tool, developed by the author for this talk, gives an attacker in a position to monitor and modify 
trafﬁc on a hostile network between the penetration tester and their target the ability to hijack non-“paranoid mode” 
Meterpreter sessions that have already been established. Snagterpreter supports hijacking Meterpreter sessions using 
the HTTP and HTTPS transports, and hands over interactive control of the session to the attacker. Once the attacker is 
done with a session the session can usually be returned to the penetration tester for continued and expected operation.
The attack demonstrated by Snagterpreter can be mitigated most effectively by conﬁguring Meterpreter payloads to use 
“paranoid mode”. Instructions for this can be found in the Metasploit wiki [7]. In the absence of using “paranoid mode” 
(which is newer than most learning materials used by penetration testers) a reasonable mitigation would be to avoid or 
minimize situations in which a malicious actor could intercept trafﬁc. No materials reviewed made any reference to the 
potential or mitigation for attacks of this type.
CONCLUSIONS
In the course of this paper, and the corresponding presentation and demonstration, we have examined previous work in 
explaining the threats that penetration testers might encounter on engagements, and the risk posed to the testers and 
their clients. A study was undertaken of the most popular learning and reference materials for penetration testers, and 
signiﬁcant shortcomings were found in guidance for securely conducting engagements. Recommendations have been 
made for improving the security of tests moving forward. Finally, a tool has been developed to demonstrate the very real 
risk that can be realized by using insecure practices. 
For a profession that specializes in reporting on vulnerabilities, it is important that a penetration testing ﬁrm should 
have its own house in order. You cannot have it both ways: you can’t report on vulnerabilities exploitable in situations 
involving malicious actors on the Internet intercepting and modifying trafﬁc without also considering those scenarios 
in attacks on penetration testing operations. In order to provide secure services for clients, efforts must be made to 
improve tools, techniques, and processes. In turn, improvements must be made in training and reference material that 
deﬁne standard procedures.
REFERENCES
[1] Wesley McGrew, Pwn The Pwn Plug: Analyzing and Counter-Attacking Attacker-Implanted Devices, DEF CON 21, https://www.defcon.org/images/defcon-21/dc-21-presentations/McGrew/DEFCON-21-
McGrew-Pwn-The-Pwn-Plug-WP.pdf
[2] Wesley McGrew, I Hunt Penetration Testers: More Weaknesses in Tools and Procedures, DEF CON 23, https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-23-
Wesley-McGrew-I-Hunt-Penetration-Testers-WP.pdf
[3] Multiple authors, The Penetration Testing Execution Standard, http://pentest-standard.org
[4] Metasploit: Penetration Testing Software http://metasploit.com
[5] Metasploit Framework Wiki, Meterpreter, https://github.com/rapid7/metasploit-framework/wiki/Meterpreter
[6] HD Moore, Meterpreter HTTP/HTTPS Communication, https://community.rapid7.com/community/metasploit/blog/2011/06/29/meterpreter-httphttps-communication
[7] Meterpreter Paranoid Mode, https://github.com/rapid7/metasploit-framework/wiki/Meterpreter-Paranoid-Mode
[8] NIST SP 800-115, Technical Guide to Information Security Testing and Assessment, 
http://csrc.nist.gov/publications/nistpubs/800-115/SP800-115.pdf
[9] ISECOM, OSSTMM 3 – Open Source Security Testing Methodology Manual, 
http://www.isecom.org/research/osstmm.html
[10] Penetration Test Guidance Special Interest Group, PCI Data Security Standard – Information 
Supplement: Penetration Testing Guidance, 
https://www.pcisecuritystandards.org/documents/Penetration_Testing_Guidance_March_2015.pdf
[11] The Penetration Testing Execution Standard, http://pentest-standard.org
[12] Thomas Wilhelm, Professional Penetration Testing, Second Edition
@HORNECyber
ABOUT THE AUTHOR
Wesley McGrew, Ph.D.
Wesley serves as the director of cyber operations for HORNE 
Cyber Solutions. Known for his work in offensive information 
security and cyber operations, Wesley specializes in penetration 
testing, network vulnerability analysis, exploit development, 
reverse engineering of malicious software and network trafﬁc 
analysis.