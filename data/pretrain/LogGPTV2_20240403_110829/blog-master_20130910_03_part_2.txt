例如 :   
```  
tapset::kprocess(3stap)                                tapset::kprocess(3stap)  
NAME  
       tapset::kprocess - systemtap kprocess tapset  
DESCRIPTION  
         This family of probe points is used to probe process-related activities.  
       kprocess.create  
              Fires whenever a new process or thread is successfully created  
               See probe::kprocess.create(3stap)  
               for details.  
... 略  
```  
对应的是 第16章.  
里面包含了kernel process tapset中的probe point和funciton. 例如  
```  
[root@db-172-16-3-39 ~]# man probe::kprocess.create  
PROBE::KPROCESS.CREA(3stap)  Kernel Process Tapset PROBE::KPROCESS.CREA(3stap)  
NAME  
       probe::kprocess.create - Fires whenever a new process or thread is successfully created  
SYNOPSIS  
       kprocess.create  
VALUES  
       new_tid  
              The TID of the newly created task  
       new_pid  
              The PID of the newly created process  
CONTEXT  
       Parent of the created process.  
DESCRIPTION  
       Fires whenever a new process is successfully created, either as a result of fork (or one of its syscall  
       variants), or a new kernel thread.  
SystemTap Tapset Reference       January 2013      PROBE::KPROCESS.CREA(3stap)  
[root@db-172-16-3-39 ~]# man function::target_set_pid  
FUNCTION::TARGET_SET(3stap)  Kernel Process Tapset FUNCTION::TARGET_SET(3stap)  
NAME  
       function::target_set_pid - Does pid descend from target process?  
SYNOPSIS  
           target_set_pid(pid:)  
ARGUMENTS  
       pid    The pid of the process to query  
DESCRIPTION  
       This function returns whether the given process-id is within the “target set”, that is whether it is a  
       descendant of the top-level target process.  
SystemTap Tapset Reference       January 2013      FUNCTION::TARGET_SET(3stap)  
```  
### 四.   
查看vm.brk对应的源文件 :   
首先在tapset目录中查找到alias对应的kernel.funciton.  
```  
[root@db-172-16-3-39 ~]# grep -r "^probe " /usr/share/systemtap/tapset/|grep vm.brk  
/usr/share/systemtap/tapset/memory.stp:probe vm.brk = kernel.function("do_brk") {  
```  
然后用stap -l 查出对应的kernel.function详细信息  
```  
[root@db-172-16-3-39 ~]# stap -l 'kernel.function("*")'|grep do_brk  
kernel.function("do_brk@mm/mmap.c:2037")  
```  
在源码的debug分支中可以找到这个源码文件.  
```  
cd /usr/src/debug/kernel-2.6.18/linux-2.6.18-348.12.1.el5.x86_64  
less mm/mmap.c  
```  
对应的行查找到函数do_brk  
```  
/*  
 *  this is really a simplified "do_mmap".  it only handles  
 *  anonymous maps.  eventually we may be able to do some  
 *  brk-specific accounting here.  
 */  
unsigned long do_brk(unsigned long addr, unsigned long len)  
2037: {  
        struct mm_struct * mm = current->mm;  
        struct vm_area_struct * vma, * prev;  
        unsigned long flags;  
        struct rb_node ** rb_link, * rb_parent;  
        pgoff_t pgoff = addr >> PAGE_SHIFT;  
        int error;  
        len = PAGE_ALIGN(len);  
        if (!len)  
                return addr;  
        error = security_file_mmap_addr(0, 0, 0, 0, addr, 1);  
        if (error)  
                return error;  
        flags = VM_DATA_DEFAULT_FLAGS | VM_ACCOUNT | mm->def_flags;  
        error = get_unmapped_area(NULL, addr, len, 0, MAP_FIXED);  
        error = get_unmapped_area(NULL, addr, len, 0, MAP_FIXED);  
        if (error & ~PAGE_MASK)  
                return error;  
        /*  
         * mlock MCL_FUTURE?  
         */  
        if (mm->def_flags & VM_LOCKED) {  
                unsigned long locked, lock_limit;  
                locked = len >> PAGE_SHIFT;  
                locked += mm->locked_vm;  
                lock_limit = current->signal->rlim[RLIMIT_MEMLOCK].rlim_cur;  
                lock_limit >>= PAGE_SHIFT;  
                if (locked > lock_limit && !capable(CAP_IPC_LOCK))  
                        return -EAGAIN;  
        }  
        /*  
         * mm->mmap_sem is required to protect against another thread  
         * changing the mappings in case we sleep.  
         */  
        verify_mm_writelocked(mm);  
        /*  
         * Clear old maps.  this also does some error checking for us  
         */  
 munmap_back:  
        vma = find_vma_prepare(mm, addr, &prev, &rb_link, &rb_parent);  
        if (vma && vma->vm_start > PAGE_SHIFT))  
        /* Check against address space limits *after* clearing old maps... */  
        if (!may_expand_vm(mm, len >> PAGE_SHIFT))   
                return -ENOMEM;  
        if (mm->map_count > sysctl_max_map_count)  
                return -ENOMEM;  
        if (security_vm_enough_memory(len >> PAGE_SHIFT))  
                return -ENOMEM;  
        /* Can we just expand an old private anonymous mapping? */  
        if (vma_merge(mm, prev, addr, addr + len, flags,  
                                        NULL, NULL, pgoff, NULL))  
                goto out;  
        /*                
         * create a vma struct for an anonymous mapping  
         */  
        vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);  
        if (!vma) {  
                vm_unacct_memory(len >> PAGE_SHIFT);  
                return -ENOMEM;  
        }  
        vma->vm_mm = mm;  
        vma->vm_start = addr;  
        vma->vm_end = addr + len;  
        vma->vm_pgoff = pgoff;  
        vma->vm_flags = flags;  
        vma->vm_page_prot = protection_map[flags &  
                                (VM_READ|VM_WRITE|VM_EXEC|VM_SHARED)];  
        vma_link(mm, vma, prev, rb_link, rb_parent);  
out:              
        mm->total_vm += len >> PAGE_SHIFT;  
        if (flags & VM_LOCKED) {  
                mm->locked_vm += len >> PAGE_SHIFT;  
                make_pages_present(addr, addr + len);  
                mm->locked_vm += len >> PAGE_SHIFT;  
                make_pages_present(addr, addr + len);  
        }  
        return addr;  
}  
EXPORT_SYMBOL(do_brk);  
```  
## 参考  
1\. https://sourceware.org/systemtap/langref/Components_SystemTap_script.html  
2\. man stapprobes  
3\. man probe::* tapset::*  
4\. stappaths  
5\. SystemTap Tapset Reference Manual  
https://sourceware.org/systemtap/tapsets/  
6\. 帮助手册索引  
https://sourceware.org/systemtap/man/index.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")