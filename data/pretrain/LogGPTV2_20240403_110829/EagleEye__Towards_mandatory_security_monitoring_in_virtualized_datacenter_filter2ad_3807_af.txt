NtOpenFile
NtCreateFile
NtWriteFile
NtClose
NtCreateSection
NtMapViewOfSection
NtUnmapViewOfSection
D.  Instructions Emulated for Stealthy Hook 
163.7
425,881
113,273
147,830
51,803
91,088
412
728
181
141.6
453,975
4,718
28,578
21,493
41,812
910
2,454
563
6.8
404,844
397,084
367,226
500,728
873,247
18,340
33,944
10,354
x264
9,752.6
2,116,652
2,438
1,582
24,408
61,884
996
2,500
574
Figure 17 presents the distribution of instructions emulated 
by EagleEye for cloaking the stealthy hooks in the guest system. 
The  instructions  are  mostly  due  to  PatchGuard  check[16]. 
Compared  with  the  total  number  of  instructions  or  the  total 
number  of  system  calls  involved  in  each  benchmark  program 
(Table  2),  the  instruction  emulation  is  actually  relatively 
infrequent. This is consistent with the result in Figure 15, which 
indicates the overhead incurred by instruction emulation should 
be  negligible.  An  interesting  finding  is  that    the  frequency  of 
instruction emulation seems to be  affected more by the number 
of  guest  system  calls  than  by  the  number  of  instructions 
executed.    For  instance,  the  build  clamav  benchmark    has  a 
significantly 
the  7-zip 
benchmarks, yet their numbers of instruction emulated and also 
their system call counts are roughly on par with each other. 
instruction  count 
smaller 
than 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
E.  Comparison of Detection Engines: ClamAV vs. Kaspersky 
The  home-made  InVM_AV  scanner  performs  poorly  in 
comparison  with  Kaspersky.  We  noticed  that  Kaspersky  was 
pretty selective (smart) about the locations in a file that it needs 
to  look  at  for  virus  patterns,  even  when  the  maximum  scan 
settings (most comprehensive scanning) are enabled. In contrast, 
the  ClamAV  engine  adopted  a  much  more  conservative  scan 
heuristic.  Specifically,  ClamAV  will  skip  MP3,  MPEG,  RM, 
OGG,  SIP  log,  PDF  image,  SQLite  journal,  and  SQLite  DB 
files 
in 
libclamav/filetypes_int.h).  Other  than  those  files, 
ClamAV with the default setting will look into the first 25MB 
segment of a file for virus patterns.  
defined 
scan 
(as 
its 
in 
For Kaspersky, there is no source code for knowing about 
its  heuristics.  We  thus  conduct  an  experiment  to  confirm  that 
the  inspection by  ClamAV  is  indeed  more thorough  than  that 
by  Kaspersky,  which  contributes  to  longer  execution  time  of 
InVM_AV  in  the  experiments  above.  Note  that  for  many 
practical cases, a thorough inspection may not be necessary at 
all, as long as the virus code is highly unlikely to be activated 
in those situations. We are not trying to use the experiment to 
indicate  that  ClamAV  provides  better  virus  protection  than 
Kaspersky.   
 In Table 3, we can see that both ClamAV and Kaspersky 
can detect well-formed malware binary (situation 1). However, 
Kaspersky does not detect virus code appended at the end of a 
benign  PE  executable  file  (situation  2).  Similarly,  Kaspersky 
does not detect virus code appended at the end of a JPEG file 
(situation 3), and neither does it detect virus code appended at 
the  end  of  a  Gzip  archive  file  (situation  4).  In  comparison, 
ClamAV  can  detect  the  virus  codes  in  all  three  cases.  In 
situation  5,  the  virus  code  is  appended  at  the  end  of  a  .rm 
RealMedia  file.  Both  Kaspersky  and  ClamAV  skip  checking 
the  file. If  we  corrupt the  header  of the .rm  file (situation  6), 
ClamAV  will  inspect  the  file  and  detect  the  virus  code  while 
Kaspersky still report the file as virus-free.  
Table 3. Scan range comparison between ClamAV and 
Kaspersky 
ClamAV 
○ 
○ 
Kaspersky 
○ 
╳ 
○ 
○ 
╳ 
○ 
╳ 
╳ 
╳ 
○ 
Situation 
1. Well-formed malware binary 
2. Benign PE executable appended by 
virus code 
3. JPEG image file appended by virus 
4. Gzip archive file appended by virus 
code 
code 
5. RealMedia format (.rm) video file 
appended by virus code 
6. RealMedia format (.rm) video file 
appended by virus code with corrupted 
header 
VI.  RELATED WORK 
The  concept  of  VMM  based  security  monitoring  was 
proposed  by  Garfinkel  et  al  [6].  Their  security  monitor  can 
perform integrity check of the guest kernel and programs and 
can  also  detect  NIC  promiscuous  mode  usage.  The  semantic 
gap problem in VM introspection was discussed in XenAccess 
[10, 18],  VMwatcher  [26],  and  Virtuoso [19].  However,  none 
of  the  above  work  can  be  used  to  deal  with  semantic  gaps 
caused by complex mechanisms such as disk caching. 
Event-driven VMM monitoring was proposed in the system 
Lares [5]. Lares employs a PV driver in a guest VM to reroute 
events of interest to an external security application. VMware 
provides  a  set  of  introspection  API  called  VMsafe  [7]  for 
security monitoring on VMware platform. The API allows the 
introspection  of  guest  VM  network,  CPU,  memory,  and  disk 
storage states. Event-driven monitoring is supported through a 
PV driver (i.e. the vShield endpoint driver). VMsafe has been 
employed  in  products  such  as  TrendMicro  DeepSecurity  and 
McAfee MOVE. Our work is distinct from these works in that 
our approach does not require PV drivers to hook and reroute 
the guest events.  
Virtualization-based  monitoring  has  also  been  applied  to 
dynamic  malware  analysis  [15,  27].  The  motivation  is  that 
hardware  assisted  virtualization  can  be  leveraged  to  hide  the 
analyzer. The analysis environment is purposely built and not 
part  of  a  production  system,  so  issues  such  as  overall  system 
performance and deployment cost are not as relevant as in the 
realm  of  online  security  monitoring.  Also,  malware  analysis 
system  focuses  more  on  extracting  the  full  behavior  of  a 
malware.  The  analysis  does  not  have  to  be  synchronous  and 
responsive. It can assume that complete information about the 
system  and  the  malware  under  analysis  can  be  acquired  at  a 
later  time.  On  the  contrary,  security  monitoring  often  has  to 
make  monitoring  decisions  synchronously  and  immediately 
based on very limited information at that time point. 
Rosenblum et al. [28] first proposed the use of virtualization 
to  separate  instruction  execution  and  data  access  contexts  on 
memory pages. We adopt the same strategy of memory context 
separation to hide the stealthy hook from guest detection (Sec. 
III.C).  However,  our  implementation  takes  advantage  of  the 
extended  page  table  virtualization  hardware  and  does  not 
require every guest page fault to be trapped into the hypervisor. 
VII.  LIMITATIONS 
EagleEye  provides  a  set  of 
introspection  and  event 
interception  primitives  to  be  leveraged  for  implementing 
mandatory  security  monitoring  in  VDC  environment.  The 
scope  of  monitoring  is  limited  to  security  violations  that  will 
manifest in the guest CPU state, memory state, disk state, or as 
guest  block  device  I/O,  memory  access,  or  code  execution 
events. The effectiveness of monitoring largely depends on the 
algorithm  employed  by  the  corresponding  detection  engine. 
EagleEye,  by  itself,  does  not  guarantee  the  detection  of  any 
specifics  attack.  The  fidelity  of  the  introspection  and  event 
interception  primitives  as  provided  by  EagleEye  depends  on 
certain  knowledge  of  the  guest  system  model  (Sec.  IV.E).  A 
malicious  tenant  may  use  a  guest  system  of  which  such 
knowledge is not available to EagleEye in advance (e.g. using a 
non-standard guest system kernel) and thus evade the security 
monitoring. EagleEye can possibly detect the presence of non-
standard  guest  kernels  through  memory  introspection  and 
looking at the patterns of the guest system events but that may 
not suffice to indicate a guest system being malicious.  
EagleEye  does  not  attempt  to  address  denial-of-service 
(DoS)  attacks  against  the  detection  engines  or  the  monitoring 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
infrastructure.  An  adversary  may  generate  high  amount  of 
activities in the guest system (e.g. synthesizing a huge number 
of faked executable binaries) to keep a detection engine busy. If 
the  detection  engine  operates  in  asynchronous  mode,  false 
negatives  due  to  missed  detection  are  likely  to  occur.  On  the 
other  hand,  if  the  detection  engine    operates  in  synchronous 
mode,  the  DoS  attack  will  not  cause  false-negatives  but  the 
guest  system  will  be  frequently  blocked  pending  security 
monitoring. The impact can be localized to the offending guest 
by implementing QoS mechanism on the rate of stealthy hook 
invocation.  
VIII.  CONCLUSION 
We  propose  the EagleEye  approach  to  achieve  mandatory 
security monitoring in virtualized datacenter environment. The 
approach has been applied to a real-world security monitoring 
application.   The proposed  approach requires  no  modification 
to  a  guest  VM  or  attention  from  the  VM  tenants,  which  we 
believe are the key to achieve mandatory security monitoring in 
large-scale VDC environments, such as an IaaS cloud.  
the  stealthy  hook  mechanism,  which 
In EagleEye, we come up with the technique of  high-level 
representation  replication  to  address the  semantic  gap  and the 
inconsistent system state problems. The technique is powerful 
enough  to  deal  with  complex  black-box  mechanisms  such  as 
disk  caching.  The  requirement  for  synchronous  monitoring  is 
supported  by 
is 
transparent  (to  the  guest)  and  scalable.  We  proposed  the 
deferred introspection technique as an enhancement of memory 
introspection to deal with inconsistent guest memory states due 
to  on-demand  paging  or  memory  swapping.  The  goals  of 
mandatory security monitoring prevent the use of guest kernel 
synchronization  mechanisms  to  implement  efficient  blocking-
wait for security monitoring. We come up with the In-VM idle 
loop  mechanism  to  improve  the  performance  of  security 
monitoring due to the lack of such synchronization mechanisms.    
Performance  overhead  is  still  an  issue  of  the  current 
EagleEye implementation. The strength of EagleEye being able 
to operate  without a PV-driver  is  also its  weakness.  We  hope 
for the discussion to contribute to potential future research on 
VDC  mandatory  security  monitoring,  or  more  generally,  the 
mandatory  security  monitoring  of  other 
types  of  cloud 
datacenters.    EagleEye  is  not  yet  a  perfect  solution  to 
mandatory security monitoring for VDC environment. We look 
forward to the community engaging in dialog that would help 
mature the technologies.  
ACKNOWLEDGMENT 
The  work  was  supported  by  National  Science  Council  in 
Taiwan  under  grants  100-2218-E-009-005  and  101-2221-E-
009-076.  We  thank  Hong-Wei  Li  for  assisting  with  the 
measurement of benchmark program instruction counts. 
REFERENCES 
[1]  H.  Liu.  (2012,  March  13).  Amazon  data  center  size.  Available: 
http://huanliu.wordpress.com/2012/03/13/amazon-data-center-size/ 
[2]  R.  McMillan.  (2009). Botnet  found in  Amazon's  EC2 cloud.  Available: 
http://news.techworld.com/security/3208467/botnet-found-in-amazons-
ec2-cloud/ 
[3]  F.  Rashid.  (2011).  Sony  PSN  Hackers  Used  Amazon  EC2  in  Attack. 
Available: 
http://securitywatch.eweek.com/data_breach/sony_psn_hackers_used_am
azon_ec2_in_attack.html 
[4]  VMware.  Antivirus  Best  Practices  for  VMware  View  5.  Available: 
http://www.vmware.com/files/pdf/VMware-View-AntiVirusPractices-
TN-EN.pdf 
[5]  B. D. Payne, M. Carbone, M. Sharif, and W. Lee, "Lares: An architecture 
for  secure  active  monitoring  using  virtualization,"  in  IEEE  Symposium 
on Security and Privacy, 2008, pp. 233-247. 
[6]  T. Garfinkel and M. Rosenblum, "A virtual machine introspection based 
[7]  VMware. 
architecture for intrusion detection," in NDSS, 2003. 
VMsafe. 
VMware 
http://www.vmware.com/technical-
resources/security/vmsafe/security_technology.html 
Available: 
Available: 
[8]  McAfee. 
McAfee 
MOVE 
AntiVirus. 
http://www.mcafee.com/us/products/move-anti-virus.aspx 
[9]  TrendMicro. Trend Micro Enterprise Security - Changing the Game for 
Available: 
Anti-Virus 
http://www.trendmicro.com/cloud-content/us/pdfs/business/white-
papers/wp_vmware-trendmicro-av-virtualization.pdf 
Datacenter. 
Virtual 
the 
in 
[10] B. 
Payne. 
(2012, 
1/12). 
LibVMI. 
Available: 
http://vmitools.sandia.gov/libvmi.html 
[11] Z.  Wang  and  X.  Jiang,  "Hypersafe:  A  lightweight  approach  to  provide 
lifetime  hypervisor  control-flow  integrity,"  in  IEEE  Symposium  on 
Security and Privacy, 2010, pp. 380-395. 
[12] F.  Zhang,  J.  Chen,  H.  Chen,  and  B.  Zang,  "CloudVisor:  retrofitting 
protection  of  virtual  machines  in  multi-tenant  cloud  with  nested 
virtualization," in SOSP, Cascais, Portugal, 2011, pp. 203-216. 
[13] MSDN. 
Windows 
Filtering 
Platform. 
Available: 
http://msdn.microsoft.com/en-us/windows/hardware/gg463267 
[14] VMware. 
VMware 
vShield 
Endpoint. 
Available: 
http://www.vmware.com/files/pdf/vmware-vshield-endpoint-ds-en.pdf 
[15] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, "Ether: malware analysis 
via hardware virtualization extensions," in ACM CCS, 2008, pp. 51-62. 
[16] skape  and  Skywing.  (2005).  Bypassing  PatchGuard  on  Windows  x64. 
Available: http://www.uninformed.org/?v=3&a=3&t=pdf 
[17] M. E. Russinovich, D. A. Solomon, and A. Ionescu, Windows® Internals: 
Including Windows Server 2008 and Windows Vista, Fifth Edition ed.: 
Microsoft Press, June 17, 2009. 
[18] B.  D.  Payne,  M.  de  Carbone,  and  W.  Lee,  "Secure  and  flexible 
monitoring of virtual machines," in ACSAC, 2007, pp. 385-397. 
[19] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Giffin, and W. Lee, "Virtuoso: 
Narrowing  the  semantic  gap  in  virtual  machine  introspection," in  IEEE 
Sympoisum on Security and Privacy, 2011, pp. 297-312. 
[20] Y. Fu and Z. Lin, "Space Traveling across VM: Automatically Bridging 
the  Semantic  Gap  in  Virtual  Machine  Introspection  via  Online  Kernel 
Data Redirection," in IEEE Symposium on Security and Privacy, 2012, 
pp. 586-600. 
[21] VMware.  Timekeeping 
in  VMware  Virtual  Machines.  Available: 
http://www.vmware.com/files/pdf/Timekeeping-In-VirtualMachines.pdf 
[22] Sourcefire. Clam AntiVirus. Available: http://www.clamav.net/lang/en/ 
[23] Microsoft. 
Minifilter 
Sample. 
scanner 
Available: 
http://msdn.microsoft.com/en-
us/library/windows/hardware/ff554758(v=vs.85).aspx 
[24] Dazuko.  A  Stackable  Filesystem  to  Allow  Online  File  Access  Control. 
Available: http://dazuko.dnsalias.org/wiki/index.php/Main_Page 
[25] Y. Dong, Z. Yu, and G. Rose, "SR-IOV networking in Xen: architecture, 
design  and  implementation,"  in  Proceedings  of  the  First  conference  on 
I/O virtualization, 2008, pp. 10-10. 
[26] X.  Jiang,  X.  Wang,  and  D.  Xu,  "Stealthy  malware  detection  through 
vmm-based out-of-the-box semantic view reconstruction," in ACM CCS, 
2007, pp. 128-138. 
[27] A. M. Nguyen, N. Schear, H. D. Jung, A. Godiyal, S. T. King, and H. D. 
Nguyen,  "Mavmm:  Lightweight  and  purpose  built  vmm  for  malware 
analysis," in ACSAC, 2009, pp. 441-450. 
[28] N.  E.  Rosenblum,  G.  Cooksey,  and  B.  P.  Miller,  "Virtual  machine-
provided  context  sensitive  page  mappings,"  in  International  Conference 
on Virtual Execution Environments, 2008, pp. 81-90. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply.