title:Better Bounds for Block Cipher Modes of Operation via Nonce-Based
Key Derivation
author:Shay Gueron and
Yehuda Lindell
Be(cid:29)er Bounds for Block Cipher Modes of Operation via
Nonce-Based Key Derivation
Shay Gueron
University of Haifa and Amazon Web Services
PI:EMAIL
ABSTRACT
Block cipher modes of operation provide a way to securely en-
crypt using a block cipher. The main factors in analyzing modes
of operation are the level of security achieved (chosen-plaintext
security, authenticated encryption, nonce-misuse resistance, and
so on) and performance. When measuring the security level of a
mode of operation, it does not su(cid:28)ce to consider asymptotics, and
a concrete analysis is necessary. This is especially the case today,
when encryption rates can be very high, and so birthday bounds
may be approached or even reached.
In this paper, we show that key-derivation at every encryp-
tion signi(cid:27)cantly improves the security bounds in many cases. We
present a new key-derivation method that utilizes a truncated block
cipher, and show that this is far better than standard block-cipher
based key derivation. We prove that by using our key derivation
method, we obtain greatly improved bounds for many modes of
operation, with a result that the lifetime of a key can be signi(cid:27)cantly
extended. We demonstrate this for AES-CTR (CPA-security), AES-
GCM (authenticated encryption) and AES-GCM-SIV (nonce-misuse
resistance). Finally, we demonstrate that when using modern hard-
ware with AES instructions (AES-NI), the performance penalty of
deriving keys at each encryption is insigni(cid:27)cant for most uses.
1 INTRODUCTION
Block ciphers are a basic building block in encryption. Modes of
operation are ways of using block ciphers in order to obtain se-
cure encryption, and have been studied for decades. Nevertheless,
new computing settings and threats make the design of new and
better modes of operation a very active (cid:27)eld of research. For just
one example, the construction of nonce-misuse resistant modes
of operation, that remain secure even if a nonce repeats, is one
consideration in the recent CAESAR competition.
One issue that has recently become a concern is the block size
of block ciphers and the rami(cid:27)cation that this has on security.
Speci(cid:27)cally, when a block cipher with block size n is used to encrypt
2n/2 blocks, then birthday collisions occur with high probability,
potentially resulting in a security breach. Although the threat due
to such collisions is often thought to be theoretical in nature, it was
recently shown that real attacks can be carried out when 3DES is
used in TLS, because of the small block size [5]. Speci(cid:27)cally, the
block size of 3DES is 64 bits, and thus collisions occur at just 232
blocks, or 32GB of data, which can be transferred in under an hour
on a fast Internet connection, and in seconds within a data center.
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
© 2017 ACM. This is the author’s version of the work. It is posted here for your
personal use. Not for redistribution. The de(cid:27)nitive Version of Record was published in
Proceedings of CCS’17, , https://doi.org/10.1145/3133956.3133992.
Yehuda Lindell
Bar-Ilan University
PI:EMAIL
At (cid:27)rst sight, this problem of birthday collisions is a problem
that is only of relevance for 3DES. Modern block ciphers, like AES,
have a block size of 128, and the birthday bound is thus 264, which
corresponds to a whopping 1 million Petabytes of data. However,
in reality, birthday collisions are a concern, even for AES or other
128-bit block ciphers. This is because the standard NIST recom-
mendation is to stop using a key when the probability of some
leakage exceeds 2−32. Thus, after encrypting 248 blocks, keys must
be changed. Furthermore, in many popular modes of operation,
birthday bounds are actually reached far earlier. Two important
examples are counter (CTR) mode and AES-GCM, when using ran-
dom IVs. In both of these case, the standard implementation used a
96-bit IV, and thus collisions occur in the IV with probability 2−32
after encrypting only 232 di(cid:29)erent messages (with fresh random
IVs). Therefore, the number of messages that can be encrypted with
a single key is actually quite low.
A real example – QUIC. QUIC [19] is a new transport protocol
that is designed to improve the performance of connection-oriented
web applications that are currently using TCP, while providing
security protection that is comparable to that of TLS. QUIC encrypts
“source-address tokens”, with the property that a cluster of servers
can recognize them in the future, but without clients being able
to forge them. Simply adding a MAC would su(cid:28)ce, but for future-
proo(cid:27)ng they should also be con(cid:27)dential. All servers can share a
fairly long-lived secret key, but the servers need to be able to create
these tokens quickly, and independently. Since a central allocation
system for nonces is not operationally viable, random selection
of nonces is the only possibility. AES-GCM’s limit of 232 random
nonces (per key) suggests that, even if the system rotates these
secret keys daily, it could not issue more than about 50K tokens per
second. However, in order to process DDoS attacks the system may
need to be able to issue hundreds of millions of tokens per second.
A similar problem arises in TLS with session tickets [2]. Although
the demands are signi(cid:27)cantly reduced in this context, a limit of 50K
tickets per second is still insu(cid:28)cient for many sites, and thus plain
AES-GCM is unsuitable for this as well.
1.1 Our Results
We introduce a generic technique for signi(cid:27)cantly extending the life-
time of a key. The idea is very simple: (cid:27)rst derive a per-message key
by applying a key-derivation function with the master-key and nonce,
and then use the per-message key to encrypt the message. Intuitively,
this ensures that no single key is used too much, and so many more
blocks can be encrypted. Furthermore, it requires only minimal
changes to existing schemes, which is important for deployment.
However, implementing this idea has two major challenges:
(1) On the one hand, key derivation based on a hash function would
yield good bounds but is very slow. On the other hand, stan-
dard key derivation based on AES in counter mode yields poor
bounds. In particular, collisions would occur with probability
2−32 after 248 derivations.
(2) Even if one were to overcome the key derivation bound using a
block cipher, this would require running an AES key expansion
for every message. Standard methods of key expansion, e.g.,
using the AES-NI aeskeygenassist instruction, are very slow.
We address the above challenges and show how to use continual
key derivation in an e(cid:28)cient way, and with very good bounds.
(cid:17). In
(cid:19)
N2
2128
Continual key derivation. We indeed use AES-based key deriva-
tion. However, in contrast to the standard counter-mode based key
derivation [4], we use a truncated block cipher. For example, in
order to derive a 128-bit key, two AES encryptions are computed
and the key is taken to be the concatenation of the (cid:27)rst half of each
output block; likewise, to derive a 256-bit key, four AES encryptions
are used. The reason that this key derivation is preferable is due
to the fact that the “best” key derivation utilizes a pseudorandom
function, whereas block ciphers are pseudorandom permutations.
Thus, as the number of derivations approaches the birthday bound,
the keys derived can no longer be assumed to be random. How-
ever, a truncated block cipher is no longer a permutation, and the
more it is truncated the closer it behaves to a pseudorandom func-
tion. Using this method and AES, we can derive N keys that can
be distinguished from random with advantage at most O(cid:16) N296
from random with advantage O(cid:18)
contrast, the standard counter-based method can be distinguished
. Thus, in order to maintain a
2−32 upper bound on the advantage, we are able to derive up to 264
keys, instead of up to 248 keys using the standard counter-based
method. (Note that if we were to truncate even more, the bounds
would be even better.)
Having overcome the problem of the key derivation bound, we
come to the second issue of performance. First, using truncated
AES may seem to actually further harm performance since more
AES encryptions are needed (double, to be exact). However, on
modern processors with an AES-NI instruction set, AES encryp-
tions are fully pipelined and so the di(cid:29)erence in cost between 2
AES operations and 4 is negligible. Next, as we mentioned above,
the key expansion operation is very expensive, even using AES-NI.
We therefore use a method described in [15] for computing key ex-
pansion via the AES-NI round function, and pipelining this together
with encryptions. As we show, the result has very little overhead
(in percentages), with the exception of very small messages. In all
cases, in objective terms, the overhead is relatively small. For exam-
ple, key expansion of a 128-bit key using aeskeygenassist takes
111 cycles, our optimized key expansion takes 48 cycles, and our
key expansion interleaved with 2 AES encryptions takes 58 cycles.
Finally, we provide a very detailed analysis of our method for
general modes of operation, and apply it to AES-CTR, AES-GCM [16,
17] and AES-GCM-SIV [13, 14]. Since our analysis is general, it can
be applied to other schemes as well, and we hope it will therefore be
useful beyond these speci(cid:27)c examples. We compare the bounds that
we achieve to the bounds of the basic modes without key generation,
and show that the lifetime of keys can be greatly extended using
our technique. To illustrate this, with a standard 96-bit nonce, AES-
CTR and AES-GCM can be used to encrypt at most 248 blocks (e.g.,
232 messages of length 216 each), while keeping the adversarial
advantage below 2−32. In contrast, using our key derivation, the
same modes can be used to encrypt 264 messages of length 216 each,
with an adversarial advantage of at most 2−32.
Encryption with a nonce vs a random IV. Throughout this paper,
we refer to a nonce as a non-repeating value that is unique but not
necessarily random. This is in contrast to an IV that is considered
random. It is well known that for modes of operation for which
nonce uniqueness su(cid:28)ces (like CTR), if nonce uniqueness can be
guaranteed, then this is preferable to choosing a random IV. This
is because random IVs collide at the birthday bound, and possibly
earlier if the device encrypting has poor entropy. It is interesting to
note that our key-derivation method does not increase the number
of messages that one can encrypt, when a random IV is used. This
is due to the fact that IV collisions still happen with the same
probability, and when they collide the same key and nonce is used
even with key derivation. Nevertheless, in these cases, our method
does enable one to encrypt longer messages (and so overall many
more blocks). However, in the unique nonce setting, where we
assume that the parties can guarantee uniqueness (e.g., by keeping
the current counter as state), our method does enable encrypting
far more messages, as described above.
Nonce-misuse resistance. The most popular authenticated-encryp-
tion mode of operation today, AES-GCM, is seeing widespread use
due to its attractive performance, which is enhanced by AES and
polynomial multiplication instructions that are now part of many
modern processor architectures. However, it su(cid:29)ers catastrophic
failures of con(cid:27)dentiality and integrity if two distinct messages
happen to be encrypted, under the same key, with the same nonce.
While the requirements for authenticated encryption specify that
the pair of (key, nonce) shall only ever be used once, and thus pro-
hibit such failures, there are cases where, in practice, guaranteed
uniqueness of nonces is a concern. This was shown recently for
when AES-GCM is used with random nonces in TLS [7].
Nonce-misuse resistant authenticated encryption schemes [20]
do not su(cid:29)er from this problem. For this class of authenticated
encryption, encrypting two messages with the same nonce only
discloses whether the messages were equal or not. This is the min-
imum amount of information that a deterministic algorithm can
leak in this situation. In [12], an authenticated-encryption mode
called GCM-SIV was introduced; this scheme is based on the same
paradigm as the SIV mode by [20], but has far enhanced perfor-
mance due to the use of the same building blocks as AES-GCM.
However, GCM-SIV’s bounds are not optimal, and in particular,
cannot be used to encrypt more than 232 messages, as in AES-GCM.
This makes GCM-SIV unsuitable for QUIC, with the requirements
as above. Using our key derivation method, our analysis shows
that it is possible to encrypt up to approximately 264 messages of
length 216 (for one example of parameters). This makes it suitable
for settings like QUIC and others. We stress that when using a nonce-
misuse resistance scheme, it is possible to encrypt essentially as many
messages when using a random IV as when using nonces that are
guaranteed to be unique, even when not using very good randomness.
This is because IV repetitions do not harm security (beyond leaking
that the same message was possibly encrypted).
Consider now the use of GCM-SIV with our key derivation to
generate tokens in QUIC. In this case, encryption must be carried
out using a random IV (since di(cid:29)erent servers share the same key
but not joint state), and must be able to generate millions of tokens
per second. At the rate of 1 million per second, the original GCM-
SIV of [12] would require rotating keys every hour. In contrast, even
at the rate of 1 billion per second, GCM-SIV with key derivation
would reach the bounds after only 500 years of use.
Impact. AES-GCM-SIV has been proposed as a CFRG standard [14].
There are a number of minor di(cid:29)erences between the original GCM-
SIV in [12] and the proposed standard, but the main di(cid:29)erence is the
use of our proposed key derivation technique. An original analysis
of this technique appeared in [13], speci(cid:27)cally for GCM-SIV. How-
ever, the analysis here provides far better bounds, and is general
and thus can be applied to other modes like CTR and AES-GCM.
AES-GCM-SIV, utilizing our key-derivation technique, has already
been integrated into BoringSSL [1] (Google’s fork of OpenSSL), and
Google is also already using it in QUIC [19].
1.2 Related Work
Bellare and Abdalla [3] suggested a re-keying mechanism to in-
crease the lifetime of a key. They provide security analyses for
di(cid:29)erent re-keying mechanisms, and show that re-keying indeed
improves the security margins and therefore extends the lifetime
of the master key. Our method is di(cid:29)erent in the mechanism, and
also in the key derivation itself. Speci(cid:27)cally, [3] consider a scenario
where keys are changed periodically using an external counter. This
requires storing state, and coordination between di(cid:29)erent machines
using the same key. In contrast, we use the nonce to derive a key,
develop a general result on the security bene(cid:27)ts of this, and apply
it to a number of di(cid:29)erent schemes. Our results are very di(cid:29)erent.
For one, we obtain that when using schemes that must be nonce
respecting, our method enables encrypting longer messages but
not more messages (overall more blocks). In contrast, when using
nonce misuse-respecting schemes, our method enables encrypting
many more messages with a random IV. Thus, our method enables
parties to encrypt using a random IV rather than with a unique
nonce (which is preferable since state is not needed), and obtain
excellent bounds even when the source of entropy is not perfect.
2 DEFINITIONS OF SECURITY
2.1 Preliminaries
Within our proofs, we will use the following theorem from [22] that
bounds the multi-collision probability of randomly chosen items.
Theorem 2.1 ( Theorem 2 of [22].). Let 2 ≤ r ≤ q ≤ A. Let q
balls be thrown, one by one (independently) at random, into A bins.
Let MultiColl (A, q, r ) denote the event (called an r multi-collision)
that there exists at least one bin that contains at least r balls. Then,
Prob[MultiColl (A, q, r )] ≤
qr
r! · Ar−1 .
(1)
2.2 Key-Derivation Functions (KDF)
We de(cid:27)ne the notion of KDF security, which is actually just the
de(cid:27)nition of a pseudorandom function; we use the term KDF since
this is its use in our scheme (we will separately de(cid:27)ne what we need
with respect to block cipher security). Let F : {0, 1}κ × {0, 1}n →
{0, 1}m be a keyed function, with keys of length κ, input of length
n and output of length m (note that in some cases it will hold that
m = κ, but not always; this will depend on the concrete encryption
scheme being considered). Then:
Experiment ExptKDFA,F :
(1) Choose a random b ← {0, 1} and key k ←
{0, 1}κ, and function f chosen randomly from
the set of all functions from {0, 1}n to {0, 1}m.
(2) If b = 0 then set O(x ) = f (x ); if b = 1 then
set O(x ) = Fk (x ).
(3) Obtain b(cid:48) ← AO(·) (λ), where λ denotes the
empty input.
(4) Output 1 if and only if b(cid:48) = b.
We say that A is a (t, N)-adversary if it runs in at most t steps and
makes at most N queries to O. We de(cid:27)ne the advantage of A by
(cid:102)
(cid:103)
AdvKDFA,F = 2 · Prob
ExptKDFA,F = 1
− 1.
2.3 Multiple-Instance Block Cipher Security
We now de(cid:27)ne an experiment for the purpose of formalizing the
assumption on the underlying block cipher. Clearly, the most basic
assumption on a block cipher is simply that it is a pseudorandom
permutation (or function). However, we wish to consider the case
that an adversary interacts with N di(cid:29)erent instances of the block
cipher with di(cid:29)erent keys. It is well known that there is a general
reduction to the single key case. However, this reduction results in a
degradation of N in the distinguishing success, as well as a blow-up
of N in the running time of the adversary. Speci(cid:27)cally, via a standard
hybrid argument, one can show that if there exists an adversary
running in time t that distinguishes a series of N block cipher
instances with independent keys from N random permutations
(resp., functions) with probability , then there exists an adversary
running in time t·N that distinguishes a single block cipher instance
from a single random permutation (resp., function) with probability
/N. This reduction is very wasteful since it both increases the
running time and reduces the distinguishing capability by N. To
see why this is problematic, for AES-128, assume that we wish to
claim that no adversary running in time 248 and querying N = 248
di(cid:29)erent instances can succeed with probability greater than 2−32
(which is the standard security margin used in practice). That is, we
start with an adversary with t = N = 248 and  = 2−32. Using the
generic reduction in an attempt to prove by contradiction, we would
conclude that if such an adversary could be constructed, then one
could construct an adversary attacking a single instance of AES-
128 that runs in time t · N = 296 and succeeds with probability
greater than /N = 2−80. Such an adversary clearly exists, and thus
there is no contradiction. Therefore, we cannot conclude that our
(reasonable) assumption holds. We stress that this is a logical failure
and not a security failure. Needless to say, an adversary running
in time 296 is not reasonable. However, we are trying to verify a