1 backend/utils/sort/tuplesort.c
447
Chapter23 SortingandMerging
The computational complexity of sorting n values is known to be O(nlog n). A
2
0.0025 singlecomparisonoperationisestimatedatthedoubledcpu_operator_cost value.
Since the whole data set must be scanned and sorted before the result can be re-
trieved,thestartupcostofsortingincludesthetotalcostofthechildnodeandall
theexpensesincurredbycomparisonoperations.
The total cost of sorting also includes the cost of processing each row to be re-
turned,whichisestimatedatcpu_operator_cost(andnotattheusualcpu_tuple_cost
value,astheoverheadincurredbytheSortnodeisinsignificant).1
Forthisexample,thecostsarecalculatedasfollows:
=> WITH costs(startup) AS (
SELECT 4.04 + round((
current_setting('cpu_operator_cost')::real * 2 *
104 * log(2, 104)
)::numeric, 2)
)
SELECT startup,
startup + round((
current_setting('cpu_operator_cost')::real * 104
)::numeric, 2) AS total
FROM costs;
startup | total
−−−−−−−−−+−−−−−−−
7.52 | 7.78
(1 row)
Top-N Heapsort
Ifadatasetneedstobesortedonlypartially(asdefinedbytheclause),the
heapsort method can be applied (it is represented in the plan as top-N heapsort).
Tobemoreexact,thisalgorithmisusedifsortingreducesthenumberofrowsat
leastbyhalf,oriftheallocatedmemorycannotaccommodatethewholeinputset
(whiletheoutputsetfitsit).
=> EXPLAIN (analyze, timing off, summary off)
SELECT * FROM seats
ORDER BY seat_no LIMIT 100;
1 backend/optimizer/path/costsize.c,cost_sortfunction
448
23.2 Sorting
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Limit (cost=72.57..72.82 rows=100 width=15)
(actual rows=100 loops=1)
−> Sort (cost=72.57..75.91 rows=1339 width=15)
(actual rows=100 loops=1)
Sort Key: seat_no
Sort Method: top−N heapsort Memory: 33kB
−> Seq Scan on seats (cost=0.00..21.39 rows=1339 width=15)
(actual rows=1339 loops=1)
(8 rows)
Tofindkhighest(orlowest)valuesoutofn,theexecutoraddsthefirstkrowsinto
adatastructurecalledheap. Thentherestoftherowsgetaddedonebyone,and
thesmallest(orlargest)valueisremovedfromtheheapaftereachiteration.Once
alltherowsareprocessed,theheapcontainsksought-aftervalues.
The heap term here denotes a well-known data structure and has nothing to do with
databasetables,whichareoftenreferredtobythesamename.
Costestimation. Thecomputationalcomplexityofthealgorithmisestimatedat
O(nlog k), but each particular operation is more expensive as compared to the
2
quicksortalgorithm.Therefore,theformulausesnlog 2k.1
2
=> WITH costs(startup)
AS (
SELECT 21.39 + round((
current_setting('cpu_operator_cost')::real * 2 *
1339 * log(2, 2 * 100)
)::numeric, 2)
)
SELECT startup,
startup + round((
current_setting('cpu_operator_cost')::real * 100
)::numeric, 2) AS total
FROM costs;
startup | total
−−−−−−−−−+−−−−−−−
72.57 | 72.82
(1 row)
1 backend/optimizer/path/costsize.c,cost_sortfunction
449
Chapter23 SortingandMerging
External Sorting
Ifthescanshowsthatthedatasetistoobigtobesortedinmemory,thesorting
nodeswitchesovertoexternalmergesorting(labeledasexternalmergeintheplan).
Therowsthatarealreadyscannedaresortedinmemorybythequicksortalgorithm
andwrittenintoatemporaryfile.
1 2 3 4 5 1
Subsequent rows are then read into the freed memory, and this procedure is re-
peateduntilallthedataiswrittenintoseveralpre-sortedfiles.
2 3 4 5 1 2
Next,thesefilesaremergedintoone. Thisoperationisperformedbyroughlythe
samealgorithmthatisusedformergejoins;themaindifferenceisthatitcanpro-
cessmorethantwofilesatatime.
Amergeoperationdoesnotneedtoomuchmemory. Infact,itisenoughtohave
roomforonerowperfile. Thefirstrowsarereadfromeachfile,therowwiththe
lowest value (or the highest one, depending on the sort order) is returned as a
partial result,and the freed memory is filled with the next row fetched from the
samefile.
450
23.2 Sorting
In practice, rows are read in batches of  pages rather than one by one, which
reduces the number of / operations. The number of files that are merged in a
singleiterationdependsontheavailablememory,butitisneversmallerthansix.
Theupperboundaryisalsolimited(by)sinceefficiencysufferswhenthereare
toomanyfiles.1
Sorting algorithms have long-established terminology. External sorting was originally
performedusingmagnetictapes,andPostgrekeepsasimilarnameforthecomponent
thatcontrolstemporaryfiles.2 Partiallysorteddatasetsarecalled“runs.”3 Thenumberof
runsparticipatinginthemergeisreferredtoasthe“mergeorder.”Ididnotusetheseterms,
buttheyareworthknowingifyouwanttounderstandPostgrecodeandcomments.
Ifthesortedtemporaryfilescannotbemergedallatonce,theyhavetobeprocessed
inseveralpasses,theirpartialresultsbeingwrittenintonewtemporaryfiles.Each
iterationincreasesthevolumeofdatatobereadandwritten,sothemoreis
available,thefastertheexternalsortingcompletes.
1 2 3 4 5 1+2+3
4 5 1+2+3 4+5
1 backend/utils/sort/tuplesort.c,tuplesort_merge_orderfunction
2 backend/utils/sort/logtape.c
3 DonaldE.Knuth.TheArtofComputerProgramming.VolumeIII.SortingandSearching
451
Chapter23 SortingandMerging
Thenextiterationmergesnewlycreatedtemporaryfiles.
1+2+3 4+5
Thefinalmergeistypicallydeferredandperformedontheflywhentheuppernode
pullsthedata.
Let’srunthecommandtoseehowmuchdiskspacehasbeenusedby
externalsorting.Theoptiondisplaysbufferusagestatisticsfortemporary
files(temp readandwritten). Thenumberofwrittenbufferswillbe(roughly)the
same as the number of read ones; converted to kilobytes,this value is shown as
Diskintheplan:
=> EXPLAIN (analyze, buffers, costs off, timing off, summary off)
SELECT * FROM flights
ORDER BY scheduled_departure;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Sort (actual rows=214867 loops=1)
Sort Key: scheduled_departure
Sort Method: external merge Disk: 17136kB
Buffers: shared hit=2627, temp read=2142 written=2150
−> Seq Scan on flights (actual rows=214867 loops=1)
Buffers: shared hit=2624
(6 rows)
Toprintmoredetailsonusingtemporaryfilesintotheserverlog,youcanenable
thelog_temp_filesparameter.
Costestimation. Let’stakethesameplanwithexternalsortingasanexample:
=> EXPLAIN SELECT *
FROM flights
ORDER BY scheduled_departure;
452
23.2 Sorting
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Sort (cost=31883.96..32421.12 rows=214867 width=63)
Sort Key: scheduled_departure
−> Seq Scan on flights (cost=0.00..4772.67 rows=214867 width=63)
(3 rows)
Heretheregularcostofcomparisons(theirnumberisthesameasinthecaseofa
quicksortoperationinmemory)isextendedbythe/cost.1 Alltheinputdatahas
tobefirstwrittenintotemporaryfilesondiskandthenreadfromdiskduringthe
mergeoperation(possiblymorethanonceifallthecreatedfilescannotbemerged
inoneiteration).
It is assumed that three quarters of disk operations (both reads and writes) are
sequential,whileonequarterisrandom.
The volume of data written to disk depends on the number of rows to be sorted
andthenumberofcolumnsusedinthequery.2 Inthisexample,thequerydisplays
allthecolumnsoftheflightstable,sothesizeofthedataspilledtodiskisalmost
thesameasthesizeofthewholetableifitstupleandpagemetadataarenottaken
intoaccount(pagesinsteadof).
Heresortingiscompletedinoneiteration.
Therefore,thesortingcostisestimatedinthisplanasfollows:
=> WITH costs(startup) AS (
SELECT 4772.67 + round((
current_setting('cpu_operator_cost')::real * 2 *
214867 * log(2, 214867) +
(current_setting('seq_page_cost')::real * 0.75 +
current_setting('random_page_cost')::real * 0.25) *
2 * 2309 * 1 -- one iteration
)::numeric, 2)
)
SELECT startup,
startup + round((
current_setting('cpu_operator_cost')::real * 214867
)::numeric, 2) AS total
FROM costs;
1 backend/optimizer/path/costsize.c,cost_sortfunction
2 backend/optimizer/path/costsize.c,relation_byte_sizefunction
453
Chapter23 SortingandMerging
startup | total
−−−−−−−−−−+−−−−−−−−−−
31883.96 | 32421.13
(1 row)
v. Incremental Sorting
IfadatasethastobesortedbykeysK …K …K ,andthisdatasetisknownto
1 m n
be already sorted by the first m keys, you do not have to re-sort it from scratch.
Instead,youcansplitthissetintogroupsbythesamefirstkeysK …K (valuesin
1 m
thesegroupsalreadyfollowthedefinedorder),andthensorteachofthesegroups
separatelybytheremainingK …K keys.Thismethodiscalledtheincremental
m+1 n
sort.
Incrementalsortingislessmemory-intensivethanothersortingalgorithms,asit
splits the set into several smaller groups; besides,it allows the executor to start
returningresultsafterthefirstgroupisprocessed,withoutwaitingforthewhole
settobesorted.
InPostgre,theimplementationisabitmoresubtle:1 whilerelativelybiggroups
of rows are processed separately, smaller groups are combined together and are
sortedinfull.Itreducestheoverheadincurredbyinvokingthesortingprocedure.2
TheexecutionplanrepresentsincrementalsortingbytheIncrementalSortnode:
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT * FROM bookings
ORDER BY total_amount, book_date;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Incremental Sort (actual rows=2111110 loops=1)
Sort Key: total_amount, book_date
Presorted Key: total_amount
Full−sort Groups: 2823 Sort Method: quicksort Average
Memory: 30kB Peak Memory: 30kB
Pre−sorted Groups: 2624 Sort Method: quicksort Average
1 backend/executor/nodeIncrementalSort.c
2 backend/utils/sort/tuplesort.c
454
23.2 Sorting
Memory: 3152kB Peak Memory: 3259kB
−> Index Scan using bookings_total_amount_idx on bookings (ac...
(8 rows)
Astheplanshows,thedatasetispre-sortedbythetotal_amountfield,asitisthe
result of an index scan run on this column (Presorted Key). The  
commandalsodisplaysrun-timestatistics. TheFull-sort Groupsrowisrelatedto
smallgroupsthatwereunitedtobesortedinfull,whilethePresortedGroupsrow
displays the data on large groups with partially ordered data,which required in-
cremental sorting by the book_date column only. In both cases, the in-memory
quicksortmethodwasapplied.Thedifferenceingroupsizesisduetonon-uniform
distributionofbookingcosts.
Incrementalsortingcanbeusedtocomputewindowfunctionstoo: v.
=> EXPLAIN (costs off)
SELECT row_number() OVER (ORDER BY total_amount, book_date)
FROM bookings;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
WindowAgg
−> Incremental Sort
Sort Key: total_amount, book_date
Presorted Key: total_amount
−> Index Scan using bookings_total_amount_idx on bookings
(5 rows)
Cost estimation. Cost calculations for incremental sorting1 are based on the ex-
pectednumberofgroups2andtheestimatedsortingcostofanaverage-sizedgroup
(whichwehavealreadyreviewed).
Thestartupcostreflectsthecostestimationofsortingthefirstgroup,whichallows
thenodetostartreturningsortedrows;thetotalcostincludesthesortingcostof
allgroups.
Wearenotgoingtoexplorethesecalculationsanyfurtherhere.
1 backend/optimizer/path/costsize.c,cost_incremental_sortfunction
2 backend/utils/adt/selfuncs.c,estimate_num_groupsfunction
455
Chapter23 SortingandMerging
v. Parallel Mode
Sortingcanalsobeperformedconcurrently.Butalthoughparallelworkersdopre-
sorttheirdatashares,theGathernodeknowsnothingabouttheirsortorderand
canonlyaccumulatethemonafirst-come,first-servebasis. Topreservethesort
order,theexecutorhastoapplytheGatherMergenode.1
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT *
FROM flights
ORDER BY scheduled_departure
LIMIT 10;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Limit (actual rows=10 loops=1)
−> Gather Merge (actual rows=10 loops=1)
Workers Planned: 1
Workers Launched: 1
−> Sort (actual rows=10 loops=2)
Sort Key: scheduled_departure
Sort Method: top−N heapsort Memory: 27kB
Worker 0: Sort Method: top−N heapsort Memory: 27kB
−> Parallel Seq Scan on flights (actual rows=107434 lo...
(9 rows)
TheGatherMergenodeusesabinaryheap2 toadjusttheorderofrowsfetchedby
severalworkers. It virtuallymerges severalsorted sets ofrows,just likeexternal
sortingwoulddo,butisdesignedforadifferentusecase: Gather Mergetypically
handlesasmallfixednumberofdatasourcesandfetchesrowsonebyonerather
thanblockbyblock.
Costestimation. ThestartupcostoftheGatherMergenodeisbasedonthestartup
p. costofitschildnode. JustlikefortheGathernode,thisvalueisincreasedbythe
1000 costoflaunchingparallelprocesses(estimatedatparallel_setup_cost).
1 backend/executor/nodeGatherMerge.c
2 backend/lib/binaryheap.c
456
23.2 Sorting
Thereceivedvalueisthenfurtherextendedbythecostofbuildingabinaryheap,
whichrequiressortingnvalues,wherenisthenumberofparallelworkers(thatis,
nlog n).Asinglecomparisonoperationisestimatedatdoubledcpu_operator_cost, 0.0025
2
andtotalshareofsuchoperationsistypicallynegligiblesincenisquitesmall.
The total cost includes the expenses incurred by fetching all the data by several