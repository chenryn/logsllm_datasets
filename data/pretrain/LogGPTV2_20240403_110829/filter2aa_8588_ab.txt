    nonogram_solver_format = {
        "r" : [[int(x) for x in row.strip(" ").split(" ")] for row in service_format["rows"].split(",")],
        "c" : [[int(x) for x in column.strip(" ").split(" ")] for column in service_format["columns"].split(",")],
    }
    return nonogram_solver_format
def solve(puzzle):
    with log.progress('Solving Nonogram...'):
        puzzle_data = json.dumps(translate_puzzle(puzzle))
        with patch("builtins.open", mock_open(read_data = puzzle_data)) as mock_file:
            solver = nonogramsolver.NonogramSolver(mock_file)
            solver.solve()
            return solver
def print_solution(solution):
    print("")
    print(str(solution).replace("X", u"\u2588\u2588").replace(".", "  "))
    print("")
def main():
    puzzles = get_puzzles()
    print("Available puzzles:")
    for puzzle in puzzles.values():
        print(f'\t{puzzle["id"]}: {puzzle["name"]}')
    puzzle_id = ""
    while puzzle_id not in puzzles.keys():
        puzzle_id = input("Please enter requested puzzle ID: ").strip()
    print(f"Selected puzzle: {puzzles[puzzle_id]['name']}")
    solution = solve(puzzles[puzzle_id])
    print_solution(solution)
if __name__ == "__main__":
    main()
```
The most intriguing puzzles are `QR` and `TopSecret`, let's solve them:
```console
root@kali:/media/sf_CTFs/shabak/Puzzle# python3 solve.py
Available puzzles:
        0: SpaceInvaders
        1: X
        2: 1337
        3: TopSecret
        4: StarOfDavid
        5: QR
Please enter requested puzzle ID: 3
Selected puzzle: TopSecret
                  ██████████████
              ████████████████████████
          ██████  ████    ████  ████████
        ████████  ████    ████        ████
      ████  ████  ████    ████          ████
    ██████  ████  ████    ████            ████
  ████████  ████  ████    ████              ████
  ████████  ████  ████    ████              ████
  ██  ████  ████  ████    ████                ████
████  ████  ████  ████    ████                ████
████  ████  ████  ████    ████                ████
████████    ████  ████    ████                ████
██████      ████  ████    ████                ████
████      ████    ████    ████                ████
████  ████████    ████    ████                ████
██████████        ████    ████                ████
██████          ████      ████                ████
  ████      ██████      ████                ████
  ██████████████        ████                ████
    ████████        ██████                ████
      ████        ██████                ████
        ████  ████████                ██████
          ████████                ██████
            ██████████████████████████
                ██████████████████
root@kali:/media/sf_CTFs/shabak/Puzzle# python3 solve.py
Available puzzles:
        0: SpaceInvaders
        1: X
        2: 1337
        3: TopSecret
        4: StarOfDavid
        5: QR
Please enter requested puzzle ID: 5
Selected puzzle: QR
██████████████  ████    ██  ██████████████
██          ██    ██    ██  ██          ██
██  ██████  ██  ██  ██  ██  ██  ██████  ██
██  ██████  ██  ██    ████  ██  ██████  ██
██  ██████  ██  ██████      ██  ██████  ██
██          ██              ██          ██
██████████████  ██  ██  ██  ██████████████
                  ████
████████    ██  ██  ██    ██    ██████  ██
    ██  ████  ██    ██  ██    ██  ██████
██    ██  ████  ██  ██  ██████████  ██████
        ████  ██████    ████          ██
████  ██  ████  ██  ████  ██    ██  ██  ██
                ██  ██    ██  ██    ██  ██
██████████████            ████  ██  ████
██          ██    ████████████    ██  ██
██  ██████  ██      ████    ██    ██    ██
██  ██████  ██  ██        ██    ██    ██
██  ██████  ██  ██    ██        ██████
██          ██  ██████████  ██  ████  ████
██████████████  ████  ████    ██  ██  ██
```
If you're wondering, the QR code maps to `1337`. So now what?
It's time to take another look at the additional APIs that the source code has revealed to us:
```csharp
    public void TODO_GetToken(string username, string password, int puzzleID)
    {
      int num = (int) MessageBox.Show("Error - Not implemented yet", "/api/token");
    }
    public void TODO_PatchPuzzle(int puzzleID, string token)
    {
      int num = (int) MessageBox.Show("Error - Not implemented yet", string.Format("/api/puzzle/{0}", (object) puzzleID));
    }
```
They aren't implemented, but we can try to access them ourselves. The parameters of the function are a hint towards the parameters that should be sent as part of the request.
```console
root@kali:/media/sf_CTFs/shabak/Puzzle# curl http://puzzle.shieldchallenges.com/api/token
{"message": {"username": "Missing required parameter in the JSON body"}}
root@kali:/media/sf_CTFs/shabak/Puzzle# curl http://puzzle.shieldchallenges.com/api/token -H "Content-Type: application/json" --data '{"username":"Test_User","password":"SecretPassw0rd", "puzzle_id": 1}' --request GET
{"token": "eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMTA3Mzc2OSwiZXhwIjoxNjExMDczODI5fQ.eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uLi4uLi4uIiwiY3Vyc29yIjo2fQ.-GqiASSqrkChVjShGdjy8xsbEXNTMfSNrM-K7ItBOm5ASaVsinKfhDRMyMMLw-q8TPyQgzYFARWUt1dfu--5RA", "duration": 60}
```
We got what looks like a JSON Web Token (JWT). Let's decode it:
```console
root@kali:/media/sf_CTFs/shabak/Puzzle# python3 ~/utils/jwt_tool/jwt_tool/jwt_tool.py eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMTA3Mzc2OSwiZXhwIjoxNjExMDczODI5fQ.eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uLi4uLi4uIiwiY3Vyc29yIjo2fQ.-GqiASSqrkChVjShGdjy8xsbEXNTMfSNrM-K7ItBOm5ASaVsinKfhDRMyMMLw-q8TPyQgzYFARWUt1dfu--5RA
        \   \        \         \          \                    \
   \__   |   |  \     |\__    __| \__    __|                    |
         |   |   \    |      |          |       \         \     |
         |        \   |      |          |    __  \     __  \    |
  \      |      _     |      |          |   |     |   |     |   |
   |     |     / \    |      |          |   |     |   |     |   |
\        |    /   \   |      |          |\        |\        |   |
 \______/ \__/     \__|   \__|      \__| \______/  \______/ \__|
  Version 2.0                 \______|             @ticarpi
Original JWT:
=====================
Decoded Token Values:
=====================
Token header values:
[+] alg = "HS512"
[+] iat = 1611073769
[+] exp = 1611073829
Token payload values:
[+] puzzle_id = 1
[+] state = "........."
[+] cursor = 6
----------------------
JWT common timestamps:
iat = IssuedAt
exp = Expires
nbf = NotBefore
----------------------
```
So we have a cursor pointing at some location, and a `state` variable which interestingly contains the same amount of dots as the puzzle contains cells.
Let's move on the the next API:
```console
root@kali:/media/sf_CTFs/shabak/Puzzle# curl http://puzzle.shieldchallenges.com/api/puzzle/1 -H "Content-Type: application/json" --request GET
{"message": "The method is not allowed for the requested URL."}
root@kali:/media/sf_CTFs/shabak/Puzzle# curl http://puzzle.shieldchallenges.com/api/puzzle/1 -H "Content-Type: application/json" --request POST
{"message": "The method is not allowed for the requested URL."}
root@kali:/media/sf_CTFs/shabak/Puzzle# curl http://puzzle.shieldchallenges.com/api/puzzle/1 -H "Content-Type: application/json" --request PATCH
{"message": "Invalid token"}
root@kali:/media/sf_CTFs/shabak/Puzzle# curl http://puzzle.shieldchallenges.com/api/puzzle/1 -H "Content-Type: application/json" --request PATCH --data '{"token":"eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMTA3Nzg2MSwiZXhwIjoxNjExMDc3OTIxfQ.eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uLi4uLi4uIiwiY3Vyc29yIjo0fQ.YWQBUJYL2pCFnh2ov2W6KJWw2NC1kstOKFKDD6groBFOpG6HN-uQi11d_zz21zxYTDLT0WymM2C642gLIy4lxQ"}'
{"message": "Invalid token"}
```
So, as hinted by the C# method name, this API supports only `PATCH` calls, but it still won't accept our token. That it, at least until we find the correct way to provide it:
```console
root@kali:/media/sf_CTFs/shabak/Puzzle# curl --location --request PATCH 'http://puzzle.shieldchallenges.com/api/puzzle/1' --header 'Authorization: Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMTA3ODEwOCwiZXhwIjoxNjExMDc4MTY4fQ.eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uLi4uLi4uIiwiY3Vyc29yIjozfQ.WPQGZWUo8Ohp6Tywh0Sy4PPl6sVnNqJHdiE8zVdNXEuO8BSq-Rbg7jiefnNvvBDogtran441shjkUTpghXWtIg'
{"message": {"instructions": "Missing required parameter 'instructions' in in the JSON body"}}
root@kali:/media/sf_CTFs/shabak/Puzzle# curl --location --request PATCH 'http://puzzle.shieldchallenges.com/api/puzzle/1' --header 'Authorization: Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMTA3ODEwOCwiZXhwIjoxNjExMDc4MTY4fQ.eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uLi4uLi4uIiwiY3Vyc29yIjozfQ.WPQGZWUo8Ohp6Tywh0Sy4PPl6sVnNqJHdiE8zVdNXEuO8BSq-Rbg7jiefnNvvBDogtran441shjkUTpghXWtIg' --data-raw '{"instructions": "test"}' --header 'Content-Type: application/json'
{"message": "Invalid hex encoding"}
root@kali:/media/sf_CTFs/shabak/Puzzle# curl --location --request PATCH 'http://puzzle.shieldchallenges.com/api/puzzle/1' --header 'Authorization: Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMTA3ODEwOCwiZXhwIjoxNjExMDc4MTY4fQ.eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uLi4uLi4uIiwiY3Vyc29yIjozfQ.WPQGZWUo8Ohp6Tywh0Sy4PPl6sVnNqJHdiE8zVdNXEuO8BSq-Rbg7jiefnNvvBDogtran441shjkUTpghXWtIg' --data-raw '{"instructions": "deadbeef"}' --header 'Content-Type: application/json'
{"message": "Instructions must be 3 bytes long"}
root@kali:/media/sf_CTFs/shabak/Puzzle# curl --location --request PATCH 'http://puzzle.shieldchallenges.com/api/puzzle/1' --header 'Authorization: Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMTA3ODEwOCwiZXhwIjoxNjExMDc4MTY4fQ.eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uLi4uLi4uIiwiY3Vyc29yIjozfQ.WPQGZWUo8Ohp6Tywh0Sy4PPl6sVnNqJHdiE8zVdNXEuO8BSq-Rbg7jiefnNvvBDogtran441shjkUTpghXWtIg' --data-raw '{"instructions": "aabbcc"}' --header 'Content-Type: application/json'
{"token": "eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxMTA3ODE1MywiZXhwIjoxNjExMDc4MTYzfQ.eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uWC4uLi4uIiwiY3Vyc29yIjozfQ.fLTwzBmFYlsRMxB2_OAhke5ZCVhU5y42tALKbU9I0s3K_OhvQ_rsS8W7ipEHwki2y1IqWrft7b4XvMueEBJFig"}
```
So we now know that the instructions should be provided as a 3-byte hex-encoded string. But what do they do? Notice that when we provided a correctly formatted instruction, we received a new token. Let's compare both tokens:
```console
root@kali:/media/sf_CTFs/shabak/Puzzle# echo eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uLi4uLi4uIiwiY3Vyc29yIjozfQ | base64 -d
{"puzzle_id":1,"state":".........","cursor":3}
root@kali:/media/sf_CTFs/shabak/Puzzle# echo eyJwdXp6bGVfaWQiOjEsInN0YXRlIjoiLi4uWC4uLi4uIiwiY3Vyc29yIjozfQ | base64 -d
{"puzzle_id":1,"state":"...X.....","cursor":3}