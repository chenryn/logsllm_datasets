and chose a maximum time to consider in order to make
the Time domain ﬁnite. In all cases we examined, analysis
results under these modiﬁcations would hold under the orig-
inal version of the axioms with R. However, the systems is
modular, so that a solver based on the real numbers could
simply be ‘plugged in’ to the algorithm instead. This is an
area of current investigation.
4.3 Termination and Complexity
We consider termination and computational complexity
properties for two aspects of our formal framework—the
runtime evaluation of policy rules, and the oﬄine analysis
of policies accomplished using the abductive approach just
described. By evaluation, we mean the determination of an-
swers to queries about which actions are permitted, denied,
or constrained by obligations, using SLDNF.
The language we use (the sorts Subject, Target, Action,
Fluent, Event) is ﬁnite.
If we further stipulate that the
models of a domain-constrained policy P = Π ∪ D must
be such that in the security policy component Π, there is
a maximum value t such that whenever a body of a policy
rule is made true by the model, all time indices must belong
to some interval [ts, ts + t], and if only a ﬁnite number of
actions can occur within any given ﬁnite time, then a ﬁnite
amount of information needs to be stored about the system
evolution in order to evaluate policies. For example, if
permitted(Sub, Tar, Act, T ) ← holdsAt(f, T ′), T = T ′ + 10.
is in the policy, we know we must record information about
whether the ﬂuent f holds 10 seconds in the past; beyond 10
6From http://www.doc.ic.ac.uk/~rac101/ffpa/.
seconds, we may not care (depending on the other policies
in Π) what happens to f . For any given domain-constrained
policy, a bound on the amount of domain-dependent infor-
mation which needs to be stored can be calculated, based
on the language, the policy set, and the domain description.
In order to ensure that the evaluation of policy rules ex-
pressed in our formalism terminates, and that this proce-
dure runs eﬃciently, we must ensure that there are no circu-
lar dependences amongst the members of our security poli-
cies (see Deﬁnition 7). We do this by insisting that there
is a total ordering amongst the triples (Sub, Tar, Act), such
that whenever an authorization or obligation policy rule con-
tains Sub, Tar, Act in the head with time index T , all lit-
erals with time index T ′ = T in the body of the predicates
permitted, denied, obl can only contain Sub′, Tar′, Act′ such
that (Sub′, Tar′, Act′) < (Sub, Tar, Act) in the ordering. Fur-
ther, whenever a negative literal in the body of a policy rule
contains a variable, that variable should also appear in some
positive literal of the body. (This way we ensure that selec-
tion of literals during policy evaluation is safe in the sense
of logic-programming.)
Under these conditions, a result from [12] can be used to
show that the evaluation of queries for literals of permitted,
denied and obl can be performed in time polynomial in the
length of the preceding history relevant to queries, these
histories being bounded by the size of the language that we
assume to be ﬁnite. Authorizations are typically evaluated
when a req is received for permission to perform an action;
the fulﬁllment of obligations can be monitored using tech-
niques such as view maintenance in relational databases or
a version of the RETE algorithm for production rules. We
also have soundess and completeness theorems for our for-
mal framework, for policy evaluation queries.
In the case of the analysis tasks using the ACLP abduc-
tive procedures, matters are more complicated. We have a
guarantee of soundness. In the most general case, our lan-
guage is expressive enough to allow the presence of circular
dependences amongst literals in policy rules, and thus there
is not, at the most general and unrestricted level, a guaran-
tee of termination and therefore of completeness. However,
if we make a further restriction that, in addition to a max-
imum time interval [ts, ts + t] in the body of policy rules
(which we made for the case of policy evaluation, above),
there is also a maximum time in the past that we will re-
curse over in our analyses, we can ensure termination and
completeness. Further, our language is expressive enough
to represent, and our analysis algorithms powerful enough
to solve, classes of problem such as the ones identiﬁed in
[32] and in [21] that are NP-hard, giving an indication of
the computational complexity of the abductive analysis we
use. Having abduction as a uniform mechanism for solving
analysis problems will let us work on optimizations and ap-
proximations for abductive procedures semi-independently
of the analysis. The implementation of abduction we use
now is more general than strictly required in our analyses.
5. CONCLUSION
and contain ﬁne-grained defaults. Many languages aim to
achieve some of these goals, but none succeed in achieving
all in a way which balances expresiveness with eﬃciency of
evaluation and analysis.
Our framework was designed to meet these requirements.
We deﬁned the structure of the policy language, and de-
scribed how we use the EC to depict and reason about chang-
ing properties of the system. We gave examples of autho-
rization and obligation rules, and described how abductive
algorithms lying at the heart of our framework can be used
in the analysis, discussing the current implementation.
By separating the representation of the laws of system
evolution, and constraints on the system state, from the
authorizations and obligations which deﬁne policy decisions
we gain clarity in the representation but also the ability to
switch domain descriptions easily and study the behaviour
of policies on diﬀerent systems.
The choices we have made in the design of the language
show that it is possible to encode subtle default relation-
ships and decisions without sacriﬁcing eﬃciency, readability
or concision. The use of temporal constraints and an explicit
representation of time has enabled us to express complex de-
pendences of policy decisions on changing system states, as
well as on other policies.
Abductive Constraint Logic Programming is a suitable
paradigm for the kinds of analysis task we wish to perform
on policies. We have used it successfully to provide rich
diagnostic information on the system traces and initial con-
ditions which give rise to properties of policies in heteroge-
nous environments: in this way, the use of ACLP with the
Event Calculus and separable policies and system represen-
tations has been shown to be an eﬀective combination for
policy analysis. We have also used abduction, in our analy-
sis framework, to ﬁll in a partially-speciﬁed system, so that
initial conditions which might give rise to e.g. modality con-
ﬂicts are generated as hypotheses.
Further work is ongoing both at the implementation and
at the theoretical level. At the moment, all suitable ACLP
systems use integers as a basis of their constraints, but the
modularity of the abductive approach we have taken means
that an implementation based on reals is entirely feasible.
We are also completing the work on translations between our
framework and other languages for policies representation.
We currently have translation schemes for Ponder2 [31], and
are working on schemes for XACML [30] and others.
Our broader objective is to deﬁne a reﬁnement framework,
of which the analysis framework will form a part. Within
this context, an expressive abstract policy language is neces-
sary both to represent a broad spectrum of high-level policies
but also to accommodate diﬀerent concrete mechanisms on
which policies need to be implemented. Our previous work
on policy reﬁnement [3] for network quality of service man-
agement suggests that many of the properties we have built
into our analysis framework (expressivity, separation of the
laws for system change from policies, ﬂexible expression of
defaults, etc.) are also valuable for policy reﬁnement.
A formal policy framework must incorporate obligations
as well as authorizations, include an analysis component us-
ing information about changing system state for accurate
proof of signiﬁcant properties, provide rich diagnostic in-
formation as output, separate the representation of system
from policy, and include policies which depend on each other
6. ADDITIONAL AUTHORS
Additional authors: Seraphin Calo (IBM T.J. Watson Re-
search Center, email: PI:EMAIL) and Morris Slo-
man (Department of Computing, Imperial College London,
email: PI:EMAIL).
7. REFERENCES
[1] D. Alrajeh, O. Ray, A. Russo, and S. Uchitel.
Extracting requirements from scenarios with ilp. In
S. Muggleton, R. P. Otero, and
A. Tamaddoni-Nezhad, editors, ILP, volume 4455 of
LNCS, pages 64–78. Springer, 2006.
[2] A. Bandara, S. Calo, R. Craven, J. Lobo, E. Lupu,
J. Ma, A. Russo, and M. Sloman. An expressive policy
analysis framework with enhanced system dynamicity.
Technical Report, Department of Computing, Imperial
College London, 2008.
[3] A. K. Bandara, E. C. Lupu, A. Russo, N. Dulay,
M. Sloman, P. Flegkas, M. Charalambides, and
G. Pavlou. Policy reﬁnement for diﬀserv quality of
service management. In Integrated Network
Management, pages 469–482. IEEE, 2005.
[4] S. Barker. Security policy speciﬁcation in logic. In
Proc. of Int. Conf. on AI, pages 143–148, June 2000.
[5] M. Y. Becker and S. Nanz. A logic for state-modifying
authorization policies. In ESORICS, pages 203–218,
2007.
[6] M. Y. Becker and S. Nanz. The role of abduction in
declarative authorization policies. In P. Hudak and
D. S. Warren, editors, PADL, volume 4902 of LNCS,
pages 84–99. Springer, 2008.
[7] M. Y. Becker and P. Sewell. Cassandra: Flexible trust
management, applied to electronic health records. In
CSFW, pages 139–154. IEEE Computer Society, 2004.
[8] D. F. C. Brewer and M. J. Nash. The chinese wall
security policy. In IEEE Symposium on S & P, pages
206–214, 1989.
[9] G. Bruns, D. S. Dantas, and M. Huth. A simple and
expressive semantic framework for policy composition
in access control. In P. Ning, V. Atluri, V. D. Gligor,
and H. Mantel, editors, FMSE, pages 12–21. ACM,
2007.
[10] G. Bruns and M. Huth. Access-control policies via
belnap logic: Eﬀective and eﬃcient composition and
analysis. In CSF, pages 163–176. IEEE Computer
Society, 2008.
[11] S. Chen, D. Wijesekera, and S. Jajodia. Incorporating
dynamic constraints in the ﬂexible authorization
framework. In ESORICS, pages 1–16, 2004.
[12] J. Chomicki. Eﬃcient checking of temporal integrity
constraints using bounded history encoding. ACM
Trans. Database Syst., 20(2):149–186, 1995.
[13] N. Damianou, N. Dulay, E. Lupu, and M. Sloman.
The ponder policy speciﬁcation language. In
M. Sloman, J. Lobo, and E. Lupu, editors, POLICY,
volume 1995 of LNCS, pages 18–38. Springer, 2001.
[14] D. J. Dougherty, K. Fisler, and S. Krishnamurthi.
Specifying and reasoning about dynamic
access-control policies. In U. Furbach and N. Shankar,
editors, IJCAR, volume 4130 of LNCS, pages 632–646.
Springer, 2006.
[15] D. J. Dougherty, K. Fisler, and S. Krishnamurthi.
Obligations and their interaction with programs. In
ESORICS, pages 375–389, 2007.
[16] D. Ferraiolo and D. Kuhn. Role based access control.
In 15th National Computer Security Conference, pages
554–563, 1992.
[17] K. Fisler, S. Krishnamurthi, L. A. Meyerovich, and
M. C. Tschantz. Veriﬁcation and change-impact
analysis of access-control policies. In G.-C. Roman,
W. G. Griswold, and B. Nuseibeh, editors, ICSE,
pages 196–205. ACM, 2005.
[18] M. Gelfond and V. Lifschitz. The stable model
semantics for logic programming. In R. Kowalski and
K. Bowen, editors, Proc. 5th International Conference
and Symposium on Logic Programming, pages
1070–1080, Seattle, Washington, August 15-19 1988.
[19] R. Goldblatt. Logics of time and computation. Center
for the Study of Language and Information, Stanford,
CA, USA, 2nd edition, 1992.
[20] J. Y. Halpern and V. Weissman. Using ﬁrst-order logic
to reason about policies. ACM Trans. Inf. Syst.
Secur., 11(4), 2008.
[21] K. Irwin, T. Yu, and W. H. Winsborough. On the
modeling and analysis of obligations. In Proc. of ACM
CCS, pages 134–143, 2006.
[22] S. Jajodia, P. Samarati, M. L. Sapino, and V. S.
Subrahmanian. Flexible support for multiple access
control policies. ACM Trans. Database Syst.,
26(2):214–260, 2001.
[23] S. Jajodia, P. Samarati, and V. Subrahmanian. A
logical language for expressing authorizations. In Proc.
of the IEEE Symposium on S & P, pages 31–42, 1997.
[24] S. Jajodia, P. Samarati, V. Subrahmanian, and
E. Bertino. A uniﬁed framework for enforcing multiple
access control policies. In Proc. of the ACM SIGMOD
Conf., May 1997.
[25] R. Kowalski and M. Sergot. A logic-based calculus of
events. New Generation Computing, 4:67–95, 1986.
[26] P. Loscocco and S. Smalley. Integrating ﬂexible
support for security policies into the linux operating
system. In Proceedings of the FREENIX Track: 2001
USENIX Annual Technical Conference, pages 29–42,
Berkeley, CA, USA, 2001. USENIX Association.
[27] J. McCarthy. Elaboration tolerance. In Proc. Common
Sense 98, 1998.
[28] R. Miller and M. Shanahan. Some alternative
formulations of the event calculus. In A. C. Kakas and
F. Sadri, editors, Computational Logic: Logic
Programming and Beyond, volume 2408 of LNCS,
pages 452–490. Springer, 2002.
[29] C. Nomikos, P. Rondogiannis, and M. Gergatsoulis.
Temporal stratiﬁcation tests for linear and
branching-time deductive databases. Theor. Comput.
Sci., 342(2-3):382–415, 2005.
[30] OASIS XACML TC. extensible access control markup
language (XACML) v2.0, 2005.
[31] G. Rusello, C. Dong, and N. Dulay. Authorisation and
conﬂict resolution for hierarchical domains. In Proc. of
IEEE Policy Workshop, June 2007.
[32] R. Sandhu, V. Bhamidipati, and Q. Munawer. The
arbac97 model for role-based administration of roles.
ACM Trans. Inf. Syst. Secur., 2(1):105–135, 1999.
[33] R. Simon and M. E. Zurko. Separation of duty in
role-based environments. In CSFW, pages 183–194.
IEEE Computer Society, 1997.
[34] B. Van Nuﬀelen. Abductive constraint logic
programming: implementation and applications. PhD
thesis, K.U.Leuven, Belgium, June 2004.