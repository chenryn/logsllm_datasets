title:Precise and Accurate Patch Presence Test for Binaries
author:Hang Zhang and
Zhiyun Qian
Precise and Accurate Patch  
Presence Test for Binaries
Hang Zhang and Zhiyun Qian, University of California, Riverside
https://www.usenix.org/conference/usenixsecurity18/presentation/zhang-hang
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Precise and Accurate Patch Presence Test for Binaries
University of California, Riverside
University of California, Riverside
Hang Zhang
PI:EMAIL
Zhiyun Qian
PI:EMAIL
to battle
the main resort
Abstract
software
Patching is
vulnerabilities.
It is critical to ensure that patches are
propagated to all affected software timely, which,
unfortunately, is often not the case. Thus the capability
to accurately test the security patch presence in software
distributions is crucial, for both defenders and attackers.
Inspired by human analysts’ behaviors to inspect only
small and localized code areas, we present FIBER, an
automated system that leverages this observation in its
core design.
FIBER works by ﬁrst parsing and
analyzing the open-source security patches carefully
and then generating ﬁne-grained binary signatures that
faithfully reﬂect
the most representative syntax and
semantic changes introduced by the patch, which are
used to search against target binaries. Compared to
previous work, FIBER leverages the source-level insight
strategically by primarily focusing on small changes of
patches and minimal contexts,
instead of the whole
function or ﬁle. We have systematically evaluated
FIBER using 107 real-world security patches and 8
Android kernel
images from 3 different mainstream
vendors, the results show that FIBER can achieve an
average accuracy of 94% with no false positives.
1
Introduction
The number of newly found security vulnerabilities has
been increasing rapidly in recent years [3], posing
severe threats to various software and end users. The
main approach used to combat vulnerabilities
is
patching; however, it is challenging to ensure that a
security patch gets propagated to a large number of
affected software distributions,
in a timely manner,
especially for
large projects
that have multiple
concurrent development branches (i.e., upstream versus
downstream). This is due to the heavy code reuse in
modern software engineering practice [16, 23, 20].
Thus, the capability to test whether a certain security
patch is applied to a software distribution is crucial, for
both defenders and attackers.
e.g.,
“whether
To better facilitate the discussion of the paper, we
differentiate the goal and scope of patch presence test
from those of the more general bug search.
Patch
presence test, as its name suggests, checks whether a
speciﬁc patch has been applied to an unknown target,
assuming the knowledge of the affected function(s) and
the patch itself,
the heartbleed
vulnerability of an openssl library has been patched in
the tls1 process heartbeat() function”.
Bug
search, on the other hand, does not make assumptions
on which of the target functions are affected and simply
look for all functions or code snippets that are similar to
the vulnerable one, e.g., “which of the functions in a
software distribution looks like a vulnerable version of
tls1 process heartbeat().” Our study focuses on
the more speciﬁc problem of patch presence test, which
aims to offer a precise and accurate answer. With this in
mind, both lines of work have been studied in the
following contexts:
Source to source. This type of work operates purely
on source code level. Source code is required for both the
reference and target. In recent studies, it is also typically
assumed that patches about speciﬁc bugs are available.
Binary to binary. These work do not need any source
code. Both the reference and target are in binary, thus
all comparisons are based on binary-level features only.
It does not assume the availability of patch information
(about which binary instructions are related to a patch).
In this paper, we consider a new category of “source
to binary”, which is a middle ground between the
above two, based on the following observations. First,
open source has become a trend in computer world
nowadays with an exploding number of software open
sourced with full history of commits and patches (e.g.,
hosted on github) [4]. In fact, most of the binary-only
bug search studies include software such as Linux and
USENIX Association
27th USENIX Security Symposium    887
code or
Second, many open-source
openssl.
components
are widely reused in closed-source
software, e.g., libraries and Linux-based kernels in IoT
ﬁrmware [13, 26]. This is a critical change that allows
us to leverage the source-level insight that can inform
the binary patch presence test.
the
[30],
closely
Unfortunately,
related work
similarity-based approaches
on
binary-only bug search misses an important link in order
to be twisted to perform accurate patch presence test.
Due to its extremely large scope, they are forced to use
similarity-based fuzzy matching (inherently inaccurate)
to speed up the search process,
instead of the more
expensive yet more accurate approaches. As a result,
most of the existing solutions usually take the whole
functions for comparison [26, 27, 13, 31]. However,
since security patches are mostly small and subtle
changes
cannot
effectively distinguish patched and un-patched versions.
In this paper, we propose FIBER, a complementary
system that completes the missing link and takes the
similarity-based bug search to the next level where we
can perform precise and accurate patch presence test.
Fundamentally,
following
technical problem:
“how do we generate binary
signatures that well represent the source-level patch”?
We address this problem in two steps: First, inspired by
typical human analyst’s behaviors, we will pick and
choose the most suitable parts of a patch as candidates
for binary signature generation. Second, we generate the
binary signatures that preserve as much source-level
information as possible,
including the patch and the
corresponding function as a whole.
FIBER addresses
the
We summarize our contributions as follows:
(1) We formulate the problem of patch presence test
under “source to binary”, bridging the gap from the
general bug search to precise and accurate patch
presence test. We then describe FIBER — an automatic,
precise, and accurate system overcoming challenges
such as information loss in the binaries. FIBER is open
sourced1.
(2) We design FIBER inspired by human behaviors,
which picks and chooses the most suitable parts of a
patch to generate binary signatures representative of the
source-level patch. Besides, the test results can also be
easily reasoned about by humans.
(3) We systematically evaluate FIBER with 107 real
word vulnerabilities and security patches on a diverse set
of Android kernel images 2 with different timestamps,
versions and vendors, the results show that FIBER can
achieve high accuracy in security patch presence test. We
1https://ﬁberx.github.io/
2Although Android follows open-source license, many Android
device vendors still do not publish their source code or only do that
periodically (with signiﬁcant delays) for certain major releases.
discover real-world cases where critical security patches
fail to propagate to the downstreams.
2 Related Work
In this section, we discuss the related work primarily un-
der bug search and how they are currently applied to the
patch presence test problem. We divide them as source-
level and binary-level.
Source-level bug search. Many studies focused on
ﬁnding code clones both inside a single software
distribution and across distributions [18, 22, 17, 16, 20].
The general goal is to ﬁnd code snippets similar to a
given buggy one — a more general goal that can be
twisted to also conduct patch presence test. Since bug
search typically does not limit the search scope to only a
single function, it needs to face potentially millions of
lines of code in large software [16]. Due to the
scalability concern, bug search solutions are typically
framed as some form of similarity matching using
features extracted from the source code, including plain
string [8], tokens [18, 22, 16, 20], and parse trees [17].
Unfortunately,
this makes it challenging to ascertain
whether the identiﬁed similar code snippets have been
patched;
this is because the patched and un-patched
versions can be similar (especially for security patches
that are often small) [16].
such
features
structure
vulnerable
function, Genius
[31] are essentially looking for
Binary-level bug search. Similar to the source-level
work, binary-level approaches follow a similar principle
of ﬁnding similar code snippets.
To overcome the
challenge of lack of source-level
information, e.g.,
variable type and name, these solutions need to look for
alternative
the
code [19, 13, 31]. Since the “binary to binary” bug
search does not assume the availability of symbol tables,
they are forced to check out every single function in the
target even if it only intends to conduct an accurate
patch presence test on a speciﬁc function. For example,
[13]
given
and
Gemini
the same
affected function(s)
in the complete collection of
functions in a target binary. Due to the scalability
concern again,
are
engineered for speed instead of accuracy. BinDiff [2]
and BinSlayer
[9] check the control ﬂow graph
similarity based on isomorphism. As more advanced
solutions, Genius [13] and Gemini [31] extract feature
representations from the control ﬂow graphs and
encodes them into graph embeddings (high dimensional
numerical vectors), which can speed up the matching
process signiﬁcantly. Unfortunately, under the huge
search space, more accurate semantics-based solutions
are not believed to be scalable [13, 31]. For instance,
Pewny et al. [26] computes I/O pairs of basic blocks to
and solutions
features
these
a
as
of
888    27th USENIX Security Symposium
USENIX Association
function.
match similar basic blocks
BinHunt [14] and iBinHunt [24] use symbolic execution
and theorem provers to formally verify basic block level
semantic equivalence.
in a target
FIBER is in a unique position that
leverages the
source-level
information to answer a more speciﬁc
question — whether the speciﬁc affected function is
patched in the target binary.
To our knowledge,
Pewny et al.’s work [26] is the only one that claims
source-level patch information can be leveraged to
generate more ﬁne-grained signatures for bug search
(although no implementation and evaluation). However,
its goal is still focused on bug search instead of patch
presence test, which means that it still attempts to search
for similar (un-)patched code snippets (in binary) in the
entire target, making it too fuzzy to answer the problem
of patch presence test.
Finally, binary-level bug search has been extended to
be cross-architecture [27, 26, 13, 31]. FIBER naturally
supports different architectures with the assumption that
source code is available, allowing us to generate different
signatures for different compiled binaries.
3 Overview
In this section, we ﬁrst walk through a motivating
example to summarize FIBER’s general intuition, then
position FIBER in a larger picture.
A motivating example. We pick the security patch for
CVE-2015-8955,
to
intuitively demonstrate a typical workﬂow of patch
presence test which FIBER closely emulates. The patch
is shown in Fig 1.3 To test whether this patch exists in
the target binary, naturally we will follow the steps
below:
a Linux kernel vulnerability,
Step 1: Pick a change site (i.e., sequence of changed
statements). At ﬁrst glance, we can see that the patch
introduces multiple change sites. However, not all of
them are ideal for the patch presence test purpose. Line
1-5 adds a new parameter “pmu” for original function,
which will be used by the added “if” statement at line
11. Another change is to move the assignment of
“armpmu” from line 7 to line 17. The “to arm pmu()”
used by the assignment is a small utility macro, which
will result
in few instructions without changing the
control ﬂow graph (CFG), making it difﬁcult to be
located at binary level. However,
the added “if”
statement at line 11 will introduce a structural change to
the CFG, besides, it also has a unique semantic as it
involves the newly added function parameter. Therefore,
3For simplicity, we include only one of the two changed functions
in the patch and removed comments and context lines. The full patch
can be found in [6].
struct perf_event *event)
 return 0;
 return 1;
*hw_events, struct perf_event *event)
 struct pmu *leader_pmu = event->group_leader->pmu;
 struct arm_pmu *armpmu = to_arm_pmu(event->pmu);
01   static int
02 - validate_event(struct pmu_hw_events *hw_events,
03 - 
04 + validate_event(struct pmu *pmu, struct pmu_hw_events 
05 +
06   {
07 -
08 +  struct arm_pmu *armpmu;
09 
10 ...
11 +  if (event->pmu != pmu)
12 +
13
14 
15
16 ...
17 +  armpmu = to_arm_pmu(event->pmu);
18 ...
19   }
 if (event->pmu != leader_pmu || event->state pmu
(cid:198)(cid:3) pmu
(cid:198) event->group_leader
->pmu
Figure 1: Patch of CVE-2015-8955
it is natural to consider line 11 a more suitable indicator
of patch presence.
Step 2: Rough matching. Now we have decided to
search in the target binary function for the existence of
line 11 in Fig 1, typically we will start from matching
the CFG structure since it is easy and fast. This step can
be similarly carried out in the source code level also.
Speciﬁcally, one condition in the “if” statement will
generally lead to a basic block with two successors,
Thus for line 11, we will ﬁrst try to locate those basic
blocks with out-degrees of 2. Besides, one successor of
the basic block should be the function epilogue since at
line 12 the function will return if passing the checks at
line 11.
In Fig 1 we also show a part of the CFG
generated from a patched Android kernel image, we can
see that both the bolded basic block and the basic block
right of it satisfy this requirement.
Step 3: Precise matching. Out of the two candidate
basic blocks in the target binary, we now should need
some semantic information to further distinguish them.
Ideally, if we have the source level information such as
variable names, a human can typically make a decision
already (assuming the target function does not change
variable names). With limited information at the binary
level, we need to map the binary instructions to
source-level statements somehow. This is usually a
time-consuming process for human analysts, since they
typically need to understand which register or memory
location corresponds to which source-level variable.
USENIX Association
27th USENIX Security Symposium    889
(1)
It has four primary inputs:
Following the same example in Fig 14, an analyst needs
to inspect the registers used in the “cmp” instruction of
candidate blocks. Speciﬁcally, by tracking the register’s
origin (listed at the bottom of Fig 1), we can ﬁnally tell
the differences of
the two “cmp” instructions and
correctly decide that the bolded basic block is the one
that maps back to line 11.
System architecture.
Fig 2 illustrates the system
architecture, which is abstracted from human analysts’
procedure.
the
source-level patch information; (2) the complete source
code of a reference; (3) the affected function(s) in the
compiled reference binary; (4) the affected functions in