that the former uses the honestly generated public key but
the latter uses a lossy key. We can create a polynomial time
algorithm D such that the statements hold. On receiving
(N, e) which is either an injective or a lossy key, D plays
the security game interacting with A. Since the Dec oracle
was modiﬁed so that it does not need the secret key, D can
answer all Dec queries. Finally, D outputs the same bit
as A. If the key is injective, A is in Game4, otherwise, in
Game5. Thus, | Pr[S5] − Pr[S4]| ≤ AdvΦA
2
c,θ,A.
LR · CRΦ.
Lemma 7. |Pr[S5] − Pr[S4]| ≤ Pr[AskG5] + q2
Proof. Let Coll be the event that, for the set of func-
tions {φ1, φ2,··· , φqLR} queried by A, there is at least one
collision φi(r∗) = φj(r∗) where φi (cid:54)= φj.
We claim that Pr[S5|¬(Coll ∨ AskG5)] = Pr[S4|¬(Coll ∨
AskG5)]. Because if φ1(r∗), φ2(r∗),··· , φqLR (r∗) are all dis-
tinct (unless φi = φj), and they are not queried to the G
oracle, then G(φi(r∗)) and g+
i are distributed identically.
From the well-known diﬀerence lemma, we get
We claim that Pr[Coll] ≤ q2
|Pr[S5] − Pr[S4]| ≤ Pr[Coll ∨ AskG5] ≤ Pr[Coll] + Pr[AskG5].
LR · CRΦ. For ﬁxed φi, φj ∈ Φ,
the probability that φi(r∗) = φj(r∗) for a uniformly random
r∗ is at most CRΦ. Summing up for all pairs (φi, φj), we get
LR · CRΦ. This completes
Pr[Coll] ≤ qLR(qLR−1)
the proof.
· CRΦ ≤ q2
2
2
Lemma 8. The following equations hold.
|Pr[S6] − Pr[S5]| ≤ Pr[AskH6].
|Pr[AskG6] − Pr[AskG5]| ≤ Pr[AskH6].
Proof. The two games Game5 and Game6 are the same
whenever OH
5 ∩ OLR,H
5
= OH
6 ∩ OLR,H
6
= ∅. Thus, we get
Pr[S6|¬AskH6] = Pr[S5|¬AskH5] and
Pr[AskG6|¬AskH6] = Pr[AskG5|¬AskH5].
We complete the proof by using the diﬀerence lemma.
2
HTC
Φ,Ψ,A.
Lemma 9. Pr[AskG6] ≤ qG · Adv
Proof. We will show that if there is an adversary A
which can cause the event AskG6 with probability , then we
can create a reduction algorithm B that can break the adap-
tively hard-to-compute property of Φ with success proba-
bility /qG. B plays the role of Game6 without knowing
the randomness r∗. B can answer all Enc queries since B
has access to the Get oracle, which returns ψ(r∗). (Note
that, in Game6, r∗ is not required to respond to LR oracle
queries.) Finally, B outputs x ←$ OG
6 . By assumption, the
event OG
(cid:54)= ∅ occurs with probability . Thus, the
probability that x ∈ OLR,G
occurs, which is equivalent to
2
Adv
HTC
Φ,Ψ,A, is at least /qG. This completes the proof.
6 ∩ OLR,G
6
6
Lemma 5. Pr[S3] = Pr[S2].
Proof. The two games are the same from the adversary’s
2
point of view.
5Note that the Dec oracle can test whether values r and s
correspond to a ciphertext c by setting t ← r ⊕ H(s) and
checking whether c = (s||t)e mod N .
Lemma 10. The following equations hold.
| Pr[S7] − Pr[S6]| ≤ qLR · ( + 2
| Pr[AskH7] − Pr[AskH6]| ≤ qLR · ( + 2
−k/2+2).
−k/2+2).
Proof. Game7 is identical to Game6 except that the chal-
lenge ciphertexts yi = (si||ti)e is replaced with xe where
248x ← Z∗
N is a uniformly random element. In Game6, we can
regard the plaintext (si||ti) as a sample from an arithmetic
progression with length 2k0 since ti is uniformly distributed.
More speciﬁcally, for i ∈ {1,··· , qLR}, let Ysi be a set of the
arithmetic progression Ysi = {(si||ti) : ti ← {0, 1}k0}. From
Lemmas 11 and 12 stated in the following, we have
−k/2+2,
SD(ye mod N, ze mod N ) ≤  + 2
where y ←$ Ysi and z ←$ ZN . Summing up for all LR
queries, we can conclude that | Pr[S7] − Pr[S6]| ≤ qLR · ( +
2−k/2+2) and | Pr[AskH7]− Pr[AskH6]| ≤ qLR · ( + 2−k/2+2).
2
The following two lemmas completes the proof of Lemma
8. The latter lemma (Lemma 12) was originally stated by
Smith and Zhang in [40, Theorem 8].6
z ←$ Z∗
N .
Lemma 11. SD(x, x(cid:48)) ≤ 2−k/2+2, where x ←$ ZN and
Proof. Since |Z∗
N| = φ(N ) = N −p−q +1, there must be
at least 2k−1 − p − q ≥ 2k−1 − 2k/2+1 elements of Z∗
N which
are less than 2k−1 (recall that p and q are k/2-bit primes).
Thus, the statistical distance between the two distributions
is at most 2k/2+1/2k−1 = 2−k/2+2.
2
Lemma 12. Let (N, e) ← RSAloss
c,θ (λ), where 3θ ≤ k for
the modulus length k. Let PK = {σi+τ : i = 0, 1,··· , K−1},
where σ, n are co-prime. Assume that log K ≥ log N−log e+
2 log 1
 + 4 and θ ≥ 4 + log 1
 for some 0  p and p = 1 mod e are satisﬁed. The con-
dition K > q is also satisﬁed from the following inequality:
log K ≥ log N − log e + 2 log
+ 4 ≥ log q.
1

Therefore, all conditions in Lemma 2 are satisﬁed. We will
show that each of the four terms is less than 
4 . We will use
(A) and (B) to denote the conditions log K ≥ log N −log e+
2 log 1
 , respectively.
log
3q
K
 + 4 and θ ≥ 4 + log 1
(cid:18)
(cid:18)
= log 3 + log q − log K
≤ log 3 + log q −
≤ log 3 + log q −
(cid:19)
1

+ 4

4
.
(cid:19)
log N − log e + 2 log
log q + log
1

+ 4
= log
= 1 + log p − log(q − 1) ≤ 1 + log p − log q
1

= log
4 + log
= 1 − θ ≤ 2 −
= 1 − log(p − 1) ≤ 1 − log p = 1 − k − θ
≤ 1 − θ = 1 −
4 + log
= log

4
2
.

4
.
(cid:19)
(cid:19)
1

(cid:18)
(cid:18)
log
2p
q − 1
log
2
p − 1
(cid:114)
log
N
eK
=
1
2
(log N − log e − log K) ≤ log  − 2 = log

4
.
6The details of the proof is not given in [40]. We prove the
lemma under the additional condition 3θ ≤ k.
This completes the proof.
2
Lemma 13. Pr[S7] = 1
2 .
Proof. We observe that the input to the adversary fol-
lows a distribution that does not depend on the bit b. Ac-
cordingly, Pr[S7] = 1
2
2 .
s-pd-ow
c,qH ,A.
Lemma 14. Pr[AskH7] ≤ qLR · Adv
Proof. Let f be the RSA function f (x) = xe mod n.
Given y = f (s||t) for random (s||t)
n, the reduction
algorithm B plays the role of Game7 interacting with A.
At the beginning of the game, B randomly chooses i ∈
{1,··· , qLR}. For the i-th LR query, it returns y as the
response of the oracle. Finally, B simply outputs all ele-
ments in the OH
6 . The probability that B breaks the qH -set
partial-domain one-wayness is greater than 1
Pr[AskH7].
qLR
2
$←− Z∗
The above Lemmas yield Theorem 1.
6. RELATED RANDOMNESS SECURITY OF
RSA-PSS SIGNATURES
We will now turn our attention to the RSA-PSS signature
scheme. Firstly, we consider related randomness security for
any function family Φ. As already highlighted in the intro-
duction, the original proof [9] will no longer work in this
case, as the randomness used when signing is no longer un-
predictable to the adversary. Furthermore, as an adversary
is allowed to used constant functions, which will essentially
make the signature scheme deterministic, the impossibility
results by Coron [16] implies that a reduction with a secu-
rity loss less than qs is not achievable. However, we show
a reduction that essentially meets this bound. The proof of
the following lemma builds upon the techniques from [15]
used to analyze the FDH signature scheme.
Theorem 2. Assume the RSA problem is hard with re-
spect to RSAGen. Then the PSS signature scheme is Φ-UF-
RR-CMA secure for any function family Φ in the random
oracle model. Speciﬁcally, for any polynomial time adver-
sary A against PSS, there exist a polynomial time algorithm
B such that
Adv
UF-RR-CMA
PSS,A
(λ) ≈
e · qs · Adv
RSA
RSAGen,B(λ) + (qs + qh) · 2
−k/2+2
+ e · ·qs · (qs + qh) · (
1
2
+ 2
−k/2+2)k0
−k1 + 2
+ e · ·qs · (qs + qh)2 · (2
−k/2+2)
for large values of qs, where qs and qh denotes the number
of sign and hash queries made by A, respectively, and e is
the base of the natural logarithm.
Proof. Given an adversary A that succeeds in breaking
the UF-RR-CMA security of PSS with probability (cid:48), we
construct an algorithm S that solves the RSA problem with
respect to RSAGen with probability  as given in the theorem.
S is constructed as follows:
Firstly, S receives as input values (N, e) and a challenge
y; the goal of S is to compute x such that y = xe mod N .
S sets pk ← (N, e), picks randomness r∗ ←$ {0, 1}k0 , and
runs A with input pk. While A is running, S will respond to
249Sign, H, and G oracle queries as described below. Without
loss of generality, we assume that A never repeats an oracle
query. We will furthermore use the subscript i to denote the
values submitted or computed in the i-th query.
H queries On input mi||ri, if there exists j < i such that
mi||ri = mj||rj, S returns the previous oracle answer
hj. Otherwise, S picks a random xi ←$ Z∗
N . Then,
with probability p (where p will be determined later),
S proceeds as follows: S computes yi ← y(xi)e and
parses yi as b||wi||r(cid:48)
i||γi. If b (cid:54)= 0, S will sample a new
yi (by picking a new xi) until a yi value with b = 0 is
obtained. To ensure that S remains a polynomial time
algorithm, S will abort if a suitable yi value is not
obtained after k0 trials. Then, for the obtained yi =
0||wi||r(cid:48)
i||γi, if there exists a j < i such that wi = wj,
S aborts. Finally, S sets hi ← wi and gi ← (r(cid:48)
i⊕ri)||γi
(this will set G(wi) = gi), and returns hi. We will refer
to queries handled in this way as type I queries.
On the other hand, with probability 1 − p, S pro-
ceeds as follows: S computes yi ← xe
i and parses yi as
b||wi||r(cid:48)
i||γi. As above, if b (cid:54)= 0, S picks a new yi until
this is the case (but aborts after k0 trials), and fur-
thermore aborts if wi = wj for a j < i for the obtained
yi value. Finally S sets hi ← wi and gi ← (r(cid:48)
i ⊕ ri)||γi
(this will set G(wi) = gi), and returns hi. We refer to
queries handled in this way as a type II queries.
G queries On input wi, if there exists j < i such that wi =
wj, S returns the corresponding gj value. Otherwise,
S picks random gi ←$ {0, 1}k−k1−1, and returns gi.
j = 0||wj||r(cid:48)
Sign queries On input (mi, φi), S ﬁrst computes ri ←
φi(r∗), and makes the query H(mi||ri) if A has not
already done so. Let the H query corresponding to
mi||ri be the j-th query. If this is a type I query, S
aborts. Otherwise, S simply returns σ ← xj. Note
that due to the way S responds to H type II queries,
σ is a valid signature on mi using randomness φi(r∗).
j||γj where φi(r∗) =
Speciﬁcally, σe = xe
j ⊕ G1(wj), H(mi||φi(r∗)) = wj, and G2(wj) = γj.
r(cid:48)
Assume that S does not abort and that A produces a
valid forgery σ∗ on a message m∗. Let (σ∗)e = 0||w∗||r(cid:48)||γ∗
(note that the most signiﬁcant bit must be 0 for the forgery
to be valid) and let r∗ ← r(cid:48) ⊕ G1(w∗). Without loss of