    from flask import Flask, escape, request, make_response, render_template
    from session import *
    from utils import *
    from flag import FLAG
    from parser import parse
    app = Flask(__name__)
    @app.route('/')
    def index():
        user = request.cookies.get('user', '')
        try:
            username = session_decode(user)
        except Exception:
            username = get_username()
            content = escape(username)
        else:
            if username == 'admin':
                content = escape(FLAG)
            else:
                content = escape(username)
        resp = make_response(render_template('main.html', content=content))
        return resp
    @app.route('/sandbox')
    def render_static():
        if not check_token(request.args.get('token')):
            resp = make_response('invalid request')
        else:
            url = request.args.get('url')
            try:
                if url is None or url == '':
                    content = 'no url input'
                else:
                    content = parse(url)
                resp = make_response(content)
            except Exception:
                resp = make_response('url error')
            resp.mimetype = 'text/plain'
            return resp
    app.run(port=5000)
session.py
    # uncompyle6 version 3.2.3
    # Python bytecode 3.7 (3394)
    # Decompiled from: Python 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:30:26) [MSC v.1500 64 bit (AMD64)]
    # Embedded file name: session.py
    # Size of source mod 2**32: 718 bytes
    import base64
    from hash import MDA
    from flag import seed
    def encode(info):
        return str(base64.b32encode(bytes(info, 'utf-8')), 'utf-8')
    def decode(info):
        return str(base64.b32decode(bytes(info, 'utf-8')), 'utf-8')
    def hash_encode(info):
        md = MDA('seed')
        return md.grouping(info)
    def hash_verify(hash_info, info):
        return hash_encode(info) == hash_info
    def session_encode(info):
        return '%s.%s' % (encode(info), hash_encode(info))
    def session_decode(info):
        info_list = str.split(info, '.')
        if len(info_list) != 2:
            raise Exception('error info')
        info_ = decode(info_list[0])
        if not hash_verify(info_list[1], info_):
            raise Exception('hash wrong')
        return info_
    print(session_encode('admin'))
hash.py
    # uncompyle6 version 3.2.4
    # Python bytecode 3.7 (3394)
    # Decompiled from: Python 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:30:26) [MSC v.1500 64 bit (AMD64)]
    # Embedded file name: hash.py
    # Size of source mod 2**32: 4512 bytes
    __metaclass__ = type
    import random, struct
    def _bytelist2long(list):
        imax = len(list) // 4
        hl = [0] * imax
        j = 0
        i = 0
        while i > 32 - n
    def F(x, y, z):
        return x & y | ~x & z
    def G(x, y, z):
        return x & z | y & ~z
    def H(x, y, z):
        return x ^ y ^ z
    def I(x, y, z):
        return y ^ (x | ~z)
    def XX(func, a, b, c, d, x, s, ac):
        res = 0
        res = res + a + func(b, c, d)
        res = res + x
        res = res + ac
        res = res & 65535
        res = _rotateLeft(res, s)
        res = res & 65535
        res = res + b
        return res & 65535
    class MDA:
        def __init__(self, seed='lctf2018'):
            self.seed = seed
            self.init()
        def init(self):
            self.length = 0
            self.count = [0, 0]
            self.input = []
            random.seed(self.seed)
            self.A = random.randint(3326, 27529)
            self.B = random.randint(3326, 27529)
            self.C = random.randint(3326, 27529)
            self.D = random.randint(3326, 27529)
        def _transform(self, inp):
            a, b, c, d = A, B, C, D = (
             self.A, self.B, self.C, self.D)
            S11, S12, S13, S14 = (7, 12, 17, 22)
            a = XX(F, a, b, c, d, inp[0], S11, 42104)
            d = XX(F, d, a, b, c, inp[1], S12, 46934)
            c = XX(F, c, d, a, b, inp[2], S13, 28891)
            b = XX(F, b, c, d, a, inp[3], S14, 52974)
            S21, S22, S23, S24 = (5, 9, 14, 20)
            a = XX(G, a, b, c, d, inp[1], S21, 9570)
            b = XX(G, b, c, d, a, inp[0], S24, 51114)
            c = XX(G, c, d, a, b, inp[3], S23, 3463)
            d = XX(G, d, a, b, c, inp[2], S22, 41976)
            S31, S32, S33, S34 = (4, 11, 16, 23)
            a = XX(H, a, b, c, d, inp[1], S31, 59972)
            d = XX(H, d, a, b, c, inp[0], S32, 10234)
            c = XX(H, c, d, a, b, inp[3], S33, 12421)
            b = XX(H, b, c, d, a, inp[2], S34, 22117)
            S41, S42, S43, S44 = (6, 10, 15, 21)
            a = XX(I, a, b, c, d, inp[0], S41, 8772)
            d = XX(I, d, a, b, c, inp[3], S42, 52370)
            b = XX(I, b, c, d, a, inp[1], S44, 24017)
            c = XX(I, c, d, a, b, inp[2], S43, 53947)
            A = A + a & 32767
            B = B + b & 32767
            C = C + c & 32767
            D = D + d & 32767
            self.A, self.B, self.C, self.D = (
             A, B, C, D)
        def update(self, inBuf):
            leninBuf = len(inBuf)
            index = self.count[0] >> 3 & 15
            self.count[0] = self.count[0] + (leninBuf > 29)
            partLen = 16 - index
            if leninBuf >= partLen:
                self.input[index:] = list(inBuf[:partLen])
                self._transform(_bytelist2long(self.input))
                i = partLen
                while i + 15 > 3 & 15
            if index < 8:
                padLen = 8 - index
            else:
                padLen = 24 - index
            padding = [''] + ['\x00'] * 15
            self.update(padding[:padLen])
            bits = _bytelist2long(self.input[:8]) + count
            self._transform(bits)
            digest = struct.pack('<hhhh', self.A, self.B, self.C, self.D)
            self.A = A
            self.B = B
            self.C = C
            self.D = D
            self.input = input
            self.count = count
            return digest
        def hexdigest(self):
            return ''.join(['%02x' % ord(chr(c)) for c in self.digest()])
        def grouping(self, inBufGroup):
            hexdigest_group = ''
            for inBuf in inBufGroup:
                self.insert(inBuf)
                hexdigest_group += self.hexdigest()
            return hexdigest_group
util.py
    # uncompyle6 version 3.2.3
    # Python bytecode 3.7 (3394)
    # Decompiled from: Python 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:30:26) [MSC v.1500 64 bit (AMD64)]
    # Embedded file name: utils.py
    # Size of source mod 2**32: 1470 bytes
    import random, string, base64, datetime
    from Crypto.Cipher import AES
    from Crypto.Util.Padding import unpad