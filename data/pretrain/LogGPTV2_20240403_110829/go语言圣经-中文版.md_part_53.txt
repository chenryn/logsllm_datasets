notifyUser = func(user, msg string) {
notifiedUser, notifiedMsg = user, msg
}
// ...simulate a 980MB-used condition...
const user = "PI:EMAIL"
CheckQuota(user)
if notifiedUser == "" && notifiedMsg == "" {
t.Fatalf("notifyUser not called")
}
if notifiedUser != user {
t.Errorf("wrong user (%s) notified, want %s",
notifiedUser, user)
}
const wantSubstring = "98% of your quota"
if !strings.Contains(notifiedMsg, wantSubstring) {
t.Errorf("unexpected notification message >, "+
"want substring %q", notifiedMsg, wantSubstring)
}
}
这里有一个问题：当测试函数返回后，CheckQuota将不能正常工作，因为notifyUsers依然使
用的是测试函数的伪发送邮件函数（当更新全局对象的时候总会有这种风险）。 我们必须修
改测试代码恢复notifyUsers原先的状态以便后续其他的测试没有影响，要确保所有的执行路
径后都能恢复，包括测试失败或panic异常的情形。在这种情况下，我们建议使用defer语句来
延后执行处理恢复的代码。
func TestCheckQuotaNotifiesUser(t *testing.T) {
// Save and restore original notifyUser.
saved := notifyUser
defer func() { notifyUser = saved }()
// Install the test's fake notifyUser.
var notifiedUser, notifiedMsg string
notifyUser = func(user, msg string) {
notifiedUser, notifiedMsg = user, msg
}
// ...rest of test...
}
测试函数 408
gopl
这种处理模式可以用来暂时保存和恢复所有的全局变量，包括命令行标志参数、调试选项和
优化参数；安装和移除导致生产代码产生一些调试信息的钩子函数；还有有些诱导生产代码
进入某些重要状态的改变，比如超时、错误，甚至是一些刻意制造的并发行为等因素。
以这种方式使用全局变量是安全的，因为go test命令并不会同时并发地执行多个测试。
11.2.4. 外部测试包
考虑下这两个包：net/url包，提供了URL解析的功能；net/http包，提供了web服务和HTTP客
户端的功能。如我们所料，上层的net/http包依赖下层的net/url包。然后，net/url包中的一个测
试是演示不同URL和HTTP客户端的交互行为。也就是说，一个下层包的测试代码导入了上层
的包。
这样的行为在net/url包的测试代码中会导致包的循环依赖，正如图11.1中向上箭头所示，同时
正如我们在10.1节所讲的，Go语言规范是禁止包的循环依赖的。
不过我们可以通过外部测试包的方式解决循环依赖的问题，也就是在net/url包所在的目录声明
一个独立的url_test测试包。其中包名的 后缀告诉go test工具它应该建立一个额外的包
_test
来运行测试。我们将这个外部测试包的导入路径视作是net/url_test会更容易理解，但实际上
它并不能被其他任何包导入。
因为外部测试包是一个独立的包，所以能够导入那些 依赖待测代码本身 的其他辅助包；包内的测
试代码就无法做到这点。在设计层面，外部测试包是在所有它依赖的包的上层，正如图11.2所
示。
通过避免循环的导入依赖，外部测试包可以更灵活地编写测试，特别是集成测试（需要测试
多个组件之间的交互），可以像普通应用程序那样自由地导入其他包。
测试函数 409
gopl
我们可以用go list命令查看包对应目录中哪些Go源文件是产品代码，哪些是包内测试，还有
哪些是外部测试包。我们以fmt包作为一个例子：GoFiles表示产品代码对应的Go源文件列
表；也就是go build命令要编译的部分。
$ go list -f={{.GoFiles}} fmt
[doc.go format.go print.go scan.go]
TestGoFiles表示的是fmt包内部测试代码，以_test.go为后缀文件名，不过只在测试时被构
建：
$ go list -f={{.TestGoFiles}} fmt
[export_test.go]
包的测试代码通常都在这些文件中，不过fmt包并非如此；稍后我们再解释export_test.go文件
的作用。
XTestGoFiles表示的是属于外部测试包的测试代码，也就是fmt_test包，因此它们必须先导入
fmt包。同样，这些文件也只是在测试时被构建运行：
$ go list -f={{.XTestGoFiles}} fmt
[fmt_test.go scan_test.go stringer_test.go]
有时候外部测试包也需要访问被测试包内部的代码，例如在一个为了避免循环导入而被独立
到外部测试包的白盒测试。在这种情况下，我们可以通过一些技巧解决：我们在包内的一个
_test.go文件中导出一个内部的实现给外部测试包。因为这些代码只有在测试时才需要，因此
一般会放在export_test.go文件中。
例如，fmt包的fmt.Scanf函数需要unicode.IsSpace函数提供的功能。但是为了避免太多的依
赖，fmt包并没有导入包含巨大表格数据的unicode包；相反fmt包有一个叫isSpace内部的简易
实现。
为了确保fmt.isSpace和unicode.IsSpace函数的行为保持一致，fmt包谨慎地包含了一个测
试。是一个在外部测试包内的白盒测试，是无法直接访问到isSpace内部函数的，因此fmt通
过一个后门导出了isSpace函数。export_test.go文件就是专门用于外部测试包的后门。
package fmt
var IsSpace = isSpace
这个测试文件并没有定义测试代码；它只是通过fmt.IsSpace简单导出了内部的isSpace函数，
提供给外部测试包使用。这个技巧可以广泛用于位于外部测试包的白盒测试。
测试函数 410
gopl
11.2.5. 编写有效的测试
许多Go语言新人会惊异于Go语言极简的测试框架。很多其它语言的测试框架都提供了识别测
试函数的机制（通常使用反射或元数据），通过设置一些“setup”和“teardown”的钩子函数来执
行测试用例运行的初始化和之后的清理操作，同时测试工具箱还提供了很多类似assert断言、
值比较函数、格式化输出错误信息和停止一个失败的测试等辅助函数（通常使用异常机
制）。虽然这些机制可以使得测试非常简洁，但是测试输出的日志却会像火星文一般难以理
解。此外，虽然测试最终也会输出PASS或FAIL的报告，但是它们提供的信息格式却非常不利
于代码维护者快速定位问题，因为失败信息的具体含义非常隐晦，比如“assert: 0 == 1”或成页
的海量跟踪日志。
Go语言的测试风格则形成鲜明对比。它期望测试者自己完成大部分的工作，定义函数避免重
复，就像普通编程那样。编写测试并不是一个机械的填空过程；一个测试也有自己的接口，
尽管它的维护者也是测试仅有的一个用户。一个好的测试不应该引发其他无关的错误信息，
它只要清晰简洁地描述问题的症状即可，有时候可能还需要一些上下文信息。在理想情况
下，维护者可以在不看代码的情况下就能根据错误信息定位错误产生的原因。一个好的测试
不应该在遇到一点小错误时就立刻退出测试，它应该尝试报告更多的相关的错误信息，因为
我们可能从多个失败测试的模式中发现错误产生的规律。
下面的断言函数比较两个值，然后生成一个通用的错误信息，并停止程序。它很好用也确实
有效，但是当测试失败的时候，打印的错误信息却几乎是没有价值的。它并没有为快速解决
问题提供一个很好的入口。
import (
"fmt"
"strings"
"testing"
)
// A poor assertion function.
func assertEqual(x, y int) {
if x != y {
panic(fmt.Sprintf("%d != %d", x, y))
}
}
func TestSplit(t *testing.T) {
words := strings.Split("a:b:c", ":")
assertEqual(len(words), 3)
// ...
}
从这个意义上说，断言函数犯了过早抽象的错误：仅仅测试两个整数是否相同，而没能根据
上下文提供更有意义的错误信息。我们可以根据具体的错误打印一个更有价值的错误信息，
就像下面例子那样。只有在测试中出现重复模式是才采用抽象。
测试函数 411
gopl
func TestSplit(t *testing.T) {
s, sep := "a:b:c", ":"
words := strings.Split(s, sep)
if got, want := len(words), 3; got != want {
t.Errorf("Split(%q, %q) returned %d words, want %d",
s, sep, got, want)
}
// ...
}
现在的测试不仅报告了调用的具体函数、它的输入和结果的意义；并且打印的真实返回的值
和期望返回的值；并且即使断言失败依然会继续尝试运行更多的测试。一旦我们写了这样结
构的测试，下一步自然不是用更多的if语句来扩展测试用例，我们可以用像IsPalindrome的表
驱动测试那样来准备更多的s和sep测试用例。
前面的例子并不需要额外的辅助函数，如果有可以使测试代码更简单的方法我们也乐意接
受。（我们将在13.3节看到一个类似reflect.DeepEqual辅助函数。）一个好的测试的关键是首
先实现你期望的具体行为，然后才是考虑简化测试代码、避免重复。如果直接从抽象、通用
的测试库着手，很难取得良好结果。
练习11.5: 用表格驱动的技术扩展TestSplit测试，并打印期望的输出结果。
11.2.6. 避免脆弱的测试
如果一个应用程序对于新出现的但有效的输入经常失败说明程序容易出bug（不够稳健）；同
样，如果一个测试仅仅对程序做了微小变化就失败则称为脆弱。就像一个不够稳健的程序会
挫败它的用户一样，一个脆弱的测试同样会激怒它的维护者。最脆弱的测试代码会在程序没
有任何变化的时候产生不同的结果，时好时坏，处理它们会耗费大量的时间但是并不会得到
任何好处。
当一个测试函数会产生一个复杂的输出如一个很长的字符串、一个精心设计的数据结构或一
个文件时，人很容易想预先写下一系列固定的用于对比的标杆数据。但是随着项目的发展，
有些输出可能会发生变化，尽管很可能是一个改进的实现导致的。而且不仅仅是输出部分，
函数复杂的输入部分可能也跟着变化了，因此测试使用的输入也就不再有效了。
避免脆弱测试代码的方法是只检测你真正关心的属性。保持测试代码的简洁和内部结构的稳
定。特别是对断言部分要有所选择。不要对字符串进行全字匹配，而是针对那些在项目的发
展中是比较稳定不变的子串。很多时候值得花力气来编写一个从复杂输出中提取用于断言的
必要信息的函数，虽然这可能会带来很多前期的工作，但是它可以帮助迅速及时修复因为项
目演化而导致的不合逻辑的失败测试。
测试函数 412
gopl
11.3. 测试覆盖率
就其性质而言，测试不可能是完整的。计算机科学家Edsger Dijkstra曾说过：“测试能证明缺
陷存在，而无法证明没有缺陷。”再多的测试也不能证明一个程序没有BUG。在最好的情况
下，测试可以增强我们的信心：代码在很多重要场景下是可以正常工作的。
对待测程序执行的测试的程度称为测试的覆盖率。测试覆盖率并不能量化——即使最简单的
程序的动态也是难以精确测量的——但是有启发式方法来帮助我们编写有效的测试代码。
这些启发式方法中，语句的覆盖率是最简单和最广泛使用的。语句的覆盖率是指在测试中至
少被运行一次的代码占总代码数的比例。在本节中，我们使用 命令中集成的测试覆
go test
盖率工具，来度量下面代码的测试覆盖率，帮助我们识别测试和我们期望间的差距。
下面的代码是一个表格驱动的测试，用于测试第七章的表达式求值程序：
gopl.io/ch7/eval
测试覆盖率 413
gopl
func TestCoverage(t *testing.T) {
var tests = []struct {
input string
env Env
want string // expected error from Parse/Check or result from Eval
}{
{"x % 2", nil, "unexpected '%'"},
{"!true", nil, "unexpected '!'"},
{"log(10)", nil, `unknown function "log"`},
{"sqrt(1, 2)", nil, "call to sqrt has 2 args, want 1"},
{"sqrt(A / pi)", Env{"A": 87616, "pi": math.Pi}, "167"},
{"pow(x, 3) + pow(y, 3)", Env{"x": 9, "y": 10}, "1729"},
{"5 / 9 * (F - 32)", Env{"F": -40}, "-40"},
}
for _, test := range tests {
expr, err := Parse(test.input)
if err == nil {
err = expr.Check(map[Var]bool{})
}
if err != nil {
if err.Error() != test.want {
t.Errorf("%s: got %q, want %q", test.input, err, test.want)
}
continue
}
got := fmt.Sprintf("%.6g", expr.Eval(test.env))
if got != test.want {
t.Errorf("%s: %v => %s, want %s",
test.input, test.env, got, test.want)
}
}
}
首先，我们要确保所有的测试都正常通过：
$ go test -v -run=Coverage gopl.io/ch7/eval
=== RUN TestCoverage
--- PASS: TestCoverage (0.00s)
PASS
ok gopl.io/ch7/eval 0.011s
下面这个命令可以显示测试覆盖率工具的使用用法：
测试覆盖率 414
gopl
$ go tool cover
Usage of 'go tool cover':
Given a coverage profile produced by 'go test':
go test -coverprofile=c.out
Open a web browser displaying annotated source code:
go tool cover -html=c.out
...
命令运行Go工具链的底层可执行程序。这些底层可执行程序放在
go tool
$GOROOT/pkg/tool/${GOOS}_${GOARCH}目录。因为有 命令的原因，我们很少直
go build
接调用这些底层工具。
现在我们可以用 标志参数重新运行测试：
-coverprofile
$ go test -run=Coverage -coverprofile=c.out gopl.io/ch7/eval
ok gopl.io/ch7/eval 0.032s coverage: 68.5% of statements