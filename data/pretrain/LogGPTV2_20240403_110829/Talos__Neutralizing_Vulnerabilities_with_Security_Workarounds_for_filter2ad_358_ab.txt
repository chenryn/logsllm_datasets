Ofﬁce
Options
88
74
174
28
33
325
27
42
30
20
31
32
Period
14.8% 2005-14
16.7% 2002-14
6.7% 2001-15
20.0% 2004-13
54.8% 2000-14
37.5% 2000-11
implement the ﬁx, and ﬁnally test and review the patch before
release. Due to our need for detailed bug reports and source
code patches in performing this study, we were restricted to
open-source applications. However, we found no evidence that
these conclusions are restricted to open-source projects, and
so we believe they should apply equally to both open- and
closed-source applications.
B. Conﬁguration workaround coverage of vulnerabilities
Since conﬁguration workarounds represent the current best
solution for mitigating the vulnerability window, we also
present our study of conﬁguration workarounds for recent
security vulnerabilities. We deﬁne a conﬁguration workaround
as any vulnerability mitigation that involves modifying the
conﬁguration of the application (i.e., conﬁguration options
supported by the application) and exclude many other common
ﬁxes such as patching the application binary, disabling the
application, or placing the vulnerability out of the reach of
attackers (e.g., tightening ﬁrewall rules).
For this study, we add two popular closed-source applica-
tions: Internet Explorer and Microsoft Ofﬁce. We also exclude
sqlite because sqlite does not support any conﬁguration op-
tions. For each application, we again randomly select a number
of vulnerabilities and search both the software vendors’ web-
sites and Internet to determine if a conﬁguration workaround
is available. We tabulate the percentage of vulnerabilities
examined for which we were able to ﬁnd a conﬁguration
workaround as well as the time period over which the manually
examined vulnerabilities were reported. We also tabulate the
number of conﬁguration options for each application. Table II
presents the results. Column “Options” shows the number
of conﬁguration options that each application has. Column
“Workaround” shows the percentage of vulnerabilities that
have conﬁguration workarounds. Column “Period” shows the
earliest and latest time when the vulnerabilities are reported.
For IE and Ofﬁce, we cite the number of conﬁguration
options measured by Ocasta [30]. For other applications, we
obtain the list of their conﬁguration options from their source
code using either static analysis, manual examination, or user
documentation. While it is difﬁcult to say whether a small
number of conﬁguration options indicates that each option
covers a large amount of code, in general we can see that
the number of conﬁguration options is usually small.
We observe several
trends in the results of our study.
First, conﬁguration workarounds are listed for every appli-
cation in our study. This shows that the use and disclosure
620620
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
of conﬁguration workarounds is widespread across software
projects. Second, the percentage of vulnerabilities that have
workarounds is relatively low – a weighted average (by # of
vulnerabilities) shows that only 25.2% of the vulnerabilities
have conﬁguration workarounds. As a result, the cases where
a security vulnerability can be neutralized with an existing
conﬁguration workaround is quite uncommon.
Qualitatively, we ﬁnd that many conﬁguration workarounds
disable an entire “module” of functionality that was associated
with the vulnerable code. This suggests that many conﬁgura-
tion workarounds cause some collateral damage; they not only
disable the vulnerable code, but may also unnecessarily disable
other non-vulnerable functionality. For example, vulnerability
CVE-2011-4362 in lighttpd [11] is the result of an incorrect
bounds check in the code that is only called during base64
decoding of credentials for HTTP basic authentication. How-
ever, the posted conﬁguration workaround disables all types of
authentication because it is the only conﬁguration option that
can prevent the vulnerable code from being executed. This
means that other types of authentication that do not rely on
base64 decoding, such as digest and NTLM authentication,
are needlessly disabled. In general, the coarseness of the con-
ﬁguration options means that the conﬁguration workarounds
frequently disable more functionality than is strictly necessary.
is not a complete surprise that
conﬁguration workarounds, while widespread in their usage
across applications, are generally applicable to a minority
of vulnerabilities and might only be able to disable code
at a coarse granularity. Having fewer conﬁguration options
simpliﬁes testing and generally improves usability, motivating
developers to minimize the conﬁgurability of their applica-
tions. There are likely many regions of code that cannot be
disabled by the limited number of conﬁguration options, result-
ing in many vulnerabilities for which there is no conﬁguration
workaround.
Objectively speaking,
it
A. SWRR objectives
III. OVERVIEW
From our study of conﬁguration workarounds we found that
while conﬁguration workarounds are commonly used, they
have very low coverage of vulnerabilities, thus reducing their
utility. Despite this, the reason why conﬁguration workarounds
are still used is that they impose no additional effort on the part
of the developer. In essence, they provide a small, but tangible
beneﬁt for free. While it might seem obvious that a special
purpose mechanism like SWRRs can improve on the coverage
of conﬁguration workarounds, we remain cognizant that to be
competitive, they must at the same time impose little or no
engineering cost. Furthermore, as a temporary alternative to a
patch, they must be quick to generate as compared to construct
a patch. We achieve low-effort by automatically generating
SWRRs with a static analysis tool called Talos. However,
if designed improperly, an automatically generated SWRR
may do more harm than a manually created conﬁguration
workaround. As a result, we state the following objectives for
our design of Talos and the SWRRs it creates:
621621
• Security: An SWRR should neutralize its intended vul-
nerability and, in doing so, it should not introduce new
bugs or vulnerabilities.
• Effective Coverage: SWRRs should be able to cover
many more vulnerabilities than conﬁguration work-
arounds. Effective coverage is a product of two com-
ponents: (1) the number of vulnerabilities whose code
SWRRs can disable (which we call “basic coverage”),
and (2) the percentage of SWRRs that, when enabled,
result in a minor loss of functionality similar to what
would be expected from a conﬁguration workaround.
• Low Cost: SWRRs are mechanically inserted into an
application using Talos, thus minimizing the engineering
effort required to use SWRRs. In cases where a binary
SWRR patch cannot be issued, it should be possible
to perform “in-place” deployment of SWRRs, similar
to deployment of conﬁguration workarounds, and with
minimal performance overhead.
Conﬁguration workarounds are very unlikely to introduce
new bugs or vulnerabilities since they have been tested; we
expect the same behaviour from SWRRs, however, we limit
our security objective to avoiding vulnerabilities that can
compromise the conﬁdentiality and integrity of a program. It
is possible and acceptable for Talos to create an SWRR that
causes the application to terminate, even though this creates
a potential denial-of-service vulnerability. We believe this is
acceptable because most state-of-the-art vulnerability mitiga-
tion techniques (such as Address Space Layout Randomization
(ASLR), Control Flow Integrity (CFI), and non-executable
stacks) aim to turn memory corruption exploits or malicious
control ﬂow transfers into program crashes, which also result
in the termination of the program [20], [36], [47], [55], [62],
[63]. As a result, our design of SWRRs aims to completely
avoid conﬁdentiality and integrity vulnerabilities in exchange
for some (small) probability of introducing a denial-of-service
vulnerability.
A full patch requires at least the same or more effort to
generate than an SWRR. This is because a full patch must
preserve all the functionality of the application while SWRRs
explicitly allow some loss of functionality. Speciﬁcally, to
create a full patch, a developer needs to understand the
exact cause of the vulnerability and all the conditions under
which the vulnerability is triggered. In addition, the developer
needs to design and implement new code that retains all
desired functionality of the old code but does not contain
the vulnerability. In contrast, Talos only requires knowing the
function in which the vulnerable code is located, which can
usually be obtained from a crash report.
The difference in effort is dependent on the complexity
of the vulnerability. The amount of effort to create a full
patch generally increases as the complexity of the vulnerability
increases. On the contrary, the amount of effort to generate an
SWRR is essentially constant, as it just requires knowing the
function that contains the vulnerable code, and the effort to
get this information is independent of the complexity of the
vulnerability. Consequently, the more complex the vulnerabil-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
ity is, the larger the difference in effort will be. For simple
vulnerabilities, the difference in effort might be small, but the
results in Table I suggest that a fair number of vulnerabilities
can be quite complex.
B. SWRR deployment
There are two possible deployment methods for SWRRs.
In the ﬁrst deployment method of SWRR, which we call in-
place deployment, Talos is run on the application code base
before it is released. Talos inserts an SWRR check into every
function in the application. Each SWRR check reads and
checks a corresponding SWRR option in an accompanying
SWRR conﬁguration ﬁle. This allows the application developer
to selectively disable code in an application without having to
replace the binary by pushing out a new SWRR conﬁguration
ﬁle instead. Alternatively, the user may change the conﬁg-
uration ﬁle to enable the appropriate SWRR if they know
which function the vulnerability occurs in. In-place SWRR
deployment is useful in scenarios where runtime performance
is not critical or in scenarios where updating binaries is
difﬁcult, such as in smartphones or other embedded devices.
In the second deployment method of SWRR, which we call
patch-based deployment, the application developer will run
Talos on the application code base when they learn of a new
vulnerability, passing Talos the information it requires about
the vulnerability. Talos will then insert code that will disable
the vulnerable function(s) and trigger error-handling code to
return the application to a good state. The application devel-
oper will then compile the instrumented code and issue the
resulting binary as a temporary patch to users. The application
developer can perform minimal testing on the temporary patch
as SWRRs are unlikely to cause serious loss of functionality
in most cases, which is shown in our evaluation.
Using an SWRR requires that the location of the vulnerabil-
ity be known. We argue that this is a reasonable requirement
– by the time a vulnerability is discovered and conﬁrmed, the
location of the vulnerable code is generally known, albeit a
proof-of-concept exploit is often not publicly available. For
example, many of the CVE vulnerability reports we used in
our experiments speciﬁcally list the function in which the
vulnerability is located.
Each of the two SWRR deployment methods has its own
pros and cons. In-place deployment frees the developer from
the need to re-compile the code and roll-out new code, but
imposes a a slight increase of code size and minor perfor-
mance overhead, as we will show in Section VI. Patch-based
deployment on the other hand has no code size or runtime
overhead, but requires new binary code to be distributed and
installed.
As the main goal of SWRR is to provide a rapid response
when a vulnerability is newly discovered, we use Figure 1 to
illustrate the similarities and differences in the steps required
for the two SWRR deployment methods and the conventional
method of releasing a full patch. In the ﬁgure, the workﬂows of
different approaches are distinguished with the use of different
Vulnerability Triage 
Find the location of the vulnerability 
Find the cause of the 
vulnerability 
Construct a patch 
Run regression test to 
ensure no functionality is 
broken 
Release the patch 
Apply the patch to 
installed applications 
Use Talos to identify the 
SWRR for the location of 
vulnerability 
Use Talos to generate an 
SWRR for the location of 
vulnerability 
Activate the identified SWRR 
in installed applications 
Release the SWRR 
Apply the released SWRR to 
installed applications 
A vulnerability is discovered. 
The vulnerability is mitigated. 
The vulnerability is fixed. 
Full patch 
In-place SWRR  
Patch-based SWRR 
Fig. 1. The comparison of the different approaches to addressing a newly
discovered vulnerability.
types of arrows. The legends used in the ﬁgure are explained
in the dotted box at the bottom of the ﬁgure.
Regardless of which method is used to address the vul-
nerability, the discovery of a new vulnerability always starts
with triage and ﬁnding the location of the vulnerability. After
that, each method consists of different steps. First, releasing
a patch requires software developers to ﬁnd the cause of the
vulnerability and to construct a patch, which can require a
considerable amount of developer effort and time. In addition,
since full patches must not break existing functionality, regres-
sion tests must be performed. Furthermore, the vendor must
release the patch and end-users must install the patch. Second,
in-place SWRR deployment requires developers to identify the
SWRR that can mitigate the vulnerability, which can be done
by simply running Talos, and end-users to activate the SWRR
by installing the new SWRR conﬁguration ﬁle or enabling
the appropriate SWRR conﬁguration option. Finally, patch-
based SWRR deployment requires developers to generate an
SWRR speciﬁcally for the vulnerability, which is also done
by running Talos, vendors to release the SWRR as a patch,
and end-users to install the SWRR patch. Note that at the
end, the conventional approach of releasing a patch will ﬁx
the vulnerability, while both SWRR deployment methods only
mitigate the vulnerability. However, both SWRR deployment
methods require fewer steps and the steps that they require are
simpler and less time-consuming than those of a full patch, due
to the nature of their purposes and the aid of an automated
tool like Talos.
C. The error-handling code intuition
Talos must insert SWRRs that neutralize vulnerable func-
tions without violating security, Further, it must do this without
needing to understand complex program-speciﬁc semantics.
As a result, Talos is almost completely application-agnostic,
requiring only a small amount of application-speciﬁc infor-
622622
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
mation from developers. The key to enabling Talos to do this
is to ﬁnd an application characteristic that (1) is present and
similar across nearly all applications, and (2) can allow Talos
to recover from the unexpected redirection of execution to
avoid vulnerable code.
it encounters;
Our intuition is that code whose purpose is to handle un-
expected or abnormal error conditions ﬁts these requirements.
First, error-handling is found in nearly every type of appli-
cation. Essentially any sufﬁciently complex application that
interacts with its environment must gracefully handle unex-
pected situations such as invalid inputs, inadequate resources,
or unexpected delays that
this is generally
accomplished with what we generically refer to as error-
handling code. Second, error-handling code is designed to be
invoked when the application encounters these unexpected or
abnormal situations and thus, by nature, it must conservatively
return the application back to a known state. In fact, the
majority of error-handling code takes great pains to try to
avoid violating conﬁdentiality by leaking sensitive information
or violating integrity by corrupting data. Instead, most error-
handling code remedies an abnormal situation by aborting the
current task and cleaning up any intermediate state or, in the
worst case, gracefully halting the application if continuation is
not possible. As a result, the intuition behind the goals of error-
handling code ﬁts well with the security goal of protecting the
conﬁdentiality and integrity of applications.