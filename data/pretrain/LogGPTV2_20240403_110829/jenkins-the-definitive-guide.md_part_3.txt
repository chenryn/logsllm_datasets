10.14. Jenkins stores what parameter values where used for each build .................................. 265
10.15. Jenkins stores what parameter values where used for each build .................................. 266
10.16. Adding a parameterized trigger to a build job .......................................................... 266
10.17. The build job you trigger must also be a parameterized build job ................................. 267
10.18. Passing a predefined parameter to a parameterized build job ....................................... 268
10.19. Creating a multiconfiguration build job ................................................................... 269
10.20. Adding an axis to a multiconfiguration build ........................................................... 269
10.21. Defining an axis of slave nodes ............................................................................ 270
10.22. Defining an axis of JDK versions .......................................................................... 270
10.23. Defining a user-defined axis ................................................................................. 271
10.24. Multiconfiguration build results ............................................................................. 272
10.25. Setting up a combination filter .............................................................................. 273
10.26. Build results using a combination filter ................................................................... 274
10.27. A job generated by the Maven Jenkins plugin .......................................................... 276
xvi
10.28. jenkins-master job generated ................................................................................. 277
10.29. Artifactory Jenkins plugin configuration ................................................................. 280
10.30. Triggering several other builds after a build job ....................................................... 282
10.31. A build job dependency graph .............................................................................. 283
10.32. Configuring a join in the phoenix-web-tests build job ................................................ 284
10.33. A more complicated build job dependency graph ...................................................... 284
10.34. Adding a new lock ............................................................................................. 285
10.35. Configuring a build job to use a lock ..................................................................... 285
10.36. Configuring a Maven release using the M2Release plugin .......................................... 287
10.37. The Perform Maven Release menu option ............................................................... 287
10.38. Performing a Maven release in Jenkins ................................................................... 288
10.39. Adding a “Copy artifacts from another project” build step .......................................... 289
10.40. Running web tests against a copied WAR file .......................................................... 291
10.41. Copying from a multiconfiguration build ................................................................ 292
10.42. Build jobs in the promotion process ....................................................................... 293
10.43. Configuring a build promotion process ................................................................... 294
10.44. Configuring a manual build promotion process ........................................................ 295
10.45. Viewing the details of a build promotion ................................................................ 296
10.46. Using fingerprints in the build promotion process ..................................................... 297
10.47. Fetching the WAR file from the upstream build job .................................................. 297
10.48. Archiving the WAR file for use in the downstream job .............................................. 298
10.49. Fetching the WAR file from the integration job ........................................................ 298
10.50. We need to determine the fingerprint of the WAR file we use ..................................... 298
10.51. Fetching the latest promoted WAR file ................................................................... 299
10.52. Promoted builds are indicated by a star in the build history ......................................... 299
10.53. Reporting on aggregate test results ........................................................................ 300
10.54. Viewing aggregate test results ............................................................................... 301
10.55. Configuring a manual step in the build pipeline ........................................................ 302
10.56. Creating a Build Pipeline view .............................................................................. 302
10.57. Configuring a Build Pipeline view ......................................................................... 303
10.58. A Build Pipeline in action .................................................................................... 304
11.1. Managing slave nodes ........................................................................................... 306
11.2. Creating a new slave node ..................................................................................... 307
11.3. Creating a Unix slave node .................................................................................... 307
11.4. Taking a slave off-line when idle ............................................................................ 309
11.5. Configuring tool locations ..................................................................................... 310
11.6. Your new slave node in action ............................................................................... 310
11.7. Creating a slave node for JNLP .............................................................................. 311
11.8. Launching a slave via Java Web Start ...................................................................... 312
11.9. The Jenkins slave agent in action ............................................................................ 312
11.10. The Jenkins slave failing to connect to the master ..................................................... 313
11.11. Configuring the Jenkins slave port ......................................................................... 313
11.12. Installing the Jenkins slave as a Windows service ..................................................... 314
xvii
11.13. Managing the Jenkins Windows service .................................................................. 314
11.14. Letting Jenkins control a Windows slave as a Windows service ................................... 315
11.15. Running a build job on a particular slave node ......................................................... 316
11.16. Jenkins proactively monitors your build agents ........................................................ 318
11.17. You manage your EC2 instances using the Amazon AWS Management Console ............. 319
11.18. Configuring an Amazon EC2 slave ........................................................................ 320
11.19. Configuring an Amazon EC2 slave ........................................................................ 321
11.20. Creating a new Amazon EC2 image ....................................................................... 322
11.21. Bringing an Amazon EC2 slave online manually ...................................................... 322
12.1. A simple automated deployment pipeline .................................................................. 331
12.2. Copying the binary artifact to be deployed ................................................................ 331
12.3. Deploying to Tomcat using the Deploy Plugin ........................................................... 332
12.4. Adding a “Build selector for Copy Artifact” parameter ................................................ 333
12.5. Configuring a build selector parameter ..................................................................... 333
12.6. Specify where to find the artifacts to be deployed ...................................................... 334
12.7. Choosing the build to redeploy ............................................................................... 334
12.8. Using the “Specified by permalink” option ............................................................... 335
12.9. Using a specific build ........................................................................................... 335
12.10. Using a Maven Enterprise Repository .................................................................... 336
12.11. Deploying an artifact from a Maven repository ........................................................ 339
12.12. Preparing the WAR to be deployed ........................................................................ 339
12.13. Configuring a remote host .................................................................................... 340
12.14. Deploying files to a remote host in the build section ................................................. 341
12.15. Deploying files to a remote host in the post-build actions ........................................... 342
13.1. Discarding old builds ............................................................................................ 345
13.2. Discarding old builds—advanced options .................................................................. 346
13.3. Viewing disk usage .............................................................................................. 347
13.4. Displaying disk usage for a project .......................................................................... 347
13.5. Displaying project disk usage over time ................................................................... 348
13.6. Maven build jobs—advanced options ....................................................................... 348
13.7. Jenkins Load Statistics .......................................................................................... 350
13.8. The Jenkins Monitoring plugin ............................................................................... 351
13.9. The builds directory ............................................................................................. 352
13.10. The Jenkins Backup Manager Plugin ...................................................................... 353
13.11. Configuring the Jenkins Backup Manager ............................................................... 354
13.12. Configuring the Thin Backup plugin ...................................................................... 355
13.13. Restoring a previous configuration ......................................................................... 355
13.14. Reloading the configuration from disk .................................................................... 356
13.15. Jenkins will inform you if your data is not compatible with the current version ............... 357
13.16. Managing out-of-date build jobs data ..................................................................... 358
A.1. A project containing freely-named test classes ............................................................ 364
xviii
Copyright
Copyright © 2011 John Ferguson Smart
Printed version published by O'Reilly Media, 1005 Gravenstein Highway North, Sebastopol, CA 95472.
Online version published by Wakaleo Consulting, 111 Donald Street, Karori, Wellington 6012, New
Zealand.
This work is licensed under a Creative Commons Attribution-Noncommercial-No Derivative Works
3.0 United States license. For more information about this license, see http://creativecommons.org/
licenses/by-nc-nd/3.0/us/. You are free to share, copy, distribute, display, and perform the work under
the following conditions:
• You must attribute the work to John Ferguson Smart
• You may not use this work for commercial purposes.
• You may not alter, transform, or build upon this work.
Java™ and all Java-based trademarks and logos are trademarks or registered trademarks of Sun
Microsystems, Inc., in the United States and other countries.
Eclipse™ is a trademark of the Eclipse Foundation, Inc., in the United States and other countries.
Apache and the Apache feather logo are trademarks of The Apache Software Foundation.
Linux® is the registered trademark of Linus Torvalds in the U.S. and other countries.
Many of the designations used by manufacturers and sellers to distinguish their products are claimed
as trademarks. Where those designations appear in this book, and Wakaleo Consulting was aware of a
trademark claim, the designations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of this book, the publisher and authors assume
no responsibility for errors or omissions, or for damages resulting from the use of the information
contained herein.
Foreword
Kohsuke Kawaguchi
Seven years ago, I wrote the first line of code that started this whole project that is now known as Jenkins,
and was originally called Hudson. I used to be the guy who broke the build, so I needed a program to
catch my mistakes before my colleagues did. It was just a simple tool that did a simple thing. But it
rapidly evolved, and now I’d like to think that it’s the most dominant CI server on the market bar none,
encompassing a broad plugin ecosystem, commercial distributions, hosted Jenkins-as-a-Service, user
groups, meet-ups, trainings, and so on.
As with most of my other projects, this project was open-sourced since its inception. Over its life it
critically relied on the help and love of other people, without which the project wouldn’t be in the current
state. During this time I’ve also learned a thing or two about running open source projects. From that
experience, I think people often overlook that there are many ways to help an open source project, of
which writing code is just one of many. There’s spreading words, helping other users, organizing meet-
ups, and yes, there’s writing documentation.
In this sense, John is an important part of the Jenkins community, even though he hasn’t contributed code
—instead, he makes Jenkins more approachable to new users. For example, he has a popular blog that’s
followed by many, where he regularly talks about continuous integration practices and other software
development topics. He is good at explaining things so that people new to Jenkins can still understand
them, which is something often hard for people like me who develop Jenkins day in day out. He is also
well-known for his training courses, of which Jenkins is a part. This is another means by which he makes
Jenkins accessible for more people. He clearly has a passion for evangelizing new ideas and teaching
fellow developers to be more productive.
These days I spend my time at CloudBees where I focus my time on Open Source Jenkins, the CloudBees
pro version of Jenkins where we build plugins on top of Jenkins, and taking Jenkins to the private and
public cloud with CloudBees DEV@cloud service. In this role I now have more interaction with John
than before, and my respect for his passion has only grown.
So I was truly delighted that he took on the daunting task of writing a book about Jenkins. It gives
a great overview of the typical main ingredients of continuous integration. And for me personally, I
always get asked if there’s a book about Jenkins, and I can finally answer this question positively! But
more importantly, this book reflects his passion, and his long experience in teaching people how to use
Jenkins, in combination with other things. But don’t take my words for it. You’ll just need to read on
to see it for yourself.
Preface
1. Audience
This book is aimed at relatively technical readers, though no prior experience with Continuous
Integration is assumed. You may be new to Continuous Integration, and would like to learn about the
benefits it can bring to your development team. Or, you might be using Jenkins or Hudson already, and
want to discover how you can take your Continuous Integration infrastructure further.
Much of this book discusses Jenkins in the context of Java or JVM-related projects. Nevertheless, even
if you are using another technology stack, this book should give you a good grounding in Continuous
Integration with Jenkins. We discuss how to build projects using several non-Java technologies,
including as Grails, Ruby on Rails and .NET. In addition, many topics, such as general configuration,
notification, distributed builds and security are applicable no matter what language you are using.
2. Book Layout
Continuous Integration is like a lot of things: the more you put in, the more value you will get out. While
even a basic Continuous Integration setup will produce positive improvements in your team process,
there are significant advantages to gradually assimilating and implementing some of the more advanced
techniques as well. To this end, this book is organized as a progressive trek into the world of Continuous
Integration with Jenkins, going from simple to more advanced. In the first chapter, we start off with a
sweeping overview of what Jenkins is all about, in the form of a high-level guided tour. From there,
we progress into how to install and configure your Jenkins server and how to set up basic build jobs.
Once we have mastered the basics, we will delve into more advanced topics, including automated testing
practices, security, more advanced notification techniques, and measuring and reporting on code quality
metrics. Next, we move on to more advanced build techniques such as matrix builds, distributed builds
and cloud-based CI, before discussing how to implement Continuous Deployment with Jenkins. Finally,
we cover some tips on maintaining your Jenkins server.
3. Jenkins or Hudson?
As we discuss in the introduction, Jenkins was originally, and up until recently, known as Hudson. In
2009, Oracle purchased Sun and inherited the code base of Hudson. In early 2011, tensions between
Oracle and the open source community reached rupture point and the project forked into two separate
entities: Jenkins, run by most of the original Hudson developers, and Hudson, which remained under
the control of Oracle.
As the title suggests, this book is primarily focused on Jenkins. However, much of the book was initially
written before the fork, and the products remain very similar. So, although the examples and illustrations
do usually refer to Jenkins, almost all of what is discussed will also apply to Hudson.
4. Font Conventions
This book follows certain conventions for font usage. Understanding these conventions up-front makes
it easier to use this book.
Italic
Used for filenames, file extensions, URLs, application names, emphasis, and new terms when
they are first introduced.
Constant width
Used for Java class names, methods, variables, properties, data types, database elements, and
snippets of code that appear in text.
Constant width bold
Used for commands you enter at the command line and to highlight new code inserted in a running
example.
Constant width italic
Used to annotate output.
5. Command-Line Conventions
From time to time, this book discusses command-line instructions. When we do, output produced by
the console (e.g., command prompts or screen output) is displayed in normal characters, and commands
(what you type) are written in bold. For example:
$ ls -al
total 168
drwxr-xr-x 16 johnsmart staff 544 21 Jan 07:20 .
drwxr-xr-x+ 85 johnsmart staff 2890 21 Jan 07:10 ..
-rw-r--r-- 1 johnsmart staff 30 26 May 2009 .owner
-rw-r--r--@ 1 johnsmart staff 1813 16 Apr 2009 config.xml
drwxr-xr-x 181 johnsmart staff 6154 26 May 2009 fingerprints
drwxr-xr-x 17 johnsmart staff 578 16 Apr 2009 jobs
drwxr-xr-x 3 johnsmart staff 102 15 Apr 2009 log
drwxr-xr-x 63 johnsmart staff 2142 26 May 2009 plugins
-rw-r--r-- 1 johnsmart staff 46 26 May 2009 queue.xml
-rw-r--r--@ 1 johnsmart staff 64 13 Nov 2008 secret.key
-rw-r--r-- 1 johnsmart staff 51568 26 May 2009 update-center.json
drwxr-xr-x 3 johnsmart staff 102 26 May 2009 updates
drwxr-xr-x 3 johnsmart staff 102 15 Apr 2009 userContent
drwxr-xr-x 12 johnsmart staff 408 17 Feb 2009 users
drwxr-xr-x 28 johnsmart staff 952 26 May 2009 war
Where necessary, the backslash character at the end of the line is used to indicate a line break: you can
type this all on one line (without the backslash) if you prefer. Don’t forget to ignore the “>” character
at the start of the subsequent lines—it’s a Unix prompt character:
xxiv
$ wget -O - http://jenkins-ci.org/debian/jenkins-ci.org.key \
> | sudo apt-key add -
For consistency, unless we are discussing a Windows-specific issue, we will use Unix-style command
prompts (the dollar sign, “$”), as shown here:
$ java -jar jenkins.war
or:
$ svn list svn://localhost
However, unless we say otherwise, Windows users can safely use these commands from the Windows
command console:
C:\Documents and Settings\Owner> java -jar jenkins.war
or:
C:\Documents and Settings\Owner> svn list svn://localhost
6. Contributors
This book was not written alone. Rather, it has been a collaborative effort involving many people playing
different roles. In particular, the following people generously contributed their time, knowledge and
writing skill to make this a better book:
• Evgeny Goldin is a Russian-born software engineer living in Israel. He is a lead developer at
Thomson Reuters where he’s responsible for a number of activities, some of which are directly
related to Maven, Groovy, and build tools such as Artifactory and Jenkins. He has a vast experience
in a range of technologies, including Perl, Java, JavaScript and Groovy. Build tools and dynamic
languages are Evgeny’s favorite subjects about which he often writes, presents or blogs. These
days he is writing for GroovyMag, Methods & Tools and runs two open source projects of his own:
Maven-plugins1 and GCommons2. He blogs at http://evgeny-goldin.com/blog and can be found on
Twitter as @evgeny_goldin.
Evgeny contributed a section on generating your Maven build jobs automatically in Chapter 10,
Advanced Builds.
• Matthew McCullough is an energetic 15 year veteran of enterprise software development, open
source education, and co-founder of Ambient Ideas, LLC, a Denver consultancy. Matthew currently
is a trainer for GitHub.com, author of the Git Master Class series for O’Reilly, speaker at over 30
national and international conferences, author of 3 of the top 10 DZone RefCards, and President
of the Denver Open Source Users Group. His current topics of research center around project
automation: build tools (Maven, Leiningen, Gradle), distributed version control (Git), Continuous
Integration (Jenkins) and Quality Metrics (Sonar). Matthew resides in Denver, Colorado with his
xxv
beautiful wife and two young daughters, who are active in nearly every outdoor activity Colorado