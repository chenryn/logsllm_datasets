DNscript
WeBid
Eve
SchoolMate
FAQforge
WebChess
HotCRP (2.60)
osCommerce (2.3.4)
osCommerce (2.3.3)
CPG
MediaWiki
phpBB (2.0.23)
Total
Table 5: Summary of the generated XSS seeds and exploits.
TPs
2
1
1
8
2
11
7
14
5
5
45
11
1
15
128
FPs
0
0
0
4
0
0
0
0
0
0
1
0
0
0
5
2
1
1
12
2
11
7
14
5
5
46
11
1
15
133
2
1
1
8
2
0
7
14
5
5
42
0
1
2
90
1 http://localhost/WeBid/user_login.php
POST[username=user,password=pass,action=login]
2 http://localhost/WeBid/index.php
3 http://localhost/WeBid/user_menu.php
4 http://localhost/WeBid/yourmessages.php?id=1’ OR ’1’=’1
Listing 5: SQLI exploit generated for the sinks in Listing 4.
XSS Exploits. NAVEX examined calls to echo and
print PHP functions as sinks for XSS vulnerability. It
found a total of 133 XSS exploitable sinks, 5 of which
are false positives, in 1h and 49m. It successfully gener-
ated 90 XSS exploits for the 133 sinks in 40m and 12sec
as shown in Table 5. For all exploitable sinks, NAVEX
generated XSS exploits except for SchoolMate, due to
the reported problem.
Note, we consider an exploit a zero-day if the exploit
in an active application was not reported before and has
a signiﬁcant effect, which is not the case for the vulnera-
bility in MediaWiki for instance.
Selected XSS Exploit. For osCommerce2.3.4, NAVEX
generated 5 XSS exploits. In the following, we demon-
strate one of these exploits, which illustrates the preci-
sion of our analysis in capturing the effect of custom
and built-in sanitization functions along different paths
to sinks.
Listing 6 shows the vulnerable sink (echo) where
user input $HTTP GET VARS[’page’] passes through
3 different
is ﬁnally processed
by either htmlspecialchars or strtr PHP func-
functions and it
USENIX Association
27th USENIX Security Symposium    387
tions. NAVEX did not report the paths going through
htmlspecialchars as exploitable because it is a suf-
ﬁcient XSS sanitization function. On the other hand, it
reported the paths that include strtr, which is not a
typical sanitization function for XSS, as vulnerable. In
this example, strtr replaces double quotes with &quot;
which is not sufﬁcient to prevent XSS. NAVEX inferred
the semantics of this function (through its modeling of
many PHP functions as solver speciﬁcations) and used
the solver to ﬁnd an XSS attack string that does not in-
clude double quotes from our XSS attack dictionary. Ad-
ditionally, to break out the outer single quotes, the attack
string should have a single quote (&#39; HTML entity)
encoded (%26%2339%3B).
result,
selected
a ma-
%26%2339%3B-alert(1)-%26%2339%3B as
licious user input
that satisﬁes the path constraints.
Listing 7 shows the exploit constructed automatically
for this vulnerability.
solver
the
As
a
1 echo ’’;
2 //1st function
3 function tep_href_link($page = ’’, $parameters = ’’) {
4 if (tep_not_null($parameters))
5
$link .= $page . ’?’ . tep_output_string($parameters);
...}
6 //2nd function
7 function tep_output_string($string, $translate = false,
$protected = false) {
return htmlspecialchars($string);
8 if ($protected == true)
9
10 else
11
12
if ($translate == false)
return tep_parse_input_field_data($string, array(’"’ =>
’&quot;’));
13 ...}
14 //3rd function
15 function tep_parse_input_field_data($data, $parse) {
16
return strtr(trim($data), $parse);}
Listing 6:
osCommerce 2.3.4.
Simpliﬁed code for XSS vulnerability in
1 http://localhost/oscommerce-2.3.4/catalog/admin/login.php
?action=process
POST[username=PI:EMAIL,password=pass]
2 http://localhost/oscommerce-2.3.4/catalog/admin/index.php
3 http://localhost/oscommerce-2.3.4/catalog/admin/reviews.php
4 http://localhost/oscommerce-2.3.4/catalog/admin/reviews.php
?page=%26%2339%3B-alert(1)-%26%2339%3B
Listing 7: An XSS exploit generated for Listing 6.
EAR Exploits. NAVEX examined a total of 246 calls
to header function (EAR source) in 17m and 17sec. It
found 19 benign EAR and 3 malicious EAR vulnerabili-
ties. It successfully generated 9 exploits for the 22 EAR
vulnerabilities combined as summarized in Table 6. Note
that in the case of EAR, an exploit is a sequence of HTTP
requests causes the code after the redirection function to
execute.
Code Execution Exploits. NAVEX examined all calls to
Benign
EAR Sinks
Malicious
EAR Sinks
EAR
Exploits
Application
myBloggie
WeBid
Eve
HotCRP (2.100)
HotCRP (2.60)
OpenConf
osCommerce (2.3.4)
osCommerce (2.3.3)
Gallery
Joomla
LimeSurvey
Collabtive
MediaWiki
Total
7
0
1
1
1
4
0
0
2
0
1
1
1
19
FPs
0
0
0
0
0
1
0
0
0
1
0
0
1
3
0
1
1
1
1
1
1
1
0
0
0
1
1
9
0
1
0
0
0
0
1
1
0
0
0
0
0
3
Table 6: Summary of the generated EAR seeds and exploits.
to
calls
NAVEX examined
exec, expect popen, passthru,
the PHP function eval, a total of 98 calls in our data
set, in 21m and 20sec. All the calls are not vulnerable,
and therefore, NAVEX did report any exploitable code
execution sinks, and no exploits were generated.
Command Injection Exploits.
all
pcntl exec, popen, proc open, shell exec,
system, mail, and backtick operator, a total of
350 calls, in 22m and 32sec. NAVEX did not ﬁnd any
vulnerable sinks.
File Inclusion Exploits. NAVEX examined a total
of 8063 calls to include, include once, require,
and require once in 27m and 58sec. It marked 1 sink
as exploitable in WeBid. However, an exploit could not
be generated because the unsanitized ﬁle name (user in-
put) is preﬁxed and postﬁxed with some constant strings,
which cannot be overwritten by a malicious input.
5.2 Measurements
Performance and scalability. Figure 5 shows the per-
formance of NAVEX measured by the total time to ﬁnd
exploitable sinks and to generate exploits per vulnerabil-
ity type. Note, for each vulnerability type, the blue bar
shows the total time of the analysis of Step I, for all ap-
plications under test. The orange bar, on the other hand,
records the total time spent by Step II, for the applica-
tions that have exploitable sinks.
Dynamic analysis coverage. We consider the number
of statically identiﬁed vulnerabilities by Step I as a
baseline to assess the coverage of Step II. NAVEX
successfully constructed 105 exploits for 155 SQLI
sinks, 90 exploits for 128 XSS sinks, and 9 exploits for
19 EAR vulnerabilities. Overall, the total coverage of
Step II is 68% in comparison with the total vulnerable
sinks for all applications.
Effect of sanitization tags on code property graphs.
Figure 6 shows the effect of enhancing the CPG with san-
itization and DB tags on the total number of vulnerable
sinks. The orange bar shows the total number of vulner-
able sinks with the enhancements, showing reductions in
false positives. Overall, the number of reported vulner-
388    27th USENIX Security Symposium
USENIX Association
Figure 5: Performance of NAVEX for each vulnerability type.
Note, zero values refer to the absence of exploits.
Figure 6: The effect of sanitization-tag-enhanced CPG in re-
ducing false positives in vulnerable sink ﬁnding. For SQLI, the
numbers show the # of sinks using sanitization and DB proper-
ties.
able sinks for each vulnerability type is reduced, on an
average, by 87% due to enhancements implemented on
CPGs to signiﬁcantly cut-down false positives.
Effect of client-side code analysis. One of the contri-
butions of our work is the precise handling of client-side
code during the NG construction. Forms are common
artifacts in modern web applications.
In our dataset,
we counted the frequency of using forms to receive
data from users. We found out that the number of
unique forms in all applications ranges from 3 (as in
geccbblite) to 186 (as in WeBid) with an average of
45 form/application. Additionally, Figure 7 validates our
claim that in order to improve the coverage and conse-
quently generate more exploits in deployed applications,
we must support input generation and constraints extrac-
tion from forms and JavaScript code. It can be seen from
Figure 7 that NAVEX’s precision signiﬁcantly increases.
Additionally, we measured the maximum length of all
navigation paths leading to all exploitable sinks. For
SQLI and EAR exploits, we found that the maximum ex-
ploit length is 5 whereas for XSS is 6.
5.3 Comparison with Related Work
We compare the results of NAVEX with other related
works based on the following: (1) common subject appli-
cations (and same version numbers), (2) common vulner-
ability types, and (3) knowledge of how the results of the
related work are counted. Several related work met those
criteria such as CRAXweb [22], RIPS [15], [16], [31],
Ardilla [25], and Chainsaw [7]. However, since
Chainsaw [7], the most recent related work, provided
a detailed comparison between their work and [22], [31],
Figure 7: The enhancement on exploit generation precision
due to client-side code analysis.
and [25], we compare NAVEX with Chainsaw, RIPS,
and [16].
Vulnerability detection. In Table 7, we compare RIPS,
Chainsaw, and [16] with NAVEX in terms of the to-
tal number of the reported SQLI and XSS vulnerabili-