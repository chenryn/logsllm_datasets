# 分析RunC TOCTOU逃逸漏洞CVE-2021-30465

## 译文声明
本文为翻译文章，具体内容和含义以原文为准。

## 背景
国外安全研究员champtar在日常使用中发现Kubernetes的tmpfs挂载存在逃逸现象。经过进一步研究，他发现runC存在条件竞争漏洞（TOCTOU），可能导致挂载逃逸。关于TOCTOU及相关Linux文件基础知识，请参阅《初探文件路径条件竞争 – TOCTOU&CVE-2019-18276》一文。

从Redteam研究人员的角度来看，CVE-2021-30465似乎并不重要，因为利用该漏洞需要Kubernetes批量创建POD的权限。然而，从产品安全的角度来看，对于Caas（Container as a Service）类产品，用户或租户通常拥有批量创建POD的权限。在这种情况下，通过挂载逃逸可以打破租户间的隔离，并读取宿主机上的敏感数据，从而造成极大的危害。

## RunC简介
为了使容器生态系统更加开放，Linux基金会发起了OCI（Open Container Initiative），旨在标准化容器格式和运行时。其中一个重要的产物是CRI（Container Runtime Interface），它抽象了容器运行时接口，使得上层调控容器更加便捷。containerd和runC都是OCI的代表产物。从dockerd中剥离出containerd后，后者向上提供RPC接口并通过containerd管理runC。初期，containerd直接管理runC，但为了解决升级等操作导致的不可用问题，containerd进一步拆分出containerd-shim来独立对接runC。containerd从Runtime、Distribution和Bundle维度提供了容器全生命周期的管理能力，而runC则专注于Runtime。

## 容器设备挂载相关基础知识
### Namespace
Namespace是Linux控制系统资源的抽象层，将不同的进程放置在不同的Namespace中可以获得不同的资源视角。这项技术是实现容器的基础。Linux提供了八种不同的Namespace，分别为：Cgroup、IPC、Network、Mount、PID、Time、User和UTS。其中，Cgroup和Mount Namespace是最常用的，在容器挂载相关功能均通过Mount Namespace实现。Namespace的使用主要通过`clone`和`unshare`两个方法实现。`clone`创建新进程时，标志位为`CLONE_NEW*`会创建新的Namespace并将子进程放入该Namespace；`unshare`方法将调用进程放入不同的Namespace中。

### Mount Namespace
Linux的一个核心思想是一切皆文件。基于这一思想，Linux通过挂载对不同设备中的文件进行管理。每个空目录/文件都可以成为挂载点并设置相应的属性。在Mount Namespace下，当前Namespace中的进程只能看到当前Namespace中的挂载点。通过`/proc/[pid]/mounts`、`/proc/[pid]/mountinfo`和`/proc/[pid]/mountstats`可以获取不同维度的数据。每个task（在Linux中，不论是进程还是线程，在内核视角都是一个task）都会指向一个Namespace（存放在`task->nsproxy`中）。

```c
struct nsproxy {
    atomic_t count;
    struct uts_namespace *uts_ns;
    struct ipc_namespace *ipc_ns;
    struct mnt_namespace *mnt_ns;
    struct pid_namespace *pid_ns;
    struct net        *net_ns;
};
```

由于Mount Namespace的隔离性，当用户需要挂载一个新的磁盘使其在所有Namespace中可见时，就需要在所有的Namespace中都进行一次挂载，这非常麻烦。因此，Linux在2.6.15版本中引入了共享子树（Shared Subtrees）。通过在不同挂载点设置不同的属性，使挂载事件在不同的维度（peer group）进行传播。目前支持以下四种传播类型，其中MS_SHARED和MS_SLAVE比较常见：
1. MS_SHARED
2. MS_PRIVATE
3. MS_SLAVE
4. MS_UNBINDABLE

在MS_SLAVE传播属性的挂载点下，父挂载点（Master）的传播事件可以接收，但子挂载点下（Slave）的挂载事件不再传播。容器的Rootfs挂载即为该种类型，这意味着在容器中挂载的动作不会影响宿主机，从而保证了容器的隔离性。

## 漏洞分析
### RunC漏洞挂载逻辑分析
首先，我们检查修复commit (0ca91f44f1664da834bc61115a849b56d22f595f) 的上一个版本commit (01a56034f5ab0c1aa314377a499fe60a9c26b36)。

### 整体流程
RunC通过命令`runc create + runc start` 或 `runc run` 启动一个容器。`runc create` 主要分为两部分：一部分是准备容器进程的启动参数，并与真正的容器初始化进程`runc init` 进行交互，确保容器初始化顺利进行；另一部分是执行克隆出的`runc init` 进程，加入各种namespace并初始化容器进程的执行环境。本文将重点分析第二部分，从 `libcontainer/standard_init_linux.go` 中的 `linuxStandardInit.Init()` 函数开始。该函数调用 `prepareRootfs` 来准备初始化rootfs并进行挂载。

在 `prepareRootfs` 中，调用 `prepareRoot` 设置初始挂载点，并设置挂载标志位为 `unix.MS_SLAVE | unix.MS_REC`。然后使用 `mountToRootfs` 对 `container.json` 中配置的挂载进行操作。`prepareRoot` 将容器根目录挂载标志位设置为 `unix.MS_SLAVE | unix.MS_REC`。容器在初始时会通过镜像中的容器标准包（bundle）挂载根文件系统（BaseFS），在这里runC默认将挂载点（Propagation Type）设置为slave。由于当前已经处于容器的mount namespace中，所以当前 `/` 为容器根路径。`rootfsParentMountPrivate` 函数确保上一层的挂载点是PRIVATE，可能是出于防止逃逸的考虑。

在 `mountToRootfs` 中，针对不同的设备类型存在不同的处理逻辑。在tmpfs的处理逻辑中，`configs.EXT_COPYUP` 默认为1。首先准备 `/tmp` 目录，在 `prepareTmp` 函数中将这个挂载点设置为 `MS_PRIVATE`，再创建 `runctmpdir` 路径，将目标路径复制到 `tmpDir` 中，最后将 `dest` 路径挂载到 `tmpDir` 中，且Propagation Type设置为 `MS_MOVE`。对于 `MS_MOVE`，官方说明如下：

> If mountflags contains the flag MS_MOVE (available since Linux 2.4.18), then move a subtree: source specifies an existing mount point and target specifies the new location to which that mount point is to be relocated. The move is atomic: at no point is the subtree unmounted.

当 `dest` 是一个符号链接时，subtree将覆盖已存在的挂载点。因此，这里存在TOCTOU（Time-of-check to time-of-use）漏洞。在 `SecureJoin` 函数执行时，`dest` 为正常路径，但在挂载发生时，`dest` 变为符号链接，从而导致逃逸。

### 结论
RunC为了防止路径组合中的路径穿越漏洞，引入了 `filepath-securejoin` 作为符号链接过滤函数。然而，在挂载时并未校验挂载的实际目的路径，从而导致存在TOCTOU条件竞争漏洞。从 `securejoin` 的Readme中也可以看出这一点。

能够成功逃逸的另一个原因是tmpfs为了实现copy-up功能使用了 `MS_MOVE` 作为挂载标志。根据runC作者的描述，只有在tmpfs情况下才能逃逸。

## 补丁分析
在补丁中，可以看出在tmpfs的挂载逻辑中增加了 `doTmpfsCopyUp` 函数。在该函数中使用 `WithProcfd` 函数防止TOCTOU漏洞的发生，所有的 `securejoin.SecureJoin` 移入 `WithProcfd` 进行统一处理。`WithProcfd` 使用 `/proc/self/fd/` 确保打开的文件是 `securejoin.SecureJoin` 后的文件。

## POC分析
漏洞作者给出的POC展示了如何巧妙地利用这个看似难以利用的条件竞争漏洞。首先，创建两个公共tmpfs的挂载，名称为test1和test2。在容器A中，将test1挂载到 `/test1` 路径，test2挂载到 `/test2` 路径，同时将 `/test2/test2` 指向 `/`。在容器B中，将test1挂载到 `/test1` 路径，test2挂载到 `/test1/mntx` 路径和 `/test1/zzz` 路径。

在容器A启动后，将 `/test1/mnt-tmpx` 指向 rootfs路径，并交换 `mnt` 和 `mnt-tmpx`，且 `rootfs/test2/test2` 指向 `/`（在Kubernetes中，同一个pod下的rootfs在一个路径，形如 `/var/lib/kubelet/pods/$MY_POD_UID/volumes/kubernetes.io~empty-dir`）。

当条件竞争挂载时，即容器B启动时，挂载test2，`mount('/','rootfs/test1/zzz')`，同时 `MS_MOVE` 标志位将原有该挂载点的subtree移至新挂载点下，造成逃逸发生。

## 总结
虽然Linux在引入符号链接时并不存在安全风险，但随着容器技术的发展，符号链接确实容易导致容器逃逸。Linux正在尝试从不同角度解决这个问题，但目前还没有完全解决此风险的方法。伴随容器场景愈发复杂，安全研究逐渐深入，非Linux内核漏洞导致的容器逃逸长期来看还会有一个增长的趋势。

## 参考资料
[1] champtar: https://github.com/champtar  
[2] runc mount destinations can be swapped via symlink-exchange to cause mounts outside the rootfs (CVE-2021-30465): https://blog.champtar.fr/runc-symlink-CVE-2021-30465/  
[3] 《初探文件路径条件竞争 – TOCTOU&CVE-2019-18276》: http://whip1ash.cn/2021/06/16/toctou/  
[4] About the Open Container Initiative: https://opencontainers.org/about/overview/  
[5] What is the relationship between containerd, OCI and runc?: http://www.caict.ac.cn/kxyj/qwfb/ztbg/202010/t20201021_360375.htm  
[6] Containerd Architecture: https://github.com/docker-archive/containerd/blob/master/design/architecture.md  
[7] namespaces(7) — Linux manual page: https://man7.org/linux/man-pages/man7/namespaces.7.html  
[8] clone(2) — Linux manual page: https://man7.org/linux/man-pages/man2/clone.2.html  
[9] unshare(2) — Linux manual page: https://man7.org/linux/man-pages/man2/unshare.2.html  
[10] Linux Namespace分析——mnt namespace的实现与应用: https://hustcat.github.io/namespace-implement-1/  
[11] Mount namespaces and shared subtrees: https://lwn.net/Articles/689856/  
[12] 0ca91f44f1664da834bc61115a849b56d22f595f: https://github.com/opencontainers/runc/commit/0ca91f44f1664da834bc61115a849b56d22f595f  
[13] mount(2) — Linux manual page: https://man7.org/linux/man-pages/man2/mount.2.html  
[14] filepath-securejoin: https://github.com/cyphar/filepath-securejoin  
[15] tmpfs: https://en.wikipedia.org/wiki/Tmpfs  
[16] Overlay Filesystem: https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html#non-directories  
[17] mount(2) — Linux manual page: https://man7.org/linux/man-pages/man2/mount.2.html  
[18] rootfs: add mount destination validation: https://github.com/opencontainers/runc/commit/0ca91f44f1664da834bc61115a849b56d22f595f  
[19] Re: [PATCH 2/3] namei: implement AT_THIS_ROOT chroot-like path resolution: https://lwn.net/ml/linux-kernel/CAG48ez30WJhbsro2HOc_DR7V91M+PI:EMAIL/