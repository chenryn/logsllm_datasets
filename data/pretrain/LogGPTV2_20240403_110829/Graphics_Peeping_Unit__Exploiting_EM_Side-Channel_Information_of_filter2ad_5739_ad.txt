and Google. In terms of Youtube, when opened, it has some
video being played, which will continuously employ the GPU
for displaying (or even decoding); yet, we can still see the
adjustment of the performance level due to GPU DVFS. In
terms of Google, it has a blinking text cursor in its input box,
whose blinking rate is about 1.67 Hz; and every time it blinks,
the affected tiles need to be re-rasterized and screen image
needs to be re-composited by the GPU. We can see that after
the initial 1 s, the interval between each wide peak in Figure 8
(A) is about 600 ms, which matches the periodic blinking
behavior of the cursor. Although not shown in Figure 8 (B),
Amazon also induces periodic peak appearance in the time
series data at about 0.2 Hz due to its animated advertisement
pictures that are switched about every 5 s.
Notice that users normally tend to have multiple tabs opened
in a browser. We ﬁnd that using multiple tabs does not affect
our website ﬁngerprinting at all. The reason is that popular
browsers like Chrome and Firefox only send the workloads of
the currently focused tab to the GPU for optimizing resource
utilization. To verify this, we use Chrome or Firefox to open a
website in a tab while having several other tabs with Youtube
playing videos, and we conﬁrm that the EM signal pattern of
interest is not disturbed by other unfocused tabs. An example
is given in Figure 9, where we are watching a Youtube video
in a Chrome tab (0 – 2.8) until we open a new tab (2.8 – 3.2)
with the video still being played in the prior tab, and then we
open Twitter in this new tab (4.2 – 5.4). The ﬁgure illustrates
the above statement clearly. Moreover, the ﬁgure further shows
that we can identify possible start points of webpage rendering
in a long trace.
4
]
k
[
S
2
0
1
Y
b
2
3
3N
33
T b
4
T i
5
5
6
Time (s)
Fig. 9: Time series corresponding to watching a Youtube video
in a Chrome tab and later opening another website in a new
tab (performed w.r.t. NVIDIA RTX 3060)
While using multiple tabs has no impact, changing browser
window size may affect the webpage rendering workloads and
thus has a negative impact on our website ﬁngerprinting. Even
so, it is observed that most people (if not all) just use the full
window size when using a web browser. Therefore, this impact
may not be critical in reality.
C. Evaluation
Because our main intention is to showcase the exploitation
of the newly discovered EM side-channel, the evaluation is
just performed in a closed-world scenario, where a victim is
assumed to visit a list of popular websites and an attacker
tries to pinpoint the webpages browsed by the victim from
the set of possibilities. The open-world scenarios need novelty
detection, which is left as our future work, where we may use
some recently proposed techniques [46], [49].
We evaluate the EM-based website ﬁngerprinting technique
on all the GPUs listed in Table I. The evaluation is focused on
Chrome web browser, since it dominates the market share7. In
the evaluation, no Chrome extensions are installed. Note that,
as studied in [55], some browser extensions can affect what is
rendered on a webpage and hence affect the generated GPU
workloads such that the GPU performance level switching
patterns become affected. In practice, an attacker may need to
take into account the popular extensions (e.g., AdBlock and
Ghostery) during proﬁling.
We try to use different operating systems, but we surpris-
ingly observe that all the AMD GPUs under Windows seldom
change the performance level when opening a website. (This
phenomenon should be caused by its driver, and we leave the
further inspection to our future work.) Therefore, we evaluate
the attack on AMD GPUs only under Linux, where the ofﬁcial
driver AMDGPU 20.20 is used. In contrast, the attack can be
mounted against all the NVIDIA GPUs under either Windows
or Linux. We pair NVIDIA GTX 1080 with Linux where the
ofﬁcial Linux driver 450.51.06 is installed, and pair NVIDIA
GTX 1650 with Windows where the ofﬁcial Windows driver
461.40 is installed. For NVIDIA RTX 3060, we evaluate the
attack under both Windows and Linux. Table III summarizes
these circumstances.
TABLE III: Feasibility of website ﬁngerprinting attack under
Windows and Linux
RX 580
RX 5600
RX 5700
GTX 1080
GTX 1650
RTX 3060
(cid:2)
(cid:3)

*

*

*

*
*

*
*
The symbol  indicates that website ﬁngerprinting can be performed.
The symbol  indicates that website ﬁngerprinting cannot be performed.
The symbol * indicates that the evaluation is performed in this section.
We use an USRP B210 SDR and a RFSPACE UWB-3
antenna to capture the EM signals of interest, and we use the
GNU Radio to manage the entire measurement process and
process the captured raw data. The SDR is tuned to the second
lowest WCK frequency of the corresponding GPU, and is set
7According to NetMarketShare, Chrome has around 70% browser market.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:36 UTC from IEEE Xplore.  Restrictions apply. 
1447
to use a 25 MHz sampling frequency8. More details about this
setup can be found in Appendix A.
TABLE IV: Different spots where EM signals are measured
Nearby Spots
N1
N2
N3
N4
N5
N6
N7
N8
Distance
0.5 m
1 m
0.5 m
1 m
0.5 m
1 m
0.5 m
1 m
Direction
315°
315°
0°
0°
30°
30°
60°
60°
Faraway Spots
F1
F2
F3
F4
F5
F6
Distance
3 m
6 m
3 m
6 m
3 m
6 m
Direction
315°
315°
0°
0°
30°
30°
We select 50 websites according to Alexa Top Sites, which
are listed in Appendix E. For each website, we measure the
EM signals from different directions (which are 315°, 0°, 30°,
and 60°) at different distances (which are 0.5 m, 1 m, 3 m, and
6 m), as listed in Table IV. At each spot, we measure the EM
emanations for 8 seconds when its webpage is opened, and we
repeat this process for 50 times. (To facilitate data collection,
we use a script that repeatedly lets the current tab return to the
blank page, waits for 5 seconds, and opens the target webpage
as well as notes the time for latter trace alignment.) For each
measured signal, we use the techniques described in Section V
to generate a time series. Given the 25 MHz sampling rate,
we use L = M = 250, 000, namely, each subsequence has
250,000 samples and a 250,000-point DFT is used, which
means that the DFT bin resolution is 100 Hz and each derived
point S[k] represents 10 ms.
1) Nearby Scenario: We start with a nearby scenario, where
only the EM signals measured at N1, N2, N3, and N4 are used
to train a classiﬁcation model, and the EM signals measured
at N5, N6, N7, and N8 are used for testing. Given the fact
that the EM signals have been transformed into time series,
we adopt the ResNet model from [59], whose architecture is
duplicated in Appendix D. (As for each website there are 50
EM signals measured at each spot, there are 200 time series
for training and 200 time series for testing with respect to
each website.) The evaluation results in terms of accuracy are
shown in Table V, and the confusion matrices are shown in
Appendix F.
TABLE V: Fingerprinting accuracy in the nearby scenario
RTX 30602
RTX 30601
GTX 1080
GTX 1650
N5
N6
N7
N8
Avg.
Std.
RX 580
85.9%
84.0%
85.3%
86.0%
85.3%
0.8%
RX 5600
83.3%
86.0%
82.6%
83.2%
83.8%
1.3%
RX 5700
74.3%
79.5%
74.0%
70.4%
74.6%
3.2%
81.9%
88.2%
73.3%
72.4%
79.0%
6.5%
84.0%
85.4%
83.6%
78.6%
82.9%
2.6%
80.7%
61.3%
72.4%
70.0%
71.1%
6.9%
56.7%
62.7%
67.6%
68.5%
63.9%
4.7%
Note that, in reality, an attacker can proﬁle the EM signals
from any direction at any distance. Therefore, this scenario
is biased against attackers, and the evaluation underestimates
the achievable accuracy. Even so, from the results, we can see
that the averaged classiﬁcation accuracy is above 63% in all
cases, and it reaches 85.3% in the case of RX 580. Given a
test example, if we randomly guess which of the 50 websites it
corresponds to, the accuracy will be only 2% (i.e., 1/50). Thus,
the results signify that an abundant amount of information can
be leaked through this new EM side channel. (The better and
8Since quadrature sampling is used, it provides 25 MHz bandwidth.
also more pragmatic results after relaxing the limitation on the
capability of attackers can be found in Appendix G.)
An interesting case is to compare the results corresponding
to using the same GPU but under different OSes. The last
two columns of Table V show such a case, where NVIDIA
RTX 3060 is evaluated under Windows (the last column) and
Linux (the second last column). We can observe that, except
for the anomalous spot N5, the performance for any other spot
appears to be very similar, although it is slightly better under
Linux. We also use the Linux-related model to classify the data
captured under Windows and vice versa, but interestingly the
accuracy is just slightly better than random guessing (4.3%
and 5.6% respectively). This means that factors like drivers
and Chrome engines for different OSes can strongly affect the
GPU DVFS behavior when rendering webpages. Notice that,
an attacker can simply perform proﬁling against both OSes and
combine the training data, and thus we train a single model in
such a manner to test the performance. The resultant accuracy
becomes 64.1%, which is very similar to the one in the last
column (i.e., 63.9%). Therefore, this ﬁngerprinting can work
no matter which OS is used on the target.
AMD RX 5600 and RX 5700 do differ but both of them are
based on AMD RDNA 1.0 architecture. We attempt to use the
models trained for them to cross ﬁngerprint each other. The
accuracy of using the model trained for RX 5600 to ﬁngerprint
the signals of RX 5700 is 63.3%, and the accuracy of using
the model trained for RX 5700 to ﬁngerprint the signals of
RX 5600 is 50.6%. Even though they are made by different
vendors and use different GPU chipsets, we can still obtain
reasonable website ﬁngerprinting results. This implies that an
attacker can use the model trained with respect to his/her own
GPU to ﬁngerprint the signals of another similar GPU (of
course, more accurately if two GPU chipsets also match).
2) Faraway Scenario: Next, we perform evaluations in a
faraway scenario, where the EM signals measured at F1, F2,
F3, and F4 are used to train a classiﬁcation model, and the EM
signals measured at F5 and F6 are used for testing. In addition,
we test signals measured at N6 using this model. We evaluate
two GPUs that are AMD RX 580 and NVIDIA GTX 1650.
We place GTX 1650 in the modern-looking computer case,
while we place RX 580 in the all-metal computer case (see
Appendix A for details about these two computer cases). The
evaluation results are shown under “Faraway Scenario 1” in
Table VI, and the confusion matrices are shown in Appendix F.
TABLE VI: Fingerprinting accuracy in the faraway scenarios
Faraway Scenario 1
Faraway Scenario 2
F5
F6
N6
RX 580
80.1%
78.3%
70.9%
GTX 1650
95.4%
93.2%
83.9%
RX 580
83.6%
80.4%
87.0%
GTX 1650
95.6%
94.1%
94.8%
Similar to the previous nearby scenario, the evaluation also
underestimate the achievable accuracy. Nevertheless, we can
observe that the accuracy is very high, and in terms of NVIDIA
GTX 1650, the resulting performance at far distances is even
much better than that at near distances (e.g., it reaches 95.4%
at 3 m and 93.2% at 6 m in comparison to 85.4% at 1 m). We
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:36 UTC from IEEE Xplore.  Restrictions apply. 
1448
discuss a possible reason for this phenomenon in Appendix H.
Moreover, in this scenario, training examples are neither from
N6’s direction nor around its distance, but the result w.r.t. N6
is comparable to that in Table V for GTX 1650 and fairly
decent for RX 580. The results indicate that, as long as the
EM signals of interest can be picked up, the differences in
direction and distance are generally tolerable.
In the second faraway scenario, we include the EM signals
measured at N2 and N4 for training as well, and still test
the EM signals measured at F5, F6, and N6. The evaluation
results are shown under “Faraway Scenario 2” in Table VI. We
can observe that after expanding training examples with the
ones measured at nearby spots N2 and N4, the accuracy w.r.t.
faraway spots F5 or F6 does not change much, but it becomes
much higher w.r.t. N6. The results indicate that, between the
two proﬁling factors distance and direction, distance affects
performance more. Thus, if resources are limited, an attacker
should choose distance over direction during proﬁling.
VII. CASE STUDY 2: KEYSTROKE TIMING INFERENCE
In this section, we present the second case study we have
conducted on the exploitation of the DVFS-induced EM side-
channel vulnerability, which is to detect the keystroke events
and learn the time between successive keystrokes, namely, a
keystroke timing inference attack. Even though such an attack
cannot directly recover the speciﬁc keys pressed by a user,
it is still treated as a type of keylogging [39], because the
knowledge about the keystroke timing can be exploited to infer
the typed passphrases or other words [54], [62]. Thus, this
attack poses a greater hazard to security and privacy.
When combined with the website ﬁngerprinting attack stud-
ied in the last section, it can even cause more serious violation
of user privacy. For instance, when it is detected that a user has
opened the login page of some website, the attacker can try to
recognize the length of typed username and password through
the number of identiﬁed keystrokes and the attacker can further
try to infer the details of such items via the timing information
using some well-studied statistical techniques [39], [54], [62].
A. Keystroke Detection
If we can detect the keystroke events and mark them pre-
cisely on the time axis, it will be a straightforward task to learn
the time between successive keystrokes. Hence, we investigate
if keystrokes are detectable from the EM emanations of the
GPU memory clock, especially during the time when a user
is typing on a webpage.
In essence, typing in a text box on a webpage makes the
affected tiles of the corresponding layer re-rasterized and the
ﬁnal screen image re-composited. As previously mentioned, a
browser often delegates the computation generated by these
operations to GPU for acceleration. According to our earlier
observations, the GPU performance level will be consequently
changed by DVFS, and such level switches can be captured
by monitoring the EM emanations of the GPU memory
clock. Therefore, we expect that the keystroke events can be
detected by exploiting the DVFS-induced EM side-channel
vulnerability in modern GPUs.
To verify this hypothesis, we carry out several experiments.
Firstly, we use keyboard activity generation tools to create
a sequence of fake keystrokes regarding certain patterns and
check if the appearance of the EM signals of the GPU memory