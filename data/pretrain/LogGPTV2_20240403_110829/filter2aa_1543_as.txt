Logging and Auditing in AWS
[ 210 ]
AWS Service Catalog
AWS Service Catalog is a web service that enables organizations to enforce compliance by
creating and managing pre-defined templates of AWS resources and services in the form of
catalogs. These AWS resources and services can be EC2 instances, S3 buckets, EBS volumes,
ELBs, databases, and so on that are required for running your applications in your IT
environment. A Service Catalog will contain pre-approved resources for your users to
provision and ensure a compliance and continuous governance across your AWS account.
AWS Service Catalog allows you to centrally manage your IT services in catalogs. You
control availability, versions, and configuration of these IT services to people, departments,
and cost centers in your organization to ensure compliance and adherence to corporate
standards.
With a Service Catalog in place, your employees can go to project portfolios and quickly
find and provision approved resources required to accomplish their task. When you update
a product with a new version, your users are automatically notified of a new version
update. Moreover, you can restrict resources geographically, such as allowing resources to
be available only in certain AWS regions and allowable IP ranges as well.
This service integrates with AWS marketplace so you can add all products that you
purchase from AWS Marketplace in the products catalog. You also have an option to tag
your products. AWS Service Catalog provides you with a dashboard, products list, and
provisioned products list in the AWS Management Console.
The following image depicts features available in the AWS Service Catalog. You can create
and manage portfolios for your projects or assignments, add products such as AWS services
or other resources in these portfolios along with all versions, configurations, and various
constraints, and you can also manage user access to ensure how these products can be
provisioned, who can use them, and where these products can be used:
Figure 19 - AWS Service Catalog
Logging and Auditing in AWS
[ 211 ]
AWS Security Audit Checklist
As an auditing best practice, ensure that security audits are performed periodically for your
AWS account to meet compliance and regulatory requirements. To begin with, use AWS
Trusted Advisor to audit security for your AWS account. Apart from periodic activity, an
audit should be carried out in case of the following events:
Changes in your organization
One or more AWS services are no longer used
If there is a change in the software or hardware configuration for your resources
If there is a suspicious activity detected
The following is a list of AWS controls to be audited for security:
Governance
Network configuration and management
Asset configuration and management
Logical access control
Data encryption
Security logging and monitoring
Security incident response
Disaster recovery
Inherited controls
Along with this checklist, there are various other guides to help you with auditing your
AWS resources and AWS usage. Some of these guides are as follows and are available in the
AWS auditor learning path at https:/​/​aws.​amazon.​com/​compliance/​auditor-​learning-
path/​:
AWS security audit guidelines
Introduction to auditing the use of AWS
Cybersecurity initiative audit guide
Logging and Auditing in AWS
[ 212 ]
Summary
In this chapter, we went through the following core principles of a security solution in any
IT environment, and understood how they are tightly coupled with each other:
Logging
Auditing
Risk
Compliance
We learnt about various services, tools, and features available in AWS to make our
environment compliant and remain compliant. We looked at logging options available for
major AWS services and how logging can be automated in multiple ways.
We learnt how we can use AWS CloudTrail along with S3 and CloudWatch Logs to
automate storage, analysis, and notification of log files. We deep dived into best practices,
features, use cases, and so on for AWS CloudTrail to understand logging at an extensive
scale in AWS.
Furthermore, we looked into auditing in AWS, various services available for AWS users to
enforce and ensure compliance, providing guardrails, and freedom to users to provision
approved resources. We learnt about the AWS customer compliance center and AWS
auditor learning path, dedicated resources for all those who work closely with audit and
compliance.
In this section, we went over the following AWS services and learnt how each of them play
a part in auditing, risks, and compliance in AWS:
AWS Artifact
AWS Config
AWS Trusted Advisor
AWS Service Catalog
Lastly, we learnt about auditing the security checklist and other guidelines and resources
available for auditing usage in AWS.
In the next chapter, AWS Security Best Practices, we will learn about AWS security best
practices. It will be a culmination of all that we have learnt so far in all the previous
chapters regarding security in AWS. We will learn about solutions to ensure that best
practices are met for all topics such as IAM, VPC, security of data, security of servers, and
so on.
9
AWS Security Best Practices
Security at AWS is job zero. AWS is architected to be one of the most secure cloud
environments with a host of built-in security features that allows it to eliminate most of the
security overhead that is traditionally associated with IT infrastructure. Security is
considered a shared responsibility between AWS and AWS customers where both of them
work together to achieve their security objectives. We have looked at various services, tools,
features, and third-party solutions provided by AWS to secure your assets on AWS. All
customers share the following benefits of AWS security without any additional charges or
resources:
Keeping your data safe
Meeting compliance requirements
Saving money with in-built AWS security features
Scaling quickly without compromising security
An enterprise running business-critical applications on AWS cannot afford to compromise
on the security of these applications or the AWS environment where these applications are
running. As per Gartner, by 2020, 95% of all security breaches or incidents in cloud will be due to
customer error and not from the cloud provider.
Security is a core requirement for any Information Security Management System (ISMS)
to prevent information from unauthorized access; theft, deletion, integrity compromise, and
so on. A typical ISMS is not required to use AWS, however, AWS has a set of best practices
lined up under the following topics to address widely adopted approaches for ensuring
security for ISMS. You can use this approach if you have an ISMS in place:
What shared security responsibility model is and how it works between AWS
and customers
Categorization and identifying your assets
AWS Security Best Practices
[ 214 ]
How to use privileged accounts and groups to control and manage user access to
your data?
Best practices for securing your data, network, servers, and operating systems
How to achieve your security objectives using monitoring and alerting?
For more information on best practices on securing your ISMS, refer to the AWS Security
Center at https:/​/​aws.​amazon.​com/​security/​. You can also use AWS Security Center for
staying updated with the most common security issues and solutions to address these
issues.
Security by design: There are the following two broad aspects of security in AWS:
Security of AWS environment: AWS provides many services, tools, and features
to secure your entire AWS environment including systems, networks, and
resources such as encryption services, logging, configuration rules, identity
management, and so on. 
Security of hosts and applications: Along with your AWS environment, you also
need to secure applications that are running on AWS resources, data stored in the
AWS resources, and operating systems on servers in AWS. This responsibility is
primarily managed by AWS customers. AWS provides all tools and technologies
available on-premises and used by the customer in AWS cloud as well.
Security by design is a four-phase systematic approach to ensure continuous security,
compliance, and real-time auditing at scale. It is applicable for the security of AWS
environment that allows for automation of security controls and streamlined audit
processes. It allows customers to imbibe security and compliance reliably coded into AWS
account. The following are four-phases of the Security by design approach:
Understand your requirements
Build a secure environment
Enforce the use of templates
Perform validation activities
Security in AWS is distributed at multiple layers such as AWS products and services, data
security, application security, and so on. It is imperative to follow best practices for securing
all such products and services to avoid getting your resources compromised in the AWS
cloud.
AWS Security Best Practices
[ 215 ]
Security is the number one priority for AWS and it is a shared responsibility between AWS
and its customers. Security is imperative for all workloads deployed in the AWS
environment. In AWS, storage is cheap, it should be used to store all logs and relevant
records. It is recommended to use AWS managed services and in-built reporting services as
much as possible for security to offload heavy lifting and enabling automation.
In this chapter, we will go over security best practices in AWS. These best practices are a
combination of AWS recommendations, as well as expert advice and most common
practices to follow in order to secure your AWS environment.
Our objective is to have a minimum security baseline for our workloads in the AWS
environment by following these best practices that are spread across AWS services,
products, and features. These security measures allow you to get visibility into the AWS
usage and AWS resources and take corrective actions when required. They also allow
automation at multiple levels, such as at the infrastructure level or at the application level to
enable continuous monitoring and continuous compliance for all workloads deployed in
AWS along with all AWS resources used in your AWS account.
We will learn about security best practices for the following topics:
Shared security responsibility model
IAM
VPC
Data security
Security of servers
Application security
Monitoring, logging, and auditing
We will also look at Cloud Adoption Framework (CAF) that helps organizations
embarking on their cloud journey with standards, best practices, and so on.
We will learn about the security perspective of CAF along with the following four
components:
Preventive
Responsive
Detective
Directive
AWS Security Best Practices
[ 216 ]
Shared security responsibility model
One of the first and most important requirements and security best practice to follow is to
know about the AWS shared security responsibility model. Ensure that all stakeholders
understand their share of security in AWS.
AWS is responsible for the security of cloud and underlying infrastructure that powers
AWS cloud, and customers are responsible for security in the cloud, for anything they put
in, and build on top of the AWS global infrastructure.
It is imperative to have clear guidelines about this shared security responsibility model in
your organization. Identify resources that fall under your share of responsibilities, define
activities that you need to perform, and publish a schedule of these activities to all
stakeholders. The following figure shows the AWS shared security responsibility model:
Figure 1 - AWS shared security responsibility model
IAM security best practices
IAM provides secure access control in your AWS environment to interact with AWS
resources in a controlled manner:
Delete your root access keys: A root account is one that has unrestricted access to
all AWS resources in your account. It is recommended that you delete access
keys, access key IDs, and the secret access key for the root account so that they
cannot be misused. Instead, create a user with the desired permissions and carry
on tasks with this user.
AWS Security Best Practices
[ 217 ]
Enforce MFA: Add an additional layer of security by enforcing MFA for all
privileged users having access to critical or sensitive resources and APIs having a
high blast radius.
Use roles instead of users: Roles are managed by AWS; they are preferred over
IAM users, as credentials for roles are managed by AWS. These credentials are
rotated multiple times in a day and not stored locally on your AWS resource such
as an EC2 instance. 
Use access advisor periodically: You should periodically verify that all users
having access to your AWS account are using their access privileges as assigned.
If you find that users are not using their privilege for a defined period by running
the access advisor report, then you should revoke that privilege and remove the
unused credentials. The following figure shows the security status as per AWS
recommended IAM best practices in the AWS Management Console:
Figure 2 - AWS IAM security best practices
VPC
VPC is your own virtual, secured, scalable network in the AWS cloud that contains your
AWS resources. Let us look at the VPC security best practices:
Create custom VPC: It is recommended to create your own VPC and not use the
default VPC as it has default settings to allow unrestricted inbound and
outbound traffic. 
Monitor VPC activity: Create VPC flow logs to monitor flow of all IP traffic in
your VPC from network resources to identify and restrict any unwanted activity.
Use Network Address Translation (NAT): Keep all your resources that do not
need access to the internet in a private subnet. Use a NAT device, such as a NAT
instance or NAT gateway to allow internet access to resources in a private subnet.
AWS Security Best Practices
[ 218 ]
Control access: Use IAM to control access to the VPC and resources that are part
of the VPC. You can create a fine grained access control using IAM for resources
in your VPC.
Use NACL: Configure NACLs to define which traffic is allowed and denied for
your VPC through the subnet. Control inbound and outbound traffic for your
VPC. Use NACL to block traffic from specific IPs or range of IPs by blacklisting
them.
Implement IDS/IPS: Use AWS solutions for Intrusion Detection System (IDS)
and Intrusion Prevention System (IPS) or reach out to AWS partners at the AWS
marketplace to secure your VPC through one of these systems.
Isolate VPCs: Create separate VPCs as per your use cases to reduce the blast
radius in the event of an incident. For example, create separate VPCs for your
development, testing, and production environments.
Secure VPC: Utilize the web application firewall, firewall virtual appliance, and
firewall solutions from the AWS marketplace to secure your VPC. Configure site
to site VPN for securely transferring data between your on-premise data center
and the AWS VPC. Use the VPC peering feature to enable communication
between two VPCs in the same region. Place ELB in a public subnet and all other
EC2 instances in a private subnet unless they need to access the internet by these
instances.
Tier security groups: Use different security groups for various tiers of your
architecture. For example, have a security group for your web servers and have
another one for database servers. Use security groups for allowing access instead
of hard coded IP ranges while configuring security groups.
Data security
Encryption: As a best practice to secure your data in AWS, encrypt everything!
Encrypt your data at rest in AWS across your storage options. Automation and
omnipresent, that's how you should design your encryption. Encrypting data
helps you in the following ways:
Privacy
Integrity
Reliability
Anonymity
AWS Security Best Practices
[ 219 ]
Use KMS: Encryption using keys rely heavily on availability and security of keys.
If you have the key, you have the data. Essentially, whoever owns the key, owns
the data. So, ensure that you use a reliable and secure key management
infrastructure for managing all your keys. AWS KMS is a fully managed service
available for all your key management needs. Use this to manage your keys for
encrypting data in S3, RDS, EBS volumes, and so on. Also, ensure that you
control access to these keys through IAM permissions and policies.
Rotate your keys: Ensure that keys are rotated periodically, usually quite
frequently. The longer a key lives the higher is the security risk attached to it.
Classify your data: Secure your data by classifying it, such as type of data, is it
confidential information or is it publicly available? What would be the impact of
loss or theft of this data? How sensitive is this data? What are the retention
policies attached with this data? Moreover, classify data based on usage. Once
you classify your data, you can choose the appropriate level of security controls
and storage options in AWS for storing your data.
Secure data in transit: Create a secure listener for your ELB to enable traffic
encryption between clients initiating secure connection such as Secure Socket
Layer (SSL) or Transport Layer Security (TLS) and your AWS ELB. This will
help you secure your data in transit as well for applications running on EC2
instances. You can have similar configurations, known as TLS termination for
other AWS services, such as Redshift, RDS, and all API endpoints. Use VPN, VPC
Peering and Direct Connect to securely transfer data through VPC to other data
sources.
S3 bucket permissions: Ensure that you do not have world readable and world
listable S3 buckets in your account. Restrict access to your buckets using IAM,
access control lists, and bucket policies.
Security of servers
Let us look at best practices to secure your servers in AWS cloud:
Use IAM roles for EC2: Always use IAM roles instead of IAM users for
applications running on your EC2 instances. Assign a role to your EC2 instance
for accessing other AWS services. This way, credentials for the role will not be
stored in your EC2 instance like they are in case of an IAM user.
Use ELB: Put all your EC2 instances behind AWS ELB when applicable. In this
configuration, you will shield your instances from receiving traffic directly from
the internet and they will receive traffic only from the AWS ELB.
AWS Security Best Practices
[ 220 ]
Security group configuration: A security group is a virtual firewall for your
instance. It is imperative to configure it to secure your instances. Avoid allow all
traffic, that is, opening up all ports for CIDR range of 0.0.0.0/0 in your security
group. Instead, allow a limited range of IP addresses to access your EC2
instances. Similarly, for your web servers, allow traffic only on port 80 and port
443 for HTTP and HTTPS traffic.
Use Web Application Firewall (WAF): Use WAF and AWS shields to mitigate
the risk of Denial of Service (DoS) or Distributed Denial of Service (DDoS)
attacks. WAF lets you monitor traffic for your web application. It features deep
packet inspection of all web traffic for your instances and allows you to take
proactive action. You can set rules in WAF to blacklist IP addresses serving
unwanted traffic to your web application.
Secured access: Configure access for your servers using IAM. Use roles,
federated access, or IAM users based on access requirements. Ensure that
.pem files are password protected on all machines that need access to
instances. Rotate credentials such as access keys that are required to access your
instances. Use Secure Token Service (STS) for granting temporary credentials
instead of using IAM user credentials.
Backup and recovery: Use snapshots to back up all data and configuration stored
on your servers. Create Amazon Machine Image (AMI) for your instance to use
in the event of a disaster to recover your instance. Ensure that you are regularly
testing the backup and recovery process for your servers.
EC2 termination protection: Always enable termination protection for your
mission-critical EC2 instances so your instances do not get accidentally deleted
through an API request or through the AWS Management Console.
Application security
Let us look at best practices to secure applications developed and deployed in AWS servers
and other AWS resources:
Use web application firewall: Always use WAF to detect and filter unwanted
HTTP and HTTPS traffic for your web application. Automate WAF rules to block
such traffic by integrating with AWS Lambda. Implement DevOps culture in