“passive OB” in our classiﬁcation, but the number of active
and proactive OM censors is growing [31].
The “Great Firewall of China” employs both active and
proactive censorship. Chinese censors proactively scan for
Tor bridges [61], even resorting to IP spooﬁng on occa-
sion [63]. In 2011, they were able to identify new Tor
bridges in less than 10 minutes [12] by actively probing SSL
trafﬁc [56, Slide 41]. Once a Chinese Tor user connects to a
bridge for the ﬁrst time, several probes requesting connection
are sent from different IP addresses inside China to verify
that this is indeed a bridge [63]. Chinese censors actively
enumerated all bridges offered on Tor’s website through
human interaction over several weeks [55, 56]. They also
67
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
enumerated and blocked all bridge IP addresses provided via
Gmail, leaving Tor with only the social network distribution
strategy and private bridges [56, Slide 24].
Iranian censors perform sophisticated deep-packet inspec-
tion. In 2011, they managed to detect and block all Tor
trafﬁc for several weeks by noticing the difference between
the Difﬁe-Hellman moduli
in “genuine” SSL and Tor’s
SSL. Later, they used the lifetime of Tor’s SSL certiﬁcates
to recognize Tor trafﬁc [56, Slide 38]. Furthermore, Iran
repeatedly blocks all encrypted trafﬁc [32].
Censors can even unplug an entire country from the
Internet, as in Egypt and Libya [56, Slides 29 and 31].
D. Adversary models of parrot circumvention systems
To infer the adversary models of the existing parrot
circumvention systems, we use the statements made in the
papers that describe their respective designs.
SkypeMorph. SkypeMorph acknowledges “probes per-
formed by hosts located in China, aimed quite directly at
Tor bridges” [41, §1, ¶4] and claims unobservability against
“a state-level ISP or authority,” able to “capture, block or
alter the user’s communications based on pre-deﬁned rules
and heuristics” [41, §3, ¶1]. We infer that the SkypeMorph
censor can perform passive, active, and proactive attacks.
SkypeMorph also claims unobservability against powerful
censors who can perform statistical analysis and deep-
packet inspection. For example, the designers state that “the
censorship arms race is shifting toward the characteristics
of connections” [41, §1, ¶5], acknowledging the feasibility
of resource-intensive analysis. They also consider “behav-
ioral heuristics” to “detect a user’s attempt to circumvent
censorship” [41, §3, ¶2], including detection of proxy con-
nections by port knocking: “a TCP SYN packet following
a UDP packet to the same host” [41, §3]. We infer that the
SkypeMorph censor is OM in our classiﬁcation.
SkypeMorph assumes that the censor’s activities are lim-
ited so as not
to interfere with the normal use of the
Internet by “benign” users (similar to CensorSpoofer), and
that the censor does not have prior information about the IP
addresses and Skype IDs of SkypeMorph servers.
StegoTorus. Censors can perform IP, content, and statistical
ﬁltering but only “in real
time on a tremendous trafﬁc
volume” [60, §2.2.2, ¶1]. StegoTorus “is not expected to
resist sophisticated, targeted attacks that might be launched
by a nation-state adversary.” The StegoTorus censor is thus
OB in our classiﬁcation.
StegoTorus considers their threat model to be “similar
to previous research like Telex” [60, §2.2, ¶1]. The Telex
censor can perform passive, active, and proactive attacks,
although the following statement implies that the StegoTorus
censor is not the Telex censor: “. . . potential application-
level attack that involves serving malicious content and then
observing a distinctive trafﬁc pattern; although relevant, we
are more interested in passive attacks that could be carried
out on a large scale” [60, §7].
CensorSpoofer. CensorSpoofer considers a “state-level ad-
versary” who has “sophisticated censorship capabilities of IP
ﬁltering, deep packet inspection, and DNS hijacking, and can
potentially monitor, block, alter, and inject trafﬁc anywhere
within or on the border of its network,” [59, §3.1, ¶1] “can
rent hosts outside of its own network, but otherwise has no
power to monitor or control trafﬁc outside its borders,” and
“has sufﬁcient resources to launch successful insider attacks,
and thus is aware of the same details of the circumvention
system as are known to ordinary users” [59, §3.1, ¶3]. We
infer that the CensorSpoofer censor is OM and capable of
passive, active, and proactive attacks.
V. REQUIREMENTS FOR PARROT CIRCUMVENTION
Parrot circumvention systems aim to make their com-
munications indistinguishable from another protocol. This
requires mimicking every observable aspect of the target
protocol. Not every requirement applies to a given cir-
cumvention system, and the ability to detect discrepancies
between the parrot and the genuine article may vary from
censor to censor. Nevertheless, in Sections VII, VIII, and IX,
we demonstrate that all recently proposed parrot circumven-
tion systems fail so many requirements that their sessions are
recognizable at a low cost even by a very weak censor.
A. Mimicking the protocol in its entirety
Correct. The most basic requirement is to mimic the target
protocol correctly. The parrot’s observable behavior must be
consistent with the protocol speciﬁcation.
SideProtocols. Many modern network protocols include
multiple “side” protocols and control channels that run
alongside the main session. For example, a typical VoIP
session involves three protocols: SIP for signaling the ses-
sion, RTP for streaming the media, and RTCP for controlling
the media stream. Another example is the STUN trafﬁc
generated by VoIP clients residing behind a ﬁrewall.
The parrot must mimic all channels and side protocols of
its target. For example, even a perfect imitation of an RTP
ﬂow is trivial to recognize if, unlike genuine RTP ﬂows, it
is not accompanied by a concurrent RTCP connection.
IntraDepend. Multiple connections comprising a single pro-
tocol session have complex dependences and correlations.
In particular, changes in the main channel often cause
observable activity in the control channel and vice versa.
For example, a typical VoIP session starts with an ex-
change of characteristic messages between the caller and a
SIP server, followed by the initialization of RTP and RTCP
connections between the caller and the callee. The SIP con-
nection is kept alive while the RTP/RTCP connections are
active. The session ends with characteristic SIP messages.
68
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
Dropping RTP packets may cause distinct RTCP activity as
the encoding of the media stream is being adjusted.
The parrot must faithfully mimic all dynamic dependences
and correlations between sub-protocols.
InterDepend. A session of a given protocol may trigger
other protocols. For example, an HTTP request often triggers
multiple DNS queries.
The parrot must (1) trigger other protocols whenever the
target protocol would have triggered them, and (2) mimic the
target protocol’s response when triggered by other protocols.
B. Mimicking reaction to errors and network conditions
Err. One of the easiest ways to tell a parrot from a genuine
protocol implementation is to observe its reaction to errors,
whether natural (e.g., caused by a buggy endpoint) or
artiﬁcial. Errors include malformed packets, invalid requests,
unwanted trafﬁc (e.g., packets from other sessions), etc.
The protocol standard may prescribe how certain errors
should be handled, but error handling is often underspeciﬁed
and left to the discretion of the implementation. Differences
in error handling can thus be used to ﬁngerprint implemen-
tations of common network protocols such as HTTP [30].
Error handling is extremely difﬁcult to mimic and most
parrots fail to do it properly or at all. First, the parrot must
produce at least some reaction to any possible error that
might occur in the target protocol (because any genuine
implementation would react in some way). The second re-
quirement is even more challenging. The parrot’s reactions to
all possible errors must be consistent: they should look as if
they were generated by a particular genuine implementation.
For example, a parrot Web server cannot react to some
erroneous requests as if it were a Microsoft IIS and to others
as if it were an Apache server.
Network. The Internet is a noisy medium, and network ﬂows
may experience packet drops and reorders, repacketization,
high latencies caused by dynamic changes in the throughput
of certain links, etc. Some protocols prescribe standard
reactions to changes in network conditions: for example,
TCP uses sequence numbers and a congestion control mech-
anism, while live-video environments have multiple patented
automatic repeat request (ARQ) mechanisms.2 Streaming
media protocols in particular react in very distinct ways
to congestion and other network issues. In general, packet
losses and congestion cause media applications to lower
codec quality and/or adjust transmission rates.
The parrot must mimic the target protocol’s responses to
all possible changes in network conditions, whether natural
or artiﬁcially induced. Furthermore, if a side protocol is
used—for example, to signal codec renegotiation—it must
be mimicked, too (see the InterDep requirement).
2http://www.techex.co.uk/other/arq-video-packet-resend
C. Mimicking typical trafﬁc
Content. Many network protocols have speciﬁc formats for
headers and payloads, all of which must be mimicked by
the parrot. For example, HTTP headers contain information
about the payload, while port numbers in IP headers reﬂect
higher-level protocols. Encryption does not conceal all of
this information. For example, headers of encrypted Skype
packets reveal their type and other information [10].
Message payloads generated by the parrot must be in-
distinguishable, too. In particular, imitated ﬁles must be
metadata-compatible with the genuine ﬁles. For example,
imitated PDF ﬁles must contain correct xref tables and other
metadata typically found in real PDF ﬁles.
Patterns. Many protocols produce characteristic patterns
of packet sizes, counts,
intervals, and ﬂow
rates. These patterns are often stable across the network,
observable even when packet contents are encrypted, and
can be exploited for trafﬁc analysis [42].
inter-packet
The parrot must produce network ﬂows all of whose ob-
servable characteristics, including packet sizes and timings,
are indistinguishable from the genuine protocol.
Users. User behavior often produces recognizable patterns
at the network level. For example, a typical Skype user only
makes a few Skype calls at a time. A parrot making hundreds
of concurrent Skype calls thus appears very anomalous and
can be easily distinguished from a genuine Skype client.
Similarly, a typical email user only sends and receives
a certain number of messages per day [48]. Users can
be ﬁngerprinted based on the frequency of their system
usage, number of connection peers, typical volume of trafﬁc
associated with each use, etc.
The parrot must faithfully mimic typical user behavior.
Geo. Observable behavior of protocol endpoints—including
their routing decisions, chosen peers, and even trafﬁc con-
tents—may depend on their geographic location. For ex-
ample, a Web server may respond differently to the same
request depending on its origin; network packets sent by a
remote peer enter a given ISP at different points depend-
ing on the peer’s location; SIP-based VoIP clients always
connect to the geographically closest SIP server, etc.
Some implementations of common protocols are country-
speciﬁc. For example, Skype users in mainland China use a
special implementation of Skype called TOM-Skype which
has built-in surveillance functionality [34]. Any parrot that
mimics a different Skype client is likely to stand out.
The parrot must mimic all geography-speciﬁc aspects of
the genuine protocol and its local implementations.
D. Mimicking implementation-speciﬁc artifacts
Soft. A protocol speciﬁcation can be realized by multiple
implementations. For example, there are dozens of Web
browsers and Web servers. For inter-operability, each imple-
mentation generally complies with its (often idiosyncratic)
69
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
interpretation of the standard, but often with characteristic
quirks and tell-tale signs. Sometimes these are explicit—for
example, HTTP request headers include information about
the browser—but even unintentional discrepancies can be
used to ﬁngerprint implementations and different versions
of the same implementation [30]. For example, different
versions of Apache Web server contain different bugs, which
can be triggered by a remote user to identify the version.
It is not enough to mimic or implement the protocol
speciﬁcation. The parrot must mimic a speciﬁc version of
a speciﬁc popular implementation, down to every last bug,
whether known or unknown! Any deviation can be used to
distinguish the parrot from the known implementations.
OS. Network protocols are usually designed to be oblivious
to the endpoint’s operating system (OS), yet the latter can
often be revealed by the recognizable characteristics of
speciﬁc client and server software. For instance, the IETF
standard requires that the initial sequence number of a TCP
connection be randomly generated. Different OSes, how-
ever, use different sequence number generation algorithms,
enabling OS identiﬁcation [43]. This information is also
explicitly included in HTTP headers.
The parrot must generate consistent OS ﬁngerprints. In
particular, when mimicking a network service, OS ﬁnger-
prints should not change frequently because servers’ OSes
do not change frequently.
VI. EXPERIMENTAL SETUP
We obtained the latest implementations of all analyzed
parrot systems and their imitation targets (Skype, Ekiga, etc.)
from their respective websites and/or authors.
For all Skype and CensorSpoofer experiments, we exe-
cuted the software in VirtualBox3 virtual machines (VMs),
running on a Funtoo Linux machine with an Intel i5 CPU
and 4GB of RAM. Skype clients were executed in two
Windows 7 VMs; SkypeMorph and StegoTorus-Embed in
separate Ubuntu 12.10 VMs. The VMs were connected
through Virtual Distributed Ethernet (VDE) [58], which
provides tools for network perturbation. We developed our
own plugins for VDE that allow us to drop packets at
different rates and modify packet contents on the wire. Each
VM is connected to a separate virtual VDE switch, and the
switches are connected to a central switch, which provides
DHCP connectivity to the Internet.
Experiments with StegoTorus clients and servers in Sec-
tion VIII were executed on two physical Ubuntu 12.04
machines, using the statistics module of iptables4 to drop
packets at different rates. Our StegoTorus server uses a real
Tor bridge to connect to the Tor network. VoIP clients in
Section IX were analyzed on a Windows 7 VM, Ubuntu
12.04 VM, and Mac OS X 10.7. The SIP probing test was
3https://www.virtualbox.org/
4http://www.netﬁlter.org/
implemented in Python and performed over a non-ﬁrewalled
Ubuntu 12.04 server with a public IP address.
VII. DETECTING SKYPE IMITATORS
We demonstrate that parrot circumvention systems that
aim to imitate Skype—in particular, SkypeMorph and
StegoTorus-Embed5—can be easily distinguished from gen-
uine Skype and thus fail to achieve unobservability.
First, we show that their imitation of Skype is incom-
plete and can thus be recognized even by low-cost, passive
attacks. Next, we describe hypothetical improved versions
of SkypeMorph and StegoTorus, designed speciﬁcally to
imitate Skype behaviors that are missing in their current
prototypes. We then demonstrate that even these hypothetical
improvements can be easily distinguished from genuine
Skype by active and proactive attacks.
A. Passive attacks
We present two classes of passive attacks. The ﬁrst uses
the Skype detection tests from Appendix A-B to recognize
partial imitations. The second exploits the fact that both
SkypeMorph and StegoTorus-Embed rely on recorded Skype
traces to mimic packet timings and sizes. All attacks have
been empirically conﬁrmed by (1) executing SkypeMorph
and StegoTorus prototypes and (2) analyzing their code.