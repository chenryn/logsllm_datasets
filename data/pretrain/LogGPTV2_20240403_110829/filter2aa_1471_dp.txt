strings that are interpreted dynamically and can be relative or absolute paths
that refer to locations on any storage device, including ones on a different
local volume or even a share on a different system. This means that symbolic
links don’t actually increase the reference count of the original file, so
deleting the original file will result in the loss of the data, and a symbolic link
that points to a nonexisting file will be left behind. Finally, unlike hard links,
symbolic links can point to directories, not just files, which gives them an
added advantage.
For example, if the path C:\Drivers is a directory symbolic link that
redirects to %SystemRoot%\System32\Drivers, an application reading
C:\Drivers\Ntfs.sys actually reads %SystemRoot%\System\Drivers\Ntfs.sys.
Directory symbolic links are a useful way to lift directories that are deep in a
directory tree to a more convenient depth without disturbing the original
tree’s structure or contents. The example just cited lifts the Drivers directory
to the volume’s root directory, reducing the directory depth of Ntfs.sys from
three levels to one when Ntfs.sys is accessed through the directory symbolic
link. File symbolic links work much the same way—you can think of them as
shortcuts, except they’re actually implemented on the file system instead of
being .lnk files managed by Windows Explorer. Just like hard links, symbolic
links can be created with the mklink utility (without the /H option) or through
the CreateSymbolicLink API.
Because certain legacy applications might not behave securely in the
presence of symbolic links, especially across different machines, the creation
of symbolic links requires the SeCreateSymbolicLink privilege, which is
typically granted only to administrators. Starting with Windows 10, and only
if Developer Mode is enabled, callers of CreateSymbolicLink API can
additionally specify the SYMBOLIC_LINK_FLAG_
ALLOW_UNPRIVILEGED_CREATE flag to overcome this limitation (this
allows a standard user is still able to create symbolic links from the command
prompt window). The file system also has a behavior option called
SymLinkEvaluation that can be configured with the following command:
Click here to view code image
fsutil behavior set SymLinkEvaluation
By default, the Windows default symbolic link evaluation policy allows
only local-to-local and local-to-remote symbolic links but not the opposite, as
shown here:
Click here to view code image
D:\>fsutil behavior query SymLinkEvaluation
Local to local symbolic links are enabled
Local to remote symbolic links are enabled.
Remote to local symbolic links are disabled.
Remote to Remote symbolic links are disabled.
Symbolic links are implemented using an NTFS mechanism called reparse
points. (Reparse points are discussed further in the section “Reparse points”
later in this chapter.) A reparse point is a file or directory that has a block of
data called reparse data associated with it. Reparse data is user-defined data
about the file or directory, such as its state or location that can be read from
the reparse point by the application that created the data, a file system filter
driver, or the I/O manager. When NTFS encounters a reparse point during a
file or directory lookup, it returns the STATUS_REPARSE status code, which
signals file system filter drivers that are attached to the volume and the I/O
manager to examine the reparse data. Each reparse point type has a unique
reparse tag. The reparse tag allows the component responsible for
interpreting the reparse point’s reparse data to recognize the reparse point
without having to check the reparse data. A reparse tag owner, either a file
system filter driver or the I/O manager, can choose one of the following
options when it recognizes reparse data:
■    The reparse tag owner can manipulate the path name specified in the
file I/O operation that crosses the reparse point and let the I/O
operation reissue with the altered path name. Junctions (described
shortly) take this approach to redirect a directory lookup, for example.
■    The reparse tag owner can remove the reparse point from the file,
alter the file in some way, and then reissue the file I/O operation.
There are no Windows functions for creating reparse points. Instead,
processes must use the FSCTL_SET_REPARSE_POINT file system control
code with the Windows DeviceIoControl function. A process can query a
reparse point’s contents with the FSCTL_GET_REPARSE_POINT file
system control code. The FILE_ATTRIBUTE_REPARSE_POINT flag is set
in a reparse point’s file attributes, so applications can check for reparse
points by using the Windows GetFileAttributes function.
Another type of reparse point that NTFS supports is the junction (also
known as Volume Mount point). Junctions are a legacy NTFS concept and
work almost identically to directory symbolic links, except they can only be
local to a volume. There is no advantage to using a junction instead of a
directory symbolic link, except that junctions are compatible with older
versions of Windows, while directory symbolic links are not.
As seen in the previous section, modern versions of Windows now allow
the creation of reparse points that can point to non-empty directories. The
system behavior (which can be controlled from minifilters drivers) depends
on the position of the reparse point in the target file’s full path. The filter
manager, NTFS, and ReFS file system drivers use the exposed
FsRtlIsNonEmptyDirectoryReparsePointAllowed API to detect if a reparse
point type is allowed on non-empty directories.
EXPERIMENT: Creating a symbolic link
This experiment shows you the main difference between a
symbolic link and a hard link, even when dealing with files on the
same volume. Create a symbolic link called soft.txt as shown here,
pointing to the test.txt file created in the previous experiment:
Click here to view code image
C:\>mklink soft.txt test.txt
symbolic link created for soft.txt > test.txt
If you list the directory’s contents, you’ll notice that the
symbolic link doesn’t have a file size and is identified by the
 type. Furthermore, you’ll note that the creation time
is that of the symbolic link, not of the target file. The symbolic link
can also have security permissions that are different from the
permissions on the target file.
Click here to view code image
C:\>dir *.txt
 Volume in drive C is OS
 Volume Serial Number is 38D4-EA71
 Directory of C:\
05/12/2012  11:55 PM                 8 hard.txt
05/13/2012  12:28 AM          soft.txt [test.txt]
05/12/2012  11:55 PM                 8 test.txt
               3 File(s)             16 bytes
               0 Dir(s)  10,636,480,512 bytes free
Finally, if you delete the original test.txt file, you can verify that
both the hard link and symbolic link still exist but that the symbolic
link does not point to a valid file anymore, while the hard link
references the file data.
Compression and sparse files
NTFS supports compression of file data. Because NTFS performs
compression and decompression procedures transparently, applications don’t
have to be modified to take advantage of this feature. Directories can also be
compressed, which means that any files subsequently created in the directory
are compressed.
Applications compress and decompress files by passing DeviceIoControl
the FSCTL_SET_COMPRESSION file system control code. They query the
compression state of a file or directory with the
FSCTL_GET_COMPRESSION file system control code. A file or directory
that is compressed has the FILE_ATTRIBUTE_COMPRESSED flag set in its
attributes, so applications can also determine a file or directory’s
compression state with GetFileAttributes.
A second type of compression is known as sparse files. If a file is marked
as sparse, NTFS doesn’t allocate space on a volume for portions of the file
that an application designates as empty. NTFS returns 0-filled buffers when
an application reads from empty areas of a sparse file. This type of
compression can be useful for client/server applications that implement
circular-buffer logging, in which the server records information to a file, and
clients asynchronously read the information. Because the information that the
server writes isn’t needed after a client has read it, there’s no need to store
the information in the file. By making such a file sparse, the client can
specify the portions of the file it reads as empty, freeing up space on the
volume. The server can continue to append new information to the file
without fear that the file will grow to consume all available space on the
volume.
As with compressed files, NTFS manages sparse files transparently.
Applications specify a file’s sparseness state by passing the
FSCTL_SET_SPARSE file system control code to DeviceIoControl. To set a
range of a file to empty, applications use the FSCTL_SET_ZERO_DATA
code, and they can ask NTFS for a description of what parts of a file are
sparse by using the control code FSCTL_QUERY_ALLOCATED _RANGES.
One application of sparse files is the NTFS change journal, described next.
Change logging
Many types of applications need to monitor volumes for file and directory
changes. For example, an automatic backup program might perform an initial
full backup and then incremental backups based on file changes. An obvious
way for an application to monitor a volume for changes is for it to scan the
volume, recording the state of files and directories, and on a subsequent scan
detect differences. This process can adversely affect system performance,
however, especially on computers with thousands or tens of thousands of
files.
An alternate approach is for an application to register a directory
notification by using the FindFirstChangeNotification or
ReadDirectoryChangesW Windows function. As an input parameter, the
application specifies the name of a directory it wants to monitor, and the
function returns whenever the contents of the directory change. Although this
approach is more efficient than volume scanning, it requires the application
to be running at all times. Using these functions can also require an
application to scan directories because FindFirstChangeNotification doesn’t
indicate what changed—just that something in the directory has changed. An
application can pass a buffer to ReadDirectoryChangesW that the FSD fills
in with change records. If the buffer overflows, however, the application
must be prepared to fall back on scanning the directory.
NTFS provides a third approach that overcomes the drawbacks of the first
two: an application can configure the NTFS change journal facility by using
the DeviceIoControl function’s FSCTL_CREATE_USN_ JOURNAL file
system control code (USN is update sequence number) to have NTFS record
information about file and directory changes to an internal file called the
change journal. A change journal is usually large enough to virtually
guarantee that applications get a chance to process changes without missing
any. Applications use the FSCTL_QUERY_USN_JOURNAL file system
control code to read records from a change journal, and they can specify that
the DeviceIoControl function not complete until new records are available.
Per-user volume quotas
Systems administrators often need to track or limit user disk space usage on
shared storage volumes, so NTFS includes quota-management support. NTFS
quota-management support allows for per-user specification of quota
enforcement, which is useful for usage tracking and tracking when a user
reaches warning and limit thresholds. NTFS can be configured to log an
event indicating the occurrence to the System event log if a user surpasses his
warning limit. Similarly, if a user attempts to use more volume storage then
her quota limit permits, NTFS can log an event to the System event log and
fail the application file I/O that would have caused the quota violation with a
“disk full” error code.
NTFS tracks a user’s volume usage by relying on the fact that it tags files
and directories with the security ID (SID) of the user who created them. (See
Chapter 7, “Security,” in Part 1 for a definition of SIDs.) The logical sizes of
files and directories a user owns count against the user’s administrator-
defined quota limit. Thus, a user can’t circumvent his or her quota limit by
creating an empty sparse file that is larger than the quota would allow and
then fill the file with nonzero data. Similarly, whereas a 50 KB file might
compress to 10 KB, the full 50 KB is used for quota accounting.
By default, volumes don’t have quota tracking enabled. You need to use
the Quota tab of a volume’s Properties dialog box, shown in Figure 11-25,
to enable quotas, to specify default warning and limit thresholds, and to
configure the NTFS behavior that occurs when a user hits the warning or
limit threshold. The Quota Entries tool, which you can launch from this
dialog box, enables an administrator to specify different limits and behavior
for each user. Applications that want to interact with NTFS quota
management use COM quota interfaces, including IDiskQuotaControl,
IDiskQuotaUser, and IDiskQuotaEvents.
Figure 11-25 The Quota Settings dialog accessible from the volume’s
Properties window.
Link tracking
Shell shortcuts allow users to place files in their shell namespaces (on their
desktops, for example) that link to files located in the file system namespace.
The Windows Start menu uses shell shortcuts extensively. Similarly, object
linking and embedding (OLE) links allow documents from one application to
be transparently embedded in the documents of other applications. The
products of the Microsoft Office suite, including PowerPoint, Excel, and
Word, use OLE linking.
Although shell and OLE links provide an easy way to connect files with
one another and with the shell namespace, they can be difficult to manage if
a user moves the source of a shell or OLE link (a link source is the file or
directory to which a link points). NTFS in Windows includes support for a
service application called distributed link-tracking, which maintains the
integrity of shell and OLE links when link targets move. Using the NTFS
link-tracking support, if a link target located on an NTFS volume moves to
any other NTFS volume within the originating volume’s domain, the link-
tracking service can transparently follow the movement and update the link
to reflect the change.
NTFS link-tracking support is based on an optional file attribute known as
an object ID. An application can assign an object ID to a file by using the
FSCTL_CREATE_OR_GET_OBJECT_ID (which assigns an ID if one isn’t
already assigned) and FSCTL_SET_OBJECT_ID file system control codes.
Object IDs are queried with the FSCTL_CREATE_OR_GET_OBJECT_ID
and FSCTL_GET_OBJECT_ID file system control codes. The
FSCTL_DELETE_OBJECT_ID file system control code lets applications
delete object IDs from files.
Encryption
Corporate users often store sensitive information on their computers.
Although data stored on company servers is usually safely protected with
proper network security settings and physical access control, data stored on
laptops can be exposed when a laptop is lost or stolen. NTFS file permissions
don’t offer protection because NTFS volumes can be fully accessed without
regard to security by using NTFS file-reading software that doesn’t require
Windows to be running. Furthermore, NTFS file permissions are rendered
useless when an alternate Windows installation is used to access files from an
administrator account. Recall from Chapter 6 in Part 1 that the administrator
account has the take-ownership and backup privileges, both of which allow it
to access any secured object by overriding the object’s security settings.
NTFS includes a facility called Encrypting File System (EFS), which users
can use to encrypt sensitive data. The operation of EFS, as that of file
compression, is completely transparent to applications, which means that file
data is automatically decrypted when an application running in the account of
a user authorized to view the data reads it and is automatically encrypted
when an authorized application changes the data.
 Note
NTFS doesn’t permit the encryption of files located in the system
volume’s root directory or in the \Windows directory because many files
in these locations are required during the boot process, and EFS isn’t
active during the boot process. BitLocker is a technology much better
suited for environments in which this is a requirement because it supports
full-volume encryption. As we will describe in the next paragraphs,
Bitlocker collaborates with NTFS for supporting file-encryption.
EFS relies on cryptographic services supplied by Windows in user mode,
so it consists of both a kernel-mode component that tightly integrates with
NTFS as well as user-mode DLLs that communicate with the Local Security
Authority Subsystem (LSASS) and cryptographic DLLs.
Files that are encrypted can be accessed only by using the private key of an
account’s EFS private/public key pair, and private keys are locked using an
account’s password. Thus, EFS-encrypted files on lost or stolen laptops can’t
be accessed using any means (other than a brute-force cryptographic attack)
without the password of an account that is authorized to view the data.
Applications can use the EncryptFile and DecryptFile Windows API
functions to encrypt and decrypt files, and FileEncryptionStatus to retrieve a
file or directory’s EFS-related attributes, such as whether the file or directory
is encrypted. A file or directory that is encrypted has the
FILE_ATTRIBUTE_ENCRYPTED flag set in its attributes, so applications
can also determine a file or directory’s encryption state with
GetFileAttributes.
POSIX-style delete semantics
The POSIX Subsystem has been deprecated and is no longer available in the
Windows operating system. The Windows Subsystem for Linux (WSL) has
replaced the original POSIX Subsystem. The NTFS file system driver has
been updated to unify the differences between I/O operations supported in
Windows and those supported in Linux. One of these differences is provided
by the Linux unlink (or rm) command, which deletes a file or a folder. In
Windows, an application can’t delete a file that is in use by another
application (which has an open handle to it); conversely, Linux usually
supports this: other processes continue to work well with the original deleted
file. To support WSL, the NTFS file system driver in Windows 10 supports a
new operation: POSIX Delete.
The Win32 DeleteFile API implements standard file deletion. The target
file is opened (a new handle is created), and then a disposition label is
attached to the file through the NtSetInformationFile native API. The label
just communicates to the NTFS file system driver that the file is going to be
deleted. The file system driver checks whether the number of references to
the FCB (File Control Block) is equal to 1, meaning that there is no other
outstanding open handle to the file. If so, the file system driver marks the file
as “deleted on close” and then returns. Only when the handle to the file is
closed does the IRP_MJ_CLEANUP dispatch routine physically remove the
file from the underlying medium.
A similar architecture is not compatible with the Linux unlink command.
The WSL subsystem, when it needs to erase a file, employs POSIX-style
deletion; it calls the NtSetInformationFile native API with the new
FileDispositionInformationEx information class, specifying a flag
(FILE_DISPOSITION_POSIX_SEMANTICS). The NTFS file system driver
marks the file as POSIX deleted by inserting a flag in its Context Control
Block (CCB, a data structure that represents the context of an open instance
of an on-disk object). It then re-opens the file with a special internal routine
and attaches the new handle (which we will call the PosixDeleted handle) to
the SCB (stream control block). When the original handle is closed, the
NTFS file system driver detects the presence of the PosixDeleted handle and
queues a work item for closing it. When the work item completes, the
Cleanup routine detects that the handle is marked as POSIX delete and
physically moves the file in the “\$Extend\$Deleted” hidden directory. Other
applications can still operate on the original file, which is no longer in the
original namespace and will be deleted only when the last file handle is
closed (the first delete request has marked the FCB as delete-on-close).
If for any unusual reason the system is not able to delete the target file
(due to a dangling reference in a defective kernel driver or due to a sudden
power interruption), the next time that the NTFS file system has the chance
to mount the volume, it checks the \$Extend\$Deleted directory and deletes
every file included in it by using standard file deletion routines.
 Note
Starting with the May 2019 Update (19H1), Windows 10 now uses
POSIX delete as the default file deletion method. This means that the
DeleteFile API uses the new behavior.
EXPERIMENT: Witnessing POSIX delete
In this experiment, you’re going to witness a POSIX delete through
the FsTool application, which is available in this book’s
downloadable resources. Make sure you’re using a copy of
Windows Server 2019 (RS5). Indeed, newer client releases of
Windows implement POSIX deletions by default. Start by opening
a command prompt window. Use the /touch FsTool command-line
argument to generate a txt file that’s exclusively used by the
application:
Click here to view code image
D:\>FsTool.exe /touch d:\Test.txt
NTFS / ReFS Tool v0.1
Copyright (C) 2018 Andrea Allievi (AaLl86)
Touching "d:\Test.txt" file... Success.
   The File handle is valid... Press Enter to write to the 
file.
When requested, instead of pressing the Enter key, open another
command prompt window and try to open and delete the file:
Click here to view code image
D:\>type Test.txt
The process cannot access the file because it is being used 
by another process.
D:\>del Test.txt
D:\>dir Test.txt
 Volume in drive D is DATA
 Volume Serial Number is 62C1-9EB3
 Directory of D:\
12/13/2018  12:34 AM                49 Test.txt
               1 File(s)             49 bytes
               0 Dir(s)  1,486,254,481,408 bytes free
As expected, you can’t open the file while FsTool has exclusive
access to it. When you try to delete the file, the system marks it for
deletion, but it’s not able to remove it from the file system
namespace. If you try to delete the file again with File Explorer,
you can witness the same behavior. When you press Enter in the
first command prompt window and you exit the FsTool application,
the file is actually deleted by the NTFS file system driver.
The next step is to use a POSIX deletion for getting rid of the
file. You can do this by specifying the /pdel command-line
argument to the FsTool application. In the first command prompt
window, restart FsTool with the /touch command-line argument