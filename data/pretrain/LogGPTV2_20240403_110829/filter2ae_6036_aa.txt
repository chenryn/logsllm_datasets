## 简介
> Nuclei is a fast tool for configurable targeted vulnerability scanning based
> on templates offering massive extensibility and ease of use.
>
> Github: 
和以前基于python的`POC-T`类似，不过它是用`Go`编写，并且基于yaml编写模板。
这类的工具挺多的，流程也都大同小异，重要的想让人使用的动力，主要还是来自于生态吧。
nuclei基于社区提供了很多可以白嫖的模板，本着这一点，本文就是记录一下如何在自己扫描器中调用nuclei的模板，以及记录一些有趣的、以及以后可能也会用到的技术细节。
## 有趣的细节
### 相同的请求
相同的请求可以合并，就不需要发送两次啦
`v2\pkg\protocols\http\cluster.go`
    package http
    import (
        "github.com/projectdiscovery/nuclei/v2/pkg/protocols/common/compare"
    )
    // CanCluster returns true if the request can be clustered.
    //
    // This used by the clustering engine to decide whether two requests
    // are similar enough to be considered one and can be checked by
    // just adding the matcher/extractors for the request and the correct IDs.
    func (r *Request) CanCluster(other *Request) bool {
        if len(r.Payloads) > 0 || len(r.Raw) > 0 || len(r.Body) > 0 || r.Unsafe {
            return false
        }
        if r.Method != other.Method ||
            r.MaxRedirects != other.MaxRedirects ||
            r.CookieReuse != other.CookieReuse ||
            r.Redirects != other.Redirects {
            return false
        }
        if !compare.StringSlice(r.Path, other.Path) {
            return false
        }
        if !compare.StringMap(r.Headers, other.Headers) {
            return false
        }
        return true
    }
  * 比较模板请求中的method，最大重定向数，是否共享cookie请求，是否重定向
  * 比较请求的path
  * 比较请求的header
compare的细节函数
    package compare
    import "strings"
    // StringSlice 比较两个字符串切片是否相等
    func StringSlice(a, b []string) bool {
        // If one is nil, the other must also be nil.
        if (a == nil) != (b == nil) {
            return false
        }
        if len(a) != len(b) {
            return false
        }
        for i := range a {
            if !strings.EqualFold(a[i], b[i]) {
                return false
            }
        }
        return true
    }
    // StringMap 比较两个字符串map是否相同
    func StringMap(a, b map[string]string) bool {
        // If one is nil, the other must also be nil.
        if (a == nil) != (b == nil) {
            return false
        }
        if len(a) != len(b) {
            return false
        }
        for k, v := range a {
            if w, ok := b[k]; !ok || !strings.EqualFold(v, w) {
                return false
            }
        }
        return true
    }
### client报告
nuclei支持github、gitlab、jira、markdown好几种报告模式，刚开始以为是只报告bug呢，后面知道，发现新的结果也会报告的。
看一下生成markdown的描述  
报告的细节很详细，`请求细节`和`返回细节`都会报告出来。
### headless模拟
nuclei的最新版本支持基于chromium的headless访问，用于直接模拟浏览器访问，在`v2\pkg\protocols\headless`
使用的库是`https://github.com/go-rod/rod`
我看源码结构里面定义了很多`事件`,后面应该是想基于yaml来模拟操作浏览器吧？
没有细看实现的完整度有多少，如果这个实现了，就太厉害了 - =
### interface转换
go类型中的interface可以看成是任意类型，但是在使用时需要将他转换成我们指定的类型，nuclei实现了这个方法。未来可能也会用到记录下。
    // Taken from https://github.com/spf13/cast.
    package types
    import (
        "fmt"
        "strconv"
        "strings"
    )
    // ToString converts an interface to string in a quick way
    func ToString(data interface{}) string {
        switch s := data.(type) {
        case nil:
            return ""
        case string:
            return s
        case bool:
            return strconv.FormatBool(s)
        case float64:
            return strconv.FormatFloat(s, 'f', -1, 64)
        case float32:
            return strconv.FormatFloat(float64(s), 'f', -1, 32)
        case int:
            return strconv.Itoa(s)
        case int64:
            return strconv.FormatInt(s, 10)
        case int32:
            return strconv.Itoa(int(s))
        case int16:
            return strconv.FormatInt(int64(s), 10)
        case int8:
            return strconv.FormatInt(int64(s), 10)
        case uint:
            return strconv.FormatUint(uint64(s), 10)
        case uint64:
            return strconv.FormatUint(s, 10)
        case uint32:
            return strconv.FormatUint(uint64(s), 10)
        case uint16:
            return strconv.FormatUint(uint64(s), 10)
        case uint8:
            return strconv.FormatUint(uint64(s), 10)
        case []byte:
            return string(s)
        case fmt.Stringer:
            return s.String()
        case error:
            return s.Error()
        default:
            return fmt.Sprintf("%v", data)
        }
    }
    // ToStringSlice casts an interface to a []string type.
    func ToStringSlice(i interface{}) []string {
        var a []string
        switch v := i.(type) {
        case []interface{}:
            for _, u := range v {
                a = append(a, ToString(u))
            }
            return a
        case []string:
            return v
        case string:
            return strings.Fields(v)
        case interface{}:
            return []string{ToString(v)}
        default:
            return nil
        }
    }
    // ToStringMap casts an interface to a map[string]interface{} type.
    func ToStringMap(i interface{}) map[string]interface{} {
        var m = map[string]interface{}{}
        switch v := i.(type) {
        case map[interface{}]interface{}:
            for k, val := range v {
                m[ToString(k)] = val
            }
            return m
        case map[string]interface{}:
            return v
        default:
            return nil
        }
    }
### DSL语法
nuclei的模板语法支持很多静态的匹配条件，regx，word等等，同时也引入了dsl语法，让静态的yaml文件具备了调用函数的特性。
一个nuclei模板
    id: CVE-2018-18069
    info:
      name: Wordpress unauthenticated stored xss
      author: nadino
      severity: medium
      description: process_forms in the WPML (aka sitepress-multilingual-cms) plugin through 3.6.3 for WordPress has XSS via any locale_file_name_ parameter (such as locale_file_name_en) in an authenticated theme-localization.php request to wp-admin/admin.php.
      tags: cve,cve2018,wordpress,xss
    requests:
      - method: POST
        path:
          - "{{BaseURL}}/wp-admin/admin.php"
        body: 'icl_post_action=save_theme_localization&locale_file_name_en=EN\"> 这个库，上面有基本用法
    expression, err := govaluate.NewEvaluableExpression("(mem_used / total_mem) * 100");
    parameters := make(map[string]interface{}, 8)
    parameters["total_mem"] = 1024;
    parameters["mem_used"] = 512;
    result, err := expression.Evaluate(parameters);
    // result is now set to "50.0", the float64 value.
这个库已经3年没有更新了。后面我在用这个库的时候发现一个bug。。就是dsl的函数参数会与自带的语法冲突，官方方案是使用转义，但是这个对于dsl的人来说太痛苦，连`-`都要转义是什么滋味？
后面我fork了一份解决了，在使用参数的时候不用管转义的问题了。
官方太久没更新，所以也没提pull request
### projectfile
projectfile是nuclei提供了可以保存项目的选项。
内部实现是通过一个`map`保存了所有请求的包以及返回结果，key是对`请求体`(request struct)序列化后进行sha256运算。
再次读取时初始化这个就好了，其中用到了`gob`对数据结构进行序列化和反序列化操作。
`v2\pkg\projectfile\httputil.go`
    package projectfile
    import (
        "bytes"
        "crypto/sha256"
        "encoding/gob"
        "encoding/hex"
        "io"
        "io/ioutil"
        "net/http"
    )
    func hash(v interface{}) (string, error) {
        data, err := marshal(v)
        if err != nil {
            return "", err
        }
        sh := sha256.New()
        _, err = io.WriteString(sh, string(data))
        if err != nil {
            return "", err
        }
        return hex.EncodeToString(sh.Sum(nil)), nil
    }
    func marshal(data interface{}) ([]byte, error) {
        var b bytes.Buffer
        enc := gob.NewEncoder(&b)
        err := enc.Encode(data)
        if err != nil {
            return nil, err
        }
        return b.Bytes(), nil
    }
    func unmarshal(data []byte, obj interface{}) error {
        dec := gob.NewDecoder(bytes.NewBuffer(data))
        err := dec.Decode(obj)
        if err != nil {
            return err
        }
        return nil
    }
    type HTTPRecord struct {
        Request  []byte
        Response *InternalResponse
    }
    type InternalRequest struct {
        Target    string
        HTTPMajor int
        HTTPMinor int
        Method    string
        Headers   map[string][]string
        Body      []byte
    }
    type InternalResponse struct {
        HTTPMajor    int
        HTTPMinor    int
        StatusCode   int
        StatusReason string
        Headers      map[string][]string
        Body         []byte
    }
    // Unused
    // func newInternalRequest() *InternalRequest {
    //  return &InternalRequest{
    //      Headers: make(map[string][]string),
    //  }
    // }
    func newInternalResponse() *InternalResponse {
        return &InternalResponse{
            Headers: make(map[string][]string),
        }
    }
    // Unused
    // func toInternalRequest(req *http.Request, target string, body []byte) *InternalRequest {
    //  intReq := newInternalRquest()
    //  intReq.Target = target
    //  intReq.HTTPMajor = req.ProtoMajor
    //  intReq.HTTPMinor = req.ProtoMinor
    //  for k, v := range req.Header {
    //      intReq.Headers[k] = v
    //  }
    //  intReq.Headers = req.Header
    //  intReq.Method = req.Method
    //  intReq.Body = body
    //  return intReq
    // }
    func toInternalResponse(resp *http.Response, body []byte) *InternalResponse {
        intResp := newInternalResponse()
        intResp.HTTPMajor = resp.ProtoMajor
        intResp.HTTPMinor = resp.ProtoMinor
        intResp.StatusCode = resp.StatusCode
        intResp.StatusReason = resp.Status
        for k, v := range resp.Header {
            intResp.Headers[k] = v
        }
        intResp.Body = body
        return intResp
    }
    func fromInternalResponse(intResp *InternalResponse) *http.Response {
        var contentLength int64
        if intResp.Body != nil {
            contentLength = int64(len(intResp.Body))
        }
        return &http.Response{
            ProtoMinor:    intResp.HTTPMinor,
            ProtoMajor:    intResp.HTTPMajor,
            Status:        intResp.StatusReason,
            StatusCode:    intResp.StatusCode,
            Header:        intResp.Headers,
            ContentLength: contentLength,
            Body:          ioutil.NopCloser(bytes.NewReader(intResp.Body)),
        }
    }
    // Unused
    // func fromInternalRequest(intReq *InternalRequest) *http.Request {
    //  return &http.Request{
    //      ProtoMinor:    intReq.HTTPMinor,
    //      ProtoMajor:    intReq.HTTPMajor,
    //      Header:        intReq.Headers,