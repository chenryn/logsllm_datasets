If the commit criteria is not satisﬁed, then manual rec-
onciliation of conﬂicting actions that took place inside the
SEE and outside will be needed. The commit criteria will
also identify the set of conﬂicting ﬁles and operations. At
this point, the user can decide to:
(cid:15) abort, i.e., discard the results of SEE execution. This
course of action would make sense if the activities per-
formed inside SEE are longer be relevant (or useful) in
the context of changes to the main ﬁle system.
(cid:15) retry, i.e., discard the results of SEE execution, cre-
ate a new SEE environment, redo the actions that were
just performed within the SEE, and then try to com-
mit again. If the conﬂict were due to activities on the
host OS that are relatively infrequent, e.g., the result
of a cron job or actions of other users that are unlikely
to be repeated, then the retry has a high probability
of allowing a successful commit. (Note that the retry
will likely start with the same system state as the ﬁrst
time and hence will have the same net effect as the ﬁrst
time.)
(cid:15) resolve conﬂicts, i.e., the user manually examines the
ﬁles involved in the conﬂict (and their contents) and
determines if it is safe to commit; and if so, what the
merged contents of the ﬁles involved in the conﬂict.
The commit criteria will identify the list of ﬁles in-
volved in the conﬂict and the associated operations, but
the rest of the steps need to be performed manually.
The commit criteria is a set of rules which determine
whether the results of changes made within an SEE can be
committed automatically, and lead to a consistent ﬁle sys-
tem state. Since the problem of consistency and commit-
ting has been studied extensively in the context of database
transactions, it is useful to formulate the commit problem
here in the terms used in databases. However, note that
there is no well-deﬁned notion of transactions in the con-
text of IFS. We therefore identify the entire set of actions
that took place within SEE in isolation as a transaction Ti
and the entire set of actions that took place outside of the
SEE (but limited to the actions that took place during the
lifetime of the SEE) as another transaction Th.
There are several natural choices for commit criteria:
(cid:15) Noninterference. This requires that the actions con-
tained in Ti be unaffected by the changes made in
Th and vice-versa. More formally, let RS(T ) and
W S(T ) denote respectively the set of all ﬁlesystem
objects read and written by a transaction T , respec-
tively. Then, noninterference requires that
RS(Ti) \ W S(Th) = (cid:30)
RS(Th) \ W S(Ti) = (cid:30)
W S(Ti) \ W S(Th) = (cid:30)
The advantage of this criteria is that it leads to very
predictable and understandable results. Its drawback
is that it is too restrictive. For instance, consider a con-
ﬂict that arises due to a single ﬁle f that is written in Th
and read in Ti. Also suppose that f was read within the
SEE after the time of the last modiﬁcation operation on
f in Th. Then it is clear that Ti used the modiﬁed ver-
sion of f in its computation, and hence it need not be
aborted, yet the noninterference criteria will not permit
Ti to be committed.
(cid:15) Serializability. This criteria requires that the effect of
concurrent transactions be the same as if they were ex-
ecuted in some serial order, i.e., an order in which there
was no interleaving of operations from different trans-
actions. In the context of IFS, there are only two possi-
ble serial orders, namely, TiTh and ThTi. Serializabil-
ity has been used very successfully in the context of
database transactions, so it is a natural candidate here.
However, its use in SEE can lead to unexpected re-
sults. For instance, consider a situation where a ﬁle f
is modiﬁed in Ti and is deleted in Th. At the point of
commit, the user would be looking at the contents of f
within the SEE and would expect this result to persist
after the commit, but if the serial order TiTh were to be
permitted, then f would no longer be available! Even
worse, its contents would not be recoverable. Thus, se-
rializability may be too general in the context of SEE:
if results were committed automatically when Ti and
Th were serializable, then there is no guarantee that
the resulting system state would be as expected by the
user of the SEE.
(cid:15) Atomic execution of SEE activities at commit time. If
the state of main ﬁle system after the commit were as
if all of the SEE activities took place atomically at the
point of commit, then it leads to a very understandable
behavior. This is because the contents of the main ﬁle
system after the commit operation will match the con-
tents of the IFS on every ﬁle that was read or written
within the IFS. The atomic execution criteria (AEC)
is a restriction of serializability criterion in that only
the order ThTi is permitted, and the order TiTh, which
led to unexpected results in the example above, is not
permitted.
Based on the above discussion, we use AEC as the criteria
for automatic commits in SEE. In all other cases, the user
will be presented with a set of ﬁles and directories that vio-
late the AEC, and the user will be asked to resolve the con-
ﬂict using one of the options discussed earlier (i.e., abort,
redo, or manually reconcile).
In addition to providing consistent results, a commit cri-
teria should be amenable to efﬁcient implementation.
In
this context, note that we don’t have detailed information
about the actions within Th. In particular, the UNIX ﬁle
system maintains only the last read time and write time for
each ﬁle system object, so there is no way to obtain the list
of all read and write actions that took place within Th, or
their respective timestamps. We could, of course, maintain
such detailed information if we intercepted all ﬁle opera-
tions on the main ﬁle system and recorded them, but this
conﬂicts with our design goal that operations of processes
outside SEE should not be changed in any way. On the other
hand, since we do intercept all ﬁle accesses within the IFS,
we can (and do) maintain more detailed information about
the timestamps of the read and write operations that took
place within the SEE. Thus, an ideal commit criteria, from
an implementation perspective, will be one that leverages
the detailed timestamp information we have about Ti while
being able to cope with the minimal timestamp information
we have about Th. It turns out that AEC satisﬁes this condi-
tion, and hence we have chosen this criteria as the basis for
fully automated commits in IFS.
In order to determine whether AEC is satisﬁed, we need
to reason about the timestamps of operations in Th and Ti
and show that their orders can be permuted so that all op-
erations in Th occur before the operations in Ti, and that
this permutation does not change the semantics of the oper-
ations. We make the following observations in this regard:
(cid:15) Any changes made within the SEE are invisible on the
main ﬁle system, so the results of operations in Th
would not be changed if all Ti operations were delayed
to the point of commit.
(cid:15) A read operation R(f ) performed in Ti can be delayed
to the point of commit and still be guaranteed to pro-
duce the same results, provided the target f was un-
changed between the time R was executed and the time
of commit. This translates to requiring that the last
modiﬁcation time of f in the main ﬁle system precede
the timestamp of the ﬁrst read operation on f in Ti.
(cid:15) The results of a write operation W (f ) performed in
Ti is unaffected by any read or write operation in Th,
and hence it can be delayed to commit time without
changing its semantics.
Based on the observations, we conclude that AEC is satis-
ﬁed if:
the earliest read-time of an object within the IFS
occurs after the last modiﬁcation time of the same
object on the main ﬁle system.
Note that the latest modiﬁcation time of an object on the
main ﬁle system is given by the mtime and ctime ﬁelds
associated with that object. In addition, we need to maintain
the earliest read-time of every object within the IFS in order
to evaluate this criteria.
A slight explanation of the above criteria is useful in the
context of append operations on ﬁles. Consider a ﬁle that
is appended by an SEE process is subsequently appended
by an outside process. Both appends look like a write op-
eration, and hence the above commit criteria would seem to
indicate that it is safe to commit results. But if this were
done, the results of the append operation performed outside
IFS would be lost, which is an unexpected result. Clearly,
if the SEE process were run at the time of commit, then no
information would have been lost. However, this apparent
problem is clariﬁed once we realize that an append opera-
tion really involves a read and then a write. Once this is
taken into account, a conﬂict will be detected between the
time the ﬁle was read within IFS and the time it was mod-
iﬁed outside, thereby causing the AEC criteria to be vio-
lated. More generally, whenever a ﬁle is modiﬁed within
IFS without completely erasing its original contents (which
is accomplished by truncating its length to zero), we treat
this as a read followed by a write operation for the purposes
of committing, and handle the above situation correctly.
4.1.1 Improvements to AEC
The above discussion of AEC classiﬁes operations into
two kinds: read and write. The beneﬁt of such an approach
is its simplicity. Its drawback is that it can raise conﬂicts
even when there is a meaningful way to commit. We illus-
trate this with two examples:
(cid:15) System log ﬁles are appended by many processes.
Based on earlier discussion about append operations
on ﬁles, the AEC criteria won’t be satisﬁed whenever
an SEE process appends an entry e1 to the log ﬁle and
an outside process subsequently appends another entry
e2 to the same ﬁle. Yet, we see that the results can eas-
ily be merged by appending both e1 and e2 to the log
ﬁle.
(cid:15) Directories close to the root of the ﬁle system are al-
most always examined by SEE process as part of look-
ing up a ﬁle name in the directory tree. Thus, if any
changes were to be made in such directories by out-
side processes, it will lead to AEC being violated. Yet,
we see that a name lookup operation does not conﬂict
with a ﬁle creation operation unless the name being
looked up is identical to the ﬁle created.
These examples suggest that AEC will permit commits
more often if we distinguished among operations at a ﬁner
level of granularity, as opposed to treating them as read and
write operations. However, we are constrained by the fact
that we don’t have a complete record of the operations ex-
ecuted by outside processes. Therefore, our approach is to
try to infer the operations by looking at the content of the
ﬁles. In particular, let fo denote the (original) content of a
ﬁle system object at the point it was copied into temporary
storage, and fh and fi denote the content of the same ﬁle
in the main ﬁle system and the IFS at the point of commit.
We can then compute the difference (cid:14)f
h between fo and fh,
and the difference (cid:14)f
i between fo and fi. From these differ-
ences, we can try to infer the changes that were made within
and outside SEE. For instance, if both (cid:14)f
i consist of
additions to the end of the ﬁle, we can infer that append op-
erations took place, and we can apply these differences to
fo.
h and (cid:14)f
In the case of directories, the situation is a bit simpler.
Due to the nature of directory operations, (cid:14)f
h will consist of
ﬁle (or subdirectory) creation and deletion operations. Let
Fh denote the set of ﬁles created or deleted in (cid:14)f
h, and let
Fi be the set of names in this directory that were looked up
in Ti. This information, as well as the time of ﬁrst lookup
on each of these names, are maintained within the IFS. Let
Fc = Fh \ Fi. Now, we can see that the AEC criteria will
be satisﬁed if either one of the following conditions hold:
(cid:15) Fc = (cid:30), or
(cid:15) the modiﬁcation time of fo precedes all of the lookup
times on any of the ﬁles in Fc.
In the ﬁrst case, none of the names looked up (i.e., “read”)
within the SEE were modiﬁed outside, thus satisfying AEC.
In the second case, conﬂicts are again avoided since all of
the lookups on conﬂicting ﬁles took place after any of the
modiﬁcation operations involving them in the main ﬁle sys-
tem.
We point out that inferring operations from the state of
the ﬁle system can be error-prone. For instance, it is not
possible to distinguish from system state whether a ﬁle a
was deleted or if it was ﬁrst renamed into b and then deleted.
For this reason, we restrict the use of this approach to log
ﬁles and directories.
In other cases, e.g., updates of text
ﬁles, we can use this technique with explicit user input.
4.2. Efﬁcient Implementation of Commit
After making a decision on whether it is safe to commit,
the next step is to apply the changes to the main ﬁle system.
One approach in this context is to traverse the contents of
the temporary storage and copy them into the main ﬁle sys-
tem. However, this simple approach does not always pro-
duce expected results. Consider, for instance, a case where
a ﬁle a is ﬁrst renamed to b and then modiﬁed. A simple
traversal and copy will leave the original version of a as
is, and create a new ﬁle b whose contents are the same as
in the temporary storage. The correct result, which will be
obtained if we redo all the (write) operations at the point
of commit, will leave the system without the ﬁle a. Thus,
the simple approach for state-based commit does not work
correctly.
The above example motivates a log-based solution: main-
tain a complete log of all successful modiﬁcations opera-
tions that were performed within the SEE, and replay them
on the main ﬁle system at the point of commit. This ap-
proach has the beneﬁt of being simple and being correct
in terms of preserving the AEC semantics. However, its
drawback is that it is inefﬁcient, both in terms of space and
time. In the worst case, the storage overhead can be arbitrar-
ily higher than an approach that uses state-based commit-
ting. For instance, consider an application that creates and
deletes many (temporary) ﬁles. The state-based approach
will need to store very few ﬁles in temporary storage, but
a log-based approach will need to store all the write op-
erations that were performed, including those on ﬁles that
were subsequently deleted. Moreover, redoing the log can
be substantially more expensive than state-based commit,
since the latter can exploit rename operations to avoid ﬁle
copies altogether.
The above discussion brings forth the complementary
beneﬁts of the two approaches. The ﬁrst approach makes
use of the accumulated modiﬁcation results on ﬁle system
objects, thus avoiding the expense associated with the main-
tenance and redoing of logs. The second approach, by main-
taining logs, is able to handle subtle cases involving ﬁle re-
names. In our implementation of the commit operation, we
combine the beneﬁts of both.
create operation. An rmlink operation cancels out a preced-
ing addlink with the same operands.
We refer to our approach as state-based commit. For ﬁles,
the commit action used in our approach involves simply re-
naming (or copying) the ﬁle into the main ﬁle system. For
operations related to links, it records a minimal set of link-
related operations that captures the set of links associated
with each ﬁle system object. In this sense, one can think
of the approach as maintaining “condensed” logs, where re-
dundant information is pruned away. For instance, there
is no need to remember operations on a ﬁle if it is subse-
quently deleted. Similarly, if a ﬁle is renamed twice, then
it would be enough to remember the net effect of these two
renames. To identify such redundancies efﬁciently, our ap-
proach partitions the logs based on the objects to which they
apply. This log information is kept in the inode table de-
scribed earlier.
Operations that modify the contents of a ﬁle or change
metadata (such as permissions) on any ﬁle system object are