To demonstrate the feasibility of miab, we have implemented a
proof-of-concept application that can be used to post anonymous
messages on Twitter, circumventing the block on social networks
imposed by Tyria’s Censor.
To provide a more open evaluation, we have published the
code online. The application can be downloaded at http://www.
message-in-a-bottle.us, together with our public key.
We have set up a small cluster of machines that monitors one
of the most popular blog ping servers (webblogs.com), looking
for miab messages (our cluster plays Bob’s part in the algorithm).
When a message is found, its content is posted on Twitter under
the handle @corked_bottle.
Also, the code can be used with a new public/private key-pair
to verify how messages are recovered.
Blog-fetching cluster. We use four servers with Intel Xeon
2.40GHz processors, 4 Gigabytes of RAM, and high-speed Internet
connection. The need for a cluster of machines comes from
the additional overhead of our detailed data collection for this
Figure 3: BOSS false positives, false negatives and ac-
curacy, for the winning team and all teams combined
(by simulating collusion among teams)
experiment. Without it, miab can be run on a single machine.
We have successfully done so, and the code published online refers
to this second version.
Ping server. We use webblogs.com. This server is the oldest
ping server of the web, and receives million of pings every day.
For example, blogs hosted on Google’s blogger.com ping this
server by default. The server does not allow real-time monitoring
of pings, but releases a tarball with the latest pings every five
minutes.
Steganography For our experiments, we have implemented
the stegosystem described in Section 3.2. To embed a message,
first we encrypt it with RSA using Bob’s public key, then we
apply our tool. As we mentioned in Section 3.2, we can estimate
our resilience to steganography by looking at how effectively the
HUGO stegosystem was attacked during the BOSS competition.
For the reader’s convenience, a summary of the results is given in
Figure 3. Since miab’s embedding rate is at least two orders of
magnitude smaller than the one used during BOSS, and that the
square root law of steganography applies, we expect a dramatic
decrease of detection rates, and increase of false positive rates.
In particular, a direct application of this law indicates that we
should expect single digit detection ratios. Unfortunately, we
cannot verify this, as the detection systems used during BOSS
have not been release publicly. Even if we consider the detection
rates of Figure 3, the number of false positives detected is likely
to overwhelm the Censor, considering the vast prevalence of clean
photos in the blogs’ stream. Also, Alice can throw the Censor
off track by publishing a few clean images for each stego photo
published.
Since our stegosystem does not use a key, the Censor will be
able to extract the hidden encrypted message, if there is any.
If there is none, the Censor will just extract gibberish. If it is
possible to tell the difference between the two kinds of extracted
data, the Censor will break our stegosystem. Since our messages
are encrypted with RSA, they will have high entropy, which is
a feature that can be easily quantified to be used for machine-
learning classification. However, our stegosystem is designed to
select the pixels in which to embed the message preferring noisy,
hard to modify areas of natural photos, which are also highly
entropic. To check if it is likely that the Censor will be able
to use the extracted data to tell apart clean images from the
ones with stego content, we have trained a few classifiers that
aim to do so. First, we have prepared two datasets. In the first
dataset, we have applied (the decoder part of) our stegosystem
to extract gibberish from 5,000 clean photos downloaded from
Flickr. To reach a broad number of photographers, we selected
the photos using Flickr popular tags.
In the second dataset,
we have encrypted with RSA 5,000 random messages. From
these datasets, we extracted features that quantify the entropy
of the strings. In particular, we have calculated the Hamming’s
entropy, the Chi-Square test’s p value, the arithmetic mean of the
byte, the Monte Carlo approximation for π, and the correlation
coefficient between consecutive bytes. The precision and recall
of the best in precision for each class of classifiers is shown in
Table 1. We attribute the poor performance of the classifiers to
the combination of the shortness of the messages and the natural
and digital noise in the photos, that is empirically entropic enough
to be hardly distinguishable from RSA-encrypted messages.
Classifier
Precision
Recall
RSA Flickr
RSA Flickr
K-NN (k = 14)
Naive Bayes
ANN (2 hidden layers)
SVM
Vote
52.05% 51.37% 41.76% 61.52%
50.11% 50.98% 90.48%
9.90%
50.14% 50.09% 40.36% 59.86%
48.15% 48.77% 58.52% 38.52%
82.56% 17.08% 49.89% 49.48%
Table 1: Best classifiers for each class.
Certificate. We ship a 2,048-bit RSA public key.
5.1 Evaluation
miab relies on Bob’s ability to fetch and process all the blog
posts created on the Internet in real time. To prove that this
is feasible, we have done so with our cluster, as well as our
single-machine version of miab.
Over the period of three months (72 days), we have seen
814, 667, 299 blog posts. The average number of posts seen per
day is 11, 314, 823, and the highest traffic we have experienced is
13, 083, 878 posts in a day.
During the course of a day, we have found that the rate of blog
posts is quite stable, with an average of 44, 146 posts every five
minutes, and a low standard deviation of 3, 963. We observed
that approximately half of the blog posts contain photos.
Performance. The ping server we chose releases every five
minutes the pings that it received during that period. To keep
up with the ping rate, we process all the blog posts of one chunk
of pings before the next one is released. Therefore, the maximum
latency between the publishing of a post with miab content and
our tweeting is ten minutes (five minutes in the ping server’s
queue, and another five before we process the post).
An advantage of the stego algorithm we have chosen is that
it is much faster in extracting potential hidden messages than
embedding them. On average, it takes 0.56 seconds per image to
embed a message, and 0.02 seconds to recover it. In particular,
performing exclusively our steganographic extraction on a 5-
minute pings chunk takes, on average, 2m:51s on a Intel-i7 eight-
core laptop. Performing exclusively the RSA decryption takes
2m:35s. Fetching all the images from the blogs takes an average
of 4m:17s. Since the steganographic test is CPU bound, and
the blogs fetching is I/O bound, the two operations can execute
simultaneously with an acceptable loss in performance: processing
a five-minutes chunk of pings with the full miab, with either
scheme, completes under five minutes on average, with a processor
load under 90%.
Depending on the running time and memory requirements of
the PKS scheme Alice and Bob have chosen, a single machine may
not be able to cope with the workload. To solve this issue, Bob
can opt to scale horizontally, adding more machines. Otherwise,
Alice and Bob may agree beforehand that Bob will only fetch and
analyze blog posts whose URL has some particular properties. For
example, they might agree that blog posts with stego messages
will have a URL whose length is even (or odd). In this example,
this agreement would reduce the workload approximately by
a factor of two, and Alice can make sure that Bob will keep
examining her posts by choosing the blog post title accordingly,
since the title is usually part of the URL. Of course, the Censor
will also be aware of this, so this device will reduce the workload
equally for both the Censor and Bob.
The maximum length of the embedded message depends on
the channel and the PKS scheme in use.
In our scheme, we enforce a size limit of 450 bytes, since as the
covert message becomes larger, the chance that the image might
be flagged as suspicious by the Censor also increases.
Scale. miab should cope well with a high volume of hidden
messages. A single machine can accommodate 15-20 million posts
per day. To put this in perspective, if the entire population of Iran
would start blogging daily, Bob would need five more machines.
Also, a large number of useless posts made by miab users should
not affect search engine results, because search engines already
deal with a high volume of spam pings [36].
Choosing the right blog. To send a message through miab,
Alice has to publish a post on a blog that supports pings. Alice
might already have posting privileges on such a blog: In this case,
she can just use it. Otherwise, Alice needs to open one, or be
added as an author to an existing one. It is therefore interesting
to see how difficult it is for Alice to open a blog supporting pings.
In Table 2, we show the four most popular blogging platforms
for the Alexa’s top million websites in February 2012. These
platforms account for more than 85% of all blogs, and they all
support pings. In Table 3, we show the platform that the 100
most popular blog chose to use in 2009. Of these, at least 75
support pings.
If the blog Alice has chosen does not support blog pings, Alice
can perform the ping manually, as most ping servers offer this
feature (e.g., http://blogsearch.google.com/ping).
Platform Number of sites (%)
Ping support
WordPress
Joomla!
Drupal
Blogger
63.49
11.17
8.57
3.14
yes
yes
yes
yes
Table 2: Blogging platform popularity: Alexa’s top
million (source: builtwith.com [11])
Platform
Number of sites
Ping support
WordPress
TypePad
Moveable Type
BlogSmith
custom made
Drupal
Blogger
Expression Engine
Scoop
Bricolage
32
16
20
14
8
4
3
1
1
1
yes
yes
yes
n/a, proprietary
n/a
yes
yes
n/a, proprietary
no
no, CMS
Table 3: Blogging platforms: 100 most popular blogs
(source: pingdom.com [47])
Estimating the blocking set. The Censor might attempt to
block all blogs by blacklisting their domain names, or IP addresses.
It is essential to miab’s availability that the blocking set (that is,
the set of domains or IP addresses to block) is large, as this makes
the maintenance of a blacklist impractical (this will be further
discussed in Section 6). To estimate the size of the blocking set,
we generated three blacklists from three months of recorded pings,
targeting FQDNs, second-level domain names, and IP addresses
3 (see Figure 4).
3Note that some blogs advertise only their IP address in their
pings: this is why the number of IP addresses shows a faster
trend than the number of second-level domains.
ism [28]. Despite the block, Kazakh bloggers have moved to
self-hosted or less popular blogging platforms, and continue to
grow in numbers [35]. There are over 165 million blogs on the
Internet [8], and a good part of them are self-hosted, making the
maintenance of a blacklist impractical (see Section 5.1). Even
if the Censor is able to fingerprint blogs and successfully block
each of them, there are other services that generate blog pings,
for example, commenting services (e.g., Disqus, which is installed
on 750,000 websites). Also, for her miab messaging, Alice might
open a blog in favor of the ruling party: The Censor will be
less likely to block that, because it shows that the population is
supporting the regime.
The Censor might also block any domain that emits a ping.
We discussed how to evade a blacklist in Section 5.1. Also, this