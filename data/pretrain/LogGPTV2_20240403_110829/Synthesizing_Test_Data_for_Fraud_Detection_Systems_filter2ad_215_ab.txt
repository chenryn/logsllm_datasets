indicator requires IP address, bytes received, bytes transmit-
ted and time stamp. For the third indicator we need user ID,
IP address, time stamp, session ID, billing data and bytes
received.
Thus, we found that the following information needed
to be in the log data: (1) Data from the DHCP server con-
taining information about when a user has his set top box
switched on and off; (2) Router statistics in which the num-
ber of bytes to and from a user is registered; (3) Data from
the application server containing time stamp, user ID, IP
address, session ID etc. of user logins; (4) Detailed in-
formation about movie orders from the application server;
(5) Billing information generated by the billing system; (6)
VoD server information about what content was actually de-
livered to a certain user. These raw data records from the
service components were converted to a common format.
5. Generation of synthetic data
The goal of the synthetic data generation was to obtain
enough data of sufﬁcient quality to be able to develop and
train a fraud detection prototype for a VoD service.
5.1. Data analysis and proﬁle generation
The seed data were analyzed and we identiﬁed a num-
ber of parameters we considered important, which we then
included in the user proﬁles. The importance of the parame-
ters was evaluated by studying the features needed to detect
the identiﬁed template fraud examples. We also selected the
parameters necessary to determine statistical values for the
transitions in the state machine used to model user behavior.
The idea was to sort users into a number of classes based
on their behavior. Each class of users has one set of pa-
rameter values. Because of the limited number of authentic
users, it was difﬁcult to ﬁnd natural user classes without
letting each user form its own user class. This, and the
project time limits, resulted in the grouping of all normal
users into a single class, which is a coarse simpliﬁcation of
normal user behavior. The frauds affecting user behavior
were assigned to their own classes. Normal user behavior
and fraudulent user behavior can both be scaled up during
the generation process. This allows us to vary the ratio be-
tween fraudulent and normal data for our test cases.
A perl program parsed the log ﬁles and collected data
for each transition in separate ﬁles. Small matlab programs
plotted these data and ﬁtted different probability distribu-
tion functions to the data. In our ﬁrst data generation at-
tempt we used the normal probability distribution function
to model the time intervals for the transitions. It was ob-
vious when the data were plotted that most of our data sets
had the shape of an exponential or gamma distribution func-
tion. A chi-square test was used to check which distribution
had the best ﬁt. An example of a plot of transition time and
the corresponding probability distribution function is shown
in Figure 3. This histogram shows the authentic transition
4
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:39:18 UTC from IEEE Xplore.  Restrictions apply. 
times from login to movie order, and the dashed line shows
the corresponding probability distribution, from which we
get the simulated transition times.
25
20
15
10
5
0
0
1
2
3
4
5
6
7
8
9
10
x 104
Figure 3. Histogram of time from login to order (in
seconds)
The statistical proﬁle contains the probability for each
transition and a distribution function with ﬁtted parameters
for the transition time.
Statistics needed for the simulation of the system were
also analyzed. For example, trafﬁc for different events,
the behavior of the DHCP server and delays were studied.
These statistics were collected in a conﬁguration ﬁle for the
system simulation program.
5.2. Generation of synthetic data
The implementation of the user and system simulation
is a trade-off between simplicity and realism. This pro-
cess may be iterative, where a simple version is ﬁrst imple-
mented and validated to identify whether a sufﬁcient num-
ber of the properties considered important are preserved. If
this is not considered good enough, some level of detail can
be added.
In our experiments, both the user and system models
were implemented as an event-driven simulations in perl,
requiring about two thousand lines of code each.
User simulation. The goal of the user simulation is to pro-
duce a chronological list of actions for each simulated user.
What makes these actions realistic is the accuracy of the sta-
tistical proﬁles used as input and level of detail in the user
model implementation. Our simulation used a ﬁnite state
machine to mimic user behavior (Figure 4).
In state 0, the user’s set top box (stb) is switched off. The
only thing he can do in this state is to turn the set top box
on and enter state 1. In state 1, he can try to log in. If it is
a successful login, he is transferred to state 2, where he can
start to order movies. If he fails to log in, he is transferred
to state 4, where he can continue to make failed logins until
5
0
stb_on
stb_off
stb_off
stb_off
1
failed_login
logout
stb_off
logout
login
login
failed_login
2
4
logout
stb_off
failed_order
movie_order
failed_order
3
5
movie_order
failed_order
movie order
0: initial state
    stb=off
    login=no   failed_login=no
    order=no   failed_order=no
1: session state 
    stb=on
    login=no   failed_login=no
    order=no   failed_order=no
2: login state
    stb=on
    login=yes   failed_login=no
    order=no   failed_order=no
stb_off
3: movie−order state
    stb=on
    login=yes  failed_login=no
    order=yes  failed_order=no
4: failed login state
    stb=on
    login=no   failed_login=yes
    order=no   failed_order=no
5: failed movie−order state
    stb=on
    login=yes  failed_login=no
    order=no   failed_order=yes
Figure 4. User state machine
he succeeds or gives up and switches the set top box off.
In state 2, the user can make movie orders. If he fails he
is transferred to state 5, where he can continue to try to or-
der movies until he succeeds, logouts, or switches the set
top box off. This models the actions that affect output log
data in the service. The statistics derived in the analysis of
authentic data are used to set the probabilities of transitions
to different states and the time between the entering of one
state until a certain transition is done.
Fraudulent users do not always follow this model. For
example, the break-in fraudsters skipped the login proce-
dure and were able to order movies without successful
authentication. This required some extra parameters and
“fraud ﬂags” in the user simulation program. Other types of
deviant behavior may require further additions to the pro-
gram, even though this was the only modiﬁcation we found
necessary in these experiments to mimic the behavior of the
injected frauds.
With this simple automata we could simulate a large
number of users and attackers covering extensive periods of
time. Despite its simplicity it provided sufﬁciently detailed
user actions for the next step, system simulation.
Video-on-demand system simulation. The actions of the
virtual users serve as input to the simulated target system to
generate synthetic data. We used statistics from the authen-
tic data (e.g. data volumes and delays in networks and com-
ponents) to conﬁgure the simulation. A further option was
added to control the generation of billing records in order to
simulate fraudsters that circumvent the billing subsystem.
We used an event-driven simulation. Each user action in
the input data was ﬁrst fed to the set top box module. From
there it was added to the simulation list to be passed on to
the right component module after a conﬁgurable delay. The
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:39:18 UTC from IEEE Xplore.  Restrictions apply. 
possible user events were turn on set top box, turn off set top
box, login, and movie order. Figure 5 illustrates the result-
ing event ﬂow in the simulated system when it is fed with a
login action. The login event is passed from the set top box
to the access node (IP switch) via the simulation list (“sim”
in the ﬁgure). From the access node, the event is passed
to the router module, which calculates router statistics for
the event, and also to the application server, where the login
is done. The success of the login is determined during the
user simulation and thus included in the input user action.
The application server generates an authentication log entry
(AuthenticationNotiﬁcation) of the same format as that of
the real system. In this way all events are passed around in
the system, and the proper components generate log mes-
sages when events arrive.
login event
set top box
sim
access
node
sim
application
server
sim
log
server
router
AuthenticationNotification
Figure 5. Flow in simulated system at a login action
Our simulation model is a coarse approximation of the
real system environment. We do not model network behav-
ior at packet level, for example, as the router statistics are
only measured over a time interval. Other shortcomings are
described in Section 8.
6. Input data for the detection experiment
We veriﬁed the generated data by using them to develop
and train a fraud detection prototype, i.e. according to the
ﬁrst application area mentioned in Section 1. This section
describes the data used in the experiment.
6.1. Authentic data
The authentic data needed for the detection experiments
are the data created by authentic fraud users. These users
have long periods of rather normal behavior and occasional
fraud sessions. The frauds are described in Section 4.3.
Since we had very few authentic fraud sessions, we had to
use the same data set here as we used as seed data for the
synthetic data generation process.
6.2. Generated synthetic data
The simulation described in Section 5, resulted in syn-
thetic data for seven months containing six hundred “nor-
mal” users. Three fraud types, out of the four described in
Section 4.3, were simulated. We used 100 break-in fraud-
sters, 100 fraudsters doing illegal redistribution, and ﬁnally
100 cases of fraudsters that hacked the billing server.
This resulted in several GBytes of synthetic raw log data
in unpacked text format. The raw log data were converted
to a common format where data were grouped into sessions
in the same way as the authentic log data were converted.
This resulted in about 80 MB of log data for each group of
100 users. It was possible to generate log data in less than a
day on a normal PC for 100 users acting under a period of
seven months.
6.3. Subjective assessment of data
To form a subjective concept of the simulated data and
try to estimate its validity, we did a great deal of visualiza-
tions of the authentic and synthetic users. Below we show
some of the plots produced in this process.
Normal users.The plots show the events for a user for a pe-
riod of 15000 minutes (about 10 days). The ﬁrst two plots
(Figure 6 and 7) show the behavior of two different authen-
tic users. The next plot (Figure 8) shows the behavior of
one of the synthetic users.
The scale of the x-axis is in minutes (from the start date
of the log ﬁles). The y-axis shows which state the user cur-
rently is in. These numbers correspond to the states in the
user model (see Figure 4). The dotted red line (or grey if
viewed in black-and-white printing) follows the user state.
level 1.0: User has switched on the set top box
level 2.0: User is logged into the application server
level 3.0: User has ordered a movie
level 4.0: User has made a failed login
level 5.0: User has made a failed movie order
Finally we use “level 0.5” to show downloading or upload-
ing sessions (does not correspond to any user state).
The fourth and ﬁfth levels are used less frequently since
these correspond to failed logins and failed movie orders,
which are not common. The events that cause the user to
switch states are plotted as spikes in the graph, with the
height of the state the user is entering, i.e.
logins with a
height of 2.0 and orders a height of 3.0.
The user in Figure 6 is very active. His set top box is
switched on most of the time, several days in a row. The
plot shows two sessions. In the ﬁrst session he waits a short
time before logging in. After some hours he orders a movie.
Shortly after the movie order, download starts and he con-
tinues to download data for several hours. Then the session
continues with several more logins and downloads. It seems
that the user is logged out automatically after some time,
but this is not possible to see in the log ﬁles. Downloads of-
ten start at login, and downloads are done even when there
are no movie orders. The reason for this is that users can
also watch free TV channels, and that they probably watch
movie trailers before ordering a movie.
6
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:39:18 UTC from IEEE Xplore.  Restrictions apply. 
e
t
a
t
s
5
4
3
2
1
0
50000
e
t
a
t
s
5
4
3
2
1
0
50000
e
t
a
t
s
5
4
3
2
1
0
14000
failed logins
failed movie order
movie order