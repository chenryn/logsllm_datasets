message identifiers for all sends of the message from the source
sender (Figure 6(b)). Lastly, for each of these message identifiers,
the platform recursively builds out a subtree by enumerating the
tracing keys and message identifiers for the recipient’s forwards
using the recipient tracing key generator, gki +1 (Figure 6 (c)). The
full pseudocode for the scheme is also given in Figure 6.
There are a few subtle design points to our tree traceback scheme
that we highlight here. The first concern is how to securely escrow
the three encrypted values for each message identifier with the
platform. The sender can encrypt and send the previous message’s
tracing key and its own tracing key generator, but the sender can-
not know and therefore cannot escrow the recipient’s tracing key
generator. For confidentiality, the recipient’s tracing key generator
should only be known by the recipient. Instead, the sender and the
platform each create key shares for the recipient tracing key, ks0
and ks1, such that neither the sender nor the platform learn the
key, but the sender’s key share needed to derive the key is stored
encrypted on the platform. The recipient derives their tracing key
generator as gki +1 ← H(ks0 ∥ ks1) which appears random (given
that the sender and platform are not colluding).
A second concern arises from the enumeration of tracing keys
from a generator during traceback. In stages (b) and (c) in Figure 6,
the platform enumerates tracing keys by evaluating a PRF keyed
by the escrowed generator, gk, on a counter initialized to zero, in-
crementing and re-evaluating to produce the next tracing key. This
continues until the produced tracing key does not evaluate to a
valid message identifier in platform storage, indicating all forward-
ing branches for the user have been enumerated. This traceback
approach will only succeed if users correctly derive tracing key
generators from the escrowed key shares and correctly derive trac-
ing keys from the generator by incrementing a counter, and not,
for example, skipping a counter value. Left as is, these types of
deviations would result in a class of partition attacks that are so-
called “unidirectional”. In these attacks, a malicious user is able to
partition the tree trace to hide a subtree such that a report in the
main tree will end at the malicious user and not include the subtree;
but at the same time, a report in the subtree will trace through the
malicious user and identify the main tree as the source.
We address this by enforcing that a message is only traced back
to a sender if it would have also been traced forward to the recipient.
This invariant restricts malicious users to only being able to mount
“complete” partition attacks, in which if they choose to partition,
they are implicated in two disjoint traces: the end of one trace and
the source of the other. Enforcing this invariant manifests in tree
traceback by two well-formedness checks (denoted WellFormedgk
and WellFormedk in the pseudocode). The first check simply red-
erives the recipient generator to make sure it matches the one
escrowed by the recipient. The second well-formedness check de-
termines if a tracing key was properly derived from a generator.
Doing so requires enumerating with a counter, succeeding when
the current message tracing key is found, or fails when a generated
tracing key evaluates to an invalid message identifier. Both of these
checks take place during stage (a) of tree traceback to identify a
root that will not include fragmented subtrees.
Security of tree traceback. We formalize confidentiality and ac-
countability security in Appendix C, and just briefly describe it here.
Svr-Trace(PT, U, p, tmd):
(ki , gki +1) ← tmd
root ← U
rootgk ← gki +1
mid ← Fki (p)
while mid ∈ PT :
(ctki−1 , ctgki , ctgki +1 , ks1, Us, Ur) ← PT[mid]
(cid:101)ki ← H(ki)
if root (cid:44) Ur : break
ks0 ← Dec(cid:101)ki
(ctgki +1)
gki ← Dec(cid:101)ki
if not WellFormedgk(gki +1, ks0, ks1) : break
(ctgki )
if not WellFormedk(ki , gki , PT) :
return (Us, [(Fki (p), trace_fwd(PT, p, Ur, gki +1)])
root ← Us
ki ← Dec(cid:101)ki
rootgk ← gki
(ctki ); gki +1 ← gki
mid ← Fki (p)
return trace_fwd(PT, p, root, rootgk)
trace_fwd(PT, p, U, gki):
init list Tr; j ← 0
while k ← Fgki (j); mid ← Fk(p); mid ∈ PT :
(cid:101)k ← H(k)
(ctki−1 , ctgki , ctgki +1 , ks1, Us, Ur) ← PT[mid]
ks0 ← Dec(cid:101)k
(ctgki +1)
gki +1 ← H(ks0 ∥ ks1)
Tr[j] ← (mid, trace_fwd(PT, p, Ur, gki +1))
j ← j + 1
return (U, Tr)
NewMsg(U, m):
ki−1 ←$ {0, 1}n
gki ←$ {0, 1}n
tmd ← (ki−1, gki)
return tmd
TagGen(CTR, Us, Ur, p, tmd):
if tmd (cid:60) CTR : CTR[tmd] ← 0
ctr ← CTR[tmd]
CTR[tmd] ← ctr + 1
(ki−1, gki) ← tmd
ki ← Fgki (ctr)
mid ← Fki (p)
(cid:101)ki ← H(ki)
ks0 ←$ {0, 1}n
ctki−1 ← Enc(cid:101)ki
(ki−1)
ctgki ← Enc(cid:101)ki
(gki)
ctgki +1 ← Enc(cid:101)ki
(ks0)
tts ← (mid, ctki−1 , ctgki , ctgki +1)
return (CTR, ki , tts)
RecMsg(ki , Us, Ur, p, ttr ):
(mid, ctgki +1 , ks1) ← ttr
(cid:101)ki ← H(ki)
if mid (cid:44) Fki (p) : return ⊥
ks0 ← Dec(cid:101)ki
(ctgki +1)
gki +1 ← H(ks0 ∥ ks1)
tmd ← (ki , gki +1)
return tmd
Svr-Process(PT, Us, Ur, tts):
(mid, ctki−1 , ctgki , ctgki +1) ← tts
if mid ∈ PT : return ⊥
ks1 ←$ {0, 1}n
ttp ← (ctki−1 , ctgki , ctgki +1 , ks1, Us, Ur)
ttr ← (mid, ctgki +1 , ks1)
return ((mid, ttp), ttr )
Ub
midb,0
Uc
mida,0
Ua
Ub
mida,0
Ua
mida,1
Ud
mida,2
Ue
(a)
(b)
(c)
Ua
mida,2
sent message
traceback
Ue
mide,0
mide,1
Uf
Ug
mida,0 ← Fkb,0(p)
ctki−1 ← PT[mida,0]
ka,0 ← DecH(kb,0)(ctki−1)
mida,0 ← Fka,0(p)
ctgki ← PT[mida,0]
gka ← DecH(ka,0)(ctgki )
ka,1 ← Fgka(1)
ka,2 ← Fgka(2)
mida,2 ← Fka,2(p)
(ctgki +1, ks1) ← PT[mida,2]
ks0 ← DecH(ka,2)(ctgki +1)
gke ← H(ks0 ∥ ks1)
ke,0 ← Fgke(0)
ke,1 ← Fgke(1)
Figure 6: Doubly-linked tags construction for tree traceback. The
subdiagrams show how traceback propagates in each of three stages
of tree traceback: (a) trace to parent up to root, (b) trace to siblings,
(c) trace to children recursively. Solid arrows denote sent messages,
while dashed arrows denote the propagation of traceback from blue
to purple given tracing key for blue.
The starting point is the definitions for path traceback detailed in
Section 5, but adapted to fit the tree traceback syntax and semantics.
Because our clients are now stateful (due to the counters used along
with key generators), we modify the confidentiality games to allow
the adversary to drive the honest client to an arbitrary state before
submitting challenge queries.
The accountability game is modified to iterate through the re-
turned tree trace checking the appropriate conditions. This defini-
tion currently only guarantees that no honest user can be “framed”
as having performed some action they did not, in fact, perform. This
does not capture some accountability attacks that our tree trace-
back scheme protects against, in particular, the difference between
allowing unidirectional partitions versus the stronger guarantee of
only allowing complete partitions (as described above). An open
question is therefore how to provide stronger formal definitions.
We provide a formal analysis of the doubly-linked tags scheme
in Appendix C.
7 IMPLEMENTATION AND EVALUATION
To evaluate our tracing protocols, we provide a prototype library
and tracing service implementation in Rust that can be readily
integrated into existing end-to-end encrypted messaging systems.
For our hash, collision-resistant pseudorandom function, and block
cipher primitives, we use SHA-3, HMAC derived from SHA-3, and
AES-128. All of these operations are supported by the Rust Crypto
library [4]. The tracing service uses Redis [1] as its underlying key-
value store. Both the library and service code are available open
source at https://github.com/nirvantyagi/tracing.
Our tracing service can be integrated into existing end-to-end
encrypted messaging systems with the following client and server
side changes. The client will make library calls to NewMsg, TagGen,
and RecMsg when sending, forwarding, and receiving messages
and it will store trace metadata associated with messages accepted
by RecMsg. The tracing key is included with the plaintext in the end-
to-end encrypted ciphertext. The sender and recipient trace tags are
sent alongside the end-to-end ciphertext to and from the platform.
On the server side, the tracing service is run as an internal service.
The messaging server receives the end-to-end ciphertext and sender
trace tag and sends a “process” request including the sender trace
tag and user identifiers for the sender and recipient to the tracing
service. The tracing service handles running Svr-Process, storing
the appropriate information in a key-value store, and returns the
recipient trace tag, which the messaging server delivers with the
end-to-end ciphertext. The client and messaging server also need
to be modified to send and accept reports of messages (if that
functionality is not already included). The client includes the trace
metadata along with the plaintext in the report. The messaging
server simply forwards the reported plaintext and trace metadata
to the tracing service which runs Svr-Trace and saves the message
trace to be used downstream for moderation.
Timing benchmarks. At a high level, our tracing schemes are fast
and induce minimal storage and bandwidth overhead. This is to be
expected as our schemes are composed of symmetric cryptographic
techniques over small 128 bit components. Experiments were per-
formed on a 2.2 GHz Intel Core i7 Processor with 8 GB of RAM. The
Scheme
path traceback
tree traceback
TagGen (µs)
7.4 ± 0.4
26.0 ± 2.8
RecMsg (µs)
1.7 ± 0.1
7.3 ± 0.1
Figure 7: Time to run client-side tag generation and verification al-
gorithms.
Scheme
path traceback
tree traceback
Sender
Recipient
bandwidth (B)
bandwidth (B)
Platform
storage (B)
Client
storage (B)
64
96
48
80
36
84
16
34
Figure 8: Bandwidth and storage costs incurred per message.
time to run the client-side algorithms, TagGen and RecMsg, for gen-
erating and verifying trace tags is shown in Figure 9; the NewMsg
algorithm is not shown as it simply samples a random number.
For path traceback the tag generation and verification algorithms
take < 10 microseconds, and for tree traceback the algorithms take
< 50 microseconds. In practice, client side operations will often
be performed on less powerful mobile devices, e.g. running ARM
processors, but we do not expect the difference in timing to be
prohibitive.
We next turn to evaluate the server side algorithms, Svr-Process
and Svr-Trace. The server side algorithms interact with a key-value
store, the performance characteristics of which will affect the perfor-
mance of the algorithm. In our schemes, the Svr-Process algorithm
essentially performs a key-value put operation and relays the trace
tag; no cryptographic operations are performed. As expected, this
translates to a minimal cost operation for most key-value stores –
in our benchmarks, in which the server key-value store is instanti-
ated with an in-memory Redis data store, the Svr-Process algorithm
takes on the order of 100 microseconds. Building a trace of messages
using the Svr-Trace algorithm is where the majority of computation
is performed. Importantly, the time to build a trace is linearly depen-
dent on the number of messages revealed in the trace, i.e. trace size.
Intuitively, this is because our schemes traverse the trace message
by message performing only a constant number of decryptions and
PRF evaluations per message. This relationship is easily seen for
the case of path traceback as shown in Figure 9, in which we find
that building a trace takes ≈ 100 microseconds per message in the
path. For tree traceback, the traceback time is dependent not only
on tree size, but also on tree structure; in particular, the branching
factor, i.e., the average number of forwards made by each user. In
our tree traceback scheme, the branching factor is the number of
forward tracing keys learned per message lookup and decryption.
The cost of PRF evaluations to enumerate forward tracing keys is
less expensive than the key-value lookup and decryption cost of
dereferencing a tracing key. Thus, as the branching factor increases,
the time per message decreases (Figure 10 (right)). In the worst
case, with branching factor equal to one, i.e. a path, the time per
message is < 300 microseconds, which still leads to efficient tree
traces regardless of structure. As an example, a trace of a tree of
size 20,000 is built in under two seconds.
8 DISCUSSION
Here we present further discussion on open questions raised by
this work.
Supporting more general plaintext linking policies. Recall
that we hypothesized it is possible to use client-side software in
honest clients to detect and prevent copy-paste behavior and unin-
tentional partitioning, therefore limiting partition attacks to mali-
cious users with hacked clients. One of the challenges of building
such detection software is making it robust to small perturbations
in messages as they are forwarded. Our schemes focus on tracing
messages that contain identical plaintexts for simplicity of presen-
tation, but our formalization and schemes can easily be extended
to support more general tracing policies, such as tracing closely
related message content (e.g., similar images). Given a received
message with plaintext p and a message with plaintext p′ to be sent,
an honest client can run some arbitrary procedure to determine
whether to allow (or require) tracing to link p and p′. The proce-
dure could also take into account the sender and recipient identities.
Supporting traceback in this context will require escrowing with
the platform an encryption of p (or, at least, a diff between p and p′),
which will inflate storage costs. This could allow significantly more