  2. 若在，退出报错
  3. 若不在，再次访问你给的IP或者域名解析后的IP；执行后续业务模块
所以思路很简单：你只需要有个域名，但是它映射两个IP；同时设置TTL为0，能方便两个IP即刻切换
效果类比：你访问`wwfcww.xyz`这个域名，第一次解析的IP是192.168.0.1；而第二次解析的IP是127.0.0.1
这个操作，就叫做`DNS重绑定`
**需要知道的**
来自[这里](https://blog.csdn.net/u011721501/article/details/54667714)，总结+补充亿点
**TTL是啥？**
TTL值全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间，数值越小，修改记录各地生效时间越快。  
当各地的DNS(LDNS)服务器接受到解析请求时，就会向域名指定的授权DNS服务器发出解析请求从而获得解析记录；该解析记录会在DNS(LDNS)服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS服务器将不再向授权DNS服务器发出请求，而是直接返回刚才获得的记录；而这个记录在DNS服务器上保留的时间，就是TTL值
常见的设置TTL值的场景：  
• 增大TTL值，以节约域名解析时间  
• 减小TTL值，减少更新域名记录时的不可访问时间
####  公网DNS服务器的缓存问题
即使我们在前面实现的时候设置了TTL为0（按道理每次都会直接请求NS），但是有些公共DNS服务器，比如114.114.114.114还是会把记录进行缓存，完全不按照标准协议来，遇到这种情况是无解的。但是8.8.8.8是严格按照DNS协议去管理缓存的，如果设置TTL为0，则不会进行缓存，从效果上来看，每次dig都会跑去我们的NS服务器上去查询一遍。
**本地DNS缓存**
对于本地的DNS服务器来说，DNS解析有以下几个过程
  1. 查询本地DNS服务器(/etc/systemd/resolved.conf或者/etc/resolv.conf，见后文分析)
  2. 如果缓存未过期，则返回缓存的结果；
  3. 无缓存或缓存过期，则请求远程DNS服务器
所以有时候明明TTL也确实为0，还是需要等待一段时间的问题所在；你可能得关掉本地的DNS缓存
**正常情况**
MAC与Windows系统默认进行DNS缓存；Linux系统默认不进行DNS缓存
同时，IP为8.8.8.8的DNS地址，本地不会进行DNS缓存
  1. Java默认不存在被DNS Rebinding绕过风险（TTL默认为10）
  2. PHP默认会被DNS Rebinding绕过
  3. Linux默认不会进行DNS缓存
但是，这都是“默认”情况；实际上Linux现在自带相当多的DNS缓存方法与工具，也会进行缓存
比如看[这个](https://cloud.tencent.com/developer/article/1830976)来学习一下如何彻底关掉新版Ubuntu的本地DNS功能
**办法**
**使用在线重绑定**
ceye.io自带这个功能，但是效果出奇差
除了这个还有[rebinder](https://lock.cmpxchg8b.com/rebinder.html),效果也一样差-=-
输入你想交替生成的IP，它就会给你个公网域名啦
**自建！（需要一定的路由知识）**
因为公网DNS服务器有诸多限制，在线重绑定也很烂…自己动手丰衣足食！
需要以下准备材料：
  * 很Nice的VPS
  * 一个域名，个人推荐去[hostinger](https://hpanel.hostinger.com/)买个
思路很简单：
  * VPS搭建好NS服务器所需要的一切，即把它变成一个DNS服务器
  * 修改你域名的NS服务器，指向你的VPS
如此一来，一旦服务器想要解析你的域名->被指向到你的VPS->VPS自定义解析IP->返回自定义解析的IP
Hostinger按下面这么设置，你的NS服务器改成
> ns1.你的VPS地址.nip.io
>
> ns2.你的VPS地址.nip.io
然后部署这个[项目](https://github.com/makuga01/dnsFookup)到你的VPS上；它很多使用细节没写，补充一下：
  * 关掉占用你VPS的53端口的一切服务
  * 该项目自带域名已过期，自己用Grep和Sed把所有自带的域名清除
  * flask运行改为任何IP，即0.0.0.0
  * 任何localhost与127.0.0.1均改为你的VPS地址
还有很多BUG…还是有问题可以私我，我把改好的发你~
随后访问你VPS的项目按说明配置好，然后`dig 生成的域名`，就能看见下面的交互记录啦
但是用这个项目的过程中，你可能会遇到这种情况：一直dig，它的IP并不会变（项目确实配置好的情况）
一方面，可能确实是网络堵塞；一方面，你得看看是不是本地DNS服务器搞得鬼：
`dig 生成的域名 @你的VPS`，这样就能强制使用远程NS
你看，这样就正常了..说明你需要关掉本地的DNS服务！看一下这个[链接](https://cloud.tencent.com/developer/article/1830976),找到DNS的配置文件
简而言之就是：
> `/etc/resolv.conf` 若指向 `/run/systemd/resolve/stub-resolv.conf`,
> `/usr/lib/systemd/resolv.conf`, `/run/systemd/resolve/resolv.conf`
> 之一，DNS配置文件有效在`/etc/systemd/resolved.conf`
>
> 否则在`/etc/resolv.conf`
我的长这个样子，也就是说现在是systemd在管；那么想修改DNS配置得去`/etc/systemd/resolved.conf`
在`DNS`这一栏填上你的VPS
执行以下命令
    systemctl restart systemd-resolved.service #重启DNS服务systemd-resolve --status #查看DNS服务
成功！
然后再修改`/etc/resolv.conf`
执行如下命令
    sudo /etc/init.d/networking restart # 重启网卡sudo /etc/init.d/resolvconf restart # 重启DNS（可能没有）
成功！
**实操**
这个[靶场](https://github.com/incredibleindishell/SSRF_Vulnerable_Lab)搭好后，来到这个路径`http://192.168.85.138:9000/dns_rebinding.php`；也就是开头咱们说的那一关试验一下
>
> [http://a946635e90c24434850795a27fbb54cb.你的域名/local.txt](http://a946635e90c24434850795a27fbb54cb.%E4%BD%A0%E7%9A%84%E5%9F%9F%E5%90%8D/local.txt)
成功！