Spring 四天学习总结
⼀、Spring概述
Spring 是分层的 Java SE/EE 应⽤ full-stack 轻量级开源框架，以 IoC（Inverse Of Control： 
反转控制）和 AOP（Aspect Oriented Programming：⾯向切⾯编程）为内核，提供了展现层 
Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应⽤技术，还能整合
开源世界众多 著名的第三⽅框架和类库，逐渐成为使⽤最多的 Java EE 企业应⽤开源框架。
主要特点如下：
①轻量级IoC容器。IoC容器是⽤于管理所有bean的声明周期，是Spring的核⼼组件。在此基础
之上，开发者可以⾃⾏选择要集成的组件，如消息传递、事务管理、数据持久化及Web组件
等。
②采⽤AOP编程⽅式。Spring推崇使⽤AOP编程⽅式。AOP( Aspect Orier由dProgramming, 
⾯向切⾯编程）的⽬标与OOP( Object Oriented Programming，⾯向对象编程）的⽬标并没有
不同，都是为了减少重复和专注于业务。
③⼤量使⽤注解。Spring提供了⼤量的注解，⽀持声明式的注⼊⽅式，极⼤地简化了配置。
④避免重复“造轮⼦”。Spring集成了⼤量市⾯上成熟的开源组件，站在巨⼈的肩膀上，这样既
增强了Spring的功能，⼜避免了重复“造轮⼦
⼆、IOC的概念及作⽤
1.耦合
耦合：程序间的依赖关系，包括类之间的依赖以及⽅法间的依赖
解耦：降低程序间的依赖关系
实际开发中：编译期不依赖，运⾏时才依赖
解耦的思路：
1.使⽤反射创建对象，避免使⽤new关键字
2.通过读取配置⽂件来获取要创建的对象全限定类名
如图实现了初步的解耦
2.BeanFacktor ⼯⼚模式解耦
创建了⼀个集中管理Bean的地⽅，且当中存在Map类型的 beans⽤来盛放所有的bean(这个
Map为bean的容器)，且通过读取配置⽂件中配置的内容，在项⽬启动时创建对象，解决了bean
创建多次问题
/**
1
 * 一个创建Bean对象的工厂
2
 *
3
 * Bean：在计算机英语中，有可重用组件的含义。
4
 * JavaBean：用java语言编写的可重用组件。
5
 *      javabean >  实体类
6
 *
7
 *   它就是创建我们的service和dao对象的。
8
 *
9
 *   第一个：需要一个配置文件来配置我们的service和dao
10
 *           配置的内容：唯一标识=全限定类名（key=value)
11
 *   第二个：通过读取配置文件中配置的内容，反射创建对象
12
 *
13
 *   我的配置文件可以是xml也可以是properties
14
 */
15
public class BeanFactory {
16
    //定义一个Properties对象
17
    private static Properties props;
18
19
    //定义一个Map,用于存放我们要创建的对象。我们把它称之为容器
20
    private static Map beans;
21
22
    //使用静态代码块为Properties对象赋值
23
    static {
24
        try {
25
            //实例化对象
26
            props = new Properties();
27
            //获取properties文件的流对象
28
            InputStream in = 
BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");
29
            props.load(in);
30
            //实例化容器
31
            beans = new HashMap();
32
            //取出配置文件中所有的Key
33
            Enumeration keys = props.keys();
34
            //遍历枚举
35
            while (keys.hasMoreElements()){
36
                //取出每个Key
37
                String key = keys.nextElement().toString();
38
                //根据key获取value
39
                String beanPath = props.getProperty(key);
40
                //反射创建对象
41
                Object value = Class.forName(beanPath).newInstance();
42
                //把key和value存入容器中
43
                beans.put(key,value);
44
            }
45
        }catch(Exception e){
46
            throw new ExceptionInInitializerError("初始化properties失
败！");
47
        }
48
    }
49
50
    /**
51
     * 根据bean的名称获取对象
52
     * @param beanName
53
     * @return
54
     */
55
    public static Object getBean(String beanName){
56
        return beans.get(beanName);
57
    }
58
59
    /**
60
     * 根据Bean的名称获取bean对象
61
     * @param beanName
62
     * @return
63
64
    public static Object getBean(String beanName){
65
        Object bean = null;
66
        try {
67
            String beanPath = props.getProperty(beanName);
68
//            System.out.println(beanPath);
69
            bean = Class.forName(beanPath).newInstance();//每次都会调用默认
构造函数创建对象
70
        }catch (Exception e){
71
            e.printStackTrace();
72
        }
73
        return bean;
74
    }*/
75
}
76
bean.properties
3.控制反转
上述例⼦通过⼯⼚模式创建bean，⽽不是通过new，就实现了控制反转。我们在获取对象时，
都是采⽤ new 的⽅式。是主动的。 现在我们获取对象时有⼯⼚为我们查找或者创建对象。是被
动的。此为控制反转。
IoC的应⽤有以下两种设计模式。
①反射：在运⾏状态中，根据提供的类的路径或类名，通过反射来动态地获取该类的所有属性和
⽅法。
②⼯⼚模式：把IoC容器当作⼀个⼯⼚，在配置⽂件或注解中给出定义，然后利⽤反射技术，根
据给出的类名⽣成相应的对象。对象⽣成的代码及对象之间的依赖关系在配置⽂件中定义，这样
就实现了解梢。
4.使⽤ spring 的 IOC 解决程序耦合
4.1 实现demo
⾸先通过ApplicationContext 根据bean.xml获取容器对象，然后根据bean.xml⾥配置的bean获
取想要的bean对象
public class Client {
1
2
    /**
3
     * 获取spring的Ioc核心容器，并根据id获取对象
4
     *
5
     *
6
     * 核心容器的两个接口引发出的问题：
7
     *  ApplicationContext:     单例对象适用              采用此接口
8
     *      它在构建核心容器时，创建对象采取的策略是采用立即加载的方式。也就是说，
只要一读取完配置文件马上就创建配置文件中配置的对象。
9
     *
10
     *  BeanFactory:            多例对象使用
11
     *      它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式。也就是说，
什么时候根据id获取对象了，什么时候才真正的创建对象。
12
     * @param args
13
     */
14
    public static void main(String[] args) {
15
        //1.获取核心容器对象
16
bean.xml
4.2 BeanFactory 和 ApplicationContext 的区别
BeanFactory 才是 Spring 容器中的顶层接⼝。 ApplicationContext 是它的⼦接⼝。 
BeanFactory 和 ApplicationContext 的区别： 创建对象的时间点不⼀样。 
ApplicationContext：只要⼀读取配置⽂件，默认情况下就会创建对象。 BeanFactory：什么使
⽤什么时候创建对象。 
        ApplicationContext ac = new 
ClassPathXmlApplicationContext("bean.xml");
17
//        ApplicationContext ac = new 
FileSystemXmlApplicationContext("C:\\Users\\zhy\\Desktop\\bean.xml");
18
        //2.根据id获取Bean对象
19
        IAccountService as  = 
(IAccountService)ac.getBean("accountService");
20
        IAccountDao adao = ac.getBean("accountDao",IAccountDao.class);
21
22
        System.out.println(as);
23
        System.out.println(adao);
24
        as.saveAccount();
25
26
27
        //--------BeanFactory----------
28
//        Resource resource = new ClassPathResource("bean.xml");
29
//        BeanFactory factory = new XmlBeanFactory(resource);
30
//        IAccountService as  = 
(IAccountService)factory.getBean("accountService");
31
//        System.out.println(as);
32
    }
33
}
34
4.3 ApplicationContext 有三个常⽤的⼦类
ClassPathXmlApplicationContext：它可以加载类路径下的配置⽂件，要求配置⽂件必须在类
路径下。不在的话，加载不了。(更常⽤)
FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置⽂件(必须有访问权限）
AnnotationConﬁgApplicationContext：它是⽤于读取注解创建容器的
4.4 IOC 中 bean 标签和管理对象细节
4.5 bean 的作⽤范围和⽣命周期
4.6 实例化 Bean 的三种⽅式 
第⼀种⽅式：
使⽤默认⽆参构造函数  
在默认情况下： 它会根据默认⽆参构造函数来创建类对象。如果 bean 中没有默认⽆参构造函
数，将会创建失败。
第⼆种⽅式：spring 管理静态⼯⼚-使⽤静态⼯⼚的⽅法创建对象 
第三种⽅式：spring 管理实例⼯⼚-使⽤实例⼯⼚的⽅法创建对象 
5.依赖注⼊
依赖注入：
1
    Dependency Injection
2
IOC的作用：
3
    降低程序间的耦合（依赖关系）
4
依赖关系的管理：
5
    以后都交给spring来维护
6
在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
7
依赖关系的维护：
8
    就称之为依赖注入。
9
 依赖注入：
10
    能注入的数据：有三类
11
        基本类型和String
12
        其他bean类型（在配置文件中或者注解配置过的bean）
13
5.1 使⽤构造函数注⼊
5.2 使⽤set⽅法注⼊
        复杂类型/集合类型
14
     注入的方式：有三种
15
        第一种：使用构造函数提供
16
        第二种：使用set方法提供
17
        第三种：使用注解提供（明天的内容）
18
16
17
18
19
20
21
22
23
24
12
13
14
15
16
17
7