(cid:48)),
(cid:48) ).
Add1 :
Add2 :
Mult :
The message space allowed for decryption is P = L × P for some
P ⊆ M.
Remark 2. We note that the Addi functions induce also the eval-
uation of scalar multiplication which takes a ciphertext of m to a
ciphertext of am (of the same level i), for any positive integer a of an
evaluator’s choice.
3.2 Security De(cid:27)nitions
Circuit Privacy. Circuit privacy of an HE scheme is a security
property which requires that given a ciphertext, it should be hard
to tell if it is either encrypted freshly or obtained from homomorphic
evaluation. The de(cid:27)nition is as follows.
6Encryption of m ∈ M \ P cannot be decrypted, but after some homomorphic
evaluation, the resulting message might be in P, where its ciphertext can be decrypted.
De(cid:27)nition 3.1. An HE scheme for F is circuit private if the fol-
lowing holds. For any 1n, suppose ParamGen(1n) → pp and
KeyGen(pp) → (sk, pk). Then, for any function f : Df → M
in F , for any (m, m(cid:48)) ∈ Df , and for any c ← Enc(pk, m) and
c(cid:48) ← Enc(pk, m(cid:48)), we have that the following two distributions
are identical:
(cid:16)¯c | ¯c ← Enc(pk, f (m, m
(cid:48)))(cid:17)
(cid:16) ˜c | ˜c ← Eval(pk, f , c, c
(cid:48))(cid:17)
,
.
We also remark that our de(cid:27)nition of circuit privacy implies a
simulation-based de(cid:27)nition such as that of de(cid:27)ned in Catalano-
Fiore [12]. This is because the Enc essentially constitutes a simula-
tion algorithm. Hence we use throughout the paper the de(cid:27)nition
of the above type.
Con(cid:27)dentiality. The de(cid:27)nition for security regarding message
con(cid:27)dentiality is exactly the standard notion for public-key encryp-
tion except that we do not require the level information i ∈ L to be
kept con(cid:27)dential (which is the case for all previous two-level HE
schemes, e.g., [9]). The de(cid:27)nition for two-level HE can be de(cid:27)ned
as follows.
De(cid:27)nition 3.2. A two-level HE is secure in the sense of indis-
tinguishability against chosen-plaintext attacks (IND-CPA) if for
any probabilistic polynomial-time algorithm A, we have that the
advantage
(cid:12)(cid:12)(cid:12)(cid:12) Pr(cid:104)
pp ← ParamGen(1n);(pk, sk) ← (pp);
(i, m0, m1, s) ← A(find, pk); b ← {0, 1};
∗ ← Enc(pk,(i, mb)); b
c
(cid:48) ← A(guess, s, c
∗) : b = b
(cid:48)(cid:105) − 1
2
(cid:12)(cid:12)(cid:12)(cid:12)
is negligible in n.
4 OUR PROPOSED SCHEME
4.1 Construction
We are now ready to describe our two-level HE scheme. The per-
mitted message space allowed for encryption is M = Zp. The per-
mitted message space allowed for decryption is P ⊂ Zp such that
|P| is polynomial in n. A ciphertext will be of the form (i, c) where
i ∈ {1, 2} indicates the level of the ciphertext.
• ParamGen(1n): Output pp = (G1, G2, GT, ❕1, ❕2, e) ←
G(1n).
p and set h1 ← ❕1s1, h2 ←
• KeyGen(pp): Pick s1, s2
❕2s2. Output (sk, pk) where
pk = (h1, h2).
sk = (s1, s2),
$← Z×
For notational convenience, we let
z1 = e(❕1, ❕2),
z3 = e(h1, ❕2),
z2 = e(❕1, h2),
z4 = e(h1, h2).
Indeed, we have z2 = z1s2, z3 = z1s1, and z4 = z1s1s2.
• Enc(pk,(i, m)): Consider level i ∈ {1, 2}.
$← Zp and set
– For level i = 1, pick ρ, σ
❕1ρ , ❕1mh1ρ , ❕2σ , ❕2mh2σ(cid:17)
(cid:16)
c =
.
Output (1, c). We also denote this c as Enc1(m ; ρ, σ).
(2)
(3)
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea689– For level i = 2, pick ρ, σ , τ
(cid:16)
$← Zp and compute
z3σ ,
z1m · z4τ(cid:17)
.
z1ρ+σ−τ ,
c =
z2ρ ,
(4)
Output (2, c). We also denote this c as Enc2(m ; ρ, σ , τ).
• Eval(pk, f ,(i, c),(i(cid:48), c(cid:48))): We have the following cases. Note
that we de(cid:27)ne re-randomizing sub-routines separately later
below.
– Case f = Add1. Proceed i(cid:29) i = i(cid:48) = 1. Compute
(cid:48)
(cid:48)(cid:48) = c (cid:12) c
Output (1, ReRand1(pk, c(cid:48)(cid:48))).
– Case f = Add2. Proceed i(cid:29) i = i(cid:48) = 2. Compute
c
.
.
c
(cid:16)
(cid:48)
(cid:48)(cid:48) = c (cid:12) c
Output (2, ReRand2(pk, c(cid:48)(cid:48))).
– Case f = Mult. Proceed i(cid:29) i = i(cid:48) = 1. Parse c =
3, c(cid:48)
2, c(cid:48)
(c1, c2, c3, c4) and c(cid:48) = (c(cid:48)
1, c(cid:48)
4). Compute
(cid:48)(cid:48) =
(cid:48)
(cid:48)
(cid:48)
e(c1, c
e(c2, c
4),
3),
e(c2, c
c
Output (2, ReRand2(pk, c(cid:48)(cid:48))).
• Dec(sk, pk,(i, c)): Parse c = (c1, c2, c3, c4) and i ∈ {1, 2}.
– For level i = 1, output
4)(cid:17)
e(c1, c
(cid:48)
3),
(5)
.
˜m = log❕1,P(c1−s1 · c2).
(6)
– For level i = 2, output
˜m = logz1,P(c1s1s2 · c2−s1 · c3−s2 · c4).
• ReRand1(pk, c): Pick ρ(cid:48)(cid:48), σ (cid:48)(cid:48)
Enc1(0 ; ρ(cid:48)(cid:48), σ (cid:48)(cid:48)).
• ReRand2(pk, c): Pick ρ(cid:48)(cid:48), σ (cid:48)(cid:48), τ (cid:48)(cid:48)
Enc2(0 ; ρ(cid:48)(cid:48), σ (cid:48)(cid:48), τ (cid:48)(cid:48)).
(7)
$← Zp. Return c(cid:48)(cid:48) = c (cid:12)
$← Zp. Return c(cid:48)(cid:48) = c (cid:12)
4.2 Decryption Correctness
We can verify the decryption correctness as follows.
• A level-1 ciphertext (1, c) of Eq.(3) is decrypted via Eq.(6) to
˜m = log❕1
(cid:0)(❕1ρ)−s1 · ❕1m❕1s1ρ(cid:1)
(cid:40)
= log❕1(❕1m) =
m if m ∈ P
⊥ if m (cid:60) P
.
• A level-2 ciphertext (2, c) of Eq.(4) is decrypted via Eq.(7) to
(cid:16)(z1ρ+σ−τ )s1s2 · (z2ρ)−s1 · (z3σ)−s2 · (z1m · z4τ )(cid:17)
(cid:16)(z1ρ+σ−τ )s1s2 · (z1s2ρ)−s1 · (z1s1σ)−s2 · (z1m · z1s1s2τ )(cid:17)
˜m = logz1
= logz1
= logz1(z1m) =
(cid:40)
m if m ∈ P
⊥ if m (cid:60) P
.
4.3 Evaluation Correctness
Before proving evaluation correctness, we provide useful identities
regarding the ciphertexts in the following lemma.
Lemma 4.1. For all m, m(cid:48), ρ, σ , τ , ρ(cid:48), σ (cid:48), τ (cid:48) ∈ Zp, we have
(cid:48)
= Enc1(m + m
(cid:48))
(cid:48) ; ρ
Enc1(m ; ρ, σ) (cid:12) Enc1(m
, σ
(cid:48)).
(cid:48)
(cid:48) ; ρ + ρ
, σ + σ
(cid:48)
(cid:48)
(cid:48) ; ρ
Enc2(m ; ρ, σ , τ) (cid:12) Enc2(m
, τ
, σ
(cid:48)
(cid:48)
(cid:48) ; ρ + ρ
, σ + σ
= Enc2(m + m
(cid:48))
, τ + τ
(8)
(9)
(cid:48)).
is straightforward as Enc1(m ; ρ, σ) (cid:12)
Proof. The proof
Enc1(m(cid:48) ; ρ(cid:48), σ (cid:48)) =
(cid:16)
h2σ +σ(cid:48)(cid:17)
❕1ρ+ρ(cid:48)
, ❕1m+m(cid:48)
h1ρ+ρ(cid:48)
, ❕2σ +σ(cid:48)
, ❕2m+m(cid:48)
which is indeed Enc1(m + m(cid:48) ; ρ + ρ(cid:48), σ + σ (cid:48)). The second identity
can be proved analogously.
(cid:3)
We can now verify the evaluation correctness as follows. Let
c = Enc1(m ; ρ, σ) and c(cid:48) = Enc1(m(cid:48) ; ρ(cid:48), σ (cid:48)).
• Homomorphic addition (of level-1 ciphertexts) can be veri-
(cid:27)ed straightforwardly as
˜c = Eval(pk, Add1,(1, c),(1, c
(cid:48)(cid:48))
= c (cid:12) c
, σ
(cid:48) + ρ
= Enc1(m + m
(cid:48) (cid:12) Enc1(0 ; ρ
(cid:48)(cid:48)
(cid:48) ; ρ + ρ
(cid:48)(cid:48)
(cid:48)))
(cid:48) + σ
(cid:48) + σ
(cid:48)(cid:48)),
, σ
(10)
where the last equality is due to the identity (8). Finally, ˜c
is decrypted to m + m(cid:48) due to the decryption correctness.
Homomorphic addition for level-2 ciphertexts can be veri(cid:27)ed
analogously.
• Homomorphic multiplication can be veri(cid:27)ed as follows. Con-
sider
c
(cid:48)(cid:48)
(cid:48)(cid:48)
, σ
(cid:48)(cid:48) (cid:12) Enc2(0 ; ρ
(cid:48)))
˜c = Eval(pk, Mult,(1, c),(1, c
(cid:48)(cid:48))
= c
, τ
where c(cid:48)(cid:48) is as shown in Eq.(5), which is
(cid:48)(cid:48) =
h2σ(cid:48)),
e(❕1mh1ρ , ❕2m(cid:48)
e(❕1ρ , ❕2σ(cid:48)),
e(❕1ρ , ❕2m(cid:48)
e(❕1mh1ρ , ❕2σ(cid:48)),
, z1ρ(m(cid:48)+s2σ(cid:48))
z1(m+s1ρ)σ(cid:48)
, z1(m+s1ρ)(m(cid:48)+s2σ(cid:48))(cid:17)
z1ρσ(cid:48)
(cid:16)
(cid:16)
=
,
(11)
h2σ(cid:48))(cid:17)
.
(12)
Due to the identity (9), we have that the decryption of ˜c is
exactly that of c(cid:48)(cid:48) (that is, the re-randomization part, which
is the encryption of zero, does not a(cid:29)ect the decryption