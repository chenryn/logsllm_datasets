cating GGSN/SGSN to use user credits. There is also no need to
send CDRs since the consumed credits are deducted during Step 5.
Regardless of the online/ofﬂine charging, the end goal is to en-
sure that the data usage recorded by the network is indeed the same
as the amount used (and wanted) by a mobile device. The critical
issue in mobile data charging is thus whether the accounting archi-
tecture and policy practice in cellular networks are secure enough
to ensure proper billing. In this work, we seek to analyze such vul-
nerabilities, which malicious attackers can exploit to alter data us-
age record and make mobile users pay more (overcharging) or less
(undercharging). We focus on the attack issues in ofﬂine charging,
since the same issues also apply to online charging.
3. 3G ACCOUNTING VULNERABILITY
In this section, we provide an overview on the vulnerability is-
sues we have identiﬁed in 3G data charging.
3.1 System Model
We focus on the security issues of the usage-based accounting
rather than pricing, which sets the unit price for usage. In the typ-
ical scenario, a mobile user uses her/his smartphone to access the
Internet data service via the 3G wireless network. Data commu-
nication is performed between the mobile phone and the Internet
server/host. The study can be readily extended to the mobile to
mobile communication setting.
As described in Section 2, the mobile user is charged for the
data service (s)he uses. The operator records the data volume ex-
3Each of the ﬁve tuples can be a wildcard.
Data Services
CN
(S/GGSN)
0100...
1101...
U
L
D
L
Charging
0100...
1101...
CDRs
FLOW
BEARER
UE
1.Does charging policy alter data usage?
2. Are those bytes what I want?
Figure 4: Issues in data charging practice.
changed by the data service over time, and the user will pay based
on the recorded usage volume. Speciﬁcally, the CN (more pre-
cisely, SGSN/GGSN) records the volume of the packets that tra-
verse it and then charges the usage to the proper user via the map-
ping from the ﬂow, the bearer to the corresponding UE and user, as
illustrated in Figure 4.
We assume that the 3G charging subsystem is not compromised,
i.e., all charging elements are operating properly (as described
in Section 2). This implies that, the data usage records kept at
SGSN/GGSN are not attacked, the mappings from CDRs to the
ﬂow, the bearer, and the mobile user are also intact. Moreover, user
authentication within 3G/4G cellular networks works properly. At-
tackers cannot spoof other UE devices to access data services.
3.2 Two Achilles’ Heels
Our study shows that 3G/4G accounting architecture and policy
practice contain two loopholes, which can be exploited to launch
charging-related attacks against the operator and mobile users.
The ﬁrst relates to the charging policy that each 3G operator can
deﬁne regarding what to be charged. Indeed, 3G/4G operators are
allowed to adopt different charging policies. For example, they
can charge Multimedia Messaging Service (MMS) service differ-
ent from the common Internet data, or even provide free access for
certain data services. The security implication is: Can the differen-
tial charging policy be exploited to alter the actual data usage? If
two data services are charged differently, is it possible to fabricate
the service type and masquerade as a cheaper one?
We study an extreme case of the above issue. Our ﬁndings in
Section 4 show that, major US carriers usually offer free Domain
Name Service (DNS) service, and all data usage associated with
DNS service will be free. Our security question is: Given one type
of free data service, is it possible to evade charges for other data
services (e.g., standard Web browsing) as well? Our work conﬁrms
that it is indeed feasible.
It is easy to exploit this loophole and
launch an undercharging attack, during which the mobile user is
charged for data volume smaller than its used amount, or even free
of charge in the worst case. This attack defeats the fundamental
principle of metered charging in all cellular networks.
The second loophole is rooted in the 3G/4G charging architec-
ture. The core network records the packets, which traverse it and
belong to speciﬁc ﬂows, and charges the user accordingly. How-
ever, a question still remains: Is there any secure mechanism to
verify with the user on whether the data would be indeed wanted
by the user? What about those data bytes the attacker injects but
mobile user never wants?
Our analysis in Section 5 shows that, current charging architec-
ture lacks feedback mechanisms that allow the mobile user to ex-
plicitly express what packets are wanted or unwanted. Instead, op-
erators decide on what packets are charged using their own rules.
We further discover that, a mobile user is able to terminate the ma-
licious (or suspicious) service on its application layer locally, but
it cannot terminate the charging operations done at the carrier side.
197Therefore, malicious attackers can inject spam packets and deceive
the carriers to charge the mobile user for data volume larger than
what it requests. Our experiments show that, the overcharging at-
tack can be easily launched and there is no obvious upper bound
on the overcharged volume. We note that, 3G/4G operators do pro-
vide security mechanisms via NAT and ﬁrewall. Consequently, a
mobile device does not have a permanent and public IP address. It
uses a private IP address and obtains temporary access to data ser-
vices via NAT. The NAT-based operation ensures that the mobile
user needs to initiate this service ﬂow at the start. However, it is
ineffective during the delivery process once the service ﬂow starts.
Consequently, it cannot shield incoming spam data when malicious
hackers hijack the ﬂow or when the victim later ﬁnds that (s)he is
trapped.
3.3 Experimental Platform and Methodology
We design and conduct a series of experiments to examine secu-
rity issues in 3G data charging. We now describe our platform and
methods to obtain the data usage observed by the operator (VOP )
and the mobile phone (VU E). The details of experiments are de-
scribed in the followup sections.
We run tests with two major mobile operators in the US, which
together offer nationwide coverage for 102.3M users, thus claim-
ing about 50% of US market. We denote them as Operator-I and
Operator-II in this paper for privacy concerns. Our mobile devices
use three Android phone models: HTC Desire, Samsung Galaxy
S2, and Samsung Galaxy Note GT-N7000, running on Android
2.2, 2.3.4 and 2.3.6, respectively. Our experiments show that all
the ﬁndings are phone platform independent. We use an ASUS
EeeBox PC EB1501 desktop as the deployed host outside the cel-
lular networks. It runs on an Intel Atom N330 1.6 GHz Dual Core
processor and 1.5 GB DDR2 memory. This host acts as a content
server (e.g., Web), proxy or attacker in various tests.
We use two methods to obtain data usage logged by operators.
The ﬁrst one is to dial a special number from the mobile phone to
retrieve the remaining monthly data usage via a text message in a
near real-time mode. Most operators support this Dial-In feature,
e.g., via dialing #DATA for Verizon, *DATA# for AT&T, and #932#
for T-Mobile in the US. By logging data usage before and after our
experiment, we compute the usage volume observed by the oper-
ator during the experiment. The second method is to log onto the
mobile carrier website and obtain itemized data usage records on-
line. Based on the access availability, we choose the ﬁrst method
for Operator-I and the second for Operator-II. Both support 1 KB
accuracy in their data usage report. Note that, data usage records
only have timestamps. We use extra mechanisms to ensure that
the usage record is exclusive to data services in our tests. We run
factory reset ﬁrst and disable “Background data” and “Auto-sync”
features. We also use Wireshark [38], a monitoring tool to capture
all-level packets to/from the phone to ensure clean environment.
To obtain data usage on mobile phones, we develop our own
tool to use TrafﬁcStats class interfaces [14] provided in Android
SDK to collect network trafﬁc statistics. We record the number of
packets and bytes transmitted and received on all interfaces and on
a per-application basis. We further use WireShark to log packet
traces at our phones or deployed host if needed. We conduct each
experiment for 5 –15 runs and average the results over these runs.
4. FREE MOBILE DATA ACCESS ATTACK
In this section, we report how attackers can obtain mobile data
services for FREE. We ﬁnd out that there exist loopholes in the cur-
rent charging policy. Operators allow free data service for certain
data ﬂow, but do not enforce that the transmitted packets indeed
UE
CN
Internet
DNS (53)
Req：Where is www.cnn.com?
Res：157.166.226.26
DNS
(free)
HTTP(80)
Req: HTTP GET www.cnn.com
Res: 200 OK 
EH
www.cnn.com
Attacker
UE
Victim
CN
(a) In a normal case
(Attacker)
Internet
Proxy
EH
Tunneling(53):     HTTP GET www.cnn.com
(free)
Tunneling(53):      HTTP Res 200 OK 
HTTP GET www.cnn.com
HTTP Res: 200 OK 
(b) Under a toll-free-data-attack
Figure 5: Web browsing in normal and attacked cases.
belong to the designated free ﬂow. Even worse, no effective mech-
anism is implemented to limit the trafﬁc volume going through this
free ride. Consequently, these loopholes can be exploited to enable
any form of mobile data services for free. We use real experiments
to examine security issues in the operators’ charging practice, and
describe three approaches to “free” data services. Finally, we make
suggestions to ﬁx this “bug.”
4.1 Loopholes in Charging Policy Practice
The 3G standards offer the operators ﬂexibility to deﬁne their
own charging policies. Unfortunately, their policies and implemen-
tations may contain serious ﬂaws.
We use the example of Web browsing (www.cnn.com) to illus-
trate the vulnerabilities in the charging policy practice. Figure 5(a)
illustrates typical steps for Web browsing. Upon receiving the tar-
get URL, the Web browser immediately initiates two actions. One
is to send a DNS query to request the IP address for this URL. The
other is to send a HTTP query to the Web server using the obtained
IP address and receive a HTTP response. In mobile data charging,
the above operations invoke two charging ﬂows. One is the DNS
query/response which goes through the CN to the DNS resolver or
server. It is primarily carried by UDP on port 53, though TCP over
port 53 is also allowed [32]. The other ﬂow is for HTTP, which
traverses the CN to enable communication between the UE and the
Web server. It runs on TCP using port 80 (or other ports, e.g., 8080
or 443 for https). The CN records the data volume associated with
each ﬂow for billing.
Our study shows that, both operators tested in our experiments
offer free DNS service. This policy practice makes sense, since
DNS is considered a fundamental service for the Internet applica-
tions. Almost no Internet services can be initiated without DNS.
DNS service is offered for free by many public DNS servers (e.g.,
Google, OpenDNS [4]). Operators thus have every reason not to
charge DNS messages, to facilitate followup data usage by other
Internet services. Therefore, free DNS service can be justiﬁed as a
good (at least reasonable) policy.
However, our study shows that, there exist two loopholes to im-
plement this free-DNS policy in reality. First, there is almost no
enforcement mechanism to ensure that the packets going through
this DNS-reserved port are indeed DNS messages (free fake DNS
loophole). Second, there is no effective mechanism to limit the traf-
198)
B
K
(
e
m
u
o
V
l
 120
 100
 80
 60
 40
 20
 0
UE-I
OP-I
UE-II
OP-II
DNS-Default
DNS-Google
TCP53-Google
TCP53-Server
UDP53-Server
UE-I
OP-I
UE-II
OP-II
29KB
)
B
M
(
e
m
u
o
V
l
 14
 12
 10
 8
 6
 4
 2
 0
I
II
Scenario
III
Figure 6: VU E and VOP in ﬁve DNS tests.
Figure 7: Feasibility test of free data services; VOP = 0.
ﬁc volume going through this port (no volume-check loophole). We
next elaborate both using experiments.
• Free fake DNS loophole
Our experiments show that, oper-
ators do not enforce free DNS service via the standard ﬁve-tuple
ﬂow ID (src IP, dest IP, src port, dest port, protocol). Instead, they
use only the destination port (or plus protocol ID), thus exposing
an obvious vulnerability.
We use experiments to verify whether the DNS service is free
and what exact factors the free DNS service depends on in the op-
erator’s implementation. We conduct ﬁve experiments: (1) DNS-
Default: the UE sends 100 DNS queries to the default DNS server
provided by the operators; (2) DNS-Google: the UE sends the same