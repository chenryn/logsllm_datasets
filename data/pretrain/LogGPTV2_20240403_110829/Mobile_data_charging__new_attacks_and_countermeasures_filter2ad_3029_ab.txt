### Optimized Text

#### Configuring GGSN/SGSN to Use User Credits
There is no need to send Call Detail Records (CDRs) since the consumed credits are deducted during Step 5. Whether using online or offline charging, the ultimate goal is to ensure that the data usage recorded by the network matches the actual amount used and desired by the mobile device. The critical issue in mobile data charging is whether the accounting architecture and policy practices in cellular networks are secure enough to ensure accurate billing. In this work, we aim to analyze such vulnerabilities, which malicious attackers can exploit to alter data usage records and cause mobile users to be overcharged or undercharged. We focus on the attack issues in offline charging, as the same issues apply to online charging.

#### 3G Accounting Vulnerability
In this section, we provide an overview of the vulnerabilities we have identified in 3G data charging.

##### 3.1 System Model
We focus on the security issues related to usage-based accounting rather than pricing, which sets the unit price for usage. In a typical scenario, a mobile user accesses the Internet via a 3G wireless network using their smartphone. Data communication occurs between the mobile phone and the Internet server/host. This study can be extended to mobile-to-mobile communication settings.

As described in Section 2, the mobile user is charged for the data service they use. The operator records the data volume exchanged over time, and the user pays based on the recorded usage. Specifically, the Core Network (CN), more precisely the SGSN/GGSN, records the volume of packets that traverse it and then charges the usage to the appropriate user via the mapping from the flow, the bearer, to the corresponding UE and user, as illustrated in Figure 4.

We assume that the 3G charging subsystem is not compromised, meaning all charging elements are operating properly (as described in Section 2). This implies that the data usage records kept at SGSN/GGSN are not attacked, and the mappings from CDRs to the flow, the bearer, and the mobile user are intact. Additionally, user authentication within 3G/4G cellular networks works correctly, and attackers cannot spoof other UE devices to access data services.

##### 3.2 Two Achilles’ Heels
Our study reveals that 3G/4G accounting architecture and policy practices contain two loopholes, which can be exploited to launch charging-related attacks against operators and mobile users.

The first loophole relates to the charging policies that each 3G operator can define. 3G/4G operators are allowed to adopt different charging policies. For example, they may charge Multimedia Messaging Service (MMS) differently from common Internet data or even provide free access for certain data services. The security implication is: Can differential charging policies be exploited to alter actual data usage? If two data services are charged differently, is it possible to fabricate the service type and masquerade as a cheaper one?

We study an extreme case of this issue. Our findings in Section 4 show that major US carriers usually offer free Domain Name Service (DNS) service, and all data usage associated with DNS is free. The security question is: Given one type of free data service, is it possible to evade charges for other data services (e.g., standard Web browsing)? Our work confirms that this is indeed feasible. Exploiting this loophole, an undercharging attack can be launched, where the mobile user is charged for a smaller data volume than actually used, or even free of charge in the worst case. This attack undermines the fundamental principle of metered charging in all cellular networks.

The second loophole is rooted in the 3G/4G charging architecture. The core network records the packets that traverse it and belong to specific flows, and charges the user accordingly. However, a key question remains: Is there a secure mechanism to verify with the user whether the data is indeed wanted? What about data bytes injected by an attacker but not desired by the user?

Our analysis in Section 5 shows that the current charging architecture lacks feedback mechanisms allowing the mobile user to explicitly express what packets are wanted or unwanted. Instead, operators decide on what packets are charged using their own rules. We further discover that a mobile user can terminate malicious (or suspicious) services on the application layer locally but cannot terminate the charging operations done at the carrier side. Therefore, malicious attackers can inject spam packets and deceive the carriers into charging the mobile user for a larger data volume than requested. Our experiments show that the overcharging attack can be easily launched, with no obvious upper bound on the overcharged volume.

3G/4G operators do provide security mechanisms via NAT and firewalls, ensuring that a mobile device does not have a permanent and public IP address. It uses a private IP address and obtains temporary access to data services via NAT. The NAT-based operation ensures that the mobile user needs to initiate the service flow at the start. However, it is ineffective during the delivery process once the service flow starts, and thus cannot shield incoming spam data when malicious hackers hijack the flow or when the victim later finds they are trapped.

##### 3.3 Experimental Platform and Methodology
We designed and conducted a series of experiments to examine security issues in 3G data charging. We now describe our platform and methods to obtain the data usage observed by the operator (VOP) and the mobile phone (VU E). The details of the experiments are described in the following sections.

We ran tests with two major mobile operators in the US, which together offer nationwide coverage for 102.3 million users, claiming about 50% of the US market. We denote them as Operator-I and Operator-II for privacy concerns. Our mobile devices used three Android phone models: HTC Desire, Samsung Galaxy S2, and Samsung Galaxy Note GT-N7000, running on Android 2.2, 2.3.4, and 2.3.6, respectively. Our experiments showed that all findings are phone-platform independent. We used an ASUS EeeBox PC EB1501 desktop as the deployed host outside the cellular networks. It runs on an Intel Atom N330 1.6 GHz Dual Core processor and 1.5 GB DDR2 memory. This host acts as a content server (e.g., Web), proxy, or attacker in various tests.

We used two methods to obtain data usage logged by operators. The first method involves dialing a special number from the mobile phone to retrieve the remaining monthly data usage via a text message in near real-time. Most operators support this Dial-In feature, e.g., via dialing #DATA for Verizon, *DATA# for AT&T, and #932# for T-Mobile in the US. By logging data usage before and after our experiment, we computed the usage volume observed by the operator during the experiment. The second method is to log onto the mobile carrier website and obtain itemized data usage records online. Based on access availability, we chose the first method for Operator-I and the second for Operator-II. Both support 1 KB accuracy in their data usage reports. Note that data usage records only have timestamps. We used extra mechanisms to ensure that the usage record is exclusive to data services in our tests. We ran factory resets first and disabled “Background data” and “Auto-sync” features. We also used Wireshark, a monitoring tool, to capture all-level packets to/from the phone to ensure a clean environment.

To obtain data usage on mobile phones, we developed our own tool using the TrafficStats class interfaces provided in the Android SDK to collect network traffic statistics. We recorded the number of packets and bytes transmitted and received on all interfaces and on a per-application basis. We further used Wireshark to log packet traces at our phones or deployed host if needed. Each experiment was conducted for 5-15 runs, and the results were averaged over these runs.

#### 4. Free Mobile Data Access Attack
In this section, we report how attackers can obtain mobile data services for free. We found that there are loopholes in the current charging policy. Operators allow free data service for certain data flows but do not enforce that the transmitted packets indeed belong to the designated free flow. Even worse, no effective mechanism is implemented to limit the traffic volume going through this free ride. Consequently, these loopholes can be exploited to enable any form of mobile data services for free. We used real experiments to examine security issues in the operators' charging practices and describe three approaches to "free" data services. Finally, we make suggestions to fix this "bug."

##### 4.1 Loopholes in Charging Policy Practice
The 3G standards offer operators flexibility to define their own charging policies. Unfortunately, their policies and implementations may contain serious flaws.

We use the example of web browsing (www.cnn.com) to illustrate the vulnerabilities in the charging policy practice. Figure 5(a) illustrates the typical steps for web browsing. Upon receiving the target URL, the web browser initiates two actions: sending a DNS query to request the IP address for the URL and sending an HTTP query to the web server using the obtained IP address and receiving an HTTP response. In mobile data charging, these operations invoke two charging flows. One is the DNS query/response, which goes through the CN to the DNS resolver or server, primarily carried by UDP on port 53, though TCP over port 53 is also allowed. The other flow is for HTTP, which traverses the CN to enable communication between the UE and the web server, running on TCP using port 80 (or other ports, e.g., 8080 or 443 for HTTPS). The CN records the data volume associated with each flow for billing.

Our study shows that both operators tested in our experiments offer free DNS service. This policy makes sense because DNS is considered a fundamental service for Internet applications. Almost no Internet services can be initiated without DNS. Many public DNS servers (e.g., Google, OpenDNS) offer free DNS service, so operators have every reason not to charge for DNS messages to facilitate follow-up data usage by other Internet services. Therefore, free DNS service can be justified as a good (at least reasonable) policy.

However, our study reveals two loopholes in implementing this free-DNS policy. First, there is almost no enforcement mechanism to ensure that the packets going through the DNS-reserved port are indeed DNS messages (free fake DNS loophole). Second, there is no effective mechanism to limit the traffic volume going through this port (no volume-check loophole). We elaborate on both using experiments.

- **Free Fake DNS Loophole**
  Our experiments show that operators do not enforce free DNS service via the standard five-tuple flow ID (src IP, dest IP, src port, dest port, protocol). Instead, they use only the destination port (or plus protocol ID), exposing an obvious vulnerability.

  We conducted five experiments to verify whether the DNS service is free and what exact factors the free DNS service depends on in the operator's implementation:
  1. **DNS-Default**: The UE sends 100 DNS queries to the default DNS server provided by the operators.
  2. **DNS-Google**: The UE sends the same 100 DNS queries to the Google DNS server.
  3. **TCP53-Google**: The UE sends 100 HTTP requests to the Google DNS server over TCP port 53.
  4. **TCP53-Server**: The UE sends 100 HTTP requests to a custom server over TCP port 53.
  5. **UDP53-Server**: The UE sends 100 HTTP requests to a custom server over UDP port 53.

  The results, shown in Figure 6, indicate that the DNS service is indeed free, but the lack of strict enforcement allows for potential abuse.

- **No Volume-Check Loophole**
  There is no effective mechanism to limit the traffic volume going through the DNS-reserved port. This means that an attacker can tunnel large amounts of non-DNS traffic through port 53 without being charged. Our experiments, shown in Figure 7, confirm the feasibility of this attack, with VOP = 0, indicating that the operator did not detect or charge for the non-DNS traffic.

These findings highlight the need for stricter enforcement and better mechanisms to prevent such abuses in the 3G/4G charging architecture.