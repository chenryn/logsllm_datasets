# 在Windbg中明查OS实现UAC验证全流程——三个进程之间的"情爱"[2]
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0、引言
想目睹所谓的“白名单”列表吗？想自己逆向找到这些“可信路径”吗？那就来吧！在前一篇《在Windbg中明查OS实现UAC验证全流程——三个进程之间的”情爱”[1]》种讲解了explorer拉起一个白名单程序的过程，分析到了explorer老大哥“甩锅”的套路，这次分析AIS是怎么干活的。
整个系列涉及到的知识：
0、Windbg调试及相关技巧；  
1、OS中的白名单及白名单列表的窥探；  
2、OS中的受信目录及受信目录列表的查询；  
3、窗口绘制[对,你没看错,提权窗口就涉及到绘制]；  
4、程序内嵌的程序的Manifest；  
5、服务程序的调试；
## 1、找到关键点
AIS全称是AppInfo
Server，微软当初起这个名字估计也是因为它的工作内容决定的。其主要负责检查即将创建的子进程是否满足提权的要求，比如说是否带有微软的签名，是否在可信目录下，是否有自动提权标记等等等。如果不满足，那OK，弹框吧，甩锅给用户。本篇文章主要的工作就是找到AIS是怎么一步一步校验的。那第一步便是找到其进行RPC通信的起点了。最有效的方法当然是挂调试器，看调用栈。服务也是进程，没啥本质区别，Windbg也一样能干它。如下：
    0:004> ~*k
       0  Id: 2168.216c Suspend: 1 Teb: 000000e1`0531b000 Unfrozen
    # Child-SP          RetAddr           Call Site
    00 000000e1`050af578 00007ffd`d9c99252 ntdll!NtWaitForSingleObject+0x14
    01 000000e1`050af580 00007ffd`dcb4955b KERNELBASE!WaitForSingleObjectEx+0xa2
    02 000000e1`050af620 00007ffd`dcb48ffd sechost!ScSendResponseReceiveControls+0x13b
    03 000000e1`050af760 00007ffd`dcb48b24 sechost!ScDispatcherLoop+0x15d
    04 000000e1`050af8a0 00007ff6`f8ca17a9 sechost!StartServiceCtrlDispatcherW+0x54
    05 000000e1`050af8d0 00007ff6`f8ca4688 svchost!wmain+0x29
    06 000000e1`050af900 00007ffd`dc264034 svchost!_wmainCRTStartup+0x74
    07 000000e1`050af930 00007ffd`dd713691 KERNEL32!BaseThreadInitThunk+0x14
    08 000000e1`050af960 00000000`00000000 ntdll!RtlUserThreadStart+0x21
       1  Id: 2168.4720 Suspend: 1 Teb: 000000e1`0527e000 Unfrozen
    # Child-SP          RetAddr           Call Site
    00 000000e1`051af818 00007ffd`dd6c6866 ntdll!NtWaitForWorkViaWorkerFactory+0x14
    01 000000e1`051af820 00007ffd`dc264034 ntdll!TppWorkerThread+0x536
    02 000000e1`051afb10 00007ffd`dd713691 KERNEL32!BaseThreadInitThunk+0x14
    03 000000e1`051afb40 00000000`00000000 ntdll!RtlUserThreadStart+0x21
       2  Id: 2168.21dc Suspend: 1 Teb: 000000e1`05329000 Unfrozen
    # Child-SP          RetAddr           Call Site
    00 000000e1`0557f768 00007ffd`dd6c6866 ntdll!NtWaitForWorkViaWorkerFactory+0x14
    01 000000e1`0557f770 00007ffd`dc264034 ntdll!TppWorkerThread+0x536
    02 000000e1`0557fa60 00007ffd`dd713691 KERNEL32!BaseThreadInitThunk+0x14
    03 000000e1`0557fa90 00000000`00000000 ntdll!RtlUserThreadStart+0x21
       3  Id: 2168.4f58 Suspend: 1 Teb: 000000e1`05270000 Unfrozen
    # Child-SP          RetAddr           Call Site
    00 000000e1`054ff568 00007ffd`dd6c6866 ntdll!NtWaitForWorkViaWorkerFactory+0x14
    01 000000e1`054ff570 00007ffd`dc264034 ntdll!TppWorkerThread+0x536
    02 000000e1`054ff860 00007ffd`dd713691 KERNEL32!BaseThreadInitThunk+0x14
    03 000000e1`054ff890 00000000`00000000 ntdll!RtlUserThreadStart+0x21
    #  4  Id: 2168.3868 Suspend: 1 Teb: 000000e1`05280000 Unfrozen
    # Child-SP          RetAddr           Call Site
    00 000000e1`0567fac8 00007ffd`dd7694cb ntdll!DbgBreakPoint
    01 000000e1`0567fad0 00007ffd`dc264034 ntdll!DbgUiRemoteBreakin+0x4b
    02 000000e1`0567fb00 00007ffd`dd713691 KERNEL32!BaseThreadInitThunk+0x14
    03 000000e1`0567fb30 00000000`00000000 ntdll!RtlUserThreadStart+0x21
其中1、2、3号线程暂时可以忽略，这是线程池中的Work线程，通常是OS帮着创建的。4号线程是调试器创建的假把戏。重点在1号线程。先来看下NtWaitForSingleObject()等待的是啥。看下WaitForSingleObjectEx()的参数传入，需要做点分析，如下：
由此可知，WaitForSingleObjectEx()第一个参数存在于rsp+0x48中，这显然是一个内存地址，只要找到他便可以顺藤摸瓜了。找到这块内存的方法是找到rsp在那会的值。这个可以手动计算，如下：
那么sechost!ScSendResponseReceiveControls函数调用KERNELBASE!WaitForSingleObjectEx时，其RSP便是000000e1`050af620[需要说明的是，这里给出的堆栈可以直接知道这个数据，但在x64下，很多时候这个数据是不可靠的]，好了，现在来看看
hHandle
    0:000> dq 000000e1`050af620+48 l1
    000000e1`050af668  00000000`00000144
在详细的看下这个句柄的其他信息，如下：
是个事件，好了，到此打住。此条路似乎不通。但玩过RPC的同志，应该都知道有这么一个大佬—— RPCRT4!Invoke()
## 2、Try Again——寻找关键点
在RPCRT4!Invoke()处下断点，如下：
    0:003> bp RPCRT4!Invoke
    breakpoint 3 redefined
    0:003> g
    Breakpoint 3 hit
    RPCRT4!Invoke:
    00007ffd`dd4e43a0 4883ec38        sub     rsp,38h
    0:003> k
    # Child-SP          RetAddr           Call Site
    00 000000e1`054ff168 00007ffd`dd54b417 RPCRT4!Invoke
    01 000000e1`054ff170 00007ffd`dd49d4e4 RPCRT4!Ndr64AsyncServerWorker+0x417
    02 000000e1`054ff280 00007ffd`dd49c648 RPCRT4!DispatchToStubInCNoAvrf+0x24
    03 000000e1`054ff2d0 00007ffd`dd49d124 RPCRT4!RPC_INTERFACE::DispatchToStubWorker+0x1d8
    04 000000e1`054ff3a0 00007ffd`dd4a5eed RPCRT4!RPC_INTERFACE::DispatchToStubWithObject+0x154
    05 000000e1`054ff440 00007ffd`dd4a6aac RPCRT4!LRPC_SCALL::DispatchRequest+0x18d
    06 000000e1`054ff520 00007ffd`dd4a290d RPCRT4!LRPC_SCALL::HandleRequest+0x86c
    07 000000e1`054ff640 00007ffd`dd4a400d RPCRT4!LRPC_ADDRESS::HandleRequest+0x33d
    08 000000e1`054ff6e0 00007ffd`dd48d0b8 RPCRT4!LRPC_ADDRESS::ProcessIO+0x8ad
    09 000000e1`054ff820 00007ffd`dd6c7c9e RPCRT4!LrpcIoComplete+0xd8
    0a 000000e1`054ff8c0 00007ffd`dd6c6588 ntdll!TppAlpcpExecuteCallback+0x22e
    0b 000000e1`054ff940 00007ffd`dc264034 ntdll!TppWorkerThread+0x258
    0c 000000e1`054ffc30 00007ffd`dd713691 KERNEL32!BaseThreadInitThunk+0x14
    0d 000000e1`054ffc60 00000000`00000000 ntdll!RtlUserThreadStart+0x21
妥妥的断下来了。那来分析下关键参数把。  
RPCRT4!Invoke()的原型和实现如下：
    __int64 __fastcall Invoke(__int64 (__fastcall *pFunction)(__int64, __int64, __int64, __int64), const void *pArgumentList, __int64 pFloatingPointArgumentList, unsigned int cArguments)
    {
      void *v4; // rsp
      __int64 (__fastcall *pfun)(__int64, __int64, __int64, __int64); // rdi
      __int64 vars0; // [rsp+0h] [rbp+0h]
      __int64 vars8; // [rsp+8h] [rbp+8h]
      __int64 vars10; // [rsp+10h] [rbp+10h]
      __int64 vars18; // [rsp+18h] [rbp+18h]
      v4 = alloca(8 * ((cArguments + 1) & 0xFFFFFFFE));
      qmemcpy(&vars0, pArgumentList, 8i64 * cArguments);
      pfun = pFunction;
      RpcInvokeCheckICall();
      return pfun(vars0, vars8, vars10, vars18);
    }
参数如下：
整理之后，参数列表如下：
    pFunction:                 appinfo!RAiLaunchAdminProcess
    pArgumentList:             0000026a0754a998
    pFloatingPointArgumentList:0