decremented upon a successful transmission. As depicted in
Fig. 4, there are three error states based on the error count:
(1) error-active, (2) error-passive, and (3) bus-off. An ECU in
error-active state represents a “low” error count and transmits
a 6-bit active (dominant) error ﬂag; an ECU in error-passive
indicates a “high” error count and transmits a 6-bit passive
(recessive) error ﬂag. If enough errors are detected and the
count surpasses 255, then an ECU transitions to bus-off, where
it will shut down its CAN operations and effectively remove
itself from the bus.
B. Shutdown via errors
While a large error count in a non-adversarial scenario
is indicative of a faulty node and, hence, isolation (or even
shutdown) is a logical solution to prevent disruption of the
whole network, an adversary can misuse the error mechanism
3There is a separate count for reception errors, but it is not relevant to this
work. All references to error count refer to the transmission error count.
197
CAN bus is logical-ANDECU 1ECU 200110101TXTXECU 10011ECU 20101CAN Bus0001SOFArbitrationFieldControlDataCRCACKEOFIFSECUs transmit and simultaneously monitor bus stateOther ECUs respond;bus winner monitorsBus winner completesSole bus winner transmits and monitors for bit errorError-ActiveError-PassiveBus-OffErrorCount> 127Error Count ≤ 127Error Count> 255ECU RESET(automaticor manual)by causing intentional errors, forcing an ECU to transition
into the bus-off state and thus causing the ECU to shut down
CAN communication. However, producing intentional errors
on the CAN bus without direct access to the physical medium
is challenging. One reason is the compliance to the CAN
protocol enforced by hardware CAN controllers designed and
certiﬁed for robustness. Thus, without access to the physical
medium, an adversary can only control the ID and payload
but not the transmitted frame. Nevertheless, recent works (as
summarized in Table I) demonstrate limited success operating
under these constraints to cause a shutdown.
Errors via physical access: An adversary with physical access
can easily bypass the CAN data link layer and inject bits by
either sending signals directly to the physical bus or modifying
the CAN controller to disobey the protocol. An adversary can
also use this access to directly inject dominant bits at any time
during a victim’s transmission and cause bit errors. Several
works [5], [6] use this approach to demonstrate effective
shutdown attacks that are difﬁcult to detect as such errors are
indistinguishable from genuine bus faults. These attacks have
real-time feedback from the bus, enabling a reliable method
of shutdown. However, because they require physical access,
they are considered impractical both in research and practice
as there are easier alternatives to cause harm [12].
Errors via remote access: Prior work [15] demonstrated
the ability to overwrite messages and exploit CAN’s error-
handling mechanism without physical access. Here, an ad-
versary must estimate a victim’s message transmission time.
As most CAN messages theoretically tend to be periodic, an
adversary could perform this attack via empirical analysis.
Using these estimates, a remote adversary in control of the
MCU’s software can transmit an attack message at the same
time and with the same arbitration ID as the victim. This
approach results in two nodes winning control of the bus
and intentionally violates the CAN bus protocol. A specially-
crafted payload (a dominant bit in place of a victim’s recessive
bit) can cause the victim to detect a bit error and retransmit
its message; by repeating this attack, the victim eventually
shuts down. Recent work [21] demonstrates that this attack
is not reliable as the deviation of periodic messages varies
signiﬁcantly in practice.
Alternative shutdown mechanisms: While abuse of errors is
one method to shut down an ECU, there are other means to
shut down ECUs outside the protocol. One method, originally
intended for a mechanic to perform ECU testing, exploits diag-
nostic messages reliably transmitted by a remote adversary [4],
[18], [19]. However, such messages use known arbitration IDs
and are easily detectable by automotive defense methods.
III. ATTACK OVERVIEW
A. Adversary model
For our attacks, we consider a remote adversary that is
able to compromise an in-vehicle CAN node capable of trans-
mitting messages on the bus via the CAN stack. As market
research estimates that about 150 to 250 million connected
cars will be on the road in 2020 [22]–[24], a remote adversary
will likely target the infotainment ECU or other ECUs in the
vehicle with one or more remote interfaces [25]. We follow
the same assumptions of prior work [10], [11], [15], [16],
which assume that the adversary can modify the application
software on an ECU’s MCU and utilize any interfaces or APIs
available to this software. However, we assume the adversarial
capabilities are limited to only software manipulation and do
not allow for direct physical modiﬁcations or probing to any
of the vehicle’s components; in this work, our targets are
unaltered modern passenger vehicles with only original ECUs.
Several prior and recent works [3], [4], [26]–[28] demon-
strate the real existence of vulnerabilities to remotely com-
promise in-vehicle ECUs and gain the ability to take control
of physical vehicle functions via CAN transmissions. These
works also demonstrate that remote attacks can occur at a large
scale since a single vulnerability can be present across hun-
dreds of thousands of vehicles [4]. These real-world demon-
strations show that a remote adversary can exploit remote
wireless interfaces to modify and/or inject code into software
running on a vehicle’s MCUs. As outlined in two U.S. agency
reports [12], [29], a remote adversary is considered the highest
risk factor for the automotive community and passenger safety.
Security efforts by vehicle manufacturers, e.g. introduction
of IDSes, place signiﬁcant focus on defending after such an
adversary breaches the network [12]. For the remainder of
this paper, when we describe the remote adversary, we use
API and application-layer control interchangeably to refer to
the software instructions that the adversary can control.
Attack goals: In general, a remote adversary will likely target
non-safety-critical ECUs (e.g.
the head unit or navigation
system), which often have remote wireless interfaces to handle
multiple high-performance functions. As this adversary likely
cannot gain direct compromise of a safety-critical ECU, the
adversary will aim to utilize a compromised ECU to inﬂuence
the functionality of a different (typically safety-critical) ECU
in the vehicle without being detected by any deployed network
security mechanisms, e.g. IDSes. One way to achieve this
attack using the compromised ECU is to shut down a critical
ECU and then disable its functions or impersonate it after the
shutdown. In this work, we focus on achieving a shutdown
of a critical ECU without being detected by state-of-the-art
network defenses, i.e. the adversary succeeds if the defense
cannot detect an attack prior to the shutdown event. As we
will demonstrate, the ability to reliably inject an arbitrary bit
at an arbitrary time without being detected by vehicle defenses
is sufﬁcient to achieve these goals.
Thus, we effectively explore the possibility to construct a
reliable remote bit insertion attack, which aims to shut down
an ECU, operates as a software application, does not require
access or changes to the physical CAN hardware, and deceives
even state-of-the-art defenses. Furthermore, although several
attacks outlined in Sec. II-B achieve similar goals, to the
best of our knowledge, existing shutdown mechanisms cannot
simultaneously be remote (performed only at the application
layer), reliable (ability to consistently succeed), and stealthy
(ability to deceive known defenses). The CANnon attack shows
198
that the adversary model used by the industry has changed
the attacker now has new capabilities that prior
and that
defenses did not consider. The notion of stealth is difﬁcult
to characterize, considering the rapid progress in defense
mechanisms. For this work, we consider the best-known results
for defense as described in Sec. VII.
B. High-level attack insight
Contrast with prior invasive glitch attacks: Creating artiﬁ-
cial clock glitches is a common technique to bypass security
of MCUs during boot or veriﬁcation [19] by invasively driving
the clock signal
line to ground. The idea behind such a
technique is to create artiﬁcial transitions in the state machines
implemented in hardware. As described in Sec. II-B,
the
difﬁculty in injecting arbitrary bits is the CAN protocol en-
forcement by the CAN data link layer, i.e. the CAN controller.
Thus, similar to the security logic above, the controller can
be viewed as a hardware-based state machine that enforces
CAN protocol compliance. Thus, we draw inspiration from the
same direction of work but without requiring invasive physical
access to the clock.
CANnon attack anatomy: Any ﬁnite-state machine (FSM),
e.g. the CAN protocol, implemented using sequential logic
elements (ﬂip-ﬂops, registers, etc.) relies on the clock signal
for state transitions and thus any output transmissions. There-
fore, control of the clock signal can be used to force arbitrary
deviations from the protocol. As an example, small changes
in clock frequency would directly result in a change of the bit
duration on the CAN bus.
Fig. 5: Modern ECU design includes CAN peripheral that
runs off gated clock signal from MCU’s oscillator
is now possible: In an ideal design,
Clock control
the
clock signal should not be accessible by a remote adversary.
However, for modern ECUs, the MCU is a multi-chip mod-
ule, where the CAN controller is integrated into the same
package as the MCU and is now called a CAN peripheral.
A simpliﬁed example of the modern ECU architecture is
shown in Fig. 5. Additionally, most modern MCU architectures
implement power optimization in the form of peripheral clock
gating. This low-power feature saves energy by shutting down
any unwanted peripherals when they are not required, while
allowing the main CPU and other critical functions in the
MCU to still operate. As the CAN controller is typically
attached as a peripheral to the MCU chip, there are controls
exposed to cut off the CAN peripheral’s clock.
To allow ﬂexibility and control to low-level system design-
ers, most MCUs provide the system designer a small software
interface for the controls that allow clock cut-off. As demon-
strated in Sec. VI, clock control can be arbitrarily exercised
during regular operations, which can also provide a remote
adversary in control of the software with the same ability to
control the CAN protocol FSM. This control effectively allows
an adversary to gate the clock and freeze the protocol FSM,
only to later restart the clock to resume the FSM. Thus, this
new capability allows an adversary to arbitrarily manipulate
the CAN protocol without modifying the hardware.
We note that, in most scenarios, cutting off the clock does
not affect any data present in the sequential elements or the
outputs of the logic gates. It simply prevents a change in the
state of these elements. Also, without architectural changes,
the notion of a frozen state or disabled clock cannot be
recognized or corrected by the CAN controller. An alternative
control in the form of power gating may also be available in
certain chips, and we investigated exploiting such mechanisms.
However, we ﬁnd that disrupting the power simply resets the
peripheral and its buffers/registers, causing the CAN FSM
and output to be reset. Ultimately, we discover this attack
vector in the driver code for the CAN peripheral. In hindsight,
we realize that another factor that enabled our discovery
of this vulnerability was our choice in experimental setup
(detailed in Sec. VI), which closely resembles the modern
MCU architecture, whereas most prior research has continued
to use the legacy architecture.
C. Overview of the attack
For any transmission, the CAN controller outputs the bits
of the frame serially onto the transmit output pin (CANTX in
Fig. 5), where each new bit is triggered by a clock transition.
The binary output of the controller is converted to a CAN-
compatible analog value on the bus by the transceiver.
Consider the case when the CAN controller is transmitting
a dominant logical-0 bit. If the clock is disabled (paused)
before the next bit, the CANTX output would continue to
be logical-0 until the next clock edge. Thus, the node would
continue to assert a dominant signal until the clock signal is
resumed. This action effectively allows the transmission of a
dominant bit of arbitrary duration. Now consider the opposite
case when the CAN controller is transmitting a recessive
logical-1 bit. If the clock is disabled, it would continue to
assert a recessive value on the bus, i.e. no signal. The rest of
the payload resumes transmission only when the clock signal
is resumed. This action allows the transmission of the payload
at an arbitrary time. Observe that the adversary exploits the
controller’s inability to sense the bus state when its clock is in
the paused state. Thus, resuming the clock resumes the FSM
from the point it was stopped, regardless of the current bus
state or the controller’s transmission output on the bus. This
fact is key to disable the back-off arbitration control in CAN
controllers and to transmit a signal at an arbitrary time.
IV. BASIC REMOTE DISRUPTION ATTACK
In what follows, we take a step-wise approach to increase
the sophistication of our attack, ultimately demonstrating a
199
Automotive MCUCANTXDATACPU + MemoryCAN PeripheralCANRXCAN TransceiverCAN busOscillatorClockClockPowerCAN HardwareSW App.controlled victim shutdown. In this section, we begin with
a simple application of clock control to disrupt the entire
network via a denial-of-service (DoS) attack. This basic
disruption also highlights practical constraints that we must
consider to design a reliable attack strategy. We note that this
basic attack is easy to detect, and current hardware measures
can sufﬁciently protect against it. However, the techniques
we describe are the basis for precise and consecutive error
injections required for the targeted shutdown attack in Sec. V.
Clock gating at application layer: The primary requirement
for this attack is that the MCU must have control over the
clock input for its peripherals, e.g. controllers for different
protocols, such as CAN, Ethernet, FlexRay, etc. For the attack
we present here, we choose a popular hardware device with
a high-performance MCU built for networking applications:
the Arduino Due board with an AT91SAM3X8EA 32-bit
MCU operating at 84 MHz [30]. The Arduino Due offers
many networking peripherals (e.g. CAN) and its source code
(and CAN drivers) are well-documented, making it
ideal
for demonstrating our insights. In fact, we ﬁnd that MCUs
marketed as “high-performance” often include peripheral clock
gating as a low-power feature available for the system designer
(and thus a remote adversary).
Another requirement is that enabling/disabling the clock
signal should not reset the peripheral circuitry or change values
of its logic elements. Ideally, disabling the clock should only
prevent the sequential elements from transitioning to a new
state. This fact holds true for basic clock control mechanisms.
For the APIs of the automotive MCUs we evaluate in Sec. VI,
we ﬁnd the presence of multiple instructions that control
the clock. Typically, for some of the commonly used APIs,
MCU designers may implement additional check routines
before/after a clock disable instruction to ensure error-free
functioning, e.g. check status of transmission, etc. However,
these procedures were only implemented for some of the
available clock control instructions, and we ﬁnd at least one
instruction that offers a basic control mechanism.
the adversary must
To use the clock control,
identify
which instructions enable an MCU’s application to con-
trol peripheral clock signals. Typically, manufacturers pro-
vide basic driver code for initialization of several periph-
erals as part of their software development kit (SDK). In
instructions in
such cases, we can discover clock control
the drivers for the CAN peripheral. Alternatively,
in the
event that all clock control instructions are not completely
detailed, the reference/programming manuals for a given MCU