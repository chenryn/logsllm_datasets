(ii) or is of the form a(cid:48)[(cid:126)j ] where a(cid:48)[(cid:126)j ] < a[(cid:126)i].
Intuitively, an action can refer to its own input, and can
otherwise only refer to timestamps corresponding to actions
that occur strictly before it. We derive ≤ from < as usual:
α ≤ β when α < β or α = β.
Example 4. For illustration purposes, we consider a protocol
made of two actions
a[i].((cid:62), ok)
and
b[i].((cid:62),(cid:104)input@a[i], input@b[i](cid:105))
with a[i] < b[i].
Intuitively, this corresponds to multiple
sessions indexed by i, where each session inputs an arbitrary
message, outputs ok,
then inputs another message before
outputting the pair of the two messages it has received. Note
that action b[i] is well-formed because a[i] < b[i] and b[i]
only occurs in the action’s components through input@b[i].
Example 5. We model the Basic Hash protocol in our frame-
work using a set of three actions with an empty dependency
relation:
aT [i, j].(cid:0) (cid:62),(cid:104)n[i, j], H(n[i, j], key[i])(cid:105)(cid:1)
aR[j, i].(cid:0)
ok(cid:1)
aR1[j].(cid:0)
∀i. snd(input@aR1[j]) (cid:54)= H(fst(input@aR1[j]), key[i])(cid:1),
error(cid:1)
snd(input@aR[j, i]) = H(fst(input@aR[j, i]), key[i]),
We can instantiate the indices of an action by concrete
values to yield concrete actions, which represent distinct
copies of the original action.
Deﬁnition 4. Given a set A of action symbols, a concrete
action is an action symbol a ∈ A applied to k integers
(where k is the index arity of a). The partial order of a protocol
P = (PA, <) is lifted to concrete actions in the natural
way: for any mapping σ : I → N, a[σ(i1), . . . , σ(ik)] <
b[σ(j1), . . . , σ(jl)] holds when a[i1, . . . , ik] < b[j1, . . . , jl].
Finally, for a given protocol, we can consider its possible
interleavings, e.g. the possible sequences of actions that are
compatible with its dependency relation.
Deﬁnition 5. Given a protocol P = (PA, <), an interleaving
is a sequence of concrete actions α1 . . . αn in which no con-
crete action occurs twice, and such that, for every 1 ≤ i ≤ n,
for every concrete action β such that β < αi, there exists
1 ≤ j < i such that β = αj.
The constraints on interleavings are necessary but insuf-
ﬁcient conditions for a sequence of concrete actions to be
executable. The actual executability of an interleaving will be
a probabilistic notion, and will depend on the implementation
of cryptographic primitives. It is addressed in the next section.
Example 6. Going back to the simple protocol introduced
in Example 4, we have concrete actions a[1], b[1], a[2],
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
541
. . . with a[1] < b[1], a[2] < b[2],
b[2],
. . . indicating that,
in each session, b has to occur after a. The sequence
a[2] a[1] b[1] b[2] is an interleaving, but a[2] a[1] b[1] b[2] a[2],
and b[2] a[1] b[1] a[2] are not.
Note that our notion of dependency ordering can be used to
impose phase constraints: declaring a[i] < b[j] imposes that,
in all interleavings, any concrete actions a[k1] is executed
before all concrete actions b[k2]. In the tool, such extra
constraints can be speciﬁed with an axiom, as follows:
axiom phase: forall(i,j:index), a(i) < b(j).
Example 7. Continuing our running example, aT [1, 1],
aT [1, 2], aT [2, 1], aR[3, 1], and aR1[3] are concrete actions
with no dependency. Some possible interleavings are:
1) aT [1, 2] aR[3, 1];
2) aT [1, 2] aR[3, 1] aR1[3];
3) aR[3, 1] aT [1, 2] aT [1, 3].
The ﬁrst interleaving corresponds to an honest execution.
First, a tag (with id 1) executes its action (for session id 2).
Then, the reader (session id 3) executes its ﬁrst action for
i = 1, i.e. it recognizes a valid input w.r.t. key[1] of the tag
with id 1.
The second interleaving does not correspond to any real
execution since the conditions of actions aR[3, 1] and aR1[3]
could not be satisﬁed simulatenously.
The third interleaving is also not executable: it represents
an execution in which the reader (session id 3) recognizes a
valid input from tag 1 before any output from tag 1.
As mentioned before, our tool takes as input a protocol spec-
iﬁcation expressed in a fragment of the applied pi-calculus,
and automatically translates it
to a protocol according to
Deﬁnition 3. The translation is rather straightforward but its
description and the study of its semantic properties are outside
the scope of this paper.
IV. SEMANTICS
The semantics of our meta-logic is given through a transla-
tion from the meta-logic to the base logic of [11]. We recall
the semantics of the base logic in Section IV-A before deﬁning
the translation in Section IV-B.
A. Base Logic
We brieﬂy recall the key deﬁnitions of [11], considering
only the sort message, and a single attacker symbol att. We do
not rely on the way [11] encodes protocol equivalence into the
logic (using a so-called folding operation) but only need the
core logic for reasoning about computational indistinguisha-
bility of sequences of messages.
Syntax: The base logic is a ﬁrst-order logic, in which
terms represent probabilistic PTIME Turing machines produc-
ing bitstrings, and a single predicate ∼ represents computa-
tional indistinguishability. A key idea of the CCSA approach
is to use a special attacker function symbol att to represent the
attacker’s computations, which is left unspeciﬁed to model the
fact that the attacker may perform any arbitrary probabilistic
PTIME computation. The logic is parameterized by a set NB
of name symbols, a set of variables XB, and a set of function
symbols FB. Terms are generated from XB and NB using the
unary function symbol att and the function symbols of FB.
We assume that FB contains at least the following symbols,
with the expected arities and usual notations:
• pairing (cid:104)_, _(cid:105), equality EQ(_, _);
• constants empty, true and false;
• conditionals if _ then _ else _.
We do not use a predicate symbol for equality in the base
logic: EQ(u, v) is a term and we may write, for instance,
EQ(true, EQ(u, v)). We allow ourselves to use the same
notations for some constructs in the meta-logic and base logic,
because our translation is homomorphic w.r.t. them.
Atomic formulas are of the form u1, . . . , un ∼ v1, . . . , vn
where n ≥ 0 and u1, . . . , un, v1, . . . , vn are terms, and
represent indistinguishabilities between two experiments.
Semantics: We are interested in the interpretation of
formulas of the base logic in a speciﬁc class of ﬁrst-order
interpretations, called computational models. The domain of a
computational model M is the set of PTIME Turing machines
receiving as inputs the security parameter η in unary (1η) and
a pair ρ = (ρs, ρr) of random tapes (the complexity is w.r.t.
the security parameter, not the random tapes). The tape ρs is
used to draw honestly generated random values, and is not
directly accessible by the attacker, and ρr is used for random
values drawn by the attacker. The interpretation [[t]] of a term
as a Turing machine is deﬁned as follows.
• Each name n ∈ NB is interpreted as a machine that
extracts a word of length η from ρs, such that different
names extract disjoint parts of the tape.
• The symbols empty, true, false, EQ and if _ then _ else _
are interpreted in the expected way. E.g., for any terms
t1, t2, [[EQ(t1, t2)]] is the Turing machine that, on input
(1η, ρ), returns 1 if [[t1]] and [[t2]] return the same result:
(cid:40)
1
0
[[EQ(t1, t2)]](1η, ρ) =
if [[t1]](1η, ρ) = [[t2]](1η, ρ)
otherwise
• The other function symbols in FB are interpreted as
arbitrary PTIME Turing machines that do not access the
random tapes. When studying a speciﬁc protocol, we re-
strict computational models according to the assumptions
the protocol relies on: e.g. we may assume that a binary
function symbol ⊕ is interpreted as exclusive or, that a
binary function symbol H is interpreted as a PRF keyed
hash function, . . .
• The symbol att is interpreted as a PTIME Turing Ma-
chine that does not access the random tape ρs, but has
access to ρr.
Finally, the predicate ∼ is interpreted as computational in-
distinguishability (noted ≈), where d1, . . . , dn ≈ d(cid:48)
1, . . . , d(cid:48)
when for any PTIME Turing machine A,
n
| Pr(ρ : A(d1(1η, ρ), . . . , dn(1η, ρ), ρr) = 1)−
Pr(ρ : A(d(cid:48)
n(1η, ρ), ρr) = 1) |
1(1η, ρ), . . . , d(cid:48)
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
542
is negligible in η.
We write M |= φ when the base formula φ is satisﬁed in
the computational model M, and we say that φ is valid if it
is satisﬁed in any computational model.
Example 8. Assume that n and m are two distinct names.
The formulas n ∼ m and EQ(n, m) ∼ false are valid: indeed,
the attacker cannot distinguish between two random samplings
with the same distribution, and there is a negligible probability
that two independent uniform samplings of length η coincide.
The if _ then _ else _ function symbol allows to deﬁne other
.∧ v for if u then v else false,
.∨ v and u .⇒ v. Finally, we write u .= v
boolean constructs. We write u
and deﬁne similarly u
for EQ(u, v).
Example 9. Consider the following base logic formulas:
(u ∼ true) ⇒ (v ∼ true)
(u .⇒ v) ∼ true
(a)
(b)
Formula (a) is a logical consequence of (b): if both u .⇒ v
and u are true with overwhelming probability, then it must
also be the case for v.
However, (a) does not generally imply (b). Consider a unary
function symbol f and a model M where f is interpreted as
the machine that returns the ﬁrst bit of its argument. Then,
for any arbitrary name n, the term f (n) is interpreted as the
2 , and
probabilistic computation returning 1 with probability 1
0 otherwise. We have M (cid:54)|= (f (n) ∼ true) hence formula (a)
is satisﬁed in M when u := f (n), regardless of v. However,
M (cid:54)|= (f (n) .⇒ false) ∼ true. In other words, f (n) is not true
with overwhelming probability, but it is also not false with
overwhelming probability.
B. Translation
Our translation from the meta-logic to the base logic, is pa-
rameterized by the protocol that the meta-logic is meant to de-
scribe. From now on, we assume some protocol P = (PA, <)
built upon a set of actions A using function and name symbols
from F and N . Therefore, we consider meta-logic terms and
formulas over Σ = (F,N ,A).
Deﬁnition 6. Given a ﬁnite set D of integers, the base logic
signature ΣD = (FB,NB) contains exactly:
• a name symbol nk1,...,kp for every n ∈ N of index arity p,
• a function symbol fk1,...,kp of arity n for every f ∈
index arity p and message arity n, and every
and every k1, . . . , kp ∈ D;
F of
k1, . . . , kp ∈ D.
Example 10. In the Basic Hash protocol, n ∈ N is a name
symbol of our meta-logic, of index arity 2. Let D = {1, 2}. We
have ΣD = (FB,NB) with NB = {n1,1, n1,2, n2,1, n2,2}. In
other words, for this choice of concrete indices, we consider
four different names in the base logic. Function symbols used
to model primitives are all of index arity 0, thus we have a
one to one correspondence between function symbols in F and
those in FB, and we still write H, (cid:104)_, _(cid:105), fst, and snd.
We now deﬁne the structure that allows us to interpret meta-
terms and meta-formulas. The idea is that for each possible
interleaving of the protocol, we can deﬁne a structure such
that the macros at each timestamp correspond to their expected
value for that interleaving.
Deﬁnition 7. A trace model T (associated to a protocol P)
is a tuple (DI,DT , <T , σI, σT ) such that:
• DI ⊆ N is a ﬁnite index domain;
• <T is a total ordering on
DT := {init}(cid:93){a[k1, . . . , kn] | a ∈ A, k1, . . . , kn ∈ DI}
such that init is minimal, and such that the sequence of
elements of DT ordered by <T is an interleaving of P;
• σI : I → DI and σT : T → DT are mappings that
interpret index and timestamp variables as elements of
their respective domains.
We include σI and σT to ease the presentation, which
means that trace models provide an interpretation for all index
and timestamp variables. This information is often irrelevant:
when interpreting a formula, only the interpretation of its free
variables will matter.
The total ordering <T yields a predecessor function predT :
DT → DT which maps init to itself and all other elements
v ∈ DT to the largest v(cid:48) ∈ DT such that v(cid:48) < v.
Example 11. Continuing our running example, we consider
DI = {1}, and the following total ordering:
init < aT [1, 1] < aR[1, 1] < aR1[1]
Therefore, we have that predT (aR[1, 1]) = aT [1, 1]. The
notion of trace model forces us to include both aR1[1] and
aR[1, 1] even though their conditions are mutually exclusive.
It is not a concern: what matters is that all real executions of
the protocol are accounted for by some preﬁx of the complete
interleaving induced by some trace model.
When T = (DI,DT , <T , σI, σT ) is a trace model and
k ∈ DI, T{i (cid:55)→ k} is the trace model identical to T in
which σI is updated to map i to k. We similarly deﬁne
T{τ (cid:55)→ v} when v ∈ DT .
We can now deﬁne, for each meta-term t and trace model T,
T, and similarly for formulas. The
the base logic term (t)
complete deﬁnition is given in Appendix A, and we only
present here its general principle. It is deﬁned inductively
on the structure of meta-terms and meta-formulas, translating
each meta-logic construct by its counterpart in the base logic
when it is available. Indexed function symbols are translated
to their counterpart in ΣDI . For instance, names are translated
as follows:
T def
(n[i1, . . . , ip])
= nσI (i1),...,σI (ip).
Boolean constructs are translated to their dotted counterparts.
Finally, lookup constructs are translated to nested conditionals:
(ﬁnd (cid:126)i suchthat φ in t else t(cid:48))
T{(cid:126)i(cid:55)→(cid:126)k1} then (t)
T{(cid:126)i(cid:55)→(cid:126)k2} then (t)
T def
=
T{(cid:126)i(cid:55)→(cid:126)k1} else
T{(cid:126)i(cid:55)→(cid:126)k2} else
if (φ)
if (φ)
. . .
if (φ)
T{(cid:126)i(cid:55)→(cid:126)kp} then (t)
T{(cid:126)i(cid:55)→(cid:126)kp} else (t(cid:48))
T
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
543
condinit = execinit = true
inputinit = frameinit = outputinit = empty
outputa[(cid:126)i ]
= o
conda[(cid:126)i ] = φ
execa[(cid:126)i ]
framea[(cid:126)i ] = (cid:104)exec@a[(cid:126)i ],
= cond@a[(cid:126)i ] ∧ exec@pred(a[(cid:126)i ])
inputa[(cid:126)i ] = att(cid:0)frame@pred(a[(cid:126)i ])(cid:1)
frame@pred(a[(cid:126)i ])(cid:105)(cid:105)
(cid:104)if exec@a[(cid:126)i ] then output@a[(cid:126)i ] else empty,
Fig. 2.
Interpretation of macros, where a[(cid:126)i].(φ, o) is an action of PA.
where (cid:126)k1, . . . , (cid:126)kp is a complete enumeration of D|(cid:126)i|
I .