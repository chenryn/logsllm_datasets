To the best of our knowledge, there are no existing robust
mechanisms for hiding sensitive apps. Below, we present
some mechanisms that can offer partial protection.
6.1 Mechanisms by Google
Android does not provide users with a mechanism to hide the
existence of apps from other apps. But users can repurpose
existing Android mechanisms for partially hiding apps.
716    28th USENIX Security Symposium
USENIX Association
Multiple Users. Android supports multiple users on a single
phone by separating user accounts and app data.19 This fea-
ture could be used to prevent ﬁngerprinting of sensitive apps
by installing sensitive apps in one or more secondary accounts,
thus isolating sensitive apps from nosy apps. However, a key
disadvantage of using multiple users for this purpose is that it
prevents inter-app communications (e.g., intent-based inter-
actions) among apps in different user accounts. As a result,
sensitive apps’ functionalities can be signiﬁcantly reduced
because they cannot delegate tasks to other apps. For instance,
a sensitive app will not have access to a user’s calendar or
contacts (unless the user replicates them on each account)
or access to other apps for certain tasks, e.g., sending a mes-
sage or picture via Whatsapp or Facebook, accessing ﬁles in
Dropbox, sending an e-mail or SMS, and authenticating users
with Google or Facebook accounts. In section 10.5, we show
that popular mHealth apps use inter-app communications not
only for delegating tasks but also for sharing their resources
with other apps. Therefore, a solution that hides sensitive
apps and that still supports inter-app communications is more
desirable.
Multiple user accounts could also introduce new security
and privacy issues [45]. Using multiple users will signiﬁ-
cantly affect the user experience, as users will have to switch
back and forth among accounts to access different types of
apps and data, introducing signiﬁcant delays and confusion.
While the primary account is in the foreground, apps on sec-
ondary accounts are put in the background and they cannot
use Bluetooth services (important for mHealth apps). Another
important problem is that some popular phone manufacturers
(e.g., Samsung, LG, Huawei, Asus) disable multiple users in
some of their devices,20 thus affecting the availability of this
solution to many users.
We have also found experimentally that the implementa-
tion of multiple users in the latest (Android 9) and earlier
versions of Android does not effectively prevent nosy apps
from learning what other apps are installed in different user
accounts. To bypass this protection, a nosy app could do any
of the following:
• On Android 7 or earlier, including an additional param-
eter ﬂag (MATCH_UNINSTALLED_PACKAGES) in methods
getIA() and getIP() will reveal the apps installed in
secondary user accounts.
• On Android 9
nosy
app
or earlier, a
getPackageUid(),
checkSignatures(),
can
PackageManager methods, such
use multiple
getPackageGidS(),
as
checkPermission(),
or
getApplicationEnabledSetting(), as oracles to
check if an app is installed on a secondary account or
on a work proﬁle. The nosy app only needs to include
the package name of the targeted sensitive app as a
parameter to these methods. Android’s source code
shows that these methods check the user ID of the app
calling the method to show only information of apps in
the same user proﬁle, but our experimental evaluation
shows that currently deployed versions of Android do
not enforce such checks. This approach was tested on
Android 9.
• A nosy app can guess the UIDs of the apps installed
on all the accounts and work proﬁles, by looking at the
/proc/uid directory to learn the ranges of current UIDs
in the system. It then guesses the UIDs of other apps and
uses the getNameForUid() method to learn the package
name. This method will return a package name given a
UID as a input parameter; if the app does not exist, it
returns null. As a result, it can be used as an oracle to
retrieve the list of installed apps on the device. This was
tested on Android 6, 8.1 and 9.
• A nosy app with adb privilege can easily verify if a
sensitive app is running on the device, independently of
the account or proﬁle it was installed on, by using the
shell command: pidof . This approach
was tested on Android 9.
• A nosy app with adb privilege can obtain the list of in-
stalled apps, which includes apps on secondary accounts
and work proﬁles, by using the shell command dumpsys.
This approach was tested on Android 9.
Android for Work. Android supports an enterprise solution
called Android for Work; this solution separates work apps
from personal apps.21 Our tests, using similar methods as
with multiple users, also conﬁrmed that, as with multiple
users accounts, it is easy to identify which apps are in the
work proﬁle. In addition, Android for Work is only available
to enterprise users.
Recently, Android introduced a new feature called Instant
Apps;22 this feature enables users to run apps instantly with-
out installing them. Such an approach could be used to hide
sensitive apps, however, it only supports a limited subset of
permissions, and it does not support features that are crucial
for mHealth apps such as storing users’ data or connecting to
Bluetooth-enabled devices.23
Google classiﬁes the list of installed apps as personal in-
formation hence requires apps that collect this information to
include in their privacy policies the purpose of their collec-
tion. Apps that do not follow this requirement are classiﬁed as
Potentially Harmful Apps (PHAs) or Mobile Unwanted Soft-
wares (MuWS) [1, 2]. Android security services, e.g., Google
Play Protect [10], periodically scan users’ phones and warn
users if apps behave as PHAs or MuWS. Such mechanisms,
however, do not seem to effectively protect against the unau-
thorized collection of the list of installed apps. Our analyses
show that only 7.7% of the apps declare their collections of
such information in their privacy policies, and some claim that
a list of installed app is non-personal information (Section 5).
USENIX Association
28th USENIX Security Symposium    717
Furthermore, these mechanisms might fail to detect targeted
attacks, e.g., a nosy app might want to check if a small subset
of sensitive apps exists on the phone.
6.2 Mechanisms by Third Parties
Samsung Knox24 relies on secure hardware to offer isolation
between personal and work-related apps, similar to Android
for Work. Unfortunately, we were not able to evaluate the
robustness of the protection offered by Knox w.r.t. hiding
apps, because Samsung discontinued its support for work and
personal spaces for private users; only enterprise users can use
such a feature. Nevertheless, this solution is device speciﬁc
and only hides apps from other apps in a different isolated
environment, but not from apps in the same environment (apps
in the same isolated environment can come from different,
untrusted sources). That is, a solution that provides per-app
isolation is preferable.
There are apps on the Google Play Store that help users to
hide the icons of their sensitive apps from the Android app
launcher (e.g., [16]). Even though they help hide the presence
of the sensitive apps from other human users (e.g., nosy part-
ners), these sensitive apps are still visible to other apps. Along
the line of user-level virtualization techniques, on the Google
Play Store, we found apps that use these techniques to enable
users to run in parallel multiple instances of an app on their
phones and to partially hide the app, (e.g., [11, 17, 18]). How-
ever, these solutions require the hidden app to be installed ﬁrst
on the phone before protecting it, thus triggering installation
and uninstallation broadcast events that can be detected by
a nosy app. These apps provide only a single isolated space,
i.e., they do not protect apps from other apps in the same
environment. Our preliminary evaluation of these apps also
shows that their protection is limited, e.g., the names of the
hidden apps can be found in the list of running processes.
7 Our Solution: HideMyApp
We propose HideMyApp (HMA), a system for hiding the pres-
ence of sensitive apps w.r.t. to a nosy app on the same phone.
In this section, we will present our system model, adversarial
model, design goals and a high-level overview of the solution.
7.1 System Model
The scenario envisioned for HMA is as follows. A hospital or a
hospital consortium (hereafter called hospitals) sets up an app
store, called HMA App Store, where app developers working
for the hospitals publish their mHealth apps. Hospitals want
their patients to use their mHealth apps without disclosing
their use to other apps on the same phone. Note that such
organizations and their own app stores already exist, e.g., the
VA App Store set up by the U.S. Department of Veterans
Affairs.
To enable the users to manage the apps provided by
the HMA App Store, the HMA App Store provides the users
with a client app called HMA Manager. This app can be dis-
tributed through any available app stores, e.g., the Google Play
Store. To allow the HMA Manager app to install apps down-
loaded from the HMA App Store, similarly to other Google
Play Store alternatives e.g., Amazon25 and F-Droid [9], users
need to enable the “allow apps from unknown sources" set-
ting on their phones. Since Android 8.0, Google made this
option more ﬁne-grained by turning it into the “Install un-
known apps" permission [19]. That is, users only need to
grant this permission to the HMA Manager app to enable it to
install apps from the HMA App Store.
7.2 Adversarial Model
We assume the Android OS on the user’s phone to be trusted
and secure, including its Linux kernel and its Java API
framework. We assume that the HMA App Store and the
HMA Manager app are trusted and secure, and that they follow
the prescribed protocols of the system. We discuss mecha-
nisms to relax the trust assumptions on the HMA App Store
and HMA Manager app in Section 9.2.
We assume there is a nosy app that wants to learn if
a speciﬁc app is present on the phone. The nosy app has
the default app-privilege, and it is granted all dangerous
permissions by its user – these are the typical capabilities
of apps that users often install on their phones. In Sec-
tion 9, we discuss mechanisms for preventing more ad-
vanced ﬁngerprinting attacks by malicious apps; a mali-
cious app has more capabilities than a nosy app, i.e., it can
have special permissions (e.g., PACKAGE_USAGE_STATS or
BIND_ACCESSIBILITY_SERVICE) and the debugging privi-
lege (adb), thus it can perform more advanced attacks, such
as ﬁngerprinting apps using their runtime information.
We assume that apps belonging to hospitals are nosy,
i.e., these apps are also curious about what other apps are
installed on the user’s device.
7.3 Design Goals
The purpose of HMA is to effectively hide the presence of
sensitive apps, yet preserve their usability and functionality.
• (G1) Privacy protection. It should be difﬁcult for a nosy
app to identify sensitive apps on the same phone.
• (G2) No ﬁrmware modiﬁcations. The solution should
run on stock Android phones. That is, it should not re-
quire the phones to run customized versions of Android
ﬁrmware, e.g., extensions to Android’s middleware or the
Linux kernel. This also means that the solution should
not require the phones to be rooted.
718    28th USENIX Security Symposium
USENIX Association
• (G3) Preserving the app-isolation security model of An-
droid. Each app should have its own private directory
and run in its own dedicated process.
• (G4) Few app modiﬁcations. For baseline protection
against nosy apps, the solution should not require app
developers to change their apps. For protection against
malicious apps, apps might need to be changed or some
features might not be supported.
• (G5) Usability. The solution should preserve the usability
and the key functionalities of sensitive apps.
7.4 HMA Overview
From a high-level point of view, HMA achieves its aforemen-
tioned design goals by enabling its users to install a container
app for each sensitive app (as illustrated in Fig. 1). Each con-
tainer app has a generic package name and obfuscated app
components. As a result, nosy apps cannot ﬁngerprint a sen-
sitive app by using the information about its container app.
At runtime, the container app will launch the APK ﬁle of the
sensitive app within its context by relying on user-level virtu-
alization techniques. That is, the sensitive app is not registered
in the OS.
To do so, HMA requires the hospitals to bootstrap the sys-
tem by setting up the HMA App Store and distributing the
HMA Manager app to users (Section 8.1 and 8.2). Through
the HMA Manager app, users can (un)install, open, and update
sensitive apps without being discovered by the OS and other
apps. We detail these operations in Section 8.3.
8 HMA System Description
Here, we detail the components and operations of HMA.
8.1 HMA Manager App
Recall, to hide their presence, sensitive apps are not regis-
tered in the OS; instead, their container apps are registered.
Thus, if users open their default Android app launcher, they
will only see container apps with generic icons and random
names. To solve this usability issue, at installation time, the
HMA Manager app keeps track of the one-to-one mappings
between sensitive apps and their container apps. Using the
mappings, the HMA Manager app can display the container
apps to the users with the original icons and labels of their sen-
sitive apps. To provide unlinkability between users and their
sensitive apps w.r.t. the HMA App Store, the HMA Manager
app never sends any identifying information of the users to
the HMA App Store, and all the communications between the
HMA App Store and the HMA Manager are anonymous. This
is a reasonable assumption because the HMA Manager app can
be open-sourced and audited by third parties. Also, in most
cases, users do not have ﬁxed public IP addresses; they access
the Internet via a NAT gateway offered by cellular providers.
If needed, a VPN proxy or Tor could be used to hide network
identiﬁers.
8.2 HMA App Store
The HMA App Store receives app-installation and app-update
requests from HMA Manager apps and returns container
apps to them. To reduce the delays introduced to the app-
installation and app-update requests, the HMA App Store de-
ﬁnes a set of P generic package names for container apps,
e.g., app-1, . . ., app-P. This set of generic names is shared
by all sensitive apps, thus there is no one-to-one mapping
between a sensitive app and a generic name or a subset of
generic names.26 For each sensitive app, the HMA App Store
can generate beforehand P container apps corresponding to
P predeﬁned generic package names and store them in its
database. Below, we explain the procedure followed by the
HMA App Store to create a container app. Details about the
app-installation and update requests from the HMA Manager
apps are explained in Section 8.3.
HMA Container-App Generation. To generate a container
app for a sensitive APK, the HMA App Store performs the
following steps. Note that this operation cannot be performed
by the HMA Manager app, because Android does not provide
tools for apps to decompile and compile other apps.
• The HMA App Store creates an empty app with a
generic app icon, a random package name and label,
and it imports into the app the lib and the code for the
user-level virtualization, i.e., to launch the APK from
the container app. Note that the lib and the code are
independent from the APK.
• The HMA App Store extracts the permissions declared
by the sensitive app and declares them in the manifest
ﬁle of the container app.
• To enable the container app to launch the sensitive APK,
app components (activities, services, broadcast receivers,
and content providers) declared by the sensitive app need
to be declared in the manifest ﬁle of the container app.
This information, however, can be retrieved by nosy apps
to ﬁngerprint sensitive apps (Section 4). To mitigate this
problem, the container app declares activities, services
and broadcast receivers of the sensitive app with random
names. At runtime, the container app will map these ran-
dom names to the real names. The intent ﬁlters declared
in the components of sensitive apps are also declared in
the manifest ﬁle of their sensitive apps. In Section 9, we
will discuss the case of content providers.
• The HMA App Store compiles the container app to ob-
tain its APK and signs it.