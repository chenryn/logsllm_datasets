:::
以下部分显示了监控磁盘和 I/O 活动的脚本。
::: section
::: titlepage
# []{#assembly_monitoring-disk-and-i-o-activity-with-systemtap_assembly_profiling-kernel-activity-with-systemtap.html#proc_summarizing-disk-read-write-traffic-with-systemtap_assembly_monitoring-disk-and-i-o-activity-with-systemtap}使用 SystemTap 总结磁盘读/写流量 {.title}
:::
您可以使用 [**disktop.stp**]{.strong} SystemTap
脚本确定哪些进程正在执行最重的磁盘读取和写入。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**disktop.stp**]{.strong} 脚本：
    ``` screen
    # stap --example disktop.stp
    ```
    脚本显示负责最多读取或写入磁盘的十大进程。
    输出包括每个列出的过程的以下数据：
    ::: variablelist
    [UID ]{.term}
    :   用户 ID.用户 ID `0`{.literal} 是指 root 用户。
    [PID ]{.term}
    :   列出进程的 ID。
    [PPID ]{.term}
    :   列出进程的父进程的进程 ID。
    [CMD ]{.term}
    :   列出的进程的名称。
    [DEVICE ]{.term}
    :   列出的进程从哪个存储设备读取或写入.
    [T ]{.term}
    :   列出的进程执行的操作类型，其中 `W`{.literal} 是指 write，r
        ``{.literal} 指的是读取。
    [BYTES ]{.term}
    :   从磁盘读取或写入的数据量。
    :::
:::
`disktop.stp`{.literal} 脚本的输出类似如下：
``` screen
[...]
Mon Sep 29 03:38:28 2008 , Average:  19Kb/sec, Read: 7Kb, Write: 89Kb
UID      PID     PPID                       CMD   DEVICE    T    BYTES
0    26319    26294                   firefox     sda5    W        90229
0     2758     2757           pam_timestamp_c     sda5    R         8064
0     2885        1                     cupsd     sda5    W         1678
Mon Sep 29 03:38:38 2008 , Average:   1Kb/sec, Read: 7Kb, Write: 1Kb
UID      PID     PPID                       CMD   DEVICE    T    BYTES
0     2758     2757           pam_timestamp_c     sda5    R         8064
0     2885        1                     cupsd     sda5    W         1678
```
:::
::: section
::: titlepage
# []{#assembly_monitoring-disk-and-i-o-activity-with-systemtap_assembly_profiling-kernel-activity-with-systemtap.html#proc_tracking-i-o-time-for-each-file-read-or-write-with-systemtap_assembly_monitoring-disk-and-i-o-activity-with-systemtap}使用 SystemTap 跟踪每个文件读写的 I/O 时间 {.title}
:::
您可以使用 the [**iotime.stp**]{.strong} SystemTap
脚本监控从任何文件读取或写入每个进程所需的时间。这有助于您确定哪些文件在系统中加载缓慢。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 the [**iotime.stp**]{.strong} 脚本：
    ``` screen
    # stap --example iotime.stp
    ```
    每次系统调用打开、关闭、读取和写入文件时，脚本会跟踪。对于任何系统调用访问的每个文件，它会计算完成任何读写所需的微秒数，并跟踪来自文件或写入的数据量（以字节为单位）。
    输出包含：
-   时间戳，以微秒为单位
-   进程 ID 和进程名称
-   `访问 or`{.literal} `iotime`{.literal} 标记
-   访问的文件
    如果进程能够读取或写入任何数据，则应一起显示一对访问 and
    `iotime`{.literal}
    行。访问行指的是给定进程开始访问文件的时间。访问行的末尾将显示已读取或写入的数据量。The
    `iotime`{.literal}
    行将显示进程执行读取或写入所花费的时间，以微秒为单位。
:::
the `iotime.stp`{.literal} 脚本的输出类似如下：
``` screen
[...]
825946 3364 (NetworkManager) access /sys/class/net/eth0/carrier read: 8190 write: 0
825955 3364 (NetworkManager) iotime /sys/class/net/eth0/carrier time: 9
[...]
117061 2460 (pcscd) access /dev/bus/usb/003/001 read: 43 write: 0
117065 2460 (pcscd) iotime /dev/bus/usb/003/001 time: 7
[...]
3973737 2886 (sendmail) access /proc/loadavg read: 4096 write: 0
3973744 2886 (sendmail) iotime /proc/loadavg time: 11
[...]
```
:::
::: section
::: titlepage
# []{#assembly_monitoring-disk-and-i-o-activity-with-systemtap_assembly_profiling-kernel-activity-with-systemtap.html#proc_tracking-cumulative-i-o-with-systemtap_assembly_monitoring-disk-and-i-o-activity-with-systemtap}使用 SystemTap 跟踪累积 I/O {.title}
:::
您可以使用 [**traceio.stp**]{.strong} SystemTap 脚本来跟踪系统的 I/O
累计数量。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**traceio.stp**]{.strong} 脚本：
    ``` screen
    # stap --example traceio.stp
    ```
    脚本会打印随时间生成 I/O
    流量的十大可执行文件。它还跟踪由这些可执行文件进行的 I/O
    读取和写入的累积数量。该信息将以 1 秒的间隔和降序进行跟踪和打印。
    `traceio.stp`{.literal} 脚本的输出类似于如下：
:::
``` screen
[...]
           Xorg r:   583401 KiB w:        0 KiB
       floaters r:       96 KiB w:     7130 KiB
multiload-apple r:      538 KiB w:      537 KiB
           sshd r:       71 KiB w:       72 KiB
pam_timestamp_c r:      138 KiB w:        0 KiB
        staprun r:       51 KiB w:       51 KiB
          snmpd r:       46 KiB w:        0 KiB
          pcscd r:       28 KiB w:        0 KiB
     irqbalance r:       27 KiB w:        4 KiB
          cupsd r:        4 KiB w:       18 KiB
           Xorg r:   588140 KiB w:        0 KiB
       floaters r:       97 KiB w:     7143 KiB
multiload-apple r:      543 KiB w:      542 KiB
           sshd r:       72 KiB w:       72 KiB
pam_timestamp_c r:      138 KiB w:        0 KiB
        staprun r:       51 KiB w:       51 KiB
          snmpd r:       46 KiB w:        0 KiB
          pcscd r:       28 KiB w:        0 KiB
     irqbalance r:       27 KiB w:        4 KiB
          cupsd r:        4 KiB w:       18 KiB
```
:::
::: section
::: titlepage
# []{#assembly_monitoring-disk-and-i-o-activity-with-systemtap_assembly_profiling-kernel-activity-with-systemtap.html#proc_monitoring-i-o-activity-on-a-specific-device-with-systemtap_assembly_monitoring-disk-and-i-o-activity-with-systemtap}使用 SystemTap 监控特定设备上的 I/O 活动 {.title}
:::
您可以使用 [**traceio2.stp**]{.strong} SystemTap 脚本来监控特定设备上的
I/O 活动。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**traceio2.stp**]{.strong} 脚本。
:::
``` screen
# stap --example traceio2.stp 'argument'
```
此脚本将整个设备编号取为参数。要找到这个数字，您可以使用：
``` screen
# stat -c "0x%D" directory
```
[*目录*]{.emphasis} 位于您要监控的设备中。
输出包含以下内容：
::: itemizedlist
-   执行读取或写入的任何进程的名称和 ID
-   它执行的功能（v`fs_read 或`{.literal} `vfs_write`{.literal}）
-   内核设备号
:::
请考虑 `# stap traceio2.stp 0x805`{.literal}的以下输出
``` screen
[...]
synergyc(3722) vfs_read 0x800005
synergyc(3722) vfs_read 0x800005
cupsd(2889) vfs_write 0x800005
cupsd(2889) vfs_write 0x800005
cupsd(2889) vfs_write 0x800005
[...]
```
:::
::: section
::: titlepage
# []{#assembly_monitoring-disk-and-i-o-activity-with-systemtap_assembly_profiling-kernel-activity-with-systemtap.html#proc_monitoring-reads-and-writes-to-a-file-with-systemtap_assembly_monitoring-disk-and-i-o-activity-with-systemtap}监控使用 SystemTap 读取并写入文件 {.title}
:::
您可以使用 [**inodewatch.stp**]{.strong} SystemTap
脚本实时监控来自文件的读取和写入文件。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 `inodewatch.stp`{.literal} 脚本。
:::
``` screen
# stap --example inodewatch.stp 'argument1' 'argument2' 'argument3'
```
脚本 `inodewatch.stp`{.literal} 采用三个命令行参数：
::: orderedlist
1.  文件的主要设备编号.
2.  文件的次要设备编号.
3.  文件的索引节点编号.
:::
您可以使用以下方法获取这些数字：
``` screen
# stat -c '%D %i' filename
```
其中 [*filename*]{.emphasis} 是绝对路径。
考虑以下示例：
``` screen
# stat -c '%D %i' /etc/crontab
```
输出应类似于如下：
``` screen
805 1078319
```
其中：
::: itemizedlist
-   `805`{.literal} 是
    base-16（十六进制）设备号。最后两位数字是次要设备编号，剩余的数字是主数字。
-   `1078319`{.literal} 是索引节点编号。
:::
要开始监控 `/etc/crontab`{.literal}，请运行：
``` screen
# stap inodewatch.stp 0x8 0x05 1078319
```
在前两个参数中，您必须对 base-16 数字使用 0x 前缀。
输出包含以下内容：
::: itemizedlist
-   执行读取或写入的任何进程的名称和 ID
-   它执行的功能（v`fs_read 或`{.literal} `vfs_write`{.literal}）
-   内核设备号
:::