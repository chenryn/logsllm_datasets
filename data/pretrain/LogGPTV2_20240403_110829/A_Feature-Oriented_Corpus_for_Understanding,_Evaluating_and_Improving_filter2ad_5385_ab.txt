followed by extra code that ensures the generated programs are
able to be compiled. Different from existing synthetic corpora, the
design of our evaluation corpora is determined by the type(s) of
entrancea[1] > 0x123a[3]  0x126b[1] > 0x357b[2] == 0x38b[3] == 0x37buga[4] > 0x217endABCDEGentrancea[1] > 0x123a[3]  0x357b[2] > 0x38b[3] > 0x37buga[4] > 0x217endABCDEG(A) A bug without magic values.(B) A bug with two magic values.Session 9: FuzzingAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand659Figure 2: The procedure for evaluating fuzzers. Policies limit the way to run fuzz testing. The performance of a fuzzer can be
evaluated based on the metrics, which is mainly determined by the capability of solving challenges.
search-hampering features that the fuzzer focuses on. In other
words, the design is more ‘feature-oriented’ for fuzzing evaluation.
3 SEARCH-HAMPERING FEATURES
Search-hampering feature is the major factor that affects the fuzzing
performance and their evaluations according to the above analysis.
In fact, there are many search-hampering features. In this section,
we only select and focus on three typical ones: 1) the number of
execution paths, 2) the number of magic values, and 3) the num-
ber of checksums. These three features are important due to the
challenges that fuzzing attempts to solve. As a program consists of
three fundamental control structures, which are sequence structure,
decision structure, and loop structure, fuzzers have to find solutions
for the following challenges, 1) checksums, 2) magic values, and 3)
execution path search, in order to reach larger code coverage. To
date, many fuzzers [7, 8, 12, 15, 19, 21, 25] have been proposed to
improve the performance of solving these three challenges.
According to the three search-hampering features, we design a
prototype corpus, called FEData. FEData generates simple programs
and each of the programs has only one bug.
3.1 The Number of Execution Paths
The number of execution paths affects the efficiency of fuzzing.
Fuzzing spends much time to locate the bug hidden in a large num-
ber of execution paths. Fig.3 shows different numbers of execution
paths, where Fig.3(A) has four execution paths, and 3(B) has 200
execution paths. Fuzzing may spend a few seconds to find the bug
hidden in 3(A), but it will cost fuzzing much more time to locate
the bug hidden in 3(B).
3.2 The Number of Magic Values
A magic value is a constant in the context of programs. In fact, the
nature of fuzzing is to generate inputs and find bugs automatically.
To detect bugs, fuzzers have to pass through checks and find the
bug path. Therefore, it will cost fuzzing more time to find bugs if
the bugs are protected by magic values. We recall the example in
Fig.1(B) to explain the magic values. In this example, the constants
0x38 and 0x37 are magic values as they are sitting in one side of
the ‘==’ conditions in the if statements. Moreover, because fuzzers
regard every path as a potential bug path, they will attempt to
resolve magic values in every path. Therefore, magic values are
important to the efficiency of fuzzing, but it is not always true
Figure 3: Different numbers of execution paths. It will cost
fuzzing more time to locate the bug in (B) than in (A).
1
2
3
4
5
6
7
8
9
10
11
12
13
14
int main ( int argc , char ** argv ){
char inp1 [6] , inp2 [6];
fgets ( inp1 , 6, stdin );
fgets ( inp2 , 6, stdin );
if(!strcmp(inp1, "MAGIC")) // magic value
{
printf (" Not a bug .");
}
if(!strcmp(inp2,"BYTE")) // magic value
{
bug () ;
}
return 0;
}
Listing 1: Magic values. Magic value ‘BYTE’ protects the
bug while ‘MAGIC’ does not.
for a fuzzer to expose more bugs when it resolves magic values
more efficiently. As an example, Listing 1 shows two magic values,
wherein the magic value ‘MAGIC’ does not protect the bug while
the magic value ‘BYTE’ does.
MetricsPoliciesExecution SpeedThe Number of PathsThe Number of CrashesThe Number of BugsBug-Searching Speed Crash-Searching SpeedPath-Searching Speed...Statistical TestsSame Seeds Reasonable TimeoutSame Benchmark Suite...Magic ValueChecksumPath Search...PerformanceEfficiencyEffectiveness...CorpusFuzzersChallengesFuzzing Evaluationa[1] > 'a'a[2]  'c'bugend1234ABCEDentranceGa[199] > 'n'a[1]  > 'a'a[2]   'c'bugend1232004ABCDEHentranceG(A) 4 execution paths(B) 200 execution pathsSession 9: FuzzingAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand6601
2
3
4
5
6
7
8
9
bool func_checksum ( int a [7]) {
if ( length (a) !=7) return False ;
if ( sum (a) %8==3) {
return True ;
}
else {
return False ;
}
}
Listing 2: A simple example of checksum function. Two
steps are taken to ensure that the variable a satisfies the
specific situations.
3.3 The Number of Checksums
A checksum is designed to detect errors in a block of digital data.
The effect of checksum is similar to the magic value but resolving
a checksum is more complex because checksum needs complicated
calculations. A checksum function is a function that helps pro-
cess the procedure of calculations. This function can be utilized
in a control statement condition, such as if (func_checksum(a)). In
this scenario, a checksum can be regarded as a more complicated
magic value. For example, Listing 2 shows a simple checksum func-
tion. In this function, two if statements are introduced to check if
specific conditions have been satisfied: 1) ‘lenдth(a) == 7’ and 2)
‘sum(a)%8 == 3’. We can see from this example that, to resolve a
checksum is more complicated than to resolve a magic value.
4 EVALUATION
Experiments are run on AMD Opteron 6320, and each fuzzer is
run on one core. We typically run two fuzzers, AFL and AFLFast
[7]. AFL is a greybox fuzzing regarded as the baseline by many
other fuzzers. It initially sets some seeds and produces many inputs
mutated from these seeds. Then, those inputs will be fed into the
testing program, and new seeds will be selected from the inputs
based on the results of the execution. More inputs will be generated
from the new seeds and those inputs will also be fed into the testing
program. This procedure will be processed repeatedly. A cycle is
done when all the seeds are chosen and mutated to produce inputs,
and all the generated inputs have been fed into the testing program.
Then, a new cycle begins. Many fuzzers, including AFLFast, develop
their own algorithms based on AFL [7, 12, 22, 25].
The experiment is designed to assess the ability of the two fuzzers
to search specific execution paths. In this experiment, 90 binaries,
which contain different numbers of execution paths and have no
specific checks (i.e., magic value or checksum) in the bug path, are
used to evaluate AFL and AFLFast. We stop fuzzing when it has
found the inserted bug or it has run for 12 hours.
As for the policies used for evaluation, we set the same seed, use
statistical results, and choose the same programs for both AFL and
AFLFast. Specifically, both of the two fuzzers use Hello World as the
original seed. Besides, we use statistical results to evaluate fuzzers,
i.e., the average time of finding a bug. Moreover, these two fuzzers
are evaluated on the same programs and set the same timeout. We
utilize four metrics, including the execution speed, the number
of bugs found, the number of identified execution paths, and the
number of cycles that have been executed.
Figure 4: AFL and AFLFast are run on 90 binaries. One dot
or triangle indicates an identified bug.
During this experiment, we find that AFLFast may run too many
cycles, more than what it needs. This is because AFLFast no longer
produces inputs and runs through a cycle very fast. We call this
phenomenon cycle explosion. The cycle explosion is a state that
a fuzzer can no longer produce new inputs and will run a large
number of cycles. The results are shown in Fig.4.
In Fig.4, either a dot or a triangle denotes a bug found by fuzzing.
The result indicates that AFLFast indeed finds bugs faster than AFL.
Fig.4 also shows that AFLFast searches execution paths faster than
AFL in each kind of programs. When the number of execution paths
grows, it costs both AFL and AFLFast more time to trigger bugs.
This trend supports that the number of execution paths affects the
time for fuzzing to find bugs.
However, AFLFast finds fewer bugs than AFL, especially when
the number of execution paths grows larger. G. Klees et al. also give a
similar conclusion that AFLFast may perform worse than AFL when
evaluating longer than 24 hours. We explore the reason for this
conclusion and find an interesting phenomenon. The reasons that
AFLFast cannot find some bugs are different from AFL. All the four
bugs that AFL cannot find is due to the limited time. However, all
the 13 bugs that AFLFast cannot find are because of cycle explosion.
Based on Fig.4, the conclusion is that AFLFast finds bugs faster
than AFL, but it has a chance to get trapped in the cycle explosion,
especially when the bugs are protected in a deep path.
An Interesting Case. One binary is chosen from the 90 binaries
and the result is shown in Fig.5. It shows that AFLFast stops finding
new execution paths after the 6360th second. After the 24000th
second, the execution speed of AFLFast drops to 0/s. Meanwhile,
the number of cycles done by fuzzing grows to a large number.
That’s the state when AFLFast is trapped in cycle explosion. On the
other hand, AFL executes binaries at the speed about 50/s.
5 IMPROVEMENT OF AFLFAST (AFLFAST+)
It is impressive that the cycle explosion prevents AFLFast from
triggering bugs. Therefore, we dig deeper into the reason for it
and present a solution to improve AFLFast. AFL assigns almost
constant energy (i.e., the number of inputs generated from seeds) to
each seed. Therefore, AFL does not cause cycle explosion and even
can find bugs in one cycle. AFLFast improves AFL by assigning
different number of inputs to a seed. Different mutation strategies,
including FAST mode, LINEAR mode, and QUAD mode, are utilized
by AFLFast.
00.511.522.533.54Time(second)104101520253035404550The number of execution pathsAFLAFL AverageAFLFastAFLFast AverageSession 9: FuzzingAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand661Figure 5: An interesting case. In the first 3600 seconds, AFL and AFLFast find execution paths at almost the same speed. From
the 3600th second to the 6360th second, AFLFast finds execution paths faster than AFL. The interesting part is that AFLFast
cannot find more execution paths since the 6360th second while AFL finds more execution paths until it crashes the program.
The FAST mode assigns energy to state i as
· 2s(i)
f (i) , M
pf (i) = min
β
(1)
Where α(i) is the number of inputs generated by AFL, s(i) is the
number of times that seed di is chosen from the seed queue, f (i)
is the number of generated inputs that have exercised state i. The
constant M provides an upper bound on the number of inputs that