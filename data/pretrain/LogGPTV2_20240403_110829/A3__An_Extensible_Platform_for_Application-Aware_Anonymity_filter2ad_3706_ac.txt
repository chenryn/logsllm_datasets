enables applications to communicate their routing re-
quirements. At runtime, applications provide relay se-
lection policies that specify their individual routing cri-
teria. Using the information stored in the Local Direc-
tory Cache, the Relay Selection Engine forms routes ac-
cording to the speciﬁed policy. The participants of gen-
erated paths are relayed to the Forwarding Engine (see
below) that instantiates the path. Relay selection is ex-
plored in more detail in Section 5.
4.2.4 Forwarding Engine
The Forwarding Engine consists of a declarative net-
working engine enhanced with low-level cryptographic
primitives. The Forwarding Engine provides methods
for composing these primitives to form high-level op-
erations. For example, the one-way authentication and
symmetric key-exchange primitives used in Tor path in-
stantiation are constructed by composing RSA digital
signatures with Difﬁe-Hellman key exchange.
The Forwarding Engine instantiates the anonymous
path provided by the Relay Selection Engine according
to rules speciﬁed in the path instantiation policy. Ad-
ditionally, the Forwarding Engine supports message re-
lay over instantiated anonymous paths. That is, the For-
warding Engine is used both to construct paths as well as
to relay application messages over the anonymous route.
In the case of Onion Routing, Tor, and Crowds, the rules
for path instantiation and message relay are distributed
recursive queries. We revisit the routing engine in Sec-
tion 6.
5 Relay Selection Policies
In this section, we demonstrate how a variety of
strategies used by the relay selection engine can be ex-
pressed using the declarative framework. These rules
are then executed by a declarative networking engine to
implement the selection policies. In presenting the relay
Algorithm
RANDOM
TOR [9]
SNADER-
BORISOV [40]
CONSTRAINT
Reference
Section 5.1
Section 5.1.1
Section 5.1.2
Section 5.2.1
WEIGHTED [36, 35]
Appendix A
HYBRID
Section 5.2.3
Description
Relays selected uniformly at random
Relays biased proportionally to band-
width
Tunable bias towards bandwidth
Beneﬁts
Produces low node prevalences
High bandwidth and network utiliza-
tion [24]
Tunable anonymity and performance
Speciﬁcation of end-to-end perfor-
mance requirements
Bias relay selection in favor of link-
properties
Combines above techniques
require-
communication
Expresses
ments
Extends support to multiple metrics
(latency, jitter, etc.)
Supports highly ﬂexible routing poli-
cies
Example Usage
Email mixing
Web browsing
File transfer
VoIP
Streaming multicast
Video conferencing
Table 1. Example relay selection policies
selection examples in A3LOG, we also highlight exten-
sions we have made to canonical declarative languages,
including customizable random aggregates, ranking ag-
gregates, and a tuple list type convenient for selecting
and manipulating relays and coordinates.
Our goal in this section is to highlight the ﬂexibility,
ease of programming, and ease of reuse afforded by a
declarative query language. We show that routing pro-
tocols can be expressed in a few A3LOG rules, and addi-
tional protocols can be created by simple modiﬁcations
to previous examples. We present examples of well-
known node-based and link-based strategies, as well as
hybrid strategies that select relays based on a combina-
tion of node and link metrics. In addition to the speciﬁc
rules shown, users of A3 can also maintain several sets
of rules, as well as dynamically specify rule parameters
in new path requests. This allows for extremely ﬂexible,
on-the-ﬂy path generation tuned for speciﬁed parameters
without additional modiﬁcation to A3LOG code.
In all our examples below, we assume that each A3
node has a background process that periodically polls
the Directory Server to gather candidate nodes. At each
node, the returned information is stored in a node ta-
ble, indexed by the IP address of the node. Additional
attributes obtained from Information Providers are in-
cluded in this table (for example, the network coordinate
of the node, its bandwidth measurements, etc.)2. These
node and measurement data are then used as input to
A3 for executing A3LOG rules that will select candidate
relays. In all our example programs, the output of in-
terest is an ePathResult(Src,Dst,P) tuple, where P is
the list of relay node tuples (which includes their ad-
dresses, bandwidth, coordinates or any other attributes
relevant to the query) from Src to Dst. The properties of
the example relay selection policies are summarized in
Table 1.
2Note that
these attributes correspond to the attributes in
tBandwidth and tVivaldiCoordinates tables described in
Section 4.2.2. For ease of exposition, we refer to them as attributes
in the node materialized table.
5.1 Node-based Relay Selection
As its name suggests, node-based relay selection pri-
marily selects nodes based on node characteristics, typ-
ically bandwidth. The following rule r1 shows an ex-
ample A3LOG program being executed by an A3 node.
Given a request to generate a path from Src to Dst, the
program randomly selects three relay nodes other (ex-
cluding Src and Dst).
r1 ePathResult(Src, Dst, RAND(3)) :-
ePathRequest(Src, Dst), node(IP),
Src != IP, Dst != IP.
Rule r1 takes as input a path request, in the form of an
event tuple ePathRequest(Src,Dst), where Src is typi-
cally the address of the node that issued the request, and
Dst is the address of the responder. Rule r1 is essentially
a typical database query with group-by attributes (IP in
this case) and a random aggregate.
Unlike a regular aggregate that computes,
for
the minimum and maximum value,
instance,
the form
a random aggregate is a function of
RANDAGG(a1, a2, ..., am)hp1, p2, ..., pni
takes
in
that
(a1, a2, ..., am) as m argument parameters, and n
arguments in hp1, p2, ..., pni that denote the output
(projection) attributes of the resulting group-by value.
Given result tuples generated in the rule body, for each
group-by value, RANDAGG performs the appropriate ran-
dom selection algorithm based on its function deﬁnition,
and then returns a list of tuples with the appropriate n
attributes being projected from the results.
For instance, in rule r1, RAND(3) is a random
aggregate with argument 3 and projecting by IP. With
these parameters, the aggregate will return 3 randomly
selected nodes without replacement from the result of
executing the rule body. The output of executing the rule
r1 is the ePathResults(Src,Dst,P) event tuple, where
P is a list of tuples each containing the IP address ﬁeld of
the selected relay nodes from Src to Dst. The additional
selection predicates in r1 ensure that neither Src or Dst
are selected as relay nodes.
5.1.1 Bandwidth-weighted Selection
The above selection strategy randomly chooses three
nodes as relays without taking into consideration their
node characteristics. As an enhancement, the follow-
ing rules implement Tor’s relay selection [8] and selects
nodes with probability weighted by their bandwidth. A
node with higher bandwidth has a greater probability of
being selected, and the likelihood of selection relative to
other nodes is linearly proportional to bandwidth.
t1 eCandidateRelay(Src, Dst, PathsSoFar,
RANDWEIGHTED(1,BW)) :-
ePathRequest(Src, Dst, PathsSoFar),
node(IP,BW), Src != IP, Dst != IP.
t2 ePartialPath(Src, Dst, PathNew) :-
eCandidateRelay(Src,Dst,PathsSoFar,Relay),
PathsSoFar.inPath(Relay[0]) = false,
PathNew = f_append(PathsSoFar, Relay[0]).
t3 ePartialPath(Src, Dst, PathsSoFar) :-
eCandidateRelay(Src,Dst,PathsSoFar,Relay),
PathsSoFar.inPath(Relay[0]) = true.
t4 ePathRequest(Src, Dst, P) :-
ePartialPath(Src, Dst, P), f_size(P)  which selects one tuple ran-
domly from the tuples derived from executing the rule
body, with probability linearly weighted by the band-
width attribute BW. (To bias the selection using another
metric such as average node load, one would simply
have to modify the parameter to RANDWEIGHTED.) The re-
sulting output is a list containing one tuple, which can
be retrieved as the ﬁrst element of the list (indicated by
the index [0]) followed by a projection on the IP ﬁeld.
Rules t2 and t3 generate a new ePartialPath if the
chosen Relay is not already in the current partial path;
otherwise, they add the relay’s IP to the path. The pro-
cess repeats in t4 if the number of relays selected is less
than three. Eventually, the resulting path ePathResult
is returned via rule t5 when three relay nodes have been
chosen.
5.1.2 Tunable Performance/Anonymity Selection
Snader’s and Borisov’s recent proposal [40] introduces
a tunable weighting system that allows the initiator to
trade between anonymity and performance. Brieﬂy,
their proposal deﬁnes the family of functions
(cid:26) 1−2sx
1−2s
x
if s 6= 0
if s = 0
fs(x) =
(1)
where s is a parameter chosen by the initiator that allows
for a tradeoff between anonymity and performance. Af-
ter ranking the relays by bandwidth, the initiator chooses
the relay with index bn · fs(x)c, where x is chosen uni-
formly at random from [0, 1), and n is the number of
nodes. By applying higher values of s, the initiator is
able to more heavily bias her selections towards band-
width. On the other hand, for s = 0, a relay is chosen
uniformly at random [40]. Each relay is selected inde-
pendently and without replacement according to the dis-
tribution imposed by Eq. 1.
Snader and Borisov’s algorithm may be represented
in A3LOG by modifying the t1 rule from above into two
rules:
s1 eRelayList(Src,Dst,PathsSoFar,S,SORT(BW)) :-
ePathRequest(Src,Dst,PathsSoFar,S), node(IP,BW),
Src != IP, Dst != IP.
s2 eCandidateRelay(Src,Dst,PathsSoFar,Relay) :-
eRelayList(Src,Dest,PathsSoFar,S,SortedRelayList),
sbRand = (1 - 2ˆ(S * f_rand01())) / (1 - 2ˆS)),
Relay = f_selectIndex(SortedRelayList,sbRand).
SORT(BW) is a ranking aggregate which follows
a similar syntax as the random aggregates.
It takes
all the resulting tuples derived from executing the rule
body, performs a sort using the BW attribute, and then re-
turns the projected ﬁeld IP as a nested tuple based on
the sort order. Hence, the SortedRelayList attribute of
eRelayList will include a sorted list of IP tuples. Rule
s2 applies Eq. 1 to generate a biased random variable
which is then used to index into the list and select a re-
lay.
5.2 Link-based Selection
The previous examples have focused exclusively on
node characteristics – performance metrics (i.e., band-
width) that may be attributed to individual relays.
In
link-based path selection [36], the e2e performance of a
path is computed by aggregating the cost of all links that
comprise the path, where cost is deﬁned in terms of link
characteristics such as latency, loss, and jitter. (While
bandwidth is a node-based characteristic, it can also be
represented as a link characteristic by considering the
measured available bandwidth on a link connecting two
nodes.) The use of link rather than node characteris-
tics enables not only more ﬂexible routing (since initia-
tors can construct anonymous routes that meet more spe-
ciﬁc communication requirements), but also offers bet-
ter protection of the identities of the communicating par-
ties [36].
In these examples,
the table of node information
gathered from the directory service and Information
Providers is stored in the format node(IP, Coord) and
includes nodes’ network addresses and virtual coordi-
nates.
5.2.1 End-to-end Constraint-Based Selection
The simplest form of link-based selection is based on
selecting paths that meet e2e constraints. Rules c1-c4
result in the selection of three relay nodes where the e2e
latency is less than Limit.
c1 eCandidatePath(Src,Dst,Limit,
RAND(3)) :-
ePathRequest(Src, Dst, Limit),
node(IP, Coord), Src!=IP, Dst!=IP.
c2 ePathCost(Src, Dst, Limit, P, Cost) :-
eCandidatePath(Src, Dst, Limit, P),
Cost =
f_coorddist(Src.Coord, P[0].Coord) +
f_coorddist(P[0].Coord, P[1].Coord) +
f_coorddist(P[1].Coord, P[2].Coord) +
f_coorddist(P[2].Coord, Dst.Coord).
c3 ePathRequest(Src, Dst, Path) :-
ePathCost(Src, Dst, Limit, Path, Cost),
Cost > Limit.
c4 ePathResult(Src, Dst, Path) :-
ePathCost(Src, Dst, Limit, Path, Cost),
Cost <= Limit.
Rule c1 is similar to the earlier random selection rules
that select a random set of three relay nodes. Here, how-
ever, the Coord ﬁeld is also projected for use in rule c2.
Based on the three selected relays, c2 computes the e2e
path cost as the sum of the Euclidean distances of the
coordinates. The process repeats (rule c3) until a path
whose overall cost is less than Limit (an input variable)
is selected (rule c4).
5.2.2 Tunable Performance/Anonymity Selection
In Appendix A, we additionally present a link-based
path selection algorithm, WEIGHTED [36] that provides
tunable performance and anonymity. The algorithm con-