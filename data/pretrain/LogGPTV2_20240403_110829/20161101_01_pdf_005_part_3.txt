 旁路(CONNECT模式)或者选择数据节点(CLUSTER模式),
 (CLUSTER模式1)查询SQL/MED配置的集群信息,选择数据节点通过libpq async
API发送解析的SQL给数据节点(多个则并行),等待所有数据节点返回结果,返回结果
给应用程序.
 (CLUSTER模式2)查询集群配置版本,是否更新集群配置缓存,选择数据节点通过
libpq async API发送解析的SQL给数据节点(多个则并行),等待所有数据节点返回结
果,返回结果给应用程序.
PL/Proxy 原理
 连接池
 提高连接效率,复用连接. Plproxy到数据节点为长连接, 所以plproxy和数据节点之间
一般可以不需要连接池.
 推荐短连接的应用在plproxy和应用程序之间架设连接池.
 PL/Proxy 2以后代理和连接池的模块拆分了, 因此PL/Proxy不依赖连接池或连接池
的类型.
 数据节点
 存放实体数据,实体函数(plpgsql),接收并执行plproxy发送的SQL请求,将执行结果返
回给plproxy.
PL/Proxy 原理
 plproxy函数的用法。
 代理函数用法：应用程序传递参数, 选择远程数据库节点, 参数传递给远程数据库相同名字及参
数类型的函数执行(或者target指定的数据节点函数)，收集数据节点返回结果发送给应用程序。
 不代理函数用法：在PL/Proxy函数中直接写SELECT查询, 收集返回结果发送给应用程序。使用
SELECT需要考虑转义字符的问题。
 PL/Proxy 函数支持的命令.
 CONNECT
 CONNECT 'libpq connstr' ; | connect_func(...) | argname
 CLUSTER, [RUN ON ALL|ANY|int2,4,8|NR]
 CLUSTER 'cluster_name'; | cluster_func(..)
 SELECT (CONNECT+SELECT 旁路模式)
 SPLIT, 传入参数为数组时, 按元素分组拆分, 可以减少plproxy和程序端的交互次数.
 TARGET, 当代理函数和节点函数不同名或者schema不同时可以使用target指定.
PL/Proxy 原理
安装和使用PL/Proxy
 http://blog.163.com/digoal@126/blog/static/1638770402013102242543765/
 环境介绍
 PostgreSQL 9.3.2
 plproxy 2.x
 plrpoxy库 :
 hostaddr 172.16.3.150
 port 1921
 user proxy
 password proxy
 dbname proxy
 schema digoal // 这个schema名和数据节点一致, 可以省去写target的步骤.
安装和使用PL/Proxy
 数据节点 :
 hostaddr 172.16.3.150
 port 1921
 user digoal // plproxy将使用digoal用户连接数据节点.
 password digoal
 dbname db0
 schema digoal
 dbname db1
 schema digoal
 dbname db2
 schema digoal
 dbname db3
 schema digoal
安装和使用PL/Proxy
 安装, 配置, 演示
 http://blog.163.com/digoal@126/blog/static/1638770402013102242543765/
PL/Proxy 使用注意事项
 1. 设计时需要注意
 plproxy函数所在的schema尽量和数据节点上实际函数的schema一致.
 否则需要在plproxy函数中使用target指定 schema.functionname;
 2. 数据节点的个数请保持2^n
 3. 如果业务为短连接的形式, 那么需要1层连接池, 在应用程序和plproxy数据库之间. 而不是plproxy和数据节点之间.
 在应用程序和plproxy之间加连接池后, 其实对于plproxy来说就是长连接了, 所以在plproxy和数据节点之间也就不需要
连接池了.
 4. 长连接不需要连接池, 因为plproxy和数据节点之间的连接是长连接.
 5. plproxy语法 :
 connect, cluster, run, select, split, target.
PL/Proxy 使用注意事项
 6. 关于连接密码
 出于安全考虑, 建议在任何配置中不要出现明文密码, 所以最好是plproxy服务器到数据节点是trust验证, 保护好plproxy
即可.
 假设plproxy在172.16.3.2上. 数据节点有4个, 库名和用户名都为digoal. 那么在4个节点上配置pg_hba.conf如下.
 node0
 host digoal digoal 172.16.3.2/32 trust
 node1
 host digoal digoal 172.16.3.2/32 trust
 node2
 host digoal digoal 172.16.3.2/32 trust
 node3
 host digoal digoal 172.16.3.2/32 trust
PL/Proxy 使用注意事项
 7. run 详解:
 run on , 是数字常量, 范围是0 到 nodes-1; 例如有4个节点 run on 0; (run on 4则报错).
 run on ANY,
 run on function(...), 这里用到的函数返回结果必须是int2, int4 或 int8.
 run on ALL, 这种的plproxy函数必须是returns setof..., 实体函数没有setof的要求.
 8. 一个plproxy中只能出现一条connect语句, 否则报错.
 digoal=# create or replace function f_test3() returns setof int8 as $$
 connect 'hostaddr=172.16.3.150 dbname=db0 user=digoal port=1921';
 connect 'hostaddr=172.16.3.150 dbname=db1 user=digoal port=1921';
 select count(*) from pg_class;
 $$ language plproxy strict;
 ERROR: PL/Proxy function postgres.f_test3(0): Compile error at line 2: Only one CONNECT statement allowed
PL/Proxy 使用注意事项
 9. 不要把plproxy语言的权限赋予给普通用户, 因为开放了trust认证, 如果再开放plproxy语言的权限是非常危险的.
 正确的做法是使用超级用户创建plproxy函数, 然后把函数的执行权限赋予给普通用户.
 千万不要这样省事 :
 update pg_language set lanpltrusted='t' where lanname='plproxy';
 10. 如果有全局唯一的序列需求, 可以将序列的步调调整一下, 每个数据节点使用不同的初始值.
 例如
 db0=# create sequence seq1 increment by 4 start with 1;
 CREATE SEQUENCE
 db1=# create sequence seq1 increment by 4 start with 2;
 ...
练习
 触发器实现本地分区
 规则实现本地分区
 Pl/Proxy实现异地分区
 Londiste3进行数据合并和拆分(Day-2已经包含这部分内容)
 http://blog.163.com/digoal@126/blog/static/163877040201242945632912/
 http://blog.163.com/digoal@126/blog/static/163877040201243051338137/
 http://blog.163.com/digoal@126/blog/static/1638770402012431102448951/
 http://blog.163.com/digoal@126/blog/static/16387704020125441314324/
事务处理与并发控制
 事务隔离级别,
 并发控制,
 锁的介绍,
 死锁的发现和处理, 实际应用中如何避免死锁.
PostgreSQL 多版本并发控制
 PostgreSQL的多版本并发控制
 版本识别演示.(INSERT, UPDATE, DELETE, 使用ctid定位, 并查看该TUPLE xmin, xmax的变化)
 关键词
 XID -- 数据库的事务ID
 Tuple head: xmin, xmax, 行头部的XID信息, xmin表示插入这条记录的事务XID, xmax表示删除这条记录的事务XID
 Xid_snapshot : 当前集群中的未结束事务.
 Clog : 事务提交状态日志.
 数据可见性条件 :
 1. 记录的头部XID信息比当前事务更早. （repeatable read或ssi有这个要求, read committed没有这个要求）
 2. 记录的头部XID信息不在当前的XID_snapshot中. (即记录上的事务状态不是未提交的状态.)
 3. 记录头部的XID信息在CLOG中应该显示为已提交.
PostgreSQL 多版本并发控制
 更新和删除数据时, 并不是直接删除行的数据, 而是更新行的头部信息中的xmax和infomask掩码.
 事务提交后更新当前数据库集群的事务状态和pg_clog中的事务提交状态.
 Infomask和infomask2参看
 src/include/access/htup_details.h
 例子 :
 会话1 :
 digoal=# truncate iso_test ;
 TRUNCATE TABLE
 digoal=# insert into iso_test values (1,'test');
 INSERT 0 1
 digoal=# begin;
 BEGIN
 digoal=# update iso_test set info='new' where id=1;
 UPDATE 1
PostgreSQL 多版本并发控制
 会话2 :
 digoal=# select ctid,xmin,xmax,* from iso_test where id=1;
 ctid | xmin | xmax | id | info
 -------+-----------+-----------+----+------
 (0,1) | 316732572 | 316732573 | 1 | test
 (1 row)
 PostgreSQL多版本并发控制不需要UNDO表空间.
PostgreSQL 多版本并发控制
 RR1 tuple-v1 IDLE IN TRANSACTION;
 RC1 tuple-v1 IDLE IN TRANSACTION;
 RC2 tuple-v1 UPDATE -> tuple-v2 COMMIT;
 RR1 tuple-v1 IDLE IN TRANSACTION;
 RC1 tuple-v2 IDLE IN TRANSACTION;
 RR2 tuple-v2 IDLE IN TRANSACTION;
 RC3 tuple-v2 UPDATE -> tuple-v3 COMMIT;
 RR1 tuple-v1 IDLE IN TRANSACTION;
 RR2 tuple-v2 IDLE IN TRANSACTION;
 RC1 tuple-v3 IDLE IN TRANSACTION;
事务隔离级别
 脏读
 在一个事务中可以读到其他未提交的事务产生或变更的数据.
 PostgreSQL不支持read uncommitted事务隔离级别, 无法测试.
 不可重复读
 在一个事务中, 再次读取前面SQL读过的数据时, 可能出现读取到的数据和前面读取到的不一致的现象. (例如其他事务在此期间已提
交的数据)
 使用read committed事务隔离级别测试
 幻像读
 在一个事务中, 再次执行同样的SQL, 得到的结果可能不一致.
 标准SQL事务隔离级别, (PostgreSQL的repeatable read隔离级别不会产生幻像读)
 PostgreSQL不支持read uncommitted隔离级别.
事务隔离级别测试1
 不可重复读测试
 digoal=# create table iso_test(id int, info text);
 digoal=# insert into iso_test values (1, 'test');
 digoal=# begin isolation level read committed;
 BEGIN
 digoal=# select * from iso_test where id=1;
 id | info
 ----+------
 1 | test
 (1 row)
 -- 其他会话更新这份数据, 并提交.
 digoal=# update iso_test set info='new' where id=1;
 -- 不可重复读出现.
 digoal=# select * from iso_test where id=1;
 id | info
 ----+------
 1 | new
 (1 row)
事务隔离级别测试2
 幻象读测试
 digoal=# begin isolation level read committed;
 digoal=# select * from iso_test;
 id | info
 ----+------
 1 | new
 (1 row)
 -- 其他会话新增数据
 digoal=# insert into iso_test values (2, 'test');
 -- 幻象读出现
 digoal=# select * from iso_test;
 id | info
 ----+------
 1 | new
 2 | test
 (2 rows)
事务隔离级别测试3
 使用repeatable read可避免不可重复读和幻象读.
 digoal=# delete from iso_test;