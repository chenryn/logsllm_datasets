struct decision {
cc0055..iinndddd 112288 44//1166//22001122 55::4444::2266 PPMM
Chapter 5 n Sandboxing 129
uint8_t type;
uint16_t arg;
uint16_t match_next;
uint16_t nomatch_next;
};
Included in the accompanying software package are tools to extract the com-
piled sandboxes from sandboxd. Also included are tools to extract all compiled
regular expressions, decompile a regex blob to something approximating regular
expression syntax, and a tool to extract a readable profi le from a full binary
sandbox profi le. An example of the output produced by this tool is included
here; this profi le is the racoon IPSec daemon profi le:
([‘default’], [‘deny (with report)’])
([‘fi le*’,
‘fi le-chroot’,
‘fi le-issue-extension*’,
‘fi le-issue-extension-read’,
‘fi le-issue-extension-write’,
‘fi le-mknod’,
‘fi le-revoke’,
‘fi le-search’],
[(‘allow’, ‘path == “/private/var/log/racoon.log”’),
(‘allow’, ‘path == “/Library/Keychains/System.keychain”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsDirectory.db”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mds.lock”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsObject.db”’),
(‘allow’, ‘path == “/var/log/racoon.log”’),
‘deny (with report)’])
([‘fi le-ioctl’],
[(‘allow’, ‘path == “/private/var/run/racoon”’),
(‘allow’, ‘path ==
“/private/var/preferences/SystemConfi guration/com.apple.ipsec.plist”’),
(‘allow’, ‘path == “/private/etc/racoon”’),
(‘allow’, ‘path == “/dev/aes_0”’),
(‘allow’, ‘path == “/dev/dtracehelper”’),
(‘allow’, ‘path == “/dev/sha1_0”’),
(‘allow’, ‘path == “/private/etc/master.passwd”’),
(‘allow’, ‘path == “/private/var/log/racoon.log”’),
(‘allow’, ‘path == “/Library/Keychains/System.keychain”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsDirectory.db”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mds.lock”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsObject.db”’),
(‘allow’, ‘path == “/var/log/racoon.log”’),
‘deny (with report)’])
([‘fi le-read-xattr’, ‘fi le-read*’, ‘fi le-read-data’],
[(‘allow’, ‘path == “/private/var/run/racoon”’),
(‘allow’, ‘path ==
“/private/var/preferences/SystemConfi guration/com.apple.ipsec.plist”’),
(‘allow’, ‘path == “/private/etc/racoon”’),
(‘allow’, ‘path == “/Library/Managed Preferences”’),
cc0055..iinndddd 112299 44//1166//22001122 55::4444::2266 PPMM
130 Chapter 5 n Sandboxing
(‘allow’, ‘path == “/private/var/db/mds/messages/se_SecurityMessages”’),
(‘allow’, ‘path == “/private/var/root”’),
(‘allow’, ‘path == “/Library/Preferences”’),
(‘if’,
‘fi le-mode == 4’,
[(‘allow’, ‘path == “/usr/sbin”’),
(‘allow’, ‘path == “/usr/lib”’),
(‘allow’, ‘path == “/System”’),
(‘allow’, ‘path == “/usr/share”’),]),
(‘allow’, ‘path == “/private/var/db/timezone/localtime”’),
(‘allow’, ‘path == “/dev/urandom”’),
(‘allow’, ‘path == “/dev/random”’),
(‘allow’, ‘path == “/dev/null”’),
(‘allow’, ‘path == “/dev/zero”’),
(‘allow’, ‘path == “/dev/aes_0”’),
(‘allow’, ‘path == “/dev/dtracehelper”’),
(‘allow’, ‘path == “/dev/sha1_0”’),
(‘allow’, ‘path == “/private/etc/master.passwd”’),
(‘allow’, ‘path == “/private/var/log/racoon.log”’),
(‘allow’, ‘path == “/Library/Keychains/System.keychain”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsDirectory.db”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mds.lock”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsObject.db”’),
(‘allow’, ‘path == “/var/log/racoon.log”’),
‘deny (with report)’])
([‘fi le-read-metadata’],
[(‘allow’, ‘path == “/tmp”’),
(‘allow’, ‘path == “/var”’),
(‘allow’, ‘path == “/etc”’),
(‘allow’, ‘path == “/private/var/run/racoon”’),
(‘allow’, ‘path ==
“/private/var/preferences/SystemConfi guration/com.apple.ipsec.plist”’),
(‘allow’, ‘path == “/private/etc/racoon”’),
(‘allow’, ‘path == “/Library/Managed Preferences”’),
(‘allow’, ‘path == “/private/var/db/mds/messages/se_SecurityMessages”’),
(‘allow’, ‘path == “/private/var/root”’),
(‘allow’, ‘path == “/Library/Preferences”’),
(‘if’,
‘fi le-mode == 4’,
[(‘allow’, ‘path == “/usr/sbin”’),
(‘allow’, ‘path == “/usr/lib”’),
(‘allow’, ‘path == “/System”’),
(‘allow’, ‘path == “/usr/share”’),]),
(‘allow’, ‘path == “/private/var/db/timezone/localtime”’),
(‘allow’, ‘path == “/dev/urandom”’),
(‘allow’, ‘path == “/dev/random”’),
(‘allow’, ‘path == “/dev/null”’),
(‘allow’, ‘path == “/dev/zero”’),
(‘allow’, ‘path == “/dev/aes_0”’),
(‘allow’, ‘path == “/dev/dtracehelper”’),
cc0055..iinndddd 113300 44//1166//22001122 55::4444::2266 PPMM
Chapter 5 n Sandboxing 131
(‘allow’, ‘path == “/dev/sha1_0”’),
(‘allow’, ‘path == “/private/etc/master.passwd”’),
(‘allow’, ‘path == “/private/var/log/racoon.log”’),
(‘allow’, ‘path == “/Library/Keychains/System.keychain”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsDirectory.db”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mds.lock”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsObject.db”’),
(‘allow’, ‘path == “/var/log/racoon.log”’),
‘deny (with report)’])])
([‘fi le-write*’,
‘fi le-write-create’,
‘fi le-write-fl ags’,
‘fi le-write-mode’,
‘fi le-write-mount’,
‘fi le-write-owner’,
‘fi le-write-setugid’,
‘fi le-write-times’,
‘fi le-write-unlink’,
‘fi le-write-unmount’,
‘fi le-write-xattr’],
[(‘allow’, ‘path == “/private/var/run/racoon.pid”’),
(‘allow’, ‘path == “/private/var/run/racoon.sock”’),
(‘allow’, ‘path == “/private/var/log/racoon.log”’),
(‘allow’, ‘path == “/Library/Keychains/System.keychain”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsDirectory.db”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mds.lock”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsObject.db”’),
(‘allow’, ‘path == “/var/log/racoon.log”’),
‘deny (with report)’])
([‘fi le-write-data’],
[(‘allow’, ‘path == “/dev/zero”’),
(‘allow’, ‘path == “/dev/aes_0”’),
(‘allow’, ‘path == “/dev/dtracehelper”’),
(‘allow’, ‘path == “/dev/sha1_0”’),
(‘allow’, ‘path == “/dev/null”’),
(‘allow’, ‘path == “/private/var/run/racoon.pid”’),
(‘allow’, ‘path == “/private/var/run/racoon.sock”’),
(‘allow’, ‘path == “/private/var/log/racoon.log”’),
(‘allow’, ‘path == “/Library/Keychains/System.keychain”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsDirectory.db”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mds.lock”’),
(‘allow’, ‘path == “/private/var/db/mds/system/mdsObject.db”’),
(‘allow’, ‘path == “/var/log/racoon.log”’),
‘deny (with report)’])
([‘iokit-open’],
[(‘allow’, ‘iokit-user-client-class == “RootDomainUserClient”’),
‘deny (with report)’])
([‘ipc-posix*’, ‘ipc-posix-sem’],
[(‘allow’, ‘ipc-posix-name == “com.apple.securityd”’), ‘deny (with report)’])
([‘ipc-posix-shm’],
cc0055..iinndddd 113311 44//1166//22001122 55::4444::2266 PPMM
132 Chapter 5 n Sandboxing
[(‘allow’, ‘ipc-posix-name == “com.apple.AppleDatabaseChanged”’),
(‘allow’, ‘ipc-posix-name == “apple.shm.notifi cation_center”’),
(‘allow’, ‘ipc-posix-name == “com.apple.securityd”’),
‘deny (with report)’])
([‘sysctl*’,
‘sysctl-read’,
‘sysctl-write’,
‘mach-bootstrap’,
‘system-socket’,
‘priv*’,
‘priv-adjtime’,
‘priv-netinet*’,
‘priv-netinet-reservedport’],
[’allow’])
([’mach-issue-extension’, ’mach-lookup’],
[(’allow’, ’mach-global-name == ”com.apple.ocspd”’),
(’allow’, ’mach-global-name == ”com.apple.securityd”’),
(’allow’, ’mach-global-name == ”com.apple.system.notifi cation_center”’),
(’allow’, ’mach-global-name == ”com.apple.system.logger”’),
(’allow’,
’mach-global-name == ”com.apple.system.DirectoryService.membership_v1”’),
(’allow’,
’mach-global-name == ”com.apple.system.DirectoryService.libinfo_v1”’),
(’allow’, ’mach-global-name == ”com.apple.bsd.dirhelper”’),
(’allow’, ’mach-global-name == ”com.apple.SecurityServer”’),
’deny (with report)’])
([’network*’, ’network-inbound’, ’network-bind’],
[(’allow’, ’local.match(udp:*:500)’),
(’allow’, ’remote.match(udp:*:*)’),
(’allow’, ’path == ”/private/var/run/racoon.sock”’),
(’allow’, ’local.match(udp:*:4500)’),
’deny (with report)’])
([’network-outbound’],
[(’deny (with report)’,
’path.match(”^/private/tmp/launchd-([0-9])+\\.([^/])+/sock$”)’),
(’deny (with report)’, ’path == ”/private/var/tmp/launchd/sock”’),
(’allow’, ’path == ”/private/var/run/asl_input”’),
(’allow’, ’path == ”/private/var/run/syslog”’),
(’allow’, ’path == ”/private/var/tmp/launchd”’),
(’allow’, ’local.match(udp:*:500)’),
(’allow’, ’remote.match(udp:*:*)’),
(’allow’, ’path == ”/private/var/run/racoon.sock”’),
(’allow’, ’local.match(udp:*:4500)’),
’deny (with report)’])
([’signal’], [(’allow’, ’target == self’), ’deny (with report)’])
The only thing not covered here are the details of the regular expression
format. The AppleMatch kernel extension performs this matching and dictates
the binary format, while the user space libMatch does the compilation from
regular expression to regex blob embedded in the sandbox profi le. The com-
piled regular expression format is slightly different from the one described
cc0055..iinndddd 113322 44//1166//22001122 55::4444::2266 PPMM
Chapter 5 n Sandboxing 133
in www.semantiscope.com/research/BHDC2011/BHDC2011-Paper.pdf but the
differences are mostly cosmetic. As with the bytecode format of the profi les,
the best documentation for this is in the included software package. There
is a script, redis.py, that converts compiled regex blobs into the equivalent
regular expression.
How Sandboxing Impacts App Store versus Platform
Applications
Having looked at the implementation of the sandbox in extreme detail, you
should ask how this feature is currently used. The details of the profi les used
are not well documented, but it is well known that the sandbox restricts those
applications downloaded from the App Store. Additionally, many of the platform
applications like MobileSafari and MobileMail are also placed into a sandbox.
How are these applications launched under the sandbox? How is each App Store
application restricted to its own container directory? These are the questions
answered in this section.
Surprisingly, neither App Store applications nor platform applications call
sandbox_init or friends directly. Also, though there is an option to launch
an application through launchd with a sandbox profi le, we found no built-in
applications using this functionality. Fortunately, some strings in the kernel
extension point the way to the answer:
__cstring:805FDA21 aPrivateVarMobi DCB “/private/var/mobile/Applications/”,0
...
__cstring:805FDB6F aSandboxIgnorin DCB “Sandbox: ignoring builtin profi le for
platform app: %s”,0xA,0
Following cross-references to these strings show that they both are used in
the function sbx_cred_label_update_execve. This function is called whenever
a new executable image is loaded. Remember, the TrustedBSD functions are
called regardless of whether the current process has initialized the sandbox. If
the sandbox has not yet been initialized, most functions return early with no
check. In this case, sbx_cred_label_update_execve fi rst calculates the path for
the loaded executable image. If the executable is under /private/var/mobile/
Applications, the built-in sandbox profi le, “container,” will be loaded and the
path under the above directory will be added as an extension. This extension is
what enables the same container profi le to be used for all the App Store applica-
tions despite the fact that they reside in different subdirectories. It mirrors the
example given in the fi rst section of this chapter.
Platform applications, such as MobileSafari, are not placed under the App Store
directory structure. For these applications, a sandbox profi le can be specifi ed
in the embedded entitlements portion of the code signing load command of a
Mach-O executable. Following is a transcript dumping the embedded entitle-
ments of MobileSafari:
cc0055..iinndddd 113333 44//1166//22001122 55::4444::2266 PPMM
134 Chapter 5 n Sandboxing
pitfall:entitlements dion$ ./grab_entitlements.py MobileSafari
com.apple.coreaudio.allow-amr-decode
com.apple.coremedia.allow-protected-content-playback
com.apple.managedconfi guration.profi led-access
com.apple.springboard.opensensitiveurl
dynamic-codesigning
keychain-access-groups
com.apple.cfnetwork
com.apple.identities
com.apple.mobilesafari
com.apple.certifi cates
platform-application
seatbelt-profi les
MobileSafari
vm-pressure-level
In the package of scripts available from this book’s website, grab_
entitlements.py will pull embedded entitlements from a binary. By search-
ing for the seatbelt-profiles key in the embedded entitlements of a platform
application, you can determine which sandbox profi le is applied by the kernel