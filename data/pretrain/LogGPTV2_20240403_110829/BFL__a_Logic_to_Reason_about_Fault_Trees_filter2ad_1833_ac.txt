problem: given a Boolean vector b and a formula χ,
compute a ft T such that b , T |= χ (Sec. V-E). Note that
the ﬁrst question, checking if b , T |= χ holds, is trivial if
χ = φ is a level-1 formula that does not contain an MCS
or MPS operator. In that case, we can simply substitute
the values of the b in φ and see if the Boolean expression
evaluates to true. For the other cases, the computation
becomes more complex, and we resort to binary decision
diagrams (bdds). Concretely, to translate formulae to
bdds, we identify ft elements that appear in a given
formula. We selectively construct bdds for these elements
and store the resulting bdds (see Algo. 1): by doing so,
we reduce computation time in case they are needed for
other formulae. Finally, we manipulate these bdds to
reﬂect semantics of the operators in BFL. This translation
to BDDs constitutes a formal ground that permits to
address the aforementioned procedures in a uniform way.
In particular, once the bdd for the formula is obtained, we
can address the ﬁrst and second scenarios. In the former,
we walk down the bdd from the root node following truth
assignments given in a speciﬁc vector b . In the latter —
where no vector is given — we collect every path that leads
to the terminal 1 to compute all satisfying vectors (cid:2)b (cid:3) for
the given formula.
A. Binary decision diagrams
bdds are directed acyclic graphs (dags) that oﬀer
a compact way to represent Boolean functions [27] by
reducing redundancy. bdd’s size can grow linearly in the
number of variables and at worst exponentially, depending
on variable’s ordering. In practice, bdds are heavily used
in various application areas, including in ft analysis and
in their security-related counterpart, attack trees (ats)
[5, 28].
Formally, a bdd is a rooted dag Bf that represents
n → B over variables Vars =
a Boolean function f : B
{xi}n
i=1. The outcomes of f - 0 or 1 - are represented by
the terminal nodes of Bf. A non terminal node w ∈ W
represents a subfunction fw of f via its Shannon expan-
sion [27]. In other words, w is equipped with a variable
Lab(w) ∈ Vars and two children: Low(w) ∈ W, that
represents fw in case that the variable Lab(w) is set to
0; and High(w), representing fw if Lab(w) is set to 1.
Deﬁnition 5. A BDD is a tuple B = (W , Low, High, Lab)
over a set Vars where:
• The set of nodes W is partitioned into terminal nodes
(Wt) and non terminal nodes (Wn);
• Low : Wn → W maps each node to its low child;
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
445
CP/R
CP
CR
CT
DT
IWoS
MoT
AT
SH
CVT UT
VW
H1
IW
H3
IT
H2 CIW
CIO
CIS IW
PP IW
AB IW
MV
H1
IW
PP
H1
IT
MH1
IS
MH2
H1
H4
H1
H5
Figure 2: COVID-19 ft.
• High : Wn → W maps each node to its high child;
• Lab: W → {0, 1} ∪ Vars maps terminal nodes to
Booleans, and non terminal nodes to variables:
Lab(w) ∈
(cid:18)
if w ∈ Wt,
if w ∈ Wn.
{0, 1}
Vars
Moreover, B satisﬁes the following constraints:
• (W , E) is a connected DAG, where
• B has a unique root, denoted RB:
(cid:2) ∈ Low(w) ∪ High(w)};
E = {(w, w
∃! RB ∈ W . ∀w ∈ Wn. RB (cid:9)∈ Low(w) ∪ High(w).
(cid:2)) ∈ W
2 | w
eTop
e1
e2
e1
e2
0
1
Figure 3: A simple ft (OR-gate) and its bdd.
Reduced ordered BDDs: Conventionally, the term
bdds is often used as a shorthand acronym for reduced
ordered bdds, or ROBDDs [29, 30]. ROBDDs are bdds
in which the variables occur in a given order on all the
paths of the bdd, no two distinct nodes have the same
variable name and (high and low) successors, and no single
node has identical (high and low) successors [27]. As such,
a total order < over the variables is needed. Formally, this
means that:
• Vars are equipped with a total order, Bf is thus
deﬁned over a pair (cid:2)Vars, <(cid:3);
• the
node
children: ∀ w
than
Lab(Low(w)), Lab(High(w));
is
lower
∈ Wn. Lab(w)
variable
its
• the children of non terminal nodes are distinct nodes;
• all terminal nodes are distinctly labelled.
order
<
of
of
a
ROBDDs exhibit the following characteristics: 1) there are
exactly two terminal nodes: Wt = {⊥,(cid:21)}, with Lab(⊥) = 0
and Lab((cid:21)) = 1; 2) the label of the root node RB has the
lowest order; 3) in any two paths from RB to ⊥ or (cid:21),
variables appear in the same (increasing) order.
B. Algorithm 1: Translating FTs/formulae to BDDs
Translations: As a ﬁrst step, we will deﬁne bdd
translations for both fts and formulae in the logic. As
previously mentioned, to translate formulae to bdds, we
ﬁrst identify ft elements that appear in a given formula.
We selectively construct bdds for these elements and
store them. This allows us to reduce computation time in
case they are needed to construct bdds for other formulae
that include the same ft elements. Finally, we manip-
ulate these bdds to reﬂect semantics of the operators
in BFL. Operations between bdds are represented by
bold operands e.g., ∧,∨. Operands can be applied by
following Algo. 5.15 [29] Apply and subsequently applying
Algo. 5.3 Reduce [29] to ensure the resulting bdd is
reduced. Following, we assume to always apply Reduce
after Apply. Quantiﬁcation can be achieved by applying
Algo. 5.15 [29] Apply and Algo. 5.20 [29] Restrict as
shown in Theorem 5.23 [29]. In particular, given a set of
variables V = {v1, . . . , vn}, existential quantiﬁcation can
be deﬁned as follows:
∃v.B = Restrict(B, v, 0) ∨ Restrict(B, v, 1)
∃V.B = ∃v1.∃v2. . . . ∃vn.B
Translating FTs to BDDs: Firstly, we will deﬁne a
translation from fts to bdds. In the following paragraphs
we assume Vars = V ˙∪ V(cid:2), where the set of variables V = BE
and the set of primed variables V(cid:2) = {e
(cid:2)|e ∈ BE}. Further-
more, we deﬁne Var B : BDD → Vars to be a function that
returns variables occurring in a bdd. LetΨ FT : E → BDD
be a function that takes elements of a ft as input and
maps them to bdds. ΨFT is deﬁned as follows:
Deﬁnition 6. The translation function of a FT T is a
function ΨFTT : E → BDD that takes as input an element
e ∈ E. With e
ΨFTT(e) =
(cid:2) ∈ ch(e), we can deﬁne ΨFTT:
⎧⎪⎪⎪⎪⎪⎪⎪⎨
(cid:6)(cid:6)(cid:6)
(cid:7)(cid:7)(cid:7)
⎪⎪⎪⎪⎪⎪⎪⎩
B(e)
(cid:2))
ΨFTT(e
k(cid:7)(cid:7)(cid:7)
(cid:2))
ΨFTT(e
(cid:6)(cid:6)(cid:6)
n1,...,nk
n1<...<nk
i=1
if e ∈ BE
if e ∈ IE and t(e) = OR
if e ∈ IE and t(e) = AND
ni) if e ∈ IE and t(e)=VOT(k/N)
(cid:2)
ΨFTT(e
Where B(v) is a BDD with a single node in which
Low(v) = 0 and High(v) = 1.
446
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 3 represents a simple ft i.e., a single OR-gate, and
its translation to bdds.
Translating formulae: Knowing how to compute
bdds for fts, we can now show how to manipulate them
in order to mirror BFL operators. I.e., given ΨFT and a
ft T, for every BFL formula χ in the set of BFL formulae
X we can now show a translation to bdds BT : X → BDD
in Algo. 1. The implementation of this procedure would
abide the dynamic programming standards: by simple
caching, we would be able to reuse the translation of
(sub)trees and (sub)formulae between diﬀerent analyses
without recomputing them each time anew.
Algorithm 1 Given χ and T, compute BT(χ)
Input: ft T, formula χ
Output: BT(χ)
Method: Compute BT(χ) according to the recursion
scheme below. Store intermediate results BT(···) and
ΨFTT(···) in a cache in case they are used several times.
(cid:2)) :
ΨF TT(e)
¬(BT(φ))
BT(φ) ∧ BT(φ
(cid:2))
Recursion scheme:
BT(e) :
BT(¬φ) :
BT(φ ∧ φ
BT(φ[ei (cid:15)→ 0]) : Restrict(BT(φ), ei, 0)
BT(φ[ei (cid:15)→ 1]) : Restrict(BT(φ), ei, 1)
.BT(V(cid:2) ⊂ V)∧
BT(φ) ∧ (¬∃V(cid:2)
BT(MCS(φ)) :
(cid:12)
BT(φ)[V (cid:2) V(cid:2)]) where:
BT(V(cid:2) ⊂ V) ≡ BT(
v
k ⇒ vk)∧
(cid:2)
(cid:10)
k
k (cid:9)= vk)
(cid:2)
k
v
BT(
∃V.BT(φ)
¬∃V.¬BT(φ)
1 iﬀ {Var B(BT(φ)) ∩Var B(BT(φ
(cid:2)))}=∅
BT(∃φ) :
BT(∀φ) :
BT(IDP(φ, φ
(cid:2))):
where BT(φ)[V (cid:2) V(cid:2)] indicates the bdd BT(φ) in which
every variable vk ∈ V is renamed to its primed v
k ∈ V(cid:2).
(cid:2)
To perform existential and universal quantiﬁcation over
formulae in this translation - i.e., utilizing the second layer
in the syntax of BFL - it would also suﬃce to check if the
resulting bdd for the formula χ is not equivalent to the
terminal node 0 in the case of existential quantiﬁcation
and to check if the bdd for χ is equivalent to the bdd
for the terminal node 1 in case of universal quantiﬁcation.
C. Algorithm 2: Model checking BFL over a FT and a b
Overview: As mentioned, given a speciﬁc vector b, a ft
T and a formula χ, we want to check if b , T |= χ. To do
so, we translate the given formula to a bdd and then we
walk down the bdd from the root node following truth
assignments given in the speciﬁc vector b .
Algorithm 2 Check if b , T |= χ, given b, T and χ.
Input: Boolean vector b , ft T and a formula χ
Output: True iﬀ b , T |= χ, False otherwise
Method:
compute BT(χ) via Algo. 1
Starting from bdd root,
while current node wi of BT(χ) (cid:9)∈ Wt do:
if bi ∈ b = 0 then:
wi = Low(wi)
else if bi ∈ b = 1 then:
end if
end while
if Lab(wi) = 0 then:
wi = High(wi)
return False
else if Lab(wi) = 1 then:
return True
end if
e2
e2
e2
e1
e1
Algo. 2: Algo. 2 shows an algorithm to check whether
b , T |= χ, given a status vector b , a ft T and a formula
χ. A bdd for the formula χ is computed with regard to
the structure function of the given ft T i.e., we compute
BT(χ) as perAlgo. 1. Subsequently, the algorithm walks
down the bdd following the Boolean assignments given in
b : if the i-th element of b is set to 0 then the next node in
the path will be given by Low(wi), if it is set to 1 then the
next node will be High(wi). When the algorithm reaches
a terminal node it returns True if its value is one - i.e., if
b , T |= χ - and False otherwise.
Example 2. To showcase this pro-
cedure, we present the smallest pos-
sible example that still retains signi-
ﬁcance, by choosing a ft T with a
single OR-gate as a tle with two
bes as children. We will assume that
our formula χ is MCS(etop) and that
the given vector b is equal to (0, 1) for b1 and b2 respect-
ively. Fig. 3 shows a representation of this simple ft next
to its bdd. We then compute the bdd BT(MCS(etop))
for our formula and walk down the graph following the
low edge for w1 and the high edge for w2, as indicated
by the values in b . We end the algorithm in the terminal
node 1, thus knowing that b , T |= MCS(etop). The ﬁgure in
this paragraph represents the bdd for M CS(etop) for the
given ft: the path representing vector b is highlighted.
D. Algorithm 3: Computing all satisfying vectors
Overview:
In this subsection, we will address a diﬀerent
scenario: given a ft T and a formula χ, we want to
compute all vectors b such that b , T |= χ. In this scenario
no vector is given. Thus, we need to construct the bdd for
the given formula and then collect every path that leads
to the terminal 1 to compute all satisfying vectors (cid:2)b (cid:3) for
the given formula.
1
1
0
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
447
0
1
1
e1
e1
e2
e2
e2
e2
Algo. 3: To achieve the desired outcome we will con-
struct the bdd BT(χ) for the given formula following
Algo. 1. Then, the algorithm will walk down the bdd
and store all the paths that lead to the terminal node 1.
These paths represent all the status vectors that satisfy
our formula χ. The value for the elements of each vector
is set to 0 or 1 if the stored path follows respectively the
low or high edge of the collected elements of the bdd.
After computing the bdd for a given χ, AllSat [27]
will achieve the desider outcome. This algorithm returns
exactly all the satisfying assignments for a given bdd, i.e.,
in our case, all the vectors that satisfy our formula.
Example 3. To showcase this pro-
cedure,