Writing Boot Inage ../staging/boot.ing
10.3.7引导自定义内核
编译成功后，内核编译系统会把内核镜像写入arch/arm/boot/zlmage。可以通过多种方法，在
设备上引导这个新编译的内核。这跟Android的其他方面类似，使用的方法依赖于特定设备。本
节内容涵盖了4种方法：两种使用fastboot协议，一种使用OEM专有下载协议，另一种直接在
设备上操作。
---
## Page 275
10.3运行自定义内核代码259
1.使用fastboot
用fastboot 启动新编译的内核有两种方法。以AOSP支持的设备为例，既可以直接启动
boot.img，也可以将其写人设备的boot分区。第一种方法更好，因为如果失败，只需要重启就能
恢复；但是并非所有设备都支持这种方法。第二种方法是持续性的，适用于设备需要多次重启的
情形。不幸的是，两种方法都需要解锁设备的boot loader。必须重启设备进人fastboot模式，如
下所示：
dev:~/android/src/kermel/omap/staging $ adb reboot bootloader
这个命令执行后，相应设备会重启进入bootloader，然后打开fastboot模式。在这种模式下，
警告解锁bootloader会让设备的保修条款失效。一个误操作就可能导致设备永久无法使用，
所以要非常小心。
第一种方法使用fastboot工具中的boot命令，能直接引导新创建的boot.img文件。这种方
法和第3章中描述的启动自定义恢复基本相同。唯一的差别是，使用的是boot.img，面不是
recovery.img。下面是相关命令：
Gev:-/android/sre/kernel/onap/staging S fastboot boot new-boot.ing
dev:~/android/src/kermel/omap/staging S adb wait-for-device she11 cat 1
[., device boots ..]
Linux version 3.0.31-g9f818de-dirty (jdrakeedev) (gce version 4.7 (GCC) 1.,
/proc/version
重启设备到bootloader后，使用fastboot boot来引导boot.img，然后打开shell来确认修
改后的内核正在运行。
第二种方法使用fastbootflash命令更持久地将新创建的boot.img写人设备的boot分区。
命令如下：
dev:0:~/android/src/kernel/omap/staging $ fastboot flash boot new-boot.ing
sending 'boot' (4428 KB) .*
boot new-boot, ing.
OKAY [1.679s]
10
writing 'boot'...
OKAY [1.1218]
finished. total time: 2.800s
dev:0:-/android/src/kernel/omap/8taging $ tastboot reboot
finished. total time: 0.006s
rebooting...
dev:0:~/android/src/kerne1/omap/staging $ adb wait-for-device she11
Linux version 3.0.31-g9f818de-dirty (jdrake9dev) (gcc version 4.7 (GCC) 1.-
shel1@android: / $ cat /proe/version
执行fastboot flashboot命令后，重启设备进人shell，可以确认修改后的内核正在
运行。
---
## Page 276
260第10章攻击内核
2.使用 OEM Flashing工具
刷人OEM设备boot分区的步骤对于不同设备是不同的，面且并非所有设备都可行。例如，
一些OEM设备的bootloader被锁住并无法解锁，还有一些设备拒绝刷人未签名的boot.img。本
节介绍如何在三星GalaxySⅢl中刷入自定义内核。
注意对于root后的设备，使用kexec程序来解决签名问题也许是可能的。kexcc程序会从一个
已启动的系统上来启动Linux内核。使用kexec的细节超出了本章范围。
尽管Sprint版的三星Galaxy SIIl会使用密码学的方法来验证bootimg，但并不会阻止刷入或
启动一个未签名的内核副本。它只有一个内部计数器来记录自定义镜像刷入的次数。在启动设备
进人下载模式时，这个数字会在屏幕上显示，在本节后面可以看到。三星使用这个计数器来判断
是否使用了非官方的代码而导致设备的保修条款失效。现在我们知道，刷人未签名的booLimg
不会让你的设备变砖，那么就可以开始刷机并启动。
注意Chainfire 针对三星制作了一个名为TriangleAway的工具，用来清空刷机计数器。它造用
于大部分机型。这只是Chainfire 制作的许多工具之一，还有知名的SuperSU。Chainfire
的项目可以在http://chainfire.eu/找到。
与其他OEM设备相同，三星GalaxySIIl并不支持fastboot模式。然面，它支持一种可以与
fastboot娘美的专有下载模式。我们以这个模式为例，结合相应的专有剧机工具，写人新创建的
boot.img
对三星设备进行刷机的官方工具是Odin工具。事实上，据传Odin是三星内部人员使用的工
具。其使用过程与Nexus设备非常相似。首先将设备切换到下载模式，如下所示：
dev:~/sgs3-md4/boot S cd . ./staging
dev1~/sgs3-nd4/ataging $ adb reboot boot1oader
现在设备已经可以接受镜像了，但是有一个问题：Odin不接受原始boot镜像作为输入，面
是采用与原厂镜像相同的.tar.md5格式。要让Odin接受bootimg，就必须了解生成该格式文件的
细节。另外，还需要增加镜像的MD5，用作完整性检查，这也使得它能够将多个分区镜像打包
成一个文件。打包boot镜像（包括自定义内核）的命令如下：
dev:~/sgs3-md4/staging $ ( cat boot.tar: md5sum -t boot.tar 1 > boot.tar,md5
准备工作已经完成了，但是还有一个问题：Odin只适用于Windows，不在本例的Ubuntu环
境中运行。开源工具Heimdall可以解决这个问题，但是无法与SPH-L710一起工作。不幸的是，
需要将boot.tar.md5文件复制到Windows 机器，然后使用Administrator权限来运行Odin。Odin
运行后，勾选PDA旁边的复选框。选择boot.tar.md5文件的路径并打开它。在按住开机键的同时，
按下音量向下键和Home键，或者使用adbrebootbootloader命令，将设备引导至下载模
---
## Page 277
10.3运行自定义内核代码
197
式。警告窗口出现后，按音量向上键继续。在下载模式时，屏幕会显示一些状态，包括自定义
文件刷机次数。然后，将设备连入Windows电脑。这时候Odin如图10-3所示。
Odin3u
 F.R
AP-1Y
HOE
口
图 10-3Odin准备刷人boot
点击Start按钮开始刷人boot分区。如果勾选了自动重启（Auto Reboot）选项，那么设备在
刷机完成后会自动重启。一旦重启完毕，就可以安全地将设备连入开发机，并按如下方式确认：
she11eandroid: / $ cat /proc/version
Linux version 3.0.31 (jdrake9dev)(gcc ver81on 4.6.x-google 20120106
3.直接写分区
除了使用fastboot或OEM刷机工具，还可以直接往boot分区写人自定义boot镜像。这种方
10
法的主要好处是无需重启设备。例如，Chainfire的MobileOdin应用就使用这个方法来刷机，不
需要另外的电脑。总的来说，这种方法更加快速简便，因为步骤较少，并且不需要额外的工具。
然而，这种方法有一些额外要求，也存在一些潜在问题，都需要考虑到。第一，这种方法只
适用于被root的机器上。没有root权限的话，就只能写人boot分区的块设备。第二，必须考虑
引导级别的限制，这可能会导致该方法失败。如果bootloader拒绝引导未签名的boot镜像，就
会让手机变砖。第三，必须精确地确定应该使用哪个块设备。这点往往比较困难，判断失误会带
来潜在的灾难。如果写人的错误的分区，可能会让设备变砖，并且无法复原。
在案例分析的两个设备中，bootloader并不需要解锁。虽然三星Galaxy SIll会检测签名，然
后增加自定义刷机计数，但是不会阻止引导未签名的boot镜像。GalaxyNexus完全不验证签名。
---
## Page 278
262
第10章攻击内核
应该区别对待不同的设备，如下所示。
在 Galaxy Nexus .上:
dev:~/android/src/kernel/omap/staging $ adb push nev-boot.ing /data/loca1/tmp
2316 KB/s (4526080 bytes In 1.907s)
dev:~/android/src/kernel/omap/staging $ adb she11
of=/dev/b1ock/p1at:form/omap/omap_hsmmc. 0/by-name/boot
root@android:/data/loca1/tmp # dd if=boot ,ing \
8800+0 records in
8800+0 records out
4505600 bytes transferred in 1.521 secs (2962261 bytes/sec)
root9android:/data/local/tmp # exit
dev:~/android/src/kerne1/omap/staging $ adb reboot
dev:-/android/src/kernel/omap/staging $ adb wait-for-device shel1 cat \
Linux version 3.0.31-g9f818de-dirty (§drake8dev) (gcc version 4.7 (Gcc) 1.-
/proc/version
注意使用这种方法时，没有必要在boot镜像后面加上MD5，这只适用于Odin
在三星 Galaxy S III上：
dev:~/sgs3nd4 $ adb push boot,img /data/1oca1/tmp
Ttaqe qpe s spu-cebe/~:Aop
2196 KB/s (5935360 bytes in 2.6388)
she11@android:/data/1oca1/tmp $ exec su
root9android:/data/loca1/tmp  dd if=boot.img \
of=/dev/b1ock/p1atform/m8m_sdce 1/by-name/boot
11592+1 records in
11592+1records out
5935360 bytes transferred in 1.531 secs (3876786 bytes/sec)
dev:~/sgs3md4 $ adb reboot
root@android:/data/local/tnp  exit
dev:~/sgs3md4 $ adb wait-for-device shel1 cat /proc/version
Linux version 3.0.31 ({drake9dev) (gce version 4.6.x-google 20120106
每种情况下，都使用ADB将镜像复制到设备中，然后使用ad命令直接写人boot分区。命
令执行完成后，重启设备并打开shell，确认自定义内核已经被使用。
10.4调试内核
要让内核漏洞变得有价值，就需要深人了解操作系统的内部工作机理。触发内核漏洞会导致
很多非预期的行为，包括panic、hang和内存破坏。多数情况下，触发的内核漏洞会导致内核panic，
进面系统重启。为了理解问题根源，调试工具是非常重要的。
幸运的是，Android所用的Linux内核包含了多个调试工具。可以用多种方法来调试崩溃，
具体方法取决于用于测试的设备。在开发利用程序时，追踪和在线调试能够帮助开发人员理解一
些微妙的难点。本节涵盖调试工具相关的内容，提供了详细的使用案例。
---
## Page 279
10.4调试内核
263
10.4.1获取内核崩溃报告
大部分Android设备在发生内核错误时都会重启，这些错误不仅可能是内存访问错误，也可
能是内核断言bug或条件错误，这些行为会干扰安全研究。幸运的是，存在几种方式来处理前溃，
并获取有用的崩溃信息。
在重启之前，Linux内核会向内核日志发送崩遗的相关信息。通过shell执行dmesg 命令可
以访问这个日志。除了dmesg，也可以使用proc文件系统中的kmsg来连续查看内核日志，完整
路径是/proc/kmsg
如果没有root权限，可能无法使用这些工具。在大多数设备上，/proc/kmsg被限制为仅智能
root用户或者root用户组才能访问，更老的设备只允许root用户访问。另外，第12章讨论的
dmesg_restrict参数可以把dmesg 命令限制为root用户访问。
除了在线内核日志以外，Android还提供了一种工具，可以在设备成功重启后获取前溃信息。
在支持CONFIG_ANDROID_RAM_CONSOLE选项的设备中，内核日志可以在重启之前通过proc文
件系统的 last_kmsg 获得，完整路径是/proc/last_kmsg。与 dmesg 和 kmsg 不同，它不需要root
权限。尝试利用未知的内核漏润来首次获得设备的root权限时，这个方法就很有优势了。
还能通过查看Android设备来找到其他相关目录，其中一个是/data/dontpanic目录。许多设备
的init.rc脚本包含一些命令，能够将proc文件系统中的一些项复制到这些目录。搭载Android2.3.4
的Verizon版摩托罗拉Droid3中的init，rc如下所示：
she118cdma_solana:/ grep -n *copy *dontpanic' /init*
/init .mapphone_cdma .re:136:
copy /proc/last_knsg /data/dontpanic/last_km8g
/ ini t .mapphone_cdma .re:141:
 copy /data/dontpanic/apanic_console
/data/logger/last_apanic_console
/init.rc:127:
[ - + . ]
/init.rc:131: copy /proc/apanie_threads /data/dontpanic/apanic_threads
copy /proc/apanic_console /data/dontpanic/apanic_console
在这个例子中，last_kmsg、apcanic_console 和apanic_threads这三个proc项被复
制了。后两个在大多数Android设备中是不存在的，所以对调试没有帮助。除了/data/dontpanic，
还用到了另外一个目录/data/logger。查看不同设备的init.rc文件可以找到更多其他目录，但是不
如直接访间响/proc/kmsg 和/proc/last_kmsg 有效。
最后一种方法可以用来防止设备内核出错后重启。Linux内核有几个运行时配置参数，可以
用于在产生问题后系控制统的操作。首先，proc/sys/kemel/panic项控制了panic发生后，系统等
待多少秒才重启。Android设备通常设置为1或5秒：如果设置为0，系统就不会重启。
警告修改系统panic之后的欢认操作要小心。尽管改为不重启是理想的方法，但是内核错误发