# 引导自定义内核

编译成功后，内核编译系统会将内核镜像写入 `arch/arm/boot/zImage`。可以通过多种方法在设备上引导这个新编译的内核，具体方法取决于特定设备。本节将介绍四种方法：两种使用 fastboot 协议，一种使用 OEM 专有下载协议，另一种直接在设备上操作。

## 使用 Fastboot 协议引导内核

### 方法一：直接启动 boot.img
1. **解锁 Bootloader**：
   首先，必须解锁设备的 bootloader。请注意，解锁 bootloader 可能会使设备的保修条款失效，并且一个误操作可能导致设备永久无法使用，因此请务必小心。
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb reboot bootloader
   ```

2. **使用 fastboot 启动 boot.img**：
   使用 fastboot 工具中的 `boot` 命令可以直接引导新创建的 `boot.img` 文件。
   ```bash
   dev:~/android/src/kernel/omap/staging $ fastboot boot new-boot.img
   ```
   成功启动后，可以打开 shell 来确认修改后的内核正在运行。
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb wait-for-device shell cat /proc/version
   Linux version 3.0.31-g9f818de-dirty (jdrake9dev) (gcc version 4.7 (GCC) 1...
   ```

### 方法二：将 boot.img 写入设备的 boot 分区
1. **解锁 Bootloader**：
   确保设备已解锁 bootloader 并进入 fastboot 模式。
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb reboot bootloader
   ```

2. **使用 fastboot flash 命令写入 boot.img**：
   使用 `fastboot flash` 命令将新创建的 `boot.img` 持久地写入设备的 boot 分区。
   ```bash
   dev:~/android/src/kernel/omap/staging $ fastboot flash boot new-boot.img
   sending 'boot' (4428 KB) ...
   OKAY [1.679s]
   writing 'boot'...
   OKAY [1.121s]
   finished. total time: 2.800s
   dev:~/android/src/kernel/omap/staging $ fastboot reboot
   ```
   设备重启后，可以打开 shell 来确认修改后的内核正在运行。
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb wait-for-device shell cat /proc/version
   Linux version 3.0.31-g9f818de-dirty (jdrake9dev) (gcc version 4.7 (GCC) 1...
   ```

## 使用 OEM 刷机工具

### 以三星 Galaxy S III 为例
1. **切换到下载模式**：
   将设备切换到下载模式。
   ```bash
   dev:~/sgs3-md4/boot $ cd ./staging
   dev:~/sgs3-md4/staging $ adb reboot bootloader
   ```

2. **准备 boot.tar.md5 文件**：
   Odin 不接受原始 boot 镜像作为输入，而是采用与原厂镜像相同的 `.tar.md5` 格式。生成该格式文件的命令如下：
   ```bash
   dev:~/sgs3-md4/staging $ (cat boot.tar; md5sum -t boot.tar) > boot.tar.md5
   ```

3. **使用 Odin 工具刷机**：
   将 `boot.tar.md5` 文件复制到 Windows 机器，并使用 Administrator 权限运行 Odin。选择 `PDA` 旁边的复选框，选择 `boot.tar.md5` 文件的路径并打开它。将设备连接到 Windows 电脑，点击 `Start` 按钮开始刷机。如果勾选了自动重启选项，设备将在刷机完成后自动重启。

4. **确认内核**：
   设备重启后，可以打开 shell 来确认修改后的内核正在运行。
   ```bash
   shell@android: $ cat /proc/version
   Linux version 3.0.31 (jdrake9dev) (gcc version 4.6.x-google 20120106
   ```

## 直接写入 boot 分区

### 方法一：Galaxy Nexus
1. **将 boot.img 复制到设备**：
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb push new-boot.img /data/local/tmp
   ```

2. **写入 boot 分区**：
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb shell
   root@android:/ # dd if=/data/local/tmp/new-boot.img of=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot
   8800+0 records in
   8800+0 records out
   4505600 bytes transferred in 1.521 secs (2962261 bytes/sec)
   ```

3. **重启设备并确认内核**：
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb reboot
   dev:~/android/src/kernel/omap/staging $ adb wait-for-device shell cat /proc/version
   Linux version 3.0.31-g9f818de-dirty (jdrake9dev) (gcc version 4.7 (GCC) 1...
   ```

### 方法二：三星 Galaxy S III
1. **将 boot.img 复制到设备**：
   ```bash
   dev:~/sgs3md4 $ adb push boot.img /data/local/tmp
   ```

2. **写入 boot 分区**：
   ```bash
   dev:~/sgs3md4 $ adb shell
   root@android:/ # dd if=/data/local/tmp/boot.img of=/dev/block/platform/mem_sdce1/by-name/boot
   11592+1 records in
   11592+1 records out
   5935360 bytes transferred in 1.531 secs (3876786 bytes/sec)
   ```

3. **重启设备并确认内核**：
   ```bash
   dev:~/sgs3md4 $ adb reboot
   dev:~/sgs3md4 $ adb wait-for-device shell cat /proc/version
   Linux version 3.0.31 (jdrake9dev) (gcc version 4.6.x-google 20120106
   ```

## 调试内核

### 获取内核崩溃报告
1. **使用 dmesg 和 kmsg**：
   在大多数设备上，可以通过 `dmesg` 命令或 `/proc/kmsg` 文件查看内核日志。
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb shell dmesg
   dev:~/android/src/kernel/omap/staging $ adb shell cat /proc/kmsg
   ```

2. **使用 last_kmsg**：
   支持 `CONFIG_ANDROID_RAM_CONSOLE` 选项的设备可以在重启前通过 `/proc/last_kmsg` 获取内核日志。
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb shell cat /proc/last_kmsg
   ```

3. **防止内核出错后重启**：
   可以通过设置 `proc/sys/kernel/panic` 参数来控制 panic 发生后系统的等待时间。
   ```bash
   dev:~/android/src/kernel/omap/staging $ adb shell echo 0 > /proc/sys/kernel/panic
   ```

请注意，修改系统默认行为时要谨慎，以免导致设备不可用。