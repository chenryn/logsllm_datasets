正如我们之前讨论的一样，这个管道的第一次运行实际上是在我们安装 Jenkins 时自动触发的。该作业是针对主分支运行的，可以通过单击詹金斯登录页面上的**测试和发布 Helm 图**链接来查看。您将看到一个成功的作业与主分支发生冲突:
![Figure 7.5 – The first runthrough of the pipeline ](img/Figure_7.5.jpg)
图 7.5–管道的第一个管道
Jenkins 中的每个管道构建都有一个包含执行输出的相关日志。您可以通过选择左侧蓝色圆圈旁边的 **#1** 链接，然后在下一个屏幕上选择**控制台输出**来访问该版本的日志。此构建的日志显示，第一阶段`Lint`通过显示以下消息而成功:
```
All charts linted successfully
----------------------------------
No chart changes detected.
```
这是我们所期望的，因为从主分支的角度来看，没有图表被改变。在安装阶段也可以看到类似的输出:
```
All charts installed successfully
-----------------------------------
No chart changes detected.
```
因为 Lint 和 Install 两个阶段都没有错误地完成，所以管道继续到包图表阶段。在这里，您可以查看输出:
```
+ helm package --dependency-update helm-charts/charts/guestbook helm-charts/charts/nginx
Successfully packaged chart and saved it to: /home/jenkins/agent/workspace/t_and_Release_Helm_Charts_master/guestbook-1.0.0.tgz
Successfully packaged chart and saved it to: /home/jenkins/agent/workspace/t_and_Release_Helm_Charts_master/nginx-1.0.0.tgz
```
最后，管道以克隆您的 GitHub Pages 存储库结束，在其中创建一个`stable`文件夹，将打包的图表复制到`stable`文件夹，将更改提交到本地 GitHub Pages 存储库，并将更改推送到 GitHub。我们可以观察到，添加到我们存储库中的每个文件输出如下行:
```
+ git commit -m 'pushing charts from branch master'
[master 9769f5a] pushing charts from branch master
 3 files changed, 32 insertions(+)
 create mode 100644 stable/guestbook-1.0.0.tgz
 create mode 100644 stable/index.yaml
 create mode 100644 stable/nginx-1.0.0.tgz
```
您可能很想知道您的 GitHub Pages 存储库在自动推送后是什么样子。您的存储库应该如下所示，带有一个包含 Helm 图表的新`stable`文件夹:
![Figure 7.6 – The state of the repository after the CI pipeline completes ](img/Figure_7.6.jpg)
图 7.6–配置项管道完成后存储库的状态
在`stable`文件夹中，您应该能够看到三个不同的文件、两个单独的图表和一个`index.yaml`文件:
![Figure 7.7 – The contents of the stable folder ](img/Figure_7.7.jpg)
图 7.7-`stable`文件夹的内容
这第一个管道构建成功地创建了第一组`stable`图表，但它没有演示如何在新图表被认为稳定并准备好供最终用户使用之前对其进行筛选和测试。为了演示这一点，我们需要从主分支中切下一个特征分支来修改一个或多个图表，将更改推送到特征分支，然后在 Jenkins 中开始新的构建。
首先，从主分支创建一个名为`chapter7`的新分支:
```
$ cd $PACKT_FORK_DIR
$ git checkout master
$ git checkout -b chapter7
```
在这个分支上，我们将简单地修改`ngnix`图表的版本来触发图表的林挺和测试。NGINX 是一个网络服务器和反向代理。它比我们在本书中使用的留言簿应用要轻量级得多，因此，出于这个原因，我们将在本例中使用 Packt 存储库中的`ngnix`图表，以避免詹金斯也在您的 Minikube 环境中运行时可能出现的任何资源限制。
在`helm-charts/charts/nginx/Chart.yaml`文件中，将图表版本从`1.0.0`更改为`1.0.1`:
```
version: 1.0.1
```
运行`git status`确认检测到变化:
```
$ git status
On branch chapter7
Changes not staged for commit:
  (use 'git add ...' to update what will be committed)
  (use 'git checkout -- ...' to discard changes in working directory)
        modified:   helm-charts/charts/nginx/Chart.yaml
no changes added to commit (use 'git add' and/or 'git commit -a')
```
注意`ngnix` `Chart.yaml`文件已经修改。添加文件，然后提交更改。最后，你可以继续把零钱推到你的叉子上:
```
$ git add helm-charts
$ git commit -m 'bumping NGINX chart version to demonstrate chart testing pipeline'
$ git push origin chapter7
```
在 Jenkins 内部，我们需要触发一个存储库扫描，这样 Jenkins 就可以针对这个分支检测并启动一个新的构建。导航至**测试和释放 Helm 图**页面。您可以通过点击顶部栏上的**测试和发布 Helm 图**标签轻松完成:
![Figure 7.8 – The Test and Release Helm Charts page ](img/Figure_7.8.jpg)
图 7.8–测试和发布 Helm 图页面
选择后，点击左侧菜单中的**立即扫描多分支管道**按钮。这允许詹金斯检测你的新分支并自动开始新的构建。扫描应在大约 10 秒内完成。刷新页面，页面上会出现新的`chapter7`分支，如下所示:
![Figure 7.9 – The Test and Deploy Helm Charts page after scanning for the new chapter7 branch ](img/Figure_7.9.jpg)
图 7.9–扫描新的`chapter7`分支后的测试和部署 Helm 图页面
`chapter7`作业将比主作业运行更长的时间，因为`chapter7`作业包含用图表测试工具测试的修改后的 Helm 图表。您可以通过导航到`chapter7`的控制台输出来观察该管道的运行情况。从**测试和发布 Helm 图**概览页面，选择 [*第 7 章*](#_idTextAnchor335) 分支，然后选择左下角的 **#1** 链接。最后，选择**控制台输出**链接。如果您在管道仍在运行时导航到此页面，您将实时收到日志更新。等待管道结束，此时应显示以下消息:
```
Finished: SUCCESS
```
在控制台输出日志的开头，请注意`ct lint`和`ct install`命令是如何针对`ngnix`图表运行的，因为这是唯一发生变化的图表:
```
Charts to be processed:
---------------------------------------------------------------
 nginx => (version: '1.0.1', path: 'helm-charts/charts/nginx')
```
每个命令的附加输出应该已经很熟悉了，因为它与第 6 章*测试 Helm 图*中描述的输出相同。
在您的 GitHub Pages 存储库中，您应该会在`staging`文件夹中看到新版本的`ngnix`图表，因为它不是针对主分支构建的:
![Figure 7.10 – The contents of the staging folder](img/Figure_7.10.jpg)
图 7.10-`staging`文件夹的内容
要释放`nginx-1.0.1.tgz`图表，需要将`chapter7`分支合并到主分支中，这将导致该图表被推送到稳定的存储库中。在命令行上，将您的`chapter7`分支合并到主分支，并将其推送到`remote`存储库:
```
$ git checkout master
$ git merge chapter7
$ git push origin master
```
在 Jenkins 中，通过返回**测试和发布 Helm 图**页面并点击**主**作业，导航到主管道作业。您的屏幕应该如下所示:
![Figure 7.11 – The master job for the Test and Release Helm charts project ](img/Figure_7.11.jpg)
图 7.11–测试和发布 Helm 图项目的主要工作
进入此页面后，点击左侧的**立即建造**链接。再次注意，在日志中，图表测试被跳过，因为图表测试工具将克隆与主分支进行了比较。因为内容是相同的，所以工具确定没有要做的测试。构建完成后，导航到您的 GitHub Pages 存储库，确认新的`nginx-1.0.1.tgz`图表位于`stable`存储库下:
![Figure 7.12 – The state of the repository after the new nginx chart has been added ](img/Figure_7.12.jpg)
图 7.12–添加新的`nginx`图表后存储库的状态
通过使用`helm repo add`在本地添加存储库，您可以验证这些图表是否已正确部署到 GitHub Pages `stable`存储库中。在 [*第五章*](05.html#_idTextAnchor265)*构建你的第一个 Helm 图表*中，你添加了 GitHub Pages 存储库的根位置。然而，我们修改了文件结构以包含`stable`和`staging`文件夹。如果仍在配置中，您可以通过运行以下命令删除此存储库:
```
$ helm repo remove learnhelm
```
可以用`stable`知识库的更新位置再次添加知识库:
```
$ helm repo add learnhelm $GITHUB_PAGES_SITE_URL/stable
```
请注意，`$GITHUB_PAGES_SITE_URL`的值引用的是 GitHub 服务的静态站点，而不是您实际的`git`存储库。您的 GitHub Pages 网站网址应该具有类似于[https://$ GitHub _ username . GitHub . io/Learn-Helm-Repository/stable](https://$GITHUB_USERNAME.github.io/Learn-Helm-Repository/stable)的格式。确切的链接可以在你的 GitHub 页面库的**设置**标签中找到。
添加`stable`存储库后，运行以下命令查看在两个主构建过程中构建和推送的每个图表:
```
$ helm search repo learnhelm --versions
```
您应该会看到三个结果，其中两个包含构建和推送的`nginx`图表的两个版本:
![Figure 7.13 – Results from the helm search repo command ](img/Figure_7.13.jpg)
图 7.13–来自 `helm search repo`命令的结果
在本节中，我们讨论了如何通过 CI 管道管理 Helm 图表的生命周期。通过使用所提供的示例遵循自动化工作流，您可以在向最终用户发布图表之前轻松执行常规的林挺和测试。
虽然本节主要关注 Helm 图表的 CI，但是 CD 和 GitOps 也可以实现为将 Helm 图表部署到不同的环境。我们将在下一节探讨如何构建光盘管道。
# 创建光盘管道，使用 Helm 部署应用
光盘管道是一组可重复的步骤，可以以自动化的方式部署到一个或多个不同的环境中。在本节中，我们将创建一个光盘管道来部署我们在上一节中测试并推送到我们的 GitHub Pages 存储库中的`nginx`图表。GitOps 还将通过引用保存到`git`存储库中的`values`文件来加以利用。
让我们设计需要包含在这个管道中的高级步骤。
## 设计管道
在前几章中，使用 Helm 部署到 Kubernetes 环境是一个手动过程。然而，这种光盘管道设计用于部署到多个不同的环境中，同时抽象出 Helm 的用途。
以下步骤描述了我们将在本节中介绍的光盘工作流程: