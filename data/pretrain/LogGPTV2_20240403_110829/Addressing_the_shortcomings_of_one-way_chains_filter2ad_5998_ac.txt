 20
 40
 60
chain length
 80
 100
 120
Advanced Factorization (Hash Computation, Finding Collision)
Hash Gen. (HG)
average of HG
Finding Collision (FC)
(avg. 42,449,805)
(avg. 544,997)
-5e+07
 0
 20
 40
 60
chain length
 80
 100
 120
Figure 4: Run time analysis of chameleon one-way
chain implementations

 1.6e+08
 1.4e+06
 1.4e+08
 1.2e+06
SHA-1
DL
SF
AF
)
s
m
(
e
m
T
i
 1.2e+08
 1e+08
 8e+07
 6e+07
 4e+07
 2e+07
 0
 0
 1e+06
 800000
 600000
 400000
 200000
 0
 0
 2000  4000  6000  8000  10000
 10000
 20000
 30000
 40000
 50000
 60000
 70000
 80000
 90000  100000
chain length
Figure 5: SHA-1 versus chameleon SF, DL, and AF
counter and compute 999th value by performing 999 hash
operations and so on. Since initial key distribution (i.e.,
securely communicating the anchors of one-way chains to
intended users) costs are the same for both, SHA-1 based
chains and chameleon chains, we do not provide the actual
cost for this phase. Here, our one-way chain has advantage
over SHA-1 based one-way chain as SHA-1 based approach
may need as many such operations as new chains of ﬁxed
length are generated. Note that, in the LKH application
shown in this paper, it is impossible to a priori determine,
either the longevity of the setup or the number of possible
join/leave operations for any auxiliary node.
In the following, we show how one-way hash chain can
place a heavy computational burden on the center, where
it stores only the seed and the corresponding counters of
chains.
In a one way chain of length n, to compute the
jth value on-the-ﬂy, the center needs to perform n − j hash
operations. Hence, to exhaust the one-way chain (i.e., after
n authentications), the number of hash operations (N H)
performed by the center is given by the following equation;
N H =
n
X
i=0
i =
n(n + 1)
2
(2)
Therefore, if we compare the computational costs incurred
to the center while using all the four (SHA-1, SF, DL, AF)
hash operations, we obtain the graph shown in Figure 5. In
this graph, the x axis represents the length of one-way chain,
and y axis represents the time (in milliseconds), needed by
the center to exhaust that chain. It is evident from Figure
5, that the three implementations of chameleon hash func-
tions provide better performances over the SHA-1 scheme,
in long run. The computational advantage of SHA-1 disap-
pears when the chain length is more than 9,000 units, for
DL implementation; while for SF and AF implementations,
the break-even point is reached at 4,000 units (cf. Figure
5).
The computational cost for chameleon based schemes are
given by n × [Cost(F ind Collision) + Cost(Hash Gen.)],
and for the SHA-1 based scheme, it is given by O(n2) ×
Cost(hash) (cf. Eq. 2). To compare amongst chameleon
based implementations, DL based implementation is the
least eﬃcient, while the SF and AF show overall similar
performances (the two curves almost overlap in Figure 5).
Simple factorization based implementation of our construc-
tion is suitable for setups where end users have limited com-
putational capabilities. Also note that; SHA-1, MD5 etc.,
are the most optimized implementations in any standard
cryptographic suit, unlike chameleon functions. We hope
that the importance, and capability of chameleon schemes
will bring forward more eﬃcient implementations to exis-
tence. Furthermore, as we can see from Table 3, and Figure
4, hash generation phase requires a random number (that is
provided by OpenSSL PRNG in our implementation); this
phase can be considerably improved if the underlying appli-
cation has a source of random numbers [5].
Nevertheless, even for a chain of small length (e.g., n =
5000), the average cost of an authentication under SHA-1
scheme is higher than the cost of a hash under chameleon
scheme. Note that, the computational cost advantage of
chameleon chain over SHA-1 chain increases as the value of
n (chain length, cf. Figure 5) increases.
6. ADVANTAGES OVER SHA-1 BASED
CHAINS
These two schemes can be compared in terms of chain
length, memory versus computational cost incurred to use
the chains, durability of the message authenticity, and extra
settings like time synchronizations, between communicating
peers to realize the setup. Let us enumerate few undeniable
advantages of our chain construction over the SHA-1 based
one-way chains.
• Practically unbounded one-way chain - Unlike
Lamport’s one-way chain, this scheme provides a one-
way hash chain whose length is restricted by the ﬁnite-
ness of the ﬁeld the chain is built upon. As we have
seen earlier, one-way chains using chameleon functions
are always generated and used in same direction (i.e.,
the generator of the chain is just a few steps ahead
than the last revealed value), whereas in Lamport’s
one-way chain the generation and usage proceed in op-
posite directions, therefore limiting the length of the
chain.
• Unit storage and computation requirement - In
one-way chains derived using SHA-1 hash function the
applications require a trade-oﬀ between storage of the
actual chain values and/or re-computation of the val-
ues (at the chain-owner’s side). Such a constraint does
not exist for chains based on chameleon functions be-
cause there is no need to compute the chain in advance
in order to get the anchor of the chain.
• Backward secrecy - Knowing a value of any unit
from the SHA-1 one-way chain, lets one derive all the
values between that point up to the anchor of the
chain. This eventually leads to the exposure of all
previous communications secured using the hash val-
ues of such a chain. Whereas, in case of chameleon
based one-way chains, one can derive (for authentica-
tion of newly received unit of the chain) only the pre-
vious value in the chain; not beyond that. This is an
important requirement while using one-way chains for
managing group memberships. A newly joined/evicted
member should not get undue privileges, other than
the assigned ones, when the membership action is per-
formed. We have shown this mechanism in section 4.
• Time synchronization requirement - The ap-
plications that use Lamport chains need to time-
synchronize the communicating ends to establish au-
thenticity of the distributed keys.
In short, such a
setup temporarily provides properties of asymmetric
cryptography; where the asymmetry is introduced by
the time diﬀerence between the sender and the re-
ceivers. In our construction, keys are self-veriﬁable and
it is not possible to trace backward into the chain, the
time synchronization between communicating peers is
not necessary.
All the above mentioned properties can be realized with
alternative mechanisms (possibly by the combination of
SHA-1 chains and asymmetric cryptography) in ad hoc fash-
ion, with increased costs and complexity.
Among the three Chameleon implementations we carried
out, SF performs better in “Hash Computation” whereas AF
performs fair in “Finding Collisions”. With this observation,
one can accommodate SF and AF into applications involv-
ing computationally weak veriﬁers (for instance, sensor net-
works) and computationally weak communication originator
(a satellite engaging multiple base-stations), respectively.
7. CONCLUSIONS
In this paper, we have derived an analogy between
Lamport’s one-way chain and one-way chains based on
chameleon functions. Our construction has the following ad-
vantages over the former: i) practically unbounded length,
ii) backward secrecy, iii) constant storage and computational
requirements, and iv) no time synchronization requirement
for multicasts. Our construction is more eﬃcient than SHA-
1 based one-way chain, in storage constrained setups. Our
scheme, in comparison with SHA-1 based one-way chain,
has a linear overhead in computation, while the latter has
quadratic scaling. We hope that the importance, and capa-
bility of chameleon schemes will bring forward more eﬃcient
implementations to existence.
Note that, we have explored chaining as one of the possi-
ble constructs, and shown its application for a typical sce-
nario. There are several other security setups that require
the properties provided by our construction. Chaining is
only important if causality of signatures is needed. Further-
more, chameleon hash functions can be used just as easily
to construct trees or even simpler star-like constructs that
would eliminate the need for the veriﬁer to store intermedi-
ate values.

8. REFERENCES
[1] M. Abdalla and M. Bellare. Increasing the lifetime of
a key: A comparative analysis of the security of
re-keying techniques. ASIACRYPT: Proceedings of the
6th International Conference on the Theory and
Application of Cryptology and Information Security,
Springer-Verlag, LNCS(1976):546–559, 2000.
[2] G. Ateniese, D. H. Chou, B. de Medeiros, and
G. Tsudik. Sanitizable signatures. ESORICS:
Proceedings of the 10th European Symposium on
Research in Computer Security, Springer-Verlag,
LNCS(3679):159–177, 2005.
[3] G. Ateniese and B. de Medeiros. Identity-based
chameleon hash and applications. FC: Financial
Cryptography, 8th International Conference,
Springer-Verlag, LNCS(3110):164–180, 2004.
[4] G. Ateniese and B. de Medeiros. On the key exposure
problem in chameleon hashes. SCN: Security in
Communication Networks, 4th International
Conference, Springer-Verlag, LNCS(3352):165–179,
2004.
[5] B. Barak, R. Impagliazzo, and A. Wigderson.
Extracting randomness using few independent sources.
FOCS: Proceedings of the 45th Annual IEEE
Symposium on Foundations of Computer Science,
pages 384–393, 2004.
[6] J. F. Boyar and S. A. Kurtz. A discrete logarithm
implementation of perfect zero-knowledge blobs.
Journal of Cryptology, Springer-Verlag, 2(2):63–76,
1990.
[7] S. Brands. Rethinking Public Key Infrastructures and
Digital Certiﬁcates; Building in Privacy. MIT Press,
2000.
[8] G. Brassard, D. Chaum, and C. Cr´epeau. Minimum
disclosure proofs of knowledge. Journal of Computer
and System Sciences, Academic Press, 37(2):156–189,
1988.
[9] X. Chen, F. Zhang, and K. Kim. Chameleon hashing
without key exposure. ISC: Information Security, 7th
International Conference, Springer-Verlag,
LNCS(3225):87–98, 2004.
[10] R. Di Pietro, A. Durante, and L. V. Mancini. A
reliable key authentication schema for secure multicast
communications. In SRDS: 22nd Symposium on
Reliable Distributed Systems, pages 231–240. IEEE
Computer Society, 2003.
[11] R. Di Pietro and L. V. Mancini. Security and privacy
issues of handheld and wearable wireless devices.
Communications of the ACM, 46(9):74–79, 2003.
[12] W. Ford and M. S. Baum. Secure Electronic
Commerce: Building the Infrastructure for Digital
Signatures and Encryption, 2nd Ed. Prentice Hall,
2002.
[13] S. Goldwasser, S. Micali, and R. L. Rivest. A digital
signature scheme secure against adaptive
chosen-message attacks. SIAM Journal on Computing,
17(2):281–308, 1988.
[14] N. M. Haller. The S/KEY one-time password system.
NDSS: Proceedings of the ISOC Symposium on
Network and Distributed System Security, pages
151–157, 1994.
[15] H. Krawczyk and T. Rabin. Chameleon hashing and
signatures. NDSS: Proceedings of the ISOC
Symposium on Network and Distributed System
Security, pages 143–154, 2000.
[16] L. Lamport. Password authentiﬁcation with insecure
communication. Communications of the ACM,
24(11):770–772, 1981.
[17] A. Pannetrat and R. Molva. Eﬃcient multicast packet
authentication. NDSS: Proceedings of the ISOC
Symposium on Network and Distributed System
Security, 2003.
[18] J. M. Park, E. K. P. Chong, and H. J. Siegel. Eﬃcient
multicast packet authentication using signature
amortization. In SP: Proceedings of the 2002 IEEE
Symposium on Security and Privacy, pages 227–240.
IEEE Computer Society, 2002.
[19] A. Perrig, R. Canetti, D. X. Song, and J. D. Tygar.
Eﬃcient and secure source authentication for
multicast. NDSS: Proceedings of the ISOC Symposium
on Network and Distributed System Security, 2001.
[20] A. Perrig, R. Canetti, J. D. Tygar, and D. X. Song.
Eﬃcient authentication and signing of multicast
streams over lossy channels. In IEEE Symposium on
Security and Privacy, pages 56–73, 2000.
[21] A. Shamir and Y. Tauman. Improved online/oﬄine
signature schemes. CRYPTO: Proceedings of the 21st
Annual International Cryptology Conference on
Advances in Cryptology, Springer-Verlag,
LNCS(2139):355–367, 2001.
[22] C. K. Wong, M. Gouda, and S. S. Lam. Secure group
communications using key graphs. IEEE/ACM
Transactions on Networking, 8(1):16–30, 2000.
[23] Y. R. Yang, X. S. Li, X. B. Zhang, and S. S. Lam.
Reliable group rekeying: a performance analysis.
SIGCOMM: Proceedings of the 2001 conference on
Applications, technologies, architectures, and protocols
for computer communications, pages 27–38, 2001.
APPENDIX
A. CHAMELEON HASH ALGORITHM
(BASED ON DISCRETE LOGARITHM)
Setting: Choose prime q ≡ 3 mod 8 and q  ≡ 7 mod 8.
Let HKR = c = qq and CKR =
Input: Message m0 = m0[1] . . . m0[l];
Output: The value hash: A chameleon hash of m0;
HKR = n as deﬁned above
Choose random value r0 ∈ Z ∗
n;
hash = r2
for i = 1 to l
0 mod c
hash = (4m0 [i]hash2) mod c
next i
return(hash)
Table 4: An example of chameleon hash generation
based on claw-free permutations
