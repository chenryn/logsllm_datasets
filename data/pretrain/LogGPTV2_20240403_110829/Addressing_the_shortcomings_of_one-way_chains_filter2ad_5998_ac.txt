### 优化后的文本

#### 链长度
20, 40, 60, 80, 100, 120

#### 高级因子分解（哈希计算，查找碰撞）
- 哈希生成 (HG)
  - 平均 HG: 42,449,805
- 查找碰撞 (FC)
  - 平均 FC: 544,997
- 范围: -5e+07 到 0

#### 链长度
20, 40, 60, 80, 100, 120

#### 图4：变色龙单向链实现的运行时间分析

#### 运行时间 (单位: 毫秒)
- SHA-1
- DL
- SF
- AF

图5展示了SHA-1与变色龙SF、DL和AF在不同链长度下的性能对比。对于初始密钥分发的成本，无论是基于SHA-1的链还是变色龙链都是相同的，因此我们没有提供该阶段的实际成本。

在LKH应用中，无法预先确定设置的持续时间或任何辅助节点的加入/离开操作次数。接下来，我们将展示单向哈希链如何对中心节点施加沉重的计算负担，其中中心节点仅存储种子和相应的链计数器。

在一长度为n的单向链中，为了即时计算第j个值，中心节点需要执行n-j次哈希操作。因此，耗尽整个单向链（即经过n次认证）所需的哈希操作次数(NH)由以下公式给出：
\[ NH = \sum_{i=0}^{n} i = \frac{n(n + 1)}{2} \]

比较使用四种哈希操作（SHA-1、SF、DL、AF）时中心节点的计算成本，我们得到了图5所示的结果。在该图中，x轴表示单向链的长度，y轴表示中心节点耗尽该链所需的时间（毫秒）。从图5可以看出，三种变色龙哈希函数的实现比SHA-1方案在长链情况下表现更好。对于DL实现，当链长度超过9,000个单位时，SHA-1的计算优势消失；而对于SF和AF实现，平衡点在4,000个单位处（见图5）。

变色龙方案的计算成本为 \( n \times [Cost(Find\ Collision) + Cost(Hash\ Gen.)] \)，而SHA-1方案的计算成本为 \( O(n^2) \times Cost(hash) \)（见公式2）。在变色龙实现中，DL实现效率最低，而SF和AF的整体性能相似（图5中的两条曲线几乎重合）。简单因子化实现适用于计算能力有限的终端用户。此外，SHA-1和MD5等是最优化的标准密码套件实现，而变色龙函数则不然。我们希望变色龙方案的重要性及其能力能够带来更高效的实现。

即使对于较短的链（例如n=5000），SHA-1方案下的平均认证成本也高于变色龙方案下的哈希成本。随着n（链长度，见图5）的增加，变色龙链相对于SHA-1链的计算成本优势更加明显。

### 6. 变色龙链相对于SHA-1链的优势

这两种方案可以从链长度、存储与计算成本、消息真实性持久性以及通信对端之间的时间同步等方面进行比较。以下是我们的链构造相对于SHA-1单向链的一些无可争议的优势：

- **实际上无界的一次性链**：与Lamport一次性链不同，该方案提供了一个长度受限于构建链所用有限域的一次性哈希链。
- **单元存储和计算要求**：使用SHA-1哈希函数的一次性链需要在存储实际链值和重新计算值之间进行权衡，而基于变色龙函数的链则无需提前计算链以获取锚点。
- **后向保密性**：知道SHA-1一次性链中的任意一个值，可以推导出从该点到链锚点的所有值，从而暴露所有以前通过该链保护的通信。而在变色龙一次性链中，只能推导出前一个值，不能进一步推导。
- **时间同步要求**：使用Lamport链的应用程序需要时间同步来建立分布式密钥的真实性。而在我们的构造中，密钥是自验证的，且无法回溯到链中，因此不需要时间同步。

这些属性可以通过替代机制（可能是SHA-1链和非对称密码学的组合）以临时方式实现，但会增加成本和复杂性。

在我们进行的三个变色龙实现中，SF在“哈希计算”方面表现更好，而AF在“查找碰撞”方面表现一般。根据这一观察，可以在涉及计算能力较弱的验证者（如传感器网络）和计算能力较弱的通信发起者（如与多个基站通信的卫星）的应用中分别采用SF和AF。

### 7. 结论

本文探讨了Lamport一次性链与基于变色龙函数的一次性链之间的类比。我们的构造具有以下优点：i) 实际上无界的长度，ii) 后向保密性，iii) 恒定的存储和计算要求，iv) 多播时无需时间同步。在存储受限的环境中，我们的构造比基于SHA-1的一次性链更高效。与基于SHA-1的一次性链相比，我们的方案在计算上有线性开销，而后者则呈二次增长。我们希望变色龙方案的重要性和能力能够带来更多高效的实现。

注意，我们探索了链作为一种可能的构造，并展示了其在一个典型场景中的应用。还有许多其他安全设置需要我们构造所提供的属性。只有在需要签名因果关系时，链才是重要的。此外，变色龙哈希函数可以很容易地用于构造树或其他简单的星形结构，从而消除验证者存储中间值的需求。

### 8. 参考文献
[略]

### 附录A: 基于离散对数的变色龙哈希算法
- 设置：选择素数q ≡ 3 mod 8 和 q' ≡ 7 mod 8。令HKR = c = qq' 和 CKR = n 如上定义。
- 输入：消息 m0 = m0[1]...m0[l]
- 输出：哈希值：m0 的变色龙哈希
- 选择随机值 r0 ∈ Z∗n
- hash = r0^2 mod c
- for i = 1 to l
  - hash = (4 * m0[i] * hash^2) mod c
- return(hash)

表4：基于爪自由置换的变色龙哈希生成示例