title:JSgraph: Enabling Reconstruction of Web Attacks via Efficient Tracking
of Live In-Browser JavaScript Executions
author:Bo Li and
Phani Vadrevu and
Kyu Hyung Lee and
Roberto Perdisci
JSgraph: Enabling Reconstruction of Web Attacks
via Efﬁcient Tracking of Live In-Browser
JavaScript Executions
Bo Li, Phani Vadrevu, Kyu Hyung Lee, and Roberto Perdisci
Department of Computer Science, University of Georgia
{bo,vadrevu,khlee,perdisci}@cs.uga.edu
Abstract—In this paper, we propose JSgraph, a forensic engine
that is able to efﬁciently record ﬁne-grained details pertaining
to the execution of JavaScript (JS) programs within the browser,
with particular focus on JS-driven DOM modiﬁcations. JSgraph’s
main goal is to enable a detailed, post-mortem reconstruction of
ephemeral JS-based web attacks experienced by real network
users. In particular, we aim to enable the reconstruction of social
engineering attacks that result in the download of malicious
executable ﬁles or browser extensions, among other attacks.
We implement JSgraph by instrumenting Chromium’s code
base at the interface between Blink and V8, the rendering and
JavaScript engines. We design JSgraph to be lightweight, highly
portable, and to require low storage capacity for its ﬁne-grained
audit logs. Using a variety of both in-the-wild and lab-reproduced
web attacks, we demonstrate how JSgraph can aid the forensic
investigation process. We then show that JSgraph introduces
acceptable overhead, with a median overhead on popular website
page loads between 3.2% and 3.9%.
I.
INTRODUCTION
It
is well known that JavaScript (JS, for short) is the
main vehicle for web-based attacks, enabling the delivery of
sophisticated social engineering, drive-by malware downloads,
cross-site scripting, and other attacks [20], [26], [29], [8], [14].
It is therefore important to develop systems that allow us to
analyze the inner workings of JS-based attacks, so to enable
the development of more robust defenses. However, while
extensive previous work exists on JS code inspection [9], [8],
[42], [41] and web-based attack analysis [4], [37], [35], [44],
[2], an important problem remains: to evade defense systems
and security analysts, web-based attacks are often developed
to be ephemeral and to deliver the actual attack code only if
certain restrictive conditions are met by the potential victim
environment [26], [20], [45]. Therefore, there is a need for
JS-based attack analysis tools that can enable real-time in-
browser recording, and subsequent detailed reconstruction, of
live security incidents that affect real users while they simply
browse the web.
In this paper, we aim to meet the above mentioned needs
by proposing JSgraph, a forensic engine that is able to efﬁ-
ciently record ﬁne-grained details pertaining to the execution of
JavaScript programs within the browser, with particular focus
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2018 
18-21  February  2018,  San  Diego,  CA,  USA
ISBN  1-891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23319
www.ndss-symposium.org
on JS-driven DOM modiﬁcations. Ultimately, our goal is to
enable a detailed, post-mortem reconstruction of ephemeral
JS-based web attacks experienced by real network users.
For instance, we aim to enable the reconstruction of social
engineering attacks that result in the download of malicious
executable ﬁles or browser extensions, among other attacks.
Our main target deployment environment
is enterprise
including both mobile and non-mobile network-
networks,
connected devices. In such networks, it is common practice
to perform forensic investigations after a security incident
is discovered, and our primary goal is to aid such forensic
investigations by providing ﬁne-grained details about web-born
attacks to the network’s devices.
To achieve our goal, we design JSgraph to satisfy the
following main requirements:
• Efﬁcient Audit Log Recording. Because we aim to record
web attacks in real time, as they affect real victims, and
in consideration of the fact that most web attacks are
both difﬁcult to anticipate and ephemeral, we need audit
log recording to be always on. Consequently, the main
challenge we face is whether it
is feasible to record
highly detailed information related to in-browser JS code
execution without signiﬁcantly impacting the browser’s
performance and usability.
• No Functional Interference. We aim to avoid any mod-
iﬁcation to the browser’s code base that would alter its
functionalities. For instance, some debugging tools that
perform in-browser record and replay, such as Time-
Lapse [4] and ReJS [44], alter the rendering engine to
force it to effectively run in single-threaded mode. As this
may have an impact on both rendering performance and
behavior, we deliberately avoid making any such changes.
• Portability. To make it easily adoptable, we aim to
is highly portable. To this
implement a system that
end, we build JSgraph by instrumenting Chromium’s
code base at the interface between its rendering engine
(Blink) and the JavaScript engine (V8). By conﬁning the
core of JSgraph within Blink/V8 (more precisely, within
Chromium’s content module [6]), we are able to inherit
Chromium’s portability, thus making it easier to deploy
JSgraph on multiple platforms (e.g., Linux, Android,
Mac, Windows), and different Blink/V8-based browsers
(e.g., Opera, Yandex, Silk, etc.) with little or no changes.
• Limited Storage Requirements. Because security incidents
are often discovered weeks or even months after the
fact, we aim to minimize the storage requirements for
JSgraph’s audit logs, making it feasible to retain the logs
for extended periods of time (e.g., one year or longer).
In a nutshell, JSgraph works as follows (system details are
provided in Section II). Given a browser tab, JSgraph monitors
every navigation event, logs all changes to the DOM that occur
for each page loaded within that tab, records how JS code is
loaded (i.e., whether it is deﬁned “inline” or loaded from an
external URL), follows the execution of every compiled JS
script, and logs every change that a script (or a callback) makes
to the DOM. This enables the reconstruction of how a page’s
DOM evolved in time, and how changes to that DOM exactly
came about. Ultimately, this enables a forensic analyst to trace
back what JS script or function was responsible for making
a given DOM change, including pinpointing what JS scripts
were responsible for presenting a social engineering attack to
the victim, and how the attack was actually constructed within
the DOM.
To make JSgraph efﬁcient, we implement its core logging
functionalities by extending the DOM and JS code tracing
functionalities offered by Chromium’s DevTools. We then
show that our system introduces acceptable performance over-
head. For instance, we show that, on the top 1,000 websites
according to Alexa, JSgraph running on Linux introduces a
median website page load overhead of 3.2%, and a 95th-
percentile overhead of 7.4%. Besides building an instrumented
browser that can efﬁciently record ﬁne-grained audit logs,
JSgraph also implements a module for abstracting its ﬁne-
grained logs into more easily interpretable graphs. A moti-
vating example that illustrates how this can help in analyzing
in-the-wild web attacks is provided in the next Section I-B.
A. Threat Model
JSgraph aims to accurately record information that enables
the reconstruction of web attacks, with an emphasis on social
engineering malware attacks, but excluding attacks to the
browser software itself. Namely, we assume the browser’s
code is part of our trusted computing base (TCB), along with
the operating system’s code. As JSgraph is implemented via
lightweight instrumentation of the browser, we also assume
that JSgraph’s code is part of the TCB.
This entails that fully recording the behavior of drive-by
exploit kits [16], for example, is outside the scope of this
paper. Nonetheless, we should notice that JSgraph is capable
of accurately recording the execution of malicious JS code
delivered by exploit kits, up to the point in which the browser
itself is compromised. If the exploit succeeds, we cannot
guarantee that JSgraph will not be disabled, or that the logs
produced afterwards will be accurate, because the exploit code
could alter the logging process. At the same time, the logs
recorded before a successful exploit could be securely stored
outside the reach of possible tampering from the compromised
browser, for example by using append only log ﬁles [31], [3],
[34].
B. Motivating Example
In this section, we walk through a motivating example to
show how JSgraph can aid the forensic investigation of web
security incidents. Speciﬁcally, we analyze a real-world social
engineering malware download attack promoted via malicious
advertisement. The attack was observed on May 12, 2017.
Overview: The attack works as following (see Figure 1).
(a) The user simply searches for “wolf of wall street full
movie”; (b) After clicking on the ﬁrst search result, the browser
navigates to gomovies[.]to. (c) Clicking on the play button
to start streaming the movie causes a new window to popup,
under the pressupdateforsafesoft[.]download domain name. An
alert dialog is displayed, with the message “Update the latest
version of Flash Player. Your current Adobe Flash Player
version is out of date.” Notice also that the same page displays
a “Latest version of Adobe Flash Player required [...]” message
right under the URL bar. (d) Clicking the OK button causes
a download dialog box to be shown. (e) Finally, clicking on
the “Download Flash” (or “OK”) button initiates a .dmg ﬁle
download. Interestingly, after the download starts, the attack
page also displays the instructions that the user needs to follow
to install the downloaded software.
Attack Properties: Searching for the downloaded ﬁle’s SHA1
hash1 on VirusTotal produced no results. Upon submission, 10
out of 56 anti-viruses found the ﬁle to be malicious. At the time
of writing, Symantec labels the ﬁle as OSX.Trojan.Gen.
information, we
the
namely
pressupdateforsafesoft[.]download
discovered
that are used to deliver
By leveraging a passive DNS database and domain
that
two
registration
the malicious
domain names
binary,
and
pressbuttonforupdate[.]bid, are related to more than 300
domain name variations that are highly likely used for a large
malware distribution campaign, because they shared close
name similarity, date of registration, and resolved IP addresses
(e.g., pressandclickforbestupdates[.]download, pressyoourbest-
button2update
clickforfreeandbestupdate[.]
download, click2freeupdatethebest[.]bid, etc.). In addition, we
found that in a time window of about eight days, more than
one thousand clients (roughly one third of which were located
in the US) may have fallen victim to this malware campaign.
How JSgraph can Help: The question we would like to answer
is: “how did this attack work under the hood?” Answering this
question is important, because knowing how the attack is deliv-
ered can greatly help in developing effective countermeasures.
Below, we discuss how JSgraph can help in answering this
question.
[.]download,
Remember that JSgraph is an always-on in-browser record-
only system, which aims to perform an efﬁcient recording of
any DOM change, with particular focus on DOM changes
triggered by JS code execution. Our goal is to record highly
detailed audit logs that can enable the reconstruction of com-
plex JS-based attacks. At the same time, we aim to provide a
tool that can present a forensic analyst with a high-level and
thus more easily interpretable description of how the attack
played out.
Our analysis of the attack starts with retrieving, from
the JSgraph logs, the URL that served the executable ﬁle
download. One may ask “how can the forensic analyst know
where to look for potential malware downloads?” To help
answering this question and aid the analysis process, JSgraph
instruments the browser so that it can record if a ﬁle download
(of any kind) is initiated, the URL from which the download
occurs, and the hash and storage path where the ﬁle was
saved (while not currently implemented, JSgraph can also
easily store a copy of every downloaded ﬁle in the audit logs).
Similarly, JSgraph also instruments the browser to record the
download and installation of new browser extensions. It is
therefore straightforward to explore JSgraph’s logs to identify
all ﬁle (or extension) download events. This allows a forensic
1flshPlay2.42.dmg: 1b9368140220d1470d27f3d67737bb2c605979b4
2
(a)
(b)
(c)
(d)
(e)
Fig. 1: Overview of in-the-wild social engineering malware download attack
analyst to spot potential malicious software installations. In the
particular example we consider here, a forensic analyst may
notice that an executable ﬁle named flshPlay2.42.dmg
was downloaded from a suspicious .bid domain name (i.e.,
pressbuttonforupdate[.]bid). We assume this to be our starting
point for attack analysis.
JSgraph’s audit logs report ﬁne-grained details about where
a given piece of JS code originated from, what event listen-
ers it registered (if any), exactly what DOM modiﬁcations
it requested, and how those changes were made (e.g., via
document.write, explicit DOM node creation and inser-
tion, change of a DOM element’s parameters, etc.). Now, let us
refer to the graph in Figure 2, which we automatically derived
by post-processing and abstracting JSgraph’s audit logs (see
also the legend in Figure 6 in Section III). The details on