地址监视（address watch）机制。
10.8.1 4种监视模式
回忆x86 CPU的调试寄存器定义，硬件监视的原始访问模式有三
种：读、写和执行。在AMD GPU中，监视的原始访问方式也有三种，
不过是读、写和原子操作。
GPU程序具有非常高的并行度，同步是个大问题。为了减小软件开
发者的负担，AMD GPU中定义了很多具有原子特征的指令，比如
FLAT_ATOMIC_ADD（原子方式加）、
FLAT_ATOMIC_CMPSWAP（比较并交换）、
FLAT_ATOMIC_SWAP（交换）、FLAT_ATOMIC_UMAX（无符号最
大值）、FLAT_ATOMIC_SMAX（有符号最大值）、
FLAT_ATOMIC_INC（递增）、FLAT_ATOMIC_DEC（递减）等。上
面三种访问方式中的原子操作就是指这些原子指令所执行的操作。
在调试时，要监视一个变量，除了指定变量地址外，还希望能指定
它的访问方式，比如有些变量频繁被读取，但是我们可能只关心写入它
时的情况。为此，在前面提到过的kfd_dbgmgr.h中，定义了4种监视模式
给调试器使用：“仅读”“非读”“仅原子”和“所有”。其枚举定义如下。
enum HSA_DBG_WATCH_MODE {
    HSA_DBG_WATCH_READ = 0,       /* Read operations only */
    HSA_DBG_WATCH_NONREAD = 1,    /* Write or Atomic operations only */
    HSA_DBG_WATCH_ATOMIC = 2,     /* Atomic Operations only */
    HSA_DBG_WATCH_ALL = 3,        /* Read, Write or Atomic operations */
    HSA_DBG_WATCH_NUM,
};
10.8.2 数量限制
与x86的硬件断点有数量限制一样，GCN的地址监视机制也是有数
量限制的。根据ISA手册和AMDGPU驱动的源代码
（amdgpu_amdkfd_gfx_v7.h），其数量限制也是4个。
enum {
    MAX_TRAPID = 8,        /* 3 bits in the bitfield. */
    MAX_WATCH_ADDRESSES = 4
};
10.8.3 报告命中
当监视点命中时，GCN会设置陷阱状态寄存器（TRAPSTS）中的
第7位（EXCP[7]），并设置第12～14位（ADDR_WATCH1～3）来报
告4个监视地址中命中的是哪一个或者哪几个，然后通过陷阱机制，跳
转到陷阱处理函数。
10.8.4 寄存器接口
根据AMDGPU驱动中的代码，可以通过MMIO寄存器来配置地址监
视机制。GPU为每个要监视的地址定义了三个32位的寄存器，分别是地
址的高32位部分、低32位部分和控制属性，比如下面三个常量宏是为0
号监视定义的。
mmTCP_WATCH0_ADDR_H,
mmTCP_WATCH0_ADDR_L, 
mmTCP_WATCH0_CNTL
amdgpu驱动中的kgd_address_watch_execute和
kgd_address_watch_disable函数分别用来启用监视点和禁止监视点，其
核心代码用于设置上述MMIO寄存器。
10.8.5 用户空间接口
与波阵控制类似，用户空间可以通过IOCTL机制来调用amdkfd驱动
中的地址监视管理函数，其控制码为
AMDKFD_IOC_DBG_ADDRESS_WATCH。
10.9 单步调试支持
单步跟踪是最经典的调试方法之一。源代码级别的单步跟踪常常依
赖于汇编指令一级的单步机制，而汇编指令级别的单步机制往往都基于
处理器的硬件支持。比如，x86 CPU的陷阱标志位就是用来支持单步跟
踪的。GCN微架构也毫不例外地设计了类似的设施。
10.9.1 单步调试模式
在GCN的模式寄存器（MODE）中，有一个DEBUG位（第11
位）。当该位为1时，GCN每次执行完一条指令后，都会发起异常，跳
转到陷阱处理函数，但程序结束指令（S_ENDPGM）除外。
GCN发起单步异常的另一个条件是陷阱机制是启用的，也就是状态
寄存器的TRAP_EN = 1。这是为了确保软件已经准备好了异常处理程
序。
10.9.2 控制方法
对于运行在CPU上的调试器来说，只能通过间接的方法来控制
MODE寄存器的DEBUG位。有几种方式可以实现这个目标。
第一种方法是使用前面介绍过的波阵控制接口，操作码部分指定
HSA_DBG_WAVEOP_DEBUG（值为4）。这种方法比较简单，而且对
于用户空间的调试器有开源的驱动程序支持和封装好的IOCTL接口。
第二种方法是在陷阱处理程序中修改寄存器上下文中的MODE寄存
器部分。在amdkfd驱动中，包含有关的一些支持，包括一个包含汇编源
代码的陷阱处理程序，源文件名为cwsr_trap_handler_gfx8.asm，还有把
陷阱处理函数的代码复制到GPU空间并进行设置的代码。另外，还公开
了IOCTL接口给用户态来进行定制。
以下是amdkfd驱动中的初始化代码。
static void kfd_cwsr_init(struct kfd_dev *kfd)
{
    if (cwsr_enable && kfd->device_info->supports_cwsr) {
        BUILD_BUG_ON(sizeof(cwsr_trap_gfx8_hex) > PAGE_SIZE);
        kfd->cwsr_isa = cwsr_trap_gfx8_hex;
        kfd->cwsr_isa_size = sizeof(cwsr_trap_gfx8_hex);
        kfd->cwsr_enabled = true;
    }
}
其中，cwsr是Computer Context Save Restore的缩写[15]，是这个陷阱
处理程序的名字。
当发生异常时，CWSR会把寄存器状态复制到内存中，主要执行
s_getreg_b32指令把寄存器读取到内存中，比如下面是操作MODE寄存
器的部分。
s_getreg_b32 s_save_m0, hwreg(HW_REG_MODE)
当恢复上下文时，会执行如下s_setreg_b32指令来恢复寄存器。
s_setreg_b32 hwreg(HW_REG_MODE), s_restore_mode
第三种方法是通过MMIO寄存器接口，在算核函数的设置中，启用
调试模式。比如在SPI_SHADER_PGM_RSRC1_VS 寄存器中，第22位即
为DEBUG_MODE，该位的作用是在启动波阵时打开调试模式。类似这
样的寄存器有多个，但是公开文档（名为3D寄存器的系列文档）中的
介绍都比较简略。
10.10 根据调试条件实现分支跳转的指令
在GCN中，还设计了一种根据调试条件实现分支跳转的机制。
10.10.1 两个条件标志
在GCN的状态寄存器（STATUS）中，有两个称为条件调试指示符
的位，名字分别叫COND_DBG_USER（第20位）和
COND_DBG_SYS（第21位）。前者用来指示是否处于用户调试模式，
后者用来指示是否处于系统调试模式。
10.10.2 4条指令
与上述两个条件相配套，GCN配备了如下4条条件分支指令。
s_cbranch_cdbgsys              src0
s_cbranch_cdbgsys_and_user     src0
s_cbranch_cdbgsys_or_user      src0
s_cbranch_cdbguser             src0
简单说，这4条指令就根据状态寄存器的COND_DBG_USER和
COND_DBG_SYS来实现分支跳转。以第1条指令为例，其内部逻辑如
下。
if(COND_DBG_SYS != 0) then
PC = PC + signext(SIMM16 * 4) + 4;
endif.
其中，SIMM16代表指令中的立即数部分。类似地，其他三条指令
的判断条件为：(COND_DBG_USER != 0)、 (COND_DBG_SYS ||
COND_DBG_USER)和(COND_DBG_SYS && COND_DBG_USER) 。
在公开的文档中，没有介绍上述设施的详细用法。在开源的驱动
中，目前也没有使用这个机制。一种可能的应用场景是在指令级别动态
选择执行调试逻辑，比如函数开头和结尾的动态采样与追踪等。
10.11 代码断点
代码断点（code breakpoint）是指设置在代码空间中的断点，比如
在源代码或者汇编代码中的断点。代码断点一般是基于软件指令的，比
如在x86 CPU中，著名的INT 3指令是设置软件断点的常用方法。
10.11.1 陷阱指令
在GCN的指令集中，没有专门的断点指令。但是有一条触发陷阱的
陷阱指令S_TRAP。
S_TRAP指令的格式就是在10.4节中介绍的SOPP格式（见图10-
5）。其操作码为18。图10-9画出了S_TRAP指令的机器码。
图10-9 S_TRAP指令的机器码
S_TRAP指令的长度是一个DWORD（32位），其中，低16位为立
即数，用来指示陷阱号（TRAP_ID）。因为高位部分是固定的，所以
S_TRAP指令的机器码总是0xBF92xxxx这样的编码。
10.11.2 在GPU调试SDK中的使用
与Nvidia的GPU调试SDK类似，AMD也有GPU 调试SDK供开发者
使用，这将在下一节详细介绍。调试SDK中有设置代码断点的函数接
口，名称和原型如下。
HwDbgStatus HwDbgCreateCodeBreakpoint(HwDbgContextHandle hDebugContext, co
nst HwDbgCodeAddress codeAddress, HwDbgCodeBreakpointHandle *pBreakpointOu
t);
那么这个API在内部基于刚才介绍的S_TRAP指令来设置代码断点
吗？
坦率说，作者第一次看到S_TRAP指令就觉得亲切，觉得可以用来
实现断点功能。但是官方SDK中是否真的使用这个指令？还是另有妙方
呢？
GPU调试SDK包含一部分源代码，但是大部分核心函数都是二进制
形式，上面的函数也是如此。这一点和Nvidia的做法也一样。
没有详细文档描述，也没有源代码求证，把推测写进书里让作者很
不安。
 老雷评点 
君子戒慎乎其所不睹，恐惧乎其所不闻。
无奈中作者想到了反汇编。请出著名的IDA工具，找到
HwDbgCreateCodeBreakpoint函数，顺着IDA呈现的调用路线追溯，很快
找到最终执行实际断点设置和恢复的是下面这个方法。
bool HwDbgBreakpoint::Set(HwDbgBreakpoint *const this, bool enable)
在这个函数内部，看到多处0xBFxxxxxx这样的“身影”。
cmp     eax, 0BF800000h
cmp     eax, 0BF920000h
其中，第1行是S_NOP指令的机器码，第2行就是S_TRAP指令的机
器码。特别地，下面这几条指令让人如释重负。
.text: 002017A8                 mov     edx, 0BF920007h
.text: 002017AD                 mov     rax, [rdi]
.text: 002017B0                 call    qword ptr [rax+18h]
其中，0BF920007h用于触发TRAP_ID为7的陷阱。结合下面的常量
定义，可以确定无疑，官方调试SDK中设置代码断点的方法就是使用
S_TRAP指令，更确切地说，是S_TRAP 0x7。这与INT 3非常相似。
var TRAP_ID_DEBUGGER         = 0x07
10.12 GPU调试模型和开发套件
为了让开发者能够更容易地使用GPU的调试功能，AMD在GitHub
上提供了半开源的GPU调试SDK。初期的版本是HSAFoundation的项目
[12]，后来转移为ROCm的项目[13]。两个项目目前都只支持Linux系统，
不支持Windows系统，而且都有定制过的GDB公开。下面首先对新的
ROCm版本SDK做简单介绍，然后介绍从CPU上调试GPU程序的交叉调
试模型。
10.12.1 组成
整个SDK包含如下几个部分。
4个头文件，其中的AMDGPUDebug.h是核心，里面定义了SDK输
出的主要API。另外几个头文件都是关于ELF的。ELF是Linux下常
用的可执行文件格式，包括AMD在内的多家GPU厂商都复用ELF文
件来承载GPU程序的代码和符号信息。
一个动态库文件，libAMDGPUDebugHSA-x64.so，大小大约是
18MB，是与GPU硬件交互的核心调试模块，简称DBE（作者认为
这是调试引擎之简称）。这个文件中包含了调试符号，但没有源代
码，是闭源的。
一个静态库文件，libelf.a，它是ELF有关函数的实现。
少量的源代码，源程序目录（src）下包含三个子目录，分别是
HSADebugAgent、HwDbgFacilities和DynamicLibraryModule。第一
个是所谓的调试主体模块（Debug Agent），后文会再介绍。
一个文档，是由Doxygen根据源代码中的注释产生的。
目前，闭源的DBE模块只有x64版本，这意味着整个SDK不支持32
位操作系统。
10.12.2 进程内调试模型
在当前的软件架构中，要让GPU执行任务，必须在CPU端有个宿主
（Host）进程。在调试时，上面提到的DBE模块必须运行在这个宿主进
程中，因此AMD把这种调试方式称为进程内调试模型。其实，相对于
CPU上启动算核函数的代码来说，该模型是进程内调试模型，对于实际