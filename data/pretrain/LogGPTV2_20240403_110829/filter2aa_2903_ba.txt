### 3.5.2 保护模式

在保护模式下，中断和异常处理的核心数据结构是中断描述符表（Interrupt Descriptor Table, IDT）。IDT与中断向量表（IVT）类似，但在格式和特性上有显著差异。

#### IDT的位置和寄存器
- **位置灵活性**：与IVT的固定位置不同，IDT的位置可以变化。CPU通过一个专门的寄存器IDTR来描述IDT的位置和长度。
- **IDTR寄存器**：IDTR寄存器共有48位，高32位表示IDT的基地址，低16位表示IDT的长度（limit）。
- **专用指令**：为了访问IDTR寄存器，引入了两条专用指令：
  - `LIDT`（Load IDT）：将操作数指定的基地址和长度加载到IDTR寄存器中。
  - `SIDT`（Store IDT）：将IDTR寄存器的内容写入内存变量中。
- **权限控制**：`LIDT`和`SIDT`指令只能在实模式或保护模式的高特权级（Ring 0）下执行，以防止低权限用户态程序破坏IDT。

#### IDT的初始化
- **系统软件初始化**：通常，操作系统或BIOS固件在系统初始化阶段准备好中断处理例程和IDT，并通过IDTR寄存器告知CPU。
- **Windows中的IDT初始化**：
  - **初始建立**：由Windows系统的加载程序（如NTLDR或WinLoad）在实模式下完成。加载程序首先关闭中断处理（使用CLI指令），然后通过`LIDT`指令将IDT的位置和长度信息加载到CPU中。
  - **切换到保护模式**：加载程序将CPU从实模式切换到保护模式，并将执行权移交给NT内核的入口函数`KiSystemStartup`。
  - **内核调整**：内核中的处理器初始化函数通过`SIDT`指令获取IDT的信息，进行必要的调整，并将其记录到处理器控制区域（PCR）和处理器控制块（PRCB）中。

#### 多处理器环境
- **Bootstrap Processor (BSP)**：在多处理器系统中，只有BSP在启动阶段运行。BSP完成内核初始化和执行体的阶段0初始化后，才会通过`KeStartAllProcessors`函数初始化其他处理器（APs）。
- **Application Processor (AP) 初始化**：对于每个AP，`KeStartAllProcessors`函数会为其建立单独的处理器状态区，包括IDT，并调用`KiInitProcessor`函数进行复制和修改。

#### IDT的结构
- **长度**：虽然理论上IDT的长度可变，但通常设计为包含256个表项，每个表项8字节，总长度为2KB。
- **门描述符**：IDT的每个表项是一个门描述符，用于引导CPU从一个空间到另一个空间执行。常见的门描述符有：
  - **任务门（Task-Gate）**：用于任务切换，包含选择任务状态段（TSS）的段选择子。
  - **中断门（Interrupt-Gate）**：描述中断处理例程的入口。
  - **陷阱门（Trap-Gate）**：描述异常处理例程的入口。

#### 中断和异常处理
- **任务门处理**：当发生需要任务切换的中断或异常时，CPU通过任务门找到TSS段，保存当前任务状态，设置新任务的状态，并开始执行新的任务。
- **中断门和陷阱门处理**：CPU根据门描述符中的段选择子定位到段描述符，进行一系列检查。如果目标代码段的特权级别高于当前级别，CPU会切换栈，然后将EFLAGS、CS和EIP等信息压入堆栈。

#### 示例分析
- **双误异常（Double Fault, #DF）**：#DF异常通常使用任务门处理。通过调试命令可以查看IDT表项和对应的TSS段内容，进而了解异常处理的具体过程。

通过上述优化，文本更加清晰、连贯和专业，便于读者理解和掌握保护模式下的中断和异常处理机制。