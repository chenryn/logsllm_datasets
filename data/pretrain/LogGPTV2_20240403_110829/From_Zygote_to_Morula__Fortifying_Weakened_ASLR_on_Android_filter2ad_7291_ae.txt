model independently. For each model, once the booting pro-
cess has ﬁnished, we measured the elapsed time for booting
and the size of used memory. The elapsed time for booting is
measured by capturing the timestamps of logs that signal the
completion of device boot. The size of used memory spaces
is measured by parsing /proc/meminfo, which shows the
system memory information maintained by the Linux kernel.
434
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
This process repeats ﬁve times before the average and the
standard deviation are computed.
These measurements are illustrated in Figure 8 with error
bars representing the standard deviation. We can see that
Morula has a larger overhead than Zygote before the opti-
mization techniques. This is expected because many default
system apps are launched at once during the booting pro-
cess to support the basic features of Android. For example,
com.android.phone is executed to support phone calling
features and com.android.nfc is launched to enable NFC
features. On our evaluation environment (Android 4.2), 19 apps
are started during the booting process.
The device booting time under Morula is 230% (29 sec-
onds) slower than that under Zygote (Figure 8-(a)). This is
because Morula needs more time to execute each app for DVM
initializations and address relocations, which are not required
in the Zygote model. While Morula can take advantage of the
device’s idle states to prepare Morula processes with initialized
DVM instances, this is not possible when the device is fully
occupied to process many workloads during the booting time.
Moreover, without optimization, Morula is even slower than
the Wrap model because it needs to prepare extra Morula
processes and manage communications through pipes.
For memory usage overhead (Figure 8-(b)), Morula used
269% (297 MB) more memory to boot the device than the
Zygote model. This is because Morula does not allow sharing
of resources such as relocated sections or heaps allocated by
DVM. Compared to the Wrap model, Morula shows slightly
more memory usage due to the extra Morula process.
However, once we have applied the optimization strategies,
Morula’s performance improved signiﬁcantly. For boot time,
on-demand loading and selective randomization reduce the
additional delay down to 9 seconds and 6 seconds, respectively,
compared with the boot time under the Zygote model. This
implies that each optimization technique is effective at im-
proving the boot time of a device using Morula. Especially for
selective randomization, a total of 19 default system apps are
executed at boot-time but only two require Morula processes
for individually randomized memory layouts. When both opti-
mization techniques are applied simultaneously, a device boot
under Morula outpaces a boot under Zygote by 0.4 seconds.
Though this improvement would be negligible in practice, it
shows Morula with full optimizations imposes no additional
overhead compared to Zygote. In regards to memory use, on-
demand loading and selective randomization curtail the boot-
time memory space overhead to 186 MB (168%) and 46 MB
(41%) overheads, respectively, compared to the Zygote model,
and are lower than the overhead from native Morula. When we
apply both optimizations together, Morula used 37 MB (33%)
more memory space than the Zygote model.
App Execution Performance Overheads. To see performance
impacts on executing each app on Android, we ﬁrst selected
ﬁve popular apps from Google Play. Figure 9 shows a list
of apps that we selected, including apps for social networks,
messaging, and web browsing. Each app is executed as follows.
First, an Android device is booted up with the Zygote process
creation model. Next, a system property is set to specify which
process creation model (Zygote/Wrap/Morula) will be used for
executing the app. Then, the app is automatically executed by
Package name
Twitter
Skype
Pandora
Instagram
Android browser
com.twitter.android
com.skype.android.access
com.pandora.android
com.instagram.android
com.android.browser
Ver.
4.1.2
1.3.0.2
4.4
4.0.2
4.2
Size (MB)
.apk/.dex
6.1/2.3
4.4/0.8
5.8/3.7
15.7/4.1
2.4/0.8
Fig. 9. A list of apps to evaluate app execution performance overheads
sending an Intent to the main activity class via adb terminal
interfaces, which has the same effect as a user clicking an app
icon to launch the app. Note that each process creation model is
speciﬁed after booting up the device to avoid any system-wide
effects during the booting processes and fairly compare the
app execution performance overhead across different process
creation models.
We measured two primary performance overheads in exe-
cuting apps: 1) launch time and 2) memory use. Launch time is
deﬁned as an elapsed time between the time when the activity
manager receives the app creation request and the time when
the target app is displayed on the screen. These two timing
events were measured using log messages captured via adb
terminal interfaces.
Morula aims to provide a similar quality of launch time
as the Zygote model, and Figure 10-(a) shows that Morula
successfully met this goal. For all ﬁve apps we evaluated,
Morula and Zygote show a similar launch time. Interestingly,
Morula was slightly faster than Zygote (2%), which was a neg-
ligible trade off between the extra pipeline communication time
(in Morula) and invoking fork() system call (in Zygote).
This also implies that Morula successfully precomputed the
resource initializations and address relocations ahead of time,
and these computations were not included in launch time. This
suggests that a mobile user under Morula can enjoy equivalent
launch times compared to Zygote while additionally having
randomized memory layouts. When on-demand loading is
applied on Morula, the launch time is increased 37% compared
to Zygote. This slowdown compared to Morula without the on-
demand optimization stems from the fact that Dalvik classes
need to be loaded during launch time. Launch time under the
Wrap model increases 3.52 seconds (427%) on average. This
increase was deemed unacceptable for users.
To see how much memory space is required to execute
an app, we measured private dirty for the app, which
shows the amount of RAM space that is not shared with any
other app. This private dirty would show actual memory
space solely responsible for executing an app. This information
was collected by aggregating private dirty sizes located
in /proc/pid/smaps. We captured this information after
executing each app, which is shown in Figure 10-(b). On
average, Morula uses 13.7 MB more memory compared to the
Zygote model. These memory costs were mostly due to: 1)
address relocations and 2) DVM’s private heap. Since Morula
randomizes address layouts, all relative-addressing pointers
should be relocated. Thus, memory pages with such pointers
cannot be shared with other apps, and these will be counted as
private dirty pages. In addition, Morula always creates
a new DVM instance for executing an app, and this new DVM
instance requires allocating its own private heap to maintain
435
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
8
7
6
5
4
3
2
1
0
)
s
d
n
o
c
e
s
(
e
m
i
t
h
c
n
u
a
L
Zygote
Wrap
Morula (no opt)
Morula (on-demand load)
Twitter
Skype
Pandora
Instagram
Android browser
)
B
M
(
e
z
s
i
y
t
r
i
d
e
a
v
i
r
t
P
60
50
40
30
20
10
0
Zygote
Wrap
Morula (no opt)
Morula (on-demand load)
Twitter
Skype
Pandora
Instagram
Android browser
(a) A launch time
(b) Memory uses
Fig. 10.
Per application execution performance overhead: (a) A launch time to execute an app using different process creation models. The launch time
shows how long a user needs to wait until the app is displayed on the screen after executing the app. Compared to the Zygote model, on average Morula is 5
milliseconds (0.7%) faster than Zygote while Wrap slows down 3.52 seconds (427%). After applying the on-demand loading optimization, it slows down 0.30
seconds (37%); (b) Memory uses measured with the private dirty size. Morula uses 13.7 MB (85%) more memory spaces compared to Zygote. After on-demand
loading optimization, 10.8 MB (68%) more memory spaces were used.
VM execution contexts and other resources. However, since
the Zygote model simply forks the existing Zygote process to
execute an app, it does not have these memory costs. When
we apply the on-demand loading optimization, Morula uses
10.8 MB more memory on average, which is 2.9 MB less than
Morula before the optimization. This memory saving results
from not loading unnecessary Dalvik classes. Compared with
the Wrap model, Morula shows similar memory costs because
these two models are the same in terms of memory usage per
app.
Note that the memory usage difference between Zygote and
Morula stays the same across all ﬁve apps. This is because
the memory difference between Morula and Zygote are due
to additional the process initialization steps in Morula. This
suggests that Morula’s memory use overhead is independent
of a speciﬁc app’s features, and devices deploying Morula
would have ﬁxed memory costs around 13.7 MB to execute
each app4. Considering recent mobile device trends providing
more than 2 GB RAM [23], this static memory cost for running
an app should not be of signiﬁcant concern to guarantee
ASLR security. For low-end devices having less than 512
MB RAM, however, this cost would not be acceptable. In
this case, selective randomization can be applied with proper
understanding of its security trade-offs (see Section VI).
Battery Consumption. Battery life is an important resource
for mobile devices. Since Morula clearly performs more com-
putations than the Zygote process creation model, Morula
should consume more battery power than the Zygote model.
We made the following measurements to determine how much
more power is consumed by Morula. First, we booted our
device with the Zygote process creation model and fully
charged the battery. Then,
the power cable was detached
and the Android web browser (com.android.browser)
was executed every 10 seconds. We then booted our de-
vice using the Morula process creation model and per-
formed the same executions of the Android web browser
under this system. For both measurements, we gathered cur-
rent battery capacity over time by reading the contents of
/sys/class/power_supply/battery/capacity.
4It is possible to further reduce this ﬁxed memory cost by having apps share
the VM or heap, but it should be carefully done as sharing such heaps may
not be secure (e.g., OpenSSL’s PRNG states initialized by Zygote [27]).
)
%
(
y
t
i
c
a
p
a
c
y
r
e
t
t
a
B
100
95
90
85
80
0
Zygote
Morula
100
200
300
400
500
Number of executions
Fig. 11. Remaining battery life over the number of application executions.
Morula requires additional computations compared to Zygote. We executed
the Android web browser every 10 seconds and estimated the battery life for
both Zygote and Morula. Morula imposes 0.5% extra battery consumption in
the most active use case, which we consider negligible overhead.
Figure 11 shows battery capacity vs. the number of ex-
ecutions while plotting linear ﬁt as a solid line. The ﬁt line
indicates that there will be 0.5% more power consumption if
the user executes an app 100 times. We believe that most users
would not launch an app more than 100 times between charges,
thus they should not notice the increase in power consumption
using Morula.
C. Compatibility Tests
To show Morula still meets the requirements of a compat-
ible Android platform, we ran the Android Compatibility Test
Suite (CTS) distributed by Google [5]. CTS offers compre-
hensive unit tests on various Android modules and functions.
We ran system and security related test packages as shown
in Figure 12. Among the 4,693 test cases we ran using CTS
(version 4.2 r4), Morula passed 4,686 cases. Both Zygote and
Morula failed on the same 7 test cases, and these were not
related to either of the process creation models; app failed
two cases because of the incompatibility of camera and GPS
device drivers we installed, permission2 failed three cases
because our testing device cannot send SMS, security and
appsecurity failed one case, respectively, because testing
units had bugs in packaging signatures [7, 8]. This implies that
436
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:58:51 UTC from IEEE Xplore.  Restrictions apply. 
modiﬁcations to Android to implement Morula do not break
Android compatibility, and we believe Morula is quite ready
to be used for Android end-users.
Test package
#Tests
#Failed
Zygote Morula
accessibility
accounts
admin
app
dalvik
libcore
database
os
permission
permission2
security
appsecurity
25
28
12
297
51
3510
261
300
149
15
37
8
0
0