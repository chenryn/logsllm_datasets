   }
在上面的例子中，假如 sizeof(int)
 为4 字节，那么，➊处的第一个数组访问，访问的是数组中第80 字节位置的整数值；而➋处的第二个数组访问，则访问的是数组中偏移量为 0、4、8…96字节位置的连续整数值。在编译时，第一个数组访问的偏移量可通过 20×4
 计算出来。多数情况下，第二个数组访问的偏移量必须在运行时计算，因为循环计数器 i
 的值在编译时并不固定。因此，每经历一次循环，都必须计算 i×4
 的结果，以确定具体的偏移量。最终，访问数组元素的方式，不仅取决于所使用索引的类型，而且取决于数组在程序的内存空间中的位置。
1. 全局分配的数组
如果一个数组在程序的全局数据区内分配（例如，在.data 或.bss 节），编译器在编译时可获知该数组的基址。由于基址固定，编译器可以计算出使用固定索引访问的任何数组元素的固定地址。以下面这个简单的程序为例，它同时使用固定偏移量和可变偏移量访问一个全局数组：
int global_array[3];  
int main() {  
   int idx = 2;  
   global_array[0] = 10;  
   global_array[1] = 20;  
   global_array[2] = 30;  
   global_array[idx] = 40;  
}
这个程序的反汇编代码清单为：
.text:00401000 _main             proc near  
.text:00401000  
.text:00401000 idx               = dword ptr -4  
.text:00401000  
.text:00401000                   push    ebp  
.text:00401001                   mov     ebp, esp  
.text:00401003                   push    ecx  
.text:00401004                   mov     [ebp+idx], 2  
.text:0040100B                ➊  mov     dword_40B720, 10  
.text:00401015                ➋  mov     dword_40B724, 20  
.text:0040101F                ➌  mov     dword_40B728, 30  
.text:00401029                   mov     eax, [ebp+idx]  
.text:0040102C                ➍  mov     dword_40B720[eax*4], 40  
.text:00401037                   xor     eax, eax  
.text:00401039                   mov     esp, ebp  
.text:0040103B                   pop     ebp  
.text:0040103C                   retn  
.text:0040103C _main             endp  
尽管这个程序只有一个全局变量，但➊ 、➋和➌处的反汇编行似乎表明，它使用了 3 个全局变量。➍处对偏移量的计算（eax×4
 ）是暗示全局数组 dword_40B720
 存在的唯一线索，不过，数组的名称与➊处的全局变量的名称相同。
基于IDA 分配的哑名，我们知道，全局数组由从地址 0040B720
 开始的12 个字节组成。在编译过程中，编译器使用了固定索引（0 、1 、2 ）来计算数组中对应元素的具体地址（0040B720
 、0040B724
 和0040B728
 ），它们使用➊、➋和➌处的全局变量来引用。使用上一章讨论的 IDA 数组104 第8 章 数据类型与数据结构格式化操作（Edit ▶Array命令），可将 dword_40B720
 转换成一个三元素数组，从而得到下面的反汇编行。注意，这种特殊的格式化体现了数组中偏移量的使用：
.text:0040100B                 mov     dword_40B720, 10  
.text:00401015                 mov     dword_40B720+4, 20  
.text:0040101F                 mov     dword_40B720+8, 30  
在这个例子中，有两点需要注意。第一，使用常量索引访问全局数组时，在对应的反汇编代码清单中，对应的数组元素将以全局变量的形式出现。换句话说，反汇编代码清单基本上不提供任何数组存在的证据。第二，使用可变索引值将带领我们来到数组的开头，因为在计算要访问的数组元素的具体地址时，我们需要用数组的基址加上相应的偏移量，这时基址即呈现出来（如➍处所示）。➍处的计算提供了另外一条有关数组的关键信息。通过观察与数组索引相乘的那个数（这里为 4），我们知道了数组中各元素的大小（不是类型）。
2. 栈分配的数组
如果数组是作为栈变量分配的，那访问数组会有何不同呢？凭直觉，我们认为这肯定会有所不同，因为编译器在编译时无法获得绝对地址，而且即使是使用常量索引的访问也必须在运行时进行某种计算。但实际上，编译器几乎以完全相同的方式处理栈分配的数组和全局分配的数组。
以下面这个使用一个小型栈分配的数组的程序为例：
int main() {  
   int stack_array[3];  
   int idx = 2;  
   stack_array[0] = 10;  
   stack_array[1] = 20;  
   stack_array[2] = 30;  
   stack_array[idx] = 40;  
}
在编译时，stack_array
 的地址未知，因此，编译器无法像在前面的全局数组例子中一样，预先计算出 stack_array[1]
 的地址。通过分析这个函数的反汇编代码清单，我们了解到编译器如何访问栈分配的数组：
.text:00401000 _main             proc near  
.text:00401000  
.text:00401000 var_10            = dword ptr -10h  
.text:00401000 var_C             = dword ptr -0Ch  
.text:00401000 var_8             = dword ptr -8  
.text:00401000 idx               = dword ptr -4  
.text:00401000  
.text:00401000                   push    ebp  
.text:00401001                   mov     ebp, esp  
.text:00401003                   sub     esp, 10h  
.text:00401006                   mov     [ebp+idx], 2  
.text:0040100D                ➊  mov     [ebp+var_10], 10  
.text:00401014                ➋  mov     [ebp+var_C], 20  
.text:0040101B                ➌  mov     [ebp+var_8], 30  
.text:00401022                   mov     eax, [ebp+idx]  
.text:00401025                ➍  mov     [ebp+eax*4+var_10], 40  
.text:0040102D                   xor     eax, eax  
.text:0040102F                   mov     esp, ebp  
.text:00401031                   pop     ebp  
.text:00401032                   retn  
.text:00401032 _main             endp
和全局数组例子一样，这个函数似乎也使用了 3 个变量（var_10
 、var_C
 和var_8
 ），而不是一个包含3 个整数的数组。根据➊、➋和➌处使用的常量，我们得知，函数似乎引用的是局部变量，但实际上它引用的是 stack_array
 数组的3 个元素，该数组的第一个元素位于 var_10
 （内存地址最低的局部变量）所在的位置。
为理解编译器如何引用数组中的其他元素，首先看编译器如何引用 stack_array[1]
 ，它在数组中的4 字节位置，或者在 var_10
 之后的4 字节位置。在栈帧里，编译器选择分配ebp-0x10 处的stack_array
 。编译器知道，stack_array[1]
 的地址为ebp–0x10+4
 （可简化为 ebp–0x0C
 ）。结果，IDA 将其作为局部变量引用显示。最终，与全局分配的数组类似，使用常量索引值会隐藏有栈分配的数组存在这一事实。唯有➍处的数组访问表明，var_10
 是数组中的第一个元素，而不是一个简单的整数变量。此外，➍处的反汇编代码清单也有助于我们得出结论：数组中各元素的大小为4 字节。
因此，编译器处理栈分配的数组和处理全局分配的数组的方式非常类似。但是，从栈分配的数组的反汇编代码清单中，我们还是可以得到其他一些信息。根据栈中 idx
 的位置可以推断出，以var_10
 开始的数组最多包含 3 个元素（否则，它将覆盖 idx
 ）。如果你是一名破解程序开发人员，这些信息可能极其有用，据此可以确定，要使该数组溢出，并破坏其后的数据，到底需要在数组中填充多少数据。
3. 堆分配的数组
堆分配的数组是使用一个动态内存分配函数（如 C 中的mallo
 c或C++ 中的new
 ）分配的。从编译器的角度讲，处理堆分配的数组的主要区别在于，它必须根据内存分配函数返回的地址值，生成对数组的所有引用。为方便比较，我们以下面这个函数为例，它在程序堆中分配了一个小型数组：
int main() {  
   int *heap_array = (int*)malloc(3 * sizeof(int));  
   int idx = 2;  
   heap_array[0] = 10;  
   heap_array[1] = 20;  
   heap_array[2] = 30;  
   heap_array[idx] = 40;  
}
通过研究下面的反汇编代码清单，我们发现它与前面两个代码段的一些相似之处和不同之处：
.text:00401000 _main      proc near  
.text:00401000  
.text:00401000 heap_array      = dword ptr -8  
.text:00401000 idx             = dword ptr -4  
.text:00401000  
.text:00401000            push    ebp  
.text:00401001            mov     ebp, esp  
.text:00401003            sub     esp, 8  
.text:00401006          ➎ push    0Ch             ; size_t  
.text:00401008            call    _malloc  
.text:0040100D            add     esp, 4  
.text:00401010            mov     [ebp+heap_array], eax  
.text:00401013            mov     [ebp+idx], 2  
.text:0040101A            mov     eax, [ebp+heap_array]  
.text:0040101D          ➊ mov     dword ptr [eax], 10  
.text:00401023            mov     ecx, [ebp+heap_array]  
.text:00401026          ➋ mov     dword ptr [ecx+4], 20  
.text:0040102D            mov     edx, [ebp+heap_array]  
.text:00401030          ➌ mov     dword ptr [edx+8], 30  
.text:00401037            mov     eax, [ebp+idx]  
.text:0040103A            mov     ecx, [ebp+heap_array]  
.text:0040103D          ➍ mov     dword ptr [ecx+eax*4], 40  
.text:00401044            xor     eax, eax  
.text:00401046            mov     esp, ebp  
.text:00401048            pop     ebp  