故障的可能是磁盘本身、磁盘的物理连接（线）、磁盘控制器、I/O
总线或磁盘连接的CPU。结果，除双通道的控制器之外，每个磁盘
都有物理的备份（至少在理论上），而且它也是双通道并连接到两
个不同的控制器，这两个控制器都连接到相同的两个CPU。在任何
时候只有一个CPU可能访问其中某个控制器，这一约束保留了下
来，但是，两个CPU分别拥有这两个控制器中的一个是有可能的。
从性能的观点来看这是不适当的。
1078
---
## Page 1080
图8-1展示了一个典型的配置：正如灰色高亮的线路所示，系统磁盘
$SYSTEM的I/O过程通过CPUO和第一个磁盘控制器访问
SSYSTEM，而另一个连接到相同两个控制器的磁盘SDATA的IO过
程通过CPU1和第二个磁盘控制器访问SDATA。CPUO"拥有"第一个
控制器，而CPU1“拥有”第二个控制器。如果CPU0出故障，CPU1
中$SYSTEM的备份的I/O过程会接管并夺走这个控制器的拥有权，
然后继续处理。如果第二个磁盘控制器出故障，SDATA的I/O过程不
能使用第一个磁盘控制器，因为它属于CPU0，所以，这个I/O过程
首先会进行主切换，在切换之后，主I/O过程会在CPU0中运行。它
然后通过和SSYSTEM相同的路径访问SDATA。
总之，理论上来说就是如此。实际上，磁盘和驱动器是很贵的，许
多人以降级模式运行他们的一些磁盘，不准备双重的驱动器硬件。
这也会如你预料的那样运行，但是，当然也不存在任何容错能力：
事实上，其中的一些磁盘已经出故障了。
8.7进程结构
Guardian是一个微核系统：除了低级别的中断处理器（一个单独的
过程，IOINTERRUPT）和一些非常低级别的代码之外，所有的系统
服务都由运行在系统代码和数据空间中的系统进程处理。
比较重要的进程有：
系统监控程序，每个CPU中的PIDO，负责启动和停止其他进程，
还负责其他像返回状态信息、生成硬件错误信息和维护时间这样的
各种各样的任务。
内存管理器，每个CPU中的PID1，负责虚拟内存系统的I/O。
I/O进程，负责控制I/O设备。系统中无论什么地方对I/O设备的访问
都通过它专用的I/O进程。I/O控制器连接到两个CPU，所以，每个
设备都控制于运行在这些CPU中的一对I/O进程：完成工作的主进程
和一个备份进程，备份进程跟踪主进程状态并等待主进程出故障或
等待主进程主动把控制权移交给它（“主切换”）。
选择主CPU中的主要问题是CPU负载，CPU负载必须手动平衡。例
如，假设你在CPU2和CPU3之间连接着6个设备，你可能会把其中
的3个主进程放在CPU2中，另外3个主进程放在CPU3中。
1079
---
## Page 1081
进程对
进程对的概念不限于I/O进程。它是这种容错方式的基础之一。要理
解它们的工作方式，我们必须理解消息传入系统的方式。
8.8消息系统
正如我们看到的那样，T/16和其他传统计算机之间最大的区别在于
没有一个组件是必需的。系统的任何部分都可以出故障而不会引起
系统崩溃。这使得它比传统的共享存储器多处理器机器更像一个网
络。
这对于操作系统设计来说具有深远的意义。一个磁盘可以任意连接
到2～16个CPU。其他的CPU如何访问它？现代的网络使用NFS或
CIFS等运行在网络协议之上的文件系统来处理这种特殊的情况。但
是，在T/16上这不是特殊情况；这是标准，
不仅文件系统需要这种通信方式：所有进程间的通信也都需要它。
Tandem针对这个问题的解决方法是在操作系统中以非常低级别运行
消息系统。用户程序不能直接访问它。
消息系统在进程之间传输数据，在许多方面它类似于后面的TCP或
UDP。消息的发起者称为请求者，而目标则称为服务器。[!1
进程之间所有的通信都通过消息系统，即使在相同的CPU中。下列
的数据结构实现了通信功能：
每个消息都联合了两个链接控制块（LinkControlBlock,LCB），一
个用于请求者，一个用于服务器。这些小的数据对象设计成适合单
个IPB包。如果需要能比LCB容纳更多数据，那就会附上一个单独的
缓冲。
为了发起一次传输，请求者调用过程link。这个程序把消息发给服
务器进程并让这个LCB在它的消息队列中排队。此时，服务器进程
还没有参与进来，但发送器会用一个链接请求（LREQ，linkrequest）
事件唤醒这个过程。
在请求者端，对link的调用会立即返回信息以识别这个请求：请求
者不必等待服务器处理这个请求。
1080
---
## Page 1082
经过若干时间，服务器过程发现了这个LREQ事件并调用监听
listen，监听从消息队列中取走第一个LCB。
如果有一个缓冲与这个LCB关联了并含有传给这个服务器的数据，
服务器会调用readlink来读入数据。
服务器然后执行任何必需的进程，接着调用writelink响应这个消
息，仍然有可能包含一个数据缓冲。这会通过LDONE来唤醒请求
者。
请求者发现这个LDONE事件，检查结果，然后通过调用breaklink来
结束这次交互，断开链接会释放相关的资源。
只不过内核的其他部分直接使用消息系统；文件系统用它和I/O设备
及其他进程进行通信。进程间通信的处理方式儿乎和IO完全相同，
而且，它也用于支持容错进程对。
这种方式本质上是异步的和多线程的：在调用link后，请求者继续
它的操作。许多请求者可以把请求发给同一个服务器，即使当服务
器不处理请求的时候。服务器不必立即响应链接请求。当服务器答
复时，请求者不必立即确认这个答复。相反，每次当进程可用时会
由一个它可以处理的事件唤醒。
8.8.1回顾一下进程对
容错的要求之一是单个故障不能导致系统崩溃。我们已经看到I/O进
程通过使用进程对解决了这个问题，而且很明显，这也是处理CPU
故障的常规方式。因此Guardian支持用户级进程对的创建。
所有进程对都以一个主进程和一个备份进程的方式运行。主进程进
行处理，同时备份进程处于“热备份”状态。主进程时常通过一个名
为checkpointing的进程更新备份进程的内存映像。如果主进程出故
障或主动放弃控制，备份进程会从最后的检查点开始继续。许多程
序实现了checkpointing，它是由消息系统执行的：
消息。它一直调用检查监视器，直到主进程出故障或放弃控制。在
这段时期，这个CPU的唯一用处是和消息系统通信以更新它的数据
空间，以及打并和关闭消息系统以更新文件信息。
1081
---
## Page 1083
主进程调用检查点把它的部分数据空间和文件信息复制给备份进
程。程序员可以决定哪些数据和文件在什么时候应该复制到检查
点。
·主进程对关于文件打开的检查点信息调用checkopen。这实际上产
生一个来自备份进程的调用来打开。1/O进程认出这是一个来自备份
进程的打并请求并把它和主进程的打并请求同等处理。
主进程对关于文件关闭的检查点信息调用checkclose。这实际上产
生一个来自备份请求的调用来关闭。
主进程可能会调用checkswitch来主动释放对进程对的控制。当发生
这种情况时，主进程和备份进程互换角色。
当备份进程从检查监视器返回时，它已经变为新的主进程。它回到
原主进程最后调用checkpoint的位置，而不是回到它被调用的位置。
然后，它从这个位置开始继续处理。一般而言，一个进程对的生命
周期如表8-1所示。
表8-1：一个进程对的生命周期
主进程
备份进程
进行初始化
调用newprocess来创建备份进程
进行初始化
调用checkmonitor米接收检查点数据
调用checkpoint
在checkmonitor中等待
调用checkopen
从checkmonitor中调用open
处理
在checkmonitor中等待
调用checkpoint
在checkmonitor中等待
1082
---
## Page 1084
（续）
主进程
备份进程
处理
在checkmonitor中等待
主动切换：调用checkswitch
接管
调用checkmonitor来接收checkpoint数据
处理
在checkmonitor中等待
调用checkpoint
在checkmonitor中等待
处理
在checkmonitor中等待
调用checkpoint
在checkmonitor中等待
CPU出故障
接管
（没用了）
处理
11在功能方面，这些名字非常接近于现在的术语：客户端和服务
器。
8.8.2同步
这种方式是非常可靠的，它可以提供比纯粹的锁步（lockstep）方式
更好的可靠性。在一些程序错误中，特别在竞态条件（race
condition）下，以锁步方式运行的进程会遇到完全相同的程序错
误，还会崩溃。采用连接比较松散的方式通常可以避免完全相同的
情形并使程序继续执行。
有两个问题不是非常明显：
·checkpointing是CPU密集（CPU-intensive）的。一个进程的检查点
设置应该多频繁？在检查点设置应该处理哪些数据？这些决定留给
程序员。如果他做错了或忘记在检查点处理重要的数据，或做的时
间不恰当，那么备份进程中的内存映像将会不协调，备份进程就可
能出故障。
如果主进程执行了外部可见的操作，例如在记入检查点之后但在出
故障之前执行了I/O操作，备份进程在接管之后会重复这些操作。这
可能会导致数据异常。
实际上，检查点选取异常的问题还没有证实是一个问题，但是，重
复I/O的确是一个问题。系统通过给每个I/O请求关联一个序号（称
为同步ID）来解决这个问题。I/O进程记录了这些请求，如果它收到
一个重复的请求，就简单地返回这个请求第一次调用的完成状态。
1083
---
## Page 1085
8.8.3网络：EXPAND和FOX