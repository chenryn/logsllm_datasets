.PP
.Vb 3
\&    use strict;
\&    use POSIX qw(:termios_h);
\&    my ($term, $oterm, $echo, $noecho, $fd_stdin);
.Ve
.PP
.Vb 4
\&    $fd_stdin = fileno(STDIN);
\&    $term     = POSIX::Termios->new();
\&    $term->getattr($fd_stdin);
\&    $oterm     = $term->getlflag();
.Ve
.PP
.Vb 2
\&    $echo     = ECHO | ECHOK | ICANON;
\&    $noecho   = $oterm & ~$echo;
.Ve
.PP
.Vb 5
\&    sub cbreak {
\&        $term->setlflag($noecho);  # ok, so i don't want echo either
\&        $term->setcc(VTIME, 1);
\&        $term->setattr($fd_stdin, TCSANOW);
\&    }
.Ve
.PP
.Vb 5
\&    sub cooked {
\&        $term->setlflag($oterm);
\&        $term->setcc(VTIME, 0);
\&        $term->setattr($fd_stdin, TCSANOW);
\&    }
.Ve
.PP
.Vb 7
\&    sub readkey {
\&        my $key = '';
\&        cbreak();
\&        sysread(STDIN, $key, 1);
\&        cooked();
\&        return $key;
\&    }
.Ve
.PP
.Vb 1
\&    END { cooked() }
.Ve
.PP
.Vb 1
\&    1;
.Ve
.Sh "How do I check whether input is ready on the keyboard?"
.IX Subsection "How do I check whether input is ready on the keyboard?"
The easiest way to do this is to read a key in nonblocking mode with the
Term::ReadKey module from \s-1CPAN\s0, passing it an argument of \-1 to indicate
not to block:
.PP
.Vb 1
\&    use Term::ReadKey;
.Ve
.PP
.Vb 1
\&    ReadMode('cbreak');
.Ve
.PP
.Vb 5
\&    if (defined ($char = ReadKey(-1)) ) {
\&        # input was waiting and it was $char
\&    } else {
\&        # no input was waiting
\&    }
.Ve
.PP
.Vb 1
\&    ReadMode('normal');                  # restore normal tty settings
.Ve
.Sh "How do I clear the screen?"
.IX Subsection "How do I clear the screen?"
If you only have do so infrequently, use \f(CW\*(C`system\*(C'\fR:
.PP
.Vb 1
\&    system("clear");
.Ve
.PP
If you have to do this a lot, save the clear string
so you can print it 100 times without calling a program
100 times:
.PP
.Vb 2
\&    $clear_string = `clear`;
\&    print $clear_string;
.Ve
.PP
If you're planning on doing other screen manipulations, like cursor
positions, etc, you might wish to use Term::Cap module:
.PP
.Vb 3
\&    use Term::Cap;
\&    $terminal = Term::Cap->Tgetent( {OSPEED => 9600} );
\&    $clear_string = $terminal->Tputs('cl');
.Ve
.Sh "How do I get the screen size?"
.IX Subsection "How do I get the screen size?"
If you have Term::ReadKey module installed from \s-1CPAN\s0,
you can use it to fetch the width and height in characters
and in pixels:
.PP
.Vb 2
\&    use Term::ReadKey;
\&    ($wchar, $hchar, $wpixels, $hpixels) = GetTerminalSize();
.Ve
.PP
This is more portable than the raw \f(CW\*(C`ioctl\*(C'\fR, but not as
illustrative:
.PP
.Vb 10
\&    require 'sys/ioctl.ph';
\&    die "no TIOCGWINSZ " unless defined &TIOCGWINSZ;
\&    open(TTY, "+autoflush(1);
.Ve
.Sp
As mentioned in the previous item, this still doesn't work when using
socket I/O between Unix and Macintosh.  You'll need to hard code your
line terminators, in that case.
.IP "non-blocking input" 4
.IX Item "non-blocking input"
如果你正在做一个阻塞的 read() 或 sysread() 动作，则你需要安排一个闹 铃把手或提供一个逾时设定（参看 alarm）。如果你是用非阻挡式的 开档，那么就要配合非阻挡性的读取，也就是说得用到4 个参数的 select() 来确 定此装置的 输出／入 是否已准备好了（参考 perlfunc 中的 select ）。
.PP
While trying to read from his caller-id box, the notorious Jamie Zawinski
, after much gnashing of teeth and fighting with sysread,
sysopen, \s-1POSIX\s0's tcgetattr business, and various other functions that
go bump in the night, finally came up with this:
.PP
.Vb 13
\&    sub open_modem {
\&        use IPC::Open2;
\&        my $stty = `/bin/stty -g`;
\&        open2( \e*MODEM_IN, \e*MODEM_OUT, "cu -l$modem_device -s2400 2>&1");
\&        # starting cu hoses /dev/tty's stty settings, even when it has
\&        # been opened on a pipe...
\&        system("/bin/stty $stty");
\&        $_ = ;
\&        chomp;
\&        if ( !m/^Connected/ ) {
\&            print STDERR "$0: cu printed `$_' instead of `Connected'\en";
\&        }
\&    }
.Ve
.Sh "如何解码加密的口令文件？"
.IX Subsection "How do I decode encrypted password files?"
花大把大把的钱去买破解专用的硬体，这会让你成为焦点话题。
.PP
说正经的，如果是碰到 Unix 密码档的话就不行 - Unix 密码系统用的是单向的加 密函数。像 Crack 之类的程式可以暴力地（并聪明地）试着猜出密码，但无法 （也不能）保证速战速决。
.PP
如果你耽心的是使用者选取不良的密码，你应该在使用者换密码时主动审核（例如说修改 \fIpasswd\fR\|(1) 程式加入这个功能）。
.Sh "如何在后台开启进程？"
.IX Subsection "How do I start a process in the background?"
Several modules can start other processes that do not block
your Perl program.  You can use IPC::Open3, Parallel::Jobs,
IPC::Run, and some of the \s-1POE\s0 modules.  See \s-1CPAN\s0 for more
details.
.PP
你可以使用：
.PP
.Vb 1
\&    system("cmd &")
.Ve
.PP
或是用 fork，像 perlfunc 中的 fork 里写的（在 perlipc 里有更进一步的 范例）。如果你在 Unix 类的系统上的话，请注意以下几件事情：
.IP "\s-1STDIN\s0, \s-1STDOUT\s0, and \s-1STDERR\s0 are shared" 4
.IX Item "STDIN, STDOUT, 和 STDERR 是共享的"
主程序和背景程序（即“子”程序）共用同一个 STDIN、STDOUT 和 STDERR 档案 把手。如果两个程序想同时去读、写同一个档案把手，就可能有怪事会发生。你也 许应该替子程序关闭或重新开启这些把手。你可以用开启一个管道 (pipe) 的方法 避免这些问题（参看 open）但是在某些系统上这样做会强迫子程序 必须比父程序早死。