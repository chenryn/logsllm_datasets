    dubbo%3A%2F%2F127.0.0.1%3A20881%2Fcom.threedr3am.learn.server.boot.D
    emoService%3Factives%3D5%26anyhost%3Dtrue%26application%3Dservice-pr
    ovider%26deprecated%3Dfalse%26dubbo%3D2.0.2%26dynamic%3Dtrue%26gener
    ic%3Dfalse%26interface%3Dcom.threedr3am.learn.server.boot.DemoServic
    e%26methods%3Dhello%26pid%3D28092%26release%3D2.7.5%26retries%3D3%26
    revision%3D1.0%26side%3Dprovider%26time
    out%3D3000%26timestamp%3D1582005204823%26version%3D1.0
对其进行decode：
    dubbo://127.0.0.1:20881/com.threedr3am.learn.server.boot.DemoService
    ?actives=5&anyhost=true&application=service-provider&deprecated=fals
    e&dubbo=2.0.2&dynamic=true&generic=false&interface=com.threedr3am.le
    arn.server.boot.DemoService&methods=hello&pid=28092&release=2.7.5&re
    tries=3&revision=1.0&side=provider&timeout=
    3000&timestamp=1582005204823&version=1.0
好像并没有发现有什么异处。
在进一步对序列化和反序列化相关代码审计之后，我发现，客户端的序列化方式，居然是根据服务端的配置来选择，那么，我们是不是就对其序列化类型可控了？
在我通过对服务端序列化类型配置为原生java类型后，我发现。
    dubbo://127.0.0.1:20881/com.threedr3am.learn.server.boot.DemoService
    ?actives=5&anyhost=true&application=service-provider&deprecated=fals
    e&dubbo=2.0.2&dynamic=true&generic=false&interface=com.threedr3am.le
    arn.server.boot.DemoService&methods=hello&pid=28092&release=2.7.5&re
    tries=3&revision=1.0&serialization=java&side=provider&timeout=
    3000&timestamp=1582005204823&version=1.0
zookeeper的注册信息中，居然多出了一个配置项`serialization=java`，没错，默认情况下，这个配置是缺省的，缺省情况下，客户端会选择hessian2的序列化方式，若在注册信息中，加入该配置，客户端在读取该注册信息并连接上我们的dubbo服务后，它就选择了原生java的序列化方式了。
因此，我们就能通过追加serialization参数去自由选择客户端的序列化方式了，例如`serialization=java`，别忘了，根据dubbo协议以及源码的判断，还得把恶意响应包的头部的序列化标识id修改为原生Java的id，具体数字看：org.apache.dubbo.common.serialize.Constants
    package org.apache.dubbo.common.serialize;
    public interface Constants {
        byte HESSIAN2_SERIALIZATION_ID = 2;
        byte JAVA_SERIALIZATION_ID = 3;
        byte COMPACTED_JAVA_SERIALIZATION_ID = 4;
        byte FASTJSON_SERIALIZATION_ID = 6;
        byte NATIVE_JAVA_SERIALIZATION_ID = 7;
        byte KRYO_SERIALIZATION_ID = 8;
        byte FST_SERIALIZATION_ID = 9;
        byte NATIVE_HESSIAN_SERIALIZATION_ID = 10;
        byte PROTOSTUFF_SERIALIZATION_ID = 12;
        byte AVRO_SERIALIZATION_ID = 11;
        byte GSON_SERIALIZATION_ID = 16;
        byte PROTOBUF_JSON_SERIALIZATION_ID = 21;
    }
* * *
### 0x06 发送恶意序列化数据
既然，我们可以注册恶意服务，并且还能控制客户端的反序列化方式，那么，只要注册中心可控，我们就能畅通无阻，而且，这种打法，比打服务端更销魂，打服务端，我们得针对特定ip、port去打，若使用者更换了端口号，我们还得去扫出来，说不定就触发蜜罐了。
而这种方式，当然，注册中心的端口可能也会被定制的修改掉，但是比起dubbo，根据我的个人经验，我有理由相信概率更低。so，现在我们只要等客户端送上门就行了，哈哈，我终于理解
**rouge** 中文意指 **胭脂** 的意思了...
脚本编写，我这边以`commons-collections:commons-collections:3.2.1`的gadget为例。
依赖（这里需要特别注意Zookeeper的版本，后面等开放项目[learn-java-bug](https://github.com/threedr3am/learnjavabug)中的利用demo后，再慢慢加上其它注册中心利用的demo）
## 参考
  * [一文聊透 Dubbo 元数据中心](https://mp.weixin.qq.com/s/x5bv9cFqZ0TrqaZmBDbPng) \- Kirito