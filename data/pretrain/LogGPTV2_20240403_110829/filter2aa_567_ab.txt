interfaces to the MAC 
address of the 
authenticator
§ sets the upstream interface 
to the MAC address of the 
supplicant
Improvement: Support for Side Channel Interaction
In Duckwall’s original bypass, 
outbound ARP and IP traffic is 
initially blocked while the 
transparent bridge is initialized 
[4]:
§ Prevents us from using a 
side channel device, such 
as an LTE modem
Improvement: Bypassing Sticky MAC
Our updated implementation:
§ added a firewall exception 
that allows outbound traffic 
from our side channel 
interface only
§ allows the user to specify a 
desired egress destination 
port
Demo: Improvements to Bridge-Based 
Bypass Techniques
Introduction to MACsec and 802.1x-2010
Introduction to 802.1x-2010 and MACsec
All traditional 802.1x bypasses (hub, injection, or 
bridge based) take advantage of the same 
fundamental security issues that affect 802.1x-2004: 
[3][4][6][7]
§ The protocol does not provide encryption
§ The protocol does not support authentication on a packet-
by-packet basis
Introduction to 802.1x-2010 and MACsec
These security issues are addressed in 802.1x-
2010, which uses MACsec to provide: [7]
§ Layer 2 encryption performed on a hop-by-hop basis
§ Packet-by-packet integrity checks
Introduction to 802.1x-2010 and MACsec
Support for hop-by-hop encryption particularly 
important: [7]
§ Protects against bridge-based attacks
§ Allows network administrators with a means to inspect data 
in transit
Introduction to 802.1x-2010 and MACsec
The 802.1x-2010 protocol works in three stages: 
[7][8][9]
1. Authentication and Master Key Distribution
2. Session Key Agreement
3. Session Secure
Things to think about…
“IEEE Std 802.11 specifies media-dependent cryptographic 
methods to protect data transmitted using the 802.11 MAC 
over wireless networks. Conceptually these cryptographic 
methods can be considered as playing the same role within 
systems and interface stacks as a MAC Security Entity.” –
IEEE 802.1x-2010 Standard – Section 6.6 [9]
Parallels between MACsec and WPA
2003 – WPA1 is released
Hop-by-hop Layer 2 Encryption:
§ access point to station
Authentication provided by:
§ Extensible Authentication Protocol (EAP)
§ Pre-Shared Key (as a fallback / alternative)
Shift of focus due to WPA
Injection-based Attacks no longer possible due to Layer 2 
encryption
Focus shifts to attacking authentication mechanism
§ Pre-Shared Key (PSK) – WPA Handshake Capture and Dictionary 
Attack
§ EAP – Rogue AP attacks against weak EAP methods
2010 – 802.1x-2010 is released
Hop-by-hop Layer 2 Encryption using MACsec:
§ device to switch / switch to switch
Authentication provided by:
§ Extensible Authentication Protocol (EAP)
§ Pre-Shared Key (as a fallback / alternative)
Shift of focus due to MACsec
Bridge and injection-based attacks no longer possible due to 
Layer 2 encryption
Focus shifts to attacking authentication mechanism
§ Pre-Shared Key (PSK) – some kind of dictionary attack??? (still 
working on that)
§ EAP – attacks against weak EAP methods (main takeaway of this talk)
Defeating MACsec Using Rogue 
Gateway Attacks
Defeating MACsec Using Rogue Gateway Attacks
Most important takeaway about 802.1x-2010 (from 
an attacker’s perspective): [7]
§ It still uses EAP to authenticate devices to the network
§ EAP is only as secure as the EAP method used
Supported EAP methods:
The 802.1x-2010 standard allows any EAP method so long 
as it: [7]
§ Supports mutual authentication
§ Supports derivation of keys that are at least 128 bits in length
§ Generates an MSK of at least 64 octets
Plenty of commonly seen weak EAP methods that meet these 
requirements (EAP-PEAP, EAP-TTLS, etc).
I THINK YOU SEE
WHERE THIS IS
GOING
Our lab environment:
Option 1: MITM style bypass
Option 2: Direct Access
Let’s build a rogue device…
Step 1: Device Core
Step 2: Mechanically Assisted Bypass
FRONT
BACK
Step 2: Mechanically Assisted Bypass
Need a way of manipulating the push switch:
§ Using relays will lead to impedance issues unless you’re an 
electrical engineer (which I am certainly not…)
§ Option B: use solenoids
Step 2: Mechanically Assisted Bypass
Push Solenoid
Pull Solenoid
Step 2: Mechanically Assisted Bypass
Step 2: Mechanically Assisted Bypass
Step 3: Establish a Side Channel
Step 4: Plant the Device
Step 5: Rogue Gateway Attack
Step 6: Bait n Switch 
Demo: Defeating MACsec Using Rogue 
Gateway Attacks
Dealing With Improvements to Peripheral 
Device Security
Improvements to Peripheral Device Security
Improved 802.1x support by peripheral devices:
§ bypassing port security by looking for policy exceptions has 
become difficult
Improvements to Peripheral Device Security
Important caveat:
§ Improved adoption of 802.1x does not necessarily imply 
strong port security for peripheral devices
§ Back to EAP: most EAP methods have major security 
issues
Improvements to Peripheral Device Security
Adoption rates for secure EAP methods very poor 
across all device types:
§ Secure EAP methods are often challenging to deploy at scale
We can expect these adoption rates to be even lower for 
peripheral devices:
§ Already painful to configure
§ Not always centrally manageable through Group Policy (besides, 
is a domain joined printer really a good idea?)
Improvements to Peripheral Device Security
What this means:
§ Peripheral devices are still a viable attack vector for 
bypassing port security
EAP-MD5 Forced Reauthentication 
Attack
EAP-MD5 Forced Reauthentication Attack
EAP-MD5 is widely used to protect peripheral 
devices such as printers:
§ Easy to setup and configure
§ Still better than MAC filtering
EAP-MD5 Forced Reauthentication Attack
Leveraging what we know about how to attack EAP-MD5 and 
802.1x-2004:
1. Use bridge-based approach to place rogue device between supplicant 
and authenticator
2. Wait for the supplicant to authenticate, and sniff the EAP-MD5-
Challenge and EAP-MD5-Response when it does [13]
3. Crack credentials, connect to network using Bait n’ Switch
EAP-MD5 Forced Reauthentication Attack
One major drawback to this approach:
§ We must wait for the supplicant to reauthenticate with the switch
Realistically, this will not happen unless supplicant is 
unplugged
§ disabling a virtual network interface is not enough
§ Using mechanical splitters is an option, but the less overhead the 
better
EAP-MD5 Forced Reauthentication Attack
First two steps of the EAP authentication process: [1][2][9]
1. (optional) supplicant sends the authenticator an EAPOL-Start frame
2. The authenticator sends the supplicant an EAP-Request-Identity frame
Problem: supplicant has no way of verifying if incoming EAP-
Request-Identity frame has been sent in response to an 
EAPOL-Start.
EAP-MD5 Forced Reauthentication Attack
What this means: we can force reauthentication by sending 
an EAPOL-Start frame to the authenticator as if it came from 
the supplicant (MAC spoofing):
§ Result: authenticator will send EAP-Request-Identity frame to the 
actual supplicant, kickstarting the reauthentication process
§ Both the authenticator and supplicant believe that the other party has 
initiated the reauthentication attempt
Demo: Forced Reauthentication
EAP-MD5 Forced Reauthentication Attack
EAP-MD5 Forced Reauthentication Attack:
1. Introduce rogue device into the network between authenticator and 
supplicant
2. Start transparent bridge and passively sniff traffic
3. Force reauthentication by sending spoofed EAPOL-Start frame to 
the authenticator
4. Captured and crack EAP-MD5-Challenge and EAP-MD5-
Response
Demo: EAP-MD5 Forced 
Reauthentication Attack
EAP-MD5 Forced Reauthentication Attack
Proposed Mitigation – safety-bit in the EAP-Request-Identity 
frame:
§ set to 1 when the frame was sent in response to an EAPOL-Start frame
§ Checked when supplicant receives an EAP-Request-Identity frame
§ Authentication process aborted if safety bit set to 1 and supplicant did 
not recently issue EAPOL-Start frame
Leveraging Rogue Gateway Attacks 
Against Peripheral Devices
Rogue Gateway Attacks Against Peripheral Devices
Other commonly used weak EAP methods used by peripheral 
devices include EAP-TTLS and EAP-PEAP: [13]
§ Attacks are considerably more involved compared to EAP-MD5
§ Authentication occurs through an encrypted tunnel, so a MITM is 
necessary to capture the challenge and response [13]
Rogue Gateway Attacks Against Peripheral Devices
Solution – use Rogue Gateway Attack:
§ No mechanical splitters needed this time: attack can be 
implemented in software using transparent bridge
Step 1: Plant the Device
Step 2: Perform the Attack
Closing Thoughts
Closing Thoughts
Our contributions:
§ Rogue Gateway and Bait n Switch – Bypass 802.1x-2011 by attacking 
its authentication mechanism
§ Updated & improved existing 802.1x-2004 bypass techniques
§ EAP-MD5 Forced Reauthentication attack – improved attack against 
EAP-MD5 on wired networks
Closing Thoughts
Key takeaways (1 of 2):
§ Port security is still a positive thing (keep using it!)
§ Port security is not a substitute for a layered approach to network 
security (i.e. deploying 802.1x does not absolve you from patch 
management responsibilities)
Closing Thoughts
Key takeaways (2 of 2):
§ Benefits provided by 802.1x can be undermined due to continued use 
of EAP as authentication mechanism
§ Improved 802.1x support by peripheral device manufacturers largely 
undermined by lack of support for 802.1x-2010 and low adoptions / 
support rates for strong EAP methods
Blog post & whitepaper:
https://www.digitalsilence.com/blog/
Tool:
github.com/s0lst1c3/silentbridge
References:
[1] http://www.ieee802.org/1/pages/802.1x-2001.html
[2] http://www.ieee802.org/1/pages/802.1x-2004.html
[3] https://blogs.technet.microsoft.com/steriley/2005/08/11/august-article-802-1x-on-wired-networks-considered-harmful/
[4] https://www.defcon.org/images/defcon-19/dc-19-presentations/Duckwall/DEFCON-19-Duckwall-Bridge-Too-Far.pdf
[5] https://www.gremwell.com/marvin-mitm-tapping-dot1x-links
References:
[6]https://hackinparis.com/data/slides/2017/2017_Legrand_Valerian_802.1x_Network_Access_Control_and_Bypass_Techniques.pdf
[7] https://www.cisco.com/c/en/us/products/collateral/ios-nx-os-software/identity-based-networking-services/deploy_guide_c17-663760.html
[8] https://1.ieee802.org/security/802-1ae/
[9] https://standards.ieee.org/findstds/standard/802.1X-2010.html
[10] http://www.ieee802.org/1/files/public/docs2013/ae-seaman-macsec-hops-0213-v02.pdf
References:
[11] https://www.gremwell.com/linux_kernel_can_forward_802_1x
[12] https://www.intel.com/content/www/us/en/support/articles/000006999/network-and-i-o/wireless-networking.html
[13]http://www.willhackforsushi.com/presentations/PEAP_Shmoocon2008_Wright_Antoniewicz.pdf
[14] https://link.springer.com/content/pdf/10.1007%2F978-3-642-30955-7_6.pdf
[15] https://support.microsoft.com/en-us/help/922574/the-microsoft-extensible-authentication-protocol-message-digest-5-eap
References:
[16] https://tools.ietf.org/html/rfc3748
[17] https://code.google.com/archive/p/8021xbridge/source/default/commits
[18] https://github.com/mubix/8021xbridge
[19] https://hal.inria.fr/hal-01534313/document
[20] https://sensepost.com/blog/2015/improvements-in-rogue-ap-attacks-mana-1%2F2/
References:
[21] https://tools.ietf.org/html/rfc4017
[22] http://web.archive.org/web/20160203043946/https:/www.cloudcracker.com/blog/2012/07/29/cracking-ms-chap-v2/
[23] https://crack.sh/
[24] https://tools.ietf.org/html/rfc5216
[25] https://4310b1a9-a-93739578-s-sites.googlegroups.com/a/riosec.com/home/articles/Open-Secure-Wireless/Open-Secure-
Wireless.pdf?attachauth=ANoY7cqwzbsU93t3gE88UC_qqtG7cVvms7FRutz0KwK1oiBcEJMlQuUmpGSMMD7oZGyGmt4M2HaBhHFb07j8Gvmb_H
WIE8rSfLKDvB0AI80u0cYwSNi5ugTP1JtFXsy1yZn8-85icVc32PpzxLJwRinf2UGzNbEdO97Wsc9xcjnc8A8MaFkPbUV5kwsMYHaxMiWwTcE-
A8Dp49vv-tmk86pNMaeUeumBw_5vCZ6C3Pvc07hVbyTOsjqo6C6WpfVhd_M0BNW0RQtI&attredirects=0
References:
[26] https://txlab.wordpress.com/2012/01/25/call-home-ssh-scripts/
[27] https://txlab.wordpress.com/2012/03/14/improved-call-home-ssh-scripts/
[28] https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst3560/software/release/12-2_37_se/command/reference/cr1/cli3.html#wp1948361
[29] https://www.juniper.net/documentation/en_US/junos/topics/concept/port-security-persistent-mac-learning.html
[30] https://tools.ietf.org/html/rfc3579
References:
[31] https://tools.ietf.org/html/rfc5281