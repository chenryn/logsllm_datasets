                    break;
    ...
            default:
                    return -ENOTTY;
            }
            return err;
    }
在 command 为下面几个case 里都会调用 qcedev_check_sha_params 函数对用户态传入的数据进行合法性校验
QCEDEV_IOCTL_SHA_INIT_REQ
QCEDEV_IOCTL_SHA_UPDATE_REQ
QCEDEV_IOCTL_SHA_FINAL_REQ
QCEDEV_IOCTL_GET_SHA_REQ
    static int qcedev_check_sha_params(struct qcedev_sha_op_req *req,
                                                    struct qcedev_control *podev)
    {
            uint32_t total = 0;
            uint32_t i;
    ...
            /* Check for sum of all src length is equal to data_len  */
            for (i = 0, total = 0; i entries; i++) {
                    if (req->data[i].len > ULONG_MAX - total) {
                            pr_err("%s: Integer overflow on total req buf lengthn",
                                    __func__);
                            goto sha_error;
                    }
                    total += req->data[i].len;
            }
            if (total != req->data_len) {
                    pr_err("%s: Total src(%d) buf size != data_len (%d)n",
                            __func__, total, req->data_len);
                    goto sha_error;
            }
            return 0;
    sha_error:
            return -EINVAL;
    }
qcedev_check_sha_params 对用户态传入的数据做多种校验，其中一项是对传入的数据数组挨个累加长度，并对总长度做整数溢出校验
问题在于， req->data[i].len 是 uint32_t 类型， 总长度 total 也是 uint32_t 类型，uint32_t 的上限是
UINT_MAX, 而这里使用了 ULONG_MAX 来做校验
    usr/include/limits.h
    /* Maximum value an `unsigned long int' can hold.  (Minimum is 0.)  */
    #  if __WORDSIZE == 64
    #   define ULONG_MAX    18446744073709551615UL
    #  else
    #   define ULONG_MAX    4294967295UL
    #  endif
注意到：
32 bit 系统， UINT_MAX = ULONG_MAX
64 bit 系统， UINT_MAX ！= ULONG_MAX
所以这里的整数溢出校验 在64bit系统是无效的，即在 64bit 系统，req->data
数组项的总长度可以整数溢出，这里还无法确定这个整数溢出能造成什么后果。
下面看看有何影响，我们选取 case QCEDEV_IOCTL_SHA_UPDATE_REQ
    long qcedev_ioctl(struct file *file, unsigned cmd, unsigned long arg)
    {
    ...     
            case QCEDEV_IOCTL_SHA_UPDATE_REQ:
                    {
                    struct scatterlist sg_src;
                    if (!access_ok(VERIFY_WRITE, (void __user *)arg,
                                    sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    if (__copy_from_user(&qcedev_areq.sha_op_req,
                                            (void __user *)arg,
                                            sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    if (qcedev_check_sha_params(&qcedev_areq.sha_op_req, podev))
                            return -EINVAL;
                    qcedev_areq.op_type = QCEDEV_CRYPTO_OPER_SHA;
                    if (qcedev_areq.sha_op_req.alg == QCEDEV_ALG_AES_CMAC) {
                            err = qcedev_hash_cmac(&qcedev_areq, handle, &sg_src);
                            if (err)
                                    return err;
                    } else {
                            if (handle->sha_ctxt.init_done == false) { 
                                    pr_err("%s Init was not calledn", __func__);
                                    return -EINVAL;
                            }
                            err = qcedev_hash_update(&qcedev_areq, handle, &sg_src);
                            if (err)
                                    return err;
                    }
                    memcpy(&qcedev_areq.sha_op_req.digest[0],
                                    &handle->sha_ctxt.digest[0],
                                    handle->sha_ctxt.diglen);
                    if (__copy_to_user((void __user *)arg, &qcedev_areq.sha_op_req,
                                            sizeof(struct qcedev_sha_op_req)))
                            return -EFAULT;
                    }
                    break;
    ...
            return err;
    }
qcedev_areq.sha_op_req.alg 的值也是应用层控制的，当等于 QCEDEV_ALG_AES_CMAC 时，进入函数
qcedev_hash_cmac
     868 static int qcedev_hash_cmac(struct qcedev_async_req *qcedev_areq,
     869                                         struct qcedev_handle *handle,
     870                                         struct scatterlist *sg_src)
     871 {
     872         int err = 0;
     873         int i = 0;
     874         uint32_t total;
     875 
     876         uint8_t *user_src = NULL;
     877         uint8_t *k_src = NULL;
     878         uint8_t *k_buf_src = NULL;
     879 
     880         total = qcedev_areq->sha_op_req.data_len;
     881 
     882         /* verify address src(s) */
     883         for (i = 0; i sha_op_req.entries; i++)
     884                 if (!access_ok(VERIFY_READ,
     885                         (void __user *)qcedev_areq->sha_op_req.data[i].vaddr,
     886                         qcedev_areq->sha_op_req.data[i].len))
     887                         return -EFAULT;
     888 
     889         /* Verify Source Address */
     890         if (!access_ok(VERIFY_READ,
     891                                 (void __user *)qcedev_areq->sha_op_req.authkey,
     892                                 qcedev_areq->sha_op_req.authklen))
     893                         return -EFAULT;
     894         if (__copy_from_user(&handle->sha_ctxt.authkey[0],
     895                                 (void __user *)qcedev_areq->sha_op_req.authkey,
     896                                 qcedev_areq->sha_op_req.authklen))
     897                 return -EFAULT;
     898 
     899 
     900         k_buf_src = kmalloc(total, GFP_KERNEL);
     901         if (k_buf_src == NULL) {
     902                 pr_err("%s: Can't Allocate memory: k_buf_src 0x%lxn",
     903                                 __func__, (uintptr_t)k_buf_src);
     904                 return -ENOMEM;
     905         }
     906 
     907         k_src = k_buf_src;
     908 
     909         /* Copy data from user src(s) */
     910         user_src = (void __user *)qcedev_areq->sha_op_req.data[0].vaddr;
     911         for (i = 0; i sha_op_req.entries; i++) {
     912                 user_src =
     913                         (void __user *)qcedev_areq->sha_op_req.data[i].vaddr;
     914                 if (user_src && __copy_from_user(k_src, (void __user *)user_src,
     915                                 qcedev_areq->sha_op_req.data[i].len)) {
     916                         kzfree(k_buf_src);
     917                         return -EFAULT;
     918                 }
     919                 k_src += qcedev_areq->sha_op_req.data[i].len;
     920         }
    ...
    }
在函数 qcedev_hash_cmac 里， line 900 申请的堆内存 k_buf_src 的长度是
qcedev_areq->sha_op_req.data_len ，即请求数组里所有项的长度之和
然后在 line 911 ~ 920 的循环里，会将请求数组 qcedev_areq->sha_op_req.data[] 里的元素挨个拷贝到堆
k_buf_src 里，由于前面存在的整数溢出漏洞，这里会转变成为一个堆溢出漏洞，至此漏洞坐实。
**CVE-2016-3935 漏洞补丁**
[](http://www.iceswordlab.com/2017/08/07/qualcomm-crypto-engine-vulnerabilities-exploits/3935patch.png)
这个
[漏洞补丁](https://source.codeaurora.org/quic/la/kernel/msm-3.18/commit/?id=5f69ccf3b011c1d14a1b1b00dbaacf74307c9132)
也很直观，就是在做整数溢出时，将 ULONG_MAX 改成了 U32_MAX, 这种因为系统由32位升级到64位导致的代码漏洞，是 2016
年的一类常见漏洞
下面进入漏洞利用分析
**漏洞利用**
**android kernel 漏洞利用基础**
    include/linux/sched.h
    struct task_struct {
            volatile long state;    /* -1 unrunnable, 0 runnable, >0 stopped */
            void *stack;
    ...
    /* process credentials */
            const struct cred __rcu *real_cred; /* objective and real subjective task
                                             * credentials (COW) */
            const struct cred __rcu *cred;  /* effective (overridable) subjective task
                                             * credentials (COW) */
            char comm[TASK_COMM_LEN]; /* executable name excluding path
                                         - access with [gs]et_task_comm (which lock
                                           it with task_lock())
                                         - initialized normally by setup_new_exec */
    ...
    }
linux kernel 里，进程由 struct task_struct 表示，进程的权限由该结构体的两个成员 real_cred 和 cred 表示
    include/linux/cred.h
    struct cred {
            atomic_t        usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
            atomic_t        subscribers;    /* number of processes subscribed */
            void            *put_addr;
            unsigned        magic;
    #define CRED_MAGIC      0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
            kuid_t          uid;            /* real UID of the task */
            kgid_t          gid;            /* real GID of the task */