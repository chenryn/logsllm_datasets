# XStream反序列化CVE-2020-26217漏洞分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 引言
近期，XStream发布了关于[CVE-2020-26217](https://x-stream.github.io/CVE-2020-26217.html)的公告，通过该漏洞攻击者可发送恶意构造的xml，在受影响版本(
                0
                            text/plain
                                            0
                                            -1
                                            1
                                                        open
                                                        ./
                                                java.lang.ProcessBuilder
                                                start
                                            start
                                    KEYS
                                    0
                                    0
                                    0
                            false
                    0
            test
通过XStream加载上述XML，成功弹出计算器
## 漏洞分析
由于该漏洞触发链较长，为了便于理解，将整体的利用链分成四部分。
###  入口
由于`DynamicProxy`类和`EventHandler`类的组合拳失效，因此这次漏洞并没有利用动态代理转换器，漏洞的触发点在`MapConverter`中，其`unmarshal`函数如下
可以看到，传入的XML文本(转换为reader)，被传递到了填充map的函数中，进一步跟进，流程走到了`putCurrentEntryIntoMap`函数中，该函数的作用为将对应的key和value(从XML中解析，对应POC中的``和``)放到HashMap中，由此触发HashMap的`put`方法，进入纽带1阶段
###  纽带1
由于在Java中HashMap需要计算HashCode，因此作为key的`jdk.nashorn.internal.objects.NativeString`，会调用其`hashCode`方法
###  纽带2
由于`jdk.nashorn.internal.objects.NativeString`的`hashCode`会先调用`getStringValue()`，它调用当前类的属性`value`的`toString`方法,由于`value`为`com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data`类，它的`toString`会触发自身的`get`函数
`get`函数调用`readForm`读取自身的`DataSource`中的`InputStream`
###  终点方法
在读取的过程中，会遍历`InputStream`中的子元素
而`javax.swing.MultiUIDefaultsEnumerator`类的`nextElement`，会调用自身迭代器的`next`函数，其`next`函数中额外调用了`advance`函数
`advance`函数额外调用了`filter`属性的`filter`方法
`javax.imageio.ContainsFilter`类的`filter`方法如下
可以看到，只要`method`以及`elt`可控，即可执行任意类任意方法，实现RCE。而`method`和`elt`在先前的`ReflectionConverter`中，已经填充完毕，对应POC中的``和``元素。
## 漏洞修复
其实官方早在`1.4.7`的时候，就加入了针对XStream自身的安全框架
然而框架本身并未提供任何默认策略，需要用户手动调用`addPermission`进行配置，因此，在`1.4.13`之前的版本，其防御手段都是依靠修改`Converter`，包括`InternalBlackList`和`ReflectionConverter`，在转换时将其拦截。在`1.4.13`中，默认加入了`EventHandler`的黑名单
在`1.4.14`中，加入了`java.lang.ProcessBuilder`和`javax.imageio.ImageIO$ContainsFilter`的黑名单
当我们在`1.4.14`中再次执行POC时，会发现抛出了`ForbiddenClassException`异常。
跟踪其调用栈，发现`SecurityMapper`会存取到`Converter`当中，当`Converter`试图获取标签的类时，会先遍历自身的`Mapper`(其中包括`SecurityMapper`)
此时假设匹配到黑名单类，直接抛出异常。
## 参考链接
[Java
XStream反序列化漏洞](https://www.mi1k7ea.com/2019/10/21/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/)