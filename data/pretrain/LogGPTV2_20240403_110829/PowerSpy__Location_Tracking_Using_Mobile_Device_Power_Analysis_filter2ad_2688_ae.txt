### Comprehensive Overview of PowerSpy and Related Works

PowerSpy, as well as similar works, rely on pre-recorded radio maps to fingerprint areas of interest. Other methods use signal strength to calculate distances to base stations at known locations. These approaches [16, 24, 25, 30] require signal strength measurements and base station ID or WiFi network name (SSID), which are now protected on Android and iOS. In contrast, our work does not depend on signal strength, cell ID, or SSID. PowerSpy only requires access to power measurements, which remain unprotected on Android.

### Previous Work on Unprotected Sensors and Location Leakage

PowerSpy builds on extensive research demonstrating how various unprotected sensors can leak location information. For example, Zhou et al. [34] show that the audio on/off status can be a side-channel for location tracking without explicit permissions. They extract sequences of intervals where audio is on and off while driving instructions are being played by Google’s navigation app. By comparing these intervals with reference sequences, the authors were able to identify routes taken by the user.

SurroundSense [3] demonstrates that ambient sound and light can be used for mobile phone localization. While their focus is on legitimate use-cases, the same methods could be exploited for privacy breaches. AC-Complice [12] shows how continuous measurements from unprotected accelerometers in smartphones can reveal a user’s location. Hua et al. [13] extend this by showing that accelerometers can also reveal a user’s location within a metropolitan train system.

### Other Private Information Leaked from Smartphone Sensors

Recent studies have shown that various smartphone sensors can leak private information beyond location. In future work, we will continue to analyze power measurements to determine if other private information is leaked. Prior work has demonstrated how smartphone sensors can be used to fingerprint specific devices. AccelPrint [9] shows that smartphones can be fingerprinted by tracking imperfections in their accelerometer measurements. Fingerprinting of mobile devices by the characteristics of their loudspeakers is proposed in [7, 8]. Bojinov et al. [4] showed that various sensors in smartphones can be used to identify a mobile device by its unique hardware characteristics. Lukas et al. [20] proposed a method for digital camera fingerprinting by noise patterns present in images, which was further enhanced to identify not only the model but also specific cameras [19].

Sensors can also reveal a user’s input, such as speech and touch gestures. The Gyrophone study [21] showed that gyroscopes on smartphones can be used for eavesdropping on conversations near the phone and identifying speakers. Several works [2, 5, 32] have shown that the accelerometer and gyroscope can leak information about touch and swipe inputs to a foreground application.

### Conclusion

PowerSpy demonstrates that applications with access to a smartphone’s power monitor can gain information about the location of a mobile device without accessing GPS or any other coarse location indicators. Our approach enables known route identification, real-time tracking, and identification of new routes by analyzing the phone’s power consumption. We evaluated PowerSpy using real-world data collected from popular smartphones with significant market share and demonstrated its effectiveness. With more data, our approach can be made more accurate and reveal more information about the phone’s location.

Our work highlights the unintended consequences of giving third-party applications access to sensors. It suggests that even seemingly benign sensors need to be protected by permissions, or at the very least, more security modeling needs to be done before granting third-party applications access to sensors.

### Acknowledgments

We would like to thank Gil Shotan and Yoav Shechtman for helping to collect the data used for evaluation, Prof. Mykel J. Kochenderfer from Stanford University for providing advice regarding location tracking techniques, Roy Frostig for providing advice regarding classification and inference on graphs, and Katharina Roesler for proofreading the paper. This work was supported by NSF and the DARPA SAFER program. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF or DARPA.

### References

[1] ARULAMPALAM, M. S., MASKELL, S., GORDON, N., AND CLAPP, T. A tutorial on particle filters for online nonlinear/non-Gaussian Bayesian tracking. IEEE Transactions on Signal Processing 50, 2 (2002), 174–188.
[2] AVIV, A. J., SAPP, B., BLAZE, M., AND SMITH, J. M. Practicality of accelerometer side channels on smartphones. In Proceedings of the 28th Annual Computer Security Applications Conference (2012), ACM, pp. 41–50.
[3] AZIZYAN, M., CONSTANDACHE, I., AND ROY CHOUDHURY, R. Surroundsense: Mobile phone localization via ambience fingerprinting. In Proceedings of the 15th annual international conference on Mobile computing and networking (2009), ACM, pp. 261–272.
[4] BOJINOV, H., MICHALEVSKY, Y., NAKIBLY, G., AND BONEH, D. Mobile device identification via sensor fingerprinting. arXiv preprint arXiv:1408.1416 (2014).
[5] CAI, L., AND CHEN, H. Touchlogger: Inferring keystrokes on touch screen from smartphone motion. In Usenix HotSec (2011).
[6] CARROLL, A., AND HEISER, G. An analysis of power consumption in a smartphone. In USENIX Annual Technical Conference (2010).
[7] CLARKSON, W. B., AND FELTEN, E. W. Breaking assumptions: Distinguishing between seemingly identical items using cheap sensors. Tech. rep., Princeton University, 2012.
[8] DAS, A., AND BORISOV, N. Poster: Fingerprinting smartphones through speaker. In Poster at the IEEE Security and Privacy Symposium (2014).
[9] DEY, S., ROY, N., XU, W., CHOUDHURY, R. R., AND NELAKUDITI, S. Accelprint: Imperfections of accelerometers make smartphones trackable. In Proceedings of the Network and Distributed System Security Symposium (NDSS) (2014).
[10] GENTILE, C., ALSINDI, N., RAULEFS, R., AND TEOLIS, C. Geolocation Techniques. Springer New York, New York, NY, 2013.
[11] GOLDSMITH, A. Wireless communications. Cambridge university press, 2005.
[12] HAN, J., OWUSU, E., NGUYEN, L. T., PERRIG, A., AND ZHANG, J. ACComplice: Location inference using accelerometers on smartphones. In Proceedings of the 2012 International Conference on COMmunication Systems & NETworkS (2012).
[13] HUA, J., SHEN, Z., AND ZHONG, S. We can track you if you take the metro: Tracking metro riders using accelerometers on smartphones. arXiv:1505.05958 (2015).
[14] HUANG, J., QIAN, F., GERBER, A., MAO, Z. M., SEN, S., AND SPATSCHECK, O. A close examination of performance and power characteristics of 4G LTE networks. In MobiSys (2012).
[15] KOCHER, P., JAFFE, J., AND JUN, B. Differential power analysis. In Advances in Cryptology – CRYPTO’99 (1999), Springer, pp. 388–397.
[16] KRUMM, J., AND HORVITZ, E. Locadio: Inferring motion and location from Wi-Fi signal strengths. In MobiQuitous (2004), pp. 4–13.
[17] LATECKI, L., WANG, Q., KOKNAR-TEZEL, S., AND MEGALOOIKONOMOU, V. Optimal subsequence bijection. In Data Mining, 2007. ICDM 2007. Seventh IEEE International Conference on (Oct 2007), pp. 565–570.
[18] LEVENSHTEIN, V. I. Binary codes capable of correcting deletions, insertions, and reversals. In Soviet physics doklady (1966), vol. 10, p. 707.
[19] LI, C.-T. Source camera identification using enhanced sensor pattern noise. IEEE Transactions on Information Forensics and Security 5, 2 (2010), 280–287.
[20] LUKAS, J., FRIDRICH, J., AND GOLJAN, M. Digital camera identification from sensor pattern noise. IEEE Transactions on Information Forensics and Security 1, 2 (2006), 205–214.
[21] MICHALEVSKY, Y., BONEH, D., AND NAKIBLY, G. Gyrophone: Recognizing speech from gyroscope signals. In Proc. 23rd USENIX Security Symposium (SEC14), USENIX Association (2014).
[22] MOHAN, P., PADMANABHAN, V. N. V., AND RAMJEE, R. Nericell: Rich monitoring of road and traffic conditions using mobile smartphones. In Proceedings of the 6th ACM conference on Embedded networked sensor systems (New York, New York, USA, Nov. 2008), ACM Press, p. 323.
[23] MÜLLER, M. Information Retrieval for Music and Motion. Springer Berlin Heidelberg, Berlin, Heidelberg, 2007.
[24] MUTHUKRISHNAN, K., VAN DER ZWAAG, B. J., AND HAVINGA, P. Inferring motion and location using WLAN RSSI. In Mobile Entity Localization and Tracking in GPS-less Environments. Springer, 2009, pp. 163–182.
[25] OUYANG, R. W., WONG, A.-S., LEA, C.-T., AND ZHANG, V. Y. Received signal strength-based wireless localization via semidefinite programming. In Global Telecommunications Conference, 2009. GLOBECOM 2009. IEEE (2009), IEEE, pp. 1–6.
[26] POLLINI, G. P. Trends in handover design. IEEE Communications Magazine 34, 3 (1996), 82–90.
[27] RABINER, L. A tutorial on hidden Markov models and selected applications in speech recognition. Proceedings of the IEEE (1989).
[28] RISTIC, B., ARULAMPALAM, S., AND GORDON, N. Beyond the Kalman filter. IEEE Aerospace and Electronic Systems Magazine 19, 7 (2004), 37–38.
[29] SCHULMAN, A., SPRING, N., NAVDA, V., RAMJEE, R., DESHPANDE, P., GRUNEWALD, C., PADMANABHAN, V. N., AND JAIN, K. Bartendr: A practical approach to energy-aware cellular data scheduling. MOBICOM (2010).
[30] SOHN, T., VARSHAVSKY, A., LAMARCA, A., CHEN, M. Y., CHOUDHURY, T., SMITH, I., CONSOLVO, S., HIGHTOWER, J., GRISWOLD, W. G., AND DE LARA, E. Mobility detection using everyday GSM traces. In UbiComp 2006: Ubiquitous Computing. Springer, 2006, pp. 212–224.
[31] XU, F., LIU, Y., LI, Q., AND ZHANG, Y. V-edge: Fast self-constructive power modeling of smartphones based on battery voltage dynamics. Presented as part of the 10th USENIX Symposium on Operating Systems Design and Implementation (2013).
[32] XU, Z., BAI, K., AND ZHU, S. Taplogger: Inferring user inputs on smartphone touchscreens using on-board motion sensors. In Proceedings of the fifth ACM conference on Security and Privacy in Wireless and Mobile Networks (2012), ACM, pp. 113–124.
[33] ZHANG, L., TIWANA, B., QIAN, Z., AND WANG, Z. Accurate online power estimation and automatic battery behavior-based power model generation for smartphones. Proceedings of the 2010 ACM SIGOPS European workshop (2010).
[34] ZHOU, X., DEMETRIOU, S., HE, D., NAVEED, M., PAN, X., WANG, X., GUNTER, C. A., AND NAHRSTEDT, K. Identity, location, disease, and more: Inferring your secrets from Android public resources. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security - CCS ’13 (2013), pp. 1017–1028.

### Formal Model of New Route Inference

In this section, we formalize the problem of new route inference (Section 6) as a Hidden Markov Model (HMM) [27]. Let \( I \) denote the set of intersections in an area where we wish to track a mobile device. A road segment is given by an ordered pair of intersections \((x, y)\), defined as a continuous road between intersection \( x \) and intersection \( y \). We denote the set of road segments as \( R \).

We assume that once a device starts to traverse a road segment, it does not change direction until it reaches the end of the segment. We define a state for each road segment. We say that the tracked device is in state \( s_{xy} \) if the device is currently traversing a road segment \((x, y)\), where \( x, y \in I \). We denote the route of the tracked device as \((Q, T)\), where
\[ Q = (q_1 = s_{x_1 x_2}, q_2 = s_{x_2 x_3}, \ldots) \]
\[ T = \{t_1, t_2, \ldots\} \]
For such a route, the device has traversed from \( x_i \) to \( x_{i+1} \) during the time interval \([t_{i-1}, t_i]\) (\( t_0 = 0 \), \( t_{i-1} > 0 \)).

Let \( A = (a_{xyz} | \forall x, y, z \in I) \) be the state transition probability distribution, where
\[ a_{xyz} = P(q_{i+1} = s_{yz} | q_i = s_{xy}) \]
Note that \( a_{xyz} = 0 \) if there is no road between intersections \( x \) and \( y \) or no road between intersections \( y \) and \( z \).

A traversal of the device over a road segment yields a power consumption profile of length equal to the duration of that movement. We denote a power consumption profile as an observation \( o \). Let \( B \) be the probability distribution of yielding a given power profile while the device traversed a given segment. Due to the hysteresis of hand-offs between cellular base stations, this probability depends on the previous segment the device traversed.

Finally, let \( \Pi = (\pi_{xy}) \) be the initial state distribution, where \( \pi_{xy} \) is the probability that the device initially traversed segment \((x, y)\). If there is no road segment between intersections \( x \) and \( y \), then \( \pi_{xy} = 0 \). In our model, we treat this initial state as the state of the device before the start of the observed power profile. We need to take this state into account due to the hysteresis effect. Note that an HMM is characterized by \( A \), \( B \), and \( \Pi \).

The route inference problem is defined as follows. Given an observation of a power profile \( O \) over time interval \([0, t_{\text{max}}]\), and given a model \( A \), \( B \), and \( \Pi \), we need to find a route \((Q, T)\) such that \( P((Q, T) | O) \) is maximized. In the following, we denote the part of \( O \) which begins at time \( t' \) and ends at time \( t'' \) by \( O[t', t''] \). Note that \( O = O[0, t_{\text{max}}] \). We consider the time interval \([0, t_{\text{max}}]\) as having a discrete resolution of \( \tau \).

### Choosing the Best Inferred Route

Upon completion, the particle filter described in Section 6.1 outputs a set of \( N \) routes of various lengths, denoted by \( P_{\text{final}} \). This set provides an estimate of the distribution of routes given the power profile of the tracked device. The simple approach to select the best estimate is to choose the route that appears most frequently in \( P_{\text{final}} \) as it has the highest probability to occur. However, since a route is composed of multiple segments chosen at separate steps, at each step the weight of a route is determined solely based on the last segment added to the route. Therefore, in \( P_{\text{final}} \), there is a bias in favor of routes ending with segments that were given higher weights, while the weights of the initial segments have a diminishing effect on the route distribution with every new iteration.

To counter this bias, we use a procedure called iterative majority vote. This procedure ranks the routes based on the prevalence of their prefixes. At each iteration \( i \), the procedure calculates a list of prefixes of length \( i \) ranked by their prevalence out of all routes that have a prefix in \( \text{Prefix}[i-1] \). \( \text{Prefix}[i][n] \) denotes the prefix of rank \( n \). The operation \( p || j \) — where \( p \) is a route and \( j \) is an intersection — denotes the appending of \( j \) to \( p \). At each iteration \( i \), Algorithm 3 is executed. In the following, we denote \( \text{RoutePrefixed}(R, p) \) to be the subset of routes out of the set \( R \) having \( p \) as their prefix.

#### Algorithm 3: Iterative Majority Vote
```plaintext
I' ← I
while not all prefixes found do
    Prf ← next prefix from Prefix[i].
    Find j ∈ I' that maximizes
        RoutePrefixed(RoutePrefixed(P_final, Prf), Prf || j)
    if no such j is found then
        I' = I
        continue loop
    end if
    Prefix[i + 1] ← Prefix[i + 1] ∪ {Prf || j}
    I' = I' − {j}
end while
```

At each iteration \( i \), we rank the prefixes based on the ranks of the previous iteration. Namely, prefixes which are extensions of a shorter prefix having a higher rank in a previous iteration will always get higher ranking over prefixes which are extensions of a lower rank prefix. At each iteration, we first find the most common prefixes of length \( i + 1 \), which start with the most common prefix of length \( i \) found in the previous iteration, and rank them according to their prevalence. Then we look for common prefixes of length \( i + 1 \), that start with the second most common prefix of length \( i \) found in the previous iteration, and so on until all prefixes of length \( i + 1 \) are found. The intuition is as follows: The procedure prefers routes traversing segments that are commonly traversed by other routes. Those received a high score when they were chosen. Since we cannot pick the most common segments separately from each step (a continuous route probably will not emerge), we iteratively pick the most common segment out of the routes that are prefixed with the segments that were already chosen.

---

This revised text aims to provide a clear, coherent, and professional overview of the topic, with improved readability and structure.