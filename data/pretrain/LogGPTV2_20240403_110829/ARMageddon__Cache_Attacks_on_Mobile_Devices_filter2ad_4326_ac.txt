Android kernel configuration, e.g., the stock kernel on
the Alcatel One Touch Pop 2 as well as the OnePlus
One provide this feature by default. Thus, in contrast
to previous work [51], the attacker does not have to
load a kernel module to access this information as the
perf_event_open syscall can be accessed without
any privileges or permissions.
POSIX function. Another alternative to obtain suf-
ficiently accurate timing information is the POSIX
function clock_gettime(), with an accuracy
in the range of microseconds
to nanoseconds.
Similar
information can also be obtained from
/proc/timer_list.
Dedicated thread timer. If no interface with sufficient
accuracy is available, an attacker can run a thread
that increments a global variable in a loop, provid-
ing a fair approximation of a cycle counter. Our ex-
periments show that this approach works reliably on
smartphones as well as recent x86 CPUs. The resolu-
tion of this threaded timing information is as high as
with the other methods.
In Figure 4 we show the cache hit and miss histogram
based on the four different methods, including the cycle
count register, on a Alcatel One Touch Pop 2. Despite the
latency and noise, cache hits and cache misses are clearly
distinguishable with all approaches. Thus, all methods
can be used to implement cache attacks. Determining
the best timing method on the device under attack can be
done in a few seconds during an online attack.
USENIX Association  
25th USENIX Security Symposium  555
7
4 High Performance Covert Channels
To evaluate the performance of our attacks, we measure
the capacity of cross-core and cross-CPU cache covert
channels. A covert channel enables two unprivileged ap-
plications on a system to communicate with each other
without using any data transfer mechanisms provided by
the operating system. This communication evades the
sandboxing concept and the permission system (cf. col-
lusion attacks [36]). Both applications were running in
the background while the phone was mostly idle and an
unrelated app was running as the foreground application.
Our covert channel is established on addresses of a
shared library that is used by both the sender and the re-
ceiver. While both processes have read-only access to the
shared library, they can transmit information by loading
addresses from the shared library into the cache or evict-
ing (flushing) it from the cache, respectively.
The covert channel transmits packets of n-bit data, an
s-bit sequence number, and a c-bit checksum that is com-
puted over data and sequence number. The sequence
number is used to distinguish consecutive packets and
the checksum is used to check the integrity of the packet.
The receiver acknowledges valid packets by responding
with an s-bit sequence number and an x-bit checksum.
By adjusting the sizes of checksums and sequence num-
bers the error rate of the covert channel can be controlled.
Each bit is represented by one address in the shared
library, whereas no two addresses are chosen that map
to the same cache set. To transmit a bit value of 1, the
sender accesses the corresponding address in the library.
To transmit a bit value of 0, the sender does not access
the corresponding address, resulting in a cache miss on
the receiver’s side. Thus, the receiving process observes
a cache hit or a cache miss depending on the memory ac-
cess performed by the sender. The same method is used
for the acknowledgements sent by the receiving process.
using
Evict+Reload, Flush+Reload, and Flush+Flush on
our smartphones. The results are summarized in Table 4.
On the Samsung Galaxy S6, we achieve a cross-core
transmission rate of 1 140 650 bps at an error rate of
1.10%. This is 265 times faster than any existing covert
channel on smartphones. In a cross-CPU transmission
we achieve a transmission rate of 257 509 bps at an error
rate of 1.83%. We achieve a cross-core transition rate of
178 292 bps at an error rate of 0.48% using Flush+Flush
on the Samsung Galaxy S6. On the Alcatel One Touch
Pop 2 we achieve a cross-core transmission rate of
13 618 bps at an error rate of 3.79% using Evict+Reload.
This is still 3 times faster than previous covert channels
on smartphones. The covert channel is significantly
slower on the Alcatel One Touch Pop 2 than on the
Samsung Galaxy S6 because the hardware is much
implemented
channel
We
this
covert
slower, Evict+Reload is slower than Flush+Reload, and
retransmission might be necessary in 0.14% of the cases
where eviction is not successful (cf. Section 3.2). On the
older OnePlus One we achieve a cross-core transmission
rate of 12 537 bps at an error rate of 5.00%, 3 times faster
than previous covert channels on smartphones. The
reason for the higher error rate is the additional timing
noise due to the cache coherence protocol performing a
high number of remote-core fetches.
5 Attacking User Input on Smartphones
In this section we demonstrate cache side-channel at-
tacks on Android smartphones. We implement cache
template attacks [19]
to create and exploit accu-
rate cache-usage profiles using the Evict+Reload or
Flush+Reload attack. Cache template attacks have a pro-
filing phase and an exploitation phase. In the profiling
phase, a template matrix is computed that represents how
many cache hits occur on a specific address when trig-
gering a specific event. The exploitation phase uses this
matrix to infer events from cache hits.
To perform cache template attacks, an attacker has
to map shared binaries or shared libraries as read-only
shared memory into its own address space. By us-
ing shared libraries, the attacker bypasses any potential
countermeasures taken by the operating system, such as
restricted access to runtime data of other apps or address
space layout randomization (ASLR). The attack can even
be performed online on the device under attack if the
event can be simulated.
Triggering the actual event that an attacker wants to
spy on might require either (1) an offline phase or (2)
privileged access. For instance, in case of a keylogger,
the attacker can gather a cache template matrix offline
for a specific version of a library, or the attacker relies on
privileged access of the application (or a dedicated per-
mission) in order to be able to simulate events for gath-
ering the cache template matrix. However, the actual ex-
ploitation of the cache template matrix to infer events
neither requires privileged access nor any permission.
5.1 Attacking a Shared Library
Just as Linux, Android uses a large number of shared li-
braries, each with a size of up to several megabytes. We
inspected all available libraries on the system by man-
ually scanning the names and identified libraries that
might be responsible for handling user input, e.g., the
libinput.so library. Without loss of generality, we re-
stricted the set of attacked libraries since testing all li-
braries would have taken a significant amount of time.
Yet, an adversary could exhaustively probe all libraries.
556  25th USENIX Security Symposium 
USENIX Association
8
Table 4: Comparison of covert channels on Android.
Work
Ours (Samsung Galaxy S6)
Ours (Samsung Galaxy S6)
Ours (Samsung Galaxy S6)
Ours (Alcatel One Touch Pop 2)
Ours (OnePlus One)
Marforio et al. [36]
Marforio et al. [36]
Schlegel et al. [48]
Schlegel et al. [48]
Schlegel et al. [48]
Type
Flush+Reload, cross-core
Flush+Reload, cross-CPU
Flush+Flush, cross-core
Evict+Reload, cross-core
Evict+Reload, cross-core
Type of Intents
UNIX socket discovery
File locks
Volume settings
Vibration settings
Bandwidth [bps]
1 140 650
257 509
178 292
13 618
12 537
4 300
2 600
685
150
87
Error rate
1.10%
1.83%
0.48%
3.79%
5.00%
–
–
–
–
–
We automated the search for addresses in these shared
libraries and after identifying addresses, we monitored
them in order to infer user input events.
For in-
stance, in the profiling phase on libinput.so, we sim-
ulated events via the android-debug bridge (adb shell)
with two different methods. The first method uses
the input command line tool to simulate user input
events. The second method is writing event messages
to /dev/input/event*. Both methods can run entirely
on the device for instance in idle periods while the user is
not actively using the device. As the second method only
requires a write() statement it is significantly faster, but
it is also more device specific. Therefore, we used the
input command line except when profiling differences
between different letter keys. While simulating these
events, we simultaneously probed all addresses within
the libinput.so library, i.e., we measured the number
of cache hits that occurred on each address when trig-
gering a specific event. As already mentioned above, the
simulation of some events might require either an offline
phase or specific privileges in case of online attacks.
Figure 5 shows part of the cache template matrix
for libinput.so. We triggered the following events:
key events including the power button (key), long touch
events (longpress), swipe events, touch events (tap), and
text input events (text) via the input tool as often as pos-
sible and measured each address and event for one sec-
ond. The cache template matrix clearly reveals addresses
with high cache-hit rates for specific events. Darker col-
ors represent addresses with higher cache-hit rates for a
specific event and lighter colors represent addresses with
lower cache-hit rates. Hence, we can distinguish differ-
ent events based on cache hits on these addresses.
We verified our results by monitoring the identified
addresses while operating the smartphone manually, i.e.,
we touched the screen and our attack application reliably
reported cache hits on the monitored addresses. For in-
stance, address 0x11040 of libinput.so can be used to
distinguish tap actions and swipe actions on the screen of
the Alcatel One Touch Pop 2. Tap actions cause a smaller
t
n
e
v
E
key
longpress
swipe
tap
text
0
4
8
x
0
0
8
8
x
0
0
8
2
3
x
0
0
0
7
7
x
0
0
8
0
8
x
0
0
0
1
8
x
0
0
4
1
8
x
0
0
4
8
8
x
0
0
8
8
8
x
0
0
0
9
8
x
0
0
4
9
8
x
0
0
8
9
8
x
0
0
0
0
1
1
x
0
0
4
0
1
1
x
0
0
8
0
1
1
x
0
Addresses
Figure 5: Cache template matrix for libinput.so.
200
150
100
50
e
m
i
t
s
s
e
c
c
A
Tap Tap Tap Swipe Swipe Swipe
Tap Tap Tap
Swipe Swipe
0
5
10
15
Time in seconds
Figure 6: Monitoring address 0x11040 of libinput.so
on the Alcatel One Touch Pop 2 reveals taps and swipes.
number of cache hits than swipe actions. Swipe actions
cause cache hits in a high frequency as long as the screen
is touched. Figure 6 shows a sequence of 3 tap events,
3 swipe events, 3 tap events, and 2 swipe events. These
events can be clearly distinguished due to the fast access
times. The gaps mark periods of time where our program
was not scheduled on the CPU. Events occurring in those
periods can be missed by our attack.
Swipe input allows to enter words by swiping over
the soft-keyboard and thereby connecting single charac-
ters to form a word. Since we are able to determine the
length of swipe movements, we can correlate the length
of the swipe movement with the actual word length in
any Android application or system interface that uses
swipe input without any privileges. Furthermore, we can
determine the actual length of the unlock pattern for the
pattern-unlock mechanism.
USENIX Association  
25th USENIX Security Symposium  557
9
Figure 7 shows a user input sequence consisting of 3
tap events and 3 swipe events on the Samsung Galaxy
S6. The attack was conducted using Flush+Reload.
An attacker can monitor every single event. Taps and
swipes can be distinguished based on the length of the
cache hit phase. The length of a swipe movement can
be determined from the same information. Figure 8
shows the same experiment on the OnePlus One using
Evict+Reload. Thus, our attack techniques work on co-
herent non-inclusive last-level caches.
t
u
p
n
I
alphabet
enter
space
backspace
0
4
1
5
4
x
0
0
4
9
6
5
x
0
0
8
2
7
5
x
0
0
8
4
8
5
x
0
0
8
2
0
6
x
0
0
4
3
0
6
x
0
0
8
5
0
6
x
0
0
4
3
6
6
x