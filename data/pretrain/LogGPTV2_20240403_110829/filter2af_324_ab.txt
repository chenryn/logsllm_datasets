    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-security\3.21.2-03\nexus-security-3.21.2-03\org\sonatype\nexus\security\privilege\PrivilegesExistValidator.java:
       42           if (!privilegeId.matches("^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$")) {
       43              context.disableDefaultConstraintViolation();
       44:             context.buildConstraintViolationWithTemplate("Invalid privilege id: " + this.getEscapeHelper().stripJavaEl(privilegeId) + ". " + "Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed and may not start with underscore or dot.").addConstraintViolation();
       45              return false;
       46           }
       ..
       55        } else {
       56           context.disableDefaultConstraintViolation();
       57:          context.buildConstraintViolationWithTemplate("Missing privileges: " + missing).addConstraintViolation();
       58           return false;
       59        }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-security\3.21.2-03\nexus-security-3.21.2-03\org\sonatype\nexus\security\role\RoleNotContainSelfValidator.java:
       49              if (this.containsRole(id, roleId, processedRoleIds)) {
       50                 context.disableDefaultConstraintViolation();
       51:                context.buildConstraintViolationWithTemplate(this.message).addConstraintViolation();
       52                 return false;
       53              }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-security\3.21.2-03\nexus-security-3.21.2-03\org\sonatype\nexus\security\role\RolesExistValidator.java:
       42        } else {
       43           context.disableDefaultConstraintViolation();
       44:          context.buildConstraintViolationWithTemplate("Missing roles: " + missing).addConstraintViolation();
       45           return false;
       46        }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-validation\3.21.2-03\nexus-validation-3.21.2-03\org\sonatype\nexus\validation\ConstraintViolationFactory.java:
       75        public boolean isValid(ConstraintViolationFactory.HelperBean bean, ConstraintValidatorContext context) {
       76           context.disableDefaultConstraintViolation();
       77:          ConstraintViolationBuilder builder = context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(bean.getMessage()));
       78           NodeBuilderCustomizableContext nodeBuilder = null;
       79           String[] var8;
后面作者也发布了[漏洞分析](https://github.com/Cryin/Paper/blob/master/CVE-2018-16621%20Nexus%20Repository%20Manager3%20%E4%BB%BB%E6%84%8FEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5.md)，确实用了`buildConstraintViolationWithTemplate`作为了漏洞的根源，利用这个关键点做的污点跟踪分析。
从上面的搜索结果中可以看到，el表达式导致的那三个CVE关键点也在其中，同时还有其他几个地方，有几个使用了`this.getEscapeHelper().stripJavaEl`做了清除，还有几个，看起来似乎也可以，心里一阵狂喜？然而，其他几个没有做清除的地方虽然能通过路由进入，但是利用不了，后面会挑选其中的一个做下分析。所以在开始说了官方可能修复了几个类似的地方，猜想有两种可能：
  * 官方自己察觉到了那几个地方也会存在el解析漏洞，所以做了清除
  * 有其他漏洞发现者提交了那几个做了清除的漏洞点，因为那几个地方可以利用；但是没清除的那几个地方由于没法利用，所以发现者并没有提交，官方也没有去做清除
不过感觉后一种可能性更大，毕竟官方不太可能有的地方做清除，有的地方不做清除，要做也是一起做清除工作。
##### CVE-2018-16621分析
这个漏洞对应上面的搜索结果是RolesExistValidator，既然搜索到了关键点，自己来手动逆向回溯下看能不能回溯到有路由处理的地方，这里用简单的搜索回溯下。
关键点在`RolesExistValidator的isValid`，调用了`buildConstraintViolationWithTemplate`。搜索下有没有调用`RolesExistValidator`的地方：
在RolesExist中有调用，这种写法一般会把RolesExist当作注解来使用，并且进行校验时会调用`RolesExistValidator.isValid()`。继续搜索RolesExist：
有好几处直接使用了RolesExist对roles属性进行注解，可以一个一个去回溯，不过按照Role这个关键字RoleXO可能性更大，所以先看这个（UserXO也可以的），继续搜索RoleXO：
会有很多其他干扰的，比如第一个红色标注`RoleXOResponse`，这种可以忽略，我们找直接使用`RoleXO的`地方。在`RoleComponent`中，看到第二个红色标注这种注解大概就知道，这里能进入路由了。第三个红色标注使用了roleXO，并且有roles关键字，上面RolesExist也是对roles进行注解的，所以这里猜测是对roleXO进行属性注入。有的地方反编译出来的代码不好理解，可以结合源码看：
可以看到这里就是将提交的参数注入给了roleXO，RoleComponent对应的路由如下：
通过上面的分析，我们大概知道了能进入到最终的`RolesExistValidator`，不过中间可能还有很多条件需要满足，需要构造payload然后一步一步测。这个路由对应的web页面位置如下：
测试（这里使用的3.21.1版本，CVE-2018-16621是之前的漏洞，在3.21.1早修复了，不过3.21.1又被绕过了，所以下面使用的是绕过的情况，将`$`换成`$\\x`去绕过，绕过在后面两个CVE再说）：
修复方式：
加上了`getEscapeHelper().stripJavaEL`对el表达式做了清除，将`${`替换为了`{`，之后的两个CVE就是对这个修复方式的绕过：
##### CVE-2020-10204分析
这就是上面说到的对之前`stripJavaEL`修复的绕过，这里就不细分析了，利用`$\\x`格式就不会被替换掉（使用3.21.1版本测试）：
##### CVE-2020-10199分析
这个漏洞对应上面搜索结果是`ConstraintViolationFactory`：
`buildConstraintViolationWith`（标号1）出现在了`HelperValidator`（标号2）的`isValid`中，`HelperValidator`又被注解在`HelperAnnotation`（标号3、4）之上，`HelperAnnotation`注解在了`HelperBean`（标号5）之上，在`ConstraintViolationFactory.createViolation`方法中使用到了`HelperBean`（标号6、7）。按照这个思路要找调用了`ConstraintViolationFactory.createViolation`的地方。
也来手动逆向回溯下看能不能回溯到有路由处理的地方。
搜索ConstraintViolationFactory：
有好几个，这里使用第一个`BowerGroupRepositoriesApiResource`分析，点进去看就能看出它是一个API路由：
`ConstraintViolationFactory`被传递给了`super`，在`BowerGroupRepositoriesApiResource`并没有调用`ConstraintViolationFactory`的其他函数，不过它的两个方法，也是调用了`super`对应的方法。它的`super`是`AbstractGroupRepositoriesApiResource`类：
`BowerGroupRepositoriesApiResource`构造函数中调用的`super`，在`AbstractGroupRepositoriesApiResourc`e赋值了`ConstraintViolationFactory`（标号1），`ConstraintViolationFactory`的使用（标号2），调用了`createViolation`（在后面可以看到memberNames参数），这也是之前要到达漏洞点所需要的，这个调用处于`validateGroupMembers`中（标号3），`validateGroupMembers`的调用在`createRepository`（标号4）和`updateRepository`（标号5）中都进行了调用，而这两个方法通过上面的注解也可以看出，通过外部传递请求能到达。
`BowerGroupRepositoriesApiResource`的路由为`/beta/repositories/bower/group`，在后台API找到它来进行调用（使用3.21.1测试）：
还有`AbstractGroupRepositoriesApiResource`的其他几个子类也是可以的：
##### CleanupPolicyAssetNamePatternValidator未做清除点分析
对应上面搜索结果的`CleanupPolicyAssetNamePatternValidator`，可以看到这里并没有做`StripEL`清除操作：
这个变量是通过报错抛出放到`buildConstraintViolationWithTemplate`中的，要是报错信息中包含了value值，那么这里就是可以利用的。
搜索`CleanupPolicyAssetNamePatternValidator`：
在`CleanupPolicyAssetNamePattern`类注解中使用了，继续搜索`CleanupPolicyAssetNamePattern`：
在`CleanupPolicyCriteri`a中的属性`regex`被`CleanupPolicyAssetNamePattern`注解了，继续搜索`CleanupPolicyCriteria`：
在`CleanupPolicyComponent`中的`to
CleanupPolicy`方法中有调用，其中的`cleanupPolicyXO.getCriteria`也正好是`CleanupPolicyCriteria`对象。`toCleanupPolic`y在`CleanupPolicyComponent`的可通过路由进入的`create、previewCleanup`方法又调用了`toCleanupPolicy`。
构造payload测试：
然而这里并不能利用，value值不会被包含在报错信息中，去看了下`RegexCriteriaValidator.validate`，无论如何构造，最终也只会抛出value中的一个字符，所以这里并不能利用。
与这个类似的是`CronExpressionValidator`，那里也是通过抛出异常，但是那里是可以利用的，不过被修复了，可能之前已经有人提交过了。还有其他几个没做清除的地方，要么被if、else跳过了，要么不能利用。
人工去回溯查找的方式，如果关键字被调用的地方不多可能还好，不过要是被大量使用，可能就不是那么好处理了。不过上面几个漏洞，可以看到通过手动回溯查找还是可行的。
#### JXEL造成的漏洞（CVE-2019-7238）
可以参考下@iswin大佬之前的分析，这里就不再去调试截图了。这里想写下之前对这个漏洞的修复，说是加了权限来修复，要是只加了权限，那不是还能提交一下？不过，测试了下3.21.1版本，就算用admin权限也无法利用了，想去看下是不是能绕过。在3.14.0中测试，确实是可以的：
但是3.21.1中，就算加了权限，也是不行的。后面分别调试对比了下，以及通过下面这个测试：
    JexlEngine jexl = new JexlBuilder().create();
    String jexlExp = "''.class.forName('java.lang.Runtime').getRuntime().exec('calc.exe')";
    JexlExpression e = jexl.createExpression(jexlExp);
    JexlContext jc = new MapContext();
    jc.set("foo", "aaa");
    e.evaluate(jc);
才知道3.14.0与上面这个测试使用的是`org.apache.commons.jexl3.internal.introspection.Uberspect`处理，它的getMethod方法如下：
而在3.21.1中Nexus设置的是`org.apache.commons.jexl3.internal.introspection.SandboxJexlUberspect`，这个`SandboxJexlUberspect`，它的get
Method方法如下：
可以看出只允许调用String、Map、Collection类型的有限几个方法了。
#### 总结
  * 看完上面的内容，相信对Nexus3的漏洞大体有了解了，不会再无从下手的感觉。尝试看下下其他地方，例如后台有个LDAP，可进行jndi connect操作，不过那里调用的是`context.getAttribute`，虽然会远程请求class文件，不过并不会加载class，所以并没有危害。
  * 有的漏洞的根源点可能会在一个应用中出现相似的地方，就像上面那个`buildConstraintViolationWithTemplate`这个keyword一样，运气好说不定一个简单的搜索都能碰到一些相似漏洞（不过我运气貌似差了点，通过上面的搜索可以看到某些地方的修复，说明已经有人先行一步了，直接调用了`buildConstraintViolationWithTemplate`并且可用的地方似乎已经没有了）
  * 仔细看下上面几个漏洞的payload，好像相似度很高，所以可以弄个类似fuzz参数的工具，搜集这个应用的历史漏洞payload，每个参数都可以测试下对应的payload，运气好可能会撞到一些相似漏洞
* * *