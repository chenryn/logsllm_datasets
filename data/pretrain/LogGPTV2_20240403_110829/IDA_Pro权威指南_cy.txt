有很多工具专门用于二进制文件差异比较，包括 Zynamics1
 开发的商业版BinDiff、eEye Digital Security2
 开发的免费 BDS （二进制差异比较套件）可以 Core Labs（属于Core Impact3
 的开发者Core Security）下载的免费工具 Turbodiff4
 以及Nicolas Pouvesle的PatchDiff2 5
 。这些工具的每一种都以某种方式依赖于提供的 IDA 。BinDiff和BDS 利用IDA 脚本和插件对所分析的二进制文件的已打补丁版本和未打补丁版本进行初步的分析。由插件提取出的信息存储在一个后端数据库中。每个工具均提供一个基于图形的显示窗口，并可以导航在分析阶段检测到的差异。Turbodiff 和PatchDiff2 以IDA 插件的方式实现，并在 IDA 中显示它们的结果。使用这些工具的最终目的是迅速指出修复一个漏洞需要做出的变更，以快速了解代码易于受到攻击的原因。有关这两款产品的其他信息，请访问它们各自公司的网站。
1. 参见http://www.zynamics.com/bindiff.html
 。
2. 参见http://research.eeye.com/html/tools/RT20060801-1.html
 。
3. 参见http://corelabs.coresecurity.com/index.php?module=Wiki&action=view&type=tool&name=turbodiff
 。
4. 参见http://www.coresecurity.com/content/core-impact-overview/
 。
5. 参见http://code.google.com/p/patchdiff2
 。还请注意，Alexander Pick将latch Diff2 用于OS X的IDA6.0。更多信息参见https://github.com/Alexander-pick/patchdiff-ida6
 。
PatchDiff2 是一款典型的免费差异比较工具，它是一个开源项目，提供该插件的 32 位和64位已编译Windows 版本以及用于访问该插件源代码的子版本。要安装该插件，只需将插件二进制文件复制到/plugins 目录中即可。
使用PatchDiff2（参见表 22-2 ）的第一步是创建两个独立的 IDA 数据库，分别用于要比较的两个二进制文件。通常，一个数据库用于二进制文件的原始版本，而另一个数据库则用于该二进制文件的已打补丁版本。
表22-2 PatchDiff2
名称
PatchDiff2
作者
Nicolas Pouvesle
发布
用于IDA 5.7 的源代码和二进制文件
价格
免费
描述
生成并显示二进制文件差异
信息
http://code.google.com/p/patchdiff2/
通常，如果调用该插件，将打开用于原始二进制文件的数据库，然后通过 Edit ▶Plugins （编辑▶插件）菜单或其关联的热键（默认为 CTRL-8）激活 PatchDiff2。PatchDiff2 将你从中调用该插件的数据库称为 IDB1 或“第一个idb”。激活后，PatchDiff2 将打开将与当前打开的数据库进行比较的另一个数据库，此数据库称为 IDB2 或“第二个 idb”。选择第二个数据库后，PatchDiff2将计算每个数据库中每一个函数的许多辨别性特性，包括各种类型的签名、散列值和 CRC 值。利用这些特性，PatchDiff2 将创建3 个函数列表，分别称为“相同的函数”、“不匹配的函数”和“匹配的函数”。这些列表分别在PatchDiff2打开的新选项卡式窗口中显示。
“相同的函数”列表包含 PatchDiff2 认为在两个数据库中均相同的函数的列表。从解析角度看，你可能不会对这些函数感兴趣，因为它们对于生成的二进制文件的已打补丁版本并未作出任何更改。
“不匹配的函数”列表显示两个数据库中根据PatchDiff2 应用的标准彼此不同的函数。实际上，这些函数或者已添加到已打补丁的版本并从未打补丁的版本中删除，或者与同一二进制文件中的其他函数过于相似，以至于无法与另一个二进制文件中的对应函数区别开来。通过仔细的手动分析，通常可以匹配“不匹配的函数”列表中的函数对。经验证明，手动比较签名数量相同的函数的结构是一个不错的主意。为此，最好是对基于sig 列的列表进行排序，以便把具有相同数量的签名的函数放在一起列出。按sig 列排序的“不匹配的函数”列表的前几行如下所示。
File Function name Function address Sig      Hash     CRC       
---- ------------- ---------------- ---      ----     ---       
1    sub_7CB25FE9  7CB25FE9         000000F0 F4E7267B 411C3DCC  
1    sub_7CB6814C  7CB6814C         000000F0 F4E7267B 411C3DCC  
2    sub_7CB6819A  7CB6819A         000000F0 F4E7267B 411C3DCC  
2    sub_7CB2706A  7CB2706A         000000F0 F4E7267B 411C3DCC  
很明显，文件 1 中的两个函数与文件 2 中的两个函数相关，但 PatchDiff2无法确定如何对它们进行配对。在使用 C++ 标准模板库（STL ）的二进制文件中，我们常常可以看到多个结构相同的函数。如果你能够手动将一个文件中的函数与其在另一个文件中的对应函数相匹配，就可以使用PatchDiff2 的Set Match（设置匹配）功能（位于上下文菜单中）在列表中选择一个函数，然后将其与列表中的另一个函数相匹配。Set Match对话框如图 22-1 所示。
图22-1 使用 PatchDiff2 手动匹配函数
要进行手动匹配，首先你需要使用 Set Match菜单项选择一个函数。在生成的对话框中，你必须输入匹配的函数在你未查看的文件中的地址。Propagate （传播）选项会要求 PatchDiff2 尽可能多地匹配其他函数（只要你告知它出现的新匹配）。
“匹配的函数”列表包含 PatchDiff2 根据在匹配过程中应用的标准认为足够相似但并非完全相同的函数。右击此列表中的任何条目并选择 Display Graphs（显示图形），PatchDiff2 将显示两个匹配的函数的流图形。图 22-2 显示了一个这样的图形对。PatchDiff2 利用颜色编码突出显示已添加到二进制文件的已打补丁版本中的代码块，以便于你重点关注代码中已更改的部分。
图22-2 PatchDiff2 的图形化函数比较
在这些图形中，两个函数中均包含代码块➊到➍，而代码块➎则添加到函数的已打补丁版本中。在差异化分析过程中，最初你会对匹配的函数最感兴趣，因为它们可能包含已合并到已打补丁的二进制文件中的更改（这些更改修复了原始二进制文件中发现的漏洞）。仔细研究这些更改，可以发现为解决错误行为或可利用条件而进行的更正或添加的安全检查。如果在“匹配的函数”列表中找不到任何感兴趣的突出显示的更改，则“不匹配的函数”列表将成为我们查找已打补丁的代码的唯一其他选项。
22.3 IDA 与破解程序开发过程
假设你确定了一个可被利用的漏洞的位置，那么，IDA 如何为你开发破解程序提供帮助呢？要回答这个问题，你需要了解你需要什么类型的帮助，以便利用 IDA 的功能。
在下面几个方面，IDA 的功能非常强大。在开发破解程序时，这些功能可以为你节省大量反复试验的时间。
在确定控制流路径方面，IDA 图形非常有用，可以帮助你了解如何到达一个易受攻击的函数。对于大型二进制文件，你可能需要仔细选择生成图形的参数，以最大限度地减少所生成图形的复杂程度。请参阅第 9 章了解有关 IDA 图形的更多信息。
IDA 对栈帧进行非常详细的分解。如果你正覆写栈中的信息，IDA 将帮助你了解覆写了什么内容，缓冲区的哪些部分覆写了这些内容。IDA 栈显示在确定格式化字符串的内存布局时，也易受到攻击。
IDA 提供优良的搜索工具。如果你需要在一个二进制文件中搜索某个特定的指令（如jmp esp
 ）或指令序列（如 pop/pop/ret
 ），IDA 能够迅速告诉你该指令/指令序列是否存在于二进制文件中，如果存在，则指出该指令/指令序列所在位置的虚拟地址。
IDA 映射二进制文件就好像它们被加载到内存中，根据这一点，你可以更加轻松地确定成功加载破解程序所需的虚拟地址。当你拥有“写 4”1
 （write four）能力时，利用 IDA的反汇编代码清单可以轻易确定任何全局分配的缓冲区的虚拟地址以及有用的目标地址（如GOT
 条目）。
1. “写4”能力使攻击者有机会在他选择的内存位置写入他选定的4 个字节。
在下面几节中，我们将讨论其中一些功能，以及如何利用这些功能。
22.3.1 栈帧细目
虽然栈保护机制正迅速成为现代操作系统的标准功能，但许多计算机的操作系统仍然允许在栈中运行代码，基于栈的普通缓冲区溢出攻击就是一个例子。即使操作系统设置了栈保护，攻击者仍然可以利用缓冲区溢出破坏基于栈的指针变量，进而完成一次攻击。
在发现一个基于栈的缓冲区溢出后，无论你计划做什么，一定要了解：当你的数据从易受攻击的栈缓冲区溢出时，哪些栈内容将被覆写。你可能还需要了解：你到底需要在缓冲区中写入多少个字节，才能控制其中保存的各种变量，包括函数返回地址。只要你做一些算术运算，IDA 的默认栈帧显示窗口将为你回答所有这些问题。用一个变量的偏移量减去另一个变量的偏移量，即可计算出栈中任何两个变量之间的距离。下面的栈帧包含一个缓冲区，如果仔细控制相应函数的输入，可以使这个缓冲区溢出：
-0000009C result          dd ?  
-00000098 buffer_132      db 132 dup(?)           ; this can be overflowed  
-00000014 p_buf           dd ?                    ; pointer into buffer_132  
-00000010 num_bytes       dd ?                    ; bytes read per loop  
-0000000C total_read      dd ?                    ; total bytes read  
-00000008                 db ? ; undefined  
-00000007                 db ? ; undefined  
-00000006                 db ? ; undefined  
-00000005                 db ? ; undefined  
-00000004                 db ? ; undefined  
-00000003                 db ? ; undefined  
-00000002                 db ? ; undefined  
-00000001                 db ? ; undefined  
+00000000  s              db 4 dup(?)  
+00000004  r              db 4 dup(?)             ; save return address  
+00000008 filedes         dd ?                    ; socket descriptor
易受攻击的缓冲区（buffer_132
 ）的开始部分到所保存的返回地址之间的距离为 156 个字节（4- -98h
 或4- -152
 ）。我们还可以看到，在 132 个字节（-14h - -98h
 ）后，p_buf
 的内容将开始被覆写，这可能会造成问题。在触发破解程序之前，为了防止目标应用程序崩溃，你必须清楚地知道，覆写缓冲区之后的变量，将会造成什么样的后果。在这个例子中，filedes
 （一个套接字描述符）可能是另一个存在问题的变量。如果在我们溢出缓冲区之后，易受攻击的函数需要使用该套接字描述符，那么，这时我们需要小心应付，确保覆写 filedes
 不会使该函数因为出现无法预料的错误而中断。处理将要被覆写的变量的一种策略，是在这些变量中写入对程序有意义的值，从而使程序能够继续正常运行，直到破解程序被触发。
为了获得一个更具可读性的栈帧细目，我们可以修改代码清单 22-3 中的栈帧扫描代码，以枚举一个栈帧的所有成员，计算它们的表面大小，并显示每个成员与所保存的返回地址之间的距离。最终的脚本如代码清单 22-4 所示。
代码清单 22-4 使用 Python 枚举一个栈帧
   func = ScreenEA()  #process function at cursor location  
   frame = GetFrame(func)  
   if frame != -1:  
      Message("Enumerating stack for %s\n" % GetFunctionName(func))  
➊    eip_loc = GetFrameLvarSize(func) + GetFrameRegsSize(func)  
   prev_idx = -1  
   idx = 0  
   while idx  GetStrucSize(frame):  
      member = GetMemberName(frame, idx)  
      if member is not None:  
         if prev_idx != -1:  
            #compute distance from previous field to current field  
            delta = idx - prev_idx  
            Message("%15s: %4d bytes (%4d bytes to eip)\n" % \  
                    (prev, delta, eip_loc - prev_idx))  
         prev_idx = idx  
         prev = member  
         idx = idx + GetMemberSize(frame, idx)  
      else:  
         idx = idx + 1  
   if prev_idx != -1:  
      #make sure we print the last field in the frame  
      delta = GetStrucSize(frame) - prev_idx  
      Message("%15s: %4d bytes (%4d bytes to eip)\n" % \  
              (prev, delta, eip_loc - prev_idx))
这个脚本引入了 GetFrameLvarSize
 和GetFrameRegsSize
 函数（也可用在 IDC 中），分别用于获取一个栈帧的局部变量和所保存的寄存器区域的大小。保存的返回地址正好在这两个区域的下面，保存的返回地址的偏移量为这两个值的总和（➊）。如果对示例函数执行这个脚本，将生成以下输出：
Enumerating stack for handleSocket  
         result:    4 bytes ( 160 bytes to eip)  
     buffer_132:  132 bytes ( 156 bytes to eip)  
          p_buf:    4 bytes (  24 bytes to eip)  
      num_bytes:    4 bytes (  20 bytes to eip)  
     total_read:   12 bytes (  16 bytes to eip)  
              s:    4 bytes (   4 bytes to eip)  
              r:    4 bytes (   0 bytes to eip)  
         fildes:    4 bytes (  -4 bytes to eip)
这些输出对函数的栈帧进行了简要的总结，其中的注释提供了其他可能对破解程序开发者有用的信息。
事实证明，在开发针对格式化字符串漏洞的入侵程序时，IDA 的栈帧显示也非常有用。下面的代码片段提供了一个示例，这段代码使用用户提供的缓冲区（作为格式化字符串提供）调用fprintf
 函数。
   .text:080488CA        lea     eax, [ebp+format]  
➋ .text:080488D0        mov     [esp+4], eax    ; format  
   .text:080488D4        mov     eax, [ebp+stream]  
➊ .text:080488DA        mov     [esp], eax      ; stream  
   .text:080488DD        call    _fprintf  
这个示例仅向 fprintf
 函数传递两个参数：一个文件指针（➊）和作为格式化字符串的用户缓冲区的地址（➋）。这些参数占用栈顶部的两个位置，以及在函数的“序言”阶段已由实施调用的函数分配的内存。这个易受攻击的函数的栈帧如代码清单 22-5 所示。
代码清单 22-5 格式化字符串示例的栈帧
➊ -00000128                 db ? ; undefined  
   -00000127                 db ? ; undefined  