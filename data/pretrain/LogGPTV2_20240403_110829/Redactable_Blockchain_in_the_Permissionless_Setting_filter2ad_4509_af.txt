Network Security. Springer, 2014, pp. 80–96.
[13] G. Ateniese, B. Magri, D. Venturi, and E. Andrade, “Redactable
blockchain–or–rewriting history in bitcoin and friends,” in Security and
Privacy (EuroS&P), 2017 IEEE European Symposium on.
IEEE, 2017,
pp. 111–126.
[14] C. Badertscher, P. Gaˇzi, A. Kiayias, A. Russell, and V. Zikas, “Ouroboros
genesis: Composable proof-of-stake blockchains with dynamic availabil-
ity,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer
and Communications Security, ser. CCS ’18, pp. 913–930.
[3] “Accenture
2015, https://tinyurl.com/y9wfekr6.
for
patent
https://tinyurl.com/yblq9zdp.
ﬁles
[4] “Downside of bitcoin: A ledger
https://tinyurl.com/ydxjlf9e.
editable
blockchain,”
2016,
that can’t be corrected,” 2016,
[15] I. Bentov and R. Kumaresan, “How to use bitcoin to design fair
protocols,” in CRYPTO 2014, Part II, ser. LNCS, J. A. Garay and
R. Gennaro, Eds., vol. 8617.
Springer, Heidelberg, Aug. 2014, pp.
421–439.
[16] L. Breidenbach, I. Cornell Tech, P. Daian, F. Tramer, and A. Juels, “Enter
the hydra: Towards principled bug bounties and exploit-resistant smart
contracts,” in 27th USENIX Security Symposium (USENIX Security 18).
USENIX Association, 2018.
[17] J. Bruce, “The mini-blockchain scheme,” White paper, 2014.
[18] J. Camenisch, D. Derler, S. Krenn, H. C. P¨ohls, K. Samelin, and
D. Slamanig, “Chameleon-hashes with ephemeral trapdoors,” in IACR
International Workshop on Public Key Cryptography. Springer, 2017,
pp. 152–182.
[19] A. Chepurnoy, M. Larangeira,
“Rollerchain,
a blockchain with safely pruneable full blocks,” arXiv preprint
arXiv:1603.07926, 2016.
and A. Ojiganov,
[20] I. Eyal and E. G. Sirer, “Majority is not enough: Bitcoin mining is
vulnerable,” in FC 2014, ser. LNCS, N. Christin and R. Safavi-Naini,
Eds., vol. 8437. Springer, Heidelberg, Mar. 2014, pp. 436–454.
[21] J. A. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone
protocol: Analysis and applications,” in EUROCRYPT 2015, Part II,
ser. LNCS, E. Oswald and M. Fischlin, Eds., vol. 9057.
Springer,
Heidelberg, Apr. 2015, pp. 281–310.
[22] B. Gipp, J. Kosti, and C. Breitinger, “Securing video integrity using
decentralized trusted timestamping on the bitcoin blockchain.” in MCIS,
2016, p. 51.
[23] B. Gipp, N. Meuschke, and A. Gernandt, “Decentralized trusted
timestamping using the crypto currency bitcoin,” arXiv preprint
arXiv:1502.04015, 2015.
[24] E. Heilman, A. Kendler, A. Zohar, and S. Goldberg, “Eclipse attacks on
bitcoin’s peer-to-peer network.” in USENIX Security Symposium, 2015,
pp. 129–144.
[25] H. Hu, W. Han, G.-J. Ahn, and Z. Zhao, “Flowguard: building robust
ﬁrewalls for software-deﬁned networks,” in Proceedings of the third
workshop on Hot topics in software deﬁned networking. ACM, 2014,
pp. 97–102.
[26] L.-D. Ibanez, K. O’Hara, and E. Simperl, “On blockchains and the
general data protection regulation,” 2018.
[27] S. Ioannidis, A. D. Keromytis, S. M. Bellovin, and J. M. Smith,
“Implementing a distributed ﬁrewall,” in ACM CCS 00, S. Jajodia and
P. Samarati, Eds. ACM Press, Nov. 2000, pp. 190–199.
[28] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A
provably secure proof-of-stake blockchain protocol,” in Annual Interna-
tional Cryptology Conference. Springer, 2017, pp. 357–388.
[29] A. Kiayias and Q. Tang, “Traitor deterring schemes: Using bitcoin as
collateral for digital content,” in ACM CCS 15, I. Ray, N. Li, and
C. Kruegel:, Eds. ACM Press, Oct. 2015, pp. 231–242.
[30] A. E. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou, “Hawk:
The blockchain model of cryptography and privacy-preserving smart
contracts,” in 2016 IEEE Symposium on Security and Privacy.
IEEE
Computer Society Press, May 2016, pp. 839–858.
[31] R. Kumaresan and I. Bentov, “How to use bitcoin to incentivize correct
computations,” in ACM CCS 14, G.-J. Ahn, M. Yung, and N. Li, Eds.
ACM Press, Nov. 2014, pp. 30–41.
[32] R. Kumaresan, T. Moran, and I. Bentov, “How to use bitcoin to play
decentralized poker,” in ACM CCS 15, I. Ray, N. Li, and C. Kruegel:,
Eds. ACM Press, Oct. 2015, pp. 195–206.
[33] R. Matzutt, M. Henze, J. H. Ziegeldorf, J. Hiller, and K. Wehrle,
“Thwarting unwanted blockchain content insertion,” in Cloud Engineer-
ing (IC2E), 2018 IEEE International Conference on.
IEEE, 2018, pp.
364–370.
[34] R. Matzutt, J. Hiller, M. Henze, J. H. Ziegeldorf, D. M¨ullmann,
O. Hohlfeld, and K. Wehrle, “A quantitative analysis of the impact of
arbitrary blockchain content on bitcoin,” in Proceedings of the 22nd
International Conference on Financial Cryptography and Data Security
(FC). Springer, 2018.
[35] R. Matzutt, O. Hohlfeld, M. Henze, R. Rawiel, J. H. Ziegeldorf, and
K. Wehrle, “Poster: I don’t want that content! on the risks of exploiting
bitcoin’s blockchain as a content store,” in Proceedings of the 2016 ACM
SIGSAC conference on computer and communications security. ACM,
2016, pp. 1769–1771.
[36] E. McReynolds, A. Lerner, W. Scott, F. Roesner, and T. Kohno,
“Cryptographic currencies from a tech-policy perspective: Policy issues
(cid:18)(cid:20)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
and technical directions,” in International Conference on Financial
Cryptography and Data Security. Springer, 2015, pp. 94–111.
[37] A. Molina and H. Schoenfeld, “Pascalcoin version 2,” White paper,
2017.
[38] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[39] R. Pass, L. Seeman, and A. Shelat, “Analysis of the blockchain protocol
in asynchronous networks,” in Advances in Cryptology - EUROCRYPT
2017 - 36th Annual International Conference on the Theory and Appli-
cations of Cryptographic Techniques, Paris, France, April 30 - May 4,
2017, Proceedings, Part II, 2017, pp. 643–673.
[40] R. Pass and A. Shelat, “Micropayments for decentralized currencies,” in
ACM CCS 15, I. Ray, N. Li, and C. Kruegel:, Eds. ACM Press, Oct.
2015, pp. 207–218.
[41] R. Pass and E. Shi, “Fruitchains: A fair blockchain,” in Proceedings of
the ACM Symposium on Principles of Distributed Computing. ACM,
2017, pp. 315–324.
[42] I. Puddu, A. Dmitrienko, and S. Capkun, “μchain: How to forget without
hard forks.” IACR Cryptology ePrint Archive, vol. 2017, p. 106, 2017.
[43] I. Ray, N. Li, and C. Kruegel:, Eds., ACM CCS 15. ACM Press, Oct.
2015.
[44] M. Roesch et al., “Snort: Lightweight intrusion detection for networks.”
in Lisa, vol. 99, no. 1, 1999, pp. 229–238.
[45] K. Shirriff, “Hidden surprises in the bitcoin blockchain and how
they are stored: Nelson mandela, wikileaks, photos, and python soft-
ware,” Ken Shirriff’s blog (accessed July 2017) http://www. righto.
com/2014/02/ascii-bernanke-wikileaks-photographs. html, 2014.
[46] M. D. Sleiman, A. P. Lauf, and R. Yampolskiy, “Bitcoin message: Data
insertion on a proof-of-work cryptocurrency system,” in Cyberworlds
(CW), 2015 International Conference on.
IEEE, 2015, pp. 332–336.
[47] G. Tziakouris, “Cryptocurrencies—a forensic challenge or opportunity
for law enforcement? an interpol perspective,” IEEE Security & Privacy,
vol. 16, no. 4, pp. 92–94, 2018.
APPENDIX
A. Protocol extension for multiple redactions
In this section we sketch an extension to the protocol
of Fig. 2 to accommodate multiple redactions per block.
j , ctr j, y(cid:3)
:= (cid:4)sj, x(cid:3)
The intuition behind the extension is simple enough to be
explained in this paragraph; a block can potentially be redacted
n times and each redaction B(cid:3)
j of the block Bj that is approved
must contain information about the entire history of previous
redactions. In our extension, this information is stored in the
y(cid:3)
j component of the candidate block B(cid:3)
j . We now sketch the
required protocol changes.
Proposing an Edit.
To propose a redaction for block
Bj := (cid:4)sj, xj, ctr j, yj(cid:5) the user must build a candidate block
j(cid:5), where
B(cid:3)
j of the following form: B(cid:3)
j := yj||G(sj, xj) iff yj (cid:14)= G(sj, xj). Note that for the ﬁrst
j
y(cid:3)
redaction of Bj, we have that yj = G(sj, xj), and therefore
y(cid:3)
j := G(sj, xj).
Block Validation. To validate a block, the users run the
validateBlockExt algorithm described in Algorithm 5. Intu-
itively, the algorithm performs the same operations as Algo-
rithm 2, except that it takes into account the possibility of the
block being redacted multiple times. Observe that by parsing
y as y(1)||y(2)||...||y(l), we are considering a block that has
been redacted a total of l times and y(1) denotes the original
state information of the unredacted version of the block.
Voting for Candidate Blocks. To vote for a redaction, we
additionally deﬁne the following interface.
• H(ctr , G(s, x(cid:3)), y(cid:3)) ← Γ(cid:3).Vt(B(cid:3)):
takes as input a
candidate block B(cid:3) and parses B(cid:3) as (s, x(cid:3), ctr , y(cid:3)). It
Algorithm 5: validateBlockExt
input : Block B := (cid:3)s, x, ctr , y(cid:4).
output: {0, 1}
1: Validate data x, if invalid return 0;
2: Parse y as y(1)||y(2)||...||y(l), where y(i)
j ∈ {0, 1}κ ∀i ∈ [l];
if (H(ctr , G(s, x), y) < D) ∨ (H(ctr , y(1), y(1)) < D)
then return 1;
3:
4:
5: else return 0;
Algorithm 6: validateCandExt
input : Chain C = (B1, · · · , Bn) of length n, and a candidate
output: {0, 1}
block B(cid:2)
j := (cid:3)sj , x(cid:2)
||y(2)
j for an edit.
j , ctr j , yj(cid:4);
||...||y(l)
j
j
1: Parse B(cid:2)
2: Parse yj as y(1)
j , where y(i)
3:
4: Parse Bj−1 := (cid:3)sj−1, xj−1, ctr j−1, yj−1(cid:4);
5: Parse yj−1 as y(1)
6: Parse Bj+1 := (cid:3)sj+1, xj+1, ctr j+1, yj+1(cid:4);
if Γ(cid:2).validateBlockExt(B(cid:2)
j−1||y(2)
j−1||...||y(l(cid:2))
∀i ∈ [l(cid:2)];
if sj (cid:8)= H(ctr j−1, y(1)
return 0;
8: for i ∈ {2, . . . , n} do
7:
j ) = 0 then return 0;
j−1, where y(i)
j−1 ∈ {0, 1}κ
j ∈ {0, 1}κ ∀i ∈ [l];
j−1, y(1)
j−1) ∨ sj+1 (cid:8)= H(ctr j , y(1)
j
, y(1)
j
) then
9:
if
|| . . . ||y(i−1)
the fraction of votes for H(ctr , y(i)
the chain C is not at least ρ within its voting period of (cid:5)
blocks then return 0;
, y(1)
j
j
j
) in
10: return 1
outputs the hash value H(ctr , G(s, x(cid:3)), y(cid:3)) as a vote for
the candidate block B(cid:3).
The voting interface is invoked by users that wish to endorse
a candidate block by including a vote in the newly mined block
(if the candidate block is still in its voting phase). Accordingly
the policy P of the chain for redactions checks if a candidate
block has received at least a ratio of ρ votes (as output by the
Γ(cid:3).Vt) in a span of (cid:5) blocks after immediately its proposal.
Candidate Block Validation. If a block Bj is being redacted
more than once, then the corresponding candidate block B(cid:3)
j
Algorithm 7: validateChainExt
input : Chain C = (B1, · · · , Bn) of length n.
output: {0, 1}
if j = 1 then return Γ(cid:2).validateBlockExt(B1);
1: j := n;
2:
3: while j ≥ 2 do
4:
5:
6:
7:
8:
9:
10:
j
(cid:6) Bj := Head(C) when j = n
j ∈ {0, 1}κ ∀i ∈ [l];
Bj := (cid:3)sj , xj , ctr j , yj(cid:4) ;
Bj−1: := (cid:3)sj−1, xj−1, ctr j−1, yj−1(cid:4);
|| . . . ||y(l)
Parse yj as y(1)
j , where y(i)
j−1|| . . . ||y(l(cid:2))
Parse yj−1 as y(1)
∀i ∈ [l(cid:2)];
if Γ(cid:2).validateBlockExt(Bj ) = 0 then return 0;
if sj = H(ctr j−1, G(sj−1, xj−1), yj−1) then j := j − 1;
else if sj = H(ctr j−1, y(1)
Γ(cid:2).validateCandExt(C, Bj−1) = 1 ∧ P(C, Bj−1) = accept
then j := j − 1;
else return 0;
j−1 ∈ {0, 1}κ
j−1, where y(i)
j−1, y(1)
j−1) ∧
11:
12: return 1;
(cid:18)(cid:20)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
needs to be validated for accounting for the multiple redactions
that happened before; for each redaction of Bj, the votes
for that redaction must exist in the chain C. validateCandExt
(described in Algorithm 6) validates such a candidate block.
Chain Validation. To validate a chain, the user runs the
validateChainExt algorithm (described in Algorithm 7). The
only change compared to Algorithm 1 is that now yj is parsed
|| . . .||y(l)
as y(1)
j where the initial unredacted state of the block
is stored in y(1).
j
(cid:18)(cid:20)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply.