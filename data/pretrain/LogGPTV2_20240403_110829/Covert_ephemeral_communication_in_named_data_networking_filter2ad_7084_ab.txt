tailed in Section 7, conﬁrm that tight synchronization can
be achieved via NTP. Similar to [26], we also assume that
Rcv knows when Snd starts to send a new message.
Figure 1: System model.
The adversary (Adv) has three goals: (1) detecting CEMs;
(2) preventing Snd and Rcv from communicating; and (3) ac-
cessing CEMs after they expire. Adv can monitor and mod-
ify traﬃc between users. Following the deﬁnition of retroac-
tive privacy in [5], we say that a CEC system is secure if any
eﬃcient Adv can win the following game with probability at
most negligibly over 1/2:
1. Adv selects two same-length message M0 and M1, and
sends them to Snd.
2. Snd selects a random bit a and publishes Ma.
3. After Ma is expired, Adv tries to retrieve Ma.
4. Adv outputs its guess a(cid:48) for a; Adv wins if a(cid:48) = a.
In all CECs discussed below, after Snd has sent a CEM, it
deletes this CEM locally. Similarly, Rcv deletes all CEMs
soon after receiving them, i.e., before they expire. We as-
sume that all parties can eﬀectively delete data.
4. DELAY-BASED COVERT COMMUNICA-
TION
Delay-based communication relies on Rcv’s ability to dif-
ferentiate between a cache (or PIT) hit, and a cache (PIT)
miss. Snd can exploit this by selecting a set of content for
which it issues interests, therefore causing cache/PIT hits
for Rcv. To start, we show how timing information can be
used to covertly transmit a single-bit CEM from Snd to Rcv.
Then, we describe how to extend this to CEMs of arbitrary
length. To simplify the notation, we refer to the time elapsed
between issuance of an interest and the arrival of the corre-
sponding content as “content RTT”.
4.1 Single-Bit Transmission via Cache
Suppose that Snd has a single bit b ∈ {0, 1} to commu-
nicate to Rcv. If b = 1, Snd requests a content packet C.
Otherwise, it does nothing. Rcv determines b by requesting
the same content packet C. If content RTT of C is below ex-
pected RTT for non-cached content packets, Rcv sets b(cid:48) = 1.
2This assumption is common in the covert-channel litera-
ture, e.g., [4]. Moreover, this is required only for our PIT-
based protocols.
Otherwise, b(cid:48) = 0. This mechanism is reliable, i.e., b(cid:48) = b
with overwhelming probability, if the following conditions
are met:
1. Snd and Rcv pre-agree on the name of content C and
the time when Snd will send b.
2. Content C must not be popular, i.e., it must not be
present in Rt’s cache prior to Snd’s request.
3. There must be a clear distinction between RTTs asso-
ciated with cache hits and cache misses, and Rcv must
have a good estimate for at least one of them with
respect to C.
4. Rt must cache content packets for a non-negligible du-
ration.
We believe that (1) and (2) can be easily satisﬁed in practice.
With respect to (3), in order to distinguish a cache hit from
a miss, Rcv must determine an appropriate threshold value
tthresh : iﬀ RTT of C is below tthresh , then Rcv considers C as
originating from a nearby cache. tthresh can be estimated by
requesting (more than once) a large number of non- popular
content packets from the same producer that publishes C.
The ﬁrst interest for each content packet will be satisﬁed by
the producer itself. All subsequent (closely spaced) requests
for the same content packet will come from a nearby cache.
Regardless of the network topology, there is usually a clear
distinction between cache hits and cache misses3 Therefore,
it is easy to set an appropriate value for tthresh .
Rcv can determine if (4) holds by issuing multiple interests
for content packets distributed by multiple producers, and
measuring eﬀects (if any) of content caching. If 4 does not
hold, a diﬀerent mechanism – such as the one based on PIT
– is more appropriate.
We say that a CEM exchanged by Snd and Rcv is expired
if C has been removed from all caches, or once it has been
retrieved by Rcv.
Timing Constraints. In order to receive b reliably, Rcv
must observe a set of timing constraints. In particular, Rcv’s
interest for C must be processed by Rt after C is cached (and
made available to consumers), yet before C expires from the
same cache. (Without loss of generality, in the rest of the
paper we assume that content in Rt’s cache is available as
soon as it is received by the router.) Let I indicate an inter-
est for C, and [I : A → B], [C : A → B] – the time required
for I and C to travel from A to B. Let t0 be the time when
Snd writes b, either by issuing I (b = 1) or by doing noth-
ing (b = 0). Let tC = [I : Snd → Pr] + [C : Pr → Rt]. C
is available from Rt’s cache at t0 + tC . Therefore, Rcv can
“read” b starting at tb = t0 + tC − [I : Rcv → Rt]. When
[I : Snd → Rt] ≈ [I : Rcv → Rt], tb ≈ t0 + RTTRt→Pr where
RTTRt→Pr represents the RTT for C between Rt and Pr. Rcv
must retrieve b before tb + ExpRt, where ExpRt represents
the freshness ﬁeld of C, or the time after which C is evicted
from Rt’s cache, whichever comes ﬁrst. Figure 2a summa-
rizes these observations.
Time to read a single bit depends on the RTT associated
with a cache hit, from Rcv’s point of view. Let RTThit and
RTTmiss indicate the average RTT for a cache hit and cache
miss relative to C, as observed by Rcv. Rcv sets b = 1 iﬀ
the RTT of C is below RTThit + ∆ < RTTmiss, where ∆ is a
small constant used to account for variance in C’s RTT. Rt
can therefore determine b within RTThit + ∆.
3See Section 7, ﬁgures 3a and 3b.
Router (Rt)Sender (Snd)Receiver (Rcv)Producer (Pr)NDN17Covert messages distributed with this technique are ephem-
eral, i.e., they become unavailable after a certain amount of
time without any further action from Snd or Rcv. Because
Rt caches forwarded traﬃc, C will be eventually ﬂushed from
Rt’s cache. We claim that C is always a good candidate for
deletion: since C is not popular, both Least Frequently Used
(LFU) and Least Recently Used (LRU) cache replacement
policies will consider it a good candidate for removal.
Once Rcv requests it, C will be cached regardless of the
original value of b. Therefore, after being retrieved, b will
be set to 1 until C is ﬂushed from Rt’s cache.
Our experiments, reported in Section 7, show that this
technique provides high bandwidth, with a low error rate.
Moreover, it is relatively easy to implement, since it does
not require strict time synchronization.
4.2 Single-Bit Transmission via PIT
In some circumstances, cache-based CEC is not applica-
ble:
1. Despite its emphasis on in-network caching, NDN does
not mandate router cache size. In fact, a some routers
might have no cache at all, e.g., small, low-cost and/or
low-power embedded routers.
2. Rt’s entire cache may be overwritten before Rcv issues
I. This can happen if Rt’s cache is very small, and the
router forwards a large amount of traﬃc.
3. To prevent cache pollution attacks [10, 31], Rt might
not cache content packets that are forwarded only once.
This behavior would force Snd to issue I multiple times
before C is cached by Rt, thus negatively aﬀecting both
bandwidth and detectability.
4. Rt may implement cache privacy techniques that in-
volve delaying serving C when it is retrieved from the
cache [1].
To overcome the above limitations, we construct a technique
based exclusively upon PIT state.
It requires strict time
synchronization between Snd and Rcv. It is based on PIT
hits (see Section 2): when Rt receives interest I(cid:48) = I, while
I is still in Rt’s PIT, the two interests are “collapsed” within
the same PIT entry. Rt adds the incoming interface of I(cid:48) to
the PIT entry of I, and does not propagate I(cid:48) any further.
Once C is received by Rt, it is forwarded to the interfaces
on which I and I(cid:48) were received.
This feature of NDN can be used by Snd and Rcv to
If b = 1, Snd issues
covertly exchange one bit as follows.
I, otherwise it does nothing. To receive b, Rcv issues I(cid:48) = I
while an entry corresponding to I is still in Rt’s PIT. If I is
in the PIT, Rcv’s interest is satisﬁed faster than otherwise.
This is because, by the time I(cid:48) arrives at Rt, either: (1) the
original I has been already processed and is being forwarded
by subsequent upstream routers, or (2) C is already on its
way back to Snd but has not yet reached Rt. In either case,
I(cid:48) is collapsed by Rt and is not forwarded further. If Rcv
can correctly measure the corresponding diﬀerence in RTT,
it can reliably determine b. (As discussed earlier, Rcv can
easily measure the RTT for retrieving content directly from
the same producer that originated C.)
In the context of this technique, we say that a CEM has
expired if I has been removed from Rt’s PIT and from all
caches, or it has been retrieved by Rcv.
Timing Constraints. While PIT-based CEC works re-
gardless of Rt’s cache behavior (or even cache availability),
it imposes much stricter timing requirements on Rcv. Specif-
ically, I(cid:48) must be received by Rt after I (if issued) is added to
Rt’s PIT. Also, I(cid:48) must be received before C is received and
forwarded by Rt. This gives Rcv a time window of RTTRt→Pr.
We note, however, that the unwitting producer of C can be
easily chosen by Snd and Rcv to be suﬃciently remote, so as
to maximize this window.
As in the cache-based technique, messages exchanged via
PIT are ephemeral:
if I is not issued on time, the corre-
sponding PIT entry is removed once C is forwarded to Snd.
Also, after Rcv issues I(cid:48), any attempt to retrieve b by issu-
ing further interests for C (while the PIT entry still exists)
will result in those interests being collapsed (therefore set-
ting b = 1), regardless of the original value of b. Figure 2b
depicts these constraints.
4.3 Tandem Data Packets
Assuming wide-scale deployment of NDN, when Rt is far
from Rcv, RTT-s associated with cache hits and misses may
ﬂuctuate signiﬁcantly over time. In order to reduce the prob-
ability of erroneously detecting cache hits/misses, we intro-
duce a technique called Tandem Data Packets (TDP) that
uses two content packets to covertly receive a single bit. To
transmit b, Snd and Rcv pre-agree on content packets C0
and C1, which are assumed not to be in any router’s cache.
First, Snd requests Cb. Then, Rcv issue two consecutive in-
terests: one for C0 and one for C1.
If RTT of C0 is less
than that of C1, Rcv sets b(cid:48) = 0, otherwise b(cid:48) = 1. CEM is
exchanged correctly if b(cid:48) = b.
This technique does not require Rcv to make any a priori
assumption on the exact RTT associated with cache hits and
misses, except that RTT of Cb is less than that of C¬b. As
our experiments conﬁrm, this reduces receiver error, since
RTT for both hits and misses is continuously updated ac-
cording to network conditions. After Rcv determines it, b
becomes inaccessible. Since both C0 and C1 will be in Rt’s
cache, any diﬀerence in RTTs for C0 and C1 will not depend
on b. Therefore, b essentially expires once it is retrieved by
Rcv or removed from Rt’s cache.
Timing Constraints. Identical to those in Section 4.1.
4.4 Transmitting Multi-Bit Messages
Naturally, Snd and Rcv may want to exchange multi-bit
messages. We discuss how to determine Snd’s and Rcv’s
speeds separately, since the two could send and receive at
diﬀerent rates.
Let M = b1, . . . , bn be an n-bit string. Suppose that Snd
and Rcv agree on n diﬀerent content packets C1, ..., Cn. In-
stead of waiting for the full RTT of C, Snd can send new Ii
for Ci before Ci−1 has been received. Snd selects an interval
t; two consecutive interests Ii, Ii+1 are sent at ti and ti+1,
where ti+1 = ti + t. The minimum value for t is denoted
as tmin ; it corresponds to sending an uninterrupted burst of
interests. Similarly, Rcv selects t which is used to determine
how subsequent interests are spaced. Snd and Rcv can select
t independently, as long as the timing constraints associated
with the protocol are not violated. We evaluate how this
technique aﬀects transmission errors as a function of t and
report our ﬁndings in Section 7.
Transmitting Multiple Bits with a Single Interest.
For eﬃciency reasons, Snd can use a generalized TDP tech-
nique to send multiple bits using a single interest. Two
parties agree a priori on a set of content packets, which we
18(a) Cache
(b) PIT
Figure 2: Time constrains for retrieving a CEM published using Rt’s cache (top) and PIT (bottom). The colored area delimits
the interval in which Rcv can retrieve b.
represent as a matrix:
Y =
C(1,1)
...
··· C(1,2m)
C((cid:96),1)
C((cid:96),2m)
where m is the number of bits transmitted using one inter-
est, and (cid:96) = (cid:100)n/m(cid:101). In order to publish M , Snd splits it in
words W1, . . . , W(cid:96) of m bits each (i.e., W1 = (b1, . . . , bm),