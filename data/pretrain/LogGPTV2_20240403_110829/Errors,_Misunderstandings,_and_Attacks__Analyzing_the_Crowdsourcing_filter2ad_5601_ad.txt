3
2
2
22
Total
3.2%
2
4.4%
1
1.1%
2
1.9%
1
5.1%
2
23
15.3%
5.44% 6.84% 4.91% 13.68% 30.9%
6.5%
5
6.1%
5
14
14.2%
20
8.8%
7.72% 8.77% 8.42% 10.70% 35.6%
66.49%
6
15
29
11
10
9
24
5
16
6
14
14
Table 5: Count of FP errors, which happened in web pages, classified according to the type of impacted elements and the responsibility for
the error among the classes of websites.
Filter Srource
%
FN error in home pages
31.16%
FN error in (internal) content pages
23.24%
Modifying existing filter
14.08%
From merging with other filter-lists
10.74%
Making filter more generic
4.23%
No information available (before 2009) 16.55%
Table 6: Sources of FP-error-causing filters in EasyList.
name for legitimate content, then the ad blocker who introduced the
filter that caused the FP error is the responsible party. We analyzed
the element types that were impacted by FP errors. We used the
W3C [81] standards to cluster and name the elements. Specifically,
we used HTML 5.2 standard [79], published on 14 December 2017.
We clustered the elements according to the EasyList action and
element type, as Table 5 illustrates.
Table 5 shows that ad-blockers had more responsibility (the
source of the error) than the website designers since ad-blockers
caused 65% of the errors. A large proportion was on small websites
(NR). Looking at dataset D1, the majority of ad-blocking failures
happened because they used generic filters with broad scopes. The
“Sections” element types such as article, body, and header, had the
highest number. The ad-block software hid this element using the
element’s attributes. The second type is the element type “Links"
that refers to an element that has an src attribute. Ad-blockers
block an HTTP request made to its source. The filter used is a
generic string that is utilized as a signature to match the URL.
On the other hand, a large percentage of the designers’ failures
occurred because of using strings in domains and URLs that were
already matched by filters, especially when they used CSS pop-
ups. Moreover, it merits to mention that designers of the top 500
websites—used by millions—had more responsibility for FP errors
than the ad blockers. However, about 34% of the errors impacted
“Embedded content" such as the iFrame element. The reason for
that was the embedded content used an src attribute that referred
to a source provided by a third party. Hence, the designers of the
third party bore the responsibility for that error.
Figure 4 shows the sources of errors, clustered into four groups.
The first group is EasyBlockR, which means the error happened
because ad blockers blocked web requests, and EasyHideE rep-
resents the reason that ad blockers hide elements incorrectly. The
group DesBlockR is due to the designers using incorrect strings
in the URL, and the group DesHideE results from the designers
using incorrect attributes for elements that were matched by Ea-
syList filters. The DesHideE had a lower number of errors among
all the classes of websites. The DesBlockR had high impacts on
the top 500 websites, but EasyBlockR took a high responsibility
in the rest of the website classes.
The ad blockers and website designers are both cause FP errors
in different place and by different methods.
4.5 Analysis of Filters causing FP Errors
Next, we take a closer look at the filters that caused the errors.
A filter is added to EasyList by creating a new filter, modifying
an existing filter, or transferring from another ad-block list. We
extracted the ground truth of the filters from dataset D2FP.
Table 6 shows the percentage of the sources of error-causing
filters. More than 54% of error-causing filters came from adding
new filters directly (31% on home pages, and 23% on internal pages).
Then 18% of the sources were from modifying existing filters. Filter
lists such as Fanboy [15] were merged with EasyList, and about
one in ten error-causing filters was from these filter lists. However,
17% of the error-causing filters were added to the first EasyList
version in our dataset. We do not know where the filters added by
the Editors to the first version in 2009 came from. Furthermore,
4% errors were caused by maximizing the existing filter scope (i.e.,
making the filter generic instead of specific). Even though this
percentage seems small, generic filters that caused errors on one
website may cause errors on many other websites.
Each filter from EasyList uses a signature to match ad elements.
We analyzed the signatures used by error-causing filters to match
the elements. The signatures depend on HTML attributes to hide
the elements or URLs that use src attributes to block HTTP GET
requests. We studied each filter to extract the HTML attributes used
to build the signatures. We grouped these attributes and named
them according to the HTML 5.2 standard [79] of the W3C standard
(Section 4). As Table 7 shows, the majority of error-causing filters
used global attributes such as ID and Class name. A tiny number of
237
Analyzing the Crowdsourcing Process of Ad-blocking Systems
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Type of reason
Insufficient detail
Not ad or the error solved before
Report in wrong forum section
Adware
Incomplete report
Software Issue
%
62.8%
15.4%
8.3%
8.37%
2.9%
2.3%
Attribute Category
%
52.4%
18.1%
14.8%
7.1%
3.9%
2.9%
0.9%
Global Attribute
Tree Order
Tree Order + Specific Link
Global Attribute + Tree Order
Specific Attribute + Specific Link
Global Attribute + Specific Link
Specific Attribute
Table 7: The attributes used by error-
causing filters to match HTML elements.
error-causing filters used specific attributes. For example, for src
attribute, it may use either a domain name or part of the address.
Finally, we investigated the links that were used to block HTTP GET
requests. We found that the majority of the error-causing filters
(68%) used string (i.e., part of the address) as a signature. Indeed,
this part of the address makes a filter more generic, which leads to
more errors.
Table 8: The reasons of rejecting FN error
reports.
# Reports Alexa Rk.
Website
201
youtube.com
Yahoo.com
98
facebook.com 73
google.com
45
41
Twitch.tv
31
CBS.com
thevideo.me
23
Table 9: The most website indicated in
FN error reports (Alexa Rk means Alexa’s
ranking).
2
6
3
1
43
1716
656
4.6 FN Errors Reported by the Crowd
EasyList depends entirely on crowdsourcing to detect FN errors
in the wild. Between November 2009 and December 2018, about
17,968 reports were submitted. Each report was represented as a
post with its thread or replies. Figure 5 shows that 29% of the posts
did not have a response from EasyList editors. To understand if
EasyList editors missed those reports or solved the errors without a
public response, we extracted the incomplete reports from dataset
D2B. We manually checked the reports. We found that the reports
missed crucial details such as the names of the websites that had FN
errors, and the editors closed the report since they are not complete.
From all the FN reports, 20.6% of FN error reports were correct, and
20.8% of FN error reports were only about incorrect (or rejected)
reports. The rest of the reports did not show strong evidences to
be classified in either group. Even though the reports may have
sufficient details such as the name/URL of the website and the type
of errors, the editors did not respond or did not confirm whether
the reports were correct or incorrect, or simply because the reports
were closed. Certain reports were indeed discussed by the forum
members but were closed without editors’ approval. In general,
such limitations of the public forums make it difficult to track the
stats of some FN reports.
We analyzed the incorrect reports and listed the results in Ta-
ble 8. More than 62% of them were ignored because the reports
did not provide sufficient details about the ads and websites, or
the reporters did not respond to the editors’ questions. Another
important observation is that about 8% of the reports were rejected
because of ad-ware. Many users thought their ad-blocker failed
to block specific ads, but the truth is that their computers were
infected by adware that was overwriting the ad-blocker to inject
ads. About 97.6% of these users were anonymous or new members.
Our analysis above indicates that lots of crowd efforts were
wasted due to incorrect/incomplete reports. The forum web inter-
face should be better designed to ensure all important information
be collected.
Figure 5: # of Replies to the topics that represent the reports.
4.7 Websites with FN Errors
From dataset D2, 12,866 websites were mentioned to have FN errors.
Some of them were indicated in multiple reports. Table 9 illustrates
the most mentioned websites in the reports. The common factor
of these websites is that they are high-ranked websites. Intuitively,
many users visit these websites, which increases the opportunity to
report FN errors. However, we need to understand if these websites
used countermeasures against ad-block systems, hence the increase
in the number of FN errors. Therefore, we extracted the correct
reports that mentioned these websites from dataset D2A . Then we
inspected the filters that were added to correct these errors. We
found that the majority of the filters were added to block third-party
requests from reputable ad networks. The implication is that the FN
errors in high-rank websites also occurred because of third-party
ad networks that were dealt with. We conclude that the most of FN
errors happened in High ranked websites are because of the third
parity (ad publishers).
5 ADVERSARIAL EVASION ATTACKS
Existing works have discussed some vulnerabilities of EasyList [51,
82, 83] that allow ad publishers or website developers to bypass the
ad-blockers to deliver an advertisement to users. While the arms
race between ad publishers and the EasyList community is carrying
238
0 Reply: 29%1 Reply: 45%2 Replies: 9%3 Replies: 6%4 Replies: 3%> 4 Replies: 8%IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Alrizah et al.
on, no study has looked into the problem from an empirical and
longitudinal prescriptive. In the following, we present a series of
vulnerabilities that are exploited (or can be exploited) to execute
evasion attacks.
Specifically, we analyze 15 attacks and group them in three cate-
gories. The first category, called More-Studied Attacks, includes
four types of attacks that have been investigated by previous re-
search in one way or another. The second category, called Less-
Studied Attacks, contains three attacks that are not well under-
stood even though they are known. In the third category, We intro-
duce eight Nonstudied Attacks, which have not been reported by
the research community. Different from the previous research, our
vulnerability measurement is based on analysis of the historical
behavior of EasyList, and a rich set of data sources including the
syntax change of the filters, the change of signatures used to match
the ad elements in error reports, the behaviour of ad servers, and
the unsolvable reports.
5.1 More-Studied Attacks
The WebSocket protocol gives web developers
1. WebSockets.
the ability to use client-side JavaScript to establish a connection to
an ad server. This connection allows the server to push messages to
the client without a request from the client. It is known that ad net-
works have been using webSockets to circumvent ad blockers [12].
By analyzing our dataset, we show that EasyList had blocked 291
websites and 137 ad servers for using WebSockets since 2016. The
ad network Uponit [76] (which is listed in EasyList blacklist) has
used WebSocket.
A large body of existing work has studied
2. Anti-ad Blocker.
anti-ad blockers [30, 51, 89, 90]. Their research goals vary from
measuring the prevalence of anti-ad blockers, to designing methods
to bypass anti ad-blockers, to studying the reactions of the websites
that utilized anti-ad blockers against ad blockers. In particular, Zhu
et al. [89] listed three reactions: showing warning messages, switch-
ing ads, or reporting ad-block statistics. Our analysis of the dataset
D2 reveals a broader range of reactions, including restricting con-
tent on the sites using paywalls, blocking the websites, redirecting
the users to different websites or content, and blocking legitimate
content on the websites.
A sophisti-
3. Randomization of Ad Attributes and URLs.
cated method of circumventing ad blocker was proposed by [83].
The idea is that the server can randomize the DOM of the web page
construction to hide the ad signatures. In addition, the whole URLs
are encrypted using public-key cryptography to randomize the URL
strings. To counter this evasion, EasyList introduced two new filter
syntaxes: -abp-has to filter out an ad element according to its con-
tent subtree, and -abp-contains() to filter out an ad element
according to a specified string that the element contains. EasyList as
well as other filter lists take advantage of the new CSS4 pseudo-class:
‘:has()’ [80] and jQuery API :contains() Selector [34]. For example,
the filter facebook.com#?#.outer:-abp-has(a:abp-
contains(ad)) selects a child node that contains string ad of
a node that has class outer on facebook.com. We analyzed the
filters that used this syntax and found 15 websites that performed
such randomization. Facebook appeared most frequently in the
239
Ad Network