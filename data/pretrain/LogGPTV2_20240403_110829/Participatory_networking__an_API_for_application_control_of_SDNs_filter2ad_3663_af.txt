tiple applications to safely communicate with an SDN controller.
Network QoS and Reservations Providing a predictable network
experience is not a new goal, and there is a vast body of protocols
and literature on this topic. PANE relies heavily on existing mecha-
nisms, such as reservations and prioritized queue management [29,
44], while adding user-level management and resource arbitration.
PANE also goes beyond QoS, integrating hints and guarantees about
access control and path selection. To date, we have focused on
mechanisms exposed by OpenFlow switches; we expect other mech-
anisms for network QoS could be integrated as well.
Like PANE, protocols such as RSVP [8] and NSIS [33] pro-
vide applications with a way to reserve network resources on the
network. PANE, however, is designed for single administrative do-
mains, which permits centralized control for policy decisions and
accounting, and sidesteps many of their deployment difﬁculties.
PANE provides control over the conﬁguration of network paths,
which RSVP and NSIS do not, and goes beyond reservations with
its hints, queries, and access control requests, which can be made
instantly or for a future time. Finally, RSVP limits aggregation sup-
port to multicast sessions, unlike PANE’s support for ﬂow groups.
Kim, et al. [29] describe an OpenFlow controller which conﬁg-
ures QoS using application-described requirements and a database
of network state. PANE’s runtime performs a similar function for
the Reserve action, and also supports additional actions.
Recent works in datacenter networks, such as Oktopus [3] and
CloudNaaS [4], offer a predictable experience to tenants willing
to fully describe their needs as a virtual network, only admitting
those tenants and networks whose needs can be met through careful
placement. This approach is complementary to PANE’s, which al-
lows principals to request resources from an existing network with-
out requiring complete speciﬁcation.
Software-Deﬁned Networking PANE is part of a line of research
into centralized network management including Onix [30], Tesser-
act [49], and CoolAid [10]. CoolAid provides high-level requests
and intentions about the network’s conﬁguration to its operators;
PANE extends this functionality to regular users and applications
with the necessary delegation and accounting, and implements them
in SDNs. PANE builds upon the abstractions proposed by Onix and
Tesseract for, respectively, OpenFlow and 4D [24] control-planes.
Recent developments in making SDNs practical (e.g.,[25, 34,
46]) improve the deployability of PANE. Resonance [36] delegates
access control to an automated monitoring system, using OpenFlow
to enforce policy decisions. Resonance could be adapted to use
PANE as the mechanism for taking action on the network, or could
be composed with PANE using a library such as Frenetic [19].
Expressing policies in a hierarchy is a natural and common way
to represent delegation of authority and support distributed author-
ship. Cinder [40], for example, uses a hierarchy of taps to provide
isolation, delegation, and division of the right to consume a mobile
device’s energy. PANE uses HFTs [16] as a natural way to express,
store, and manipulate these policies directly, and still enable an ef-
ﬁcient, equivalent linear representation of the policy.
FlowVisor [41] divides a single network into multiple slices in-
dependently controlled by separate OpenFlow controllers. FlowVi-
sor supports delegation – a controller can re-slice its slice of the net-
work. Each of these controllers sends and receives primitive Open-
Flow messages. In contrast, PANE allows policy authors to state
high-level, declarative policies with ﬂexible conﬂict resolution.
Networking and Declarative Languages PANE’s design is in-
spired by projects such as the Margrave tool for ﬁrewall analy-
sis [37] and the Router Conﬁguration Checker [15], which apply
declarative languages to network conﬁguration. Both use a high-
level language to detect conﬁguration mistakes in network poli-
cies by checking against predeﬁned constraints. PANE, however,
directly integrates such logic into the network controller.
FML [26] is a Datalog-inspired language for writing policies that
also supports distributed authorship. The actions in PANE are in-
spired by FML, which it extends by involving end-users, adding
queries and hints, and introducing a time dimension to action re-
quests. In an FML policy, conﬂicts are resolved by a ﬁxed scheme
– deny overrides waypoints, and waypoints override allow. By con-
trast, PANE offers more ﬂexible conﬂict resolution operators. FML
also allows policies to be prioritized in a linear sequence (a policy
cascade). PANE can also express a prioritized sequence of policies,
in addition to more general hierarchies.
The eXtensible Access Control Markup Language (XACML)
provides four combiner functions to resolve conﬂicts between sub-
policies [23]. These functions are designed for access control de-
cisions and assume an ordering over the subpolicies. By contrast,
HFTs support user-supplied operators designed for several actions
and consider all children equal.
10. CONCLUSION
The design and conﬁguration of today’s networks is already in-
formed by application needs (e.g., networks with full-bisection band-
width for MapReduce-type frameworks, or deadline-based queu-
ing [3] for interactive web services). PANE provides a way for the
network to solicit and react to such needs automatically, dynami-
cally, and at a ﬁner timescale than with human input. To do this,
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1110100Latency of flow mod install (ms)HistogramCDF 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1110100Latency of interleaved queue creation (ms)HistogramCDF 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1110100Latency of consecutive queue creation (ms)HistogramCDFour design overcomes the two challenges of decomposing network
control, and resolving conﬂicts between users’ needs.
Acknowledgments
This work was partially supported by NSF grant 1012060. An-
drew Ferguson is supported by an NDSEG fellowship. We thank
Theo Benson, Srikanth Kandula, Joe Politz, Jennifer Rexford, Scott
Shenker, and our shepherd Vyas Sekar for invaluable discussions
and suggestions; Justin Pombrio for improving the implementation
of PANE’s Network Information Base; Jordan Place for ﬁrst imple-
menting PANE support in Ekiga; and Jeff Rasley for help with the
Hadoop experiments.
11. REFERENCES
[1] M. Al-Fares, S. Radhakrishnan, B. Raghavan, N. Huang, and
A. Vahdat. Hedera: Dynamic ﬂow scheduling for data center
networks. In NSDI ’10.
[2] https://aws.amazon.com/message/65648/.
[3] H. Ballani, P. Costa, T. Karagiannis, and A. Rowstron. Towards
predictable datacenter networks. In SIGCOMM ’11.
[4] T. Benson, A. Akella, A. Shaikh, and S. Sahu. CloudNaaS: A Cloud
Networking Platform for Enterprise Applications. In SOCC ’11.
[5] T. Benson, A. Anand, A. Akella, and M. Zhang. MicroTE: Fine
Grained Trafﬁc Engineering for Data Centers. In CoNEXT ’11.
[6] D. Bonﬁglio, M. Mellia, M. Meo, and D. Rossi. Detailed analysis of
skype trafﬁc. IEEE Trans. on Multimedia, 11(1):117–127, 2009.
[7] R. Braden, D. Clark, and S. Shenker. Integrated Services in the
Internet Architecture: an Overview. RFC 1633, June 1994.
[8] R. Braden, L. Zhang, S. Berson, S. Herzog, and S. Jamin. Resource
ReSerVation Protocol (RSVP). RFC 2205, Sept. 1997.
[9] P. Chandra, A. Fisher, C. Kosak, T. S. E. Ng, P. Steenkiste,
E. Takashi, and H. Zhang. Darwin: Resource Management for
Value-added Customizable Network Service. In IEEE ICNP ’98.
[10] X. Chen, Y. Mao, Z. M. Mao, and J. Van der Merwe. Declarative
Conﬁguration Management for Complex and Dynamic Networks. In
CoNEXT ’10.
[11] M. Chowdhury and I. Stoica. Coﬂow: An Application Layer
Abstraction for Cluster Networking. In HotNets ’12.
[12] A. R. Curtis, W. Kim, and P. Yalagandula. Mahout: Low-Overhead
Datacenter Trafﬁc Management using End-Host-Based Elephant
Detection. In IEEE INFOCOM ’11.
[13] J. Dean and S. Ghemawat. MapReduce: Simpliﬁed data processing
on large clusters. Commun. ACM, 51(1):107–113, 2008.
[14] K. J. Duda and D. R. Cheriton. Borrowed-virtual-time (BVT)
scheduling: supporting latency-sensitive threads in a general-purpose
scheduler. In SOSP ’99.
[15] N. Feamster and H. Balakrishnan. Detecting BGP conﬁguration
faults with static analysis. In NSDI ’05.
[16] A. D. Ferguson, A. Guha, C. Liang, R. Fonseca, and
S. Krishnamurthi. Hierarchical Policies for Software Deﬁned
Networks. In HotSDN ’12.
[17] A. D. Ferguson, A. Guha, C. Liang, R. Fonseca, and
S. Krishnamurthi. Participatory Networking: An API for Application
Control of SDNs. Technical Report CS-13-03, Brown Univ., 2013.
[18] A. D. Ferguson, A. Guha, J. Place, R. Fonseca, and S. Krishnamurthi.
Participatory Networking. In Hot-ICE ’12.
[19] N. Foster, M. J. Freedman, R. Harrison, J. Rexford, M. L. Meola, and
D. Walker. Frenetic: A High-Level Language for OpenFlow
Networks. In PRESTO ’10.
[20] A. Gember, P. Prabhu, Z. Ghadiyali, and A. Akella. Towards
Software-Deﬁned Middlebox Networking. In HotNets ’12.
[21] M. Ghobadi, S. H. Yeganeh, and Y. Ganjali. Rethinking End-to-End
Congestion Control in Software-Deﬁned Networks. In HotNets ’12.
[22] https://github.com/blog/
1346-network-problems-last-friday.
[23] S. Godik and T. M. (editors). eXtensible Access Control Markup
Language, version 1.1, Aug. 2003.
[24] A. Greenberg, G. Hjalmtysson, D. A. Maltz, A. Myers, J. Rexford,
G. Xie, H. Yan, J. Zhan, and H. Zhang. A clean slate 4D approach to
network control and management. SIGCOMM CCR, 35:41–54, 2005.
[25] N. Gude, T. Koponen, J. Pettit, B. Pfaff, M. Casado, N. McKeown,
and S. Shenker. NOX: Towards an Operating System for Networks.
SIGCOMM CCR, 38:105–110, July 2008.
[26] T. L. Hinrichs, N. S. Gude, M. Casado, J. C. Mitchell, and S. Shenker.
Practical Declarative Network Management. In WREN ’09.
[27] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed. ZooKeeper: Wait
free coordination for Internet-scale systems. In USENIX ATC ’10.
[28] D. Katabi, M. Handley, and C. Rohrs. Congestion Control for High
Bandwidth-Delay Product Networks. In SIGCOMM ’02.
[29] W. Kim, P. Sharma, J. Lee, S. Banerjee, J. Tourrilhes, S.-J. Lee, and
P. Yalagandula. Automated and Scalable QoS Control for Network
Convergence. In INM/WREN ’10.
[30] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski, M. Zhu,
R. Ramanathan, Y. Iwata, H. Inoue, T. Hama, and S. Shenker. Onix:
A Distributed Control Platform for Large-scale Production Networks.
In OSDI ’10.
[31] L. Lamport. The Part-Time Parliament. ACM Trans. Comput. Syst.,
Architecture. In SIGCOMM ’05.
[51] Yap, Kok-Kiong and Huang, Te-Yuan and Dodson, Ben and Lam,
Monica S. and McKeown, Nick. Towards Software-Friendly
Networks. In APSys ’10.
[52] M. Zaharia, D. Borthakur, J. Sen Sarma, K. Elmeleegy, S. Shenker,
and I. Stoica. Delay Scheduling: A Simple Technique for Achieving
Locality and Fairness in Cluster Scheduling. In EuroSys ’10.
16(2):133–169, May 1998.
[32] B. Lantz, B. Heller, and N. McKeown. A Network in a Laptop: Rapid
Prototyping for Software-Deﬁned Networks. In HotNets ’10.
[33] J. Manner, G. Karagiannis, and A. McDonald. NSIS Signaling Layer
Protocol (NSLP) for Quality-of-Service Signaling. RFC 5974, Oct.
2010.
[34] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar,
L. Peterson, J. Rexford, S. Shenker, and J. Turner. OpenFlow:
Enabling Innovation in Campus Networks. SIGCOMM CCR,
38:69–74, 2008.
[35] J. Naous, R. Stutsman, D. Mazières, N. McKeown, and N. Zeldovich.
Enabling delegation with more information. In WREN ’09.
[36] A. K. Nayak, A. Reimers, N. Feamster, and R. Clark. Resonance:
dynamic access control for enterprise networks. In WREN ’09.
[37] T. Nelson, C. Barratt, D. J. Dougherty, K. Fisler, and
S. Krishnamurthi. The Margrave tool for ﬁrewall analysis. In LISA
’10.
[38] L. Popa, G. Kumar, M. Chowdhury, A. Krishnamurth, S. Ratnasamy,
and I. Stoica. FairCloud: Sharing The Network In Cloud Computing.
In SIGCOMM ’12.
[39] B. Raghavan, K. V. Vishwanath, S. Ramabhadran, K. Yocum, and
A. C. Snoeren. Cloud Control with Distributed Rate Limiting. In
SIGCOMM ’07.
[40] A. Roy, S. M. Rumble, R. Stutsman, P. Levis, D. Mazières, and
N. Zeldovich. Energy Management in Mobile Devices with the
Cinder Operating System. In EuroSys ’11.
[41] R. Sherwood, G. Gibb, K.-K. Yap, G. Appenzeller, M. Casado,
N. McKeown, and G. Parulkar. Can the Production Network Be the
Testbed? In OSDI ’10.
[42] A. Shieh, E. G. Sirer, and F. B. Schneider. Netquery: A Knowledge
Plane For Reasoning About Network Properties. In SIGCOMM ’11.
[43] E. G. Sirer, W. de Bruijn, P. Reynolds, A. Shieh, K. Walsh,
D. Williams, and F. B. Schneider. Logical Attestation: An
Authorization Architecture For Trustworthy Computing. In SOSP
’11.
[44] I. Stoica, H. Zhang, and T. S. E. Ng. A hierarchical fair service curve
algorithm for link-sharing, real-time and priority services. In
SIGCOMM ’97.
[45] D. L. Tennenhouse, J. M. Smith, W. D. Sincoskie, D. Wetherall, and
G. Minden. A Survey of Active Network Research. In IEEE
Communications Magazine, January 1997.
[46] A. Voellmy and P. Hudak. Nettle: Taking the Sting Out of
Programming Network Routers. In PADL ’11.
[47] G. Wang, T. S. E. Ng, and A. Shaikh. Programming Your Network at
Run-time for Big Data Applications. In HotSDN ’12.
[48] C. Wilson, H. Ballani, T. Karagiannis, and A. Rowstron. Better never
than late: meeting deadlines in datacenter networks. In SIGCOMM
’11.
[49] H. Yan, D. A. Maltz, T. S. E. Ng, H. Gogineni, H. Zhang, and Z. Cai.
Tesseract: A 4D Network Control Plane. In NSDI ’07.
[50] Z. Yang, D. Wetherall, and T. Anderson. A DoS-limiting Network