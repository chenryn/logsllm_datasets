### Multiple Applications Safely Communicating with an SDN Controller

**Network QoS and Reservations:**
Providing a predictable network experience is a well-established goal, supported by a substantial body of protocols and literature. PANE (Policy-Aware Network Environment) leverages existing mechanisms such as reservations and prioritized queue management [29, 44], while adding user-level management and resource arbitration. PANE extends beyond traditional Quality of Service (QoS) by integrating hints and guarantees about access control and path selection. Our current focus has been on mechanisms exposed by OpenFlow switches, but we anticipate that other QoS mechanisms could be integrated in the future.

**Comparison with RSVP and NSIS:**
Similar to PANE, protocols like RSVP [8] and NSIS [33] allow applications to reserve network resources. However, PANE is designed for single administrative domains, enabling centralized control for policy decisions and accounting, thereby avoiding many deployment challenges. PANE provides control over network path configuration, which RSVP and NSIS do not, and supports additional features such as hints, queries, and access control requests, which can be made instantly or scheduled for a future time. Additionally, PANE supports flow groups, unlike RSVP, which limits aggregation support to multicast sessions.

**Related Work:**
- **OpenFlow Controller:** Kim et al. [29] describe an OpenFlow controller that configures QoS based on application requirements and a database of network state. PANE's runtime performs a similar function for the Reserve action and supports additional actions.
- **Datacenter Networks:** Recent works like Oktopus [3] and CloudNaaS [4] offer predictable experiences to tenants who fully describe their needs as virtual networks. This approach complements PANE, which allows users to request resources from an existing network without requiring complete specification.
- **Software-Defined Networking (SDN):** PANE is part of a research line into centralized network management, including Onix [30], Tesseract [49], and CoolAid [10]. CoolAid provides high-level requests and intentions about network configuration to operators; PANE extends this functionality to regular users and applications with necessary delegation and accounting, implemented in SDNs. PANE builds upon abstractions proposed by Onix and Tesseract for OpenFlow and 4D [24] control-planes.
- **Recent Developments in SDNs:** Advances in making SDNs practical [25, 34, 46] improve PANE's deployability. For example, Resonance [36] delegates access control to an automated monitoring system using OpenFlow to enforce policy decisions. Resonance could be adapted to use PANE for network actions or composed with PANE using a library like Frenetic [19].

**Hierarchical Policies:**
Expressing policies in a hierarchy is a natural way to represent delegation of authority and support distributed authorship. Cinder [40], for instance, uses a hierarchy of taps to provide isolation, delegation, and division of the right to consume a mobile device’s energy. PANE uses Hierarchical Flow Tables (HFTs) [16] to express, store, and manipulate these policies, enabling an efficient, equivalent linear representation of the policy.

**FlowVisor and Declarative Languages:**
- **FlowVisor [41]:** Divides a single network into multiple slices independently controlled by separate OpenFlow controllers, supporting delegation. In contrast, PANE allows policy authors to state high-level, declarative policies with flexible conflict resolution.
- **Declarative Languages:** PANE's design is inspired by projects like Margrave [37] and the Router Configuration Checker [15], which apply declarative languages to network configuration. These tools use a high-level language to detect configuration mistakes by checking against predefined constraints. PANE directly integrates such logic into the network controller.
- **FML [26]:** A Datalog-inspired language for writing policies that also supports distributed authorship. PANE's actions are inspired by FML, extending it by involving end-users, adding queries and hints, and introducing a time dimension to action requests. FML resolves conflicts by a fixed scheme, whereas PANE offers more flexible conflict resolution operators.

**Conclusion:**
The design and configuration of today’s networks are already informed by application needs, such as full-bisection bandwidth for MapReduce-type frameworks or deadline-based queuing for interactive web services. PANE provides a way for the network to automatically and dynamically solicit and react to such needs at a finer timescale than human input. Our design overcomes the challenges of decomposing network control and resolving conflicts between users' needs.

**Acknowledgments:**
This work was partially supported by NSF grant 1012060. Andrew Ferguson is supported by an NDSEG fellowship. We thank Theo Benson, Srikanth Kandula, Joe Politz, Jennifer Rexford, Scott Shenker, and our shepherd Vyas Sekar for invaluable discussions and suggestions. We also thank Justin Pombrio for improving the implementation of PANE’s Network Information Base, Jordan Place for first implementing PANE support in Ekiga, and Jeff Rasley for help with the Hadoop experiments.

**References:**
[1] M. Al-Fares, S. Radhakrishnan, B. Raghavan, N. Huang, and A. Vahdat. Hedera: Dynamic flow scheduling for data center networks. In NSDI ’10.
...
[52] M. Zaharia, D. Borthakur, J. Sen Sarma, K. Elmeleegy, S. Shenker, and I. Stoica. Delay Scheduling: A Simple Technique for Achieving Locality and Fairness in Cluster Scheduling. In EuroSys ’10.