15.13
3
1.66
1
13.69
3
5
1
30.0 471.97
4 23445
1
6829
*3 64558
8 18969
10 10924
7
7805
2 10417
-
*3
1
-
-
*3
8149
2
-
40
-
2.5
-
3
-
*3
5
9432
28 13489
26.73
1
*9.40
600.84
10
7
2.06
*12.34
1
*7.19
2
40
*3.46
*3.33
*13.81
5
*28.93
23445
6829
64558
18969
10924
7805
10417
-
-
-
8149
-
-
-
-
9432
13489
10851
1850
1122
1785
8335
4237
46605
1206
4222
29104
6101
8903
1505
-
3673
1901
7386
4480
2339
1945
2391
-
-
-
2036
-
-
-
-
2170
3091
milc
namd
dealII
soplex
povray
sphinx3
nginx
2
40
*: programs successfully executed via blacklisting some functions; †: programs aborted before exiting; -: compilation failed or cannot work normally.
i.e., 429.mcf and 462.libquantum. So, we tested 16 SPEC CPU2006
C/C++ benchmarks. As it is infeasible to cover all ICT instructions
in a benchmark program with dynamic testing, we use the same
configuration and the same test inputs provided by SPEC2006 to
test all CFI implementations.
Evaluation. We evaluated the chosen benchmarks with CScan,
and counted the number of feasible runtime targets for each ICT
instruction, i.e., the real boundary. Then, we use the information
gathered at the compile time to determine whether each real feasible
target of each ICT instruction satisfies the theoretical model of these
research to draw the baseline, i.e., the claim boundary. Finally, we
compared the claimed boundary against the real boundary, and
filtered out unintended targets for ICT instructions.
Metric. To provide an intuitive comparison of actual bound-
aries, we calculate the mean and median number of feasible targets
allowed by CFI for each ICT instruction to demonstrate the se-
curity. There are some special cases though. πCFI expands the
dynamic CFG gradually and allows more targets to jump along
with the program execution, therefore decreases the security guar-
antees gradually. We only count the number of feasible targets for
each ICT when it is executed for the first time, showing the upper
bound of πCFI’s security guarantee. CFI-LB and OS-CFI provide
context-sensitive protections. Each ICT instruction may have dif-
ferent targets in different contexts. Therefore, we first calculate the
average number of feasible targets in different contexts for each ICT
instruction, and then calculate the average of all ICT instructions.
6.2.2 Results Table 1 shows the mean and median number of
feasible targets for ICTs in different CFI mechanisms.
Compatibility Issues. During testing, we found that CFI im-
plementations except MCFI, πCFI and Lockdown, all have compati-
bility issues:
• Compilation failure. Lockdown, TSX-based CFI, and OS-CFI fail
to compile some benchmarks or cannot make these work normally.
• False positives with workarounds. Some CFI mechanisms may
wrongly report normal control transfers as illegitimate ones. Clang-
CFI and Clang-CFI-DSO provide a blacklist scheme to skip pro-
tecting certain functions.
• False positives without workarounds. OS-CFI and CFI-LB have
similar false positive issues, but provide no workarounds. So, during
testing the target program may exit abnormally.
Feasible Targets (answers to RQ1). Table 1 shows the number
of feasible runtime targets for ICT instructions protected by differ-
ent CFI mechanisms. Overall, all CFI mechanisms cannot provide
ideal protection for ICT instructions, i.e., each ICT is only allowed
to jump to one target at runtime. On average, the number of feasi-
ble targets allowed by the context-sensitive solution OS-CFI is the
smallest, while the one allowed by its base version CFI-LB is the
largest.
• CFI-LB allows the largest number of targets, since it fails to
protect a large number of ICT instructions and allows them to jump
to arbitrary executable addresses.
• TSX-RTM allows the second largest number of targets, i.e., all
• TSX-HLE allows a smaller number of targets, since it uses the
xacquire/xrelease instructions to protect the integrity of return
addresses used by backward ICT instructions.
• Lockdown further limits the number of feasible targets, espe-
• Clang-CFI utilizes precise type information to provide a fine-
grained CFI, and allows a smaller set of targets. Clang-CFI-DSO
enables support for DSOs and has similar results.
• OS-CFI utilizes the origin and call-site sensitivity to divide
the targets of each ICT into smaller sets, and allows the smallest
number of targets (according to the test result). But it has severe
compatibility issues.
function entries and call-preceded instructions.
cially when the targets are across DSOs.
MCFI [40] is a CFI mechanism with modular support. It uses the
structural equivalence of types to obtain the equivalence class of
each ICT. As shown in Table 1, it provides less precise results than
Clang-CFI/Clang-CFI-DSO, since the latter applies a more accurate
type matching. For example, Clang-CFI enforces virtual function
calls only jumping to virtual functions defined in compatible classes,
while MCFI allows any functions with matching structural types.
The comparison result between MCFI and Clang-CFI is different from
the conclusion of the previous survey work [9], which sorts CFI mech-
anisms by the product of the number of equivalence classes and the
inverse of the size of the largest class. We suppose the the difference
in results can be explained by method of data collection. Burrow et
al[9] use the built-in reporting mechanism of MCFI and πCFI, while
for the others they approximate the metrics with lower bounds by
extending the instrumentation pass. In addition, the results from
Session 6B: Exploitation and Defenses CCS '20, November 9–13, 2020, Virtual Event, USA1828Figure 3: Claimed and real boundary enforced by Lockdown.
the built-in reporting mechanism of MCFI and πCFI include all the
used runtime libraries, getting high numbers of equivalence classes.
πCFI is an update to MCFI. It gradually builds the CFG at runtime,
and thus allows a smaller equivalence class for each ICT than MCFI.
Since the CFG will grow at runtime, but we only test each ICT when
it is executed for the first time, so the evaluation result of πCFI
shown in Table 1 represents the upper limit of its security strength.
However, it is still less precise than Clang-CFI / Clang-CFI-DSO for
some benchmarks (such as xalancbmk).
Comparison with Claimed Boundary (answers to RQ2). To
answer the question of whether the real boundary of each CFI
matches its claim, we evaluated the claimed boundary of each CFI.
Results showed that, some CFI mechanisms, e.g., Lockdown, TSX-
based CFI and MCFI/πCFI, will have unintended targets for certain
ICT instructions. Figure 3 shows the difference between the claimed
boundary (blue bar) and the real boundary (blue+red bar) enforced
by Lockdown is significant. Figure 4 shows the average number of
unintended targets is over 100 for each ICT protected by TSX-based
CFI, while 90 of these targets reside in external libraries. The root
causes will be analyzed in Section 7.
6.3 Effectiveness Against Typical Attacks
We have tested all the 12 chosen CFI implementations with
CBench, to evaluate their effectiveness against typical attacks and
answer the question RQ3. As shown in Table 2, all 12 CFI mech-
anisms fail to defeat some attacks.
6.3.1 Protecting Regular Code. First, we present the effective-
ness of CFI mechanisms on regular ICT instructions in one program
module.
Clang-CFI can defeat most attacks in the CBench test suite. How-
ever, it can be bypassed if attackers hijack an ICT instruction to
jump to a function entry with the same type.
TSX-based CFI solutions have the worst performance. It cannot
protect C++ applications, and allows ICT instructions to transfer
to all function entries and call-preceded instructions. Even worse, it
allows ICT instructions transfer to some special gadgets that can
perform arbitrary address jump.
BinCFI has similar bad results. It allows forward ICT to transfer
to function entry and call-preceded instructions, and backward ICT
to return to call-preceded instructions. It is also vulnerable to Type
Confusion attacks and VTable reuse attacks. Note that, indirect
call and jump instructions should only transfer to function entries,
but are allowed to jump to call-preceded instructions by binCFI.
More specifically, if there is a call to the special exit function,
the contents after this call instruction could be anything, even a
function entry. BinCFI allows each ICT to jump to that specific
location.
Figure 4: Unintended targets (in DSO libraries or current binary)
exceeding the claimed boundary of TSX-based CFI .
Lockdown allows forward ICT to transfer to function entries, and
thus can be bypassed by type confusion and VTable reuse attacks
as well. It uses shadow stack to protect backward ICT instructions,
and can defeat ROP attacks.
πCFI provides a stronger defense than MCFI, by generating CFG
at runtime and making decisions accordingly. However, they can
be bypassed by VTable reuse attacks that exploit virtual functions
with structurally equivalent function types.
CFI-LB enforces indirect call instructions to transfer to a subset
of function entries with matching types according to the runtime
context. But it cannot protect indirect jump or return instructions,
and fails to defeat VTable reuse attacks.
µCFI and OS-CFI provide the most robust protection. In some
cases, they could even identify the unique target. However, OS-CFI
fails to protect tail calls, and µCFI fails to defeat code pointer reuse
and VTable reuse attacks. More details will be analyzed in Section 7.
PARTS also enforces ICT instructions to jump to functions of the
same type. However, it currently does not support C++ programs,
and can be bypassed by Type Confusion attacks.
6.3.2 Protecting Corner Code. As discussed in Section 4, we
also evaluated three corner cases, i.e., inline assembly code, Cross-
DSO transfer, and vDSO code, in which it could cause compatibility
issues and make CFI mechanisms ineffective. The result is also
included in Table 2.
Protecting ICT Instructions In Inline Assembly. None of
the source-level CFI mechanisms provide support for inline assem-
bly code. Binary-level CFI mechanisms, e.g., binCFI and Lockdown,
are able to provide necessary protections for them.
Protecting Control Transfers To DSO Targets. Clang-CFI,
CFI-LB, OS-CFI, and µCFI do not support modular compilation, and
thus cannot support Cross-DSO transfers. Forward ICT instruc-
tions cannot transfer to DSO targets, and backward ICTs cannot
return to DSO targets. Lockdown, as a binary-level runtime pro-
tection scheme, takes into account the Cross-DSO issue. It allows
forward ICT instructions to jump to functions imported from DSOs.
However, it cannot protect backward ICT instructions, since the
parent function could be used as callbacks by any function in DSO.
Clang-CFI-DSO, TSX-based CFI, MCFI, and πCFI support modular
compilation, and thus provide a security guarantee for Cross-DSO
control transfers similar to intra-module transfers.
Protecting vDSO code. LockDown allows forward ICT instruc-
tions transfer to vDSO functions, which weakens the security guar-
antee. For example, attackers can hijack forward ICT to jump to
__kernel_rt_sigreturn and launch an SROP attack [7]. Other CFI
mechanisms do not support forward ICT transfer to vDSO. However,
none of these solutions is able to provide protections for backward
perlbenchbzip2gccgobmkhmmersjengh264refomnetppastarxalancbmkmilcnamddealIIsoplexpovraysphinx301000020000300004000050000Mean Feasible Target Number of ICTs55332107968146175655729108512774185066811222151785688833531634237215466053180712063154222217386372043261011701890322771505483LockDown claimed boundaryLockDown real boundarybzip2gccgobmkhmmersjengh264refmilcsphinx3nginx255075100125150175200Mean Feasible Target Number of ICTs122122122124122122122122206DSO libraryBinarySession 6B: Exploitation and Defenses CCS '20, November 9–13, 2020, Virtual Event, USA1829Table 2: Effectiveness of CFI mechanisms against typical attack scenarios. The left-most column represents the specific attack scenario, and
the right-most column represents the detail type of attack. The meaning of each symbol is shown in the label below the table.
LockDown Clang-CFI Clang-CFI-DSO MCFI
LLVM 9.0.0
Classification
Indirect Call
Virtual Call
Indirect Jump
Return Address
Type Confusion
Assembly Support
Cross DSO Support
vDSO Support
TSX-based CFI
RTM HLE
⊕ ⊗
⊕
⊕ ⊗
⊕
—
—
—
—
—
—
⊕ ⊗
⊕
⊕ ⊗
⊕
×
×
⊕
⊕ ⊗
×