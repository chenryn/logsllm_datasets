(3) if Result =⊥ return 0
,∗), . . . , (iA
(4) if ∃ (iA
, cA
nA
1
1
∈ C s.t. 0 ≤ nB ≤ |C U | s.t.
∃ cB
, . . . , cB
(cid:5)
(cid:4){cE
nB
}nE
(cid:12)R ρ
Result = ρ
i=1
return 0 else return 1
where Checked = {(iE
Fig. 3: Veriﬁability against registrar by Cortier et al. [19]
,∗) ∈ HVote\Checked
(cid:4){cA
(cid:4){cB
), . . . , (iE
nE
}nB
i=1
}nA
i=1
,bE
nE
, cA
nA
, cE
nE
(cid:12)R ρ
,bE
1
, cE
1
)}
(cid:5)
(cid:5)
1
1
i
i
i
C. Veriﬁability Against Malicious Registrar
In Helios, the bulletin board B accepts only ballots cast
by eligible voters. The bulletin board B can tell apart eligible
from ineligible voters generally by using some kind of authen-
tication mechanism. In this situation, one might hope to enjoy
veriﬁability against a dishonest registrar Reg, which is deﬁned
in Figure 3.
Deﬁnition 6 (Veriﬁability against malicious registrar). An
election scheme achieves veriﬁability against the registrar if
the success rate Succ(Expverg
A,Π((cid:5)) = 1] of any ppt
adversary A is negligible as a function of (cid:5), where Expverg
A,Π is
deﬁned as in Figure 3.
A,Π) = Pr[Expverg
The intuition behind and the guarantees provided by
Deﬁnition 6 are similar to those of Deﬁnition 5 except that
instead of a malicious bulletin board a malicious registrar is
considered, which thus can handle credentials for voters in a
malicious way, i.e. provide invalid credentials or make several
users share the same credentials.
D. Strong Veriﬁability
A protocol is said to have strong veriﬁability if it enjoys
veriﬁability against a dishonest registrar and veriﬁability against
a dishonest bulletin board. Intuitively, this allows one to give
veriﬁability guarantees under a weaker trust assumption than
that used in Section VI, since for strong veriﬁability we do
not need the bulletin board and the registrar to be honest
simultaneously; in Section V, it was assumed that every party
has its own bulletin board, and in Section IV, no speciﬁc trust
assumptions were ﬁxed or assumed.
We note Cortier et al. also consider a fairness (correctness)
condition similar to the ones mentioned above: the result
corresponds to the votes of honest voters whenever all the
parties (Reg, T, B), including the voters, are honest.
787787
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:36 UTC from IEEE Xplore.  Restrictions apply. 
Experiment Expverw
A,Π
to
the
access
Adversary A has
oracles
Ovote, Ocorrupt, Oreg and Ocast deﬁned before
in this section. Let HVote the list containing the
intended choices of the honest voters. The experiment
outputs a bit as follows:
(1) (Result, P)←AOcast,Ocorrupt,Ovote,Ocast
(2)
(3)
(4)
if Verify(τ , Result, P) = 0 return 0
if Result =⊥ return 0
,∗) ∈ HVote
,∗), . . . , (iA
if ∃ (iA
, cA
, cA
nA
nA
1
1
∈ C s.t. 0 ≤ nB ≤ |C U |
∃ cB
, . . . , cB
(cid:5)
(cid:4){cA
(cid:4){cB
nB
}nB
}nA
s.t. Result = ρ
i=1
i=1
(cid:12)R ρ
(cid:5)
1
i
i
return 0 else return 1
Fig. 4: Weak veriﬁability by Cortier et al. [19]
E. Weak Veriﬁability
For weak veriﬁability, the trust assumptions are stronger:
both the registrar Reg and the board B are assumed to be honest.
This means, in particular, that B does not remove ballots, nor
stuffs itself; and that Reg faithfully distributes credentials to
the eligible voters. The formal deﬁnition is given in Figure 4.
Intuitively, weak veriﬁability guarantees that all votes that
have been successfully cast are counted and that dishonest
voters can only vote once; additionally only choices belonging
to the choice space can be cast and counted.
F. Tally Uniqueness
As part of their deﬁnitional framework for veriﬁability,
Cortier et al. [19] and Juels et al. [32], require the notion
of tally uniqueness. Roughly speaking, tally uniqueness of a
voting protocol ensures that the tally of an election is unique,
even if all the players in the system are malicious.
More formally, the goal of the adversary against tally unique-
ness is to output public election parameters prmpub, a public
transcript τ, two results Result (cid:11)= Result
(cid:16)
, and corresponding
(cid:16) such that both pass veriﬁcation,
proofs of valid tallying P and P
(cid:16), P
(cid:16)) = 1. A voting
i.e. Verify(τ , Result, P) = Verify(τ , Result
protocol Π has tally uniqueness if every ppt adversary A has a
negligible advantage in this game.
Following [19], tally uniqueness ensures that, given a
tally, there is at most one plausible instantiation (one-to-one
property).
G. Discussion
Strong veriﬁability explicitly captures the situation where
key players in an electronic election, such as the bulletin board
or the registrar, might be corrupted and willing to alter the
legitimate operation of the election. This is notably the case
for Helios without identiﬁers (i.e. the transcript τ does not
contain voters’ identiﬁers), where a malicious B can stuff itself
with ballots on behalf of absentee voters. Additionally, strong
veriﬁability provides stronger guarantees, compared to previous
deﬁnitions, to honest voters: ballots from honest voters that
do not verify successfully at the end of the election can at
worst be removed from the election’s announced result, but
never changed. In [19], sufﬁcient properties for proving strong
veriﬁability have been established.
A downside of the above deﬁnitions is that the voter’s intent
is not captured by the oracle Ovote(id, c), as this oracle simply
performs the honest voting algorithm. In reality, voters typically
use some VSD, which might be corrupted. Additionally, since
Cortier et al. require that the adversary wins the game (i.e.,
successfully cheats) with at most negligible probability, ballot
audit checks, such as Benaloh’s audits5 [11], are deemed
non-veriﬁable as these checks may fail with non-negligible
probability. Another weak point, although less important than
the previous ones, is that this framework assumes that the result
function ρ admits partial tallying, which is commonly the case,
but it is, for example, not applicable to voting protocols which
use the majority function as the result function.
H. Casting in the KTV Framework
Protocol PCGGI. The set of agents Σ consists of the voters,
the bulletin board B, the registrar Reg, the teller T, judge J,
the scheduler, and the remaining participants. As usually, we
assume that the judge and the scheduler cannot be corrupted
(they ignore the corrupt message). As in the deﬁnition of Cortier
et al., Reg and B can be corrupted statically, i.e., they accept
the corrupt message at the beginning of a run only. Voters can
be corrupted dynamically.
When the voter V runs her honest program πV, she expects
a candidate c, a credential pair upk, usk as input (if the input is
empty, she stops). After that, she reads the election parameters
prmpub and C from the bulletin board B (if she cannot ﬁnd
any election paramaters on B, she stops). Then, she runs
Vote(prmpub
, c, upk, usk) and sends the result b to the bulletin
board B. Once the election is closed, she reads the content of the
bulletin board and checks whether her ballot has been properly
handled by the ballot box by running VerifyVote(τ , upk, usk, b).
If not, the voters send her complaint to the judge. The program
of the judge accepts a run, if it does not receive any complaint
from a voter and the procedure Verify(τ , Result, P) returns 1.
When the registrar Reg runs the honest program πR, it
generates and distributes secret credentials to voters and
registers the corresponding public credentials in the bulletin
board.
When the teller T runs its honest program πT, it reads
the public transcript τ and runs (Result, P)←Tally(τ , sk), with
the election private key sk. The transcript is updated to τ(cid:16) =
τ||Result||P.
Strong veriﬁability. We deﬁne the goal γSV to be the set
of all runs of PCGGI in which either (a) both Reg and B are
corrupted, (b) the result is not output, or (c) the result r of the
election is deﬁned and satisﬁes:
(cid:4){cE
(cid:4){cA
i }nA
i=1
, cB
, cA
for some nE ,nA,nB and some cE
i
i
i }nE
r = ρ
(cid:12)R ρ
(cid:4){cB
i }nB
(cid:12)R ρ
i such that
i=1
(cid:5)
(cid:5)
i=1
(cid:5)
, . . . , cE
• cE
nE are the choices read by honest voters that
1
successfully checked their ballots at the end of the election
(and report it to the judge).
• w1, . . . ,wmA are the candidates read by honest voters that
did not check their ballots and {cA
∈ C and nb is smaller then the number of voters
• cB
, . . . , cB
nb
⊆ {w j}mA
j=1;
}nA
i=1
1
running a dishonest program.
i
5In these audits the voter can decide to cast or to audit a ballot created by
her VSD. If she decides to audit the ballot, she can check whether it actually
encodes her choice.
788788
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:36 UTC from IEEE Xplore.  Restrictions apply. 
Note that, according to the above deﬁnition, if both the registrar
and the bulletin board are corrupted, then the goal is trivially
achieved, as we do not expect to provide any guarantees in
this case.
For the protocol PCGGI, strong veriﬁability by Cortier et
al. can essentially be characterized by the fact that it is (γSV , δ)-
veriﬁable by the judge J in the sense of Deﬁnition 1, for δ = 0.
Let us emphasize that this goal ensures that votes of honest