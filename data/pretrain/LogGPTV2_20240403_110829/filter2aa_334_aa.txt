前言
Coherence 组件是 WebLogic 中的一个核心组件，内置在 WebLogic 中。关于 Coherence 组件的官方
介绍：https://www.oracle.com/cn/java/coherence/ 
近些年，weblogic Coherence 组件反序列化漏洞被频繁爆出，苦于网上没有公开对 weblogic 
Coherence 组件历史反序列化漏洞的总结，导致很多想入门或者了解 weblogic Coherence 组件反序列
化漏洞的朋友不知道该怎么下手，于是本文便对 weblogic Coherence 组件历史反序列化漏洞做出了一
个总结和分析。
关于 Coherence 组件反序列化漏洞利用链的架构，我把他分为两个，一个是基于  
ValueExtractor.extract   的利用链架构，另一个则是基于 ExternalizableHelper  的利用链架
构。 
前置知识
想理清 WebLogic 的 Coherence 组件历史反序列化漏洞需要首先了解一些 Coherence 组件反序列化漏
洞中经常会涉及的一些接口和类。他们在 Coherence 组件反序列化漏洞利用中经常出现。
ValueExtractor
com.tangosol.util.ValueExtrator  是一个接口：
在 Coherence 中 很多名字以 Extrator  结尾的类都实现了这个接口：
这个接口中声明了一个 extract  方法，而 ValueExtractor.extract  正是 Coherence 组件历史漏洞
（ ValueExtractor.extract   链部分 ）的关键。
ExternalizableLite
Coherence 组件中存在一个 com.tangosol.io.ExternalizableLite ，它继承了 
java.io.Serializable ，另外声明了 readExternal  和 writeExternal  这两个方法。
com.tangosol.io.ExternalizableLite  接口 和 jdk 原生的 java.io.Externalizable  很像，注意
不要搞混了。
ExternalizableHelper
上面提到的 com.tangosol.io.ExternalizableLite  接口的实现类的序列化和反序列化操作，都是通
过 ExternalizableHelper  这个类来完成的。
我们可以具体看 ExternalizableHelper   这个类是怎么对实现 
com.tangosol.io.ExternalizableLite  接口的类进行序列化和反序列化的，这里以 readObject  方
法为例， writeObject  读者可自行去查看：
如果传入的 DataInput  不是 PofInputStream  的话（Coherence 组件历史漏洞 涉及到的 
ExternalizableHelper.readObject  传入的 DataInput   都不是 PofInputStream ），
ExternalizableHelper#readObject  中会调用 ExternalizableHelper#readObjectInternal  方
法：
readObjectInternal  中会根据传入的中 nType  进行判断，进入不同的分支：
对于实现 com.tangosol.io.ExternalizableLite  接口的对象，会进入到 
readExternalizableLite  方法：
可以看到在 readExternalizableLite  中 1125 行会根据类名加载类，然后并且实例化出这个类的对
象，然后调用它的 readExternal()  方法。
漏洞链
ValueExtractor.extract
我们在分析反序列化利用链的时候，可以把链分为四部分，一个是链头，一个是危险的中间的节点（漏
洞点），另一个是调用危险中间节点的地方（触发点），最后一个则是利用这个节点去造成危害的链
尾。
在 Coherence 组件 ValueExtractor.extract  利用链架构中，这个危险的中间节点就是 
ValueExtractor.extract  方法。
漏洞点
ReflectionExtractor
ReflectionExtractor  中的 extract  方法含有对任意对象方法的反射调用：
 配合 ChainedExtractor  和 ConstantExtractor   可以实现类似 cc1 中的 transform  链的调用。
涉及 CVE
CVE-2020-2555，CVE-2020-2883 
MvelExtractor
MvelExtrator  中的 extract  方法，会执行任意一个 MVEL 表达式（RCE）：
而在序列化和反序列化的时候 m_sExpr  会参与序列化和反序列化：
所以 m_xExpr  可控，所以就导致可以利用 MvelExtrator.extrator  来达到执行任意命令的作用。
涉及 CVE
CVE-2020-2883
UniversalExtractor
UniversalExtractor （Weblogic 12.2.1.4.0 独有） 中的 extract  方法，可以调用任意类中的的 
get  和  is  开头的无参方法，可以配合 jdbsRowset ，利用 JDNI 来远程加载恶意类实现 RCE。
具体细节可以参考：https://nosec.org/home/detail/4524.html 
涉及 CVE
CVE-2020-14645，CVE-2020-14825 ， CVE-2020-14841
LockVersionExtractor
oracle.eclipselink.coherence.integrated.internal.cache.LockVersionExtractor  中的 
extract()  方法，可以调用任意 AttributeAccessor  的 getAttributeValueFromObject  方法，赋
值 Accessor   为 MethodAttributeAccessor   进而可以实现调用任意类的无参方法。
具体细节可参考：https://cloud.tencent.com/developer/article/1740557 
MethodAttributeAccessor.getAttributeValueFromObject ，本质是利用
MethodAttributeAccessor.getAttributeValueFromObject 中存在任意无参方法调用，在 CVE-
2021-2394 中也利用到了。
涉及 CVE
CVE-2020-14825 ， CVE-2020-14841
FilterExtractor.extract
filterExtractor.extract  中存在任意 
AttributeAccessor.getAttributeValueFromObject(obj)  的调用，赋值 this.attributeAccessor 为
上面说的 MethodAttributeAccessor  就可以导致任意无参方法的调用。
关于 readAttributeAccessor  的细节可以看 CVE-2021-2394：https://blog.riskivy.com/weblogic-cv
e-2021-2394-rce%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/ 和 https://www.cnblogs.com/
potatsoSec/p/15062094.html 。
涉及 CVE
CVE-2021-2394 
触发点
上面例举出了很多危险的 ValueExtractor.extract  方法，接下来再看看哪里存在调用 
ValueExtractor.extract  方法的地方。
Limitfiler
Limitfiler 中 Limitfiler.toString  中存在任意 ValueExtractor.extract  方法调用：
由于 this.m_comparator  参与序列化和反序列化，所以可控：
我们只需要赋值 this.m_comparator  为 恶意的 ValueExtractor  就可以实现任意 ValueExtractor 
.extract  方法的调用。 toString  方法，则可以利用 CC5 中用到的 
BadAttributeValueExpException   来触发。
涉及 CVE
CVE-2020-2555 
ExtractorComparator
ExtractorComparator.compare   ，其实是针对 CVE-2020-2555 补丁的绕过，CVE-2020-2555 的修复
方法中修改了 Limitfiler.toString  方法，也就是说修改了一个调用 ValueExtractor.extract  方
法的地方。 而 CVE-2020-2883 则找到另一个调用 ValueExtractor.extract  的地方，也就是 
ExtractorComparator.compare  。
在 ExtratorComparator.compare  中存在任意（因为 this.m_extractor  参与序列化和反序列化） 
ValueExtractor  的 extract  方法调用。
Comparator.compare 方法，则可以通过 CC2 中用到的 PriorityQueue.readObject` 来触发。
另外在 weblogic 中， BadAttributeValueExpException.readObject  中也可以实现调用任意 
compartor.compare 方法：
涉及 CVE
CVE-2020-2883，修复方法是将 ReflectionExtractor  和 MvelExtractor  加入了黑名单 。
CVE-2020-14645 使用 com.tangosol.util.extractor.UniversalExtractor  绕过，修复方法将 
UniversalExtractor  加入黑名单。