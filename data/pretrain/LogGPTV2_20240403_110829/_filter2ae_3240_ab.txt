|
CALLDATALOAD
| 获取交易中的input字段的值  
0x36
|
CALLDATASIZE
| 获取交易中input字段的值的长度  
0x50
|
POP
| 把栈顶值出栈  
0x51
|
MLOAD
| 把栈顶出栈并以该值作为内存中的索引，加载内存中该索引之后的32字节到栈顶  
0x52
|
MSTORE
| 从栈中依次出栈两个值arg0和arg1，并把arg1存放在内存的arg0处  
0x54
|
SLOAD
| 把栈顶出栈并以该值作为storage中的索引，加载该索引对应的值到栈顶  
0x55
|
SSTORE
| 从栈中依次出栈两个值arg0和arg1，并把arg1存放在storage的arg0处  
0x56
|
JUMP
| 把栈顶值出栈，并以此值作为跳转的目的地址  
0x57
|
JUMPI
| 从栈中依次出栈两个值arg0和arg1，如果arg1的值为真则跳转到arg0处，否则不跳转  
0x60
|
PUSH1
| 把1个字节的数值放入栈顶  
0x61
|
PUSH2
| 把2个字节的数值放入栈顶  
0x80
|
DUP1
| 复制当前栈中第一个值到栈顶  
0x81
|
DUP2
| 复制当前栈中第二个值到栈顶  
0x90
|
SWAP1
| 把栈中第一个值和第二个值进行调换  
0x91
|
SWAP2
| 把栈中第一个值和第三个值进行调换  
###  2.2 智能合约汇编分析
在第一章中，为了便于入门，我们分析的智能合约文件并不包含实质的内容。在本章中我们以一个稍微复杂的智能合约为例进行分析。智能合约(保存在test.sol文件中)代码如下：
    pragma solidity ^0.4.25;
    contract Overflow {
        uint private sellerBalance=0;
        function add(uint value) returns (bool, uint){
            sellerBalance += value;
            assert(sellerBalance >= value);
        }
    }
###  2.2.1 生成汇编代码
执行solc命令：solc –asm –optimize test.sol，其中–optimize选项用来开启编译优化
输出的结果如下：
    EVM assembly:
    ... */ "test.sol":26:218  contract Overflow {
      mstore(0x40, 0x80)
        /* "test.sol":78:79  0 */
      0x0
        /* "test.sol":51:79  uint private sellerBalance=0 */
      dup1
      sstore
    ... */ "test.sol":26:218  contract Overflow {
      callvalue
        /* "--CODEGEN--":8:17   */
      dup1
        /* "--CODEGEN--":5:7   */
      iszero
      tag_1
      jumpi
        /* "--CODEGEN--":30:31   */
      0x0
        /* "--CODEGEN--":27:28   */
      dup1
        /* "--CODEGEN--":20:32   */
      revert
        /* "--CODEGEN--":5:7   */
    tag_1:
    ... */ "test.sol":26:218  contract Overflow {
      pop
      dataSize(sub_0)
      dup1
      dataOffset(sub_0)
      0x0
      codecopy
      0x0
      return
    stop
    sub_0: assembly {
    ... */  /* "test.sol":26:218  contract Overflow {
          mstore(0x40, 0x80)
          jumpi(tag_1, lt(calldatasize, 0x4))
          and(div(calldataload(0x0), 0x100000000000000000000000000000000000000000000000000000000), 0xffffffff)
          0x1003e2d2
          dup2
          eq
          tag_2
          jumpi
        tag_1:
          0x0
          dup1
          revert
    ... */  /* "test.sol":88:215  function add(uint value) returns (bool, uint){
        tag_2:
          callvalue
            /* "--CODEGEN--":8:17   */
          dup1
            /* "--CODEGEN--":5:7   */
          iszero
          tag_3
          jumpi
            /* "--CODEGEN--":30:31   */
          0x0
            /* "--CODEGEN--":27:28   */
          dup1
            /* "--CODEGEN--":20:32   */
          revert
            /* "--CODEGEN--":5:7   */
        tag_3:
          pop
    ... */  /* "test.sol":88:215  function add(uint value) returns (bool, uint){
          tag_4
          calldataload(0x4)
          jump(tag_5)
        tag_4:
          /* 省略部分代码 */
        tag_5:
            /* "test.sol":122:126  bool */
          0x0
            /* "test.sol":144:166  sellerBalance += value */
          dup1
          sload
          dup3
          add
          dup1
          dup3
          sstore
            /* "test.sol":122:126  bool */
          dup2
          swap1
            /* "test.sol":184:206  sellerBalance >= value */
          dup4
          gt
          iszero
            /* "test.sol":177:207  assert(sellerBalance >= value) */
          tag_7