3659 3671 3673 3677 3691 3697 3701 3709 3719 3727
3733 3739 3761 3767 3769 3779 3793 3797 3803 3821
3823 3833 3847 3851 3853 3863 3877 3881 3889 3907
3911 3917 3919 3923 3929 3931 3943 3947 3967 3989
4001 4003 4007 4013 4019 4021 4027 4049 4051 4057
4073 4079 4091 4093 4099 4111 4127 4129 4133 4139
4153 4157 4159 4177 4201 4211 4217 4219 4229 4231
4241 4243 4253 4259 4261 4271 4273 4283 4289 4297
4327 4337 4339 4349 4357 4363 4373 4391 4397 4409
4421 4423 4441 4447 4451 4457 4463 4481 4483 4493
4507 4513 4517 4519 4523 4547 4549 4561 4567 4583
4591 4597 4603 4621 4637 4639 4643 4649 4651 4657
4663 4673 4679 4691 4703 4721 4723 4729 4733 4751
4759 4783 4787 4789 4793 4799 4801 4813 4817 4831
4861 4871 4877 4889 4903 4909 4919 4931 4933 4937
4943 4951 4957 4967 4969 4973 4987 4993 4999 5003
5009 5011 5021 5023 5039 5051 5059 5077 5081 5087
5099 5101 5107 5113 5119 5147 5153 5167 5171 5179
5189 5197 5209 5227 5231 5233 5237 5261 5273 5279
5281 5297 5303 5309 5323 5333 5347 5351 5381 5387
5393 5399 5407 5413 5417 5419 5431 5437 5441 5443
5449 5471 5477 5479 5483 5501 5503 5507 5519 5521
5527 5531 5557 5563 5569 5573 5581 5591 5623 5639
5641 5647 5651 5653 5657 5659 5669 5683 5689 5693
5701 5711 5717 5737 5741 5743 5749 5779 5783 5791
5801 5807 5813 5821 5827 5839 5843 5849 5851 5857
5861 5867 5869 5879 5881 5897 5903 5923 5927 5939
5953 5981 5987 6007 6011 6029 6037 6043 6047 6053
6067 6073 6079 6089 6091 6101 6113 6121 6131 6133
6143 6151 6163 6173 6197 6199 6203 6211 6217 6221
6229 6247 6257 6263 6269 6271 6277 6287 6299 6301
6311 6317 6323 6329 6337 6343 6353 6359 6361 6367
6373 6379 6389 6397 6421 6427 6449 6451 6469 6473
6481 6491 6521 6529 6547 6551 6553 6563 6569 6571
6577 6581 6599 6607 6619 6637 6653 6659 6661 6673
6679 6689 6691 6701 6703 6709 6719 6733 6737 6761
6763 6779 6781 6791 6793 6803 6823 6827 6829 6833
6841 6857 6863 6869 6871 6883 6899 6907 6911 6917
6947 6949 6959 6961 6967 6971 6977 6983 6991 6997
7001 7013 7019 7027 7039 7043 7057 7069 7079 7103
7109 7121 7127 7129 7151 7159 7177 7187 7193 7207
7211 7213 7219 7229 7237 7243 7247 7253 7283 7297
7307 7309 7321 7331 7333 7349 7351 7369 7393 7411
7417 7433 7451 7457 7459 7477 7481 7487 7489 7499
7507 7517 7523 7529 7537 7541 7547 7549 7559 7561
7573 7577 7583 7589 7591 7603 7607 7621 7639 7643
7649 7669 7673 7681 7687 7691 7699 7703 7717 7723
7727 7741 7753 7757 7759 7789 7793 7817 7823 7829
7841 7853 7867 7873 7877 7879 7883 7901 7907 7919
The final output byte stream can be sent to the drop server.
```
## Solution
This is a [code golf](https://en.wikipedia.org/wiki/Code_golf) challenge. We need to implement the encoding protocol in less than 235 bytes.
The largest chunk of data in the protocol is the XOR table. We can easily compress it once we notice that it is composed of the first 1000 prime numbers. This means we can reuse a golfed prime number generator such as the one [here](https://codegolf.stackexchange.com/questions/70001/list-prime-numbers/70004#70004).
We get:
```python
k=P=1
p=[]
while k0: p+=[k%256]
 P*=k*k;k+=1
```
Notice that we use this opportunity to XOR the prime number with `0xff` (i.e. `mod` it with `256`) like `step2_encrypt_data` does.
We also create a function to provide the prefix and suffix:
```python
b=bytes
v=lambda d,s:d+b'\0'*3+b'\x1a'+b(range(s,s+26))
```
We'll call it twice, like this:
```python
>>> v(b'BEGN',97)
b'BEGN\x00\x00\x00\x1aabcdefghijklmnopqrstuvwxyz'
>>> v(b'END.',65)
b'END.\x00\x00\x00\x1aABCDEFGHIJKLMNOPQRSTUVWXYZ'
```
And finally, we implement the `encode` function which adds the `DATA` section and performs the overall XOR:
```python
encode=lambda m:b(g^e for g,e in zip(v(b'BEGN',97)+b'DATA'+__import__('struct').pack(">I",len(m))+m+v(b'END.',65),p))
```
Altogether, we get:
```python
b=bytes
k=P=1
p=[]
while k0: p+=[k%256]
 P*=k*k;k+=1
v=lambda d,s:d+b'\0'*3+b'\x1a'+b(range(s,s+26))
encode=lambda m:b(g^e for g,e in zip(v(b'BEGN',97)+b'DATA'+__import__('struct').pack(">I",len(m))+m+v(b'END.',65),p))
#END
```
We send it to the server and get the flag:
```console
┌──(user@kali)-[/media/sf_CTFs/google/17_ Unknown_-_Inside_Secret_Base]
└─$ nc playing-golf.2021.ctfcompetition.com 1337
== proof-of-work: disabled ==
Please send your code followed by a line containing only #END
- We will rstrip the lines for you btw.
- Time limit is 5 seconds.
b=bytes
k=P=1
p=[]
while k0: p+=[k%256]
 P*=k*k;k+=1
v=lambda d,s:d+b'\0'*3+b'\x1a'+b(range(s,s+26))
encode=lambda m:b(g^e for g,e in zip(v(b'BEGN',97)+b'DATA'+__import__('struct').pack(">I",len(m))+m+v(b'END.',65),p))
#END
Testing your code (length 232)...
[I][2021-08-30T13:30:10+0000] Mode: STANDALONE_ONCE
[I][2021-08-30T13:30:10+0000] Jail parameters: hostname:'NSJAIL', chroot:'/', process:'/usr/bin/python3', bind:[::]:0, max_conns:0, max_conns_per_ip:0, time_limit:5, personality:0, daemonize:false, clone_newnet:true, clone_newuser:true, clone_newns:true, clone_newpid:true, clone_newipc:true, clone_newuts:true, clone_newcgroup:false, clone_newtime:false, keep_caps:false, disable_no_new_privs:false, max_cpus:0
[I][2021-08-30T13:30:10+0000] Mount: '/' -> '/' flags:MS_RDONLY|MS_BIND|MS_REC|MS_PRIVATE type:'' options:'' dir:true
[I][2021-08-30T13:30:10+0000] Mount: '/home/user/empty' -> '/home/user/full_tester.py' flags:MS_RDONLY|MS_BIND|MS_REC|MS_PRIVATE type:'' options:'' dir:false
[I][2021-08-30T13:30:10+0000] Mount: '/proc' flags:MS_RDONLY type:'proc' options:'' dir:true
[I][2021-08-30T13:30:10+0000] Uid map: inside_uid:1000 outside_uid:1000 count:1 newuidmap:false
[I][2021-08-30T13:30:10+0000] Gid map: inside_gid:1000 outside_gid:1000 count:1 newgidmap:false
[I][2021-08-30T13:30:10+0000] Executing '/usr/bin/python3' for '[STANDALONE MODE]'
Running encode() on all tests...
Saving results...
[I][2021-08-30T13:30:11+0000] pid=3 ([STANDALONE MODE]) exited with status: 0, (PIDs left: 0)
Verifying tests...
All tests passed!
CTF{EncodingSuccessfulIntelReceivedCorrectly}
```