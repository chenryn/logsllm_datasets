In the process of learning how to use ansible with my linode I had pip
installed all the necessary libraries. Then I had cloned the ansible
repository to have access to the inventory scripts in my local documents
folder. When I cloned the main repo I named it `ansible-src/` just so I'd
remember that it was a clone from a read only repo.
    python ansible-src/plugins/inventory/linode.py
        Traceback (most recent call last):
          File "plugins/inventory/linode.py", line 87, in 
            from chube import *
          File "/usr/local/lib/python2.7/site-packages/chube/__init__.py", line 4, in 
            from .api import api_handler as chube_api_handler
          File "/usr/local/lib/python2.7/site-packages/chube/api.py", line 1, in 
            from linode import api as linode_api
          File "/Users/morgan.craft/Documents/projects/ansible-src/plugins/inventory/linode.py", line 89, in 
            load_chube_config()
        NameError: name 'load_chube_config' is not defined
Took me abit to sort through what was going on, at first I thought pip had
exploded on me and trashed my environment. But then I found this section of
code in `plugins/inventory/linode.py`
    # chube imports 'yaml', which is also the name of an inventory plugin,
    # so we remove the plugins dir from sys.path before importing it.
    old_path = sys.path
    sys.path = [d for d in sys.path if "ansible/plugins" not in d]
Turns out `yaml` isn't all it blocks, but the linode.py file as well from the
sys.path inclusion which causes a weird circular import. This is because of
    sys.path = [d for d in sys.path if "ansible/plugins" not in d]
I don't think we should have a hard coded file/directory path name. Or if it
is the only way then maybe we should propogate an exception if `ansible` is
not the cloned repo name so at least devs know their file-pathing doesn't
match.
Happy to work on the issue and submit a pr, just want feedback on how best to
approach.