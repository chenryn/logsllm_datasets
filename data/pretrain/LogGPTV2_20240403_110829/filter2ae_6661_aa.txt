作者：[
**mrh**](http://turingh.github.io/2017/01/15/CVE-2016-7644-%E4%B8%89%E8%B0%88Mach-IPC/)
## 0x00 摘要
本文是第三篇基于漏洞分析来学习`Mach IPC`的方面知识的记录。
阅读顺序如下。
1.[再看CVE-2016-1757—浅析mach
message的使用](http://turingh.github.io/2016/07/05/%E5%86%8D%E7%9C%8BCVE-2016-1757%E6%B5%85%E6%9E%90mach%20message%E7%9A%84%E4%BD%BF%E7%94%A8/)
2.[CVE-2016-7637—再谈Mach
IPC](http://turingh.github.io/2017/01/10/CVE-2016-7637-%E5%86%8D%E8%B0%88Mach-IPC/)
3.从CVE-2016-7644回到CVE-2016-4669（本文）
[CVE-2016-7644](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-7644)这个漏洞，本身是一个很简单的漏洞，但是通过一些技巧，可以做一些更有意思的事情。
`poc`与`writeup`在[这里](https://bugs.chromium.org/p/project-zero/issues/detail?id=965&can=1&q=label%3AFinder-ianbeer&sort=-id)。
CVE-2016-4669的POC，之前我已经分析过了,详见[CVE-2016-4669分析与调试](http://turingh.github.io/2016/11/07/CVE-2016-4669%E5%88%86%E6%9E%90%E4%B8%8E%E8%B0%83%E8%AF%95/)。在做完这一系列的`IPC`相关的漏洞研究与学习之后，尝试的对CVE-2016-4669这个漏洞实现一个提权的利用。
并不能稳定触发，不过也加深了对内核的内存布局与IPC模块的理解。代码在[这里](https://github.com/turingH/CVE-2016-4669)。
## 0x01 CVE-2016-7644 POC分析
漏洞的成因并不复杂，当两个线程同时调用时，`ipc_port_release_send`函数可能会被调用两次。
    kern_return_t
      set_dp_control_port(
        host_priv_t host_priv,
        ipc_port_t  control_port) 
      {
              if (host_priv == HOST_PRIV_NULL)
                      return (KERN_INVALID_HOST);
        if (IP_VALID(dynamic_pager_control_port))
          ipc_port_release_send(dynamic_pager_control_port); ip_srights > 0);       ip_srights--;             
        [...]
         ip_unlock(port);                    ipc_kmsg_copyin_ool_ports_descriptor
                                     |
                                     |-----> ipc_object_copyin
                                                   |
                                                   |----> ipc_right_copyin
    */
    kern_return_t
    ipc_right_copyin(
    {
            [...]
    case MACH_MSG_TYPE_MAKE_SEND: {
            if ((bits & MACH_PORT_TYPE_RECEIVE) == 0)
                goto invalid_right;
            port = (ipc_port_t) entry->ie_object;
            assert(port != IP_NULL);
            ip_lock(port);
            assert(ip_active(port));
            assert(port->ip_receiver_name == name);
            assert(port->ip_receiver == space);
            port->ip_mscount++;
            port->ip_srights++; //通过发送数据，但是不从port中读取出来，使得right和reference都加1
            ip_reference(port);
            ip_unlock(port);
            *objectp = (ipc_object_t) port;
            *sorightp = IP_NULL;
            break;
            }
             [...]
    }
当代码通过`IPC`系统发送一个`port
right`时，`port`的`right`和`reference`都会加1，而在读取消息时，会把`right`和`reference`减1，所以在未调用`free_stashed_ports`读取出`message`之前，就在`IPC`系统中存放了一份`port`的引用。
## 2.3 mach_port_deallocate
调用`mach_port_deallocate`函数可以释放目标`port`的一个`RIGHT`。我们的`port`的`reference`为3，`sright`是2。
### 2.4 race
`race`就是利用了`set_dp_control_port`函数的漏洞，在并发执行的时，会导致对`dynamic_pager_control_port`连续两次调用`ipc_port_release_send`函数。
`ipc_port_release_send`每执行一次，会对目标`port`的`sright`和`reference`做出一次减一的操作。这个时候我们的`port`的`reference`变成了1，而`sright`变成了0，以为没有`sendright`存在了，所以会产生一个`notify`，通过这个土整，我们就可以知道成功的发出了条件竞争的漏洞了。
### 2.5 free_stashed_ports
在`stashed_ports_q`的消息队列中还保存着我们传递的`port`，只需要对`stashed_ports_q`调用`mach_port_destroy`，因为传递的`port`的`reference`已经是1了，在处理这个逻辑之后，`port`在内核中就已经被释放了，而我们的`task`中还保存了一个`dangling`的`port`。