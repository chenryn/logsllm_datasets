User: 为了实现日志查询分析需求，编写了一段 SPL 语句，请你从专家角度，逐步思考分析需求，尽量详细的解释语句内容是如何实现需求的。

## 分析需求
我想问的是，系统 CPU 使用率低于 10% 的主机有多少台？而且这个比例和昨天相比有没有变化。

## SPL 语句
starttime="-1d/d" endtime="now/d" appname:top_info_system_stats | stats dc(ip) as _ct |appendcols [[ starttime="-1d/d" endtime="now/d" appname:top_info_system_stats  |stats min(cpu.idle_percent) as _min by ip |where _min <=10 |stats dc(ip) as _dc ]] |eval health=todouble(format("%.3f",abs(_ct-_dc)/_ct))

## 具体解释

Assistant: 这段 SPL（Search Processing Language）语句是为了解决特定的日志查询分析需求，即找出系统 CPU 使用率低于 10% 的主机数量，并比较今天与昨天的比例变化。下面是对该语句的逐步分析和解释：

### 第一步：确定时间范围


```spl
starttime="-1d/d" endtime="now/d"
```
这一步设置了查询的时间范围。`starttime="-1d/d"` 表示从昨天开始，`endtime="now/d"` 表示到当前日期。这样设置可以获取昨天到今天的全部数据。

### 第二步：获取主机信息


```spl
appname:top_info_system_stats
```
这一步从 `top_info_system_stats` 应用中提取数据，这个应用可能包含了系统的各项指标信息，包括主机名（或 IP 地址）和 CPU 使用率等。

### 第三步：统计主机数量


```spl
stats dc(ip) as _ct
```
这里使用 `stats dc(ip) as _ct` 对 IP 地址进行去重统计，`_ct` 是统计结果的别名，代表主机数量。

### 第四步：比较昨天和今天的 CPU 空闲率


```spl
appendcols [[ ... ]]
```
使用 `appendcols` 来添加额外的计算列。这个部分会计算昨天 CPU 空闲率低于 10% 的主机数量。

1. 再次设置时间范围：


```spl
starttime="-1d/d" endtime="now/d"
```
这一步与第一步类似，但这里是为了针对昨天的数据进行查询。

2. 筛选出昨天 CPU 空闲率低于 10% 的主机：


```spl
stats min(cpu.idle_percent) as _min by ip | where _min <= 10
```
这里先按 IP 地址分组，并找出每组中 CPU 空闲率的最小值（即最低的空闲率），然后筛选出空闲率低于或等于 10 的主机。

3. 再次统计这些主机的数量：


```spl
stats dc(ip) as _dc
```
这里统计的是昨天 CPU 空闲率低于 10% 的主机的数量，并将结果保存在 `_dc` 中。

### 第五步：计算比例变化


```spl
eval health=todouble(format("%.3f",abs(_ct-_dc)/_ct))
```
这一步计算比例变化。首先，`_ct` 和 `_dc` 分别代表今天和昨天主机数量的统计结果。`_ct-_dc` 计算的是两者之间的差异，然后取绝对值。最后，将这个差异除以今天的总数 `_ct`，得到比例变化。`format` 和 `todouble` 用于格式化输出，确保比例是一个小数。这个比例可以告诉我们与昨天相比，今天 CPU 使用率低于 10% 的主机数量的变化情况。

总结：这段 SPL 语句首先确定了时间范围，然后从日志中提取了主机的信息，计算了今天和昨天 CPU 使用率低于 10% 的主机数量，并最终计算了这两者之间的比例变化。通过这个分析，用户可以了解到系统 CPU 使用情况的变化趋势。