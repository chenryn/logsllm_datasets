title:Efficient content dissemination in heterogeneous networks prone to
episodic connectivity
author:Amir Krifa and
Marc Mendonca and
Rao Naveed Bin Rais and
Chadi Barakat and
Thierry Turletti and
Katia Obraczka
Efﬁcient Content Dissemination in Heterogeneous
Networks Prone to Episodic Connectivity
Amir Krifa
Planète Project-team
INRIA Sophia Antipolis
PI:EMAIL
Marc Mendonca
University of California
Santa Cruz, CA, USA
PI:EMAIL
Chadi Barakat
Planète Project-team
INRIA Sophia Antipolis
PI:EMAIL
Thierry Turletti
Planète Project-team
INRIA Sophia Antipolis
PI:EMAIL
Rao Naveed Bin Rais
Planète Project-team
INRIA Sophia Antipolis
PI:EMAIL
Katia Obraczka
University of California
Santa Cruz, CA, USA
PI:EMAIL
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network
Architecture and Design—network communications
General Terms
Design, Experimentation
1.
INTRODUCTION
Ubiquity of portable computing devices coupled with wide
availability of wireless communication present new impor-
tant opportunities for applications involving media-rich con-
tent dissemination. However, as access networks become in-
creasingly more heterogeneous, seamless data delivery across
internets consisting of a variety of network technology be-
comes a real challenge. In this demonstration, we showcase
a system that enables content dissemination over hetero-
geneous internets consisting of wired–, infrastructure-based
and infrastructure-less wireless networks that may be prone
to intermittent connectivity. Using an eﬃcient, yet ﬂexible
buﬀer management scheme, we are able to address application-
speciﬁc performance requirements such as average delay, de-
livery probability, energy eﬃciency, etc.
Our system uses the Message Delivery in Heterogeneous,
Disruption-prone Networks (MeDeHa) [2]) framework to de-
liver messages across a heterogeneous internet coupled with
History-Based Scheduling and Drop (HBSD) buﬀer manage-
ment [1] as a way to optimize resources provided by oppor-
tunistic networks. MeDeHa, which is described in detail
in [2], provides seamless data delivery over interconnect-
ing networks of diﬀerent types, i.e., infrastructure-based and
infrastructure-less networks. MeDeHa’s comprehensive ap-
proach to bridging infrastructure-based and infrastructure-
less networks also copes with intermittent connectivity. For
this demonstration, we showcase a ”complete stack” solu-
tion featuring, from to top to bottom, the DTN2 ”bundle”
layer, HBSD as an ”external router” to DTN2, and MeDeHa,
which handles message delivery. We have implemented, on
a Linux-based testbed, (i) the MeDeHa framework, (ii) the
HBSD [3] external router for the DTN2 [4] architecture.
Copyright is held by the author/owner(s).
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
ACM 978-1-4503-0797-0/11/08.
2. ARCHITECTURE OVERVIEW AND IM-
PLEMENTATION
Our main goal is to cope with heterogeneous networks
and to take advantage of content relaying over DTNs in or-
der to reduce communication costs and network resource
consumption. In this context, Figure 1 depicts an example
scenario targeted by our framework, where we have two in-
frastructure networks (Ethernet and 802.11) connected to a
MANET (nodes running OLSR) and a DTN network (nodes
running HBSD and DTN2). Gateway nodes with the MeDeHa
framework will interconnect the diverse networks. In the fol-
lowing, we detail the main building blocks of our framework
with respect to Figure 1.
Figure 1: Example scenario.
MeDeHa nodes deployed within the infrastructure net-
work (running the MeDeHa protocol [2]) have several re-
sponsibilities, including ﬁnding paths (or a suitable relay,
gateways in this case) to a destination across all connected
networks (even MANET or DTN) and exchanging topo-
logical and routing information to aid in relay selection.
MeDeHa nodes also store data for other unavailable nodes,
or transfer custody to better suited relay (based on some
utility metric).
MeDeHa gateways [2] are simply MeDeHa nodes that are
connected to and forward content between multiple net-
480works. With respect to the scenario presented in Figure 1,
MeDeHa gateways provide interface for communication with
two opportunistic networks, (i) A MANET network running
the OLSR protocol, and (ii) An Epidemic DTN Network
running the optimal HBSD scheduling and drop policy on
top of DTN2. We deﬁne the former interface as a MeDeHa-
MANET gateway, as shown in Figure 3, and the latter as a
MeDeHa-DTN gateway, as shown in Figure 2.
2.1 Hybrid Simulator Integration
We integrate our MeDeHa ns-3 simulator implementa-
tion with the testbed through ns-3 emulation and real-time
scheduling capabilities, as shown in Figure 4. Speciﬁcally,
we use ns-3 TAP to bridge part of the simulated network to
the testbed network. This works by creating a “ghost” node
on the ns-3 network that passes all Ethernet frames between
a Linux TAP device on the real node and the simulated links
to which the ghost node is connected. Packets can then be
routed between the simulated network and the networks to
which the real node is connected.
Figure 2: MeDeHa-DTN gateway architecture.
Whenever a new packet is received through the Ether-
net interface of a MeDeHa-DTN gateway, the MeDeHa dae-
mon extracts the packet data and IP addresses, and veriﬁes
whether this packet is destined to a node within the ad-
jacent DTN network or to another Internet node beyond
the DTN network. If the packet needs to be forwarded to
the DTN network, the MeDeHa daemon asks the HBSD
external router to create a bundle that encapsulates the re-
quired packet ﬁelds and data. In a last step, the HBSD ex-
ternal router forwards the created bundle towards another
MeDeHa gateway beyond the DTN network or towards a
DTN node. Thanks to the HBSD external router running
on both the gateway and DTN nodes, bundles forwarding
within the DTN network are optimized towards either de-
creasing the bundles average delivery delay or increasing
their average delivery rate.
The same control ﬂow is reproduced for the MeDeHa-
MANET gateway described in Figure 3. However, unlike
the DTN gateway, there is no need for a mapping process
between diﬀerent data types or between diﬀerent naming
schemes. The MeDeHa daemon takes the responsibility of
interfacing with the MANET underlaying routing protocol
(OLSR in this case) in order to identify the packet’s next
hop which can either be a local MANET node or a MeDeHa
gateway if the packet needs to traverse the MANET net-
work.
Figure 3: MeDeHa-MANET gateway architecture.
Figure 4: A sample hybrid network with both real
and virtual ns-3 nodes
3. DEMONSTRATION
The demonstration will showcase our implementation of
the MeDeHa protocol and the HBSD external router as well
as their joint ability to perform optimized message delivery
over heterogeneous networks. Our target scenario consists of
two infrastructure networks bridged via opportunistic net-
works (highlighted with dash arrows in Figure 1).
Our demonstration testbed will consist of Linux laptops
and Android Smartphones: some laptops will be connected
to two diﬀerent infrastructure networks and will run our
MeDeHa gateway while the other nodes communicate oppor-
tunistically on an epidemic DTN network. The intermittently-
connected DTN stations will run our HBSD external router
on top of DTN2. Additionally, a portion of the infrastruc-
ture network as well as an OLSR MANET will be be simu-
lated (Figure 4) to extend the scenario beyond what would
be available given limited equipment.
4. ACKNOWLEDGMENTS
This work has been supported in part by an ”Associated
Team” grant from INRIA, NSF grant CCF-091694, and a
Center for the Dynamics and Evolution of the Land-Sea In-
terface (CDELSI) fellowship.
5. REFERENCES
[1] A. Krifa, C. Barakat, and T. Spyropoulos, Optimal
Buﬀer Management Policy for Delay Tolerant
Networks, in proceedings of SECON, San Francisco,
June 2008, CA.
[2] R. N. Bin Rais, M. Mendonca, T. Turletti, and K.
Obraczka, Towards Truly Heterogeneous Networks:
Bridging Infrastructure-based and Infrastructure-less
Networks, in Proceedings of IEEE/ACM COMSNETS
Conference, Bangalore, India, 2011.
[3] HBSD, an external router for DTN2,
http://planete.inria.fr/HBSD DTN2
[4] DTN2 architecture, http://www.dtnrg.org/wiki/Code
481