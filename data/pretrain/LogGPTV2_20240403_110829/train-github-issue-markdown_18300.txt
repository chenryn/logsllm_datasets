  * I have searched the issues of this repository and believe that this is not a duplicate.
  * I have checked the FAQ of this repository and believe that this is not a duplicate.
### Environment
  * Dubbo version: 2.7.3
  * Operating System version: xxx
  * Java version: 1.8
  * Springboot: 2.1.8
  * nacos: 1.1.3
### Steps to reproduce this issue
  1. 在@reference配置指定方法的超时时间2000,其他地方的超时配置全去掉
  2. 测试
  3. dubbo使用了超时时间1000,即@reference的配置不生效
Pls. provide [GitHub address] to reproduce this issue.
### Expected Result
  1. 关于超时时间的优先级,我的理解是@reference>@service>consumer的yml配置>provider的yml配置
  2. 在provider和consumer的bootstrap.yml里使用dubbo.consumer.timeout和dubbo.provider.timeout配置各自的全局超时时间
  3. 在@reference和@service注解上配置指定方法或指定类的超时时间
  4. 期望通过以上方式合理的控制超时时间
### Actual Result
  1. springboot+dubbo+nacos项目能够正常运行
  2. 只在consumer的yml里使用dubbo.consumer.timeout配置超时时间,生效,符合预期
  3. 注释掉2的配置,系统使用了dubbo的默认超时时间1000,符合预期
  4. 只在 consumer使用@reference(version = "${this.version}", timeout = 6000) 不符合预期 ,期望使用6000,测试结果显示使用了默认的1000
  5. 只在consumer使用@reference(version = "${this.version}" ,methods = {  
@method(name = "xxxMethod", timeout = 5000)  
}) 不符合预期 期望使用配置的,测试结果显示使用了默认的1000
  6. 只在provider配置@service(version = "${this.version}", methods = {  
@method(name = "xxxMethod", timeout = 21000)  
}) 不符合预期 期望使用配置的,测试结果显示使用了默认的1000
  7. 只在@service(version = "${this.version}", timeout = 4000)配置超时时间, 符合预期
  8. 在provider的yml里配置dubbo.provider.timeout=5000,并在@service(version = "${this.version}", timeout = 4000), 不符合预期,测试结果是5000,期望是service上的能覆盖全局的
总结:
  1. 请问是我优先级理解错误,还是@reference和@service注解配置不生效
  2. 如何实现在一个地方可以配置整体的超时时间,又可以在特定的接口或者方法上配置特殊的超时时间
注:  
1.用的是org.apache.dubbo.config.annotation.Reference和org.apache.dubbo.config.annotation.Service  
2\. consumer是一个springboot项目 ,
provider是另一个springboot项目,服务的注册发现,提供给别的项目使用,都没有问题.