# Revealing Embedded Fingerprints: Deriving Intelligence from USB Stack Interactions

**Presenter: Andy Davis, Research Director, NCC Group**

---

## **NCC Group Offices**
### **UK Offices:**
- Manchester (Head Office)
- Cheltenham
- Edinburgh
- Leatherhead
- London
- Thame

### **North American Offices:**
- San Francisco
- Atlanta
- New York
- Seattle

### **Australian Office:**
- Sydney

### **European Offices:**
- Amsterdam, Netherlands
- Munich, Germany
- Zurich, Switzerland

---

## **Agenda**
### **Part One: Information Gathering**
- Overview of the USB enumeration phase
- Different USB stack implementations
- USB testing platform
- Installed drivers and supported devices
- Fingerprinting USB stacks and OS versions

### **Part Two: Potentially Exploitable USB Bugs**
- The Windows 8 RNDIS kernel pool overflow
- Challenges faced when exploiting USB bugs
- Conclusions

---

## **Part One: Information Gathering**

### **Why Do We Care?**
- If you connect to a device, surely you already know the platform?
- Most embedded devices are based on Linux, aren't they?
- May provide information useful for other attacks.

### **USB Background**
- **Enumeration Phase Overview:**
  - Assign an address
  - Determine speed of communication
  - Identify power requirements
  - Configure options
  - Device descriptions
  - Class drivers
  - Extensive information exchange, implemented in various ways

- **Enumeration Phase Peculiarities:**
  - Why is the device descriptor initially requested twice?
  - Why are there multiple requests for other descriptors?
  - Class-specific descriptors

### **Different USB Stack Implementations**
- **Typical Components of a USB Stack:**
  - Host Controller hardware
  - USB System software:
    - Host Controller Driver â€“ Hardware Abstraction Layer
    - USB Driver
    - Class drivers
  - Application software

- **Examples:**
  - **Windows USB Driver Stack**
  - **Linux USB Stack**
  - **Embedded Access USB Stack**

### **Interacting with USB**
- **Requirements:**
  - Capture and replay USB traffic
  - Full control of generated traffic
  - Class decoders
  - Support for Low/High/Full speed
  - USB 3.0 support (optional)

- **Testing Solutions:**
  - **Commercial Test Equipment**
  - **Facedancer (Cost-Effective Solution)**
  - **Best Solution: A Combination of Both**
    - Carefully crafted device data
    - Captured host response data
    - Microsecond timing
    - Decoded class-specific data

### **Information Enumeration**
- **Target List:**
  - Windows 8
  - Ubuntu Linux 12.04 LTS
  - Apple OS X Lion
  - FreeBSD 5.3
  - Chrome OS
  - Linux-based TV STB

- **Installed Drivers and Supported Devices:**
  - Enumerating supported class types (standard USB drivers)
  - Enumerating all installed drivers
  - Other connected devices

- **Enumerating Supported Class Types:**
  - USB class information stored in:
    - Device Descriptor
    - Interface Descriptor

- **Enumerating Installed Drivers:**
  - Drivers referenced by class (Device and Interface descriptors)
  - By VID and PID
  - Brute-forcing VID and PID values (e.g., using Facedancer)
  - Valid PIDs and VIDs available at [http://www.linux-usb.org/usb.ids](http://www.linux-usb.org/usb.ids)

- **Sniffing the Bus - Other Connected Devices:**
  - Data from other devices displayed on different addresses

- **Fingerprinting USB Stacks and OS Versions:**
  - Descriptor request patterns
  - Timing information
  - Descriptor types requested
  - Responses to invalid data
  - Order of descriptor requests

- **Matching Request Patterns to Known Stacks:**
  - **Unique Elements:**
    - **Windows 8 (HID):** Three Get Configuration descriptor requests
    - **Apple OS X Lion (HID):** Set Feature request right after Set Configuration
    - **FreeBSD 5.3 (HID):** Get Status request right before Set Configuration
    - **Linux-based TV STB (Mass Storage):** Order of class-specific requests

- **Timing Information:**
  - Large variance over the entire enumeration phase
  - Greater accuracy between specific requests
  - Potential to determine processor speed if the OS is known

- **Descriptor Types Requested:**
  - Microsoft OS Descriptors (MOD)
  - Used for "unusual" device classes
  - Special USB string descriptor at index 0xEE
  - Response to invalid MOD: Stall packet or single-ended zero reset (Windows XP only)

- **Responses to Invalid Data:**
  - Different USB stacks respond differently to invalid data
  - Maximum and minimum values
  - Logically incorrect values
  - Missing data

- **Order of Descriptor Requests:**
  - Some USB stacks request data in a different order
  - Different drivers may request descriptors multiple times
  - Device descriptors sometimes re-requested after enumeration

---

## **Part Two: Potentially Exploitable USB Bugs**

### **The Windows 8 RNDIS Kernel Pool Overflow (MS13-027)**
- **usb8023x.sys:** Default (Microsoft-signed) driver for network connectivity over USB.
- **Bug Trigger:**
  - Manipulating the `bNumInterfaces` field in the USB Configuration descriptor
  - `bNumInterfaces` > actual number of USB interfaces
  - Causes a kernel pool overwrite and a BAD_POOL_HEADER bug check

- **Analysis:**
  - **Case 1: bNumInterfaces = 3, bNumEndpoints = 2**
    - Overwrites "PreviousSize" in the next `nt!_POOL_HEADER`
  - **Case 2: bNumInterfaces = 3, bNumEndpoints = 5**
    - Overwrites "PoolTag" in the next `nt!_POOL_HEADER`

- **Pseudo Code:**
  - Manipulating `bNumInterfaces` and `bNumEndpoints` provides control over adjacent kernel memory pool.

### **Challenges in Exploiting USB Bugs**
- Lack of feedback channel
- Bugs often in kernel code
- Size constraints of descriptors
- Typical impact limited to privilege escalation
- USB over RDP considerations

---

## **Conclusions**
- The USB enumeration phase reveals useful information for fingerprinting.
- Class-specific communication can be even more revealing.
- Even vendors with mature SDL processes have USB bugs.
- USB bugs can potentially be exploited for privilege escalation.
- Reliable exploitation is extremely difficult.

---

**Questions?**

**Contact:**
- Andy Davis, Research Director, NCC Group
- Email: andy.davis@nccgroup.com

---

**Images and References:**
- Images from: p1fran.com, blog.brickhousesecurity.com, ewalk2.blog117.fc2.com, blogs.msdn.com, www.wired.com, msdn.microsoft.com, www.linux-usb.org, www.embedded-access.com, www.nvish.com, network.nature.com, windows7.iyogi.com, www.biro-media.hr, leadershipfreak.wordpress.com