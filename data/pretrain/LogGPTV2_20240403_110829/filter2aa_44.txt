Revealing Embedded Fingerprints: 
Deriving intelligence from USB stack 
interactions 
 Andy Davis, Research Director NCC Group 
Image from: p1fran.com 
UK Offices 
Manchester - Head Ofﬁce 
Cheltenham 
Edinburgh 
Leatherhead 
London 
Thame  
North American Offices 
San Francisco 
Atlanta 
New York 
Seattle 
Australian Offices 
Sydney 
European Offices 
Amsterdam - Netherlands  
Munich – Germany 
Zurich - Switzerland 
Agenda 
Part One: 
• Overview of the USB enumeration phase 
• Different USB stack implementations 
• USB testing platform 
• Installed drivers and supported devices 
• Fingerprinting USB stacks and OS versions 
Part Two: 
• The Windows 8 RNDIS kernel pool overflow 
• Challenges faced when exploiting USB bugs 
• Conclusions 
Part One: Information gathering 
• Why do we care? 
• If you connect to a device surely you already know the platform? 
• Embedded devices are mostly based on Linux anyway aren't they? 
• May provide information useful for other attacks 
USB Background stuff 
Image from: blog.brickhousesecurity.com 
Overview of the USB enumeration phase 
• What is enumeration for? 
• Assign an address 
• Speed of communication 
• Power requirements 
• Configuration options 
• Device descriptions 
• Class drivers 
• Lots of information exchange – implemented in many different ways 
Image from :http://ewalk2.blog117.fc2.com 
The USB enumeration phase 
Enumeration phase peculiarities 
• Why is the device descriptor initially requested twice? 
• Why are there multiple requests for other descriptors? 
• Class-specific descriptors: 
Different USB stack implementations 
• Typical components of a USB stack 
• Windows USB driver stack  
• Linux USB stack 
• Embedded Access USB stack 
Image from: blogs.msdn.com 
Typical components of a USB stack 
• Host Controller hardware 
• USB System software: 
• Host Controller Driver – Hardware Abstraction Layer 
• USB Driver 
• Class drivers 
• Application software 
Image from: www.wired.com 
Windows USB driver stack 
Image from: msdn.microsoft.com 
Linux USB stack 
Image from: www.linux-usb.org 
Embedded Access USB stack 
Image from: www.embedded-access.com 
Interacting with USB 
Image from: www.nvish.com 
USB interaction requirements 
• Need to capture and replay USB traffic 
• Full control of generated traffic 
• Class decoders extremely useful 
• Support for Low/High/Full speed required 
• USB 3.0 a bonus 
USB testing – gold-plated solution 
• Commercial test equipment 
USB testing – the cheaper approach 
• Facedancer (http://goodfet.sourceforge.net/hardware/facedancer21) 
Best solution: A combination of both 
•
Device data can be carefully crafted 
•
Host response data can be captured 
•
Microsecond timing is also recorded  
•
All class-specific data is decoded  
Information enumeration 
Image from: network.nature.com 
Target list 
• Windows 8 
• Ubuntu Linux 12.04 LTS 
• Apple OS X Lion 
• FreeBSD 5.3 
• Chrome OS 
• Linux-based TV STB 
Installed drivers and supported devices 
• Enumerating supported class types – standard USB drivers 
• Enumerating all installed drivers 
• Other devices already connected 
Enumerating supported class types 
Where is USB class information stored? 
Device Descriptor 
Interface Descriptor 
Installed drivers and supported devices 
• Drivers are referenced by class (Device and Interface descriptors) 
• Also, by VID and PID: 
• For each device class VID and PID values can be brute-forced     
(can easily be scripted using Facedancer) 
• Valid PIDs and VIDs are available (http://www.linux-usb.org/usb.ids) 
Enumerating installed drivers 
Not installed: 
All communication stops 
after “Set Configuration” 
Installed: 
Sniffing the bus - Other connected devices 
• Data from other devices will be displayed on other addresses 
Fingerprinting USB stacks and OS versions 
• Descriptor request patterns 
• Timing information 
• Descriptor types requested 
• Responses to invalid data 
• Order of Descriptor requests 
Matching req. patterns to known stacks 
Linux-based TV STB 
Windows 8 
Request patterns unique elements? 
• Windows 8 (HID) – Three Get Configuration descriptor requests (others have two) 
• Apple OS X Lion (HID) – Set Feature request right after Set Configuration 
• FreeBSD 5.3 (HID) – Get Status request right before Set Configuration 
• Linux-based TV STB (Mass Storage) – Order of class-specific requests 
Timing information 
Timing information 
Using timing for fingerprinting? 
• Large amount of variance over entire enumeration phase: 
• 4.055s, 3.834s, 3.612s, 3.403s, 3.089s 
• Much greater accuracy between specific requests: 
• Between String Descriptor #0 and #2 requests - 5002us, 5003us, 5003us, 4999us, 5001us 
• If we know the OS we can potentially determine the processor speed 
Descriptor types requested 
• Microsoft OS Descriptors (MOD) 
• Used for “unusual” devices classes 
• Devices that support Microsoft OS Descriptors must store a special USB string 
descriptor in firmware at the fixed string index of 0xEE. The request is: 
• If a device does not contain a valid string descriptor at index 0xEE, it must respond 
with a stall packet. If the device does not respond with a stall packet, the system will 
issue a single-ended zero reset packet to the device, to help it recover from its stalled 
state (Windows XP only). 
Responses to invalid data 
• Different USB stacks respond to invalid 
data in different ways 
• Maximum and minimum values 
• Logically incorrect values 
• Missing data 
Image from: windows7.iyogi.com 
Invalid data unique elements? 
Windows 8 (all versions) 
If you send a specific, logically incorrect HID Report descriptor this happens: 
Invalid data unique elements? 
Windows 8 (all versions) 
If you send a specific, logically incorrect HID Report descriptor this happens: 
Order of Descriptor requests 
• Some USB stacks request data from devices in a different order 
• Different drivers may request different descriptors multiple times 
• Sometimes Device descriptors are re-requested after enumeration is complete 
Part Two: Potentially exploitable 
USB bugs 
Image from: www.biro-media.hr 
The Windows 8 RNDIS kernel pool overflow 
• MS13-027 
• usb8023x.sys - default (Microsoft-signed) Windows Remote NDIS driver that 
provides network connectivity over USB.  
• When a USB device that uses this driver is inserted into a Windows host, during the 
enumeration phase the USB Configuration descriptor is requested and parsed 
• When the following USB descriptor field is manipulated a Bug check occurs 
indicating a kernel pool overwrite: 
•
Configuration descriptor --> bNumInterfaces field > actual number of USB interfaces   
The field is “bNumInterfaces” in Table A2: USB Configuration Descriptor  
(http://msdn.microsoft.com/en-us/windows/hardware/gg463298) 
The Bug Check 
BAD_POOL_HEADER (19) 
The pool is already corrupt at the time of the current request. 
Arguments: 
Arg1: 00000020, a pool block header size is corrupt. 
Arg2: 83e38610, The pool entry we were looking for within the page. 
Arg3: 83e38690, The next pool entry. 
Arg4: 08100008, (reserved) 
WARNING: SystemResourcesList->Flink chain invalid. Resource may be 
corrupted, or already deleted. 
WARNING: SystemResourcesList->Blink chain invalid. Resource may be 
corrupted, or already deleted. 
SYMBOL_NAME:  usb8023x!SelectConfiguration+1bd 
The SelectConfiguration() function 
The crash point 
Analysis #1 
When bNumInterfaces = 3 (one more than it should be) and bNumEndpoints = 2 
(valid value) 
Next kernel pool: 
849c3b28  10 00 0a 04 56 61 64 6c-6b 8f 94 85 28 8c 90 85  ....Vadlk...(... 
becomes: 
849c3b28  00 00 0a 04 56 61 64 6c-6b 8f 94 85 28 8c 90 85  ....Vadlk...(... 
So we’re overwriting "PreviousSize" in the next nt!_POOL_HEADER - this is what 
triggered the original Bug Check when ExFreePool() is called 
Analysis #2 
When bNumInterfaces = 3 (one more than it should be) and bNumEndpoints = 5 
(three more than it should be) 
Next kernel pool: 
84064740  17 00 03 00 46 72 65 65-48 2d 09 84 30 a8 17 84  ....FreeH-..0... 
becomes: 
84064740  17 00 03 00 00 72 65 65-48 2d 09 84 30 a8 17 84  .....reeH-..0... 
So we’re now overwriting "PoolTag" in the next nt!_POOL_HEADER 
What’s going on? 
kd> dt nt!_POOL_HEADER 
– +0x000 PreviousSize : Pos 0, 8 Bits 
– +0x000 PoolIndex : Pos 8, 8 Bits 
– +0x000 BlockSize : Pos 16, 8 Bits 
– +0x000 PoolType : Pos 24, 8 Bits 
– +0x004 PoolTag : Uint4B 
– +0x008 ProcessBilled : Ptr64 _EPROCESS 
By manipulating bNumInterfaces and bNumEndpoints in a USB Configuration 
descriptor we appear to have a degree of control over where in the next adjacent 
kernel memory pool I can overwrite a single byte with a null (the null write occurs four 
bytes after the end of the pool I control and I can also control its size and some 
elements of its contents so could also potentially overwrite the next pool header with 
something useful) 
Some pseudo code 
Challenges faced when exploiting USB bugs 
• Lack of feedback channel 
• The bug is often in kernel code 
• Descriptors are generally very size-constrained 
• Typical impact of USB exploitation typically restricted to privilege escalation 
• What about USB over RDP? 
Image from: leadershipfreak.wordpress.com 
Conclusions 
• The USB enumeration phase reveals useful information for fingerprinting 
• Class-specific communication is potentially even more revealing 
• Even vendors with mature SDL processes have USB bugs 
• USB bugs can potentially be exploited, to provide privilege escalation 
• …but it is extremely difficult to achieve reliably 
Questions? 
Andy Davis, Research Director NCC Group 
andy.davis ‘at’ nccgroup ‘dot’ com