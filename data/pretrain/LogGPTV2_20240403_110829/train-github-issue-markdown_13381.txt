Please:
  * Check for duplicate requests.
  * Describe your goal, and if possible provide a code snippet with a motivating example.
Using 16-bit (half-precision) floating point numbers reduces memory usage and
can make the program run faster, compared to f.ex. 32-bit. My program is
working with complex numbers and I'd like to take advantage of the 16-bit
speed-up, but JAX only support `complex64`.
Can we add support for half-precision complex numbers (`complex32`)?
    import jax.numpy as jnp
    f32 = jnp.array([1, 2, 3], dtype="float32")
    print(f32.size * f32.itemsize)  # 12 (bytes)
    f16 = jnp.array([1, 2, 3], dtype="bfloat16")
    print(f16.size * f16.itemsize)  # 6 (bytes)
    c64 = jnp.array([1, 2, 3], dtype="complex64")
    print(c64.size * c64.itemsize)  # 24 (bytes)
    c32 = jnp.array([1, 2, 3], dtype="complex32")
    print(c32.size * c32.itemsize)  # 12 (bytes)  ` and `imag `)?
    from typing import NamedTuple
    import jax.numpy as jnp
    class Complex32(NamedTuple):
        real: jnp.ndarray
        imag: jnp.ndarray
    c32 = Complex32(
        jnp.array([1, 2, 3], dtype="bfloat16"),
        jnp.array([4, 5, 6], dtype="bfloat16"),
    )
    jnp.abs(c32)  # TypeError: absolute requires ndarray or scalar arguments, got  at position 0.
Related issue: #216
Thanks!