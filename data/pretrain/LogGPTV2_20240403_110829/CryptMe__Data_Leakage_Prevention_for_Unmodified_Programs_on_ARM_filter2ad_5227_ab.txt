2.2 TrustZone
TrustZone is a secure extension to the ARM architecture, including modiﬁca-
tions to the processor, memory, and peripherals [35]. Most ARM processors
support this security extension. TrustZone is designed to provide a system wide
isolated execution environment for sensitive workloads. The isolated execution
environment is often called secure world, and the commodity running environ-
ment is often referred to as the normal world or the rich OS. Diﬀerent system
resources can be accessed depending on the world of the process. In particular,
the Security Conﬁguration Register (SCR) in the CP15 co-processor is one of
the registers that can only be accessed while the processor is in the secure world.
NS (non-secure) bit in the SCR controls the security context of the processor.
When the bit is set, the processor is in the normal world. When the bit is clear,
the processor is in the secure world.
One of the most important components in a TrustZone-based system is Trust-
Zone Address Space Controller (TZASC). Registers of TZASC are mapped into
the physical address of the SoC, and can be accessed via memory operations.
Access policies for diﬀerent physical memory regions can be programmed via
these registers. With these controls, secure world code can control whether a
memory region can be accessed from both secure and normal worlds, or can
only be accessed from secure world. For other peripherals, such as iRAM, diﬀer-
ent SoC manufactures implement diﬀerent components to conﬁgure their access
policy. In a typical implementation, a Central Security Unit (CSU) is used by
trusted secure world code to set individual security access privileges on each of
the peripheral.
CryptMe: Data Leakage Prevention on ARM Devices
385
3 Threat Model and Security Requirements
3.1 Threat Model
CryptMe is designed to prevent the sensitive data of a running program from
being leaked into DRAM chip or other peripherals. The threats considered in this
work, include (a) misused benign OS functions such as swap, hibernation, and
core dump, (b) passive read-only memory disclosure attacks, and (c) malicious
physical attacks targeting the DRAM chips.
We assume a benign OS kernel that runs in the normal world of a TrustZone-
powered device. That is, basic OS services, such as task management, memory
management and execution environment maintenance, etc. are trusted. We do
not assume a compromised OS kernel. Otherwise, the process can be manipulated
arbitrarily. We assume orthogonal solutions to ensure the integrity of the Linux
kernel [4].
The OS is also assumed to correctly implement supplementary functions to
improve eﬃciency (e.g., swap, hibernation), and to facilitate program analyses
(e.g., core dump). However, once misused, these functions can be exploited to
leak sensitive data, because they have the capability to access the whole address
space of a process. There seems to be a countermeasure to deal with this issue
– disabling these OS functions. However, many of them are indispensable in
modern OSes. Once disabled, the whole system will be signiﬁcantly aﬀected. For
example, disk swap is the key technique to support virtual memory. Without it,
the system could quickly run out of memory.
The attacker could also exploit passive read-only memory disclosure attacks.
When exploiting these read-only attacks, attackers often do not need to com-
promise the kernel to gain control ﬂow and manipulate critical data structures.
Therefore, active monitoring techniques (e.g., kernel integrity checking) cannot
detect such “silent” data leakages. For example, in [17], the authors exploited
two kernel vulnerabilities [27,28] to successfully extract private keys used in
OpenSSH and Apache Server in several minutes. According to a statistics, this
kind of “Gain Information” vulnerability contributes 16.5% of all Linux vulner-
abilities as of Mar. 2018 [9].
We assume attackers are able to launch physical attacks to expose DRAM
contents, bypassing the process isolation enforced by the OS. In a cold boot,
the attacker is capable of dumping the entire DRAM image of a running device
by rebooting it into another malicious OS from an external storage [16,26]. In
DMA attacks [33], a malicious peripheral device is utilized to directly read out
memory contents by issuing DMA requests. Moreover, an advanced attacker
might even be able to eavesdrop data transmission between the DRAM chips
and the processor by monitoring the memory bus [10].
The protected program itself must be trusted. That is, we assume a Sen-
Process never leaks SenData out of its private memory segments by itself,
either intentionally or unintentionally. Since our protection is built on top of
ARM TrustZone, we also assume the correctness of TrustZone implementations.
The privileged codes of CryptMe running in the TrustZone secure world are
386
C. Cao et al.
Clear-text Data in DRAM
Cipher-text Data in DRAM
Clear-text Data in iRAM
Non-present
SenProcess Virtual Address Space
Sliding Window: Two Pages
SenProcess Virtual Address Space
Data
private_struct
Code
User-Kernel Space Split
Data
Code
task_struct
tz=0
task_struct
tz=1
task_struct
tz=0
Secure Page 
Table
shared_struct
Secure World
Normal Page 
Table
shared_struct
Normal World
Fig. 2. CryptMe overview with a sliding window size of two pages
assumed to be free of vulnerability, as well as the trusted boot process enabling
the TrustZone-based hardware memory control. In the design and implemen-
tation of CryptMe, we keep the privileged code base small (5.8K Lines Of
Code (LOC), in the prototype system), so it is possible to formally verify its
correctness. Lastly, side-channel attacks are out of the scope in this paper.
3.2 Security Requirements
Based on the threat model, we formalize the problem into the following security
requirements that CryptMe aims to meet.
R1. The DRAM chip does not contain any clear-text SenData.
R2. The clear-text SenData is constrained in the on-chip iRAM, which can only
be accessed by the secure-world code.
Software-based memory disclosure attacks are thwarted by the combination
of R1 and R2. In addition, meeting R1 keeps SenData immune to cold-boot
attacks and bus-monitoring attacks, while meeting R2 prevents DMA attacks.
4 Design
This section describes the design of CryptMe. We start with an overview of
the proposed system, then expand on several key techniques. We show how
CryptMe supports oﬄoading CryptMe-enabled SenProcesses to an isolated
execution environment in the TrustZone secure world, and how page tables in
this isolated environment are maintained. Finally we present the protections that
CryptMe provides for the oﬄoaded SenProcesses– encryption and isolation.
CryptMe: Data Leakage Prevention on ARM Devices
387
4.1 Overview
In CryptMe, a Linux OS runs in the normal world, while protected SenPro-
cesses run in the secure world. As shown in Fig. 2, like any other processes in
a Linux system, each SenProcess is referenced by a task struct data struc-
ture in the normal OS. In fact, the task struct of a SenProcess is no diﬀerent
from normal ones except for a newly added ﬂag (tz) and a world-shared memory
buﬀer (shared struct). The ﬂag identiﬁes a process as a SenProcess while
the shared buﬀer is used to exchange critical information (such as page table
updates) between the two worlds.
Each SenProcess is still created, maintained, and scheduled by the normal
OS, but executed in the secure world. The normal OS is customized so that
just before a SenProcess is to return to user space, an smc instruction is
issued to transfer the control to the secure world. In the secure world, there
is a piece of Secure Privileged Code (SPC) that is responsible for maintaining
the execution environment of a SenProcess by exchanging context information
with the normal OS. Each SenProcess has its own private struct that stores
its hardware context, and shared struct that is shared with the normal OS to
enable data exchange.
When the SenProcess is executed in the secure world, its working data set
is kept in clear-text in the iRAM, which is not accessible by the normal OS. For
each SenProcess, SPC keeps a sliding window of iRAM pages for the working
set. If the working set of a SenProcess exceeds the threshold assigned to it,
SPC encrypts the oldest page in the window and copies it to the corresponding
DRAM page, and then assigns the freed iRAM page to the virtual address that
triggers the page fault.
A SenProcess has separate page tables in each world. Normal world page
table is maintained by the normal OS with a customized page fault handler. It
serves as a template for the Secure Page Table in the secure world. In both page
table settings, the clear-text code segment is backed by the same DRAM pages,
which CryptMe takes no eﬀort to protect. However, SenData, which normal
world page table maps to DRAM pages, is encrypted. SenData contained in
the sliding window in iRAM is decrypted to keep the SenProcess runnable in
the secure world, as shown in Fig. 2.
CryptMe employs the on-chip hardware-based cryptographic engine to
accelerate AES computations. An AES key is generated randomly when a new
SenProcess is about to be created. It is kept in a dedicated iRAM page shared
by all the SenProcesses. The round keys and intermediate values generated
during encryption/decryption are all constrained in this page, therefore, the key
materials enjoy the same level of protection with that provided for SenData.
4.2 Executing in the Secure World
This section describes how a SenProcess gets oﬄoaded to execute in the secure
world. This is the prerequisite to enforce other security measures that will be dis-
cussed later. Since the secure world and the normal world are logically separated,
388
C. Cao et al.
SPC has to maintain the essential execution environments for SenProcesses
to run in the secure world. In this section, we introduce a na¨ıve code oﬄoading
mechanism, in which the normal-world page table and secure-world page table
share the same set of page table entries. As a result, SenProcess code runs in
the secure world, while all the memory references are routed to DRAM pages
that both worlds can access. In Sect. 4.3, we show how to improve this na¨ıve
design to encrypt SenData that appear in the DRAM. Then, in Sect. 4.4, we
further describe how to deprive the Linux OS kernel and other peripheral devices
of the privilege to access clear-text SenData in iRAM.
Code Oﬄoading. CryptMe supports memory encryption on a per-process basis.
To start a SenProcess, the user land loader invokes a dedicated system call,
similar execve, which marks the process in its task struct.
With the capability to identify a SenProcess, the kernel is further instru-
mented to invoke an smc instruction whenever a SenProcess is about to be
scheduled to run in user space. The smc instruction transfers control ﬂow to
the monitor mode in secure world, where the monitor mode code handles world
switch, and invokes SPC to restore the hardware context of the SenProcess
and execute it in the user space in secure world.
System Services. SenProcess in the secure world may incur exceptions during
execution. When this happens, the SenProcess traps into SPC. To keep the
code base of SPC small, SPC forwards all of them directly to the normal world
OS kernel. In ARM platform, system calls are requested by the swi instruction,
which traps the processor in the privileged SVC mode. Other exceptions such
as interrupt and page fault trap the processor to the corresponding privileged
CPU modes. To forward an exception to the normal world while keeping the
normal OS oblivious of it, SPC needs to reproduce a hardware context as if the
exception is triggered in the user space of the normal world. To achieve this,
system registers indicating the context must be correctly set.
Re-producing Exceptions. Any SenProcess exception is ﬁrst intercepted by
the SPC. Because the monitor-mode code taking charge of world switches has
ultimate privilege to access the resources of both worlds, it is possible to manually
manipulate relevant registers that indicate the pre-exception context. Normally,
these registers can only be set by hardware. With these registers manipulated,
the system call handler in the Linux kernel can correctly parse the context
information.
Page Table Synchronization. Each SenProcess in the secure world has its
own page table. We instrument existing page fault handler in the normal Linux
kernel to share the page table update information with SPC. This is based on
the aforementioned exception forwarding mechanism. In particular, when a page
fault exception is forwarded to the Linux kernel, it invokes its own page fault
handler to populate the corresponding page in the normal world. Whenever the
set pte at function is invoked, page table update information is duplicated in
CryptMe: Data Leakage Prevention on ARM Devices
389
Table 1. Cache and iRAM comparison
Immunity to
physical attacks
✓
iRAM
L2 cache ✓
Capacity Controllability Continuous
Intrusiveness
✗
✓
✓
✗
support
✓
✗
✓
✗
the world-shared buﬀer shared struct. The information includes the address of
the page table entry, the updated value of the page table entry, the inﬂuenced
virtual address, and other metadata. When the SenProcess is scheduled to
execute in the secure world, SPC uses the shared information as a template
to update the secure-world page table. In this way, SPC and the normal-world
kernel maintain an identical copy of page table for each SenProcess.
4.3 Transparent Encryption
Barely oﬄoading a SenProcess to the secure world does not gain any security
beneﬁt. This section describes how CryptMe enforces security requirement R1.
That is, SenData appears in DRAM only as cipher-text.
To execute a process, the processor should always work on clear-text program
data. In our design, a SenProcess runs with a clear-text working set that resides
on on-chip memory unit, which is more expensive for an attacker to launch a
physical attack. The rest of SenData is kept encrypted in the DRAM. Here,
two commonly used on-chip memory units are processor caches and iRAM. We