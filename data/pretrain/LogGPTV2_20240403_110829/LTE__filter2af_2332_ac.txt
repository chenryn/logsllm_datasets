当测试每个案例时，LTEFuzz
必须识别其中哪些会导致接收实体出现问题行为。如果接收实体的操作日志可用于监控，则可以轻松实现。但是，如果没有运营商或设备供应商的支持，研究人员无法获得蜂窝网络的运行日志。为了克服这个限制，LTEFuzz
通过基于简单的决策树仅监控 UE
中的日志来对问题行为进行分类，如下图所示。该逻辑有两个决策阶段：（1）测试用例（无效消息）是否被接受，以及（2）测试用例是否导致受害UE断开连接。对于第一个决策阶段，我们根据
3GPP 标准定义接收实体接受每个测试用例时的预期响应。然后，LTEFuzz 在发送每个测试用例时检查 UE 是否收到预期的响应。例如，如果测试用例是无效的
NAS 身份请求，则预期响应应该是具有所需消息内容的 NAS 身份响应。一旦收到这个预期的响应，LTEFuzz
就会认为测试用例被接受，并将测试用例归类为异常，因为不应接受具有无效输入的测试用例。在第二个决策阶段，它进一步检查受害UE是否响应测试用例与网络断开连接。如果是，则归类为有问题，这可能导致对受害
UE 的拒绝服务（情况 1）。如果没有接受或未知，它也被归类为有问题，因为这种行为可能被利用来进行欺骗攻击（情况
2）。当测试用例在第一阶段没有被接受时，结果在第二阶段被分成两个不同的用例。如果受害UE在接收实体不接受测试用例的情况下与网络断开连接，则它也被归类为有问题的行为，这可能源于接收实体在识别接收到的消息无效时的不当行为（情况
3)。否则，测试用例被归类为正常，这意味着接收实体正确处理了无效消息（情况
4）。基于这种分类，我们可以很容易地识别异常，甚至可以获取攻击场景。例如，攻击者可以利用分类为案例 1 和 3 的精心制作的消息对受害者 UE 进行 DoS
攻击。
## 0x04 Implementation
虽然我们在上面解释了我们减少了测试用例的数量，但是手动执行这个数量的测试用例是很耗时的。此外，手动方法可能会增加引入错误的可能性，从而影响实验的一致性和可靠性。为此，我们尝试在完全可控的开源
LTE 堆栈和称为 SCAT 的控制平面日志记录工具的帮助下尽可能地自动化测试操作。 LTEFuzz 执行测试用例的实验设置和实现分为两种类型：1)
检查上行测试用例的运营网络组件，以及 2) 检查商用移动设备的下行链路测试用例。  
1) **检验运营网络。** 在此步中，测试人员充当恶意 UE，并将带有测试用例输入的精心设计的消息发送到目标操作网络。测试器在称为 srsLTE
的开源标准 UE 堆栈上实现。为了确认每个测试用例是否在网络侧被执行或触发失败，我们使用决策树通过仅监控 UE
侧的日志来对有问题的用例进行分类。为此，测试人员通过在 RRC 和 NAS 层欺骗受害者 UE 的身份来冒充受害者 UE
来发送测试用例消息。然后，每当我们的测试人员执行测试用例时，我们都会通过使用 SCAT 来观察受害 UE 的行为。我们通过在测试者和受害 UE
之间建立通信通道来使此过程自动化。 ①当受害 UE 准备好时，测试器执行测试用例并向受害 UE 发送通知。②收到通知后，受害者 UE 向公共网站发送
ping 请求并检查 ping 响应。如果是 Network is unreachable，则测试用例被标记为“Caused de-registration”。③ 最后，我们分析了 UE
端的日志，并根据我们的决策树对每个测试用例进行分类。下图展示了运行我们的上行链路测试的实际屏幕截图。我们通过考虑以下三个案例进行了上行测试，以验证每个测试案例的有效性。受害者和测试者位于（1）同一个小区，（2）不同小区但在同一个
eNB 中，以及（3）不同的 eNB 但在同一个 MME 池中。
2) **检验商用移动设备。** 在这种情况下，测试器充当在 openLTE 之上实现的恶意 LTE 网络，受害 UE 连接到主机 PC
以捕获控制平面日志。自动化测试操作如下。 ① 一旦将测试用例作为输入提交到恶意 LTE 网络，它就会等待，直到受害者尝试连接到我们的网络。②当受害者发送
RRC 连接请求时，我们的恶意 LTE 网络按照测试用例中的规定运行，并通知受害者端测试已执行。
③受害方收到通知后，保存控制平面消息。此外，如果受害者陷入无法恢复到正常状态的无效状态，主机 PC 通过发送 Android 调试桥 (ADB)
命令强制受害者 UE 重新启动。  
这部分由 3,470 行代码 (LoC) 组成，这些代码是通过深入分析 537 个开源工具文件中超过 9 万行的代码而确定的。这包括用于测试输入生成器的
1,937 个 C++的 LoC、用于上行/下行链路测试器的 1,390 个 C++的 LoC 以及用于测试器和受害 UE 之间通信信道的 143 个
Python 的 LoC。
## 0x05 The Results
我们仔细地对两个 Tier-1 运营商网络（具有三个不同的 MME 和三个 eNB）和商业
UE（包括三个不同的基带供应商）进行了动态测试。每个测试用例的测试结果表明，我们在不同的目标网络组件和设备供应商中发现了 51
个漏洞。我们通过采访运营商的同行证实了我们在运营网络中的大部分实验结果的有效性。我们通过将结果分为五种类型来解释我们的实验结果及其根本原因分析。
###  A. 初始 RRC 过程不受保护
**测试用例观察。** RRC层属性1的测试表明RRC连接过程既没有加密也没有完整性保护；因此，属于 RRC 连接过程的所有消息都归类为表 IV
中列出的情况 1 或 2。因此，在 RRC 连接过程中，对手可以利用这些消息来伪造内容或拒绝受害 UE 的连接。例如，如果攻击者将 RRC 连接请求中的
ueIdentity 字段的内容更改为受害者的 S-TMSI，这可以欺骗 eNB 并使其相信受害者 UE 当前处于 RRC CONNECTED
状态，尽管受害者处于RRC 空闲状态。  
 **根本原因分析。** 根据 3GPP 标准，UE 和 MME 之间的初始认证过程通过 NAS 协议发生，在 RRC 连接过程之后进行处理。因此，任何
eNB 首先允许 UE 的 RRC 连接请求，并将认证过程留给
MME。当鉴权过程由于UE的无效响应而失败时（例如，在未订阅用户或非法UE的情况下），MME向eNB发送UE上下文释放请求消息以释放异常用户的现有RRC连接。因此，按照设计，即使是未合法订阅特定运营商的非法用户也能够连接到该运营商的
eNB。然而，他们将无法维持 RRC 连接超过几秒钟，因为他们的设备将无法正确响应 NAS 身份验证请求。尽管有这个限制，但我们确定只有能够连接到
eNB（但无法继续连接以实现完全注册）的攻击者才可以执行关键攻击，例如阻止到目标 eNB 的任何 RRC 连接，断开当前的 RRC
连接，并阻止目标用户的传入服务。这些攻击主要源于 3GPP 标准，因此初始 RRC 连接过程不受保护，可能被对手滥用。
###  B. 无效的上行 NAS 明文消息失效
**测试用例观察。** 如上所述，我们对三种不同情况进行了上行链路测试：受害者 UE 和测试者 UE4 位于 (1) 同一小区，(2) 不同小区但在同一
eNB 中，以及 (3) 不同的 eNB但在同一个 MME 池中。结果表明，攻击者可以通过伪装成受害者 UE 的 RRC
连接发送无效的明文请求。有趣的是，三种 MME 类型在收到我们无效的明文请求时有不同的问题行为。例如，当测试者向 MME1 和 MME3 发送精心设计的明文
NAS 连接请求时，他们删除了受害者 UE 的连接并向测试器发送了释放命令，从而隐秘地将受害者 UE 从网络中分离（情况 3）。在这种情况下，除非它通过发送
NAS 服务请求来启动上行链路数据的传输，否则受害者 UE
不会收到其与服务断开连接的通知。当受害UE收到原因为隐式分离的服务拒绝时，它必须继续进行初始连接过程以重新连接到LTE网络，这会导致服务中断几秒钟。对于另一种断开情况，在收到普通的
NAS Detach 请求后，所有三个 MME 都立即断开与受害 UE的连接，并向测试器 UE 回复 NAS Detach accept（情况
1）。除此之外，我们还证实了MME2 在没有任何保护的情况下处理明文 NAS 上行链路 NAS 传输（情况
2）。在这种情况下，如果用户订阅了与上述易受攻击的运营商有漫游协议的任何运营商，则攻击者可以利用此 MME2 向任何用户发起 SMS
网络钓鱼攻击，而无需付费。  
 **根本原因分析。** 根据 3GPP 标准，UE 仅在没有有效的安全上下文时才发送没有安全保护的初始请求，例如发生上下文定时器过期或意外错误时。如果
UE 没有有效的安全上下文（即用于加密和完整性保护的会话密钥），则 MME
需要创建一个新的有效安全上下文，以便进一步实现完全注册。创建受害者新的有效安全上下文的第一步是 UE 和 MME
之间的身份验证过程。因此，在收到未经保护的的来自测试人员（充当恶意 UE）的欺骗性初始请求后，MME 将需要执行 NAS
身份验证程序以确认此异常消息是否来自合法用户，而无需处理该消息或立即断开连接现有的 UE 连接。因此，由于我们假设攻击者 UE
没有有效的安全上下文，它无法正确执行认证过程，从而不会影响合法 UE 的现有连接。因此，如果这在 MME 中正确实现，则受害 UE
不应隐式地与网络分离，如在我们的测试案例中所观察到的。总之，我们发现所有三个 MME 都没有正确处理无效的普通请求。
###  C. 非完整性检查使欺骗攻击成为可能
**测试用例观察。** 为了验证属性 2 中的第一种情况，我们的测试器生成了具有不正确 MAC 的安全保护 NAS 消息，并将它们发送到 MME 或
UE，以检查它们是否适当地验证了 MAC。因此，我们在收到具有无效 MAC 的消息时在不同的 MME 中观察到三种不同的问题行为（情况 1、2 和
3）。属于情况 1 和 2 的 MME 没有验证
MAC，只是接受了无效消息。例如，当测试者发送一个带有无效MAC的上行NAS传输消息时，MME认为这是有效的，因此，SMS被发送到目的UE。另一方面，属于情况
3 的另一个 MME 在收到消息时验证了 MAC。然而，无论接收到的消息类型如何，接收到具有不正确 MAC 值的消息都会导致 MME 断开受害 UE
的现有连接。在这种情况下，带有不正确的 MAC 的上行 NAS 传输消息会导致受害 UE 注销，并且没有将 SMS 消息发送到目标 UE。  
 **根本原因分析。** 根据 3GPP 标准，一旦 UE 和 MME 之间存在有效的安全上下文，UE 和 MME 都必须验证 NAS