title:Private stateful circuits secure against probing attacks
author:Yu Yu and
Jussipekka Leiwo and
A. Benjamin Premkumar
Private Stateful Circuits Secure against Probing Attacks
∗
Yu Yu
T-Systems Singapore Pte Ltd †
8 Shenton Way, #10-01
Temasek Tower
Singapore 068811
PI:EMAIL
Jussipekka Leiwo
T-Systems Singapore Pte Ltd
8 Shenton Way, #10-01
Temasek Tower
Singapore 068811
jussipekka.leiwo@t-
systems.com.sg
Benjamin Premkumar
Nanyang Technological
University
50 Nanyang Avenue
Singapore 639798
PI:EMAIL
ABSTRACT
We discuss the following problem: how to guarantee privacy
of a circuit if an adversary can eavesdrop on its wires, where
the functionality of the circuit is assumed public and the
adversary attempts to discover information regarding the
computation, namely, input, intermediate results and out-
put. We present a solution by introducing a private stateful
circuit that securely (against probing attacks) computes the
same function as the original circuit does. This is achieved
with a reasonable increase in circuit size and depth.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and Protection
General Terms
Secure hardware implementation
INTRODUCTION
1.
This paper discusses how to preserve privacy if an adversary
can eavesdrop on wires of a circuit, where the privacy is
deﬁned as the information regarding a speciﬁc computation
(i.e., input, intermediate results, output).
2. PRIVATE COMPUTATION OF CIRCUITS
In the past few decades, signiﬁcant progress has been made
in building most cryptographic problems on complexity the-
oretic foundations. However, most analysis is only con-
ducted on algorithms and it is not always true that an imple-
mentation of a provably secure algorithm is also trustworthy.
This is because the implementation of an algorithm may not
be a black-box, namely, it may reveal additional informa-
tion regarding some secrets of computation (e.g., a private
key). For example, the power consumption or the time it
∗Part of this work was done when the author was with
Nanyang Technological University, Singapore.
Permission to make digital or hard copies of all or part of this work
for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage
and that copies bear this notice and the full citation on the first page.
To copy otherwise, or republish, to post on servers or to redistribute
to lists, requires prior specific permission and/or a fee.
ASIACCS’07, March 20–22, 2007, Singapore.  
Copyright 2007 ACM 1-59593-574-6/07/0003…$5.00.
takes for some operation might vary for diﬀerent internal
operands [15, 16], which may be exploited by attackers to
break the implementation of a sound algorithm (e.g. RSA)
without necessarily solving the underlying intractable prob-
lem (e.g. integer factorization). Another threat is the prob-
ing attack (a form of side channel attacks), where an attacker
can place metal needles on wires chosen at his choice and
read the corresponding results during the computation [1,
14]. Several countermeasures [7, 18, 13] against side channel
attacks haven been proposed without mathematical justiﬁ-
cation and some of them already broken [4, 6]. Goldreich
and Ostrovsky [10] proposed a software protection scheme
using of a minimal amount of tamper-proof hardware to en-
crypt memory I/O data and hide memory access patterns
against eavesdropping adversaries.
Ishai, Sahai and Wag-
ner [14] proposed a generic technique combating probing
attacks with provable security. More precisely, their scheme
transforms a circuit C of size s to an equivalent circuit C(cid:48)
of size O(t2s) that is secure against adversaries capable of
eavesdropping on up to t wires.
2.1 Model of the Problem.
We suppose that circuit C is public and the secrets are the
input to C, the intermediate results of the gates in C and
the ﬁnal output. Given that a polynomial-time adversary
can probe any number of wires, how can C be implemented
such that nothing regarding the secrets is revealed to the
adversary? Our solution is to replace each gate g in C with
a corresponding stateful gate (s-gate hereafter) g(cid:48) and the
resulting circuit C(cid:48) computes the same function as C does
while the adversary obtains only pseudo-random noise by
probing wires in C(cid:48). As each s-gate is augmented with a
memory and is internal made of several XOR taps, so C(cid:48) is
larger than C in terms of circuit size and depth.
2.2 Our Results.
We compare the results of Ishai et al. [14, Table 1] with
ours in Table 1. Their results are stronger in that they can
defeat unbounded adversaries in the randomized model, but
the overhead could be quite expensive as it depends on the
number of wires being probed (i.e. not scalable). A major
advantage of our results is that the computation time (i.e.
circuit depth) of C(cid:48) is increased only by a constant factor.
In addition, the expansion factor of circuit size is l(1+F /2).
Usually, it suﬃces to assign the security parameter with a
moderate value, e.g. 64, to defeat an adversary with low
attack potential and fan-in F is also not large, so l(1+F /2)
63
is around several hundred and is independent of the number
of wires probed by the adversary. We note that our results
do not contradict the impossibility of circuit obfuscation [2]
because we assume that the internal state of each s-gate in
C(cid:48) cannot be probed by adversaries.
3. STREAM CIPHERS CONSTRUCTED WITH
LINEAR FEEDBACK SHIFT REGISTERS
In this section, we provide background information about
stream ciphers constructed using Linear Feedback Shift Reg-
isters.
A pseudo-random generator (PRG) is a polynomial-time
function G : {0,1}l → {0,1}∗ that expands an l-bit ran-
dom seed k into a sequence of arbitrary length. In addition,
it should be computationally infeasible for any polynomial-
time adversary to distinguish between G(k) and any truly
random sequence. PRG can be used to construct a synchro-
nous stream cipher that consists of an encryption function
Ek(m)=m⊕G(k) and a decryption function Dk(c)=c⊕G(k),
where m, c and G(k) are of the same bit length and ⊕
is the bitwise XOR operator. The stream cipher can be
viewed as approximating the action of the well-known one-
time pad [22] except that the encryption key k is much
shorter than m and it is only secure against polynomial-
time adversaries.
There are several classes of PRGs such as linear congruential
generators [19], Blum Blum Shub [3], block cipher based gen-
erators [9] and linear feedback shift register (LFSR) based
generators. Of all those PRGs, LFSR-based ones are the
fastest and easiest to implement in both hardware and soft-
ware (LFSRs are even faster than natural binary counters).
An LFSR, denoted by L, is a ﬁnite state machine that con-
sists of an l-bit inner state Si = (si, ··· , si+l−1), an l×l
update matrix M such that Si+1=Si·M and a 1-bit output
(at each state Si) denoted by L[i]. As shown in Fig. 1, the
inner state of L is initialized with S0=(s0, ··· , sl−1). At
state Si=(si, ··· , si+l−1), it shifts the inner state by 1 bit
to the left with si being discarded as output (i.e. L[i]=si)
and it enters the next state Si+1=(si+1, ··· , si+l), where
si+l =:l−1
j=0
ajsi+j
(1)
and aj indicates whether there is an XOR tap on the (j+1)th
memory cell or not. By properly choosing the feedback vec-
tor (a0, a1, ··· , al−1) 1, an LFSR can produce a sequence
with the maximal period 2l−1, namely, (S0, S1, ··· ) will
iterate all possible states except the state of all zero. Now
Si+1=Si·M can be written as:
Due to the ease of construction from simple electronic cir-
cuits, long periods, and very uniformly distributed outputs
(cf. [12] for further details), LFSRs are often used as building
blocks for stream ciphers. Although the sequence of LFSR
is subject to easy cryptanalysis due to its high linearity, this
problem can be solved by introducing non-linearity with the
following techniques:
1. Non-linear combination of the outputs of two or more
LFSRs, e.g., non-linear ﬁltering generators [21].
2. Irregular clocking of LFSR(s), e.g., shrinking genera-
tors [5] constructed with two LFSRs and self-shrinking
generators [17] which consist of only one LFSR.
We recommend the latter technique as it requires less LF-
SRs than the former does. More importantly, according to
the RSA security lab [20], there are as yet no results on
the cryptanalysis (despite some analysis [11, 8]) of either
shrinking generators or self-shrinking ones. The only draw-
back of them is irregular clocking, namely, the output rate of
the generator may not be constant unless precautions (e.g.
buﬀering the output with a memory) are taken.
A self-shrinking generator (SSG) operates by applying shrink-
ing rules to a single LFSR: Consider the sequence of LFSR,
(s0, s1, s2, ··· ), as a sequence of bit pairs, ((s0,s1), (s2,s3),
··· ) and for each pair (s2i,s2i+1), s2i+1 is sequentially pro-
duced as the output of the generator iﬀ s2i=1 (otherwise
discarded). The security parameter of the SSG is the state
length of the LFSR, namely, l.
The drawback of the original SSG is that its output rate
is determined by control bits s2i’s and thus not constant.
A straightforward method to solve the problem is to buﬀer
the outputs with a memory. To save memory, we use an
alternative approach: For each 2l-bit subsequence of the
LFSR
s2lj, s2lj+1, s2lj+2, s2lj+3,··· , s2lj+2l−2, s2lj+2l−1,
output only the ﬁrst s2lj+2q+1 (0≤q<l) whose control bit
s2lj+2q=1, namely, the j-th output of the generator
G[j] = L[2lj + 2q + 1] = s2lj+2q+1
and q satisﬁes
s2ljs2lj+2···s2lj+2q−2s2lj+2q = 00··· 01 ,
(3)
(4)
(si+1,··· , si+l) = (si,··· , si+l−1)·*****(
0 0
1 0 ···
0 1
...
...
. . .
0 0 ···
0
a0
0
a1
0
a2
...
...
1 al−1
(2)
1An l-bit LFSR produces a sequence of period 2l−1 (a PN-
sequence) if and only if the feedback polynomial (mod 2)
xl+al−1xl−1+al−2xl−2 + ··· + a0 is a primitive polyno-
mial [12].
+++++)
.
where G[j] and L[k] denote respectively the j-th output
of SSG G and the k-th output of LFSR L. Note that
such a q ∈ {0, 1,
··· , l−1} always exists as for any j,
s2ljs2lj+2··· s2lj+2l−2 is not all zero (by the property of the
LFSR-sequence, see e.g. [17]). Thus, the output rate of the
modiﬁed SSG is regularly clocked (i.e., 1 bit output for every
2l-bit-LFSR-sequence) by slowing down the output rate l/2
times compared with the original SSG. The output of the
modiﬁed SSG can be viewed as a subsequence of that of the
original SSG, so the security is considered the same (i.e.,
a subsequence of a pseudorandom sequence is also pseudo-
random). Hereafter, by SSG we mean refer to the modiﬁed
version instead of the original one.
64
Table 1: A comparison between the results of Ishai et al. and ours, where both approaches transform circuit
C with size s, depth d and fan-in F to circuit C(cid:48). Ishai et al. assume that the adversary is restricted to any of
the t wires (in C(cid:48)) and they use notation ˆO to hide large constants, poly-log factors and polynomials in the
security parameter, whereas we assume a security parameter of l.
Privacy type
Depth of C’/Depth of C Size of C’/Size of C
Their results in
randomized model
perfect
Their results in
de-randomized
model
computational
O(logt)
O(logt)
O(t2)
O(t2)+ ˆO(t3)
Our results
computational
3
l(1+F /2)
Figure 1: An 8-bit LFSR at its initial state S0={s0, ··· , s7} with feedback vector a0··· a7 = 10101001.
4. PRIVATE COMPUTATION USING STATE-
FUL CIRCUITS
In this section, we discuss how to construct a stateful circuit
that is secure against wiretapping.
4.1 Stateless Boolean Circuits
A standard Boolean circuit is a directed acyclic graph with
three types of labeled nodes:
inputs, gates and outputs.
Inputs are the sources of the graph (i.e. nodes with fan-in
0) and are labeled with Boolean variables. Outputs are the
sinks of the graph (i.e. nodes with fan-out 0) and carry the
values of the circuit output. Gates are nodes labeled with
Boolean functions AND (∧), OR (∨), and NOT (¬) with
fan-in f (f =1 in case of ”¬”). Circuit size is the number of
nodes in the corresponding graph and circuit depth is the
number of nodes in the longest path from an input node to
an output node. As depicted in Fig. 2, if we number all
the input nodes, gate nodes and output nodes, then all the
wires are numbered as well. That is, a wire is assigned the
same number as the input/gate node whose result is carried
by the wire. A node (e.g. node 2 in Fig. 2) may have more
than one outgoing wires, but they are considered to be the
same since they carry the same value.