misses are likely to take closer to 3.5 µs. With a hit rate of 90%, 
most  implementations  should  be  able  to  handle  a  sustained 
throughput of approximately 1,000,000 requests every second. 
4.2  Memory Usage 
The  next  part  of  the  evaluation  looks  at  CPOL’s  memory 
consumption  in  relation  to  the  number  of  users,  roles,  policies, 
memberships, and cache entries in the system. Memory usage is 
especially important because CPOL is an in-memory system. The 
tests  used  in  this  section  were  run  on  the  privacy  enforcement 
the  State,  Condition, 
implementation  of  CPOL.  Although 
AccessToken,  and  CacheCondition  objects  all  have  application-
specific definitions, their sizes only affect rules and cache entries, 
Figure 8. KeyNote vs. CPOL request time comparison. 
4.  EVALUATION 
In this section, we test CPOL’s performance by measuring query 
processing  time,  memory  usage,  and  ability  to  handle  requests 
from  a  simulated  location  infrastructure.  For  these  experiments 
we configured CPOL, as well as KeyNote and a MySql database, 
to handle privacy requests from a location sensing network. All of 
the  tests  were  run  on  the  same  computer,  which  had  an  AMD 
Athlon™ XP 2200 processor and 512 MB of RAM. The first set 
of  benchmarks  measure  processing  time  and  give  a  good 
representation of CPOL’s general performance. These results do 
not rely on a specific cache hit rate and can be extrapolated using 
the  expected  hit  rate  and  number  of  conditional  access  rules  to 
come  up  with  expected  evaluation  times  for  a  particular 
application.  The  memory  usage  statistics  are  also  applicable  to 
implementations  other  than  privacy  enforcement,  and  can  be 
adjusted  based  on  the  expected  size  of  State,  AccessToken,  and 
Condition objects, as well as the size of the cache.  
The  final  part  of  the  evaluation  presents  results  from  a 
simulated privacy query workload. This workload was generated 
using  a  schedule-based  movement  simulator  and  is  specific  to 
privacy enforcement for location-aware service. These results do 
not  necessarily  apply  to  other  scenarios  due  to  varying  request 
load  and  cache  hit  rate,  but  they  do  provide  a  good  example  of 
CPOL’s  capabilities.  The  simulations also give insight into how 
KeyNote  and  MySql’s  longer  request  processing  times  translate 
into an overall performance penalty. 
4.1  Individual Requests 
For  the  first  part  of  the  evaluation,  we  compared  individual 
request  times  from  CPOL,  KeyNote,  and  MySql.  Each  system 
was initialized with n users where n varied from 1 to 1000. The 
requests  were  made  by  one  user  requesting  access  to  someone 
else’s location. No roles were used since they are not supported 
by  KeyNote.  In  all  three  systems,  each  entity’s  rule  set  was 
populated  with  ten  rules,  with  each  rule  granting  access  to  one 
other randomly selected user These rules also had the following 
conditions: (1) Time had to be “Monday through Friday 9 AM to 
5 PM” (2) The authorizer’s had to be on one of two floors in a 
particular  building,  but  not  in  one  of  two  specific  rooms.  In 
KeyNote,  the  access  conditions  were  stored  in  the  “Condition:” 
clause.  In CPOL, they were set directly inside of the Condition 
Figure 9. Memory usage per item for Users, Roles, 
Memberships, Access Rules, and Cache Entries. 
which are likely to be similar between implementations. The sizes 
also include indexing overhead, so discrepancies between object 
definitions for different applications will not have a major impact 
on total memory usage. 
Figure 9 shows the amount of memory consumed per item for 
users/entities,  roles,  role  memberships,  access  rules,  and  cache 
entries.  These  five  items  are  all  pretty  close  in  size  with 
membership  entries  being  the  largest  and  cache  entries  the 
smallest.  Memberships  take  up  more  space  because  a  two-way 
mapping  is  kept  for  easy  role  management  and  quick  lookup  at 
request time. Cache entries are smaller than other objects because 
they  are  stored  in  a  more  compact  format.  Using  the  sizes  in 
Figure  9,  a  location  privacy  system  that  has  500  MB  available, 
where each user has ten access rules and is a member of ten roles 
(10,000  total  roles),  can  support  approximately  500,000  entities 
with  a  2,000,000  entry  cache.  This  number  could  be  increased 
slightly  by  optimizing  CPOL’s  data  structures  for  space. 
However, memory was not a bottleneck when evaluating privacy 
requests for large numbers of users.  
4.3  Privacy Request Workload 
For the final step of the evaluation, we used CPOL to process a 
simulated  workload  of  privacy  queries  in  a  location-aware 
environment. The problem for us was coming up with a suitable 
workload, given that the technology is not yet widely deployed. 
GSTD  is  one  general-purpose  movement  generator  [15].  It  uses 
randomly  moving  points  to  represent  objects  in  the  system, 
creating  chaotic  behavior.  This  can  useful  in  some  applications, 
but  is  not  a  very  realistic  representation  of  typical  human 
movement.  There  are  special-purpose  generation  algorithms  that 
produce  more 
for  particular 
applications such as vehicle traffic [3] and fishing boat movement 
[12]  simulation.  When  testing  CPOL,  we  found  that  GSTD  and 
special-purpose  generators  do  not  do  a  very  good  job  of 
generating  realistic  movements  for  people  inside  of  a  building. 
Instead  of  aimlessly  walking  around  throughout  the  day,  people 
have fixed schedules that include classes, lab time, meetings, etc. 
and tend to stay in one place for duration of a scheduled event. To 
evaluate CPOL, we needed a movement generation algorithm that 
these  factors.  Accurately  modeling  human 
accounted 
movement 
the 
effectiveness of caching.  
for 
is  particularly 
realistic  movement  patterns 
for  evaluating 
important 
Figure 10. Maximum number of supported users for 
different location sample rates.
For  above  reasons,  we  created  a  new  movement  generation 
algorithm  that  uses  semi-random  scheduling.  The  simulator  is 
designed  for  a  university  environment,  where  users  go  between 
classrooms,  labs,  offices,  bathrooms,  and  vending  machines. 
During initialization, the simulator fills classroom schedules with 
different  “courses.”  Once  courses  have  been  created,  each  user 
“enrolls” using a target number of credits. Throughout the week, 
users enter and leave the building through random exits, attending 
class and spending time in offices, labs, and other locations. The 
amount  of  time  spent  in  the  building  outside  of  class  is 
determined by a target number of hours.  
To  get  a  better  idea  of  how  many  hours  students  typically 
spend  in  class,  offices,  labs,  or  other  locations,  we  interviewed 
thirty  potential  users.  During  these  interviews,  we  also  asked 
people about their personal privacy preferences and what services 
they would be interested in using. The three main uses of location 
information were looking up friends or associates (“Show person 
A”), querying information of nearby users (“Show people in this 
room”), and general building-wide requests  (“Show everyone in 
this building”) to look for empty computer labs or quiet places to 
study.  The  last  type  of  query  was  optimized  by  only  allowing 
users  to  request  access  as  a  role  member  such  as  “student,” 
instead of as an individual. This way, the database back-end only 
has to query every user and prepare the query result once per time 
step for all requesters. The service usage information was applied 
to the simulator, which generated requests based on frequency of 
use and the percentage of people who said they would run each 
query.  Finally,  each  person’s  privacy  preferences  were reflected 
in  CPOL  by  creating  access  lists  and  friend  roles  based  on 
answers from the interviews. 
initialized  with 
After  CPOL  was 
individual  privacy 
preferences,  it  read  requests  from  a  simulator  output  file.  This 
output  file  contained  requests  from  users  in  one  building  of 
average  size  (it  had  four  lecture  halls  and  four  classrooms  in 
which 1000 students attended class throughout the week). To test 
CPOL’s  maximum  capacity,  the  requests  and  users  from  the 
single  building  were  replicated  multiple  times,  modeling  a 
campus-wide workload. The location update rate also varied from 
one  to  thirty  seconds.  For  each  update  rate,  the  number  of 
buildings  was  continually  increased  until  CPOL  was  unable  to 
process all of the queries for a simulation step before it was over. 
We  also  ran  the  same  experiment  on  a  MySql  server  and  on 
KeyNote.  The  results  from  CPOL  and  MySql  can  be  seen  in 
Figure  10.  Keynote  is  not  shown  here  because  it  was  unable  to 
process  queries  for  users  in  a  single  building  in  30  seconds. 
MySql  was also unable to handle requests in real-time for 1000 
users  with  sample  times  of  less  than  10  seconds.  With  a  thirty-
second  sample  rate,  MySql  was  able  to  handle  requests  for 
approximately  5,000  users,  while  CPOL  was  able  to  handle 
approximately 300,000, sixty times more than MySql. 
5.  CONCLUSION AND FUTURE WORK 
Traditionally, performance has not been major focus in the design 
of  policy  systems.  Applications  are  emerging,  however,  that 
require  policies  to  be  evaluated  with  a  low  latency  and  high 
throughput.  CPOL  provides  a  good  solution  for  evaluating 
policies in such applications. It is more expressive than KeyNote 
in  many  cases,  and  it  delivers  much  better  throughput.  During 
evaluation,  we  found  that  CPOL  was  able  to  process  a  single 
request  two  to  three  orders  of  magnitude  faster  than  a  similar 
database solution, and four to five orders of magnitude faster than 
KeyNote,  depending  on  the  expected  cache  hit  rate.  To  test  a 
more  realistic  workload,  CPOL  was  set  up  to  enforce  privacy 
constraints  for  location-aware  services.  Using  a  generator  that 
modeled people moving in a university building, CPOL was able 
to handle requests from approximately 300,000 users in real-time 
with  a  thirty-second  sample  rate,  while  a  MySql  database  was 
only able to support 5,000 and KeyNote was too slow to do real-
time processing for even 1,000 users.  
front-ends 
In  the  future,  we  would  like  to  expand  CPOL  to  support 
distribution across multiple machines. The request load could be 
split  up  amongst a group of policy evaluation engines, allowing 
for even greater scalability. In addition, we hope to use CPOL for 
policy management in other application domains, and explore the 
integration  of  different  GUI 
for  easy  policy 
management. 
ACKNOWLEDGEMENTS 
Kevin Borders and Atul Prakash were funded in part by a grant 
from  the  Intel  Corporation.  The  equipment  for  the  research  was 
funded by the National Science Foundation under grants 0303587 
and  0325332.  We  thank  our  colleague,  Professor  Jignesh  Patel, 
for discussions on database research in the area of privacy and on 
continuous queries on spatial data. 
REFERENCES 
[1]  M. Blaze, J. Feigenbaum, J. Ioannidis, and A. D. Keromytis. 
The KeyNote Trust Management System Version 2. Internet 
RFC 2704, September 1999. 
[2]  M. Blaze, J. Feigenbaum, and M. Strauss. Compliance 
Checking in the PolicyMaker Trust Management System. In 
Proceedings of the Financial Cryptography Conference, 
Lecture Notes in Computer Science, vol. 1465, pages 254-
274. Springer, 1998.  
[3]  T. Brinkhoff. A Framework for Generating Network-Based 
Moving Objects. GeoInformatica, Vol. 6, No. 2, 153-180, 
2002. 
[4]  N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The 
ponder policy specification language. In Morris Sloman, 
editor, Proceedings of Policy Worshop, 2001, Bristol UK, 
January 2001.  
[5]  D. Ferraiolo and R. Kuhn. Role-based access control. In 
Proceedings of 15th NIST-NCSC National Computer 
Security Conference. Baltimore, MD. pp. 554–563, October 
1992.  
[6]  B. Gedik and L. Liu. Mobieyes: Distributed processing of 
continuously moving queries on moving objects in a mobile 
system. In Proceedings of the 9th Conference on Extended 
Database Technology (EDBT 2004), Heraklion-Crete, 
Greece, March 2004.  
[7]  J. Hong and J. Landay. An Architecture for Privacy-
Sensitive Ubiquitous Computing. In Proceedings of the 
Second International Conference on Mobile Systems, 
Applications, and Services (Mobisys 2004). Boston, MA. pp. 
177-189, 2004.  
[8]  S. Lederer, C. Beckmann, A. Dey, and J. Mankoff. 
Managing Personal Information Disclosure in Ubiquitous 
Computing Environments. University of California, 
Berkeley, Computer Science Division, Technical Report 
UCB-CSD-03-1257, July 2003.  
[9]  M. Mokbel, X. Xiong, and W. Aref. SINA: Scalable 
Incremental Processing of Continuous Queries in Spatio-
temporal Databases. In Proceedings of the ACM SIGMOD 
Conference on Management of Data, Paris, France, pp. 623-
634, 2004.  
[10] MySQL, Inc. The mysql database manager. 
http://www.mysql.org, 2004. 
[11] L. Opyrchal, A. Prakash, A. Agrawal, "Designing a Publish-
Subscribe Substrate for Privacy/Security in Pervasive 
Environments." In First Workshop on Pervasive Security, 
Privacy and Trust (PSPT), Boston, MA, August 2004.  
[12] J. Saglio and J. Moreira. Oporto: A Realistic Scenario 
Generator for Moving Objects. GeoInformatica, Vol. 5, No. 
1, 71-93, 2001. 
[13] M. Spreitzer and M. Theimer. Providing location information 
in a ubiquitous computing environment. In Proceedings of 
Fourteenth ACM Symposium on Operating System 
Principles. Asheville, NC: ACM Press, December 1993. 
[14] Y. Tao and D. Papadias. Spatial Queries in Dynamic 
Environments. ACM Transactions on Databases Systems 
(TODS), 28(2): 101-139, 2003. 
[15] Y. Theodoridis, J. Silva, and M. Nascimento. On the 
generation of spatio-temporal datasets. In Proceedings SSD, 
1999.