### Overview
Anyone, regardless of their involvement in an election, can view the questions and candidates. These elements are defined by the election administrators, and elections can be created by anyone with a Google or Facebook account.

### Creating an Election
The process for creating a Helios election is relatively straightforward:
1. **Log In:** Use a Facebook or Google account.
2. **Provide Details:** Enter an election name and description.
3. **Add Ballot Questions and Answers:** Specify the ballot questions and corresponding answers.
4. **Voter List:** Provide a list of approved voters or allow any registered user to vote.
5. **Freeze the Ballot:** Finalize the ballot to prevent future changes, thereby opening the voting phase.

After adding the questions, they are serialized into JSON and stored in the Helios database. The only character that is escaped is the double quote ("). When serving this content to users viewing the questions page, the JSON object is retrieved from the database and parsed by Django to build the requested pages.

In `election_questions.html`, the JSON object is assigned to the `QUESTIONS` variable as follows:
```python
QUESTIONS = {{questions_json|safe}}
```
The double-brace notation informs Django that a variable is contained within and will eventually replace the variable name with its value. The pipe operator (`|`) indicates that the variable is to be passed through a filter. Filters are functions that modify variables before displaying them. In the code above, the `questions_json` variable is passed through the `safe` filter, which tells Django that the variable requires no further HTML escaping and is safe for display.

### Consequences
As a result, whatever an election administrator provides as a question is not escaped when displayed to other users. This is likely because HTML-escaping a JSON structure would make it unusable in JavaScript, but it also creates an opportunity for an XSS (Cross-Site Scripting) attack.

### Exploit
We were able to cast ballots on behalf of registered voters by exploiting Helios's recast feature, which allows for the re-casting of ballots and only counts the most recently cast ballot.

#### Scenario
Assume three parties: Alice (an honest election administrator), Bob (an honest voter), and Charlie (a remote attacker). Alice creates an election with a single question and two candidates, "Kang" and "Kodos," with open registration (any Helios user can vote) and promotes the election through relevant channels.

Alice and Bob cast their ballots through the normal process and both coincidentally vote for Kang, while Charlie votes for Kodos and wants to ensure that Bob does the same.

#### Attack Steps
1. **Create Malicious Elections:**
   - Charlie creates a malicious election with a ballot question containing a `<script>` tag linking to an externally hosted attack script.
   - Charlie also creates a decoy election for "Favorite Soda."

2. **Send Email:**
   - Charlie sends Bob and others an email containing a link to the malicious election, asking them to view his "Favorite Soda" election.
   - To bypass the need for the user to be logged in, Charlie sends a link to the Google OAuth endpoint with the return parameter set to the malicious election. An example link might look like:
     ```
     https://vote.heliosvoting.org/auth/?return_url=/helios/elections/c0e6fec8...d9/questions
     ```

3. **Execute Payload:**
   - Users clicking the link are presented with the Google login screen for Helios. After entering their credentials, they are redirected to the page containing the XSS payload.
   - The payload extracts a user-specific CSRF token from the page. Since the CSRF token is the same across all elections for the authenticated user, it is sufficient to take the CSRF token from the malicious election page and use it in other elections.
   - The script builds a POST request containing the ballot and CSRF token and sends it to the Helios endpoint for Alice’s election, successfully casting a ballot in Alice’s election from Bob’s browser via the malicious election page.

From the user's perspective, they log in to Helios and are then redirected to the "Favorite Soda" election. The only evidence of the malicious action is the email confirmation for casting a ballot in Helios. Although this may alert the voter of unusual activity, it is often attributed to a fault or misunderstanding in their own action.

### Impact and Mitigation
We implemented the attack and were able to steal ballots from voters who clicked our malicious heliosvoting.org URL. The impact of this exploit is high, as anyone (not just eligible voters) can create a dummy election with the vote-stealing XSS. We informed the Helios developers, and they released a fix for the XSS vulnerability.

### Related Attacks
A similar XSS vulnerability in the Helios “Questions” page was discovered in a 2011 paper by Heiderich et al. [24], caused by a lack of context-sensitive filtering. Our work extends theirs by successfully demonstrating a complete exploit of this vulnerability and identifying the responsible code, resulting in its fix.

### Discussion
Criticism of the E2E (End-to-End) verification paradigm has often focused on practical issues such as poor usability design [2, 1], cognitive dissonance associated with encountering a verification error [27], or a high pedagogical bar to understanding the cryptography. We believe the results of this paper point to another avenue for consideration: the risk introduced by the cryptographic audit trail itself. The benefit of E2E over conventional voting systems is that it focuses on verifying elections, not the software or voting machines. However, this shifts the problem: who verifies the verifiers?

#### Privacy Risk
The public cryptographic audit trail creates a tension between the ability to detect fraud and the preservation of voter privacy. If an attacked transcript is taken down early, it limits exposure to future privacy vulnerabilities and preserves the public record and election integrity.

#### Integrity Risks
E2E elections make assertions about the election results and support them with evidence. However, we must consider the potential threat of a rigged election with a valid-looking proof, which could make matters worse: not only must the election results be disavowed, but the proof must be as well.

### Conclusion
In this paper, we conducted a security analysis of Helios, an E2E-verifiable internet voting system. We discovered a range of serious vulnerabilities affecting confidentiality, integrity, and availability. We presented the technical details of the vulnerabilities and worked with the Helios designers to fix them. Unlike conventional elections, the public nature of the cryptographic audit introduces new risks to ballot secrecy and election integrity that have not been fully explored but should become a point for further debate over the future role of E2E verification.

### Acknowledgments
Special thanks to Ben Adida and the Helios project. Additional thanks to Jeremy Clark, Olivier Pereira, Poorvi Vora, and Filip Zagórski. This work was funded in part by the National Science and Engineering Research Council of Canada (NSERC) Discovery Grants Program.

### References
[1] C. Z. Acemyan, P. Kortum, M. D. Byrne, and D. S. Wallach. From Error to Error: Why Voters Could Not Cast a Ballot and Verify Their Vote With Helios, Prêt à Voter, and Scantegrity II. In USENIX Journal of Election Technology and Systems, 2015.
...
[34] F. Zagórski, R. T. Carback, D. Chaum, J. Clark, A. Essex, and P. L. Vora. Remotegrity: Design and Use of an End-to-End Verifiable Remote Voting System. 2013.