or not, can view the questions and candidates of an election.
These questions and candidates are speciﬁed by the admin-
istrator(s) of the election, and elections can be created by
anyone with a Google or Facebook account.
Creating an Election. The steps for creating a Helios
election are relatively simple:
1. Log in with Facebook or Google account,
2. Provide an election name and description,
3. Add ballot questions and answers,
4. Provide a list of approved voters, or allow any regis-
tered user to vote,
5. Freeze the ballot (i.e., prevent future changes) thereby
opening voting phase.
After questions are added, they are serialized into JSON
and stored in the Helios database. The only apparent char-
acter that is escaped is the double quote marks (¨). When it
comes time to serve this content to users viewing the ques-
tions page, this JSON object is retrieved from the database
and parsed by Django to build the requested pages.
In
election_questions.html the JSON object is assigned to
the QUESTIONS variable as
QUESTIONS = {{questions_json|safe}} .
The double-brace notation informs Django that a variable
is contained within and will eventually replace the variable
name with its value. The pipe operator informs Django that
the variable is to be passed through a ﬁlter. Filters are func-
tions that modify variables before displaying them. In the
previously mentioned code, the variable, questions_json, is
passed through the safe ﬁlter. The safe ﬁlter informs Django
that the variable passed into it requires no further HTML
escaping and that it is safe for display.
The consequence is whatever an election administrator
provides as a question is not escaped when displayed to other
users. This is likely because HTML escaping a JSON struc-
ture results in a structure that cannot be used in JavaScript,
but this also creates a perfect opportunity to perform an XSS
attack.
Exploit. We were able to cast ballots in an election on
behalf of registered voters by taking advantage of Helios’s
recast feature where Helios allows for the re-casting of ballots
and only counts the most recently cast ballot.
To perform the attack, assume we have three parties: Al-
ice, an honest election administrator; Bob, an honest voter;
and Charlie, a remote attacker. Alice creates an election
with a single question and two candidates, “Kang” and “Ko-
dos” with open registration (i.e., any Helios user can vote)
and promotes the election through the relevant channels.
Alice and Bob cast their ballots through the normal process
and coincidentally both vote for Kang, while Charlie casts
his ballot for Kodos and wants to ensure that Bob does the
same.
To do this, Charlie creates two elections: a malicious elec-
tion with a ballot question containing a  tag link-
ing to an externally hosted attack script, and another decoy
election for “Favorite Soda”. The malicious question exploits
the XSS vulnerability can then take the form:
Charlie then sends Bob and others an email containing a
link to the malicious election asking them to view his “Fa-
vorite Soda” election. While this would execute the script,
the user wouldn’t necessarily be logged for the cast ballot
to be accepted. To get around this, Charlie sends a link
332
to the Google OAuth endpoint with the return parameter
set to the malicious election. The victim doesn’t necessar-
ily detect anything unusual since the URL still points to
heliosvoting.org. An example link would be of the form:
https://vote.heliosvoting.org/auth/?return_url=
/helios/elections/c0e6fec8 ... d9/questions
Users clicking on the link will ﬁrst be presented with the
Google login screen for Helios. After entering their creden-
tials, the user will be redirected to the page containing the
XSS payload.
We constructed an XSS payload and hosted it on a re-
mote server. It begins by extracting a user-speciﬁc CSRF
token from the page. Because the CSRF token is the same
across all elections for the authenticated user, it is suﬃcient
to take the CSRF token from the malicious election page and
use it in other elections. In the attack, the ballot variable
is hardcoded but it could be arranged such that code from
the helios-booth is used to generate ballots at runtime, al-
though, in the interest of time, it would make more sense for
the attacker to pre-generate ballots and include a new one
each time the script is called. The script then builds a POST
request containing the ballot and CSRF token and sends it
to the Helios endpoint for Alice’s election. At this point,
the script has successfully cast a ballot in Alice’s election
from Bob’s browser via the malicious election page. Upon
successful completion of the POST request, the success call-
back is executed and the user is redirected to the “Favorite
Soda” election.
From the user’s point of view, they started by having to
log in to Helios and were then redirected to the “Favorite
Soda” election. The only evidence that a malicious action
has taken place is the email conﬁrmation for casting a bal-
lot in Helios. Although this may alert the voter of unusual
activity, Mohr et al. [27] recently suggested that even if vot-
ers suspect something went wrong, they may more likely
attribute it to a fault or misunderstanding in their own ac-
tion. From Helios’s point of view, the ballot was legitimately
cast and since the most recent ballot is the one tallied, Bob’s
initial vote is overwritten by the ballot speciﬁed by Charlie.
Impact and Mitigation. We implemented the attack and
were able to steal ballots from voters who clicked our ma-
licious heliosvoting.org URL. The impact of this exploit is
high, since anyone (not just eligible voters) can create a
dummy election with the vote stealing XSS. We informed
the Helios developers and they released a ﬁx of the XSS vul-
nerability.
Related Attacks. A similar XSS vulnerability in the He-
lios “Questions” page was discovered in a 2011 paper by Hei-
derich et al. [24] caused by a lack of context-sensitive ﬁlter-
ing. Heiderich is also credited on the Helios page with the
disclosure8 of a diﬀerent XSS vulnerability from the paper
resulting in a ﬁx. Our work extends theirs by successfully
demonstrating a complete exploit of this vulnerability and
identifying the responsible code ﬁnally resulting in its ﬁx.
7. DISCUSSION
Criticism of the E2E veriﬁcation paradigm has often fo-
cused on practical issues such as poor usability design [2, 1],
8http://documentation.heliosvoting.org/attacks-and-defenses
cognitive dissonance associated with encountering a veriﬁ-
cation error [27], or a high pedagogical bar to understand-
ing the cryptography.9 We believe the results of this paper
point to another avenue for consideration: The risk intro-
duced by the cryptographic audit trail itself. The beneﬁt of
E2E over conventional voting systems is that it ultimately
focuses on verifying elections, not the software or voting ma-
chines themselves. In some sense, however, this pushes back
the problem: who veriﬁes the veriﬁers?
1. Privacy Risk. The public cryptographic audit trail
creates a tension between the ability to detect fraud
and preservation of voter privacy:
if you take an at-
tacked transcript down early, it limits exposure of fu-
ture privacy vulnerability discoveries (e.g., the Helios
RNG), and the expense of the public record, not to
mention election integrity (e.g., weak group parame-
ters).
2. Integrity Risks. Ultimately E2E elections are mak-
ing an assertion about the election results and osten-
sibly supporting it with evidence. But we also must
consider the potential threat of a rigged election with
a valid-looking proof. Such a situation might make
matters doubly bad: not only must the election results
be disavowed, but the proof must as well.
The U.S Vote Foundation report recommends that “any pub-
lic elections conducted over the Internet must be end-to-end
veriﬁable” [20]. For the most part we would agree. But as we
feel this case study has demonstrated, it may not be appro-
priate for all situations. At very least a conversation needs
to happen regarding the potential risks to privacy and in-
tegrity that an E2E scheme potentially introduces relative to
a conventional scheme, and it be weighed against the bene-
ﬁts. Surely E2E is worse than a conventional “less-veriﬁable”
election if it is used as a tool to convince people of the ve-
racity of a malicious election result using an unsound proof.
Conclusion
In this paper we conducted a security analysis of Helios,
an E2E-veriﬁable internet voting system. We discovered a
range of serious vulnerabilities attacking conﬁdentiality, in-
tegrity and availability. We presented the technical details
of the vulnerabilities and worked with the Helios design-
ers to ﬁx them. Unlike conventional elections, the public
nature of the cryptographic audit introduces new risks to
ballot secrecy and election integrity that have still not been
fully explored, but hopefully will become a point for further
debate over the future role of E2E-veriﬁcation.
Acknowledgments
Special thanks to Ben Adida and the Helios project. Addi-
tional thanks to Jeremy Clark, Olivier Pereira, Poorvi Vora,
and Filip Zag´orski. This work was funded in part by the Na-
tional Science and Engineering Research Council of Canada
(NSERC) Discovery Grants Program.
8. REFERENCES
[1] C. Z. Acemyan, P. Kortum, M. D. Byrne, and D. S.
Wallach. From Error to Error: Why Voters Could not
9http://csrc.nist.gov/groups/ST/e2evoting/
333
Cast a Ballot and Verify Their Vote With Helios, Prˆet
`a Voter, and Scantegrity II. In USENIX Journal of
Election Technology and Systems, 2015.
[2] C. Z. Acemyan, P. Kortum, M. D. Byrne, and D. S.
Wallach. Usability of voter veriﬁable, end-to-end
voting systems: Baseline data for helios, prˆet `a voter,
and scantegrity ii. In USENIX EVT/WOTE, 2015.
[3] B. Adida. Helios: web-based open-audit voting. In
USENIX Security Symposium, pages 335–348, 2008.
[4] B. Adida, O. d. Marneﬀe, O. Pereira, and J.-J.
Quisquater. Electing a university president using
open-audit voting: Analysis of real-world use of
Helios. In EVT/WOTE, 2009.
[5] D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry,
M. Green, J. A. Halderman, N. Heninger, et al.
Imperfect forward secrecy: How diﬃe-hellman fails in
practice. In CCS, 2015.
[6] E. Barker and J. Kelsey. Recommendation for random
number generation using deterministic random bit
generators. special publication 800-90a. In National
Institute of Standards and Technology, 2012.
[7] S. Bell, J. Benaloh, M. D. Byrne, D. Debeauvoir,
B. Eakin, P. Kortum, N. McBurnett, O. Pereira, P. B.
Stark, D. S. Wallach, G. Fisher, J. Montoya,
M. Parker, and M. Winn. Star-vote: A secure,
transparent, auditable, and reliable voting system. In
Electronic Voting Technology Workshop/Workshop on
Trustworthy Elections (EVT/WOTE 13), 2013.
[8] D. Bernhard, O. Pereira, and B. Warinschi. How not
to prove yourself: Pitfalls of the ﬁat-shamir heuristic
and applications to helios. In ASIACRYPT, volume
7658 of LNCS, pages 626–643. 2012.
[9] P. Bulens, D. Giry, and O. Pereira. Running
mixnet-based elections with helios. In USENIX
EVT/WOTE, 2011.
[10] C. Burton, C. Culnane, J. Heather, T. Peacock,
P. Ryan, S. Schneider, S. Srinivasan, V. Teague,
R. Wen, and Z. Xia. Using Pret a Voter in Victoria
State elections. In EVT/WOTE, 2012.
[11] C. Burton, C. Culnane, and S. Schneider. Secure and
veriﬁable electronic voting in practice: the use of
vvote in the victorian state election. 2015.
[12] R. T. Carback, D. Chaum, J. Clark, J. Conway,
A. Essex, P. S. Hernson, T. Mayberry, S. Popoveniuc,
R. L. Rivest, E. Shen, A. T. Sherman, and P. L. Vora.
Scantegrity II election at Takoma Park. In USENIX
Security Symposium, 2010.
[13] D. Chaum, R. Carback, J. Clark, A. Essex,
S. Popoveniuc, R. L. Rivest, P. Y. A. Ryan, E. Shen,
and A. T. Sherman. Scantegrity II: end-to-end
veriﬁability for optical scan election systems using
invisible ink conﬁrmation codes. In EVT, 2008.
[14] D. Chaum and T. P. Pedersen. Wallet databases with
observers. In CRYPTO, 1992.
[15] D. Chaum, P. Y. A. Ryan, and S. Schneider. A
practical voter-veriﬁable election scheme. In
ESORICS, 2005.
[16] V. Cortier and B. Smyth. Attacking and ﬁxing helios:
An analysis of ballot secrecy. In Computer Security
Foundations Symposium (CSF), 2011 IEEE 24th,
pages 297–311, 2011.
[17] R. Cramer, I. Damg˚ard, and B. Schoenmakers. Proofs
of partial knowledge and simpliﬁed design of witness
hiding protocols. In CRYPTO, 1994.
[18] A. Delis, K. Gavatha, A. Kiayias, C. Koutalakis,
E. Nikolakopoulos, L. Paschos, et al. Pressing the
button for european elections: veriﬁable e-voting and
public attitudes toward internet voting in greece. In
Electronic Voting: Verifying the Vote (EVOTE), 2014
6th International Conference on, 2014.
[19] D. Demirel, J. van de Graaf, and R. S. dos
Santos Ara´ujo. Improving helios with everlasting
privacy towards the public. In USENIX EVT/WOTE,
2012.
[20] S. Dzieduszycka-Suinat, J. Murray, J. Kiniry,
D. Zimmerman, D. Wagner, P. Robinson, A. Foltzer,
and S. Morina. The Future of Voting: End-to-End
Veriﬁable Internet Voting - Speciﬁcation and
Feasibility Study.
https://www.usvotefoundation.org/E2E-VIV, 2015.
[21] S. Estehghari and Y. Desmedt. Exploiting the client
vulnerabilities in internet e-voting systems: Hacking
helios 2.0 as an example. In USENIX EVT/WOTE,
2010.
[22] N. Ferguson and B. Schneier. Practical Cryptography.
John Wiley & Sons, 2003.
[23] A. Fiat and A. Shamir. How to prove yourself:
practical solutions to identiﬁcation and signature
problems. In CRYPTO, pages 186–194, 1986.
[24] M. Heiderich, T. Frosch, M. Niemietz, and
J. Schwenk. The bug that made me president a
browser- and web-security case study on helios voting.
In VoteID, 2011.
[25] F. Karayumak, M. M. Olembo, M. Kauer, and
M. Volkamer. Usability analysis of helios - an open
source veriﬁable remote electronic voting system. In
USENIX EVT/WOTE, 2011.
[26] R. K¨usters, T. Truderung, and A. Vogt. Clash attacks
on the veriﬁability of e-voting systems. In Security and
Privacy (SP), 2012 IEEE Symposium on, pages
395–409, 2012.
[27] E. Moher, J. Clark, and A. Essex. Diﬀusion of voter
responsibility: Potential failings in e2e voter receipt
checking. In USENIX Journal of Election Systems and
Technology, 2015.
[28] National Institute of Standards and Technology
(NIST). NIST Special Publication 800-57, Part 1,
Revision 4. Recommendation for Key Management.
Part 1: General. 2016.
[29] D. Springall, T. Finkenauer, Z. Durumeric, J. Kitcat,
H. Hursti, M. MacAlpine, and J. A. Halderman.
Security analysis of the Estonian Internet voting
system. In Proceedings of the 21st ACM Conference on
Computer and Communications Security. ACM, Nov.
2014.
[30] V. Teague and J. A. Halderman. The new south wales
ivote system: Security failures and veriﬁcation ﬂaws in
a live online election. InVoteID , 2015.
[31] G. Tsoukalas, K. Papadimitriou, P. Louridas, and
P. Tsanakas. From helios to zeus. In USENIX
EVT/WOTE, 2013.
[32] S. Wolchok, E. Wustrow, J. A. Halderman, H. K.
Prasad, A. Kankipati, S. K. Sakhamuri, V. Yagati,
334
and R. Gonggrijp. Security analysis of india’s
electronic voting machines. In Proceedings of the 17th
ACM Conference on Computer and Communications
Security (CCS), 2010.
[33] S. Wolchok, E. Wustrow, D. Isabel, and J. A.
Halderman. Financial Cryptography, chapter
Attacking the Washington, D.C. Internet Voting
System, pages 114–128. 2012.
[34] F. Zag´orski, R. T. Carback, D. Chaum, J. Clark,
A. Essex, and P. L. Vora. Remotegrity: Design and
Use of an End-to-End Veriﬁable Remote Voting
System. 2013.
335