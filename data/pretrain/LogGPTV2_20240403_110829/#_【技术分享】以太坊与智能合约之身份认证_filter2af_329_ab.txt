**注册按照以下的步骤执行：**
1\. 用户打开移动应用程序。
2\. 用户输入其电子邮件地址和屏幕解锁图案。
3\. 移动应用程序在后台生成新的以太坊的地址。这是个辅助地址。该地址被便捷地发送到用户的电子邮箱。
4\.
用户在其主以太坊地址和辅助地址之间建立链接。要实现这一点，用户可以手动调用Mapper合约的mapAddress方法，或是用到为此目的开发的、特殊的钱包应用程序。这一步需要用户花费其主帐户里最少数量的gas。
5\. 一旦地址之间的链接被建立，移动应用程序将显示一个确认的对话框。如果用户确认之，该映射就建立好了，而本过程也就完成。
这种方法的增值好处之一在于：它使得一次性的传销帐户难以使用之。上述步骤4强制用户去花费以太币，来建立其个人的以太坊地址和仅登录用的地址之间的映射。对于这种方式，第三方则可以确保用户所使用的以太坊帐户并非一次性传销的帐户（例如垃圾邮件类帐户）。
**身份验证**
一旦已注册的用户想要使用其以太坊帐户登录到一个第三方的网站，他或她就必须遵循如下的过程：
1\. 用户在输入字段中输入他或她的主以太坊地址或是他或她的电子邮件地址，单击"登录"。
2\. 第三方网站联系身份验证服务器，请求验证该地址。要实现这一步，第三方网站需要生成具有特定格式的挑战字符串，并将它传递给身份验证服务器。
3\. 身份验证服务器检查该用户在以太坊网络中的当前辅助地址。然后，它在内部数据库中检查必需的数据，以联系与该地址相关联的移动设备。
4\. 用户接收移动设备推送的通知，以是接受或拒绝登录请求。
5\. 如果用户接受，辅助地址的私有密钥将被用于签发挑战字符串。签发的挑战然后被送回到身份验证服务器上。
6\. 身份验证服务器验证该签名，如果其有效且与挑战相匹配，则认为该登录成功。随后，它发回已签名的挑战给第三方网站，作为可选的独立性确认依据。
这就是全部！该方案将签名过程从敏感的主地址中分离出来，在防止暴露潜在重要的私有密钥的同时，仍然使第三方网站能够确认用户是否为该地址的合法所有者。此外，虽然为了方便起见，它依赖到了身份验证服务器，但是它在没有验证服务器的时候也能工作，它可以不把信任这一块放在验证服务器上（第三方网站可以自己检查签名）。因此在最坏的情况下（如身份验证服务器宕机），它也能够保持去中心化，而在平时去能保持便捷性。
**缺点**
为了方便起见，该方法依赖于身份验证服务器。虽然在没有身份验证服务器时，该系统仍然可能运行，但使用这种方式并不太方便。然而，我们在设计上必须考虑到“如果便捷的、去中心化的操作”是一种强制性的情况。在每种情况下，不信任的因素就被放在了该服务器之中。
试试看！
由于这只是一个概念上的证明，而你在真正初次试水以太坊时可能会有点困难，因此我们在此为新用户给出一个步进式的指南来测试该系统。请注意，这只是一个测试系统，因此它使用的是以太坊的测试网络。换句话说，存储在以太坊的测试网络中的数据完整性并不能得以保障，因此，不要把重要的东西存放在本指南所创建的帐户中，它们是不会受到像以太坊主网络那样同等保障的。
**获取以太坊钱包**
为了执行以太坊的各种操作，你需要一个钱包。钱包是一个应用程序，它允许你与网络的其余部分进行交互。钱包为你的以太坊地址存储私有密钥。为简单起见，我们将用到[Metamask](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fmetamask.io%2F)。Metamask是一个基于浏览器的钱包，它作为Chrome的扩展运行在本地。各个密钥被存储在本地，并由它们来签发各笔交易。然后，这些被Metamask所运营的公共节点发送到网络中的其余部分。
1\. 获得Metamask
浏览[Chrome Webstore](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fmetamask%2Fnkbihfbeogaeaoehlefnkodbefgpgknn)（https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn）并安装Metamask。
2\. 创建一个新帐户
在你的Chrome窗口的右上角单击Metamask图标，并根据其向导来创建一个帐户。请确保它是在Rinkeby
的测试网络中被创建。要检查这一步是否成功，你可在创建帐户之后，在Metamask窗口的左上角，单击Metamask狐狸旁边的图标。如果你使用的是另外一个网络，请切换到
Rinkeby，然后再跟着向导走下去。
3\. 获得一些以太币
为了注册，你将需要用最少数量的以太币。幸运的是，在测试网络中，这是很容易获得的（而在主网络中，你或是需要去购买，或是足够幸运地能够挖到“矿”)。在测试网络中，你可能会使用到"水龙头"（faucets），水龙头是一些得到免费以太币的地方。最[普通的Rinkeby水龙头](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fwww.rinkeby.io%2F)（https://www.rinkeby.io/）是要求用户创建[GitHub
gist（https://gist.github.com/）](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgist.github.com%2F)。这是简单的限制水龙头被滥用的方法。创建gist是非常容易的，你只需要有一个GitHub的帐户。请创建一个公共的GitHub
gist，并将你的Metamask
Rinkeby地址粘贴到其中。然后回到水龙头，并将链接放到gist的必填字段处，随后单击"给我以太币"(水龙头位于crypto
faucet部分的左边条上)。
经过这一番操作之后，你应该能在Metamask中可以看到你新获得的以太币了。
要获得你的Rinkeby以太坊地址，请转到Metamask，然后单击你的帐户名称旁边的"复制"图标。这将是你主以太坊的地址。在实际的生产系统中，会有大量的以太币出现在该帐户的地址中。这个地址也是在你每次使用以太坊地址登录到第三方网站的时候，所不想暴露的。
获取移动身份验证的应用程序
现在该设置你的辅助地址和登录帮助程序了。此应用程序将被作为身份验证的因子，用来确认你的登录请求。当你想要登录一些网站的时候，你将收到一个来自该应用程序的通知。此通知将允许你接受或拒绝身份验证的请求。
1\. 获取应用程序
进入Android Play商店，下载我们的[Auth0
PoC](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dblock.chain.auth.zero)应用程序（https://play.google.com/store/apps/details?id=block.chain.auth.zero）。
2\. 注册
打开该应用程序并输入你的电子邮件地址。然后选择屏幕解锁图案。当你想登录到网站时，你会被要求输入此相同的图案。然后单击Register。你将被要求在移动应用程序上单击Sign来予以确认。
移动应用程序现在就设置好了，让我们来为登录启用你的以太坊帐户吧。
为登录启用你的以太坊地址
这一步，和以前一样只需执行一次，完成你的主地址和登录地址之间的映射设置。换句话说，它将把你的Metamask帐户连接到你智能手机的移动应用程序上。
1\. 获得你的移动应用程序（辅助）地址
如果你现在查看你的电子邮件（请注意检查那些垃圾、促销类邮件），你就会发现你以太坊的辅地址了。这就是通过你的智能手机来管理的帐户地址。请将它复制到剪贴板中。
2\. 调用合约 ！
如果你是以太坊用户，且有你自己的钱包，你完全可以手动执行此步骤。然而为简单起见，我们已经建立了网站，为你分担了那些繁复的工作。同样使用你已安装了Metamask的Chrome实例，导航到[我们PoC钱包](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=http%3A%2F%2Fauth0-ethereum.com%3A3002%2Fwallet%2F)（http://auth0-ethereum.com:3002/wallet/）。这个网站是一个简单本地的、钱包类型的应用程序，它创建了调用合约所必须的以太坊事务。该网站与Metamask交互，因此你不必手动输入你的帐户详细信息。
一旦你进入该网站，请将你从上一步电子邮件里复制的以太坊地址粘贴进来，单击Register，会弹出一个Metamask的窗口。这是一个对于你将使用主帐户里的以太币来进行一笔交易的确认，因此请单击Sign。过一会儿后，你主账户和辅助帐户就连接上了，其花费的时间完全取决于以太坊的网络状态。一般也就是几秒钟而已。
考虑你可能已经对以太坊很熟悉了，而且想要自己手动执行此步骤。那么请调用Mapper合约里位于
0x5e24bf433aee99227737663c0a387f02a9ed4b8a的mapAddress方法吧。你也可以通过链接：[https://github.com/auth0/ethereum-auth-client/blob/master/config/abi.json](https://github.com/auth0/ethereum-auth-client/blob/master/config/abi.json)来获取[JSON
API](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgithub.com%2Fauth0%2Fethereum-auth-client%2Fblob%2Fmaster%2Fconfig%2Fabi.json)。其唯一的参数就是你在电子邮件里获得的地址。至此，一切都以完成！
**登录到我们的测试网站**
你现在可以运用你的电子邮件地址或是你的主以太坊地址作为凭据，登录到支持该身份验证方法的任何第三方网站了。请进入[我们的示例网站](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fauth0-ethereum.com%2Fauthzero)：https://auth0-ethereum.com/authzero，填写你的电子邮件地址，然后单击Login。同时注意查看你的智能手机所弹出的通知，以批准你的登录信息。
你会注意到一个标注着Trustless
Authentication的复选框。如前文所述，第三方可能选用不同的安全级别。当被告知登录为有效（信任类型的身份验证）时，它们可以选择信任身份验证服务器；或者它们可能会选择不信任身份验证服务器，而是自己内部去验证签名。在这种情况下，第三方网站必须自己去验证辅助地址的签名，它们首先使用Mapper合约（这是公开可以获得的）来查询辅助地址，然后通过辅助地址的返回数据来验证签名，以查找到辅助地址所对应的公共密钥。这提供的是最高的安全级别，而只是用到身份验证服务器来传递消息。
如果你有兴趣仔细了解我们的PoC是如何工作的话，这里是所有的资源库：
[身份验证服务器](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgithub.com%2Fauth0%2Fethereum-authentication-server)：https://github.com/auth0/ethereum-authentication-server
[移动应用程序](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgithub.com%2Fauth0%2Fethereum-authenticator-app-public)：https://github.com/auth0/ethereum-authenticator-app-public
[第三方web应用程序](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgithub.com%2Fauth0%2Fethereum-sample-web)的示例：https://github.com/auth0/ethereum-sample-web
[使用Metamask来注册钱包](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgithub.com%2Fauth0%2Fethereum-browser-wallet)：https://github.com/auth0/ethereum-browser-wallet
[简单测试的各种docker脚本](/Users/tangyizhen/Desktop/%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95%E7%9A%84%E5%90%84%E7%A7%8Ddocker%E8%84%9A%E6%9C%AC)：https://github.com/auth0/ethereum-docker-deployment
上述的资料库也用到了一些针对此PoC开发的帮助库：
[以太坊加密的帮助库：](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgithub.com%2Fauth0%2Fethereum-crypto)https://github.com/auth0/ethereum-crypto
此PoC用到的、[进行身份验证所需的JavaScript库](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgithub.com%2Fauth0%2Fethereum-auth-client)：https://github.com/auth0/ethereum-user-db-service
[简单的数据库抽象帮](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fgithub.com%2Fauth0%2Fethereum-user-db-service)助：https://github.com/auth0/ethereum-user-db-service
为[此PoC预配置的以太坊客户端节点](/Users/tangyizhen/Desktop/%E6%AD%A4PoC%E9%A2%84%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%8A%82%E7%82%B9)：https://github.com/auth0/go-ethereum