Do While i = 0  
    Set objLatestProcess = colMonitoredProcesses.NextEvent 
    Wscript.Echo objLatestProcess.TargetInstance.Name 
Loop 
The line that invokes ExecNotificationQuery does so with a parameter that includes a select 
statement, which highlights WMI’s support for a read-only subset of the ANSI standard Structured 
Query Language (SQL), known as WQL, to provide a flexible way for WMI consumers to specify the 
information they want to extract from WMI providers. Running the sample script with Cscript and 
then starting Notepad results in the following output:
C:\>cscript monproc.vbs  
Microsoft (R) Windows Script Host Version 5.812 
Copyright (C) Microsoft Corporation. All rights reserved. 
NOTEPAD.EXE
PowerShell supports the same functionality through the Register-WmiEvent and Get-Event 
commands:
PS C:\> Register-WmiEvent -Query “SELECT * FROM __InstanceCreationEvent  WITHIN 1 WHERE 
TargetInstance ISA 'Win32_Process'” -SourceIdentifier “TestWmiRegistration” 
PS C:\> (Get-Event)[0].SourceEventArgs.NewEvent.TargetInstance | Select-Object -Property 
ProcessId, ExecutablePath 
ProcessId ExecutablePath 
--------- -------------- 
    76016 C:\WINDOWS\system32\notepad.exe 
PS C:\> Unregister-Event -SourceIdentifier "TestWmiRegistration"
EXPERIMENT: Using WMI scripts to manage systems
A powerful aspect of WMI is its support for scripting languages. Microsoft has generated hun-
dreds of scripts that perform common administrative tasks for managing user accounts, files, the 
registry, processes, and hardware devices. The Microsoft TechNet Scripting Center website serves 
as the central location for Microsoft scripts. Using a script from the scripting center is as easy as 
copying its text from your Internet browser, storing it in a file with a .vbs extension, and running 
it with the command cscript script.vbs, where script is the name you gave the script. 
Cscript is the command-line interface to Windows Script Host (WSH).
Here’s a sample TechNet script that registers to receive events when Win32_Process object 
instances are created, which occur whenever a process starts and prints a line with the name of 
the process that the object represents:
strComputer = "." 
Set objWMIService = GetObject("winmgmts:" _ 
    & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2") 
Set colMonitoredProcesses = objWMIService. _
    ExecNotificationQuery("SELECT * FROM __InstanceCreationEvent " _  
& " WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'") 
i = 0 
Do While i = 0 
    Set objLatestProcess = colMonitoredProcesses.NextEvent 
    Wscript.Echo objLatestProcess.TargetInstance.Name 
Loop 
The line that invokes ExecNotificationQuery does so with a parameter that includes a 
ExecNotificationQuery does so with a parameter that includes a 
ExecNotificationQuery
select
statement, which highlights WMI’s support for a read-only subset of the ANSI standard Structured
Query Language (SQL), known as WQL, to provide a flexible way for WMI consumers to specify the
information they want to extract from WMI providers. Running the sample script with Cscript and
then starting Notepad results in the following output:
C:\>cscript monproc.vbs 
Microsoft (R) Windows Script Host Version 5.812
Copyright (C) Microsoft Corporation. All rights reserved. 
NOTEPAD.EXE
PowerShell supports the same functionality through the Register-WmiEvent and Get-Event
commands:
PS C:\> Register-WmiEvent -Query “SELECT * FROM __InstanceCreationEvent  WITHIN 1 WHERE 
TargetInstance ISA 'Win32_Process'” -SourceIdentifier “TestWmiRegistration”
PS C:\> (Get-Event)[0].SourceEventArgs.NewEvent.TargetInstance | Select-Object -Property 
ProcessId, ExecutablePath
ProcessId ExecutablePath
--------- --------------
    76016 C:\WINDOWS\system32\notepad.exe
PS C:\> Unregister-Event -SourceIdentifier "TestWmiRegistration"
496 
CHAPTER 10 Management, diagnostics, and tracing
WMI implementation
The WMI service runs in a shared Svchost process that executes in the local system account. It loads 
providers into the WmiPrvSE.exe provider-hosting process, which launches as a child of the DCOM 
Launcher (RPC service) process. WMI executes Wmiprvse in the local system, local service, or network 
service account, depending on the value of the HostingModel property of the WMI Win32Provider ob-
ject instance that represents the provider implementation. A Wmiprvse process exits after the provider 
is removed from the cache, one minute following the last provider request it receives.
EXPERIMENT: Viewing Wmiprvse creation
You can see WmiPrvSE being created by running Process Explorer and executing Wmic. A 
WmiPrvSE process will appear beneath the Svchost process that hosts the DCOM Launcher 
service. If Process Explorer job highlighting is enabled, it will appear with the job highlight color 
because, to prevent a runaway provider from consuming all virtual memory resources on a 
system, Wmiprvse executes in a job object that limits the number of child processes it can create 
and the amount of virtual memory each process and all the processes of the job can allocate. 
(See Chapter 5 for more information on job objects.)
Most WMI components reside by default in %SystemRoot%\System32 and %SystemRoot%\System32\
Wbem, including Windows MOF files, built-in provider DLLs, and management application WMI DLLs. 
Look in the %SystemRoot%\System32\Wbem directory, and you’ll find Ntevt.mof, the Event Log provider 
MOF file. You’ll also find Ntevt.dll, the Event Log provider’s DLL, which the WMI service uses.
EXPERIMENT: Viewing Wmiprvse creation
You can see WmiPrvSE being created by running Process Explorer and executing Wmic. A 
WmiPrvSE process will appear beneath the Svchost process that hosts the DCOM Launcher 
service. If Process Explorer job highlighting is enabled, it will appear with the job highlight color 
because, to prevent a runaway provider from consuming all virtual memory resources on a 
system, Wmiprvse executes in a job object that limits the number of child processes it can create 
and the amount of virtual memory each process and all the processes of the job can allocate. 
(See Chapter 5 for more information on job objects.)
CHAPTER 10 Management, diagnostics, and tracing
497
Providers are generally implemented as dynamic link libraries (DLLs) exposing COM servers that 
implement a specified set of interfaces (IWbemServices is the central one. Generally, a single provider is 
implemented as a single COM server). WMI includes many built-in providers for the Windows family of 
operating systems. The built-in providers, also known as standard providers, supply data and manage-
ment functions from well-known operating system sources such as the Win32 subsystem, event logs, 
performance counters, and registry. Table 10-15 lists several of the standard WMI providers included 
with Windows.
TABLE 10-15 Standard WMI providers included with Windows
Provider
Binary
Namespace
Description
Active Directory 
provider
dsprov.dll
root\directory\ldap
Maps Active Directory objects to WMI
Event Log provider
ntevt.dll
root\cimv2
Manages Windows event logs—for example, read, 
backup, clear, copy, delete, monitor, rename, com-
press, uncompress, and change event log settings
Performance Counter 
provider
wbemperf.dll
root\cimv2
Provides access to raw performance data
Registry provider
stdprov.dll
root\default
Reads, writes, enumerates, monitors, creates, and 
deletes registry keys and values
Virtualization 
provider
vmmsprox.dll
root\virtualization\v2
Provides access to virtualization services implemented 
in vmms.exe, like managing virtual machines in the 
host system and retrieving information of the host 
system peripherals from a guest VM
WDM provider
wmiprov.dll
root\wmi
Provides access to information on WDM device drivers
Win32 provider
cimwin32.dll
root\cimv2
Provides information about the computer, disks, pe-
ripheral devices, files, folders, file systems, networking 
components, operating system, printers, processes, 
security, services, shares, SAM users and groups, and 
more
Windows Installer 
provider
msiprov.dll
root\cimv2
Provides access to information about installed 
software
Ntevt.dll, the Event Log provider DLL, is a COM server, registered in the HKLM\Software\Classes\
CLSID registry key with the {F55C5B4C-517D-11d1-AB57-00C04FD9159E} CLSID. (You can find it in the 
MOF descriptor.) Directories beneath %SystemRoot%\System32\Wbem store the repository, log files, 
and third-party MOF files. WMI implements the repository—named the CIMOM object repository—
using a proprietary version of the Microsoft JET database engine. The database file, by default, resides 
in SystemRoot%\System32\Wbem\Repository\.
WMI honors numerous registry settings that the service’s HKLM\SOFTWARE\Microsoft\WBEM\
CIMOM registry key stores, such as thresholds and maximum values for certain parameters.
Device drivers use special interfaces to provide data to and accept commands—called the WMI 
System Control commands—from WMI. These interfaces are part of the WDM, which is explained in 
Chapter 6 of Part 1. Because the interfaces are cross-platform, they fall under the \root\WMI namespace.
498 
CHAPTER 10 Management, diagnostics, and tracing
WMI security
WMI implements security at the namespace level. If a management application successfully connects 
to a namespace, the application can view and access the properties of all the objects in that namespace. 
An administrator can use the WMI Control application to control which users can access a namespace. 
Internally, this security model is implemented by using ACLs and Security Descriptors, part of the 
standard Windows security model that implements Access Checks. (See Chapter 7 of Part 1 for more 
information on access checks.)
To start the WMI Control application, open the Control Panel by typing Computer Management 
in the Cortana search box. Next, open the Services And Applications node. Right-click WMI Control 
and select Properties to launch the WMI Control Properties dialog box, as shown in Figure 10-30. To 
configure security for namespaces, click the Security tab, select the namespace, and click Security. 
The other tabs in the WMI Control Properties dialog box let you modify the performance and backup 
settings that the registry stores.
FIGURE 10-30 The WMI Control Properties application and the Security tab of the root\virtualization\v2 namespace.
CHAPTER 10 Management, diagnostics, and tracing
499
Event Tracing for Windows (ETW)
Event Tracing for Windows (ETW) is the main facility that provides to applications and kernel-mode 
drivers the ability to provide, consume, and manage log and trace events. The events can be stored in 
a log file or in a circular buffer, or they can be consumed in real time. They can be used for debugging 
a driver, a framework like the .NET CLR, or an application and to understand whether there could be 
potential performance issues. The ETW facility is mainly implemented in the NT kernel, but an applica-
tion can also use private loggers, which do not transition to kernel-mode at all. An application that uses 
ETW can be one of the following categories:
I 
Controller A controller starts and stops event tracing sessions, manages the size of the buffer
pools, and enables providers so they can log events to the session. Example controllers include
Reliability and Performance Monitor and XPerf from the Windows Performance Toolkit (now
part of the Windows Assessment and Deployment Kit, available for download from https://docs.
microsoft.com/en-us/windows-hardware/get-started/adk-install).
I 
Provider A provider is an application or a driver that contains event tracing instrumentation.
A provider registers with ETW a provider GUID (globally unique identifiers), which defines the
events it can produce. After the registration, the provider can generate events, which can be
enabled or disabled by the controller application through an associated trace session.
I 
Consumer A consumer is an application that selects one or more trace sessions for which it
wants to read trace data. Consumers can receive events stored in log files, in a circular buffer,
or from sessions that deliver events in real time.
It’s important to mention that in ETW, every provider, session, trait, and provider’s group is rep-
resented by a GUID (more information about these concepts are provided later in this chapter). Four 
different technologies used for providing events are built on the top of ETW. They differ mainly in the 
method in which they store and define events (there are other distinctions though):
I 
MOF (or classic) providers are the legacy ones, used especially by WMI. MOF providers store the
events descriptor in MOF classes so that the consumer knows how to consume them.
I 
WPP (Windows software trace processor) providers are used for tracing the operations of an
application or driver (they are an extension of WMI event tracing) and use a TMF (trace message
format) file for allowing the consumer to decode trace events.
I 
Manifest-based providers use an XML manifest file to define events that can be decoded by
the consumer.
I 
TraceLogging providers, which, like WPP providers are used for fast tracing the operation of an
application of driver, use self-describing events that contain all the required information for the
consumption by the controller.
500 
CHAPTER 10 Management, diagnostics, and tracing
When first installed, Windows already includes dozens of providers, which are used by each com-
ponent of the OS for logging diagnostics events and performance traces. For example, Hyper-V has 
multiple providers, which provide tracing events for the Hypervisor, Dynamic Memory, Vid driver, and 
Virtualization stack. As shown in Figure 10-31, ETW is implemented in different components:
I 
Most of the ETW implementation (global session creation, provider registration and enable-
ment, main logger thread) resides in the NT kernel.
I 
The Host for SCM/SDDL/LSA Lookup APIs library (sechost.dll) provides to applications the main
user-mode APIs used for creating an ETW session, enabling providers and consuming events.
Sechost uses services provided by Ntdll to invoke ETW in the NT kernel. Some ETW user-mode
APIs are implemented directly in Ntdll without exposing the functionality to Sechost. Provider
registration and events generation are examples of user-mode functionalities that are imple-
mented in Ntdll (and not in Sechost).
I 
The Event Trace Decode Helper Library (TDH.dll) implements services available for consumers
to decode ETW events.
I 
The Eventing Consumption and Configuration library (WevtApi.dll) implements the Windows
Event Log APIs (also known as Evt APIs), which are available to consumer applications for man-
aging providers and events on local and remote machines. Windows Event Log APIs support
XPath 1.0 or structured XML queries for parsing events produced by an ETW session.
I 
The Secure Kernel implements basic secure services able to interact with ETW in the NT kernel
that lives in VTL 0. This allows trustlets and the Secure Kernel to use ETW for logging their own
secure events.
WevtApi.dll
Sechost.dll
Secure Kernel
ETW
(NT Kernel)
TDH.dll
User Mode
Kernel Mode
Decode
Events
Consumer App.
Consume
Events
Kernel Drivers
Kernel Drivers
Kernel Drivers
Controller App.
Provider App.
NTDLL.DLL
FIGURE 10-31 ETW architecture.
CHAPTER 10 Management, diagnostics, and tracing
501
ETW initialization
The ETW initialization starts early in the NT kernel startup (for more details on the NT kernel initial-
ization, see Chapter 12). It is orchestrated by the internal EtwInitialize function in three phases. The 
phase 0 of the NT kernel initialization calls EtwInitialize to properly allocate and initialize the per-silo 
ETW-specific data structure that stores the array of logger contexts representing global ETW sessions 
(see the “ETW session” section later in this chapter for more details). The maximum number of global 
sessions is queried from the HKLM\System\CurrentControlSet\Control\WMI\EtwMaxLoggers regis-
try value, which should be between 32 and 256, (64 is the default number in case the registry value 
does not exist).
Later, in the NT kernel startup, the IoInitSystemPreDrivers routine of phase 1 continues with the 
initialization of ETW, which performs the following steps:
1.
Acquires the system startup time and reference system time and calculates the QPC frequency.
2.
Initializes the ETW security key and reads the default session and provider’s security descriptor.
3.
Initializes the per-processor global tracing structures located in the PRCB.
4.
Creates the real-time ETW consumer object type (called EtwConsumer), which is used to allow
a user-mode real-time consumer process to connect to the main ETW logger thread and the