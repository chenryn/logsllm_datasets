### Modified Processor Pipeline

**Figure 4: Modified Processor Pipeline**
- The instruction decode stage is extended with a 12-bit residue encoder.
- The execution stage is augmented with a residue ALU.
- The write-back stage includes a pointer-reduction data-linking unit.

### Residue ALU Design

**Figure 5: Residue ALU with a 41-bit Adder and Shared Residue Encoder**
- The addition result is automatically checked after the operation by re-encoding the result and comparing it with the computed residues, generating a redundant error signal if there is a mismatch.

The new residue ALU, detailed in Figure 5, supports:
- Encoding and decoding of values to/from the multi-residue domain.
- Addition and subtraction of two encoded values.
- Optimized design requiring only one residue adder and one encoder in the execution stage.

Decoding is achieved through rewiring, where the upper bits are set to zero. After performing an addition, the functional value of the adder result is re-encoded and compared with the independently computed residues to perform error-checking. If the computed residues and the newly re-encoded residues do not match, a redundant error signal is generated, forcing the processor into a safe state.

Since this adder is also used for computing the final pointer address during memory access (by adding the encoded immediate value to the encoded base pointer), every pointer is checked before performing a memory access. Frequent checks minimize the probability of error masking, ensuring errors remain detectable.

Currently, the residue encoder uses special algorithms from [22], but the residue adder is implemented without further optimizations. Using optimized arithmetic operations, such as those from [36], can further reduce hardware overhead.

### Overhead Analysis

**Table 1: Code and Runtime Overhead for Different Benchmark Programs from an HDL Simulation**

| Benchmark | Code Overhead (kB) | Code Overhead (%) | Runtime Overhead (kCycles) | Runtime Overhead (%) |
|-----------|-------------------|------------------|---------------------------|----------------------|
| fir       | 4.26              | 8.54             | 39.22                     | 6.35                 |
| fft       | 6.52              | 6.57             | 58.01                     | 4.65                 |
| keccak    | 4.79              | 10.11            | 255.55                    | 11.31                |
| ipm       | 4.84              | 12.81            | 10.80                     | 3.94                 |
| aes_cbc   | 7.25              | 8.77             | 60.91                     | 9.10                 |
| conv2d    | 3.26              | 13.12            | 5.92                      | 2.70                 |
| Average   | -                 | 9.99             | -                         | 6.34                 |

### Hardware Overhead and Future Work

To quantify the hardware overhead, we synthesized the hardware architecture for a Xilinx Artix-7 series FPGA. Adding new instructions, a dedicated ALU for multi-residue operations, and a modified load-and-store unit increased the number of lookup tables (LUTs) by less than 5% and the number of flip-flops by less than 1%. This prototype design leaves room for further optimization.

A custom LLVM toolchain based on LLVM 6.0 was used to compile different benchmark applications for the RISC-V-based target architecture. The benchmarks were taken from the PULPino repository [32], originally used to evaluate the RI5CY core. Simulations were performed using a cycle-accurate HDL simulation of the target processor. The baseline included CFI protection [35] without application-specific data protection. The exclusive overhead of our countermeasure was determined in terms of code size and runtime.

As shown in Table 1, the average code overhead is 10%, and the runtime overhead is less than 7%. This performance is significantly better than ANB-codes, which have an average runtime overhead of 90% for memory access protection. Our countermeasure's lower overhead makes it attractive for real-world applications.

### Future Work

While the current overhead numbers are competitive, further improvements in code size and performance are possible. For example, pointer comparisons in the encoded domain are currently limited to equal and not equal. Adding support for other predicates and logical operations will further reduce overhead and enhance the protection domain. Additionally, optimizing the compiler for the prototype architecture can yield even better results.

### Conclusion

Memory accesses are critical operations, and many security policies and safety mechanisms depend on their correct execution. However, faults can compromise the correctness of memory accesses. While methods exist to protect control flow and data, no efficient mechanism has protected memory accesses against address tampering.

In this work, we introduced a new mechanism to protect memory accesses. The countermeasure involves two steps:
1. Protecting all pointers, including pointer arithmetic, using a multi-residue code, with redundancy stored in the unused upper bits of the pointer.
2. Linking the redundant pointer with the data, making addressing errors detectable when data is loaded into the register.

We integrated this concept into a RISC-V processor, extending the instruction set and adding new memory operations. The LLVM compiler was also extended to transform all pointers to the encoded domain. Our evaluation showed an average code overhead of 10% and a runtime overhead of less than 7%, making this countermeasure practical for real-life applications.

### Acknowledgment

This project received funding from the European Research Council (ERC) under the European Unionâ€™s Horizon 2020 research and innovation program (grant agreement No 681402) and the Austrian Research Promotion Agency (FFG) via the competence center Know-Center (grant number 844595), funded in the context of COMET - Competence Centers for Excellent Technologies by BMVIT, BMWFW, and Styria.

### References

[References listed as provided, with proper formatting and citations.]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.