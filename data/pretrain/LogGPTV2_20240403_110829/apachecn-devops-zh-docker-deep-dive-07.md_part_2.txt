以下命令启动一个简单的容器，该容器将运行 Ubuntu Linux 的容器化版本。
```
$ docker container run -it ubuntu:latest /bin/bash
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
d51af753c3d3: Pull complete 
fc878cd0a91c: Pull complete 
6154df8ff988: Pull complete 
fee5db0ff82f: Pull complete 
Digest: sha256:747d2dbbaaee995098c9792d99bd333c6783ce56150d1b11e333bbceed5c54d7
Status: Downloaded newer image for ubuntu:latest
root@50949b614477:/# 
```
 `下面是一个启动运行 PowerShell (pwsh.exe)的容器的 Windows 示例。
```
> docker container run -it mcr.microsoft.com/powershell:nanoserver pwsh.exe
docker container run -it mcr.microsoft.com/powershell:nanoserver pwsh.exe
Unable to find image 'mcr.microsoft.com/powershell:nanoserver' locally
nanoserver: Pulling from powershell
0fe89239909b: Pull complete 
2c9371eb1f40: Pull complete
806da439b031: Pull complete 
Digest: sha256:cefdb984d9...ad3ab2079a
Status: Downloaded newer image for mcr.microsoft.com/powershell:nanoserver
PowerShell 7.0.0
Copyright (c) Microsoft Corporation. All rights reserved.
PS C:\> 
```
 `让我们仔细看看这个命令。
`docker container run`告诉 Docker 运行一个新的容器。`-it`标志使容器具有交互性，并将其附加到您的终端。`ubuntu:latest`或`mcr.microsoft.com/powershell:nanoserver`告诉 Docker 从哪个映像开始容器。最后，`/bin/bash`和`pwsh.exe`分别是每个容器将运行的应用。
当您点击`Return`时，Docker 客户端打包命令，并将其发布到在 Docker 守护程序上运行的 API 服务器。Docker 守护程序接受了该命令，并搜索 Docker 主机的本地映像存储库，查看它是否已经有了所请求映像的副本。在引用的例子中，它没有，所以它去 Docker Hub 看看它是否能在那里找到它。它找到了它，在本地提取它，并将其存储在本地缓存中。
> **注:**在标准的、现成的 Linux 安装中，Docker 守护程序在`/var/run/docker.sock`的本地 IPC/Unix 套接字上实现 Docker 远程 API。在 Windows 上，它监听位于`npipe:////./pipe/docker_engine`的命名管道。可以将 Docker 守护程序配置为在网络上侦听。Docker 的默认非 TLS 网络端口为 2375，默认 TLS 端口为 2376。
一旦映像被提取，守护进程就指示`containerd`和`runc`创建并启动容器。
如果您跟着走，您的终端现在已经连接到容器上了——仔细看，您会看到您的 shell 提示符已经更改。在引用的 Linux 示例中，shell 提示符已更改为`root@50949b614477:/#`。`@`后的长数字是容器唯一标识的前 12 个字符。在视窗系统的例子中，它变成了`PS C:\>`。
尝试在容器内部执行一些基本命令。你可能会注意到其中一些不起作用。这是因为映像被优化为轻量级的。因此，他们没有安装所有正常的命令和软件包。下面的示例显示了两个命令——一个成功，另一个失败。
```
root@50949b614477:/# ls -l
total 64
lrwxrwxrwx   1 root root    7 Apr 23 11:06 bin -> usr/bin
drwxr-xr-x   2 root root 4096 Apr 15 11:09 boot
drwxr-xr-x   5 root root  360 Apr 27 17:24 dev
drwxr-xr-x   1 root root 4096 Apr 27 17:24 etc
drwxr-xr-x   2 root root 4096 Apr 15 11:09 home
lrwxrwxrwx   1 root root    7 Apr 23 11:06 lib -> usr/lib
root@50949b614477:/# ping nigelpoulton.com
bash: ping: command not found 
```
 `如您所见，`ping`实用程序没有作为官方 Ubuntu 映像的一部分。
#### 容器过程
当我们在上一节中启动 Ubuntu 容器时，我们告诉它运行 Bash shell ( `/bin/bash`)。这使得 Bash shell 成为在容器内部运行的**唯一的进程。从容器内部运行`ps -elf`可以看到这一点。**
```
root@50949b614477:/# ps -elf
F S UID   PID  PPID   NI ADDR SZ WCHAN  STIME TTY     TIME      CMD
4 S root    1     0    0 -  4558 wait   00:47 ?     00:00:00  /bin/bash
0 R root   11     1    0 -  8604 -      00:52 ?     00:00:00  ps -elf 
```
 `列表中的第一个进程，PID 为 1，是我们告诉容器运行的 Bash shell。第二个过程是我们运行的`ps -elf`命令产生列表。这是一个短暂的过程，一显示输出就退出。长话短说，这个容器运行的是一个进程— `/bin/bash`。
> **注意:** Windows 容器略有不同，往往运行相当多的后台进程。
如果您登录到容器并键入`exit`，您将终止 Bash 进程，容器将退出(终止)。这是因为没有指定的主进程，容器就不能存在。Linux 和 Windows 容器也是如此——**杀死容器中的主进程就会杀死容器**。
按`Ctrl-PQ`退出容器，不终止其主要过程。这样做将把您放回 Docker 主机的外壳中，让容器在后台运行。您可以使用`docker container ls`命令查看系统上运行的容器列表。
```
$ docker container ls
CNTNR ID  IMAGE          COMMAND    CREATED  STATUS    NAMES
509...74  ubuntu:latest  /bin/bash  6 mins   Up 6mins  sick_montalcini 
```
 `重要的是要了解这个容器仍然在运行，您可以使用`docker container exec`命令将您的终端重新连接到它。
```
$ docker container exec -it 50949b614477 bash
root@50949b614477:/# 
```
 `重新连接到 Windows Nano Server PowerShell 容器的命令将是`docker container exec -it  pwsh.exe`。
如您所见，shell 提示符已变回容器。如果您再次运行`ps -elf`命令，您现在将看到两个**T4 Bash 或 PowerShell 进程。这是因为`docker container exec`命令创建了一个新的 Bash 或 PowerShell 进程，并附加到该进程上。这意味着在这个 shell 中键入`exit`不会终止容器，因为原始的 Bash 或 PowerShell 进程将继续运行。**
键入`exit`离开容器，并使用`docker container ls`验证它是否仍在运行。它仍将运行。
如果您跟随示例，您应该使用以下两个命令停止并删除容器(您需要替换容器的标识)。
```
$ docker container stop 50949b614477
50949b614477
$ docker container rm 50949b614477
50949b614477 
```
 `前面示例中启动的容器将不再出现在您的系统中。
#### 容器生命周期
在本节中，我们将研究容器的生命周期——从出生、工作和休假到最终死亡。
我们已经看到了如何用`docker container run`命令启动容器。让我们开始另一个，这样我们就可以走完它的整个生命周期。以下示例将来自运行 Ubuntu 容器的 Linux Docker 主机。然而，所有的例子都将与前面例子中的 Windows PowerShell 容器一起工作——显然，您将不得不用它们的等效 Windows 命令来替换 Linux 命令。
如前所述，如果您在 Windows 10 Pro 笔记本电脑上运行 Docker Desktop，您可以在 Linux 容器模式下运行，并遵循所有 Linux 示例。
```
$ docker container run --name percy -it ubuntu:latest /bin/bash
root@9cb2d2fd1d65:/# 
```
 `这就是创建的容器，我们将其命名为“percy”表示持久化。
现在让我们通过向它写入一些数据来实现它。
以下过程将一些文本写入`/tmp`目录中的新文件，并验证操作是否成功。请确保在刚刚启动的容器中运行这些命令。
```
root@9cb2d2fd1d65:/# cd tmp
root@9cb2d2fd1d65:/tmp# ls -l
total 0
root@9cb2d2fd1d65:/tmp# echo "Sunderland is the greatest football team in the world" > newfile
root@9cb2d2fd1d65:/tmp# ls -l
total 4
-rw-r--r-- 1 root root 14 Apr 27 11:22 newfile
root@9cb2d2fd1d65:/tmp# cat newfile
Sunderland is the greatest football team in the world 
```
 `按`Ctrl-PQ`退出容器，不杀死容器。
现在使用`docker container stop`命令停止容器并放入*假期*。
```
$ docker container stop percy
percy 