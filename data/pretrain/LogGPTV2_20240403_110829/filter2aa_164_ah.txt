users will balk at my suggesting nano (pronounced NAH-noh) instead of vi (pronounced vee-eye or
vie).
Note: Linux Humor
Linux program names often have colorful and/or ironic histories. For our purposes,
nano is a recursive acronym for Nano’s ANOther Editor. Historically, nano is a more user-
friendly successor to an ancient Linux email client application named pico (pronounced
pee-koh).
To open an existing file (such as /etc/hosts), run the following command:
sudo nano /etc/hosts
If you want read/write access to system configuration files like hosts, you should always prepend
your nano command with sudo.
 You can create a new, blank text file by running nano with the name of your new, as-yet-uncreated
file. For instance, the following command creates a new file named test.txt in the present working
directory and opens the document for editing in nano:
sudo nano test.txt
One thing I like about nano is that the primary interface commands appear in the footer of the user
interface (see Figure 5.4).
FIGURE 5.4 The nano text editor’s user interface includes onscreen navigation help.
In a nutshell, you use the arrow keys to navigate and the Control key to issue shortcuts. The most
common of these shortcuts are Control+O to write out (save) your file, and Control+X to exit nano.
man
 Any self-respecting Linux distribution includes a local library of manual (man) pages that describe
the full purpose and syntax of Linux commands. Raspbian is no different!
 To look up syntax for a particular Linux command (let’s start with ls as an example), try this:
man ls
The man pages open by default in the page viewer less (run man less to learn more about this
program!). You can see the screen output in Figure 5.5.
FIGURE 5.5 Raspbian man pages open in the less page viewer by default.
You can actually run man man to learn more about the man command itself.
 To navigate a man page in the less viewer, use the spacebar to move one screen at a time and press
Enter to scroll one line at a time. To exit the viewer, simply type q.
shutdown
 In Debian, the shutdown command is my preferred way for not only shutting down the Pi, but also for
performing reboots.
 To initiate an immediate shutdown on your Pi, simply issue the following command:
sudo shutdown -h now
The -h parameter instructs Raspbian to halt the system as opposed to simply putting the system in a
standby state. To halt Linux means to power off the machine entirely.
 Somewhat ironically, you can also use the shutdown command to restart the Raspberry Pi. To do this,
include the -r parameter as shown here:
sudo shutdown -r now
You will observe my use of sudo for any issuance of the shutdown command. In Linux, shutting down
or restarting the system is a privilege reserved only for those with superuser (root) abilities.
 The now parameter can be substituted with a time value if, for whatever reason, you want to delay a
halt or a reboot. Consider the following example, which employs a 10-minute delay as well as a pop-
up message to all connected users. Please note that the following code should be typed on a single
line; this isn’t two separate statements.
Click here to view code image
sudo shutdown -h +10 "Server is going down for maintenance. Please save your
work and logoff. Thank you."
You might have wondered, “Hey, Tim—where are the other file-management commands?” Those of
you with some previous Linux experience probably have used one or more of the following Terminal
commands:
 cp: Copy file
 mkdir: Make a directory
 mv: Move or rename a file
 rm: Remove a file
 rmdir: Remove a directory
 In my experience, most file management tasks are more easily accomplished from the GUI shell as
opposed to from the command line. That said, both methods are covered in the next chapter.
Updating Your Software
In Chapter 4, “Installing and Configuring an Operating System,” you learned how to flash your SD
card with the Raspbian operating system. More specifically, you observed post-flash that the disk
contained not one but two partitions. The first partition contains the Raspberry Pi firmware, and the
second contains the Raspbian operating system proper. You can see this disk layout in Figure 5.6.
FIGURE 5.6 A Raspbian SD card contains two partitions: one for the Linux firmware and the
other for the OS itself. The firmware files are shown in the top window, and the OS files are shown
in the bottom window.
For security and stability reasons, it is important that you periodically run an update check not only
for the operating system, but also for the firmware itself.
Updating Raspbian
 Two Terminal commands need to be issued to update this Raspbian distribution. Here’s the first
command:
sudo apt-get update
Debian Linux distributions use the Advanced Packaging Tool, or APT, to locate, download, install,
and remove application and OS software. The statement apt-get update fetches the latest updates to
the Pi’s configured software repository list.
 In Linux parlance, a software repository is an online location where you can search for and install
software for your computer. It’s important to note that apt-get update does not actually update
anything; it simply makes sure that your system has the latest and greatest info regarding software
versions in the software repositories.
 To perform an update operation, issue the following Terminal command:
sudo apt-get upgrade
To make this process more convenient, you can use the double ampersand (&&) concatenation
operator to chain the two commands into one:
Click here to view code image
sudo apt-get update && sudo apt-get upgrade
We revisit the concepts of software repositories and the APT system in Chapter 6, “Debian Linux
Fundamentals—Graphical User Interface.”
Updating the Pi Firmware
 As it happens, a member of the Raspberry Pi community named Hexxeh created a tool called rpi-
update (http://is.gd/Rrh2bS) to automate the firmware update process. Here’s the procedure:
1. Get to a Terminal prompt on your Raspberry Pi.
2. Run the following commands:
Click here to view code image
sudo dpkg-reconfigure tzdata
sudo apt-get install git-core
The dpkg statement checks the system’s currently configured time zone. Git is an open source
software version control application that is very popular among Linux developers.
3. Run the following command:
Click here to view code image
sudo wget http://goo.gl/1BOfJ -O /usr/bin/rpi-update && sudo chmod +x /usr/bin/
rpi-update
Wow—that was a long, honkin’ command, wasn’t it? Let’s break down what it does:
 wget (pronounced double yew get): This is a Linux tool you use to retrieve web server content
from Terminal (as opposed to from a web browser).
 http://goo.gl/1BOfj: This is simply a shortened Uniform Resource Locator (URL) to where
the rpi-update program lives on github.com.
 &&: The double ampersand is a Linux concatenation operator that allows you to run one
statement immediately after the preceding one completes.
 chmod (pronounced see-aych-mod): This is a Linux command you use to edit the permissions
and attributes on files and directories. In this case, you are allowing rpi-update to run as an
executable program file.
4. To perform a firmware update check/install, simply run the following command:
sudo rpi-update
If you do get a firmware update, you’ll need to reboot your Pi. Remember that you can do that from
the Terminal prompt by using the following statement:
shutdown -r now
Revisiting Raspi-Config
By far the easiest way to perform initial setup of your Raspberry Pi is to use the built-in Raspi-Config
utility. You can start Raspi-Config from the full-screen Bash environment or from the LXTerminal
simply by typing the following:
sudo raspi-config
Doing so presents you with the Raspi-Config text-based interface you saw in Chapter 4. Raspi-Config
is actually a user-friendly front end to the config.txt configuration file located in the /etc directory.
Figure 5.7 shows you what the Config.txt file looks like.
FIGURE 5.7 The Raspi-Config utility makes “under the hood” changes to the Config.txt file.
You can see the Raspi-config interface proper in Figure 5.8.
FIGURE 5.8 The Raspberry Pi Software Configuration Tool (Raspi-Config).
You can navigate through Raspi-Config utility by using the keyboard and can use your Up and Down
arrow keys or the Tab key to move through the options; press Enter to make a selection.
 To leave the main menu and leave Raspi-Config, use the Right Arrow or Tab until you’ve highlighted
Finish, and then press Enter.
 Let’s close this chapter by walking through each Raspi-config option in greater detail.
Expand Filesystem
 You should run this option as soon as possible after flashing your Raspbian SD card. Doing so makes
the full space of your SD card available to Raspbian. If you don’t expand the root file system, your
Raspbian OS will be limited to a 2GB partition. This result is, of course, quite undesirable if you are
using a 32GB SD card!
Change User Password
 Everybody with any degree of familiarity with the Raspberry Pi knows that the default username is pi
and the default password is raspberry. Thus, if you have any notion of storing confidential data on
your Pi, you are best advised to change the password for the pi account immediately.
 Remember you can also change the current user’s password at any time by issuing the passwd
Terminal command.
 You learn how to create additional user accounts in the next chapter.
Enable Boot to Desktop
 This option can be used to instruct the Pi to book directly into LXDE instead of stopping at the
Terminal prompt. Of course, you need to perform some additional work if you habitually connect to
your Pi remotely like I do. At any rate, Chapter 7 gives you the full skinny on Raspberry Pi
connectivity options.
Internationalisation Options
 This option opens a submenu that enables you to localize your Pi to its corresponding geographic
location. Inside this submenu are three options:
 Change Locale: This option enables you to choose your default language and corresponding
character set. The Pi is configured for UK English by default, but if you want to make a change,
you can do so here. For instance, users located in the United States should select the
en_US.UTF-8 locale.
 Change Timezone: The Foundation cut some financial and production corners by not
including a real-time clock on the Raspberry Pi PCB. Accordingly, the Pi needs some help in
determining the current time and date. Please be sure to select your proper timezone here, and
then as long as the Pi is connected to the Internet, the Pi will periodically synchronize system
time with one of the world’s atomic time clock servers.
 Keyboard Layout: By default, Raspbian is configured for the UK English keyboard layout.
This makes sense because Raspberry Pi is a UK product. However, you’ll want to change the
keyboard layout to match your locale so that you don’t see any unexpected behavior in your
typing results. Most commonly, this “unexpected behavior” manifests in, for instance, a US
user typing @ and seeing “ (double quote) instead, or typing # and instead seeing the pound
sterling symbol.
Note: Internationalisation?
Given the Raspberry Pi is a product of the UK, if you are an American who is
accustomed to using Zs instead of Ss (“internationalization” versus “internationalisation”),
you should just jolly well get with the global program, wot?
Enable Camera
 This option loads the Raspberry Pi camera module drivers and packages, enabling you to make use of
the camera board. We’ll spend a lot of time with the Raspi camera in Chapter 16, “Raspberry Pi
Portable Webcam.”
Add to Rastrack
 This option enables you to add your Raspberry Pi to the Rastrack (http://is.gd/sGStJL) database.
Rastrack is a live map that shows you the geographic distribution of Raspberry Pi computers. It’s
really cool—check it out!
We’ll actually learn how to use Rastrack and address any privacy-related concerns you may have in
Chapter 17, “Raspberry Pi Security and Privacy Device.”
Overclocking
 Overclocking refers to tweaking the CPU operating parameters to force the processor to run at a
higher speed than it was originally designed for. The Foundation provides us with helpful
overclocking levels to afford us the opportunity to turbo-charge our Pi while at the same time
reducing the possibility of frying the chip. Again, this option is discussed in great detail in Chapter
18, “Raspberry Pi Overclocking.”
 In the meantime, let me at least let the proverbial cat out of the bag by showing you the overclock
levels in Figure 5.9. I’m sure the wording in the dialog “Chose overclock preset” will be fixed in a
future firmware update (at least I hope so; sometimes the Pi reveals the lack of spit and polish
inherent in grassroots community projects).
FIGURE 5.9 The Foundation makes it pretty easy to overclock the Raspberry Pi CPU.
Advanced Options
 This is a submenu that contains the following options:
 Overscan: The overscan option enables you to manually adjust the Raspbian screen image.
I’ve never had a problem with the display spilling off the outer border of my monitor, but it’s
nice to have correction capability built into the OS.
 Hostname: This option enables you to change the name of your Raspberry Pi from its default
name of raspberrypi to something of your choosing. I’ve found this option helpful when I’m
dealing with a busy network that consists of more than one Raspberry Pi.
Changing any default value in a computer is a recommended security practice because an
attacker’s first task is to breach your security by capitalizing upon defaults that were never
changed by the owners.
 Memory Split: The Pi’s SoC consists of two processing centers: the CPU and the GPU. You
can adjust how much memory should be reserved for the GPU by accessing this option. This
can have a great impact on system performance depending upon what application you use. This
option is also discussed in great detail in Chapter 18.
 SSH: Secure Shell (SSH) provides a secure and reliable means of establishing a command
prompt session on a remote computer. The SSH server functionality is enabled in Raspbian by
default, so you should not need to do anything here.
You learn all about SSH connectivity in Chapter 7.
 Update: This option performs an update check for the Raspi-Config script itself.
 About raspi-config: This is purely an informational dialog.
Raspi-Config Under the Hood
 If you’d like to view the Raspi-Config script source for intellectual curiosity’s sake, run the following
Terminal command:
nano /usr/bin/raspi-config
From inspection of the previous command you can draw the following conclusions:
 Raspi-Config is actually a Bash shell script (Linux script files typically have the file extension
.sh).
 The Raspi-Config.sh script is located in the Raspbian file system in the /usr/bin directory.
 Just for grins, I show you the partial contents of Raspi-Config.sh in Figure 5.10.
FIGURE 5.10 The Raspi-Config utility is actually the product of a Bash shell script.
Please note that as the Raspberry Pi Foundation adds new features to the Pi, they accordingly update
the Raspi-Config utility. Therefore, don’t be surprised if, after running an apt-get upgrade, you see a
new Raspi-Config option or a slightly changed menu organization.
Next Steps
At this point I hope you now have enough familiarity with the Linux command-line environment and
Raspi-Config utility that you can set up your Raspberry Pi and get into and out of the graphical shell.
 In the next chapter, I formally introduce the LXDE graphical environment; doing so should answer
some questions that probably popped into your head regarding this interface.
Chapter 6. 
Debian 
Linux 
Fundamentals—Graphical 
User
Interface
“Why run a graphical user interface (GUI, pronounced gooey) at all on a Raspberry Pi?” some
computer enthusiasts complain. They’ll tell you that the Pi’s hardware is slow enough as it is. Not to
mention that any self-respecting Linux user should be able to accomplish everything he needs by using
the command line.
 Yes, some Linux aficionados take user experience (UX) matters that seriously. And with the
Raspberry Pi they have a point to a certain extent. Shouldn’t we conserve as much of the Pi’s CPU
and GPU resources for actual work instead of for drawing fancy windows?
 Well, friends, the raw truth of the matter is that many computer users simply prefer the simplicity and
intuitiveness of a GUI. Most of us who have grown accustomed to the keyboard and mouse-based
navigational methods in OSs such as Microsoft Windows and OS X don’t want to bother learning
something new. Thus, the Foundation saw fit to include a graphical shell in the Raspbian Linux
distribution. In this chapter you learn how to start, configure, use, and exit the GUI shell.
LXDE—The Desktop Environment
The official Raspbian Linux distribution includes the Lightweight X11 Desktop Environment, or
simply LXDE. The main benefit of LXDE is that it was written to be as light on system resources as
possible, while at the same time offering the Linux user as much functionality as possible. I show you
the default LXDE Desktop in Raspberry Pi later on in this chapter, in Figure 6.1. Ignore the
annotations for now; the “Touring the LXDE Interface” section later in this chapter describes all of
the user interface parts.
FIGURE 6.1 LXDE is the default GUI shell in Raspbian.
Oh, in case you are wondering—there isn’t anything wrong with your video if you compared Figure
6.1 with your Pi’s desktop and thought, “Why don’t I see the blue background like Tim has?” I simply
swapped out the default white background to one that isn’t so harsh on my eyes. Take heart—you’ll
learn how to customize your LXDE environment soon enough.
 Understand that LXDE is by no means the only game in town when it comes to Linux GUI desktops in
general and system resource-friendly systems in particular. Some popular Linux GUIs include
 KDE, GNOME (pronounced guh-nome): These are the most popular GUI desktops on full
Linux installations. However, you will be hard-pressed to run these GUIs on the Pi because
they are too resource-intensive.
 XFCE: This is the main competitor of LXDE in terms of low-overhead Linux.
Note: X Factor
X-Windows, X Window System, and X11 are all synonyms that refer to the software
system and network protocol that makes GUI desktop environments available locally or
remotely on Linux systems. You can consider X the “engine” that powers the actual
Windowing systems such as GNOME, KDE, or LXDE. Many Linux fans use X generically
to refer to the GUI.
Starting and Exiting LXDE
 If you started your Pi the traditional way, which is to say, by booting to the terminal prompt, then you
can start LXDE by typing startx and pressing Enter on your keyboard.
 The most straightforward way to close your LXDE session and return to a shell prompt is to click the
Logout button on the LXPanel task bar. We’ll delve deeply into LXPanel as we move through the
chapter.
 Remember our good friend raspi-config? We can customize boot behavior using this tool.
Task: Using Raspi-Config to Adjust Boot Behavior
To configure your Raspberry Pi to boot directly to the graphical desktop, follow these
steps:
1. From a Raspberry Pi terminal prompt, type sudo raspi-config.
2. From the Raspi-Config main menu, arrow down to the boot_behaviour option and press
Enter.