## 漏洞分析
我们先看漏洞触发点：在/Application/Weibo/Controller/ShareController.class.php中第20行：
    public function doSendShare(){
            $aContent = I('post.content','','text');
            $aQuery = I('post.query','','text');
            parse_str($aQuery,$feed_data);
            if(empty($aContent)){
                $this->error(L('_ERROR_CONTENT_CANNOT_EMPTY_'));
            }
            if(!is_login()){
                $this->error(L('_ERROR_SHARE_PLEASE_FIRST_LOGIN_'));
            }
            $new_id = send_weibo($aContent, 'share', $feed_data,$feed_data['from']);
            $user = query_user(array('nickname'), is_login());
            $info =  D('Weibo/Share')->getInfo($feed_data);
可以看到这里的$aContent和$aQuery都是我们POST进来的，是我们可控的，然后可以看到将$aQuery这个变量做了一个parse_str()操作。
    parse_str($aQuery,$feed_data);
然后我们开始跟踪$feed_data这个变量。可以看到最后一行将$feed_data这个变量带入到了getInfo()这个函数中。我们追踪一下该函数：  
在/Application/Weibo/Model/ShareModel.class.php中：
    public function getInfo($param)
       {
           $info = array();
           if(!empty($param['app']) && !empty($param['model']) && !empty($param['method'])){
               $info = D($param['app'].'/'.$param['model'])->$param['method']($param['id']);
           }
           return $info;
       }
可以看到这里的形参$param就是我们传进来的$feed_data实参。
这里有一个操作很有意思：
    $info = D($param['app'].'/'.$param['model'])->$param['method']($param['id']);
其中$param['app']以及$param['model']，$param['method']，$param['id']都是我们可控的。  
其中这个D()函数是thinkphp中的一个实例化类型的函数，我们追踪一下：  
在/ThinkPHP/Common/functions.php中第616行：
    function D($name = '', $layer = '')
    {
        if (empty($name)) return new Think\Model;
        static $_model = array();
        $layer = $layer ? : C('DEFAULT_M_LAYER');
        if (isset($_model[$name . $layer]))
            return $_model[$name . $layer];
        $class = parse_res_name($name, $layer);
        if (class_exists($class)) {
            $model = new $class(basename($name));
        } elseif (false === strpos($name, '/')) {
            // 自动加载公共模块下面的模型
            if (!C('APP_USE_NAMESPACE')) {
                import('Common/' . $layer . '/' . $class);
            } else {
                $class = '\\Common\\' . $layer . '\\' . $name . $layer;
            }
            $model = class_exists($class) ? new $class($name) : new Think\Model($name);
        } else {
            \Think\Log::record('D方法实例化没找到模型类' . $class, Think\Log::NOTICE);
            $model = new Think\Model(basename($name));
        }
        $_model[$name . $layer] = $model;
        return $model;
    }
这个函数有两个参数，但是我们只能控制第一个参数的值，也就是形参$name的值。  
那么可以看到如果$layer为空的话，就取C('DEFAULT_M_LAYER')的值，那么这个值是多少呢？
在/ThinkPHP/Conf/convention.php中有:
    DEFAULT_M_LAYER'       =>  'Model', // 默认的模型层名称
那么就是取默认的值，也就是Model。  
那么意思就是说，我们只能实例化一个类名格式如xxxxxModel这样的类。  
然后调用该类的哪一个方法也是我们可控的，就连方法的第一个参数也是我们可控的。
如上文所说
    $info = D($param['app'].'/'.$param['model'])->$param['method']($param['id']);
其中$param['method']就是我们要调用的方法名称，$param['id']就是该方法的第一个参数。
好了，大概意思就是我们能够一个实例化一个名称为xxxxxxModel的类，并调用它其中的一个任意一个public方法。
刚开始以为这能够造成一个任意代码执行啥的..结果找了很久发现并不能实例化到任意代码执行的那个类。所以又得重新找其它类。然后找来找去找到了在/Application/Home/Model/FileModel.class.php中的FileModel类。  
这个类里面有一个文件上传函数：
    public function upload($files, $setting, $driver = 'Local', $config = null){
                    /* 上传文件 */
                    $setting['callback'] = array($this, 'isFile');
                    $Upload = new \Think\Upload($setting, $driver, $config);
                    $info   = $Upload->upload($files);
                    /* 设置文件保存位置 */
                    $this->_auto[] = array('location', 'Ftp' === $driver ? 1 : 0, self::MODEL_INSERT);
                    if($info){ //文件上传成功，记录文件信息
                            foreach ($info as $key => &$value) {
                                    /* 已经存在文件记录 */
                                    if(isset($value['id']) && is_numeric($value['id'])){
                                            continue;
                                    }
                                    /* 记录文件信息 */
                                    if($this->create($value) && ($id = $this->add())){
                                            $value['id'] = $id;
                                    } else {
                                            //TODO: 文件上传成功，但是记录文件信息失败，需记录日志
                                            unset($info[$key]);
                                    }
                            }
                            return $info; //文件上传成功
                    } else {
                            $this->error = $Upload->getError();
                            return false;
                    }
            }
那么意思是我们就能够调用这个文件上传函数了，我们看一下这个文件上传函数：  
其中上传文件驱动默认的是Local,也就是说一定是存储在本地的。  
然后$config没有进行赋值，默认是null.  
然后在第三行调用了upload()函数，我们追踪一下：
在/ThinkPHP/Library/Think/Upload.class.php中第128行：
    public function upload($files = '')
        {
            if ('' === $files) {
                $files = $_FILES;
            }
            if (empty($files)) {
                $this->error = '没有上传的文件！';
                return false;
            }
            /* 检测上传根目录 */
            if (!$this->uploader->checkRootPath()) {
                $this->error = $this->uploader->getError();
                return false;
            }
            /* 检查上传目录 */
            if (!$this->uploader->checkSavePath($this->savePath)) {
                $this->error = $this->uploader->getError();
                return false;
            }
            /* 逐个检测并上传文件 */
            $info = array();
            if (function_exists('finfo_open')) {
                $finfo = finfo_open(FILEINFO_MIME_TYPE);
            }
            // 对上传文件数组信息处理
            $files = $this->dealFiles($files);
            foreach ($files as $key => $file) {
                if (!isset($file['key'])) $file['key'] = $key;
                /* 通过扩展获取文件类型，可解决FLASH上传$FILES数组返回文件类型错误的问题 */
                if (isset($finfo)) {
                    $file['type'] = finfo_file($finfo, $file['tmp_name']);
                }
                /* 获取上传文件后缀，允许上传无后缀文件 */
                $file['ext'] = pathinfo($file['name'], PATHINFO_EXTENSION);
                /* 文件上传检测 */
                if (!$this->check($file)) {
                    continue;
                }
                /* 获取文件hash */
                if ($this->hash) {
                    $file['md5'] = md5_file($file['tmp_name']);
                    $file['sha1'] = sha1_file($file['tmp_name']);
                }
                /* 调用回调函数检测文件是否存在 */
                $data = call_user_func($this->callback, $file);
                if ($this->callback && $data) {
                    $drconfig = $this->driverConfig;
                    $fname = str_replace('http://' . $drconfig['domain'] . '/', '', $data['url']);
                    if (file_exists('.' . $data['path'])) {
                        $info[$key] = $data;
                        continue;
                    } elseif ($this->uploader->info($fname)) {
                        $info[$key] = $data;
                        continue;
                    } elseif ($this->removeTrash) {
                        call_user_func($this->removeTrash, $data); //删除垃圾据
                    }
                }
                /* 生成保存文件名 */
                $savename = $this->getSaveName($file);
                if (false == $savename) {
                    continue;
                } else {
                    $file['savename'] = $savename;
                    //$file['name'] = $savename;
                }
                /* 检测并创建子目录 */
                $subpath = $this->getSubPath($file['name']);
                if (false === $subpath) {
                    continue;
                } else {
                    $file['savepath'] = $this->savePath . $subpath;
                }
                /* 对图像文件进行严格检测 */
                $ext = strtolower($file['ext']);
                if (in_array($ext, array('gif', 'jpg', 'jpeg', 'bmp', 'png', 'swf'))) {
                    $imginfo = getimagesize($file['tmp_name']);
                    if (empty($imginfo) || ($ext == 'gif' && empty($imginfo['bits']))) {
                        $this->error = '非法图像文件！';
                        continue;
                    }
                }
                $file['rootPath'] = $this->config['rootPath'];
                $name = get_addon_class($this->driver);
                if (class_exists($name)) {
                    $class = new $name();
                    if (method_exists($class, 'uploadDealFile')) {
                        $class->uploadDealFile($file);
                    }
                }
                /* 保存文件 并记录保存成功的文件 */
                if ($this->uploader->save($file, $this->replace)) {
                    unset($file['error'], $file['tmp_name']);
                    $info[$key] = $file;
                } else {
                    $this->error = $this->uploader->getError();
                }
            }
            if (isset($finfo)) {
                finfo_close($finfo);