        k[0x2] = 0x6520;
        k[0x3] = 0x4355;
        for (i = 0; i 
    int main() {
        int buffer[11] = {
            0xAEE0FAE8, 0xFC3E4101, 0x167CAD92, 0x51EA6CBE,
            0x242A0100, 0x01511A1B, 0x514D6694, 0x2F5FBFEB,
            0x46D36398, 0x79EEE3F0, 0
        };
        int delta_1 = 0x75bcd15, delta_2 = 0x154cbf7;
        int sum_1 = 0x3ade68b1, sum_2 = 0x5eeddead;
        int v0;
        int v1;
        int k_1[4] = {0x494c, 0x6f76, 0x6520, 0x4355};
        int k_2[4] = {0x5354, 0x4f4d, 0x2074, 0x6561};
        int i;
        int j;
        // init
        for (i = 0; i = 2; i -= 2) {
            for (j = 0; j 
，改成5.3版本即可），找到`luaV_execute`函数；同时将apk中`x86-64`的`libluajava.so`拖入`ida`，通过字符串`'for'
limit must be a number`的交叉引用定位到`luaV_execute`函数，再在两个函数的switch块找对应的opcode。
这里找对应关系有一些小技巧，比如我先找出两个`switch`中的没有`if`判断的`case`块，各有5个，再比较这几个的代码，对应关系就容易找到；还有相同字符串常量出现的`case`块有对应关系；还有根据带符号的程序恢复出另一个程序的一些函数名，再在`luaV_execute`函数中找调用了相同函数的`case`块等等。
找了一些对应关系后就可以发现规律，再在解密出来的`luac`脚本中找到几个函数的位置，使用010 script修复opcode：
    char table[47];
    int i;
    for (i = 0; i  test.lua
得到lua脚本：
    -- Decompiled using luadec 2.2 rev: 895d923 for Lua 5.3 from https://github.com/viruscamp/luadec
    -- Command line: ./sth.luac 
    -- params : ...
    -- function num : 0 , upvalues : _ENV
    local base64 = {}
    if _G.bit32 then
      local extract = (_G.bit32).extract
    end
    if not extract then
      if _G.bit then
        local shl, shr, band = (_G.bit).lshift, (_G.bit).rshift, (_G.bit).band
        do
          extract = function(v, from, width)
      -- function num : 0_0 , upvalues : band, shr, shl
      return band(shr(v, from), shl(1, width) - 1)
    end
        end
      else
        do
          if _G._VERSION == "Lua 5.1" then
            extract = function(v, from, width)
      -- function num : 0_1
      local w = 0
      local flag = 2 ^ from
      for i = 0, width - 1 do
        local flag2 = flag + flag
        if flag > from ) & ((1 << width) - 1)\n\t\tend"))()
          end
          base64.makeencoder = function(s62, s63, spad)
      -- function num : 0_2 , upvalues : _ENV
      local encoder = {}
      for b64code,char in pairs({"B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", s62 or "+", s63 or "/", spad or "="; [0] = "A"}) do
        encoder[b64code] = char:byte()
      end
      return encoder
    end
          base64.makedecoder = function(s62, s63, spad)
      -- function num : 0_3 , upvalues : _ENV, base64
      local decoder = {}
      for b64code,charcode in pairs((base64.makeencoder)(s62, s63, spad)) do
        decoder[charcode] = b64code
      end