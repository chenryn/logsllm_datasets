    .text:0x804846C                 add     eax, 1B94h
    .text:0x8048471                 cmp     [ebp+arg_0], 5
    .text:0x8048475                 jnz     short loc_8048494
    .text:0x8048477                 lea     eax, (aBatman - 804A000h)[eax] ; "batman"
    .text:0x804847D                 push    eax
    .text:0x804847E                 push    [ebp+arg_4]
    .text:0x8048481                 call    strcmp
    .text:0x8048486                 add     esp, 8
    .text:0x8048489                 test    eax, eax
    .text:0x804848B                 jnz     short loc_8048494
    .text:0x804848D                 mov     eax, 1
    .text:0x8048492                 jmp     short locret_8048499
    .text:0x8048494 ; ---------------------------------------------------------------------------    .text:0x8048494
    .text:0x8048494 loc_8048494:                            ; CODE XREF: super_function+11j
    .text:0x8048494                                         ; super_function+27j
    .text:0x8048494                 mov     eax, 0
    .text:0x8048499
    .text:0x8048499 locret_8048499:                         ; CODE XREF: super_function+2Ej
    .text:0x8048499                 leave
    .text:0x804849A                 retn    8
    .text:0x804849A super_function  endp
###  提示
根据stdcall调用约定，当模拟过程开始时，栈应该如下图所示。我们看到在下图中，RET只是返回地址（可以为任意值）。  
###  解决方案
    from unicorn import *
    from unicorn.x86_const import *
    import struct
    def read(name):
        with open(name) as f:
            return f.read()
    def u32(data):
        return struct.unpack("I", data)[0]
    def p32(num):
        return struct.pack("I", num)
    mu = Uc (UC_ARCH_X86, UC_MODE_32)
    BASE = 0x08048000
    STACK_ADDR = 0x0
    STACK_SIZE = 1024*1024
    mu.mem_map(BASE, 1024*1024)
    mu.mem_map(STACK_ADDR, STACK_SIZE)
    mu.mem_write(BASE, read("./function"))
    r_esp = STACK_ADDR + (STACK_SIZE/2)     #ESP points to this address at function call
    STRING_ADDR = 0x0
    mu.mem_write(STRING_ADDR, "batmanx00") #write "batman" somewhere. We have choosen an address 0x0 which belongs to the stack.
    mu.reg_write(UC_X86_REG_ESP, r_esp)     #set ESP
    mu.mem_write(r_esp+4, p32(5))           #set the first argument. It is integer 5
    mu.mem_write(r_esp+8, p32(STRING_ADDR)) #set the second argument. This is a pointer to the string "batman"
    mu.emu_start(0x8048464, 0x804849A)      #start emulation from the beginning of super_function, end at RET instruction
    return_value = mu.reg_read(UC_X86_REG_EAX)
    print "The returned value is: %d" % return_value
    a@x:~/Desktop/unicorn_engine_lessons$ python solve_task3.py 
    The returned value is: 1
##
## 任务4
这个任务与任务1类似，但不同之处就在于这里的架构不再是x86，而是低字节序的ARM32。
    a@x:~/Desktop/unicorn_engine_lessons$ file task4
    task4: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=3dbf508680ba3d023d3422025954311e1d8fb4a1, not stripped
二进制文件下载地址为： 。  
参考这篇资料可能会有所帮助：
。
###  正确答案
2635833876
###  提示
1、函数的第一个参数在R0 (UC_ARM_REG_R0)中传递；  
2、返回值也在R0中；  
3、第二个参数在R1 (UC_ARM_REG_R1)中传递；  
4、我们可以通过这种方式来得到ARM32架构下的Unicorn实例：mu = Uc (UC_ARCH_ARM,
UC_MODE_LITTLE_ENDIAN)。
###  解决方案
    from unicorn import *
    from unicorn.arm_const import *
    import struct
    def read(name):
        with open(name) as f:
            return f.read()
    def u32(data):
        return struct.unpack("I", data)[0]
    def p32(num):
        return struct.pack("I", num)
    mu = Uc (UC_ARCH_ARM, UC_MODE_LITTLE_ENDIAN)
    BASE = 0x10000
    STACK_ADDR = 0x300000
    STACK_SIZE = 1024*1024
    mu.mem_map(BASE, 1024*1024)
    mu.mem_map(STACK_ADDR, STACK_SIZE)
    mu.mem_write(BASE, read("./task4"))
    mu.reg_write(UC_ARM_REG_SP, STACK_ADDR + STACK_SIZE/2)
    instructions_skip_list = []
    CCC_ENTRY = 0x000104D0
    CCC_END = 0x00010580
    stack = []                                          # Stack for storing the arguments
    d = {}                                              # Dictionary that holds return values for given function arguments 
    def hook_code(mu, address, size, user_data):  
        #print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))
        if address == CCC_ENTRY:                        # Are we at the beginning of ccc function?
            arg0 = mu.reg_read(UC_ARM_REG_R0)           # Read the first argument. it is passed by R0
            if arg0 in d:                               # Check whether return value for this function is already saved.
                ret = d[arg0]
                mu.reg_write(UC_ARM_REG_R0, ret)        # Set return value in R0
                mu.reg_write(UC_ARM_REG_PC, 0x105BC)    # Set PC to point at "BX LR" instruction. We want to return from fibonacci function
            else:
                stack.append(arg0)                      # If return value is not saved for this argument, add it to stack.
        elif address == CCC_END:
            arg0 = stack.pop()                          # We know arguments when exiting the function
            ret = mu.reg_read(UC_ARM_REG_R0)            # Read the return value (R0)
            d[arg0] = ret                               # Remember the return value for this argument
    mu.hook_add(UC_HOOK_CODE, hook_code)
    mu.emu_start(0x00010584, 0x000105A8)
    return_value = mu.reg_read(UC_ARM_REG_R1)           # We end the emulation at printf("%dn", ccc(x)).
    print "The return value is %d" % return_value
## 参考内容
`from unicorn import *` —— 加载主Unicorn库，它包含函数和基本Constant。  
`from unicorn.x86_const import *` —— 加载特定于x86和x86-64架构的Constant。  
Unicorn模块中的所有Const如下：
    UC_API_MAJOR                UC_ERR_VERSION              UC_MEM_READ                 UC_PROT_ALL
    UC_API_MINOR                UC_ERR_WRITE_PROT           UC_MEM_READ_AFTER           UC_PROT_EXEC
    UC_ARCH_ARM                 UC_ERR_WRITE_UNALIGNED      UC_MEM_READ_PROT            UC_PROT_NONE
    UC_ARCH_ARM64               UC_ERR_WRITE_UNMAPPED       UC_MEM_READ_UNMAPPED        UC_PROT_READ
    UC_ARCH_M68K                UC_HOOK_BLOCK               UC_MEM_WRITE                UC_PROT_WRITE
    UC_ARCH_MAX                 UC_HOOK_CODE                UC_MEM_WRITE_PROT           UC_QUERY_MODE
    UC_ARCH_MIPS                UC_HOOK_INSN                UC_MEM_WRITE_UNMAPPED       UC_QUERY_PAGE_SIZE
    UC_ARCH_PPC                 UC_HOOK_INTR                UC_MILISECOND_SCALE         UC_SECOND_SCALE
    UC_ARCH_SPARC               UC_HOOK_MEM_FETCH           UC_MODE_16                  UC_VERSION_EXTRA
    UC_ARCH_X86                 UC_HOOK_MEM_FETCH_INVALID   UC_MODE_32                  UC_VERSION_MAJOR
    UC_ERR_ARCH                 UC_HOOK_MEM_FETCH_PROT      UC_MODE_64                  UC_VERSION_MINOR
    UC_ERR_ARG                  UC_HOOK_MEM_FETCH_UNMAPPED  UC_MODE_ARM                 Uc
    UC_ERR_EXCEPTION            UC_HOOK_MEM_INVALID         UC_MODE_BIG_ENDIAN          UcError
    UC_ERR_FETCH_PROT           UC_HOOK_MEM_PROT            UC_MODE_LITTLE_ENDIAN       arm64_const
    UC_ERR_FETCH_UNALIGNED      UC_HOOK_MEM_READ            UC_MODE_MCLASS              arm_const
    UC_ERR_FETCH_UNMAPPED       UC_HOOK_MEM_READ_AFTER      UC_MODE_MICRO               debug
    UC_ERR_HANDLE               UC_HOOK_MEM_READ_INVALID    UC_MODE_MIPS3               m68k_const
    UC_ERR_HOOK                 UC_HOOK_MEM_READ_PROT       UC_MODE_MIPS32              mips_const
    UC_ERR_HOOK_EXIST           UC_HOOK_MEM_READ_UNMAPPED   UC_MODE_MIPS32R6            sparc_const
    UC_ERR_INSN_INVALID         UC_HOOK_MEM_UNMAPPED        UC_MODE_MIPS64              uc_arch_supported
    UC_ERR_MAP                  UC_HOOK_MEM_VALID           UC_MODE_PPC32               uc_version
    UC_ERR_MODE                 UC_HOOK_MEM_WRITE           UC_MODE_PPC64               unicorn
    UC_ERR_NOMEM                UC_HOOK_MEM_WRITE_INVALID   UC_MODE_QPX                 unicorn_const
    UC_ERR_OK                   UC_HOOK_MEM_WRITE_PROT      UC_MODE_SPARC32             version_bind
    UC_ERR_READ_PROT            UC_HOOK_MEM_WRITE_UNMAPPED  UC_MODE_SPARC64             x86_const
    UC_ERR_READ_UNALIGNED       UC_MEM_FETCH                UC_MODE_THUMB               
    UC_ERR_READ_UNMAPPED        UC_MEM_FETCH_PROT           UC_MODE_V8                  
    UC_ERR_RESOURCE             UC_MEM_FETCH_UNMAPPED       UC_MODE_V9
来自unicorn.x86_const的一些Constant示例：  
`UC_X86_REG_EAX`  
`UC_X86_REG_RIP`  
`UC_X86_REG_RAX`  
`mu = Uc(arch, mode)` —— 获得一个Uc类的实例，在这里可以指定架构。  
举例来说：  
`mu = Uc(UC_ARCH_X86, UC_MODE_64)` 获得一个x86-64架构的Uc实例。  
`mu = Uc(UC_ARCH_X86, UC_MODE_32)` 获得一个x86-32架构的Uc实例。  
`mu.mem_map(ADDRESS, 4096)` 映射一个内存区域。  
`mu.mem_write(ADDRESS, DATA)` 将数据写入内存。  
`tmp = mu.mem_read(ADDRESS, SIZE)` 从内存中读取数据。  
`mu.reg_write(UC_X86_REG_ECX, 0x0)` 将寄存器重新赋值。  
`r_esp = mu.reg_read(UC_X86_REG_ESP)` 读取寄存器的值。  
`mu.emu_start(ADDRESS_START, ADDRESS_END)` 开始模拟。  
指令跟踪：
    def hook_code(mu, address, size, user_data):  
        print('>>> Tracing instruction at 0x%x, instruction size = 0x%x' %(address, size))  
    mu.hook_add(UC_HOOK_CODE, hook_code)
这段代码添加了一个钩子。我们定义了函数hook_code，在模拟每个指令之前调用，该函数需要以下参数：  
1、Uc实例  
2、指令的地址  
3、指令的大小  
4、用户数据（我们可以在hook_add()的可选参数中传递这个值）
##
## 参考资料
  1. 关于Unicorn Engine的基本介绍：  
  2. Oh look, there are bindings for many languages：  
  3. Unicorn Engine参考：  
  4. 官方UE教程：  