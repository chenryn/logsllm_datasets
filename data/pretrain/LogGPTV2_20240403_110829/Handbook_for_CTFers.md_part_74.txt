530
 login vith USER and
cify the
292.168.4
1591277
4.217.142-192.168.43.159FTP80Res
Fig, 9.18 Tshark show FTP protocol
wireshark.org/docs/man-pages/tshark.html. See Fig. 9.18 for an example of filtering
the FTP protocol in the same traffic packet as the previous example.
9.4.1.2  Common Operations in Traffic Analysis
n o uos pa o ma on no soe n sss, s,s
packets, such as which protocols are included, which IP addresses participated in the
session, etc. Figures 9.19 and 9.20 show the protocol hierarchy statistics and session
statistics respectively. These two functions can help us quickly locate the traffic we
need to analyze because traffic analysis in CTF often has a lot of noise traffic, and the
LAN or a few hosts, so by viewing the traffc information, we can greatly save the
traffic required by the challenge author for the challenge is usually obtained in the
time of finding the traffic to analyze.
The most widely used transport layer protocol in computer networks is TCP, a
connection-oriented protocol that allows both parties to ensure that the transmission
is transparent and that they only care about the data they get. However, in practice,
due to the presence of MTUs, TCP traffic can be sliced into many small packets,
making it dificult to analyze. To address this situation, Wireshark provides a Follow
TCP Stream feature, which allows you to get all the data transmitted between two
parties in a TCP session by selecting a datagram and right-clicking *Follow TCP
Stream".
---
## Page 653
9.4 Forensic Techniques
I#9
000
17953
Ethernet
00.0
17963
100.0
16633916
 Intemet Protocol Version 6
210010
$520
 User Datagrem Protocol
424
Uink-local Multicast Name Ret
21194
Transmission Control Protocol
col vt
0°0
0.2
3
32
0.0
0.0
96
98.7
17726
2.1
1012
 User Datiagram Pn
otocol
133
0.0
1064
354540
Simple Serrice Discove
aeg autN SOrBa
0.0
0.1
12
3
0.0
0.0
2096
Link-local Multicast Neme Resol
0.0
50
Trenst
08.0
17585
95.1
15991818
44
Secure Sockets Layef
6°11
0.0
2136
076
5642468
FTP Duta
29435
Fle Transfer Protocol(FTP)
80
0.0
2068
Date
21
0000
ntenet Group Mangement:Proti
0S
poid uognpsag sseuppy
Intemet Contrel Message Pretocol
4
392
Fig, 9.19 Protocol hierarchy statistics
Fig, 9.20 Session statistics respectively
For common protocols such as HTTP, Wireshark provides an object export
function (in the “File° menu), which makes it easy to extract information such as
files sent during transmission.
Sometimes the traffic packets that need to be analyzed are encrypted traffic from
the SSL protocol, but if the SSL key logs can be obtained from other locations in the
challenge, Wireshark can be used to try to decrypt the traffic. The SSL key logs
which can be parsed by Wireshark are like the following form:
CLIENT_RAND0M cbdf25c6b2259a0b380b735427629e94abe5b070634c70bd9efd
7ee76c0b9dc06782ad3aa59
d6fd11fcf5536f331a968b
38c43831971a06e9a20eac27075d559799769ce5d1a3ea85211c981d8e67f75
CLIENT_RAND0M 247f33720065429dc7e017e51f8b904309685ec868688296011c
d3c53e5bafa75a 921ffbf7bf
e6d8c393000f34eab6dc20486e620bdc90f21b6037c3df5592ef91fffca1dc8
215699687a98febd45a4ce0
---
## Page 654
642
9Misc
Secure Sockets Layer
RSA keys list
Edit....
SSL debug file
Browse....
 Reassemble SSL records spanning multiple TCP segments
 Reassemble SSL Application Data spanning multiple SSL records
 Message Authentication Code (MAC), ignore *mac falled“
Pre-Shared-Key
(Pre)-Master-Secret liog filename
/Users/acdxvfsvd/Documents/secret.txt
Browse...
Fig, 9.21 Fill in the path of the key file
CLIENr_RAND0M 2000cef83c759e5e0c8bbdbd0a05388df25014fc32008610577c
b6e0ab7a0b793485696c02ab7743c1a9fda0039b0f 7ac05205cf209d5855261
cd92d5fa3e3e 4c03f7a409
CLIENT_RAND0M c5dd1755eff2a51b5d4a4990eca2cc201d9b637cd8ad217566f2
ecel8897dbe43a116b73627
1194e19d6f60 c3a065698
b99629875b03d6754597349612e6e7468ef66dcf8f277f9e84396ae55a1b722
48019df1608ca3962f617252
CLIENr_RAND0M 11ae1440556a6e740fd9a18d0264cd4c49749355dcf7093daad9
ccf760cd787de3cc7e1dcd668ala3d336170334f879b061cec81131fff4850c
65030a21fcfe 219786b326
e5c6ea15d907be8a36638b7
Once this form of key log is obtained, we can open Wireshark's preferences,
select the SSL protocol in the “Protocols° option, and then ill in the path of the key
file in the *(Pre)-Master-Secret Log Filename*" option (see Fig. 9.21), and then you
can decrypt part of the SSL traffic.
Due to the complexity of network protocols, there are far more places to hide data
than just the normal transmission traffic. Therefore, when analyzing network trafic
packets, if you cannot find a breakthrough in the data transmitted in the normal way,
you need to focus on some protocols that seem to be anomalous in the traffic packets,
and carefully examine each field to see if there are any evidence of hidden data.
Figures 9.22 and 9.23 are examples of using the length of the ICMP datagram to hide
information in a CTF competition.
---
## Page 655
9.4 Forensic Techniques
9
Destination
192.168.11.5
IOMP
Prot
nothlnfo
129 Echo （ping)request
192.168.11.3
IOMP
129Echo （ping）reply
192.168.11.5
IOHP
143
Echo （ping)
192.168.11.3
IOHP
143 Echo （ping）reply
)request
192.168.11.5
IOMP
91Echo （ping)
91
Echo (ping)
IOMP
request
192.168.11.5
192.168.11.3
IOMP
141
Echo （ping)request
Ada（
192.168.11.3
IOMP
141
Echo （ping)
192.168.11.5
IOMP
153Echo（ping)request
Ada（
192.168.11.3
IOMP
151 Echo（ping)request
153
Echo (ping)reply
192.168.11.5
IOMP
192.168.11.3
IOMP
151 Echo (ping)reply
Fig, 9.22 ICMP datagram
Sequence number (BE): 499 (exe1f3)
Sequence number (LE): 622e9 (exf3e1)
[Response_frame:_2]
Data (87 bytes)
Data: 6162636465666768696a6b6c6d6e6f787172737475767761.
[Length: 87]
Fig, 9.23 ICMP hide information
14 0,615968
3.18-1
0.624868
u58
in
15 0.632999
0.10.1
uS8
15UR
SNTE
17 8.648867
130.6
48867
3.18.1
3.10,1
IS8
u58
35 UR8_INTERRUPT
35 UR8
INTER
19 8.656878
3.10.1
u58
35 UR8
99999'082
3.10,1
35
21 0.672893
.14
4
8.
8.
3.10.1
hot
u58
IS8
5
5
R
50.7
1.10.1
s8
25 0,712867
Frane 8: 35 bytes on
3.10,1
host
35
Fig, 9.24 USB traffic packets
9.4.1.3  Analysis of Special Types of Traffic Packets
There are some special kinds of trafic analysis in CTF, and the trafic packets
provided in the challenge are not network traffic, but other types of traffic. In this
section, we will introduce how to analyze USB keyboard and mouse traffic.
The USB traffic packets are shown as Fig. 9.24 in Wireshark. In CTF, we only
need to focus on the USB Capture Data, which is the acquired USB data that can be
used to determine different USB devices based on the form of the data. Detailed
documentation on USB data is available on the USB website, such as https://www.
---
## Page 656
644
9 Misc
Table 9.1 keyboard
datagram
Byte index
Mcaning
0
Modifying keys combinations)
1
OEM retention
27
Key codes
Table 9.2 The I
Number of bits
Meaning
byte 0
0
Let Curl key
1
Lef Shift Key
2
Lef Alt Key
Lef Win (GUI) key
4
5
Right Shift Key
Right Alt Key
7
Righa Win (GUI) key
Table 9.3 Mouse datagram
Byte
index
Meaning
0
Pressed keys, bit O for the left button, bit 1 for the right button and bit 2 for the middle
butlon
1
Length of X-axis travel
2
Length of Y-axis travel
usb.org/sites/default/files/documents/hut1_12v2.pdf and https://usb.org/sites/
default/files/.documents/hid1_11.pdf
The USB keyboard datagram has 8 bytes at a time, as defined in Table 9.1.
Since keys are normally pressed one at a time in normal use, only the key
combination status of byte 0 and the key code of byte 2 need to be taken into
account. The meaning of the 8-bit key combination of byte 0 is shown in Table 9.2.
The USB mouse datagram is 3 bytes, see Table 9.3 for more details.
See Fig. 9.25 (from the oficial USB documentation) for a partial mapping of the
keyboard keys, the complete mapping can be found on the oficial USB website.
For a USB traffic packet, the Tshark tool can easily retrieve the following pure
data fields.
rqepdes qsn a- sptag- Eudeod aueuaty x- xzeus1
After geing the data, according to the previous meaning, using languages such 
as Python, you can write scripts to restore the information, get the information and
analyze it further.
---
## Page 657
9.4 Forensic Techniques
645
Usage ID Usage ID
Usage Name
Typlcal AT-101
PC-Mac UNI
AT
Boot
(200)
(Hex)
00
Resened (no event indicated)9
N/A
4
√ 4/101/104
1
01
Keyboard ErorRollOveri
NA
V
√
√ /101/104
2
02
Keyboard POSTFai9
NA
√
√ /101/104
03
Keyboard ErrorUndefined9
NA
 /101/104
04
Keyboard a and A4
31
4
√ t/101/104
05
B pue q pueoq/layi
50
√ 4/101/104
06
Keyboard c and C4
48
V
√ t/101/104
07
C pue p pueoq/ayi
33
√ 4/101/104
08
Keyboard e and E
19
√ 4/101/104
9
09
Keyboand g and G
Keyboard f and F
34
35