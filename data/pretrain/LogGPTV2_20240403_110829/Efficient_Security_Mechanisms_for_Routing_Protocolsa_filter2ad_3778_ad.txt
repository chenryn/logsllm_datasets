m
(cid:229)
i=1
(‘i (cid:0) 1).
The signer computes the checksum of the signature
chains by summing all the values that it signed with the sig-
m
(cid:229)
i=1
nature chains: s =
Mi. The signer splits the checksum
into m0 checksum chunks. The checksum chunks are en-
coded in reverse in the checksum chains, compared to how
the message chunks are encoded n the signature chains. For
checksum chunk si, the signer adds the value ci;‘0(cid:0)si to the
signature.
Rohatgi [37] proposes a concrete instantiation to sign
an 80-bit message: 20 signature chains of length 16, and
3 checksum chains of length 16. Zhang [42] presents a sim-
ilar mechanism, except that he does not bring the multiple
hash chains together into heads. As a result, MW-chains
have an advantage in reduced storage overhead.
In retrospect,
it may seem that the development of
hash tree chains was unnecessary: a node could use an
MW-chain to sign its node identi(cid:2)er, thus preventing a node
from directly replaying its authenticator. Unfortunately,
using MW-chains in this context is not secure, since an
attacker receiving several advertisements of equal metric
can recover many values of the signature and checksum
chains. For example, we performed a Monte Carlo simula-
tion for a scenario in which n = 32640 nodes are represented
using 5 signature chains of length 8, and 2 checksum chains
of length 4, and each attacker hears 3 advertisements. In this
case, an attacker was able to forge a valid signature with
a probability of 0:196, in contrast to the hash tree chain,
where the probability of successful forgery was 3:6(cid:2) 10(cid:0)4.
Generation
Usage
PSfrag replacements
vi
S (h4;i)
vi(cid:0)1
h0;i = H[vi]
h2;i = H[h1;i]
h4;i = H[h3;i]
h1;i = H[h0;i]
h3;i = H[h2;i]
Figure 7: One step in a skiplist with k = 4
4.7. Skiplists for Preventing Denial-of-Service Attacks
and for Faster Hash Chain Authentication
In Section 4.5, we described a mechanism that allows each
node to verify a hash chain without needing to perform a
large number of hash functions. However, the amount of
effort required to verify an element is O(k + lgs), where k
is the length of the hash chain and s is the number of hash
chains. The network overhead is O(lgs), and initial com-
putation cost is O(ks). If the maximum metric is large, this
approach may be prohibitively expensive, either in terms of
initial computation cost or for element veri(cid:2)cation.
In this section, we describe an approach which, when
combined with the Merkle tree authentication described in
Section 4.5, has O(c cpk +lgs) veri(cid:2)cation cost and O(s cpk)
generation cost, at the cost of O(c + lgs) overhead, where c
is any positive integer. We achieve this by creating a skiplist,
which is a chain that, when followed for one step, skips over
many steps in a virtual hash chain. In the most basic version,
a skiplist is pk long, and each step in a skiplist represents
pk steps in a hash chain, which represents c = 2. In general,
skiplists can be embedded inside skiplists, allowing values
of c > 2. Skiplists can also be used in protocols such as
TESLA [34, 35] and BiBa [33], to improve the ef(cid:2)ciency of
following long hash chains.
Each skiplist is represented by an MW-chain capable
of signing enough bits to ensure security (for example, 80
bits). Each step in this MW-chain represents m steps in a
virtual hash chain. To generate the hash chain (or skiplist)
associated with this step, a new head is chosen by hash-
ing the head of this step. The anchor of this hash chain (or
skiplist) is computed, and that step in the MW-chain is used
to sign this new anchor. For example, if the head of one step
in a skiplist is vi, a node forms h0;i = H[vi], computes the
corresponding anchor (for example hm;i = Hm(h0;i), if this
is the last level of skiplists). It signs this anchor using vi, as
described in Section 4.6.
More concretely, we consider the case in which there
is one level of skiplist, and each step in the skiplist corre-
sponds to m steps in the virtual hash chain. If the MW-chain
is n steps long, then the virtual hash chain is mn steps
long. The leftmost element in this virtual hash chain is
vn, from which all chain elements can be derived. An al-
ternative representation is the pair (h0;n;Svn(hm;n)), where
Svn(hm;n) represents hm;n signed using vn. The next ele-
ment is the pair (h1;n;Svn (hm;n)). The element at position
(m + 1) from the left is (h1;n(cid:0)1;Svn(cid:0)1(hm;n(cid:0)1)).
In gen-
eral, the xth element from the left is represented by the pair
(hx mod n;y;Svy (hm;y)), where y = n(cid:0)b x
mc.
To verify a hash element, a node follows the hash chain
to the anchor, and veri(cid:2)es the signature of the anchor. If
there are multiple levels of skiplists (that is, if c > 2), the
signature is veri(cid:2)ed recursively: that is, the veri(cid:2)cation of
the signature requires the veri(cid:2)cation of a signature in a
higher level chain. For example, if there are two levels
of skiplists (c = 3), then the hash chain is followed to its
Table 1: Our mechanisms compared with public key equivalents
Initialization Computation
Per-Hop Computation
Overhead (Bits)
(M-m)(cid:1)120(cid:181)s
.235(cid:181)s +m(cid:1)401(cid:181)s
h(cid:1)7669(cid:181)s +m(cid:1)401(cid:181)s
3(cid:181)s
401(cid:181)s
1024m + 80mlg2 Nh
1680
1040m
1600
1024
1920
Hash tree chain
RSA Equivalent (CPU Optimized)
RSA Equivalent (Minimal Overhead)
Tree Authenticated One-Way Chains
RSA Equivalent
Skiplist
RSA Equivalent
M(cid:1)120(cid:181)s
.235(cid:181)s
7669(cid:181)s
1.5(cid:181)s
7669(cid:181)s
(M/a)(cid:1)120(cid:181)s + a(cid:1)step
(M/a)(cid:1)7669(cid:181)s + a(cid:1)step
(M/a)(cid:1)120(cid:181)s + 2a(cid:1)step
(M/a)(cid:1)1024
Notation: M is the maximum metric, m is the metric at a hop, n is the total network size, h is the average number of neighbors, a is the
number of hops covered by one skiplist hop, and step is the cost of one hash chain step. RSA timings were performed with 1024-bit keys,
using OpenSSL [29]. Hash tree chain performance is based on a network of size 32640, roughly the number of ASes in the Internet, and
uses hash tree of size 26, with 3 values corresponding to each node. CPU optimized RSA equivalent combines all routing table elements
using a Merkle tree, amortizing signature costs across all routing table elements. Tree-authenticated one-way chain is of size 220, and the
calculation of initialization cost is amortized over all elements.
401(cid:181)s + 2a(cid:1)step
anchor, the second level skiplist signature is checked by
following that skiplist to its anchor, and the anchor of that
skiplist is veri(cid:2)ed by verifying the signature in the top-level
skiplist.
Skiplists can be generalized to allow skipping over any
type of one-way chain that is formed from a single arbitrary
head and can be veri(cid:2)ed using a single anchor. For example,
hash tree chains can be used in conjunction with skiplists.
This generalized skiplist is generated in the same way as
skiplists over hash chains: at the lowest level of skiplist, the
head of one step is used to seed the head of the one-way
chain, and the anchor of that one-way chain is signed by
that step in the skiplist.
Another possible application of such skiplists is to
choose the top-level skiplist to represent k steps, where k is
the maximum diameter of the network. This would reduce
the initial cost of setting up a Merkle tree (as described in
Section 4.5) from O(s cpk) to O(s), where s is the number of
sequence numbers covered by the tree. This increases over-
head and computation cost by O(1) for each update sent and
veri(cid:2)ed, respectively.
4.8. Ef(cid:2)ciency Evaluation
To evaluate the ef(cid:2)ciency of our mechanisms, we imple-
mented generation and veri(cid:2)cation procedures for the three
mechanisms described in this section. For ef(cid:2)ciency, our
hash function is based on the Rijndael block cipher [4] in
the Matyas, Meyer, and Oseas construction [24], with a
128-bit key and a 128- or 192-bit block size, depending on
the number of bits to be hashed. With a single block to be
hashed, the hash output is the following (with an initializa-
tion vector (IV) as the initial key K): H(x) = EK(x) (cid:8) x.
We built our implementation on top of Gladman’s imple-
mentation [9]. We implemented hash tree chains with 64
leaves, which represents a 64-node network with a single
element per node, or a 2016-node network, when using two
elements per node. Our skiplist was based on Rohatgi’s
construction [37] of 20 signature chains of length 16 and
3 checksum chains of length 16.
We ran our tests on a laptop with a Mobile Pentium
4 CPU running at 1.6GHz. Verifying a node in a tree-
authenticated one-way chain took 3.08(cid:181)s on average, com-
puting one step in a hash tree chain took 120(cid:181)s on aver-
age, and computing one step of an MW-chain took 145(cid:181)s
on average. As a result, in a network with maximum metric
16 using skiplists of length 4, the worst case veri(cid:2)cation
takes just over one millisecond. Another advantage of our
approach is that most of the computation needed for veri(cid:2)-
cation can be used for generation; in particular, the worst
case authentication plus veri(cid:2)cation operation takes just
480(cid:181)s more than veri(cid:2)cation alone.
To compare these results to the ef(cid:2)ciency of public-key
cryptography, we analyzed the functionality provided by
each mechanism. A summary of our analysis is shown in
Table 1. The tree-authenticated one-way chain essentially
provides a signature: given a public key (the root value),
private values can be authenticated. Tree-authenticated one-
way chains are signi(cid:2)cantly more ef(cid:2)cient than existing ap-
proaches [41] that authenticate each anchor using RSA.
A hash tree chain uses cryptographic mechanisms to en-
sure that only nodes authorized to advertise a particular
metric can advertise that metric. In particular, only nodes
that hear an advertisement with metric m (or lower) can ad-
vertise metric m + 1. A public-key approach to this prob-
lem can be adapted from the solution proposed by Kent
et al. [18]: each node signs the list of nodes that are al-
lowed to advertise a particular metric. Each routing table
element includes a signature chain, with a length equal to
the metric, which shows the delegation of authority for ad-
vertising particular metrics. A node verifying this chain
would need to verify a number of signatures equal to the
distance to the destination. In addition, each node needs to
PSfrag replacements
New Anchor
Signed By
MW-Chain Element
Generation
Usage
Old Anchor
Figure 8: Bootstrapping a new hash chain. The new anchor is signed using the MW-chain element at the far left
side of the old chain.
New Root
PSfrag replacements
Old Tree
Signs
MW-Chain Element
Figure 9: Bootstrapping a new tree-authenticated one-way chain. The new root is signed using the MW-chain
element embedded in the old tree.
run a secure neighbor discovery protocol in order to know
which neighbors to authorize. Though such a protocol may
be easy to design in a wired network or a (cid:2)xed wireless
network, where a list of potential neighbors is easily gener-
ated, it could be prohibitively expensive in a mobile wireless
environment such as an ad hoc network.
Finally, an alternative to skiplists is signatures. For ex-
ample, in a network with maximum metric 16 and one step
in a skiplist is used to skip over 4 elements, a sender can
sign not only the anchor (metric 16 authenticator), it can
also sign metric 4, 8, and 12 authenticators. Naturally,
when a node sends an advertisement with metric 5, it will
not include the signature of the metric 4 authenticator,
and in general, a node advertising metric n will not in-
clude signatures on any metric m authenticators for m < n.
Although skiplists may be slower than public key mecha-
nisms on general-purpose processors, they have four advan-
tages: (cid:2)rst, they may require less network overhead for long
chains; second, signature generation overhead is reduced,
especially at the sender; third, they are easier to implement
in hardware; and fourth, veri(cid:2)cation is easily parallelizable.
4.9. Bootstrapping New Chains and Trees
As time progresses, the elements of one-way hash chains or
hash trees eventually run out and the node needs to securely
distribute the anchor of a new chain or the root of a new
tree. Recall that the security of our schemes relies on the
secure distribution of these initial values, as they are used
to authenticate all subsequent values. One solution to this
problem is to compute a chain that is long enough to out-
last the network; unfortunately, such a computation may be
relatively expensive.
An alternative solution is to use the old chain or tree to
authenticate the new anchor or root. To achieve this, we
place a single MW-chain element at on the left-hand side of
each hash chain or hash tree chain, or as the last element of
Figure 10: The Big Picture. Each leaf (except the bottom leaf) of the hash tree is identical to the top leaf, but the
structure is omitted for clarity.
a tree-authenticated one-way chain (as used in Section 4.5).
When a node comes close to running out of its current chain,
it generates a new chain, and uses the MW-chain element
from its old chain to form a one-time signature on the an-
chor of the newly generated chain. It then distributes this
new anchor by piggybacking it on several updates around
the time the old chain expires. Figure 8 shows the use of
a skiplist element in a hash chain for authenticating a new
hash chain anchor, and Figure 9 shows the use of a skiplist
element in a tree-authenticated one-way chain for authenti-
cating a new tree-authenticated one-way chain root.
This approach can be extended in several ways: each
chain could contain several MW-chain elements to allow
nodes to more easily reenter the network should they miss
an entire chain of another node. Furthermore, a node may
choose to piggyback a newly authenticated anchor often,
when it (cid:2)rst switches to the new chain, and progressively
less often as the node consumes that chain. For example, the
node may distribute the authentication information when-
ever the chain element used is a power of 2 from the anchor;
this approach reduces overhead while still allowing nodes to
rejoin the network after an extended time away.
4.10. Combining Our Primitives
Two of our primitives (hash tree chains described in
Section 4.4 and tree-authenticated one-way chains in
Section 4.5) protect against speci(cid:2)c attacks (namely, same-
metric fraud and the rushing attack); in addition, we provide
skiplists (Section 4.6) for more ef(cid:2)cient traversal of long
hash chains. In order to prevent both of the above attacks,
we can combine our approaches as shown in Figure 10. At
the highest level, shown on the right side of the (cid:2)gure, we
use a tree-authenticated one-way chain, which is a Merkle
tree. The root of this Merkle tree is bootstrapped on each
node. Each leaf in the Merkle tree is the anchor of an-
other chain, with each leaf representing a single sequence
number. In this case, the chains are skiplists built on top of
hash tree chains; the chains could also be implemented as
hash tree chains, or, if same-metric fraud is not a concern,
as hash chains. Finally, at the bottom of the (cid:2)gure is an
MW-chain element, which is later used for authenticating
the root of the next tree-authenticated one-way chain.
5. A Mechanism for Securing
Path Vector Protocols
5.1. Overview of Path Vector Routing
Path vector protocols are similar to distance vector proto-
cols, except that in place of the metric, each routing update
includes a list of routers (or, in the case of BGP, a list of
Autonomous Systems) on the route. By default, a path vec-
tor protocol will choose a route with the shortest recorded
path; policies may also specify speci(cid:2)c routers to prefer or
to avoid. As a result, a node may wish to authenticate each
hop that the routing update has traversed as recorded in the
path, and to assure that no hops were removed from that
recorded path.
A traditional way to perform this authentication is to
have each node insert an authenticator in the packet, and
to have the recipient individually verify each authentica-
tor when the packet is received. This approach requires
the network overhead of carrying a message authentication