tion but differ in the varied property. This approach can
generalize to compose n binary variations using n + 1
variants. More clever approaches may be able to estab-
lish the orthogonality of certain variations to allow
fewer variants without sacrificing normal equivalence.
Another promising direction is to combine our approach
with design diversity approaches [46, 28, 62]. We could
create a 3-variant system where two variants are Apache
processes running on Linux hosts with controlled ad-
dress space partitioning variation, and the third variant
is a Windows machine running IIS. This would provide
guaranteed detection of a class of low-level memory
attacks through the two controlled variants, as well as
probabilistic detection of attacks that exploit high-level
application semantics through the design variants.
Recovery. Our modified kernel detects an attack when
the system calls made by the variants diverge. At this
USENIX Association
Security ’06: 15th USENIX Security Symposium
117
point, one variant is in an alarm state (e.g., crashed),
and the other variant is in a possibly compromised state.
After detecting the attack, the monitor needs to restart
the service in an uncompromised state. Note that the
attack is always detected before any system call is exe-
cuted for a compromised process; this means no exter-
nal state has been corrupted. For a stateless server, the
monitor can just restart all of the variants. For a stateful
server, recovery is more difficult. One interesting ap-
proach is to compare the states of the variants after the
attack is detected to determine the valid state. Depend-
ing on the variation used, it may be possible to recover
a known uncompromised state from the state of the
alarm variant, as well as to deduce an attack signature
from the differences between the two variants’ states.
Another approach involves adding an extra recovery
variant that maintains a known uncompromised state
and can be used to restart the other variants after an
attack is detected. The recovery variant could be the
original P, except it would be kept behind the normal
variants. The polygrapher would delay sending input to
the recovery variant until all of the regular variants
process it successfully. This complicates the wrappers
substantially, however, and raises difficult questions
about how far behind the recovery variant should be.
Our framework opens up exciting new opportunities for
diversification approaches, since it eliminates the need
for high entropy variations. By removing the reliance on
keeping secrets and providing an architectural and asso-
ciated proof framework for establishing security proper-
ties, N-variant systems offer potentially substantial
gains in security for high assurance services.
Availability 
Our implementation is available as source code from
http://www.nvariant.org. This website also provides de-
tails on the different system call wrappers.
Acknowledgments
We thank Anil Somayaji for extensive comments and
suggestions; Lorenzo Cavallaro for help with the mem-
ory partitioning scripts; Jessica Greer for assistance
setting up our experimental
infrastructure; Caroline
Cox, Karsten Nohl, Nate Paul, Jeff Shirley, Nora
Sovarel, Sean Talts, and Jinlin Yang for comments on
the work and writing. This work was supported in part
by grants from the DARPA Self-Regenerative Systems
Program (FA8750-04-2-0246) and the National Science
Foundation through NSF Cybertrust (CNS-0524432).
7. Conclusion
References
Although the cryptography community has developed
techniques for proving security properties of crypto-
graphic protocols, similar levels of assurance for system
security properties remains an elusive goal. System
software is typically too complex to prove it has no vul-
nerabilities, even for small, well-defined classes of vul-
nerabilities such as buffer overflows. Previous tech-
niques for thwarting exploits of vulnerabilities have
used ad hoc arguments and tests to support claimed
security properties. Motivated attackers, however, regu-
larly find ways to successfully attack systems protected
using these techniques [12, 55, 58, 64].
Although many defenses are available for the particular
attacks we address in this paper, the N-variant systems
approach offers the promise of a more formal security
argument against large attack classes and correspond-
ingly higher levels of assurance. If we can prove that the
automated diversity produces variants that satisfy both
the normal equivalence and detection properties against
a particular attack class, we can have a high degree of
confidence that attacks in that class will be detected.
The soundness of the argument depends on correct be-
havior of the polygrapher, monitor, variant generator
and any common resources.
[1] Martin Abadi, Mihai Budiu, Ulfar Erlingsson, and
Jay Ligatti. Control-Flow Integrity: Principles,
Implementations, and Applications. CCS 2005.
[2] Starr Andersen. Changes to Functionality in Mi-
crosoft Windows XP Service Pack 2: Part 3:
Memory Protection Technologies. Microsoft
TechNet. August 2004.
[3] Algirdas Avizienis and L. Chen. On the Imple-
mentation of N-version Programming for Software
Fault-Tolerance During Program Execution.
In-
ternational Computer Software and Applications
Conference. 1977.
[4] Vasanth Bala, E. Duesterwald, S. Banerjia. Dy-
namo: A Transparent Dynamic Optimization Sys-
tem. ACM Programming Language Design and
Implementation (PLDI). 2000.
[5] Arash Baratloo, N. Singh, T. Tsai. Transparent
Run-Time Defense against Stack Smashing At-
tacks. USENIX Technical Conference. 2000.
[6] Elena Barrantes, D. Ackley, S. Forrest, T. Palmer,
D. Stefanovic, D. Zovi. Intrusion Detection: Ran-
domized Instruction Set Emulation to Disrupt Bi-
nary Code Injection Attacks. CCS 2003.
[7] Emery Berger and Benjamin Zorn. DieHard:
Probabilistic Memory Safety for Unsafe Lan-
118
Security ’06: 15th USENIX Security Symposium
USENIX Association
guages. ACM Programming Language Design and
Implementation (PLDI), June 2006.
[8] Sandeep Bhatkar, Daniel DuVarney, and R. Sekar.
Address Ofuscation: an Efficient Approach to
Combat a Broad Range of Memory Error Exploits.
USENIX Security 2003.
[23] Nurit Dor, M. Rodeh, M. Sagiv. CSSV: Towards a
Realistic Tool for Statically Detecting All Buffer
Overflows in C. ACM Programming Language
Design and Implementation. June 2003.
[24] Jon Erickson. Hacking: The Art of Exploitation.
No Starch Press. November 2003,
[9] Kenneth Birman. Replication and Fault Tolerance
in the ISIS System. 10th ACM Symposium on Op-
erating Systems Principles, 1985.
[25] Hiroaki Etoh. GCC extension for protecting appli-
cations from stack-smashing attacks. IBM, 2004.
http://www.trl.ibm.com/projects/security/ssp
[10] K. Birman, Building Secure and Reliable Network
Applications, Manning Publications, 1996.
[11] Derek Bruening, Timothy Garnett,
Saman
Amarasinghe. An Infrastructure for Adaptive Dy-
namic Optimization. International Symposium on
Code Generation and Optimization. 2003.
[12] Bulba and Kil3r. Bypassing StackGuard and
StackShield. Phrack. Vol 0xa Issue 0x38. May
2000. http://www.phrack.org/phrack/56/p56-0x05
[13] CERT. OpenSSL Servers Contain a Buffer Over-
flow During the SSL2 Handshake Process. CERT
Advisory CA-2002-23. July 2002.
[14] L. Chen and Algirdas Avizienis. N-Version Pro-
gramming: A Fault Tolerance Approach to Reli-
ability of Software Operation. 8th International
Symposium on Fault-Tolerant Computing. 1978.
[15] Shuo Chen, Jun Xu, Emre C. Sezer, Prachi
Gauriar, R. K. Iyer. Non-Control-Data Attacks
Are Realistic Threats. USENIX Security 2005.
[16] Marc Chérèque, David Powell, Philippe Reynier,
Jean-Luc Richier, and Jacques Voiron. Active
Replication in Delta-4. 22nd International Sympo-
sium on Fault-Tolerant Computing. July 1992.
[17] Monica Chew and Dawn Song. Mitigating Buffer
Overflows by Operating System Randomization.
Tech Report CMU-CS-02-197. December 2002.
[18] George Coulouris, Jean Dollimore and Tim Kind-
berg. Distributed Systems: Concepts and Design
(Third Edition). Addison-Wesley. 2001.
[19] Crispin Cowan, C. Pu, D. Maier, H. Hinton, J.
Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle,
and Q. Zhang. Stackguard: Automatic Adaptive
Detection and Prevention of Buffer-Overflow At-
tacks. USENIX Security 1998.
[20] C. Cowan, M. Barringer, S. Beattie, G. Kroah-
Hartman, M. Frantzen, and J. Lokier. Format-
Guard: Automatic Protection From printf Format
String Vulnerabilities. USENIX Security 2001.
[21] Scott Crosby and Dan Wallach. Denial of Service
via Algorithmic Complexity Attacks. USENIX Se-
curity 2003.
[22] Bruno De Bus, Bjorn De Sutter, Ludo Van Put, D.
Chanet, K. De Bosschere. Link-time Optimization
of ARM Binaries. Language. Compiler and Tool
Support for Embedded Systems. 2004.
[26] Stephanie Forrest, Anil Somayaji, David Ackley.
Building diverse computer systems. 6th Workshop
on Hot Topics in Operating Systems. 1997.
[27] The FreeBSD Documentation Project. FreeBSD
Handbook, Chapter 24. 2005.
[28] Debin Gao, Michael Reiter, Dawn Song. Behav-
ioral Distance for Intrusion Detection. 8th Interna-
tional Symposium on Recent Advances in Intru-
sion Detection. September 2005.
[29] Daniel Geer, C. Pfleeger, B. Schneier, J. Quarter-
man, P. Metzger, R. Bace, P. Gutmann. Cyberin-
security: The Cost of Monopoly. CCIA Technical
Report, 2003.
[30] Eric Haugh and Matt Bishop. Testing C programs
for buffer overflow vulnerabilities. NDSS 2003.
[31] David Holland, Ada Lim, and Margo Seltzer. An
Architecture A Day Keeps the Hacker Away.
Workshop on Architectural Support for Security
and Anti-Virus. April 2004.
[32] D. Jewett. Integrity S2: A Fault-Tolerant Unix
Platform. 17th International Symposium on Fault-
Tolerant Computing Systems. June 1991.
[33] Mark K. Joseph. Architectural Issues in Fault-
Tolerant, Secure Computing Systems. Ph.D. Dis-
sertation. UCLA Department of Computer Sci-
ence, 1988.
[34] James Just, J. Reynolds, L. Clough, M. Danforth,
K. Levitt, R. Maglich, J. Rowe. Learning Un-
known Attacks – A Start. Recent Advances in In-
trusion Detection. Oct 2002.
[35] Gaurav Kc, A. Keromytis, V. Prevelakis. Counter-
ing Code-injection Attacks with Instruction Set
Randomization. CCS 2003.
[36] John Knight and N. Leveson. An Experimental
Evaluation of the Assumption of Independence in
Multi-version Programming. IEEE Transactions
on Software Engineering, Vol 12, No 1. Jan 1986.
[37] Ken Knowlton. A Combination Hardware-
Software Debugging System. IEEE Transactions
on Computers. Vol 17, No 1. January 1968.
[38] Benjamin Kuperman, C. Brodley, H. Oz-
doganoglu, T. Vijaykumar, A. Jalote. Detection
and Prevention of Stack Buffer Overflow Attacks.
Communications of the ACM, Nov 2005.
USENIX Association
Security ’06: 15th USENIX Security Symposium
119
[39] David Larochelle and David Evans. Statically De-
tecting Likely Buffer Overflow Vulnerabilities.
USENIX Security 2001.
[55] Hovav Shacham, M. Page, B. Pfaff, Eu-Jin Goh,
N. Modadugu, Dan Boneh. On the effectiveness of
address-space randomization. CCS 2004.
[40] Ruby Lee, D. Karig, J. McGregor, and Z. Shi.
Enlisting Hardware Architecture to Thwart Mali-
cious Code Injection. International Conference on
Security in Pervasive Computing. March 2003.
[41] John McGregor, David Karig, Zhijie Shi, and
Ruby Lee. A Processor Architecture Defense
against Buffer Overflow Attacks. IEEE Interna-
tional Conference on Information Technology:
Research and Education. August 2003.
[42] Sjoerd Mullender and Robbert van Renesse. The
International Obfuscated C Code Contest Entry.
1984. http://www1.us.ioccc.org/1984/mullender.c
[43] James Newsome and Dawn Song. Dynamic Taint
Analysis for Automatic Detection, Analysis, and
Signature Generation of Exploits on Commodity
Software. NDSS 2005.
[44] Adam J. O’Donnell and H. Sethu. On Achieving
Software Diversity for Improved Network Security
using Distributed Coloring Algorithms. CCS 2004.
[45] Manish Prasad and T. Chiueh. A Binary Rewriting
Defense against Stack-Based Buffer Overflow At-
tacks. USENIX Technical Conference. June 2003.
[46] James Reynolds, J. Just, E. Lawson, L. Clough, R.
Maglich, K. Levitt. The Design and Implementa-
tion of an Intrusion Tolerant System. Foundations
of Intrusion Tolerant Systems (OASIS). 2003.
[47] Michael Ringenburg and Dan Grossman. Prevent-
ing Format-String Attacks via Automatic and Effi-
cient Dynamic Checking. CCS 2005.
[48] Juan Rivas. Overwriting the .dtors Section. Dec
2000. http://synnergy.net/downloads/papers/dtors.txt
[49] Olatunji Ruwase and Monica S. Lam. A Practical
Dynamic Buffer Overflow Detector. NDSS 2004.
[50] Fred Schneider. Implementing Fault-Tolerant Ser-
vices Using the State Machine Approach: A Tuto-
rial. ACM Computing Surveys. Dec 1990.
[51] Fred Schneider and L. Zhou. Distributed Trust:
Attack-
Supporting
Tolerance, Cornell TR 2004-1924, January 2004.
Fault-Tolerance
and
[52] Kevin Scott and Jack W. Davidson. Safe Virtual
Execution Using Software Dynamic Translation.
ACSAC. December 2002.
[53] Kevin Scott, N. Kumar, S. Velusamy, B. Childers,
J. Davidson, M. L. Soffa. Retargetable and Recon-
figurable Software Dynamic Translation. Interna-
tional Symposium on Code Generation and Opti-
mization. March 2003.
[54] Scut / team teso. Exploiting Format String Vul-
nerabilities. March 2001.
[56] Umesh Shankar, K. Talwar, J. Foster, D. Wagner.
Detecting Format String Vulnerabilities with Type
Qualifiers. USENIX Security 2001.
[57] Stelios Sidiroglou, G. Giovanidis, A. Keromytis.
A Dynamic Mechanism for Recovering from
Buffer Overflow Attacks. 8th Information Security
Conference. September 2005.
[58] Ana Nora Sovarel, David Evans, Nathanael Paul.
Where’s the FEEB?: The Effectiveness of Instruc-
tion Set Randomization. USENIX Security 2005.
[59] Mark Stamp. Risks of Monoculture. Communica-
tions of the ACM. Vol 47, Number 3. March 2004.
[60] Karthik Sundaramoorthy, Z. Purser, E. Rotenberg.
Slipstream Processors: Improving both Perform-
ance and Fault Tolerance. Architectural Support
for Programming Languages and Operating Sys-
tems (ASPLOS). Nov 2000.
[61] Bjorn De Sutter and Koen De Bosschere. Intro-
duction: Software techniques for Program Com-
paction. Communications of the ACM. Vol 46, No
8. Aug 2003.
[62] Eric Totel, Frédéric Majorczyk, Ludovic Mé.
COTS Diversity Intrusion Detection and Applica-
tion to Web Servers. Recent Advances in Intrusion
Detection. September 2005.
[63] Timothy Tsai and Navjot Singh. Libsafe 2.0: De-
tection of Format String Vulnerability Exploits.
Avaya Labs White Paper. February 2001.
[64] Nathan Tuck, B. Calder, and G. Varghese. Hard-
ware and Binary Modification Support for Code
Pointer Protection from Buffer Overflow. Interna-
tional Symposium on Microarchitecture. Dec
2004.
[65] VeriTest Corporation. WebBench 5.0.
http://www.veritest.com/benchmarks/webbench
[66] John Viega, J. Bloch, T. Kohno, Gary McGraw.
ITS4 : A Static Vulnerability Scanner for C and
C++ Code. ACSAC. Dec 2000.
[67] David Wagner, J. Foster, E. Brewer, A. Aiken. A
First Step Towards Automated Detection of Buffer
Overrun Vulnerabilities. NDSS 2000.
[68] D. Wilson. The STRATUS Computer System.
Resilient Computer Systems: Volume 1. John
Wiley and Sons, 1986. p. 208-231.
[69] Jun Xu, Z. Kalbarczyk, R. Iyer. Transparent Run-
time Randomization for Security. Symposium on
Reliable and Distributed Systems. October 2003.
[70] Yongguang Zhang, H. Vin, L. Alvisi, W. Lee, S.
Dao. Heterogeneous Networking:
a New
Survivability Paradigm. New Security Paradigms
Workshop 2001.
120
Security ’06: 15th USENIX Security Symposium
USENIX Association