### Nation of User-Provided and Trusted Codebase

In environments such as Airavat, which utilize user-specified mappers and system reducers, the subtleties of floating-point arithmetic can significantly increase the sensitivity of outcomes. This increased sensitivity can exceed what would be predicted by a purely mathematical analysis of the underlying abstraction.

#### Example: Aggregation Operator Sensitivity

Consider an aggregation operator \( f(x_1, \ldots, x_n) = \sum_{i=1}^n x_i \). If the input sensitivity is 1 (i.e., a single user can change at most one input variable \( x_i \) by at most 1), then the sensitivity of \( f \) is at most 1. However, when implemented in floating-point arithmetic, denoted as \( f^* \), the sensitivity can be much higher. For instance:

- Let \( n = 2^{30} + 1 \)
- \( x_1 = 2^{30} \)
- \( x_2 = -2^{-23} \)
- \( x_3 = -2^{-23}, \ldots, x_n = -2^{-23} \)

The sum in floating-point arithmetic is:
\[ f^*(x_1, \ldots, x_n) = 2^{30} + (n-1) \cdot (-2^{-23}) = 2^{30} - 2^{30} \cdot 2^{-23} = 2^{30} - 128 \]

If we slightly perturb \( x_1 \) to \( x_1' = x_1 + 1 = 2^{30} + 1 \), the new sum is:
\[ f^*(x_1', x_2, \ldots, x_n) = 2^{30} + 1 \]

Thus, the sensitivity of \( f^* \) on this pair of inputs is 129, not 1. This demonstrates the accumulated error phenomenon, which can be mitigated using techniques like the Kahan summation algorithm [22, 20]. Similar behavior can be observed in more complex mechanisms, complicating the validation of privacy claims.

### Related Work

Modulating the lower-order bits of transmitted data is a well-known covert channel mechanism used to enable communication between processes that are otherwise not allowed to exchange information [25, 16]. The primary difference between our attack and traditional covert channels lies in the intent of the transmitting party. Platforms like PINQ and Airavat, which accept untrusted code, must address the threat of covert communications. For example, timing attacks, where a query takes an inordinate amount of time for specific records, can leak information about the input [30, 34].

Our described attack does not require adversarial code or active malicious intent. Any textbook implementation of the floating-point Laplacian mechanism is potentially vulnerable. Fixed-point or integer-valued algorithms, such as those used in distributed differentially private computations [11] and privacy-preserving billing and aggregation [5, 24], are immune to this attack.

The snapping mechanism, closely related to the approach proposed by Dodis et al. [7], defends against adversaries who control the source of randomness. In their model, the adversary can introduce arbitrary bias into the random source, as long as each subsequent bit has some constant entropy conditioned on previous bits. This model, known as the Santha-Vazirani source [40], has been shown to have negative implications for certain cryptographic tasks [29, 8].

In contrast, our work assumes a perfect source of randomness but models inaccuracies due to floating-point arithmetic.

### Conclusions

Floating-point arithmetic is a notoriously leaky abstraction, challenging to formalize and implement correctly. Issues such as non-associativity of basic arithmetic operations, compounding errors, rounding rules, signed zeros, denormals, NaNs, infinities, CPU flags, and hardware bugs complicate even the simplest applications, let alone those with security concerns.

We initiate the study of adapting floating-point algorithms for differential privacy. We describe a practical and efficient attack on a textbook implementation of the Laplacian mechanism, which underlies many general-purpose differentially private computations. We also present and prove a post-processing snapping procedure that does not perceptibly increase the error introduced by the Laplacian mechanism. The snapping mechanism is known to preserve differential privacy when instantiated with weak sources of randomness.

In conclusion, floating-point arithmetic presents a unique security challenge to developers of real-world applications. It differs from convenient mathematical abstractions in ways that are complex and riddled with corner cases. However, its common implementations are standard, predictable, and deterministic, making these problematic cases exploitable by adversaries.

### Acknowledgments

The author thanks Yevgeniy Dodis, Frank McSherry, Benjamin Pierce, and Indrajit Roy for their support and valuable comments.

### References

[References listed here as in the original text.]

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the technical depth and accuracy of the original content.