(cid:43)
C
(cid:18)
C
(cid:97)
N
(cid:120)
p
P N
≡
|
(cid:120)
p
Delegate scope C
(
,
(cid:98)
)
C
5
C
|
≡
P
(cid:43)
←→
|
≡
C
C
)
C
|
≡
P
|
,
(
Delegate
Delegate scope C
(cid:120)
p
(cid:120)
(cid:159)
|
P
y
(cid:120)
elegate
D
Priv
(
(
,
p
)
C
( ,
)
C
Delegate r C
(R3)
)
)
C
≡
|
|
≡
|
y
≡ ∀
|
P
(
C
≡
,
N
,
r
N
,
Priv
(cid:20)
C
4
C
|
≡
U
a e
g
Dele
t
(
C
C
(
≡
(R4.3)
5
scope Priv
=
)
|
≡
U
C
Pr
v
i
N
p
(R5)
(cid:134)
)
C
4
,
From  analysis  of  messages  9  and  13,  we  find  that  goals  G1  and 
G2  are  satisfied.  However,  we  still  need  to  establish  that  the 
secure  redirection  property assumed by the belief logic holds for 
the protocol.   
7.3  Checking Redirection Security using 
Alloy 
In  the  protocol  of  Figure  1,  messages  5  and  11  are  the  only 
messages demonstrating possession of secret with a user. The two 
secrets  considered  in  the  analysis  are  Nb  and  Np.  Applying 
protocol  simplification  rules  of  Section  5.5,  we  obtain  the 
following  simplified  protocol.  For  each  message,  the  message 
sequence number in the original protocol of Figure 1 is indicated 
in parentheses.  
Message
Message
Message
Message
1(4)
2 (5)
3 (10)
4(11)
C
U
P
U
→
→
→
→
U
P
U
C
:
:
:
:
url
p
,
b
N
N
N N
N N
,
,
b
b
b
,
url
c
p
p
|
|
≡
=
≡
P
C
url
Note that we assume that urlc points to C in our model due to the 
belief 
established  from  analysis  of 
callback
message 2 in Section 7.2.  
We use the general Alloy model described in Section 6.2. To add 
constraints  corresponding  to  this  protocol,  we  declare  two  new 
signatures  Producer  and  Consumer  by  extending  Server.
c
Figure 2. Counter-example generated by Alloy representing attack on OAuth (RFC version)
We  also  add  following  protocol  specific  constraints  to  the 
signature ProtoSeq:  
Constraint  1:  P  must  send  message  3  containing  verifier  token 
and redirection URL in response to receiving message 2.  
all p: Sent |  (p.receiver in Provider) => 
some q:Sent  | (p->q in sequence) && 
(q.receiver = p.sender) && 
(q.content=p.content + p.receiver.uniqueval) 
&& (q.redirectURL.target =q.sender.peer) 
Constraint 2: First message in protocol sequence must be sent by 
Consumer  and  must  contain  a  secret  (request  token)  and 
redirection URL pointing to the Producer.  
one p: Sent | (some t1: Sent | p->t1 in 
sequence && no t2: Sent | t2->p in sequence) 
&& p.sender in Consumer && (p.content = 
p.sender.uniqueval) && (p.cookies = 
p.sender.uniquecookie) && (p.time = 
ord/first[]) && (p.redirectURL.target = 
p.sender.peer) 
Constraint 3:  Last message in the protocol must be received by 
the consumer and must contain request token and the verifier.  
one p: Sent | (some t1: Sent | t1->p in 
sequence && no t2: Sent | p->t2 in sequence) 
&& p.receiver in Consumer && (p.content = 
p.receiver.uniqueval + 
p.receiver.peer.uniqueval) 
We  execute  Alloy  analyzer  with  these  additional  constraints  and 
an  assertion  that  there  is  only  one  User  and  it  is  honest 
(HUser). Alloy generates the counter example shown in Figure 2 
in less than 4 seconds on an Intel Core i5 2.4 GHz, 4 GB system. 
The  counter-example  clearly  shows  possibility  of  two  users,  one 
of  which  is  honest.  Also  there  are  five  messages  instead  of 
expected  four.  The  sequence  is  determined  by  the  value  of  the 
time attribute. The value Tkvalue4 represents the request token 
(Nb)  while  TkValue0  is  the  verifier  (Np).  Note  that  the 
redirection  constraint  of  Section  6.2  only  applies  for  an  honest 
user (HUser). We see that a (dishonest) user can perform steps 1, 
2, 3 of the protocol (messages sent0, sent4, sent2) and then 
create  a  message  for  the  honest  user  (sent3)who  then  sends 
message 4 to C (sent1). This translates to the following attack 
on the original protocol.  
Previously  unreported  attack  on  OAuth  (RFC  version).  An 
attacker performs steps 1-10 of the protocol and delegates access 
to its account X at P for a limited period of time to C. However, 
instead  of  getting  redirected  to  C,  it  induces  a  victim - having a 
valid  account  V  at  C  –  to  click  a link that contains both request 
token  and  verifier.  On  clicking  the  link,  V  is  transferred  to  C, 
where  it  either  starts  a  new  login  session  or  continues  with  an 
existing  session.  C  believes  that  the  valid  request  token  and 
verifier are for V’s account at P, while they are actually associated 
with  the  attacker’s  account  X.  If  V  accesses  a  service  at  C  that 
requires information to be shared with a remote account at P (e.g. 
backing  up  an  address  book),  C  inadvertently  releases  the 
sensitive information to the attacker. 
Fixing the protocol. The protocol can be easily fixed by requiring 
consumer to include a cookie along with the request token while 
redirecting  user  to  provider  in  step  4.  It  can  then  check  for 
presence  of  this  cookie  when  the  user  returns  in  step  11.  This 
ensures that steps 4 and 11 are performed by the same user. 
When we execute the analyzer again after changing constraints 2 
and  3  in  the  Alloy  model  to  include  the  cookie,  we  are  not 
presented  with  a  counter-example  even  for  a  scope  allowing  a 
protocol sequence of up to 20 messages.  
8.  CONCLUSIONS 
We  consider  the  problem  of  providing  a  generic  framework  for 
security analysis of web protocols. Belief logics are known to be 
fast  and  cost  effective  tools  for  this  purpose  and  we  feel  these 
techniques  could  be  even  better  suited  for  the  web  domain.  
However,  there  are  known  issues  with  multiple  session  attacks 
and  new  challenges  are 
to  browser-based 
communication. 
We  propose  a  novel  two  stage  approach  where  belief  logic 
analysis is followed by automated model finding. The two stages 
introduced  due 
297
reasoning  about  user  actions, 
intruder  models.  This  significantly 
are  linked  through  a  security  property  which  is  assumed  in  the 
first stage and validated by the second stage. The belief logic we 
use is our extension of BAN logic for the web domain. It supports 
principals without identifying keys, secure SSL/TLS channels and 
simple 
thus  enabling  and 
simplifying analysis of web protocols. 
We develop a generic model for web protocol analysis in Alloy. 
Since  scope  of  this  analysis  is  to  check  for  a  particular  security 
property,  we  make  considerable  simplifications  in  both  the 
protocol  and 
reduces 
complexity  of  model  checking  in  our  approach.  We demonstrate 
our  hybrid  method  through  analysis  of  OAuth,  a  leading  web 
identity  and  access  management  protocol.  We 
identify  a 
previously  unreported  vulnerability  in  an  approved  RFC  version 
which  is  still  being  used  by  several  service  providers.  We  also 
propose  a  simple  fix  that  service  providers  can  use  to  overcome 
the  insecurity.  Use  of  lightweight  analysis  methods  makes  it 
practical 
in  design, 
development of web protocols and standards.  
9.  REFERENCES 
[1]  Burrows, M., Abadi, M. and Needham, R. 1990. A Logic of 
for  our  method 
to  be 
incorporated 
Authentication. ACM Trans. Comp. Sys. 8, 1, 18-36.  
[2]  OASIS SAML Specifications. SAML v2.0, Core. 2005.  
http://saml.xml.org/saml-specifications  
[3]  OpenID 2.0 Specifications. 2008. 
http://openid.net/specs/openid-authentication-2_0.html.  
[4]  Hammer, E. 2010. The OAuth 1.0 Protocol. Internet 
Engineering Task Force, Request for Comments (RFC): 
5849, http://www.rfc-editor.org/rfc/rfc5849.txt. 
[5]  Gong, L., Needham, R. and Yahalom, R. 1990. Reasoning 
about Belief in Cryptographic Protocols. In Proceedings of 
IEEE Symposium on Research in Security and Privacy 
(1990) 
[6]  Abadi, M. and Tuttle, M.R. 1991. A semantics for a logic of 
authentication. In Proceedings of the ACM Symposium of 
Principles of Distributed Computing (1991)   
[7]  Kessler, V. and Wedel, G. 1994. AUTLOG: An advanced 
logic of authentication. In Proceedings of Computer Security 
Foundation Workshop VII, 90-99 (1994).   
[8]  Syverson, P. and van Oorschot, P. 1994. On unifying some 
cryptographic protocol logics. In Proceedings of the 
Symposium on Security and Privacy, Oakland, CA, 14-28.  
[9]  Schumann, J. 1997. Automatic Verification of Cryptographic 
Protocols with SETHEO. In McCune, W. (ed.) CADE 1997. 
LNCS, vol. 1249, 831-836. Springer, Heidelberg.  
[10] Craigen, D. and Saaltink, M. 1996. Using EVES to analyze 
authentication protocols. Technical Report TR-96-5508-05, 
ORA Canada. 
[11] Dolev, D. and Yao, A. 1983. On the security of public key 
protocols. IEEE Trans. Inform.  Theory IT-29, 198-208.  
[12] Meadows, C. 1992. Applying formal methods to the analysis 
of a key management protocol.  Journal of Computer 
Security 1, 5-53.  
[13] Lowe, G. 1996. Breaking and Fixing the Needham-Schroeder 
Public-Key Protocol Using FDR. In Margaria, T., Steffen, B. 
(eds.) TACAS 1996. LNCS, 1055, 147-166. Springer, 
Heidelberg.    
298
[14] Armando, A., et al. 2005. An Optimized Intruder Model for 
SAT-based Model-Checking of Security Protocols. Elec. 
Notes in Theoret. Comp. Sci. 125(1) (March 2005) 
[15] Software Design Group, MIT, Alloy analyzer 4. 2010. 
http://alloy.mit.edu/ 
[16] Hammer-Lahav, E. 2009. Explaining the OAuth Session 
Fixation Attack, http://hueniverse.com/2009/04/explaining-
the-oauth-sessionfixation-attack/ 
[17] Jackson, D. 2002. Alloy: a lightweight object modelling 
notation. ACM Trans. on Software Engineering and 
Methodology (TOSEM), 11, 2, 256-290. 
[18] Basin, D., Modersheim, S. and Vigano, L. 2003. An On-The-
Fly Model-Checker for Security Proto-col Analysis. In 
Proceedings of 8th ESORICS 2003, 253-270. LNCS 2808.  
[19] Armando, A., Basin, D., Boichut Y., et al. 2005. The 
AVISPA Tool for the Automated Validation of Internet 
Security Protocols and Applications. In Proceedings of 
International Conference on Computer-Aided Verification. 
[20] Javier, F., Fabrega, T., Herzog, J., C. and Guttman, J., D. 
1998. Strand spaces: Why a security protocol is correct?. In 
Proceedings of IEEE Symposium on Security and Privacy, 
160-171. 
[21] Dawn, S., Berezin., S. and Perrig, A. 2001. Athena: a novel 
approach to efficient automatic security protocol analysis. 
Journal of Computer Security, 9, 47-74.  
[22] Akhawe, D., Barth, A., Lam, P., E., Mitchell, J. and Song D. 
2010. Towards a Formal Foundation of Web Security. In 
Proceedings of 23rd IEEE Computer Security Foundations 
Symposium (CSF), 2010, 290-304.  
[23] Kumar, A. 2011. Model Driven Security Analysis of IDaaS 
Protocols. In Proceedings of 9th International Conference 
on Service Oriented Computing. 312-327.  
[24] The OAuth Core 1.0 Specification, 2007. 
http://oauth.net/core/1.0 
[25] Hammer, E., et al., D. 2012. The OAuth 2.0 Authorization 
Protocol, Network Working Group, Internet Draft (work in 
progress), http://tools.ietf.org/html/draft-ietf-oauth-v2-xx. 
[26] Clark, J. and Jacob, J. 1997. A Survey of Authentication 
Protocol Literature: Version 1.0, 17. 
http://www.eecs.umich.edu/acal/swerve/docs/49-1.pdf. 
[27] Armando, A. et al. 2008. Formal analysis of SAML 2.0 web 
browser single sign-on: breaking the SAML-based single 
sign-on for google apps. In Proceedings of 6th ACM 
workshop on Formal methods in security engineering.  
[28] Kindred, D. and Wing, J. 1996. Fast, Automatic Checking of 
Security Protocols. In Proceedings of the USENIX 1996 
Workshop on Electronic Commerce. 
[29] Jackson, D. 2012. Software Abstractions: Logic, Language, 
and Analysis, Revised Edition, The MIT Press.  
[30] Blanchet, B. 2001. An Efficient Cryptographic Protocol 
Verifier Based on Prolog Rules. In Proceedings 14th IEEE 
Computer Security Foundations Workshop (CSFW), 82–96. 
[31] Cremers, C., J. 2008. Unbounded Verification, Falsification, 
and Characterization of Security Protocols by Pattern 
Refinement. In Proceedings of the 15th ACM conference on 
Computer and communications security. 119-128.