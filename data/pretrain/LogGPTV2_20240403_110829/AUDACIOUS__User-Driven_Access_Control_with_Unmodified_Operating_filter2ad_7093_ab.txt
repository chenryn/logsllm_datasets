we prefer a static check.
3.2 UI Context: UIseen (cid:39) UIACG
The UI must not trick the user. That is, the actual UI that
the user interacts with must be consistent with the UI that
we expect for the ACG. Attacks that present UIs to mislead
the user are clickjacking attacks. The root cause of click-
jacking is that UI elements are presented out-of-context [12].
We deﬁne what it means for the UI to be in-context at the
time a user interacts with an ACG:
UIapp (cid:39) UIACG
The UI for the ACG inside of the application matches
the expected UI for the ACG.
1. Internal UI
2. External UI
UIapp = UIapp + UIother
The application UI is not covered by anything outside
of the application.
3. UI Consistency
UIapp = UIseen
The UI we check is the same UI the user perceives.
Internal UI: UIapp (cid:39) UIACG
3.2.1
The internal application UI must not be deceptive.
Attack. Eve is developing an evil ﬂashlight application that
secretly records video. She disguises the video recording
ACG as a ﬂashlight button. She covers the video recording
ACG button with a small button that says “ﬂashlight.” This
button hides the intent of the video recording ACG, but
still leaves enough room around the edges for the user to
accidentally click on it. This is a cover attack.
Defense. The UI in the location of the ACG needs to be an
acceptable transformation of the UI that the ACG expects.
The ACG deﬁnes the UI it expects and speciﬁes what trans-
formations are acceptable. We check this by comparing the
bitmap of the UI to the bitmap that the ACG expects.
In the most basic transformation, the UI must exactly
match a predeﬁned UI for the ACG. Often, it is desirable
for the transformation to be stateful. For example, a button
with “on” and “oﬀ” states can expect one UI for the “on”
state and a diﬀerent UI for the “oﬀ” state. This way, an
application cannot trick the user by switching the two states.
An ACG may deﬁne a more ﬂexible notion of an accept-
able transformation. It may, for example, permit an appli-
cation to place an element on top of its UI as long as the
element does not cover its text. It may call an image-to-text
function and ensure that the actual UI has the same text to
a user as the ACG UI. It may expose some of its internal
UI logic and permit an application to change its colors, but
only if the background and the text preserve the same con-
trast. It may ask the application to provide a proof that the
transformation is acceptable.
3.2.2 External UI: UIapp = UIapp + UIother
The ACG UI must not be covered by a UI element from
a diﬀerent application or at the system level.
Attack. Eve is developing an evil voice recording applica-
tion. The user selects a folder and records audio. When the
user presses the “stop” button, Eve exposes a system-level
notiﬁcation that says that the audio is done recording, and
that the user should click on the notiﬁcation to save the au-
dio to the folder. Underneath this, Eve places a ﬁle deletion
ACG button. When the user clicks on the notiﬁcation to
save the audio, the system delegates the event downward
and deletes all of the ﬁles in that folder instead. This is
called tapjacking [18, 20].
Defense. We use existing OS features to defend against
tapjacking attacks without modifying the OS. We utilize an
OS-native ﬂag to determine when the ACG UI is covered by
a UI element outside of the application. We reject events
on which this ﬂag is set. An alternate approach would be to
take a screenshot of the entire UI (including the UI outside
of the application) and crop it to the correct location. This
may not be allowed by the OS, however, as it introduces
security risks: It allows applications to use screenshots to
extract sensitive content from each other. Regardless, the
library needs some support from the OS to handle tapjacking
attacks; we discuss this in Section 5.
3.2.3 UI Consistency: UIapp = UIseen
The UI we check must be the same as the UI the user
perceives, otherwise the check does not protect the user.
Attack. Eve is developing an evil game that collects in-
formation about users. She exposes two buttons: an ACG
button that toggles location and a button that is part of the
game. She places the game button on top. She expects the
user to press it at a certain point in the game. Just before
this, she switches the location ACG button on top of it. She
tricks the user into granting the application permission to
access location. This attack is called bait-and-switch [12].
Eve isn’t sure she will always be able to trick the user into
clicking this button, so she saves the event to the location
button. She schedules this event to play back to the ACG
in the future. This is a replay attack.
Defense. The event we check must occur in the correct
location at the correct time. We check that the location of
the event is the location of the ACG element, and that the
time of the event is the current time minus some buﬀer.2
The user also must have enough time to perceive the UI
before interacting with it. The bait-and-switch attack is the
result of a UI check that occurs too late [12]. The UI check
does not occur until the time of the event, but it needs infor-
mation about the UI at the time the user perceives it before
2Since we prevent event construction and modiﬁcation, an
application cannot change an event’s location or time.
the event. We accomplish this through a periodic random
check. The check runs randomly within the boundaries of
some check frequency. If it fails, it invalidates future events
to the ACG until some invalidation interval passes. As long
as this interval is large enough, this guarantees that, at the
time of an event, the user has perceived the UI for suﬃ-
ciently long.
If an ACG is already invalid and the check
fails, the check extends the amount of time for which it is
invalid by the interval; otherwise, it allows the interval to
run its course.
We could instead protect against bait-and-switch attacks
by running our check in response to changes in layout, but
this would be risky: We would then need to prevent appli-
cations from intercepting the check to show the expected UI
only when the check runs. The check needs to be unpre-
dictable to the application developer. The developer may in
theory be able to fool the random check by responding to
events related to UI rendering; we are unable to implement
this attack on Android. If it is possible, we may deter it by
introducing a random delay during the check itself.
Choosing the ideal frequency and interval is a trade-oﬀ
between user experience and security: If we check too fre-
quently, we incur performance overhead, but if we check too
infrequently, we risk missing attacks.
If we invalidate for
too long, then a benign application which changes its UI
will provide a poor experience, but if we invalidate for too
little time, then the user may not have enough time to per-
ceive the UI. We suspect that the optimal choices depend
on the sensitivity of each individual ACG. An ACG which
deals with payment methods, for example, will beneﬁt from
checking more frequently and invalidating for longer than a
voice recording ACG. We evaluate the performance impacts
of diﬀerent frequencies in Section 6.3.
3.2.4 Time of Defense
We accomplish the UI context check dynamically. The
check must provide guarantees about both what UI the ap-
plication presents and when the application presents it rela-
tive to any possible user event. A check that only considers
what UI the application presents may catch an innocent ap-
plication that modiﬁes the UI at a time that does not deceive
the user. A check that only considers when the application
makes UI changes (a technique used to detect covert appli-
cation activity [24]) does not address our threat model: A
malicious developer can evade the analysis by changing the
UI at the right time, but not in a way that is informative
to the user. Existing work that accomplishes both of these
goals does so through manual image comparison [9, 24].
3.3 Resource Flow: UIACG → ACG
∗→ . . .
The application must not circumvent the ACG and access
the resource with no user interaction or in response to in-
teraction with its own UI elements. The application must
also use the resource appropriately. This goes beyond the
original user-driven access control work, which provides no
guarantees on resource use.
Attack. Eve is developing an evil video application. The
user expects the application to record and save videos. The
user also expects to play his own videos and to play videos
on the internet.
In reality, the application automatically
uploads the user’s videos to the internet for all other users
to see. This is a resource ﬂow attack.
ACG Interfaces
Four ACG Implementations
ACG UI Logic
UI Validation Logic
Event Analysis
161
655
249
204
138
Table 2: Java lines of code in AUDACIOUS, not
including existing analysis tools. We implement four
ACGs only as needed: one for immediate location
access, one for periodic location updates, one for
recording audio, and one for playing audio.
Defense. Resources are information, and so the ﬂow of
resources is an information ﬂow problem. Information ﬂow
analysis tracks the ﬂow of program information from sources
(for example, user input or the camera) to sinks (for exam-
ple, the display or the internet). We treat each ACG as
a special source or sink. We then ensure that any resource
which ﬂows to a given sink is accessed through the ACG. For
Eve’s application, we can specify that it is legal for a video
to ﬂow from the video ACG to the user’s ﬁlesystem, but that
it is illegal for a video to ﬂow from a diﬀerent source (for
example, an alternative video recording API) to the user’s
ﬁlesystem.
Viewing this as an information ﬂow problem buys us con-
trol: We can specify not only what resources must be ac-
cessed through ACGs, but also how the resources may be
used. Eve’s application should have both internet and video
recording permissions, but it should not send videos over
the internet (that is, videos should not ﬂow to the inter-
net). Furthermore, we can verify how resources ﬂow not
only within an application, but also between applications.
This approach also buys us ﬂexibility: In practice, user-
driven access control is not suﬃcient for all modes of interac-
tion with resources [7]. A benign version of Eve’s application
may wish to automatically sync the user’s video feed online
without burdening the user with explicit interaction. It can
do so by specifying that videos can ﬂow from the internet.
We assume that the underlying information ﬂow tool cor-
rectly handles implicit ﬂow, which may leak information
from sensitive sources through conditionals [5]. We allow
applications to access resources without using our library,
but then never use them for anything. These resources can-
not be misused by the application.
Time of Defense. We accomplish the information ﬂow
analysis statically. This allows the application to provide
guarantees on how information ﬂows to the user before re-
leasing the application. This also ensures that there is no
negative impact on performance.
4.
IMPLEMENTATION: AUDACIOUS
We turn to the implementation of a system for user-driven
access control that requires no explicit OS support. We
call our system AUDACIOUS: Android User Driven Access
Control in Only User Space. The size of our implementation
is modest (Table 2).
4.1 System Overview
AUDACIOUS consists of two primary components. The
ﬁrst is a trusted ACG library (Section 4.2), which exposes UI
Figure 2: Approval stage. The app includes the
ACG library, the SPARTA library, the annotated
code, and a ﬂow policy ﬁle. The annotations help
tell SPARTA which ﬂows are present, and the ﬂow
policy tells SPARTA which ﬂows are allowable [5].
A human veriﬁer inspects the analysis output.
elements that provide Android resource access (for example,
camera access). Application developers include this library
and use its UI elements (for example, camera buttons). The
library includes dynamic checks to ensure that application
developers do not mislead the user (Section 4.4).
The second component is a set of static analysis tools
which AUDACIOUS uses to verify that application devel-
opers correctly include and use the ACG library, and which
allow us to support more ﬂexible permission models than
strict user-driven access control. This set consists of an
event analysis (Section 4.3) and the information ﬂow tool
SPARTA [5] (Section 4.5).
These components are combined in two stages. In the app
store approval stage (Figure 2), the application goes through
a combined automatic and manual approval process before
it is released in an app store. Our implementation has two
static analyses: the event analysis, which runs on the byte-
code, and SPARTA, which runs on the source code. Both
report output to a human veriﬁer. The veriﬁer investigates
any problems and decides whether to release the application.
This matches the approval model proposed by SPARTA [5].
In AUDACIOUS, the veriﬁer also inspects any usages of re-
ﬂection to ensure that the developer does not circumvent
the library or analyses.
The app store approval model is just one enforcement
method. Alternatively, an organization can incentivize de-
velopers to use AUDACIOUS by certifying applications as
user-driven access control compliant. We assume the app
store approval model for the sake of simplicity.
In the runtime stage (Figure 3), AUDACIOUS prevents
additional malicious behavior from impacting the user. In
particular, it monitors the relationship between user expec-
tations and the runtime behavior of an application. In prac-
tice, this means monitoring the relationship between the UI
and the event that corresponds to a user action. Figure 3
shows three examples of monitoring application behavior.
4.2 Secure Library Design
We implement the ACG library ACGLib in Android. An-
Builder().withRRListener(audio, new RRL() {
public void onResourceReady() {
try {
speaker.passInput(audio.getResource());
} catch (ACGResourceAccessException e) {
// error getting ﬁle
}
}
}).withRRListener(speaker, new RRL() {
public void onResourceReady() {
try {
speaker.getResource();
} catch (ACGResourceAccessException e) {
// error playing ﬁle
}
}
}).build();
Figure 3: Runtime application monitoring for three
scenarios. A) The UI is consistent with the event,
B) the event is deceptive, and C) the UI is deceptive.
AUDACIOUS accepts only scenario (A).
Figure 4: Chaining ACGs. The AudioACG records
and saves audio, then passes the recorded ﬁle to the
PlayAudioACG. The PlayAudioACG plays the recorded
audio to the speaker when the speaker is available.
droid development is event-driven: When the user interacts
with the UI, Android dispatches events which eventually
reach application code and direct behavior. The building
blocks of an application are Activitys. An Activity is a
single thing that a user can do; this usually corresponds to a
single screen of an application. When an application starts,
it executes its main Activity, which is associated with a
layout. Android exposes a layout’s UI elements as Views.