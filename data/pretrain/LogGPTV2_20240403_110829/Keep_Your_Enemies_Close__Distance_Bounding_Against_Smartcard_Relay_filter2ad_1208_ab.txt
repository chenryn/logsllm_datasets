menting the relay attack. We chose off-the-shelf com-
ponents that allowed for fast development rather than
miniaturisation or cost-effectiveness. The performance
requirements were modest, with the only strict restriction
being that our circuit hardware ﬁt within the terminal.
3.1.1 Counterfeit terminal
Chip & PIN terminals are readily available for purchase
online and their sale is not restricted. While some are
as cheap as $10, our terminal was obtained for $50 from
eBay and was ideal for our purposes due to its copious in-
ternal space. Even if second hand terminals were not so
readily available, a plausible counterfeit could be made
from scratch as it is only necessary that it appears legiti-
mate to untrained customers.
Instead of reverse engineering the existing circuit, we
stripped all internal hardware except for the keypad and
LCD screen, and replaced it with a $200 Xilinx Spartan-
3 small factor, USB-controlled, development board. We
also kept the original smartcard reader slot, but wired its
connections to a $40 USB GemPC Twin reader so we
could connect it to the laptop. The result is a terminal
with which we can record keypad strokes, display con-
tent on the screen and interact with the inserted smart-
card. The terminal appears and behaves just like a gen-
3.1.2 Counterfeit card
At the jeweller’s, Carol needs to insert a counterfeit card
connected to her laptop, into Dave’s terminal. We took
a genuine Chip & PIN card and ground down the resin-
covered wire bonds that connect the chip to the back of
the card’s pads. With the reverse of the pads exposed,
using a soldering iron, we pressed into the plastic thin,
ﬂat wires to the edge of the card. This resulted in a card
that looked authentic from on the top side, but was actu-
ally wired on the back side, as shown in Figure 2. The
counterfeit card was then connected through a 1.5 m ca-
ble to a $150 Xilinx Spartan-3E FPGA Starter Kit board
to buffer the communications and translate them between
the ISO 7816 and RS-232 protocols. Since the FPGA is
not 5V tolerant, we use 390 Ω resistors on the channels
that receive data from the card. For the bi-directional
I/O channel, we use the Maxim 1740/1 level translator,
which costs less than $2.
3.1.3 Controlling software
The counterfeit terminal and card are controlled by sepa-
rate laptops via USB and RS-232 interfaces, respectively,
using custom software written in Python. The laptops
communicate via TCP over 802.11b wireless, although
in principle this could be GSM or other wireless pro-
tocol. This introduces signiﬁcant latency, but far less
than would be a problem as the timing critical operations
90
16th USENIX Security Symposium
USENIX Association
(a) With the exterior intact, the terminal’s original internal circuitry was replaced by
a small factor FPGA board (left); FPGA based smartcard emulator (right) connected
to counterfeit card (front).
(b) Customer’s view of terminal. Here, it is
playing Tetris, to demonstrate that we have full
control of the display and keypad.
Figure 2: Photographs of tampered terminal and counterfeit card.
on the counterfeit card are performed by the FPGA with
real-time guarantees.
One complication of selecting an off-the-shelf USB
smartcard reader for the counterfeit terminal is that it op-
erates at the application protocol data unit (APDU) level
and buffers an entire command or response before send-
ing it to the smartcard or the PC. This increases the time
between when the genuine terminal sends a command
and when the response can be sent; but, as previously
mentioned, this is well within tolerances.
This paper only deals with the “T=0” ISO 7816 sub-
protocol, as used by all EMV smartcards we have exam-
ined. Here, commands are uni-directional, i.e. either the
command or response contains a payload but not both.
Upon receiving a command code from the genuine ter-
minal, any associated payload will not be sent by the ter-
minal until the card acknowledges the command. The
counterfeit card thus cannot tell whether to request a pay-
load (for terminal → card commands) or send the com-
mand code to the genuine card immediately (for card →
terminal commands).
Were the counterfeit terminal to incorporate a charac-
ter level card reader, the partial command code could
be sent to the genuine card and the result examined to
determine the direction, but this is not permissible for
APDU level transactions. Hence, the controlling soft-
ware must be told the direction for each of the 14 com-
mand codes. Other than this detail, the relay attack
is protocol-agnostic and could be deployed against any
ISO 7816 based system.
3.2 Procedure and timing
EMV offers a large variety of options, but the generality
of the relay attack allows our implementation to account
for them all; for simplicity, we will describe the proce-
dure for the common case in the UK. That is, SDA card
authentication (only the static cryptographic signature of
the card details is checked), online transaction autho-
rization (the merchant will connect to the issuer to ver-
ify that adequate funds are available) and ofﬂine plaintext
PIN cardholder veriﬁcation (the PIN entered by the card-
holder is sent to the card, unencrypted, and the card will
check its correctness).
Transaction authorization is accomplished by the card
generating an application cryptogram (AC), which is au-
thenticated by the card’s symmetric key and incorpo-
rates transaction details from the terminal, a card transac-
tion counter, and whether the PIN was entered correctly.
Thus, the issuing bank can conﬁrm that the genuine card
was available and the correct PIN was used. Note that
this only requires symmetric cryptography, and so will
work even with SDA-only cards, as issued in the UK.
The protocol can be described in six steps:
Initialization: The card is powered up and returns the
ATR. Then the terminal selects one of the possible
payment applications offered by the card.
Read application data The terminal requests card de-
tails (account number, name, expiration date etc.)
and veriﬁes the static signature.
USENIX Association
16th USENIX Security Symposium
91
Cardholder veriﬁcation: The cardholder enters their
PIN into the merchant’s terminal and this is sent to
the card for veriﬁcation. If correct, the card returns
a success code, otherwise the cardholder may try
again until the maximum number of PIN attempts
have been exceeded.
Generate AC 1: The terminal requests an authorization
request cryptogram (ARQC) from the card, which
is sent to the issuing bank for veriﬁcation, which
then responds with the issuer authentication data.
External authenticate: The terminal sends the issuer
authentication data to the card.
Generate AC 2: The terminal asks the card for a trans-
action certiﬁcate (TC) which the card returns to the
terminal if, based on the issuer authentication data
and other internal state, the transaction is approved.
Otherwise, it returns an application authentication
cryptogram (AAC), signifying the transaction was
denied. The TC is recorded by the merchant to
demonstrate that it should receive the funds.
This ﬂow imposes some constraints on the relay at-
tack. Firstly, Alice must insert her card before Carol in-
serts her counterfeit card in order for initialization and
read application data to be performed. Secondly, Al-
ice must enter her PIN before Carol is required to en-
ter it into the genuine terminal. Thirdly, Alice must not
remove her card until the Generate AC 2 stage has oc-
curred. Thus, the two sides of the radio link must be
synchronised, but there is signiﬁcant leeway as Carol can
stall until she receives the signal to insert her card.
After that point, the counterfeit card can request extra
time from the terminal, before sending the ﬁrst response,
by sending a null procedure byte (0x60). The counter-
feit terminal can also delay Alice by pretending to dial-
up the bank and waiting for authorization until Carol’s
transaction is complete.
All timing critical sections, such as sending the ATR
in response to de-assertion of reset and the encod-
ing/decoding of bytes sent on the I/O, are implemented
on the FPGA to ensure a fast enough response. There
are wide timing margins between the command and re-
sponse, so this is managed in software.
3.3 Results
We tested our relay setup with a number of different
smartcard readers in order to test its robustness. Firstly,
we used a VASCO Chip Authentication Program (CAP)
reader (a similar device, but manufactured by Gemalto, is
marketed by the UK bank Barclays as PINsentry). This
is a handheld one-time-password generator for use in on-
line banking, and implements a subset of the EMV pro-
tocol. Speciﬁcally, it performs cardholder veriﬁcation
by checking the PIN and requests an application cryp-
togram, which may be validated online. Our relay setup
was able to reliably complete transactions, even when
we introduced an extra three seconds of latency between
command and response. While the attack we describe
in most detail uses the counterfeit card in a retail out-
let, a fraudster could equally use a CAP reader to access
the victim’s online banking. This assumes that the PIN
used for CAP is the same as for retail transactions and
the criminal knows all other login credentials.
The CAP reader uses a 1 MHz clock to decrease power
consumption, but at the cost of slower transactions. We
also tested our relay setup with a GemPC Twin reader,
which operates at a 4 MHz frequency. The card reader
was controlled by our own software, which simulates
a Chip & PIN transaction. Here, the relay device also
worked without any problems and results were identical
to when the card was connected directly to the reader.
Finally, we developed a portable version of the equip-
ment, and took this to a merchant with a live Chip & PIN
terminal. With the consent of the merchant and card-
holder, we placed a transaction with our counterfeit card
in the genuine terminal, and the cardholder’s card in the
counterfeit terminal. In addition to the commands and re-
sponses being relayed, the counterfeit terminal was con-
nected to a laptop which, through voice-synthesis soft-
ware, read out the PIN to our “Carol”. The transaction
was completed successfully. One such demonstration of
our equipment was shown on the UK consumer rights
programme BBC Watchdog on 6th February 2007.
3.4 Further applications and feasibility
The relay attack is also applicable where “Alice” is not
the legitimate card holder, but a thief who has stolen the
card and observed the PIN. To frustrate legal investiga-
tion and fraud detection measures, criminals commonly
use cards in a different country from where they were
stolen. Magnetic stripe cards are convenient to use in
this way, as the data can be read and sent overseas, to
be written on to counterfeit cards. However, chip cards
cannot be fully duplicated, so the physical card would
need to be mailed, introducing a time window where the
cardholder may report the card stolen or lost.
The relay attack can allow fraudsters to avoid this de-
lay by making the card available online using a card
reader and a computer connected to the Internet. The
fraudster’s accomplice in another country could connect
to the card remotely and place transactions with a coun-
terfeit one locally. The timing constraints in this sce-
nario are more relaxed as there is no customer expecting
92
16th USENIX Security Symposium
USENIX Association
to remove their genuine card. Finally, in certain types
of transactions, primarily with unattended terminals, the
PIN may not be required, making this attack easier still.
APACS, the UK payment association, say they are un-
aware of any cases of relay attacks being used against
Chip & PIN in the UK [5]. The reason, we believe, is
that even though the cost and the technical expertise that
are required for implementing the attack are relatively
low, there are easier ways to defeat the system. Methods
such as card counterfeiting/theft, mail interception, and
cardholder impersonation are routinely reported and are
more ﬂexible in deployment.
These security holes are gradually being closed, but
card fraud remains a lucrative industry – in 2006 £428m
(≈ $850m) of fraud was suffered by UK banks [6]. Crim-
inals will adapt to the new environment and, to maintain
their income, will likely resort to more technically de-
manding methods, so now is the time to consider how to
prevent relay attacks for when that time arrives.
4 Defences
The previous section described how feasible it is to de-
ploy relay attacks against Chip & PIN and other smart-
card based authorization systems in practice. Thus, sys-
tem designers must develop mitigation techniques while,
for economic consideration, staying within the deployed
EMV framework as much as possible.
4.1 Non-solutions
In this section we describe a number of solutions that are
possible, or have been proposed, against our attack and
assess their overall effectiveness.
Tamper-resistant terminals A pre-requisite of our re-
lay attack is that Alice will insert her card and enter her
PIN into a terminal that relays these details to the re-
mote attacker. The terminal, therefore, must either be
tampered with or be completely counterfeit, but still ac-
ceptable to cardholders. This implies a potential solution
– allow the cardholder to detect malicious terminals so
they will refuse to use them. Unfortunately, this cannot
be reliably done in practice.
Although terminals do implement internal tamper-
responsive measures, when triggered, they only delete
keys and other data without leaving visible evidence to
the cardholder. Tamper-resistant seals could be inspected
by customers, but Johnston et al. [21] have shown that
many types of seals can be trivially bypassed. It would
also be infeasible to give all customers adequate training
to detect tampering or counterfeiting of seals. By induc-
ing time-pressure and an awkward physical placement of
the terminal, the attacker can make it extremely difﬁcult
for even a diligent customer to check for tampering.
Even if it was possible to produce an effective seal,
there are, as of May 2007, 304 VISA approved terminal
designs from 88 vendors [24], so cardholders cannot be
expected to identify them all. Were there only one termi-
nal design, the use of counterfeit terminals would have to
be prevented, which raises the same problems as tamper-
resistant seals. Finally, with the large sums of money
netted by criminals from card fraud, fabricating plastic
parts is well within their budget.
Imposing additional timing constraints While relay
attacks will induce extra delays between commands be-
ing sent by the terminal and responses being received,
existing smartcard systems are tolerant to very high la-
tencies. We have successfully tested our relay device
after introducing a three second delay into transactions,
in addition to the inherent delay of our design. This
extra round-trip time could be exploited by an attacker
450 000 km away, assuming that signals propagate at the
speed of light. Perhaps, then, attacks could be prevented
by requiring that cards reply to commands precisely af-
ter a ﬁxed delay. Terminals could then conﬁrm that a
card responds to commands promptly and will otherwise
reject a transaction.
Other than the generate AC command, which includes
a terminal nonce, the terminal’s behaviour is very pre-
dictable. So an attacker could preemptively request these
details from the genuine card then send them to the coun-
terfeit card where they are buffered for quick response.
Thus, the value of latency as a distance measure can only
be exploited at the generate AC stages. Furthermore,
Clulow et al. [12] show how wireless distance bounding
protocols, based on channels which were not designed
for the purpose, can be circumvented. Their comments
apply equally well to wired protocols such as ISO 7816.
To hide the latency introduced by mounting the re-
lay attack, the attacker aims to sample signals early and
send signals late, while still maintaining their accuracy.
In ISO 7816, cards and terminals are required to sample
the signal between the 20% and 80% portion of the bit-
time and aim to sample at the 50% point. However, an
attacker with sensitive equipment could sample near the
beginning, and send their bit late. The attacker then gains
50% of a bit-width in both directions, which at a 5 MHz
clock is 37 µs, or 11 km.
The attacker could also over-clock the genuine card so
the responses are returned more quickly. A DES calcu-