title:Updatable Anonymous Credentials and Applications to Incentive Systems
author:Johannes Bl&quot;omer and
Jan Bobolz and
Denis Diemert and
Fabian Eidens
Updatable Anonymous Credentials and
Applications to Incentive Systems
Johannes Bl¨omer
Jan Bobolz
Denis Diemert
Fabian Eidens
August 23, 2019
Department of Computer Science
Paderborn University, Germany
{jan.bobolz,fabian.eidens}@uni-paderborn.de
Abstract
We introduce updatable anonymous credential systems UACS and use them to construct a
new privacy-preserving incentive system. In a UACS, a user holding a credential certifying
some attributes can interact with the corresponding issuer to update his attributes. During
this, the issuer knows which update function is run, but does not learn the user’s previous
attributes. Hence the update process preserves anonymity of the user. One example for a class
of update functions are additive updates of integer attributes, where the issuer increments an
unknown integer attribute value v by some known value k. This kind of update is motivated by
an application of UACS to incentive systems. Users in an incentive system can anonymously
accumulate points, e.g. in a shop at checkout, and spend them later, e.g. for a discount.
In this paper, we (1) formally deﬁne UACS and their security, (2) give a generic construction
for UACS supporting arbitrary update functions, and (3) construct a new incentive system using
UACS that is eﬃcient while oﬀering oﬄine double-spending protection and partial spending.
Keywords: Anonymous Credentials, Updatable Anonymous Credentials, Privacy, Incentive System,
Incentive Collection, Customer Loyalty Program
1 Introduction
Updatable anonymous credential systems. Anonymous credential systems provide a privacy-
preserving way of authentication in contrast to the standard authentication through identiﬁcation
via username and password. Authentication with identifying information allows service providers to
collect and exchange user-speciﬁc data to build a comprehensive user proﬁle without the user’s consent.
Anonymous credentials mitigate such problems, provide anonymity, and support authentication
policies [BCKL08, BBB+18, CL01, CL04, DMM+18]. A credential is parameterized with a vector
of attributes (e.g., birth date, affiliation, subscription end) and when authenticating, users
can prove possession of a credential that fulﬁlls a certain access policy (e.g., “affiliation =
university or subscription end > [today]”) without revealing anything about the attributes
except that they fulﬁll the access policy.
An extended abstract of this paper appears in the proceedings of CCS’19, ACM.
This work was partially supported by the German Research Foundation (DFG) within the Collaborative Research
Centre “On-The-Fly Computing“ under the project number 160364472 – SFB 901/3.
1
While authentication is perfectly anonymous in an anonymous credential system, the issuer
of a credential always learns the credentials’ plaintext attributes. Suppose that a user wants to
extend a subscription for which she has a credential as described above. To extend the subscription
in a traditional anonymous credential system, she would reveal all her attribute values to the
issuer, who would then issue a new credential containing her old attributes and the newly updated
subscription end value. This means that updating attributes is not privacy-preserving.
To solve this problem, we introduce updatable anonymous credential systems (UACS). A UACS
has, in addition to the usual (issue and show) protocols of anonymous credential systems, an update
protocol. This allows a user to interact with a credential issuer in order to update attributes in a
privacy-preserving manner. More speciﬁcally, the update protocol takes as input an update function
ψ. The user contributes a hidden parameter α and her old credential with attributes ~A. By running
the protocol with the issuer, the user obtains a new credential on attributes ~A∗ = ψ( ~A, α). The
issuer only learns what update function ψ is applied, but does not learn ~A or α.
In the subscription update scenario, to add 30 days to the current subscription end, the update
function would be deﬁned as ψ((A, subscription end), α) = (A, subscription end + 30).
In this
particular case, the hidden parameter α is ignored by ψ, but we will later see update functions that
depend on α, e.g. to issue hidden attributes.
The update protocol can be eﬃciently realized using only building blocks already used by most
anonymous credential constructions: Zero-knowledge proofs, commitments, and blind signature
schemes with eﬃcient “signing a committed value” protocols.
The idea to implement the UACS update protocol between a user and issuer is as follows: A user’s
credential on attributes ~A is a digital signature on ~A by the issuer. The user prepares the update by
computing her updated attributes ~A∗ = ψ( ~A, α) and committing to ~A∗. The user then proves that
she possesses a valid signature on her old attributes ~A under the public key of the issuer and that
she knows α such that the commitment can be opened to ψ( ~A, α). Afterwards, issuer and user run
a blind signature protocol to jointly compute a signature on the committed ~A∗ (i.e. the updated
attributes) without revealing ~A∗ to the issuer.
The lack of privacy-preserving updates (as explained above) limits the usefulness of anonymous
credentials in several practical applications, such as service subscription management and point
collection. In such applications, attributes (such as the subscription end or collected point total) are
routinely updated and users would prefer not to be tracked through these updates. As a speciﬁc
example of what UACS enables, we look at incentive systems, which is essentially a point collection
application.
Incentive systems. An incentive system allows users to collect points (e.g., for every purchase
they make), which they can redeem for bonus items or discounts. Such systems aim at reinforcing
customer loyalty and incentivize certain behavior through points. In practice, such systems are
centralized services, e.g. German Payback [PAY19] and American Express Membership Rewards
program [Ame19]. In order to earn points for a purchase, the user reveals her customer ID (e.g., by
showing a card). This means that the user’s privacy is not protected as every purchase made can be
linked to the user’s identity by the incentive system provider.
To remedy this, cryptographic incentive systems [MDPD15, JR16, HHNR17] aim at allowing users
to earn and spend points anonymously. The general idea is that users store their own points in
authenticated form (e.g., in the form of a credential).
We would expect a cryptographic incentive system to oﬀer the following features.
• Anonymity: Providers are unable to link earn/spend transactions to users. In practice, this
protects users from having their shopping history linked to their identity and point values.
• Online double-spending protection: A user cannot spend more points than they have earned.
2
Given continuous access to a central database, the provider can immediately detect double-
spending.
• Oﬄine double-spending protection: Detecting double-spending works for stores without con-
tinuous access to a central database. Double-spending transactions can be detected and the
perpetrating user can be identiﬁed. Losses incurred by double-spending can be reclaimed from
that user.
• Partial spending: Users do not have to spend all of their points at once.
• Eﬃciency: The process of earning and spending points can be run on a consumer phone and is
fast enough to be accepted by users.
The current state of the art either does not have oﬄine double-spending protection, or does not
handle the combination of partial spending and oﬄine double-spending securely. Our system will
oﬀer all of these features simultaneously.
We will now explain our UACS-based incentive system by constructing it step by step. As a
ﬁrst sketch, let us assume that the user stores her point count v as an attribute in her credential.
When the user earns k additional points, the incentive system provider runs an update on the user’s
credential, adding k points to her current point count attribute v, i.e. they use update function
ψ((v), α) = (v + k). When the user wants to (partially) spend k ≤ v points, they run an update ψ
such that ψ((v), α) = v − k if v ≥ k and ψ((v), α) =⊥ otherwise.
Of course, this ﬁrst sketch does not prevent users from double-spending their points: the spend
update operation creates a new credential with lowered point count, but there is no mechanism
that forces the user to use the new credential. She can instead keep using the old one, which
certiﬁes a higher point count. Hence we modify the ﬁrst sketch with basic online double-spending
protection: The attributes now include a random double-spend identiﬁer dsid, i.e. attribute vectors
are of the form ~A = (dsid, v). To earn points, the update function still just increases the point
count (ψ((dsid, v), α) = (dsid, v + k)). When the user wants to spend points, she reveals her dsid
to the provider and the provider checks that her speciﬁc dsid has never been revealed to it (spent)
before. If that check succeeds, the user chooses a random successor double-spend identiﬁer dsid∗
and sets her hidden update parameter α to dsid∗. Finally, user and provider run the update
ψ((dsid, v), α = dsid∗) = (dsid∗, v − k), embedding a new dsid∗ into the successor credential. If the
user tries to spend her old credential (with the old dsid) again, the provider will detect the duplicate
dsid. Anonymity is still preserved because dsid∗ is hidden from the provider until the credential is
spent.
However, this approach requires all stores where points can be spent to be permanently online
in order to check whether a given dsid has already been spent. As this is a problem in practice,
oﬄine double-spending protection is desirable. The idea is that stores that are oﬄine and have an
incomplete list of spent dsids may incorrectly accept a spend transaction, but they can later (when
they are online again) uncover the identities of double spenders. This allows the provider to recoup
any losses due to oﬄine double-spending by pursuing a legal solution to roll back illegal transactions.
To incorporate oﬄine double-spending protection, we additionally embed a user’s secret key usk
and a random value dsrnd into credentials, i.e. attributes are now ~A = (usk, dsid, dsrnd, v). The
update function to earn points is unchanged. To spend points, the provider now sends a random
challenge γ to the user and the user reveals c = usk · γ + dsrnd mod p (where usk, dsrnd are values
from her credential attributes). The user chooses new hidden random dsid∗, dsrnd∗ for its successor
credential and then runs the update for ψ((usk, dsid, dsrnd, v), α = (dsid∗, dsrnd∗)) = (usk, dsid∗,
dsrnd∗, v − k). As long as a credential is only spent once, usk is perfectly hidden in c. If the user
tries to spend the same credential a second time, revealing c0 = usk · γ0 + dsrnd mod p for some
diﬀerent challenge γ0, the provider can compute usk from c, c0, γ, γ0, identifying the double-spender.
3
This last description comes close to the scheme we present in this paper. However, one problem
remains to handle: assume some user double-spends a credential on attributes (usk, dsid, dsrnd,
v). For both spend transaction, she receives a remainder amount credential as the successor with
attributes ~A∗ = (usk, dsid∗, dsrnd∗, v − k). While both transactions will be detected as double
spending and the user’s key is revealed, the user can keep using both remainder amount credentials
anonymously, allowing her to spend 2 · (v − k) > v points. To prevent this, we need a mechanism
that allows us to recognize remainder amount credentials that were derived from double-spending
transactions. This can be achieved by forcing the user to reveal an encryption ctrace of dsid∗ under
usk when spending points. As soon as a user double-spends, the provider can compute usk as above.
With it, he can decrypt all ctrace for that user, allowing him to ﬁnd out what dsids have been
derived from double-spending transactions of the double-spending user. Consequently, the user can
be held accountable for spending remainder tokens derived from double-spending transactions.
Related work on anonymous credential systems. There is a large body of work on anonymous
credential systems, extending the basic constructions [BCKL08, CL01, CL04, PS16] with additional
features such as revocation [CKS10, CL01], controlled linkability and advanced policy classes
[BBB+18], hidden policies [DMM+18], delegation [BB18, CDD17], and many others. Our notion of
privacy-preserving updates on credentials, in its generality, is a new feature (although the general
idea of privacy-preserving updates has been brieﬂy sketched before [NDD06]). We show how to
eﬃciently extend the standard blind-signature-based construction of anonymous credentials with
updates, which makes our update mechanism compatible with a large part of features presented in
existing work (with the exception of [DMM+18], which does not rely on blind signatures).
The scheme in [CKS10] allows issuers to non-interactively update credentials they have issued.
In contrast to our updatable credentials, their update cannot depend on hidden attributes and the
issuer learns all attributes issued or updated. Their update mechanism is mostly aimed at providing
an eﬃcient means to update revocation information, which is controlled by the issuer. Updatable
credentials in the sense of our paper allow for the functionality in [CKS10] as well (although in our
system, updates are done interactively between user and issuer). However, beyond that, our updates
can depend on hidden attributes of the user and the issuer does not learn the attributes resulting
from the update.
More technically similar to our updatable credential mechanism are stateful anonymous credentials
[CGH11, GGM14]. A stateful credential contains a state. The user can have his credential state
updated to some successor state as prescribed by a public state machine model. For this, the user
does not have to disclose his current credential state. Such a state transition is a special case of an
update to a state attribute in an updatable credential. In this sense, our construction of updatable
credentials generalizes the work of [CGH11].
Related work on incentive systems. Existing e-cash systems are related to incentive systems,
but pursue diﬀerent security goals [CHL05]. E-cash does not support the accumulation of points
within a single token. Instead, each token corresponds to a coin and can be identiﬁed. To spend a
coin, a user transfers it to another owner. In incentive systems, a number of points is accumulated
into a single token (i.e. the token is like a bank account rather than a coin).
A cryptographic scheme that considers the collection of points in a practical scenario is described
by Milutinovic et al. in [MDPD15]. Their scheme uCentive can be seen as a special e-cash system,
where a so called uCent corresponds to a point. The user stores and spends all uCents individually,
which induces storage and communication cost linear in the number of uCents (hence eﬃciency
is restricted). Similar to our system, uCentive builds upon anonymous credentials (but without
updates) and commitments, but they do not oﬀer oﬄine double-spending protection.
Jager and Rupp [JR16] introduce black-box accumulation (BBA) as a building-block for incentive
4
systems. They formalize the core functionality and security of such systems based on the natural
requirement that users collect and sum up values in a privacy-preserving way.
In detail, they
present a generic construction of BBA combining homomorphic commitments, digital signatures,
and non-interactive zero-knowledge proofs of knowledge (Goth-Sahai proofs [GS08]). The BBA
solution has three major shortcomings: the token creation and redemption processes are linkable,
users have to redeem all of their points at once, and stores must be permanently online to detect