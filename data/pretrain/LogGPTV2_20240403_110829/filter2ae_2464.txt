# PHP应用安全静态代码分析工具 – WAP 2.0【附使用方法】

##### 译文声明
本文为翻译文章，原文来源：360安全播报。译文仅供参考，具体内容和含义以原文为准。

WAP 2.0 是一款针对 PHP Web 应用程序的静态源代码安全分析及数据挖掘工具，旨在发现其中的安全漏洞，并且具有较低的误报率。通过实际使用，我们发现它能够有效检测出诸如文件包含等常见漏洞，但对于那些采用了复杂防御措施的注入攻击则无法识别。

## 使用方法

1. 进入 `wap` 目录并执行 `java -jar wap.jar -h` 命令来查看帮助文档。
2. 使用以下命令格式运行 WAP：
   ```
   wap [选项] -p <项目路径>
   wap [选项] <文件路径>
   ```
   
### 可用选项
- `-a` : 检测漏洞但不进行自动修正。
- `-s` : 仅显示简要总结信息。
- `-sqli` : 检测 SQL 注入漏洞；若未指定 `-a`，则会尝试自动修复。需要配合 `--dbms` 参数使用以指定数据库类型（支持 MySQL, DB2, PostgreSQL，默认为 MySQL）。
  ```shell
  java -jar wap.jar -sqli --dbms mysql /path/to/project/login.php
  ```
- `-ci` : 检测 RFI (远程文件包含)、LFI (本地文件包含)、DT (目录遍历)、SCD (源代码泄露)、OSCI (操作系统命令注入) 和 PHP 代码注入漏洞；如果不使用 `-a`，则将自动纠正问题。
  ```shell
  java -jar wap.jar -ci /path/to/project/login.php
  ```
- `-xss` : 检查反射型和存储型 XSS 攻击；如果未设置 `-a` 标志，则尝试自动修复。
  ```shell
  java -jar wap.jar -xss /path/to/project/login.php
  ```
- `-p <项目>` : 提供项目的完整路径。
  ```shell
  java -jar wap.jar -sqli -ci -xss -p /path/to/project
  ```
- `<file(s)>` : 列出一个或多个 PHP 文件的完整路径。
  ```shell
  java -jar wap.jar -sqli login.php upload_file.php
  ```
- `-h` : 显示帮助信息。
- `-out <输出路径>` : 将结果导出到指定位置。
  ```shell
  java -jar wap.jar -sqli login.php upload_file.php -out /path/to/output
  ```

### 功能特点
WAP 能够基于语义分析应用程序的源代码，对数据流进行全面追踪，例如从 $_GET, $_POST 等入口点开始跟踪，直至确认是否存在潜在的敏感操作执行风险。此外，在完成初步扫描后，该工具还会利用数据挖掘技术进一步验证所发现的问题是否真实存在还是误报。

### 兼容性
WAP 是用 Java 编写的，适用于 PHP 4.0 及更高版本的 Web 应用程序。

[**下载链接**](http://sourceforge.net/projects/awap/)