\--dport 22,88,8080,3306 -j ACCEPT
\[root@client50 \~\]# iptables -t filter -nL INPUT \--line-numbers
Chain INPUT (policy DROP)
num target prot opt source destination
1 ACCEPT tcp \-- 0.0.0.0/0 0.0.0.0/0 multiport dports 22,80,8080,3306
2 ACCEPT icmp \-- 0.0.0.0/0 0.0.0.0/0 icmptype 0
\[root@client50 \~\]# iptables -t filter -A INPUT -p icmp \--icmp-type
echo-request -m iprange \--src-range 192.168.4.51-192.168.4.56 -j ACCEPT
\[root@client50 \~\]# iptables -t filter -nL INPUT \--line-numbers
Chain INPUT (policy DROP)
num target prot opt source destination
1 ACCEPT tcp \-- 0.0.0.0/0 0.0.0.0/0 multiport dports 22,80,8080,3306
2 ACCEPT icmp \-- 0.0.0.0/0 0.0.0.0/0 icmptype 0
3 ACCEPT icmp \-- 0.0.0.0/0 0.0.0.0/0 icmptype 8 source IP range
192.168.4.51-192.168.4.56
## 网络型防火墙:
在两个网络之间运行的防火墙
![](media/image16.png){width="5.665972222222222in"
height="3.6034722222222224in"}
查看内核的路由转发功能:
\[root@client50 \~\]# sysctl -a \|grep ip_forward
net.ipv4.ip_forward = 1
net.ipv4.ip_forward_use_pmtu = 0
## 本机配置路由
15 systemctl stop NetworkManager #必须先停止
16 route add default gw 192.168.4.50 #添加路由
17 route del default gw 192.168.4.50 #删除路由
18 route -n #查看路由
## 网络防火墙实验
### 环境准备:
51 eth0:192.168.4.51 #作为内网客户端访问外网http
50 eth0:192.168.4.50 eth1:192.168.2.50 #作为网络防火墙
53 eth1:192.168.2.53 #作为外网网页客户端
添加地址命令参考:
nmcli connection add ifname eth1 type ethernet con-name eh1
connection.autoconnect yes
### 清空主机型防火墙规则:
\[root@client50 \~\]# iptables -t filter -P INPUT ACCEPT
\[root@client50 \~\]# iptables -t filter -F INPUT
\[root@client50 \~\]# iptables -t filter -nL INPUT \--line-numbers
Chain INPUT (policy ACCEPT)
num target prot opt source destination
\[root@client50 \~\]# iptables -t filter -nL \--line-numbers
Chain INPUT (policy ACCEPT)
num target prot opt source destination
Chain FORWARD (policy ACCEPT)
num target prot opt source destination
Chain OUTPUT (policy ACCEPT)
num target prot opt source destination
### 50配置规则
\[root@client50 \~\]# iptables -t filter -I FORWARD -p tcp \--dport 80
-j ACCEPT
\[root@client50 \~\]# iptables -t filter -I FORWARD -p tcp \--sport 80
-j ACCEPT
\[root@client50 \~\]# iptables -t filter -A FORWARD -p tcp \--dport 22
-j ACCEPT
\[root@client50 \~\]# iptables -t filter -A FORWARD -p tcp \--sport 22
-j ACCEPT
\[root@client50 \~\]# iptables -nL
Chain INPUT (policy ACCEPT)
target prot opt source destination
Chain FORWARD (policy DROP)
target prot opt source destination
ACCEPT tcp \-- 0.0.0.0/0 0.0.0.0/0 tcp spt:80
ACCEPT tcp \-- 0.0.0.0/0 0.0.0.0/0 tcp dpt:80
ACCEPT tcp \-- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22
ACCEPT tcp \-- 0.0.0.0/0 0.0.0.0/0 tcp spt:22
#  5：nat表典型应用
所有局域网内的主机共享同一个公网IP地址上网
## 53取消路由网关
取消上个实验
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
0.0.0.0 192.168.2.50 0.0.0.0 UG 0 0 0 eth1
192.168.2.0 0.0.0.0 255.255.255.0 U 100 0 0 eth1
192.168.122.0 0.0.0.0 255.255.255.0 U 0 0 0 virbr0
\[root@sql53 \~\]# route del default gw 192.168.2.50
\[root@sql53 \~\]# route -n
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
192.168.2.0 0.0.0.0 255.255.255.0 U 100 0 0 eth1
192.168.122.0 0.0.0.0 255.255.255.0 U 0 0 0 virbr0
\[root@sql53 \~\]# tcpdump -i eth1 port 80 #进行抓包
## 50清空规则
取消上个实验
\[root@client50 \~\]# iptables -t filter -F FORWARD
\[root@client50 \~\]# iptables -t filter -P FORWARD ACCEPT
\[root@client50 \~\]# iptables -nL
Chain INPUT (policy ACCEPT)
target prot opt source destination
Chain FORWARD (policy ACCEPT)
target prot opt source destination
Chain OUTPUT (policy ACCEPT)
target prot opt source destination
配置nat表的POSTROUTING链路
\[root@client50 \~\]# iptables -t nat -F
\[root@client50 \~\]# iptables -t nat -nL
Chain PREROUTING (policy ACCEPT)
target prot opt source destination
Chain INPUT (policy ACCEPT)
target prot opt source destination
Chain OUTPUT (policy ACCEPT)
target prot opt source destination
Chain POSTROUTING (policy ACCEPT)
target prot opt source destination
\[root@client50 \~\]# iptables -t nat -A POSTROUTING -s 192.168.4.0/24
-p tcp \--dport 80 -j SNAT \--to-source 192.168.2.50
最终效果:
51是192.168.4.51 能访问53的192.168.2.53的web,
51的路由是
\[root@sql51 \~\]# route -n
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
0.0.0.0 192.168.4.50 0.0.0.0 UG 0 0 0 eth0
# 案例
案例1：iptables基本管理
案例2：filter过滤和转发控制
案例3：防火墙扩展规则
案例4：配置SNAT实现共享上网
1 案例1：iptables基本管理
1.1 问题
本案例要求练习iptables命令的使用，按照要求完成以下任务：
关闭firewalld，开启iptables服务
查看防火墙规则
追加、插入防火墙规则
删除、清空防火墙规则
1.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：关闭firewalld，启动iptables服务
1）关闭firewalld服务器
\[root@proxy \~\]# systemctl stop firewalld.service
\[root@proxy \~\]# systemctl disable firewalld.service
2）安装iptables-services并启动服务
\[root@proxy \~\]# yum -y install iptables-services
\[root@proxy \~\]# systemctl start iptables.service
步骤二：熟悉iptables框架
1）iptables的4个表（区分大小写）：
iptables默认有4个表，nat表（地址转换表）、filter表（数据过滤表）、raw表（状态跟踪表）、mangle表（包标记表）。
2）iptables的5个链（区分大小写）：
INPUT链（入站规则）
OUTPUT链（出站规则）
FORWARD链（转发规则）
PREROUTING链（路由前规则）
POSTROUTING链（路由后规则）
步骤三：iptables命令的基本使用方法
1）iptabels语法格式
\[root@proxy \~\]# iptables \[-t 表名\] 选项 \[链名\] \[条件\] \[-j
目标操作\]
\[root@proxy \~\]# iptables -t filter -I INPUT -p icmp -j REJECT
\[root@proxy \~\]# iptables -t filter -I INPUT -p icmp -j ACCEPT
\[root@proxy \~\]# iptables -I INPUT -p icmp -j REJECT
//注意事项与规律：
//可以不指定表，默认为filter表
//可以不指定链，默认为对应表的所有链
//如果没有找到匹配条件，则执行防火墙默认规则
//选项/链名/目标操作用大写字母，其余都小写
\########################################################################
//目标操作：
// ACCEPT：允许通过/放行
// DROP：直接丢弃，不给出任何回应
// REJECT：拒绝通过，必要时会给出提示
// LOG：记录日志，然后传给下一条规则
iptables命令的常用选项如表-1所示。
表-1 iptables常用选项
2）iptables命令的使用案例
创建规则的案例：
\[root@proxy \~\]# iptables -t filter -A INPUT -p tcp -j ACCEPT
//追加规则至filter表中的INPUT链的末尾，允许任何人使用TCP协议访问本机
\[root@proxy \~\]# iptables -I INPUT -p udp -j ACCEPT
//插入规则至filter表中的INPUT链的开头，允许任何人使用UDP协议访问本机
\[root@proxy \~\]# iptables -I INPUT 2 -p icmp -j ACCEPT
//插入规则至filter表中的INPUT链的第2行，允许任何人使用ICMP协议访问本机
查看iptables防火墙规则
\[root@proxy \~\]# iptables -nL INPUT //仅查看INPUT链的规则
target prot opt source destination
ACCEPT udp \-- 0.0.0.0/0 0.0.0.0/0
ACCEPT icmp \-- 0.0.0.0/0 0.0.0.0/0
ACCEPT tcp \-- 0.0.0.0/0 0.0.0.0/0
\[root@proxy \~\]# iptables -L INPUT \--line-numbers
//查看规则，显示行号
num target prot opt source destination
1 ACCEPT udp \-- anywhere anywhere
2 ACCEPT icmp \-- anywhere anywhere
3 ACCEPT tcp \-- anywhere anywhere
删除规则，清空所有规则
\[root@proxy \~\]# iptables -D INPUT 3
//删除filter表中INPUT链的第3条规则
\[root@proxy \~\]# iptables -nL INPUT //查看规则，确认是否删除
\[root@proxy \~\]# iptables -F
//清空filter表中所有链的防火墙规则
\[root@proxy \~\]# iptables -t nat -F
//清空nat表中所有链的防火墙规则
\[root@proxy \~\]# iptables -t mangle -F
//清空mangle表中所有链的防火墙规则
\[root@proxy \~\]# iptables -t raw -F
//清空raw表中所有链的防火墙规则
设置防火墙默认规则
\[root@proxy \~\]# iptables -t filter -P INPUT DROP
\[root@proxy \~\]# iptables -nL
Chain INPUT (policy DROP)
... ...
2 案例2：filter过滤和转发控制
2.1 问题
本案例要求创建常用主机防火墙规则以及网络防火墙规则：
针对Linux主机进行出站、入站控制
利用ip_forward机制实现Linux路由/网关功能
在Linux网关上实现数据包转发访问控制
2.2 方案
根据防火墙保护的对象不同，防火墙可以分为主机型防火墙与网络型防火墙，如图-1所示。
主机型防火墙，主要保护的是服务器本机（过滤威胁本机的数据包）。
网络防火墙，主要保护的是防火墙后面的其他服务器，如web服务器、FTP服务器等。
2.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：iptables防火墙规则的条件
iptables防火墙可以根据很多很灵活的规则进行过滤行为，具体常用的过滤条件如表-2所示。
表-2 iptables过滤条件
1）主机型防火墙案例
\[root@proxy \~\]# iptables -I INPUT -p tcp \--dport 80 -j REJECT
\[root@proxy \~\]# iptables -I INPUT -s 192.168.2.100 -j REJECT
\[root@proxy \~\]# iptables -I INPUT -d 192.168.2.5 -p tcp \--dport 80
-j REJECT
\[root@proxy \~\]# iptables -I INPUT -i eth0 -p tcp \--dport 80 -j
REJECT
\[root@proxy \~\]# iptables -A INPUT -s 192.168.4.100 -j DROP
//丢弃192.168.4.100发给本机的所有数据包
\[root@proxy \~\]# iptables -A INPUT -s 192.168.2.0/24 -j DROP
//丢弃192.168.2.0/24网络中所有主机发送给本机的所有数据包
\[root@proxy \~\]# iptables -A INPUT -s 114.212.33.12 -p tcp \--dport 22
-j REJECT
//拒绝114.212.33.12使用tcp协议远程连接本机ssh（22端口）