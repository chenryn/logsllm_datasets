# 数字            elif s.isdigit():                count_dg += 1            
# 空格            elif s.isspace():                count_sp += 1            
# 中文            elif s.isalpha():                count_zh += 1            
# 特殊字符            else:                count_pu += 1在这段代码中，我使用了 for 循环来遍历每个字，然后通过 if分支结构进行判断，根据不同的类型对每次指定的类型进行累加。这样就完成了每个文件对字符数量的统计。完成统计后，又该如何对它们进行保存呢？我这里使用了字典 +列表的方式，用列表存储每个文件每一种字符的数量，为了能区分列表，我为它们分别取了一个名字，并把它们统一存储在字典当中。形成了字典的key 是字符串，value是列表的数据类型，它的格式如下：    {'count_en': [7, 7], 'count_dg': [0, 0], 'count_sp': [1, 1], 'count_zh': [2, 4], 'count_pu': [5, 5]}如何得到这种格式呢? 为了得到这种格式，我继续使用了列表的内置的append()函数，通过下面的代码实现了每个文件的每种类型分开进行统计的功能。      word_count["count_en"].append(count_en)        word_count["count_dg"].append(count_dg)        word_count["count_sp"].append(count_sp)        word_count["count_zh"].append(count_zh)        word_count["count_pu"].append(count_pu)总结来说，在进行不同类型的字数统计的过程中，我通过字符串和数字这两种数据类型实现了单个文件的字数统计。在多个文件的数量合并功能中，我又使用了字典和列表两种数据类型实现了多个文件中间结果的存储和最终字数统计。Python丰富的数据类型，可以让你更灵活地处理工作中的数据。我将完整代码放在 github中，你可以参考完整代码slate-object="inline"来理解我是如何在计算过程中使用字典、列表和字符串类型的。总结通过跨文件字数统计这个场景，我为你讲解了 Python的文件操作函数和如何选择更合适的数据类型。在进行文件的读写操作时，你需要注意被读写文件的路径、打开模式、字符编码这三个主要问题。同时，这三个问题也是新手在操作文件时会经常出现的错误的地方。尤其是打开模式的错误的设置为"w"将重要文件覆盖写入的问题，在 python初学者中经常出现，建议你先采用判断文件是否可读取的方式，避免对重要文件进行误写。现实工作中的场景往往是比较复杂的，我们经常要根据不同的场景，把文件内容读取到不同的数据类型的变量中。Python丰富的数据类型可以让你更灵活的操作工作中的数据，通过选择合适的数据类型，也能使用各种数据类型自带的函数，减少手动实现自定义函数的代码，节省你的代码编码时间。思考题最后我想留一道思考题给你，在进行多个文件的中、英文和标点符号各自的数量统计时，你会选择哪种数据类型，用来存放每个文件的字数统计数据呢？欢迎你来说出自己的想法。