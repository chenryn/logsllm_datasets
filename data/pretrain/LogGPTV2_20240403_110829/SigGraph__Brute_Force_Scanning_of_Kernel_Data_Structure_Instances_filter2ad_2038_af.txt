original samples of adore-ng-2.6, adore-ng-2.6’,
override, enyelkm 1.0 and port
those of hp,
linuxfu, modhide, cleaner from Linux 2.4 to Linux
2.6 where our experiment is based on. All these rootk-
its except adore-ng-2.6’ and override hide tasks
or kernel modules by manipulating pointers. For example,
adore-ng changes the connecting pointers of neighbor-
ing modules to hide its own module; and enyelkm calls
a list function (list del) that separates its own module
from the module list. As a result, the number of the ker-
nel modules counted by lsmod is one less than the number
of corresponding kernel objects revealed by SigGraph, with
the missing one being the rootkit module itself.
We point out that the success of kernel rootkit detec-
tion in these experiments is attributed to SigGraph’s pro-
vision of multiple alternative signatures (Section 7.3) for
the same data structure. With the kernel rootkit’s presence,
some pointers from/to a kernel object may be corrupted
and can no longer be used for signature matching. For ex-
ample, kernel modules are connected by list.next and
list.prev pointers, which are manipulated by rootkits.
Fortunately, SigGraph is able to generate alternative sig-
natures that do not involve those pointers. With such sig-
natures, SigGraph scanners accurately recognize the kernel
objects that are being hidden.
Finally,
rootkits adore-ng-2.6’ and override
have different attack mechanisms. They hide processes by
ﬁltering out information about the hidden processes using
injected code – without manipulating kernel objects. Sig-
Graph recognizes these objects using the default signature
of task struct without resorting to the alternative ones,
which leads to the detection of such attacks via view com-
parison.
Comparison with techniques based on global memory
mapping. A number of existing kernel rootkit detection
techniques rely on building a graph that maps the entire live
memory through pointers. The state of the art is KOP [10].
Based on Windows, it builds a global memory graph and
resolves function pointers through an advanced points-to
analysis. Due to the lack of its Linux implementation, we
implement a basic system based on global memory map-
ping by extending the crash utility. As a core dump
analysis infrastructure that resolves memory regions based
on type information, crash is extendable for customized
Rootkit
Name
adore-ng-2.6
adore-ng-2.6’
cleaner-2.6
enyelkm 1.0
hp-2.6
linuxfu-2.6
modhide-2.6
Target
Object
module
task struct
module
module
task struct
task struct
module
override
task struct
rmroots
rmroots’
task struct
module
Inside view
crash
SigGraph
# of obj.s
# of obj.s
Detected
# of obj.s
Detected
23
62
22
23
56
59
22
58
56
23
23
63
22
23
57
60
22
59
N/A
N/A

X


X
X

X


24
63
23
24
57
60
23
59
55
24
X
X
X
X
X
X
X
X
X
X
Description of the Rootkit Attack
Hide its own module (self-hiding)
Hide one process using injected code
Hide the next module of the rootkit
Hide its own module (self-hiding)
Hide one process with a given PID
Hide one process with a given name
Hide one module with a given name
Hide one process using injected code
Destroy static data structures to hide
Destroy static data structures to hide
Table 4. Experimental result on kernel rootkit detection
memory analysis.
In particular, our extension involves a
Python script to build a global memory graph by exploring
the points-to relations. We consider a rootkit detected if the
hidden kernel object (module or task) is reachable in the
graph. Table 4 presents the results. The extended crash
detects 4 out of the 8 real-world rootkits. It is not a surprise
that crash detects adore-ng-2.6’ and override as
they do not manipulate kernel object pointers. For hp-2.6
and linuxfu-2.6, even though the rootkit tasks are hid-
den from the task list, they are still reachable via other
data structures in the memory graph (more speciﬁcally
via data structures for process scheduling). However,
such alternative reachability is not available when running
adore-ng-2.6, cleaner-2.6, enyelkm 1.0, and
modhide-2.6 and hence crash misses them.
We note that global memory graph-based techniques rely
on each object’s reachability from the root(s) of the graph.
In other words, an object cannot be properly typed if it is
not reachable from the root(s). As a result, it is conceivable
that future rootkits may try to destroy such reachability. For
example, a rootkit may identify a cut of the global mem-
ory graph and destroy (or obfuscate) the pointers along the
cut. Consequently, objects not reachable from the original
roots become un-recognizable. As an extreme example, we
construct two such rootkits: rmroots and rmroots’ (the
last two rows in Table 4). They hide task struct and
module instances, respectively and, to destroy evidence at
the end of the attack, they “wipe out” the static kernel data
structures listed in the kernel symbol table (system.map)
so that the rest of the memory becomes un-mappable.
In comparison, SigGraph shows better
robustness
In our experiment with the
against such an attack.
rmroots rootkit, there are 56 running processes right be-
fore the static kernel object wipe-out. Soon after the wipe-
out, the system crashes due to pointer corruption and a
kernel memory snapshot is taken. We run the extended
crash on the kernel memory image but it fails to construct
the global memory graph due to the absence of static ker-
nel objects. On the other hand, SigGraph is able to iden-
tify 55 instances of task struct, including the one that
was hidden before the wipe-out (The missing one is actu-
ally init task, an instance of task struct that has
been cleared). For our experiment with rmroots’, the Sig-
Graph scanner successfully identiﬁes all 24 kernel modules
including the one being hidden.
8.2 Kernel Version Inference
Another application of SigGraph is the determination
of OS kernel version based on a kernel memory snap-
shot. Consider the following scenario: A public cloud com-
puting platform hosts virtual machines (VMs) with vari-
ous OS kernels.
In order to perform virtual machine in-
trospection [15, 18, 25] on these guest VMs (e.g., for
intrusion/malware detection and usage auditing), a pre-
requisite is to know the speciﬁc version of a guest’s OS ker-
nel [16, 36, 5]. The kernel type/version is critical to accu-
rately interpreting the VM’s system state and events by the
VMM. However, such information is not always available
to the cloud provider (e.g., the cloud provider only knows
that a VM runs Linux but doesn’t know which version).
Currently guest kernel version can be determined via
value invariants (e.g., as adopted in [18]). We instead pro-
pose using SigGraph-based data structure signatures as a
more accurate kernel version indicator. To validate our pro-
posal, we take 9 more Linux kernels ending with an even
version number from 2.6.12 to 2.6.34. We select this range
because they all work with our gcc-4.2.4-based imple-
mentation. If a selected version has multiple sub versions,
we take the latest one. Together with the 5 Linux kernels
already tested (marked with *), we have a total of 14 kernel
versions, which are listed in the 1st column of Table 5.
Version indicator selection. We ﬁrst compile these kernels
using the default conﬁguration to get all their data struc-
ture deﬁnitions. We then derive SigGraph-based signatures
for all data structures. After that we try to select one data
structure whose signatures in different kernel versions can
be used to differentiate the kernel versions. The main re-
quirements for such a data structure D are: (1) It should
be commonly present in the execution of all kernels; and
(2) Its signatures should be distinctive across different ker-
In other words, for each kernel version i, we shall
nels.
ﬁnd a signature Si of D that will recognize instances of D
in and only in memory images of kernel version i. In the
end, we are not able to ﬁnd a single data structure that can
differentiate all the 14 kernels due to the similarity among
them.
(In fact, we ﬁnd that two of the kernels share the
same data structure deﬁnitions.) However, we do ﬁnd that
Linux
kernel
version
2.6.12-6
2.6.14-7
2.6.15-1*
2.6.16-62
2.6.18-1*
2.6.20-15*
2.6.22-19
2.6.24-26*
2.6.26-8
2.6.28-10
2.6.30-1
2.6.31-1*
2.6.32-17
2.6.34-2
thread
info
process
name
mm struct
active
mm
mm
task struct
real
parent
parent
list head
tasks
ptrace
children
ptrace
list
children
sibling
uniqueness?
Signature
4
4
4
4
4
4
4
4
4
4
4
4
4
4
436
428
428
432
428
404
408
461
505
508
496
500
504
512
108
120
120
120
152
128
132
164
188
176
220
220
228
220
112
124
124
124
156
132
136
168
192
180
224
224
232
224
152
164
164
164
196
172
176
208
232
220
268
268
268
276
156
168
168
168
200
176
180
212
236
224
272
272
272
280
84
96
96
96
128
104
108
140
164
168
192
192
200
192
92
104
104
104
136
112
116
148
172
248
296
296
296
304
100
112
112
112
144
120
124
156
180
256
304
304
304
312
160
172
172
172
204
180
184
216
240
228
276
276
276
284
168
180
180
180
212
188
192
224
248
236
284
284
284
292
X


X
X
X
X
X
X
X
X
X
X
X
Table 5. Detailed ﬁeld offsets of task struct for kernel version inference
data structure task struct satisﬁes the above require-
ments for most of the kernels. The offsets and types of ﬁelds
in task struct involved in the signatures are presented
from the 2nd to 12th column in Table 5. We can see that
there are only two kernels (2.6.14-7 and 2.6.15-1) that can-
not be distinguished using task struct’s signatures. To
validate, we take snapshots of these kernels and then scan
the snapshots using the 13 distinct signatures. We succeed
in uniquely identifying 12 of the 14 kernels. The 2 kernels
that we cannot tell apart are two consecutive Linux kernels
with no signiﬁcant differences in data structure deﬁnitions.
9 Discussion
While SigGraph-based signatures are capable of iden-
tifying kernel data structure instances as demonstrated in
Sections 7 and 8, we believe that there may be more so-
phisticated attempts to evade SigGraph in the future. In this
section, we discuss possible attacks against SigGraph, as-
suming that the attacker has knowledge about SigGraph and
has gained control of the kernel.
Malicious Pointer Value Manipulation. The ﬁrst type of
attacks are to manipulate pointers as SigGraph relies on
inter-data structure topology induced by pointers. However,
compared to non-pointer values, pointers are more sensitive
to mutation as changes to a pointer value may very likely
lead to kernel crashes. Note that re-pointing a pointer to
another data structure instance of the same type may not af-
fect SigGraph in discovering the mutated instance. While
the attacker may try to manipulate pointer ﬁelds that are not
used, recall that SigGraph has a dynamic reﬁnement phase
that gets rid of such unused or undependable ﬁelds before