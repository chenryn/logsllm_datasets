Python加载pyc文件时，加载器才能知道在什么时候应该进行什么样的加载动作。
一个对象结束，新的对象开始，而且也知道了新对象是什么类型的对象。只有这样，
识正是Pyton定义的类型信息，
WFTLE:
#detine
#define
#define
#define
#define TYPE_NONE
我们先来看一看Pyhon将字符串写入到pyc文件的过程：
#defineTYPE_NULL
[import.c]
这里我们也只考虑tp有效的情况，即写入到文件中。这时，WP工LE可以看作是一个
向pyc文件写入字符串
到了这里，可以看到，Python对于PyCodeobject对象的导出动作其实是不复杂的。
第7章Python的编译结果
Pyobject
在了解Python如何将字符事写入到pyc文件中的机制前，我们首先需要介绍一个在写
FIIE
这些标识同样也是在importc中定义的：
TYPE_DICT
TYPE_STRINGREF
YPE
深度探索动态语言核心技术
ipr
*strings; /*aict on marshal,list on unmarshal */
STRING
如果Python在pyc文件中发现这样的标识，则预示着上
一个是对数值的写入，一个是对字符事的写入。上面其
-Code对象与pyc文件
---
## Page 155
通的字符串，这时的处理就非常简单了，先是写入字符串的类型标识TYPE_STRING，然后
代码清单7-2
（见代码清单7-2）。
已经被创建了。在w_object中对于字符串的处理部分，我们可以看到对strings的使用
[w_object()in marshal.c]
在向pyc文件中写入一个字符串时，可能会发生3种情况。第一种情况是写入一个普
可以看到，
w_object(x,
wf.fp = fp
WEILE WE:
if（PyString_Check（v））
W_string(PyString_AS_sTRING(v),n,p);
n=Pystring_GBT_SIZE（v）;
7/写入字符串
7/写入字符串的长度
else
7[4]：写入普通string
连
w_byte(EYPE_STRING,
//[1]：获得eyStringobject对象在stxinga中的序号
（P->SLxingS && PyString_CHECK_INTERNED（V)）
//写入字符串的类型TYPE_STRING
else
//[3]：intern字串的首次写
Pyobject
WFTLE的strings在真正开始将Pycodebject写入到pyc文件之前，就
Wbyte(TYPE_INIERNED)
PyDiat_setItem(p->strings,
(o)
Lang w
&w）
(version>Oy 2PyDict_New(）=NULL;
D):
GetItem(p->strings
D:
Python源码剖析
7.3
Pyc文件的生成
一深度探索动态语言核心技术
125
---
## Page 156
126
Python源码剖析
3个string在以后pyc文件被加载时都需要进行intern操作。对于前两个string，没有
实际上维护着（PyStringobject，PyIntObject）这样的映射关系。那么这个PyIntobject
PyDict_New创建的PyDicEObject对象。在strings所指向的这个pyDictObject对象中，
WFILE 中的strings会在PyMarshal_WriteObjectToFile中被设置为指向一个通过
调用w_long写入字符串的长度，最后通过w_string写入字符串本身：这一切在代码清
同的键出现。不看strings，只是看一看pyc文件，我们就知道，问题来了。在pyc文件
是按照上两个string一样吗？如果这样的话，
的写入后，WFILE.strings与pyc文件的情况如图7-4所示：
任何问题，按照代码清单7-2的[3]处的动作，闭着眼晴写入就是了。完成了前两个tring
符串被加入到wF工E.strings中的序号有什么意义呢？好，让我们来考虑下面的情形。
WFILE.strings中的字符串。更准确地说，是第几个被写入到pyc文件中的intern字符串
对象的值是什么呢？这个值表示的是对应的pyStringobject对象是第儿个被加入到
pyc文件写入字符串的过程中究竟扮演了一个怎样的角色。实际上，之前我们已经看到，
入字符串时会遇到的另外两种情况：intern字符串的首次写入和intern字符串的非首次写
的字符串。对这种字符串，又会分为首次写入和非首次写入的情况，这就是Pyhon在写
单7-2的[4]处完成。
图7-5所示：
在普通字符串之外，Pyhon还会碰到写入需要在以后加载pyc文件时进行intern操作
第7章Python的编译结果
Python为什么需要这个PyIntobect对象的值，看上去似乎有些奇怪，记录一个字
我们先不管PyDictobject可不可能实现图7-5中所展示的strings,
在写入第3个字符串的时候，麻烦来了。对于这个“Jython”，我们应该怎么处理呢？
为了理解这两种情况的区别，我们需要了解wFILE结构中的strings域在Pyhon向
一深度探索动态语言核心技术
Ruby
Uython
Jython
Ruby
Jython
注意，pyc文件中的括号和运号是为了方便理解所添加
图7-4
图7-5强行第二次写入“Jython”后的pyc文件
写入“Jython”和“Ruby”之后的pyc文件
Code对象与pyc文件
(t,.6.Jythonjt.4,Ruby)(t,6,Jyhon)
写入后，wFILE.strings和pyc的情况如
(t,6.Jython)(t,4.Ruby)
pyc file
pycfile
因为不可能有相
---
## Page 157
PyListobject对象了。PyListobject是支持索引访问的，是不是有些明了了？
样会用到wFILE，而这时strings 再也不是一个PyDictobject对象，而是一个
记录的序号是用于加载pyc文件的过程的。而更加有趣的是，在加载pyc文件时，我们同
绝对没有索引访问的能力的，那么这个序号究竞还有什么用呢？
道理，但是既然strings是个PyDictobject对象，而我们知道，PyDictObject对象是
会看得更清楚。
个索引值到wrILE.strings中去查找，就能找到需要的string了，这一点，在后面我们
这个东西。在解析pyc文件时，这个标志表明后面的一个数值表示了一个索引值，根据这
计者，你能忍受这样的设计吗？当然不能。于是Python的设计者给了我们TYPE_STRINGREF
pyc文件会变得多么雕肿，而其中充斥的只是毫无价值的元余信息。如果你是Pyhon的设
串，
也写入到pyc文件中。这样，在pyc文件中，“button”将出现多次。想象一下吧，我们的
我们又在多处使用了button这个变量。Python在对pyc文件进行写入时，需要将变量名
一下在Python代码中，我们定义了符号button，就假设一个变量名为button，在此之后，
中，出现了重复的内容，关于“uython”的信息重复了两次，这会引起什么麻烦呢？想象
没错，这个被记录的序号，在写入pyc的过程中，毫无用处。真正有越的是，这个被
到了这里，我们有些迷惑了，好吧，看上去记录字符串插入strings的序号好像有些
Python会首先于代码清单7-2的[]处在strings中查找其中是否已经记录了该字符
查找成功，流程转移到代码清单7-2的[2]处，Python进入intern字符串的非首次写入，
查找失败，流程转移到代码清单7-2的[3]处，Python进入intern字符串的首次写入，
这个查找动作会导致两个结果。
好了，为了对这个过程有一个更清晰的了解，我们来总结一下。对于一个intem字符
有了TYPE_STRINOREF，我们的pyc文件就能变得苗条了，如图7-6所示：
文件中。
在首次写入时，Python会进行两个独立的动作：
将类型标识TYPE_INTERND和字符串本身写入到pye文件中。
将（字符串，序号）添加到strings中：
Uython
Ruby
图7-6
采用了TYPE_STRINGREF后的pyc文件
Python源码剖析
（t.6,Jython）(t，4.Ruby）(R.0)
pycfile
7.3Pyc文件的生成
一深度探索动态语言核心技术
127
---
## Page 158
Python源码剖析
7.3.3
128
PyCodeObject对象调用pyMarshal_WriteObjectToFile操作。刹那间，我们竞然看到
而在write_compiled_module中我们又亲眼看到，Pyhon运行环境只会对一个
个demo.py吗？我们说那段简单到什么都做不了的python代码就要产生3个PyCodeobject。
标志后面的数值O位索引访间wFILE，strings，立刻可得到字符串“Jython”。
问strings，从而就获得了已经进行了intern操作的PyStringObect 对象。
操作，同时将intern操作的结果添加到stringe这个PyListobject中。
ObjectFromP1le中可以看到。
了两个遗失的pyCodeObject对象。
文件时，WFILE.strings将是一个PyListObject对象，这一点在PyMarshal_Read-
对象，
Byobject
[marahal.e]
一个PyCodeObject，多个PyCodeObject
随后，当Python从pyc文件中读到TYPE_STRINGREF时，会根据其后跟随的序号值访
Pyuhon显然不会犯这样低级的错误，想象一下，如果你是Python的设计者，这个问
到了这里，关于PyCodeobjecE与pyc文件，出现了一个有趣的问题。还记得前面那
看一下加载pyc文件的过程，就能对这个机制更加地明了。前面我们提到，在读入pyc
第7章Python的编译结果
在加载紧接着的（R，O）时，因为解析到是一个TYPE_STRINGREF标志，所以直接以
所以在读入前两个字符串后，wFILE.strings的情形如图7-7所示：
当Python读到了TvPE_INTERND后，会将其后的字符串读入，将这个字符串进行intern
Python进入r_object之后，就开始从pyc文件中读入数据，并创建PyCodeobject
，这个r_object是wobject的逆运算，所以，你应该可以猜想得到它的整个流程
returnresult;
resule
PyObject*result:
RPILE rf;
*PyMarshal_ReadobjectPromFile(FILB *fp)
一深度探索动态语言核心技术
(t.6.Jython）(t.4.Ruby）(R.0)
图7-7加载“Jython”和“Ruby”之后的WFILEstrings
object(&rf）
=PyList
pycfile
注：粗体部分表示已经加载的部分
_New(0):
-Code对象与pyc文件
Jython
Ruby
---
## Page 159
7.4
中，一共定义了104条字节码指令：
虚拟机剖析时的重点。现在我们仅仅对Pyton字节码做一个粗略的介绍。不管怎么说，
化性质预示着我们能够以XML的形式来将pyc文件进行可视化。马上，你就可以看到这
object对象也是以一种嵌套的关系联系在一起的。
最终所有的ryCodeobject对象都会被写入到pyc文件中去。所以，pyc文件中的 pyCode-
个PyCodeObject对象，那么就会递归地执行写入pyCodeObject对象的操作。如此下去，
object对象的藏身之处，如图7-8所示：
机就是根据这些字节码来进行一系列的操作，从而完成对Python程序的执行。在Pyton2.5
现在也应该和它们打个招呼了。
里并不会对Python字节码进行详细的介绍，这一部分将是我们在以后的章节中对Python
PyCodeObject对象中的，而Pycodeobject结构中的co_consts域正是这两个pyCode
现在清楚了，与Fun和A对应的ryCodeObject 对象一定是包含在与demo.py对应的
用域就呈现出一种嵌套的结构，这种结构也正是PyCodeObject对象之间的结构。所以到
PyCodeobject中的。没错，确实如此，还记得我们最开始指出的Pyhon是如何确定一个
题该如何解决？很自然地，我们会假想，有两个pyCodeObject对象一定是包含在另一个
#deEIne EXTENDEp_ARG143
Python的字节码
一激动人心的结果。
#define CALD FUNCTION_KW
#define
#define
#define SToP_CODE
[opcode.h]
这种嵌套的关系意味着pyc文件中的二进制数据实际是一种有结构的数据，这种结构
我们知道，Python源代码在执行前会被编译为Pyhon的字节码指令序列，Pyhon虚拟
关于Python的编译结果，我们还剩下最后一个话题了，那就是Pyhon的字节码。这
在对一个PyCodeobject 对象进行写入到pyc文件的操作时，如果碰到它包含的另一
ROT TWO
CALL
POP
HUNCILTON
图7-8PyCodeObject对象之间的嵌套结构
VAR_KW
co_conists
PyCodeObject象
142
Python源码剖析
7.4Python的字节码
一深度探索动态语言核心技术
129
---
## Page 160
Python源码剖析
7.5解析pyc文件
130
图7-9展现的是PycParser对本章前面的那个demo.py的解析结果。
PycParser的工程，在其中实现了将pyc文件转换为可视的XML文件的一个简单的方法。
利用我们现在所知道的一切，我们真的可以这么做了。在本书附带的代码中有一个名为
自己写一个pyc文件解析器，以XML的形式输出解析结果，将pyc文件可视化。没错，
我们提到，基于我们对pyc文件的了解，可以做一些非常有趣的事了。呢，说白了，
断一条字节码指令是否需要参数：
的。所有需要参数的字节码指令的编码都大于或等于90。Pyhon中提供了专门的宏来判
有许多人不得不很郁闷地面对MFC。
这可能是历史遗留下来的，你知道，在咱们这行，历史问题可不怎么好处理，搞得现在还
#aeFine HAS_ARG(OP)((OP)>=HAVE_ARGUMENT)
编码并没有按顺序增长，比如编码为5的ROT_FOUR指令之后就是编码为9的NOP指令。
令的编码却到了143，似乎字节码指令的编码有跳跃。没错，Pyton2.5中字节码指令的
也可以到下面的网址察看：http://doc.python.org/ib/bytecodes.html。
#Gefine HAVE_ARGUMENT 90
[opcode.h]
好了，到了现在，关于PyCodeobjeet和pyc文件的一切我们都已了如指掌了。前面
细心的你一定发现了，虽然Python2.5中只定义了104条字节码指令，但是字节码指
第7章Python的编译结果
在Pyhon2.5的104条字节码指令中，有一部分是需要参数的，另一部分是没有参数
所有这些字节码的操作含义在Pyhon自带的文档中有专门的一页进行描述，当然，
深度探索动态语言核心技术
CPycfile
图7-9PycParser的解析结果
iStr
ngt-48value=binary"/
Code对象与pyc文件
就是
---
## Page 161
和co_varnames之间是有区别的，co_names中会记录所有的符号，而co_varnames中，
对象是作为符号存在的，这些符号通常保存在co_names和co_varnames中，如图7-10
个结果也将作为下一章对Pyton虚拟机的分析的开始：
到：
与这条字节码指令对应的Pyhon源代码的位置可以通过下面的算法（Pyhon伪代码）得
是那个co_lnotab啦。假如现在我们知道了字节码指令在co_code中的偏移地址，那么
而且这个pyc文件中还记录了每一条字节码指令与Python源代码行号的对应关系，嗯，就
在生成pyc文件时，会将pyCodeObject 对象中的字节码指令序列也写入到pyc文件中：
好地理解PyCodeobject对象中主要的域所包含的信息了。
变了。
co_names一样的，同样包含A，Fun，a这三个符号，但是在Python2.5中，这一点被改
所记录的则是所有用于局部变量的符号。在Pyhon2.4.3中，这里的co_varnames是和
所示
对象，就是除了一些pyStringobject对象之外的所有对象，因为有的 RyStringobject
象，实际上在co_consts中，包含了Python源文件中所定义的所有常量对象。所谓常量
Object对象的co_consts中，包含了另外的 PyCodeobject对象，同时还包含了别的对
[declare.py]
1ineno=addr=0
or addr