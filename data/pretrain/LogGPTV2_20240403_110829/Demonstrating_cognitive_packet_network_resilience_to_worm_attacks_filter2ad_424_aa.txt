title:Demonstrating cognitive packet network resilience to worm attacks
author:Georgia Sakellari and
Erol Gelenbe
Demonstrating Cognitive Packet Network Resilience to
Worm Attacks
Georgia Sakellari
Imperial College London
Erol Gelenbe
Imperial College London
Intelligent Systems & Networks Group
Dept of Electrical & Electronic Engineering
Intelligent Systems & Networks Group
Dept of Electrical & Electronic Engineering
SW7 2BT, London, UK
PI:EMAIL
SW7 2BT, London, UK
PI:EMAIL
ABSTRACT
The need for network stability and reliability has led to the
growth of autonomic networks [2] that can provide more sta-
ble and more reliable communications via on-line measure-
ment, learning and adaptation. A promising architecture is
the Cognitive Packet Network (CPN) [5] that rapidly adapts
to varying network conditions and user requirements using
QoS driven reinforcement learning algorithms that drive the
routing control. Contrary to conventional mechanisms, the
users rather than the nodes, control the routing by specifying
their desired QoS requirements (QoS Goals), such as Min-
imum Delay, Maximum Bandwidth, Minimum Cost, etc.,
and the network then routes each user’s traﬃc individually
based on their speciﬁc needs and on a “glocal” view. In CPN
the user has the ability to explore the network for its own
needs, and evaluate its own impact on the network as a whole
and vice-versa, and then take appropriate decisions. CPN
routing has been evaluated extensively under normal operat-
ing conditions and has proven to be very adaptive to network
changes such as congestion. Here we show how CPN can re-
spond and survive to catastrophic node failures caused by
the spread of network worms. This survival is based on two
complementary approaches that are run concurrently: one
the one hand, each user attempts to concurrently and adap-
tively avoid paths which are infected, and secondly patching
algorithms are continuously run to repair the network. Ex-
periments show that this approach assures the stability of
network communications throughout the course of an at-
tack.
Categories and Subject Descriptors
C.4 [Performance of Systems]: Fault tolerance, Reli-
ability; C.2.2 [Network Protocols]: Routing protocols;
K.6.5 [Security and Protection]: Invasive software (e.g.,
viruses, worms, Trojan horses)
General Terms
Measurement, Performance, Reliability
Keywords
Reliability, Routing protocols, Cognitive packet network,
Self-aware networks, Network worms
Copyright is held by the author/owner(s).
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
ACM 978-1-4503-0244-9/10/10.
1. THE COGNITIVE PACKET NETWORK
(CPN)
CPN routing [9, 11, 10, 6, 4, 5, 21] was designed to perform
self-improvement by learning from the experience of special
“smart packets” (SPs) that constantly probe the network. In
addition to SPs that are used for discovery, CPN also uses
source routed dumb packets (DP) to carry the payload, and
acknowledgement (ACK) packets to bring back information
that has been discovered by SPs. This information brought
back by ACKs is used in nodes to train neural networks via
a Reinforcement Learning (RL) algorithm that has a rela-
tively short memory to produce routing decisions. The role
of SPs is to explore the network and discover the best routes,
according to a QoS goal, for each source-destination pair in
the network. At each hop SPs are routed according to the
experiences of previous packets with the same goals and the
same destination. The term “goal” is used instead of “QoS
speciﬁcations” to emphasize the fact that there are no QoS
guarantees and that CPN provides a best eﬀort service [22].
The decisions of the SPs are based on a learning algorithm.
In order to explore all possible routes, at some hops, each
SP makes a random routing decision, with a small probabil-
ity (usually 5%). To avoid overburdening the system with
unsuccessful requests or packets which are in eﬀect lost, all
packets have a life-time constraint based on the number of
nodes they have visited.
Several algorithms have been used in CPN as learning
and decision techniques in order for SPs to ﬁnd satisfactory
routes from source to destination based on the desired goals.
As far as the decision process is concerned, Random Neural
Networks (RNNs) [3] are mainly used. The RNN is a biolog-
ically inspired model which is characterised by the existence
of positive (excitation) and negative (inhibition) signals in
the form of spikes of unit amplitude that circulate among
neurons and alter the potential of the neurons. Each neuron
can be connected to another neuron and each connection is
characterized by an excitatory or inhibitory weight [15]. The
state of a neuron, which represents the probability that the
neuron is excited, satisﬁes a system of nonlinear equations
with a unique solution. Therefore, in a CPN network, at
each node a speciﬁc RNN that has as many neurons as the
possible outgoing links, represents the decision to choose a
given output link for a SPs. The arrival of SPs triggers the
execution of RNN and the routing decision is the output link
corresponding to the most excited neuron.
The learning algorithm that was designed into CPN is Re-
inforcement Learning (RL); this resulted from prior studies
636of the routing of autonomous mobile agents in a dangerous
landscape [15]. RL is used to change synaptic weights in
order to reward or punish a neuron according to the level
of goal satisfaction measured on the corresponding output.
Therefore the decisional weights of a RNN are increased or
decreased based on the observed success or failure of subse-
quent SPs to achieve the goal. Thus RL will tend to prefer
better routing schemes, more reliable access paths and bet-
ter QoS.
The CPN has been shown to be eﬀective for a variety of
uses [21], including traﬃc balancing [13], power-based rout-
ing in mobile ad hoc networks [8] and admission control (AC)
[14]. From the security aspect, the authors of [7] investi-
gated the application of defence techniques on the resilience
of the CPN against DoS attacks. They introduced a generic
framework of DoS protection based on the dropping of prob-
able illegitimate traﬃc, and presented a mathematical model
with which one can measure the impact that both attack
and defence have on the performance of a network. Their
CPN-based distributed DoS defence technique exploits the
ability of the CPN to trace traﬃc going both downstream
and upstream, owing to SPs and ACK packets. When a
node detects an attack, it uses the ACKs to ask all interme-
diate nodes upstream to drop the packets of the attack ﬂow.
Each node is allowed to select the maximum bandwidth that
it will accept from any ﬂow that terminates at the node and
the maximum bandwidth that it allocates to a ﬂow that tra-
verses the node. These parameters may vary dynamically as
a result of other conditions, and they can also be selected
based on the identity and the QoS needs of the ﬂows. When
a node receives an SP or DP from a ﬂow that it has not previ-
ously encountered (e.g. with a new source–destination pair,
or a new QoS class), it sends a Flow-ACK packet back to
the source along the reverse path and informs the source of
its bandwidth allocation. The node monitors the ﬂows that
traverse it and drops packets of any ﬂow that exceeds the al-
location; it may also inform upstream nodes that packets of
this ﬂow should be dropped. Other possible actions include
diverting the ﬂow into a ‘honeypot’ or to a special network.
This generic defence was further improved by using prior-
itization and rate-limiting instead of simple dropping [12,
19]. The same authors have also introduced a DoS detec-
tion mechanism that makes use of on-line statistics collected
by the CPN protocol’s monitoring system and fused them
with a RNN [18]. More analytically, the scheme uses input
features to capture both the instantaneous behaviour and
the longer-term statistical properties of the traﬃc.
In an
oﬀ-line information gathering step, it obtains the probabil-
ity density function, estimates and evaluates the likelihood
ratios for the input features. During the real-time decision
step it measures and calculates the features of the incom-
ing traﬃc, ﬁnds the likelihood ratios corresponding to those
values and aggregates these likelihood values using an RNN.
The overall architecture outputs a numerical value that is a
measure of having an on-going attack in the network, which
is consequently used in the prioritization and rate-limiting
mechanisms previously mentioned [20, 17].
2. EMULATING NETWORK WORMS
Network worms are malicious self-replicating and self- prop-
agating applications that exploit the system vulnerabilities
of some operating systems and spread through networks.
Their deﬁning characteristic is their ability to achieve high
infection rates; they can spread and saturate a network very