root of unity in Fp. If we replace the {1, . . . , n} signer IDs
n }i∈[n], then N(cid:48)(x) can be evaluated at
with roots of unity {ωi−1
any subset of signer IDs with a single Fast Fourier Transform
(FFT). This is much faster than a polynomial multipoint
evaluation, which performs many polynomial divisions, each
involving many FFTs. Our fast Lagrange implementation from
§IV-A takes advantage of this optimization. Furthermore, we
use roots of unity to compute inverses faster in both our naive
and fast Lagrange implementations (see §IV-A). For example,
n) much
in naive Lagrange, we compute N (0) =(cid:81)
i∈T (0 − ωi
faster as (−1)|T| · ω
i∈T i
.
(cid:80)
n
B. Authenticated Multipoint Evaluation Trees (AMTs)
In this section, we improve KZG’s Θ(nt) time for comput-
ing n proofs for a degree-bound t polynomial to Θ(n log t)
time. Our key technique is to commit to the quotients in
a polynomial multipoint evaluation (see §II-E), obtaining an
authenticated multipoint evaluation tree (AMT). However, our
new AMT evaluation proofs are logarithmic-sized, whereas
KZG proofs are constant-sized. As a result, when we apply
AMTs to scale VSS and DKG later in §§III-C and III-D,
we slightly increase communication complexity and recon-
struction time. Nonetheless, in §IV, we demonstrate that the
time saved in proof computation more than makes up for
these smaller increases. Throughout this section, we restrict
ourselves to computing AMTs at points {1, 2, . . . , n} on
polynomials of degree t − 1  t − 1 points seems to require committing to
degree n > t − 1 accumulator polynomials (e.g., to the root
accumulator (xn − 1)). Yet this is not possible given only
(t − 1)-SDH parameters, as ensured by the (t − 1)-polyDH
assumption (see Appendix B). Fortunately, when computing
an AMT, divisions by accumulators of degree > t − 1 always
give quotient zero (see Appendix A). This means that, when
pairing such quotients with their accumulators during proof
veriﬁcation, the result will always be 1GT (see Equation (3)).
In other words, such pairings need never be computed and
so their corresponding accumulators (of degree > t − 1)
need never be committed to. Furthermore, quotients are not
problematic since they always have degree  n/2. Speciﬁcally, we reduce
eVSS’s dealing time from Θ(nt) to Θ(n log t) by replacing
KZG proofs with AMT proofs. We call this new VSS protocol
AMT VSS and describe it below.
1) Faster dealing: The difference between AMT VSS and
eVSS is very small. First, players’ shares are computed as
si = φ(ωi−1
N ) (rather than φ(i) as in eVSS), where N is the
smallest power of two ≥ n. Second, instead of using (slow)
KZG proofs, the dealer computes an AMT for φ at points
{ωi−1
N }i∈[n], obtaining the shares si for free in the process.
Then, as in eVSS, the dealer sends each player i its share si
but now with an AMT proof πi (see §III-B1). The veriﬁcation
round, complaint round and reconstruction phase remain the
same, except they all use AMT proofs now.
AMT VSS’s dealing time is Θ(n log t), dominated by the
time to compute an AMT. This is a signiﬁcant reduction from
eVSS’s Θ(nt) time, but comes at a small cost due to our larger
AMT proofs. First, the veriﬁcation round time increases from
Θ(1) to Θ(log t). Second, the complaint round complexity
increases from O(t) to O(t log t) time and communication
(but we improve it in §III-C2). Third, the reconstruction phase
time increases from Θ(t log2 t+n) to O(t log2 t+n log t) (but
we improve it in §III-C3). Finally, the overall communication
increases from Θ(n) to Θ(n log t). Nonetheless, in §IV-B,
we show AMT VSS’s end-to-end time is much smaller than
eVSS’s, which makes these increases justiﬁable.
2) Faster complaints: Kate et al. previously point out that
KZG batch proofs (see §II-B1) can be used to reduce the
communication and the concrete computational complexity
of eVSS’s complaint round [14]. Suppose S is the set of
complaining players. Without batch proofs, the dealer only
has to broadcast |S| previously-computed KZG proofs and
each player has to verify them by computing 2|S| pairings.
With batch proofs, the dealer spends Θ(|S| log2 |S| + t log t)
time to compute the batch proof and each player spends
Θ(|S| log2 |S|)) to verify it.
While batch proofs increase asymptotic complexity for the
dealer and players, the concrete complexity decreases, since
players now only compute two pairings rather than 2|S|.