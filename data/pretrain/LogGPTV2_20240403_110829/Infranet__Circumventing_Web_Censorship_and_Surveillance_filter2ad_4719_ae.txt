### 优化后的文本

#### 隐藏请求的调制与分析
我们通过调整隐藏请求中的参数 \( k \) 和 \( \beta \)，模拟了在实际网站上的浏览模式。通过对 nms.lcs.mit.edu 和 pdos.lcs.mit.edu 的 Web 访问日志进行分析，我们生成了每个页面对应的 \( k \) 和 \( \beta \) 值。随后，我们观察了从客户端 C 发送 1,740 条消息所需的可见 HTTP 请求的数量。实验结果如表所示。由于实际网站中 \( k \) 值的变化，调制隐藏消息所需的请求数量略高于图 11 中的数据。

| 网站 | 平均 \( k \) | 中位数 \( \beta \) |
| --- | --- | --- |
| nms.lcs.mit.edu | 8 | 6 |
| pdos.lcs.mit.edu | 12 | 4 |

**图 12. 不同大小数据检索所需请求数量**
每个可见的 HTTP 请求包含大约 1 kB 的隐藏消息。

**图 13. Infranet 对 Web 服务器性能的影响**
对于磁盘 I/O 绑定的工作负载，Infranet 响应器的性能与未修改的 Apache 服务器相当。

#### 下行通信
图 12 显示了 Infranet 请求者为了检索不同大小的隐藏消息所需发送的 HTTP 请求数量。每个可见的 HTTP 响应包含大约 1 kB 的隐藏消息。嵌入在一个可见 HTTP 响应中的数据量取决于两个因素：消息的压缩比和可以被隐写术嵌入到单个图像中的数据量。因此，根据请求的文档和用于嵌入隐藏响应的图像，发送一定量的隐藏数据所需的可见 HTTP 请求数量可能会有所不同。

我们对内容准备的主要操作进行了微基准测试。首先，我们运行了 outguess 的微基准测试，以确定其将数据嵌入图像的速度。测量结果显示，outguess 以每秒 20 kB 的速度嵌入数据，并且嵌入时间与覆盖图像的大小成正比。

我们还对 gzip 进行了微基准测试，以确定其计算需求以及在典型 HTML 文件上的压缩比。我们从 Nielsen Netratings [14] 和 IRCache [8] 中选择的 100 个热门网站获取了 index.html 页面；这些文件的中位大小为 10 kB。gzip 将这些 HTML 文件压缩到了原大小的 12% 至 90% 不等。在所有情况下，压缩一个 HTML 文件所需的时间不超过 20 毫秒。

为了确保 Infranet 请求者的可否认性，Infranet 响应者总是将随机或请求的数据嵌入到所服务的内容中。因为响应者必须不对 Infranet 请求者和普通 Web 客户端进行区分，所以启用 Infranet 的 Web 服务器在为所有客户端提供服务时会增加额外的开销。

因此，为了确定运行 Infranet 响应者的性能影响，我们将相同的请求序列提交给启用 Infranet 的 Apache 服务器和普通的 Apache 服务器。请求跟踪包含由 Infranet 请求者调制的 100 个热门网站的可见 HTTP 请求。

**图 13. 运行 Infranet 的额外开销**
由于服务器必须在每个图像中嵌入数据，无论它是否正在处理 Infranet 请求，运行 Infranet 会产生显著的性能损失。在 Infranet 响应者上，16% 的请求达到了 300 kB/s 或更低，89% 的请求传输速率在 1 MB/s 或以下。相比之下，在普通 Apache 服务器上，62% 的请求传输速率达到 1 MB/s 或以上。然而，对于磁盘 I/O 绑定的工作负载，Infranet 响应者的性能与常规 Apache 服务器相当。Infranet 的带宽从未低于未启用 Infranet 的 Apache 服务器的 32%，并且在 25% 的请求中达到或接近 90%。

我们的当前实现尚未优化，但我们相信可以通过预取或缓存常用审查内容来减少这种开销。另一种方法是预先计算站点上每个图像的 DCT 最低有效位。

#### 架构改进
迄今为止，我们假设 Infranet 请求者软件可以通过物理介质（如 CD-ROM）分发。然而，这种分发机制缓慢、容易留下证据，并且更容易被压迫性政府控制。因此，未来的增强功能将允许客户端通过 Infranet 本身下载 Infranet 请求者软件，从而自举 Infranet 请求者。

我们在第 3 节中提出的架构无法防止冒充攻击，即审查者可以建立 Infranet 响应者并通过识别发送有意义 Infranet 请求的 Web 客户端来发现请求者。图 14 展示了一个改进的系统架构，其中请求者通过可能不可信的转发器将可见的 HTTP 请求转发给可信的响应者，只有响应者才能恢复隐藏的请求。响应者获取并加密请求的内容，并通过转发器将其返回给请求者，转发器将加密内容隐藏在图像中。该方案提供了几个改进。首先，阻止访问 Infranet 变得更加困难，因为请求者可以通过联系任何转发器（可信或不可信）来获得访问权限。其次，审查者可以成为转发器，但要成为可信的响应者则更为困难。

在当前的隧道通信协议中，Infranet 请求者和响应者轮流发送消息。可以设想一种方案，使得用于获取请求内容的 HTTP 请求也可以用于发送下一个隐藏消息，从而将隐藏信息的检索与下一个隐藏消息的传输交织在一起。

由于有许多不同的调制和隐藏方法，隧道通信协议可能会有许多版本。隧道设置应包括版本协商，以便在某个特定版本的隧道协议被发现不安全时，请求者和响应者可以轻松地切换到另一个版本。

#### 结论
Infranet 使用户能够通过与可访问的 Web 服务器建立隐蔽通道来规避 Web 审查和监视。Infranet 请求者使用难以被审查者检测到的请求序列来组成秘密消息，而 Infranet 响应者则在公开返回的内容中隐蔽地嵌入数据。由此产生的流量类似于正常浏览产生的流量。因此，Infranet 既提供了对敏感内容的访问，又为用户提供了合理的否认性。

Infranet 使用了一种隧道协议，通过标准 HTTP 事务提供请求者和响应者之间的隐蔽通信通道。在上行方向，Infranet 请求者通过赋予 HTTP 请求附加语义来向 Infranet 响应者发送隐蔽消息。在下行方向，Infranet 响应者通过使用隐写技术将审查数据隐藏在未审查的图像中来返回内容。虽然下行保密性通过会话密钥实现，但上行保密性则是通过机密交换调制函数来实现的。

我们的上行和下行协议解决了两个独立的问题，每个问题都可以单独解决。尽管我们的协议针对下载 Web 页面进行了优化，但它实际上提供了一个任意双向通信的通道；例如，Infranet 可以用于执行远程登录会话。

我们的安全性分析表明，Infranet 可以成功绕过几种复杂的审查技术，从主动攻击到被动攻击再到冒充攻击。性能分析显示，Infranet 为隐蔽 Web 浏览提供了可接受的带宽。上游通信的范围映射算法允许请求者以与隐藏请求分布的二进制熵成比例的可见 HTTP 请求数量无害地传输隐藏请求。我们认为，广泛部署与 Web 服务器软件捆绑的 Infranet 响应者有可能克服网络上日益普遍的各种形式的审查和监视。

#### 致谢
感谢 Sameer Ajmani 和 Dave Andersen 提供了许多有益的讨论，以及 Frank Dabek、Kevin Fu、Kyle Jamieson、Jaeyeon Jung、David Martin 和 Robert Morris 对本文草稿的有用评论。

#### 参考文献
[1] M. Adler and B. Maggs. Protocols for asymmetric communication channels. In Proceedings of 39th IEEE Symposium on Foundations of Computer Science (FOCS), Palo Alto, CA, 1998.
...
[31] I. H. Witten, R. M. Neal, and J. G. Cleary. Arithmetic coding for data compression. Communications of the ACM, 30(6):520–540, February 1987.

希望这些修改能帮助您更好地传达您的研究内容。如果有更多需要调整的地方，请随时告知。