sites, we modulated hidden requests while varying k and
 according to the browsing patterns observed on a real
Web site. We analyzed the Web access logs for nms.lcs.
mit.edu and pdos.lcs.mit.edu to generate values
for k and  for each page on these sites. We then observed
the number of visible HTTP requests required to transmit
1,740 messages from C. Results from this experiment are
shown in the table below. The number of requests required
to modulate a hidden message is slightly higher than in Fig-
ure 11, since k varies for a real Web site.
SITE
nms.lcs.mit.edu
pdos.lcs.mit.edu
kavg MEDIAN
8
12
6
4
90%
10
6
60
55
50
45
40
35
30
25
20
15
10
a
t
a
d
e
v
e
i
r
t
e
r
o
t
s
t
s
e
u
q
e
r
f
o
r
e
b
m
u
N
10000
No Infranet
Infranet
1000
)
s
/
B
k
(
i
t
h
d
w
d
n
a
B
100
5
0
10000
20000
30000
50000
Size of requested data (bytes)
40000
60000
70000
80000
10
0
0.1
0.2
0.3
0.4
0.6
Percentage of Requests
0.5
0.7
0.8
0.9
1
Figure 12. Number of requests required to retrieve data
of various sizes. Each visible HTTP request contains
approximately 1 kB of a hidden message.
Figure 13. The overhead of running Infranet on Web
server performance. For disk bound workloads, an In-
franet responder performs comparably to an unmodiﬁed
Apache server.
7.3 Downstream Communication
7.4 Server Overhead
Figure 12 shows the number of HTTP requests that an
Infranet requester must make to retrieve hidden messages
of various sizes. Each visible HTTP response contains ap-
proximately 1 kB of a hidden message. The amount of
data that can be embedded in one visible HTTP response
depends on two factors—the compression ratio of the mes-
sage and the amount of data that can be steganographically
embedded into a single image. Thus, depending on the re-
quested document and the images used to embed the hidden
response, the number of visible HTTP requests required to
send a given amount of hidden data may vary.
We microbenchmarked the main operations involved in
content preparation. First, we ran a microbenchmark of
outguess in an attempt to determine the rate at which
it can embed data into images. Our measurements indicate
that outguess embeds data into an image at a rate of 20
kB/sec, and that the time that outguess takes to embed
data is proportional to the size of the cover image.
We also ran microbenchmarks on gzip to determine its
computational requirements, as well as the compression ra-
tios it achieves on typical HTML ﬁles. We fetched the in-
dex.html page from 100 popular Web sites that we se-
lected from Nielsen Netratings [14] and IRCache [8]; the
median ﬁle size for these ﬁles was 10 kB. gzip compressed
these HTML ﬁles to as much as 12% of their original size;
in the worst case, gzip compressed the HTML ﬁle to 90%
of its original size. In all cases, compression of an HTML
ﬁle never took more than 20 milliseconds.
To ensure plausible deniability for Infranet requesters,
Infranet responders always embed random or requested data
in the content they serve. Because the responder must make
no distinction between Infranet requesters and normal Web
clients, an Infranet-enabled Web server incurs additional
overhead in serving data to all clients.
Therefore, to determine the performance implications of
running an Infranet responder, we submitted an identical
sequence of requests to an Infranet-enabled Apache server
and an ordinary Apache server. The request trace contains a
sequence of visible HTTP requests that were generated by
using an Infranet requester to modulate the requests in the
set of 100 popular Web sites.
Figure 13 shows the additional overhead of running In-
franet. Because the server must embed every image with
data, regardless of whether it is serving an Infranet request
or not, running Infranet incurs a noticeable performance
penalty. 16% of all requests served on an Infranet responder
achieved 300 kB/s or less, and 89% of requests were trans-
ferred at 1 MB/s or less. In contrast, 62% of requests on a
normal Apache server were delivered at 1 MB/s or greater.
Nevertheless, for disk bound workloads, an Infranet respon-
der performs comparably to a regular Apache server. Band-
width achieved by Infranet never drops below 32% of that
achieved by an Apache server running without Infranet, and
is within 90% of Apache without Infranet for 25% of re-
quests. Our current implementation has not been optimized,
and we believe we can reduce this overhead. One way to do
so might be to pre-fetch or cache commonly requested cen-
sored content. The overhead of running outguess could
Infranet
Requester
URL
URL
Censor
Hidden
content
Hidden
content
Infranet
Forwarder
(UID, Link
number)
(UID,
Encrypted
content)
Infranet
Responder
Figure 14. An improved architecture separates the for-
warding and decoding of hidden messages in both di-
rections. This allows a potentially untrusted forwarder
to service requests and serve hidden content. The UID
serves to demultiplex requesters.
be reduced by pre-computing the least-signiﬁcant bits of the
DCT for each image on the site.
8 Enhancements
To this point, we have assumed that Infranet requester
software can be distributed on a physical medium, such as
a CD-ROM. However, this distribution mechanism is slow,
provides evidence for culpability, and is much easier for op-
pressive governments to control than electronic distribution.
Thus, a future enhancement would allow clients to down-
load the Infranet requester software over Infranet itself, es-
sentially bootstrapping the Infranet requester.
The architecture we presented in Section 3 does not pro-
tect against an impersonation attack whereby a censor es-
tablishes an Infranet responder and discovers requesters by
identifying the Web clients that send meaningful Infranet
requests. Figure 14 shows an improved system architec-
ture, where a requester forwards visible HTTP requests to a
trusted responder through a potentially untrusted forwarder,
such that only the responder can recover the hidden request.
Responders fetch and encrypt requested content and return
it to the requester through a forwarder, which hides the
encrypted content in images. This scheme provides sev-
eral improvements. First, blocking access to Infranet be-
comes more difﬁcult, because a requester can contact any
forwarder, trusted or untrusted, to gain access. Second, the
censor can become a forwarder, but it is much more difﬁcult
for the censor to become a trusted responder.
In the current tunnel communication protocol, an In-
franet requester and responder take turns transmitting mes-
sages.
It is conceivable that a scheme could be devised
whereby the HTTP requests used to fetch the requested con-
tent could also be used to transmit the next hidden message,
thus interleaving the retrieval of hidden information with
the transmission of the next hidden message.
Since there are many conceivable ways of performing
modulation and hiding, it is likely that there will be many
different versions of the tunnel communication protocol.
Tunnel setup should be amended to include version agree-
ment, such that if some particular aspect of the tunnel proto-
col in a given version is found to be insecure, the requester
and responder can easily adapt to run a different version.
9 Conclusion
Infranet enables users to circumvent Web censorship and
surveillance by establishing covert channels with accessible
Web servers. Infranet requesters compose secret messages
using sequences of requests that are hard for a censor to
detect, and Infranet responders covertly embed data in the
openly returned content. The resulting trafﬁc resembles the
trafﬁc generated by normal browsing. Hence, Infranet pro-
vides both access to sensitive content and plausible denia-
bility for users.
Infranet uses a tunnel protocol that provides a covert
communication channel between requesters and responders,
modulated over standard HTTP transactions.
In the up-
stream direction, Infranet requesters send covert messages
to Infranet responders by associating additional semantics
to the HTTP requests being made. In the downstream di-
rection, Infranet responders return content by hiding cen-
sored data in uncensored images using steganographic tech-
niques. While downstream conﬁdentiality is achieved using
a session key, upstream conﬁdentiality is achieved by con-
ﬁdentially exchanging a modulation function.
Our upstream and downstream protocols solve two in-
dependent problems, and each can be tackled separately.
Although our protocol is optimized for downloading Web
pages, it actually provides a channel for arbitrary two-way
communication; for example, Infranet could be used to
carry out a remote login session.
Our security analysis showed that Infranet can suc-
cessfully circumvent several sophisticated censoring tech-
niques, ranging from active attacks to passive attacks to im-
personation. Our performance analysis showed that Infranet
provides acceptable bandwidth for covert Web browsing.
The range-mapping algorithm for upstream communication
allows the requester to innocuously transmit a hidden re-
quest in a number of visible HTTP requests that is propor-
tional to the binary entropy of the hidden request distribu-
tion. We believe that the widespread deployment of Infranet
responders bundled with Web server software has the po-
tential to overcome various increasingly prevalent forms of
censorship and surveillance on the Web.
Acknowledgments
We thank Sameer Ajmani and Dave Andersen for sev-
eral helpful discussions, and Frank Dabek, Kevin Fu, Kyle
Jamieson, Jaeyeon Jung, David Martin, and Robert Morris
for useful comments on drafts of this paper.
[25] P. Syverson, M. Reed, and D. Goldschlag. Onion routing access
conﬁgurations. In DARPA Information Survivability Conference and
Exposition, pages 34–40, Hilton Head Island, SC, January 2000.
http://www.onion-router.net.
[26] The Cult of the Dead Cow (cDc).
Peekabooty.
http://
www-peek-a-booty.org.
[27] Triangle Boy.
http://fugu.safeweb.com/sjws/
solutions/triangle_boy.html.
[28] Voice of America. http://www.voa.gov/.
[29] M. Waldman and D. Mazi`eres. Tangler: A censorship-resistant pub-
lishing system based on document entanglements. In Proceedings of
the 8th ACM Conference on Computer and Communications Secu-
rity, Philadelphia, PA, November 2001.
[30] M. Waldman, A. Rubin, and L. Cranor. Publius: A robust, tamper-
In Proc. 9th
evident, censorship-resistant, web publishing system.
USENIX Security Symposium, pages 59–72, Denver, CO, August
2000.
[31] I. H. Witten, R. M. Neal, and J. G. Cleary. Arithmetic coding for data
compression. Communications of the ACM, 30(6):520–540, Febru-
ary 1987.
References
[1] M. Adler and B. Maggs. Protocols for asymmetric communication
channels. In Proceedings of 39th IEEE Symposium on Foundations
of Computer Science (FOCS), Palo Alto, CA, 1998.
[2] Anonymizer. http://www.anonymizer.com/.
[3] I. Clarke, O. Sandbert, B. Wiley, and T. Hong. Freenet: A distributed
anonymous information storage and retrieval system. In Proceedings
of the Workshop on Design Issues in Anonymity and Unobservability,
Berkeley, CA, July 2000.
[4] R. Dingledine, M. Freedman, and D. Molnar. The Free Haven
Project: Distributed anonymous storage service. In Proceedings of
the Workshop on Design Issues in Anonymity and Unobservability,
Berkeley, CA, July 2000.
[5] gzip. http://www.gzip.org/.
[6] F. Hartung and B. Girod. Digital watermarking of raw and com-
pressed video.
In Proc. European EOS/SPIE Symposium on Ad-
vanced Imaging and Network Technologies, pages 205–213, Berlin,
Germany, October 1996.
[7] A. Hintz. Fingerprinting websites using trafﬁc analysis. In Workshop
on Privacy Enhancing Technologies, San Francisco, CA, April 2002.
[8] IRCache. http://www.ircache.net/.
[9] B.W. Lampson. A note on the conﬁnement problem. Communica-
tions of the ACM, 16(10):613–615, October 1973.
[10] J. Lee. Companies compete to provide Saudi Internet veil, Novem-
ber 19, 2001. http://www.nytimes.com/2001/11/19/
technology/19SAUD.html.
[11] D. Martin and A. Schulman. Deanonymizing users of the SafeWeb
In Proc. 11th USENIX Security Symposium,
anonymizing service.
San Francisco, CA, August 2002.
[12] P. Meller. Europe moving toward ban on Internet hate speech,
November 10, 2001. http://www.nytimes.com/2001/11/
10/technology/10CYBE.html.
[13] A. J. Menezes. Elliptic Curve Public Key Cryptosystems. Kluwer
Academic Publishers, Boston, MA, 1993.
[14] Nielsen Netratings’ Top 25. http://pm.netratings.com/
nnpm/owa/NRpublicreports.toppropertiesweekly,
November 25, 2001.
[15] OpenSSL. http://www.openssl.org/.
[16] Outguess. http://www.outguess.org/.
[17] N. Provos. Defending against statistical steganalysis. In Proc. 10th
USENIX Security Symposium, Washington, D.C., August 2001.
[18] M. Reiter and A. Rubin. Crowds: Anonymity for web trans-
actions. ACM Transactions on Information and System Security
(TISSEC), 1:66–92, November 1998. http://www.research.
att.com/projects/crowds/.
[19] SafeWeb. http://www.safeweb.com/.
[20] L. J. Schulman and D. Zuckerman. Asymptotically good codes cor-
In Symposium on
recting insertions, deletions, and transpositions.
Discrete Algorithms, pages 669–674, 1997.
[21] Squid Web Proxy Cache. http://www.squid-cache.org/.
[22] L. Stein et al. Writing Apache Modules with Perl and C: The Apache
API and mod perl. O’Reilly and Associates, Sebastopol, CA, March
1999.
[23] Stunnel—universal SSL wrapper.
http://www.stunnel.
org/.
[24] Zero-Knowledge Systems. Freedom WebSecure. http://www.
freedom.net/products/websecure/.