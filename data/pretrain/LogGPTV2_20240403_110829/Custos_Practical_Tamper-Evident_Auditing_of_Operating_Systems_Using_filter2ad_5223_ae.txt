### Performance Evaluation of CUSTOS

#### 1. Comparison with Prior Work

To validate the effectiveness of CUSTOS, we conducted a direct comparison with existing solutions: SGX-Log [57, 123], a logger based on TPM2 hardware [34], and Hartung et al.’s scheme using BGLS signatures [40, 41]. 

**Note:** Currently, instances with hardware SGX capability are not available.

**Table V: Microbenchmarks on Logger Operations**

We report the median execution times over 500 runs, including results for the logging phase using both `ecalls` and `Hotcalls`. We compare CUSTOS with SGX-Log [57], TPM2 [34], and BGLS signatures [40], optimizing each system's parameters for performance.

| Phase              | CUSTOS        | SGX-Log   | TPM2     | BGLS    |
|--------------------|---------------|-----------|----------|---------|
| Initialization      | 94.55 ms      | –         | –        | –       |
| Startup            | 109.10 ms     | –         | –        | –       |
| Logging (ecalls)   | 4.71 µs       | 0.80 ms   | 20 ms    | 31.89 ms|
| Logging (Hotcalls) | 0.92 µs       | 0.79 ms   | –        | –       |
| Commitment         | 128.87 µs     | –         | 734 ms   | –       |
| Shutdown           | 188.98 µs     | –         | –        | –       |

**Key Observations:**
- CUSTOS' logging phase is the only one that can scale to more than a million events per second.
- For SGX-Log and BGLS, we set highly favorable parameters for performance.
- The critical logging phase, which dominates performance cost, shows that CUSTOS outperforms existing solutions by three to five orders of magnitude.
- CUSTOS can process up to 1,086,956 log events per second, while SGX-Log, TPM2, and BGLS can handle 1,266, 50, and 31 events per second, respectively.

#### 2. Vanilla Linux Audit Comparison

We instrumented `auditd` to measure the average time it takes to process a single event compared to CUSTOS. We ran this microbenchmark by measuring the time `auditd` takes to process 40,000 identical log events.

- **CUSTOS-enabled auditd**: 6.61 µs/event
- **Vanilla auditd**: 5.67 µs/event

CUSTOS imposes an average overhead of 16.6% on unmodified, insecure `auditd`. This overhead is conservative, as our measurement did not capture the time required for `auditd` to flush events to disk, making the actual overhead lower in practice. We conclude that CUSTOS' tamper-evident logging protocol imposes a reasonable overhead over insecure Linux Audit's log processing time.

#### 3. Application Benchmark Results

We report the medians over 10 runs for various applications. For `httpd` and `NGINX`, we used `apache bench` [119] configured to send 100,000 requests from a single thread. For `Redis`, we used the built-in `redis-benchmark` configured to send 250,000 requests from a single thread. For `Blast`, we ran two configurations: one-thread and multi-thread.

| Test Type          | Vanilla     | CUSTOS     | Overhead  |
|--------------------|-------------|------------|-----------|
| nginx              | 72 µs       | 73 µs      | 1.39%     |
| apache2            | 75 µs       | 76 µs      | 1.33%     |
| redis              | 23,520 ns   | 23,932 ns  | 1.75%     |
| blast              | 938.641 s   | 954.104 s  | 1.65%     |
| blast-multicore    | 222.791 s   | 237.027 s  | 6.39%     |

**Key Observations:**
- The runtime overheads of CUSTOS in the first four benchmarks are all under 2%.
- The `blast-multicore` benchmark, which is CPU-bound, shows a higher overhead of 6.39%.

#### 4. Audit Protocol Performance

We characterized the performance of CUSTOS' audit protocol, used in both centralized and decentralized auditing scenarios. We measured the end-to-end time required for audits, varying the number of logs transmitted.

**Figure 4: Time Required by an Auditor to Complete an Audit**

The measurements include all operations from challenge generation to result transmission. The cost of an audit grows linearly with the size of the response.

**Key Observations:**
- The time to complete an audit grows linearly with the size of the log.
- For a given audit interval \( T \), the breakdown point where audit challenges exceed the processing time is 145,000 events per second.

#### 5. Audit Frequency

We evaluated the decentralized auditing protocol by running CUSTOS on a cluster of 100 nodes, each with an auditing interval of \( T = 10 \) seconds, replication factor \( r = 1 \), and a fixed number of challenges per round \( w \).

**Figure 5: Cumulative Distribution Function of Audit Frequency**

Results are based on a 100-node network over 10 minutes of observation, with nodes initiating audit rounds every \( T = 10 \) seconds. When \( w = 4 \), 98.4% of the time, nodes were challenged again within \( T \) of receiving the last challenge.

**Key Observations:**
- More challenges decrease the size of the average log block and probabilistically reduce the time before each block is replicated.
- It is advantageous for administrators to use many audit challenges, as it verifies and replicates logs sooner with minimal increase in network cost.

#### 6. Enclave Memory Usage

We evaluated the memory usage of CUSTOS' enclave using the official Enclave Memory Measurement tool (sgx_emmt) from the Intel SGX SDK. The reported peak memory usage of CUSTOS is 5 KB of stack and 16 KB of heap, totaling 21 KB of memory, which is less than 0.02% of SGX’s protected memory.

**Key Observations:**
- CUSTOS utilizes enclave memory efficiently.
- Memory usage does not increase with the rate of log events, as only one event at a time is processed inside the enclave.

#### 7. Attack Case Study

We empirically demonstrated the effectiveness of CUSTOS at detecting log tampering by simulating a nation-state APT attack scenario from the DARPA Transparent Computing program dataset [59]. The attack involves a remote exploit of Firefox 54.0.1, followed by the download and execution of a malicious binary to achieve root access. The adversary then erases the logs to avoid detection.

**Key Observations:**
- CUSTOS successfully detected and replicated the logs, demonstrating its effectiveness in real-world attack scenarios.

### Conclusion

CUSTOS outperforms existing logging solutions by several orders of magnitude, imposes a reasonable overhead on unmodified systems, and effectively detects and replicates logs in the presence of sophisticated attacks. Its efficient use of resources and robust performance make it a viable solution for high-throughput, secure logging in enterprise environments.