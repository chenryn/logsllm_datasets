(cid:884)
(cid:885)
(cid:886)
(cid:887)
(cid:888)
(cid:889)
(cid:890)
(cid:891)
(cid:139)(cid:144)(cid:150)(cid:3)(cid:131)(cid:481)(cid:3)(cid:132)(cid:482)
(cid:485)
(cid:136)(cid:151)(cid:144)(cid:133)(cid:4666)(cid:4667)(cid:3)(cid:4668)
(cid:484)(cid:484)(cid:484)
(cid:139)(cid:136)(cid:3)(cid:4666)(cid:131)(cid:3)(cid:3408)(cid:3)(cid:132)(cid:4667)(cid:3)(cid:4668)
(cid:139)(cid:136)(cid:3)(cid:4666)(cid:131)(cid:535)(cid:4666)(cid:131)(cid:3397)(cid:883)(cid:4667)(cid:936)(cid:884)(cid:3)(cid:3404)(cid:3404)(cid:3)(cid:882)(cid:4667)
(cid:136)(cid:146) (cid:3404)(cid:3)(cid:4)(cid:4670)(cid:4666)(cid:4666)(cid:136)(cid:146)(cid:4667)(cid:4666)(cid:4667)(cid:936)(cid:884)(cid:4667)(cid:3397)(cid:884)(cid:4671)(cid:482)
(cid:135)(cid:142)(cid:149)(cid:135)
(cid:136)(cid:146) (cid:3404)(cid:3)(cid:4)(cid:4670)(cid:4666)(cid:4666)(cid:136)(cid:146)(cid:4667)(cid:4666)(cid:4667)(cid:936)(cid:884)(cid:4667)(cid:3397)(cid:886)(cid:4671)(cid:482)
(cid:883)(cid:882)
(cid:883)(cid:883)
(cid:883)(cid:884)
(cid:883)(cid:885)
(cid:883)(cid:886)
(cid:883)(cid:887)
(cid:883)(cid:888)
(cid:883)(cid:889)
(cid:883)(cid:890)
(cid:484)(cid:484)(cid:484)
(cid:4669)
(cid:485)
(cid:139)(cid:136)(cid:3)(cid:4666)(cid:4666)(cid:132)(cid:486)(cid:884)(cid:4667)(cid:535)(cid:4666)(cid:132)(cid:486)(cid:883)(cid:4667)(cid:535)(cid:132)(cid:936)(cid:888)(cid:3)(cid:488)(cid:3404)(cid:3)(cid:882)(cid:4667)
(cid:136)(cid:146) (cid:3404)(cid:3)(cid:4)(cid:4670)(cid:4666)(cid:4666)(cid:136)(cid:146)(cid:4667)(cid:4666)(cid:4667)(cid:936)(cid:884)(cid:4667)(cid:3397)(cid:887)(cid:4671)(cid:482)
(cid:135)(cid:142)(cid:149)(cid:135)
(cid:136)(cid:146) (cid:3404)(cid:3)(cid:4)(cid:4670)(cid:4666)(cid:4666)(cid:136)(cid:146)(cid:4667)(cid:4666)(cid:4667)(cid:936)(cid:884)(cid:4667)(cid:3397)(cid:885)(cid:4671)(cid:482)
(cid:484)(cid:484)(cid:484)
(cid:4669)
(a) The opaque predicate example in [11]
(cid:15)(cid:15)(cid:25)(cid:16)(cid:3)(cid:12)(cid:21)(cid:3)(cid:6)(cid:145)(cid:134)(cid:135)(cid:483)
(cid:22)(cid:145)(cid:151)(cid:148)(cid:133)(cid:135)(cid:3)(cid:6)(cid:145)(cid:134)(cid:135)(cid:483)
(cid:883)
(cid:884)
(cid:885)
(cid:886)
(cid:887)
(cid:888)
(cid:889)
(cid:890)
(cid:891)
(cid:883)(cid:882)
(cid:883)(cid:883)
(cid:883)(cid:884)
(cid:883)(cid:885)
(cid:154)(cid:889)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:482)
(cid:155)(cid:890)(cid:3)(cid:3404)(cid:3)(cid:882)(cid:482)
(cid:823)(cid:154)(cid:889)(cid:3)(cid:3404)(cid:3)(cid:133)(cid:145)(cid:143)(cid:143)(cid:145)(cid:144)(cid:3)(cid:137)(cid:142)(cid:145)(cid:132)(cid:131)(cid:142)(cid:3)(cid:139)(cid:885)(cid:884)(cid:3)(cid:882)
(cid:823)(cid:155)(cid:890)(cid:3)(cid:3404)(cid:3)(cid:133)(cid:145)(cid:143)(cid:143)(cid:145)(cid:144)(cid:3)(cid:137)(cid:142)(cid:145)(cid:132)(cid:131)(cid:142)(cid:3)(cid:139)(cid:885)(cid:884)(cid:3)(cid:882)
(cid:485)
(cid:134)(cid:135)(cid:136)(cid:139)(cid:144)(cid:135)(cid:3)(cid:139)(cid:885)(cid:884)(cid:3)(cid:823)(cid:143)(cid:131)(cid:139)(cid:144)(cid:4666)(cid:4667)(cid:3)(cid:851)(cid:882)(cid:3)(cid:4668)
(cid:936)(cid:883)(cid:3)(cid:3404)(cid:3)(cid:142)(cid:145)(cid:131)(cid:134)(cid:3)(cid:139)(cid:885)(cid:884)(cid:535)(cid:3)(cid:823)(cid:154)(cid:889)
(cid:936)(cid:884)(cid:3)(cid:3404)(cid:3)(cid:142)(cid:145)(cid:131)(cid:134)(cid:3)(cid:139)(cid:885)(cid:884)(cid:535)(cid:3)(cid:823)(cid:155)(cid:890)
(cid:936)(cid:885)(cid:3)(cid:3404)(cid:3)(cid:149)(cid:151)(cid:132)(cid:3)(cid:139)(cid:885)(cid:884)(cid:3)(cid:936)(cid:883)(cid:481)(cid:3)(cid:883)
(cid:936)(cid:886)(cid:3)(cid:3404)(cid:3)(cid:143)(cid:151)(cid:142) (cid:139)(cid:885)(cid:884)(cid:3)(cid:936)(cid:883)(cid:481)(cid:3)(cid:936)(cid:885)
(cid:936)(cid:887)(cid:3)(cid:3404)(cid:3)(cid:151)(cid:148)(cid:135)(cid:143) (cid:139)(cid:885)(cid:884)(cid:3)(cid:936)(cid:886)(cid:481)(cid:3)(cid:884)
(cid:936)(cid:888)(cid:3)(cid:3404)(cid:3)(cid:139)(cid:133)(cid:143)(cid:146) (cid:135)(cid:147) (cid:139)(cid:885)(cid:884)(cid:3)(cid:936)(cid:887)(cid:481)(cid:3)(cid:882)
(cid:936)(cid:889)(cid:3)(cid:3404)(cid:3)(cid:139)(cid:133)(cid:143)(cid:146) (cid:149)(cid:142)(cid:150) (cid:139)(cid:885)(cid:884)(cid:3)(cid:936)(cid:884)(cid:481)(cid:3)(cid:883)(cid:882)
(cid:936)(cid:890)(cid:3)(cid:3404)(cid:3)(cid:145)(cid:148)(cid:3)(cid:139)(cid:883)(cid:3)(cid:936)(cid:888)(cid:481)(cid:3)(cid:936)(cid:889)
(cid:132)(cid:148) (cid:139)(cid:883)(cid:3)(cid:936)(cid:890)(cid:481)(cid:3)(cid:142)(cid:131)(cid:132)(cid:135)(cid:142)(cid:3)(cid:936)(cid:145)(cid:148)(cid:139)(cid:137)(cid:139)(cid:144)(cid:131)(cid:142)(cid:5)(cid:5)(cid:481)(cid:3)(cid:142)(cid:131)(cid:132)(cid:135)(cid:142)(cid:3)(cid:936)(cid:145)(cid:148)(cid:139)(cid:137)(cid:139)(cid:144)(cid:131)(cid:142)(cid:5)(cid:5)(cid:131)(cid:142)(cid:150)(cid:135)(cid:148)(cid:135)(cid:134)(cid:5)(cid:5)
(cid:4669)
(cid:139)(cid:136)(cid:4666)(cid:154)(cid:889)(cid:4666)(cid:154)(cid:889)(cid:3)(cid:514)(cid:883)(cid:4667)(cid:936)(cid:884)(cid:3)(cid:3404)(cid:3404)(cid:3)(cid:882)(cid:513)(cid:513)(cid:155)(cid:890)(cid:3407)(cid:883)(cid:882)(cid:4667)(cid:4668)
(cid:145)(cid:148)(cid:139)(cid:137)(cid:139)(cid:144)(cid:131)(cid:142)(cid:5)(cid:5)(cid:482)
(cid:4669)(cid:3)(cid:135)(cid:142)(cid:149)(cid:135)(cid:3)(cid:4668)
(cid:145)(cid:148)(cid:139)(cid:137)(cid:139)(cid:144)(cid:131)(cid:142)(cid:5)(cid:5)(cid:131)(cid:142)(cid:150)(cid:135)(cid:148)(cid:135)(cid:134)(cid:5)(cid:5)(cid:482)
(b) An opaque predicate generated by Obfuscator-LLVM. For easy
reading, we translate the LLVM IR code to source code
Fig. 1: Real-world opaque predicate examples.
problems in the constraint models. However, the underlying
opaque predicates in the paper are not strong enough. We
demonstrate this in Figure 1(a), which includes two opaque
predicates: the ﬁrst one a ∗ (a + 1)%2 == 0 (line 6) is
constantly true for any integer a; the second one (b − 2) ∗
(b − 1) ∗ b%6 (cid:2)= 0 (line 13) is constantly false for any
integer b. When such predicates are processed by a symbolic
execution engine, the engine would detect that the constraints
a ∗ (a + 1)%2 (cid:2)= 0 and (b − 2) ∗ (b − 1) ∗ b%6 (cid:2)= 0 cannot
be satisﬁed. Such predicates would be reported as opaque
predicates by symbolic execution-based attackers. As a result,
the NP-hard problem can be simpliﬁed to a polynomial-time
problem.
Figure 1(b) demonstrates another opaque predicate example
generated by Obfuscator-LLVM [2]. Obfuscator-LLVM is an
opensource obfuscation tool for C programs and has been
commercialized recently. In this example, the opaque predicate
x7 ∗ (x7 − 1)%2 == 0||x8 < 10 is always true, which can
be easily detected by symbolic execution techniques. We have
reviewed the source code of Obfuscator-LLVM and found that
the opaque predicate is the only supported one. The authors
indeed have left comments in the code and stated that the
opaque predicate should be improved.
Besides, there are many other investigations relying on such
insecure opaque predicates, e.g., [12, 13]. These examples
demonstrate a severe vulnerability of current opaque predicates
in practice. More resilient opaque predicates are therefore
necessary to improve the security of control-ﬂow obfuscation
techniques.
667
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:23 UTC from IEEE Xplore.  Restrictions apply. 
(cid:5)(cid:139)(cid:144)(cid:131)(cid:148)(cid:155)(cid:3)
(cid:19)(cid:148)(cid:145)(cid:137)(cid:148)(cid:131)(cid:143)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:8)(cid:154)(cid:135)(cid:133)(cid:151)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:8)(cid:144)(cid:137)(cid:139)(cid:144)(cid:135)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:8)(cid:154)(cid:135)(cid:133)(cid:151)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:6)(cid:145)(cid:144)(cid:149)(cid:150)(cid:148)(cid:131)(cid:139)(cid:144)(cid:150)(cid:3)
(cid:8)(cid:154)(cid:150)(cid:148)(cid:131)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:428)(cid:3)(cid:22)(cid:145)(cid:142)(cid:152)(cid:139)(cid:144)(cid:137)
(cid:6)(cid:145)(cid:144)(cid:149)(cid:150)(cid:148)(cid:131)(cid:139)(cid:144)(cid:150)(cid:149)
(cid:21)(cid:151)(cid:142)(cid:135)(cid:486)(cid:132)(cid:131)(cid:149)(cid:135)(cid:134)(cid:3)(cid:18)(cid:146)(cid:131)(cid:147)(cid:151)(cid:135)(cid:3)
(cid:19)(cid:148)(cid:135)(cid:134)(cid:139)(cid:133)(cid:131)(cid:150)(cid:135)(cid:3)(cid:7)(cid:135)(cid:150)(cid:135)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)
(cid:23)(cid:135)(cid:149)(cid:150)(cid:3)(cid:6)(cid:131)(cid:149)(cid:135)(cid:149)
(cid:18)(cid:146)(cid:131)(cid:147)(cid:151)(cid:135)(cid:3)
(cid:19)(cid:148)(cid:135)(cid:134)(cid:139)(cid:133)(cid:131)(cid:150)(cid:135)(cid:149)
Fig. 2: A conceptual framework of opaque predicate detection
based on symbolic execution techniques.
B. Adversary Model
This work considers an adversary model as follows.
Suppose an obfuscated binary program is obtained by an
attacker, she can employ symbolic execution techniques to
detect opaque predicates from the obfuscated program and
further deobfuscate the program. We demonstrate a framework
for such opaque predicate detection attacks in Figure 2.
Overall, a symbolic execution engine is employed to extract
the conditions along control paths as constraint models; then
a rule-based detection module is employed to detect opaque
predicates from the constraint models.
In general, a symbolic execution engine for binaries
includes a core symbolic execution module, and a constraint
solving module. The symbolic execution module can be
implemented in two ways: dynamic or static. Dynamic
symbolic execution is also known as concolic (concret and
symbolic) execution. BAP [8] and Triton [9] are two typical
concolic execution engines. They ﬁrst execute a program with
concrete values, and then perform symbolic analysis on the
generated instruction traces. Comparatively, a static symbolic
execution engine ﬁrstly lifts a binary program to high-level
intermediate codes and then perform symbolic execution on
the codes with static analysis approaches. Angr [10] adopts
the second approach. Both the two approaches can generate
constraint models for opaque predicate detection.
To better demonstrate the principle of symbolic execu-
tion, we discuss more details about the concolic execution
technique, which has been adopted by Ming et al.
[5]
for opaque predicate detection. Concolic execution includes
several key steps: instruction tracing and lifting, trace slicing,
and constraint extraction and solving.
Instruction Tracing and Lifting: In each round of concolic
execution, we trace the executed instructions along a control
ﬂow. The instructions are assembly codes by default. To
model
the semantics of each instruction, an instruction
lifter is required. The lifter translates assembly codes to
a high-level intermediate language (IL), which models the
memory and register operations with variables. In practice,
not all instructions are useful, and sometimes a taint analysis
engine is employed to ﬁlter out the instructions irrelevant
to any symbolic variables. This step outputs a sequence of
instructions modeled with IL.
(cid:6)(cid:145)(cid:134)(cid:135)(cid:3)(cid:22)(cid:144)(cid:139)(cid:146)(cid:146)(cid:135)(cid:150)
(cid:4666)(cid:9)(cid:151)(cid:144)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:4667)
(cid:12)(cid:144)(cid:146)(cid:151)(cid:150)
(cid:6)(cid:138)(cid:145)(cid:145)(cid:149)(cid:135)(cid:3)(cid:131)(cid:3)
(cid:22)(cid:155)(cid:143)(cid:132)(cid:145)(cid:142)(cid:139)(cid:133)(cid:3)(cid:25)(cid:131)(cid:148)(cid:139)(cid:131)(cid:132)(cid:142)(cid:135)(cid:3)
(cid:145)(cid:148)(cid:3)(cid:131)(cid:144)(cid:3)(cid:4)(cid:148)(cid:137)(cid:151)(cid:143)(cid:135)(cid:144)(cid:150)
(cid:22)(cid:135)(cid:150)(cid:3)(cid:131)(cid:3)(cid:11)(cid:131)(cid:148)(cid:134)
(cid:19)(cid:148)(cid:145)(cid:132)(cid:142)(cid:135)(cid:143)(cid:3)(cid:153)(cid:484)(cid:148)(cid:484)(cid:150)(cid:484)
(cid:150)(cid:138)(cid:135)(cid:3)(cid:25)(cid:131)(cid:148)(cid:139)(cid:131)(cid:132)(cid:142)(cid:135)
(cid:6)(cid:148)(cid:135)(cid:131)(cid:150)(cid:135)(cid:3)(cid:18)(cid:146)(cid:131)(cid:147)(cid:151)(cid:135)(cid:3)
(cid:19)(cid:148)(cid:135)(cid:134)(cid:139)(cid:133)(cid:131)(cid:150)(cid:135)(cid:149)(cid:3)(cid:153)(cid:484)(cid:148)(cid:484)(cid:150)(cid:484)
(cid:150)(cid:138)(cid:135)(cid:3)(cid:19)(cid:148)(cid:145)(cid:132)(cid:142)(cid:135)(cid:143)
(cid:18)(cid:146)(cid:131)(cid:147)(cid:151)(cid:135)(cid:3)
(cid:19)(cid:148)(cid:135)(cid:134)(cid:139)(cid:133)(cid:131)(cid:150)(cid:135)(cid:3)
(cid:8)(cid:144)(cid:137)(cid:139)(cid:144)(cid:135)
(cid:23)(cid:135)(cid:143)(cid:146)(cid:142)(cid:131)(cid:150)(cid:135)
(cid:21)(cid:135)(cid:146)(cid:145)(cid:149)(cid:139)(cid:150)(cid:145)(cid:148)(cid:155)
(cid:18)(cid:151)(cid:150)(cid:146)(cid:151)(cid:150)
(cid:18)(cid:146)(cid:131)(cid:147)(cid:151)(cid:135)