### HTTP Requests and Responses from HTTPS-Secured Traffic

This section describes the analysis of HTTP requests and responses obtained during a one-day scenario. The user logs into Google, Facebook, Twitter, Dropbox, an RSS aggregator, and other websites. Throughout the day, the user keeps multiple tabs open for each service, uses them intermittently, and browses other websites. A total of 8,185 HTTP requests (122 MB) were captured, of which 4,823 requests (24 MB) involved setting or sending sensitive cookies.

The script processes each request sequentially to simulate the overheads induced by installing the MCookie module on every host. Sensitive cookies are identified by examining the `httpOnly` and `secure` flags. Table 2 details the additional bandwidth in different scenarios: without User-Agent support (using MCookies), with naive or compressed encoding, and with User-Agent support (Masked-Cookies headers). The results show a significant overhead for requests containing sensitive cookies. However, when considering the overall HTTPS traffic, this overhead is relatively small. In the context of total web communications (both HTTP and HTTPS), the cost induced by cookie masking is negligible.

### 5.2.3 Apache Module System Overhead Analysis

To evaluate the efficiency and scalability of MCookies, we conducted a web server benchmark with and without the MCookies module enabled. We used a single HTML page to assess the module's overhead and also tested it on a WordPress website for a more realistic scenario. Each request sent contained three different sensitive cookies.

The test environment consisted of an Intel Xeon X5650 with 6 GB of RAM running a Debian system, an Apache (v2.4.7) web server, a MySQL (v5.5) database server, and a WordPress (v3.8.1) website.

| Scenario | Static Page (transactions/second) | WordPress Page (transactions/second) |
|----------|----------------------------------|--------------------------------------|
| Vanilla Server | 384 | 221 |
| MCookies Enabled with UA Support | 318 (-17%) | 212 (-4%) |
| MCookies Enabled w/o UA Support | 382 | 220 |

We used Siege in benchmark mode to measure the number of transactions per second for the three scenarios. The results, as shown in Table 3, indicate a 4% decrease in the WordPress web server's capacity when dealing with User-Agents without support for this mechanism. The overhead is negligible otherwise. For a static page served to a User-Agent with no Masked-Cookie header support, performance degradation is more pronounced, but this is a worst-case scenario, as static websites rarely produce sensitive cookies.

### 6. Related Work

To avoid repeating the same cookie across different TLS messages, one approach is to change its value for every new connection or limit the cookie lifetime. PHP offers the `session_regenerate_id` function to handle session identifiers, typically called after a user logs in, to decorrelate old and new sessions and prevent session fixation attacks. Short-lived cookies (potentially single-use) can thwart passive attacks, but choosing the right lifetime is challenging.

Short-lived cookies could mitigate attacks but require a very short lifetime, leading to out-of-sync cookies with parallel HTTP connections. Modern websites heavily use JavaScript asynchronous requests, and session regenerations can cause concurrency errors. This is why MCookies are designed to always have the same intended value.

One-Time Cookies (OTC) bind the cookie with the request sent, using cryptographic mechanisms (symmetric encryption and HMAC). OTC borrows the idea of Kerberos tickets and provides an elegant solution requiring no server-side state. Applied to HTTPS, OTC does not counter attacks, as repeating the same exact request would lead to the same OTC. However, the value retrieved can only be replayed for the specific request, limiting the scope of attacks. OTC implementation requires browser and server/web application modifications.

For Record protocol attacks, Masked-Cookie headers are simpler to implement, as they do not require cryptographic primitives. Both single-use cookies and One-Time Cookies are described in Table 1. Other alternative cookie protocols, such as [14, 20], share OTC advantages (unique cookies bound to request data) and drawbacks (significant changes needed on both endpoints).

### 7. Conclusion

We have studied recent attacks on the TLS Record protocol and analyzed proposed countermeasures. Most software implements specific countermeasures for each attack, such as 1/n-1 split for BEAST, constant-time CBC decryption for Lucky 13, deprecation of RC4, disabling TLS compression for CRIME and TIME, and deprecation of SSLv3 for POODLE.

All attacks rely on the common assumption that a secret is repeatedly sent in different TLS sessions. We suggested a common model to describe these attacks and proposed using the concept of masking, borrowed from the side-channel community, to mitigate them. Masking can be implemented as a complementary measure, a defense-in-depth strategy. We described various ways to implement this countermeasure and provided two proofs of concept to check its feasibility in protecting cookies.

At the TLS level, our Scramble compression method builds on the idea of WebSockets masking, which blocked the BEAST attack. At the HTTP level, MCookies extend the idea of single-use cookies without requiring complex changes in web protocols and applications. Masking allows for a defense-in-depth strategy, giving developers and integrators more time to address vulnerabilities. It would have been effective against the presented attacks and might be against unknown ones. The recent POODLE attack met all criteria and was published after we implemented our proposals, validating our work.

It is important to note that masking is designed as a defense-in-depth measure in addition to specific countermeasures, not as a replacement. When a cryptographic algorithm or scheme shows significant weaknesses, it should be phased out and patched. In the case of RC4, many practical and theoretical flaws have been known for a decade, and it should have been phased out long ago.

### 8. References

[1] N. J. AlFardan, D. Bernstein, K. G. Paterson, B. Poettering, and J. C. N. Schuldt. On the security of RC4 in TLS and WPA. In USENIX Security, 2013.
[2] N. J. AlFardan and K. G. Paterson. Lucky Thirteen: Breaking the TLS and DTLS Record Protocols. In IEEE SSP, 2013.
[3] A. Barth. HTTP State Management Mechanism. RFC 6265, 2011.
[4] A. Barth. The Web Origin Concept. RFC 6454, 2011.
[5] D. Bernstein. ChaCha, a variant of Salsa20. cr.yp.to/papers.html#chacha, 2008.
[6] S. Chari, C. S. Jutla, J. R. Rao, and P. Rohatgi. Towards sound approaches to counteract power-analysis attacks. In CRYPTO, 1999.
[7] I. Dacosta, S. Chakradeo, M. Ahamad, and P. Traynor. One-time cookies: Preventing session hijacking attacks with stateless authentication tokens. ACM Trans. Internet Techn., 2012.
[8] T. Dierks and E. Rescorla. TLS Protocol Version 1.1. RFC 4346, 2006.
[9] T. Dierks and E. Rescorla. TLS Protocol Version 1.2. RFC 5246, 2008.
[10] T. Duong and J. Rizzo. BEAST: Surprising crypto attack against HTTPS. Ekoparty, 2011.
[11] I. Fette and A. Melnikov. The WebSocket Protocol. RFC 6455, 2011.
[12] S. Fluhrer and D. McGrew. Statistical Analysis of the Alleged RC4 Keystream Generator. In FSE, 2000.
[13] J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, and L. Stewart. HTTP Authentication: Basic and Digest Access Authentication. RFC 2617, 1999.
[14] K. Fu, E. Sit, K. Smith, and N. Feamster. The Dos and Don’ts of Client Authentication on the Web. In USENIX Security, 2001.
[15] L. Goubin and J. Patarin. DES and Differential Power Analysis The “Duplication” Method. In CHES, 1999.
[16] P. Gutmann. Encrypt-then-MAC for Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS). RFC 7366, 2014.
[17] J. Hodges, C. Jackson, and A. Barth. HTTP Strict Transport Security (HSTS). RFC 6797, 2012.
[18] T. Isobe, T. Ohigashi, Y. Waatanabe, and M. Morii. Full Plaintext Recovery Attack on Broadcast RC4. In FSE, 2013.
[19] O. Levillain, A. Ebalard, H. Debar, and B. Morin. One Year of SSL Measurement. In ACSAC, 2012.
[20] A. X. Liu, J. M. Kovacs, C. Huang, and M. G. Gouda. A Secure Cookie Protocol. In IEEE ICCCN, 2005.
[21] B. Möller. Security of CBC Ciphersuites in SSL/TLS: Problems and Countermeasures, 2002-2004.
[22] B. Möller, T. Duong, and K. Kotowicz. Google Security Advisory: This POODLE Bites: Exploiting The SSL 3.0 Fallback, 2014.
[23] K. G. Paterson and N. J. AlFardan. Plaintext Recovery Attacks Against DTLS. In NDSS, 2012.
[24] Y. N. Pettersen. Renego patched servers: A long-term interoperability time bomb brewing. My Opera blog: Implementer’s notes, 2010.
[25] A. Prado, N. Harris, and Y. Gluck. SSL, Gone in 30 seconds - A BREACH beyond CRIME. Black Hat USA, 2013.
[26] E. Prouff and M. Rivain. Masking against side-channel attacks: a formal security proof. In Eurocrypt, 2013.
[27] E. Rescorla and N. Modadugu. DTLS Version 1.2. RFC 6347, 2012.
[28] I. Ristic. Internet SSL Survey, Talk at BlackHat 2010. Black Hat USA, 2010.
[29] J. Rizzo and T. Duong. The CRIME attack. Ekoparty, 2012.
[30] P. Rogaway. IETF Draft: Problems with proposed IP Cryptography, 1995.
[31] A. Stubblefield, J. Ioannidis, and A. Rubin. Using the Fluhrer, Mantin, and Shamir Attack to Break WEP. In NDSS, 2002.
[32] A. Shulman T. Be’ery. A Perfect CRIME? TIME Will Tell. Black Hat EU, 2013.
[33] S. Vaudenay. Security Flaws Induced by CBC Padding Applications to SSL, IPsec, WTLS. In Eurocrypt, 2002.

### Appendix

#### A. HTTP BASIC/DIGEST AUTH

In this paper, we discussed cookie protection. Other methods exist to authenticate the client at the HTTP layer: Basic and Digest Authentication [13]. In practice, they are rarely used due to user interface limitations and lack of features like logout. Both headers are as vulnerable as cookies to the described attacks. For Basic Authentication, randomization is not straightforward, while Digest Authentication already allows for randomizations similar to MCookies, producing a new server nonce value for each new request. Such a policy would defeat all passive network attacks, as the client would produce a different header for each request.

#### B. SERVER-SIDE COMPRESSION

##### B.1 TIME and BREACH

In the TIME attack, researchers targeted server-side secret information repeatedly sent over the wire. For example, Cross-Site Request Forgery (CSRF) tokens are usually reused for a given user and a certain amount of time. Server-side messages can be compressed using TLS or HTTP compression, both of which are targets of the attack. The BREACH attack aims to retrieve the anti-CSRF token sent by the server.

**Hypotheses and Prerequisites:**
- TLS or HTTP compression is activated.
- The ciphertext length is observable.
- The answer containing the target token is partially controlled by the attacker.
- Multiple connections containing the secret can be triggered by the attacker.

**Proposed Countermeasures:**
- Disable TLS and HTTP compression.
- Randomize the packet length.
- Structurally modify web applications to separate secrets from attacker-controlled content.
- Change the token value for each request (single-use token).

##### B.2 MTokens: Making Anti-CSRF Tokens

To mitigate server-side attacks, CSRF tokens can be protected using a technique similar to MCookies, by masking the token with a different value for each message. The intended value of the token remains the same, avoiding out-of-sync problems, while randomizing the data sent over the network. Implementing this requires minimal changes to web applications or none if web frameworks are modified.

**Security Analysis:**
MTokens require small modifications in web applications or frameworks, making them easy to deploy, reliable, and compatible with web applications. They are effective against server-side first-order attacks against anti-CSRF tokens in general.

#### C. TLS SCRAMBLING FUNCTION

The core of the Scramble compression method is the `scramble_record` function (and its counterpart `unscramble_record`), implemented as follows:

```c
static int scramble_record(COMP_CTX *ctx, uchar *out, uint olen, uchar *in, uint ilen) {
    uchar mask[MSIZE];
    if (olen < MSIZE) return -1;
    if (bytes(mask, MSIZE) < 0) return -1;
    memcpy(out, &mask, MSIZE);
    out = out + MSIZE;
    for (int i = 0; i < ilen; i++) {
        *out++ = *in++ ^ mask.bytes[i % MSIZE];
    }
    return (ilen + MSIZE);
}
```

This function scrambles the input data using a mask, ensuring that the same data sent in different TLS sessions appears different, thus mitigating the described attacks.