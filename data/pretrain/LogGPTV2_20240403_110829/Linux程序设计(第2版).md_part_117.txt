/sa/ouwu-Aq/sanpou/qnd/.1pm3{title}f Srecord;
my $choice;
prant );
Now, we see if the choice is contained in the stzing of
substr ($choice, 1) ≤**;
acceptable options,{Which includes 1，r and uif weve
return Schoice if(*afcq*.(Srecord?*1ru*:**)-/Schoice/);
If not, that's invalid
ree uo te. ad
4）下面来解决向数据库漆加记录的问题。数据库实际上是一个相当复杂的哈希表：键字是
分类编号，而每个键值本身又是一些哈希表。这些哈希表的键字分别是“title”、“type”、“artist”
和“tracks"。这就是我们在上面使用“$database(Srecord}>[title]”这种古怪写法的原因-
“Sdatabase{$record）”是-个哈希表（它实际上只是某个哈希表的一个引用下标，C语言程序员
可能会把它们想象为指针。引用下标的详细介绍请参考perlref文档）。“->{tile)”语法在这个哈
标，它指向一个哈希表里的哈希表里的数组一够口的了吧，没点时间还真习惯不过来呢。
sub add_cd {
while(1)(
print *Enter catalog number: *:
if（exinta Sdatabase(Srecord)}（
chonp($recordr<>):
print "Already exists.
print *Please enter a different mumber.n*:
}else
last:
print *Enter title: *;
chomp($title=<>);
print *Enter type:*:
chomp($type=<>):
chomp($artist=<>):
$database{$record)= (
'title"=> Stitle
'type* => $type,
'artist" > Sartist
return Srecord; e Tell the main menu the new record runber
add_tracks (Srecord) ;
5)这里是添加曲目的子例程。我们就是在这里引出数组引用概念的。
sub add,tracks (
ny Srecord s shift;
print “Enter track information for tnis CDn*;
print *Enter a blank line to finish.`n\n*;
加入jaVva编程群：524621833
---
## Page 630
612
Linux程序设计
my $counter=O:my etracks:
while（1）（
print+*$counter.*:';
1（x）
#9{...} means *interpret as an array*
push [$database(Srecord}->{tracks))], $track;
}eise
last;
6)这段查找CD唱盘用的代码有点复杂，这是因为我们需要为哈希表里的每个$record值去遍
历“$database{record}->[tile]”的每个值。还用grep来教火......
sub find_cd {
Sview ={$_[0] eq *y*);
chonp($search=<>);
For each key. (record) add the key to the afound array if the
title field of that record contains the search string.
keys edetabase;
1f（9calar matches vs 0）{
print *Sorry. nothing found.n;
elsif （acalar @matches 1-1)（
return;
print *Sorry, not unique.\n*;
print*Found the tollowing:\n;
foreach (@matches){
print Sdatabase{s_}->{title}.*\n*;
1
return;
Srecord-Smatches[0]:
print
"\n\nCatalog nunber:*.Srecord."\n;
print
Title:*,Sdatabase(Srecord}->{title}.\n*；
print
Type:.sdatabase{Srecord}->(type}.*\n*;
print“Artist/Composer:*.Sdatabase|$record}->{artist]."\n\n";
if($view){
  .
if (/~y(?:es)?$/i1{
$_=<>;
list_tracks(Srecord):
print "\n":
print *\n";
return Srecord;
7）现在，列出曲目清单的工作已经很简单了！
sub liat_tracke (
foreach （o{sdatabase(Srecord)->{tracke}}}{
my Srecord=shift;
print $_."\n*:
8）更新一张CD唱盘意味着剩除一个旧曲目，再增加一个新曲目。如下所示：
加入iava编程群：524621833
---
## Page 631
第18章Perl程序设计语言
613
sub update_cd {
my $record=shift;
print *Current tracks are:\n*;
print*\nDo you want to reenter then?\n*;
list_tracks($record) :
if ((s_=<>)=-/y(?:es)?$/i) {
Remove the old entry fron the hash
delete Sdatabase{Srecord}->{tracks};
add_tracks($record);
}else(
print *oK, canceling.\n*
9）类似地，删除一张CD唱盘就意味着副除与之对应的哈希表数据项。如下所示：
sub remove_cd {
zy $record =shift;
print *\nDo you want to delete this CD?\n*;
if（（s_<>）-/~y（7:es）？s/1）
}else
delete Sdatabase{Srecord];
print *oK, cancelling.\n*
1
1
10）最后，CD唱盘的统计工作已经很简单了-—只要计算一下哈希表里的键字个数就行了。
但曲目的统计工作需要有点小技巧：我们把数据库里每一个键字对应的曲目数组按标量类型的
上下文进行统计，再把这些值加在一起。（你也可以用map（）函数完成统计工作，但那样不如现
在的办法来得清晰。）
sub count_cds {
my Stotaltracks=0;
print *Found ,(scalar keys &database).* CDs and *;
Stotaltracks+s scalar {$database{$_)->(tracks}):
print Stotaltracks.* tracks.\n*;
.
18.6本章总结
在这一章里，我们学习了Perl程序设计语言提供的部分功能的使用方法，接触了它的一些模
块，并使用Perl语言实现了我们的CD唱盘数据库软件。
加入jaVa编程群：524621833
---
## Page 632
第19章因特网程序设计：HTML
我们将在这一章里学习一个图形信息程序设计方法。我们不需要编写绘制图形和文本的程
序，我们只要指定想看的东西，再使用另外个程序进行浏览就可以达到目的。
我们将学习使用WorldWideWeb语言HTML编写和建立一个服务器（程序）的方法，这样
我们就能使用一个客户浏览器（程序）通过网络来查看我们的文档。我们将学习以下几个方面
的内容：
·World WideWeb的历史和本质
·HTML文档的结构
·标签、表格、图像和超文本链接锚点：
·客户端和服务器端的可点击图片。
·在Web上建立服务器和页面的技巧
19.1什么是WorldWideWeb
WorldWideWeb经常被筒称为WWW或Wcb，它于1989年起源于日内瓦的CERN实验室，
TimBerners-Lee当时正在研究传播信息的手段。到了1992年，CERN把一个实验性质的接口和协
议放到了公共城里。它迅速被因特网团体所接受，面Web也因此而诞生了。