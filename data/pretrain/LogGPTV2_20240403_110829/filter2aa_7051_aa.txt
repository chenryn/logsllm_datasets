---
title: Neo4j
date: 2021-08-23 12:34:56
background: bg-[#3b85ef]
tags:
    - DB
    - GraphDB
categories:
  - Database
intro: |
    A Neo4j cheat sheet with getting started resources and information on how to query the database with Cypher.
plugins:
    - copyCode
---
Getting Started {.cols-2}
---------------
### Getting Started with Neo4j
Neo4j is a Graph Database consisting of nodes connected together by relationships.  You might consider using a Graph database if you have a highly connected dataset or have queries with many joins.
- [Download Neo4j Desktop](https://neo4j.com/download) _download Neo4j desktop or server editions_
- [Neo4j Sandbox](https://sandbox.neo4j.com) _pick a data set - no installation required_
- [Neo4j Aura](https://neo4j.com/aura) _free Neo4j instance in the cloud_
- [Neo4j GraphAcademy](https://neo4j.com/graphacademy) _free, self-paced, hands-on online training_
- [GraphGists](https://neo4j.com/graphgists) _use ase and industry specific example graphs_
### Graph Database Concepts
|           |                                                                                                                   |
|-----------|-------------------------------------------------------------------------------------------------------------------|
| **Nodes** | Nodes are commonly used to represent _entities_ or _things_ in your data.  For example, a **Person** or **Movie** |
| **Relationships** | Relationships are used to connect two nodes together and organise the data into structure.  For example, a Person **acted in** a movie.  A relationship has a _type_ and _direction_, although the direction can be ignored at query time.
| **Labels** | Labels are used to group nodes into categories.  For example, a person may have `Person` and `Actor` labels.
| **Relationship Type** | Each relationship has a type.  Relationships allow you to explore smaller sections of a graph. |
| **Properties** | Both nodes and relationships can have properties set against them.  Properties are [name-value pairs](https://neo4j.com/docs/cypher-manual/4.3/syntax/values/#cypher-values). |
Neo4j Syntax
------
### Read query structure
```
[USE]
[MATCH WHERE]
[OPTIONAL MATCH WHERE]
[WITH [ORDER BY] [SKIP] [LIMIT]]
RETURN [ORDER BY] [SKIP] [LIMIT]
```
### Write-only query structure
```
[USE]
(CREATE | MERGE)*
[SET|DELETE|REMOVE|FOREACH]*
[RETURN [ORDER BY] [SKIP] [LIMIT]]
```
### Read-write query structure
```
[USE]
[MATCH WHERE]
[OPTIONAL MATCH WHERE]
[WITH [ORDER BY] [SKIP] [LIMIT]]
(CREATE | MERGE)*
[SET|DELETE|REMOVE|FOREACH]*
[RETURN [ORDER BY] [SKIP] [LIMIT]]
```
Neo4j Reading Data
------------
### MATCH
```
MATCH (n:Person)-[:KNOWS]->(m:Person)
WHERE n.name = 'Alice'
```
Node patterns can contain labels and properties.
```
MATCH (n)-->(m)
```
Any pattern can be used in MATCH.
```
MATCH (n {name: 'Alice'})-->(m)
```
Patterns with node properties.
```
MATCH p = (n)-->(m)
```
Assign a path to p.
```
OPTIONAL MATCH (n)-[r]->(m)
```
Optional pattern: nulls will be used for missing parts.
### WHERE
```
WHERE n.property <> $value
```
Use a predicate to filter. Note that WHERE is always part of a MATCH, OPTIONAL MATCH or WITH clause. Putting it after a different clause in a query will alter what it does.
```
WHERE EXISTS {
  MATCH (n)-->(m) WHERE n.age = m.age
}
```
Use an existential subquery to filter.
### RETURN
```
RETURN *
```
Return the value of all variables.
```
RETURN n AS columnName
```
Use alias for result column name.
```
RETURN DISTINCT n
```
Return unique rows.
```
ORDER BY n.property
```
Sort the result.
```
ORDER BY n.property DESC
```
Sort the result in descending order.
```
SKIP $skipNumber
```
Skip a number of results.
```
LIMIT $limitNumber
```
Limit the number of results.
```
SKIP $skipNumber LIMIT $limitNumber
```
Skip results at the top and limit the number of results.
```
RETURN count(*)
```
The number of matching rows. See Aggregating functions for more.
### WITH
```
MATCH (user)-[:FRIEND]-(friend)
WHERE user.name = $name
WITH user, count(friend) AS friends
WHERE friends > 10
RETURN user
```
The WITH syntax is similar to RETURN. It separates query parts explicitly, allowing you to declare which variables to carry over to the next part.
```
MATCH (user)-[:FRIEND]-(friend)
WITH user, count(friend) AS friends
ORDER BY friends DESC
  SKIP 1
  LIMIT 3
RETURN user
```
ORDER BY, SKIP, and LIMIT can also be used with WITH.
### UNION
```
MATCH (a)-[:KNOWS]->(b)
RETURN b.name
UNION
MATCH (a)-[:LOVES]->(b)
RETURN b.name
```
Returns the distinct union of all query results. Result column types and names have to match.
```
MATCH (a)-[:KNOWS]->(b)
RETURN b.name
UNION ALL
MATCH (a)-[:LOVES]->(b)
RETURN b.name
```
Returns the union of all query results, including duplicated rows.
Neo4j Writing Data
-------------
### CREATE
```
CREATE (n {name: $value})
```
Create a node with the given properties.
```
CREATE (n $map)
```
Create a node with the given properties.
```
UNWIND $listOfMaps AS properties
CREATE (n) SET n = properties
```
Create nodes with the given properties.
```
CREATE (n)-[r:KNOWS]->(m)
```
Create a relationship with the given type and direction; bind a variable to it.
```
CREATE (n)-[:LOVES {since: $value}]->(m)
```
Create a relationship with the given type, direction, and properties.
### SET
```
SET n.property1 = $value1,
    n.property2 = $value2
```
Update or create a property.
```
SET n = $map
```
Set all properties. This will remove any existing properties.
```
SET n += $map
```
Add and update properties, while keeping existing ones.
```
SET n:Person
```
Adds a label Person to a node.
### MERGE
```
MERGE (n:Person {name: $value})
  ON CREATE SET n.created = timestamp()
  ON MATCH SET
    n.counter = coalesce(n.counter, 0) + 1,
    n.accessTime = timestamp()
```
Match a pattern or create it if it does not exist. Use ON CREATE and ON MATCH for conditional updates.
```
MATCH (a:Person {name: $value1}),
      (b:Person {name: $value2})
MERGE (a)-[r:LOVES]->(b)
```
MERGE finds or creates a relationship between the nodes.
```
MATCH (a:Person {name: $value1})
MERGE
  (a)-[r:KNOWS]->(b:Person {name: $value3})
```
MERGE finds or creates paths attached to the node.
### DELETE
```
DELETE n, r
```
Delete a node and a relationship.
```
DETACH DELETE n
```
Delete a node and all relationships connected to it.
```
MATCH (n)
DETACH DELETE n
```
Delete all nodes and relationships from the database.
### REMOVE
```
REMOVE n:Person
```
Remove a label from n.
```
REMOVE n.property
```
Remove a property.
### FOREACH
```
FOREACH (r IN relationships(path) |
  SET r.marked = true)
```
Execute a mutating operation for each relationship in a path.
```
FOREACH (value IN coll |
 CREATE (:Person {name: value}))
```
Execute a mutating operation for each element in a list.
### CALL subquery
```
CALL {
  MATCH (p:Person)-[:FRIEND_OF]->(other:Person) RETURN p, other
  UNION
  MATCH (p:Child)-[:CHILD_OF]->(other:Parent) RETURN p, other
}
```
This calls a subquery with two union parts. The result of the subquery can afterwards be post-processed.
### CALL procedure
```
CALL db.labels() YIELD label
```
This shows a standalone call to the built-in procedure db.labels to list all labels used in the database. Note that required procedure arguments are given explicitly in brackets after the procedure name.
```
CALL db.labels() YIELD *
```
Standalone calls may use YIELD * to return all columns.
```
CALL java.stored.procedureWithArgs
```
Standalone calls may omit YIELD and also provide arguments implicitly via statement parameters, e.g. a standalone call requiring one argument input may be run by passing the parameter map {input: 'foo'}.
```
CALL db.labels() YIELD label
RETURN count(label) AS count
```
Calls the built-in procedure db.labels inside a larger query to count all labels used in the database. Calls inside a larger query always requires passing arguments and naming results explicitly with YIELD.
### Import
```
LOAD CSV FROM
'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists.csv' AS line
CREATE (:Artist {name: line[1], year: toInteger(line[2])})
```
Load data from a CSV file and create nodes.
```
LOAD CSV WITH HEADERS FROM
'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists-with-headers.csv' AS line
CREATE (:Artist {name: line.Name, year: toInteger(line.Year)})
```
Load CSV data which has headers.
```
USING PERIODIC COMMIT 500
LOAD CSV WITH HEADERS FROM
'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists-with-headers.csv' AS line
CREATE (:Artist {name: line.Name, year: toInteger(line.Year)})
```
Commit the current transaction after every 500 rows when importing large amounts of data.
```
LOAD CSV FROM
'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists-fieldterminator.csv'
AS line FIELDTERMINATOR ';'
CREATE (:Artist {name: line[1], year: toInteger(line[2])})
```
Use a different field terminator, not the default which is a comma (with no whitespace around it).
```
LOAD CSV FROM
'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists.csv' AS line
RETURN DISTINCT file()
```
Returns the absolute path of the file that LOAD CSV is processing, returns null if called outside of LOAD CSV context.
```
LOAD CSV FROM
'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists.csv' AS line
RETURN linenumber()
```
Returns the line number that LOAD CSV is currently processing, returns null if called outside of LOAD CSV context.
### Operators
|                        |                                           |
|------------------------|-------------------------------------------|
| **General**            | DISTINCT, ., []                           |
| **Mathematical**       | +, -, *, /, %, ^                          |
| **Comparison**         | =, <>, , =, IS NULL, IS NOT NULL |
| **Boolean**            | AND, OR, XOR, NOT                         |
| **String**             | +                                         |
| **List**               | +, IN, [x], [x .. y]                      |
| **Regular Expression** | =~                                        |
| **String matching**    | STARTS WITH, ENDS WITH, CONTAINS          |
### null
* `null` is used to represent missing/undefined values.
* `null` is not equal to `null`. Not knowing two values does not imply that they are the same value. So the expression `null = null` yields `null` and not `true`. To check if an expression is `null`, use `IS NULL`.
* Arithmetic expressions, comparisons and function calls (except `coalesce`) will return `null` if any argument is `null`.
* An attempt to access a missing element in a list or a property that doesn’t exist yields `null`.
* In `OPTIONAL MATCH` clauses, `nulls` will be used for missing parts of the pattern.
### Patterns
```
(n:Person)
```
Node with Person label.
```
(n:Person:Swedish)
```
Node with both Person and Swedish labels.
```
(n:Person {name: $value})
```
Node with the declared properties.
```
()-[r {name: $value}]-()
```
Matches relationships with the declared properties.
```
(n)-->(m)
```
Relationship from n to m.
```
(n)--(m)
```
Relationship in any direction between n and m.
```
(n:Person)-->(m)
```
Node n labeled Person with relationship to m.
```
(m)(m)
```
Relationship of type KNOWS or of type LOVES from n to m.
```
(n)-[r]->(m)
```
Bind the relationship to variable r.
```
(n)-[*1..5]->(m)
```
Variable length path of between 1 and 5 relationships from n to m.
```
(n)-[*]->(m)
```
Variable length path of any number of relationships from n to m. (See Performance section.)
```
(n)-[:KNOWS]->(m {property: $value})
```
A relationship of type KNOWS from a node n to a node m with the declared property.
```
shortestPath((n1:Person)-[*..6]-(n2:Person))
```
Find a single shortest path.
```
allShortestPaths((n1:Person)-[*..6]->(n2:Person))
```
Find all shortest paths.
```
size((n)-->()-->())
```
Count the paths matching the pattern.
### USE
```
USE myDatabase
```
Select myDatabase to execute query, or query part, against.
```
USE neo4j
MATCH (n:Person)-[:KNOWS]->(m:Person)
WHERE n.name = 'Alice'
```
MATCH query executed against neo4j database.
### SHOW FUNCTIONS and PROCEDURES
```
SHOW FUNCTIONS
```
Listing all available functions.
```
SHOW PROCEDURES EXECUTABLE YIELD name
```
List all procedures that can be executed by the current user and return only the name of the procedures.
### Labels
```
CREATE (n:Person {name: $value})
```
Create a node with label and property.
```
MERGE (n:Person {name: $value})
```
Matches or creates unique node(s) with the label and property.
```
SET n:Spouse:Parent:Employee
```
Add label(s) to a node.
```
MATCH (n:Person)
```
Matches nodes labeled Person.
```
MATCH (n:Person)
WHERE n.name = $value
```
Matches nodes labeled Person with the given name.
```
WHERE (n:Person)
```
Checks the existence of the label on the node.
```
labels(n)
```
Labels of the node.
```
REMOVE n:Person
```
Remove the label from the node.
### Lists
```
['a', 'b', 'c'] AS list
```
Literal lists are declared in square brackets.
```
size($list) AS len, $list[0] AS value
```
Lists can be passed in as parameters.
```
range($firstNum, $lastNum, $step) AS list
```
range() creates a list of numbers (step is optional), other functions returning lists are: labels(), nodes(), relationships().
```
MATCH p = (a)-[:KNOWS*]->()
RETURN relationships(p) AS r
```
The list of relationships comprising a variable length path can be returned using named paths and relationships().
```
RETURN matchedNode.list[0] AS value,