(cid:17)r
, gr(cid:17)
.
skv =
B More Case Study Examples
i=1
In this section, we present the PPEs output by the tool on few of the standard schemes.
B.1 Boneh-Boyen 04a (BB1) HIBE scheme
In this section, we recall the public parameters and the private keys of the BB1 HIBE [19] scheme.
Setup(1λ, 1(cid:96)): To generate system parameters for an HIBE of maximum depth (cid:96), select a random generator
g in G1, and random α, x, h1, h2, . . . , h(cid:96) ← Zp, and set g1 = gα, g2 = gx, Hi = ghi for all i ∈ [(cid:96)]. The public
parameters and the master secret key are given by pp = (g, g1, g2, H1, . . . , H(cid:96)) and msk = gα
2 .
j ≤ (cid:96). Pick random r1, . . . , rj ← Zp and output
KeyGen(skid|j−1, id): To generate the private key skid for an identity id = (id1, . . . , idj) ∈ Zj
p of depth
(cid:16)
j(cid:89)
skid =
2 ·
gα
(gidk
1
· Hk)rk , gr1 , . . . , grj
(cid:17)
.
k=1
Note that the private key for id can be generated just given a private key for id|j−1 = (id1, . . . , idj−1) ∈ Zj−1
as required.
p
The input ﬁle for the BB1 HIBE scheme when the maximum depth (cid:96) = 3 is presented in Figure 8. The
output by the tool is described in Figure 9.
Input File for BB1 HIBE
(*BB1 HIBE scheme when number of levels is ﬁxed to be 3*)
maps G1 * G1 ->GT.
ﬁxed vars [alpha, x, h1, h2, h3].
unﬁxed vars [r1, r2, r3].
trusted polys [F1 = alpha, F2=x, F3=h1, F4=h2, F5=h3] in G1.
Zp vars [id1, id2, id3].
untrusted polys [F6=x*alpha + (alpha*id1+h1)*r1 + (alpha*id2+h2)*r2 + (alpha*id3+h3)*r3, F7=r1, F8=r2, F9=r3] in
G1.
Figure 8:
Input ﬁle for BB1 HIBE scheme.
23
Output of the tool for BB1 HIBE
F0 = 1 in G1
F0 = 1 in GT
F1 = alpha in G1
F2 = x in G1
F3 = h1 in G1
F4 = h2 in G1
F5 = h3 in G1
F6 = alpha*x + h1*r1 + h2*r2 + h3*r3 + alpha*id1*r1 + alpha*id2*r2 + alpha*id3*r3 in G1
F7 = r1 in G1
F8 = r2 in G1
F9 = r3 in G1
F10 = id1 in G1
F11 = id2 in G1
F12 = id3 in G1
F13 = id1 in GT
F14 = id2 in GT
F15 = id3 in GT
F16 = alpha*id1 in G1
F17 = alpha*id2 in G1
F18 = alpha*id3 in G1
F19 = id1*x in G1
F20 = id2*x in G1
F21 = id3*x in G1
F22 = h1*id1 in G1
F23 = h1*id2 in G1
F24 = h1*id3 in G1
F25 = h2*id1 in G1
F26 = h2*id2 in G1
F27 = h2*id3 in G1
F28 = h3*id1 in G1
F29 = h3*id2 in G1
F30 = h3*id3 in G1
Processing untrusted polynomial F7 = r1 by rule2
F7 moved to trusted set and r1 moved to ﬁxed set by rule 2
Processing untrusted polynomial F8 = r2 by rule2
F8 moved to trusted set and r2 moved to ﬁxed set by rule 2
Processing untrusted polynomial F6 = alpha*x + h1*r1 + h2*r2 + h3*r3 + alpha*id1*r1 + alpha*id2*r2 + alpha*id3*r3
by rule2
Rule not applied
Processing untrusted polynomial F9 = r3 by rule2
F9 moved to trusted set and r3 moved to ﬁxed set by rule 2
Processing untrusted polynomial F6 by rule1
Naive PPE e(F6,F0) = e(F1,F2) * e(F3,F7) * e(F4,F8) * e(F5,F9) * e(F7,F16) * e(F8,F17) * e(F9,F18)
Optimized PPE e(F6,F0) = e(F1,F2)*e(F3*F16,F7)*e(F4*F17,F8)*e(F5*F18,F9)
F6 moved to trusted set by rule 1
PPEs : e(F6,F0) = e(F1,F2)*e(F3*F16,F7)*e(F4*F17,F8)*e(F5*F18,F9)
Ouptut : PPE Testable :)
Figure 9: Output of the tool for BB1 HIBE scheme.
B.2 Camenisch-Lysyanskaya Signature Scheme
2
2 , A, b, B, c).
Setup(1λ): Select a random generator g1 in group G1 and g2 in group G2. Sample random values
1. Set veriﬁcation key and secret key as vk = (g1, g2, X, Y, Z) and
In this section, we recall the Camenisch-Lysyanskaya Signature Scheme B [25] signature scheme adapted to
type-III pairings. We note that the original scheme described in the paper is in type-I setting. The setup
and signing procedures of the scheme proceeds as follows.
x, y, z ← Zp. Set X = gx
sk = (x, y, z).
veriﬁcation key as vk = (g1, g2, X, Y, Z). Sample a random a ← Zp. Set A = gaz
c = gax+axym+azxyr
Sign(vk, sk, msg): Parse input message as msg = (m, r) ∈ Z2
. Output signature σ = (ga
p, and secret key as sk = (x, y, z) and
2 , B = gazy
,
2 , b = gay
2
1 , Y = gy
1 , Z = gz
The input ﬁle for CL04 Signature Scheme B [25] is presented in Figure 10. The output of the tool is
presented in Figure 11.
B.3 Waters09 IBE Scheme
In this section, we recall Waters09 HIBE scheme. The setup and key generation algorithms of the scheme
proceeds as follows.
24
Input File for CL04 Signature
maps G1 * G2 ->GT.
ﬁxed vars [x, y, z].
unﬁxed vars [a].
Zp vars [m, r]. (*message*)
trusted polys [F1 = x, F2 = y, F3 = z] in G1. (*veriﬁcation key*)
untrusted polys [F4 = a*z, F5 = a*y, F6 = a*z*y, F7 = a*(x + x*y*m) + a*z*x*y*r, F8 = a] in G2. (*signature*)
Figure 10:
Input ﬁle for CL04 signature scheme B.
Output of the tool for CL04 Signature Scheme B
F0 = 1 in G1
F0 = 1 in G2
F0 = 1 in GT
F1 = x in G1
F2 = y in G1
F3 = z in G1
F4 = a*z in G2
F5 = a*y in G2
F6 = a*y*z in G2
F7 = a*x + a*m*x*y + a*r*x*y*z in G2
F8 = a in G2
F9 = m in G1
F10 = r in G1
F11 = m in G2
F12 = r in G2
F13 = m in GT
F14 = r in GT
F15 = m*x in G1
F16 = r*x in G1
F17 = m*y in G1
F18 = r*y in G1
F19 = m*z in G1
F20 = r*z in G1
Processing untrusted polynomial F4 = a*z by rule2
Rule not applied
Processing untrusted polynomial F5 = a*y by rule2
Rule not applied
Processing untrusted polynomial F6 = a*y*z by rule2
Rule not applied
Processing untrusted polynomial F7 = a*x + a*m*x*y + a*r*x*y*z by rule2
Rule not applied
Processing untrusted polynomial F8 = a by rule2
F8 moved to trusted set and a moved to ﬁxed set by rule 2
Processing untrusted polynomial F4 by rule1
Naive PPE e(F4,F0) = e(F3,F8)
Optimized PPE e(F4,F0) = e(F3,F8)
F4 moved to trusted set by rule 1
Processing untrusted polynomial F5 by rule1
Naive PPE e(F5,F0) = e(F2,F8)
Optimized PPE e(F5,F0) = e(F2,F8)
F5 moved to trusted set by rule 1
Processing untrusted polynomial F6 by rule1
Naive PPE e(F6,F0) = e(F2,F4)
Optimized PPE e(F6,F0) = e(F2,F4)
F6 moved to trusted set by rule 1
Processing untrusted polynomial F7 by rule1
Naive PPE e(F7,F0) = e(F16,F6) * e(F15,F5) * e(F1,F8)
Optimized PPE e(F7,F0) = e(F16,F6)*e(F15,F5)*e(F1,F8)
F7 moved to trusted set by rule 1
PPEs : e(F7,F0) = e(F16,F6)*e(F15,F5)*e(F1,F8), e(F6,F0) = e(F2,F4), e(F5,F0) = e(F2,F8), e(F4,F0) = e(F3,F8)
Ouptut : PPE Testable :)
Figure 11: Output of the tool for CL04 Signtature Scheme B.
Setup(1λ): Sample a random generator g ← G1, and then sample random elements v, v1, v2, w, u, h, a1, a2, b, α ←
Zp. Set V = gv, V1 = gv1, V2 = gv2, W = gw, U = gu, H = gh, T1 = gv+v1a1, T2 = gv+v2a2. It then public
parameters
pp = (gb, ga1 , ga2 , gb·a1, gb·a2 , T1, T2, Tb
1, Tb
2, W, U, H, e(g, g)α·a1·b).
25
It sets master secret key msk = (g, gα, gα·a1, V, V1, V2).
KeyGen(msk, id): Sample random elements r1, r2, z1, z2, tagk ← Zp. Let r = r1 + r2. Output secret key
(cid:17)
1 gz1 , (gb)−z1, V r
2 gz2, (gb)−z2, gr2b, gr1,
(cid:16)
skid =
gα·a1 · V r, g−αV r
(U idW tagk H)r1 , tagk
.
The input ﬁle for Waters09 IBE scheme [46] is presented in Figure 12. The output by the tool is presented
in Figure 14. Note that, this scheme is provably not PPE Testable, and hence our tool outputs unknown.
Input File for Waters09 IBE
maps G1 * G1 ->GT.
ﬁxed vars [a1, a2, b, alpha, v, v1, v2, w, u, h].
unﬁxed vars [r1, r2, z1, z2].
Zp vars [id, tag].
trusted polys [F1 = b, F2 = a1, F3 = a2, F4 = b*a1, F5 = b*a2, F6 = v+v1*a1, F7 = v+v2*a2, F8 = b*(v+v1*a1), F9 =
b*(v+v2*a2), F10 = w, F11 = u, F12 = h] in G1.
trusted polys [F13 = alpha*a1*b] in GT.
untrusted polys [F14 = alpha*a1+v*(r1+r2), F15 = -alpha+v1*(r1+r2)+z1, F16 = -b*z1, F17 = v2*(r1+r2) + z2, F18 =
-b*z2, F19 = r2*b, F20 = r1, F21 = (u*id+w*tag+h)*r1 ] in G1.
Figure 12:
Input ﬁle for Waters09 IBE scheme.
Input File for RW13 CP-ABE