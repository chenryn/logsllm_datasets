本文翻译自：  
作者：Dikla Barda， Roman Zaikin，Oded Vanunu
* * *
WhatsApp拥有用户15亿，有超过10亿个群组，每天发送消息超过650亿（2018年初数据）。大量的用户和消息规模下，出现垃圾邮件、谣言、虚假消息的概率也很大。
Check
Point研究人员近期发现WhatsApp中存在漏洞，攻击者利用漏洞可以拦截和伪造个人聊天和群组聊天会话消息，这样攻击者就可以传播垃圾邮件、谣言、虚假消息了。
研究人员发现了三种利用该漏洞的攻击方法，这三种方法都是用社会工程技巧来欺骗终端用户。攻击者可以：  
用群组聊天中的引用（quote）特征来改变发送者的身份，即使发送者不是群成员；  
修改其他人的回复消息（以发送者的口吻）；  
伪装成公开消息，发送私聊消息给另一个群组成员，当目标个人回复后，会话中所有人都会看到该消息。
# POC视频
## 技术分析
WhatsApp会加密发送的消息、图片、语言通话、视频通话和所有形式的内容，这样只有接收者能看到。但不止WhatsApp可以看到这些消息。
图1: WhatsApp加密的聊天
研究人员决定分析加密过程，对算法进行逆向来解密这些数据。解密了WhatsApp的通信后，研究人员发现WhatsApp使用的是protobuf2协议。
把protobuf2数据转变成json数据就可以看到发送的真实参数，然后研究人员伪造了参数数据来验证WhatsApp的安全性。
研究人员利用Burp Suit Extension and 3 Manipulation方法对其进行研究。  
在伪造之前，研究人员先获取了session的公钥和私钥，并填入burpsuit扩展中。
## 访问密钥
在QR码生成之前，可以从WhatsApp web端的密钥生成阶段获取密钥：
图2: 通信用的公钥和私钥
想要获取密钥，就要获取用户扫描QR码后手机发给WhatsApp web端的秘密参数：
图3: WebSocket中的秘密密钥
扩展给出的结果：
图4: WhatsApp Decoder Burp Extension
点击连接（connect）后，扩展会连接到扩展的本地服务器，服务器会执行扩展所需的所有任务。
## 修改WhatsApp
解密了WhatsApp的通信后，就可以看到手机端WhatsApp和web端之间发送的所有参数。然后就可以伪造消息了，并以此检查WhatsApp的安全性。
# 攻击
三种攻击场景描述如下：
## 攻击1：在群组聊天中修改发送者身份，即使发送者不是群组成员
在这种攻击者，可以伪造回复消息来模仿另一个群组人员，即使该群组成员并不存在，比如Mickey Mouse。
为模仿群组中的人，攻击者需要抓取这样的加密流量：
图5: 加密的WhatsApp通信
一旦获取流量后，就可以发送给扩展，扩展会解密流量：
图6: 解密的WhatsApp消息
### 使用扩展
使用扩展时应注意以下参数：
  * Conversation，发送的真实内容；
  * participant，消息的真实发送者；
  * fromMe，该参数表明是否是我发送的数据；
  * remoteJid，表明数据发送的目的群组；
  * id，数据的id，手机的数据库中也会保存系统的id。
了解了这些参数之后就可以伪造会话消息了。比如，群成员发送的“great”内容可以修改为“I’m going to die, in a hospital
right now”，参与者的参数也可以修改为其他人：
图7: 伪造的Reply消息
Id也有修改，因为数据库中已经存在该id了。
为了让每个人都看到伪造的信息，攻击者需要回复他伪造的消息，引用并修改原始消息（将great修改为其他），然后发送给群里的其他人。
如下图所示，研究人员创建了一个没有消息记录的新群组，然后使用上面的方法创建了假的回复：
图8: 原始会话
参数`participant`可以是文本或不在群中的某人的手机号，这会让群人员认为这真的是该成员发送的消息。比如：
图9: 修改消息内容
使用调试工具，结果就是：
图10: 回复来自群外人员的消息
## 攻击2：以发送者的口吻修改回复
在攻击2中，攻击者能以其他人的口吻发送消息以达到修改聊天的目的。这样，就可以模仿他人或完成欺骗交易。
为了伪造消息，必须修改消息的fromMe参数，表示在个人会话中发送消息。
从web端发送的消息在发送到Burp suite之前，我们对其进行分析。可以在`aesCbcEncrypt`函数上设置一个断点，从`a`参数出获取获取。
图11: OutGoing消息修改
然后复制数据到Burp扩展中，选择`outgoing direction`，然后解密数据：
图12: 解密Outgoing Message
在将其改为`false`，然后加密后，得到下面的结果：
图13: Outgoing Message加密
然后要修改浏览器的`a`参数，结果是含有内容的推送通知。这样甚至可以欺骗整个会话。
图14: 发送消息给自己
如果是其他人的话，整个会话应该是这样的：
图15: 发送消息给自己，别人看到的结果
## 攻击3：在群聊中发送私聊消息，但接收者回复时，整个群都可以看到回复内容
在这种攻击下，可以修改群组中的特定成员，在群聊中发送私聊信息，当接收者回复给消息时，整个群成员都可以看到回复的内容。
研究人员通过逆向安卓APP发现了攻击向量。在该实例中，研究人员发现如果攻击者在群中修改了一个消息，那么就会在数据库`/data/data/com.whatsapp/databases/msgstore.db`中看到该消息。
图16: 在群聊中发送私聊消息保存在/data/data/com.whatsapp/databases/msgstore.db数据库中
可以使用sqlite3客户端使用下面的命令打开会话：
    SELECT * FROM messages;
可以看到下面的数据：
图17: 修改后的数据库
为了在群中发送消息，但限制消息只能某个特定群成员才能看到，因此要设定`remote_resource`参数。
这里的使用的方法就是将`key_from_me`参数从`0`修改为`1`。  
完成这些动作后，运行下面的命令，更新`key_from_me`和数据：
    update messages set key_from_me=1,data=”We, all know what have you done!” where _id=2493;
攻击者需要重启WhatsApp客户端来强制引用发送新消息。之后的结果就是：
只有特定的受害者接收到了消息。
如果受害者写消息回应（writes something as a response），那么群组内的所有人都可以看到；但如果受害者直接回复（reply
to）消息的话，只有他自己可以看到回复的内容，但其他人就可以看到原始消息。
# WhatsApp加密
源码：
WhatsApp Web端在生成QR码之前，会生成一对公约和私钥用于加密和解密。
图23: 会话用的公钥和私钥
以下称私钥为`priv_key_list`，称公钥为`pub_key_list`。
密钥是用随机的32字节用curve25519_donna生成的。
图24: Curve25519加密过程
为了解密数据，需要创建解密码。这就需要从WhatsApp Web端提取私钥，因为需要私钥才可以解密数据：
    self.conn_data[“private_key”] = curve25519.Private(“”.join([chr(x) for x in priv_key_list]))
    self.conn_data[“public_key”]  = self.conn_data[“private_key”].get_public()
    assert (self.conn_data[“public_key”].serialize() == “”.join([chr(x) for x in pub_key_list]))
然后，QR码就创建了，在用手机扫描QR码之后，就可以通过`websocket`发送信息给Whatsapp Web端了：
图25: 来自WebSocket的秘密密钥
最重要的参数是加密的，之后会传递给`setSharedSecret`。这会将密钥分成三个部分，并且配置所有解密WhatsApp流量所需的加密函数。
首先，是从字符串`e`到数组的翻译，有些部分会把密钥分成前32字节的n和第64字节到结尾`t`的`a`两部分。
图26: 获取SharedSecret
深入分析函数`E.SharedSecret`，发现它使用前32字节和生成QR码的私钥作为两个参数：
图27: 获取SharedSecret
然后可以在python脚本中加入下面的代码：
    self.conn_data[“shared_secret”] = self.conn_data[“private_key”].get_shared_key(curve25519.Public(self.conn_data[“secret”][:32]), lambda key: key)
然后是扩展的80字节：