to collect packet traces, we develop a method to automatically extract signatures from
a collection of ﬂows associated with game servers captured in our ﬁeld dataset.
Know Thy Lag
399
Dataset: From the lab and ﬁeld packet traces (described above), we obtained over
20,000 labeled ﬂows, with each game at least having 500 ﬂows. We ﬁltered and cleaned
the ﬁeld traces to remove non-game-play ﬂows using simple heuristics such as ﬂow
duration (games typically tend to last for more than a minute at the very least) and proto-
cols (excluding ICMP trafﬁc). A ﬂow record in our dataset contains: (i) game name, (ii)
transport-layer protocol (UDP/TCP), (iii) server-side port number – e.g., 9017 for the
Fortnite example considered in Sect. 2.1, (iv) packet size (in bytes) arrays of upstream
and downstream directions each for ﬁve intial packets – e.g., up:[29,29,50,314,78] and
down:[29,29,116,114,114], and (v) payload byte (in hex strings) arrays of upstream and
downstream directions each for ﬁve initial packets – e.g., [“17aabb...”,“28a004...”].
We note that while client-side port numbers can be useful, they are often obfuscated due
to the presence of NAT and hence are not considered in this study. Further, we extract
packet-level attributes from just the ﬁrst ﬁve upstream and ﬁve downstream packets as
they are enough to capture game-speciﬁc handshakes.
To extract game signatures from our dataset, we focused on extracting speciﬁc pat-
terns, which could be a static value (consistent across all ﬂows of a game title) or a range
of dynamic values. To illustrate, Fortnite3 comes with the following speciﬁc signatures:
the server UDP port number is a dynamic value between 9000 and 9100; 1st upstream
and downstream packets have a static size of 29 bytes (u 0 len = d 0 len = 29)4;
second to tenth byte of 1st upstream packet are 0x00. (u 0 b 1 = ... = u 0 b 9 =0x00)5
Static Signatures: We extract static signatures from protocol, packet size and payload
byte content speciﬁc to each game title by checking if an attribute has the same value
for more than α fraction of the ﬂows. If so, the attribute and its value are added to that
speciﬁc game’s signature (e.g., “u 0 len = 29” or “u 0 b 9 =0x00”). Note that if α is
set to a small value (say, 0.5), the game’s signature becomes richer (containing more
attributes to match) and more speciﬁc to that game. A rich signature demands more
stringent requirements from a ﬂow (i.e., higher chance of rejecting a ﬂow with minor
deviation from expected attributes – resulting in false-negatives). Setting α to a value
close to 1 makes the signature fairly generic, which would imply a chance of overlap
with other games – resulting in false positives. We empirically tuned it at 0.90 to strike
a balance and detect the games accurately. In addition, we use another parameter k to
specify the depth of packet payload (in number of bytes) to be analyzed. We found that
most of the static payload byte values can be captured by looking at just the ﬁrst 10
bytes of each packet, meaning k = 10.
Dynamic Signatures: We extract dynamic signatures for server-side port numbers as
they often do not have a ﬁxed value but lie in a speciﬁc range of possible values (con-
ﬁgured by their developers). Since we collected a rich set of ﬂows in the ﬁeld dataset,
we use the min and max of the port numbers to identify an expected range. We further
expand the range by rounding the min and max to the nearest 100 to capture those port
3 A snippet of our signatures for three representative games is shown in Fig. 9 (in Appendix C)
4 “d 0 len”: ﬁrst letter denotes the direction (“d” for downstream and “u” for upstream), second
letter (“0”) denotes the packet index, and third letter (“len”) denotes the packet size.
5 “u 0 b 9”: the letters “u” and “0” are same as above while third letter (“b”) denotes byte, and
fourth letter (“9”) denotes the byte index.
400
S. C. Madanapalli et al.
numbers that might have missed out in our traces. Doing so gives us a signature like
port = [9000 − 9100] for Fortnite.
Thus, we obtain the static and dynamic signatures of each game title from a set of
game ﬂows along with parameters k and α as input. Note that signatures may overlap
across games. For example, u 0 len is 29 for both games Fortnite and Call of Duty
Modern Warfare (CoD:MW), shown in Fig. 9. Therefore, we need a model that can
classify ﬂows based on the attributes of packets as they arrive.
Fig. 1. The structure of our classiﬁer, illustrating a progressive classiﬁcation of a ﬂow.
2.3 Game Classiﬁer
We employ a two-level hash table (Fig. 1) that is constructed by combining all the game
signatures extracted above, enabling us to rapidly detect game-play ﬂows (and dismiss
undesired trafﬁc). The ﬁrst level contains the packet attributes (e.g., u 0 len, u 0 b 0) as
keys. The second level contains the possible values of the attribute as key, and possible
game titles that have the same value as the entry of the hash table.
Flow of Events: Given the pre-populated hash table, we demonstrate our classiﬁcation
algorithm for an illustrative example in Fig. 1. We initialize the predicted output by the
set of all possible games in our dataset (shown on the right side). For each incoming
packet of a given ﬂow (shown on the left side), the attributes are extracted and looked
up in the hash table. For each attribute, a set of possible game classes is inferred. For
an illustrative WoW (World of Warcraft) ﬂow, upon arrival of the ﬁrst packet, the proto-
col and port are identiﬁed as TCP:3724. Looking them up in the hash table followed by
intersection with {all games} gives us the set {‘‘WoW’’, ‘‘Hearthstone’’} as output.
We then proceed by looking up the packet size of 52 bytes. While 52 only yields WoW
in our hash table, keep in mind that Hearthstone corresponds to a wildcard (* : indi-
cating that attribute values were not static) meaning that the size of the ﬁrst upstream
packet in Hearthstone can be anything (including 52) and hence no change in the out-
put game set. Upon extracting the second byte of the ﬁrst upstream packet (u 0 b 1)
Know Thy Lag
401
we narrow it down to WoW. When the set of games reduces to one game, we declare
it as classiﬁed. Thus, the classiﬁer rapidly eliminated other possibilities and detected
a WoW game-play ﬂow by analyzing the protocol, port, packet size, and the ﬁrst few
bytes of the upload packet. Note that packets’ inter-arrival time in a game-play ﬂow is
in the order of milliseconds, giving sufﬁcient room for hash table lookups (in the order
of microseconds) in between packets.
We intentionally employ an algorithmic model rather than a machine learning model
since the latter requires all the input attributes to be collected, stored and processed in
memory to make a classiﬁcation decision, which is more expensive in memory and
compute. Our classiﬁer model detects the game or rejects non-gaming ﬂows progres-
sively on a per-packet basis, without necessarily requiring the attributes of all ten initial
packets. Whenever the possible games reduce to an empty set, we do not process pack-
ets of that ﬂow further by classifying it as a non-gaming ﬂow. This helps us quickly
eliminate ﬂows (often on the ﬁrst packet) that do not form a part of our game set. For
example, none of the games use HTTP(S), so a majority of the trafﬁc using TCP:80
or TCP:443 is eliminated straight away and is never detected as a game. This avoids
unnecessary per-ﬂow state maintenance (no state is maintained for ﬂows rejected on
the ﬁrst packet) and helps our detection method scale.
2.4 Evaluation
Our model (signatures and classiﬁer algorithm) achieves an overall accuracy of 99.6%
(with a precision of 100% and a false negative rate of 0.36%) when it is applied to our
ﬁeld dataset. We found that ﬂows of nine game titles receive a perfect accuracy 100%,
while 4.5% of WoW ﬂows are not detected as a game ﬂow. Note that our game-speciﬁc
signatures are generated based on trafﬁc patterns found in α = 0.90 fraction of labeled
game ﬂows; hence a minority of ﬂows that do not conform to those signatures will
not be detected as gaming ﬂows. Our model may miss some game ﬂows but indeed
detects games correctly and conﬁdently. We observe that the model is able to detect all
games in our dataset within the ﬁrst two packets (ﬁrst upload and ﬁrst download) as the
signatures across the ten games are fairly unique, resulting in a rapid detection.
2.5 Field Deployment and Insights
The game detection system was deployed in our university campus network (with users
from ofﬁces and student dormitories) during the month of Sep 2021 to obtain insights
into the game playing patterns, as well as to determine corresponding gaming servers
that clients connect to and their latency from our campus (discussed in Sect. 3). Our
classiﬁer (loaded with the signatures) is implemented as a DPDK [14] application run-
ning on a server which receives campus trafﬁc mirror from optical taps (observed total
trafﬁc peak: 8Gbps). To reduce the rate of false positives in the wild i.e., not detect
non-gaming trafﬁc as games, we made our algorithm more conservative to analyze all
attributes of the initial ten packets of each ﬂow before classifying the ﬂow. Also, we
monitored the activity of the ﬂow for the ﬁrst minute of its lifetime, ensuring packet
rates match the expected rate of gaming ﬂows (typically less than 100 pkts/sec).
402
S. C. Madanapalli et al.
The system detected over 31k game-play sessions, constituting nearly 9000 hours
worth of game-play across the ten titles. We found that the top three games by the
number of gaming sessions were CoD:MW (9545), Fortnite (7930), and League of
Legends (6290). Interestingly, LoL dominated by the total number of gaming hours
– LoL was played for 2611 hours, followed by CoD:MW for 1575 hours and Fortnite
for 1562 hours. This highlights the games with which gamers generally engage most.
Fig. 2. Dynamics of daily game-play hours across ten titles during ﬁeld trial.
Figure 2 shows the dynamics of daily game-play hours across the ten titles. Unfortu-
nately there was a power outage in our lab on 14 Sep, causing data to be missed for that
day. We make a couple of observations: (a) there is a slight decreasing trend of daily
gaming hours during this period (more gaming hours in the ﬁrst half than the second
half) due to academic term starting on 13-Sep following a study break; and (b) gaming
hours ﬂuctuate across game titles – as an example, Genshin Impact (shown in brown)
was more popular early in September (≈87 h daily), but then trended down to less than
half that (≈37 h daily) towards the end of the month; Fortnite (shown in green) was
played for 475 hours in the third week when Chapter 2 Season 8 was released, but this
dropped to 325 hours in the fourth week once the excitement wore off – such ebb and
ﬂow is the norm in gaming [17], requiring ISPs to have constant visibility so they can
tune their networks accordingly.
Table 2. Summary of detected game-play sessions in our ﬁeld trial.
# Game Session # Game Hour # Game Server # IP Preﬁx # AS # Country
31673
8956
4523
165
31
14
Figure 3 shows the distribution of game-play session duration across the ten titles.
We observe a few patterns of user engagement with various games: Several CS:GO,
Genshin Impact, and WoW gamers spend more than an hour in each gaming session,
with CS:GO being the most engaging game with median duration of 32 minutes. Rocket
Know Thy Lag
403
Fig. 3. Distribution of game-play session duration across the ten titles.
League is played for a relatively ﬁxed duration of 10 minutes. Further, the impact of
game modes is pronounced in games like CoD:MW with three bumps on its corre-
sponding curve, highlighting three clusters of game modes, namely 5v5, GroundWar,
and BattleRoyale offered by this game title.
Lastly, we analyzed short game ﬂows (with duration less than 2 min), which can
indicate game abandonment. While only 3.5% of the ﬂows with local servers (within
Australia) were short, it quadruples to more than 12% when the game is played on
remote servers. Though correlation should not be interpreted as causation, it does indi-
cate that gamers tend to abandon games more often when the latency to the server is
high. The next section draws insights into game server locations and latencies.
3 Mapping Game Server Locations and Latencies
Having measured gaming behaviors in the University campus over a one-month period,
we now shift focus to the game servers, including their location and latency. This covers
over 31 k gaming sessions played against 4,500 unique game servers, spread across 14
countries and 165 routing preﬁxes and 31 ASes, as shown in Table 2.
3.1 Methods and Tools
We employed an IP Geolocation service [11] to tag the location of every server IP
address. We also used the online Looking Glass tool exposed by the University’s ISP,
that offers ping, traceroute, and BGP queries to obtain routing preﬁx (i.e., the subnet
of the server IP address) and its AS path. Furthermore, we estimated the latency (we will
use latency interchangeably with round-trip-time or RTT) by actively pinging the game
servers ourselves. Since only 26% of the servers responded to ICMP pings, we used
two additional tools – HPing3 [18] was used to perform TCP ping using SYN packets to
servers of TCP-based games (WoW and Hearthstone), and fping [19] to ping the entire
subnet of the game server (since the entire preﬁx is housed in the same AS), yielding
min, average, and max RTT to all servers in the subnet that respond. To corroborate
the validity of (subnet) fping, we compared its average value to (endpoint) ping where
available, and found the mean absolute percentage error (MAPE) to be less than 3%.
404
S. C. Madanapalli et al.
3.2 Mapping Game Servers from the University
Fig. 4. Sankey diagram depicting game sessions, countries, and latency bands.
A high level view of sessions of each of the ten game titles as they map to servers in
various countries and at different latency bands is shown in Fig. 4. Most countries map
to a single latency band (needless to say Australia (AU) is the home country), though
some countries (like US) map to multiple latency bands, due to disparities in routing
paths to multiple ASes in the same country, or to different subnets within the same AS.
Speciﬁcally, 82.3% of the game-play sessions connected to servers within Australia
with fairly low latency of 2–20 ms, 13.1% of the sessions experienced 100–200 ms,
3.6% had 200–300 ms, and 1% had latency of 300+ ms.
Our measurements clearly reveal that game providers often use multiple CDNs
(each identiﬁed by a unique AS number) to host their game servers – for example,
while Fortnite largely connects to Amazon cloud locally, some sessions connected to
Google cloud in another country. There are several reasons why a gamer’s session may
be hosted at a server with high latency: (a) no nearer server availability; (b) there may
not be enough local players available, and the player is therefore matched with players
in other geographies; or (c) the player deciding to team with friends in another country,
and the server is chosen in proximity to the majority of players.
To get a better understanding of gaming latency per title, we plot in Fig. 5 the
latency distribution across the ten games. Fortnite and Escape from Tarkov predomi-