subvert the antivirus detection mechanism. 
In the PowerShell technique, we used the PowerShell tool to bypass the antivirus.
And in the single malicious functionality technique, we asked an important question to 
better understand the antivirus detection engine perspective and answered the question 
followed by a practical example.
In the next chapter, we will learn about what can we do with the antivirus bypass 
techniques that we have learned so far in the book.
Further reading
We invite and encourage you to visit the proof-of-concept videos on the following 
YouTube playlist at the following link: https://www.youtube.com/
playlist?list=PLSF7zXfG9c4f6o1V_RqH9Cu1vBH_tAFvW
Figure 6.25 – The YouTube channel with the Proof-of-Concept videos
Section 3:  
Using Bypass 
Techniques in the 
Real World
In this section, we'll look at using the antivirus bypass technique approaches, tools, and 
techniques we've learned about in real-world scenarios, distinguish between penetration 
tests and red team operations, and understand how to practically fingerprint antivirus 
software. Furthermore, we'll learn the principles, approaches, and techniques to write 
secure code and to enrich antivirus detection capabilities.
This part of the book comprises the following chapters:
• Chapter 7, Antivirus Bypass Techniques in Red Team Operations 
• Chapter 8, Best Practices and Recommendations
7
Antivirus Bypass 
Techniques in Red 
Team Operations
In this chapter, you will learn about the use of antivirus bypass techniques in the real 
world, and you also will learn about the difference between penetration testing and red 
teaming, along with their importance, as well as how to fingerprint antivirus software as 
part of a stage-based malware attack.
After we have finished our research and found antivirus software bypass techniques in a 
lab environment, we will want to transfer our use of them to the real world—for example, 
in a red team operation.
In this chapter, we will explore the following topics:
• What is a red team operation?
• Bypassing antivirus software in red team operations
• Fingerprinting antivirus software
178     Antivirus Bypass Techniques in Red Team Operations
Technical requirements
Check out the following video to see the code in action: https://bit.ly/3xm90DF
What is a red team operation?
Before we understand what a red team is and what its sole purpose is, it is important to 
first understand what a penetration test is—or in its shorter form, a pentest. 
A pentest is a controlled and targeted attack on specific organizational assets. For 
instance, if an organization releases a new feature in its mobile application, the 
organization will want to check the security of the application and consider other aspects 
such as regulatory interests before the new feature is implemented into their production 
environment.
Of course, penetration tests are not just conducted on mobile applications but also on 
websites, network infrastructure, and more.
The main goal of a penetration test is to test an organization's assets to find as many 
vulnerabilities as possible. In a penetration test, practical exploitation followed by Proof 
of Concept (PoC) proves that an organization is vulnerable, and thus its integrity and 
information security can be impacted. At the end of a penetration test, a report must be 
written that will include each of the found vulnerabilities, prioritized by its relevant risk 
severity—from low to critical—and this will then be sent to the client.
It is also important to note that the goal of penetration testing is not to find newly 
undisclosed vulnerabilities, as this is done in vulnerability research projects.
In a red team, the goal is different—when a company wants to conduct a red team 
operation, the company will want to know whether they could be exposed to intrusions, 
whether this is through a vulnerability found in one of their publicly exposed servers, 
through social engineering attacks, or even as a result of a security breach by someone 
impersonating some third-party provider and inserting a Universal Serial Bus (USB) 
stick that is pre-installed with some fancy malware. In a red team operation, important 
and sensitive data is extracted, only this is done legally.
A real red team does not include any limitations.
Now that we understand what a red team is, let's discuss about bypassing antivirus 
software in red team operations.
Bypassing antivirus software in red team operations     179
Bypassing antivirus software in red team 
operations
There are a lot of advantages to bypassing antivirus software in your professional journey 
when performing red team operations. In order to use this valuable knowledge, you will 
need to understand on which endpoint you are going to perform the bypass, using various 
techniques.
When performing red team operations on a company, one of the primary goals is to 
extract sensitive information from an organization. To do this, we will need to receive 
some type of access to the organization. For instance, if the organization uses Microsoft 
365, extraction of information may be accomplished by using a simple phishing page 
for company employees, connecting to one of the employees' user accounts, and stealing 
information already located in the cloud.
But that is not always the case. Nowadays, companies still store their internal information 
in their Local Area Network (LAN)—for example, within Server Message Block (SMB) 
servers—and we as hackers must deal with this and adapt the hacking technique to the 
case at hand.
When we compromise an endpoint and try to infiltrate it with malicious software, most 
of the time we do not know which antivirus software is running on the endpoint. Since 
we do not know which antivirus software is implemented in the targeted organization 
endpoints, we do not know which technique to use either, as a technique that works 
to bypass a particular antivirus software will probably not work when trying to bypass 
another. That is why we need to perform antivirus fingerprinting on the endpoint.
Before we infiltrate the endpoint with malicious software, we need to infiltrate with 
different software, which will constitute the first stage of our attack, as illustrated in the 
following diagram:
 Figure 7.1 – The two stages of antivirus bypass in a red team operation
180     Antivirus Bypass Techniques in Red Team Operations
The purpose of the first stage of the malware attack is to perform identification and to 
inform us which antivirus software is installed on the victim endpoint. Earlier, during 
the lead-gathering stage, we saw that antivirus software adds registry values and services, 
creates folders with the antivirus software name, and more. So, we are taking advantage of 
precisely this functionality in order to determine which antivirus software is operating on 
the victim's system.
Now that we have got a sense and understanding of a penetration test and a red team, we 
can now proceed to the next part, where we will learn to fingerprint antivirus software in 
target Windows-based endpoints. 
Fingerprinting antivirus software
Antivirus fingerprinting is a process of searching and identifying antivirus software in a 
target endpoint based on identifiable constants, such as the following:
• Service names
• Process names
• Domain names
• Registry keys
• Filesystem artifacts
The following table will help you perform fingerprinting of antivirus software on the 
endpoint by the service and process names of the antivirus software:
Fingerprinting antivirus software     181
Table 7.1 – Antivirus processes and services
182     Antivirus Bypass Techniques in Red Team Operations
Note
You do not have to rely only on process and service names—you can also rely 
on registry names, and more. We recommend that you visit the Antivirus-
Artifacts project at https://github.com/D3VI5H4/Antivirus-
Artifacts to find out more about this.
We can perform fingerprinting on a simple Python script, for instance, which will monitor 
all processes running on the operating system and compare predetermined strings.
For example, let's look at the following simple and elegant code:
import wmi
print("Antivirus Bypass Techniques by Nir Yehoshua and Uriel 
Kosayev")
Proc = wmi.WMI()
AV_Check = ("MsMpEng.exe", "AdAwareService.exe", "afwServ.
exe", "avguard.exe", "AVGSvc.exe", "bdagent.
exe", "BullGuardCore.exe", "ekrn.exe", "fshoster32.
exe", "GDScan.exe", "avp.exe", "K7CrvSvc.exe", "McAPExe.
exe", "NortonSecurity.exe", "PavFnSvr.exe", "SavService.
exe", "EnterpriseService.exe", "WRSA.exe", "ZAPrivacyService.
exe")
for process in Proc.Win32_Process():
    if process.Name in AV_Check:
        print(f"{process.ProcessId} {process.Name}")
As you can see, using the preceding Python code, we can determine which antivirus 
software is actually running on a victim endpoint by utilizing Windows Management 
Instrumentation (WMI). With this knowledge of which antivirus software is actually 
deployed in the targeted victim endpoint, as well as knowledge of the gathered research 
leads, we can then download the next-stage malware that is already implemented with our 
antivirus bypass and anti-analysis techniques.
To compile this script, we will use pyinstaller with the following command:
pyinstaller --onefile "Antivirus Fingerprinting.py"
In the following screenshot, we can see that the script detects the Microsoft Defender 
antivirus software on the endpoint by its process name: 
Fingerprinting antivirus software     183
Figure 7.2 – Executing Antivirus Fingerprinting.exe 
In the following screenshot, you can see the results from VirusTotal, which show that in 
fact, six different antivirus engines detected our legitimate software as a malicious one:
Figure 7.3 – VirusTotal's detection rate of 6/64 antivirus engines
It is important to mention the name of the signatures that triggered the detections in each 
one of these antivirus engines. These are listed here:
1. Trojan.PWS.Agent!m7rD4I82OUM
2. Trojan:Win32/Wacatac.B!ml
3. Trojan.Disco.Script.104
These detections are, in fact, false positives.
184     Antivirus Bypass Techniques in Red Team Operations
In addition, Microsoft Defender also detected our software as malware, and the 
demonstration itself was conducted on one of our endpoints that was pre-installed with 
the Microsoft Defender antivirus software.
It is important to understand that the detection rate in each uploaded sample in 
VirusTotal changes after clicking on the Reanalyze file button. In the following 
screenshot, you can see the same file, after almost 3 months since the first submission:
Figure 7.4 – VirusTotal's detection rate of 1/64 antivirus engines
Tip
After writing antivirus bypass custom-made code and being sure that the 
antivirus software detects it as a false positive, try to wait some time and you 
will most likely see a drop in the detection rate.
Many malware authors and threat actors use this technique to identify which antivirus 
software is installed on the victim endpoint in order to apply the relevant bypass 
technique. The following is a great example of malware that does just that:
Fingerprinting antivirus software     185
Figure 7.5 – An IDA Pro view, a malware that enumerates antivirus process names
The malware enumerates process names such as V3SP.EXE, SPIDERAGENT.EXE, and 
EKRN.EXE, which relate to AhnLab, Dr.Web, and ESET antivirus vendors, respectively.
186     Antivirus Bypass Techniques in Red Team Operations
Tip
Antivirus software can also be detected based on other artifacts that can be 
found on the targeted system by enumerating services, registry keys, open 
mutex values, files and folders in the filesystem, and more.
Summary
In this chapter, we learned how to reveal which antivirus software is installed on an 
endpoint by using a WMI process enumeration technique and looked at the importance 
of adapting your antivirus bypass techniques to specific antivirus software. There are 
innumerable ways to implement a red team operation that includes antivirus software 
fingerprinting and antivirus bypass.
The Python code that we have used in this chapter was actually a small part of our stage-
based malware attack that we used in one of our red team operations conducted on our 
clients legally.
In the next chapter, we will learn how antivirus vendors can improve most antivirus 
engines in order to prevent antivirus bypass.
8
Best Practices and 
Recommendations
In this chapter, we will explain what the antivirus software engineers did wrong, why 
the antivirus bypass techniques worked, and how to make antivirus software better with 
secure coding and other security tips.
Now that we have explained and shown examples of the three most basic vulnerabilities 
that can be used for antivirus bypass, as well as having presented the 10 bypass techniques 
we have used in our own research, this chapter will outline our recommendations.
It is important to be aware that not all antivirus bypass techniques have a solution, and 
it is impossible to create the "perfect product." Otherwise, every single company would 
use it and malware would not exist, which is why we have not offered solutions for every 
bypass technique.
In this chapter, you will gain a fundamental understanding of secure coding tips and some 
other tips to detect malware based on several techniques.
188     Best Practices and Recommendations
This chapter will be divided into three sections:
• Avoiding antivirus bypass dedicated vulnerabilities – three ways to remediate the 
most basic vulnerabilities of several antivirus engines in research that can be used to 
bypass antivirus software.
• Improving antivirus detection – three techniques to identify the most used antivirus 
bypass techniques we have mentioned in this book.
• Secure coding recommendations – nine of our most basic recommendations in 
terms of how to write secure code, with an emphasis on antivirus.
Technical requirements 
• Knowledge of the C or C++ programming languages
• Basic security research knowledge
• Basic knowledge of processes and threads
• An understanding of Windows API functions
• An understanding of YARA
• An understanding of log-based data such as Windows event logs
Throughout the book, we have presented and based our antivirus bypass techniques on 
the following two approaches:
• Vulnerability-based bypass
• Detection-based bypass
Our main goal in this book is to stop and mitigate these bypass techniques by 
demonstrating them and offering mitigations for them. In the following section, you will 
learn how to avoid antivirus bypass that is based on dedicated vulnerabilities.
Check out the following video to see the code in action: https://bit.ly/3wqF6OD
Avoiding antivirus bypass dedicated vulnerabilities     189
Avoiding antivirus bypass dedicated 
vulnerabilities
In this section, you will learn how to prevent the vulnerabilities we presented in Chapter 3, 
Antivirus Research Approaches.
How to avoid the DLL hijacking vulnerability
To mitigate DLL hijacking attacks, the caller process needs to use a proper mechanism  
to validate the loaded DLL module not only by its name but also by its certificate  
and signature.
Also, the loading process (like the antivirus software) can, for example, calculate the hash 
value of the loaded DLL and check if it is the legitimate, intended DLL that is to be loaded, 
using Windows API functions such as LoadLibraryEx followed by the validation of 
specific paths to be loaded from, rather than the regular LoadLibrary, which simply 
loads a DLL by a name that attackers can easily mimic.
In other words, the LoadLibraryEx function has the capability of validating a loaded 
DLL file by its signature, by specifying the flag of LOAD_LIBRARY_REQUIRE_SIGNED_
TARGET (0x00000080), in the function parameter of dwFlags.  
Finally, it must load DLLs using fully qualified paths. For example, if the antivirus needs to 
load a DLL such as Kernel32.DLL, it should load it not simply by its name but using the 
full path of the DLL: 
C:\\Windows\\System32\\Kernel32.dll
Here, we can see the Malwarebytes antivirus software, which uses LoadLibraryEx() 
and identifies it when we attempt to replace one DLL with another:
Figure 8.1 – A failed attempt of DLL hijacking 
190     Best Practices and Recommendations
In the preceding screenshot, you can see a failed attempt at loading an arbitrary DLL to 
the mbam.exe process.
In the following screenshot, you can see the use of LoadLibraryExW in Malwarebytes's 
mbam.exe process, which prevents the loading of arbitrary DLL files:
Figure 8.2 – The use of LoadLibraryExW in mbam.exe
Let's now go into avoiding the next dedicated vulnerability that can be used to bypass 
antivirus software – Unquoted Service Path.
How to avoid the Unquoted Service Path vulnerability
The solution is simply to wrap quotation marks around the executable path of the service. 
This will prevent potentially fatal crashes of your antivirus software and will prevent 
potential bypasses, escalation of privileges, and persistence on victim machines. In other 
words, it's one simple solution for a problem that can have serious consequences.
The following screenshot demonstrates that the Malwarebytes service uses a path placed 
within quotation marks so that it's impossible to bypass it using the unquoted service  
path vulnerability:
Figure 8.3 – Quoted service path in Malwarebytes
The next screenshot demonstrates that the REVE antivirus product is susceptible to the 
Unquoted Service Path vulnerability since its paths do not use quotation marks:
Figure 8.4 – Multiple Unquoted Service Path in REVE antivirus software
Avoiding antivirus bypass dedicated vulnerabilities     191
Usually, this basic vulnerability will exist in small antivirus vendors that need to provide 
some level of security to the end user, but in practice, these antivirus products can be 
bypassed using this vulnerability, thus making the end user susceptible to attacks.
In the following screenshot, you can see that the Max Antivirus is vulnerable to Unquoted 
Service Path in four different paths:
Figure 8.5 – Multiple Unquoted Service Path in Max Secure Total Security antivirus software
Now that we have an idea how to avoid the Unquoted service path vulnerability, let's learn 
how to avoid buffer overflow vulnerabilities.
How to avoid buffer overflow vulnerabilities
Following is a list of practices, capabilities, and features that can be used to prevent buffer 
overflow vulnerabilities.
Memory boundary validation
Validate memory boundaries and use more secure functions such as strcpy_s() and 
strcat_s() that provide memory boundary checks by default.
Stack canaries
Use stack canaries to validate execution flow before returning from a function. This is a 
good practice, but keep in mind that it can also be bypassed.
Data Execution Prevention (DEP)
This will prevent the stack from being an executable one so malicious code will not have 
the permission to execute itself. This does not fully prevent buffer overflow, but definitely 
makes exploiting this vulnerability harder for attackers.
Address Space Layout Randomization (ASLR)
This is yet another strategy to make exploiting this vulnerability harder for adversaries 
because, as the name suggests, ASLR randomizes the address space in the operating 
system, making it tougher to exploit buffer overflow vulnerabilities, for example, those 
based on Return Oriented Programming (ROP) chains.
192     Best Practices and Recommendations
Reverse engineering and fuzzing
This strategy involves entering the mind of an attacker to try to break your own antivirus 
software. To do this, you can reverse engineer its components, gaining an understanding 
of its inner workings. Using fuzzing tools, you may be able to derive interesting 
information that you might not be able to discover using secure coding practices, or even 
SAST (Static Application Security Testing) and DAST (Dynamic Application Security 
Testing) practices followed by automation.
However, in all cases, keep in mind that all of these security strategies can be bypassed. 
The adversarial mind is highly motivated, intelligent, and adaptive and learns very quickly. 
Think like them and you can defeat them.
Now that we understand how to mitigate some of the vulnerability-based bypasses in 
antivirus software, let's continue to understand how to improve antivirus detection.
Improving antivirus detection
In this section, we will discuss how to strengthen the detection of antivirus software in 
order to make the antivirus software more reliable using the dynamic YARA concept, the 