### Subverting Antivirus Detection Mechanisms

#### PowerShell Technique
In the PowerShell technique, we utilized the PowerShell tool to bypass antivirus detection. This approach leverages the capabilities of PowerShell to execute code in a manner that evades traditional antivirus scanning.

#### Single Malicious Functionality Technique
In the single malicious functionality technique, we posed an important question to better understand the perspective of the antivirus detection engine. We then answered this question and provided a practical example to illustrate the concept.

#### Next Chapter Overview
In the next chapter, we will explore the various applications of the antivirus bypass techniques discussed so far in the book.

#### Further Reading
We invite and encourage you to visit the proof-of-concept videos on our YouTube playlist, which can be found at the following link: [YouTube Playlist](https://www.youtube.com/playlist?list=PLSF7zXfG9c4f6o1V_RqH9Cu1vBH_tAFvW).

**Figure 6.25 – The YouTube channel with the Proof-of-Concept videos**

### Section 3: Using Bypass Techniques in the Real World

In this section, we will delve into the practical application of the antivirus bypass techniques, tools, and methods we have covered. We will also differentiate between penetration tests and red team operations and discuss how to effectively fingerprint antivirus software. Additionally, we will cover the principles, approaches, and techniques for writing secure code and enhancing antivirus detection capabilities.

This part of the book includes the following chapters:
- **Chapter 7: Antivirus Bypass Techniques in Red Team Operations**
- **Chapter 8: Best Practices and Recommendations**

### Chapter 7: Antivirus Bypass Techniques in Red Team Operations

In this chapter, you will learn about the real-world application of antivirus bypass techniques, the distinction between penetration testing and red teaming, and the importance of fingerprinting antivirus software as part of a stage-based malware attack.

After researching and discovering antivirus bypass techniques in a lab environment, the next step is to apply these techniques in real-world scenarios, such as red team operations.

#### Topics Covered:
- What is a red team operation?
- Bypassing antivirus software in red team operations
- Fingerprinting antivirus software

**Technical Requirements:**
Check out the following video to see the code in action: [Code in Action](https://bit.ly/3xm90DF)

#### What is a Red Team Operation?

Before understanding what a red team is, it is essential to comprehend what a penetration test (or pentest) is. A pentest is a controlled and targeted attack on specific organizational assets. For instance, if an organization releases a new feature in its mobile application, they will want to check the security of the application and consider other aspects such as regulatory compliance before implementing the new feature in their production environment.

Penetration tests are not limited to mobile applications; they are also conducted on websites, network infrastructure, and more. The primary goal is to identify as many vulnerabilities as possible. In a pentest, practical exploitation followed by a Proof of Concept (PoC) demonstrates the organization's vulnerability, impacting its integrity and information security. A report detailing each found vulnerability, prioritized by risk severity, is then sent to the client.

It is important to note that the goal of penetration testing is not to find newly undisclosed vulnerabilities, as this is the focus of vulnerability research projects.

In contrast, a red team operation aims to determine whether an organization is vulnerable to intrusions, such as through publicly exposed servers, social engineering attacks, or security breaches by impersonating third-party providers. In a red team operation, sensitive data is extracted legally.

A true red team operation has no limitations.

Now that we understand what a red team is, let's discuss bypassing antivirus software in red team operations.

#### Bypassing Antivirus Software in Red Team Operations

There are significant advantages to bypassing antivirus software during red team operations. To effectively use this knowledge, you need to understand the target endpoint and apply various techniques.

One of the primary goals in a red team operation is to extract sensitive information from an organization. This often involves gaining access to the organization's systems. For example, if the organization uses Microsoft 365, a simple phishing page targeting company employees can be used to connect to an employee's user account and steal cloud-stored information.

However, organizations may store internal information on their Local Area Network (LAN), such as within Server Message Block (SMB) servers. As hackers, we must adapt our techniques to these scenarios.

When compromising an endpoint and trying to infiltrate it with malicious software, we often do not know which antivirus software is running on the endpoint. Since we do not know the specific antivirus software, we cannot determine the appropriate bypass technique. Therefore, we need to perform antivirus fingerprinting on the endpoint.

**Figure 7.1 – The two stages of antivirus bypass in a red team operation**

The first stage of the malware attack is to identify and inform us which antivirus software is installed on the victim's endpoint. During the lead-gathering stage, we saw that antivirus software adds registry values, creates services, and folders. We use this functionality to determine the antivirus software on the victim's system.

#### Fingerprinting Antivirus Software

Antivirus fingerprinting involves searching and identifying antivirus software on a target endpoint based on identifiable constants such as service names, process names, domain names, registry keys, and filesystem artifacts.

**Table 7.1 – Antivirus processes and services**

**Note:**
You do not have to rely solely on process and service names; you can also use registry names and more. We recommend visiting the [Antivirus-Artifacts project](https://github.com/D3VI5H4/Antivirus-Artifacts) for more information.

We can perform fingerprinting using a simple Python script that monitors all processes running on the operating system and compares predetermined strings.

**Example Code:**
```python
import wmi

print("Antivirus Bypass Techniques by Nir Yehoshua and Uriel Kosayev")
Proc = wmi.WMI()
AV_Check = ("MsMpEng.exe", "AdAwareService.exe", "afwServ.exe", "avguard.exe", "AVGSvc.exe", "bdagent.exe", "BullGuardCore.exe", "ekrn.exe", "fshoster32.exe", "GDScan.exe", "avp.exe", "K7CrvSvc.exe", "McAPExe.exe", "NortonSecurity.exe", "PavFnSvr.exe", "SavService.exe", "EnterpriseService.exe", "WRSA.exe", "ZAPrivacyService.exe")

for process in Proc.Win32_Process():
    if process.Name in AV_Check:
        print(f"{process.ProcessId} {process.Name}")
```

Using this Python code, we can determine which antivirus software is running on a victim's endpoint by utilizing Windows Management Instrumentation (WMI). With this knowledge, we can download the next-stage malware that incorporates our antivirus bypass and anti-analysis techniques.

To compile this script, use the following command:
```sh
pyinstaller --onefile "Antivirus Fingerprinting.py"
```

**Figure 7.2 – Executing Antivirus Fingerprinting.exe**

**Figure 7.3 – VirusTotal's detection rate of 6/64 antivirus engines**

The signatures that triggered the detections are:
1. Trojan.PWS.Agent!m7rD4I82OUM
2. Trojan:Win32/Wacatac.B!ml
3. Trojan.Disco.Script.104

These detections are false positives.

**Figure 7.4 – VirusTotal's detection rate of 1/64 antivirus engines**

**Tip:**
After writing custom-made antivirus bypass code and confirming it is detected as a false positive, wait some time, and you will likely see a drop in the detection rate.

Many malware authors and threat actors use this technique to identify which antivirus software is installed on the victim's endpoint to apply the relevant bypass technique.

**Figure 7.5 – An IDA Pro view, a malware that enumerates antivirus process names**

The malware enumerates process names such as V3SP.EXE, SPIDERAGENT.EXE, and EKRN.EXE, which relate to AhnLab, Dr.Web, and ESET antivirus vendors, respectively.

**Tip:**
Antivirus software can also be detected based on other artifacts, such as services, registry keys, open mutex values, files, and folders in the filesystem.

### Summary

In this chapter, we learned how to reveal which antivirus software is installed on an endpoint using a WMI process enumeration technique and the importance of adapting your antivirus bypass techniques to specific antivirus software. There are numerous ways to implement a red team operation that includes antivirus software fingerprinting and bypass.

The Python code used in this chapter was a small part of our stage-based malware attack in one of our legal red team operations.

In the next chapter, we will explore how antivirus vendors can improve their engines to prevent antivirus bypass.

### Chapter 8: Best Practices and Recommendations

In this chapter, we will explain what antivirus software engineers did wrong, why the antivirus bypass techniques worked, and how to make antivirus software better with secure coding and other security tips.

We have explained and shown examples of the three most basic vulnerabilities that can be used for antivirus bypass and presented ten bypass techniques. This chapter will outline our recommendations.

It is important to be aware that not all antivirus bypass techniques have solutions, and it is impossible to create the "perfect product." Otherwise, every company would use it, and malware would not exist, which is why we have not offered solutions for every bypass technique.

In this chapter, you will gain a fundamental understanding of secure coding tips and other techniques to detect malware.

#### Chapter Structure:
- Avoiding antivirus bypass dedicated vulnerabilities
- Improving antivirus detection
- Secure coding recommendations

**Technical Requirements:**
- Knowledge of C or C++ programming languages
- Basic security research knowledge
- Basic knowledge of processes and threads
- Understanding of Windows API functions
- Understanding of YARA
- Understanding of log-based data such as Windows event logs

Throughout the book, we have presented and based our antivirus bypass techniques on the following two approaches:
- Vulnerability-based bypass
- Detection-based bypass

Our main goal is to stop and mitigate these bypass techniques by demonstrating them and offering mitigations. In the following section, you will learn how to avoid antivirus bypass based on dedicated vulnerabilities.

**Technical Requirements:**
Check out the following video to see the code in action: [Code in Action](https://bit.ly/3wqF6OD)

#### Avoiding Antivirus Bypass Dedicated Vulnerabilities

In this section, you will learn how to prevent the vulnerabilities we presented in Chapter 3, Antivirus Research Approaches.

##### How to Avoid the DLL Hijacking Vulnerability

To mitigate DLL hijacking attacks, the caller process needs to use a proper mechanism to validate the loaded DLL module not only by its name but also by its certificate and signature. The loading process, such as the antivirus software, can calculate the hash value of the loaded DLL and check if it is the legitimate, intended DLL using Windows API functions like `LoadLibraryEx` with the `LOAD_LIBRARY_REQUIRE_SIGNED_TARGET` flag. Finally, it must load DLLs using fully qualified paths.

**Figure 8.1 – A failed attempt of DLL hijacking**

**Figure 8.2 – The use of LoadLibraryExW in mbam.exe**

##### How to Avoid the Unquoted Service Path Vulnerability

The solution is to wrap quotation marks around the executable path of the service. This prevents potentially fatal crashes of your antivirus software and potential bypasses, escalation of privileges, and persistence on victim machines.

**Figure 8.3 – Quoted service path in Malwarebytes**

**Figure 8.4 – Multiple Unquoted Service Path in REVE antivirus software**

**Figure 8.5 – Multiple Unquoted Service Path in Max Secure Total Security antivirus software**

##### How to Avoid Buffer Overflow Vulnerabilities

- **Memory Boundary Validation:** Use more secure functions such as `strcpy_s()` and `strcat_s()` that provide memory boundary checks.
- **Stack Canaries:** Use stack canaries to validate execution flow before returning from a function.
- **Data Execution Prevention (DEP):** Prevent the stack from being executable, making it harder to exploit buffer overflows.
- **Address Space Layout Randomization (ASLR):** Randomize the address space in the operating system, making it tougher to exploit buffer overflow vulnerabilities.
- **Reverse Engineering and Fuzzing:** Enter the mind of an attacker to try to break your own antivirus software. Use fuzzing tools to derive interesting information.

**Note:**
All security strategies can be bypassed. Think like an attacker to defeat them.

#### Improving Antivirus Detection

In this section, we will discuss how to strengthen the detection of antivirus software to make it more reliable using the dynamic YARA concept, the