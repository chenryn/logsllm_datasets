![](../../.gitbook/assets/1571462174_5daa9c1eb0538.png)
nc连接到1234端口
![](../../.gitbook/assets/1571472739_5daac5632a29c.png)
很快我们可以观察到以下几点：
- **加密的文本总是不同的**
- **每次使用不同的键（因此如上所述）**
- **输出字符串是编码字符串的十六进制表示**
- **用过的钥匙很小**
另外，脚本的名称建议使用WEP加密……或者至少与WEP一样糟糕：）
经过一些研究，我们可以使用密钥重用来进行攻击。关于它如何工作的几句话。
由于XOR的工作方式，如果重用同一密钥，则某些弱密码很容易受到密钥重用攻击。只要您知道一条加密消息的纯文本及其密钥，如果您发现另一条用相同密钥编码的未知消息，就可以提取其纯文本。让我们看以下内容：
`encrypted_messageA`= `messageA`XOR`key`
`encrypted_messageB`= `messageB`XOR`key`
如果我们将两者都异或会发生什么？请记住`abc XOR abc = 0`！
`encrypted_messageA XOR encrypted_messageB = messageA XOR key XOR messageB
XOR key = messageA XOR messageB`
key消失了，因为`key XOR key = 0`。
现在假设我们知道的明文`messageA`并且想要找到`messageB`。我们需要做的就是`messageA`通过将整个事物与进行XOR运算来摆脱方程式的已知`messageA`。
`messageA XOR messageB XOR messageA = messageB`
再次，因为`messageA XOR messageA = 0`。
因此，知道需要做什么之后，我精心设计了以下脚本来快速获取我们的纯文本标志。
```
#!/usr/bin/python
import socket
# XOR strings function definition (ensure to pass in binary values)
#
def xor_strings(p_string1, p_string2):
    return "".join(chr(ord(x) ^ ord(y)) for x, y in zip(p_string1, p_string2))
# Initialise socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(("127.0.0.1", 1234))
# Get banner and instructions
sock.recv(200)
# Random, known message of the same length as the flag
# to be used later for XOR operations
message = "A" * 12
# Collections of encrypted flags and messages
flags = {}
messages = {}
while True:
    # Build a list of known encrypted flags
    sock.send("V\n")
    encrypted_flag = sock.recv(200).strip()
    flag_key = encrypted_flag[:6]
    flag_value = encrypted_flag[7:]
    flags[flag_key] = flag_value
    # Build a list of known encrypted messages
    sock.send("E " + message + "\n")
    encrypted_message = sock.recv(200).strip()
    message_key = encrypted_message[:6]
    message_value = encrypted_message[7:]
    messages[message_key] = message_value
    # Find the flag key in message keys or vice versa
    # (since we're building 2 lists, check both - should
    # be able to find a match quicker)
    if flag_key in messages:
        message_value = messages[flag_key]
        break
    if message_key in flags:
        flag_value = flags[message_key]
        break
# Values are returned in hex form, so need to convert it back
# to binary for XOR
binary_message = message_value.decode("hex")
binary_flag = flag_value.decode("hex")
# XOR both encryptions together
# encrypted_message XOR encrypted_flag = message XOR key XOR flag XOR key
xor_both_result = xor_strings(binary_message, binary_flag)
# XOR above rsult with plaintext message to get the flag, because:
# key XOR key = 0; and
# message XOR message = 0; therefore:
# message XOR key XOR flag XOR key XOR message = flag
decoded_flag = xor_strings(xor_both_result, message)
print decoded_flag
sock.close()
```
使用脚本之后获取到密码
    kefka@adm:/tmp$ sudo /opt/wep2.py &
    [3] 2326
    kefka@adm:/tmp$ python run.py 
    0W6U6vwG4W1V