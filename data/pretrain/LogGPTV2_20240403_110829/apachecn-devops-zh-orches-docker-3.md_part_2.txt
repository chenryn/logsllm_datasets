$ DB_DIR=(mktemp -d)
$ dd if=/dev/zero of=$DIR/data count=102400
$ yes | mkfs -t ext4 $DIR/data
$ mkdir $DB_DIR/db
$ sudo mount -o loop=/dev/loop0 $DIR/data $DB_DIR
```
现在，您可以使用`docker run`命令的`-v`选项将`$DB_DIR`目录绑定到容器:
```
$ docker run -v $DB_DIR:/var/lib/mysql mysql mysqld_safe.
```
# 管理带有卷的容器中的数据
《Docker》一书《T2》的一些显著特点如下:
*   卷是与容器的`root`文件系统分离的目录。
*   它由`docker`守护进程直接管理，可以跨容器共享。
*   卷也可用于在容器内装载主机系统的目录。
*   从正在运行的容器更新映像时，对卷所做的更改将不包括在内。
*   因为卷在容器的文件系统之外，所以它没有数据层或快照的概念。因此，读写直接发生在卷上。
*   如果多个容器使用同一个卷，该卷将一直存在，直到至少有一个容器使用它。
创建卷很容易。只需用`-v`选项启动一个容器:
```
$ docker run -d -p 80:80 --name apache-1 -v /var/www apache.
```
现在注意卷没有`ID`参数，所以您不能像命名容器或标记映像一样精确地命名卷。但是，可以利用这样一个子句，即一个卷会一直存在，直到至少有一个容器使用它，这就引入了纯数据容器的概念。
### 注
由于 Docker 版本，如果您愿意，您可以使用-v 选项将主机的整个文件系统绑定到一个容器，如下所示:
```
$ docker run -v /:/my_host ubuntu:ro ls /my_host.
```
但是，禁止安装到容器的/上，因此出于安全原因，您不能替换容器的`root`文件系统。
## 纯数据容器
一个纯数据容器是一个除了公开一个其他数据访问容器可以使用的卷之外什么也不做的容器。如果访问卷的容器因事故而停止或崩溃，纯数据容器用于防止卷被破坏。
## 使用另一个容器的容积
一旦我们用`-v`选项启动了一个容器，我们就创建了一个卷。我们可以使用`--volumes-from`选项将一个容器创建的卷与其他容器共享。此选项的可能使用情形可以是备份数据库、处理日志、对用户数据执行操作等。
## 用例–Docker 上生产的 MongoDB
作为一个用例，假设您想要在您的生产环境中使用 **MongoDB** ，您将运行一个 MongoDB 服务器和一个`cron`作业，定期备份您的数据库快照。
### 注
MongoDB 是一个提供高性能、高可用性和易扩展性的文档数据库。您可以在[http://www.mongodb.org](http://www.mongodb.org)获得更多关于 MongoDB 的信息。
让我们看看如何使用`docker`卷来设置 MongoDB:
1.  首先，我们需要一个数据容器。这个容器的任务只是暴露 MongoDB 存储数据的卷:
    ```
     $ docker run -v /data/db --name data-only mongo \ echo "MongoDB stores all its data in /data/db"
    ```
2.  Then we need to run the MongoDB server, which uses the volume created by the data-only container:
    ```
    $ docker run -d --volumes-from data-only -p 27017:27017 \ --name mongodb-server mongo mongod
    ```
    ### 注
    `mongod`命令运行 MongoDB 服务器，通常作为守护程序/服务运行。通过端口`27017`进入。
3.  最后，我们需要运行`backup`实用程序。在这种情况下，我们只是将 MongoDB 数据存储转储到主机上的当前目录:
    ```
    $ docker run -d --volumes-from data-only --name mongo-backup \ -v $(pwd):/backup mongo $(mkdir -p /backup && cd /backup && mongodump)
    ```
### 注
这绝不是在生产中设置 MongoDB 的详尽例子。您可能需要一个监控 MongoDB 服务器运行状况的进程。您还需要使 MongoDB 服务器容器可被您的应用容器发现(我们将在后面详细学习)。
# 配置 Docker 使用不同的存储驱动程序
在使用不同的存储驱动程序之前，用`docker save`备份所有映像，并停止`docker`守护程序。一旦你备份了所有重要的映像，移除`/var/lib/docker`。更改存储驱动程序后，您可以恢复保存的映像。
我们现在将默认存储驱动程序 AUFS 更改为两个替代存储驱动程序–`devicemapper`和`btrfs`。
## 使用设备映射器作为存储驱动程序
很容易将切换到`devicemapper`驾驶员。只需使用`-s`选项启动`docker`守护程序:
```
$ docker -d -s devicemapper
```
此外，您可以使用`--storage-opts`标志提供各种`devicemapper`驾驶员选项。`devicemapper`驱动程序的各种可用选项和示例已在本章的*限制资源存储*一节中介绍。
### 注
如果你运行的红帽/软呢帽没有 AUFS，Docker 会一直使用`devicemapper`驱动程序，这是可用的。
一旦您切换了存储驱动程序，您可以通过运行`docker info`来验证其中的更改。
## 使用 btrfs 作为存储驱动程序
要使用 btrfs 作为存储驱动程序，您必须首先设置它。本节假设您在 Ubuntu 14.04 操作系统上运行它。这些命令可能会因您运行的 Linux 发行版而异。以下步骤将使用`btrfs`文件系统设置块设备:
1.  首先需要安装`btrfs`及其依赖项:
    ```
    # apt-get -y btrfs-tools
    ```
2.  接下来，您需要创建一个`btrfs`文件系统类型的块设备:
    ```
    # mkfs btrfs /dev/sdb
    ```
3.  现在为 Docker 创建目录(此时您应该已经备份了所有重要的映像并清理了`/var/lib/docker`。):
    ```
    # mkdir /var/lib/docker
    ```
4.  然后在`/var/lib/docker` :
    ```
    # mount /dev/sdb var/lib/docker
    ```
    安装 btrfs 闭塞装置
5.  检查挂载是否成功:
    ```
    $ mount | grep btrfs
    /dev/sdb on /var/lib/docker type btrfs (rw)
    ```
### 注
资料来源:http://server code . com/2014/06/09/docker-btr . html。
现在你可以用`-s`选项启动`docker`守护程序:
```
$ docker -d -s btrfs
```
切换存储驱动程序后，您可以通过运行`docker info`命令来验证其中的更改。
# 配置 Docker 的网络设置
Docker 为每个容器创建了一个单独的网络栈和一个虚拟桥来管理容器内、容器和主机之间以及两个容器之间的网络通信。
有一些网络配置可以设置为`docker run`命令的参数。它们如下:
*   `--dns`:域名系统服务器是将网址(如 [http://www.docker.io](http://www.docker.io) 解析为运行网站的服务器的 IP 地址。
*   `--dns-search`: This allows you to set DNS search servers.
    ### 注
    如果将`example.com`设置为域名系统搜索域，域名系统搜索服务器会将`abc`解析为`abc.example.com`。如果您的公司网站中有许多需要经常访问的子域，这将非常有用。重复输入整个网址太痛苦了。如果您试图访问非完全限定域名的网站(例如，`xyz.abc.com`)。)，它会为查找添加搜索域。来源:[http://superuser.com/a/184366](http://superuser.com/a/184366)。
*   `-h`或`--hostname`:这个可以设置主机名。这将作为条目添加到容器面向主机的 IP 的`/etc/hosts`路径中。
*   `--link`:这是启动容器时可以指定的另一个选项。它允许容器与其他容器通信，而不需要知道它们的实际 IP 地址。