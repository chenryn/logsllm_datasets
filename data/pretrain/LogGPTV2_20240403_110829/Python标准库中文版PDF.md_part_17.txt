import ConfigParser
import sys
config = ConfigParser.ConfigParser()
# set a number of parameters
config.add_section("book")
config.set("book", "title", "the python standard library")
config.set("book", "author", "fredrik lundh")
config.add_section("ematter")
config.set("ematter", "pages", 250)
# write to screen
config.write(sys.stdout)
[book]
title = the python standard library
author = fredrik lundh
[ematter]
pages = 250
5.9. netrc 模块
netrc 模块可以用来解析 .netrc 配置文件, 如 Example 5-18 所示. 该文件
用于在用户的 home 目录储存 FTP 用户名和密码. (别忘记设置这个文件的属
性为: "chmod 0600 ~/.netrc," 这样只有当前用户能访问).
5.9.0.1. Example 5-18. 使用 netrc 模块
File: netrc-example-1.py
import netrc
# default is $HOME/.netrc
info = netrc.netrc("samples/sample.netrc")
login, account, password = info.authenticators("secret.fbi")
print "login", "=>", repr(login)
print "account", "=>", repr(account)
print "password", "=>", repr(password)
login => 'mulder'
account => None
password => 'trustno1'
5.10. shlex 模块
shlex 模块为基于 Unix shell 语法的语言提供了一个简单的 lexer (也就是
tokenizer). 如 Example 5-19 所示.
5.10.0.1. Example 5-19. 使用 shlex 模块
File: shlex-example-1.py
import shlex
lexer = shlex.shlex(open("samples/sample.netrc", "r"))
lexer.wordchars = lexer.wordchars + "._"
while 1:
token = lexer.get_token()
if not token:
break
print repr(token)
'machine'
'secret.fbi'
'login'
'mulder'
'password'
'trustno1'
'machine'
'non.secret.fbi'
'login'
'scully'
'password'
'noway'
5.11. zipfile 模块
( 2.0 新增) zipfile 模块可以用来读写 ZIP 格式.
5.11.1. 列出内容
使用 namelist 和 infolist 方法可以列出压缩档的内容, 前者返回由文件名
组成的列表, 后者返回由 ZipInfo 实例组成的列表. 如 Example 5-20 所示.
5.11.1.1. Example 5-20. 使用 zipfile 模块列出 ZIP 文档中的文件
File: zipfile-example-1.py
import zipfile
file = zipfile.ZipFile("samples/sample.zip", "r")
# list filenames
for name in file.namelist():
print name,
print
# list file information
for info in file.infolist():
print info.filename, info.date_time, info.file_size
sample.txt sample.jpg
sample.txt (1999, 9, 11, 20, 11, 8) 302
sample.jpg (1999, 9, 18, 16, 9, 44) 4762
5.11.2. 从 ZIP 文件中读取数据
调用 read 方法就可以从 ZIP 文档中读取数据. 它接受一个文件名作为参数,
返回字符串. 如 Example 5-21 所示.
5.11.2.1. Example 5-21. 使用 zipfile 模块从 ZIP 文件中读取数据
File: zipfile-example-2.py
import zipfile
file = zipfile.ZipFile("samples/sample.zip", "r")
for name in file.namelist():
data = file.read(name)
print name, len(data), repr(data[:10])
sample.txt 302 'We will pe'
sample.jpg 4762 '\377\330\377\340\000\020JFIF'
5.11.3. 向 ZIP 文件写入数据
向压缩档加入文件很简单, 将文件名, 文件在 ZIP 档中的名称传递给 write
方法即可.
Example 5-22 将 samples 目录中的所有文件打包为一个 ZIP 文件.
5.11.3.1. Example 5-22. 使用 zipfile 模块将文件储存在 ZIP 文件里
File: zipfile-example-3.py
import zipfile
import glob, os
# open the zip file for writing, and write stuff to it
file = zipfile.ZipFile("test.zip", "w")
for name in glob.glob("samples/*"):
file.write(name, os.path.basename(name), zipfile.ZIP_DEFLATED)
file.close()
# open the file again, to see what's in it
file = zipfile.ZipFile("test.zip", "r")
for info in file.infolist():
print info.filename, info.date_time, info.file_size,
info.compress_size
sample.wav (1999, 8, 15, 21, 26, 46) 13260 10985
sample.jpg (1999, 9, 18, 16, 9, 44) 4762 4626
sample.au (1999, 7, 18, 20, 57, 34) 1676 1103
...
write 方法的第三个可选参数用于控制是否使用压缩. 默认为
zipfile.ZIP_STORED , 意味着只是将数据储存在档案里而不进行任何压缩. 如
果安装了 zlib 模块, 那么就可以使用 zipfile.ZIP_DEFLATED 进行压缩.
zipfile 模块也可以向档案中添加字符串. 不过, 这需要一点技巧, 你需要创
建一个 ZipInfo 实例, 并正确配置它. Example 5-23 提供了一种简单的解决办
法.
5.11.3.2. Example 5-23. 使用 zipfile 模块在 ZIP 文件中储存字符串
File: zipfile-example-4.py
import zipfile
import glob, os, time
file = zipfile.ZipFile("test.zip", "w")
now = time.localtime(time.time())[:6]
for name in ("life", "of", "brian"):
info = zipfile.ZipInfo(name)
info.date_time = now
info.compress_type = zipfile.ZIP_DEFLATED
file.writestr(info, name*1000)
file.close()
# open the file again, to see what's in it
file = zipfile.ZipFile("test.zip", "r")
for info in file.infolist():
print info.filename, info.date_time, info.file_size,
info.compress_size
life (2000, 12, 1, 0, 12, 1) 4000 26
of (2000, 12, 1, 0, 12, 1) 2000 18
brian (2000, 12, 1, 0, 12, 1) 5000 31
5.12. gzip 模块
gzip 模块用来读写 gzip 格式的压缩文件, 如 Example 5-24 所示.
5.12.0.1. Example 5-24. 使用 gzip 模块读取压缩文件
File: gzip-example-1.py
import gzip
file = gzip.GzipFile("samples/sample.gz")
print file.read()
Well it certainly looks as though we're in for
a splendid afternoon's sport in this the 127th
Upperclass Twit of the Year Show.
标准的实现并不支持 seek 和 tell 方法. 不过 Example 5-25 可以解决这个
问题.
5.12.0.2. Example 5-25. 给 gzip 模块添加 seek/tell 支持
File: gzip-example-2.py
import gzip
class gzipFile(gzip.GzipFile):
# adds seek/tell support to GzipFile
offset = 0
def read(self, size=None):
data = gzip.GzipFile.read(self, size)
self.offset = self.offset + len(data)
return data
def seek(self, offset, whence=0):
# figure out new position (we can only seek forwards)
if whence == 0:
position = offset
elif whence == 1:
position = self.offset + offset
else:
raise IOError, "Illegal argument"
if position  self.offset:
if not self.read(min(position - self.offset, 16384)):
break
def tell(self):
return self.offset
#
# try it
file = gzipFile("samples/sample.gz")
file.seek(80)
print file.read()
this the 127th
Upperclass Twit of the Year Show.
6. 邮件和新闻消息处理
"To be removed from our list of future commercial postings by [SOME]
PUBLISHING COMPANY an Annual Charge of Ninety Five dollars is required.
Just send $95.00 with your Name, Address and Name of the Newsgroup to be
removed from our list."
- Newsgroup spammer, July 1996
"想要退出 '某' 宣传公司的未来商业广告列表吗, 您需要付 95 美元. 只要您
支付95美元, 并且告诉我们您的姓名, 地址, 和需要退出的新闻组, 我们就会
把您从列表中移除."
- 新闻组垃圾发送者, 1996 年 7 月
6.1. 概览
Python 有大量用于处理邮件和新闻组的模块, 其中包括了许多常见的邮件格
式.
6.2. rfc822 模块
rfc822 模块包括了一个邮件和新闻组的解析器 (也可用于其它符合 RFC 822
标准的消息, 比如 HTTP 头).
通常, RFC 822 格式的消息包含一些标头字段, 后面至少有一个空行, 然后是信
息主体.
For example, here's a short mail message. The first five lines make up
the message header, and the actual message (a single line, in this case)
follows after an empty line:
例如这里的邮件信息. 前五行组成了消息标头, 隔一个空行后是消息主体.
Message-Id: 
Date: Tue, 14 Nov 2000 14:55:07 -0500
To: "Fredrik Lundh" 
From: Frank
Subject: Re: python library book!
Where is it?
消息解析器读取标头字段后会返回一个以消息标头为键的类字典对象, 如
Example 6-1 所示.
6.2.0.1. Example 6-1. 使用 rfc822 模块
File: rfc822-example-1.py
import rfc822
file = open("samples/sample.eml")
message = rfc822.Message(file)
for k, v in message.items():
print k, "=", v
print len(file.read()), "bytes in body"
subject = Re: python library book!
from = "Frank" 
message-id = 
to = "Fredrik Lundh" 
date = Tue, 14 Nov 2000 14:55:07 -0500
25 bytes in body
消息对象( message object )还提供了一些用于解析地址字段和数据的, 如
Example 6-2 所示.
6.2.0.2. Example 6-2. 使用 rfc822 模块解析标头字段
File: rfc822-example-2.py
import rfc822
file = open("samples/sample.eml")
message = rfc822.Message(file)
print message.getdate("date")
print message.getaddr("from")
print message.getaddrlist("to")
(2000, 11, 14, 14, 55, 7, 0, 0, 0)
('Frank', 'your@editor')
[('Fredrik Lundh', 'PI:EMAIL')]
地址字段被解析为 (实际名称, 邮件地址) 这样的元组. 数据字段被解析为 9
元时间元组, 可以使用 time 模块处理.
6.3. mimetools 模块
多用途因特网邮件扩展 ( Multipurpose Internet Mail Extensions, MIME ) 标
准定义了如何在 RFC 822 格式的消息中储存非 ASCII 文本, 图像以及其它数
据.
mimetools 模块包含一些读写 MIME 信息的工具. 它还提供了一个类似 rfc822
模块中 Message 的类, 用于处理 MIME 编码的信息. 如 Example 6-3 所示.
6.3.0.1. Example 6-3. 使用 mimetools 模块
File: mimetools-example-1.py
import mimetools
file = open("samples/sample.msg")
msg = mimetools.Message(file)
print "type", "=>", msg.gettype()
print "encoding", "=>", msg.getencoding()
print "plist", "=>", msg.getplist()
print "header", "=>"
for k, v in msg.items():
print " ", k, "=", v
type => text/plain
encoding => 7bit
plist => ['charset="iso-8859-1"']
header =>
mime-version = 1.0
content-type = text/plain;
charset="iso-8859-1"
to = PI:EMAIL
date = Fri, 15 Oct 1999 03:21:15 -0400
content-transfer-encoding = 7bit
from = "Fredrik Lundh" 
subject = By the way...
...
6.4. MimeWriter 模块
MimeWriter 模块用于生成符合 MIME 邮件标准的 "多部分" 的信息, 如
Example 6-4 所示.
6.4.0.1. Example 6-4. 使用 MimeWriter 模块
File: mimewriter-example-1.py
import MimeWriter
# data encoders
# 数据编码
import quopri
import base64
import StringIO
import sys
TEXT = """
here comes the image you asked for. hope
it's what you expected.
"""
FILE = "samples/sample.jpg"
file = sys.stdout
#
# create a mime multipart writer instance
mime = MimeWriter.MimeWriter(file)
mime.addheader("Mime-Version", "1.0")
mime.startmultipartbody("mixed")
# add a text message
# 加入文字信息
part = mime.nextpart()
part.addheader("Content-Transfer-Encoding", "quoted-printable")
part.startbody("text/plain")
quopri.encode(StringIO.StringIO(TEXT), file, 0)
# add an image
# 加入图片
part = mime.nextpart()
part.addheader("Content-Transfer-Encoding", "base64")
part.startbody("image/jpeg")
base64.encode(open(FILE, "rb"), file)
mime.lastpart()
输出结果如下:
Content-Type: multipart/mixed;
boundary='host.1.-852461.936831373.130.24813'
--host.1.-852461.936831373.130.24813
Content-Type: text/plain
Context-Transfer-Encoding: quoted-printable
here comes the image you asked for. hope
it's what you expected.
--host.1.-852461.936831373.130.24813
Content-Type: image/jpeg
Context-Transfer-Encoding: base64
/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UH
Rof
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhM
jIy
...
1e5vLrSYbJnEVpEgjCLx5mPU0qsVK0UaxjdNlS+1U6pfzTR8IzEhj2HrVG6m8m18xc8cI
KSC
tCuFyC746j/Cq2pTia4WztfmKjGBXTCmo6IUpt==
--host.1.-852461.936831373.130.24813--
[Example 6-5 #eg-6-5 ] 使用辅助类储存每个子部分.
6.4.0.2. Example 6-5. MimeWriter 模块的辅助类
File: mimewriter-example-2.py
import MimeWriter
import string, StringIO, sys
import re, quopri, base64
# check if string contains non-ascii characters
must_quote = re.compile("[\177-\377]").search
#
# encoders
def encode_quoted_printable(infile, outfile):
quopri.encode(infile, outfile, 0)
class Writer:
def _ _init_ _(self, file=None, blurb=None):
if file is None:
file = sys.stdout
self.file = file
self.mime = MimeWriter.MimeWriter(file)
self.mime.addheader("Mime-Version", "1.0")
file = self.mime.startmultipartbody("mixed")