80270128 DCD __ZN9IOService15powerChangeDoneEm+1
8027012C DCD
__ZN12IOUserClient14externalMethodEjP25IOExternalMethodArguments
P24IOExternalMethodDispatchP8OSObjectPv+1
80270130 DCD
__ZN12IOUserClient24registerNotificationPortEP8ipc_portmy+1
80270134 DCD
__ZN12IOUserClient12initWithTaskEP4taskPvmP12OSDictionary+1
The overwritten method is called externalMethod, and after demangling the
symbol further you get its full prototype:
externalMethod(unsigned int, IOExternalMethodArguments *,
IOExternalMethodDispatch *, OSObject *, void *)
cc0099..iinndddd 226600 44//1166//22001122 55::4477::0077 PPMM
Chapter 9 n Kernel Debugging and Exploitation 261
With this knowledge you now know that the method at address 0x80552B24
most probably was called IOFlashControllerUserClient::externalMethod()
in the original source code. This is good to know because this method provides
methods that the user space code can call directly, and is therefore a starting
point to fi nd vulnerabilities.
Finding Vulnerabilities in Kernel Extensions
The most common vulnerabilities in kernel extensions across all operating
systems are mistakes in the IOCTL handling subroutines of registered char-
acter or block devices. To fi nd these vulnerabilities, it is therefore required
to fi rst locate all registered devices and then to locate their IOCTL handler.
At the binary level this comes down to searching for calls to the functions
cdevsw_add(), cdevsw_add_with_bdev(), and bdevsw_add(). Each of these
functions adds a character device, a block device, or both. When a device is
registered, a structure of type cdevsw or bdevsw that contains all the handlers
for the specifi c device must be supplied. Both structures defi ne an element
called d_ioctl that is a function pointer to the IOCTL handler:
struct bdevsw {
open_close_fcn_t *d_open;
open_close_fcn_t *d_close;
strategy_fcn_t *d_strategy;
ioctl_fcn_t *d_ioctl;
dump_fcn_t *d_dump;
psize_fcn_t *d_psize;
int d_type;
};
struct cdevsw {
open_close_fcn_t *d_open;
open_close_fcn_t *d_close;
read_write_fcn_t *d_read;
read_write_fcn_t *d_write;
ioctl_fcn_t *d_ioctl;
stop_fcn_t *d_stop;
reset_fcn_t *d_reset;
struct tty **d_ttys;
select_fcn_t *d_select;
mmap_fcn_t *d_mmap;
strategy_fcn_t *d_strategy;
void *d_reserved_1;
void *d_reserved_2;
int d_type;
};
The idaiostoolkit contains an IDAPython script that scans the whole
kernelcache binary for all registered character and block devices and outputs
cc0099..iinndddd 226611 44//1166//22001122 55::4477::0077 PPMM
262 Chapter 9 n Kernel Debugging and Exploitation
their IOCTL handlers. The handlers found can then be evaluated manually or
attacked with an IOCTL fuzzer.
A second spot to look for vulnerabilities in kernel extensions is in the handlers
for the network protocols they add. Each network protocol includes a number of
interesting handlers that should be checked for vulnerabilities. The most com-
monly vulnerable code is located in the handlers called by the setsockopt()
system call or that parse incoming network packets. To fi nd these vulnerabili-
ties you must fi rst fi nd all places in the code that register network protocols.
At the binary level this comes down to calls of the function net_add_proto().
The fi rst parameter to this function is a pointer to a protosw structure, which,
among general information about the new network protocol, also contains
function pointers to all the protocol-specifi c handlers. The protosw structure
is defi ned as follows:
struct protosw {
short pr_type; /* socket type used for */
struct domain *pr_domain; /* domain protocol a member of */
short pr_protocol; /* protocol number */
unsigned int pr_flags; /* see below */
/* protocol-protocol hooks */
void (*pr_input)(struct mbuf *, int len);
/* input to protocol (from below) */
int (*pr_output)(struct mbuf *m, struct socket *so);
/* output to protocol (from above) */
void (*pr_ctlinput)(int, struct sockaddr *, void *);
/* control input (from below) */
int (*pr_ctloutput)(struct socket *, struct sockopt *);
/* control output (from above) */
/* user-protocol hook */
void *pr_ousrreq;
/* utility hooks */
void (*pr_init)(void); /* initialization hook */
void (*pr_unused)(void); /* placeholder - fasttimo is removed */
void (*pr_slowtimo)(void); /* slow timeout (500ms) */
void (*pr_drain)(void); /* flush any excess space possible */
int (*pr_sysctl)(int *, u_int, void *, size_t *, void *, size_t);
/* sysctl for protocol */
struct pr_usrreqs *pr_usrreqs; /* supersedes pr_usrreq() */
int (*pr_lock)(struct socket *so, int locktype, void *debug);
/* lock function for protocol */
int (*pr_unlock)(struct socket *so, int locktype, void *debug);
/* unlock for protocol */
void *(*pr_getlock)(struct socket *so, int locktype);
...
};
The pr_input handler defi ned in this structure is called whenever a packet
of the specifi c protocol is received and requires parsing. A vulnerability in
cc0099..iinndddd 226622 44//1166//22001122 55::4477::0077 PPMM
Chapter 9 n Kernel Debugging and Exploitation 263
this parser would allow remote exploitation of the kernel through malformed
packets on the network. This kind of vulnerability is nearly extinct, and there-
fore it is very unlikely that you will fi nd a problem in this code. However, one
of the kernel extensions inside iOS might add a protocol that is not as well
audited as the standard network protocols. The second fi eld of interest is the
pr_ctloutput handler. This handler gets called whenever the setsockopt()
system call is called on a socket of this protocol type. The latest example of
this vulnerability type is the kernel exploit that was used for untethering iOS
4.3 to iOS 4.3.3 jailbreaks. The vulnerability was an overfl ow in the integer-
multiplication for memory allocation inside the pr_ctloutput handler of the
ndrv (NetDriver) protocol.
The third common spot for vulnerabilities in kernel extensions is the sysctl
interface. This interface is a mechanism for the kernel and for its extensions
to provide read and write access to kernel state variables to processes with
appropriate privilege levels. To register a new sysctl variable, the kernel func-
tion sysctl_register_oid() has to be called, with a sysctl_oid structure as
parameter that defi nes the new kernel state variable. By searching the kernel-
cache for all cross-references to this function, it is possible to fi nd all sysctl
variables registered by kernel extensions, and these can be analyzed in depth.
To understand the possible security problem arising from sysctl variables, you
have to look into the defi nition of the sysctl_oid structure:
struct sysctl_oid {
struct sysctl_oid_list *oid_parent;
SLIST_ENTRY(sysctl_oid) oid_link;
int oid_number;
int oid_kind;
void *oid_arg1;
int oid_arg2;
const char *oid_name;
int (*oid_handler) SYSCTL_HANDLER_ARGS;
const char *oid_fmt;
const char *oid_descr;
int oid_version;
int oid_refcnt;
};
Ignoring the fact that a kernel extension could register a sysctl variable that
provides access to some security-related kernel state to unprivileged processes,
basically two different security problems can arise from sysctl variables.
The fi rst problem is related to the defi ned oid_handler. The kernel defi nes
a number of predefi ned handlers for standard variable types like integers,
strings, and opaque values. These handlers have existed for a long time and
have been audited by several parties. It is very unlikely that passing a very
long string to them through the sysctl() system call will result in a buffer
overfl ow. The same cannot be said for handlers registered by closed-source
cc0099..iinndddd 226633 44//1166//22001122 55::4477::0077 PPMM
264 Chapter 9 n Kernel Debugging and Exploitation
kernel extensions for non-standard variable types. Therefore, it is a good idea
to check all registered sysctl variables for non-standard handlers and audit
each of them carefully.
A security problem in one of the variable handlers will usually lead to an
immediately exploitable situation that is triggered by passing illegal values
to the sysctl() system call. There is another danger arising from sysctl
variables that you have to look for separately. Whenever there is a sysctl
entry that provides write access to a kernel state variable, this opens up the
possibility for user space code to directly attack code paths inside the kernel
that use this variable. Such a problem could be, for example, an integer vari-
able that infl uences the amount of memory that is allocated within the kernel.
A user space process that can manipulate this value might be able to trigger
an integer overfl ow inside a kernel-level memory allocation. Therefore, every
kernel-level read access to a writable kernel state variable must be audited for
the presence of security checks.
Finding Vulnerabilities in IOKit Drivers
The process of fi nding vulnerabilities inside IOKit drivers is basically the same
as fi nding vulnerabilities in other kernel extensions or the kernel itself. However,
the use of C++ inside IOKit drivers adds to the possible vulnerability classes
that can be found. This includes a number of C++-only vulnerability classes:
n Mismatched usage of new and delete, such as using delete[] to delete
a single object
n Object use after free vulnerabilities
n Object type confusion vulnerabilities
In addition to these C++ typical vulnerabilities the attack surface of IOKit
drivers is bigger, because they make use of the IOKit API, which defi nes inter-
faces that allow a user space driver to communicate with the kernel-level driver.
To support this, an IOKit driver must implement a so-called user client, which
is a class derived from IOUserClient, that enables a user space tool to connect
to a device and communicate with its driver. The process of connecting to a
device starts by looking it up in the IOKit registry. To do this, you fi rst create
a matching directory and then call one of the possible matching functions.
Assume you want to look up the AppleRGBOUT device, because it was involved
in one of the recent kernel exploits:
kern_return_t kernResult;
io_iterator_t iterator;
kernResult = IOServiceGetMatchingServices(kIOMasterPortDefault,
IOServiceMatching(“AppleRGBOUT”), &iterator);
cc0099..iinndddd 226644 44//1166//22001122 55::4477::0077 PPMM
Chapter 9 n Kernel Debugging and Exploitation 265
On success, the iterator variable is fi lled with an io_iterator_t object
that can be used to iterate over all the devices found. To get the fi rst matching
device, the function IOIteratorNext() is called once. In case of success a non-
null object is returned.
io_service_t service;
service = IOIteratorNext(iterator)
if (service != IO_OBJECT_NULL) {
...
The user space tool can now call IOServiceOpen() to open the service and
connect to the device:
io_connect_t connect;
kernResult = IOServiceOpen(service, mach_task_self(), 0, &connect);
All kernel exploits against the IOKit API have to start with code very similar
to this. Because the majority of all IOKit drivers are closed source, and there-
fore most probably not as deeply audited as the open source parts of iOS, we
strongly believe that a lot of vulnerabilities are still hidden inside IOKit drivers.
For example, it is possible to crash the iOS kernel by simply trying to open the
AppleBCMWLAN device as a non-root user. Once the user space tool is con-
nected to a device, the connection can be used to communicate with the kernel
driver in several different ways.
Attacking through Device Properties
The fi rst possible route of attack is to change the properties associated with
a device. You can do this by either setting one specifi c property with the
IOConnectSetCFProperty() function or by setting all properties at once by
calling IOConnectSetCFProperties(), which at the driver level results in a call
to the method setProperty() or to the method setProperties():
int myInteger = 0x55667788;
CFNumberRef myNumber = CFNumberCreate(kCFAllocatorDefault,
kCFNumberIntType, &myInteger);
kernResult = IOConnectSetCFProperty(connect, CFSTR(“myProp”), myNumber);
This code creates a number object from a normal int variable and then attempts
to set a device property called myProp to this value. This attempt fails if the
driver does not overwrite the setProperty() method, which is required to allow
setting a property. The kernel driver might also decide to let it fail, because it
does not know a property of this name, or because it expects a different object
type. For example, the property could be a string instead of a number. It is up
to the driver whether to check for this and not accept invalid object types, so
cc0099..iinndddd 226655 44//1166//22001122 55::4477::0077 PPMM
266 Chapter 9 n Kernel Debugging and Exploitation
you must audit the setProperty() method to evaluate how invalid properties
or object types are handled. A similar problem will arise if you change the code
to set multiple properties at the same time:
int myInteger = 0x55667788;
CFNumberRef myNumber = CFNumberCreate(kCFAllocatorDefault,
kCFNumberIntType, &myInteger);
kernResult = IOConnectSetCFProperties(connect, myNumber);
This version of the code passes the number object through the function
IOConnectSetCFProperties(), which fi nally calls the setProperties()
method of the driver object. The problem is that your code sends a number
object, while the method expects a dictionary object. This is, however, not
enforced and therefore it is up to the implementation of the kernel driver
to ensure that it is dealing with a dictionary object before any attempt to
enumerate the dictionary’s content. And even if a dictionary object is sup-
plied, there is still the possibility that one of the contained properties is of
an unexpected type.
Setting properties is not the only way to communicate with a kernel
driver. The IOUserClient interface defi nes more direct communication meth-
ods like direct memory mapping and external traps and methods. Though
it might be possible to find vulnerabilities exposed through direct mem-
ory mapping, we don’t cover these within this chapter. The curious reader
can, however, take a look into the IOKit drivers that overwrite the method
clientMemoryForType() in their user client implementation and use it
as a starting point for further investigations. This includes the classes
IOAccessoryPortUserClient, AppleMultitouchSPIUserClient, and
IOAudio2DeviceUserClient.
Attacking through External Traps and Methods
A more promising place to fi nd vulnerabilities in is the external traps and
methods a user client can defi ne. These are traps and methods that can be
called directly from user space to make the driver do some action and return
the result. Many of the IOKit drivers offer these kinds of services to user space
clients. The difference between traps and methods is that external traps are
part of the mach trap system and external methods are more like pure IOKit
functionality. An IOKit driver can choose to offer both, one, or none of these
external interfaces.
User space code can call external traps defi ned within IOKit driver by index,
through the iokit_user_client_trap() mach trap, with up to six parameters:
kernResult = iokit_user_client_trap(connect, index, p1, p2, 0, 0, 0, 0);
The kernel-level user client implementation can offer these traps by over-
writing the IOUserClient methods getExternalTrapForIndex() and
cc0099..iinndddd 226666 44//1166//22001122 55::4477::0088 PPMM
Chapter 9 n Kernel Debugging and Exploitation 267
getTargetAndTrapForIndex(). This creates the potential for two different kinds
of security problems. First, the numerical index of the trap called could be
trusted within the driver and used as an index into a lookup table. If the lookup
is using an unchecked index, an attacker might adjust the index in a way that
it looks up the trap function pointer from an attacker-defi ned memory page,
which would lead to immediate kernel code execution. The second possibility
is that the offered external traps have security problems themselves, because
they put too much trust in the trap arguments. Therefore, the trap handler code
should be audited for both kinds of security problems.
Very similar and related, but a bit more complicated, are external meth-
ods. External methods can be called through various functions of the
IOKit API, depending on the number and type of input and output param-
eters that you want to work with. Depending on which version of the IOKit
API you are using, there are different API functions available to call the
methods. However, we will just concentrate on the most general way to call an