      chain example_chain {
        type filter hook input priority filter; policy accept;
        ...
        tcp dport ssh accept
      }
    }
    ```
:::
::: itemizedlist
**其它资源**
-   有关地址系列的详情，请查看 `Address families`{.literal} man page
    中的 `nft(8)`{.literal} 部分。
-   有关您可以在规则中运行的其他操作的详情，请查看 `nft(8)`{.literal}
    man page 中的 `Rules`{.literal} 部分。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#inserting-a-rule-at-the-beginning-of-an-nftables-chain_assembly_creating-and-managing-nftables-tables-chains-and-rules}在 nftables 链的开头插入规则 {.title}
:::
本节解释了如何在现有 `nftables`{.literal} 链开始时插入规则。
::: itemizedlist
**先决条件**
-   您要添加该规则的链已存在。
:::
::: orderedlist
**流程**
1.  要插入新规则，使用 `nft insert rule`{.literal} 命令。例如，要在
    `example_chain`{.literal} 的 `example_table`{.literal}
    中插入一个规则来允许端口 22 上的 TCP 流量：
    ``` literallayout
    # nft insert rule inet example_table example_chain tcp dport 22 accept
    ```
    您还可以指定服务名称而不是端口号。在这个示例中，您可以使用
    `ssh`{.literal} 而不是端口号 `22`{.literal}。请注意，服务名称根据在
    `/etc/services`{.literal} 文件中的条目解析为端口号。
2.  另外，还可在 `example_table`{.literal} 中显示所有链及其规则：
    ``` literallayout
    # nft list table inet example_table
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
        tcp dport ssh accept
        ...
      }
    }
    ```
:::
::: itemizedlist
**其它资源**
-   有关地址系列的详情，请查看 `Address families`{.literal} man page
    中的 `nft(8)`{.literal} 部分。
-   有关您可以在规则中运行的其他操作的详情，请查看 `nft(8)`{.literal}
    man page 中的 `Rules`{.literal} 部分。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#proc_inserting-a-rule-at-a-specific-position-of-an-nftables-chain_assembly_creating-and-managing-nftables-tables-chains-and-rules}在 nftables 链的特定位置插入规则 {.title}
:::
本节解释了如何在 `nftables`{.literal}
链中现有规则前后插入规则。这样，您可以将新规则置于正确的位置。
::: itemizedlist
**先决条件**
-   存在您要添加规则的链。
:::
::: orderedlist
**流程**
1.  使用 `nft -a list ruleset`{.literal} 命令显示
    `example_table`{.literal} 中的所有链及其规则，包括其句柄：
    ``` literallayout
    # nft -a list table inet example_table
    table inet example_table { # handle 1
      chain example_chain { # handle 1
        type filter hook input priority filter; policy accept;
        tcp dport 22 accept # handle 2
        tcp dport 443 accept # handle 3
        tcp dport 389 accept # handle 4
      }
    }
    ```
    使用 `-a`{.literal}
    可显示句柄。您需要此信息才能在后续步骤中定位新规则。
2.  在 `example_table`{.literal} 的 `example_chain`{.literal}
    链中插入新规则：
    ::: itemizedlist
    -   要在处理 `3`{.literal} 前插入允许端口 `636`{.literal} 上的 TCP
        流量的规则，请输入：
        ``` literallayout
        # nft insert rule inet example_table example_chain position 3 tcp dport 636 accept
        ```
    -   要在处理 `3`{.literal} 后添加允许端口 `80`{.literal} 上的 TCP
        流量的规则，请输入：
        ``` literallayout
        # nft add rule inet example_table example_chain position 3 tcp dport 80 accept
        ```
    :::
3.  另外，还可在 `example_table`{.literal} 中显示所有链及其规则：
    ``` literallayout
    # nft -a list table inet example_table
    table inet example_table { # handle 1
      chain example_chain { # handle 1
        type filter hook input priority filter; policy accept;
        tcp dport 22 accept # handle 2
        tcp dport 636 accept # handle 5
        tcp dport 443 accept # handle 3
        tcp dport 80 accept # handle 6
        tcp dport 389 accept # handle 4
      }
    }
    ```
:::
::: itemizedlist
**其它资源**
-   有关地址系列的详情，请查看 `Address families`{.literal} man page
    中的 `nft(8)`{.literal} 部分。
-   有关您可以在规则中运行的其他操作的详情，请查看 `nft(8)`{.literal}
    man page 中的 `Rules`{.literal} 部分。
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#configuring-nat-using-nftables_getting-started-with-nftables}使用 nftables 配置 NAT {.title}
:::
使用 `nftables`{.literal}，您可以配置以下网络地址转换（NAT）类型：
::: itemizedlist
-   伪装
-   源 NAT（SNAT）
-   目标 NAT（DNAT）
-   重定向
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#the-different-nat-types-masquerading-source-nat-destination-nat-and-redirect_configuring-nat-using-nftables}不同的 NAT 类型： masquerading、source NAT、destination NAT 和 redirect {.title}
:::
这些是不同的网络地址转换（NAT）类型：
::: variablelist
[伪装和源 NAT（SNAT）]{.term}
:   使用以上 NAT 类型之一更改数据包的源 IP
    地址。例如，互联网服务提供商不路由专用 IP 范围，如
    `10.0.0.0/8`{.literal}。如果您在网络中使用专用 IP
    范围，并且用户应该能够访问 Internet
    上的服务器，请将这些范围内的数据包源 IP 地址映射到公共 IP 地址。
    伪装和 SNAT 都非常相似。不同之处是：
    ::: itemizedlist
    -   伪装自动使用传出接口的 IP 地址。因此，如果传出接口使用了动态 IP
        地址，则使用伪装。
    -   SNAT 将数据包的源 IP 地址设置为指定的 IP
        地址，且不会动态查找传出接口的 IP 地址。因此，SNAT
        要比伪装更快。如果传出接口使用了固定 IP 地址，则使用 SNAT。
    :::
[目标 NAT（DNAT）]{.term}
:   使用此 NAT 类型重写传入数据包的目标地址和端口。例如，如果您的 Web
    服务器使用私有 IP 范围内的 IP
    地址，因此无法直接从互联网访问，您可以在路由器上设置 DNAT
    规则以将传入的流量重定向到此服务器。
[重定向]{.term}
:   这个类型是 IDT 的特殊示例，它根据链 hook
    将数据包重定向到本地机器。例如，如果服务在其标准端口的不同端口上运行，您可以将从标准端口传入的流量重定向到此特定端口。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#configuring-masquerading-using-nftables_configuring-nat-using-nftables}使用 nftables 配置伪装 {.title}
:::
伪装使路由器动态地更改通过接口到接口 IP 地址发送的数据包的源
IP。这意味着，如果接口被分配了新的 IP，`nftables`{.literal} 会在替换源
IP 时自动使用新的 IP。
以下流程描述了如何将通过 `ens3`{.literal} 接口离开主机的数据包源 IP
替换为 `ens3`{.literal}中设置的 IP。
::: orderedlist
**流程**
1.  创建一个表：
    ``` literallayout
    # nft add table nat
    ```
2.  在表中添加 `prerouting`{.literal} 和 `postrouting`{.literal} 链：
    ``` literallayout
    # nft -- add chain nat prerouting { type nat hook prerouting priority -100 \; }
    # nft add chain nat postrouting { type nat hook postrouting priority 100 \; }
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    即使您没有向 `prerouting`{.literal} 链添加规则，`nftables`{.literal}
    框架也要求此链与传入的数据包回复匹配。
    :::
    请注意，您必须将 `--`{.literal} 选项传递给 `nft`{.literal}
    命令，以避免 shell 将负优先级值解析为 `nft`{.literal} 命令的选项。
3.  为 `postrouting`{.literal} 链添加与 `ens3`{.literal}
    接口传出数据包匹配的规则：
    ``` literallayout
    # nft add rule nat postrouting oifname "ens3" masquerade
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#configuring-source-nat-using-nftables_configuring-nat-using-nftables}使用 nftables 配置源 NAT {.title}
:::
在路由器中，源 NAT（SNAT）可让您将通过接口发送的数据包 IP 改为专门的 IP
地址。
以下流程描述了如何通过 `ens3`{.literal} 接口将路由器离开路由器的数据包源
IP 替换为 `192.0.2.1`{.literal}。
::: orderedlist
**流程**
1.  创建一个表：
    ``` literallayout
    # nft add table nat
    ```
2.  在表中添加 `prerouting`{.literal} 和 `postrouting`{.literal} 链：
    ``` literallayout
    # nft -- add chain nat prerouting { type nat hook prerouting priority -100 \; }
    # nft add chain nat postrouting { type nat hook postrouting priority 100 \; }
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    即使您没有向 `postrouting`{.literal}
    链添加规则，`nftables`{.literal}
    框架也要求此链与外发数据包回复匹配。
    :::
    请注意，您必须将 `--`{.literal} 选项传递给 `nft`{.literal}
    命令，以避免 shell 将负优先级值解析为 `nft`{.literal} 命令的选项。
3.  为 `postrouting`{.literal} chain 添加一条规则，将通过
    `ens3`{.literal} 的外向数据包的源 IP 替换为 `192.0.2.1`{.literal}。
    ``` literallayout
    # nft add rule nat postrouting oifname "ens3" snat to 192.0.2.1
    ```
:::
::: itemizedlist
**其它资源**
-   [如需更多信息，请参阅将特定本地端口上传入的数据包转发到不同的主机](#getting-started-with-nftables_configuring-and-managing-networking.html#forwarding-incoming-packets-on-a-specific-local-port-to-a-different-host_configuring-port-forwarding-using-nftables "将特定本地端口上传入的数据包转发到不同主机"){.link}
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#configuring-destination-nat-using-nftables_configuring-nat-using-nftables}使用 nftables 配置目标 NAT {.title}
:::
目标 NAT 可让您将路由器中的流量重新指向无法直接从互联网访问的主机。
以下流程描述了如何将发送到路由器的端口 `80`{.literal} 和 `443`{.literal}
的流量重定向到使用 `192.0.2.1`{.literal} IP 地址的主机。
::: orderedlist
**流程**
1.  创建一个表：
    ``` literallayout
    # nft add table nat
    ```
2.  在表中添加 `prerouting`{.literal} 和 `postrouting`{.literal} 链：
    ``` literallayout
    # nft -- add chain nat prerouting { type nat hook prerouting priority -100 \; }
    # nft add chain nat postrouting { type nat hook postrouting priority 100 \; }
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    即使您没有向 `postrouting`{.literal}
    链添加规则，`nftables`{.literal}
    框架也要求此链与外发数据包回复匹配。
    :::
    请注意，您必须将 `--`{.literal} 选项传递给 `nft`{.literal}
    命令，以避免 shell 将负优先级值解析为 `nft`{.literal} 命令的选项。
3.  为 `prerouting`{.literal} chain 添加一条规则，它将发送到端口
    `80`{.literal} 和 `443`{.literal} 的 `ens3`{.literal}
    接口上进入的流量重定向到使用 `192.0.2.1`{.literal} IP 的主机：