 (2 rows)
 digoal=# create table digoal.ttt(id int);
 CREATE TABLE
 digoal=# create table public.ttt(id int);
 CREATE TABLE
 digoal=# set search_path='digoal';
 SET
 digoal=# select * from ttt;
 id
 ----
 (0 rows)
pg_stat_statements
 digoal=# set search_path='public';
 SET
 digoal=# select * from ttt;
 id
 ----
 (0 rows)
 存储2条. 实质上分别表示两个SQL. digoal.ttt和public.ttt
 digoal=# select calls,query from pg_stat_statements ;
 1 | select * from ttt;
 1 | select * from ttt;
pg_stat_statements
 注意3 :
 如果配置项 pg_stat_statements.track_utility = on
 那么除了select, insert, update, delete以外的其他SQL都会被跟踪, 包括修改用户密码的SQL. 创建用户的SQL等等.
 所以在执行敏感SQL时注意关闭这个开关.
 digoal=# set pg_stat_statements.track_utility=off;
 SET
 digoal=# set log_statement=none; -- 执行以上两条后, 以下SQL就不会记录到pg_stat_statements的共享内存区以及数据库日志中.
 digoal=# create role test login encrypted password 'ttt';
 CREATE ROLE
 如果只需要跟踪业务SQL性能的话, 推荐关闭pg_stat_statements.track_utility.
 除非业务中经常要用到select, update, insert, delete以外的SQL.
pg_stat_statements
 注意4 :
 因为pg_stat_statements存储了SQL的信息, 所以只有超级用户可以查看所有用户的query信息, 普通用户只能看到自己执行的SQL.
 digoal=# \c digoal test
 You are now connected to database "digoal" as user "test".
 digoal=> select query from pg_stat_statements;
 query
 --------------------------
 select ?; -- 自己执行的SQL可以看到.
 其他的只有超级用户能看到.
 digoal=> \c digoal postgres
 You are now connected to database "digoal" as user "postgres".
 digoal=# select query from pg_stat_statements;
 -------------------
 delete from dbsize where dbname=?;
 .....
pg_stat_statements
 用法举例 :
 定期统计CPU耗时排名前20的SQL, 以邮件形式发送出来. 统计结束后清除该时间段的pg_stat_statements共享内存区.
 #!/bin/bash
 export PGPORT=5432
 export PGDATA=/data01/pgdata
 export LANG=en_US.utf8
 export PGHOME=/opt/pgsql
 export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
 export DATE=`date +"%Y%m%d%H%M"`
 export PATH=$PGHOME/bin:$PATH:.
 export PGHOST=$PGDATA
 export PGDATABASE=postgres
 psql -A -x -c "select row_number() over() as rn, * from (select query,' calls:'||calls||' total_time_s:'||round(total_time::numeric,2)||'
avg_time_ms:'||round(1000*(total_time::numeric/calls),2) as stats from pg_stat_statements order by total_time desc limit 20) t;" >/tmp/stat_query.log 2>&1
 echo -e "$DATE"|mutt -s "$DATE TOP20 query report" -a /tmp/stat_query.log PI:EMAIL
 psql -c "select pg_stat_statements_reset()"
目录
授课环境
SQL优化基础
如何让数据库输出好的执行计划
压力测试工具的使用和建模
性能分析工具的使用
综合优化案例
综合优化案例
优化案例
 测试场景建模
 (OLTP场景)
优化案例
 创建用户, 库, schema
 create role digoal nosuperuser login encrypted password 'digoal';
 -- mkdir /home/postgres/tbs_digoal
 create tablespace tbs_digoal location '/home/postgres/tbs_digoal';
 create database digoal with template template0 encoding 'UTF8' tablespace tbs_digoal;
 grant all on database digoal to digoal;
 grant all on tablespace tbs_digoal to digoal;
 \c digoal digoal
 create schema digoal;
优化案例
 create table user_info -- 用户信息表
 (userid int,
 engname text,
 cnname text,
 occupation text,
 birthday date,
 signname text,
 email text,
 qq numeric,
 crt_time timestamp without time zone,
 mod_time timestamp without time zone
 );
 create table user_session -- 用户会话表
 (userid int,
 logintime timestamp(0) without time zone,
 login_count bigint default 0,
 logouttime timestamp(0) without time zone,
 online_interval interval default interval '0'
 );
优化案例
 create table user_login_rec -- 用户登录记录
 (userid int,
 login_time timestamp without time zone,
 ip inet
 );
 create table user_logout_rec -- 用户退出记录
 (userid int,
 logout_time timestamp without time zone,
 ip inet
 );
优化案例
 -- 生成测试数据, 2000万条用户数据和会话数据.
 insert into user_info (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)
 select generate_series(1,4000000),
 'digoal.zhou',
 '德哥',
 'DBA',
 '1970-01-01'
 ,E'公益是一辈子的事, I\'m Digoal.Zhou, Just do it!',
 'PI:EMAIL',
 276732431,
 clock_timestamp(),
 NULL;
 insert into user_session (userid) select generate_series(1,4000000);
 set work_mem='2048MB';
 set maintenance_work_mem='2048MB';
 alter table user_info add constraint pk_user_info primary key (userid);
 alter table user_session add constraint pk_user_session primary key (userid);
优化案例
 -- 模拟用户登录的函数
 create or replace function f_user_login
 (i_userid int,
 OUT o_userid int,
 OUT o_engname text,
 OUT o_cnname text,
 OUT o_occupation text,
 OUT o_birthday date,
 OUT o_signname text,
 OUT o_email text,
 OUT o_qq numeric
 )
 as $BODY$
 declare
 begin
 select userid,engname,cnname,occupation,birthday,signname,email,qq
 into o_userid,o_engname,o_cnname,o_occupation,o_birthday,o_signname,o_email,o_qq
 from user_info where userid=i_userid;
优化案例
 if FOUND then
 insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());
 update user_session set logintime=now(),login_count=login_count+1 where userid=i_userid;
 else
 insert into user_info (userid) values (i_userid);
 insert into user_session (userid, login_count) values (i_userid, 1);
 end if;
 return;
 end;
 $BODY$
 language plpgsql;
优化案例
 -- 模拟用户退出的函数
 create or replace function f_user_logout
 (i_userid int,
 OUT o_result int
 )
 as $BODY$
 declare
 begin
 update user_session set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=i_userid;
 if not found then
 insert into user_session (userid) values (i_userid);
 end if;
优化案例
 insert into user_logout_rec (userid,logout_time,ip) values (i_userid,now(),inet_client_addr());
 o_result := 0;
 return;
 exception
 when others then
 o_result := 1;
 return;
 end;
 $BODY$
 language plpgsql;
优化案例
 [优化阶段1]
 使用pgbench进行压力测试, 发现瓶颈并合理优化.
 模拟场景我们假设有400万的活跃用户. 大概占总用户的1/5.
 1. pgbench用到的登陆脚本
 cat login.sql
 \setrandom userid 1 4000000
 select userid,engname,cnname,occupation,birthday,signname,email,qq from user_info where userid=:userid;
 insert into user_login_rec (userid,login_time,ip) values (:userid,now(),inet_client_addr());
 update user_session set logintime=now(),login_count=login_count+1 where userid=:userid;
 2. pgbench用到的退出脚本
 cat logout.sql
 \setrandom userid 1 4000000
 insert into user_logout_rec (userid,logout_time,ip) values (:userid,now(),inet_client_addr());
 update user_session set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=:userid;
 3. 压力测试
 简单调用协议, 长连接, 8个连接, 8个工作线程, 模拟登陆和退出, 测试180秒. 最好测试时间跨越两次checkpoint.
 pgbench -M simple -n -r -f ./login.sql -f ./logout.sql -c 8 -j 8 -T 180 -h 172.16.3.33 -p 5432 -U digoal digoal
优化案例
 4. 压力测试结果
 略
优化案例
 5. 瓶颈分析与优化
 压力测试中查看数据库服务器的iostat -x
 avg-cpu: %user %nice %system %iowait %steal %idle
 0.69 0.00 0.25 24.11 0.00 74.95