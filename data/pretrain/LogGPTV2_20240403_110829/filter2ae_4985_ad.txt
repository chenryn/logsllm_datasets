类 | 方法 | 方法描述 | 污染参数  
---|---|---|---  
java/awt/color/ICC_Profile | finalize | ()V | 0  
java/lang/Enum | readObject | (Ljava/io/ObjectInputStream;)V | 1  
#### Step5 搜索生成调用链
这一步会遍历全部的source，并在callgraph.dat中递归查找所有可以继续传递污点参数的子方法调用，直至遇到sink中的方法。
搜索生成调用链：
    public class GadgetChainDiscovery {
        private static final Logger LOGGER = LoggerFactory.getLogger(GadgetChainDiscovery.class);
        private final GIConfig config;
        public GadgetChainDiscovery(GIConfig config) {
            this.config = config;
        }
        public void discover() throws Exception {
            Map methodMap = DataLoader.loadMethods();
            InheritanceMap inheritanceMap = InheritanceMap.load();
            Map> methodImplMap = InheritanceDeriver.getAllMethodImplementations(
                    inheritanceMap, methodMap);//得到方法的所有子类方法实现（被子类重写的方法）
            final ImplementationFinder implementationFinder = config.getImplementationFinder(
                    methodMap, methodImplMap, inheritanceMap);
            //将方法的所有子类方法实现保存到methodimpl.dat
            try (Writer writer = Files.newBufferedWriter(Paths.get("methodimpl.dat"))) {
                for (Map.Entry> entry : methodImplMap.entrySet()) {
                    writer.write(entry.getKey().getClassReference().getName());
                    writer.write("\t");
                    writer.write(entry.getKey().getName());
                    writer.write("\t");
                    writer.write(entry.getKey().getDesc());
                    writer.write("\n");
                    for (MethodReference.Handle method : entry.getValue()) {
                        writer.write("\t");
                        writer.write(method.getClassReference().getName());
                        writer.write("\t");
                        writer.write(method.getName());
                        writer.write("\t");
                        writer.write(method.getDesc());
                        writer.write("\n");
                    }
                }
            }
            //方法调用map，key为父方法，value为子方法与父方法参数传递关系
            Map> graphCallMap = new HashMap<>();
            for (GraphCall graphCall : DataLoader.loadData(Paths.get("callgraph.dat"), new GraphCall.Factory())) {
                MethodReference.Handle caller = graphCall.getCallerMethod();
                if (!graphCallMap.containsKey(caller)) {
                    Set graphCalls = new HashSet<>();
                    graphCalls.add(graphCall);
                    graphCallMap.put(caller, graphCalls);
                } else {
                    graphCallMap.get(caller).add(graphCall);
                }
            }
            //exploredMethods保存在调用链从查找过程中已经访问过的方法节点，methodsToExplore保存调用链
            Set exploredMethods = new HashSet<>();
            LinkedList methodsToExplore = new LinkedList<>();
            //加载所有sources，并将每个source作为每条链的第一个节点
            for (Source source : DataLoader.loadData(Paths.get("sources.dat"), new Source.Factory())) {
                GadgetChainLink srcLink = new GadgetChainLink(source.getSourceMethod(), source.getTaintedArgIndex());
                if (exploredMethods.contains(srcLink)) {
                    continue;
                }
                methodsToExplore.add(new GadgetChain(Arrays.asList(srcLink)));
                exploredMethods.add(srcLink);
            }
            long iteration = 0;
            Set discoveredGadgets = new HashSet<>();
            //使用广度优先搜索所有从source到sink的调用链
            while (methodsToExplore.size() > 0) {
                if ((iteration % 1000) == 0) {
                    LOGGER.info("Iteration " + iteration + ", Search space: " + methodsToExplore.size());
                }
                iteration += 1;
                GadgetChain chain = methodsToExplore.pop();//从队首弹出一条链
                GadgetChainLink lastLink = chain.links.get(chain.links.size()-1);//取这条链最后一个节点
                Set methodCalls = graphCallMap.get(lastLink.method);//获取当前节点方法所有子方法与当前节点方法参数传递关系
                if (methodCalls != null) {
                    for (GraphCall graphCall : methodCalls) {
                        if (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex) {
                            //如果当前节点方法的污染参数与当前子方法受父方法参数影响的Index不一致则跳过
                            continue;
                        }
                        Set allImpls = implementationFinder.getImplementations(graphCall.getTargetMethod());//获取子方法所在类的所有子类重写方法
                        for (MethodReference.Handle methodImpl : allImpls) {
                            GadgetChainLink newLink = new GadgetChainLink(methodImpl, graphCall.getTargetArgIndex());//新方法节点
                            if (exploredMethods.contains(newLink)) {
                                //如果新方法已近被访问过了，则跳过,这里能减少开销。但是这一步跳过会使其他链/分支链经过此节点时，由于已经此节点被访问过了，链会在这里断掉。那么如果这个条件去掉就能实现找到所有链了吗？这里去掉会遇到环状问题，造成路径无限增加...
                                continue;
                            }
                            GadgetChain newChain = new GadgetChain(chain, newLink);//新节点与之前的链组成新链
                            if (isSink(methodImpl, graphCall.getTargetArgIndex(), inheritanceMap)) {//如果到达了sink，则加入discoveredGadgets
                                discoveredGadgets.add(newChain);
                            } else {
                                //新链加入队列
                                methodsToExplore.add(newChain);
                                //新节点加入已访问集合
                                exploredMethods.add(newLink);
                            }
                        }
                    }
                }
            }
            //保存搜索到的利用链到gadget-chains.txt
            try (OutputStream outputStream = Files.newOutputStream(Paths.get("gadget-chains.txt"));
                 Writer writer = new OutputStreamWriter(outputStream, StandardCharsets.UTF_8)) {
                for (GadgetChain chain : discoveredGadgets) {
                    printGadgetChain(writer, chain);
                }
            }
            LOGGER.info("Found {} gadget chains.", discoveredGadgets.size());
        }
    ...
作者给出的sink方法：
    private boolean isSink(MethodReference.Handle method, int argIndex, InheritanceMap inheritanceMap) {
            if (method.getClassReference().getName().equals("java/io/FileInputStream")
                    && method.getName().equals("")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/io/FileOutputStream")
                    && method.getName().equals("")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/nio/file/Files")
                    && (method.getName().equals("newInputStream")
                    || method.getName().equals("newOutputStream")
                    || method.getName().equals("newBufferedReader")
                    || method.getName().equals("newBufferedWriter"))) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/Runtime")
                    && method.getName().equals("exec")) {
                return true;
            }
            /*
            if (method.getClassReference().getName().equals("java/lang/Class")
                    && method.getName().equals("forName")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/Class")
                    && method.getName().equals("getMethod")) {
                return true;
            }
            */
            // If we can invoke an arbitrary method, that's probably interesting (though this doesn't assert that we
            // can control its arguments). Conversely, if we can control the arguments to an invocation but not what
            // method is being invoked, we don't mark that as interesting.
            if (method.getClassReference().getName().equals("java/lang/reflect/Method")
                    && method.getName().equals("invoke") && argIndex == 0) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/net/URLClassLoader")
                    && method.getName().equals("newInstance")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/System")
                    && method.getName().equals("exit")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/Shutdown")
                    && method.getName().equals("exit")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/Runtime")
                    && method.getName().equals("exit")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/nio/file/Files")
                    && method.getName().equals("newOutputStream")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/ProcessBuilder")
                    && method.getName().equals("") && argIndex > 0) {
                return true;
            }
            if (inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("java/lang/ClassLoader"))
                    && method.getName().equals("")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/net/URL") && method.getName().equals("openStream")) {
                return true;
            }
            // Some groovy-specific sinks
            if (method.getClassReference().getName().equals("org/codehaus/groovy/runtime/InvokerHelper")
                    && method.getName().equals("invokeMethod") && argIndex == 1) {
                return true;
            }
            if (inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("groovy/lang/MetaClass"))
                    && Arrays.asList("invokeMethod", "invokeConstructor", "invokeStaticMethod").contains(method.getName())) {
                return true;
            }
            return false;
        }
对于每个入口节点来说，其全部子方法调用、孙子方法调用等等递归下去，就构成了一棵树。之前的步骤所做的，就相当于生成了这颗树，而这一步所做的，就是从根节点出发，找到一条通往叶子节点的道路，使得这个叶子节点正好是我们所期望的sink方法。gadgetinspector对树的遍历采用的是广度优先(BFS)，而且对于已经检查过的节点会直接跳过，这样减少了运行开销，避免了环路，但是丢掉了很多其他链。
这个过程看起来就像下面这样：
通过污点的传递，最终找到从source->sink的利用链
**注** ：targ表示污染参数的index，0->1这样的表示父方法的0参传递给了子方法的1参
### 样例分析
现在根据作者的样例写个具体的demo实例来测试下上面这些步骤。
demo如下:
    IFn.java:
        package com.demo.ifn;
        import java.io.IOException;
        public interface IFn {
            public Object invokeCall(Object arg) throws IOException;
        }
    FnEval.java
        package com.demo.ifn;
        import java.io.IOException;
        import java.io.Serializable;
        public class FnEval implements IFn, Serializable {
            public FnEval() {
            }
            public Object invokeCall(Object arg) throws IOException {
                return Runtime.getRuntime().exec((String) arg);
            }
        }
    FnConstant.java:
        package com.demo.ifn;
        import java.io.Serializable;
        public class FnConstant implements IFn , Serializable {
            private Object value;
            public FnConstant(Object value) {