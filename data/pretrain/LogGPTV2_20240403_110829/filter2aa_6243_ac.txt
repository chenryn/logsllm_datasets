.PP
.Vb 1
\&    delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};   # 使 %ENV 更安全
.Ve
.PP
当然，无论是否使用污染变量都有可能出现麻烦。在处理任何由用户提供的文件名的文件时，要做周密的测试。必须时，可以在去掉用户（或组！）的特权之后再进行类似open的操作。Perl不阻止你打开污染的文件名并读取内容，所以要小心对待打印出的内容。污染机制的目的是防止愚蠢的错误，不是使人懒惰不去思考。
.PP
当你传递给system和exec明确的参数列表而非含有通配符的字符串时，Perl不会调用shell去扩展通配符。不幸的是，open，glob，backtick（译注：backtick为反引号）函数并不提供这样的特性，所以当使用它们的时候必须非常仔细。
.PP
Perl为从一个setuid或setgid程序打开文件或管道提供了一个安全的方法：创建一个减少权限的子进程来为你完成那些“肮脏”的工作。首先，用特殊的OPEN语法创建一个子进程，使其和父进程通过一个管道相连。现在子进程把它的ID和其他诸如环境变量，umask，当前工作目录的性质重新设置回原始的或安全的变量。然后让该不具有任何特权的子进程来完成OPEN和其他的系统调用。最终，子进程把它成功存取的数据传递给父进程。因为文件或管道是由运行于比父进程权限低的子进程打开的，所以它不容易被欺骗去做它不该做的事情。
.PP
这里有一个安全使用backtick的方法。注意当shell可能扩展时，exec是如何不被调用的。这是目前来调用可能被shell转义的东西最好的方法：从不调用shell。
.PP
.Vb 25
\&        use English '-no_match_vars';
\&        die "Can't fork: $!" unless defined($pid = open(KID, "-|"));
\&        if ($pid) {           # parent
\&            while () {
\&                # do something
\&            }
\&            close KID;
\&        } else {
\&            my @temp     = ($EUID, $EGID);
\&            my $orig_uid = $UID;
\&            my $orig_gid = $GID;
\&            $EUID = $UID;
\&            $EGID = $GID;
\&            # Drop privileges
\&            $UID  = $orig_uid;
\&            $GID  = $orig_gid;
\&            # Make sure privs are really gone
\&            ($EUID, $EGID) = @temp;
\&            die "Can't drop privileges"
\&                unless $UID == $EUID  && $GID eq $EGID;
\&            $ENV{PATH} = "/bin:/usr/bin"; # Minimal PATH.
\&            # Consider sanitizing the environment even more.
\&            exec 'myprog', 'arg1', 'arg2'
\&                or die "can't exec myprog: $!";
\&        }
.Ve
.PP
 使用类似的策略可以让glob使用通配符扩展，虽然也可以用readdir。
.PP
当你虽然相信自己并没有写有问题的程序，但并不信任程序的最终使用者不会企图让它做坏事时，污染检测最为有用。此类安全检查对set-id和以其他用户身份运行的程序（如CGI）非常有用。
.PP
若连程序的作者都不可信的话，情况就不同了。当某人给你一段程序并和你说，“给，试试看。”对于此类安全问题，使用包含在Perl发行版中的Safe模块。这个模块允许程序员建立特殊的隔间，在其中所有的系统调用都被截获，并且名字空间入口被严格控制。
.Sh "Security Bugs 安全问题"
.IX Subsection "Security Bugs"
除了源于赋予像脚本一样灵活的系统特权这类明显的问题，在许多Unix版本中，set-id脚本从一开始就是天生不安全的。问题出在内核的条件竞争。在内核打开文件来查看应该运行哪个解释器和当（现在已set-id）解释器回过头来重新打开文件并解释它的这两个事件之间，可疑的文件也许已经改变了，特别是当系统中有符号连接时。
.PP
幸运的是，这个内核的“特性”有时可以被关闭。不幸的是，有两个方法来关闭它。系统可以简单的宣布任何含有set-id位的脚本都是不合法的，这个显然用处不大。另一个是忽略脚本中的set-id位。如果后者被设置为真，那么当Perl注意到其它脚本中无效的setuid/gid位时,它可以模仿 setuid和setgid的机制。这是通过一个叫做suidperl的特殊程序来实现的，它在需要时自动被调用。
.PP
但是，如果内核的set-id脚本特性没有被关闭，Perl就会大声抱怨你的set-id程序是不安全的。你要么需要关闭内核的set-id脚本特性，要么为脚本制作一个C Wrapper。一个C Wrapper就是一个除了调用你的Perl程序其他什么都不干的已编译程序。已编译程序不受此内核问题的影响去找set-id脚本的麻烦。这里有一个简单的C Wrapper：
.PP
.Vb 6
\&    #define REAL_PATH "/path/to/script"
\&    main(ac, av)
\&        char **av;
\&    {
\&        execv(REAL_PATH, av);
\&    }
.Ve
.PP
把此C Wrapper编译成可执行二进制文件，对它setuid或setgid而不是你的脚本。
.PP
近几年，软件商开始提供没有此安全问题的系统。在它们中，当内核把将要被打开的set-id脚本的名字传递给解释器时，它将不会传递可能出现问题的路径名而是传递/dev/fd/3。这是一个已经在脚本上打开的特殊文件，所以将不会出现条件竞争问题。在这些系统中，Perl需要在编译时带上-DSETUID_SCRIPTS_ARE_SECURE_NOW参数。Configure程序将自己完成这个任务，所以你永远不必要自己指出此点。现在SVR4和BSD4.4都采用此种方法来避免内核条件竞争。
.PP
在Perl 5.6.1 发行之前，suidperl的代码问题可能导致安全漏洞。
.Sh "Protecting Your Programs 保护你的程序"
.IX Subsection "Protecting Your Programs"
有很多种方法可以隐藏你的Perl程序源代码，它们具有不同等级的“安全性”。
.PP
首先，你不能去掉“读”权限，因为源代码必须在被读取之后才能编译和解释。（这并不意味着CGI脚本的源代码在网上是可被读取的）所以你必须把权限设置为对外界友好的0755。这使在你本地系统上的人只能查看源代码。
.PP
一些人错误的认为这是一个安全问题。如果你的程序不安全，而你依赖人们不知道如何利用这些漏洞，这是不安全的。通常某些人在没有看源代码的情况下就可以利用这些漏洞。以隐藏来实现所谓的“安全”而不是修复漏洞，是非常不安全的。
.PP
你可以试着通过源代码过滤器（CPAN上的Filter::*）来实现加密。但是骇客有可能把它解密。你可以试着使用下面描述的字节码编译器和解释器，但是骇客有可能把它反编译。这些对想看你代码的人造成不同难度的困难。但是没有一种可以完全的避免（不光是Perl，所有语言都一样）。
.PP
如果你担心有人会通过你的程序得利，那么你可以在最低行写一个限制性的许可证来寻求法律保护。当然如果你用类似“这是某某公司的私人程序，你无权使用它”的声明来授权你的软件并发布它的话，那会是非常危险的。你应该找一个律师确定你的许可证的措辞可以在法庭上站得住脚。
.Sh "Unicode"
.IX Subsection "Unicode"
Unicode is a new and complex technology and one may easily overlook
certain security pitfalls.  See perluniintro for an overview and
perlunicode for details, and \*(L"Security Implications of Unicode\*(R" in perlunicode for security implications in particular.
.Sh "Algorithmic Complexity Attacks"
.IX Subsection "Algorithmic Complexity Attacks"
Certain internal algorithms used in the implementation of Perl can
be attacked by choosing the input carefully to consume large amounts
of either time or space or both.  This can lead into the so-called
\&\fIDenial of Service\fR (DoS) attacks.
.IP "\(bu" 4
Hash Function \- the algorithm used to \*(L"order\*(R" hash elements has been
changed several times during the development of Perl, mainly to be
reasonably fast.  In Perl 5.8.1 also the security aspect was taken
into account.
.Sp
In Perls before 5.8.1 one could rather easily generate data that as
hash keys would cause Perl to consume large amounts of time because
internal structure of hashes would badly degenerate.  In Perl 5.8.1
the hash function is randomly perturbed by a pseudorandom seed which
makes generating such naughty hash keys harder.
See \*(L"\s-1PERL_HASH_SEED\s0\*(R" in perlrun for more information.
.Sp
The random perturbation is done by default but if one wants for some
reason emulate the old behaviour one can set the environment variable
\&\s-1PERL_HASH_SEED\s0 to zero (or any other integer).  One possible reason
for wanting to emulate the old behaviour is that in the new behaviour
consecutive runs of Perl will order hash keys differently, which may
confuse some applications (like Data::Dumper: the outputs of two
different runs are no more identical).
.Sp
\&\fBPerl has never guaranteed any ordering of the hash keys\fR, and the
ordering has already changed several times during the lifetime of
Perl 5.  Also, the ordering of hash keys has always been, and
continues to be, affected by the insertion order.
.Sp
Also note that while the order of the hash elements might be
randomised, this \*(L"pseudoordering\*(R" should \fBnot\fR be used for
applications like shuffling a list randomly (use \fIList::Util::shuffle()\fR
for that, see List::Util, a standard core module since Perl 5.8.0;
or the \s-1CPAN\s0 module Algorithm::Numerical::Shuffle), or for generating
permutations (use e.g. the \s-1CPAN\s0 modules Algorithm::Permute or
Algorithm::FastPermute), or for any cryptographic applications.
.IP "\(bu" 4
Regular expressions \- Perl's regular expression engine is so called
\&\s-1NFA\s0 (Non\-Finite Automaton), which among other things means that it can
rather easily consume large amounts of both time and space if the
regular expression may match in several ways.  Careful crafting of the
regular expressions can help but quite often there really isn't much
one can do (the book \*(L"Mastering Regular Expressions\*(R" is required
reading, see perlfaq2).  Running out of space manifests itself by
Perl running out of memory.
.IP "\(bu" 4
Sorting \- the quicksort algorithm used in Perls before 5.8.0 to
implement the \fIsort()\fR function is very easy to trick into misbehaving
so that it consumes a lot of time.  Nothing more is required than
resorting a list already sorted.  Starting from Perl 5.8.0 a different
sorting algorithm, mergesort, is used.  Mergesort is insensitive to
its input data, so it cannot be similarly fooled.
.PP
See  for more information,
and any computer science text book on the algorithmic complexity.
.SH "SEE ALSO 参见"
.IX Header "SEE ALSO"
perlrun中关于清理环境变量的描述
.SH "中文版维护人"
.B nan1nan1  
.SH 中文版最新更新
.B 2001年12月23日星期日
.SH 中文手册页翻译计划
.B http://cmpp.linuxforum.net