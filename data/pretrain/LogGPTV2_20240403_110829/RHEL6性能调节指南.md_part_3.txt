# [⁠]{#main-specs.html#main-specs}第 2 章 红帽企业版 Linux 6 性能特点 {.title}
:::
::: section
::: titlepage
# [⁠]{#main-specs.html#s-64-bit-support}2.1. 64 位支持 {.title}
:::
::: para
红帽企业版 Linux 6.4 支持 64 位处理器：这些处理器理论上可使用多达 16
[*EB*]{.emphasis} 内存。从 GA 版本开始，红帽企业版 Linux
就已通过测试并证明可以支持多达 8TB 物理内存。
:::
::: para
在更新几个次要版本后，红帽企业版 Linux 6
支持的内存大小有望继续增加，因为红帽总是不断引进并改进可使用更大内存块的功能。此类改进（从红帽企业版
Linux 6 GA 版本开始）有：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    大页面和透明大页面
    :::
-   ::: para
    非均匀内存访问改进
    :::
:::
::: para
下面的小节中将更具体地列举这些改进。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
大页面和透明大页面
:::
在红帽企业版 Linux 6
中采用*大页面*可让系统在跨不同内存负载工作时更有效地管理内存。大页面动态地使用
2MB 页面，而不是标准的 4KB 页面大小，这样可以让应用程序全面处理 GB 甚至
TB 内存。
:::
::: para
很难手动创建、管理和使用大页面。要解决这个问题，红帽企业版 Linux 6
还采用*透明大页面*（THP）。THP 自动管理很多使用大页面时的复杂情况。
:::
::: para
有关大页面以及 THP 的详情请参考 [第 5.2 节
"大页面和透明大页面"](#main-memory.html#s-memory-transhuge){.xref}。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
NUMA 改进
:::
很多新系统现在支持*非均匀内存访问*（NUMA）。NUMA
为大型系统简化硬件设计和创建，但它也增加了应用程序开放的复杂性。例如：NUMA
采用本地和远程内存，但访问远程内存的时间是访问本地内存的好几倍。这个功能（还有其他一些功能）有很多隐患，可能会影响操作系统、应用程序以及应部署的系统配置。
:::
::: para
红帽企业版 Linux 6 为更好地使用 NUMA 进行了优化，这要感谢一些可以在 NUMA
系统中帮助管理用户和程序的功能。这些功能包括 CPU 亲和力、CPU
pinning（芯片组）、numactl
和控制组，这些功能可将进程（亲和力）或者程序（pinning）"捆绑"到具体的
CPU 或者一组 CPU 中。
:::
::: para
有关红帽企业版 Linux 6 中 NUMA 支持的详情请参考 [第 4.1.1 节 "CPU 和
NUMA 拓扑"](#main-cpu.html#s-cpu-numa-topology){.xref}。
:::
:::
::: section
::: titlepage
# [⁠]{#main-specs.html#s-ticket-spinlocks}2.2. Ticket 自旋锁 {.title}
:::
::: para
系统设计的关键是要保证进程不会更改另一个进程使用的内存。无法控制的内存更改可导致数据污染和系统崩溃。要防止此类情况出现，操作系统要允许进程锁定一个内存片段，执行操作，然后解锁或者"释放"内存。
:::
::: para
内存锁定的常见使用是通过*自旋锁*实现的，它可让进程一直检查是否有可用的锁，并在所可用时立即使用。如果有多个进程竞争同一锁，那么在该锁被释放后第一个请求该锁定进程会得到它。当所有进程有对内存相同的访问时，这个方法是"公平"的且运作良好。
:::
::: para
遗憾的是，在 NUMA 系统中，不是所有进程都对所有对等的访问。与该锁处于同一
NUMA 节点中的进程明显可以优先获得该锁。远程 NUMA
节点中的进程可能会有锁不足和性能下降的问题。
:::
::: para
为解决这个问题，红帽企业版 Linux 采用 *ticket
自旋锁*。这个功能为锁添加了预留队列机制，可让[*所有*]{.emphasis}进程根据其提出请求的时间顺序使用锁。这样可以消除计时问题以及不公平的锁请求利益。
:::
::: para
虽然 ticket 自旋锁负担比普通自旋锁要高，但它缩放比例更大，并可在 NUMA
系统中提供更好的性能。
:::
:::
::: section
::: titlepage
# [⁠]{#main-specs.html#s-dynamic-list-structure}2.3. 动态列表结构 {.title}
:::
::: para
该操作系统需要系统中每个处理器的一组信息。在红帽企业版 Linux 5
中是将这组信息分配到内存的固定大小阵列中。通过索引到这个阵列可获得每个独立处理器中的信息。这个方法迅速、简便，且对包含少数处理器的系统来说相对直接。
:::
::: para
但随着系统中处理器数量的增长，这个方法会产生相当大的费用。因为内存中固定大小的阵列是一个单一共享资源，它可能成为一个瓶颈，因为更多的处理器会尝试同时访问它。
:::
::: para
为解决这个问题，红帽企业版 Linux 6
使用*动态列表结构*提供处理器信息。这样可以动态分配用于处理器信息的阵列：如果系统中只有八个处理器，则会在该列表中生成八个条目。如果有
2048 个处理器，则会生成 2048 个条目。
:::
::: para
使用动态列表结构可进行更细微的锁定。例如：如果要同时为处理器
6、72、183、657、931 和 1546
进行更新，则可以同时进行更新。显然在高性能系统中类似这种情况出现的频率比小系统要高得多。
:::
:::
::: section
::: titlepage
# [⁠]{#main-specs.html#tickless-kernel}2.4. 无空循环内核 {.title}
:::
::: para
在红帽企业版 Linux
以前的版本中，内核使用基于计时器的机制，可连续生成系统中断。在每个中断中，系统进行*轮循*，即它检查是否有需要进行的工作。
:::
::: para
根据设置，这个系统中断或者*对时信号*可能会每秒出现几百或者几千次。无论系统负载如何，这种情况每秒都会发生。在轻度负载的系统中，这会因为防止处理器有效使用睡眠状态而影响[*电源消耗*]{.emphasis}。处于睡眠状态时系统使用的电量最少。
:::
::: para
系统最有效地使用电源的方法是尽快完成工作，尽可能进入深度睡眠状态，而且能睡多久睡多久。红帽企业版
Linux 使用*对时信号*实现这个目的。使用这个方法，将中断计时器从 idle
池中移除，将红帽企业版 Linux 6 转化为完全由中断驱动的环境。
:::
::: para
无间断内核可让系统在闲置时进入深度睡眠状态，并在有工作要做时迅速反应。
:::
::: para
有关详情请参考*《电源管理指南》*，地址为
。
:::
:::
::: section
::: titlepage
# [⁠]{#main-specs.html#intro-control-groups}2.5. 控制组 {.title}
:::
::: para
红帽企业版 Linux 6
为性能调节提供很多有用的选项。大型系统，比如几百个处理器，可调节为提供超级性能。但调节这些系统需要高级专家以及明确的工作量。当大型系统非常昂贵且数量不多，应该予以特殊对待。现在这些系统是大型机，我们需要更多有效工具。
:::
::: para
目前使用的用来强化服务的更强大的系统可让事情并的更为复杂。以前在 4-8
台就服务器中运行的负载现在都在一台服务器在中运行。如 [第 1.2.1 节
"并行计算"](#ch-intro.html#intro-parallel){.xref}
所述，现在很多中级系统所含核比以前高性能机器还要多。
:::
::: para
很多现代程序已设计为使用多线程或者进程进行平行处理以提高性能。但只有少数程序能充分利用八个以上线程。因此多程序通常要在
32-CPU 中安装以便让产能最大化。
:::
::: para
想象这样一种情况：小型、廉价大型机系统现在与原来昂贵的高性能机器有同样的性能。廉价的高性能机器可让系统架构师可以在较少的机器在很强化更多服务。
:::
::: para
但有些资源（比如 I/O 以及网络通讯）是共享的，不会如 CPU
计数一般快速增长。因此当某个系统使用单一资源时间过长时，托管多个程序的系统可能会有总体性能下降。
:::
::: para
为解决这个问题，红帽企业版 Linux 6 现在支持*控制组*（cgroups）。Cgroups
可让管理员根据需要为具体任务分配资源。这意味着例如要为数据库应用程序分配四台
CPU 的80%，60GB 内存，以及 40% 的磁盘
I/O。在同一系统中运行的网页应用程序则使用两个 CPU，2GB 内存以及 50%
的可用网络带宽。
:::
::: para
结果是数据库和网页应用程序都有良好的性能，因为该系统防止二者过度占用系统资源。另外，cgroups
的很多方面是[*自我调整*]{.emphasis}，可让系统根据负载的变化做相应的调整。
:::
::: para
cgroup 有两个主要部分：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    分配给该 cgroup 的任务列表
    :::
-   ::: para
    分配给那些任务的资源
    :::
:::
::: para
分配给 cgroup 的任务是在该 cgroup
[*内部*]{.emphasis}运行。所有其派生处的子任务也都将在该 cgroup
中运行。这样可以让管理员将整个程序作为一个单位进行管理。管理员还可以分配以下资源：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    CPU 组
    :::
-   ::: para
    内存
    :::
-   ::: para
    I/O
    :::
-   ::: para
    网络（带宽）
    :::
:::
::: para
在 CPU 组中，cgroups 可让管理员配置 CPU 数，具体 CPU 或者节点的亲和性
[⁠]{#main-specs.html#idm140329761633824}[^\[3\]^](#main-specs.html#ftn.idm140329761633824){.footnote
xmlns:d="http://docbook.org/ns/docbook"}，以及任务组使用的 CPU
时间长度。使用 cgroups 配置 CPU
在是保证总体性能良好，防止程序过度消耗资源，影响其他任务的关键，同时还可保证程序不会缺少
CPU 时间。
:::
::: para
I/O 带宽和网络带宽由其他资源控制器管理。同样，资源控制器可让您决定
cgroup 中任务可消耗的带宽，并保证 cgroup
中的任务既不会消耗过多资源，也不会缺少资源。
:::
::: para
Cgroups
可让管理员在较高等级确定并分配各种程序需要（和将要）消耗的系统资源。然后系统会自动管理并平衡各种程序，提供良好的可预估性能，并优化系统总体性能。
:::
::: para
有关使用控制组的详情请参考*《资源管理指南》*，网址为
。
:::
:::
::: section
::: titlepage
# [⁠]{#main-specs.html#storage-improvements}2.6. 存储和文件系统改进 {.title}
:::
::: para
红帽企业版 Linux 6
还有一些存储和文件系统管理改进。这个版本中两个最著名的优势是 ext4 和 XFS
支持。有关与存储和文件系统有关的性能改进详情请参考 [第 7 章
*文件系统*](#main-fs.html){.xref}。
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
Ext4
:::
Ext4 是红帽企业版 Linux 6 的默认文件系统。它是 EXT
文件系统产品线的第四代产品，理论上支持的最大文件系统大小为
1ET，单一文件最大可为 16TB。红帽企业版 Linux 支持最大的文件系统大小为
16TB，单一文件最大可为 16TB。除有较大存储容量外，ext4
还包括几个新功能，比如：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    基于扩展的元数据
    :::
-   ::: para
    延迟的分配
    :::
-   ::: para
    日志检查总数
    :::
:::