(the key distribution or the uniform distribution; this is kept
implicit).
Two families of machines are indistinguishable if any ad-
versary cannot tell with which family he is connected with
non negligible probability:
Definition 1. Two environments F and F ′ are indistin-
guishable, which we write F ≈ F ′, if, for every attacker A,
|Pr{r, r : (F(r) k A(r))(0η) = 1}−
Pr{r, r : (F ′(r) k A(r))(0η) = 1}|
is negligible. r is the sequence of random inputs of the ma-
chines in F (resp. F ′), including keys. r is the random
input of the attacker.
As described in introduction, the computational secrecy
of s can be expressed as follows. In F0, the machines using
s are set with s0 while in F1, they are set with s1. The
values s0 and s1 could also be chosen by the attacker. Then
the data s is computationally secret if F0 ≈ F1. Note that
the environments Fb may contain corrupted machines, not
holding si, that start by leaking their private information to
the adversary.
Anonymity of group signatures [5] is deﬁned through the
following game: the adversary chooses a message m and two
identities i0 and i1. Then in F0, the machines sign m with
identity i0 while in F1, the machines sign m with identity
i1. Again the property is deﬁned by F0 ≈ F1.
3. THE APPLIED PI-CALCULUS
We use the applied π-calculus of [2] as a symbolic model.
There are several reasons for this choice. First, there are
veriﬁcation tools relying on this model [15]. Next, Though
only a small fragment of this process calculus is used in
the present paper, we plan several extensions in various di-
rections: considering more primitives (and equational theo-
ries), enriching the control structure, e.g. with conditionals
and sequential composition,... The applied π-calculus is well
suited for such extensions.
We recall the deﬁnitions in this section. Note that we will
only consider a small fragment of the applied-π-calculus for
the protocol descriptions and only a particular equational
theory for our main result.
3.1 Syntax
It represents the security primitives (e.g.
A signature is a ﬁnite set of function symbols with an
arity.
encryp-
tion, pairing, decryption). Given a signature Σ, an inﬁ-
nite set N of names and an inﬁnite set X of variables,
T (N , X ) is the set of terms, the least set containing N , X
and closed by application of a symbol in Σ. We assume
that Σ contains a binary pairing function , the cor-
responding projections functions π1, π2, and a length func-
tion l, which is a morphism from T (N , X ) to N. We as-
sume inﬁnitely many names of any length. Terms represent
messages and names stand for (randomly) generated data.
α, β, . . . are meta-variables that range over names and vari-
ables. We confuse the name generation and the local vari-
ables using the same ν construction, as they obey the same
scoping/renaming rules. u stands for a sequence u1, . . . , un.
σ = {x1 7→ s1, . . . , xk 7→ sk} is the substitution that re-
places the variable xi with the term si. The domain of σ,
denoted by dom(σ) is the set {x1, . . . , xk}.
Example 3.1. Σ0 is the signature consisting of the bi-
nary pairing , the two associated projections π1, π2,
the binary decryption dec and the ternary symbol {·}·
· for
symmetric encryption: {x}r
k stands for the encryption of x
with the key k and the random r. Σ0 also contains constants
with in particular a constant 0l of length l for every l.
The syntax of processes and extended processes is dis-
played in Figure 1.
In what follows, we restrict ourselves
to processes with public channels. P is a set of predicate
symbols with an arity. A diﬀerence with [2] is that we
consider conditionals with arbitrary predicates. This leaves
some ﬂexibility in modeling various levels of assumptions on
the cryptographic primitives. Typical examples are the abil-
ity (or not) to check whether a decryption succeeds, or the
ability (or not) to check that two ciphertexts are produced
using the same encryption key. Other examples are typing
predicates, which we may want (or not). In [2] the condition
is always an equality. Encoding the predicate semantics with
equalities is (only) possible when there is no negative con-
dition: it suﬃces then to express when a predicate is true.
We believe that predicates allow to better reﬂect the abil-
ity of the adversary, with less coding. As we will see in the
section 4, the predicates will be interpreted as polynomially
computable Boolean functions.
Note that we use unbounded (un-guarded) replication of
processes. This does not prevent from getting both sound-
ness and completeness w.r.t. the computational interpreta-
tion: we show that if there is a computational attack, then
there is a symbolic one (soundness). This symbolic attack
does not depend on the security parameter: in this respect,
it is a constant size attack. Interpreting back the attack in
φ, ψ ::=
p(s1, . . . , sn)
φ ∧ ψ
conditions
predicate application
conjunction
P, Q, R ::=
processes
c(x).P
c(s).P
0
P k Q
!P
(να)P
if φ then P else Q
input
output
terminated process
parallel composition
replication
restriction
conditional
A, B, C ::=
P
AkB
(να)A
{x 7→ s}
extended processes
plain process
parallel composition
restriction
active substitution
Figure 1: Syntax of processes
the computational world, this means that there is an attack
whose size is independent of the security parameter.
In the paper, we often confuse “process” an “extended pro-
cess” (and do not follow the lexicographic convention A, B...
vs P.Q, ...).
3.2 Operational semantics
We brieﬂy recall the operational semantics of the applied
pi-calculus (see [2] for details). E is a set of equations on the
signature Σ, deﬁning an equivalence relation =E on T (N ),
which is closed under context. =E is meant to capture sev-
eral representations of the same message. Predicate symbols
are interpreted as relations over T (N )/ =E. This yields a
structure M.
Example 3.2. The equations E0 corresponding to Σ0 are
dec({x}z
π2(
π1() = x
y, y) = x
) = y
They can be oriented, yielding a convergent rewrite sys-
tem: every term s has a unique normal form s ↓. We may
also consider the following predicates:
• M is unary and holds on a (ground) term s iﬀ s ↓ does
not contain any projection nor decryption symbols.
• EQ is binary and holds on s, t iﬀ M (s), M (t) and s ↓=
t ↓: this is a strict interpretation of equality.
• Psamekey is binary and holds on ciphertexts using the
same encryption key: M |= Psamekey(s, t) iﬀ
∃k, u, v, r, r′.EQ(s, {u}r
k) ∧ EQ(t, {v}r′
k ).
• EL is binary and holds on s, t iﬀ M (s), M (t) and s, t
have the same length. we assume that there is a length
function, which is deﬁned on terms as a homomor-
phism from terms to natural numbers.
The structural equivalence is the smallest equivalence re-
lation on processes that is closed under context application
and that satisﬁes the relations of Figure 2.
fn(P ) (resp.
fv(P )) is the set of names (resp. variables) that occur free
A k 0 ≡ A
A k B ≡ B k A
(A k B) k C ≡ A k (B k C)
(να)(νβ)A ≡ (νβ)(να)A
(να)(A k B) ≡ A k (να)B
(νx){x 7→ s} ≡ 0
(να)0 ≡ 0
!P ≡ P k !P
if α /∈ fn(A) ∪ fv(A)
{x 7→ s} k A ≡ {x 7→ s} k A{x 7→ s}
{x 7→ s} ≡ {x 7→ t}
if s =E t
Figure 2: Structural equivalence
in P . Bound names are renamed thus avoiding captures.
P {x 7→ s} is the process P in which free occurrences of
x are replaced by s. An evaluation context is a process
C = (να)([·] k P ) where P is a process. We write C[Q] for
(να)(Q k P ). A context (resp. a process) C is closed when
fv(C) = ∅ (there might be free names).
Possible evolutions of processes are captured by the rela-
tion →, which is the smallest relation, compatible with the
process algebra and such that:
(Com)
(Cond1) if φ then P else Q → P
(Cond2) if φ then P else Q → Q
c(x).P k c(s).Q → {x 7→ s} k P k Q
if M |= φ
if M 6|= φ
∗
−→ is the smallest transitive relation on processes con-
taining ≡ and −→ and closed by application of contexts. We
write P
c(t)
−−→ Q (resp. P
c(t)
−−→ Q) if there exists P ′ such that
P
∗
−→ c(x).P ′ and {x 7→ t}kP ′
∗
−→ Q (resp. P
∗
−→ c(t).P ′
and P ′
∗
−→ Q).
Definition 2. The observational equivalence relation ∼o
is the largest symmetric relation S on closed extended pro-
cesses such that ASB implies:
1. if, for some context C, term s and process A′,
A
∗
−→ C[c(s) · A′] then for some context C ′, term s′
and process B′, B
∗
−→ C ′[c(s′) · B′].
2. if A
∗
−→ A′ then, for some B′, B
∗
−→ B′ and A′SB′
3. C[A]SC[B] for all closed evaluation contexts C
Example 3.3
(Group signature). Group signature as
deﬁned in [5] can be modeled as observational equivalence
as follows. Let P (x, i) be the protocol for signing message
x with identity i. Let P1 = c(y).P (π1(y), π1(π2(y))) and
P2 = c(y).P (π1(y), π2(π2(y))).
Intuitively, the adversary
will send > where m is a message to be signed
and i1, i2 are two identities. P1 signs m with i1 while P2
signs m with i2. Then P preserves anonymity if P1 ∼o P2.
3.3 Simple processes
We do not need the full applied pi-calculus to symbolically
represent CTMs. For example, CTMs do not communicate
directly: all communications are controlled by the attacker
and there is no private channel. Thus we consider the frag-
ment of simple processes built on basic processes. Simple
processes capture the usual fragment used for security pro-
tocols. A basic process represents a session of a protocol
role where a party waits for a message of a certain form and
when all equality tests succeed, outputs a message accord-
ingly. Then the party waits for another message and so on.
The sets of basic processes B(i, n, x), where x is a variable
sequence, i is a name, called pid, standing for the process id
and n is a name sequence (including for instance fresh and
long-term keys), are the least sets of processes such that
0 ∈ B(i, n, x) and
• If B ∈ B(i, n, x), s ∈ T (n, x), φ is a conjunction of
EQ and M atomic formulas such that fn(φ) ⊆ n and
fv(φ) ⊆ x, ⊥ is a special error message, then
if
φ then cout(s) · B else cout(⊥) · 0
∈ B(i, n, x).
Intuitively, if all tests are satisﬁed, the process sends a
message depending on its inputs.
• if B ∈ B(i, n, x, x) and x /∈ x, then
cin(x). if EQ(π1(x), i) then B else cout(⊥) · 0
∈ B(i, n, x). Intuitively, on input x, the basic process
ﬁrst checks that it is the expected recipient of the mes-
sage, before processing it.
cout and cin are two special names, representing resp. the
send tape and the receive tape.
Example 3.4. The Wide Mouth Frog [16] is a simple pro-
tocol where a server transmits a session key from an agent
A to an agent B.
A → S : A, {Na, B, Kab}Kas
S → B : {Nb, A, Kab}Kbs
A session of role A played by agent a can be modeled by the
basic process
A(a, b) = if true then
cout(>}r
kas >) · 0 else cout(⊥) · 0
Similarly a session of role S played for agents a, b and whose
id is l, can be modeled by
S(a, b, l) = cin(x). if EQ(π1(x), l) then
if π1(π2(x)) = a ∧ π1(π2(deckas (π2(π2(x))))) = b then
kbs ) · 0
else cout(⊥) · 0 else cout(⊥) · 0
cout({>}r
A simple process combines any number of instances of the
protocol roles, hiding names that are meant to be (possibly
shared) secrets:
(νn)[ (νx1, n1B1kσ1)k · · · k(νxk, nkBkkσk)
!(νy1, l1, m1cout(l1)B′
1) k · · · k !(νyn, ln, mn.cout(ln)B′
n) ]
where Bj ∈ B(ij , n ⊎ nj , xj), dom(σj) ⊆ xj, B′
j ∈ B(lj , n ⊎
mj, yj ). Note that each basic process B′
j ﬁrst publishes its
identiﬁer lj, so that an attacker can communicate with it.
Each process of the form !((νyi, li)cout(li).B′
i) is a replicated
process.
In the deﬁnition of simple processes, we assume that for
any subterm {t}v
k occurring in a simple process, v is a name
that does not occur in any other term, and belongs to the
set of restricted names n. (Still, there may be several occur-
rences of {t}v
k, unlike in [4]).
Example 3.5. Continuing Example 3.4, a simple process
representing unbounded number of sessions in which A plays
a (with b) and s plays S (with a, b) for the Wide Mouth Frog
protocol is
ν(kas, kbs) ( !((νkab, na, r, l)cout(l).A(a, b))
k !((νx, nb, r, l)cout(l).S(a, b, l)) )
For simplicity, we have only considered sessions with the
same agent names a, b.
3.4 Deduction and static equivalence
As in the applied pi calculus [2], message sequences are
recorded in frames φ = νn.σ, where n is a ﬁnite set of names,
and σ is a ground substitution. n stands for fresh names that
are a priori unknown to the attacker.
Given a frame φ = νn.σ that represents the information
available to an attacker, a ground term s is deducible, which
we write νn.(σ ⊢ s) if σ ⊢ s can be inferred using the fol-
lowing rules:
if ∃x ∈ dom(σ)
s.t. xσ = s