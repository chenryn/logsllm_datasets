         for (i = 0; i  %d bytes (0x%x)\n", i, size, size);
         f();
         return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm2$ gcc -Wall -Wextra -Werror main-6.c -o 6
    julien@holberton:~/holberton/w/hackthevm2$ ./6
    Address of a: 0x7ffdae53ea4c
    Allocated space in the heap: 0xf32010
    Address of function main: 0x4006f9
    First bytes of the main function:
        55 48 89 e5 48 83 ec 40 89 7d dc 48 89 75 d0 
    Address of the array of arguments: 0x7ffdae53eb48
    Addresses of the arguments:
        [./6]:0x7ffdae54038b 
    Address of the array of environment variables: 0x7ffdae53eb58
    Address of the first environment variables:
        [0x7ffdae54038f]:"XDG_VTNR=7"
        [0x7ffdae54039a]:"XDG_SESSION_ID=c2"
        [0x7ffdae5403ac]:"CLUTTER_IM_MODULE=xim"
    Size of the array env: 62 elements -> 496 bytes (0x1f0)
    [f] a = 98, b = 1024, c = a * b = 100352
    [f] Adresses of a: 0x7ffdae53ea04, b = 0x7ffdae53ea08, c = 0x7ffdae53ea0c
    julien@holberton:~/holberton/w/hackthevm2$
->是真的！（函数 **f** 中 **var a** 的地址）0x7ffdae53ea04 
    #include 
    #include 
    /**                                                                                                      
     * f - print locations of various elements                                                               
     *                                                                                                       
     * Returns: nothing                                                                                      
     */
    void f(void)
    {
         int a;
         int b;
         int c;
         a = 98;
         b = 1024;
         c = a * b;
         printf("[f] a = %d, b = %d, c = a * b = %d\n", a, b, c);
         printf("[f] Adresses of a: %p, b = %p, c = %p\n", (void *)&a, (void *)&b, (void *)&c);
    }
    /**                                                                                                      
     * main - print locations of various elements                                                            
     *                                                                                                       
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS                                      
     */
    int main(int ac, char **av, char **env)
    {
         int a;
         void *p;
         int i;
         int size;
         printf("Address of a: %p\n", (void *)&a);
         p = malloc(98);
         if (p == NULL)
         {
              fprintf(stderr, "Can't malloc\n");
              return (EXIT_FAILURE);
         }
         printf("Allocated space in the heap: %p\n", p);
         printf("Address of function main: %p\n", (void *)main);
         printf("First bytes of the main function:\n\t");
         for (i = 0; i  %d bytes (0x%x)\n", i, size, size);
         f();
         getchar();
         return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm2$ gcc -Wall -Wextra -Werror main-7.c -o 7
    julien@holberton:~/holberton/w/hackthevm2$ ./7 Rona is a Legend SRE
    Address of a: 0x7fff16c8146c
    Allocated space in the heap: 0x2050010
    Address of function main: 0x400739
    First bytes of the main function:
        55 48 89 e5 48 83 ec 40 89 7d dc 48 89 75 d0 
    Address of the array of arguments: 0x7fff16c81568
    Addresses of the arguments:
        [./7]:0x7fff16c82376 [Rona]:0x7fff16c8237a [is]:0x7fff16c8237f [a]:0x7fff16c82382 [Legend]:0x7fff16c82384 [SRE]:0x7fff16c8238b 
    Address of the array of environment variables: 0x7fff16c815a0
    Address of the first environment variables:
        [0x7fff16c8238f]:"XDG_VTNR=7"
        [0x7fff16c8239a]:"XDG_SESSION_ID=c2"
        [0x7fff16c823ac]:"CLUTTER_IM_MODULE=xim"
    Size of the array env: 62 elements -> 496 bytes (0x1f0)
    [f] a = 98, b = 1024, c = a * b = 100352
    [f] Adresses of a: 0x7fff16c81424, b = 0x7fff16c81428, c = 0x7fff16c8142c
    julien@holberton:~$ ps aux | grep "./7" | grep -v grep
    julien     5788  0.0  0.0   4336   628 pts/8    S+   18:04   0:00 ./7 Rona is a Legend SRE
    julien@holberton:~$ cat /proc/5788/maps
    00400000-00401000 r-xp 00000000 08:01 171828                             /home/julien/holberton/w/hackthevm2/7
    00600000-00601000 r--p 00000000 08:01 171828                             /home/julien/holberton/w/hackthevm2/7
    00601000-00602000 rw-p 00001000 08:01 171828                             /home/julien/holberton/w/hackthevm2/7
    02050000-02071000 rw-p 00000000 00:00 0                                  [heap]
    7f68caa1c000-7f68cabd6000 r-xp 00000000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f68cabd6000-7f68cadd6000 ---p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f68cadd6000-7f68cadda000 r--p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f68cadda000-7f68caddc000 rw-p 001be000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f68caddc000-7f68cade1000 rw-p 00000000 00:00 0 
    7f68cade1000-7f68cae04000 r-xp 00000000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f68cafe8000-7f68cafeb000 rw-p 00000000 00:00 0 
    7f68cafff000-7f68cb003000 rw-p 00000000 00:00 0 
    7f68cb003000-7f68cb004000 r--p 00022000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f68cb004000-7f68cb005000 rw-p 00023000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f68cb005000-7f68cb006000 rw-p 00000000 00:00 0 
    7fff16c62000-7fff16c83000 rw-p 00000000 00:00 0                          [stack]
    7fff16d07000-7fff16d09000 r--p 00000000 00:00 0                          [vvar]
    7fff16d09000-7fff16d0b000 r-xp 00000000 00:00 0                          [vdso]
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
    julien@holberton:~$
让我们来确定几件事：
  * 栈起始于0x7fff16c62000，结束于0x7fff16c83000。我们的变量都在这个区域内（0x7fff16c8146c，0x7fff16c81424,0x7fff16c81428,0x7fff16c8142c）
  * 堆起始于0x02050000，结束于0x02071000。我们分配的内存在此位置（0x2050010）
  * 我们的代码（主函数）位于地址0x400739处，在以下区域内：  
**00400000-00401000 r-xp 00000000 08:01 171828
/home/julien/holberton/w/hackthevm2/7**  
它来自于文件/home/julien/holberton/w/hackthevm2/7（我们的可执行文件），并且该区域具有执行权限，这是合理的。
  * 参数和环境变量（从 **0x7fff16c81568** 到 **0x7fff16c8238f + 0x1f0** ）位于从0x7fff16c62000开始到0x7fff16c83000的区域，，，栈！所以他们在栈中，而不是在栈之外。
这也带来了更多问题：
  * 为什么我们的可执行文件“划分”为三个具有不同权限的区域？在下面这两个区域内有什么？
    * 00600000-00601000 r--p 00000000 08:01 171828 /home/julien/holberton/w/hackthevm2/7
    * 00601000-00602000 rw-p 00001000 08:01 171828 /home/julien/holberton/w/hackthevm2/7
  * 其他那些区域是什么？
  * 为什么我们分配的内存不在堆的最开始处（0x2050010 vs 02050000）？前16个字节被用来干什么？
还有一件事我们没有检查过：堆真的在向上增长吗？  
以后我们会知道的！在我们结束本章之前，让我们用我们学到的所有东西来更新我们的图表：  