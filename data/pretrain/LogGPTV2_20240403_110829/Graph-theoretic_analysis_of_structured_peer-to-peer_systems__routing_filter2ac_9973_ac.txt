gree and diameter are both log2N , or those of Chord. We
y
t
i
l
i
b
a
b
o
r
p
30%
25%
20%
15%
10%
5%
0%
CAN
Chord
100.0%
y
t
i
l
i
b
a
b
o
r
p
10.0%
1.0%
0.1%
0
1
2
3
distance n
0
1
2
3
4
5
6
7
8
9 10
distance n
Figure 3: Comparison between Chord’s and CAN’s
shortest path distributions for N = 1,024 and d = 5
(left). Distribution of shortest distances in de Bruijn
for N = 1,000 and k = 10 (right).
call such CAN “logarithmic” and note that the size of its
dimensions is N 1/d = 4 peers.
Lemma 4. The distribution of shortest distances in log-
arithmic CAN (d = 1/2 log2 N ) is binomial and identical to
that in Chord.
The result of this lemma is illustrated in Figure 3 (left) for
N = 1,024, d = 5, and D = 10, which shows a perfect match
between the two graphs (the distributions also match numer-
ically). Note that the only problem that prevents CAN from
“becoming” Chord is the diﬃculty of dynamically adjusting
the number of dimensions d. Even though CAN oﬀers more
ﬂexibility with the choice of d, the choice itself is very dif-
ﬁcult as it must be made a-priori and can only rely on the
expected number of nodes in the system. Small (ﬁxed) val-
ues of d prevent the system from scaling to large N , while
large values of d are ineﬃcient in settings where N happens
to be small. Therefore, it appears that in practical networks
of non-trivial size, the ability to scale its degree dynamically
provides Chord with a clear advantage over CAN.
4.3 De Bruijn
From the diameter perspective, de Bruijn graphs oﬀer sig-
niﬁcantly smaller end-to-end upper bounds on routing time.
However, the improvement by a factor of 4 over Chord for
N = 106 no longer holds when we examine the average short-
est distances in each graph. Nevertheless, the improvement
in µd is still substantial, but drops down to about a factor
of two faster than Chord as we demonstrate below.
In general, the distribution of de Bruijn’s distances d(x, y)
is very complicated and there is no known closed-form ex-
pression for its PMF p(n) [38].
In the full version of the
paper [24], we derive a simple formula for p(n) that is exact
for all graphs of diameter D ≤ 3 and is very close to the real
p(n) for the rest of the graphs.
Lemma 5. The asymptotic distribution of shortest dis-
tances in de Bruijn graphs is given by:
p(n) ≈ kn
N
− k2n−1
N 2
≥ kn − kn−1
N
.
(6)
It immediately follows from the lemma that de Bruijn
graphs expand exponentially and that the majority of nodes
are reachable at shortest distance D from each node v. This
is demonstrated in Figure 3 (right), which shows de Bruijn’s
p(n) for N = 1,000 and k = 10 (note the log scale of the
k
2
3
4
10
20
50
100
Moore
graph
17.9
11.7
9.4
5.8
4.5
3.5
2.98
de Bruijn Chord CAN
Classic
butterﬂy
18.3
11.9
9.5
5.9
4.6
3.5
2.98
–
–
–
–
10.0
–
–
huge
–
500
19.8
10.0
–
–
22.4
14.7
11.8
7.3
5.7
4.3
3.65
Table 3: The average distance in each graph (N =
106 nodes).
y-axis). Intuitively, it is clear that the average distance in
de Bruijn graphs must be very close to diameter D and that
the local structure of the graph at each node looks like a tree
(i.e., very few short cycles and low clustering). We examine
the cyclic structure of each graph in section 5 and in the
meantime, focus on de Bruijn’s average distance µd.
Lemma 6. The average distance in de Bruijn graphs is
asymptotically:
µd ≈ D − 1
k − 1
.
(7)
As expected, the average distance in de Bruijn graphs
cannot shrink much beyond its already very small diameter
D. In fact, for large values of N , the average distance µd in
(7) asymptotically tends to D as k becomes large.
4.4 Butterﬂy
The ﬁnal graph we examine in this section is the classic
butterﬂy. Even though its diameter and average distance are
close to optimal, they are always higher than those in (non-
trivial) de Bruijn graphs. Recall that the average distance
in the butterﬂy graph is given by the following [18]:
≈ 3 logk N
3m − 1
,
(8)
µd =
− 1
k − 1
+
m
N (k − 1)
2
2
which, for large N and k, is asymptotically 50% larger than
the same metric in de Bruijn graphs.
4.5 Discussion
The results of this section indicate that de Bruijn graphs
oﬀer not only provably-optimal diameter D, but also smaller
average routing times compared to Chord, CAN, and the
static butterﬂy. As shown in Table 3 for N = 106, the
average distance in de Bruijn graphs is still smaller than
half of that in Chord and CAN for the same number of
neighbors and 22% smaller than that in the butterﬂy. Also
notice that for large k, µd in de Bruijn graphs converges to
the best possible average distance of Moore graphs shown
in the ﬁrst column of Table 3.
This result has several practical implications. First, µd
determines the expected delay in the graph and represents
a measure of responsiveness of the system to user searches.
Second, the average distance determines the capacity of a
peer-to-peer network, where the capacity is a term widely
used in interconnection and wireless networks to deﬁne the
throughput available to each node under random communi-
cation patterns within the network. Since each peer must
forward requests for other peers, the expected useful capac-
ity of a node is determined by the inverse of µd (i.e., for each
useful request a node makes, it must forward on average µd
other requests).
Assuming ﬁxed transmission bandwidth and discounting
interference eﬀects, the average capacity c(G) of wireless
√
ad-hoc networks is O(1/
N) due to spatial restrictions on
connectivity [16], while both Chord and logarithmic CAN
maintain an average capacity of 1
log2 N . Compared to
µd
wireless networks, this is a much better bound; however, it
is still several times lower than that in de Bruijn graphs.
Even assuming a worst-case average distance µd = D in de
Bruijn graphs, their average capacity with log2N neighbors
is superior to Chord’s for all N > 16:
= 2
c(G) =
1
logk N
=
log2 log2 N
log2 N
.
(9)
In fact, the ratio of these two capacities grows inﬁnitely
large (albeit very slowly) for large N . Compared to the
static butterﬂy, de Bruijn graphs oﬀer asymptotically 50%
more capacity and at least 22% more capacity in graphs of
practical size examined in this work.
In the current Internet, each search request typically car-
ries a small amount of information and it is not clear at this
point whether future peer-to-peer systems will be utilized
to the point of their ultimate capacity. Nevertheless, we be-
lieve that it is desirable to design the underlying structure of
the application-layer graph to be able to carry as many con-
current requests as possible. Thus, we must conclude that
de Bruijn graphs oﬀer clear beneﬁts in terms of expected
capacity and routing distances (delay) over the existing ap-
proaches.
There exists, however, one drawback of ﬁxed-degree graphs
based on the static butterﬂy and de Bruijn graphs. In both
cases, edge load distribution is not uniform and results in
some edges carrying more load (on average) than others. In
addition, de Bruijn graphs demonstrate non-uniform node
load distribution. This is a well-studied area in intercon-
nection networks and there are many improvements to the
routing protocols that can distribute the load in de Bruijn
and butterﬂy networks more evenly [18], [38], [42]. We leave
exploration of this direction for future work.
Next, we investigate clustering and then resilience features
of de Bruijn graphs before addressing their practical use in
peer-to-peer networks.
5. CLUSTERING AND EXPANSION
Following signiﬁcant research eﬀort to model the structure
of the current Internet, it was discovered that many of the
existing topology generators did not accurately match the
“small-world” (clustering) properties of the Internet graph
[3], [4]. Clustering is a very interesting concept that is found
in many natural phenomena and that determines how tightly
neighbors of any given node link to each other. In what fol-
lows, we examine clustering in Chord, CAN, and de Bruijn
graphs, study graph-theoretic semantics behind the cluster-
ing coeﬃcient, and show why metrics related to clustering
are important concepts for peer-to-peer systems.
Given graph G = (V, E), node v ∈ V , and its neighbor-
hood Γ(v) = {u: (v,u) ∈ E}, clustering coeﬃcient γ(v) is
deﬁned as the ratio of the number of links L(Γ(v)) that are
entirely contained in Γ(v) to the maximum possible number
of such links (if the graph is undirected, each link in L(Γ(v))
is counted twice):
γ(v) =
L(Γ(v))
|Γ(v)|(|Γ(v)| − 1)
.
(10)
Graph clustering γ(G) is the average of γ(v) for all ver-
tices v with degree at least 2. The main questions that we
study in this section are: what exactly does clustering mean
and how does it aﬀect the properties desirable in peer-to-peer
networks?
5.1 Clustering Coefﬁcients
We ﬁrst present the values of clustering coeﬃcients of all
three graphs (for proofs, see [24]) and then explain the mean-
ing of our results.
Lemma 7. Chord’s clustering coeﬃcient is
log2 N .
Lemma 8. De Bruijn’s clustering coeﬃcient is k−1
N .
1
Notice that de Bruijn’s γ(G) decays to zero much quicker
than Chord’s conﬁrming our earlier conjecture based on the
distribution of shortest paths in section 4. The derivation
of γ(G) for CAN is much simpler as one can easily no-
tice that none of the nodes in any neighborhood link to
each other. Hence, CAN’s γ(G) is zero. This is somewhat
counter-intuitive since CAN’s number of new neighbors be-
comes saturated at D
2 just as in Chord and therefore its
clustering properties should be similar to Chord’s. We next
examine the reasons behind this phenomenon and generalize
clustering to become a global metric.
5.2 Cycles
There are two ways to better understand what clustering
means and assess its importance for peer-to-peer networks.
The ﬁrst insight is based on cycles. Given a k-regular undi-
rected graph G, it is easy to notice that the number of 3-
cycles per node determines the clustering coeﬃcient of the
graph. Recall that an n-cycle is a path that starts and ends
in the same node and contains exactly n edges2. Hence, any
3-cycle must involve two direct neighbors of node v, which
results in clustering.
Since one goal in peer-to-peer networks is to reach as
many nodes as possible within a certain number of hops,
cycles that lead back to the original node where the request
started are not very helpful. Another goal of peer-to-peer
networks is to provide a fault-resilient environment where
a simultaneous collapse of several nodes does not separate
the graph into disjoint components. Short cycles mean that
paths from any node x through diﬀerent neighbors leading
to any destination y must overlap with each other. This
is not desirable since multiple parallel paths to y may be
compromised when nodes in the neighborhood fail. This is
shown in Figure 4 (left) where failure of node 1 leaves x with
no path leading outside of its neighborhood. In fact, when
node 1 fails, nodes 2 and 3 are also disconnected from the
rest of the graph since all of their outgoing (as well incom-
ing) edges are locally clustered.
Now we come back to the issue of why CAN has zero clus-
tering, but identical shortest-path properties to those found
in Chord. The absence of 3-cycles in CAN is explained by
2Usually, these paths are required to be edge and/or node
disjoint, but this always holds for 3-cycles.
1 
3 
2 
x 
Γ(x) 
1 
x 
2 
3 
4 
Γ(x) 
5 
Figure 4: High clustering leads to weak connections
outside a neighborhood (left). A more generic deﬁ-
nition of clustering (right).
the fact that it has no odd cycles whatsoever, but it does
have plenty of even cycles. In fact, the number of 4-cycles
in CAN is roughly the same as in undirected Chord with