infectMap[p] = tmp
tmp[i] = i 
tmp := map[int]int{}
else { 
---
## Page 899
的值可能是由几种情况构成的。一旦和与S 相等以后，之后比S 多出来的情况会越来越多(因为在不断
这道题也是滑动窗口的题目。不断的加入右边的值，直到总和等于 S。[ij] 区间内的和可以等于[0,]的
解题思路
给定一个数组，数组里面的元素只有0和1两种。问这个数组有多少个和为 S 的子数组。
题目大意
Note:
Example 1: 
In an array A of Os and 1s, how many non-empty subarrays have sum S?
题目
930. Binary Subarrays With Sum
对)。这道题的做法就是不断的累加，如果遇到比 S 多的情况，多出来的值就在freq 中查表，看多出来
为1有两种组合方法，（可能是1和1，0 或者0，1，这道题只管组合总数，没要求输出具体的组合
和减去[O,i-1] 的和。在 freq 中不断的记下能使得和为 sum 的组合方法数，
● A[i] is either O or 1.
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
The 4 subarrays are bolded below:
Explanation:
output:4
Input: A = [1,0,1,0,1], S = 2
0 = 0 { 
reg[sum]++
sum +=v
res += freq[t]
//总和有多余的，需要减去t，除去的方法有freq［t］ 种
---
## Page 901
代码
解题思路
提示：
会被计算在内，包括当前（指t 时刻）的 ping。保证每次对 ping 的调用都使用比之前更大的t 值。
的某个时间。返回从 3000 毫秒前到现在的 ping 数。任何处于[t-3000,t] 时间范围之内的 ping 都将 
写一个 RecentCounter 类来计算最近的请求。它只有一个方法：ping(int t)，其中t 代表以毫秒为单位
题目大意
·这一题比较简单，ping（）方法用二分搜索即可。
>= t-3000 })
func (this *RecentCounter) Ping(t int) int {
type Recentcounter struct {
·要求设计一个类，可以用 ping(t）的方法，计算[t-3000,t]区间内的 ping 数。t是毫秒。
·每次调用 ping 都有 1 A[i+1]
●如果 S[i] =="I"，那么 A[i]  A[i+1]
●If s[i] == "I",then A[i] A[i+1]，要求找到满足条件的任意组合。
"III"
---
## Page 903
Example 2: 
Example 1: 
have been the result of a sequence of push and pop operations on an initially empty stack.
 Given two sequences pushed and popped with distinct values, return true if and only if this could 
题目
946. Validate Stack Sequences
代码
push(5)，pop(）-> 5，pop(） -> 3,pop(）-> 2，pop(）->1 
push(1)， push(2),push(3)，push(4)，pop() -> 4,
output: true 
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
func distringMatch(S string) []int {
package leetcode 
return result 
result[index] =  minNum 
for -, ch := range S {
result, maxNum, minNum, index := make([]int, len(S)+l),len(S), O, 0 
if ch =='I' { 
index++
 maxNum--
result[index] =  maxNum
else {
minNum++
result[index] = minNum
---
## Page 904
Column
947. Most Stones Removed with Same Row or
代码
到了就 pop，直到遍历完 pop 数组，最终如果遍历完了 pop 数组，就代表清空了整个栈了。
这一题也是靠栈操作的题目，按照 push 数组的顺序先把压栈，然后再依次在 pop 里面找栈顶元素，找
解题思路
的顺序操作以后，最终能否把栈清空？
给2个数组，
题目大意
Note:
func validateStacksequences(pushed []int, popped []int) bool {
4. pushed and popped have distinct values.
3. pushed is a permutation of popped. 
2. 0    0 =i (es)ua o
fmt.Printf("stack = %v j = %v\n", stack, j) 
stack = append(stack, x)
stack = stack[o : len(stack)-1]
j++
一个数组里面代表的是 push 的顺序，另一个数组里面代表的是 pop 的顺序。问按照这样
---
## Page 905
解题思路
操作？
move 操作将会移除与网格上的某一块石头共享一列或一行的一块石头。我们最多能执行多少次 move
在二维平面上，
题目大意
Note:
Example 3: 
Example 2: 
 Example 1: 
What is the largest possible number of moves we can make?
grid.
have at most one stone.
On a 2D plane, we place stones at some integer coordinate points. Each coordinate point may 
题
●0= res 
flag = true 
 res = hour*60 + min
9
3
5
---
## Page 909
解题思路
返回图中最大连通组件的大小。
只有当 A[i] 和 A[j] 共用一个大于 1 的公因数时，A[i] 和 Aj] 之间才有一条边。
有 A.length 个节点，按从 A[O] 到 A[A.length - 1] 标记; 
给定一个由不同正整数的组成的非空数组A，考虑下面的图
题目大意
Note:
Example 3:
提示：
·给出一个数组，数组中的元素如果每两个元素有公约数，那么这两个元素可以算有关系。所有有关
2. 1<=A[i]<= 100000 
1. 1 <= A.length <= 20000
2. 1 <= A[i] <= 100000
1. 1 <= A.length <= 20000
Output:8
Input: [2,3,6,7,4,12,21,39]
系的数可以放在一个集合里，问这个数组里面有关系的元素组成的集合里面最多有多少个元素。
2
3
9
6
2
9
3
---
## Page 910
代码
//解法一 并查集 UnionFind 
package leetcode
·这一题读完题直觉就是用并查集来解题。首先可以用暴力的解法尝试。用2层循环，两两比较有
func largestComponentsizel(A []int) int {
//解法二UnionFindCount
func largestComponentsize(A []int) int { 
import （
uf, factorMap := template.UnionFindcount{}, map[int]int{}
return res
for -, v := range A { 
uf.Init(maxElement + 1)
for -, v := range A { 
maxElement, uf, countMap, res := O, template.UnionFind{}, map[int]int{}, 
"github.com/halfrost/LeetCode-Go/template"
for i， v := range A {
uf.Init(len(A))
for.
历所有的集合，找到最多元素的集合，输出它包含的元素值。
3，15= 3*5，那么把6和2，6和3都union(），15和3，15和5都union(），最终遍
316.66666，这个规模的数不大。所以把每个数小于根号自己的因子都找出来，例如6=2＊
会超时，1<=A.1ength<= 20000。注意到1<= A[i]<=100000，开根号以后最后才
没有公约数，如果有公约数就 union（）到一起。提交以后出现TLE，其实看一下数据规模就知道
 maxElement = max(maxElement, v)
for k := 2; k*k <= v; k++ {
res = max(res, countMap[uf.Find(v)])
countMap[uf.Find(v)]++ 
for k := 2; k*k <= v; k++ {
if v%k == 0 { 
if v%k == 0 { 
-, v := range A { 
}else {
if -， ok := factorMap[k]; !ok { 
uf.union(v,v/k)
uf.Union(v,k)