a
L
[ctrDEC 1]
[^a\n]
\n
+
\n
M
[^\n]
[ctrRST 2]
[ctrSET 2,150,[ALT 7]]
[^\n]
\n
X
\n
b
Y
Z
[ctrSET 1,200,[ALT 3]]
[ctrDEC 2]
[ctrRST 1]
[ctrRST 2]
I,I
[^\n]
=
KX
A,A
\n
[^ab\n]
\n
MX
a
A,A
b
[^\n]
I,I
KZ
LY
\n
\n
[^\n]
ĺ
[^\n]
KX
[ctrSET 1,200,[ALT 3]]
[ctrRST 1]
\n
MX
a
b
[^\n]
KZ
LY
\n
[^ab\n]
\n
\n
[^\n]
[^b\n]
\n
[ctrDEC 2]
Figure 4: The counter minimization process applied to automata for signatures /\na[^\n]{200}/ and
/\nb[^\n]{150}/. The optimization results in the elimination of one of the original counters.
[^\n]
[ctrSET 1,150,[ALT 7]]
[ctrDEC 1]
[ctrDEC 2]
[ctrDEC 1]
[ctrSET 2,150,[ALT 7]]
[ctrDEC 1]
location without interference, leading to reduced memory
and smaller programs. This scenario is similar to the regis-
ter assignment problem faced by a typical compiler: multiple
variables can share the same register as long as they cannot
be simultaneously “live.”
Thus, the goal of this optimization is to automatically
identify pairs of variables that are compatible at each state
in an XFA. We achieve this goal through a two-step process:
a dataﬂow analysis ﬁrst determines the states at which a
variable is active, and a compatibility analysis uses this in-
formation to iteratively ﬁnd and combine independent vari-
ables. These techniques apply to many kinds of state vari-
ables, although for presentation purposes we focus on a fairly
simple decrementing counter. To aid the discussion, we de-
pict instructions in their actual format, which we describe
brieﬂy. Instructions have the form [instr id,args]. Ini-
tialization instructions set an initial value and also point to
the instructions to be executed when the counter reaches 0.
Consequently, decrement and test instructions are combined
into a single instruction that decrements a counter and com-
pares it to 0, executing the previously supplied instructions if
so. For example, the instruction [ctrSET 1,200,[ALT 3]]
initializes counter 1 to 200. When the counter reaches 0, the
instruction [ALT 3] signals that signature 3 has matched.
We illustrate with the running example in Figure 4. The
leftmost XFAs correspond to expressions /\na[^\n]{200}/
and /\nb[^\n]{150}/ that are combined to give the XFA in
the middle of Figure 4 (the “clouds” belong to a later stage).
In the end, optimization ﬁnds that the two counters in the
combined automaton are independent and reduces them to
one counter.
5.2.1 Dataﬂow Analysis
As informally described in Section 3, counters are initially
inactive with status changes occurring whenever initializa-
tion or reset instructions are executed. The goal of this step
is to determine the activity of each counter at each state
in the combined automaton, even for those states without
instructions. This requires a precise deﬁnition of active and
inactive counters, given as follows:
Definition 2. Let Q be the set of states containing a set
operation for counter C. Then, C is active at state S if there
is at least one sequence of input symbols forming a path of
states from a state in Q to S in which no state in the path
contains a reset operation for C. Otherwise C is inactive.
Figure 5: The value lattice that orders abstract
counter facts. Inactive is the initial value.
In other words, C is active at S if and only if there exists at
least one input sequence ending at S containing a set but
no subsequent reset for C. The term activity refers to the
active or inactive status of a counter. Operations applied to
an inactive counter are eﬀectively a no-op.
To calculate activity, we deﬁne a dataﬂow analysis that ﬁts
into the classic monotone dataﬂow framework [24]. Static
dataﬂow analyses comprise techniques used at compile time
to produce correct but approximate facts about behavior
that arises dynamically at runtime. During execution, dif-
ferent input may yield diﬀerent behavior depending on that
input; static techniques must therefore produce correct (if
approximate) results for all possible inputs. Dataﬂow analy-
ses and their applicability to program optimization are well-
studied and at the foundation of many common compiler
optimizations including register allocation, constant propa-
gation, and partial subexpression elimination [24].
The ﬁrst step in an analysis is to identify the abstract val-
ues, or facts, that the counter can assume and order them
in a lattice structure. Here, the values active and inactive
are arranged in the lattice given Figure 5. Second, a di-
rected graph with a designated start node is supplied by the
XFA itself. Third, ﬂow functions deﬁne the eﬀects that in-
structions have on each possible value in the lattice. For a
counter C with set, reset, and decr-and-test instructions,
the ﬂow functions are deﬁned as follows:
fdecr−and−test(C) → C
fpreserve(C)
→ C
fset(C) → Active
freset(C) → Inactive
For set and reset, C becomes active and inactive, respec-
tively. decr-and-test does not change C’s value, and pre-
serve is the identity function used when there is no instruc-
tion at a state.
These components deﬁne a standard forward-ﬂow “may
have” analysis. The analysis algorithm propagates facts
for each counter among the states, applying ﬂow functions
whenever they are encountered. It terminates when the facts
have converged to a single value per state. Upon completion,
a counter is marked as inactive at a state S if and only if C
Inactive
r,d,p set
set
r,d,p
set
–
set
reset
–
set
–
decr
pres
–
reset
reset
set
reset
set
–
–
t r,d,p
c
set
a
n
reset
I
e
set
v
i
decr
t
c
A
pres
Active
set decr pres
set
pres
–
set
–
–
–
–
–
–
–
decr
pres
decr
–
–
–
–
Figure 6: Counter compatibility matrix, specifying
which counter operations are compatible at a state
and the surviving operation.
FIND EQUIVALENT(XFA M):
do
foreach pair of counters (c1,c2) do
compatible = true
foreach state s ∈ M.states do
if areCompat(s, c1, c2) == FALSE then
compatible = false ; break
if compatible then
foreach state s ∈ M.states do
op = getReduced(s, ci, cj )
combine counters ci and cj , keeping operation op
break; // fall to outer do...while loop
1
2
3
4
5
6
7
8
9
10
11
12
while compatible = true
Algorithm 3. Counter compatibility. Two coun-
ters are equivalent and can be reduced to one if
they are compatible at each state.
is deﬁnitely inactive on all paths leading to S. Conversely,
if there is any path to S in which C may be active, then C is
active at S. Hence, the results are correct but approximate.
In Figure 4, the clouds in the middle XFA show the activ-
ity of each counter at each state prior to instruction execu-
tion as computed by the analysis. The counters are inactive
at state MX because all paths to MX pass through LY, which
resets both counters. Similarly, the counters are active in KX
because there is a path from MX that sets counter 1 (making
it active) and a path from KZ that sets counter 2.
5.2.2 Compatibility Analysis
Two counters can be reduced to one if they are compatible
at all states in the automaton. At a single state, two coun-
ters are compatible if their operations and activity status
can be combined without changing the semantics of either
counter. We determine compatibility by computing the cross
product of operations and activity status and pairwise com-
paring each element. The compatibility matrix in Figure 6
contains this information for the simple counters in this ex-
ample. As with the dataﬂow analysis, activity at state S
refers to the activity of the counter upon entrance to S,
prior to instruction execution.
In the matrix, the preserve column handles the cases in
which a counter has no instruction at the state in question.
r,d,p coalesces the entries for the reset, decrement, and pre-
serve operations, which have identical behavior for inactive
counters. If two operations are compatible, the correspond-
ing entry holds the operation that survives if the counters
are combined. A dash indicates that operations are not com-
patible. Operations to active counters are incompatible with
most other operations, but inactive operations are mostly
compatible. The exception is an inactive set, which tran-
sitions a counter to the active state and is therefore mostly
incompatible. The lower half of the rightmost column spec-
iﬁes the cases in which a state has instructions for only one
bitSET 1
bitSET 2
bitTST 1, [alert …]
bitTST 2, [alert …]
y
z
[^xyz]
y
x
z
Figure 7: Combined automata for /x.*y/ and /x.*z/.
A stronger dataﬂow analysis can eliminate a bit.
counter, but the dataﬂow analysis determines that a second
counter is also active. Combining the two counters and us-
ing the operation of the counter present at the state could
change semantics of the second active counter, so the coun-
ters are in fact not compatible.
Algorithm 3 shows the process for identifying and reduc-
ing equivalent counters. For each pair, the algorithm cycles
through all states and compares the pair using the areCom-
pat function, which extracts activity status and operations
for c1 and c2 at state s and invokes the counter compati-
bility matrix. Lines 8-10 perform the actual reduction for
a pair of counters that are compatible at all states. When
a reduction results in the elimination of one or more in-
structions at a state, the operation that remains is returned
from the compatibility matrix via a call to the getReduced
function. Note that compatibility is not transitive; when a
pair of counters has been reduced, the resulting compatibil-
ity between this new counter and other counters must be
re-established. This is satisﬁed by Line 11, which causes the
algorithm to fall out to the outermost loop after a reduction
has been performed. In the running example, the rightmost
automaton shows the results after compatibility analysis has
determined that counters 1 and 2 are compatible. All refer-
ences to counter 2 are replaced by a reference to counter 1,
and irrelevant reset and decr operations are removed.
This optimization completes quickly, despite the O(n3)
runtime of the dataﬂow and compatibility analysis. With
one exception (which contained 172 bits) the procedure com-
pletes in less than one minute per test set. Stronger dataﬂow
analyses can be used to identify further reduction opportuni-
ties that this analysis misses. For example, Figure 7 shows
a combined XFA for expressions /x.*y/ and /x.*z/ that
share a common preﬁx and use one bit each. A dataﬂow
analysis that uses more than just activity could determine
that a single bit is suﬃcient for both of these expressions.
5.3 Code Motion and Instruction Merging
Many expressions yield automata that set or reset a single
bit. When they are combined, individual states may contain
many such bit assignment instructions. However, the cost of
updating a single bit is the same as that for an entire word;
by coalescing bit operations whose bits fall within the same
word we can shorten the number of instructions in programs
and simultaneously reduce the number of writes to memory.
This optimization operates on each state independently.
The basic mechanism is to move bit assignment instruc-
tions so that those belonging to the same word are adjacent.
Such sequences are then replaced by a composite one-word
mask and an instruction that applies the mask when exe-
cuted. There are subtleties, though. First, there are data
hazards [14]: bit assignment instructions cannot be moved
across other instructions that use or manipulate the bit val-
ues without changing semantics. As an example, in the se-
quence [bitSET 2],[bitTST 4,([alert,42])],[bitRST 4],
Rule set
Snort FTP
optimized
Snort SMTP
optimized
Snort HTTP
optimized
Cisco FTP
optimized
Cisco SMTP
optimized
Cisco HTTP
optimized
Num
Sigs
DFA
72 >3.1M
56 >3.1M
863 >3.1M 15,266
38 >3.1M
102 >3.1M
527
3,879
551 >3.1M 11,982
# States
Variables
2,415
769
XFA # bits # ctrs max
50
5
37
21
31
11
19
4
10
7
17
7
8
8
11
6
172
171
11
10
8
8
13
12
46
2/2
31
4/6
15
0/6
12
0/3
3
0/2
10
0/2
Instrs per state Aux memory (bytes)
program
1336K
44K
2211K
114K
7445K
1008K
271K
16K
806K
76K
4907K
515K
variables
93
9
64
21
52
34
26
8
7
5
22
5
avg
38.67
0.66
21.48
0.69
15.91
1.03
12.35
0.33
5.20
0.28
10.48
0.42
Table 1: Combined automata for several protocols, before and after optimization.
No-Opt
Opt 1
Opt 1
Opt 2
Opt 2
Opt 3
Rule set
Snort FTP
Snort SMTP
Snort HTTP
Cisco FTP
Cisco SMTP
Cisco HTTP
ctrs
46
31
15
12
3
10
Inst/