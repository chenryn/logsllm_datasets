100
10-1
10-2
10-3
10-4
100
0.08
0.06
F
M
P
0.04
0.02
0
0
actual
estimated
0.06
F
M
P
0.04
0.02
3
4
0
0
1
2
seconds
(c) Faulds fT
actual
estimated
101
rank of OS
102
(b) Hershel+ α
actual
estimated
3
4
1
2
seconds
(d) Faulds fΔ
Figure 5: Results in D4.
user features. The database was constructed to ensure that signa-
tures were sufficiently unique under delay distortion, but packet
loss and user modifications were not taken into account. As a re-
sult, the database contains a number of entries that would be diffi-
cult to distinguish under the types of heavy distortion considered
in this paper. Nevertheless, these tests should indicate how well
Faulds scales to larger databases and whether its recovery of the
unknown parameters (α, θ) is affected by an increased uncertainty
during the match.
We set popularity α to the Zipf distribution with shape param-
eter 1.2 and continue using m = 218 observations, which gives us
64K samples from the most common OS and just 49 from the least.
We borrow the delay from case S13 (i.e., reverse-exponential T with
mean 1.5 sec, Erlang(2) Δ with mean 0.5) and packet loss from S23
(i.e., reverse-binomial). Finally, we use RAND with stay probability
ϕv = 0.8.
= 0.70. To make sense out of α ∞
The first iteration of Faulds produces a respectable ρ1 = 0.42.
This is gradually improved with each step, until convergence to
a more impressive ρ∞
, we sort
all signatures in rank order from the most popular to the least and
plot the result in Figure 5(a). There is a strong match in the top-100,
while the random noise in the tail is explained by the scarcity of
these OSes in the observation (i.e., below 250 samples each). For
comparison, the outcome of Hershel+ is displayed in part (b) of
the figure. To complete the big picture, subfigures (c)-(d) show esti-
mates of fT and fΔ. Despite an overall 30% classification mismatch,
these PMFs are no worse than previously observed in Figure 4,
which indicates that incorrect decisions overwhelmingly went to
signatures with similar RTO vectors as the true OS.
Instead of scrutinizing 21 different loss PMFs, suppose we com-
pute a single metric – the fraction of packets dropped within the
entire observation x(cid:3)
, conditioned on at least one packet surviving.
F
M
P
0.25
0.2
0.15
0.1
0.05
0
30 90 150 210 270 330 390 450
milliseconds
(a) fT
F
M
P
0.1
0.08
0.06
0.04
0.02
0
10
20
milliseconds
(b) fΔ
30
Figure 6: Internet delay distributions.
To this end, define during step t
Lt
k =
(cid:2)qt
k
((cid:2))
(27)
k−1
(cid:2)=1
to be the average number of lost replies in signatures with k pack-
ets. Then, taking an estimated ratio of all dropped packets to the
total transmitted yields the expected loss rate
n
n
i =1
i =1
α t
i Lt
|di |
α t
i |di |
pt
l oss =
.
(28)
Recall that the simulation allowed loss to affect at most k − 1
packets in OSes with |di | = k. Therefore, its ground-truth packet
loss should represent the same quantity as (28). Traces show that
70.1% of the packets were dropped, which matches quite well against
p∞
l oss = 69.3%.
Since ϕv = 0.8 was a constant in this simulation, it makes
sense to compare it against feature-modification estimates aver-
aged across all fields and all OSes, i.e.,
b +1
b +1
n
E[ϕt
v ] =
1
b + 1
ϕt
v =
1
b + 1
αi ϕt
iv .
(29)
i =1
v =1
Results show that E[ϕ∞
v =1
v ] = 0.802, which is very close to the
actual value. While there is some variation in individual ϕiv , it is
of little concern due to the small number of samples seen by Faulds
from these OSes. For a discussion of unknown devices and their
impact on EM, see [43].
7 INTERNET MEASUREMENT
7.1 Overview
On December 14, 2016, we conducted a port-80 SYN scan of all
BGP-reachable IPv4 addresses on the Internet. Of the 2.8B IPs con-
tacted, we gathered responses from 67.6M hosts. In large-scale clas-
sification, such as the one attempted here, Faulds produces a huge
volume of information in the form of various PMFs and estimates.
We start with basic sanity checks of the estimated distortion θ and
then delve into classification result α.
7.2 Network Distortion
Figure 6(a) shows the recovered distribution fT using bin size 30
ms. Delays below 60 ms (29%) represent unloaded servers in close
proximity to the scanner, most likely within the continental US.
Session D5:  Network SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA9790.8
0.6
F
M
P
0.4
0.2
0
0.6
0.4
0.2
0
F
M
P
F
M
P
F
M
P
1
0.8
0.6
0.4
0.2
0
1
0.8
0.6
0.4
0.2
0
estimated
binomial fit
2
estimated
binomial fit
4
0
1
packets lost
(a) q3 (loss 8.2%)
0
2
3
1
packets lost
(c) q5 (loss 12.6%)
estimated
binomial fit
3
estimated
binomial fit
100
16384*
1440*
100
1460*
28960*
1400
1460
F
M
P
10-1
14480
17898
WIN
MSS
10-2
26847
WIN
MSS
(a) Dell printer (976K)
(b) Ubuntu/Redhat/CentOS (21M)
65535*
1460*
100
14240
1436
F
M
P
10-1
10-2
100
F 16384
M
P
10-1
17376
4
5
10-2
16416
32768
WIN
1380
14401452
MSS
F
M
P
10-1
28960
10-2
17896*
WIN
1422
8960*
MSS
(c) Mac OS X Server (67K)
(d) CentOS (161K)
0
1
2
packets lost
(b) q4 (loss 0.9%)
0
1
2
3
packets lost
(d) q6 (loss 0.3%)
Figure 7: Internet packet-loss PMFs.
Figure 8: Internet distributions πi 1 and πi 5 (default values
have an asterisk).
i =1
k =
n
Those in the 120 − 200 ms range (40%) indicate targets whose RTTs
are consistent with destinations in Europe and Asia. The remaining
cases covers longer paths, OS scheduling delays, non-trivial CPU
load on the server, and involvement of various backend databases
to set up the connection. Overall, we obtain E[Tj ] = 148 ms, 80%
of the samples below 200 ms, and 99.2% below 450 ms. Figure 6(b)
plots the distribution of one-way delay fΔ, in which 92% of the
mass concentrates below 30 ms and 97% below 100 ms. The average
queuing delay E[Δjr ] = 15 ms also sounds quite reasonable.
To examine packet loss, define ηt
= 0.31, 80 stacks), three (η∞
3
α t
i 1 |di |=k to be the
estimated fraction of observations that use an OS with k packets.
The top values of k are four (η∞
= 0.42, 112 stacks in Plata data-
4
base D4), six (η∞
= 0.07, 72 stacks),
6
and five (η∞
= 0.04, 54 stacks). Figure 7 plots the recovered loss
5
PMFs for these values of k, each fitted with an iid binomial model
and accompanied by the average loss rate L∞
/k from (27). First, it
k
is interesting that the loss rate is heterogeneous, ranging from 0.3%
in q6 to 12.6% in q5. This phenomenon may be inherent to the sig-
natures that map to each k (e.g., certain printers cut the SYN-ACK
sequence when their tiny SYN backlog queue overflows [41]), the
load on the corresponding OSes, and host location on the Internet,
all of which suggests there is an extra benefit to estimating qk in-
dependently for different k. Second, while in a few of the plots the
binomial model shows a reasonable fit, this does not universally
hold. Finally, computing (28) for the Internet scan yields an aver-
age loss rate of 3.3% across all observations. This is consistent with
3.8% found in a Google study of SYN-ACK retransmission rates [9].
highlight several interesting cases, focusing on the two most volatile
fields – Win and MSS – and limiting all PMFs to values above the
1% likelihood. Since MSS sometimes depends on the MTU of the
underlying data-link layer and/or tunneling protocol (e.g., IPv6),
this field may experience fluctuation even if the OS does not allow
explicit means for changing this value.
We expected devices with firmware restrictions that prevent
user access to the configuration of SYN-ACK parameters to ex-
hibit high ϕiv . One example is shown in Figure 8(a) for a popular
Dell printer. Among 976K occurrences on the Internet, this device
keeps the default window with probability 1. Intuition also sug-
gests that general-purposes OSes are more susceptible to modifica-
tion and/or existence of alternatively patched versions. One exam-
ple is 21M hosts with Ubuntu Linux, where Figure 8(b) shows that
Faulds discovers 31% of the cases with window size exactly half of
the default (i.e., 14,480 instead of 28,960). A more dispersed case
is Mac OS X Server in part (c), which exhibits noticeable variation
in both Win and MSS. Its default values remain with probability
73% and 89%, respectively. Finally, in subfigure (d), CentOS (enter-
prise Linux) has its original combination (17,896, 8,960) occurring
in only 1% of the cases. We conjecture that the Plata database [41],
which was constructed from production devices in a large campus
network, captured a non-standard version of this stack with jumbo
Ethernet frames enabled. Since this is an inherent property of any