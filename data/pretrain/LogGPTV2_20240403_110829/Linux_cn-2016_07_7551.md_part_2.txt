*生成 Nginx 的 SSL 证书和密钥*
6、 通过输入以下命令使用一个强 DH 加密算法，这会修改之前的配置文件 `ssl_dhparam` 所配置的文件。
```
$ sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
```
![](/data/attachment/album/201607/07/230047uf5nr0ns5rbq07sf.png)
*创建 Diffie-Hellman 密钥*
7、 当 `Diffie-Hellman` 密钥生成之后，验证 Nginx 的配置文件是否正确、能否被 Nginx 网络服务程序应用。然后运行以下命令重启守护进程来观察有什么变化。
```
$ sudo nginx -t
$ sudo systemctl restart nginx.service
```
![](/data/attachment/album/201607/07/230047kymjv2d2hytk71ud.png)
*检查 Nginx 的配置*
8、 键入下面的命令来测试 Nginx 使用的是 HTTP/2.0 协议。看到协议中有 `h2` 的话，表明 Nginx 已经成功配置使用 HTTP/2.0 协议。所有最新的浏览器默认都能够支持这个协议。
```
$ openssl s_client -connect localhost:443 -nextprotoneg ''
```
![](/data/attachment/album/201607/07/230048kr9qppbndb3tnccz.png)
*测试 Nginx HTTP 2.0 协议*
### 第 3 步：安装 PHP 7 解释器
通过 FastCGI 进程管理程序的协助，Nginx 能够使用 PHP 动态语言解释器生成动态网络内容。FastCGI 能够从 Ubuntu 官方仓库中安装 php-fpm 二进制包来获取。
9、 在你的服务器控制台里输入下面的命令来获取 PHP7.0 和扩展包，这能够让 PHP 与 Nginx 网络服务进程通信。
```
$ sudo apt install php7.0 php7.0-fpm 
```
![](/data/attachment/album/201607/07/230048v0200z5c3ljzfpy3.png)
*安装 PHP 7 以及 PHP-FPM*
10、 当 PHP7.0 解释器安装成功后，输入以下命令启动或者检查 php7.0-fpm 守护进程：
```
$ sudo systemctl start php7.0-fpm
$ sudo systemctl status php7.0-fpm
```
![](/data/attachment/album/201607/07/230049yzd006jwwpmzbhiz.png)
*开启、验证 php-fpm 服务*
11、 当前的 Nginx 配置文件已经配置了使用 PHP FPM 来提供动态内容。
下面给出的这部分服务器配置让 Nginx 能够使用 PHP 解释器，所以不需要对 Nginx 配置文件作别的修改。
```
location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/run/php/php7.0-fpm.sock;
        }
```
下面是的截图是 Nginx 默认配置文件的内容。你可能需要对其中的代码进行修改或者取消注释。
![](/data/attachment/album/201607/07/230049k8evira3qj233aci.png)
*启用 PHP FastCGI*
12、 要测试启用了 PHP-FPM 的 Nginx 服务器，用下面的命令创建一个 PHP 测试配置文件 `info.php`。接着用 `http://IP_or domain/info.php` 这个网址来查看配置。
```
$ sudo su -c 'echo "" |tee /var/www/html/info.php'
```
![](/data/attachment/album/201607/07/230050u4cm9l4hd2l7kk9b.png)
*创建 PHP Info 文件*
![](/data/attachment/album/201607/07/230050zsezzees3zesfvss.png)
*检查 PHP FastCGI 的信息*
检查服务器是否宣告支持 HTTP/2.0 协议，定位到 PHP 变量区域中的 `$_SERVER[‘SERVER_PROTOCOL’]` 就像下面这张截图一样。
![](/data/attachment/album/201607/07/230051t52vgeynw22pngwp.png)
*检查 HTTP2.0 协议信息*
13、 为了安装其它的 PHP7.0 模块，使用 `apt search php7.0` 命令查找 php 的模块然后安装。
如果你想要 [安装 WordPress](http://www.tecmint.com/install-wordpress-using-lamp-or-lemp-on-rhel-centos-fedora/) 或者别的 CMS，需要安装以下的 PHP 模块，这些模块迟早有用。
```
$ sudo apt install php7.0-mcrypt php7.0-mbstring
```
![](/data/attachment/album/201607/07/230052z14f9h84yk69f7xk.png)
*安装 PHP 7 模块*
14、 要注册这些额外的 PHP 模块，输入下面的命令重启 PHP-FPM 守护进程。
```
$ sudo systemctl restart php7.0-fpm.service
```
### 第 4 步：安装 MariaDB 数据库
15、 最后，我们需要 MariaDB 数据库来存储、管理网站数据，才算完成 LEMP 的搭建。
运行下面的命令安装 MariaDB 数据库管理系统，重启 PHP-FPM 服务以便使用 MySQL 模块与数据库通信。
```
$ sudo apt install mariadb-server mariadb-client php7.0-mysql
$ sudo systemctl restart php7.0-fpm.service
```
![](/data/attachment/album/201607/07/230052tjeltllbjzbjfpzl.png)
*安装 MariaDB*
16、 为了安全加固 MariaDB，运行来自 Ubuntu 软件仓库中的二进制包提供的安全脚本，这会询问你设置一个 root 密码，移除匿名用户，禁用 root 用户远程登录，移除测试数据库。
输入下面的命令运行脚本，并且确认所有的选择。参照下面的截图。
```
$ sudo mysql_secure_installation
```
![](/data/attachment/album/201607/07/230053tcessy7stibb1bzf.png)
*MariaDB 的安全安装*
17、 配置 MariaDB 以便普通用户能够不使用系统的 sudo 权限来访问数据库。用 root 用户权限打开 MySQL 命令行界面，运行下面的命令：
```
$ sudo mysql 
MariaDB> use mysql;
MariaDB> update user set plugin=’‘ where User=’root’;
MariaDB> flush privileges;
MariaDB> exit
```
![](/data/attachment/album/201607/07/230054vu9jwx9mj3qemj9k.png)
*MariaDB 的用户权限*
最后通过执行以下命令登录到 MariaDB 数据库，就可以不需要 root 权限而执行任意数据库内的命令：
```
$ mysql -u root -p -e 'show databases'
```
![](/data/attachment/album/201607/07/230055yzvu8ava8d9snaaa.png)
*查看 MariaDB 数据库*
好了！现在你拥有了配置在 **Ubuntu 16.04** 服务器上的 **LEMP** 环境，你能够部署能够与数据库交互的复杂动态网络应用。
---
via: 
作者：[Matei Cezar](http://www.tecmint.com/author/cezarmatei/) 译者：[GitFuture](https://github.com/GitFuture) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出