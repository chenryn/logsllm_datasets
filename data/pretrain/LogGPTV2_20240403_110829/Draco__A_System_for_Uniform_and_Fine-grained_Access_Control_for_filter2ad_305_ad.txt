same time, it wants to allow its partners’ web domains to access the
location of the store for them to know where their products are being
seen. Furthermore, it wants to provide its partners the opportunity to
get the user’s age and gender. However, providing this information
might entail privacy concerns. Thus, the store wants to allow their
partner to access this information only if the user agrees, which will
not violate the user’s expectations and thus minimize the privacy risk.
Enforcing this complex interactions can be extremely challenging
with the current state of affairs on the Android platform, since it
might require implementing multiple WebViews with different levels
of exposure and duplicating method deﬁnitions. However, it becomes
much easier when Draco is used. Consider for example the following
Draconian policy rules:
1
2
3
4
mystore.com;trustlevel
partner.com;allowhtml5;permission
partner.com;allowjsinterface;MyInterface;
decision
partner.com;allowjsinterface;MyInterface;
decision
The ﬁrst rule allows mystore.com to access all exposed resources on
all channels. The second and third rule allow the trusted partner.com
domain (e.g., partner companies) to access the location through ei-
ther HTML5 APIs or exposed interfaces of the MyStore App. Finally,
the last rule allows partner.com to access the exposed functions that
provide the user’s age and gender only if the user agrees.
4.3 Draco Runtime System
Draco’s other major component is its runtime system, namely
the Draco Runtime System (DRS). A key aspect of the design of
DRS is to avoid any modiﬁcations in the Android OS to make DRS
easier to both deploy and update. In particular, DRS is built on
top of the WebView system app on Android. This requires making
modiﬁcations only in the Chromium source code [5], which is the
provider of the WebView implementation on the Android platform.
High-level architecture. Keeping our design goals in mind, we im-
plemented DRS in Chromium [5], which is a system library residing
in the Android WebView system app, providing the WebView im-
plementation to the Android apps. Figure 1 illustrates our design in
more detail. The app developer provides DPL rules to the WebView
programmatically through their Android app. DRS features a Policy
Manager class (i.e., PolicyManager), which parses the policy rules
and inserts them into a policy map data structure. We also imple-
mented a unit for decompiling the app and statically analyzing it
to determine the permissions necessary to successfully execute the
methods in exposed Java class methods and event handlers. This is
necessary because we allow the developer to assign subjects a set
of permissions they are allowed to use for each channel and do not
assume any cooperation other than entering policy rules. In particu-
lar, in the case of JavaScript interfaces and event handlers, we need
to know beforehand what permissions the requested method uses
in order to determine if the subject under investigation is granted
all of the permissions required by that method. DRS employs an
Information Unit which hosts and manages the two data structures
corresponding to policies (policy map) and the permissions used by
class methods and event handlers (permission map). During invoca-
tion on any of the three aforementioned channels, DRS intercepts
the invocation and checks if any one of the policy rules allows the
subject to execute or access the requested part of the channel, or
if the user needs to be prompted for a decision. If the request is
allowed according to the developer policies or by the user, DRS lets
the invocation go through, otherwise it gracefully blocks the request.
Note that it could be the case that the app itself runs web code
loaded from its local ﬁles. For example, the loadUrl() method can
be invoked with “ﬁle://” which loads a html ﬁle from the local
storage or with “javascript://” which invokes the inline JavasSript
code with no origin. Since the subject of this execution is the app, we
treat this as trusted. However, there could be cases where web code
can run with undeﬁned origin (e.g., by loading code with the eval
JavaScript function). Our system completely blocks such attempts.
Parsing module. Draco allows developers to enter policy rules
into the WebView without having to modify the source code of the
Android Open Source Project (AOSP). We considered extending
the Android Manifest ﬁle with policies (as was done in previous
work), as well as using annotation tags as policy rules on the exposed
Java code. However, both of these approaches require changes to be
made on the Android platform itself; the former requires changing
the parsing logic in the Package Manager, and the latter requires
changing the WebView APIs.
In our work, we exploit the existing loadUrl method in the Web-
View API, and piggy-back rules into the WebView. As we explained
before (see Section 2), the loadUrl method takes a URL string as an
input argument and loads this URL. It can also execute JavaScript
code if the given string starts with the “javascript:” tag. We extend
the functionality of loadUrl within the WebView system app, to
capture strings that start with the “policyrule:” tag which indicate
a Draconian policy rule for the WebView. DRS’s Policy Manager
class is implemented in the facade Java layer of Chromium, and is
responsible of parsing DPL rules and inserting them into the data
(value for that key) consists of the name of the allowed methods for
that interface. As for permission for the channel option, this vector
will be the name of the allowed permissions. The Permission map
is used for tracking the used permissions in a given class and its
methods for JS interfaces, and for tracking permissions used in event
handler methods. The list of permissions for these methods will be
retrieved from a permission ﬁle created by the aforementioned static
analysis unit.
Enforcement. Chromium works based on a multi-process architec-
ture (Figure 2). Each tab (called Renderer in Chromium jargon) in
the browser is a separate process and talks to the main browser pro-
cess through Chromium inter-process communication (IPC). Even
though WebView is based on Chromium, it does not inherit this
multi-process architecture. Instead, it keeps the same code structure
but adopts a single process architecture, due to various reasons in-
cluding the difﬁculty of creating multiple processes within an app
in Android, concern for memory usage in resource-limited envi-
ronments, synchronization requirements of Android Views, as well
as other graphics related issues. DRS policy enforcement is imple-
mented in the native part (C++) of the Browser component of the
Chromium code 2. This is because this is the point of invocation for
all of the channels and most of the necessary information to perform
access control already resides in this component.
• JavaScript interfaces. For the JavaScript interfaces, the origin in-
formation is not passed to the Browser component with the creation
of a bridge object. Hence, in the Renderer, we get the security origin
(as in same origin policy) of the calling frame and propagate this
information to the Browser. When the invocation happens, we know
the name of the class method the origin wants to execute, however,
we have no way of knowing the class name of the object this method
belongs to since C++ provides no way of retrieving the name of a
Java object’s class in run time. That is why, the retrieval of the class
name needs to be done in the Java facade layer in Chromium in order
to be communicated later to the native layer. This is done after the
call to addJavaScriptInterface (so that we do not have to change
this API method) and before the object moves to the native side (so
that we still have class name information). Given the channel name,
class name, method name and the web origin, the Policy Manager
is able to make an access control decision for this origin using the
aforementioned data structures to check if the required policies exist
for this domain to execute the method. The Policy Manager ﬁrst
checks if the origin has access to the given method of the class,
and if that is the case, it performs the permissions checks to see
if the permissions given to the origin would be a superset of the
permissions used by the requested method. If the origin passes both
checks, then it is allowed to perform the invocation of the requested
method. However, if the decision point set in the respective DPL
rule is set to “user”, then the user is prompted with the description
provided for this rule to make the access control decision.
• Event handlers. For the event handler channel, all the information
necessary for enforcement exists in the Browser component. Hence,
given the channel name, origin, and the name of the event handler
method, the Policy Manager can enforce the policy. The enforce-
ment logic is similar to that for JavaScript interfaces. The Policy
Manager ﬁrst checks if the origin is allowed to execute the event
handler method for a given JavaScript event. If so, it then performs
permission checks on the event handler to see if the origin is granted
the permissions to execute the handler. If that is the case, then the
origin is granted access to this event handler.
• HTML5 API. For this channel, DRS intercepts the entry point
of the onGeolocationShowPrompt callback for geolocation and the
onPermissionRequest callback for other HTML5 resources in the
Figure 1: Draco Runtime System (DRS) architecture.
structures we utilize for enforcement. This class uses the Java Native
Interface (JNI) to talk to its native “back end” that performs these
functionalities in C++. This structure makes it easier to communi-
cate the policies to the Chromium implementation that performs
most of its main functionalities in native code (C++).
App decompilation and static analysis unit. For the enforcement
of permission-based DPL rules that regulate the use of sensitive APIs
in the JS interface and event handler channels, we need to determine
the permissions used in a given class and its methods for JavaScript
interfaces, and permissions used in the event handler callback meth-
ods for the event handlers channel. Such a permission-based rule
might be expressed informally as follows: “Origin X can access a
method which makes sensitive API calls that require permissions
Y, Z only if it’s given these permissions by the developer.”. Doing
this without the help of the developer (e.g., by submitting the list of
methods with the used permissions) requires static analysis on the
application code to retrieve the permissions used in the JavaScript
interface classes and their methods, and in the event handlers. DRS
uses apktool [13], which works with a success rate of 97.6% [18],
to decompile the app into smali bytecode, then ﬁnds the exposed
JavaScript interface classes and the event handlers declared in DPL
rules, and processes them to ﬁnd the permissions that are required
by them. This requires determining the sensitive API calls made in
the class methods and the event handlers. DRS utilizes the API-to-
permission mapping released in PScout [19] and searches for the
API calls speciﬁed in this mapping in the app’s decompiled smali
code. This provides DRS with a list of used sensitive API calls and
their corresponding permissions required by each class method and
event handler. DRS performs this process in the background, only
during app installation and update time and saves the results in a ﬁle
in the app’s data folder to avoid repetition of this process.
Information unit. At the core of the PolicyManager lie two com-
ponents: the policy map and the permission map. The Policy map
uses a hash map to keep track of the developer DPL rules (as key
value pairs). It uses a string for its key, and a vector of strings for the
value. The key consists of the subject, channel name, and type of
the channel option, namely class name (for interfaces), function (for
event handlers), or permission (all channels). In case the channel
option is a JavaScript Interface class name, the vector of strings
Android System WebView AppAndroidAppChromiumLibraryApp.apkPolicyManagerinvocationChromium Library libwebviewchromium.soInfo.UnitPolicy MapPermission mapDraconianpoliciesAppDeveloperApp UserParsing ModulePermission parserPolicy parserDecompilation & Static Analysis UnitStatic AnalyzerDecompilersmaliEnforcementHTML5 APIJavaScript InterfaceEvent HandlerStatic Analysis cost
average (s)
standard deviation
small class (5 methods)
medium class (10 methods)
large class (15 methods)
3.004
5.940
8.766
0.054
0.114
0.167
Table 2: Runtime for static analysis on Nexus 5
all the resource and class ﬁles in the target app between approxi-
mately 60 to 90 seconds, depending on the size of the app. Another
tool, DexDump [20], can perform app decompilation much more
efﬁciently since it parses classes on demand. We hope to borrow
from their techniques and use them in our future implementation.
After decompiling the target app, we statically analyze the classes
associated with Draconian policy rules to determine which permis-
sions are used by each exposed method. Table 2 shows the perfor-
mance results of permission extraction of class methods for three
cases: 1) a small class with 5 methods (506 smali instructions), 2)
medium-sized class with 10 methods (1106 smali instructions), and
3) a larger class with 15 methods (1706 smali instructions). Here,
the total number of smali instructions in methods is the dominating
factor for the performance since for each instruction we perform a
lookup in our data structure for PScout mappings.
Policy parsing module. The Parsing module runs each time the
app is launched by the user in order to populate the in-memory
policy and permission maps. As explained before, there are two sub-
components of the parsing module; the policy parser, which simply
parses the policy rule inserted by the developer, and the permission
parser, which parses the output of the static analysis to identify
the permissions used by class methods and event handlers for the
classes and event handlers declared in the DPL rules. Both of these
components incur minimal overhead: in total, we identify the run
time of the parsing module to be in the order of miliseconds as shown
in Table 3. This cost is negligible compared to the launch time of
Android apps, which is expected to be in the order of seconds [21].
• Policy parsing. The complexity of the inserted DPL rule can
change the total run time of the parsing operation. In order to inves-
tigate how rule complexity affects performance, we have considered
three types of rules: 1) a simple DPL rule that involves 5 class meth-
ods, 2) a large DPL rule that involves 15 class methods, and 3) a
semantically large DPL rule that involves all class methods (i.e., uses
all tag). Listing 5 shows how these rules can be added to the app. We
only investigate the performance for the JavaScript interface chan-
nel; however, the results are comparable for other channels since
the construction of the policy rules are similar. We run each experi-
ment 10 times and report average run time and standard deviation.
Table 3 shows the results for the three types of policy rules (case
1,2,3). First we observe that the parsing overhead, is negligible, in
the order of a few miliseconds. Additionally, as the number of class
methods increases (from 5 to 15), the run time slightly increases.
This is simply because number of insertion operations performed
is proportional to the number of class methods in the rule(O(n)).
However, for a policy that addresses all class methods, the run time
is even smaller than that of a simple policy. This is because all tag
semantically means that all class methods are involved, and when it
is used, we do not require insertion of all the class methods into the
policy map one by one.
• Permission parsing. The performance of permission parsing is
affected by the the number of permissions used by the app, and
the number of sensitive API calls (i.e., required permissions for the
sensitive API call) used in each method. It has been shown that
on average Android apps use ﬁve permissions [22]. Therefore, we
Figure 2: Enforcement in Draco implemented in the Browser compo-
nent in Chromium for all channels. For JS interfaces, Java objects are
inserted as V8 objects into Chromium. Draco needs class name and
origin information from outside the context of Browser component.
native part of Chromium code. We retrieve the resources from the
request object in Chromium and for each resource ask the Policy
Manager whether there is a rule allowing the origin to use that
permission, or ask the user if the developer speciﬁes in the DPL rule
for the user to be consulted. If the origin is allowed by a DPL rule
(and by the user if needed), DRS allows the origin to go through
with the invocation, else DRS gracefully blocks the request.
5. SYSTEM EVALUATION
In this section, we evaluate the effectiveness and performance of
Draco on commercial off-the-shelf (COTS) devices.
5.1 Effectiveness
In Section 3, we described attacks on the CVS Caremark and Job
Search apps. To evaluate the effectiveness of Draco, we enhanced
the apps with DPL rules as these are described in Section 4.2. We
have installed the apps on a Nexus 5 phone running Android 6.0.
We have also updated the WebView system app to a version en-
hanced with the Draco Runtime System. In both cases, we found
that Draco successfully blocks all illegitimate access attempts by
spurious domains. At the same time, the legitimate domains can
function properly and the app remains fully functional.
5.2 Performance
As explained before, DRS consists of: 1) a static analysis unit
for determining the permissions used by class methods and event
handlers, 2) a parsing module that dissects the policy rules entered
by the developer and permissions used by class and event handler