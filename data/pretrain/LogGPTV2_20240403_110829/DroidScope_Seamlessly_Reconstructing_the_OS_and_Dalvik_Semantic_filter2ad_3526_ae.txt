ful in identifying previously unknown malicious Apps in
Android marketplaces [41]. TaintDroid and DroidBox
are two examples of dynamic analysis tools for Android
applications [17, 19]. TaintDroid is a specially crafted
DVM that supports taint analysis of Dalvik instructions
and across API calls. DroidBox is a project that uses
TaintDroid to build an android application sandbox for
analysis purposes. The biggest advantage of using Taint-
Droid is that it runs on actual devices. All of the hard-
ware, sensors, vendor software and unpredictable intrica-
cies that come with a real device are there. This can’t be
achieved in an emulated environment. The major nega-
tive of all these tools is that they are limited to analyzing
the Java portion of Apps. Thus, if there is a native com-
ponent, like DroidKungFu has, they will not be able to
fully analyze it.
9 Conclusion
We presented DroidScope, a ﬁne grained dynamic binary
instrumentation tool for Android that rebuilds two lev-
els of semantic information: operating system and Java.
This information is provided to the user in a uniﬁed in-
terface to enable dynamic instrumentation of both the
Dalvik bytecode as well as native instructions.
In this
manner, the analyst is able to reveal the behavior of a
malware sample’s Java and native components as well
as interactions between them and the rest of the system
as evidenced by the successful analysis of DroidKungFu
and DroidDream using DroidScope. These capabilities
are provided to the analyst without changing the guest
Android system and particularly with JIT intact. Our per-
formance evaluation showed the beneﬁts of dynamically
disabling JIT for targeted analysis such as API tracing.
The overall performance seems reasonable as well.
Acknowledgements
We thank the anonymous reviewers for their insightful
comments towards improving this paper. This work is
supported in part by the US National Science Founda-
tion NSF under Grants #1018217 and #1054605. Any
opinions, ﬁndings, and conclusions made in this material
are those of the authors and do not necessarily reﬂect the
views of the NSF or the Air Force Research Laboratory.
References
[1] Anubis: Analyzing Unknown Binaries. http://anubis.
iseclab.org/.
[2] BALZAROTTI, D., COVA, M., KARLBERGER, C., KRUEGEL,
C., KIRDA, E., AND VIGNA, G. Efﬁcient Detection of Split
In Proceedings of the Network and
Personalities in Malware.
Distributed System Security Symposium (NDSS) (San Diego, CA,
February 2010).
[3] BELLARD, F. QEMU, a fast and portable dynamic translator.
In USENIX Annual Technical Conference, FREENIX Track (April
2005).
[4] BERNAT, A. R., ROUNDY, K., AND MILLER, B. P. Efﬁcient,
sensitivity resistant binary instrumentation. In Proceedings of the
2011 International Symposium on Software Testing and Analysis
(New York, NY, USA, 2011), ISSTA ’11, ACM, pp. 89–99.
[5] BRUENING, D., GARNETT, T., AND AMARASINGHE, S. An in-
frastructure for adaptive dynamic optimization. In International
Symposium on Code Generation and Optimization (CGO’03)
(March 2003).
[6] BRUMLEY, D., HARTWIG, C., KANG, M. G., LIANG, Z., NEW-
SOME, J., POOSANKAM, P., AND SONG, D. BitScope: Auto-
matically dissecting malicious binaries. Tech. Rep. CS-07-133,
School of Computer Science, Carnegie Mellon University, Mar.
2007.
[7] BUNGALE, P. P., AND LUK, C.-K. PinOS: a programmable
In Pro-
framework for whole-system dynamic instrumentation.
ceedings of the 3rd international conference on Virtual execution
environments (2007), VEE ’07, pp. 137–147.
[8] CHENG,
B.,
AND BUZBEE,
B.
dalvik VM.
for
android’s
piler
google.com/events/io/2010/sessions/
jit-compiler-androids-dalvik-vm.html,
Google I/O.
A JIT com-
http://www.
2010.
[9] CHIPOUNOV, V., KUZNETSOV, V., AND CANDEA, G. S2E: A
platform for in-vivo multi-path analysis of software systems. In
Proceedings of the 16th International Conference on Architectural
Support for Programming Languages and Operating Systems (AS-
PLOS) (Mar. 2011).
[10] CLAUSE, J., LI, W., AND ORSO, A. Dytan: a generic dynamic
In Proceedings of the 2007 Interna-
taint analysis framework.
tional Symposium on Software Testing and Analysis (ISSTA’07)
(2007), pp. 196–206.
[11] CRANDALL, J. R., AND CHONG, F. T. Minos: Control data
attack prevention orthogonal to memory model. In Proceedings
of the 37th International Symposium on Microarchitecture (MI-
CRO’04) (December 2004).
[12] Cve-2009-1185.
http://cve.mitre.org/cgi-bin/
cvename.cgi?name=CVE-2009-1185.
[13] ded: Decompiling Android Applications. http://siis.cse.
psu.edu/ded/index.html.
[14] Dynamic, metamorphic (and opensource) virtual machines.
http://archive.hack.lu/2010/Desnos_Dynamic_
Metamorphic_Virtual_Machines-slides.pdf.
[15] DINABURG, A., ROYAL, P., SHARIF, M., AND LEE, W. Ether:
malware analysis via hardware virtualization extensions. In Pro-
ceedings of the 15th ACM Conference on Computer and Commu-
nications Security (2008), pp. 51–62.
[16] DOLAN-GAVITT, B., LEEK, T., ZHIVICH, M., GIFFIN, J., AND
LEE, W. Virtuoso: Narrowing the semantic gap in virtual ma-
chine introspection. In Proceedings of the 2011 IEEE Symposium
on Security and Privacy (Washington, DC, USA, 2011), SP ’11,
IEEE Computer Society, pp. 297–312.
14
[17] Droidbox: Android application sandbox.
google.com/p/droidbox/.
http://code.
[18] EGELE, M., KRUEGEL, C., KIRDA, E., YIN, H., AND SONG, D.
Dynamic Spyware Analysis. In Proceedings of the 2007 Usenix
Annual Conference (Usenix’07) (June 2007).
[19] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J.,
MCDANIEL, P., AND SHETH, A. N. Taintdroid: an information-
ﬂow tracking system for realtime privacy monitoring on smart-
In Proceedings of the 9th USENIX conference on Op-
phones.
erating systems design and implementation (Berkeley, CA, USA,
2010), OSDI’10, USENIX Association, pp. 1–6.
[20] ENCK, W., OCTEAU, D., MCDANIEL, P., AND CHAUDHURI,
S. A study of android application security. In Proceedings of the
20th USENIX Security Symposium (2011).
[21] GARFINKEL, T., AND ROSENBLUM, M. A virtual machine in-
In Pro-
trospection based architecture for intrusion detection.
ceedings of Network and Distributed Systems Security Symposium
(NDSS’03) (February 2003).
[22] Gartner says sales of mobile devices grew 5.6 percent in third
quarter of 2011; smartphone sales increased 42 percent. http:
//gartner.com/it/page.jsp?id=1848514, 2011.
[23] HAZELWOOD, K., AND KLAUSER, A. A dynamic binary in-
In Proceedings
strumentation engine for the arm architecture.
of the 2006 international conference on Compilers, architecture
and synthesis for embedded systems (New York, NY, USA, 2006),
CASES ’06, ACM, pp. 261–270.
[24] JIANG, X., WANG, X., AND XU, D. Stealthy malware detection
through vmm-based ”out-of-the-box” semantic view reconstruc-
tion. In Proceedings of the 14th ACM conference on Computer
and Communications Security (CCS’07) (October 2007).
[25] Security alert: New sophisticated android malware droidkungfu
found in alternative chinese app markets. http://www.csc.
ncsu.edu/faculty/jiang/DroidKungFu.html.
[26] KANG, M. G., YIN, H., HANNA, S., MCCAMANT, S., AND
In Pro-
SONG, D. Emulating emulation-resistant malware.
ceedings of the 2nd Workshop on Virtual Machine Security (VM-
Sec’09) (November 2009).
[27] LUK, C.-K., COHN, R., MUTH, R., PATIL, H., KLAUSER, A.,
LOWNEY, G., WALLACE, S., REDDI, V. J., AND HAZELWOOD,
K. Pin: Building customized program analysis tools with dynamic
instrumentation. In Proc. of 2005 Programming Language Design
and Implementation (PLDI) conference (june 2005).
[28] MARTIGNONI, L., MCCAMANT, S., POOSANKAM, P., SONG,
D., AND MANIATIS, P. Path-exploration lifting: Hi-ﬁ tests for
lo-ﬁ emulators. In Proceedings of the 17th International Confer-
ence on Architectural Support for Programming Languages and
Operating Systems (ASPLOS) (London, UK, Mar. 2012).
[29] MARTIGNONI, L., PALEARI, R., ROGLIA, G. F., AND BR-
In Proceedings of the 18th
USCHI, D. Testing cpu emulators.
International Symposium on Software Testing and Analysis (IS-
STA’09) (2009), pp. 261–272.
[30] MIJAR, R., AND NIGHTINGALE, A. Virtualization is coming to
a platform near you. Tech. rep., ARM Limited, 2011.
[31] MOSER, A., KRUEGEL, C., AND KIRDA, E. Exploring mul-
In Proceedings of
tiple execution paths for malware analysis.
the 2007 IEEE Symposium on Security and Privacy(Oakland’07)
(May 2007).
[32] NETHERCOTE, N., AND SEWARD, J. Valgrind: a framework for
In PLDI (2007),
heavyweight dynamic binary instrumentation.
pp. 89–100.
[33] PORTOKALIDIS, G., SLOWINSKA, A., AND BOS, H. Argos:
an emulator for ﬁngerprinting zero-day attacks. In EuroSys 2006
(April 2006).
15
[34] Proguard. http://proguard.sourceforge.net.
[35] TEMU: The BitBlaze dynamic analysis component. http://
bitblaze.cs.berkeley.edu/temu.html.
[36] YAN, L.-K., JAYACHANDRA, M., ZHANG, M., AND YIN, H.
V2E: Combining hardware virtualization and software emulation
for transparent and extensible malware analysis. In Proceedings of
the Eighth Annual International Conference on Virtual Execution
Environments (VEE’12) (March 2012).
[37] YIN, H., LIANG, Z., AND SONG, D. HookFinder: Identifying
and understanding malware hooking behaviors. In Proceedings of
the 15th Annual Network and Distributed System Security Sympo-
sium (NDSS’08) (February 2008).
[38] YIN, H., AND SONG, D. Temu: Binary code analysis via whole-
system layered annotative execution. Tech. Rep. UCB/EECS-
2010-3, EECS Department, University of California, Berkeley,
Jan 2010.
[39] YIN, H., SONG, D., MANUEL, E., KRUEGEL, C., AND KIRDA,
E. Panorama: Capturing system-wide information ﬂow for mal-
In Proceedings of the 14th ACM
ware detection and analysis.
Conferences on Computer and Communication Security (CCS’07)
(October 2007).
[40] ZHOU, Y., AND JIANG, X. Dissecting android malware: Char-
acterization and evolution. In Proceedings of the 33rd IEEE Sym-
posium on Security and Privacy (Oakland 2012) (San Francisco,
CA, USA, May 2012), IEEE.
[41] ZHOU, Y., WANG, Z., ZHOU, W., AND JIANG, X. Hey, you, get
off of my market: Detecting malicious apps in ofﬁcial and alter-
native android markets. In Proceedings of the 19th Network and
Distributed System Security Symposium (San Diego, CA, Febru-
ary 2012).
A Trace-Based Exploit Diagnosis of “ratc”
In this section, we provide an example of exploit diagno-
sis using DroidScope and the ARM instruction tracer on
“ratc”. These results corroborate with publicly available
information on “ratc” and the setuid exhaustion vulnera-
bility.
We know that adbd is supposed to downgrade its priv-
ileges by setting its uid to AID SHELL (2000), and yet
adbd retained its root privileges after the attack. Thus,
in an effort to identify the root cause of the vulnerability,
we used DroidScope to gather an ARM instruction trace
that includes both user and kernel code.
A simpliﬁed and annotated log is shown in Figure 13.
In the log,
the instruction’s address comes ﬁrst fol-
lowed by a colon, the decoded instruction and then the
operands. We have also indented the instructions to il-
lustrate the relative stack depth.
The log begins when setgid returns from the ker-
nel space and returns back to adb main at address
0x0000c3a4. Almost immediately, the log shows setuid
being called. After transitioning into kernel mode, we
see sys setuid being called followed by a call to set user.
Later we see set user returning an error code 0xfffffff5
which is (-11 in 2’s complement or -EAGAIN).
Tracing backwards in the log reveals that this error
code was the result of the RLIMIT NPROC check in
set user. This reveals why setuid failed to downgrade
;;;setgid returns from kernel back to adbd
0000813c: pop {r4, r7}
00008140: movs r0, r0
00008144: bxpl lr : Read Oper[0]. R14, Val = 0xc3a5
;; Return back to 0xc3a4 (caller) in Thumb mode
;;;adbd_main sets up for setuid
0000c3a4: movs r0, #250
0000c3a6: lsls r0, r0, #3 : Write Oper[0]. R0, Val = 0x7d0
;; 250 * 8 = 0x7d0 = 2000 = AID_SHELL
...
;;;Start of setuid section
;;; 213 is syscall number for sys_setuid
00008be0: push {r4, r7} : Write Oper[0]. M@be910bb8, Val = 0x7d0
;; push AID_SHELL onto the stack
00008be4: mov r7, #213
00008be8: svc 0x00000000
;; Make sys call
;;; === TRANSITION TO KERNEL SPACE ===
;;;sys_setuid then calls set_user in kernel mode
;;;inside sys_setuid
;; Has rlimit been reached?
c0048944: cmp r2, r3
: Read Oper[0]. R3, Val = 300 Read Oper[1]. R2, Val = 300
;;; RLIMIT(300) is reached and !init_user so return -11
c0048960: mvn r0, #10 : Write Oper[0]. R0, Val = 0xfffffff5
;; the return value is now -11 or -EAGAIN
c0048964: ldmib sp, {r4, r5, r6, fp, sp, pc}
;;;Return back to sys_setuid which returns back to userspace
;;; === RETURN TO USERSPACE ===
;;;setuid continues
00008bec: pop {r4, r7}
00008bf0: movs r0, r0 : Read Oper[0]. R0, Val = 0xfffffff5
;; -11 is still here
;;;Return back to adb_main at 0xc3ac (the return address) above
;;; Immediately starts other work, does not check return code
0000c3ac: ldr r7, [pc, #356] : Read Oper[0]. M@0000c514, Val = 0x19980330
Write Oper[0]. R7, Val = 0x19980330
;; 0x19980330 is _LINUX_CAPABILITY_VERSION
Figure 13: Annotated adbd trace
adbd’s privileges. Further analysis of the log shows that
the return value from setuid was not used by adbd nor
was a call to getuid seen. The same applies to setgid.
This indicates that adbd failed to ensure that it is no
longer running as root. Thus, our analysis shows that
the vulnerability is due to two factors, RLIMIT NPROC
and failure to check the return code by adbd.
16