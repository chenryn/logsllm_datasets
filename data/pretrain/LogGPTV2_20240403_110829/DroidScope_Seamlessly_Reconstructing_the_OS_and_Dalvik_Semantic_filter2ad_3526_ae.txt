### 识别Android市场中未知恶意应用的有效工具

TaintDroid和DroidBox是两种用于动态分析Android应用程序的工具[17, 19]。TaintDroid是一种特别设计的Dalvik虚拟机（DVM），支持对Dalvik指令和API调用进行污点分析。DroidBox则是一个利用TaintDroid构建的Android应用沙盒，用于分析目的。使用TaintDroid的最大优势在于它能够在实际设备上运行，从而包含所有硬件、传感器、厂商软件以及真实设备所带来的不可预测的复杂性。这些是在模拟环境中无法实现的。然而，这些工具的主要缺点是它们仅限于分析应用程序的Java部分，因此，如果存在像DroidKungFu这样的本地组件，它们将无法进行全面分析。

### 结论

我们介绍了DroidScope，这是一种针对Android系统的细粒度动态二进制插桩工具，能够重建两个层次的语义信息：操作系统和Java。该工具通过统一界面提供这些信息，使得用户能够同时对Dalvik字节码和本地指令进行动态插桩。通过这种方式，分析师可以揭示恶意软件样本中的Java和本地组件的行为及其与系统其余部分的交互情况，如成功分析DroidKungFu和DroidDream所展示的那样。这些功能在不改变客体Android系统的情况下提供给分析师，并且特别保留了即时编译（JIT）。我们的性能评估表明，在有针对性的分析（如API跟踪）中动态禁用JIT的好处，总体性能表现合理。

### 致谢

感谢匿名评审员对改进本文提出的宝贵意见。本研究得到了美国国家科学基金会（NSF）的部分资助，资助编号为#1018217和#1054605。本文中的任何观点、发现和结论均为作者个人观点，不一定反映NSF或空军研究实验室的观点。

### 参考文献
[略]

### “ratc”漏洞的基于跟踪的诊断示例

在此部分，我们将使用DroidScope和ARM指令跟踪器对“ratc”进行漏洞诊断示例。这些结果与关于“ratc”和setuid耗尽漏洞的公开信息一致。

我们知道adbd应该通过将其uid设置为AID_SHELL（2000）来降级其权限，但在攻击后adbd仍然保留了root权限。为了确定漏洞的根本原因，我们使用DroidScope收集了一个包括用户和内核代码的ARM指令跟踪。

图13展示了简化的并带有注释的日志。日志以指令地址开头，后跟冒号、解码后的指令及操作数。我们还缩进了指令以表示相对堆栈深度。

日志从setgid从内核空间返回到adb主函数（地址0x0000c3a4）开始。几乎立即，日志显示setuid被调用。进入内核模式后，我们看到sys_setuid被调用，随后调用set_user。稍后我们看到set_user返回错误代码0xfffffff5（即-11的补码或-EAGAIN）。

追溯日志发现，此错误代码是由于set_user中的RLIMIT_NPROC检查导致的。这揭示了为什么setuid未能降级adbd的权限。进一步分析日志显示，adbd并未使用setuid的返回值，也没有看到getuid的调用。同样的问题也适用于setgid。这表明adbd未能确保其不再以root身份运行。因此，我们的分析表明，该漏洞的原因有两个因素：RLIMIT_NPROC和adbd未能检查返回代码。

图13：带注释的adbd跟踪

```
;;; setgid从内核返回到adbd
0000813c: pop {r4, r7}
00008140: movs r0, r0
00008144: bxpl lr : Read Oper[0]. R14, Val = 0xc3a5
;; 返回到0xc3a4（调用者）Thumb模式
;;; adbd_main设置setuid
0000c3a4: movs r0, #250
0000c3a6: lsls r0, r0, #3 : Write Oper[0]. R0, Val = 0x7d0
;; 250 * 8 = 0x7d0 = 2000 = AID_SHELL
...
;;; setuid部分开始
;;; 213是sys_setuid的系统调用号
00008be0: push {r4, r7} : Write Oper[0]. M@be910bb8, Val = 0x7d0
;; 将AID_SHELL推入堆栈
00008be4: mov r7, #213
00008be8: svc 0x00000000
;; 进行系统调用
;;; === 转换到内核空间 ===
;;; sys_setuid然后在内核模式下调用set_user
;;; 在sys_setuid内部
;; 是否达到rlimit？
c0048944: cmp r2, r3
: Read Oper[0]. R3, Val = 300 Read Oper[1]. R2, Val = 300
;;; 达到RLIMIT(300)并且!init_user，所以返回-11
c0048960: mvn r0, #10 : Write Oper[0]. R0, Val = 0xfffffff5
;; 返回值现在是-11或-EAGAIN
c0048964: ldmib sp, {r4, r5, r6, fp, sp, pc}
;;; 返回到sys_setuid，再返回到用户空间
;;; === 返回到用户空间 ===
;;; setuid继续
00008bec: pop {r4, r7}
00008bf0: movs r0, r0 : Read Oper[0]. R0, Val = 0xfffffff5
;; -11仍然在这里
;;; 返回到adb_main的0xc3ac（返回地址）
;;; 立即开始其他工作，没有检查返回代码
0000c3ac: ldr r7, [pc, #356] : Read Oper[0]. M@0000c514, Val = 0x19980330
Write Oper[0]. R7, Val = 0x19980330
;; 0x19980330是_LINUX_CAPABILITY_VERSION
```