leecher state allows leechers to beneﬁt from the excess capac-
ity. It is important to understand why the choke algorithm
achieves this good reciprocation. One reason is the way the
active peer set is built. In the following, we focus on how
the local peer selects the remote peers to upload blocks to.
The choke algorithm in leecher state selects a small subset
of peers to upload blocks to. We see in Fig. 7, top graph,
that the 5 peers that receive the most data from the local
peer (in black) represents a large part of the total amount of
uploaded bytes. At ﬁrst sight, this behavior is expected from
the choke algorithm because a local peer selects the three
fastest downloading peers to upload to, see section 2.3.2.
However, there is no guarantee that these three peers will
continue to send data to the local peer.
In the case they
stop sending data to the local peer, the local peer will also
stop reciprocating to them.
We focus on torrent 7 in order to understand how this
subset of peers is selected. Fig. 8 (top graph) shows that
most of the peers are unchoked few times and few peers are
unchoked frequently. The optimistic unchoke gives a chance
to each peer to be unchoked few times, whereas the regular
unchoke is used to unchoke frequently peers that send the
fastest to the local peer. The optimistic unchoke acts as a
peer discovery mechanism. The peers that are not unchoked
at all are either initial seeds, or peers that do not stay in
the peer set long enough to be optimistically unchoked.
We see in Fig. 8 (top graph) that there is no correlation be-
tween the number of times a peer is unchoked and how long
a peer is interested in the local peer. However, we see that
the number of unchokes for the peers that are unchoked few
times increases slightly with the interested time duration.
This is because the optimistic unchoke takes at random a
peer to be optimistically unchoked. Thus the longer a peer
is interested in the local peer, the more likely it has to be
optimistically unchoked.
Fig. 7 shows that for four torrents in transient state, tor-
rents 4, 5, 6 and 8, the amount of bytes uploaded by the
30 best remote peers is lower than for the other torrents.
Torrents in transient state have low entropy. Therefore, the
peers are no longer selected based only on their reciproca-
tion level, but also on the pieces available. For this reason, a
larger set of peers receives pieces from the local peer. Thus,
a lower fraction of bytes uploaded to the best remote peers.
In summary, we have seen that the choke algorithm fos-
ters reciprocation. One important reason is that each peer
elects a small subset of peers to upload data to. This stabil-
ity improves the level of reciprocation. We have seen that
this stability is not due to a lack of interest. Our guess is
that the choke algorithm leads to an equilibrium in the peer
selection. The exploration of this equilibrium is fundamen-
tal to the understanding of the choke algorithm eﬃciency.
It is beyond the scope of this study to do this analysis, but
it is an important area of future research.
4.2.3 Seed State
The new choke algorithm in seed state gives the same
service time to each remote peer. We see in Fig. 9 that each
peer receives roughly the same amount of bytes from the
local peer. The diﬀerences among the peers are due to the
time remote peers are interested in the local peer. The more
a remote peer is interested in the local peer, the more times
this remote peer is unchoked. This is conﬁrmed by Fig. 8
(bottom graph) that shows a strong correlation between the
time a peer is interested in the local peer and the number
of times the local peer unchokes it. For torrents 6 and 15
the ﬁve best downloaders receive most of the bytes, because
for both torrents there were less than 10 remote peers that
received bytes from the local peer.
This new version of the choke algorithm in seed state is
the only one to give the same service time to each leecher.
This has three fundamental beneﬁts compared to the old
version. First, as each leecher receives a small and equiva-
lent service time from the seeds, the entropy of the pieces
is improved. In contrast, with the old choke algorithm, a
few fast leechers can receive most of the pieces, which de-
creases the diversity of the pieces. Second, free riders cannot
receive more than contributing leechers. In contrast, with
the old choke algorithm, a fast free rider can monopolize a
seed. Third, the resilience in transient phase is improved.
Indeed, the initial seed does not favor any leecher. Thus,
if a leecher leaves the peer set, it will only remove a small
subset of the pieces from the torrent. In contrast, with the
old choke algorithm, the initial seed can send most of the
pieces to a single leecher. If this leecher leaves the torrent,
that will adversely impact the torrent and increase the time
in transient state.
In summary, the new choke algorithm in seed state gives
the same service to time to each leecher. This new algorithm
is a signiﬁcant improvement over the old one. In particular,
whereas the old choke algorithm can be unfair and sensible
to free riders, the new choke algorithm is fair and robust to
free riders.
5. RELATED WORK
Whereas BitTorrent can be considered as one of the most
successful peer-to-peer protocol, there are few studies on it.
Several analytical studies of BitTorrent-like protocols ex-
ist [6, 22, 26]. Whereas they provide a good insight into the
behavior of such protocols, the assumption of global knowl-
edge limits the scope of their conclusions. Biersack et al. [6]
propose an analysis of three content distribution models: a
linear chain, a tree, and a forest of trees. They discuss the
impact of the number of chunks (what we call pieces) and of
the number of simultaneous uploads (what we call the ac-
tive peer set) for each model. They show that the number of
chunks should be large and that the number of simultaneous
uploads should be between 3 and 5. Yang et al. [26] study
the service capacity of BitTorrent-like protocols. They show
that the service capacity increases exponentially at the be-
ginning of the torrent and then scale well with the number
of peers. They also present traces obtained from a tracker.
Such traces are very diﬀerent from ours, as they do not allow
to study the dynamics of a peer. Both studies presented in
[6] and [26] are orthogonal to ours as they do not consider the
dynamics induced by the choke and rarest ﬁrst algorithms.
Qiu and Srikant [22] extend the initial work presented in [26]
by providing an analytical solution to a ﬂuid model of Bit-
Torrent. Their results show the high eﬃciency in terms of
system capacity utilization of BitTorrent, both in a steady
state and in a transient regime. Furthermore, the authors
concentrate on a game-theoretical analysis of the choke and
rarest ﬁrst algorithms. However, a major limitation of this
analytical model is the assumption of global knowledge of all
peers to make the peer selection. Indeed, in a real system,
each peer has only a limited view of the other peers, which
is deﬁned by its peer set. As a consequence, a peer cannot
ﬁnd the best suited peers to send data to in all the peers in
the torrent (global optimization assumption), but in its own
peer set (local and distributed optimization). Also, the au-
thors do not evaluate the rarest ﬁrst algorithm, but assume
a uniform distribution of pieces. Our study is complemen-
tary, as it provides an experimental evaluation of algorithms
with limited knowledge. In particular, we show that the ef-
ﬁciency on real torrents is close to the one predicted by the
models.
Felber et al. [9] compare diﬀerent peer and piece selection
strategies in static scenarios using simulations. Bharambe et
al. [5] present a simulation-based study of BitTorrent using
a discrete-event simulator that supports up to 5000 peers.
The authors concentrate on the evaluation of the BitTor-
rent performance by looking at the upload capacity of the
nodes and at the fairness deﬁned in terms of the volume of
data served by each node. They varied various parameters
of the simulation as the peer set and active peer set size.
They provide important insights into the behavior of Bit-
Torrent. However, they do not evaluate a peer set larger
than 15 peers, whereas the real implementation of BitTor-
rent has a default value of 80 peers. This restriction may
have an important impact on the behavior of the protocol as
the piece selection strategy is impacted by the peer set size.
The validation of a simulator is always hard to perform, and
the simulator restrictions may biased the results. Our study
provides real word results that can be used to validate simu-
lated scenarios. Moreover, our study is diﬀerent because we
do not modify the default parameters of BitTorrent, but we
observed its default behavior on a large variety of real tor-
rents. Finally, we provide new insights into the rarest ﬁrst
piece selection and on the choke algorithm peer selection. In
particular, we argue that the choke algorithm in its latest
version is fair.
Pouwelse et al. [21] study the ﬁle popularity, ﬁle availabil-
ity, download performance, content lifetime and pollution
level on a popular BitTorrent tracker site. This work is or-
thogonal to ours as they do not study the core algorithms of
BitTorrent, but rather focus on the contents distributed us-
ing BitTorrent and on the users behavior. The work that is
the most closely related to our study was done by Izal et al.
[14]. In this paper, the authors provide seminal insights into
BitTorrent based on data collected from a tracker log for a
single yet popular torrent, even if a sketch of a local vision
from a local peer perspective is presented. Their results
provide information on peers behavior, and show a corre-
lation between uploaded and downloaded amount of data.
Our work diﬀers from [14] in that we provide a thorough
measurement-based analysis of the rarest ﬁrst and choke al-
gorithms. We also study a large variety of torrents, which
allows us not to be biased toward a particular type of tor-
rent. Moreover, without pretending to answer all possible
questions that arise from a simple yet powerful protocol as
BitTorrent, we provide new insights into the rarest ﬁrst and
choke algorithms.
6. DISCUSSION
In this paper we go beyond the common wisdom that Bit-
Torrent performs well. We have performed a detailed experi-
mental evaluation of the rarest ﬁrst and choke algorithms on
real torrents with varying characteristics in terms of num-
ber of leechers, number of seeds, and content sizes. Whereas
we do not pretend to have reached completeness, our eval-
uation gives a reasonable understanding of the behavior of
both algorithms on a large variety of real cases.
Our main results are the following.
(cid:129) The rarest ﬁrst algorithm guarantees a close to ideal
entropy on the presented torrents.
In particular, it
prevents the reappearance of rare pieces and of the
last pieces problem.
(cid:129) We have found that torrents in a startup phase can
have low entropy. The duration of this phase depends
only on the upload capacity of the source of the con-
tent.
In particular, the rarest ﬁrst algorithm is not
responsible of the low entropy during this phase.
(cid:129) The fairness achieved with a bit level tit-for-tat strat-
egy is not appropriate in the context of peer-to-peer
ﬁle replication. We have proposed two new fairness
criteria in this context.
(cid:129) The choke algorithm is fair, fosters reciprocation, and
is robust to free riders in its latest version.
Our main contribution is to show that on real torrents
the rarest ﬁrst and choke algorithms are enough to have an
eﬃcient and viable ﬁle replication protocol in the Internet.
In particular, we discussed the beneﬁts of the new choke
algorithm in seed state. This new algorithm outperforms
the old one and should replace it. We also identiﬁed two
new areas of improvement: the downloading speed of the
ﬁrst blocks, and the duration of the transient phase.
The rarest ﬁrst algorithm is simple. It does not require
global knowledge or important computational resources.
Yet, it guarantees a peer availability, for the peer selection,
close to the ideal one. We do not see any striking argument
in favor of a more complex solution in the evaluated context.
We do not claim that the choke algorithm is optimal. The
understanding of its equilibrium is an area of future research.
However, it achieves a reasonable level of eﬃciency, and most
importantly it guarantees a viable system by fostering recip-
rocation, preventing free riders to attack the stability of the
system, and using the excess capacity. Solutions based on a
bit level tit-for-tat are not appropriate.
Our conclusions only hold in the context we explored, i.e.,
peer-to-peer ﬁle replication in the Internet. There are many
diﬀerent contexts where peer-to-peer ﬁle replication can be
used: small ﬁles, small group of peers, dynamic groups in
ad-hoc networks, peers with partial connectivity, etc. All
these contexts are beyond the scope of this paper, but are
interesting areas for future research.
We also identiﬁed two areas of improvement. The time
to deliver the ﬁrst blocks of data should be reduced.
In
the case of large contents, this delivery time will marginally
increase the overall download time. But, in the case of small
contents, the penalty is signiﬁcant. Also, the duration of
the transient phase should be minimized as the low entropy
may results in a performance penalty. The way to solve
these problems is beyond the scope of this study, but is an
interesting area of future research.
We believe that this work sheds a new light on two new
algorithms that enrich previous content distribution tech-
niques in the Internet. BitTorrent is the only existing peer-
to-peer replication protocol that exploits these two promis-
ing algorithms in order to improve system capacity utiliza-
tion. We deem that the understanding of these two algo-
rithms is of fundamental importance for the design of future
peer-to-peer content distribution applications.
Acknowledgment
We would like to thank the anonymous reviewers, and also
Chadi Barakat, Ernst W. Biersack, Walid Dabbous, Katia
Obraczka, Thierry Turletti for their valuable comments.
7. REFERENCES
[1] http://www.slyck.com.
[2] http://www.bittorrent.com/.
[3] Bittorrent protocol speciﬁcation v1.0.
http://wiki.theory.org/BitTorrentSpeciﬁcation, June 2005.
[4] R. Bhagwan, S. Savagen, and G. Voelker. Understanding
availability. In International Workshop on Peer-to-Peer
Systems, Berkeley, CA, USA, February 2003.
[5] A. R. Bharambe, C. Herley, and V. N. Padmanabhan.
Analysing and improving bittorrent performance. In Proc.
IEEE Infocom’2006, Barcelona, Spain, April 2006.
[6] E. W. Biersack, P. Rodriguez, and P. Felber. Performance
analysis of peer-to-peer networks for ﬁle distribution. In Proc.
Fifth International Workshop on Quality of Future Internet
Services (QofIS’04), Barcelona, Spain, September 2004.
[7] Y. Chawathe, S. Ratnasamy, L. Breslau, and S. Shenker.
Making gnutella-like p2p systems scalable. In Proc. ACM
SIGCOMM’03, Karlsruhe, Germany, August 25-29 2003.
[8] B. Cohen. Incentives build robustness in bittorrent. In Proc.
First Workshop on Economics of Peer-to-Peer Systems,
Berkeley, USA, June 2003.
[9] P. Felber and E. W. Biersack. Self-scaling networks for content
distribution. In Proc. International Workshop on Self-*
Properties in Complex Information Systems, Bertinoro, Italy,
May-June 2004.
[10] P. Ganesan and M. Seshadri. On cooperative content
distribution and the price of barter. In IEEE ICDCS’05,
Columbus, Ohio, USA, June 2005.
[11] C. Gkantsidis and P. Rodriguez. Network coding for large scale
content distribution. In Proc. IEEE Infocom’2005, Miami,
USA, March 2005.
[12] K. Gummadi, R. Gummadi, S. Gribble, S. Ratnasamy,
S. Shenker, and I. Stoica. The impact of dht routing geometry
on resilience and proximity. In Proc. ACM SIGCOMM’03,
Karlsruhe, Germany, August 25-29 2003.
[13] L. Guo, S. Chen, Z. Xiao, E. Tan, X. Ding, and X. Zhang.
Measurements, analysis, and modeling of bittorrent-like
systems. In Proc. ACM IMC’2005, Berkeley, CA, USA,
October 2005.
[14] M. Izal, G. Urvoy-Keller, E. W. Biersack, P. Felber, A. A.
Hamra, and L. Garc´es-Erice. Dissecting bittorrent: Five
months in a torrent’s lifetime. In Proc. PAM’04, Antibes
Juan-les-Pins, France, April 2004.
[15] S. Jun and M. Ahamad. Incentives in bittorrent induce free
riding. In Proc. SIGCOMM’05 Workshops, Philadelphia, PA,
USA, August 2005.
[16] T. Karagiannis, A. Broido, N. Brownlee, and K. C. Claﬀy. Is
p2p dying or just hiding? In Proc. IEEE Globecom’04, Dalla,
Texas, USA, Nov. 29-Dec. 3 2004.
[17] T. Karagiannis, A. Broido, M. Faloutsos, and K. C. Claﬀy.
Transport layer identiﬁcation of p2p traﬃc. In Proc. ACM
IMC’04, Taormina, Sicily, Italy, October 2004.
[18] D. Kosti´c, R. Braud, C. Killian, E. Vandekieft, J. W.
Anderson, A. C. Snoeren, and A. Vahdat. Maintaining high
bandwidth under dynamic network conditions. In Proc.
USENIX’05, Anaheim, CA, USA, April 2005.
[19] A. Legout, G. Urvoy-Keller, and P. Michiardi. Rarest ﬁrst and
choke algorithms are enough. Technical Report
(inria-00001111, version 3 - 6 September 2006), INRIA, Sophia
Antipolis, September 2006.
[20] A. Parker. The true picture of peer-to-peer ﬁlesharing.
http://www.cachelogic.com/, July 2004.
[21] J. A. Pouwelse, P. Garbacki, D. H. J. Epema, and H. J. Sips.
The bittorrent p2p ﬁle-sharing system: Measurements and
analysis. In Proc. 4th International Workshop on
Peer-to-Peer Systems (IPTPS’05), Ithaca, New York, USA,
February 2005.
[22] D. Qiu and R. Srikant. Modeling and performance analysis of
bittorrent-like peer-to-peer networks. In Proc. ACM
SIGCOMM’04, Portland, Oregon, USA, Aug. 30–Sept. 3 2004.
[23] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and
S. Shenker. A scalable content-addressable network. In Proc.
ACM SIGCOMM’01, San Diego, California, USA, August
27-31 2001.
[24] P. Rodriguez and E. W. Biersack. Dynamic parallel-access to
replicated content in the internet. IEEE/ACM Transactions
on Networking, 10(4), August 2002.
[25] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and
H. Balakrishnan. Chord: A scalable peer-to-peer lookup service
for internet applications. In Proc. ACM SIGCOMM’01, San
Diego, California, USA, August 27-31 2001.
[26] X. Yang and G. de Veciana. Service capacity in peer-to-peer
networks. In Proc. IEEE Infocom’04, pages 1–11, Hong Kong,
China, March 2004.