### Leecher State and Choke Algorithm

The leecher state allows leechers to benefit from the excess capacity of other peers. Understanding why the choke algorithm achieves effective reciprocation is crucial. One key factor is the method by which the active peer set is constructed. In this section, we will focus on how a local peer selects remote peers to upload blocks to.

The choke algorithm in the leecher state selects a small subset of peers to upload blocks to. As shown in Figure 7 (top graph), the five peers that receive the most data from the local peer (indicated in black) account for a significant portion of the total uploaded bytes. This behavior is expected because the local peer prioritizes uploading to the three fastest downloading peers, as detailed in Section 2.3.2. However, there is no guarantee that these three peers will continue to send data to the local peer. If they stop, the local peer will also cease reciprocating with them.

To better understand this subset selection, we will examine Torrent 7. Figure 8 (top graph) illustrates that most peers are unchoked a few times, while a few are unchoked frequently. The optimistic unchoke mechanism gives each peer a chance to be unchoked a few times, whereas the regular unchoke is used to frequently unchoke peers that send data the fastest to the local peer. The optimistic unchoke acts as a peer discovery mechanism. Peers that are never unchoked are either initial seeds or those that do not remain in the peer set long enough to be optimistically unchoked.

Figure 8 (top graph) also shows no correlation between the number of times a peer is unchoked and how long it remains interested in the local peer. However, there is a slight increase in the number of unchokes for peers that are unchoked a few times, as the duration of their interest increases. This is because the optimistic unchoke randomly selects a peer, making it more likely for a peer to be optimistically unchoked if it remains interested for a longer period.

For four torrents in the transient state (Torrents 4, 5, 6, and 8), Figure 7 shows that the amount of bytes uploaded by the 30 best remote peers is lower than for other torrents. Transient state torrents have low entropy, so peers are selected based not only on their reciprocation level but also on the pieces they have available. This results in a larger set of peers receiving pieces from the local peer, leading to a lower fraction of bytes uploaded to the best remote peers.

In summary, the choke algorithm promotes reciprocation by allowing each peer to select a small subset of peers to upload data to. This stability enhances the level of reciprocation. Our analysis suggests that the choke algorithm leads to an equilibrium in peer selection, which is fundamental to understanding its efficiency. Further research is needed to explore this equilibrium.

### Seed State and New Choke Algorithm

In the seed state, the new choke algorithm ensures that each remote peer receives the same service time. As shown in Figure 9, each peer receives approximately the same amount of bytes from the local peer. Differences among peers are due to the duration of their interest in the local peer. The longer a remote peer is interested, the more often it is unchoked, as confirmed by Figure 8 (bottom graph).

For Torrents 6 and 15, the five best downloaders receive most of the bytes because fewer than 10 remote peers received bytes from the local peer. The new version of the choke algorithm in the seed state is unique in providing equal service time to each leecher. This has three key benefits over the old version:

1. **Improved Entropy**: Each leecher receives a small and equivalent service time, enhancing the diversity of pieces. In contrast, the old algorithm could allow a few fast leechers to receive most of the pieces, reducing piece diversity.
2. **Fairness to Free Riders**: Free riders cannot receive more than contributing leechers. The old algorithm allowed fast free riders to monopolize seeds.
3. **Enhanced Resilience**: The initial seed does not favor any leecher, ensuring that if a leecher leaves, only a small subset of pieces is removed from the torrent. The old algorithm could send most pieces to a single leecher, adversely impacting the torrent if that leecher left.

In summary, the new choke algorithm in the seed state provides equal service time to each leecher, offering significant improvements over the old algorithm. It is fair and robust to free riders, unlike the old algorithm, which could be unfair and susceptible to free rider attacks.

### Related Work

While BitTorrent is one of the most successful peer-to-peer protocols, there are limited studies on it. Several analytical studies of BitTorrent-like protocols exist [6, 22, 26], providing insights into their behavior. However, the assumption of global knowledge limits their conclusions. Biersack et al. [6] analyze three content distribution models: a linear chain, a tree, and a forest of trees. They show that the number of chunks should be large and the number of simultaneous uploads should be between 3 and 5. Yang et al. [26] study the service capacity of BitTorrent-like protocols, showing that the service capacity increases exponentially at the beginning and scales well with the number of peers. These studies, however, do not consider the dynamics induced by the choke and rarest first algorithms.

Qiu and Srikant [22] extend the work in [26] by providing an analytical solution to a fluid model of BitTorrent, demonstrating high efficiency in system capacity utilization. They focus on a game-theoretical analysis of the choke and rarest first algorithms but assume global knowledge, which is not realistic. Our study complements these by providing an experimental evaluation with limited knowledge, showing that the efficiency on real torrents is close to the predicted models.

Felber et al. [9] compare different peer and piece selection strategies using simulations, while Bharambe et al. [5] present a simulation-based study of BitTorrent. However, their simulations are limited to a maximum of 15 peers, which may not reflect the real behavior of BitTorrent, which has a default value of 80 peers. Our study provides real-world results that can validate simulated scenarios and does not modify the default parameters of BitTorrent.

Pouwelse et al. [21] study file popularity, availability, and user behavior on a popular BitTorrent tracker site, while Izal et al. [14] provide seminal insights into BitTorrent based on a single popular torrent. Our work differs by providing a thorough measurement-based analysis of the rarest first and choke algorithms across a variety of torrents.

### Discussion

This paper goes beyond the common wisdom that BitTorrent performs well by conducting a detailed experimental evaluation of the rarest first and choke algorithms on real torrents with varying characteristics. Our main findings include:

- **Rarest First Algorithm**: Guarantees close to ideal entropy, preventing the reappearance of rare pieces and the last pieces problem.
- **Startup Phase**: Torrents in the startup phase can have low entropy, depending on the upload capacity of the content source. The rarest first algorithm is not responsible for this low entropy.
- **Fairness**: A bit-level tit-for-tat strategy is not appropriate for peer-to-peer file replication. We propose two new fairness criteria.
- **Choke Algorithm**: The latest version is fair, fosters reciprocation, and is robust to free riders.

Our main contribution is showing that the rarest first and choke algorithms are sufficient for efficient and viable file replication in the Internet. The new choke algorithm in the seed state outperforms the old one and should replace it. We also identify areas for improvement, such as the downloading speed of the first blocks and the duration of the transient phase.

The rarest first algorithm is simple and does not require global knowledge or significant computational resources, yet it guarantees peer availability close to the ideal. While the choke algorithm is not claimed to be optimal, it achieves a reasonable level of efficiency and ensures a viable system by fostering reciprocation and using excess capacity. Solutions based on bit-level tit-for-tat are not appropriate.

Our conclusions are valid in the context of peer-to-peer file replication in the Internet. Other contexts, such as small files, small groups of peers, and ad-hoc networks, are interesting areas for future research.

### Acknowledgment

We thank the anonymous reviewers and Chadi Barakat, Ernst W. Biersack, Walid Dabbous, Katia Obraczka, and Thierry Turletti for their valuable comments.

### References

[1] http://www.slyck.com
[2] http://www.bittorrent.com/
[3] BitTorrent protocol specification v1.0. http://wiki.theory.org/BitTorrentSpecification, June 2005.
[4] R. Bhagwan, S. Savage, and G. Voelker. Understanding availability. In International Workshop on Peer-to-Peer Systems, Berkeley, CA, USA, February 2003.
[5] A. R. Bharambe, C. Herley, and V. N. Padmanabhan. Analysing and improving BitTorrent performance. In Proc. IEEE Infocom’2006, Barcelona, Spain, April 2006.
[6] E. W. Biersack, P. Rodriguez, and P. Felber. Performance analysis of peer-to-peer networks for file distribution. In Proc. Fifth International Workshop on Quality of Future Internet Services (QofIS’04), Barcelona, Spain, September 2004.
[7] Y. Chawathe, S. Ratnasamy, L. Breslau, and S. Shenker. Making Gnutella-like P2P systems scalable. In Proc. ACM SIGCOMM’03, Karlsruhe, Germany, August 25-29 2003.
[8] B. Cohen. Incentives build robustness in BitTorrent. In Proc. First Workshop on Economics of Peer-to-Peer Systems, Berkeley, USA, June 2003.
[9] P. Felber and E. W. Biersack. Self-scaling networks for content distribution. In Proc. International Workshop on Self-* Properties in Complex Information Systems, Bertinoro, Italy, May-June 2004.
[10] P. Ganesan and M. Seshadri. On cooperative content distribution and the price of barter. In IEEE ICDCS’05, Columbus, Ohio, USA, June 2005.
[11] C. Gkantsidis and P. Rodriguez. Network coding for large scale content distribution. In Proc. IEEE Infocom’2005, Miami, USA, March 2005.
[12] K. Gummadi, R. Gummadi, S. Gribble, S. Ratnasamy, S. Shenker, and I. Stoica. The impact of DHT routing geometry on resilience and proximity. In Proc. ACM SIGCOMM’03, Karlsruhe, Germany, August 25-29 2003.
[13] L. Guo, S. Chen, Z. Xiao, E. Tan, X. Ding, and X. Zhang. Measurements, analysis, and modeling of BitTorrent-like systems. In Proc. ACM IMC’2005, Berkeley, CA, USA, October 2005.
[14] M. Izal, G. Urvoy-Keller, E. W. Biersack, P. Felber, A. A. Hamra, and L. Garcés-Erice. Dissecting BitTorrent: Five months in a torrent’s lifetime. In Proc. PAM’04, Antibes Juan-les-Pins, France, April 2004.
[15] S. Jun and M. Ahamad. Incentives in BitTorrent induce free riding. In Proc. SIGCOMM’05 Workshops, Philadelphia, PA, USA, August 2005.
[16] T. Karagiannis, A. Broido, N. Brownlee, and K. C. Claffy. Is P2P dying or just hiding? In Proc. IEEE Globecom’04, Dallas, Texas, USA, Nov. 29-Dec. 3 2004.
[17] T. Karagiannis, A. Broido, M. Faloutsos, and K. C. Claffy. Transport layer identification of P2P traffic. In Proc. ACM IMC’04, Taormina, Sicily, Italy, October 2004.
[18] D. Kostić, R. Braud, C. Killian, E. Vandekieft, J. W. Anderson, A. C. Snoeren, and A. Vahdat. Maintaining high bandwidth under dynamic network conditions. In Proc. USENIX’05, Anaheim, CA, USA, April 2005.
[19] A. Legout, G. Urvoy-Keller, and P. Michiardi. Rarest first and choke algorithms are enough. Technical Report (inria-00001111, version 3 - 6 September 2006), INRIA, Sophia Antipolis, September 2006.
[20] A. Parker. The true picture of peer-to-peer filesharing. http://www.cachelogic.com/, July 2004.
[21] J. A. Pouwelse, P. Garbacki, D. H. J. Epema, and H. J. Sips. The BitTorrent P2P file-sharing system: Measurements and analysis. In Proc. 4th International Workshop on Peer-to-Peer Systems (IPTPS’05), Ithaca, New York, USA, February 2005.
[22] D. Qiu and R. Srikant. Modeling and performance analysis of BitTorrent-like peer-to-peer networks. In Proc. ACM SIGCOMM’04, Portland, Oregon, USA, Aug. 30–Sept. 3 2004.
[23] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker. A scalable content-addressable network. In Proc. ACM SIGCOMM’01, San Diego, California, USA, August 27-31 2001.
[24] P. Rodriguez and E. W. Biersack. Dynamic parallel-access to replicated content in the internet. IEEE/ACM Transactions on Networking, 10(4), August 2002.
[25] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan. Chord: A scalable peer-to-peer lookup service for internet applications. In Proc. ACM SIGCOMM’01, San Diego, California, USA, August 27-31 2001.
[26] X. Yang and G. de Veciana. Service capacity in peer-to-peer networks. In Proc. IEEE Infocom’04, pages 1–11, Hong Kong, China, March 2004.