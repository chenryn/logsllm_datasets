141
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
B. Blockchains and Ledgers
A blockchain (or a chain) (denoted e.g. C) is a sequence
of blocks where each one is connected to the previous one by
containing its hash.
Blockchains (and in general, any sequences) are indexed
using bracket notation. C[i] indicates the ith block, starting
from C[0], the genesis block. C[−i] indicates the ith block from
the end, with C[−1] being the tip of the blockchain. C[i : j]
indicates a subsequence, or subchain of the blockchain starting
from block i (inclusive) and ending at block j (exclusive). Any
of these two indices can be negative. Omitting one of the two
indexes in the range addressing takes the subsequence to the
beginning or the end of the blockchain, respectively. Given
blocks A and Z in C, we let C{A : Z} denotes the subchain
obtained by only keeping the blocks from A (inclusive) to Z
(exclusive). Again any of these two blocks can be omitted to
indicate a subchain from the beginning or to the end of the
blockchain, respectively. In blockchain protocols, each honest
party P maintains a currently adopted chain. We denote CP [t]
the chain adopted by party P at slot t.
A ledger (denoted in bold-face, e.g. L) is a mechanism for
maintaining a sequence of transactions, often stored in the
form of a blockchain. In this paper, we slightly abuse the
language by letting L (without further qualiﬁers) interchange-
ably refer to the algorithms used to maintain the sequence,
and all the views of the participants of the state of these
algorithms when being executed. For example, the (existing)
ledger Bitcoin consists of the set of all transactions that ever
took place in the Bitcoin network, the current UTXO set, as
well as the local views of all the participants.
In contrast, we call a ledger state a concrete sequence of
transactions tx1, tx2, . . . stored in the stable part of a ledger
L, typically as viewed by a particular party. Hence, in every
blockchain-based ledger L, every ﬁxed chain C deﬁnes a
concrete ledger state by applying the interpretation rules given
as a part of the description of L (for example, the ledger state
is obtained from the blockchain by dropping the last k blocks
and serializing the transactions in the remaining blocks). We
maintain the typographic convention that a ledger state (e.g.
L) always belongs to the bold-face ledger of the same name
(e.g. L). We denote by LP [t] the ledger state of a ledger L
as viewed by a party P at the beginning of a time slot t, and
by ˇLP [t] the complete state of the ledger (at time t) including
all pending transactions that are not stable yet. For two ledger
states (or, more generally, any sequences), we denote by (cid:4)
the preﬁx relation.
Recall the deﬁnitions of persistence and liveness of a robust
public transaction ledger given in the most recent version
of [15]:
Persistence. For any two honest parties P1, P2 and two time
slots t1 ≤ t2, it holds LP1 [t1] (cid:4) ˇLP2 [t2].
Liveness. If all honest parties in the system attempt to include
a transaction then, at any slot t after u slots (called the
liveness parameter), any honest party P , if queried, will
report tx ∈ LP [t].
[t] (resp. L∩
For a ledger L that satisﬁes persistence at time t, we denote
by L∪
[t]) the sequence of transactions that are
seen as included in the ledger by at least one (resp., all) of
the honest parties. Finally, length(L) denotes the length of the
ledger L, i.e., the number of transactions it contains.
C. Underlying Proof-of-Stake Protocols
For conciseness we present our construction on a generic
PoS protoocol based on Ouroboros PoS [18]. As we outline
in Appendix C, our construction can be easily adapted to
other provably secure proof-of-stake protocols: Ouroboros
Praos [11], Ouroboros Genesis [2], Snow White [5], and
Algorand [24]. While a full understanding of all details of
these protocols is not required to follow our work (and cannot
be provided in this limited space), an overview of Ouroboros
is helpful to follow the main body of the paper. We provide
this high-level overview here, and point an interested reader
to Appendix C (or the original papers) for details on the other
protocols.
1) Ouroboros: The protocol operates (and was analyzed)
in the synchronous model with semi-adaptive corruptions. In
each slot, each of the parties can determine whether she
qualiﬁes as a so-called slot leader for this slot. The event
of a particular party becoming a slot leader occurs with a
probability proportional to the stake controlled by that party
and is independent for two different slots. It is determined by
a public, deterministic computation from the stake distribution
and so-called epoch randomness (we will discuss shortly
where this randomness comes from) in such a way that for
each slot, exactly one leader is elected.
If a party is elected to act as a slot leader for the current
slot, she is allowed to create, sign, and broadcast a block
(containing transactions that move stake among stakeholders).
Parties participating in the protocol are collecting such valid
blocks and always update their current state to reﬂect the
longest chain they have seen so far that did not fork from
their previous state by too many blocks into the past.
Multiple slots are collected into epochs, each of which
contains R ∈ N slots. The security arguments in [18] require
R ≥ 10k for a security parameter k; we will consider R = 12k
as additional 2k slots in each epoch will be useful for our
construction. Each epoch is indexed by an index j ∈ N. During
an epoch j, the stake distribution that is used for slot leader
election corresponds to the distribution recorded in the ledger
up to a particular slot of epoch j − 1, chosen in a way that
guarantees that by the end of epoch j − 1, there is consensus
on the chain up to this slot. (More concretely, this is the latest
slot of epoch j − 1 that appears in the ﬁrst 4k out of its total
R slots.) Additionally, the epoch randomness ηj for epoch j
is derived during the epoch j − 1 via a guaranteed-output
delivery coin tossing protocol that is executed by the epoch
slot leaders, and is available after 10k slots of epoch j − 1
have passed.
In our treatment, we will refer to the relevant parts of the
above-described protocol as follows:
142
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
GetDistr(j) returns the stake distribution SDj to be used for
epoch j, as recorded in the chain up to slot 4k of epoch
j − 1;
derived during epoch j − 1;
GetRandomness(j) returns the randomness ηj for epoch j as
ValidateConsensusLevel(C) checks the consensus-level valid-
ity of a given chain C: it veriﬁes that all block hashes are
correct, signatures are valid and belong to eligible slot
leaders;
PickWinningChain(C,C) applies the chain-selection rule:
from a set of chains {C} ∪ C it chooses the longest one
that does not fork from the current chain C more than k
blocks in the past;
SlotLeader(U, j, sl, SDj, ηj) determines whether a party U
is elected a slot leader for the slot sl of epoch j, given
stake distribution SDj and randomness ηj.
Moreover, the function EpochIndex (resp. SlotIndex) always
returns the index of the current epoch (resp. slot), and the
event NewEpoch (resp. NewSlot) denotes the start of a new
epoch (resp. slot). Since we use these functions in a black-
box manner, our construction can be readily adapted to PoS
protocols with a similar structure that differ in the details of
these procedures.
Ouroboros was shown in [18] to achieve both persistence
and liveness under the following assumptions: (1) synchronous
communication; (2) 2R-semi-adaptive corruptions; (3) major-
ity of stake in the stake distribution for each epoch is always
controlled by honest parties during that epoch.
III. DEFINING SECURITY OF PEGGED LEDGERS
In this section we give the ﬁrst formal deﬁnition of security
desiderata for a system of pegged ledgers (popularly often
called sidechains). We start by conveying its intuition and then
proceed to the formal treatment.
We consider a setting where a set of parties run a protocol
maintaining n ledgers L1, L2, . . . , Ln, each of the ledgers po-
tentially carrying many different assets. (This protocol might
of course be a combination of subprotocols for each of the
ledgers.) For each i ∈ [n], we denote by Ai
the security
assumption required by Li: For example, Ai may denote that
there has never been a majority of hashing power (or stake
in a particular asset, on this ledger or elsewhere) under the
control of the adversary; that a particular entity (in case of a
centralized ledger) was not corrupted; and so on. We assume
that all Ai are monotone in the sense that once violated,
they cannot become true again. Formally, Ai is a monotone
predicate (which can only go from true to false) evaluated on
the whole execution of the respective ledger protocol.
There is an a priori unlimited number of (types of) assets,
each asset representing e.g. a different cryptocurrency. For
simplicity we assume that assets of the same type are fungible,
but our treatment easily covers also non-fungible assets. We
will allow speciﬁc rules of behavior for each asset (called
validity languages), and each asset behaves according to these
rules on each of the ledgers where it is present.
We will ﬁx an operator merge(·) that merges a set of
ledger states L = {L1, L2, . . . , Ln} into a single ledger state
denoted by merge(L). We will discuss concrete instantiations
of merge(·) later, for now simply assume that some canonical
way of merging all ledger states into one is given.
Informally, at any point during the execution, our security
deﬁnition only provides guarantees to the subset S of ledgers
that have their security assumptions Ai satisﬁed (and hence
are all considered uncorrupted). We require that:
- each ledger in S individually maintains both persistence
and liveness;
- for each asset A, when looking at
the sequence of
all A-transactions σ that occurred on the ledgers in S
(sequentialized via the merge operator), there must exist
a hypothetical sequence of A-transactions τ that could
have happened on the compromised ledgers, such that
the merge of σ and τ would be valid according to the
validity language of A.
We now proceed to formalize the above intuition.
Deﬁnition 1 (Assets, syntactically valid transactions). For an
asset A, we denote by TA the valid transaction set of A, i.e.,
the set of all syntactically valid transactions involving A. For
a ledger L we denote by TL the set of transactions that can be
included into L. For notational convenience, we deﬁne TA,L (cid:2)
TA ∩ TL. Let Assets(L) denote the set of all assets that are
supported by L. Formally, Assets(L) (cid:2) {A : TA,L (cid:9)= ∅}.
We assume that each transaction pertains to a particular
asset and belongs to a particular ledger,
i.e., for distinct
∩ TA2 = ∅
A1 (cid:9)= A2 and L1 (cid:9)= L2, we have that TA1
and TL1 ∩ TL2 = ∅. However, our treatment can be easily
generalized to alleviate this restriction.
We now generically characterize the validity of a sequence
of transactions involving a particular asset. This is captured
individually for each asset via a notion of an asset’s validity
language, which is simply a set of words over the alphabet
of this asset’s transactions. The asset’s validity language is
meant to capture how the asset is mandated to behave in the
system. Let ε denote the empty sequence and (cid:11) represent
concatenation.
Deﬁnition 2 (Asset validity language). For an asset A, the
asset validity language of A is any language VA ⊆ T ∗
A that
satisﬁes the following properties:
1) Base. ε ∈ VA.
2) Monotonicity. For any w, w(cid:5) ∈ T ∗
w (cid:11) w(cid:5) (cid:9)∈ VA.
3) Uniqueness of transactions. Words from VA never con-
tain the same transaction twice: for any tx ∈ TA and any
w1, w2, w3 ∈ T ∗
A we have w1 (cid:11) tx(cid:11) w2 (cid:11) tx(cid:11) w3 (cid:9)∈ VA.
A we have w (cid:9)∈ VA ⇒
The ﬁrst condition in the deﬁnition above is trivial, the
second one mandates the natural property that if a sequence
of transactions is invalid, it cannot become valid again by
adding further transactions. Finally, the third condition reﬂects
a natural “uniqueness” property of transactions in existing
143
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
implementations. While not necessary for our treatment, it
allows for some simpliﬁcations.
The following deﬁnition allows us to focus on a particular
asset or ledger within a sequence of transactions.
Deﬁnition 3 (Ledger state projection). Given a ledger state L,
we call a projection of L with respect to a set X (and denote
by πX (L)) the ledger state that is obtained from L by removing
all transactions not in X . To simplify notation, we will use πA
and πI as a shorthand for πTA and π(cid:2)
i∈I TLi , denoting the
projection of the transactions of a ledger state with respect
to particular asset A or a particular set of individual ledger
indices. Naturally, for a language V we deﬁne the projected
language πX (V) := {πX (w) : w ∈ V}, which contains all the
sequences of transactions from the original language, each of
them projected with respect to X .
The concept of effect transactions below captures ledger
(cid:5)
,
interoperability at the syntactic level.
Deﬁnition 4 (Effect Transactions). For two ledgers L
and L(cid:5)
the form
eﬀectL→L(cid:3) : TL → (TL(cid:3) ∪ {⊥}). A transaction tx
=
eﬀectL→L(cid:3) (tx) (cid:9)= ⊥ is called the effect transaction of the
transaction tx.
the effect mapping is a mapping of
Intuitively, for any transaction tx ∈ TL, the corresponding
transaction eﬀectL→L(cid:3) (tx) ∈ TL(cid:3) ∪ {⊥} identiﬁes the nec-
essary effect on ledger L(cid:5) of the event of the inclusion of
the transaction tx into the ledger L. With foresight, in an
implementation of a system of ledgers where a “pegging”
exists, the transaction eﬀectL→L(cid:3) (tx) has to be eventually
valid and includable in L(cid:5) in response to the inclusion of tx
in L. Additionally, throughout the paper we assume that an
effect transaction is always clearly identiﬁable as such, and its
corresponding “sending” transaction can be derived from it;
our instantiation does have this property.
We use a special symbol ⊥ to indicate that the transaction
tx does not necessitate any action on L(cid:5) (this will be the case
for most transactions). We will now be interested mostly in
transactions that do require an action on the other ledger.
Deﬁnition 5 (Cross-Ledger Transfers). For two ledgers L and
and an effect mapping eﬀectL→L(cid:3) (·), we refer to a transac-
L(cid:5)
tion in TL that requires some effect on L(cid:5)
as a (L, L(cid:5)
)-cross-
ledger transfer transaction (or cross-ledger transfer for short).
L,L(cid:3) ⊆ TL,
The set of all cross-ledger transfers is denoted by T cl
L,L(cid:3) (cid:2) {tx ∈ TL : eﬀectL→L(cid:3) (tx) (cid:9)= ⊥}.
formally T cl
Given ledger states L1, L2, . . . , Ln, we need to consider a
joint ordered view of the transactions in all these ledgers. This
is provided by the merge operator. Intuitively, merge allows
us to create a combined view of multiple ledgers, putting
all of the transactions across multiple ledgers into a linear
ordering. We expect that even if certain ledgers are missing
from its input, merge is still able to produce a global ordering
for the remaining ledgers. With foresight, this ability of the
merge operator will enable us to reason about the situation
when some ledgers fail: In that case, the respective inputs
to the merge function will be missing. The merge function
deﬁnition below depends on the eﬀect mappings, we keep this
dependence implicit for simpler notation.
Deﬁnition 6 (Merging ledger states). The merge(·) func-
tion is any mapping taking a subset of ledger states L ⊆
{L1, L2, . . . , Ln} and producing a ledger state merge(L) such
that:
1) Partitioning. The ledger states in L are disjoint sub-
sequences of merge(L) that cover the whole sequence
merge(L).
2) Topological soundness. For any i (cid:9)= j such that Li, Lj ∈
(cid:5) ∈ Lj, if
L and any two transactions tx ∈ Li and tx
in merge(L).
(cid:5)
tx
We will require that our validity languages are correct in
= eﬀectLi→Lj (tx) then tx precedes tx
(cid:5)
the following sense.
Deﬁnition 7 (Correctness of VA). A validity language VA is
correct with respect to a mapping merge (·), if for any ledger
states L (cid:2) (L1, . . . , Ln) such that πA (merge (L)) ∈ VA,
indices i (cid:9)= j, and any cross-ledger transfer tx ∈ Li ∩ T cl
(cid:5) (cid:9)= ⊥ is not in Lj, we have
such that eﬀectLi→Lj (tx) = tx
Li,Lj
πA (merge (L1, . . . , Li, . . . , Lj (cid:11) tx
(cid:5), . . . , Ln)) ∈ VA .
The above deﬁnition makes sure that
if a cross-ledger
transfer of an asset A is included into some ledger Li and
mandates an effect transaction on Lj, then the inclusion of
this effect transaction will be consistent with VA. Note that this
does not yet guarantee that the effect transaction will indeed
be included into Lj, this will be provided by the liveness of
Lj required below.
We are now ready to give our main security deﬁnition.
In what follows, we call a system-of-ledgers protocol any
protocol run by a (possibly dynamically changing) set of
parties that maintains an evolving state of n ledgers {Li}i∈[n].
Deﬁnition 8 (Pegging security). A system-of-ledgers proto-
col Π for {Li}i∈[n] is pegging-secure with liveness parameter
u ∈ N with respect to:
- validity languages VA for each A ∈(cid:2)
- a set of assumptions Ai for ledgers {Li}i∈[n],
- a merge mapping merge (·),
i∈[n] Assets(Li),
for all PPT adversaries, all slots t and for St (cid:2)
if
{i : Ai is satisﬁed in slot t} we have that except with neg-
ligible probability in the security parameter:
Ledger persistence: For each i ∈ St, Li satisﬁes the
Ledger liveness: For each i ∈ St, Li satisﬁes the liveness