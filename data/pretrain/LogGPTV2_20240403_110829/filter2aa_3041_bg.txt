 "fmt" 
07 
 "log" 
08 ) 
09 
10 // Contact 结构代表我们的 JSON 字符串 
11 type Contact struct { 
12 
 Name    string `json:"name"` 
13 
 Title   string `json:"title"` 
14 
 Contact struct { 
15 
 Home string `json:"home"` 
16 
    Cell string `json:"cell"` 
17 
 } `json:"contact"` 
18 } 
19 
20 // JSON 包含用于反序列化的演示字符串 
21 var JSON = `{ 
22 
 "name": "Gopher", 
23 
 "title": "programmer", 
24 
 "contact": { 
25 
 "home": "415.333.3333", 
26 
 "cell": "415.555.5555" 
27 
 } 
28 }` 
29 
30 func main() { 
31 
 // 将 JSON 字符串反序列化到变量 
32 
 var c Contact 
33 
 err := json.Unmarshal([]byte(JSON), &c) 
34 
 if err != nil { 
35 
 log.Println("ERROR:", err) 
36 
 return 
37 
 } 
38 
39 
 fmt.Println(c) 
40 } 
在代码清单 8-27 中，我们的例子将 JSON 文档保存在一个字符串变量里，并使用 Unmarshal 函
数将 JSON 文档解码到一个结构类型的值里。如果运行这个程序，会得到代码清单 8-28 所示的输出。 
代码清单 8-28  listing27.go 的输出 
{Gopher programmer {415.333.3333 415.555.5555}} 
有时，无法为 JSON 的格式声明一个结构类型，而是需要更加灵活的方式来处理 JSON 文档。
在这种情况下，可以将 JSON 文档解码到一个 map 变量中，如代码清单 8-29 所示。
代码清单 8-29  listing29.go 
01 // 这个示例程序展示如何解码 JSON 字符串 
02 package main 
03 
04 import ( 
05 
 "encoding/json" 
06 
 "fmt" 
07 
 "log" 
08 ) 
09 
10 // JSON 包含要反序列化的样例字符串 
11 var JSON = `{ 
12 
 "name": "Gopher", 
13 
 "title": "programmer", 
14 
 "contact": { 
15 
 "home": "415.333.3333", 
16 
 "cell": "415.555.5555" 
17 
 } 
18 }` 
19 
20 func main() { 
21 
 // 将 JSON 字符串反序列化到 map 变量 
22 
 var c map[string]interface{} 
23 
 err := json.Unmarshal([]byte(JSON), &c) 
24 
 if err != nil { 
25 
 log.Println("ERROR:", err) 
26 
 return 
27 
 } 
28 
29 
 fmt.Println("Name:", c["name"]) 
30 
 fmt.Println("Title:", c["title"]) 
31 
 fmt.Println("Contact") 
32 
 fmt.Println("H:", c["contact"].(map[string]interface{})["home"]) 
33 
 fmt.Println("C:", c["contact"].(map[string]interface{})["cell"]) 
34 } 
代码清单 8-29 中的程序修改自代码清单 8-27，将其中的结构类型变量替换为 map 类型的变
量。变量 c 声明为一个 map 类型，其键是 string 类型，其值是 interface{}类型。这意味
着这个 map 类型可以使用任意类型的值作为给定键的值。虽然这种方法为处理 JSON 文档带来
了很大的灵活性，但是却有一个小缺点。让我们看一下访问 contact 子文档的 home 字段的代
码，如代码清单 8-30 所示。 
代码清单 8-30  访问解组后的映射的字段的代码 
fmt.Println("\tHome:", c["contact"].(map[string]interface{})["home"]) 
因为每个键的值的类型都是 interface{}，所以必须将值转换为合适的类型，才能处理这
个值。代码清单 8-30 展示了如何将 contact 键的值转换为另一个键是 string 类型，值是
interface{}类型的 map 类型。这有时会使映射里包含另一个文档的 JSON 文档处理起来不那
么友好。但是，如果不需要深入正在处理的 JSON 文档，或者只打算做很少的处理，因为不需要
声明新的类型，使用 map 类型会很快。
8.3.2  编码 JSON 
我们要学习的处理 JSON 的第二个方面是，使用 json 包的 MarshalIndent 函数进行编码。
这个函数可以很方便地将 Go 语言的 map 类型的值或者结构类型的值转换为易读格式的 JSON 文
档。序列化（marshal）是指将数据转换为 JSON 字符串的过程。下面是一个将 map 类型转换为 JSON
字符串的例子，如代码清单 8-31 所示。 
代码清单 8-31  listing31.go 
01 // 这个示例程序展示如何序列化 JSON 字符串 
02 package main 
03 
04 import ( 
05 
 "encoding/json" 
06 
 "fmt" 
07 
 "log" 
08 ) 
09 
10 func main() { 
11 
 // 创建一个保存键值对的映射 
12 
 c := make(map[string]interface{}) 
13 
 c["name"] = "Gopher" 
14 
 c["title"] = "programmer" 
15 
 c["contact"] = map[string]interface{}{ 
16 
 "home": "415.333.3333", 
17 
 "cell": "415.555.5555", 
18 
 } 
19 
20 
 // 将这个映射序列化到 JSON 字符串 
21 
 data, err := json.MarshalIndent(c, "", "    ") 
22 
 if err != nil { 
23 
 log.Println("ERROR:", err) 
24 
 return 
25 
 } 
26 
27 
 fmt.Println(string(data)) 
28 } 
代码清单 8-31 展示了如何使用 json 包的 MarshalIndent 函数将一个 map 值转换为 JSON
字符串。函数 MarshalIndent 返回一个 byte 切片，用来保存 JSON 字符串和一个 error 值。
下面来看一下 json 包中 MarshalIndent 函数的声明，如代码清单 8-32 所示。
代码清单 8-32  golang.org/src/encoding/json/encode.go 
// MarshalIndent 很像 Marshal，只是用缩进对输出进行格式化 
func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error) { 
在 MarshalIndent 函 数 里 再 一 次 看 到 使 用 了 空 接 口 类 型 interface{} 。 函 数
MarshalIndent 会使用反射来确定如何将 map 类型转换为 JSON 字符串。
如果不需要输出带有缩进格式的 JSON 字符串，json 包还提供了名为 Marshal 的函数来进
行解码。这个函数产生的 JSON 字符串很适合作为在网络响应（如 Web API）的数据。函数 Marshal
的工作原理和函数 MarshalIndent 一样，只不过没有用于前缀 prefix 和缩进 indent 的参数。 
8.3.3  结论 
在标准库里都已经提供了处理 JSON 和 XML 格式所需要的诸如解码、反序列化以及序列化
数据的功能。随着每次 Go 语言新版本的发布，这些包的执行速度也越来越快。这些包是处理 JSON
和 XML 的最佳选择。由于有反射包和标签的支持，可以很方便地声明一个结构类型，并将其中
的字段映射到需要处理和发布的文档的字段。由于 json 包和 xml 包都支持 io.Reader 和
io.Writer 接口，用户不用担心自己的 JSON 和 XML 文档源于哪里。所有的这些特性都让处
理 JSON 和 XML 变得很容易。 
8.4  输入和输出 
类 UNIX 的操作系统如此伟大的一个原因是，一个程序的输出可以是另一个程序的输入这一
194
第 8 章  标准库 
理念。依照这个哲学，这类操作系统创建了一系列的简单程序，每个程序只做一件事，并把这件
事做得非常好。之后，将这些程序组合在一起，可以创建一些脚本做一些很惊艳的事情。这些程
序使用 stdin 和 stdout 设备作为通道，在进程之间传递数据。 
同样的理念扩展到了标准库的 io 包，而且提供的功能很神奇。这个包可以以流的方式高效
处理数据，而不用考虑数据是什么，数据来自哪里，以及数据要发送到哪里的问题。与 stdout
和 stdin 对应，这个包含有 io.Writer 和 io.Reader 两个接口。所有实现了这两个接口的
类型的值，都可以使用 io 包提供的所有功能，也可以用于其他包里接受这两个接口的函数以及
方法。这是用接口类型来构造函数和 API 最美妙的地方。开发人员可以基于这些现有功能进行组
合，利用所有已经存在的实现，专注于解决业务问题。 
有了这个概念，让我们先看一下 io.Wrtier 和 io.Reader 接口的声明，然后再来分析展
示了 io 包神奇功能的代码。 
8.4.1  Writer 和 Reader 接口 
io 包是围绕着实现了 io.Writer 和 io.Reader 接口类型的值而构建的。由于 io.Writer
和 io.Reader 提供了足够的抽象，这些 io 包里的函数和方法并不知道数据的类型，也不知道
这些数据在物理上是如何读和写的。让我们先来看一下 io.Writer接口的声明，如代码清单8-33
所示。 
代码清单 8-33  io.Writer 接口的声明 
type Writer interface { 
 Write(p []byte) (n int, err error) 
} 
代码清单 8-33 展示了 io.Writer 接口的声明。这个接口声明了唯一一个方法 Write，这
个方法接受一个 byte 切片，并返回两个值。第一个值是写入的字节数，第二个值是 error 错
误值。代码清单 8-34 给出的是实现这个方法的一些规则。 
代码清单 8-34  io.Writer 接口的文档 
Write 从 p 里向底层的数据流写入 len(p)字节的数据。这个方法返回从 p 里写出的字节
数（0  0 字节后，如果遇到错误或者文件读取完成，Read 方法会返回 
读入的字节数。方法可能会在本次调用返回一个非 nil 的错误，或者在下一次调用时返 
回错误（同时 n == 0）。这种情况的的一个例子是，在输入的流结束时，Read 会返回 
非零的读取字节数，可能会返回 err == EOF，也可能会返回 err == nil。无论如何， 
下一次调用 Read 应该返回 0, EOF。 
(3) 调用者在返回的 n > 0 时，总应该先处理读入的数据，再处理错误 err。这样才 
能正确操作读取一部分字节后发生的 I/O 错误。EOF 也要这样处理。 
(4) Read 的实现不鼓励返回 0 个读取字节的同时，返回 nil 值的错误。调用者需要将 
这种返回状态视为没有做任何操作，而不是遇到读取结束。
标准库里列出了实现 Read 方法的 4 条规则。第一条规则表明，该实现需要试图读取数据来
填满被传入的 byte 切片。允许出现读取的字节数小于 byte 切片的长度，并且如果在读取时已
经读到数据但是数据不足以填满 byte 切片时，不应该等待新数据，而是要直接返回已读数据。 
第二条规则提供了应该如何处理达到文件末尾（EOF）的情况的指导。当读到最后一个字节
时，可以有两种选择。一种是 Read 返回最终读到的字节数，并且返回 EOF 作为错误值，另一
种是返回最终读到的字节数，并返回 nil 作为错误值。在后一种情况下，下一次读取的时候，
由于没有更多的数据可供读取，需要返回 0 作为读到的字节数，以及 EOF 作为错误值。
第三条规则是给调用 Read 的人的建议。任何时候 Read 返回了读取的字节数，都应该优先
处理这些读取到的字节，再去检查 EOF 错误值或者其他错误值。最终，第四条约束建议 Read
方法的实现永远不要返回 0 个读取字节的同时返回 nil 作为错误值。如果没有读到值，Read 应
该总是返回一个错误。 
现在知道了 io.Writer 和 io.Reader 接口是什么样子的，以及期盼的行为是什么，让我
们看一下如何在程序里使用这些接口以及 io 包。
8.4.2  整合并完成工作 
这个例子展示标准库里不同包是如何通过支持实现了io.Writer接口类型的值来一起完成
196 
第 8 章  标准库 
工作的。这个示例里使用了 bytes、fmt 和 os 包来进行缓冲、拼接和写字符串到 stdout，如
代码清单 8-37 所示。 
代码清单 8-37  listing37.go 
01 // 这个示例程序展示来自不同标准库的不同函数是如何
02 // 使用 io.Writer 接口的
03 package main 
04 
05 import ( 
06 