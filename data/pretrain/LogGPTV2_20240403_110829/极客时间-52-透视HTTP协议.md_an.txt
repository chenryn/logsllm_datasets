## 应用层协议第三个特点，[HTTP 协议是一个应用层的协议]{.orange}。这个特点也是不言自明的，但却很重要。在 TCP/IP诞生后的几十年里，虽然出现了许多的应用层协议，但它们都仅关注很小的应用领域，局限在很少的应用场景。例如FTP 只能传输文件、SMTP 只能发送邮件、SSH只能远程登录等，在通用的数据传输方面"完全不能打"。所以 HTTP凭借着可携带任意头字段和实体数据的报文结构，以及连接控制、缓存代理等方便易用的特性，一出现就"技压群雄"，迅速成为了应用层里的"明星"协议。只要不太苛求性能，HTTP几乎可以传递一切东西，满足各种需求，称得上是一个"万能"的协议。套用一个网上流行的段子，HTTP完全可以用开玩笑的口吻说："不要误会，我不是针对FTP，我是说在座的应用层各位，都是垃圾。"
## 请求 - 应答第四个特点，[HTTP 协议使用的是请求 - 应答通信模式]{.orange}。这个请求 - 应答模式是 HTTP协议最根本的通信模型，通俗来讲就是"一发一收""有来有去"，就像是写代码时的函数调用，只要填好请求头里的字段，"调用"后就会收到答复。请求 - 应答模式也明确了 HTTP协议里通信双方的定位，永远是请求方先发起连接和请求，是主动的，而应答方只有在收到请求后才能答复，是被动的，如果没有请求时不会有任何动作。当然，请求方和应答方的角色也不是绝对的，在浏览器 -服务器的场景里，通常服务器都是应答方，但如果将它用作代理连接后端服务器，那么它就可能同时扮演请求方和应答方的角色。HTTP 的请求 - 应答模式也恰好契合了传统的C/S（Client/Server）系统架构，请求方作为客户端、应答方作为服务器。所以，随着互联网的发展就出现了B/S（Browser/Server）架构，用轻量级的浏览器代替笨重的客户端应用，实现零维护的"瘦"客户端，而服务器则摈弃私有通信协议转而使用HTTP 协议。此外，请求 - 应答模式也完全符合 RPC（Remote ProcedureCall）的工作模式，可以把 HTTP 请求处理封装成远程函数调用，导致了WebService、RESTful 和 gPRC 等的出现。
## 无状态第五个特点，[HTTP 协议是无状态的]{.orange}。这个所谓的"状态"应该怎么理解呢？"状态"其实就是客户端或者服务器里保存的一些数据或者标志，记录了通信过程中的一些变化信息。你一定知道，TCP 协议是有状态的，一开始处于 CLOSED 状态，连接成功后是ESTABLISHED 状态，断开连接后是 FIN-WAIT 状态，最后又是 CLOSED 状态。这些"状态"就需要 TCP在内部用一些数据结构去维护，可以简单地想象成是个标志量，标记当前所处的状态，例如0 是 CLOSED，2 是 ESTABLISHED 等等。再来看 HTTP，那么对比一下 TCP就看出来了，在整个协议里没有规定任何的"状态"，客户端和服务器永远是处在一种"**无知**"的状态。建立连接前两者互不知情，每次收发的报文也都是互相独立的，没有任何的联系。收发报文也不会对客户端或服务器产生任何影响，连接后也不会要求保存任何信息。"无状态"形象地来说就是"没有记忆能力"。比如，浏览器发了一个请求，说"我是小明，请给我A 文件。"，服务器收到报文后就会检查一下权限，看小明确实可以访问 A文件，于是把文件发回给浏览器。接着浏览器还想要 B文件，但服务器不会记录刚才的请求状态，不知道第二个请求和第一个请求是同一个浏览器发来的，所以浏览器必须还得重复一次自己的身份才行："我是刚才的小明，请再给我B 文件。"我们可以再对比一下 UDP协议，不过它是无连接也无状态的，顺序发包乱序收包，数据包发出去后就不管了，收到后也不会顺序整理。而HTTP 是有连接无状态，顺序发包顺序收包，按照收发的顺序管理报文。但不要忘了 HTTP是"灵活可扩展"的，虽然标准里没有规定"状态"，但完全能够在协议的框架里给它"打个补丁"，增加这个特性。
## 其他特点除了以上的五大特点，其实 HTTP协议还可以列出非常多的特点，例如传输的实体数据可缓存可压缩、可分段获取数据、支持身份认证、支持国际化语言等。但这些并不能算是HTTP 的基本特点，因为这都是由第一个"灵活可扩展"的特点所衍生出来的。
## 小结1.  [HTTP 是灵活可扩展的，可以任意添加头字段实现任意功能；]{.orange}2.  [HTTP 是可靠传输协议，基于 TCP/IP    协议"尽量"保证数据的送达；]{.orange}3.  [HTTP 是应用层协议，比 FTP、SSH    等更通用功能更多，能够传输任意数据；]{.orange}4.  [HTTP 使用了请求 -    应答模式，客户端主动发起请求，服务器被动回复请求；]{.orange}5.  [HTTP    本质上是无状态的，每个请求都是互相独立、毫无关联的，协议不要求客户端或服务器记录请求相关的信息。]{.orange}
## 课下作业1.  就如同开头我讲的那样，你能说一下今天列出的这些 HTTP    的特点中哪些是优点，哪些是缺点吗？2.  不同的应用场合有不同的侧重方面，你觉得哪个特点对你来说是最重要的呢？欢迎你把自己的答案写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，欢迎你把文章分享给你的朋友。![unpreview](Images/809a0aaaae8c5da18dbbc6f27d99826b.png){savepage-src="https://static001.geekbang.org/resource/image/a2/7d/a233c19f92c566614e4e0facbaeab27d.png"}![unpreview](Images/4913a489805db29b38aefa585223c013.png){savepage-src="https://static001.geekbang.org/resource/image/56/63/56d766fc04654a31536f554b8bde7b63.jpg"}
# 14 \| HTTP有哪些优点？又有哪些缺点？上一讲我介绍了 HTTP的五个基本特点，这一讲要说的则是它的优点和缺点。其实这些也应该算是 HTTP的特点，但这一讲会更侧重于评价它们的优劣和好坏。上一讲我也留了两道课下作业，不知道你有没有认真思考过，今天可以一起来看看你的答案与我的观点想法是否相符，共同探讨。不过在正式开讲之前我还要提醒你一下，今天的讨论范围仅限于HTTP/1.1，所说的优点和缺点也仅针对 HTTP/1.1。实际上，专栏后续要讲的HTTPS 和 HTTP/2 都是对 HTTP/1.1 优点的发挥和缺点的完善。
## 简单、灵活、易于扩展首先，HTTP 最重要也是最突出的优点是"**简单、灵活、易于扩展**"。初次接触 HTTP 的人都会认为，HTTP协议是很"**简单**"的，基本的报文格式就是"header+body"，头部信息也是简单的文本格式，用的也都是常见的英文单词，即使不去看RFC 文档，只靠猜也能猜出个"八九不离十"。可不要小看了"简单"这个优点，它不仅降低了学习和使用的门槛，能够让更多的人研究和开发HTTP 应用，而且我在[第 1讲](https://time.geekbang.org/column/article/97837)时就说过，"简单"蕴含了进化和扩展的可能性，所谓"少即是多"，"把简单的系统变复杂"，要比"把复杂的系统变简单"容易得多**。**所以，在"简单"这个最基本的设计理念之下，HTTP协议又多出了"**灵活和易于扩展**"的优点。``{=html}"灵活和易于扩展"实际上是一体的，它们互为表里、相互促进，因为"灵活"所以才会"易于扩展"，而"易于扩展"又反过来让HTTP 更加灵活，拥有更强的表现能力。HTTP协议里的请求方法、URI、状态码、原因短语、头字段等每一个核心组成要素都没有被"写死"，允许开发者任意定制、扩充或解释，给予了浏览器和服务器最大程度的信任和自由，也正好符合了互联网"自由与平等"的精神------缺什么功能自己加个字段或者错误码什么的补上就是了。"请勿跟踪"所使用的头字段 DNT（Do Not Track）就是一个很好的例子。它最早由Mozilla 提出，用来保护用户隐私，防止网站监测追踪用户的偏好。不过可惜的是DNT 从推出至今有差不多七八年的历史，但很多网站仍然选择"无视"DNT。虽然DNT 基本失败了，但这也正说明 HTTP协议是"灵活自由的"，不会受单方面势力的压制。"灵活、易于扩展"的特性还表现在 HTTP对"可靠传输"的定义上，它不限制具体的下层协议，不仅可以使用 TCP、UNIXDomain Socket，还可以使用 SSL/TLS，甚至是基于 UDP 的QUIC，下层可以随意变化，而上层的语义则始终保持稳定。