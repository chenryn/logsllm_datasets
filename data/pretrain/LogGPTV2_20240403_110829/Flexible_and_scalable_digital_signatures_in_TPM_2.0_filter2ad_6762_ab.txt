and R2 :=
2 . B patches the random oracle such that c :=
2 · K
−c
P s
H(R1, R2, m). B outputs (m, P1, P2, R1, R2, K2, c, s)
as the signature. Observe that the distribution of this
simulated signature by B is the same as the distribu-
tion of a real tpm.sign signature.
1 and K2 = P x
1 · K
−c
1
The static DH assumption is that it is computationally
infeasible to solve the static DH problem. The static DH
assumption is a stronger assumption than the discrete log
assumption, as if one can solve the discrete log problem, then
he can solve the static DH problem as well. It is believed
in the cryptography community that the static DH problem
is a computationally hard problem. Several cryptographic
protocols rely on the static DH assumption, such as the basic
El Gamal encryption [19], Ford-Kaliski server-assisted key
generation protocol [21], and Chaum and van Antwerpen’s
Undeniable Signatures [12]. These protocols provide a static
DH oracle on the secret key to the adversary.
To prove security of the tpm.sign scheme, we ﬁrst re-
view the well-known forking lemma from Pointcheval and
Stern [26]. For a signature scheme based on three-pass
honest-veriﬁer zero-knowledge identiﬁcation protocol using
the Fiat and Shamir transformation [20], such as the Schnorr
signature [28], a signature of a message m is a triple (σ1, h, σ2),
where σ1 represents all successive “commitment” of the pro-
tocol, h = H(σ1, m) where H is a hash function, and σ2
represents all successive “answers” of the protocol.
Query on OC : If A makes a commit query on OC to B
with P1 and str as input, B computes P2 := HG(str)
and queries the static DH oracle with P1 and P2 and
2 , respectively. B
obtains K1 = P x
1 ·
chooses at random c and s, and computes R1 = P s
2 . B outputs (R1, R2, K2). It
−c
K
is easy to see that that this simulation of (R1, R2, K2)
is perfect.
1 and K2 = P x
2 · K
and R2 = P s
−c
1
Query on OS: If A makes a signing query on OS to B
with ch and m as input. B checks whether (ch, m) has
been queries before. If not, B sets c := H2(ch, m) and
outputs (c, s) where c and s were chosen in the com-
If (ch, m) has been queried before
mit oracle query.
and H2(ch, m) is diﬀerent from c in the corresponding
commitment query, B returns failure. Clearly, the sig-
nature (m, P1, P2, R1, R2, K2, c, s) generated from OC
and OS queries can be veriﬁed correctly by A. Fur-
thermore, the distribution of this simulated signature
by B is computationally indistinguishable with a real
tpm.sign signature.
39Forgery: After A makes the above queries, A outputs a
forged signature (m, P1, P2, R1, R2, K2, c, s) that can
be successfully veriﬁed. Using the forking lemma above
(Lemma 1), we can build another simulator B’ such
that A outputs two valid tpm.sign signatures σ1 =
(m, P1, P2, R1, R2, K2, m, c, s) and σ2 = (m, P1, P2, R1,
R2, K2, c
1 . Since both signatures
can be veriﬁed, we have
). Let K1 = P x
, s
(cid:3)
(cid:3)
1 = P s
1 ,
(cid:2)
1 ,
(cid:2)
2 .
(cid:2)
1 = P s
(cid:2)
2 = P s
R1 · K c
R1 · K c
R2 · K c
R2 · K c
2 = P s
2 ,
and Δs = s − s
Let Δc = c − c
(cid:3)
(cid:3)
, we have K Δc
1 = P Δs
and K Δc
2 = P Δs
, where at least one of P1 and P2 is not
the identity element. The algorithm B’ can compute
x := Δs/Δc where x = logP1 K1 = logP2 K2. In other
words, B’ can compute the secret key x of the static
DH and break the static DH problem.
1
2
Observe that there is a loss of eﬃciency in the reduction, due
to possible failure in the query on OS. Since ch = (R1, R2), if
A follows the signing procedure, the chance of (ch, m) being
queried before is negligible. Therefore, under the static DH
assumption, the tpm.sign scheme is secure.
Although security of the tpm.sign scheme is proved under
the static DH assumption, in its implementation of TPM 2.0
there is no obvious way that an adversary can use the TPM
as a static DH oracle viaOC . This is because TPM computes
P2 = HG(str) rather than accepting any P2 value chosen by
the adversary. Whether security of tpm.sign can be proved
without the static DH assumption is an open question.
3.
IMPLEMENTATION OF tpm.sign
In this section, we present how the tpm.sign scheme is
implemented in TPM 2.0. We start with some relevant terms
and notation and then explain the commands that are used
to implement tpm.sign.
3.1 Terms and Notation
Throughout the paper, we use the notation shown in Ta-
ble 1. We now introduce a few terms, which will be used to
implement tpm.sign.
• Key handle: If a key is associated with multiple com-
mands, the connection between these commands is pre-
sented as a key handle that uniquely identiﬁes the key.
A key handle is a 32-bit random value. The TPM as-
signs a key handle when a key is loaded into the TPM.
When the key is subsequently used in another com-
mand (or multiple commands), the handle is taken as
input for this command (or these commands). If more
than one key are involved in a command, all handles
of these keys are taken as input for the command.
• Key name: The name of an asymmetric key is used for
identifying the key externally. It is a message digest
of the public portion of the key. It is usually used for
computing and verifying the integrity value of the key.
• Key blob: For the reason of limiting TPM resources,
most TPM keys are not stored inside of the TPM.
Each key is stored outside of the TPM in a format
called a key blob, and it is associated with a parent
Notation
ek
epk/esk
tk
tpk/tsk
k.handle
k.name
kdf(s)
mack(m)
enck(m)
deck(c)
sigk(m)
(m)k
−1
(c)
∗
k
(k)
enck1 (k2, m)
x(cid:12)y
x ← S
|x|
Descriptions
TPM endorsement key pair
public/private portion of ek
asymmetric key created by TPM
public/private portion of tk
handle of k used for identifying the key in-
ternally by a TPM
name of k used for identifying the key ex-
ternally
key derivation function using s as seed
message authentication code of m com-
puted using key k
encryption of m under public key k
decryption of c under private key k
signature of m signed under key k
encryption of m under symmetric key k
decryption of c under symmetric key k
key blob of k wrapped by another key
encryption blob of m under key k1 associ-
ated with key k2
concatenation of x and y
x chosen equally at random from a set S
bit size of x
Table 1: Notation used in this paper
key, say parentK, for the purpose of safe storage and
integrity check. For an asymmetric key pair, written
as tk = (tpk, tsk), the key blob includes the following
information: the private part of the key tsk encrypted
under the parent key, the public part of the key tpk,
and an integrity tag. The tag allows the TPM to verify
integrity and authenticity of the key and is achieved by
using a message authentication code (mac). Both the
encryption key sk and MAC key mk are derived from
parentK by using a key derivation function (kdf). In
the rest of this paper, a key blob of tk is denoted as
∗
(tk)
if we do not specify which key the parent key is.
The following is an example of a key blob of tk under
the parent key parentK:
(sk, mk) :=kdf (parentK),
∗
(tk)
:= (tsk)sk(cid:12)tpk(cid:12)macmk((tsk)sk(cid:12)tpk.name).
• Encryption blob: Let k1 and k2 be two asymmetric
public keys of a TPM. To send a message m to the
TPM such that only the TPM possessing k1 and k2 can
release m to the host platform, we use the following
encryption blob which encrypts m. The encryption
blob has the following format
enck1 (k2, m) = (seed )k1(cid:12)(m)sk(cid:12)macmk((m)sk(cid:12)k2.name),
where seed is a random secret seed value, sk is a sym-
metric encryption key and mk is a message authentica-
tion key, both derived from seed . The encryption blob
is a KEM-DEM type of encryption over m. To release
the value m to the caller, the TPM must be satisﬁed
that both k1 and k2 have been loaded in the TPM.
3.2 The Relevant TPM Commands
All TPM functions are served by using a set of TPM com-
mands. Each command is speciﬁed by its input and output,
40and an operation between the input and output. Most of the
TPM commands have multiple options, regarding to diﬀer-
ent types of keys and applications. For simplicity, we only
explain these options which are related to the tpm.sign im-
plementation and its applications that will be discussed in
the later part of the paper. For the same reason, we may
also omit some input and output information if they are not
relevant to our purposes. The following TPM 2.0 commands
are used to implement the tpm.sign scheme.
3.2.1 Key Generation: TPM2 Create()
This command is used to generate a TPM asymmetric key
pair tk for tpm.sign. The command takes a handle of a parent
key (say parentK) and public parameters as input, creates a
fresh asymmetric key pair tk = (tpk, tsk), and outputs a
∗
wrapped key blob, denoted as (tk)
as described before. In
the remaining of the paper, we use
∗←TPM2 Create()
(tk)
or
(tk)
∗←Create()
to denote this command and omit the information on how
tsk was encrypted by the parent key or which key is the
parent key. In the context of tpm.sign, to respond to this
command, the TPM performs the following steps:
1. TPM picks a random x ← Zp and computes y = gx,
where the values p and g are a part of the public pa-
rameters as described in Section 2.
2. TPM sets tpk := y, tsk := x, and tk := (tpk, tsk).
3. TPM wraps tk with the parent key and outputs a key
∗
blob (tk)
.
A variation of this command is TPM2 CreatePrimary(), in
which the private key tsk is derived from a primary seed of
the TPM using a key derivation function (kdf). A primary
seed is a secret key stored inside of the TPM. As a result,
the key tk is an alternative version of the primary seed. The
same primary seed can be used to create multiple keys. In
order to make each created key unique, some index value(s)
shall be used. For simplicity, in the remaining of this paper,
we will keep using TPM2 Create() only.
3.2.2 Load a Key into TPM: TPM2 Load()
When the TPM creates tk in TPM2 Create(), it does not
In order to use tk,
store a copy of this key internally.
the key has to be loaded into the TPM using the com-
mand TPM2 Load(). This command takes as input a parent
∗
key handle and a key blob (tk)
, which was created under
∗←TPM2 Create(). The TPM veriﬁes integrity of the
(tk)
key. If the veriﬁcation succeeds, the TPM outputs a han-
dle (tk.handle) and the name (tk.name) for the key. In the
remaining part of the paper, we use
(tk.handle, tk.name)←TPM2 Load((tk)
∗
)
or tk.handle←Load((tk)
∗
)
to denote this command. After TPM2 Load() has been called,
tk is now stored inside the TPM and can be used for future
operations.
3.2.3 Certify a TPM Key: TPM2 ActivateCredential()
To provision a certiﬁcate to the TPM key tk, the com-
mand TPM2 ActivateCredential() is used. Suppose that the
TPM has an asymmetric endorsement key pair ek, and an
authentic copy of the public portion of this key, epk, is acces-
sible to a Certiﬁcate Authority (CA). The TPM associated
computer platform sends tpk along with epk to the CA for
certiﬁcation. The CA checks that epk is a valid TPM en-
dorsement key, and then computes a certiﬁcate (say cert)
associated with tpk, generates a fresh symmetric encryption
key k, computes the encryption blob encepk(tpk, k) along
with the encrypted certiﬁcate (cert)k, and sends the encryp-
tion blob and encrypted certiﬁcate back to the platform.
The platform uses the TPM2 ActivateCredential() com-
mand to let the TPM decrypt and release the symmetric
key k, but the TPM will only respond to this command if
the TPM has the corresponding esk and the loaded tk. The
command has following input: a handle of ek, a handle of
tk, and an encryption blob encepk(tpk, k) of a secret key k.
The encryption blob has the following format
encepk(tpk, k) = (seed )epk(cid:12)(k)sk(cid:12)macmk((k)sk(cid:12)tk.name).
In the remaining part of the paper, we use
m←TPM2 ActivateCredential(k1.handle, k2.handle, c)
or m←ActivateCredential(k1, k2, c)
to denote this command. In the content of tpm.sign m is the
symmetric key k, k1 is ek, k2 is tk and c is encepk(tpk, k).
Suppose that the TPM has both keys internally. To respond
to this command the TPM performs the following steps:
1. Decrypt (seed )k1 using k1 to obtain seed .
2. Derive sk and mk from seed , i.e., sk(cid:12)mk := kdf(seed ).
3. Retrieve k2.name and compute macmk((k)sk(cid:12)k2.name).
4. Check whether the computed mac value matches the
mac value in c.
5. If mismatch, return failure; otherwise, decrypt (k)sk
and output k.