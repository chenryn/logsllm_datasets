### Processing Events with Observed Durations in the Timing Process

#### 4.1. Single Process Experiment

In this section, we demonstrate that a single process is unable to reliably detect remapped keys due to system noise. Our initial observation was that the X server and X client ran consecutively (see Figure 1). This means that our timing process did not run between the X server and X client. We determined that this was because our timing process was CPU-intensive, leading to a lower scheduling priority, which prevented it from being scheduled before the X client. Additionally, other processes sometimes ran during this window, further extending the duration between our timing measurements and introducing variability due to cache conflicts. As a result, the noise in the system prevented us from reliably detecting remapped keys.

#### 4.2. Confirming the Side Channel

To determine if there is a detectable timing channel in X key processing, we conducted a second experiment in two steps:

1. **Direct Measurement within the X Client:**
   - We measured the `XLookupString` function directly from within the X client.
   - The hypothesis was that if a timing channel exists, the X client processing times for remapped keys should be noticeably longer.
   - We found that processing a remapped character consistently took over 15,000 additional cycles compared to non-remapped characters, which were processed in 5,000 to 7,000 cycles. Remapped characters took over 25,000 cycles.

2. **External Process Verification:**
   - We verified that an external, unprivileged process could detect the timing delay under idealized conditions.
   - We used semaphores to synchronize the X client and the attack program, allowing the attack program to take timing measurements after each `XLookupString` processing.
   - Table 1 shows the resultant times over eight runs, where the fourth character in the password "try2find" (i.e., the '2') is mapped to the euro character. The remapped character processing took at least 10,000 cycles more than any other character, with an average difference of close to 20,000 cycles.
   - These experiments confirmed that the timing channel in X client key processing can be detected by an unprivileged, external process.

| Run 1 | Run 2 | Run 3 | Run 4 | Run 5 |
|-------|-------|-------|-------|-------|
| 16095 | 17411 | 13821 | 11917 | 12776 |
| 11290 | 37942 | 37410 | 11746 | 12901 |
| 17146 | 12171 | 10830 | 15950 | 12563 |
| 14462 | 18530 | 12123 | 14653 | 39439 |
| 12288 | 16296 | 11359 | 14813 | 13699 |
| 15643 | 10735 | 37272 | 11615 | 15445 |
| 12209 | 17275 | 16581 | 10424 | 14674 |
| 32001 | 15361 | 11777 | 12882 | 13609 |

**Table 1. Cycle counts for X client key processing of `XLookupString` from an external, unprivileged process.**

#### 4.3. Multithreaded Experiment

In this section, we show that a multithreaded timing process can detect remapped keys. The reason is that multiple threads can exploit the scheduler to maintain the highest interactive priority, allowing the timing thread to run between the X server and the X client, thus accurately measuring the X client's CPU duration.

**Scheduler Timeline with Multiple Timing Processes and X Windows Processing:**
- Timing processes run at the same priority as the X client victim, so they run both right before and right after the X client (see Figure 2).

**Attack Program Design:**
- We use multiple timing threads to time the victim X clientâ€™s processing. These threads use semaphores to hand off responsibility for timing.
- Pseudo-code skeleton for each timing thread:
  ```c
  while() { // timing loop
      sem_wait(sem_id1); // block awaiting increment of semaphore
      time1 = sample_the_timer();
      if(time1 is in range of interest)
          record time1;
      sem_post(sem_id2); // increment the semaphore for next timing thread
  }
  ```

**Results:**
- Table 2 shows the results for the implementation, where the string "try2find" was entered with the character '2' remapped. Regular characters are in the range of 30,000 to 45,000 cycles, while the remapped character ranges between 55,000 and 75,000 cycles.

| Run 1 | Run 2 | Run 3 | Run 4 | Run 5 |
|-------|-------|-------|-------|-------|
| 47572 | 47147 | 43398 | 31598 | 30639 |
| 29026 | 64316 | 65099 | 28793 | 31195 |
| 45323 | 27953 | 33041 | 40314 | 27704 |
| 43798 | 42468 | 33740 | 39900 | 53888 |
| 39115 | 33941 | 40005 | 32707 | 47223 |
| 32462 | 35825 | 62909 | 32239 | 40367 |
| 28643 | 28644 | 42488 | 30385 | 26788 |
| 59987 | 35956 | 32694 | 46316 | 29866 |

**Table 2. Timing the keypresses from the multithreaded attack program (timed in cycles).**

**Solving the Noise Problem:**
- To address the issue of extraneous processing, we noted that keyboard processing consists of the X server processing (around 150,000 to 250,000 cycles) immediately followed by the X client processing (approximately 30,000 to 80,000 cycles).
- Using this signature helps to remove most of the noise from the channel.

**Output Showing Remapped and Non-Remapped Keys:**
- Table 3 shows a typical output sequence, where the left column contains X server process durations, and the second column contains X client process durations.

| X Server Duration | X Client Duration | Remap Status |
|-------------------|-------------------|--------------|
| 228086            | Not remapped      |              |
| 157738            | Not remapped      |              |
| 169017            | 208754            | Remapped     |
| 144332            | Not remapped      |              |
| 249284            | 219884            | Not remapped |
| 42068             | 34192             | Not remapped |
| 51962             | 37976             | Not remapped |
| 27710             | 42095             | Not remapped |
| 45322             |                   |              |

**Table 3. Output showing remapped and non-remapped keys (timed in cycles).**

**Identification of Return Key:**
- Password entry is often followed by a return character. If the timing process can identify the return character, it can remap the keyboard back to its original state, preventing detection.
- In our Linux 2.6 experiments, the X client has a consistent signature for the return key processing, as shown in Table 4.

| Run 1 | Run 2 |
|-------|-------|
| 181469 (X) | 178566 (X) |
| 120042    | 198459    |
| 128269    | 95050     |
| 125654    | 207160    |
| 134359    | 82294     |

**Table 4. Return key signature, as seen in two typical runs starting with X server processing (X), measured in cycles.**

**Test Results:**
- Using the described algorithm, we tested a generic X client on a Linux 2.6 system. Each test involved entering the same 8-character password, with one key remapped per test.
- The amount of noise was minimal, and the results were fairly accurate, with a success rate of over 90% when excluding the first character.
- Upper case characters include both a shift key processing time and the upper case key time, with longer processing times for remapped keys.

**Optimal Remapping Strategy:**
- We also experimented with remapping multiple keys. When more than one password character is remapped, the second character's processing time increases, but the overall strategy remains effective.

**Test Results Summary:**
- The results indicate that the multithreaded design remains priority stable, and the remapping strategy is effective for detecting remapped keys.