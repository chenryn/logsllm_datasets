statements, splitting 24
static keyword 265
static linking, vs. dynamic 
linking 227–228
static type systems 8
staticExec procedure 262
staticRead procedure 262
Stats type 169–170
stdin variable 66
StmtList node 264, 277
storage duration 232
storing
data in databases 189–200
setting up databases
192–194
Licensed to   
301
INDEX
storing, data in databases 
(continued)
setting up types 190–192
testing databases 198–200
defining storage 30–33
different versions of single 
package 147–148
streams, reading data from
66–68
string formatting operator 201
string type 26, 29–30
stropping 23
struct tm type 232
structural typing 50
structures of data 111–117
modules 117
sets module 114–115
tables module 112–114
strutils module 8, 18, 30
style insensitive 6, 8, 32
subroutines 16, 33
subscribing, Twitter 185
substitution, of parameters in 
templates 257–258
substr procedure 110
surname argument 37
switch statements 44
synchronous execution 85–86
syntax
abstract syntax trees 262–265
comments 25
indentation 23–24
keywords 23
system module 26, 42, 110, 127
system.cmp procedure 116
system-level package managers
129
T
tables module 111–114, 127
tags 134
tailDir procedure 119
target architecture, Nim and C 
compiler disagree on
289
task 151
TCP sockets 82
telnet application 91
templates 254–260
hygiene 259–260
parameter substitution in
257–258
passing code blocks to
256–257
testing
configurators 278
new IDEs 287–289
server without clients 91–92
thread module 111
threadpool modules 156–159
defined 157
executing 155–156
retrieving return values from 
FlowVar types 158–159
using spawn with 157–158
threads 153–159
exceptions in 159
GC (garbage collector) safety
153–156
modules 153–156
sending and receiving mes-
sages between, using 
channels 176–178
using pools 156–159
defined 157
retrieving return values 
from FlowVar types
158–159
using spawn with 157–158
time command 172
time procedure 231
TimeInfo object 191, 213
TimeInterval object 213
time_t type 232
tokens 170
toLowerAscii 124
top-level statements 288
toString parameter 203, 207
toUpper procedure 8
toUpperAscii 124
transferring data
asynchronously 91–99
adding network functional-
ity to client 95–98
creating new Client 
instance to hold data 
about client 92
final results of 98–99
processing client messages
92–95
sending messages to other 
clients 95
testing server without 
client 91–92
using sockets 79–99
asynchronous I/O (input/
output) 83–91
asynchronously 91–99
transport protocol 60
triple-quoted string literals 30
troubleshooting 289–290
could not load DLL 289–290
Nim and C compiler disagree 
on target architecture
289
Nim command not found
289
try keyword 48
try statement 47–48
tryRecv procedure 177
tuple types 50–51
tuple unpacking 51, 92
Tweeter, architecture of
185–186
Twitter clones, building
architecture of web 
applications 181–186
deploying web applications
219–221
developing controllers
210–219
developing web application 
view 200–210
getting started 186–189
storing data in databases
189–200
type classes 253
type definitions 169, 252
type keyword 113
type mismatch error 251
type section 49, 53
type systems 8–9
typed arguments 258
typedesc parameter 267
types
compatibility of 231
wrapping
in C programming 
language 231–234
in SDL (Simple Direct-
Media Layer) 237–238
See also basic types; collection 
types; object types; user-
defined types
U
UDP sockets 82
UFCS (Uniform Function Call 
Syntax) 17, 107
Uint32 type 238
underscore character 8, 32, 51, 
171
Licensed to   
302
INDEX
Unicode characters 32
unicode module 28–29, 124
unindent procedure 30
UNIX time 194
unsigned integer 27
untyped arguments 258
user routes, implementing
216–217
User type 191
user view, developing 204–206
user-defined types 49–52
enums 51–52
objects 49–50
tuples 50–51
userLogin procedure 217
users, retrieving command-line 
parameters supplied by
63–65
utils module 140
V
values, returning from 
procedures 35–36
var keyword 31, 33
variables
defining 30–33
overview 115
varName variable 259
--ver flag 131, 134
ver variable 121
verifying installation of 
compiler 286
version field 138
version key 147
versions
numbers for, giving meaning 
to 147
storing different versions of 
single package 147–148
view
of front page 207–210
of user 204–206
of web applications 200–210
VM (virtual machine) 15
void procedure 34
W
waitFor procedure 89
walkDir iterator 119
walkFiles iterator 45
web applications
architecture of 181–186
architecture of Tweeter
185–186
routing in microframe-
works 183–184
deploying 219–221
configuring Jester micro-
framework 219
setting up reverse 
proxy 219–221
web pages, retrieving 127
WhatsApp 58
when statement 121
WHERE clause 198
while loop 44, 96, 163
while statement 67
whitespace character 163
Wikipedia page-counts
files, processing each line
164–167
finding most popular article
166–167
format
parsing 161–164
understanding 160–161
windows symbol 121
wrappers
Canvas API 246–247
SDL (Simple DirectMedia 
Layer)
creating for libraries
235–236
using 240–242
wrapping
C programming language 
procedures 228–230
C programming language 
types 231–234
canvas elements 243–246
external C libraries 234–242
creating wrappers for SDL 
library 235–236
downloading SDL library
235
dynamic linking 236–237
using SDL wrappers
240–242
wrapping SDL procedures
238–240
wrapping SDL types
237–238
writeFile procedure 118
writing
.nimble files 141–144
chat applications
first steps 61–62
implementing protocols
70–79
retrieving input in client 
components 63–70
transferring data using 
sockets 79–99
X
XML parsers 122
xmldom module 122
xmltree module 122, 203
Y
Yum-based distributions 284
Licensed to   
Nim Reference (continued)
Common infix operations (highest precedence first)
*
Multiplication
/
Division (returns float)
div
Division (returns integer)
mod
Modulus
shl
Bit shift left
shr
Bit shift right
%
String formatting
+
Addition
-
Subtraction
&
Concatenation
..
Constructs a slice
== = > != not 
Boolean comparisons
in notin
Determines whether a value is within a container
is isnot
Compile-time type equivalence
of
Run-time instance of type check
and
Bitwise and boolean and operation
Collections
string
seq[T]
Table[T]
"Hello World"
@[1, 2, 3, 4]
import tables
initTable({"K": "V"})
str.add("Hi")
list.add(21)
table["Key"] = 3.5
list.del(2)
list.delete(2)
table.del("Key")
"Hi"[0]
'H'
@[1,2][0]
1
table["Key"]
3.5
"Hi"[^1]
'i'
@[1,2][^1]
2
"b" in table
false
"Hey"[0..1]
"He"
@[1,2,3][0..1]
1,2
"Hey"[1..^1]
"ey"
@[1,2,3][1..^1]
2,3
Licensed to   
Dominik Picheta
N
im is a multi-paradigm programming language that 
offers powerful customization options with the ability 
to compile to everything from C to JavaScript. It can 
be used in any project and illustrates that you don’t have to 
sacriﬁ ce performance for expressiveness!
Nim in Action is your guide to application development in 
Nim. You’ll learn how Nim compares to other languages in 
style and performance, master its structure and syntax, and 
discover unique features. By carefully walking through a 
Twitter clone and other real-world examples, you’ll see just 
how Nim can be used every day while also learning how to 
tackle concurrency, package ﬁ nished applications, and inter-
face with other languages. With the best practices and rich 
examples in this book, you’ll be able to start using Nim today. 
What’s Inside
● Language features and implementation
● Nimble package manager
● Asynchronous I/O
● Interfacing with C and JavaScript
● Metaprogramming
For developers comfortable with mainstream languages like 
Java, Python, C++ or C#.
Dominik Picheta is one of the principal developers of Nim and 
author of the Nimble package manager.
To download their free eBook in PDF, ePub, and Kindle formats, owners 
of this book should visit www.manning.com/books/nim-in-action
$49.99 / Can $65.99  [INCLUDING eBOOK]
Nim IN ACTION
PROGRAMMING LANGUAGES
M A N N I N G
“
A great resource for 
an incredibly 
  powerful language.”
—Jonathan Rioux, TD Insurance
“
Gives readers a solid 
foundation in Nim, a robust 
and ﬂ exible language suitable 
  for a variety of projects.”
—Robert Walsh
Excalibur Solutions
“
A great job breaking down 
the language. This book 
will no doubt become the 
de facto learning guide 
 in the Nim space.”
—Peter J. Hampton
Ulster University 
“
A goldmine for Nim 
programmers; great insights 
for any general programmer.”
—Cosimo Attanasi, ER Sistemi
SEE  INSERT