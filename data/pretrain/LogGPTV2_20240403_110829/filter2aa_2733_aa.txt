-[ Past and Future in OS X Malware ]- 
1
Who Am I 
§  An Economist and MBA. 
§  Computer enthusiast for the past 30 years. 
§  Someone who worked at one of the world’s best ATM 
networks, the Portuguese Multibanco. 
§  A natural-born reverser and assembler of all kinds of 
things, not just bits & bytes. 
2
Who’s noar 
§  Self-taught researcher. 
§  Consultant / Insultant in security software. 
§  Former Apple BlackOps. 
§  Uses a Mac since AAPL was $12. 
§  Bought no shares at that time! 
§  Never pwned, although he dares to open my PowerPoint 
files. 
3
Objective 
§  Starting point: Macs are immune to malware. 
§  Latest Flashback variants broke THE myth. 
§  In fact, it’s quite easy to write high quality OS X malware! 
§  That’s what I want to demonstrate today. 
4
Summary 
§  OS X malware history. 
§  Flashback, the mythbuster. 
§  Code injection techniques. 
§  OS.X/Boubou – A PoC infector/virus. 
§  Privilege escalation. 
§  Final remarks. 
5
History – From lamware to malware 
History & glory are not made of: 
§  Backdoors written in REALBasic. 
§  Old IRC bots. 
§  Keyloggers that use Universal Access (logKext rules 
them all). 
§  PoCs (except mine!). 
6
History – Lamware, 2006 
Oompa Loompa 
§  Spread via iChat Bonjour buddy list. 
§  Injection into Cocoa apps using Input Managers. 
§  Requires user interaction to execute it. 
7
History – Lamware, 2006 
Opener 3.9 
§  Same old shell script as a startup item. 
§  The usual trojan horse toolbag: 
§  Hidden admin user (UID < 501), enable SSH, AFP, SMB. 
§  Data mining, hash cracking (JtR), logs cleaning. 
§  New features: 
§  Anti-Little Snitch prequel, anti-virus white-listing. 
§  Capture network traffic using dsniff. 
8
History – Lamware, 2007 
RSPlug aka DNSChanger 
§  First fake codec package. 
§  Prepend DNS every minute using scutil and cron. 
§  Perl script to call home. 
§  Shell script, later obfuscated using … tr! 
§  Polymorphism? 
9
History – Lamware, 2007 
10
History – Lamware, 2007 
MacSweeper, later iMunizator 
§  First scareware. 
§  -(BOOL)[RegistrationManager isRegistered] and patch 
a few bytes… 
§  And it really works! 
§  Prequel of MacDefender and company. 
11
History – Lamware, 2008 
iWorkServices and company 
§  First malicious torrents? 
§  Yet another startup item. 
§  Contains LUA scripting! 
§  Used for DDOS attacks. 
12
History – Lamware, 2008 
AppleScript trojan horse template 
§  Interesting features: 
§  Stay quiet if Little Snitch exists. 
§  Old school reverse shell using nc / cat. 
§  Script “in the middle” sudo. 
§  Different user levels (user, admin, root). 
§  Point antivirus update servers to localhost. 
§  there_are_no_osx_viruses_silly_wabbit(). 
13
History – Lamware, 2008 
14
History – Lamware, Remarks 
§  The key features are here! 
§  Recent threats are “updates” of old features (Chuck 
Norris likes launchd). 
§  But implementation is always lame. 
§  Too generic to be harmful (took 3 years to Opener to 
improve data mining). 
§  Easy to reverse (no encryption). 
§  Trick the user to get root: I can haz r00t, plz? 
15
Now for something different… 
*Note: no connection whatsoever with flashback.net, I just like the picture! 
It’s… 
16
History – Malware 
17
History – Malware 
§  Some similarities with previous lamware: 
§  Fake codec package. 
§  Different user levels (user, root). 
§  Stay quiet if some applications exist: Little Snitch, 
VirusBarrier, Xcode, etc. 
§  In later versions uses launchd. 
18
History – Malware 
§  Yet, so different and new: 
§  Real hijacked websites. 
§  Infect only once (persistent cookies, IP, UUID). 
§  Polymorphic (so many binaries). 
§  Interposers. 
§  Later, used exploits CVE-2008-5353, CVE-2012-0507. 
§  And became that famous 600k botnet. 
19
Flashback Tricks 
20
Flashback Tricks – #1 
§  From the old trick: ~/.MacOSX/environment.plist (http://
rixstep.com/2/20070201,00.shtml). 
§  To the new trick: interpose (hooking, function hijacking). 
§  DYLD_INSERT_LIBRARIES is the real thing! 
§  Tracks user requests by hooking a few functions. 
§  _hook_CFReadStreamRead, _hook_CFWriteStreamWrite. 
§  Not perfect, crashed some apps (Skype, FCP, etc). 
21
Flashback Tricks – #1 
22
Flashback Tricks - # 2 
§  Playing Robin Wood with Google since day 1. 
§  Not just in the latest versions as implied by some AV 
blog posts. 
23
Flashback Tricks - # 2 
24
Flashback Tricks - # 2 
25
Flashback Tricks - #3 
§  And also tweeting from day 1! 
26
Flashback Tricks - #4 
§  Polymorphism? 
§  Absolute path of Preferences.dylib. 
§  Sends SHA1 of Preferences.dylib to C&C server. 
§  On latest releases, data was XORed with machine UUID. 
27
Flashback Tricks - #4 
28
Flashback Tricks - #4 
29
Flashback Tricks - #4 
30
Flashback Tricks - #4 
31
Flashback - Remarks 
§  Flashback put Mac Malware a step further. 
§  It’s a reality, not a myth. 
§  Some unsolved “puzzle” pieces: 
§  Do personalized variants exist? 
§  Does a rootkit exist? 
§  There are suspicious references to sysent! 
32
My Tricks 
33
Code Injection 
§  As we saw, latest versions of Flashback use 
DYLD_INSERT_LIBRARIES trick. 
§  It’s the easiest method. 
§  But it’s also too noisy and easy to detect. 
§  And more important, easy to clean up. 
34
Code Injection 
§  We can use the same library injection idea. 
§  But stealthier and targeted. 
§  The trick is to add a new library command into Mach-O 
headers. 
§  More specifically, a LC_LOAD_DYLIB command. 
§  The linker will happily load our code into the process. 
§  Usually, there’s enough header space to do it. 
35
Code Injection 
Some stats from our /Applications folder: 
Version 
Average Size 
Min 
Max 
32bits 
3013 
28 
49176 
64bits 
2601 
32 
36200 
Minimum required size is 24bytes. 
Check http://reverse.put.as/2012/01/31/anti-
debug-trick-1-abusing-mach-o-to-crash-gdb/ 
for a complete description. 
36
Code Injection – How to do it 
§  Find the position of last segment command. 
§  Find the first data position, it’s either __text section or 
LC_ENCRYPTION_INFO (iOS). 
§  Calculate available space between the two. 
§  Add new command (if enough space available). 
§  Fix the header: size & nr of commands fields. 
§  Write or overwrite the new binary. 
37
Code Injection – How to do it 
38
Code Injection – Other possibilities 
§  Exploiting four other possibilities to inject code into the 
binary. 
§  The first one is the slack space between __TEXT and 
__DATA? 
§  Unfortunately for us, there’s not enough space. 
§  Besides a few exceptions, Skype for example. 
§  The ELF Virus Writing HOWTO discusses this. 
§  It’s a known “hole” and patched in GCC. 
39
Code Injection – Other possibilities 
0 
10 
20 
30 
40 
50 
60 
70 
80 
90 
0 
1 
2 
3 
4 
7 
8 11 12 16 17 18 20 23 24 28 32 48 
Count	
Free	
  bytes	
Free	
  space	
  between	
  TEXT	
  and	
  DATA	
  segments	
32bits	
64bits	
40
Code Injection – Other possibilities 
§  The second is to try to inject a new section into __TEXT. 
§  Doesn’t work!  
§  Mach-O loader does not respect section data. 
§  Only the segment info. 
§  Check http://reverse.put.as/2012/02/02/anti-
disassembly-obfuscation-1-apple-doesnt-follow-their-
own-mach-o-specifications/ for a better description. 
41
Code Injection – Other possibilities 
42
Code Injection – Other possibilities 
43
Code Injection – Other possibilities 
§  Third possibility: the functions alignment NOP space. 
§  We are interested in the long NOP sequences. 
§  They have enough space to execute two instructions. 
§  First instruction does an operation, the second jumps to 
the next available space. 
§  Is there enough space to attempt this? 
44
Code Injection – Other possibilities 
BBEdit 
NOP Size 
 Count 
 Total available bytes 
1 
170619 
170619 
2 
404 
808 
3 
361 
1083 
4 
336 
1344 
5 
742 
3710 
6 
1808 
10848 
7 
1927 
13489 
8 
737 
5896 
9 
359 
3231 
10 
395 
3950 
Total bytes 
214978 