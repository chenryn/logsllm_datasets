video, which totally has three layers.
Figure 6: Time costs of diﬀerent computation tasks
for initially uploading SVC videos with the same
number of layers but with diﬀerent sizes. Here each
SVC video has three layers.
Figure 8: Running time comparisons between
our system and Enc + No − Dedup setting, over SVC
videos in diﬀerent sizes but with the same number
(three) of duplicate layers.
video is uploaded (totally three layers). The network de-
lays in the RSA-OPRF protocol are not considered.
It is
observed that the time spent on vEnc and rGen increases
linearly with the number of layers, since the related opera-
tions should be conducted for each layer. In contrast, tGen
remains constant since it is only related to the base layer.
Figure 6 shows the computation costs for SVC videos with
diﬀerent sizes but with the same number of layers. When
the video sizes increase, the layer sizes increase as well, so
each computation task will take more time to ﬁnish. Even
though, our system is quite practical, e.g., the overall com-
putation cost for a 471MB SVC video is less than 3 seconds.
Time savings. We measure the time savings for the user
by using our secure deduplication system, compared with an
Enc+No-Dedup policy that always sends the encrypted du-
plicate SVC videos (layers) to cloud. Two network settings
are considered, including a fast network (20Mbps) and an
extremely fast network (100Mbps) [1].
Figure 7 compares the running time between our dedupli-
cation design and the Ennc + No − Dedup policy, over dif-
ferent numbers of duplicate layers of a 95MB SVC video.
Note that the running time in the compared policy includes
the layer encryption time and the network transfer time of
the layer ciphertexts, while our system includes all the op-
erations speciﬁed above for a user to earn the ownership of
duplicate layers from cloud. For both two network settings,
our design always consumes much less time than the com-
pared policy. The reason is that client-side deduplication is
enforced in our system and duplicate layers would not be
transferred through the network. Besides, it is noted that
although some mechanisms such as the PoW protocol are
involved in our system, the advantages in time savings ren-
dered by deduplication remain unaﬀected. Figure 8 further
compares the running time between our deduplication de-
sign and the policy over SVC videos in diﬀerent sizes ranging
from 95MB to 471MB with the same number of duplicate
layers. As shown, for the 95MB SVC video in the 20 Mbps
network setting, the compared policy takes 40.4484 seconds,
while the time for our system is only 0.9681 seconds; in the
100 Mbps network setting, the compared policy takes 8.3025
seconds, while the time for our system is only 0.9676 sec-
onds. On average, the time savings provided by our system
can achieve about 97% in the 20Mbps network setting and
about 88% in the 100Mbps network setting, respectively.
12300.10.20.30.40.50.60.7Number of layersTime (sec)  tGenvEncrGen9520230340547100.511.522.53SVC video size (MB)Time (sec)  tGenvEncrGen123051015202530354045Number of layersTime (sec)  Our system (20Mbps)Our system (100Mbps)Enc+No−Dedup (20Mbps)Enc+No−Dedup (100Mbps)95202303405471050100150200250SVC video size (MB)Time (sec)  Our system (20Mbps)Our system (100Mbps)Enc+No−Dedup (20Mbps)Enc+No−Dedup (100Mbps)708. RELATED WORK
8.1 Secure Deduplication
Convergent encryption (CE) is ﬁrst proposed by Douceur
et al. [10] for secure deduplication, which enforces data conﬁ-
dentiality while enabling deduplciation. It encrypts/decrypts
a ﬁle with a convergent key obtained through computing
the hash value of the ﬁle content. Thus, the same ﬁle will
always map to the same ciphertext, making deduplication
feasible. Later, Bellare et al. [3] formalize CE under the
name of message-locked encryption (MLE) and explore its
application in secure space-eﬃcient cloud storage, which can
support both client-side and server-side deduplication. Re-
cently, Li et al. [14] present a key management scheme based
on secret sharing to protect the convergent keys in secure
deduplication. The scheme constructs and distributes secret
shares of keys across multiple independent servers. However,
CE is inherently vulnerable to oﬀ-line brute-force attacks
over predictable ﬁles [2]. The security of CE only holds for
unpredictable ﬁles.
To securely use server-side deduplication and resist oﬀ-
line brute-force attacks over predictable ﬁles in CE, Bellare
et al. [2] resort to a key server (KS) to ﬁrst provide message-
based keys (i.e., hash values protected under the KS’s secret
key) without disclosing any information on the users’ data.
Then they adopt rate-limiting strategies on KS to mitigate
the online brute-force attacks in practice. Another work
proposed by Puzio et al. [17] employ a server to perform
additional encryption over the convergent-encrypted data
collected from all users. Without knowing the server’s secret
key, cloud cannot launch oﬀ-line brute-force attacks over
predictable ﬁles. However, their design is only suited for
server-side deduplication and the server has to suﬀer from
heavy communication overhead.
Apart from the above inherent vulnerability, CE is in-
secure in the bounded leakage setting, where the data hash
(i.e., the convergent key) may be disclosed [25]. Accordingly,
Xu et al. [25] propose a client-side deduplication scheme for
encrypted ﬁles in the bounded leakage setting. However,
for predictable data, the proposed scheme does not consider
the defense on the oﬀ-line brute-force attacks against the
honest-but-curious cloud. Our system design enhances the
security via the help of the agency.
8.2 Security Protection for SVC Videos
In [22], Wei et al. present a scalable and format-compliant
encryption scheme to protect SVC bitstreams when being
disseminated through an open network. The scheme con-
structs new NALUs to replace the original ones to preserv-
ing the SVC scalability. And the resulting encrypted SVC
bitstream has the original SVC structure without emula-
tion markers or illegal codewords for the standard SVC de-
coder, and thus achieves format-compliance. Deng et al. [9]
propose an eﬃcient block-based encryption scheme for SVC
bitstream encryption. They consider a scenario where a pay
TV broadcaster intends to provide a base layer version of the
broadcasted program for everyone, but only allows autho-
rized users to further get access to the enhancement layers.
Therefore, the base layer is left in the cleartext while the en-
hancmenet layers are encrypted. The encryption of enhance-
ment layers is achieved by employing secure pseudorandom
permutations on macroblocks and subblocks. In [23], Wu et
al. study the problem of attribute-based access control on
SVC videos in cloud-based content sharing networks. Specif-
ically, they present a novel multiple-message ciphertext pol-
icy attribute-based encryption (MCP-ABE) scheme, which
can deliver multiple messages within one ciphertext, com-
pared with the traditional CP-ABE scheme [5]. For a SVC
video, the scheme constructs a key graph, encrypts layers
with the corresponding keys and employs the MCP-ABE to
encrypt the key graph. Users with diﬀerent privileges can
ﬁrst decrypt the encryption of the key (sub)graph, and then
decrypt the corresponding encrypted layers. Diﬀerent from
the above works, we investigate secure deduplication over
encrypted SVC videos.
9. CONCLUSIONS
In this paper, we have designed and implemented an en-
crypted cloud media center that hosts encrypted SVC videos
and supports secure deduplication. We ﬁrst formulate a
secure deduplication framework with strong protection for
videos, which can protect the conﬁdentiality in the bounded
leakage setting and defend the oﬀ-line brute-force attacks
over predictable data, respectively. Under the proposed
framework, we then leverage the layered nature of SVC and
propose the layer-level deduplication over encrypted SVC
videos. We thoroughly analyze the security guarantee of
our system against both malicious outside adversaries and
honest-but-curious inside adversaries. Our implementation
adopts the encryption strategy compatible with the struc-
ture and the format of SVC, and optimizes the way en-
crypted SVC videos are stored to improve the dissemina-
tion eﬃciency. The extensive experiments on Amazon cloud
platform further demonstrate the practicality of our system.
In future work, we plan to investigate the support for
multiple scalabilities (e.g., time and resolution) of SVC in
our layer-level deduplication construction and extend our
design for more general cases.
Acknowledgments
This work was supported in part by Research Grants Coun-
cil of Hong Kong (Project No. CityU 138513), NSFC un-
der grants 61472316 and 61172090, Ph.D. Programs Founda-
tion of Ministry of Education of China under grant 201202-
01110013, and Shaanxi Science and Technology Innovation
Project under grant 2013SZS16-Z01/P01/K01. The authors
would like to thank Prof. Robert H. Deng and Dr. Zhuo
Wei for sharing their code in [23] on SVC related software
during the early stage of this work.
10. REFERENCES
[1] Akamai. The Akamai State of the Internet Report.
http://www.akamai.com/stateoftheinternet/.
[2] M. Bellare, S. Keelveedhi, and T. Ristenpart. Dupless:
Server-aided encryption for deduplicated storage. In
Proc. of USENIX Security, 2013.
[3] M. Bellare, S. Keelveedhi, and T. Ristenpart.
Message-locked encryption and secure deduplication.
In Proc. of EUROCRYPT, 2013.
[4] M. Bellare, C. Namprempre, D. Pointcheval, and
M. Semanko. The one-more-rsa-inversion problems
and the security of chaum’s blind signature scheme.
Journal of Cryptology, 16(3):185–215, 2003.
71[5] J. Bethencourt, A. Sahai, and B. Waters.
Ciphertext-policy attribute-based encryption. In Proc.
of IEEE SP, 2007.
[6] M. Blestel and M. Raulet. Open svc decoder: a
ﬂexible svc library. In Proc. of ACM MM, 2010.
standard. IEEE Trans. on Circuits and System for
Video Technology, 17(9):1103–1120, 2007.
[20] T. Stutz and A. Uhl. A survey of h. 264 avc/svc
encryption. IEEE Trans. on Circuits and Systems for
Video Technology, 22(3):325–339, 2012.
[7] J. Camenisch, G. Neven, and A. Shelat. Simulatable
[21] Z. Wei, Y. Wu, R. H. Deng, and X. Ding. A hybrid
adaptive oblivious transfer. In Proc. of EUROCRYPT,
2007.
[8] Cisco Visual Networking Index. Global mobile data
traﬃc forecast update: 2012-2017.
[9] R. H. Deng, X. Ding, Y. Wu, and Z. Wei. Eﬃcient
block-based transparent encryption for h.264/svc
bitstreams. Multimedia Systems, 20(2):165–178, 2014.
[10] J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, and
M. Theimer. Reclaiming space from duplicate ﬁles in a
serverless distributed ﬁle system. In Proc. of IEEE
ICDCS, 2002.
[11] S. Jarecki and X. Liu. Eﬃcient oblivious
pseudorandom function with applications to adaptive
ot and secure computation of set intersection. In
Theory of Cryptography, Lecture Notes in Computer
Science, pages 577–594. Springer, 2009.
scheme for authenticating scalable video codestreams.
IEEE Trans. on Information Forensics and Security,
9(4):543–553, 2014.
[22] Z. Wei, Y. Wu, X. Ding, and R. H. Deng. A scalable
and format-compliant encryption scheme for h.264/svc
bitstreams. Signal Processing: Image Communication,
27(9):1011–1024, 2012.
[23] Y. Wu, Z. Wei, and R. H. Deng. Attribute-based
access to scalable media in cloud-assisted content
sharing networks. IEEE Trans. on Multimedia,
15(4):778–788, 2013.
[24] S. Xiang. Scalable streaming. https://sites.google.
com/site/svchttpstreaming/storagesaving.
[25] J. Xu, E. Chang, and J. Zhou. Weak leakage-resilient
client-side deduplication of encrypted data in cloud
storage. In Proc. of ACM AISACCS, 2013.
[12] A. Kathpal, M. Kulkarni, and A. Bakre. Analyzing
[26] W. Zhu, C. Luo, J. Wang, and S. Li. Multimedia
compute vs. storage tradeoﬀ for video-aware storage
eﬃciency. In Proc. of USENIX HotStorage, 2012.
[13] S. Lederer, C. M¨uller, and C. Timmerer. Dynamic
adaptive streaming over http dataset. In Proc. of
ACM MMSys, 2012.
[14] J. Li, X. Chen, M. Li, J. Li, P. P. Lee, and W. Lou.
Secure deduplication with eﬃcient and reliable
convergent key management. IEEE Trans. on Parallel
and Distributed Systems, 25(6):1615–1625, 2014.
[15] North Carolina Daily. Snapchat nude photos, videos
reportedly leaked online. http://www.
northcarolinadaily.com/index.php/sid/226634683,
2014.
[16] S. Oh, A. Hoogs, A. Perera, N. Cuntoor, C.-C. Chen,
J. T. Lee, S. Mukherjee, J. Aggarwal, H. Lee,
L. Davis, et al. A large-scale benchmark dataset for
event recognition in surveillance video. In Proc. of
IEEE CVPR, 2011.
[17] P. Puzio, R. Molva, M. ¨Onen, and S. Loureiro.
Cloudedup: secure deduplication with encrypted data
for cloud storage. In Proc. of IEEE CloudCom, 2013.
[18] Y. Sanchez, T. Schierl, C. Hellge, T. Wiegand,
D. Hong, D. D. Vleeschauwer, W. V. Leekwijck, and
Y. L. Lou´edec. Eﬃcient http-based streaming using
scalable video coding. Signal Processing: Image
Communication, 27(4):329–342, 2012.
[19] H. Schwarz, D. Marpe, and T. Wiegand. Overview of
the scalable video coding extension of the h.264/avc
cloud computing. IEEE Signal Processing Magazine,
28(3):59–69, 2011.
APPENDIX
A. THE RSA-OPRF PROTOCOL
Table 1: The RSA-OPRF protocol. (N, e) and (N, d)
are the agency’s public key and secret key, respec-
tively, which are as in the RSA system. M denotes
the message to be signed. H1 : {0, 1}∗ → Z∗
N and
H2 : Z∗
N → {0, 1}λ are two hash functions.
Agency
x
(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)(cid:65)
y
(cid:68)(cid:71)(cid:71)(cid:71)(cid:71)(cid:71)
4. y ← xdmodN
User
$← Z∗
N
1. γ
2. h ← H1(M )
3. x ← h · γemodN
5.z ← y · γ−1modN
6. If zemodN (cid:54)= h then
ret ⊥; Else ret H2(z)
72