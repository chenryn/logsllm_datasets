the system resource sharing service.
The ﬁrst component is a per-process page table synchro-
nization handler. HeterSec provides a synchronized page ta-
ble for each HeterSec process. The state is then synchronized
across the x86_64 and ARM64 machines on demand. Be-
fore the process is started as a HeterSec protected process,
the secure application (a kernel module) has to be loaded
and subsequently pass the deﬁned security policy to the pro-
cess runtime. Such security policies include how frequently
to switch the instruction sets, which system calls are used
to synchronize and check the program states in the multi-
variant execution. The runtime then executes the protected
process accordingly - for example, randomly running pro-
cesses across multi-ISA nodes or concurrently executing vari-
ants with cross-ISA lockstep state checking. In short, based
on the secure application scenario, the HeterSec kernels main-
tain the synchronized memory views across the multi-ISA
nodes. In the current design, HeterSec leverages a dedicated
kernel thread to synchronize the pages in the background. It
maintains a simple read-duplicate write-invalidate protocol
for the shared memory pages [80].
Another essential component for HeterSec is the system
resource sharing service. HeterSec maintains a single view of
the system resource from the HeterSec process perspective.
That means for each HeterSec process, there should be only
one set of the network sockets, opened ﬁle descriptors, etc. Un-
fortunately, system resources such as ﬁle descriptors, sockets
and event descriptors, are difﬁcult to be shared across machine
boundaries due to the difﬁculty in splitting the in-kernel state.
One potential solution could be using a Network File System
(NFS) to share and synchronize the ﬁle systems across the
OSes. However, this will introduce potential issues for those
pseudo-ﬁles located in /dev/tty, or /proc. Architecture de-
pendent shared libraries also use different instruction formats
and EFL binary contents. Naively synchronizing those ﬁles
will cause runtime errors and crashes in these programs. To
address this problem, HeterSec combines an implementation
of system resource remote procedure call (RPC) and a virtual
descriptor table (VDT).
Before starting the process, the secure target application
can be speciﬁed with a white list of ﬁles that should be loaded
locally. By default, we put the standard output (i.e., stdout
and stderr), the shared libraries and conﬁguration ﬁles in
the white list. During the protected process’s runtime, the
follower OS will build up a VDT. For each table entry, it
indicates whether a descriptor should be accessed locally or
remotely on the master node. For instance, we do not want to
create two sockets for a single connection request on HeterSec
Figure 2: The architecture overview of HeterSec with two se-
curity application scenarios. The components in blue indicate
modiﬁcations over existing software stack.
running on follower OS. Such system resources are often
unique for each process, for example, open ﬁle descriptors,
sockets, or event poll descriptors. For consistency reasons,
HeterSec has to ensure that only one copy of such resources is
maintained across OSes, maintaining a single source of truth
for in-kernel state. When necessary, the master OS also helps
to initialize and build the virtual address space for the fol-
lower OS’ process. Virtual memory areas (VMAs) and pages
are synchronized between the two OSes. All the inter-OS
communication requests are registered with an inter-kernel
messaging API so that messages can be less expensive as they
avoid going through the complicated network stack. All the
software components mentioned above are running on multi-
ISA machines, connected over InﬁniBand. In the following
section, we describe the details of each component.
3.2 HeterSec distributed kernel
The HeterSec distributed kernel can be considered as a special
implementation of multikernel systems [7]. Instead of running
on a multi-core NUMA machine, HeterSec runs on a hetero-
geneous ISA multi-domain “machine”, with each computing
domain connected with a high-speed network connection. By
using this approach we could avoid to use simulation or dy-
namic code translation, so that code can be executed at nearly
native speed. However, there are two problems with such a
heterogeneous ISA multi-domain “machine”: ﬁrst, there is
no memory coherence guaranteed between multi-ISA nodes,
which raises programmability issues if we intend to leverage
the heterogeneous ISA, multi-domain capabilities to imple-
ment security applications. Second, it is hard to manage the
distributed resources (e.g., opened descriptors, network con-
nections) on top of the heterogeneous instruction sets.
To solve those issues, HeterSec does not maintain global
state for all OSes, but instead chooses only to maintain some
HeterSec process speciﬁc states, synchronizing them on de-
430    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Linux(aarch64)Linux(x86_64)Per Process Sync Page TableProcess Interception and RuntimeProcess State and Resource (descriptor) SyncMVX VariantUserKernelProcess Interception and RuntimeProcess State and Resource (descriptor) SyncMVX VariantMTD ProcessSec App 1Sec App 2…Sec App 1Sec App 2…ARM64 multi-corex86_64 multi-coreInfiniBandInter-kernel messagingInter-kernel messagingMVX. Therefore, the HeterSec kernel running on follower OS
have to simulate the socket creation by placing a fake socket
descriptor in the virtual descriptor table and mark that entry
as virtual (V). On the contrary, descriptors of the opened
library ﬁles and a stdout are marked as real (R) as they
should be accessed locally. For system resource requests that
have to be handled on the master OS, a system call RPC
mechanism is provided. A system call server on the master
OS handles the remote system call request, sets up the buffer
value on the virtually shared pages, and returns the result to
the caller on the follower node. The virtually shared pages
are synchronized between nodes by the HeterSec kernel, as
mentioned above.
We also support some termination signals (e.g., SIGINT)
on the master node. On receiving a termination signal dur-
ing the remote system call context, the master side Heter-
Sec kernel replies a negative system call return value (i.e.,
-ERESTARTSYS) back to the follower kernel. The follower ker-
nel then stops the HeterSec processes on the follower node.
When the termination signal comes within the master kernel
context, the master forwards the signal to the follower. Corre-
spondingly, the follower terminates the execution loop. The
master then stops itself by calling do_exit().
3.3 Handling the cross-ISA code execution
Executing code on the multi-ISA “machine” as if on a single
machine is challenging, since it requires several architecture-
dependent code generation and state exchanges. HeterSec re-
quires the architecture-dependent binaries generated from the
same source code (e.g., same application source code and li-
brary code). This can unify most of the cross-ISA code execu-
tion behaviors, such as system call sequences. The generated
binaries contains all the necessary information to run a pro-
tected process across ISA-different nodes. This information
consists of instructions and data emitted by the compiler for
each ISA. It may also carry some additional information such
as the program state transformation routines. The types of
information are decided by each individual security scenario.
For example, cross-ISA randomized MTD execution would
require information to transform the execution state from one
architecture to another. This is because ﬁne-grained program
state (e.g., the variables on stack) must be synchronized ac-
cordingly as each architecture has its own speciﬁcation for
stack layout and register usage (Section 3.4.1). Security appli-
cations such as multi-ISA MVX require less information in
metadata as each program instance is mostly self-contained on
a single machine. The system call parameters (i.e., userspace
buffers) and the opened descriptors are synchronized by the
distributed operating system kernels mentioned above. It sim-
pliﬁes the system call simulation which is commonly used in
existing MVX techniques (Section 3.4.2).
HeterSec introduces a new system call (i.e., sys_hscall)
to identify the protected process and enable it to run on multi-
ISA nodes. That system call sets up a bit in the process de-
scriptor (task_struct in Linux); after that, the HeterSec
code path in the distributed kernels will be triggered to support
cross node process execution. For example, when defending
the protected process in the MVX mode, we can initiate that
system call to launch two process variants on both nodes. The
in-kernel MVX engine checks the system call sequences and
return values and raises an alert on any execution divergence.
More details are discussed in Section 3.4.2.
3.4 Case Studies
We have built two security application scenarios on top of
HeterSec, which can fully utilize the instruction set diversity.
3.4.1 Multi-ISA MTD
The ﬁrst security application is a heterogeneous-ISA based
MTD system. Unlike most existing MTD or code randomiza-
tion techniques [19,30,31], HeterSec randomizes the code ex-
ecution path by switching ISAs at runtime. From the protected
process’s perspective, it runs on top of a dynamic hardware
environment with ISA diversity. Therefore, it would be hard
for an attacker to prepare the exploit payload, for example,
ﬁnding the correct ROP gadget chain or accurately measuring
the hardware timing for side-channel attacks. When the pro-
cess execution encounters a potential ISA switching point, the
runtime will randomly decide which ISA the process will ex-
ecute on in next step. Those ISA switching points are similar
to the randomization points in existing code re-randomization
works [8, 81], except existing randomization techniques up-
date the code pointer references while HeterSec updates the
architecture related states (e.g., stack slots, register set). Al-
though the implementation sounds straightforward, there are
some subtle issues when implementing such a system on
multi-ISA architecture.
Pointer and architecture speciﬁc structure handling is one
such case. Some system calls return with data updated to
the userspace. Linux handles block data copying between
userspace and kernel with pointers and helper functions such
as copy_to_user(). When calling a system call across
nodes, the follower OS context has to make sure any userspace
memory updates are synchronized to the local node. In our im-
plementation, most of the userspace memory updates caused
by remote system calls will be synchronized correctly with
the help of on-demand page synchronization. However, we
noticed that Linux maintains slightly different format of some
data structures on ARM64 and x86_64. The struct stat
and struct epoll_event are two such cases. The struct
epoll_event on x86_64 Linux is enforced to have the same
alignment as that structure in 32-bit Linux (with packed at-
tribute) in order to make 32-bit simulation easier. On the other
hand, the ARM64 kernel does not enforce such alignment.
To solve this issue, we converted the structure formats in
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    431
effectively enabling MTD functionality for certain parts of the
program. While this functionality only works on a ﬁle-based
granularity, one step of the compilation process includes an
LLVM pass to add in calls to the randomization library men-
tioned in the previous section. These calls are added to the in-
strumented function prologues and epilogues and can be indi-
vidually activated on each architecture through conﬁguration
ﬁles specifying the individual call-sites to activate. Once acti-
vated, whenever the program enters or exits these functions it
checks with the MTD randomization library if it should switch
ISAs, giving us granularity at a function level. We select the
source code that contains the critical path for most of the work
(e.g., the event loops), and compile them with ISA-switching
points instrumented. For example, on Nginx we selected func-
tion call paths like ngx_process_events_and_timers() in
event/ngx_event.c. For Redis, we selected similar func-
tions in event loop path, for example processTimeEvents()
located in ae.c that calls the serverCron(). These func-
tions are called at a frequency of server.hz which defaults
to 10 hz. By targeting where we place these checks across the
program through this modular compilation, we avoid unnec-
essary calls to the MTD randomization library, reducing the
overhead of the HeterSec framework.
3.4.2 Multi-ISA MVX
The second security application is a heterogeneous-ISA based
multi-variant execution system. Similar to a traditional MVX
system, the HeterSec MVX also has one leader variant and
one follower variant. The leader runs on the master OS with
full access to system resources, while the follower is only
allowed to execute computational and memory-related code.
Since there is only one valid copy of system resources (i.e.,
opened ﬁle, socket and event descriptors), the MVX engine
should have the ability to guarantee two program variants
can execute simultaneously over a single set of system re-
sources. The HeterSec MVX engine uses system call simula-
tion to synchronize the state across the variants. Speciﬁcally,
an MVX monitor intercepts the selected system calls from
the leader variant’s execution and forwards the system effects
(e.g., memory update) to the follower. The MVX monitor veri-
ﬁes the system call return values between the running variants
and also captures any memory fault to detect divergent (and
potentially malicious) behaviors.
In HeterSec, the MVX engines are located inside each dis-
tributed kernel as shown in Figure 2. At runtime, the MVX
engine on the follower OS veriﬁes whether a system call
should be simulated or directly passed through to the local
kernel. For system calls tagged for pass-through, the follower
OS serves the HeterSec process as usual. For system calls
that access the per process descriptors, the HeterSec runtime
will verify the descriptor against the virtual descriptor table
(described in Section 3.2). Currently, sockets and event poll
descriptors are marked as virtual descriptors, meaning that
Figure 3: Program ﬂow for an example fstat system call
executed on the follower node.
musl-libc headers on the follower node to mimic the layout
of the master’s format. When the follower OS issues a system
call RPC, the master OS handles the request and updates the
memory references in its own address. The page synchroniza-
tion handler forwards the change to the follower OS. Figure 3
represents the different stages a system call like fstat goes
through when called on the follower node. First, the syscall
enters the kernel on the follower and calls the RPC stub in
Step 2. This RPC stub then communicates to the syscall server
on the master node over the messaging API in Step 3. Next,
in Step 4 the syscall server calls fstat on behalf of the fol-
lower, which subsequently completes and returns to the stub
as shown in Step 5. It also copies the data to the master’s
userspace memory. This userspace data is synchronized to
the userspace of the follower through page synchronization
shown in Step 6 to maintain the illusion to the user program
that its own kernel performed the syscall operation.
Randomization and transformation library: As a working
proof of concept for the Multi-ISA MTD idea, we imple-
mented an MTD randomization library. It makes decisions
on whether a process should execute on a particular node
based on random numbers generated from /dev/urandom.
The probability threshold is also read in from a conﬁgura-
tion ﬁle (in root mode) at runtime. This enables us to modify
MTD switch probability without needing to recompile the ap-
plication. We leverage the transformation library in Popcorn
compiler framework to transform the code execution states
between multi-ISA nodes [4].
ISA-switching point insertion, modular compilation, and
MTD region activation: When compiling these production
level applications the main goal was to make the process as
unobtrusive as possible, only generating required metadata
in relevant or vulnerable functions and ﬁles. The HeterSec
framework allows the user to compile speciﬁc source ﬁles and
generate stack transformation metadata for only those sources,
432    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
UserspaceKernelCross-node boundaryMasterFollowerSyscallRPC StubSyscallServermaster fstatcopy_to_user()structstat{   /* Master Node's       Deﬁnition */        ...}struct stat {   /* Master Node's       Deﬁnition */        ...}123465Page syncthose descriptors accesses will be simulated on the follower
variant by replaying the system call effects from the master
OS. For example, the MVX engine will simulate the system
call sys_recvfrom(int sockfd, void *ubuf, ...) for
the follower variant by coping the ubuf data from the leader
variant to the ubuf address in the follower variant. Unless
speciﬁed, ﬁle descriptors by default are marked as real descrip-
tors and they are accessed locally. Similar to the ﬁles handled
in MTD scenario, variants executed on heterogeneous-ISA
nodes have to load shared libraries in different ELF formats.
We require the user to manually copy all the necessary ﬁles
before starting the application as a MVX process. This proce-
dure can also be made automatic by using a NFS to synchro-
nize these ﬁles across nodes.
There are other subtle issues when implementing MVX on
multi-ISA nodes. One issue is the default libc libraries on two
nodes could potentially cause differing system call sequences.
To prevent false positives, we compile the application source