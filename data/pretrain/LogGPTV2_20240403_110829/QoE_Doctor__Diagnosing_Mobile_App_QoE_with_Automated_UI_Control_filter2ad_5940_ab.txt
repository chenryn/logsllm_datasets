the wait
measurement.
In our see-interact-wait paradigm,
153component measures the user-perceived latency: the time between
triggering a UI interaction event and receiving the corresponding
UI response. Thus, in our controller we log the start and end
timestamps of the waiting process to measure user-perceived
latency. The waiting process can either be triggered (1) by the user
(e.g., uploading a post in Facebook), or (2) by the app (e.g., a video
stall). To log the start timestamp, for (1) we log the time when
the controller triggers the user action, and for (2) we log the time
when the waiting process indicator (e.g., a progress bar) shows up.
For the end timestamp, we log the time when the wait-ending UI
indicator occurs (e.g., the progress bar’s disappearance). As the
controller shares the same process as the app, these UI element
events can be monitored directly.
User behavior replay. We select several popular Android apps
and identify critical QoE-related user behavior, along with the
corresponding user interaction sequence. Based on the interaction
sequences, control speciﬁcations are written for the UI control logic
implementation. To write the speciﬁcation, only some familiarity
with Android UI View classes is required, so the average Android
app developer should be able to do so. In our design, we support
replaying the user interaction sequences both with and without
replaying the timing between each action.
In §7 we use both
according to the experiment requirements.
To ensure the user interactions are sent to the right UI elements
during replay, we design a View signature describing the View
characteristics in the UI layout tree. This signature includes the
UI element class name, View ID, and a description added by the
developer. To support different Android devices, the Vew element
coordinates are not included in this signature.
4.2 App-speciﬁc Control Design and User-
perceived Latency Collection
According to a recent report [6], social networking app Facebook
and video app Youtube are the top 2 mobile applications used in
North America during peak periods, and web browsing is ranked
the third in the amount of aggregate mobile trafﬁc globally. Thus,
we focus on these applications. Table 1 summarizes the QoE-
related user behavior that QoE Doctor replays and the associated
user-perceived latency metrics.
4.2.1 Facebook
For Facebook, we measure the following two user actions:
Upload post. One of the most common user actions on Facebook is
to post an update: posting a status, check-in, or uploading a photo.
For these actions, the user-perceived latency is the time from when
the “post” button is clicked to the time when the posted item is
shown on the news feed list. To measure this ending time, we put a
timestamp string in the post, and after the “post” button is clicked,
the wait component repeatedly parses the UI layout tree and logs
the end timestamp as the time when the item with the timestamp
string appears in the news feed.
Pull-to-update. Another common user action on Facebook is to
pull the news feed list down to update it. This can be generated
either by:
(1) a pulling gesture, or (2) passively waiting for
Facebook to update the news feed list by itself. To replay the
former, our controller generates a scrolling down gesture. For the
latter, the controller just waits on the Facebook news feed list, and
uses the wait component to log the appearance and disappearance
time of the loading progress bar for the news feed list.
4.2.2 YouTube
For YouTube, we replay searching for a video by name and then
watching it.
Watch video. To replay this user behavior, the controller takes as
input a list of video names.
It searches for the video and plays
it until it ﬁnishes. There are two user-perceived latency metrics
the wait component monitors:
the initial loading time, and the
rebuffering ratio. The rebuffering ratio is the ratio of time spent
stalling to the sum of total play and stall time after the initial
loading. For the initial loading time, we start measuring when
the controller clicks on a video entry in the search results, and
ﬁnish measuring when the loading progress bar disappears. For
the rebuffering ratio, the controller parses the UI layout tree after
the video starts playing, and logs when the progress bar appears
and disappears as the video rebuffering start and end timestamps.
When an advertisement (ad) is shown before the video, we
measure the initial loading time and rebuffering ratio for the ad
and the actual video respectively. We conﬁgure the controller to
skip any ads whenever users are given that option, as a recent study
shows that 94% of users skip these ads [1].
4.2.3 Web Browsing
the most
For web browsing,
For web browsing apps, we choose Google Chrome and Mozilla
Firefox, which both have more than 50 million downloads in
Google Play, along with the default Android browser (named
“Internet"). For these browsers, we replay loading a web page.
important
Load web page.
performance metric is the web page loading time. To replay page
loading, our controller takes a ﬁle with a list of URL strings as
input, and enters each URL into the URL bar of the browser app
line by line before sending an ENTER key. The wait component
logs the ENTER key sending time as the start time, and monitors
the progress bar in the UI layout tree to determine when the loading
completes. A more accurate way of determining the loading
complete time would be to log the time when the visible parts on
the page are loaded, for example by capturing a video of the screen
and then analyzing the video frames as implemented in Speed Index
metric for WebPagetest [8]. We plan to support this in our future
work by adding a screen video capturing into the controller, and
supporting video frame analysis in the application layer analyzer.
4.3 Data Collection
While replaying user behavior to measure QoE, the UI controller
collects data at multiple layers.
4.3.1 Application Layer Data Collection
Application layer QoE data is collected by the wait component
during the user behavior replay. The controller generates a log ﬁle,
called AppBehaviorLog, which records each user interaction
event sent to the controlled app, in particular the start and end
timestamps to calculate the user-perceived latency. The user
interaction for each app and the corresponding UI elements for
user-perceived latency measurements are described in §4.2, and
summarized in Table 1.
4.3.2 Transport/Network Layer Data Collection
To measure mobile data consumption and help identify the root
causes of QoE problems for other layers, our controller collects
trafﬁc logs at the transport and network layers using tcpdump [9]
during the user behavior replay.
4.3.3 RRC/RLC Layer Data Collection
To collect RRC/RLC layer data, we use QxDM (Qualcomm
eXtensible Diagnostic Monitor), a cellular network diagnosis tool
from Qualcomm [12]. This tool provides real-time access to both
RRC and RLC layer information for all commercial handsets with a
154Application
User behavior
User-perceived latency
UI events to monitor for latency measurement
to replay
to measure
Measurement start time
Measurement end time
Facebook
YouTube
Upload post
Pull-to-update News feed list updating time
Watch video
Post uploading time
Initial loading time
Rebuffering time
Press “post” button
Progress bar appears
Click on the video entry
Progress bar appears
Web browsing
Load web page
Web page loading time
Press ENTER in URL bar
Posted content shown in ListView
Progress bar disappears
Progress bar disappears
Progress bar disappears
Progress bar disappears
Table 1: Replayed user behavior and user-perceived latency metrics for Facebook, YouTube and web browsers
Qualcomm chipset, including popular Android phone models such
as Samsung Galaxy S3/S4. Recent work [44] exposes RRC state on
Intel/Inﬁneon XGold chipsets by instrumenting the system, but it
cannot access RLC data, which is critical in our cross-layer analysis
in §5.4.2. To collect this data, we need to connect the mobile
devices to a Windows PC, and conﬁgure the QxDM software for the
corresponding network technology, either 3G or LTE. QxDM saves
all radio link layer information to a ﬁle on the PC. By parsing this
information, we isolate the RRC state transitions and RLC PDUs
with corresponding timestamps.
QxDM limitations. There are two major limitations of the QxDM
tool. First, as mentioned earlier, it requires a PC connection in order
to collect real-time user data outside the laboratory. QoE Doctor
helps reduce the impact of this limitation as we can replay real
user behavior using the UI controller. Second, the QxDM tool is
not designed to provide complete RLC PDU payload information.
Perhaps to reduce logging overhead, the RLC PDUs only contain 2
payload bytes, which makes the cross-layer mapping between RLC
PDUs and network packets non-trivial. We explain in §5.4.2 how
we use a technique we call long-jump mapping to overcome this
limitation.
5. MULTI-LAYER QOE ANALYZER
In this section, we describe how QoE metrics are calculated at
each layer using the data collected by the UI controller, and what
multi-layer analysis is supported to help study these QoE metrics.
5.1 Application Layer Analyzer
At the application layer, we can simply calculate the user-
perceived latency metrics based on the start and end timestamps
logged in the AppBehaviorLog by the UI controller. Unlike
previous work [22, 31], we calculate UI latency directly rather
than inferring it from network traces, which can capture the ground
truth, and also enables us to analyze apps having encrypted trafﬁc
such as Facebook.
User-perceived latency calibration. We measure user-perceived
latency by observing app-generated UI events by periodically
parsing the UI layout tree. Fig. 4 shows the process for measuring a
Facebook post upload, where the start timestamp is measured from
a UI controller action and the end timestamp is measured from the
UI layout tree. In QoE Doctor we want to measure tui, but due
to overhead in parsing the UI tree, the actual measured latency is
tm = tui +tof f set +tparsing. To accurately calculate tui, we need
to subtract tof f set and tparsing from tm. Assuming the end time of
the UI data update falls uniformly in the parsing time interval, the
expected value of offset time is tof f set = 1
2 tparsing. We calibrate
the user-perceived latency by subtracting 3
2 tparsing from tm. This
calibration is used to correct the post uploading time, the web page
loading time, and the initial loading time in Table 1. For the other
two latency metrics, the start timestamp is measured by parsing the
UI tree, which is the same as the end timestamp measurement, so
the average offset time is tof f set = 0. For these, we just subtract
tparsing from tm in the calibration.
5.2 Transport/Network Layer Analyzer
In the transport and network layers, we calculate the mobile
data consumption QoE metric from data collected by tcpdump.
Our analyzer parses the raw packet trace and extracts TCP ﬂows,
deﬁned by the tuple {srcIP, srcPort, dstIP, dstPort}, and then
associates each TCP ﬂow with the server’s URL by parsing the
DNS lookups in the trace. Over repeated experiments, we identify
the TCP ﬂows with common server URLs to associate the replayed
user behavior, and then calculate its network data consumption. We
also calculate the number of data retransmissions, the RTT (Round-
Trip Time), and the throughput for the TCP ﬂows.
5.3 RRC/RLC Layer Analyzer
We obtain RRC state change information from QxDM logs.
Using the Monsoon Power Monitor [7], we obtain the power level
for each RRC state, and thus can calculate the network energy
consumption for the entire mobile device using a technique from
previous work [22]. To get the network energy consumed by the
controlled app only, we remove all other apps on the device and
log out all system app accounts to ensure that the network energy
calculation is not affected by unrelated trafﬁc. We also calculate
tail energy as deﬁned in previous work [34], and count all other
network energy as non-tail energy.
First-hop OTA RTT. QxDM logs both uplink and downlink
RLC PDUs, which include polling PDUs and the corresponding
STATUS PDUs, as mentioned in §2. Based on this feedback
loop, we calculate the ﬁrst-hop OTA (Over The Air) RTT, which
is the time from when the device transmits a polling request until
when it receives the STATUS PDU. However, because of the group
acknowledgement mechanism, we may not ﬁnd a corresponding
polling PDU for each STATUS PDU. Thus, we estimate the ﬁrst-
hop OTA RTT for a PDU by ﬁnding the nearest polling PDU to a
STATUS PDU.
5.4 Cross-layer Analyzer
Besides analyzing data at individual layers, QoE Doctor also
supports cross-layer analysis across the application,
transport,
network, and RRC/RLC layers to help perform root cause analysis.
5.4.1 Cross Application, Transport/Network Layers
To help identify root causes of QoE problems in the application
layer, we examine the transport and network layer behavior to
identify the critical path of the application layer delay and pinpoint
the bottlenecks. We ﬁrst identify the start and end time of a
user-perceived latency problem logged in the AppBehaviorLog,
which forms a QoE window. Then we focus our analysis on the
network trafﬁc which falls into this QoE window, and use ﬂow
analysis to identify the TCP ﬂows responsible for the application
layer delay. Through this cross-layer analysis, we can study ﬁne-
155tscreen
tui
App
UI
controller
UI event
delivery
Trigger
UI event
Network
events
UI data
update
Draw to
screen
toffest
tparsing
Parsing
Parsing
Parsing
Parsing
Parsing
tm
IP
Layer
RLC
Layer
100 Bytes
100 Bytes
40 Bytes
40 Bytes
40 Bytes
40 Bytes
40 Bytes
Li
PDU Chain
Figure 4: User-perceived latency measurement for uploading a
post on Facebook
grained QoE metrics such as the initial loading time for Youtube,
which is otherwise indistinguishable from rebuffering events if only
analyzing network data, as done in previous work [18, 42].
5.4.2 Cross Transport/Network, RRC/RLC Layers
To understand the impact of
the interaction between the
transport/network and the cellular radio link layers, QoE Doctor
supports cross-layer analysis between them.
Transport/network layer and RRC layer. From the RRC state
information logged by QxDM, we obtain the RRC state change
information. By ﬁnding an overlap between the QoE window
(deﬁned in §5.4.1) and the RRC state transition window, we can
pinpoint cases where RRC state transitions occur during the period
of the user-perceived latency, which may help reveal the impact of
RRC state transitions on the user-perceived latency.
Transport/network layer and RLC layer. To understand how
network packets are transmitted in the lower layer, our analyzer
supports the mapping from IP packets to RLC PDUs using the ﬁne-
grained RLC transmission information provided by QxDM. More
speciﬁcally, we map complete IP packets to the corresponding
fragmented RLC payload data bytes spreading among several
PDUs. Due to the limitation of QxDM mentioned in §4.3.3, for
each PDU only the ﬁrst 2 payload bytes are logged, which provides
us with limited information to identify the corresponding IP packet.
To ensure an accurate mapping, we design an algorithm which
handles these limitations we have mentioned. As only 2 payload
bytes are captured, after matching these 2 bytes we skip over the
rest of the PDU, and try to match the ﬁrst 2 payload bytes in the
next PDU as shown in Fig. 5, which we call long-jump mapping.
Since some PDUs may contain the payload data belonging to two
consecutive IP packets, according to the 3G speciﬁcation [14] we
use the LI (Length Indicator) to map the end of an IP packet. If the
cumulative mapped index equals the size of the IP packet, we have
found a mapping successfully; otherwise no mapping is discovered.
We evaluate this mapping, and ﬁnd that the percentage of
mapped IP packets is 99.52% for uplink and 88.83% for downlink.
The reason that we cannot achieve 100% accuracy is that
occasionally a small fraction of RLC PDUs are not captured
by QxDM, causing missing mappings for the corresponding IP
packets.
In our cross-layer analysis, we only consider the IP
packets with successfully mapped RLC PDUs.
6. TOOL LIMITATIONS
The limitations of QoE Doctor are summarized as follows.
In
Manual efforts involved in the replay implementation.
order to replay user behavior, QoE Doctor currently requires
Figure 5: Long-jump mapping algorithm for cross-layer
mapping from IP packets to a RLC PDU chain. The payload of
the third PDU is a combination of the tail of the ﬁrst IP packet
and the head of the second IP packet.
manual identiﬁcation of critical QoE-related user behavior, and
some familiarity with Android UI View classes for writing control
speciﬁcations. These manual efforts are necessary, as measuring
the QoE metric of interest requires identifying the natural way
a user interacts with the app.
In future work, we will consider
using learning algorithms to automatically generate common user
behavior from user study logs.
Latency measurement imprecision. As shown in Fig. 4, although
we are directly measuring the UI data changes (tui), the result may
differ from the UI changes on the screen (tscreen), mostly due to
the UI drawing delay. In §7.1 we ﬁnd the measurement error is less
than 4%.
Lack of ﬁne-grained application layer latency breakdown. In
our latency measurements, only the end-to-end latency is reﬂected
in the UI layout data changes, and we cannot break down the
latency into more ﬁne-grained operations such as the transaction
task delay and the inter-process communication delay. Without the
ability to track detailed UI operation sequences, it is hard to conﬁrm
whether the network activity is asynchronous, which may mislead
the cross-layer analysis. In our design, we do not support it because
providing this information requires system or application logic
instrumentation [39, 47], which may limit the tool’s applicability.
Limitation related to RRC/RLC layer logger. Our analysis about
layer 2 data plane (RLC) information may not be 100% accurate
due to QxDM limitations as described in §4.3.3 and §5.4.2.
7. EXPERIMENTAL EVALUATION