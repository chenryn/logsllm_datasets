techniques, such as SWIFT [24] generates binary code with
redundant computation and compares the results to detect
erroneous computation. This approach does not take the ad-
vantage of multi-core processors as the duplicated code runs
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:50:20 UTC from IEEE Xplore.  Restrictions apply. 
on single core only. The comparisons are not self-checked
and the approach assumes writes to memory are error-free.
Wang et al. [25] introduced compiler-managed redundant
multi-threading to utilise the multi-core processors for more
efﬁcient transient fault detection. The management layer
used to create and schedule the leading/following threads is
not protected. PLR (Process-Level Redundancy) [26] applies
a sphere of replication to application level, the applications
and libraries are replicated to leverage multi-core processors
for transient fault tolerance. The PLR management layer and
the operating system are assumed correct. EVE (Execute-
Verify) [27] applies state machine replication to improve the
dependability of the services provided by multi-core servers.
Hardware transient faults in the services are detected during
the verify stage. Romain [28] is an operating system service
which provides transparent redundant multi-threading to
tolerate transient faults. The replicated applications states
are compared before the states are externalised. The authors
note that the Romain service and the kernel are assumed to
be reliable and should be protected by other measures [29].
Bressoud et al. implemented a hypervisor-based fault-
tolerant system [30] on the HP PA-RISC processors. Proto-
cols were designed to enhance the hypervisor to create and
coordinate the primary VM and backup VM to achieve fault
tolerance. As the virtualisation technologies are becoming
mature, the overhead to create and run virtual machines has
reduced signiﬁcantly. VMWare designed fault-tolerant fea-
tures for their enterprise product line [31]. The backup VM
keeps its internal state synchronised with the primary VM
by executing all the events sent by the primary VM through
a logging channel. These virtual-machine-based solutions
focus on providing high service availability and fail-over
is used to mitigate a detected failure. If the hardware faults
affect the hypervisor or the hosting operating system, the
faults may not be detected and the result could be service
outage or data corruption.
VI. CONCLUSIONS
We have argued that a formally veriﬁed microkernel (such
as seL4) provides the high-level correctness and isolation
guarantees required to build a trustworthy software system.
However, commodity hardware lacks high-dependability
features and thus is susceptible to temperature, radiation,
cosmic rays and other environmental factors. Transient faults
or any other deviation in the assumed hardware behaviour
will potentially invalidate the correctness and security guar-
antees.
In this paper, we have explored leveraging redundant
processors to improve the trustworthiness of COTS hard-
ware. We have implemented dual- and triple-redundant
versions the seL4 microkernel, and identiﬁed inter-process
communication as an issue in retaining performance of the
microkernel. We have micro-benchmarked both dual- and
triple-redundant version of the kernel on both ARM and x86-
64 and have observed that there is a signiﬁcant performance
overhead at the micro-benchmark level.
We plan to explore three general areas in the future:
(1) evaluating performance at the macro-level of a more
signiﬁcant system, (2) increasing the sphere of replication
to check more than just syscall inputs and outputs, and (3)
integrating device drivers into our system.
ACKNOWLEDGEMENTS
NICTA is funded by the Australian Government as rep-
resented by the Department of Broadband, Communications
and the Digital Economy and the Australian Research Coun-
cil through the ICT Centre of Excellence program.
REFERENCES
[1] National Security Telecommunications
and Information
Systems Security Committee, National Security Agency,
“Red/black installation guidance,” Dec. 1995, retrieved from:
http://cryptome.org/tempest-2-95.htm (Sept, 2012).
[2] J. Alves-Foss, P. W. Oman, C. Taylor, and S. Harrison, “The
MILS architecture for high-assurance embedded systems,”
International Journal on Embedded Systems, vol. 2, pp. 239–
247, 2006.
[3] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-
VM side channels and their use to extract private keys,” in
Proceedings of the 19th ACM Conference on Computer and
Communications Security, Raleigh, NC, USA, 2012, pp. 305–
316.
[4] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock,
P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Nor-
rish, T. Sewell, H. Tuch, and S. Winwood, “seL4: Formal
veriﬁcation of an OS kernel,” in Proceedings of the 22nd ACM
Symposium on Operating Systems Principles. Big Sky, MT,
USA: ACM, Oct. 2009, pp. 207–220.
[5] T. Sewell, S. Winwood, P. Gammie, T. Murray, J. Andronick,
and G. Klein, “seL4 enforces integrity,” in 2nd International
Conference on Interactive Theorem Proving, ser. Lecture
Notes in Computer Science, M. C. J. D. van Eekelen, H. Geu-
vers, J. Schmaltz, and F. Wiedijk, Eds., vol. 6898. Nijmegen,
The Netherlands: Springer, Aug. 2011, pp. 325–340.
[6] X. Leroy, “Formal veriﬁcation of a realistic compiler,” Com-
munications of the ACM, vol. 52, no. 7, pp. 107–115, 2009.
[7] R. Baumann, “Soft errors in advanced computer systems,”
IEEE Design and Test of Computers, vol. 22, no. 3, pp. 258–
266, May 2005.
[8] G. P. Saggese, N. J. Wang, Z. T. Kalbarczyk, S. J. Patel,
and R. K. Iyer, “An experimental study of soft errors in
microprocessors,” IEEE Micro, vol. 25, no. 6, pp. 30–39, Nov.
2005.
[9] B. Bentley, “Validating the Intel Pentium 4 microprocessor,”
in Proceedings of the 38th Design Automation Conference
(DAC), Las Vegas, NV, USA, 2001, pp. 244–248.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:50:20 UTC from IEEE Xplore.  Restrictions apply. 
[23] N. Aggarwal, P. Ranganathan, N. P. Jouppi, and J. E. Smith,
“Conﬁgurable isolation: building high availability systems
with commodity multi-core processors,” in Proceedings of the
34th International Symposium on Computer Architecture, San
Diego, CA, USA, 2007, pp. 470–481.
[24] M. M. Swift, B. N. Bershad, and H. M. Levy, “Improving the
reliability of commodity operating systems,” in Proceedings
of the 19th ACM Symposium on Operating Systems Principles,
Bolton Landing (Lake George), New York, USA, Oct. 2003.
[25] C. Wang, H. S. Kim, Y. Wu, and V. Ying, “Compiler-managed
software-based redundant multi-threading for transient fault
detection,” in Proceedings of the 5th International Symposium
on Code Generation and Optimization, 2007, pp. 244–258.
[26] A. Shye, T. Moseley, V. J. Reddi, J. Blomstedt, and D. A.
Connors, “Using process-level redundancy to exploit multiple
cores for transient fault tolerance,” in Proceedings of the
37th International Conference on Dependable Systems and
Networks (DSN), Jun. 2007, pp. 297–306.
[27] M. Kapritsos, Y. Wang, V. Quema, A. Clement, L. Alvisi,
and M. Dahlin, “All about Eve: Execute-verify replication
for multi-core servers,” in Proceedings of the 10th USENIX
Symposium on Operating Systems Design and Implementa-
tion, Hollywood, CA, USA, 2012, pp. 237–250.
[28] B. D¨obel, H. H¨artig, and M. Engel, “Operating system support
for redundant multithreading,” in Proceedings of the 12th
International Conference on Embedded Software, Tampere,
Finland, Oct. 2012, pp. 83–92.
[29] B. D¨obel and H. H¨artig, “Who watches the watchmen?
protecting operating system reliability mechanisms,” in Pro-
ceedings of
the 8th Workshop on Hot Topics in System
Dependability, Hollywood, CA, USA, Oct. 2012.
[30] T. C. Bressoud and F. B. Schneider, “Hypervisor-based fault
tolerance,” ACM Transactions on Computer Systems, vol. 14,
pp. 80–107, 1996.
[31] D. J. Scales, M. Nelson, and G. Venkitachalam, “The design
of a practical system for fault-tolerant virtual machines,” ACM
Operating Systems Review, vol. 44, no. 4, pp. 30–39, Dec.
2010.
[10] J. Bhadra, M. S. Abadir, L. C. Wang, and S. Ray, “A survey
of hybrid techniques for functional veriﬁcation,” IEEE Design
and Test of Computers, vol. 24, no. 2, pp. 112–122, Mar.
2007.
[11] R. Kaivola, R. Ghughal, N. Narasimhan, A. Telfer, J. Whit-
temore, S. Pandav, A. Slobodov¨a, C. Taylor, V. Frolov,
E. Reeber, and A. Naik, “Replacing testing with formal
veriﬁcation in Intel Core i7 processor execution engine vali-
dation,” in Proceedings of the 21st International Conference
on Computer Aided Veriﬁcation, Grenoble, France, 2009, pp.
414–429.
[12] S. E. Michalak, K. W. Harris, N. W. Hengartner, B. E. Takala,
and S. A. Wender, “Predicting the number of fatal soft errors
in Los Alamos national laboratory’s ASC Q supercomputer,”
IEEE Transactions on Devices and Materials Reliability,
vol. 5, no. 3, pp. 329–335, Sep. 2005.
[13] D. Lyons, “Sun screen,” Nov. 2000. [Online]. Available:
http://www.forbes.com/global/2000/1113/0323026a.html
[14] Amazon. (2008, Jul.) Amazon s3 availability event: July
20, 2008. [Online]. Available: http://status.aws.amazon.com/
s3-20080720.html
[15] E. B. Nightingale, J. R. Douceur, and V. Orgovan, “Cycles,
cells and platters: An empirical analysis of hardware failures
on a million consumer PCs,” in Proceedings of
the 6th
EuroSys Conference, Salzburg, Austria, Apr. 2011.
[16] J. Xu, S. Chen, Z. Kalbarczyk, and R. K. Iyer, “An experi-
mental study of security vulnerabilities caused by errors,” in
Proceedings of the International Conference on Dependable
Systems and Networks (DSN), 2001, pp. 421–430.
[17] S. Chen, J. Xu, Z. Kalbarczyk, R. K. Iyer, and K. Whisnant,
“Modeling and evaluating the security threats of transient
errors in ﬁrewall software,” Performance Evaluation, vol. 56,
no. 1–4, pp. 53–72, Mar. 2004.
[18] S. Govindavajhala and A. W. Appel, “Using memory errors
to attack a virtual machine,” in IEEE Symposium on Security
and Privacy, 2003, pp. 154–165.
[19] J. Liedtke, K. Elphinstone, S. Sch¨onberg, H. H¨artig,
G. Heiser, N. Islam, and T. Jaeger, “Achieved IPC perfor-
mance (still the foundation for extensibility),” in Proceedings
of the 6th Workshop on Hot Topics in Operating Systems,
Cape Cod, MA, USA, May 1997, pp. 28–31.
[20] A. L. Hopkins Jr., T. B. Smith III, and J. H. Lala, “FTMP—a
highly reliable fault-tolerant multiprocess for aircraft,” Pro-
ceedings of the IEEE, vol. 66, no. 10, pp. 1221–1239, 1978.
[21] J. H. Wensley, L. Lamport, J. Goldberg, M. W. Green, K. N.
Levitt, P. M. Melliar-Smith, R. E. Shostak, and C. B. Wein-
stock, “SIFT: Design and analysis of a fault-tolerant computer
for aircraft control,” Proceedings of the IEEE, vol. 66, no. 10,
pp. 1240–1255, 1978.
[22] D. Bernick, B. Bruckert, P. Del Vigna, D. Garcia, R. Jardine,
J. Klecka, and J. Smullen, “NonStop advanced architecture,”
in Proceedings of the International Conference on Depend-
able Systems and Networks (DSN), 2005.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:50:20 UTC from IEEE Xplore.  Restrictions apply.