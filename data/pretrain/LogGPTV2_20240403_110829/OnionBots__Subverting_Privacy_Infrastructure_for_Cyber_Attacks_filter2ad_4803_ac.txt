Forgetting: In the proposed OnionBot, nodes forget the
.onion address of the pruned nodes. Additionally, to avoid
discovery, mapping and further blocking, each bot can peri-
odically change his .onion address and announce the new
address to his current peer list. The new .onion address is
generated based on a secret key and time. This periodic change
is possible because of the decoupling between IP address and
the bots, which is provided by Tor. Later, in section IV-D we
explain how the C&C is able to directly reach each bot, even
after they change their address.
D. Command and Control Communication
In this section, we show how Tor enables a stealthy, and
resilient communication channel with C&C. As mentioned
before, OnionBot is a non IP address based construction, there-
fore current techniques to detect and disable the C&C (e.g., IP
blacklisting and DNS trafﬁc monitoring) are ineffective against
it.
In OnionBot we assume two classes of messages: 1)
messages from C&C to the bots and 2) messages from bots to
C&C. The messages from C&C can be either directed to an
individual node(s) (e.g., a maintenance message telling a bot
to change it peers) or directed to all bots (e.g., DDoS attack
on example.com). Furthermore, the botmaster can setup group
keys to send encrypted messages to a group of bots. While a
bot can tell the difference between a broadcast message and
messages directed to an individual bot(s), it is not able to
identify the source, the destination and the nature of these
messages. Therefore the authorities are not able to detect
different messages and drop harmful message and only allow
the maintenance message to pass through. As a result they can
not create the illusion that the botnet is operational, when it is
actually neutralized.
In OnionBot, the bots report their address to C&C, and
establish a unique key to be shared with the botmaster at the
infection/rally stage. This allows C&C to have direct access
to the bots, even after they change their .onion address.
Each bot generates a symmetric key, KB, and reports it
to the C&C. KB is encrypted with the hard coded public
key of the C&C ({KB}P KCC ). After establishing the key,
bots can periodically change their .onion address based
on a new private key generated using the following recipe,
generateKey(P KCC, H(KB, ip)). Where, H is a hash
function, and ip is the index of period (e.g., day). All messages
are of the same ﬁxed size, as they are in Tor. Furthermore,
to achieve indistinguishability between all messages, we use
constructions that generate indistinguishable encodings from
uniform random strings, such as Elligator [54]. As a result no
information is leaked to the relaying bots.
7373
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:50:16 UTC from IEEE Xplore.  Restrictions apply. 
3
1
3
1
7
(1)
2
6
2
6
4
5
4
5
0
0
10
11
9
3
1
10
11
9
2
6
4
5
8
0
8
7
(2)
3
1
2
6
9
10
9
4
5
0
10
11
9
8
3
1
3
1
2
6
2
6
(3)
4
5
4
5
0
0
(5)
(6)
(7)
10
9
8
4
5
4
5
0
0
3
1
2
6
(4)
3
2
6
(8)
Fig. 3: Node removal and the self repairing process in a 3-regular graph with 12 nodes. The dashed red lines, indicate the newly
established links between the nodes.
Botnet
Miner
Storm
Zeus
ZeroAccess v1
Crypto
none
XOR
RC4
chained XOR
Signing
none
none
RSA 512
RSA 2048
Replay
yes
yes
yes
yes
TABLE I: Cryptographic use in different botnets.
E. Operation
While many current botnets lack adequate secure commu-
nications [55] (e.g., sending messages in plaintext) that leaves
them open to hijacking, the OnionBot’s communication is
completely encrypted since it uses Tor and SSL. Note that the
the encryption keys are unique to each link. Table I summarizes
a number of botnet families and their lack of adequate crypto
blocks [55]. Furthermore, we introduce new cryptographic
blocks that enable the OnionBot to offer new services, such as
a botnet-for-rent [48] and a distributed computation platform
for rent.
To achieve the aforementioned services, we need to account
for three aspects of the messages: 1) authenticity, 2) expiration
time, and 3) legitimacy. Public key encryption and certiﬁcates
that are based on the chain of trust, are suitable candidates
to solve the authenticity and the legitimacy of the messages,
and the expiration of the message (rental contract term) can be
addressed by using timestamps. In the following we describe
the details of such operation.
Imagine Trudy wishes to rent the botnet from Mallory, and
every bot has the public key of Mallory hardcoded. Trudy
sends her public key P KT to Mallory, to be signed by the
private key of Mallory SKM . The signed message (TT ) acts
as a token containing P KT , an expiration time, and a list of
7474
whitelisted commands. When Trudy wants to issue a command
to her rented bots, she signs her command by using her private
key SKT and includes TT . This way, the bots are able to verify
the legitimacy of such commands, by looking at the token and
the signature of the message.
As a bussiness operation, Trudy pays Mallory using Bit-
coin, where the whole transaction can be carried out over Silk
Road 2.0. Furthermore Mallory can instruct her bots to install
computation platforms such as Java Virtual Machine (JVM).
By doing so, she can also offer a cross-platform distributed
computation infrastructure to carry out CPU intensive tasks,
such as bitcoin mining or password cracking.
V. ONIONBOTS EVALUATION
To evaluate the envisioned OnionBots, we look at two
aspects: the self-healing network formation resilience perfor-
mance and the resilience to analysis techniques, such as botnet
mapping, hijacking, or even assessing the size of the botnet.
The NoN look-ahead routing is proven to be asymptotically
optimal, however such claims have not been studied in the
context of self-healing networks. Although it is desirable to
rigorously prove properties of such networks, in this work we
use empirical data and simulations for evaluation.
A. Mapping OnionBot
OnionBots provide a more resilient structure by using
features available in the Tor network that previous botnets
lack. All OnionBot nodes are directly accessible, even those
running behind NAT, compared to previous work [56]. If a bot
is captured and the address (.onion) of other bots is revealed,
it is still not practical to block the bots. Additionally, bots can
periodically change their .onion addresses, and share it only
with their operational peers. Therefore, limiting the exposure
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:50:16 UTC from IEEE Xplore.  Restrictions apply. 
(a) without pruning
(b) with pruning
(c) without pruning
(d) with pruning
Fig. 4: The average closeness centrality (4a, 4b) and degree centrality (4c, 4d) of nodes in a k-regular graph, (k = 5, 10, 15)
with 5000 nodes after 30% node deletions, with and without pruning.
of the bot’s address. As a result, one single .onion could be
blocked, as we later discuss in section VI, but it is not feasible
to block all of them.
B. OnionBot Network Resilience
To evaluate the resiliency and performance of the self
repairing construction we use some of the metrics that are
used in graph theory, such as the changes in graph centrality
after node deletions. Centrality metrics examined in previous
studies [57], [58] include closeness centrality and degree
centrality.
The closeness centrality of node u, is the inverse of sum
of the shortest paths between node u to all n− 1 other nodes.
Since the sum of distances depends on the number of nodes,
it is normalized.
C(u) =
(cid:2)
n − 1
v(cid:2)=u d(u, v)
Where n is the number of nodes, and d(u, v) is the shortest
path between nodes u and v. It is an indication of how fast
messages can propagate in the network, from a node, v, to all
other nodes sequentially.
The degree centrality of a node u is the number of its
neighbors. The degree centrality values are normalized by the
maximum possible degree in graph G. Therefore it is the
fraction of nodes that u is connected to. It is an indication
of immediate chance of receiving whatever is ﬂowing through
the network (e.g., messages).
Another metric that we explore and is overlooked by
previous work, is the diameter of the graph. The diameter
of a graph is deﬁned as the longest shortest path (geodesic
distance) in the graph. It is formally deﬁned as the maximum
of d(u, v), ∀u, v, and provides a lower bound on worst case
delay.
While a theoretical analysis is more desirable, it is also
much harder. In the following, we resort to simulation to get
a good sense of the properties of OnionBot. We simulate the
node deletion process in a k-regular graph, (k = 5, 10, 15)
of 5000 nodes, with up to 30% (1500) node deletions. Fig-
ure 4 illustrates the average closeness centrality with pruning
(Figure 4b) and without pruning (Figure 4a). As we can see
in Figure 4a, closeness centrality of the nodes is stable, and
even after node deletion, it does not decrease. Furthermore we