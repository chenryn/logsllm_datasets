(cid:5)n1,(cid:5)(cid:5)n2,(cid:5)example.com, P(cid:6), script1,(cid:5)(cid:6),(cid:5)(cid:6),(cid:5)(cid:6),⊥(cid:6),
(cid:5)n3,(cid:5)example.com, S(cid:6), script2,(cid:5)(cid:6),(cid:5)(cid:6),(cid:5)(cid:6),(cid:3)(cid:6)(cid:6), n4(cid:6)
The ﬁrst document has reference n2. It was loaded from
the origin (cid:5)example.com, P(cid:6), which translates into http:
//example.com. Its scripting process has the string represen-
tation script1, the last state and the input history of this
process are empty. The document does not have subwindows
and is inactive (⊥). The second document has the reference
n3, its origin corresponds to https://example.com, the script-
ing process is represented by script2, and the document
is active ((cid:3)). All other components are empty.
Secrets. This subterm of the state term of a browser holds
the secrets of the user of the web browser. Secrets (such
as passwords) are modeled as nonces and they are indexed
by origins. Secrets are only released to documents (scripts)
with the corresponding origin, similarly to the AutoFill
mechanism in browsers.
Cookies, localStorage, and sessionStorage. These subterms
contain the cookies (indexed by domains),
localStorage
data (indexed by origins), and sessionStorage data (indexed
by origins and top-level window references) stored in the
browser. Cookies are stored together with their secure,
httpOnly, and session attributes: If secure is set, the
cookie is only delivered to HTTPS origins. If httpOnly
is set, the cookie cannot be accessed by JavaScript (the
script). According to the proposed standard RFC6265 (which
we follow in our model) and the majority of the existing
implementations, cookies that neither have the (real) “max-
age” nor the “expires” attribute should be deleted by the
browser when the session ends (usually when the browser
is closed). In our model, such cookies carry the session
attribute.
KeyMapping. This term is our equivalent to a certiﬁcate
authority (CA) certiﬁcate store in the browser. Since, for
simplicity, we currently do not formalize CAs in the model,
this term simply encodes a mapping assigning domains d ∈
Doms to their respective public keys pub(kd).
STS. Domains that are listed in this term are contacted by the
web browser only over HTTPS. Connection attempts over
HTTP are transparently rewritten to HTTPS requests. Web
sites can issue the Strict-Transport-Security header to
clients in order to add their domain to this list, see below.
DNSaddress. This term contains the address of the DY
process that is to be contacted for DNS requests; typically
a DNS server.
Nonces, pendingDNS, and pendingRequests. These terms
are used for bookkeeping purposes, recording the nonces that
have been used by the browser so far, the HTTP requests
that await successful DNS resolution, and HTTP requests
that await a response, respectively.
IsCorrupted. This term indicates whether the browser is
corrupted ((cid:14)= ⊥) or not (= ⊥). A corrupted browser behaves
like a web attacker (see Section III-D2).
Initial state sp
0 of a web browser. In the initial state,
keyMapping, DNSAddress, and secrets are deﬁned as
needed, isCorrupted is set to ⊥, and all other subterms
are (cid:5)(cid:6).
2) Web Browser Relation Rp: Before we deﬁne the
relation Rp, we ﬁrst sketch the processing of HTTP(S)
requests and responses by a web browser, and also provide
some intuition about the corruption of browsers.
HTTP(S) Requests and Responses. An HTTP request,
contains, as mentioned before, a nonce created by the
browser. In the example in Section III-C, this nonce is n1.
A server is supposed to include this nonce into its HTTP
response. By this, the browser can match the response to the
request (a real web browser would use the TCP sequence
number for this purpose). If a browser wants to send an
678
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
HTTP request, it ﬁrst resolves the domain name to an IP
address. (For simplicity, we do not model DNS response
caching.) It therefore ﬁrst records the HTTP request in
pendingDNS along with the reference of the window (in the
case of HTTP(S) requests) or the reference of the document1
(in the case of XHRs) from which the request originated and
then sends a DNS request. Upon receipt of the corresponding
DNS response it sends the HTTP request and stores it (again
along with the reference as well as the server address) in
pendingRequests. Before sending the HTTP request, the
cookies stored in the browser for the domain of the request
are added as cookie headers to the request. Cookies with
attribute secure are only added for HTTPS requests. If
an HTTP response arrives, the browser uses the nonce in
this response to match it with the recorded corresponding
HTTP request (if any) and checks whether the address of
the sender is as expected. The reference recorded along with
the request then determines to which window/document the
response belongs. The further processing of a response is
described below.
We note that before HTTPS requests are sent out, a
fresh symmetric key (a nonce) is generated and added to
the request by the browser. The resulting message is then
encrypted using the public key corresponding to the domain
in the request (according to keyMapping). The symmetric
key is recorded along with the request in pendingRequests.
The response is, as mentioned, supposed to be encrypted
with this symmetric key.
Corruption of Browsers. We model two types of corruption
of browsers, namely full corruption and close-corruption,
which are triggered by special network messages in our
model. In the real world, an attacker can exploit buffer
overﬂows in web browsers, compromise operating systems
(e.g., using trojan horses), and physically take control over
shared terminals.
Full corruption models an attacker that gained full control
over a web browser and its user. Besides modeling a
compromised system, full corruption can also serve as a
vehicle for the attacker to participate in a protocol using
secrets of honest browsers: In our case study (Section V),
the attacker starts with no user secrets in its knowledge, but
may fully corrupt any number of browsers, so, in particular,
he is able to impersonate browsers/users.
Close-corruption models a browser that is taken over by
the attacker after a user ﬁnished her browsing session, i.e.,
after closing all windows of the browser. This form of
corruption is relevant in situations where one browser can be
used by many people, e.g., in an Internet café. Information
left in the browser state after closing the browser could be
misused by malicious users.
1As we will see later, in the case of XHRs this reference is actually
a sequence of two elements, a document reference and a nonce that was
chosen by the script that issued the XHR. For now, we will refer to this
sequence simply as the document reference.
679
PROCESSING INPUT MESSAGE m
m = FULLCORRUPT: isCorrupted := FULLCORRUPT
m = CLOSECORRUPT: isCorrupted := CLOSECORRUPT
m = TRIGGER: non-det. choose action from {1, 2}
action = 1: Call script of some active document. Outputs
new state and command cmd.
cmd = HREF: → Initiate request
cmd = IFRAME: Create subwindow, → Initiate request
cmd = FORM: → Initiate request
cmd = SETSCRIPT: Change script in given document.
cmd = SETSCRIPTSTATE: Change state of script in
given document.
cmd = XMLHTTPREQUEST: → Initiate request
cmd = BACK or FORWARD: Navigate given window.
cmd = CLOSE: Close given window.
cmd = POSTMESSAGE: Send postMessage to speciﬁed
document.
action = 2: → Initiate request to some URL in new
m = DNS response: send corresponding HTTP request
m = HTTP(S) response: (decrypt,) ﬁnd reference.
reference to window: create document in window
reference to document: add response body to document’s
window
script input
Figure 1. The basic structure of the web browser relation Rp with
an extract of the most important processing steps, in the case that
isCorrupted = ⊥.
The Relation Rp. To deﬁne Rp, we need to specify, given
the current state of the browser and an input message m,
the new state of the browser and the set of events output by
the browser. Figure 1 provides an overview of the structure
of the following deﬁnition of Rp. The input message m is
expected to be FULLCORRUPT, CLOSECORRUPT, TRIGGER, a
DNS response, or an HTTP(S) response.
If isCorrupted (cid:14)= ⊥ (browser is corrupted), the browser,
just like an attacker process, simply adds m to its current
state, and then outputs all events it can derive from its state.
Once corrupted, the browser stays corrupted. Otherwise, if
isCorrupted = ⊥, on input m the browser behaves as
follows.
m = FULLCORRUPT: If the browser receives this message,
it sets isCorrupted to FULLCORRUPT. From then on the
browser is corrupted as described above, with the attacker
having full access to the browser’s internal state, including
all secrets.
m = CLOSECORRUPT: If the browser receives this message,
it ﬁrst removes the user secrets, open windows and docu-
ments, all session cookies, all sessionStorage data, and all
pending requests from its current state; nonces used so far
by the browser may not be used any longer. LocalStorage
data and persistent cookies are not deleted. The browser then
sets isCorrupted to CLOSECORRUPT (and hence, from then
on is corrupted). As already mentioned, this models that the
browser is closed by a user and that then the browser is used
by another, potentially malicious user (an attacker), such as
in an Internet café.
m = TRIGGER: Upon receipt of this message, the browser
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
non-deterministically chooses one of two actions: (1) trigger
a script or (2) request a new document.
m = TRIGGER, action = 1: Some active window
(possibly an iframe) is chosen non-deterministically. Then
the script of the active document of that window is triggered
(see below).
m = TRIGGER, action = 2: A new HTTP(S) GET request
(i.e., an HTTP(S) request with method GET) is created where
the URL is some message derivable from the current state of
the browser. However, nonces may not be used. This models
the user typing in a URL herself, but we do not allow her
to type in secrets, e.g., passwords or session tokens. A new
window is created to show the response. (HTTP requests to
domains listed in sts are automatically rewritten to HTTPS
requests).
m = DNS response: DNS responses are processed as al-
ready described above, resulting in sending the corresponding
HTTP(S) request (if any).
m = HTTP(S) response: The browser performs the steps
(I) to (IV) in this order.
(I) The browser identiﬁes the corresponding HTTP(S)
request (if any), say q, and the window or document from
which q originated. (In case of HTTPS, the browser also
decrypts m using the recorded symmetric key.)
(II) If there is a Set-Cookie header in the response, its
content (name, value, and if present, the attributes httpOnly,
secure, session) is evaluated: The cookie’s name, value,
and attributes are saved in the browser’s list of cookies. If
a cookie with the same name already exists, the old values
and attributes are overwritten, as speciﬁed in RFC6265.
(III) If there is a Strict-Transport-Security header in
the response, the domain of q is added to the term sts. As
deﬁned in RFC6797, all future requests to this domain, if
not already HTTPS requests, are automatically altered to use
HTTPS.
(IV) If there is a Location header (with some URL u) in
the response and the HTTP status code is 303 or 307, the
browser performs a redirection (unless it is a non-same-origin
redirect of an XHR) by issuing a new HTTP request to u,
retaining the body of the original request. Rewriting POST
to GET requests for 303 redirects and extending the origin
header value are handled as deﬁned in RFC2616 and in the
W3C Cross-Origin Resource Sharing speciﬁcation [12].
Otherwise, if no redirection is requested, the browser does
the following: If the request originated from a window, a
new document is created from the response body. For this,
the response body is expected to be a term of the form
(cid:5)sp, stat(cid:6) where sp is a string such that script
−1(sp) ∈ S
is a script and stat is a term used as its initial state. The
document is then added to the window the reference points
to, it becomes the active document, and the successor of the
currently active document. All previously existing successors
are removed. If the request originated from a document (and
hence, was the result of an XHR), the body of the response
is appended to the script input term of the document. When
later the script of this document is activated, it can read and
process the response.
Triggering the Script of a Document (m = TRIGGER,
action = 1). First, the script of the document is called
with the following input:
- all active windows2 and their active documents (with
limited information about non-same-origin documents),
- the last state and the input history (i.e., previous inputs
from postMessages and XHRs) of the script as recorded
in the document,
- cookies (names and values only) indexed with the
document’s domain, except for httpOnly cookies,
- localStorage data and secrets indexed with the docu-
ment’s origin, and
- sessionStorage data indexed with the document’s origin
and top-level window reference.
In addition, the script is given an inﬁnite set of fresh nonces
from the browser’s set of (unused) nonces.
Now, given the above input, according to the deﬁnition of
scripts (Deﬁnition 5), the script outputs a term. The browser
expects terms of the form
(cid:5)state, cookies, localStorage, sessionStorage, cmd(cid:6)
(and otherwise ignores the output) where state is an
arbitrary term describing the new state of
the script,
cookies is a sequence of name/value pairs,
localStorage
and sessionStorage are arbitrary terms, and cmd is a term
which is interpreted as a command which is to be processed
by the browser. The old state of the script recorded in
the document
the
local/session storage recorded in the browser for the doc-
ument’s origin (and top-level window reference) is replaced
by localStorage/sessionStorage, and the old cookie store of
the document’s origin is updated using cookies similarly to
the case of HTTP(S) responses with cookie headers, except
that now no httpOnly cookies can be set or replaced, as
deﬁned by the HTML5 standard [18] and RFC6265.
is replaced by the new one (state),
Subsequently, cmd (if not empty) is interpreted by the
browser, as described brieﬂy next. We note that commands
may contain parameters.
cmd = HREF (parameters: URL u, window reference w):
A new GET request to u is initiated. If w is _BLANK, the
response to the request will be shown in a new auxiliary
window. Otherwise, if w is not _BLANK, the window with
reference w is navigated (upon receipt of the response and
only if it is active) to the given URL. Navigation is subject
2Note that we overapproximate here: In real-world browsers, only a
limited set of window handles are available to a script. Our approach is
motivated by the fact that in some cases windows can be navigated by
names (without a handle). However, as we will see, speciﬁc restrictions for
navigating windows and accessing/changing their data apply.
680
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 