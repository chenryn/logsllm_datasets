            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::**:root"
            },
            "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability"
            ]
        }
    ]
}
```
Example ECR repository policy document
# 使用 AWS 命令行界面配置 ECR 资源策略
您可以使用`aws ecr set-repository-policy`命令通过 AWS 命令行界面配置 ECR 资源策略，如下所示:
```
> aws ecr set-repository-policy --repository-name docker-in-aws/todobackend --policy-text '{
    "Version": "2008-10-17",
    "Statement": [
        {
            "Sid": "RemoteAccountAccess",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::**:root"
            },
            "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability"
            ]
        }
    ]
}'
```
Configuring ECR resource Policies via the AWS CLI
如上例所示，您必须使用`--repository-name`标志指定存储库名称，并使用`--policy-text`标志将存储库策略配置为 JSON 格式的文档。
# 使用 AWS 云信息配置 ECR 资源策略
当使用 AWS CloudFormation 定义您的 ECR 存储库时，您可以配置您在前面的示例中创建的`AWS::ECR::Repository`资源的`RepositoryPolicyText`属性来定义 ECR 资源策略:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: ECR Repositories
Resources:
  TodobackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: docker-in-aws/todobackend
      RepositoryPolicyText:
 Version: "2008-10-17"
 Statement:
 - Sid: RemoteAccountAccess
 Effect: Allow
 Principal:
 AWS: arn:aws:iam::**:root
 Action:
 - ecr:GetDownloadUrlForLayer
 - ecr:BatchGetImage
 - ecr:BatchCheckLayerAvailability
```
Configuring ECR resource policies using AWS CloudFormation
前面示例中的策略文本以 YAML 格式表达了您在前面示例中配置的 JSON 策略，您可以通过运行`aws cloudformation deploy`命令将更改部署到您的栈中。
# 在远程帐户中配置 IAM 策略
通过控制台、命令行界面或云信息配置好 ECR 资源策略后，您可以继续在 ECR 资源策略中指定的远程帐户中创建 IAM 策略。这些策略的配置方式与您在帐户中配置本地访问 IAM 策略的方式完全相同，如果需要，您可以参考远程 ECR 存储库的 ARN，如果您只希望授予对此存储库的访问权限。
# 自动气象站服务对电子记录的访问
我们将讨论的最后一个场景是 AWS 服务访问您的 ECR 映像的能力。这方面的一个例子是 AWS CodeBuild 服务，它使用基于容器的构建代理执行自动化的连续集成任务。CodeBuild 允许您定义自己的自定义构建代理，通常的做法是在 ECR 中发布这些构建代理的映像。这意味着 AWS CodeBuild 服务现在需要访问 ECR，您可以使用 ECR 资源策略来实现这一点。
以下示例扩展了前面的示例，将 AWS 代码构建服务添加到资源策略中:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: ECR Repositories
Resources:
  TodobackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: docker-in-aws/todobackend
      RepositoryPolicyText:
        Version: "2008-10-17"
        Statement:
          - Sid: RemoteAccountAccess
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::**:root              Service: codebuild.amazonaws.com
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
```
Configuring AWS service access to ECR repositories
在前面的示例中，请注意，您可以使用`Principal`属性中的`Service`属性来标识该策略语句将应用到的 AWS 服务。在后面的章节中，当您创建自己的发布到 ECR 的自定义代码构建映像时，您将看到一个这样的例子。
# 配置生命周期策略
如果您已经完成了本章的学习，那么您将已经多次将 todobackend 映像发布到您的 ECR 存储库中，并且很有可能已经在您的 ECR 存储库中创建了所谓的*孤立映像*。在前面的章节中，我们讨论了正在本地 Docker Engine 中创建的孤立映像，并将这些映像定义为其标签已被较新的映像取代的映像，从而有效地将较旧的映像保留为未命名的映像，因此是“孤立的”
如果您浏览到您的 ECR 存储库并选择 ECS 控制台中的“映像”选项卡，您可能会注意到有一些映像不再有标签，这是因为您推送了几个带有`latest`标签的映像，这些映像已经取代了现在孤立的映像:
![](img/6396f20d-d78c-4511-ab1e-c3a676b92950.png)
Orphaned ECR images
在上图中，请注意，您在 ECR 中的存储使用量现在增加了两倍，即使您只有一个当前的`latest`映像，这意味着您可能还需要支付三倍的存储成本。当然，您可以自己手动删除这些映像，但是这很容易出错，并且往往会成为一项被遗忘和忽视的任务。
值得庆幸的是，ECR 支持一个名为*生命周期策略*的功能，它允许您定义一组包含在策略中的规则，用于管理 Docker 映像的生命周期。生命周期策略的一个标准用例是定期删除孤立映像，您应该始终将其应用于您创建的每个存储库，所以现在让我们看看如何创建和应用这样的策略。
# 使用 AWS 控制台配置生命周期策略
配置生命周期策略时，由于这些策略实际上可能会删除您的 Docker 映像，因此最好始终使用 AWS 控制台对策略进行初始测试，因为 ECS 控制台包含一项功能，允许您模拟如果应用生命周期策略会发生什么。
要使用 AWS 控制台配置生命周期策略，请在 ECR 存储库中选择生命周期规则的**模拟运行**选项卡，然后单击**添加**按钮创建新的模拟运行规则。这允许您测试生命周期策略规则，而无需实际删除 ECR 存储库中的任何映像。一旦您确信您的规则运行安全且符合预期，您就可以将它们转换为将应用于您的存储库的实际生命周期策略:
![](img/b3d8f9fb-8e73-4b0a-9fca-b5e329a297df.png)
ECR dry run rules
现在，您可以在添加规则屏幕中使用以下参数定义规则:
*   **规则优先级**:决定一个策略中定义多个规则时的规则评估顺序。
*   **规则描述**:人类可读的规则描述。
*   **映像状态**:定义规则适用于哪种类型的映像。请注意，您只能有一个规则来指定**未标记的**映像。
*   **匹配标准**:定义何时应用规则的标准。例如，您可以将标准配置为匹配自上次推送至 ECR 存储库后超过七天的未标记映像。
*   **规则动作**:定义应该对符合规则的映像执行的动作。写的时候只支持**过期**动作，会删除匹配的图片。
点击保存按钮后，新规则将被添加到**生命周期规则的模拟运行**标签中。如果您现在单击**保存并执行试运行**按钮，将显示符合您的规则标准的任何映像，其中应包括之前显示的孤立映像。
现在，根据您是否有未标记的映像，以及它们与上次推送至存储库的映像相比有多旧，您可能会看到也可能不会看到与您的试运行规则相匹配的映像。不管实际结果如何，这里的关键是确保匹配的映像都是您所期望的，并且您对试运行规则不会意外删除期望发布和可用的有效映像感到满意。
如果您对试运行规则满意，您可以接下来单击**应用为生命周期策略**按钮，该按钮将首先显示确认新规则的对话框，一旦应用，如果您导航到**生命周期策略**选项卡，您应该会看到您的生命周期策略:
![](img/5b82b40f-e3f7-4792-aece-cc70583abb0a.png)
ECR lifecycle policies
要确认您的生命周期策略正在运行，您可以单击任何策略规则，并从**操作**下拉列表中选择**查看历史记录**，该下拉列表将显示 ECR 已执行的与策略规则相关的任何操作。
# 使用 AWS 命令行界面配置生命周期策略
AWS 命令行界面支持类似于通过 AWS 控制台配置 ECR 生命周期策略的工作流，如下所述:
*   `aws ecr start-lifecycle-policy-preview --repository-name  --lifecycle-policy-text `:针对存储库开始生命周期策略的试运行
*   `aws ecr get-lifecycle-policy-preview --repository-name `:获取试运行状态
*   `aws ecr put-lifecycle-policy --repository-name  --lifecycle-policy-text `:将生命周期策略应用于存储库
*   `aws ecr get-lifecycle-policy --repository-name `:显示应用于存储库的当前生命周期策略
*   `aws ecr delete-lifecycle-policy --repository-name `:删除应用于存储库的当前生命周期策略
当使用命令行界面时，您需要以 JSON 格式指定生命周期策略，您可以通过单击前面屏幕截图中的查看 JSON 操作来查看一个示例。
# 使用 AWS 云信息配置生命周期策略
当使用 AWS 云信息来定义您的 ECR 存储库时，您可以配置您之前创建的`AWS::ECR::Repository`资源的`LifecyclePolicy`属性来定义 ECR 生命周期策略:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: ECR Repositories
Resources:
  TodobackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: docker-in-aws/todobackend
      LifecyclePolicy:
 LifecyclePolicyText: |
 {
 "rules": [
 {
 "rulePriority": 10,
 "description": "Untagged images",
 "selection": {
 "tagStatus": "untagged",
 "countType": "sinceImagePushed",
 "countUnit": "days",
 "countNumber": 7
 },
 "action": {
```
```
 "type": "expire"
 }
 }
 ]
 }
```
Configuring ECR lifecycle policies using AWS CloudFormation
前面示例中的策略文本将您在前面示例中配置的 JSON 策略表示为 JSON 字符串-注意管道(`|` ) YAML 运算符的使用，它允许您输入多行文本以提高可读性。
有了这个配置，您可以通过运行`aws cloudformation deploy`命令将更改应用到您的栈。
# 摘要
在本章中，您学习了如何创建和管理 ECR 存储库，您可以使用这些存储库来安全地、机密地存储您的 Docker 映像。在创建了第一个 ECR 存储库之后，您学习了如何使用 AWS CLI 和 Docker 客户端向 ECR 进行认证，然后成功地将您的 Docker 映像标记并发布到 ECR。
发布 Docker 映像后，您了解了 Docker 客户端可能需要访问您的存储库的各种场景，其中包括从与您的 ECR 存储库相同的帐户访问 ECS 容器实例，从与您的 ECR 存储库不同的帐户访问 ECS 容器实例(即跨帐户访问)，最后授予对诸如 CodeBuild 之类的 AWS 服务的访问权限。您创建了 ECR 资源策略，这在配置跨帐户访问和授予对 AWS 服务的访问权限时是必需的，并且您了解到，尽管在将远程帐户定义为受信任的中央帐户中创建了 ECR 资源策略，但您仍然需要在每个远程帐户中创建 IAM 策略，明确授予对您的中央帐户存储库的访问权限。
最后，您创建了 ECR 生命周期策略规则，允许您自动定期删除未标记(孤立)的 Docker 映像，这有助于降低您的存储成本。在下一章中，您将学习如何使用一个流行的开源工具 Packer 来构建和发布您自己的定制 ECS 容器实例 Amazon Machine Images (AMIs)。
# 问题
1.  您执行什么命令来获取 ECR 的认证令牌？
2.  对/错:ECR 允许您公开发布和分发 Docker 映像
3.  如果您注意到您的存储库中有许多未标记的映像，您应该配置哪个 ECR 功能？
4.  对/错:ECR 以压缩格式存储 Docker 映像
5.  对/错:配置从同一帐户中的 ECS 容器实例对 ECR 的访问需要 ECR 资源策略
6.  对/错:配置远程帐户中 ECS 容器实例对 ECR 的访问需要 ECR 资源策略
7.  对/错:配置从 AWS 代码构建对 ECR 的访问需要 ECR 资源策略
8.  对/错:在同一帐户中配置从 ECS 容器实例对 ECR 的访问需要 IAM 策略
9.  对/错:在远程帐户中配置从 ECS 容器实例对 ECR 的访问需要 IAM 策略
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   ECR 用户指南:[https://docs . AWS . Amazon . com/Amazon ECR/latest/user guide/what-is-ECR . html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html)
*   ECR 存储库云信息资源:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-resource-ECR-repository . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html)
*   基于身份与基于资源的策略:[https://docs . AWS . Amazon . com/IAM/latest/user guide/access _ policies _ identity-vs-resource . html](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html)
*   ECR 存储库的资源级权限:[https://docs . AWS . Amazon . com/Amazon ECR/latest/user guide/ECR-supported-iam-actions-resources . html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/ecr-supported-iam-actions-resources.html)
*   ECR 的生命周期策略:[https://docs . AWS . Amazon . com/Amazon ECR/latest/user guide/lifecyclepolicies . html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html)
*   AWS ECR CLI 参考:[https://docs . AWS . Amazon . com/CLI/latest/reference/ECR/index . html # CLI-AWS-ECR](https://docs.aws.amazon.com/cli/latest/reference/ecr/index.html#cli-aws-ecr)*