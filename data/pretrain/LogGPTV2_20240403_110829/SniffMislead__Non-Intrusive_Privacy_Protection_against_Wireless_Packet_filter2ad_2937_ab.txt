timestamps, lengths, and directions) is still available to attackers.
Attackers also have access to unencrypted packet headers, which
are used to extract valuable information such as Network and MAC
addresses. Via side-channel analysis, attackers can use these data
to infer privacy-sensitive information about the target home, such
as IoT device types, device states, and user behaviors. Attackers
can leverage various analysis techniques to identify packets in-
jected randomly [1, 39, 40] and spoofed events that violate causal
relationship [2, 7, 10, 69], context and integrity [26, 32, 37, 52].
For the small number of IoT devices that send unencrypted
packets, attackers can see the meaningful information about an
IoT device from the payload directly and thus need not use any
side-channel analysis method. SniffMislead is designed to defend
against side-channel analysis on encrypted packets. Countermea-
sures against information leakage from unencrypted packets are
out of the scope of this work.
Attackers’ Limitations. 1) Attackers are passive; i.e., they sniff
quietly and do not proactively inject packets in the target smart
home. It is straightforward to extend SniffMislead to fight active
attacks that inject IoT packets, e.g., by comparing the received
packets against the ground truth of IoT device states based on
log from IoT platforms [69]. Such an extension falls beyond the
contributions of this work. 2) We focus on side-channel attacks, so
attacks on encryption and communication protocols are out of scope
of this paper. Therefore, attackers cannot break the encryption and
claim access to the clear-text communication.
Attackers’ Goals. Attackers have three main goals: 1) They want
to infer states of IoT devices. For example, is the window open
during night? 2) They want to infer user behaviors and habits
inside the target home. For instance, when does the user go to bed?
SniffMisleadRouter/HubIoT DevicesWireless NetworkSmart HomePreventCrimeProtectWireless Packet SnifferRemote Control Sniffed PacketsPrivacy-Sensitive InformationAttacker35RAID ’21, October 6–8, 2021, San Sebastian, Spain
Xuanyu Liu, Qiang Zeng and Xiaojiang Du, et al.
3) They want to infer privacy- and security-sensitive states of the
home overall. For example, has everyone left the house?
A cyber-attacker can steal the information from a large number
of homes at scale and sell it to criminals, who may leverage it for,
e.g., breaks-in, attacking users who live alone, or blackmailing.
3.2 Goals and Challenges
Our Goals. We propose SniffMislead, an effective solution for
privacy protection, against wireless packet sniffers in smart homes
with the following goals in mind: 1) Being non-intrusive and easy
to deploy; 2) Bringing no side effects to the target home (e.g., does
not disrupt the normal operations of IoT devices); 3) Dramatically
impairing the capability of attackers in attaining their goals.
We clarify that SniffMislead is not to prevent attackers from
inferring information, since real wireless traffic can still be sniffed
by attackers. Instead, due to the added phantom users, many result-
ing fake events are injected. As a result, given an inferred event, the
attacker has a very low confidence whether it is a real or injected
one. Similarly, given an inferred behavior of a user, the attacker
does not know whether the user is a real or phantom user.
Challenges. As discussed previously, it is challenging to perform
traffic shaping and packet padding using a stand-alone device.
Packet injection and event spoofing, injected randomly or intu-
itively, are also inefficient. Real device events, triggered by user
behaviors, are self-consistent with rich semantics and full context.
Decoy events, on the other hand, with a lack of logical integrity,
may suffer from being distinguished from logically-complete ones.
In addition, some decoy events are unable to “change” the semantics
of the user behaviors or context of the target smart home. Therefore,
they fail to prevent attackers from inferring correct user behaviors
(e.g., a decoy light-off event in the living room may not change the
inference result that a real user is watching TV). Thus, a comprehen-
sive approach is essential to make injected packets and simulated
events indistinguishable from real ones and retain enough logi-
cality and capacity to change the target smart home’s semantics
and context. Placing logically-sound phantom users, therefore, is a
feasible and much-needed choice, though it is not trivial to do so.
We need to understand what behaviors compose a phantom user in
the target home, what device events compose a behavior, and how
to inject packets to simulate device events.
In order for SniffMislead to work independently without con-
figuration effort from the user, it has to generate a packet-injection
policy on its own. The device list, automation rules of device events,
and device-event-level features of user behaviors2 are unknown to
SniffMislead since they dynamically vary from home to home.
A fixed policy is therefore insufficient. The policy should be adap-
tive to ensure that phantom users can pass off as humans. There-
fore, in order to learn from the target smart home and use its
unique features to generate resilient policies for placing phantom
users, SniffMislead would need to be implemented from scratch.
SniffMislead also has been programmed to avoid logical conflicts
between phantom and real users (e.g., a phantom user wants to
turn off the light while a real user wishes to keep it on).
2We define the device-event-level feature of a user behavior as the pattern indicating
how device events can construct an ongoing activity.
Causing no change to the target smart home means that real
wireless traffic from IoT devices cannot be blocked or modified.
Plus, IoT devices at a home are subject to changes, e.g., adding or
removing devices. SniffMislead needs to respond to those changes
to preserve contextual consistency.
4 SYSTEM OVERVIEW
In this section, we discuss how we achieve the targeted goals and
overcome the proposed design challenges. We first present the
features of SniffMislead and then describe its workflow in detail.
4.1 Features of SniffMislead
SniffMislead has the following features:
• It is a non-intrusive solution that does not require any modi-
fications to IoT devices, hubs, platforms, or communication
protocols. It is a plug-and-play solution that uses a stand-
alone device. It works independently without needing any
configuration effort from users or prior knowledge of the
target home (e.g., attributes of smart devices).
• It is an automatic wireless packet injection and event spoof-
ing tool. It uses a top-down approach (i.e., behaviors →
device events → wireless packets) to place phantom users in
a home, which, from an attacker’s perspective, would seem
as if there are “real” users in the home. By ensuring logical
integrity and contextual consistency of injected packets and
simulated decoy device events, it is difficult for attackers to
distinguish phantom users from real ones.
• To generate comprehensive, adaptive policies for placing
phantom users, SniffMislead learns required information
(i.e., traffic patterns of smart devices, device-event-level fea-
tures of user behaviors, associations among behaviors, and
real users’ daily routines) on its own by analyzing encrypted
wireless traffic of the target smart home. The policies, along
with any changes in the target smart home, are continuously
and dynamically updated.
• SniffMislead injects packets only based on the target home’s
traffic pattern, independent of underlying physical layers, de-
vice types, layout, or house structures. It can simultaneously
handle multiple network protocols by including different
packet sniffers and transmitters.
4.2 Workflow of SniffMislead
SniffMislead has two modules: 1) Smart Home Learning Module
(Section 5), and 2) User Privacy Protection Module (Section 6).
Smart Home Learning Module. This module learns required
information from the target smart home to prepare for policy gen-
eration. It consists of the following four steps, shown in Figure 2:
1) Collecting a training set that contains wireless network traffic
generated by IoT devices (Section 5.1); 2) Extracting packet-level
signatures of device events from the training set (Section 5.2); 3) Ex-
tracting device-event-level features of user behaviors (Section 5.3),
using the output from Step 2; and 4) Obtaining logical associa-
tions among behaviors and real users’ daily routines (Section 5.4).
Learned information will be stored in a database. SniffMislead
continuously inspects changed traffic patterns caused by changes
in user behaviors and IoT devices, and updates its database.
36SniffMislead: Non-Intrusive Privacy Protection against Wireless Packet Sniffers in Smart Homes
RAID ’21, October 6–8, 2021, San Sebastian, Spain
device using a packet transmitter. When injected decoy packets
are captured by a wireless packet sniffer and mapped to device
events and user behaviors by the attacker, it will be difficult for the
attacker to reliably infer device states or behaviors of real users
(e.g., in fact, no one is having breakfast at 7 a.m.).
Figure 2: Four steps of Smart Home Learning: (1) collecting
data from wireless traffic, (2) extracting packet-level signa-
tures of device events, (3) extracting device-event-level fea-
tures of behaviors, and (4) finding associations among behav-
iors and daily routines of real users.
Figure 3: Workflow of SniffMislead.
User Privacy Protection Module. This module generates poli-
cies based on information learned from the Smart Home Learning
Module above and decides on how to use a top-down approach
to simulate phantom users. Behaviors for phantom users are gen-
erated every day, based on logical associations among behaviors
and real users’ daily routines (Section 6.1). Then, for each behavior
of a phantom user, the corresponding device event sequence is
generated, based on the device-event-level features of this behavior
(Section 6.2). Finally, based on packet-level signatures of device
events, decoy packets (corresponding to the device event sequence)
are created (Section 6.3).
Figure 3 shows the building blocks of the two modules and the
workflow of SniffMislead. We use an example to briefly discuss
how SniffMislead protects user privacy. In a typical smart home
with common IoT devices (e.g., motion sensors, smart outlets, lights),
SniffMislead would create phantom users and set their behaviors
(e.g., waking up at 6:50 a.m., having breakfast at 7 a.m., watching
TV at 8 a.m., and so on). When it is time for a phantom user’s
behavior to happen (i.e., it is 7 a.m. to have breakfast), this behavior
is converted to a sequence of device events (e.g., OPEN of a contact
sensor; ACTIVE of a motion sensor; ON of the kitchen lights; ON of an
outlet; ON of the oven). Finally, based on each device event’s unique
packet-level signature, wireless packets are generated for each
5 SMART HOME LEARNING
In this section, we discuss how SniffMislead learns required in-
formation from the target smart home by sniffing its encrypted
wireless traffic, with no configuration effort from users or prior
knowledge of the smart home.
There may exist correlations [16, 17, 28, 52] between IoT devices
in the smart home, in the form of co-present or temporally-related
device events. These device events cause network communications
among IoT devices, hubs, and routers. These correlations can be
attributed to three correlation channels: 1) Automation rules (i.e.,
smart apps) [13, 15], which directly determine trigger-condition-
action relationships among IoT devices (e.g., a button is configured
to flip a light); 2) Physical interactions [22], i.e., changes in physical
properties (e.g., humidity, motion, and smoke) may cause actions
of nearby devices to respond to these changes (e.g., turning on a
smart light can affect an illuminance sensor nearby; the rise of
temperature could be captured by both an air conditioner and a
temperature sensor, resulting in two consecutive events); 3) User
behaviors [29], i.e., while user behaviors impose changes on devices,
device states also reflect user behaviors (e.g., when a user returns
home, there should be consecutive events, such as OPEN of a contact
sensor for door opening and ACTIVE of a motion sensor for the
user’s moving).
SniffMislead learns these correlations from network messages
(i.e., wireless traffic) of the target smart home, and exact network-
level and device-level features, which are used for injecting packets
of decoy device events.
5.1 Step 1: Data Collection
The first step is to form a training set by collecting related wireless
packets from smart home network traffic. Multiple packet sniffers,
for different protocols, automate this procedure using shell scripts.
Since the network identifier is usually unique and unencrypted
and can be seen from the packet header, it can be used to identify
devices [38, 50, 64, 79]. For example, the Network Address in the
ZigBee packet header can be used to distinguish ZigBee devices,
as it is created and assigned when a device joins the smart home
network and remains unchanged until it leaves the current network
and joins another network.
Each found network identifier is treated as a separate device, with
a device identifier assigned to it, denoted as . Collected packets are grouped by devices,
and SniffMislead uses DeviceIdenti f ier to distinguish IoT devices
in the target smart home. Whenever a smart home user adds or
deletes a device, the corresponding device list and existing network
identifier are updated. SniffMislead continuously responds to
these changes and update its database.
Since packets triggered by device events always have encrypted
payloads, those without payloads and/or unrelated to users’ op-
erations and behaviors (e.g., beacon packets that are mainly used
UsersBehaviorsDevice EventsPackets(2)(3)?4?Wireless TrafficTime(1)Smart Home Learning Data CollectionNetwork Patterns of Device EventsFeatures of BehaviorsBehavior Associations/ Daily RoutinesUser Privacy ProtectionDatabasePhantom UsersDecoy Device Event SequenceDecoy PacketsPacket InjectionSmart Home NetworkReal Wireless PacketsDecoy Wireless Packets37RAID ’21, October 6–8, 2021, San Sebastian, Spain
Xuanyu Liu, Qiang Zeng and Xiaojiang Du, et al.
to acknowledge data transmission and maintain established con-
nections) are discarded. For re-transmitted packets, SniffMislead
only uses the first one and discards the others.
5.2 Step 2: Extracting Network Patterns of
Device Events
IoT device events usually have unique network patterns, summa-
rized as packet-level signatures [64, 79]. Side-channel data, such as
lengths, rates, and directions of packets, can identify device events.
A packet is defined as a tuple of (timestamp, lenдth, direction). Each
device event triggers a time-ordered sequence of wireless packets.
SniffMislead will then establish a one-to-one mapping between a
device event ei and its network pattern Patternei .
A burst, presented as b = {packet1, packet2,· · · , packetn}, is
a sequence of network packets from one device, where the time
interval between any two consecutive packets is less than a pre-
determined threshold β [59, 79]. Grouped packets from Step 1 are
partitioned into a set of bursts. If the packet directions match, Lev-
enshtein Ratio [43, 74] between these bursts is calculated to indicate
the level of similarity. A high Levenshtein Ratio means a high simi-
larity. It is validated that the average Levenshtein Ratio is stable for
device events of the same type (i.e., 0.98 for ZigBee and 0.98 for Z-
Wave) and distinguishable for events of different types (i.e., 0.17 for
ZigBee and 0.25 for Z-Wave) [79]. Based on our empirical obser-
vations from our testbed, we select 0.8 as the Levenshtein Ratio
threshold: γ. Bursts, whose Levenshtein Ratio is greater than γ, are
grouped together: B = {b1, b2,· · · , bn}. Then the network pattern
of a device event e is calculated as:
Patterne = arg max
bi ∈B
R(bi , bj)

(1)
∀bj ∈B
where R is the Levenshtein Ratio of bi and bj.
A device usually has multiple states. Transitions among states,
caused by device events, usually correspond to some rules (e.g.,
ON → OFF → ON for a light). After extracting network patterns of
device events, the traffic stream in the training set is converted into
a device event stream. Based on that, SniffMislead can then build
finite state machines for each device to indicate transition rules,
which are used later for simulating decoy device events. Each smart
device may have one or more finite state machines.
5.3 Step 3: Extracting Features of Behaviors
A behavior usually triggers specific device events following a fea-
ture (e.g., involved device events and their occurrence time), de-
noted as a device-event-level feature, which, in turn, can also be
used to predict an ongoing behavior [1, 9, 19]. To generate appro-
priate behaviors of phantom users, SniffMislead needs to find
device-event-level features of behaviors in the target smart home.
However, it is challenging to extract the feature of each behavior.
Based on our observations, due to variability in the trigger of device
events between different instances of the same behavior, one or a
few devices cannot determine a specific behavior. Device events
also often get multiplexed from two or more behaviors, due to one
or multiple users concurrently undertaking many behaviors.
To tackle the challenges mentioned above, SniffMislead first
segments the device event stream from the training set, with the
notion that each segment represents a behavior accurately (Sec-
tion 5.3.1). Next, based on these segments, device-event-level fea-
tures of behaviors are extracted (Section 5.3.2). SniffMislead does
not need to know the specific behavior. It simply assigns each
behavior a unique identifier and maps it to its feature, denoted