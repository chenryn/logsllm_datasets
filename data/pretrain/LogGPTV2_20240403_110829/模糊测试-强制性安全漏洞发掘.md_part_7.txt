它的名字所暗示的那样，CreateProcess（）将启动一个新进程及其主线程，该函数的原型是
如下定义的：
BOOL CreateProcess(
LPCTSTR 1pApp1icationName,
LPTSTR 1pCommandLine,
LPSECURITY_ATTRIBUTES 1pProcessAttributes,
LPSECURITY_ATTRIBUTES 1pThreadAttributes,
BOOL bInheritHandles,
DWORD deCreationF1ags
LPVOID 1pEnvironment,
LPCTSTR 1pCurrentDirectory.
LPSTARTUPINFO 1pStartupInfo,
LPPROCESS_INFORMATION 1pProcessInformation
如果1pApp1icationName参数被赋子一个NULL值，都么被启动的进程将是1pCommandLine
 http:/msdn2.microsoft.com/en-us/library/ms682425.aspx
---
## Page 22
第1章安全漏洞发报方法学7
参数中第一个空白符号分隔之后的值，这是人们都知道并且记录在文档中的该函数的行为。考
虑下面的例子中对CreateProcess（）函数的调用：
CreateProcess(
“c:program fi1es\sub dir`\program.exe",
NULL,
):
在上述情形下，CreateProcess（）函数将试图反复启动毒一个空格符之后的值所代表的
进程：
C:\program.exe
c:\program fi1essub.exe
C:progran files`sub di r\progran,exe
这种尝试会一直进行，直到发现了一个可执行文件的名字或者所有的选择都已经被穷尽。
因此，如果一个可执行文件program.exe位于C：路径下，带有类似上述结构中对CreateProcess（）
不安全调用的应用程序将会执行该program.exe程序。这为攻击者提供了一个便利的机会，他们
会试图让实际要执行的程序不可达并执行另外一个程序。
2005年10月发布的一个安全性咨询报告中列举了好几个流行的应用程序中采用了不安全
的CareateProcess（）调用。这些问题的发现得益于一次成功的但是却非常简单的扫除技术实
践。如果你想要利用该扫除技术发现相同的安全漏洞，那么可以拷贝和重新命名一个简单的应
用程序，例如notepad.exe，然后将它置于c:路径下。然后正常使用计算机。如果先前拷贝的这
个应用程序突然在预期之外执行了，那么就很可能发现了一个因不安全调用CreateProcess（）
而引起的漏洞。
1.2.2自动测试或模糊测试
模糊测试在很大程度上是一种强制性的技术，因此
MozilaFirefox
它缺乏“优雅性”，它的目标是简单加有效。模糊测试这
个术语将在第2章中详细定义和解释。简单地说，模糊测
EleEYe
Name:
试包括把能够想到的所有东西都抛给被测目标，然后监
Ap
视结果。大部分软件都应该带有具体输入并且足够健壮，
Submt]
在接收到异常输入的时候能够完美地恢复。考虑如下所
示的一个简单的Web表单，参见图1-1。
图1-1
一个简单Web表单
合理的假设是Name域应该接受一个字符串值，Age
域应该接受一个整数值。如果用户偶然改变了两个域的实际输人范围并且在Age域输入了一个
字符串后会发生什么呢？字符串值会自动转换为基于ASCII码的整数值吗？是否会显示一条错
误报告消息？应用程序会崩遗吗？模糊测试试图通过一个自动化的过程来回答这个问题。研究
hrtp://tabs.idefense.com/intelligence/vulnerabilities/display-php?id=340
---
## Page 23
8第一部分青景
者不需要知道应用程序的内部工作细节，因此执行的是黑盒测试，要做的就是站在后面向目标
投掷石头，等待玻璃被打破的声音。就这个意义面言，模糊测试可归结为黑盒测试。然面，在
本书中，我们将说明，为什么强制性的模糊测试可以变得更像“外科手术”，从而让石头每次
的飞行路线更直接并且更真实，因此，模糊测试也可以应用在灰盒测试中。
Microsoft使用模期测试吗
答案是肯定的.Microsoft2005年3月发布的可信计算安全开发生命周期（SDL）文档日清
楚地阐明了Microsoft考虑将模糊测试作为一种在软件发布之前寻找安全漏洞的关键技术。SDL
是一个关于在款件开发生命周期中嵌入安全性的倡议，认为安全性是参与开发过程的每一个人
的职责。模糊测试在SDL中被提为安全性测试工具、应该在软件实现阶段加以利用。实际上，
得的效果却非常鼓舞人心”
1.2.3优点和缺点
黑盒测试尽管并不总是最好的方法，但却总是一个可选的方法。黑盒测试的优点包括以下
几个方面：
·可用性：黑盒测试总是可以应用的，甚至在源代码可用的情况下应用黑盒测试也是有益
处的。
·可重现性：由于黑盒测试的实施不需要事先对目标做出假设，以文件传输协议（FTP）服
务器为例，黑盒测试可以很容易地被定制成能够测试任何其他FTP服务器。
·简单性：一些测试方法，例如代码逆向工程（RCE）等，需要专业的技巧，而黑盒测试
只是测试的一个最基本层次，它能够在不十分了解应用程序内部细节的情况下执行。尽
管如此，事实上，尽管通过简单地使用测试工具就能够发现诸如拒绝服务攻击这样的安
全漏洞，但是判断一次简单的应用程序崩溃是否能够被关联到某些让人更感兴趣的地方
（例如代码的执行），则通常需要对软件的深入理解。
尽管黑盒测试容易使用，但是也有一些缺点。黑盒测试的缺点包括：
·我盖能力：如何确定测试何时结束以及测试的有效性程度，这是黑盒测试面临的最大挑
·理解力：黑盒测试最适合那些安全漏洞由一个单独的输入向量所引起的场景。然而，复
杂的攻击需要多种攻击向量，其中的一些攻击将目标应用程序置人一种脆弱状态，其他
攻击向量进一步触发漏洞。此类攻击需要深刻理解应用程序的底层逻辑，并且典型地需
要通过人工代码评审和RCE才能发现漏洞。
httg/mnmierosoft.com/library/defaltasp?rl/library/en-us/dnsecre/btml/sdl.asp
---
## Page 24
第1章安全漏洞发振方法学9
1.3灰盒测试
灰盒测试的定义是在白盒测试和黑盒分析之间浮动的，我们给它下的定义是，首先它包括
了黑盒测试审核，此外还包括通过逆向工程（RE）获得的结果，逆向工程也被称为逆向代码工
程（RCE）。源代码是宝贵的资源，它应该容易被阅读并且支持人们理解软件具体功能的操作
细节。此外，它还隐含地提示了具体的功能所预期需要的输入，以及该具体功能的预期输出。
即使缺少源代码这样的重要资源，也不意味着我们会失去一切，分析编译后得到的汇编指令能
够帮助阐明类似的故事，但是要付出更多的努力。在汇编代码层次上进行安全评估而不是在源
代码层次上进行安全评估，这种安全评估一般称为二进制审核（binaryauditing）。
1.3.1二进制审核
RCE通常与二进制审核这个词汇被当作同义词面使用，但就我们的目的而言，我们将RCE
作为一类子方法，以使它区别于完全自动化的方法。RCE的最终目标是决定一个编译后得到的
二进制应用程序的底层功能。尽管将一个二进制文件完全转换回它的源代码形式是不可能的，
但是有可能对汇编指令序列应用逆向工程，从而得到一种位于源代码和构成二进制代码的机器
码之间的一种表示形式。通常，这种表示是汇编语言和应用程序代码流的图形表示之间的一种
中间形式。
一且二进制文件被转换成人可读的形式，这样的代码就可以被评审以查找其中可能包含漏
洞之处，这在很大程度上与源代码的评审是类似的。就源代码评申而言，找到可能存在漏润的
代码片段并不是游戏的结束。还必须决定一个终端用户是否能够影响脆弱的代码片段，遵循这
样的逻辑，二进制审核也被人们称为是一种“从里向外”的技术：研究者首先识出反汇编结果
中令其感兴趣的可能存在的漏洞，然后反向追溯到源代码中以确定漏洞是否可以被别人所利用。
逆向工程（reverseengineering）是一种外科手术式的技术，它利用诸如反汇编器、反编译
器或调试器这样的工具。反汇编器将难以被辨认的机器码解析为某种更适合人理解的汇编码。
有各种自由的反汇编器软件可供使用，但是出于重要的RCE工作的要求，我们很可能需要花费
一些投资来购买DataRescue的InteractiveDisassembler（IDA）Pro°，参见图1-2所示。IDA是一
个运行在Windows、UNIX和MacOS平台上的商用反汇编器，能够解析很多不同机器体系架构
下的二进制代码。
同反汇编器类似，反编译器可对二进制代码执行静态分析并将其转换为人可读的源代码形
式。反编译器试图产生更高级的语言组件，例如条件和循环结构，而不是直接将机器码转变为
汇编指令。反编译器不可能完全恢复产生最初的源代码，因为包含在源代码中的一些信息，例
如注释、变量名、函数名甚至基本结构在编译之后都不再被保存。Boomerang就是反编译器
的例子。对于将源代码直接翻译成机器码的编译型语言（例如C和C++），它们的反编译器在本
http://www.datarescue.com/
yauaduojaounosluesuooq/:du
---
## Page 25
10
第一部分开
京
质上存在一些限制。对于那些将源代码编译为某种中间形式的字节码的语言，如C#，由于其字
节码中包含更多的信息，因此对这些语言的反编译通常要成功的多。
图1-2 DataRescue IDA Pro
与反汇编器和反编译器不同，调试器通过打开或附加到一个目标程序并采用动态分析技术
来监控目标程序的执行，调试器能够显示应用程序正在运行时CPU寄存器的内容和内存状态。
Win32平台下的流行调试器包括OllyDbg°，其运行时的一个屏幕快照如图1-3所示。此外还有
Microsof WinDbg（也被人称做“windbag"）.WinDbg是Windows软件调试工具包中的
部分，可从Microsoft的网站上免费下载。OllyDbg是一个由OlehYuschuk开发的调试器，用户
友好性稍好于WinDbg。这两个调试器都允许用户创建自定制的扩展功能组件，有许多第三方
插件可用于扩展OllyDbg的功能。UNIX环境下也有各种各样的调试器，GNUProject
Debugger（GDB）是最流行的也是最容易被移植的调试器。GDB是一个命令行调试器，许多
UNIX/Linux产品中都包含这个调试器。
http:/www.ollydbg.de/
htp://www.openrec.org/forums/posts/4
@ http:/www.microsoft.com/whdc/devtools/debugging/defaut.mspx
sud8qg<1Io/asmouq/speouop/uosauadommm/:.d
qp8/qp8/aumos/uonu2mmm/:dg③
---
## Page 26
第1章安全漏洞发振方法学
图1-3OllyDbg
1.3.2自动化的二进制审核
最近出现了少量的工具，这些工具试图对RCE的过程实现自动化，以识别二进制应用程序
中潜在的安全漏洞。这些工具既有商业软件，也有自由软件，它们或者是IDAPro的插件或者
是单独开发的应用程序。表1-2列举了它们中的一小部分。
表1-2自动化二进制审核工具
名称
开发商
许可类型
说明
LogiScan
LogicLibrary
商业软件
LogicLibrary在2004年9月收购了BugScan，此后对后者的二进制审
核工具的品牌重新进行了命名，并将其包含到Logidex SDA管理方案中
BugScam
Halvar Flake
自由软件
BagScam是一个IDAPro的IDC脚本集合，它枚举了二进制文件中的
函数调用，以识别出对各种不同库函数可能的不安全调用。该应用程序
主要是在BugScan的基础上采用“哄验”的手段发现安全漏洞
Inspector
HB Gary
商业软件
Inspector是一个RCE管理系统，它统一了来自各种不同RCE工具的输
出,例如IDA Pro和OlyDbg
SecurityReview
VeraCode
商业软件
VeraCode的产品将一个二进制分析套件直接集成进开发环境，类似
干源代码分析套件的功能，如Coverity。在二进制代码层次上进行分析，
使得VeraCode能够检测出一些问题，这些问题与“所看到的并不一定
是所执行的”有关