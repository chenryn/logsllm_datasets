# 被动扫描器简介
目前WEB自动化安全测试一般分为两类：主动式自动化安全测试、被动式自动化安全测试，两者区别在于获取测试数据源的方式，主动式自动化安全测试主要依靠爬虫对目标站点进行爬取获得测试目标链接，被动式自动化安全测试主要依靠代理等方式采集测试数据源。由于两者在测试数据来源的不同，导致测试适用范围及测试结果有所区别：
测试方式 | 主动式自动化安全测试 | 被动式自动化安全测试  
---|---|---  
测试覆盖率 | 低，依赖于爬虫爬取质量及范围，一般情况下测试人员无法干预爬虫爬取的具体页面 |
高，依赖于数据源质量，可以通过扩大日志、代理服务器数据等数据源的质量，测试人员可通过数据源干预测试的具体目标页面、接口  
速度 | 低，需要主动爬取数据，同等条件下速度低于被动式自动化安全测试工具 | 高，无需主动探测数据，同等条件下速度高于主动式自动化安全测试  
开发难度 | 复杂，需要实现爬虫模块及测试模块两个核心模块，爬虫算法多样，复杂度高 |
相对简单，无需实现爬虫模块，核心功能模块为数据采集模块及测试模块，数据采集模块在有限使用场景下复杂度较低  
测试精准度 | 较低，该类扫描器测试模块主要测试通用漏洞，通常不涉及越权测试等复杂扫描项目 | 较高，可测试通用漏洞，也可定制越权测试等复杂扫描项目  
在本文中，将会构建一个基于http代理的被动式扫描器探测SQL注入。
# 开始前的准备工作
被动式自动化安全测试涉及数据采集、测试两个核心模块，netty负责实现通过代理服务器采集测试目标的功能，测试模块使用SQLMapApi对SQL注入漏洞进行检测。下面分别介绍并搭建开发环境。
## 基础环境介绍
JDK1.8.0.201+Eclipse+Tomcat，属于基础软件，常规安装即可。
## Netty及fastjson
在maven中引入netty及fastjson，netty主要实现代理服务器模块，fastjson负责与SQLMapApi交互
        4.0.0
        com.XXX
        autoTestV4
        0.0.1-SNAPSHOT
                io.netty
                netty-all
                4.1.37.Final
                com.alibaba
                fastjson
                1.2.59
## SQLMapApi
SQLMap是基于Python运行的，安装教程可以自行查找，安装好后可启动SQLMapApi测试。  
# 编写代理服务器
代理服务器部分，我们使用netty服务器内置的http编解码器进行服务器代理并将代理数据镜像一份至测试模块。
## 代理服务器变量配置：
    public class Properties {
        //******************** 代理服务器部分 ********************
        public static int ProxyPort=8889; //服务器监听的端口号
        //************************ HttpConnet 的SUCCESS响应（http协议规定）  ************************
        public final static HttpResponseStatus SUCCESS = new HttpResponseStatus(200, "Connection established");
    }
## 代理服务器类：
    public class StartProxy {
        //*** 主方法 ***
        public static void main(String[] args) {
            //*** 启动代理服务器（netty） ***
            startProxy();
        }
        //*** 启动代理服务器（netty） ***
        private static void startProxy() {
            EventLoopGroup bossGroup = new NioEventLoopGroup();
            EventLoopGroup workerGroup = new NioEventLoopGroup(2);
            try {
                ServerBootstrap b = new ServerBootstrap();
                b.group(bossGroup, workerGroup)
                        .channel(NioServerSocketChannel.class)
                        .option(ChannelOption.SO_BACKLOG, 100)
                        .option(ChannelOption.TCP_NODELAY, true)
                        .handler(new LoggingHandler(LogLevel.INFO))
                        .childHandler(new ChannelInitializer() {
                            @Override
                            protected void initChannel(Channel ch) throws Exception {
                                ch.pipeline().addLast("httpCodec",new HttpServerCodec());
                                ch.pipeline().addLast("httpObject",new HttpObjectAggregator(65536));
                                //转发给代理服务器处理数据包
                                ch.pipeline().addLast("serverHandle",new HttpProxyServerHandle());
                            }
                        });
                //**** 绑定代理服务器端口号 ****
                ChannelFuture f = b
                        .bind(Properties.ProxyPort)
                        .sync();
                f.channel().closeFuture().sync();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                bossGroup.shutdownGracefully();
                workerGroup.shutdownGracefully();
            }
        }
    }
    public class HttpProxyServerHandle extends ChannelInboundHandlerAdapter {
        private ChannelFuture cf;
        private String host;
        private int port;
        // *********** 重写channelRead方法 *************
        @Override
        public void channelRead(final ChannelHandlerContext ctx, final Object msg) throws Exception {
            // *********** 如果传入消息是能解析的HttpRequest *************
            if (msg instanceof FullHttpRequest) {
                // *** 转发并处理能解析的HttpRequest ***
                forwardAndCheckHttpRequest(ctx, msg);
            } else {
                // *********** 如果传入消息无法解析，原样转发 *************
                forwardButNoCheck(ctx, msg);
            }
        }
        // *********** 如果传入消息无法解析，原样转发 *************
        private void forwardButNoCheck(final ChannelHandlerContext ctx, final Object msg) {
            if (cf == null) {
                // 连接至目标服务器
                Bootstrap bootstrap = new Bootstrap();
                bootstrap.group(ctx.channel().eventLoop()) // 复用客户端连接线程池
                        .channel(ctx.channel().getClass()) // 使用NioSocketChannel来作为连接用的channel类
                        .handler(new ChannelInitializer() {
                            @Override
                            protected void initChannel(Channel ch) throws Exception {
                                ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {
                                    @Override
                                    public void channelRead(ChannelHandlerContext ctx0, Object msg) throws Exception {
                                        ctx.channel().writeAndFlush(msg);
                                    }
                                });
                            }
                        });
                cf = bootstrap.connect(host, port);
                cf.addListener(new ChannelFutureListener() {
                    public void operationComplete(ChannelFuture future) throws Exception {
                        if (future.isSuccess()) {
                            future.channel().writeAndFlush(msg);
                        } else {
                            ctx.channel().close();
                        }
                    }
                });
            } else {
                cf.channel().writeAndFlush(msg);
            }
        }
        // *** 转发并处理能解析的HttpRequest ***
        private void forwardAndCheckHttpRequest(final ChannelHandlerContext ctx, final Object msg) throws Exception {
            // *** 消息赋值 ***
            FullHttpRequest request = (FullHttpRequest) msg;
            // *** 确定转发地址及端口 ***
            getHostAndPort(request);
            // *** HTTPS建立代理握手 ***
            if ("CONNECT".equalsIgnoreCase(request.method().name())) {
                httpsCONNECT(ctx);
                return;
            }
            //*
            // !!!!!!!!!!!!!!!!!!!! 调用检测Payload模块 !!!!!!!!!!!!!!!!!!!!
            //*** IllegalReferenceCountException refCnt: 0 异常修复 采用copy()复制writeAndFlush前的FullHttpRequest对象 ***
            FullHttpRequest payloadRequest = request.copy();
            Payload payload = new Payload(payloadRequest);
            payload.start();
            //*/
            // *** 使用netty处理，并使用HttpProxyInitializer类处理response包 ***
            // 连接至目标服务器
            Bootstrap bootstrap = new Bootstrap();
            bootstrap.group(ctx.channel().eventLoop()) // 注册线程池
                    .channel(ctx.channel().getClass()) // 使用NioSocketChannel来作为连接用的channel类
                    .handler(new HttpProxyInitializer(ctx.channel())); // 将response包使用HttpProxyInitializer处理
            // 发送request包
            ChannelFuture cf = bootstrap.connect(host, port);
            cf.addListener(new ChannelFutureListener() {
                public void operationComplete(ChannelFuture future) throws Exception {
                    if (future.isSuccess()) {
                        future.channel().writeAndFlush(msg);
                    } else {
                        ctx.channel().close();
                    }
                }
            });
        }
        // *** HTTPS建立代理握手 ***
        private void httpsCONNECT(ChannelHandlerContext ctx) {
            HttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, Properties.SUCCESS);
            ctx.writeAndFlush(response);
            ctx.pipeline().remove("httpCodec");
            ctx.pipeline().remove("httpObject");
            return;
        }
        // *** 确定转发地址及端口 ***
        private void getHostAndPort(FullHttpRequest request) {
            String host = request.headers().get("host");
            String[] temp = host.split(":");
            int port = 80;
            if (temp.length > 1) {
                port = Integer.parseInt(temp[1]);
            } else {
                if (request.uri().indexOf("https") == 0) {
                    port = 443;
                }
            }
            this.host = temp[0];
            this.port = port;
        }
    }
    public class HttpProxyInitializer extends ChannelInitializer{
        private Channel clientChannel;
        public HttpProxyInitializer(Channel clientChannel) {
            this.clientChannel = clientChannel;
        }
        @Override
        protected void initChannel(Channel ch) throws Exception {
            ch.pipeline().addLast(new HttpClientCodec());
            ch.pipeline().addLast(new HttpObjectAggregator(6553600));
            ch.pipeline().addLast(new HttpProxyClientHandle(clientChannel)); //使用HttpProxyClientHandle处理response
        }
    }
    public class HttpProxyClientHandle extends ChannelInboundHandlerAdapter {
        private Channel clientChannel;
        public HttpProxyClientHandle(Channel clientChannel) {
            this.clientChannel = clientChannel;
        }
        @Override
        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
            clientChannel.writeAndFlush(msg); //将response返回客户端        
        }
    }
## 构建测试模块
    public class Payload extends Thread{
        FullHttpRequest request; // 用于测试的请求
        // *** 构造函数（将代理服务器采集到的FullHttpRequest传入）
        public Payload(FullHttpRequest request) {
            this.request = request;
        }
        // *** 开始测试（异步开始测试） ***
        public void run() {
            try {
                // *** SQL注入测试 ***
                FullHttpRequest request = this.request.copy(); // 复制request对象用于测试，防止refCnt: 0 异常
                SQLPayload sqlpayload = new SQLPayload();
                sqlpayload.startSqlInjectTest(request);         
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
## 引入SQLMapApi
    public class SQLPayload {
        //*** 调用SQL注入测试的总接口 ***
        public void startSqlInjectTest(FullHttpRequest request) throws Exception {
            //*** 调用SQLMAPAPI进行SQL注入测试 ***
            SQLMAPApi sqlmapapi = new SQLMAPApi();
            //*** 使用SQLMAPAPI创建扫描任务 ***
            sqlmapapi.createTask();
            //*** 传入SQLMAPAPI需要的数据，开始扫描 ***
            sqlmapapi.startScan(request);
            //*** 查询任务扫描状态 ***
            sqlmapapi.status();
            //*** 查询任务扫描结果并保存至文件 ***
            sqlmapapi.result();
        }
    }
    public class SQLMAPApi {
        String taskid; // SQLMAP任务ID
        String uri = null;
        // *** 创建新任务 ***
        public void createTask() throws Exception {
            // 参考资料：https://www.jianshu.com/p/11814875d793
            NioEventLoopGroup workerGroup = new NioEventLoopGroup();
            try {
                Bootstrap bootstrap = new Bootstrap();
                bootstrap.group(workerGroup).channel(NioSocketChannel.class).option(ChannelOption.SO_KEEPALIVE, true)
                        .handler(new ChannelInitializer() {
                            @Override
                            protected void initChannel(SocketChannel socketChannel) throws Exception {
                                socketChannel.pipeline().addLast("codec", new HttpClientCodec());
                                socketChannel.pipeline().addLast("httpAggregator", new HttpObjectAggregator(512 * 1024)); // http
                                                                                                                            // 消息聚合器
                                socketChannel.pipeline().addLast(new NewTaskResponse());
                            }
                        });
                Channel channel = bootstrap.connect(Properties.SQLMapApiAdr, Properties.SQLMapApiPort).sync().channel();
                URI uri = new URI("/task/new");
                HttpRequest request = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri.toASCIIString());
                HttpHeaders headers = request.headers();
                headers.set(HttpHeaderNames.HOST, "127.0.0.1");
                headers.set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);
                headers.set(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP + "," + HttpHeaderValues.DEFLATE);
                headers.set(HttpHeaderNames.ACCEPT_CHARSET, "ISO-8859-1,utf-8;q=0.7,*;q=0.7");
                headers.set(HttpHeaderNames.ACCEPT_LANGUAGE, "fr");
                headers.set(HttpHeaderNames.USER_AGENT, "Netty Simple Http Client side");
                headers.set(HttpHeaderNames.ACCEPT, "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                // send request
                channel.writeAndFlush(request);
                channel.closeFuture().sync();
            } finally {
                workerGroup.shutdownGracefully();
            }
        }
        // *** 创建任务response处理 ***
        private class NewTaskResponse extends ChannelInboundHandlerAdapter {
            @Override
            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
                if (msg instanceof HttpResponse) {
                    HttpResponse httpResponse = (HttpResponse) msg;
                }
                if (msg instanceof HttpContent) {
                    HttpContent httpContent = (HttpContent) msg;
                    // 提取taskid
                    String json = httpContent.content().toString(0, httpContent.content().capacity(),
                            Charset.defaultCharset());
                    JSONObject obj = JSON.parseObject(json);
                    taskid = (String) obj.get("taskid");
                }
            }
        }
        // *** 传入SQLMAPAPI需要的数据，开始扫描 ***
        public void startScan(FullHttpRequest request) {
            // *** 保存request文件到本地 ***
            // **** 创建文件 ****
            String filePath = Properties.requestFileSaveBasePath + taskid; // taskid为对应的SQLMAPAPI任务ID
            Result.saveFullHttpRequestToFile(filePath, request);
            uri = request.uri();
            // 使用sqlmapapi的start命令传入文件开始测试
            // 向SQLMAPAPI传送开始测试的指令
            NioEventLoopGroup workerGroup = new NioEventLoopGroup();
            try {
                Bootstrap bootstrap = new Bootstrap();
                bootstrap.group(workerGroup).channel(NioSocketChannel.class).option(ChannelOption.SO_KEEPALIVE, true)
                        .handler(new ChannelInitializer() {
                            @Override
                            protected void initChannel(SocketChannel socketChannel) throws Exception {
                                socketChannel.pipeline().addLast("codec", new HttpClientCodec());
                                socketChannel.pipeline().addLast("httpAggregator", new HttpObjectAggregator(512 * 1024)); // http
                                                                                                                            // 消息聚合器
                                socketChannel.pipeline().addLast(new StartTestResponse());
                            }
                        });
                Channel channel = bootstrap.connect(Properties.SQLMapApiAdr, Properties.SQLMapApiPort).sync().channel();
                // *** 生成post传送的文件名(设置向SQLMAPAPI发送request的content内容)
                Start start = new Start();
                start.setUrl("http://" + Properties.TomcatServerIP + ":" + Properties.TomcatPort
                        + Properties.requestFileSavePath + taskid);
                String jsonStr = JSON.toJSONString(start);
                // *** 生成post传送的uri
                URI uri = new URI("/scan/" + taskid + "/start");
                FullHttpRequest requestToSQLMAPAPI = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST,
                        uri.toASCIIString(), Unpooled.wrappedBuffer(jsonStr.getBytes("UTF-8")));
                requestToSQLMAPAPI.headers().set(HttpHeaders.Names.HOST, "127.0.0.1");
                requestToSQLMAPAPI.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.KEEP_ALIVE);
                requestToSQLMAPAPI.headers().set(HttpHeaders.Names.CONTENT_LENGTH,
                        requestToSQLMAPAPI.content().readableBytes());
                requestToSQLMAPAPI.headers().set(HttpHeaders.Names.CONTENT_TYPE, "application/json");
                // send request