},
{
\"\_id\" : 1,
\"host\" : \"192.168.4.52:27052\"
},
{
\"\_id\" : 2,
\"host\" : \"192.168.4.53:27053\"
}
\]
}
## 4初始化replica sets环境
**51上操作**
\> rs.initiate(config)
{
\"ok\" : 1,
\"operationTime\" : Timestamp(1551687278, 1),
\"\$clusterTime\" : {
\"clusterTime\" : Timestamp(1551687278, 1),
\"signature\" : {
\"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),
\"keyId\" : NumberLong(0)
}
}
}
rs1:SECONDARY\>
rs1:PRIMARY\> #PRIMARY为主库信息
## 5查看主从信息
### 主从状态
rs1:PRIMARY\> rs.status \#
function () {
return db.\_adminCommand(\"replSetGetStatus\");
}
rs1:PRIMARY\> rs.status()
{
\"set\" : \"rs1\",
\"date\" : ISODate(\"2019-03-04T08:32:58.039Z\"),
\"myState\" : 1,
\"term\" : NumberLong(1),
\"heartbeatIntervalMillis\" : NumberLong(2000),
\"optimes\" : {
\"lastCommittedOpTime\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
},
\"readConcernMajorityOpTime\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
},
\"appliedOpTime\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
},
\"durableOpTime\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
}
},
\"members\" : \[
{
\"\_id\" : 0,
\"name\" : \"192.168.4.51:27051\",
\"health\" : 1,
\"state\" : 1,
\"stateStr\" : \"PRIMARY\", #主库
\"uptime\" : 1176,
\"optime\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
},
\"optimeDate\" : ISODate(\"2019-03-04T08:32:50Z\"),
\"electionTime\" : Timestamp(1551687289, 1),
\"electionDate\" : ISODate(\"2019-03-04T08:14:49Z\"),
\"configVersion\" : 1,
\"self\" : true
},
{
\"\_id\" : 1,
\"name\" : \"192.168.4.52:27052\",
\"health\" : 1,
\"state\" : 2,
\"stateStr\" : \"SECONDARY\", #从库
\"uptime\" : 1099,
\"optime\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
},
\"optimeDurable\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
},
\"optimeDate\" : ISODate(\"2019-03-04T08:32:50Z\"),
\"optimeDurableDate\" : ISODate(\"2019-03-04T08:32:50Z\"),
\"lastHeartbeat\" : ISODate(\"2019-03-04T08:32:56.625Z\"),
\"lastHeartbeatRecv\" : ISODate(\"2019-03-04T08:32:56.588Z\"),
\"pingMs\" : NumberLong(0),
\"syncingTo\" : \"192.168.4.51:27051\",
\"configVersion\" : 1
},
{
\"\_id\" : 2,
\"name\" : \"192.168.4.53:27053\",
\"health\" : 1,
\"state\" : 2,
\"stateStr\" : \"SECONDARY\", #从库
\"uptime\" : 1099,
\"optime\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
},
\"optimeDurable\" : {
\"ts\" : Timestamp(1551688370, 1),
\"t\" : NumberLong(1)
},
\"optimeDate\" : ISODate(\"2019-03-04T08:32:50Z\"),
\"optimeDurableDate\" : ISODate(\"2019-03-04T08:32:50Z\"),
\"lastHeartbeat\" : ISODate(\"2019-03-04T08:32:56.619Z\"),
\"lastHeartbeatRecv\" : ISODate(\"2019-03-04T08:32:56.589Z\"),
\"pingMs\" : NumberLong(0),
\"syncingTo\" : \"192.168.4.51:27051\",
\"configVersion\" : 1
}
\],
\"ok\" : 1,
\"operationTime\" : Timestamp(1551688370, 1),
\"\$clusterTime\" : {
\"clusterTime\" : Timestamp(1551688370, 1),
\"signature\" : {
\"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),
\"keyId\" : NumberLong(0)
}
}
}
### 查看是否是master库
rs1:SECONDARY\> rs.isMaster()
{
\"hosts\" : \[
\"192.168.4.51:27051\",
\"192.168.4.52:27052\",
\"192.168.4.53:27053\"
\],
\"setName\" : \"rs1\",
\"setVersion\" : 1,
\"ismaster\" : false, #false为不是主,true为是主库
\"secondary\" : true, #为从库
\"primary\" : \"192.168.4.51:27051\", #数据来源主库地址
\"me\" : \"192.168.4.52:27052\", #自己的地址
\"lastWrite\" : {
\"opTime\" : {
\"ts\" : Timestamp(1551688600, 1),
\"t\" : NumberLong(1)
},
\"lastWriteDate\" : ISODate(\"2019-03-04T08:36:40Z\"),
\"majorityOpTime\" : {
\"ts\" : Timestamp(1551688600, 1),
\"t\" : NumberLong(1)
},
\"majorityWriteDate\" : ISODate(\"2019-03-04T08:36:40Z\")
},
\"maxBsonObjectSize\" : 16777216,
\"maxMessageSizeBytes\" : 48000000,
\"maxWriteBatchSize\" : 100000,
\"localTime\" : ISODate(\"2019-03-04T08:36:49.473Z\"),
\"logicalSessionTimeoutMinutes\" : 30,
\"minWireVersion\" : 0,
\"maxWireVersion\" : 6,
\"readOnly\" : false,
\"ok\" : 1,
\"operationTime\" : Timestamp(1551688600, 1),
\"\$clusterTime\" : {
\"clusterTime\" : Timestamp(1551688600, 1),
\"signature\" : {
\"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),
\"keyId\" : NumberLong(0)
}
}
}
## 6验证主从配置
### 1.验证数据同步
主库51上操作
rs1:PRIMARY\> show databases;
admin 0.000GB
config 0.000GB
local 0.000GB
rs1:PRIMARY\> use buydb
switched to db buydb
rs1:PRIMARY\> db.atab.save({name:\"bob\"})
WriteResult({ \"nInserted\" : 1 })
rs1:PRIMARY\> db.atab.find()
{ \"\_id\" : ObjectId(\"5c7ce550da9f0fda3bedc1e8\"), \"name\" : \"bob\"
}
rs1:PRIMARY\> show databases
admin 0.000GB
buydb 0.000GB
config 0.000GB
local 0.000GB
### 2 同步数据验证,允许从库查看数据
未做此步,无法在从库上查询数据
在50上查看51
\[root@client-50 \~\]# /usr/local/mongodb/bin/mongo \--host 192.168.4.52
\--port 27052
rs1:SECONDARY\> #从库表示
rs1:SECONDARY\> db.getMongo().setSlaveOk()
> #同步数据验证,允许从库查看数据,注意大小写Ok:O为大写,k为小写
rs1:SECONDARY\> show databases admin 0.000GB
buydb 0.000GB
config 0.000GB
local 0.000GB
rs1:SECONDARY\> use buydb
switched to db buydb
rs1:SECONDARY\> show tables
atab
rs1:SECONDARY\> db.atab.find()
{ \"\_id\" : ObjectId(\"5c7ce550da9f0fda3bedc1e8\"), \"name\" : \"bob\"
}
### 3验证高可用
把当前主库51的服务停止,会自动在副本主机里选择一个新主机做主库
51恢复,启动服务自动边从库
# 三 去掉集群
## 成为从库之后
被配置成从库之后,无法对数据进行操作
\> show databases
2019-03-04T15:53:35.389+0800 E QUERY \[thread1\] Error: listDatabases
failed:{
\"ok\" : 0,
\"errmsg\" : \"not master and slaveOk=false\",
\"code\" : 13435,
\"codeName\" : \"NotMasterNoSlaveOk\",
\"\$clusterTime\" : {
\"clusterTime\" : Timestamp(0, 0),
\"signature\" : {
\"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),
\"keyId\" : NumberLong(0)
}
}
} :
\_getErrorWithCode@src/mongo/shell/utils.js:25:13
Mongo.prototype.getDBs@src/mongo/shell/mongo.js:65:1
shellHelper.show@src/mongo/shell/utils.js:816:19
shellHelper@src/mongo/shell/utils.js:706:15
@(shellhelp2):1:1
# 三 去掉集群步骤
## 停止数据库服务
## 修改配置文件去掉replSet=rs1
## 启动数据库,进入删库
进入local库 db.dropDatabase()
进入config库 db.dropDatabase()
\> use local
switched to db local
\> db.dropDatabase()
{ \"dropped\" : \"local\", \"ok\" : 1 }
\> use config
switched to db config
\> db.dropDatabase()
{ \"dropped\" : \"config\", \"ok\" : 1 }
## 退出停止数据库重启数据库
\[root@sql51 \~\]# mdbstop
\[root@sql51 \~\]# mdbstart
# 四 文档管理
## 添加插入文档
### 插入单条记录
save与insert区别
save
集合不存在时创建集合,然后再插入记录
id字段已存在时,修改文档字段值
id字段不存在时,插入文档
insert
集合不存在时创建集合,然后再插入记录
id字段值已存在时,放弃插入
id字段值不存在时,插入文档
### 插入多条数据
insertMany
能插入多条记录
rs1:PRIMARY\>
db.t1.insertMany(\[{name:\"zdd2\",age:19},{name:\"zdd3\",email:\"PI:EMAIL\"}
\])
{
\"acknowledged\" : true,
\"insertedIds\" : \[
ObjectId(\"5c7cf16e2c5c3ca306aa8c93\"),