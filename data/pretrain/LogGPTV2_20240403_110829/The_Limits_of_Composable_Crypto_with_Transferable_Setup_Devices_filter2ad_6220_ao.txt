Simulating the communication with Z: Every message that S receives from Z it internally feeds to A
and every output written by A is relayed back to Z.
Simulating honest parties: Let I be the set of parties corrupted by the adversary A. This means S needs
to simulate all messages from parties in P=I. S emulates the F 1:M
CP functionality for A as follows. For
every Pj 2 P=I it sends the commitment message (receipt; Pj;P; sid) to all parties Pi 2 I. Next, for every
message (commit; sid; Pi;P; wi) received from A, it records wi = (xi; ri;1; : : : ; ri;n). Upon receiving this
message on behalf of every Pi 2 I, the simulator S sends xi on behalf of every Pi 2 I to Ff and obtains
the result of the computation output. Then using the simulator of the semi-honest protocol (cid:5), it generates
random tapes ri for every Pi 2 I and messages mj;(cid:14) for all honest parties Pj 2 P=I and all rounds (cid:14).
Next, it sends Rj on behalf of the honest parties Pj 2 P=I so that for every Pi 2 I, ri = (cid:8)rj;i. This is
possible since there is at least one party Pj outside I and S can set rj;i so that it adds to ri. Next, in round
2 + (cid:14), it receives the messages from Pi 2 I and supplies messages from the honest parties according to the
simulation of Pi. Along with each message it receives the prove message that the parties in I send to F 1:M
CP .
S simply honestly emulates F 1:M
CP , S
CP for these messages. For messages that the honest parties send to F 1:M
simply sends the receipt message to all parties in I.
Indistinguishability of the simulation follows from the following two facts:
(cid:15) Given an input xi and random tape ri for every Pi 2 I and the messages from the honest parties,
there is a unique emulation of the semi-honest protocol (cid:5) where all the messages from parties Pi if
honestly generated are deterministic.
(cid:15) Since the simulation is emulating the F 1:M
corrupted party Pi deviates from the deterministic strategy.
CP functionality, the computation immediately aborts if a
6.3 Three-Round MPC Protocol in the FgWRAP-Hybrid
In this section, we show how to modify the previous protocol (cid:5)MPC to a three-round protocol. The high-level
idea is similar to the work of [GGHR14] which shows how to compress the rounds of communication in an
MPC protocol using obfuscation primitives. Instead of using obfuscation based primitives, we will directly
make each party create tokens for their next-message function in the previous protocol.
As our starting point, we will look into certain properties of the protocol used to realize the F 1:M
CP to
achieve our goal and explain this next. In more details, our methodology in this section is to ﬁrst unravel the
protocol (cid:5)MPC from the previous section, namely, describe a protocole(cid:5)MPC directly in the FgWRAP-hybrid
53
as opposed to the F 1:M
protocol are replaced with the actual protocol (cid:5)CP that realizes this functionality in the FgWRAP-hybrid.
CP -hybrid. More formally, e(cid:5)MPC is the protocol (cid:5)MPC where the calls to the F 1:M
Then we show how to compress this protocol to a 3-round protocolb(cid:5)MPC by adding extra tokens.
Step 1: Intermediate MPC protocol e(cid:5)MPC in the FgWRAP-hybrid. We begin with an overview of our
protocol (cid:5)CP that realizes the F 1:M
CP functionality. In our protocol (cid:5)CP between a prover Pi and the rest
of the parties as the veriﬁer, the commit phase comprises of two messages and the prove phase for each
statement comprises of two rounds. In more detail,
CP
1. Commit phase: ﬁrst message. In the commit phase, all parties ﬁrst commit to a “challenge” for
the zero-knowledge proof. The parties make the commitment using a token supplied by the prover,
which, as we recall is simply a PRF token. The parties further send the ﬁrst message for the Naor’s
commitment scheme [Nao91] for the prover.
2. Commit phase: second message. In the second message the prover Pi broadcasts a message, namely
the ofﬂine part of randomized encodings (RE) of some function and a set of commitments. For each
commitment, the prover ﬁrst commits the actual string using the Naor’s commitment. Then for each
party Pj, the prover also commits to the decommitment information using the PRF token given by Pj
(See Section 6.1).
3. Prove phase: ﬁrst message. In the prove phase, for each statement in a ﬁrst message, all receivers
decommit to their challenges made using ComgWRAP. Let (cid:5)CH
CP(r) be the algorithm used by Pj to
generate this message where ch is the message committed to in the commit phase and r the random
tape used in the execution.
4. Prove phase: second message. If the challenges were decommitted to correctly, the prover generates
a string and a set of decommitments. We denote by (cid:5)RESP
CP (x; w; r) the algorithm used by the prover
to verify the previous message and generate this message, where x is the statement, w is the message
committed in the commit phase and r the random tape.
polynomial-time computations on the inputs. We are now ready to describe our protocol e(cid:5)MPC where we
do not make use of any tokens and are deterministic
We emphasize that the algorithms (cid:5)CH
CP and (cid:5)RESP
CP
replace all calls to F 1:M
some notations ﬁrst.
CP with instructions from protocol (cid:5)CP in the (cid:5)MPC. First, we recall (and introduce)
(cid:15) Ri = fri;1; : : : ; ri;ng are the shares committed to by Pi, where ri;j will be one of the shares used in
generating the random tape of party Pj.
(cid:15) We denote by Ri = Ri (cid:0) fri;ig and M 0 = (R1; : : : ; Rn).
(cid:15) mi;(cid:14) = (cid:25)i(xi; ri; M(cid:14)(cid:0)1) is the next-message function according to the semi-honest protocol (cid:5)MPC.
To simplify our notation we will denote by mi;0 = Ri.
(cid:15) Let (cid:28)i;j;(cid:14) denote the random tape used by party Pi for the proof of the (cid:14)th statement with Pj using
(cid:5)CP as the prover, and let (cid:28)i;(cid:14) denote the random tape for Pi to generate messages for (cid:5)CP acting as
the prover.
Round 1: Every party Pj generates the ﬁrst message according to (cid:5)CP acting as the receiver for a proof
received from Pi (for every Pi) and broadcasts it to all parties.
54
Round 2: Every party Pi generates the second message according to (cid:5)CP acting as the prover and broad-
casts to all parties where party Pi commits to its input xi and random strings Ri = (ri;1; : : : ; ri;n).
CP ((cid:28)i;((cid:14)+1))
the corresponding NP-statement, namely (cid:5)RESP
Then for (cid:14) = 0; : : : ; T ,
Round 3 + 2(cid:14): Recall that in the (2 + (cid:14))th round of (cid:5)MPC, party Pi sends mi;(cid:14) and proves its correctness
by sending the message to F 1:M
CP . Since the prove phase of (cid:5)CP comprises of two rounds, in round
3 + 2(cid:14) all parties Pj acting as the receiver in (cid:5)CP send their prove phase ﬁrst message (which are
CP((cid:28)i;j;((cid:14)+1)) for every j 2 [n].
decommitments to challenges). More precisely, party Pi computes (cid:5)CH
Round 3 + 2(cid:14) + 1: In round 3 + 2(cid:14) + 1 all parties Pi sends mi;(cid:14) and the prover phase second message for
By the construction and the GUC-composition theorem, we know thate(cid:5)MPC securely realizes Ff in the
High-level description of the simulation. Given an adversary A, the simulator eS will ﬁrst extract the
FgWRAP-hybrid. Next, we brieﬂy describe our simulation.
inputs and shares of random tapes supplied by the corrupted parties Pj and queries Ff with these inputs
to obtain the output of computation. Next, it uses the simulation of (cid:5)MPC as discussed in the previous
section to generate the random tapes for the corrupted parties Pj and the messages from the honest parties.
We remark here that once the random tapes for all corrupted parties Pj’s are ﬁxed, there is only a valid
accepting transcript of the execution using e(cid:5)MPC. This follows from the soundness of protocol (cid:5)CP where
protocol (cid:5)CP used ine(cid:5)MPC.
Before, we proceed to our actual protocol, we make the following important observation regarding the
no corrupted Pj can deviate from the honest strategy.
Prove phase is token free. We remark that in protocol (cid:5)CP the actions of each party (including the prover)
in the prove phase can be computed without querying any token. Namely, in the ﬁrst message of the prove
phase the prover veriﬁers the decommitment of the challenges made using a token it supplied, and generates
the online parts of an RE. The REs are generated using stand-alone algorithms and does not involve tokens.
To verify the decommitments, since it knows the PRF keys used to make these commitments, the prover
can verify the decommitments directly using the key. In the second message, each party Pj performs a
“decoding” computation on the RE and veriﬁes the decommitments. Decoding of the RE can be done again
using stand-alone algorithms. To verify a decommitment, recall that Pj veriﬁes a Naor commitment, which
does not involve tokens and decomj which involves a commitment made using a token supplied by Pj.
Hence Pj can verify this without querying any token.
Step 2: our 3-round protocolb(cid:5)MPC in the FgWRAP-hybrid. We describe our 3-round protocol and prove
correctness. Our protocolb(cid:5)MPC is essentiallye(cid:5)MPC with the following modiﬁcation. Each party Pi gener-
ates 2T + 2 tokens (one for each round after round 2 ine(cid:5)MPC) for each party Pj. These tokens will execute
script up until the 2 + (r (cid:0) 1)st round according toe(cid:5)MPC, and if correct, generates Pi’s message in the rth
the next-message function on behalf of Pi for Pj. In more detail, the rth token will verify the partial tran-
round. We denote the rth token from party Pi to party Pj that performs its actions in round 2 + r as TKr
More formally, the token TKr
Hardwired parameters: The messages exchanged in rounds 1 and 2, Pi’s input xi and its random tape (cid:28)i
i;j is deﬁned as follows:
i;j.
for the protocol (cid:5)CP.
55
Code: On input a partial transcript M r(cid:0)1, it veriﬁes if the transcript is consistent with the protocol e(cid:5)MPC
and then outputs Pi’s message in the rth round. We recall here that given the partial transcript, all
actions of party Pi after round 2 are polynomial-time computable from the hardwired parameters. In
particular, these algorithms do not have to query any token supplied by other parties.
Theorem 6.4 Let f be any deterministic polynomial-time function with n inputs and a single output. As-
GUC realizes Ff in the FgWRAP-hybrid model.
sume the existence of one-way functions and an n-party semi-honest MPC protocol (cid:5). Then protocolb(cid:5)MPC
Proof: Let A be a malicious PPT real adversary attacking protocol b(cid:5)MPC in the FgWRAP-hybrid model.
We construct an ideal adversary S with access to Ff which simulates a real execution ofb(cid:5)MPC with A such
from a real execution ofb(cid:5)MPC with A in the FgWRAP-hybrid. S starts by invoking a copy of A and running
that no environment Z can distinguish the ideal process with S interacting with Ff in the FgWRAP-hybrid
a simulated interaction of A with environment Z, emulating the honest party. We describe the actions of S
for every corruption case.
Simulating the communication with Z. Every message that S receives from Z it internally feeds to A
and every output written by A is relayed back to Z.
e(cid:5)MPC and b(cid:5)MPC are identical. The simulator S follows the simulation eS of the protocol e(cid:5)MPC for these
Simulating rounds 1 and 2 of the protocol. The messages exchanged in rounds 1 and 2 in both protocols
rounds.
i;j. Recall that in b(cid:5)MPC, the parties exchange tokens TKr
by using the semi-honest simulation of the MPC protocol (cid:5) and the simulation of the commit-and-prove
protocol (cid:5)CP. More precisely, given the input and randomness (extracted out) of all corrupted parties Pj and
Simulating access to token TKr
i;j after the ﬁrst
two rounds. Thus, S needs to generate these tokens and sends them to FgWRAP. Towards this, we recall that
the simulator eS fore(cid:5)MPC, generates the messages of the honest parties in rounds 2+r from r = 1; : : : ; 2T +2
the output of the computation, using the semi-honest simulation of (cid:5), eS generates a transcript of messages
The simulator bS forb(cid:5)MPC however does not have to generate messages on behalf of the honest parties,
that will be exchanged with every corrupted party Pj. Next, it forces the computation to proceed according
to this transcript. This follows from the soundness of the prove phase of the protocol (cid:5)CP. More formally,
the simulation forces a corrupted party Pj’s random tape to be a certain value, and then the protocol (cid:5)CP
enforces semi-honest behavior from all corrupted parties.
rather it simply needs to create the code that, on behalf of an honest party, will perform its action in a
particular round of the MPC protocol. Since the transcript of the communication can be ﬁxed before the
adversary queries the tokens TKr
i;j, the simulator simply hardwires the message that Pi needs to send in the
rth round to Pj in the token and sends it to Pj. The code of the token would be to verify the partial transcript
and to reveal Pi’s message in the rth round if the veriﬁcation follows correctly.
Indistinguishability follows from the indistinguishability of the simulation by eS and the fact that the
soundness of protocol (cid:5)CP ensures that there is a unique valid transcript given the random tapes and inputs
of the corrupted parties, and the fact that the adversary cannot deviate from the honest behavior. For any
adversary that deviates, we can construct another adversary B and environment Z where B can prove a false
statement using (cid:5)CP and this will contradict the fact that (cid:5)CP realizes the F 1:M
CP -functionality.
56
7 Acknowledgements
We thank Vipul Goyal, Yuval Ishai, Jonathan Katz and Amit Sahai for several discussions regarding tamper-
proof hardware tokens. The ﬁrst author acknowledges support from the Israel Ministry of Science and
Technology (grant No. 3-10883) and support by the BIU Center for Research in Applied Cryptography and
Cyber Security in conjunction with the Israel National Cyber Bureau in the Prime Minister’s Ofﬁce. The
second author was supported by the Danish National Research Foundation; the National Science Foundation
of China (grant no. 61061130540) for the Sino-Danish CTIC; the CFEM supported by the Danish Strategic
Research Council. In addition, this work was done in part while visiting the Simons Institute for the Theory
of Computing, supported by the Simons Foundation and by the DIMACS/Simons Collaboration in Cryptog-
raphy through NSF grant CNS-1523467. The third author was supported by Google Faculty Research Grant
and NSF Award CNS-1526377.
References
[AIK04]
[BCNP04]
[Bea91]
[BOV15]
[BS05]
[Can01]
Benny Applebaum, Yuval Ishai, and Eyal Kushilevitz. Cryptography in N C 0. In FOCS, pages 166–175,
2004.
Boaz Barak, Ran Canetti, Jesper Buus Nielsen, and Rafael Pass. Universally composable protocols with
relaxed set-up assumptions. In FOCS, pages 186–195, 2004.
Donald Beaver. Foundations of secure interactive computing. In CRYPTO, pages 377–391, 1991.
Ioana Boureanu, Miyako Ohkubo, and Serge Vaudenay. The limits of composable crypto with transfer-
able setup devices. In CCS, pages 381–392, 2015.
Boaz Barak and Amit Sahai. How to play almost any mental game over the net - concurrent composition
via super-polynomial simulation. In FOCS, pages 543–552, 2005.
Ran Canetti. Universally composable security: A new paradigm for cryptographic protocols. In FOCS,
pages 136–145, 2001.
[CDPW07] Ran Canetti, Yevgeniy Dodis, Rafael Pass, and Shabsi Walﬁsh. Universally composable security with
[CF01]
[CGS08]
[CJS14]
[CKL06]
[CKS+13]
[CKS+14]
[CLOS02]
In CRYPTO, pages 19–40,
global setup. In TCC, pages 61–85, 2007.
Ran Canetti and Marc Fischlin. Universally composable commitments.
2001.
Nishanth Chandran, Vipul Goyal, and Amit Sahai. New constructions for UC secure computation using
tamper-proof hardware. In EUROCRYPT, pages 545–562, 2008.
Ran Canetti, Abhishek Jain, and Alessandra Scafuro. Practical UC security with a global random oracle.
In CCS, pages 597–608, 2014.
Ran Canetti, Eyal Kushilevitz, and Yehuda Lindell. On the limitations of universally composable two-
party computation without set-up assumptions. J. Cryptology, 19(2):135–167, 2006.
Seung Geol Choi, Jonathan Katz, Dominique Schr¨oder, Arkady Yerukhimovich, and Hong-Sheng Zhou.
(efﬁcient) universally composable oblivious transfer using a minimal number of stateless tokens. IACR
Cryptology ePrint Archive, 2013:840, 2013.
Seung Geol Choi, Jonathan Katz, Dominique Schr¨oder, Arkady Yerukhimovich, and Hong-Sheng Zhou.
(efﬁcient) universally composable oblivious transfer using a minimal number of stateless tokens.
In
TCC, pages 638–662, 2014.
Ran Canetti, Yehuda Lindell, Rafail Ostrovsky, and Amit Sahai. Universally composable two-party and
multi-party secure computation. In STOC, 2002.
57
[CLP10]
Ran Canetti, Huijia Lin, and Rafael Pass. Adaptive hardness and composable security in the plain model
from standard assumptions. In FOCS, pages 541–550, 2010.
[COSV16a] Michele Ciampi, Rafail Ostrovsky, Luisa Siniscalchi, and Ivan Visconti. Concurrent non-malleable
commitments (and more) in 3 rounds. To appear at CRYPTO, 2016.
[COSV16b] Michele Ciampi, Rafail Ostrovsky, Luisa Siniscalchi, and Ivan Visconti. On round-efﬁcient non-
[CPS07]
malleable protocols. IACR Cryptology ePrint Archive, 2016:621, 2016.
Ran Canetti, Rafael Pass, and Abhi Shelat. Cryptography from sunspots: How to use an imperfect
reference string. In FOCS, pages 249–259, 2007.
[CPS+16a] Michele Ciampi, Giuseppe Persiano, Alessandra Scafuro, Luisa Siniscalchi, and Ivan Visconti.