title:Torpedo: A Fuzzing Framework for Discovering Adversarial Container
Workloads
author:Kenton McDonough and
Xing Gao and
Shuai Wang and
Haining Wang
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
TORPEDO: A Fuzzing Framework for Discovering
Adversarial Container Workloads
Kenton McDonough*
Virginia Tech
Xing Gao*
University of Delaware
Shuai Wang
HKUST
Haining Wang
Virginia Tech
8
4
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
Abstract—Containers enable a computing system to host mul-
tiple isolated applications, making more cost-efﬁcient use of
the available computing resources. However, exploiting shared
computing resources, adversaries can launch various real-world
attacks (e.g., denial-of-service attacks) inside containers. In this
paper, we present TORPEDO, a fuzzing-based approach to detect-
ing out-of-band workloads: such workloads could largely interfere
the performance of colocated container instances on the same
host, gaining extra unfair advantages on the system resources
without being charged appropriately. TORPEDO mutates inputs
of OS syscalls and simultaneously monitors the resource con-
sumption of multiple container instances. It uses resource-guided
heuristics to ﬁnd inputs that maximize the difference in resource
consumption between container instances and resource limits. We
evaluate TORPEDO on widely-used containerization platforms
and demonstrate that it can verify adversarial workloads that
are manually discovered by existing research. More importantly,
TORPEDO identiﬁes several zero-day vulnerabilities that are not
known to the public.
I. INTRODUCTION
Containerization platforms provide environments to isolate
and provision processes running on the same host. Unlike
conventional virtualization techniques maintaining an individual
copy of the operating system (OS) and libraries for each
instance, containers enable much more lightweight and stan-
dalone isolation toward user applications. Container instances
on the same host share the same OS kernel, thus reducing
computing costs by stacking kernels and driving much higher
server efﬁciencies. To date, container techniques have been
widely adopted in many scenarios including cloud computing,
serverless computing, and edge computing. The value of the
container market is expected to reach $8.2 billion in 2025 [3]
as compared to $762 million in 2016 [64].
Containers employ system-wide isolation enforced by several
kernel mechanisms provided by the host OS. In particular, var-
ious Linux kernel authorization mechanisms (e.g., namespaces
and control groups) and the Linux security modules (SELinux,
AppArmor, etc.) are leveraged to constitute resource isolation
and provision [65]. Despite this spectacular progress, various
real-world attacks have been launched to abuse the shared
computing resources and affect the performance of container
instances collocated with a malicious container [29], [52], [78].
For example, recently-disclosed attacks [29] have shown that
by deliberately triggering system calls or locking up interrupts,
Denial-of-Service (DoS) attacks can be launched toward
colocated containers causing as much as 95% performance
degradation.
*Co-ﬁrst authors.
Given various attacks conducted on containerization plat-
forms, previous studies reveal that many attacks are derived
from the same root cause by constantly abusing the shared
computing resource provision [29], [78]. The shared resources,
considered as “fairly” allocated across different containers
by the Linux cgroups mechanism, can be abused to starve
the host and other colocated container instances. While many
research works have manually disclosed attack strategies, a
thorough and complete analysis of containerization platforms
on their resource allocation enforcement is still missing in
understanding today’s container security landscape.
In this research, we extend the standard fuzz testing paradigm
to expose provision resource drifting of container instances by
stressing resources via system calls. Particularly, we capture
resources being subtly manipulated by (malicious) containers;
such manipulation can break the resource isolation guarantee
(e.g., enforced by Linux control groups), largely consume
shared system resources, and likely provoke various security
attacks. Compared with existing research, our automated testing-
based framework comprehensively cruises the potential attack
surface of containerization platforms, and can provide counter
examples (test inputs) that can actually trigger the defects.
The process of discovering, debugging, and even ﬁxing the
container vulnerabilities is adequately simpliﬁed.
We have implemented the fuzzing framework into a prac-
tool, named TORPEDO, by addressing
tical and efﬁcient
multiple domain-speciﬁc challenges and incorporating several
optimizations in the container environments. TORPEDO is
an unsupervised coverage-guided fuzzer supporting multiple
containers with arbitrary resource restrictions tested on different
container runtimes. It leverages resource-guided heuristics to
ﬁnd system call inputs that maximize the discrepancy between
system resource consumption and container resource limitations.
We propose to guide the fuzz testing by combining both
code coverage and system resource consumption as feedback.
We also propose testing oracles, with respect to the system-
level resource allocation guarantees commonly assumed by
the containerization platforms, to identify potential adversarial
workloads.
The proposed workﬂow is effective and shows promising
results when evaluated with Docker [11] with three different
container runtime settings, including the default runc [10], the
Redhat crun [24], and Google gVisor [12]. TORPEDO success-
fully re-conﬁrms several vulnerabilities that are known to the
community, but identiﬁes several new attacking vectors. Also,
it detects multiple new vulnerabilities concerning violations
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00048
402
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:21 UTC from IEEE Xplore.  Restrictions apply. 
of CPU resource limitation from these popular (commercial)
container components. We also trace the root cause for
identiﬁed vulnerabilities in the container implementation, and
investigate the potential security threats. Conﬁrmation with
container developers also receives promising feedback, with
multiple ﬁndings have been promptly conﬁrmed and ﬁxed.
The proposed techniques and the developed platform can
be adopted by virtualization technique developers and security
researchers, to provide continuous updates against attackers
with access to the tremendous numbers of virtualization and
cloud services in the real world. To facilitate results veriﬁcation
and follow-up research, we will release all our erroneous
detection results and a snapshot of TORPEDO.
II. BACKGROUND
To date, many container technologies are available on
the market, including LXC, OpenVZ, Linux-Vserver, and
Docker [11], [13]–[15]. In general, container engines such
as Docker create and manage the lifecycle of containers, and
container runtime is responsible for translating the visibility and
resource restrictions from the user-facing API into directives
for the kernel. There are several existing designs for container
runtimes. Native runtimes perform the necessary setup for