通过这个命令，你可以知道1ogs-exchange交换器是可持久化的（durable），
并且它不会被服务器自动删除。
在检测队列和交换器的信息之后，你自然而然想要看看绑定信息了吧。在命令
行键人此命令：
$./rabbitmqctl list_bindings
Listing bindings...
all-logs
all-logs
[]
msg-inbox-errors
msg-inbox-errors
[]
msg-inbox-logs
msg-inbox-logs
[]
logs-exchange
all-logs
[]
logs-exchange
msg-inbox-logs
*.msg-inbox
[]
logs-exchange
msg-inbox-errors
error.msg-inbox
[]
...done.
该命令不接收除-P（指明vhost路径）以外的参数。结果由若干行组成，每行
包含了交换器名称、队列名称、路由键和参数。最开始的三行看起来非常特殊，好
像缺失了什么.那又是匿名交换器的关系。这几行展示了每个队列使用自己的队
列名称作为路由键绑定到匿名交换器上。你也可以看到logs-exchange（topic类
型交换器）绑定了三个队列。第一个队列alllogs，通过使用#路由键（通配符）
进行绑定。另外两个队列则分别使用*.msg-inbox和error.msg-inbox作为路
---
## Page 81
3.3检查
59
由键进行绑定。
我们已经讲述了许多rabbitmqctl命令，而且还有更多命令可用（通过不携
带参数运行rabbitmqctl，会看到帮助文档，里面有详细说明）。当我们讨论集群
和监控RabbitMQ时，你就能了解更多。
3.3.2理解RabbitMQ日志
在之前的章节中，你学到了如何使用rabbitmqctl脚本获取服务器信息。那
RabbitMQ记录事件有多种原因，例如连接尝试、用户创建及解析请求时的错误。
RabbitMQ有个非常酷的功能是，你可以使用AMQP交换器、队列和绑定实时获得
所有这些数据，并对此做出反应。如果你想要按照通常的做法的话，也可以在文件
系统查看日志文件。让我们先以这种方式进行查看，再构建一个AMQP消费者来显
示RabbitMQ日志；之后你可以调整它并为RabbitMQ设置一个监控系统。
在文件系统中读日志
当检查日志时，你需要关心的设置是LOG_BASE环境变量。默认值，在
rabbitmq-server脚本显示如下：
LOG_BASE=/var/log/rabbitmq
在那个文件夹内RabbitMQ会创建两个日志文件：RABBITMQ_NODENAME-
sas1.1og 和 RABBITMQ_NODENAME.1og。其中这里的 RABBITMQ_NODENAME
指的是_rabbit@localhost_或者就是rabbit，这取决于你如何配置系统。
sasl日志和另一个日志有什么区别呢？SASL（SystemApplicationSupport
Libraries，系统应用程序支持库）是库的集合，作为Erlang-OTP发行版的一部分。
它们帮助开发者在开发Erlang 应用程序时，提供一系列标准。其中之一是日志记
录格式。所以，当RabbitMQ记录Erlang 相关信息时，它会将日志写人rabbit-
sasl.log文件。举例来说，你可以在这个文件中找到Erlang 的崩溃报告。这有助
于调试无法启动的RabbitMQ节点。
现在如果你想看看服务器正在发生的事件的话，则可以tail-f rabbit.log文件。
你会看到如下这样：
---
## Page 82
60
第3章运行和管理Rabbit
accepted TCP connection on 0.0.0.0:5672 from 192.168.1.253:44550
starting TCP connection  from 192.168.1.253:44550
=INFO REPORT==== 10-Sep-2010::13:50:58 ===
closing TCP connection  from 192.168.1.253:44550
=INFO REPORT==== 10-Sep-2010::13:51:08 ===
Rolling persister log to
"/var/lib/rabbitmq/mnesia/rabbit/rabbit_persister.LOG.previous"
这段信息对调试你的消费者/生产者很有帮助；你可以看到它们是否连接正常，
连接是否突然中断，等等。你也可以找出是否通过一个未经允许的IP地址连接到服
务器上。
除了网络流量信息外，从rabbit.log文件你还能看到像对用户、交换器、队
列等的操作事件。因此如果某些原因致使AMQP客户端编码请求失败，或者声明
队列时有冲突，你都可以在这里找到事件记录。
轮换日志
最后一点内容是关于如何轮换日志文件。首先你需要知道服务器是否启动，它
会重新创建日志文件并在旧的文件后面添加一个数字。你会得到像rabbit.log.1
这样的文件。如果你想手动轮换日志文件或者通过cronjob来达成的话，则可以使
用—你猜得没错—rabbitmqctl。你可以像这样运行：
$./rabbitmqctl rotate_logs suffix
这里的suffix是一个单词，通常是数字，你可以添加到被轮换的日志文件的末尾。
你可以尝试这样做：
$./rabbitmqctl rotate_logs.1
你应该在日志文件夹下看到以下文件：
$ls/var/log/rabbitmg
PI:EMAIL
rabbit@mrhyde-sasl.log.1
PI:EMAIL
rabbit@mrhyde.log.1
---
## Page 83
3.3检查
61
通过AMQP实时访问日志
现在让我们看看如何通过AMQP获得实时日志信息。也许当你使用rabbitmqctl
列出交换器列表时看到了其中一个叫作amq.rabbitmq.log的topic交换器。
RabbitMQ把日志信息发布到该交换器上，并以严重级别作为路由键一error、
warning和info。基于从前面章节学到的知识，你可以创建一个消费者来监听日
志并做出相应的反应。为了示例起见，这里只将日志内容输出到控制台上。
在编写消费者之前，让我们先做点重构。在config文件夹下创建config·php
文件，并将下面的代码键人其中。
清单3.2默认配置文件
dudi>
define('HosT'，'localhost'）;
define('PORT'，5672);
define('USER'，'guest'）;
define('PASs'，'guest');
define（'VHOST'，'/'）;
?>
从现在开始，我们将假设已将config·php文件和amgp.inc库包含在内，因
此在将来的代码示例中将不再提及。同时，我们也会假设你初始化了连接并且获得
了通信信道。记住这些，现在来看看PHP消费者示例如下。
清单3.3日志监听器
list($errors_queue,,）=$ch->queue_declare();
queue_declare();
1个监听队
list($info_queue, ， ） = $ch->queue_declare();
列
$exchange = 'amq.rabbitmq.log';
$ch->queue_bind($errors_queue,$exchange,"error");
将队列绑
$ch->queue_bind($warnings_queue, $exchange, "warning");
2交换器
定到日志
$ch->queue_bind($info_queue,$exchange,"info");
$error_callback = function($msg){
创建回
u\'poqdelivery_info['channel']->basic_ack(
$msg->delivery_info['delivery_tag']);
）；
$warning_callback = function($msg){
!u\'Apoqbody,"\n";
$msg->delivery_info['channel']->basic_ack(
$msg->delivery_info['delivery_tag']);
）；
$ch->basic_consume($errors_queue,"",false,
false,false,false,
$error_callback);
basic_consume($warnings_queue,"",false,
4费者
false,false,false
$warning_callback);
$ch->basic_consume($info_queue,"",false,
false,false,false,
$info_callback);
while(count($ch->callbacks)）{
$ch->wait();
from 127.0.0.1:54197
info: accepted TCP connection on 0.0.0.0:5672 from 127.0.0.1:54204
如果你好奇自己刚才创建的队列名称是什么的话，那就来到另一个终端窗口，
并使用rabbitmqctl来列出队列列表。你会看到如下所示：
---
## Page 85
3.4修复Rabbit：疑难解答
63
Listing queues ...
amg.gen-kkcRbifmFz14cVI6FLA4fQ==  0
amq.gen-4dngVzQA3Qz0Uf1obu391w==
amq.gen-NeTS98PHQygG3S2ciSzOww==
...done.
以这种方式创建队列的好处在于你无须担心队列的名称。
就如你在本节中看到的那样，RabbitMQ为内部状态提供了足够的信息。你有
两种方式来检测服务器状态：其中之一是通过传统的文件日志；而另一种是更为先
进的AMQP交换器，它能给予你充分的灵活性，使得过滤日志变得更加简单。
3.4修复Rabbit：疑难解答
到自前为止一切都很正常，但是如果你的Rabbit难以驯服该怎么办呢？不管你
尝试什么方法，它就是不启动，或者就算运行了也不回复你的消息。让我们看看你
该如何解决这些问题。
由badrpc、nodedown和其他Erlang引I起的问题
RabbitMQ出错时返回的稀奇古怪的消息会将RabbitMQ新手拒之门外。随着
Erlang。我们并不是说Erlang是有问题的（远非如此）；我们要说的是像badrpc、
nodedown这样的消息是由Erlang虚拟机产生的；同时，只需要对Erlang的工作机
制稍加了解，我们就能轻松解决这些问题。
Erlangcookie
当开始使用RabbitMQ时，一些常见的错误是badrpc和nodedown。这些错
误经常在你尝试使用rabbitmqctl命令的时候发生。取代期望结果的是错误消息
的反馈。一开始你会以为RabbitMQ没有运行，但执行如下命令就证明之前的想法
是错的：
$ ps ax | grep rabbit
...omittedoutput.
dir "/var/lib/rabbitmq/mnesia/rabbit@mrhyde"-noshell-noinput
---
## Page 86
64
第3章运行和管理Rabbit
服务器进程正在运行，那么究竟是怎么回事呢？让我们先试着理解rabbitmqct1
命令的工作原理。rabbitmqctl会启动Erlang节点，并从那里使用Erlang分布式
系统尝试连接RabbitMQ节点。要达成这项工作，你需要两样东西：合适的Erlang
cookie和合适的节点名称。那么什么是Erlangcookie呢？Erlang节点通过交换作为
秘密令牌的Erlang cookie以获得认证。由于你一连接到远程节点后，就能执行命令，
因此有必要确保该节点是可信的。Erlang将令牌存储在名为.erlang.cookie的文
件。该文件通常位于用户的home目录下。你可以执行以下命令看看内容：
$ cat ~/.erlang.cookie
为了能让rabbitmqct1连接RabbitMQ节点，因此需要共享相同的cookie。
如果运行RabbitMQ和执行rabbitmqct1命令的是同一个用户，那么你不会有任
何问题。但是在产品环境中，你可能会想要创建rabbitmg用户，并以该用户的
身份运行服务器。这意味着你必须和rabbitmg用户共享cookie，或者你切换到
rabbitmq才能成功执行rabbitmqctl。当我们讨论集群多个RabbitMQ服务器时，
我们会再次讨论Erlangcookie的。
Erlang节点
关于节点，它们会有什么问题呢？当你启动Erlang节点时，你可以给它两个互
斥的节点名选项，name 和 sname。节点名可长可短，这也是 sname 中s（hort）的
含义。如果用长名启动节点，则它会像PI:EMAIL这样。
如果你用短名的话，它就会像rabbit@hostname这样。后者是启动RabbitMQ的
默认方式。当你想让rabbitmqctl能连接上RabbitMQ时，你必须使得这些参
数两边都能匹配。让我们实验一下，看看如果将rabbitmqctl文件中的-sname
rabbitmqctl$修改为-namerabbitmqctl$的话，会发生什么。保存文件并运
行以下命令：
./rabbitmqctllist_queues
Listing queues ...
你会得到友好的错误消息，像这样：
=ERROR REPORT==== 21-Sep-2010::16:01:46 ===
** System running to use fully qualified hostnames **
**Hostname mrhyde is illegal **