# Title: Transaction-Oriented Text Messaging with Trusted-SMS

## Authors
- Antonio Grillo
- Alessandro Lentini
- Gianluigi Me
- Giuseppe F. Italiano

## Conference
2008 Annual Computer Security Applications Conference

## Abstract
The exponential growth of the Short Message Service (SMS) has made it a widely used tool for social, marketing, and advertising messaging. Mobile devices are rapidly becoming Personal Trust Devices (PTDs), embedding personal data that allow for the sending and receiving of private information. This paper introduces the Trusted-SMS system, which enables users to exchange non-repudiable SMS messages, digitally signed using the Elliptic Curve Digital Signature Algorithm (ECDSA). The system is suitable for various scenarios, such as commercial transactions and bureaucratic delegations. The few bytes required for the signature can be embedded into a single SMS, leaving ample space for the message payload, depending on the chosen elliptic curve.

## 1. Introduction
With approximately 2.6 billion subscribers worldwide, mobile phones have outpaced virtually every prior technology, including TV sets, radios, wristwatches, wallets, wireline phones, and bicycles, in just 25 years. The next frontier appears to be the diffusion of mobile phones in rural areas of developing countries [19]. The most successful form of mobile communication is the Short Message Service (SMS). In the first quarter of 2006, users sent 235 billion SMS messages [1], and predictions indicate that the number of mobile commerce users will grow from 94.9 million in 2003 to 1.67 billion by 2008 [34].

The ubiquity of mobile devices extends traditional marketing's time-space paradigm, emphasizing the importance of location, time, and personalization. However, the design of SMS for purposes outlined in [17] makes it vulnerable to confidentiality, integrity, and non-repudiation attacks. Cryptography offers powerful tools for protecting sensitive communications over public networks but imposes computational overhead, which can threaten the usability of embedded devices like smartphones, given their constraints on computational power, battery life, and user latency.

Moreover, security concerns primarily stem from:
- The proliferation of SMS usage, which has attracted malware writers who use phishing and other social engineering techniques (e.g., SMS-spoofing) to trick recipients into divulging private data [22].
- Websites like FakeMyText.com, which undermine trust in SMS services.

Despite these concerns, companies still consider SMS an effective means for future transactions. This paper describes Trusted-SMS, a novel framework for exchanging non-repudiable SMS in a Public Key Infrastructure (PKI) environment. The goal is to illustrate how to extend PKI services, based on X.509 ECC, to smartphones with Java capabilities, focusing on two key-delivery and transaction scenarios.

## 2. Related Work
GSM specifications [7] do not define mechanisms for ensuring the integrity of SMS content and the authentication of the sender. Digitally signed SMS can prevent tampering and ensure the integrity and authentication of the sender [31], while encrypted SMS can prevent unauthorized access to the content. Non-repudiation has been standardized in two international recommendations:
- ISO/IEC 10181-4: Information Technology - Open System Interconnection - Security Frameworks in Open Systems - Part 4: Non-repudiation Framework
- ISO/IEC 13888: Information technology - Security techniques - Non-repudiation - Part 3: Mechanisms using asymmetric techniques

Available solutions for non-repudiation can be divided into two models: "Peer-to-Peer" (P2P) and "Client-Server" (CS). P2P focuses on SMS exchanges involving only mobile devices, while CS involves exchanges between a mobile device (client) and a remote computer (server). Examples of P2P models include Message in a Bottle (Miabo) [35], SpiderSMS [21], Kryptext [4], MultiTasker [5], and CryptoSMS [2]. Fortress-SMS [3] follows the CS model.

The security level in both models depends on the key-distribution scheme and the security algorithm applied. The solution presented in this paper, Trusted-SMS, binds public keys with user identities via a Certification Authority (CA). Available solutions, which are based on self-signed certificates, are not suitable for business transactions and personal communications due to scalability issues and key agreement complexity. Trusted-SMS achieves platform independence by using Java (J2EE and J2ME) technologies, making it a scalable solution for massive deployment.

## 3. Digital Signature on SMS
The Elliptic Curve Digital Signature Algorithm (ECDSA) [14] is a Federal Information Processing Standards (FIPS)-approved cryptographic algorithm for digital signature generation and verification, described in ANSI X9.62 [6]. Compared to a 1024-bit RSA key, ECC provides shorter keys, shorter encrypted messages, and faster private key operations. For the same security level, a 1024-bit RSA key is comparable to a 160-bit ECC key, as shown in ANSI X.9.63. For ECDSA based on the curve P-192, the signature length is 384 bits, or 48 bytes. The available space for the SMS payload is:

\[ \text{Len(Payload)} = 140 - 48 \]

where 140 is the total length in bytes of a single SMS. Digitally signed messages are sent to a Short Message Service Center (SMSC). Transmission between the SMSC and mobile equipment can be done through different protocols, such as Signaling System 7 (SS7) within the standard GSM MAP (Mobile Application Part) framework or TCP/IP. The payload length is limited to 140 bytes, translating to either 160 7-bit characters, 140 8-bit characters, or 70 16-bit characters. General Packet Radio Service (GPRS) can also be used as the bearer of SMS, making spoofing attacks from a mobile impossible unless GPRS radio traffic can be forged [16].

## 4. Trusted-SMS Framework
Trusted-SMS is a comprehensive framework for secure SMS exchange, defining interaction schemas among three entities:
- **Service Supplier (SS)**: Responsible for advertising and providing services.
- **End User (EU)**: The customer of the supplied services.
- **Certification Authority (CA)**: Ensures trust in the enrolled entities.

Key considerations for choosing a suitable signature/encryption scheme include the deployment scenario, the value of the information to be protected, expected threats, and the physical disposition of users. The Trusted-SMS framework is flexible, allowing for two degrees of freedom: provisioning scenario and transaction scenario.

### 4.1. Provisioning Scenarios
#### 4.1.1. Key Generation
The adopted key generation algorithm is included in Recommendation X9.62. The number of available public keys for an elliptic curve cryptosystem is the order of \( P \), denoted as \( q \). For the P-192 curve, \( q \) is in the order of \( 10^{57} \). The probability of a collision for a target user population of 1 million people is negligible, at \( 10^{-46} \). This makes it viable to generate keys directly on the embedded device.

**Scenario 1: EU Key Generation**
- The EU generates its own key pair.
- The process begins with a new account request to the SS via HTTPS, carrying the EU's phone number and personal data.
- The SS processes the request, records the user, and transmits an Activation Code (AC) to the EU.
- The EU installs a MIDlet via OTA over GPRS and generates a key pair using a seed derived from a PIN, AC, and phone number.
- The EU composes a message with its public key, AC, and encrypts it with its private key and a partner public key, then forwards it to the CA.
- The CA checks the data, issues an X509 certificate, and responds to the SS with the EU's phone number and the URL of the certificate.
- The SS sends an SMS to the EU with the activation result and the URL of the emitted X509 certificate.

**Scenario 2: CA Key Generation**
- The CA generates the key pair.
- The EU requests a new account over GPRS, providing their phone number and personal data.
- The SS processes the request, registers the EU, and forwards the request to the CA.
- The CA generates a key pair using a seed derived from the EU's phone number and a random component, then replies to the SS with the EU's phone number, MIDlet serial number, and a specific MIDlet.
- The EU installs the MIDlet and activates it, sending an activation request (AR) to the SS.
- The AR contains a keyword and the MIDlet serial number encrypted with a preloaded AES key.
- The CA checks the correctness and responds to the SS with the EU's phone number and the EU's private key encrypted with a shared symmetric key.
- The SS forwards the response to the EU, who decrypts the private key, generates another AES symmetric key, and stores the private key encrypted with the generated key.

### 4.2. Transaction Scenarios
#### Scenario 1: Indirect Transaction Schema (CA-Centric)
- Each EU must be equipped with a key pair.
- The EU has a copy of the CA's public key.
- The transaction involves the CA actively, ensuring the integrity and non-repudiation of the SMS.

This framework ensures flexibility and can be effectively applied in various contexts, making it a robust solution for secure SMS exchange.