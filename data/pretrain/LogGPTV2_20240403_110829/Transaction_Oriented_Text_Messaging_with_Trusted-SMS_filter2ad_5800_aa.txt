title:Transaction Oriented Text Messaging with Trusted-SMS
author:Antonio Grillo and
Alessandro Lentini and
Gianluigi Me and
Giuseppe F. Italiano
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
Transaction oriented text messaging with Trusted-SMS
Antonio Grillo, Alessandro Lentini, Gianluigi Me, Giuseppe F. Italiano
Department of Computer Science and Engineering,
{grillo, lentini, me, italiano}@disp.uniroma2.it
University of Rome Tor Vergata, Rome, Italy
Abstract
The exponential growth of the Short Message Service
(SMS) use has led this service to a widespread tool for so-
cial, marketing and advertising messaging. The mobile de-
vices are quickly becoming Personal Trust Devices (PTD),
embedding personal data, which allow sending/receiving
private information from/to the PTD. This paper introduces
our Trusted-SMS system, which allows users to exchange
non-repudiable SMS’s, digitally signed with the Elliptic
Curve Digital Signature Algorithm (ECDSA). This system
can ﬁt in many scenarios, such as commercial transaction,
bureaucratic delegation etc.. In fact, the few bytes signature
is embedded into a single SMS, leaving many bytes, depend-
ing on the choice of the elliptic curve, for the SMS payload.
1. Introduction
With about 2.6 billion subscribers around the world, mo-
bile phones have out-diffused virtually every prior technol-
ogy, whether TV sets, radios, wrist watches, wallets, wire-
line phones, or bicycles, and have done so in 25 years. The
diffusion of mobile phones in the rural areas of the devel-
oping world appears to be the next frontier [19]. The most
successful form of mobile communication is Short Message
Services (SMS), in the ﬁrst quarter of 2006 users sent 235
billion SMS messages [1] and predictions state that 94.9
million mobile commerce users in 2003 will grow to 1.67
billion users by 2008 [34]. The ubiquity of mobile de-
vices, however, extends traditional marketing’s time-space
paradigm, and ampliﬁes the importance of location, time,
and personalization. Since the SMS has been designed for
the purposes in [17], many possible attacks to the conﬁden-
tiality, the integrity and non-repudiation of the SMSs can
arise. However, cryptography provides powerful tools for
protecting sensitive communications over a public network
but it imposes an overhead in terms of additional comput-
ing: this limitation could threaten the usability of the em-
bedded devices (e.g. smartphones) with severe constraints
on computational power, battery life and user latency, which
impose limits on the amount of encryption operations that
can be performed without a severe degradation of the de-
vice.
Moreover, security concerns, currently, mainly rely on de-
pendability due to the following facts:
• proliferation in using SMS has also attracted malware
writers which have been adapted phishing and other
attacks, based on social engineering techniques (e.g.
spooﬁng become SMS-spooﬁng) in order to trick re-
cipients into divulging their own private data [22];
• there are many sites, like FakeMyText.com, which do
not encourage trust in the SMS services.
In particular, the concerns about the intrinsic nature of the
SMS service seems not to discourage companies to consider
SMS as an effective means of realizing transactions of the
future. This paper aims at describing Trusted-SMS, a novel
framework for exchanging non-repudiable SMS in a PKI
environment. For these reasons, the goal of this paper is to
illustrate how to extend the PKI services, relying on X.509
ECC based, to smartphones with Java capabilities, focusing
on two different key-delivery and transaction scenarios.
2 Related Work
GSM speciﬁcations [7] do not deﬁne the mechanisms for
ensuring integrity of the SMS content and authentication of
the SMS sender; digitally signed SMS can be used to avoid
SMS tampering, ensuring integrity and authentication of the
sender [31] while encrypted SMS are useful for preventing
unauthorized access to SMS content. Non-repudiation has
been standardized in two international Recommendations:
• ISO/IEC 10181-4 Information Technology- Open Sys-
tem Interconnection-Security Frameworks in Open
Systems-Part 4:Non repudiation Framework
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.43
DOI 10.1109/ACSAC.2008.43
485
485
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:46 UTC from IEEE Xplore.  Restrictions apply. 
• ISO/IEC 13888, Information technology – Security
techniques – Non-repudiation – Part 3: Mechanisms
using asymmetric techniques
The available solutions to ensure non-repudiation can be di-
vided into two different models: “Peer-to-Peer”(P2P) and
“Client-Server”(CS); the former focuses on the SMS ex-
change which involves only mobile devices, while the latter
focuses on the SMS exchange which occurs between a mo-
bile device, as the Client, and a remote computer, as the
Server. Many solutions belong to the P2P model, such as
Message in a Bottle (Miabo) [35], SpiderSMS [21], Kryp-
text [4], MultiTasker [5] and CryptoSMS [2]. Fortress-SMS
[3] follows the CS model.
In both solutions, the security level ensured is strictly re-
lated to the key-distribution scheme and the security algo-
rithm applied. The solution presented in this paper, Trusted
SMS, binds public key with respective user identities by
means of a Certiﬁcation Authority. Available solutions
cannot be used for sending and receiving information as
part of business transactions and personal communications
because they are based on self signed certiﬁcate as key-
distribution schema. Kryptex, CryptoSMS and Multitasker
realize encryption on a shared password. These solutions
are suitable for bounded scenarios, such as an organiza-
tion and its employees, but not appropriate (e.g. scalability)
for more complex scenarios (e.g. mobile commerce), due
to key agreement complexity. Fortress-SMS grants both
the shared password solution and a PKI based approach,
but currently it is available only for Symbian-based device.
Hence Trusted SMS achieves platform independent design
by choosing proper Java (J2EE and J2ME) technologies.
All the available solutions allow users to send and read en-
crypted SMS text messages, Miabo provide also the sms-
signature capability. For these reasons Trusted SMS could
represent a scalable solution for massive deployment with
appropriate performances (cfr. 7): this represents the most
relevant novelty impact with respect to the state of the art.
3 Digital Signature on SMS
The Elliptic Curve Digital Signature Algorithm
(ECDSA) [14] is a FIPS (Federal Information Processing
Standards) approved cryptographic algorithm for digital
signature generation and veriﬁcation and it is described in
ANSI X9.62 [6].
In comparison to a 1024 bit RSA key,
the ECC (Elliptic Curve Cryptography) provides shorter
keys, shorter encrypted messages and faster private key
operations. In order to achieve the same security level, a
1024 bit RSA key is comparable with 160 bit ECC key as
shown in ANSI X.9.63. For example, for ECDSA based
on the curve P − 192, the signature length will be 384 bit,
or 48 bytes, long. The SMS available space for payload is,
therefore,
Len(P ayload) = 140 − 48
where 140 is the total length in bytes of a single SMS. Dig-
itally signed messages are sent to a Short Message Service
Center (SMSC). Transmission of the short messages be-
tween SMSC and mobile equipment can be done through
different protocols such as Signaling System 7 (SS7) within
the standard GSM MAP (Mobile Application Part) frame-
work or TCP/IP within the same standard. The messages
are sent with the additional MAP operation forward short
message, whose payload length is limited by the constraints
of the signaling protocol to 140 bytes. In practice, this trans-
lates to either 160 7-bit characters, 140 8-bit characters,
or 70 16-bit characters. Furthermore, the General Packet
Radio Service (GPRS) can be used as the bearer of SMS:
spooﬁng attacks from a mobile are impossible unless you
can forge GPRS radio trafﬁc [16].
4 Trusted SMS Framework
Trusted-SMS is a complex framework for allowing se-
cure SMS exchange. This framework deﬁnes the interaction
schemas between three involved entities. By the end user
point of view, this framework allows anyone to send and/or
to receive SMS messages digitally signed with standard El-
liptic Curve Digital Signature Algorithm (ECDSA) and op-
tionally encrypted with standard Elliptic Curve Integrated
Encryption Schema (ECIES). This framework, which re-
lies on digitally signed and encrypted SMS, can be used
to prevent SMS from being tampered and is able to ensure
integrity and non-repudiation. Three different entities take
part into the Trusted-SMS framework:
• Service Supplier (SS): this entity is responsible for ad-
vertising and providing services;
• End User (EU): this entity is the customer of the sup-
plied services;
• Certiﬁcation Authority (CA): this entity is responsible
for ensuring trust to the enrolled entities.
There are several key considerations when choosing a suit-
able signature/encryption scheme for this application. The
most important consideration is the deployment scenario.
The value of the information to be protected,
the ex-
pected threats and the physical disposition of the users
are key considerations when deciding on a suitable signa-
ture/encryption scheme.
The Trusted-SMS framework was developed ensuring a
very important feature:
the ﬂexibility; each framework
would suggest a solution for a speciﬁc problem but at the
same time it should allow its effective application in many
current contexts. The developed framework features two
486486
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:46 UTC from IEEE Xplore.  Restrictions apply. 
degrees of freedom that, effectively, allow applying it in
four different ways. Trusted-SMS Framework is ﬂexible in:
the provisioning scenario; the transaction scenario.
With the term provisioning scenario we mean the policy fol-
lowed by the distribution of keys to the EU. In particular, we
identify two different alternatives for this policy: the ﬁrst
one, i.e. EU Key Generation policy, counts on the EU ca-
pability to generate its own keys; the second one, i.e. CA
Key Generation policy, refers to the situation in which the
CA is accountable for the EU keys generation process. The
Service Supplier capability in generating its own keys does
not affect the introduced model (cfr. 5). Key management is
an important part of our solution. The strongest algorithms
and the longest keys are useless if the keys are not gener-
ated, distributed and destroyed in a secure manner. Stealing
keys is more attractive than breaking the encryption algo-
rithm, from attacker point of view.
The transaction scenario represents the effective protocol
which the involved entities follow in order to complete a
useful interaction. We also specify two alternatives for the
transaction scenario. In the ﬁrst case, named Indirect, the
transaction involves the CA actively; in the second case,
named Direct, the transaction involves the EU and the Ser-
vice Supplier.
4.1 Provisioning Scenarios
4.1.1 Key generation
The adopted key generation algorithm is included in the
Recommendation X9.62. The overall number of available
public keys for an elliptic curve cryptosystem is the order
of P , namely q. For the case, e.g., of the P − 192 curve,
the value of q is in the order of 1057. Whilst generating
the public keys (choosing d ∈ [1, n − 1] as the private key
), using a pseudorandom number generator, has the proba-
bility of 1/(1057 − 1), 10−57 for every single key. Conse-
quently, the probability of a collision, recalling the birthday
paradox, for a target user population of 1 million people
is deﬁnitively negligible, equal to 10−46. These considera-
tions lead to evaluate as viable the idea to generate the keys
directly on the embedded device, as an alternative scenario
of enforcing the CA to generate the keys. Note that the key
delivery (with MIDlet deployment) could represent a sys-
tem weakness: due to its complexity, we analyze formally
the security of both schemes in a subsequent paper.
Scenario 1: EU Key Generation When the EU embeds
the capability to generate its own key pair we are in the EU
Key Generation scenario.
The protocol begins with the request for a new account
which reaches the Service Supplier through the HTTPS
channel. The request carries the phone number of the EU
(P NEU ) and its own personal data (P DEU ) (e.g. ﬁrst
name, last name, address etc). The SS processes the re-
quest, records the requesting user into the database and, ob-
tains a personal Activation Code (AC) which is transmitted
secretly to the EU, e.g., over the HTTPS connection or by
hand.
EU obtains and installs on its mobile device a copy of the
MIDlet through the OTA mechanism over a GPRS connec-
tion. At this time the EU begins the key generation process
using a seed derived from three factors: a secret Personal
Identiﬁcation Number with a ﬁxed length that is chosen ran-
domly by the EU (PIN), the Activation Code (AC), and the
EU phone number in order to enforce the unique property
of the seed itself (P NEU ). The result of the key genera-
tion process is an Elliptic Curve Cryptography key-pair: the
public component (QEU ) and the private component (dEU ).
In order to complete the subscription to the framework the
EU has to interact with the CA; in order to reach this goal
the EU composes a message with its own public key (QEU )
followed by the AC and encrypts it with its own private key
(dEU ) and a partner public key (QX). The EU private key
ensures that the EU has correctly generated the key-pair
while the partner public key ensures the conﬁdentiality of
this information. The identity of the communication part-
ner is undeﬁned; this detail does not affect the proposed
scenario. The partner could be the SS or the CA depending
on the choice adopted for the transaction schema (cfr. 4.2).
The AR is then forwarded to the CA with the EU public key
(QEU ), the EU phone number (P NEU ) and the EU Per-
sonal Data (P DEU ). The CA checks the correctness of this
data, issues an X509 certiﬁcate, and answers to the SS with
the EU phone number (P NEU ) and the URL of the X509
certiﬁcate. Finally the SS sends an SMS to the EU indicat-
ing the result of the activation process and the URL of the
emitted X509 certiﬁcate.
Scenario 2: CA key generation The CA Key Genera-
tion scenario assigns the Key Generation process to the CA.
The EU make the request for a new account over GPRS
communicating its phone number (P NEU ) and its personal
data(P DEU ). The SS receives this request, begins to pro-
cess it registering the EU into its own database, and for-
wards the request to the CA. The CA generates a key pair
using a seed derived from two factors: the EU phone num-
ber (P NEU ) and a random component (Rand). The CA
replies to the SS with the EU phone number (P NEU ), the
MIDlet serial number (M idletX sn) and a speciﬁc MIDlet
(M idletX).
The process of MIDlet delivery and installation follows
the same steps already described for the EU Key Gener-
ation Scenario. After the ﬁrst MIDlet power-on the EU
has to activate its application; the activation request (AR)
is composed and sent to SS. The AR contains: a keyword
487487
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:46 UTC from IEEE Xplore.  Restrictions apply. 
that identiﬁes the activation request message type (Act)
and the M idletX sn encrypted with a preloaded AES key
(KAES(1)). This request is then forwarded to the CA which
provides to check the correctness demonstrating that the
EU owns the correct symmetric keys. The CA replies to
the Service Supplier with the requesting EU phone number
(P NEU ) and the EU private key (dEU ) encrypted with the
symmetric key shared with the EU (KAES(1)). The SS is in
charge of forwarding the response to the EU mobile phone.
Finally, the EU obtains its own private key (dEU ) decrypt-
ing the activation response, generating another AES sym-
metric key (KAES(2)) and storing the private key encrypted
with the generated symmetric key.
EU Key Generation
Pros:
– No more work is requested to the CA beyond its
responsibilities; this also means that no more in-
frastructures, services, and security policies have
to be realized.
– The EU private key preserves an high degree of
conﬁdence; no one, except him,knows all the
factors used in key derivation process.
Cons:
– The EU private key has not to be stored.
– The activation completes over the regular SMS
channel avoiding that EU experiences a busy
waiting period.
– The EU private key has to be generated at
each MIDlet power-on consuming both time and
power resources; however in an effective sce-
nario the EU pays this generation time (about 7
sec.) only one time in a day preserving the MI-
Dlet usability.
– The Service Suppliers play the role of Registra-
tion Authorities and so they are part of the Public
Key Infrastructure; they have to act pursuant to
the security policy deﬁned by the CA.
CA Key Generation
Pros:
– Less requested overhead at the MIDlet power-on;
in order to obtains the private key only a symmet-
ric decryption operation is requested.
– Comparing the encryption/decryption operations
quickness for a symmetrical cryptographic al-
gorithm, as AES, and an asymmetrical crypto-
graphic algorithm, as Difﬁe-Hellman, determines
the choice of AES ephemeral key for protecting
the EU-SS interaction.
Cons:
– The CA is directly involved in the key provision-
ing scenario since it has to generate the keys for
the EU; this involvement requires the deﬁnition
of new security policy for the EU private key
management.
– The MIDlets delivered to EUs are different; each
MIDlet has a unique preloaded symmetric key.
The generation and management process of mi-
dlets and symmetric keys has to be dealt with.
4.2 Transaction Scenarios
Scenario 1: Indirect transaction schema (CA-Centric)
The adoption of the Indirect transaction schema requires
that:
1. EU: each EU has to be equipped with a key-pair (cfr.
4.1.1); Moreover each EU has a copy of the CA public