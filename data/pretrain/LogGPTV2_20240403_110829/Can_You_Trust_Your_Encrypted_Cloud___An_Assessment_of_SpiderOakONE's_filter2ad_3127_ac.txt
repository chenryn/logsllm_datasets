i=1
{kn,i}mn
i=1
Figure 1: Relationship between secrets (the notation a → b indicates that the
value b can only be recovered using the value a).
Long-term: Secrets that are created at the same time as the account are called
long-term. In a nutshell, each long-term secret is protected by ﬁrst de-
riving a key from the user’s password and then using this key with a
symmetric encryption scheme to encrypt the secret. (Details can be found
in Appendix C.) We note that all non-key material (seeds, KDF salts, and
so on) are in this category.
Directory keys: Each directory stored on the client will have an associated
key, which we dub directory key. Each directory key is encrypted with a
single speciﬁc long-term key.
File encryption keys: Each ﬁle stored in a given directory is encrypted with
its own fresh key. Interestingly, this key is derived as k = H(F || mk)
where F is the content being encrypted, mk is a long-term secret (mk =“master
key”) and H a hash function. The encrypted ﬁle is stored as Edk(k) ||
Ek(F ) where dk is the directory key and E is a symmetric cipher. This
scheme is reminiscent of a convergent encryption scheme as described
in [4, 12], although the introduction of mk means that deduplication is
not possible.
The relationship between long-term secrets, directory keys and ﬁle encryption
keys is illustrated in Figure 1.
Password Changes. The relationship between the diﬀerent secrets used in
the application (i.e., the user’s password protects the long-term secrets, which
protect directory keys, which protect ﬁle encryption keys) means care has to
be taken when a password change occurs. In our analysis we discovered that
when a user starts a password change in SpiderOakONE the only eﬀect is to re-
encrypt the long-term secrets that are directly aﬀected by the password change
(i.e., secrets which were encrypted using k = KDF (pw)).
In particular, the
long-term secrets themselves are not rotated, nor are the directory and ﬁle keys.
13
3.5 Encryption
File encryption is handled in two slightly diﬀerent ways, depending on the data
being encrypted. One method is used for encrypting metadata (such as directory
structure, settings and even old passwords); another method is used for encrypt-
ing a user’s ﬁles. That said, these diﬀerences are small and we only summarize
how each method works here. (Details can be found in Appendix D.)
Metadata encryption. SpiderOakONE uses a diﬀerent long-term key for
each particular type of metadata. For example, all information concerning di-
rectory structure is encrypted with a long-term key tree.key; all information
concerning application settings is encrypted with a long-term key conf.key, and
so on. Metadata encryption is then conceptually simple: For a piece of metadata
m, ﬁnd the corresponding long-term key k and encrypt m using k.
User ﬁle encryption. From a high-level point of view, encryption of a ﬁle F
in SpiderOakONE is performed as follows:
1. Split F into blocks bi, and assign identiﬁers to each block;
2. Derive a key for each block as ki = H(bi || mk) and encrypt bi under ki as
Edk(ki) || Eki(bi) (where dk is the directory key for the directory F was
added to, and mk is the master secret key);
3. Derive a key using the whole ﬁle vk = H(F || mk) and use it to encrypt
the identiﬁers of all the blocks that form F ;
4. Upload the encryption of each block and the encrypted list of identiﬁers
to the server.
The encryption done in step 3 corresponds to a so-called version ﬁle for F . Each
time a ﬁle is added or updated, a version ﬁle is also generated. As the name
implies, these ﬁles are used for versioning. However, they are also used in ﬁle
sharing and ﬁle recovery, in that they describe which encrypted blocks of data
makes up a particular ﬁle.
File sharing. File sharing—of either an individual ﬁle or whole directories—is
performed in the following way:
Single File: Use the version information of the ﬁle being shared to determine
which blocks are needed. From these blocks, each key is recovered and
uploaded to the server (together with information about which blocks the
server needs to decrypt). A shared ﬁle lives for three days at which point
the server removes access to it.
Directory (ShareRooms): Decrypt the particular directory key used for the
directory that is being shared, and give it to the server. The server can
then itself recover all ﬁles. A shared directory lives until the user explicitly
revokes it.
14
Note that this aﬃrms the results of [39], i.e., that the server can read ﬁles that
are being shared.
4 Attacks on SpiderOakONE
The following section presents four diﬀerent attacks that show how the analysed
version of SpiderOakONE does not satisfy Deﬁnition 1. All attacks are critical
and lead to either a total breach of conﬁdentiality (i.e., password recovery), ﬁle
recovery or password weakening. For each attack, we describe the underlying
cause, how the attack was experimentally validated and the practical impact.
4.1 Password weakening in bcrypt login
Recall the bcrypt authentication protocol: the Server sends a salt s, the client
computes h = bcrypt(pw, s) and returns h to the server, who then accepts or
rejects.
The issue that will be exploited in this protocol, is (1) that the format of
the salt s used by the bcrypt KDF also speciﬁes the work factor, (2) that the
server essentially gets to pick s, and (3) that the client does not check that s
actually matches the value it itself created earlier. As a result, a malicious server
can obtain a drastically weakened password hash (i.e., execute a ρ-password-
weakening attack for ρ = 8).
More in detail, the format of the salt s follows the modular crypt format,
i.e., is of the form
$2a$cost$salt
where 2a designates the format (bcrypt salt), cost is the cost factor and salt a
random string (base64 encoded). Now an active adversary (playing the role of
the server) can attack the client by sending a value s(cid:48) such that s(cid:48).cost < s.cost,
and in this way, obtain a much weaker hash h(cid:48). The question is now: how
low can cost go, or put diﬀerently, what is the greatest ρ that the adversary
can obtain? In a normal execution cost is set to 12 meaning bcrypt does 212
iterations during the key derivation [30]. By inspecting the source code11 of the
bcrypt implementation used by SpiderOakONE we ﬁnd that the lowest value of
cost allowed is 4. Thus an 8-password weakening attack can be achieved by
asking the client to run the bcrypt login protocol with the salt s(cid:48) equal to
$2a$04$AAAAAAAAAAAAAAAAAAAAAA
which let the adversary obtain the weakened hash h(cid:48) = bcrypt(pw, s(cid:48)).
Pr[b(cid:48) = b] =
1
2
+
q
c2κ−8
11https://github.com/grnet/python-bcrypt/blob/master/bcrypt/bcrypt.c
15
u_int8_t * data ){
while ( bp < buffer + len ) {
break ;
c1 = CHAR64 (* p );
c2 = CHAR64 (*( p + 1));
/* Invalid data */
if ( c1 == 255 || c2 == 255)
1 static void
2 decode_base64 ( u_int8_t * buffer , u_int16_t len ,
3
4 // snip
5
6
7
8
9
10
11 // snip
12 int
13 pybc_bcrypt ( const char *key , const char * salt ,
14
15 // snip
16
17 // snip
18
19
char * result , size_t result_len ){
decode_base64 ( csalt , BCRYPT_MAXSALT ,
( u_int8_t *) salt );
u_int8_t csalt [ BCRYPT_MAXSALT ];
Listing 1: base64 decoding function used. csalt will contain uninitialized mem-
ory if either c1 or c2 (content of data) is not valid base64.
Remember that in a regular execution cost is set to c = 212 and in our attack
this is downgraded to 24. Thus A has the following probability of computing
pw from h(cid:48) in q queries:
Pr[A guesses pw] =
q
242κ =
q
c2κ−8 .
which implies the claim.
Upon inspection of the code for the bcrypt library we also discovered a trivial
memory leak (relevant parts shown in Listing 1). If the salt part of s is invalid
base64, then up to 16 bytes of memory will be leaked through h(cid:48). We can
therefore augment the attack from before, by instead using the salt
$2a$04$0x01AAAAAAAAAAAAAAAAAAAAA
where 0x01 is the byte 00000001.
Experimental veriﬁcation. We veriﬁed this attack by writing our own login
server. As described in Section 3.2 there are essentially two diﬀerent servers:
One which “talks” HTTP and one which talks RPC (using Twisted PB). More-
over, the HTTP server is only used during authentication (which is relevant for
this attack), so we only had to implement the HTTP part of the server to verify
this attack. Our server works as one would imagine: upon a login request, the
server constructs the salt as speciﬁed and sends it back. Upon obtaining h we
can then verify that the salt we sent was indeed the one used (as we of course
also know the password used in the test run).
16
Practical impact. As described, this attack eﬀectively removes 8 bits of en-
tropy from the user’s password. Whether this leads to a breach of conﬁdentiality
or not ultimately depends on the original strength of the password. For refer-
ence, [7] estimates that typical passwords only provide between 10 and 20 bits
of security. We note that this attack is not detectable from the user point of
view.
4.2 Password recovery via escrow login
We move on to the attack on the escrow login protocol described brieﬂy in
Section 3.3 (cf. B.3 for the details). Recall that this protocol is in two steps and
revolves around a list lst = {pki}i∈[n] essentially chosen by the server:
1. First, the client computes a ﬁngerprint on lst and shows it to the user;
2. Second, assuming the user accepts the ﬁngerprint, an encryption c =
Epkn (. . . Epk1(pw || chl)) is computed and returned to the server.
Looking at the protocol, we can see that the server is the one who picks the
keys pki. Therefore, the attack exploits the fact that the server can (maliciously)
pick keys for which it knows the corresponding private keys and thus decrypt c
to obtain pw when the client sends back c in the last step. Note that the attack
can only happen if the user accepts the shown ﬁngerprint f p(cid:48) that is computed
on the (malicious) keys in lst. However, as we shall see, due to the wording of
the message to the user, it is not unlikely that a user might accept a malicious
set of keys.
Having the user check the ﬁngerprint is obviously done in order to ensure
that she does not produce an encryption under maliciously chosen keys. But
what if she does not have anything to check the ﬁngerprint against? More
precisely, since the adversary can run any login protocol he wants, he can run
this particular protocol which is never run in the single user settings. Thus,
when the protocol is run (in the single user setting) it can be assumed that
the user does not have a “valid” ﬁngerprint to verify the malicious ﬁngerprint
against! Of course, the attack would be thwarted if the client instructed the
user to reject a ﬁngerprint if there is nothing to check it against. Unfortunately,
SpiderOakONE takes a TOFU (trust on ﬁrst use) approach with regards to
these ﬁngerprints. The message shown to the user is presented here, emphasis
ours:
If your SpiderOakONE Administrator has given you a ﬁngerprint
phrase and it matches the ﬁngerprint below, or if you have not
been given a ﬁngerprint, please click “Yes” below. Otherwise
click “No” and contact your SpiderOakONE Administrator.
So assuming the user behaves according to the instructions given by the appli-
cation, our attack will succeed with signiﬁcant probability.
17
Formally, the attack proceeds as follows: the attacker A generates an RSA
keypair (pk, sk) and then requests the client to execute the escrow login protocol
with lst = {pk} and chl = 0, thus receiving an encryption of the password pw
using pk which can be decrypted using sk leading to password recovery and a
total breach of conﬁdentiality
An interesting quirk. A missing length check in the client means that a
similar attack is possible even in a passive setting (albeit in the enterprise prod-
uct). Suppose the escrow login protocol is used as follows: A company uploads
lst to SpiderOak and gives f p (the ﬁngerprint computed on lst) to each of its
employees. Whenever an employee wants to use SpiderOak (for work) they use
the escrow protocol to login. SpiderOak authenticates the employee by pass-
ing c back to the company who can decrypt it and check the challenge stored
alongside the password (and thus determine if the employee should be authen-
ticated or not). However, if the company misconﬁgures lst as lst = ∅ then no
encryption is done in the client! That is, c = pw || chl and thus pw is leaked to
SpiderOak.
Experimental veriﬁcation. Veriﬁcation of this attack was performed in a
similar way as what was described for the attack on the bcrypt login protocol.
We veriﬁed that both lst = {pk} for a pk we control (i.e., know sk) and lst = ∅
leads to a full password recovery.
Practical impact. While the eﬀect of this attack are more devastating than
the previous one (as it leads to full password recovery), this attack can easily be
detected since it requires the user being prompted and accepting a dialog box.
Unfortunately, as we shall see in the next attack, there is another (undetectable)
way that allows a rogue server to recover the user’s password.
4.3 Password recovery via RPC methods
The third attack we present also leads to full recovery of the user’s password.
Even more, it does so completely silently and at any point the client is online
(as opposite to the ﬁrst two which can only be executed during the login/au-
thentication phase), and in addition requires no interaction from the user. We
also show that, even if the user takes extra steps to thwart the full password
recovery attack, the attack would still lead to a signiﬁcant password weakening
attack.
We ﬁrst note that the SpiderOakONE the client writes the user’s password
(unencrypted) to a ﬁle after the ﬁrst login (which is done as part of the account
registration or device registration phase), in order to avoid having the user type
in their password on every startup. Therefore, the user’s password constantly
resides in plaintext on the client. We can exploit this by making use of speciﬁc
RPC methods the client makes available to the server. Concretely, the client has
three methods available that allow for ﬁle retrieval. Such methods implement
18
^([a -zA -Z0 -9_ -]{1 ,240})
1 _safe_user_file_regexp = re . compile ( ’’’
2
3
4
5
([\\\\/])
((?:[ @a -zA -Z0 -9_ -]|\\.(?!\\.)){1 ,240}) $ ’’’,
re . VERBOSE )