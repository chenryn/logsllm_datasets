a CLOSED status. In this case, you should reverse the order of operations: first close the
inbound side and process any received messages and then close the outbound side
and send your own close-notify message. 
public void close() throws IOException {
    sslEngine.closeOutbound();               
    sslEngine.wrap(appData.flip(), sendBuf);   
    appData.compact();                         
    channel.write(sendBuf.flip());             
    sendBuf.compact();                         
    while (!sslEngine.isInboundDone()) {             
        channel.receive(recvBuf);                    
        sslEngine.unwrap(recvBuf.flip(), appData);   
        recvBuf.compact();                           
    }
    sslEngine.closeInbound();    
    channel.close();             
} 
IMPLEMENTING A DTLS SERVER
Initializing a SSLContext for a server is similar to the client, except in this case you use a
KeyManagerFactory to supply the server’s certificate and private key. Because you’re not
using client certificate authentication, you can leave the TrustManager array as null.
Listing 12.5 shows the code for creating a server-side DTLS context. Create a new file
named DtlsServer.java next to the client and type in the contents of the listing.
package com.manning.apisecurityinaction;
import java.io.FileInputStream;
import java.nio.ByteBuffer;
import java.security.KeyStore;
import javax.net.ssl.*;
import org.slf4j.*;
import static java.nio.charset.StandardCharsets.UTF_8;
public class DtlsServer {
    private static SSLContext getServerContext() throws Exception {
        var sslContext = SSLContext.getInstance("DTLS");       
        var keyStore = KeyStore.getInstance("PKCS12");        
        keyStore.load(new FileInputStream("localhost.p12"),   
                "changeit".toCharArray());                    
Listing 12.4
Handling shutdown
Listing 12.5
The server SSLContext
Indicate that no further outbound 
application packets will be sent.
Call wrap() to generate the 
close-notify message and 
send it to the server.
Wait until a close-
notify is received 
from the server.
Indicate that the inbound 
side is now done too and 
close the UDP channel.
Create a DTLS 
SSLContext 
again.
Load the server’s
certificate and
private key from a
keystore.
451
Transport layer security
        var keyManager = KeyManagerFactory.getInstance("PKIX");    
        keyManager.init(keyStore, "changeit".toCharArray());       
        sslContext.init(keyManager.getKeyManagers(), null, null);    
        return sslContext;
    }
}
In this example, the server will be running on localhost, so use mkcert to generate a
key pair and signed certificate if you don’t already have one, by running2
mkcert -pkcs12 localhost
in the root folder of the project. You can then implement the DTLS server as shown in
listing 12.6. Just as in the client example, you can use the DtlsDatagramChannel class
to simplify the handshake. Behind the scenes, the same handshake process will occur,
but the order of wrap() and unwrap() operations will be different due to the different
roles played in the handshake. Open the DtlsServer.java file you created earlier and
add the main method shown in the listing.
NOTE
The DtlsDatagramChannel provided in the GitHub repository accom-
panying the book will automatically connect the underlying DatagramChannel
to the first client that it receives a packet from and discard packets from other
clients until that client disconnects.
public static void main(String... args) throws Exception {
    try (var channel = new DtlsDatagramChannel(getServerContext())) {   
        channel.bind(54321);                                            
        logger.info("Listening on port 54321");
        var buffer = ByteBuffer.allocate(2048);      
        while (true) {
            channel.receive(buffer);        
            buffer.flip();
            var data = UTF_8.decode(buffer).toString();    
            logger.info("Received: {}", data);             
            buffer.compact();
        }
    }
}
You can now start the server by running the following command:
mvn clean compile exec:java \
  -Dexec.mainClass=com.manning.apisecurityinaction.DtlsServer
2 Refer to chapter 3 if you haven't installed mkcert yet.
Listing 12.6
The DTLS server
Initialize the
KeyManager-
Factory with
the keystore.
Initialize the SSLContext
with the key manager.
Create the
DtlsDatagram-
Channel and
bind to port
54321.
Allocate a buffer 
for data received 
from the client.
Receive decrypted UDP 
packets from the client.
Print out the 
received data.
452
CHAPTER 12
Securing IoT communications
This will produce many lines of output as it compiles and runs the code. You’ll see the
following line of output once the server has started up and is listening for UDP pack-
ets from clients:
[com.manning.apisecurityinaction.DtlsServer.main()] INFO 
➥ com.manning.apisecurityinaction.DtlsServer - Listening on port 
➥ 54321
You can now run the client in another terminal window by running:
mvn clean compile exec:java \
  -Dexec.mainClass=com.manning.apisecurityinaction.DtlsClient
TIP
If you want to see details of the DTLS protocol messages being sent
between the client and server, add the argument -Djavax.net.debug=all to
the Maven command line. This will produce detailed logging of the hand-
shake messages.
The client will start up, connect to the server, and send all of the lines of text from the
input file to the server, which will receive them all and print them out. After the client
has completed, it will print out the DTLS cipher suite that it used so that you can see
what was negotiated. In the next section, you’ll see how the default choice made by
Java might not be appropriate for IoT applications and how to choose a more suitable
replacement.
NOTE
This example is intended to demonstrate the use of DTLS only and is
not a production-ready network protocol. If you separate the client and server
over a network, it is likely that some packets will get lost. Use a higher-level
application protocol such as CoAP if your application requires reliable packet
delivery (or use normal TLS over TCP).
12.1.2 Cipher suites for constrained devices
In previous chapters, you’ve followed the guidance from Mozilla3 when choosing
secure TLS cipher suites (recall from chapter 7 that a cipher suite is a collection of cryp-
tographic algorithms chosen to work well together). This guidance is aimed at secur-
ing traditional web server applications and their clients, but these cipher suites are
not always suitable for IoT use for several reasons:
 The size of code required to implement these suites securely can be quite large
and require many cryptographic primitives. For example, the cipher suite
ECDHE-RSA-AES256-SHA384 requires implementing Elliptic Curve Diffie-Hellman
(ECDH) key agreement, RSA signatures, AES encryption and decryption opera-
tions, and the SHA-384 hash function with HMAC!
3 See https://wiki.mozilla.org/Security/Server_Side_TLS.
453
Transport layer security
 Modern recommendations heavily promote the use of AES in Galois/Counter
Mode (GCM), because this is extremely fast and secure on modern Intel chips
due to hardware acceleration. But it can be difficult to implement securely in
software on constrained devices and fails catastrophically if misused. 
 Some cryptographic algorithms, such as SHA-512 or SHA-384, are rarely hardware-
accelerated and are designed to perform well when implemented in software on
64-bit architectures. There can be a performance penalty when implementing
these algorithms on 32-bit architectures, which are very common in IoT devices.
In low-power environments, 8-bit microcontrollers are still commonly used,
which makes implementing such algorithms even more challenging.
 Modern recommendations concentrate on cipher suites that provide forward
secrecy as discussed in chapter 7 (also known as perfect forward secrecy). This is a
very important security property, but it increases the computational cost of
these cipher suites. All of the forward secret cipher suites in TLS require imple-
menting both a signature algorithm (such as RSA) and a key agreement algo-
rithm (usually, ECDH), which increases the code size.4
Nonce reuse and AES-GCM in DTLS
The most popular symmetric authenticated encryption mode used in modern TLS
applications is based on AES in Galois/Counter Mode (GCM). GCM requires that each
packet is encrypted using a unique nonce and loses almost all security if the same
nonce is used to encrypt two different packets. When GCM was first introduced for
TLS 1.2, it required an 8-byte nonce to be explicitly sent with every record. Although
this nonce could be a simple counter, some implementations decided to generate it
randomly. Because 8 bytes is not large enough to safely generate randomly, these
implementations were found to be susceptible to accidental nonce reuse. To prevent
this problem, TLS 1.3 introduced a new scheme based on implicit nonces: the nonce
for a TLS record is derived from the sequence number that TLS already keeps track
of for each connection. This was a significant security improvement because TLS
implementations must accurately keep track of the record sequence number to
ensure proper operation of the protocol, so accidental nonce reuse will result in an
immediate protocol failure (and is more likely to be caught by tests). You can read
more about this development at https://blog.cloudflare.com/tls-nonce-nse/.
Due to the unreliable nature of UDP-based protocols, DTLS requires that record
sequence numbers are explicitly added to all packets so that retransmitted or reor-
dered packets can be detected and handled. Combined with the fact that DTLS is
more lenient of duplicate packets, this makes accidental nonce reuse bugs in DTLS
applications using AES GCM more likely. You should therefore prefer alternative
cipher suites when using DTLS, such as those discussed in this section. In section
12.3.3, you’ll learn about authenticated encryption algorithms you can use in your
application that are more robust against nonce reuse.
4 Thomas Pornin, the author of the BearSSL library, has detailed notes on the cost of different TLS crypto-
graphic algorithms at https://bearssl.org/support.html. 
454
CHAPTER 12
Securing IoT communications
Figure 12.4 shows an overview of the software components and algorithms that are
required to support a set of TLS cipher suites that are commonly used for web con-
nections. TLS supports a variety of key exchange algorithms used during the initial
handshake, each of which needs different cryptographic primitives to be imple-
mented. Some of these also require digital signatures to be implemented, again with
several choices of algorithms. Some signature algorithms support different group
parameters, such as elliptic curves used for ECDSA signatures, which require further
code. After the handshake completes, there are several choices for cipher modes and
MAC algorithms for securing application data. X.509 certificate authentication itself
requires additional code. This can add up to a significant amount of code to include
on a constrained device.
Signature algorithms
RSA
DSA
ECDSA
Key exchange algorithms
RSA
Static DH
Static ECDH
DHE
ECDHE
Elliptic curves
secp256r1
secp384r1
Ciphers
AES-CBC
AES-GCM
ChaCha20-
Poly1305
MACs
HMAC-
SHA-256
HMAC-
SHA-384
X.509 certiﬁcate
parsing
X.509 certiﬁcate
validation
Revocation checking
OCSP
CRL
Key exchange algorithms and signatures are used
during the initial handshake to establish session keys.
Cipher and MAC algorithms are
used for bulk encryption and
authentication of application data.
Certiﬁcate validation and revocation
checking involves a lot of complex code.
Figure 12.4
A cross-section of algorithms and components that must be implemented 
to support common TLS web connections. Key exchange and signature algorithms are 
used during the initial handshake, and then cipher modes and MACs are used to secure 
application data once a session has been established. X.509 certificates require a lot 
of complex code for parsing, validation, and checking for revoked certificates.
455
Transport layer security
For these reasons, other cipher suites are often popular in IoT applications. As an
alternative to forward secret cipher suites, there are older cipher suites based on
either RSA encryption or static Diffie-Hellman key agreement (or the elliptic curve
variant, ECDH). Unfortunately, both algorithm families have significant security weak-
nesses, not directly related to their lack of forward secrecy. RSA key exchange uses an
old mode of encryption (known as PKCS#1 version 1.5) that is very hard to implement
securely and has resulted in many vulnerabilities in TLS implementations. Static
ECDH key agreement has potential security weaknesses of its own, such as invalid
curve attacks that can reveal the server’s long-term private key; it is rarely implemented.
For these reasons, you should prefer forward secret cipher suites whenever possible,
as they provide better protection against common cryptographic vulnerabilities. TLS
1.3 has completely removed these older modes due to their insecurity.
DEFINITION
An invalid curve attack is an attack on elliptic curve cryptographic
keys. An attacker sends the victim a public key on a different (but related)
elliptic curve to the victim’s private key. If the victim’s TLS library doesn’t val-
idate the received public key carefully, then the result may leak information
about their private key. Although ephemeral ECDH cipher suites (those with
ECDHE in the name) are also vulnerable to invalid curve attacks, they are
much harder to exploit because each private key is only used once.
Even if you use an older cipher suite, a DTLS implementation is required to include
support for signatures in order to validate certificates that are presented by the server
(and optionally by the client) during the handshake. An extension to TLS and DTLS
allows certificates to be replaced with raw public keys (https://tools.ietf.org/html/
rfc7250). This allows the complex certificate parsing and validation code to be elimi-
nated, along with support for many signature algorithms, resulting in a large reduc-
tion in code size. The downside is that keys must instead be manually distributed to all
devices, but this can be a viable approach in some environments. Another alternative
is to use pre-shared keys, which you’ll learn more about in section 12.2.
DEFINITION
Raw public keys can be used to eliminate the complex code required
to parse and verify X.509 certificates and verify signatures over those certifi-
cates. A raw public key must be manually distributed to devices over a secure
channel (for example, during manufacture).
The situation is somewhat better when you look at the symmetric cryptography used
to secure application data after the TLS handshake and key exchange has completed.
There are two alternative cryptographic algorithms that can be used instead of the
usual AES-GCM and AES-CBC modes:
 Cipher suites based on AES in CCM mode provide authenticated encryption using
only an AES encryption circuit, providing a reduction in code size compared to
CBC mode and is a bit more robust compared to GCM. CCM has become widely
adopted in IoT applications and standards, but it has some undesirable features
456
CHAPTER 12
Securing IoT communications
too, as discussed in a critique of the mode by Phillip Rogaway and David Wagner
(https://web.cs.ucdavis.edu/~rogaway/papers/ccm.pdf).
 The ChaCha20-Poly1305 cipher suites can be implemented securely in software
with relatively little code and good performance on a range of CPU architec-
tures. Google adapted these cipher suites for TLS to provide better perfor-
mance and security on mobile devices that lack AES hardware acceleration.
DEFINITION
AES-CCM (Counter with CBC-MAC) is an authenticated encryp-
tion algorithm based solely on the use of an AES encryption circuit for all
operations. It uses AES in Counter mode for encryption and decryption, and
a Message Authentication Code (MAC) based on AES in CBC mode for
authentication. ChaCha20-Poly1305 is a stream cipher and MAC designed by
Daniel Bernstein that is very fast and easy to implement in software.
Both of these choices have fewer weaknesses compared to either AES-GCM or the
older AES-CBC modes when implemented on constrained devices.5 If your devices
have hardware support for AES, for example in a dedicated secure element chip, then
CCM can be an attractive choice. In most other cases, ChaCha20-Poly1305 can be eas-
ier to implement securely. Java has support for ChaCha20-Poly1305 cipher suites since
Java 12. If you have Java 12 installed, you can force the use of ChaCha20-Poly1305 by
specifying a custom SSLParameters object and passing it to the setSSLParameters()
method on the SSLEngine. Listing 12.7 shows how to configure the parameters to
only allow ChaCha20-Poly1305-based cipher suites. If you have Java 12, open the Dtls-
Client.java file and add the new method to the class. Otherwise, skip this example.
TIP
If you need to support servers or clients running older versions of DTLS,
you should add the TLS_EMPTY_RENEGOTIATION_INFO_SCSV marker cipher
suite. Otherwise Java may be unable to negotiate a connection with some
older software. This cipher suite is enabled by default so be sure to re-enable
it when specifying custom cipher suites.
private static SSLParameters sslParameters() {
    var params = DtlsDatagramChannel.defaultSslParameters();    
    params.setCipherSuites(new String[] {                       
            "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",    
            "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",      
            "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",        
            "TLS_EMPTY_RENEGOTIATION_INFO_SCSV"     
    });
    return params;
}
5 ChaCha20-Poly1305 also suffers from nonce reuse problems similar to GCM, but to a lesser extent. GCM loses
all authenticity guarantees after a single nonce reuse, while ChaCha20-Poly1305 only loses these guarantees
for messages encrypted with the duplicate nonce.
Listing 12.7
Forcing use of ChaCha20-Poly1305
Use the
defaults
from the
DtlsDatagram-
Channel.
Enable only 
cipher suites that 
use ChaCha20-
Poly1305.
Include this cipher suite 
if you need to support 
multiple DTLS versions.
457
Transport layer security
After adding the new method, you can update the call to the DtlsDatagramChannel
constructor in the same file to pass the custom parameters:
try (var channel = new DtlsDatagramChannel(getClientContext(),
    sslParameters());
If you make that change and re-run the client, you’ll see that the connection now uses
ChaCha20-Poly1305, so long as both the client and server are using Java 12 or later.
WARNING
The example in listing 12.7 uses the default parameters from the
DtlsDatagramChannel class. If you create your own parameters, ensure that
you set an endpoint identification algorithm. Otherwise, Java won’t validate
that the server’s certificate matches the hostname you have connected to and
the connection may be vulnerable to man-in-the-middle attacks. You can set
the identification algorithm by calling "params.setEndpointIdentication-
Algorithm("HTTPS")".
AES-CCM is not yet supported by Java, although work is in progress to add support.
The Bouncy Castle library (https://www.bouncycastle.org/java.html) supports CCM
cipher suites with DTLS, but only through a different API and not the standard SSL-
Engine API. There’s an example using the Bouncy Castle DTLS API with CCM in sec-
tion 12.2.1.
 The CCM cipher suites come in two variations:
 The original cipher suites, whose names end in _CCM, use a 128-bit authentica-
tion tag.
 Cipher suites ending in _CCM_8, which use a shorter 64-bit authentication tag.
This can be useful if you need to save every byte in network messages but pro-