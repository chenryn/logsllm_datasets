During query processing,it may benecessaryto sort anintermediate result priorto amerge-sortjoin (see
figure 3.2), or the user may specify that the results of a retrieve query be sorted on certain fields. How-
ever, these sorts do not have to performed explicitly at all times. Some access methods maintain their
tuples sorted on the keys used to define the structure. Thus, scanning a relation via such an index may
yield tuples sorted in a desired order. For example, a standard B-tree stores its tuples sorted either in
ascending () order, while an area B-tree maintains its tuples sorted in either
‘‘AREALT’’or‘‘AREAGT’’order.
To make use of an index with this sort characteristic, the index keys must either match variables
within join clauses, which correspond to relations that will later be merge-sorted, or attribute fields on
which a query’s resulting tuples will be sorted. To determine whether an index’s implicit sort order is
that which is needed, POSTGRES requires that users specify an access method’s sort order (if it exists)
when defining a new access method. If the implicit ordering matches a desired ordering and the keysare
usable, a path that takes advantage of the index will be considered. The next two subsections will ela-
borateonfurtherusesofthissortinformation.
19
3.3.3. JoinPaths
Once all feasible paths have been found for scanning single relations, paths are found for joining
relations. Joins are first considered between every two relations for which there exists a corresponding
joinclause. Forexample,forthefollowingquery:
retrieve(A.a,B.b,C.c)whereA.d=B.e,
duringthefirstlevelofjoinprocessing,theonlypairsconsideredare:
AjoinB
BjoinA
All feasible paths are found for processing joins between these relation pairs. Havingdonethis, all paths
arethen foundforprocessing3-wayjoins,usingavailable 2-wayjoin pathsfortheouterpathandrelation
scan paths for the inner path. Again, the optimizer only considers those join pairs for which there is a
corresponding join clause. If this heuristic results in no further relations being joined, all remaining pos-
sibilities are considered. For the above query, at the second level of join processing, no relations should
bejoinedaccordingtotheheuristic. Therefore,theremainingpossibilities are:
(AjoinB)joinC
(BjoinA)joinC
Fromhere,thesestepsarerepeateduntilnofurtherjoinlevelsneedtobeprocessed.
All possible join paths are generated for every join pair considered. The simplest join strategy is
nested iteration. In anested iteration join, the inner join relation is scannedonceforeverytuple foundin
the outer join relation. All available paths on the outer join relation are possibilities for the outer path.
On the other hand, since the inner join path is independent ofthe outer in anested iteration join, only the
leastexpensivepathfortheinnerjoinrelationisapossibility fortheinnerpath.
Nested iteration is simple, but it can be a time-consuming join strategy, especially if the inner join
relation isnotindexedonjoin variables. Ajoin strategythat ismuchmoreattractiveinthesesituationsis
merge-sort. A merge-sort join can be used to process a join between relation1 and relation2, provided
20
thereisamergejoinclauseoftheform:
relation1.field1OPRrelation2.field2.
During the first phase of a merge-sort, each relation is sorted on appropriate join attributes. During the
second phase, the merge phase, the two relations are merged together, taking advantage of the fact that
bothrelationsareorderedonjoinattributes.
For a merge-sort join to be advantageous, the operator within a merge join clause must be ‘‘similar
to’’ an equality operator, e.g. ‘‘AREAEQ’’. Therefore, in the most ideal situation, when both join rela-
tionscontainuniquevaluesinthemergejoinfields,themergephasewillonlyrequireasequentialscanof
both sorted relations. So when defining new operators, POSTGRES requires that users indicate whether
anoperatoris ‘‘mergesortable’’by specifying the operatorthat must beusedto sort the twojoin relations
prior to the merge. For example, ‘‘=’’ is mergesortable, provided the sort is made in ‘‘value ((highvalueofr.field)-value)/
c c c
ic iiiiiiiiiiiiiic i(i(hiiigihiviailiuieioifiri.ifiieildi)i-ii(lioiwiiviailuieiioifir.ifiieildi)i)iiiiiiiiiiiic
c r.field’’foraB-treeindexisshowninfigure3.6.
3.5. Nested-attribute Queries
The last severalsubsections havedescribedoptimizationofsimple queries,i.e.thosewithout nested
attributes. Figure3.7summarizesinformationtheoptimizerusesingeneratingpossiblequeryplans.
From here on, the module implementing the algorithms just described will be called the ‘‘sub-
planner,’’ while the entire optimizer will be labeled the ‘‘planner’’. To create access plans for queries
containing nested attributes, the planner simply applies the subplanner algorithm once for each nesting
level of attributes in a query. In other words,for any query, the number of times the subplanneris called
is equal to themaximum nestingofattributes inthequery. Onceall subplannercallshavecompleted, the
planner then builds a final plan that indicates how these subpieces fit together. Thus, given a query, the
planner first modifies it to consider only top level attributes. This new query is passed to the subplanner
to createasubplan. The planner then modifies the original queryto consideronly nested attributes. This
is recursively processed by the planner to create a plan, and the resulting access plan simply indicates
whichattributesfromsubplanandplanshouldbereturnedtotheuser.
Anexamplewillillustrate theseideasmoreclearly. Supposewehavethefollowingrelation:
EMP(name,dept,hobbies),
where hobbies contains POSTQUEL queries to retrieve information about the different hobbies each
employeeparticipatesin. Oneoftheserelationsmaybe:
SOFTBALL(empname,position,batting-history),
where batting-history contains a POSTQUEL query retrieving information about an employee’s past bat-
tingaveragesfromtherelation:
26
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
/*
* Proceduretocomputetheselectivity ofthe‘‘>’’operator
* whenitisusedwithaB-treeindexdefinedonintegerfields.
*/
float
greater_btree(opid,relid,attnos,values,flags,indexid,nkeys)
int opid; /*containsuniqueidofoperator‘‘>’’*/
int relid;
int attnos[];
int values[];
int flags[]; /*equals1ifclauseisoftheform‘var>constant,’
*elseclauseisoftheform‘constant>var’
*/
int indexid; /*parameterisn’tusedbythisparticularroutine*/
int nkeys;