K, . . . ,N e
1 )
BuildNext(N e
1: Ne ← one;
2: for each k ∈ {1, . . . , K} do
k is not identity then
3:
C ← New level-k node of all zeroes;
4:
for each i ∈ Sk, j ∈ N e
5:
6:
7:
8:
end if
9:
10: end for
11: return Ne;
C[i, j] ← Ne;
end for
Ne ← C;
k (i) do
Figure 3. Constructing a next-state function
for a given event
N e
k . If N e
k is the identity function, then the matrix diagram
Ne will skip level k. Otherwise, row ik of the matrix dia-
gram node at level k will contain a pointer in column jk if
jk ∈ N e
(ik). All pointers for a given node will be equal,
and will point to the next non-identity node or terminal node
one.
k
3.2. Manipulating matrix diagrams
The main strength of matrix diagrams over Kronecker-
based representations is their ability for manipulation. Bi-
nary operations on MDDs and matrix diagrams have com-
plexity that depends on the number of nodes in the graphs,
rather than the number of items encoded by the graph. Thus,
the compactness in size of MDDs and matrix diagrams leads
not only to obvious memory savings, but also to computa-
tional savings.
Two important operations on matrix diagrams for this
work are matrix addition and matrix multiplication. Given
next-state functions A and B, we can compute the union
C of the two functions (i.e., C(x) = A(x) ∪ B(x)) by
adding their matrix diagrams A and B. Similarly, the com-
position C of functions A and B (i.e., C(x) = B(A(x)))
can be determined by multiplying matrix diagrams A and
B. The algorithm for matrix diagram addition is shown
in Figure 4, where BinaryAdd(A, B) computes A + B for
boolean matrices. The algorithm for matrix diagram mul-
tiplication is shown in Figure 5, where BinaryMult(A, B)
computes A · B for boolean matrices. Note that both algo-
rithms are recursive. The recursion terminates if the appro-
priate terminal conditions hold, or if the answer has already
been computed. For addition, the terminal conditions are
A + A = A + 0 = A (line 1) and 0 + B = B (line 3). For
multiplication, the terminal conditions are A·0 = 0·B = 0
(line 1), I · B = B (line 3), and A · I = A (line 5). Since
matrix diagram pointers may be equal, it is possible that a
return B;
return C;
return A;
kB ←Level(B);
BinaryAdd(Md A, Md B)
1: if (A = B) ∨ (B = zero) then
2:
3: else if (A = zero) then
4:
5: else if AddCache contains(A, B, C) then
6:
7: end if
8: kA ←Level(A);
9: k ← MAX(kA, kB);
10: C ← New level-k node;
11: if kA > kB then
12:
13:
14: else if kB > kA then
15:
16:
17: else
18:
19: end if
20: Reduce C;
21: Insert AddCache entry (A, B, C);
22: return C;
∀i, C[i, i] ← BinaryAdd(A[i, i], B);
∀i, j, i (cid:9)= j, C[i, j] ← A[i, j];
∀i, C[i, i] ← BinaryAdd(A, B[i, i]);
∀i, j, i (cid:9)= j, C[i, j] ← B[i, j];
∀i, j, C[i, j] ← BinaryAdd(A[i, j], B[i, j]);
Figure 4. Matrix diagram addition
single call to BinaryAdd or BinaryMult will generate iden-
tical calls during the course of the recursion. To prevent
duplication of work, each operation saves its answer in a
cache, and checks the cache before starting computation.
The algorithms also must handle the cases of pointers skip-
ping levels; this is done in lines 11-16 of BinaryAdd and
lines 12-15 of BinaryMult, which considers a skipped level
to be a matrix whose diagonal pointers are to the next level.
Another operation that we will utilize is determining
which rows of a matrix are empty. In terms of a next-state
function, this determines which states do not have a next
state. This will be used to determine the states that dis-
able a given event. The algorithm to perform this operation
is shown in Figure 6. Like the previous algorithms, it is
recursive and terminates if the appropriate terminal condi-
tion holds or if the answer has already been computed. The
terminal conditions are for inputs I, which does not con-
tain any empty rows, and 0, which contains all empty rows.
Note that the matrix returned by EmptyRows contains non-
zero elements only along the diagonal; this allows us to se-
lect rows or columns of a matrix using BinaryMult.
Once the proper next-state functions have been deter-
mined, generation of the reachability set can proceed using
one of the Kronecker-based implicit techniques [14, 15, 27],
modiﬁed to use matrix diagrams.
If our model contains
only timed events with equal priority, the next-state func-
tions computed using BuildNext can be used without modi-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
return C;
return A;
return zero;
kB ←Level(B);
BinaryMult(Md A, Md B)
1: if (A = zero) ∨ (B = zero) then
2:
3: else if (A = one) then
4:
5: else if (B = one) then
6:
7: else if MultCache contains(A, B, C) then
8:
9: end if
10: kA ←Level(A);
11: k ← MAX(kA, kB);
12: C ← New level-k node;
13: if kA > kB then
14:
15: else if kB > kA then
16:
17: else
18:
19:
20:
21:
22: end if
23: Reduce C;
24: Insert MultCache entry (A, B, C);
25: return C;
∀i, j, C[i, j] ← BinaryMult(A[i, j], B);
∀i, j, C[i, j] ← BinaryMult(A, B[i, j]);
for each i, j, l ∈ Sk do
T ← BinaryMult(A[i, l], B[l, j]);
C[i, j] ← BinaryAdd(C[i, j], T);
return B;
end for
Figure 5. Matrix diagram multiplication
ﬁcation. We will brieﬂy outline how to modify the efﬁcient
saturation algorithm [15] to use matrix diagrams; details are
omitted due to lack of space.
The main procedure of the saturation algorithm is the
recursive procedure RecFire, which takes as parameters an
event e and a level-k MDD node. From e and k, the ap-
propriate Kronecker matrix is used to manipulate the MDD
node. The matrix diagram version instead uses as parame-
ters a matrix diagram node N and an MDD node. The ma-
trix structure of the matrix diagram node is used to manip-
ulate the MDD node. In the Kronecker version, the recur-
sive call to RecFire passes the same event and decrements
the level; in the matrix diagram version, the recursive call
passes the appropriate downward pointer of the matrix di-
agram node. For added efﬁciency, the matrix diagram ver-
sion can combine matrix diagrams (using BinaryAdd) based
on the “ﬁrst” submodel affected by events.
4. Handling priorities
We are now ready to handle high-level models whose
events are allowed to have priorities. Speciﬁcally, we allow
the model to specify, for pairs of events b and c, that event b
always has priority over event c. Thus, whenever event b is
return C;
return one;
return zero;
EmptyRows(Md A)
1: if (A =zero) then
2:
3: else if (A =one) then
4:
5: else if RowsCache contains(A, C) then
6:
7: end if
8: k ←Level(A);
9: C ← New level-k node;
10: for each i ∈ Sk do
11: C[i, i] ← one;
12:
13:
14:
15:
16: end for
17: Reduce C;
18: Insert RowsCache entry (A, C);
19: return C;
T ← EmptyRows(A[i, j]);
C[i, i] ← BinaryMult(C[i, i], T);
for each j ∈ Sk do
end for
Figure 6. Determining empty rows of a matrix
diagram
enabled, event c effectively becomes disabled. In addition
to providing an increase in modeling power, priorities are
necessary to handle immediate events (events which occur
in zero time), since immediate events always have priority
over timed events.
To construct matrix diagrams for the next-state functions
for each event when events have a priority structure, we ﬁrst
build the next-state functions in isolation, ignoring the pri-
orities, and then modify the functions appropriately. If event
b has priority over event c, we must modify function N c
so that any state s that enables event b has no next-states:
N c(s) = ∅. This can be done by manipulating the matrix
diagrams Nb and Nc as follows.
1. Determine the states that do not enable event b by com-
puting EmptyRows(Nb).
2. Restrict event c to these states only, using BinaryMult.
Thus, BinaryMult(EmptyRows(Nb),Nc) constructs
the
proper next-state function for event c, taking into account
that event c is disabled whenever event b is enabled.
Complex priority structures can also be handled with the
same technique, if care is taken to perform the steps in the
correct order. For instance, suppose event a has priority
over event b, and event b has priority over event c, but a does
not have priority over event c. Then b is disabled whenever
a is enabled, and c is disabled whenever b is enabled (and
a is disabled). The above computation will correctly deter-
mine the next-state function for c, provided Nb has already
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
return;
BuildNextPriority(e(cid:1)
);
Error, cyclic dependency;
K, . . . ,N e
1 );
• States enabling e, initially all
with higher priority than e do
BuildNextPriority(event e)
1: if we have computed Ne then
2:
3: else if we are already computing Ne then
4:
5: end if
6: Ne ← BuildNext(N e
7: E ← one;
8: for each event e(cid:1)
9:
10: E ← BinaryMult(E, EmptyRows(Ne(cid:1)
11: end for
12: Ne ← BinaryMult(E, Ne);
BuildNextPriorityClass
1: E ← one;
2: F ← one;
3: for each priority p, from high to low do
4:
5:
6:
7:
8:
9:
10: end for
Ne ← BuildNext(N e
Ne ← BinaryMult(F, Ne);
E ← BinaryMult(E, EmptyRows(Ne));
for each event e with priority p do
K , . . . ,N e
1 );
end for
F ← E;
));
Figure 7. Constructing next-state functions
with event priorities
been adjusted. Thus, adjustment of the next-state functions
to incorporate priority should proceed from high priority
events to low priority events.
Given any acyclic priority structure [13], the next-state
function for each event can be determined using the algo-
rithm BuildNextPriority in Figure 7. Priority cycles are not
allowed (e.g., if event b has priority over c, then event c
cannot have priority over b). Existence of a cycle will cause
BuildNextPriority(e) to eventually call itself with the same
parameter, which can be detected. If a priority class struc-
ture is used instead, in which each event is assigned an in-
teger priority [1, 11], then the next-state function for each
event can be determined using the simpler algorithm Build-
NextPriorityClass, also shown in Figure 7.
An example illustrating the construction of the next-state
functions for events a, b and c, where a has priority over b
and b has priority over c, is shown in Figure 8. Event a is en-
abled in states (1,•, 0) and (2,•, 0). To determine the next-
state function for b, we compute Ea = EmptyRows(Na)
and multiply it by Nb. Note that, before adjustment (ma-
trix diagram Nb in the ﬁgure), event b is enabled in states
(2, 2,•), but after adjusting for priorities, b is only enabled
in state (2, 2, 1). Event c only depends on submodel 2, and
is enabled in states (•, 0,•) and (•, 2,•). To adjust its next-
state function to include the priority relationship with b, we
compute Eb = EmptyRows(Ea · Nb) and multiply Eb by
Nc. After adjustment, event c is disabled in state (2, 2, 1).
5. Eliminating vanishing states
The technique described in the previous section can be
applied to high-level models with event priorities, includ-
ing GSPNs and other formalisms with immediate events.
Reachability set generation will correctly produce the set of
reachable states. However, the reachability set S can be par-
titioned into the set of vanishing states V, in which an im-
mediate event is enabled, and tangible states T , in which no
immediate events are enabled. For many types of analysis,