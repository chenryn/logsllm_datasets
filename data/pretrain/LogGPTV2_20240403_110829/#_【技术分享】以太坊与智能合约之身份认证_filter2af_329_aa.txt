# 【技术分享】以太坊与智能合约之身份认证
##### 译文声明
本文是翻译文章，文章来源：dzone.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
作者：[ureallyloveme](http://bobao.360.cn/member/contribute?uid=2586341479)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**前言**
我们将使用以太坊来处理身份验证的问题。我们在这里所给出的是与区块链身份验证技术相关的典型问题。
[比特币](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fwww.bitcoin.com%2F)自2009
年问世以来，以其去中心化的、安全的货币交易理念惊艳了整个世界。以太坊的概念不仅仅只是数字化货币，它通过与图灵完备的智能合约相结合赋能了去中心化的交易模式。在这篇文章，我们联手Ivo
Zieliński，Konrad Kozioł，David
Belinchon，和来自[GFT创新团队](http://www.microsofttranslator.com/bv.aspx?from=en&to=zh-CHS&a=https%3A%2F%2Fwww.gft.com%2F)的Nicolás
González为以太坊用户开发了一套可实现的基于以太坊的登录系统。这是一个理想的登录系统，它能够允许任何以太坊用户在不必使用其私钥的情况下，证明自己的以太坊帐户的所有权，就像他们登录到Facebook一样。
**介绍**
我们先来看看用户是如何登录到一个简单的系统上的：
1\. 一个用户浏览到一个需要登录的第三方网站。该网站要求用户在文本区域内输入以太坊地址。
2\. 用户输入其以太坊地址，并单击"登录"。
3\. 后端的第三方生成一个挑战字符串，并且签发一个JWT（Json web token），该挑战字符串被嵌入其中。
4\. 由于login合约已在以太坊上可用了，用户可以直接将挑战字符串发送给login的方法。
5\. 后端持续观察以太坊网络，是否出现由以太坊地址所有者在步骤2中所输入的并且被发送过来的挑战字符串。
6\.
如果在合理的时间内，后端监测到挑战字符串，则用来自步骤2的以太坊地址作为标识，将该用户标记为登录成功的状态。一个新的带有完整地址的JWT随即会被发布给第三方网站。
不过上述这种方法存在着一系列的问题：
1\. 用户必须选择使用其以太坊的钱包，手动调用login合约里的login方法。
2\. 用户必须事先知道login合约的地址和接口。
3\. 用户必须花费一些以太币用以登录，因为合约所依赖的events被记录到了区块链上（也就是说，它们执行了写操作）。这使得合约需要消费gas来运行。
4\. 在登录完成之前，后端必须等待一个新的块来被开采，并从网络上传播过来（最小的延迟大约是12秒或更长的时间）。
正如你所能想象到的，这些限制使得简单的身份验证都无法被实现。所以我们需要进行改进。
**以太坊用户登录系统**
我们的系统将依赖于三个关键的要素： 一台身份验证服务器、一个移动应用程序和以太坊的网络。下图是他们之间的交互过程。
要确保用户的以太坊地址与身份验证过程相独立，系统会生成一个完全不同的、仅作身份验证的以太坊地址。该地址通过使用以太坊合约与用户的以太坊地址相关联。换句话说，用户的以太坊地址和系统仅作登录用的地址之间的映射关系会被建立。这种映射在合约的帮助下被存储在以太坊的区块链内。
    pragma solidity ^0.4.2;
    contract Mapper {
        event AddressMapped(address primary, address secondary);
        event Error(uint code, address sender);
        mapping (address => address) public primaryToSecondary;
        mapping (address => bool) public secondaryInUse;
        modifier secondaryAddressMustBeUnique(address secondary) {
            if(secondaryInUse[secondary]) {
                Error(1, msg.sender);
                throw;
            }
            _;
        }
        function mapAddress(address secondary) 
            secondaryAddressMustBeUnique(secondary) {
            // If there is no mapping, this does nothing
            secondaryInUse[primaryToSecondary[msg.sender]] = false;
            primaryToSecondary[msg.sender] = secondary;
            secondaryInUse[secondary] = true;
            AddressMapped(msg.sender, secondary);
        }
    }
虽然该合约是我们目前所见到最为复杂的，但它仍然是比较容易理解的。让我们一起来解析一下吧：
这里有两个事件： AddressMapped和Error 。
AddressMapped事件是在用户的主以太坊地址映射到一个辅助的、只作登录用的地址时所生成的。Error事件是遇到诸如映射使用到了现有的、已经存在的辅助地址之类的错误时才生成的。
然后是两个变量的声明：primaryToSecondary和secondaryInUse。primaryToSecondary是一个地址的映射：根据主地址，它可以告知其所映射的辅助地址。secondaryInUse是一个指向布尔值的地址的映射，用于检查辅助地址是否已被使用。
接下来的是secondaryAddressMustBeUnique。这个特殊函数是一个修改器。Solidity里的修改器是一些可以附加到合约方法里的特殊函数。这些都是在方法代码之前运行的，并且可以用来修改它们的行为。在本例中，secondaryAddressMustBeUnique使用secondaryInUse变量来确认作为参数传递的辅助地址是否正在使用中。如果是的话，它被标记为错误，而且Error事件就被激发了。如果它不是在使用中，则继续执行。_这个占位符是这个被修改的函数代码在逻辑上插入的位置。
最后一个是mapAddress方法。此方法获得一个辅助的地址，并将它映射到该方法的发方或者是调用方的地址上。以太坊在语义上确保发方是其所声明的身份。换句话说，对于一个地址而言，只有密钥的所有者才能作为发方对Solidity的方法进行调用。这确保了在没有任何特殊检查的情况下，只有合法的主地址所有者才能够建立它与用于登录的辅助地址之间的映射关系。这正是我们系统的关键所在。
**总之，我们的合约做到了四点：**
它建立了两个以太坊地址之间的映射：一个高值的地址（主地址）和一个低值的、只作登录的辅助地址。
它保证了只有主地址的所有者才可以建立这种映射。
它在区块链中公开地记录了此信息。
它向监控发送了事件，并且对存储在它里面的数据变化作出了反应。
我们的系统就是这样按我们的需要进行工作的。下面让我们来看看注册和身份验证流程是如何一起运作的。我们在此假设用户是具有一定数量以太币、以及具有以太坊帐户的合法拥有者。
**注册**
这只是在用户初次使用该系统时，所执行的一个一次性的步骤。一旦注册完成，用户可以将其以太坊的地址使用到任何第三方的网站上。换句话说，这是一个全系统的、一次性的步骤。
为了简化身份验证的过程，我们使用一个移动应用程序来接受或拒绝身份验证的请求。用户通过启用其以太坊的帐户，来作为身份验证的一个因素，实现对移动应用程序的首次注册。