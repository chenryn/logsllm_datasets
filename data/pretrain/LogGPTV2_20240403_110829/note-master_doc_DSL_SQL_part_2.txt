- IS NULL 判断是空值
- IS NOT NULL 判断非空
### 集合比较
- some:某一些满足即可
- all：全部满足
```sql
SELECT username FROM user
WHERE age > all 
(SELECT age FROM user WHERE sex = '女')
# 查询出年龄大于全部女性年龄的用户
```
### 空关系测试
EXIST 关键字：
当改关键字后面的关系非空时返回true，反之返回false
相关子查询：
```sql
SELECT user_id FROM user 
WHERE EXISTS (SELECT * FROM state WHERE user = user_id);
# 查询发表过动态的用户ID
```
### 重复元组存在性测试
UNIQUE 关键字：
查询是否存在重复的元组
### FROM子句中的子查询
```sql
SELECT * FROM (SELECT username FROM user) AS T;
# 使用FROM子句子查询，有些数据库要求FROM后面的子查询需要指定一个别名
```
### WITH子句
提供定义临时关系的方法
### 标量子查询
如果一个子查询的结果只有一个元组，那么可以放在单个值能出现的任何地方：
```sql
SELECT username,(SELECT COUNT(1) 
FROM state WHERE state.user = user.user_id) FROM user;
-- 查询每个用户的用户名及其发表的动态条数
```
## 数据库的修改
### 删除
```sql
DELETE FROM r
WHERE p
```
示例:
```sql
DELETE FROM user
WHERE username = 'root'
# 删除用户名为root的用户
```
### 插入
```sql
INSERT INTO user VALUES(1,'username',15);-- 这种方式需要指定全部列，每次插入数据，应尽可能提供所有列名
INSERT INTO user(username,age) VALUES('username',15);-- 这种方式不需要指定全部列，允许为NULL值或者表定义有默认值的列可以被省略
INSERT INTO user SELECT * FROM user;-- 插入查询出来的数据，根据列的位置进行插入，列名可以不匹配
-- 某些SQL实现INTO是可选的
SELECT * INTO cust_copy FROM customers; -- 复制数据到新表
CREATE TABLE cust_copy AS  SELECT * FROM customers; -- MySQL Oracle PostgreSQL的语法
```
### 更新
```sql
UPDATE r
SET k1=v1,k2=v2,...,kn=vn
WHERE p
```
```sql
UPDATE user
SET username = 'abc'
WHERE username = 'root'
```
## 视图
定义：不是逻辑模型的一部分，但是作为虚关系对用户可见
Access 不支持视图 MySQL从5之后才支持视图 SQLite只支持只读视图
### 视图定义
```sql
CREATE VIEW v AS 
```
创建一个部分用户视图：
```sql
CREATE VIEW user_part 
AS
SELECT * FROM user LIMIT 10
```
如果视图使用了复杂的联结或者对视图进行了嵌套，性能会下降的很厉害,同时视图也不支持创建索引
### SQL查询中使用视图
再查询中，视图能出现在关系名可以出现的任何地方
```sql
SELECT * FROM user_part
```
对于视图的使用：
1. 使用视图隐藏复杂的联结
2. 使用视图格式化查询的数据
3. 过滤掉不想要的数据
可以极大简化复杂数据的处理
### 物化视图
如果用于定义视图的实际关系改变，视图也跟着修改。这样的视图称为物化视图
### 视图更新
一般来说，满足下列所有条件，则视图是可更新的
- FROM子句中只有一个数据库关系
- SELECT子句只包含关系的属性名，不包含任何表达式聚集或DISTINCT声明
- 没有出现在SELECT子句中的属性可以去空值，也不是主码的一部分
- 查询中没有GROUP BY 和HAVING子句
## 事务
定义：事务内的所有语句要么全部执行，要么全部不执行
- Commit work:提交当前事务
- Rollback work：回滚当前事务
MySQL：
```sql
START TRANSACTION; -- 开始一个事务
DELETE FROM orderitems; -- 执行事务操作
ROLLBACK; -- 回滚事务
COMMIT; -- 提交事务
```
Oracle:
```sql
SET TRANSACTION;
...
COMMIT;
```
对于没有明确标志事务结束的语句，事务将一直存在。
默认没有开启的事务的执行语句都是隐式提交
为了实现部分回滚的功能，这里引入一个叫做保存点的东西，回滚可以回滚到保存点，放弃回滚点后的所有更改
```sql
START TRANSACTION;
SAVEPOINT p1;
DELETE FROM orderitems;
ROLLBACK TO p1;
COMMIT;
```
## 游标
在检索出来的行中前进或者后退。
Access不支持 MySQL5之后才支持 SQLite的游标称为步骤。
相较而言，游标对对于Web应用用处不大
## 完整性约束
完整性约束防止的是对数据的意外破坏。
### 单个关系上的约束
### NOT NULL约束
```sql
 CREATE TABLE `user` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) NOT NULL,
  `password` varchar(32) NOT NULL,
  `user_info` int(11) NOT NULL,
  `permission` int(11) NOT NULL,
  `create_time` datetime NOT NULL,
  `update_time` datetime NOT NULL,
  `last_login` datetime DEFAULT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=293 DEFAULT CHARSET=utf8
```
表示禁止在该属性上插入NULL值
### UNIQUE 约束
被该约束修饰的属性在单个关系上是唯一的，由于NULL != NULL ，所以一个关系上允许存在多个NULL值
### CHECK 子句
check(p) 指定一个谓词P，只有当该谓词满足时，数据库才允许插入
### 参照完整性
一个关系中给定属性集上的取值在另一关系的特定属性集的取值中出现，这种情况称为参照完整性
```sql
CREATE TABLE test(
user_id INT,
FOREIGN KEY (user_id) REFERENCES user(user_id)
);
```
test表中的user_id参照user表的user_id
### 事务中对完整性约束的违反
如果事务中的某条SQL语句违反了完整性约束，则会马上进行检查。有些DBS支持将initially deferred加入到约束中，这样完整性约束检查就会在事务结束的时候进行。
### 复杂CHECK条件与断言
比如CHECK后面的谓词可以使用子查询：
```sql
CREATE TABLE test(
user_id INT 
CHECK(user_id IN( SELECT user.user_id FROM user))
)
```
这样在插入test表时，只有在user表中出现的user_id才被允许插入，但是大多数数据库还不支持
断言：
```sql
CREATE ASSERTION  CHECK 
```
任何在断言中涉及到的关系发生变动，都会触发断言。
## SQL中的数据类型与模式
### SQL中的日期和时间类型
- DATE:日历日期，包括年月日
- TIME :一天中的时间
- TIMESTAMP ：DATE+TIME
#### 与时间相关的函数：
- CURRENT_DATE：返回当前日期
- CURRENT_TIME：返回当前时间
### 默认值
如
```sql
CREATE TABLE test(
  user_id INT DEFAULT 0
);
```
当user_id未指定时，默认为0
### 创建索引
```sql
CREATE INDEX index_1 ON test(id)
```
### 大对象类型
- BLOB
- CLOB
### 用户定义的类型
### CREATE TABLE 的扩展
创建两个模式相同的表：
```sql
CREATE TABLE test1 LIKE test
```
从查询中创建表：
```sql
CREATE TABLE test2 AS 
(
SELECT * FROM test
)
WITH DATA;
# mysql不支持
```
### 模式、目录与环境
当代数据库提供了三层结构的关系命名机制，最顶层由**目录**构成，每个目录当中可以包含**模式**，目录 == 数据库。
默认目录和模式是为每个连接建立的SQL环境的一部分。
## 授权
- 授权读取
- 授权插入
- 授权更新
- 授权删除
### 权限的授予与收回
```sql
GRANT 
ON 
TO 
```
```sql
GRANT SELECT ON department TO user1
# 授予user1查询department表的权限
```
public:代表当前系统的所有用户以及未来用户
```sql
REVOKE 
ON 
FROM 
```
```sql
REVOKE SELECT ON department FROM user1
# 收回user1的查询权限
```
### 角色
创建角色：
```sql
CREATE ROLE 
```
```sql
GRANT admin to user1;
# 将admin角色授予user1
```
### 视图的授权
同上
### 模式的授权
```sql
GRANT REFERENCES (dept_name) ON department TO user1
# 允许user1创建这样的关系：它能参照department的dept_name
```
### 权限的转移
在授权语句最后加上 WITH GRANT OPTION
即允许用户可将权限授予给其他用户
### 权限的收回
默认情况下，多数DBS都会级联收回用户的权限
如果在收回语句最后加上 RESTRICT关键字，可以防止级联收回
## 存储过程
存储过程可以看成是对一系列 SQL 操作的批处理
Access 与 SQLite 不支持，MySQL5之后才支持
- 代码复用
- 比较安全
- 性能较高
不同DBMS存储和调用存储过程的方式都很不一致
## 使用程序设计语言访问数据库
- 动态SQL:运行时构建SQL语句字符串与数据库进行交互
- 嵌入式SQL:SQL语句必须在编译时全部确定，由预处理器来连接宿主语言与数据库
### JDBC
一段经典的JDBC代码：
```java
// 加载驱动
 Class.forName("com.mysql.jdbc.Driver");
 // 获取连接
 Connection connection =
         DriverManager.getConnection("jdbc:mysql:///test","root","Root@@715711877");
 // 执行SQL
ResultSet resultSet = connection.prepareStatement("SELECT * FROM test").executeQuery();
//取回结果集
while (resultSet.next()){
    System.out.println(resultSet.getInt("id")+"|"
            +resultSet.getString("name"));
}
connection.close();
```