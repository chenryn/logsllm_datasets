12
13 }
14 class Database {
15
public function __destruct() {
16
$this->handle->shutdown();
}
17
18 }
19 $data = unserialize($_COOKIE[’data’]);
20 // O:8:"Database":1:{s:6:"handle";
21 // O:8:"TempFile":1:{s:8:"filename";s:15:"../../.htaccess";}}
Listing 2: Exploitation of a POI vulnerability.
44The POI vulnerability occurs in line 19, where user in-
put is deserialized. Note that an application often does not
intend to deserialize objects but rather arrays. By forging
a cookie with the content seen in lines 20–21, the attacker
injects a Database object with the $handle-property set to
a TempFile object. Its $filename property is then set to the
../../.htaccess ﬁle that the attacker attempts to delete.
When the application terminates, the injected Database
object will automatically execute its destructor. The de-
structor will then use the $handle-property to execute its
shutdown() function. Because the attacker loaded the class
TempFile into this property, the function shutdown() of
TempFile is triggered. It inherits this method from the File
class. Next, the method shutdown() invokes the method
close(). Although this method is harmless in the File
class, it is overwritten in the class TempFile with a harmful
method that deletes the speciﬁed .htaccess ﬁle.
Note that an initial gadget (in this case Database’s de-
structor) is required in order to start having an execution
ﬂow of already existing code, deﬁned in the object’s meth-
ods. For every set of objects, multiple variations of gadgets
can be combined, each leading to another class of vulner-
ability in the end. As manually checking the application’s
source for useful gadgets is cumbersome and time consum-
ing, an automated approach is needed.
3. STATIC POP CHAIN DETECTION
In order to detect POI vulnerabilities and POP gadget
chains in modern applications, an eﬃcient analysis of object-
oriented code is required—a feature missing in existing anal-
ysis frameworks [1,6,7,18,44,46]. In the following, we intro-
duce our approach to address this challenge. In Section 3.1,
we ﬁrst provide a general overview of the taint analysis ap-
proach. Afterwards, we review the basic analysis tasks and
data ﬂow analysis of procedural PHP code we utilize. We
introduce our novel analysis approach for inter-procedural,
ﬁeld-sensitive and object-sensitive data ﬂow analysis in Sec-
tion 3.3. Based upon this method, we can analyze OOP code
for POI vulnerabilities and generate POP gadget chains eﬃ-
ciently (see Section 3.5). We highlight diﬃculties in the anal-
ysis of OOP code and limitations of our approach through-
out the section and present small code samples for better
understanding.
3.1 High-Level Overview of Taint Analysis
As a basic analysis task, we need to perform a taint anal-
ysis capable of inspecting a large number of sensitive sinks,
aﬀected parameters, and unsanitized sources. Furthermore,
we must precisely analyze built-in functions in order to sim-
ulate their actions regarding data ﬂow and data sanitization.
To this end, we leverage ideas of static code analysis frame-
works based on block, function, and ﬁle summaries [6, 46]
and extend them to our needs.
When analyzing a given application, each PHP ﬁle of
the application is transformed into an Abstract Syntax Tree
(AST). In an initial phase, each AST is analyzed for dec-
larations of functions and classes. The sub trees of these
units are extracted from the AST and the remaining tree
is assigned to each ﬁle’s name. Next, each ﬁle’s AST is
transformed into a Control Flow Graph (CFG). During this
transformation, the AST is split into linked basic blocks that
represent the control ﬂow of the program. Whenever a new
basic block is connected to the current basic block, the cur-
rent basic block is simulated. During this process, the data
ﬂow of the current basic block is inferred from its AST,
by using an abstract representation of data (details are ex-
plained in Section 3.2). The result of the data ﬂow analysis
is stored in a block summary.
If a sensitive sink occurs during block simulation, the af-
fected argument is analyzed with backwards-directed taint
analysis [6, 44]. Similar to our data ﬂow analysis, the origin
of the argument is recursively retrieved from the summary
of previously connected blocks. If it originates from unsani-
tized user input, we report a new vulnerability according to
the sink’s type.
If a user-deﬁned function is called within a basic block,
the current simulation is halted and the AST of the called
function is transformed into a CFG with the same approach.
If a taint analysis during this transformation hits a param-
eter or global variable of the currently analyzed function,
the aﬀected parameter or variable is stored in the function
summary. Once the CFG transformation is completed, all
return statements are analyzed in a similar way to deter-
mine the returned data of the function. The information is
added to the function’s summary and the simulation of the
callee’s context is continued. For every further call of the
same function, the function summary is used. Global vari-
ables are exported and the arguments of sensitive parame-
ters are analyzed context-sensitively. The function summary
will play an important role during POP chain generation (see
Section 3.5).
The analysis ends when the ASTs of all ﬁles are trans-
formed to CFGs. For each ﬁle, a ﬁle summary is created
similar to a function summary for cases in which the ﬁle is
included multiple times. This analysis approach based on
summaries is eﬃcient because every code block is analyzed
only once. A remaining challenge is to combine it with an
analysis of the highly context-sensitive data ﬂow through
objects and methods in object-oriented code.
3.2 Data Flow Analysis
We now present our method of summarizing data ﬂow
within a basic block [6,46]. Based on a basic block’s AST, we
analyze all data assignments to memory locations of the form
loc := . Other forms of data assignments
are handled as well, but left aside for brevity reasons. The
assigned data is transformed into the following data symbols
which are an abstract representation of data and locations:
• Value represents a string or an integer value.
• Variable represents a variable $x by its name x.
• ArrayFetch represents the access of an array $x[y]
by its name x and the dimension y. Multiple dimen-
sions are possible, such as for example $x[y][z].
Once the assigned data is transformed into data symbols,
its memory location is indexed in the block summary for
eﬃcient lookups. In procedural PHP code, the assigned lo-
cation loc is either a variable $x or an array dimension $x[y].
Assigned data to a variable can be indexed in the block sum-
mary by the variable’s name. Previously assigned data is
overwritten. The assignment to an array dimension requires
a more complex representation and this problem is solved
by the wrapper symbol ArrayWrite.
It stores assigned
data in a tree graph, whereas the tree’s edges represent the
dimensions and the leaves represent the assigned data [18].
45Dimension and data are both stored as data symbols. The
tree structure allows eﬃcient access to the data by provid-
ing one or multiple dimension(s) which are compared to the
edges. The ArrayWrite symbol acts as a data wrapper
and is indexed in the block summary by the array’s name.
Further assignments to the same index extend its tree.
To summarize not only the data assignment but also the
data ﬂow of one basic block, the interaction between data
assignments is evaluated based up on the current block’s
summary. For this purpose, the name of an assigned data
symbol is looked up in the current summaries’ index list to
see if it can be resolved by previous deﬁnitions in the same
basic block.
A found Variable symbol is simply replaced with the
symbol from the summary. An ArrayFetch symbol has to
carry its array dimension to the resolved symbol. A resolved
Variable symbol will turn into an ArrayFetch symbol
with the carried dimension. The dimension of a resolved
ArrayFetch symbol is extended by the carried dimension.
In case the resolved symbol is an ArrayWrite, the symbol
mapped to the carried dimension is fetched from the tree.
A return value of a user-deﬁned function is resolved from
the function summary. As described in the previous section,
it summarizes the data ﬂow of the function’s basic blocks.
The return value is a data symbol. For simplicity, we ignore
the fact that a function can return multiple diﬀerent data
symbols.
Based on these basic blocks’ summaries, eﬃcient data ﬂow
and taint analysis across linked blocks is possible without
requiring the re-evaluating of the blocks’ operations.
3.3 Our Approach to OOP Analysis
In this section, we introduce our approach for statically
analyzing relevant OOP features for POP detection. First,
our prototype gathers information about the object-oriented
code (see Section 3.3.1). Then, the allocation of objects (see
Section 3.3.2) and the access to object properties (see Sec-
tion 3.3.3) is included into the data ﬂow analysis. A chal-
lenge is to maintain the eﬃcient concept of data ﬂow sum-
maries: with OOP, the context of data handling moves away
from a single basic block to a pervasive object that is used
in diﬀerent blocks and functions. We approach this chal-
lenge by assisting the backwards-directed data ﬂow analysis
with a forwards-directed, object-oriented analysis. For this
purpose, new data symbols are added. Finally, our inter-
procedural analysis for methods utilizes a class hierarchy
and method ﬁngerprints to handle calls in a context-sensitive
manner (see Section 3.3.4).
3.3.1 Initialization
During the initial analysis phase, we extract class deﬁni-
tions from the ASTs. They are stored as part of the analysis
process. For static classes, we collect predeﬁned properties
and class constants that are transformed to data symbols.
During data ﬂow analysis, access to this static content is
inferred instantly. Furthermore, we build a class hierar-
chy [8,36] based on the inheritance of each class (e. g., class
A extends B). To answer the questions who extends whom
and who is extended by whom, it is built in both directions.
All deﬁned methods are stored in the analysis environment
as user-deﬁned functions, but are linked to their originating
class. Additionally, we extract type information of parame-
ters whenever possible.
3.3.2 Object-sensitive Analysis
After initialization, our prototype starts to analyze the
data ﬂow of basic blocks as described in Section 3.2. We
introduce the new data symbol Object whenever a new
object is constructed by the keyword new. This data symbol
is deﬁned by the instantiated class’ name and its properties.
The properties are represented by a hash map that references
a property name to a data symbol. By default, the map of
properties in each Object symbol is empty.
When a new object is created, its constructor is analyzed.
A constructor is either the __construct() method of the
class or a method having the instantiated class’ name. Our
inter-procedural analyses ensures that all data assigned to
properties within the constructor is assigned to the new Ob-
ject symbol. The details are explained in Section 3.3.4.
Object Propagation.
Then, the created object is assigned to its memory lo-
cation and indexed in the block summary as described in
Section 3.2. As shown in the next sections, certain anal-
ysis steps require the knowledge of all present objects and
their corresponding class. Thus, at the end of the simula-
tion of one basic block, all the indexed Object symbols are
propagated to the next basic block into an object cache (il-
lustrated in Figure 1, dotted arrow). While our prototype is
aware of multiple diﬀerent objects per code path, we assume
for simplicity that no cache index collides.
Moreover, we extract type information from type checks
(e.g., $o instanceof MyClass) to determine missing class
information. The class name is updated in the object cache
or a dummy object is created if no related object is found.
The object cache is extended by each basic block when
new objects are invoked and all objects are propagated until
the end of the CFG is reached. This way, each basic block
has access to previously invoked objects within its CFG. If
the CFG belongs to the main code of a ﬁle, the lifetime
of all objects passes over. At this point, the object cache
is emptied and the __destruct() method of each diﬀerent
instantiated class is analyzed. The inter-procedural propa-
gation of objects is explained in Section 3.3.4.
Object-sensitive Magic Methods.
Based on the object cache, special operations on loca-
tions pointing to objects are detected and the correspond-
ing magic methods are analyzed (refer to Section 2.1). If the
built-in functions var_export() or serialize() reference a
memory location that points to an Object symbol, the cor-
responding magic methods __set_state() or __sleep() of
the object’s class are analyzed (if available). Similarly, the
clone operator invokes analysis of the method __clone()
and an implicit or explicit typecast to String invokes analy-
sis of the method __toString(). If an object is used within
a dynamic function call, such as $object(), the method
__invoke() of the object’s class is analyzed.
3.3.3 Field-sensitive Analysis
With the knowledge about present objects, our prototype
can handle the access to properties. We model writes and
reads to properties of objects (i.e., $o->p) in a similar way
to the access of arrays. The challenge is to maintain object-
sensitivity [30]. We refer to the accessed object $obj as the
receiving object, or in short, receiver [25].
461 $text = ’test’;
2 $obj = new MyClass;
3 if(...) {
4
5 }
6 echo $obj->data;
$obj->data = $text;
Figure 1: The code on the left creates a new object and
assigns data to a property. The corresponding control
ﬂow graph is illustrated on the right. The created object
obj is propagated forward throughout the CFG (dotted ar-
row). Assigned data to an object’s property is resolved by
backwards-directed data ﬂow analysis (dashed arrow).
Property Writes.
A property p of an object $o is written to if the location
loc of the assignment loc :=  is a property
access (i.e., $o->p). We then ﬁrst try to resolve the assigned
data by backwards-directed data ﬂow analysis of all previ-
ously linked blocks’ summaries (recall Section 3.2).
If the receiver’s name $o is found in the object cache of the
current basic block, then the assigned data’s symbol is added
to the property hash map of object $o in the object cache
with index p. In case an array dimension of a property is
accessed (i.e., $o->p[d]), the assigned data is wrapped into
an ArrayWrite symbol. An example is given in Figure 1.
Here, the variable $text is resolved in line 4 and its value
test is assigned to the object’s property.
However, during intra-procedural analysis, the object cache
is not always complete. For example, when $o is a parameter
or a global variable of the current function (see Listing 3), or
the receiver’s name is the reserved variable $this that refers
to the current object of the called method, the receiver is
unknown. In this case, we use the wrapper symbol Proper-
tyWrite to save the information about the receiver’s name,
property dimension, and assigned data symbol. All Prop-
ertyWrite symbols of one basic block are stored in its prop-
write cache. This cache is propagated through all upcoming
basic blocks, similar to the object cache. The details on how
the property writes are assigned to the correct receiver dur-
ing inter-procedural analysis are explained in Section 3.3.4.
Furthermore, we handle writes to static properties. Sim-
ilar to the access of non-static properties, the receiver class
can be related to the current callee’s class (e. g., self::$p
or parent::$p), or to a secondary class (e.g., Class::$p).
In both cases, the target class name is determined from the
class hierarchy and the assigned data is stored in the proto-
type’s environment for later access.
Property Access.
We introduce the data symbol PropertyFetch to model
the access of a property. It extends the ArrayFetch sym-
bol with a property dimension. This way, a PropertyFetch
symbol is also capable of having an array dimension. The
name associated to the symbol is the name of the receiv-
ing object. For example, the code $v = $o->p[a] assigns
a PropertyFetch symbol with the name o, the property
dimension p, and the array dimension a to the location v.
During data ﬂow analysis, we try to resolve this symbol.
The PropertyFetch symbol can be resolved from the
block summary if the receiver name o is found in the object
cache. First, the property dimension p is fetched from the
hash map and then the array dimension a is carried to the
resolved symbol. If the receiver name o is indexed in the
data ﬂow summary, the receiver’s symbol is fetched and the
object’s property dimension p is carried to it. In this pro-
cess, a Variabe symbol is inferred into a PropertyFetch
symbol with a property dimension p. An ArrayFetch sym-
bol is inferred similarly, but carries its array dimension to
the PropertyFetch symbol. If a PropertyFetch symbol
is resolved from the block summary into another Proper-
tyFetch symbol, the property dimensions are added. Fi-
nally, if the PropertyFetch symbol was not inferred from
the block summary or the object cache, it is looked up in
the propwrite cache. Otherwise the PropertyFetch sym-
bol remains unresolved.
Field-sensitive Magic Methods.
We also invoke analysis of magic methods for certain oper-
ations on PropertyFetch symbols. However, this is only
possible when the class name of the receiver is resolved from
the object cache. Then, if the built-in function isset() or
unset() references to an inaccessible property (determined
by the class deﬁnition), the magic method __isset() or
__unset() of the receiver’s class is analyzed. Furthermore,
if the property dimension of a property read or write is not
deﬁned in the receiver’s class, the magic method __get() or
__set() is analyzed. When the receiver’s class name can-
not be resolved, no further analysis invoked. Note that in
case of a POI vulnerability, an object of an arbitrary class
is present so that ﬁeld-sensitive magic methods are still sup-
ported for POP chain generation by considering all available
classes (for details refer to Section 3.5).
3.3.4
Our prototype handles calls to methods in a way simi-