 **I'm submitting a ...** (check one with "x")
    [x] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**  
After the default error handler processes the first error it no longer
processes any future errors.
**Expected behavior**  
That every error that happens is processed by the error handler.
**Minimal reproduction of the problem with instructions**  
http://plnkr.co/edit/uqY6rcA9gRDtC8nsmoka  
This is a simple example that adds a button which calls a function to throw an
error.  
The first time the button is click the error is logged to the console. Any
further clicks of the button throw the error but the error handler does not
capture the error and handle it.
You can see this error with the plnkr example by clicking the throw error
button and watching the console log. The first occurrence logs and any future
occurrences of the error being thrown don't go through the errorhandler.
If the error handler is constructor to not rethrow the error it works as
expected. It appears that when the error is rethrown this gets an error in the
Subscriber.ts line 236-241. My theory is this unsubscribes the error handler
which is why no future errors are processed by the error handler.
{code}  
private __tryOrUnsub(fn: Function, value?: any): void {  
try {  
fn.call(this._context, value);  
} catch (err) {  
this.unsubscribe();  
throw err;  
}  
}  
{code}
**What is the motivation / use case for changing the behavior?**  
The error handler should always handle any error.
**Please tell us about your environment:**
Windows 7 (64 bit), webstorm (2016.3.1), npm / webpack/ angular cli, Spring
Boot / Tomcat
  * **Angular version:** 2.0.X  
2.2.1
  * **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]  
Likely all, chrome 54, firefox 50.0.1 for sure.
  * **Language:** [all | TypeScript X.X | ES6/7 | ES5]  
TypeScript 2.0.3, targeting ES5
  * **Node (for AoT issues):** `node --version` =