(3) α
OT ,1
(4) st ← A
b,α , ⃗h
1
OT ,2
(5) b′ ← A
b,α , ⃗h
2
$← Gp1 , д2
$← ZN , n ← Param(k), ⃗h
(д1, д2, д3);
(st ).
(·)
(·)
N
;
 д
⃗k (α, ⃗h,⃗r )
2
⃗k (0, ⃗h,⃗r )
д
2
b = 0
b = 1 .
The advantage of A in the corresponding security game ⃗ExpG,b,A,T (1λ )
is defined as follows:
AdvTA (1λ ) = |Pr[ ⃗ExpG,0,A,T (1λ )] = 1|−|Pr[ ⃗ExpG,1,A,T (1λ )] = 1|.
The different types of Oracle OT are defined as follows:
• Selective Security (SMH). OSMH,1 can be queried once only while
OSMH,2 can be queried polynomial times.
– OSMH,1
b,α, ⃗h
turn ⃗C← д⃗c (⃗s, ⃗h)
(Y ): Run (⃗c; w2) ← Enc2(Y , p2), choose ⃗s
w2+1
p2
$← Z
, re-
.
– OSMH,2
b,α, ⃗h
choose ⃗r
2
(X ): If Rp2 (X , Y ) = 1 return⊥. Run (⃗k; m2)← Enc1(X , p2),
$← Z
p2 , return ⃗k ←
m2
2
m2
$← Z
w2+1
p2
$←− Z
 д
⃗k (α, ⃗h,⃗r )
2
⃗k (0, ⃗h,⃗r )
д
2
p2 , return ⃗k ←
, return ⃗C← д⃗c (⃗s, ⃗h)
• Co-selective Security (CMH). Both OCMH,1 and OCMH,2 can
be queried once only.
(X ): If X is empty, return ⊥. Otherwise, run (⃗k; m2) ←
– OCMH,1
b,α, ⃗h
Enc1(X , p2), choose ⃗r
b = 0
b = 1 .
(Y ): If Rp2 (X , Y ) = 1, then return ⊥. Otherwise, run
– OCMH,2
b,α, ⃗h, ⃗x
(⃗c; w2) ← Enc2(Y , p2), choose ⃗s
.
In this paper, we say that ABE Π is within the pair encoding
framework if it can be written as a pair encoding scheme PE and is
constructed following the above syntax. As a side note, [2] states
that Π is adaptively secure if PE satisfies PMH (or CMH and SMH)
under assumptions SD1, SD2, SD3.
3 SYNTAX OF CS-PRE
Recall that in REMARK 2.1, we analyze the definition of ABE
scheme can cover the definition of PKE. Hence, in this section,
we directly consider the transformation between two ABE schemes.
Consider two attribute-based encryption schemes, namely, Π0 and
Π1. For notational convenience, we use Πb .PK to denote the pub-
lic parameter of an instance of Πb for b ∈ {0, 1}. In other words,
Πb .KeyGen(1λ ) → (Πb .PK, Πb .MSK). We slightly abuse the nota-
tion and use Πb .SKX instead of Πb .SKΠb .X to denote a decryption
key of attribute Πb .X in cryptosystem Πb. A cross-system proxy re-
encryption scheme CS-PRE for Π0, Π1 is a tuple of three algorithms
(RE-KeyGen, RE-Enc, RE-Dec) whose definition is given below.
RE-KeyGen(Π0.PK, Π0.SKX , Π1.PK, Π1.Y) →rkΠ0 .X→Π1 .Y . The al-
gorithm outputs the re-encryption key rkΠ0 .X→Π1 .Y , which
can be used to convert any ciphertext whose attribute matches
Π0.X in Π0 to a ciphertext of attribute Π1.Y in Π1.
RE-Enc(Π0.PK, rkΠ0 .X→Π1 .Y , Π0.CT )→ Π1.CT (2) . This algorithm
converts Π0.CT to ciphertext Π1.CT (2) on input a re-encryption
key.
RE-Dec(Π0.PK, Π1.PK, Π1.CT (2), Π1.SK ) → M.
Correctness. The correctness requirement of CS-PRE is defined
as follows.
• For all valid index k and k′, all Π0.X ∈ Π0.Xk, Π0.Y ∈ Π0.Yk,
Π1.Y ∈ Π1.Yk′, Π1.X ∈ Π1.Xk′, if Π0.Rk (Π0.X , Π0.Y ) = 1
and Π1.Rk′ (Π1.X, Π1.Y) = 1, then for any ciphertext RE-
Enc(Π0.PK,rkΠ0 .X→Π1 .Y , Π0.CT )→ Π1.CT (2), the following
equation holds,
RE-Dec(Π0.PK, Π1.PK, Π1.CT (2), Π1.SKX ) = M,
where rkΠ0 .X→Π1 .Y is the output of RE-KeyGen(Π0.PK, Π0.SKX ,
Π1.PK, Π1.Y ), and Π0.CT is computed by Π0.Enc(Π0.PK, M,
Π0.Y).
3.1 Security Notion
We present a formal security model for the security requirement
of CS-PRE. We allow the adversary to adaptively introduce new
target cryptosystem and to obtain arbitrary decryption keys, master
secret keys of the target cryptosystems as well as re-encryption
keys subject to the constraint that none of which would allow the
attacker to trivially win the security game.
Let Π0 be an ABE scheme. Looking ahead, Π0 acts as the source
cryptosystem in the attack game. Let CS-PRE be the cross-system
proxy re-encryption. Firstly, we define four oracles to model the
capability of the attacker.
(1) OSetup (Πi ): run Πi .Setup(1λ )→(Πi .PK, Πi .MSK), return the
public key Πi .PK.
(2) O0
: This oracle allows the adversary to obtain decryption
K
keys and re-encryption keys of Π0. This oracle works as
follows.
• For a secret key query on (Π0.X). Run Π0.KeyGen(Π0.PK,
Π0.MSK, Π0.X) → Π0.SKX , return Π0.SKX .
• For a re-encryption key query on (Π0.X, Πi .Y, Πi ), run
Π0.KeyGen( Π0.PK, Π0.MSK, Π0.X) → Π0.SKX , compute
RE-KeyGen (Π0.PK, Π0.SKX , Πi .Y , Πi .PK)→ rkΠ0 .X→Πi .Y ,
return rkΠ0 .X→Πi .Y .
(3) OK (Πi, Πi .X): run Πi .KeyGen(Πi .PK, Πi .MSK, Πi .X )→Πi .SKX ,
(4) Ocor (i): return Πi .MSK where i (cid:44) 0.
return Πi .SKX .
The adaptively chosen-plaintext game Gamer eal is defined as be-
low.
• SetupPhase : C runs Π0.Setup(1λ, k)→(Π0.PK, Π0.MSK),
then returns Π0.PK to A.
• Phase1 : A can arbitrarily issue queries to the oracles de-
fined above.
• Challenge Phase : A outputs two message (M0, M1) and a
challenge ciphertext attribute Π0.Y∗. C runs Π0.Enc(Π0.Y∗,
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea665′
′. If b
Mb, Π0.PK) → Π0.CT∗, and returns Π0.CT∗ to A, where
{0, 1} $→ b. Otherwise, C returns ⊥.
• Phase2 : As in Phase1.
= b, A wins.
• GuessPhase : A outputs a guess b
• Restrictions. To prevent A from winning trivially, the fol-
lowing restrictions are imposed throughout the game.
K (Π0.X ) queries made, R0(Π0.X , Π0.Y∗) = 0.
(1) For all O0
(2) For all OK (Πi , Πi .X ) and O0
Π0.Y∗) and Ri (Πi .X, Πi .Y ) cannot be 1 simultaneously.
(3) For all Ocor (Πi ) and O0
Π0.Y∗) = 1, i (cid:44) j.
Informally speaking, A cannot ask for a key that is capable
of decrypting the challenge ciphertext directly (restriction 1).
If A obtains a re-encryption key from X∗ (an attribute such
that R(X , Y∗) = 1) to Πi .Y ′, it cannot ask for a key that can
decrypt ciphertext for Πi .Y ′ (restriction 2) nor the master
secret key for Πi (restriction 3).
K (Π0.X, Πj .Y, Πj ) queries, if R0(Π0.X,
K (Π0.X , Πi .Y , Πi ) queries, R0 (Π0.X,
Definition 3.1 (Security). A construction of CS-PRE is fully
chosen-plaintext secure if for all PPT adversary A = {A1, A2},
the advantage function AdvA (1λ ) in the above game is negligible:
 b
(Π0.MSK, Π0.PK) ← Π0.Setup(1λ, k );
(st, M0, M1, Π0.Y∗) ←
K ,OK ,OSetup,Ocor
AO0
1
$← {0, 1};
Π0.CT ← Π0.Enc(Π0.Y∗, Mb , Π0.PK);
AO0
K ,OK ,OSetup,Ocor
2
′ ← A2;
(Π0.CT , st );
(Π0.PK);
b
− 1
2 .
AdvA (1λ ) =
Pr
′ :
b = b
For clarity, we have omitted restrictions in the above definition
of advantage function.
4 OUR CONSTRUCTION
In this section, we present our construction of CS-PRE for any
ABE within the pair encoding framework discussed in Section 2.3
followed by its security analysis. We would like to reiterate that
only the source cryptosystem needs to be within pairing encoding
framework while the choice of the target cryptosystems does not
have this requirement.
4.1 Overview of Our Construction
We observe that ABEs in the pair encoding framework [2] fit nicely
into our construction idea. Informally speaking, the structure of
the secret key and ciphertext are of the form1:
⃗k (α,⃗r, ⃗h)
SKX = д
1
C0 = M × e (д1, д1)αs CY = д⃗c (⃗s, ⃗h)
1
.
If key attribute X matches ciphertext attribute Y (i.e. R(X , Y ) = 1),
then the linear combination of ⃗k (α, ⃗r , ⃗h) and ⃗c (⃗s, ⃗h) can recover
the value e (д1, д1)αs. In other words, there exists a matrix ⃗E such
that e (SK ⃗E
X , CY ) = e (д1, д1)αs, where SKX and CY are both vectors
of group elements. Note that this is what we need exactly. For
1Note that this is a simplified description where we omit the Gp3 -component of the
keys and ciphertexts.
any SKX and any ciphertext C0, CY , e ((SKδ
when R(X , Y ) = 1.
X ) ⃗E , CY ) = e (д1, д1)αsδ
Suppose (enc, dec) is the encryption and decryption algorithm of
the target recipient, we can construct the re-encryption algorithm
for any ABE in the above form as follows.
• Re-encryption key: Randomly pick δ, compute rk0 := SK
H (δ )
X
and rk1 := enc(δ ), where H is a hash function that maps δ
from the message space of enc to ZN .
• Re-encryption: On input (C0, CY ), compute
F := e (rkE0 , CY ) = e (д1, д1)αsH (δ ) .
Output (C0, F, rk1).
• Re-Decryption: On input (C0, F, rk1), compute δ := dec(rk1).
1/H (δ ).
Output C0/F
4.2 Our Construction of CS-PRE
We present our construction of CS-PRE, which allows the proxy
server to convert a ciphertext from an ABE scheme Π0 within the
pair encoding framework to any other scheme Π. Since Π0 is within
the framework, it works in a bilinear group (G, GT , e, N ). In the
following, we assume H : {0, 1}∗ → ZN is a hash function whose
output is uniformly distributed if its input is uniform. Notably, it is
not hard to find such kind of hash function, e.g. KDF function in
[15].
RE-KeyGen(Π0.PK, Π.PK, Π0.SKX , Π.Y )→ rkΠ0 .X→Π.Y :=( ⃗rk, Π. ⃗C).
Π.Y is the ciphertext attribute of Π, Π0.SKX is a user secret
key for attribute Π0.X. Run (⃗k; m2) ← Enc1(Π0.X, N ), choose
⃗r2
$← Gm1
$← Z
m2
N
$← MΠ.
, R3
p3 and δ
⃗rk = (Π0.SKX · R3 · д
⃗k (0, ⃗h,⃗r2)
1
)H (δ ) .
(4)
Run Π .Enc(Π .PK, Π .Y , δ ) → Π . ⃗C, return ( ⃗rk, Π . ⃗C).
RE-Enc(Π0.PK, rkΠ0 .X→Π .Y , Π0.CTZ , Π0.X ) → Π .CT (2) . Suppose
that
rkΠ0 .X→Π .Y = ( ⃗rk, Π . ⃗C), Π0.CTZ = (Π0.CZ,0, Π0. ⃗CZ,1)
and R0 (Π0.X, Π0.Z ) = 1. Run Pair(Π0.X , Π0.Z ) → ⃗E, com-
pute
⃗E
F = e ( ⃗rk
, Π0. ⃗CZ,1)
Output Π .CT (2) = (Π0.CZ,0, F , Π . ⃗C).
run Π.Dec(Π.PK, Π.SKW , Π. ⃗C) → δ. Return Π0.CZ,0/F
RE-Dec. (Π0.PK, Π .PK, Π.CT (2), Π.SKW ) → M. If R(W , Y ) = 1, then
1
H (δ ) .
(5)
4.3 Security Analysis
Assume adversary A makes q1 and q2 queries to O0
in Phase1 and
Phase2 respectively. Also, let A issue q queries to OSetup. We have
K
the following theorem regarding the security of our construction
of CS-PRE.
Theorem 4.1. Suppose the underlying pair encoding scheme PE
for Π0 is co-selectively and selectively master key hiding and as-
sumptions SD1, SD2, SD3 hold in G. Also assume that the target
cryptosystems {Πi}q
i =1 are chosen-plaintext secure. Then our construc-
tion satisfies Definition 3.1. More precisely, for any PPT adversary A,
there exists adversary B1, B2, · · · , B6 who run nearly the same time
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea666as A, such that for any λ:
AdvA (1λ ) ≤ 2AdvSD1
B1
(1λ ) + q2AdvSMHB4
+ q1AdvCMHB3
(1λ ) + (4q1 + 4q2 + 1)AdvSD2
B2
(1λ ) + AdvSD3
B5
(1λ )
(1λ )
+ 2q(q1 + q2)AdvCPAB6 (1λ ).
$← Gp2, ˆ
⃗h
(6)
Remark 2. The selectively master-key hiding security for PE
used in our security proof is weaker than the original definition
as mentioned in Section 2. Here we require that both OSMH,1 and
OSMH,2 can be queried once only.
Semi-Functional Algorithm. The following algorithms will be
used in the security proof of our generic construction.
SFSetup(1λ, k). This algorithm is nearly the same as Setup(1λ, k)
defined in Section 2.3 except that it additionally outputs a
generator д2
⃗h the semi-functional
parameters.
$← Z n
ˆ
⃗h) : This algorithm first runs (⃗c; w2)
← Enc2 (Π0.Y, N ). Then choose ⃗s= (s, s1, s2, . . ., sw2) $←
w2+1
w2+1
, output the semi-functional ciphertext
Z
N
N
Π0.CT = (C0, ⃗C1):
C0 = e (д1, д1)αs × M
SFEncrypt(Π0.Y , M, Π0.PK, д2,
1
ˆ
SFKeyGen(Π0.X , Π0.MSK, Π0.PK, д2, type, ˆα,
⃗h). This algorithm runs
$← Z
(⃗k; m2) ← Enc1(Π0.X, N ), picks ˆ
, then
⃗r,⃗r