    //        if (option.toLowerCase().equals("encode"))
    //        {
    //            if (args.length  jarEnum = new JarFile(new File(jarPath)).entries();
                while (jarEnum.hasMoreElements())
                {
                    JarEntry Element = jarEnum.nextElement();
                    String FileName = Element.getName();
                    if (FileName.indexOf("sleeve")>=0 && !FileName.equals("sleeve/")) {
                        System.out.print("[+] Decoding "+FileName+"......");
                        byte[] decBytes = CrackSleevedResource.DecodeResource(FileName);
                        if (decBytes.length > 0) {
                            System.out.println("Done.");
                            CommonUtils.writeToFile(new File(saveDir,"../"+FileName),decBytes);
                        }
                        else
                            System.out.println("Fail.");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        private void EncodeFile(){
            // 文件保存目录
            File saveDir = new File(this.EncDir);
            if (!saveDir.isDirectory())
                saveDir.mkdirs();
            // 获取解密文件列表
            File decDir = new File(this.DecDir);
            File[] decFiles = decDir.listFiles();
            if (decFiles.length == 0) {
                System.out.println("[-] There's no file to encode, please decode first.");
                System.exit(0);
            }
            for (File file : decFiles){
                String filename = decDir.getPath()+"/"+file.getName();
                System.out.print("[+] Encoding " + file.getName() + "......");
                byte[] encBytes = CrackSleevedResource.EncodeResource(filename);
                if (encBytes.length > 0) {
                    System.out.println("Done.");
                    CommonUtils.writeToFile(new File(saveDir,file.getName()),encBytes);
                }
                else
                    System.out.println("Fail.");
            }
        }
    }
    class CrackSleevedResource{
        private static CrackSleevedResource singleton;
        private SleeveSecurity data = new SleeveSecurity();
        public static void Setup(byte[] paramArrayOfbyte) {
            singleton = new CrackSleevedResource(paramArrayOfbyte);
            //singleton = new CrackSleevedResource(CommonUtils.readResource("resources/cobaltstrike.auth"));
        }
        public static byte[] DecodeResource(String paramString) {
            return singleton._DecodeResource(paramString);
        }
        public static byte[] EncodeResource(String paramString) {
            return singleton._EncodeResource(paramString);
        }
        private CrackSleevedResource(byte[] paramArrayOfbyte) {
            this.data.registerKey(paramArrayOfbyte);
        }
        private byte[] _DecodeResource(String paramString) {
            byte[] arrayOfByte1 = CommonUtils.readResource(paramString);
            if (arrayOfByte1.length > 0) {
                long l = System.currentTimeMillis();
                return this.data.decrypt(arrayOfByte1);
            }
            byte[] arrayOfByte2 = CommonUtils.readResource(paramString);
            if (arrayOfByte2.length == 0) {
                CommonUtils.print_error("Could not find sleeved resource: " + paramString + " [ERROR]");
            } else {
                CommonUtils.print_stat("Used internal resource: " + paramString);
            }
            return arrayOfByte2;
        }
        private byte[] _EncodeResource(String paramString){
            try {
                File fileResource = new File(paramString);
                InputStream fileStream = new FileInputStream(fileResource);
                if (fileStream != null)
                {
                    byte[] fileBytes = CommonUtils.readAll(fileStream);
                    if (fileBytes.length > 0)
                    {
                        byte[] fileEncBytes = this.data.encrypt(fileBytes);
                        return fileEncBytes;
                    }