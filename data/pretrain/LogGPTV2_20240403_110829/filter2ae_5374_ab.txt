        function balance(var arg0) returns (var arg0) {
            memory[0x20:0x40] = 0x03;
            memory[0x00:0x20] = arg0;
            return storage[keccak256(memory[0x00:0x40])];
        }
上文为核心关键函数的具体代码，我们为了分析题目需要具体的看如何达到满足flag调用函数的要求的。
    function payforflag(var arg0) {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x03;
            if (storage[keccak256(memory[0x00:0x40])] 0x0f4240，而0x0f4240为十进制的1000000。
即我们获得了我们的目标，即令我们的合约token>1000000即可。
### 三、解题步骤
我们对每个函数进行详细的分析。
首先我们来看：
    function func_0293(var arg0) {
            var var0 = 0x00;
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x03;
            if (storage[keccak256(memory[0x00:0x40])] 0，之后会对传入的参数arg0进行判定，如果该参数!=storage[1]的数，则进入，此时会赋予storage[3]为0，并将storage[2]为1
。
否则的话，storage[3]+=var0*storage[2]（这里var0位传入的以太币数量）
我们下面看另一个函数：
    function func_03B2(var arg0) {
            var var0 = 0x00;
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x03;
            if (storage[keccak256(memory[0x00:0x40])] 0），之后如果传入参数0，则storage[0]赋值为msg.sender()、storage[1]=
storage[3]（将用户token赋值给storage[1]）；
或者使得storage[arg0] = storage[3]，并还原storage[3]=0。
下面我们来看空投函数。一般空投函数都是用来给用户送钱的。
    function airdrop() {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x04;
            if (storage[keccak256(memory[0x00:0x40])] != 0x00) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x04;
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x03;
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = storage[temp0] + 0x01;
        }
该函数要求用户的storage[4]不等于0，而这里的storage[4]应该就是记录该用户是否已经调用过空投函数（毕竟用户不能一直调用，否则不是薅羊毛了吗hhh）。
然而往下看我们会发现，调用了该函数后系统似乎并没有对storage[4]初始化，而是用storage[3]覆盖了storage[4]，并且将storage[3]++。
这里其实有一个点可以利用，如果它没有对storage[4]进行操作，那么storage[4]就永远为0，此时该函数可以一直被调用，从而调用100000次令storage[3]=100000，从而获得flag。不过这个方法太笨重了，非常不切实际，所以我们还是正常去做。时间花费过多，难度很大。
    function func_0860(var arg0) {
            if (msg.sender != storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }
            storage[0x01] = arg0;
        }
该函数判断storage[5]是否为msg.sender，并将storage[1]任意赋值。
    function func_08C6(var arg0) {
            if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }
            storage[0x02] = arg0;
        }
同上函数，storage[0]需要==msg.sender，之后storage[2]赋值为任意值。
    function gift(var arg0) returns (var arg0) {
            memory[0x20:0x40] = 0x04;
            memory[0x00:0x20] = arg0;
            return storage[keccak256(memory[0x00:0x40])];
        }
gift函数传入arg0，这里arg0应该是一个地址，然后就可以返回该地址对应的storage[4]的值。
    function balance(var arg0) returns (var arg0) {
            memory[0x20:0x40] = 0x03;
            memory[0x00:0x20] = arg0;
            return storage[keccak256(memory[0x00:0x40])];
        }
而balance返回对应地址的storage[3]的值 。
    function deposit() {
            var var0 = 0x00;
            var var1 = 0x0de0b6b3a7640000;
            var var2 = msg.value;
            if (!var1) { assert(); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x03;
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = storage[temp0] + var2 / var1;
        }
而`deposit`函数令storage[3]+value，即给合约的token充钱。
那么我们怎么利用上述的函数来使得我们的合约token>1000000呢？
我们注意到里面唯一能大量修改代币的函数为`func_0293`中的else函数。如下图所示。
我们在这里给一个解决方案供读者参考。
  * deposit() 传入value=1 ether
  * func_03B2(0)
  * func_08C6(1000000)
  * deposit() 传入value=2 ether
  * func_0293(1)
  * payforflag(b64email)
下面我们来走一遍相关函数，并查看相关storage的数据变化情况。
首先初始化堆栈情况，如下图所示：
首先调用deposit()，传入1 ether(1000000000000000000)：
之后调用 func_03B2(0)，传入参数0：
函数要求token>0，我们满足，于是进入函数。
arg0=0所以进入第一个条件，最终得到：
之后为func_08C6(1000000)。
满足条件，进入函数，得到：
调用deposit() 传入value=2 ether：
最后调用：func_0293(1)
storage[0x01]=1，arg0参数=1，传入value=2，所以进行下面的条件语句：
所以`storage[temp0] = storage[temp0] + var0 * storage[0x02]`=`storage[3] =
storage[3] + 2 * 1000000;`
即我们得到storage[3]=2000002>1000000。满足题目条件，此时可以调用flag函数获取flag了。
为了验证自己是否真正调用获取flag函数，我们可以到event事件中查看是否调用成功：