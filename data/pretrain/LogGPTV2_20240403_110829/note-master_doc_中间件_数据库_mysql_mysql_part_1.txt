---
tags: ['数据库']
---
# MYSQL
## 逻辑架构
![MySQL逻辑架构](/assets/屏幕截图%202020-08-23%20142118.png)
取数据和发数据的流程：
1. 获取一行，写到 net_buffer 中。这块内存的大小是由参数 net_buffer_length 定义的，默认是 16k
2. 重复获取行，直到 net_buffer 写满，调用网络接口发出去
3. 如果发送成功，就清空 net_buffer，然后继续取下一行，并写入 net_buffer
4. 如果发送函数返回 EAGAIN 或 WSAEWOULDBLOCK，就表示本地网络栈（socket send buffer）写满了，进入等待。直到网络栈重新可写，再继续发送
## 日志机制
在数据更新写日志的时候，是先预提交写 redolog 和写 binlog，提交事务后再把redolog改成提交状态，要两阶段提交写的原因就是为了避免极端情况下两个日志的数据不一致
### redo log
- innodb 的日志
- 记录的是修改后的值 无论是否提交都会被记录
- 先写日志 再刷磁盘
作用是在数据库崩溃时，用来恢复事务提交之前的数据修改，是一个循环写的日志文件，不断地被填写，当写满时，重新从开头开始覆盖
InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘，除此之外，redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动写盘，另一种是，并行的事务提交的时候，顺带将这个事务的 redo log buffer 持久化到磁盘
控制 redo log 的写入策略（innodb_flush_log_at_trx_commit 参数）：
- 设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 
- 设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘
- 设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache
组提交：
日志逻辑序列号（log sequence number，LSN），单调递增的，用来对应 redo log 的一个个写入点。每次写入长度为 length 的 redo log， LSN 的值就会加上 length
通过一次性写入多个事务的 redo log，来提升写入效率
### undo log
- innodb 的日志
- 事务发生前的数据版本
- 用于回滚
- 提供MVVC下的读 即非锁定读
作用是在事务回滚时，用来撤销已经提交的事务所做的数据修改。undo log是在内存中缓存的
### bin log
- 可用于主从复制
- 二进制形式记录所有修改数据库的操作
- 可用于数据快照还原
- 提交事务记录binlog 定时刷磁盘
事务执行时，binlog 是先写入到线程自己的 binlog cache 中，事务提交的时候，执行器把 binlog cache 里的完整事务写入到 binlog 中（先 write 到操作系统的 page cache，后再 fsync 到磁盘上）
- sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync
- sync_binlog=1 的时候，表示每次提交事务都会执行 fsync
- sync_binlog=N(N>1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync
## 锁机制
- MyISAM采用表级锁(table-level locking)。
- InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁
对比
- 表级锁： MySQL中锁定 粒度最大 的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM和 InnoDB引擎都支持表级锁。
- 行级锁： MySQL中锁定 粒度最小的一种锁，只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。
MySQL的锁释放是在COMMIT或者ROLLBACK时释放的。隐式锁定是存储引擎根据隔离级别自动进行，但也可以进行显式锁定：
```sql
SELECT ... LOCK IN SHARE MODE; -- 任何时候都不要手动加锁
```
### 全局锁
MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)，锁了之后整个数据库全局就是只读
mysqldump 在备份时使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图，但只有支持事务的引擎才能用这个参数
### 表级锁
- lock tables … read/write：使用了之后在本线程之内只能操作这条语句指定的表及读写类型
- 元数据锁（MDL）：主要防止修改表结构的同时其他事务修改数据
为了防止拿不到元数据锁一直等待：一些 MySQL 的分支支持NOWAIT/WAIT n 这个语法，等待一段时间拿不到锁就终止 DDL 语句
MySQL 5.6 后支持了 online ddl 可以不阻塞读写：
1. 拿MDL写锁
2. 降级成MDL读锁
3. 真正做DDL
4. 升级成MDL写锁
5. 释放MDL锁
### 行锁
InnoDB 事务中，行锁是在需要的时候才加上，要等到事务结束时才释放
为了解决死锁，有两种策略：
1. 获取锁时直接进入等待，直到超时，使用参数innodb_lock_wait_timeout，但是这个时间很难控制
2. 检测到死锁时，自动中断，每次获取一个行锁都要判断会不会因为自己的加入而导致死锁，如果有热点数据，每个线程都要去检测一下，这容易导致CPU飙高
所以死锁最好的解决方案应该是从业务上来解决，保证业务操作不会产生死锁，另外一个较次一点的方案是控制并发度，这样也不会导致CPU飙高
### 间隙锁
锁定一个范围，不包括记录本身 防止这个区间的数据插入 通过锁定一个范围来避免其他并发事务的修改，从而解决[幻读](/中间件/数据库/数据库系统/事务管理/事务.md#幻读)问题
间隙锁是在可重复读隔离级别下才会生效的。间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的
### Next-key lock
行锁 + 间隙锁 = 锁定一个范围，包含记录本身
### Insert Intention Locks
插入意向锁 insert前执行
### AUTO-INC Locks
自增锁
### Predicate Locks 
谓词锁
### 锁相关统计信息
```sql
show status like '%innodb_row_lock%';
```
- Innodb_row_lock_current_waits：当前正在等待锁的事务数量
- Innodb_row_lock_time：从系统启动到现在发生锁定的总时间
- Innodb_row_lock_time_avg：从系统启动到现在发生锁等待的平均时间
- Innodb_row_lock_time_max：从系统启动到现在发生锁等待的最大时间
- Innodb_row_lock_waits：从系统启动到现在发生等待的次数
```sql
SHOW ENGINE INNODB STATUS; -- 关注结果中 TRANSACTIONS 段落
```
### 锁、事务相关的表
当前事务执行情况：
- [INFORMATION_SCHEMA.INNODB_TRX](https://dev.mysql.com/doc/refman/8.0/en/information-schema-innodb-trx-table.html)
锁信息：
- [PERFORMANCE.DATA_LOCKS](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-data-locks-table.html)
锁等待信息：
- [PERFORMANCE.DATA_LOCKS_WAITS](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-data-lock-waits-table.html)
#### 事务与锁情况分析
```sql
SELECT
  waiting_trx_id,
  waiting_pid,
  waiting_query,
  blocking_trx_id,
  blocking_pid,
  blocking_query
FROM sys.innodb_lock_waits;
```
### insert 相关的锁
- insert … select 在可重复读隔离级别下，这个语句会给 select 的表里扫描到的记录和间隙加读锁
- insert 语句如果出现唯一键冲突，会在冲突的唯一值上加共享的 next-key lock(S 锁)
- insert 和 select 的对象是同一个表，则有可能会造成循环写入，所以这种语句在执行会创建一个临时表
## [MVCC](/中间件/数据库/数据库系统/事务管理/事务.md#多版本并发控制)
## 用户及权限管理
- 创建一个能在主机登录的用户
```sql
create user 'user2'@'%' identified by '123';
```
- 授予权限
```sql
grant all on *.* to 'user2'@'%';
```
grant 语句会同时修改数据表和内存，判断权限的时候使用的是内存数据，如果直接操作了系统权限表，此时数据表和内存的数据就会不一致，此时就需要 flush privileges
## 事务
MySQL使用一个变量控制是否采用自动提交：
```sql