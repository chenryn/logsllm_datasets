# Chapter 11: Insecure Direct Object References (IDOR)

## Identifying and Exploiting IDORs

### Assigning an Application ID
Even if the application does not explicitly request one, it is beneficial to assign an ID. This can help in identifying and tracking specific instances of the application.

### Detecting Blind IDORs
Be vigilant for blind IDORs, which may not be immediately apparent but can still pose a security risk.

### Modifying Request Methods and File Types
- **Change the Request Method:** Experiment with different HTTP methods (e.g., GET, POST, PUT, DELETE) to see if they reveal any vulnerabilities.
- **Change the Requested File Type:** Try altering the file type in your requests to see if the application handles them differently.

### Escalating and Automating the Attack
- **Escalating the Attack:** Once a vulnerability is identified, explore ways to escalate the attack to gain more control or access.
- **Automating the Attack:** Use tools to automate the exploitation process, making it more efficient and effective.

### Finding Your First IDOR
Follow the steps above to identify and exploit your first IDOR.

---

# Chapter 11: SQL Injection

## Understanding and Preventing SQL Injections

### Mechanisms
SQL injection occurs when an attacker can inject malicious SQL code into a query, potentially leading to data theft, data corruption, or even complete system compromise.

### Injecting Code into SQL Queries
- **Classic SQL Injections:** Look for places where user input is directly included in SQL queries.
- **Second-Order SQL Injections:** These occur when the injected payload is stored and later executed by the application.

### Prevention
- **Use Prepared Statements and Parameterized Queries:** These prevent the execution of malicious SQL code.
- **Input Validation and Sanitization:** Ensure that all user input is validated and sanitized before being used in SQL queries.

### Hunting for SQL Injections
1. **Look for Classic SQL Injections:** Identify and test for classic SQL injection points.
2. **Look for Blind SQL Injections:** Test for blind SQL injections where the response is not directly visible.
3. **Exfiltrate Information Using SQL Injections:** Use SQL injections to extract sensitive information from the database.
4. **Look for NoSQL Injections:** Identify and test for NoSQL injection vulnerabilities.

### Escalating the Attack
- **Learn About the Database:** Gather information about the database structure and content.
- **Gain a Web Shell:** Use SQL injection to gain a web shell on the server.

### Automating SQL Injections
Use automated tools to speed up the process of finding and exploiting SQL injection vulnerabilities.

### Finding Your First SQL Injection
Follow the steps above to identify and exploit your first SQL injection vulnerability.

---

# Chapter 12: Race Conditions

## Understanding and Preventing Race Conditions

### Mechanisms
A race condition occurs when the behavior of a system depends on the sequence or timing of uncontrollable events.

### When a Race Condition Becomes a Vulnerability
Race conditions can become vulnerabilities if they allow attackers to perform unauthorized actions or manipulate the system's state.

### Prevention
- **Synchronize Access to Shared Resources:** Use synchronization mechanisms to ensure that only one process can access a resource at a time.
- **Implement Timeouts and Retries:** Add timeouts and retries to handle cases where a race condition might occur.

### Hunting for Race Conditions
1. **Find Features Prone to Race Conditions:** Identify features that involve concurrent operations.
2. **Send Simultaneous Requests:** Send multiple requests simultaneously to test for race conditions.
3. **Check the Results:** Analyze the results to determine if a race condition occurred.
4. **Create a Proof of Concept:** Develop a proof of concept to demonstrate the vulnerability.

### Escalating Race Conditions
Explore ways to escalate the impact of a race condition, such as gaining higher privileges or causing system instability.

### Finding Your First Race Condition
Follow the steps above to identify and exploit your first race condition.

---

# Chapter 13: Server-Side Request Forgery (SSRF)

## Understanding and Preventing SSRFs

### Mechanisms
SSRF occurs when an attacker can cause the server to make requests to an arbitrary URL, potentially leading to internal network scanning, metadata extraction, and other attacks.

### Prevention
- **Validate and Sanitize Input:** Ensure that all URLs are validated and sanitized before being used.
- **Use Allowlists and Blocklists:** Implement allowlists and blocklists to restrict the URLs that can be accessed.

### Hunting for SSRFs
1. **Spot Features Prone to SSRFs:** Identify features that make external requests based on user input.
2. **Provide Potentially Vulnerable Endpoints with Internal URLs:** Test these endpoints with internal URLs to see if they can be accessed.
3. **Check the Results:** Analyze the results to determine if an SSRF vulnerability exists.

### Bypassing SSRF Protection
- **Bypass Allowlists:** Find ways to bypass allowlist protections.
- **Bypass Blocklists:** Find ways to bypass blocklist protections.

### Escalating the Attack
- **Perform Network Scanning:** Use SSRF to scan the internal network.
- **Pull Instance Metadata:** Extract sensitive metadata from cloud instances.
- **Exploit Blind SSRFs:** Use blind SSRFs to exfiltrate data.
- **Attack the Network:** Use SSRF to attack other systems on the network.

### Finding Your First SSRF
Follow the steps above to identify and exploit your first SSRF vulnerability.

---

# Chapter 14: Insecure Deserialization

## Understanding and Preventing Insecure Deserialization

### Mechanisms
Insecure deserialization occurs when untrusted data is deserialized, potentially leading to remote code execution, denial of service, or other attacks.

### Prevention
- **Avoid Deserializing Untrusted Data:** Only deserialize data from trusted sources.
- **Use Safe Serialization Formats:** Use serialization formats that are less prone to abuse, such as JSON.

### Hunting for Insecure Deserialization
- **Identify Deserialization Points:** Look for places where data is deserialized.
- **Test with Malicious Payloads:** Submit malicious payloads to test for deserialization vulnerabilities.

### Escalating the Attack
Explore ways to escalate the impact of an insecure deserialization vulnerability, such as gaining remote code execution.

### Finding Your First Insecure Deserialization
Follow the steps above to identify and exploit your first insecure deserialization vulnerability.

---

# Chapter 15: XML External Entity (XXE)

## Understanding and Preventing XXEs

### Mechanisms
XXE occurs when an XML parser processes external entities, potentially leading to sensitive data exposure, denial of service, or other attacks.

### Prevention
- **Disable External Entities:** Configure XML parsers to disable external entity processing.
- **Use Secure XML Parsers:** Use XML parsers that are designed to prevent XXE attacks.

### Hunting for XXEs
1. **Find XML Data Entry Points:** Identify places where XML data is processed.
2. **Test for Classic XXE:** Submit payloads to test for classic XXE vulnerabilities.
3. **Test for Blind XXE:** Test for blind XXE vulnerabilities where the response is not directly visible.
4. **Embed XXE Payloads in Different File Types:** Test with different file types to see if the application handles them differently.
5. **Test for XInclude Attacks:** Test for XInclude attacks, which can be used to include external XML files.

### Escalating the Attack
- **Reading Files:** Use XXE to read sensitive files on the server.
- **Launching an SSRF:** Use XXE to launch SSRF attacks.
- **Using Blind XXEs:** Use blind XXEs to exfiltrate data.
- **Performing Denial-of-Service Attacks:** Use XXE to perform denial-of-service attacks.
- **More About Data Exfiltration Using XXEs:** Explore additional techniques for data exfiltration using XXEs.

### Finding Your First XXE
Follow the steps above to identify and exploit your first XXE vulnerability.

---

# Chapter 16: Template Injection

## Understanding and Preventing Template Injections

### Mechanisms
Template injection occurs when an attacker can inject malicious template code, potentially leading to remote code execution or other attacks.

### Template Engines
- **PHP:** PHP-based template engines like Twig.
- **Java:** Java-based template engines like FreeMarker.

### Prevention
- **Sanitize User Input:** Ensure that all user input is sanitized before being used in templates.
- **Use Context-Aware Escaping:** Use context-aware escaping to prevent template injection.

### Hunting for Template Injection
1. **Look for User-Input Locations:** Identify places where user input is used in templates.
2. **Detect Template Injection by Submitting Test Payloads:** Submit test payloads to detect template injection.
3. **Determine the Template Engine in Use:** Identify the template engine being used to tailor your payloads.

### Escalating the Attack
- **Searching for System Access via Python Code:** Use Python code to gain system access.
- **Escaping the Sandbox by Using Python Built-in Functions:** Use Python built-in functions to escape the sandbox.
- **Submitting Payloads for Testing:** Submit payloads to test for template injection.
- **Automating Template Injection:** Use automated tools to speed up the process of finding and exploiting template injection vulnerabilities.

### Finding Your First Template Injection
Follow the steps above to identify and exploit your first template injection vulnerability.

---

# Chapter 17: Application Logic Errors and Broken Access Control

## Understanding and Preventing Application Logic Errors and Broken Access Control

### Application Logic Errors
Application logic errors occur when the application's business logic is flawed, potentially leading to unauthorized actions or data access.

### Broken Access Control
Broken access control occurs when the application fails to properly enforce access controls, allowing unauthorized users to access sensitive data or perform restricted actions.

### Exposed Admin Panels
Admin panels that are not properly secured can be a significant security risk.

### Directory Traversal Vulnerabilities
Directory traversal vulnerabilities allow attackers to access files and directories outside of the intended scope.

### Prevention
- **Review and Test Business Logic:** Regularly review and test the application's business logic.
- **Enforce Access Controls:** Ensure that access controls are properly enforced.
- **Secure Admin Panels:** Secure admin panels with strong authentication and authorization.
- **Prevent Directory Traversal:** Implement measures to prevent directory traversal attacks.

### Hunting for Application Logic Errors and Broken Access Control
1. **Learn About Your Target:** Understand the application's functionality and architecture.
2. **Intercept Requests While Browsing:** Use tools like Burp Suite to intercept and modify requests.
3. **Think Outside the Box:** Think creatively to identify potential vulnerabilities.

### Escalating the Attack
Explore ways to escalate the impact of application logic errors and broken access control, such as gaining higher privileges or accessing sensitive data.

### Finding Your First Application Logic Error or Broken Access Control
Follow the steps above to identify and exploit your first application logic error or broken access control vulnerability.

---

# Chapter 18: Remote Code Execution (RCE)

## Understanding and Preventing RCE

### Mechanisms
RCE occurs when an attacker can execute arbitrary code on the server, potentially leading to complete system compromise.

### Code Injection
Code injection occurs when an attacker can inject and execute malicious code.

### File Inclusion
File inclusion vulnerabilities allow attackers to include and execute arbitrary files.

### Prevention
- **Sanitize User Input:** Ensure that all user input is sanitized before being used.
- **Use Safe Functions:** Use safe functions and libraries to prevent code injection.
- **Restrict File Inclusion:** Restrict file inclusion to trusted directories and files.

### Hunting for RCEs
1. **Gather Information About the Target:** Understand the application's functionality and architecture.
2. **Identify Suspicious User Input Locations:** Look for places where user input is used in a way that could lead to code execution.
3. **Submit Test Payloads:** Submit test payloads to detect RCE vulnerabilities.
4. **Confirm the Vulnerability:** Verify that the vulnerability can be exploited.

### Escalating the Attack
- **Bypassing RCE Protection:** Find ways to bypass RCE protection mechanisms.

### Finding Your First RCE
Follow the steps above to identify and exploit your first RCE vulnerability.

---

# Chapter 19: Same-Origin Policy (SOP) Vulnerabilities

## Understanding and Preventing SOP Bypasses

### Mechanisms
SOP vulnerabilities occur when the same-origin policy is bypassed, potentially allowing cross-site scripting (XSS), cross-site request forgery (CSRF), and other attacks.

### Exploiting Cross-Origin Resource Sharing (CORS)
CORS misconfigurations can allow attackers to bypass the same-origin policy.

### Exploiting `postMessage()`
Improper use of `postMessage()` can allow attackers to bypass the same-origin policy.

### Exploiting JSON with Padding (JSONP)
JSONP can be used to bypass the same-origin policy if not properly secured.

### Bypassing SOP by Using XSS
XSS can be used to bypass the same-origin policy and perform various attacks.

### Hunting for SOP Bypasses
1. **Determine If SOP Relaxation Techniques Are Used:** Check if the application uses CORS, `postMessage()`, or JSONP.
2. **Find CORS Misconfiguration:** Identify and test for CORS misconfigurations.
3. **Find `postMessage` Bugs:** Identify and test for `postMessage` bugs.
4. **Find JSONP Issues:** Identify and test for JSONP issues.
5. **Consider Mitigating Factors:** Consider any mitigating factors that might affect the severity of the vulnerability.

### Escalating the Attack
Explore ways to escalate the impact of SOP bypasses, such as performing CSRF or XSS attacks.

### Finding Your First SOP Bypass Vulnerability
Follow the steps above to identify and exploit your first SOP bypass vulnerability.

---

# Chapter 20: Single-Sign-On (SSO) Security Issues

## Understanding and Preventing SSO Security Issues

### Mechanisms
SSO security issues can arise from various mechanisms, including cookie sharing, Security Assertion Markup Language (SAML), and OAuth.

### Cookie Sharing
Cookie sharing can lead to session hijacking and other security issues.

### Security Assertion Markup Language (SAML)
SAML vulnerabilities can allow attackers to bypass authentication and gain unauthorized access.

### OAuth
OAuth vulnerabilities can allow attackers to steal tokens and gain unauthorized access.

### Hunting for Subdomain Takeovers
1. **List the Target’s Subdomains:** Identify all subdomains associated with the target.
2. **Find Unregistered Pages:** Look for subdomains that are not registered.
3. **Register the Page:** Register the unregistered subdomain to take it over.

### Monitoring for Subdomain Takeovers
Set up monitoring to detect and respond to subdomain takeovers.

### Hunting for SAML Vulnerabilities
1. **Locate the SAML Response:** Identify where the SAML response is generated and transmitted.
2. **Analyze the Response Fields:** Analyze the SAML response fields for vulnerabilities.
3. **Bypass the Signature:** Find ways to bypass the SAML signature.
4. **Re-encode the Message:** Re-encode the SAML message to exploit the vulnerability.

### Hunting for OAuth Token Theft
Identify and test for OAuth token theft vulnerabilities.

### Escalating the Attack
Explore ways to escalate the impact of SSO security issues, such as gaining unauthorized access to protected resources.

### Finding Your First SSO Bypass
Follow the steps above to identify and exploit your first SSO bypass vulnerability.

---

# Chapter 21: Information Disclosure

## Understanding and Preventing Information Disclosure

### Mechanisms
Information disclosure occurs when sensitive information is exposed, potentially leading to data breaches and other security issues.

### Prevention
- **Sanitize Error Messages:** Ensure that error messages do not reveal sensitive information.
- **Restrict Access to Sensitive Files:** Restrict access to sensitive files and directories.
- **Use Secure Configuration Settings:** Use secure configuration settings to prevent information disclosure.

### Hunting for Information Disclosure
1. **Attempt a Path Traversal Attack:** Test for path traversal vulnerabilities.
2. **Search the Wayback Machine:** Use the Wayback Machine to find historical versions of the site.
3. **Search Paste Dump Sites:** Search paste dump sites for leaked information.
4. **Reconstruct Source Code from an Exposed .git Directory:** Reconstruct source code from an exposed `.git` directory.
5. **Find Information in Public Files:** Look for sensitive information in publicly accessible files.

### Escalating the Attack
Explore ways to escalate the impact of information disclosure, such as using the disclosed information to gain further access.

### Finding Your First Information Disclosure
Follow the steps above to identify and exploit your first information disclosure vulnerability.

---

# Part IV: Expert Techniques

## Chapter 22: Conducting Code Reviews

### White-Box vs. Black-Box Testing
- **White-Box Testing:** Involves examining the source code to identify vulnerabilities.
- **Black-Box Testing:** Involves testing the application without access to the source code.

### The Fast Approach: `grep` Is Your Best Friend
Use `grep` to quickly search for dangerous patterns in the code.

### Dangerous Patterns
- **Leaked Secrets and Weak Encryption:** Look for hard-coded secrets and weak encryption algorithms.
- **New Patches and Outdated Dependencies:** Check for new patches and outdated dependencies.
- **Developer Comments:** Review developer comments for potential vulnerabilities.
- **Debug Functionalities, Configuration Files, and Endpoints:** Look for debug functionalities, configuration files, and endpoints that may be vulnerable.

### The Detailed Approach
- **Important Functions:** Focus on important functions that handle sensitive data or critical operations.
- **User Input:** Ensure that all user input is properly validated and sanitized.

### Exercise: Spot the Vulnerabilities
Practice identifying vulnerabilities in sample code.

---

## Chapter 23: Hacking Android Apps

### Setting Up Your Mobile Proxy
Configure a mobile proxy to intercept and modify app traffic.

### Bypassing Certificate Pinning
Learn how to bypass certificate pinning to intercept HTTPS traffic.

### Anatomy of an APK
Understand the structure and components of an APK file.

### Tools to Use
- **Android Debug Bridge (ADB):** A command-line tool for interacting with Android devices.
- **Android Studio:** An integrated development environment for Android apps.
- **Apktool:** A tool for reverse engineering and modifying APK files.
- **Frida:** A dynamic instrumentation toolkit for developers, reverse engineers, and security researchers.
- **Mobile Security Framework (MobSF):** An automated, all-in-one mobile application security testing framework.

### Hunting for Vulnerabilities
- **Perform Recon:** Gather information about the app.
- **Test for Common Vulnerabilities:** Test for common vulnerabilities such as insecure storage, insecure communication, and improper access control.

---

## Chapter 24: API Hacking

### What Are APIs?
APIs (Application Programming Interfaces) allow different software applications to communicate with each other.

### Types of APIs
- **REST APIs:** Representational State Transfer APIs.
- **SOAP APIs:** Simple Object Access Protocol APIs.
- **GraphQL APIs:** A query language for APIs.

### API-Centric Applications
Many modern applications are built around APIs, making them a prime target for security testing.

### Hunting for API Vulnerabilities
1. **Perform Recon:** Gather information about the API.
2. **Testing for Broken Access Control and Info Leaks:** Test for broken access control and information leaks.
3. **Testing for Rate-Limiting Issues:** Test for rate-limiting issues.
4. **Testing for Technical Bugs:** Test for technical bugs such as injection vulnerabilities and deserialization vulnerabilities.

---

## Chapter 25: Automatic Vulnerability Discovery Using Fuzzers

### What Is Fuzzing?
Fuzzing is a technique for automatically discovering vulnerabilities by providing invalid, unexpected, or random data as input to a computer program.