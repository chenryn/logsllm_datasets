User: Please use Python or other programming languages to write a program to process CSV files to realize reading, processing, modifying and exporting operations.
Assistant: The following is a sample program for Python to process CSV files to achieve reading, processing, modification and export operations: ```python import csv # Read CSV files with open('input.csv', 'r', encoding='utf- 8') as f: reader = csv.reader(f) header = next(reader) # Get header rows = list(reader) # Get data rows # Process CSV data new_rows = [] for row in rows: # Add gender 1 and 2 in are converted to male and female if row[2] == '1': row[2] = 'male' elif row[2] == '2': row[2] = 'female' new_rows. append(row) # modify CSV data new_rows[0][1] = 'new name' # export CSV file with open('output.csv', 'w', encoding='utf-8', newline='') as f: writer = csv.writer(f) writer.writerow(header) # Write header writer.writerows(new_rows) # Write data row``` This sample program uses the csv module in the Python standard library to implement CSV File read, process, modify and export operations. The specific steps are as follows: 1. Use the open function to open the CSV file, set the file open mode to read mode ('r') and specify the encoding method ('utf-8'). 2. Use the csv.reader function to read the contents of the CSV file, get the header and data rows, and store them in variables. 3. Perform data processing operations, such as converting 1 and 2 in gender to male and female, and store the processed results in a new list. 4. Modify the CSV data, for example, modify the second column of the first row to a new name. 5. Use the open function to open the CSV file, set the file open mode to write mode ('w'), specify the encoding method ('utf-8'), and set the newline='' parameter to avoid writing blank lines. 6. Use the csv.writer function to create a writer, and write the table header and data rows in sequence. Note that you need to use the writerows function to write multiple rows of data.