# Covert Channels in TCP and IP Headers

**Author:** Drew Hintz  
**Contact:** [PI:EMAIL](mailto:PI:EMAIL)  
**Website:** [http://guh.nu](http://guh.nu)

---

## Overview
- **Who are you? Who are they?**
- **Definitions**
- **Analysis of some covert channels**
- **Attack against timestamp covert channel**
- **Detection and prevention**
- **New covert channel tool**

---

## Who Are You?
- **Need for Covert Communication:** 
  - Traditional encryption is not always sufficient.
  - **Why Not Just Encrypt?**
    - Encryption may be illegal or restricted.
    - Key escrow may be mandatory.
    - Government surveillance (US & UK).
    - Risk of imprisonment in countries like China.
    - Employer scrutiny.
    - Command and control for malicious code.

---

## Who are "They"?
- **Casual Observer:**
  - Monitors general traffic.
  - Uses automated systems to filter keywords.
  - Limited ability to maintain state on traffic.
- **Dedicated Observer:**
  - Focuses on specific suspects.
  - Closely monitors all aspects of traffic.
  - Has extensive resources to maintain state.

---

## How Covert is Covert Enough?
- **Semi-Covert: Fooling the Casual Observer**
  - Traffic appears unusual if examined.
  - Assumes minimal scrutiny.
  - Detection requires low to moderate effort.
- **Truly Covert: Fooling Everyone**
  - Traffic appears completely normal.
  - Works even if the method is known.
  - Detection is as hard as breaking the underlying cryptography.

---

## Types of Covert Channels
- **Extra Communication to a Host:**
  - Hides the fact that data is being encrypted.
  - Uses cover traffic to embed covert messages.
- **Hiding the Fact of Communication:**
  - Prevents the association with a host from being known.

---

## Extra Communication to a Host
- **Use Case:**
  - Hide encryption by embedding messages in permissible traffic.
- **Method:**
  - Sender embeds the message in outbound traffic.
  - Receiver analyzes the traffic to retrieve the message.

---

## Finding a Good Covert Channel
- **Identify Natural Random Data:**
  - Examples: Initial Sequence Numbers, timing of network transmissions.
  - Replace random data with an encrypted message.

---

## Example: Simple Covert Channel
- **Scenario:**
  - Alice sends a secret message to Bob.
  - Alice FTPs old vacation pictures to Bob.
  - Alice encodes the message in the padding of TCP segment headers.
  - Bob retrieves the message from the padding.

---

## Unseen Path of Communication
- **Use Case:**
  - Avoid association with a closely scrutinized node.
  - Access forbidden material or engage in malicious activity.
- **Method:**
  - Use an intermediary node to relay information.

---

## Finding a Good Channel
- **Use Hard-to-Monitor Nodes:**
  - Mixes, onion routing.
  - Prevents association of incoming and outgoing traffic.
  - Combines with extra communication covert channels.

---

## Example: Unseen Path
- **Scenario:**
  - Alice and Bob can make requests to a small web server.
  - Alice transmits a one by sending heavy traffic.
  - Alice transmits a zero by not making any requests.
  - Bob measures latencies to decode the message.

---

## Evaluating a Covert Channel
- **Criteria:**
  - Bandwidth.
  - Ease of detection.
  - Permissibility.
  - Prevention.
  - Implementation difficulty.
  - Special cases or restrictions.

---

## Focus: Extra Communication Covert Channels
- **Relevance:**
  - Useful when encryption is restricted.
  - Hidden path research is well-covered by anonymity researchers.
- **TCP/IP Headers:**
  - Frequent occurrence on networks.
  - Can piggyback on legitimate traffic.

---

## TCP URG Pointer
- **Description:**
  - Points to the end of urgent data.
  - Set the 16-bit URG pointer to the transmitted value without setting the URG bit.
  - Restrict the URG pointer to be near sequence numbers for stealth.

---

## URG Pointer Evaluation
- **Bandwidth:**
  - 16 bits per TCP segment.
- **Detection:**
  - Easy, as the URG pointer is rarely used without the URG bit.
- **Prevention:**
  - Moderate, rewrite the pointer if the URG bit is not set.
- **Permissibility:**
  - May be cleared by traffic normalizers and firewalls.
- **Implementation:**
  - Easy, replace bits in transit packets.
- **Special Cases:**
  - Cannot be used in segments where the URG pointer is actually used.

---

## Padding & Reserved Bits
- **Similar to URG:**
  - Lower bandwidth.
  - Padding is easy to detect as it is usually set to zeros.
  - Padding and reserved bits may be rewritten by routers.

---

## IP Type of Service (ToS)
- **Description:**
  - Indicates quality of service requested.
  - Set the ToS byte to your data.
  - Modulate only the Delay bit for stealth.

---

## ToS Evaluation
- **Bandwidth:**
  - 1 byte per IP datagram (entire ToS field).
  - 1 bit per IP datagram (only delay bit).
- **Detection:**
  - Easy if using the entire ToS field.
  - Moderate if using only the delay bit.
- **Permissibility:**
  - Passed through tested equipment.
- **Prevention:**
  - Easy, rewrite all ToS bits.
- **Implementation:**
  - Easy, replace bits in transit packets.
- **Special Cases:**
  - Slight alteration in traffic handling, but not noticeable.

---

## Initial Sequence Number (ISN)
- **Description:**
  - Used to index TCP data.
  - Should be random to prevent session hijacking.
  - Choose ISNs to be the message to be transmitted.

---

## ISN Evaluation
- **Bandwidth:**
  - Low, 32 bits per TCP connection.
- **Detection:**
  - Very difficult.
- **Prevention:**
  - Difficult, requires proxying all TCP connections.
- **Permissibility:**
  - Passes through most networks, except some proxies.
- **Implementation:**
  - Moderately easy, replace the function generating ISNs.
- **Special Cases:**
  - Some OSs (e.g., Windows 98) do not choose random ISNs.

---

## Timestamp Low-bit Modulation
- **Description:**
  - TCP option.
  - Modulate the low bit of the TCP timestamp to convey data.
  - Presented by Giffin et al. at PET2002.
  - Low bit is random at low bandwidth due to complex timings.

---

## Timestamp Evaluation
- **Bandwidth:**
  - Low, one bit per TCP segment.
- **Detection:**
  - Very difficult at low bandwidth.
- **Prevention:**
  - Moderate, strip out the TCP timestamp option.
- **Permissibility:**
  - Permitted on most networks.
- **Implementation:**
  - Moderate, ensure timestamps are monotonically increasing.
  - Slows down fast connections while sending covert data.

---

## Timestamp Detection
- **Fast Connection:**
  - Algorithm: Count different and total timestamps, calculate the ratio.
  - Ratio converges to about 1.94 if a covert channel is used.
- **Slow Connection:**
  - Record low bits, perform a randomness test.
  - If very random, a covert channel is likely being used.

---

## Detection and Prevention
- **Anomalous Traffic Detection:**
  - Some IDSs can detect, but it can be noisy.
- **Traffic Normalization:**
  - Tools like `norm` and `BSD pf`.
  - Use pump methods to defeat timing channels.
- **Limitations:**
  - Cannot close all covert channels, only reduce bandwidth and ease of use.

---

## Implementation Issues
- **Encryption:**
  - Essential for secure covert channels.
  - Assume the method is well-known.
  - Ensure the same ciphertext is not transmitted multiple times.
- **Data Transmission:**
  - Send checksums to verify data transmission.
  - Use unmodified portions of the header and data as a nonce.
  - Implement more advanced protocols for reliability and bandwidth.

---

## Covert Channel Tool
- **Components:**
  - Sending: Linux Kernel Module modifying outgoing TCP/IP traffic.
  - Receiving: Sniffs incoming traffic using `libpcap`.

---

## Implemented Covert Channels
- **Initial Sequence Number**
- **TCP Timestamp Low-bit Modulation**
- **Urgent Pointer**
- **IP Type of Service**
- **TCP Reserved Bits**

---

## Data Indexing
- **Sequential Transmission:**
  - SHA of unmodified portions used as an index into the data.

---

## Future Work
- **User Interface Improvements**
- **Built-in Encryption**
- **Additional Covert Channel Options**
- **Analyze Router and IDS Handling**
- **Implement Robust Data Transmission Protocols**

---

## Questions?
- **Get the Goods:**
  - [http://guh.nu/projects/cc/](http://guh.nu/projects/cc/)
- **Shameless Plug:**
  - **OSVDB (Open Source Vulnerability Database)**
    - [http://www.osvdb.org](http://www.osvdb.org)

---