# Extending the Software-Defined Network Boundary

**Authors:**
- Oliver Michel
- Michael Coughlin
- Eric Keller

**Affiliation:**
- University of Colorado Boulder
- PI: [EMAIL]

## Abstract
Software-Defined Networking (SDN) has proven highly effective in addressing manageability, flexibility, and scalability issues in large-scale networks. This paper argues that the SDN concept can be extended to include intra-host communication. Many applications, particularly those involving stream processing and big data, rely on graph-based inter-process communication patterns similar to those in computer networks. We believe that a central (SDN-inspired) control mechanism for both network traffic and intra-host communication over a custom bus system would be beneficial. This work investigates the commonalities between intra-host and classical computer networks and explores the feasibility of a central network controller managing both types of communication.

## Categories and Subject Descriptors
- C.2.1 [Computer-Communication Networks]: Network Architecture and Design—packet-switching networks, network topology
- C.2.4 [Computer-Communication Networks]: Distributed Systems—distributed applications

## General Terms
- Design, Performance, Reliability

## 1. Introduction
Software-Defined Networking (SDN) has been highly successful in solving many of today's manageability, flexibility, and scalability issues in large-scale networks. Since its introduction, the software-defined network boundary has expanded from physical networks to hypervisors. We argue that the SDN concept can be further extended to include all communication within systems, including inter-process and inter-thread communication. This extension is particularly relevant for applications such as stream processing and big data, which rely on graph-based communication patterns similar to those in computer networks.

Many applications, especially those involving stream processing and big data, use graph-based communication patterns that span different types of entities (threads, processes, virtual hosts, and physical hosts). Central control, inspired by SDN, could benefit these systems for the same reasons it benefits classical networks. In this work, we investigate the commonalities between intra-host networks and classical computer networking and study the feasibility of a central network controller that manages both network traffic and intra-host communication over a custom or modified bus or message queue system, as illustrated in Figure 1.

## 2. Software-Defined Intra-Host Communication

### 2.1 Stream Processing
While there are several use cases for extending central communication control into the host, our work is particularly motivated by stream processing systems. While existing frameworks like Hadoop focus on batch-style processing, recent trends emphasize real-time data processing. Examples include Storm, Samza, and S4. In these systems, data streams traverse a graph of worker instances. Nodes in this graph may correspond to virtual or physical hosts, but edges may stay within a single host or span across the network.

Despite some stream processing frameworks having dynamic re-balancing, this functionality is generally inflexible and not designed to dynamically respond to processing demand. It also does not support the dynamic introduction of new worker classes at runtime. These limitations make it difficult for systems to automatically respond to changes in demand or introduce new functionality without halting the entire system. This is mainly due to the static placement of message queue systems like RabbitMQ or Kafka between workers.

Furthermore, network performance significantly impacts the rate of processing. Much research has examined the impact of network performance on Hadoop-style computation, especially in multi-tenant clouds, and proposed solutions to improve performance. However, little work has been done regarding stream-processing frameworks.

### 2.2 The Case for Central Control
To provide stream processing systems with the ability to change a running data processing graph and improve flexibility and elasticity, we propose using SDN-inspired control for both network communication and inter-worker communication on a single host. Even though we have fine-grained control over communication between nodes, typically only local and low-level configuration options are available for communication within a host. We propose extending the software-defined network boundary into the operating system and even applications. The SDN controller can then create network abstractions for particular applications and change properties of the communication graph to react to application needs.

A central controller can handle both network communication and communication local to a host, providing a general abstraction for communication patterns independent of whether communication partners are on the same host. Our system may provide an API similar to OpenFlow, allowing a flow abstraction to specify data streams across the network. This abstraction works seamlessly with existing SDN technology and can manage flows local to a single host or spanning an entire datacenter.

This abstraction also allows tenants in a datacenter to specify their data-flow graph, and the controller can allocate bandwidth, place, and migrate virtual machines to provide the requested topology and characteristics. Through central control, optimized placement across the entire administrative domain is possible, potentially saving resources and money.

### 2.3 Prototype
Instead of directly integrating this idea into existing stream processing frameworks, we implemented a limited custom prototype of a stream processing framework incorporating central control of the topology and its properties. Our prototype consists of skeleton code for workers, an application switch, and a central controller. The controller manages both OpenFlow switches and application switches, and our messaging mechanism uses Linux' D-Bus message bus system to pass data between workers. If the next processing worker is not local to the application switch, the data is sent to the appropriate host where it is handled by another application switch instance.

Based on early evaluations, our system can dynamically (at runtime) migrate workers between hosts, change network properties based on application demands, and insert and remove workers and classes of workers. This approach significantly improves the flexibility and elasticity of such systems and allows applications to quickly react to increased demand, potentially increasing overall processing performance.

## 3. Future Directions
In the future, we propose investigating three major areas:
1. Extend an existing stream-processing framework such as Storm or Samza with our technology to perform case studies and performance evaluations using typical workloads.
2. Explore other types of applications that may benefit from our idea, including exposing an API in operating systems to control messaging and communication flows between processes.
3. Leverage the flexibility provided by our system to centrally control scheduling, shuffling, and partitioning behavior of stream processing applications.

## 4. References
[1] H. Ballani, P. Costa, T. Karagiannis, and A. Rowstron. Towards Predictable Datacenter Networks. In Proceedings of SIGCOMM 2011.

[2] A. D. Ferguson, A. Guha, C. Liang, R. Fonseca, and S. Krishnamurthi. Participatory Networking: An API for Application Control of SDNs. In Proceedings of SIGCOMM 2013.

[3] K. Goodhope, J. Koshy, and J. Kreps. Building LinkedIn’s Real-time Activity Data Pipeline. IEEE Data Eng. . . . , 2012.

[4] J. Schad, J. Dittrich, and J.-A. Quiané-Ruiz. Runtime measurements in the cloud: Observing, analyzing, and reducing variance. Proc. VLDB Endow., Sept. 2010.