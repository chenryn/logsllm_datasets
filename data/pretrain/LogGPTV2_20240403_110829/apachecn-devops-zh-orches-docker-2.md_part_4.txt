 |
| --- | --- |
| 
```
-p, --pause
```
 | 该在提交期间暂停容器(从 v1.1.1+开始可用)。 |
| 
```
-m, --message=""
```
 | 这是提交消息。它可以是映像功能的描述。 |
| 
```
-a, --author=""
```
 | 此显示作者详情。 |
例如，让我们使用这个命令来提交我们设置的容器:
```
$ docker commit -m "Code.it – A browser based text editor and interpreter" -a "Shrikrishna Holla " code.it shrikrishna/code.it:v1
```
### 类型
如果要复制这些示例，请替换本示例中的作者详细信息和映像名称的用户名部分。
输出将是一个冗长的映像标识。如果你仔细看这个命令，我们已经把这个映像命名为`shrikrishna/code.it:v1`。这是一个惯例。映像/存储库名称的第一部分(正斜杠之前)是作者的 Docker Hub 用户名。第二部分是预期应用或映像名称。第三部分是一个标签(通常是版本描述)，用冒号与第二部分分开。
### 注
`Docker` `Hub`是由 Docker，Inc .维护的公共注册表。它托管公共 Docker 映像，并提供服务来帮助您构建和管理您的 Docker 环境。更多细节可以在[https://hub.docker.com](https://hub.docker.com)找到。
标记有不同版本的映像集合就是一个存储库。您通过运行`docker commit`命令创建的映像将是本地映像，这意味着您可以从该映像运行容器，但不能公开使用。要将其公开或推送到您的私有 Docker 注册表，请使用`docker push`命令。
## 映像命令
`images`命令列出了系统中的所有映像:
```
$ docker images [OPTIONS] [NAME]
```
| 
旗
 | 
说明
 |
| --- | --- |
| 
```
-a, --all
```
 | 此显示所有映像，包括中间层。 |
| 
```
-f, --filter=[]
```
 | 该提供过滤值。 |
| 
```
--no-trunc
```
 | 这个不截断输出(显示完整的 ID)。 |
| 
```
-q, --quiet
```
 | 这个只显示映像标识。 |
现在我们来看几个`image`命令用法的例子:
```
$ docker images
REPOSITORY           TAG   IMAGE ID       CREATED    VIRTUAL SIZE
shrikrishna/code.it  v1    a7cb6737a2f6   6m ago     704.4 MB
```
这将列出所有顶级映像、它们的存储库和标签以及它们的虚拟大小。
Docker 映像只不过是只读文件系统层的栈。联合文件系统，如 AUFS，然后合并这些层，它们看起来是一个文件系统。
在 Docker-speak 中，只读层是一个映像。它从未改变。当运行容器时，进程认为整个文件系统是读写的。但是更改只在最上面的可写层进行，这是在容器启动时创建的。映像的只读层保持不变。当你提交一个容器时，它会冻结顶部层(下面的层已经被冻结)，并将其变成一个映像。现在，当一个容器启动这个映像时，映像的所有层(包括以前可写的层)都是只读的。所有更改现在都在所有底层之上的新可写层上进行。然而，由于联合文件系统(如 AUFS)的工作方式，进程认为文件系统是读写的。
我们的`code.it`示例中涉及的图层的大致示意图如下:
![The images command](img/4787OS_02_02.jpg)
### 注
在这一点上，明智的做法可能是考虑 union 文件系统需要付出多少努力来合并所有这些层并提供一致的性能。过了一段时间，事情不可避免地会破裂。例如，AUFS 有 42 层的限制。当层数超过这个值时，就不允许创建更多的层，构建就会失败。阅读[https://github.com/docker/docker/issues/1171](https://github.com/docker/docker/issues/1171)了解更多关于这个问题的信息。
以下命令列出了最近创建的映像:
```
$ docker images | head
```
`-f`标志可以被赋予`key=value`类型的参数。它经常用于获取悬空映像的列表:
```
$ docker images -f "dangling=true"
```
这将显示未标记的映像，也就是说，已经提交或构建的映像没有标记。
## RMI 命令
`rmi`命令删除映像。删除一个映像也会删除它所依赖的并且在它被拉取时已经下载的所有底层映像:
```
$ docker rmi [OPTION] {IMAGE(s)]
```
| 
旗
 | 
说明
 |
| --- | --- |
| 
```
-f, --force
```
 | 这将强制移除映像。 |
| 
```
--no-prune
```
 | 此命令不会删除未标记的父级。 |
此命令从您的计算机中删除一个映像:
```
$ docker rmi test
```
## 保存命令
`save`命令将映像或存储库保存在一个 tarball 中，然后流向`stdout`文件，保留映像的父层和元数据:
```
$ docker save -o codeit.tar code.it
```
`-o`标志允许我们指定一个文件，而不是流式传输到`stdout`文件。它用于创建备份，然后可以与`docker load`命令一起使用。
## 加载命令
`load`命令从 tarball 加载映像，恢复文件系统层和与映像相关的元数据:
```
$ docker load -i codeit.tar
```
`-i`标志允许我们指定一个文件，而不是试图从`stdin`文件中获取一个流。
## 导出命令
`export`命令将容器的文件系统保存为一个目标球，并流向`stdout`文件。它展平了文件系统层。换句话说，它合并了所有文件系统层。在此过程中，映像历史记录的所有元数据都会丢失:
```
$ sudo Docker export red_panda > latest.tar
```
这里，`red_panda`是我的一个容器的名字。
## 导入命令
`import`命令创建一个空的文件系统映像，并将目标球的内容导入其中。您可以选择将其标记为映像:
```
$ docker import URL|- [REPOSITORY[:TAG]]
```
网址必须以`http`开头。
```
$ docker import http://example.com/test.tar.gz # Sample url
```
如果要从本地目录或档案导入，可以使用-参数从`stdin`文件中获取数据:
```
$ cat sample.tgz | docker import – testimage:imported
```
## 标记命令
您可以将命令添加到映像中。它有助于识别映像的特定版本。
比如`python`映像名称代表`python:latest`，可用 Python 的最新版本，可以随时更改。但是每当它被更新时，旧版本都会被标记上各自的 Python 版本。所以`python:2.7`命令将安装 Python 2.7。因此，`tag`命令可用于表示映像的版本，或用于需要识别映像不同版本的任何其他目的:
```
$ docker tag IMAGE [REGISTRYHOST/][USERNAME/]NAME[:TAG]
```
仅当您使用自己的私有注册表时，才需要`REGISTRYHOST`命令。同一映像可以有多个标签:
```
$ docker tag shrikrishna/code.it:v1 shrikrishna/code.it:latest
```
### 类型
无论何时标记映像，请遵循`username/repository:tag`惯例。
现在，再次运行`docker images`命令将显示相同的映像已经用`v1`和`latest`命令标记:
```
$ docker images
REPOSITORY            TAG     IMAGE ID      CREATED     VIRTUAL SIZE
shrikrishna/code.it   v1      a7cb6737a2f6  8 days ago  704.4 MB
shrikrishna/code.it   latest  a7cb6737a2f6  8 days ago  704.4 MB
```
## 登录命令
`login`命令用于注册或登录到 Docker 注册服务器。如果没有指定服务器，则默认为[https://index.docker.io/v1/](https://index.docker.io/v1/):
```
$ Docker login [OPTIONS] [SERVER]
```
| 
旗
 | 
说明
 |
| --- | --- |
| 
```
-e, --email=""
```
 | 电子邮件 |
| 
```
-p, --password=""
```
 | 密码 |
| 
```
-u, --username=""
```
 | 用户名 |
如果尚未提供标志，服务器将提示您提供详细信息。首次登录后，详细信息将存储在`$HOME/.dockercfg`路径中。
## 推送命令
`push`命令是用于将映像推送到公共映像注册表或私有 Docker 注册表:
```
$ docker push NAME[:TAG]
```
## 历史命令
`history`命令显示历史映像:
```
$ docker history shykes/nodejs
IMAGE         CREATED        CREATED BY                      SIZE
6592508b0790  15 months ago  /bin/sh -c wget http://nodejs.  15.07 MB
0a2ff988ae20  15 months ago  /bin/sh -c apt-get install ...  25.49 MB
43c5d81f45de  15 months ago  /bin/sh -c apt-get update       96.48 MB
b750fe79269d  16 months ago  /bin/bash                       77 B
27cf78414709  16 months ago                                  175.3 MB
```
## 事件命令
一旦启动， `events`命令实时打印由`docker`守护程序处理的所有事件:
```
$ docker events [OPTIONS]
```
| 
旗
 | 
说明
 |