### 优化后的文本

---

#### 条带大小
- **`--stripesize`**：指定每个条带的大小。

#### 逻辑区段数或百分比
- **`-1`** 或 **`-extent8`**：指定分配给新逻辑卷的逻辑区段数，或者使用的逻辑区段的百分比。

#### 逻辑卷大小
- **`-L`** 或 **`--size`**：指定分配给新逻辑卷的硬盘大小。

#### 次设备号
- **`-m.nor`**：指定设备的次设备号。

#### 创建镜像
- **`-αxrora`**：创建逻辑卷镜像。

#### 持久化次设备号
- **`--persistent`**：让次设备号一直有效。

#### 逻辑卷名称
- **`-nane`**：指定新逻辑卷的名称。

#### 读/写权限
- **`--pexmias1on`**：为逻辑卷设置读/写权限。

#### 预读扇区数
- **`-readahead`**：设置预读扇区数。

#### 镜像分区大小
- **`-R`** 或 **`--regionsize`**：指定将镜像分成多大的区。

#### 快照逻辑卷
- **`-s`** 或 **`--snapshot`**：创建快照逻辑卷。

#### 初始化数据
- **`-2`** 或 **`-2exo`**：将新逻辑卷的前1KB数据设置为零。

虽然命令行选项看起来可能有点吓人，但大多数情况下你用到的只是少数几个选项。

示例：
```bash
$ sudo lvcreate -l 100%FREE -n lvtest Vol1
Logical volume "lvtest" created
```

如果想查看你创建的逻辑卷的详细情况，可以使用 `lvdisplay` 命令。
```bash
$ sudo lvdisplay /dev/Vol1/lvtest
LV Path                /dev/Vol1/lvtest
LV Name                lvtest
VG Name                Vol1
LV UUID                ...
LV Write Access        read/write
LV Creation host, time ... -0400
LV Status              available
# open                 0
LV Size                2.00 GB
Current LE             513
Segments               1
Allocation             inherit
Read ahead sectors     auto
Block device           253:2
```

现在可以看到你刚刚创建的逻辑卷了！注意，卷组名（Vol1）用来标识创建新逻辑卷时要使用的卷组。

- `-l` 选项定义了要为逻辑卷指定多少可用的卷组空间。你可以按照卷组空闲空间的百分比来指定这个值。本例中为新逻辑卷使用了所有的空闲空间。
- `-L` 选项允许你以字节、千字节（KB）、兆字节（MB）或吉字节（GB）为单位来指定实际的大小。
- `-n` 选项允许你为逻辑卷指定一个名称（在本例中称作 `lvtest`）。

#### 创建文件系统
运行完 `lvcreate` 命令之后，逻辑卷就已经产生了，但它还没有文件系统。你必须使用相应的命令行程序来创建所需要的文件系统。
```bash
$ sudo mkfs.ext4 /dev/Vol1/lvtest
mkfs.ext4 (1.41.12, 17May2010)
Filesystem label=
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
131376 inodes, 525312 blocks
26265 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=541065216
17 block groups
32768 blocks per group, 32768 fragments per group
Superblock backups stored on blocks:
32768, 98304, 163840, 229376, 294912
Allocating group tables: done
Writing inode tables: done
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done
```

在创建了新的文件系统之后，可以用标准的 Linux `mount` 命令将这个卷挂载到虚拟目录中，就像它是物理分区一样。唯一的不同是你需要用特殊的路径来标识逻辑卷。
```bash
$ sudo mount /dev/Vol1/lvtest /mnt/my_partition
$ mount
/dev/mapper/vg_server01-lv_root on / type ext4 (rw)
/dev/mapper/Vol1-lvtest on /mnt/my_partition type ext4 (rw)
...
$ ls -al /mnt/my_partition
total 24
drwxr-xr-x 3 root root 4096 Jun 12 10:22 .
drwxr-xr-x 3 root root 4096 Jun 11 09:58 ..
drwx------ 2 root root 16384 Jun 12 10:22 lost+found
```

注意，`mkfs.ext4` 和 `mount` 命令中用到的路径都有点奇怪。路径中使用了卷组名和逻辑卷名，而不是物理分区路径。文件系统被挂载之后，就可以访问虚拟目录中的这块新区域了。

#### 修改 LVM
Linux LVM 的好处在于能够动态修改文件系统，因此最好有工具能够让你实现这些操作。在 Linux 中有一些工具允许你修改现有的逻辑卷管理配置。

如果你无法通过一个很炫的图形化界面来管理你的 Linux LVM 环境，也不是什么都干不了。在本章中你已经看到了一些 Linux LVM 命令行程序的实际用法。还有一些其他的命令可以用来管理 LVM 的设置。表 8-6 列出了在 Linux LVM 包中的常见命令。

| 命令       | 功能描述                     |
|------------|------------------------------|
| `vgchange` | 激活和禁用卷组               |
| `vgremove` | 删除卷组                     |
| `pvextend` | 将物理卷加到卷组中           |
| `vgreduce` | 从卷组中删除物理卷           |
| `lvextend` | 增加逻辑卷的大小             |
| `lvreduce` | 减小逻辑卷的大小             |

通过使用这些命令行程序，就能完全控制你的 Linux LVM 环境。

在手动增加或减小逻辑卷的大小时，要特别小心。逻辑卷中的文件系统需要手动修整来处理大小上的改变。大多数文件系统都包含了能够重新格式化文件系统的命令行程序，比如用于 ext2、ext3 和 ext4 文件系统的 `resize2fs` 程序。

#### 小结
在 Linux 上使用存储设备需要懂一点文件系统的知识。当工作在 Linux 系统下时，懂得如何在命令行下创建和处理文件系统能帮上你的忙。本章讨论了如何使用 Linux 命令行处理文件系统。

Linux 系统和 Windows 的不同之处在于前者支持大量不同的存储文件和目录的方法。每个文件系统方法都有不同的特性，使其适用于不同的场景。另外，每种文件系统都使用不同的命令与存储设备打交道。

在将文件系统安装到存储设备之前，你得先准备好设备。`fdisk` 命令用来对存储设备进行分区，以便安装文件系统。在分区存储设备时，必须定义在上面使用什么类型的文件系统。

分区完成后，你可以为该分区选用一种文件系统。流行的 Linux 文件系统包括 ext3 和 ext4。两者都提供了日志文件系统功能，降低它们在 Linux 系统崩溃时遇到错误或问题的几率。

在存储设备分区上直接创建文件系统的一个限制因素是，如果硬盘空间用完了，你无法轻易地改变文件系统的大小。但 Linux 支持逻辑卷管理（LVM），这是一种跨多个存储设备创建虚拟分区的方法。这种方法允许你轻松地扩展一个已有文件系统，而不用完全重建。Linux LVM 包提供了跨多个存储设备创建逻辑卷的命令行命令。

现在你已经了解了核心的 Linux 命令行命令，差不多是时候开始编写一些 shell 脚本程序了。但在开始编码前，我们还有另一件事情需要讨论：安装软件。如果你打算写 shell 脚本，就需要一个环境来完成你的杰作。下一章将讨论如何在不同的 Linux 环境中从命令行下安装和管理软件包。

---

### 第 9 章 安装软件程序

#### 本章内容
- 安装软件
- 使用 Debian 包
- 使用 Red Hat 包

在 Linux 的早期，安装软件是一件痛苦的事。幸好 Linux 开发人员已经通过把软件打包成更易于安装的预编译包，使我们的生活变得容易了一些。但你多少还是得花点功夫安装软件包，尤其是准备从命令行下安装的时候。本章将介绍 Linux 上能见到的各种包管理系统（PMS），以及用来进行软件安装、管理和删除的命令行工具。

#### 9.1 包管理基础
在深入 Linux 软件包管理之前，本章将先介绍一些基础知识。各种主流 Linux 发行版都采用了某种形式的包管理系统来控制软件和库的安装。PMS 利用一个数据库来记录各种相关内容：

- Linux 系统上已安装了什么软件包；
- 每个包安装了什么文件；
- 每个已安装软件包的版本。

软件包存储在服务器上，可以利用本地 Linux 系统上的 PMS 工具通过互联网访问。这些服务器称为仓库（repository）。可以用 PMS 工具来搜索新的软件包，或者是更新系统上已安装软件包。

软件包通常会依赖其他包，为了前者能够正常运行，被依赖的包必须提前安装在系统中。PMS 工具将会检测这些依赖关系，并在安装需要的包之前先安装好所有额外的软件包。

PMS 的不足之处在于目前还没有统一的标准工具。不管你用的是哪个 Linux 发行版，本书到目前为止所讨论的 bash shell 命令都能工作，但对于软件包管理可就不一定了。

PMS 工具及相关命令在不同的 Linux 发行版上有很大的不同。Linux 中广泛使用的两种主要的 PMS 基础工具是 `dpkg` 和 `rpm`。

基于 Debian 的发行版（如 Ubuntu 和 Linux Mint）使用的是 `dpkg` 命令，这些发行版的 PMS 工具也是以该命令为基础的。`dpkg` 会直接和 Linux 系统上的 PMS 交互，用来安装、管理和删除软件包。

基于 Red Hat 的发行版（如 Fedora、openSUSE 及 Mandriva）使用的是 `rpm` 命令，该命令是其 PMS 的底层基础。类似于 `dpkg` 命令，`rpm` 命令能够列出已安装包、安装新包和删除已有软件。

注意，这两个命令是它们各自 PMS 的核心，并非全部的 PMS。许多使用 `dpkg` 或 `rpm` 命令的 Linux 发行版都有各自基于这些命令的特定 PMS 工具，这些工具能够助你事半功倍。随后几节将带你逐步了解主流 Linux 发行版上的各种 PMS 工具命令。

#### 9.2 基于 Debian 的系统
`dpkg` 命令是基于 Debian 系 PMS 工具的核心。包含在这个 PMS 中的其他工具有：

- `apt-get`
- `apt-cache`
- `aptitude`

到目前为止，最常用的命令行工具是 `aptitude`，这是有原因的。`aptitude` 工具本质上是 `apt` 工具和 `dpkg` 的前端。`dpkg` 是软件包管理系统工具，而 `aptitude` 则是完整的软件包管理系统。

命令行下使用 `aptitude` 命令有助于避免常见的软件安装问题，如软件依赖关系缺失、系统环境不稳定及其他一些不必要的麻烦。本节将会介绍如何在命令行下使用 `aptitude` 命令工具。

##### 9.2.1 用 `aptitude` 管理软件包
Linux 系统管理员面对的一个常见任务是确定系统上已经安装了什么软件包。好在 `aptitude` 有个很方便的交互式界面可以轻松完成这项任务。

如果使用的 Linux 发行版中已经安装了 `aptitude`，只需要在 shell 提示符键入 `aptitude` 并按下回车键就行了。紧接着就会进入 `aptitude` 的全屏模式。

可以用方向键在菜单上移动。选择菜单选项 `Installed Packages` 来查看已安装了什么软件包。你可以看到几组软件包，比如编辑器等。每组后面的括号里都有个数字，表示这个组包含多少个软件包。

使用方向键高亮显示一个组，按回车键来查看每个软件包分组。你会看到每个单独的软件包名称以及它们的版本号。在软件包上按回车键可以获得更详细的信息，比如软件包的描述、主页、大小和维护人员等。

看完了已安装软件包后，按 `q` 键来退出显示。你可以继续用方向键和回车键打开或关闭软件包和它们所在的分组。如果想退出，多按几次 `q` 键，直到看到弹出的屏幕提示 “Really quit Aptitude?”。

如果你已经知道了系统上的那些软件包，只想快速显示某个特定包的详细信息，就没必要到 `aptitude` 的交互式界面。可以在命令行下以单个命令的方式使用 `aptitude`。

```bash
$ aptitude show package_name
```

下面的例子显示了包 `mysql-client` 的详情。

```bash
$ aptitude show mysql-client
Package: mysql-client
State: not installed
Priority: optional
Version: 5.5.38-0ubuntu0.14.04.1
Section: database
Maintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
Uncompressed Size: 129 k
Architecture: all
Depends: mysql-client-5.5
Provides: mysql-client = 5.5
Description: MySQL database client (metapackage depending on the latest version)
This is an empty package that depends on the current "best" version of
mysql-client (currently mysql-client-5.5), as determined by the MySQL
Install this package if in doubt about which MySQL version you
Homepage: http://dev.mysql.com/
$
```

说明 `aptitude show` 命令显示上面例子中的软件包还没有安装到系统上。它输出的软件包相关的详细信息来自于软件仓库。

无法通过 `aptitude` 看到的一个细节是所有跟某个特定软件包相关的所有文件的列表。要得到这个列表，就必须用 `dpkg` 命令。

```bash
$ dpkg -L package_name
```

下面这个例子是用 `dpkg` 列出 `vim-common` 软件包所安装的全部文件。

```bash
$ dpkg -L vim-common
/.
/usr/bin
/usr
/usr/bin/help-tags
/usr/bin/xxd
/usr/lib
/usr/lib/perl
/usr/lib/perl/package/vim-common
/usr/lib/perl/package
/usr/share
/usr/share/man
/usr/share/man/ru
/usr/share/man/ru/man1
/usr/share/man/ru/man1/vim.1.gz
/usr/share/man/ru/man1/vimdiff.1.gz
/usr/share/man/ru/man1/xxd.1.gz
/usr/share/man/lt
/usr/share/man/lt/man1
```