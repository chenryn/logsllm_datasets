title:Outsourcing the Decryption of ABE Ciphertexts
author:Matthew Green and
Susan Hohenberger and
Brent Waters
Outsourcing the Decryption of ABE Ciphertexts
Matthew Green
Johns Hopkins University
Susan Hohenberger∗
Johns Hopkins University
Brent Waters†
University of Texas at Austin
Abstract
1
Introduction
Attribute-based encryption (ABE) is a new vision for
public key encryption that allows users to encrypt and
decrypt messages based on user attributes. For example,
a user can create a ciphertext that can be decrypted only
by other users with attributes satisfying (“Faculty” OR
(“PhD Student” AND “Quals Completed”)). Given its
expressiveness, ABE is currently being considered for
many cloud storage and computing applications. How-
ever, one of the main efﬁciency drawbacks of ABE is that
the size of the ciphertext and the time required to decrypt
it grows with the complexity of the access formula.
In this work, we propose a new paradigm for ABE that
largely eliminates this overhead for users. Suppose that
ABE ciphertexts are stored in the cloud. We show how
a user can provide the cloud with a single transformation
key that allows the cloud to translate any ABE ciphertext
satisﬁed by that user’s attributes into a (constant-size) El
Gamal-style ciphertext, without the cloud being able to
read any part of the user’s messages.
To precisely deﬁne and demonstrate the advantages of
this approach, we provide new security deﬁnitions for
both CPA and replayable CCA security with outsourc-
ing, several new constructions, an implementation of our
algorithms and detailed performance measurements. In a
typical conﬁguration, the user saves signiﬁcantly on both
bandwidth and decryption time, without increasing the
number of transmissions.
∗Supported by NSF CAREER CNS-1053886, DARPA PROCEED,
Air Force Research Laboratory, Ofﬁce of Naval Research N00014-11-
1-0470, a Microsoft Faculty Fellowship and a Google Faculty Research
Award. The views expressed are those of the author and do not reﬂect
the ofﬁcial policy or position of the Department of Defense or the U.S.
Government.
†Supported by NSF CNS-0915361 and CNS-0952692, AFOSR
FA9550-08-1-0352, DARPA PROCEED, DARPA
Grant No:
N11AP20006, Google Faculty Research Award, the Alfred P. Sloan
Fellowship, and Microsoft Faculty Fellowship. The views expressed
are those of the author and do not reﬂect the ofﬁcial policy or position
of the Department of Defense or the U.S. Government.
Traditionally, we have viewed encryption as a method
for one user to encrypt data to another speciﬁc targeted
party, such that only the target recipient can decrypt and
read the message. However, in many applications a user
might often wish to encrypt data according to some pol-
icy as opposed to speciﬁed set of users. Trying to realize
such applications on top of a traditional public key mech-
anism poses a number of difﬁculties. For instance, a user
encrypting data will need to have a mechanism which
allows him to look up all parties that have access creden-
tials or attributes that match his policy. These difﬁcul-
ties are compounded if a party’s credentials themselves
might be sensitive (e.g., the set of users with a TOP SE-
CRET clearance) or if a party gains credentials well after
data is encrypted and stored.
To address these issues, a new vision of encryption
was put forth by Sahai and Waters [38] called Attribute-
Based Encryption (ABE). In an ABE system, a user will
associate an encryption of a message M with an function
f (·), representing an access policy associated with the
decryption. A user with a secret key that represents their
set of attributes (e.g., credentials) S and will be able to
decrypt a ciphertext associated with function f (·) if and
only if f (S) = 1. Since the introduction of ABE there
have been several other works proposing different vari-
ants [24, 7, 14, 36, 23, 42, 15, 28, 35] extending both
functionality and reﬁning security proof techniques. 1
One property that all of these ABE systems have is
that both the ciphertext size and time for decryption grow
with the size of the access formula f . Roughly, cur-
rent efﬁcient ABE realizations are set in pairing-based
groups where the ciphertexts require two group elements
for every node in the formula and decryption will require
1A more general concept of functional encryption [11] allows for
more general functions to be computed on the encrypted data and en-
compasses work such as searching on encrypted data and predicate en-
cryption [10, 2, 12, 39, 27].
Scheme
Waters [42]
GPSW [24]
§3.1
§3.2
§4.1
§4.2
ABE
Type
CP
CP
CP
KP
KP
KP
Security Model
Level
CPA
CPA
RCCA
CPA
CPA
RCCA
-
-
RO
-
-
RO
Full CT
Full Decrypt
Size
Ops
|GT| + (1 + 2(cid:96))|G|
|GT| + (1 + 2(cid:96))|G|
|GT| + (1 + 2(cid:96))|G| + k ≤ (2 + (cid:96))P + 2(cid:96)EG + 2ET
|GT| + (1 + s)|G|
|GT| + (1 + s)|G|
|GT| + (1 + s)|G| + k
≤ (2 + (cid:96))P + 2(cid:96)EG
≤ (2 + (cid:96))P + 2(cid:96)EG
≤ (1 + (cid:96))P + 2(cid:96)EG
≤ (1 + (cid:96))P + 2(cid:96)EG
≤ (1 + (cid:96))P + 2(cid:96)EG + 2ET
Out CT
Size
-
2|GT|
2|GT| + k
2|GT|
2|GT| + k
-
Out Dec
Ops
-
ET
3ET
-
ET
3ET
Figure 1: Summary of ABE outsourcing results. Above s denotes the size of an attribute set, (cid:96) refers to an LSSS access
structure with an (cid:96)×n matrix, k is the message bit length in RCCA schemes, and P,EG,ET stand for the maximum time
to compute a pairing, exponentiation in G and exponentiation in GT respectively. We ignore non-dominant operations.
All schemes are in the selective security setting. We discuss methods for moving to adaptive security in Section 5.1.
a pairing for each node in the satisﬁed formula. While
conventional desktop computers should be able to handle
such a task for typical formula sizes, this presents a sig-
niﬁcant challenge for users that manage and view private
data on mobile devices where processors are often one to
two orders of magnitude slower than their desktop coun-
terparts and battery life is a persistent problem. Interest-
ingly, in tandem there has emerged the ability for users
to buy on-demand computing from cloud-based services
such as Amazon’s EC2 and Microsoft’s Windows Azure.
Can cloud services be securely used to outsource de-
cryption in Attribute-Based Encryption systems? A
naive ﬁrst approach would be for a user to simply hand
over their secret key, SK, to the outsourcing service.
The service could then simply decrypt all ciphertexts re-
quested by the user and then transmit the decrypted data.
However, this requires complete trust of the outsourc-
ing service; using the secret key the outsourcing service
could read any encrypted message intended for the user.
A second approach might be to leverage recent out-
sourcing techniques [20, 17] based on Gentry’s [21] fully
homomorphic encryption system. These give outsourc-
ing for general computations and importantly preserve
the privacy of the inputs so that the decryption keys and
messages can remain hidden. Unfortunately, the over-
head for these systems is currently impractical. Gentry
and Halevi [22] showed that even for weak security pa-
rameters one “bootstrapping” operation of the homomor-
phic operation would take at least 30 seconds on a high
performance machine (and 30 minutes for the high se-
curity parameter). Since one such operation would only
count for a small constant number of gates in the overall
computation, this would need to be repeated many times
to evaluate an ABE decryption using the methods above.
Closer to practice, we might leverage recent tech-
niques on secure outsourcing of pairings [16]. These
techniques allow a client to outsource a pairing operation
to a server. However, the solutions presented in [16] still
require the client to compute multiple exponentiations in
the target group for every pairing it outsources. These ex-
ponentiations can be quite expensive and the work of the
client will still be proportional to the size of the policy
f . Moreover, every pairing operation in the original pro-
tocol will trigger four pairings do be done by the proxy.
Thus, the total workload is increased by a factor of at
least four from the original decryption algorithm, and the
client’s bandwidth requirements may actually increase.
Given these drawbacks, we aim for an ABE outsourcing
system that is secure and imposes minimal overhead.
Our Contributions. We give new methods for efﬁ-
ciently and securely outsourcing decryption of ABE ci-
phertexts. The core change to outsourceable ABE sys-
tems is a modiﬁed Key Generation algorithm that pro-
duces two keys. The ﬁrst key is a short El Gamal [19]
type secret key that must be kept private by the user. The
second is what we call a “transformation key”, TK, that
is shared with a proxy (and can be publicly distributed).
If the proxy then receives a ciphertext CT for a func-
tion f for which the user’s credentials satisfy, it is then
able to use the key TK to transform CT into a simple and
short El Gamal ciphertext CT(cid:48) of the same message en-
crypted under the user’s key SK. The user is then able to
decrypt with one simple exponentiation. Our system is
secure against any malicious proxy. Moreover, the com-
putational effort of the proxy is no more than that used to
decrypt a ciphertext in a standard ABE system.
To achieve our results, we create what we call a new
key blinding technique. At a high level, the new out-
sourced key generation algorithm will ﬁrst run a key gen-
eration algorithm from an existing bilinear map based
ABE scheme such as [24, 42]. Then it will choose a
blinding factor exponent z ∈ Zp (for groups of prime or-
der p) and raise all elements to z−1 (mod p). This will
produce the transformation key TK, while the blinding
factor z can serve as the secret key.
We show that we are able to adapt our outsourcing
techniques to both the “Ciphertext-Policy” (CP-ABE)
and “Key-Policy” (KP-ABE) types of ABE systems.2 To
2CP-ABE systems behave as we outlined above where a ciphertext
Figure 2: Illustration of how ABE ciphertexts are fetched
today.
Figure 3: Outsourcing the Decryption: Illustration of
how ABE ciphertexts could be transformed by a proxy
into much shorter El Gamal-style ciphertexts.
achieve our KP-ABE and CP-ABE outsourcing systems
we respectively apply our methodology to the construc-
tions of Goyal et al. [24] and Waters [42]. To prove se-
curity of the systems we must show that they remain se-
cure even in the presence of an attacker that acts as a
user’s proxy. Our ﬁrst systems and proofs model seman-
tic security for an attacker that tries to eavesdrop on the
user. We then extend our systems and proofs to chosen
ciphertext attacks where the attack might query the user’s
decryption routine on maliciously formed ciphertexts to
compromise privacy. Our solutions in this setting apply
the random oracle heuristic to achieve efﬁciency near the
chosen plaintext versions.
Typical Usage Scenarios. We envision a typical usage
scenario in Figures 2 and 3. Here a client sends a single
transformation key once to the proxy, who can then re-
trieve (potentially large) ABE ciphertexts that the user is
interested in and forward to her (small, constant-size) El
Gamal-type ciphertexts. The proxy could be the client’s
mail server, or the ciphertext server and the proxy could
be the same entity, as in a cloud environment.
The savings in bandwidth and local computation time
for the client are immediate: a transformed ciphertext
is always smaller and faster to decrypt than an ABE ci-
phertext of [24, 42] (for any policy size). We emphasize
in this useage scenario that the number of transmissions
will be the same as in the prior (non-outsourced) solu-
tions. Thus, the power consumption can only improve
with faster computations and smaller transmissions.
Implementation and Evaluation. To evaluate our out-
sourcing systems, we implemented the CP-ABE version
is associated with a boolean access formula f and a user’s key is a set of
attributes x, where a user can decrypt if f (x) = 1. KP-ABE is useful in
applications where we want to have the mirror image semantics where
the attributes x are associated with a ciphertext and an access formula
f with the key.
and tested it in an outsourcing environment. Our imple-
mentation modiﬁed part of the libfenc [25] library, which
includes a current CP-ABE implementation. We con-
ducted our experiments on both an ARM-based mobile
device and an Intel server to model the user device and
proxy respectively.
Outsourcing decryption resulted in signiﬁcant practi-
cal beneﬁts. Decrypting on an ABE ciphertext contain-
ing 100 attributes, we found that without the use of a
proxy the mobile device would require about 30 seconds
of computation time and drain a signiﬁcant amount of
the device’s battery. When we applied our outsourcing
technique, decrypting the ciphertext took 2 seconds on
our Intel server and approximately 60 milliseconds on
the mobile device itself.
To demonstrate compatibility with existing infrastruc-
ture, we constructed a re-usable platform for outsourcing
decryption using the Amazon EC2 service. Our proxy is
deployed as a public Amazon Machine Image that can be
programmatically instantiated by any application requir-
ing acceleration.
In addition to the core beneﬁts of outsourcing, we dis-
covered other collateral advantages. In existing ABE im-
plementations [6, 25] much of the decryption code is