### 2.59%
### 2.08%
### 1.74%
### 1.29%
### 1.26%
### 0.89%
### 0.43%
### 0.37%
### Yoda’s Protector: 0.33%
### 0.17%
### 0.13%

### Packing Tools
- UPack
- nPack
- ASPack
- ASProtect
- Armadillo
- FSG
- Nspack

### Supported Features
- Yes (for all the above packing tools)

### Performance Metrics
| Packer | SD-Dyninst | Renovo | Saﬀron | EtherUnpack |
|--------|------------|--------|--------|-------------|
| UPX    | 5          | 5      | 7.6    | 1.4         |
| ASPack | 5          | 8      | 2.7    | 23.5        |
| FSG    | 8          | 8      | 18.7   | 67.8        |
| WinUpack | 6      | 8      | fail   | 150.5       |
| MEW    | 4.0        | 6      | 31.1   | fail        |

### Instrumented Locations
- **SD-Dyninst**: 6, 34, 14, 23, 22
- **Renovo**: 2,278, 2,045, 18,822, 18,826, 21,186
- **Saﬀron**: 4,526, 4,141, 31,854, 32,945, 35,466

### Metacode and Payload Code
In the uninstrumented case, we determine the appropriate time split by using prior knowledge of the packed program to set breakpoints at the moment control transfers from the metacode to the payload code. In the instrumented case, our code-discovery instrumentation automatically identifies this transition by capturing the control transfer to the payload code. We report on SD-Dyninst's pre-execution cost separately, as one of the major benefits of incorporating static analysis techniques into our approach is that we can frontload much of the program analysis, thus minimizing its impact on the program's execution time.

### Pre-Payload Cost Analysis
The most notable differences in Table 1 are in the pre-payload costs incurred by SD-Dyninst across different packers. These differences are proportional to the number of times we discover and analyze new code in the metacode of these binaries. For example, the instrumentation of UPX, PolyEnE, nPack, and Nspack caused minimal slowdown because their metacode is static and not heavily obfuscated. In contrast, FSG, MEW, ASPack, UPack, and WinUPack are more heavily obfuscated and unpack in stages, requiring incremental analysis. The primary contributor to the incremental analysis cost is SD-Dyninst's current inability to resolve the targets of indirect control transfers at parse time, coupled with a decision to instrument whole functions, meaning that the discovery of a new basic block causes the entire function to be re-instrumented. SD-Dyninst's performance will improve significantly in the near future through the addition of code-slicing capabilities to Dyninst, which will allow for the resolution of many indirect control transfers at parse time.

### Comparison with Other Tools
In Table 2, we compare the overall expense of our techniques to the most efficient tools for identifying dynamically unpacked and modified code: Renovo, "Saﬀron for Intel PIN," and EtherUnpack. We executed Saﬀron and EtherUnpack on our own hardware, while Renovo's self-reported execution times were used for comparison. SD-Dyninst and Saﬀron were run on an Intel Core 2 Duo T2350 1.6GHz CPU with 2.5GB of memory, Renovo's study was conducted on an Intel Core 2 Duo E6660 2.4GHz CPU with 4GB memory, and EtherUnpack was executed on an Intel Xeon E5520 2.27GHz CPU with 6GB of memory. These numbers reflect the post-startup time it took for SD-Dyninst, Renovo, Saﬀron, and EtherUnpack to execute the instrumented metacode of various packer tools.

### Malware Analysis
Using SD-Dyninst for malware analysis requires no more skill from the analyst than performing the same task with Dyninst on a conventional binary. We developed a malware analysis factory that uses SD-Dyninst to perform code-coverage of malicious program executions by instrumenting every basic block in the program, both statically present and dynamically unpacked, and removing the instrumentation once it has executed. This instrumentation code consists of only fifty lines. Our factory halts the malware when it attempts its first network communication, exits, or reaches a 30-minute timeout. At this point, the factory prints out a traversal of the program's call stacks and outputs a Control Flow Graph (CFG) of the binary, identifying calls to Windows DLL functions and annotating it to distinguish between executed and non-executed blocks.

### Example: Conﬁcker A
Figures 5 and 6 show the analysis products for the Conﬁcker A malware binary. Figure 5a shows the annotated CFG of the Conﬁcker A binary in its entirety, while Figure 5b highlights the fact that SD-Dyninst has captured both static and dynamic code, including code in the executable and code in Windows DLLs, and both executed and non-executed blocks. Figure 6 shows our traversal of Conﬁcker's call stacks at its first call to the `select` routine, demonstrating the ability to identify stack frames of functions lacking symbol information, an important benefit of our analysis capabilities.

### Conclusion
We have created a hybrid analysis algorithm that enables the intuitive and efficient analysis and control of malicious program binaries. By combining static and dynamic analysis, we provide analysis-guided instrumentation for obfuscated, packed, and self-modifying binaries. We implemented these ideas in SD-Dyninst and demonstrated their effectiveness on popular packing tools. Ongoing research in the Dyninst project aims to address the limitations of our current approach, such as the detection of instrumentation through anti-tampering techniques and the handling of obfuscation methods that can pollute our parse with non-code bytes.

### Acknowledgments
This work is supported in part by Department of Energy grants DE-SC0004061, 08ER25842, 07ER25800, DE-SC0003922, Department of Homeland Security grant FA8750-10-2-0030 (funded through AFRL), and National Science Foundation Cybertrust grants CNS-0627501, and CNS-0716460. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon.

### References
1. Computer Economics 2007 Malware Report: The Economic Impact of Viruses, Spyware, Adware, Botnets, and Other Malicious Code (2007)
2. Darkparanoid Virus (1998)
3. Offensive Computing, <http://www.offensivecomputing.net>
4. Anckaert, B., Madou, M., Bosschere, K.D.: A Model for Self-Modifying Code. In: Information Hiding, Alexandria, VA, pp. 232–248 (2007)
5. Balakrishnan, G., Reps, T.: Analyzing Memory Accesses in x86 Executables. In: International Conference on Compiler Construction, New York, NY, pp. 5–23 (2004)
6. Bayer, U., Moser, A., Kruegel, C., Kirda, E.: Dynamic Analysis of Malicious Code. Journal in Computer Virology 2(1), 66–77 (2006)
7. Bellard, F.: QEMU, a Fast and Portable Dynamic Translator. In: USENIX Annual Technical Conference, Anaheim, CA, pp. 41–46 (2005)
8. BitDefender: BitDefender Anti-Virus Technology. White Paper (2007)
9. Bustamante, P.: Malware Prevalence. Panda Research Web Article (2008)
10. Bustamante, P.: Packer (r)evolution. Panda Research Web Article (2008)
11. Bustamante, P.: Personal Correspondence (2009)
12. Chiang, K., Lloyd, L.: A Case Study of the Rustock Rootkit and Spam Bot. In: First Conference on Hot Topics in Understanding Botnets, Cambridge, MA (2007)
13. Cifuentes, C., Emmerik, M.V.: UQBT: Adaptable Binary Translation at Low Cost. Computer 33(3), 60–66 (2000)
14. Collberg, C., Thomborson, C., Low, D.: Manufacturing Cheap, Resilient, and Stealthy Opaque Constructs. In: Symposium on Principles of Programming Languages, San Diego, CA, pp. 184–196 (1998)
15. Coogan, K., Debray, S., Kaochar, T., Townsend, G.: Automatic Static Unpacking of Malware Binaries. In: Working Conference on Reverse Engineering, Antwerp, Belgium (2009)
16. Danehkar, A.: Inject Your Code into a Portable Executable File (2005), <http://www.codeproject.com/KB/system/inject2exe.aspx>
17. Dinaburg, A., Royal, P., Sharif, M., Lee, W.: Ether: Malware Analysis via Hardware Virtualization Extensions. In: Conference on Computer and Communications Security, Alexandria, VA (2008)
18. Ferrie, P.: Anti-Unpacker Tricks. In: International CARO Workshop. Amsterdam, Netherlands (2008)
19. Garfinkel, T., Rosenblum, M.: A Virtual Machine Introspection Based Architecture for Intrusion Detection. In: Network and Distributed System Security Symposium, San Diego, CA (2003)
20. Guo, F., Ferrie, P., Chiueh, T.: A Study of the Packer Problem and Its Solutions. In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230, pp. 98–115. Springer, Heidelberg (2008)
21. Hind, M., Pioli, A.: Which Pointer Analysis Should I Use? In: International Symposium on Software Testing and Analysis, Portland, OR, pp. 113–123 (2000)
22. Hollingsworth, J.K., Miller, B.P., Cargille, J.: Dynamic Program Instrumentation for Scalable Performance Tools. In: Scalable High Performance Computing Conference, Knoxville, TN (1994)
23. Kang, M.G., Poosankam, P., Yin, H.: Renovo: A Hidden Code Extractor for Packed