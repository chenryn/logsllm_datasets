e
s
a
e
r
c
n
I
%
15
10
5
0
−5
−10
−15
SS
PO
k
c
o
L
n
P
i
D
S
u
-
S
F
t
a
F
(b)
o
h
c
E
-
P
C
T
Fig. 5. Box plots showing percent increase in execution time (a) and energy
(b) for the three IoT applications. The diamond shows the SafeStack only
binary, and the star shows the privilege overlay only binary.
INCREASE IN MEMORY USAGE FOR THE IOT APPLICATIONS FROM
APPLYING ALL OF EPOXY’S PROTECTIONS.
TABLE III
App
PinLock
FatFs-uSD
TCP-Echo
Text
3,390 (29%)
2,839 (12%)
3,249 (8%)
Global Data
14.6 (1%)
18.2 (1%)
7.2 (0%)
Stack
SafeStack
104 (25%)
128 (3%)
128 (29%)
Priv. Over.
0
36 (1%)
0
emit varying code. In all, we ﬁnd that all the three applications
needed less than 3,390 additional bytes for code. For PinLock
(the smallest application) which has a baseline text size of
11,788 bytes, the additional 3,390 bytes would still ﬁt in
16KB Flash, thus the same micro-controller could be used
with EPOXY’s protections. Impacts on data are caused by
SafeStack (4 bytes for the unsafestack pointer), and a few
bytes added to preserve alignment of variables. The majority
of the increase in stack size come from applying SafeStack.
It accounts for all the increase in PinLock and 128 bytes in
both FatFS-uSD and TCP-Echo. SafeStack increases the stack
requirements, because splitting the stack requires memory for
the sum of the execution paths with the deepest regular stack
and the deepest unsafestack across all possible execution paths.
In comparison, for the baseline, which has a single stack, only
memory for the deepest execution path is required. Privilege
overlays may also require additional memory—to save and
restore state while elevating privileges—but extra memory is
only needed when it increases the stack size of the deepest
execution path. Thus, additional memory, beyond SafeStack
is not needed for PinLock or TCP-Echo.
From the performance and memory usage requirements
we ﬁnd that EPOXY’s protections operate within the non-
functional constraints of runtime, energy consumption and
memory usage. It also greatly reduces the burden on the
developer. For all BEEBs benchmarks, FatFS-uSD, and TCP-
Echo (77 applications in all), a total of 10 annotations were
made. These annotations were all made in ARM’s CMSIS
library—a C-language Hardware Abstraction Library (HAL)
for common ARM components—which is shared across the
77 applications. PinLock required an additional 7 annotations
to protect its IO. We envision HAL writers could provide pre-
annotated libraries, further reducing the burden on developers.
The annotations were all required because offsets were passed
as arguments to functions and a store was done by adding the
offset to a constant address. Extending our analysis to be inter-
procedural will allow the compiler to handle these cases and
remove the need for manual annotation. Our compiler elevated
35 (PinLock), 31(FatFs-uSD), and 25 (TCP-Echo) operations
on the IoT applications.
C. Security Evaluation
EPOXY meets the design goals for usability and perfor-
mance, but does it provide useful protection? First, EPOXY
enables the application of W ⊕ X, a proven protection against
code injection and is foundational for other protections. Our
W ⊕X mechanism also protects against attacks which attempt
to bypass or disable W ⊕ X by manipulating system registers
using a write-what-where vulnerability. EPOXY incorporates
an adapted SafeStack, which provides effective protection
against stack smashing and ROP attacks by isolating poten-
tially exploitable stack variables from return addresses. While
the security guarantees of the ﬁrst two are deterministic, or by
design, that of the last one is probabilistic and we evaluate its
coverage.
1) Veriﬁer: Each restricted operation is granted privileged
execution, and in its original context this is desired and nec-
essary. However, if the restricted operation is executed as part
of a code reuse attack, the elevated privilege could undermine
the security of the embedded system. To gain insight into the
risk posed by the privilege overlays, we measure for each
of the three IoT applications, how many overlays occur, how
many instructions are executed in each, and how many have
externally deﬁned registers (external to the privilege overlay)
that are used for addressing within the overlay. We wrote a
veriﬁer, which parses the assembly code of the application and
identiﬁes all privilege overlays. The results for the 20 variants
of the IoT applications are shown in Table IV. It shows that the
number of privilege overlays is small and that on average 5 to
7 instructions are executed within each. This results in a small
attack surface and is a sharp reduction relative to the current
state-of-practice in which the entire execution is in privileged
mode.
2) Diversiﬁcation: To further mitigate code reuse attacks
and data corruption attack, EPOXY uses diversiﬁcation for
function locations in the code, data, and registers. This also
provides protection against Data-oriented programming using
TABLE IV
RESULTS OF OUR VERIFIER SHOWING THE NUMBER OF PRIVILEGE
OVERLAYS (PO), AVERAGE NUMBER OF INSTRUCTIONS IN AN OVERLAY
(AVE), MAXIMUM NUMBER OF INSTRUCTIONS IN AN OVERLAY (MAX),
AND THE NUMBER OF PRIVILEGE OVERLAYS THAT USE EXTERNALLY
DEFINED REGISTERS FOR ADDRESSING (EXT).
App
PinLock
FatFs-uSD
TCP-Echo
PO
40
31
25
Ave Max
53
7.0
20
5.0
5.2
20
Ext
15
0
0
299
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
global variables. Ultimately the amount of diversity available
is constrained by the amount of memory. Our diversiﬁcation
strategies distribute any unused memory within the data, bss,
and text regions. Let S denote the amount of slack memory
and R denote the size of the region (any one of the three above,
depending on which kind of diversiﬁcation we are analyzing).
For the text region S is the amount of unused Flash, and for
the data and bss regions S is the amount of unused RAM.
Then the total amount of memory available for diversifying
any particular region is R + S—say for the global data region,
the variable can be placed anywhere within R and the slack
memory S can be split up and any piece “slid” anywhere
within the data region. Since each is randomized by adding
variables or jump instructions with a size of 4 bytes the total
number of locations for a pointer is (R + S)/4.
Let us consider PinLock, our smallest example. It uses 2,376
bytes of RAM and would require a part with 4,096 bytes of
RAM, leaving 1,720 bytes of slack. PinLock’s data section is
1,160 bytes, thus a four byte pointer can have 720 locations or
over 9 bits of entropy. This exceeds Linux’s kernel level ASLR
(9 bits, [29] Section IV), and unlike Linux’s ASLR, disclosure
of one variable does not reveal the location of all others.
The text region is 11,788 bytes which means at least 16KB
of Flash would be used. Since all Flash can be used except
the region used for storing initial values for the data region
(maximum of 1,556 bytes in PinLock), the text section can
be diversiﬁed across 15,224 bytes. This enables approximately
3,800 locations for a function to be placed, which translates to
entropy of just under 12 bits. Entropy is ultimately constrained
due to the small size of memory but, similar to kernel ASLR,
an attacker cannot repeatedly guess as the ﬁrst wrong guess
will raise a fault and stop the system.
3) ROP analysis: To understand how diversity impacts code
reuse attacks we used the ROPgadget [52] ROP compiler.
This tool disassembles a binary and identiﬁes all the available
ROP gadgets. A ROP gadget is a small piece of code ending
in a return statement. It provides the building block for an
attacker to perform ROP attacks. ROP attacks are a form of
control hijack attacks which utilize only the code on the sys-
tem, thus bypassing code integrity mechanisms. By chaining
multiple gadgets together, arbitrary (malicious) execution can
be performed. By measuring surviving gadgets across different
variants we gain an understanding of how difﬁcult it is for an
attacker to build a ROP attack for a large set of binaries.
For each of the three applications, we identify gadgets
individually in each of 1,000 variants. Each variant had all
protections applied. To obtain the gadgets, ROPgadget parsed
each ﬁle and reported all gadgets it found including duplicates.
ROPgadget considers a duplicate to be the same instructions
but at a different location, by including these we ensure that
gadgets have the best chance of surviving across variants.
The number of gadgets located at the same location with the
same instructions were then counted across the 1,000 variants.
To deﬁne the metric “number of gadgets surviving across x
variants” consider a gadget that is found at the same location
and with the identical instructions across all x variants. Count
TABLE V
NUMBER OF ROP GADGETS FOR 1,000 VARIANTS THE IOT
APPLICATIONS. LAST INDICATES THE LARGEST NUMBER OF VARIANTS
FOR WHICH ONE GADGET SURVIVES.
Num. Surviving
App
PinLock
FatFs-uSD
TCP-Echo
Total
294K
1,009K
676K
2
14K
39K
22K
5
8K
9K
9K
25
313
39
985
50
0
0
700
Last
48
32
107
up all such gadgets and that deﬁnes the metric. This is a
well-used metric because the adversary can then rely on the
gadget to craft the control-ﬂow hijacking attack across all the
x variants. Clearly, as x goes up, this metric is expected to
decrease. Table V shows the number of gadgets that survived
across a given number of variants. To interpret this, consider
that for the column “2”, this number is the count of gadgets
which survived across 2 or more variants of the program. The
last remaining gadget survived across 48 variants of PinLock,
only 32 variants of FatFS-uSD, and 107 variants of TCP-Echo.
If a ROP attack only needs the single gadget which survives
across the maximum number of variants—an already unlikely
event—it would work on just over 10% of all variants. This
shows that our code diversiﬁcation technique can successfully
break the attacker’s ability to use the same ROP attack against
a large set of binaries.
D. Comparison to FreeRTOS
Porting an application to FreeRTOS-MPU could provide
some of
the protections EPOXY provides. Compared to
EPOXY, FreeRTOS-MPU does not provide W ⊕ X or code
reuse defenses. FreeRTOS-MPU provides privilege separation
between user tasks and kernel task.
User tasks running in unprivileged mode can access their
stack and three user deﬁnable regions if it wishes to share
some data with another user mode task. A kernel task runs
in privileged mode and can access the entire memory map. A
user task that needs to perform a restricted operation can be
started in privileged mode but then the entire execution of the
user task will be in privileged mode. If the privilege level is
dropped, then it cannot be elevated again for the entire duration
of the user task, likely a security feature in FreeRTOS-MPU.
We compare our technique to using FreeRTOS-MPU by
porting PinLock to FreeRTOS-MPU. The vendor, STMicro-
electronics, provided equivalent applications for FatFS-uSD
and TCP-Echo that use FreeRTOS; we added MPU support to
these application. This required: 1) Changing linker and startup
code of the application to be compatible with the FreeRTOS-
MPU memory map. 2) Changing the existing source code to
use FreeRTOS-MPU speciﬁc APIs. 3) If any part of a task
required a privileged operation, then the entire task must run
with full privileges (e.g., task initializing TCP stack).
Table VI shows the code size, RAM size, number of
instructions executed and the number of privileged instructions
for each application using EPOXY and FreeRTOS-MPU. The
number of instructions executed (Exe) is the number of in-
structions executed for the whole application to completion.
300
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
TABLE VI
COMPARISON OF RESOURCE UTILIZATION AND SECURITY PROPERTIES OF
FREERTOS-MPU(FREERTOS) VS. EPOXY SHOWING MEMORY USAGE,
TOTAL NUMBER OF INSTRUCTIONS EXECUTED (EXE), AND THE NUMBER
OF INSTRUCTIONS THAT ARE PRIVILEGED (PI).
App
PinLock
FatFs-uSD
TCP-Echo
Tool
EPOXY
FreeRTOS
EPOXY
FreeRTOS
EPOXY
FreeRTOS
Code
16KB
44KB
27KB
58KB
43KB
74KB
RAM
2KB
30KB
12K
14KB
35KB
51KB
PI
Exe
1.4K
823K
813K
823K
3.9K
33.3M
33.0M
34.1M
310.0M
1.5K
321.8M 307.0M
is expected that
Privileged instructions (PI) describe which of these instruc-
tions execute in privileged mode. Both are obtained using the
Debug Watch and Trace unit provided by ARM [11]. The
results for EPOXY are averaged over 100 runs across all
20 variants with 5 runs per variant, and FreeRTOS-MPU’s
are averaged over 100 runs. It
the total
number of instruction to be comparable as both are running the
same applications. However, EPOXY uses an average of only
0.06% of privileged instructions FreeRTOS-MPU uses. This is
because EPOXY uses a ﬁne-grained approach to specify the
privileged instructions, while FreeRTOS-MPU sets the whole
task as privileged. A large value for PI is undesirable from
a security standpoint because the instruction can be exploited
to perform security-critical functions, such as, turning off the