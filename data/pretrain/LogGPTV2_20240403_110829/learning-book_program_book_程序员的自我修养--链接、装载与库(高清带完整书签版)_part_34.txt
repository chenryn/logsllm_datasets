0809C000
eh_frame
VMA 1
_ibc_atexit
VMA 0
080B9000
IbC_SuDrNrs
rodata
0x06048000
.fnt
ibc_freeres_f
Jnit
note.ABI-tag
Process Virtual
F H
Space
Executable
图6-8ELF可执行文件与进程虚拟空间映射关系
ELF可执行文件中有一个专门的数据结构叫做程序头表（ProgramHeaderTable）用
程序员的自我修养一链接、装载与库
---
## Page 188
6.4进程虚存空间分布
165
ELF的可执行文件和共享库文件都有。跟段表结构一样，程序头表也是个结构体数组，它
的结构体如下：
typedef struct (
E1f32_off p_offset;
E1f32_word p_type;
E1f32_Addr p_vaddr;
E1f32_word p_filesz;
E1f32_Addx p_paddr;
E1f32_Word p_memsz1
E1f32_word p_align;
E1f32_word p_flags;
}E1f32_Phdr
一对应。我们来看Elf32_Phdr结构的各个成员的基本含义，如表6-2所示。
表6-2
成员
含义
p_type
“Segment”的类型，基本上我们在这里只美注“LOAD”类型的“Segment”。
“LOAD”类型的常量为1.还有几个类型诸如“DYNAMIC"、“INTERP”
等我们在介绍ELF动态链接时还会碰到
p_offset
“Segmemt”在文件中的偏移
appes“d
“Segment”的第一个字节在进程虚拟地址空间的起始位置，整个程序头
表中，所有“LOAD”类型的元素按照p_vaddr从小到大排列
P_paddr
“Segment”的物理装载地址，我们在本书的第2部分已经碰到过一个叫
做LMA（Load Memory Address）的概念，这个物理装载地址就是LMA.
P_paddr的佳在一般情况下跟p_vaddr是一样的
zsagd
“Segment”在ELF文件中所占空间的长度，它的值可能是0，因为有可
能这个“Segmem”在ELF文件中不存在内容
p_memse
“Segment”在进程虚拟地址空间申所占用的长度，它的值也可能是0
p_flags
“Scgment”的权限属性，比如可读“R”，可写“W”和可执行“X”
p_align
“Segment”的对齐属性，实际对齐字节等于2的p_align次，比如p_align
等于10，那么实除的对齐属性就是2的10次方，即1024字节
不符合常理的。但是，如果p_memsz 的值大于p_filesz又是什么意思呢？如果p_memsz大
于p_filesz，就表示该“Segment”在内存中所分配的空间大小超过文件中实际的大小，这部
分“多余”的部分则全部填充为“0”，这样做的好处是，我们在构造ELF可执行文件时不
外的部分就是BSS。因为数据段和BSS的唯一区别就是：数据段从文件中初始化内容，而
BSS段的内容全都初始化为0。这也就是我们在前面的例子中只看到了两个“LOAD”类型
程序员的自我修养一链接、装载与库
---
## Page 189
166
第6章可执行文件的装载与进程
的段，而不是三个，BSS已经被合并到了数据类型的段里面。
6.4.2堆和栈
在操作系统里面，VMA除了被用来映射可执行文件中的各个“Segment”以外，它还
可以有其他的作用，操作系统通过使用VMA来对进程的地址空间进行管理。我们知道进程
在执行的时候它还需要用到栈（Stack）、堆（Heap）等空间，事实上它们在进程的虚拟空
间中的表现也是以VMA的形式存在的，很多情况下，一个进程中的栈和堆分别都有一个对
应的VMA。在Linux下，我们可以通过查看“/proc”来查看进程的虚拟空间分布：
$./SectionMapping.elf &
s cat/proc/21963/mape
[1]21963
080b9000-080bb000 rwXp 00070000 08:01 2801887
288108210:9000000000dx-100060000-00089000
 /SectionMapping .e1f
. /SectionKapping.elf
000100000qq080dxx0000P080-000q0080
bf7ec000-bf802000 rw-p bf7ec000 00:00 0
[heap]
ffffe000-fffff000 r-xp 00o0000o 00:00 0
[stack]
[ospA]
5
上面的输出结果中：第一列是VMA的地址范围：第二列是VMA的权限，‘r”表示可
读，“w”表示可写，“x”表示可执行，“p”表示私有（COW.CopyonWrite），“s”
表示共享。第三列是偏移，表示VMA对应的Segment在映像文件中的偏移：第四列
表示映像文件所在设备的主设备号和次设备号：第五列表示映像文件的节点号。最后
一列是映像文件的路径。
我们可以看到进程中有5个VMA，只有前两个是映射到可执行文件中的两个Segmen。
另外三个段的文件所在设备主设备号和次设备号及文件节点号都是0，则表示它们没有映射
到文件中，这种VMA叫做匿名虚拟内存区域（Anonymous Virtual MemoryArea），我们可
以看到有两个区域分别是堆（Heap）和栈（Stack），它们的大小分别为140KB和88KB。
这两个VMA几乎在所有的进程中存在，我们在C语言程序里面最常用的malloc(）内存分配
函数就是从堆里面分配的，堆由系统库管理，我们在第10章会详细介绍关于堆的内容。栈
一般也叫做堆栈，我们知道每个线程都有属于自己的堆栈，对于单线程的程序来讲，这个
VMA堆栈就全都归它使用，另外有一个很特殊的VMA叫做“vdso”，它的地址已经位于内
核空间了（即大于0xC0000000的地址），事实上它是一个内核的模块，进程可以通过访间
这个VMA来跟内核进行一些通信，这里我们就不具体展开了，有兴趣的读者可以去参考
些关于Linux内核模块的资料。
通过上面的例子，让我们小结关于进程虚拟地址空间的概念：操作系统通过给进程空间
划分出一个个VMA来管理进程的虚拟空间：基本原则是将相同权限属性的、有相同映像文
件的映射成一个VMA：一个进程基本上可以分为如下几种VMA区域：
程序员的自我修养一链接、装载与库
---
## Page 190
6.4进程虚存空间分布
167
代码VMA，权限只读、可执行：有映像文件。
数据VMA，权限可读写、可执行：有映像文件。
堆VMA，权限可读写、可执行：无映像文件，匿名，可向上扩展。
栈VMA，权限可读写、不可执行：无映像文件，匿名，可向下扩展。
当我们在讨论进程虚拟空间的“Segment”的时候，基本上就是指上面的几种VMA。
现在再让我们来看一个常见进程的虚拟空间是怎么样的，如图6-9所示。
sttab
symtab
shsttab
debvg_rangos
debug_str
debug_ine
Operating
debug_atbrev
System
debug_info
afueueSnqep
STACKVMA
000200:
_Ibc_froeres_ptrs
.bss
xBF7EC000
data
got.pt
data.sel.ro
dtors
D80OE000
.dtors
.66
HEAP VMA
Ideta
-goc_exoept_tebi
OATA VMA
08088000
eh_tame
Joc_ales
CODE VMA
080B9000
rodeta
ibc_hoeres_fn
int
Process Virtual
Ag
Executable
图6-9ELF与Linux进程虚拟空间映射关系
细心的读者可能已经发现，我们在Linux的“/prxc”目录里面看到的VMA2的结束地
址跟原先预测的不一样，按照计算应该是0x080bc000，但实际上显示出来的是0x080bb000.
程序员的自我修养—链接、装载与库
---
## Page 191
168
第6章可执行文件的装载与进程
这是怎么回事呢？这是因为Linux在装载ELF文件时实现了一种"Hack"的做法，因为Linux
的进程虚拟空间管理的VMA的概念并非与“Segment”完全对应，Linux规定一个VMA可
以映射到某个文件的一个区域，或者是没有映射到任何文件：而我们这里的第二个"Segment”
要求是，前面部分映射到文件中，而后面一部分不映射到任何文件，直接为0，也就是说前
“_libcfreeres_ptrs”部分不要映射到文件。这样这两个概念就不完全相同了，所以Linux
实际上采用了一种取巧的办法，它在映射完第二个“Segmem”之后，把最后一个页面的剩
余部分清0.然后调用内核中的 do_brk()，把“.bss”和“_libcfreeres_ptrs”的剩余部分放
到堆段中，不过这种具体实现问题中的细节不是很关键，有兴题的读者可以阅读位于Linux
“，
6.4.3堆的最大申请数量
Linux下虚拟地址空间分给进程本身的是3GB（Windows 默认是2GB），那么程序真正
malloc(）到底最大可以申请多少内存呢？用下面这个小程序可以测试malloc最大内存申请数
量：
#include 
#nclude 
unsigned maximum = 0;
int main(int argc, char *argv[1)
unsigned blocksize[] = { 1024 * 1024, 1024, 1 1;
for(1 = 0; 1 < 3; i++) 
int 1, count;
for [count = 1=; count++)[
void *block - malloe( maximum + blocksize[i] * count):
if (block1(
maximun = maximum + blocksize[i] * count;
free(block) ;
}else {
break;
printf(*maximum malloc size = u bytes\n*, maximum):
在我的Linux机器上，运行上面这个程序的结果大概是2.9 GB左右的空间：在Windows
下运行这个程序的结果大概是1.5GB。那么malloc的最大中请数量会受到哪些因素的影响
呢？实际上，具体的数值会受到操作系统版本、程序本身大小、用到的动态/共享库数量、
程序员的自我修养一链接、装载与库
---
## Page 192
6.4进程虚存空间分布
169
大小、程序栈数量、大小等，甚至有可能每次运行的结果都会不同，因为有些操作系统使用
了一种叫做随机地址空间分布的技术（主要是出于安全考虑，防止程序受恶意攻击），使得
进程的堆空间变小。关于进程的堆的相关内容，在本书的第4部分还会详细介绍。
6.4.4
段地址对齐
可执行文件最终是要被操作系统装载运行的，这个装载的过程一般是通过虚拟内存的页
映射机制完成的。在映射过程中，页是映射的最小单位。对于Intel 80x86系列处理器来说，
默认的页大小为4096字节，也就是说，我们要映射将一段物理内存和进程虚拟地址空间之
间建立映射关系，这段内存空间的长度必须是4096的整数倍，并且这段空间在物理内存和
进程虚拟地址空间中的起始地址必须是409的整数倍。由于有者长度和起始地址的限制，
对于可执行文件来说，它应该尽量地优化白已的空间和地址的安排，以节省空间。我们就拿
下面这个例子来看看，可执行文件在页映射机制中如何节省空间。假设我们有一个ELF可
执行文件，它有三个段（Segment）需要装载，我们将它们命名为 SEG0、SEG1和 SEG2。
每个段的长度、在文件中的偏移如表6-3所示。
表6-3
段
长度（字节）
偏移（字节）
权限
SEG0
127
34
可读可执行
SEG1
9899
164
上郸上
SEG2
1988
只读
这是很常见的一种情况，就是每个段的长度都不是页长度的整数倍，一种最简单的映射
办法就是每个段分开映射，对于长度不足一个页的部分则占一个页。通常ELF可执行文件
的起始虚拟地址为0x08048000，那么按照这样的映射方式，该ELF文件中的各个段的虚拟
地址和长度如表6-4所示。
表6-4
段
起始虚拟地址