is proportional
the
veriﬁcation key is O(|in| + |out|) in size, i.e., depends on
the total length of inputs and outputs, but independent of the
circuit size. We stress that only the veriﬁcation key portion of
the CRS needs to be included in the public contract that lives
on the blockchain.
to the circuit’s size.
In comparison,
We remark that the CRS for protocol UserPcash is shared
globally, and can be generated in a one-time setup. In com-
the CRS for each Hawk contract would depend
parison,
on the Hawk contract, and therefore exists per instance of
Hawk contract. To minimize the trust necessary in the CRS
generation, one can employ either trusted hardware or use
secure multi-party computation techniques as described by
Ben-Sasson et al. [13].
Finally, in the future when new primitives become sufﬁ-
ciently fast, it is possible to drop-in and replace our SNARKs
with other primtives that do not require per-circuit preprocess-
ing. Examples include recursively composed SNARKs [18],
[25] or other efﬁcient PCP constructions [16]. The commu-
nity’s efforts at optimizing these constructions are underway.
851851
Program 
Φpriv
Compile 

.. 
Augment 
Private Input 
Private inCoin Values 
Private outCoin Values 
Symmetric Enc Key 
Public statement  
(seen by contract) 
randomness 
T/F? 
Balance 
Check 
.. 

Comm 
Enc 
Comm 
Enc 
Comm 
.. 
Comm 
To Libsnark 
Fig. 7. Compiler overview. Circuit augmentation for finalize.
VI. IMPLEMENTATION AND EVALUATION
A. Compiler Implementation
Our compiler consists of several steps, which we illustrate
in Figure 7 and describe below:
Preprocessing: First, the input Hawk program is split into its
public contract and private contract components. The public
contract is Serpent code, and can be executed directly atop
an ordinary cryptocurrency platform such as Ethereum. The
private contract is written in a subset of the C language,
and is passed as input to the Pinocchio arithmetic circuit
compiler [49]. Keywords such as HawkDeclareParties are
implemented as C preprocessors macros, and serve to de-
ﬁne the input (Inp) and output (Outp) datatypes. Currently,
our private contract inherits the limitations of the Pinocchio
compiler, e.g., cannot support dynamic-length loops. In the
future, we can relax these limitations by employing recursively
composition of SNARKs.
Circuit Augmentation: After compiling the preprocessed pri-
vate contract code with Pinocchio, we have an arithmetic
circuit representing the input/output relation φpriv. This be-
comes a subcomponent of a larger arithmetic circuit, which we
assemble using a customized circuit assembly tool. This tool
is parameterized by the number of parties and the input/output
datatypes, and attaches cryptographic constraints, such as
computing commitments and encryptions over each party’s
output value, and asserting that the input and output values
satisfy the balance property.
Cryptographic Protocol: Finally,
the augmented arithmetic
circuit is used as input to a state-of-the-art zkSNARK library,
Libsnark [15]. To avoid implementing SNARK veriﬁcation
in Ethereum’s Serpent
language, we must add a SNARK
veriﬁcation opcode to Ethereum’s stack machine. We ﬁnally
compile an executable program for the parties to compute the
Libsnark proofs according to our protocol.
B. Additional Examples
Besides our running example of a sealed-bid auction (Fig-
ure 2), we implemented several other examples in Hawk,
demonstrating various capabilities:
Crowdfunding: A Kickstarter-style crowdfunding campaign,
(also known as an assurance contract in economics litera-
ture [9]) overcomes the “free-rider problem,” allowing a large
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I
Performance of the zk-SNARK circuits for the user-side circuits: pour,
freeze AND compute (SAME FOR ALL APPLICATIONS). MUL denotes
multiple (4) cores, and ONE denotes a single core. The mint operation does
not involve any SNARKs, and can be computed within tens of
microseconds. The Proof includes any additional cryptographic material
used for the SNARK-lifting transformation.
80-bit security
112-bit security
KeyGen(s) MUL 26.3
ONE 88.2
Prove(s) MUL 12.4
ONE 27.5
9.7
Verify(ms)
pour freeze compute pour freeze compute
34.6
131.8
16.8
41.7
9.9
15.9
36.7
54.42 137.2
18.5
42.2
9.9
30.5
111.1
15.7
40.5
9.3
18.2
63.3
8.4
20.7
9.1
9.3
22.5
10.0
EvalKey(MB)
VerKey(KB)
Proof(KB)
Stmt(KB)
148
7.3
0.68
0.48
106
4.4
0.68
0.16
90
7.8
0.68
0.53
236
8.7
0.71
0.57
189
5.3
0.71
0.19
224
8.4
0.71
0.53
number of parties to contribute funds towards some social
good. If the minimum donation target is reached before the
deadline, then the donations are transferred to a designated
party (the entrepreneur); otherwise, the donations are refunded.
Hawk preserves privacy in the following sense: a) the do-
nations pledged are kept private until the deadline; and b)
if the contract fails, only the manager learns the amount by
which the donations were insufﬁcient. These privacy properties
may conceivably have a positive effect on the willingness
of entrepreneurs to launch a crowdfund campaign and its
likelihood of success.
Rock Paper Scissors: A two-player lottery game, and natu-
rally generalized to an N-player version. Our Hawk imple-
mentation provides the same notion of ﬁnancial fairness as
in [7], [17] and provides stronger security/privacy guarantees.
If any party (including the manager), cheats or aborts, the
remaining honest parties receive the maximum amount they
might have won otherwise. Furthermore, we go beyond prior
works [7], [17] by concealing the players’ moves and the
pseudonym of the winner to everyone except the manager.
“Swap” Financial Instrument: An individual with a risky
investment portfolio (e.g, one who owns a large number
of Bitcoins) may hedge his risks by purchasing insurance
(e.g., by effectively betting against the price of Bitcoin with
another individual). Our example implements a simple swap
instrument where the price of a stock at some future date
(as reported by a trusted authority speciﬁed in the public
contract) determines which of two parties receives a payout.
The private contract ensures the privacy of both the details of
the agreement (i.e., the price threshold) and the outcome.
The full Hawk programs for these examples are provided in
our online version [37].
C. Performance Evaluation
We evaluated the performance for various examples, using
an Amazon EC2 r3.8xlarge virtual machine. We assume
a maximum of 264 leaves for the Merkle trees, and we
Performance of the zk-SNARK circuits for the manager circuit
finalize for different applications. The manager circuits are the same
for both security levels. MUL denotes multiple (4) cores, and ONE denotes a
TABLE II
single core.
swap rps
auction crowdfund
#Parties
KeyGen(s) MUL
Prove(s) MUL
ONE
Verify(ms)
2
2
10
10
100
100
8.6 8.0 32.3 300.4 32.16 298.1
ONE 27.8 24.9 124 996.3 124.4 976.5
15.2 169.2
40.3 377.5
19.8
3.2 3.1 15.4 169.3
7.6 7.4 40.1 384.2
8.4 8.4
19.9
10
10
EvalKey(GB)
VerKey(KB)
Proof(KB)
Stmt(KB)
1.92 0.21
0.04 0.04 0.21
3.3 2.9 12.9 113.8
0.28 0.28 0.28
0.22 0.2 1.03
0.28 0.28
9.47 1.03
1.91
12.9 113.8
0.28
9.47
Naïve
SNARK-friendly Impl.
2.6x
1.0x
1.0x
2.0x
1.0x
1.5
)
n
o
i
l
l
i
2.3x
m
1
x
(
s
e
t
a
g
l
u
m
f
o
r
e
b
m
u
N
1
0.5
0
pour
freeze
compute
Fig. 8. Gains of using SNARK-friendly implementation for the user-side
circuits: pour, freeze and compute at 80-bit security.
present results for both 80-bit and 112-bit security levels. Our
benchmarks actually consume at most 27GB of memory and 4
cores in the most expensive case. Tables I and II illustrate the
results – we focus on evaluating the zk-SNARK performance
since all other computation time is negligible in comparison.
We highlight some important observations:
• On-chain computation (dominated by zk-SNARK veriﬁca-
tion time) is very small in all cases, ranging from 9 to 20
milliseconds The running time of the veriﬁcation algorithm
10.5x
Naïve
SNARK-friendly Impl.
With Opt 1
With Opt 2 (overall)
10.5x
10.5x
2.8x
1.9x 1.0x
2.8x
1.9x
1.0x
2.8x
1.9x
1.0x
80
)
n