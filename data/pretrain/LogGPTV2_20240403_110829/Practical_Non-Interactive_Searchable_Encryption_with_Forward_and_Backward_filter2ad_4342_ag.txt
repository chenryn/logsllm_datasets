We ﬁrstly review the SDd protocol. The SDd server
requires to know the number of updates (U) during the setup
phase, and it will initialise (cid:100)log U(cid:101) EDBs, where the i-th EDB
keeps at most 2i, i = 0, 1, ...,(cid:100)log U(cid:101) − 1 encrypted entries.
The insertion and deletion of SDd follows the same algorithm,
which adds an encrypted entry with an operator indicating
insert (INS) or delete (DEL) into the above EDBs. A new
encrypted entry will be inserted in the ﬁrst EDB (EDB0) and
gradually moved to the following EDBs (EDB1,2,...,(cid:100)log U(cid:101)−1).
During the search phase,
the client queries all EDBs and
retrieves all encrypted entries matching the query. Then, the
client gets the ﬁnal search result by decrypting the entries
and removing all deleted ind’s according to the associated
operators. To retrieve the real documents, the client should
send the non-deleted ind’s back to the server.
Insertion time. To evaluate and compare the insertion time of
Aura and SDd, we update the EDB with ‘1,000,000’ insertions
and ‘10’, ‘100’, ‘1,000’ and ‘10,000’ deletions, respectively.
Table III presents the unit time for insertion under both LAN
and WAN environments. It shows that SDd has a constant
cost, i.e., 26ms under LAN. The cost consists of the time to
TABLE III: Insertion Time (ms/ind) Comparison of Aura and
SDd when d = ‘10’, ‘100’, ‘1, 000’ and ‘10, 000’
d = 1,000
d = 10,000
d = 100
Scheme
Aurah=5 (LAN)
Aurah=13 (LAN)
SDd (LAN)
Aurah=5 (103ms)
Aurah=13 (103ms)
SDd (103ms)
Aurah=5 (197ms)
Aurah=13 (197ms)
SDd (197ms)
d = 10
0.05
0.09
26.27
50.97
50.82
3317.22
99.53
98.97
5721.82
0.06
0.13
26.21
50.12
50.34
3321.18
99.42
99.36
5715.77
0.07
0.18
26.22
50.39
50.21
3336.67
99.47
99.23
5731.74
0.09
0.21
26.49
50.78
50.47
3366.25
99.89
99.55
5733.36
TABLE IV: Deletion Time Cost
570
SDd
SDd
Aura
Scheme
(103ms)
Janus++ SDd
h=5 h=13
(LAN)
(197ms)
Per deletion (µs) 0.0009 0.002
26,000 3,324,120 5,715,097
generate an encrypted entry, insert a new entry and move the
existing EDB entries to the next level EDBs if there exist full
EDBs. The moving cost dominates the above insertion cost
because it requires the client to retrieve the full EDB back
and re-encrypt the EDB. To ensure forward privacy, the re-
encrypted EDB is put into an oblivious map for the server
to store it in the next level EDB. On the other hand, Aura
only sends the new encrypted entries to the server during the
insertion phase. It does not incur any costs of re-encryption
and oblivious operations. Overall, Aura outperforms SDd by
288× (h = 5) and 123× (h = 13) on the LAN environment.
On the WAN environment, the network delay affects the
insertion time signiﬁcantly. In particular, SDd can take more
than 3, 300ms (103ms delay) or 5700ms to insert one ind. The
reason is that SDd has to move more entries among different
EDBs to vacate the space for the new entry if the smaller EDBs
have been ﬁlled. Thus, the moving operation performs more
operations that need to communicate with the server, e.g., EDB
status checking, ORAM access, re-encryption. When inserting
1, 000, 000 ind’s, the above process should be repeated 18
times at most before adding the new ind into the EDB. Due
to the network delay, the cost per ind insertion of Aura also
increases to 50ms (103ms delay) or 99ms (197ms delay), as it
requires a one-way communication to send a ﬁxed number of
encrypted entries (the number of entries is ﬁxed after setting
h). Nonetheless, it is still 66× to 219× faster than SDd.
Deletion time. We run deletion operations 100 times for each
scheme, and the average deletion time of each scheme is
reported in Table IV. Note that the deletion in SDd runs the
same process as for insertion. Thus, the deletion time is similar
to the insertion time, and it involves a non-negligible cost
(26ms for LAN / 3, 324ms for 103ms-delay WAN / 5, 715ms
for 197ms-delay WAN) to delete one entry. This is 7 to 9
orders of magnitude slower than Aura (0.002 − 0.0009µs),
since Aura only needs to insert an associated tag of ind into
a local Bloom ﬁlter when deleting an entry.
Search time. To demonstrate the beneﬁt of using non-
interactive schemes, we compare the search time of SDd
and Aura on LAN (search time with a negligible network
delay) and WAN (with 103ms and 197ms-network delays)
settings. Figure 2 illustrates that SDd is 3× to 4× faster
than Aura in terms of the computational cost under the
LAN environment. However, Figures 3 and 4 show that SDd
13
(a) Search time for d = 10
(b) Search time for d = 100
(c) Search time for d = 1, 000
(d) Search time for d = 10, 000
Fig. 2: Search Time Comparison of Aura and SDd in LAN when d =‘10’, ‘100’, ‘1, 000’ and ‘10, 000’
(a) Search time for d = 10
(d) Search time for d = 10, 000
Fig. 3: Search Time Comparison of Aura and SDd in WAN (103ms delay) when d =‘10’, ‘100’, ‘1, 000’ and ‘10, 000’
(c) Search time for d = 1, 000
(b) Search time for d = 100
(a) Search time for d = 10
(d) Search time for d = 10, 000
Fig. 4: Search Time Comparison of Aura and SDd in WAN (197ms delay) when d =‘10’, ‘100’, ‘1, 000’ and ‘10, 000’
(c) Search time for d = 1, 000
(b) Search time for d = 100
TABLE V: Communication Cost for Search
SDd
Janus++
32B
32B
32B
32B
8.58MB
8.58MB
8.58MB
8.58MB
Scheme
d = 10
d = 100
d = 1,000
d = 10,000
Aura
h=13
h=5
2KB
3KB
37KB
24KB
205KB 163KB
362KB 135KB
(a) Aura client search time cost
(b) Aura server search time cost
Fig. 5: Search Time Comparison of Aura on Server and Client
with different h (h = 5 and h = 13) when d =‘10’, ‘100’,
‘1, 000’ and ‘10, 000’
experiences a signiﬁcant slowdown for the search on WAN:
It becomes 1.03× to 5× slower than Aura when there is
a 103ms-delay. Furthermore, Aura is 2× to 11× faster if
the network delay increases to 197ms. This is because SDd
requires the client to query all EDBs (OLDESTi, OLDERi,
OLDi, i = 0, 1, ...,(cid:100)log U(cid:101)-1) sequentially, thus resulting in
multiple rounds of communication for each search, which
makes it susceptible to the network performance. In our setting,
we have i = (cid:100)log 200, 010(cid:101) − 1 (17) to (cid:100)log 1, 010, 000(cid:101) − 1
(19), which indicates that there are 54 to 60 roundtrips for
the query. On the other hand, Aura only incurs a one-way
communication for the search, and the network delay only
introduces 50-600ms extra time cost to transmit the revoked
keys, Bloom ﬁlter and query token.
Search communication cost. Table V shows that Aura only
introduces a KB-level communication cost (2-362KB) even
when d = 10, 000. SDd incurs an MB-level communication
cost (8.58MB) during the search phase, which is 65× (h = 5)
and 24× (h = 13) larger than Aura when d = 10, 000.
The reason is that SDd must retrieve all encrypted entries
matching the query keyword and remove deleted ones at the
client. Further, the remaining ind’s need to be sent back to the
server for retrieving the real documents. The above process
implies a roundtrip communication with a large amount of
document ind’s, e.g., in our setting, client receives ‘1,000,010’,
14
246810Number of File ind's105100101Search Time (s)Aurah=5 (LAN)Aurah=13 (LAN)SDd (LAN)246810Number of File ind's105100101Search Time (s)Aurah=5 (LAN)Aurah=13 (LAN)SDd (LAN)246810Number of File ind's105100101Search Time (s)Aurah=5 (LAN)Aurah=13 (LAN)SDd (LAN)246810Number of File ind's105100101Search Time (s)Aurah=5 (LAN)Aurah=13 (LAN)SDd (LAN)246810Number of File ind's105100101Search Time (s)Aurah=5 (103ms)Aurah=13 (103ms)SDd (103ms)246810Number of File ind's105100101Search Time (s)Aurah=5 (103ms)Aurah=13 (103ms)SDd (103ms)246810Number of File ind's105101Search Time (s)Aurah=5 (103ms)Aurah=13 (103ms)SDd (103ms)246810Number of File ind's105101Search Time (s)Aurah=5 (103ms)Aurah=13 (103ms)SDd (103ms)246810Number of File ind's105100101Search Time (s)Aurah=5 (197ms)Aurah=13 (197ms)SDd (197ms)246810Number of File ind's105100101Search Time (s)Aurah=5 (197ms)Aurah=13 (197ms)SDd (197ms)246810Number of File ind's105101Search Time (s)Aurah=5 (197ms)Aurah=13 (197ms)SDd (197ms)246810Number of File ind's105101Search Time (s)Aurah=5 (197ms)Aurah=13 (197ms)SDd (197ms)0.90.79.86.7111.899.41404.01202.110100100010000Number of deletions050010001500Search: client cost (ms)h=5h=13397.8601.9460.0669.2470.6715.1793.1837.110100100010000Number of deletions050010001500Search: server cost (ms)h=5h=13TABLE VI: Communication Cost for Deletion
TABLE VIII: Search Time (s) of Janus++
Scheme
d = 10
d = 100
d = 1,000
d = 10,000
Aura
0
0
0
0
Janus++
2KB
24KB
240KB
2400KB
SDd
570B
4KB
42KB
429KB
TABLE VII: Insertion Time (ms/ind) of Janus++ when d =
‘10’, ‘100’, ‘1, 000’ and ‘10, 000’
d = 100
d = 10,000
d = 1,000
Scheme
d = 10
0.47
Janus++ (ms)
4.94
49.8
489.7
‘1,000,100’, ‘1,001,000’ and ‘1,010,000’ encrypted entries and
sends ‘999,990’, ‘999,900’, ‘999,000’ and ‘990,000’ ind’s
back5. In contrast, Aura only sends the revoked secret key,
Bloom ﬁlter and query token to the server (several KB), and
the server can get the corresponding document ind’s without
additional communications.
Deletion communication cost. SDd also incurs a communica-
tion cost during deletion as the client needs to retrieve and re-
encrypt some entries. It also sends these re-encrypted and new
entries to the server. As shown in Table VI, the cost is linear in
the number of deletions. In particular, when deleting 10,000
entries, SDd client sends 429KB to the server. In contrast,
Aura does not incur any communication cost during deletion
as it is a local process run by the client.
C. Evaluation and Comparison with Janus++
As mentioned in Section IV-A, Janus++ is constructed
from SPE, where the encryption key of each ind is generated
from d puncturable PRFs. Particularly, each puncturable PRF
is realised by a GGM tree, so each encryption or decryption
requires an evaluation of d GGM trees. Thus, it is not scalable
for large number of deletions, as demonstrated later.
Insertion time. Table VII depicts the insertion time of
Janus++, which scales linearly in the number d of deletions.
the performance of Janus++ degrades
When d is large,
dramatically. In Aura, it takes constant time for insertion, i.e.,
0.06 − 0.09ms per ind for h = 5 and 0.13 − 0.21ms per ind
for h = 13, as shown in Table III. The reason is that each
encryption key derivation needs one single traversal from the
root to a certain leaf node in the GGM tree, and our scheme
involves only one tree. Note that the cost of h = 13 is larger
than h = 5, because the number of ciphertext copies per ind
is equal to h which contributes to h underlying key derivation
and encryption operations.
Deletion time. We report the deletion time of each ind in
Table IV. For each deletion, Aura only needs to insert the tag
of the deleted ind to BF, and the cost is negligible to that of
Janus++. In Janus++, each deletion revokes a certain leaf
node in a GGM tree, which incurs a path traversal to generate
the revoked secret key elements.