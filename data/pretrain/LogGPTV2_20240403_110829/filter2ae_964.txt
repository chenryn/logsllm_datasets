### Trend Micro研究人员发现高风险IE漏洞

2018年7月11日，Trend Micro的研究人员发现了一个高风险的Internet Explorer (IE) 漏洞。他们将漏洞细节提交给了微软，并协助修复了该漏洞。该漏洞的CVE编号为CVE-2018-8373，影响了Windows最新版本中的VBScript引擎。由于Windows 10 Redstone 3 (RS3) 默认不启用VBScript，因此IE 11并未受到影响。

### 恶意流量分析

研究人员在恶意Web流量中发现了对该漏洞的利用。下图展示了其中一个恶意URL：

**图1. 恶意URL示例**

### 漏洞利用技术

此次漏洞利用采用了启发式方法，并且与CVE-2018-8174漏洞利用相似，使用了相同的混淆技术。两个漏洞都是针对VBScript引擎的远程代码执行漏洞。

**图2. CVE-2018-8373（左）与CVE-2018-8174（右）比较**

**图3. CVE-2018-8373（左）与CVE-2018-8174（右）运行shellcode的方法比较**

研究人员认为这两个漏洞利用可能来自同一个创建者。进一步分析样本发现，攻击者利用了`vbscript.dll`中的一个新的use-after-free (UAF) 漏洞，而这个漏洞在最新的VBScript引擎中尚未修复。

### 漏洞起源分析

原始的漏洞利用代码经过了混淆处理。通过一个概念验证 (POC) 来解释漏洞被利用的过程：

**图4. IE漏洞PoC**

#### POC详解

POC定义了一个名为`MyClass`的类，其中包含一个名为`array`的成员变量和两个成员函数：`Class_Initialize` 和 `Default Property Get P`。`Class_Initialize` 是一种过时的方法，但在对象初始化时会被自动调用。在POC中，`Class_Initialize` 被重载，当调用 `VBScriptClass::InitializeClass` 时会处理这个重载的函数。

默认属性是一个不需要特殊说明即可访问的类属性。在POC中，默认的 `Default Property Get` 函数会重载 `MyClass` 的默认属性。当调用 `cls` 时，也会处理重载的函数。

漏洞触发流程简化如下：

1. **设置 `cls = New MyClass`**
   - 设置会调用重载的 `Class_Initialize` 函数。在 `Class_Initialize` 中，`ReDim array(2)` 会调用 `vbscript!RedimPreservearray` 来创建一个元素数为3的数组。
   - **图5. 内存中的 `ReDim array(2)`**

2. **`cls.array(2)`**
   - 调用 `vbscript!Accessarray` 来获取数组元素的地址。在 `vbscript!Accessarray` 中，首先检查数组元素的索引是否越界。
   - **图6. 检查 `vbscript!Accessarray` 中的元素索引**
   - 然后计算元素的地址，保存到栈中，并返回值。
   - **图7. 在栈中保存元素地址**

3. **`cls.array(2) = cls`**
   - `cls.array(2) = cls` 会调用 `vbscript!AssignVar` 来设置 `MyClass` 的默认属性值为 `cls.array(2)`。获取 `MyClass` 的默认属性值后，会调用 `Public Default Property Get P` 并执行其中的 `ReDim array(1)` 脚本，释放原来的 `array.pvData`。
   - **图8. 释放原来的 `pvData`**
   - `array(2)` 的地址仍然保存在栈中，`Public Default Property Get P` 的返回值会访问释放的内存，并触发 `vbscript!AssignVar` 中的 UAF 漏洞。
   - **图9. `vbscript!AssignVar` 中的崩溃**

### 漏洞利用分析

漏洞利用过程可以简化为以下三个步骤：

1. **修改二维数组长度**
   - 首先，漏洞会定义两个数组，在下图中标记为 `array1` 和 `array2`。`array1` 就是前面POC中描述的数组，`array2` 是一个二维数组，其中每个元素的值都是3。
   - **图10. 定义 `array2`**
   - 使用脚本回调函数 `Default Property Get` 释放原来的 `array1.pvData`，并将 `array2` 设置为新的 `array1.pvData`。因为原来 `array1.pvData` 的大小和 `array2.SAFEARRAY` 结构相同，均为 `0x30` 字节。一些 `array2.SAFEARRAY` 结构会复用 `array1.pvData` 释放的内存。同时，`Default Property Get` 的返回值 `0x0FFFFFFFF` 会覆盖 `array2.SAFEARRAY` 的结构 `SAFEARRAYBOUND`，并修改二维数组的长度为 `0x0FFFFFFF`。
   - **图11. 定义 `Default Property Get`**
   - **图12. 修改数组长度的步骤**

2. **实现 Read/Write 原语**
   - 通过获取 `array1 (index_vuln)(0x0FFFFFFE, 2)`，其长度已被 UAF 修改。通过搜索 `array1` 的元素，可以在下面的脚本中找到 `index_vuln`。
   - **图13. 搜索 `array1 (index_vuln)(0x0FFFFFFE, 2)`**
   - 使用 `array1(index_vuln)(0x0FFFFFFE, 2)` 实现 out-of-bounds (OOB)，并找出两个用于类型混淆的数组元素。
   - **图14、15. 搜索两个数组的元素**
   - 最终得到两个数组元素：`array1(index_B)(0, 0)` 和 `array1(index_vuln)(index_A, 0)`，它们在内存中的距离为8字节。在内存中搜索的完全利用如下：
   - **图16. 在内存中搜索的方法说明**
   - 使用这两个数组元素来实现 `read and write` 原语。
   - **图17. RW原语的实现**

3. **运行 shellcode**
   - 使用原语泄露模块的地址。
   - **图18. 泄露模块的地址**
   - 通过修改某些变种的 `VarType` 为 `0x4d`，并将其值修改为 `0`，可以调用 `vbscript!VAR::Clear`，然后调用栈会修改返回地址为 `NtContinue` 的地址和伪造的 `CONTEXT` 结构来运行 shellcode。
   - **图19. 修改变种**
   - **图20. 运行 shellcode**

### 结论

基于以上分析，该漏洞很容易被利用。这是今年发现的第二个 VB 引擎漏洞利用，因此研究人员预计很快会有其他 VB 引擎漏洞出现。

### IoC

哈希值 (SHA256):
```
0d6fe137790e2ebdf4fac2dd500656f3a6f74c0d1598251929ea3558f965675f – detected as HTML_EXPLOIT.YYRV
```