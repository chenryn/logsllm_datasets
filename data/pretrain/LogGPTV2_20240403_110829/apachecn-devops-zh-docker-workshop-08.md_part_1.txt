# 八、CI/CD 管道
概观
本章介绍**持续集成和持续交付** ( **CI/CD** )，投产前最关键的一步。这是开发和生产之间的中间阶段。本章将展示 Docker 如何成为 CI 和 CD 的强大技术，以及它如何轻松地与其他广泛使用的平台集成。到本章结束时，您将能够配置 GitHub、Jenkins 和 SonarQube，并将它们合并到一起，以自动发布您的映像用于生产。
# 简介
在前几章中，您学习了如何编写`docker-compose`文件，并探索了服务的网络和存储。在本章中，您将学习如何集成应用的各种微服务，并对其进行整体测试。
**CI/CD** 代表**持续集成和持续交付**。有时，**光盘**也用于**持续部署**。这里的部署意味着通过自动化的管道工作流使应用可以从特定的网址公开访问，而交付意味着使应用准备好进行部署。在本章中，我们将重点讨论 CI/CD 的概念。
本章讨论 Docker 如何在分步练习中集成到 CI/CD 管道中。您还将学习如何安装和运行 Jenkins 作为 Docker 容器。Jenkins 是一个开源的自动化服务器。通过软件开发的自动化部分，您可以使用它来构建、测试、部署和促进 CI/CD。詹金斯的安装只是一个 Docker 命令。在 Docker 上安装 Jenkins 比将其作为应用安装更健壮，而且不会与特定的操作系统紧密耦合。
注意
如果您在 GitHub 和 Docker Hub 上没有帐户，请创建它们。您可以通过以下链接免费获取:[www.github.com](http://www.github.com)[http://hub.docker.com](http://hub.docker.com)。
# 什么是 CI/CD？
CI/CD 是一种帮助应用开发团队更频繁、更可靠地向用户提供代码更改的方法。CI/CD 将自动化引入到代码部署的各个阶段。
当几个开发人员协作并贡献给同一个应用时(他们每个人负责某个微服务或修复特定的错误)，他们使用代码版本控制提供程序来使用开发人员上传和推送的最新代码版本聚合应用。GitHub、Bitbucket 和 Assembla 都是版本控制系统的例子。开发人员和测试人员将应用代码和 Docker 文件推送到自动化软件，以构建、测试和部署 CI/CD 管道。Jenkins、Circle CI 和 GitLab CI/CD 就是这样的自动化平台的例子。
通过测试后，构建一个 Docker 映像并发布到您的存储库中。这些存储库可以是 Docker Hub，即贵公司的 **Docker 可信注册中心** ( **DTR** )或亚马逊**弹性容器注册中心** ( **ECR** )。
在本章中，如同在*图 8.1* 中一样，我们将使用 GitHub 存储库进行代码版本控制。然后，我们将使用 Jenkins 来构建和发布框架，并将 Docker Hub 作为注册中心。
![Figure 8.1: CI/CD pipeline ](img/B15021_08_01.jpg)
图 8.1:配置项/光盘管道
您必须在生产阶段之前构建 Docker 映像，因为在生产中使用的`docker-stack.yml`文件中没有`build`关键字。然后，该映像将在集成的自动化目标环境中部署到生产环境中。在生产中，操作人员(或开发人员)配置编排者从注册表中提取映像。Kubernetes、Docker Swarm 和 Google Kubernetes Engine 是可用于从注册表中提取映像的生产编排器和管理服务的示例。
总而言之，我们有三个主要步骤:
1.  将代码上传到 GitHub。
2.  在詹金斯创建一个项目，并输入 GitHub 和 Docker Hub 凭据。Jenkins 将自动构建映像，并将其推送给 Docker Hub 帐户。当您将代码推送到 GitHub 时，Jenkins 会自动检测、测试和构建映像。如果没有生成错误，Jenkins 会将映像推送到注册表。
3.  验证映像是否在您的 Docker Hub 帐户上。
在下一个练习中，您将安装 Jenkins 作为用于构建映像的容器。Jenkins 是最受欢迎的测试平台之一，市场需求量很大。詹金斯有几种项目类型。在本章中，我们将使用自由式项目类型。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 8.01:将 Jenkins 安装为容器
在本练习中，您将安装 Jenkins，完成其设置，并安装初步插件。您将安装将在本章中使用的 Git 和 GitHub 插件。执行以下步骤，将 Jenkins 成功安装为容器:
1.  Run the following command to pull the Jenkins image:
    ```
    $docker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean
    ```
    这将产生类似如下的输出:
    ![Figure 8.2: Output of the docker run command ](img/B15021_08_02.jpg)
    图 8.2:docker 运行命令的输出
    注意
    Docker Hub 上有很多詹金斯的图片。请随意拉动其中的任何一个，并使用端口和共享卷进行播放，但请注意不推荐使用的映像，因为詹金斯官方映像现在不推荐使用`Jenkins/Jenkins:lts`映像。因此，请仔细阅读图片文档。然而，如果一个人不工作，不要担心。这可能不是你的错。寻找另一个，并仔细遵循文档的说明。
2.  Open the browser and connect to the Jenkins service at `http://localhost:8080`.
    如果它给你一条错误消息，说明它无法到达 Docker 守护程序，使用以下命令将 Jenkins 添加到`docker`组:
    ```
    $ sudo groupadd docker
    $ sudo usermod –aG docker jenkins
    ```
    注意
    如果您机器的操作系统是 Windows，本地主机可能无法解析。在 Windows PowerShell 中运行`ipconfig`命令。在输出的第二部分，`ipconfig`显示`switch`网络的信息。复制 IPv4 地址，并在整个练习中使用它代替本地主机。
    您也可以从`Control Panel` > `Network and Sharing Center`获取 IP 地址，然后点击`Details`进行以太网或 Wi-Fi 连接。
    安装后，詹金斯会要求一个`Administrator password`来解锁:
    ![Figure 8.3: Getting started with Jenkins ](img/B15021_08_03.jpg)
    图 8.3:詹金斯入门
    Jenkins 会自动生成一个密码，供您用来解锁应用。在下一步中，您将看到如何获取此密码。
3.  Run the `docker container ls` command to get the list of the currently running containers:
    ```
    $ docker container ls
    ```
    您将获得从`jekinsci/blueocean`映像制作的容器的细节:
    ```
    CONTAINER ID IMAGE              COMMAND               CREATED
      STATUS              PORTS
    9ed51541b036 jekinsci/blueocean "/sbin/tini../usr/.." 5 minutes ago
      Up 5 minutes        0.0.0.0:8080->8080/tcp, 5000/tcp
    ```
4.  Copy the container ID and run the `docker logs` command:
    ```
    $ docker logs 9ed51541b036
    ```
    在日志文件的末尾，您会发现六行星号。密码将在它们之间。复制并粘贴到浏览器中:
    ![Figure 8.4: Output of the docker logs command ](img/B15021_08_04.jpg)
    图 8.4:Docker 日志命令的输出
5.  Select `Install suggested plugins`. Then, click `Skip and continue as admin`. Click `Save and Finish`:
    ![Figure 8.5: Installing plugins to customize Jenkins ](img/B15021_08_05.jpg)
    图 8.5:安装插件定制詹金斯
    在建议的插件中，有 Git 和 GitHub 插件，Jenkins 会自动为你安装。在接下来的练习中，你将需要这些插件。
    注意
    在*练习 8.04* 、*集成 Jenkins 和 Docker Hub、*中，您将需要安装更多插件，以便 Jenkins 可以将映像推送到 Docker Hub 注册表。这将在后面详细讨论，以及如何在一步一步的实验中管理 Jenkins 插件。
6.  After installation, it will display `Jenkins is ready!`. Click `Start using Jenkins`:
    ![Figure 8.6: Setting up Jenkins ](img/B15021_08_06.jpg)
    图 8.6:设置詹金斯
7.  Click on `Create a job` to build the software project:
    ![Figure 8.7: Welcome page of Jenkins ](img/B15021_08_07.jpg)
图 8.7:詹金斯的欢迎页面
前面的截图验证了您已经在系统上成功安装了 Jenkins。
在接下来的部分中，我们将遵循本章中的 CI/CD 管道。第一步是将代码上传到 GitHub，然后将 Jenkins 与 GitHub 集成，这样 Jenkins 就可以拉取代码并自动构建映像。最后一步是将 Jenkins 与注册中心集成，在没有任何人工干预的情况下将该映像推送到注册中心。
# 整合 GitHub 和 Jenkins
安装 Jenkins 后，我们将创建第一个作业，并将其与 GitHub 集成。在这一节中，就像在*图 8.8* 中一样，我们将只关注 GitHub 和 Jenkins。稍后将讨论 Docker Hub。
![ Figure 8.8: Integrating GitHub and Jenkins ](img/B15021_08_08.jpg)
图 8.8:集成 GitHub 和 Jenkins
我们将使用一个简单的 Python 应用来计算网站的点击量。每次刷新页面，计数器都会递增，导致网站点击次数增加。
注意
`Getting Started`应用的代码文件可以在以下链接找到:[https://github.com/efoda/hit_counter](https://github.com/efoda/hit_counter)。
该应用由四个文件组成:
*   `app.py`:这是 Python 应用代码。它使用`Redis`来记录网站的点击次数。
*   `requirments.txt`:该文件包含应用正常工作所需的依赖项。
*   `Dockerfile`:这将使用所需的库和依赖项构建映像。
*   `docker-compose.yml`: It is essential to have the YAML file when two or more containers are working together.
    在这个简单的应用中，我们还有两个服务，`Web`和`Redis`，如*图 8.9* 所示:
    ![Figure 8.9: The hit_counter application architecture ](img/B15021_08_09.jpg)
图 8.9:命中计数器应用架构
如果你不知道如何把这个应用上传到你的 GitHub 账号，不用担心。下一个练习将指导您完成这个过程。
## 练习 8.02:将代码上传到 GitHub
您可以使用 GitHub 保存您的代码和项目。在本练习中，您将学习如何将代码下载并上传到 GitHub。您可以通过在 GitHub 网站上分叉代码或从命令提示符下推送代码来实现这一点。在本练习中，您将从命令提示符处进行操作。
执行以下步骤将代码上传到 GitHub:
1.  On the GitHub website, create a new empty repository with the name `hit_counter`. Open a terminal and clone the code by typing the following command:
    ```
    $ git clone https://github.com/efoda/hit_counter
    ```
    这将产生类似如下的输出:
    ```
    Cloning into 'hit counter'...
    remote: Enumerating objects: 38, done.
    remote: Counting objects: 100% (38/38), done
    remote: Compressing objects: 100% (35/35), done
    remote: Total 38 (delta 16), reused 0 (delta 0), pack-reused 0
    Receiving object: 100% (38/38), 8.98 KiB | 2.25 MiB/s, done.
    Resolving deltas: 100% (16/16), done
    ```
2.  Verify that the code is downloaded to your local machine by listing the directories. Then, open the application directory:
    ```
    $ cd hit_counter
    ~/hit_counter$ ls
    ```
    您将找到下载到本地计算机的应用文件:
    ```
    app.py docker-compose.yml Dockerfile README.md requirements.txt
    ```
3.  Initialize and configure Git:
    ```
    $ git init
    ```
    您应该会得到类似如下的输出:
    ```
    Reinitialized existing Git repository in 
    /home/docker/hit_counter/.git/
    ```
4.  输入您的用户名和电子邮件:
    ```
    $ git config user.email ""
    $ git config user.name ""
    ```
5.  指定 Git 账户的名称，`origin`和`destination` :
    ```
    $ git remote add origin https://github.com/efoda/hit_counter.git
    fatal: remote origin already exists.
    $ git remote add destination https://github.com//hit_counter.git
    ```