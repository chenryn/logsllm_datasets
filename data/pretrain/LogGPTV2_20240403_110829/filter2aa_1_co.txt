      victim_user
    Or you can try removing the field entirely:
    或者你可以尝试完全删除该字段：
      victim_user
    If the SAML response signature used by the application is predictable, like the base64 example we discussed earlier, you can simply recalculate the signature and forge a valid SAML response.
    如果应用程序使用的 SAML 响应签名是可预测的，就像我们之前讨论的 base64 示例一样，您可以简单地重新计算签名并伪造一个有效的 SAML 响应。
    Step 4: Re-encode the Message
    After tampering with the SAML response, re-encode the message into its original form and send it back to the service provider. The service provider will use that information to authenticate you to the service. If you’re successful, you can obtain a valid session that belongs to the victim’s account. SAML Raider is a Burp Suite extension that can help you with editing and re-encoding SAML messages.
    篡改 SAML 响应后，重新编码消息并将其发送回服务提供商。服务提供商将使用该信息来对您进行身份验证。如果成功，则可以获得属于受害者帐户的有效会话。SAML Raider 是一个 Burp Suite 扩展，可以帮助您编辑和重新编码 SAML 消息。
    Hunting for OAuth Token Theft
    Before you dive into hunting for OAuth open redirect issues, you should first determine whether the website is using OAuth. You can figure this out by intercepting the requests to complete authentication on the website and look for the
     oauth
    keyword in the HTTP messages.
    在你深入挖掘OAuth重定向问题之前，你应该先确定该网站是否正在使用OAuth。你可以通过拦截完整身份验证请求并查看HTTP消息中的oauth关键字来确定这一点。
    Then start looking for open redirect vulnerabilities. You can find details on how to find open redirects in
     Chapter 7
    . Finally, see if you can smuggle the OAuth tokens offsite by using one of the open redirects that you’ve found.
    然后开始寻找开放重定向漏洞。您可以在第七章中找到有关如何查找开放重定向的详细信息。最后，通过使用您找到的其中一个开放重定向，查看是否可以窃取OAuth令牌到外部网站。
    Escalating the Attack
    SSO bypass usually means that attackers can take over the accounts of others. Therefore, these vulnerabilities are of high severity before any escalation attempts. But you can escalate SSO bypass vulnerabilities by attempting to take over accounts with high privileges, such as admin accounts.
    SSO绕过通常意味着攻击者可以接管他人的帐户。因此，在任何升级尝试之前，这些漏洞的严重程度非常高。但是，您可以通过尝试接管高特权帐户（例如管理员帐户）来升级SSO绕过漏洞。
    Also, after you’ve taken over the user’s account on one site, you can try to access the victim’s account on other sites by using the same OAuth credentials. For instance, if you can leak an employee’s cookies via subdomain takeover, see if you can access their company’s internal services such as admin panels, business intelligence systems, and HR applications with the same credentials.
    此外，在接管了一个站点上的用户帐户后，您可以尝试使用相同的OAuth凭据访问受害者在其他站点上的帐户。例如，如果您可以通过子域接管泄漏员工的cookie，请尝试使用相同的凭据访问其公司的内部服务，如管理员面板、商业智能系统和人力资源应用程序。
    You can also escalate account takeovers by writing a script to automate the takeover of large numbers of accounts. Finally, you can try to leak data, execute sensitive actions, or take over the application by using the accounts that you have taken over. For example, if you can bypass the SSO on a banking site, can you read private information or transfer funds illegally? If you can take over an admin account, can you change application settings or execute scripts as the admin? Again, proceed with caution and never test anything unless you have obtained permission.
    你也可以编写脚本自动接管大量账户，以提高账户接管的效率。最后，你可以使用接管的账户试图泄露数据、执行敏感操作或接管应用程序。例如，如果你可以绕过银行网站的SSO，你能查看私人信息或非法转账吗？如果你能够接管管理员账户，你能够更改应用程序设置或作为管理员执行脚本吗？再次强调，必须谨慎行事，除非你已获得许可，否则不要测试任何东西。
    Finding Your First SSO Bypass!
    Now that you are familiar with a few SSO bypass techniques, try to find your first SSO bypass bug:
    既然你已经熟悉了一些SSO绕过技术，现在尝试寻找你的第一个SSO绕过漏洞吧。
     If the target application is using single sign-on, determine the SSO mechanism in use.
     If the application is using shared session cookies, try to steal session cookies by using subdomain takeovers.
     If the application uses a SAML-based SSO scheme, test whether the server is verifying SAML signatures properly.
     If the application uses OAuth, try to steal OAuth tokens by using open redirects.
     Submit your report about SSO bypass to the bug bounty program!
21
      Information Disclosure
    The IDOR vulnerabilities covered in
     Chapter 10
    are a common way for applications to leak private information about users. But an attacker can uncover sensitive information from a target application in other ways too. I call these bugs
     information disclosure
    bugs. These bugs are common; in fact, they’re the type of bug I find most often while bug bounty hunting, even when I’m searching for other bug types.
    本书第10章提到的IDOR漏洞是应用程序泄露用户私人信息的常见途径。但攻击者也可以通过其他方式获取目标应用程序的敏感信息。我将这些漏洞称为信息披露漏洞。这些漏洞很常见，事实上，它们是我在赏金猎人活动中最常发现的缺陷类型，即使我在寻找其他类型的缺陷时也是如此。
    These bugs can happen in many ways, depending on the application. In this chapter, we’ll talk about a few ways you might manage to leak data from an application, and how you can maximize the chances of finding an information disclosure yourself. This chapter delves into some of the techniques mentioned in
     Chapter 5
    , but with a focus on extracting sensitive and private information by using these techniques.
    这些漏洞可能因应用程序的不同而发生。本章中，我们将讨论从应用程序泄露数据的一些方法，并介绍如何最大化发现信息泄露的机会。本章深入探讨了第5章提到的一些技术，但重点关注如何使用这些技术提取敏感和私人信息。
    Mechanisms
    Information disclosure occurs when an application fails to properly protect sensitive information, giving users access to information they shouldn’t have available to them. This sensitive information can include technical details that aid an attack, like software version numbers, internal IP addresses, sensitive filenames, and filepaths. It could also include source code that allows attackers to conduct a source code review on the application. Still other times, the application leaks private information of users, like a user’s age, bank account numbers, email addresses, and mailing addresses, to unauthorized third parties.
    信息泄露发生在应用程序未能正确保护敏感信息时，使用户可以访问他们不应该拥有的信息。这些敏感信息可能包括技术详细信息，如软件版本号、内部IP地址、敏感文件名和文件路径。它还可能包括源代码，使攻击者可以对应用程序进行源代码审查。有时，应用程序还会泄漏用户的私人信息，例如用户的年龄、银行帐户号码、电子邮件地址和邮寄地址，传递给未经授权的第三方。
    Most systems aim to hide development information, including software version numbers and configuration files, from the outside world, because it allows attackers to gather information about an application and strategize about how to most effectively attack it. For example, learning the exact software versions an application uses will allow attackers to look for publicly disclosed vulnerabilities that affect the application. Configuration files often contain information such as access tokens and internal IP addresses that attackers can use to further compromise the organization.
    大多数系统的目标是隐藏开发信息，包括软件版本号和配置文件，以防止攻击者收集关于应用程序的信息并制定如何最有效地攻击它的策略。例如，了解应用程序使用的确切软件版本将使攻击者寻找影响该应用程序的公开披露的漏洞。配置文件通常包含访问令牌和内部IP地址等信息，攻击者可以使用它们来进一步破坏组织。
    Typically, applications leak version numbers in HTTP response headers, HTTP response bodies, or other server responses. For example, the
     X-Powered-By
    header, which is used by many applications, shows you which framework the application runs:
    通常，应用程序会在HTTP响应头，HTTP响应正文或其他服务器响应中泄漏版本号。例如，许多应用程序使用的X-Powered-By头会向您显示应用程序运行的框架：
X-Powered-By: PHP/5.2.17
    On the other hand, applications leak sensitive configuration files by not applying proper access control to the files, or by accidentally uploading a sensitive file onto a public repository that outside users can access.
    另一方面，应用程序通过未对文件应用适当的访问控制或意外地将敏感文件上传到外部用户可以访问的公共存储库中而泄漏敏感配置文件。
    Another piece of information that applications should protect is their source code. When the backend code of an application is leaked to the public, the leaked code can help attackers understand the application’s logic, as well as search for logic flaw vulnerabilities, hardcoded credentials, or information about the company’s infrastructure, such as internal IPs. Applications can leak source code by accidentally publishing a private code repository, by sharing code snippets on public GitHub or GitLab repositories, or by uploading it to third-party sites like Pastebin.
    应用程序应该保护的另一个信息是它们的源代码。当应用程序的后端代码泄露给公众时，泄露的代码可以帮助攻击者理解应用程序的逻辑，并搜索逻辑漏洞漏洞，硬编码凭据或有关公司基础架构的信息，例如内部IP。应用程序可能会通过意外发布私有代码存储库，通过在公共GitHub或GitLab存储库上共享代码片段，或通过将其上传到Pastebin等第三方站点来泄漏源代码。
    Finally, applications often leak sensitive information by including it in their public code. Developers might accidentally place information such as credentials, internal IP addresses, informative code comments, and users’ private information in public source code such as the HTML and JavaScript files that get served to users.
    应用程序经常通过将敏感信息包含在其公共代码中泄漏。开发人员可能会意外地将信息（例如凭据、内部IP地址、信息性代码注释和用户的私人信息）放在公共源代码中，例如提供给用户的HTML和JavaScript文件中。
    Prevention
    It’s difficult to completely prevent sensitive information leaks. But you can reliably lower the possibilities of information disclosure by safeguarding your data during the development process.
    完全阻止敏感信息泄露是困难的。但你可以通过在开发过程中保护数据，可靠地降低信息泄露的可能性。
    The most important measure you should take is to avoid hardcoding credentials and other sensitive information into executable code. Instead, you can place sensitive information in separate configuration files or a secret storage system like Vault (
     https://github.com/hashicorp/vault/
    ). Also, audit your public code repositories periodically to make sure sensitive files haven’t been uploaded by accident. Tools can help you monitor code for secrets, such as secret-bridge (
     https://github.com/duo-labs/secret-bridge/
    ). And if you have to upload sensitive files to the production server, apply granular access control to restricts users’ access to the files.
    你应该采取的最重要的措施是避免将凭据和其他敏感信息硬编码到可执行代码中。相反，可以将敏感信息放在单独的配置文件或像Vault（https://github.com/hashicorp/vault/）这样的秘密存储系统中。另外，定期审核公共代码库，以确保敏感文件没有被意外上传。工具可以帮助您监视包含秘密的代码，例如secret-bridge（https://github.com/duo-labs/secret-bridge/）。如果您必须上传敏感文件到生产服务器，则应用精细的访问控制以限制用户对文件的访问。
    Next, remove data from services and server responses that reveals technical details about the backend server setup and software versions. Handle all exceptions by returning a generic error page to the user, instead of a technical page that reveals details about the error.
    接下来，要从服务和服务器响应中移除透露后端服务器设置和软件版本的技术细节数据。处理所有异常情况时，向用户返回通用的错误页面，而不是一个透露错误详细信息的技术页面。
    Hunting for Information Disclosure
    You can use several strategies to find information disclosure vulnerabilities, depending on the application you’re targeting and what you’re looking for. A good starting point is to look for software version numbers and configuration information by using the recon techniques introduced in
     Chapter 5
    . Then you can start to look for exposed configuration files, database files, and other sensitive files uploaded to the production server that aren’t protected. The following steps discuss some techniques you can attempt.
    您可以使用多种策略来查找信息披露漏洞，具体取决于您的目标应用程序和您正在寻找的内容。一个好的起点是通过使用第5章中介绍的侦察技术来查找软件版本号和配置信息。然后，您可以开始寻找未受保护的暴露的配置文件、数据库文件和其他敏感文件上传到生产服务器上。以下步骤讨论您可以尝试的一些技巧。
    Step 1: Attempt a Path Traversal Attack
    Start by trying a path traversal attack to read the server’s sensitive files.
     Path traversal attacks
    are used to access files outside the web application’s root folder. This process involves manipulating filepath variables the application uses to reference files by adding the
     ../
    characters to them. This sequence refers to the parent directory of the current directory in Unix systems, so by adding it to a filepath, you can often reach files outside the web root.
    尝试路径遍历攻击来读取服务器的敏感文件。路径遍历攻击用于访问网站应用程序根文件夹之外的文件。此过程涉及操作应用程序用于引用文件的文件路径变量，通过向其中添加 ../ 字符来实现。在Unix系统中这个序列代表当前目录的父目录，因此通过在文件路径中添加它，通常可以访问网站根目录之外的文件。
    For example, let’s say a website allows you to load an image in the application’s image folder by using a relative URL. An
     absolute
    URL contains an entire address, from the URL protocol to the domain name and pathnames of the resource.
     Relative
    URLs, on the other hand, contain only a part of the full URL. Most contain only the path or filename of the resource. Relative URLs are used to link to another location on the same domain.
    例如，假设一个网站允许您使用相对 URL 将图片加载到应用程序的图片文件夹中。绝对 URL 包含整个地址，从 URL 协议到域名和资源的路径名。相对 URL，则仅包含完整 URL 的一部分。大多数仅包含资源的路径或文件名。相对 URL 用于链接到同一域上的另一个位置。
    This URL, for example, will redirect users to
     https://example.com/images/1.png
    :
    例如，此URL将重定向用户到https://example.com/images/1.png：
 https://example.com/image?url=/images/1.png
    In this case, the
     url
    parameter contains a relative URL (
     /images/1.png
    ) that references files within the web application root. You can insert the
     ../
    sequence to try to navigate out of the images folder and out of the web root.
    For instance, the following URL refers to the
     index.html
    file at the web application’s root folder (and out of the
     images
    folder):
    在这种情况下，URL参数包含一个相对URL（/images/1.png），它引用了Web应用程序根目录中的文件。您可以插入../序列尝试导航出图像文件夹并从Web根导航出来。例如，以下URL引用Web应用程序根文件夹（并退出图像文件夹）中的index.html文件：
https://example.com/image?url=/images/../index.html
    Similarly, this one will access the
     /etc/shadow
    file at the server’s root directory, which is a file that stores a list of the system’s user accounts and their encrypted passwords:
    类似地，这个程序将访问位于服务器根目录下的 /etc/shadow 文件，该文件存储了系统用户账户及其加密密码的列表。
https://example.com/image?url=/images/../../../../../../../etc/shadow
    It might take some trial and error to determine how many
     ../
    sequences you need to reach the system’s root directory. Also, if the application implements some sort of input validation and doesn’t allow
     ../
    in the filepath, you can use encoded variations of
     ../
    , such as
     %2e%2e%2f
    (URL encoding),
     %252e%252e%255f
    (double URL encoding), and
     ..%2f
    (partial URL encoding).
    确定需要多少../序列才能到达系统的根目录可能需要一些尝试和错误。此外，如果应用程序实现了某种输入验证并且不允许在文件路径中使用../，您可以使用编码的../变体，例如%2e%2e%2f（URL编码），%252e%252e%255f（双重URL编码）和..%2f（部分URL编码）。
    Step 2: Search the Wayback Machine
    Another way to find exposed files is by using the Wayback Machine. Introduced in
     Chapter 5
    , the Wayback Machine is an online archive of what websites looked like at various points in time. You can use it to find hidden and deprecated endpoints, as well as large numbers of current endpoints without actively crawling the site, making it a good first look into what the application might be exposing.
    另一种查找暴露文件的方法是使用Wayback Machine。Wayback Machine 是一个在线网站归档，可以让你查看网站在不同时间点的外观。你可以使用它来查找隐藏和弃用的端点，以及大量当前端点，而不必主动遍历网站，因此是一个很好的第一步，了解应用程序可能暴露的内容。
    On the Wayback Machine’s site, simply search for a domain to see its past versions. To search for a domain’s files, visit
     https://web.archive.org/web/*/DOMAIN
    .
    在Wayback Machine的网站上，只需搜索域名即可查看其过去的版本。要搜索域名的文件，请访问 https://web.archive.org/web/*/DOMAIN。
    Add a
     /*
    to this URL to get the archived URLs related to the domain as a list. For example,
     https://web.archive.org/web/*/example.com/*
    will return a list of URLs related to
     example.com
    . You should see the URLs displayed on the Wayback Machine web page (
     Figure 21-1
    ).
    在URL末尾添加 /*，以获得与该域名相关的归档URL列表。例如，https://web.archive.org/web/*/example.com/* 将返回与example.com相关的URL列表。您应该可以在Wayback Machine网页上看到显示的URL（图21-1）。
       Figure 21-1
      : You can list the archived URLs of a domain on the Wayback Machine.
      图21-1：您可以在Wayback Machine上列出一个域名的存档URL。
    You can then use the search function to see whether any sensitive pages have been archived. For example, to look for admin pages, search for the term
     /admin
    in the found URLs (
     Figure 21-2
    ).
    然后您可以使用搜索功能查看是否已存档任何敏感页面。例如，要查找管理页面，请在找到的URL中搜索"/admin"一词（图21-2）。
       Figure 21-2
      : Search for keywords in the URLs to find potentially sensitive pages.
      图21-2：在URL中搜索关键字以查找潜在的敏感页面。
    You can also search for backup files and configuration files by using common file extensions like
     .conf
    (
     Figure 21-3
    ) and
     .env
    , or look for source code, like JavaScript or PHP files, by using the file extensions
     .js
    and
     .php
    .
    您也可以通过使用常见的文件扩展名，例如.conf（见图21-3）和.env搜索备份文件和配置文件，或通过使用文件扩展名.js和.php查找源代码，如JavaScript或PHP文件。
       Figure 21-3
      : Filter the URLs by file extension to find files of a certain type.
      图21-3：通过文件扩展名过滤URL，以查找特定类型的文件。
    Download interesting archived pages and look for any sensitive info. For example, are there any hardcoded credentials that are still in use, or does the page leak any hidden endpoints that normal users shouldn’t know about?
    下载有趣的归档页面，查找任何敏感信息。例如，是否存在仍在使用的硬编码凭据，或者页面是否泄漏了正常用户不应该知道的隐藏端点？
    Step 3: Search Paste Dump Sites
    Next, look into paste dump sites like Pastebin and GitHub gists. These let users share text documents via a direct link rather than via email or services like Google Docs, so developers often use them to send source code, configuration files, and log files to their coworkers. But on a site like Pastebin, for example, shared text files are public by default. If developers upload a sensitive file, everyone will be able to read it. For this reason, these code-sharing sites are pretty infamous for leaking credentials like API keys and passwords.
    下一步，查看类似Pastebin和GitHub gist的粘贴转储站点。这些允许用户通过直接链接共享文本文档，而不是通过电子邮件或像Google Docs这样的服务，因此开发人员经常使用它们向同事发送源代码、配置文件和日志文件。但是，在像Pastebin这样的网站上，共享的文本文件默认情况下是公开的。如果开发人员上传敏感文件，每个人都可以阅读它。因此，这些代码共享站点因泄漏API密钥和密码等凭据而相当臭名昭著。
    Pastebin has an API that allows users to search for public paste files by using a keyword, email, or domain name. You can use this API to find sensitive files that belong to a certain organization. Tools like PasteHunter or pastebin-scraper can also automate the process. Pastebin-scraper (
     https://github.com/streaak/pastebin-scraper/
    ) uses the Pastebin API to help you search for paste files. This tool is a shell script, so download it to a local directory and run the following command to search for public paste files associated with a particular keyword. The
     -g