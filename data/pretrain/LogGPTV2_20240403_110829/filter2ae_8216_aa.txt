基于栈的 VM 题，单纯从指令来讲并不难，只需要简单的解析一下即可分析出进行的运算，但是运算上的一些小细节加大了本题的难度。
## Analysis
main 函数没有太多的内容，主要是获取输入之后传入 vm 进行运算
运算出来的结果和正确的进行逐字节的对比
进入 vm ，程序根据指令调用不同的函数，共 19 种不同的函数
根据汇编和调试很容易看出来每一个函数的作用，可以写一个简单的 python 脚本用来分析
    while i < len(opcodes):
        if opcodes[i] == 0:
            print(hex(i)[2:].rjust(3, '0'), "inplace_add")
            i += 1
        elif opcodes[i] == 1:
            print(hex(i)[2:].rjust(3, '0'), "inplace_sub")
            i += 1
        elif opcodes[i] == 2:
            print(hex(i)[2:].rjust(3, '0'), "inplace_mul")
            i += 1
        elif opcodes[i] == 3:
            print(hex(i)[2:].rjust(3, '0'), "inplace_div")
            i += 1
        elif opcodes[i] == 4:
            print(hex(i)[2:].rjust(3, '0'), "inplace_mod")
            i += 1
        elif opcodes[i] == 5:
            print(hex(i)[2:].rjust(3, '0'), "inplace_and")
            i += 1
        elif opcodes[i] == 6:
            print(hex(i)[2:].rjust(3, '0'), "inplace_or")
            i += 1
        elif opcodes[i] == 7:
            print(hex(i)[2:].rjust(3, '0'), "inplace_xor")
            i += 1
        elif opcodes[i] == 8:
            print(hex(i)[2:].rjust(3, '0'), "stack[TOS1]=TOS")
            i += 1
        elif opcodes[i] == 9:
            print(hex(i)[2:].rjust(3, '0'), "TOS=stack[TOS]")
            i += 1
        elif opcodes[i] == 0xA:
            print(hex(i)[2:].rjust(3, '0'), "if TOS==0: TOS=1 else: TOS=0")
            i += 1
        elif opcodes[i] == 0xB:
            print(hex(i)[2:].rjust(3, '0'), "if TOS<0: TOS=1 else: TOS=0")
            i += 1
        elif opcodes[i] == 0xC:
            print(hex(i)[2:].rjust(3, '0'), "Inplace_swap")
            i += 1
        elif opcodes[i] == 0xD:
            print(hex(i)[2:].rjust(3, '0'), "remove_top")
            i += 1
        elif opcodes[i] == 0xE:
            tmp = (opcodes[i+1] | (opcodes[i+2] << 8) | opcodes[i+3]
                   << 16 | opcodes[i+4] << 24) & 0xffffffff
            print(hex(i)[2:].rjust(3, '0'), f"push {hex(tmp)}")
            i += 5
        elif opcodes[i] == 0xF:
            tmp = (opcodes[i+1] | (opcodes[i+2] << 8) | opcodes[i+3]
                   << 16 | opcodes[i+4] << 24) & 0xffffffff
            print(hex(i)[2:].rjust(3, '0'), f"jmp {hex((tmp+i+5)&0xffffffff)}")
            i += 5
        elif opcodes[i] == 0x10:
            tmp = (opcodes[i+1] | (opcodes[i+2] << 8) | opcodes[i+3]
                   << 16 | opcodes[i+4] << 24) & 0xffffffff
            print(hex(i)[2:].rjust(3, '0'), f"if TOS==1: jmp {hex(i+tmp+5)}")
            i += 5
        elif opcodes[i] == 0x11:
            tmp = (opcodes[i+1] | (opcodes[i+2] << 8) | opcodes[i+3]
                   << 16 | opcodes[i+4] << 24) & 0xffffffff
            print(hex(i)[2:].rjust(3, '0'), f"sub rsp,{hex(tmp)}")
            i += 5
        elif opcodes[i] == 0x12:
            tmp = (opcodes[i+1] | (opcodes[i+2] << 8) | opcodes[i+3]
                   << 16 | opcodes[i+4] << 24) & 0xffffffff
            print(hex(i)[2:].rjust(3, '0'), f"return {tmp}")
            i += 5
调试的时候可以发现传入该 vm 函数的并不仅仅是指令，而是一个结构体，结构体的定义如下
该 vm 是一个基于栈的 vm，所有的数据保存在栈上。调试中发现，该程序共传入了两套 vm
指令，做题时一开始以为只有一套指令，解不出结果之后才发现后续又运行了另一套指令。
为了更快做题，只是用上面写的脚本简单解析了一下这两套指令，对于虚拟机的题目，有一种处理方式是将每一个指令写成汇编指令集的形式，编译之后借助IDA等工具进行分析，好在这题的指令并不复杂，只要抓住特征很容易把算法还原出来。两套指令有相同的地方，但在运算和入栈的数据上有很大的区别。
可以很容易发现第一套指令在进行了异或操作之后，进行的是魔改版的 xtea 加密，有一个明显的特征在于进行了两次如下操作，左移 4 位，右移 5
位，异或并相加操作。
    148 push 0x10
    14d inplace_mul
    14e push 0xd
    153 TOS=stack[TOS]
    154 push 0x20
    159 Inplace_swap
    15a inplace_div
    15b inplace_xor
    15c push 0xd
    161 TOS=stack[TOS]
    162 inplace_add
修改的地方在于 sum 的初值和 delta 不同，加密轮次也不同，秘钥、sum 和 delta 都在程序开始时入栈，很容易找。
第二套指令同样进行异或操作，但是后续进行的是魔改版的 tea 加密，特征同样也很明显，出现了两次移位，两次异或，多次相加
    15a TOS=stack[TOS]
    15b push 0x10
    160 inplace_mul
    161 push 0x0
    166 push 0xe
    16b inplace_add
    16c TOS=stack[TOS]
    16d inplace_add
    16e push 0xd
    173 TOS=stack[TOS]
    174 push 0xb
    179 TOS=stack[TOS]
    17a inplace_add
    17b push 0xd
    180 TOS=stack[TOS]
    181 push 0x20
    186 Inplace_swap
    187 inplace_div
    188 push 0x1
    18d push 0xe
    192 inplace_add
    193 TOS=stack[TOS]
    194 inplace_add
    195 inplace_xor
    196 inplace_xor
    197 inplace_add