是使用一个如下所示的调用：
unsigned 1ongget_free_page(intgfp_mask）精确地分配一个页面的内存。
gtp_mask给出的是我们打算获得的内存页面的优先级和各种属性。在驱动程序里经常会用
到的如表21-13所示：
加入jaVva编程群：524621833
---
## Page 741
Linux程序设计
表21-13
GPP_A7OMIC
只要还行可用内存，就必须返问离用申请的内存：调用不允许阻寒，也不允许让硬盘交换分区
中的页面进人内存
GFP_KERNRL
只要还有可用内存，就必须返问调用申请的内存：但如果需要把页面交换出去才能有可用内存，
这个调用可能会被阴塞
GFP_DMA
为适个被用散DMA缓净区，返目的必须是前16MB望的内存，这个标志只适用于ISA外改。
丙为它奶不能对16MB以上的地址进行守地
如果你想在中断时间里分配内存，就必须指定GFP_ATOMIC一如果没有合适的页面，这
个标志将确保当前进程不会被调度出去：ISA板卡最多只能看到16MB的内存，如果你是在为某
个ISA外设分配·个DMA传输缓冲区的话，就必须指定GFP_DMA。根据计算机里插的内存容量
和内存段的划分策略，带GFP_DMA标志的内存分配不见得会成功。PCI设备没有这个限制，可
以使用__get_frec_pace证回的任何内存进i行DMA传输
get_free_l -ge is actually just a special case uof _get. frce_pages.
unsigned long _ get_free_pages(int gfp mask, unsigmed long order)
gtp_mask的作用和含义与刚才说的相同，order（幂序）却是个新概念。页面只能以2的瓣为
单位进行分配，也就是说，返回页面的个数将是2*PAGE_SIZE常数定义了软件内存页面的长
度，在Intel平台上这个值是12（2"个字节就是4KB）如果order等于0.就将返间一个长度为
PAGE_SIZE字节的内存页面，依此类推，内核在内部为不同的等序建立五个换算表，这就把order
的最大值限制为5、因此，在Intel平台上，一次内存分配最多可以让你得到128KB（2"×4=128）
读者可能奇怪为什么这个函数的名字是以双下划线“”打头的，这里有个非常好的解
释：它们l实际上.是ge_free_page和get_free_pages这两个函数的变体，但两个交体的执行速度更
快：这里的奥妙在于双下划线“”版本在返回内存贞面之前不对它们进行清理。如果你还需
要把内存拷问到用户空间应用程序去，最好对页面以前的内容进行清理一因为它们可能会在不
经意间存留着--些不应该传递到其他进程去的敏感信息._ge_free_page和__ge_free_pages执
行起来比较快，如果分配到的内存只用于内部，清理页画的工作一般是能省就省。
在用完内存后·定要记得再释放它们，这是非常非常重要的。内核不会在模块被卸载时
答模块回收由它们分配的内存页面，所以模块必须完全承担起自己的内存管理责任如表21-14
所示。
表21-14
void free_page(unsigned long addr)
释放内存地址addr处的一个或多个内存页面
void free_pages(unsigned long addr,
你必须记件自己分配的内存页面游长度，这是因为fr_pgrs
unsigr.ed long order)
需要你按分配内存时的顺序把它们提供出来
1. kmalloc
对设备驱动程序来说、通过get_free_page系列函数来分配内存多少有些麻烦，需要在内存管
理方面做大缺的工作。根据你想通过使用内存而达到的目的，单页面内存分配机制可能不是最
合适的方式。此外，单页面机制分配的内存其总长度以2的幂次递增，而你需要的内存长度一般
加入jaVa编程群：524621833
---
## Page 742
第21章设备馨动程序725
不会那幺正好。这就可能导致出现大量不能被利用的内存Linux为此准备了一个kmalloc函数、
它使你能够按自已的意愿分配任意长度的内存
void *xmalloc(size_t size,int flage)
码，作用和含义与get_frce_page系列的相网.长度限制依然存在—你还不能用它分配超过
128KB的内存。尝试分配更多的内存会在H志记录里留下个错误，例如告诉你“kmalloc：Size
(135168) too largea:
void kfree (con8t void *addr)
kfree将释效以前用kmalloc分配的内存.如果你习惯于在应用程序甲使用mailoc动态地分配
内存，也就会习惯使用kmalloc
2. vmalloc
获取内存的第--种也是最后一种办法是使用vmallocge_frcc_pagc和kmalloc返同的内存都
是物理连续的，但vmalloc提供的是噬拟地址空间里的连续内存，所以可以满足-此特殊的要求
它通过分配独立页面和处理内存页面表来实现其功能
vo1d *vmalloc(unsigned 1ong size)
void vfree(void *addr)
vmalloc允许分配的页面长度远大于kmalloc，但分配到的内存只能用在内核里面.传递给外
部设备的区域不能用vmalloc来分配，就是因为它们在物理地址空间是不连续的虚拟内行只能
用在内核/CPU上下文环境里，因为这里可以查看内存页面表。
vmalloc不能用在中断时间，这是因为它可能会被挂起.原因很简单，vmalloc在调用时没有
设置GFP_ATOMIC标志。这一般不会成为一个严重的问题，因为一个中断处理器需要的内存比
get_frec_pages能够分配的还要多的情况是极其少见的，甚至可以说是不正常的。
总而言之，vmalloc最适合内部存储使用。在块设备部分实现的RAM盘模块Radimo里就使用
了vmalloc来分配内存：
21.5.5在用户空间和内核空间之间传递数据
运行在系统上的应用程序只能访问PAGE_OFFSET分界线以下的内存。这就保证了任何进程
都不能覆盖由内核管理着的内存，不会影响到系统的稳定性和功能性。但是这也带来了一个问
题，那就是如何才能把数据回传到用户空间去。运行在内核环境里的进程允许访问两个内存空
间，但同时也必须验证进程给出的内存位置确实在它的虚拟内存区以内。
int access_ok(int type, const void *addr
unsigned 1ong 31ze1
如果能够以type方式对从地址addr开始字节长度为size的内存位置进行访问，面这个宏命
令将返间“1"，否则返回“0"。type的取值是VERIFY_READ或VERIFY_WRITE之一、这要根
据数据传输的方向面定。用户空间来、同方向上的每一次数据传输都必须先确认给定的地址是
合法的。完成这一确认工作的代码与机器的体系结构有关，大家可以在头文件asm/uaccess.h里
查到。
加入jaVva编程群：524621833
---
## Page 743
726Linux程序设计
数据传输实际上是由各种各样的函数来具体完成的，这要取决于被传输数据的长度（见表
21-15):
表21-15
get_user{void*x,const void*addr）从用户空间地址addr开始把size（addr)个字节拷贝到变量x里来
put_user（void*x，constvoid*adcr）从地址addr开始把size（addr)个字节拷贝到用户空间的变量x里
addr指针的类型必须是已知的，必要时要进行指针投射转换一正因为如此，这两个函数才
不需要有数据长度方面的参数。它们的实现相当难解，在刚才提到的头文件里可以查到它们的
代码清单。它们经常被用来实现iocu调用，因为那些调用经常需要来回传输些单值变量。
你可能奇怪为什么在Schar的代码里没有看到access_ok调用的身影。是这样的，因为经常会
错误地漏掉这个检查，所以人们把这个检查加到x_user系列函数里去了。如果数据拷贝成功，函
数返回值将是“0”：如果访问非法，返回值就将是“-EFAULT”。
_get_user(x, addr)
作上，面此时重复进行权限检查是多余的。请看下面这段代码：
char foo[21:
if (access_ok(VERIFY_wRITE, arg. 2*sizeof(*arg)){
put_ueer(foo[0].arg);
1else(
put_user(foo[1].arg+1);
return -EFAULT;
这只是个很简单的例子，但在原理上是很清晰的。x_user系列函数还有第三个版本。因为总
是要对返回值进行检查，访问非法时又总是返回“-EFAULT”，所以人们又编写了最后一种变体。
如下所示：
vold gat_uaex_ret(x, addx, ret)
void put_user_ret(x, addr, ret)
_ret版本会在出现错误时返回ret里的值一它们不返回一个错误代码。这就简化了ioctl命令
的程序设计，因而出现了下面这样简单的代码：
get_user_retitnp. {long *)arg. -EFAULT);
移动更多的数据
经常会出现需要拷贝的数据比几个单值变量要多的情况。如果还使用上面介绍的方法来编
写程序不行了，效率又很低，代码也难看。Linux提供了一些能够一次传递较多数据的函数。我
们在Schar的读、写函数里使用了其中的儿个。
copy_to_uaer(vold *to,void*from,unaigned lopgais)
copy_fxom_uaer(void *to, void *from, unsigned long qix#)
它们把总数为size个的字节拷贝到指针指定地点或从指定地点拷贝走。如果操作成功，函
数的返回值就将是“0”：如果访问不被允许，就将返回一个非零值（实际就是没有传输的字
加入jaVa编程群：524621833
---
## Page 744
第21章设备驱动程序727
节数），这是因为copy_xx_user系列函数内部也调用了access_ok。在Schar里可以找到…个下面
这样的例子：
if (copy_to_user(buf, schar_buffer. count))
return -EFAULT;
类似于get_user的情况，它们也有不进行权限检查的版本，而且同样是加上一个双下划线
“_”前缀。
_copy_to_user(void*to,vold *trom,unaigned long size)
_copy_fron_uner(void *to, void *from, unsigned long size)
最后，同样有在访问非法时返回ret的_ret变体，如下所示：
copy_to_user_xet（void *to, void *from, unsigmed iong size, int ret)
copy_from_user_ret(void *to, void *from, uneigned long slxe, int ret)
请大家注意，以上介绍的这些函数都必须运行在一个进程上下文环境里，这就意味着它们
在中断处理器和定时器函数等情况里的使用是严格禁止的。在这些情况里，内核函数不属于某
个特定的进程，因而无法知道current任务是否与你有任何关系。因此，在这些情况里，比较好
的办法是先把数据拷贝到一个由驱动程序负责管理的缓冲区里，过后再把数据转移到用户空间
去。我们马上就要开始学习的设备驱动程序缓冲区的内存映射技术可以解决这一问题，而且不
需要额外的拷贝操作。
21.5.6简单的内存映射
有时候，与其在内核空间和用户空间不停地来回拷贝数据，不如给应用程序提供一个办法，
让它能够连续地查看到设备里面的内存。这个概念就叫做内存映射，大家在编写应用程序的时
候可能用过这个技术来映射整个文件一一即不采用而向文件的普通读写调用面是通过指针来对文
件进行读写。如果不是这样，请读者再复习一下第3章对mmap的功能及其在用户空间使用情况
的介绍。事实上，许多概念在那里都解释过了，它们同样适用于解释我们在这里的操作。
直接向用户空间拷贝数据并不总是安全的。正在拷贝数据的进程可能会被调度器调度出去
而不能继续执行，而这对中断处理器等函数来说是致命的。解决方案之一是使用一个内部是缓
冲区，让这类函数对缓冲区进行读写，过后再把数据拷贝到适当的地方去。可这样做就需要对
同样的数据拷贝两次，一次拷贝到内部缓冲区，另一次拷贝到应用程序的内存区域，从而额外
增加了系统的开销。如果驱动程序本身实现有mmap文件操作入口点，它就能够向应用程序提供
一个直接查看自己驱动程序缓冲区的手段，也就不必读数据再做第二次拷贝操作了。
我们在Schar的file_operations结构里加上schar_mmap文件操作，以此来表示我们支持这一操
作。下面就是Schar里的具体实现情况：
static int schar_mmap(struct file *file.
struct vm_area_struct *vma)
1
unsigned long sizej
/*mmap flags - could be read and write.also */
加入jaVa编程群：524621833
---
## Page 745
728
Linux程序设计
/* we will not accept an offset into the page */
if [vma->vm_offset != 01 {
:(,uc oq ysme 1asggo :dewn,15H
return -EIWAL:
F
/* schar_buffer is only one paqe *.
MSG(*mmap: wanted $1u. but PAGE_SIZE 1s 1u\n'
return -EINVAL;
size, PAGE_SIZE) ,
/renap user buffer */
if (remap_page_range [vma->vs_sta1 t ,
size, vma->ve_page_prot)}
teturn -EAGAIN;
teturn 0:
我们的schar_mmap函数要用到两个参数，一个file文件结构和一个与我们的内存映射相关联
的虚拟内存区。我们已经在前面介绍过：vm_start和vm_end分别代表映射的开始和结束位置。
它们的差就是要求的长度。Schar的缓冲区只有一个页面长，所以尺寸更大的映射要求将会被拒
绝。vm_offset是缓冲区里面的偏移量。在我们的例子里，如果在区区一个页面里还使用偏移量
未免有点小题大做，所以我们的schar_mmap会拒绝执行指定了偏移量的内存映射操作。
最后一步最为重要。remap_page_range把内存页面表里从vma->wvm_start开始的内存区域的
总长度设置为size个字节。这样就把物理地址有效地映射到虚拟地址空间里来了。
remap_page_range(unsigned 1ong from, wneigoed 1ong phys_addx,
unsigned long slze, peprot_t prot)
如果操作成功，这个函数将返回“O”：如果失败则返回“-ENOMEM”。prot参数设定了这
个区域的保护属性：比如MAP_SHARED表示这是一个共享区域，而MAP_PRIVATE则表示这是
一个私用区域，等等。Schar把它直接从应用程序的mmap调用里传递给我们的函数。
被映射了的页面必须加上适当的操作锁以免被内核考虑用做其他用途。系统里的每一个内
存页面在mem_mapU数组里都有一个与之对应的项目，我们可以在那里查看到页面的分配情况
并对其属性做必要的设置。
unsigned long MAP_NR(unsigned 1ong page_addr) 返回页面在mem_mapl]
数组里的下标。
Schar分配了一个页面的内存，然后根据MAP_NR返回的下标调用mem_map_reserve，这是
为了保证Schar能够独占性地拥有这个页面。当我们的驱动程序被卸载时，这个页面上的操作锁
将被函数mem_map_unreserve解除，并在clcan_module里得到释放。这一连串操作的次序是很重
要的，因为frec_page不能释放被设置为独占性拥有的内存页面。内存页面的结构及其各种标志
和属性都可以在linux/mm.h头文件里查到
我们给出这个例子的目的是为了向大家演示如何利用remap_page_range来实现从用户空间对
内核中的虚拟内存的访问。但在许多实际情况里，人们更经常地利用驱动程序的内存映射功能
加入jaVa编程群：524621833
---
## Page 746
第21章设备驱动程序
来访问外部设备本身上面的缓冲区。接下来的内容是I/O内存，在这部分学习过程中，我们会简
单地介绍·一下怎样才能实现对外部设备自已的缓冲区进行访问。
21.5.71/O内存
IO内存是我们将要学习的最后：种地址空间、它包括IMB限制之下的ISA内存和高端的PCI
内存，但这两种内存的访问方法在概念上都是相同的，I/O内存不是普通息义上的内存，它们是
我们就是要对它们进行访问。示例模块lomap演示了有关操作的原理，可以用来实现对I/O内存
的读、写或内存映射操作。
I/O内存将被映射到什么地方在很大程度上要取决于具体使用的计算机平台。在lntel平台上，
只要对指针进行退化（即使指针不再具有索引功能）就可以用它来访问低端的内存。但退化指
针并不见得总能够落在物理内存的范围里，所以我们必须使用二次映射（remap，一般称之为
“二次映射”或“再映射”）来确保万无一失。
void *iorcmap (unsigned long offset. unsigned lcng hixe)
ioremap的作用是把一个物理内存地点映射为一个内核指针，被映射数据的长度由size参
数设定。Iomap模块的功能是把一块图形卡上的帧缓冲区（这类卡的主要用途就是提供赖缓冲
区）二次映射到一个我们可以从驱动程序里访问的虚拟地址上去。Iomap设备被定义为下面这
个结构：
struct Iomap{
unsigned
unsigned long size;
1ong base;
char *ptr:
结构定义里的base是帧缓冲区的起始地点（基地址），size是缓冲区的长度，ptr将用来保存
ioremap函数的返同值。基地址可以从/proc/pci注册项中查到—当然你得先有一块PCl或AGP适
配器才行。这个值就是下面列出来的prefetchable（预读）地址值：
cat/proc/pci
PCI devices found:
Bus 1,device 0, function 0:
VGA conpatible controller: MVidia Unknown device (rev 17) .