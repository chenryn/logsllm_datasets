影响性：高，可利用性：低
### 1.6.2. 标识
NCC-EF-Clef-001
### 1.6.3. 分类
配置不当
### 1.6.4. 位置
  * 权限设置initializeSecrets()，`cmd/clef/main.go`第228行
  * 权限检查`checkFile()`,`cmd/clef/main.go`第550行
### 1.6.5. 影响
`master`种子可能被删除或者覆盖，导致不能访问账户密码和`JavaScript`的规则文件哈希
### 1.6.6. 描述
`secrets.dat`文件包含了`master`种子，在存储和查询账户密码和`JavaScript`规则文件哈希值的时候需要用到这个种子。在实际中，这个文件只写一次，包含了重要的根密码，需要得到最大限度的保护。
`Master`种子生成和存储是`initializeSecrets()`的主要目的，该函数位于`cmd/clef/main.go`中。在代码228行，当权限设置为700时，可以进行写入硬盘的操作。权限700对应着拥有者的所有权限——读，写，执行。这样做的结果是，拥有者能够轻易地删除或者覆盖这个文件，从而导致不能访问存储的内容。原则上，这个拥有者还能够进行执行操作。
位于`cmd/clef/main.go`的`checkFile()`函数的主要目的是检查文件`secrets.dat`的权限。在代码550行，文件权限是读。将权限模式与077进行与运算，并且检查结果是否为0——任何非0结果将会报错。这与上面描述的`initializeSecrets()`确认存储权限设置是一致的。
对于`secrets.dat`，写权限和执行权限不应该被设置。对于`secrets.dat`文件的处理可以类比处理`SSH
keys`的[方法](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#troubleshoot-unprotected-key)。
分开来看，账户密码存储在`credentials.json`中，`JavaScript`规则文件哈希存储在`config.json`中。通过位于`signer/storageaes_gcm_storage.go`的`writeEncryptedStorage`函数，将它们的文件权限设置为600。这被认为合适的，这是因为读/写的本质，键值对的存储，实际上内容应该总是由`root
secret`来加密。
### 1.6.7. 修复建议
在`initializeSecrets()`中，`secrets.dat`的文件权限应该被设置为400(而不是700)。为了保持一致性，在`checkFile()`中，`secrets.dat`的文件权限应该是和377(而不是077)进行与运算。
### 1.6.8. 参考资料
`https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#troublesho
ot-unprotected-key`
## 1.7. 键值对加密存储的加密值可交换
### 1.7.1. 风险: 低危
影响性：低，可利用性：低
### 1.7.2. 标识
NCC-EF-Clef-003
### 1.7.3. 分类
加密
### 1.7.4. 位置
  * signer/storage/aes_gcm_storage.go
### 1.7.5. 影响
一个能够加密备份文件的攻击者能够交换用户的`keystore`的密文。这将会导致弱攻击(比如确认不同的私钥是否被同一个密码保护)，或者其他未知的依赖于Clef规则的复杂攻击
### 1.7.6. 描述
Clef命令行接口以加密的形式存储这下面的数据，目的是为了加快应用重启后的恢复速度:
  * `keystores`的密码(用于规则引擎)
  * `javascript`规则的存储
  * 规则文件的哈希
存储和加密是通过一个键值对存储的，只有值是通过`AES-GCM`来进行加密:
    // Put stores a value by key. 0-length keys results in no-op
    func (s *AESEncryptedStorage) Put(key, value string) {
        // ...
        ciphertext, iv, err := encrypt(s.key, []byte(value))
        // ...
        encrypted := storedCredential{Iv: iv, CipherText: ciphertext}
        data[key] = encrypted
        // ...
    }
键值对接下来被编码成`JSON`格式，并且保存在硬盘中，示例如下:
    {
        "key1": {
            "iv": "IQZYrnH0YjbcLmBD",
            "c": "oP2S7Li+YYPt2vQcfDgUlc/QaIk="
        },
        "key2": {
            "iv": "OVilp+zm+OvgH7Vm",
            "c": "DP7kmTyJR89nTMb1mfRPokIYRpg="
        }
    }
一个拥有恰当权限访问这些文件的攻击者能够篡改内容，交换`key1`和`key2`的内容，这样会使得读取`key1`值的时候，获取到`key2`的值
### 1.7.7. 修复建议
导入在`Seal()`和`Open()`函数的`additionalData`字段，主要部分键值对。详情查看[ciper
package](https://golang.org/pkg/crypto/cipher/)
### 1.7.8. 客户反馈
代码中添加了键值对的主要部分作为`AES-GCM`额外的数据:`https://github.com/holiman/go-ethereum/commit/913f77ca8c5c08749b9d668adeb1ab02bbc30663`
### 1.7.9. 参考资料
`https://golang.org/pkg/crypto/cipher/`
## 1.8. 暴露的 Clef API 缺乏指引
### 1.8.1. 风险：低危
影响性：低，可利用性：不确定
### 1.8.2. 标识
NCC-EF-Clef-004
### 1.8.3. 分类
拒绝服务
### 1.8.4. 位置
  * cmd/clef/main.go
### 1.8.5. 影响
有权访问 `Clef API` 的攻击者不断发送大量垃圾请求到接口上使其失效，导致用户强制重新启动应用程序才能处理合法请求。
### 1.8.6. 描述
有权访问 Clef 的公共 API 的攻击者（例如通过暴露在互联网的RPC接口）可以通过快速发送垃圾请求，导致产生大量需要用户按顺序手动处理进程。
如果执行此类攻击，最终用户将无法继续正常操作，除非重启程序。
此外，通过以太坊的RPC协议完成的请求未加密。虽然大多数API请求和响应最终可能都会发布在以太坊网络上，但“account_sign”方法（旨在为不同目的签署任意数据）还是应该被保密。
### 1.8.7. 复现步骤
使用 Clef 程序运行下面的`bash`脚本，将 RPC 接口暴露在 `localhost:8550`，然后可以观察到Clef
用户需要一个一个地接收请求。
    for i in {1..100}
    do curl --no-buffer -H "Content-Type: application/json" -X POST --data \
    '{"jsonrpc":"2.0","method":"account_new","params":["test"],"id":67}' localhost:8550 &
    done
    kill $(jobs -p)
### 1.8.8. 修复建议
对连接进行加密（通过TLS）并向Clef API验证客户端。或者，将这些任务委派给较低层协议或前端代理，或者添加文档用于警告用户不要将Clef的API暴露。
## 1.9. ECRecover不会对恢复的公钥进行身份验证
### 1.9.1. 风险：低危
影响性：不确定，可利用性：不确定
### 1.9.2. 标识
NCC-EF-Clef-009
### 1.9.3. 分类
加密
### 1.9.4. 位置
  * signer/core/api.go
### 1.9.5. 影响
根据此请求的使用情况，签名可能会被篡改从而恢复错误的公钥。
### 1.9.6. 描述
`Clef
API`公开了一种`EcRecover`方法，该方法允许从签名消息中恢复以太坊公钥。该方法实现了椭圆曲线密码学的高效密码组标准文档中的算法4.1.6（公钥恢复操作）。
如算法规范所述，可以从签名中恢复几个公钥。
这是由于`ECDSA`签名算法从签名的`r`值中删除了一些信息：只保留了x坐标（对于y坐标可以恢复2个解）并且它以椭圆曲线的顺序进一步减小。 而以太坊使用了
`secp256k1`，其曲线顺序略低于场模量，因此确实丢失了信息。曲线使用辅助因子1，则算法的可能解决方案的数量是2×（1 + 1）= 4。
为了使恢复算法恢复正确的结果，在每个以太坊签名的末尾都添加一个v字节。其最低有效位包含r值的y坐标的符号，其余位包含用于重新计算r值的x坐标的信息。
由于这些位可能被篡改，攻击者在某些情况下可能会通过导入错误的公钥来欺骗算法。
### 1.9.7. 修复建议
为了验证恢复的密钥，Clef需要：
  1. 验证密钥是否可用于验证请求中传递的签名。 这是SEC算法的步骤1.6.2，Clef没有实现。
  2. 将恢复的公钥与以太坊地址或其他身份验证机制进行匹配。
为了防止这些攻击，需要更改Clef的API以接受额外的“身份验证”参数。
### 1.9.8. 客户反馈
ECRecover 方法已经从Clef API 移除：github.com/holiman/go-ethereum/commit/cf3bf1724e58cc85ec87cb39a0aee0cb246c472e
[SEC 1: Elliptic Curve Cryptography version
2.0](http://www.secg.org/sec1-v2.pdf)
## 1.10. 过时的依赖关系
### 1.10.1. 风险：低危
影响性：不确定，可利用性：不确定
### 1.10.2. 标识
NCC-EF-Clef-011
### 1.10.3. 分类
修补
### 1.10.4. 位置
  * signer/rules/deps/bignumber.js found at
  * `https://github.com/holiman/go-ethereum/blob/clefchanges_2/signer/rules/deps`
  * `https://github.com/ethereum/go-ethereum/blob/master/signer/rules/deps`
  * vendor/vendor.json found at
  * `https://github.com/holiman/go-ethereum/blob/clefchanges_2/vendor`
  * `[github.com/ethereum/go-ethereum/blob/master/vendor](https://github.com/ethereum/go-ethereum/blob/master/vendor)`
Impact Outdated dependencies may expose the application to publicly discovered
vu
### 1.10.5. 影响
过时的依赖项可能会将应用程序暴露给公开发现的漏洞。
### 1.10.6. 描述
迄今为止，许多最大的漏洞都依赖于利用过时组件中的已知漏洞。`Clef`和`Go-ethereum`
代码库从许多过时的组件中提取，尽管目前没有众所周知的漏洞。风险与组件功能和数据敏感性，开发活动和质量，流行度以及项目依赖性更新之间的时间长度成正比。由于此问题普遍存在，OWASP项目在《十大最关键Web应用程序安全风险》中列出了此风险。
`signer/rules/rules.go` 代码利用
`signer/rules/deps/bindata.go`实质上加载`bignumber.js`库，用于任意精度的十进制和非十进制算术。
该库的源代码是`signer/rules/deps/bignumber.js`，版本为2.0.3。
此项目的更改日志表示此版本于2015年2月发布，而最新版本为7.2.1。NCC Group 不知道此库中存在任何公开已知的漏洞。
`vendor/vendor.json` 文件列出了大约154个Golang依赖项，其修订时间戳从2015年初到2018年8月。其中大部分已过期且可以更新。
例如，来自`https://github.com/huin/goupnp`的Go存储库的UPnP客户端库的七个组件，其提交哈希值为`679507af18f3c7ba2bcc7905392ce23e148661c3`，于2016年12月提交，即11个提交已过期。
### 1.10.7. 修复建议
将项目依赖项更新为建议用于生产部署的最新且稳定的版本。作为开发过程的一部分，包括定期审查依赖性更新情况。
### 1.10.8. 参考资料
`https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf`