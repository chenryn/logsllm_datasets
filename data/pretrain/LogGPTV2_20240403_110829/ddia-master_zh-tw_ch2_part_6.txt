在属性图模型中，每个顶点（vertex）包括：
* 唯一的识别符号
* 一组出边（outgoing edges）
* 一组入边（ingoing edges）
* 一组属性（键值对）
每条边（edge）包括：
* 唯一识别符号
* 边的起点（**尾部顶点**，即 tail vertex）
* 边的终点（**头部顶点**，即 head vertex）
* 描述两个顶点之间关系型别的标签
* 一组属性（键值对）
可以将图储存看作由两个关系表组成：一个储存顶点，另一个储存边，如 [例 2-2]() 所示（该模式使用 PostgreSQL JSON 资料型别来储存每个顶点或每条边的属性）。头部和尾部顶点用来储存每条边；如果你想要一组顶点的输入或输出边，你可以分别透过 `head_vertex` 或 `tail_vertex` 来查询 `edges` 表。
**例 2-2 使用关系模式来表示属性图**
```sql
CREATE TABLE vertices (
  vertex_id  INTEGER PRIMARY KEY,
  properties JSON
);
CREATE TABLE edges (
  edge_id     INTEGER PRIMARY KEY,
  tail_vertex INTEGER REFERENCES vertices (vertex_id),
  head_vertex INTEGER REFERENCES vertices (vertex_id),
  label       TEXT,
  properties  JSON
);
CREATE INDEX edges_tails ON edges (tail_vertex);
CREATE INDEX edges_heads ON edges (head_vertex);
```
关于这个模型的一些重要方面是：
1. 任何顶点都可以有一条边连线到任何其他顶点。没有模式限制哪种事物可不可以关联。
2. 给定任何顶点，可以高效地找到它的入边和出边，从而遍历图，即沿著一系列顶点的路径前后移动（这就是为什么 [例 2-2]() 在 `tail_vertex` 和 `head_vertex` 列上都有索引的原因）。
3. 透过对不同型别的关系使用不同的标签，可以在一个图中储存几种不同的资讯，同时仍然保持一个清晰的资料模型。
这些特性为资料建模提供了很大的灵活性，如 [图 2-5](../img/fig2-5.png) 所示。图中显示了一些传统关系模式难以表达的事情，例如不同国家的不同地区结构（法国有省和大区，美国有县和州），国中国的怪事（先忽略主权国家和民族错综复杂的烂摊子），不同的资料粒度（Lucy 现在的住所记录具体到城市，而她的出生地点只是在一个州的级别）。
你可以想象该图还能延伸出许多关于 Lucy 和 Alain 的事实，或其他人的其他更多的事实。例如，你可以用它来表示食物过敏（为每个过敏源增加一个顶点，并增加人与过敏源之间的一条边来指示一种过敏情况），并连结到过敏源，每个过敏源具有一组顶点用来显示哪些食物含有哪些物质。然后，你可以写一个查询，找出每个人吃什么是安全的。图在可演化性方面是富有优势的：当你向应用程式新增功能时，可以轻松扩充套件图以适应程式资料结构的变化。
### Cypher 查询语言
Cypher 是属性图的宣告式查询语言，为 Neo4j 图形资料库而发明【37】（它是以电影 “骇客帝国” 中的一个角色来命名的，而与密码学中的加密演算法无关【38】）。
[例 2-3]() 显示了将 [图 2-5](../img/fig2-5.png) 的左边部分插入图形资料库的 Cypher 查询。你可以以类似的方式把图的剩余部分新增进去，但这里为了文章可阅读性而省略这部分的示例。每个顶点都有一个像 `USA` 或 `Idaho` 这样的符号名称，查询的其他部分可以使用这些名称在顶点之间建立边，使用箭头符号：`（Idaho） - [：WITHIN] ->（USA）` 建立一条标记为 `WITHIN` 的边，`Idaho` 为尾节点，`USA` 为头节点。
**例 2-3 将图 2-5 中的资料子集表示为 Cypher 查询**
```cypher
CREATE
  (NAmerica:Location {name:'North America', type:'continent'}),
  (USA:Location      {name:'United States', type:'country'  }),
  (Idaho:Location    {name:'Idaho',         type:'state'    }),
  (Lucy:Person       {name:'Lucy' }),
  (Idaho) -[:WITHIN]->  (USA)  -[:WITHIN]-> (NAmerica),
  (Lucy)  -[:BORN_IN]-> (Idaho)
```
当 [图 2-5](../img/fig2-5.png) 的所有顶点和边被新增到资料库后，让我们提些有趣的问题：例如，找到所有从美国移民到欧洲的人的名字。更确切地说，这里我们想要找到符合下面条件的所有顶点，并且返回这些顶点的 `name` 属性：该顶点拥有一条连到美国任一位置的 `BORN_IN` 边，和一条连到欧洲的任一位置的 `LIVING_IN` 边。
[例 2-4]() 展示了如何在 Cypher 中表达这个查询。在 MATCH 子句中使用相同的箭头符号来查询图中的模式：`(person) -[:BORN_IN]-> ()` 可以匹配 `BORN_IN` 边的任意两个顶点。该边的尾节点被绑定了变数 `person`，头节点则未被系结。
**例 2-4 查询所有从美国移民到欧洲的人的 Cypher 查询：**
```cypher
MATCH
  (person) -[:BORN_IN]->  () -[:WITHIN*0..]-> (us:Location {name:'United States'}),
  (person) -[:LIVES_IN]-> () -[:WITHIN*0..]-> (eu:Location {name:'Europe'})
RETURN person.name
```
查询按如下来解读：
> 找到满足以下两个条件的所有顶点（称之为 person 顶点）：
> 1.  `person` 顶点拥有一条到某个顶点的 `BORN_IN` 出边。从那个顶点开始，沿著一系列 `WITHIN` 出边最终到达一个型别为 `Location`，`name` 属性为 `United States` 的顶点。
>
> 2. `person` 顶点还拥有一条 `LIVES_IN` 出边。沿著这条边，可以透过一系列 `WITHIN` 出边最终到达一个型别为 `Location`，`name` 属性为 `Europe` 的顶点。
>
> 对于这样的 `Person` 顶点，返回其 `name` 属性。
执行这条查询可能会有几种可行的查询路径。这里给出的描述建议首先扫描资料库中的所有人，检查每个人的出生地和居住地，然后只返回符合条件的那些人。
等价地，也可以从两个 `Location` 顶点开始反向地查询。假如 `name` 属性上有索引，则可以高效地找到代表美国和欧洲的两个顶点。然后，沿著所有 `WITHIN` 入边，可以继续查找出所有在美国和欧洲的位置（州、地区、城市等）。最后，查找出那些可以由 `BORN_IN` 或 `LIVES_IN` 入边到那些位置顶点的人。
通常对于宣告式查询语言来说，在编写查询语句时，不需要指定执行细节：查询最佳化程式会自动选择预测效率最高的策略，因此你可以专注于编写应用程式的其他部分。
### SQL 中的图查询
[例 2-2]() 指出，可以在关系资料库中表示图资料。但是，如果图资料已经以关系结构储存，我们是否也可以使用 SQL 查询它？
答案是肯定的，但有些困难。在关系资料库中，你通常会事先知道在查询中需要哪些连线。在图查询中，你可能需要在找到待查询的顶点之前，遍历可变数量的边。也就是说，连线的数量事先并不确定。
在我们的例子中，这发生在 Cypher 查询中的 `() -[:WITHIN*0..]-> ()` 规则中。一个人的 `LIVES_IN` 边可以指向任何型别的位置：街道、城市、地区、国家等。一个城市可以在（WITHIN）一个地区内，一个地区可以在（WITHIN）在一个州内，一个州可以在（WITHIN）一个国家内，等等。`LIVES_IN` 边可以直接指向正在查询的位置，或者一个在位置层次结构中隔了数层的位置。
在 Cypher 中，用 `WITHIN*0..` 非常简洁地表述了上述事实：“沿著 `WITHIN` 边，零次或多次”。它很像正则表示式中的 `*` 运算子。
自 SQL:1999，查询可变长度遍历路径的思想可以使用称为 **递回公用表表达式**（`WITH RECURSIVE` 语法）的东西来表示。[例 2-5]() 显示了同样的查询 - 查询从美国移民到欧洲的人的姓名 - 在 SQL 使用这种技术（PostgreSQL、IBM DB2、Oracle 和 SQL Server 均支援）来表述。但是，与 Cypher 相比，其语法非常笨拙。
**例 2-5  与示例 2-4 同样的查询，在 SQL 中使用递回公用表表达式表示**
```sql
WITH RECURSIVE