# 最近GD库拒绝服务漏洞分析与EXP构造(CVE-2018-5711)
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
最近爆出PHP GD库拒绝服务攻击漏洞，影响的版本比较多。官方上有漏洞的报告，但是看下来还是有不懂的地方，于是下载源码自己分析下。
## 0x01 漏洞分析
    There is a do-while in file `ext/gd/libgd/gd_gif_in.c` and function `LWZReadByte_`
    do {
        sd->firstcode = sd->oldcode =
        GetCode(fd, &sd->scd, sd->code_size, FALSE, ZeroDataBlockP);
    } while (sd->firstcode == sd->clear_code);
    https://github.com/php/php-src/blob/c5767db441e4db2a1e07b5880129ad7ce0b25b6f/ext/gd/libgd/gd_gif_in.c#L460
    The implementation of `GetCode` is in `GetCode_`
    static int
    GetCode_(gdIOCtx *fd, CODE_STATIC_DATA *scd, int code_size, int flag, int *ZeroDataBlockP)
    {
        int           i, j, ret;
        unsigned char count;
        ... 
        if ((count = GetDataBlock(fd, &scd->buf[2], ZeroDataBlockP)) done = TRUE;
        ...
    }
    https://github.com/php/php-src/blob/c5767db441e4db2a1e07b5880129ad7ce0b25b6f/ext/gd/libgd/gd_gif_in.c#L376
    As you can see, `GetDataBlock` will read the image data and return the length. If EOF, returned -1. But the variable `count` is `unsigned char`, will always be positive value. So the line `scd->done = TRUE` will never be executed.
根据官方的报告，`LWZReadByte_` 这个函数会造成死循环，原因是由于`count`变量是`unsigne
char`,永远不会是负数，从而无法判断图片是否读取完毕，造成`scd->done =
TRUE`无法执行，一开始没有想到这个报告很懒，还疑问那岂不是所有的`GIF`图片都会造成拒绝服务了（还真去拿普通的GIF图片试了试）。
其实还要满足`sd->firstcode == sd->clear_code`才能造成死循环。
    do {
        sd->firstcode = sd->oldcode =
        GetCode(fd, &sd->scd, sd->code_size, FALSE, ZeroDataBlockP);
    } while (sd->firstcode == sd->clear_code);
那为什么报告中要指出`scd->done =
TRUE`无法执行。看这个函数上面，发现有一个`if`的判断，如果`scd->done`为`True`,则会直接返回`-1`。那么`sd->firstcode
== sd->clear_code`永远不会成立了，造成循环退出。所以`scd->done`一定不能为`True`。  
[gd_gif_in.c#L389](https://github.com/php/php-src/blob/c5767db441e4db2a1e07b5880129ad7ce0b25b6f/ext/gd/libgd/gd_gif_in.c#L389
"GetCode_第389行")
    if ( (scd->curbit + code_size) >= scd->lastbit) {
        if (scd->done) {
            if (scd->curbit >= scd->lastbit) {
                /* Oh well */
            }
            return -1;
        }
        scd->buf[0] = scd->buf[scd->last_byte-2];
        scd->buf[1] = scd->buf[scd->last_byte-1];
        if ((count = GetDataBlock(fd, &scd->buf[2], ZeroDataBlockP)) done = TRUE;
        scd->last_byte = 2 + count;
        scd->curbit = (scd->curbit - scd->lastbit) + 16;
        scd->lastbit = (2+count)*8 ;
    }
上面仅仅是为了满足不返回`-1`，但是还要满足返回结果等于`sd->clear_code`。接下来的`ret`结果由下面的代码控制。通过构造GIF,可以控制`ret`的返回结果。而`sd->clear_code`也是可以控制。从而达到死循环。  
[gd_gif_in.c#L407](https://github.com/php/php-src/blob/c5767db441e4db2a1e07b5880129ad7ce0b25b6f/ext/gd/libgd/gd_gif_in.c#L407
"GetCode_第407行")
    if ((scd->curbit + code_size - 1) >= (CSD_BUF_SIZE * 8)) {
        ret = -1;
    } else {
        ret = 0;
        for (i = scd->curbit, j = 0; j buf[i / 8] & (1 curbit += code_size;
    return ret;
## 0x02 EXP构造
漏洞成因分析完了，知道EXP的关键点是控制`sd->clear_code`与`GetCode_`函数返回结果一致。
###  1.控制sd->clear_code
首先分下`sd->clear_code`是从哪里获取的。
获取函数的参数`input_code_size`，然后再把`1`左移`input_code_size`位。得到`sd->clear_code`。  
[gd_gif_in.c#L431](https://github.com/php/php-src/blob/c5767db441e4db2a1e07b5880129ad7ce0b25b6f/ext/gd/libgd/gd_gif_in.c#L431
"gd_gif_in.c#L431")
    static int
    LWZReadByte_(gdIOCtx *fd, LZW_STATIC_DATA *sd, char flag, int input_code_size, int *ZeroDataBlockP)
    {
        int code, incode, i;
        if (flag) {
            sd->set_code_size = input_code_size;
            sd->code_size = sd->set_code_size+1;
            sd->clear_code = 1 set_code_size ;
            sd->end_code = sd->clear_code + 1;
            sd->max_code_size = 2*sd->clear_code;
            sd->max_code = sd->clear_code+2;
再追踪下调用`LWZReadByte`函数的地方，并且`flag`为`TRUE`。这里看到`input_code_size`为`c`。  
[gd_gif_in.c#L586](https://github.com/php/php-src/blob/c5767db441e4db2a1e07b5880129ad7ce0b25b6f/ext/gd/libgd/gd_gif_in.c#L586
"gd_gif_in.c#L586")
    if (LWZReadByte(fd, &sd, TRUE, c, ZeroDataBlockP) clear_code`的值。
###  2.控制GetCode_返回结果ret
接下来就是控制`GetCode_`的返回结果ret,由如下代码控制。  
[gd_gif_in.c#L389](https://github.com/php/php-src/blob/c5767db441e4db2a1e07b5880129ad7ce0b25b6f/ext/gd/libgd/gd_gif_in.c#L389
"GetCode_第389行")
    if ( (scd->curbit + code_size) >= scd->lastbit) {
        if (scd->done) {
            if (scd->curbit >= scd->lastbit) {
                /* Oh well */
            }
            return -1;
        }
        scd->buf[0] = scd->buf[scd->last_byte-2];
        scd->buf[1] = scd->buf[scd->last_byte-1];
        if ((count = GetDataBlock(fd, &scd->buf[2], ZeroDataBlockP)) done = TRUE;
        scd->last_byte = 2 + count;
        scd->curbit = (scd->curbit - scd->lastbit) + 16;
        scd->lastbit = (2+count)*8 ;
    }
    if ((scd->curbit + code_size - 1) >= (CSD_BUF_SIZE * 8)) {
        ret = -1;
    } else {
        ret = 0;
        for (i = scd->curbit, j = 0; j buf[i / 8] & (1 curbit += code_size;
    return ret;
最为关键的是如下代码。
    for (i = scd->curbit, j = 0; j buf[i / 8] & (1 buf`是通过`GetDataBlock`获取到如下图data蓝色部分。内容全部为一样，因为可以使`scd->buf[i /
8]`保证获取到一个固定值。便于控制`ret`的结果。
还有`（1 buf[i/8]= 0xAA`满足下面条件就可以返回`2`的结果。
    scd->buf[i/8]&1==0 and scd->buf[i/8]&2!=0 and scd->buf[i/8]&4==0 and scd->buf[i/8]&8!=0 and scd->buf[i/8]&16==0 and scd->buf[i/8]&32!=0 and scd->buf[i/8]&64==0 and scd->buf[i/8]&128!=0
###  3.完整构造EXP过程
在`LZWMinimumCodeSize`设置为`1`。那么`sd->clear_code`值为`2`。这个时候`GetCode`返回的值也必须是`2`。
    do {
        sd->firstcode = sd->oldcode =
            GetCode(fd, &sd->scd, sd->code_size, FALSE, ZeroDataBlockP);
    } while (sd->firstcode == sd->clear_code);
    return sd->firstcode;
此时`code_size`为`2`。
    for (i = scd->curbit, j = 0; j buf[i / 8] & (1 buf[i / 8] & (1 buf[i /  8]  &  (1  buf[i /  8]  &  (1  buf[i/8]`一直是固定值，`(1 buf[i
/ 8]`为哪个固定值的时候，可以满足上面提出的条件。下面python脚本跑出结果`x`的值是`170(0XAA)`。
    for x in range(0,255):
        if(x&1==0 and x&2!=0 and x&4==0 and x&8!=0 and x&16==0 and x&32!=0 and x&64==0 and x&128!=0):
            print(x)
于是对正常的图片进行如下填充就完成EXP的构造了  
再看下官方给出的EXP  
`code_size`为`4`，所以python脚本如下：
    for x in range(0,255):
        if(x&1==0 and x&2==0 and x&4==0 and x&8!=0 and x&16==0 and x&32==0 and x&64==0 and x&128!=0):
            print(x)
跑出结果`x`为`136（0x88）`。图片里面也是用`0x88`填充的。
## 0x03参考