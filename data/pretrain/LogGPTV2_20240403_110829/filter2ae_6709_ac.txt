        ++*(_DWORD *)(v10 + 0x14);
        v11 = (SRVNET_BUFFER_HDR *)ExpInterlockedPopEntrySList((PSLIST_HEADER)v10);
举个例子（单核系统），假设需要的缓冲区长度为0x10101（需要0x20100大小的缓冲区来存放），得到SrvNetBufferLookasides表中的索引为5，最终通过一步一步索引得到缓冲区0xffffcc0f775f0150（熟悉的SRVNET_BUFFER_HDR结构）：
    kd> 
    srvnet!SrvNetAllocateBuffer+0x5d:
    fffff806`2280679d 440fb7c5        movzx   r8d,bp
    //SrvNetBufferLookasides表  大小0x48 索引0-8
    kd> dq rcx   
    fffff806`228350f0  ffffcc0f`7623dd00 ffffcc0f`7623d480
    fffff806`22835100  ffffcc0f`7623dc40 ffffcc0f`7623d100
    fffff806`22835110  ffffcc0f`7623dd80 ffffcc0f`7623d640
    fffff806`22835120  ffffcc0f`7623db40 ffffcc0f`7623dbc0
    fffff806`22835130  ffffcc0f`7623de00 
    //SrvNetBufferLookasides[5]  单核系统核心数1再加1为2（第一项）
    kd> dq ffffcc0f`7623d640
    ffffcc0f`7623d640  00000000`00000002 6662534c`3030534c
    ffffcc0f`7623d650  00000000`00020100 00000000`00000200
    ffffcc0f`7623d660  ffffcc0f`762356c0 00000000`00000000
    ffffcc0f`7623d670  00000000`00000000 00000000`00000000
    //上面的结构偏移0x20
    kd> dq ffffcc0f`762356c0
    ffffcc0f`762356c0  ffffcc0f`75191ec0 ffffcc0f`75192980
    //上面的结构偏移8      v8 = v7 = 2 - 1 = 1
    kd> dq ffffcc0f`75192980
    ffffcc0f`75192980  00000000`00090001 ffffcc0f`775f0150
    ffffcc0f`75192990  00000009`01000004 00000009`00000001
    ffffcc0f`751929a0  00000200`00000000 00020100`3030534c
    ffffcc0f`751929b0  fffff806`2280d600 fffff806`2280d590
    ffffcc0f`751929c0  ffffcc0f`76047cb0 ffffcc0f`75190780
    ffffcc0f`751929d0  00000001`00000009 00000000`00000000
    ffffcc0f`751929e0  ffffcc0f`75191ec0 00000000`00000000
    ffffcc0f`751929f0  00000000`00000001 00000000`00000000
    //ExpInterlockedPopEntrySList弹出偏移8处的0xffffcc0f775f0150，还是熟悉的味道（SRVNET_BUFFER_HDR）
    kd> dd ffffcc0f`775f0150
    ffffcc0f`775f0150  00000000 00000000 72f39558 ffffcc0f
    ffffcc0f`775f0160  00050000 00000000 775d0050 ffffcc0f
    ffffcc0f`775f0170  00020100 00000000 00020468 00000000
    ffffcc0f`775f0180  775d0000 ffffcc0f 775f01e0 ffffcc0f
    ffffcc0f`775f0190  00000000 6f726274 00000000 00000000
    ffffcc0f`775f01a0  775f0320 ffffcc0f 00000000 00000000
    ffffcc0f`775f01b0  00000000 00000001 63736544 74706972
    ffffcc0f`775f01c0  006e6f69 00000000 ffffffd8 00610043
SrvNetBufferLookasides是由自定义的SrvNetCreateBufferLookasides函数初始化的。如下所示，这里其实就是以1
= 9 )
          return 0i64;
      }
以下为对SRVNET_BUFFER_HDR结构的初始化过程，v7为 length（满足 (1 PoolAllocationPtr = v8;
      v12->pMdl2 = (PMDL)((unsigned __int64)&v12->unknown3[v5 + 0xF] & 0xFFFFFFFFFFFFFFF8ui64);
      v13 = (_MDL *)((unsigned __int64)&v12->unknown3[0xF] & 0xFFFFFFFFFFFFFFF8ui64);
      v12->UserBufferPtr = v8 + 0x50;
      v12->pMdl1 = v13;
      v12->BufferFlags = 0;
      v12->TracingDataCount = 0;
      v12->UserBufferSizeAllocated = v2;
      v12->UserBufferSizeUsed = 0;
      v14 = ((_WORD)v8 + 0x50) & 0xFFF;
      v12->PoolAllocationSize = v7;
      v12->BytesProcessed = 0;
      v12->BytesReceived = 0i64;
      v12->pSrvNetWskStruct = 0i64;
      v12->SmbFlags = 0;
    //SRVNET_BUFFER_HDR 例：
    kd> dq rdi
    ffffcc0f`76fed150  00000000`00000000 00000000`00000000
    ffffcc0f`76fed160  00000000`00000000 ffffcc0f`76fe9050
    ffffcc0f`76fed170  00000000`00004100 00000000`000042a8
    ffffcc0f`76fed180  ffffcc0f`76fe9000 ffffcc0f`76fed1e0
    ffffcc0f`76fed190  00000000`00000000 00000000`00000000
    ffffcc0f`76fed1a0  ffffcc0f`76fed240 00000000`00000000
    ffffcc0f`76fed1b0  00000000`00000000 00000000`00000000
    ffffcc0f`76fed1c0  00000000`00000000 00000000`00000000
通过MmSizeOfMdl函数获取MDL结构长度，以下为获取0x41e8长度空间所需的MDL结构长度 ( 0x58
)，其中，0x30为基础长度，0x28存放5个物理页的pfn（0x41e8长度的数据需要存放在5个页）。
    kd> 
    srvnet!SrvNetAllocateBufferFromPool+0x62:
    fffff806`2280d2d2 e809120101      call    nt!MmSizeOfMdl (fffff806`2381e4e0)
    kd> r rcx
    rcx=0000000000000000
    kd> r rdx     //0x4100 + 0xe8
    rdx=00000000000041e8
    kd> p
    srvnet!SrvNetAllocateBufferFromPool+0x67:
    fffff806`2280d2d7 488d6808        lea     rbp,[rax+8]
    kd> r rax    //0x30+0x28
    rax=0000000000000058
    kd> dt _mdl
    nt!_MDL
       +0x000 Next             : Ptr64 _MDL
       +0x008 Size             : Int2B
       +0x00a MdlFlags         : Int2B
       +0x00c AllocationProcessorNumber : Uint2B
       +0x00e Reserved         : Uint2B
       +0x010 Process          : Ptr64 _EPROCESS
       +0x018 MappedSystemVa   : Ptr64 Void
       +0x020 StartVa          : Ptr64 Void
       +0x028 ByteCount        : Uint4B
       +0x02c ByteOffset       : Uint4B
MmBuildMdlForNonPagedPool函数调用后，MdlFlags被设置为4，且对应的物理页pfn被写入MDL结构，
_然后通过MmMdlPageContentsState函数以及或操作将MdlFlags设置为0x5004（20484）。_
    kd> 
    srvnet!SrvNetAllocateBufferFromPool+0x1b0:
    fffff806`2280d420 e8eb220301      call    nt!MmBuildMdlForNonPagedPool (fffff806`2383f710)
    kd> dt _mdl @rcx
    nt!_MDL
       +0x000 Next             : (null) 
       +0x008 Size             : 0n88
       +0x00a MdlFlags         : 0n0
       +0x00c AllocationProcessorNumber : 0
       +0x00e Reserved         : 0
       +0x010 Process          : (null) 
       +0x018 MappedSystemVa   : (null) 
       +0x020 StartVa          : 0xffffcc0f`76fe9000 Void
       +0x028 ByteCount        : 0x4100
       +0x02c ByteOffset       : 0x50
    kd> dd rcx
    ffffcc0f`76fed1e0  00000000 00000000 00000058 00000000
    ffffcc0f`76fed1f0  00000000 00000000 00000000 00000000
    ffffcc0f`76fed200  76fe9000 ffffcc0f 00004100 00000050
    ffffcc0f`76fed210  00000000 00000000 00000000 00000000
    ffffcc0f`76fed220  00000000 00000000 00000000 00000000
    ffffcc0f`76fed230  00000000 00000000 00000000 00000000
    ffffcc0f`76fed240  00000000 00000000 00000000 00000000