### Table IX: Results with Background Workload (Columns "N") and Core-Remapping (Columns "CR")

Table IX presents the results for both background workload (columns with “N”) and core-remapping (columns with “CR”). A reduction in the number of pattern traces is observed, dropping from 56 to 40, primarily due to noise interference with the probe, which causes some delay traces to be filtered out by our script. However, the accuracy (ACC1) remains similar, at 97.1% compared to 97.2% in Table VIII. This suggests that the attack can still be successful in a noisy environment if more delay traces are collected.

| Pattern | N, CR (Count) | ACC1 (N, CR) | Perfect (N, CR) | ACC3 (N, CR) |
|---------|---------------|--------------|-----------------|--------------|
| A       | 2, 3          | 96.2%, 99.5% | 0, 2            | 21.0%, 30.1% |
| B       | 14, 11        | 98.5%, 99.0% | 4, 5            | 22.8%, 26.7% |
| C       | 24, 18        | 96.3%, 95.1% | 1, 1            | 20.8%, 19.7% |
| All     | 40, 32        | 97.1%, 96.9% | 5, 8            | 21.5%, 23.1% |

### Core Remapping

In the previous evaluation, we fixed the victim at a specific core during RSA encryption. On cloud platforms, neither the attacker nor the victim has control over core allocation, as the OS or hypervisor may remap tasks to other cores silently [72]. This core remapping process can introduce noise, and we evaluate its impact here.

#### Frequency of Core Remapping
To estimate the frequency of core remapping, we ran the attack described in Section VII-B in a VM hosted by QEMU. We observed that core remapping occurred 23 times over 10,395 seconds, meaning it happens approximately every 7.5 minutes on average. Since this is much longer than a round of RSA encryption, most delay traces would not be impacted.

#### Impact on Delay Traces
We then estimated how many bits can be recovered from the traces when core remapping occurs. Initially, we attempted to force the OS to remap the victim task using `taskset`, but found that Linux does not remap a task under this instruction. Instead, we launched a large number (e.g., 72) of dummy threads to force the OS to schedule tasks among cores. We observed that core remapping happened 52 times during 1,000 runs of RSA, indicating that 52 traces were directly polluted by core remapping, while the rest were indirectly interfered with. In Table IX (columns with “CR”), the results are similar to the case with background workload, with 32 pattern traces and an ACC1 of 96.9%.

### Memory Swapping
Another OS factor that can impact MESHUP is memory swapping. During our evaluation, we did not prevent memory swapping, so any noise introduced by it was considered.

### App Fingerprinting

We tested the coherence-based probe for app fingerprinting using the 40 apps in the Phoronix Test Suite used by [70]. Our testbed consists of two CPUs, with the attacker's code running on two different CPUs and a random core occupied in each CPU. The victim's app runs on a random core on one of the two CPUs. When collecting delay traces, the attacker probes the UPI bus at a 10ms interval, resulting in 30,000 samples per app run (i.e., 5 minutes). In the pre-processing phase, we remove abnormal samples (or noises) that fall outside the normal range (30,000 to 600,000) and smooth the trace with a window size of 80 samples. We train an RNN classifier with the processed training traces and classify the traces in the testing data. To further reduce the length of the traces sent to the RNN model, we split a trace into windows of 120 samples, and each window is convoluted into a 16-dimension vector. Thus, a trace is compressed to 250 (30,000/120) 16-dimension vectors. Compressing time-series data has also been adopted in other works on intrusion detection [73].

In our evaluation, we use a Bi-directional LSTM with Attention (AttBLSTM) [74], which is widely used for classifying time-series data, to classify a test trace to an app. Table X shows the model hyper-parameters.

| Hyper-parameter | Value |
|-----------------|-------|
| Batch Size      | 64    |
| Hidden Layer Size | 384  |
| Dropout         | 0.1   |
| Attention Layer Size | 512 |

### Results
MESHUP achieves a classification accuracy of 82.27%. In comparison, the PRIME-PROBE method used by [70] yields 78% accuracy. We conclude that the coherence-based probe can achieve satisfactory attack accuracy in a cross-CPU setting. Although the accuracy is not extremely high, it is surprising that the coarse-grained coherence-based probe outperforms the fine-grained probe [70]. We speculate that this is due to better coverage of cache transactions: our attack can probe transactions from all cache sets of a CPU, while a stateful cache attack can only probe one cache set at a time. The overall cache access frequency derived from our probe characterizes an app more effectively.

### Website Fingerprinting
We have also tested the coherence-based probe on website fingerprinting. The details are elaborated in Appendix H.

### Discussion

#### Limitations
1. **Evaluation of Eviction-Based Probe**: We used RSA as the victim application, whose mesh traffic mainly belongs to T1-T2. Other applications, such as I/O intensive ones, could show different patterns. We plan to test such applications in the future.
2. **Coarse-Grained Information**: MESHUP bypasses existing defenses by obtaining coarse-grained information about cache activities. Unlike stateful cache attacks like PRIME+PROBE, which can precisely evict a shared cache set and learn the memory addresses accessed by the victim, MESHUP can only determine which LLC slice the victim accesses. Therefore, we chose Java-based RSA implementations, which leak more information.
3. **Defense Mechanisms**: We chose Intel CAT as the defense following recent cache side-channel attacks like Xlate [3]. Stronger defenses like DAWG [75] and temporal isolation [5] were not tested because their implementations are not available on Intel CPUs or mainstream OSes. However, since MESHUP is based on a stateless channel, we expect it to be effective under these defenses.
4. **Parameter Tuning**: For the RSA encryption attack, we used a script with hard-coded parameters to filter useful traces. We expect these parameters can be replaced with a learned classifier, such as an LSTM model.
5. **CPU Testing**: Our evaluation was done on Intel CPUs. In the future, we plan to test other CPUs with mesh interconnects, such as ARM Neoverse [18].
6. **Core Remapping Experiment**: The measurements do not isolate cases where core mappings change, which might underestimate the impact.

#### Implications and Defenses
The key takeaway is that the mesh interconnect on server-grade CPUs introduces stateless cache side-channels. This is counter-intuitive, but the new interconnect design intertwines cache lines from different applications, introducing new types of resource contention. Together with LoR [8], MESHUP provides a comprehensive picture of the contention side-channel of CPU interconnects, and we hope more attention will be given to this issue.

For defenses, we proposed a simple solution in Section VI-E to isolate the LLC and reduce the SNR for T1-T2 traffic exploited by MESHUP. However, other types of traffic still leak information. If spatial isolation can partition interconnect bandwidth, MESHUP might be thwarted. However, contemporary mainstream hardware lacks support for bandwidth partitioning. Intel's Memory Bandwidth Allocation (MBA) [76] limits the bandwidth a core can issue to memory, but the limit is an approximation and insufficient for threat mitigation [5].

Instead of strong mitigation based on isolation, mechanisms that increase the difficulty of attacks, such as cache randomization, are more likely to be adopted. By making the mapping between physical addresses and cache set indices dynamic and unpredictable, finding the right eviction sets becomes more difficult, potentially destabilizing MESHUP probes. However, recent studies [77], [78], [79] have shown that previous approaches like CEASER-S [80] and ScatterCache [81] are broken under new attack methods. Following these discoveries, Song et al. proposed to fix the flaws of existing mechanisms [77], and Saileshwar et al. proposed fully associative caches [82]. We plan to evaluate whether these new methods are effective against MESHUP.

### Conclusion
In this work, we demonstrate a stateless cache side-channel on the mesh interconnect, or MESHUP, which can leak memory access patterns of a victim program on server-grade CPUs. Unlike previous cache side-channels, MESHUP does not rely on stateful micro-architectural changes made by the victim, allowing it to bypass existing defenses based on spatial and temporal isolation. To illustrate the consequences of MESHUP, we analyzed RSA encryption and application fingerprinting, showing that MESHUP is very effective. We believe that the mesh interconnect opens up new opportunities for security research, and its implications should be further examined.

### Acknowledgements
We thank the anonymous reviewers for their valuable feedback, which significantly improved this paper. The Fudan authors are supported by NSFC 61802068. The UCI author is partially supported by gifts from Microsoft and Cisco.

### References
[1] Y. Yarom and K. Falkner, “Flush+ reload: a high resolution, low noise, l3 cache side-channel attack,” in 23rd {USENIX} Security Symposium ({USENIX} Security 14), 2014, pp. 719–732.
[2] C. Disselkoen, D. Kohlbrenner, L. Porter, and D. Tullsen, “Prime+ abort: A timer-free high-precision l3 cache attack using intel {TSX},” in 26th {USENIX} Security Symposium ({USENIX} Security 17), 2017, pp. 51–67.
[3] S. Van Schaik, C. Giuffrida, H. Bos, and K. Razavi, “Malicious management unit: Why stopping cache attacks in software is harder than you think,” in 27th {USENIX} Security Symposium ({USENIX} Security 18), 2018, pp. 937–954.
[4] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache side-channel attacks are practical,” in 2015 IEEE symposium on security and privacy. IEEE, 2015, pp. 605–622.
[5] Q. Ge, Y. Yarom, T. Chothia, and G. Heiser, “Time protection: the missing os abstraction,” in Proceedings of the Fourteenth EuroSys Conference 2019, 2019, pp. 1–17.
[6] K. T. Nguyen, “Introduction to Cache Allocation Technology in the Intel Xeon Processor E5 v4 Family,” https://software.intel.com/content/www/us/en/develop/articles/introduction-to-cache-allocation-technology.html, 2016, [Online; accessed 10-August-2020].
[7] F. Liu, Q. Ge, Y. Yarom, F. Mckeen, C. Rozas, G. Heiser, and R. B. Lee, “Catalyst: Defeating last-level cache side channel attacks in cloud computing,” in 2016 IEEE international symposium on high performance computer architecture (HPCA). IEEE, 2016, pp. 406–418.
[8] R. Paccagnella, L. Luo, and C. W. Fletcher, “Lord of the ring(s): Side channel attacks on the {CPU} on-chip ring interconnect are practical,” in 30th {USENIX} Security Symposium ({USENIX} Security 21), 2021.
[9] Intel, “Intel Xeon Scalable Processors,” https://www.intel.com/content/www/us/en/products/processors/xeon/scalable.html, 2020, [Online; accessed 10-August-2020].
[10] S. Bell, B. Edwards, J. Amann, R. Conlin, K. Joyce, V. Leung, J. MacKay, M. Reif, L. Bao, J. Brown et al., “Tile64-processor: A 64-core soc with mesh interconnect,” in 2008 IEEE International Solid-State Circuits Conference-Digest of Technical Papers. IEEE, 2008, pp. 88–598.
[11] S. Vangal, J. Howard, G. Ruhl, S. Dighe, H. Wilson, J. Tschanz, D. Finan, P. Iyer, A. Singh, T. Jacob et al., “An 80-tile 1.28 tﬂops network-on-chip in 65nm cmos,” in 2007 IEEE International Solid-State Circuits Conference. Digest of Technical Papers. IEEE, 2007, pp. 98–589.
[12] D. J. Bernstein, J. Breitner, D. Genkin, L. G. Bruinderink, N. Heninger, T. Lange, C. van Vredendaal, and Y. Yarom, “Sliding right into disaster: Left-to-right sliding windows leak,” in International Conference on Cryptographic Hardware and Embedded Systems. Springer, 2017, pp. 555–576.
[13] T. T. Kevin Fogarty, “Chasing profits and Intel, AMD sets sights on data centers,” https://www.spglobal.com/marketintelligence/en/news-insights/latest-news-headlines/chasing-profits-and-intel-amd-sets-sights-on-data-centers-57996772, 2020.
[14] J. Gilbert and M. Rowland, “The intel® xeon® processor e5 family architecture, power efficiency, and performance,” in 2012 IEEE Hot Chips 24 Symposium (HCS). IEEE, 2012, pp. 1–25.
[15] Unknown, “Mesh Interconnect Architecture - Intel,” https://en.wikichip.org/wiki/intel/mesh_interconnect_architecture, 2020, [Online; accessed 5-August-2020].
[16] ——, “Intel Unveils 3rd Gen Ice Lake-SP Xeon CPU Family,” https://wccftech.com/intel-unveils-ice-lake-sp-xeon-cpu-family-10nm-sunny-cove-cores-28-core-die/, 2020, [Online; accessed 18-August-2020].
[17] M. B. Taylor, J. Kim, J. Miller, D. Wentzlaff, F. Ghodrat, B. Greenwald, H. Hoffman, P. Johnson, W. Lee, A. Saraf et al., “A 16-issue multiple-program-counter microprocessor with point-to-point scalar operand network,” in 2003 IEEE International Solid-State Circuits Conference, 2003. Digest of Technical Papers. ISSCC. IEEE, 2003, pp. 170–171.
[18] J. D. Gelas, “New ARM IP Launched: CMN-600 Interconnect for 128 Cores and DMC-620, an 8Ch DDR4 IMC,” https://www.anandtech.com/show/10711/arm-cmn-600-dmc-620-128-cores-8-channel-ddr4, 2020, [Online; accessed 18-August-2020].
[19] D. Wentzlaff, P. Griffin, H. Hoffmann, L. Bao, B. Edwards, C. Ramey, M. Mattina, C.-C. Miao, J. F. Brown III, and A. Agarwal, “On-chip interconnection architecture of the tile processor,” IEEE micro, vol. 27, no. 5, pp. 15–31, 2007.
[20] Unknown, “Intel Ultra Path Interconnect,” https://en.wikipedia.org/wiki/Intel_Ultra_Path_Interconnect, 2021, [Online; accessed 13-April-2021].
[21] A. Farshin, A. Roozbeh, G. Q. Maguire Jr, and D. Kostić, “Make the most out of last level cache in intel processors,” in Proceedings of the Fourteenth EuroSys Conference 2019, 2019, pp. 1–17.
[22] M. Yan, R. Sprabery, B. Gopireddy, C. Fletcher, R. Campbell, and J. Torrellas, “Attack directories, not caches: Side channel attacks in a non-inclusive world,” in 2019 IEEE Symposium on Security and Privacy (SP). IEEE, 2019, pp. 888–904.
[23] R. Schöne, T. Ilsche, M. Bielert, A. Gocht, and D. Hackenberg, “Energy efficiency features of the intel skylake-sp processor and their impact on performance,” in 2019 International Conference on High Performance Computing & Simulation (HPCS). IEEE, 2019, pp. 399–406.
[24] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-tenant side-channel attacks in paas clouds,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, 2014, pp. 990–1003.
[25] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S $ a: A shared cache attack