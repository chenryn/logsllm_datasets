; len. of memcpy()
; jump to memcpy()
Windows version.
In order to support Windows enclave
programs, we implemented a separate PE editor, bootstrapping
program, and secure in-enclave loader. The PE editor embeds
dummy sections in the secure in-enclave loader to reserve
enough code and data pages. The bootstrapping program and
the secure in-enclave loader for Windows are almost the same
as those for Linux, but we only solve the compatibility issues,
including type definitions and system calls.
Others. The rest of the components of SGX-Shield are libraries
used by an enclave program and debugging tools. We port
musl-libc [5] as a libc and mbedTLS [4] as a TLS library to
SGX-Shield. Since libc code often invokes system calls, we
replace those system calls to trampolines/springboards.
VI. EVALUATION
In this section, we evaluate SGX-Shield by answering the
following questions:
1) How effectively does SGX-Shield defend against various
types of memory-based attacks (§VI-A1)?
2) How much randomness does SGX-Shield show in its
address space layouts (§VI-A2)?
3) How much performance overhead would SGX-Shield
impose in running the micro-benchmarks (§VI-B1)?
4) How much performance overhead would SGX-Shield
impose in running typical workloads for SGX (§VI-B2)?
Experimental setup. All our experiments were conducted on
Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz (Skylake with
8MB cache) with 32GB RAM. We ran Ubuntu 14.04 with Linux
3.19 64-bits3, and installed Intel SGX SDK and device drivers
released by Intel [28]. In the entropy analysis (§VI-A2) and the
micro-benchmark (§VI-B1), we used nbench [2] benchmark
suites.
A. Security Evaluation
This subsection evaluates how many security guarantees
are offered by SGX-Shield. We first evaluate the practical
security aspects of SGX-Shield by measuring the possibility of
successful memory corruption-based attacks (§VI-A1). Then,
we evaluate the theoretical and general security aspects of
SGX-Shield by measuring the entropy (§VI-A2).
3 We also performed the same evaluation in the Windows version of
SGX-Shield. While the result is almost same, we do not show it in this
paper because of the page limitation.
Exploitation technique
Attack model
Remote
Passive kernel
Active kernel
Ret-to-func
ROP
0/214 (48-bits)
0/214 (88-bits)
214/214 (0-bits)
214/214 (0-bits)
214/214 (0-bits)
214/214 (0-bits)
(a) Intel SGX SDK (baseline)
CFI-bypassing ROP
0/214 (108-bits)
214/214 (0-bits)
214/214 (0-bits)
Exploitation technique
Attack model
Remote
Passive kernel
Active kernel
Ret-to-func
0/214 (48-bits)
0/214 (20-bits)
148/214 (7-bits)
ROP
0/214 (88-bits)
0/214 (60-bits)
0/214 (21-bits)
CFI-bypassing ROP
0/214 (108-bits)
0/214 (80-bits)
0/214 (28-bits)
(b) SGX-Shield
TABLE III: Security effectiveness of SGX-Shield against memory
corruption-based attacks. For each attack model, we launched 214
attacks to the vulnerable enclave program running with either the
current Intel SGX SDK or SGX-Shield. In each cell, x/y (z-bits)
denotes the following: x - the number of successful attacks; y - the
total number of attacks we tried; and z - the theoretical number of
bits that the attack needs to bruteforce.
1) Effectiveness against Memory Corruption Attacks: In
order to see how effective SGX-Shield is in stopping memory
corruption-based attacks, we launched an attack against a
vulnerable enclave program while running either Intel SGX
SDKs and SGX-Shield. We assume following the three attack
models in which each has different prior-knowledge on memory
address layouts according to their inherent runtime constraints:
(1) a remote attack, which launches an attack through network
sockets serviced by a vulnerable enclave program. This model
is a blind attack (i.e., it knows nothing related to the address
layouts); (2) a passive kernel attack, which has the privilege of
an underlying operating system but does not intervene a page
fault handling mechanism. Since the kernel executes EEINIT
and EADD, this attack model has information on the base address
and the size of an enclave; (3) an active kernel attack, which
not only has the privilege of an underlying operating system
but also actively intervenes the page fault handling mechanism.
The active intervention on the page fault follows the controlled
side-channel attack [61], which grants additional information on
which memory page is being accessed by an enclave program
(more details are discussed in §VII).
In order to focus on ASLR-related issues, we wrote an
easily exploitable victim program with a simple stack-overflow
vulnerability. Then, for each attack model, we run the following
four exploitation techniques, where each imposes different
difficulties in guessing address values: (1) return-to-function,
which requires inferring a single address value (i.e., a function
address); (2) ROP, which requires three ROP gadgets (i.e., need
to infer three address values). The gadgets are the same as
the ones in RIPE benchmark [60], but we replaced call with
syscall to work in an SGX environment; (3) CFI-bypassing
ROP, which requires four ROP gadgets (i.e., need to infer four
address values as shown in Figure 8). This CFI-bypassing ROP
manipulates only the data flow, so it would not be detected by
CFI techniques [7] but requires more gadgets than non-CFI-
bypassing ROP.
As expected, the current Intel SGX SDK was effective
against a remote attack model, but ineffective against passive
and active attack models. As shown in Table III, in the case
HRel
HAbs
SGX SDK
SGX-Shield
RU-64 RU-32
0.9993
0.9989
0.9999
0.9999
(a) Code pages
0.0
0.9869
HRel
HAbs
Stack
SGX SDK
0.0
SGX-Shield
0.9886
SGX SDK
0.9869
SGX-Shield
1.0000
(b) Data pages
Heap
0.0
0.9995
0.9869
1.0000
Global
0.0
0.9967
0.9869
1.0000
TABLE IV: The ASLR entropy on code and data pages while running
the nbench binary 1,800 times. The higher entropy value indicates
more randomness on address layouts. HRel denotes entropy for relative
addresses and HAbs denotes entropy for absolute addresses. SGX SDK
denotes the baseline results using the existing Intel SGX Linux SDK.
RU-64 and RU-32 represent the configured size of a randomization
unit, 64- and 32-bytes, respectively.
of the remote attack model, all our attack attempts (214 times)
failed, as theoretically an attacker has to try about 247, 287,
and 2107 times to achieve a 50% successful attack probability
per exploitation technique, respectively. In the case of passive
and active kernel attack models, since the attacker is already in
possession of required address values for all three exploitation
techniques, exploitation attempts were always successful for
all 214 attacks that we tried.
With SGX-Shield, however, the probabilistic defense nature
of ASLR is regained for all attack models and exploitation
techniques. In the remote attack model, SGX-Shield showed
the same security results as the Intel SGX SDK. In the case of
the passive kernel attack, all 214 attack attempts failed. If the
size of a randomization unit is 32 bytes, there are 220 possible
entry points that attackers have to bruteforce for each address
value (i.e., 32 MB/32 B = 225/25, as the code or data region size
is 32 MB). Thus, theoretically the attacker has to guess 220, 260,
and 280 address values for each exploitation technique. In the
active kernel attack, the attacker now may know which memory
page is responsible for executing certain code in the worst case
of SGX-Shield. However, since SGX-Shield still shuffles both
code and data pages in the memory page, the unknown bits for
a single address value would be 7 (i.e., 4 KB/32 B = 212/25,
as the memory page size is 4 KB and the randomization unit
size is 32 B). Therefore, a theoretical bound of SGX-Shield’s
security guarantee is 27, 221, and 228, for each exploitation
technique, respectively. Accordingly, this theoretical estimation
is also evidenced by our real attack trials — while successful
attacks were observed 148 times for return-to-function, all
failed for ROP and CFI-bypassing ROP. Although SGX-Shield’s
probabilistic bound against the return-to-function exploitation
technique can be a security concern, we believe the security
benefit of SGX-Shield is still valuable considering that return-
to-function is difficult to be a general exploitation in practice.
2) Entropy Analysis: We measure the randomness of the
address space layout using the notion of entropy [15]. The
entropy captures the uncertainty of a given random variable,
and we apply this by considering possible address values
as a random variable. Specifically, let ARU be a discrete
random variable with the absolute entry point addresses
{a1, a2, ..., an} for a certain randomization unit RU across
n different runs, and p(ai) is a probability mass function (pmf).
Then, HAbs(ARU), the normalized address space layout entropy
of the randomization unit RU, is defined as:
HAbs(ARU) = − n(cid:88)
p(ai)
ln p(ai)
ln n
.
i=1
10
Moreover, due to the normalization factor ln n,
0 ≤ HAbs(ARU) ≤ 1
always holds. HAbs(ARU) is zero when the randomization unit
is always mapped to the same address for all n runs. It is
one when all runs always result in a different address. We also
measure the entropy on the relative address to better understand
the randomness of our ASLR scheme when the base address
of an enclave memory is known. This entropy is resented as
HRel(ARU).
Using these two entropy measures, we computed the entropy
for code pages and data pages, as shown in Table IV: SGX
SDK denotes the baseline results; for the entropy of code
pages, we configured the size of the randomization unit as 32-
or 64-bytes (i.e., RU-32 and RU-64); for the entropy of data
pages, we measured it for stack, heap, and global data objects.
Note, especially for data pages, we computed the entropy by
replacing an entry point address of a randomization unit into
the base address of each data object.
Code page entropy. HRel in Table IV-(a) shows the effective-
ness of SGX-Shield’s approach against strong adversaries. As
expected, while Intel SGX Linux SDK provides no randomness
(i.e., the entropy value is zero), SGX-Shield provides a very
high degree of randomness. This is because the SDK picks a
random base address and loads the program to the base address
in a deterministic way. Smaller randomization units (RU-32)
provide a higher degree of randomness (compared to RU-64).
On the other hand, if the attacker is completely blind, then
both Intel SGX Linux SDK and SGX-Shield provide good
randomness, as shown in HAbs.
Data page entropy. We now describe the entropy of
SGX-Shield compared to Linux SGX SDK for data objects, in-
cluding stack, heap, and global variables, as shown in Table IV-
(b). Similar to the code page entropy, Linux SGX SDK shows
no randomness on all data pages against strong adversaries
(i.e., HRel is zero for stack, heap, and global). In contrast,
SGX-Shield shows very high randomness across all data objects.
Stack object shows the least randomness among these. The
reason is that SGX-Shield still needs to allocate the continuous
space to preserve the functionality of stack, even though it picks
stack’s base address at random and imposes no alignment on the
base address in order to maximize the randomness. Assuming
blind attackers with no information, Intel SGX SDK shows
reasonable randomness, but SGX-Shield shows close to perfect
randomness given the number of sample runs (HAbs). Across
all 1,800 runs, SGX-Shield exhibited unique and random base
addresses for all data objects.
B. Performance Overhead
We now evaluate the performance overhead imposed by
SGX-Shield. In order to understand the performance as-
pects in the worst-use-cases as well as typical-use-cases, we
run SGX-Shield on both the micro-benchmark and macro-
benchmark.
1) Micro-benchmark: We run each testcase of the nbench
benchmark suites [2] 200 times and report the median value.
In each run, nbench iterates through its task at least 10,000
times, and it returns the average time to perform the task once.
To clearly see where the performance overhead comes from,
Benchmark Baseline
RU-64
RU-32
SGX-Shield
(µs)
ASLR
-1.22%
1262
2.62%
6077
0.81%
12140
1.28%
43613
-0.14%
387
2.85%
445
2.10%
34618
1080
0.09%
0.00% 1.05%
ASLR
ASLR&DEP
3.65%
1.88%
7.29%
18.98%
5.78%
10.05%
1.79%
6.89%
-0.55% -0.72%
15.29% 28.65%
8.73%
7.26%
2.08%
0.39%
6.89%
7.80%