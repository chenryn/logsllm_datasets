spel.exe`部分输出结果：
将上面结果与IDA插件capa explorer分析结果结合，在Search一栏中输入”stackstring”，定位到相关函数后勾选”Limit
results to current function”：
切换模式查看，发现是很长一段向栈中写值指令，直接跳转到0x14017973B处向上回溯：
可以看到总长度为0x2ED2D，之后调用`VirtualAllocExNuma`函数申请同样大小且具有 **PAGE_EXECUTE_READWRITE**
权限的一块内存，并将内容复制到新内存块中，最终跳转到新内存块执行：
初始化部分寄存器之后跳转到Offset 0x40处执行：
以往笔者遇到下图向栈中写字符串操作，是通过动调在合适指令处设断点后观察内存：
在看官方WriteUp时，看到其提及FLOSS与Ironstrings两个工具：
  * FLOSS：[Github Releases](https://github.com/mandiant/flare-floss/releases/tag/v1.7.0)
  * Ironstrings：[Github](https://github.com/mandiant/flare-ida/tree/master/python/flare/ironstrings)
关于Ironstrings的安装可以参考[FLARE Script Series: Recovering Stackstrings Using
Emulation with ironstrings](https://www.fireeye.com/blog/threat-research/2019/02/recovering-stackstrings-using-emulation-with-ironstrings.html)一文。
以`--no-static-strings`参数运行FLOSS：
执行ironstrings.py脚本：
之后通过RCX传递Hash值给`sub_A1C`函数获取`LdrLoadDll`与`LdrGetProcedureAddress`调用地址：
将stackstring传递给上述两个函数获取地址并调用之，Offset
0xB28处存储一PE文件。`GetNativeSystemInfo`判断当前运行环境，获取PE文件Image Optional
Header中ImageBase及SizeOfImage字段值后调用`VirtualAlloc`函数申请内存空间(第一次以ImageBase作为`lpAddress`，申请失败则置为NULL)。接下来根据各区段VirtualAddress，PointerToRawData及SizeOfRawData加载区段至申请内存空间中，根据重定位表进行重定位。调用`VirtualProtect`设置各区段`flNewProtect`值，通过`RtlAddFunctionTable`函数设置异常，最终通过PE文件Image
Optional Header中AddressOfEntryPoint字段定位入口点完成加载。
关于以上描述过程使用的Reflective DLL Injection技术可参阅[DOUBLEPULSAR Usermode Analysis:
Generic Reflective DLL Loader](https://blog.f-secure.com/doublepulsar-usermode-analysis-generic-reflective-dll-loader/)一文。
将其加载DLL Dump出来之后，capa检测到其.data区段中存有另一PE文件：
从EntryPoint执行到DllMain，传递PE文件存储地址给加载函数进行加载：
之后调用`sub_27327D0`获取其导出函数Start地址进行调用：
首先是异或解密stackstring：
其流程是申请一块内存—>向栈中写值—>XOR解密—>复制至申请内存空间，官方WriteUp中给出了解密IDAPython脚本，笔者分析时直接在函数结束处设置断点，观察内存内容：
官方WriteUp中提到一个IDA Plugin——Shellcode
Hashes，笔者觉得很好用，可以提高静态分析的效率和体验。该插件与上文提及的Ironstrings都位于[flare-ida](https://github.com/mandiant/flare-ida)中，将shellcode_hashes_search_plugin.py与`flare`目录一同复制到IDA的`Plugins`目录之后即可使用，选择`\flare-ida\shellcode_hashes`目录下的`sc_hashes.db`数据库文件即可：
前者是上文提及`sub_A1C`函数，后者是最后Dump出来的DLL中函数。
接下来调用`sub_180001A40`，`sub_180001990`会调用该函数两次——第一次传递给它的第二个参数值为1，第二次传递有两种情况：2或是8，若Filename为”Spell.EXE”则传递2，否则传递8。第一次调用会解密一串字符串，获取Filename及加载名为PNG的资源：
`sub_180001A40`保存获取到的相关信息时结构如下(后面还有一串字符`inactive`，没有放在图中)：
`sub_180002E60`函数判断Filename是否等于”Spell.EXE”：
若不等返回0，那么传递给`sub_180001A40`函数第二个参数值为8：
直接退出：
将程序命名为”Spell.EXE”之后再次调试，便可进入到`sub_180001A40`函数处理第二个参数为2的情形：
第二个参数为2时会调用`sub_180001F80`，该函数会向inactive[.]flare-on[.]com发起连接，根据接收到的不同命令执行不同的操作。后续在看官方WriteUp时，其提到FakeNet-NG工具，笔者在虚拟机里按照[FakeNet Genie: Improving Dynamic Malware Analysis with Cheat
Codes for FakeNet-NG](https://www.mandiant.com/resources/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng)一文进行了配置，之后再次进行调试，分析出`sub_180002070`函数(由`sub_180001F80`调用)会处理三种命令：
  * exe：调用`sub_180002410`
  * run：调用`sub_180002590`
  * flare-on.com：返回1
`sample_custom_response.ini`中TcpRawFile字段为同目录下文件，该文件存储要返回的命令：
当该函数返回1时，会进入到之后的`sub_180002A20`函数，设置注册表键值。接下来调用`sub_180002F70`，若返回1则进入`sub_180002730`设置另一注册表键值。第一个设置的键值：
该结果由”flare-on.com”与`0x1B8A7E991DC19F1415891D8A`异或而来：
`sub_180002730`通过switch将Flag与`0xFAE58ED80D859C9B8D87ACD7A7B7A4E2C3C1A806C29633`进行异或：
之后再次调用`sub_180002A20`设置第二个键值：
这道题目很贴合实际的样本分析，官方WriteUp中有这样一段话可以概括之：This challenge was inspired by multiple
malware samples we’ve analyzed over the last year。其使用的Reflective DLL
Injection技术，stackstring，API
Hashes，混淆字符串直到使用时才解密，C2等笔者在之前的样本分析过程都曾遇到过，而此题将其都融合在一个里面，是很有意思的一道题目。在分析过程中，结合官方WriteUp学习了几个新工具或是IDA
Plugin(capa，FLOSS，Ironstrings，shellcode_hashes，FakeNet-NG)的使用，方便以后的样本分析。
## 0x03 参阅链接
  * [crontab(5) — Linux manual page](https://man7.org/linux/man-pages/man5/crontab.5.html)
  * [getenv(3) — Linux manual page](https://man7.org/linux/man-pages/man3/getenv.3.html)
  * [readdir(3) — Linux manual page](https://man7.org/linux/man-pages/man3/readdir.3.html)
  * [Linux编程—readdir](https://www.jianshu.com/p/fab29726e763)
  * [RC4—Wikipedia](https://en.wikipedia.org/wiki/RC4)
  * [教你三招快速文件批量重命名方法](https://segmentfault.com/a/1190000024416655)
  * [Bifid cipher—Wikipedia](https://en.wikipedia.org/wiki/Bifid_cipher)
  * [FireEye’s Open-Source Tool – CAPA to Identify Malware Capabilities](https://www.socinvestigation.com/fireeyes-open-source-tool-capa-to-identify-malware-capabilities-2/)
  * [DOUBLEPULSAR Usermode Analysis: Generic Reflective DLL Loader](https://blog.f-secure.com/doublepulsar-usermode-analysis-generic-reflective-dll-loader/)
  * [Using Precalculated String Hashes when Reverse Engineering Shellcode](https://www.mandiant.com/resources/precalculated-string-hashes-reverse-engineering-shellcode)
  * [FakeNet Genie: Improving Dynamic Malware Analysis with Cheat Codes for FakeNet-NG](https://www.mandiant.com/resources/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng)