义是不一样的）。这里的连字符同样也不是元字符，因为它们都紧接在（或者（之后。如
果连字符不在字符组的开头，例如（.-，就是用来表示范围的，在本例中就是错误的用
法。
---
## Page 38
12
第1章：正则表达式入门
测验答案
第11页问题的答案
为什么‘a[^u]无法匹‘Qantas’或者‘Iraq’？
Qantas无法匹配的原因是，正则表达式要求小写q，而Qantas中的Q是大写的。如果
我们改用Q[^u]，就能匹配Qantas，但是其他单词又不在结果中了，因为它们不包括
大写Q。[Qq][^u]则能找到上面所有的单词。
IraG的例子有点述慈人。正则表达式要求q之后紧跟一个u以外的宇符，这就排除了
4处在行尾的情况。通常来说，文本行的结尾都有一个换行字符，但是我首先没有提
到（非常抱款）egrep会在检查正则表达式之前把这些换行符去摔，所以在行尾的a之
后，没有能够匹配u以外的字符。
请不要因此灰心丧气（注4）。我向你保证，如果egrep保留换行符（许多其他软件会
保留这些符号），或者IraG后紧接着空格或者其他单词，这一行就能匹配。理解工具
软件的细节固然很重要，但现在我只希望读者能通过这个例子认识到：一个字符组，
即使是排除型乎符组，电需要匹配一个字符。
在03.19.76中，点号是元字符一它能够匹配任意字符（包括我们期望的连字符、句号
和斜线）。不过，我们也需要明白，点号可以匹配任何字符，所以这个正则表达式也能够匹
配下面的字符串：‘1otterynumbers：192033197639
所以，03[-./]19（-./176更加精确，但是更难读，也更难写。‘03.19.76更容易理解，但
是不够细致。我们应该选择哪一个呢？这取决于你对需要检索的文本的了解，以及你需要
达到的准确程度。一个重要但常见的问题是，写正则表达式时，我们需要在对欲检索文本
的了解程度与检索精确性之间求得平衡。例如，如果我们知道，针对某个检索文本，
03.19.761这个正则表达式基本不可能匹配不期望的结果，使用它就是合理的。要想正确
使用正则表达式，清楚地了解目标文本是非常重要的。
注4：在我四年级的时候，曾经带队参加拼字比赛（spellingbee）、题目是拼写“miss”。我的答
案是“mi"s"s”，但史密斯小姐含蓄地告诉我说，应该是“Mi*s"s”，第一个宇母要大写，
我应该找老师要一个例句，于是我出局了。作为一个小孩子，那时候我感党非常受伤。从
此以后，我开始讨厌史密斯小姐，拼写也学得非常糟糕。
---
## Page 39
Egrep元字符
13
多选结构
Alteruotion
匹配任意子表达式
“是一个非常简捷的元字符，它的意思是“或”（or)。依靠它，我们能够把不同的子表达
式组合成一个总的表达式，而这个总的表达式又能够匹配任意的子表达式。假如Bob和
Roberti是两个表达式，但BobIRoberti就是能够同时匹配其中任意一个的正则表达式。
在这样的组合中，子表达式称为“多选分支（alternative)”。
回头来看gr[ea]y的例子，有意思的是，它还可以写作greylgrayi，或者是gr（ale)yle
后者用括号来划定多选结构的范围（正常情况下，括号也是元字符)。请注意，gr[ale]y
不符合我们的要求—在这里，‘1’只是一个和a与éj一样的普通字符。
对表达式'gr（ale)yi来说，括号是必须的，因为如果没有括号，graleys的意思就成了“gral
或者ey”，而这不符合我们的要求。多选结构可以包括很多字符，但不能超越括号的界限。
另一个例子是（First|1st)·[Ss]treet;（注5)。事实上，因为“Firsti和1sti都以‘st]
结尾，我们可以把这个结合体缩略表示为（Firi1)st·[Ss]treet)。这样可能不容易看得清
楚，但我们知道（Firstllst）与（fir|1)sti表示的是同-一个意思。
下面是一些用多选结构来拼写我名字的例子。这3个表达式是一样的，请仔细比较：
JeffreylJeffery)
Jeff (reylery)
Jeff (reler)y1
英国拼写法如下：
(Geoff iJeff)(reylery)
(Geo|Je)ff(rey lery))
(GeolJe)ff(re|er)y
JeffreyIGeofferyIJefferyIGeoffrey]。它们只是“殊途同归”而已。
gr[ea]y与gr（ale)yi的例子可能会让人觉得多选结构与字符组没太大的区别，但是请留
神不要混淆这两个概念。一个字符组只能匹配目标文本中的单个字符，而每个多选结构自
身都可能是完整的正则表达式，都可以匹配任意长度的文本。
注5：请参考第VI页的体例说明，这里的“”表示空格，这样更容易识别。
---
## Page 40
14
第1章：正则表达式入门
字符组基本可以算是一门独立的微型语言（例如，对于元字符，它们有自己的规定），而多
选结构是“正则表达式语言主体（mainregularexpressionlanguage）”的一部分。你将会发
现，这两者都非常有用。
同样，在一个包含多选结构的表达式中使用脱字符和美元符的时候也要小心。比较
^FromISubjectIDate:和"~（FromISubjectIDate)：就会发现，虽然它们看起来与之前
的E-mail的例子很相似，匹配结果（即它们的用处）却大不相同。第一个表达式由3个多
选分支构成，所以它能匹配From或者Subjecti或者Date：，实用性不大。我们希望在
每一个多选分支之前都有脱字符，之后都有："。所以应该使用括号来“限制”（constrain）
这些多选分支：
[^(From|SubjectIDate):*)
现在3个多选分支都受括号的限制，所以，这个正则表达式的意思是：匹配一行的起始位
置，然后匹配Fromi、Subjecti或Date中的任意一个，然后匹配：，所以，它能够四
配的文本是：
1）行起始，然后是F·r"o"m，然后是‘：，
或者2）行起始，然后是S*u·b·je'ct，然后是‘：·'，
或者3）行起始，然后是D*a'te，然后是‘：'。
简单点说，就是匹配以‘From：·，‘Subject：·'或者‘Date：·'开头的文本行，在提取E-mail
文件中的信息时这很有用。
下面是-一个例子：
From: PI:EMAIL (The King)
Subject: be seein'ya around
Date: Mon, 23 0ct 2006 11:04:13
From:The Prez 
Date:Wed,25 0ct 2006 8:36:24
Subject:now,about your vote..
忽略大小写
IgnoringDifferencesinCapitalization
E-mailheader的例子很适合用来说明不区分大小写（case-insensitive）的匹配的概念。E-mail
header中的字段类型（fieldtype）通常是以大写字母开头的，例如“Subject”和“From”，
但是E-mail标准并没有对大小写进行严格的规定，所以“DATE”或者“from”也是合法的
学段类型。但是，之前使用的正则表达式无法处理这种情况。
一种办法是用“[Ff][Rr】[Oo][Mm]取代‘From，这样就能匹配任何形式的“from”，但缺点
之一就是很不方便。幸好，我们有一种办法告诉egrep在比较时忽略大小写，也就是进行不
区分大小写的匹配，这样就能忽略大小写字母的差异。
---
## Page 41
Egrep元字符
15
该功能并不是正则表达式语言的一部分，却是许多工具软件提供的有用的相关特性。egrep
的命令行参数“-i”表示进行忽略大小写的匹配。把-i写在正则表达式之前：
结果除了包括之前的内容外，还包含这一行：
SUBJECT:MAKE MONEY FAST
我使用-i参数的频率很高（也许与第12页的注解有关），所以我推荐读者记住它。在下面
的章节中我们还会见到其他的简捷特性。
单词分界符
WordBonularies
使用正则表达式时经常会遇到的一个问题，期望匹配的“单词”包含在另一个单词之中。
在cat、gray和Smith的例子中，我曾提到过这个问题。不过，某些版本的egrep对单词
识别提供了有限的支持：也就是单词分界符（单词开头和结策的位置）的匹配。
如果你的egrep支持“元字符序列（metasequences)”“，就可以使用它们来匹配
位置。就像作为行锚点的脱字符和美元符一样，它们锚定了正则表达式的其他部分，但在
匹配过程中并不对应到任何字符。表达式\的意思是“匹配单词的并头位置，然后
是c'a't这3个字母，然后是单词的结束位置”。更直接点说就是“匹配cat这个单词”。如
果读者愿意，也可以用\来匹配以cat开头和结束的单词。
请注意，本身并不是元字符-一只有当它们与斜线结合起来的时候，整个序列才具
有特殊意义。这就是我称其为“元字符序列”的原因。重要的是它们的特殊意义，而不是
字符的个数，所以我说的“元字符”和“元（字符）序列”大多数时候是等价的。
请记住，并不是所有版本的egrep都支持单词分界符，即使是支持的版本也不见得聪明到
能“认得出”英语单词。“单词的起始位置”只不过是一系列字母和数字符号（alphanumeric
简单文本中的单词分界符。
(egrep认定的）单词开头位置用向上的箭头标识，单词结束位置用向下的箭头标识。我们
看到，“单词的开始和结束”准确地说是“字母数字符号的开始和结束”，不过这样说太麻
烦了。
---
## Page 42
16
第1章：正则表达式入门
*%1#
cost
$199
能够匹配的位置
单词
图1-2：“单词”的起始和结束位置
小结
In a Nutshell
表1-1总结了我们已经介绍过的元字符。
表1-1：至今为止所见的元字符小结
元字符
名称
匹配对象
点号
单个任意字符
[..]
字符组
列出的任意字符
[~...]
排除型字符组
未列出的任意字符
脱字符
行的起始位置
$
美元符
行的结束位置
1
反斜线-大于
单词的结束位置（某些版本的egrep可能不支持）
1
竖线
匹配分隔两边的任意一个表达式
(.-)
括号
限制竖线的作用范围，其他功能下文讨论
另外还有几点需要注意：
在字符组内部，元字符的定义规则（及它们的意义）是不一样的。例如，在字符组外
部，点号是元字符，但是在内部则不是如此。相反，连字符只有在字符组内部（这是
普遍情况）才是元字符，否则就不是。脱字符在字符组外部表示一个意思，在字符组
内部紧接着（时表示另一个意思，其他情况下又表示别的意思。
不要混淆多选项和字符组。字符组[abc]和多选项（alblc)固然表示同一个意思，
但是这个例子中的相似性并不能推广开来。无论列出的字符有多少，字符组只能匹配
一个字符。相反，多选项可以匹配任意长度的文本，每个多选项可能匹配的文本都是
独立的，例如\)。不过，多选项没有像字
符组那样的排除功能。
---
## Page 43
Egrep元字符
17
排除型字符组是表示所有未列出字符的字符组的简便方法。因此，（^x]的意思并不
是“只有当这个位置不是×时才能匹配”，而是说“匹配一个不等于x的字符”。其中
的差别很细微，但很重要。例如，前面的概念可以匹配一个空行，而（^x]则不行。
-i参数规定在匹配时不区分大小写（15）（注6)。
（），（），目
董要，下文将马上介绍。
可选项元素
Optional Items
现在来看color和colour的匹配。它们的区别在于，后面的单词比前面的多个u，我们
可以用colou？ri来解决这个问题。元字符？；（也就是问号）代表可选项。把它加在一个
字符的后面，就表示此处容许出现这个字符，不过它的出现并非匹配成功的必要条件。
u？这个元字符与我们之前看到的元字符都不相同，它只作用于之前紧邻的元素。因此，
colou?ri的意思是：c，然后是os，然后是l，然后是o，然后是u？，最后是rl。
u?是必然能够匹配成功的，有时它会匹配一个u，其他时候则不匹配任何字符。关键在于，
无论u是否出现，匹配都是成功的。但这并不等于，任何包含？的正则表达式都永远能匹
配成功。例如，coloi和u?都能在‘semicolon’中匹配成功（前者匹配单词中的colo，
后者什么字符都没有匹配）。可是最后的'ri无法匹配，因此，最终colou?ri无法匹配
semicolon。
来看另一个例子，我们需要匹配表示7月4日（Julyfourth）的文本，其中月份可能写作July
或是Jul，而日期可能写作fourth、4th或者是4。显然，我们可以使用（JulylIJul）·
（fourth14th14），但也可以找些其他的办法来解决这个问题。
首先，我们把（JulyIJu1）缩短为（July?）。你明白这种等价变换吗？删除1之后，就
没必要保留括号了。当然保留也可以，但不保留括号显得更整洁一些。于是我们得到
July?(fourth14th14)Jo
注6：按照第V页的体例说明，15代表参照本书第15页的内容。
---
## Page 44
18
第1章：正则表达式入门
现在来看第二部分，我们可以把4th|4简化为'4（th）？。我们看到，现在？作用的元素是
整个括号了。括号内的表达式可以任意复杂，但是“从括号外来看”它们是个整体。界定？
的作用对象（还可以划定我即将介绍的其他类似元字符的作用对象）是括号的主要用途之
一。
我们的表达式现在成了July？·（fourthI4（th）？）。尽管它包含了许多元字符，而且有嵌套
的括号，但理解起来并不困难。我们花了相当的工夫来讲解这两个简单的例子，但同时也
接触到了一些相关的知识，它们相当有助于一一或许你现在还意识不到一—我们理解正则表
达式。同样，通过这些讲解，我们也积累了依靠不同思路解决问题的经验。在阅读本书（同
时也是在加深理解）寻找复杂问题的最优解决方案的过程中，你可能会发现灵感可能在不
断涌现。正则表达式不是死板的教条，它更像是门艺术。
其他量词：重复出现
OtherQuantifiers:Repetition
+（加号）和*（星号）的作用与问号类似。元字符+表示“之前紧邻的元素出现一次或
多次”，而表示“之前紧邻的元素出现任意多次，或者不出现”。换种说法就是，*表