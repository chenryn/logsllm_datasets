### 连字符的使用

连字符在正则表达式中并不是元字符，除非它紧接在方括号 `[` 或 `(` 之后。例如，在字符组 `.-` 中，连字符表示一个范围。如果连字符不在字符组的开头（如 `[.-]`），这种用法是错误的。

---

## 第1章：正则表达式入门
### 测验答案

#### 问题11的答案
**为什么 `a[^u]` 无法匹配 'Qantas' 或者 'Iraq'?**

- **对于 'Qantas':** 正则表达式 `a[^u]` 要求小写 'q'，而 'Qantas' 中的 'Q' 是大写的。若改用 `Q[^u]`，则可以匹配 'Qantas'，但其他单词将不再匹配，因为它们不包含大写 'Q'。因此，使用 `[Qq][^u]` 可以匹配所有相关单词。
- **对于 'Iraq':** 正则表达式要求 'q' 后紧跟一个非 'u' 的字符，这排除了 'q' 在行尾的情况。通常文本行结尾有换行符，但 `egrep` 在检查正则表达式前会删除这些换行符。因此，在行尾的 'a' 后没有可匹配的非 'u' 字符。不过，如果 `egrep` 保留换行符（许多其他工具会保留），或者 'Iraq' 后紧跟空格或其他单词，则该行可以匹配。

重要的是理解，即使是否定型字符组，也需要匹配一个字符。

---

### 点号的使用

在 `03.19.76` 中，点号是一个元字符，它可以匹配任意字符（包括连字符、句号和斜线）。然而，点号可以匹配任何字符，所以这个正则表达式也能匹配 `1otterynumbers: 192033197639`。

更精确的正则表达式是 `03[-./]19[-./]76`，但它更难读且更难写。相比之下，`03.19.76` 更易理解但不够精确。选择哪一个取决于对检索文本的了解程度及所需精确度。编写正则表达式时，需要在对目标文本的了解与检索精确性之间取得平衡。

---

### 多选结构

多选结构允许我们将不同的子表达式组合成一个总表达式，以匹配其中任意一个子表达式。例如，`Bob|Robert` 可以同时匹配 'Bob' 和 'Robert'。

- **示例:** `gr[ea]y` 可以写作 `grey|gray` 或 `gr(a|e)y`。后者用括号来界定多选结构的范围。注意，`gr[ale]y` 不符合要求，因为 'l' 只是一个普通字符。
- **另一个例子:** `(First|1st) [Ss]treet` 可以简化为 `(Fir|1)st [Ss]treet`，因为 'First' 和 '1st' 都以 'st' 结尾。

多选结构可以包含多个字符，但不能超出括号的范围。每个多选结构可以匹配任意长度的文本，而字符组只能匹配单个字符。

---

### 忽略大小写

E-mail 标头中的字段类型通常以大写字母开头，但 E-mail 标准并未严格规定大小写。使用 `egrep` 的 `-i` 参数可以进行忽略大小写的匹配，从而处理这种情况。

---

### 单词分界符

某些版本的 `egrep` 支持单词分界符，用于匹配单词的开始和结束位置。例如，`\bcat\b` 匹配完整的单词 'cat'。请注意，并非所有版本的 `egrep` 都支持单词分界符。

---

### 小结

下表总结了我们已经介绍过的元字符：

| 元字符 | 名称         | 匹配对象                     |
|--------|--------------|------------------------------|
| `.`    | 点号         | 单个任意字符                 |
| `[..]` | 字符组       | 列出的任意字符               |
| `[~...]` | 排除型字符组 | 未列出的任意字符             |
| `^`    | 脱字符       | 行的起始位置                 |
| `$`    | 美元符       | 行的结束位置                 |
| `\b`   | 单词分界符   | 单词的开始或结束位置         |
| `|`    | 竖线         | 匹配分隔两边的任意一个表达式 |
| `(.-)` | 括号         | 限制竖线的作用范围           |

---

### 可选项元素

元字符 `?` 表示可选项，加在一个字符后表示该字符可以出现也可以不出现。例如，`colou?r` 可以匹配 'color' 和 'colour'。

---

### 其他量词：重复出现

- `+` 表示前面的元素出现一次或多次。
- `*` 表示前面的元素出现零次或多次。

通过这些讲解，我们可以更好地理解和应用正则表达式，找到复杂问题的最优解决方案。正则表达式不仅是一套规则，更是一种解决问题的艺术。