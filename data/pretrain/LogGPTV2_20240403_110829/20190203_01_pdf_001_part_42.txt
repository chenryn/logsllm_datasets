while other master nodes can be loaded from an offline snapshot.
Note: Offline snapshots are not supported for a multi-master replication system that is
actively in use. Any changes on an active master node will be lost during the offline
snapshot process of dumping or restoring the data of another node.
The following steps describe how to create a master node from an offline snapshot.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 506
EDB Postgres Replication Server User’s Guide
Step 1: Register the publication server, add the master definition node, and create the
publication as described in Section 6.2.
Note: The following steps must be performed before adding a master node that is to be
loaded by an offline snapshot. Steps 2 through 10 can be repeated each time you wish to
create an additional master node from an offline snapshot.
Step 2: Be sure there is no schedule defined on the replication system, otherwise remove
the schedule for the duration of the following steps. See Section 7.3.2 for directions on
removing a schedule.
Step 3: Modify the publication server configuration file if these options are not already
set as described by the following:
 Change the offlineSnapshot option to true. When the publication server is
restarted, offlineSnapshot set to true has the effect that adding a master
node sets a column in the control schema indicating an offline snapshot is used to
load this master node.
 Set the batchInitialSync option to the appropriate setting for your particular
situation as discussed at the end of Section 7.9.1.
Step 4: Restart the publication server if the publication server configuration file was
modified in Step 3. See Section 5.2.1 for directions on restarting a publication server.
Step 5: In the database to be used as the new master node, create the schema, the table
definitions, and load the tables from your offline data source.
Step 6: Add the master node as described in Section 6.3 with options Replicate
Publication Schema and Perform Initial Snapshot unchecked.
Step 7: Perform an initial on demand synchronization. See Section 6.5.2 for directions on
performing an on demand synchronization.
Step 8: If you are not planning to load any other master nodes using an offline snapshot
at this time, change the offlineSnapshot option back to false and the
batchInitialSync option to true in the publication server configuration file.
Step 9: Restart the publication server if you modified the publication server configuration
file in Step 8.
Step 10: Re-add the schedule if one had been removed in Step 2. See Section 7.2 for
directions on creating a schedule.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 507
EDB Postgres Replication Server User’s Guide
7.10 Replicating Postgres Partitioned Tables
Both PostgreSQL and Advanced Server support partitioned tables, which can be
replicated with xDB Replication Server in either a single-master or multi-master
replication system.
The following are the various partitioning techniques:
 Advanced Server partitioning compatible with Oracle databases
 Postgres declarative partitioning (applies to both PostgreSQL and Advanced
Server version 10 and later)
 Postgres table inheritance (applies to both PostgreSQL and Advanced Server)
If you are using Advanced Server, partitioned tables can be created using the CREATE
TABLE statement with partitioning syntax compatible with Oracle databases. For
information on partitioning compatible with Oracle databases, see Chapter 10 “Table
Partitioning” in the EDB Postgres Advanced Server 10.0 Database Compatibility for
Oracle Developers Guide available from the EnterpriseDB website located at:
https://www.enterprisedb.com/resources/product-documentation
If you are using version 10 or later of PostgreSQL or Advanced Server, declarative
partitioning can be used to create partitioned tables. The CREATE TABLE syntax for
creating a declarative partitioned table is similar to the partitioning compatible with
Oracle databases, but the individual partitions of the declarative partitioned table must be
separately created with their own CREATE TABLE statements.
If you are using native PostgreSQL version 9.6 or earlier, you must use a technique called
table inheritance where you first create a parent table from which you then create one or
more child tables that inherit the columns of the parent. Each child is an independent
table in its own right except that it includes the column definitions of its parent. You then
define a trigger on the parent table to direct which child table an inserted row is to be
stored. Table inheritance can be used on Advanced Server as well.
For information on declarative partitioning and table inheritance, see the PostgreSQL
core documentation available at:
https://www.postgresql.org/docs/current/static/ddl-partitioning.html
Regardless of the partitioning method, the resulting partitioned table is comprised of a
parent table with a set of child tables.
Replication of these Postgres partitioned tables in a single-master or multi-master
replication system is accomplished in the same manner.
Note the following general restrictions when the publication contains a partitioned table:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 508
EDB Postgres Replication Server User’s Guide
 SQL Server cannot be used as a subscription database.
 When using table inheritance, the subscription databases must be Postgres – they
cannot be Oracle or SQL Server.
All three partitioning techniques are illustrated on the emp table used as an example
throughout this document. The partitioned table is then used in a publication of a multi-
master replication system in the following sections:
 For creating a publication in Postgres 9.x, see Section 7.10.1.
 For creating a publication in Postgres 10 or later, see Section 7.10.2.
The following creates the partitioned table in Advanced Server using partitioning
compatible with Oracle databases:
CREATE TABLE emp (
empno NUMERIC(4) PRIMARY KEY,
ename VARCHAR(10),
job VARCHAR(9),
mgr NUMERIC(4),
hiredate DATE,
sal NUMERIC(7,2),
comm NUMERIC(7,2),
deptno NUMERIC(2)
)
PARTITION BY LIST(deptno)
(
PARTITION dept_10 VALUES (10),
PARTITION dept_20 VALUES (20),
PARTITION dept_30 VALUES (30)
);
--
-- Load the 'emp' table
--
INSERT INTO emp VALUES (7369,'SMITH','CLERK',7902,'17-DEC-80',800,NULL,20);
INSERT INTO emp VALUES (7499,'ALLEN','SALESMAN',7698,'20-FEB-
81',1600,300,30);
INSERT INTO emp VALUES (7521,'WARD','SALESMAN',7698,'22-FEB-81',1250,500,30);
INSERT INTO emp VALUES (7566,'JONES','MANAGER',7839,'02-APR-
81',2975,NULL,20);
INSERT INTO emp VALUES (7654,'MARTIN','SALESMAN',7698,'28-SEP-
81',1250,1400,30);
INSERT INTO emp VALUES (7698,'BLAKE','MANAGER',7839,'01-MAY-
81',2850,NULL,30);
INSERT INTO emp VALUES (7782,'CLARK','MANAGER',7839,'09-JUN-
81',2450,NULL,10);
INSERT INTO emp VALUES (7788,'SCOTT','ANALYST',7566,'19-APR-
87',3000,NULL,20);
INSERT INTO emp VALUES (7839,'KING','PRESIDENT',NULL,'17-NOV-
81',5000,NULL,10);
INSERT INTO emp VALUES (7844,'TURNER','SALESMAN',7698,'08-SEP-81',1500,0,30);
INSERT INTO emp VALUES (7876,'ADAMS','CLERK',7788,'23-MAY-87',1100,NULL,20);
INSERT INTO emp VALUES (7900,'JAMES','CLERK',7698,'03-DEC-81',950,NULL,30);
INSERT INTO emp VALUES (7902,'FORD','ANALYST',7566,'03-DEC-81',3000,NULL,20);
INSERT INTO emp VALUES (7934,'MILLER','CLERK',7782,'23-JAN-82',1300,NULL,10);
The following creates the partitioned table in PostgreSQL or Advanced Server 10 or later
using declarative partitioning:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 509
EDB Postgres Replication Server User’s Guide
Note: When creating a declarative partitioned table that is to be replicated using xDB
Replication Server, the PRIMARY KEY constraint must be included in the CREATE
TABLE statements of the individual partitions, not in the CREATE TABLE statement of the
parent table to be partitioned.
CREATE TABLE emp (
empno NUMERIC(4),
ename VARCHAR(10),
job VARCHAR(9),
mgr NUMERIC(4),
hiredate DATE,
sal NUMERIC(7,2),
comm NUMERIC(7,2),
deptno NUMERIC(2)
)
PARTITION BY LIST(deptno);
--
-- Create the partitions
--
-- The partitions must contain the PRIMARY KEY constraint
--
CREATE TABLE emp_dept_10 PARTITION OF emp (empno PRIMARY KEY)
FOR VALUES IN (10);
CREATE TABLE emp_dept_20 PARTITION OF emp (empno PRIMARY KEY)
FOR VALUES IN (20);
CREATE TABLE emp_dept_30 PARTITION OF emp (empno PRIMARY KEY)
FOR VALUES IN (30);
--
-- Load the 'emp' table
--
INSERT INTO emp VALUES (7369,'SMITH','CLERK',7902,'17-DEC-80',800,NULL,20);
INSERT INTO emp VALUES (7499,'ALLEN','SALESMAN',7698,'20-FEB-
81',1600,300,30);
INSERT INTO emp VALUES (7521,'WARD','SALESMAN',7698,'22-FEB-81',1250,500,30);
INSERT INTO emp VALUES (7566,'JONES','MANAGER',7839,'02-APR-
81',2975,NULL,20);
INSERT INTO emp VALUES (7654,'MARTIN','SALESMAN',7698,'28-SEP-
81',1250,1400,30);
INSERT INTO emp VALUES (7698,'BLAKE','MANAGER',7839,'01-MAY-
81',2850,NULL,30);
INSERT INTO emp VALUES (7782,'CLARK','MANAGER',7839,'09-JUN-
81',2450,NULL,10);
INSERT INTO emp VALUES (7788,'SCOTT','ANALYST',7566,'19-APR-
87',3000,NULL,20);
INSERT INTO emp VALUES (7839,'KING','PRESIDENT',NULL,'17-NOV-
81',5000,NULL,10);
INSERT INTO emp VALUES (7844,'TURNER','SALESMAN',7698,'08-SEP-81',1500,0,30);
INSERT INTO emp VALUES (7876,'ADAMS','CLERK',7788,'23-MAY-87',1100,NULL,20);
INSERT INTO emp VALUES (7900,'JAMES','CLERK',7698,'03-DEC-81',950,NULL,30);
INSERT INTO emp VALUES (7902,'FORD','ANALYST',7566,'03-DEC-81',3000,NULL,20);
INSERT INTO emp VALUES (7934,'MILLER','CLERK',7782,'23-JAN-82',1300,NULL,10);
The following creates the partitioned table in PostgreSQL or Advanced Server using table
inheritance:
--
-- Create the parent table
--
CREATE TABLE emp (
empno NUMERIC(4) NOT NULL CONSTRAINT emp_pk PRIMARY KEY,
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 510
EDB Postgres Replication Server User’s Guide
ename VARCHAR(10),
job VARCHAR(9),
mgr NUMERIC(4),
hiredate DATE,
sal NUMERIC(7,2),
comm NUMERIC(7,2),
deptno NUMERIC(2)
);
--
-- Create the child tables
--
CREATE TABLE emp_dept_10 (
CHECK (deptno = 10)
) INHERITS (emp);
CREATE TABLE emp_dept_20 (
CHECK (deptno = 20)
) INHERITS (emp);
CREATE TABLE emp_dept_30 (
CHECK (deptno = 30)
) INHERITS (emp);
ALTER TABLE emp_dept_10 ADD CONSTRAINT emp_dept_10_pk PRIMARY KEY (empno);
ALTER TABLE emp_dept_20 ADD CONSTRAINT emp_dept_20_pk PRIMARY KEY (empno);
ALTER TABLE emp_dept_30 ADD CONSTRAINT emp_dept_30_pk PRIMARY KEY (empno);
--
-- Create the trigger function to insert into the proper child by deptno
--
CREATE OR REPLACE FUNCTION emp_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
IF NEW.deptno = 10 THEN
INSERT INTO emp_dept_10 VALUES (NEW.*);
ELSIF NEW.deptno = 20 THEN
INSERT INTO emp_dept_20 VALUES (NEW.*);
ELSIF NEW.deptno = 30 THEN
INSERT INTO emp_dept_30 VALUES (NEW.*);
ELSE
RAISE EXCEPTION 'Department # out of range.';
END IF;
RETURN NULL;
END;
$$
LANGUAGE plpgsql;
--
-- Create the trigger
--
CREATE TRIGGER insert_emp_trigger
BEFORE INSERT ON emp
FOR EACH ROW EXECUTE PROCEDURE emp_insert_trigger();
--
-- Load the 'emp' table
--
INSERT INTO emp VALUES (7369,'SMITH','CLERK',7902,'17-DEC-80',800,NULL,20);
INSERT INTO emp VALUES (7499,'ALLEN','SALESMAN',7698,'20-FEB-
81',1600,300,30);
INSERT INTO emp VALUES (7521,'WARD','SALESMAN',7698,'22-FEB-81',1250,500,30);
INSERT INTO emp VALUES (7566,'JONES','MANAGER',7839,'02-APR-
81',2975,NULL,20);
INSERT INTO emp VALUES (7654,'MARTIN','SALESMAN',7698,'28-SEP-
81',1250,1400,30);
INSERT INTO emp VALUES (7698,'BLAKE','MANAGER',7839,'01-MAY-
81',2850,NULL,30);
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 511
EDB Postgres Replication Server User’s Guide
INSERT INTO emp VALUES (7782,'CLARK','MANAGER',7839,'09-JUN-
81',2450,NULL,10);
INSERT INTO emp VALUES (7788,'SCOTT','ANALYST',7566,'19-APR-
87',3000,NULL,20);
INSERT INTO emp VALUES (7839,'KING','PRESIDENT',NULL,'17-NOV-
81',5000,NULL,10);
INSERT INTO emp VALUES (7844,'TURNER','SALESMAN',7698,'08-SEP-81',1500,0,30);
INSERT INTO emp VALUES (7876,'ADAMS','CLERK',7788,'23-MAY-87',1100,NULL,20);
INSERT INTO emp VALUES (7900,'JAMES','CLERK',7698,'03-DEC-81',950,NULL,30);
INSERT INTO emp VALUES (7902,'FORD','ANALYST',7566,'03-DEC-81',3000,NULL,20);
INSERT INTO emp VALUES (7934,'MILLER','CLERK',7782,'23-JAN-82',1300,NULL,10);
The following illustrates the types of SQL queries that can be made on the parent and
child tables to show which tables actually contain the rows.
Querying the parent table, emp, with the asterisk appended to the table name in the
SELECT statement, shows the rows in the parent and child tables. This is the default
behavior if the asterisk is omitted.
edb=# SELECT * FROM emp*;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+-----------+------+--------------------+---------+---------+--------
7782 | CLARK | MANAGER | 7839 | 09-JUN-81 00:00:00 | 2450.00 | | 10
7839 | KING | PRESIDENT | | 17-NOV-81 00:00:00 | 5000.00 | | 10
7934 | MILLER | CLERK | 7782 | 23-JAN-82 00:00:00 | 1300.00 | | 10
7369 | SMITH | CLERK | 7902 | 17-DEC-80 00:00:00 | 800.00 | | 20
7566 | JONES | MANAGER | 7839 | 02-APR-81 00:00:00 | 2975.00 | | 20
7788 | SCOTT | ANALYST | 7566 | 19-APR-87 00:00:00 | 3000.00 | | 20
7876 | ADAMS | CLERK | 7788 | 23-MAY-87 00:00:00 | 1100.00 | | 20
7902 | FORD | ANALYST | 7566 | 03-DEC-81 00:00:00 | 3000.00 | | 20
7499 | ALLEN | SALESMAN | 7698 | 20-FEB-81 00:00:00 | 1600.00 | 300.00 | 30
7521 | WARD | SALESMAN | 7698 | 22-FEB-81 00:00:00 | 1250.00 | 500.00 | 30
7654 | MARTIN | SALESMAN | 7698 | 28-SEP-81 00:00:00 | 1250.00 | 1400.00 | 30
7698 | BLAKE | MANAGER | 7839 | 01-MAY-81 00:00:00 | 2850.00 | | 30
7844 | TURNER | SALESMAN | 7698 | 08-SEP-81 00:00:00 | 1500.00 | 0.00 | 30
7900 | JAMES | CLERK | 7698 | 03-DEC-81 00:00:00 | 950.00 | | 30
(14 rows)
The following queries show how the rows are physically divided amongst the child
tables. The use of the ONLY keyword results in rows only in the specified table of the
SELECT statement, and not from any of its children.
edb=# SELECT * FROM ONLY emp;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+-----+-----+----------+-----+------+--------
(0 rows)
edb=# SELECT * FROM ONLY emp_dept_10;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+-----------+------+--------------------+---------+------+--------
7782 | CLARK | MANAGER | 7839 | 09-JUN-81 00:00:00 | 2450.00 | | 10
7839 | KING | PRESIDENT | | 17-NOV-81 00:00:00 | 5000.00 | | 10
7934 | MILLER | CLERK | 7782 | 23-JAN-82 00:00:00 | 1300.00 | | 10
(3 rows)
edb=# SELECT * FROM ONLY emp_dept_20;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+---------+------+--------------------+---------+------+--------
7369 | SMITH | CLERK | 7902 | 17-DEC-80 00:00:00 | 800.00 | | 20
7566 | JONES | MANAGER | 7839 | 02-APR-81 00:00:00 | 2975.00 | | 20
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 512
EDB Postgres Replication Server User’s Guide
7788 | SCOTT | ANALYST | 7566 | 19-APR-87 00:00:00 | 3000.00 | | 20
7876 | ADAMS | CLERK | 7788 | 23-MAY-87 00:00:00 | 1100.00 | | 20
7902 | FORD | ANALYST | 7566 | 03-DEC-81 00:00:00 | 3000.00 | | 20
(5 rows)
edb=# SELECT * FROM ONLY emp_dept_30;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+----------+------+--------------------+---------+---------+--------
7499 | ALLEN | SALESMAN | 7698 | 20-FEB-81 00:00:00 | 1600.00 | 300.00 | 30
7521 | WARD | SALESMAN | 7698 | 22-FEB-81 00:00:00 | 1250.00 | 500.00 | 30
7654 | MARTIN | SALESMAN | 7698 | 28-SEP-81 00:00:00 | 1250.00 | 1400.00 | 30
7698 | BLAKE | MANAGER | 7839 | 01-MAY-81 00:00:00 | 2850.00 | | 30
7844 | TURNER | SALESMAN | 7698 | 08-SEP-81 00:00:00 | 1500.00 | 0.00 | 30
7900 | JAMES | CLERK | 7698 | 03-DEC-81 00:00:00 | 950.00 | | 30