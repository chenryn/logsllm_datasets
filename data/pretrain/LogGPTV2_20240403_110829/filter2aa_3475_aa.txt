1 
The Journey Of Hunting ITW Windows LPE 0day 
Quan Jin  
DBAPPSecurity 
Black Hat USA 2022 
Contents 
The Journey Of Hunting ITW Windows LPE 0day ....................................................................................1 
Abstract..........................................................................................................................................................1 
Background ..................................................................................................................................................2 
Is it possible to catch an itw LPE 0day? ..............................................................................................2 
Learn from history (and now) .................................................................................................................3 
Why should we learn from history ..............................................................................................3 
How we study historical cases ......................................................................................................3 
Why should we learn from now ...................................................................................................4 
One road leads to Rome .........................................................................................................................4 
Choose the right tool .......................................................................................................................4 
Build the right rule ............................................................................................................................6 
Build a workable system .................................................................................................................7 
Test and improve the system ........................................................................................................8 
Results ............................................................................................................................................................8 
The Story of CVE-2021-1732 .......................................................................................................8 
The Story of CVE-2021-33739 .....................................................................................................9 
The Story of a “Patched” 1day ................................................................................................... 11 
Suggestions and insights ...................................................................................................................... 13 
Reference ................................................................................................................................................... 13 
Abstract  
In this paper, we will talk our story of how to hunt itw(in-the-wild) Windows LPE 0day 
during 2020 and 2021: why we think this is possible, how we study historical cases, how 
we use learned experience to develop a detection method, and how we improve the 
method to make it more accurate. By using this method, we successfully caught two itw 
Windows LPE 0days and an itw Windows LPE 1day. 
We will also compare the advantages and disadvantages of several hunting methods, 
and give some insights into the trend of itw Windows LPE 0day in the future. 
2 
Background  
As you can see in the picture, from 2017 to 2021, Microsoft disclosed a total of 28 itw 
Windows LPE 0days, most of them are Windows kernel vulnerabilities. These 
vulnerabilities are often used by top level groups and could cause great harm. For 
security vendors, it is very challenging to catch an itw Windows LPE 0day.  
ITW Windows LPE 0day (2017-2021) 
Starting in 2020, we began to think about the possibility of catching an itw Windows 
LPE 0day.   
Is it possible to catch an itw LPE 0day?  
In order to answer this question, we should think about other two questions: 
1. 
How to obtain valuable data source? 
2. 
How to develop effective detection methods? 
For the first question, we have some private datasets. In addition, historical cases show 
that public platforms such as VirusTotal may have 0days. Therefore, by using private 
and public datasets, we can solve the first question. 
For the second question, there are two methods for catching a 0day from millions of 
samples: dynamic detection or static detection.  
a) 
Dynamic detection refers to simulation execution in a sandbox or real environment 
and picking out a sample through abnormal behavior (such as antivirus and sandbox) 
b) Static detection refers to matching samples with static signatures (such as YARA) 
Both methods have advantages and disadvantages. We have tried both methods within 
our capabilities. Based on the results, we think static detection is more suitable for us, 
we will detail the process later. 
Next, I’ll explain why we spend a lot of time studying historical itw Windows LPE 0days. 
3 
Learn from history (and now) 
Why should we learn from history  
There are three reasons: 
1. 
Some exploit techniques are consistent over time 
2. 
Thinking from the attacker's view allows for better defense 
3. 
Historical cases have been carefully studied by the community 
How we study historical cases  
In order to learn from history, we’ve studied over 50 CVEs, almost all itw Windows LPE 
0days and some 1days that from 2014 to 2021. 
We carefully counted the discovered vendor, using organization, patch cycle, initial 
disclosure article, usage scenario, targeted system versions, vulnerability module, 
vulnerability type, exploit techniques, public analysis blogs, public exploits, the original 
sample(if have) and other information. 
Here I would like to focus on a few key points: 
Usage scenario:  
a) 
Whether the sample is used as a standalone component, or as part of a chain  
b) Whether the exploit was used in a fileless form (such as dll reflection), or was just 
contained in a drop file 
These information will directly affect our selection of different detection methods. 
Targeted system versions: 
Many Windows LPE samples will check OS version before they are used, and can only 
trigger or exploit in some appropriate versions.  
This information is especially useful when making a sandbox or reproduction 
environment. 
Vulnerability module: 
By counting the vulnerability modules of historical samples, we can conclude which 
component is most targeted, and which attack surface is most favored by attackers 
during a specific period of time. 
Vulnerability type: 
By counting the type of historical vulnerabilities, we can infer which type of vulnerability 
is the attacker most favored, this information can help us make right reproduction 
environment (for example, whether need to config Driver Verifier). This information can 
also tell us the popularity of different vulnerability types.  
4 
Exploit techniques: 
I think this is the most important information. We count the exploit techniques for every 
itw Windows LPE 0day (which we can get the origin file or can find relative descriptions).  
Based on the statistic, we have obtained some valuable conclusions. For example, 
“bServerSideWindowProc” method was popular from 2015 to 2016. The method of 
using “Previous Mode” to achieve arbitrary address read and write has become more 
and more popular since 2018. We also found that the method of using 
“HMValidateHandle” to leak kernel information is popular in the past five years.  
Public analysis blogs & exploits: 
The public blogs and exploits contain the research results of the community. Absorbing 
these existing knowledges is just like standing on the shoulders of giants, which is very 
helpful for us. 
The original sample (if have): 
We also pay great attention to collecting the original samples of each historical 
Windows LPE 0day. The files, hashes, and exploits of these original samples are the first-
hand information, if we can detect them, we can also catch similar samples in the future. 
Why should we learn from now  
In addition to learning from history, we should also learn from the latest vulnerability 
and exploit techniques. The reasons are as follows: 
1. A new disclosed vulnerability may have variants (such as CVE-2021-1732 and CVE-
2022-21882) 
2. A new targeted module will be fuzzed and audited by community (such as clfs.sys) 
3. An attacker may have some similar vulnerabilities in use or wait to use (For example, 
Kaspersky discovered CVE-2021-28310 based on CVE-2021-1732) 
4. A new exploit technique tends to be used by attackers soon (such as Pipe Attribute 
technique in “Scoop the Windows 10 pool!”and WNF technique in itw CVE-2021-
31956 sample) 
Next, I will describe how we compare different detection methods and choose one from 
them.  
One road leads to Rome 
Choose the right tool  
As far as we know, there are three optional methods to catch an itw Windows LPE:  
1. 
Antivirus (or something like it) 
2. 
Sandbox (or something like it) 
3. 
YARA (or something like it) 
Antivirus is the most powerful tool. It was deployed in large-scale real-world 
5 
environments. It can also detect threats in real time and have chance to extract 
encrypted privilege escalation component. Kaspersky have caught some itw LPE 0days 
with their antivirus product in the past few years. However, not every vendor’s antivirus 
can be as good as Kaspersky. Also, antivirus is likely to be bypassed or detected. These 
increase the difficulty of developing an antivirus-based hunting method. 
Sandbox is another tool to hunt itw 0day. Unlike antivirus, the sandbox environment is 
highly controllable and can be freely configured. In addition, the sandbox's behavior-
based detection makes it accuracy. I had some successful experience on itw Office 0day 
hunting with the help of sandbox. Interested readers can refer to my previous speech 
on Bluehat Shanghai 2019. 
However, I think sandbox is somehow not suitable for hunting Windows LPE 0days. 
Unlike Office, many LPE exploits have OS version check to avoid unexpected BSOD, 
which makes them more hidden to sandbox. You may think that we can solve this 
problem by making a few more environments, but the number of new PE samples is 
huge, each sample is delivered to a new environment means a huge resource overhead. 
Not every vendor has enough money to afford this. 
In addition, sandbox-based detection methods have other disadvantages for Windows 
LPE samples： 
a) 
Some samples require parameters (for example, a Pid), but the sandbox cannot 
provide valid parameters by default 
b) Some samples only lead to BSOD without subsequent behavior, which is difficult to 
detect 
c) 
There is a cycle between sandbox development and deployment, which will lead to 
missing the best detection cycle for some latest exploits 
YARA is another method to hunt itw Windows LPE 0day. It has a very good effect on 
detecting samples which have certain signatures. 
It almost has no technical barriers, no fear of various checks, and it is flexible in 
development and deployment. When a new exploit technique appears, we can quickly 
convert it to rules and feed it into the detection system. Finally, it’s lower cost than 
antivirus and sandbox. 
But it also has shortcomings, such as it can easily lead to false positives and false 
negatives. Therefore, if we use YARA to hunt itw LPE 0day, we need to be very familiar 
with historical cases, and we have done this before.  
We considered the above hunting methods in combination with our own situation, and 
finally chose YARA as our main hunting method, which is more easy, more flexible and 
less expensive for Windows LPE 0day hunting.  
Another reason we choose YARA is that, after writing some YARA rules, we back-tested 
some historical Windows LPE samples. To our surprise, YARA performed better than 
6 
expected.  
Build the right rule  
Now we will describe how to transform learned experience into YARA rules. 
Basicly, we have three principles: 
1. Write rules according to the signatures of each stage of exploitation 
2. Write rules for latest exploit techniques 
3. Write rules for the most likey vulnerability 
For the first idea, normally, a Windows kernel LPE exploit has the following stages: 
a) 
Vulnerability Triggering 
b) Heap Feng Shui  
c) 
Kernel Information Leak 
d) Arbitrary Address Read and Write  
e) 
Control Flow Hijacking  
f) 
Privilege Escalation 
Our task is to write rules based on the common features of each stage. Here are some 
examples： 
For kernel information leak, the idea is to match against common Windows kernel 
information leak techniques. Including but not limited to these: 
NtQuerySystemInformation 
➢ 
SystemBigPoolInformation 
➢ 
SystemModuleInformation 
➢ 
… 
Win32k Shared Info User Handle Table 
Descriptor Tables  
HMValidateHandle 
GdiSharedHandleTable 
For arbitrary address read/write primitives, the idea is to match against the following 
points: 
SetWindowLong / SetWindowLongPtr 
SetWindowText / InternalGetWindowText / NtUserDefSetText  
GetMenuItemRect / SetMenuItemInfo / GetMenuBarInfo 
NtUpdateWnfStateData / NtQueryWnfStateDate 
GetBitmapBits / SetBitmapBits 
GetPaletteEntries / SetPaletteEntries 
CreatePipe / NtFsControlFile 
Previous Mode + NtReadVirtualMemory / WriteVirtualMemory 
It should be noted that the above are just some possible ideas, not all ideas are suitable 
for YARA rules, and some ideas will lead to lots of false positives.  
7 
For the second idea, here I give two examples: 
1. In July 2020, Paul Fariello (@paulfariello) and Corentin Bayet (@OnlyTheDuck) of 
Synacktiv presented a new Windows kernel heap overflow exploit technique at the 
SSTIC2020 conference. After studying their paper, we realized that the method of 
arbitrary address read with the help of Pipe Attribute in PagedPool is universal and 
may be used in the future. So we spent some time writing some YARA rules for this 
technique. It later turned out that these rules caught some high-value samples. 
2. On June 8, 2021, Kaspersky wrote a blog, which disclosed an itw Windows LPE 0day 
(CVE-2021-31956). As mentioned in the blog, the sample achieved arbitrary 
address read and write with the help of Windows Notification Facility (WNF). In July 
and August 2021, Alex Plaskett(@alexjplaskett) of NCC Group published two blogs 
detailing the exploit techniques of CVE-2021-31956 and explaining the method of 
using WNF to construct arbitrary address read and write primitives. At the same 
time, YanZiShuang(@YanZiShuang) also wrote a blog discussing the method of 
exploiting vulnerabilities with the help of WNF. After studying these blogs, we 
realized that the method is universal. We again spent some time writing some YARA 
rules for this technique. As expected, we did catch some high-value samples. 
For the third idea, I also give an example here. On April 13, 2021, Kaspersky wrote a 
blog and disclosed CVE-2021-28310, which is an itw 0day in Desktop Windows 
Manager. Less than a month later, ZDI published another blog, disclosing another 
vulnerability(CVE-2021-26900), which is also a vulnerability in Desktop Windows 
Manager. This made us realize that this type of vulnerability may appear again in the 
future, so we wrote several rules for Desktop Windows Manager vulnerabilities in hours. 
A few weeks later, we caught CVE-2021-33739. 
Build the right rule is the first step. In order to catch an itw Windows LPE 0day, we need 
to build a whole system. 
Build a workable system  
Think about these questions: 
1. When a sample is matched by a rule, how to notify us in time? 
2. When we get a sample, how to quickly reproduce and classify it? 
3. What skills should we master to debug different Windows LPE samples? 
For the first question, if our YARA rules running on VirusTotal, we can use the 
notification mechanism on VirusTotal Hunting page, we can configure the “Notify by 
email“ item. When a new sample is matched, our email will receive a notification at once.  
For rules running on our own products, we built a similar notification interface like VT. 
To answer the second question, we have counted the targetd OS version for each 
historical sample by studying historical cases, these information can be used here. In 
addition, considering that what we hunt may be a Nday, 1day or 0day, we need to 