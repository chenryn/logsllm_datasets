GND (cid:1)→ ν↓
G + (cid:1)→ ν↑
GND (cid:1)→ ν↓
¬VDD (cid:1)→ ν↑
G− (cid:1)→ ν↓
Table 1. Mapping of stuck-at process faults to
resulting PRS.
Table 2 contains some classes of faults that might not be
detected using the stuck-at fault model. Bridging faults may
result in production rules that are interfering (their pull-up
network and pull-down network are both active). The result-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
ing voltage level will depend on the driving strength of each
network and the resistance of the bridge itself. When the
pull-up or pull-down networks are active exclusively, this
node will be logically high or low respectively. The stuck-
on fault may cause interference if G+ and G−
can be si-
multaneously true. Without having to wait for ¬x , this pro-
duction rule may also result in a premature ﬁring of ν. The
ﬁrst PRS for the stuck-open fault is essentially the same as
the last stuck-at example in Table 1. The second PRS, how-
ever, may have turned a non-state-holding node into a state-
holding node.
Fault Class
Bridging
(ν0 ↔ ν1)
Stuck-Open
Stuck-On
(¬x)
(¬x)
(¬x)
Stuck-Open
State-Holding
(G + (cid:8)= G−)
Original PRS
0 (cid:1)→ ν0↑
G +
G−
0 (cid:1)→ ν0↓
1 (cid:1)→ ν1↑
G +
G−
1 (cid:1)→ ν1↓
¬x ∧ G + (cid:1)→ ν↑
x ∧ G− (cid:1)→ ν↓
¬x ∧ G + (cid:1)→ ν↑
x ∧ G− (cid:1)→ ν↓
¬x ∨ G + (cid:1)→ ν↑
x ∧ G− (cid:1)→ ν↓
G + (cid:1)→ ν↑
G− (cid:1)→ ν↓
Resulting PRS
0 ∨ G +
G +
G−
0 ∨ G−
1 (cid:1)→ ν0, ν1↑
1 (cid:1)→ ν0, ν1↓
G + (cid:1)→ ν↑
x ∧ G− (cid:1)→ ν↓
¬VDD (cid:1)→ ν↑
x ∧ G− (cid:1)→ ν↓
G + (cid:1)→ ν↑
x ∧ G− (cid:1)→ ν↓
G +∨
(G + ∧ G− ∧ ¬ζ(t)) (cid:1)→ ν↑
G−∨
(G− ∧ G + ∧ ζ(t)) (cid:1)→ ν↓
Table 2. Mapping of non-stuck-at process
faults to resulting PRS.
State-holding faults occur for two reasons. One, a non-
state-holding node becomes state-holding in the presence
of a fault. Two, a fault occurs in the feedback circuit that
is maintaining the charge on a state-holding node. It is dif-
ﬁcult to predict the exact behavior of a state holding node
since it will be particularly sensitive to noise. We will make
no assumptions about the time it takes for such a node to
dissipate charge. Instead, we assume that when this node is
state-holding it may be driven high or low by some arbi-
trary unit function ζ(t).
ductive coupling is particularly challenging since it decays
logarithmically with wire spacing [12], rather than lin-
early like capacitive coupling does. Transient faults due to
radiation occur when a particle strikes some region of a de-
vice and creates a track of electron-hole pairs. If these pairs
collect at a p-n junction, then there will be a resulting cur-
rent pulse.
When considering transient faults, without knowing the
exact geometry of a circuit, we have to consider the pos-
sibility that any node in our circuit can be affected. Every
production rule in the system will be of the form:
n ∨ ζn+(t) (cid:1)→ νn↑
G +
n ∨ ζn−(t) (cid:1)→ νn↓
G−
2.4. Delay Faults and Isochronic Branches
If a fault causes a circuit to exceed the circuit’s timing
speciﬁcations, but doesn’t affect the circuits logical func-
tion, it is said to be a delay fault. Delay faults can occur due
to the aforementioned sources. Some examples of sources
of delay faults are partial shorts, partial opens, and induced
currents in the opposite direction of switching.
In QDI circuits, delay faults will only cause a logical
fault if they occur on an isochronic branch, since it is the
only place timing assumptions are permissible. All other lo-
cations of delay faults will only change the performance of
the circuit, but not affect its correctness.
Figure 2. An example of an isochronic branch
(state holding element not shown).
2.3. Transient Faults
Transient faults are those that might occur at some
time t, but are not stable in the sense they might not oc-
cur at other times. Two major causes of transient faults
are crosstalk and radiation. Crosstalk is a mechanism
by which switching wires(aggressors) can induce a volt-
age on other wires(victims). Crosstalk is the result of
both capacitive coupling and inductive coupling. Al-
though crosstalk is somewhat of a design issue, newer tech-
nologies have upwards of six metal layers and it can be
difﬁcult to guarantee that crosstalk faults won’t occur. In-
An isochronic branch occurs when a wire forks to mul-
tiple gates, and at least one of those gates doesn’t acknowl-
edge a transition on that wire. An example of an isochronic
branch is shown in Figure 2. Initially, both A and B are high,
then A goes low. Since one input of the NAND gate is al-
ready low, when B goes low there is no change in out (it’s
still high). The problem occurs when there is a large delay
in the isochronic branch (labeled iso). When B goes low, the
output of the C-element (the left circuit) goes high. If sig-
nal B at the input of the NAND gate is still high, then it’s
output will go low when it shouldn’t have. We will discuss
a method to avoid these faults in Section 4.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
3. Failures in QDI Circuits
QDI systems are collections of communicating hardware
components known as processes [9]. A hardware process
communicates with other hardware processes via synchro-
nization and data channels [9]. Our approach to failure de-
tection focuses on the impact of faults on the behavior of
channels in the asynchronous system. This approach has
several advantages: (i) focusing on channels allows us to
ignore the problems that might occur in complex produc-
tion rules internal to a process; (ii) channels that operate
correctly have a well-deﬁned behavior that is consistent
throughout the asynchronous design; (iii) there is a class
of slack elastic systems whose correct operation only de-
pends on correct channel behavior, and such systems en-
compass entire microprocessors [8]; (iv) channels occur at
the bit-level granularity, as well as the function block or
pipeline granularity in high-performance asynchronous sys-
tems [11]; (v) transient faults can also be treated as er-
rors on channels, thereby leading to a uniform treatment
of the different fault categories. For simplicity, we will as-
sume that channels use a standard four-phase return-to-zero
handshake protocol, and that data is encoded using dual-rail
codes.
Data values and/or synchronization actions that transfer
control and/or data from one hardware process to another
are referred to as tokens. A token is a data item that prop-
agates through a pipeline, and that can be passed from one
process to another via a communication channel.
3.1. Deadlock
Most faults, especially stuck-at faults, will cause asyn-
chronous circuits to deadlock [3][2]. Whenever a fault in-
hibits a transition on a handshaking wire, then deadlock will
occur. Consider the half buffer circuit in Figure 3, where
shake protocols on the pairs (L, Le) and (R, Re). In terms
of handshaking expansion notation, the operation of this cir-
cuit can be described as the following sequence [6]:
*[[Re ∧ L]; R↑; Le↓; [¬Re]; R↓; [¬L]; Le↑]
Such circuits are the basis for highly pipelined asyn-
chronous QDI designs [6], so examining this circuit is in-
structive. A stuck-at fault on L, Le, R, or Re will halt the
buffer and the surrounding environment. If an open fault oc-
curs on node 1, then node 4 will be inhibited from mak-
ing an up-transition and R will be stuck-at-1. An open fault
on nodes 2 or 3 will cause R to be stuck-at-0 and sim-
ilarly, an open fault at node 5 or 6 will cause Le to be
stuck-at-0. We can assume that open faults on these nodes
will result in stuck-at faults because their outputs are stati-
cized (their charge is held by the weak transistors in the
inverter labeled “w”).
We can determine the resulting values of each synchro-
nization channel, when a particular fault causes deadlock,
by examining the HSE (handshaking expansion) of the pro-
cess. Annotating the states of this buffer process with the
values of signals {L,Le,R,Re}, we have:
*[{x , 1, 0, x}[Re ∧ L];{1, 1, 0, 1}R↑;
{1, 1, 1, x}Le↓;{x , 0, 1, x}[¬Re];
{x , 0, 1, 0}R↓;{x , 0, 0, x}[¬L];
{0, 0, 0, x}Le↑]
The states in which the process will halt can be determined
by starting from the beginning of the HSE and stepping
through to the furthest state that can be reached when a tran-
sition is inhibited. Assuming that the process is examined at
t=∞, all the variables will be stable. The values of the chan-
nels for each stuck-at fault are shown in Table 3. When there
is a stuck-at-1 fault on R, it can halt in two different states.
The second state in which R stuck-at-1 halts can occur af-
ter reset, since we can’t make an assumption on how long it
takes the environment to perform Re↑.
Stuck-At-0
{0,1,0,1}
{0,0,0,1}
{1,1,0,1}
{1,1,0,0}
Stuck-At-1
{1,0,0,1}
{1,1,1,0}
{1,1,1,0}
{0,0,1,0}
{0,0,1,1}
Variable
L
Le
R
Re
Table 3. Resulting states, {L,Le,R,Re}, when a
PCHB deadlocks.
Figure 3. Precharge half buffer circuit
(PCHB).
3.2. Synchronization Failure
the environment communicates with the circuit using hand-
If a handshake on a synchronization channel begins or
ends prematurely, then the process and its environment ex-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
perience synchronization failure. When a process is receiv-
ing a synchronization signal, if Le↓ ﬁres before a hand-
shake is complete, then the environment may stop send-
ing the signal before the process has received it. If R↑ ﬁres
when the process has not received a synchronization signal,
then the process may send a synchronization signal when it
shouldn’t have.
were extensively used in the design of a high-performance
asynchronous microprocessor [11]. Validity and neutrality
Consider, once again, the PCHB of Figure 3. An invalid
synchronization signal may be sent if the production rule for
R↑ ﬁres in any of the following states (which correspond to
the labels in the previous HSE):
*[(cid:8)1 [Re ∧ L]; R↑; Le↓;
[¬Re]; R↓;(cid:8)2 [¬L];(cid:8)3 Le↑]
The production rules for R↑ are:
¬Re ∧ ¬Le
(cid:1)→ R↑
Re ∧ Le ∧ L (cid:1)→ R↓
(cid:1)→ R↑
¬R
(cid:1)→ R↓
R
The resulting PRS for faults that cause a premature ﬁring
of R↑ are shown in Table 4. Any variable that can tran-
sition in states (cid:8)1 , (cid:8)2 , or (cid:8)3 may cause R↑ to ﬁre if it’s
bridged to R and makes an upward transition or bridged to
R and makes a downward transition. If the nmos transis-
Fault
Resulting PRS
State
(cid:9)2
(cid:9)1
(cid:9)1
Stuck-On(L)
State-Holding
Bridging(Le↔R)
Bridging(Re↔R) (cid:9)1 , (cid:9)2 , (cid:9)3
Le ∨ ¬R (cid:1)→ R↑
G +
Re ∨ ¬R (cid:1)→ R↑
G +
Re ∧ Le (cid:1)→ R↓
(Re ∧ Le ∧ L)∨
(Re ∧ Le ∧ L ∧ ζ(t)) (cid:1)→ R↓
(Re ∧ Le ∧ L)∨
R−(t) (cid:1)→ R↓
¬R ∨ (¬ζR+(t)) (cid:1)→ R↑
Table 4. PRS for synchronization failures on
PCHB.
(cid:9)1 , (cid:9)2 , (cid:9)3
(cid:9)1 , (cid:9)2 , (cid:9)3
Transient
ζ
tor with L as its input is stuck-on, then the resulting circuit
will constantly send synchronization signals to the environ-
ment since the buffer no longer needs to wait for L↑. Dur-
ing state (cid:8)1 , R might only be driven by it’s staticizer and
is therefore vulnerable to noise and power dissipation if its
state-holding element is faulty.
3.3. Token Generation and Token Consumption
Similar to synchronization failures, processes that re-