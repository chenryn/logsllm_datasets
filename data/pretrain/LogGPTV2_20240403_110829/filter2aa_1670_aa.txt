Raspberry MoCA: an Automated Penetration 
Platform 
Andrew Hunt 
Volgeneau School of Engineering, George Mason University 
Fairfax, VA 
PI:EMAIL 
Abstract— Media Over Coaxial Alliance (MoCA) is a protocol 
encapsulating Ethernet protocols over coaxial cabling common to 
interior 
television 
wiring. Previous work 
discussed 
the 
vulnerabilities presented by common implementations of the 
protocol. In this paper, these vulnerabilities are realized with the 
development of Raspberry MoCA, an embedded device that 
provides a drop-in, automated exploitation kit which can be 
installed outside the target structure in less than five minutes, 
providing remote access and complete control over the 
connecting LAN. 
I. INTRODUCTION 
Prior work on Media over Coaxial Alliance (MoCA) 
protocol analysis revealed a major vulnerability in common 
implementations [1]. The logical separation between the local 
area network (LAN) and wide area network (WAN) is 
defeated by the use of a single physical cable to transmit both 
signals. Most operational service providers (OSPs), such as 
Verizon and Cox, present the termination point of their 
services to the optical network terminator (ONT) attached to 
the exterior of the serviced building for easy maintenance. 
This unit converts the signal to a coaxial cable, using the 
MoCA protocol to encapsulate the Ethernet packets to a 
receiving MoCA bridge embedded in the provider’s provided 
network router within the building.  
The router binds both MoCA LAN services for video 
devices and MoCA WAN services from the OSP to the same 
cable wiring used within the structure. It also bridges the 
MoCA LAN to the other LAN networks – wireless and 
Ethernet devices. Because the WAN signal runs on the cable, 
it is necessary to run this coaxial cable outside to the ONT. 
When this occurs, the LAN signal is also exposed, as depicted 
in Figure 1. This presents a physical attack vector to any 
attacker willing to disconnect the ONT and insert a coaxial 
splitter to an attached MoCA-to-Ethernet bridge, and any 
Ethernet device.  
Building on the evidence presented in the prior work, an 
exploitation platform was built on an embedded processing 
system. The developed platform includes automated enabling 
of remote connection from the Internet to the newly installed 
LAN device, as well as demonstration tools to provide to 
safely demonstrate the ease of which the attacker can attach, 
enumerate, profile, and exploit the target LAN.   
II. PLATFORM DESIGN 
Several elements were considered in the design of a 
platform to engage in extra-domicile attack. First, attaching to 
the MoCA network outside the domicile requires a power 
source. The attacker cannot assume that the coaxial splitter or 
ONT will be conveniently located to a power source. Tapping 
the electrical utility stack requires specialized knowledge, risk 
of electrocution, and most importantly time to conduct. The 
longer the attacker is around the property, the more likely they 
are to be detected. Therefore, the attacker must assume that 
they will provide power to the device. This can be achieved 
with an inexpensive universal power supply (UPS) system, 
widely available in many stores.  An APC BackUPS 350 ES 
was selected for its wide availability, available management 
software, and low cost [2,3]. With 200 volt-amps (VA) of 
stored power, a typical 3.5VA embedded unit would last about 
60 hours.  
MoCA Networks
Ground
FIOS
Fiber Optic Cable
Coaxial
Cable
ActionTec
Router
Coaxial
Cable
ONT
2GHz
3-way
Coaxial
Splitter
STB
DVR
“Home  Net”  Bridge:
MoCA LAN
Ethernet LAN
Wireless LAN
House Exterior Wall
Promulgation of WAN network
Promulgation of LAN networks
Figure 1: Promulgation of LAN and WAN over MoCA 
The supply of power from a UPS is limited by the watts 
drawn from the battery over time against its storage capacity. 
This illustrates the importance of the second consideration in 
design, the device power footprint. The attack unit would 
draw minimal power to maximize the available time to attack. 
This would allow the attacker to plant the device, then engage 
in other routine activities or travel before connecting to the 
unit. This allows the attacker to maintain a less obvious 
persona and reduce the risk of immediate detection.  
Low-power devices also present a smaller physical 
footprint, the third major consideration. Smaller devices are 
easier to obscure beneath or behind utility meters or 
decorative plants frequently employed to hide unsightly 
wiring installations.  
Embedded devices come in a variety of sizes and 
capabilities. However, almost all are based on an ARM 
processing architecture due to its efficient assembly 
instruction set and low power requirements [4]. Since no off-
the-shelf ARM units include a MoCA coaxial adapter with the 
board, an Ethernet-capable unit would need to be used with a 
Moca-to-Ethernet bridge. Our existing Netgear MCAB1001 
and related cabling was employed for this purpose, slightly 
increasing the power load on the UPS. 
Alleviating the need to support the MoCA chipset directly 
opened up the available operating systems to choose from. 
However, the recently released Kali Linux succeeds 
BackTrack as the standard high-quality, supported distribution 
platform with a tested suite of tools for an attacker to employ 
[5]. Kali also provides ARM versions of their distribution, 
enabling its use to bootstrap this development. Using a 
standard toolkit is important to an attacker as it reduces the 
number of observables that might reveal them should the 
device be discovered and analysed, the third design 
consideration. Upon discovery, anyone would be able to tell 
the unit was an attack device. However, there would be far 
fewer artifacts to reveal the identity of the attacker on a 
standard build than on a customized build unique to the 
choices of the builder. The attacker has some assurance that 
without external sources of information, the discovery of the 
unit would reveal nothing more than the owner was attacked. 
Table 1: Raspberry MoCA Platform Components 
Vendor 
Model 
Description 
APC 
BackUPS 
350 
ES 
200 VA Universal 
Power Supply 
Netgear 
MCAB1001 
MoCA Coax-to-
Ethernet Adapter 
RCA 
DH24SPR 
2-way 5-2400 MHz 
coaxial splitter 
RCA 
VH606N 
2x Digital RG-6 
coaxial cables 
Element14 
Raspberry 
Pi 
Model B R2 
Embedded ARM board 
w/ Ethernet 
Transcend 
TS8GSDHC10E 
Transcend 8 GB Class 
10 SDHC Flash 
Memory Card  
Raspberry 
Pi 
board case 
Motorola 
5V micro-USB 
phone charger 
Belkin 
Cat-5e 
patch 
cable 
Connect the embedded 
device to the MoCA 
adapter 
The final consideration was performing the development on 
a standard, widely available board at minimal cost. 
Element14’s Raspberry Pi was selected as it is an inexpensive 
development ARM platform that is directly supported by Kali 
Linux. The unit also has a wide community of support 
providing accessories to weatherize, power, and protect the 
device with only a small investment. Providing a unit that the 
attacker does not mind losing the cost of enables the 
aggressive deployment of the units, commoditizing the 
attacker’s   costs and increasing the odds of a successful 
engagement. Table 1 shows the final list of components used 
to create the Raspberry MoCA Platform. 
With the materials assembled, Kali Linux was downloaded 
and flashed to the SD card. A USB keyboard and video cable, 
whether component or HDMI, and display device were 
required to complete the initial build. Once running, 
rageweb’s disk expansion procedure was employed to expand 
the Kali installation to the entire available disk space on the 
SD card, a 60% gain [6]. With available space, additional 
tools could now be loaded. However, these needed to be 
selective as not to overwhelm the device’s performance 
capabilities. First the LAN environment needed to be assessed 
to determine what services would be needed to achieve remote 
accessibility to the device, enumeration of the network, and 
eventual subversion of the LAN. 
III. ASSESSING THE MOCA LAN 
The MoCA LAN is provided by the MoCA root node, 
typically located on the OSP’s provided network router. A 
Verizon Actiontec MI424WR router was used to assess the 
capabilities of a typical MoCA router. This device was found 
to support Universal Plug-n-Play (UPnP), a technology that 
allows for the automated discovery of devices and services 
within a broadcast domain [7,8]. UPnP typically operates over 
UDP 
port 
1900, 
providing 
and 
receiving 
broadcast 
information about and interpreting commands from other 
devices [9]. UPnP supports many protocols, including the 
Simple Service Discovery Protocol (SSDP) and Digital 
Network Living Alliance (DLNA), that support intra-LAN 
service establishment [10-16].  
UPnP-Inspector and Miranda were used to assess the UPnP 
services active upon the network [17,18]. Both are Python-
based toolkits that can actively probe or passively monitor the 
UPnP broadcast space to enumerate discovered machines and 
services offered. UPnP-Inspector also offers the ability to 
graphically browse and query specific environment settings 
provided by discovered devices [19]. While many devices 
provided information about the services they provided, it was 
determined that the focus of this effort would be on the 
gateway and the establishment of access, leaving the 
enumeration of other attached SSDP devices as an exercise for 
the attacker using tools like GUPnP, Rygel, Brisa, and 
Coherence [20-23]. This decision also reduced the footprint 
on the embedded device from these heavy, GUI-based 
programs. The gateway merely provided an interface via the 
Internet Gateway Device (IGD) protocol.  
IGD is essentially a command wrapper to forward ports 
through the firewall at the behest of requesting devices [24]. 
However, the assumption of IGD implementations is that 
every device on the LAN side of the firewall is trusted [25]. 
With no validation of requests, the firewall will open any 
arbitrary port and forward it to an internal device without 
authentication [26]. This makes the LAN vulnerable to 
devices that make illegitimate requests to open or close ports 
that affect other devices, client-side attacks that inject UPnP 
packets to the network, or nodes added to the network with 
malicious intent [27]. All nodes on the LAN are trusted nodes. 
IV. ENABLING REMOTE ACCESS 
With the discovery of the IGD protocol in play on the 
router, Kali was assessed for its ability to support the crafting 
of the UPnP IGD command to forward a port to the Raspberry 
MoCA’s running SSH session. This was achievable via 
Miranda, but it was a multi-step manual process to achieve. 
Another tool, MiniUPnP was acquired and found to be the 
smallest, most efficient UPnP tool encountered [28]. Like 
most Unix tools, MiniUPnP was designed to be feature 
specific and fast. Having the ability to be called from the 
command line with the necessary arguments for port 
redirection made MiniUPnP an excellent tool for scripting the 
port forwarding procedure.  
Table 2: rc.local code to establish port forwarding and 
reporting through a UPnP firewall 
#!/bin/sh -e 
# 
# rc.local 
sleep 120; 
upnpc -a `ip addr | fgrep "inet " \ 
| fgrep -v "host lo" | awk '{print $2}' \ 
| awk -F\/ '{print $1}'` 22 22 tcp \ 
| tee /tmp/report | mailx -s `ip addr \ 
| fgrep "inet " | fgrep -v "host lo" \ 
| awk '{print $2}' \ 
| awk -F\/ '{print $1}'`.report 
PI:EMAIL 
exit 0 
The short summary of the changes returned also provided 
the necessary information about the external IP address of the 
firewall, the port forwarded, and the internal IP address 
forwarded to that the attacker needs to connect to the 
Raspberry MoCA device. This was collected and codified into 
the rc.local script to execute, establish forwarding, and report 
the pertinent information to the attacker’s email address at 
power-on, as depicted in Table 2. 
Email was chosen as the delivery method for the 
establishment data to employ several advantages. Free email 
accounts are readily available and are difficult to attribute. 
Email constitutes a large amount of legitimate traffic to hide 
within, reducing the likely visibility of a small message. The 
protocol also transmits asynchronously, having many 
available tools to ensure delivery of the important data should 
there be a disruption in service, to ensure delivery of this 
critical message. While the chosen method sends the data in 
the clear, other methods, such as Google or Yahoo’s IMAP(S) 
services could be employed to provide more reliable, 
encrypted channels that blend into common LAN device, e.g. 
smartphone, communication streams [29]. 
V. EXPLOITING THE MOCA NETWORK 
With remote access to the LAN, the attacker has the 
advantage in assessing and choosing targets. With a limited 
time window to operate before the platform exhausts its stored 
power, the attacker would likely want to establish a more 
permanent foothold on one of the other network devices. 
Ettercap is a packet-spoofing and manipulation tool that is 
provided with the Kali distribution [30,31]. The tool provides 
a modular framework from which to commit a variety of 
network routing and addressing attacks. Of these, Address 
Resolution Protocol (ARP) spoofing provides the capability to 
redirect the entire local broadcast domain efficiently [32-34]. 
Utilizing the ARP man-in-the-middle (MITM) module, 
Ettercap enables the attacker to direct all non-gateway device 
traffic to the Raspberry MoCA unit. The tool includes a native 
forwarding capability, which passes the packets through its 
filters, then out to the gateway. The same works in reverse, 
creating a bi-directional packet capture and manipulation 
capability for the attacker. 
With access to LAN devices’ traffic, the attacker can 
profile the devices specifically, gaining detailed knowledge 