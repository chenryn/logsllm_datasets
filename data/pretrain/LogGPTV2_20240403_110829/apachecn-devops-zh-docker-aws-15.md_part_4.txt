在我们做到这一点之前，我们需要一种机制来获得 RDS 设置——幸运的是，在每个 Elastic Beanstalk 实例上都有一个名为`/opt/elasticbeanstalk/deploy/configuration/containerconfiguration`的文件，它以 JSON 文件格式包含了整个环境和应用配置。
如果您 SSH 到一个实例中，您可以使用`jq`实用程序(它已经预安装在弹性 Beanstalk 实例上)来提取弹性 Beanstalk 应用的无线电数据系统实例设置:
```
> sudo jq '.plugins.rds.env' -r \ 
 /opt/elasticbeanstalk/deploy/configuration/containerconfiguration
{
  "RDS_PORT": "3306",
  "RDS_HOSTNAME": "aa2axvguqnh17c.cz8cu8hmqtu1.us-east-1.rds.amazonaws.com",
  "RDS_USERNAME": "todobackend",
  "RDS_DB_NAME": "ebdb",
  "RDS_PASSWORD": "some-super-secret"
}
```
通过这种提取无线电数据系统设置的机制，我们现在可以修改`.ebextensions/init.config`文件，将这些设置写入`/tmp/init/environment`文件，该文件将通过位于`/init/environment`的`init`卷暴露给`todobackend`容器:
```
commands:
  01_add_ec2_user_to_docker_group:
    command: usermod -aG docker ec2-user
    ignoreErrors: true
  02_docker_volumes:
    command: |
      mkdir -p /tmp/public
 mkdir -p /tmp/init
      chown -R 1000:1000 /tmp/public
 chown -R 1000:1000 /tmp/init
container_commands:
 01_rds_settings:
 command: |
 config=/opt/elasticbeanstalk/deploy/configuration/containerconfiguration
 environment=/tmp/init/environment
 echo "MYSQL_HOST=$(jq '.plugins.rds.env.RDS_HOSTNAME' -r $config)" >> $environment
 echo "MYSQL_USER=$(jq '.plugins.rds.env.RDS_USERNAME' -r $config)" >> $environment
 echo "MYSQL_PASSWORD=$(jq '.plugins.rds.env.RDS_PASSWORD' -r $config)" >> $environment
 echo "MYSQL_DATABASE=$(jq '.plugins.rds.env.RDS_DB_NAME' -r $config)" >> $environment
 chown -R 1000:1000 $environment
```
我们首先修改`02_docker_volumes`指令，创建初始化卷映射到的`/tmp/init`路径，并确保运行在 todobackend 应用中的应用用户对此文件夹具有读/写权限。接下来，我们添加`container_commands`键，该键指定在应用配置后但在应用启动前*应执行的命令*。注意，不同于`commands`键，它在应用应用配置之前执行命令*。***
*The naming of the `container_commands` key is somewhat confusing in that it implies commands will be run inside a Docker container. This is actually not the case and the `container_commands` key is completely unrelated to containers in the Docker sense.
`01_rds_settings`命令写入应用所需的各种带 MYSQL 前缀的环境变量设置，通过执行`jq`命令为每个变量获取适当的值，正如我们前面演示的那样。因为该文件是由根用户创建的，所以我们最终确保`app`用户对`/tmp/init/environment`文件具有读/写访问权限，该文件将通过 init 卷在容器中显示为`/init/environment`。
如果您现在使用`eb deploy`命令部署您的更改，一旦部署完成并且您导航到 todobackend 应用 URL，如果您试图列出 Todos 项目(通过访问`/todos`，注意现在显示一个新的错误:
![](img/0463b13c-678a-412c-a600-059010e23449.png)
Accessing todobackend Todos items error
回想一下，当您以前访问同一个网址时，todobackend 应用试图使用 localhost 访问 MySQL，但是现在我们得到一个错误，表明在`ebdb`数据库中找不到`todo_todoitem`表。这确认了应用现在正在与 RDS 实例通信，但是因为我们没有运行数据库迁移，所以支持应用的模式和表不存在。
# 运行数据库迁移
为了解决应用当前的问题，我们需要一种机制，允许我们运行数据库迁移来创建所需的数据库模式和表。这也必须在每次应用更新时发生，但是这应该只在每次应用更新时发生一次*。例如，如果您有多个弹性 Beanstalk 实例，您不希望迁移在每个实例上运行。相反，您希望每个部署只运行一次迁移。*
 *上一节介绍的`container_commands`键包含一个名为`leader_only`的有用属性，它将弹性 Beanstalk 配置为仅在引线实例上运行指定的命令。这是第一个可供部署的实例。因此，我们可以向`todobackend-aws/eb`文件夹中的`.ebextensions/init.config`文件添加一个新指令，该指令将在每个应用部署中只运行一次迁移:
```
commands:
  01_add_ec2_user_to_docker_group:
    command: usermod -aG docker ec2-user
    ignoreErrors: true
  02_docker_volumes:
    command: |
      mkdir -p /tmp/public
      mkdir -p /tmp/init
      chown -R 1000:1000 /tmp/public
      chown -R 1000:1000 /tmp/init
container_commands:
  01_rds_settings:
    command: |
      config=/opt/elasticbeanstalk/deploy/configuration/containerconfiguration
      environment=/tmp/init/environment
      echo "MYSQL_HOST=$(jq '.plugins.rds.env.RDS_HOSTNAME' -r $config)" >> $environment
      echo "MYSQL_USER=$(jq '.plugins.rds.env.RDS_USERNAME' -r $config)" >> $environment
      echo "MYSQL_PASSWORD=$(jq '.plugins.rds.env.RDS_PASSWORD' -r $config)" >> $environment
      echo "MYSQL_DATABASE=$(jq '.plugins.rds.env.RDS_DB_NAME' -r $config)" >> $environment
      chown -R 1000:1000 $environment
  02_migrate:
 command: |
 echo "python3 manage.py migrate --no-input" >> /tmp/init/commands
 chown -R 1000:1000 /tmp/init/commands
 leader_only: true
```
这里，我们将`python3 manage.py migrate --no-input`命令写入`/tmp/init/commands`文件，该文件将暴露给位于`/init/commands`位置的应用容器。当然，这要求我们现在修改`todobackend`存储库中的入口点脚本，以查找这样的文件并执行其中包含的命令，如下所示:
```
#!/bin/bash
set -e -o pipefail
# Inject AWS Secrets Manager Secrets
# Read space delimited list of secret names from SECRETS environment variable
echo "Processing secrets [${SECRETS}]..."
read -r -a secrets  docker ps --format "{{.ID}}: {{.Image}}"
45b8cdac0c92: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
45bf3329a686: amazon/amazon-ecs-agent:latest
> docker logs 45b8cdac0c92
Processing secrets []...
Processing environment variables from /init/environment...
Processing commands from /init/commands...
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions, todo
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying sessions.0001_initial... OK
  Applying todo.0001_initial... OK
[uwsgi-static] added check for /public
*** Starting uWSGI 2.0.17 (64bit) on [Sun Jul 15 11:18:06 2018] ***
```
如果您现在浏览到应用的网址，您应该会发现该应用功能齐全，并且您已经成功地将 Docker 应用部署到了 Elastic Beanstalk。
在我们结束本章之前，您应该通过将您的用户帐户添加回`Users`组来恢复您在本章前面暂时禁用的 MFA 配置:
```
> aws iam add-user-to-group --user-name justin.menga --group-name Users
```
然后重新启用本地`~/.aws/config`文件中`docker-in-aws`配置文件内的`mfa_serial`行:
```
[profile docker-in-aws]
source_profile = docker-in-aws
role_arn = arn:aws:iam::385605022855:role/admin
role_session_name=justin.menga
region = us-east-1
mfa_serial = arn:aws:iam::385605022855:mfa/justin.menga 
```
您也可以通过浏览到弹性 Beanstalk 主仪表板并单击**旁边的**操作|删除**应用按钮来删除弹性 Beanstalk 环境，以打开**应用。这将删除弹性 Beanstalk 环境创建的云信息栈，其中包括应用负载平衡器、无线电数据系统数据库实例和 EC2 实例。
# 摘要
在本章中，您学习了如何使用弹性 Beanstalk 部署多容器 Docker 应用。您了解了为什么以及何时会选择 Elastic Beanstalk 而不是 ECS 等其他替代容器管理服务，这里的一般结论是，Elastic Beanstalk 非常适合应用数量较少的小型组织，但随着您的组织开始发展并需要开始专注于提供共享容器平台以降低成本、复杂性和管理开销，它变得不再那么有用。
您使用 AWS 控制台创建了一个弹性 Beanstalk 应用，这需要您定义一个名为`Dockerrun.aws.json`的文件，该文件包含运行应用所需的容器定义和卷，然后以最小的配置自动部署应用负载平衡器和 RDS 数据库实例。让您的应用启动并运行到全功能状态更具挑战性，需要您定义名为`ebextensions`的高级配置文件，允许您调整弹性 Beanstalk 以满足您的应用的特定需求。您学习了如何安装和设置弹性 Beanstalk 命令行界面，如何使用 SSH 连接到弹性 Beanstalk 实例，以及如何将配置更改部署到您的`Dockerrun.aws.json`文件和`ebextensions`文件。这允许您在弹性 Beanstalk 实例上为作为非根用户运行的容器应用设置具有正确权限的卷，并引入了一个特殊的 init 卷，您可以在其中注入环境变量设置和应该在容器启动时执行的命令。
在下一章中，我们将了解 Docker Swarm，以及如何在 AWS 上部署 Docker Swarm 集群来部署和运行您的 Docker 应用。
# 问题
1.  对/错:弹性 Beanstalk 只支持单容器 Docker 应用。
2.  使用弹性 Beanstalk 创建 Docker 应用所需的最低工件是什么？
3.  对/错:`.ebextensions`文件夹存储 YAML 文件，允许你定制你的弹性 Beanstalk 实例。
4.  您创建了一个新的弹性 Beanstalk 服务，该服务部署了一个 Docker 应用，其 Docker 映像存储在 ECR 中。在最初的创作中。应用失败，弹性 Beanstalk 日志显示一个错误，包括“CannotPullECRContainerError”字样。您将如何解决这个问题？
5.  真/假:开箱即用，无需任何额外配置，在弹性 Beanstalk 环境中作为非根用户运行的 Docker 容器可以读写 Docker 卷。
6.  真/假:您可以在`commands`键中将`leader_only`属性设置为真，以便仅在一个弹性 Beanstalk 实例上运行命令。
7.  对/错:`eb connect`命令用于建立对弹性 Beanstalk 实例的 SSH 访问。
8.  对/错:弹性 Beanstalk 支持应用负载平衡器与您的应用集成。
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   Elastic Beanstalk 开发者指南:[https://docs . AWS . Amazon . com/elastic Beanstalk/latest/DG/welcome . html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/Welcome.html)
*   多容器 Docker 环境:[https://docs . AWS . Amazon . com/elastic cbeanstalk/latest/DG/create _ deploy _ Docker _ ECS . html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker_ecs.html)
*   将 Elastic Beanstalk 与其他 AWS 服务结合使用:[https://docs . AWS . Amazon . com/Elastic Beanstalk/latest/DG/awshowto . html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.html)
*   带配置文件的高级环境配置:[https://docs . AWS . Amazon . com/elastic beanstalk/latest/DG/ebextensions . html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ebextensions.html)
*   弹性 Beanstalk 命令行界面:[https://docs . AWS . Amazon . com/Elastic Beanstalk/latest/DG/EB-cli3 . html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3.html)**