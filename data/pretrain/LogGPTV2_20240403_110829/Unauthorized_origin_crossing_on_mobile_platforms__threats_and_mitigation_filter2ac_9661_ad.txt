scheme or web-accessing utility classes.  An app or a website sets 
a policy on a specific channel to notify Morbs the list of senders 
authorized  to  send  messages  to  it,  and  the  list  of  recipients 
allowed to receive the messages it sends.  
Setting a policy can be done through a new API setOriginPolicy, 
which an app can directly call.  Here is its specification: 
void setOriginPolicy(type, senderOrRecipient, channelID, origins) 
Here,  type  identifies  the  type  of  the  channel  (intent,  scheme,  or 
utility  class),  senderOrRecipient  specifies  sender  or  recipient, 
channelID indicates the channel ID, and origins is the whitelist. 
Once invoked, setOriginPolicy first identifies a channel by type, 
and channelID, which is an OS-wide unique string. For example, 
the ID for the intent channel that triggers LoginActivity within the 
Facebook app is “com.facebook.katana.LoginActivity”, in which 
“com.facebook.katana” is the Facebook app’s package name. For 
a scheme, its channel ID is the corresponding scheme field on a 
URL.  For  web-accessing  utility  classes,  they  are  identified  by 
their class instances within an app. After a channel is identified, 
the API then extracts the whitelist that regulates the sender or the 
recipient  (specified  in  senderOrRecipient)  through  this  channel 
from the origins parameter. 
Although  setOriginPolicy  offers  a  generic  interface  for  policy 
specification, it cannot be directly invoked by a website to set its 
policies.  To  address  this  problem,  Morbs  provides  mechanisms 
for  indirectly  accessing  this  API,  including  a  JavaScript  API 
setMobileAllowedOrigins,  through  which  the  dynamic  content 
from  a  website  can  set  policies  within  the  mobile  browser  or  a 
WebView instance, and a header mobile-allowed-origins in HTTP 
responses that inform the browser or a WebView instance of the 
parties  on  the  device  allowed  to  get  the  message.  The  app 
developer can also leverage other indirect mechanisms to define 
her policies whenever she is building the app’s functionality over 
a mobile channel. Specifically, Morbs allows the developer to set 
her policies regarding a scheme/intent her app claims within the 
app’s manifest file (for Android) or .plist (for iOS), under a new 
property allowedOrigins.  In this way, she can turn on our origin 
protection for her app without changing its code. Other ways for 
policy setting include a new argument allowedOrigins for the API 
that  delivers 
scheme/intent  messages,  and  a  new  API 
setAllowedOrigins used to define policies for utility classes such 
as WebView and HttpClient. An advantage of using these indirect 
ways  is  that  they  only  require  one  argument  (i.e., origins)  from 
the developer because other arguments are set by default. 
Enforcing  policies.    Morbs  runs  a  reference  monitor  to  enforce 
security  policies  on  different  channels.  Whenever  a  message  is 
delivered  over  a  channel,  the  reference  monitor  is  triggered  to 
identify its origin and calls a function checkOriginPolicy to check 
its policy compliance. The function’s specification is as follows: 
channel 
(type 
and 
bool checkOriginPolicy(type, senderOrRecipient, channelID, from, to) 
channelID).  Note 
Intuitively,  the  function  searches  Morbs  policy  base  to  find  out 
whether  the  current  sender  (specified  in  the  from  argument)  is 
allowed  to  deliver  the  message  to  the  recipient  (to)  through  the 
specific 
that 
checkOriginPolicy needs to be called twice (one for checking the 
sender  origin  against  the  recipient’s  policy  and  the  other  for 
checking  the  recipient  origin  against  the  sender’s  policy).  The 
message is allowed to go through only if both checks succeed.  
Both  setOriginPolicy  and  checkOriginPolicy  operate  on  the 
Morbs policy base that keeps all policies. setOriginPolicy inserts 
a  policy  into  the  database  and  checkOriginPolicy  searches  the 
database 
for  an  applicable  policy,  checking  whether  a 
sender/recipient origin is on the whitelist included in the policy. 
The  performance  of  this  compliance  check  is  critical  because  it 
needs  to  be  invoked  for  every  message  going  through  these 
641channels.  To  make  it  efficient,  Morbs  leverages  the  hash-table 
search to quickly locate a target within the database. 
4.2  Implementation 
We implemented our design on Android (Figure 2).  At the center 
of  our 
the 
ReferenceMonitor class, in which the most important function is 
checkOriginPolicy. They were built into the Thread class of the 
Dalvik  Virtual  Machine.  The setOriginPolicy API is open to all 
apps, while ReferenceMonitor is kept for the OS, which is only 
accessible to the code running inside the Android OS kernel.  
setOriginPolicy  API  and 
system  are 
the 
intents/schemes
AppApp
Apps
calls/schemes
class Activity {
startActivityForResult()
}
Dalvik VM
C
h
e
c
k
p
o
l
i
c
y
class Thread {
class WebViewCore {
handleMessage()
}
S
e
t
p
o
l
i
c
y
S
e
t
p
o
l
i
c
y
C
h
e
c
k
p
o
l
i
c
y
setOriginPolicy() API
class ReferenceMonitor {
checkOriginPolicy ()
}
}
Mobile Device
callbacks
class CallbackProxy {
handleMessage()
}
Check policy
Web
Figure 2 The framework of Morbs on Android 
In  the  presence  of  the  centralized  policy  compliance  check 
(checkOriginPolicy),  the  task  of  ReferenceMonitor  (i.e.,  policy 
enforcement) becomes trivial:  all we need to do here is pulling 
invoking  checkOriginPolicy  and  raising  an 
the  arguments, 
exception  to  drop  a  message  when  the  check  fails.  In  our 
implementation,  the  ReferenceMonitor  class  is  used  in  the  OS 
components  related  to  these  channels  to  conduct  mediation.  
Specifically,  for  intent  and  scheme,  the  enforcement  code  was 
placed  within the API startActivityForResult, which needs to be 
called  by  startActivity,  when  a  message  delivered  through  those 
channels attempts to start an Activity. Note that we chose not to 
do the security checks within the IPC mechanism: Android does 
not  recommend  inspecting  intent  data  in  IPC  because  the  intent 
instances are serialized for high performance data transport [29]. 
For  mediating  web-app  communications,  we  changed 
the 
handleMessage method within both the WebViewCore class and 
the CallbackProxy class. The two methods are the focal point of 
mobile browsers and WebView instances: all method invocations 
and  callback  handling  from  apps  need  to  go  through  them.  In 
addition,  the  execute  method  of  HttpClient  class  was  used  to 
mediate apps’ direct communication with web servers. 
Challenge  I:  origin  identification.    Morbs  attaches  an  origin 
attribute  to  every  message  exchanged  through  the  mobile 
channels. On Android, both intent and scheme channels utilize the 
intent  messages  (Section  2).  The  constructor  for  generating  an 
intent instance is hooked in our implementation to label an intent 
message  with  its  app  origin.  Specifically,  we  added  an  origin 
property  to  the  intent  class.  When  the  constructor  is  creating  a 
new  intent  instance,  it  retrieves  the  package  name  of  the  app 
initiating  the  intent  and  fills  in  the  origin  property  with  the 
package name.  For example, when the initiator is the Facebook 
app,  the  origin  property  should  be  marked  as  “app://com. 
facebook.katana”, in which “com.facebook.katana” is the package 
there 
to  understand 
name  of  Facebook  app.  However,  this  origin  is  not  easy  to 
identify in practice, since there is no API to help us find out the 
initiator directly. A simple solution is to get the whole call stack 
from  the  OS  through  getStackTrace  API,  and  then  inspect  it  to 
find out the caller. This approach turns out to be very expensive: 
in our test, extracting the call stack takes 1.35 ms in average. Our 
solution is to add an origin property to each thread that hosts an 
app. When the thread is created, the app’s origin is attached to the 
property.  Once  an  intent is initiated, the constructor then copies 
the origin information from the thread to the intent instance.  
Challenge II: response inspection. To enable a web server to set 
its policies to a mobile device, Morbs needs to inspect the HTTP 
response to find the header mobile-allowed-origins. The response 
is processed by Android’s native C++ libraries. Morbs (written in 
Java)  cannot  directly  access  it.  In  our  implementation,  we 
managed to get access to the header using Java Native Interface 
(JNI)  [30].  JNI  provides  an  API  called onReceivedData through 
which  C++  code  can  send  messages  to  Java  code.  To  inform 
Morbs of the content of the header, we modified the C++ code to 
the  header  mobile-allowed-origins  within  HTTP 
identify 
responses,  and  then  call  onReceivedData  to  deliver  all  policies 
described 
to  WebViewCore,  where  Morbs  uses 
setOriginPolicy to complete this policy setting process. 
5.  EVALUATION 
We evaluated the general design of Morbs and its implementation 
on  Android 
its  effectiveness,  performance, 
compatibility and utility to the app developers. 
5.1  Effectiveness 
We  ran  our  implementation  against  the  aforementioned  cross-
origin  attacks  (Section  3).  Specifically,  our  experiment  was 
conducted  on  Android  4.3  with  Morbs  running  within  an 
emulator.  We installed both the vulnerable apps discovered in our 
research and the attacker apps. In the experiments, we first ran the 
attacker  apps,  and  then  checked  whether  the  exploits  were 
blocked  by  Morbs  or  not.  Note  that  in  some  situations,  we  also 
need the developers to explicitly specify their whitelists of origins 
within  their  apps,  in  addition  to  the  default  policies.  In  the 
absence of those apps’ source code, we had to directly enter those 
app-specific policies (whitelists) into the OS. 
Preventing the exploits on intent. As described in Section 3.2.1, 
a malicious app can use the next-intent trick to invoke any private 
Activities of the victim app (the Dropbox app and the Facebook 
app).  The  content  saved  under  the  NEXT-INTENT  key  is 
essentially  an  intent,  which  needs  to  be  first  created  by  the 
malicious app before it is embedded into another intent (the one 
delivered  to  Dropbox  app’s  login  Activity).  Under  Morbs,  the 
intent constructor sets the origins of both intents to the malicious 
app,  which  cannot  be  changed  by  the  app.  As  a  result,  when 
startActivity  is  called  to  start  the  target  private  Activity,  our 
reference  monitor  immediately  finds  that  the  origin  of  the  next-
intent  is  not  the  victim  app  itself,  and  stops  this  invocation 
according  to  the  default  policy  (the  SOP).  Our  tests  confirmed 
that the vulnerabilities in both Dropbox app and Facebook app are 
fixed in this manner, without changing the apps’ code. 
Defeating  the  attacks  on  scheme.  For  the  fbconnect  problem 
described in Section 3.3.1, what Facebook wants to do is to return 
the data (e.g., secret tokens) from its server  to the app associated 
with the client_id parameter within the Dialog request, not anyone 
that  claims 
is 
scheme.  This 
fbconnect:// 
intention 
the 
642into 
communicated by the Facebook server to the mobile OS through a 
list  of  legitimate  recipient  origins  specified  using  its  HTTP 
response  header  or  the  JavaScript  API  provided  by  Morbs. 
Specifically  in  our  experiment,  we  inserted  the  header  “mobile-
allowed-origins:  app://com.facebook.katana” 
the  HTTP 
response  from  the  Facebook  server,  indicating  that  only  the 
Facebook app can receive the data, and observed that the scheme 
invocation  was  stopped  when  the  app  that  registered  the 
fbconnect://  scheme  was  not  the  Facebook  app.  A  video  demo 
about this case can be found at [31]. 
When  it  comes  to  the  apps  using  Dropbox  iOS  SDK  (the  first 
vulnerability  described  in  Section  3.3.2),  it  is  clear  that  their 
schemes  associated  with  Dropbox  are  only  supposed  to  be 
invoked  by  the  Dropbox  app.    Using  Morbs,  the  Dropbox  SDK 
embedded in the apps specifies “app://com.getdropbox.Dropbox” 