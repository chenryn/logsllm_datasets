    0xbffff138  
0xbffff138 
esi 
    0x0 
   0 
edi 
    0x0 
   0 
eip 
    0x804844a 
0x804844a  
... 
使用下述指令反汇编当前的指令。图中箭头指向的是接下来将要运行的指令。 
(gdb) disas 
Dump of assembler code for function main: 
   0x0804841d :      push    %ebp 
   0x0804841e :      mov     %esp,%ebp 
   0x08048420 :      and     $0xfffffff0,%esp 
   0x08048423 :      sub     $0x10,%esp 
   0x08048426 :      movl    $0x3,0xc(%esp) 
   0x0804842e :     movl    $0x2,0x8(%esp) 
   0x08048436 :     movl    $0x1,0x4(%esp) 
   0x0804843e :     movl    $0x80484f0,(%esp) 
   0x08048445 :     call    0x80482f0  
=> 0x0804844a :     mov     $0x0,%eax 
   0x0804844f :     leave 
   0x08048450 :     ret 
End of assembler dump. 
默认情况下，GDB 会以 AT&T 语体显示汇编指令。我们可以通过下述指令，令 GDB 采用 Intel 语体： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
41 
(gdb) set disassembly-flavor intel 
(gdb) disas 
Dump of assembler code for function main: 
   0x0804841d :      push    ebp 
   0x0804841e :      mov     ebp, esp 
   0x08048420 :      and     esp , 0xfffffff0 
   0x08048423 :      sub     esp, 0x10 
   0x08048426 :      mov     DWORD PTR [esp+0xc],0x3 
   0x0804842e :     mov     DWORD PTR [esp+0x8],0x2 
   0x08048436 :     mov     DWORD PTR[esp+0x4],0x1 
   0x0804843e :     mov     DWORD PTR[esp], 0x80484f0 
   0x08048445 :     call    0x80482f0  
=> 0x0804844a :     mov     eax, 0x0 
   0x0804844f :     leave 
   0x08048450 :     ret 
End of assembler dump. 
单步调试。此处，GDB 用大括号表示这里是函数的结束部分。 
(gdb) step 
7        }; 
在执行过“MOV EAX, 0”指令之后，EAX 会被置零。我们对此进行验证： 
(gdb) info registers 
eax              0x0       0 
ecx              0x0       0 
edx              0x0       0 
ebx              0xb7fc0000   
-1208221696 
esp              0xbffff120   
0xbffff120 
ebp              0xbffff138  
0xbffff138 
esi              0x0       0 
edi              0x0       0 
eip              0x804844f      
0x804844f  
... 
6.1.2 x64：传递 9 个参数 
为了便于演示，我们再次修改代码，将参数的数量增加到 9 个。其中 8 个参数是 int 整型变量，另有 1
个用于控制输出格式的格式化字符串。 
#include  
int main()  
{ 
          printf("a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n", 1, 2, 3, 4, 5, 6, 7, 8); 
          return 0; 
}; 
MSVC 
前文介绍过，Win64 使用 RCX、RDX、R8、R9 寄存器传递前 4 个参数，使用栈来传递其余的参数。
我们将在本例中观察到这个现象。在下面的例子里，编译器使用了 MOV 指令对栈地址进行直接操作而没
有使用 PUSH 指令。 
指令清单 6.3  MSVC 2012 x64 
$SG2923  DB   
'a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d’, 0aH, 00H 
main    PROC 
          sub   
rsp, 88 
          mov 
DWORD PTR [rsp+64], 8 
          mov 
DWORD PTR [rsp+56], 7 
          mov 
DWORD PTR [rsp+48], 6 
          mov 
DWORD PTR [rsp+40], 5 
          mov 
DWORD PTR [rsp+32], 4 
          mov 
r9d, 3 
          mov 
r8d, 2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
42 
逆向工程权威指南（上册） 
          mov 
edx, 1 
          lea 
rcx, OFFSET FLAT:$SG2923 
          call 
printf 
          ; return 0 
          xor 
eax, eax 
          add 
rsp, 88 
          ret 
0 
main     ENDP 
_TEXT    ENDS 
END 
在 64 位系统中，整型数据只占用 4 字节空间。那么，为什么编译器给整型数据分配了 8 个字节？其实，
即使数据的存储空间不足 64 位，编译器还是会给它分配 8 字节的存储空间。这不仅是为了方便系统对每个
参数进行内存寻址，而且编译器都会进行地址对齐。所以，64 位系统为所有类型的数据都保留 8 字节空间。
同理，32 位系统也为所有类型的数据都保留 4 字节空间。 
GCC 
x86-64 的＊NIX 系统采用与 Win64 类似的方法传递参数。它优先使用 RDI、RSI、RDX、RCX、R8、
R9 寄存器传递前六个参数，然后利用栈传递其余的参数。在生成汇编代码时，GCC 把字符串指针存储到了
EDI 寄存器、而非完整的 RDI 寄存器。在前面的 3.2.2 节中，64 位 GCC 生成的汇编代码里也出现过这个现象。 
在 3.2.2 节的那个例子里，程序在调用 printf()函数之前清空了 EAX 寄存器。本例中存在相同的操作。 
指令清单 6.4  Optimizing GCC 4.4.6 x64 
.LC0: 
        .string "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n" 
main: 
        sub       rsp, 40 
        mov       r9d, 5 
        mov       r8d, 4 
        mov       ecx, 3 
        mov       edx, 2 
        mov       esi, 1 
        mov       edi, OFFSET FLAT:.LC0 
        xor       eax, eax ; number of vector registers passed  
        mov       DWORD PTR [rsp+16], 8 
        mov       DWORD PTR [rsp+8], 7 
        mov       DWORD PTR [rsp], 6  
        call      printf 
        ; return 0 
        xor   eax, eax  
        add   rsp, 40  
        ret 
GCC + GDB 
在使用 GDB 调试它之前，我们首先要编译源代码： 
$ gcc -g 2.c -o 2 
$gdb2 
GNU gdb (GDB)7.6.1‐ubuntu 
Copyright(C)2013 Free Software Foundation, Inc. 
License GPLv3+: GNU GPL version3 or later 
This is free software : you are free to change and redistribute it. 
There is NOWARRANTY, to the extent permitted by law. Type "show copying"  
and "show warranty" for details. 
This GDB was configured as"x86_64‐l i nux‐gnu".  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
43 
For bug reporting instructions, please see: 
... 
Reading symbols from /home/dennis/polygon/2...done. 
接下来，我们在 printf()运行之前设置断点，然后运行这个程序： 
(gdb) b printf 
Breakpoint 1 at 0x400410 
(gdb) run 
Starting program: /home/dennis/polygon/2 
Breakpoint 1, __printf (format=0x400628 "a=%d; b=%d; c=%d; d=%d; e=%d; f=%d; g=%d; h=%d\n") at printf.c:29 
29  printf.c: No such file or directory 
RSI/RDX/RCX/R8/R9寄存器的值就是传递给函数的参数。RIP 寄存器的值应当是printf()函数的首地址。
我们可以在 GDB 里查看各寄存器的值： 
(gdb) info registers 
rax              0x0       0 
rbx              0x0       0 
rcx              0x3       3 
rdx              0x2       2 
rsi              0x1       1 
rdi              0x400628 4195880 
rbp              0x7fffffffdf60  0x7fffffffdf60 
rsp              0x7fffffffdf38  0x7fffffffdf38 
r8               0x4       4 
r9               0x5       5 
r10              0x7fffffffdce0  140737488346336 
r11              0x7ffff7a65f60  140737348263776 
r12              0x400440 4195392 
r13              0x7fffffffe040  140737488347200 
r14              0x0       0 
r15              0x0       0 
rip              0x7ffff7a65f60  0x7ffff7a65f60  
... 
指令清单 6.5  检查格式化字符串 
(gdb)x/s$rdi 
0x400628:  
"a=%d;b=%d;c=%d;d=%d;e=%d;f=%d;g=%d;h=%d\n" 
然后使用 x/g 指令显示栈中的数值。指令中的 g 代表 giant words，即以 64 位 words 型数据的格式显示各数据。 
(gdb)x/10g$rsp 
0x7fffffffdf38: 0x0000000000400576   0x0000000000000006 
0x7fffffffdf48: 0x0000000000000007   0x00007fff00000008 
0x7fffffffdf58: 0x0000000000000000   0x0000000000000000 
0x7fffffffdf68: 0x00007ffff7a33de5   0x0000000000000000 
0x7fffffffdf78: 0x00007fffffffe048   0x0000000100000000 
64 位系统的栈与 32 位系统的栈没有太大的区别。栈里的第一个值是返回地址 RA。紧接其后的，是三
个保存在栈里的参数 6、7、8。应该注意到数值“8”的高 32 位地址位没有被清零，与之对应的存储空间
的值为“0x00007fff00000008”。因为 int 类型只占用（低）32 位，所以这种存储并不会产生问题。另外，
我们可以认为这个地方的高 32 位数据是随机的脏数据。 
此后，我们通过以下指令查看 printf()函数运行之后的、返回地址开始的有关指令。GDB 将会显示 main()
函数的全部指令。 
(gdb) set disassembly-flavor intel 
(gdb) disas 0x0000000000400576 
Dump of assembler code for function main: 
   0x000000000040052d :      push    rbp 
   0x000000000040052e :      mov     rbp, rsp 
   0x0000000000400531 :      sub     rsp, 0x20 
   0x0000000000400535 :      mov     DWORD PTR  [rsp+0x10], 0x8 
   0x000000000040053d :     mov     DWORD PTR  [rsp+0x8], 0x7 
   0x0000000000400545 :     mov     DWORD PTR  [rsp], 0x6 
   0x000000000040054c :     mov     r9d, 0x5 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
44 
逆向工程权威指南（上册） 
   0x0000000000400552 :     mov     r8d, 0x4 
   0x0000000000400558 :     mov     ecx, 0x3 
   0x000000000040055d :     mov     edx, 0x2 
   0x0000000000400562 :     mov     esi, 0x1 
   0x0000000000400567 :     mov     edi, 0x400628 
   0x000000000040056c :     mov     eax, 0x0 
   0x0000000000400571 :     call    0x400410,   
   0x0000000000400576 :     mov     eax, 0x0 
   0x000000000040057b :     leave 
   0x000000000040057c :     ret 
End of assembler dump. 
接下来，通过“finish”指令运行 printf()之后的程序。余下的指令会清空 EAX 寄存器，可以注意到那
时 EAX 已经为零。现在，RIP 指针指向 LEAVE 指令，就是 main()函数的倒数第二条指令。 
(gdb) finish 
Run till exit from #0__printf (format=0x400628"a=%d;b=%d;c=%d;d=%d; e=%d;f=%d;g=%d;h=%d\n") at printf.c:29 
a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8 
main () at2.c:6 
6                  return0; 
Value returned is $1=39 
(gdb) next 
7        }; 
(gdb) info registers 
rax              0x0     0 
rbx              0x0     0 
rcx              0x26    38 
rdx              0x7ffff7dd59f0 140737351866864 
rsi              0x7fffffd9      2147483609 
rdi              0x0              0 
rbp              0x7fffffffdf60 0x7fffffffdf60 
rsp              0x7fffffffdf40 0x7fffffffdf40 
r8               0x7ffff7dd26a0 140737351853728 
r9               0x7ffff7a60134 140737348239668 
r10             0x7fffffffd5b0 140737488344496 
r11             0x7ffff7a95900 140737348458752 
r12             0x400440 4195392 
r13             0x7fffffffe040 140737488347200 
r14             0x0       0 
r15             0x0       0 
rip             0x40057b 0x40057b  
... 
6.2 ARM 
6.2.1 ARM 模式下传递 3 个参数 
ARM 系统在传递参数时，通常会进行拆分：把前 4 个参数传递给 R0～R3 寄存器，然后利用栈传递其
余的参数。在获取（组装）参数时，遵循的函数调用约定是 fastcall 约定或 win64 约定。有关这两种约定的
的详细介绍，请参照 64.3 节和 64.5.1 节。 
32 位 ARM 系统 
非经优化的 Keil＋ARM 模式 
指令清单 6.6  非经优化的 Keil 6/2013（ARM 模式） 
.text:00000000 main 
.text:00000000 10 40 2D E9 STMFD  SP!, {R4,LR} 
.text:00000004 03 30 A0 E3 MOV     R3, #3 
.text:00000008 02 20 A0 E3 MOV     R2, #2 
.text:0000000C 01 10 A0 E3 MOV     R1, #1 
.text:00000010 08 00 8F E2 ADR     R0, aADBDCD;  
"a=%d; b=%d; c=%d" 
.text:00000014 06 00 00 EB BL      __2printf 
.text:00000018 00 00 A0 E3 MOV     R0, #0     
; return 0 
.text:0000001C 10 80 BD E8 LDMFD  SP!, {R4,PC} 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
45 
可见，R0～R3 寄存器依次负责传递参数。其中，R0 寄存器用来传递格式化字符串，R1 寄存器传递 1，
R2 寄存器传递 2，R3 寄存器传递 3。 
0x18 处的指令将 R0 寄存器置零，对应着源代码中的“return 0”。 
这段汇编指令中规中矩。 
即使开启了优化选项，Keil 6/2013 生成的汇编指令也完全相同。 
开启了优化选项的 Keil 6/2013 (Thumb 模式) 
指令清单 6.7  开启了优化选项的 Keil 6/2013 (Thumb 模式) 
.text:00000000 main 
.text:00000000 10 B5        PUSH   {R4, LR} 
.text:00000002 03 23        MOVS   R3, #3 
.text:00000004 02 22        MOVS   R2, #2 
.text:00000006 01 21        MOVS   R1, #1 
.text:00000008 02 A0        ADR    R0, aADBDCD;"a=%d; b=%d; c=%d" 
.text:0000000A 00 F0 0D F8 BL     __2printf 
.text:0000000E 00 20        MOVS   R0, #0 
.text:00000010 10 BD        POP    {R4,PC} 
这段代码和前面那段 ARM 程序没有太多差别。 
开启优化选项的 Keil 6/2013 (ARM 模式) + 无返回值 
我们对源代码略做修改，删除“return 0”的语句： 
#include  
void main()  
{ 
          printf("a=%d; b=%d; c=%d", 1, 2, 3); 
}; 
相应的汇编指令就会出现显著的差别： 
.text:00000014 main 
.text:00000014 03 30 A0 E3   MOV    R3, #3 
.text:00000018 02 20 A0 E3   MOV    R2, #2 
.text:0000001C 01 10 A0 E3   MOV    R1, #1 
.text:00000020 1E 0E 8F E2   ADR    R0, aADBDCD    ;"a=%d;b=%d;c=%d\n" 
.text:00000024 CB 18 00 EA   B      __2printf 
在其余优化选项（-O3）之后，把源代码编译为 ARM 模式的代码。这次，程序的最后一条指令变成了
B 指令，不再使用之前的 BL 指令。另外，与前面那个没有启用优化选项的例子相比，本例并没有出现保
存 R0 和 LR 寄存器的函数序言或函数尾声。这形成了另一个显著的差异。B 指令仅仅将程序跳转到另一个