(cid:80)(cid:82)(cid:89)(cid:3)(cid:3)(cid:72)(cid:69)(cid:91)(cid:15)(cid:72)(cid:70)(cid:91)
(cid:80)(cid:82)(cid:89)(cid:3)(cid:3)(cid:72)(cid:86)(cid:76)(cid:15)(cid:72)(cid:71)(cid:91)
(cid:17)(cid:17)(cid:17)
(cid:83)(cid:82)(cid:83)(cid:3)(cid:3)(cid:72)(cid:86)(cid:76)
(cid:83)(cid:82)(cid:83)(cid:3)(cid:3)(cid:72)(cid:69)(cid:91)
(cid:83)(cid:82)(cid:83)(cid:3)(cid:3)(cid:72)(cid:71)(cid:76)
(cid:85)(cid:72)(cid:87)
(cid:53)(cid:68)(cid:81)(cid:71)(cid:82)(cid:80)(cid:76)(cid:93)(cid:72)(cid:71)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:71)(cid:76)
(cid:80)(cid:82)(cid:89)(cid:3)(cid:3)(cid:72)(cid:71)(cid:76)(cid:15)(cid:62)(cid:72)(cid:69)(cid:83)(cid:14)(cid:19)(cid:91)(cid:27)(cid:64)
(cid:80)(cid:82)(cid:89)(cid:3)(cid:3)(cid:72)(cid:68)(cid:91)(cid:15)(cid:62)(cid:72)(cid:71)(cid:76)(cid:14)(cid:19)(cid:91)(cid:20)(cid:23)(cid:64)
(cid:87)(cid:72)(cid:86)(cid:87)(cid:3)(cid:72)(cid:68)(cid:91)(cid:15)(cid:72)(cid:68)(cid:91)
(cid:17)(cid:17)(cid:17)
(cid:79)(cid:72)(cid:68)(cid:3)(cid:3)(cid:72)(cid:70)(cid:91)(cid:15)(cid:62)(cid:72)(cid:69)(cid:83)(cid:16)(cid:19)(cid:91)(cid:23)(cid:64)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:70)(cid:91)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:71)(cid:76)
(cid:70)(cid:68)(cid:79)(cid:79)(cid:3)(cid:72)(cid:68)(cid:91)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:68)(cid:91)
(cid:39)(cid:76)(cid:86)(cid:70)(cid:79)(cid:82)(cid:86)(cid:88)(cid:85)(cid:72)
(cid:80)(cid:82)(cid:89)(cid:3)(cid:3)(cid:72)(cid:68)(cid:91)(cid:15)(cid:62)(cid:72)(cid:69)(cid:83)(cid:14)(cid:19)(cid:91)(cid:27)(cid:64)
(cid:80)(cid:82)(cid:89)(cid:3)(cid:3)(cid:72)(cid:71)(cid:76)(cid:15)(cid:62)(cid:72)(cid:68)(cid:91)(cid:14)(cid:19)(cid:91)(cid:20)(cid:23)(cid:64)
(cid:87)(cid:72)(cid:86)(cid:87)(cid:3)(cid:72)(cid:71)(cid:76)(cid:15)(cid:72)(cid:71)(cid:76)
(cid:17)(cid:17)(cid:17)
(cid:79)(cid:72)(cid:68)(cid:3)(cid:3)(cid:72)(cid:70)(cid:91)(cid:15)(cid:62)(cid:72)(cid:69)(cid:83)(cid:16)(cid:19)(cid:91)(cid:23)(cid:64)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:70)(cid:91)
(cid:83)(cid:88)(cid:86)(cid:75)(cid:3)(cid:72)(cid:68)(cid:91)
(cid:70)(cid:68)(cid:79)(cid:79)(cid:3)(cid:72)(cid:71)(cid:76)
(cid:44)(cid:81)(cid:73)(cid:72)(cid:85)(cid:72)(cid:81)(cid:70)(cid:72)
(cid:50)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:68)(cid:79)
(cid:53)(cid:68)(cid:81)(cid:71)(cid:82)(cid:80)(cid:76)(cid:93)(cid:72)(cid:71)
Fig. 8. Example of indirect disclosure against register preservation code
reordering. By disclosing the ﬁrst two instructions of a randomized function’s
prologue, an attacker can precisely infer the structure of the randomized gadget
at the function’s epilogue.
Fig. 9. Example of indirect disclosure against register reassignment. By
disclosing just one instruction that
the
beginning of its live region, an attacker can precisely infer what registers
are used in the randomized instructions of the gadget.
involves a reassigned register at
displacement technique [29]. We have evaluated the feasibility
of indirect code disclosure against the two most effective (in
terms of gadget coverage) of these transformations, and as we
show in Section V-C, we can infer the randomized state of the
vast majority of all randomized gadgets.
Instruction substitution is a randomization strategy that re-
places existing instructions with functionally-equivalent ones,
with the goal of altering any overlapping instructions that are
part of a gadget. Given that the original binary code of a
program and the sets of equivalent instructions are common
knowledge, an attacker knows a priori all instructions that are
candidates for substitution. By just reading the opcode byte
of a candidate-for-substitution instruction in the randomized
instance of a program, an attacker can precisely infer the
sequence of bytes that follow the opcode byte (i.e.,
the
instruction’s operands), and consequently, the state of any
overlapping randomized gadget. If the disclosed opcode is also
part of the randomized gadget, however, the part of the gadget
that starts after the opcode byte will remain usable.
Basic block instruction reordering is another common code
randomization approach that changes the order of instructions
within a basic block according to an alternative, functionally
equivalent instruction scheduling. By precomputing all pos-
sible orderings of a given basic block, an attacker may be
able to infer the order of instructions towards the end of the
block by just reading a few instructions from the beginning
of the block. The feasibility of this inference approach for a
given gadget depends on the size of the basic block in which
the gadget is contained, the location of the gadget within the
block, and the number of possible instruction orderings.
Register preservation code reordering changes the order
of the push and pop instructions that are often found
at a function’s prologue and epilogue, respectively. These
instructions are used to preserve the values of callee-saved
registers that would otherwise be overwritten by the current
function. Since the registers are restored in the reverse order in
which they were push’ed, an attacker can precisely infer the
structure of “pop; pop; ret;” gadgets that are part of an
epilogue by reading the randomized code of the corresponding
prologue, as illustrated in Figure 8. Register preservation
code reordering has the highest coverage among the four
transformations, altering about half of all available gadgets
in a code segment [35].
Register reassignment swaps the register operands of in-
structions throughout overlapping live ranges (a live range
begins with an instruction that deﬁnes a register and comprises
all instructions in which that deﬁnition is live). Given that
an attacker can precompute all live regions in the original
code, reading even a single instruction at the beginning of a
live region might be enough to infer the structure of gadgets
towards the end of that region, as illustrated in Figure 9.
Register reassignment has the second highest coverage among
the four transformations, altering more than 40% of the
gadgets in a code segment [35].
Instruction displacement [29] relocates sequences of in-
structions that contain gadgets into random locations within a
different code segment, and overwrites the original code with
trap instructions. The semantics of the code are preserved by
patching the starting address of a moved code region with a
direct jmp instruction to the new location. Consequently, an
attacker can read the operand of the jmp instruction, and infer
the location of a displaced gadget.
Note that even if we assume that a more aggressive code
diversiﬁcation technique such as function and basic block
reordering [47] is applied, code inference may still be possible.
If only the location—but not the internal structure—of basic
blocks (or even easier, whole functions) is randomized, then
the disclosure of a long-enough unique sequence of bytes will
be enough to infer the rest of a basic block’s (or function’s
code). Given that basic block reordering is currently not
applicable for the complex COTS software targeted by the
binary-level execute-only memory protections considered in
this work, we leave the evaluation of such ﬁngerprinting-based
inference attacks as part of our future work.
E. Implementation
Our prototype implements one instantiation of each of the
four attack strategies. The resulting proof-of-concept consists
961961
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
of a single HTML page with four buttons, one that launches
each of the distinct attack strategies using JavaScipt embedded
in the page. Our attack uses the same Internet Explorer
memory disclosure exploit as used by Snow et al. [42].
1) Enhanced JIT-ROP: Due to the relaxed assumption of
binary compatible ﬁne-grained ASLR (see section §III), we
take a different approach to mapping out code regions. That is,
we do not recursively disassemble code pages by identifying
call sites pointing to different pages. In fact, this step is not
required; since all randomization must be done in-place, a
single disclosed function pointer gives us enough information
to infer the start and end address of that entire code module.
Thus, we can linearly inspect
the code in each identiﬁed
code region and recursively reach other shared libraries by
examining the import
table in each known module. This
technique results in a superset of the gadgets identiﬁed using
the JIT-ROP technique [42].
2) Destructive Code Reads: To test our attacks against the
destructive code read paradigm, we utilized the implemen-
tation discussed in Section II-B. This implementation works
with complex commodity software such as Internet Explorer,
Chrome, Firefox and Adobe Acrobat without any compati-
bility issues. Further, we veriﬁed that the destructive code
read implementation functions correctly by using a memory
disclosure vulnerability in Internet Explorer and observing that
the execution of disclosed gadgets resulted in the application
terminating.
V. EVALUATION
We now evaluate the practicality of our attacks against
destructive code reads by using them in conjunction with the
same real-world exploit against Internet Explorer as in [42]
on Windows 8 (32-bit), as well as simulated exploits against
Mozilla Firefox (version 41) and several versions of Adobe
Acrobat. We also provide empirical evaluations of the usable
(that is, not destroyed) gadgets that can be identiﬁed in our
attacks and demonstrate that just-in-time ROP payloads can
be successfully constructed and executed.
A. On Availability of JavaScript JIT-Cloning Gadgets
To determine the feasibility of JIT-Cloning, i.e., disclosing
code on one JIT-compiled region and later executing discov-
ered gadgets using a copy of the destroyed region, we must
evaluate several factors. First, we must determine both how
many gadgets we can persuade the JIT engine to produce.
Without the use of destructive code reads, all of these gadgets
would be available for use by the adversary. When destructive
code reads are in use, however, we may only use the subset of
the gadgets we identify that are consistently available across
all copies of that JIT-compiled region. Since some JIT-spray
mitigations are in place among commodity web browsers,
we would expect that JIT code copies are, in practice, not
identical, but rather they are similar to one another. Hence, we
must determine if these copies are similar enough to provide
one with a consistent set of available gadgets.
start = ’for ( var i = 0; i <100000; ++ i ) {’
contents = ’’
for (var j = 0; j < nConstants; j++) {
var randGadget = Math.floor(
Math.random() * 0xffffffff); // 4-byte gadgets
contents += ’g’ + j + ’ = ’ + randGadget + ’;’;
}
end = ’}’
eval(start+contents+end) // generate copy 1
eval(start+contents+end) // generate copy 2
Listing 1. Snippet of naive JavaScript code used to spray random gadgets.
By evaluating this code twice we generate two similar JIT-compiled regions.
To explore this issue, we evaluated two copies of the same
snippet of JavaScript code, depicted in Listing 1. The outer
loop attempts to coax the heuristics of the JavaScript engine
to JIT the code within the loop. Inside the loop a long series
of random constant assignments are made. Intuitively, gadgets
are randomly generated within the operands of instructions
assigning those constant values. Since we just-in-time disclose
gadgets, we do not necessarily care exactly how the JIT engine
interprets and compiles the code, so long as gadgets are in fact
generated.
The JavaScript was launched by embedding it into a web
page and browsing to that page with Mozilla Firefox (32-bit,
version 41). Our analysis shows that two (nearly) identical
copies of JIT-compiled code are loaded into program memory
at the same time. Moreover, those copies contained identical
gadgets at identical offsets within the JIT-compiled regions.
Since an arbitrary number of gadgets may be generated by
evaluating larger amounts of code, and prior work has already
demonstrated far more advanced strategies for JIT-spraying
gadgets [37, 39, 2], we leave more intricate techniques for the
generation of gadgets as an exercise for future work.
We also experimented with the code of Listing 1 us-
ing Internet Explorer 10 (32-bit). Unfortunately, the listed
JavaScript did not appear to invoke the JavaScript engine’s JIT-
compilation. Upon further investigation, we found that IE has
an undisclosed set of criteria for triggering JIT-compilation.
Additionally, as a response to attacks that force a JIT en-
gine to generate on-demand the desired shellcode or ROP
gadgets, IE and other JIT engines have started employing
code diversiﬁcation techniques such as NOP insertion and
constant blinding [27, 25]. That said, Athanasakis et al. [2]
and Song et al. [43] have shown that the existing state-of-the-
art mitigations are only able to complicate gadget spraying,
but not prevent it altogether. Internet Explorer’s Chakra engine,
for instance, which is the most advanced in terms of employed
protections, uses NOP insertion and blinding of 4-byte con-
stants, both of which have already been circumvented. We also
note that constant blinding does not hinder JIT-cloning, as we
can determine, at runtime, exactly where those randomized
constants are located in the ﬁrst copy of the JIT region and
subsequently ignore those gadgets when making use of the
second region.
Although the insertion of NOPs may shift the locations of
generated gadgets within a segment, the sequence of gadgets
962962
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
THE TOTAL GADGETS DISCOVERED, AS WELL AS THE NUMBER OF GADGETS THAT ARE AVAILABLE TO AN ATTACKER AFTER DESTRUCTIVE CODE READS
(i.e., GADGETS THAT ARE NOT IN THE NORMAL PROGRAM EXECUTION PATH).
TABLE I
Gadget
Engine
ROPSHELL
JIT-ROP
Can build payload?
Gadget
Type(s)
d3d10warp.dll
(% available)
urlmon.dll
(% available)
vgx.dll
(% available)
42 of 109 libraries
reachable from vgx.dll
(% available)
Unique
MovRegG
LoadRegG
LoadMemG
StoreMemG
ArithmeticLoadG
ArithmeticStoreG
ArithmeticG
StackPivotG
JumpG
86%
60%
82%
75%
54%
91%
85%
73%
100%
96%
Yes (manual)
96%
100%
97%
100%
100%
100%
92%
100%
100%
100%
Yes (manual)
98%
93%
97%
100%
100%
90%
97%
98%
100%
100%