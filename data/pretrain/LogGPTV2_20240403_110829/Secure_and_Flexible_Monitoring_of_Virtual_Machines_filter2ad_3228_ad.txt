results were compared. A sample size of 50 was used for
each mode, which was enough to minimize the standard de-
viation. Measurements were made using the Linux time
command, which has millisecond precision. A description
of the modes is included in Figure 7 caption.
Figure 7 shows that the difference between the different
 0 500 1000 1500 2000105010020050010002000Time in millisecondsNumber of Files CreatedMode 1Mode 2Mode 3structure contains a circular doubly linked list that points to
the rest of the modules. Therefore, the code proceeds by
loading the memory page addressed by the next pointer all
the way down the list. For each structure, the module name
is accessed by creating a pointer to its offset, and then it
is printed to stdout. Since the linked list is circular, the
code ends when it ﬁnds a pointer back to the head of the list.
Program 5.1 Source code for an example that lists all run-
ning LKMs in the domU kernel. All error checking code
has been removed for clarity.
xa_init(dom, &xai);
memory = xa_access_kernel_symbol(&xai,
"modules", &offset);
memcpy(&next_module, memory + offset, 4);
list_head = next_module;
munmap(memory, XA_PAGE_SIZE);
while (1){
memory = xa_access_virtual_address(&xai,
next_module, &offset);
memcpy(&next_module, memory + offset, 4);
if (list_head == next_module){
break;
}
name = (char *) (memory + offset + 8);
printf("%s\n", name);
munmap(memory, XA_PAGE_SIZE);
}
xa_destroy(&xai);
if (memory) munmap(memory, XA_PAGE_SIZE);
Since this example is accessing and displaying OS-
speciﬁc information, it requires OS-speciﬁc knowledge. In
this case, the knowledge falls into two categories. First, we
must know that the modules symbol points to the begin-
ning of a linked list that will provide the information that we
need. Second, we must know the offsets within the module
struct needed to access information such as the next
pointer and the module name. Requiring this type of infor-
mation is common for introspection applications. For this
example, the information needed was available in both the
Linux source code, and Bovet and Cesati’s kernel book [5].
Additional Examples The example above is straightfor-
ward and provides a quick understanding of XenAccess’s
introspection capabilities in operation. Other monitors are
not much more complex. For example, we developed an
application that monitors for changes in the system call ta-
ble (110 SLOC) and an application that monitors the in-
tegrity of an installed LKM (172 SLOC). The security ap-
plications of these types of monitoring are clear in areas like
intrusion detection and integrity checking, and have been
well explored in literature. XenAccess makes these types
of applications possible by providing memory access at the
proper levels of abstraction. Compared to other virtualiza-
tion monitoring architectures, such as the work by Asrigo
395395
et al [2], XenAccess allows for rapid monitor development
since monitors are small user-space applications rather than
kernel hooks. Based on our experience building XenAccess
introspection monitors, we feel that our architecture satis-
ﬁes property (4).
5.2.2 Virtual Disk Monitoring
In this example, three ﬁle/directory creation/deletion com-
mands are executed inside domU followed by the sync
command, which ﬂushes the changes to disk. In the man-
agement VM, a monitoring program is run which catches
changes to the /root directory in domU for 30 seconds
using XenAccess disk monitoring capabilities. This is done
by ﬁrst initializing the engine and setting a watchpoint in
/root by using the xadisk set watch() function.
Next, the engine is activated and its output is directed to
the standard output. The monitor’s source code is shown
in Program 5.2 and a sample execution is shown below for
both domU (left) and dom0 (right).
domU ˜ # mkdir foo
domU ˜ # touch dummy
domU ˜ # rm bar
domU ˜ # sync
dom0 ˜ # ./monitor /root
MKDIR: /root/foo
MKFILE: /root/dummy
RMFILE: /root/bar
Program 5.2 This disk monitoring application outputs to
the standard output all ﬁle/directory creation/removals hap-
pening in domU’s /root directory as soon as they are com-
mitted to disk.
xadisk_t *x;
xadisk_obj_t *obj;
x = xadisk_init(1, FILE_IMAGE);
obj = xadisk_set_watch(x, argv[1]);
xadisk_activate(x, "/dev/xen/tapfifo0\0");
dup2(1, x->fifo_fd);
sleep(30);
xadisk_unset_watch(x, obj);
xadisk_destroy(x);
The simplicity of this example shows how XenAccess
can be used to enable rapid development of similar moni-
toring applications, satisfying property (4).
From a security perspective, one application of this
engine is a disk-based intrusion detection system [22,
12] whose goal is to detect suspicious ﬁle/directory cre-
ation/deletion commonly done by rootkits.
In this case,
the watchpoints would most likely be set in privileged sys-
tem directories such as /bin and /usr/bin. An IDS de-
ployed in this fashion has the obvious advantage of not re-
quiring additional hardware in the hard drive, as done by
traditional disk-based IDSes to achieve isolation.
In our
case, the isolation is provided by the VMM.
The need to manually perform a disk ﬂush through the
sync command in the example above illustrates one of the
problems involved in this type of monitoring: the fact that
changes made to the ﬁlesystem are not immediately com-
mitted to the disk in modern OSes. This can have serious
implications for real-time disk-based IDSes, as it opens a
window for evasion attacks. One way of addressing this
problem is to use disk monitoring together with memory
introspection: disk ﬂushes could be externally enforced by
actively manipulating the ﬂushing timers in the guest OS
memory through introspection. This approach is currently
being investigated, along with others in which memory in-
trospection and disk monitoring can be associated.
6 Discussion and Future Work
Stepping back to look at the six requirements given for
a robust monitoring solution, we note that XenAccess sat-
isﬁes each of these requirements. (1) The XenAccess Li-
brary uses an unmodiﬁed version of Xen as a VMM plat-
form. (2) Using the capabilities provided by Xen, no spe-
cial code needs to be inserted into the target OS. This is
especially useful as it allows XenAccess monitors to work
with both open and closed source target OSes. (3) Our per-
formance testing shows that our address translation, mem-
ory copying, and disk I/O monitoring functions have small
overheads, making these capabilities effective for a variety
of monitoring applications. (4) Our example applications
show that developing monitors with XenAccess is straight-
forward, with a minimal learning curve. (5) While our exist-
ing library implementation can view memory and disk I/O,
the XenAccess architecture is easily extensible to collect
any type of data from the target OS. (6) Finally, leveraging
the protections provided by the VMM, XenAccess is suf-
ﬁciently isolated from the target OS and any possibility of
tampering by malicious software.
XenAccess currently provides a solid foundation for
monitoring in a virtualized environment. Yet, our experi-
ences working with virtual memory introspection and vir-
tual disk monitoring highlighted some areas that would ben-
eﬁt from additional research.
Introspection requires use
of OS-speciﬁc information, as discussed in Section 4.2.1.
This means that it is possible for an OS upgrade, hotﬁx, or
patch to break the monitors. Ideally, XenAccess should pro-
vide an abstraction layer that dynamically adapts to these
changes and provides a consistent interface to monitor ap-
plications. Finding techniques to enable this approach is
still an open research problem.
For reasons of backwards compatibility, changes in
ﬁlesystem structure and layout are very rare. So disk moni-
toring is not prone to the types of problems discussed above
for introspection. Instead, we envision the future work in
this space to focus on scalability, functionality, and HVM
support. The current issues with scalability and function-
ality were discussed in Section 4.2.2. HVM support will
require changes to tap into the QEMU device driver mech-
396396
anism used by Xen.
7 Conclusion
This paper described XenAccess, a monitoring library
for Xen virtual machines. XenAccess’ development was
guided by a set of design principles aimed at providing
a solid foundation for secure and ﬂexible virtual machine
monitoring. XenAccess implements virtual memory intro-
spection and virtual disk monitoring capabilities by leverag-
ing Xen’s existing infrastructure. By using it to access the
target VM’s raw memory pages and disk I/O, XenAccess is
able to infer OS data structures and ﬁlesystem operations at
a useful abstraction level.
Our evaluation revealed that XenAccess imposes a min-
imal performance overhead to the target OS memory and
disk operation. We also showed practical examples of the
type of information that memory introspection and disk
monitoring can gather, illustrating the potential of each
technique.
Acknowledgments
This material is based upon work supported in part by
the National Science Foundation under Grant No. CNS-
0627430. Any opinions, ﬁndings, and conclusions or rec-
ommendations expressed in this material are those of the
author(s) and do not necessarily reﬂect the views of the Na-
tional Science Foundation.
References
[1] A. C. Arpaci-Dusseau and R. H. Arpaci-Dusseau. Informa-
tion and control in gray-box systems. In Proceedings of the
18th Symposium on Operating System Principles, 2001.
[2] K. Asrigo, L. Litty, and D. Lie. Using VMM-based sensors to
monitor honeypots. In Proceedings of the 2nd ACM/USENIX
International Conference on Virtual Execution Environments,
2006.
[3] P. Barford and V. Yegneswaran. An inside look at botnets. In
Advances in Information Security. Springer, 2006.
[4] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho,
R. Neugebauer, I. Pratt, and A. Warﬁeld. Xen and the art of
virtualization. In Proceedings of the 19th ACM Symposium
on Operating Systems Principles, 2003.
[5] D. P. Bovet and M. Cesati. Understanding the Linux Kernel.
O’Reilly & Associates, Inc., 3rd edition, 2005.
[6] J. Dike. User Mode Linux. Prentice Hall, 1st edition, April
2006.
[7] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. M.
Chen. Revirt: Enabling intrusion analysis through virtual-
machine logging and replay. In Proceedings of the 2002 Sym-
posium on Operating Systems Design and Implementation,
December 2002.
[8] P. Elango, S. Krishnakumaran, and R. H. Arpaci-Dusseau.
Design choices for utilizing the disk idleness in a virtual ma-
chine environment. In Workshop on the Interaction between
Operating Systems and Computer Architecture, June 2006.
[9] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh.
Terra: A virtual machine-based platform for trusted comput-
[27] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez,
S. Berger, J. Grifﬁn, and L. van Doorn. Building a MAC-
based security architecture for the Xen opensource hypervi-
In Proceedings of the 21st Annual Computer Security
sor.
Applications Conference (ACSAC), December 2005.
[28] J. H. Saltzer and M. D. Schroeder. The protection of infor-
mation in computer systems. Communications of the ACM,
17(7), July 1974.
[29] M. Sivathanu, V. Prabhakaran, F.
I. Popovici, T. E.
Denehy, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau.
Semantically-smart disk systems. In Proceedings of FAST:
2nd USENIX Conference on File and Storage Technologies,
2003.
[30] J. D. Strunk, G. R. Goodson, M. L. Scheinholtz, C. A. N.
Soules, and G. R. Ganger. Self-securing storage: Protect-
ing data in compromised systems. In Proceedings of the 4th
Symposium on Operating Systems Design and Implementa-
tion, 2000.
[31] C. A. Waldspurger. Memory resource management
in
vmware esx server. In Proceedings of the 5th Symposium on
Operating Systems Design and Implementation (OSDI ’02),
volume 36, pages 181 – 194, 2002.
[32] A. Warﬁeld. Virtually persistent data. In Xen Developer’s
Summit (Fall 2006), 2006.
ing. In Proceedings of ACM Symposium on Operating Sys-
tems Principles (SOSP), October 2003.
[10] T. Garﬁnkel and M. Rosenblum. A virtual machine intro-
spection based architecture for intrusion detection. In Pro-
ceedings of the 2003 Network and Distributed System Sym-
posium, 2003.
[11] R. Goldberg. Survey of virtual machine research.
IEEE
Computer Magazine, 7:34 – 45, June 1974.
[12] J. L. Grifﬁn, A. Pennington, J. S. Bucy, D. Choundappan,
N. Muralidharan, and G. R. Ganger. On the feasibility of in-
trusion detection inside workstation disks. Technical Report
CMU-PDL-03-106, Carnegie Mellon University, 2003.
[13] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-
Dusseau. Antfarm: Tracking processes in a virtual machine
environment. In Proc. of the USENIX Annual Technical Con-
ference, June 2006.
[14] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-
Dusseau. Geiger: Monitoring the buffer cache in a virtual
machine environment. In Architectural Support for Program-
ming Languages and Operating Systems (ASPLOS XII), San
Jose, CA, October 2006.
[15] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detect-
ing past and present intrusions through vulnerability-speciﬁc
predicates. In Proceedings of ACM Symposium on Operating
Systems Principles (SOSP), pages 1–15, Oct 2005.
[16] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, and
C. E. Kahn. A retrospective on the VAX VMM security ker-
IEEE Transactions on Software Engineering, 17(11),
nel.
November 1991.
[17] N. L. Kelem and R. J. Feiertag. A separation model for vir-
In Proceedings of the 1991 IEEE
tual machine monitors.
Symposium on Research in Security and Privacy, pages 78
– 86, 1991.
[18] K. Kourai and S. Chiba. Hyperspector: Virtual distributed
monitoring environments for secure intrusion detection.
In
Proceedings of the 1st ACM/USENIX International Confer-
ence on Virtual Execution Environments, 2005.
[19] R. Love. Linux Kernel Development. Novell Press, 2nd edi-
tion, 2005.
[20] S. E. Madnick and J. J. Donovan. Application and analysis
of the virtual machine approach to information system secu-
rity and isolation. In Proceedings of the Workshop on Virtual
Computer Systems, pages 210 – 224, March 1973.
[21] R. Meushaw and D. Simard. Nettop: A network on your
desktop. Tech Trend Notes (NSA), 9(4):3 – 11, Fall 2000.
[22] A. G. Pennington, J. D. Strunk, J. L. Grifﬁn, C. A. N. Soules,
G. R. Goodson, and G. R. Ganger. Storage-based intrusion
detection: Watching storage activity for suspicious behav-
ior. In Proceedings of the 12th USENIX Security Symposium,
2003.
[23] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh.
Copilot - a coprocessor-based kernel runtime integrity moni-
tor. In Proceedings of the 13th USENIX Security Symposium,
August 2004.
[24] Qumranet, Inc. Kvm: Kernel-based virtualization driver.
[25] J. S. Robin and C. E. Irvine. Analysis of the Intel pentium’s
ability to support a secure virtual machine monitor. In Pro-
ceedings of the 9th USENIX Security Symposium, 2000.
[26] M. E. Russinovich and D. A. Solomon. Microsoft Windows
Internals. Microsoft Press, 4th edition, 2004.
397397