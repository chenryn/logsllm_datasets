Tree。交易Tx为其中一个叶节点。其结构图如下：
Dice2win提出的Merkle
proof算法的思路在于：当分叉块产生时(如同时产生B5与A5)，网络可能有两种开奖结果出现。但因为网络原因，荷官可能先收到其中一个块（假设为B5）。从荷官的视角来看，它并不知道B5是否会称为主链上的块。即使荷官多等待一段时间，收到了（A5、A6、B6）后，它仍然无法确定哪条链会称为主链。为了提高开奖速度，当荷官收到某个交易块之后，就马上进行开奖。如果该交易块最后成为主链(A5)，则正常使用SettleBet方法开奖。如果该区块最后成为叔块(B5)，则提交由该交易执行结果为叶根节点、引用该叔块的主链块canoinicalHash为根节点的非结构性Merkle
tree（如上图）的一个存在性证明( Merkle proof )。从而证明B5确实存在过，且交易Tx包含在B5中；荷官可以使用叔块进行开奖。
Dice2win的Merkle
proof算法看上去是一个解决以太坊上去中心化博彩游戏开奖速度的很好的思路。但实际上该做法并不公平，以太坊上接近10%的叔块率可以导致荷官以比较大的优势可以根据游戏结果进行选择性开奖。如果A5庄家赢就开A5，如果B5庄家赢就开B5。这样的方案显然不公平。
## 任意开奖攻击（Merkle proof验证绕过漏洞）
在详细阅读Dice2win关于Merkle proof的实现后，我们发现目前该合约的非结构性Merkle
Proof验证存在诸多绕过方法。即荷官可以伪造一个叔块B5的Merkle proof，欺骗合约实现对任意结果进行开奖。
####
[](http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win.html#toc-026)一次已经发生过的Merkle
proof验证绕过攻击分析
同时，我们翻阅合约历史发现其实上个月就已经有攻击者实现了对该Merkle
proof算法的绕过，将该版本的合约余额洗劫一空(但该情况为引起社区重视，Dice2win官方对该事件进行了冷处理)。在介绍我们的漏洞之前，我们可以先看看这个已发生对该Merkle
proof验证算法的攻击方法。其中一笔攻击交易发生在：
攻击者通过创建攻击合约0xc423379e42bb79167c110f4ac541c1e7c7f663d8，并在合约0xc423379e42bb79167c110f4ac541c1e7c7f663d8调用placeBet方法自动化进行下注（17次下注，每次2以太）。然后伪造Merkle
proof,调用settleBetUncleMerkleProof方法开奖，在赢取了33以太后将奖金转到账户0x54b7eb670e091411f82f50fdee3743bd03384aff，最后合约自杀销毁。通过对该合约bytecode的逆向分析，我们可以得知该攻击利用了如下漏洞：
  1. Dice2win不同版本的合约，存在secretSigner相同的情况。导致一个庄家的承诺可以在不同版本的合约中使用。【运维原因产生的安全漏洞】
  2. placeBet方法中对commit的过期校验可被绕过。commitLastBlock与当前block.number进行大小判断时是uint256类型的。然后再带入keccak256进行签名验证的时候却转换成了uint40。那么攻击者将任意一个secretSigner签名的commitLastBlock 的最高位(256bit)从0修改为1，则可绕过时间验证。【漏洞在最新版本中仍未修复，详细见下图】
  3. Merkle proof校验不严格。在该版本的settleBetUncleMerkleProof中，每次计算hashSlot偏移的边界检查不严格(缺少32byte)，导致攻击者可以不需要将目标commit绑定到该Merkle proof的计算中，从而绕过验证。【该漏洞已修复，详见下图】
####
[](http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win.html#toc-3cc)Merkle
proof验证绕过漏洞
经过我们分析，Dice2win目前版本的Merkle
proof仍然存在多种绕过方法。由于该方法目前只能由荷官调用，所以普通攻击者无法利用该漏洞。但该漏洞可以作为荷官后门实现任意开奖。
这里我们大致整理当前验证算法的验证逻辑：
  1. 先调用requireCorrectReceipt方法校验Receipt格式满足条件。
  2. Recipt trie entry中包含的是一个成功的交易。
  3. 交易的目标地址是Dice2win合约。
  4. Merkle Proof验证计算的起始叶节点包含目标commit。
  5. 最后计算得到的canonicalHash是一个合法的主链块哈希。 条件1、2、3的满足并不是强绑定的，我们只要构造满足条件的数据格式就可以了。条件4、5的绕过，本质上是要迭代计算： hash_0=commit hash_{n+1}= SHA3(something_{n1},hash_n,something_{n2}) canonicalHash=hash_{lastone}
攻击方法1：
一个执行成功的叔块交易中包含目标commit并不是什么难构造的事情。荷官可以在某个合约调用交易的input输入里面塞入该commit就能绕过。当然该绕过方法比较麻烦。
攻击方法2：
由于hash_{n+1}=
SHA3(something_{n1},hash_n,something_{n2})的迭代计算未进行深度检查。所以荷官可以在本地生意一个新的merkle
tree,该merkle tree的叶节点满足1、2、3条件且包含多个commit_i。将该merkle
tree的根hash嵌入到一个正常的区块中，就能生成一个合法的证明。在该攻击方法中，荷官可以一劳永逸，对所有的commit进行任意开奖。
这些绕过方法的核心问题在于：目前该非结构化的Merkle tree实际上并不满足我们常说的Merkle hash tree的结构。常规的Merkle
hash tree在加强限制的条件下能够进行存在性证明，但Dice2win的非结构化Merkle证明算法难以实现该目的。
####
[](http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win.html#toc-550)其他安全问题：
当用户下注未被开奖，用户可以调用refundBet来溢出jackpotSize，造成jackpotSize变为一个巨大的整数(由Gaia发现并指出)。
## 后记
  1. Dice2win并不是一个公平的博彩游戏。
  2. 智能合约的安全问题非常严峻。(这实际上是我分析的第一个智能合约)
  3. 传统的安全多方计算的协议有时不能简单套用的到智能合约环境中，因为其通讯模型有区别。