title:Deterministic, Stash-Free Write-Only ORAM
author:Daniel S. Roche and
Adam J. Aviv and
Seung Geol Choi and
Travis Mayberry
Deterministic, Stash-Free Write-Only ORAM
Daniel S. Roche
United States Naval Academy
Annapolis, Maryland, U.S.A.
PI:EMAIL
Seung Geol Choi
United States Naval Academy
Annapolis, Maryland, U.S.A.
PI:EMAIL
Adam Aviv
United States Naval Academy
Annapolis, Maryland, U.S.A.
PI:EMAIL
Travis Mayberry
United States Naval Academy
Annapolis, Maryland, U.S.A.
PI:EMAIL
ABSTRACT
Write-Only Oblivious RAM (WoORAM) protocols provide privacy
by encrypting the contents of data and also hiding the pattern of
write operations over that data. WoORAMs provide better privacy
than plain encryption and better performance than more general
ORAM schemes (which hide both writing and reading access pat-
terns), and the write-oblivious setting has been applied to important
applications of cloud storage synchronization and encrypted hidden
volumes. In this paper, we introduce an entirely new technique for
Write-Only ORAM, called DetWoORAM. Unlike previous solutions,
DetWoORAM uses a deterministic, sequential writing pattern with-
out the need for any “stashing” of blocks in local state when writes
fail. Our protocol, while conceptually simple, provides substantial
improvement over prior solutions, both asymptotically and exper-
imentally. In particular, under typical settings the DetWoORAM
writes only 2 blocks (sequentially) to backend memory for each
block written to the device, which is optimal. We have implemented
our solution using the BUSE (block device in user-space) module
and tested DetWoORAM against both an encryption only baseline
of dm-crypt and prior, randomized WoORAM solutions, measuring
only a 3x-14x slowdown compared to an encryption-only baseline
and around 6x-19x speedup compared to prior work.
1 INTRODUCTION
ORAM. Even when data is fully encrypted, the sequence of which
operations have been performed may be easily observed. This access
pattern leakage is prevented by using Oblivious RAMs (or ORAMs),
which are protocols that allow a client to access files in storage
without revealing the sequence of operations over that data. ORAM
solutions that have been proposed provide strong privacy by guaran-
teeing that anyone who observes the entire communication channel
between client and backend storage cannot distinguish any series of
accesses from random. Due to this strong privacy guarantee, ORAM
has been used as a powerful tool in various application settings
such as secure cloud storage (e.g., [16, 27, 28]), secure multi-party
computation (e.g., [10, 14, 15, 32, 34]), and secure processors (e.g.,
[8, 13, 19]).
This paper is authored by an employee(s) of the United States Government and is in
the public domain. Non-exclusive copying or redistribution is allowed, provided that
the article citation is given and the authors and agency are clearly identified as its
source.
CCS’17, , Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
2017. ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134051
Unfortunately, in order to achieve this obliviousness, ORAM
schemes often require a substantial amount of shuffling during
every access, requiring more encrypted data to be transferred than
just the data being written/read. Even Path ORAM [29], one of the
most efficient ORAM constructions, has an Ω(log N) multiplicative
overhead in terms of communication complexity compared to non-
private storage.
WoORAM. Write-only ORAM (WoORAM) [4, 12] introduces a
relaxed security notion as compared to ORAMs, where only the
write pattern needs to be oblivious. That is, we assume a setting in
which the adversary is able to see the entire history of which blocks
have been written to the backend, or to view arbitrary snapshots of
the storage, but the adversary cannot see which blocks are being
read.
Every ORAM trivially satisfies the properties of WoORAM, but
entirely different (and possibly more efficient) WoORAM solutions
are available because a WoORAM is by definition secure even if reads
are not oblivious. WoORAM schemes can be used in application
settings where adversaries are unable to gather information about
physical reads. In such settings, the weaker security guarantee of
WoORAM still suffice to hide the access patterns from the adversary
of limited power.
Deniable storage [4] is one such application. In this setting, a user
has a single encrypted volume and may optionally have a second,
hidden volume, the existence of which the user wishes to be able
to plausibly deny. For example, a laptop or mobile device owner
may be forced to divulge their device decryption password at a
border crossing or elsewhere. The adversary may also be able to
view multiple snapshots of the disk, either at different times or
through physical forensic information remaining on the storage
medium. Even given every past state of storage, an adversary should
not be able to guess whether the user has a second hidden volume
or not. In this context, it is reasonable to assume that the adversary
won’t get any information about block reads that have taken place
in the disk, since read operations do not usually leave traces on the
disk. Based on this observation, a hidden volume encryption (HiVE)
for deniable storage was constructed based on WoORAM [4].
We proposed another example application in [2] for synchroniza-
tion based cloud storage and backup services. Here, the user holds the
entire contents of data locally, and uses a service such as DropBox
to synchronize with other devices or store backups. The service
provider or an eavesdropper on the network only observes what the
user writes to the synchronization folder, but does not see any read
operations as these are done locally without the need for network
communication. We showed in [2] showed that WoORAMs can
provide efficient protection in this scenario, as well as protection
against timing and file size distribution attacks.
In both cases, what makes WoORAMs attractive is that they
can achieve security much, much more efficiently than the full
read/write oblivious ORAMs such as Path-ORAM. For example,
consider storing N size-B data blocks in a non-recursive setting in
which the client has enough memory to contain the entire posi-
tion map of size O(N log N), Blass et al. [4] provided a WoORAM
construction (hereafter, HiVE-WoORAM) with optimal asymptotic
communication overhead of O(B) and negligible stash overflow
probability. As a comparison, fully-functional read/write ORAM
schemes — again, even without the position map — have an over-
head of Ω(B log N).
Towards better efficiency with realistic client memory. Al-
though HiVE-WoORAM has a better asymptotic communication
complexity than Path-ORAM in the non-recursive setting (i.e., with
client memory of size O(N log N)), the situation is different when
the size of the unsynchronized client memory is smaller (i.e., poly-
logarithmic in N ). This could be because the client really has less
memory, or because the state needs to be synchronized frequently
(as in a multi-user setting). In this case, the client cannot maintain
the entire position map in memory, and so the position map storage
needs to be outsourced to the server as another WoORAM. This en-
coding typically occurs via a recursive process, storing the position
map in recursively smaller WoORAMS, until the final WoORAM
is small enough to fit within client memory. Therefore, in the uni-
form block setting where every storage block has the same size,
both HiVE-WoORAM and Path-ORAM have the same overhead
O(B log2
N) with poly-logarithmic client memory size.1
Hence, we ask the following question:
Can we achieve WoORAM with better asymptotic commu-
nication complexity in the setting of polylogarithmic client
memory and uniform blocks?
1.1 A Deterministic Approach to WoORAMs
In answering the question above, observe that the security require-
ment of WoORAMs are much weaker than that of ORAMs. Namely,
only the write operations need to be oblivious, and the read opera-
tions can occur using different protocols than that of writing. This
opens the door to a radically different approach toward constructing
a WoORAM scheme.
Traditional approaches. Traditionally, in ORAM schemes as well
as WoORAM, to write data d, the oblivious algorithm selects k
blocks in some random process storage in order to write. In Pa-
th-ORAM, those k blocks form a path in a tree, while in HiVE-
WoORAM, they are uniformly sampled from a flat storage array
of blocks. All k blocks are re-encrypted, and the new block d is
inserted if any existing blocks are empty.
1The multiplicative overhead O(log2 N) can be reduced to additive overhead of
O(log3 N) if the size of the block can be non-uniform [4, 29]. However, through-
out the paper we will consider the uniform block setting, since the two use cases we
consider above assume uniform block sizes. We note that our construction still has
better additive overhead of O(log2 N) even in the non-uniform block setting.
One of the challenges with this approach is that there is the
possibility for a write to fail if none of the random k blocks are
empty and thus d cannot be inserted. Instead d is placed into a
stash in reserved client memory until it may be successfully written
to the ORAM (or WoORAM) when two or more of the k blocks
are empty. Fortunately, the probability of this event is bounded,
and thus the size of the stash can also be bounded with negligible
stash overflow probability. The schemes will, with overwhelming
probability, work for small client memory.
Main observations. After careful inspection of the security proofs,
we discovered that random slots are mainly used to hide read ac-
cesses, not write accesses! That is, the challenge for ORAMs is that
successive reads of the same data must occur in a randomly indistin-
guishable manner. For example, without the technique of choosing
random slots, two logical reads on the same address may result in
reading the same physical address twice, in which case the read
accesses are not oblivious. In the WoORAM setting, however, the
scheme may still be secure even if reads are not oblivious, since the
security requirement doesn’t care about physical reads! Based on
this observation, we ask:
Can we construct a deterministic WoORAM scheme using a
radically different framework?
1.2 Our Work: DetWoORAM
We answer both of the above questions affirmatively. In what fol-
lows, we describe the main features and contributions of DetWo-
ORAM.
Deterministic, sequential physical accesses. DetWoORAM de-
parts from the traditional approach in constructing a WoORAM
scheme in that the write pattern is deterministic and sequential.
Roughly speaking, if some logical write results in writing the two
physical blocks i and j, the next logical write will result in writing
in physical blocks (i + 1) mod N and (j + 1) mod M, where M is a
parameter in the system.
No stash. The deterministic nature of the physical writes also
implies that a stash is no longer needed. A write will always succeed
and always occurs in a free block. Therefore, we were able to remove
the notion of stash completely in our scheme. To elaborate this point,
we give a very simple toy construction that captures these aspects in
Section 3.1. Due to the deterministic access pattern and the absence
of stash, security analysis of our scheme is extremely simple.
Optimal communication complexity of physical writes. Each
logical read or write operation from the client’s end results in some
physical reads and/or writes to backend memory. In the uniform
block setting, we assume there is a block size B, presumably dic-
tated by the underlying medium, and that all reads and writes must
occur in multiples of B. The communication complexity is then
the total number of bytes transferred for a given operation, which
necessarily is a multiple of B.
DetWoORAM has better asymptotic communication complexity
than previous constructions (see Table 1). In particular, DetWo-
ORAM improves the complexity of write operations compared to
HiVE-WoORAM by a factor of log N . Note that, even though read
Path-ORAM [29]
HiVE-WoORAM [4]
Logical Read
Physical Read
O(B log2
N)
O(B log N)
O(B log N)
Physical Write
O(B log2
N)
0
0
Logical Write
Physical Read
O(B log2
N)
O(B log2
N)
O(B log N)
Physical Write
O(B log2
N)
O(B log N)
2B
DetWoORAM
B denotes the block size (in bits), and N denotes the number of logical blocks. We assume B = Ω(log2
Table 1: Communication complexity and client memory size for various ORAMs in the uniform block setting
Unsynchronized
Client Memory
ω(B log N)
ω(B log N)
O(B)
Security
RW
W-only
W-only
N).
operations are assumed to be hidden from an observer, the asymp-
totic cost of reads is still very significant for practical performance.
We stress that to the best of our knowledge, DetWoORAM is the
first WoORAM construction whose physical write cost is 2B for a
single logical write. In other words, the physical-write overhead
is a single block (additive!), which is exactly optimal in the uniform
block setting with small client storage.
Optimization techniques: ODS and packing. We applied two
optimization techniques to further reduce the communication com-
plexity and improve practical performance.
First, we created a new write-only oblivious data structure (ODS),
in the form of a Trie, to function as the position map. As with pre-
vious tree-based ODS schemes [24, 33], our ODS scheme avoids
recursive position map lookups by employing a pointer-based tech-
nique. That is, the pointer to a child node in a Trie node directly
points to a physical location instead of a logical location, and there-
fore it is no longer necessary to translate a logical address to a
physical address within the Trie itself. We note that the ODS idea
has previously been applied to WoORAM by [5], although their
overall scheme turns out the be insecure (see Section 6).
With the simpler position map stored as a Trie and the deter-
ministic write-access pattern in DetWoORAM, we can manipulate
the parameters to optimize the procedure with DetWoORAM. In
particular, we will show how to pack write-updates of the posi-
tion map Trie into block size chunks. With additional interleaving
techniques, we will show that we can achieve a minimal communi-
cation complexity of 2B, one block for the data and one block for
position map and other updates. The details of these techniques are
described in Section 3.3 and 3.4.
Stateless WoORAM. WoORAM is usually considered in a single-
client model, but it is sometimes useful to have multiple clients
accessing the same WoORAM. In a multi-client setting, even if
the client has a large amount of local memory available, our im-
provements in local storage of eliminating stash and optimizing
the position map are significant.
Because our scheme has no stash, we can convert our scheme
to a stateless WoORAM with no overhead except for storing the
encryption key and a few counter variables. On the other hand,
previous schemes such as Path-ORAM and HiVE-WoORAM must