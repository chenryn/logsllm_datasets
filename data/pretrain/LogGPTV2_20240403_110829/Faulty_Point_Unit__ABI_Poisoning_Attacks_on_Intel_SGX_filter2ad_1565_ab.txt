we show that attackers can deterministically detect the occurrence
of x87 instructions in secret-dependent code paths and may even
partially reconstruct SSE operand values in straight-line code.
Specifically, in cases where an enclave multiplies a user-controlled
input with a secret learned parameter, such as the weights in a
neural network, attackers may partially reconstruct the secret mul-
tiplier by forcefully enabling floating-point exceptions before enter-
ing the victim enclave and abusing the mere occurrence or absence
of a subsequent “denormal operand” exception for a carefully cho-
sen input as an unconventional side channel. This technique is
closely related to a powerful class of controlled-channel attacks
that have previously abused side-channel leakage from x86 CPU
exception events to spy on memory addresses accessed by a victim
Intel SGX enclave through either page faults [48], segmentation
faults [17], or alignment-check exceptions [43]. Our ABI-level at-
tacks, on the other hand, directly reconstruct full data operand
values for selected floating-point operations, and, hence, for the
first time extend the threat of controlled-channel attacks beyond
leaking address-related metadata for memory operations.
Our contributions. In summary, we make the following main
ceptions to recover enclaved multiplication operands.
contributions:
• A novel ABI-level fault-injection attack that allows unprivileged
adversaries to influence the precision, rounding, and exception
behavior of x87 or SSE floating-point operations in at least 5
popular Intel SGX enclave shielding runtimes.
• An innovative controlled channel that abuses floating-point ex-
• An exploration of a new class of quality-degradation attacks
that stealthily compromise the integrity of supposedly secure
outsourced enclave computation results.
• A demonstration of practical FPU attacks in an end-to-end ma-
chine learning case study enclave and a larger analysis of attacker-
induced floating-point errors on the SPEC suite.
Finally, we formulate recommendations for principled ABI san-
itization and we argue that this attack surface is non-trivial to
patch. Specifically, our analysis revealed insufficient FPU sanitiza-
tion patches in two production-quality runtimes [13, 30] that were
explicitly aware of this attack surface. We show that, despite the
initial patches for these runtimes, it was still possible for ABI-level
unprivileged attackers to silently override the outcome of trusted
in-enclave x87 computations with indefinite NaN outcomes.
Responsible disclosure. The main security vulnerabilities ex-
ploited in this work have been assigned CVE-2020-0561 by Intel,
for the sanitization oversight in the Intel SGX-SDK, and CVE-2020-
15107 by Microsoft, for the remaining attack surface after the initial
mitigation attempt in OpenEnclave. While the initial mitigation
attempt in OpenEnclave served as inspiration for our work, both
the issue in the Intel SGX-SDK and the remediation of insufficient
patches were then responsibly disclosed through the proper chan-
nels for the affected production runtimes. Intel, Microsoft, Fortanix,
and Go-TEE acknowledged the issue and applied our recommended
patches in the enclave entry code for the SGX-SDK v2.8, Open-
Enclave v0.10.0, and the Rust compiler v1.46.0, respectively. We
3
provide our case studies and proof-of-concept exploits as open-
source artifact for other researchers to independently evaluate and
build upon our findings1.
2 BACKGROUND
This section introduces the necessary background on SGX enclaves
and Intel processor support for floating-point computations through
the x87 FPU and SSE vector extensions, respectively.
2.1 Intel SGX
Intel Software Guard Extensions (SGX) [10, 20], are a set of hard-
ware instructions that allow to create trusted regions of code called
enclaves that are shielded from the surrounding, potentially un-
trusted Operating System (OS). The SGX promise is that enclave
applications can access almost all capabilities of the user-mode x86
instruction set, while at the same time being provided with strong
hardware-backed memory isolation and the capability of attesting
code to remote parties. SGX protects enclave memory from outside
access and provides instructions to enter and exit enclave mode.
When encountering exceptions or interrupts during enclaved exe-
cution, the CPU securely saves and scrubs the full extended register
set inside the enclave, to be later restored when the enclave is re-
sumed. However on initial enclave entry into registered call gates,
named ecalls, the cleansing and sanitization of registers is the
responsibility of the software. Due to this challenge, multiple en-
clave shielding runtimes (cf. Figure 1) have emerged that take over
this sanitization on enclave entry, bring the processor into a clean
state, and then forward execution to the intended application bi-
nary inside the enclave. This not only lowers application developer
effort to adopt enclaved execution but also streamlines the miti-
gation of vulnerabilities on ABI-level. While a 64-bit operation is
the norm for SGX enclaves, a 32-bit compatibility mode is officially
supported.
2.2 x87 FPU
The x87 FPU [20] provides an environment to perform floating-
point and other math operations. For this, the x87 FPU has eight
80-bit data registers that are used internally as a register stack
during computation of FPU instructions. The 80 bits in the registers
are designed to ensure a high precision inside the FPU to minimize
floating-point errors of data that is returned back from the data
registers to memory. With 1 bit used for the sign and 14 bits used
for the exponent, one 80-bit register utilizes 64 bits to store the
significand of a floating-point variable which Intel calls double-
extended precision. The internal data registers of the x87 FPU by
default utilize the full 64 bits of the significand during computations.
In addition, the x87 FPU also contains a control register that can be
set with the FPU Control Word as shown in Figure 2. This control
register allows to specify two additional precision formats, namely
double precision with 53 bits used for the significand and single
precision with only 24 bits for the significand. These additional
precision modes enable compatibility with the IEEE Standard 754
and legacy programs or older programming languages.
Besides limited precision, another important aspect of floating-
point operations is the rounding mode. Whenever a floating-point
1https://github.com/fritzalder/faulty-point-unit
ACSAC 2020, December 7–11, 2020, Austin, USA
Alder et al.
Figure 2: Layout of the x87 FPU control word.
number can not be represented exactly with the given precision, the
FPU needs to make a decision whether to choose the next higher
or next lower possible representation. By default the x87 FPU will
round to the nearest value, but developers can choose to override
this in the control word and enforce rounding up, rounding down,
or rounding toward zero. Naturally, the impact of the rounding
mode is greater for computations in single-precision mode than
for computations in double-extended precision as rounding errors
accumulate faster and the distance between two floating-point
numbers that can be represented with the given precision is larger.
Figure 2 shows those fields of the FPU control word that con-
trol the behavior of FPU operations in red. These are the Precision
Control (PC) bits 8 and 9, and the Rounding Control (RC) bits 10
and 11. Fields that control the masking of floating-point exceptions
are shown in orange in the figure. Bits 0 to 5 can be used to mask
any of the 6 floating-point exceptions that may be triggered by the
x87 FPU. Notable examples of exceptions the FPU might encounter
include underflow when a result becomes subnormal, also referred
to as “denormal”, and overflow when the result can no longer be
represented in the respective floating-point type. Exceptions are
masked by default, instructing the FPU to continue with some safe
default values. However, in case programmers want to be notified
about these events, individual exception types can be unmasked by
clearing the respective bits in the FPU control word, e.g., through
the C library function feenableexcept(). When encountering an
unmasked exception, the FPU will stop operation and program-
mers can register a custom SIGFPE signal handler through the OS.
Lastly, the remaining non-relevant bits in the FPU control word are
marked gray. These are bits 6,7, and 13-15 which are reserved and
bit 12 which exists for compatibility reasons and is not meaningful
anymore for current versions of the x87 FPU.
Importantly, since the x87 FPU control word defines global pro-
gram behavior, it is expected by the ABI to be initialized to a pre-
defined sane state 0x37f that should be preserved across function
calls, except for procedures that have the explicit intention of glob-
ally changing the FPU configuration [12, 26]. Furthermore, on Intel
processors supporting MMX technology [20], the eight x87 floating-
point registers can also be utilized as general-purpose MMX vector
registers. However, since the MMX registers are internally aliased to
the x87 FPU register stack, care should be taken when mixing MMX
and x87 instructions. Specifically, any MMX instruction marks the
entire x87 stack as in-use and developers are required to issue a
special emms instruction to clear the register stack before executing
any subsequent x87 operation. Failure to do so may produce un-
expected results, and compiler ABIs hence demand that “the CPU
shall be in x87 mode upon entry to a function” [26].
4
Figure 3: Layout of the MXCSR control/status register.
2.3 Streaming SIMD Extensions (SSE)
In order to further speed up floating-point arithmetics, recent Intel
processors include vector extensions that operate independently of
the x87 FPU and allow for high performance of parallelized calcula-
tions. The line of Streaming SIMD Extensions (SSE) [20] supports
parallel floating-point operations on 128-bit vector registers holding
either four 32-bit single-precision or two 64-bit extended-precision
floating-point numbers. In contrast to the x87 FPU which calcu-
lates intermediate results with 80 bits of precision, SSE processes
a vector of operands in parallel with a fixed (but lower) precision
that cannot anymore be dynamically degraded by the developer.
Similar to the x87 control word, SSE offers a global MXCSR control
register to configure the rounding mode and exception behavior,
as shown in Figure 3. The SSE rounding control bits 13-14 (red)
and floating-point exception mask bits 7-12 (orange) work identi-
cal to those described earlier for the x87 FPU. In addition, MXCSR
provides status flags 0-5 (green) that indicate whether one of the
six floating-point exceptions occurred and configuration bits to
specify the behavior when encountering subnormal numbers and
underflow conditions. Specifically, bit 15 is called the Flush-To-Zero
bit and can be used to enter a mode that flushes the result to zero
whenever an underflow is encountered which slightly reduces pre-
cision of the calculations for the benefit of increased performance.
Bit 6 can be used to enter the Denormals-Are-Zeroes mode that
treats all subnormal numbers as zeroes. Neither of these two modes
is compatible with the IEEE Standard 754 and both of them are
disabled by default [20]. Again similar to the x87 control word, the
configuration bits in the global MXCSR register are expected by the
ABI to be initialized to a predefined state 0x3f80 and preserved
across function calls [12, 26].
The performance gain of parallelized SSE vector floating-point
operations is leveraged by most modern compilers. For example gcc,
the GNU Compiler Collection, defaults to the SSE when compiling
for 64-bit targets [14]. Similarly, Microsoft Visual C++ defaults to
the SSE for modern 64-bit applications [31]. For compatibility with
32-bit and legacy systems, both compilers also provide options to
compile applications without the SSE and with all math operations
purely executed by the x87 FPU. In gcc, this compiler option is
called -mfpmath=387. At the same time, the x87 FPU remains fully
supported also for modern 64-bit applications and default compila-
tion options. One notable example is the C data type long double
which is defined as “at least as large as the float type, and it may be
larger” [14]. Some compilers as such aim to use the maximum avail-
able precision for this data type, which means utilizing the full 80-bit
precision of the x87 FPU instead of the 64-bit precision provided by
the SSE. For example, gcc will default to x87 instructions whenever
a long double variable is involved and will regularly switch data
between the FPU and SSE data register stacks if the SSE was utilized
by a support library such as libm. Furthermore, gcc provides an
experimental compilation option called -mfpmath=both to utilize a
Precision Control00b = Single prec (24 bits)01b = Reserved10b = Double prec (53 bits)11b = Extended prec (64 bits)Rounding Control00b = To nearest01b = Down10b = Up11b = Toward ZeroRCPC09101513123exceptionmasks45671211148RCexceptionmasks09101513123exceptionﬂags456712111481631Rounding ControlFaulty Point Unit: ABI Poisoning Attacks on Intel SGX
ACSAC 2020, December 7–11, 2020, Austin, USA
combination of SSE and x87 FPU for increased performance beyond
just using it for long double variables [14]. Overall, the x87 FPU,
while not being the default compilation target for all platforms any-