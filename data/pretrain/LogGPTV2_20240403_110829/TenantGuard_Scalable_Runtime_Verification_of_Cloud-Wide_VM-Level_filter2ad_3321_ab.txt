queries. Plotkin et al. [11] improve the response time of NoD
by exploiting the regularities existing in data centers lessen
the veriﬁcation overhead using bi-simulation and modal logic.
The experimental results reported in Section VI show that
TenantGuard outperforms those tools.
Congress [35], is an open project for OpenStack platforms.
It enforces policies expressed by tenants and then monitors
the state of the cloud to check its compliance. However,
reachability requires recursive Datalog queries [35], which
are difﬁcult
to solve and are not supported by Congress.
Therefore, we integrated TenantGuard into Congress in order
to check network isolation results provided by TenantGuard
against tenants’ security policies deﬁned in Congress (Section
V). Additionally, by integrating TenantGuard to Congress,
we augmented Congress capabilities to support reachability-
related policies as NoD without modifying Datalog-based
policy language provided by Congress.
III. MODELS
In this section, we describe the threat model and propose
a hierarchical model for cloud virtual networks.
A. Threat Model
Our threat model is based on two facts. First, our auditing
solution focuses on verifying the security properties speci-
ﬁed by cloud tenants, instead of detecting speciﬁc attacks
3
Network
Proposals
Methods
Features
Paral.
Incr.
NAT
All Pairs
Reach.
Physical vs
Virtual net.
Control vs
Data plane
Size of input
Phys.
Virt.
Ctr.
Data
VMs
Routers
Hassel [18]
NetPlumber [19]
Anteater [20]
Veriﬂow [21]
AP veriﬁer [22]
Libra [23]
ARC [24]
Batﬁsh [25]
ERA [26]
NoD [27]
Plotkin et al. [11]
Cloud Radar [28]
Probst et al. [29]
TenantGuard
Non-
Cloud
Cloud
•
•
•
•
•
•
•
Custom algorithms
Graph-theoretic
SAT solver
Graph-theoretic
Custom algorithms
Graph-theoretic
Graph-theoretic
SMT Solver
Custom Algorithms
SMT Solver
SMT Solver
Graph-theoretic
Graph-theoretic
Custom algorithms
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
•
-
-
-
-
-
-
-
-
-
100k
100k
30k
23
100k
26
52
178
172
58
11,260
few tens
21
over 1,600
-
-
-
-
Verif.
Time
-
60
-
-
-
-
-
86,400
-
471,600
7,200
-
-
Rules
756.5k
143k
1,627
5,000k
3,605
2,650k
-
-
-
820k
820k
-
-
1,200
850k
1,055.88
TABLE I.
COMPARING FEATURES AND PERFORMANCE OF DIFFERENT EXISTING SOLUTIONS WITH TENANTGUARD. THE SYMBOL (•) INDICATES THAT
THE PROPOSAL OFFERS THE CORRESPONDING FEATURE. ALL VERIFICATION TIME MEASUREMENTS ARE REPORTED IN SECONDS.
or vulnerabilities (which is the responsibility of IDSes or
vulnerability scanners). Second, the correctness of our auditing
results depends on correct input data extracted from logs and
databases. Since an attack may or may not violate the security
properties speciﬁed by the tenant, and logs or databases may
potentially be tampered with by attackers, our auditing results
can only signal an attack in some cases. Speciﬁcally, the
in-scope threats of our solution are attacks that violate the
speciﬁed security properties and at the same time lead to
logged events. The out-of-scope threats include attacks that
do not violate the speciﬁed security properties, attacks not
captured in the logs or databases, and attacks through which
the attackers may remove or tamper with their own logged
events. We assume each cloud tenant has deﬁned its own
security policies on network isolation in terms of reachability
between VMs. We focus on the virtual network layer (layer
3) in this paper, and our work is complementary to existing
solutions at other layers (e.g., veriﬁcation in physical networks
or isolation w.r.t. to covert channels caused by co-residency;
more details are given in Section II). Finally, we assume the
veriﬁcation results (e.g., which VMs may connect to a tenant)
do not disclose sensitive information about other tenants and
regard potential privacy issues as a future work.
B. Virtual Network Model
Here, we deﬁne a hierarchical model to capture various
components of a virtual network and their logical relationships.
The following example provides intuitions on the model we
propose.
Example 1: Figure 2 illustrates an instance of our model
that captures the virtual networks of tenants Alice and Bob,
following our example shown in Figure 1. Each tenant can
create several subnets (e.g., SN_A1 and SN_A2 of Alice). A
subnet (e.g., SN_A2) is generally associated with a CIDR (e.g.,
10.0.0.0/24) and a set of forwarding rules (host routes)
specifying the default gateway (e.g., router interface IF_A11).
A newly created VM (e.g., VM_A1, not shown here) will be
attached to a virtual port (e.g., VP_A1) on a subnet (e.g.,
SN_A2) and associated with a private IP (e.g., 10.0.0.12).
Ingress and egress security groups are associated with the
virtual ports of VMs and act as virtual ﬁrewalls. Routers
(e.g., R_A1) interconnect different subnets to route intra-tenant
(e.g., between SN_A2 and SN_A3) and inter-tenant trafﬁc
and connect them to external networks (e.g., ExtNet_1) via
router gateways (e.g., RG_A1). Several interconnected external
networks (not shown in the ﬁgure) may exist, where each (e.g.,
ExtNet_1) can have a routable public IP address block (e.g.,
1.10.0.0/22). For inter-tenant trafﬁc, at least one router
from each tenant must be involved and the trafﬁc generally
traverses external networks. For any communication going
through external networks, a public IP address is allocated per
VM (e.g., VP_A1.Public_IP=1.10.0.75) depending on
which external network (e.g., ExtNet_1) connects to the
subnet of the VM (e.g., SN_A2). The mapping between private
and public IP addresses is maintained through NAT rules at
routers.
Ext. Net
1.10.0.0/22
IP: 1.10.0.2
RG_A1
IP: 1.10.0.3
NAT rules 
Routing rules
R_A2
R_A1
R_A3
RG_B1
R_B1
IF_A21
IF_A22
IF_A11
IF_A12
IF_A31
IF_B11
IF_B12
Host routes
SN_A1
SN_A2
10.0.2.0/24
10.0.0.0/24
SN_A3
10.0.1.0/24
SN_B1
19.0.1.0/24
SN_B2
19.0.0.0/24
Security groups
VP_A1
VP_A2
VP_B1
VP_B2
Private IP:10.0.0.12
Public IP:1.10.0.75 
Private IP:10.0.1.22
Public IP:1.10.1.9
Private IP:19.0.1.15
Public IP:1.10.0.8
Private IP:19.0.0.30
Public IP:1.10.1.12
Tenant Alice
Tenant Bob
External 
Network
Router 
Gateway
Router 
Router 
Interface
Subnet
VM port
Edge
Forwarding path
Fig. 2. An Example of the Virtual Network Model
More generally, Figure 2 may be abstracted as an undi-
rected graph with typed nodes, as deﬁned in the following.
Deﬁnition 1: A virtual network model is an undirected
graph G = (V, E), where V is a set of typed nodes
each of which is associated with a set of attributes s =
{id, tenant id, P ublic IP, P rivate IP, type, rules}, where
type ∈ {vm port, subnet, v router, v router if, v router
gw , ext net}, representing VM port, subnet, router, router
interface, router gateway, and external network, respectively.
E is a set of undirected edges representing the logical
connectivity among those network components.
A virtual network model G can usually be decomposed
into a set of maximally connected sub-graphs [36] (denoted
by Ci = (Vi, Ei) in later discussions) by removing all
edges between router gateways and external networks. Those
subgraphs represent different tenants’ private virtual networks,
which are connected to external networks via the removed
4
edges. We will leverage this characteristic later in Section IV
to tackle the complexity issues.
C. Forwarding and Filtering Model
In the following, we ﬁrst model how packets may traverse
a virtual network, and then formalize the network isolation
property that we aim to verify.
Forwarding and Filtering. Network packets traversing virtual
networks are typically governed by both ﬁltering (security
group rules) and forwarding (routing) rules, as demonstrated
in the following example.
Example 2: Figure 2 shows a dotted line representing the
sequence of edges traversed by a set of packets from VM_A1
to VM_B2, which represents the forwarding path controlled
by different nodes between both corresponding virtual ports.
Packets sent to the virtual port (e.g., VP_A1) are processed
by the egress security group rules then either dropped or
forwarded to the subnet node SN_A2. According to host
routes associated with SN_A2 and the destination address
(i.e., VM_B2.Public_IP), packets are either dropped or
forwarded to the default gateway, which is the router interface
IF_A11 of the router R_A1. At the router node, packets’
headers are matched with the routing rules, and are either for-
warded to RG_A1 and then to the associated external network
ExtNet_1, or dropped. Packets destined to VM_B2 are then