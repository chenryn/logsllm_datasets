### Queries and Improvements

Plotkin et al. [11] enhance the response time of NoD by leveraging the regularities present in data centers, thereby reducing verification overhead through the use of bi-simulation and modal logic. The experimental results presented in Section VI demonstrate that TenantGuard outperforms these tools.

Congress [35] is an open-source project for OpenStack platforms that enforces policies defined by tenants and monitors the cloud's state to ensure compliance. However, reachability requires recursive Datalog queries [35], which are challenging to solve and not supported by Congress. To address this, we integrated TenantGuard into Congress to verify network isolation results provided by TenantGuard against security policies defined in Congress (Section V). This integration also enhances Congress's capabilities to support reachability-related policies without altering the Datalog-based policy language provided by Congress.

### Models

#### A. Threat Model

Our threat model is based on two key points:
1. Our auditing solution focuses on verifying the security properties specified by cloud tenants rather than detecting specific attacks or vulnerabilities, which are typically the responsibility of Intrusion Detection Systems (IDS) or vulnerability scanners.
2. The accuracy of our auditing results depends on the correctness of the input data extracted from logs and databases. Since an attack may or may not violate the specified security properties, and logs or databases can be tampered with, our auditing results can only indicate an attack in some cases.

The in-scope threats for our solution include attacks that violate the specified security properties and result in logged events. Out-of-scope threats include attacks that do not violate the specified security properties, attacks not captured in logs or databases, and attacks where attackers remove or tamper with their own logged events. We assume each cloud tenant has defined its own security policies for network isolation in terms of reachability between VMs. This paper focuses on the virtual network layer (Layer 3), and our work complements existing solutions at other layers (e.g., verification in physical networks or isolation regarding covert channels caused by co-residency; more details are provided in Section II). Finally, we assume that the verification results (e.g., which VMs can connect to a tenant) do not disclose sensitive information about other tenants, and we consider potential privacy issues as future work.

#### B. Virtual Network Model

We define a hierarchical model to capture various components of a virtual network and their logical relationships. The following example provides an intuitive understanding of the proposed model.

**Example 1:**
Figure 2 illustrates an instance of our model, capturing the virtual networks of tenants Alice and Bob. Each tenant can create multiple subnets (e.g., SN_A1 and SN_A2 for Alice). A subnet (e.g., SN_A2) is generally associated with a CIDR (e.g., 10.0.0.0/24) and a set of forwarding rules (host routes) specifying the default gateway (e.g., router interface IF_A11). A newly created VM (e.g., VM_A1) will be attached to a virtual port (e.g., VP_A1) on a subnet (e.g., SN_A2) and associated with a private IP (e.g., 10.0.0.12). Ingress and egress security groups are associated with the virtual ports of VMs and act as virtual firewalls. Routers (e.g., R_A1) interconnect different subnets to route intra-tenant (e.g., between SN_A2 and SN_A3) and inter-tenant traffic and connect them to external networks (e.g., ExtNet_1) via router gateways (e.g., RG_A1). Several interconnected external networks (not shown in the figure) may exist, where each (e.g., ExtNet_1) can have a routable public IP address block (e.g., 1.10.0.0/22). For inter-tenant traffic, at least one router from each tenant must be involved, and the traffic generally traverses external networks. For any communication going through external networks, a public IP address is allocated per VM (e.g., VP_A1.Public_IP=1.10.0.75) depending on which external network (e.g., ExtNet_1) connects to the subnet of the VM (e.g., SN_A2). The mapping between private and public IP addresses is maintained through NAT rules at routers.

**General Definition:**
Figure 2 can be abstracted as an undirected graph with typed nodes, as defined below:

**Definition 1:**
A virtual network model is an undirected graph \( G = (V, E) \), where \( V \) is a set of typed nodes, each associated with a set of attributes \( s = \{id, tenant id, Public IP, Private IP, type, rules\} \), where \( type \in \{vm port, subnet, v router, v router if, v router gw, ext net\} \), representing VM port, subnet, router, router interface, router gateway, and external network, respectively. \( E \) is a set of undirected edges representing the logical connectivity among these network components.

A virtual network model \( G \) can usually be decomposed into a set of maximally connected sub-graphs [36] (denoted by \( C_i = (V_i, E_i) \)) by removing all edges between router gateways and external networks. These subgraphs represent different tenants' private virtual networks, which are connected to external networks via the removed edges. We will leverage this characteristic in Section IV to address complexity issues.

#### C. Forwarding and Filtering Model

In the following, we first model how packets traverse a virtual network and then formalize the network isolation property we aim to verify.

**Forwarding and Filtering:**
Network packets traversing virtual networks are governed by both filtering (security group rules) and forwarding (routing) rules, as demonstrated in the following example.

**Example 2:**
Figure 2 shows a dotted line representing the sequence of edges traversed by a set of packets from VM_A1 to VM_B2, indicating the forwarding path controlled by different nodes between the corresponding virtual ports. Packets sent to the virtual port (e.g., VP_A1) are processed by the egress security group rules, then either dropped or forwarded to the subnet node SN_A2. According to host routes associated with SN_A2 and the destination address (i.e., VM_B2.Public_IP), packets are either dropped or forwarded to the default gateway, which is the router interface IF_A11 of the router R_A1. At the router node, packet headers are matched with routing rules and either forwarded to RG_A1 and then to the associated external network ExtNet_1, or dropped. Packets destined for VM_B2 are then...