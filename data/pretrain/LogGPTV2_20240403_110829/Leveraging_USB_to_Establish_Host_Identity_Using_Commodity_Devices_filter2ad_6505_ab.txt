### Transactions Involving Setup and Out/Status

### III. Methodology

This work is inspired by the advent of non-intrusive, high-speed USB protocol analyzers. These tools passively intercept individual packets to reconstruct USB traces at the logical layer. Developers can use this information to detect errors at different levels of the USB stack and measure performance [22]. However, these devices are expensive, often costing thousands of dollars. In this study, we used a USB analyzer weighing 1.65 pounds with dimensions of 6x5x2.5 inches, which limits its portability and adoptability. To inspect the results, users must plug the USB analyzer into another PC with specialized software. Additionally, collecting large numbers of USB traces is challenging due to the need for manual unplugging and reinsertion of the device.

This section is structured as follows:
- **Section III-A**: Presents a threat model for our scheme.
- **Section III-B**: Compares the performance of an industry-class USB protocol analyzer with our Android-based device.
- **Section III-C**: Details our data collection procedure.
- **Section III-D**: Discusses the contents of our collected data corpus.
- **Section III-E**: Describes our feature extraction procedures.
- **Section III-F**: Offers insights into how these features can be used to identify hosts.

#### A. Threat Model

We assume that an adversary has full control over the host system's software and kernel. This allows the adversary to modify the USB device driver and alter USB messages returned from the host. The adversary can also relay messages to a different computer through a network interface, bypassing the LPC bus where the TPM resides and other peripherals. We assume the attacker has physical access to the host machine and can tamper with it. However, we assume that the initial measurements are taken on an uncompromised machine. We do not consider the use of wireless USB in our system. Further analysis of the security and potential limitations of the scheme is provided in Section VI-B.

#### B. Hardware USB Analyzer

Our approach to machine fingerprinting leverages the ubiquity of lightweight devices with USB interfaces. Many people carry multiple USB devices daily, such as smartphones and USB flash drives. Some USB drives, like Imation’s IronKey [23], even have on-board CPUs for additional security and usability features.

To establish a ground truth for USB observation, we used the Ellisys USB Explorer 200 [22]. Figure 3 illustrates the ideal vantage point of the Ellisys explorer in the USB communications model. By physically intercepting packets, the Ellisys analyzer can obtain highly precise timing information and perfectly reconstruct traces. However, this comes at the cost of usability. Our own USB collection mechanism, an Android smartphone application, intercepts messages at the device controller driver level. By routing our device through the USB analyzer, we confirmed the correct behavior of our Android application. Using Ellisys software, we mapped the timing data of our observed USB enumeration recordings to the actual serial bus activity (Table I).

#### C. Smartphone Collection

To avoid using costly and exotic hardware, we developed a USB analyzer for Android smartphones. The timing data measurable from the device's user space USB function was too coarse-grained, so we accessed kernel memory by rooting the phone. We used kprobe modules to dynamically alter `musb gadget ep0.c` (forward to driver, `musb g ep0 irq`) and `android.c` (android setup). With these modifications, we captured individual IRQs with microsecond timing and automated the process of recording multiple traces on a target host. This allowed us to collect the transactions that constitute the full enumeration process. While rooting the device is a limitation, the installation of aftermarket open-source firmware for Android devices is now straightforward thanks to communities like CyanogenMod [24]. After data collection, the kprobe modules are uninstalled, allowing the phone to resume standard USB behaviors.

To ensure consistent behavior across various hosts and devices, we collected timestamps from all transactions' IRQs but only the data payloads of setup IRQs. Logging every IRQ required excessive memory copying, causing USB enumeration to fail and the kernel to panic. The setup transaction dictates the contents of subsequent transactions within the control transfer, so capturing setup transaction payloads alone provides sufficient information. We call the combination of transaction timestamps and content captured during enumeration a USB Trace.

Kernel-level buffering occurred whenever an IRQ's timestamp was logged, resulting in an average delay of 120 µs compared to the serial bus activity observed via Ellisys. For example, the delay between the first and second IRQ in a control transfer showed up to a 150 µs delay, a 147 µs discrepancy. Fortunately, at the end of each control transfer, there is a pause long enough to clear the buffer, resynchronizing with the serial bus. This gives us accurate timing information for the setup transaction of every control transfer (Table I).

Using the Android USB Analyzer application (detailed in Section VI-A), we automated the collection of USB traces. The data collection process was as follows:
1. Record target machine attributes in the Android USB Analyzer interface (e.g., serial number, OS, manufacturer).
2. Hard reset the target machine.
3. Disconnect other USB devices from the target machine.
4. Plug the phone into the target machine.
5. Allow the Android USB Analyzer application to automatically collect the specified number of USB enumerations.

This procedure aimed to eliminate additional variables that might influence the timing results. Determining the robustness of the approach under load or identifying appropriate periods of machine quiescence is future work.

We chose to develop on Android due to its widespread adoption. However, our methodology would be similarly effective using other collection devices. For example, in preliminary tests, we collected data using a Gumstix device [10] running a modified Linux kernel. Using the Gumstix data, we identified machines by OS and model with comparable accuracy to our Android data corpus (see Section IV-B).

#### D. Data Corpus

Following the described procedure, we performed data collection on a variety of machines across a university campus. In addition to 8 student-accessible computer labs, we obtained decommissioned machines from the university’s IT department. Our dataset includes thousands of traces collected from 6 Linux, 66 macOS, and 182 Windows hosts. The corpus is comprehensively described in Table II. We collected at least 50 enumeration traces from each machine, and some machines were measured multiple times, resulting in a total of 32,150 measurements.

Figure 4 shows timing data for selected features by operating system.