benchmarksql=#createforeigntablecustomer(xint,yint);
CREATEFOREIGNTABLE
benchmarksql=#select*fromcustomer;
x|y
---+---
(0rows)
(6) 将源转储数据导入到新MOT中。
$gs_restore-C-dbenchmarksqlcustomer.dump-p16000
restoreoperationsuccessful
totaltime:24 ms
Checkthatthedatawasimportedsuccessfully.
benchmarksql=#select*fromcustomer;
x|y
---+---
1|2
3|4
(2rows)
benchmarksql=#\d
Listofrelations
Schema| Name | Type |Owner | Storage
--------+-------------+---------------+--------+----------------------------------
public|customer |foreigntable|aharon|
public|customer_bk|table |aharon|{orientation=row,compression=no}
(2rows)
13.2.4.5 查询原生编译
MOT 的另一个特性是，在预编译的完整查询需要执行之前，能够以原生格式（使用
PREPARE语句）准备并解析这些查询。
这种原生格式方便后续更有效地执行（使用EXECUTE命令）。这种执行类型速度要快
得多，因为原生格式在执行期间绕过多个数据库处理层，从而获得更好的性能。
这种分工避免了重复的解析分析操作。查询和事务语句可以交互执行。此功能有时称为
即时（Just-In-Time，JIT）查询编译。
查询编译：PREPARE语句
南大通用数据技术股份有限公司
467
GBase 8s V8.8开发者手册
若要使用MOT的原生查询编译，请在执行查询之前调用PREPARE客户端语句。MOT
将预编译查询和（或）从缓存预加载先前预编译的代码。
下面是SQL中PREPARE语法的示例：
PREPAREname[(data_type[,...])]ASstatement
PREPARE在数据库服务器中创建一个预处理语句，该语句是一个可用于优化性能的服
务器端对象。
运行命令
发出EXECUTE命令时，将解析、分析、重写和执行预处理语句。这种分工避免了重复
的解析分析操作，同时使执行计划依赖于特定的设置值。
下面是在Java应用程序中调用PREPARE和EXECUTE语句的示例。
conn=DriverManager.getConnection(connectionUrl,connectionUser,connectionPassword);
//Example1:PREPAREwithoutbindsettings
Stringquery="SELECT*FROMgetusers";
PreparedStatementprepStmt1=conn.prepareStatement(query);
ResultSetrs1=pstatement.executeQuery())
while(rs1.next()){…}
//Example2:PREPAREwithbindsettings
StringsqlStmt="SELECT*FROMemployeeswherefirst_name=?andlast_namelike?";
PreparedStatementprepStmt2=conn.prepareStatement(sqlStmt);
prepStmt2.setString(1,"Mark");//firstname “Mark”
prepStmt2.setString(2,"%n%");//lastnamecontainsaletter “n”
ResultSetrs2=prepStmt2.executeQuery())
while(rs2.next()){…}
MOT编译支持的特性和不支持的特性见下文。
轻量执行支持的查询
以下查询类型适合轻量执行：
 简单点查询
 SELECT(includingSELECTforUPDATE)
 UPDATE
 DELETE
 INSERT查询
南大通用数据技术股份有限公司
468
GBase 8s V8.8开发者手册
 引用主键的完整前缀的范围UPDATE查询
 引用主键的完整前缀的范围SELECT查询
 JOIN查询，其中一部分或两部分重叠为点查询
 引用每个连接表中主键的完整前缀的JOIN查询
轻量执行不支持的查询
任何特殊的查询属性都不适用于轻量执行。特别是如果以下条件中的任何一项适用，则
该查询不适合轻量执行。有关更多信息，请参阅“原生编译和轻量执行不支持的查询”。
需要强调一点，如果查询语句不适用原生编译和轻量执行，不向客户端报告错误，查询
仍以正常和规范的方式执行。
有关MOT原生编译功能的详细信息，请参阅 查询原生编译或查询原生编译（JIT）的
有关内容。
13.2.4.6 重试中止事务
在乐观并发控制（OCC）中，在COMMIT阶段前的事务期间（使用任何隔离级别）不
会对记录进行锁定。这是一个能显著提高性能的强大优势。它的缺点是，如果另一个会话尝
试更新相同的记录，则更新可能会失败。所以必须中止整个事务。这些所谓的更新冲突是由
MOT在提交时通过版本检查机制检测到的。
使用悲观并发控制的引擎，如标准 Postgres 和 GBase 8s 基于磁盘的表，当使用
SERIALIZABLE或REPEATABLE-READ隔离级别时，也会发生类似的异常中止。
这种更新冲突在常见的OLTP场景中非常少见，在使用MOT时尤其少见。但是，由于
仍有可能发生这种情况，开发人员应该考虑使用事务重试代码来解决此问题。
下面以多个会话同时尝试更新同一个表为例，说明如何重试表命令。有关更多详细信息，
请参阅“OCC与2PL的区别举例”部分。下面以TPC-C支付事务为例。
intcommitAborts=0;
while(commitAborts9
南大通用数据技术股份有限公司
473
GBase 8s V8.8开发者手册
 在键大小>256的表上创建索引
键大小包括以字节为单位的列大小+列附加大小，这是维护索引所需的开销。下表列出
了不同列类型的列附加大小。
此外，如果索引不是唯一的，额外需要8字节。
下面是伪代码计算键大小：
keySize=0;
foreach(columninindex){
keySize+=(columnSize+columnAddSize);
}
if(indexisnon_unique){
keySize+=8;
}
列类型 列大小 列附加大小
varchar N 4
tinyint 1 1
smallint 2 1
int 4 1
longint 8 1
float 4 2
double 8 3
上表中未指定的类型，列附加大小为零（例如时间戳）。
不支持的DML
 Mergeinto
 Selectinto
 Locktable
 Copyfromtable
原生编译和轻量执行不支持的查询
南大通用数据技术股份有限公司
474
GBase 8s V8.8开发者手册
 查询涉及两个以上的表
 查询有以下任何一个情况：
 非原生类型的聚合
 窗口功能
 子查询子链接
 Distinct-ON修饰语（distinct子句来自DISTINCTON）
 递归（已指定WITHRECURSIVE）
 修改CTE（WITH中有INSERT/UPDATE/DELETE）
以下子句不支持轻量执行：
 Returninglist
 GroupByclause
 Groupingsets
 Havingclause
 Windowsclause
 Distinctclause
 Sortclausethatdoesnotconformtonativeindexorder
 Setoperations
 Constraintdependencies