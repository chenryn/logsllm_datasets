      * [木马查杀](#木马查杀)
      * [计划任务](#计划任务-1)
   * [ISO27000和等保(重点等保)](#iso27000和等保重点等保)
      * [说一下ISO27000](#说一下iso27000)
      * [说一下等级保护制度](#说一下等级保护制度)
      * [差异](#差异)
      * [共性](#共性)
   * [算法](#算法)
      * [排序算法：快排 二分 冒泡](#排序算法快排-二分-冒泡)
   * [LDAP注入](#ldap注入)
> https://zhuanlan.zhihu.com/p/25582026
> 给你一个网站你是如何来渗透测试的? - 杨文的文章 - 知乎 http://zhuanlan.zhihu.com/p/25605198
# 技术面试问题
## CTF
### 说一个印象深刻的CTF的题目
- Padding Oracle->CBC->密码学(RSA/AES/DSA/SM)
- CRC32
- 反序列化漏洞
#### sql二次注入
第一次进行数据库插入数据的时候，仅仅只是使用了 `addslashes` 或者是借助 `get_magic_quotes_gpc` 对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身还是脏数据。
在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。
交友网站，填写年龄处是一个注入点，页面会显示出与你相同年龄的用户有几个。使用and 1=1确定注入点，用order by探测列数，union select探测输出点是第几列，
1. 暴库 `group_concat(schema_name) from information_schema.schemata`
2. 暴表 `group_concat(table_name) from information_schema.schemata where table_schema='hhh'`
3. 获取数据 `concat(flag) from flag`
修复：在从数据库或文件中取数据的时候，也要进行转义或者过滤。
## Python
### 爬虫模块、框架、反爬虫机制（IP->代理池、验证码破解、UA）
### 并发(多线程、线程池、协程、三个程之间的区别)
进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。以前进程既是资源分配也是调度的最小单位，后来为了更合理的使用cpu(实际上是cpu性能越来越好)，才将资源分配和调度分开，就有了线程。线程是建立在进程的基础上的一次程序运行单位。
### 常用的标准库
- functools
    -
- itertools 迭代器
    - count/cycle/repeat
    - chain
    - groupby 把迭代器中相邻的重复元素挑出来放在一起
- concurrent.futures
    - ThreadPoolExecutor
- hashlib
    - md5
    - sha1
    - sha256
    - sha512
- logging 
- sys.argv argparse读取命令行参数
- pickle 序列化工具
- re 正则
- collections 多种数据类型
    - namedtuple
    - OrderedDict
    - Counter
- os 系统相关的函数
### DJANGO和FLASK区别和使用
### ORM
### python安全工具编写/源码阅读
### 证明能力
- python安全工具开发
- python项目，记一下技术细节
## 密码学
### RSA
### DES
### AES
### 国内SM系列
## 风险评估
### 流程
### 三要素
- 资产：资产价值
- 威胁：威胁主体、影响对象、出现频率、动机等
- 脆弱性：资产弱点的严重程度‘
## 代码审计
### Fority SCA审计JAVA代码
fortify用到什么模块? 过滤器 自定义规则 生成报告
### Seay审计PHP代码
### 源码阅读
## 应急响应具体流程
### 模型
> https://zhuanlan.zhihu.com/p/26542790
PDCERF模型
- Prepare（准备）：准备用来检测的工具和人
- Detection（检测）：紧急事件监测：包括防火墙、系统、web服务器、IDS/WAF/SIEM中的日志，不正常或者是执行了越权操作的用户，甚至还有管理员的报告
- Containment（抑制）：首先先控制受害范围，不要让攻击的影响继续蔓延到其他的IT资产和业务环境，切记不要直接一股脑的投入全部精力到封堵后门。紧接着要做的是去寻找根源原因，彻底解决，封堵攻击源，把业务恢复到更张水平
- Eradication（根除）
- Recover（恢复）
- Follow-Up（跟踪）：根据各种监控去确定没有其他的攻击行为和攻击向量，紧接着就是开会反省此次事件，写报告，持续改进工作流程和工作缓解
### 实例
#### DDOS
##### DDOS是什么
分布式拒绝服务攻击（DDoS）是目前黑客经常采用而难以防范的攻击手段。DoS的攻击方式有很多种，最基本的DoS攻击就是利用合理的服务请求来占用过多的服务资源，从而使合法用户无法得到服务的响应。
DDOS攻击手段是在传统的DOS攻击基础之上产生的一类攻击方式。单一的DOS攻击一般是采用一对一方式的，当攻击目标CPU速度低、内存小或者网络带宽小等等各项性能指标不高它的效果是明显的。随着计算机与网络技术的发展，计算机的处理能力迅速增长，内存大大增加，同时也出现了千兆级别的网络，这使得DOS攻击的困难程度加大了——目标对恶意攻击包的“消化能力”加强了不少，例如你的攻击软件每秒钟可以发送3,000个攻击包，但我的主机与网络带宽每秒钟可以处理10,000个攻击包，这样一来攻击就不会产生什么效果这时侯分布式的拒绝服务攻击手段（DDOS）就应运而生了。
如果说计算机与网络的处理能力加大了10倍，用一台攻击机来攻击不再能起作用的话，攻击者使用10台攻击机同时攻击呢？用100台呢？DDOS就是利用更多的傀儡机来发起进攻，以比从前更大的规模来进攻受害者。通常，被攻击的服务器有以下症状：1、被攻击主机上有大量等待的TCP连接；2、网络中充斥着大量的无用的数据包，源地址为假；3、制造高流量无用数据，造成网络拥塞，使受害主机无法正常和外界通讯；4、利用受害主机提供的服务或传输协议上的缺陷，反复高速的发出特定的服务请求，使受害主机无法及时处理所有正常请求；5、严重时会造成系统死机
#### 实例
我司网站www.catroot.cn的IP  223.223.223.223 被人DDOS攻击，流量达9G，并且机房流量清洗无效，所以把223.223.223.223封停，导致网站不能访问，请作出紧急预案。
> https://www.zhihu.com/question/19581905
- 网络设备设施
    - 拼带宽，加大带宽，但是成本太高
    - 使用硬件防火墙
    - 选用高性能设备
- 抗D思想和方案
    - 负载均衡
    - 花钱买流量清洗服务
    - CDN：web层，比如cc攻击
    - 分布式集群防御
    - 高防：防大部分攻击，udp、大型的cc攻击
- 预防为主
    - 系统漏洞
    - 系统资源优化：
    - 过滤不必要的服务和端口
    - 限制特定流量：检查访问来源做适当限制
#### 主机被入侵
1. 优先提取易消失的数据
    - 内存信息 `free -m` `htop
    - 系统进程 `ps top netstat ss`
    - 路由信息 `tracert`
2. `ifconfig`查看网卡流量，检查网卡的发送、接收数据情况
2. `NetHogs`实时监控带宽占用状况
2. 查看Linux系统日志 `/var/log`
4. `ClamAV`杀毒软件
## 渗透测试流程相关
### 渗透测试流程
1. 项目访谈
2. 信息收集：whois、网站源IP、旁站、C段网站、服务器系统版本、容器版本、程序版本、数据库类型、二级域名、防火墙、维护者信息
4. 漏洞扫描：Nessus, AWVS
5. 手动挖掘：逻辑漏洞
6. 验证漏洞
7. 修复建议
8. （如果有）基线检查/复验漏洞
9. 输出报告
    - 概述
    - 测试基本信息
        - 测试范围
        - 测试时间
        - 测试任务
        - 测试过程
    - 信息安全风险综合分析
        - 整体风险分析
        - 风险影响分析
        - 系统安全分析
        - 安全漏洞列表
    - 解决方案建议
    - 复测报告
### 渗透测试项目
用七八句话概括一下发现、验证漏洞细节、扮演角色、具体工作。
如果技术人员有兴趣会继续问，接着再引导到别处，让自己多说说细节。
### 渗透测试具体实施
### 17年OWASP TOP10
- 注入:sql,nosql,ldap,os
- 失效的身份认证: 
- 敏感信息泄漏
- XXE XML外部实体
- 失效的访问控制：管理页面仅能管理员权限访问；越权漏洞
- 安全配置错误：页面错误信息，默认密码，使用已知漏洞的应用
- XSS
- 不安全的反序列化：一个PHP论坛使用PHP对象序列化来保存一个cookie，用户修改cookie即可伪造管理员登陆
- 使用含有已知漏洞的组件：比如structs2框架
- 不足的日志记录和监控：代码被删除，无法溯源；记录登陆失败次数；监控问题没被管理员响应
### 常见的Web安全漏洞