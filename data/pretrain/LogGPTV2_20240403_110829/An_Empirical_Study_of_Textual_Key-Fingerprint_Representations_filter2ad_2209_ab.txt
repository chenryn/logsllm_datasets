with an additional whitespace after 5 blocks (cf. Fig-
ure 1b), e. g.,
73EE 2314 F65F A92E C239
0D3A 718C 0701 0001 2282
Other implementations, such as OpenKeychain, deviate
only slightly, for example by displaying them lowercase
or with colored letters to ease comparison but still pro-
vide compatibility with GnuPG.
SSH ﬁngerprint strings, as deﬁned in RFC 4716 and
RFC 4253 [15, 44], are calculated by
Hex(MD5(Base64(algo(cid:31) pk)))
where algo is a string indicating the algorithm, for ex-
ample “ssh-rsa”. Fingerprints are displayed as “hexadec-
imal with lowercase letters and separated by colons” [15]
(cf. Figure 1a), e. g.,
6f:85:66:da:e3:7a:02:c6:5e:62:3f:36:b7:d9:b4:2c
3.2.2 Base32
Base32 uses the Latin alphabet (A-Z) without the let-
ters O and I (due to the confusion with numbers 1 and
0). There is no difference between lower-case letters and
upper-case letters. In addition, a special padding char-
acter “=” is used, since the conversion algorithm pro-
cesses blocks of 40 bit (5 Byte) in size. The source string
is padded with zeroes to achieve a compatible length
and sections containing only zeroes are represented by
“=” [20, 21].
The ZRTP key exchange scheme for real-time ap-
plications is based on a Difﬁe-Hellman key exchange
extended by a preceding hash commitment that allows
for very short ﬁngerprints, called Short Authentication
196  25th USENIX Security Symposium 
USENIX Association
4
Strings (SAS) without compromising security [45]. The
Base32 encoding used in ZRTP uses a special alphabet
to produce strings that are easier to read out loud. VoIP
applications such as CSipSimple4 use this Base32 op-
tion, usually named “B32” inside the protocol. Here, the
leftmost 20 bits of the 32 bit SAS value are encoded as
Base32. , e. g.,
5 e m g
3.2.3 Base64
There exist a number of speciﬁcations for encoding data
into the Base64 format, which uses the Latin alphabet in
both lower-case and upper-case (a-z, A-Z) as well as the
digits 0-9 and the characters “+”, “/”, and “=” to repre-
sent text data. Again, the character “=” is used to encode
padded input [20]. Starting with OpenSSH 6.8 a new
ﬁngerprint format has been introduced that uses SHA-
256 instead of MD5 and Base64 instead of hexadecimal
representation. In addition the utilized hash algorithm is
prepended, e. g.,
SHA256:mVPwvezndPv/ARoIadVY98vAC0g+P/5633yTC4d/wXE
3.3 Unrelated Words
Instead of (alpha)numeric representation, ﬁngerprints
can be mapped to lists of words. Here, the binary rep-
resentation is split into chunks, where each possible
value of a chunk is assigned to a word in a dictionary.
To increase readability, such a dictionary usually con-
tains no pronouns, articles, prepositions and such. Word
lists, such as the PGP Word List [22] and the Basic En-
glish word list compiled by K.C. Ogden [31], are pri-
marily used for veriﬁcation mechanisms based on SAS.
Key-Fingerprints represented by words have been imple-
mented for VoIP applications based on the ZRTP key
exchange and other real-time communication protocols.
Examples are Signal5, and the messaging and contact
sharing application SafeSlinger [14] (cf. Figure 2). Be-
sides their use in SAS based mechanisms, miniLock and
Peerio utilize unrelated words for passphrase generation.
An example for a modern VoIP implementation that
utilizes ZRTP for key exchange over Secure Real-Time
Transport Protocol (SRTP) is Signal’s private calling fea-
ture, previously distributed as Redphone. The devel-
opers chose to implement only a speciﬁc subset of the
ZRTP speciﬁcation [45], namely Difﬁe-Hellmann key
exchange via P-256 elliptic curves using “B256” SASs,
i. e., Base256 encoding that maps to the leftmost 16 bits
of the 32 bit SAS values to the previously introduced
PGP Word List [22], e. g.,
4https://github.com/r3gis3r/CSipSimple
5https://github.com/WhisperSystems/Signal-Android
(a) SafeSlinger: List of words
(b) OpenKeychain: Sentences
Figure 2: Language-based ﬁngerprint representations
quota holiness
The messaging application SafeSlinger is based on
a Group Difﬁe-Hellman protocol [14] implementing a
key veriﬁcation with SASs for up to 10 participants. In
SafeSlinger the leftmost 24 bits of a SHA-1 hash is used
to select 3 words from the PGP Word List, e. g.,
suspense unify talon.
Besides this, two other 3 word triples are selected to force
users to make a selection before proceeding (cf. Fig-
ure 2a).
In contrast to Signal and SafeSlinger, Peerio (based
on miniLock) does not use any SAS based veriﬁcation
mechanism.
It uses pictures for veriﬁcation and word
lists for code generation. The word list is generated from
most occurring words in movie subtitles. Besides key
veriﬁcation, these are also used to generate so called
passphrases, which are used to derive their ECC private
keys.
3.4 Generated Sentences
The words from the previous dictionaries can also be
used to generate syntactically correct sentences as pro-
posed by previous research: Goodrich et al. proposed
to use a “syntactically-correct English-like sentence”
representation for exchanging hash-derived ﬁngerprints
over audio by using text-to-speech (TTS) [16]. Michael
Rogers et al.
implemented a simple deterministic sen-
tence generator [16, 38]6 Though the sentences from
both approaches rarely make sense in a semantic fash-
ion, they are syntactically correct and are claimed to pro-
6https://github.com/akwizgran/basic-english
USENIX Association  
25th USENIX Security Symposium  197
5
vide good memorability. In our study, we used Michael
Roger’s approach for our sentence generator.
We implemented this method for PGP ﬁngerprints
in OpenKeychain 3.67 (cf. Figure 2b). To the best of
the authors’ knowledge, to this date, it is the ﬁrst inte-
gration of key veriﬁcation via sentences although other
projects are considering to change their ﬁngerprint en-
coding scheme [38, 36].
4 Methodology
In order to evaluate the effect and perception of the dif-
ferent textual key-ﬁngerprint representations, we con-
ducted an online study on Amazon’s Mechanical Turk
(MTurk) crowdsourcing service. Our Universities do not
have an IRB, but the study conformed to the strict data
protection law of Germany and informed consent was
gathered from all participants. Our online study is di-
vided into two parts: The experiment for performance
evaluation followed by a survey extracting self-reported
data from users. The survey ended with demographic
questions.
4.1 Security Assumptions
In this section, we deﬁne the underlying security assump-
tions of our study, such as ﬁngerprint method, length, and
strength against an adversary. The ﬁngerprint method
and parameters are utilized consistently for all experi-
ments in our study to offer comparability between all
possible ﬁngerprint representations. This attack model is
important for the usability since an unrealistically strong
or weak attacker could skew the results. Obviously, if the
ﬁngerprint strength is not kept equal between the systems
this would also skew the results.
4.1.1 Fingerprint Method
To decide upon a ﬁngerprint method for humanly veriﬁ-
able ﬁngerprints in our study, we ﬁrst have to differen-
tiate between human and machine veriﬁcation to illus-
trate their differences. While a full ﬁngerprint compar-
ison can be implemented for machine veriﬁcation, hu-
mans can fall for ﬁngerprints that match only partially.
Additionally, machine comparison can work with long
values, whereas for human veriﬁcation the length must
be kept short enough to ﬁt on business cards and to keep
the time needed for comparison low.
For machine comparison, full SHA-256 hashes should
be calculated binding a unique ID to the public key mate-
rial. The probability of ﬁnding a preimage or collision at-
tack is obviously negligible, but the ﬁngerprints can still
be computed fast in an ad-hoc manner when needed.
7https://www.openkeychain.org
It is important to note that collision resistance is not re-
quired for our scenarios. It is required for infrastructure-
based trust models such as X.509, where certiﬁcates are
veriﬁed by machines and trust is established by authority.
In these schemes, a signature generated by a trusted au-
thority can be requested for a certiﬁcate by proving the
control over a domain, but then reused maliciously for
a different certiﬁcate/domain. This is already possible
with a collision attack, without targeting a full preimage.
In contrast, the direct human-based trust schemes con-
sidered in this study only need to be protected against
preimage attacks, because no inherently trusted author-
ity is involved here.
While machine comparison needs to be done fast, e. g.,
on key import, manual ﬁngerprint veriﬁcation by humans
is done asynchronously in person or via voice. Thus, we
can use a key derivation function to provide a proof-of-
work, effectively trading calculation time for a shorter
ﬁngerprint length. Secure messaging applications such
as Signal or OpenPGP-based ones could pre-calculate
the ﬁngerprints after import and cache these before dis-
playing them for veriﬁcation later.
Thus, modern memory-hard key derivation functions
such as scrypt [34] or Argon2 [3] can be utilized to
shorten the ﬁngerprint length. These key derivation func-
tions are parametrized to allow for different work factors.
Suitable parameters need to be chosen by implementa-
tions based on their targeted devices and protocol.
As discussed in Section 3.2.1, while the generation of
new ﬁngerprints consists of the creation of a new key pair
and the key derivation step, an attacker can potentially
skip the key creation. Thus, in the following we only
consider the key derivation performance as the limiting
factor for brute force attacks.
When utilizing a properly parametrized key derivation
function for bit stretching, the security of a 112 bit long
ﬁngerprint can be increased to require a brute force at-
tack comparable to a classical 2128 brute force attacker.
Consequently, a ﬁngerprint length of 112 bit is assumed
throughout our study.
4.1.2 Attacker Strength for Partial Preimages
In our user study, we assume an average attacker try-
ing to impersonate an existing ID using our ﬁngerprint
method. Thus, an attacker would need to ﬁnd a 112 bit
preimage for this existing ﬁngerprint using a brute force
search executing the deployed key derivation function in
each step. Due to the work factor, we consider this to be
infeasible and instead concentrate on partial preimages.
For comparability and to narrow the scope of our study,
an attacker is assumed that can control up to 80 bits of
the full 112 bit ﬁngerprint.
Attackers might aim to ﬁnd partial preimages where
198  25th USENIX Security Symposium 
USENIX Association
6
the uncontrolled bits occur at positions that are more eas-
ily missed by inattentive users. First, the bits at the be-
ginning and the end should be ﬁxed as users often begin
their comparison with these bits. Thus, we assume that,
for any representation method, the ﬁrst 24 and last 24
bits are controlled by the attacker and thus the same as in
the existing ﬁngerprint. Based on the feedback from our
pre-study participants and reports from related work, this
can be considered best-practice [17, 37]. Second, of the
remaining 64 bits in the middle of our 112 bit ﬁngerprint,
we assume that 32 bits are controlled by the attacker in
addition to the ﬁrst 24 and last 24 bits. In total, we as-
sume that 80 bits are controlled by the attacker, i. e., are
the same as in the existing ﬁngerprint, and 32 bit are un-
controlled.
The probability of ﬁnding such a partial preimage for
a ﬁngerprint when executing 249 brute force steps is cal-
culated approximately by
1−(cid:31)2112 − ∑32
2112
k=1(cid:30)64
k(cid:29)
(cid:28)249
≈ 0.66.
32(cid:29), a sum over 32
Instead of using (cid:30)64
The inner parentheses of this equation deﬁne the prob-
ability that no partial preimage exists for one speciﬁc
bit permutation.
variations has been inserted to include permutations with
more than the uncontrolled 32 bit that are also valid par-
tial preimages. Finally, the probability to ﬁnd a par-
tial preimage is deﬁned by the inverse of the exponen-
tiation. Assuming the scrypt key derivation function
parametrized with (N,r, p) = (220,8,1), Percival calcu-
lates the computational costs of a brute force attack
against 238 (≈ 268) hashed passwords with $610k and
253 (≈ 958) with $16B [34]. These costs can be consid-
ered a lower and upper bound for our attacker, which we
assume to have average capabilities and resources. While
238 has a probability of ﬁnding a partial preimage of only
0.05%, with 242 the probability reaches nearly 1%, and
with 249, as in our example, a partial preimage is found
with over 50%.
In our study, we simulate attacks by inverting the bits
from the existing ﬁngerprint which are uncontrolled by
the attacker, while the controlled bits are unchanged.
For our theoretical approximation, we assume that the
ﬁrst 24 and last 24 bits should be controlled as well as
32 bits from the middle. In our study, we simulate an
even more careful selection of appropriate ﬁngerprints
from the ones that an attacker would brute force. A gen-
eral criteria here is to minimize the inﬂuence of uncon-
trolled bits on the entire ﬁngerprint: For numeric and al-
phanumeric representations all bits affecting a character
or digit are inverted together. For unrelated words, all
bits affecting a word are changed. Sentences are never
changed in a way that would alter the sentence structure.
Figure 3: A screenshot of the actual task a user had to per-
form in the experiment. A user rates whether the security codes
match, in this case with the Peerio word list approach, by click-
ing on the corresponding buttons shown on the phone.
4.2 Pre-Study
To get additional feedback from participants and eval-
uate our study design for ﬂaws and misunderstandings,
we conducted two small pre-studies: A lab study with 15
participants and an MTurk experiment with 200 partic-
ipants, all required to perform 10 comparisons for each
representation scheme (totally 60 comparisons in a ran-
domized order).
In our lab-study, we mainly focused
on qualitative feedback, whereas the main goal of the
MTurk pre-study was to ﬁnd ﬂaws in the presentation
and task descriptions, as well as to check whether our
proposed methodology is received as expected.
The biggest problem we found regarding the study de-
sign was that participants were uncertain if they should
check for spelling mistakes in the words and sentence-
based representation or if the all attacks would change
entire words. To clarify this, a speech bubble was in-
cluded in the task description that the participants do not
have to look for spelling mistakes for language-based ap-
proaches.
We tested different rates of attack during the pre-study.
The results showed that participants who were exposed
to frequently occurring attacks were more aware and had
a much higher attack detection rate. For our main study,
we reduced the number of attacks to 40 comparisons with
4 attacks to have a good balance between true positives
and false negatives. We received feedback that attacks
on anchor parts of the strings, i. e., in the beginning,
end, and at line breaks could be easily detected. Many
users had problems with distinguishing the hexadecimal
from the Base32 representation as well as distinguish-
ing different word list approaches (Peerio vs. OpenPGP
word list). Thus, we opted for a mixed factorial study
USENIX Association  
25th USENIX Security Symposium  199
7
design where users test only one scheme of each type.
We grouped the hexadecimal and Base32 scheme for the
alphanumeric type and the PGP and Peerio for the word-
list type together. These two groups were tested between-
subjects in a split-plot design, i. e., the participants test
either hexadecimal or Base32 for the alphanumeric type.
See Table 2 for a graphical representation of our condi-
tion assignment design.
4.3 Experiment Design
The main part of our online study is the experiment
part where users perform actual ﬁngerprint comparisons.
Here, we conducted two separate experiments with a dis-
tinct set of participants: (1) our main experiment test-
ing different textual high-level representation schemes
against each other and (2) a secondary experiment testing
different chunk sizes for the hexadecimal representation.
We opted for two distinct experiments due to the expo-
nential growth of experiment conditions, as described in
Section 4.3.1.
Before letting the participants start our experiment, we
explained the scenario:
“With this HIT, we are conducting an aca-
demic usability study followed by a short sur-
vey about different types of security codes
used in the IT world. Security codes are of-
ten used in encrypted communications to iden-
tify the participants in a communication. If the
security codes match, you are communicating
securely. If they don’t match, an eavesdropper
may be intercepting your communication”.
On MTurk, the term Human Intelligence Task, or HIT
stands for a self-contained task that a worker can work
on, submit answers, and get a reward for completing.
Since our participants might not be familiar with the key-
ﬁngerprint representation term, we replaced it with se-
curity codes for the sake of the study.
We opted not to obfuscate the goal of the study since
our research aims at ﬁnding the best possible representa-
tion for the comparison of key-ﬁngerprints in a security
context. This is closest to how users interact with ﬁnger-
prints in the real world — their secure messaging appli-
cations also ask them to compare the strings for security
purposes. The question how to motivate users to compare
ﬁngerprints is an entirely different research question. So
in our case, we believe it was not necessary or desirable
to use deception and since deception should be used as
sparingly as possible we opted for the “honest” approach.
After agreeing the terms, participants are shown a ﬁc-
titious business card next to a mobile phone, both dis-
playing a security code (as shown in Figure 3). To
become more familiar with the task, the experiment is
Type (Within-Group)
Alphanumeric
Numeric
Unrelated Words
Generated Sentences
Scheme (Between-Group)
Hexadecimal XOR Base32
Numeric
PGP XOR Peerio
Generated Sentences
Table 2: To avoid confusion between too similar approaches
(cf. Section 4.2), in our condition assignment, scheme types
(left column) can consist of multiple representation schemes
(right column). Each participant tests only one randomly as-
signed scheme of each type in a randomized order. .
started with 4 training tasks (each method once) not con-