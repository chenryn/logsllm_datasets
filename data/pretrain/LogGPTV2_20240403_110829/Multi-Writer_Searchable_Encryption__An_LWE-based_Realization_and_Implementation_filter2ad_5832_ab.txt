A⊤
A(i, :)
A(:, j)
A(i, j : n)
search token for keyword w
Euclidean norm of the matrix S
prime finite fields with order q
the maximum integer not greater than x
integer closest to the value x
minimum integer greater than x
inverse element of x in Zq
transpose of matrix A
the i-th row of matrix A
the j-th column of matrix A
the j-th to n-th elements from the i-th row of A
security parameter λ:
Advϵ ,A(λ) = |Pr[b = b
′] − 1/2|.
Definition 3.4. We say that our searchable encryption scheme is
IND-sID-CKA secure if for any polynomial time adversary A we
have that AdvA(s) is a negligible function.
4 PRELIMINARIES
4.1 Integer Lattice and Sampling
The construction for our searchable encryption scheme is based on
lattice theory. We first review some basic knowledge of lattices. An
m-dimensional full-rank integer lattice Λ ⊆ Zm can be defined as
the set of all integer linear combinations of m linearly independent
column vectors. Here, we define the following three sets. Note that
the notations in this work can be referred in Table 1.
Definition 4.1. [2, 13] For a prime integer q, a matrix A ∈ Zn×m
q
and a vector u ∈ Zn
q, define:
q(A) = Λ⊥
q (A) + t.
q where A⊤s = e mod q}
Λq(A) := {e ∈ Zm s.t . ∃ s ∈ Zn
Λ⊥
q (A) := {e ∈ Zm s.t . Ae = 0 mod q}
q(A) := {e ∈ Zm s.t . Ae = u mod q}
Λu
Note that if t ∈ Λu
For any set S = {s1, . . . , sk} ⊂ Rm, we let ∥S∥ denote its
maximum Euclidean norm of vectors in S, and the vector(cid:101)S =
{(cid:101)s1, . . . ,(cid:101)sk} ⊂ Rm denote the Gram-Schmidt orthogonalization
q(A), we will have Λu
taken in order. An arbitrary full-rank set S in a lattice can be con-
verted to a basis with an equally low Gram-Schmidt norm for the
same lattice.
The following Lemma 4.2 illustrates that there exists an effective
algorithm that can construct a pair of matrices (A, S) in polynomial
time, where S is a short basis for the lattice Λ⊥
q (A) and will be used
to generate system parameters for our scheme.
Lemma 4.2. [2] Let q ≥ 3 be odd and m := ⌈6n log q⌉. There is a
probabilistic polynomial-time (PPT) algorithm TrapGen(q, n, m) that
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand124outputs a pair (A ∈ Zn×m
to a uniform matrix in Zn×m and S is a basis for Λ⊥
n log q) and ∥S∥ ≤ O(n log q)
, S ∈ Zm×m) such that S is statistically close
q (A) satisfying
(cid:13)(cid:13)(cid:13)(cid:101)S
(cid:13)(cid:13)(cid:13) ≤ O((cid:112)
q
except with a negligible probability neдl(n).
The algorithms and lemmas given below show how to extend
a random basis to an arbitrary higher dimensional one through
invoking a deterministic polynomial-time (DPT) algorithm and
a probabilistic polynomial-time (PPT) algorithm respectively as
proposed in [11]. It is guaranteed that the original basis cannot be
derived from the extended one. In this paper, we exploit ExtBasis
and RandBasis to derive the private key based on a user’s tag.
q
q
q
q
q
Lemma 4.3 (ExtBasis). [11] There is a DPT algorithm ExtBasis
with the following properties: given an arbitrary rank n matrix A ∈
Zn×m
of Λ⊥(A), and an arbitrary
q
A ∈ Zn×m
, ExtBasis(S, A′) outputs a basis S′ of Λ⊥(A′) ⊆ Zm+m
, an arbitrary basis S ∈ Zm×m
q
such that ∥(cid:101)S′∥ = ∥(cid:101)S∥, where A′ = A∥A.
integer lattice Λ, a parameter s ≥ ||(cid:101)S0|| · w((cid:112)log n), RandBasis(S, s)
Lemma 4.4 (RandBasis). [11] There is a PPT algorithm RandBa-
sis with the following properties: given a basis S of an m-dimensional
outputs a basis S′ of Λ such that ∥S′∥ ≤ s · √
any s ≥ max{∥(cid:101)S0∥, ∥(cid:101)S1∥}·w((cid:112)log n), the outputs of RandBasis(S0, s)
m with overwhelming
probability. Moreover, for any two bases S0, S1 of the same lattice and
and RandBasis(S1, s) are within neдl(n) statistical distance.
Algorithm: SampleLeft(A, M1, SA, u, σ)[10]:
σ ≥ ||(cid:101)SA||w((cid:112)(log(m + m1))).
a matrix M1 in Zn×m1
with a short basis SA of Λ⊥
q (S),
q and a gaussian parameter
Output: a random vector e ∈ Zm+m1 sampled from a distribution
q(F1),σ , where F1 = (A|M1).
with
, a vector u ∈ Zn
q,
and a gaussian parameter σ ≥ ||(cid:102)SB|| · sRw((cid:112)(log(m + m1))), where
statistically close to the distribution DΛu
Algorithm: SampleRight(A, B, R, SB, u, σ)[10]:
a short basis SB of Λ⊥
q (A1), a matrix R ∈ Z k×m
sR = sup∥x ∥=1 ∥Rx∥.
statistically close to distribution DΛu
some certain distribution.
Output: a random vector e ∈ Zm+k sampled from a distribution
q(F2),σ , where F2 = (A|AR + B).
The following lemma helps us bound the size of samples from
Input: a rank n matrix A ∈ Zn×m
Input: a rank n matrix A ∈ Zn×k
, a rank n matrix B ∈ Zn×m
, a vector u ∈ Zn
satisfies σ > ∥(cid:101)SA∥ω((cid:112)log m). Then for any c ∈ Rm and u ∈ Zn
Lemma 4.5. [10] Let A be a random matrix in Zn×m where m > n
q (A) and parameter σ
q , we
and q > 2. SA is a short basis of the lattice Λ⊥
have Pr[x ∼ DΛu
4.2 The LWE Hardness Assumption
Our security analysis of the proposed scheme is based on the LWE
assumption, which is described as follows:
√
m] ≤ neдl(n).
q(A),σ : ∥x∥ > σ
q
q
Definition 4.6 (LWE). [11] For an integer q = q(n) and a distribu-
tion χ on Zq, the goal of the learning with errors problem LWEq, χ
is to distinguish the distribution between distribution As , χ (for
some uniform random and a secret s ← Zn
q) and uniform distribu-
tion on Zn
q × Zq.
Definition 4.7. [29] For an α ∈ (0, 1) and a prime q, let Ψα denote
the distribution over Zq of the random variable ⌊qX⌉ mod q where
X is a normal random variable with mean 0 and standard deviation
α/√2π.
Lemma 4.8. [29] Let q > 2√
n/α be some integer and α = α(n) ∈
(0, 1), if there exists a possibly and efficient quantum algorithm for
solving the (Zn
q , Ψα)-LWE problem, then there is an efficient quantum
within(cid:101)O(n/α) in the Euclidean norm in the worst case.
algorithm for approximating the hard problems GapSVP and SIVP to
⊤
Lemma 4.9. [2] Consider a vector e ∈ Zm and let y
R←− Ψ
m
α , the
quantity |e⊤y| is treated as an integer in {0, q − 1} which satisfies
the following inequality
y| ≤ ∥e∥qαω((cid:112)log m) + ∥e∥√
m/2
|e
except with negligible probability neдl(m).
5 OUR PROPOSED SCHEME
In this section, we first present our searchable encryption scheme
from lattice, and then show how to derive system parameters to
guarantee the correctness of the proposed scheme. After that, we
perform the space and computation complexity analysis.
5.1 Our scheme
We briefly overview the methodologies used to realize our multi-
writer searchable encryption scheme. To meet the security demand
of resisting quantum attacks, our scheme is built under the frame-
work of the LWE assumption. Meanwhile, considering the trouble-
some certificate management in a public key encryption scheme,
the idea of identity-based encryption is leveraged to simplify the
key management; data and messages of users are encrypted directly
via their identity tags.
In our scheme, the PKG generates private keys for legal users.
In essence, the key generation algorithm is a process of lattice
basis expansion, which takes a short basis and a tag-matrix as
input, and outputs a basis in higher dimension via the ExtBasis
and Randbasis algorithms. Here, the tag-matrix is an encoded user
identity matrix. In the encryption algorithm, users (writers) first
convert the keyword string into a keyword matrix with reader’s
tag and system parameters, and then randomize it and reduce its
dimension by multiplying a random vector. The final ciphertext is a
vector with noise. The realization of search requires the assistance of
a search token. In our scheme, the search token is a vector which is
sampled through the SampleLeft algorithm with the reader’s private
key and keyword. Now we present the following construction in
details.
Let T ∈ {0, 1}l and W ∈ {−1, 1}k be the user’s tag space and
keyword space, respectively, where l and k are fixed constants. Our
scheme is given as follows:
Setup. The PKG first takes a security parameter n as input
5.1.1
to determine the system parameters q, m, m′′, l, k, σ, α, s, where s
is the gaussian parameter that satisfies s =(cid:101)Lω((cid:112)log n) and(cid:101)L =
O((cid:112)n log q). Then it generates and outputs the system parameters
as shown in Algorithm 1. As given in Lemma 4.2, TrapGen(q, n, m) is
run to generate a matrix A0 ∈ Zn×m
with a short basis S0 ∈ Zm×m
q
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand125;
q
Tb
i
end for
for b = 0 to 1 do
$←− Zn×m′′
Algorithm 1 Setup Algorithm
Input: System parameters q, n, m, m′′, l, k, σ, α, s;
Output: System parameters sp and master key msk
1: (A0, S0) ← TrapGen(q, n, m);
2: for i = 1 to l do
3:
4:
5:
6: end for
7: for i = 1 to k do
;// where m′ = l · m′′
8:
Mi
9: end for
$←− Zn×(m+m′)
$←− Zn
, u0
q;
10: B
11: sp ← {A0, {T0
i }l
i =1, {Mi}k
i , T1
12: msk ← S0;
13: return sp, msk
i =1, B, u0, s};
$←− Zn×(m+m′)
q
q
;
;
q
q
q
q
1, T1
l ∈ Zn×m′′
τ ← ExtBasis(S0, Aτ );
Algorithm 2 Key Derive Algorithm
Input: System parameters sp, master key msk and a tag τ ∈ T ;
Output: Private key skτ
1 | . . . |Tτl
l );
1: F(τ) = (Tτ1
2: Aτ ← (A0|F(τ)) ∈ Zn×(m+m′)
3: sk′
4: skτ ← RandBasis(sk′
5: return skτ
τ , s) ∈ Z(m+m′)×(m+m′)
q (A0) s.t. ||(cid:101)S0|| ≤ O((cid:112)n log q). 2l uniformly random matri-
for Λ⊥
ces T0
1, . . . , T0
l , T1
, k + 1 uniformly random matri-
ces M1, . . . , Mk and B ∈ Zn×(m+m′)
, and a uniformly random n-
vector u0 ∈ Zn
q are selected. After that, the system parameters
i }l
sp = {A0, {T0
i =1, B, u0, s} are published and the
i =1, . . . , {Mi}k
i , T1
master secret key msk = S0 is kept at the PKG. Note that users
in our scheme share the same system parameters and thus the