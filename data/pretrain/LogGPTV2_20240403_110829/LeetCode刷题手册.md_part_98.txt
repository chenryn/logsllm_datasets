Output: 61 
Input: date = "2004-03-01"
output: 60
Input: date = "2003-03-01"
Output: 41
Input: date = "2019-02-10"
Output: 9 
Input: date = "2019-01-09"
dfsBtreeGamewiningMove(node.Right, left, right, x)
Explanation: Given date is the 9th day of the year in 2019.
  ( x sx   ex aa 5
return l + r + 1 
 if node == nil { 
return left > n ll right > n Il up > n 
n /= 2 
*left, *right = l，r 
 return 0
r := dfsBtreeGamewinningMove(node.Left, left, right, x),
---
## Page 1040
1157. Online Majority Element In Subarray
代码
解题思路
素，如果不存在这样的元素，就返回-1。
每次查询 query(.) 会返回在 arr[let], ar[left+1],, ar[right] 中至少出现阈值次数 threshold 的元
实现一个 MajorityChecker 的类，它应该具有下述几个APl:
题目大意
·简单题。依照题意处理即可。
·给出一个时间字符串，求出这一天是这一年当中的第几天。
·MajorityChecker(int[] arr)会用给定的数组 arr 来构造一个 MajorityChecker 的实例。
·int query(int left, int right, int threshold) 有这么几个参数：
● date represents a calendar date between Jan 1st, 1900 and Dec 31, 2019.
func dayofYear(date string) int {
import "time"
package leetcode
1 right-left + 1 
对于每次查询，Oright - left+1，也就是说阈值 threshold 始终比子序列长度的一半还要大。
o O right-left+1，也就是说阈值 threshold 始终比子序列长度的一半还要大。
）Oright- left + 1 
对于每次查询，0 right - left + 1, ie. the threshold is always a strict majority of 
0 right－left+1，这个条件就是摩尔投票
数大于区间的一半。如果存在众数，一定唯一。如果在给定的区间内找不到众数，则输出-1。
candidate 和 count 分别代表的是该区间内摩尔投票的结果。初始化的时候，先把每个叶子都填
间的。
的性质。既然满足可加，就可以和线段树结合，因为线段树每个线段就是加起来，最终合并成大区
结果是一样的么？答案是一样的。可以这样想，众数总会在一个区间内被选出来，那么其他区间的
票，最终把所有小区间合并起来再用一次摩尔投票，得到的结果和对整个区间使用一次摩尔投票的
素作为candidate。从左扫到右，就能找到众数了。那怎么和线段树结合起来呢？
果遇到不同的元素，
大。从左往右扫描整个数组，先去第一个元素为candidate，如果遇到相同的元素就累加轮数，如
累积没被投出去的轮数。如果候选人累积没有被投出去的轮数越多，那么最终成为众数的可能越
这个数据结构来实现。经过分析，可以确定此题的解题思路，摩尔投票+线段树。
[0,0]
[0,1] /
[0,2] 
[1,1] [3,3]
[2,2][3,4] 
，就把 candidate 和不同的元素一起投出去。当轮数变成〇了，再选下一个元
线段树
能在任意的一个区间内，查找是否存在众数，众数的定义是：该数字出现的次
[0,5]
[4,4]
[3,5]
[5,5]
arr = [1,1,2,2,1,1]
(1,1)
?
(1,2)
(1,1)
1,1
(2,1)
摩尔投票
(2,1)
7
?
(1,0)
(1,1)
(1,1
@halfros
---
## Page 1043
代码
4*]en(arr)), Majoritychecker{}, make(map[int][]int) 
func Constructorl157(arr []int) Majoritychecker {
// Constructorl157 define 
type Majoritychecker struct
// Majoritychecker define
type segmentItem struct {
import（
package leetcode
// 这个 merge 函数就是摩尔投票算法 
 data, tree, mc, count := make([]int, len(arr)),
count 
candidate int
"sort"
，用一个字典记录每个元素在数组中出现位置的下标，例如上述这个例子，用 map 记录下标：
count
merge 
data 
segmentTree []segmentItem
和 threshold 比较，如果≥ threshold 说明找到了答案，否则没有找到就输出-1。
[lowerBound，upperBound)区间内，都是元素1，那么区间长度即是该元素重复出现的次数,
出现的个数，那么利用2次二分查找，分别找到lowerBound 和upperBound，在
count = map[1:[0 1 4 5] 2:[2 3]]。由于下标在记录过程中是递增的，所以满足二分查找的条件。
摩尔投票中坚持没有被投出去的轮数。当线段树构建完成以后，就可以开始查询任意区间内的众数
直到根节点的 candidate 和 count 都填满。注意，这里的 count 并不是元素出现的总次数，而是
利用这个字典就可以查出在任意区间内，指定元素出现的次数。例如这里要查找1在[0,5]区间内
了，candidate 即为众数。接下来还要确定众数是否满足 threshold 的条件。
mc.merge = func(i, j segmentItem) segmentItem {
 if i.candidate == j.candidate { 
return segmentItem{candidate: j.candidate, count: j.count - i.count}
if i.count > j.count { 
return segmentItem{candidate: i.candidate, count: i.count + j.count}
 return segmentItem{candidate: i.candidate, count: i.count - j.count}
int
map[int][]int
func(i, j segmentItem) segmentItem 
[]int 
 make([]segmentItem,
---
## Page 1044
// Query define
func (mc *Majoritychecker) rightchild(index int) int {
  ( x (ox ) u
mc.segmentTree [rightTreeIndex]] 
mc.rightchild(treeIndex) 
func (mc *Majoritychecker) buildsegmentTree(treeIndex, left, right int) {
 return
 return 2*index + 1
mc.segmentTree[treeIndex] = mc.merge(mc.segmentTree[leftTreeIndex] 
if left == right { 
mc.buildSegmentTree(rightTreeIndex, midTreeIndex+l, right)
mc.buildSegmentTree(leftTreeIndex, left, midTreeIndex)
midTreeIndex := left + (right-left)>>1
leftTreeIndex, rightTreeIndex := mc.leftchild(treeIndex) ,
if len(arr) > 0 { 
mc.data, mc.segmentTree, mc.count = data, tree, count
for i := O; i  j.count { 
 count[arr[i]] = []int{}
 return segmentItem{candidate: i.candidate, count: i.count - j.count}
 return segmentItem{candidate: i.candidate, count: i.count + j.count}
2*index + 2 
---
## Page 1045
right >1,
queryRight int) segmentItem {
func (mc *Majoritychecker) queryInTree(treeIndex, left, right, queryLeft,
 end := sort.Search(len(mc.count[res.candidate]), func(i int) bool { return
start := sort.Search(len(mc.count[res.candidate]), func(i int) bool { return
res := mc.query(left, right) 
 } else if queryRight = right { // segment completely inside
if len(mc.data) > 0 { 
return -1
if (end - start + 1) >= threshold {
if_
return mc.merge(mc.queryInTree(leftTreeIndex, left, midTreeIndex, queryLeft,
// merge query results 
if queryLeft > midTreeIndex { 
 param_l := obj.Query(left,right,threshold) ;
 obj := Constructor(arr);
Your Majoritychecker object will be instantiated and called as such:
return segmentItem{candidate: -l, count: -1}
 return res.candidate
 return -1
 mc.queryInTree(rightTreeIndex, midTreeIndex+l, right, midTreeIndex+l,
 return mc.queryInTree(leftTreeIndex, left, midTreeIndex, queryLeft,
 return mc.segmentTree[treeIndex]
return mc.queryInTree(0, O, len(mc.data)-1, left, right)
 return mc.queryInTree(rightTreeIndex, midTreeIndex+l, right, queryLeft,
-, ok := mc.count[res.candidate]; !ok {
---
## Page 1046
词。注意：每次拼写时，chars 中的每个字母都只能用一次。返回词汇表 words 中你掌握的所有单词的
中的‘字母’（字符）拼写出words 中的某个‘单词’（字符串），那么我们就认为你掌握了这个单
给你一份‘词汇表’
题目大意
Note:
 Example 2: 
Return the sum of lengths of all good strings in words .
once).
A string is good if it can be formed by characters from chars (each character can only be used 
·sueuo sus e pue spuom sus jo Keue ue uanig ane nos
题目
Characters
1160. Find Words That Can Be Formed by.
提示：
长度之和。
Example 1: 
3．所有字符串中都仅包含小写英文字母
2. 1 c[w[i]-'a']{
return false
res += len(w)
-, w := range words {
---
## Page 1048
解题思路
提示：
案，其中每个 answer[i 是满足 f(queries[il) f("cc").
Explanation: on the first query only f("bbb") < f("aaaa"). On the second query
Output:[1,2]
Input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
f("cbd") < f("zaaaz").
Explanation: on the first query we have f("cbd") = 1, f("zaaaz") = 3 so 
output:[1] 
Input: queries = ["cbd"], words = ["zaaaz"]
queries [i] [j] , words [i] [j] are English lowercase letters.
1 <= queries.length <= 2000
中字典序最小的字母的频次。
f(queries[i]）<f(words [j]〕 条件的 words[j] 的个数。f(string） 的定义是 string
queries[ijj], words[ij] 都是小写英文字母
1 <= queries[i].length, words[i].length <= 10 
1 <= words.length <= 2000 
1 <= queries.length <= 2000
1 <= queries[i].length, words[i].length <= 10
1 <= words.1ength <= 2000
---
## Page 1049
After doing so, return the head of the final linked list. You may return any such answer.
O until there are no such sequences.
Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to
题目
Linked List
1171. Remove Zero Sum Consecutive Nodes from
代码
func countFunc(s string) int {
<ws[i]}]
import "sort"
package leetcode
count,i:= [26]int{}，0 
for i, q := range queries {
ws, res := make([]int, len(words)), make([]int, len(queries))
return count[i]
for count[i] == O {
for -, b := range s {
return res
sort.Ints(ws)
for i, w := range words {
可。
的值的下标 K，n-k 即是比 queries[i] 的 f(） 值大的元素个数。依次输出到结果数组中即 
++[,e,-q]zuno 
queries[i] 的f(）值。针对每个 f(）值，在 words[j] 的 f（）值中二分搜索，查找比它大
 i++ 
 ws[i] = countFunc(w)
res[i] = len(words) - sort.Search(len(words), func(i int) bool { return fq
fq := countFunc(q) 