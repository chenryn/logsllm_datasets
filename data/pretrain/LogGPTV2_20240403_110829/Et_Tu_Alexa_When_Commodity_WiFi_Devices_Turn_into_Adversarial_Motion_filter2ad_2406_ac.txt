can determine whether they are triggered by sources in one
room i.e. positively correlated. For example, the correlation
between the two triggered anchors are -0.07, -0.03, and 0.32,
in case 5, 6, and 7, respectively, and 0.23 during the door
opening in case 2.
Our attack can also use the ﬂoor plan (or room transition
probabilities) to ﬁne-tune the detection result (similar to [61]).
For example, a user cannot “ﬂy” from one room to another
when the rooms are widely separated. If the sniffer observes
Attack
Sniﬀer
(Brief Walk)
Mapping
Anchors
to Rooms
Fig. 5. Our attack process includes a bootstrapping phase and a continuous
sensing phase.
Static Attack Sniﬀer
two anchors in two widely separated rooms being triggered
sequentially with little or no gap, it will report two users, one
in each room, rather than a single user moving across rooms.
For other cases, our attack conservatively treats the rooms
with at least one anchor triggered as occupied.
V. ATTACK DESIGN
After presenting the key concepts, we now present the
the attack
attack design in detail. As shown in Figure 5,
includes two phases: (1) identify and locate anchors during
“bootstrapping,” and (2) deploy the sniffer and perform “con-
tinuous human sensing.”
(1) Bootstrapping.
The attacker ﬁrst needs to identify and
locate the anchors in the target area. The unique feature of our
motion detection is that is does not require precise location
of anchors, only their individual room. In our attack, this
is achieved by the attacker performing a brief passive WiFi
measurement (using the sniffer) while walking outside the
target property. Similar to the evil maid attack [2], the walking
measurements are only necessary during initial bootstrapping.
Before feeding the collected measurements into a device
localization algorithm, our attack introduces a novel data
sifting procedure to identify the right measurement instances
for anchor localization. As a result, the attacker can localize
anchors down to their individual rooms using limited and often
noisy signal measurements5.
(2) Continuous human sensing.
After locating a list of
anchors, the attacker hides the same sniffer at a ﬁxed location
outside the target area. The sniffer continuously monitors
ambient WiFi signals, and uses them to locate and track human
presence and movements inside. The sniffer also monitors
each detected anchor, and any relocation of an anchor will
trigger its removal from the anchor list, and possibly another
bootstrapping phase to (re)locate the anchors.
Our proposed attack process is fully automated, and does
not require any operations by the adversary, beyond the initial
bootstrapping which involves a walk around the property to
collect signal measurements. Note that this walking measure-
ment could also be achieved by a robot/drone.
4Home/ofﬁce WiFi devices naturally spread out in a room [10], [11]. One
can assume 3-4 devices in a room of common size of 25m
2.
5Because the attacker has little control on the available walking path and
the propagation environment, the signal measurements will inevitably contain
bias, noise and human errors.
6
A. Continuous Human Sensing
In this phase, the sniffer will continuously collect σaCSI for
each anchor and analyze them to detect, locate human presence
to their individual rooms.
Detecting the presence of human motion.
For each
anchor x, when σaCSI (x) > σp(x), the sniffer declares the
presence of motion near x, or “anchor x is triggered.” To
compute σp(x), the sniffer applies median absolute deviation
(MAD) [25], [50] on observed σaCSI (x) over time. Assuming
“untriggered” σaCSI (x) follows a Gaussian distribution, we
have
σp(x) = λ · MAD(Z) + median(Z)
(2)
where λ is the conservativeness factor and Z is the long-
term observation of σaCSI (x). The choice of λ will affect
the motion detection rate and false alarm rate. For our attack,
we set λ = 11 so the ideal detection rate per anchor is high.
Assigning target(s) to rooms. When any anchor(s) get
triggered, the sniffer analyzes their temporal σaCSI traces to
determine the set of rooms that are actually occupied.
(i) If all the triggered anchors are in the same room, then
the room is declared as occupied. Exit.
(ii) If most of the anchors are triggered, and their σaCSI
time series are (consistently) positively correlated, then the
sniffer is blocked by an external pedestrian next to the sniffer,
and the sensing output is “uncertain.” Exit.
(iii) Now consider all the triggered anchors. Start from
the triggered anchor x with the highest σaCSI . Mark x as
“checked” and its room as occupied. Compute pair-wise cor-
relation between x and any triggered anchor (y) in neighboring
rooms. If x and y are highly positively correlated, mark y as
checked. Repeat until all the triggered anchors are “checked”.
Tracking targets.
After detecting a set of motion events,
the sniffer can potentially combine them with room transition
probabilities built from the ﬂoor plan to estimate user trajec-
tories. For example, the sniffer can track a security guard’s
patrol route from a sequence of detected motion events.
It should be noted that while our attack can detect whether
a room is occupied or not, it cannot identify an individual out
of a group of users in the same room. Thus accurate per-person
tracking is only feasible when the number of users is small.
Monitoring anchor status.
The sniffer also monitors each
(static) anchor’s RSS (see §V-B). Upon detecting a consid-
erable RSS change for an anchor (which indicates potential
relocation), the attacker either removes it from the anchor list
or run bootstrapping to relocate anchors and recompute its σp.
Impact of sniffer placement.
The sniffer should be placed
where it can capture aCSI signals from the detected anchors,
while avoiding being too close to the anchors or at busy places
with pedestrians frequently passing by. While one could further
optimize the sniffer location, our current design randomly
chooses a location that can capture signals from all the anchors.
B. Bootstrapping: Locating Anchors
There are many device localization proposals, but since the
sniffer stays passive and only has a single antenna, we choose
to use RSS-based method [36], [38]. In this case, with a
brief walk outside of the target’s home/ofﬁce, the adversary
uses the sniffer to measure RSS of potential anchors along
the trajectory. These spatial RSS values and the trajectory
(recorded by the smartphone’s IMU sensors) are fed into a
log distance path loss model [55] to estimate the transmitter
location. Each transmitter located inside the target scene area
is added to the anchor list.
Why RSS but not aCSI?
The localization uses RSS rather
than aCSI, fCSI or AoA [58], [30] because of two reasons.
First, our attacker sniffer only has one antenna, and cannot
estimate fCSI accurately due to lack of synchronization with
the transmitter. Recent work [30] estimates AoA from aCSI,
but only if the sniffer has an antenna array and is in complete
LoS to the targets, i.e. no wall. Second, as shown in §V-A,
aCSI is sensitive to nearby target movements. As the adversary
has no knowledge of the target status during bootstrapping, it
cannot rely on aCSI for localization. In comparison, RSS is
much more robust against target movements, thus a reliable
input for localization under the adversarial scenario.
Identifying static anchors.
RSS of a static transmitter,
when captured by a static sniffer, should stay relatively stable,
while those of moving ones will ﬂuctuate over time. Thus
before running spatial RSS measurements, the attacker will
keep the sniffer static and measure the per-device RSS standard
deviation (σRSS) for a period of time (e.g. 60s). Devices with
large σRSS (>2.7dB in our work) are not used as anchors. This
is repeated during the continuous sensing phase (see §V-A)
to detect relocation of any anchor device. A complementary
method is to infer the device type (and brand name) from
the Organizational Unique Identiﬁer (OUI) ﬁeld of the MAC
address [51] and ignore moveable devices like smartphones,
wearables, laptops, and camera robots.
Finding high-quality RSS measurements. The localization
accuracy depends heavily on the “quality” of RSS measure-
ments. Instead of searching for a new localization design, we
apply a statistical data sifting algorithm to identify proper RSS
data samples as input to the localization algorithm.
The attacker can ﬁlter out “bad” measurements using de-
noising methods, e.g., Kalman ﬁlter [20], wavelet ﬁlter [60]
and feature clustering [38]. We ﬁnd that these are insufﬁcient
under our attack scenarios because the propagation environ-
ment is highly complex and unknown to the adversary, making
it hard to distinguish between noise and natural propagation
effect. Similarly, features used by [38] to identify bad mea-
surement rounds are too coarse-grained to effectively control
localization accuracy. In fact, our experiments in §VII show
that with [38], > 50% of the good measurement rounds it
identiﬁes all locate the device to a wrong room.
Instead, we propose consistency-based data sifting to iden-
tify proper data samples that will be used for model ﬁtting.
Our hypothesis is that, by the law of large numbers [54],
consistent ﬁtting results from many random samplings of RSS
measurements,
true signal propagation
behaviors and produce high-ﬁdelity localization results.
if exist, can reveal
During bootstrapping, the attacker uses the passive sniffer
to identify and localize static anchors inside the target property.
Given a round of measurements R, we apply the Monte
Carlo method [4] to randomly sample a subset (80%) of R as
7
 10
 5
)
m
(
y
n
o
i
t
a
c
o
L
 0
-5
Est. Device Location
True Room
 0
 5
 10
 15
Location x (m)
Improving accuracy of anchor localization using our proposed
Fig. 6.
consistency-based data sifting. Each red dot is the anchor location estimated
from a Monte Carlo sample of RSS measurements. The rectangle marks the
actual room the anchor resides. In this example, a dominant cluster is present
and is used to estimate the ﬁnal anchor location.
the input to the model ﬁtting. This is repeated by N = 1000
times, producing N localization results. We can ﬁnd natural
clusters among these N results from their locations and ﬁtting
mean square errors (MSE). If they form many small clusters
with different room placements, then R is inconsistent and
cannot be used for localization. If a dominant cluster exists and
its averaged MSE is less than those of the other clusters, then R
can be used for localization. An example is shown in Figure 6,
which produces a single, dominant cluster, while the rest are
widely scattered. When such a dominant cluster is present,
we can estimate the anchor room location by aggregating the
location data points of the cluster. In the example of Figure 6,
all the data points are located in the top center of a single room.
When the data points belong to different rooms, we choose the
room with the most data points.
When multiple rounds of RSS measurements are available,
the attacker can apply consistency check – if a localization
result is consistent across multiple rounds, then it is a conﬁdent
result. Across our experiments, we ﬁnd that consistency check
across 4 rounds of measurements is sufﬁcient to achieve a
room placement accuracy of 92.6%.
isolation.
Floor-level signal
When the target property
has multiple ﬂoors, the attacker needs to localize wireless
anchors to a particular ﬂoor during bootstrapping. This is
easily achieved using coarse angle of arrival (AoA) estimates
captured by the smartphone with a simple cone cover to focus
signals from a particular AoA. The received RSS from each
anchor can be combined with the phone angle (via the built-in
gyroscope) to localize each anchor to a ﬂoor.
Parameters
MAD conservative factor λ
Threshold of σRSS for static anchors
Ratio of Monte Carlo sampling size
Number of Monte Carlo sampling rounds (N )
Value
11
2.7
80%
1000
TABLE I.
ATTACK PARAMETERS USED IN OUR EXPERIMENTS.
Sniffer
Path
Test
Scene
# of
Rooms
Mean Room
Size (m2)
1
2
3
4
5
6
7
8
9
10
11
6
7
8
3
3
6
5
4
2
2
4
Indoor
Hallway
Outdoor
Sidewalk
14.19
14.60
13.65
14.50
9.51
14.21
16.75
44.39
69.83
47.20
12.99
TABLE II.
TEST SCENE CONFIGURATION.
produces a ﬁrmware (Nexmon) that enables passive6 snifﬁng,
but only on a single customized transmitter at very low rates.
For our attack, we made a series of changes to the Nexmon
ﬁrmware, so that the sniffer can run continuous passive snifﬁng
and capture aCSI from multiple commodity WiFi devices
simultaneously. In particular, we made changes to hardware
buffer management to resolve the issue of buffer overﬂow
facing the original Nexmon ﬁrmware.
One remaining artifact is that the ﬁrmware only reports
aCSI at a limited speed, up to 8–11 packets per second. To save
energy, we subsample sniffed packets based on this rate limit.
Despite this artifact, our prototype sniffer is able to capture
sufﬁcient aCSI samples to successfully launch the attack.
Computation and energy cost. One strength of our attack
is its simplicity. For our current smartphone prototype, the
bootstrapping app runs 1000 rounds of Monte Carlo sampling
and model ﬁtting, which ﬁnishes in less than 25s per anchor. It
takes less than 1s to compute average aCSI standard deviation.
The app consumes 4.18 watts (bootstrapping) and 2.1 watts
(continuous sensing), respectively. For Nexus 5 (with a built-in
2300mAh battery), this enables 4.1 hours of continuous sens-
ing. Currently our app does not optimize for energy efﬁciency,
which could be improved to extend sensing duration.
VII. EVALUATION
VI. SMARTPHONE IMPLEMENTATION
We prototype our attacker system using a commodity
smartphone as the sniffer. We implement the bootstrapping
and continuous sensing modules each as an Android app, and
deploy and experiment using two versions of Android phones,
Nexus 5 and Nexus 6. Both smartphones are equipped with the
Broadcom WiFi chipset. For spatial RSS measurements (during
bootstrapping), we use the built-in IMU sensors (accelerometer
and gyroscope) to detect user strides and build trajectory. The
key system parameters are listed in Table I.
Enabling continuous, passive snifﬁng of aCSI.
Previously,
aCSI can only be captured when the receiver actively com-
municates with the target transmitter [24]. Recent work [52]
We evaluate our attack using experiments in typical ofﬁce
buildings and apartments. We describe our experiment setup
and test scenes, present our evaluation on individual attack
phases (bootstrapping and continuous sensing), followed by
an end-to-end attack evaluation.
A. Experiment Setup
We experiment at 11 typical ofﬁces and apartments that
are accessible to us. The owners of each test volunteered
for our experiments. The test scenes are of different sizes
and conﬁgurations, and have different wall materials. The
6Passive snifﬁng means that the sniffer does not need to communicate with
the target transmitter, thus remains completely undetectable.
8
Anchors
Sniﬀer
Anchors
Sniﬀer
Anchors
Sniﬀer
10m
12m
12m
2m
15m
(a) Scene 4
0.2m
16m
(b) Scene 6
1m