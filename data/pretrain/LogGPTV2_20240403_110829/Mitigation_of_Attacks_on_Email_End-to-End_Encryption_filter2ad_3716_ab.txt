To evaluate the false positive rate, we exchanged emails over
eleven SMTP servers operated by different email providers and com-
pared the decryption contexts of the sent and received emails. Only
one of these eleven email service providers, Outlook.com, caused
false positives by significantly changing the decryption context (cf.
Table 4). This was to be expected because the underlying SMTP
server, MS Exchange, is notorious for rewriting email source code,
and also causes false positives in classical OpenPGP decryption.
We also evaluated the requirements for an effective DC policy
by reverse-engineering the behavior of Reply and Reply-All actions
in seven popular email clients.
1.6 Applicability
Decryption contexts protect the end-to-end encryption layer of
email, so support must be integrated in the mail user agents (MUAs).
Support for AEAD is included in the current version 4.0 of S/MIME
(RFC 8551), but we are unaware about the vendors timeline on im-
plementing this. For OpenPGP, we are unaware when RFC 4880bis
will be finalized, but here our proposal could also be implemented
with the existing Modification Detection Codes (MDC); the client
could use DC as additional input to the MDC calculation.
1.7 Contributions
• We give an overview on EFAIL mitigation approaches, and present
novel REPLY attack variants (see Section 2 and Subsection 2.6).
• We propose a general methodology to prevent EFAIL-DE and
REPLY attacks by constructing a decryption context DC from the
source code of the email and using it as associated data in an
AEAD scheme (Section 3).
• We provide a robust decryption context policy to mitigate all
attacks described in [31, 33]. Our solution does not weaken the
usability of PGP and S/MIME [39, 45].
• We implement our solution as a patch for the popular Enigmail
• We give a comprehensive security evaluation and evaluate the
false positive rate of the proposed solution by systematically
checking modifications of emails in transit by various popular
SMTP gateways (Section 8).
OpenPGP plugin (Section 6).
Artifact availability. We published our implementation under an
Open Source license and included all emails used in the evaluation.1
2 BACKGROUND AND MOTIVATION
2.1 Authenticated Encryption with Associated
Data (AEAD)
Encryption protects the confidentiality of a message, not its in-
tegrity. Thus an attacker may be able to change the plaintext of a
message by manipulating the ciphertext. If this is possible, we say
that the encryption algorithm is malleable.
1https://github.com/RUB-NDS/Mitigation-of-Attacks-on-Email-E2E-Encryption
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1649To prevent malleability, encryption can be combined with a
keyed cryptographic checksum called message authentication code
(MAC) computed on the ciphertext. This checksum can be computed
either on the plaintext or on the ciphertext of a message, and thus
either protects the integrity of the plaintext (INT-PTXT) or the
integrity of the ciphertext (INT-CTXT). When tightly integrated,
this combination is called authenticated encryption. Its different
variants are discussed in [4]. Since INT-CTXT implies INT-PTXT,
modern authenticated encryption schemes typically compute the
MAC over the ciphertext c.
Since a MAC can be computed over any byte sequence, it can also
be computed over c and some associated data d: mac ← MAC(k, c, d).
In this case, we speak of Authenticated Encryption with Associ-
ated Data (AEAD) [38]. We denote AEAD encryption as c′ ←
AEAD.Enc(k, n, m, d), where k is a symmetric key, n is a public
nonce, m is the message to be encrypted, and d is the associated
data to be integrity protected along with the ciphertext. The cipher-
text c′ = c || mac now consists of the encrypted plaintext plus a
MAC. When decrypting, the same associated data must be provided
as input: m′ ← AEAD.Dec(k, n, c′, d). Critically, AEAD decryption
returns either the unchanged original plaintext m′ = m or an error
symbol m′ = ⊥ (in case the ciphertext is altered or the associated
data does not match that used for encryption).
2.2 End-to-End Email Encryption
Historically, emails are text-based messages conforming to the In-
ternet Message Format (IMF) [37] sent via the submission protocol
SMTP. The Multipurpose Internet Mail Extension (MIME) [13] adds
support for more data types and attachments to the IMF. For ex-
ample, a single MIME email can contain HTML documents, style
sheets, embedded images and arbitrary attached files.
S/MIME and OpenPGP are the two major standards to encrypt
and digitally sign emails to achieve end-to-end email security. Due
to their different approaches to establish trust, they co-exist for
almost three decades now. The Secure/Multipurpose Internet Mail
Extension (S/MIME) [35] is an extension to MIME describing how
to send and receive secured MIME data. S/MIME relies on the Cryp-
tographic Message Syntax (CMS) to digitally sign, authenticate, or
encrypt arbitrary messages [18]. It is commonly used in corporate
and government environments, in part due to its ability to inte-
grate into an existing PKI. OpenPGP [7] is traditionally based on
the Web of Trust, a self-organized network of cross-certifications
that anyone can join. It is used by privacy advocates and activists
distrusting centralized authorities. OpenPGP can be used stand-
alone and copied as text into emails (PGP/Inline) or integrated into
MIME structures (as specified by PGP/MIME [12]). Either email
encryption standard provides seamless integration into MIME (see
Appendix A). Thus, when composing signed or encrypted messages,
an email client includes secured parts into standard MIME struc-
tures. For example, in the case of signed messages MIME provides
the multipart/signed type, which dictates exactly two sub-parts:
a plaintext leaf and a signature leaf. Furthermore, any MIME part
is also expected to work when included in a composition, such as a
list of unrelated MIME parts (multipart/mixed) or as one element
of multiple alternatives (multipart/alternative). A client on the
receiving side is expected to parse any composition of MIME parts
and to replace every encrypted part with its plaintext variant, such
that the MIME structure is preserved. Preserving (parts of) the
MIME structure is inherently required for signatures, but may lead
to hard-to-predict behavior when used with encrypted parts.
2.3 EFAIL Malleability Gadgets
The name malleability gadget attacks in the EFAIL paper [33] refers
to the malleability of the CBC (Cipher Block Chaining) and CFB
(Cipher Feedback) encryption modes, which was the root cause for
the success of these attacks. Malleability means that some changes
to the ciphertext lead to predictable changes in the plaintext. For ex-
ample, in the case of CBC and CFB, bits can be flipped individually.
The term gadget emphasizes that a single known-plaintext block is
reused to create many chosen-plaintext blocks. In email encryption,
known plaintext blocks can easily be determined since the first
ciphertext blocks contain the MIME type of the encrypted content.
That block can be reused to create arbitrary chosen plaintext blocks
at the cost of introducing pseudorandom plaintext blocks alternat-
ing with the chosen plaintext. An attacker needs to account for that
by creating an HTML payload such that the pseudorandom blocks
are commented out. Figure 7 in appendix B.1 has more details.
Mitigations. As a response to EFAIL-MG, S/MIME 4.0 specified the
AEAD algorithms AES-256 GCM and ChaCha20-Poly1305 [41], and
the draft of the new OpenPGP standard [25] contains EAX- and
OCB-based AEAD cipher modes. These modes are not malleable,
and thus, once they are implemented, malleability gadget attacks
will be prevented. Security against EFAIL-MG is enforced by the
sender since the sender’s mail client chooses the encryption mode.
It is noteworthy that the existing OpenPGP standard [7] already
attempts to fix the malleability of the CFB mode by adding a Modi-
fication Detection Code (MDC) at the end of the plaintext. However,
use of an MDC is optional and MDC errors do not prevent output
of the decrypted plaintext, so many applications failed to verify the
MDC before EFAIL [33]. Today, security against EFAIL-MG may
only be enforced by the recipient by activating the MDC check.
Please note that digital signatures, which are implemented in
both S/MIME and OpenPGP, do not protect against EFAIL-MG since
they may easily be removed by the adversary, in both the encrypt-
then-sign and the sign-then-encrypt variants [33].
2.4 EFAIL Direct Exfiltration
The EFAIL-DE attack encloses S/MIME and OpenPGP ciphertexts be-
tween sibling MIME elements that invoke a parser with exfiltration
channels, for example, an HTML parser. To do so, the attacker crafts
a malicious multipart-email that contains the obtained ciphertext.
See Figure 8 in appendix B.2 for more information.
Mitigations. We now summarize various mitigations applied by
standards and email client vendors to counter EFAIL-DE attacks.
RFC 8551. S/MIME 4.0 mandates to assign different web ori-
gins [2] to encrypted MIME parts. It does not explain how this
should prevent EFAIL-DE.
Apple Mail. The initial EFAIL-DE mitigation strategy in macOS
and iOS Mail was to not automatically load remote content such
as external images for encrypted emails. Note that this mitigation
was only applied to S/MIME, because OpenPGP is implemented by
a third-party (GPG Suite). This reduced the DE attacks from [33] to
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1650attacks with user interaction. In Dec. 2018, Apple Mail’s behaviour
changed to show a warning for partially encrypted emails. If the
user accepts this warning, all attacks are still possible (May 2020).
GPG Suite. As a reaction to EFAIL-DE, GPG Suite (the OpenPGP
plugin for Apple Mail) isolated encrypted message parts from the
other parts by putting them into a sandboxed HTML iframe. Further-
more, remote content was blocked for encrypted messages. Note
that GPG Suite also enforced this behaviour for S/MIME, therefore
basically patching Apple’s S/MIME implementation.
Thunderbird. Sanitizing unclosed quotes of HTML attributes was
the first EFAIL-DE mitigation deployed by Thunderbird to prevent
plaintext exfiltration (cf. Figure 8 in the appendix). Böck found a
bypass using a form element to wrap and exfiltrate the plaintext [5].
A further fix was to close all HTML tags for each MIME part. This
fix could be bypassed by using the  tag which prevents
closing tags to be interpreted as HTML. Eventually, support for
partially encrypted emails was dropped in June 2018 (i.e., only a
ciphertext located in the root MIME element is decrypted). This
countermeasure mitigated EFAIL-DE attacks, but broke support
for multipart/signed emails – encrypted messages with a detached
signature. These emails are generated by Gmail’s S/MIME imple-
mentation by default. Thus, emails encrypted from Gmail can not
be decrypted anymore in Thunderbird (May 2020). Note that this fix
only applies to S/MIME emails since Thunderbird uses a third-party
plugin (Enigmail) to handle PGP messages.
Enigmail. To counter HTML-based EFAIL-DE attacks, a rigorous
countermeasure was implemented; messages were only decrypted
if the whole email was encrypted. In August 2018, this behaviour
was softened by enforcing every encrypted part to be opened in a
separate window or tab.
Summary. Countermeasures are recipient-enforced and incon-
sistent between different S/MIME or OpenPGP implementations,
which indicates that the underlying problem is not well understood.
We observed the following mitigations against direct exfiltration
attacks in the tested email clients: (1) Blocking external resources
such as remote images in encrypted emails. (2) Disabling HTML
for encrypted emails or converting it to plain text. (3) Isolating
the content between MIME parts by adding quotes, closing tags or
iframes. (4) Displaying a warning to the user before opening the
email. (5) Refusing to decrypt partially encrypted emails at all.
2.5 Reply Attacks
REPLY attacks as described in [17, 22, 31] use an exfiltration channel
inherent to email. The attacker inserts an encrypted message in
a specially crafted email such that the MIME context hides the
original plaintext. Also, the attacker sets an SMTP context (such as
From, To, Subject, etc.) that causes the plaintext to be exfiltrated
to the attacker on any Reply or Reply-All action. See Figure 9 in
appendix B.3 for more information.
Mitigations. We are not aware of any countermeasures to basic
REPLY attacks which only modify the SMTP context of the original
message. For REPLY attacks that also change the MIME context, we
observed the following recipient-enforced and inconsistent mitiga-
tions: (1) Only include the first part in the reply in case of multipart
messages with encrypted parts. (2) Display a warning to the user
when replying. (3) Refuse to decrypt partially encrypted emails.
2.6 Novel Attack Variants
Multipart/alternative S/MIME wrapping. While Thunderbird
does not decrypt S/MIME encrypted leaves wrapped in multi-
part/mixed emails anymore, we found that leaves are still decrypted
in case of multipart/alternative (see [14]). This only allows an at-
tacker to wrap the original message with text/plain parts (Figure 10),
unless they are also encrypted. In that case, text/html is also ac-
cepted, and the attacker can hide the original plaintext with CSS.
To encrypt, the attacker needs access to the S/MIME certificate of
the victim, which is usually public. If the user replies to a single
benign-looking email, as depicted in appendix C.1, hundreds of
encrypted emails can be leaked at once. CVE-2019-11739 – fixed in
Thunderbird 68.1 – has been assigned for this vulnerability.
PGP/MIME to PGP/Inline downgrade attacks. As a counter-
measure to EFAIL-DE and REPLY attacks, Enigmail opens each PG-
P/MIME encrypted part of a multipart email in a separate window,
therefore enforcing content isolation. However, we found that this
countermeasure is not implemented correctly for PGP/Inline emails
wrapped into a multipart message. Note that every PGP/MIME
email can be downgraded to a traditional PGP/Inline message. This
allows to create messages where only the attacker’s benign-looking
text is shown, while the plaintext may be leaked on reply. An ex-
ample is given in appendix C.2. CVE-2019-14664 (fixed in Enigmail
2.0.11) has been assigned for this vulnerability.
3 EMAIL CONTEXTS
In this section we discuss how the SMTP and MIME contexts of
plaintext and ciphertext messages may change.
3.1 SMTP and MIME Contexts
Each piece of information in an email has two contexts:
• The MIME context determines if and how the information is dis-
played and which parser is invoked. The MIME context consists
of the MIME type and the position of the element in the MIME
tree, as well as the MIME types of its predecessors.
• The SMTP context defines from which source the information
is sent to which destinations, and the destination for any Reply
actions. It consists of a well-defined subset of RFC 822 headers
that are relevant to displaying and interacting with the email.
MIME and SMTP context together form the email context of a
MIME element. Figure 1 illustrates an example of such an email
context. When the email is sent by Alice, the To and Cc headers
determine the endpoints of this push communication. Since there
are no Reply-to or Sender headers present, the From header deter-
mines where replies should be pushed to. Date and Subject belong
to the SMTP context since they are displayed. The MIME context is
simple; the whole MIME tree is encrypted, so the encrypted element
is the root (and the only leave) of the new MIME tree.
Legitimate changes of SMTP and MIME context. In general,
both the SMTP and the MIME contexts of the information may
change during email communication. For example, when an email
is forwarded, a new set of To, Cc and From headers is created and
the original information may be wrapped into a new MIME element.
Similarily, the context changes if a recipient replies to an email.
Session 5E: Infrastructure Security CCS '20, November 9–13, 2020, Virtual Event, USA1651Email contexts for encrypted MIME elements. We note that
for encrypted MIME elements, forwarding the original encrypted
element does not make any sense, since the new recipient most
likely will not have a valid decryption key. Instead, each forwarded
MIME element must be decrypted first before including it into the
forwarding draft. This email, including any additional content, is
then re-encrypted to the new set of recipients. For reply, the original
text is decrypted and quoted in the draft response to allow for
inline comments. Thus, any legitimate action on encrypted emails
does not change the SMTP or the MIME context of the original
ciphertext element, but rather creates an entirely new ciphertext
and corresponding email context. Any change in the email context
of the original ciphertext therefore hints to an attack.
3.2 Attacks Changing the Email Context
In Figure 2 (a), the MIME context of the original email from Figure 1
has been changed to implement an EFAIL-DE attack: The encrypted
MIME element of PGP/MIME type multipart/encrypted, which
was the root MIME element in Figure 1, is now one of the leaves in
the MIME tree in Figure 2 (a). If HTML exfiltration channels exist,
this attack will work even if the SMTP context remains unchanged.
In Figure 2 (c), a simple REPLY attack on email encryption is shown,
which only alters the SMTP context. In this attack, the adversary
intercepts the email from Figure 1 and changes the From email
address to their own. This address is displayed in all MUAs, but