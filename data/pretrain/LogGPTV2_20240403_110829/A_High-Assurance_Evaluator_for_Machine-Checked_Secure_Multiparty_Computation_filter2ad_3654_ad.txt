by adding all the shares. We show how to instantiate this scheme using our secret sharing abstraction in
Figure 15.
Similarly to our addition protocol, Sharemind addition (depicted in Figure 16) can be locally computed by
simply adding shares.
Refreshing shares inside the Sharemind platform involves parties generating a random value and sending
that value to the next party, i.e. party i sends its random value to party i + 1. Shares are randomized by
adding the party’s random value and subtracting the received random value. Sharemind’s refresh protocol can
be found in Figure 17.
Finally, the multiplication protocol is slightly more complex than the previous two but is conceptually
similar to the refresh protocol as parties will also send information to the party with the next identiﬁer. It
involves two calls to the refresh protocol and every party will send the new randomized shares to the next
party. At the end, the multiplication of two values ¯x = x1 + x2 + x3 and ¯y = y1 + y2 + y3 can be obtained by
j=1 xi · yj. We show the EasyCrypt instantiation of Sharemind’s multiplication protocol in
performing(cid:80)3
Figure 18.
(cid:80)3
i=1
18
theory AdditiveSecretSharingScheme.
clone import SecretSharingScheme with
op n = 3,
op k = 1,
op d = n,
op t = n - 1,
type p_id_t = t,
op p_id_set = [ofint 0, ofint 1, ofint 2],
type secret_t = t,
type share_t = t,
type rand_t = t * t,
op share (r : rand_t) (s : secret_t) : (int * share_t) list =
let (r1,r2) = r in
zip p_id_set [r1; r2; s - r1 - r2],
op reconstruct (ss : (int * share_t) list) : (secret_t) option =
Some (summation (unzip2 ss)).
end AdditiveSecretSharingScheme.
Fig. 15: Sharemind’s additive secret sharing scheme
theory SharemindAddition.
clone import Protocol as SAddition with
type p_id_t = p_id_t,
op p_id_set = p_id_set,
type input_t = share_t * share_t,
type output_t = share_t,
type rand_t = unit,
type conv_t = unit,
op prot (r : (p_id_t * rand_t) list) (is : (p_id_t * input_t)) =
(map (fun pid => (pid, None)) p_id_set,
map (fun pid => let x = oget is.[pid] in (pid, fst x + snd x)) p_id_set).
end AdditiveSecretSharingScheme.
Fig. 16: Sharemind’s addition protocol
We demonstrated that all Sharemind components are actually concrete instantiations of our abstract
framework, thus providing evidence of its modularity and generality. All this elements can then be composed
in order to obtain the full Sharemind evaluation system.
4 EasyCrypt extraction tool-chain
Our veriﬁed implementation of a (proactive) MPC evaluator is obtained via a new extraction tool-chain
for EasyCrypt. The general execution pipeline of the tool-chain is shown in Figure 19. Brieﬂy, an EasyCrypt
description is ﬁrst translated into a WhyML program, which can then be fed to the Why3 [39,38] platform
in order to perform extraction to OCaml using the new Why3 (veriﬁed) extraction mechanism [60]. Note
that besides making use of Why3 code generation capabilities, one could also use Why3’s proving system.
For example, one could take the generated WhyML program, annotate it with the desired predicates and
use Why3 to discharge the generated veriﬁcation conditions; for example, one can use Why3 to prove safety
about some EasyCrypt code in an automated way. This subject is outside the scope of this work and is an
interesting future research direction.
19
theory SharemindRefresh.
clone import Protocol as SRefresh with
type p_id_t = p_id_t,
op p_id_set = p_id_set,
type input_t = share_t,
type output_t = share_t,
type rand_t = t,
type conv_t = t * t,
op prot (r : (p_id_t * rand_t) list) (is : (p_id_t * input_t)) =
(map (fun pid => let ri = oget r.[pid] in
let ri1 = oget r.[pid - 1] in
(pid, (ri, ri1))) p_id_set,
map (fun pid => let ri = oget r.[pid] in
let ri1 = oget r.[pid - 1] in
let i = oget is.[pid] in
(pid, i + ri - ri1)) p_id_set).
end SharemindRefresh.
Fig. 17: Sharemind’s refresh protocol
Why3 in a nutshell Why3 is a framework for deductive veriﬁcation of programs. It allows the user to specify,
annotate, prove programs and, if desired, obtain concrete correct-by-construction implementations of the
speciﬁcations made. Why3 was geared towards automation of proofs by making use of external automatic
theorem provers. Nevertheless, it can also be paired with interactive provers such as Coq or Coq.
Why3 incorporates a ML-like language called WhyML. Besides providing features commonly found in
other functional programming languages (pattern matching, records, ...), WhyML encompasses an annotation
mechanism, allowing an user to write contracts (pre- and post-conditions and loop invariants) for the speciﬁed
functions. The validity of these contracts can then be checked usingWhy3, that oﬀers a graphical interface to
the user to interact with the proving system.
WhyML code may also be used with the objective of generating correct-by-construction executable code.
Why3 code extraction mechanism is general enough to support extraction to multiple platforms, such as
OCaml or C, by providing the desired driver to the extraction system. In fact, it is also possible to provide
user-deﬁned drivers, if one wants to deviate from how Why3 performs extraction by default or if one wants to
specify how abstract functions in the WhyML ﬁle are to be extracted.
We chose Why3 as an intermediate tool for two reasons. First, the speciﬁcation languages of both
frameworks (EasyCrypt and Why3) are very similar, which simpliﬁes the translation process between the two
platforms. Second, Why3 incorporates a powerful, veriﬁed, extraction mechanism, supporting extraction to
multiple platforms and languages. However, some are not as mature (or veriﬁed) as the OCaml extraction. We
view our tool-chain as an interesting starting point for a future (more general) EasyCrypt extraction tool-chain
that makes use of a reﬁned Why3 based code generation with support for multiple target languages.
From EasyCrypt to OCaml We provide here an example illustration of our tool-chain using gradual secret
sharing. We use the (proactive) gradual secret sharing scheme presented in [32,35] to demonstrate how
executable code can be obtained from an EasyCrypt protocol speciﬁcation. Brieﬂy, the gradual secret sharing
scheme is a composition of an additive secret sharing scheme and a batch secret sharing scheme. The additive
secret sharing scheme is ﬁrst executed using a secret s with the purpose of obtaining d summands s1, . . . , sd
adding up to s. Then, every summand is shared linearly, increasing the degree of the sharing polynomial
as parties advance on the summand they are sharing. We start by showing how the additive secret sharing
scheme was speciﬁed in EasyCrypt in Figure 20. Note that Sharemind’s additive secret sharing scheme in
Figure 15 can be seen as a special instantiation of this one, with the value of n being set to 3.
20
theory SharemindMultiplication.
clone import Protocol as SMultiplication with
type p_id_t = p_id_t,
op p_id_set = p_id_set,
type input_t = share_t * share_t,
type output_t = share_t,
type rand_t = t * t,
type conv_t = t * t * t * t,
op prot (r : (p_id_t * rand_t) list) (is : (p_id_t * input_t)) =
let xx = map (fun pid => (pid, fst (oget is.[pid]))) p_id_set in
let yy = map (fun pid => (pid, snd (oget is.[pid]))) p_id_set in
let r1 = map (fun pid => (pid, (oget r.[pid]).‘1)) p_id_set in
let r2 = map (fun pid => (pid, (oget r.[pid]).‘2)) p_id_set in
let (crxx, rxx) = SRefresh.prot r1 xx in
let (cryy, ryy) = SRefresh.prot r2 yy in
(map (fun pid => let xi = oget rxx.[pid] in
let yi = oget ryy.[pid] in
let xi1 = oget rxx.[pid - 1] in
let yi1 = oget ryy.[pid - 1] in
(pid, (xi, yi, yi1, xi1)) p_id_set,
map (fun pid => let xi = oget rxx.[pid] in
let yi = oget ryy.[pid] in
let xi1 = oget rxx.[pid - 1] in
let yi1 = oget ryy.[pid - 1] in
(pid, xi * yi + xi * yi1 + xi1 * yi)) p_id_set).
end SharemindMultiplication.
Fig. 18: Sharemind’s multiplication protocol
The additive secret sharing is very easy to implement. Every party will get a random share (given by the
random type) except for the ﬁrst party, who gets the diﬀerence between the secret and the summation of all
the random summands. The secret can be easily reconstructed by adding all the shares.
The batch secret sharing scheme is a good example of a secret sharing scheme that produces shares to
mutliple secrets. Brieﬂy, it makes use of one linear secret sharing scheme to share every secret. In order to
reconstruct, parties can recover one polynomial at a time and then evaluate it in the zero point to obtain the
original secret.
The gradual secret sharing scheme can ﬁnally be speciﬁed as shown in Figure 22, where we assume that
the scheme was instantiated for 15 parties.
We translate every type deﬁnition and functional operator to its counterpart in WhyML. We will focus only
on the types and operators deﬁned by GradualSS and omit deﬁnitions of dependencies such as list operations.
The WhyML code generated for the same scheme can be found in Figure 23. As Figures 22 and 23 show, the
code in the two scripts is very similar. Abstract values (both abstract operators and abstract constants) are
deﬁned in Why3 using val, every EasyCrypt op is mapped to an WhyML let and the type keyword is the same
in both languages. Note, however, that the order of parametric types is reversed in both languages. In general,
our translation tool performs a simple syntactic translation between the two languages, which increases our
conﬁdence about correctness of the tool even without a formal proof for this part.
The WhyML program is now ready for extraction. Applying the Why3 extraction mechanism yields the
correct-by-construction OCaml code in Figure 24.
21
Fig. 19: EasyCrypt extraction tool-chain. We only extract OCaml code in this work, but there are resources
online suggesting that C and PVS code could also be extracted from WhyML.
theory AdditiveSecretSharingScheme.
const n : {int | 2  let (id,ss) = id_ss in (id, ss ++ [(eval id p, commit (p,rc) (id, eval id p))
])) ss.
op loop (rr : (polynomial * polynomial) list) ss =
with rr = [] => ss
with rr = ps :: rr’ => loop rr’ (exec ps.‘1 ss ps.‘2).
op share (r : rand_t) (s : secret_t) : (p_id_t * share_t) list =
let (rs,rc) = r in
let rr = zip rs rc in
loop rr (map (fun id => (id, [])) p_id_set).
op ocons (x : ’a) (ol : ’a list option) =
omap ((fun x y => x :: y) x) ol.
op build_points_pid’ (pid : p_id_t) (ss : share_t) : ((p_id_t * t) list) option =
with ss = [] => Some []
with ss = x :: xs =>
if verify (pid, x.‘1) x.‘2 then
ocons (pid, x.‘1) (build_points_pid’ pid xs)
else None.
op build_points_pid (s : (p_id_t * share_t)) : ((p_id_t * t) list) option =
build_points_pid’ (fst s) (snd s).
op build_points_pids (ss : (p_id_t * share_t) list) =
with ss = [] => Some []
with ss = x :: xs =>
let ox = build_points_pid x in
if ox <> None then
ocons (oget ox) (build_points_pids xs)
else None.
op build_points (ss : (p_id_t * share_t) list) =
let obpt = build_points_pids ss in
if obpt <> None then
Some (transpose (oget obpt))
else None.
op open_loop (pts : (p_id_t * t) list list) : t list =
with pts = [] => []
with pts = x :: xs =>
interpolate F.zero x :: open_loop xs.
op reconstruct (ss : (p_id_t * share_t) list) : secret_t option =
let obpt = build_points ss in
if obpt <> None then
Some (open_loop (oget obpt))
else None.
clone import SecretSharingScheme as BSS with
...
Fig. 21: Batch secret sharing scheme
23
theory GradualSecretSharingScheme.