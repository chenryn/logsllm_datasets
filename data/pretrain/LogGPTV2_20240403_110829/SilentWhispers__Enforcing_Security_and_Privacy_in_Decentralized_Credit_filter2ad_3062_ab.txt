in such paths and x be the transaction value. Then, after
performing a successful pay, every credit link in each pathi is
decreased by xi  vi, where x1 + . . . + x|LM| = x. If pay is
unsuccessful, no credit link must get modiﬁed.
Serializability. Transactions in a credit network are serializ-
able if, for all sets of pay and chgLink operations successfully
performed in a concurrent manner, there exists a serial ordering
of the same operations with the same outcome (i.e., changes
in the credit available in the corresponding paths).
Accountability. A credit network achieves accountability if
it is not possible for the adversary to claim a credit value in a
link other than the current value (i.e., last credit value agreed
between both users sharing the link), without being detected
by honest parties.
We now informally describe the privacy properties of
interest in a credit network. Value privacy and sender privacy
were already formalized in [47], while the others are presented
in this work for the ﬁrst time.
Value privacy. A credit network achieves value privacy if
it is not possible for any adversary to determine the total
value of a transaction between non-compromised users: The
adversary may see some transactions happening over certain
links, but it is not possible for any adversary to determine the
total transaction value.
Link privacy. A credit network achieves link privacy if it is
not possible for any adversary to determine the credit available
in a link between non-compromised users.
Sender privacy. A credit network achieves sender privacy if
it is not possible for any adversary to determine the sender in
a transaction between non-compromised users. The deﬁnition
of receiver privacy follows along the same lines.
A. Attacker model
We consider a fully distributed network where the adver-
sary can potentially corrupt, spawn, or impersonate an arbitrary
set of users. The adversary is allowed to adaptively choose the
set of corrupted parties. This models the fact that the adversary
can include her own users in the credit network and that the
adversary might also compromise some of the honest users’
machines.
We initially consider only passive, but still adaptive, cor-
ruption of a minority (less than half of the total set) of the
landmark users, which are thus assumed to be honest-but-
curious. We assume that the non-corrupted landmarks execute
the algorithms according to our speciﬁcations and do not
share private information among each other (i.e., they do not
collude). In our vision, landmarks represent the root of trust
in our network and they can be seen as the network operators
(e.g., banks are the natural candidate to serve as landmarks
in a transaction system). Furthermore, operations from the
landmarks in the protocol are conﬁned to the computation
of the minimum value of each path during the transaction
protocol. The landmarks could report a value smaller or greater
than the actual minimum value of a path. A smaller value
would reduce the functionality of the system while no credit
would be lost by the honest user. A greater value would be
detected by the honest user who does not have enough credit in
the transaction path. Therefore, in both cases landmarks would
lose customers and (possibly) go out of business. We thus
argue that it is in the interest of the landmarks to follow the
protocol in order to maintain the availability of their network.
is theoretically interesting to realize a
system that is resilient against the active corruption of a subset
of landmarks. Later, in Section VI, we extend SilentWhispers
in order to provide security and privacy guarantees even in
presence of actively malicious landmarks.
Nevertheless,
it
B. Strawman Approach and Key Ideas
Routing: ﬁnding paths in epochs. Routing information must
be repeatedly recalculated to account for the dynamic nature
of credit networks: credit links among users are continuously
updated, created, and deleted as a result of carrying out
the transactions. Under the assumption that users are loosely
synchronized, we divide the time in well-known epochs: BFS
arborescences and anti-arborescences are created at the begin-
ning of each epoch and users utilize that routing information
throughout the duration of the epoch.
4
[ m in(1 5, 7 0, ...)]
15
U1
U2
[15]
70
[15]
[15]
[min(15, 70, ...)]
]
0
7
[
]
0
7
[
[2
5]
25
[25]
[25]
[5]
[5]
5
U3
[5]
U4
Fig. 1: An illustrative example of the use of SMPC in SilentWhispers:
Dashed lines show communication between parties and solid arrows
represent credit links, while notation [a] indicates a (secret sharing)
share of value a. We consider a payment from user U1 to U4. First,
every user in the path sends a share of her link value to each landmark.
Then, landmarks locally compute the share of the minimum credit
on the path and send it to the sender. Transfer of the share from the
landmark in the middle to the sender has been omitted for readability.
We assume that the set of landmarks is ﬁxed and known
to all users and that the credit network is a connected graph.
Then, the correctness of BFS ascertains that each user receives
routing information from all her neighbors for each landmark.
This ensures that no honest user is alienated by a malicious
neighbor; the absence of BFS related communication from a
neighbor for any landmark serves as a detection mechanism
of misbehavior so that further actions (e.g., removing the link
with the misbehaving neighbor) can be adopted. We leave
the design and implementation of a fault-tolerant BFS as an
interesting future work.
Credit on a path: SMPC. The central technical challenge
in the design of a credit network is the computation of the
credit available in a certain path, which is necessary for
performing a transaction. A ﬁrst, trivial solution would be to
let every user in the path privately communicate her own link’s
value to the corresponding landmark so that the landmark
can thereby compute the minimum value over the path and
notify the intended recipients. It is easy to see, however, that
this approach fails to guarantee privacy against an honest-
but-curious landmark as the landmark would learn the credit
associated with each link.
A local approach, where the credit on the path gets com-
puted step-by-step by each user in the path, does not solve the
privacy problem either. For instance, suppose that each user
sends to the next user in the path the lower value between the
one of its own link and the one received from the previous user:
it is easy to see that such a protocol leaks all the intermediate
values.
The idea underlying our approach is to design a secure
Multi-Party Computation (SMPC) protocol to compute the
credit available on a path. In order to boost the efﬁciency of
our construction, we let landmarks play the role of computation
parties, each receiving a share of the credit on each link from
the sender to the receiver. Landmarks can jointly compute the
credit on the whole path, intuitively by computing a series of
minimum functions, but without learning anything about the
result of the computation, nor of course the credit on the links.
An illustrative example is shown in Fig. 1. First, every user
in the payment path from the sender (U1) to the receiver (U4),
creates a share of the link’s value for each of the landmarks.
After receiving all shares,
landmarks locally compute the
“minimum” function over the shares, thereby obtaining a share
of the result that is then sent to the sender. Finally, the sender
reconstructs the result and carries out the payment.
This approach, however, leaves two important concerns
unanswered. First, how to assure that the shares come from
users forming a path from the sender to the receiver without
compromising their privacy (e.g., revealing the links); and
second, how to enforce the correctness of the updates of links
caused by the transaction without using a public ledger.
Path construction: chained digital signatures. We ensure
that all shares come from users in a path from the sender to
the receiver by resorting to a chain of signatures. Na¨ıvely, we
could assume that every user uses a long-term key pair to sign
the veriﬁcation key from her predecessor and her successor in
a given path. This would result in a unique signature chain
serving as a valid proof of the existence of a path from sender
to receiver.
However, the exposure of the same long term keys across
different transactions would allow for correlation attacks and
ultimately compromise user privacy. Using fresh keys per
transaction to overcome this issue does not entirely solve the
problem either: since fresh keys are not bound to a user, an
adversary can always impersonate an honest user with her own
keys.
Our idea, instead, is to combine long term and fresh keys.
First, a user signs a fresh veriﬁcation key with her long term
signing key so that they are bound together. The (sensitive)
long term veriﬁcation key is revealed only to the counterparty
in a credit link so that the relation between a fresh veriﬁcation
key and a user is veriﬁable to the counterparty but remains
hidden for the rest of users in the credit network. Second, a
user can use her fresh signing key to sign the fresh veriﬁcation
key of the predecessor and successor in any given path,
thereby creating a signature chain. A pictorial description of
the approach is reported in Fig. 2.
Accountability: dispute resolution.
In a distributed credit
network, the two end-points of a link are responsible for setting
its value. We provide an accountability mechanism to establish
the real value of a link, in case the two end-points disagree on
that. An illustrative example of this idea is depicted in Fig. 3.
Sign(SK⇤2,{VK⇤1, VK⇤2, VK⇤LM})
Sign(SK⇤3,{VK⇤LM, VK⇤3, VK⇤4})
Sign(SK⇤1,{VK⇤1, VK⇤2})
Sign(SK⇤LM,{VK⇤2, VK⇤LM, VK⇤3})
Sign(SK⇤4,{VK⇤3, VK⇤4})
U1
U2
LM
U3
U4
Fig. 2: Illustrative example of path construction in SilentWhispers.
Every user i has a pair (SK⇤i , VK⇤i ) of signing and veriﬁcation keys.
Every user in the path privately exchanges the fresh veriﬁcation key
to both neighbors. Then, each user publishes a signed tuple containing
the fresh veriﬁcation keys of the neighbors and his/her own. A path
is correct if contiguous veriﬁcation keys in the path are equal.
Log
(SK1, VK1)
15 ! U2, t1))
Sign(SK2, (U1
(ChgLink(U1, U2, +3), t2)
Log
(SK2, VK2)
15 ! U2, t1))
Sign(SK1, (U1
(ChgLink(U1, U2, +3), t2)
(U1
16 ! U2)
(U1
18 ! U2)
Illustrative
the dispute
example of
Fig. 3:
resolution in
SilentWhispers. Users sharing a link exchange a signature of the
current link’s value. When an operation on the link occurs (e.g.,
increase the link value by 3 credits) and users do not agree on the
new link’s value, the logs from users allows to solve the dispute (e.g.,
the new value must be set to 18).
In a nutshell, the two end-points establish the current value
of the link by signing it with their long-term signing keys.
Then, if a transaction is routed through such link, both users
log the transaction and sign the new link value. All signatures
in our accountability mechanism contain a timestamp to avoid
rollback attacks. By inspecting these signatures, a judge can
determine the correct value of the link. We assume that long-
term keys are associated to the real user’s identities (e.g., in
an ofﬂine contract or using a PKI), such that users are held
accountable for their actions.
IV. SECURITY DEFINITION
We deﬁne the security and privacy goals of our design us-
ing the ideal/real world paradigm from the Universal Compos-
ability (UC) framework [13]. We describe in the following the
ideal functionality FCN, which models the intended behavior
of the system, in terms of functionality, security, and privacy.
Ideal world. We consider a connected network of n nodes
where each node is labeled either as a standard end-user (u)
or as a landmark (LM). We model the synchronous network
as an ideal functionality FNET as well as the secure and
authenticated channels that connect each pair of neighboring
nodes, FSMT, as proposed in [13]. In our abstraction, messages
between honest nodes are directly delivered through FSMT, i.e.,
the adversary cannot identify whether there is a communica-
tion between two honest users. The attacker can corrupt any
instance by a message corrupt sent to the respective party ID.
The functionality FNET hands over to the attacker all the static
information related to ID. In case ID is a standard node, all
its subsequent communication is routed through A, which can
reply arbitrarily (active corruption). If ID is a landmark, all its
subsequent communication is recorded and the transcripts are
given to A (passive corruption).
Our ideal functionality for a credit network, FCN, maintains
locally the static information about nodes, links, and their
credit using a matrix. Additionally, FCN logs all of the changes
to the credits between nodes that result from successful trans-
actions and we denote by valt
u,u0 the credit between some u
and u0 at time t. FCN is composed by a set of functionali-
ties (FROUT, FPAY, FTEST, FCHGLINK, FTESTLINK, FACC) that
interact as follows: FCN periodically executes a functionality
to update the routing information of the nodes in the network
(FROUT) using FNET as a mean of synchronization. Nodes can
contact the ideal functionality to perform transactions (FPAY),
test the available credit (FTEST), update the credit on a link
5
(FCHGLINK), test the credit available in a link (FTESTLINK) or
to solve disputes relative to the credit on some link (FACC).
Under these assumptions, we describe the routines executed
by FCN in the following.
FROUT: The routing algorithm (Fig. 4) allows the functionality
to construct the BFS trees required to form transaction paths
between a pair of nodes. The landmark ﬁxes the set of children
nodes for the computation of the BFS (step 1) and the ideal
functionality executes the BFS (steps 2-3) by exchanging
messages with each node in the network, starting from the
set speciﬁed by the landmark. Each node can decide whether
to interrupt the algorithm or to indicate the next node to visit.
This models possible disruptive users in a distributed credit
network. At the end of the execution each node learns its parent
from and to the input landmark.
FPAY: The algorithm in Fig. 5 provides an ideal functionality of
the pay operation in a distributed credit network. The protocol
is initiated by the sender Sdr that communicates the two ends
of the transaction to the ideal functionality FPAY (step 1).
For each landmark, FPAY derives two paths connecting the
sender to the landmark (resp. the receiver to the landmark) in
a distributed fashion (step 2): the functionality interacts with
each intermediate node that can choose the next node where
to route FPAY, until the landmark is reached (or the maximum
length of the path is exceeded). Again, each node along the
path can arbitrarily delay the operation and potentially choose
any next node to visit, to model possibly malicious nodes.
FPAY computes then the total amount of credit associated with
each of the derived paths and sends the information to the
sender (step 3) who can either interrupt the execution or inform
FPAY of the values to transfer through each path (step 4). FPAY
informs the nodes of the value transacted through them and the
receiver of the total amount of transacted credit (steps 5-6).
Each node involved in this phase can either conﬁrm or abort
the operation if the transacted amount exceeds the capacity
of some link. If all of the nodes accept, FPAY updates the
credit information of each node involved consistently with the
transacted amount. Then FPAY informs the set of nodes that
participated to the protocol (starting from the receiver) of the
operation’s success (step 7). This is done again iteratively such
that any node can interrupt the communication, if traversed.
The FTEST functionality computes the credit available on
the paths connecting any two nodes in the network, and it
works analogously to the steps 1-3 in FPAY. At any point