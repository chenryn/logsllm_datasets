a low-interaction honeypot honeyd [7] and a tarpit LaBrea [4].
Honeyd is a small daemon that creates virtual hosts in the
network. There are two potential vulnerabilities in its de-
ployment, the number of emulated hosts and settings of their
port actions. Any port on any host (including defaults)
emulated by honeyd can be set in three ways, 1) open re-
sponds with TCP SYN+ACK packet, 2) reset responds with
TCP RST packet and 3) block is not responding. Honey-
pots are generally con(cid:12)gured to accept any incoming con-
nection, e. g., open, to capture potential attacks including
zero-day exploits. The problem is that honeypots accept
and respond also to spoofed packets. The ports open by de-
fault are the reason why honeypots re(cid:13)ect more traﬃc than
common hosts in the network. Next, tarpits like LaBrea
include additional potentially hazardous ability. They es-
tablish a TCP connection and keep it open for as long as
possible without sending much data. This ability is sup-
posed to deplete the resources of an attacker. However, in
case of re(cid:13)ected attack the tarpit is actually depleting the
resources of the victim.
The risk of having all ports opened is multiplied by the
number of emulated hosts. For example, honeyd can emu-
late up to 65,536 addresses. As for our own honeypots, we
use honeyd emulating slightly more than 200 IP addresses.
Even this number of emulated hosts would be enough for
the attacker to execute DRDoS attack. The only limitation
of the re(cid:13)ected traﬃc is bandwidth of a singe host running
the honeyd.
The attacker does not need to know if the re(cid:13)ectors are
common hosts or honeypots.
It can be a coincidence to
abuse honeypots as re(cid:13)ectors, although favorable for the at-
tacker.
The easy abuse of honeypots can be turned into honeypot
detection mechanism. Scanning for highly responsive net-
work segments reveals good re(cid:13)ectors that are likely to be
honeypots, especially when they reply with the SYN+ACK
(cid:13)ags on many unusual ports. Suppressing this behavior cor-
responds with the strategy of making honeypots indistin-
guishable from common network hosts [2].
 0 100 200 300 400 500 600 70010:0010:3011:0011:3012:0012:3013:0013:30kB/sMaximum Traffic14504. DETECTION AND MITIGATION
OF THE ATTACKS
The DRDoS attack is based on IP spoo(cid:12)ng and if we could
detect spoofed IP packets, we would be able recognize an at-
tack. Elimination of IP spoo(cid:12)ng would make DRDoS attacks
impossible and would enable defense mechanisms against
many other kinds of DDoS attacks [5]. The BCP38 [3] deals
with network ingress (cid:12)ltering that disables sending of forged
traﬃc with a spoofed source IP address. Since the (cid:12)ltering
is still not always put in place we have to rely on a research
in source address validation.
Once we have detected an attack re(cid:13)ected of our network,
we can mitigate the attack at least by dropping the connec-
tions from and to the victim. Next step should be sending
a report of re(cid:13)ected traﬃc to the abuse contact of the vic-
tim with data pointing to the source of the spoofed traﬃc on
uplink level ISP. This informs the victim that we act as a re-
(cid:13)ector and not the actual source of attack and gives enough
information to trace the actual attacker.
It is worth noting that attackers rather succeed in sat-
uration of the link or active nodes such as (cid:12)rewalls, load
balancers etc., than overloading the end server. The port
is irrelevant when it comes to link saturation, however the
port 80 is more likely to be accepted by (cid:12)rewalls. This port
is not the only option, well-known ports are most likely to
be used.
5. COMMUNICATION AND DATA SHAR-
ING
Signi(cid:12)cant part of the mitigation of attacks is based on
communication and sharing of data between organizations
involved in a DDoS attack. As it turned out from recent
attacks, researchers and security teams are focused mainly
on detection of attacks and their processing in a local con-
text. This approach is suﬃcient enough for attacks on small
scale focused on one organization. However, attacks that go
across several organizations, which could act as both victims
and attackers, needs more than simple detection.
There is the best practice to use a list of oﬃcial abuse
emails and out-of-band contacts to eliminate the delay and
a risk of losing contacts due to personal changes in organi-
zations. Recent events in March showed lack of systematic
communication between organizations which communicated
mostly ad-hoc and based on good relations between the in-
volved organizations. There were conference calls put in
place and personal contacts were used.
Sharing of data is very closely related to communication.
It helps tracing the source of attack and speeds up the anal-
ysis of attack. A shared database of detected anomalies
and incidents could make the detection and mitigation of
attacks faster and more accurate. Moreover every organiza-
tion should have summarizing information about the status
of own network, i. e. used bandwidth, count of open con-
nections, etc. This could detect involvement in attack as
re(cid:13)ector or botnet zombies. Every mitigated attack to the
victim could lower the impact of attack, particularly if the
bandwidth of the re(cid:13)ector is higher than victims’. The leg-
islative adjusting the work and access to personal data and
network records has to be taken into consideration, though.
There is also the need to usefully visualize the shared data
gathered during an attack. Visualization is currently ori-
ented simply on amount of traﬃc between nodes or subnets.
It would be helpful to correlate the results of detection meth-
ods and visualize them on upper levels of network hierarchy.
This could help to react faster to early warnings and changes
in ongoing attack.
6. CONCLUSIONS
In this paper, we pointed out that there is a risk in using
honeypots. However, we do not want to discourage readers
to use them. We still see the bene(cid:12)t of honeypots being
deployed in the network but we advice against them being as
open as possible. Honeypots are still useful even for re(cid:13)ected
traﬃc, because they point to malicious behavior, although
in this particular case, they are reporting victim and not
the attacker. We have shown that honeypots are capable of
reporting false positives, although they were believed to be
free of false positives.
We have supported our conclusions by the observation
and analysis of real large-scale DRDoS attacks. Honeypot
settings and vulnerabilities were presented on an example
of widely-known low-interaction honeypots participating in
the attack. We also discussed the problems related to inci-
dent handling and communication during the attack. Not
only false positive detection, but overall information sharing
needs to be revised to replace observed ad-hoc solutions.
Finally, we presented lessons learned in the area of both
honeypots and attack handling, including prevention of hon-
eypot abuse and proper handling of security incidents. We
believe there is still room for improvement in communication
and data sharing associated with mitigation of attacks.
7. REFERENCES
[1] P. Ba(cid:20)sta. DDoS - lessons learned - technical aspects.
http://www.afcea.cz/img/clanky_next/ITTE/Basta_
DDOS.pdf, 2013.
[2] European Network and Information Security Agency
(ENISA). Proactive Detection of Security Incidents II -
Honeypots.
http://www.enisa.europa.eu/activities/cert/
support/proactive-detection/proactive-
detection-of-security-incidents-II-honeypots,
2012.
[3] P. Ferguson and D. Senie. Network Ingress Filtering:
Defeating Denial of Service Attacks which employ IP
Source Address Spoo(cid:12)ng. RFC 2827 (Best Current
Practice), May 2000. Updated by RFC 3704.
[4] T. Liston. Welcome to My Tarpit: The Tactical and
Strategic Use of LaBrea, 2001.
[5] J. Mirkovic and P. Reiher. A taxonomy of DDoS attack
and DDoS defense mechanisms. SIGCOMM Comput.
Commun. Rev., 34(2):39{53, Apr. 2004.
[6] V. Paxson. An analysis of using re(cid:13)ectors for
distributed denial-of-service attacks. SIGCOMM
Comput. Commun. Rev., 31(3):38{47, July 2001.
[7] N. Provos. A virtual honeypot framework. In
Proceedings of the 13th conference on USENIX Security
Symposium - Volume 13, SSYM’04, Berkeley, CA,
USA, 2004. USENIX Association.
1451