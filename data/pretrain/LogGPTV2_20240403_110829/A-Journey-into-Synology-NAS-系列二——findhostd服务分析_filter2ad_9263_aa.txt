# A-Journey-into-Synology-NAS-系列二——findhostd服务分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
上一篇文章主要对群晖`NAS`进行了简单介绍，并给出了搭建群晖`NAS`环境的方法。在前面的基础上，本篇文章将从局域网的视角出发，对群晖`NAS`设备上开放的部分服务进行分析。由于篇幅原因，本文将重点对`findhostd`服务进行分析，介绍对应的通信机制和协议格式，并分享在其中发现的部分安全问题。
## 服务探测
由于`NAS`设备是网络可达的，假设我们与其处于同一个局域网中，首先对设备上开放的端口和服务进行探测。简单起见，这里直接通过`netstat`命令进行查看，如下。
可以看到，除了一些常见的服务如`smbd`、`nginx`、`minissdpd`和`snmpd`等，还有一些自定义的服务如`synovncrelayd`、`iscsi_snapshot_comm_core`、`synosnmpd`和`findhostd`等。与常见服务相比，这些自定义的服务可能`less
tested and more
vulnerable`，因此这里主要对这些自定义服务进行分析，包括`findhostd`和`iscsi_snapshot_comm_core`。
## findhostd服务分析
`findhostd`服务主要负责和`Synology Assistant`进行通信，而`Synology
Assistant`则用于在局域网内搜索、配置和管理对应的`DiskStation`，比如安装`DSM`系统、设置管理员账号/密码、设置设备获取`IP`地址的方式，以及映射网络硬盘等。
通过抓包分析可知，`Synology
Assistant`和`findhostd`之间主要通过`9999/udp`端口(`9998/udp`、`9997/udp`)进行通信，一个简单的通信流程如下。具体地，`Synology
Assistant`首先发送一个广播`query`数据包，之后`findhostd`会同时发送一个广播包和单播包作为响应。在发现对应的设备后，`Synology
Assistant`可以进一步发送其他广播包如`quickconf`、`memory
test`等，同样`findhostd`会发送一个广播包和单播包作为响应。
抓取的部分数据包如上图右侧所示。可以看到，两者之间通过`9999/udp`端口进行通信，且数据似乎以明文方式进行传输，其中包括`mac`地址、序列号和型号等信息。
###  协议格式分析
为了了解具体的协议格式，需要对`findhostd`(或`Synology
Assistant`客户端)进行逆向分析和调试。经过分析可知，消息开头部分是`magic`
(`\x12\x34\x56\x78\x53\x59\x4e\x4f`)，然后存在一大段与协议格式相关的数据`grgfieldAttribs`，表明消息剩余部分的格式和含义。具体地，下图右侧中的每一行对应结构`data_chunk`，其包含6个字段。其中，`pkt_id`字段表明对应数据的含义，如数据包类型、用户名、`mac`地址等；`offset`字段对应将数据放到内部缓冲区的起始偏移；`max_length`字段则表示对应数据的最大长度。
根据上述信息，可以将数据包按下图格式进行解析。具体地，消息开头部分为`magic`
(`\x12\x34\x56\x78\x53\x59\x4e\x4f`)，后面的部分由一系列的`TLV`组成，`TLV`分别对应`pkt_id`、`data_length`和`data`。
进一步地，为了更方便地对数据包格式进行分析，编写了一个`wireshark`协议解析插件[syno_finder](https://github.com/cq674350529/pocs_slides/tree/master/scripts/wireshark_plugins/syno_finder)，便于在`wireshark`中直接对数据包进行解析，效果如下图所示。
需要说明的是，在较新版本的`Synology
Assistant`和`DSM`中，增加了对数据包加密的支持(因为其中可能会包含敏感信息)。对应地，存在两个`magic`，分别用于标识明文消息和密文消息。同时，引入了几个新的`pkt_id`，用于传递与加解密相关的参数。
    // magic
    #define magic_plain “\x12\x34\x56\x78\x53\x59\x4e\x4f”
    #define magic_encrypted “\x12\x34\x55\x66\x53\x59\x4e\x4f” // introduced recently
    // new added
    000000c3  00000001  00002f48  00000004  00000000  00000000      # support_onsite_tool
    000000c4  00000000  00002f4c  00000041  00000000  00000000      # public key
    000000c5  00000001  00002f90  00000004  00000000  00000000      # randombytes
    000000c6  00000001  00002f94  00000004  00000000  00000000
###  协议fuzzing
在了解了协议的格式之后，为了测试协议解析代码的健壮性，很自然地会想到采用`fuzz`的方式。这里采用`Kitty`和`Scapy`框架，来快速构建一个基于生成的黑盒`fuzzer`。`Scapy`是一个强大的交互式数据包处理程序，借助它可以方便快速地定义对应的协议格式，示例如下。
    class IDPacket(Packet):
        fields_desc = [
            XByteField('id', 0x01),
            FieldLenField('length', None, length_of='value', fmt='B', adjust=lambda pkt,x:x),
            StrLenField('value', '\x01\x00\x00\x00', length_from=lambda x:x.length)
        ]
        # ...
        def post_build(self, pkt, pay):
            if pkt[1] != 4 and pkt[1] != 0xff:
                packet_max_len = self._get_item_max_len(pkt[0])
                if len(pkt[2:]) >= packet_max_len:
                    if packet_max_len == 0:
                        pkt = bytes([pkt[0], 0])
                    else:
                        pkt = bytes([pkt[0], packet_max_len-1])+ pkt[2:2+packet_max_len]
            return pkt + pay
    class FindHostPacket(Packet):
        fields_desc = [
            StrLenField('magic_plain', '\x12\x34\x56\x78\x53\x59\x4e\x4f'),
            PacketListField('id_packets', [], IDPacket)
        ]
[Kitty](https://github.com/cisco-sas/kitty)是一个开源、模块化且易于扩展的`fuzz`框架，灵感来自于`Sulley`和`Peach
Fuzzer`。基于前面定义的协议格式，借助`Kitty`框架，可以快速地构建一个基于生成的黑盒`fuzzer`。另外，考虑到`findhostd`和`Synology
Assistant`之间的通信机制，可以同时对两端进行`fuzz`。
    host = ''
    port = 9999
    RANDSEED = 0x11223344
    packet_id_a4 = qh_nas_protocols.IDPacket(id=0xa4, value='\x00\x00\x02\x01')
    # ...
    packet_id_2a = qh_nas_protocols.IDPacket(id=0x2a, value=RandBin(size=240))
    # ...
    pakcet_id_rand1 = qh_nas_protocols.IDPacket(id=RandByte(), value=RandBin(size=0xff))
    pakcet_id_rand2 = qh_nas_protocols.IDPacket(id=RandChoice(*qh_nas_protocols.PACKET_IDS), value=RandBin(size=0xff))
    findhost_packet = qh_nas_protocols.FindHostPacket(id_packets=[packet_id_a4, packet_id_2a, ..., packet_id_rand1, packet_id_rand2])
    findhost_template = Template(name='template_1', fields=[ScapyField(findhost_packet, name='scapy_1', seed=RANDSEED, fuzz_count=100000)])
    model = GraphModel()
    model.connect(findhost_template)
    target = UdpTarget(name='qh_nas', host=host, port=port, timeout=2)
    fuzzer = ServerFuzzer()
    fuzzer.set_interface(WebInterface(host='0.0.0.0', port=26001))
    fuzzer.set_model(model)
    fuzzer.set_target(target)
    fuzzer.start()
此外，基于前面定义好的协议格式，也可以实现一个简易的`Synology Assistant`客户端。
    class DSAssistantClient:
        # ...
        def add_pkt_field(self, pkt_id, value):
            self.pkt_fields.append(qh_nas_protocols.IDPacket(id=pkt_id, value=value))