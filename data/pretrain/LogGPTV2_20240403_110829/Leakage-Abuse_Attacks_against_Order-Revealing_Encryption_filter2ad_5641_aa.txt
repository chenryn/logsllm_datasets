# Leakage-Abuse Attacks against Order-Revealing Encryption

**Authors:**
- Paul Grubbs<sup>∗</sup>
- Kevin Sekniqi<sup>†</sup>
- Vincent Bindschaedler<sup>‡</sup>
- Muhammad Naveed<sup>§</sup>
- Thomas Ristenpart<sup>∗</sup>

**Affiliations:**
- <sup>∗</sup>Cornell Tech
- <sup>†</sup>Cornell University
- <sup>‡</sup>University of Illinois at Urbana-Champaign (UIUC)
- <sup>§</sup>University of Southern California (USC)

**Conference:**
2017 IEEE Symposium on Security and Privacy

## Abstract

Order-preserving encryption (OPE) and its generalization, order-revealing encryption (ORE), enable operations such as sorting, range queries, and data filtering while only having access to ciphertexts. However, OPE and ORE inherently leak information about the plaintexts, and the practical security they provide has been unclear.

In this work, we introduce novel leakage-abuse attacks that recover plaintexts from OPE/ORE-encrypted databases. Our new attacks are based on a framework where the adversary's challenge is formulated as a non-crossing bipartite matching problem. This framework allows for the easy adaptation of attacks to specific schemes' leakage profiles. In a case study involving customer records, our attacks successfully recovered 99% of first names, 97% of last names, and 90% of birthdates, even though all values were encrypted using the most widely used OPE scheme in practice.

We also present the first attack against the recent frequency-hiding Kerschbaum scheme, which had previously not been subject to any known attacks. Our attack effectively recovers frequently occurring plaintexts.

## I. Introduction

Data breaches and the growing interest in outsourcing data to the cloud have led companies to increasingly seek ways to encrypt sensitive information before storing it in local databases or uploading it to third-party services. Standard encryption mechanisms, however, reduce the utility of these databases and services by preventing useful operations on the data. A potential solution is to use property-revealing encryption (PRE) schemes, which allow limited operations over ciphertexts by making specific properties of plaintexts public. PRE-based systems are already in use in industry [3, 13, 36, 43] and are increasingly studied in academic literature [3, 20, 24, 28, 38, 39].

A highly desirable property to preserve is order, which enables sorting, range, and prefix search queries, supporting other server-side operations. Order-preserving encryption (OPE) [1, 5] ensures that if \( m_1 < m_2 \), then \( E_k(m_1) < E_k(m_2) \). Similarly, order-revealing encryption (ORE) [2, 4] provides a more flexible but less secure alternative.

### New Leakage-Abuse Attacks

Our new attacks exploit the leakage inherent in OPE and ORE. We frame the adversary's goal as a classic graph problem: a min-weight non-crossing bipartite matching. One set of nodes represents ciphertexts, and the other set represents possible plaintexts, with edges weighted using frequency information. The non-crossing constraint ensures that the solution respects the adversarially known ordering constraints. Unlike previous attacks, our non-crossing approach fully leverages both frequency and order information. We use a well-known algorithm [32] to solve the min-weight non-crossing matching problem, which is both asymptotically and practically more efficient than previous methods.

Our non-crossing attack significantly improves accuracy, recovering on average 84% of first names in our target encrypted datasets, a 2x improvement over previous methods. High-frequency plaintexts are particularly vulnerable: our attack recovers 95% of the 20 most frequent first names and 88% of the 20 most frequent last names. The non-crossing attack runs in just a few hours, even for the largest target dataset, where the induced matching problem has over 17 billion edges.

### Exploiting Further Leakage

The BCLO scheme [5], the most widely used OPE scheme, is fast, easy to deploy, and has ciphertexts only a few bits longer than plaintexts. While proven secure in terms of indistinguishability from a random order-preserving function, it provides only modest guarantees. Previous work has shown that for a uniformly chosen plaintext, the corresponding ciphertext leaks almost the entire first half of the plaintext [6]. Despite widespread deployment, the implications of this leakage for real datasets have not been thoroughly studied.

We address this gap, demonstrating that in practical scenarios, using the BCLO scheme to encrypt a set of first names allows an attacker to recover almost half the dataset. The leakage is even more severe for last names, with nearly 97% of them trivially recoverable. A key issue is that varying-length plaintexts must be padded to the maximum length, ensuring that shorter messages completely reside in the leaked first half of the padded plaintext. This leakage can be exploited without mounting a complex inference attack; an adversary can simply inspect ciphertexts, perform basic calculations, and produce most plaintexts.

Our graph-based approach allows us to combine this leakage with inference to further improve recovery rates. We adapt our non-crossing attack to first compute the leakage implied by [6], exclude impossible matchings, and then solve the resulting, narrower non-crossing matching problem. This combined approach recovers on average 99% of first names, more than doubling the recovery rate compared to using BCLO leakage alone.

We also apply our approach to the CLWW ORE scheme [12], which claims to be more secure due to its asymptotically lower leakage for uniformly distributed messages. However, our results show that CLWW provides a similarly poor level of security in the settings we consider. For example, our attack recovers 97% of encrypted ZIP codes in CLWW, compared to 12% in BCLO. Composing BCLO with CLWW does decrease attack accuracy but still falls short of providing acceptable security.

### Exploiting Known Plaintexts

Our attacks, like the NKW attack, assume a weak adversary with no specific plaintext information. In real-world deployments, many systems relying on OPE/ORE offer opportunities for known- or chosen-plaintext attacks. We extend our attack framework to exploit known plaintexts by partitioning the problem and running independent attacks on each sub-problem. This approach provides a modest improvement for first and last names but a significant boost for birthdates and ZIP codes.

### Attacking Frequency-Hiding Schemes

Kerschbaum's scheme [25] hides frequency information, making it immune to traditional attacks. We propose a new "binomial" attack that performs reasonably well, recovering on average 30% of first names and 7% of last names. Notably, it recovers the majority of high-frequency plaintexts, suggesting these are poorly protected by any order-revealing scheme.

### Newer ORE Schemes

Recent ORE schemes [16, 30, 41] require query-specific trapdoors or multiple rounds of interaction, making them more similar to searchable symmetric encryption (SSE). These schemes face significant deployment challenges. Our results may encourage system designers to consider them more seriously.

### Summary

We are the first to explore the security of OPE and ORE schemes with plaintext data types previously thought to be resistant to attacks. Our case study of customer data is representative of common industry practice. Our framework for constructing attacks based on min-weight non-crossing bipartite matching allows for easy extensibility to different leakage profiles. Most importantly, our results show that the BCLO scheme's leakage enables the recovery of essentially all plaintexts in typical customer record databases. Alternative schemes like CLWW or their composition with BCLO do not fare much better.

Our findings provide guidance to practitioners on the security levels offered by OPE and ORE schemes. While property-revealing encryption is better than leaving data unencrypted, the security benefits of deployed schemes are marginal. As countermeasures, less leaky schemes such as Kerschbaum's or the Boneh et al. scheme [7, 29] are suggested, but they face deployment challenges. Even so, our attack on frequency-hiding schemes shows that high-frequency plaintexts remain vulnerable in common use cases.