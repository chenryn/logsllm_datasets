 0.1
 0
 0
 0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9
 1
Death Probability Ratio r
Figure 3: The death probability for three values of the mortal-
ity parameter z.
The death probability function pd(r) is shown in Figure 3 for three
different values of the mortality parameter z. This parameter cap-
tures the intensity of the competition among protocols. As z de-
creases, the competition becomes more intense and it is more likely
that a protocol will die if at least one of its competitors has higher
value than itself.
When a node u dies, its products also die if their only substrate
is u. This can lead to a cascade effect where the death of a node
leads to the death of several nodes in higher layers.
To illustrate the previous concepts, Figure 2 shows a toy net-
work with L = 4 layers. The generality probability for each layer
is shown at the left of the corresponding layer. Note that, on av-
erage, the number of products per node decreases as we move to
higher layers because the generality probability decreases in that
direction. Assuming that c = 3/5, nodes u and q are competitors
of node w in layer-2. It is likely (depending on the parameter z)
that w would soon die because its value is much less than that of its
maximum-value competitor, u. u is also a competitor of q but this
competition is much less likely to be lethal for the latter because its
value is comparable to that of u.
EvoArch captures the inherent competition between nodes at the
same layer, and speciﬁcally, between nodes that offer about the
same service. For instance, FTP and HTTP are two application-
layer protocols that can both be used for the transfer of ﬁles. The
large overlap of the services provided by HTTP with the services
provided by FTP (i.e., HTTP is a competitor of FTP) and the fact
that HTTP acquired over the years a larger evolutionary value from
its own higher layer products (applications such as web browsers)
leads to the extinction of FTP. On the other hand, TCP and UDP are
two transport layer protocols that offer largely different services.
Their competition, in terms of products (i.e., application layer pro-
tocols), is minimal and the two protocols have coexisted for more
than 30 years.
In the simplest version of EvoArch, the creation of new nodes
follows the basic birth process. Speciﬁcally, the number of new
nodes at a given time is set to a small fraction (say 1% to 10%) of
the total number of nodes in the network at that time, implying that
the larger a protocol stack is, the faster it grows. Each new node
is assigned randomly to a layer. In Section 6, we also examine a
death-regulated birth process, in which the frequency of births at a
layer depends on the death rate at that layer.
EvoArch is a discrete-time model. By tk, we denote the k’th
round. In each round, the model execution includes the following
steps in the given order:
a) birth of new nodes and random assignment to layers,
b) examine each layer l, in top-down order, and perform three tasks:
208b.1) connect any new nodes assigned to that layer, choosing sub-
strates and products for them based on the generality probabilities
s(l − 1) and s(l), respectively,
b.2) update the value of each node at layer l (note that the value of a
node in the k’th round can be affected by nodes added in that same
round),
b.3) examine, in order of decreasing value in that layer, whether
any node should die (considering the case of cascade deaths).
Initially, we start with a small number of nodes at each layer,
and form the edges between layers as if all nodes were new births.
Unless noted otherwise, the execution of the model stops when the
network reaches a given number of nodes.4 We refer to each exe-
cution as an evolutionary path.
We have mathematically analyzed a signiﬁcantly simpler ver-
sion of EvoArch [1]. Those simpliﬁcations are: static analysis
(i.e., a non-evolving network), a node can compete only with the
maximum-value node at that layer, each layer has the same number
of nodes m, and m s(L − 1) ≫ 1. Under the previous assump-
tions, we derived a mathematical expression for the death proba-
bility ratio r(l) for a node with the average number of products
at layer l. Unfortunately the expression for r(l) is not mathemati-
cally tractable and it does not allow us to examine whether it has a
unique minimum. Numerically, however, that expression suggests
that the ratio r(l) has a unique minimum at a certain layer ˆl that
only depends on the generality probabilities and the competition
threshold. Because the death probability decreases monotonically
with r(l) (see Figure 3), the previous observation means that the
death probability has a unique maximum at layer ˆl, and it decreases
monotonically at layers above and below ˆl. It is this death proba-
bility pattern that pushes, over several evolutionary rounds, the net-
work to take the shape of a (generally asymmetric) hourglass with
a waist at layer ˆl. The interested reader can ﬁnd these derivations
and further numerical results in our Technical Report [1].
In the rest of the paper, the results are generated from discrete-
time simulations of the EvoArch model. The beneﬁts of such com-
putational analysis are threefold: ﬁrst, we do not need to make fur-
ther simplifying assumptions. Second, we can examine the dynam-
ics of the model, focusing on how the shape of the network changes
with time. And third, we can quantify the variability of the results
across many different evolutionary paths, instead of only looking
at expected values.
3. BASIC RESULTS
In this section, we illustrate the behavior of the EvoArch model
focusing on the width of each layer across time. We also introduce
the main metrics we consider, and the default values of the model
parameters.
The default values of EvoArch’s parameters are: L = 10 layers,
s(l) = 1 − l/L (i.e., the generality decreases as 0.9, 0.8, . . . , 0.1, 0,
as we go up the stack), c = 0.6 (i.e., at least 3 out of 5 shared prod-
ucts), and z = 1 (see Figure 3). Each evolutionary path starts with
10 nodes at every layer, the average birth rate at each round is 5%
of the current network size, and an evolutionary path ends when the
network size reaches 500 nodes (but not sooner than 100 rounds).
Unless noted otherwise, we repeat each experiment 1000 times,
while the graphs show the median as well as the 10th, 25th, 75th
and 90th percentiles across all evolutionary paths. We emphasize
that the previous default values do not correspond, obviously, to
4We have also experimented with a termination condition based on
the number of rounds, instead of the number of nodes. There is no
signiﬁcant difference as long as the network can evolve for at least
few tens of rounds.
t
h
d
W
i
Round 100
Round 50
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
Layer Number
Figure 4: The median width of each layer at round-50 and
round-100 (percentiles are only shown for the latter).
the characteristics of the Internet stack. A parameterization of the
model for that speciﬁc architecture is given in Section 5.4. EvoArch
is a general model for layered protocol stacks and it does not aim
to only capture the existing Internet architecture.
Figure 4 shows the width of each layer at the 50th and 100th
rounds of the evolutionary process (typically, the network reaches
500 nodes in about 100–150 rounds). Note that, at least in terms of
the median, the width decreases as we move from the bottom layer
to a middle layer, around layer 5, and then it increases again as we
move towards the top layer. There is some variability across evo-
lutionary paths however, and so we further examine if the network
structure has the shape of an hourglass in every evolutionary path.
To do so, we introduce a metric that quantiﬁes the resemblance
of a layered network structure to an hourglass. Let w(l) be the
width of layer l, i.e., the number of nodes in that layer at a given
round. Let wb be the minimum width across all layers, and sup-
pose that this minimum occurs at layer l = b; this is the waist of
the network (ties are broken so that the waist is closer to ⌊L/2⌋).
Consider the sequence X = {w(l)}, l = 1, . . . b} and the sequence
Y = {w(l)}, l = b, . . . L}. We calculate the normalized univari-
ate Mann-Kendall statistic for monotonic trend on the sequences
X and Y as coefﬁcients τX and τY respectively [12]. The co-
efﬁcients vary between -1 (strictly decreasing) and 1 (strictly in-
creasing), while they are approximately zero for random samples.
We deﬁne H = (τY − τX )/2; H is referred to as the hourglass
resemblance metric. H = 1 if the network is structured as an hour-
glass, with a strictly decreasing sequence of b layers, followed by a
strictly increasing sequence of L − b layers. For example, the se-
quence of layer widths {10,6,8,2,4,7,10,12,9,16} (from bottom to
top) has wb = 4, τX = -0.67, τY = 0.81 and H = 0.74. Note that
we do not require the hourglass to be symmetric, i.e., the waist may
not always be at the middle layer.
Figure 5 shows H (median and the previous four percentiles) as
function of time. Note that it only takes few rounds, less than 10,
for the median H to exceed 80%. By the 100th round, the median
H is almost 95% and even the 10th percentile is more than 80%.
This illustrates that EvoArch generates networks that typically have
the shape of an hourglass. Even though the accuracy of the hour-
glass structure improves with time, the basic hourglass shape (say
H > 0.8) is formed within only few rounds. We have also exam-
ined the location of the waist as function of time, and the associated
10th and 90th percentiles across 1000 evolutionary paths (graph not
shown due to space constraints). With the default parameter values,
the median waist is almost always located at layer-6, while the 10th
and 90th percentiles correspond to layers-5 and 7, respectively. So,
even though there is some small variability in the exact location of
209H
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 0  10  20  30  40  50  60  70  80  90  100  110  120
Round
H Score
Figure 5: The hourglass resemblance metric H over time.
Layer 1
Layer 9
 Layer 6
h
t
i
d
W
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
 0  10  20  30  40  50  60  70  80  90  100  110  120
Round
Figure 6: The median width of three layers over time.
the waist across time and across different evolutionary paths, the
narrowest layer of the hourglass does not ﬂuctuate signiﬁcantly.
Figure 6 shows the median width of the typical waist (layer-6),
as well as the median width of layers-1 and 9, as functions of time.
Even though all three layers start from the same number of nodes,
layers-1 and 9 become signiﬁcantly wider with time, implying a
low death probability. On the other hand, the width of the waist
remains relatively low compared to other layers. It typically de-
creases signiﬁcantly in the ﬁrst few rounds, as several of the initial
nodes are “unlucky” in terms of products and die soon.
It then
slowly increases because higher layers become much wider, the
birth rate increases with the size of the network, and few additional
nodes at the waist can acquire signiﬁcant value compared to the
maximum-value node in that layer.
Obviously, the major question is: why does EvoArch generate
hourglass-shaped networks? Let us discuss separately what hap-
pens at layers close to the top, close to the bottom, and close to the
waist.
Because the generality probability s(l) is quite low at layers
close to the top, those nodes typically have a small number of
products. This means that they rarely compete with each other,
and so the death probability is close to zero. For instance, in the
application-layer a new protocol can compete and replace an in-
cumbent only if the former provides a very similar service with the
latter (e.g., recall the example with FTP and HTTP).
At layers close to the bottom, the generality probability is close
to one, and so those nodes have many shared products and thus
several competitors. Their value is often similar however, because
those nodes typically share almost the same set of products. Thus,
the death probability at layers close to the bottom is also quite low.
At layers close to waist, where the generality probability is close
to 50%, the variability in the number of products is maximized—
recall that the variance of a Bernoulli random variable X(p) is max-
imum when p=50%. So, few nodes in that layer may end up with
a much larger number of products than most other nodes in the
same layer, and so with a much higher value. Those nodes would
compete with most others in their layer, often causing the death of
their competitors. In other words, the death probability at bottom
and top layers is quite low, while the death probability close to the
waist is higher. The birth rate, on the other hand, is the same for all
layers, and so the network’s middle layers tend to become narrower
than the bottom or top layers.
The reader should not draw the conclusion from the previous
simpliﬁed discussion that the waist is always located at the layer
with s(l)=0.5. As will be shown in Section 5, the competition
threshold c also affects the location of the waist. Also, it is not
true that the node with the maximum value at the waist never dies.
Section 6 focuses on these “extraordinary” nodes, showing that,
even though they live much longer than almost all other nodes in
their layer, under certain conditions they can also die.
4. ROBUSTNESS
In this section, we focus on the robustness of the hourglass re-
semblance metric H with respect to the parameters of the EvoArch
model. The robustness study has two parts. First, we show that
wide deviations from the default value, for a single parameter at a
time, do not cause signiﬁcant changes in H. Second, we show that
even if we simultaneously and randomly vary all EvoArch param-
eters, the model still produces hourglass-like structures with high
probability.
Let us ﬁrst focus on the three most important EvoArch parame-
ters: the competition threshold c, the generality probability vector
s, and the mortality parameter z. We have also examined the ro-
bustness of H with respect to the number of layers L, the birth rate,
the number of initial nodes at each layer, or the stopping criterion,
but those parameters have a much smaller impact on H.
Figure 7-a shows the median H score (together with the previous
four percentiles) as we vary c between 0 and 1. The value c = 0
corresponds to “global” competition meaning that two nodes of the
same layer compete with each other even if they do not share any
products. When the competition threshold is so low, the death prob-
ability becomes signiﬁcant even at higher layers, as those nodes
start competing even without sharing many products. Thus, the up-
per part of the network deviates from the hourglass shape.
When c = 1, on the other hand, a node u competes with node
w only if the former shares all products of w. This means that
nodes rarely compete, and so most layers grow randomly, without
a signiﬁcant death probability. There is a wide range of c (between
0.1 and 0.9) in which we get reasonably good hourglass structures
(H > 0.8) in most evolutionary paths. The best results, however,
are produced in the range 0.5  0.9.
To study the robustness of the model with respect to the gener-
ality vector s, we consider a function s(l) comprising of two lin-
ear segments that satisfy the constraints: s(1)=0.9, s(γ)=0.5 and
s(L)=0, where γ is any layer between layer-2 and layer-(L-1). This
function allows us to place the layer γ at which the generality prob-
ability is 50% at any (interior) layer of the architecture. Figure 7-b
shows H as we vary the layer γ. The model is extremely robust
with respect to variations in the generality vector s and layer γ.
Figure 7-c shows H as we vary the mortality parameter z. We
limit the range of z to less than 2.0 so that the death probability is
almost zero only if the value ratio r is close to one; this is not true
for higher values of z (see Figure 3). Note that H is typically higher
than 0.9 when 0.75 < z < 1.5. For lower values of z, the death
210a-Effect of c on H
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
H Score
c
b-Effect of s on H
 2
 3
 4
 5
 6
 7
 8
 9
H Score
γ
c-Effect of z on H
H Score
H
 1