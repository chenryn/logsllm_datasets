Gen,Enc,r,Z1,Z2,(cid:126)α,(cid:126)ˆα
≥
Gen,Enc,r,Z1,Z2,(cid:126)α,(cid:126)ˆα
{S∗ wins linearity under E}
Pr
{S∗ wins linearity under E}
all 3 phases
= Pr
> 1/|F| + S.
(4)
the
holds
because
equality
(α1, . . . , αi + Z1, . . . , αj + Z1, . . . , αµ)
distribution
The
and
of
(ˆα1, . . . , Z2, . . . , ˆαµ)
to the distribu-
tion from which R selects in the decommit phases of the
three-phase experiment, under Commit+Multidecommit.
Meanwhile, inequality (4) contradicts inequality (1).
is equivalent
The
ahead
lemmas
show that,
under Com-
mit+Multidecommit, S is bound to a nearly linear
function, ˜f (·); speciﬁcally, ˜f (·) is δ∗-close to linear for
small δ∗. By contrast, previous work [35, 45] showed
only that S was bound to some function ˜f (·).
We now give some notation and restate two claims
from [45]. Let ζ be the event that R’s output is a vec-
tor (a1, . . . , aµ); equivalently, ζ is the event that R’s out-
put is non-⊥. Below, we sometimes write Prcomm{·} or
Prdecomm{·} to mean the probability over the random
choices of the commit or decommit phases.
√
C = µ · 2 · (2 3(cid:112)9/2 + 1) · 3
Lemma A.2 (Existence of an extractor function [45]).
Let (S, R) be a CFMD protocol with binding error B. Let
B. Let v = (vS∗, vR) rep-
resent the views of S∗ and R after the commit phase (v
captures the randomness of the commit phase). For ev-
ery efﬁcient S∗ and for every v, there exists a function
˜fv : Fn → F such that the following holds.7 For any en-
vironment E, the output of R at the end of the decommit
phase is, except with probability C, either ⊥ or satisﬁes
ai = ˜fv(qi) for all i ∈ [µ], where (q1, . . . , qµ) are the de-
commitment queries generated by E, and the probability
is over the random inputs of S∗ and R in both phases.
Lemma A.3. Let 3 = (2 3(cid:112)9/2 + 1)· 3
B . Label the ith
query in Q as qi and the ith response as ai. For all Q, i,
we have Prcomm,decomm{ζ ∩ {ai (cid:54)= ˜fv(qi)}} 
F} 
√
F}  1. Thus, we take ρ = 1, giving
G  δ(cid:48). There are two cases, and
4, then Rej(f ) ≥ 3δ −
both contradict the given. If δ  3δ(cid:48)−6δ(cid:48)2. If δ ≥ 1
9 > 3δ(cid:48)−6δ(cid:48)2.)
From lemma A.5, the probability is greater than 1 −
√
F over the commit phase that Rej(˜fv) ≤ √
F. We call
such commit phases usual. Under a usual commit phase,
we can apply the claim just above. To do so, we assume
√
F = 3δ∗ − 6δ∗2
9, and we set δ∗ so that
that
and δ∗ ≤ 1
4 (such a δ∗ is guaranteed to exist because the
parabola is symmetric about δ = 1
4). The claim implies
that Dist(˜fv) ≤ δ∗, or that ˜fv is δ∗-close to linear.
Lemma A.7. If the PCP oracle π is known to be δ∗-close
to linear, then the linear PCP (Section A.1) with linearity
testing removed has soundness error κ > max{4δ∗ +
2|F|, 4δ∗ + 1|F|}.
Proof. This follows from the proof ﬂow that establishes
the soundness of linear PCPs, as in [5]. (A self-contained
example is in Appendix D of [45].) Those proofs ﬁrst
establish that if the linearity test passes with probabil-
ity higher than the soundness error, then π is δ-close to
linear, for some δ. However, if we are given that π is δ∗-
close to linear, then we can start those proofs midway
and obtain the soundness of π as κ.
F < 2
√
Proof of Theorem A.1. Lemma A.2 implies that there
exists an extractor function that determines a (possibly
incorrect) oracle ˜π such that, if V(cid:48) does not reject during
decommit, then with all but probability C, V(cid:48) receives
back ˜π(q1), . . . , ˜π(qµ). We can thus “pay” probability
C in the union bound (below) to assume that V(cid:48) hears
back from ˜π itself. This allows us to apply Lemma A.6,
F more probability (again
at which point we can “pay”
in the union bound below) to get that ˜π is δ∗-close to lin-
ear. (Applying the lemma requires that
9, and we
will verify below that this bound holds.) Now, we can ap-
ply Lemma A.7 to ρ runs of the PCP protocol, giving a
PCP soundness error of κρ. Thus, the probability that V(cid:48)
wrongly accepts a proof is bounded from above by:
F < 2
√
√
√
G = C +
F + κρ.
16