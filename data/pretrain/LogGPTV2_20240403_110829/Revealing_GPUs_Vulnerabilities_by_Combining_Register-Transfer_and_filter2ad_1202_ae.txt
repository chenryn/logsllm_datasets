(cid:3)
(cid:1)
(cid:7)
(cid:8)
(cid:15)
(cid:9)
(cid:7)
(cid:3)
(cid:1)
(cid:9)
(cid:7)
(cid:10)
(cid:7)
(cid:13)
(cid:5)
(cid:11)
(cid:16)
(cid:4)
(cid:5)
(cid:3)
(cid:3)
(cid:1)
(cid:5)
(cid:8)
(cid:15)
(cid:9)
(cid:5)
(cid:1)
(cid:9)
(cid:5)
(cid:5)
(cid:3)
(cid:3)
(cid:1)
(cid:7)
(cid:8)
(cid:15)
(cid:9)
(cid:7)
(cid:3)
(cid:1)
(cid:9)
(cid:7)
(cid:10)
(cid:7)
(cid:13)
(cid:5)
(cid:11)
(cid:16)
(cid:4)
(cid:5)
(cid:3)
(cid:8)
(cid:6)
(cid:14)
(cid:13)
(cid:6)
(cid:1)
(cid:12)
(cid:2)
(cid:14)
(cid:4)
(cid:13)
(cid:7)
(cid:3)
(cid:3)
(cid:1)
(cid:5)
(cid:8)
(cid:15)
(cid:9)
(cid:5)
(cid:1)
(cid:9)
(cid:5)
(cid:5)
(cid:3)
(cid:3)
(cid:1)
(cid:7)
(cid:8)
(cid:15)
(cid:9)
(cid:7)
(cid:3)
(cid:1)
(cid:9)
(cid:7)
(cid:10)
(cid:7)
(cid:13)
(cid:5)
(cid:11)
(cid:16)
(cid:4)
(cid:5)
(cid:3)
(cid:8)
(cid:6)
(cid:14)
(cid:13)
(cid:6)
(cid:1)
(cid:12)
(cid:2)
(cid:14)
(cid:4)
(cid:13)
(cid:7)
Fig. 4. AVF of the injections at RTL level on the functional units (FP32, INT, SFU), the scheduler, and pipeline registers for the different instructions. We
plot the average AVF measured with the S, M, L input ranges.
and extremely important case study, we also characterize with
RTL fault injection a tile-based matrix multiplication (t-
MxM) mini-app. The choice of the mini-app is dictated by
the observation that more than 70% of operations inside a
CNN is MxM related [21]. To avoid memory latencies and,
thus, improve matrix multiplication efﬁciency, large matrix
multiplications are split into tiles (smaller MxM). The tile size
is set to maximize performances without saturating caches and
registers. In our framework the optimal tile size is of 8x8. Each
tile is assigned to a Streaming Multiprocessor and, then, all
tiles are combined to form the output of MxM. In a CNN, the
MxM output forms the layer output (feature map).
To select the input for t-MxM, we execute LeNET and
YOLOv3 with the MNIST [20] and VOC2012 [21] datasets,
and observed that most tiles involved in convolution process
have similar values, while the tiles at the edge of the feature
map have a higher amount of zero operands, because of
padding [20], [21]. We then characterize three inputs for the
tiles with the RTL fault injection: (Max) Max tile (the tile
with the highest sum of elements values), (Z) Zero tile (the
tile with the highest number of zeros), and (R) Random tile
(a tile selected among the ones without signiﬁcantly biased
values). We test 4 different values per tile type (Max, Z, R).
B. Architectural Vulnerability Factor
We perform fault injection in 6 GPU modules character-
izing, for most modules, 12 SASS instructions and t-MxM,
with different input sets (3 ranges and 4 values per range
for arithmetic operations and t-MxM). In total, we perform
144 RTL fault-injection campaigns and, for each campaign,
we inject more than 12,000 faults. That is, we present data
from more than 1,72x106 fault injections. This guarantees a
statistical margin error lower than 3%.
Figure 4 depicts, for injections in Functional Units (FP32,
INT, SFU), Warp Scheduler, and Pipeline Registers, the AVF
of each instruction. We have not considered injections in func-
tional units for GLD, GST, BRA, and ISET as the FUs are idle
when executing those instructions. In Figure 4 we distinguish
between SDCs affecting a single or multiple threads. As we
have observed, in accordance with [35], that the AVF does not
signiﬁcantly depend on the input range (the AVF difference
between S, M, and L inputs is always lower than 5%), in
Figure 4 we show the average AVF measured with the three
input ranges.
Figure 4 shows that faults in the scheduler are less likely to
impact the computation than faults in the functional units or
pipeline (the y axes are on different scales). We recall that in
our micro-benchmarks threads do not interact with each others,
reducing the scheduling strain. In Section V-D we show that
the scheduler AVF increases signiﬁcantly in more complex
codes. Moreover, the functional units corruptions are much
more likely to generate SDCs than DUEs while the outcome
of injections in the pipeline is mainly dominated by DUEs.
We further investigate the observed behaviours next.
More than 60% of the SDCs caused by scheduler corrup-
tions affect more than one thread for the INT and FP32 micro-
benchmarks while injections in the functional units cause
multiple threads corruption only for FSIN and FEXP. This is
because the GPU has a dedicated ADD, MUL, and MAD unit
for each thread while the few (two) available special function
units (SFUs) need to be shared among different threads (see
Figure 2). A deeper analysis of the multiple SDCs source
revealed that the multiple corrupted threads observed with
functional units corruptions in FSIN and FEXP are actually
caused by faults in the control units of the SFUs. Interestingly,
also pipeline injections cause multiple threads corruption.
Investigating the causes for those multiple threads we found
that, while most of pipeline registers (≈84%) store operands
for each parallel core, there is also a small portion of registers
(≈16%) devoted to control signals. The corruption of these
latter registers caused the observed multiple threads SDCs.
On the average, the number of corrupted parallel threads per
warp is 1 for INT and FP32 functional units, 8 for the SFUs,
28 for the scheduler, and 18 for the pipeline. These averages
show that the parallel operation’s modules in the GPU, such
as the scheduler and the pipeline, are more prone to corrupt a
high number of multiple threads in a warp than others. A fault
in the control structures and signals of the pipeline and, mainly,
of the scheduler (which manages the warp operation), affects
multiple threads. The lower number of threads corrupted in the
pipeline is related to the number of available FUs and active
threads at a given time (8 in our case). As some signals are
not updated until a new warp is dispatched, their corruption
affects, on the average, two of the four groups of 8 threads in
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 08:56:48 UTC from IEEE Xplore.  Restrictions apply. 
298
(cid:5)(cid:11)(cid:6)(cid:9)
(cid:5)(cid:4)(cid:13)(cid:10)
(cid:5)(cid:2)(cid:3)(cid:3)
(cid:5)(cid:12)(cid:1)(cid:11)(cid:22)(cid:14)(cid:21)(cid:21)
(cid:5)(cid:5)(cid:8)(cid:2)
(cid:5)(cid:12)(cid:1)(cid:8)(cid:17)(cid:16)(cid:20)(cid:26)(cid:22)
(cid:5)(cid:8)(cid:12)(cid:7)
(cid:4)(cid:1)(cid:8)(cid:13)
(cid:4)(cid:1)(cid:7)(cid:13)
(cid:4)(cid:1)(cid:6)(cid:13)
(cid:4)(cid:1)(cid:5)(cid:13)
(cid:4)(cid:1)(cid:8)(cid:13)
(cid:4)(cid:1)(cid:7)(cid:13)
(cid:4)(cid:1)(cid:6)(cid:13)
(cid:4)(cid:1)(cid:5)(cid:13)
(cid:4)(cid:1)(cid:4)(cid:13)
(cid:5)(cid:1)(cid:4)(cid:13)
(cid:4)(cid:1)(cid:10)(cid:13)
(cid:4)(cid:1)(cid:9)(cid:13)
(cid:4)(cid:1)(cid:8)(cid:13)
(cid:4)(cid:1)(cid:6)(cid:13)
(cid:4)(cid:1)(cid:4)(cid:13)
(cid:5)(cid:1)(cid:4)(cid:13)
(cid:4)(cid:1)(cid:10)(cid:13)
(cid:4)(cid:1)(cid:9)(cid:13)
(cid:4)(cid:1)(cid:8)(cid:13)
(cid:4)(cid:1)(cid:6)(cid:13)
(cid:4)(cid:1)(cid:4)(cid:13)
(cid:4)(cid:3)(cid:2)(cid:1)(cid:5)(cid:3)(cid:2)(cid:1)(cid:4) (cid:3)(cid:2)(cid:1)(cid:3) (cid:3)(cid:2)(cid:1)(cid:2) (cid:3)(cid:2) (cid:5)(cid:3)(cid:2)(cid:2)
(cid:4)(cid:1)(cid:4)(cid:13)
(cid:11)(cid:7)(cid:9)(cid:6)(cid:12)(cid:8)(cid:13)(cid:7)(cid:1)(cid:7)(cid:11)(cid:11)(cid:10)(cid:11)
(cid:10)(cid:20)(cid:24)(cid:17)(cid:21)(cid:20)(cid:23)(cid:17)(cid:1)(cid:11)(cid:22)(cid:14)(cid:21)(cid:21)
(cid:4)(cid:3)(cid:2)(cid:1)(cid:5)(cid:3)(cid:2)(cid:1)(cid:4) (cid:3)(cid:2)(cid:1)(cid:3) (cid:3)(cid:2)(cid:1)(cid:2) (cid:3)(cid:2) (cid:5)(cid:3)(cid:2)(cid:2)
(cid:11)(cid:7)(cid:9)(cid:6)(cid:12)(cid:8)(cid:13)(cid:7)(cid:1)(cid:7)(cid:11)(cid:11)(cid:10)(cid:11)
(cid:11)(cid:15)(cid:19)(cid:17)(cid:16)(cid:26)(cid:21)(cid:17)(cid:25)(cid:1)(cid:11)(cid:22)(cid:14)(cid:21)(cid:21)
(cid:4)(cid:3)(cid:2)(cid:1)(cid:5)(cid:3)(cid:2)(cid:1)(cid:4) (cid:3)(cid:2)(cid:1)(cid:3) (cid:3)(cid:2)(cid:1)(cid:2) (cid:3)(cid:2) (cid:5)(cid:3)(cid:2)(cid:2)
(cid:11)(cid:7)(cid:9)(cid:6)(cid:12)(cid:8)(cid:13)(cid:7)(cid:1)(cid:7)(cid:11)(cid:11)(cid:10)(cid:11)
(cid:10)(cid:20)(cid:24)(cid:17)(cid:21)(cid:20)(cid:23)(cid:17)(cid:1)(cid:8)(cid:17)(cid:16)(cid:20)(cid:26)(cid:22)
(cid:4)(cid:3)(cid:2)(cid:1)(cid:5)(cid:3)(cid:2)(cid:1)(cid:4) (cid:3)(cid:2)(cid:1)(cid:3) (cid:3)(cid:2)(cid:1)(cid:2) (cid:3)(cid:2) (cid:5)(cid:3)(cid:2)(cid:2)
(cid:11)(cid:7)(cid:9)(cid:6)(cid:12)(cid:8)(cid:13)(cid:7)(cid:1)(cid:7)(cid:11)(cid:11)(cid:10)(cid:11)
(cid:11)(cid:15)(cid:19)(cid:17)(cid:16)(cid:26)(cid:21)(cid:17)(cid:25)(cid:1)(cid:8)(cid:17)(cid:16)(cid:20)(cid:26)(cid:22)
(cid:4)(cid:3)(cid:2)(cid:1)(cid:5)(cid:3)(cid:2)(cid:1)(cid:4) (cid:3)(cid:2)(cid:1)(cid:3) (cid:3)(cid:2)(cid:1)(cid:2) (cid:3)(cid:2) (cid:5)(cid:3)(cid:2)(cid:2)
(cid:11)(cid:7)(cid:9)(cid:6)(cid:12)(cid:8)(cid:13)(cid:7)(cid:1)(cid:7)(cid:11)(cid:11)(cid:10)(cid:11)
(cid:5)(cid:1)(cid:4)(cid:13)
(cid:4)(cid:1)(cid:10)(cid:13)
(cid:4)(cid:1)(cid:9)(cid:13)
(cid:4)(cid:1)(cid:8)(cid:13)
(cid:4)(cid:1)(cid:6)(cid:13)
(cid:4)(cid:1)(cid:4)(cid:13)
(cid:5)(cid:1)(cid:4)(cid:13)
(cid:4)(cid:1)(cid:10)(cid:13)
(cid:4)(cid:1)(cid:9)(cid:13)
(cid:4)(cid:1)(cid:8)(cid:13)
(cid:4)(cid:1)(cid:6)(cid:13)
(cid:4)(cid:1)(cid:4)(cid:13)
(cid:4)(cid:1)(cid:8)(cid:13)
(cid:4)(cid:1)(cid:7)(cid:13)
(cid:4)(cid:1)(cid:6)(cid:13)
(cid:4)(cid:1)(cid:5)(cid:13)
(cid:4)(cid:1)(cid:4)(cid:13)
(cid:5)(cid:1)(cid:4)(cid:13)
(cid:4)(cid:1)(cid:10)(cid:13)
(cid:4)(cid:1)(cid:9)(cid:13)
(cid:4)(cid:1)(cid:8)(cid:13)
(cid:4)(cid:1)(cid:6)(cid:13)