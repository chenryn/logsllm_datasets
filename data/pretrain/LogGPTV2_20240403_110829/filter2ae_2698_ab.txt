    curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add  - 
    sudo apt-get install apt-transport-https
    sudo apt-get update && sudo apt-get install azure-cli
### 通过Web Session进行身份验证
正确安装所有内容后，您需要使用已获取的凭据创建与Azure的会话。最简单的方法是在普通浏览器中使用ADFS或OWA进行身份验证，然后：
    az login
这将在本地生成`OAUTH`令牌，打开浏览器选项卡到身份验证页面，让您根据已经通过身份验证的帐户再次选择一个帐户。选择完了之后，服务器将验证本地`OAUTH`令牌，除非这些令牌过期或被销毁，否则您将不必再次执行此操作。您还可以传递`-use-device-code`标志，该标志将生成您提供给`https://microsoft.com/devicelogin`的令牌。
### 读取数据
现在到了我最喜欢的部分！已经有许多技术用于提取先前研究过的GAL，例如在OWA中使用`FindPeople`和`GetPeopleFilter
Web`服务。这些技术对于red
teamers来说是一个很好的资源，但在以下方面确实会有期局限性：比如有哪些数据是可用的，列举用户需要多长时间，根据Web请求数量确定我们需要多大的空间以及它偶尔中断的频率。有了`AZ
CLI`，就可以非常轻松地提取每个用户的所有目录信息。在下面的示例中，我应用`JMESPath`过滤器来提取我需要的数据。我也可以将其导出为表格，JSON或TSV格式！
### 所有用户
    az ad user list --output=table --query='[].{Created:createdDateTime,UPN:userPrincipalName,Name:displayName,Title:jobTitle,Department:department,Email:mail,UserId:mailNickname,Phone:telephoneNumber,Mobile:mobile,Enabled:accountEnabled}'
### 特定用户
如果您知道目标帐户的UPN，则可以通过传入`-upn`标志来检索特定帐户，您也可以很方便地深入了解特定帐户的`Active
Directory`信息。在下面的示例中，您将注意到我提供了JSON格式而不是`table output`。
    az ad user list --output=json --query='[].{Created:createdDateTime,UPN:userPrincipalName,Name:displayName,Title:jobTitle,Department:department,Email:mail,UserId:mailNickname,Phone:telephoneNumber,Mobile:mobile,Enabled:accountEnabled}' --upn=''
## 实用命令
下一个我最喜欢的功能是转储组的能力。了解如何在一个组织中发挥一个团队的作用可以帮助我们深入了解业务，用户以及管理员身份。`AZ
CLI`提供了一些有用的命令，可以在这里提供帮助。
### 所有团体
我通常做的第一件事就是导出所有组。然后我可以找到某些关键字：管理员，VPN，财务，亚马逊，Azure，Oracle，VDI，开发人员等。虽然有其他组元数据可用，但我倾向于只获取名称和描述。
    az ad group list --output=json --query='[].{Group:displayName,Description:description}'
### 特定小组成员
一旦你审查了这些小组并挑选了其中一些较为有趣的小组，这将为您提供一个很好的目标列表，这些目标是这些有趣的群体的一部分,与流行的观点不同，我发现技术能力和头衔不会降低预期目标避免移交其凭证（甚至是MFA令牌）的可能性。换句话说，每个人都很容易受到攻击，所以我通常针对后端工程师和devops团队，因为他们往往拥有最多的访问权限，而且我可以保持在外网但依然可以访问私人`GitHub
/ GitLab`代码存储库，Jenkins为shell构建服务器，`OneDrive /
GDrive`文件共享敏感数据，Slack团队负责敏感文件和一系列其他第三方服务。再强调一次，如果你不需要的话就没有必要进入内部。
    az ad group member list --output=json --query='[].{Created:createdDateTime,UPN:userPrincipalName,Name:displayName,Title:jobTitle,Department:department,Email:mail,UserId:mailNickname,Phone:telephoneNumber,Mobile:mobile,Enabled:accountEnabled}' --group=''
## 应用程序
Microsoft提供的另一个不错的特点是能够注册使用`SSO / ADFS`或与其他技术集成的应用程序。许多公司将其用于内部应用。这对于red
teamers来说是非常棒的，因为与应用程序相关联的元数据可以帮助我们更深入的了解在侦察期间可能尚未发现的攻击面，例如URL。
### 所有应用
    az ad app list --output=table --query='[].{Name:displayName,URL:homepage}'
### 具体应用
在下面的屏幕截图中，您可以看到我们通过检查与Azure中已经注册的应用程序相关联的元数据来获取Splunk实例的URL。
    az ad app list --output=json --identifier-uri=''
### 所有服务负责人
    az ad sp list --output = table --query ='[]。{Name：displayName，Enabled：accountEnabled，URL：homepage，Publisher：publisherName，MetadataURL：samlMetadataUrl}'
### 特定服务负责人
    az ad sp list --output = table --display-name =''
## 使用JMESPath进行高级过滤
在上面的示例中您可能已经注意到我尝试限制返回的数据量，这主要是因为我仅仅想获取我所需要的，而不是所有的信息。`AZ
CLI`处理此问题的方法是将`-query`标志与`JMESPath`查询一起使用，这是用于与JSON交互的标准查询语言。在将查询标志与`show`内置函数结合使用时，我注意到了一些`AZ
CLI`的错误使用。另一个需要注意的是，默认的响应格式是JSON，这意味着如果您打算使用查询过滤器，则需要明确正确的区分大小写的命名约定。不同格式的名称之间存在一些不一致，如果您使用表格格式，它可能会在JSON小写时大写。
## 禁止访问Azure Portal
我花了一些时间试图弄清楚要禁用的内容，如何防止访问，如何限制，监控什么，甚至在Twitter上与人联系（在此感谢Josh
Rickard！），我感谢所有愿意帮助理解这种疯狂行为的人。我想为了能提供更好的建议，我应该更多地学习微软生态系统。在此之前，我为您提供了一种禁用`Azure
Portal`访问用户的方法。我没有对此进行测试，也无法确定这是否包括`AZ CLI`，`Azure RM Powershell`和`Microsoft
Graph API`，但它绝对会是一个开始。
步骤1）使用`Global Administrator`帐户`https://portal.azure.com`登录Azure
步骤2）在左侧面板中，选择“Azure Active Directory”
步骤3）选择“用户设置”
步骤4）选择“限制对Azure AD管理门户的访问”
另一种方法是查看`Conditional Access Policies`：`https：//docs.microsoft.com/en-us/azure/active-directory/conditional-access/overview`
## 期待
有许多不同的工具可用于测试AWS环境，甚至是最近出现的用于捕获SharpCloud等云凭据的新工具，云环境似乎是一个常被忽视的攻击面。
我将发布一个（目前是私有的）red team框架，用于与云环境进行交互，称为
CloudBurst。它可以使用户能够与不同的云供应商进行交互，从而获取，攻击和泄露数据。
    原文地址：https://www.blackhillsinfosec.com/red-teaming-microsoft-part-1-active-directory-leaks-via-azure/