# 前言
本文将探讨Windows API中一个至关重要的功能。本研究的动机源于几周前的一个项目，在该项目中，我试图编写一个DLL的反射加载器，但未能成功（问题最终与某些重定位相关）。为了解决这个问题，我决定深入研究Windows处理库加载的过程。

本文将重点讨论调用`LoadLibrary`时执行的内核代码，而用户模式下的细节将被简略提及。同时，我也不会详细解析内核中的每一个调用或指令，而是聚焦于我认为最重要的功能和结构。

# LoadLibrary
在分析过程中，我将使用以下代码片段作为示例：
```c
int WinMain(...) {
    HMODULE hHandle = LoadLibraryW(L"kerberos.dll");
    return 0;
}
```
我选择使用Unicode版本的函数，因为内核只处理这类字符串，这有助于简化我的研究。

当`LoadLibraryW`被调用时，首先会跳转到`KernelBase.dll`（这是由于自Windows 7以来采用的新MinWin内核）。在`KernelBase`中，`RtlInitUnicodeStringEx`函数首先被调用，它将传入的字符串参数转换为`UNICODE_STRING`结构。接下来，控制权传递给`LdrLoadDLL`函数，该函数进一步调用`LdrpLoadDll`。这两个函数是用户模式下所有代码被执行的地方。经过一些完整性检查后，我们进入内核代码的第一步——`NtOpenSection`函数。

# NtOpenSection 函数
首先，我们需要理解“Section”对象的概念。根据Windows驱动程序文档中的[“Section Objects and Views”](https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/section-objects-and-views)部分，“Section Object”表示可以共享的存储区域，并且提供了一种机制，使得进程能够将文件映射到其地址空间。

尽管Windows内核主要用C语言编写，但它具有一定的面向对象特性（尽管并不完全符合面向对象编程的原则），因此我们在内核中经常讨论各种对象，如这里的“Section Object”。

### 参数
`NtOpenSection`函数接收三个参数（在x64架构上，按照__fastcall调用约定，前四个参数通过寄存器传递）：
- `rcx`：指向接收对象句柄的指针。
- `rdx`：请求的对象访问权限掩码。
- `r8`：指向`OBJECT_ATTRIBUTES`结构的指针。

这些参数如下图所示：

`ACCESS_MASK`是一个组合值，定义在[winnt.h](https://www.codemachine.com/downloads/win10/winnt.h)头文件中：
```c
#define SECTION_QUERY                0x0001
#define SECTION_MAP_WRITE            0x0002
#define SECTION_MAP_READ             0x0004
#define SECTION_MAP_EXECUTE          0x0008
```

### 执行流程
与其他内核函数类似，`NtOpenSection`首先获取`PreviousMode`，然后进行一系列检查。其中一个检查是验证`PHANDLE`值是否超过`MmUserProbeAddress`，如果检查失败，则返回错误998（“无效的内存访问位置”）。

如果所有检查都通过，代码将进入`ObOpenObjectByName`函数，该函数接收一个类型为Section的对象，此对象从`MmSectionObjectType`地址中检索。

接下来，内核从LookAside List 8中获取一个池（`KTHREAD->PPLookAsideList`），并将`OBJECT_ATTRIBUTES`的数据存储在一个`OBJECT_CREATE_INFORMATION`结构中。如果对象属性包含名称（`UNICODE_STRING`），则将其复制到`r9`指向的地址，并稍作修改，最大长度改为`F8h`。

返回后，内核获取指向`KTHREAD`和`KPROCESS`的指针，进而获取`UniqueProcessId`。随后，调用`SepCreateAccessStateFromSubjectContext`函数，该函数属于“安全参考监视器”组件，主要用于检查访问和权限。

下一步是调用`ObpLookupObjectName`函数，该函数基于名称（在这里是DLL名称）查找对象。如果DLL不在“KnownDlls”列表中，函数将返回错误“c0000034”（“找不到对象名”）。

### KnownDll
假设我们要加载的DLL在“KnownDlls”列表中。我们可以将“kerberos.dll”添加到注册表项`HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Session Manager\KnownDLLs`中。需要注意的是，操作注册表需要提升权限。

在下图中，你可以看到`kerberos.dll`作为已知DLL的一部分加载的情况。`ObpLookupObjectName`函数这次返回0而非“c0000034”。

对于这种情况，我们将直接从计算哈希的点开始查看代码流。以下是计算哈希的伪代码：
```c
QWORD res = 0;
DWORD hash = 0;
DWORD size = Dll.Length >> 1;
PWSTR dll_buffer = unicode_string_dll.Buffer;
if (size > 4) {
    do {
        QWORD acc = dll_buffer;
```

> **注意！** 此函数未记录，因此实现可能因Windows版本或服务包的不同而有所变化。我在本文中使用的内核版本是**Windows 8.1 Kernel Version 9600 MP (2 procs) Free x64**。

希望这篇文章能帮助你更好地理解`LoadLibrary`和`NtOpenSection`函数的工作原理。