20
738
Time
(sec)
41
4
10,042
12
60
2,082
Table 4: Additional WAPTEC results
plication. The hostile input was produced by negating a length
constraint found in fclient, and fserver did not contain the repli-
cated length constraint. However, database implicitly enforced the
length check and this attack did not succeed. Without considering
sanitization and database constraints, such false positives cannot be
avoided.
Required variables. Another source of false positives for NO-
TAMPER is attributed to required variables that are enforced only
at the server-side. In these cases, the client contains insufﬁcient in-
formation to generate a truly benign input that satisﬁes the server’s
demand for certain variables. Any required variables in fserver can
easily be identiﬁed in a whitebox approach through code analysis,
but have to be heuristically determined in a blackbox approach.
For example, NOTAMPER failed to catch the category hijacking
exploit in the mybloggie application because of missed required
variables. In this example, the server-side code required the client
to set value of either submit or preview parameter. As NOTAM-
PER failed to set any of these values, the server generated a response
page containing the same form for both benign and hostile inputs
thus resulting in a false positive.
WAPTEC demonstrated that a whitebox approach produces im-
proved results over the blackbox approach used by NOTAMPER.
WAPTEC uncovered a greater number of exploits and eliminated
false positives and false negatives by precisely reasoning about
form inputs across the entire application (client and server).
In
contrast, NOTAMPER is limited to using constraints implied by the
client-side code and employs heuristics to determine if the server-
side code accepted / rejected inputs and thus inherently suffers from
false positives and false negatives.
Although WAPTEC results are consistently better than NOTAM-
PER, both of these approaches have their own utility. As NOTAM-
PER does not rely on analyzing server-side code, it could be em-
ployed to analyze a wider range of applications and websites. How-
ever if the source code is available, a whitebox analysis based ap-
proach like WAPTEC could be employed to perform deeper code
analysis to pinpoint more security problems. Further, by ensur-
ing production of exploits by construction, the whitebox approach
can reduce the human effort in conﬁrming exploits that may be un-
avoidable in blackbox approaches.
6.3 Complexity and performance
For each evaluated application, Table 4 captures complexity of
generated formulas (column 2 - client-side constraints, column 3 -
server-side constraints, column 4 - database constraints), average
size of generated traces (column 5 - kilo bytes) and average time
taken to run the tool (column 6 - seconds).
Outliers. The most notable application we tested, dcpportal,
included the largest formula complexities, the largest number of
exploits, and the longest running time. The larger the formula com-
plexity, the larger and more complex the form; hence, a longer
running time is to be expected. The large number of exploits is
584partially attributed to large formula complexity because the poten-
tial number of exploit generation attempts is larger; however, the
presence of a large number of conﬁrmed exploits points to poor
server-side validation of inputs.
Manual intervention.
In a preliminary analysis of the cho-
sen applications, we selected forms that contained interesting client
side speciﬁcations and collected login credentials necessary to ac-
cess them (in 5 applications). We also extracted form action param-
eters in cases where applications reused processing code between
multiple forms (total of 4). These hints were necessary to facilitate
automatic analysis and to restrict exploration of server-side code
pertaining to other forms. Overall, it required typically less than 5
minutes to collect this data for each form.
7. RELATED WORK
The related work is organized along the dimensions of various
contributions of WAPTEC.
Multi-tier reasoning of web applications. Web applications,
those following LAMP model in speciﬁc, are inherently multi-tiered:
client-side code written in HTML / JavaScript, server-side code
written in PHP and database schema expressed in MySQL. To pre-
cisely construct parameter tampering exploits, WAPTEC reasons
across these tiers and expresses them uniformly in the language of
the solver. To the best of our knowledge, WAPTEC is the ﬁrst
work that offers a systematic multi-tiered analysis for legacy web
applications. Most existing works on web application analysis do
not reason across all tiers. Balzarotti et al. [5] offer a system that
tries to reason across modules of a web application to ﬁnd data and
work ﬂow attacks on web applications and in doing so offer limited
support for ﬁnding URLs embedded in JavaScript and HTML code.
Programming languages such as Links [9, 10] and frameworks such
as [1, 8] offer principled construction of multi-tiered applications,
however do not assist analysis of legacy web applications. In con-
trast, WAPTEC offers a much powerful analysis framework that
combines concolic analysis of the HTML / JavaScript with static
analysis of runtime traces for legacy web applications.
Speciﬁcation inference.
AutoISES [25] is an approach for
C program bug detection that mines for common security-related
patterns and identiﬁes deviations from these as vulnerabilities. En-
gler [12] detects security bugs in C programs by mining temporal
safety patterns and checking for inconsistencies. Srivastava [23]
et al. exploit the difference between multiple implementations of
the same application programming interface to detect security vio-
lations. Felmetsger et al. [13] monitor normal execution of a web
application to infer a set of behavioral speciﬁcation to ﬁnd paths in
program that will likely violate these speciﬁcations and hence may
indicate missing checks.
In contrast to these approaches, in our
problem context, we are analyzing the two distinctive code bases
of a single web application and have developed techniques to check
consistencies between these two code bases.
Test input generation. A rich literature exists on automating
the task of test input generation [21, 16, 19, 11, 14, 15, 22]. Sax-
ena et al. Kudzu [21] combines the use of random test generation
and symbolic execution for testing JavaScript applications with a
goal to ﬁnd code injection vulnerabilities in the client-side code
that result from untrusted data provided as arguments to sensitive
operations. Halfond et al.
[16] employ symbolic execution and
constraint solving to infer web application interfaces for improved
testing and analysis of web applications. Kie˙zun et al. [19] use
symbolic execution and a library of attack strings to ﬁnd code injec-
tion attacks in web applications. Sen et al. [22] propose a technique
that combines concrete and symbolic execution to avoid redundant
test cases as well as false warnings. Authors of [15, 14] propose
techniques to record an actual run of the program under test on ei-
ther a well-formed input [15] or random inputs [14], symbolically
evaluate the recorded trace, and gather constraints on inputs captur-
ing how the program uses these. The collected constraints are then
negated one by one and solved with a constraint solver, produc-
ing new inputs that exercise different control paths in the program.
Although WAPTEC aims to ﬁnd hostile inputs and in that sense
is similar to these approaches, our formulation of the parameter
tampering problem as one checking the consistency of the server
and client codebases and development of web application speciﬁc
methods such as perturbation that are specialized to this problem
makes it distinctive.
Emmi et al. [11] concolically execute server-side code and an-
alyze executed SQL queries to ﬁnd missing database records to
improve branch coverage in testing. WAPTEC tests legacy ap-
plications that typically contain relevant records in databases and
extracts database constraints to improve precision of results. A key
technical difference is that Emmi et al. decode WHERE clauses to
reason about “missing records" in the current database and do not
elaborate satisfying “database metadata" (typically database table
schema) to generate such inputs. WAPTEC’s database handling
criteria is based on such schema analysis. In particular, it relies on
the insight that database schema encodes constraints that must be
satisﬁed by acceptable hostile and benign inputs.
Input validation. The lack of sufﬁcient input validation is a ma-
jor source of security vulnerabilities in web applications, including
the type of vulnerabilities reported in this paper. As a result, there is
a fairly well developed body of literature in server side techniques
that attempt to curb the impact of untrusted data. Attacks such
as SQL injection and Cross-site Scripting are well studied (e.g.,
[24] and many others) examples in which untrusted data can result
in unauthorized actions in a web application. WAPTEC is simi-
lar to such studies in the sense that it can ﬁnd vulnerabilities that
could be exploited by SQL injection or Cross-site Scripting attacks.
However, WAPTEC uses client-side code as a speciﬁcation of the
expected server-side behavior and hence is able to also ﬁnd logic
vulnerabilities that do not necessarily require code injection. Few
recent works have focused on automatically discovering parameter
pollution [3] and parameter tampering vulnerabilities [7]. Bethea
et al.
[6] discuss enforcement strategies for misbehaving clients
in the context of online games. Jayaraman et al. [18] present an
approach to enforce intended sequence of requests in web applica-
tions to prevent request integrity attacks.
Sanitization. Sanitization of inputs is an effective layer of de-
fense for attacks that ride user inputs. Typically sanitization aims
to re-write hostile inputs to render them benign. Unfortunately,
there is no standard technique to sanitize user inputs which often
results in vulnerable applications that inadequately sanitize inputs.
Saner [4] attempts to identify and validate adequacy of sanitization
routines in web applications. It models sanitization performed by
web application as an automata and detects inadequacy by ﬁnding
nonempty intersections with automata characterizing successful at-
tacks. Recently, BEK [17] proposes a language for writing sani-
tizers that enables systematic reasoning about their correctness. To
select a server-side control path to analyze, WAPTEC generates
inputs that satisfy the client-side validation. In general, this leads
to selection of paths in the server-side code that do not sanitize
user inputs. For cases where sanitization is performed on all con-
trol paths, WAPTEC offers a limited reasoning of sanitization. In
summary, all of the above research works provide the much needed
starting points for sound reasoning about sanitization in web appli-
cations, an important area that needs further research.
5858. CONCLUSION
In this paper, we presented WAPTEC, an approach and tool for
automatically generating exploits for parameter tampering vulner-
abilities. Our approach uses a combination of formal logic and
constraint solving, symbolic evaluation and dynamic analysis. We
presented an evaluation of six open source applications and our tool
was able to ﬁnd at least one exploit in every single application.
Our paper illustrates that it is indeed possible to extract and use
speciﬁcations of intended behavior from its own (client side) code.
The numerous exploits found by our approach further illustrate that
there does exist a gap between validation checks that must happen
in a web application and those that actually happen.
Acknowledgements
This work was partially supported by National Science Foundation
grants CNS-0845894, CNS-0917229 and CNS-1065537. Thanks
are due to Kalpana Gondi for her helpful comments. Finally, we
thank the anonymous referees for their feedback.
9. REFERENCES
[1] Google Web Toolkit.
http://www.google.com/webtoolkit/.
[2] Ruby on Rails. http://www.rubyonrails.org/.
[3] BALDUZZI, M., GIMENEZ, C. T., BALZAROTTI, D., AND
KIRDA, E. Automated Discovery of Parameter Pollution
Vulnerabilities in Web Applications . In 18th Annual
Network and Distributed System Security Symposium (San
Diego, CA, USA, 2011).
[4] BALZAROTTI, D., COVA, M., FELMETSGER, V.,
JOVANOVIC, N., KRUEGEL, C., KIRDA, E., AND VIGNA,
G. Saner: Composing Static and Dynamic Analysis to
Validate Sanitization in Web Applications. In SP’08:
Proceedings of the 29th IEEE Symposium on Security and
Privacy (Oakland, CA, USA, 2008).
[5] BALZAROTTI, D., COVA, M., FELMETSGER, V. V., AND
VIGNA, G. Multi-Module Vulnerability Analysis of
Web-based Applications. In CCS’07: Proceedings of the
14th ACM Conference on Computer and Communications
Security (Alexandria, Virginia, USA, 2007).
[6] BETHEA, D., COCHRAN, R., AND REITER, M. Server-side
Veriﬁcation of Client Behavior in Online Games. In
NDSS’10: Proceedings of the 17th Annual Network and
Distributed System Security Symposium (San Diego, CA,
USA, 2010).
[7] BISHT, P., HINRICHS, T., SKRUPSKY, N., BOBROWICZ,
R., AND VENKATAKRISHNAN, V. NoTamper: Automatic
Blackbox Detection of Parameter Tampering Opportunities
in Web Applications. In 17th ACM Conference on Computer
and Communications Security (Chicago, Illinois, USA,
2010).
[8] CHONG, S., LIU, J., MYERS, A. C., QI, X., VIKRAM, K.,
ZHENG, L., AND ZHENG, X. Secure Web Application via
Automatic Partitioning. SIGOPS Oper. Syst. Rev. 41, 6
(2007), 31–44.
[9] COOPER, E., LINDLEY, S., WADLER, P., AND YALLOP, J.
Links: Web programming without tiers. In FMCO (2006).
[10] CORCORAN, B. J., SWAMY, N., AND HICKS, M.
Cross-tier, label-based security enforcement for web
applications. In Proceedings of the ACM SIGMOD
International Conference on Management of Data
(SIGMOD) (June 2009), pp. 269–282.
[11] EMMI, M., MAJUMDAR, R., AND SEN, K. Dynamic Test
Input Generation for Database Applications. In ISSTA’07:
Proceedings of the 2007 International Symposium on
Software Testing and Analysis (London, UK, 2007).
[12] ENGLER, D., CHEN, D. Y., HALLEM, S., CHOU, A., AND
CHELF, B. Bugs as Deviant Behavior: A General Approach
to Inferring Errors in Systems Code. In 18th ACM
Symposium on Operating Systems Principles (Banff, Alberta,
Canada, 2001).
[13] FELMETSGER, V., CAVEDON, L., KRUEGEL, C., AND
VIGNA, G. Toward Automated Detection of Logic
Vulnerabilities in Web Applications. In 19th USENIX
Security Symposium (Washington, DC, USA, 2010).
[14] GODEFROID, P., KLARLUND, N., AND SEN, K. DART:
Directed Automated Random Testing. SIGPLAN Not. 40, 6
(2005), 213–223.
[15] GODEFROID, P., LEVIN, M. Y., AND MOLNAR, D. A.
Automated Whitebox Fuzz Testing. In NDSS’08:
Proceedings of the 15th Annual Network and Distributed
System Security Symposium (San Diego, CA, USA, 2008).
[16] HALFOND, W., ANAND, S., AND ORSO, A. Precise
Interface Identiﬁcation to Improve Testing and Analysis of
Web Applications. In ISSTA’09: Proceedings of the ACM
SIGSOFT International Symposium on Software Testing and
Analysis (Chicago, IL, USA, 2009).
[17] HOOIMEIJER, P., LIVHSITS, B., MOLNAR, D., SAXENA,
P., AND VEANES, M. Fast and Precise Sanitizer Analysis
with BEK. In 20th USENIX Security Symposium (San
Francisco, CA, USA, 2011).
[18] JAYARAMAN, K., LEWANDOWSKI, G., TALAGA, P. G.,
AND CHAPIN, S. J. Enforcing Request Integrity in Web
Applications. In DBSec’10: Proceedings of the 24th Annual
IFIP WG 11.3 Working Conference on Data and
Applications Security and Privacy (Rome, Italy, 2010).
[19] KIE ˙ZUN, A., J. GUO, P., JAYARAMAN, K., AND D. ERNST,
M. Automatic Creation of SQL Injection and Cross-site
Scripting Attacks. In ICSE’09: Proceedings of the 31st
International Conference on Software Engineering
(Washington, DC, USA, 2009).
[20] KING, J. C. Symbolic execution and program testing.
Commun. ACM 19, 7 (1976).
[21] SAXENA, P., AKHAWE, D., HANNA, S., MAO, F.,
MCCAMANT, S., AND SONG, D. A Symbolic Execution
Framework for JavaScript. In 31st IEEE Symposium on
Security and Privacy (Oakland, CA, USA, 2010).
[22] SEN, K., MARINOV, D., AND AGHA, G. CUTE: A
Concolic Unit Testing Engine for C. In 10th European
Software Engineering Conference.
[23] SRIVASTAVA, V., BOND, M. D., MCKINLEY, K. S., AND
SHMATIKOV, V. A Security Policy Oracle: Detecting
Security Holes using Multiple API Implementations. In
ACM Conference on Programming Language Design and
Implementation (San Jose, CA, USA, 2011).
[24] SU, Z., AND WASSERMANN, G. The Essence of Command
Injection Attacks in Web Applications. In 33rd symposium
on Principles of programming languages (Charleston, SC,
USA, 2006).
[25] TAN, L., ZHANG, X., MA, X., XIONG, W., AND ZHOU, Y.
AutoISES: Automatically Inferring Security Speciﬁcations
and Detecting Violations. In 17th USENIX Security
Symposium (San Jose, CA, USA, 2008).
586