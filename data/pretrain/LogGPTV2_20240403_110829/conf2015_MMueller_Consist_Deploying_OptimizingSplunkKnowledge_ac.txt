  well 
  Also 
  great 
  in 
  combina:on 
  with 
  normalized 
  field 
  names 
  and 
  values –The 
  unified 
  searches 
  find 
  events 
  over 
  many 
  systems 
–The 
  returned 
  results 
  also 
  provide 
  homogenous 
  data 
  back 
  to 
  you 
 That‘s 
  the 
  Splunk 
  Common 
  Informa:onSplunk 
  Common 
  Informa:on 
  Model 
  in 
  a 
  nutshell 
  Further 
  reading 
  at 
  hmp://docs.splunk.com/Documenta:on/CIM
37 
Splunk 
  login 
  example 
  TA-­‐splunk, 
  tags.conf: 
  [eventtype=splunk_access] application = enabled 
authentication = enabled 
  The 
  search 
  tag=application tag=authentication 
  yields (((index=_audit "action=login attempt" NOT "action=search"))) (((index=_audit"action=login attempt" NOT "action=search"))) 
  The 
  evenmype 
  is 
  included 
  twice! 
38 
How 
  tags 
  really 
  work 
  Search 
  for 
  tag=application tag=authentication   Splunk 
  won‘t 
  look 
  for 
  field=value 
  pairs 
  matching 
  both 
  tags   Splunk 
  will 
  treat 
  the 
  search 
  like 
  this: 
	(tag=application) (tag=authentication)
 Each 
  tag 
  is Each 
  tag 
  is 
  expanded 
  individually 
 field=value 
  pairs 
  will 
  be 
  included 
  once 
  per 
  matching 
  tag   This 
  can 
  lead 
  to 
  even 
  larger 
  normalizedSearch 
  strings! 
39 
A 
  real-­‐world 
  example 
 Splunk_TA_Oracle 
  defines 
  a 
  handful 
  of 
  tagged 
  evenmypes 
 Four 
  match 
  tag=database tag=instance tag=stats  Expanding 
  eacheach 
  tag 
  on 
  its 
  own 
  yields 
  sixteen 
  evenmypes! 
  Every 
  TA 
  is 
  influenced 
  by 
  every 
  other 
  TA: 
  „Tag 
  Expansion 
  Explosion“ 
40 
Mi:ga:on 
  Strategies 
 Avoid 
  long 
  lists 
  of 
  tags 
  mapping 
  to 
  the 
  same 
  field=value 	–Especially 
  with 
  evenmypes 
  and 
  reverse 
  lookups 
  Use 
  distribu:ve 
  proper:es 
  to 
  reduceproper:es 
  to 
  reduce 
  tag-­‐evenmype 
  redundancy 	–Instead 
  of 
  tagging 
  every 
  Splunk 
  evenmype 
  with 
  application, 
  consider 	tagging 
  sourcetype, 
  host, 
  etc. 
  with 
  application 
	–Instead 
  of 
  tagging 
  special 
  evenmypes 
  for 
  admin 
  users 
  with 
  privileged, 	consider 
  tagging 
  those 
  users 
  or 
  a 
  reverse 
  lookup 
  fielda 
  reverse 
  lookup 
  field 
  iden:fying 
  them 
  Look 
  for 
  what 
  actually 
  defines 
  the 
  tag 
  in 
  the 
  real 
  world 
 Charm 
  Splunk 
  into 
  op:mizing 
  how 
  tags 
  are 
  expanded 
  J
41 
Wrapping 
  up 
42 
Dos 
  and 
  Don‘ts 
 Don‘t 
  stop 
  using 
  field 
  aliases, 
  calculated 
  fields, 
  reverse 
  lookups, 
  etc.  Don‘t 
  compromiseetc.  Don‘t 
  compromise 
  maintainability 
  for 
  small 
  gains 
  Do 
  take 
  a 
  good 
  look 
  at 
  your 
  environment 
  Do 
  iden:fy 
  and 
  improve 
  real 
  performance 
  hogs 
  Do 
  scope 
  knowledge 
  object 
  sharing 
  as 
  narrowly 
  as 
  possible   Do 
  clean 
  up 
  unused 
  knowledge 
  objects 
  and 
  TAs 
  Do 
  keep 
  monitoring 
  as 
  yourkeep 
  monitoring 
  as 
  your 
  knowledge 
  object 
  world 
  grows 
43 
Q&A 
44 
What 
  Now? 
Related 
  breakout 
  sessions 
  and 
  ac:vi:es… 
 You 
  have 
  access 
  to 
  your 
  Splunk 
  at 
  .conf? 
  Talk 
  to 
  me 
  for 
  a 
  quick 
  look!   Grab 
  the 
  app: 
  hmps://splunkbase.splunk.com/app/2871
  Duane 
  & 
  George: 
  Beyond 
  the 
  Lookup 
  GlassBeyond 
  the 
  Lookup 
  Glass 
  (Tuesday) 
 Amrit 
  & 
  Jag: 
  How 
  splunkd 
  Works 
  (Tuesday) 
  Duncan 
  & 
  Julian: 
  Search 
  Efficiency 
  Op:miza:on 
  (Tuesday) 
  Niklas: 
  How 
  to 
  use 
  CIM 
  to 
  Gain 
  Security 
  Awareness 
  (Wednesday)  Dritan: 
  Notes 
  on 
  Op:mizing 
  Splunk 
  Performance 
  (later 
  today!) 
45 
THANK 
  YOU 
Fields:today!) 
45 
THANK 
  YOU 
Fields: 
  Op:miza:ons 
Beyond 
  Litsearch 
47 
Fields 
“Let 
  all 
  values 
  be 
  indexed 
  tokens, 
  for 
indexed 
  tokens 
  power 
  fast 
  searches.” 
-­‐ 
  Splunk, 
  late 
  2000s 
48 
	Job 
  Inspector 
  con:nued  base 
  lispy: 
  How 
  did 
  Splunk 
  crawl 
  its 
  index 
  for 
  events? 
 eventCount 
  / 
  scanCount: 
  How 
  efficient/ 
  scanCount: 
  How 
  efficient 
  was 
  the 
  lispy-­‐induced 
  crawl? 
 limits.conf: 
  [search_info] infocsv_log_level=DEBUG 
How 
  Splunk 
  searches 
  for 
  field 
  values 
  (1) 
index=_internal group=tpool 
 Assume 
  a 
  field 
  value 
  is 
  present 
  as 
  indexed 
  tokens 
  Load 
  events 
  containing 
  those 
  indexed 
  tokens 
  anywhere 	[ AND index::_internal tpool ] Apply 
  field 
  extrac:ons 
  and 
  filter 
  again 
07-21-2015 22:42:52.662 +0200 INFO Metrics - group=tpool, name=indexertpool, qsize=0, ... 
  Job 
  Inspector: 
  scanCount 
  ≈ 
  eventCount 
50 
	How 
  Splunk 
  searches 
  for 
  field 
  values 
  (2) 	index=_internal qsize=0 
	[ AND index::_internal 0 ] 
  Splunk 
  returns 
  the 
  same 
  event, 
  but 
  takes 
  ages!event, 
  but 
  takes 
  ages! 
07-21-2015 22:42:52.662 +0200 INFO Metrics - group=tpool, name=indexertpool, qsize=0, ...
  Default 
  assump:on 
  works 
  great 
  iff 
  field 
  values 
  are 
  unique-­‐ish 
51 
	Key-­‐Value 
  Tricks 
  (1) 
	index=_internal qsize qsize=0 
	[ AND index::_internal qsize0 ] 
  Take 
  advantage 
  of 
  default 
  key-­‐value 
  field 
  extrac:onskey-­‐value 
  field 
  extrac:ons 
	07-21-2015 22:42:52.662 +0200 INFO Metrics - 	group=tpool, name=indexertpool, qsize=0, ...
  Flexible, 
  zero-­‐config 
  speed-­‐up 
  that 
  requires 
  smart 
  searchers! 
52 
Key-­‐Value 
  Tricks 
  (2) 
  Move 
  inline 
  op:miza:on 
  to 
  fields.conf 
[qsize] 
INDEXED_VALUE=[AND qsize ] 
 Adds 
  the 
  extra 
  token 
  qsize,the 
  extra 
  token 
  qsize, 
  whether 
  the 
  searcher 
  likes 
  it 
  or 
  not index=_internal qsize=0 
[ AND index::_internal qsize0 ] 
 fields.conf 
  applies 
  to 
  all 
  fields 
  of 
  that 
  name, 
  regardless 
  of 
  sourcetype 
  This 
  can 
  break 
  for 
  mul:-­‐token 
  values! 
53 
Key-­‐Value 
  Tricks 
  (3) 
  Take 
  it 
  further 
  and 
  assemble 
  longerfurther 
  and 
  assemble 
  longer 
  tokens [qsize] 
INDEXED_VALUE=qsize= 
 Rule 
  out 
  events 
  with 
  qsize!=0 
  that 
  contain 
  a 
  0 
  elsewhere index=_internal qsize=0 
[ AND index::_internal qsize=0 ] 
  This 
  will 
  even 
  break 
  for 
  events 
  with 
  qsize="0" 
  (major 
  breaker) 
 Be 
  sure 
  you 
  know 
  your 
  data 
  before 
  fiddling 
  withdata 
  before 
  fiddling 
  with 
  fields.conf! 
54 
Wildcards 
  (1) 
  Splunk 
  will 
  only 
  use 
  indexed 
  tokens 
  for 
  prefixes 
  of 
  wildcarded 
  values 
 index=_internal component=BucketMove* 	[ AND index::_internal bucketmove* ] 
 index=_internal component=*ucketMover 	[ AND index::_internal ] 
 Oops! 
07-21-2015 22:41:22.999 +0200 INFO BucketMover - idx=main Moving bucket=…55 
Wildcards 
  (2) 
  Force 
  Splunk 
  to 
  use 
  indexed 
  tokens 
 index=_internal component=TERM(*ucketMover) 	[ AND index::_internal *ucketmover ] 
  Much 
  faster 
  than 
  loading 
  all 
  events, 
  but 
  there‘s 
  a 
  penalty 
  for 	crawling 
  the 
  index 
  without 
  a 
  prefix! 
 fields.conf 
  to 
  remove 
  the 
  TERM() 
  from 
  all 
  searches [component]from 
  all 
  searches [component] 
INDEXED_VALUE= 
56 
Fields 
  Recap 
  (Part 
  2) 
 Indexed 
  tokens 
  are 
  king 
 scanCount 
  performance 
  hit 
  when 
  indexed 
  tokens 
  can‘t 
  be 
  used  fields.conf 
  op:miza:ons 
  can 
  fix 
  performance, 
  but 
  can 
  break 
  results 
57