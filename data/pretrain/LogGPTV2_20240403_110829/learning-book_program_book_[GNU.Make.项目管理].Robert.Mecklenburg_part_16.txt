variables宏的时候将它们放入内置数据库中。于是它们就可以立即被使用在宏中。
加强这个makefile的同时，我们觉得应该为宏加人另一个规则。任何一个我们所要编译
的程序都应该依存于它自已的目标文件。所以，为了让我们的makefile能够参数化，我
们会加人一个最顶层的all工作目标，以及使用一个变量来保存我们所要编译的每个程
序：
#$(callprogram-variables,variable-prefix,file-list)
define program-variables
s（eval S1_sources=s(filter &.c,$2))
$（eval $1_headers =$（filter $.h,$2))
s(eval $1_objects=S(subst .c,.o,S（filter 8.c,$2)))
programs += $1
$1:$($1_objects)
$($1_objects):S($1_headers）
endef
将al1工作目标放在此处，所以它就是默认目标
all:
$(eval $(call program-variables,1s,1s.c1s.h glob.cglob.h))
$（eval $（call program-variables,cp,...))
$（eval $(call program-variables,mv,...))
$（eval $(call program-variables,ln,...))
$（eval s(call program-variables,rm,...))
将programs必要条件放在此处，所以all工作目标被定义在这里
all:S(programs)
注意all工作目标与其必要条件的摆放位置。programs变量必须等到那五个eval调
用被扩展之后才会有正确的定义，但是我们想让a11工作目标成为默认目标。此时，我
们可以先为makefile加入all工作目标，稍后再加人它的必要条件。
Drogram-variables函数所发生的问题，起因于有些变量的求值动作太早进行。实际上，
make所提供的value函数可以协助我们解决此问题。value函数会返回它的
variable参数未扩展的值。这个未扩展的值可以传给eval函数做进一步的处理。通
过传递未扩展的值，我们可以避免必须为宏中的变量引用加上引号的问题。
---
## Page 108
98
第四章
可借，program-variables宏无法使用此函数。因为value是一个“非全有即全无”
（all-or-nothing）的函数，如果加以使用，Value将不会扩展宏中的任何变量。此外，
value不接受任何参数（就算存在任何参数也会加以忽略），所以我们的程序名称及文
件名列表参数都不会被扩展。
因为存在以上这些限制，所以本书很少会提到value这个函数。
函数挂钩
用户自定义函数只是一个用来存放文本的变量。如果变量名称中存在S1、$2等引用，
cal1函数将会予以扩展。如果函数中不存在任何变量引用，ca11并不在意。事实上，
如果变量中不存在任何文本，ca11也不会在意。所以你看不到任何错误或警告信息。如
果你不小心拼错了函数的名称，这个特性可能会让你十分沮丧。不过这个特性也可能非
常有用。
你可以把需要重复使用的描述全都放在函数里。你越常重复使用一个函数，就越值得花
时间把它写好。要让函数更具重用性，可以对它加入挂钩（hook）。挂钩是一种函数引
用，用户可以重新加以定义，以便进行自己所自定义的工作。
假设你想在makefile文件中建立许多程序库。在某些系统上，你会想要运行ranlib，
在某些系统上，你可能还会想要运行chmod。这个时候，为这些操作编写明确的命令并
非是你的唯一选择，你可以选择编写一个函数以及加人一个挂钩：
S（call build-library.object-files）
define build-library
S(AR)S(ARFLAGS) S@ S1
$(cal1 build-1ibrary-hook,S@)
endet
为了使用此挂钩，我们会定义build-library-hook函数：
$（foo_lib):build-1ibrary-hook=$（RANLIB）$1
s（foo_lib):$(foo_objects)
s(call build-1ibrary,$^)
$(bar_1ib):bui1d-1ibrary-hook =S(CHMOD)444S1
$(bar_lib):$(bar_objects)
$（call build-library,$~)
传递参数
一个函数可以从四种来源取得它的数据：使用ca11所传入的参数、全局变量、自动变
---
## Page 109
函数
99
量以及工作目标专属变量。其中，以通过参数为最模块化的选择，因为参数的使用可让
函数中的变动与全局数据无关，但有时这并不是最重要的评断标准。
假设我们有若干项目共享一组make函数。我们将会通过变量前缀（variableprefix），例
如PROJECT1_，来区分每个项目，而且项目里的重要变量都会使用具“跨项目后缀”
（cross-projectsuffix）的前缀。之前范例中所用到的PROJECT_SRC等变量，将会变成
PROJECT1_SRC、PROJECT1_BIN和PROJECT1_LIB。这样，我们就不必编写用来读取这
#s(call process-xml,project-prefix,file-name)
define process-xml
S ($1_LIB)/xm1to-o $($1_BIN)/xm1/$2 S($1_SRC)/xm1/S2
endef
传递参数的另一个方式就是使用工作目标专属变量。当大部分的调用所使用的都是标准
的值，仅有少数需要特别的处理时，这个方式特别有用。当规则被定义在一个引人文件
中，但我们想从定义变量的makefile来调用该规则时，工作目标专属变量还可以为我们
提供相当的灵活性。
releaSe:MAKING_RELEASE =1
release:1ibraries executables
s(foo_lib):
$(call build-library,S~)
#$(call build-1ibrary,file-list)
define build-library
S(AR)S（ARFLAGS)$@
：
$(if $(MAKING_RELEASE),
$（filter-out debug/%,S1),
$1)
endef
这段代码会在运行发行版本的时候设定工作目标专属变量，以便指示此状况。在此状况
下，程序库编译（build-library）函数将会从程序库删除任何调试模块。
---
## Page 110
第五章
命令
到目前为止，我们已经看过了make命令的许多基本元素，不过为了让所有人都能够具备
阅读本章的背景知识，让我们先复习一下前面提到过的内容。
make命令实质上是一个单行shell脚本。实际上，make会获取每行命令并将它传递给
subshell去执行。事实上，如果make能够保证省略shell不会影响程序的行为，它就可
以优化这个（相对而言）代价昂贵的fork/exec算法。make会通过在每个命令行中扫描
shell特殊字符（比如通配符以及I/O重定向）来进行此项检查。如果不存在任何shell特
殊字符，make就会直接执行此命令，而不会将此命令传递给subshell去执行。
make默认会使用/bin/sh这个shell。之所以会使用/bin/sh，并非自环境继承而来，而是
由SHELL这个make变量所控制的。当make启动时，它会从用户的环境中导人所有变量
以作为make变量，但不包含SHELL。这是因为用户对shell的选择不应该导致makefile
（可能包含在某个你所下载的软件包里）运行失败。如果用户真的要变更make默认要使
哪个shell”一节中探讨这个问题。
解析命令
在工作目标之后，凡是第一个字符为跳格符（tab）的文本行一律会被视为命令（除非前
精明。举例来说，当不可能出现意义不明的状况时，注释、变量赋值以及include指令
都可以使用跳格符来作为它们的第一个字符。如果make所读到的命令行并非立即跟在工
作自标之后，就会显示如下的错误信息：
makefile:20:***commands commence before first target.Stop.
00I
---
## Page 111
命令
101
这个信息的用词有点奇怪，因为它通常会发生在makefile的中间部分，与“第一个”
（first）工作自标所指定之处相去甚远。不过现在我们要理解这个信息并不会有太大的困
难。这个信息的用词如果能像“encounteredacommandoutsidethecontextofatarget”
（发现命令位于工作目标的语境之外）这样或许会比较好。
解析器所看到的命令位于合法的语境时，它会切换到“命令解析”模式，以一次一行的
方式建立脚本。当解析器所遇到的文本行不可能成为命令脚本的一部分时，它就会停止
追加到脚本的动作。此处就代表脚本的结尾。以下列出可能会出现在脚本中的内容：
以跳格符开头的文本行就是将会被subshell执行的命令。进入“命令解析”模式时，
即使会被解译成make结构的文本行（比如ifdef、注释以及include指令），也
会被视为命令。
·空行会被忽略掉，所以不会被subshell执行。
以#开头的文本行一一或许会有前导的空格（不是跳格符！），就是makefile的
注释，会被忽略掉。
条件处理指令，像ifdef和ifeq，会在脚本中被认出以及处理。
内置的make函数将会终止“命令解析”模式，除非它前置了一个跳格符。这意味着，它
们必须被扩展成有效的shell命令，否则就会变成空值。例如函数warning和eval就会
被扩展成空值。
“命令脚本中可以使用空行以及make的注释”这件事，可能会让你感到意外。你可以在
如下的范例中看到它们的处理方式：
long-command:
@echo Line 2:Ablank line follows
@echo Line 4:Ashell commentfollows
A shellcomment （leading tab）
@echo Line 6:A make comment follows
#A make comment,at the beginning of a line
@echoLine 8:Indented make commentsfollow
A make comment,indented with leading spaces
#Another make comment,indented with leading spaces
@echo Line 11:A conditional follows
ifdef COMSPEC
@echo Running Windows
endif
@echo Line 15:Awarning*command"follows
S (warning A warning)
@echo Line 17:An eval*command*follows
$（eval $（shel1 echo Shell echo 1>&2）)
请注意，第5行和第10行看起来一样，但是执行结果却有很大的差别。第5行是shell
---
## Page 112
102
第五章
的注释，以一个前导的跳格符来表示：而第10行则是make的注释，被内缩了8个空格。
显然，我并不建议以此方法来编排make的注释（除非你打算参加晦涩makefile大赛）。
正如你在接下来的输出结果中所见，make的注释并不会被执行，而且即使它们出现在命
令脚本的语境中，你也不会在输出结果中发现它们的踪迹：
Smake
makefile:2:Awarning
Shell echo
Line 2:Ablank line follows
Line 4:A shell comment follows
#A shell comment （leading tab）
Line 6:Amake commentfollows
Line 8:Indented make comments follow
Line 1l:A conditional follows
Running Windows
Line 15:Awarning command follows
Line 17:An eval command follows
函数warning和eval的输出顺序似乎有问题，不用担心，没有问题（稍后我们将会
如果它的前面存在一个工作目标（可能具备也可能不具备脚本），而且只有脚本或空行
个工作目标的命令。如你所见，这完全合法而且不会产生警告或错误信息，除非该工作
目标的规则就位于makefile（或引l入文件）中的某处。
运气好的话，你不经意加人的“具前导跳格符的文本行”跟前面的命令脚本之间，可能
会包含非空行、非注释的文本行。此时，你将会看到“commandscommencebeforefirst
target”这个信息。
现在是介绍一些软件工具的好机会。我想每个人都会同意，用前导的跳格符来表示命令
行是一个不幸的决定，但是现在要改似乎有点来不及了。具有语法检查能力的现代化编
GNUemacs为makefile的编辑提供了非常好的模式。这个模式会进行语法的标示以及
查找简单的语法错误，比如续行符号之后有空格以及混用前导的空格与跳格符。我将会
在稍后进一步说明如何并用emacs和make。
持续很长的命令
因为每个命令会在它自已的shell中执行（至少看起来是这样），所以若要让一系列shell
命令一起执行，则必须经过特别的处理。举例来说，假如我需要产生一个文件，以便用
---
## Page 113
命今
103
来保存文件列表。Java编译器可以读取此类文件以一次编译多个源文件。我编写了如下
的命令脚本：
.INTERMEDIATE:file_list
file_list:
for d in logic ui
do
echo $d/*.java
done>$@
显然这么做是行不通的，它会产生如下的错误：
$make
fordin logicui
/bin/sh:-c:1ine 2:syntax error:unexpected end of file
make:***[file_list] Error 2
于是我会为命令脚本中的每一行（最后一行除外）添加延续字符：
.INTERMEDIATE:file_list
file_list:
for d in logic ui
do
echo $d/*.java
done>$@
这次它会产生如下的错误：
Smake
for d in logic ui
do
echo/*.java\
done>file_list
/bin/sh:-c;line 1:syntax error nearunexpected token>
/bin/sh:-c:line 1:fordin1ogicuido
echo/*.java
make:***[file_list] Error 2
怎么了？又跑出了两个问题。首先，对于循环控制变量的引用d必须加以规避，其次，
因为for循环将会以单行的形式传给subshell，所以我们必须于文件列表及for循环语
句之后加上“分号”分隔符：
.INTERMEDIATE:file_1ist
file_list:
for d in logic ui;
do
echo ssd/*.java;
done>s@
现在我们可以产生预期的文件了。这个工作目标被声明为.INTERMEDIATE，所以在编
译工作完成之后，make将会删除这个临时的工作目标。
---