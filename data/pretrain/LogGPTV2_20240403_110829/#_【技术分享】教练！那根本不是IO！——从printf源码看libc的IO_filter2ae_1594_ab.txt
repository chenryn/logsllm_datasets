        // 下面开始处理 
          /* Start real work.  We know about all flags and modifiers and          
         now process the wanted format specifier.  */                 
        LABEL (form_percent):                             
        // 我们只关注％d相关内容，其他类似
        [...]
        LABEL (form_integer):                             
        // 整数相关的从这里开始
        // 设置base为10，意思是10进制
              base = 10;                                  
        // 根据具体情况，再进行一些处理，之后移交到具体的longlong_number和number进行处理
            if (is_longlong)                                  
            {                                     
                [...]
                goto LABEL (longlong_number);                         
            }                                     
            else                                      
            {                                     
                [...]
                goto LABEL (number);                              
            }                                     
        [...]
        // longlong_number和number类似，不重复了
        LABEL (number):                               
          // 这里的中间过程最终设置好了string
          // 也就是需要输出的字符串
          [...]
          // 根据是否是负数，使用outchar进行输出字符
          if (is_negative)                            
            outchar (L_('-'));                            
          else if (showsign)                              
            outchar (L_('+'));                            
          else if (space)                             
            outchar (L_(' '));                            
          [...]
          // 使用outstring把已经设置好的string输出了
          outstring (string, workend - string);                   
          break;                                  
    // 宏的解释到这里结束
    // 宏主要的内容其实也很显然，就是先根据具体的格式化字符串标识符来设置好string，string
    // 也就是我们要输出的内容，是一个字符串，之后使用outstring来输出字符串，对于字符则使用
    // outchar输出字符
    // 现在我们再来看看outchar和outstring
    #define outchar(Ch)                               
      do                                          
        {                                         
          const INT_T outc = (Ch);                            
          // 又使用了PUTC来输出字符
          if (PUTC (outc, s) == EOF || done == INT_MAX)               
        {                                     
          done = -1;                                  
          goto all_done;                              
        }                                     
          ++done;                                     
        }                                         
      while (0)
    #define outstring(String, Len)                            
      do                                          
        {                                         
          assert ((size_t) done FUNC) (THIS, X1, X2)
    // 终于送了一口气，跟了多少个函数都不记得了，不过最终是到点了。
    // 这里做的事情就是通过层层移交，最终由跳表中的相应函数来完成
    // 不过还有PUTC
    // libio/libio.h
    #define _IO_putc_unlocked(_ch, _fp) 
       (_IO_BE ((_fp)->_IO_write_ptr >= (_fp)->_IO_write_end, 0) 
        ? __overflow (_fp, (unsigned char) (_ch)) 
        : (unsigned char) (*(_fp)->_IO_write_ptr++ = (_ch)))
    // 调用了__overflow
    // libio/genops.h
    int
    __overflow (_IO_FILE *f, int ch)
    {
      /* This is a single-byte stream.  */
      if (f->_mode == 0)
        _IO_fwide (f, -1);
      return _IO_OVERFLOW (f, ch);
    }
    // 又调用了_IO_OVERFLOW，根据之前的命名法，我们应该猜到这个很接近了
    #define _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)
    // 依然是调用虚表函数
这一段代码估计已经把大家的汗都看出来了，我们做个总结吧：其实就一句话， **printf最终调用了虚表里的函数来完成输出任务** 。
也就是说，只要使用了printf，我们就相当于调用了虚表里的某个函数，具体哪一个还需要从源码去看，不过关于虚表的部分说到这基本也就够了，scanf的内容其实也是一样，最终都会到虚表里进行执行。
到这里，我们就解决了关于利用虚表时候的问题，那就是什么时候调用， **所以只要有输入输出，我们就可以调用到虚表的某个函数了** 。
**3. 总结一下虚表的利用方法**
因为libc中的标准输入输出函数会用到stdin，stdout和stderr几个结构体，而最终都会使用虚表函数来完成具体操作，所以如果可以操作虚表指针，就可以控制执行流。
**4. libc-2.24**
在2.24中，增加了一个虚表的检测机制，也就是虚表必须位于某一个位置以内，超过这一段就会直接被abort掉，所以这个看似美好的方法到2.24就已经用不了了。
**没了虚表，想想别的**
****
**1. 输入buf也可以搞事情**
到刚才，我们分析了虚表之前的部分，可是，我们其实是没有一直走到最底层的，因为至少得到 **read/write**
系统调用才算是真正进行了输入输出的操作，而这个操作我们并没有看到，那是因为他们都被实现在了虚表里。
现在让我们来分析一下scanf的虚表实现内容吧。这次我们少看点源码，就看看这个underflow：
    int
    _IO_new_file_underflow (_IO_FILE *fp)
    {
      _IO_ssize_t count;
    #if 0
      /* SysV does not make this test; take it out for compatibility */
      if (fp->_flags & _IO_EOF_SEEN)
        return (EOF);
    #endif
      if (fp->_flags & _IO_NO_READS)
        {
          fp->_flags |= _IO_ERR_SEEN;
          __set_errno (EBADF);
          return EOF;
        }
        // 只有在read_ptr _IO_read_ptr _IO_read_end)
        return *(unsigned char *) fp->_IO_read_ptr;
      if (fp->_IO_buf_base == NULL)
        {
          /* Maybe we already have a push back pointer.  */
          if (fp->_IO_save_base != NULL)
        {
          free (fp->_IO_save_base);
          fp->_flags &= ~_IO_IN_BACKUP;
        }
          _IO_doallocbuf (fp);
        }
      /* Flush all line buffered files before reading. */
      /* FIXME This can/should be moved to genops ?? */
      if (fp->_flags & (_IO_LINE_BUF|_IO_UNBUFFERED))
        {
    #if 0
          _IO_flush_all_linebuffered ();
    #else
          /* We used to flush all line-buffered stream.  This really isn't
         required by any standard.  My recollection is that
         traditional Unix systems did this for stdout.  stderr better
         not be line buffered.  So we do just that here
         explicitly.  --drepper */
          _IO_acquire_lock (_IO_stdout);
          if ((_IO_stdout->_flags & (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))
          == (_IO_LINKED | _IO_LINE_BUF))
        _IO_OVERFLOW (_IO_stdout, EOF);
          _IO_release_lock (_IO_stdout);
    #endif
        }
      _IO_switch_to_get_mode (fp);
      /* This is very tricky. We have to adjust those
         pointers before we call _IO_SYSREAD () since
         we may longjump () out while waiting for
         input. Those pointers may be screwed up. H.J. */
      fp->_IO_read_base = fp->_IO_read_ptr = fp->_IO_buf_base;
      fp->_IO_read_end = fp->_IO_buf_base;
      fp->_IO_write_base = fp->_IO_write_ptr = fp->_IO_write_end
        = fp->_IO_buf_base;
      // 这里调用read(0, _IO_buf_base, _IO_buf_end - _IO_buf_base)
      count = _IO_SYSREAD (fp, fp->_IO_buf_base,
                   fp->_IO_buf_end - fp->_IO_buf_base);
      if (count _flags |= _IO_EOF_SEEN;
          else
        fp->_flags |= _IO_ERR_SEEN, count = 0;
      }
      // read_end加上这次读所读到的字节数
      fp->_IO_read_end += count;
      if (count == 0)
        {
          /* If a stream is read to EOF, the calling application may switch active
         handles.  As a result, our offset cache would no longer be valid, so
         unset it.  */
          fp->_offset = _IO_pos_BAD;
          return EOF;
        }
      if (fp->_offset != _IO_pos_BAD)
        _IO_pos_adjust (fp->_offset, count);
      return *(unsigned char *) fp->_IO_read_ptr;
    }
在调用underflow之前其实会进行一个 **_IO_read_ptr++** 的操作，配合上underflow，我想大家都应该能看懂这个的含义吧？