---
## Page 136
谓的参照完整性（referential integrity）。
表里的某个值相匹配。
了指向父表的值。一个外键关系可以被设置为不接受 NULL 值，此时所有的外键值都必须与父
的行。子表里的这个索引就是所谓的“外键”。也就是说，这个键处在父表的外部，但它又包含
的索引值必须与父表中的索引值相匹配；或者被设置为NULL，以表明在父表里不存在与之对应
实现外键的定义，并且将讨论外键是如何影响表的使用方式的。首先，需要定义几条术语。
语句，确保在你删除某个表里的行时，其他表里与之相对应的行也会随之一起被删除。但毕竟
必须自己负责保证表之间的依赖关系和维护它们的一致性，而这意味着你的应用程序必须增加
个值也会发生相应的变化。
在 student 表里更改某个学生的 student_id时，score表里与这个学生相对应的所有行的这
样从一个表“流淌”到另外一个表。另外还可以进行级联更新。例如，有了级联更新，那么
个学生有关的所有行。这就是所谓的级联删除（cascaded delete），删除操作的效果就像瀑布那
这样一个约束条件，即从 student 表里删除某个学生时，也要同时自动删除 score 表里与这
表里存在的行，插到 score 表里去。也就是说，这个外键可以防止为不存在的学生输入成绩这
student.student_id列的一个外键。这样可以确保：只把那些其student_id值在 student
来把score 表里的考试成绩与student 表里的学生关联在一起。我们在第1章创建这些表时，
据的引用完整性。例如，sampdb 数据库里的 score 表包含一个 student_id 列，我们要用它
把自己想要施加在表上的约束条件放到外键关系里。数据库会根据这个关系里的规则来维护数
2.13外键和引用完整性
一情况的出现。
隔离级别时，不需要任何特殊的权限。
用 SETTRANSACTION 语句做出的修改，
SESSION TRANSACTION 语句做出的修改，
呢
这
事实上，非事务表永远待在自动提交模式下，每条语句都会在执行完毕后立刻提交。因此
对非事务表进行操作的语句总是会立刻生效，即便是自动提交模式处于禁用状态也是如此
116
InnoDB 存储引擎会通过这些规则来保证：在外键关系里不会出现不匹配的情况。这就是所
尼？如果你的表关系非常复杂，那么自动检查功将会特别有用。你完全不用在自己的应用程序
这是多出来的工作，而且既然数据库引擎能够替你完成数据的一致性检查，那么为何不使用
一些必要的代码。在某些情况下，这样做也不需要花费太多的工夫，你只需额外调用几条DELETE
如果你在某个事务里修改了一个非事务表，那么这个修改将无法被还原。
外键可以帮我们维护数据的一致性，并且它们用起来也很方便。如果不使用外键，那么你
外键不仅在行的插入操作中很有用，在删除和更新操作中也有用处。例如，我们可以建立
它们之间建立了一些明确的关系。例如，把score.student_id定义为
父表中的键值可以用来关联两个表。具体来讲，
在 MySQL里，InnoDB存储引擎提供了对外键的支持。本节将讨论如何设置InnoDB表来
利用外键关系，你可以在一个表里声明与另一个表里的某个索引相关联的索引。你还可以
口
口
负责实现这些依赖关系。
在某次事务中可以将事务表和非事务表混合使用，但最终的结果不一定是你所期望的，
子表。它指的是引用了父表中键值的相关表。
父表。它指的是包含原始键值的表。
第2章使用SQL管理数据
事务表和非事务表可以混用吗？
，则只会对下一个事务起作用。客户端在修改其自己的
将会对服务器当前会话里的所有后续事务起作用；而
，子表里的索引会引用父表里的索引。子表
含
它
---
## Page 137
FOREIGN KEY定义，1
识别出来，但不会有任何效果。（对于除InnoDB 以外的其他存储引擎，它们可以解析整个
持MATCH子句，即使指定了MATCH子句，它也会被忽略掉。另外，还有几种action值可以被
口子表必须建立索引，且外键列需要放在首位。父表也必须建立索引，且 REFERENCES子
如果想要建立外键关系，那么请遵从下面这些指导。
口
口 FOREIGN KEY子句。它会列出子表里的索引列，这些列必须与父表里的索引值相匹配。
InnoDB存储引擎着重关注的外键定义成分包含下面这样几个。
这个语法自身很完备，但InnoDB存储引擎目前还没有实现所有的子句语义：它目前还不支
口
口
口
FOREIGN KEY
[CONSTRAINT
下面所示内容为在子表里定义外键的语法：
CONSTRAINT子句。如果提供它，那么它会为外键约束提供一个名字。如果省略它，那
引。）在定义外键关系之前，必须显式地创建父表的索引。如果在创建子表的CREATE
句里的列需要放在首位。（也就是说，外键关系所涉及的两个表里的外键列必须被索
值。可供选用的 action值与 ON DELETE子句的相同，并且具有相同的效果。
ONUPDATE子句。它用来指定：
ON DELETE子句。可以用它来指定在删除父表里的行时，子表应该做些什么。如果没有
部分拥有相同的列数。
REFERENCES 子句。
么InnoDB存储引擎会创建一个名字。
REFERENCES
那
指
自动创建了索引时，它才会起作用；在这种情况下，该索引名即为fk_name。
fk_name
[MATCH FULLIMATCH PARTIALIMATCH SIMPLE]
条子句，那么其默认行为是：在子表里，拒绝执行那些会导致其外键值在父表索
会将它报告为一个错误。
ION DELETE SET DEFAULT 子句。它可以被 MySQL正确识别，但尚未实现；InnoDB
不能把外键定义为 PRIMARYKEY，因为主键不允许有 NULL值。）
表里与之相关联的索引列会被设置为NULL。如果想使用这个选项，那么必须把外键
ION DELETE SET NULL子句。它表示的是这样一种行为，即在删除父表里的行时，
的行，即可实现一个涉及多表的删除操作。
ON DELETE
的含义完全一样。
DELETE子句一样。有些数据库系统提供了延迟检查功能，而NOACTION 就是一种延
些行”
旨定ONDELETE子句，那么其默认行为是“拒绝从父表里删除仍被子表的行所引用的
定
这
表
义里指定的所有子表索引列，定义为允许有NULL值。（使用这种行为，即暗示着你
样一
表里与之相关联的行也会被删除掉。在本质上，删除产生的效果将从父表蔓延到子表。
任何匹配的插入和更新操作；并且会阻止更新那些仍然被子表所引用的父表索引
检查。对于InnoDB，由于外键约束条件会被立即检查，所以NOACTION和RESTRICT
一来，你只需删除父表里的行，然后让InnoDB存储引擎负责从子表里删除相关
。如果想显式地指定一种 action值，那么可以使用下列子句的其中一条。
是外键 ID。即使提供了这种 ID，它也会被忽略掉。只有InnoDB为这个外键
constraint_name]
action]
action]
tbl_
CASCADE 子句。
但会
name(index_columns)
（会把它完全忽略掉。）
它会列出父表及其索引列的名字，让子表里的外键可以引用它们。
(index_columns)
：当更新父表里的行时，子表应该做些什么。如果没有指定
。它表示的是这样一种行为，即在删除父表里的行时，子
2.13外键和引用完整性
三
子
NO
---
## Page 138
表里的某个 par_id 值相匹配：
示的是，如果更改了parent 表里某个行的 par_id值，那么 MySQL 将自动把chila表里所有
MySQL 也应该自动从 child 表里删除与 par_id 值相匹配的行。ON UPDATE CASCADE 子句表
的例子。首先，创建两个名字分别为 parent 和 child 的表。其中，child 表包含一个外键，
会引用 parent 表里的 par_id 列：
118
mySql> SELECT * FROM child;
mysql> SELECT * FROM parent;
这些语句将产生下面所示的表内容，其中，child 表里的每个 par_ia 值都分别与 parent
现在，在 parent 表里插入一些行，然后在child 表里插入一些与之拥有相关键值的行：
这里定义的外键使用ON DELETECASCADE子句指定了：当从 parent 表里删除某个行时，
par_id|child_id
）ENGINE=INNODB;
CREATE TABLE child
CREATE TABLE parent
在第1章，我们为成绩考评项目创建了几个带有简单外键关系的表。
par_id
口父表和子表索引里的对应列必须类型兼容。
/Sql>INSERT
sql>
sql>
YSql> INSERTI
ENGINE= INNODB;
PRIMARY KEY
par_id
par_id
个列进行索引，而不能只对其前面的几个字符进行索引。
不能对外键关系里的字符串列的前缀进行索引。
么都是有符号数，要么都是UNSIGNED 的。
列。对应的字符列必须拥有相同的长度。
那么你就应该在子表里显式地定义它。
过，由 InnoDB 自动创建的索引是一个非唯一的索引，并且只包含外键列。如果想让它
引用列）创建索引。有时，不包括索引，可以让CREATETABLE语句写起来更容易。
TABLE语句里没有包括这样的索引，那么InnoDB 存储引擎将自动在子表里为外键
成
第2章使用SQL管理数据
为一个PRIMARYKEY或UNIQUE索引，或者想让它能够包括在外键列之外的其他列，
2
INSERT
DELETE
C
INSERT
+
INT NOT NULL,
INT NOT NULL,
INTO child
INTO
INTO
CASCADE
(par_
(par_id)
child
child
NULL,
REFERENCES parent (par_id)
child_id)，
(par_id,chila_id) vALUEs(3,1);
(par_id,chi1d_id)vALUEs（1,1),(1,2）;
，对应的整型列必须拥有相同的大小，并且要
例如，不能用一个INT 列去匹配一个CHAR
VALUES（2,1)，（2,2），（2,3）;
（也就是说，对于字符串列，必须对整
，现在来看一个更复杂
（即
不
---
## Page 139
行，
上面的两个示例演示了在删除和更新 parent 表里的行时，需要如何安排那些操作，才能
mySql> SELECT * FROM chi1d;
mysql> UPDATE parent SET par_id= 100 WHERE par_id =2;
如果想测试级联更新的效果，可以看看在更新parent 表里的一个行时会发生什么情况：
mysql> SELECT * FROM child;
I par_id|child_id1
此外，MySQL还会把这条DELETE语句的效果级联到child表：
mySql> SELECT*FROM parent;
MySQL会将从表parent里删除那一行：
mysql> DELETE FROM parent WHERE par_id = 1;
如果想测试级联删除的效果，
ON UPDATE CASCADE)
constraint fails(sampdb
而其par_id值在 parent 表里并无匹配：
为证明InnoDB在插入新记录时会遵从外键关系的约束，我们现在来往child 表插入一个
Ipar_id
par_id1
---
par_id
100
100
100
100
3
2
2
child_id
2
人
1212
Cannot
可以看看在删除parent表里的一个行时会发生什么情况：
"parent`
child
（par_id）ON DELETE CASCADE
CONSTRAINTchild_ibfk_1
2.13外键和引用完整性
FOREIGN
119
---
## Page 140
除
此外，当从 parent 表里删除行时，具体的表现行为也存在一点区别。请试着从 parent 表里删
同的初始行。然后，用如下所示的新定义创建一个新的child表：
现这一点，需要对child表的定义做一些修改。
动作。例如，你可以让child 表里的行都保持原样，而只把它们的外键列设置为 NULL。为实
让它们级联删除或更新 child 表里的相关行。ON DELETE 子句和 ON UPDATE 子句还支持其他
120
一
mysql>