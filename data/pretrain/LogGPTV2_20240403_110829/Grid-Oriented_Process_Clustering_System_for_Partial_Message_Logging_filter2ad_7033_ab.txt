solid on GEOFEM, and evaluate the partitioning given by
RPCS. We also use CGPOP[11] that is a conjugate gradient
(CG) solver that was developed as a miniature performance-
tuning application for the Parallel Ocean Program (POP).
GEOFEM has a 3D grid graph topology, and CGPOP has a
2D grid graph topology.
To form the communication pattern graph, we use a parallel
implementation of the FX10 supercomputer, which has an
architecture based on the K computer[10]. The speciﬁcation
of a node is shown in Table I. Graph partitioning is performed
serially by one calculation node of FX10. As mentioned above,
the communication between application and graph partitioner
is achieved using a ﬁle system.
A. Graph Partitioning Performance
√
We compared the time required for the clustering pro-
cess with that from two METIS algorithms (multilevel re-
cursive bisection (pmetis) and multilevel K-way partitioning
(kmetis)) and a naive implementation of RCB. The com-
putational complexities of RPCS, pmetis, kmetis, and RCB
are O(k
n), O(kE), O(E), and O(knlogn), where k is the
number of partitions, n is the number of vertices, and E is the
number of edges. For this evaluation, we used a large 2D grid
graph whose vertices are connected to four adjacent vertices
by edges of the same weight, because the number of vertices
can easily be scaled. The number of groups was ﬁxed to 100
because the computational complexity of several algorithms
scales linearly with the number of groups.
Figures 5 and 6 show the results of this simulation. In
a grid graph, the number of edges is a constant multiple
of the number of vertices, so E is equivalent to n when
considering computational complexity. RPCS is much faster
than the other algorithms. In addition, RPCS is scalable, even
if the number of vertices increases. The time required by the
proposed algorithm increases in proportion to
n, whereas the
time complexity of the other algorithm scales linearly with n.
These results also show that RPCS is faster than other widely
used algorithms when applied to a grid graph, and can be easily
scaled to larger graphs.
√
WƌŽƉŽƐĞĚ
ƉŵĞƚŝƐ
ŬŵĞƚŝƐ
Z
ϴ
ϳ
ϲ
ϱ
ϰ
ϯ
Ϯ
ϭ
Ϭ

Ϳ
Đ
Ğ
Ɛ
;

Ğ
ŵ
ŝ
d
Ő
Ŷ
Ŷ
Ž
ŝ
ƚ
ŝ
ƚ
ƌ
Ă
W
ŝ
ϭ͘нϬϱ Ϯ͘нϬϱ ϯ͘нϬϱ ϰ͘нϬϱ ϱ͘нϬϱ ϲ͘нϬϱ ϳ͘нϬϱ ϴ͘нϬϱ ϵ͘нϬϱ ϭ͘нϬϲ
Fig. 5. Algorithm performance comparison
EƵŵďĞƌŽĨEŽĚĞƐ
B. Edge-cut of Partitioning
Our method decreases the accuracy to improve the group-
ing time. Thus, we should conﬁrm the quality of grouping.
One criterion for evaluating the grouping of processes is the
edge-cut, which is deﬁned as the amount of communication
between processes belonging to different groups. We executed
CGPOP with 22500 (150 x 150) processes on 1440 (36 x
40) physical nodes and GEOFEM with 21942 (28 x 28 x 28)
processes on 1440 (12 x 12 x 10) physical nodes. We ﬁxed the
717
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:21:10 UTC from IEEE Xplore.  Restrictions apply. 
WƌŽƉŽƐĞĚ
Ϭ͘ϭ
Ϭ͘Ϭϵ
Ϭ͘Ϭϴ
Ϭ͘Ϭϳ
Ϭ͘Ϭϲ
Ϭ͘Ϭϱ
Ϭ͘Ϭϰ
Ϭ͘Ϭϯ
Ϭ͘ϬϮ
Ϭ͘Ϭϭ
Ϭ

Ϳ
Đ
Ğ
Ɛ
;

Ğ
ŵ
ŝ
d
Ő
Ŷ
Ŷ
Ž
ŝ
ƚ
ŝ
ƚ
ƌ
Ă
W
ŝ
ϭ͘нϬϱ Ϯ͘нϬϱ ϯ͘нϬϱ ϰ͘нϬϱ ϱ͘нϬϱ ϲ͘нϬϱ ϳ͘нϬϱ ϴ͘нϬϱ ϵ͘нϬϱ ϭ͘нϬϲ
Fig. 6. Performance of RPCS (blown up from above)
EƵŵďĞƌŽĨEŽĚĞƐ
number of groups to 16. The results for the optimized node
allocation are shown in Figure 7 and Figure 8, where each
bar represents the edge-cuts produced by each method. These
show that our partitioning method obtains a better solution
than both METIS algorithms. The algorithms except RPCS
got disadvantage for dealing with various types of graphs.
With complicated graph, our approach will get degradation
of quality of partitioning. However, we consider our approach
will not become worse than RCB because our approach get
advantage from node allocation optimization that is done on
application execution. We expect this optimization transforms
complicated graph to simple graph, because most users allocate
application process to be suitable for the network topology
between physical nodes.
ϮϱϬ
ϮϬϬ
ϭϱϬ
ϭϬϬ
ϱϬ
Ϭ
EŽĚĞĂƐĞĚ
EŽĚĞĂƐĞĚ
EŽĚĞĂƐĞĚ
EŽĚĞĂƐĞĚ
ƉŵĞƚŝƐ
ŬŵĞƚŝƐ
Z
Ϳ

D
;

Ğ
ǌ
ŝ
^
Ő
Ž
>

нWƌŽƉŽƐĞĚ
Fig. 7. Comparison of edge-cuts produced by GEOFEM (Red: node-based
method, Blue: process-based method)
нƉŵĞƚŝƐ
нŬŵĞƚŝƐ
нZ
ϵϬϬ
ϴϬϬ
ϳϬϬ
ϲϬϬ
ϱϬϬ
ϰϬϬ
ϯϬϬ
ϮϬϬ
ϭϬϬ
Ϭ
Ϳ


EŽĚĞĂƐĞĚ
EŽĚĞĂƐĞĚ
EŽĚĞĂƐĞĚ
EŽĚĞĂƐĞĚ
ƉŵĞƚŝƐ
ŬŵĞƚŝƐ
Z
нWƌŽƉŽƐĞĚ
Fig. 8.
method, Blue: process-based method)
нŬŵĞƚŝƐ
Comparison of edge-cuts produced by CGPOP (Red: node-based
нƉŵĞƚŝƐ
нZ
k
(cid:2)
(cid:2)N
(cid:2)k∈An
+ 12.4%×
+ 12.4% ×
k |Pk|2
|P|2
the evaluation formula proposed in [3]. We assume the same
conditions as in [3] based on [2], whose execution environment
set the message logging impact on performance α = 23%
and the checkpoint/restart
impact on MTBF β = 12.4%.
This value of β was calculated from an MTBF of 1 day,
and checkpoint/restart times of 30 min. Thus, the evaluation
formula can be written as follows:
process f ault cost = 23% × B
(2)
D
In this formula, |P| is the total number of processes, |Pk| is
the number of processes belonging to group k, and B, D are
the size of the logged messages and the total size of messages.
Then, B
D represents the proportion of logged communication,
(cid:2)
|Pk|2
and
represents the expected proportion of processes
|P|2
to be restarted. For this evaluation, we extend this formula to
node faults as follows:
(cid:2)k∈An
|Pk|
node f ault cost = 23%× B
|P| × N
D
(3)
the number of
Two new variables, N and An, represent
physical nodes and the set of group IDs belonging to pro-
|Pk| represents the
cesses running on node n. Hence,
expected number of rolled-back processes when node n fails.
We estimated these costs for GEOFEM and CGPOP. We
used the same conﬁguration as in the previous section for
GEOFEM, and ran 22500 (150 x 150) processes on 1440
(36 x 40) physical nodes with CGPOP. Both applications
used SCOTCH for node allocation. The estimation results are
shown in Figures 9 and 10. The left bar of each column
represents the process fault cost, and the right bar represents
the node fault cost. Our method gives a process fault cost that
is almost equal to the cost score of other approaches. This
implies that our method does not have problems in attaining
a grouping balance or with excessive edge-cuts. The cost of
node faults follows a similar trend to the other node-based
methods, because
tend to the
same value. Comparing process- and node-based methods, we
can observe an increased cost for pmetis, kmetis, and RCB.
Especially, the score of CGPOP become much worse than
the GEOFEM. This is because CGPOP includes two domain,
ocean and land, and processes allocated domain of land do not
communicate with other processes. They can be placed on any
physical node, and the graph partitioning tool does similarly.
As a result, graph partitioning tends to distribute processes
running on the same node to other nodes in CGPOP. Contrary
to CGPOP, GEOFEM does not produce non-communication
processes, so An remains low. However, in all evaluations, our
method does not suffer from any large degradation in quality
when compared with the other methods. This shows that our
node-based approach is not inferior in terms of either edge-
cuts or grouping balance. In addition, our approach is able to
tolerate node failures.
(cid:2)k∈An
|P|×N
|Pk|2
|P|2
(cid:2)N
and
|Pk|
(cid:2)
n=0
k
n=0
k
k
k
C. Cost of Fault Tolerance
The number of restarted processes following a fault oc-
currence is an important measure of the quality of grid
partitioning. We can estimate the fault tolerance cost using
VI. CONCLUSION
We designed and implemented a system supporting partial
message logging. RPCS has three main features: the runtime
analysis of communication, physical node-based partitioning,
and a scalable algorithm for 2D or 3D grid graphs. Annotation
718
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:21:10 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] Franck Cappello, Fault Tolerance in Petascale/Exascale Systems: Current
Knowledge, Challenges and Research Opportunities, INRIA, IJHPCA
23(3): 212-226, 2009
[2] Amina Guermouche, Thomas Ropars, Elisabeth Brunet, Marc Snir and
Franck Cappello, Uncoordinated Checkpointing Without Domino Effect
for Send-Deterministic Message Passing Applications, Proceedings of
IPDPS 2011
[3] Thomas Ropars, Amina Guermouche, Bora Ucar, Esteban Meneses,
Laxmikant V. Kale, and Frank Cappello, On the use of cluster-based
partial message logging to improve fault tolerance for MPI HPC appli-
cations, In proceedings of the 17th international conference on Parallel
processing, Vol. Part I, Euro-par ’11, pp. 567-578, Berlin, Heidelberg,
2011.
[4] Meneses, E., Mendes, C. L. and Kale, L. V., Team-Based Message Log-
ging: Preliminary Results, Cluster, Cloud and Grid Computing (CCGrid),
2010.
[5] Karypis, G. and Kumar, V., A Fast and High Quality Multilevel Scheme
for Partitioning Irregular Graphs, SIAM J. Sci. Comput., Vol.20, No.1,
pp. 359-392, 1998
Jin-Min Yang, Kim Fun Li, Wen-Wei Li, and Da-Fang Zhang, Trading off
logging overhead and coordinating overhead to achieve efﬁcient rollback
recovery. Concurr. Comput.: Pract. Exper., 21(6):819-853, 2009
[6]
[7] F. Pellegrini and J. Roman., Scotch: A software package for static
mapping by dual recursive bipartitioning of process and architecture
graphs., In High-Performance Computing and Networking, pp. 493-498,
Springer, 1996
[8] The MPI Forum, MPI: A Message Passing Interface Standard. Version
3.0, available at http://www.mpi-forum.org
[9] H. Okuda, K. Nakajima, M. Iizuka, L. Chen, and H. Nakamura, Par-
allel ﬁnite element analysis platform for the earth simulator: Geofem.
Computational Science (ICCS) 2003, p. 700, 2003
[10] M. Yokokawa, F. Shoji, A. Uni, M. kurokawa and T. Watanabe, The K
computer: Japanese next-generation supercomputer development project,
In International Symposium on Low Power Electronics and Design
(ISLPED) 2011, pp. 371-372, IEEE, 2011
[11] Andrew I. Stone, John M. Dennis, and Michelle Mills Strout, The
CGPOP Miniapp, Version 1.0, Technical Repoert CS-11-103 July, 2011
Fig. 9. Cost score of GEOFEM
Fig. 10. Cost score of CGPOP
of RPCS processes can be added in advance, allowing us to
insert the code necessary for fault tolerance. This inserted
code calls an actual grouping procedure. The graph partitioning
component divides processes into several groups using a new
algorithm with a node-based topological approach. The node-
based method reduces the size of the graph to be partitioned,
and decreases the number of processes that must be rolled
back in case of node failure. In addition, our topological
√
approach can partition the grid graph without checking all
vertices. It has a computational complexity of O( d
N), where
d and N are the dimension of the topology and the number
of vertices. The characteristics of our method were demon-
strated by a series of evaluations. These showed that RPCS
reduces the number of processes rolled back when a node
fault occurs, and achieves faster process grouping without
any large degradation in quality. In future work, we will
integrate a full fault tolerance framework by combining RPCS
with a log-based checkpointer. In addition, we will expand
the evaluation scope to several applications that have more
complicated communication topologies.
ACKNOWLEDGMENT
The part of this work was supported by ANR-JST FP3C:
Collaborative Project between Japan and France ”Framework
and Programing for Post Petascale Computing” and JST Crest
ppOpen-HPC: ”Open Source Infrastructure for Development
and Execution of Large-Scale Scientiﬁc Applications on Post-
Peta-Scale Supercomputers with Automatic Tuning”.
719
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:21:10 UTC from IEEE Xplore.  Restrictions apply.