Applet supports the definition of the organizational model, allowing for the specifi-
cation of participants and roles. Bonita implements the Workflow Management
Coalitions's XPDL (XML Process Definition Language).
Enhydra Shark
Enhydra Shark was developed by Enhydra.org community in 2003. It is an ex-
tendable and embeddable Java workflow engine framework completely based on
WfMC specifications [8]. Shark can be used as a simple Java library in a servlet, a
swing application, or in a J2EE container. The current version of Enhydra Shark
is 2.3 which was released in November, 2008.
1. WfMC reference model. Shark is completely conformal to the WfMC reference
model.
2. Runtime perspective. Enhydra Shark’s installation and testing took 6 hours
and 11 minutes. The documentation provided by the developers was quite
straight forward, allowing for a relatively simple installation of the software. In
order to properly administrate the workflow system, we should use a commercial
administration tool. However, this is not mentioned in the documentation, and
this application is not available to download in the project’s homepage. This work-
flow system does not offer a web based environment. The administration/client
application is very user friendly, allowing for a quite easy testing. This workflow
system works upon a middleware platform (CORBA). Shark provides an easy in-
tegration with most database management systems and offers mechanisms that
support the exceptions treatment during a process execution.
3. Design time perspective. It took 2 hours and 24 minutes to define our sam-
ple workflow process. The documentation provided for the workflow process editor
is quite comprehensive. This workflow solution provides, by default, a graphical
editor very similar to JPEd (used with WfMOpen) called Together Workflow Editor
(TWE). It is very practical and easy to use, assuming itself as a complete and in-
teresting editor. TWE supports the design of the organizational perspective and
the workflow language used is XPDL.
338
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
JawFlow
JawFlow was been developed by Vincenzo Marchese in October, 2006 and cur-
rently it is in version 3.0. JawFlow is a workflow engine partially conformal to
WfMC directives and completely written in Java. It can be customized using ac-
tivities written in Java or in any scripting language supported by the Bean Script-
ing Framework [9]. To deploy, test and run JawFlow, we have used the JBoss ap-
plication server. However, there are no code dependencies to JBoss.
1. WfMC reference model. JawFlow only offers an embedded administration (in-
terface 5) and client application (interface 2). It does not offer a process definition
application (interface 1). This workflow system also does not offer interfaces to
invoke other application (interface 3), or to interact with other workflow enact-
ment services (interface 4).
2. Runtime perspective. It took 8 hours and 15 minutes in order to correctly
install and test this WfMS. The documentation provided by the developer is very
poor making the installation process quite complex. The process administration
environment is web-based and relatively easy to use. JawFlow requires JDK 1.5,
Jakarta ant, JBoss and a DBMS. This workflow system works upon a middleware
platform (Java RMI and CORBA). JawFlow can be integrated with any database
management system and offers mechanisms that support error handling during
the execution of a workflow process.
3. Design time perspective. This workflow engine does not provide a process
editor. Any editor supporting XPDL can be used. In our case, we have used JPEd
(used with WfMOpen). For this reason, the results presented it the Table 2 are
identical to the ones that are described in the WfMOpen design perspective.
JBoss jBPM
JBoss jBPM is a flexible and extensible workflow management system. The JBoss
jBPM’ core component is the plain Java software for managing process definitions
and the runtime environment for execution of process instances [10]. Its last re-
lease is version 3.2.3.
1. WfMC reference model. JBoss jBPM offers an administration/client applica-
tion. JBoss jBPM is also able to interact with other applications. However, it is not
able to interact with other workflow engines. This workflow system also offers a
process definition application.
2. Runtime perspective. It took 1 hour and 9 minutes in order to correctly in-
stall and test a working version of jBPM. The documentation provided was com-
prehensive. This was the main factor for making the installation and usage of this
workflow solution quite simple. Its web based administration/client application is
poor in terms of features offered. For this reason, the use of this workflow solution
should require the creation and implementation of a customized client and ad-
ministration application. jBPM requires the installation of JDK and Eclipse with
the JBoss IDE plugins. This workflow system works upon a middleware platform
(Java RMI or CORBA). It offers mechanisms that make jBPM portable across the
most popular databases and supports an effective treatment of transactions, al-
lowing exceptions treatment and rollback during process execution.
3. Design time perspective. To correctly define our sample workflow process,
using the Eclipse-based tooling available for BPEL, we have spent 2 hours and 45
minutes. The lack of documentation about JBoss jBPM’ process editor reflected
negatively upon the ease of the process definition. But this was not the only prob-
lem faced. In fact, another problem found was the decision building block (XOR-
339
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
split) had to be directly implemented in the code. Because JBoss jBPM uses BPEL
in order to define processes, the definition of sub processes is not supported. This
results complex workflow diagrams, which are difficult to analyze and under-
stand. The definition of our sample process was therefore quite difficult. This
process definition editor supports the specification of the organizational perspec-
tive. JBoss jBPM supports two process definition languages: jPDL and BPEL.
jPDL is a process language to implement business processes and workflows in
Java. BPEL provides process orchestration which is the ability to combine web
services into a process execution flow.
JFolder
JFolder (also known as PowerFolder) was developed by Gary Steinmetz in 2004
and is in version 1.1. It is a business application development studio and server
that uses a XML based language in order to define workflow processes that run
within a J2EE environment. Development and administration takes place
through a web browser. JFolder contains features like security, persistence,
email, file management and data access [11].
1. WfMC reference model. JFolder offers administration and monitoring tools as
well as a workflow client application. However, it is not able to interact with other
applications and with other workflow engines. This WfMS also offers a process
definition application.
2. Runtime perspective. JFolder installation and testing took 1 hour and 25
minutes. The amount of documentation provided by the developers is sufficient,
allowing us to install the software without facing any major problem. Its web-
based administration environment is quite unpleasant, becoming very often con-
fusing. This fact makes this workflow solution unattractive from an administra-
tion point of view. JFolder requires J2EE, Jakarta Ant and JBoss. This workflow
system works upon the middleware platform. The documentation does not indi-
cate if is possible to integrate JFolder with other than its default DBMS (hsqldb).
JFolder offers mechanisms that support error handling during the execution of
the workflow process.
3. Design time perspective. It took 4 hours and 25 minutes in order to design
our sample workflow process. A poor documentation is available for this editor.
This tool provides a very limited web-based process editor. It is not based on a
"drag and drop" idea. This situation makes it harder to add or edit elements of the
diagram. There is also no automated mechanism to save the process definition.
All these aspects made the design of our workflow process quite hard and com-
plex. It does not support the definition of roles and participants (organizational
perspective). The JFolder process editor uses a XML-based proprietary language
in order to define workflow processes. This language does not support the defini-
tion of sub processes.
JOpera
JOpera is built as a collection of plugins for Eclipse. It is a service composition
tool that offers a visual language and an execution platform for building workflow
processes. It includes a graphical modeling environment, a light-weight execution
engine, and also a set of powerful debugging tools which natively supports the
iterative nature of service composition. JOpera has a wide range of applications
and implications: from rapid development of service-oriented business applica-
tions to classical workflow management and business process automation [12].
JOpera plugin for Eclipse 1.9.11 is the latest release of this system.
340
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
1. WfMC reference model. JOpera offers an administration and monitoring tool.
It is able to interact with other applications. This workflow system also offers a
process definition application.
2. Runtime perspective. The JOpera system was developed with research pur-
poses. Its installation and testing took 1 hour and 56 minutes. The comprehen-
sive documentation provided by the developers has allowed us to install the soft-
ware without facing any major problem. However, the environment offered, based
on Eclipse workbench, is not a practical and user friendly management environ-
ment. This poor management environment makes this workflow solution unat-
tractive from a usage point of view. JOpera requires the installation of Java JDK
and Eclipse. JOpera provides integration with the most popular DBMS and sup-
ports a simple exception handling model.
3. Design time perspective. In order to correctly define our sample workflow
process we have spent 2 hours and 26 minutes. Enough documentation related
with the graphical editor is provided. In spite the fact that the definition of the
process is quite simple, JOpera process editor is quite repetitive, making the defi-
nition of our sample process longer. Another problem found is that the processes
being designed quickly became confusing and it was difficult to analyze/identify
the transitions between tasks. This limitation added to the fact that it does not
support the organizational perspective allows us to say that this is a very unat-
tractive process editor. The workflow language used by JOpera is JOpera visual
composition language.
OpenWFE
OpenWFE is an open source workflow engine that has been developed by Lukas
Eder and Nicolas Modryzk. It is a complete Business Process Management suite
with four components: an engine, a worklist, a client application and a host for
automatic agents. It is written in Java, but features access libraries for languages
such as Python, Perl, and Ruby, C# (.NET), PHP and Pnuts [13]. OpenWFE is
based on a distributed and web-friendly infrastructure. It offers mechanisms that
allow persistence, automated form generation and workflow administration. In
November 2006, OpenWFE 1.7.2 was released.
1. WfMC reference model. OpenWFE is completely conformal to the WfMC refer-
ence model.
2. Runtime perspective. OpenWFE’ installation and testing took only 22 min-
utes mainly due to its intuitive and user friendly environment. The comprehen-
sive documentation provided by the developers allows us to install the software
without facing any major problems. The only problem found during the installa-
tion was that the documentation available mainly described the installation of the
system for a Linux operating system. The web-based administration tool and cli-
ent application were very user friendly and simple to use. OpenWFE installation
requires JDK and JRE in order to work properly. This workflow system works
upon a middleware platform (Java RMI). It is also able to be integrated with all of
the most important database systems and it supports an effective treatment of
transactions, allowing exceptions treatment and rollback during process execu-
tion.
3. Design time perspective. Using the graphical editor provided, we have spent
5 hours and 15 minutes in order to correctly define our sample workflow process.
Workflow processes are designed in their own XML based language. The lack of
documentation of the process editor made this definition process quite long. Dro-
flo is a very limited web based process editor. In fact, it is not based on a "drag
341
OPEN SOURCE WORKFLOW MANAGEMENT SYSTEMS: A CONCISE SURVEY
and drop" idea. This situation makes it harder to add or edit element of the flow
diagram. Another problem found is that in order to save the XML code generated
the user has to copy it and then paste it in a text document. In other words, the
editor does not have any option to perform this action. This process editor is so
unpractical that in most situations it is much easier to define the workflow proc-
ess directly using XML. The definition of our sample process was, therefore, quite
hard. It supports the definition of the organizational perspective.
RUNA WFE
The Runa Consulting Group has released RUNA WFE, an open source work-
flow/business process management environment for jBoss jBPM engine. It is an
end user solution for business process management, written in Java, which pro-
vides a rich web interface containing a work list handler, a process monitor and a
form player. It also supports the interaction with external applications [14]. This
workflow solution most recent update is RUNA WFE 2.2 (November 2008).
1. WfMC reference model. RUNA WFE offers an administration/workflow client
application and also supports the interaction with other applications. However it
is not able to interact with other workflow engines. Moreover, this WfMS offers a