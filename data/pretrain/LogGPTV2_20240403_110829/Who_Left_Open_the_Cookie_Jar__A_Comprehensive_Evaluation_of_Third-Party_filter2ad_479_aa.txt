# Title: Who Left Open the Cookie Jar? A Comprehensive Evaluation of Third-Party Cookie Policies

# Authors: Gertjan Franken, Tom Van Goethem, and Wouter Joosen
# Affiliation: imec-DistriNet, KU Leuven

# Publication: Proceedings of the 27th USENIX Security Symposium
# Date: August 15â€“17, 2018
# Location: Baltimore, MD, USA
# ISBN: 978-1-939133-04-5
# Access: Open access sponsored by USENIX
# URL: https://www.usenix.org/conference/usenixsecurity18/presentation/franken

## Abstract
Cookies are the primary mechanism for user identification and authentication on the Internet. Although protected by the Same Origin Policy, popular browsers include cookies in all requests, including cross-site requests. This practice enables both cross-site attacks and third-party tracking. In response to these issues, various countermeasures have been developed, such as browser extensions and built-in protection mechanisms.

In this paper, we evaluate the effectiveness of these defense mechanisms using a framework that automatically assesses the enforcement of policies on third-party requests. Our framework generates a comprehensive set of test cases covering various web mechanisms. We identify several flaws in the policy implementations of 7 browsers and 46 browser extensions. We find that even built-in protection mechanisms can be circumvented by multiple novel techniques. Based on our results, we argue that our proposed framework is a critical tool for detecting bypasses and evaluating solutions to the exposed vulnerabilities. Finally, we analyze the origin of the identified bypass techniques, which are due to implementation, configuration, and design flaws.

## 1. Introduction
Since its inception, the Web has continuously evolved to meet the needs of its growing user base. One of the most significant improvements was the introduction of HTTP cookies, which allow web developers to store information such as website preferences or authentication tokens in the user's browser. After being set, cookies are attached to every subsequent request to the originating domain, enabling users to remain logged in without re-entering their credentials.

Despite their benefits, cookies also introduce security risks and unwanted behavior. Because cookies are attached to every request, including third-party requests, it becomes challenging for websites to validate the authenticity of a request. This allows attackers to trigger malicious requests from an unknowing victim's browser, leading to cross-site attacks such as cross-site request forgery (CSRF) and cross-site script inclusion (XSSI). Additionally, the inclusion of cookies in third-party requests enables user tracking across multiple websites, allowing trackers to collect and monetize user data.

To address these privacy and security concerns, various efforts have been made, including the development of browser extensions and built-in features that block or strip sensitive information from third-party requests. However, the effectiveness of these mechanisms depends on their ability to intercept or block every type of request. In this paper, we show that many built-in anti-tracking protections and popular browser extensions can be bypassed by at least one technique.

We also evaluate the recently introduced same-site cookies, which aim to defend against cross-site attacks. While similar to tracking defenses, the security guarantees provided by same-site cookies depend on consistent application across all types of requests. Our evaluation reveals instances where the same-site cookie policy was not correctly applied, allowing adversaries to send authenticated requests despite the lax or strict mode settings.

In this paper, we present the first extensive evaluation of policies applied to third-party cookies, whether for thwarting cross-site attacks or preventing third-party tracking. Our evaluation is driven by a framework that generates a wide range of test cases encompassing all methods that can trigger a third-party request. By applying this framework to 7 browsers and 46 browser extensions, we found that virtually every browser and extension can be bypassed. The sources of these bypasses can be traced back to implementation, configuration, and design flaws. Our crawl on the Alexa top 10,000 did not identify any use of the discovered bypasses in the wild, indicating that they are novel.

Our main contributions are:
- A framework to automatically detect bypasses of third-party request and cookie policies, applicable to all modern browsers, even with browser extensions or specific settings.
- Identification of various ways in which countermeasures against cookie leaking can be bypassed, through the analysis of 7 browsers, 31 ad-blocking, and 15 anti-tracking extensions.
- A crawl on the Alexa top 10,000, visiting 160,059 web pages, to inspect if any of these bypasses were already being used on the Web.
- Proposed solutions to rectify the implementations of existing policies based on the detected bypasses.

## 2. Background
### 2.1 Cross-site Requests
A fundamental feature of the modern web is the ability to include content from other domains. When a user visits a web page, the browser fetches the referenced third-party content by sending a separate request. For example, a web page on `first-party.com` may include an image hosted on `third-party.com`. The browser will include a `Cookie` header in the request if cookies were previously set for that domain. In this scenario, the cookies attached to the request to `third-party.com` are called third-party cookies.

### 2.2 Cross-site Attacks
Browsers, by default, attach cookies to any request, including third-party requests. This allows adversaries to create web pages that construct malicious payloads sent using the victim's authentication. Common cross-site attacks include:
- **Cross-Site Request Forgery (CSRF):** Attackers perform undesirable actions, such as transferring funds, on behalf of the authenticated victim.
- **Cross-Site Script Inclusion (XSSI):** Attackers bypass the Same-Origin Policy to obtain sensitive information.
- **Cross-Site Timing Attacks:** Attackers construct sensitive data by observing side-channel leaks.

### 2.3 Same-Site Cookies
Same-site cookies are a recent mechanism aimed at protecting against cross-site attacks. These cookies have an additional `SameSite` attribute, which can be set to `lax` or `strict`. In `lax` mode, the cookie is included only in top-level GET requests. In `strict` mode, the cookie is never included in cross-site requests. While same-site cookies are promising, their adoption is still limited, and they are mainly intended as an in-depth defense mechanism.

### 2.4 Third-Party Tracking
Third-party tracking involves collecting user data across multiple websites for purposes such as advertising, user experience, and data monetization. Trackers use embedded scripts to gather information about user interactions and preferences. Despite increased awareness and regular cookie deletion, some trackers use more advanced methods like Flash-based cookie respawning and browser fingerprinting.

## 3. Framework
### 3.1 Framework Design
Our framework aims to detect techniques that can circumvent policies that strip cookies from cross-site requests or block these requests entirely. The framework consists of several components, including browser control and test-case generation. The source code is publicly available.

#### 3.1.1 Browser Manipulation
The framework is managed by the Framework Manager, which specifies the browsers and browser extensions to be analyzed. The Browser Control component creates and configures browser instances, instructing them to visit generated test cases using Selenium WebDriver. Browsers without Selenium support are controlled via command-line and manually configured profiles.

#### 3.1.2 Test Environment
Before executing test scenarios, the browser instance is prepared by installing several cookies on the target domain. These cookies have different attributes, such as `none`, `HttpOnly`, and `Secure`. For browsers that support it, we also install two cookies with the `SameSite` attribute.

By systematically evaluating the behavior of browsers and extensions, our framework identifies and analyzes bypasses, providing insights into the effectiveness of current policies and suggesting improvements.

---

This optimized version of your text maintains the original content while improving clarity, coherence, and professionalism.