title:Who Left Open the Cookie Jar? A Comprehensive Evaluation of Third-Party
Cookie Policies
author:Gertjan Franken and
Tom van Goethem and
Wouter Joosen
Who Left Open the Cookie Jar? A Comprehensive 
Evaluation of Third-Party Cookie Policies
Gertjan Franken, Tom Van Goethem, and Wouter Joosen, imec-DistriNet, KU Leuven
https://www.usenix.org/conference/usenixsecurity18/presentation/franken
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Who Left Open the Cookie Jar?
A Comprehensive Evaluation of Third-Party Cookie Policies
Gertjan Franken
imec-DistriNet, KU Leuven
Tom Van Goethem
imec-DistriNet, KU Leuven
Wouter Joosen
imec-DistriNet, KU Leuven
Abstract
Nowadays, cookies are the most prominent mechanism
to identify and authenticate users on the Internet. Al-
though protected by the Same Origin Policy, popular
browsers include cookies in all requests, even when these
are cross-site. Unfortunately, these third-party cookies
enable both cross-site attacks and third-party tracking.
As a response to these nefarious consequences, various
countermeasures have been developed in the form of
browser extensions or even protection mechanisms that
are built directly into the browser.
In this paper, we evaluate the effectiveness of these
defense mechanisms by leveraging a framework that au-
tomatically evaluates the enforcement of the policies im-
posed to third-party requests. By applying our frame-
work, which generates a comprehensive set of test cases
covering various web mechanisms, we identify several
ﬂaws in the policy implementations of the 7 browsers
and 46 browser extensions that were evaluated. We ﬁnd
that even built-in protection mechanisms can be circum-
vented by multiple novel techniques we discover. Based
on these results, we argue that our proposed framework is
a much-needed tool to detect bypasses and evaluate solu-
tions to the exposed leaks. Finally, we analyze the origin
of the identiﬁed bypass techniques, and ﬁnd that these
are due to a variety of implementation, conﬁguration and
design ﬂaws.
1
Introduction
Since its emergence, the Web has been continuously im-
proving to meet the evolving needs of its ever-growing
number of users. One of the ﬁrst and most crucial im-
provements was the introduction of HTTP cookies [5],
which allow web developers to temporarily store infor-
mation such as website preferences or authentication to-
kens in the user’s browser. After being set, the cookies
are attached to every subsequent request to the originat-
ing domain, allowing users to remain logged in to a web-
site without having to re-enter their credentials.
Despite their signiﬁcant merits, the way cookies are
implemented in most modern browsers also introduces
a variety of attacks and other unwanted behavior. More
precisely, because cookies are attached to every request,
including third-party requests, it becomes more difﬁcult
for websites to validate the authenticity of a request.
Consequently, an attacker can trigger requests with a ma-
licious payload from the browser of an unknowing vic-
tim. Through so-called cross-site attacks, adversaries can
abuse the implicit authentication to perform malicious
actions through cross-site request forgery attacks [6, 54],
or extract personal and sensitive information through
cross-site script inclusion [24] and cross-site timing at-
tacks [9, 16, 48].
Next to cross-site attacks, the inclusion of cookies in
third-party requests also allows for users to be tracked
across the various websites they visit. Researchers have
found that through the inclusion of code snippets that
trigger requests to third-party trackers,
the browsing
habits of users are collected on a massive scale [2,40,53].
These trackers leverage this aggregated information for
the purpose of content personalization, e.g. on social net-
works, displaying targeted advertisements, or simply as
an asset that is monetized by selling access to the accu-
mulated data.
As a direct response to the privacy threat imposed
by third-party trackers and associated intrusive adver-
tisements, a wide variety of efforts have been made.
Most prominently is the emergence of dozens of browser
extensions that aim to thwart their users from being
tracked online. These extensions make use of a desig-
nated browser API [39] to intercept requests and either
block them or strip sensitive information such as head-
ers and cookies. Correspondingly, several browsers have
recently introduced built-in features that aim to mitigate
user tracking. For instance, Firefox in its private brows-
ing mode will by default block third-party requests that
USENIX Association
27th USENIX Security Symposium    151
are made to online trackers [7]. It is important to note
that the effectiveness of these anti-tracking mechanisms
fully relies on the ability to intercept or block every type
of request, as a single exception would allow trackers to
simply bypass the policies. In this paper, we show that in
the current state, built-in anti-tracking protection mech-
anisms as well as virtually every popular browser exten-
sion that relies on blocking third-party requests to either
prevent user tracking or disable intrusive advertisements,
can be bypassed by at least one technique.
i.e.
Next to tracking protections, we also evaluate a re-
cently introduced and promising feature aimed at defend-
ing against cross-site attacks, namely same-site cook-
ies [51]. While cross-site attacks share the same cause
as online tracking,
the inclusion of cookies on
third-party requests, their defenses are orthogonal. The
SameSite attribute on cookies can be set by a website
developer, and indicates that this cookie should only be
included with ﬁrst-party requests. Consequently, when
this policy is applied correctly, same-site cookies defend
against the whole class of cross-site attacks. Similar to
the tracking defenses, the security guarantees provided
by same-site cookies stand or fall by the ability to ap-
ply its policies on every type of request. As part of our
evaluation, we discovered several instances in which the
same-site cookie policy was not correctly applied, thus
allowing an adversary to send authenticated requests re-
gardless of the lax or strict mode applied to the same-
site cookie. Although this bypass could only be used
to trigger GET requests, thereby making the exploita-
tion of CSRF vulnerabilities in websites that follow com-
mon best-practices more difﬁcult, it does underline the
importance of a systematic evaluation to test whether
browser implementations consistently follow the policies
proposed in the speciﬁcation.
In this paper, we present the ﬁrst extensive evalua-
tion of policies applied to third-party cookies, whether
for the purpose of thwarting cross-site attacks or pre-
venting third-party tracking. This evaluation is driven
by a framework that generates a wide-range of test cases
encompassing all methods that can be used to trigger
a third-party request in various constructs. Our frame-
work can be used to launch a wide variety of differ-
ent browsers, with or without extensions, and analyze,
through an intercepting proxy, whether the observed be-
havior matches the one expected by the browser instance.
We applied this framework to perform an analysis of 7
browsers and 46 browser extensions, and found that for
virtually every browser and extension the imposed pol-
icy can be bypassed. The sources for these bypasses can
be traced back to a variety of implementation, conﬁgu-
ration and design ﬂaws. Further, our crawl on the Alexa
top 10,000 did not identify any use of the discovered by-
passes in the wild, indicating that these are novel.
Our main contributions are the following:
• We developed a framework with the intent to au-
tomatically detect bypasses of third-party request
and cookie policies. This framework is applicable
to all modern browsers, even in combination with a
browser extension or certain browser settings.
• By applying the framework to 7 browsers, 31 ad
blocking and 15 anti-tracking extensions, we found
various ways in which countermeasures against
cookie leaking can be bypassed.
• We performed a crawl on the Alexa top 10,000, vis-
iting 160,059 web pages, to inspect if any of these
bypasses were already being used on the Web. In or-
der to estimate the completeness of our framework,
we analyzed the DNS records spawned by each web
page.
• Finally, we propose solutions to rectify the imple-
mentations of existing policies based on the de-
tected bypasses.
2 Background
This will
initiate a request
A fundamental trait of the modern web is that web-
sites can include content from other domains by simply
referring to it. The browser will fetch the referenced
third-party content by sending a separate request, as
shown in Figure 1. The web page of first-party.com
contains a reference to an image that
is hosted on
third-party.com.
In this scenario, the user ﬁrst in-
structs his browser to visit this web page, e.g. by en-
tering the address in the address bar or by clicking
on a link.
to the web
page http://first-party.com/, and a subsequent
response will be received by the browser (1). While pars-
ing the web page, the user’s browser comes across the
reference to https://third-party.com and fetches
the associated resource by sending a separate request
(2). The browser will include a Cookie header [5] to
the request if these were previously set for that domain
(using the Set-Cookie header in a response). This ap-
plies to both the request to first-party.com as well as
third-party.com. In this scenario, we would name the
cookies attached to the latter request third-party cookies,
as this is a request to a different domain than the includ-
ing document.
2.1 Cross-site attacks
Because browsers will, by default, attach cookies to any
request, including third-party requests, an adversary is
152    27th USENIX Security Symposium
USENIX Association
can be given one of two values: lax or strict. When
the value is set to lax, the cookie may only be included
in cross-site GET requests that are top-level (i.e.
the
URL in the address bar changes due to the request). An
exception to this is a cross-site request initiated by Pre-
render functionality [46], in which this cookie is included
anyway. When the attribute value is set to strict, the
cookie may never be included in any cross-site requests.
At the time of writing, same-site cookies are supported
by Chrome, Opera, Firefox and Edge [8, 27, 50]. Same-
site cookies are backwards compatible; browsers that do
not offer support will just treat same-site cookies as reg-
ular cookies. This, combined with the fact that same-
site cookies are mainly intended as an in-depth defense
mechanism, encourages web developers to still employ
traditional defenses such as CSRF tokens to thwart cross-
site attacks. While the adoption of same-site cookies is
still relatively small, with only a few popular websites
implementing them [42], the fact that they can mitigate
a whole class of attacks makes them a very promising
defense mechanism.
2.2 Third-party tracking
Internet users can be tracked for a variety of purposes, of-
ten with economic motives as the driving force behind it,
e.g. advertising, user experience or data auctioning [26].
One way of employing online tracking is through em-
bedded advertisements, which include tracking scripts to
learn more about the user’s interests and personalize the
advertisements based on this information. Alternatively,
website administrators may include scripts from analytic
services, which gather insights in how users interact with
their website, provided that this service can also use the
collected data for its own purposes. Moreover, websites
may embed functionality of a social platform through
which users can engage with each other. Because the
resource containing embedded functionality is requested
upon each page visit, the social platform can track which
websites their users visit.
The main technique that is used to track users across
different websites is by means of third-party cookies.
More precisely, a script that is included on a wide range
of websites, e.g. to display advertisements, triggers a
request to the server of the tracker. Subsequently, the
tracker checks whether this request contains a cookie,
and either associates the triggered request with the pro-
ﬁle of the user, or creates a new proﬁle and responds
with a Set-Cookie header containing the newly gener-
ated cookie. In the latter case, the user’s browser will
associate the cookie with the site of the tracker, and will
include it in all subsequent requests to it. This allows the
tracker to follow users across all websites that include a
script that initiates the request to the tracker.
Figure 1: Example of a cross-site request.
able create a web page that constructs malicious pay-
loads which will be sent using the victim’s authentica-
tion. Through these so-called cross-site attacks, attack-
ers can trigger state changes on vulnerable websites or
extract sensitive information.
One of the most well-known cross-site attacks is cross-
site request forgery (CSRF). CSRF attacks aim to per-
form undesirable actions, e.g. transfer funds to the ac-
count of the adversary, on behalf of the victim who is
authenticated at the vulnerable website. Typically, this
will be done by triggering a POST request to the tar-
geted website, as it is considered best-practice to pre-
vent GET requests from having any state-changing ef-
fect [15]. Although websites of large organizations such
as The New York Times, ING, MetaFilter and YouTube
have been found to be vulnerable to CSRF attacks in
the past [54], the increased awareness among web devel-
opers and countermeasures integrated in popular frame-
works resulted in a drastic decrease in vulnerable web-
sites. According to the OWASP Top Ten Project, only
5% of current websites were found to be vulnerable, thus
leading to the exclusion of CSRF from the list of the
ten most critical web application security risks. Effective
countermeasures, such as requiring an unguessable token
in requests, have been known for a long period [6, 54],
and have been extensively applied [47].
In contrast to CSRF, cross-site script inclusion (XSSI)
and cross-site timing attacks aim to derive sensitive in-
formation. XSSI attacks bypass the Same-Origin Policy
(SOP) in an attempt to obtain information linked to the
authenticated user account [24]. Timing attacks, on the
other hand, try to construct sensitive data by observing
side-channel leaks [9, 16, 48].
A recently proposed mechanism called same-site
cookies aims to protect against the whole class of cross-
site attacks [51]. Same-site cookies are generic cookies
with an additional attribute named SameSite. Similar to
other cookie attributes, the SameSite attribute is deter-
mined by the website that sets the cookie. This attribute
USENIX Association
27th USENIX Security Symposium    153
Because of the raised awareness of online tracking
among the general public, many users delete cookies on
a regular basis [12], which results in a seemingly new
user proﬁle from the tracker’s perspective. As a reac-
tion, some online trackers have resorted to more exten-
sive tracking methods, such as respawning cookies via
Flash [44] and other web mechanisms [4], and browser
ﬁngerprinting [2,13,44,52]. As the evaluation presented
in this paper mainly focuses on cookie policies imposed
by browsers or browser extensions, our main focus is on
“traditional” user tracking by means of third-party cook-
ies. However, because the more recent tracking mecha-
nisms also rely on sending requests to the tracker, e.g.
containing the browser ﬁngerprint, these are also sub-
jected to the browser and extension policies. Bypasses of
these policies can also be leveraged by trackers to smug-
gle their requests past the protection mechanisms.
3 Framework
Despite all standardization efforts, browser implemen-
tations may exhibit inconsistent behavior or even devi-
ate from the standard. Additionally, web features from
different standards may interfere with each other, caus-
ing unintended side-effects, which may affect the secu-
rity and privacy guarantees. Despite prior efforts to ver-
ify these guarantees [22, 25], the real-world prevalence
of inconsistencies remains hard to measure as modern
browsers consist of millions of lines of code, or may be
proprietary, preventing researchers access to their source
code. In this paper, we evaluate the validity of constraints
that are imposed on stateful third-party requests, either
by browsers themselves or by browser extensions. Be-
cause of the limitations of source-code analysis, we de-
sign a framework that considers browsers, in various con-
ﬁgurations, as a black box. This section outlines the de-
sign choices and implementation of this framework. The
source code of our framework has been made publicly
available.1
3.1 Framework design
The goal of our framework is to detect techniques that
can be used to circumvent policies that strip cookies
from cross-site requests, or that try to block these re-
quests completely. To achieve this, our framework con-
sists of various components ranging from browser con-
trol to test-case generation. These components and their
interactions are depicted in Figure 2, and discussed in the
following sections.
1https://github.com/DistriNet/xsr-framework
3.1.1 Browser manipulation
The framework is driven by the Framework Manager
component, which is provided with information on
which browsers and browser extensions need to be an-
alyzed. The manager instructs the Browser Control
component to create a speciﬁc browser instance with
the predeﬁned settings. The controller will then in-
struct the browser instance to visit one of the gener-
ated test-cases by leveraging browser-speciﬁc Selenium
WebDriver2 implementations. Browsers that do not have
Selenium support, are controlled by manually conﬁgur-
ing a browser proﬁle and are then launched through the
command-line.
3.1.2 Test environment
Prior to executing all test scenarios, the browser instance
is ﬁrst prepared. More speciﬁcally, on the target domain,
i.e. the domain for which the test cases will try to initiate
an illegitimate cross-site request, we install several cook-
ies. Each of these cookies has different attributes: none,
which does not impose any restrictions on the cookies,
HttpOnly, which restricts the cookie from being ac-
cessed by client-side scripts, and Secure, which only al-
lows this cookie to be sent over an encrypted connection.
Throughout the remainder of the text, we refer to cook-
ies as cookies with any one of these attributes, unless ex-
plicitly stated otherwise. Furthermore, for browsers that
support it, we installed two cookies with the SameSite