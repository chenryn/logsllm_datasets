title:A formal framework for reflective database access control policies
author:Lars E. Olson and
Carl A. Gunter and
P. Madhusudan
A Formal Framework for
Reﬂective Database Access Control Policies
Lars E. Olson, Carl A. Gunter, and P. Madhusudan
University of Illinois at Urbana-Champaign
ABSTRACT
Reﬂective Database Access Control (RDBAC) is a model in
which a database privilege is expressed as a database query
itself, rather than as a static privilege contained in an ac-
cess control list. RDBAC aids the management of database
access controls by improving the expressiveness of policies.
However, such policies introduce new interactions between
data managed by diﬀerent users, and can lead to unexpected
results if not carefully written and analyzed. We propose the
use of Transaction Datalog as a formal framework for ex-
pressing reﬂective access control policies. We demonstrate
how it provides a basis for analyzing certain types of policies
and enables secure implementations that can guarantee that
conﬁgurations built on these policies cannot be subverted.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Access Controls
General Terms
Security, Languages, Theory
Keywords
Reﬂective database access control, ﬁne-grained access con-
trol, transaction datalog, formal safety veriﬁcation
1.
INTRODUCTION
Current databases use a conceptually simple model for
access control: each table has an access control list (ACL)
containing the users that are allowed to access it, along with
what operations each user is allowed to do. If only certain
portions of a table should be granted to a user, then a sep-
arate view is created to deﬁne those portions, and the user
is added to the ACL for that view. This model is ﬂexible
enough to allow users to deﬁne access privileges for their
own tables, without requiring superuser privileges. Access
control lists, however, can be rather limited in expressing
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
the intended policy (such as “each employee can view their
own data”), rather than the extent of the policy (such as “Al-
ice can view data for Alice,” “Bob can view data for Bob,”
etc.) This makes policy administration more tedious in the
face of changing data, such as adding new users, implement-
ing new policies, or modifying the database schema. Many
databases such as Oracle have implemented roles in addi-
tion to ACLs to group together common sets of privileges
and simplify administration. However, in a scenario where
each user requires an individually-deﬁned view of a table
(such as the policy of “each employee can view their own
data in the table”), it becomes just as tedious to use roles
as to use ACLs.
In this paper we propose “Reﬂective Database Access Con-
trol (RDBAC)”, in which access policy decisions can depend
on data contained in other parts of the database. While most
databases already do store ACLs within the database itself,
this data is stratiﬁed from the rest of the database to keep
policies simple, and the expressiveness of queries within the
policy is limited to querying whether the user is contained
in the ACL. RDBAC would remove this stratiﬁcation and
allow policies to refer to any part of the database. Let us il-
lustrate with an example. Suppose we have a database that
contains a table listing a company’s employees, along with
their positions in the company and the departments in which
they work. Suppose also that we want to grant all employees
that are managers access to the data of the other employees
in their department. When a manager queries this table, the
policy will ﬁrst check that the user is indeed a manager, then
retrieve the user’s department, and ﬁnally return all employ-
ees in that department. This approach has at least two ben-
eﬁts. First, the policy leverages data already being stored in
the database. Second, the policy describes its intent rather
than its extent; thus, privileges are automatically updated
when the database is updated (for instance, when an em-
ployee receives a promotion to manager), preventing update
anomalies that leave the database in an inconsistent state.
This kind of behavior could perhaps be enforced by us-
ing triggers to update access privileges when a database
changes. However, this is not an ideal solution because a
policy may depend on a table for which the policy deﬁner
does not have suﬃcient privileges to deﬁne a trigger. Ad-
ditionally, when the policy itself is split between ACLs and
triggers, any future modiﬁcations to this policy will cause
administration headaches. The concept of RDBAC is impor-
tant enough that access control extensions oﬀered by major
database vendors do support it. For instance, Oracle’s Vir-
tual Private Database technology [26], in which every query
on a database table is rewritten by a special user-deﬁned
function, can implement RDBAC. This system and others
like it have at least three drawbacks. First, the privilege
to deﬁne these policy functions is considered an adminis-
trator privilege [27], so not all users can deﬁne reﬂective
policies on the tables they create. Relaxing this restriction
will make the system more scalable by supporting multilat-
eral administration. Second, policies that refer back to the
table being queried (such as our example policy for granting
access to managers) are disallowed, as they might otherwise
cause a non-terminating loop when the policy recursively
invokes itself by querying the table. A system that enables
safe forms of such reference will have useful additional ex-
pressive power. Third, and most importantly, existing im-
plementations of RDBAC have no formal description. Since
the interactions between access privileges and arbitrary data
in the database are complicated, analysis of what arbitrary
users can or cannot do is not always intuitive. Hence a for-
mal foundation for better analysis is needed.
The goal of this paper is to develop an RDBAC formal-
ism in a way that addresses these three limitations. We
propose using Transaction Datalog [7], an extension of clas-
sic Datalog that allows modiﬁcations to a database and has
a precise mathematical semantics, incorporating recursive
(cyclic) deﬁnitions and transaction-based atomic updates,
assuring serializable execution of transactions. We propose
that access policies be written in Transaction Datalog, and
we exhibit a variety of scenarios that show this to be a nat-
ural and intuitive model. Our contributions also include
an analysis of the weaknesses of existing approaches both
in expressiveness and in formal foundations, and a formal
framework that addresses these limitations. We also pro-
vide a theoretical analysis of decidability properties of our
proposed system. In particular, we describe the problem of
formal security analysis (which asks whether untrusted users
can ever gain access to some protected data) and show that
while this problem is in general undecidable, there are rea-
sonable restrictions on policies that allow decidable security
analysis algorithms. Finally, we describe a prototype im-
plementation of our system, and experiments that suggest
that evaluations of reﬂective policies written in Transaction
Datalog can be evaluated with acceptable overheads.
The paper is divided into seven sections. Section 2 de-
scribes some example reﬂective policies, including a policy
that causes sensitive information to be leaked to another
table, and describes related work. Section 3 reviews classi-
cal Datalog and Transaction Datalog semantics, which form
the basis of our access control model. Section 4 show how
to use Transaction Datalog to enforce RDBAC policies and
how they should be used to prevent policies from leaking
sensitive information. Section 5 discusses decidability for
security properties. Section 6 describes our prototype im-
plementation, and Section 7 concludes. Due to space limi-
tations we have omitted proofs and background material on
the semantics of Datalog. A full version of this paper will
include these materials.
2. RDBAC BACKGROUND
We deﬁne Reﬂective Database Access Control as a database
access control paradigm in which access decisions are depen-
dent on attributes and relationships contained in the current
database state. Views can use the current database state
and are therefore already reﬂective, albeit in a limited way.
Consider the following view: create view s_e as select *
from employees where department = ’sales’. When a
user queries s_e, the rows in the employees table that are
returned depend on whether the department value is equal
to “sales.” If a newly-hired employee gets added to the
database, then the response to this query will automatically
include the new employee without any changes to the query
or to the policy, and is therefore dependent on the current
database state. However, this reﬂective capability is limited:
it cannot express a policy such as “the manager of each de-
partment may update the salary data for each employee in
that department” without deﬁning a separate view. Study-
ing the emphasis on allowing policies to contain arbitrary
database queries will allow greater expressibility in deﬁning
more robust policies.
2.1 Examples
RDBAC expressiveness is desired for practical implemen-
tations. For instance, Oracle’s VPD technology was de-
signed to allow policy writers to deﬁne policy logic using
arbitrary code written as a stored procedure [26]. A pol-
icy function may access the username of the user that cre-
ated the login session, the query executed by the user, any
application-deﬁned context data that may exist, and the re-
sults of any query available to the policy writer. The func-
tion returns a boolean condition, and the database rewrites
the user’s query to include this condition as a ﬁlter.
create or replace function employeeFilter
(p_schema varchar, p_obj varchar)
return varchar as
begin
return ’username = ’’’ ||
SYS_CONTEXT(’userenv’, ’SESSION_USER’) || ’’’’;
end
Figure 1: Example Oracle VPD function
Figure 1 shows an example policy employeeFilter for
a VPD. (Readers unfamiliar with VPD policy syntax can
safely ignore the function signature and focus on the func-
tion body, which describes the return value.) When a pol-
icy writer deﬁnes this as a policy function protecting a ta-
ble employee and a user executes the query select * from
employee; the function employeeFilter automatically ex-
ecutes. This returns the string “username=’” (the double-
quote characters in the function are a special symbol repre-
senting the apostrophe character, as distinguished from the
single-quote characters that delimit a string), concatenated
with the return value of a function call to SYS_CONTEXT, con-
catenated with another apostrophe character. SYS_CONTEXT
is a built-in function that accesses a map of special sys-
tem variables;
in this case, it looks up the string associ-
ated with the key SESSION_USER, the user currently logged
in.
If the session user is Bob, then this function returns
the string “BOB”, the function returns the string “username
= ’BOB’”, and the query is rewritten to select * from em-
ployee where username = ’BOB’. Eﬀectively, this enforces
the policy “all users may access employee data about them-
selves, and no one else.”
Similar policies can be deﬁned for ACL-based access con-
trol in many commercial databases, if the database provides
access to a system variable like SESSION_USER. One major
create or replace function attackFilter
(p_schema varchar, p_obj varchar)
return varchar as
begin
for row in (select * from alice.employees) loop
insert into bob.leaked_info values(row.username,
row.ssn, row.salary, row.email);
end loop;
commit;
return ’’;
end
Figure 2: Oracle VPD function that exploits the
function from Figure 1
diﬀerence with VPD policies is that other databases must
write a separate view deﬁnition; with VPD, the user may
query the base table directly.
There are, however, some subtleties with VPD functions
that may cause serious security violations if they are not
written carefully, even with such a simple policy as the one
from Figure 1. For instance, suppose that Bob (an employee
without superuser privileges) is put in charge of making food
assignments for a company picnic, creates his own table pic-
nic for keeping track of the assignments, and is given the
privilege of deﬁning policies on it. Bob surreptitiously cre-
ates a third table called leaked_info which contains the
same ﬁelds as the employees table, and then deﬁnes a pol-
icy function for picnic as shown in Figure 2. Note that this
policy function loops over all rows returned by the query
select * from alice.employees and inserts the values re-
turned by this query into the leaked_info table. If another
user, say Carol, happens to execute a query on Bob’s picnic
table, then, because Alice’s policy executes based on the user
that is logged in, Carol’s row (which Bob should not have
access to) is copied to Bob’s table, which he can then access
at his leisure. Note also that the policy returns the empty
string, which means Carol’s original query will seem to ex-
ecute as she expected, so Carol is unaware that any other
operations on her data have taken place. Similar problems
occur in other databases when user Bob is allowed to create
views that contain user-deﬁned functions, which could sim-
ilarly query a protected table and store the information in
another table to which Bob has full access.
At our request, Oracle’s technical support staﬀ reviewed
this example and responded to us with three points [27].
First, the ability to deﬁne policies in VPD is an administra-
tive privilege that also includes the ability to drop policies.
Thus, if Bob had the ability to deﬁne such a function as
described in Figure 2, he also has the ability to drop the
function described in Figure 1 and thereby gain access to
the entire table. Such a privilege should only be given to
trusted users in the ﬁrst place.
In our design we wish to
allow non-administrators to deﬁne policies on their own ta-
bles, as the Griﬃths-Wade model [15] already does, since
this supports more ﬂexible and scalable management. Sec-
ond, Alice could preclude this behavior by using the function
call SYS_CONTEXT(’userenv’, ’POLICY_INVOKER’) instead.
Instead of returning the current logged-in user, this would
return the user “responsible” for invoking the policy, which in
this case would be Bob since it was his function that tried to
access the employees table. This is a subtle diﬀerence that
may be lost on less-experienced administrators. Third, there
is always a danger that users can be tricked into executing
a function written by someone else; if the code contains a
Trojan Horse, it could cause the same kind of policy viola-
tion. Developers at MySQL and PostgreSQL agreed with
this perspective when we discussed the example with them.
Of course, one would ideally use built-in protections to elim-
inate Trojan Horses rather then simply surrendering to a “let
the executor beware” philosophy. At a minimum, it would
be good to have ways to reason precisely about the code to
address such threats.
A simple solution to preventing this problem would be to
insist that policies not be allowed to change the database, or
in other words, disallow updates within the policy language
and within user-deﬁned functions.
In fact, we will revisit
this condition on policies when we discuss safety analysis
in Section 5.2. While this would indeed solve the problem,
the solution comes at the expense of disallowing legitimate
and even useful policies, such as Chinese Wall policies [9] (in
which we require the state of the database to change when a
user queries certain data) or audit policies [12]. The RDBAC
model we develop allows the use of such policies while also
providing a mathematical basis for analyzing information
ﬂow.
2.2 Related Work
The term “reﬂective” as applied to computation was ﬁrst
described by Maes [25] for programming languages that en-
able a system (namely, a set of data objects) to reason about
itself. Using computational reﬂection for access control has
been examined in using history metadata and temporal logic
on arbitrary system resources [4], and in using a specialized
Java extension to enforce access control on compiled Java
code [35]. Both applications, however, still maintain a strat-
iﬁcation on the data being protected and the data used to
make policy decisions. QCM [16], and its successor, SD3 [20]