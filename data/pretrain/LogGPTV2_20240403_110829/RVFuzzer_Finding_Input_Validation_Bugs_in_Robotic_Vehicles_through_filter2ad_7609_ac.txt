lower half of the working range in the next run and sets the
new min-limit as the current input value. This decision is
justiﬁed by our earlier observation on the monotonic prop-
erty of control instability. For the next run, the mutator will
again set the new input value as the mid-point between
min-limit and max-limit.
• Case 2 (Line 15-16): If the current input value leads to
control state deviation, the mutator concludes that there are
other values lower than the current input value which can
also cause deviation. Hence, for the next run, the mutator
will skip the upper half of the working range by setting
max-limit as the current input value and the new input value
as the mid-point between min-limit and max-limit.
We highlight that, after each run, the mutator skips the
values corresponding to one half of the working range. This
input space reduction strategy ensures that the mutator covers
all possible values of the target control parameter efﬁciently.
After determining the working range for the next run, the
mutator sets the input value for the next run as the mid-point of
the new working range (Line 19), following the binary search
method. The mutator continues the (detector) feedback-driven
430    28th USENIX Security Symposium
USENIX Association
(cid:46) Main function
(cid:46) ’U’: Upper-bound search
(cid:46) ’L’: Lower-bound search
(cid:46) Return an invalid range of one parameter
Initialize R
R.max ← ONEMUTATION(M,P,E, τ,U)
R.min ← ONEMUTATION(M,P,E, τ,L)
return R
Algorithm 1 One-dimensional Mutation.
Input: Input mission (M), input parameter (P), test environmental factor (E), control
state deviation threshold set for all primitive controllers (τ)
Output: An invalid range for a target parameter (R)
1: function ONEDIMENSIONALMUTATION(M, P, E, τ)
2:
3:
4:
5:
6: function ONEMUTATION(M, P, E, τ, bound)
7:
8:
9:
10:
11: MinDi f f ← 0
12:
test(cid:48) ← test
13:
Dev ← RUNANDDEVIATIONCHECK(M,P,test,E, τ)
14:
15:
if (bound = U and Dev = True) or (bound = L and Dev = False) then
16:
17:
18:
19:
20: while |test(cid:48) −test| > MinDi f f
21:
(cid:46) ’U’ indicates an upper-bound search
{test,max-limit,min-limit} ← {(P.Max− P.De f ault)/2,P.Max,P.De f ault}
(cid:46) ’L’ indicates a lower-bound search
{test,max-limit,min-limit} ← {(P.De f ault − P.Min)/2,P.De f ault,P.Min}
else
test ← (max-limit + min-limit)/2
return GETINVALIDRANGE(test,test(cid:48),bound,Dev)
(cid:46) Change the testing range
(cid:46) Change the testing range
(cid:46) Mutate the testing value
(cid:46) Check the exit condition
max-limit ← test
min-limit ← test
if bound = U then
else
do
(cid:46) Store the testing value before mutation
search method, until the difference between the input values
in the current and the next runs is less than a pre-determined
threshold MinDi f f (Line 20). Finally, the mutator determines
the valid value range and the corresponding vulnerable value
range (i.e., invalid range) for the target control parameter.
Multi-dimensional Mutation RVFUZZER also performs a
more advanced form of input mutation: multi-dimensional
mutation, which ﬁnds extra invalid parameter value ranges
that one-dimensional mutation may not ﬁnd. Such extra in-
valid parameter values are introduced because a target control
parameter may have dependencies on other parameters. In
other words, different (non-default) setting of such other pa-
rameters may expand the invalid range of the target parameter.
To test the impact of other parameters (Pothers), RVFUZZER
performs the multi-dimensional mutation for each target pa-
rameter (Ptarget) as described in Algorithm 2. In this algorithm,
RVFUZZER utilizes the results from the one-dimensional mu-
tation (Algorithm 1) of all control parameters (Pall) (i.e., the
lower and upper bounds of their valid ranges). For the target
parameter, RVFUZZER sets the initial working range as its
valid value range obtained from one-dimensional mutation
(Line 2). Thereafter, the mutation of the values of the other
parameters (Line 8-15) and the target parameter (Line 18-21)
are performed recursively.
In each recursion, the value of each of the other parameters
is mutated among only three values: the default value, the
lower bound of its valid value range and the corresponding
upper bound (Line 11). We note that setting the values of
one/more of the other parameters to their lower/upper bound
values leads to an extreme scenario which can potentially
exacerbate the impact of the target parameter on the control
state deviation.
After setting the values of the other parameters (Line
18), the mutator follows a procedure similar to the one-
Algorithm 2 Multi-dimensional Mutation.
Input: Input mission (M), target testing input parameter (Ptarget), a set of all input pa-
rameters including one-dimensional search results (PSall), test environmental factor
(E), control state deviation threshold set for all primitive controllers (τ)
Output: An invalid range for a target parameter (R)
1: function MULTIDIMENSIONALMUTATION(M, Ptarget, E, PSall, τ)
(cid:46) Main
(cid:46) Results from the previous step
(cid:46) A set of other parameters except for Ptarget
(cid:46) Initialize the mutated parameter set
(cid:46) Return a new invalid range
(cid:46) Recursively mutate PSothers
function
R ← GETINVALIDRANGE(Ptarget )
PSothers ← PSall −{Ptarget}
PSmut ← /0
R ← DEPMUTATION(M,Ptarget ,E,PSothers,PSmut ,R, τ)
return R
if PSothers (cid:54)= /0 then
Pmut ← PSothers.Pop()
PSmut ← PSmut ∪ Pmut
for PV ∈ Pmut .Min,Pmut .De f ault,Pmut .max do
PSmut ← UPDATEMUTATEDVALUE(PSmut ,Pmut ,PV )
R ← DEPMUTATION(M,Ptarget ,E,PSothers,PSmut , τ)
else
R ← DEPTEST(M,Ptarget ,E,PSmut ,R, τ)
return R
2:
3:
4:
5:
6:
7: function DEPMUTATION(M, Ptarget, E, PSothers, PSmut, R, τ)
8:
9:
10:
11:
12:
13:
14:
15:
16:
17: function DEPTEST(M, Ptarget, E, PSmut, R, τ)
18:
PARAMETERSET(PSmut )
19: U pper ← ONEMUTATION(M,Ptarget ,E, τ,U)
Lower ← ONEMUTATION(M,Ptarget ,E, τ,L)
20:
21:
return UPDATEINVALIDRANGE(R,U pper,Lower)
(cid:46) Conﬁgure parameters with values of PSmut
(cid:46) ’U’: Upper-bound search
(cid:46) ’L’: Lower-bound search
(cid:46) Update the invalid range of Ptarget if all of PSothers are mutated
dimensional mutation. It employs the mutation-based binary
search method to determine and update the lower and upper
bounds of the valid value range of the target parameter (Line
20-21). The new (in)valid range is then updated (Line 21).
In essence, as RVFUZZER mutates the values of multiple
control parameters together, it can identify additional values
of the target parameter that will cause control state deviation
under speciﬁc value setting of the other parameters. If such
invalid values lie outside the one-dimensional invalid value
range, the multi-dimensional mutation will conditionally ex-
pand the invalid value range to include those values, subject
to the setting of the other parameters. As such, the result of
the multi-dimensional mutation can be considered as an in-
complete set of constraints on the values of multiple control
parameters.
4.3.3 Environmental Factors
In real-world missions, the RV interacts with the physical
environment with external factors such as physical obstacles
and wind. Such factors inﬂuence RV’s control state and per-
formance. We note that an external factor (e.g., wind) could
make an otherwise valid parameter value cause control state
deviation. This means that such values can be exploited by
attackers. To detect such inﬂuence, RVFUZZER mutates and
simulates the impact of environmental factors along with
multi-dimensional mutation of parameter values. We catego-
rize the environmental factors into two types: geography and
disturbances.
Typical geographical factors of interest are obstacles en-
countered by an RV during its missions. The RV will need
to take actions to avoid such an obstacle. The actions may
entail changes in the parameter values to enable a change of
trajectory. This may expand the invalid range of the parameter
USENIX Association
28th USENIX Security Symposium    431
values that will cause control state deviation. To expose such
input validation bugs, RVFUZZER deﬁnes and simulates RV
missions in which the RV needs to avoid obstacles via sudden,
sharp trajectory changes. An attack case triggered by obstacle
avoidance will be presented in Section 6.3.3.
External disturbances such as wind and turbulence may
also disrupt the RV’s operation. RVFUZZER simulates the
wind gusts and mutates the wind speed and direction based
on real-world wind conditions. Details of the wind factor
setup are given in Section 6.2.2. The attack case presented in
Section 6.3.3 also exploits the wind condition.
5 Implementation
To evaluate RVFUZZER experimentally, we have imple-
mented a prototype of RVFUZZER. The implementation de-
tails of its main components are described as follows.
Subject Control Programs We choose the quadcopter as
our subject vehicle as the quadcopter operates in all of the
6DoF and it is one of the most widely adopted types of
RVs [49, 62, 64]. We point out that the implementation of
RVFUZZER is not speciﬁc to a certain RV type or model as
RVFUZZER only needs the physical quantities (e.g., weight
and inertial parameters) and the corresponding simulator to
support a vehicle. This means that RVFUZZER can be recon-
ﬁgured to support other types of RVs, such as hexacopters
and rovers.
We apply RVFUZZER to vet two control programs that
both support the quadcopter: ArduPilot 3.5 and PX4 1.8. The
default vehicle control model supported by both programs is
that of the 3DR IRIS+ quadcopter [12]. All vetting experi-
ments (on both ArduPilot and PX4) are performed using a
desktop PC with quad-core 3.4 GHz Intel Core i7 CPU and
32 GB RAM running Ubuntu 64-bit.
Simulator To simulate the physical vehicle and environment,
we utilized the APM simulator [8] and Gazebo [7, 42, 53] for
ArduPilot and PX4, respectively. We note that RVFUZZER’s
control instability detection and input mutation functions can
easily inter-operate with these simulators via the interfaces
between the simulators and the control and GCS programs.
GCS Program We used QGroundControl [26] and
MAVProxy [22] as the ground control station software for
PX4 and ArduPilot, respectively.
Control-Guided Tester The control-guided tester is the
core component of RVFUZZER. It is written in Python 2.7.6
with 5,722 lines of code. To implement the key functions in
RVFUZZER, we leveraged the Pymavlink library [25], which
provides APIs to remotely control the RV via the MAVLink
communication protocol [21]. MAVLink is the de-facto com-
munication protocol for robotic vehicles, which is used not
only by ArduPilot and PX4, but also by other platforms such
as Paparazzi [23], DJI [16], and LibrePilot [20]. MAVLink
supports a wide range of GCS commands (e.g., for mission
assignment, run-time control state monitoring, and parameter
checking and adjustment) that are leveraged and tested by
RVFUZZER.
To test the control performance of the subject vehicle, we
adopted the AVC2013 [5] mission which is an ofﬁcial mis-
sion provided by ArduPilot and used in autonomous vehicle
competitions to test the control and mission execution capabil-
ities of RVs. To improve the testing efﬁciency of RVFUZZER,
we adjusted that mission by removing the overlapping ﬂight
courses, reducing the distance between each pair of waypoints,
and increasing the vehicle’s velocity.
To classify and generate the bug discovery results, we lever-
age a list of dynamically adjustable control parameters pro-
vided by ArduPilot and PX4 [28, 29]. Such a list is usually
provided in the Extensible Markup Language (XML) format
in the source code and can be easily parsed.
6 Evaluation
We now present evaluation results from our experiments with
the RVFUZZER prototype. The three main questions that we
want to answer are: (1) How effective is RVFUZZER at ﬁnd-
ing input validation bugs (Section 6.1); (2) How do different
input mutation schemes of RVFUZZER contribute to the dis-
covery of input validation bugs (Section 6.2); and (3) How
can RVFUZZER be applied to discover input validation bugs
that would otherwise be exploited to launch stealthy attacks
(Section 6.3).
6.1 Finding Input Validation Bugs
We present a summary of the input validation bugs discovered
by RVFUZZER from ArduPilot and PX4. These bugs are the
result of a 8-day, non-stop testing session running RVFUZZER
on the two control programs.
6.1.1 Classiﬁcation of Input Validation Bugs
The validity of an input value of a control parameter is
checked based on the speciﬁed range that has been determined
and documented by developers during the development of the
control program. Our subject control programs (ArduPilot
and PX4) have the speciﬁed ranges of all the control param-
eters publicly available on their developer community web-
sites [28, 29]. Leveraging these public range speciﬁcations,
RVFUZZER found a number of input validation bugs through
the 8-hour testing session. We classify these input validation
bugs into two categories based on their root causes: range
implementation bugs and range speciﬁcation bugs.
Range Implementation Bugs Assuming that the speciﬁed