User: I'm running a django app and when some event occurs I'd like to send email to a list of recipients. 
I know that using Celery would be an intelligent choice, but I'd like to know if there's another, most simple way to do it without having to install a broker server, supervisor to handle the daemon process running in the background...
I'd like to find a more simple way to do it and change it to celery when needed. I'm not in charge of the production server and I know the guy who's running it will have big troubles setting all the configuration to work. I was thinking about firing a django command which opens several processes using multiprocessing library or something like that.
Assistant: If you don't want to implement celery (which in my opinion isn't terribly difficult to setup), then your best bet is probably implementing a very simple queue using either your database.  It would probably work along the lines of this:

System determines that an email needs to be sent and creates a row in the database with a status of being 'created' or 'queued' 
On the other side there will be a process that scans your "queue" periodically.  If they find anything to send (in this case any rows that with status "created/queued", they will update the status to 'sending'.  The process will then proceed to send the email and finally update the status to sent.

This will take care of both asynchronously sending the objects and keeping track of the statuses of all emails should things go awry.
You could potentially go with a Redis backend for your queue if the additional updates are too taxing onto your database as well.