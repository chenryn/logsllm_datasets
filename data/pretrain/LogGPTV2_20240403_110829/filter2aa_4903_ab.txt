.Ql \een )
保留住 反斜杠.
.Sh "手册页结构分析 THE ANATOMY OF A MAN PAGE"
手册页 可以 很容易的 通过 模板 构建, 模板 放在
.Pa /usr/share/misc/mdoc.template . 
另外 在
.Pa /usr/share/examples/mdoc
目录下 有一些 手册页 的 例子.
.Pp
.Ss 手册页的模板 A manual page template
.Bd -literal -offset indent
\&.\e" 所有的手册页都要求有下面的内容
\&.Dd 月 日, 年Month day, year
\&.Os 操作系统 [版本/发行号] 
\&.Dt 文档标题 [手册节号][卷] 
\&.Sh 名称 NAME
\&.Nm 名称 name
\&.Nd 对名称的简单描述 one line description of name
\&.Sh 总览 SYNOPSIS
\&.Sh 描述 DESCRIPTION
\&.\e" 后面的内容取消注释后可以用在你需要的任何地方.
\&.\e" 紧接着的这条命令用于手册第二和第三部分, 函数的返回值.
\&.\e" .Sh 返回值 RETURN VALUES
\&.\e" 下面的命令用于手册第1, 6, 7, 8部分.
\&.\e" .Sh 环境 ENVIRONMENT
\&.\e" .Sh 文件 FILES
\&.\e" .Sh 示例 EXAMPLES
\&.\e" 下面的命令用于手册第1, 6, 7, 8部分
\&.\e"     (在shell下的命令返回值和标准错误类型的诊断)
\&.\e" .Sh 诊断 DIAGNOSTICS
\&.\e" 下面的命令用于手册第二和第三部分中的错误和信号处理.
\&.\e" .Sh 错误 ERRORS
\&.\e" .Sh 另见 SEE ALSO
\&.\e" .Sh 遵循 CONFORMING TO
\&.\e" .Sh 历史 HISTORY
\&.\e" .Sh 作者 AUTHORS
\&.\e" .Sh BUGS
.Ed
.Pp
模板中 的 第一个部分 是
.Pq Li \&.Dd , \&.Os , \&.Dt 
宏; 文档日期, 手册或其内容 针对的 操作系统, 手册页的标题
.Pq Em (大写)
和 该手册页 所属的节 (部分号).
这些宏 确认和标识了 这个手册页. 在 后面的
.Sx 标题宏 TITLE MACROS
将 继续 讨论.
.Pp
这个 模板中 的 其余部分 是 小节首部 (section header)
.Pq Li \&.Sh ;
其中
.Sx 名称 NAME ,
.Sx 总览 SYNOPSIS
和
.Sx 描述 DESCRIPTION
是 必不可少的.
这些 首部 在
.Sx 页结构宏域
中 讨论 ( 介绍完
.Sx 手册域
之后 ) .
有一些 内容宏 被用来 示范 页面布局宏; 建议 接触 页面布局宏 前 先看看 内容宏.
.Sh 标题宏 TITLE MACROS
标题宏 是 页结构宏域 的 第一部分, 但 在 过去, 人们 如果 编写 手册页, 
它 是 手册的 第一部分, 也是 独立部分. 这里 设计了 三个宏 分别 描述
文档标题 或 手册标题, 操作系统, 和 制作日期. 它们 放在 文档的 最前面, 
一次 只 调用 一个, 用来 构建 文档的 页头 和 页脚.
.Bl -tag -width 6n
.It Li \&.Dt 文档标题 手册区# [卷]
文档标题 是 手册页的 主题, 由于 troff 的 限制, 必须
.Tn 大写 .
手册节号 (部分号) 介于 1,\ ...,\ 8, 如果 指明了 手册节号, 可以 忽略 卷标.
卷标 用 下列 标识的 一个 或 任意个:
.\" .Cl
.\" USD	UNIX 用户增补文档 User's Supplementary Documents
.\" .Cl
.\" PS1	UNIX 程序员增补文档 Programmer's Supplementary Documents
.Pp
.Bl -column SMM -offset indent -compact
.It Li AMD	UNIX 历史遗留的手册文档 Ancestral Manual Documents
.It Li SMM	UNIX 系统管理员手册 System Manager's Manual
.It Li URM	UNIX 参考手册 Reference Manual
.It Li PRM	UNIX 程序员手册 Programmer's Manual
.El
.Pp
缺省的卷标
.Li URM
代表 手册区 1, 6, and 7;
.Li SMM
代表 手册区 8;
.Li PRM
代表 手册区 2, 3, 4, and 5.
.\" .Cl
.\" MMI	UNIX Manual Master Index
.\" .Cl
.\" CON	UNIX Contributed Software Manual
.\" .Cl
.\" LOC	UNIX Local Manual
.It Li \&.Os 操作系统 发行号#
操作系统 的 名字 可能 是 缩写, 像
.Tn BSD
或
.Tn FreeBSD
或
.Tn ATT .
发行号 应该 是 系统 专用的 标准发行术语, 像 4.3, 4.3+Tahoe, V.3, V.4.
识别不出的 参数 就 照原样 显示在 页脚. 例如, 典型的页脚 可能是:
.Pp
.Dl \&.Os BSD 4.3
.Pp
或
.Dl \&.Os FreeBSD 2.2
.Pp
或者 象 订制的产品
.Pp
.Dl \&.Os CS Department
.Pp
作为 伯克利的缺省设置, 不带 参数 的
.Ql \&.Os
定义为
.Tn BSD 
(指定在文件
.Pa /usr/share/tmac/mdoc/doc-common 
中). 你 应该 把缺省值 设成
.Tn 本机.
注意, 如果 不设置
.Ql \&.Os
宏, 页面的左下角 会 很难看.
.It Li \&.Dd 月 日, 年 (month day, year)
日期 应当 写的 正规点:
.Pp
.ne 5
.Dl January 25, 1989
.El
.Sh 手册宏域 和 基本正文宏域的介绍
.Ss 名称背后 What's in a name...
手册宏域 的 宏名 来自 非正式的 日常用语, 用来 描述 命令, 子程序 及其 
相关文件. 在 写 手册页 时, 文字用语 有些 轻微的变化, 分别描述 三个 
不同 应用面. 首先是
.Nm \-mdoc
宏请求 的 用法. 其次, 用
.Nm \-mdoc
宏 描述
.Ux
命令. 最后, 对 用户 具体的描述 这条命令; 也就是 在 手册页 正文 里 
讨论这条命令.
.Pp
第一种 情况 下,
.Xr troff 1
宏 本身 就是 一种 命令; troff 命令 的 基本语法 是:
.Bd -filled -offset indent
\&.Va argument1 argument2 ... argument9
.Ed
.Pp
这里的
.Ql \&.Va
是 宏命令 或 宏请求, 紧随其后 的 是 待处理的参数.
第二种 情况 下, 使用 内容宏 描述 一条
.Ux
命令 要 复杂 些; 一个 典型的
.Sx 总览 SYNOPSIS
命令行 显示 如下:
.Bd -filled -offset indent
.Nm filter
.Op Fl flag
.Ar infile outfile
.Ed
.Pp
这里的
.Nm filter
是 命令名称, 方括弧内 的
.Fl flag
是一个
.Em 标志
参数, 作为 可选参数 放在 代表 选项 的 方括弧内. 在
.Nm \-mdoc
术语 中,
.Ar infile
和
.Ar outfile
称为
.Em 参数 .
产生 上述效果 的 宏 是 这样的:
.Bd -literal -offset indent
\&.Nm filter
\&.Op \&Fl flag
\&.Ar infile outfile
.Ed
.Pp
第三种 情况 讨论 命令 及其语法, 包括 它们的例子, 可能 还有 更多细节.
上面的例子里, 可以把
.Ar infile
和
.Ar outfile
理解为
.Em 操作参数 operands
或
.Em 文件参数 file arguments .
有些 命令行参数 罗列的 十分 长:
.Bl -tag -width make -offset indent
.It Nm make
.Op Fl eiknqrstv
.Op Fl D Ar variable
.Op Fl d Ar flags
.Op Fl f Ar makefile
.Bk -words
.Op Fl I Ar directory
.Ek
.Op Fl j Ar max_jobs
.Op Ar variable=value
.Bk -words
.Op Ar target ...
.Ek
.El
.Pp
这里 你 可能 讨论
.Nm make
命令 和 它的参数
.Ar makefile ,
作为 一个 标志的参数,
.Fl f ,
或者 讨论 一个 可选的文件操作对象
.Ar target .
在 具体的上下文 中, 这种细节 能够 防止 混淆. 然而
.Nm \-mdoc
宏包中 没有为 标志的参数 准备 宏. 作为 替代 是
.Ql \&Ar
参数宏, 用于 描述 操作对象 或 文件参数 如
.Ar target
以及 标志的参数 如
.Ar variable .
上面的 make 命令行 是 这样 产生的:
.Bd -literal -offset indent
\&.Nm make
\&.Op Fl eiknqrstv
\&.Op Fl D Ar variable
\&.Op Fl d Ar flags
\&.Op Fl f Ar makefile
\&.Op Fl I Ar directory
\&.Op Fl j Ar max_jobs
\&.Op Ar variable=value
\&.Bk -words
\&.Op Ar target ...
\&.Ek
.Ed
.Pp
在 
.Sx Keeps 
小节中 将会 解释
.Ql \&.Bk
和
.Ql \&.Ek
宏.
.Ss 基本语法 General Syntax
手册宏域 和 基本正文宏域 的 宏 有着 相似的语法, 仅有 微小差别:
.Ql \&.Ar ,
.Ql \&.Fl ,
.Ql \&.Nm ,
和
.Ql \&.Pa
仅当 无参数调用时 才有 区别;
.Ql \&.Fn
和
.Ql \&.Xr
的 参数列表 要求 一定的 顺序;
.Ql \&.Op
和
.Ql \&.Fn
宏有嵌套限制. 所有的 内容宏 能够 识别和正确处理 标点符号, 每个 标点符号 
要在 前面 用 空格 隔开. 如果 给出 这样的 宏请求:
.Pp
.Dl \&.Li sptr, ptr),
.Pp
结果是:
.Pp
.Dl Li sptr, ptr),
.Pp
标点符号 没有 被识别 出来, 全都按 原文字体 输出. 如果 标点符号 前面用
空格符 隔开:
.Pp
.Dl \&.Li "sptr , ptr ) ,"
.Pp
结果是:
.Pp
.Dl Li sptr , ptr ) ,
.Pp
标点符号 被 识别出来 了, 缺省的字体 也 有别于 原文文字的字体.
.Pp
用
.Ql \e& .
转义符 可以 去掉 标点字符 的 特殊意义.
.Xr Troff
作为 宏语言 有一定 的 限制, 当 表达的字串 中 含有
数学, 逻辑 或 引用 符号时 将 难于 处理:
.Bd -literal -offset indent-two
\&{+,\-,/,*,\&%,,=,=,==,&,`,',"}
.Ed
.Pp
问题是
.Xr troff
会 认为 它 应该 执行或运算 这些 符号 代表的操作.
要 防止 这一点 可以 用
.Ql \e&
转义 这些 字符. 典型语法 在 下面 显示的 第一个 内容宏 中 可以见到,
.Ql \&.Ad .
.Sh 手册域 MANUAL DOMAIN
.Ss 地址宏 Address Macro
地址宏 用 这种 格式 标明地址: addr1[,addr2[,addr3]].
.Pp
.Dl Usage: .Ad address ... 
.Bl -tag -width ".Ad f1 , f2 , f3 :" -compact -offset 14n
.It Li \&.Ad addr1
.Ad addr1
.It Li \&.Ad addr1\ .
.Ad addr1 .
.It Li \&.Ad addr1\ , file2
.Ad addr1 , file2
.It Li \&.Ad f1\ , f2\ , f3\ :
.Ad f1 , f2 , f3 :
.It Li \&.Ad addr\ )\ )\ ,
.Ad addr ) ) ,
.El
.Pp
不带参数 调用
.Ql \&.Ad
是个 错误.
.Ql \&.Ad
可以被 (其他宏) 调用和分析.
.Ss 作者名称 Author Name
The
.Ql \&.An
宏用以 说明 这个文档的 描述对象的 作者, 或者 这篇手册页的 作者.
名字 信息 后面的 其他参数 被认为是 标点符号.
.Pp
.Dl Usage: .An author_name ... 
.Bl -tag -width ".An Joe Author ) ) ," -compact -offset 14n
.It Li \&.An Joe\ Author
.An Joe Author
.It Li \&.An Joe\ Author\ ,
.An Joe\ Author ,
.It Li \&.An Joe\ Author\ \&Aq\ PI:EMAIL
.An Joe Author Aq PI:EMAIL
.It Li \&.An Joe\ Author\ )\ )\ ,
.An Joe Author ) ) ,
.El
.Pp
.Ql \&.An
宏可以被 (其他宏) 分析和调用, 
不带参数调用
.Ql \&.An
是个错误.
.Ss 参数宏 Argument Macro
当 引用 命令行参数时 可以使用
.Ql \&.Ar
参数宏.