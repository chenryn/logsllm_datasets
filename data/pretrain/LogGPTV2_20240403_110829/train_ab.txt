the program accepts up to three command-line arguments.
the first argument specifies the number of seconds for
the initial expiration of the timer.
the second argument specifies the interval for the timer, in seconds.
the third argument specifies the number of times the program should
allow the timer to expire before terminating.
the second and third command-line arguments are optional.
.pp
the following shell session demonstrates the use of the program:
.pp
.in +4n
.ex
.rb "$" " a.out 3 1 100"
0.000: timer started
3.000: read: 1; total=1
4.000: read: 1; total=2
.br "\(haz " "                 # type control\-z to suspend the program"
[1]+  stopped                 ./timerfd3_demo 3 1 100
.rb "$ " "fg" "                # resume execution after a few seconds"
a.out 3 1 100
9.660: read: 5; total=7
10.000: read: 1; total=8
11.000: read: 1; total=9
.br "\(hac " "                 # type control\-c to suspend the program"
.ee
.in
.ss program source
\&
.ex
.\" the commented out code here is what we currently need until
.\" the required stuff is in glibc
.\"
.\"
.\"/* link with \-lrt */
.\"#define _gnu_source
.\"#include 
.\"#include 
.\"#include 
.\"#if defined(__i386__)
.\"#define __nr_timerfd_create 322
.\"#define __nr_timerfd_settime 325
.\"#define __nr_timerfd_gettime 326
.\"#endif
.\"
.\"static int
.\"timerfd_create(int clockid, int flags)
.\"{
.\"    return syscall(__nr_timerfd_create, clockid, flags);
.\"}
.\"
.\"static int
.\"timerfd_settime(int fd, int flags, struct itimerspec *new_value,
.\"        struct itimerspec *curr_value)
.\"{
.\"    return syscall(__nr_timerfd_settime, fd, flags, new_value,
.\"                   curr_value);
.\"}
.\"
.\"static int
.\"timerfd_gettime(int fd, struct itimerspec *curr_value)
.\"{
.\"    return syscall(__nr_timerfd_gettime, fd, curr_value);
.\"}
.\"
.\"#define tfd_timer_abstime (1 
#include 
#include 
#include       /* definition of priu64 */
#include 
#include 
#include         /* definition of uint64_t */
#define handle_error(msg) \e
        do { perror(msg); exit(exit_failure); } while (0)
static void
print_elapsed_time(void)
{
    static struct timespec start;
    struct timespec curr;
    static int first_call = 1;
    int secs, nsecs;
    if (first_call) {
        first_call = 0;
        if (clock_gettime(clock_monotonic, &start) == \-1)
            handle_error("clock_gettime");
    }
    if (clock_gettime(clock_monotonic, &curr) == \-1)
        handle_error("clock_gettime");
    secs = curr.tv_sec \- start.tv_sec;
    nsecs = curr.tv_nsec \- start.tv_nsec;
    if (nsecs 
.pp
.b "int setfsent(void);"
.b "struct fstab *getfsent(void);"
.b "void endfsent(void);"
.pp
.bi "struct fstab *getfsfile(const char *" mount_point );
.bi "struct fstab *getfsspec(const char *" special_file );
.fi
.sh description
these functions read from the file
.ir /etc/fstab .
the
.ir "struct fstab"
is defined by:
.pp
.in +4n
.ex
struct fstab {
    char       *fs_spec;       /* block device name */
    char       *fs_file;       /* mount point */
    char       *fs_vfstype;    /* filesystem type */
    char       *fs_mntops;     /* mount options */
    const char *fs_type;       /* rw/rq/ro/sw/xx option */
    int         fs_freq;       /* dump frequency, in days */
    int         fs_passno;     /* pass number on parallel dump */
};
.ee
.in
.pp
here the field
.i fs_type
contains (on a *bsd system)
one of the five strings "rw", "rq", "ro", "sw", "xx"
(read-write, read-write with quota, read-only, swap, ignore).
.pp
the function
.br setfsent ()
opens the file when required and positions it at the first line.
.pp
the function
.br getfsent ()
parses the next line from the file.
(after opening it when required.)
.pp
the function
.br endfsent ()
closes the file when required.
.pp
the function
.br getfsspec ()
searches the file from the start and returns the first entry found
for which the
.i fs_spec
field matches the
.i special_file
argument.
.pp
the function
.br getfsfile ()
searches the file from the start and returns the first entry found
for which the
.i fs_file
field matches the
.i mount_point
argument.
.sh return value
upon success, the functions
.br getfsent (),
.br getfsfile (),
and
.br getfsspec ()
return a pointer to a
.ir "struct fstab" ,
while
.br setfsent ()
returns 1.
upon failure or end-of-file, these functions return null and 0, respectively.
.\" .sh history
.\" the
.\" .br getfsent ()
.\" function appeared in 4.0bsd; the other four functions appeared in 4.3bsd.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br endfsent (),
.br setfsent ()
t}	thread safety	t{
mt-unsafe race:fsent
t}
t{
.br getfsent (),
.br getfsspec (),
.br getfsfile ()
t}	thread safety	t{
mt-unsafe race:fsent locale
t}
.te
.hy
.ad
.sp 1
.sh conforming to
these functions are not in posix.1.
several operating systems have them, for example,
*bsd, sunos, digital unix, aix (which also has a
.br getfstype ()).
hp-ux has functions of the same names,
that however use a
.ir "struct checklist"
instead of a
.ir "struct fstab" ,
and calls these functions obsolete, superseded by
.br getmntent (3).
.sh notes
these functions are not thread-safe.
.pp
since linux allows mounting a block special device in several places,
and since several devices can have the same mount point, where the
last device with a given mount point is the interesting one,
while
.br getfsfile ()
and
.br getfsspec ()
only return the first occurrence, these two functions are not suitable
for use under linux.
.sh see also
.br getmntent (3),
.br fstab (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/ctime.3
.\" copyright (c) 2017, michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th pthread_spin_lock 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
pthread_spin_lock, pthread_spin_trylock, pthread_spin_unlock \-
lock and unlock a spin lock
.sh synopsis
.nf
.b #include 
.pp
.bi "int pthread_spin_lock(pthread_spinlock_t *" lock );
.bi "int pthread_spin_trylock(pthread_spinlock_t *" lock );
.bi "int pthread_spin_unlock(pthread_spinlock_t *" lock );
.fi
.pp
compile and link with \fi\-pthread\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br pthread_spin_lock (),
.br pthread_spin_trylock ():
.nf
    _posix_c_source >= 200112l
.fi
.sh description
the
.br pthread_spin_lock ()
function locks the spin lock referred to by
.ir lock .
if the spin lock is currently unlocked,
the calling thread acquires the lock immediately.
if the spin lock is currently locked by another thread,
the calling thread spins, testing the lock until it becomes available,
at which point the calling thread acquires the lock.
.pp
calling
.br pthread_spin_lock ()
on a lock that is already held by the caller
or a lock that has not been initialized with
.br pthread_spin_init (3)
results in undefined behavior.
.pp
the
.br pthread_spin_trylock ()
function is like
.br pthread_spin_lock (),
except that if the spin lock referred to by
.i lock
is currently locked,
then, instead of spinning, the call returns immediately with the error
.br ebusy .
.pp
the
.br pthread_spin_unlock ()
function unlocks the spin lock referred to
.ir lock .
if any threads are spinning on the lock,
one of those threads will then acquire the lock.
.pp
calling
.br pthread_spin_unlock ()
on a lock that is not held by the caller results in undefined behavior.
.sh return value
on success, these functions return zero.
on failure, they return an error number.
.sh errors
.br pthread_spin_lock ()
may fail with the following errors:
.tp
.b edeadlock
.\" not detected in glibc
the system detected a deadlock condition.
.pp
.br pthread_spin_trylock ()
fails with the following errors:
.tp
.b ebusy
the spin lock is currently locked by another thread.
.sh versions
these functions first appeared in glibc in version 2.2.
.sh conforming to
posix.1-2001.
.sh notes
applying any of the functions described on this page to
an uninitialized spin lock results in undefined behavior.
.pp
carefully read notes in
.br pthread_spin_init (3).
.sh see also
.ad l
.nh
.\" fixme . .br pthread_mutex_lock (3),
.br pthread_spin_destroy (3),
.br pthread_spin_init (3),
.br pthreads (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/stailq.3
.so man2/process_vm_readv.2
.so man3/ctime.3
.\" copyright (c) 1992 drew eckhardt (PI:EMAIL), march 28, 1992
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified by michael haardt 
.\" modified 1993-07-24 by rik faith 
.\" modified 1996-10-22 by eric s. raymond 
.\" modified 2004-06-23 by michael kerrisk 
.\" modified 2005-01-09 by aeb
.\"
.th uselib 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
uselib \- load shared library
.sh synopsis
.nf
.b #include 
.pp
.bi "int uselib(const char *" library );
.fi
.pp
.ir note :
no declaration of this system call is provided in glibc headers; see notes.
.sh description
the system call
.br uselib ()
serves to load
a shared library to be used by the calling process.
it is given a pathname.
the address where to load is found
in the library itself.
the library can have any recognized
binary format.
.sh return value
on success, zero is returned.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
in addition to all of the error codes returned by