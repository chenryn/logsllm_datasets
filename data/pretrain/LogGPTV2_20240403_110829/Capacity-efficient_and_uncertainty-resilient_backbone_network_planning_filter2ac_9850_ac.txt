tioned, our traffic forecast is service-based and independent of the
planning method, i.e., Pipe- and Hose-based planning alike. For
Hose-based planning, we aggregate the service demands with re-
spective to each backbone site to generate the ingress and egress
Hose constraints. As motivated in the introduction, the key to Hose-
based network planning is converting the Hose constraints into
Pipe TMs. Thus, as will be shown in Section 4, the planner takes
judicious steps to narrow down the infinite number of possible
Pipe TMs to a small set of representative ones. Short-term and long-
term planning are then applied to the reference TMs with different
optimization formulations, considering various failure scenarios
under the resilience policy. The optimization procedure is detailed
in Section 5.
The output of planning is Plan Of Record (POR), in the format
of capacity between site pairs. The POR from short-term planning
is handed to the capacity engineering team for capacity turn-up,
and the POR from long-term planning is given to the fiber sourcing
team for fiber procurement and to the optical design and IP design
teams for deployment of fibers and optical line systems. The focus
of this paper is on the design of Capacity Planner.
4 TRAFFIC MATRIX GENERATION
In this section, we introduce specific steps of converting Hose con-
straints into reference TMs for planning, which includes heuristic
algorithms, optimization, and performance metrics.
4.1 Traffic Matrix Sampling
A Traffic Matrix (TM) for a 𝑁 -node network topology is a 𝑁 × 𝑁
matrix 𝑀, where each coefficient 𝑚𝑖,𝑗 represents the traffic demand
of a flow (typically in Gbps in practice) from the source node 𝑖 to the
destination node 𝑗. The flow traffic demand must be non-negative,
and a node does not generate traffic to itself. Hence, the coefficients
are in R+ and all diagonal coefficients are zero.
A valid TM must satisfy the following Hose constraints, where
(cid:4)𝑢 (cid:2)
(cid:4)𝑢𝑠 and
𝑑 are the 1 × 𝑁 and 𝑁 × 1 all-ones column and row vectors,
(cid:4)ℎ(cid:2)
and the corresponding demand vectors
𝑑 bound the total
egress and ingress traffic amount at the source and destination
nodes. These constraints form a convex polytope in the 𝑁 2 − 𝑁
(cid:4)ℎ𝑠 and
(cid:2)(cid:8)(cid:10)(cid:5)(cid:1)(cid:4)(cid:8)(cid:7)(cid:10)(cid:11)(cid:9)(cid:3)(cid:6)(cid:7)(cid:11)(cid:12)
(cid:2)(cid:4)(cid:1)(cid:7)
(cid:2)(cid:1)
(cid:2)(cid:4)(cid:1)(cid:5)
(cid:2)(cid:1)
(cid:2)(cid:4)(cid:1)(cid:5)(cid:8)(cid:2)(cid:4)(cid:1)(cid:6)(cid:8)(cid:2)(cid:4)(cid:1)(cid:7)(cid:9)(cid:4)(cid:3)
(cid:2)(cid:4)(cid:1)(cid:7)
(cid:2)(cid:4)(cid:1)(cid:6)
(cid:2)(cid:4)(cid:1)(cid:6)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:4)(cid:1)(cid:5)
(cid:2)(cid:4)(cid:1)(cid:7)
(cid:2)(cid:4)(cid:1)(cid:6)
(cid:2)(cid:1)
(cid:2)(cid:1)
(cid:2)(cid:4)(cid:1)(cid:5)
(cid:2)(cid:1)
(cid:4)(cid:17)(cid:19)(cid:9)(cid:1)(cid:7)(cid:17)(cid:16)(cid:22)(cid:9)(cid:23)(cid:1)(cid:12)(cid:21)(cid:14)(cid:14)
(cid:4)(cid:17)(cid:19)(cid:9)(cid:1)(cid:7)(cid:17)(cid:16)(cid:22)(cid:9)(cid:23)(cid:1)(cid:12)(cid:21)(cid:14)(cid:14)
(cid:5)(cid:18)(cid:6)(cid:10)(cid:10)(cid:13)(cid:7)(cid:1)(cid:15)(cid:6)(cid:20)(cid:18)(cid:13)(cid:7)(cid:9)(cid:19)
(cid:5)(cid:18)(cid:6)(cid:10)(cid:10)(cid:13)(cid:7)(cid:1)(cid:15)(cid:6)(cid:20)(cid:18)(cid:13)(cid:7)(cid:9)(cid:19)
(cid:2)(cid:17)(cid:16)(cid:22)(cid:9)(cid:23)(cid:1)(cid:12)(cid:21)(cid:14)(cid:14)(cid:1)(cid:17)(cid:10)(cid:1)(cid:20)(cid:18)(cid:6)(cid:10)(cid:10)(cid:13)(cid:7)(cid:1)(cid:15)(cid:6)(cid:20)(cid:18)(cid:13)(cid:7)(cid:9)(cid:19)
(cid:2)(cid:17)(cid:16)(cid:22)(cid:9)(cid:23)(cid:1)(cid:12)(cid:21)(cid:14)(cid:14)(cid:1)(cid:17)(cid:10)(cid:1)(cid:20)(cid:18)(cid:6)(cid:10)(cid:10)(cid:13)(cid:7)(cid:1)(cid:15)(cid:6)(cid:20)(cid:18)(cid:13)(cid:7)(cid:9)(cid:19)
(cid:3)(cid:17)(cid:15)(cid:13)(cid:16)(cid:6)(cid:20)(cid:13)(cid:16)(cid:11)(cid:1)(cid:20)(cid:18)(cid:6)(cid:10)(cid:10)(cid:13)(cid:7)(cid:1)(cid:15)(cid:6)(cid:20)(cid:18)(cid:13)(cid:7)(cid:9)(cid:19)
(cid:3)(cid:17)(cid:15)(cid:13)(cid:16)(cid:6)(cid:20)(cid:13)(cid:16)(cid:11)(cid:1)(cid:20)(cid:18)(cid:6)(cid:10)(cid:10)(cid:13)(cid:7)(cid:1)(cid:15)(cid:6)(cid:20)(cid:18)(cid:13)(cid:7)(cid:9)(cid:19)
(cid:2)(cid:17)(cid:16)(cid:22)(cid:9)(cid:23)(cid:1)(cid:12)(cid:21)(cid:14)(cid:14)(cid:1)(cid:17)(cid:10)(cid:1)(cid:8)(cid:17)(cid:15)(cid:13)(cid:16)(cid:6)(cid:20)(cid:13)(cid:16)(cid:11)
(cid:2)(cid:17)(cid:16)(cid:22)(cid:9)(cid:23)(cid:1)(cid:12)(cid:21)(cid:14)(cid:14)(cid:1)(cid:17)(cid:10)(cid:1)(cid:8)(cid:17)(cid:15)(cid:13)(cid:16)(cid:6)(cid:20)(cid:13)(cid:16)(cid:11)
(cid:20)(cid:18)(cid:6)(cid:10)(cid:10)(cid:13)(cid:7)(cid:1)(cid:15)(cid:6)(cid:20)(cid:18)(cid:13)(cid:7)(cid:9)(cid:19)
(cid:20)
(cid:20) (cid:13)
(cid:10)(cid:10)(cid:13)
Figure 7: A 3D example of the Hose polytope space.
dimension space, where each non-zero coefficient in the TM is a
variable. Figure 7 illustrates a highly simplified 3D example with
variables 𝑚1,2, 𝑚1,3, and 𝑚1,4 only. Each valid TM is a point in the
polytope space, and there are an infinite number of valid TMs in
this continuous space.
Hose constraints:
(cid:4)𝑢𝑠 · 𝑀 (cid:2) (cid:4)ℎ𝑠
(cid:2) (cid:4)ℎ(cid:2)
𝑀 · (cid:4)𝑢 (cid:2)
𝑑
𝑑
(1)
To generate TMs that satisfy the Hose constraints, our first step
is to sample the polytope space uniformly. Algorithm 1 shows our
two-phase algorithm for generating one sample TM. We randomly
create a valid TM in the polytope space in Phase 1 (lines 1-7 ) and
stretch it to the polytope surfaces in Phase 2 (lines 8-13), under the
intuition that TMs on the surfaces have higher traffic demands and
translate to higher capacity requirements for network planning.
In Phase 1, we initialize the TM to a zero matrix (line 1) and
assign traffic to the TM entries one by one in a random order (line
2). For every entry 𝑚𝑖,𝑗 , the maximal allowed traffic amount is the
lesser of the two Hose constraints for source 𝑖 and destination 𝑗.
We give it a uniformly random scaling factor between 0 and 1 (line
3) and assign the product to the entry (line 4). For bookkeeping,
the consumed traffic amount is deducted from the Hose constraints
(lines 5-6). In Phase 2, we add residual traffic to the TM to exhaust
as many Hose constraints as possible. Similar to Phase 1, we iterate
through the entries in a random order (line 8) and add the maximal
allowed traffic amount to each entry (lines 9-12). Because we iterate
through all the entries and always consume the maximal traffic, our
Phase 2 guarantees to exhaust the most Hose constraints from the
Phase 1 result. It also guarantees we cannot have egress and ingress
hose constraints simultaneously unsatisfied (remaining constraints
must be all egress or all ingress), because if that were the case, the
algorithm would simply increase the associated source-destination
flows until either ingress or egress constraints are exhausted.
This sampling algorithm is highly effective regardless of the sim-
plicity. As will be shown in Figure 9a, over 97% of the Hose polytope
space is covered with 105 sample TMs. The effectiveness comes
from the high randomness: (1) we apply different permutations
of the TM entries (line 2 and line 8) in each run to distribute the
Hose traffic budget in different ways; (2) we use a scaling factor
(line 3) to adjust the assignable traffic randomly according to the
uniform distribution. Our two-phase sample-then-stretch approach
is proven to be critical. In a former solution, we directly sample
the polytope surfaces uniformly, but the coverage is 20%-30% lower
with the same number of samples.
} in Formula (1)
𝑗 ) × 𝑟𝑎𝑛𝑑𝑜𝑚.𝑢𝑛𝑖 𝑓 𝑜𝑟𝑚 (0, 1)
ℎ = 𝑀𝑖𝑛 (ℎ𝑖, ℎ(cid:2)
𝑚𝑖,𝑗 = ℎ
ℎ𝑖 = ℎ𝑖 − ℎ
𝑗 = ℎ(cid:2)
ℎ(cid:2)
𝑗 − ℎ
Algorithm 1 𝑠𝑎𝑚𝑝𝑙𝑒𝑇 𝑀 ( )
Input: network size 𝑁 , Hose constraints 𝐻 = { (cid:4)ℎ𝑠, (cid:4)ℎ(cid:2)
𝑑
Output: a random 𝑁 × 𝑁 traffic matrix 𝑀 satisfying 𝐻
1: 𝑀 = 0𝑁 ×𝑁
2: for every 𝑚𝑖,𝑗 in 𝑀 in random order do
3:
4:
5:
6:
7: end for
8: for every 𝑚𝑖,𝑗 in 𝑀 in random order do
9:
10:
11:
12:
13: end for
ℎ = 𝑀𝑖𝑛 (ℎ𝑖, ℎ(cid:2)
𝑗 )
𝑚𝑖,𝑗 = 𝑚𝑖,𝑗 + ℎ
ℎ𝑖 = ℎ𝑖 − ℎ
𝑗 = ℎ(cid:2)
ℎ(cid:2)
𝑗 − ℎ
4.2 Bottleneck Links Sweeping
It is computationally infeasible to consider the enormous number
of TM samples. Fortunately, TMs have different importance for net-
work planning. As the goal of network planning is to add capacity
to “bottleneck links” in the network, TMs with high traffic demands
over the bottleneck links play a dominating role. We call such TMs
Dominating Traffic Matrices (DTMs), and we aim to find a small
number of DTMs such that designing the network explicitly for
them has a high probability to satisfy the remaining TMs as well.
From the graph theory’s perspective, bottleneck links are cap-
tured by the network cuts that partition the nodes into two disjoint
subsets. However, the number of network cuts is exponential to the
network size. A production backbone network has tens to a few
hundred nodes, thus enumerating all the cuts is intractable. Even if
a backbone network is not a densely connected graph, the number
𝑚𝑖𝑛 ( |𝑉 |, |𝐸 |) ), where |𝑉 | and |𝐸| are the
of possible cuts is still 𝑂 (2
number of nodes and edges respectively. We propose a sweeping
algorithm to quickly sample the network cuts, and the sweeping
process is illustrated in Figure 8.
The sweeping algorithm has a hyperparameter edge threshold 𝛼
chosen in the [0, 1] interval. The network nodes are represented
by their latitude and longitude coordinates. We draw the smallest
rectangle inscribing all the nodes and radar-sweep the graph cen-
tering at points on the rectangle sides. There are 𝑘 equal-interval
points per side and the sweeping is performed at discrete orienta-
◦
tion angles of interval 𝛽. We typically choose 𝑘 = 1000 and 𝛽 = 1
.
The algorithm draws a reference cut line at each sweeping step,
which splits the nodes into the following three mutually exclusive
categories.
• Edge nodes, whose distance to the cut line over the distance of
the farthest node in the network to the cut line is smaller than 𝛼.
• Above nodes, which are above the cut line but are not in the edge
nodes group.
• Below nodes, which are below the cut line but are not in the edge
nodes group.
Network cuts are all possible bipartite splits of the edge nodes
combined with the above and below nodes respectively. In this
algorithm, parameters 𝑘 and 𝛽 define the sampling granularity, and
the edge threshold 𝛼 regulates the number of cuts considered per
sampling step. As 𝛼 increases, we are able to generate an increas-
ingly large number of network cuts. In particular, setting 𝛼 to 1
551
(cid:2)(cid:8)(cid:16)(cid:22)(cid:11)(cid:1)(cid:15)(cid:16)(cid:10)(cid:11)(cid:19)
(cid:5)(cid:10)(cid:12)(cid:11)(cid:1)(cid:15)(cid:16)(cid:10)(cid:11)(cid:19)
(cid:3)(cid:11)(cid:14)(cid:16)(cid:23)(cid:1)(cid:15)(cid:16)(cid:10)(cid:11)(cid:19)
(cid:1)
(cid:2)(cid:2)
(cid:7)(cid:23)(cid:11)(cid:11)(cid:17)(cid:13)(cid:15)(cid:12)(cid:1)(cid:6)(cid:18)(cid:16)(cid:9)(cid:11)(cid:19)(cid:19)
(cid:4)(cid:21)(cid:20)(cid:1)(cid:24)
(cid:4)(cid:21)(cid:20)(cid:1)(cid:25)
(cid:4)(cid:21)(cid:20)(cid:1)(cid:26)
(cid:4)(cid:21)(cid:20)(cid:1)(cid:27)
Figure 8: An example of the sweeping algorithm. The sweeping
centers around 𝑘 points per rectangle side and moves in 𝛽 ◦
steps.
The reference cut (blue solid line) sweeping step creates 2 edge
nodes (yellow dots), whose permutations form 4 cuts.
guarantees that we enumerate all partitions of the network. The
relationship between 𝛼 and network cuts is shown in Figure 9b.
4.3 Selection of Dominating Traffic Matrices
The formal definition of DTM with respect to network cuts is as
below. Intuitively, with the TMs sampled in Section 4.1 and network
cuts generated in Section 4.2, we want to find the TM that produces
the most traffic for every network cut.
Definition 4.1 (Dominating Traffic Matrix - Strict Version). The
dominating traffic matrix of a network cut is the traffic matrix in
all the sampled traffic matrices that has the highest traffic amount
across the cut.
This definition yields as many DTMs as there are network cuts.
To further reduce the number of TMs involved in our planning
computation, we get inspiration from the minimum set cover prob-
lem [12]: if we slack the DTM definition from the most traffic-heavy
TM per network cut to a set of relatively traffic-heavy TMs within
a bound to the maximum, the sets of DTMs for different cuts are
likely to overlap and the cuts may be represented by a smaller num-
ber of overlapping DTMs. We thus introduce the flow slack 𝜖 and
define the slack version of DTM as below. For the rest of the paper,
all DTMs refer to this slack definition.
Definition 4.2 (Dominating Traffic Matrix - Slack Version). A dom-
inating traffic matrix of a network cut with flow slack 𝜖 is a traffic
matrix from the sampled traffic matrices whose traffic amount
across the cut is no smaller than 1 − 𝜖 of the maximum among all
the sampled traffic matrices, where 𝜖 is a small value in [0, 1].
In our formulation of the minimum set cover problem, the uni-
verse is the ensemble of network cuts 𝐶. For every cut 𝑐 ∈ 𝐶, we
get the set of DTMs 𝐷 (𝑐) under the given flow slack 𝜖 according
to Definition 4.2. Combining them, we have a collection 𝑇 = {𝑀 }
of all the candidate DTMs, where each DTM belongs to a subset
of cuts in 𝐶. For example, a DTM 𝑀 may be generated by multiple
cuts {𝑐𝑖, 𝑐 𝑗 , 𝑐𝑘 } at the same time. Our goal is to find the minimal
number of DTMs to cover all the cuts in 𝐶.
We solve this minimum set cover problem by Integer Linear
Programming (ILP). As shown below, we define a binary assignment
variable 𝐴𝑀 , which is set to 1 if a candidate DTM 𝑀 is selected
in the end and set to 0 otherwise. The assignment variables must
guarantee each network cut is represented by at least one of its
candidate DTMs, and we minimize the number of selected DTMs
by minimizing the sum of the assignment variables.

𝐴𝑀

𝑀 ∈𝑇
min
s.t.
𝐴𝑀 ≥ 1, ∀𝑐 ∈ 𝐶
(2)