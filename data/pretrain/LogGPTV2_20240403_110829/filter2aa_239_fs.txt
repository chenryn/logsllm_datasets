ItemsControl
说明
Menu
ContextMenu
Menu类和ContextMenu类派生自抽象基类MenuBase。把
MenuItem元素放在数据项列表和相关联的命令中，就可以
给用户提供菜单
StatusBar
StatusBar控件通常显示在应用程序的底部，为用户提供状态
信息。可以把StatusBarItem元素放在StatusBar列表中
TreeView
要分层显示数据项，可以使用TreeView控件
ListBox
ComboBox
TabControl
ListBox、ComboBox和TabControl都有相同的抽象基类
Selector。这个基类可以从列表中选择数据项。ListBox显示
列表中的数据项，ComboBox有一个附带的Button控件，只
有单击该按钮，才会显示数据项。在TabControl中，内容可
以排列为表格形式
DataGrid
DataGrid控件是显示数据的可定制网格，这个控件详见下一
章
34.2.5 带标题的项控件
HeaderedItemsControl是不仅包含数据项而且包含标题的控件的基类。
HeaderedItemsControl类派生自ItemsControl。
派生自HeaderedItemsControl的类如表34-5所示。
表34-5
HeaderedItemsControl
说明
MenuItem
菜单类Menu和ContextMenu包含MenuItem类型的数据项。菜
单项可以连接到命令上，因为MenuItem类实现了
ICommandSource接口
TreeViewItem
TreeViewItem类可以包含TreeViewItem类型的数据项
ToolBar
ToolBar控件是一组控件（通常是Button和Separator元素）的
容器。可以将ToolBar放在ToolBarTray中，它会重新排列
ToolBar控件
34.2.6 修饰
给单个元素添加修饰可以使用Decorator类完成。Decorator是一个基类，派生自它的类
有Border、Viewbox和BulletDecorator。主题元素如ButtonChrome和ListBoxChrome也是修
饰器。
下面的例子说明了Border、Viewbox和BulletDecorator类，如图34-4所示。Border类给
子元素四周添加边框，以修饰子元素。可以给子元素定义画笔和边框的宽度、背景、圆角
半径和填充图案（代码文件ControlsSample/DecorationsWindow.xaml）：
      Label with a border
图34-4
Viewbox将其子元素拉伸并缩放到可用的空间中。StretchDirection和Stretch属性专用
于Viewbox的功能，它们允许设置子元素是否双向拉伸，以及是否保持宽高比：
      Label with a viewbox
BulletDecorator类用一个项目符号修饰其子元素。子元素可以是任意元素（在本例中
是一个文本块）。同样，项目符号也可以是任意元素，本例使用一个Image元素，也可以
使用任意UIElement：
        Granny Smith
34.3 布局
为了定义应用程序的布局，可以使用派生自Panel基类的类。布局容器要完成两个主
要任务：测量和排列。在测量时，容器要求其子控件有合适的大小。因为控件的整体大小
不一定合适，所以容器需要确定和排列其子控件的大小和位置。这里讨论几个布局容器。
34.3.1 StackPanel
Window可以只包含一个元素，作为其内容。如果要在其中包含多个元素，就可以将
StackPanel用作Window的一个子元素，并在StackPanel的内容中添加元素。StackPanel是一
个简单的容器控件，只能逐个地显示元素。StackPanel的方向可以是水平或垂直。
ToolBarPanel类派生自StackPanel（代码文件LayoutDemo/StackPanelWindow.xaml）。
        Label
        TextBox
        CheckBox
        CheckBox
        ListBoxItem One
        ListBoxItem Two
        Button
在图34-5中，可以看到StackPanel垂直显示的子控件。
图34-5
34.3.2 WrapPanel
WrapPanel将子元素自左向右逐个排列，若一个水平行中放不下，就排在下一行。面
板的方向可以是水平或垂直（代码文件LayoutSamples/WrapPanelWindow.xaml）。
        Button
        Button
        Button
        Button
        Button
        Button
        Button
        Button
图34-6显示了面板的排列结果。如果重新设置应用程序的大小，按钮就会重新排列，
以便填满一行。
图34-6
34.3.3 Canvas
Canvas是一个允许显式指定控件位置的面板。它定义了相关的Left、Right、Top和
Bottom属性，这些属性可以由子元素在面板中定位时使用（代码文件
LayoutSamples/CanvasWindow.xaml）。
      Enter here:
图34-7显示了Canvas面板的结果，其中定位了子元素Label、TextBox和Button。
图34-7
  注意： Canvas控件最适合用于图形元素的布局，例如第30章介绍的Shape控
件。
34.3.4 DockPanel
DockPanel非常类似于Windows Forms的停靠功能。DockPanel可以指定排列子控件的
区域。DockPanel定义了Dock附加属性，可以在控件的子控件中将它设置为Left、Right、
Top和Bottom。图34-8显示了排列在DockPanel中的带边框的文本块。为了便于区别，为不
同的区域指定了不同的颜色（代码文件LayoutSamples/DockPanelWindow.xaml）：
        Menu
        Ribbon
        Status
        Left Side
        Remaining Part
图34-8
34.3.5 Grid
使用Grid，可以在行和列中排列控件。对于每一列，可以指定一个
ColumnDefinition；对于每一行，可以指定一个RowDefinition。下面的示例代码显示两列
和三行。在每一列和每一行中，都可以指定宽度或高度。ColumnDefinition有一个Width依
赖属性，RowDefinition有一个Height依赖属性。可以以像素、厘米、英寸或点为单位定义
高度和宽度，或者把它们设置为Auto，根据内容来确定其大小。Grid还允许根据具体情况
指定大小，即根据可用的空间以及与其他行和列的相对位置，计算行和列的空间。在为列
提供可用空间时，可以将Width属性设置为“*”。要使某一列的空间是另一列的两倍，应指
定“2*”。下面的示例代码定义了两列和三行，但没有定义列定义和行定义的其他设置，默
认使用根据具体情况指定大小的设置。
这个Grid包含几个Label和TextBox控件。因为这些控件的父控件是Grid，所以可以设
置附加属性Column、ColumnSpan、Row和RowSpan（代码文件
LayoutSamples/GridWindow.xaml）。
在Grid中排列控件的结果如图34-9所示。为了便于看到列和行，把ShowGridLines属性
设置为true。
图34-9
  注意： 要使Grid的每个单元格有相同的尺寸，可以使用UniformGrid类。
34.4 触发器
第30章提到，使用可视化状态管理器，可以动态改变控件的外观。WPF和UWP支持
可视化状态管理器。对于相同的场景，WPF还提供了属性触发器，还有其他触发器类型
用于不同的场景。本节讨论属性触发器、多触发器和数据触发器。
使用触发器，可以动态地更改控件的外观，因为一些事件或属性值改变了。例如，用
户把鼠标移动到按钮上，按钮就会改变其外观。通常，这必须在C#代码中实现。使用
WPF，也可以用XAML实现，而这只会影响UI。
属性触发器在属性值改变时激活。多触发器基于多个属性值。事件触发器在事件发生
时激活。数据触发器在绑定的数据改变时激活。
34.4.1 属性触发器
Style类有一个Triggers属性，通过它可以指定属性触发器。下面的示例将一个Button
元素放在一个Grid面板中。利用Window资源定义Button元素的默认样式。这个样式指定，
将Background属性设置为LightBlue，将FontSize属性设置为17。这是应用程序启动时
Button元素的样式。使用触发器可以改变控件的样式。触发器在Style.Triggers元素中用
Trigger元素定义。将一个触发器赋予IsMouseOver属性，另一个触发器赋予IsPressed属
性。这两个属性通过应用了样式的Button类定义。如果IsMouseOver属性的值是true，就会
激活触发器，将Foreground属性设置为Red，将FontSize属性设置为22。如果按下该按钮，
IsPressed属性就是true，激活第二个触发器，并将TextBox的Foreground属性设置为
Yellow（代码文件TriggerSamples/PropertyTriggerWindow.xaml）。
  注意： 如果把IsPressed属性设置为true，则IsMouseOver属性也是true。按下
该按钮也需要把鼠标放在按钮上。按下该按钮会激活IsMouseOver属性触发器，并改变
属性。这里触发器的激活顺序很重要。如果IsPressed属性触发器在IsMouseOver属性触
发器之前激活，IsMouseOver属性触发器就会覆盖IsPressed属性触发器设置的值。
当激活触发器的原因不再有效时，就不必将属性值重置为原始值。例如，不必定义
IsMouseOver=true和IsMouseOver=false的触发器。只要激活触发器的原因不再有效，触发
器操作进行的修改就会自动重置为原始值。
图34-10显示了触发器示例应用程序，其中，鼠标指向按钮时，按钮的前景和字体大
小就会不同于其原始值。
图34-10
  注意： 使用属性触发器，很容易改变控件的外观、字体、颜色、不透明度
等。在鼠标滑过控件时，键盘设置焦点时——都不需要编写任何代码。
Trigger类定义了表34-6中的属性，以指定触发器操作。
表34-6
Trigger属性
说明
PropertyValue
使用属性触发器，Property和Value属性用于指定触发器的激
活时间，例如，Property = "IsMouseOver", Value = "True"
Setters
一旦激活触发器，就可以使用Setters定义一个Setter元素集
合，来改变属性值。Setter类定义Property、TargetName和
Value属性，以修改对象属性
EnterActions, ExitActions
除了定义Setters之外，还可以定义EnterActions和
ExitActions。使用这两个属性，可以定义一个TriggerAction
元素集合。EnterActions在启动触发器时激活（此时通过属
性触发器应用Property/Value组合）。ExitActions在触发器结
束之前激活（此时不再应用Property/Value组合）。用这些
操作指定的触发器操作派生自基类TriggerAction，如
SoundPlayerAction和BeginStoryboard。使用
SoundPlayerAction基类可以开始播放声音。BeginStoryboard
基类用于动画，详见本章后面的内容
34.4.2 多触发器
当属性的值变化时，就会激活属性触发器，如果因为两个或多个属性有特定的值，而
需要设置触发器，就可以使用MultiTrigger。
MultiTrigger有一个Conditions属性，可以在其中设置属性的有效值。它还有一个
Setters属性，可以在其中指定需要设置的属性。在下面的示例中，给TextBox元素定义了
一个样式，如果IsEnabled属性是True, Text属性的值是Test，就应用触发器。如果应用这两
个触发器，就把TextBox的Foreground属性设置为Red（代码文件
TriggerSamples/MultiTriggerWindow.xaml）：
      <Window x:Class="TriggerSamples.MultiTriggerWindow"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"