X
705
985
890
547
1053
475
490
441
579
11673
9921
2860
8604
8936
3868
Table 3: Pivoting instructions used by recent Metasploit exploits
CVE Number
Instruction
2013-3897
2013-3163
2013-1347
2012-4969
2012-4792
2012-1889
2012-1535
2014-0515
2013-1017
xchg eax, esp
mov esp, [eax]
pop esp
In order to demonstrate the effectiveness of PBlocker, we list
the number of explicit SP-update instructions that PBlocker pro-
tects as opposed to the total number of gadgets in coreutils and
binutils. The results are tabulated in Table 2. Overall, we found
that absolute SP-update instructions, the most popular for stack-
pivoting are a very small fraction when compared to the total in-
structions in a program.
6. RELATED WORK
6.1 Defense against Stack Pivoting
Microsoft’s Enhanced Mitigation Experience Toolkit (EMET) [2]
is a popular zero-day exploit prevention utility that provides de-
fense against stack pivot in ROP attacks. Core idea implemented
by EMET is based on ROPguard [20]. When execution enters a
critical function such as VirtualProtect, EMET asserts that
stack pointer lies within the stack region of the current thread. De-
Mott [18] bypass EMET by taking advantage of the gap between
time-of-check and time-of-use of stack pointer. They ﬁrst perform
a stack pivot to the heap, perform ROP, and then pivot back to the
stack region just before invoking Virtual Protect. Because
EMET checks for sanity of stack pointer within the critical func-
tion, such an attack is missed.
PBlocker checks the sanity of stack pointer immediately after
every absolute SP-update instruction and can therefore stop attacks
demonstrated by DeMott.
Recent stack-based defenses make stack pivoting harder, but not
impossible to execute. In StackArmor [10], Chen et al., randomize
the location of the stack, thereby making it harder for an attacker to
guess the location of ROP payload on the stack. However, they are
still vulnerable pivoting, if an attacker can successfully locate the
payload on the stack [19].
6.2 CFI
Beginning from Abadi et al. [3], several CFI defenses have been
proposed on the source code [22, 37], at a binary level [43, 42, 16,
14] and runtime [39, 31]. While different from CFI, Kuznetsov et
al. propose CPI [24], which distinguish between code and non-
code pointers and protects code pointers. Unlike CFI, PBlocker
and PBlocker+ are not control-ﬂow-based approaches, however
they are complementary to CFI. Coarse-grained CFI can supple-
ment PBlocker and PBlocker+ to prevent an attacker from
utilizing unintended SP-update instructions (particularly 1 byte in-
structions like leave) that can not be removed using gadget elim-
ination techniques.
More recent CFI defenses on the binary like, vfGuard [30] im-
proves the precision of CFI for C++ virtual call dispatches, and
PBlocker#
Vanilla#(baseline)#
We evaluate PBlocker on SPEC 2006 benchmark and show an
average runtime overhead of under 1.04%.
md5sum#
wc#
cat#
sort#
sha512#
factor#
cp#
rm#
97#
readelf#
ar#
nm#
ld#
gas#
objcopy#
objdump#
96#
99#
103#
100#
98#
(a) Sampling of coreutils.
101#
102#
PBlocker#
Vanilla#(baseline)#
104#
105#
106#
108#
8. ACKNOWLEDGMENT
We would like to thank anonymous reviewers for their feedback.
This research was supported in part by National Science Founda-
tion Grant #1054605, Air Force Research Lab Grant #FA8750-15-
2-0106, and DARPA CGC Grant #FA8750-14-C-0118. Any opin-
ions, ﬁndings, and conclusions in this paper are those of the authors
and do not necessarily reﬂect the views of the funding agencies.
9. REFERENCES
[1] Metasploit penetration testing framework.
http://http://www.metasploit.com/.
[2] Microsoft Enhanced Mitigation Experience Toolkit.
http://support.microsoft.com/kb/2458544, August 2014.
[3] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti.
Control-ﬂow Integrity. In Proceedings of the 12th ACM
Conference on Computer and Communications Security
(CCS’05), pages 340–353, 2005.
[4] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address
Obfuscation: An Efﬁcient Approach to Combat a Broad
Range of Memory Error Exploits. In USENIX Security,
volume 3, pages 105–120, 2003.
[5] S. Bhatkar and R. Sekar. Data Space Randomization. In
Detection of Intrusions and Malware, and Vulnerability
Assessment, pages 1–22. Springer, 2008.
[6] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazieres, and
D. Boneh. Hacking Blind. In IEEE Symposium on Security
and Privacy (SP’2014), pages 227–242. IEEE, 2014.
[7] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang.
Jump-Oriented Programming: A New Class of Code-Reuse
Attack. In Proceedings of the 6th ACM Symposium on
Information, Computer and Communications Security, pages
30–40. ACM, 2011.
[8] N. Carlini and D. Wagner. ROP is still dangerous: Breaking
modern defenses. In 23rd USENIX Security Symposium
(USENIX Security’14), 2014.
[9] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi,
H. Shacham, and M. Winandy. Return-oriented programming
without returns. In Proceedings of the 17th ACM conference
on Computer and communications security, pages 559–572.
ACM, 2010.
[10] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and
C. Giuffrida. Stackarmor: Comprehensive protection from
stack-based memory error vulnerabilities for binaries. In
Proceedings of the 22nd Annual Network and Distributed
System Security Symposium (NDSS’15).
[11] Y. Cheng, Z. Zhou, M. Yu, X. Ding, and R. H. Deng.
Ropecker: A generic and practical approach for defending
against rop attacks. In Symposium on Network and
Distributed System Security (NDSS), 2014.
[12] M. Chew and D. Song. Mitigating buffer overﬂows by
operating system randomization. Technical Report
CMU-CS-02-197, Carnegie Mellon University, 2002.
[13] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie,
A. Grier, P. Wagle, Q. Zhang, and H. Hinton. Stackguard:
Automatic adaptive detection and prevention of
buffer-overﬂow attacks. In Usenix Security, volume 98,
pages 63–78, 1998.
100#
98#
104#
(b) Sampling of binutils.
102#
Figure 11: Performance of PBlocker for a few coreutils and
binutils programs normalized against vanilla LLVM-3.5.0. The x-
axis is adjusted in order to clearly indicate the overhead.
Opaque CFI [26] combines coarse-grained CFI and artiﬁcial diver-
siﬁcation in order to render disclosure attacks harder.
6.3 Artiﬁcial Diversity
The goal of artiﬁcial diversity is to randomize and hide the lo-
cation of a program’s code, data, stack, heap, etc. [4, 36, 5, 41,
12]. STIR [40] performs static instrumentation to generate binaries
that self-randomize every time the binary is loaded. Isomeron [17]
combines code randomization with execution-path randomization
wherein code fragments that can be indirectly targeted are dupli-
cated, and at runtime, a randomly chosen fragment from the dupli-
cates is invoked. Xu and Chapin [41] introduce ASLR using code-
islands in order to defend against chained return-to-libc attacks,
wherein they identify and randomize into isolated code blocks, base
pointers used in memory mappings.
Artiﬁcial-diversity-based defenses are susceptible to disclosure
attacks, and are not always an effective defense [33]. PBlocker
and PBlocker+ do not rely on ASLR for defense.
6.4 Gadget Elimination
Two main works: in-place code randomization [28], G-Free [27]
have been proposed to eliminate gadgets. Given the vast number of
available gadgets even in binaries [32], it is hard to eliminate all the
gadgets in a program. They perform semantics-preserving in-place
code randomization.
7. CONCLUSION
In this paper, we presented PBlocker, a novel defense against
ROP attacks. PBlocker enforces Stack Localization to defend
against ROP by stopping stack-pivot operations that pivot outside
the stack region. This covers most of the cases of ROP. We also
present PBlocker+, a more conservative version of PBlocker
wherein, the stack pointer is checked before each function returns.
[14] J. Criswell, N. Dautenhahn, and V. Adve. KCoFI: Complete
control-ﬂow integrity for commodity operating system
kernels. In Proceedings of 35th IEEE Symposium on Security
and Privacy (Oakland’14), 2014.
[15] T. H. Dang, P. Maniatis, and D. Wagner. The performance
cost of shadow stacks and stack canaries. In ACM
Symposium on Information, Computer and Communications
Security, ASIACCS, volume 15, 2015.
[16] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz,
R. Hund, S. Nürnberger, and A.-r. Sadeghi. MoCFI: A
framework to mitigate control-ﬂow attacks on smartphones.
In Proceedings of the 19th Annual Network and Distributed
System Security Symposium (NDSS’12), 2012.
[17] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and
F. Monrose. Isomeron: Code Randomization Resilient to
(Just-In-Time) Return-Oriented Programming. In Symposium
on Network and Distributed System Security (NDSS’15).
[18] J. DeMott. Bypassing EMET 4.1.
https://bromiumlabs.ﬁles.wordpress.com/2014/02/bypassing-
emet-4-1.pdf.
[19] E. Eng and D. Caselden. Operation Clandestine Wolf –
Adobe Flash Zero-Day in APT3 Phishing Campaign.
https://www.ﬁreeye.com/blog/threat-
research/2015/06/operation-clandestine-wolf-adobe-ﬂash-
zero-day.html.
[20] I. Fratric. Runtime prevention of return-oriented
programming attacks. http://ropguard.googlecode.com/svn-
history/r2/trunk/doc/ropguard.pdf, 2014.
[21] E. Gökta¸s, E. Anthanasopoulos, H. Bos, and G. Portokalidis.
Out of control: Overcoming control-ﬂow integrity. In
Proceedings of 35th IEEE Symposium on Security and
Privacy (Oakland’14), 2014.
[22] D. Jang, Z. Tatlock, and S. Lerner. SafeDispatch: Securing
C++ virtual calls from memory corruption attacks. In
Proceedings of 21st Annual Network and Distributed System
Security Symposium (NDSS’14), 2014.
[23] T. Jim, J. G. Morrisett, D. Grossman, M. W. Hicks,
J. Cheney, and Y. Wang. Cyclone: A Safe Dialect of C. In
USENIX Annual Technical Conference, General Track, pages
275–288, 2002.
[24] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar,
and D. Song. Code-Pointer Integrity. In USENIX Symposium
on Operating Systems Design and Implementation (OSDI),
2014.
[25] W. Lian, H. Shacham, and S. Savage. Too LeJIT to Quit:
Extending JIT Spraying to ARM. In Proceedings of the 22nd
Annual Network and Distributed System Security Symposium
(NDSS’15), 2015.
[26] V. Mohan, P. Larsen, S. Brunthaler, K. Hamlen, and
M. Franz. Opaque control-ﬂow integrity. In Symposium on
Network and Distributed System Security (NDSS), 2015.
[27] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and
E. Kirda. G-free: defeating return-oriented programming
through gadget-less binaries. In Proceedings of the 26th
Annual Computer Security Applications Conference, pages
49–58. ACM, 2010.
[28] V. Pappas, M. Polychronakis, and A. D. Keromytis.
Smashing the Gadgets: Hindering Return-Oriented
Programming using in-place Code Randomization. In IEEE
Symposium on Security and Privacy (SP’2012), pages
601–615, 2012.
[29] V. Pappas, M. Polychronakis, and A. D. Keromytis.
Transparent ROP Exploit Mitigation Using Indirect Branch
Tracing. In USENIX Security, 2013.
[30] A. Prakash, X. Hu, and H. Yin. vfGuard: Strict Protection for
Virtual Function Calls in COTS C++ Binaries. In
Proceedings of the 22nd Annual Network and Distributed
System Security Symposium (NDSS’15), 2015.
[31] A. Prakash, H. Yin, and Z. Liang. Enforcing System-wide
Control Flow Integrity for Exploit Detection and Diagnosis.
In Proceedings of the 8th ACM SIGSAC Symposium on
Information, Computer and Communications Security
(ASIACCS’13), pages 311–322, 2013.
[32] H. Shacham. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86). In
Proceedings of the 14th ACM conference on Computer and
communications security, pages 552–561. ACM, 2007.
[33] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu,
and D. Boneh. On the effectiveness of address-space
randomization. In Proceedings of the 11th ACM conference
on Computer and communications security, pages 298–307.
ACM, 2004.
[34] F. Shuster, T. Tendyck, C. Liebchen, L. Davi, A.-r. Sadeghi,
and T. Holz. Counterfeit Object-oriented Programming, On
the Difﬁculty of Preventing Code Reuse Attacks in C++
Applications. In Proceedings of 36th IEEE Symposium on
Security and Privacy (Oakland’15), 2015.
[35] K. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen,
and A. Sadeghi. Just-In-Time Code Reuse: On the
Effectiveness of Fine-Grained Address Space Layout
Randomization. In IEEE Symposium on Security and Privacy
(SP’2013), pages 574–588, 2013.
[36] P. team. PaX: Address space alyout randomization (ASLR).
http://pax.grsecurity.net/docs/aslr.txt, 2003.
[37] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway,
Ú. Erlingsson, L. Lozano, and G. Pike. Enforcing
Forward-Edge Control-Flow Integrity in GCC & LLVM. In
Proceedings of 23rd USENIX Security Symposium (USENIX
Security’14), pages 941–955, 2014.
[38] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A First
Step Towards Automated Detection of Buffer Overrun
Vulnerabilities. In NDSS, pages 2000–02, 2000.
[39] Z. Wang and X. Jiang. HyperSafe: A Lightweight Approach
to Provide Lifetime Hypervisor Control-Flow Integrity. In
IEEE Symposium on Security and Privacy (Oakland’10),
pages 380–395, 2010.
[40] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary
stirring: Self-randomizing instruction addresses of legacy
x86 binary code. In Proceedings of the 2012 ACM
conference on Computer and communications security
(CCS’12), pages 157–168. ACM, 2012.
[41] H. Xu and S. J. Chapin. Address-space layout randomization
using code islands. Journal of Computer Security,
17(3):331–362, 2009.
[42] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres,
S. McCamant, D. Song, and W. Zou. Practical control ﬂow
integrity and randomization for binary executables. In
Proceedings of the IEEE Symposium on Security and Privacy
(Oakland’13), pages 559–573, 2013.
[43] M. Zhang and R. Sekar. Control ﬂow integrity for COTS
binaries. In Proceedings of the 22nd USENIX Security
Symposium (Usenix Security’13), pages 337–352, 2013.