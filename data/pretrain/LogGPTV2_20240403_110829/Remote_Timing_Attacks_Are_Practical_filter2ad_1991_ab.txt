Our experiments consisted of:
1. Test the effects of increasing the number of decryp-
tion requests, both for the same ciphertext and a
neighborhood of ciphertexts.
2. Compare the effectiveness of the attack based upon
different keys.
3. Compare the effectiveness of the attack based upon
machine architecture and common compile-time
optimizations.
4. Compare the effectiveness of the attack based upon
source-based optimizations.
5. Compare inter-process vs. local network attacks.
6. Compare the effectiveness of the attack against two
common SSL applications: an Apache web server
with mod SSL and stunnel.
The ﬁrst four experiments were carried out inter-process
via TCP, and directly characterize the vulnerability of
OpenSSL’s RSA decryption routine. The ﬁfth exper-
iment demonstrates our attack succeeds on the local
network. The last experiment demonstrates our attack
succeeds on the local network against common SSL-
enabled applications.
5.1 Experiment Setup
Our attack was performed against OpenSSL 0.9.7,
which does not blind RSA operations by default. All
tests were run under RedHat Linux 7.3 on a 2.4 GHz
Pentium 4 processor with 1 GB of RAM, using gcc
2.96 (RedHat). All keys were generated at random via
OpenSSL’s key generation routine.
Our timing attack requires a clock with ﬁne resolution.
We use the Pentium cycle counter on the attacking ma-
chine as such a clock, giving us a time resolution of
2.4 billion ticks per second. The cycle counter incre-
ments once per clock tick, regardless of the actual in-
struction issued. Thus, the decryption time is the cycle
counter difference between sending the ciphertext to re-
ceiving the reply. The cycle counter is accessible via
the “rdtsc” instruction, which returns the 64-bit cycle
count since CPU initialization. The high 32 bits are re-
turned into the EDX register, and the low 32 bits into
the EAX register. As recommended in [7], we use the
“cpuid” instruction to serialize the processor to prevent
out-of-order execution from changing our timing mea-
surements. Note that cpuid and rdtsc are only used by
the attacking client, and that neither instruction is a priv-
ileged operation. Other architectures have a similar a
counter, such as the UltraSparc %tick register.
OpenSSL generates RSA moduli N = pq where q < p.
In each case we target the smaller factor, q. Once q is
known, the RSA modulus is factored and, consequently,
the server’s private key is exposed.
5.2 Experiment 1 - Number of Ciphertexts
This experiment explores the parameters that determine
the number of queries needed to expose a single bit of
an RSA factor. For any particular bit of q, the number
of queries for guess g is determined by two parameters:
neighborhood size and sample size.
Neighborhood size. For every bit of q we measure the
decryption time for a neighborhood of values g, g+
1, g+2, ..., g+n. We denote this neighborhood size
by n.
Sample size. For each value g + i in a neighborhood
we sample the decryption time multiple times and
compute the mean decryption time. The number of
times we query on each value g + i is called the
sample size and is denoted by s.
The total number of queries needed to compute Tg is
then s ∗ n.
6
12th USENIX Security Symposium 
USENIX Association
l
s
e
c
y
c
U
P
C
n
i
n
o
i
t
a
i
r
a
v
e
m
T
i
 80000
 60000
 40000
 20000
 0
-20000
-40000
-60000
 2
Decryption time converges
 6
 4
 12
# of samples for a particular ciphertext
 10
 8
 14
l
s
e
c
y
c
U
P
C
n
i
e
c
n
e
r
e
f
f
i
d
e
m
T
i
 3e+07
 2.5e+07
 2e+07
 1.5e+07
 1e+07
 5e+06
 0
-5e+06
zero-one gap when a bit of q=0
zero-one gap when a bit of q=1
zero-one gap
 100  200  300  400  500  600  700  800  900  1000
Neighborhood size
(a) The time variance for decrypting a particular ciphertext
decreases as we increase the number of samples taken.
(b) By increasing the neighborhood size we increase the zero-
one gap between a bit of q that is 0 and a bit of q that is 1.
Figure 2: Parameters that affect the number of decryption queries of g needed to guess a bit of the RSA factor.
To overcome the effects of a multi-user environment, we
repeatedly sample g+k and use the median time value as
the effective decryption time. Figure 2(a) shows the dif-
ference between median values as sample size increases.
The number of samples required to reach a stable de-
cryption time is surprising small, requiring only 5 sam-
ples to give a variation of under 20000 cycles (approxi-
mately 8 microseconds), well under that needed to per-
form a successful attack.
We call the gap between when a bit of q is 0 and 1 the
zero-one gap. This gap is related to the difference |Tg
|, which we expect to be large when a bit of q is 0
Tghi
and small otherwise. The larger the gap, the stronger the
indicator that bit i is 0, and the smaller chance of error.
Figure 2(b) shows that increasing the neighborhood size
increases the size of the zero-one gap when a bit of q is
0, but is steady when a bit of q is 1.
The total number of queries to recover a factor is 2ns ∗
log2 N/4, where N is the RSA public modulus. Unless
explicitly stated otherwise, we use a sample size of 7
and a neighborhood size of 400 on all subsequent exper-
iments, resulting in 1433600 total queries. With these
parameters a typical attack takes approximately 2 hours.
In practice, an effective attack may need far fewer sam-
ples, as the neighborhood size can be adjusted dynami-
cally to give a clear zero-one gap in the smallest number
of queries.
5.3 Experiment 2 - Different Keys
We attacked several 1024-bit keys, each randomly gen-
erated, to determine the ease of breaking different mod-
uli. In each case we were able to recover the factoriza-
tion of N. Figure 3(a) shows our results for 3 different
keys. For clarity, we include only bits of q that are 0,
as bits of q that are 1 are close to the x-axis. In all our
ﬁgures the time difference Tg Tghi is the zero-one gap.
When the zero-one gap for bit i is far from the x-axis we
can correctly deduce that bit i is 0.
With all keys the zero-one gap is positive for about the
ﬁrst 32 bits due to Montgomery reductions, since both
g and ghi use Karatsuba multiplication. After bit 32,
the difference between Karatsuba and normal multipli-
cation dominate until overcome by the sheer size differ-
ence between log2(g mod q)
log2(ghi mod q). The
size difference alters the zero-one gaps because as bits
of q are guessed, ghi becomes smaller while g remains
≈ log2 q. The size difference counteracts the effects of
Karatsuba vs. normal multiplication. Normally the re-
sulting zero-one gap shift happens around multiples of
32 (224 for key 1, 191 for key 2 and 3), our machine
word size. Thus, an attacker should be aware that the
zero-one gap may ﬂip signs when guessing bits that are
around multiples of the machine word size.
USENIX Association
12th USENIX Security Symposium 
7
8
12th USENIX Security Symposium 
USENIX Association
USENIX Association
12th USENIX Security Symposium 
9
l
s
e
c
y
c
U
P
C
n
i
n
o
i
t
a
i
r
a
v
e
m
T
i
 1.5e+07
 1e+07
 5e+06
 0
-5e+06
-1e+07
-1.5e+07
OpenSSL patched (bit=0)
OpenSSL patched (bit=1)
Unpatched (bit=0)
Unpatched (bit=1)
l
s
e
c
y
c
U
P
C
n
i
n
o
i
t
a
i
r
a
v
e
m
T
i
 0
 50
 100
 150
 200
 250
 1.5e+07
 1e+07
 5e+06
 0
-5e+06
-1e+07
-1.5e+07
Internetwork (bit=0)
Internetwork (bit=1)
Interprocess bit of (bit=0)
Interprocess (bit=1)
 0
 50
 100
 150
 200
 250
Bits guessed of factor q
Bits guessed of factor q
Figure 5: Minor source-based optimizations change the
zero-one gap as well. As a consequence, code that
doesn’t appear initially vulnerable may become so as the
source is patched.
Figure 6: The timing attack succeeds over a local net-
work. We contrast our results with the attack inter-
process.
One conclusion we draw is that users of binary crypto
libraries may ﬁnd it hard to characterize their risk to our
attack without complete understanding of the compile-
time options and exact execution environment. Com-
mon ﬂags such as enabling debugging support allow our
attack to recover the factors of a 1024-bit modulus in
about 1/3 million queries. We speculate that less com-
plex architectures will be less affected by minor code
changes, and have the zero-one gap as predicted by the
OpenSSL algorithm analysis.
5.5 Experiment 4 - Source-based Optimiza-
tions
Source-based optimizations can also change the zero-
one gap. RSA library developers may believe their code
is not vulnerable to the timing attack based upon test-
ing. However, subsequent patches may change the code
proﬁle resulting in a timing vulnerability. To show that
minor source changes also affect our attack, we imple-
mented a minor patch that improves the efﬁciency of
the OpenSSL 0.9.7 CRT decryption check. Our patch
has been accepted for future incorporation to OpenSSL
(tracking ID 475).
After a CRT decryption, OpenSSL re-encrypts the re-
sult (mod N) and veriﬁes the result is identical to the
original ciphertext. This veriﬁcation step prevents an in-
correct CRT decryption from revealing the factors of the
modulus [2]. By default, OpenSSL needlessly recalcu-
lates both Montgomery parameters R and R 1 mod N
on every decryption. Our minor patch allows OpenSSL
to cache both values between decryptions with the same
key. Our patch does not affect any other aspect of the
RSA decryption other than caching these values. Fig-
ure 5 shows the results of an attack both with and with-
out the patch.
The zero-one gap is shifted because the resulting code
will have a different execution proﬁle, as discussed in the
previous experiment. While our speciﬁc patch decreases
the size of the zero-one gap, other patches may increase
the zero-one gap. This shows the danger of assuming a
speciﬁc application is not vulnerable due to timing at-
tack tests, as even a small patch can change the run-time
proﬁle and either increase or decrease the zero-one gap.
Developers should instead rely upon proper algorithmic
defenses as discussed in section 6.
5.6 Experiment 5 - Interprocess vs. Local Net-
work Attacks
To show that local network timing attacks are practical,
we connected two computers via a 10/100 Mb Hawk-
ing switch, and compared the results of the attack inter-
process vs. inter-network. Figure 6 shows that the net-
work does not seriously diminish the effectiveness of
the attack. The noise from the network is eliminated
by repeated sampling, giving a similar zero-one gap to
inter-process. We note that in our tests a zero-one gap
of approximately 1 millisecond is sufﬁcient to receive
a strong indicator, enabling a successful attack. Thus,
networks with less than 1ms of variance are vulnerable.