## Page 314
CTF特训营：技术详解、解题方法与.
10.4.1.NET程序逆向
314/1144
10.4.1.NET程序逆向
NET是微软设计的独立于操作系统之上的平台，可以将其看成
一套虚拟机，无论机器运行的是什么操作系统，只要该系统安装
了.NET框架，便可以运行.NET可执行程序。
1..NET程序的识别
.NET程序用查壳工具PEiD识别结果为MicrosoftVisualC#/
Basic.NET，如图10-43所示。
PEiDv0.95
浏览
入口点：
00002C3E
EP段：
text
>
文件偏移：
D000OE3E
首字节：
FF,25,00,20
>
连接器版本：11.0
子系统：
Win32 console
>
PESniffer:Microsoft Visual C#v7.0/Basic.NET
PEiDDSCAN:Wicrosoft Visual C#/Basic.NET
多文件扫描（）
查看进程T）
扩展信息
插件
总在最前（S）
选项（）
关于（A）
退出
---
## Page 315
CTF特训营：技术详解、解题方法与
10.4.1.NET程序逆向
315/1144
图10-43使用PEiD识别程序是否为.NET
使用IDA打开.NET程序时，在加载文件类型中会多出一个
Microsoft.NETasSembly选项，如图10-44所示，不过IDA只能反汇编
出.NET的字节码，所以还需要专门的工具对.NET进行反编译。
Loada newfile
Load fileF:\ctf-seript\cetf\reverse100.exegs
Microsoft.Net assembly[pe.ldw]
Portable executable for 80386(PE)[pe.ldw]
MS-DOS executable (EXE)[dos.ldw]
Binary file
Processor type
MetaPC (disassenble all opcodes) [metapc]
Set
Analysis
Loading egment
0x00000000
Enabled
Kernel options 1
Kernel options2
Loading offset
000000000
Indicator enabled
Erocessor options
Options
Loading gptions
Load resources
Fill segent geps
Renane DLL entries
Create sements
anual 1oad
Create FLAT group
Create inports segment
Load as cgde segeent
OR
Cancel
Help
图10-44使用IDA识别程序是否为.NET
2..NET程序反编译
---
## Page 316
CTF特训营：技术详解、解题方法与
10.4.1.NET程序逆向
316/1144
NETReflector是反编译.NET程序的神器，可以在吾爱破解论坛
中下载该工具。在.NETReflector中，选择File→OpenAssembly，然
后选择要分析的exe程序，这样要分析的程序就被加入工具的左边栏
中，逐层点开可以看到程序的Main函数，如图10-45所示。
NET Refector9.0.1.374
NET10/C=1/VB
h Object Bn
 (Ctrf-F):
?
Xml.Serialization (4.0.0.0)
mal class Program
- Rev_100 (1.0.0.0)
/ Methods
IR Rev_100.exe
public Program0
 Refe
orivate static string readD:
80
100
8 (v Derived Typei
29 Main(String(I) : Voic
.dtor0
readi) : Shring
earch(Char, S
internal class Program
Rev_100.Program
nbly: Rev_100, Version=1.0.0.0
图10-45使用.NETReflector对.NET程序进行反编译
点击Main函数，从Main开始分析程序。Main函数的反编译代码
如图10-46所示。
---
## Page 317
CTF特训营：技术详解、解题方法与
10.4.1.NET程序逆向
317/1144
private staticvoid Main(stringlargs)
stringhostname=“127.0.0.1°;
int port=31337;
TcpClientclient=newTcpClientO:
try
Console.WriteLine("Connecting..");
client.Connect(hostname,port);
catch (Exception)
Console.WriteLine('Cannotconnect!\nFail!");
return;
Socket socket=client.Client;
string text=readO;
socket.Send(Encoding.ASCIl.GetBytes(*CTF(");
foreach(char ch in str2)
socket.Send(Encoding.ASCll.GetBytes(search(ch,text));
socket.Send(Encoding.ASCll.GetBytes(")"):
socket.CloseO;
client.Close0:
Console.WriteLine("Success!");
图10-46Main函数的反编译代码
简单阅读之后，可以发现程序将生成的flag通过网络发送到了
127.0.0.1：31337上，因此只要在本地的31337端口进行监听，就可以
---
## Page 318
CTF特训营：技术详解、解题方法与
10.4.1.NET程序逆向
318/1144
得到flag。
使用nc监听31337端口，命令为“nc.exe-vp31337”，然后运行
reverse100.exe，成功接收到flag，如图10-47所示。
D:\tool>nc.exe-lup31337
listening on[any]31337
connect to[127.0.0.1]from 1ing-PC[127.0.0.1]9872
CTF
ConfusedByAttribute
iXR>V;！q>SrpH-h6!}75O41%
日Wm@@9OrPgwd/p?iN>l*h@Y!
BaseTypes
DerivedTypes
dioV:)（
dioV：(sgrAtnevE,tcejbO）
dioV：（sgrAtnevE，tcejbO）
dioV:)naelooB（
dioV：)sgrAtnevEtcejbO（
gnirtS:)gnirtS（
.ctor0
B
xoBtxeT:
B
nottuB:
lebal:
reniatnoCI:
{）CrackMe2.Properties
图10-48混淆后的函数名
de4dot是一个强大的.NET反混淆工具，运行“de4dot.exe
CrackMe2.exe”，可以在当前目录下生成一个文件名为CrackMe2
---
## Page 320
CTF特训营：技术详解、解题方法与
10.4.1.NET程序逆向
320/1144
cleaned.exe的程序，如图10-49所示。
D:\too1de4dot v3.1.41592.3405>de4dot.exe CrackMe2.exe
de4dot v3.1.41592.3405 Copyright （C) 2011-2014 PI:EMAIL
Latest version andsource code:https://github.con/Bxd4d/de4dot
NETReactorv4.9modby PC-RET"
Detected Confuser（not supported)（D:\too1de4dot u3.1.41592.3405CrackMe2.exe)
Cleaning D:\too1de4dot v3.1.41592.3405CrackMe2.exe
Renaning allobfuscated synbols
aving D:\too1^de4dot v3.1.41592.3405 
Class5
Class6
ConfusedByAttribute
日位
GFormo
BaseTypes
DerivedTypes
.ctor0
button_0_Click(Object,EventArgs):Void
GFormO_Load（Object,EventArgs):Void
method_00:Void
smethod_O(String):String
System.Windows.Forms.Form.Dispose(Boolean):Void
textBox_O_TextChanged（Object,EventArgs):Void
button_0:Button
icontainer_O:IContainer
label_O:Label
textBox_O:TextBox
{）CrackMe2.Properties
图10-50反混淆后的函数名
---
## Page 322
CTF特训营：技术详解、解题方法与
10.4.2Python程序逆向
322/1144
10.4.2Python程序逆向
Python程序是Python源代码（.py文件）经过编译生成的对应的
字节码文件（.pyc文件），再通过Python打包工具，转化为EXE或者
ELF格式的可执行程序。最常见的Python打包工具包括
py2exe(http://www.py2exe.org/)
和
pylnstaller (http://
www.pyinstaller.org/)
1.Python程序的识别
通过IDAPro打开要分析的程序，查看程序中的字符串，如果看
到有PY2EXE_VERBOSE和较多以Py开头的字符串，如图10-51所示，
那么基本就可以确定这个程序是用py2exe进行打包的。
S'
data:00405204
000000OF
PY2EXE_VERBOSE
data:00405214
000000OF
PY2EXE_VERBOSE
S'
data:00405234
00000OOE
C
PYTHONINSPECT
.data:00405268
00000OOE
C
Py_Initialize
data:00405278
00000013
C
PyRun_SimpleString
data:0040528C
00000000
C
Py_Finalize
data:00405298
000000OB
Py_GetPath
data:004052A4
00000011
Py_SetPythonHome
data:004052B8
00000012
Py_SetProgramName
data:004052CC
0000001F
C
PyMarshal_ReadObjectFromString
.data:004052EC
00000016
C
PyObject_CallFunction
---
## Page 323
CTF特训营：技术详解、解题方法与
10.4.2Python程序逆向
323/1144
图10-51py2exe打包程序的识别
使用pylnstaller打包的程序中依然存在较多以Py开头的字符串
如图10-52所示。
.rdata:0040C4DD 00000019
C
Py_IgnoreEnvironmentFlag
rdata:0040C4F8
00000034
C
Py_NoSiteFlag
Cannot GetProcAddress for Py_IgnoreEnvironmentFlag\n
rdata:0040C52C0
000000OE
C
rdata:0040C53C
00000029
C
Cannot GetProcAddress for Py_NoSiteFlag\n
.rdata:0040C565
00000017
C
Py_NoUserSiteDirectory
rdata:0040C57C
00000032
C
Cannot GetProcAddress for Py_NoUserSiteDirectory\n
rdata:0040C5AE
00000010
C
Py_OptimizeFlag
rdata:0040C5C0
0000002B
C
Cannot GetProcAddress for Py_OptimizeFlag\n
rdata:0040C5EB
000000OF
C
Py_VerboseFlag
rdata:0040C5FC
0000002A
C
Cannot GetProcAddress for Py_VerboseFlag\n
.rdata:0040C6260000000E
C
Py_BuildValue
图10-52
pylnstaller打包程序的识别
2.字节码文件的提取
对于py2exe打包的程序，提取脚本（https://github.com/matiasb/
unpy2exe）可以得到pyc文件，如图10-53所示。
D:revSeruer2>pythonunpy2exe-pyHTTPServer.exe
Magicvalue:78563412
Code bytes length:8777
Archive name:library.zip
Extracting boot_conmon.py-pyc
Extracting HTTPSeruer-py-pyc
图10-53
3py2exe打包程序的提取
---