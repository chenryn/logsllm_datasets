3.5.5 Volunteer bias. We receive reports only from people who
choose to participate in the program. It is possible that they are not
representative of all Chrome users. However, the considerable size
of our dataset suggests that it represents a large swath of browser
users.
3.6 Telemetry data
We supplement certificate error reports with a separate dataset of
Chrome telemetry data. Telemetry data includes pseudonymous
counts of browser events. We rely on telemetry data to corroborate
patterns in our main dataset and analyze data that is not included
in the certificate reports.
The telemetry and certificate upload services differ in two im-
portant ways. First, telemetry reports are queued and retried every
five to thirty minutes (depending on the operating system and net-
work type) if an attempt to send them fails. This means that we
will reliably receive telemetry data — but not error reports — from
clients with flaky network connections. Second, telemetry reports
2We recently implemented a retry feature. Since this feature was not present for most
of the data analyzed in this work, we exclude reports sent via retry from the analysis.
3Examples
(https://iridiumbrowser.de) and Amigo
(https://amigo.mail.ru)
include Iridum Browser
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1409are sent over HTTPS, so we do not receive telemetry data from
clients that are persistently unable to send HTTPS requests.
We occasionally refer to Chrome telemetry data to study events
that are not captured by our main dataset of certificate reports. For
example, certificate reports are not sent in cases where users do
not encounter certificate warnings, so we use telemetry data to
investigate HTTPS-related events that do not trigger certificate
warnings.
4 ERROR DEFINITIONS AND
CLASSIFICATION METHODS
In this section, we define the different types of errors, give back-
ground on their causes, and describe our classification rules.
To initiate the project, a group of browser security experts man-
ually investigated and labeled more than 2,000 reports over several
months. In some cases, the error causes were obvious; in others, it
required research into network appliances and consumer software.
Based on our review experiences, we wrote rules to automatically
classify reports. A daily analysis pipeline parses incoming certifi-
cate error reports and applies our rules. Our goal is to assign blame
(server, network, or client misconfiguration) and a specific root
cause. Each report can contain multiple certificate validation errors,
and we attempt to assign blame and cause for all errors.
4.1 Classifying server errors
A server error occurs when a server presents an invalid or incom-
plete certificate chain. A properly configured client on a properly
configured network should be able to validate a server’s certifi-
cate chain. If it cannot, then we blame the server for the error. An
example is a server that presents a self-signed certificate.
When processing a report, we check to see whether the Google-
bot (Google’s web crawler) has encountered any certificate errors
for that website within the past thirty days. The Googlebot serves
as ground truth: it is a properly configured client on a properly
configured network, and it should be able to validate a server’s
certificate chain. If the Googlebot has seen a matching error for a
website, then we blame the server. Googlebot does not necessarily
crawl every site every day, so we use a thirty day window rather
than a same-day window to increase the chance that the Googlebot
has crawled a particular site within the window.
Note that error reports include the server-supplied chain. Why
don’t we use that instead of the Googlebot? Theoretically, we could
simply check whether the server-supplied chain validates. In prac-
tice, server-supplied chains are unreliable due to TLS proxies. Re-
ports often contain certificates generated and signed by proxies,
and proxies often introduce certificate errors [10]. To avoid mixing
server errors and network errors, we use the Googlebot to tell us
what certificate chain the server was sending around that date. One
potential concern is that the Googlebot might validate certificate
chains differently from clients. To verify our methodological choice,
we sampled 2,296,747 certificate chains from the Googlebot and
re-validated them in Ubuntu and Windows. The three platforms
agreed whether a chain should validate 99.87% of the time.
Beyond placing blame on the server, we further categorize server
errors by the specific type of misconfiguration:
4.1.1
Server date errors. Certificates are only valid within a cer-
tain date range. A server date error occurs when a server uses a
certificate prematurely or past its expiration date. If a client re-
ports that a certificate was not yet valid or expired, then we check
whether the Googlebot encountered the same problem on the re-
ported website in the previous thirty days. If so, we classify the
error as caused by a server date error.
4.1.2
Server name-mismatch errors. Certificates are only valid
for the hostnames listed in the certificate. The hostnames must be
listed precisely or with a wildcard (e.g., *.example.com). A server
name-mismatch error occurs when a server deploys a certificate
without including the website’s hostname or matching wildcard. If
a client reports that a certificate is missing a hostname, we check
whether the Googlebot encountered the same problem on the web-
site in the previous thirty days. If so, we classify the error as caused
by a server name mismatch.
To understand why the error occurred, we further look for
two developer mistakes that can lead to name mismatch errors,
as previously identified by Akhawe et al [9]. We look for two
types of subdomain mismanagement: www mismatch error and
out-of-wildcard-scope subdomain error. A www mismatch error oc-
curs when a client tries to visit example.com but gets a certifi-
cate for www.example.com (or the other way around). An out-of-
wildcard-scope subdomain error occurs when a client tries to visit
a.b.example.com but gets a certificate for *.example.com; this
fails because wildcards only match a single DNS label level.
4.1.3
Server authority-invalid errors. Certificates are only valid
if they chain to a trusted root. A server authority-invalid error occurs
when a server deploys a certificate that does not chain to a trusted
root (for example, a self-signed certificate). If a client reports that a
certificate doesn’t chain to a trusted root, then we check whether the
Googlebot encountered the same problem on the reported website
in the prior thirty days. If so, we classify the error as caused by
a server authority-invalid error. We further identify self-signed
certificates as a sub-category of server authority-invalid errors.
One notable decision relates to how we classify errors caused by
untrusted government-operated roots. Some government websites
use government-operated roots that are not included in standard
root trust stores. Citizens of these countries are expected to install
these roots on their devices, but in practice many people do not.
Should we blame the server for using a non-standard root, or should
we blame clients for not installing the root? We choose to designate
such errors as server errors.
Our classification misses one category of server authority-invalid
errors: errors on intranet websites. The Googlebot cannot reach
intranet websites for classification. Since we cannot differentiate
between server, client, and network errors for intranet websites,
we leave them as unclassified.
4.1.4
Server insufficient-intermediates errors. Servers are sup-
posed to provide enough information for a client to build a full
chain from the leaf certificate to the trusted root certificate. Typi-
cally, servers must provide intermediate certificates between the
leaf and root. A server insufficient-intermediates error occurs when
a client can’t build a valid chain because the server didn’t include
all of the necessary intermediate certificates.
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1410Insufficient intermediate errors are tricky for two reasons. First,
they are context-dependent. If a client happens to have a missing in-
termediate cached (from a previous website), or if the client actively
fetches the missing intermediate, then the chain will appear valid.
Second, they look similar to server authority-invalid errors: in both
cases, the client can’t build a chain to a trusted root. The distinction
is that chains with insufficient intermediates would validate on
most clients if the server provided more information.
If a client reports that a certificate doesn’t chain to a trusted
root, we perform two steps. First, we check whether the Google-
bot encountered the same problem on the reported website in the
prior thirty days. The Googlebot caches intermediates, so websites
with insufficient intermediate errors usually look error-free to the
Googlebot. This first check filters out server authority-invalid er-
rors. If the certificate chain looks valid to the Googlebot, we then
attempt to build a chain using only the certificates that the server
supplied to the Googlebot. If the resulting chain doesn’t validate,
then we classify the error as caused by an insufficient intermediate
error.
This heuristic can have false positives or false negatives:
• A false positive happens if the client has a missing inter-
mediate cached (which would allow the chain to validate),
but something else coincidentally went wrong. The server
really is missing an intermediate but it was not the cause of
the error. In July 2016, we manually reviewed 100 reports
classified as insufficient intermediates and found one false
positive report.
• A false negative happens if the server-supplied certificates
chain to a root that the Googlebot trusts but the client does
not. For example, a client might have an older trust store
that does not include a newer root that Googlebot trusts. The
server might send a chain that is recognized by the newer
trust store, but if the server neglects to send a cross-sign
certificate linking the newer root to an older root in the
client’s trust store, then the client will be unable to validate
the chain unless it happens to have the cross-sign certificate
cached. In this case, we will leave the report as unclassified.
We observed 5 false negatives when manually reviewing 100
unclassified reports (Section 9).
We classify insufficient intermediates as a server problem be-
cause servers are supposed to supply intermediates (as per RFC
5246 [11]). However, one could argue that they are a client prob-
lem because clients can dynamically fetch intermediate certificates.
Some web browsers already do this as needed. Was the server mis-
configured because it didn’t send the intermediates, or was the
client misconfigured because it didn’t fetch them? We label insuffi-
cient intermediates as server errors because they violate the HTTPS
specification, but the alternate perspective is also reasonable.
4.1.5
Server SHA-1 errors. Certificates signed with the outdated
SHA-1 hash algorithm are no longer considered secure, and Chrome
has gradually phased out support for SHA-1 over the past few
years [17]. As of Chrome 57, users see certificate errors for any site
with a SHA-1 signature in its certificate chain. We do not include
SHA-1 errors in our automated analysis pipeline or in the bulk
of our analysis because Chrome’s SHA-1 support changed over
the course of our dataset, and the algorithm was not fully blocked
until nearly the end of the period that we studied. However, we
include an analysis of SHA-1 errors on a recent subset of the data
in Section 6.2.5.
4.2 Classifying client errors
A client error occurs when a client cannot validate a certificate chain
from a properly configured server. A properly configured client
would be able to validate the same certificate chain. We identify
the following types of client errors:
4.2.1
Incorrect client clocks. Certificates are only valid within
a certain date range. A client clock error occurs when a client’s
clock is set too far in the future or past, causing certificates to look
as if they are outside of their validity periods. If a certificate date
error was not caused by a server misconfiguration, we next check
whether the reported certificate chain’s dates are valid relative to
our own server’s clock. If it is, then we classify the error as caused
by a client clock error.
4.2.2 Anti-virus errors. Anti-virus (AV) software commonly acts
as a TLS proxy in order to inspect HTTPS browser traffic. An anti-
virus error occurs when a bug in an AV proxy prevents clients
from establishing valid HTTPS connections. During the course of
manual review, we observed several instances of AV errors. When
a certificate report contains the name of a popular AV product
(Avast, Kaspersky, Bitdefender, or Sophos) in the certificate chain,
the pipeline flags the report as an anti-virus report.
We do not use the AV label to automatically assign a root cause.
AV product names appear in many reports that have other error
causes. Each AV bug has had its own distinct signature, which has
prevented us from writing a single rule that captures this error class.
Instead, we monitor the number of AV-related reports. If there is an
upswing, we manually investigate the situation. Several times, these
upswings have turned out to be bugs in AV products (Section 7.2).
4.3 Classifying network errors
A network error occurs when a network appliance intercepts an
HTTPS connection and replaces the certificate chain with one that
the client cannot validate. Our pipeline classifies the following types
of network errors:
4.3.1 Captive portal errors. Airport, hotel, and enterprise net-
works often block access to the Internet until the user has authen-
ticated. Network access points that enforce this requirement are
known as captive portals. A captive portal error occurs when a cap-
tive portal intercepts TCP packets or DNS queries to redirect HTTPS
traffic to the captive portal’s login page. This behavior causes a
name mismatch error because the hostname that the browser re-
quested does not match the certificate presented by the login page.
When a Chrome user encounters a name mismatch error, Chrome
sends a probe request to an endpoint with a known response. If the
response is unexpected (as it would be when redirected to a captive
portal login page), then Chrome prompts the user to log in to the
captive portal. Certificate reports contain a flag to indicate whether
such a prompt was shown.
The pipeline does not classify an error as a captive portal error
solely because the report says that Chrome detected a captive portal.
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1411errors [9, 12, 14, 18]. However, we find that client and network
problems are at least as influential as server misconfigurations. Of
the reports that we can automatically classify, half are server errors
(31.2% of all reports) and half are client or network errors (31.6%
of all reports). Per a manual review, the unclassified reports are
even more weighted towards non-server errors (Section 9). Figure 2
shows the percentage of all reports with at least one labeled client
or network error, as per the analysis pipeline. Client and network
misconfigurations are more problematic for Chrome users on Win-
dows than on other platforms, primarily due to the prevalence of
misconfigured client clocks on Windows (Section 7.1).
A small number of root causes account for a large amount
of spurious warnings. If the most common root causes could be
addressed, a large chunk of spurious warnings would disappear. For
Windows, client clock errors account for more than 30% of all cer-
tificate warnings. Similarly, on Android, insufficient intermediates
cause more than 35% of certificate warnings. We therefore target
these influential errors when building mitigations (Section 10).
We also find that government websites are disproportionately
responsible for server errors. Fixing this is beyond the scope of our
work, but we urge citizens to voice concerns.
6 SERVER ERRORS
We want to answer two research questions: (1) Are some types
of sites more prone to server errors? (2) Are some types of server
errors more common than others?
To answer these questions, we take a closer look at the reports
that our pipeline labeled as server errors.
6.1 Types of sites with server errors
Government-run websites with server errors are responsible for
a disproportionate number of HTTPS errors. We selected the 100
sites with the most server error reports in the Annual Reports
sample and manually assigned category labels to them. To obtain
this list of sites, we grouped reports by their hostname, and then
took the 100 hostnames with the most reports classified by our
analysis pipeline as caused by a server error. Table 2 shows this top
100 by category. 65% of the “worst offenders” are government-run
websites. They exhibit a range of misconfigurations, ranging from