PSI uses a Directed Acyclic Graph called ψDAG, as shown
in Figure 6. Formally,
this is a two tuple ψDAG =
(cid:104)NFInstances, NextHops(cid:105). Each vertex in ψDAG represents
a processing function (e.g., IPS) denoted as NFInstance that
can: (1) tag the trafﬁc based on the processing outcome (e.g.,
tag packet with “oversized” as context); (2) apply custom pro-
cess based on the tags (e.g., check the payload for packet with
“oversized” context). The edge relation NextHops speciﬁes
the intended sequence of traversal through processing tools
with respect to context; e.g., packet with “oversized” context
is forwarded to a IPS (to check payload).
time) and may want
Supporting intent evolution with ψFSM : While the ψDAG
abstraction captures context-dependent processing,
it does
not capture the evolution of security intent. For instance,
the operator may have an inkling of future “states” of the
host (contexts at different
to proac-
tively express the intent for these subsequent likely states
as well. Similarly, the intent may evolve as new information
arrives; e.g., new vulnerabilities or new alerts from external
sources. To capture such intent evolution, we introduce the
ψFSM abstraction. Formally, the ψFSM is a Moore machine
ψFSM := (cid:104)S , sstart ,E,F, T , O(cid:105) that maps the trafﬁc’s state
to a speciﬁc ψDAG via the output function O (S → F). In
the simplest case, we have a single global state for a speciﬁc
class with a single ψDAG. More generally, we can deﬁne state
transitions based on different events Ej ∈ E and the ψDAG
will depend on the current state.
Fig. 7: PSI agile intent evolution.
Note that from Section III, our policy is isolated at a
per device/trafﬁc granularity. Therefore, each device/trafﬁc is
assigned with a ψFSM and a ψDAG, as shown in Figure 8;
6
the ψFSM captures current state and future state evolution;
and the ψDAG captures the current intent with respect to the
current state.
Fig. 8: PSI policy at per device/trafﬁc granularity.
Expressing aggregate policies by scoping: Next we discuss
how we can support legacy policies expressed in terms of
trafﬁc aggregates, e.g., a device belongs to multiple logical
groups [18]. To this end, we add the notion of scope to denote
the range of devices that a ψFSM and a ψmbox would apply
to. For example, local ψmboxes denoted as XL : NFInstance
is dedicated to a device, while global ψmboxes denoted as
XG : NFInstance apply to all devices. For each device, we
compose its local XL : ψFSM and global XG : ψFSM as
a new ψFSM . Then for each state in the composed ψFSM ,
we merge the local XL : ψDAG and global XG : ψDAG.
Following the above process, it’s easy to convert legacy group-
based policies to per-device PSI policies. For example, using
the scope notion, we port 348 distributed Firewall/IPS policies
to PSI policies in the logical interference part in SectionVII-A.
Illustrative Example: Let’s consider an end-to-end example
to put the ideas together and see how PSI policy abstraction
enables us to express effective security postures. Figure 9
illustrates a dynamic policy that can ﬁlter out spurious alarms
and precisely identify a multistage attack in real-time. The
multi-stage attack includes two stages: 1) Tempting a user to
click a link to suspicious websites (unknown IP, initial sign);
2) Device initiated downloads of malicious payloads (worms,
Trojans, Exploit Kits). Currently, the initial sign of the attack is
hidden in a deluge of alerts (accessing a unknown website can
be normal user activity) and always checking the payload will
cause collateral damage to the network. With the PSI policy
language, the administrator can enforce a dynamic scrutiny
policy [60] to react to the initial sign of the attack. As shown in
Figure 9, the administrator can deﬁne the trafﬁc of a device (IP
10.2.0.1) by set the sip ﬁeld of a predicate to 10.2.0.1. Then
the administrator uses the corresponding ψDAG to specify
the possible security states (normal, suspicious and malicious)
and state transitions of the trafﬁc. By setting a ψDAG for
each state, the administrator means that: when the trafﬁc is at
normal state, the trafﬁc will be processed by a light weight
IPS (L-IPS) performing only header check (e.g., checking for
access to unknown IP); if L-IPS detects access to unknown
IP, the context will be updated with unknown IP event and
triggers the trafﬁc to transit from normal to suspicious, and
L-IPS will forward the packet to a heavy payload check (H-
IPS); if exploit payload is detected, then the multi-stage attack
is conﬁrmed, the trafﬁc state will be changed to malicious, and
corresponding packets will be dropped.
Once we have the abstract policy, the PSI Policy Engine
will interpret the abstract policy and compute the real-time se-
NF1:	processing1	Context1	Context2	Context3	Ingress	Egress	NF3:	processing3	NF2:	processing2	state1	state2	event	ψFSM	ψDAG1	ψDAG2	state evolution intent evolution traffic class state intent …	predicate1	ψFSM1	ψDAG1	predicate2	ψFSM2	ψDAG2	predicaten	ψFSMn	ψDAGn	…	…	Network	traﬃc	space		in Figure 10(a), PSI will conﬁgure the L-IPS to send pkt1
(destination IP is in the normal IP list) with context “normal”
to the controller, and the controller will reactively install a rule
at the switch to forward pkt1 to port1.
current and identiﬁes the si
Event processing: The previous discussion handles the case
for a given state s. Other types of events (e.g., IDS alerts)
may trigger a state transition in the ψFSM i, e.g., transition
from normal state to suspicious state in Figure 9. This in
turn may require a new ψDAG to be instantiated. In this
case, the controller retrieves the ψFSM i corresponding to the
event,3 looks up the si
next. The
controller then identiﬁes the new ψDAG next corresponding to
the new state s, deactivates the current ψDAG, and launches
new ψmbox instances to implement ψDAG next, and updates
internal data structures to indicate a state change. For example,
when transiting from normal state to suspicious state,
the
orchestration module will launch a ψmbox running IPS with a
set of payload check rules to implement the H-IPS node with
the payload check. Figure 10(a) shows one of the rules in the
IPS: check if the payload contains “meta” and ”EmulateIE7”
to block Magnitude EK.
Challenges: While this above workﬂow is conceptually
correct, we identify two key challenges:
1. Scalability with adversarial workloads: First, handling ev-
ery packet presents a fundamental scaling challenge - a
single controller has to process a control message for
every packet in the network. Second, even if we do not
interpose the controller on every packet at every hop, the
controller needs to deal with a large number of events in any
reasonable-sized network that will induce ψDAG updates.4
Thus, an adversary can easily saturate the CPU, memory,
or the control channel bandwidth with this naive approach.
2. Security downtime: Transitioning from the ψDAG current
to the ψDAG next will need new VMs to be launched
and other forwarding rules to be setup. Even with fast
VM bootup techniques, there will be a non-trivial latency.
Thus, adversaries can exploit these delays in setting up
ψDAG next
to achieve their goals for the types of multi-
stage attacks described earlier.
B. Key Ideas in PSI
Next, we describe how address each of these challenges.
Proactive context-based forwarding: The reactive controller
does not scale as it interposes on every packet at every logical
forwarding between two ψmboxes.
To avoid this, our goal is to keep packets in the data plane
as much as possible [36]. We achieve this with a proactive
forwarding approach extending prior work [36]. The core idea
is illustrated in Figure 10. Each ψmbox tags outgoing packets
specifying the relevant context needed for forwarding along
the ψDAG. For example, in Figure 10, all packets are initially
under “normal” tag and the tag changes to “suspicious”. The
forwarding logic of the network switches will incorporate these
3We assume that events are annotated with the class value (i).
4Even if the likelihood of updates for a single device is low, at any given
time there are likely to be several devices that need updates.
Fig. 9: A dynamic scrutiny policy expressed via PSI.
curity intent (ψDAG) for each device’s trafﬁc based on current
context. In Section V, we show how to translate the intents to
concrete ψmbox deployment and network conﬁgurations. We
also describe a GUI for the administrators to simplify the input
of the abstract policy in Section VI.
V. PSI CONTROLLER
In this section, we describe the PSI controller’s orches-
tration mechanisms to translate the high-level
intents into
a concrete realization. To highlight the key scalability and
responsiveness challenges, we begin with a simple reactive
design. Then, we discuss our ideas to address these challenges:
proactive tag-based forwarding, elastic controller scaling, and
ψDAG prefetching.
A. Conceptual View and Challenges
The input to the PSI orchestration module is the policy
intent (ψDAG) for each device. The goal of the controller
is to translate these into a concrete realization; i.e., launch
ψmbox instances and set up forwarding rules. Recall that
PSI intents capture dynamic packet processing at two levels.
First, the forwarding path may depend on ﬂow-speciﬁc context
information from upstream nodes in the ψDAG. For example,
in Figure 9, trafﬁc with context unknown IP from L-IPS should
be forwarded to H-IPS for further payload analysis. Second,
the ψDAG may itself be updated based on ψFSM transitions
in response to alerts or other events. For example, in Figure 9,
the ψDAG will be updated when L-IPS raise an unknown IP
alert and the state transits from normal to suspicious.
A seemingly natural solution to implement these intents is
to adopt a reactive mechanism, which conﬁgures forwarding
rules and deploy ψmboxes on-demand whenever the context
changes. Let us use the intents for normal state and suspicious
state in Figure 9 as an example to show how such a reactive
controller would react to packet arrivals and other events/alerts
(Figure 10).
Per-packet processing: Suppose a packet belonging to class i
arrives at a network interface (either at a ψmbox or a switch).
By default, this node will not have any forwarding rule. Thus it
buffers the packet and sends an PKTIN event to the controller
with the packet’s header and any relevant processing context.
On receiving the PKTIN event, the controller retrieves the
current state si
current corresponding to this packet’s class and
uses it to get ψDAG current. Based on the current context and
the node that generated the packet, the controller decides the
next hop for this packet and sets up forwarding rules to ensure
that the packet will traverse the intended path. For example,
7
Normal	Suspicious	Malicious	sip:10.2.0.1	sMAC:any	…(cid:1)…(cid:1)…(cid:1)ψFSMs	ψDAGs	Predicates	Packet:	10.2.0.1	…(cid:1)Event:	Unknown	IP(cid:1)Context	Egress	L-IPS	normal	Ingress	header	L-IPS	unknownIP	Ingress	Egress	H-IPS	header	payload	normal	L-IPS	unknownIP	Ingress	H-IPS	Drop	exploit	header	payload	Unknown	IP(cid:1)exploit	ψDAG prefetching: The combination of proactive context-
based forwarding, partitioning, and elastic scaling effectively
addresses the scalability bottleneck. However, the problem of
security downtime during ψFSM transitions still remains.
To address this, we use the following idea. Since the
controller has the entire ψFSM described by the policy intent,
it can look ahead and predict the next k possible states for
each class class. Then, it proactively installs the ψmboxes
corresponding to the ψDAGs for these next k possible states,
in order to mask the latency involved when these might be
needed in the future.
One concern might be that this needlessly increases the
resources used by the ψcluster as ψDAG instances may never
be exercised. While this is theoretically valid, in practice, we
can address it as follows. First, the controller installs the future
ψDAGs for the same class to be multiplexed on the same
hardware as the current ψDAG for that class. Since there is
only one active ψDAG for a given trafﬁc class at a given
time, this incurs no additional hardware resources. Second,
we implement some simple optimizations to do an incremental
launch; e.g., if there are common ψmbox instances across the
future ψDAGs then we can reuse these instead of cloning
them. This last optimization also indirectly helps to reduce the
downtime by reducing the number of new VMs we need to
launch.
VI. PSI IMPLEMENTATION
We have implemented a fully functional PSI system using
open source SDN/NFV tools, consisting of around 8K lines of
code [19]. In this section, we brieﬂy our implementation and
the extensions we made to open source tools to enable the PSI
vision.
We
Controller:
choose OpenDaylight a popular
industry-grade SDN controller as our starting point. Since
OpenDaylight only focuses on simple forwarding func-
tions, we add several extensions to support PSI:
1. Operator interface: We write a custom GUI to make it
easy for operators to enter intended policies, as shown in
Figure 11. The PSI GUI can take in both textual (in a
domain-speciﬁc language) and graphical (by adding and
inter-connecting graph nodes) forms. Then a policy parser
translates the input into ψFSM and ψDAG data structures
for each trafﬁc class. The policy parser also veriﬁes the
consistency of the policy (e.g., the same trafﬁc ﬂow is not be
assigned conﬂicting policy actions, such as drop/pass) using
checking mechanisms similar to those of Fireman [74].
2. Event handler: OpenDaylight natively only handles
OpenFlow messages from SDN switches. We extend it to
handle events from common security appliances; e.g., Snort
IDS alerts.
3. Orchestration: We write custom code to setup tag-based
forwarding rules on switches. Our VM launching scripts
interact with the KVM hypervisor running at the ψmbox
node (see below). This orchestration module is also respon-
sible for implementing the ψDAG prefetching logic from
the previous section.
Fig. 10: Comparing reactive and proactive design.
tags as part of their packet processing actions. For example, in
Figure 10, if the packet is tagged as “normal”, it is forwarded
to port 1, and if the packet is tagged as ”suspicious” it is
forwarded to port 2. Note that because the controller has a
logically global view it can proactively install these per-tag
forwarding rules for each class class without waiting for a
PKTIN event.
Now, there might be two potential deployment concerns.
First, we need sufﬁcient space in the packet header to add
these tags. This is not an issue as new standards for virtual
network forwarding and network service chaining headers
explicitly include additional header space for metadata [70],
[71]. With software switching (e.g., OpenvSwitch) and new
switch pipelines [28], it is possible to add ﬂexible header
matching rules based on these tag bits. Furthermore, these
header tags are only needed inside the ψcluster, where we are
not constrained by legacy networking. Second, the ψmboxes
have to explicitly expose these tags. Prior work shows that the
modiﬁcations required to commodity middleboxes to add the
tagging logic is less than 50 lines of code [36].
Scale-out controller: While proactive forwarding addresses
the scaling problem in dealing with PKTIN arrivals, it does
not address the issue of an adversary sending crafted data to
generate a large event/alert volume to overload the controller.