### D. Code Injection Results
This section presents the results from the vulnerabilities identified by various scanners. To maintain consistency with previous research [13, 8], we define an XSS (Cross-Site Scripting) vulnerability as any injected JavaScript code that executes. While accepting user-supplied JavaScript is generally risky, some applications, such as WordPress, have features that require executing user-provided JavaScript.

In Section V-G, we discuss the impact and exploitability of the vulnerabilities detected by our scanner. Table IV lists all the XSS vulnerabilities found by the scanners across all applications, including self-reported vulnerabilities. After removing false positives and clustering similar injections (as explained in Section IV-B), the refined results are presented in Table V.

The results in Table V show that Black Widow outperforms other scanners on both reference and modern applications. In total, Black Widow identifies 25 unique vulnerabilities, which is more than three times the number found by the second-best scanner. Of these 25, six are previously unknown vulnerabilities in modern applications. The remaining 19 vulnerabilities are considered known for the following reasons:
1. All WackoPicko vulnerabilities are implanted by the authors and are known by design.
2. SCARF has been thoroughly researched, and its vulnerabilities may already be known. We conservatively assumed the eight vulnerabilities to be known.
3. The vulnerabilities in phpBB and Vanilla were fixed in their newest versions.

It is important to note that Black Widow did not miss any vulnerabilities found by other scanners. However, there were instances where both Black Widow and other scanners detected the same vulnerability but through different parameters. These cases are explored further in Section V-F. Additionally, Black Widow is the only scanner that finds vulnerabilities in modern web applications.

### E. Takeaways
Our scanner outperforms others in both code coverage and vulnerability detection. Figures 2 and Table I show that Black Widow outperforms other scanners in 69 out of 70 cases. Tables II and III indicate that we improve code coverage by 63% to 280% compared to individual scanners and by 6% to 62% compared to the sum of all other scanners. Our improved vulnerability detection is evident in Tables IV and V. Not only do we match the findings of other scanners, but we also discover new vulnerabilities in production applications.

In the next section, we will analyze these results in detail and conclude which features contributed to our improved coverage and vulnerability detection. We will also discuss areas where other scanners performed better.

### V. Analysis of Results
The results from the previous section show that our scanner's code coverage surpasses that of other scanners. Additionally, we detect more code injections, particularly stored XSS. In this section, we analyze the factors contributing to our advantage and where other scanners fell short.

#### A. Coverage Analysis
As shown in Section IV-C, Black Widow's code coverage improvement ranges from 5.5% on Drupal to 62% on PrestaShop. Compared to each scanner, Black Widow's improvement ranges from 63.3% against Arachni to 280% against Wget. We analyze the performance of different scanners by dividing the analysis into two categories: cases where we have low coverage and cases where we have high relative coverage.

**Low Coverage:**
- **Drupal:** Enemy of the State outperforms Black Widow on Drupal due to maintaining an authenticated session state. Black Widow lost the session early because it used a heuristic algorithm to select the next edge, and the logout edge was picked early. Additionally, Drupal does not present a login form when unauthorized operations are attempted, preventing re-authentication. Temporarily blacklisting the Drupal logout function in our scanner resulted in similar coverage to Enemy of the State, confirming the issue was session handling.
- **WordPress:** Skipfish performs well on WordPress, which is surprising given its heavy use of JavaScript. However, WordPress degrades gracefully without JavaScript, allowing scanners to find multiple pages. Focusing on static pages can generate large coverage but does not imply high vulnerability detection.

**High Coverage:**
- **osCommerce and HotCRP:** Enemy of the State performs worse on osCommerce and HotCRP due to entering an infinite loop, using 100% CPU without generating any requests. This highlights the importance of efficient state management and resource usage.

#### B. False Positives and Clustering
To understand the reasons behind false positives and to be transparent about our clustering, we analyze the vulnerabilities reported in Table IV. For each scanner with false positives, we reflect on the reasons and required improvements.

- **Arachni:** Reports two reflected XSS vulnerabilities in Vanilla, but the injection point is a Cloudflare cookie never used in the application. Additionally, Arachni finds 31 XSS injections on SCARF, many of which are incorrect due to payload reuse.
- **Enemy of the State:** Claims 8 reflected XSS vulnerabilities on Joomla, but manual analysis shows no code execution. The scanner incorrectly interprets reflected payloads as executed.
- **jÄk:** Reports 13 vulnerabilities on WackoPicko, which are different payloads for the search parameter. Clustering reduces this to one unique vulnerability.
- **Black Widow:** Finds 32 stored vulnerabilities on phpBB, mostly from the configuration panel. Only 3 are unique. Two parameters on PrestaShop are used in the same request, so only one is unique. No false positives were produced.
- **Skipfish:** Claims a stored XSS in WackoPicko's image data parameter, but the injected JavaScript could not execute. Skipfish could inject JavaScript into the guestbook but failed to detect it.
- **ZAP:** Claims 9 reflected XSS injections on osCommerce, all variations of injecting `javascript:alert(1)` into a link parameter. Since it was part of a parameter and not a full URL, the JavaScript never executes.

#### C. What We Find
In this section, we present the XSS injections found by our scanner in different applications and extract important features that enabled their discovery.

- **HotCRP:** Relected XSS in bulk user upload. The admin can upload a file with users, and the filename is reflected on the upload page. Finding this requires complex workflow traversal and handling file parameters.
- **osCommerce:** Stored and reflected XSS. Admins can change tax classes, and two parameters are not correctly filtered, resulting in stored XSS. The main challenge was finding the injection point, requiring interaction with a navigation bar using JavaScript.
- **phpBB:** Multiple stored XSS in the admin backend. Admins can change various settings, resulting in 32 vulnerable parameters, which cluster to 3 unique ones. Requires inter-state dependency analysis.
- **PrestaShop:** Reflected XSS in the admin dashboard. Parameters in the date range form for statistics are not correctly filtered. Finding this requires modeling JavaScript events and handling workflows.
- **SCARF:** Stored XSS in comments. Many vulnerabilities are easy to find, but one requires complex workflows and inter-state dependency analysis.
- **Vanilla:** Stored and reflected XSS. The language tag for the RSS feed and a stored vulnerability in the comment section require inter-state dependency analysis.
- **WackoPicko:** Multi-step stored XSS. We found all known XSS vulnerabilities except one requiring Flash. The multi-step XSS vulnerability was detected thanks to inter-state dependency tracking and workflow handling.
- **WordPress:** Stored and reflected XSS. The admin can search for nearby events, and the search query is reflected via AJAX. Posting comments from the admin panel allows JavaScript to run on posts.

#### D. Case Studies
We present two in-depth case studies of vulnerabilities that highlight how and why our approach finds vulnerabilities that other scanners do not. We base our analysis on server-side traces and source code.

1. **Comments on WackoPicko:**
   - **Challenge:** Multistep XSS vulnerability requiring specific workflow reproduction. After submitting a comment, the user must review it. If the user navigates away before adding or deleting the comment, the review form is removed, and the comment must be resubmitted.
   - **Steps:** Find an image to comment on, post a comment, accept the comment while reviewing.
   - **Other Scanners:** Enemy of the State and Arachni posted comments but could not exploit the vulnerability. jÄk and ZAP had issues with the login form, while w3af and Skipfish could not post the comment. Black Widow overcomes these challenges by using a modern browser to parse the webpage and handling the textarea correctly.

2. **Configuration on phpBB:**
   - **Challenge:** Multiple code injection possibilities in the configuration panel. Requires two logins and inter-state dependency analysis.
   - **Steps:** Log in as admin, find the vulnerable form, update the database, and find the reflection.
   - **Other Scanners:** None managed to access the configuration panel due to double login requirements. Black Widow solves this by being consistent with submitted values, allowing both user and admin authentication.

#### E. Features Attribution
We identify and attribute the key features that contributed to finding the vulnerabilities in web applications. Table VIII shows the 25 unique code injections from the evaluation. Modeling contributed to 4, workflow traversal to 9, and inter-state dependency analysis to 13. In total, at least one of these features was a contributor in 16 unique injections. The remaining 9 were simpler, with direct reflections in WackoPicko, SCARF, and osCommerce. It is clear that modeling, workflow traversal, and inter-state dependency analysis play a crucial role in detecting stored XSS vulnerabilities.