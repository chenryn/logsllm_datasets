poly(λ).
◦ Correctness: For any string x ∈ {0, 1}n:
D(([f ]i,x[i])i∈[1,n]) = f (x)
with overwhelming probability if n = poly(λ).
◦ Privacy: There exists a probabilistic polynomial time sim-
ulator S s.t. for any family of strings {xλ}λ∈N and circuits
{fλ : {0, 1}nλ → {0, 1}kλ}λ∈N with |xλ| = nλ, |fλ| = sλ:
S(1λ, nλ, sλ, fλ(xλ)) ≡c ([fλ]i,xλ[i] : i ∈ [1, nλ]),
where E(f, 1λ) → ([f ]i,b : i ∈ [1, n], b ∈ {0, 1}) and Xn ≡c
Yn denotes that for any polynomial size (non-uniform) cir-
cuit family An, | Pr[An(Xn) = 1] − Pr[An(Yn) = 1]| is neg-
ligible in λ if nλ, kλ, sλ = poly(λ).
Such an encoding is possible for circuits with information
theoretic privacy with O(|g|2d) expansion where d is the
depth of the evaluating circuit [9, 12]. With one way func-
tions, it is possible with expansion O(λ|g|) [20, 2] to encode
any polynomial time function against p.p.t. adversaries (by
applying garbled circuits to universal circuits2).
Notice that randomized encodings, by virtue of Privacy,
satisfy a notion of Indistinguishability (by the transitiv-
ity of computational indistinguishability). Informally, this
implies that if f0 and f1 are circuits of the same (polynomi-
ally bounded) size with f0(x) = f1(x), ([fz]i,x[i] : i ∈ [1,|x|])
for z ∈ {0, 1} are indistinguishable to polynomial size dis-
tinguishing circuits.
3. WORRY-FREE ENCRYPTION
We now will deﬁne the concept of Worry-Free Encryption
along with the security guarantees placed on it.
2Not that in most implementations it is unnecessary to con-
sider full universal circuits.
In the ‘Submarines’ example
given previously it would have been suﬃcient to instead take
C a circuit which takes policies and attributes as inputs.
Definition 3.1. A Worry-Free Encryption scheme is a
public key encryption scheme with credential authorization.
It consists of six algorithms: Setup, Pre, Auth, CheckAuth,
Enc, Dec with the following functionalities:
• Setup(1λ) → (P P, M SK) The setup to generate public
parameters and master secret key.
• Pre(x, P P ) → (Σ, SK) The preprocessing stage per-
formed by the user with credentials x ∈ {0, 1}n.
• Auth(Σ, x, M SK) → P Kx The authorization stage per-
formed by the CA which takes as input the user’s pre-
processing information Σ and credentials x (which are
veriﬁed out of the model) and outputs the public key
P Kx (note x is not a part of P Kx and will be hidden).
• CheckAuth(P Kx, Σ, x, P P ) This step will output ⊥ iﬀ
the returned public key P Kx is incompatible with the
preprocessing Σ. If the Auth step was performed cor-
rectly, it will always accept.
• Enc(f, P Kx, P P ) → C Encrypts under P Kx, the cir-
cuit f : {0, 1}n → {0, 1}k.
• Dec(Enc(f, P Kx, P P ), SKx, P P ) → f (x).
For our construction we will assume n is ﬁxed on setup.
Much like usual notions of encryption reveal the length of
the message, across our security deﬁnitions we will assume
that for two encryptions to be indistinguishable they must
be encryptions of circuits of the same size with the same
number of output bits. However, by padding, notice that
one can easily make smaller circuits encrypted in a way that
is indistinguishable from larger circuits. For simplicity, we
will also assume for our construction that ‘k(cid:48), the output
size, is ﬁxed on setup – but note that this assumption is
only for notational simplicity, and is not needed for security.
3.1 Security Deﬁnitions
If at any point in the security games, a functionality re-
turns ⊥, the experiment will terminate and return ⊥. The
ﬁrst security requirement will be made concerning the func-
tion f . A scheme W is Message Secure if for any p.p.t.
A1, A2, A3, the probability the experiment below outputs 1
is less than 1/2 plus a negligible factor:
MessageSecureA1,A2,A3 (1λ) :
W.Setup(1λ) → (P P, M SK),
A1(1λ, P P ) → (x, σ1),
W.P re(x, P P ) → (Σ, SK),
W.Auth(Σ, x, M SK) → P Kx,
A2(P Kx, σ1) → (f0, f1, σ2),
Return 0 unless |f0| = |f1|,
z $←− {0, 1} , W.Enc(fz, P Kx, P P ) → C,
A3(C, σ2) → g,
Return 1 iﬀ g = z.
The second requirement is that a receiver with credentials
x can only learn f (x) and |f| from an encryption of f . W
is Function Hiding if for any p.p.t. A1, A2, A3, the prob-
ability the below experiment outputs 1 is less than 1/2 plus
a negligible factor:
465FunctionHidingA1,A2,A3 (1λ) :
W.Setup(1λ) → (P P, M SK),
A1(1λ, P P ) → (Σ, x, σ1),
W.Auth(Σ, x, M SK) → P Kx,
A2(P Kx, σ1) → (f0, f1, σ2),
Return 0 unless |f0| = |f1| ∧ f0(x) = f1(x),
z $←− {0, 1},W.Enc(fz, P Kx, P P ) → C,
A3(C, σ2) → g,
Return 1 iﬀ g = z.
We will say a Worry-Free Encryption scheme has hidden cre-
dentials if P Kx leaks no information about x. Since the CA
must have access to the user’s credentials, this guarantee can
only hold if the CA is honest. W has Hidden Credentials
if for any p.p.t. A1, A2 the probability the below experiment
outputs 1 is less than 1/2 plus a negligible factor:
HiddenCredentialsA1,A2 (1λ) :
W.Setup(1λ) → (P P, M SK),
1 (1λ, P P ) → (x0, x1, σ),
AO
Return 0 unless |x0| = |x1|,
z $←− {0, 1},W.P re(xz, P P ) → (Σ, SK),
W.Auth(Σ, xz, M SK) → P Kxz ,
2 (P Kxz , σ) → g,
AO
Return 1 iﬀ g = z.
where A1, A2 have oracle access to:
O(y) :W.P re(y, P P ) → (Σy, SKy),
Return (W.Auth(Σy, y, M SK) = P Ky).
A major departure from previous schemes is that by assum-
ing the public key infrastructure, we will actually be able
to guarantee full security against the certiﬁcation author-
ity. W is Malicious Authority Secure if for any p.p.t.
A1, A2, A3, A4 the probability the scheme below outputs 1
is less than 1/2 plus a negligible factor:
MaliciousAuthorityA1,A2,A3,A4 (1λ) :
Return 0,
A1(1λ) → (x, P P, σ1),
W.P re(x, P P ) → (Σ, SK),
A2(Σ, σ1) → (P K, σ2),
If W.CheckAuth(P K, Σ, x, P P ) =⊥
A3(σ2) → (f0, f1, σ3),
Return 0 unless |f0| = |f1|,
z $←− {0, 1},W.Enc(fz, P Kx, P P ) → C,
A4(C, σ3) → g,
Return 1 iﬀ g = z.
Note that our security models do make the assumption that
honest users use the public key output by the central author-
ity to encrypt. This will be where the (P P, M SK) pair will
be useful since we will be able to have the central authority
sign all issued public keys using the signing key M SK to be
veriﬁed under the veriﬁcation key P P . Note that this signa-
ture step could be omitted if some other way of assuring the
validity of public keys was present (such as a secure database
that the CA uses to store the public keys). For simplicity
we will assume all functions output by the adversary are in
the function space accepted by the encryption scheme in our
analysis.
3.2 Intuition Behind the Construction
The basic intuition for the construction follows: For each
i ∈ [1, n] the user will generate a public, secret key pair
corresponding to 0 or 1 according to the bit of his cre-
dentials at the index i (in other words, the user generates
P Ki,x[i], SKi,x[i] for each i) and sends the corresponding
public keys to the CA who will then ﬁll in the blanks in
the table (P Ki,b : i ∈ [1, n], b ∈ {0, 1}) to mask the user’s
credentials in the public key. Then an encrypter will gen-
erate an encoding of the circuit to be sent and encrypt
each component [f ]i,b under P Ki,b. This will guarantee
that the user can only decrypt at indices which match the
value of his credentials at this index, giving him access to
([f ]i,x[i] : i ∈ [1, n]) allowing the user to reconstruct f (x).
However, the above construction has a weakness, assume
that the central authority stored (SKi,x[i] : i ∈ [1, n]) cor-
responding to indices of the public key which the CA gen-
erated. Then, the authority would be able to decrypt a
ciphertext sent to the user in all indices (i, x[i]), allowing
him to recover ([f ]i,x[i] : i ∈ [1, n]) and reconstruct f (x).
To ﬁx this, the user will generate an additional key pair,
(P Kn+1,0 SKn+1,0) not related to the user’s credentials.
The CA will then ﬁll out the table for all indices up to n.
For example, if n = 3 , the public key3 would be:
(cid:18) P K1,0 P K2,0 P K3,0 P K4,0
(cid:19)
P K =
P K1,1 P K2,1 P K3,1
.
Now, the encrypter will modify its message function f :
Instead of encoding f , he will
{0, 1}n → {0, 1}k slightly.
encode f(cid:48) : {0, 1}n+1 → {0, 1}k deﬁned as:
(cid:48)
(x ◦ 0) = f (x) , f
(cid:48)
(x ◦ 1) = 0k
f
and decompose it as ([f(cid:48)]i,b : i ∈ [1, n + 1], b ∈ {0, 1}).
For each index of the public key, the encrypter will now
encrypt [f(cid:48)]i,b under P Ki,b discarding [f(cid:48)]n+1,1 entirely. This
guarantees that only the user has access to a full n + 1 tuple.
Since we will use the transformation above frequently,
for a ﬁxed circuit f : {0, 1}n → {0, 1}k we will denote f(cid:48) :
{0, 1}n+1 → {0, 1}k the transformed circuit above and,
Tλ(f ) → ([f
(cid:48)
]i,b : i ∈ [1, n + 1], b ∈ {0, 1})
the whole transformation. Furthermore, we will assume f
is only used as a black box in constructing f(cid:48) which will
guarantee f(cid:48) is constructed in such a way that only adds a
ﬁxed size to the circuit. Therefore we may assume |f0| =
|f1| ⇒ |f(cid:48)
0| = |f(cid:48)
1|.
Deﬁne two sets corresponding to all indices of a public
key and the indices the user with credentials x generated:
I = {(i, b) : i ∈ [1, n], b ∈ {0, 1}} ∪ {(n + 1, 0)},
Jx = {(i, x[i]) : i ∈ [1, n]} ∪ {(n + 1, 0)}.
3Recall that n does not correlate to any level of security,
only the underlying access structure. An n = 1 is enough to
express an ‘Authorized’ - ‘Not-Authorized’ access structure.
4663.3 The Construction
We will now give our ﬁrst Worry-Free Encryption scheme
using an IND-CPA secure public-key encryption scheme E =
(KeyGen, Enc, Dec), an existentially-unforgeable signature
scheme S = (KeyGen, Sign, V er) and a decomposable ran-
domized encoding (E, D). Let L(λ) be a polynomial upper
bound on the credential size and the circuit size to be en-
crypted. If a check fails the functionality will return ⊥.
All functionalities for each of our schemes will expect x ∈
{0, 1}n and f : {0, 1}n → {0, 1}k where n and k are ﬁxed on
setup and return ⊥ if this is not the case for an input. For
notational convenience we will label the indices of a matrix
in Mn×2 as ((i, b) : i ∈ [1, n], b ∈ {0, 1}).
◦ Setup(1λ):
S.KeyGen(1λ) → (V K, SignK),
Return (P P, M SK) = (V K, SignK).
◦ Pre(x, P P ):
For (i, b) ∈ Jx,E.KeyGen(1λ) → (P Ki,b, SKi,b),
Set Σ = (P Ki,b : (i, b) ∈ Jx) ∈ Mn+1×2,
Set (cid:126)SK = (SKi,b : (i, b) ∈ Jx),
Return (Σ, (cid:126)SK).
◦ Auth(Σ = (P Ki,b : (i, b) ∈ Jx), x, M SK):
Check only Jx indices in Σ are not null,
For (i, b) ∈ I \ Jx, E.KeyGen(1λ) → (P Ki,b, SKi,b),
Set (cid:126)P K = (P Ki,b : (i, b) ∈ I),
S.Sign( (cid:126)P K, SignK) → σ,
Return ( (cid:126)P K, σ).
◦ CheckAuth(( (cid:126)P K, σ), Σ, x, P P ):
Check (cid:126)P K ∈ Mn+1×2 with (n + 1, 1) index null,
Check S.V erV K (σ, (cid:126)P K) = True,
For (i, b) ∈ Jx check (cid:126)P K’s (i, b) entry is P Ki,b from Σ.
◦ Enc(f, ( (cid:126)P K, σ), P P ):
Check S.V erV K (σ, (cid:126)P K) = True,
Tλ(f ) → ([f(cid:48)]i,b : i ∈ [1, n + 1], b ∈ {0, 1}),
For (i, b) ∈ I, E.EncP Ki,b ([f(cid:48)]i,b) → Ci,b,