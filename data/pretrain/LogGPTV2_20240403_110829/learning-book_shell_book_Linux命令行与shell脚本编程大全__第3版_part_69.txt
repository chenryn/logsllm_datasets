Thla is the second added line.
中的占位文本。举例来说，假定你有一份套用信件保存在文本文件中：
Would the following people:
S cat notice.std
please report to the ship ′α captain.
LIST
19
套用信件将通用占位文本LIST效在人物名单的位置。要在占位文本后插人名单，只需读取
命令就行了。但这样的话，占位文本仍然会留在输出中。要删除占位文本的话，你可以用删除命
令。结果如下：
S sed ·/LIsr/{
> r datall.txt
>}' notice.std
d
Would the following people:
B1um, R
McGuiness, A
A11lance
Browncoat
Bresnahan, C
A11lance
Browmcoat
please report to the ship′α captain.
*uexxeH
现在占位文本已经被替换成了数据文件中的名单。
19.3小结
虽然shell脚本本身完成很多事情，但单凭shell脚本通常很难处理数据。Linux提供了两个方便
的工具来帮助处理文本数据。作为一款流编辑器，sed编辑器能在读取数据时快速地自动处理数
据。必须给sed编辑器提供用于处理数据的编辑命令。
gawk程序是一个来自GNU组织的工具，它模仿并扩展了Unix中awk程序的功能。gawk程序内
建了编程语言，可用来编写处理数据的脚本。你可以用gawk程序从大型数据文件中提取数据元素，
并将它们按照需要的格式输出。这非常便于处理大型日志文件以及从数据文件中生成定制报表。
使用sed和gawk程序的关键在于了解如何使用正则表达式。正则表达式是为提取和处理文本
文件中数据创建定制过滤器的关键。下一章将会深入经常被人们误解的正则表达式世界，并演示
如何构建正则表达式来操作各种类型的数据。
---
## Page 439
20
第20章
正则表达式
本章内容
口定义正则表达式
口正则表达式基础
口扩展正则表达式
口创建正则表达式
绍如何在sed编辑器和gawk程序中创建正则表达式来过滤出需要的数据。
20.1什么是正则表达式
理解正则表达式的第一步在于弄清它们到底是什么。本节将会解释什么是正则表达式并介绍
Linux如何使用正则表达式。
20.1.1定义
正则表达式是你所定义的模式模板（pattern template）.Linux工具可以用它来过滤文本。Linux
工具（比如sed编辑器或gawk程序）能够在处理数据时使用正则表达式对数据进行模式匹配。如
果数据匹配模式，它就会被接受并进一步处理：如果数据不匹配模式，它就会被滤掉。图20-1描
述了这个过程。
---
## Page 440
20.1
什么是正则表达式
425
数据流
匹配的数据
正则表达式
滤掉的数据
图20-1使用正则表达式模式匹配数据
正则表达式模式利用通配符来描述数据流中的一个或多个字符。Linux中有很多场景都可以
使用通配符来描述不确定的数据。你已经看到过在Linux的1s命令中使用通配符列出文件和目录
的例子（参见第3章）。
星号通配符允许你只列出满足特定条件的文件，例如：
20
$ ls -al da*
===-
1r1ch
rich
45 Nov 26 12:42 data
r-r--r--
1 r1ch
rich
25 Dec 4 12:40 data.tst
===-
1r1ch
rich
180 Nov 26 12:42 datal
=,===M=
1r1ch
rich
45 3ov 26 12:44 data2
===-
1r1ch
rich
73 Nov 27 12:31 data3
===-
1r1ch
rich
79 Nov 28 14:01 data4
-===*
1r1ch
rich
187 Dec  4 09:45 datatest
da*参数会让ls命令只列出名字以da开头的文件。文件名中da之后可以有任意多个字符（包
括什么也没有）。1s命令会读取目录中所有文件的信息，但只显示跟通配符匹配的文件的信息。
正则表达式通配符模式的工作原理与之类似。正则表达式模式含有文本或特殊字符，为sed
编辑器和gawk程序定义了一个匹配数据时采用的模板。可以在正则表达式中使用不同的特殊字符
来定义特定的数据过滤模式。
20.1.2正则表达式的类型
使用正则表达式最大的问题在于有不止一种类型的正则表达式。Linux中的不同应用程序可
能会用不同类型的正则表达式。这其中包括编程语言（Java、Perl和Python）、Linux实用工具（比
如sed编辑器、gawk程序和grep工具）以及主流应用（比如MySQL和PostgreSQL数据库服务器）。
正则表达式是通过正则表达式引擎（regular expression engine）实现的。正则表达式引擎是
一套底层软件，负责解释正则表达式模式并使用这些模式进行文本匹配。
在Linux中，有两种流行的正则表达式引擎：
---
## Page 441
426
第20章正则表达式
 POSIX基础正则表达式（basic regular expression，BRE）引擎
 POSIX扩展正则表达式(extended regular expression,ERE）引擎
大多数Linux工具都至少符合POSIXBRE引擎规范，能够识别该规范定义的所有模式符号。
遗憾的是，有些工具（比如sed编辑器）只符合了BRE引擎规范的子集。这是出于速度方面的考
虑导致的，因为sed编辑器希望能尽可能快地处理数据流中的文本。
POSIXBRE引擎通常出现在依赖正则表达式进行文本过滤的编程语言中。它为常见模式提供
了高级模式符号和特殊符号，比如匹配数字、单词以及按字母排序的字符。gawk程序用ERE引擎
来处理它的正则表达式模式。
由于实现正则表达式的方法太多，很难用一个简洁的描述来涵盖所有可能的正则表达式。后
续几节将会讨论最常见的正则表达式，并演示如何在sed编辑器和gawk程序中使用它们。
20.2定义BRE模式
最基本的BRE模式是匹配数据流中的文本字符。本节将会演示如何在正则表达式中定义文本
以及会得到什么样的结果。
20.2.1纯文本
第18章演示了如何在sed编辑器和gawk程序中用标准文本字符串来过滤数据。通过下面的例
子来复习一。
$ echo *Thie is a test* 1 sed -n */test/p*
$ echo *This is a test* l sed -n */trial/p*
This is a test
$ echo *This is a test* I gawk */test/(print $0)*
This is a test
$ echo *This is a test* l gawk */trial/(print $0)*
第一个模式定义了一个单词test。sed编辑器和gawk程序脚本用它们各自的print命令打印出
匹配该正则表达式模式的所有行。由于echo语句在文本字符申中包含了单词test，数据流文本能
够匹配所定义的正则表达式模式，因此sed编辑器显示了该行。
第二个模式也定义了一个单词，这次是trial。因为echo语句文本字符串没包含该单词，所以
正则表达式模式没有匹配，因此sed编辑器和gawk程序都没打印该行。
你可能注意到了，正则表达式并不关心模式在数据流中的位置。它也不关心模式出现了多少
次。一旦正则表达式匹配了文本字符串中任意位置上的模式，它就会将该字符申传回Limux工具。
关键在于将正则表达式模式匹配到数据流文本上。重要的是记住正则表达式对匹配的模式非
常挑剔。第一条原则就是：正则表达式模式都区分大小写。这意味着它们只会匹配大小写也相符
的模式。
,d/atqa/. u- paa 1 -qaa e 2t atu. ouoa $
---
## Page 442
20.2定义BRE模式
427
,d/sru/. u- pos 1 ,area e ef su. ouos 5
Thla is a test
第一次尝试没能匹配成功，因为this在字符串中并不都是小写，而第二次尝试在模式中使
用大写字母，所以能正常工作。
在正则表达式中，你不用写出整个单词。只要定义的文本出现在数据流中，正则表达式就能
够匹配。
dl/oog/ , u- pes 1 ,onfsuedxo 8.xe sxooq ouL, ooo $
The booke are expenaive
尽管数据流中的文本是books，但数据中含有正则表达式book，因此正则表达式模式跟数据
匹配。当然，反之正则表达式就不成立了。
 d/sxooq/, u-pes1,9trudxe 8Txoq ou。 ouos $
完整的正则表达式文本并未在数据流中出现，因此匹配失败，sed编辑器不会显示任何文本。
20
你也不用局限于在正则表达式中只用单个文本单词，可以在正则表达式中使用空格和数字。
d/t toq/, u- pes 1 -t xoqmu euTt 8T sTu, oos $
Thls ia 1ine nunber 1
在正则表达式中，空格和其他的字符并没有什么区别。
,d/ xo/, u- pes 1 -xeqm eut BT sul. ouoo s
如果你在正则表达式中定义了空格，那么它必须出现在数据流中。甚至可以创建匹配多个连
续空格的正则表达式模式。
Thia ia a normal line of text.
$ cat datal
Thls iaa 1ine with too mary spaces.
S sed -n */  /p' datal
This 1a a 1ine vith too mary spaces.
单词间有两个空格的行匹配正则表达式模式。这是用来查看文本文件中空格问题的好办法。
20.2.2特殊字符
在正则表达式模式中使用文本字符时，有些事情值得注意。在正则表达式中定义文本字符时
有一些特例。有些字符在正则表达式中有特别的含义。如果要在文本模式中使用这些字符，结果
会超出你的意料。
正则表达式识别的特殊字符包括：
 *[1~$()+ 71()
---
## Page 443
428
第20章正则表达式
随着本章内容的继续，你会了解到这些特殊字符在正则表达式中有何用处。不过现在只要记
住不能在文本模式中单独使用这些字符就行了。
如果要用某个特殊字符作为文本字符，就必须转义。在转义特殊字符时，你需要在它前面加
一个特殊字符来告诉正则表达式引擎应该将接下来的字符当作普通的文本字符。这个特殊字符就
是反斜线（\）
举个例子，如果要查找文本中的美元符，只要在它前面加个反斜线。
$ cat data2
The cost is $4.00
$ sed -n */\$/p* data2
The cost is $4.00
由于反斜线是特殊字符，如果要在正则表达式模式中使用它，你必须对其转义，这样就产生
了两个反斜线。
$ echo *\ is a special character* l sed -n */\\/p*
\is a epecial character
最终，尽管正斜线不是正则表达式的特殊字符，但如果它出现在sed编辑器或gawk程序的正
则表达式中，你就会得到一个错误。
$ echo *3 / 2- 1 sed -n *///p*
sed1 -e expression +1, char 2: No previous regular expression
要使用正斜线，也需要进行转义。
$ echo *3 / 2* 1 sed -n */\//p*
3/2
s7
现在sed编辑器能正确解释正则表达式模式了，一切都很顺利。
20.2.3锚字符
如20.2.1节所述，默认情况下，当指定一个正则表达式模式时，只要模式出现在数据流中的
任何地方，它就能匹配。有两个特殊字符可以用来将模式锁定在数据流中的行首或行尾。
1.锁定在行首
脱字符（~）定义从数据流中文本行的行首开始的模式。如果模式出现在行首之外的位置，
正则表达式模式则无法匹配。
要用脱字符，就必须将它放在正则表达式中指定的模式前面。
$ echo *The book store* 1 sed -n */ book/p*
$ echo *Books are great* 1 Bed -n */ Book/p*
159.16 010 2x00g
---
## Page 444
20.2定义BRE模式
429
脱字符会在每个由换行符决定的新数据行的行首检查模式
Thia ia a test line.
$ cat data3
thia ia another test llne.
A line that testa thia feature.
Yet more teating of thla
$ sed -n */this/p' Gata3
thia ia another teat line.
只要模式出现在新行的行首，脱字符就能够发现它。
如果你将脱字符放到模式开头之外的其他位置，那么它就跟普通字符一样，不再是特殊字符了：
d/. s/, u- pes 1 ,ieoa e BT  sul. ouos 5
Thla ^ la a test
由于脱字符出现在正则表达式模式的尾部，sed编辑器会将它当作普通字符来匹配。
说明如果指定正则表达式模式时只用了脱字符，就不需要用反斜线来转义。但如果你在模式
中先指定了脱字符，随后还有其他一些文本，那么你必须在脱字符前用转义字符
20
2.锁定在行尾
跟在行首查找模式相反的就是在行尾查找。特殊字符美元符（$）定义了行尾锚点。将这个
特殊字符放在文本模式之后来指明数据行必须以该文本模式结尾。
,d/sxooq/, u- pez 1 xooq poo o sT 2TuL。 ouoa s
This is a good book
$ echo *This book is good* 1 sed -n */book$/p*
使用结尾文本模式的问题在于你必须要留意到底要查找什么。
$ echo *There are a lot of good books* l sed -n */book$/p′
将行尾的单词book改成复数形式，就意味着它不再匹配正则表达式模式了，尽管book仍然在
数据流中。要想匹配，文本模式必须是行的最后一部分。
3.组合锚点
在一些常见情况下，可以在同一行中将行首锚点和行尾锚点组合在一起使用。在第一种情况
中，假定你要查找只含有特定文本模式的数据行。
thia is a test of using both anchora
$ cat data4
I said thia la a test
thla ia a test
I'n sure this ia a teat.
$ sed -n */'thie is a teat$/p* data4
thla is a test
---
## Page 445
430第20章正则表达式
sed编辑器忽略了那些不单单包含指定的文本的行。
第二种情况乍一看可能有些怪异，但极其有用。将两个锚点直接组合在一起，之间不加任何
文本，这样过滤出数据流中的空白行。考虑下面这个例子。
This is one test line.
$ cat data5
This is another test line.
$ sed */′$/d* data5
This is one test line.
This is another test line.
定义的正则表达式模式会查找行首和行尾之间什么都没有的那些行。由于空白行在两个换行
符之间没有文本，刚好匹配了正则表达式模式。sed编辑器用删除命令a来删除匹配该正则表达式
模式的行，因此删除了文本中的所有空白行。这是从文档中删除空白行的有效方法。
20.2.4点号字符
特殊字符点号用来匹配除换行符之外的任意单个字符。它必须匹配一个字符，如果在点号字
符的位置没有字符，那么模式就不成立。
来看一些在正则表达式模式中使用点号字符的例子。
$ cat data6
This is a test of a line.
The cat is sleeping.