//(（void(*)(void))heap_buff)();
编译命令分别如下。
---
## Page 394
CTF特训营：技术详解、解题方法与
12.2.2覆盖找缓冲区的具体用途
394/1144
开启Nx：gcc-oproc_nxproc.c;proc_nx程序执行后直接异常报
错退出。
关闭Nx:gcc-oprocproc.c-zexecstack；proc程序执行后直接获
取shell。
下面用gdb调试，分别查看内存状态。
proc_nx的内存状态如图12-9所示。
End
Pern
/tmp/proc_nx
Name
0x00400000
0x00401000
r-xp
0600000
9601008
0x00601000
x00682006
r--p
/tmp/proc_nx
/tmp/proc_nx
0x00602008
8x00623060
rw-p
[heap]
x06007f
16006
f7bdo000
r-xp
/ltb/x86_64-ltnux-gnu/ltbc-2.19.so
07ffff7dcfoeo
ee7ffff7dcfeee 0x0oo87ffff7dd38e0
/lib/x86_64-linux-gnu/ltbc-2.19.so
f7dd3000
8x80e87ffff7dd5800
rw-p
/ltb/x86_64-ltnux-gnu/ltbc-2.19.so
x0eo07ffff7dda0o0
0x00o07ffff7dfdo00
r-
xp
/ltb/x86_64-linux-gnu/ld-2.19.so
8xoooe7ffff7fdfee0
rw-p
napped
9e7ffff7ff8oo0
8x0oo87ffff7ffa8e0
P
[vdso]
7ffa0o0
f7ffcooo
/ltb/x86_64-linux-gnu/ld-2.19.so
[vvar]
8
rW
-P
/ltb/x86_64-1Lnux-gnu/ld-2.19.so
rw-p
[stack]
napped
[vsyscall]
图12-9开启NX的程序内存布局
proc的内存状态如图12-10所示。
---
## Page 395
CTF特训营：技术详解、解题方法与
12.2.2覆盖找缓冲区的具体用途
395/1144
tart
End
Pern
Nane
x00401008
/tnp/proc
0x00600000
0x00601000
r-xp
/tnp/proc
0601606
8x00602006
rwxp
/tmp/proc
/ltb/x86_64-linux-gnu/ltbc-2.19.so
0x00o07ffff7dcfo00
x00007f
f7bdooeo
0x00007ffff7dd3000
ff7dcfooo
-p
/ltb/x86_64-linux-gnu/libc-2.19.so
/ltb/x86_64-ltnux-gnu/ltbc-2.19.so
r-xp
rWxp
ltb/
x86 64-1Lnu)
gnu/1tbc-2.19.50
xo0oo7ffff7dda000
0x00oo7ffff7dfdo00
r-xp
/ltb/x86_64-1tnux-gnu/ld-2.19.so
fdf6ee
FWxp
s87ffff7ff8666
0x00oo7ffff7ffa0oo
r-xp
[vdso]
o7ffff7ffdooo
fr7ffcooe
/lib/x86_64-1inux-gnu/ld-2.19.so
[vvar]
00
x0
r-xp
/ltb/x86_64-11nux-gnu/1d-2.19.so
napped
stack]
[vsyscall]
图12-10关闭NX的程序内存布局
可以看到，关闭了NX之后，很多新加载的内存段都默认变成了
可执行段，尤其是栈、数据段、堆等部分。
栈保护哨（canary）主要是存放在函数栈靠近底部位置的一个临
时变量中，防止栈缓冲区覆盖存放在栈底的栈底寄存器（bp）和返
回地址（ip），如图12-11所示。
---
## Page 396
CTF特训营：技术详解、解题方法与
12.2.2覆盖找缓冲区的具体用途
395/1144
End
8x00401000
Pern
Nane
0x00600000
0x00601000
r-xp
/tap/proc
/tmp/proc
681006
rwxp
/tmp/proc
087ffff7a160e8 6
0x00067ffff7bd0600r-xp
/ltb/x86_64-1tnux-gnu/ltbc-2.19.so
/ltb/x86_64-ltnux-gnu/ltbc-2.19.so
Dx00o87ffff7dcfo00
0x00007ffff7dd3000
ff7dcfooo
r-xp
-p
/lib/x86_64-linux-gnu/libc-2.19.so
nu/1tbc-2.19.s0
0087ffff7dda000
0x00o07ffff7dfdoo0
r-xp
/ltb/x86_64-ltnux-gnu/ld-2.19.so
nappe
s67ffff7ff8668
0x00oo7ffff7ffa008
r-xp
[vdso]
-p
[vvar]
7fFFf7ffc000
x0
07ffff7ffd000
/lib/x86_64-1inux-gnu/ld-2.19.so
/ltb/x86_64-1Lnux-gnu/ld-2.19.so
iapped
stack]
[vsyscall]
图12-10关闭NX的程序内存布局
可以看到，关闭了NX之后，很多新加载的内存段都默认变成了
可执行段，尤其是栈、数据段、堆等部分
栈保护哨（canary）主要是存放在函数栈靠近底部位置的一个临
时变量中，防止栈缓冲区覆盖存放在栈底的栈底寄存器（bp）和返
回地址（ip），如图12-11所示。
---
## Page 397
CTF特训营：技术详解、解题方法与
12.2.2要盖找缓冲区的具体用途
397/1144
护功能默认是开启的。
示例代码如下：
#include
intmain()
{
char stack_buff[0x10];
gets(stack_buff);
printf(%sln",stack_buff);
编译命令分别如下。
关闭canary:
gcc-o proc_canary sample_canary.c
开启canary：
gcc-o proc sample.c-fno-stack-protector
proc_canary的反汇编结果如图12-12所示。
---
## Page 398
CTF特训营：技术详解、解题方法与
12.2.2覆盖找缓冲区的具体用途
398/1144
text:00000000064805F6
text:onaer
ehaeSF6 ; int
public nain
.text:000e0a000e4a05F6
nain
proc near
：DATA xREF:_start+1Dfe
.text:000e0a000e4a05F6
.text:00oeeaeooe4a05F6
-byte ptr -20h
.text:000e00000e4005F6
canary
quord ptr
20040000000000:x0
text:00ae0a00ae4a05F6
push
rbp
text:000e00000e4005FA
sub.
no
rsp.20h
rbp.
rsp
text:00ae0a00ae4a05FE
nou
text:000e000000400607
nou
[rbp+canary], rax
set canary
text:000000000040060B
.text:00ae0a00ae4a8500
lea
xor
eax, eax
rax,[rbp+buff]
.text:000e000084a8611
nou
rdi,rax
.text:000e000000400614
call
text:00ae0a00ae4a8519
lea
rax,[rbp+buff]
_gets
text:000e0a000e4a861D
nou
rdi,rax
.text:000e00000e400620
cal1
text:080e0a088e488525
nou
rdx,[rbp+canary]
_puts
.text:000e0a000e400632
.text:000e0000ae400629
xor
short 1ocret_ho0639
rdx,fs:28h
check canary
text:088e080086488634
Jz
call
stack_chk_fail
.text:000e00000e4a0539
canary changed
.text:00ae0a000e4a0539
text:088e08008eh88639 1ocret_400639:
; CODE XREF: nain+3c↑j
.text:00ae0a000e40063A
.text:000e00000e400539
leave
.text:000e08000040063A nain
retn
endp
图12-12
带有canary的程序反汇编实例
proc的反汇编结果如图12-13所示。
.text:eeeoeeeeaae586 :int _cdecl nain（int argc,const char **argu, const char **enup)
nain
public nain
.text:0e0000e008400586
proc near
: DATA XREF: _start+10T0
.text:0ee00eee004e0586
.text:0e0000e0084e0586 s
=byte ptr -10h
.text:0000800088400586
.text:0e0000e0004e0586
push
rbp
.text:0000000000400587
.text:0e000ee0004e058A
sub
AOU
lea
rsp,
[s+dq]*xea
10h
.text:0ee000e0004e0592
text:ee00ae00064e058E
.text:0e0000e008400595
nou
cal1
rdi,rax
_.gets
.text:0e0000e00040059A
lea
rax,[rbp+s]
.text:0e0000e00040059E
.text:0ee000ee004e05A1
cal1
nou
rdi,rax
_puts
leave
.text:oeo0oe0004e05A7 nain
retn
endp
图12-13
不带canary的程序反汇编实例
2）函数栈底部存放的返回地址是返回到父函数调用处的下一个
---
## Page 399
CTF特训营：技术详解、解题方法与
12.2.2覆盖找缓冲区的具体用途
399/1144
位置，如果栈缓冲区覆盖了该返回地址，那么函数结束后，将会跳转
到所修改的地址上去，从而劫持控制流，示意如图12-14所示。
局部变量
函数栈
ret
图12-14劫持栈的控制流
测试样例代码如下：
#include
void target_func()
print("Hacked\n");
exit(O);
int main()
char buff[0x10];
gets(buff);
编译命令：
---
## Page 400
CTF特训营：技术详解、解题方法与
12.2.2覆盖找缓冲区的具体用途
400/1144
gcc-ooverwirte_retoverwirte_ret.c-fno-stack-protector
反汇编代码如图12-15所示。
.text:00000000004005C6
public target_func
text:00000000004005c6
target_func
.text:00000000004005c7
.text:00000000004005c6
usnd
rbp
nou
rbp.rsp
.text:0000000000400SCF
.text:0ee00a00a0400sca