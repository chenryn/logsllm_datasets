deﬁnition. Unfortunately, in some cases, the allocation of
auxiliary data structures, such as page table entries, is also
1. ion_system_heap_allocate
TP Path
2. msm_ion_heap_pages_zero
2. alloc_largest_available
3. alloc_buffer_page
...
5. ion_page_pool_alloc_pages
TP Path
for (i = 0; i < num_orders; i++) {
if (size < order_to_size(orders[i]))
1   struct page_info *alloc_largest_available(…,size,…){
2
3
4
5
6
7  }
page = alloc_buffer_page(…,orders[i],...);
continue;
}
FP Path
6. __free_pages
6. msm_ion_heap_high_order_page_zero
TP Path
Figure 7: Key logic for alloc largest available()
5 chains
6. alloc_pages
bad_page
...
dump_mem
memset
6 chains
get_page_from_freelist
...
get_zeroed_page
Figure 6: Call chains of interest for SYSTEM heap type
dependent on the size of requested buﬀer. Speciﬁcally, the
auxiliary data here is the page table entries that are creat-
ed and subsequently zeroed.
In other words, the source
(“size” parameter) indeed propagated to the sink (“zeroing”
operation); the zeroing operation is simply not applied to
the returned buﬀer. Fortunately, by simply looking at the
function names involved in the FP call chain in Figure 5,
it is easy to conclude that this call chain is for allocating
pages to hold page table entries given the term “pmd” (page
middle directory).
According to our evaluation, there do exist true posi-
tive paths that result in zeroed buﬀers. The cases are al-
so shown in Figure 5. Now the question is whether there
still exist unzeroed paths other than the zeroed path. As
stated previously in §4.2.1, we walk backwards along the
true positive call chains and look for branches that may
invoke other memory allocation functions that do not be-
long to any taint call chain. As shown in Figure 5, start-
ing from dma_alloc_from_coherent(), we walk backwards
to its caller dma_alloc_attrs() and enumerate all of its
callees. By looking at the names of the callees, we locate
arm64_swiotlb_alloc_coherent(), which also takes in a
tainted parameter “size”, and appears to be a memory allo-
cation function. We then cross reference the function name
with our taint analysis results. In this case, we ﬁnd no taint
call chains that involve arm64_swiotlb_alloc_coherent(),
which indicates the possibility of a path where the allo-
cated memory is unzeroed. Upon reading the code, we
realize that the code tries to allocate memory through
dma_alloc_from_coherent() ﬁrst, and fall back to ar-
m64_swiotlb_alloc_coherent() only when an error is re-
turned earlier. During our runtime testing on Nexus 6P, we
ﬁnd that dma_alloc_from_coherent() appears to be failing
all the time and therefore we are able to successfully obtain
dirty pages in CMA heap.
SYSTEM heap type. SYSTEM heap is complex and
involves many paths leading to zero operation, a simpliﬁed
call graph is shown in Figure 6. All 5 FP call chains are
introduced by the function __free_pages(), from which an
error branch is eventually triggered which invokes memset().
When we look at the issue closely, it all started from the
function alloc_largest_available(), whose key logic is
depicted in Figure 7. Upon close inspection, there exists a
control dependency (implicit ﬂow) that caused the problem.
The function essentially runs in a loop to identify the closest
round-up of the request memory size in the power of 2, and
use the round-up value to allocate memory. Here the con-
stant array order[i] simply pre-deﬁnes all possible round-up
values. Note that the size parameter (taint source) is com-
pared against the round-up value orders[i], which results
in a control dependency. The variable order[i] itself is not
tainted as it is a read-only constant. When it is passed over
to alloc_buffer_page(), we lose track of the taint. In reali-
ty, order[i] is semantically derived from the taint source size
(round-up of size), however, traditional taint propagation
rules are unable to catch this case. Therefore, we have to
record all function invocations after the control dependency
and report whenever a sink (e.g., memset()) is encountered,
regardless of whether its parameters are tainted (we had to
implicitly assume that all parameters of the sink is tainted).
Of course, in practice, such a coarse-grained control taint
propagation rule is likely going to introduce false positives.
It is inherently a challenge to deal with control taint propa-
gation, as widely acknowledged in previous studies [13]. As
an alternative solution, a developer can resolve the control
taint manually. In this case, since we know orders[i] is es-
sentially derived from the taint source size, one can simply
taint orders[i] directly to avoid the false positives.
Aside from the false positives, we wish to point out
an interesting observation. Figure 6 appears to suggest
that there are multiple paths to zero the allocated buﬀer
and there exists only one path that actually allocates
memory.
Speciﬁcally, both msm_ion_heap_pages_zero()
and msm_ion_heap_high_order_page_zero() are simply ze-
roing a buﬀer without allocating any memory.
On-
ly alloc_pages() is allocating memory (as well as ze-
roing the buﬀer afterwards). Therefore, one may think
whether the buﬀer is zeroed for more than one time.
However, upon a closer look, we realize that two of
the sinks are not really performing the zeroing opera-
tions. Both msm_ion_heap_high_order_page_zero() and
alloc_pages() depend on a ﬂag “GFP ZERO”. Only if it
is set will they zero the buﬀer. In this particular case, the
ﬂag is not set for either function to avoid repeated zeroing
that can waste CPU cycles. It is interesting to see how com-
plex the memory allocation can be and how hard the devel-
opers need to try to ensure security as well as performance.
This once again shows the beneﬁt of a program analysis tool
to help aid the developers to make correct implementation
decisions.
6. CASE STUDY
In this section, we will demonstrate our exploitation of
ION related vulnerabilities on a few latest and representa-
tive Android devices including ﬂagship models from main-
stream manufactures with newest Android system and ker-
nel. It is worth noting that although the vulnerabilities usu-
ally manifest themselves diﬀerently on various devices due
to customization, the underlying cause stems from the same
design and implementation of ION as we outlined earlier.
6.1 DoS against Heaps of Fixed Size
Disable ﬁngerprint authentication service on (mul-
tiple devices). On Nexus 6P, if one occupies enough free
space of “qsecom” heap, which is of CMA type, the de-
vice’s ﬁngerprint authentication functionality will be eﬀec-
tively disabled. When a user tries to unlock the device with
his/her ﬁnger, the system will show an error message “ﬁn-
gerprint hardware is unavailable”. Similar attacks can also
be performed on all Android devices using MSM platform,
including Samsung Galaxy S7 and S6.
Disable audio service (multiple devices). On many
MSM platform Android devices there exists an “audio” heap,
with either CARVEOUT type or CMA type. If we exhaust
this heap’s free memory, the system will be unable to pro-
duce any sound, including ringtones. Aﬀected devices, such
as Nexus 6P and OPPO R7s, will be unable to notify users
or play any music under this attack. The sound playback
is the responsibility of a system service named “mediaserv-
er”, which heavily depends on the “audio” heap as its buﬀer
provider on MSM-based Android devices.
System crash on Huawei Mate 8. Huawei Mate 8 is
shipped with a CARVEOUT heap named “carveout-heap”.
We can request memory buﬀers from it and when we claim
and keep a big enough buﬀer, the device will crash directly.
This CARVEOUT heap has only a ﬁxed size, and is used by
the critical system framebuﬀer service that is responsible for
the screen display and refresh. When we occupy too much
resource in the heap, the critical system service will fail to
work and eventually cause the whole system to crash.
6.2 DoS against Heaps of Unlimited Size
System level DoS (multiple devices). On virtually all
devices, there is a SYSTEM heap usually named “system”.
If we allocate a large enough memory buﬀer (usually around
or more than 1GB) from there, the system will freeze and
many running background services will be killed at the same
time, including music playback service and push notiﬁcation
service.
As mentioned previously in §3.1, SYSTEM heaps will re-
quest new pages from the basic buddy allocator when need-
ed, so the available memory for them is equal to that of
the whole system. Surprisingly, there is one important dif-
ference between allocating memory from the “system” heap
and simply using functions like malloc(): the memory from
the latter will be considered “owned” by the calling process,
whereas the buﬀers from the former is actually allocated and
“owned” by the ION driver; what the requesting process get-
s is only a handle to the buﬀer. Since Android is equipped
with a low memory killer
[2] which is responsible for re-
leasing memory by killing processes when it detects that the
system is currently low on memory, when a process allocates
too much memory via interfaces like malloc(), it will gain a
high priority in the “killing list” since the killer thinks that
it owns too much, the result is that it will be killed soon
and the system will thus recover quickly. However, when al-
locating a large amount of memory from the “system” heap,
the killer will not consider our process as a main memory
holder; instead, it will try to kill other innocent processes
such as the push notiﬁcation service.
6.3 DoS via Protected Memory Access
System crash (multiple MSM platform devices).
There is a CMA heap named “pil” on Nexus 6P and many
other Android devices that use MSM platforms, from which
a program can request memory buﬀers. By trying to ac-
cess the allocated buﬀer, the whole Android operating sys-
tem will crash and the device will reboot immediately. The
name “pil” is short for “peripheral loader”; it is used to load
peripheral devices’ ﬁrmware images when kernel boots. S-
ince it is important to guarantee ﬁrmware images’ integrity,
the memory region of this heap will be protected by Trust-
Zone, which is an SoC security extension providing Trusted
Execution Environment (TEE) for sensitive operations with
physically isolated memory and CPU mode [4]. Thus, any
access to this protected memory region from normal world
will cause the system to raise a protection exception, which
usually leads to a system reboot.
The problem here is that a user can allocate buﬀers from
“pil” heap even though it is never supposed to be exposed to
user space. Unfortunately, as we highlight, the uniﬁed inter-
face of ION grants a program access to virtually all heaps.
In addition, the buﬀer sharing capability allows a program
to further access the allocated buﬀer. Either reset the pro-
tection before the user can access the allocated buﬀers or
simply deny users’ memory requests for “pil” heap can solve
the problem; however, neither is done on the devices.
6.4
Information Leakage
According to our analysis, there exist three diﬀerent type-
s of information leakage vulnerabilities, classiﬁed based on
ION heap types. They are CARVEOUT, CMA and SYS-
TEM CONTIG respectively, all of which do not zero the
buﬀers before returning them to user space. This series of
vulnerabilities can cause sensitive information leakage from
both system and user applications, enabling an attacker to
easily breach user privacy such as getting access to email
content, bank accounts, and passwords.
Camera data leakage on Samsung Galaxy S7.
There exists a CARVEOUT heap named “camera” in Sam-
sung’s newest ﬂagship phone model S7. We can obtain image
data captured by the phone’s camera without any permis-
sion with the following steps:
(1) Open the system “camera” application, or third-party
camera applications which also need to use the system cam-
era hardware. Then capture some images with the applica-
tion, note that it is unnecessary to actually take a picture
— simply seeing the preview on the screen is enough.
(2) Close the camera application and then dump the whole
“camera” heap by having any app allocating buﬀers from
it and read their content, which contains the image data
captured by the system camera, including the previews. We
conﬁrm this by byte-to-byte comparison between the picture
(taken by the camera) and the memory content of the ION
buﬀers.
As shown in Table 1, a CARVEOUT heap will manage a
ﬁxed physically contiguous memory region which is reserved
by kernel at boot time for special purposes (e.g., to sat-
isfy the requirement of certain hardware devices). On S7,
“camera” is such a heap that serves as a data buﬀer used by
the system camera service. The camera device must have
the requirement of physically continuous memory in order
to perform DMA (and possibly other) operations. When
users are running a camera app, the camera device should
be populating the image data into the buﬀer allocated from
the “camera” heap, which will then be released when users
exit the app. Thus, an attacker can now re-allocate buﬀers
from the “camera” heap to obtain the dirty buﬀer.
In our research, this kind of problems for CARVEOUT
heaps widely exist on multiple Android devices, enabling
attackers to steal sensitive data from various system services.
For example, the audio data can be leaked via “audio” heap
on Nexus 6P and many other MSM-based Android devices
in the same way.
Live memory dump of running apps (multiple de-
vices). “Qsecom” heap on Nexus 6P is of CMA type, which
is used mainly by TrustZone related services on MSM plat-
forms. Diﬀerent from CARVEOUT heaps that are used ex-
clusively by certain system services, with the CMA heap we
can obtain various kinds of sensitive information, including
but not limited to Gmail contents, Chase bank transactions
and wi-ﬁ passwords, from “live memory” of running apps.
This is achieved by the following three steps:
(1) Drain free system memory by allocating as much mem-
ory as we can from either normal user space interfaces like
malloc() or ION SYSTEM heaps as shown in §1. Note that
the buﬀer allocation should not cause observable slowdown
to the system to avoid alerting the users.
(2) Run any victim app (e.g., Gmail) normally which will
naturally produce sensitive data in memory.
(3) Dump the content of “qsecom” heap, which will contain
sensitive information as mentioned above.
The root cause is as follows: while both CARVEOUT
heaps and CMA heaps manage some pre-reserved contigu-
ous memory regions dedicated for certain system services,
a major diﬀerence is that CARVEOUT memory regions are
set aside at system boot time and invisible to kernel memo-
ry manager after the system boots; thus no other processes
can reuse these regions — even when they are free — using
normal memory allocation interfaces (e.g., malloc()) oth-
er than ION. Eﬀectively, the CARVEOUT memory is stolen
from the system, which guarantees the availability of memo-
ry buﬀers to the corresponding system service and hardware
device (e.g., camera) In contrast, CMA heaps expose their
reserved memory regions to kernel memory manager (e.g.,
Linux buddy allocator) and thus allow other processes to u-
tilize these regions through standard interfaces such as mal-
loc(), when there is no suﬃcient memory that can be found
elsewhere (attack step 1 ensures this condition). However,
to allow system services to function, the memory allocated
from CMA heap can be reclaimed on demand as soon as the
system service asks for them (which is how attack step 3
can successfully dump live memory of other running apps).
Prior to the memory being reclaimed, the data generated
on the CMA heap will be copied elsewhere and page tables
will be updated to reﬂect the change. As we can see, the
design of CMA heap allows a better utilization of memory
resources at the cost of a potentially longer latency when
memory is allocated from CMA heap [23].
The CMA attack is considered extremely dangerous since
it eﬀectively allows a malicious app to dump the live memory
of any other apps. Equipped with the capability of know-
ing which apps run in the foreground (through attacks such