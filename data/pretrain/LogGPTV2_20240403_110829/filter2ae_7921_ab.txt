                                | |         .                    | c |
                                | |         +------------------->|   |
                                | |         |                    | h |
                                | |         V                    |   |
                                | +----->+-----+                 | p |
                                |        |     |                 |   |
                                |        |     |                 | a |
                                |        | AES |                 |   |
                                |        |     |                 | d |
                                |        |     |                 |   |
                                +------->+-----+                 |   |
                                            |                    |   |
                                            +------------------->|   |
                                                                 |   |
                                                                 +---+
### 4\. 内存处理流程
在主循环之前，对输入内容进行Keccak计算后取0..31字节和32..63字节进行异或，所得到的32字节结果用于初始化，变量a和b分别各占16字节，这两个变量将用于主循环，主循环进行524,288次迭代，当一个16字节值需要转换成暂存器中的一个地址，将以低字节顺序压入内存，21位低字节用作索引，但是索引中的4个低字节将被清除，以确保地址索引统一16字节对齐。
数据从16字节块中读取并写入暂存器。
迭代流程伪代码：
    scratchpad_address = to_scratchpad_address(a)
    scratchpad[scratchpad_address] = aes_round(scratchpad [scratchpad_address], a)
    b, scratchpad[scratchpad_address] = scratchpad[scratchpad_address],
        b xor scratchpad[scratchpad_address]
    scratchpad_address = to_scratchpad_address(b)
    a = 8byte_add(a, 8byte_mul(b, scratchpad[scratchpad_address]))
    a, scratchpad[scratchpad_address] = a xor scratchpad[scratchpad_address], a
`8byte_add()` 函数将每个参数表示为一对64位低位值，并将它们组合在一起，以分量形式进行快速模除 2 ^ 64。 其结果返回16字节。
`8byte_mul()` 函数仅使用每个参数的前8个字节，并分别解析为无符号64位低位字节整数，并相乘。
其结果返回16字节，最后，结果分半，两边的8字节相互交换。
内存处理流程图：
    +-------------------------------------------------------------+
       |                         Final state                         |
       +-------------+--------------+---------------+----------------+
       | Bytes 0..31 | Bytes 32..63 | Bytes 64..191 | Bytes 192..199 |
       +-------------+--------------+---------------+----------------+
              |             |
              |   +-----+   |
              +-->| XOR ||   |
              |   +-----+   |                               read |   |
              +-->| AES || XOR |                                 |   |
              |      |   +-----+                           write | c |
              |      |      |    +------------------------------>|   |
              |      |      +----+                       address | r |
              |      +------------------------------------------>|   |
              |      |  +-----------+                       read | a |
              |      +->| 8byte_mul || 8byte_add |   |                        | h |
                     |  +-----------+   |                        |   |
                     |        |         |                  write | p |
                     |        +---------|----------------------->|   |
                     |        |         |                        | a |
                     |        V         |                        |   |
                     |     +-----+      |                        | d |
                     |     | XOR || XOR |             |
       |   | |                | | | | |  +-----+             |
       | S | |                | | | | |     |                |
       |   | |                | | | | |     V                |
       | c | |                | | | | +->+-----+             |
       |   | |                | | | |    |     |             |
       | r | |                | | | |    |     |             |
       |   | |                | | | |    | AES |             |
       | a | |                | | | |    |     |             |
       |   | |                | | | |    |     |             |
       | t | |                | | | +--->+-----+             |
       |   | |                | | |         |                |
       | c | |                | | |         V                |
       |   | |                | | |      +-----+             |
       | h |-|----------------|-|-|----->| XOR |             |
       |   | |                | | |      +-----+             |
       | p | |                | | |         |                |
       |   | |                | | |         .                |
       | a | |                | | |         .                |
       |   | |                | | |         .                |
       | d | |                | | |         |                |
       |   | |                | | |         V                |
       |   | |                | | |      +-----+             |
       |   |-|----------------|-|-|----->| XOR |             |
       |   | |                | | |      +-----+             |
       +---+ |                | | |         |                |
             |                | | |         V                |
             |                | | +----->+-----+             |
             |                | |        |     |             |
             |                | |        |     |             |
             |                | |        | AES |             |
             |                | |        |     |             |
             |                | |        |     |             |
             |                | +------->+-----+             |
             |                |             |                |
             V                V             V                V
       +-------------+--------------+---------------+----------------+
       | Bytes 0..31 | Bytes 32..63 | Bytes 64..191 | Bytes 192..199 |
       +-------------+--------------+---------------+----------------+
       |                       Modified state                        |
       +-------------------------------------------------------------+
                                      |
                                      V
                                +----------+
                                | Keccak-f |
                                +----------+
                                 |    |
                     +-----------+    |
                     |                |
                     V                V
              +-------------+  +-------------+
              | Select hash |->| Chosen hash |
              +-------------+  +-------------+
                                      |
                                      V
                              +--------------+
                              | Final result |
                              +--------------+
计算结果举例：
    Empty string:
          eb14e8a833fac6fe9a43b57b336789c46ffe93f2868452240720607b14387e11.
        "This is a test":
          a084f01d1437a09c6985401b60d43554ae105802c5f5d8a9b3253649c0be6605.
白皮书里头涉及的算法在example里两个Miner项目中都有c实现。
可见此Coinhive脚本中XMR挖矿算法(cryptonight)就是靠一下任意一个形式实现的对C书写的算法的封装了。
  1. `wasmBinaryFile => (cryptonight.wasm)`
  2. `asmjsCodeFile => (cryptonight-asmjs.min.js)`
`asm.js` 和 `WebAssembly`
如何将C代码转为可执行的javascript文件，抱歉这一下子根本就讲不清楚，所以大家只需要知道这两项技术旨在提升浏览器内执行效率的类似“汇编”方式的实现快速运算的解决方案就可以了。
脚本里使用它，其一，目的是解决javascript内浮点运算等在弱类语言难以高效率执行的问题。其二，两个框架将已有的成型miner所用算法实例c语言脚本直接转换成js模拟的脚本，大大缩短了开发周期。可谓两全其美。