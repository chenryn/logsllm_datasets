title:Automated Analysis and Synthesis of Authenticated Encryption Schemes
author:Viet Tung Hoang and
Jonathan Katz and
Alex J. Malozemoff
Automated Analysis and Synthesis of
Authenticated Encryption Schemes
Viet Tung Hoang
University of Maryland
Georgetown University
PI:EMAIL
Jonathan Katz
University of Maryland
PI:EMAIL
Alex J. Malozemoﬀ
University of Maryland
PI:EMAIL
Abstract
Authenticated encryption (AE) schemes are symmetric-key encryption schemes ensuring strong no-
tions of conﬁdentiality and integrity. Although various AE schemes are known, there remains signiﬁcant
interest in developing schemes that are more eﬃcient, meet even stronger security notions (e.g., misuse-
resistance), or satisfy certain non-cryptographic properties (e.g., being patent-free).
We present an automated approach for analyzing and synthesizing blockcipher-based AE schemes,
signiﬁcantly extending prior work by Malozemoﬀ et al. (CSF 2014) who synthesize encryption schemes
satisfying conﬁdentiality only. Our main insight is to restrict attention to a certain class of schemes that
is expressive enough to capture several known constructions yet also admits automated reasoning about
security. We use our approach to generate thousands of AE schemes with provable security guarantees,
both known (e.g., variants of OCB and CCM) and new. Implementing two of these new schemes, we ﬁnd
their performance competitive with existing, state-of-the-art AE schemes.
Introduction
1
Historically, symmetric-key encryption schemes were designed only to ensure conﬁdentiality. With the re-
alization that practitioners were often (implicitly) assuming that such schemes also provided some form of
integrity, however, researchers began explicit consideration and analysis of encryption schemes additionally
satisfying that property [15, 7]. Since then, a tremendous amount of research has focused on the design of
authenticated encryption (AE) schemes ensuring both conﬁdentiality and integrity.
While a generic construction of an AE scheme based on any CPA-secure encryption scheme and message
authentication code is possible [7], more eﬃcient AE schemes can be devised. One example is OCB [24,
22, 16], which is online (i.e., requires only a single pass over the data), provably secure, and very fast.
Unfortunately, due to patent restrictions, the scheme has not gained widespread use. Other well-known AE
schemes include CCM [10] and GCM [19]; however, these schemes are slower than OCB [16] and have other
disadvantages as well.1
Designing AE schemes remains a nontrivial task, and even well-studied AE schemes can sometimes admit
surprising optimizations. For example, OCB was ﬁrst introduced in 2001 [24] and its authors have been active
in maintaining and optimizing it, releasing OCB2 in 2004 [22] and OCB3 in 2011 [16]. In spite of all this,
Minematsu [20] was able to recently show that a simple change allows OCB to be constructed using only
the forward direction of the underlying blockcipher. Overall, the problem of designing AE schemes is still of
signiﬁcant interest to the cryptographic community, as evidenced, e.g., by the CAESAR competition [9].
Motivated by the above concerns, we propose in this work an automated approach for analyzing and
synthesizing AE schemes. Our approach builds on and extends the work of Malozemoﬀ et al. [18], who
explored a similar goal but for the case of encryption schemes achieving conﬁdentiality only.
(We also
1For example, GCM is fairly complex and has a problematic security proof [13], whereas CCM is not online and cannot
pre-process associated data.
1
explicitly consider messages of arbitrary length, whereas Malozemoﬀ et al. only deal with messages whose
length is a multiple of the block length.) At a high level, as in their work, we view an encryption scheme as
being deﬁned by a directed acyclic graph in which each node corresponds to an instruction (e.g., XORing two
values) and is associated with an intermediate n-bit value (where n is the block length). The graph deﬁnes
how individual message blocks are processed; messages of arbitrary length are encrypted by iterating the
computation deﬁned by this graph over all the blocks of the message. (We actually consider processing two
message blocks at a time, as this allows us to capture more AE schemes within our framework.) We develop
a type system for the nodes of such graphs, and deﬁne constraints on how nodes can be typed based on their
parents’ types. We then show that any “well-typed” graph deﬁnes a secure AE scheme. This allows us to
automatically analyze a given scheme by checking whether the graph deﬁning the scheme can be properly
typed, and to synthesize schemes by enumerating over valid graphs and determining whether each one is
secure.
Although our high-level approach is similar to that of Malozemoﬀ et al., the technical details diﬀer
greatly due to the added challenge of handling integrity (which was left as an explicit open question in their
work). Indeed, we were unable to directly extend their work to deal with integrity; instead, we modify their
approach and consider a restricted class of encryption schemes for which an automated analysis of integrity
is tractable. Speciﬁcally, we focus on schemes constructed from tweakable2 blockciphers [17] in a particular
way. Several existing AE schemes satisfy our requirements, indicating that our framework is not overly
restrictive. Despite our attention to this restricted class of schemes, our graphs turn out to be a lot more
complex than those considered by Malozemoﬀ et al., and their analysis requires new techniques. As one
illustration of this, we note that in the prior work it is relatively easy to derive the decryption algorithm
from the encryption algorithm, as there is only one path (in the graph representing the encryption algorithm)
from a node representing a plaintext block to a node representing a ciphertext block. In our case, this no
longer holds—e.g., the graphs of schemes like OTR [20] have multiple paths between such pairs of nodes—
and so we instead work backward, starting from a description of the decryption algorithm and then applying
a nontrivial algorithm to derive the graph of the corresponding encryption algorithm.
Using our approach, we are able to synthesize thousands of secure AE schemes, hundreds of which are
“optimal” in the sense that they use only one tweakable blockcipher call per block, on par with OCB. These
schemes are provably secure, and our analysis tool not only veriﬁes their security but also gives concrete
security bounds. (In contrast, the prior work of Malozemoﬀ et al. [18] only implied asymptotic security.) We
also employ a simple algorithm to identify fully parallelizable constructions among the “optimal” schemes;
we discover seventeen new such schemes, ﬁve of which use the same number of instructions as OCB. We
implement two of those schemes and ﬁnd that their eﬃciency is comparable to that of OCB. Thus, these
schemes may be of interest to practitioners looking for eﬃcient, simple, and patent-free AE schemes. Finally,
in Appendix C, we devise a method for automatically searching for attacks on schemes that our approach
cannot prove secure. Interestingly, we ﬁnd that most schemes that cannot be proven secure by our tools are
indeed susceptible to concrete attacks.
Related work. Recently there has been a growing interest in applying automated techniques to the analysis
and design of cryptographic primitives. In the public-key setting, Barthe et al. [4] introduced an approach
applicable to RSA-based encryption schemes. More recently, Tiwari et al. [25] developed a uniﬁed technique
for synthesizing both RSA-based encryption schemes and modes of operation, among other cryptographic
primitives. Other work has looked at automated analysis of assumptions in generic groups [5] with appli-
cations to automated synthesis of signature schemes having certain properties [5, 6]. Finally, Akinyele et
al. [1, 2] have developed tools for analyzing signature and encryption schemes to determine when (and how)
known secure transformations can be applied.
2Roughly, a tweakable blockcipher accepts a “tweak” in addition to a key and an input block; for a ﬁxed key, diﬀerent tweaks
should produce “independent-looking” permutations. See the following section for a formal deﬁnition.
2
2 Preliminaries
Notation. Let Z be the set of integers, and let N denote the set of positive integers. Let {0, 1}∗ be the set of
all binary strings, including the empty string. For a string M, let |M| be the length of M. For M ∈ {0, 1}∗
and 1 ≤ i ≤ j ≤ |M|, let M[i] denote the i-th bit of M, and M[i, j] the substring of M from the ith to the
jth bit, inclusive. For two strings X and Y , we write XY or X k Y to denote the concatenation of X and Y .
We write x ←$ S to denote uniform sampling of x from ﬁnite set S. For ﬁnite sets S1, S2, and random
variables X, Y ∈ S1, Z ∈ S2, deﬁne kX − Y | Zk, the statistical distance between X and Y given Z, as
X
1
2
v∈S1,z∈S2
(cid:12)(cid:12)(cid:12).
Pr[Z = z] ·(cid:12)(cid:12)(cid:12) Pr[X = v | Z = z] − Pr[Y = v | Z = z]
Games. We use the code-based, game-playing framework of Bellare and Rogaway [8], and we assume the
reader is familiar with this framework.
Tweakable blockciphers [17]. Let n ∈ N. A tweakable blockcipher on n-bit strings with tweak space T
and key space K is a map E : K × T × {0, 1}n → {0, 1}n such that EK(T,·) is a permutation on {0, 1}n for
any K ∈ K and T ∈ T . Let E−1 denote the inverse of E, meaning E−1
K (T, EK(T, x)) = x for K ∈ K, T ∈ T ,
and x ∈ {0, 1}n. For brevity we sometimes write ET
K(x) for EK(T, x). Deﬁne the strong tweakable-PRP
advantage of an adversary A against E as
K (·,·) ⇒ 1] − Pr[π ←$ Perm(T , n): Aπ(·,·),π−1(·,·) ⇒ 1]
−1
E
(A) =
Adv±fprp
(cid:12)(cid:12)(cid:12) Pr[K ←$ K: AEK(·,·),E
we drop the word “strong” and write Advfprp
E (A) instead.
where Perm(T , n) is the set of all T -indexed families of permutations on {0, 1}n. (I.e., Perm(T , n) is the
set of all functions π : T × {0, 1}n → {0, 1}n with the property that for each T ∈ T , the reduced function
π(T,·) is a permutation on {0, 1}n.) If the adversary is prohibited from making queries to the second oracle,
(cid:12)(cid:12)(cid:12),
Authenticated encryption. Rather than view encryption schemes as being randomized or stateful, we
follow Rogaway [23] in viewing them as deterministic transformations that take as input a message along
with some associated data (which need not be kept secret) as well as a user-supplied nonce. Security is then
required to hold as long as the same nonce is never used twice.
Formally, an authenticated encryption (AE) scheme [7, 15, 21, 23] is a tuple Π = (K,E,D) with key
space K, nonce space N , associated data space A, message space M, and tag length τ ∈ N. Both algorithms
E and D are deterministic. The encryption algorithm E maps an input tuple (K, N, A, M) ∈ K×N ×A×M
to a ciphertext C ∈ {0, 1}∗. Decryption D reverses encryption, mapping an input tuple (K, N, A, C) ∈
K × N × A × {0, 1}∗ to either a message M ∈ M or a distinguished error symbol ⊥. The correctness
requirement demands that DN,A
K (M)) = M for every (K, N, A, M) ∈ K × N × A × M.
K (E N,A
We deﬁne the privacy advantage of an adversary A against an AE scheme Π as
Π (A) = Pr[K ←$ K: AEK(·,·,·) ⇒ 1] − Pr[A$(·,·,·) ⇒ 1],
Advpriv
where $(·,·,·) is an oracle that, on any input (N, A, M), outputs a fresh, uniform (|M| + τ)-bit answer. We
require here that the adversary never uses the same nonce twice as input to its oracle. Informally, a scheme
satisﬁes privacy if the privacy advantage of any eﬃcient adversary is small. Nonces used by the honest party
during encryption need only be unique3, not uniform.
For authenticity, the adversary is again given access to an encryption oracle EK(·,·,·), and as before
must not use the same nonce twice. We say that A outputs a forgery if it outputs (N, A, C) such that
DK(N, A, C) 6= ⊥ and C was not the result of a prior oracle query EK(N, A, M) for some message M.
We deﬁne the authenticity advantage of A as Advauth
Π (A) = Pr[K ←$ K: AEK(·,·,·) outputs a forgery].
Informally, a scheme satisﬁes authenticity if the authenticity advantage of any eﬃcient adversary is small.
3The requirement that nonces be unique is necessary, since repeating (N, A, M) will repeat the corresponding ciphertext.
For real schemes such as OCB, reusing a nonce is devastating, damaging the privacy and authenticity of not just past queries,
but also future ones. It is the responsibility of the implementation to ensure that nonces are unique.
3
3 Automated Security Analysis
We now describe our approach to the automated analysis of AE schemes constructed from tweakable block-
ciphers following a particular template (cf. Section 3.1). Although this template does not capture all known
AE schemes, it is expressive enough to include simpliﬁed variants of, e.g., OCB [22], XCBC [12], COPA [3],
OTR [20], and CCM [10].4
As discussed in the Introduction, we view an encryption scheme as being deﬁned by a directed acyclic
graph in which each node is associated with an instruction and carries an n-bit intermediate value.
In
Section 3.2 we describe a type system for the nodes of such graphs, and show how to use these types for
reasoning about properties of the intermediate values that those nodes carry. Then, in Section 3.3, we
show how this reasoning enables us to automatically verify whether an AE scheme, given by its graph
representation, satisﬁes privacy and authenticity.
3.1 A Template for AE Schemes
Fix associated data space A, and let N = {0, 1}n. Let T = N ×A× Z and let E : K×T ×{0, 1}n → {0, 1}n
be a tweakable blockcipher.5 We consider AE schemes Π[E] = (K,E,D) that use E as an oracle. The
schemes we consider have message space6 M = ({0, 1}2n)∗ and are built from algorithms (Enc, Dec, Tag)
having the following form:
• EncEK takes as input tweak T = (N, A, v) ∈ T , an initial state X ∈ {0, 1}2n, and a (double-length)
message block M ∈ {0, 1}2n. It outputs a (double-length) ciphertext block C ∈ {0, 1}2n and ﬁnal state
Y ∈ {0, 1}2n. This algorithm makes a ﬁxed number of queries to EK, denoted by Cost(Π), and we
require that the tweak in the ith such query is (N, A, v + i − 1).
−1
K “inverts” algorithm Enc in the following sense: if EncEK(T, X, M) = (Y, C) then it holds
• DecEK ,E
• TagEK takes as input tweak T ∈ T and initial state X ∈ {0, 1}2n, and produces a tag V ∈ {0, 1}n. It
that DecEK ,E