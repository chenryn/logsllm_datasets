As can be seen, is is possible to reconstruct the attack com-
pletely through interpreting the graph. The CPR filter applied to
the LogApprox graph does not meaningfully effect investigation
because information flow is preserved. However, the complexity
of LogApprox is reduced due to the fact that benignly-occurring
graph components are approximated by a regular expression. Note
that some forensic information that is potentially attack-relevant
is sacrificed by LogApprox. Specifically, because the libraries are
loaded into memory prior to the attack occurring, it is possible
that their contents informed outbound data transfers to the remote
Attacker IP. While this is possible, our argument is that lossless
descriptions of these library files remain unuseful because their
significance to the attack will not be apparent from the system-layer
audit log; these libraries are loaded all of the time by webmin dur-
ing typical activity, so they do not provide any threat intelligence
even though they may technically be relevant to the attack. Hence,
it is reasonable to prune and approximate these graph components.
7 DISCUSSION
7.1 Optimality of LogApprox
We do not argue that LogApprox is the ideal instantiation of attack-
preserving forensics. In this work, we only target one major sub-
system of system activity, namely file I/O, because it commonly
accounts for a large percentage of log volume and can be safely
filtered without disrupting the causality of more complex attack
behaviors such as lateral movement or data exfiltration. Approx-
imating other system entities, e.g., remote IP addresses, is much
more perilous, as even a common remote connection may describe
an important attack behavior during lateral movement. It is inter-
esting to consider how the notion of attack-preserving forensics
could be extended in future work.
7.2 Limitations of Attack Corpus
One notable limitation that we share with prior work is that we
are still limited in the corpus of attack behaviors that we evalu-
ate against. A standardized battery of attack behaviors that coin-
cide with our metrics may enable us to capture more nuances in
the performance-utility tradeoffs of approximation techniques, but
maintaining such an attack corpus is extremely difficult due to
ever-changing adversary techniques and tactics [55]. We attempt
to mitigate this limitation by using state-of-the-art attack engage-
ments produced for the DARPA Transparent Computing program.
Regardless, our datasets are sufficient to validate our hypothesis
that approximation techniques must be evaluated both for storage
performance as well as forensic utility.
7.3 Security Analysis of LogApprox
We now consider the security implications of LogApprox’ regex-
based File IO compression procedure. An intrusion is comprised of
an inter-dependent set events that includes process, network, and
file activities, all of which are captured by the unmodified audit log.
LogApprox does not affect process and network log events in any
way, meaning that network-based activities (e.g., lateral movement)
and the interdependencies of attacker-controlled processes are fully
documented. In the case of file activities, we can further divide File
IO events of the attacker-controlled process between those that are
similar to the benign process (i.e., regex matches) and those that
are wholly distinct (i.e., regex non-matches). We argue that it is
safe to approximate matched File IO events; this is because such
events cannot be used to detect an intrusion, and if a process is
linked to in an intrusion by other means than the files it accesses
are also implicated. As a result, the intrusion’s incident response
plan would necessarily entail re-imaging the compromised process,
causing any malicious data hidden by the attacker in a ’benign’ file
to be erased. In contrast, File IO events that don’t match a regex are
retained faithfully by LogApprox. These non-match events are far
more important to threat detection and investigation – in order for
the attacker to accomplish their objectives on the system, they will
need to establish persistence, escalate privilege, etc. This means
that they will need to deviate from the behaviors of the benign
application, which is unlikely to have accessed sensitive system
files needed for these tactics. Avoiding compression of uncommon
File IO event also ensures that this information remains available
to intrusion detection tools.
If an attacker is aware of LogApprox’s presence, they may pat-
tern their intrusion so as to to minimize their use of uncommon
File IO behaviors. Recall that LogApprox retains a lossless version
of the process tree, network links, and uncommon file behaviors;
the worst case scenario is therefore that the attacker is able to
spread through the system via common benign file behaviors. Even
in this scenario, LogApprox is able to produce an end-to-end attack
graph of the intrusion, but the graph will admit a limited number
of false dependencies as compared to an attack graph produced by
the uncompressed log. Specifically, if an attack path flows through
a LogApprox regex, then the processes that interacted with other
files matched by that regex will be incorrectly included in the graph.
That said, in practice such a feat is unlikely. As shown in Figures 4
and 9, in practice we observe that LogApprox primarily generates
regexes that describe “dead-end” or “one-way” IO behaviors such
as temporary files, configuration files, or read-only shared objects.
These file IO behaviors cannot create process-to-process links, so
they would not lead to false dependencies in an attack graph.
A final consideration is whether or not the adversary can manip-
ulate the way in which LogApprox generates regexes. It would be
highly convenient for the attacker to create an overly broad regex,
e.g., “match *”, which would cause all file IO to be erased from
the log. However, due to LogApprox’ parameterizable name and
path similarity thresholds, it is not possible to distort benign access
patterns into an overly broad regex – path matching can deviate
from concrete access patterns by at most one directory level, and
files can only be matched if they are at least 70% similar to one
another. Instead, an attacker could repeatedly issue variations on
ACSAC 2020, December 7–11, 2020, Austin, USA
Noor Michael, Jaron Mink, Jason Liu, Sneha Gaur, Wajih Ul Hassan, and Adam Bates
the malicious access pattern until a regex is created; however, this is
far from covert. In order for this to happen, the attacker essentially
needs to repeatedly issue the very command they were hoping
to conceal. To further reduce the likelihood of this occurring, the
administrators could fine-tune LogApprox’s parameters (e.g., set
path distance to zero) to improve security at the cost of diminished
reduction capacity.
8 RELATED WORK
This work is the first to formalize and quantify the forensic validity
of audit logs that have been subjected to approximation techniques.
We discuss past approximation techniques in Section 2. Like LogAp-
prox, Tang et al.’s NodeMerge [71] templatizes process behaviors
for compression purposes, but only operates on read-only file activ-
ity at the beginning of process execution. As a result, NodeMerge
could likely create a template for the Figure 9 example, but not
for other process behaviors accommodated by LogApprox such as
temporary file I/O. We chose not to evaluate NodeMerge because it
requires a training phase that is highly deployment-specific, making
it difficult to understand how the approach generalizes.
Beyond the challenge of log reduction, another important con-
sideration is log security; if audit logs can be manipulated by the
attacker, they cannot be trusted in an investigation. A variety
of cryptographic approaches enable tamper-evident logging (e.g.,
[7, 16, 27, 33, 47, 67, 68, 78, 79]). Research has also explored software-
based solutions to securing audit logs, demonstrating that refer-
ence monitor guarantees [3] are sufficient to assure log integrity
[5, 53, 60, 62]. Additionally, recent works utilize cryptographic
primitives for log integrity within trusted execution environments
[37, 58] and kernel audit frameworks [59]. Like all other work in
the space, LogApprox depends on the presence of mechanisms that
can assure and attest to the integrity of audit logs.
Considerable attention has given to extracting high-level seman-
tic insights from low-level system logs and graphs. A central issue
with system logs is dependency explosion, a semantic gap problem
in which long-lived processes (or data objects) appear to have a
large number dependencies when viewed from the system layer. A
variety of execution partitioning techniques have been proposed to
partition opaque dependencies into small autonomous units of work
[30, 32, 40–42, 48–51]. Execution partitioning creates additional op-
portunities for log reduction [43], but these opportunities are not
considered in our work because execution partitioning solutions
are application-specific, not system-wide. Regardless, we believe
these techniques are interoperable with LogApprox, although they
may not be as essential because LogApprox already removes a
large percentage of false dependencies related to benign execution
units. Prior work also considers related semantic gap problems,
including the reconciliation of system-level logs with application
logs [32, 61] and the identification of high-level semantic behav-
iors [34, 46, 73]. These techniques should also be compatible with
LogApprox, provided that the analyst is only interested in fully
reconstructing attack-related sequences of events.
Increasingly, causal analysis techniques are being incorporated
into intrusion detection tasks. Manzoor et al. [52], Han et al. [26],
and Wang et al. [74] present anomaly detection algorithms based on
the analysis of provenance graphs. Hassan et al. address the false
alert problem common in commercial threat detection software
using provenance-based alert triage [30]. Milajerdi et al. present
a rule-based approach for detecting attacker tactics [54], similar
to commercially-available Endpoint Detection & Response (EDR)
software, but based on provenance graph structures instead of
flat audit event sequences. Subsequently, Hassan et al. extended a
commercial EDR tool with lightweight provenance-based alert cor-
relation [29]. Their approach to making their technique practical for
large enterprise environments is to aggressively filter provenance
graphs such that only queries about inter-alert dependency can be
answered by the approximated log. In contrast to other approxima-
tion techniques discussed in this work, Hassan et al.’s approach is
not intended for use in generic threat investigation scenarios where
many forms of causal query must be supported. While we primarily
consider threat investigation, our forensic validity metrics can also
be interpreted as an indicator of how log approximation techniques
may assist or impair intrusion detection tasks.
9 CONCLUSION
The security utility of log approximation techniques has proven
difficult to measure; in this work, we codify a set of forensic validity
properties that can measure the utility of approximated logs. We
present LogApprox, a new approach to log approximation that
leverages repetition in file I/O behavior to learn regular expressions
that characterize common access patterns, allowing aggressive re-
duction of benign log events. We conduct a principled evaluation
of both the performance and utility of LogApprox, comparing it to
a representative set of techniques from prior work. It is our hope
that this work provides expressive baselines for the evaluation of
future log approximation systems.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous referees for their
valuable comments and helpful suggestions. This work is supported
in part by NSF 17-50024. The views expressed are those of the
authors only.
REFERENCES
[1] Raza Ahmad, Melanie Bru, and Ashish Gehani. 2018. Streaming Provenance
Compression. In Provenance and Annotation of Data and Processes, Khalid Belhaj-
jame, Ashish Gehani, and Pinar Alper (Eds.). Springer International Publishing,
Cham, 236–240.
[2] AlDanial. 2019. cloc: Count Lines of Code.
[3] James P. Anderson. 1972. Computer Security Technology Planning Study. Technical
Report ESD-TR-73-51. Air Force Electronic Systems Division.
[4] Adam Bates, Kevin R. B. Butler, and Thomas Moyer. 2015. Take Only What You
Need: Leveraging Mandatory Access Control Policy to Reduce Provenance Stor-
age Costs. In 7th Workshop on the Theory and Practice of Provenance (Edinburgh,
Scotland) (TaPP’15).
[5] Adam Bates, Dave Tian, Kevin R.B. Butler, and Thomas Moyer. 2015. Trustworthy
Whole-System Provenance for the Linux Kernel. In Proceedings of 24th USENIX
Security Symposium (Washington, D.C.).
[6] Adam Bates, Dave Tian, Grant Hernandez, Thomas Moyer, Kevin R.B. Butler, and
Trent Jaeger. 2017. Taming the Costs of Trustworthy Provenance through Policy
Reduction. ACM Trans. on Internet Technology 17, 4 (sep 2017), 34:1–34:21.
[7] Mihir Bellare and Bennet Yee. 1997. Forward integrity for secure audit logs.
Technical Report. Computer Science and Engineering Department, University of
California at San Diego.
[8] Y. Ben, Y. Han, N. Cai, W. An, and Z. Xu. 2018. T-Tracker: Compressing System
Audit Log by Taint Tracking. In 2018 IEEE 24th International Conference on Parallel
and Distributed Systems (ICPADS). 1–9. https://doi.org/10.1109/PADSW.2018.
8645035
On the Forensic Validity of Approximated Audit Logs
ACSAC 2020, December 7–11, 2020, Austin, USA
[9] Tara Siegel Bernard, Tiffany Hsu, Nicole Perlroth, and Ron Lieber. 2019. Equifax
Says Cyberattack May Have Affected 143 Million in the U.S. https://www.nytimes.
com/2017/09/07/business/equifax-cyberattack.html. Last accessed October 16,
2020.
[10] Carbon Black. 2018. Global Incident Response Threat Report. https://www.
carbonblack.com/global-incident-response-threat-report/november-2018/. Last
accessed 04-20-2019.
[11] Microsoft: Windows Dev Center. 2018. About Event Tracing.
[12] Microsoft: Windows Dev Center. 2018. Event Logging.
[13] Ang Chen, W. Brad Moore, Hanjun Xiao, Andreas Haeberlen, Linh Thi Xuan
Phan, Micah Sherr, and Wenchao Zhou. 2014. Detecting Covert Timing Chan-
nels with Time-Deterministic Replay. In 11th USENIX Symposium on Operating
Systems Design and Implementation (OSDI 14). USENIX Association, Broomfield,
CO, 541–554. https://www.usenix.org/conference/osdi14/technical-sessions/
presentation/chen_ang
[14] Chen Chen, Harshal Tushar Lehri, Lay Kuan Loh, Anupam Alur, Limin Jia,
Boon Thau Loo, and Wenchao Zhou. 2017. Distributed Provenance Compression.
In Proceedings of the 2017 ACM International Conference on Management of Data
(Chicago, Illinois, USA) (SIGMOD ’17). ACM, New York, NY, USA, 203–218. https:
//doi.org/10.1145/3035918.3035926