=== streamstats
摘要：
    可以对数据的连续变化进行累积性的统计，并将统计结果以新字段的方式添加在原始数据中
语法：
    streamstats []*  [,  ]* [by ]
必要参数：
* streamstats-func-as
** 语法
    avg | min | max | sun | count | distinct_count | first | last | earliest | latest | derivative | exact_dc | sumsq | var | stddev | list | values
** 描述
    与stats命令结合的部分函数，请参考[#与stats有关的函数]。 注意：不支持single类型的distinct函数
可选参数：
* streamstats-params
** 语法
    [reset_on_change=] | [reset_before=] | [reset_after= ] | [current=] | [window=] | [time_window=] | [global=] | [allnum=] | [timefield=]
** 参数
*** reset-before
**** 语法
    reset_before=
**** 描述
    在生成对某一事件的统计值之前重置统计。当此参数与window一起使用时，window也会被重置。
*** reset-after
**** 语法
    reset_after=
**** 描述
    在生成对某一事件的统计值之后重置统计。当此参数与window一起使用时，window也会被重置。
*** time-window
**** 语法
    time_window=
**** 描述
    时间窗口的大小。当time_window和window一起使用时，time_window规定的是一个window内部的时间窗口大小。无论是window还是time_window其实影响的都是在某一窗口中命中的事件数[使用time_window参数的前提是时间必须是按时间字段排序的]
**** 参数
***** span-length
****** 语法
    span_length= 
****** 描述
    每个时间窗口的跨度，第一个数字为系数
****** 参数
******* timeunit
******** 语法
    timeunit=s | m | h | d | w
******** 描述
    时间单位，分别表示秒，分钟，小时，天，周
*** reset-on-change
**** 语法
    reset_on_change=
**** 描述
    当group by字段的值改变时,是否将累计的统计值重置。只有遇到包含所有group by 字段的事件才会触发这一操作，只有一部分group by 字段的事件会被忽略。当此参数与window一起使用时，window也会被重置。默认为false
*** current
**** 语法
    current=
**** 描述
    统计是否包含当前event，默认为true
*** window
**** 语法
    window=
**** 描述
    事件数窗口大小，默认为0(即所有事件)
*** global
**** 语法
    global=
**** 描述
    只有在指定window时生效，决定是否使用单一window还是使用由by字段决定的多个window，默认为true
*** allnum
**** 语法
    allnum=
**** 描述
    聚合字段截止目前是否全部为数值。当allnum为false时，遇到聚合字段为非数值型会跳过此条日志进行统计，即当前这条日志的统计结果为空；allnum为true时，遇到聚合字段为非数值型时会将此条及以后所有日志的统计值均置为空。默认为false
*** timefield
**** 语法
    timefield=
**** 描述
    指定日志中的时间字段名称，默认为timestamp
* field-list
** 语法
    (,)*
** 描述
    分组字段，所有的stats-func-as将在分组内统计
.示例1
====
window为3以及global为true的情况下，按照生成字段b进行分组并连续统计cnt的distinct count值
[source,bash]
 | makeresults count=10
 | streamstats window=10 count() as cnt by timestamp
 | eval b = cnt%2
 | streamstats window=3 global=true dc(cnt) as dc_ by b
image::images/Image-140318-043559.899.png[]
    说明：
        global为true说明使用一个单一window
        第一行结果就计算的是第1行的事件对应的dc值即为：b为1的时候的dc(cnt)值为1(cnt取值：1)
        第二行结果就计算的是第1-2行的事件对应的dc值为：b为0的时候的dc(cnt)值为1(cnt取值：2)
        第三行结果就计算的是第1-3行的事件对应的dc值为：b为1的时候的dc(cnt)值为2(cnt取值：1，3)
        第四行结果就计算的是第2-4行的事件对应的dc值为：b为0的时候的dc(cnt)值为2(cnt取值为2，4)
        之后以此类推
====
.示例2
====
window为3以及global为false的情况下，按照生成字段b进行分组并连续统计cnt的distinct count值
[source,bash]
 | makeresults count=10
 | streamstats window=10 count() as cnt by timestamp
 | eval b = cnt%2
 | streamstats window=3 global=false dc(cnt) as dc_ by b
image::images/Image-140318-043559.900.png[]
    说明：
        global为false说明使用b的结果作为window的个数(在本题中b有两种值，即0代表一种window，1代表一种window)
        第一行结果就计算的是第1行的事件对应的dc值即为：b为1的时候的dc(cnt)值为1(cnt取值：1)
        第二行结果就计算的是第1-2行的事件对应的dc值为：b为0的时候的dc(cnt)值为1(cnt取值：2)
        第三行结果就计算的是第1-3行的事件对应的dc值为：b为1的时候的dc(cnt)值为2(cnt取值：1，3)
        第四行结果就计算的是第2-4行的事件对应的dc值为：b为0的时候的dc(cnt)值为2(cnt取值为2，4)
        第五行结果就计算的是第3-5行的事件对应的dc值为：b为1的时候的dc(cnt)值为3(由于以1为window的桶内数据未达到3，所以cnt取值为1，3，5)
        之后以此类推
====
.示例3
====
window为3以及reset_after为cnt>5的情况下，按照生成字段b进行分组并连续统计cnt的distinct count值
[source,bash]
 | makeresults count=10
 | streamstats window=10 count() as cnt by timestamp
 | eval b = cnt%2
 | streamstats reset_after="cnt>5" window=3 global=false dc(cnt) as dc_ by b
image::images/Image-140318-043559.902.png[]
    说明：
        global为false说明使用b的结果作为window的个数(即0代表一种window，1代表另一种)
        第一行结果就计算的是第1行的事件对应的dc值即为：b为1的时候的dc(cnt)值为1(cnt取值：1)
        第二行结果就计算的是第1-2行的事件对应的dc值为：b为0的时候的dc(cnt)值为1(cnt取值：2)
        第三行结果就计算的是第1-3行的事件对应的dc值为：b为1的时候的dc(cnt)值为2(cnt取值：1，3)
        第四行结果就计算的是第2-4行的事件对饮的dc值为：b为0的时候的dc(cnt)值为2(cnt取值为2，4)
        第五行结果就计算的是第1-5行的事件对饮的dc值为：b为1的时候的dc(cnt)值为3(cnt取值为1，3，5)
        第六行结果就计算的是第2-6行的事件对饮的dc值为：b为0的时候的dc(cnt)值为3(cnt取值为2，4，6)
        此时reset生效，之前统计的所有历史值清零
        第七行结果就计算的是第7行的事件对饮的dc值为：b为1的时候的dc(cnt)值为1(cnt取值为7)
        第八行结果就计算的是第8行的事件对饮的dc值为：b为0的时候的dc(cnt)值为1(cnt取值为8)
        之后以此类推
====