title:Characterizing JSON Traffic Patterns on a CDN
author:Santiago Vargas and
Utkarsh Goel and
Moritz Steiner and
Aruna Balasubramanian
Characterizing JSON Traffic Patterns on a CDN
Santiago Vargas
Stony Brook University
PI:EMAIL
Moritz Steiner
Akamai Technologies
PI:EMAIL
Abstract
Content delivery networks serve a major fraction of the Internet
traffic, and their geographically deployed infrastructure makes them
a good vantage point to observe traffic access patterns. We perform
a large-scale investigation to characterize Web traffic patterns ob-
served from a major CDN infrastructure. Specifically, we discover
that responses with application/json content-type form a grow-
ing majority of all HTTP requests. As a result, we seek to understand
what types of devices and applications are requesting JSON objects
and explore opportunities to optimize CDN delivery of JSON traffic.
Our study shows that mobile applications account for at least 52% of
JSON traffic on the CDN and embedded devices account for another
12% of all JSON traffic. We also find that more than 55% of JSON traf-
fic on the CDN is uncacheable, showing that a large portion of JSON
traffic on the CDN is dynamic. By further looking at patterns of pe-
riodicity in requests, we find that 6.3% of JSON traffic is periodically
requested and reflects the use of (partially) autonomous software
systems, IoT devices, and other kinds of machine-to-machine com-
munication. Finally, we explore dependencies in JSON traffic through
the lens of ngram models and find that these models can capture
patterns between subsequent requests. We can potentially leverage
this to prefetch requests, improving the cache hit ratio.
CCS Concepts
• Networks → Network measurement.
Keywords
Content Delivery Networks (CDNs), JSON, Web
ACM Reference Format:
Santiago Vargas, Utkarsh Goel, Moritz Steiner, and Aruna Balasubramanian.
2019. Characterizing JSON Traffic Patterns on a CDN. In Internet Measurement
Conference (IMC ’19), October 21–23, 2019, Amsterdam, Netherlands. ACM,
New York, NY, USA, 7 pages. https://doi.org/10.1145/3355369.3355594
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6948-0/19/10...$15.00
https://doi.org/10.1145/3355369.3355594
Utkarsh Goel
Akamai Technologies
PI:EMAIL
Aruna Balasubramanian
Stony Brook University
PI:EMAIL
Figure 1: Ratio of JSON to HTML requests on the CDN.
1 Introduction
Content delivery networks (CDNs) serve a large fraction of Internet
traffic, even more than 50% of all Web traffic for some carriers [16, 23].
CDNs are also a core part of Internet infrastructure used to optimize,
secure, and reliably deliver content. As a result, CDNs are a good
vantage point to observe large scale Internet patterns, which are
constantly changing [28].
We study the traffic patterns in a large CDN and observe one
such changing pattern: that of the growth of the JSON content type.
JSON, which stands for JavaScript Object Notation, is a format used
for transferring data in key-value pairs [5]. We find that JSON has
outgrown HTML, CSS, and JS content in the last 3 years, and is
the leading content type on the CDN. Figure 1 shows the growth
trend of JSON requests to HTML requests received by the CDN since
2016 using counts of the total number of JSON and HTML requests
recorded by all CDN edge servers. At the end of the observation
period, JSON is requested more than HTML content by over 4×.
However, little is known about how JSON is used on the Web.
HTML, which has been one of most popular content types for Web
traffic, is well studied. As a result, there are several optimization
techniques designed to optimally deliver HTML content. These
optimizations range from rewriting HTML [21], prefetching [27],
and pushing sub-resources [13]. However, the same is not true for
JSON. Our goal in this paper is to shed light on what JSON traffic
looks like from the vantage point of a CDN. Specifically, we seek to
answers to the following questions:
• What applications and devices are consuming JSON traffic?
• What are the types of JSON requests and responses and what
are their properties?
• What are the common patterns of JSON traffic? Can these
patterns be exploited for optimization?
195
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Vargas et al.
To answer the above questions, we analyze the logs of a total of 35
million JSON requests collected from the edge servers of Akamai’s
network over a 24 hour period. We start by creating a taxonomy of
JSON traffic properties based on the data we collect. Specifically, we
divide the properties of JSON traffic into traffic source, request type,
and response type and analyze each component individually.
In our data, 88% of JSON traffic is non-browser traffic, and only
12% is requested by browsers. At least 52% of JSON traffic is also
from native mobile applications. This result is particularly impor-
tant because browser traffic is guided by an HTML manifest file.
This provides optimization opportunities including prefetching and
server push. However, non-browser traffic from mobile apps are less
standardized and harder to optimize. Further, we find that at least
12% of JSON requests come from embedded devices, including game
consoles and smart watches. These segments of devices are often
bottlenecked in terms of network performance.
Our observations in terms of request/response is that 55% of JSON
requests are not cacheable, Thus, the slower mobile and embedded
devices are largely not benefiting from caching optimization. In fact,
we find that 50% of domains do not use CDN caching at all. Instead,
these domains use other security and performance products for their
JSON traffic. Cacheability also depends on domain industry category.
Media, News, and Sports serve highly static, unchanging content.
Conversely, Financial, Streaming, and Gaming domains serve JSON
that is personalized or meant for one-time use.
Finally, our examination of the JSON traffic in mobile applications
shows two common traffic patterns. First, there is a non-trivial
amount of periodic JSON traffic from mobile applications. Second,
we find that, once a JSON object is requested, the next request can
be predicted with some accuracy. JSON requests from mobile apps
in fact serve as manifest files that contain references to further
JSON objects. We explore these two patterns in this paper to present
directions for JSON traffic optimization.
We look at the most requested objects and find that 6.3% of JSON
requests are periodic. Examples include pulling latest messages in a
messaging system, periodically updating scores for online gaming,
and telemetry reporting. For more than 20% of objects that are
periodically requested, 50% of the clients that request these objects
do so with matching time signals. This periodicity suggests that
the requests are coming from autonomous software systems, IoT
devices, or other kind of machine-to-machine communication. Since
these requests are not human-triggered, one possible optimization
is to de-prioritize these requests.
Second, we find that in many cases, a JSON request can predict
a subsequent JSON request with about 70% accuracy. Prediction of
these objects can be used to prefetch future requests in the case of
cache misses and unchangeable content. Further, up to 87% accuracy
is possible when clustering similar requests by URL. This shows that
clients share general patterns across requested objects. Apart from
performance, prediction of clustered objects can also be used for
anomaly detection of unusual requests.
While we characterize JSON traffic and look at two patterns
inside of the traffic, we have just scratched the surface of analyzing
JSON traffic. The increase in JSON traffic is an important trend with
implications on the Internet. Since JSON traffic has grown quickly
in the last years, it is important to analyze this trend and understand
this new segment of traffic.
JSON Manifest Traffic Pattern
1. Request: GET → news_example.com/stories
Response: ← "application/json"
[{"article_id": 1234,
"article_title":"Lorem Ipsum",
"image_url":"news_example.com/image1234.jpg"
}, ...]
2. Request: GET → news_example.com/article/1234
Response: ← "application/json"
{"video": "news_example.com/video1234.mp4",
"article":"Lorem ipsum dolor...",
"images":["image1_url", "image2_url"]
}
Table 1: Example of a mobile news app using JSON to request
1) a summary of stories and 2) content for a specific article.
2 Background
In this section, we first describe the JSON format [5] and then de-
scribe why and how applications request JSON objects.
2.1 What is JSON?
JSON, which stands for JavaScript Object Notation, is a format used
for transferring data in key-value pairs. JSON is more lightweight
than formats like XML and HTML, which require opening and clos-
ing tags. But, JSON retains the same benefits as XML and HTML
of being text-based and hierarchical unlike plain-text and binary
formats. Because JSON is structured, standardized, and lightweight,
this makes it a portable format that can be used on many platforms.
Further, JSON can be parsed and programmed against in any envi-
ronment that runs JavaScript [1].
2.2 Why use JSON?
Traditionally with web and media content, both the view (layout) and
data are not cleanly separated. For example, server-side rendered
HTML contains information about both the layout and the data
inside the web page; not all layout information is contained in the
style sheet (CSS). However, with the advent of web and mobile
applications, many developers have taken to separate the client view,
application logic, and application data, such as with progressive web
applications [9] on browsers. Developers can then control when
and how often to update both application views and data separately.
Since each individual component of an application need not be
updated, bandwidth overhead is reduced by caching unchanged
views or unchanged data. Thus, these applications generally cache
static application layouts and logic at the client. Meanwhile, data
is transported between client and server in a specified data format,
such as JSON.
2.3 JSON Traffic Examples
Based on popular applications that use JSON in the CDN, in Table
1 we illustrate two examples of how JSON is used. 1) Applications
request a JSON manifest object that contains direct (URL) or indirect
(object ID) references to other objects. In the case of a popular news
application, we observe that the application first retrieves a JSON
manifest containing references to text and image contents for many
196
Characterizing JSON Traffic Patterns on a CDN
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Dataset
Short-term 25 million
Long-term 10 million
# of Logs Duration
10 mins
24 hrs
# of Domains
∼5K
∼170
Table 2: Summary of our datasets.
articles. Afterwards, subsequent content is retrieved, like full text,
images, and videos for select news articles. 2) Applications peri-
odically send requests to a webservice for telemetry purposes. For
example, some applications send requests in a polling-like behavior
for tracking or advertising.
3 Methodology
In this section, we describe the platform used to collect network
request data and outline the significance of individual data fields.
3.1 Data Collection
This study uses server logs gathered from Akamai, a leading CDN
network. The Akamai network consists of around 240k distributed
servers in about 140 countries and 1600 networks worldwide [3].
Additionally, the Akamai CDN serves around 3 trillion HTTP re-
quests daily [25]. This network has a large market share of Fortune
500 companies and top Alexa sites.
Each time a client makes an HTTP request to an Akamai edge
server, a request log is generated at the server. We collect logs from
CDN edge servers. The request information we collect from each log
includes the time of the request, object caching information, a client
IP address that is hashed for anonymity, and select HTTP request
and response header information including user-agent, mime type,
and object URL.
Since it would be infeasible to collect request data for the entire
Akamai network over an extended period of time, we collect two
datasets, a shorter, wider dataset and a narrower, but longer-term
dataset. Note, since traffic patterns are constantly changing, our
datasets may be influenced by the capture lengths and locations.
Table 2 summarizes the two datasets we collect. The short-term
dataset is collected over all machines in the entire CDN network to
have a large coverage of diverse network traffic. We use this dataset