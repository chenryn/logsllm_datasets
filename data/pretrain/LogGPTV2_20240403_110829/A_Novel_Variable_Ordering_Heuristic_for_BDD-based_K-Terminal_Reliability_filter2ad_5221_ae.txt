### 表 IX：内存消耗（MB）（分解法与KLY方法）

- **m1**：使用新启发式的分解法
- **m2**：使用BFS启发式的分解法
- **m3**：使用新启发式的KLY方法
- **m4**：使用BFS启发式的KLY方法

#### Nw m1
| 网络 | m1 (MB) | m2 (MB) | m3 (MB) | m4 (MB) |
|------|---------|---------|---------|---------|
| 1    | 1.85    | 2.25    | 1.72    | 1.77    |
| 2    | <1      | <1      | <1      | <1      |
| 3    | 25.50   | 10.21   | 13.05   | 8.06    |
| 4    | 1.44    | 1.64    | -       | -       |
| 5    | 2.93    | 3.03    | 37.5    | 39.2    |
| 6    | 10.64   | 11.82   | 189     | 196     |
| 7    | 1,454   | 2,038   | -       | -       |
| 8    | 1.25    | 2,680   | 5.03    | 66.10   |
| 9    | <1      | 4.03    | 5.66    | 7.30    |
| 10   | 1,840   | 1,840   | 251     | 908     |
| 11   | <1      | 2,250   | 11,161  | -       |
| 12   | 3.42    | 8,450   | 67.99   | -       |
| 13   | 39.10   | -       | 5.92    | -       |
| 14   | 2.83    | 174.80  | -       | -       |

### 性能比较
- **m1 vs. m2**
  - 0.822
  - 1 − 
  - 2.5
  - 0.878
  - 0.967
  - 0.9
  - 0.714
  - <0.001
  - 0.248
  - <0.001
  - <0.001
  - 1
  - -
  - 0.016

- **m3 vs. m4**
  - 0.97
  - 1 − 
  - 1.619
  - 0.957
  - 0.969
  - 0.076
  - 0.775
  - 0.276
  - -
  - -
  - -
  - -
  - 10.16
  - 0.583

### 结论
新的启发式方法显著降低了 |Fmax|，这比当前最先进的方法表现更好。由于分解法的复杂性主要取决于 |Fmax|，因此应用新的启发式方法可以大幅提高时间和空间效率。特别是在不规则结构中，BFS启发式方法常常导致较高的 |Fmax|，从而使基于BDD的可靠性方法变得低效。相反，新的启发式方法能找到使 |Fmax| 显著降低的顺序，从而带来巨大的改进。考虑到每个布尔公式都有一个规范的ROBDD表示 [22]，我们也可以预期在其他基于BDD的方法中应用新的启发式方法会带来类似的改进。

对于规则结构（如网格网络），新的启发式方法没有显著改进，因为BFS启发式已经生成了最小的 |Fmax| 值。然而，新的启发式方法也产生了与BFS相同的 |Fmax| 值，因此不会对性能产生显著的负面影响。这些事实得到了我们在不同规模的规则和不规则结构上的测量结果的支持。这种比较在文献中尚未发现，因为KLY方法和分解法的运行时间是在不同的计算机架构上获得的（参见[11], [24]）。此外，还没有对不规则网络（如随机网络）进行广泛的实验。因此，认为分解法通常优于KLY方法的结论是不合理的。我们的结果显示，分解法仅在具有有限树宽 |Fmax| 的规则网络中表现更优。在某些不规则结构中，KLY方法在应用BFS启发式时表现更好。然而，当将新的启发式方法应用于KLY方法和分解法时，我们可以得出结论，在无向网络中，分解法远优于KLY方法。

### 未来工作
我们的未来目标是扩展分解法的通用性，使其也能应用于有向网络。根据我们目前的知识，还没有适用于基于BDD的可靠性分析的动态启发式方法带来显著改进。因此，另一个未来的工作是研究现有的并构思新的动态排序策略，以用于分解法。

### 致谢
感谢匿名审稿人提出的非常有益的批评意见，帮助提高了本文的质量。

### 参考文献
[此处列出参考文献]

---

通过以上优化，文本变得更加清晰、连贯和专业。希望这对您有所帮助！