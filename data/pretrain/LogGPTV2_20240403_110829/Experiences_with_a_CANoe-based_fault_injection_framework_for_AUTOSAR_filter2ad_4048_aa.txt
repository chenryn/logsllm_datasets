title:Experiences with a CANoe-based fault injection framework for AUTOSAR
author:Patrick E. Lanigan and
Priya Narasimhan and
Thomas E. Fuhrman
201O IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Experiences 
with a  CANoe-based 
Fault Injection 
Framework for AUTOSAR 
Patrick E. Lanigan, Priya Narasimhan 
Thomas E. Fuhrman 
ECE Department 
General Motors Research & Development 
Carnegie Mellon University 
Warren, MI 48090 
PA 15213 
PI:EMAIL, 
Pittsburgh, 
PI:EMAIL 
PI:EMAIL 
Abstract 
of the vehicle. 
faults 
Therefore, 
high levels 
and provide 
If AUTOSAR is to be used in these systems, 
of dependability. 
its own 
they must be designed 
to tolerate 
are being pursued 
capabilities 
must be characterized. 
architectures, 
such as AUTomotive 
industry in order to reduce the cost of 
Many of these features 
will 
Fault injection 
analysis 
plays an im­
of such soft­
the 
of leveraging 
the feasibility 
(AUTOSAR), 
role during the dependability 
software 
features. 
Standardized 
Open System ARchitecture 
within the automotive 
developing 
new vehicle 
need to be highly dependable. 
portant 
ware. This work evaluates 
CANoe simulation 
methods for injecting 
a proof-of-concept 
We describe 
with example fault-injection 
mentation 
the suitability 
ment. 
environment 
issues faced and addressed, 
fault-injection 
framework 
scenarios, 
as well as imple­
lessons 
learned, and 
fault and error handling 
Formal verification 
system dependability. 
mentary role in this analysis 
way to study the system's 
faults 
ties with respect 
fault-removal 
26262 standard 
ics highly recommends 
part of the dependability 
and to analyze 
the system's 
to a particular 
to develop software-based 
faults into AUTOSAR applications. 
and fault-forecasting 
fault model. This can aid in 
[2]. The upcoming ISO 
methods are typically 
used to analyze 
can playa comple­
Fault-injection 
by providing 
dependability 
in the presence 
of 
an empirical 
fault-handling  capabili­
for functional 
safety in automotive 
electron­
that fault-injection 
as 
analysis 
be included 
of critical  systems  [8]. 
of using CANoe as a fault-injection environ­
The automotive 
is traditionally 
cost-sensitive, 
1. Introduction 
industry 
estimated 
features. 
with some vehicles 
has become steadily 
are driven by electronics 
[5]. It is further 
Control Unit (ECU)'s development 
systems to implement 
ad­
that 
In fact, it has been suggested 
and 
[5] that 50-70% of an 
The automotive 
more reliant 
on software-intensive distributed 
vanced vehicle 
"up to 90% of all innovations 
software" 
Electronic 
from software, 
Overall, 
of a vehicle's 
emergence 
AUTOSAR [4], as a way to promote software 
reduce the development 
new software-based 
through the partnership 
the major automobile 
costs come 
having up to 70 ECUs. 
AUTOSAR was developed 
including 
can account 
the industry 
of over 100 companies, 
such as 
reuse and 
architectures, 
cost [5]. Recently, 
and their suppliers 
[4]. 
of standardized 
manufacturers 
electronics 
costs incurred 
and software 
for up to 40% 
features. 
software 
has seen the 
when introducing 
When problems 
ered after a vehicle 
rival development 
vanced systems are critical 
in software-based 
has gone to production, 
costs [ 14]. Moreover, 
to ensuring 
systems are uncov­
costs can 
many of these ad­
the safe operation 
recall 
typically 
A low-cost, 
requires 
software-based 
expen­
industry 
fault injection 
equipment. 
and hardware-based 
sive, specialized 
fault-injection 
hardware-based 
either not required 
not appropriate  (e.g., 
ponents). 
configure 
or a new point of fault injection) 
niques, 
where new hardware 
every new modification. 
Software-based 
and to modify (e.g., 
(e.g., 
for targeting 
techniques 
framework could provide a substitute 
techniques 
when their full functionality 
during software 
prototyping) 
for 
is 
or 
specific software 
com­
are also easier to re­
by adding a new type of fault 
than hardware-based 
tech­
might need to be created 
for 
using off-the-shelf 
framework 
execution 
techniques 
in a simulated 
an experience 
fault-injection 
This report describes 
that 
tools to build a low-cost 
AUTOSAR. The framework uses software­
supports 
implemented 
environ­
ment, namely, Vector CANoe. The framework consists 
hooks that are inserted 
implemented 
Injection 
data structures 
ually configured 
control-panel. 
evaluate 
provide 
of 
into the AUTOSAR codebase 
and 
Implemented 
(SWIFI) module. Hooks can manipulate 
force error codes. Faults are man­
using a CANoe 
was to 
and not to 
the feasibility 
a dependability 
of the AUTOSAR specifi-
and activated 
in a separate 
such a system, 
of building 
at run-time 
or directly 
Software 
analysis 
Fault­
specific 
The purpose of this proof-of-concept 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
569 
DSN 2010: Lanigan et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:03 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
cation or of the specific 
AUTOSAR implementation 
To the best of our knowledge, 
this represents 
used. 
the first 
It provides 
attempt 
running in a simulation 
point for researchers 
fault-injection 
to iden­
locations 
within the AUTOSAR 
that CANoe is a suitable 
to inject faults into an AUTOSAR ap­
environment. 
and practitioners 
published 
plication 
a starting 
tify suitable 
stack. This work suggests 
injection 
environment 
cannot be represented 
Noe provides. 
oping a more comprehensive 
AUTOSAR applications 
software-based  techniques. 
for some faults, 
using the level of abstraction 
first step in devel­
fault-injection 
framework 
for 
both hardware-and 
that integrates 
an important 
It provides 
fault­
but that other faults 
that CA­
The remainder 
of this report is organized 
as follows. 
Sec­
for our work, while Sec­
frame­
goals. The fault-injection 
some background 
our specific 
tion 2 provides 
tion 3 outlines 
work is presented 
in Section 
tion 7 covers some related 
report. 
5 and discuss 
in Section 
4. We evaluate 
the framework 
lessons 
learned 
work. Section 
in Section 
8 summarizes 
this 
6. Sec­
por­
between systems and applications. 
is contained 
system-and application­
A significant 
from network-, 
bility 
tion of the AUTOSAR codebase 
are auto-generated 
specific configuration 
quired to facilitate 
base should avoid auto-generated 
fying configuration 
avoided 
fault injection 
any changes re­
in the AUTOSAR code­
files completely. 
Modi­
CANdb, FIBEX) should be 
files. Therefore, 
files (e.g., 
in files that 
as well. 
We decided 
to explore 
a proof-of-concept 
fault-injection 
available 
soft­
a simulation 
applications. 
it allows networks 
models. Communi­
of 
Language (CAPL) is a script­
environment 
framework based on a common and readily 
ware tool: Vector CANoe. CANoe provides 
and evaluation 
for automotive 
During early stages in development, 
ECUs to be simulated 
using behavioral 
cation Access Programming 
ing language 
of simulated 
ment. An AUTOSAR application 
Noe by compiling 
Link Library (DLL) and associating 
gle simulated 
nodes can be mixed with physical 
tion testing. 
node. As development 
the AUTOSAR codebase 
networks 
as a Dynamic­
the DLL with a sin­
progresses, 
simulated 
to aid integra­
used within CANoe to define the functionality 
nodes and to control 
environ­
the simulation 
can be simulated 
in CA­
2. Background 
software-architecture 
architecture, 
3. Goals 
that provide ser­
in the Basic 
based on hardware 
standard 
It is a layered 
components 
applications. 
(BSW) layers provide 
AUTOSAR is an emerging 
for automotive 
with each layer containing 
vices to higher layers [3]. Components 
Software 
abstractions, 
ment application 
(RTE) layer enables 
nents in the application 
provide 
mentations 
facturer 
functionality. 
then uses to develop 
and BSW layers. 
information 
proprietary 
their own 
services 
vendors 
AUTOSAR-compliant 
Typically, 
imple­
manu­
application-level 
software. 
while application-layer 
components 
imple­
The Runtime Environment 
exchange 
between compo­
of the BSW and RTE, which the vehicle 
Built-in 
error-handling 
mechanisms 
allow components 
passed up the stack  [4]. 
of errors as they occur, with low-level 
er­
the AUTOSAR error handling 
as they  are 
to be informed 
rors being abstracted 
Exercising 
different  layers 
errors are abstracted 
fault-injection 
cause errors in specific 
layers. 
to return an error code, or indirectly 
structure 
This could occur directly 
(Le., a memory location) 
framework should provide 
by forcing 
between components. 
mechanisms 
at 
into how 
To that end, a 
to 
the capability 
at different 
a component 
AUTOSAR components 
by corrupting 
a data 
within the component. 
faults 
ways to inject 
There are various 
7). Any adopted fault-injection 
Section 
account for the cost-sensitive 
dustry. 
existing 
sible. The costs incurred 
framework can be further 
In order to minimize 
resources 
in developing 
amortized 
into a system (see 
framework should 
nature of the automotive 
costs, 
in­
it is desirable 
tools as much as pos­
and off-the-shelf 
by encouraging 
porta-
to utilize 
that we wanted to answer was whether 
in AUTOSAR using only the 
CANoe). If so, we wished to gain 
of such a framework's 
understanding 
Therefore, 
regard for any single fault model. After 
this proof-of-concept 
strengths 
was de­
question 
to us (i.e., 
could be injected 
The initial 
or not faults 
tools available 
a practical 
and weaknesses. 
veloped without 
all, if the proof-of-concept 
then it is irrelevant 
work supports 
advantages 
identified, 
to various 
and disadvantages 
future work can formally 
fault models. 
a particular 
to question 
is not feasible 
in the first place, 
of the framework 
have been 
whether or not the frame­
fault model. Once the the general 
assess its applicability 
The proof-of-concept 
will be evaluated 
with respect 
to 
• Functionality. 
The framework should be able to exer­
The 
fault injection 
mechanisms. 
parame­
cise the AUTOSAR error-handling 
user should be able to control 
ters and view the effects of injected 
within CANoe. 
faults 
at run-time 
• Controllability. 
The user should be able to specify 
and perform experiments 
peatable 
fault location). 
in time (e.g., 
with parameters 
that are re­