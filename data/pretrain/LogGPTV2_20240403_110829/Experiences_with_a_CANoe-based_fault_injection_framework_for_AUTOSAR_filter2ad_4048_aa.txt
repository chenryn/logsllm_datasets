# Experiences with a CANoe-based Fault Injection Framework for AUTOSAR

## Authors
Patrick E. Lanigan, Priya Narasimhan, Thomas E. Fuhrman  
ECE Department, General Motors Research & Development, Warren, MI 48090, USA  
Carnegie Mellon University, Pittsburgh, PA 15213, USA  
Email: [PI:EMAIL], [PI:EMAIL], [PI:EMAIL]

## Abstract
As the automotive industry increasingly relies on software-intensive distributed systems, ensuring high levels of dependability is crucial. AUTOSAR (AUTomotive Open System ARchitecture) is a standard that aims to reduce the cost of developing new vehicle features while maintaining dependability. This work evaluates the use of a CANoe-based fault injection framework for AUTOSAR applications. We describe the implementation, challenges, and lessons learned from this proof-of-concept, which can help in characterizing the fault-handling capabilities of AUTOSAR. Formal verification and fault-injection methods play important roles in analyzing system dependability. The upcoming ISO 26262 standard highly recommends including fault-injection analysis as part of the dependability assessment for functional safety in automotive electronics.

## 1. Introduction
The automotive industry has become increasingly reliant on software, with some vehicles having up to 70 Electronic Control Units (ECUs). It is estimated that 50-70% of a vehicle's development costs are driven by electronics, and up to 90% of all innovations in modern vehicles come from software. To address these challenges, AUTOSAR was developed through a partnership of over 100 companies, including major automobile manufacturers and their suppliers. AUTOSAR promotes software reuse and reduces development costs by providing standardized software architectures.

When introducing advanced software-based systems, it is critical to ensure their safe operation. Faults discovered after a vehicle has gone into production can lead to significant recall costs. Therefore, a low-cost, software-based fault injection framework could be a valuable tool for evaluating the dependability of AUTOSAR applications. This report describes our experience using Vector CANoe to build such a framework.

## 2. Background
AUTOSAR is a layered software architecture for automotive systems, with each layer providing services to higher layers. The Basic Software (BSW) layers provide hardware abstractions, while the Runtime Environment (RTE) layer enables communication between components in the application layer. Built-in error-handling mechanisms allow components to be informed of errors as they occur, with low-level errors being abstracted as they propagate up the stack.

## 3. Goals
The primary goal of this proof-of-concept was to evaluate the feasibility of building a low-cost, software-based fault injection framework for AUTOSAR using only off-the-shelf tools like Vector CANoe. We aimed to understand the strengths and weaknesses of such a framework without adhering to any specific fault model. If the proof-of-concept is successful, future work can formally assess its applicability to various fault models.

### Key Objectives:
- **Functionality**: The framework should be able to exercise AUTOSAR error-handling mechanisms, allowing the user to control parameters and view the effects of injected faults within CANoe.
- **Controllability**: The user should be able to specify and perform repeatable experiments with precise control over fault injection (e.g., fault location and timing).

## 4. Implementation
The fault-injection framework was implemented using Vector CANoe, a common and readily available simulation tool for automotive applications. CANoe allows ECUs to be simulated using behavioral models, and the Communication Access Programming Language (CAPL) can be used to define the functionality of simulated nodes and control the simulation environment.

### Challenges and Solutions:
- **Configuration Files**: Significant portions of the AUTOSAR codebase are auto-generated. To facilitate fault injection, we avoided modifying auto-generated files and instead focused on configuration files (e.g., CANdb, FIBEX).
- **Integration**: During early stages of development, simulated nodes were mixed with physical nodes for integration testing. As development progressed, the AUTOSAR codebase was compiled into a Dynamic Link Library (DLL) and associated with a single simulated node in CANoe.

## 5. Evaluation
We evaluated the framework by injecting various types of faults into an AUTOSAR application running in a CANoe simulation environment. The evaluation focused on the framework's ability to exercise error-handling mechanisms and the controllability of fault injection.

### Results:
- **Functionality**: The framework successfully exercised AUTOSAR error-handling mechanisms, allowing the user to control fault injection parameters and observe the effects.
- **Controllability**: The user could specify and perform repeatable experiments with precise control over fault injection, including fault location and timing.

## 6. Lessons Learned
- **Tool Suitability**: CANoe is a suitable environment for injecting faults into AUTOSAR applications, but some faults may require a lower level of abstraction than CANoe provides.
- **Cost-Effectiveness**: Using off-the-shelf tools like CANoe can significantly reduce the cost of fault-injection analysis in the automotive industry.
- **Future Work**: The next step is to develop a more comprehensive fault-injection framework that integrates both hardware- and software-based techniques.

## 7. Related Work
Previous research has explored fault-injection methods for analyzing the dependability of automotive systems. However, to the best of our knowledge, this represents the first attempt to use CANoe as a fault-injection environment for AUTOSAR applications.

## 8. Conclusion
This report describes our experience with a CANoe-based fault injection framework for AUTOSAR. The framework provides a low-cost, software-based solution for evaluating the fault-handling capabilities of AUTOSAR applications. Future work will focus on developing a more comprehensive fault-injection framework that integrates both hardware- and software-based techniques.

---

**Acknowledgments**
This work was supported by [Funding Sources, if any].

**References**
[1] Reference 1
[2] Reference 2
[3] Reference 3
[4] Reference 4
[5] Reference 5
[6] Reference 6
[7] Reference 7
[8] Reference 8

---

**IEEE Copyright Notice**
Â©2010 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other uses, in any current or future media, including reprinting/republishing this material for advertising or promotional purposes, creating new collective works, for resale or redistribution to servers or lists, or reuse of any copyrighted component of this work in other works.