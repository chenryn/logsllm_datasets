*   `on-failure`:如果容器失败，并且退出代码不为零，这将重新启动容器
*   `always`:这总是重新启动容器，而不用担心返回代码
# 还有更多...
您也可以通过`on-failure`策略获得可选的重启次数，如下所示:
```
    $ docker container run --restart=on-failure:3 \
          -d -i -t ubuntu /bin/bash
```
如果出现任何故障，前面的命令只会重新启动容器三次。
# 请参见
查看`docker container run`的`help`选项:
```
    $ docker container run --help
```
你可以在 Docker 的网站上找到帮助:https://docs . Docker . com/engine/reference/command line/concon con con _ run/[，https://docs . Docker . com/engine/reference/run/# restart-policies-restart](https://docs.docker.com/engine/reference/run/#restart-policies-restart)。
Docker 关于自动启动容器的文档可以在这里找到:[https://docs . docker . com/engine/admin/start-containers-automatic/](https://docs.docker.com/engine/admin/start-containers-automatically/)。
如果重启策略不符合您的要求，则使用流程经理，如`systemd`、主管或新贵。
# 获得容器内部的特权访问
Linux 将传统上与超级用户相关的特权划分为不同的单元，称为功能(在基于 Linux 的系统上运行`man capabilities`)，可以独立启用和禁用。例如，`net_bind_service`功能允许非用户进程将端口绑定到 1，024 以下。默认情况下，Docker 以有限的功能启动容器。通过容器内的特权访问，我们分配了更多的能力来执行通常由根用户完成的操作。为了更好地理解特权模式，让我们首先在非特权容器上尝试一个简单的挂载，并观察其效果:
![](img/b191987d-f148-493c-8b76-0386883f11cf.png)
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。
# 怎么做...
要使用`privileged`模式，请使用以下命令:
```
    $ docker container run --privileged [OPTIONS] IMAGE [COMMAND] [ARG...]
```
现在，让我们用特权访问来尝试前面的例子:
```
    $ docker container run --privileged -i -t ubuntu /bin/bash
```
![](img/6cb83060-dfcb-4304-848c-27fc9e818095.png)
# 它是如何工作的...
这提供了容器内的几乎所有功能。
# 还有更多...
这种模式会导致安全风险，因为容器可以在 Docker 主机上获得根级访问权限。在 Docker 1.2 或更高版本中，添加了两个名为`--cap-add`和`--cap-del`的新标志，以提供容器内部的细粒度控制。例如，要防止容器内出现任何`chown`，请使用以下命令:
```
    $ docker container run --cap-drop=CHOWN [OPTIONS] IMAGE [COMMAND]  
 [ARG...]
```
详见[第九章](09.html)、*Docker 安全*。
# 请参见
查看`docker container run`的`help`选项:
```
    $ docker container run --help
```
Docker 网站上的文档可以在这里找到:
*   [https://docs . docker . com/engine/reference/command line/container _ run/](https://docs.docker.com/engine/reference/commandline/container_run/)
*   [https://docs . docker . com/engine/reference/run/# runtime-priority-and-Linux-capabilities](https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities)
Docker 1.2 发布公告可以在这里找到:[http://blog.docker.com/2014/08/announcing-docker-1-2-0/](http://blog.docker.com/2014/08/announcing-docker-1-2-0/)。
# 访问容器内的主机设备
从 Docker 1.2 开始，我们可以按照`run`命令，使用`--device`选项授予主机设备对容器的访问权限。之前，你必须用`-v`选项绑定挂载它，而这必须用`--privileged`选项来完成。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。您还需要一个设备来传递容器。
# 怎么做...
您可以使用以下语法授予主机设备对容器的访问权限:
```
    docker container run --device=:: [OPTIONS] IMAGE [COMMAND]  [ARG...]
```
下面是使用上述命令的示例:
```
    $ docker container run --device=/dev/sdc:/dev/xvdc \
              -i -t ubuntu /bin/bash
```
# 它是如何工作的...
前面的命令将访问容器内的`/dev/sdc`。
# 请参见
查看`docker container run`的`help`选项:
```
    $ docker container run --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ run/](https://docs.docker.com/engine/reference/commandline/container_run/)。
# 将新流程注入运行中的容器
在进行开发和调试时，我们可能希望查看已经运行的容器内部。有几个实用程序，比如`nsenter`([【https://github.com/jpetazzo/nsenter】](https://github.com/jpetazzo/nsenter))，允许我们进入容器的命名空间来检查它的状态。通过在 Docker 1.3 中添加的`exec`选项，我们可以在运行的容器中注入一个新的进程。
# 准备好
确保 Docker 守护程序正在主机上运行，并且您可以通过 Docker 客户端进行连接。您可能还需要一个正在运行的容器来将进程注入其中。
# 怎么做...
您可以使用以下命令将进程注入正在运行的容器中:
```
     $ docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
```
让我们启动一个`nginx`容器，然后将`bash`注入其中:
```
    $ ID=$(docker container run -d redis)
    $ docker container exec -it $ID /bin/bash
```
![](img/3fae6a8b-6dbd-40c8-b36f-a1b26d66be3a.png)
# 它是如何工作的...
`exec`命令进入容器的命名空间，开始新的进程。
# 请参见
查看 Docker 检查的`help`选项:
```
       $ docker container exec --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ exec/](https://docs.docker.com/engine/reference/commandline/container_exec/)。
# 读取容器的元数据
在进行调试、自动化等工作时，我们需要容器的配置细节。Docker 提供了`container inspect`命令来轻松获取这些。
# 准备好
确保 Docker 守护程序正在主机上运行，并且可以通过 Docker 客户端进行连接。
# 怎么做...
要检查容器，请运行以下命令:
```
    $ docker container inspect [OPTIONS] CONTAINER [CONTAINER...]
```
我们将启动一个容器，然后检查它，就像这样:
```
    $ ID=$(docker container run -d -i ubuntu /bin/bash)
    $ docker container inspect $ID
```
![](img/3ebf6b17-df90-4069-9cec-cd71b13a55a4.png)
# 它是如何工作的...
Docker 将查看给定容器的元数据和配置，并以 JSON 格式呈现它。使用像`jq`这样的工具，这个 JSON 格式的输出可以进一步后处理。
# 还有更多...
通过`-f | --format`选项，我们可以使用 Go(编程语言)模板来获取这些特定信息。以下命令将为我们提供容器的 IP 地址:
```
    $ docker container inspect \
         --format='{{.NetworkSettings.IPAddress}}'  $ID
    172.17.0.2
```
# 请参见
查看`docker container inspect`的`help`选项:
```
       $ docker container inspect --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ inspect/](https://docs.docker.com/engine/reference/commandline/container_inspect/)。
# 标签和过滤容器
在 Docker 1.6 中，增加了一个特性，这样我们就可以标记容器和映像，通过它们我们可以将任意键值对作为元数据附加。您可以将它们视为环境变量，这些变量对于在容器内运行的应用来说是不可用的，但是对于管理映像和容器的 Docker 客户端来说是可用的。附加到映像上的标签也会应用到开始使用这些映像的容器上。我们也可以在启动容器时给它们贴上标签。标记了映像或容器后，标签可用于过滤或选择目的。
对于这个食谱，让我们假设我们有一个标签为`com.example.image=docker-cookbook`的映像。我们将在下一章中看到如何为映像分配标签:
![](img/abe3bb8b-d402-4c64-8bc4-446cbf184536.png)
从前面的截图中可以看到，如果我们使用带有`docker image ls`命令的过滤器，我们只能得到在映像元数据中找到相应标签的映像。
# 准备好
确保 Docker 守护程序 1.6 或更高版本正在主机上运行，并且可以通过 Docker 客户端连接到。
# 怎么做...
使用`docker container run`命令的`--label`或`-l`选项向容器的元数据添加标签，如下所示:
```
    $ docker container run \
    --label com.example.container=docker-cookbook \ 
       label-demo date
```
让我们从一个没有标签的容器开始，然后从另外两个标签相同的容器开始:
![](img/b6d36c6d-59a1-409f-b489-04ab8f4535fb.png)
现在，如果我们在没有任何过滤器的情况下运行`docker container ls -a`，它将列出所有容器。但是，我们可以通过使用`--filter`或`-f`选项对`docker container ls -a`命令进行过滤，将容器列表限制为我们标记的容器:
![](img/ff841bed-7c9e-465b-85b1-b220faa51f77.png)
# 它是如何工作的...
Docker 在启动容器时将标签元数据附加到容器，并在列出容器或执行其他相关操作时匹配标签。
# 还有更多...
所有贴在容器上的标签都可以通过`docker container inspect`命令列出。如我们所见，`inspect`命令返回映像和附着在容器上的容器标签:
![](img/9d1a2272-72a5-47a4-b480-6f7152f67c07.png)
您可以使用`--label-file`选项将文件中的标签应用于容器。该文件应该有一个标签列表，由一个新的 EOL 分隔。
这些标签不同于 Kubernetes 标签，我们将在[第 8 章](08.html)、 *Docker 编排和托管平台*中探讨。
# 请参见
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ run/](https://docs.docker.com/engine/reference/commandline/container_run/)。
标注关键格式推荐可以在这里找到:[https://docs . docker . com/engine/user guide/labels-custom-metadata/# key-format-推荐](https://docs.docker.com/engine/userguide/labels-custom-metadata/#key-format-recommendations)。
标注价值指引可以在这里找到:[https://docs . docker . com/engine/user guide/labels-custom-metadata/# value-指引](https://docs.docker.com/engine/userguide/labels-custom-metadata/#value-guidelines)。
关于为 Docker 添加标签支持的详细信息，请参见:[http://rancher.com/docker-labels/](http://rancher.com/docker-labels/)。
# 阅读容器内的僵尸
在 Linux(以及所有类似 Unix 的)操作系统上，当一个进程退出时，除了进程表中的条目之外，与该进程相关的所有资源都会被释放。进程表中的这个条目一直保留到父进程读取该条目以了解其子进程的退出状态。一个过程的这种短暂状态被称为**僵尸**。一旦父进程读取了条目，僵尸进程就会从进程表中移除，这称为收割。如果父进程先于子进程退出，`init`进程(PID 1)采用子进程(PID 1)，并且当它们退出时，它最终收获被采用的子进程:
![](img/b6052bae-c55c-4e4a-8031-11719697f9a1.png)
在前面的截图中，我们截取了左边 Ubuntu 14.04 和右边 Ubuntu 18.04 的进程树。正如我们所看到的，两个过程树的左边和右边都有 PID 1 处的`init`过程。
`systemd` is a variant of the `init` system and is adopted by many Linux distributions.
如果我们回到 Docker 的命名空间讨论，Docker 引擎会为每个`docker`容器创建一个新的 PID 命名空间，这样容器内的第一个进程就会映射到 PID 1。Docker 被设计为每个容器运行一个进程，通常在容器内运行的进程不会创建子进程。但是，如果容器内部的进程创建了子进程，那么就需要一个`init`系统来收获僵尸进程。在这个食谱中，我们将看看如何为我们的容器配置一个`init`进程来收获僵尸进程。
# 准备好
确保 Docker 守护程序 1.13 或更高版本正在主机上运行，并且可以通过 Docker 客户端进行连接。
# 怎么做...
您可以使用 Docker 容器运行命令的`--init`选项启动带有`init`进程的容器，如下语法所示:
```
    docker container run --init [OPTIONS] IMAGE [COMMAND] [ARG...]   
```
让我们创建四个容器，两个没有`--init`选项，另外两个有`--init`选项，并使用`pstree`命令比较过程树:
![](img/b16552a4-cc4b-45e1-a797-bc27abf5fcb2.png)
# 还有更多...
默认情况下，`docker container run --init`命令使用`tini`([https://github.com/krallin/tini](https://github.com/krallin/tini))作为`init`进程。
守护程序标志`--init-path`允许您配置自己的`init`进程。
# 它是如何工作的...
Docker 守护程序将以`init`作为第一个进程启动容器，然后是指定的命令。
# 请参见
查看`docker container run`的`help`选项:
```
    $ docker container run --help
```
Docker 网站上的文档可以在这里找到:[https://docs . Docker . com/engine/reference/command line/container _ run/](https://docs.docker.com/engine/reference/commandline/container_run/)。