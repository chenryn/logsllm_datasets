reaches this state after 10 calls, well before the secret value S
is initialized at approximately the 100th call. For the second
output and beyond, predicting the internal state by guessing
inputs is no easier than guessing any single 32-bit output
value. The ﬁrst value, however, shows less than ideal security
for κ1. We explore this next.
Predicting early GRI outputs. To conﬁrm that, in fact,
there is a vulnerability, we build an attack that works as
follows. First, we collect a dataset of multiple boots using
our instrumented kernel. From each of t traces, we group all
the cycle counters from the ﬁrst call to GRI, all the cycle
counters from the second, and so on as we did with previous
complexity estimates. Now, however, we select a range of
cycle counters at each depth to include in the attack. To make
the attack more efﬁcient, we search the smallest contiguous
range that covers a fraction (we use 80%) of the observed
cycle counters in the dataset. This excludes some outliers
and provides a moderate speedup of the attack time. We let
τi denote the logarithm of the search space resulting from
this process. Figure 5 shows the values of τi for the ﬁrst few
outputs using our dataset of 200 boots on VMware with the
instrumented kernel. Again, only the ﬁrst output is weaker
than the desired 32-bits of security.
To evaluate this interpolated attack model we analyzed the
ﬁrst call to GRI from each of 100 boots on VMware. We
remove one trace from this dataset (the victim) and train
an attack on the remaining traces to identify a range of
possible values for the cycle counter CC. The remaining
values (HV , J, P and S) are trivially known for the ﬁrst call
on this platform. We use a GRI simulator and iterate over the
identiﬁed range of values for CC. The attack is successful
and we verify that we can produce the full internal state HV ,
not just the output value. This is useful for validation since
collisions are very likely when one tests up to 227 guesses
for a 32-bit number; the probability of a collision is 1 in 32.
A successful attack indicates that security is less than it
should be for the ﬁrst output. However, we note that taking
advantage of this would require the ability to test which of
the 227 values are correct. This value is the stack canary for
the kthreadd (kernel thread daemon) process. It is not
clear that this weakness can be exploited, but this represents
a failure of the RNG.
V. SNAPSHOT RESUMPTION RNG SECURITY
Modern VM managers allow users to pause a running
VM, make a copy of the entire state (called a snapshot)
of the VM including CPU registers, memory, and disk, and
later use that copy to restart the VM in the exact state at
566
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
Situation
Snapshot state
UP.ec ∈ [8, 56]
(1) Cached entropy
(2) Racing fast pool
(3) Transfer threshold
Figure 6. Three situations leading to reset vulnerabilities with /dev/uran-
dom. The symbol ∞ represents no limit on the number of repeated output
bits before the condition in the third column is met.
IP.ec  0 at the time of snapshot, then the bits in the
non-blocking UP pool will be used to satisfy any request
of size ≤ 8n bits without transferring bits from the input
pool. Since the output generation algorithm is deterministic,
this results in repeated output of size ≤ 8n bits under these
conditions. UP.ec has a maximum value of 56 bits because
of the internal mechanics of the RNG and so the maximum
repeated output length is n bytes where n ≤ UP.ec ≤ 7.
The conditions are the same for /dev/random.
(2) Racing the fast pool. Even if a transfer from the input
pool occurs after reset, this alone is does not prevent repeat
outputs. To generate unique outputs, the RNG requires at
least one new input in the input pool and a transfer from
the input pool to the secondary pool (UP or RP). After
a reset, the most likely addition to the input pool is from
the function add interrupt randomness() as these account
for an overwhelming majority of /dev/(u)random inputs. As
described earlier, these inputs are buffered in the interrupt
pool (also called the fast pool) until an overﬂow event occurs
and the contents of the interrupt pool are mixed into the input
pool. This creates a race condition between interrupt pool
overﬂow events and reads from /dev/(u)random. An overﬂow
event occurs every 64 interrupts or if 1 second has passed
since the last overﬂow when an interrupt input is received.
During this window, reads to /dev/urandom of arbitrary size
will produce repeated outputs.
For /dev/random, repeated outputs will occur during the
same window until /dev/random blocks for new entropy.
567
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
Thus the maximum number of repeated bits from /dev/ran-
dom is 4088.
To exercise this situation for /dev/urandom we used the
experimental procedure above. Because we are comparing
512-bit output values, we can rule out repeats caused by
situation (1), discussed above. To exclude situation (3)
discussed below (which doesn’t involve the input or fast
pool), we want the input pool entropy count to be much
higher than 192. We achieve this by downloading a large ﬁle
(1GB) prior to capturing the snapshot. The inbound packets
from the download drive interrupts in the guest kernel which
increases the input pool entropy count. All resumption had
an initial input pool entropy count of at least 1,283 on both
Xen and VMware.
We were not able to exhibit this vulnerability on VMware
with the procedure above. On Xen, 2 snapshots experienced
errors on resumption and produced no usable output. Of the
remaining 8 snapshots, one snapshot produced no repeated
outputs (we didn’t win the race), and the remaining 7
snapshots exhibited at
least one repeated 512-bit output
(the ﬁrst output requested) after resumption. Of these the
maximum duration for repeats was 1.7s after resumption.
This demonstrates that the RNG does a poor job of updating
its state after resumption, due to the (overly) complicated
pool structure and pool-transfer rules.
(3) Input pool entropy count below threshold. The input
pool entropy count IP.ec must reach the transfer threshold
of 192 bits before fresh inputs are transferred from the input
pool to the non-blocking pool UP. While the RNG is in this
state, an unlimited quantity of repeatable output values can
be generated from /dev/urandom. For /dev/random of course,
this is not true, as repeat values will only be provided until
the entropy estimate for the blocking RP pool is exhausted
(as per situation (1) above).
To arrange this situation, immediately before capturing the
snapshot, we execute a 10 second read from /dev/random to
reduce the input pool entropy count below 64 and trigger
this condition.
On both VMware and Xen, the maximum value for IP.ec
upon resumption was 48 — sufﬁcient to put the RNG into
situation (3). On VMware, we observed that all snapshots
produced repeat outputs for the duration of the experiment
(30 seconds). Results on Xen were similar (excluding failed
resumptions). This indicates that if IP.ec is very low when
a snapshot is captured, it may take more than 30 seconds
for the /dev/random RNG to reach a secure state.
Entropy starvation attack for situation (3).
In Section II
we observed that there exists a simple entropy starvation
attack against /dev/urandom, where a (malicious) user-level
process simply performs continuous reads from /dev/ran-
dom. The internal logic of the RNG is such that in this
case the input pool will always transfer to the blocking
RP pool, and never the UP pool. This can be used to
/dev/urandom produces
extend the amount of time that
repeated outputs in situation (3) where the input pool entropy
count is below the threshold to transfer bits from IP to
UP. An adversary with the ability to run an unprivileged
process on the system can easily engage this condition
by reading from /dev/random. If a remote attacker makes
(legitimate) requests to a public interface that triggers large
of frequent reads from /dev/random, then the same effect
may be possible without requiring a local account.
The experimental procedure above was used with the
following deviations. We execute a continuous read from
/dev/random (dd if=/dev/random) for the duration of
the experiment. After reset, the measurement process per-
forms 512-bit reads from /dev/urandom every 1 second for
a duration of 120 seconds. Upon resumption, all snapshots
exhibited repeated 512-bit outputs for the duration of the
experiment on both VMware and Xen (excluding failed
resumptions).
Impact on OpenSSL. The experiments above show that
reset vulnerabilities exist in /dev/(u)random, and give appli-
cations stale random values after resumption. We now brieﬂy
investigate the potential for this to lead to exploitable vul-
nerabilities against applications relying on /dev/urandom for
randomness after a VM resumption. We focus on OpenSSL
v1.0.1e and RSA key generation. When calling openssl
genrsa from the command line, OpenSSL seeds its internal
RNG with 32 bytes read from /dev/urandom as well as the
current system time, process ID, and dirty memory buffers.
We instrument this version of OpenSSL in order to observe
internal values of the key generation process. We then set up
a VM running an unmodiﬁed Linux kernel on VMware that
will, immediately after being reset, execute the command
openssl genrsa from the shell. We observe that just
connecting to the VM via SSH to prepare it for a snapshot
typically drives the input pool entropy count below 192
before we take a snapshot. This is caused because a number
of processes are created during login and each new process
consumes many bytes from /dev/urandom to initialize stack
canaries and perform ASLR.
We captured 27 snapshots, performed 2 resets from each
snapshot and then analyzed the resulting outputs from the
OpenSSL instrumentation and OpenSSL’s normal output.
A single snapshot produced an identical prime p in the
private key in both resets, but other values in the private
key differed. Presumably, after the prime p was generated,
differing dirty memory buffers caused the OpenSSL RNGs
to diverge. (Knowing one prime value of a private key
is sufﬁcient to derive the other and destroys the security
of an RSA private key.) Of the remaining 26 snapshots,
many had identical /dev/urandom output, but typically the
dirty memory buffers differed early enough in execution
to produce unique outputs. These dirty memory buffers
are likely different between resets because Address Space
568
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
Layout Randomization (ASLR) (determined in part by GRI)
shifts around the OpenSSL memory layout.
To validate this hypothesis, we then disabled ASLR on
the guest VM prior to taking a snapshot by executing echo
0 > /proc/sys/kernel/randomize_va_space
as root and repeat our experiment for 30 snapshots with 2
resets from each snapshot. Of these, 23 snapshots produced
from /dev/urandom and identical RSA
repeated output
private keys. The other 7 snapshots had input at
least
1 differing value into the OpenSSL RNG after reset —
variously this differing value was one of /dev/urandom
output, PID, or system time.
We note that unlike prior reset vulnerabilities [26], these
are the ﬁrst to be shown in which the system RNG is invoked
after VM resumption. In [26],
the authors ask whether
consuming fresh random bytes from the system RNG after
a reset
to eliminate reset vulnerabilities in
applications. This answers that question in the negative, and
highlights clear problems with the /dev/(u)random design for
settings where snapshots are employed.
is sufﬁcient
Reset vulnerabilities on FreeBSD. We also perform a
limited set of experiments with snapshot resumptions using
an (uninstrumented) version of FreeBSD within VMware,
to see if reset vulnerabilities affect other RNG designs (a
description of FreeBSD’s design is given in [13]). In each
of three resets using the same snapshot, we took 10 samples,
512 bits each, from /dev/random (same as /dev/urandom on
FreeBSD) one millisecond after reset. In all three resets the
same sequence of outputs were produced. This is a very
narrow window, and may not be practically exploitable, but
we admit that we did not test longer time windows.
Reset vulnerabilities on Windows. We perform similar
experiments on Microsoft Windows 7 running in VMware
using the rand s() random number generator interface. In
Windows, rand s() produces a single, 32-bit random output
value for each call. In all resets from 5 different snapshots
using various timings and number of samples, rand s()
reliably produced repeated 32-bit outputs multiple resets of
the same snapshot. In all cases, at least 25% of outputs are
repeated. In a separate experiment, we perform 10 resets
from the same snapshot, and after reset we sample a single
32-bit output every 1s for a total of 2000 samples (collected
over more than 30 minutes). We found more than 500 (25%)
repeated outputs shared between each pair of resets, and
some pairs have 1000 (50%) repeated outputs. We also