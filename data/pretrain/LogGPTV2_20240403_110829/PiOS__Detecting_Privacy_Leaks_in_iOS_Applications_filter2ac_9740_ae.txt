### 4.2 Limitations
Recall that statically determining the receiver and selector for every call to the `objc_msgSend` function is not always possible. The selector, which is the name of a method, is typically stored as a string value in the `__objc_selref` section of the application. However, any string can be converted to a selector, and it is possible to write programs where the string values are determined dynamically (e.g., from a network response or user configuration). This limitation applies to all static analysis approaches and is not specific to PiOS.

For example, aggregate types in Objective-C, such as `NSArray` and `NSDictionary`, are not generic. This means that the types of objects in such containers cannot be specified more precisely than `id` (which is of type `NSObject`). For instance, the delegate method `touchesEnded:withEvent` of the `UIResponder` class is called whenever the user finishes a touch interaction with the graphical user interface (e.g., clicking an element or swiping an area). This method receives as its first argument a pointer to an object of type `NSSet`. Although this set contains only `UITouch` elements, the lack of generic support in Objective-C prevents the type information from being stored with the aggregate instance. Similarly, any object can be added to an `NSArray`. Thus, PiOS must treat any value retrieved from an aggregate as `NSObject`. Nevertheless, as described in Section 4.2.1, PiOS might still be able to reason about the type of such an object if a subsequent call to `objc_msgSend` uses a selector that is implemented by exactly one class.

### 5. Related Work

#### 5.1 Static Analysis and Program Slicing
Static analysis and program slicing have been used extensively in various contexts. Weiser [19] was the first to formalize program slicing, a technique that PiOS employs to calculate program slices that define receiver and selector values at call-sites to the `objc_msgSend` dynamic dispatch function.

#### 5.2 Static Binary Analysis
Static binary analysis has been used for various purposes. Kruegel et al. [15] utilized static analysis to perform mimicry attacks on advanced intrusion detection systems that monitor system call invocations. Christodorescu and Jha [6] presented a static analyzer for executables aimed at detecting malicious patterns in binaries, even if the content is obfuscated. Similarly, the work by Christodorescu et al. [7] is based on binary static analysis and identifies malicious software using a semantics-aware malware detection algorithm. However, some obfuscation techniques available on the x86 architecture cannot be used on ARM-based processors. The RISC architecture of ARM facilitates more robust disassembly of binaries, as instructions cannot be nested within other instructions, and strict memory alignment prohibits jumping to the middle of ARM instructions. Thus, disassembling ARM binaries generally produces better results than disassembling x8CT binaries.

#### 5.3 Optimization Techniques
Calder and Grunwald [4] optimized C++ programs by replacing virtual function calls with direct calls if the program contains exactly one implementation that matches the signature of the virtual function. This is possible because the mangled name of a function stored in an object file contains information on the class and parameter types. PiOS uses a similar technique to resolve the type of a receiver of a message. However, PiOS follows this approach only if the type of the receiver cannot be determined by backward slicing and constant propagation.

Dean et al. [9] presented an approach that performs class hierarchy analysis to statically resolve virtual function calls and replace them with direct function calls. In PiOS, we do not use the class hierarchy to resolve the invoked method. However, we use this information to verify that the results of the backward slicing and forward propagation steps are consistent with the class hierarchy, ensuring sensible results.

#### 5.4 Static Data Flow Analysis
PiOS is also related to existing approaches that perform static data flow analysis. Livshits and Lam [16], for example, used static taint analysis for Java bytecode to identify vulnerabilities resulting from incomplete input validation (e.g., SQL injection, cross-site scripting). Tripp et al. [18] focused on making static taint analysis scalable to large real-world applications by introducing hybrid thin-slicing combined with taint analysis to analyze large web applications, even those based on frameworks like Struts or Spring. Additionally, Pixy [14] performs inter-procedural, context-sensitive data-flow analysis on PHP web applications to identify taint-style vulnerabilities.

#### 5.5 Mobile Device Security
Enck et al. [10] published TaintDroid, a system that shares a similar goal with our work: analyzing privacy leaks in smartphone applications. Unlike PiOS, TaintDroid targets Android applications and performs dynamic information-flow tracking to identify privacy leaks. Most Android applications are executed by the open-source Dalvik virtual machine, and TaintDroid's information-flow capabilities were built into a modified version of this VM. iOS applications, in contrast, are compiled into native code and executed directly by the device’s CPU. TaintDroid was evaluated on 30 popular Android applications, and the results align well with our findings. Many of the advertising and statistics libraries identified in Section 6.2 have corresponding Android versions, and TaintDroid raised alerts when applications transmitted location data to AdMob, Mobclix, and Flurry back-end servers.

Enck et al. [11] also presented Kirin, an approach that automatically extracts the security manifest of Android applications. Before installation, this manifest is evaluated against logic invariants, and the user is prompted for consent only if these invariants are violated. This concept provides users with basic information to decide whether to install an application. Unfortunately, the iOS platform does not provide such amenities, and users must rely on the verbal description of the application and Apple’s vetting process.

Chaudhuri [5] introduced a formal language for Android, complete with operational semantics and a type system, aimed at describing Android applications with regard to security properties. However, the language currently supports only Android-specific constructs, and general Java constructs that make up the majority of an application’s code cannot be represented.

To the best of our knowledge, PiOS is the first to propose an automated approach for in-depth privacy analysis of iOS applications.

### 6. Conclusions
The growing popularity and sophistication of smartphones, such as the iPhone and Android devices, have increased concerns about user privacy. To address these concerns, smartphone OS designers have employed different security models. For example, Android applications come with a manifest that shows all required permissions to the user at installation time. In contrast, Apple determines, on behalf of its users, if an application conforms to predefined privacy rules. However, Apple’s vetting process is not public, and there have been cases where vetted applications have violated these rules.

The goal of this work is to automatically analyze iOS applications and study the threats they pose to user data. We present a novel approach that can automatically create comprehensive control flow graphs (CFGs) from binaries compiled from Objective-C code. We then perform reachability analysis on the generated CFGs to identify private data leaks. Our experiments, conducted on over 1,400 iPhone applications, show that most applications do not secretly leak sensitive information. This is true for both vetted applications on the App Store and those provided by Cydia. However, a majority of applications leak the device ID, which can provide detailed information about a user’s habits. There is also the risk that additional data could be used to tie a device ID to a person, increasing privacy risks.

### 7. Acknowledgements
This research was funded by the European Union Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 257007. It was also supported in part by Secure Business Austria and the European Commission through project IST-216026-WOMBAT funded under the 7th framework program. This work was partially supported by the ONR under grant N000140911042 and by the National Science Foundation (NSF) under grants CNS-0845559, CNS-0905537, and CNS-0716095.

### References
[1] http://thebigboss.org.
[2] AppTrakr, Complete App Store Ranking. http://apptrakr.com/.
[3] iPhone Developer Program License Agreement. http://www.eff.org/files/20100302_iphone_dev_agr.pdf.
[4] B. Calder and D. Grunwald. Reducing indirect function call overhead in C++ programs. In POPL '94: Proceedings of the 21st ACM SIGPLAN-SIGACT symposium on Principles of programming languages, pages 397–408, New York, NY, USA, 1994. ACM.
[5] A. Chaudhuri. Language-based security on Android. In ACM Workshop on Programming Languages and Analysis for Security (PLAS), 2009.
[6] M. Christodorescu and S. Jha. Static analysis of executables to detect malicious patterns. In SSYM'03: Proceedings of the 12th conference on USENIX Security Symposium, pages 12–12, Berkeley, CA, USA, 2003. USENIX Association.
[7] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant. Semantics-aware malware detection. In IEEE Symposium on Security and Privacy (Oakland), 2005.
[8] A. Cohen. The iPhone Jailbreak: A Win Against Copyright Creep. http://www.time.com/time/nation/article/0,8599,2006956,00.html.
[9] J. Dean, D. Grove, and C. Chambers. Optimization of object-oriented programs using static class hierarchy analysis. In European Conference on Object-Oriented Programming, 1995.
[10] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: an information-flow tracking system for real-time privacy monitoring on smartphones. In Proceedings of OSDI 2010, October 2010.
[11] W. Enck, M. Ongtang, and P. McDaniel. Understanding Android security. IEEE Security and Privacy, 7(1):50–57, 2009.
[12] J. Freeman. http://cydia.saurik.com/.
[13] Gartner Newsroom. Competitive Landscape: Mobile Devices, Worldwide, 2Q10. http://www.gartner.com/it/page.jsp?id=1421013, 2010.
[14] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static analysis tool for detecting web application vulnerabilities (short paper). In IEEE Symposium on Security and Privacy, 2006.
[15] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna. Automating mimicry attacks using static binary analysis. In 14th USENIX Security Symposium, 2005.
[16] V. B. Livshits and M. S. Lam. Finding security vulnerabilities in Java applications with static analysis. In 14th USENIX Security Symposium, 2005.
[17] N. Seriot. iPhone Privacy. http://www.blackhat.com/presentations/bh-dc-10/Seriot_Nicolas/BlackHat-DC-2010-Seriot-iPhone%2dPrivacy-slides.pdf.
[18] O. Tripp, M. Pistoia, S. J. Fink, M. Sridharan, and O. Weisman. Taj: effective taint analysis of web applications. In ACM Conference on Programming Language Design and Implementation, 2009.
[19] M. Weiser. Program slicing. In ICSE '81: Proceedings of the 5th international conference on Software engineering, pages 439–449, Piscataway, NJ, USA, 1981. IEEE Press.
[20] Wired. Apple Approves, Pulls App with Hidden Tethering Mode. Flashlight. http://www.wired.com/gadgetlab/2010/07/apple-approves-pulls-flashlight%2dapp-with-hidden-tethering-mode/.