namely attacks that might allow such operators to bypass the security protections provided by the
HSMs. By requiring authorization from n operators from the domain, the security of operations
that add new entities to a domain is anchored on the assumption that a quorum of n operators
from the domain will always contain at least one honest operator that follows the protocol, where
n is a security parameter for the domain. A more detailed description of the domain management
operations is included in Section 3, along with their formalization in EasyCrypt.
DMP Implementation. Not counting the crypto libraries, the implementation of the DMP protocol
is spread across some 16.5K lines of Java code. The conformance of this code to the protocol
level design is checked via integration tests. Additionally, a formal code validation mechanism has
3
Fig. 1. Structure of the machine-checked proof
been built using an extension to a taint tracking type system (the Checker Framework, [19]). The
checked property is a necessary condition for conformance to the protocol: a domain key must not
be returned as part of the return value of an API call without ﬁrst being encrypted by another key.
This check is performed continuously, every time the KMS codebase changes, and it required only
323 manual annotations to the codebase.
DMP Functional Interface. The DMP provides an encryption functionality for each of its domains.
Diﬀerent domains can vary in the entities that they trust, their tolerance for dishonesty, and
other security-related parameters. For each domain, the provided encryption functionality has the
following interface8 (formalized in Section 4):
– New(hdl) creates a new domain key within the domain and associates it to a key identiﬁer hdl.
The result indicates whether the operation was successful.
– Enc(hdl, msg, ad) uses the domain key associated with identiﬁer hdl to encrypt the payload msg
with associated data ad, returning the ciphertext.
– Dec(hdl, cph, ad) uses the domain key associated with identiﬁer hdl to decrypt ciphertext cph with
associated data ad and, if successful, returns the recovered plaintext.
The goal of the DMP security proof is to show that the DMP provides an idealized version of
this interface (with a small probability of error). This ideal interface is close to that of standard
Authenticated Encryption with Associated Data (AEAD), as detailed in Section 4, except that
operations might fail (with no eﬀect), as one might expect in a distributed system.
The EasyCrypt security proof consists of three layers.9 The top layer gives a real-vs-ideal world
security deﬁnition for the DMP and shows that security of a DMP domain in this model follows
from the secrecy of its domain keys. The next layer shows that the DMP does indeed preserve
the secrecy of domain keys of so-called “honest” domains (described in Section 3), assuming the
secure implementation of the low-level cryptographic constructions used to create domain tokens.
The bottom layer shows the security of these low-level constructions.
8 This interface mentions only domain keys, so the functionality gives a simple way to separate the security provided
by the DMP from its use in the rest of AWS KMS.
9 Note that the scale of the proof does not increase the trusted base, as it is fully machine-checked by EasyCrypt
– indeed, this is the main motivation for machine-checked provable security; the guarantee that the proof justiﬁes
the formalized security theorem requires only trust in EasyCrypt itself.
4
Sig(UF)SigService(Real-Ideal)Hash(CR)Hash Chain(Real-Ideal)Policy(Real-Ideal)Policy(Bad Event)AEADTag-BasedMR-PKEODHGroup/KDFCrypto API(Ind-based)AEAD Service(Real-Ideal)Fig. 2. High-level view of the DMP.
Proof: Real-vs-ideal World Security. At the top layer of the EasyCrypt proof lies a formal deﬁni-
tion of security for encryption services supported by key management protocols such as the DMP
(detailed in Section 5.1). The deﬁnition follows the real-vs-ideal paradigm of the UC framework
(in fact, our proof can be seen as being carried out in a speciﬁc hybrid model in the UC frame-
work, which we discuss in detail in Appendix A). Intuitively, the ideal functionality leaks nothing
to the (adversarial) environment except the length of the data being encrypted, and implements
decryption by maintaining a table mapping pairs (cph, ad) to messages. Ideal encryption always
returns encryptions of 0(cid:96), where (cid:96) is the encrypted data length, and adds a new entry to this table;
decryption simply does a lookup from the table (rather than calling the decryption function).
At this level we reduce the real-vs-ideal world security of the DMP to an indistinguishability-
based security property that captures the secrecy of domain keys. This means that in the lower
levels of the proof we do not need to reason about how domain keys are used; it suﬃces to prove
that the DMP keeps domain keys hidden from the attacker’s view.
Proof: Indistinguishability-based security. The second layer of results proves that the protocol hides
all information about domain keys from the adversary’ view. This is formalized as a cryptographic
API [23] that guarantees domain key secrecy. The model captures the actions of a malicious insider
adversary by allowing the domain management operations to consist of multiple adversarially or-
chestrated steps. The main challenge in this proof, formalized using the game-hopping technique,
is to establish the invariants that govern the state of security experiments in each hop. These in-
variants combine properties that arise from standard cryptographic assumptions (e.g., absence of
collisions and signature forgeries) with the inductive argument that justiﬁes the soundness of the
domain update operations carried out by honest operators, HSMs and hosts. It is by the joint action
of these two types of guarantees that the domain management policy excludes dishonest entities
from explicitly obtaining information on domain keys. The proof at this layer reduces the security
of the API to the security of lower-level abstractions, all of which are formalized in the indistin-
guishability style, in order to facilitate the game-hopping technique. The details are discussed in
Section 5.3.
Proof: Low-level abstractions. The lower layer of security results deﬁnes idealized versions of digital
signature services, hash maps and certiﬁcation of identity keys by human operators. It also contains
proofs that these abstractions are indistinguishable from real-world instantiations down to standard
cryptographic assumptions, which can then be used to make concrete the bounds in the theorems
established at the higher layers in the development. At this level, we also formalize the speciﬁc
ﬂavor of (multi-recipient) public-key encryption that is used by the DMP.
This lower layer in the proof is meant to modularize various components, for three purposes:
1) lifting assumptions formalized as bad events, such as unforgeability and collision resistance, to
indistinguishability deﬁnitions, allowing the higher-level parts of the proof to be solely based on
indistinguishability game hops; 2) allowing for reuse of the abstractions across the project (e.g., we
reuse the signature abstraction for both operator signatures and HSM signatures); and 3) allow for
5
multiple instantiations of the same underlying primitive (e.g., an encryption scheme with diﬀerent
constructions). This part of the proof is presented in Section 5.2.
3 KMS Domain Management Protocol
3.1 Detailed Description
A high-level operational view of the DMP is presented in Figure 2 (reproduced from [5]). Oper-
ators issue commands, HSMs manipulate the contents of domain tokens, and coordinator servers
propagate updated domain tokens to each HSM in a domain to keep their domain states approx-
imately synchronized (the latter are not shown and assumed for the purpose of the proof to be
under adversarial control).
We now describe the core concepts and mechanisms involved in the DMP at the level of the
mathematical model of the protocol that forms the basis of the formal proof of security. We begin by
introducing the notion of a domain state, the diﬀerent entities in the system and what assumptions
we make about their behavior; we then explain the roles of these entities in domain state transitions,
and conclude with an intuitive explanation of the security rationale underlying the design.
Protocol entities and assumed behavior. The DMP is implemented using three types of entities:
HSMs, hosts, and operators. Each entity is identiﬁed with its identity (signature veriﬁcation) key.
A genuine entity is (the identity key of) an HSM/Host/Operator that behaves as speciﬁed by the
DMP. A domain might include non genuine identity keys of any entity type, e.g. keys created by a
malicious entity. HSMs perform the actual encryption and decryption operations,1011 and are the
only entities allowed to manipulate domain keys in cleartext.
Operators are responsible for certifying identity keys: they sign statements claiming that a given
identity key represents a genuine HSM, host or operator.12 Honest operators only sign statements
that are true, i.e. if an honest operator claims a key is that of a genuine HSM, the key is in fact
genuine. Conversely, dishonest operators, while themselves genuine, might sign statements that
are false. Note that we assume only that an honest operator can tell whether another operator is
genuine, not whether he is honest. Genuine but dishonest operators model insider threats, possibly
colluding with external adversaries. Non-genuine operators model arbitrary rogue identity keys
that the adversary may also create in its attack. For the purpose of this paper, the quorum rule
is deﬁned by a security parameter n, which describes the minimum number of operators of the
domain that must authorize an update over the domain state. Our security analysis is anchored
on a global assumption that any set of n genuine operators contains at least one honest operator
that follows the protocol. For example, a rule imposing that a quorum consists of a set of at least
n = 2 operators from the domain guarantees that it requires at least two dishonest operators of
the domain to break security.
10 What we call HSMs are, in AWS KMS, running instances of FIPS 140-2 certiﬁed hardware security modules.
They generate fresh identity and agreement key pairs when they boot, and store them only in volatile memory; the
instance is eﬀectively destroyed when power is lost. This simpliﬁes physical protection — it suﬃces to guarantee
that the machine cannot be physically attacked without losing power.
12
11 In our protocol model, HSMs are conceptually stateless beyond their identity and agreement key pairs. In AWS
KMS, HSMs maintain the current domain state for each domain they operate on, allowing their behavior to be
more tightly controlled. This provides defense in depth, and potentially allows the proof of additional security
properties not described here.
In AWS KMS, these statements are actually commands to perform particular actions, such as a command re-
questing an HSM to add or remove HSMs or operators from a domain; such a command implicitly carries with it
the certiﬁcation from the command signers that the added entities are genuine. Note also that operators represent
human operators, which play many additional security roles in the system; we describe only as much as is needed
to justify the presented security proof.
6
Finally, hosts are the service endpoints. Although the actions of hosts in AWS KMS are more
complex, our analysis focuses on the crucial role of honest hosts in directing cryptographic oper-
ations to honest domains:13 as entry points in the system, hosts keep track of domain states and