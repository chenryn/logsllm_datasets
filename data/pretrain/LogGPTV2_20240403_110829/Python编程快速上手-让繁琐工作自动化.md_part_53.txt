将 readonly=False 传入 select_folder()。如果所选文件夹已处于只读模式，可以用另
一个 select_folder()调用重新选择当前文件夹，这次用readonly=False关键字参数：
>>> imapObj.select_folder('INBOX', readonly=False)
16.4.8 从原始消息中获取电子邮件地址
对于只想读邮件的人来说，fetch()方法返回的原始消息仍然不太有用。pyzmail
模块解析这些原始消息，将它们作为PyzMessage对象返回，使邮件的主题、正文、“收
件人”字段、“发件人”字段和其他部分能用Python代码轻松访问。
用下面的代码继续交互式环境的例子（使用你自己的邮件账户的UID，而不是
第16章 发送电子邮件和短信
这里显示的）：
>>> import pyzmail
>>> message = pyzmail.PyzMessage.factory(rawMessages[40041]['BODY[]'])
首先，导入pyzmail。然后，为了创建一个电子邮件的PyzMessage对象，调用
pyzmail.PeekMessage.factory()函数，并传入原始邮件的'BODY[]'部分。结果保存在
message中。现在，message中包含一个PyzMessage对象，它有几个方法，可以很
容易地获得的电子邮件主题行，以及所有发件人和收件人的地址。get_subject()方法
将主题返回为一个简单字符串。get_addresses()方法针对传入的字段，返回一个地址
列表。例如，该方法调用可能像这样：
>>> message.get_subject()
'Hello!'
>>> message.get_addresses('from')
[('Edward Snowden', 'PI:EMAIL')]
>>> message.get_addresses('to')
[(Jane Doe', 'PI:EMAIL')]
>>> message.get_addresses('cc')
[]
>>> message.get_addresses('bcc')
[]
请注意，get_addresses()的参数是'from'、'to'、'cc'或 'bcc'。get_addresses()的返回值
是一个元组列表。每个元组包含两个字符串：第一个是与该电子邮件地址关联的名称，
第二个是电子邮件地址本身。如果请求的字段中没有地址，get_addresses()返回一个空
列表。在这里，'cc'抄送和'bcc'密件抄送字段都没有包含地址，所以返回空列表。
16.4.9 从原始消息中获取正文
电子邮件可以是纯文本、HTML 或两者的混合。纯文本电子邮件只包含文本，而
HTML 电子邮件可以有颜色、字体、图像和其他功能，使得电子邮件看起来像一个小
网页。如果电子邮件仅仅是纯文本，它的PyzMessage对象会将html_part属性设为None。
同样，如果电子邮件只是HTML，它的PyzMessage对象会将text_part属性设为None。
否则，text_part或html_part将有一个get_payload()方法，将电子邮件的正文返
回为 bytes 数据类型（bytes 数据类型超出了本书的范围）。但是，这仍然不是我
们可以使用的字符串。啊！最后一步对 get_payload()返回的bytes值调用decode()
方法。decode()方法接受一个参数：这条消息的字符编码，保存在 text_part.charset
或html_part.charset属性中。最后，这返回了邮件正文的字符串。
输入以下代码，继续交互式环境的例子：
 >>> message.text_part != None
True
>>> message.text_part.get_payload().decode(message.text_part.charset)
 'So long, and thanks for all the fish!\r\n\r\n-Al\r\n'
 >>> message.html_part != None
True
Python编程快速上手——让繁琐工作自动化
 >>> message.html_part.get_payload().decode(message.html_part.charset)
'So long, and thanks for all the fish!-Al
\r\n'
我们正在处理的电子邮件包含纯文本和HTML内容，因此保存在message中的
PyzMessage对象的 text_part和html_part属性不等于None。对消息的text_part
调用get_payload()，然后在bytes值上调用decode()，返回电子邮件的文本版本的字
符串。对消息的html_part调用get_payload()和decode()，返回电子邮件的HTML
版本的字符串。
16.4.10 删除电子邮件
要删除电子邮件，就向IMAPClient对象的delete_messages()方法传入一个消息
UID 的列表。这为电子邮件加上\Deleted 标志。调用 expunge()方法，将永久删除当前
选中的文件夹中带\Deleted标志的所有电子邮件。请看下面的交互式环境的例子：
 >>> imapObj.select_folder('INBOX', readonly=False)
 >>> UIDs = imapObj.search(['ON 09-Jul-2015'])
>>> UIDs
[40066]
>>> imapObj.delete_messages(UIDs)
 {40066: ('\\Seen', '\\Deleted')}
>>> imapObj.expunge()
( 'Success', [(5452, 'EXISTS')])
这里，我们调用了IMAPClient对象的select_folder()方法，传入'INBOX'作为第
一个参数，选择了收件箱。我们也传入了关键字参数 readonly=False，这样我们就
可以删除电子邮件。我们搜索收件箱中的特定日期收到的消息，将返回的消息ID保
存在UIDs中。调用delete_message()并传入UIDs，返回一个字典，其中每个键值对
是一个消息 ID 和消息标志的元组，它现在应该包含\Deleted 标志。然后调用
expunge()，永久删除带\Deleted标志的邮件。如果清除邮件没有问题，就返回一条成功
信息。请注意，一些电子邮件提供商，如Gmail，会自动清除用delete_messages()删除
的电子邮件，而不是等待来自IMAP客户端的expunge命令。
16.4.11 从IMAP 服务器断开
如果程序已经完成了获取和删除电子邮件，就调用IMAPClient的logout()方法，
从IMAP服务器断开连接。
>>> imapObj.logout()
如果程序运行了几分钟或更长时间，IMAP服务器可能会超时，或自动断开。在
这种情况下，接下来程序对IMAPClient对象的方法调用会抛出异常，像下面这样：
imaplib.abort: socket error: [WinError 10054] An existing connection was
forcibly closed by the remote host
第16章 发送电子邮件和短信
在这种情况下，程序必须调用imapclient.IMAPClient()，再次连接。
哟！齐活了。要跳过很多圈圈，但你现在有办法让Python程序登录到一个电子
邮件账户，并获取电子邮件。需要回忆所有步骤时，你可以随时参考16.4节“用IMAP
获取和删除电子邮件”。
16.5 项目：向会员发送会费提醒电子邮件
假定你一直“自愿”为“强制自愿俱乐部”记录会员会费。这确实是一项枯燥
的工作，包括维护一个电子表格，记录每个月谁交了会费，并用电子邮件提醒那些
没交的会员。不必你自己查看电子表格，而是向会费超期的会员复制和粘贴相同的
电子邮件。你猜对了，让我们编写一个脚本，帮你完成任务。
在较高的层面上，下面是程序要做的事：
 从Excel电子表格中读取数据。
 找出上个月没有交费的所有会员。
 找到他们的电子邮件地址，向他们发送针对个人的提醒。
这意味着代码需要做到以下几点：
 用openpyxl模块打开并读取Excel文档的单元格（处理Excel文件参见第12章）。
 创建一个字典，包含会费超期的会员。
 调用smtplib.SMTP()、ehlo()、starttls()和login()，登录SMTP服务器。
 针对会费超期的所有会员，调用sendmail()方法，发送针对个人的电子邮件提醒。
打开一个新的文件编辑器窗口，并保存为sendDuesReminders.py。
第 1步：打开Excel 文件
假定用来记录会费支付的 Excel 电子表格看起来如图 16-2 所示，放在名为
duesRecords.xlsx的文件中。可以从http://nostarch.com/automatestuff/下载该文件。
图16-2 记录会员会费支付电子表格
Python编程快速上手——让繁琐工作自动化
该电子表格中包含每个成员的姓名和电子邮件地址。每个月有一列，记录会员
的付款状态。在成员交纳会费后，对应的单元格就记为paid。
该程序必须打开duesRecords.xlsx，通过调用get_highest_column()方法，弄清楚
最近一个月的列（可以参考第 12 章，了解用 openpyxl 模块访问 Excel 电子表格文
件单元格的更多信息）。在文件编辑器窗口中输入以下代码：
#! python3
# sendDuesReminders.py - Sends emails based on payment status in spreadsheet.
import openpyxl, smtplib, sys
# Open the spreadsheet and get the latest dues status.
 wb = openpyxl.load_workbook('duesRecords.xlsx')
 sheet = wb.get_sheet_by_name('Sheet1')
 lastCol = sheet.get_highest_column()
 latestMonth = sheet.cell(row=1, column=lastCol).value
# TODO: Check each member's payment status.
# TODO: Log in to email account.
# TODO: Send out reminder emails.
导入 openpyxl、smtplib 和 sys 模块后，我们打开 duesRecords.xlsx 文件，将得
到的Workbook对象保存在wb中。然后，取得Sheet 1，将得到的Worksheet对象
保存在sheet中。既然有了Worksheet对象，就可以访问行、列和单元格。我们将
最后一列保存在 lastCol 中，然后用行号 1 和 lastCol 来访问应该记录着最近月份
的单元格。取得该单元格的值，并保存在latestMonth 中。
第 2步：查找所有未付成员
一旦确定了最近一个月的列数（保存在lastCol中），就可以循环遍历第一行（这
是列标题）之后的所有行，看看哪些成员在该月会费的单元格中写着paid。如果会
员没有支付，就可以从列1和2中分别抓取成员的姓名和电子邮件地址。这些信息
将放入unpaidMembers字典，它记录最近一个月没有交费的所有成员。将以下代码
添加到sendDuesReminder.py中。
#! python3
# sendDuesReminders.py - Sends emails based on payment status in spreadsheet.
--snip--
# Check each member's payment status.
unpaidMembers = {}
 for r in range(2, sheet.get_highest_row() + 1):
 payment = sheet.cell(row=r, column=lastCol).value
if payment != 'paid':
 name = sheet.cell(row=r, column=1).value
 email = sheet.cell(row=r, column=2).value
 unpaidMembers[name] = email
第16章 发送电子邮件和短信
这段代码设置了一个空字典unpaidMembers，然后循环遍历第一行之后所有的行。
对于每一行，最近月份的值保存在payment中。如果payment不等于'paid'，则第
一列的值保存在 name 中，第二列的值保存在 email 中，name 和 email 添加到
unpaidMembers中。
第 3步：发送定制的电子邮件提醒
得到所有未付费成员的名单后，就可以向他们发送电子邮件提醒了。将下面的
代码添加到程序中，但要代入你的真实电子邮件地址和提供商的信息：
#! python3
# sendDuesReminders.py - Sends emails based on payment status in spreadsheet.
--snip--
# Log in to email account.
smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
smtpObj.ehlo()
smtpObj.starttls()
smtpObj.login('PI:EMAIL', sys.argv[1])
调用smtplib.SMTP()并传入提供商的域名和端口，创建一个SMTP对象。调用
ehlo()和 starttls()，然后调用 login()，并传入你的电子邮件地址和 sys.argv[1]，其中
保存着你的密码字符串。在每次运行程序时，将密码作为命令行参数输入，避免在
源代码中保存密码。
程序登录到你的电子邮件账户后，就应该遍历 unpaidMembers 字典，向每个会员的
电子邮件地址发送针对个人的电子邮件。将以下代码添加到sendDuesReminders.py：
#! python3
# sendDuesReminders.py - Sends emails based on payment status in spreadsheet.
--snip--
# Send out reminder emails.
for name, email in unpaidMembers.items():
 body = "Subject: %s dues unpaid.\nDear %s,\nRecords show that you have not
paid dues for %s. Please make this payment as soon as possible. Thank you!'" %
(latestMonth, name, latestMonth)
 print('Sending email to %s...' % email)
 sendmailStatus = smtpObj.sendmail('PI:EMAIL', email, body)
 if sendmailStatus != {}:
print('There was a problem sending email to %s: %s' % (email,
sendmailStatus))
s mtpObj.quit()
这段代码循环遍历unpaidMembers中的姓名和电子邮件。对于每个没有付费的
成员，我们用最新的月份和成员的名称，定制了一条消息，并保存在body中。我
们打印输出，表示正在向这个会员的电子邮件地址发送电子邮件。然后调用
Python编程快速上手——让繁琐工作自动化
sendmail()，向它传入地址和定制的消息。返回值保存在sendmailStatus中。
回忆一下，如果SMTP服务器在发送某个电子邮件时报告错误，sendmail()方法
将返回一个非空的字典值。for循环最后部分在行检查返回的字典是否非空，如果
非空，则打印收件人的电子邮件地址以及返回的字典。
程序完成发送所有电子邮件后，调用quit()方法，与SMTP服务器断开连接。
如果运行该程序，输出会像这样：
Sending email to alice@example.com...
Sending email to bob@example.com...
Sending email to eve@example.com...
收件人将收到如图16-3所示的电子邮件。
图16-3 从sendDuesReminders.py自动发送的电子邮件
16.6 用 Twilio 发送短信
大多数人更可能靠近自己的手机，而不是自己的电脑，所以与电子邮件相比，短信
发送通知可能更直接、可靠。此外，短信的长度较短，让人更有可能阅读它们。
在本节中，你将学习如何注册免费的 Twilio 服务，并用它的 Python 模块发送
短信。Twilio是一个SMS网关服务，这意味着它是一种服务，让你通过程序发送短
信。虽然每月发送多少短信会有限制，并且文本前面会加上Sent from a Twilio trial
account，但这项试用服务也许能满足你的个人程序。免费试用没有限期，不必以后
升级到付费的套餐。
Twilio不是唯一的SMS网关服务。如果你不喜欢使用Twilio，可以在线搜索free
sms gateway、python sms api，甚至twilio alternatives，寻找替代服务。
注册Twilio账户之前，先安装twilio模块。附录A详细介绍了如何安装第三方模块。