### 优化后的文本

#### 图7：不同α值下的BGP ACT最优解点的3D散点图
- **cOPT=60, Pgoal=0.085**
- **cOPT=45, Pgoal=0.12**
- **cOPT=40, Pgoal=0.14**
- **cOPT=35, Pgoal=0.18**

**α范围与cOPT和Pgoal的关系:**
- α = 0.17 至 0.33
- α = 0.09 至 0.17
- α = 0 至 0.09
- α = 0.46 至 1 (cOPT=65, Pgoal=0.06)

**概率分布:**
- 攻击目标的概率
- 0.25
- 0.20
- 0.15
- 0.10
- 0.05

**安全投资成本 (cOPT) for BGP ACT in $:**
- 65
- 60
- 55
- 50
- 45
- 40
- 35

**说明:**
- 客观函数F4对于不同α值的最优解点的3D散点图如图7所示。
- F4的最小值为35，对应的α范围是0.46到1。

---

### 第五章 性能评估

我们在SHARPE [13]中实现了一个自动描述和评估ACTs的模块。为了计算攻击概率和ACT的mincuts，我们直接调用了SHARPE中已有的故障树求解算法。我们还添加了相关算法（如[7]中所述）来计算带有和不带重复事件的ACT的成本、影响和风险。ROI计算通过在SHARPE文本输入文件中定义函数来完成。所有相关的优化算法也在SHARPE中实现。

在没有循环T矩阵的情况下，算法2可以在多项式时间内求解 [15]。运行时间 = (ACT中的原子攻击事件总数) * (ACT中的授权防御机制总数) * min(原子攻击事件数, 防御机制数) = O(mn * min(m, n))，这表明运行时间是多项式的。图8展示了使用算法3和目标函数F2对一个形成4×4循环T矩阵的ACT的递归树。二进制字符串表示树中任何节点的部分解（P）。每个位（由图8中的指示函数1𝑃 (CM𝑖) 表示）代表某个对策。位0表示相应的对策未被考虑在部分解中，而位1表示它被考虑。长度为1的字符串表示只考虑CM1的部分解，而其他对策是多余的。长度为2的字符串表示只考虑CM1（最高有效位）和CM2（最低有效位）的部分解，而其他对策是多余的，以此类推。因此，部分解0101表示CM2和CM4存在，而CM1和CM3不存在。图8中的递归树探索了所有可能的解，并显示了通过分支定界法的剪枝规则修剪子树的情况。该树有13个节点，而其显式枚举搜索树有31 (2^4 + 1 - 1) 个节点。一种类似的剪枝技术在[24]中提出，使用BDMP（布尔逻辑驱动马尔可夫过程），通过消除低成功概率的攻击路径来减轻状态空间爆炸问题。在平均情况下，算法3生成的递归树的大小在优化控制变量数量上是多项式的。由于搜索空间是指数级的，最坏情况下的运行时间也是指数级的。然而，这种最坏情况仅在搜索树的任何节点上都不满足剪枝或界限规则时发生，这种情况很少见。

在图9中，我们比较了我们的方法与其他现有方法在大型ACT（例如，针对大学局域网的攻击树）上的效率。随着树的规模增加，找到最优对策集的运行时间（y轴）分别针对目标函数F1、F2和F3绘制在图9(a)、图9(b)和图9(c)中。对于目标函数F1，我们在图9(a)中比较了六种不同方法的运行时间。我们比较了(i)无减少的显式枚举(ii)有减少的显式枚举(iii)无减少的分支定界(iv)有减少的分支定界(v)Dewri等人使用的无减少的简单遗传算法(SGA)(vi)有减少的简单遗传算法。方法(iv)和(vi)显示出最小的运行时间。对于目标函数F2，我们的方法（分支定界）在几乎25秒内返回了具有最多5000个叶节点的ACT的最优解（如图9(b)所示），在一台配备Intel(R) Core(TM)2 CPU 1862.103 MHz处理器、2 MB缓存、4 GB内存和CentOS Release 5.4 (Linux 2.6.34)操作系统的系统上，比显式枚举技术（大约70分钟）和简单遗传算法（大约35秒）更好。尽管对于具有5000个叶节点的ACT，我们的方法和SGA方法之间的运行时间差异只有几秒钟，但随着叶节点数量的增加，这种差异会更加明显。这证明了我们方法的扩展性更好。对于目标函数F3，我们的方法（分支定界）在同一系统上在38秒内返回了具有最多5000个叶节点的ACT的最优解（如图9(c)所示），比显式枚举技术（大约96分钟）和简单遗传算法（40秒）更好。

---

### 第六章 相关工作

Schneier提出了基本的攻击树（AT）形式化方法 [1]。Dewri等人 [6] 使用遗传算法在AT上进行单目标和多目标优化以找到最优的安全措施。然而，这些方法因AT结构未考虑对策而受到限制。Bistarelli等人 [25] 提出了防御树（DTs）以在AT中引入防御机制，并应用博弈论找到最具成本效益的对策集。然而，在DTs中，对策只能放置在叶节点上。Foo等人 [26] 使用入侵图（I-GRAPHs）建模动态入侵响应，但未处理模型可扩展性问题。Zonouz等人 [8] 提出了攻击-响应树（ARTs），结合了攻击和响应，但他们使用状态空间模型（部分可观测随机博弈模型）来找到最优对策集，从而导致状态空间爆炸问题。