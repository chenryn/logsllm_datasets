只对PDE有意义，PS == PageSize的意思 当PS==1的时候 PDE直接指向
物理页 无PTE,低22位是页内偏移。
线性地址只能拆成2段：大小为4MB 俗称“大页”
####  A 位
是否被访问（读或者写）过 访问过置1 即使只访问一个字节也会导致PDE PTE置1
####  D 位
脏位 是否被写过 0没有被写过 1被写过
###  页目录表(PDE)基址
如果系统要保证某个线性地址是有效的，那么必须为其填充正确的PDE与PTE，如果我们想填充PDE与PTE那么必须能够访问PDT与PTT。那么存在2个问题：
1、一定已经有“人”为我们访问PDT与PTT挂好了PDE与PTE,我们只有找到这个线性地址就可以了。
2、这个为我们挂好PDE与PTE的“人”是谁？
结论就是有一个特殊的地址：0xC0300000。存储的值就是PDT。
获取cr3
    kd> !dd 131fb000  + c00
    kd> !dd 131fb000 + c00
    kd> !dd 131fb000
可以看到通过这个线性地址实际上是重新解析了cr3寄存器。
也就是说，以后不需要Cr3，只需在当前程序内，通过C0300000这个线性地址就可以得到当前程序PDT的首地址了。
那么PDT的首地址可以找到，PTT的首地址呢？
###  页表(PTT)基址
还是有个特殊的线性地址：0xC0000000
获取debugview的线性地址。
这个线性地址对应的就是PDT表，而PDE表中第一个地址为第一张PTT表。
    kd> !dd 18ae9000
    kd> !dd 0bc7a000
PDT表中第二个地址为第二张PTT表。
    kd> !dd 18ae9000
    kd> !dd 194b9000
然后我们拆分c0000000地址。
    kd> !dd 18ae9000 + c00
    kd> !dd 18ae9000
    kd> !dd 0bc7a000
可以看到0xc0000000对应的物理地址就是第一张PTT表。
再拆分c0001000地址。
    kd> !dd 18ae9000 + c00
    kd> !dd 18ae9000 + 4
    kd> !dd 0bc7a000
0xc0001000对应的物理地址就是第二张PTT表。
所以实际上的对应关系应该如下图所示：
根本就不存在什么PDT表，PDT表知识PTT表中的一个特殊的部分。
**掌握了0xC0001000和0xC0300000，就掌握了一个进程所有的物理内存读写权限。**
PDI和PTI分别指的是再PDT表和PTT表中的索引。
访问页目录表（PDT）的公式：
0xC0300000 + PDI*4
访问页表（PTT）公式：
0xC0000000 + PDI*4096 + PTI*4
总结：
1、页表被映射到了从0xC0000000到0xC03FFFFF的4M地址空间。
2、在这1024个表中有一张特殊的表：页目录表。
3、页目录被映射到了0xC0300000开始处的4K地址空间。
###  写入shellcode到0地址执行
这里直接看注释，要自己捋一下。
    // CallGate0Address.cpp : Defines the entry point for the console application.
    //
    #include "stdafx.h"
    #include 
    #include 
    #include 
    char buf[] = {0x6a,0x00,0x6a,0,0x6a,0,0x6a,0,0xE8,0,0,0,0,0xc3};
    __declspec(naked) void callGate()
    {
        _asm
        {
            push 0x30;
            pop fs;
            pushad;
            pushfd;
            lea eax,buf;
            mov ebx,dword ptr ds:[0xc0300000];
            //当0xc0300000位置上的值是0时，表明地址0对应的PDE没有挂上，跳转代码为挂上buf对应的物理页。
            //不是0挂PTE就行了
            test ebx,ebx;
            je __gPDE;
            shr eax,12;
            and eax,0xfffff;
            shl eax,2;
            add eax, 0xc0000000;
            mov eax,[eax];
            mov dword ptr ds:[0xc0000000],eax;
            jmp __retR;
        __gPDE:
            //获取前10位偏移
            shr eax,22;
            and eax,0x3ff;
            //乘以4
            shl eax,2;
            //将buf对应的PDE挂到0地址
            add eax, 0xc0300000;
            mov eax,[eax];
            mov dword ptr ds:[0xc0300000],eax;
        __retR:    
                popfd;
                popad;
                retf;
        }
    }
    int main(int argc, char* argv[])
    {
        unsigned int functionAddress = (unsigned int)MessageBox;
        //获取在物理页上的偏移，后12位。
        int offset1 = ((unsigned int)buf) & 0xfff;
        *((unsigned int*)&buf[9]) = functionAddress - (13 + offset1);
        char segmentGate[] = {0,0,0,0,0x48,0};
        printf("MessageBox:%x  callGate:%x buf:%x\n",MessageBox,callGate,buf);
        system("pause");
        _asm
        {
            call fword ptr segmentGate;
            push 0x3b;
            pop fs;
            mov eax,offset1;
            call eax;
        }
        return 0;
    }
添加调用门：
    kd> eq 8003f048 0040ec00`0008100a
## 后记
下一节进入2-9-9-12分页。