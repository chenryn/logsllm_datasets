# glibc2.32中的隔块合并手法与NULL_FXXK题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 保护情况
## 程序分析
###  rep stos指令
  * rep指令:重复指令ecx次
  * stos:把eax中的值复制到es:EDI指向的地方,每次执行都会增加edi 
    * DF标志寄存器决定方向
  * 这一段指令的作用就是把tcache全部设置为0
###  程序功能
  * Init时,会通过calloc(0x10, 1)-0x290得到一个指向tcache的指针
  * 每次读入cmd时会检查 
    * __malloc_hook是否为null
    * __free_hook是否为null
    * 检查libc中偏移0x1e6e98处是否为0x80, 也就是maxfast是否为0x80
    * 把Tcache全部设置为0
  * Add 
    * 最多32个指针
    * 0x100bk = C, C->fd=B`, 并且C是被索引到的,但由于00截断,无法读出堆地址
  * 但是再unlink时,会有 
    * bck = B->bk = C
    * fwd = B->fd = A
    * bck->fd = fwd => C->fd = A
  * 因此A的地址就被写入到了C的开头,并且没有被00截断,我们可以直接show出来
###  泄露libc地址
  * 任何写入都会被00结尾,因此只能让addr自己出现在可读取的位置
  * 常规思路为切割UB,让idx指向UB中的chunk头,通过UB的fd泄露
  * 但问题是本题的UB的fd是00结尾的,无法show出来
  * 所以只能借助与LB中的fd bk指针
  * heap情况:
  * 我们需要把一个被索引的chunk放入LB中
  * 利用UB的切割机制,就可以, 把UB切割到一个被索引的位置,并且切到小于0x2000,然后申请一个大的chunk,UBchunk就会被整理到LB中
###  任意写
  * UB的利用需要伪造size, LB则难以伪造链表,两者都有很多先决条件,还是使用tcache进行攻击最方便
  * 因此可以利用LBattack向保存tcache指针的地方写入一个victim地址,从而控制整个tcache结构体
  * 进行LB attack的手法 
    * 我们需要把一个被索引的0x510的chunkA放入LB中,然后手中有一个0x500的chunkB
    * free(chunkA) A进入UB, 再Add(0x500)就可修改LB中的chunk
    * 然后free(chunkB)进入UB
    * 再Add(0x2000)触发整理即可像addr2写入被free的chunk地址
  * 再找到存放tcache的地址
  * exp:
###  Tcache布局
  * 根据计算公示: 
    * idx = (chunk_size – 0x20)/0x10, idx从0开始
    * count_addr(idx) = tcache_addr + idx*2
    * entry_addr(idx) = tcache_addr + 0x80 + idx*8
  * 现在tcache位于0x0000555555561540 , 如果我们使用0x400的chunk,那么就有 
    * idx = (0x400-0x20)/0x10 = 0x3
    * count_addr(0x3e) = tcache_addr + 0x3e*2 = tcache_addr + 0x7C
    * entry_addr(0x3e) = tcache_addr + 0x80 + 0x3e*8 = tcache_addr + 0x270
  * 由于写入的地址是被free的那个chunk, 所以要据此对0x500那个chunk进行布局 
    * 注意:写入的是chunkB地址,我们写入是从chunkB+0x10开始的,所以fake_tcache都要减去0x10
###  如何劫持执行流
  * 由于无法堆__free_hook进行修改, 因此只能从IO入手
  * 由于本题没有使用流输入输出,所以只能从libc中的输出开始入手
  * libc的ptmalloc中有两种错误输出: 
    * __glibc_unlink(…) 这是安全检查, 这种错误信息直接write(STDERR, …) 无法利用
    * assert(…) 这是运行时检查, 错误信息会通过流输出
`assert()`定义:
    #define assert(e) \
        (__builtin_expect(!(e), 0) ? __assert_rtn(__func__, __FILE__, __LINE__, #e) : (void)0)
    #define __assert(e, file, line) \
        __eprintf ("%s:%d: failed assertion `%s'\n", file, line, e)
    #define eprintf(format, ...) fprintf (stderr, format, __VA_ARGS__)
`eprintf()`的调用实际就转为`vfprintf()`的调用
    int __fprintf (FILE *stream, const char *format, ...)
    {
      va_list arg;
      int done;
      va_start (arg, format);
      done = __vfprintf_internal (stream, format, arg, 0);
      va_end (arg);
      return done;
    }
在`vfprintf()`中会进入`buffered_vfprintf()`
    static int buffered_vfprintf (FILE *s, const CHAR_T *format, va_list args, unsigned int mode_flags)
    {
      CHAR_T buf[BUFSIZ];
      struct helper_file helper;
      FILE *hp = (FILE *) &helper._f; //助手流
      int result, to_flush;
      //...hp初始化
      _IO_JUMPS (&helper._f) = (struct _IO_jump_t *) &_IO_helper_jumps; //为助手流设置虚表:_IO_helper_jumps
      /* Now print to helper instead.  */
      result = vfprintf (hp, format, args, mode_flags); //输出到助手流hp中
      //...
      if ((to_flush = hp->_IO_write_ptr - hp->_IO_write_base) > 0) //如果有要输出的
        {
          if ((int) _IO_sputn (s, hp->_IO_write_base, to_flush) != to_flush) //那么就调用s的_IO_sputn全部输入回s
     result = -1;
        }
      //..
      return result;
    }
  * 因此assert会转入stderr虚表中的_IO_sputn调用
  * stderr使用_IO_file_jumps作为虚表, 会调用函数_IO_file_xsputn
  * 但问题是我们不仅需要劫持虚表,还需要能控制rdx指向的数据, 这就要求 
    * 调用时rdx 指向heap 或者libc中可写区域
    * 函数为虚表函数, 并且可写
  * 在_IO_file_xsputn中, rdx不可控, 但是他会继续调用其他函数,因此我们可以继续跟踪其调用
一路si下去发现,当`fflush()`调用sync是rdx指向一个libc中可写的区域
并且再2.32下,_IO_file_jumps是可写入的
  * 因此把_IO_file_jumps中的sync修改为setcontext+61, 然后在rdx指向的区域内写入SigreturnFrame即可开启SROP
  * rdx其实指向的另外一个可写入虚表,为了防止SIGV,要保证用到的表项不变
###  SROP
  * 根据上面的分析,我们需要劫持两个地方:虚表和一个缓冲区
  * 因此需要再tcache中伪造两项
然后劫持虚表即可
## EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    context.log_level = 'debug'