java.awt.color  
• 
java.awt.font 
• 
java.awt.geom 
• 
java.awt.image 
• 
java.awt.print 
• 
javax.print 
• 
java.awt.image.renderable 
As stated previously, the 2D sub-component is responsible for some of the most severe vulnerabilities in the 
architecture. There is good reason for this designation in that this sub-component is responsible for image 
processing, International Color Consortium (ICC) Profile handling, OpenType and TrueType font processing. This type 
of parsing commonly results in memory corruption vulnerabilities but the question is: Is this the case for Java?  
One issue is that a detailed breakdown of the contents and packages of a sub-component is not readily available for 
all the sub-components in the architecture. Our sample set allowed us to solve this matter. The table below 
highlights the vulnerable packages contained within a sub-component. Also, it maps the common vulnerability 
types discovered in those packages. 
7 http://docs.oracle.com/javase/7/docs/technotes/guides/2d/spec.html 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Sub-
component 
Package 
Common Vulnerability Types 
2D 
java.awt.font 
java.awt.color 
java.awt.image 
sun.awt.image 
CWE-122: Heap-based Buffer Overflow 
CWE-787: Out-of-bounds Write 
CWE-121: Stack-based Buffer Overflow 
AWT 
java.awt 
sun.awt 
CWE-265: Privilege / Sandbox Issues 
Beans 
java.beans 
sun.beans.finder 
sun.beans.decode 
CWE-265: Privilege / Sandbox Issues 
Concurrency 
java.util.concurrent 
CWE-265: Privilege / Sandbox Issues 
CORBA 
com.sun.corba.se.impl.orbutil.threadpool 
CWE-265: Privilege / Sandbox Issues 
Deployment 
sun.plugin2.applet 
Web Start 
CWE-114: Process Control 
CWE-78: OS Command Injection 
Deserialization 
Sun.misc 
CWE-265: Privilege / Sandbox Issues 
HotSpot 
HotSpot Compiler 
CWE-265: Privilege / Sandbox Issues 
JavaFX 
com.sun.webpane.platform 
com.sun.scenario.effect 
com.sun.prism.d3d 
CWE-822: Untrusted Pointer Dereference 
CWE-122: Heap-based Buffer Overflow 
JAXP 
com.sun.org.apache.xalan.internal.xsltc.trax 
CWE-265: Privilege / Sandbox Issues 
JAX-WS 
com.sun.org.glassfish.external.statistics.impl 
com.sun.org.glassfish.gmbal 
CWE-265: Privilege / Sandbox Issues 
JMX 
com.sun.jmx.mbeanserver 
com.sun.jmx.remote.internal 
CWE-265: Privilege / Sandbox Issues 
JRE 
java.util.zip 
CWE-121: Stack-based Buffer Overflow 
Libraries 
java.lang 
java.lang.reflect 
java.lang.invoke 
CWE-265: Privilege / Sandbox Issues 
Scripting 
javax.script 
sun.org.mozilla.javascript.internal 
CWE-265: Privilege / Sandbox Issues 
Sound 
javax.sound.midi 
com.sun.media.jfxmedia.locator 
com.sun.media.jfxmediaimpl.platform.gstreamer 
com.sun.media.sound 
CWE-265: Privilege / Sandbox Issues 
CWE-787: Out-of-bounds Write 
CWE-416: Use-After-Free	
Figure 10 - Sub-component Weaknesses 
Looking specifically at the 2D sub-component, we see that all classic memory corruption issues show up as 
common vulnerability types but not every package in the sub-component had a vulnerability associated with it. 
About a dozen issues occurred during the parsing of a font file and a couple were the result of mishandling ICC 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
values. In our sample set, process control and command injection vulnerabilities were the most common in the 
Deployment sub-component and, more specifically, they occurred while parsing Java Network Launching Protocol 
(JNLP) files. The sound sub-component is interesting because it suffered from a wide variety of issues including a 
memory corruption issues and multiple sandbox bypass vulnerabilities. As we just had over 120 vulnerabilities in 
our sample, we cannot say definitively that other weaknesses do not exist in a specific sub-component’s packages. 
However, we can state that they were susceptible in the past to a large number of a specific vulnerability type. 
Top 7 Vulnerability Classes in the Java Architecture 
Based on our available information the top vulnerability classes and affected sub-components can be identified and 
targeted by the research community. The order of these issues can be further tuned by utilizing the sub-categories 
generated for the major weaknesses in the Java architecture. The table below provides a more accurate view into 
Java’s attack surface. 
Rank 
Common Weakness Enumeration  
Sub-Category 
Sub-components 
1 
CWE-265: Privilege / Sandbox Issues 
CWE-470: Unsafe Reflection 
AWT 
Beans 
HotSpot 
JAXP 
JAX-WS 
JMX 
Libraries 
2 
CWE-265: Privilege / Sandbox Issues 
CWE-272: Least Privilege Violation 
CORBA 
JMX 
Libraries 
Scripting 
Sound 
3 
CWE-122: Heap-based Buffer Overflow 
N/A 
2D 
JavaFX 
4 
CWE-787: Out-of-bounds Write 
N/A 
2D 
Sound 
5 
CWE-822: Untrusted Pointer Dereference 
N/A 
JavaFX 
6 
CWE-122: Heap-based Buffer Overflow 
CWE-190: Integer Overflow 
2D 
7 
CWE-265: Privilege / Sandbox Issues 
CWE-843: Type Confusion 
AWT 
Concurrency 
Deserialization 
Hotspot 
Libraries 
Scripting 
Figure 11 - Top 7 Vulnerability Classes in Java 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Java Sub-component Weaknesses 
With this detailed understanding of the problems truly affecting the users of Java, the next step is to walk through 
five case studies to demonstrate the most common vulnerability types being discovered. These detailed case 
studies not only provide an in-depth look at a specific Java vulnerability, through patch diffing, they demonstrate 
how Oracle addressed the issue.  
Libraries Sub-component Weaknesses 
CVE-2013-2436 - Privilege / Sandbox Issues due to Unsafe Reflection 
Core Issue 
Before explaining how unsafe reflection can lead to privilege and sandbox issues lets look at an example of unsafe 
reflection:  
We have a function, cwe_470, that takes a Class, a String, and an Object. This function performs no validation and 
yet it will execute an arbitrary method on an arbitrary class with the sole requirement being that the function take a 
single argument. One potential abuse of this would be to execute a method that is package-private, assuming that 
the given class and cwe_470’s class are both in the same package. 
Root Cause Analysis 
CVE-2013-2436 is an example of unsafe reflection leading towards sandbox and privilege issues. Exploitation of 
this CVE requires the use of Security Exploration's Issue 548. This issue was reported independently to the Zero Day 
Initiative and seems to collide with Security Exploration's Issue 559. Usage of Security Exploration's Issue 54 
requires the creation of arbitrary Java byte code, which can be done using the ASM framework10. 
With the ability to create arbitrary Java byte code, we create a custom class that uses the invokedynamic Java 
opcode to pass a MethodHandle to a protected method to our Applet. At this point, we can use 
MethodHandle.bindTo to bind the MethodHandle to a class of our choosing. The failure lies in not properly enforcing 
types when binding an argument to a MethodHandle. When binding a MethodHandle to an Object, rather than 
8 http://www.security-explorations.com/materials/se-2012-01-54.pdf 
9 http://www.security-explorations.com/materials/se-2012-01-50-60.zip 
10 http://asm.ow2.org/ 
Object cwe_470(Class klass, String methodName, Object argument) { 
    return klass.getMethod(methodName).invoke(argument); 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
verifying both the MethodHandle and Object are compatible, it only verifies that the Object is compatible. By using 
Security Exploration's Issue 54 to create a MethodHandle for a protected method in a superclass, we can create 
MethodHandles to protected methods in a ClassLoader. The MethodHandle we receive will be bound to a subclass 
that cannot be instantiated. However, this can be bypassed by binding the MethodHandle to a ClassLoader. Since no 
cast is performed to force the MethodHandle to stay bound to the subclass, we can make use of the MethodHandle 
to define a new class with a custom ProtectionDomain. 
Exploitation of this bug will require three distinct classes. One class is the custom generated class that uses the 
invokedynamic opcode to pass a MethodHandle to a protected method to our malicious Applet. We will target 
ClassLoader.defineClass as our protected method. Our malicious output must start off by calling a method in the 
custom generated class so that we have access to a MethodHandle to call defineClass. At that point, we can call 
MethodHandle.bindTo on our Applet's ClassLoader to change the restrictions on the MethodHandle. The last thing to 
do is to use the MethodHandle to define a class with a ProtectionDomain that contains AllPermission, allowing the 
newly loaded class to disable the SecurityManager as it has full privileges. (See malicious applet sample below) 
public class MaliciousApplet extends Applet { 
    private static MethodHandle defineClassHandle; 
    public static CallSite setDefineClassHandle(MethodHandles.Lookup caller,  
          String name, 
                                                MethodType type,  
                                                MethodHandle handle) 
                           throws NoSuchMethodException, IllegalAccessException { 
        defineClassHandle = handle; 
        return null 
    } 
    public void init() { 
        try { 
            InvokeDynamic.getClassHandle(); 
        } catch (Exception e) { } 
        try { 
            Permissions permissions = new Permissions(); 
            permissions.add(new AllPermission()); 
            ProtectionDomain protectionDomain = new ProtectionDomain(null,  
         permissions); 
            ClassLoader myClassLoader = MaliciousApplet.class.getClassLoader(); 
            MethodHandle boundMHandle = defineClassHandle.bindTo(myClassLoader); 
            Class evilClass = (Class)boundMHandle.invoke("Evil", 
                                                         CLASS_BYTES, 0,  
                                                         CLASS_BYTES.length,  
                                                         protectionDomain); 
            // At this point you would invoke a method within the evilClass 
        } catch (Exception e) { } 
    } 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
The Applet is initialized and executes the getClassHandle method in the custom class. getClassHandle method calls 
setDefineClassHandle with the handle parameter set to a MethodHandle that points to ClassLoader.defineClass. The 
Applet then has access to ClassLoader.defineClass through the defineClassHandle MethodHandle. We can then use 
the bindTo method to bind the MethodHandle to the Applet's ClassLoader and then invoke the defineClass method 
on the bytes for our third class. Since we have specified a ProtectionDomain that contains AllPermission, the 
methods within our Evil class will be able to disable the SecurityManager and fully disable the sandbox. 
Patch Analysis 
CVE-2013-2436 was patched in JDK 7u21 through the addition of a cast within sun.invoke.util.Wrapper's convert 
method if the input class is not an interface. The following is a snippet of the convert method prior to patching. 
Here is the patched version of the convert method: 
private  T convert(Object paramObject, Class paramClass, boolean paramBoolean) { 
  if (this == OBJECT) 
  { 
    localObject1 = paramObject; 
    return localObject1; 
  } 
  Object localObject1 = wrapperType(paramClass); 
  if (((Class)localObject1).isInstance(paramObject)) 
  { 
    localObject2 = paramObject; 
    return localObject2; 
  } 
  Object localObject2 = paramObject.getClass(); 
  if (!paramBoolean) { 
    localObject3 = findWrapperType((Class)localObject2); 
    if ((localObject3 == null) || (!isConvertibleFrom((Wrapper)localObject3))) { 
      throw newClassCastException((Class)localObject1, (Class)localObject2); 
    } 
  } 
  Object localObject3 = wrap(paramObject); 
  assert (localObject3.getClass() == localObject1); 
  return localObject3; 
} 
private  T convert(Object paramObject, Class paramClass, boolean paramBoolean) { 
  if (this == OBJECT) 
  { 
    assert (!paramClass.isPrimitive()); 
    if (!paramClass.isInterface()) { 
      paramClass.cast(paramObject); 
    } 
... 
  } 
... 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
As a result of the new checks, a ClassCastException will be thrown during an attempt to trigger this CVE. This makes 
sense given a cast is now occurring where one was previously not performed. This is due to the ClassLoader 
instance being cast to the InvokeDynamic class. 
CVE-2013-1484 - Privilege / Sandbox Issues due to Least Privilege Violation 
Core Issue 
To understand how least privilege violation leads to privilege and sandbox issues we must explain what they are 
individually. Privilege and sandbox issues refer to any situation where code within the sandbox can run outside of 
the sandbox. Least privilege violation refers to the execution of code with higher privileges than intended. The 
following function illustrates the explanation: 
Here we have a function, cwe_272, that takes a single argument. The argument is then added to the string 
“Processed “ within a doPrivileged block and is then returned. If cwe_272 were part of the JDK, then an attacker 
could run code with higher privileges by calling cwe_272 with an object that had a custom toString function. The 
malicious object’s toString function would be implicitly called when the object is added to “Processed “, resulting in 
least privilege violation. Chaining this to result in privilege and sandbox issues becomes a matter of disabling the 
SecurityManager. 
Root Cause Analysis 
CVE-2013-148411 is an example of least privilege violation leading to privilege and sandbox issues. There are more 
than one issues leading to the exploitation of this CVE. The primary issue lies in the fact that 
Proxy.newProxyInstance does not save the caller's AccessControlContext. Leveraging this requires the ability to 
execute a proxy's method without any user frames on the stack. However, before reaching that point you must be 
able to create an InvocationHandler that can execute arbitrary statements. This is possible through the use of the 
MethodHandleProxies class. The MethodHandleProxies.asInterfaceInstance method is used to create an instance of 
the InvocationHandler interface that has a MethodHandle bound to its invoke method. Once you ensure that the 
bound MethodHandle will be called with no user frames on the stack Proxy.newProxyInstance can be called on the 
InvocationHandler instance. 
11 http://www.oracle.com/technetwork/topics/security/javacpufeb2013update-1905892.html 
String cwe_272(final Object o) { 
    return (String)AccessController.doPrivileged(new PrivilegedAction()) { 
        public String run() { 
            return "Processed " + o; 
        } 
    }; 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
Here is an example of using MethodHandles: 
At this point a custom interface to be used along with the InvocationHandler instance in a call to 
Proxy.new.ProxyInstance is all that is required. The custom interface chosen must result in the InvocationHandler 
being invoked without user frames on the stack. 
Patch Analysis 
CVE-2013-1484 was patched in JDK 7u15. Oracle patched this vulnerability by adding a slew of checks. The 
following snippets show the changes. 
DesiredClass desiredClassInstance = new DesiredClass() 
MethodType methodType = MethodType.methodType(ReturnClass.class,  
                                              ParameterClass.class); 
MethodHandle methodHandle = MethodHandles.lookup().findVirtual(DesiredClass.class,  
                                                               "instanceMethod", 
                                                               methodType); 
methodHandle = methodHandle.bindTo(desiredClassInstance); 
methodHandle = MethodHandles.dropArguments(methodHandle,  
                                           0,  
                                           Object.class,  
                                           Method.class,  
                                           Object[].class); 
InvocationHandle iHandler = MethodHandleProxies.asInterfaceInstance(InvocationHandler.class,  
                                                                    methodHandle); 
//MethodHandles 
public MethodHandle findVirtual(Class paramClass,  
                                String paramString,  