# Large-Scale Scanning of TCP’s Initial Window

**Authors:**
- Jan Rüth
- Christian Bormann
- Oliver Hohlfeld

**Affiliation:**
Communication and Distributed Systems, RWTH Aachen University  
{rueth, bormann, hohlfeld}@comsys.rwth-aachen.de

## Abstract
Improving web performance has sparked a debate on the optimal size of TCP’s initial congestion window (IW), a critical parameter for short-lived flows. This discussion led to several RFC updates, including an increase to IW10 in 2010. However, the current adoption of these recommendations is unknown. In this paper, we conduct large-scale measurements across the entire IPv4 address space to infer the distribution of IW sizes by probing HTTP and HTTPS servers. We present an HTTP and TLS scanning method implemented in ZMap, enabling quick estimations of IW sizes at Internet scale. For the first time since the standardization and implementation of IW10, we provide insights into the diverse landscape of IW configurations on the Internet.

**CCS Concepts:**
- Networks → Transport protocols; Network measurement

**Keywords:**
TCP Initial Window, Measurements

**ACM Reference Format:**
Jan Rüth, Christian Bormann, Oliver Hohlfeld. 2017. Large-Scale Scanning of TCP’s Initial Window. In Proceedings of IMC ’17, London, United Kingdom, November 1–3, 2017, 7 pages. https://doi.org/10.1145/3131365.3131370

## 1. Introduction
For decades, network protocol engineering has focused on improving throughput. Recent advancements, however, emphasize reducing latency, driven by the need to enhance the user experience with web services. These efforts have led to the development of new transport protocols (e.g., QUIC [12] or MinimaLT [19]) and optimizations in existing ones (e.g., TCP Fast Open [21] or TLS False Start [14]). Given the slow adoption rates of new protocols, optimizing protocol parameters remains a popular approach for performance enhancement.

One long-standing debate concerns the size of TCP’s initial congestion window (IW). This parameter controls the amount of unacknowledged data that can be sent after connection setup, directly influencing traffic characteristics and application performance, especially for short-lived flows. Small IWs can prolong transmissions during TCP’s slow start, particularly for request/response protocols like HTTP or the TLS handshake. Conversely, large IWs can cause traffic bursts that may overflow low-capacity links. The debate on configuring an optimal IW for the Internet began in the late 1990s and resulted in the deployment of IW10, proposed in 2010 [9] and enabled as a default in the Linux kernel in 2011 [16]. Advocates argued that IW10 allows transmitting the initial response within the first round trip for a significant portion of web traffic.

A recent IETF draft [2] questions the practice of standardizing a single IW value, suggesting instead that the IW should be customized for each deployment and application. Despite this ongoing debate, the actual IW values used by Internet hosts remain largely unknown. Given the importance of this parameter for both Internet traffic and application performance, a deeper empirical understanding of current practices is essential.

This paper presents the first comprehensive assessment of TCP’s IW configuration among TLS/HTTP hosts. Our goal is to inform the current debate with an up-to-date view of IW configurations, derived from a large-scale assessment of all public IPv4 hosts reachable on port 80/tcp (HTTP) and 443/tcp (HTTPS). This study is enabled by an extended measurement methodology that allows scanning HTTP and TLS hosts without prior knowledge. Our contributions include:

- Conducting the first large-scale IW scan over HTTP/TLS reachable hosts in the entire IPv4 space, demonstrating that scanning a small random subset (e.g., 1%) is sufficient to infer a representative IW distribution.
- Providing a measurement methodology using HTTP and TLS to estimate IW settings without prior knowledge, implemented in the ZMap scan tool and made openly available [22].
- Observing a varied landscape of IWs, with high deployments of IW10 in some server networks and older values in others. Notably, some services use customized IW configurations for different applications.

**Structure:**
- Section 2 reviews related work on IW scans.
- Section 3 details the design of our measurement.
- Section 4 discusses our scan results.
- Section 5 concludes the paper.

## 2. Related Work
The significance of TCP’s initial congestion window (IW) size is reflected in extensive debates and evolving standards over the past decades. Initially set to 1 segment in 1988 [13] and standardized in 1997 [24], the IW was experimentally extended to 2-4 segments (or 4380 B) in 1998 [3] and later moved to a proposed standard [4]. Motivated by increasing network access speeds and the desire to reduce web page loading times, [9] proposed in 2010 and RFC 6928 [8] recommended in 2013 to increase the IW to 10 segments. Most recently, Allman [2] argues for abandoning a fixed IW specification, allowing hosts to configure more tailored IWs.

Given the impact of IW on flow completion times and Internet traffic burstiness, an empirical understanding of IW is necessary. Previous studies include active measurements by Medina et al. [15], who probed 85,000 servers in 2004, and passive measurements by Qian et al. [20], who inferred IW distributions from network traces in 2009. A small-scale study by CDNPlanet [7] found that 6 out of 15 CDNs used IW10, while others used larger IWs. However, no large-scale assessment has tracked recent changes in IW parameterization, such as IW10 [8] and the proposed abandonment [2] of default IWs. Therefore, an updated view of current IW deployment is required.

## 3. Initial Window Scan Design
We use active measurements to assess TCP’s IW configurations deployed by HTTP/TLS hosts in the IPv4 address space. This allows us to evaluate all publicly reachable IPv4 hosts, including content infrastructure like CDNs, where IW can significantly affect performance. Since the IW size is not advertised in TCP headers, it must be inferred from the sender’s behavior. Our methodology, detailed next, is based on the method by Padhye and Floyd [18].

### 3.1 General Initial Window Size Inference
Our scan procedure, depicted in Figure 1, begins with a TCP 3-way handshake, where a certain MSS and a large receive window are announced in the SYN packet. A large receive window ensures that sending is limited only by the IW and not by flow control. To infer the IW size, we send a request to trigger a data transfer from the remote host upon completion of the handshake. The remote host will either utilize the full IW if it has sufficient data to send or stop before reaching the full IW if the response is too small. By not sending acknowledgments, we prevent the remote end from increasing the congestion window, eventually triggering a retransmission. Our scanner then counts the received bytes and packets, assuming this to be the IW.

This basic procedure faces challenges from packet reordering and loss. We inspect sequence numbers to detect these events, but detecting packet loss, especially at the end of the stream, can be difficult. Additionally, TCP tail loss probes can affect the estimated value, so we disable selective acknowledgment to avoid this. Performing multiple scans of the same host can help detect tail loss.

The main challenge is triggering responses large enough to fill the sender’s IW, especially without prior knowledge of the response size. We address this in two ways:
1. **Maximizing Transmitted Segments:** By advertising a small MSS, we lower the number of response bytes needed to fill the IW. We announce an MSS of 64 B, but monitor the actual segment size and use the observed maximum for our IW estimation.
2. **HTTP and TLS-based Probing Methods:** We derive methods to trigger large requests without prior knowledge, detailed in the following sections.

After receiving the retransmission of the first segment, we acknowledge the last received segment, causing the host to release more segments if it has more data. If the host is out of data, no new segments will arrive, indicating that the estimation failed.

### 3.2 HTTP-based IW Inference
To generate sufficient response data, we rely on probing HTTP servers. This choice is motivated by the widespread deployment of HTTP as a major application layer protocol, making it a suitable candidate for our IW scans.