title:Large-scale scanning of TCP's initial window
author:Jan R&quot;uth and
Christian Bormann and
Oliver Hohlfeld
Large-Scale Scanning of TCP’s Initial Window
Jan Rüth, Christian Bormann, Oliver Hohlfeld
Communication and Distributed Systems, RWTH Aachen University
{rueth,bormann,hohlfeld}@comsys.rwth-aachen.de
ABSTRACT
Improving web performance is fueling the debate of sizing TCP’s
initial congestion window (IW), which is a critical performance pa-
rameter especially for short-lived flows. This debate yielded several
RFC updates to recommended IW sizes, e.g., an increase to IW10
in 2010. The current adoption of IW recommendations is, however,
unknown. In this paper, we therefore conduct large-scale measure-
ments covering the entire IPv4 space inferring the IW distribution
size by probing HTTP and HTTPS servers. We present an HTTP
and TLS scanning method implemented in ZMap, enabling quick
estimations of IW sizes at Internet scale. For the first time since the
standardization and implementation of IW 10, we shed light on the
rugged landscape of IW configurations on the Internet.
CCS CONCEPTS
• Networks → Transport protocols; Network measurement;
KEYWORDS
TCP Initial Window, Measurements
ACM Reference Format:
Jan Rüth, Christian Bormann, Oliver Hohlfeld. 2017. Large-Scale Scanning
of TCP’s Initial Window. In Proceedings of IMC ’17, London, United Kingdom,
November 1–3, 2017, 7 pages.
https://doi.org/10.1145/3131365.3131370
1 INTRODUCTION
For decades network protocol engineering has focused on improv-
ing throughput. Recent advances instead focus on latency reduc-
tions, e.g., fueled by attempts to optimize the interaction experience
with web services. The results of these approaches are reflected
in attempts to replace TCP as long-established transport protocol
(e.g., by QUIC [12] or MinimaLT [19]) or attempts to reduce ini-
tial loading delay with handshake optimizations (e.g., by TCP Fast
Open [21] or TLS False Start [14]). Since protocol extensions or even
replacements can face slow adoption rates—especially for transport
protocols—protocol parameter optimizations denote a popular area
of performance optimization.
In this respect, one long-lasting debate concerns the size of TCP’s
initial congestion window (IW). This parameter controls the amount
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’17, November 1–3, 2017, London, United Kingdom
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11...$15.00
https://doi.org/10.1145/3131365.3131370
of unacknowledged data that can be sent after connection setup
and therefore directly influences Internet traffic characteristics (e.g.,
traffic burstiness) and application performance (especially for short-
lived flows). Concretely, small IWs can prolong transmissions dur-
ing TCP’s slow start, especially for request/response protocols such
as HTTP or the TLS handshake. At the beginning of the connection,
a small request triggers a potentially large response that does not
fit into a small IW thus prolonging the transmission for at least
one round-trip. On the other hand, large IWs generate traffic bursts
that can overflow low-capacity links. The debate on configuring an
Internet-optimal IW started in the late 90s currently yielded to the
deployment of IW 10, initially proposed in 2010 [9] and enabled in
the Linux kernel as a default in 2011 [16]. The advocators argued
that IW 10 allows transmitting the initial response within the first
round trip of the connection for large fractions of the web traffic.
A recent IETF draft [2] questions this practice of standardizing an
IW that is optimal for all applications and Internet hosts. Instead,
this draft argues that the IW should be configured custom to each
deployment and application. Despite this debate on the proposed
IW, the actual IW values of Internet hosts remains largely unknown.
Given the relevance of the parameter for both Internet traffic and
application performance and in light of the ongoing debate on its
optimal value, we posit that a deeper empirical understanding of
current practices is needed.
This paper describes the first comprehensive assessment of TCP’s
IW configuration among TLS/HTTP hosts. The goal of our work
is to inform the current debate with an up-to-date view on IW
configurations resulting from a large-scale assessment of all public
IPv4 hosts reachable on port 80/tcp (HTTP) and 443/tcp (HTTPS).
This view is particularly relevant since it is the first assessment after
the standardization of IW10. Our study is enabled by an extended
measurement methodology that enables to scan HTTP and TLS
hosts without any prior knowledge. We contribute:
• We conduct the first ever large-scale IW scan over HTTP/TLS
reachable hosts in the entire IPv4 space. Yet we show that scan-
ning a small random subset (e.g., as small as 1%) is actually
enough to infer a representative IW distribution. Scanning smaller
random sets helps in reducing the Internet scan footprint.
• We provide a measurement methodology utilizing HTTP and TLS
to estimate IW settings without prior knowledge on an Internet
scale. We make our implementation of this methodology in the
ZMap scan tool openly available [22].
• We observe a rather rugged landscape of IWs; while server net-
works show high deployments of IW10, other (legacy) networks
still use older values. Notably, some services run IW configura-
tions customized to different services.
Structure. Section 2 presents related work on IW scans and Sec-
tion 3 presents the design of our measurement. We then discuss
our scan results in Section 4 and conclude the paper in Section 5.
IMC ’17, November 1–3, 2017, London, United Kingdom
Rüth et al.
2 RELATED WORK
The relevance of TCP’s initial congestion window (IW) size is re-
flected in an extensive debate and a successive evolution of its
value in the TCP standards over the last decades. Initially, the IW
was set to 1 segment in 1988 [13] and 9 years later standardized in
1997 [24]. This setting was experimentally extended to 2-4 segments
(or 4380 B) in 1998 [3] and one year later moved to a proposed stan-
dard [4]—a setting that remained untouched for a decade. Motivated
by the increase of network access speeds and the desire to reduce
web page loading times, [9] proposed in 2010 and later RFC 6928 [8]
recommended in 2013 to increase the IW to 10 segments. Most
recently, Allman [2] even argues for abandoning a specification of
the IW size and thus ending a decades-long debate. This argument
is motivated by allowing hosts to configure more tailored IWs.
Given the relevance of the IW on both flow completion times and
Internet traffic burstiness, an empirical understanding of the IW is
necessary to understand current network performance. This under-
standing has been gained in both active and passive measurement
studies. With regards to active measurements, Medina et al. [15]
probed 85 k servers in 2004. The size of the probe set was limited
since prior knowledge of the targets was required—a property that
is not needed in our scan methodology which enables us to probe
the entire IPv4 address space. With regards to passive measure-
ments, Qian et al. [20] inferred IW distributions from several traces
in 2009. While their data set covers traces captured in a diverse
set of networks and also covers non-publicly visible hosts, our IW
assessment based on active measurements allows probing of the
entire IPv4 address space containing all publicly reachable hosts. A
small-scale study by CDNPlanet [7] probed 15 CDNs via HTTP and
found 6 to use IW10 and others to use larger IWs. Further, since no
large-scale assessment is available to track recent changes in IW
parameterization (e.g., IW10 [8] and the proposed abandoning [2]
of default IWs), we argue that an updated view on the current IW
deployment is required. We update this view with an assessment
of TCP’s IW for reachable IPv4 HTTP and TLS hosts.
3 INITIAL WINDOW SCAN DESIGN
We use active measurements to extensively assess TCP’s IW con-
figurations deployed by HTTP/TLS hosts in the IPv4 space. This
enables us to assess all publicly reachable IPv4 hosts, including con-
tent infrastructure such as CDNs for which the IW can be a relevant
performance aspect. Since the IW size is not advertised in the TCP
headers (e.g., unlike the Maximum Segment Size), the IW size can
only be inferred from the sender’s behavior. This IW size inference
is thus at the core of our methodology, which we detail next.
3.1 General Initial Window Size Inference
We base our scan on the method of Padhye and Floyd [18], which
we summarize and extend next and depict in Figure 1. The IW
estimation starts with performing TCP’s 3-way handshake in which
a certain MSS and a large receive window is announced within
the SYN packet. Advertising a large receive window ensures that
sending is only limited by the IW and not by flow control. To
infer the IW size, we send a request to trigger a data transfer by
the remote host upon completion of the handshake. The remote
host will either have sufficient data to send, utilizing the full IW,
Our Scanner
Probed Host
SYN[MSS=...,WIN=...]
SYN, ACK
ACK, REQUEST
ACK, SEG 1
SEG n
SEG 1
ACK n+1, WIN=2 · MSS
SEG n+1
SEG n+2
RST
Estimate
MSS
Estimate
IW=n
Verify
IW
full
Timeout
Retransmission
Figure 1: Scan procedure: A small MSS is announced and ver-
ified, preventing to run out of data prior to reaching IW. The
estimated IW is the # bytes received before retransmission.
or stop sending before reaching the full IW size if the request
did not trigger a large enough response. As in [18], we do not
send acknowledgments causing the remote end not to increase the
congestion window and to eventually trigger a retransmit of its
first segment. Our scanner can then simply count the bytes and
packets it received and assume this to be the IW.
This basic procedure is challenged by the presence of packet
reordering and loss. To account for these challenges, we inspect
the sequence numbers to detect both events. While this approach
enables us to easily detect reorderings, the detection of packet
loss can be more difficult. First, if one needs to further analyze
the received data besides the IW assessment, lost packets would
need to be retransmitted, which given the scanners methodology is
impossible. Second, packet loss at the end of the stream (tail loss), i.e.,
in the last packet, cannot be detected and thus may lead to erroneous
IW estimates. Furthermore, TCP tail loss probes could set off the
estimated value, thus we do not enable selective acknowledgement
effectively disabling tail loss probes. Performing multiple scans of
the same host can increase the likelihood of detecting tail loss.
However, the biggest challenge when applying this technique
to an unknown set of hosts is triggering large enough responses
that fill up the senders IW. This is because, in the absence of prior
knowledge, the response size to a generic request is unknown. In
the event of responses smaller than the configured IW, the IW size
cannot be estimated. We address this challenge in two ways.
First, we maximize the number of transmitted segments by lim-
iting the MSS advertised in the TCP handshake. This is possible,
since the IW is configured in bytes depending on the advertised
MSS [8]:
IW = min(10 · MSS, max(2 · MSS, 14600)).
This definition is twofold: on the one hand, it defines an upper limit
in bytes. On the other hand, it suggests to reference the IW just by
the factor employed to the MSS, i.e., by the number of packets. Thus,
by announcing a small MSS, we can effectively lower the amount of
response bytes that are required to fill the IW. However, no standard
defines the smallest possible MSS, only a default MSS of 536 B is
defined. We therefore examined fresh copies of multiple operating
systems to test for the smallest possible MSS. We observed that
Large-Scale Scanning of TCP’s Initial Window
IMC ’17, November 1–3, 2017, London, United Kingdom
Linux will typically reject an MSS below 64 B. All tested variants
of Microsoft Windows default to 536 B if the MSS falls below that
value. Concluding, we announce an MSS of 64 B, but monitor the
actually used segment size and use the observed maximum for our
IW estimation.
Second, we derive HTTP and TLS-based probing methods to trig-
ger large requests without prior knowledge which we detail in the
succeeding sections. Yet, regardless of the method we can determine
whether hosts are limited by the IW or simply because they are
short of data to transmit. After having received the retransmission
of the first segment, we will now acknowledge the last received
segment, effectively acknowledging all data sent before. In case a
host has more data, the acknowledgements cause a release of more
segments as the congestion window increases and the number of
unacknowledged bytes reduces, thus the host was in fact limited by
the IW. In contrast, if the host is out of data, no new segments will
arrive, thus we conclude that the estimation failed as we cannot be
sure that the IW was filled. To limit the potential load of segments
our scanner has to process, we leverage flow control by signaling
a small receive window of only two segments to limit the sender
while still having some redundancy for the detection.
3.2 HTTP-based IW Inference
To generate sufficient response data, the first method relies on
inferring the IW by probing HTTP servers. This choice is motivated
by the widespread deployment of HTTP as major application layer
protocol, which thus provides a good candidate for our IW scans.