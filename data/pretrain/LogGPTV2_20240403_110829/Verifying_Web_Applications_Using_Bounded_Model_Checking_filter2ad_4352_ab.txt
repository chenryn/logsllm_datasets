operator  and  a  least  upper  bound  operator  exit  on  T.  For 
subset  Y  (cid:142)  T,  let  (cid:138) Y  denote  (cid:70)  if  Y  is  empty  and  the 
greatest lower bound of the types in Y otherwise; let  (cid:137) Y
denote (cid:3704)  if Y is empty and the least upper bound of the 
types in Y otherwise. 
Types resulting from expressions are determined using 
the  upper-  and  lower-bound  operators  (i.e.,  (cid:137)  and  (cid:138) ,
respectively) defined above.
3.2. Abstract Interpretation 
o
|
|
|
i
e
x
| 
 | 
(cid:12)
(cid:12)
(cid:32)
:
| if 
(cid:32)
::
(cid:32)
::
 then 
x n e
1
(cid:11)
f X stop
Given  a  program  p,  we  first  use  a  filter  to  generate 
F(p),  which  consists  of  command  sequences  constructed 
according to the following syntax rules: 
(commands)  
(cid:11)
e f X
c
(expressions) 
e
e
2
, where x is a variable, n is a constant, ~ stands for binary 
operations such as +, and X(cid:142)dom(p) is a variable set. By 
preserving  only  assignments, 
function  calls  and 
conditional  structures.  F(p)  unfolds  function  calls  and 
discards  all  program  constructs  that  are  not  associated 
with information flow. During execution, data is retrieved 
|while 
c c c
 else 
 do 
c
1
~
c
e
;
1
|
2
2
from  external  sources  (e.g.,  reading  files  or  retrieving 
environment variables). Functions that permit the flow of 
external  data  into  a  program  are  identified  as  untrusted
input  channels  (UIC),  denoted  as  fi(X).  An  example  in 
PHP  is  GET_HTTP_VARS(),  which  retrieves  data  from 
HTTP requests sent by Web clients. In WebSSARI, UICs 
are  given  predefined  postconditions  consisting  of 
command  sets  that  match  the  designated  safety  levels  of 
the  retrieved  data.  At  the  same  time,  program  execution 
also  entails  calling  functions  that  manipulate  system 
resources or affect system integrity—in PHP, for instance, 
exec()  executes  system  commands  and  echo()  generates 
output.  These  functions—identified  as  sensitive  output 
channels  (SOC)  and  denoted  as  fo(X)—require  trusted 
arguments.  Each  one 
is  assigned  a  predefined 
precondition  that  states  the  required  argument  safety 
levels.
(cid:32)(cid:16)
t
e e
i
j
(cid:138)
t
e
j
t
e
i
(cid:32) , where (cid:87) depends on 
Filtered Result: 
F(p)
x = e;
fi(X);
fo(X);
stop; 
t
,
t
n
(cid:32)(cid:65)
, where 
Abstract Interpretation: 
AI(F(p))
e(cid:32)
t
x
x X xt (cid:87)
(cid:143)(cid:5)
the postconditions of fi
assert X (cid:87) ,where
preconditions of  of
, r
(cid:11)
(cid:12)
stop; 
r(cid:87) depends  on  the
if e then c1 else c2 if be then AI(c1) else AI(c2)
while e do c 
if be then AI(c)
AI(c1); AI(c2)
c1; c2 
Figure 4. Abstract interpretation procedure. 
program 
execution.  When 
As one would expect, the stop command immediately 
terminates 
verifying 
conditional  structures  within  a  program,  we  do  not 
consider  how  condition  e  evaluates,  but  rather  focus  on 
making sure that each branched path behaves correctly. In 
path-sensitive  terminology,  we  treat  all  these  conditions 
as  nondeterministic  conditions.  Furthermore,  since  we 
only  consider  information  flow,  loop  structures  can  be 
deconstructed into selection structures. 
Consequently, given a safety type lattice T and sets of 
pre- and postconditions, we translate F(p) into an AI that 
consists  only  of  if  instructions,  type  assignments  and 
assertions. The intuitive interpretation procedure AI(F(p))
is illustrated in Figure 4. An assignment from expression 
e  to  variable  x  is  translated  into  a  type  assignment  that 
conveys e’s  safety  type  to  x.  Function  preconditions  are 
assert X (cid:87) )  that  specify 
expressed  using  assertions  (
(cid:143)(cid:5)
(cid:12)
, r
(cid:87) (cid:87)
,  
r
requirements 
t
x X x
safety 
(cid:11)
(cid:31)
dom
(cid:143)
(cid:11)
(cid:12)
),
T
(
,
r
meaning that the types of all variable in X must be lower 
(safer)  than  r(cid:87) .  Postconditions  are  expressed  using  type 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:16 UTC from IEEE Xplore.  Restrictions apply. 
3.3.2. Encoding using variable renaming 
it 
renaming 
Clarke  et  al.  [6]  [7]  automated  memory  overflow  and 
assertion  consistency  tests  for  C  and  Verilog  with  their 
CBMC  [8]  tool.  The  checker  unwinds  C  or  Verilog 
programs  and  converts  them  to  a  Boolean  formula  that 
can  be  checked  for  behavior  consistency.  CBMC  uses 
variable 
to  create  a  single  assignment
program—similar  to  a  Static  Single  Assignment  (SSA) 
program  [11]  without  the (cid:73)(cid:16) condition.  Since  the 
algorithm  uses  variable  renaming, 
it  encodes  each 
assignment  using  only  2  variables.  However,  compared 
with  the  algorithm  mentioned  in  the  previous  section, 
using  renaming  makes 
inefficient  for  modeling 
languages  containing 
loop  constructs.  Since  our 
information  flow  model  allows  for  deconstructing  loop 
structures  into  selection  structures  without  unfolding,  we 
can adopt Clarke et al.’s algorithm without any drawback. 
In their algorithm, AI variables are renamed such that 
each renamed variable is assigned only once. Assume that 
variable v is referred to at program location i in an AI. Let 
(cid:302)  denote  the  number  of  assignments  made  to  variable  v
prior  to  i,  then  the  variable  v at  location  i  is  renamed  to. 
v(cid:302).  After  this  renaming  procedure  (cid:545),  each  assignment 
becomes  unique,  which  allows  for  information  flow 
tracking without the need for auxiliary location variables. 
In our revised version (xBMC1.0), we used Clarke et al.’s 
[6] [7] algorithm to encode our AI. Given a command c,
the constraint generated by procedure C(c,g) is shown in 
Figure 5 (g denotes the guard and is initially true). 
AI Command 
stop; or empty 
t
x
t(cid:32)
e
if 
eb
 then 
c
1
 else 
c
2
assert
(cid:138)
(cid:11)
(cid:11)
t
|x
x X
(cid:143)
(cid:12)
(cid:31)
(cid:12)
T
R
(cid:11)
C c g
,
(cid:12)
(cid:32) (cid:159)
:
g
(cid:143)(cid:5)
x X xt (cid:87)
,
assignment sets (of the form 
(cid:12)
that  describe  the  safety  level  of  each  piece  of  retrieved 
data.  In  WebSSARI,  pre-  and  postcondition  definitions 
are  stored  in  two  prelude  files  that  are  loaded  during 
startup (see Section 4). 
(cid:11)
dom T
(cid:87)(cid:143)
(cid:32)
)
3.3. Formal Verification 
Using the AI definitions given above, the verification 
of  a  given  PHP  program  p  consists  of  checking  whether 
AI(F(p)) is consistent with its assertions. We will present 
some  observations  before  attempting  to  automate  this 
process.  First,  AI(F(p))  is  loop-free  and  its  flow  chart 
forms  a  directed  acyclic  graph  (DAG),  implying  a  fixed 
program  diameter  [16].  Second,  AI(F(p))  represents  a 
single  sequential  process  with  large  numbers  of:  a) 
variables  and  b)  branches  following  simple  assignments. 
Based on these observations, we adopted Bounded Model 
Checking 
the  more 
conventional model checking techniques based on binary 
decision  diagrams  (BDDs).  In  addition  to  its  ability  to 
provide  both  sound  and  complete  verification,  BMC  is 
more  efficient  in  finding  bugs  and  more  capable  of 
handling large numbers of variables that may cause BDDs 
to crash [23]. 
(BMC) 
rather 
than 
[3] 
[4] 
In  BMC,  a  system’s  transition  relations  are  unfolded 
with  bounded  steps  and  coupled  with  initial  and  risk 
conditions  to  form  a  CNF  formula,  which  is  then  solved 
using  a  SAT  solver.  In  the  following  sections  we  will 
describe the details of our program encoding and some of 
the difficulties we encountered.
3.3.1. Encoding using an auxiliary variable 
The  first  challenge  was  keeping  track  of  program 
behaviors.  A  naïve  but  conceptually  straightforward 
solution  was  to  add  an  auxiliary  variable  l  to  record 
program  lines  (statements).  Given  a  program  p,  let 
 denote  state  variables, 
X l
AI F p
dom(
)))}
(cid:32) (cid:137)
(cid:143)
{
t
x
(
(
|
x
then  we  can  construct  a  control-flow  graph  CFG(X,p).
The  transition  relations  of  CFG(X,p)  are  encoded  as  a 
CNF  formula,  T(s,s’),  where  s  and  s’  denote  the  current 
and  the  subsequent  program  states  (the  evaluation  of  X), 
respectively.  By  rolling 
(
T s
(cid:14)
1
i
i
,
s
)
 up  for  a  bounded  k 
number  of  steps  (the  length  of  the  longest  path  in 
CFG(X,p)), the entire formula is represented as: 
(cid:11)
B X k
,
(cid:12)
(cid:32)
(
I s
0
)
(cid:154)
T s
0
1
s
,
(cid:154)
(cid:34)
(cid:154)
T s
(cid:16)
1
k
k
,
s
(cid:154)
R s
i
(cid:34)
,
,
s
k
(cid:11)
(cid:12)
(cid:11)
where
(cid:11)
I s
(cid:12)0
is  the  initial  condition  and 
R s
i
s(cid:34)
,
,
k
(cid:12)
(cid:11)
(cid:11)
specifies  the  risk  conditions  (assertion  negations)  within 
the ith and kth states.
We incorporated this idea into our first BMC version, 
xBMC0.1,  but  initial  experiments  revealed  frequent 
system breakdowns, primarily due to inefficient encoding 
of each assignment using 2|X| variables. 
Constraint  
,
(cid:11)
C c g
(cid:11)
C c g
,
(cid:12)
(cid:12)
(cid:32)
:
(cid:32)
:
true
) :
t
e
(cid:16)
1
i
x
t
x
(cid:31)
T
R
i
x
t
t
g
(cid:32)
(cid:85)
? (
(cid:167)
(cid:31)
(cid:168)
(cid:85)
(cid:168)
(cid:169)
(cid:11)
C c g
(cid:11)
C c g
(cid:11)
C c g
b
e
(cid:154) (cid:153)
(cid:12)
(cid:143)
x X
(cid:154)
(cid:154)
1
2
,
,
(cid:12)
b
e
(cid:12)
(cid:183)
(cid:184)