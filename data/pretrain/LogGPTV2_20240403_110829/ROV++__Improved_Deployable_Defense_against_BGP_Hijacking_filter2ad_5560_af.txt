### Implementation, Deployment, and ROV++ Lite

#### Introduction
The blackholing, blackhole announcement, and preventive announcement mechanisms in ROV++ can be easily implemented on existing routers. However, the preference for safe paths (a feature included in all ROV++ variants) requires modifications to the BGP path selection process, which necessitates changes to BGP routers and possibly their configuration parameters and scripts. To simplify implementation and deployment, we designed ROV++ Lite, which omits the safe-path preference mechanism. This results in only a slight performance degradation compared to the non-Lite version.

#### ROV++ Lite: A Plug-and-Play Design
ROV++ Lite differs from the full ROV++ in that it does not include the safe-path preference mechanism. Instead, it uses the standard BGP best path selection process. If the selected path contains holes, ROV++ Lite v1 sets up data-plane blackholing. ROV++ Lite v2 and v3 further incorporate the blackhole announcement mechanism, and v3 also includes the preventive announcement mechanism. All Lite versions can be implemented on legacy BGP routers.

#### Performance of ROV++ Lite
For non-routed prefix hijacking, the performance of the Lite version is identical to the non-Lite version, as the safe-path preference mechanism is irrelevant in such cases. For subprefix hijacking, our evaluation shows that the Lite version performs very similarly to the non-Lite version. Figure 11 compares the hijack rates of ROV++ v1 Lite and the non-Lite version for both adopting and non-adopting ASes. The Lite version has a slightly higher hijack rate for adopting ASes, but the performance is almost identical for non-adopting ASes. Similar results were observed for successful connection rates and disconnect rates (figures omitted).

#### ROV++ Lite Implementation
ROV++ Lite can be deployed in any AS with legacy BGP routers, assuming the availability of several standard mechanisms: ROV, BMP [50], and BGP FlowSpec [40]. We implement ROV++ Lite through a ROV++ Lite server, as shown in Figure 12. The Lite server communicates with multiple routers in the AS and needs to be aware of incoming hijack announcements to take appropriate countermeasures, starting with blackholing (from v1). It obtains all incoming BGP announcements via BMP [50] and identifies invalid announcements (suspected hijacks) by receiving updated RPKI information (ROAs and RCs) from standard RPKI repositories, caching, and validating them. We use the RIPE implementation and the RTR protocol to set the ROV rules in the routers.

After identifying a hijack, the Lite server applies the ROV++ policy and countermeasures: blackholing (from v1), blackhole announcements (from v2), and preventive announcements (from v3). Blackholing is implemented using BGP FlowSpec [40]. Listing 1 shows an example of blackholing prefix 1.2.3/24 using FlowSpec on JunOS.

```junos
routing-options {
    flow {
        route BLK-PREFIX {
            match {
                source 1.2.3.0/24;
            }
            then {
                discard;
            }
        }
    }
}
```

To issue blackhole announcements (from v2) and preventive announcements (v3), the Lite server uses a software BGP router that is part of the ROV++ Lite server package. Note that blackhole announcements are BGP announcements with additional flag information in the transitive attribute section. The Lite server can execute the blackhole specified using the commands in Listing 1.

#### Summary: Pros, Cons, and Recommendations
Table I summarizes the pros and cons of the various ROV++ variants (both non-Lite and Lite versions) and provides recommendations for adoption in the context of routed and non-routed prefix hijacks.

- **Lite versions recommended**: They are easier to deploy and perform comparably to the non-Lite versions.
- **Subprefix hijacking**: 
  - **Recommended**: ROV++ v1, as it provides similar performance to v2/v3 but is simpler and easier to implement.
  - **Not recommended**: ROV++ v2 and v3 due to their complexity and potential for abuse.
  - **Not recommended**: ROV++ v2a due to its significantly lower successful connection rate.
- **Non-routed prefix hijacking**:
  - **Recommended**: ROV++ v2a for its lowest hijack rate and aggressive blackhole announcement propagation, which does not cause adverse impact since the prefixes are non-routed.
  - **Recommended**: ROV++ v2, as it outperforms v1 and offers better economic incentives for ASes.

#### Feedback from Network Operators
We are working with network operators to gather feedback on our design and implementation, understand their concerns, and coordinate deployment. The operators have shown keen interest in the potential of ROV++ to defend against DoS attacks, providing an incentive for deploying the blackholing mechanism. Overall, the responses have been positive, and we hope this will lead to experimental and long-term deployments.

#### Recommendation and Discussion
- **ROV++ Variants**: We recommend the easier-to-deploy Lite versions, as they perform comparably to the regular versions.
- **Mixed Deployments of ROV and ROV++ Variants**:
  - **ROV and ROV++ Interaction**: ROV may result in hidden hijacks, while mixing ROV++ and ROV reduces this risk.
  - **Mixing Higher and Lower Versions**: Mixing higher and lower versions of ROV++ can reduce the effectiveness of the higher versions.
  - **No Hidden Hijacks**: ROV++ never introduces hidden hijacks in mixed deployment scenarios.

#### Conclusions and Future Work
We presented and evaluated ROV++, an improvement over the ROV standard, which significantly reduces hijack rates for both subprefix and non-routed prefix attacks. We also developed and evaluated ROV++ Lite versions for easy deployment on existing routers. Future work includes:
- Developing techniques to further reduce the impact of hidden hijacks.
- Exploring mixed deployments of ROV and ROV++.
- Investigating other ROV extensions for edge ASes.
- Evaluating ROV++ under more realistic simulation settings.

We hope our study raises awareness of the security limitations of ROV and motivates further research to improve inter-domain routing security.

#### Acknowledgements
We thank the anonymous reviewers, Dr. Samuel Jero, and our collaborating partners for their valuable feedback and support. This work was partially supported by NSF and Comcast Corporation.

#### References
[1] AT&T/as7018 now drops invalid prefixes from peers. https://seclists.org/nanog/2019/Feb/140.
[2] Indosat. Hijack-by-as4761-indosat-a-quick-report. http://www.bgpmon.net/
[3] W. Aiello, J. Ioannidis, and P. McDaniel. Origin authentication in interdomain routing. In Proc of CCS, 2003.
[4] Ruwaifa Anwar, Haseeb Niaz, David Choffnes, Italo Cunha, Phillipa Gill, and Ethan Katz-Bassett. Investigating Interdomain Routing Policies in the Wild. In Proc. of ACM IMC, Oct. 2015.
[5] Hitesh Ballani, Paul Francis, and Xinyang Zhang. A Study of Prefix Hijacking and Interception in the Internet. In Proc. of ACM SIGCOMM, pages 265â€“276, 2007.
[6] O. Borchert, O. Kim, L. Hannachi, D. Montgomery, and K. Sriram.