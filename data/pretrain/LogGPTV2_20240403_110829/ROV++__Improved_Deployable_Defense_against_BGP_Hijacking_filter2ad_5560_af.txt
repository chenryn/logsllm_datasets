IMPLEMENTATION, DEPLOYMENT AND ROV++ LITE
The blackholing, blackhole announcement and preventive
announcement mechanisms in ROV++ are easy to implement
on existing routers. The preference to safe paths (included in
all ROV++ variants), however, requires changes to the BGP
path selection process, which requires changes to BGP routers
and possibly also the conﬁguration parameters and scripts used
by network operators. We design ROV++ Lite that removes
this preference mechanism for easy implementation and de-
ployment, while only leads to slightly degraded performance
compared to its non-lite counterpart as we show below.
ROV++ Lite: a plug-and-play design. ROV++ Lite differs
from ROV only in that it “gives up” the ROV++ safe-path
preference mechanism. Speciﬁcally, it uses the standard BGP
best path selection process. If the selected path contains holes,
then it sets up data-plane blackholing, which is ROV++ Lite
v1. ROV++ Lite v2 and v3 further include the blackhole an-
nouncement mechanism, and ROV++ Lite v3 further includes
the preventive announcement mechanism. All Lite versions can
be implemented on legacy BGP routers (see below).
Performance of ROV++ Lite. For non-routed preﬁx hi-
jacking, the performance of the Lite version is identical to
that of the non-Lite version (for all variants), since the safe-
path preference mechanism is irrelevant for such hijacks. For
subpreﬁx hijacking, our evaluation shows that the Lite version
is very much on par with the non-lite version. Fig. 11 shows
one example by comparing the hijack rate of ROV++ v1 Lite
and the non-lite version for both adopting and non-adopting
ASes. We see that the Lite version only has slightly higher
hijack rate than the non-Lite version for adopting ASes; for
non-adopting ASes, their performance is almost identical. We
observe similar results for successful connection rate and
disconnect rate (ﬁgures omitted).
13
Figure 12. The design and deployment of ROV++ Lite server for implementing ROV++ Lite.
(a) ROV++ Lite server design
(b) Deployment of ROV++ Lite server
ROV++ Lite Implementation. ROV++ Lite can be de-
ployed in any AS with legacy BGP routers, assuming only
several standard mechanisms available in most BGP routers:
ROV, BMP [50], and BGP FlowSpec [40]. We implement
ROV++ Lite through a ROV++ Lite server as shown in Fig. 12.
A ROV++ Lite server, deployed in an AS, can communicate
with multiple routers in the AS.
The Lite server needs to be aware of any incoming hijack
announcement
to take the corresponding countermeasures,
beginning with blackholing (already from v1). To achieve
this, it obtains all the incoming BGP announcements to the
routers through BMP [50]. Next, the Lite server needs to
identify invalid announcements (i.e., suspected hijacks). This
is achieved similarly to the regular ROV implementation2.
Namely, the Lite server receives updated RPKI information
(ROAs and RCs) from the standard RPKI repositories, and then
caches and validates them. We use the RIPE implementation,
and the RTR protocol to set the ROV rules in the routers.
After identifying a hijack,
the Lite server applies the
ROV++ policy and countermeasures: blackholing (from v1),
blackhole announcements (from v2) and preventive announce-
ments (from v3). In particular, to implement blackholing, it
uses BGP FlowSpec [40]. Listing 1 shows an example of
blackholing preﬁx 1.2.3/24 using FlowSpec on JunOS, by
specifying the action for the matching preﬁx as discard. A
similar set of commands can be used for Cisco IOS.
r o u t i n g −o p t i o n s
Listing 1. Blackholing with FlowSpec on JunOS
e d i t
e d i t match
s e t
s e t
commit
source 1 . 2 . 3 . 0 / 2 4
then d i s c a r d
flow r o u t e BLK PRE
To issue blackhole announcements (from v2) and preven-
tive announcements (v3), the Lite server uses a software BGP
router that is part of the Lite ROV++ server package. Note
that blackhole announcements are merely BGP announcements
with additional ﬂag information posted in the transitive at-
tribute section of a BGP announcement. Reading the ﬂag
from the transitive attribute, the Lite server can execute the
blackhole speciﬁed using the commands in Listing 1.
2Our implementation supports optional non-standard mechanisms to identify
hijacks, but these are not related to ROV++ and therefore out of scope.
14
Table I.
SUMMARY: PROS, CONS AND OUR RECOMMENDATION.
v1
v2
v2a
v3
Subpreﬁx hijacking
recommended: performance on par with
v2 and v3, not susceptible to abuse
not recommended: seems like propagating
hijack, deployment more complex than v1,
while performance comparable to v1
not recommended: has much
lower successful connection rate,
albeit lower hijack rate
not recommended: violates BGP ann.
mechanism, has risk of abuse by attacker,
while performance comparable to v1
Non-routed preﬁx hijacking
not recommended
recommended, lower (better)
hijack rate than v1, aligned
with economic incentives
recommended, but hard
to deploy, albeit signiﬁcantly
better (lower) hijack rate
not recommended, higher
complexity, performance same
as v2, risk of abuse
Lite versions recommended
Comparable results, much easier to deploy.
Feedback from Network Operators. We are currently
working with network operators to get feedback about our
design and implementation, to understand their concerns and
desires from a system such as ROV++, and to coordinate
deployment. The network operators with whom we communi-
cated have shown keen interest in the potential of ROV++ to
defend against DoS attacks, a major concern of many network
operators. This seems to provide an incentive for operators to
deploy ROV++, particularly the blackholing mechanism, that
does not exist in ROV, while requires little effort to implement
and deploy. Overall, the responses from the network operators
are positive, and we hope that this would indeed translate to
experimental (and later, hopefully, long-term) deployments. We
will continue to work with operators to improve our design,
install and deploy ROV++ Lite, and receive more feedback.
We are very grateful for their cooperation.
VII. RECOMMENDATION AND DISCUSSION
A. ROV++ Variants: Pros, Cons and Recommendations
We next summarize the pros and cons of the various
ROV++ variants (both non-Lite and Lite versions), and present
our recommendation on which variant(s) to adopt for routed
and non-routed preﬁx hijacks, respectively. The summary is in
Table I.
• Lite versions recommended. We recommend the easier-to-
deploy Lite versions (§VI), since in our experiments, they were
on par with the “regular” versions; e.g., see Fig. 11.
• Subpreﬁx hijacking. (i) For subpreﬁx hijacking, we rec-
ommend only using ROV++ v1. This is because, as shown
in Figures 7 and 8, ROV++ v1 provides similar performance
as ROV++ v2/v3, but is simpler and easier to implement. (ii)
We do not recommend ROV++ v2 or v3, since their hijack
rate is only slightly lower than that of v1, and they are harder
to deploy and implement; also, the blackhole announcement
in v2 can attract legitimate trafﬁc, causing unnecessary dis-
connection. Furthermore, there may be concerns about abuses
and unexpected side-effects of the blackhole and (even more)
preventive announcements. (iii) We do not recommend ROV++
v2a because of its signiﬁcantly lower successful connection
rate than other variants.
• Non-routed preﬁx hijacking. (i) We recommend ROV++
v2a for non-routed preﬁx hijacking (including the novel super-
preﬁx hijacking). This is because it has the lowest hijack rate;
its aggressive blackhole announcement propagation does not
cause adverse impact since the preﬁxes are non-routed (i.e.,
should not be announced at all), and hence there is no risk
of competing with legitimate trafﬁc. On the other hand, a v2a
AS will send blackhole announcements to its providers and
peers, and then drop the attracted trafﬁc, which will lead to
deployment challenges (the v2a AS attracts trafﬁc from its
provider and peers to prevent them from being hijacked, while
not being compensated for the trafﬁc, since it has to drop
the trafﬁc instead of forwarding the trafﬁc to its customers).
(ii) Considering both performance and deployment incentives,
we also recommend v2. This is because v2 outperforms v1
and ASes may have more economic incentives to adopt v2
than v2a (v2 ASes only send blackhole announcements to
their customers, and will be compensated for attracting and
dropping the trafﬁc from their customers).
Our recommendation above considers multiple aspects,
including ease of deployment, risk of abuse, performance
incentives. In general, routing is a social
and deployment
operation: when an AS sends routing announcements, there
is potential impact on other ASes. It is therefore necessary to
carefully consider the potential impact of any proposed change
in routing, and ensure that it meets the do no harm principle.
We discuss ethics of routing security in more detail in the full
version [43].
B. Mixed Deployments of ROV and ROV++ Variants
We next brieﬂy discuss how ROV++ interacts with ROV,
and how the three ROV++ variants interact with each other.
• ROV may often result in hidden hijacks, preventing ROV++
ASes (all versions) down the path from receiving hijack an-
nouncements and hence damaging their capability in mitigating
the attacks. In contrast, doing any version of ROV++ and then
ROV reduces the risk of hidden hijacks due to the ROV ASes
(they may select announcements created by ROV++ v2 or v3,
which will not create new hidden hijack), reducing the harm
from ROV.
• Mixing higher versions of ROV++ with lower versions can
reduce the impact of the higher versions. As an example, if the
path contains a ROV++ v1 AS followed by a v3 AS, then the
v3 AS may not be aware that the v1 AS blackholes trafﬁc to
the subpreﬁx, and send a preventive announcement with the v1
AS in the path, and the trafﬁc is blackholed (while otherwise
there may have been a path allowing delivery); the v3 AS may
also not be aware of the hijack at all, and hence does not send
a preventive announcement.
• ROV++ never introduces hidden hijacks in all mixed deploy-
ment scenarios, including mixed deployment of ROV++ and
ROV, and mixed deployment of multiple ROV++ variants.
VIII. CONCLUSIONS AND FUTURE WORK
We presented and evaluated ROV++, an improvement of
the ROV standard. ROV++ extends ROV by including several
mechanisms with different impacts and tradeoffs. Extensive
evaluation based on detailed simulations demonstrates that
ROV++ signiﬁcantly improves upon ROV, signiﬁcantly re-
ducing hijack rates for attacks on both subpreﬁxes and non-
routed preﬁxes, and especially with low adoption. We further
developed and evaluated ROV++ Lite versions, which can be
easily deployed on existing routers. Last, we discussed the
pros and cons of the various ROV++ variants, and provided
recommendations for deployment.
As future work, we are exploring in the following three
directions: (i) develop techniques to further reduce the impact
of hidden hijacks, (ii) explore scenarios with mixed deploy-
ments of ROV and ROV++, (iii) explore other ROV extensions
that will provide defense even when adoption happens only,
or almost only, at the edge ASes, and (iv) evaluate the per-
formance of ROV++ under more realistic simulation settings,
e.g., by taking account of real-world routing decisions, instead
of only using valley-free routing, and considering the current
deployment locations of ROV (e.g., as reported in [57]), instead
of or in addition to random locations.
We hope that our study raises the awareness of the security
limitations of ROV and motivates further studies addressing
these limitations. A collective effort of the community can lead
to a stronger foundation to continue building the momentum
of RPKI adoption and improve inter-domain routing security.
ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers for their
insightful and constructive feedback, and our shepherd Dr.
Samuel Jero for his helpful guidance. We also thank Joel
Halpern, Shuai Hao, John Kristoff, Louis Poinsignon, Lars
Prehn, Kotikalapudi Sriram, Celia Testart, and Russ White for
their comments and suggestions on earlier drafts of the paper.
Our collaborating partners, Connecticut Education Network
(Rick Cheung, Ryan Kocsondy, and Michael Pennington)
and UConn IT Services (Robert Kent, Michael Mundrane,
and Michael Williams) provided us valuable feedback on
deployment and operation aspects of this project. We are
grateful for the great work by the project team at UConn,
including Jack Aaron, Abhinna Adhikari, Matthew Jaccino,
Sam Kasbawala, Shariq Khan, Pablo Rodriguez, Sam Secondo,
Nicholas Shpetner, and Tony Zheng. This work was partially
supported by NSF under award OAC-1840041 and by the
Comcast Corporation. The opinions expressed in the paper are
those of the researchers and not of their university or funding
sources.
REFERENCES
[1] AT&T/as7018 now drops invalid preﬁxes from peers. https://seclists.
http://www.bgpmon.net/
org/nanog/2019/Feb/140.
Indosat
hijack-by-as4761-indosat-a-quick-report/.
Report.
a
Quick
[2]
15
[3] W. Aiello, J. Ioannidis, and P. McDaniel. Origin authentication in
interdomain routing. In Proc of CCS, 2003.
[4] Ruwaifa Anwar, Haseeb Niaz, David Choffnes, Italo Cunha, Phillipa
Gill, and Ethan Katz-Bassett. Investigating Interdomain Routing Poli-
cies in the Wild. In Proc. of ACM IMC, Oct. 2015.
[5] Hitesh Ballani, Paul Francis, and Xinyang Zhang. A Study of Preﬁx
Hijacking and Interception in the Internet. In Proc. of ACM SIGCOMM,
pages 265–276, 2007.
[6] O. Borchert, O. Kim, L. Hannachi, D. Montgomery, and K. Sriram.