５
５
2
5
5
0
3
5
0
3
5
0
3
05
3
Right
２Ｚ
4
4
424
Right
Right
Right
¥4
54
S
2
5
５４２
---
## Page 428
代码
具体时间见代码，时间复杂度 O(n)和 空间复杂度 O(1)。
i> Right,退出循环，
nums[0]=13>5,由于 13比中位数大，
nums[5]=5=5,由于5 已经和中间数相等了，
Array:
Mapped idx: 
Original idx:
Step Final:
Array:
Mapped idx: 
Original idx: 
Step 6:
Array:
Mapped idx: 
Original idx: 0
Step 5:
，最终摆动排序的结果是 5 6 413 2 5。
5
工
0
13
L
3
L
Left 
9
9
9
t
5
4
5
2
Right
Right
Right
13
0
5
0
3
所以可以把 13 放在第 2 个奇数位的位置，并移动left 和i。
Ｚ２
422
所以只后移i。
545
---
## Page 429
func selection324(arr []int, l,r,k int) int {
func findkthLargest324(nums []int, k int) int {
func indexMap(index, n int) int {
nums[indexMap(right, n)］ 
nums[indexMap(left, n)］ 
func wigglesort(nums []int) {
//解法一
import （
package leetcode
if k == p{
p := partition324(arr,1,r) 
if l ==r { 
return (1 + 2*index) % (n l 1)
"sort"
Y
return selection324(nums, 0, len(nums)-1, len(nums)-k)
for i  median { 
 return
Y
 i++ 
 right--
nums[indexMap(left, n)], nums[indexMap(i, n)] = nums[indexMap(i, n)],
 nums[indexMap(right, n)], nums[indexMap(i, n)] = nums[indexMap(i, n)],
i++ 
left++
 n)] 0 && (1162261467%n == 0) 
// 1162261467 is 3^19, 3^20 is bigger than int 
题是一样的思路。
了。由于 3^20 超过了 int 的范围了，所以 3^19 次方就是 int 类型中最大的值。这一题和第 231 
---
## Page 432
S(i,j) 表示在 nums 中，位置从i到j的元素之和，包含i和j(i≤j)。
给定一个整数数组 nums，返回区间和在 [lower,upper] 之间的个数，包含lower 和 upper。区间和
题目大意
Note:A naive algorithm of O(n2) is trivial. You MUST do better than that.
and j (i ≤ j),inclusive. 
inclusive.Range sum S(i, j) is defined as the sum of the elements in nums between indices i
Given an integer array nums, return the number of range sums that lie in [lower, upper] 
题目
327. Count of Range Sum
Example:
sums are: -2, -1, 2.
Explanation: The three ranges are : [0,0], [2,2], [0,2] and their respective
Output: 3 
Input: nums = [-2,5,-1], lower = -2, upper = 2,
func isPowerofThree2(num int) bool {
//解法三循环
1162261467: 1162261467}
14348907, 43046721: 43046721, 129140163: 129140163, 387420489: 387420489,
177147, 531441: 531441, 1594323: 1594323, 4782969: 4782969， 14348907:
243, 729: 729, 2187: 2187, 6561: 6561， 19683: 19683, 59049: 59049, 177147:
func isPowerofThreel(n int) bool 
//解法二打表法 
 allpowerofThreeMap := map[int]int{1: 1,3: 3, 9: 9, 27: 27, 81: 81, 243:
return num == 1
// 1162261467 is 3^19, 3^20 is bigger than int 
return ok 
if num%3 == 0 
return false
else { 
num = num /
3
Y
---
## Page 433
解题思路
最直观的算法复杂度是 O(n^2)，请在此基础上优化你的算法。
说明：
·给出一个数组，要求在这个数组中找出任意一段子区间的和，位于[lower,upper] 之间。
利用prefixsum下标离散化：
和，而应该是子节点出现的次数。第二个转换，由于前缀和会很大，所以需要离散化。例如
这一题当然还有更优的解法，
时间复杂度 O(n^2)。
这一题可以用暴力解法，2层循环，遍历所有子区间，求和并判断是否位于[lower,μupper] 之间,
prefixsum=［-3,-2,-1,0］，用前缀和下标进行离散化，所以线段树中左右区间变成了 0-3。
lower + prefixSum(i-1) ≤ prefixSum(j) ≤ upper + prefixsum(i-1)。 所以利用前缀和
[-3,-3] [-2,-2] [-1,-1] [0,0] 
[-3,-2]
[0,1]
[0,0]
[1,1]
[0,3]
[-3,0]
[2,2]
用线段树或者树状数组，将时间复杂度降为 O(n log n)。题目中要求
prefixSum = [-3,-2,-1,0]
prefixSum = [-3,-2,-1,0]
[3,3]
[2,3]
[-1,0]
离散化
初始化
0
---
## Page 434
●倒序插入len(prefixsum)-2 = prefixsum[4] = 0 :
●举个例子，nums =[-3,1,2,-2,2,-1]，prefixsum=[-3,-2,0,-2,0,-1]，去重以后并排
·还需要注意一些小细节，
足等式，所以这一步res =1。
断-3≤ sum(5,5）≤-1，满足等式的有几种情况，这里明显只有一种情况，即j=5，也满
这时候查找区间变为了[-3+prefixsum[5-1]，-1 +prefixsum[5-1]]=[-3,-1] ，即判
倒序插入 len(prefixsum)-1 = prefixsum[5] = -1:
后的线段树了，用非离散的线段树展示：
序得到 sum=［-3，-2,-1,0］。离散化构造线段树，这里出于演示的方便，下图中就不画出离散
upper，这3个等式是否成立，有几个成立就返回几个，即是最终要求得的结果的一部分。
sum(i=3,j=3) ≤ upper, lower ≤ sum(i=3,j=4) ≤ upper,lower ≤ sum(i=3,j=5) ≤
prefixsum[5] ， prefixsum[4]，prefixsum[3]，那么 query 操作实质是在判断：lower ≤
区间匹配，例如当前i循环到i=3，累计往线段树中插入了
例如往线段树中插入 prefixsum[5]，代表当前树中加入了j=5 的情况。query 操作实质是在做
树中倒序插入 prefixsum 的时候，用的是非去重的，插入 prefixsum[j] 代表 sum(i,i) 中的j,
有效区间。如果不去重，线段树中可能出现非法区间(left>right)或者重叠区间。最后一步往线段
[-3,-3] [-2,-2] [-1,-1] [0,0]
[-3,-2]
[-3,-2]
[-3,-3] [-2,-2] [-1,-1] [0,0]
sum = [-3,-2,-1,0]
sum = [-3,-2,-1,0]
[-3,0]
[-3,0]
prefixsum 计算完以后需要去重，去重以后并排序，方便构造线段树的
[-1,0]
[-1,0]
prefixSum = [-3,-2,0,-2,0,-1]
prefixSum = [-3,-2,0,-2,0,-1]
@halfrost
---
## Page 435
·倒序插入len(prefixsum)-4 = prefixsum[2]= 0 :
● 倒序插入len(prefixsum)-3 = prefixSum[3]= -2 :
5）≤-1。所以这一步 res = 2。
4 或者 j = 5， 满足等式的有 j = 3 和 j = 5， 即-3 ≤ sum(3， 3) ≤-1 和 -3 ≤ sum(3,
断-3 ≤ sum(3， 3,4,5）≤-1，满足等式的有几种情况，这里有三种情况，即j = 3、j =
这时候查找区间变为了 [-3 + prefixSum[3-1]，-1 + prefixSum[3-1]]=[-3,-1] ，即判
5，都不满足等式，所以这一步 res = 0。
断-5 ≤ sum(4， 4,5）≤-3，满足等式的有几种情况，这里有两种情况，即= 4 或者j =
这时候查找区间变为了 [-3 + prefixsum[4-1] ，-1 + prefixsum[4-1]] =[-5,-3] ，即判
[-3,-2]
[-3,-3] [-2,-2] [-1,-1] [0,0]
[-3,-2]
[-3,-3] [-2,-2] [-1,-1] [0,0]
sum = [-3,-2,-1,0]
sum = [-3,-2,-1,0]
[-3,0] 
[-3,0]
[-1,0]
[-1,0]
prefixSum = [-3,-2,0,-2,0,-1]
prefixSum = [-3,-2,0,-2,0,-1]
@halfrost
@halfrost
---
## Page 436
● 倒序插入 len(prefixsum)-6 = prefixsum[0] = -3:
● 倒序插入 len(prefixSum)-5 = prefixSum[1] = -2 :
j = 2、j = 3 、j = 4 或者  = 5，都不满足等式。所以这一步 res = 0。
断-6≤ sum(1，1,2,3,4,5）≤-4，满足等式的有几种情况，这里有五种情况，即j= 1、
=3、j = 4 或者 j = 5，都不满足等式。所以这一步 res = 0。
断-5 ≤ sum(2， 2,3,4,5）≤-3，满足等式的有几种情况，这里有四种情况，即= 2、j
这时候查找区间变为了[-3 + prefixSum[1-1]，-1 + prefixSum[1-1]]=[-6,-4] ，即判
这时候查找区间变为了 [-3+ prefixsum[2-1]，-1 + prefixsum[2-1]]=[-5,-3]，即判
[-3,-2]
[-3,-3] [-2,-2] [-1,-1] [0,0]
[-3,-2]
[-3,-3] [-2,-2] [-1,-1] [0,0]
sum = [-3,-2,-1,0]
sum = [-3,-2,-1,0]
[-3,0] 
[-3,0]
[-1,0]
[-1,0]
prefixSum = [-3,-2,0,-2,0,-1]
prefixSum = [-3,-2,0,-2,0,-1]
乙
S
@halfrost
1
@halfrost
---
## Page 437
代码
make([]int,len(nums))，make(map[int]int, O)，[]int{},0
func countRangeSum(nums []int, lower int, upper int) int {
//解法一线段树，时间复杂度 0(nlog n）
import （
package leetcode
 St, prefixSum, sumMap, sumArray, res := template.SegmentcountTree},
if len(nums) == 0 {
//sumArray 是 prefixSum 去重之后的版本，利用 sumMap 去重
for i := l; i =i，所以倒序遍历，i从大到小
st.Init(sumArray, func(i, j int) int {