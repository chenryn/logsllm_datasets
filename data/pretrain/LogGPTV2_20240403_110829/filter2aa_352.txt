Transparent Malware Debugging on x86 and
ARM
Zhenyu Ning and Fengwei Zhang
COMPASS Lab
Wayne State University
April 27, 2018
1
Outline
I Introduction
I Background
I Towards Transparent Malware Analysis
I MalT on x86 Architecture
I Ninja on ARM Architecture
I Conclusions
2
Outline
I Introduction
I Background
I Towards Transparent Malware Analysis
I MalT on x86 Architecture
I Ninja on ARM Architecture
I Conclusions
3
Transparency
What is transparent malware analysis?
4
Transparency
What is transparent malware analysis?
I Analyzing the malware without being aware.
I “Transparent” means that the malware cannot
detect it.
5
Transparency
Why transparency is important?
6
Evasive Malware
Computer System
Application
Malware
7
Evasive Malware
Computer System
Application
Malware
Analyzer
8
Evasive Malware
Computer System
Application
Application
Analyzer
9
Malware Analysis
What is the current state of malware
analysis systems?
10
Malware Analysis
Application
Operating System
Hypervisor/Emulator
App
App
Malware
11
Malware Analysis
Application
Operating System
Hypervisor/Emulator
App
App
Malware
Malware Analyzer
12
Malware Analysis
Application
Operating System
Hypervisor/Emulator
App
App
Malware
Malware Analyzer
I Unarmed to anti-virtualization or anti-emulation techniques.
I Large performance overhead.
13
Malware Analysis
Application
Operating System
Hypervisor/Emulator
App
App
Malware
Malware Analyzer
14
Malware Analysis
Application
Operating System
Hypervisor/Emulator
App
App
Malware
Malware Analyzer
I Unable to handle malware with high privilege (e.g. rootkits).
15
Transparency Requirements
What makes a transparent malware
analysis system?
16
Transparency Requirements
I An Environment that provides the access to the states of the
target malware.
I An Analyzer which is responsible for the further analysis of
the states.
17
Transparency Requirements
I An Environment that provides the access to the states of the
target malware.
I It is isolated from the target malware.
I It exists on an o↵-the-shelf (OTS) bare-metal platform.
I An Analyzer which is responsible for the further analysis of
the states.
18
Transparency Requirements
I An Environment that provides the access to the states of the
target malware.
I It is isolated from the target malware.
I It exists on an o↵-the-shelf (OTS) bare-metal platform.
I An Analyzer which is responsible for the further analysis of
the states.
I It should not leave any detectable footprints to the outside of
the environment.
19
Outline
I Introduction
I Background
I Towards Transparent Malware Analysis
I MalT on x86 Architecture
I Ninja on ARM Architecture
I Conclusions
20
System Management Mode
System Management Mode (SMM) [1] is special CPU mode
existing in x86 architecture, and it can be used as a hardware
isolated execution environment.
I Originally designed for implementing system functions (e.g.,
power management)
I Isolated System Management RAM (SMRAM) that is
inaccessible from OS
I Only way to enter SMM is to trigger a System Management
Interrupt (SMI)
I Executing RSM instruction to resume OS (Protected Mode)
21
TrustZone Technology
ARM TrustZone technology [2] divides the execution environment
into a secure domain and a non-secure domain.
I The RAM is partitioned to secure and non-secure regions.
I The interrupts are assigned into the secure or non-secure
group.
I Secure-sensitive registers can only be accessed in secure
domain.
I Hardware peripherals can be conﬁgured as secure access only.
22
PMU and ETM
I The Performance Monitor Unit (PMU) [3, 4] leverages a set
of performance counter registers to count the occurrence of
di↵erent CPU events.
I The Embedded Trace Macrocell (ETM) [5] traces the
instructions and data of the system, and output the trace
stream into pre-allocated bu↵ers on the chip.
I The PMU exists in both x86 and ARM architecture while the
ETM is ARM special hardware.
23
Outline
I Introduction
I Background
I Towards Transparent Malware Analysis
I MalT on x86 Architecture [S&P’15]
I Ninja on ARM Architecture [USENIX Security’17]
I Conclusions
24
Towards Transparent Malware Analysis
Application
Operating System
Hypervisor/Emulator
Hardware
App
App
Malware
MalT on x86
Ninja on ARM
25
MalT on x86 Architecture
Debugging Client
GDB-like
Debugger
Debugging Server
SMI
handler
Debugged
application
1) Trigger SMI
2) Debug command
3) Response message
Inspect
application
Breakpoint
26
MalT — Performance
I Testbed Speciﬁcation
I Motherboard: ASUS M2V-MX SE
I CPU: 2.2GHz AMD LE-1250
I Chipset: AMD k8 Northbridge + VIA VT 8237r Southbridge
I BIOS: Coreboot + SeaBIOS
27
MalT — Performance
Table: SMM Switching and Resume (Time: µs)
Operations
Mean
STD
95% CI
SMM switching
3.29
0.08
[3.27, 3.32]
Command and BP checking
2.19
0.09
[2.15, 2.22]
Next SMI conﬁguration
1.66
0.06
[1.64, 1.69]
SMM resume
4.58
0.10
[4.55, 4.61]
Total
11.72
28
MalT — Limitation
I High performance overhead on mode switch.
I Unprotected modiﬁed registers.
I Vulnerable to external timing attack.
29
Ninja on ARM Architecture
Non-secure Domain
Rich OS
App
App
Malware
Secure Domain
Secure Interrupt Handler
Trace
Subsystem
Debug
Subsystem
Remote
Debugging
Client
Secure Interrupt
Secure Port
ERET
30
Ninja on ARM Architecture
I Use TrustZone as the isolated execution environment.
I The debug subsystem is similar to MalT while the trace
subsystem is immune to timing attacks.
I Modiﬁed registers are protected via hardware traps.
31
Ninja — Performance
I Testbed Speciﬁcation
I ARM Juno v1 development board
I A dual-core 800 MHZ Cortex-A57 cluster and a quad-core 700
MHZ Cortex-A53 cluster
I ARM Trusted Firmware (ATF) [6] v1.1 and Android 5.1.1
32
Ninja — Performance
Table: Performance Scores Evaluated by CF-Bench [7]
Native Scores
Java Scores
Overall Scores
Mean
Slowdown
Mean
Slowdown
Mean
Slowdown
Tracing Disabled
25380
18758
21407
Instruction Tracing
25364
1x
18673
1x
21349
1x
System call Tracing
25360
1x
18664
1x
21342
1x
Instruction Tracing
6452
4x
122
154x
2654
8x
33
Ninja — Performance
Table: Time consumption of domain switching (Time: µs)
ATF Enabled
Ninja Enabled
Mean
STD
95% CI
⇥
⇥
0.007
0.000
[0.007, 0.007]
X
⇥
0.202
0.013
[0.197, 0.207]
X
X
0.342
0.021
[0.334, 0.349]
34
Ninja — Limitation
I OS-related tracing requires software-based approach to ﬁll
semantic gaps, which involves performance overhead.
I Malware may intentionally enable the ETM or PMU to detect
the analysis system.
I Hardware traps can only protect the system instruction access
to the registers.
35
Outline
I Introduction
I Background
I Towards Transparent Malware Analysis
I MalT on x86 Architecture
I Ninja on ARM Architecture
I Conclusions
36
Conclusions
I We present MalT and Ninja, malware analysis systems in x86
and ARM architectures aiming for higher transparency.
I We consider the hardware-based approach provides better
transparency than software-based approaches.
I To build a fully transparent malware analysis system, we are
seeking for more hardware support.
37
Related Papers
USENIX Security’17
Zhenyu Ning and Fengwei Zhang. Ninja: Towards Transparent Tracing and Debugging on
ARM. In Proceedings of The 26th USENIX Security Symposium, Vancouver, BC, Canada,
August 2017.
S&P’15
Fengwei Zhang, Kevin Leach, Angelos Stavrou, and Haining Wang. Using Hardware Features
for Increased Debugging Transparency.
In Proceedings of The 36th IEEE Symposium on
Security and Privacy, San Jose, CA, May 2015.
38
References I
[1]
Intel, “64 and IA-32 architectures software developer’s manual: Volume 3C,”
https://software.intel.com/sites/default/ﬁles/managed/a4/60/325384-sdm-vol-3abcd.pdf.
[2]
ARM Ltd., “TrustZone Security Whitepaper,”
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.prd29-genc-009492c/index.html.
[3]
——, “ARMv8-A Reference Manual,”
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0487a.k/index.html.
[4]
Intel, “64 and IA-32 architectures software developer’s manual: Volume 3B,”
https://software.intel.com/sites/default/ﬁles/managed/a4/60/325384-sdm-vol-3abcd.pdf.
[5]
ARM Ltd., “Embedded Trace Macrocell Architecture Speciﬁcation,”
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ihi0014q/index.html.
[6]
——, “ARM Trusted Firmware,” https://github.com/ARM-software/arm-trusted-ﬁrmware.
[7]
Chainﬁre, “CF-Bench,” https://play.google.com/store/apps/details?id=eu.chainﬁre.cfbench.
39
Thank you!
Questions?
PI:EMAIL & PI:EMAIL
http://compass.cs.wayne.edu
40
Hardware Traps
.......
MRS X0, PMCR EL0
MOV X1, #1
AND X0, X0, X1
......
Non-secure Domain
41
Hardware Traps
.......
MRS X0, PMCR EL0
MOV X1, #1
AND X0, X0, X1
......
Non-secure Domain
Analyzing the instruction
Secure Domain
MDCR EL3.TPM=1
42
Hardware Traps
.......
MRS X0, PMCR EL0
MOV X1, #1
AND X0, X0, X1
......
Non-secure Domain
Analyzing the instruction
MOV X0, #0x41013000
Secure Domain
MDCR EL3.TPM=1
43
Hardware Traps
.......
MRS X0, PMCR EL0
MOV X1, #1
AND X0, X0, X1
......
Non-secure Domain
Analyzing the instruction
MOV X0, #0x41013000
Modifying saved ELR EL3
Secure Domain
MDCR EL3.TPM=1
44
Hardware Traps
.......
MRS X0, PMCR EL0
MOV X1, #1
AND X0, X0, X1
......
Non-secure Domain
Analyzing the instruction
MOV X0, #0x41013000
Modifying saved ELR EL3
ERET
Secure Domain
MDCR EL3.TPM=1
45