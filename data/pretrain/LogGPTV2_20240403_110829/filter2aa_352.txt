# Transparent Malware Debugging on x86 and ARM

**Authors:**
- Zhenyu Ning
- Fengwei Zhang

**Affiliation:**
- COMPASS Lab, Wayne State University

**Date:**
- April 27, 2018

---

## Outline
1. Introduction
2. Background
3. Towards Transparent Malware Analysis
4. MalT on x86 Architecture
5. Ninja on ARM Architecture
6. Conclusions

---

## 1. Introduction
This presentation discusses the development of transparent malware analysis systems for x86 and ARM architectures, specifically focusing on the projects MalT and Ninja.

---

## 2. Background

### Transparency in Malware Analysis
- **Definition:** Transparent malware analysis involves analyzing malware without it being aware of the analysis.
- **Importance:** Transparency is crucial because evasive malware can detect and evade traditional analysis methods.

### Evasive Malware
- **Scenario:** 
  - **Computer System:**
    - **Application Layer:**
      - **Malware:**
        - **Analyzer:**

### Current State of Malware Analysis Systems
- **Architecture:**
  - **Application**
  - **Operating System**
  - **Hypervisor/Emulator**
  - **Malware Analyzer**
- **Challenges:**
  - Vulnerable to anti-virtualization or anti-emulation techniques.
  - High performance overhead.
  - Inability to handle high-privilege malware (e.g., rootkits).

### Transparency Requirements
- **Environment:**
  - Provides access to the states of the target malware.
  - Isolated from the target malware.
  - Exists on an off-the-shelf (OTS) bare-metal platform.
- **Analyzer:**
  - Responsible for further analysis of the states.
  - Should not leave any detectable footprints outside the environment.

---

## 3. Towards Transparent Malware Analysis
- **Objective:** To develop a system that provides higher transparency in malware analysis by leveraging hardware features.

---

## 4. MalT on x86 Architecture

### System Management Mode (SMM)
- **Description:**
  - Special CPU mode in x86 architecture.
  - Originally designed for implementing system functions (e.g., power management).
  - Isolated System Management RAM (SMRAM) inaccessible from the OS.
  - Entry via System Management Interrupt (SMI).
  - Resume to OS (Protected Mode) using RSM instruction.

### Performance
- **Testbed:**
  - **Motherboard:** ASUS M2V-MX SE
  - **CPU:** 2.2GHz AMD LE-1250
  - **Chipset:** AMD k8 Northbridge + VIA VT 8237r Southbridge
  - **BIOS:** Coreboot + SeaBIOS

- **Performance Metrics:**
  - **SMM Switching and Resume (Time: µs)**
    | Operations                   | Mean | STD | 95% CI          |
    |-----------------------------|------|-----|-----------------|
    | SMM switching                | 3.29 | 0.08| [3.27, 3.32]    |
    | Command and BP checking      | 2.19 | 0.09| [2.15, 2.22]    |
    | Next SMI configuration       | 1.66 | 0.06| [1.64, 1.69]    |
    | SMM resume                   | 4.58 | 0.10| [4.55, 4.61]    |
    | Total                        | 11.72|     |                 |

### Limitations
- High performance overhead on mode switch.
- Unprotected modified registers.
- Vulnerable to external timing attacks.

---

## 5. Ninja on ARM Architecture

### TrustZone Technology
- **Description:**
  - Divides the execution environment into secure and non-secure domains.
  - RAM partitioned into secure and non-secure regions.
  - Interrupts assigned to secure or non-secure groups.
  - Secure-sensitive registers accessible only in the secure domain.
  - Hardware peripherals can be configured as secure access only.

### PMU and ETM
- **Performance Monitor Unit (PMU):**
  - Uses performance counter registers to count different CPU events.
  - Available in both x86 and ARM architectures.
- **Embedded Trace Macrocell (ETM):**
  - Traces instructions and data, outputting the trace stream into pre-allocated buffers.
  - Specific to ARM architecture.

### Performance
- **Testbed:**
  - **ARM Juno v1 development board**
  - **Processor:** Dual-core 800 MHz Cortex-A57 cluster and quad-core 700 MHz Cortex-A53 cluster
  - **Firmware:** ARM Trusted Firmware (ATF) v1.1
  - **OS:** Android 5.1.1

- **Performance Scores (CF-Bench)**
  | Metric           | Native Scores | Java Scores | Overall Scores |
  |------------------|---------------|-------------|----------------|
  | Tracing Disabled | 25380         | 18758       | 21407          |
  | Instruction Tracing | 25364 (1x)   | 18673 (1x)  | 21349 (1x)     |
  | System Call Tracing | 25360 (1x)   | 18664 (1x)  | 21342 (1x)     |
  | Instruction Tracing | 6452 (4x)    | 122 (154x)  | 2654 (8x)      |

- **Domain Switching Time (Time: µs)**
  | Configuration      | Mean | STD | 95% CI          |
  |--------------------|------|-----|-----------------|
  | ATF Enabled        | 0.007| 0.000| [0.007, 0.007]  |
  | Ninja Enabled      | 0.202| 0.013| [0.197, 0.207]  |
  | Both Enabled       | 0.342| 0.021| [0.334, 0.349]  |

### Limitations
- OS-related tracing requires software-based approaches, leading to performance overhead.
- Malware may detect the analysis system by enabling ETM or PMU.
- Hardware traps protect only the system instruction access to the registers.

---

## 6. Conclusions
- **Summary:**
  - Presented MalT and Ninja, which aim for higher transparency in malware analysis on x86 and ARM architectures.
  - Hardware-based approaches provide better transparency compared to software-based ones.
  - Further hardware support is needed to build a fully transparent malware analysis system.

---

## Related Papers
- **USENIX Security’17:**
  - Zhenyu Ning and Fengwei Zhang. Ninja: Towards Transparent Tracing and Debugging on ARM. In Proceedings of The 26th USENIX Security Symposium, Vancouver, BC, Canada, August 2017.
- **S&P’15:**
  - Fengwei Zhang, Kevin Leach, Angelos Stavrou, and Haining Wang. Using Hardware Features for Increased Debugging Transparency. In Proceedings of The 36th IEEE Symposium on Security and Privacy, San Jose, CA, May 2015.

---

## References
1. Intel, “64 and IA-32 architectures software developer’s manual: Volume 3C,” https://software.intel.com/sites/default/files/managed/a4/60/325384-sdm-vol-3abcd.pdf.
2. ARM Ltd., “TrustZone Security Whitepaper,” http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.prd29-genc-009492c/index.html.
3. ARM Ltd., “ARMv8-A Reference Manual,” http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0487a.k/index.html.
4. Intel, “64 and IA-32 architectures software developer’s manual: Volume 3B,” https://software.intel.com/sites/default/files/managed/a4/60/325384-sdm-vol-3abcd.pdf.
5. ARM Ltd., “Embedded Trace Macrocell Architecture Specification,” http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ihi0014q/index.html.
6. ARM Ltd., “ARM Trusted Firmware,” https://github.com/ARM-software/arm-trusted-firmware.
7. Chainfire, “CF-Bench,” https://play.google.com/store/apps/details?id=eu.chainfire.cfbench.

---

## Thank You!
**Questions?**
- PI: EMAIL & PI: EMAIL
- Website: http://compass.cs.wayne.edu

---

## Hardware Traps
- **Non-secure Domain:**
  - Analyzing the instruction
  - Example:
    ```assembly
    MRS X0, PMCR EL0
    MOV X1, #1
    AND X0, X0, X1
    ```
- **Secure Domain:**
  - Modifying saved ELR EL3
  - Example:
    ```assembly
    MDCR EL3.TPM=1
    MOV X0, #0x41013000
    ERET
    ```

---