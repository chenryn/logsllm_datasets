tal number of leechers is 50. We setup one seeder with an upload
bandwidth of 128 KBps. We setup a local tracker, with peers down-
loading 5MB ﬁles. We used the bandwidth distribution provided by
[24]. Peers leave upon completing their download. The results of
these runs can be seen in Figures 9 and 10, where each point in the
ﬁgures represents the average over at least 10 runs and error bars
mark 95% conﬁdence intervals. Finally, we base our decision to
use a cluster on the arguments and results in [27].
BitTorrent vs Loyal-When-needed. Figure 9(a) represents com-
petitive encounters between BitTorrent and Loyal-When-needed
clients. We can see the consistent trend of the Loyal-When-needed
clients regarding the average download times:
it is largely inde-
pendent of the composition of the swarm. Moreover, Loyal-When-
needed clients never do worse than BitTorrent, and they do signiﬁ-
cantly better if they are in a majority in the swarm.
Birds vs BitTorrent. Figure 9(b) represents a validation of our
game-theoretic analysis from Section 2.3: Birds does as well or
better than BitTorrent in all proportions. The difference is statisti-
cally signiﬁcant if the proportion of Birds clients is more than or
equal to three quarters. We can also conclude that the swarm with
only Birds clients results in signiﬁcantly better average download
time than a swarm with only BitTorrent clients.
00.10.250.50.750.91050100150200Fraction of Loyal−When−needed clientsAverage Download Times (sec)  Loyal−When−neededBitTorrent00.10.250.50.750.91050100150200Fraction of Birds clientsAverage Download TImes (sec)  BirdsBitTorrent00.10.250.50.750.91050100150200Fraction of Loyal−When−needed clientsAverage Download Times (sec)  Loyal−When−neededBirdsSort−SRandomLoyal−WnBTBirds050100150200Average Download Times (sec)191Birds vs Loyal-When-needed. Finally, in Figure 9(c) we com-
pare the competitive encounters of Birds and Loyal-When-needed.
We can immediately see that a swarm with only Birds clients re-
sults in better average download time. Together with the previous
results, this validates our analysis using DSA, according to which
Birds ranks high in performance (as discussed in Section 4.4.2).
In line with our DSA results, the Loyal-When-needed protocol is
more robust than Birds. The degradation in Birds performance be-
comes statistically signiﬁcant when the two protocols compete; this
is more evident when the Loyal-When-needed clients are in the ma-
jority.
Performance of various protocols. We now compare the perfor-
mance of different protocols when all peers in the population exe-
cute the same protocol. For this, we consider two additional pro-
tocols that we discovered through DSA. Figure 10 shows that a
protocol that we term Sort-S, together with Birds, fares the best
when all peers in the swarm follow the same protocol. Sort-S is the
interesting protocol that we discovered in our DSA analysis. It uses
the Sort Slowest ranking function, defects on strangers and only has
one partner. It is interesting to observe that a protocol that uses the
Sort Random ranking function performs as well as BitTorrent. This
recalls the results presented in [15]. We note that Figure 10 does
not say anything about the Robustness of these protocols.
6. RELATED WORK
The study of incentive mechanisms for distributed systems has
been a well-studied topic in the research community. Such works
can be roughly categorized into the works, which came before the
seminal papers by Feigenbaum and Shenker [6], and Dash et al. [5],
and those that came subsequently. We concentrate on the latter
works. Mahajan et al. [18] described their unsuccessful efforts at
applying game theory for system design. They suggested that relax-
ing the notion of perfect selﬁshness could increase the applicabil-
ity of game theory. We demonstrated that game theoretic analysis
despite high level of abstraction, can result in a fruitful analysis,
which, however, needs to be augmented with a detailed analysis.
Feldman et al. [7] applied an evolutionary game-theoretic analy-
sis on a P2P design space. Their analysis differed from ours as it fo-
cussed on simple cooperation, defection and reciprocation, whereas
we analyze a considerably vast space of protocols. Also, we apply
the results of our analysis to BitTorrent to validate our approach.
Qiu et al. [26] under certain assumptions showed that BitTorrent
is a Nash Equilibrium. We used a different abstraction and proved
otherwise. Similarly Levin et al. [16] argued that BitTorrent is an
auction, and with their model gained insights to develop a more
robust variant. We showed that considering BitTorrent as a strategy
in a game, also leads to insights, and we also developed a more
robust variant.
Finally, many papers propose protocol variants not based on
game-theoretic analysis [2, 15], but to our knowledge, ours is
the ﬁrst attempt to provide a comprehensive, simulation based ap-
proach.
7. CONCLUSION AND FUTURE WORK
We have presented Design Space Analysis (DSA), a simulation
based approach that complements game-theoretic analysis of in-
centives in distributed protocols. DSA emphasizes the speciﬁca-
tion and analysis of a design space, rather than proposing a single
protocol. We have shown that DSA can be used to gain an in-depth
analysis of the properties of protocol variants, and it can be used for
designing deployable protocols. For future work, we would like to
explore if a solution concept similar to PRA quantiﬁcation could be
developed which explores the design space using a heuristic based
approach. This could be needed in situations where a thorough scan
of the design space becomes infeasible due to its size. We would
also like to test DSA on distributed domains other than P2P. In con-
clusion, we note that DSA is a general method, which is practical
and easy to apply, and we have demonstrated its merits by applying
it successfully to P2P ﬁle swarming systems.
Acknowledgement
This work was partially supported by the Higher Education Com-
mission (HEC) of Pakistan; and by the European Community 7th
Framework Program through the QLectives and P2P-Next projects
(grant no. 231200, 216217). We thank Márk Jelasity and his group
at Szeged, Hungary for their valuable feedback during the early
phase of this work. We would also like to thank the anonymous
reviewers who have helped to improve the paper. Finally, we thank
our shepherd, Scott Shenker for guiding us in the ﬁnal stages of this
work.
8. REFERENCES
[1] R. Axelrod. The Evolution of Cooperation. Basic Books,
New York, 1984.
[2] A. Bharambe, C. Herley, and V. Padmanabhan. Analyzing
and improving a BitTorrent network’s performance
mechanisms. In INFOCOM, 2006.
[3] C. Buragohain, D. Agrawal, and S. Suri. A game theoretic
framework for incentives in P2P systems. In IEEE P2P,
2003.
[4] A.L.H. Chow, L. Golubchik, V. Misra. BitTorrent: An
extensible heterogeneous model. In INFOCOM, 2009.
[5] R. Dash, N. Jennings, and D. Parkes.
Computational-mechanism design: A call to arms. IEEE
Intelligent Systems, 18:40–47, 2003.
[6] J. Feigenbaum and S. Shenker. Distributed Algorithmic
Mechanism Design: Recent Results and Future Directions.
In ACM DIALM, 2002.
[7] M. Feldman, K. Lai, I. Stoica, and J. Chuang. Robust
incentive techniques for peer-to-peer networks. In ACM EC,
pp. 102–111, 2004.
[8] R. Hahnel and A. Library. The ABCs of political economy: A
modern approach. Pluto Press, 2002.
[9] T. Hoßfeld, F. Lehrieder, D. Hock, S. Oechsner,
Z. Despotovic, W. Kellerer, and M. Michel. Characterization
of BitTorrent swarms and their distribution in the Internet.
Computer Networks, 55:1197–1215, 2011.
[10] D. Hruschka and J. Henrich. Friendship, cliquishness, and
the emergence of cooperation. Journal of Theoretical
Biology, 239:1–15, 2006.
[11] R. Izhak-Ratzin. Collaboration in BitTorrent systems. In
IFIP-TC Networking, pp. 338–351, 2009.
[12] S. Jun and M. Ahamad. Incentives in BitTorrent induce free
riding. In P2PECON, 2005.
[13] A.-M. Kermarrec and M. van Steen, editors. ACM SIGOPS
Operating Systems Review 41, Special Issue on
Gossip-Based Networking. 2007.
[14] A. Legout, N. Liogkas, E. Kohler, and L. Zhang. Clustering
and sharing incentives in bittorrent systems. In ACM
SIGMETRICS, pp. 301–312, 2007.
[15] B. Leong, Y. Wang, S. Wen, C. Carbunaru, Y. Teo, C. Chang,
and T. Ho. Improving peer-to-peer ﬁle distribution: winner
doesn’t have to take all. In ACM APSys, pp. 55–60, 2010.
192[16] D. Levin, K. LaCurts, N. Spring, and B. Bhattacharjee.
BitTorrent is an auction: analyzing and improving
BitTorrent’s incentives. In ACM SIGCOMM, 2008.
[17] T. Locher, P. Moor, S. Schmid, and R. Wattenhofer. Free
riding in BitTorrent is cheap. In HotNets-V, 2006.
[18] R. Mahajan, M. Rodrig, D. Wetherall, and J. Zahorjan.
Experiences applying game theory to system design. In ACM
PINS, pp. 183–190, 2004.
[19] G. Mailath. Do people play Nash equilibrium? Lessons from
evolutionary game theory. Journal of Economic Literature,
36:1347–1374, 1998.
[20] M. Meulpolder, J. Pouwelse, D. Epema, and H. Sips.
BarterCast: A practical approach to prevent lazy freeriding in
P2P networks. In IEEE IPDPS, 2009.
[21] J. Mol, J. Pouwelse, M. Meulpolder, D. Epema, and H. Sips.
Give-to-get: Free-riding-resilient video-on-demand in p2p
systems. In SPIE/ACM MMCN, 2008.
[22] M. Osborne and A. Rubinstein. A course in game theory. The
MIT press, 1994.
[23] F. Pianese, J. Keller, and E. Biersack. PULSE, a ﬂexible P2P
live streaming system. In INFOCOM, 2006.
[24] M. Piatek, T. Isdal, T. Anderson, A. Krishnamurthy, and
A. Venkataramani. Do incentives build robustness in
BitTorrent. In NSDI, 2007.
[25] M. Posch. Win-Stay, Lose-Shift Strategies for Repeated
Games–Memory Length, Aspiration Levels and Noise.
Journal of Theoretical Biology, 198:183–195, 1999.
[26] D. Qiu and R. Srikant. Modeling and performance analysis
of BitTorrent-like peer-to-peer networks. ACM SIGCOMM
Computer Communication Review, 34:367–378, 2004.
[27] A. Rao, A. Legout, and W. Dabbous. Can Realistic
BitTorrent Experiments Be Performed on Clusters? In IEEE
P2P, 2010.
[28] E. Rasmusen. Games and information: An introduction to
game theory. Wiley-Blackwell, 2007.
[29] T. Roughgarden and É. Tardos. How bad is selﬁsh routing.
Journal of the ACM, 49:236–259, 2002.
[30] K. Rzadca, A. Datta, and S. Buchegger. Replica placement in
p2p storage: Complexity and game theoretic analyses. In
ICDCS, pp. 599–609, 2010.
[31] S. Shenker. Making greed work in networks: A
game-theoretic analysis of switch service disciplines.
IEEE/ACM Transactions on Networking, 3:819–831, 2002.
[32] M. Yang, Z. Zhang, X. Li, and Y. Dai. An empirical study of
free-riding behavior in the Maze P2P ﬁle-sharing system.
Peer-to-Peer Systems IV, pp. 182–192, 2005.
Appendix: BitTorrent Nash Equilibrium
In the following we use the notation introduced in Table 1 and the
results from Sections 2.2 and 2.3.
In order to show that BitTorrent is not a Nash equilibrium (NE),
we consider a swarm with N − 1 BitTorrent (BT) peers and assume
that one peer using the Birds protocol enters this swarm.
In this setup the expected number of games won by the BT
clients against higher and lower classes do not change. On the other
hand, for the Birds client only the formula for the expected number
of games won against the peers from the lower classes changes to
B[B → c](cid:48) = NB/Nr, which is the same as for the BT clients.
Er
Now, we consider the class C where the peer using the Birds
protocol is located. The expected values of the number of games
that the peers win due to reciprocation from other peers in this class
will be Er
B[C− c](cid:48) = Ur − K for Birds and
Er[C → c](cid:48) =
NC(cid:48) −Ur
(Ur − K − E[A → c])
(Ur − E[A → c]− K(cid:48))
NC(cid:48)
Ur
NC(cid:48)
+
for the BT clients, where NC(cid:48) = NC − 1, and K(cid:48) = 1−(cid:0)(1− E[A →
= Ur − K − E[A → c]− Ur
NC(cid:48)
)(cid:1)Ur−1, which leads us to the fact that
(K + K(cid:48))
c])(1− 1
Ur
EB[C → c](cid:48) > E[C → c](cid:48).
Regarding the ’free game wins’, the formulae change to
(NC − Er[C → c](cid:48))/Nr,
EB[C → c](cid:48) =
NC(cid:48)
NC
E[C → c](cid:48) = EB[C → c](cid:48) +
B[C → c](cid:48)
NCNr
which says that E[C → c](cid:48) > EB[C → c](cid:48); however,
NC − Er
,
B[C → c](cid:48) + Er
Er
B[C → c](cid:48) > Er[C → c](cid:48) + E[C → c](cid:48)
holds. Thus, the peer using the Birds protocol, on average, wins
more games than any of the BT clients, proving that BT is not a
NE.
the Birds protocol.
Now we show that it is a NE when all peers in the swarm follow
We assume that there are N − 1 peers following the Birds proto-
col and one peer using the BT protocol enters this swarm. We give
a formal proof for the case when this new peer uses BT; the other
three cases (regarding class-based reciprocation) can be proved in
the similar way.
First, we consider the games where peers get reciprocation. Nei-
ther the Birds peers nor the BT peer get anything from the higher
and lower classes. For that particular class C, where the BT peer is
located we have
B[C → c](cid:48)(cid:48) =
Er
NC(cid:48) −Ur
NC(cid:48)
= Ur − Ur
NC(cid:48)
(Ur − E[A → c])
Ur
Ur +
NC(cid:48)
E[A → c],
where NC(cid:48) is the number of Birds in class C, i.e. NC(cid:48) = NC − 1.
Moreover, we have Er[C → c](cid:48)(cid:48) = Ur − E[A → c]; from here it is
easy to see that Er
B[C → c](cid:48)(cid:48) > Er[C → c](cid:48)(cid:48).
‘Free game wins’ remain the same. The expressions for the same
class become
E[C → c](cid:48)(cid:48) =
NC(cid:48)
NC
× NC(cid:48) − Er
B[C → c]
N −Ur − 1
,
and
EB[C → c](cid:48)(cid:48) = E[C → c](cid:48)(cid:48) +
NC(cid:48) − Er[C → c]
NC(cid:48) (N −Ur − 1)
,
Thus we conclude that EB[C → c](cid:48)(cid:48) > E[C → c](cid:48)(cid:48) which completes
our proof that Birds is a NE.
193