Security Symposium (USENIX Security 19), pages 1769–1786, Santa Clara,
CA, Aug. 2019. USENIX Association. ISBN 978-1-939133-06-9. URL
https://www.usenix.org/conference/usenixsecurity19/presentation/lu.
[32] A. Machiry, N. Redini, E. Cammellini, C. Kruegel, and G. Vigna. Spider:
Enabling fast patch propagation in related software repositories. In 2020
IEEE Symposium on Security and Privacy (SP). IEEE, 2020.
[33] P. Mell, K. Scarfone, and S. Romanosky. Common vulnerability scoring
system. IEEE Security & Privacy, 4(6):85–89, 2006.
[34] T. Menzies and A. Marcus. Automated severity assessment of software
In 2008 IEEE International Conference on Software
defect reports.
Maintenance, pages 346–355. IEEE, 2008.
[35] C. Min, S. Kashyap, B. Lee, C. Song, and T. Kim. Cross-checking
semantic correctness: The case of finding file system bugs. In Proceedings
of the 25th ACM Symposium on Operating Systems Principles (SOSP),
Monterey, CA, Oct. 2015.
[36] Mozilla. Bugzilla main page, 2019. https://bugzilla.mozilla.org/home.
[37] N. Munaiah and A. Meneely. Vulnerability severity scoring and bounties:
why the disconnect? In Proceedings of the 2nd International Workshop
on Software Analytics, pages 8–14. ACM, 2016.
[38] nluedtke.
linux_kernel_cves, 2019. https://github.com/nluedtke/linux_
kernel_cves.
[39] M. Ohira, Y. Kashiwa, Y. Yamatani, H. Yoshiyuki, Y. Maeda, N. Limset-
tho, K. Fujino, H. Hata, A. Ihara, and K. Matsumoto. A dataset of high
impact bugs: Manually-classified issue reports. In 2015 IEEE/ACM 12th
Working Conference on Mining Software Repositories, pages 518–521.
IEEE, 2015.
[40] W. Y. Ramay, Q. Umer, X. C. Yin, C. Zhu, and I. Illahi. Deep neural
network-based severity prediction of bug reports. IEEE Access, 7:46846–
46857, 2019.
[41] D. A. Ramos and D. Engler. Under-constrained symbolic execution:
Correctness checking for real code. In 24th USENIX Security Symposium
(USENIX Security 15), pages 49–64, 2015.
[42] M. J. Renzelmann, A. Kadav, and M. M. Swift. SymDrive: Testing
In 10th USENIX Symposium on Operating
drivers without devices.
Systems Design and Implementation, (OSDI), pages 279–292, Oct. 2012.
[43] N. K. S. Roy and B. Rossi. Towards an improvement of bug severity
In 2014 40th EUROMICRO Conference on Software
classification.
Engineering and Advanced Applications, pages 269–276. IEEE, 2014.
[44] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz. kAFL:
Hardware-assisted feedback fuzzing for OS kernels. In 26th USENIX
Security Symposium (USENIX Security 17), pages 167–182, 2017.
[45] D. Song, F. Hetzelt, D. Das, C. Spensky, Y. Na, S. Volckaert, G. Vigna,
C. Kruegel, J.-P. Seifert, and M. Franz. Periscope: An effective probing
and fuzzing framework for the hardware-os boundary. In NDSS, 2019.
[46] Thgarnie. Syzkaller, 2019. https://github.com/google/syzkaller.
[47] Y. Tian, N. Ali, D. Lo, and A. E. Hassan. On the unreliability of bug
severity data. Empirical Software Engineering, 21(6):2298–2323, 2016.
[48] L. Torvalds. Linux kernel 4.14, 2017. https://git.kernel.org/pub/scm/
linux/kernel/git/torvalds/linux.git/tag/?h=v4.14.
[49] L. Torvalds. Linux kernel source tree, 2019. https://git.kernel.org/pub/
scm/linux/kernel/git/torvalds/linux.git/.
[50] J. P. Tyo. Empirical analysis and automated classification of security bug
reports. 2016.
[51] W. Wang, K. Lu, and P.-C. Yew. Check it again: Detecting lacking-recheck
bugs in os kernels. In Proceedings of the 2018 ACM SIGSAC Conference
on Computer and Communications Security, pages 1899–1913. ACM,
2018.
[52] L. Wei, Y. Liu, and S.-C. Cheung. Taming android fragmentation:
Characterizing and detecting compatibility issues for android apps.
In Proceedings of the 31st IEEE/ACM International Conference on
Automated Software Engineering, ASE 2016, pages 226–237, 2016. ISBN
978-1-4503-3845-5.
17
Git commit
BT
SI
ST
CVSS
ET
Git commit
BT
SI
ST
CVSS
ET
Git commit
BT
SI
ST
CVSS
MBC
bf703c3f19934
MBC
74415a36767d9
MBC
9ed87fd34c97a
494264379d186 MBC
MBC
3d0ccd021b23c
MBC
ec3cbb9ce241d
82033bc52abeb
MBC
MBC
b56fa1ed09615
MBC
62c8ba7c58e41
MBC
5d60122b7e30f
MBC
a9ae4692eda4b
MBC
b9f62ffe05e40
MBC
d3c2155ce5889
12f4543f5d681
MBC
MBC
9a07826f99034
MBC
e1718d97aa88e
MBC
49521b13cbc02
MBC
ef6ff8f47263b
MBC
f716abd55d1e1
MBC
8986a11978373
MBC
f658f17b5e0e3
MBC
952e5daa2565f
MBC
8513027a73c2f
MBC
3a63e44420932
MBC
b4810773754fe
MBC
ac57245215696
MBC
6e893ca25e9ea
1e7eb89ba936f
MBC
MBC
5270041d342de
32fb5f06dbb6c
MBC
42d8644bd77dd MBC
a0a74e45057cc
MBC
8dd2c9e3128a5
MBC
518ff04fd8429
MBC
bb1553c800227
MBC
55e8dba1acc2e
MBC
60ad768933ec1
MBC
0b1d250afb8eb
eef08e5350618
MBC
MBC
221be106d75c1
MBC
ef4b4856593fc
2a2f11c227bdf
0031c41be5c52
0926f91083f34
12f09ccb46127
2da424b0773ce
43622021d2e2b
78214e81a1bf4
41df7f6d43723
0fb6bd06e0679
297502abb32e2
1fa2337a315a2
9d47964bfd471
193e87143c290
780e982905bef
b550a32e60a49
dad5ab0db8dea
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
MBC
N
N
N
N
N
R
N
N
N
R
R
R
R
R
R
R
R
R
R
R
R
U/R/D
N
R/D
R/D
R/D
R/D
N
N
N
R
N
N
N
N
R
N
N
N
R/U
R
R
R
R
R
R
N
N
N
N
N
R
R
R
R
N
N
7.5
7.5
7.5
7.5
7.5
6.2
4.7
4.7
4.7
5.4
7.5
4.6
7.5
4.6
7.8
7.2
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA,
NPD
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
OBA
NPD
OBA
OBA
OBA
OBA
OBA
NPD
OBA
NPD
UAF
UAF
UAF
UAF
UAF
UAF
UAF
UAF
UAF
UAF
SII
SII
SII
SII
IO
SII
SII
SII
SII
SII
SII
SII/F
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII
SII/F
SII/F
SII/F
F
SII/F
SII/F
SII
SII
SII
SII/F
f4351a199cc12
d7ac3c6ef5d8c
04f25edb48c44
5d6751eaff672
de591dacf3034
325fb5b4d2603
2fc2111c27294
ed77ed6112f2d
ce384d91cd7a4
1a8b7a67224eb
b5f15ac4f89f8
cccbe5ef85284