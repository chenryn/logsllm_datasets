## Page 538
24.2管理用户账户
523
arehive101l.car, gz
S 1α /archive/bourly/09/02/
这个脚本第一次运行很正常，创建了相应的月和天的目录，随后生成的归档文件名也没问题。
注意，归档文件名archivel011.tar.gz中包含了对应的小时（10）和分钟（11）。
说明如果你当天运行Hourly_Archive.sh脚本，那么当小时数是单个数字时，归格文件名中只会
出现3个数宇。例如运行脚本的时间是1:15am，那么归档文件名就是archive115.tar.gz。如
果你希望文件名中总是保留4位数字，可以将脚本行TIME-S（Gate+ek&H)修改成
TIME=S（date+k0eM）。在名k后加入数字0后，所有的单数字小时数都会被加入一个前
导数字0，填充成两位数字。因此，archive115.tar.gz就变成了archive0115.tar.gz：
为了进行充分的测试，我们再次运行脚本，看看当目录/archive/hourly/09/02/已存在的时候会
不会出现问题。
Sdate +k
1017
$./Hourly_Arehive,sh
Starting archive..-
hrchive conpleted
S 18 /archive/bourly/09/02/
archive1011.tar gz archive1017,tar.gz
没有问题！这个脚本仍正常运行，并创建了第二个归档文件。现在可以把它放到cron表中了。
24.2管理用户账户
24
管理用户账户绝不仅仅是添加、修改和删除账户，你还得考虑安全问题、保留工作的需求以
及对账户的精确管理。这可能是一份耗时的工作。在此将介绍另一个可以证明脚本工具能够促进
效率的实例。
24.2.1需要的功能
删除账户在管理账户工作中比较复杂。在删除账户时，至少需要4个步骤：
(1)获得正确的待删除用户账户名；
(2)杀死正在系统上运行的属于该账户的进程：
(3)确认系统中属于该账户的所有文件；
---
## Page 539
524
第24章编写简单的脚本实用工具
(4)删除该用户账户。
一不小心就会遗漏某个步骤。本节的shell脚本工具会帮你避免类似的错误。
1.获取正确的账户名
账户删除过程中的第一步最重要：获取待删除的用户账户的正确名称。由于这是个交互式脚
本，所以你可以用reac命令（参见第14章）获取账户名称。如果脚本用户一直没有给出答复，
你可以在read命令中用-t选项，在超时退出之前给用户60秒的时间回答问题。
echo *please enter the usernane of the user *
3 rueqe.e moag aqatap oq qat mo. qunooe。a- oqoa
read -t 60 ANSNER
人毕竞难免因为其他事情而耽拥时间，所以最好给用户三次机会来回答问题。要实现这点，
可以用一个whi1e循环（参见第13章）加-z选项来测试ANSWER变量是否为空。在脚本第一次进
人whi1e循环时，ANSWER变量的内容为空，用来给该变量赋值的提问位于循环的底部。
[X3NSNYS。 z-]=TT4A
do
echo *please enter the usernane of the user *
[..]
3 rueqe.e moag aqatap oq qat mo. qunooe。a- oqoa
read -t 60 ANSNER
done
当第一次提问出现超时，当只剩下一次回答问题的机会时，或当出现其他情况时，你需要跟
脚本用户进行沟通。case语句（参见第12章）是最适合这里的结构化命令。通过给ASK_COUNT
变量增值，可以设定不同的消息来回应脚本用户。这部分的代码如下。
case $ASK_coUWT in
(
echo
echo *Please answer the question.*
echo
echo
echo
*one last try..-please ansver the question.*
echo
echo
echo
*Since you refuse to ansver the question..
echo
*exiting progran,*
echo
exi.t
esac
I J
现在，这个脚本已经拥有了它所需要的全部结构，可以问用户要删除哪个账户了。在这个脚
---
## Page 540
24.2管理用户账户
525
本中，你还需要问用户另外一些问题，可之前只提那么一个问题就已经是一大堆代码了！因此，
让我们将这段代码放到一个函数中（参见第17章），以便在Delete_User.sh脚本中重复使用。
2.创建函数获取正确的账户名
你要做的第一件事是声明函数名get_answer。下一步，用unset命令（参见第6章）清除脚
本用户之前给出的答案。完成这两件事的代码如下。
function get_anever {
unset ANSWER
在原来代码中你要修改的另一处地方是对用户脚本的提问。这个脚本不会每次都问同一个问
题，所以让我们创建两个新的变量LINE1和LINE2来处理问题。
echo SLINE1
echo -e $LINs2* \c*
然而，并不是每个问题都有两行要显示，有的只要一行。你可以用i结构（参见第11章）解
决这个问题。这个函数会测试LINE2是否为空，如果为空，则只用LINE1。
[aNInS. u-] 3T
then
echo $LINs1
echo -e $LINE2* c*
el.se
fi.
最终，我们的函数需要通过清空LINE1和LINE2变量来清除一下自己。因此，现在这个函数
看起来如下。
function get_answer (
unset ANSWER
ASK_COUNT=0
vhile [-z *SANSWER*]
24
do
ASK_COUMT=$ [ $ASK_CONT + 1 ]
case $ASK_COUNT in
echo
[..] 
esac
echo
[CaNIS. u-] 3T
then
Print 2 lines
echo $LINE1
) - 
\ -aS a- oa
Print 1 line
---
## Page 541
526
第24章编写简单的脚本实用工具
f1
Gone
read -t 60 ANSWER
unset LINE1
#
unset LINE2
1#End of get_ansuer function
要问脚本用户删除哪个账户，你需要设置一些变量，然后调用get_answer函数。使用新函
数让脚本代码清爽了许多。
LINEl=*Please enter the usernane of the user *
LINEz=*account you wiah to Gelete from syatem:*
get_answer
HEASNYS=ANOOOOYHESO
3.验证输入的用户名
鉴于可能存在输人错误，应该验证一下输入的用户账户。这很容易，因为我们已经有了提问
的代码。
LINE2=*yos viah to delete fron the ayaten? [y/n]*
LINE1=*Ia SUSER_ACCOUNT the user account *
get_ansvex
在提出问题之后，脚本必须处理答案。变量ANSWER再次将脚本用户的回答带回问题中。
如果用户回答了yes，就得到了要删除的正确用户账户，脚本也可以继续执行。你可以用case
语句（参见第12章）来处理答案。case语句部分必须精心编码，这样它才会检查yes的多种输
人方式。
case SANSWER in
#
echo
acho
*Because the account, SUSER_ACcouNT, ia not *
echo
*the one you vlsh to delete, we are leaving the scxipt...*
echo
ex1c.
esac
:
这个脚本有时需要处理很多次用户的yes/no回答。因此，创建一个函数来处理这个任务是有
意义的。只要对前面的代码作很少的改动就可以了。必须声明函数名，还要给case语句中加两
个变量，EXIT_LINE1和EXIT_LINE2。这些修改以及最后的一些变量清理工作就是
process_answer函数的全部。
functlon process_answer (
case SANSNER In
---
## Page 542
24.2管理用户账户
527
echo
echo $EXIT_LINE1
echo
ex1 t
esac
unset
EXIT_LINE1
unset EXIT_LINE2
3 #End of process_answer Cunction
现在只用调用函数就可以处理答案了。
EXI7_LINE2=*the one you wish to delete, ve are leaving che script ..-*
EXIT_LINE1=*Because the account, SUSER_ACCOUNT, ia not *
process_anewer
4.确定账户是否存在
是否真实存在。还有，最好将完整的账户记录显示给脚本用户，核对这是不是真的要期除的那个
账户。要完成这些工作，需使用变量USER_ACCOUNT_RECORD，将它设成grep（参见第4章）在
/etc/passwd文件中查找该用户账户的输出。-w选项允许你对这个特定用户账户进行精确匹配。
USER_ACCoUNT_RECORD=$ Icat /etc/pas8vd 1 grep - SUSER_ACCoUNT)
如果在/etc/passwd中没找到用户账户记录，那意味着这个账户已被删除或者从未存在过。不
管是哪种情况，都必须通知脚本用户，然后退出脚本。grep命令的退出状态码可以在这里帮到
我们。如果没找到这条账户记录，？变量会被设成1。
[t be- cs 1 1T
:hen
24
echo
echo *Leaving the script...*
echo *Account, SUsER_ACcouNr, not found.*
echo
exi t
1
如果找到了这条记录，你仍然需要验证这个脚本用户是不是正确的账户。我们先前建立的函
数在这里就能发挥作用了！你要做的只是设置正确的变量并调用函数。
echo *I found chla recoxd:*
echo $USER_ACCOUNT_RECORD
echo
LInE1=*Ie thie the correct Uaex Account? ly/n]*
xensue"s98
---
## Page 543
528
第24章编写简单的脚本实用工具
EXIT_LINE1=*Because the account, $USER_ACCoUNT, la not.*
EXIr_LINE2=*the one you vigh to Gelete, we are leavlng the acript...*
procesa_answer
5.删除属于账户的进程
到目前为止，你已经得到并验证了要删除的用户账户的正确名称。为了从系统上删除该用户
账户，这个账户不能拥有任何当前处于运行中的进程。因此，下一步就是查找并终止这些进程。
这会稍微麻一些。
查找用户进程较为简单。这里脚本可以用ps命令（参见第4章）和-u选项来定位属于该账户
的所有处于运行中的进程。可以将输出重定向到/dev/null，这样用户就看不到任何输出信息了。
这样做很方便，因为如果没有找到相关进程，ps命令只会显示出一个标题，就会把脚本用户搞
涂的。
pa -u $USER_ACcouNg >/dev/nul1 Are usex processes running?
可以用ps命令的退出状态码和case结构来决定下一步做什么。
case S? 1n
 No processea running for thia User Account
echo
*furum.z Aae.mo sumooe srqa xog serssnd ou sae oxeu.
echo
0)
 Ask Scrlpt Uaer if vanta ua to kill the processesa.
 Processes running Cor thia User Account,
oorass n- sd
echo
LINE1=*Nould you 1ike ne to ki1l tbe pxocess les)? [y/n]*
get_angvex
[ -. -]
esac
如果ps命令的退出状态码返回了1，那么表明系统上没有属于该用户账户的进程在运行。但
如果退出状态码返回了0，那么系统上有属于该账户的进程在运行。在这种情况下，脚本需要询
问脚本用户是否要杀死这些进程。可以用get_answer函数来完成这个任务。
你可能会认为脚本下一步就是调用process_answer函数。很遗憾，接下来的任务对
process_answer来说太复杂了。你需要嵌入另一个ease语句来处理脚本用户的答案。case语
句的第一部分看起来和process_answer函数很像。
case SANWER in
*g8s/, sxsxsue zo8n 31 = < sg< ,1ge|eg| eeg|ss1ssA11/
[..-]
Fxill User Account pxocesses.
*)
# If user ansvers anything but *yea*, do not ki11
---
## Page 544
24.2管理用户账户
529
echo
echo *vi1l not ki11 tbe pxocess es) 
echo
可以看出，case语句本身并没什么特别的。值得留意的是case语句的yes部分。在这里需要
条死该用户账户的进程。要实现这个目标，得使用三条命令。首先需要再用一次ps命令，收集当
前处于运行状态、属于该用户账户的进程ID（PID）。命令的输出被保存在变量COMMAND_1中。
COB04AND_1=*pα -u SUSER_ACCOUNT --noheading*
第二条命令用来提取PID。下面这条简单的gawk命令（参见第19章）可以从ps命令输出中提
取第一个字段，而这个字段恰好就是PID。
. ([$ aut.xd) 。xyne6
第三条命令是xargs，这个命令还没讲过。该命令可以构建并执行来自标准输人STDIN（参
见第15章）的命令。它非常适合用在管道的末尾处。xargs命令负责杀死PID所对应的进程。
•6- TTTx/urq/ opns/urq/xsn/ u\\ p- s6.xex,=EaNvrog02
xargs命令被保存在变量COMMAND_3中。选项-d指明使用什么样的分隔符。换句话说，既然
xargs命令接收多个项作为输人，那么各个项之间要怎么区分呢？在这里，n（换行符）被作为
各项的分隔符。当每个PID发送给xargs时，它将PID作为单个项来处理。又因为xargs命令被赋
给了一个变量，所以\n中的反斜杠（\）必须冉加上另一个反斜杠（\）进行转义。
注意，在处理PID时，xargs命令需要使用命令的完整路径名。sudo命令和ki11命令（参见
第4章）用于杀死用户账户的运行进程。另外还注意到ki11命令使用了信号-9。
这三条命令通过管道串联在了一起。ps命令生成了处于运行状态的用户进程列表，其中包括
每个进程的PID。gawk命令将ps命令的标准输出（STDOUT）作为自己的STDIN，然后从中只提
取出PID(参见第15章）。xargs命令将gawk命令生成的每个PID作为sTDIN,创建并执行ki11
命令，杀死用户所有的运行进程。这个命令管道如下。
24
EaN00Os 1 , (T$ OT.xd) , xxe61tax00S
因此，用于条死用户账户所有的运行进程的完整的case语句如下所示。
case SANSWER 1n
#xi11 User Account pxocesses
echo
echo *Killing off pxocessleal .-.*