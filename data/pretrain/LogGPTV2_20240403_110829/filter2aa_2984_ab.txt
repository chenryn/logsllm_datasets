• 
Rich Text Format (rtf)
• 
Text (ans, txt)
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 11 -
link: search within links
The hyperlink is one of the cornerstones of the Internet. A hyperlink is a selectable
connection from one web page to another. Most often, these links appear as underlined
text but they can appear as images, video or any other type of multimedia content. This
advanced operator instructs Google to search within hyperlinks for a search term. This
operator requires no other search arguments.
Example:
link:www.apple.com
This query query would display web pages that link to Apple.com’s main page. This
special operator is somewhat limited in that the link must appear exactly as entered in
the search query. The above query would not find pages that link to
www.apple.com/ipod, for example.
cache: display Google’s cached version of a page
This operator displays the version of a web page as it appeared when Google crawled
the site. This operator requires no other search arguments.
Example:
cache:johnny.ihackstuff.com
cache:http://johnny.ihackstuff.com
These queries would display the cached version of Johnny’s web page. Note that both of
these queries return the same result. I have discovered, however, that sometimes
queries formed like these may return different results, with one result being the dreaded
“cache page not found” error. This operator also accepts whole URL lines as arguments.
intitle: search within the title of a document
This operator instructs Google to search for a term within the title of a document. Most
web browsers display the title of a document on the top title bar of the browser window.
This operator requires no other search arguments.
Example:
intitle:gandalf
This query would only display pages that contained the word ‘gandalf’ in the title. A
derivative of this operator, ‘allintitle’ works in a similar fashion.
Example:
allintitle:gandalf silmarillion
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 12 -
This query finds both the words ‘gandalf’ and ‘silmarillion’ in the title of a page. The
‘allintitle’ operator instructs Google to find every subsequent word in the query only in the
title of the page. This is equivalent to a string of individual ‘intitle’ searches.
inurl: search within the URL of a page
This operator instructs Google to search only within the URL, or web address of a
document. This operator requires no other search arguments.
Example:
inurl:amidala
This query would display pages with the word ‘amidala’ inside the web address. One
returned result, ‘http://www.yarwood.org/kell/amidala/’ contains the word
‘amidala’ as the name of a directory. The word can appear anywhere within the web
address, including the name of the site or the name of a file. A derivative of this operator,
‘allinurl’ works in a similar fashion.
Example:
allinurl:amidala gallery
This query finds both the words ‘amidala’ and ‘gallery’ in the URL of a page. The ‘allinurl’
operator instructs Google to find every subsequent word in the query only in the URL of
the page. This is equivalent to a string of individual ‘inurl’ searches.
For a complete list of advanced operators and their usage, see
http://www.google.com/help/operators.html.
About Google’s URL syntax
The advanced Google user often times streamlines the search process by use of the
Google toolbar (not discussed here) or through direct use of Google URL’s. For
example, consider the URL generated by the web search for sardine:
http://www.google.com/search?hl=en&ie=UTF-8&oe=UTF-8&q=sardine
First, 
notice 
that 
the 
base 
URL 
for 
a 
Google 
search 
is
“http://www.google.com/search”. The question mark denotes the end of the URL
and the beginning of the arguments to the “search” program. The “&” symbol separates
arguments. The URL presented to the user may vary depending on many factors
including whether or not the search was submitted via the toolbar, the native language of
the user, etc. Arguments to the Google search program are well documented at
http://www.google.com/apis. The arguments found in the above URL are as follows:
hl: 
Native language results, in this case “en” or English.
ie: 
Input encoding, the format of incoming data. In this case “UTF-8”.
oe: 
Output encoding, the format of outgoing data. In this case “UTF-8”.
q: 
Query. The search query submitted by the user. In this case “sardine”.
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 13 -
Most of the arguments in this URL can be omitted, making the URL much more concise.
For example, the above URL can be shortened to
http://www.google.com/search?q=sardine
making the URL much more concise. Additional search terms can be appended to the
URL with the plus sign. For example, to search for “sardine” along with “peanut” and
“butter,” consider using this URL:
http://www.google.com/search?q=sardine+peanut+butter
Since simplified Google URLs are simple to read and portable, they are often used as a
way to represent a Google search.
Google (and many other web-based programs) must represent special characters like
quotation marks in a URL with a hexadecimal number preceded by a percent (%) sign in
order to follow the http URL standard. For example, a search for “the quick brown fox”
(paying special attention to the quotation marks) is represented as
http://www.google.com/search?&q=%22the+quick+brown+fox%22
In this example, a double quote is displayed as “%22” and spaces are replaced by plus
(+) signs. Google does not exclude overly common words from phrase searches. Overly
common words are automatically included when enclosed in double-quotes.
Google hacking techniques
Domain searches using the ‘site’ operator
The site operator can be expanded to search out entire domains. For example:
site:gov secret
This query searches every web site in the .gov domain for the word ‘secret’. Notice that
the site operator works on addresses in reverse. For example, Google expects the site
operator to be used like this:
site:www.cia.gov
site:cia.gov
site:gov
Google would not necessarily expect the site operator to be used like this:
site:www.cia
site:www
site:cia
The reason for this is simple. ‘Cia’ and ‘www’ are not valid top-level domain names. This
means that as of this writing, Internet names may not end in ‘cia’ or ‘www’. However,
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 14 -
sending unexpected queries like these are part of a competent Google hacker’s arsenal
as we explore in the “googleturds” section.
How this technique can be used
1. Journalists, snoops and busybodies in general can use this technique to find
interesting ‘dirt’ about a group of websites owned by organizations such as a
government or non-profit organization. Remember that top-level domain names
are often very descriptive and can include interesting groups such as: the U.S.
Government (.gov or .us)
2. Hackers searching for targets. If a hacker harbors a grudge against a specific
country or organization, he can use this type of search to find sensitive targets.
Finding ‘googleturds’ using the ‘site’ operator
 Googleturds, as I have named them, are little dirty pieces of Google ‘waste’. These
search results seem to have stemmed from typos Google found while crawling a web
page. Example:
site:csc
site:microsoft
Neither of these queries are valid according to the loose rules of the ‘site’ operator, since
they do not end in valid top-level domain names. However, these queries produce
interesting results as shown in Figure 7.
Figure 7: Googleturd example
These little bits of information are most likely the results of typographical errors in links
place on web pages.
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 15 -
How this technique can be used
Hackers investigating a target can use munged site values based on the target’s name
to dig up Google pages (and subsequently potential sensitive data) that may not be
available to Google searches using the valid ‘site’ operator. Example: A hacker is
interested in sensitive information about ABCD Corporation, located on the web at
www.ABCD.com. Using a query like ‘site:ABCD’ may find mistyped links
(http://www.abcd instead of http://www.abcd.com) containing interesting information.
Site mapping: More about the ‘site’ operator
Mapping the contents of a web server via Google is simple. Consider the following
query:
site:www.microsoft.com microsoft
This query searches for the word ‘microsoft’, restricting the search to the
www.microsoft.com web site. How many pages on the Microsoft web server contain the
word ‘microsoft?’ According to Google, all of them!  Remember that Google searches not
only the content of a page, but the title and URL as well. The word ‘microsoft’ appears in
the URL of every page on www.microsoft.com. With one single query, an attacker gains
a rundown of every web page on a site cached by Google.
There are some exceptions to this rule. If a link on the Microsoft web page points back to
the IP address of the Microsoft web server, Google will cache that page as belonging to
the IP address, not the www.micorosft.com web server. In this special case, an attacker
would simply alter the query, replacing the word ‘microsoft’ with the IP address(es) of the
Microsoft web server.
Google has recently added an additional method of accomplishing this task. This
technique allows Google users to simply enter a ‘site’ query alone. Example:
site:microsoft.com
This technique is simpler, but I’m not sure if this search technique is a permanent
Google feature.
Since Google only follows links that it finds on the Web, don’t expect this technique to
return every single web page hosted on a web server.
How this technique can be used
This technique makes it very simple for any interested party to get a complete rundown
of a website’s structure without ever visiting the website directly. Since Google searches
occur on Google’s servers, it stands to reason that only Google has a record of that
search. The process of viewing cached pages from Google can also be safe as long as
the Google hacker takes special care not to allow his browser to load linked content
such as images from that cached page. For a competent attacker, this is a trivial
exercise. Simply put, Google allows for a great deal of target reconnaissance that results
in little or no exposure for the attacker.
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 16 -
Finding Directory listings
Directory listings provide a list of files and directories in a browser window instead of the
typical text-and graphics mix generally associated with web pages. Figure 8 shows a
typical directory listing.
Figure 8: A typical directory listing
Directory listings are often placed on web servers purposely to allow visitors to browse
and download files from a directory tree. Many times, however, directory listings are not
intentional. A misconfigured web server may produce a directory listing if an index, or
main web page file is missing. In some cases, directory listings are setup as a
temporarily storage location for files. Either way, there’s a good chance that an attacker
may find something interesting inside a directory listing.
Locating directory listings with Google is fairly straightforward. Figure 8 shows that most
directory listings begin with the phrase “Index of”, which also shows in the title. An
obvious query to find this type of page might be “intitle:index.of”, which may find
pages with the term ‘index of’ in the title of the document. Remember that the period (.)
serves as a single-character wildcard in Google. Unfortunately, this query will return a
large number of false-positives such as pages with the following titles:
Index of Native American Resources on the Internet
LibDex - Worldwide index of library catalogues
Iowa State Entomology Index of Internet Resources
Judging from the titles of these documents, it is obvious that not only are these web
pages intentional, they are also not the directory listings we are looking for. (*jedi wave*
“This is not the directory listing you’re looking for.”) Several alternate queries provide
more accurate results:
intitle:index.of "parent directory"
intitle:index.of name size
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 17 -
These queries indeed provide directory listings by not only focusing on “index.of” in the
title, but on key words often found inside directory listings such as “parent directory”
“name” and “size.”
How this technique can be used
Bear in mind that many directory listings are intentional. However, directory listings
provide the Google hacker a very handy way to quickly navigate through a site. For the
purposes of finding sensitive or interesting information, browsing through lists of file and
directory names can be much more productive than surfing through the guided content
of web pages. Directory listings provide a means of exploiting other techniques such as
versioning and file searching, explained below.
Versioning: Obtaining the Web Server Software / Version
via directory listings
The exact version of the web server software running on a server is one piece of
required information an attacker requires before launching a successful attack against
that web server. If an attacker connects directly to that web server, the HTTP (web)
headers from that server can provide this information. It is possible, however, to retrieve
similar information from Google without ever connecting to the target server under
investigation. One method involves the using the information provided in a directory
listing.
Figure 9: Directory listing "server.at" example
Figure 9 shows the bottom line of a typical directory listing. Notice that the directory
listing includes the name of the server software as well as the version. An adept web
administrator can fake this information, but this information is often legitimate, allowing
an attacker to determine what attacks may work against the server. This example was
gathered using the following query:
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 18 -
intitle:index.of server.at
This query focuses on the term “index of” in the title and “server at” appearing at the
bottom of the directory listing. This type of query can additionally be pointed at a
particular web server:
intitle:index.of server.at site:aol.com
The result of this query indicates that gprojects.web.aol.com and vidup-r1.blue.aol.com,
both run Apache web servers.
intitle:index.of server.at site:apple.com
The result of this query indicates that mirror.apple.com runs an Apache web server. This
technique can also be used to find servers running a particular version of a web server.
For example:
intitle:index.of "Apache/1.3.0 Server at"
This query will find servers with directory listings enabled that are running Apache
version 1.3.0.
How this technique can be used
This technique is somewhat limited by the fact that the target must have at least one
page that produces a directory listing, and that listing must have the server version
stamped at the bottom of the page. There are more advanced techniques that can be
employed if the server ‘stamp’ at the bottom of the page is missing. This technique
involves a ‘profiling’ technique which involves focusing on the headers, title, and overall
format of the directory listing to observe clues as to what web server software is running.
By comparing known directory listing formats to the target’s directory listing format, a
competent Google hacker can generally nail the server version fairly quickly. This
technique is also flawed in that most servers allow directory listings to be completely
customized, making a match difficult. Some directory listings are not under the control of
the web server at all but instead rely on third-party software. In this particular case, it
may be possible to identify the third party software running by focusing on the source
(‘view source’ in most browsers) of the directory listing’s web page or by using the
profiling technique listed above.
Regardless of how likely it is to determine the web server version of a specific server
using this technique, hackers (especially web defacers) can use this technique to troll
Google for potential victims. If a hacker has an exploit that works against, say Apache
1.3.0, he can quickly scan Google for victims with a simple search like
‘intitle:index.of "Apache/1.3.0 Server at"’. This would return a list of
servers that have at least one directory listing with the Apache 1.3.0 server tag at the
bottom of the listing. This technique can be used for any web server that tags directory
listings with the server version, as long as the attacker knows in advance what that tag
might look like.
The Google Hacker’s Guide
PI:EMAIL
http://johnny.ihackstuff.com
- Page 19 -
via default pages
It is also possible to determine the version of a web server based on default pages.
When a web server is installed, it generally will ship with a set of default web pages, like
the Apache 1.2.6 page shown in Figure 10.
Figure 10: Apache test page
These pages can make it easy for a site administrator to get a web server running. By
providing a simple page to test, the administrator can simply connect to his own web
server with a browser to validate that the web server was installed correctly. Some
operating systems even come with web server software already installed. In this case,
an Internet user may not even realize that a web server is running on his machine. This
type of casual behavior on the part of an Internet user will lead an attacker to rightly