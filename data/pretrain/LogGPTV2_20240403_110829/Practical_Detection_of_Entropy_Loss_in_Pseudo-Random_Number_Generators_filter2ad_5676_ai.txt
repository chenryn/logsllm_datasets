Theorem 7 gives the two results, ﬁrst for a size of parameter seed that is the double of the size
of the inputs (s = 2p), and second that is a multiple of the size of the inputs (s = κp).
Theorem 7 (Existence of Resilient Pseudo-Random Number with Input [BST03]). For every
p, k, ‘, t and ε, there is a (t, τ, ε)-resilient pseudo-random number with input, with a public pa-
2 − 2 log(1/ε) − 1 and there is a (t, τ, ε)-resilient
rameter seed of size s = 2p such that τ = k−‘
pseudo-random number with input, with a public parameter seed of size s = κp such that:
τ = κ
2(k − ‘ − 2 log(1/ε) − log κ + 2) − ‘ − 2 − log(1/ε).
Note that the proof given in [BST03] for the bound on the resilient generator with a public seed
of size s = κp uses the probabilistic method, a similar argument than the proof of the existence
of seeded extractor (Theorem 3) based on the Chernoﬀ bound (Proposition 1). The proof for
the bound on the resilient generator with a public seed of size s = 2p is constructive as it is a
direct application of the Leftover Hash Lemma for a ﬁnite pairwise independent hash function
family (Section 2.7).
Concrete Construction. They proposed one concrete construction of pairwise independent
families of hash functions, based on simple operations in a ﬁnite ﬁeld. Let F2p be the ﬁeld with
2p elements, and consider the set S = {(a, b)|a, b ∈ F2p}. For s = (a, b) ∈ S, I ∈ {0, 1}p and
‘ < p, let hs(I) = [a · I + b]‘ (the ‘ ﬁrst bits of [a · I + b], where all operations are in F2p).
Then the family H = {hs, s ∈ S} is a pairwise independent family of hash functions. Barak et
al. noticed that hs(I) is close to uniform if and only if [a· I]‘ is close to uniform. They proposed
the following process to build a resilient generator:
1. In a ﬁrst stage (the preprocessing stage), choose an irreducible polynomial of degree p and
$← {0, 1}p. The union of parameters of the polynomial and
generate a random parameter a
of the parameter a is the public parameter seed of the extractor, that can be hard-coded.
Hence we have for this construction |seed| = d = 2p.
2. In a second stage (the runtime), set G(seed, I) = [a · I]‘.
Note that this construction involves a multiplication in the binary ﬁeld F2p followed by a trun-
cation. This composition (multiplication followed by truncation) will be used in the design of a
robust pseudo-random number generator with input, as described in Chapter 4.
— 39 —
Chapter 3. Security Models for Pseudo-random Number Generators
3.6 Security Model From [BH05]
3.6.1 Description
Barak and Halevi [BH05] proposed a new security model for pseudo-random number generator
with input that clearly states that the entropy extraction process and the output generation
process are completely diﬀerent in nature, where entropy extraction is information-theoric and
generation is cryptographic. Furthermore, these two operations should be separated and anal-
ysed independantly. The generator operations are illustrated in Figure 3.8, in accordance with
Deﬁnition 23.
Deﬁnition 23 (Pseudo-Random Number Generator with Input [BH05]). A pseudo-random
number generator with input is a couple of algorithms (refresh, next) where refresh is a determin-
istic algorithm that, given the current state S ∈ {0, 1}n and an input I ∈ {0, 1}p, outputs a new
state S0 ← refresh(S, I) where S0 ∈ {0, 1}n is the new state and next is a deterministic algorithm
that, given the current state S, outputs a pair (S0, R) ← next(S) where S0 ∈ {0, 1}n is the new
state and R ∈ {0, 1}‘ is the output of the generator.
I
S
refresh
S0
S
next
S0
R
Figure 3.8 – Pseudo-Random Number Generator with Input [BH05]
In their security model, they aimed to capture the potential compromise of the internal state S
and of the inputs used to refresh the internal state. They considered an adversary A that has
access to the system where the generator is run, and can (a) get the output of the generator, (b)
modify the data that is used to refresh the internal state of the generator and (c) have access
to and modify the internal state of the generator. The security properties that are deﬁned in
order respond to these attacks are the following ones:
• Resilience. The generator’s output looks random to an observer with no knowledge of
the internal state. This holds even if that observer has complete control over data that is
used to refresh the internal state.
• Forward security. Past output of the generator looks random to an observer, even if
the observer learns the internal state at a later time.
• Backward security. Future output of the generator looks random, even to an observer
with knowledge of the current state, provided that the generator is refreshed with data of
suﬃcient entropy.
It is important to note that Barak and Halevi used a notion of randomness extractor Extract
that is parametrised by a family of distributions H (which in their work stands for ’high entropy
distribution’). Formally, they proposed to use Deﬁnition 24 to describe H-extractors. In this
deﬁnition, to be consistent with the already used notations, we denote the size of the inputs
with p and we denote the size of the output of the randomness extractor with m.
Deﬁnition 24 (H-Extractor [BH05]). Let p, m be integers such that p ≥ m and let H be a
family of distributions over {0, 1}p. A function Extract : {0, 1}p → {0, 1}m is an H-extractor if
for every D ∈ H and every I
$← D, Extract(I) is 2−m-close to Um.
— 40 —
3.6. Security Model From [BH05]
In this deﬁnition, the extraction is done over the set {0, 1}p, and not over a couple of sets
{0, 1}p × {0, 1}s. Hence one possibility for the function Extract is to consider that it is a de-
terministic extractor, as in Deﬁnition 3. However, as Lemma 2 shows, such extractor cannot
extract randomness from any k-source and therefore a clear limitation on the sources of ran-
domness for such an extractor should be given. Note that this impossibility is also mentioned
by Barak and Halevi, who gave mentionned [BST03] as an example of possible construction.
However, the security model of [BST03] implicitly uses the notion of resilient extractor, which is
a particular case for seeded extractor, as in Deﬁnition 4. Therefore we prefer to consider that the
extractor is seeded, ensuring that its existence is guaranted with Theorem 3. As a consequence,
we claim that the notion of extractor in Deﬁnition 24 is a special case of seeded extractor, i.e. a
function Extract : {0, 1}p ×{0, 1}s → {0, 1}m, where the parameter seed is sampled from {0, 1}s.
In the corresponding security game, the parameter seed should be generated once for all and
made available to the adversary.
One more point that still remains is the correlation between the randomness source and the
parameter seed, that is: do we consider that Extract is a strong extractor, as in Deﬁnition 7, or
a resilient extractor, as in Deﬁnition 5 ? In our opinion, as [BH05] explicitly mentions [BST03]
as a conform extractor, we state that [BH05] refers to resilient extractors.
Recall that the deﬁnition of a resilient randomness extractor stands for a ﬁnite family of dis-
tributions. However Barak and Halevi did not explicitly set the size of the family H, therefore
a bound is implicitly set from our assumption. Also from our assumption, we assume that in
addition to the description done by Barak and Halevi, a public parameter seed is ﬁrst randomly
generated, which is the seed of the randomness extractor. They formalized the corresponding
property in a security game in the real or random model, as described in Section 2.4.
In our
description, we denote by i the identiﬁer for an element in the family of distribution H = Di,
where I is of ﬁnite length qr = |I| and qn is the upper bound on the number of outputs.
proc. initialize
S0 ← 0n;
corrupt ← true;
$← {0, 1};
b
parse H as {Di}i∈I
seed $← {0, 1}s;
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. good-refresh(i)
$← Di;
x
S0 ← refresh(S0, x);
corrupt ← false;
proc. bad-refresh(x)
IF corrupt = true
S0 ← refresh(S0, x);
ELSE ⊥
proc. set-state(S∗)
IF corrupt = true
OUTPUT S0
ELSE
$← {0, 1}n
S1
OUTPUT Sb
corrupt ← true
S ← S∗
proc. next-ror
(S0, R0) ← next(S0)
IF corrupt = true,
OUTPUT R0
ELSE
$← {0, 1}‘
R1
OUTPUT Rb
Figure 3.9 – Procedures in Security Game BH-ROB(H)
The security game uses procedures described in Figure 3.9. Before the description of the proce-
dures, let us ﬁrst clarify some important points on the security game:
• In order to clarify the original security model from [BH05], we let the challenger parse the
family of distribution H as {Di}i∈I, where I is of ﬁnite length.
• In the security game, the adversary A has always two choices to refresh the generator,
either with an input with high entropy, either with an input that A totally controls. In
the ﬁrst case, A uses procedure good-refresh: with this procedure, the challenger lets A
choose the distribution from the family H that A wants to use, then A generates an
input of the chosen distribution and ﬁnally applies algorithm refresh with the previously
— 41 —
Chapter 3. Security Models for Pseudo-random Number Generators
generated input. In the second case, A uses procedure bad-refresh: with this procedure,
the challenger lets A choose an input that is directly used with algorithm refresh.
• The security model uses a new important Boolean parameter, named corrupt, which is set
to true when the generator is compromised and set to false otherwise. This parameter is
maintained by the challenger, is part of the security game and is not a component of the
generator. More precisely, whenever the adversary gets or sets the internal state, the ﬂag
is set to true and as soon as the generator is refreshed with a high entropy input, the ﬂag
is set to false.
• The security objective as conceived by Barak and Halevi concerns the pseudo-randomness
of the output of the generator R and also the pseudo-randomness of the state S. There-
fore in the associated security game, the adversary A is challenged on distinguishing the
output of the generator from random (through procedure next-ror) and on distinguishing
the state of the generator from random (through procedure set-state). Furthermore, the
security model allows to deﬁne resilience, backward security and forward security using
clearly deﬁned security games. In addition, they proposed a new security property, named
robustness that implies each of the previous security properties.
Let us now describe the procedures. The procedure initialize sets the ﬁrst internal state S0 with
a call to algorithm key and sets parameter b. After all oracle queries, A outputs a bit b∗, given
as input to the procedure ﬁnalize, which compares the response of A to the challenge bit b. The
other procedures are deﬁned below:
• Procedure good-refresh: on input i ∈ I, it ﬁrst samples an input x of distribution Di then
refreshes the internal state of the generator with x.
• Procedure set-state:
it generates a challenge for A on its capability to distinguish the
state of the generator from random, where the real state (S0) is the current state and the
random string (S1) is generated by the challenger. Furthermore, it allows A to set the
state to a new value S∗.
• Procedure next-ror: it challenges A on its capability to distinguish the output of G from
random, where the real output (R0) of the generator is obtained with a call to algorithm
next and the random string (R1) is generated by the challenger. Attacker A responds to
the challenge (and the previous on the state) with a bit b∗.
Note that the next-ror procedure diﬀers from the equivalent procedure in the previous security
models. Here, as the challenger maintains the ﬂag corrupt, a challenge between the real output
and a random one is sent to A only if corrupt = false. If corrupt = true, the adversary can mount
an attack on the real output, so A will certainly distinguish it from a random one. Similarly,
the output of procedure set-state also depends on the ﬂag corrupt: the real state is given to A if
corrupt = true, otherwise, a random state is generated and given to A.
The security of a pseudo-random number generator with input is given in Deﬁnition 25. In the
original deﬁnition of [BH05], only the notion of robustness is given. In their original work, Barak
and Halevi stated that robustness implies resilience, backward security and forward security,
respectively, although they do not prove these implications. With Deﬁnition 25, the implications
are direct.
Deﬁnition 25 (Security of a Pseudo-Random Number Generator with Input [BH05]). A pseudo-
random number generator with input G = (refresh, next) is called (t, ε)-robust (resp. resilient, for-
ward secure, backward secure) for the family H, if for any adversary A running in time at most
— 42 —
3.6. Security Model From [BH05]
t, the advantage of A in game BH-ROB(H) (resp. BH-RES(H), BH-FWD(H), BH-BWD(H)) is
at most ε, where:
• BH-ROB(H) is the unrestricted game where A is allowed to make all the above calls.
• BH-RES(H) is the restricted game where A is allowed to make calls to good-refresh to
bad-refresh and to next-ror and is not allowed to make any calls to set-state.
• BH-FWD(H) is the restricted game where A is allowed to make calls to good-refresh, to
bad-refresh, to next-ror and to set-state which is the last oracle call A is allowed to make.
• BH-BWD(H) is the restricted game where A is allowed to make calls to good-refresh to
bad-refresh, to next-ror and to set-state which is the ﬁrst oracle call A is allowed to make.
Comparison with Previous Models. The model of [BST03] also considers the potential
compromise of the source where the adversary A can choose a ﬁnite family of distributions.
While in the security models of [KSWH98,Gut98,DHY02], adversary A has access to a setinput
procedure that allows her to directly set the value of the input that is collected by the random
number generator, here the adversary has access to a procedure named bad-refresh, that is
similar to the procedure setinput. However the associated security property CIA, from the model
of [DHY02], is stronger as it allows A to get the content of the internal state through a call to
get-state in addition to the chosen input.
Forward security is also captured in the security model of [BY03], with Deﬁnition 18: adversary
A has access to two procedures get-state and set-state that allow her to get or to set the content
of the internal state. As in Deﬁnition 18, the call to either get-state and set-state shall be the
last call that A is allowed to make. However, in the model of [BH05], we have an additional
security property once the state gets compromised. This recovering property is deﬁned through
the notion of backward security and more generally of robustness.
In [BH05], a generator is
backward secure if it starts with a compromised state and then recovers from its compromise.
More generally, in [BH05], a generator is robust if it can recover from a state compromise that
occurs at any time (not only at a last stage or in a ﬁrst stage). Note that the deﬁnition of
forward security is slightly diﬀerent from Deﬁnition 3.3.1, from the security model of [BY03].
Here the security game starts with a known state, which becomes safe once a call to procedure
good-refresh is done (and for which the ﬂag corrupt = false), whereas in the security game
of [BY03], the challenger generates ﬁrst a random state. In both models, the state compromise
through a call to get-state is done afterwards. In this sense, the notion of forward security is
stronger here than in [BY03] because the adversary can choose the high entropy distribution
from the family H, whereas in [BY03] A has no control on it (not even on its distribution).
3.6.2 A Secure Construction
In [BH05] Barak and Halevi proposed a simple and elegant construction for a pseudo-random
number generator with input. This construction (which we call BH) has a state S ∈ {0, 1}n,
takes inputs I ∈ {0, 1}p and outputs R ∈ {0, 1}‘. The generator BH involves an H-extractor
(Deﬁnition 24) Extract : {0, 1}p −→ {0, 1}n and a (t, εG)-secure standard pseudo-random number
generator G : {0, 1}n −→ {0, 1}n+‘ (Deﬁnitions 8 and 9). Note that the output length of the
extractor Extract is equal to the size of the internal state of the generator BH (in accordance
with the notations and Deﬁnition 24, we have m = n), and the input length of the generator G
is equal to the size of the internal state of BH and its output length is the size of the internal
state of BH added to the size of the output of BH. The refresh and next algorithms are given
below, where G0 denotes the truncation to the ﬁrst n bits of G.
— 43 —
Chapter 3. Security Models for Pseudo-random Number Generators
• refresh(S, I) = G0(S ⊕ Extract(I)).
• next(S) = G(S).
The security of the pseudo-random number generator with input BH is stated in the following
theorem, where qr denotes the upper bound on the number of calls to the refresh algorithm and
qn denotes the upper bound on the number of calls to the next algorithm.
Theorem 8 (Security of BH [BH05]). Let Extract : {0, 1}p −→ {0, 1}n be an H-extractor. The
pseudo-random number generator with input BH is (t, qr/2n + qnεG)-robust for the family H.
3.7 Leakage Resilient Stateful Pseudo-Random Number Gener-
ators
3.7.1 Security Models
It is important to note that without restrictions on the leakage function, no security can be