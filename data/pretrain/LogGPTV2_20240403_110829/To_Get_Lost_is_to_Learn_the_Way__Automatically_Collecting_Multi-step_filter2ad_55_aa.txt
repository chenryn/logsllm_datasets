title:To Get Lost is to Learn the Way: Automatically Collecting Multi-step
Social Engineering Attacks on the Web
author:Takashi Koide and
Daiki Chiba and
Mitsuaki Akiyama
To Get Lost is to Learn the Way: Automatically Collecting
Multi-step Social Engineering Attacks on the Web
Takashi Koide
Daiki Chiba
Mitsuaki Akiyama
NTT Secure Platform Laboratories
NTT Secure Platform Laboratories
NTT Secure Platform Laboratories
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
By exploiting people’s psychological vulnerabilities, modern web-
based social engineering (SE) attacks manipulate victims to down-
load malware and expose personal information. To effectively lure
users, some SE attacks constitute a sequence of web pages starting
from a landing page and require browser interactions at each web
page, which we call multi-step SE attacks. Also, different browser
interactions executed on a web page often branch to multiple se-
quences to redirect users to different SE attacks. Although common
systems analyze only landing pages or conduct browser interac-
tions limited to a specific attack, little effort has been made to follow
such sequences of web pages to collect multi-step SE attacks.
We propose StraySheep, a system to automatically crawl a
sequence of web pages and detect diverse multi-step SE attacks. We
evaluate the effectiveness of StraySheep’s three modules (landing-
page-collection, web-crawling, and SE-detection) in terms of the
rate of collected landing pages leading to SE attacks, efficiency of
web crawling to reach more SE attacks, and accuracy in detecting
the attacks. Our experimental results indicate that StraySheep can
lead to 20% more SE attacks than Alexa top sites and search results
of trend words, crawl five times more efficiently than a simple
crawling module, and detect SE attacks with 95.5% accuracy. We
demonstrate that StraySheep can collect various SE attacks; not
limited to a specific attack. We also clarify attackers’ techniques for
tricking users and browser interactions redirecting users to attacks.
CCS CONCEPTS
• Security and privacy → Social engineering attacks.
KEYWORDS
social engineering attacks; browser automation; web crawler
ACM Reference Format:
Takashi Koide, Daiki Chiba, and Mitsuaki Akiyama. 2020. To Get Lost is
to Learn the Way: Automatically Collecting Multi-step Social Engineering
Attacks on the Web. In Proceedings of the 15th ACM Asia Conference on
Computer and Communications Security (ASIA CCS ’20), October 5–9, 2020,
Taipei, Taiwan. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/
3320269.3384714
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6750-9/20/10...$15.00
https://doi.org/10.1145/3320269.3384714
1 INTRODUCTION
Social engineering (SE) psychologically manipulates people to per-
form specific actions. Modern web-based attacks leverage SE for
malware infections [24, 25] and online frauds [17, 23, 29], which
are called web-based SE attacks (or simply SE attacks). Attackers
skillfully guide a user’s browser interaction through attractive web
content or warning messages to make users download malware
or leak sensitive information. For example, to download pirated
games, a user clicks a download button on an illegal downloading
web page. Then, a popup window with a virus-infection alert is dis-
played. A user who believes the fake information clicks a “confirm”
button and downloads fake anti-virus software [12].
Common systems to automatically collect SE attacks involve ac-
cessing web pages collected from search engines [17, 27, 29]. These
systems use a web browser to crawl web pages and identify a par-
ticular SE attack by extracting features only from each web page.
However, some types of SE attacks constitute a sequence of web
pages starting from a landing page and require browser interaction
(e.g., clicking an HTML element) at each web page to reach the
attacks, which we call multi-step SE attacks. This is because each
web page gradually convinces a user by using different psycholog-
ical tactics [25]. Also, different browser interactions executed on
a web page often branch to multiple sequences, redirecting users
to different SE attacks, because there are multiple attack scenarios
corresponding to a user’s interests or psychological vulnerabilities.
Although current systems analyze only landing pages or conduct
browser interactions limited to a specific attack, little effort has been
made to follow such sequences of web pages to collect multi-step
SE attacks.
We propose StraySheep, a system to automatically crawl the
sequence of web pages and detect diverse multi-step SE attacks
derived from a landing page. StraySheep is based on two key ideas.
The first idea is to simulate the multi-step browsing behaviors of
users, that is, intentionally follow the sequence of web pages by
selecting possible elements that psychologically attract users to
lead them to SE attacks. StraySheep not only follows a single se-
quence of web pages but also crawls multiple sequences derived
from a landing page. The second idea is to extract features from
reached web pages as well as an entire sequence of web pages.
Unlike previous approaches that extract features from a single web
page they have visited [17, 29] or identify malicious URL chains
automatically caused without user interactions (i.e., URL redirec-
tions) [22, 30, 32], StraySheep extracts features from the entire
sequence of web pages it has actively and recursively followed.
That is, StraySheep analyzes image and linguistic characteristics
of reached web pages, browser events (e.g., displaying popup win-
dows and alerts) that occurred before reaching the web page, and
browser interactions that lead users to SE attacks. These features
Session 8: Web Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan394represent common characteristics of all SE attacks, i.e., persuading
and deceiving users. Therefore, by combining these features to clas-
sify sequences, StraySheep detects various multi-step SE attacks
more accurately. We implemented StraySheep with three distinct
modules (landing-page-collection, web-crawling, and SE-detection) to
automatically collect landing pages, crawl the web pages branching
from them, and detect SE attacks using the results of web crawling,
respectively.
To determine the effectiveness of StraySheep’s three modules,
we conducted three evaluations: the rate of collected landing pages
leading to SE attacks, the efficiency of web crawling to reach more
SE attacks, and accuracy in detecting the attacks. The first evalua-
tion demonstrated that landing pages gathered by the landing-page-
collection module led to 20% more SE attacks than Alexa top sites
and search results of trend words. The second evaluation demon-
strated that the web-crawling module is five times more efficient
at crawling than simple crawling modules. The third evaluation
revealed that the SE-detection module identified SE attacks with
95.5% accuracy.
We analyzed collected multi-step SE attacks StraySheep in detail.
As a result of categorizing SE attacks, we found that StraySheep
reached a variety of SE attacks such as malware downloads, un-
wanted browser extension installs, survey scams, and technical
support scams. We also found that 30% of SE attacks were reached
from 25 different advertising providers.
The main contributions of this paper are as follows:
• We propose StraySheep, which detects multi-step SE attacks
by automatically and recursively crawling sequences of web
pages branching from landing pages. StraySheep can crawl
and detect these attacks by simulating multi-step browsing
behaviors of users and extracting features from an entire
sequence of web pages.
• We evaluated StraySheep’s three modules. The landing-
page-collection module led to 20% more SE attacks than
Alexa top sites and search results of trend words. The web-
crawling module was five times more efficient at crawling
than a simple crawling module. The SE-detection module
identified SE attacks with 95.5% accuracy.
• We conducted a detailed analysis on multi-step SE attacks
collected using StraySheep. We found that StraySheep col-
lected various SE attacks; not limited to a specific attack. We
analyzed attackers’ techniques of luring users and browser
interactions leading users to attacks.
2 BACKGROUND
SE is used to manipulate people into performing a particular action
by exploiting their psychology and has been widely used in various
types of web-based attacks, such as malware downloads [25, 35],
malicious browser extension installs [16, 33, 36], survey scams [17],
and technical support scams [23, 29]. Malware downloads and ma-
licious browser extension installs are achieved by masquerading as
legitimate software. Survey scams recruit users who are attracted
by fake survey rewards to trick them into providing sensitive infor-
mation and accessing web pages controlled by attackers. Technical
support scams are carried out by persuading users to make a call to
a fake technical support desk and install keystroke loggers, remote
access tools, or malware.
Figure 1: Sequence of web pages in multi-step SE attacks and
phases in each web page.
Multi-step SE attacks use multiple web pages leveraging different
psychological tactics to effectively lure users to the succeeding web
page. Figure 1 shows a sequence of web pages in multi-step SE
attacks and three simplified phases in each web page: user attraction,
browser interaction, and web navigation. Therefore, the three phases
can be repeated multiple times starting from a landing page, which
appears in response to clicking on a search-engine result or social-
media link. Different user interactions on a single web page also
lead to different SE attacks.
2.1 User Attraction
The user-attraction phase attracts a user psychologically by using
the content of the web page to deceive and persuade the user to
induce browser interaction [25]. For example, these web pages ad-
vertise free downloads of video games, threaten users with fake
virus warnings, and request bogus software updates. The main
purpose of this psychological attraction is to make the user interact
with an HTML element (e.g., a and div) that navigates to malware
downloads or a web page controlled by an attacker. We call such
HTML elements lure elements. What is common with lure elements
is that they contain words or shapes indicating the behavior or
category of an element. A lure element is characterized by its visual
effects, such as easily understandable download buttons contain-
ing “Click here to download” and movie play buttons containing
“WATCH NOW” or a triangle pointing right. A lure element is
also characterized by containing words such as “download-btn”
and “video-play-link” in their text content and document ob-
ject model (DOM) attributes such as id, class, and alt. Multiple
lure elements may be arranged on a single web page. In this case,
clicking these lure elements results in different SE attacks.
2.2 Browser Interaction
Users who are acted upon by the previous user-attraction phase
are guided to interact with lure elements on the web page. This
browser-interaction phase is mainly an explicit click on the lure
element but also includes an unintended click [27]. For example,
unintended clicks include clicking an overlay on the entire web
page, context menu, and the browser’s back button. These clicks
are forcibly generated by JavaScript to redirect a user to a new web
page or show a popup window against the user’s intention.
2.3 Web Navigation
In the web-navigation phase, browser events occur as a result of
browser interaction. These browser events redirect to another web
page in the current window or a new window (popup), display
alert dialogs, and download files. Web-page redirection occurs in an
!"#$%&&$’(&)*+!!"#$%,$*-"#$./+&#$’(&)*+.!!"#"%0#1.2’3)4’&)*+!!"#&%Clicktostartyourfree downloadDownload !’()*+),-./)0.123)4256753.823)95-)*:)672-).823)42(-.823);--2(.1?*8@()5#67#+(#.*8.-#1.9’4#":;’"#".)+.#’(;.-#1.9’4#A5B2*3)6.C7)D.@E.)2-"5?)%$*6+,’-,$"$)6.!/01013!"?5(@67$*%$"!"?5(@%$*6?$A6!(5?-%$*.!/02013+#?88%B%"5.!/0/013C"?)&5"67=)5?()%,$.!/0/023!"#$%#&’("&)’*+,,)*-%+#./+$0,)1!23456)7’*8"9,%#&./+$0,)1!23:5;<’$)-)*-%+#./+$0,)1!23259":D5""EF486,B64?$A%$*6G?*"H"$"5?)%$*6!"?5(@6I&"5%"8.!/020239":6G?*"6F"?(@"A6B5,’64?$A%$*6G?*"EF486,B!76G?*"!"#$%#&.="&)!,(%?#6J"A%?Session 8: Web Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan396module uses a web-search-based approach consisting of two steps:
generating search queries and searching and scraping.
3.1.1 Generating Search Queries. The landing-page-collection mod-
ule generates search queries to search the URLs of possible landing
pages leading to SE attacks. To generate the search queries, the mod-
ule collects core keywords, which stand for a title or name of paid
content (e.g., “Godzilla” and “Microsoft Office”) and concatenates
them with predefined qualifiers (e.g., “free download”, “crack”, and
“stream online”). To collect core keywords, the module automati-
cally scrapes popular electronic commerce (EC) sites and online
database sites by using predefined scraping logic in accordance with
each site and groups the core keywords by content category (e.g.,
video, software, and music). These core keywords can regularly be
updated by recollecting ranking and new release information.
The aim of using qualifiers is (1) limiting the coverage of search
results including illegal downloads and streaming, not legitimate
sites, and (2) increasing the variation in search results. We manu-
ally prepare qualifiers in advance using autosuggest/related search
functions on a search engine. When a user queries a certain word in
a search engine, these search functions provide a list of correspond-
ing keyword predictions. We input some titles of paid content to
the search engine and collect qualifiers for each category because
the qualifiers we require vary depending on the core keyword’s
category. For example, qualifiers of video are “stream”, “movie”, and
“online”. For another example, qualifiers of the software category
are “download”, “crack”, and “key”.
Searching and Scraping. This module retrieves URLs from
3.1.2
a search engine or social media by using the generated search