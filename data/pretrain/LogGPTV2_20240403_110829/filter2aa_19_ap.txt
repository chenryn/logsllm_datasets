4.7.4 从macOS中获取本地凭证和信息
本书中的大多数横向移动都集中在Windows，这是因为几乎所有大中型单位都使用活动目录管理系统和主机。我们可能会越来越多地遇到Mac主机，因此在本书内容中也包括Mac主机。一旦进入Mac主机环境，许多攻击就与Windows的情况类似了（举个例子，扫描默认口令、Jenkin/应用程序攻击、嗅探网络以及通过SSH或VNC横向移动）。
在Empire中，有一些macOS的静荷也是我比较喜欢的工具。Empire可以生成多个静荷，诱骗被攻击者执行我们的代理。这些静荷包括ducky脚本、应用程序、Office宏、Safari启动器和pkgs等。例如，我们可以在PowerShell Empire中创建一个Office宏，类似于在Windows中所做的，如图4.19所示。
（1）启动Empire。
（2）首先，确保像我们在本书开头介绍的那样设置您的Empire监听器。
（3）接下来，构建一个macOS宏静荷。
usestager osx/macro
（4）设置OutFile，写入您的本地文件系统。
set OutFile/tmp/mac.py
（5）生成静荷。
图4.19
如果查看生成的Office宏，那么您将看到它采用Base64代码，由Python执行。对我们来说，幸运的是，Python是macOS上的默认应用程序，当执行Office宏时，我们应该获得代理回连。
在macOS中创建恶意的Excel文件，我们打开新的Excel工作表，转到工具，查看宏，在此工作簿中创建宏，当Microsoft Visual Basic打开时，删除所有当前代码并将其替换为所有新的宏代码。最后，将其另存为xlsm文件，如图4.20所示。
图4.20
现在，将恶意文件发送给被攻击者，并查看Empire代理回连到系统。在被攻击者方面，当他们打开Excel文件时，显示的内容如图4.21所示。
图4.21
您要确保提供一个合理的理由，让被攻击者单击启用宏。
一旦代理回连到您的Empire服务器，侦查阶段的操作就非常相似了。我们需要执行以下操作。
转储浏览器信息和密码：usemodule collection/osx/browser_dump。
启用键盘记录：usemodule collection/osx/keylogger。
应用程序弹出对话框捕获密码：usemodule collection/osx/prompt。
使用他们的相机拍摄照片：usemodule collection/osx/webcam。
4.8 工作在Windows域环境中
同样，在下面的示例中，我们将使用PowerShell Empire。但是，您也可以使用Metasploit、Cobalt Strike或类似的工具进行同样的攻击。只要您能够将PowerShell脚本导入内存并避开主机系统的安全防护机制，使用什么工具并不重要。
既然您已经突破了被攻击者的主机，从他们的工作站获取了所有秘密，掌握了被攻击者浏览的一些网站，并执行了一些netstat风格的侦查……下一步要做什么呢？
红队真正关心的是在服务器、工作站、用户、服务以及活动目录中是否可以搜索可靠的信息。在很多情况下，由于存在报警/捕获的风险，因此我们无法运行任何漏洞扫描工具（甚至Nmap扫描工具）。那么，如何利用网络和服务的“功能”，找到我们需要的所有信息呢？
4.8.1 服务主体名称（SPN）
服务主体名称（SPN）是Windows中的一项功能，允许客户端唯一标识服务实例。Kerberos身份鉴权使用SPN功能，将服务实例与服务登录账户相关联。举个例子，一个SPN对应一个服务账户，此服务账户运行MS SQL服务器、HTTP服务器和打印服务器等的SPN。对于攻击者，查询SPN是枚举阶段的重要部分，这是因为任何域用户账户都能够查询活动目录，获取关联的所有服务账户/服务器。我们可以识别所有数据库和网站服务器，甚至一台主机都不需要扫描！
作为攻击者，我们可以利用这些“功能”查询活动目录。在任何加入域的计算机上，攻击者都可以运行setspn.exe文件来查询活动目录。此文件是默认的Windows二进制文件，存在于所有Windows系统中。
setspn -T [DOMAIN] -F -Q */*。
参数如下。 
-T：查询指定域
-F：查询活动目录林，而不是域
-Q：在目标域或者目标林执行
*/*：所有内容
我们可以从Setspn查询中获得什么类型的信息？如图4.22所示，运行setspn命令，我们看到有关域控制器上运行服务的信息和工作站的信息，我们还找到了一台名为CSK-GITHUB的服务器。在这个例子中，我们可以看到在该服务器上运行了HTTP服务。即使是在不同的端口上，如果仍然是HTTP，那么该信息也将被列出。
Setspn不仅会提供有关服务用户和活动目录中所有主机名的有用信息，还会告诉我们系统中运行的服务甚至端口号。如果可以直接从活动目录中获取服务甚至端口的大部分信息，那么我们为什么要扫描网络？Jenkins、Tomcat和ColdFusion，什么是您可能立即攻击的目标？
图4.22
4.8.2 查询活动目录
我多次获得一个域账户和密码，却被管理员告知这只是一个没有其他权限的域账户。我们可以在打印机、共享信息工作站、带有服务密码的平面文件文本、配置文件、iPad、Web应用程序页面源中包含密码的地方，找到这种类型的域账户。对于不是其他组成员的基本域账户，您可以做些什么？
获取有关活动目录用户的详细信息
我们可以使用@ harmj0y创建的、名为PowerView的工具，帮助我们完成所有琐碎的工作。PowerView使用PowerShell脚本，可在Windows域上获得网络态势感知信息。它包含一组纯PowerShell脚本，可以替换各种Windows“net *”命令，它使用PowerShell AD挂钩和底层Win32 API函数，实现各种有用的Windows域功能。作为攻击者，我们可以利用PowerView和PowerShell查询活动目录，活动目录中最低权限的用户——“域用户”即可完成任务，根本不需要本地管理员权限。
让我们来看看这个低级别用户可以获得什么样的数据。首先，运行Empire（您可以使用Metasploit、Cobalt Strike或类似的工具完成相同的任务）并在被攻击者系统上执行静荷。如果您之前从未设置过Empire，那么可查看有关Empire和Empire静荷设置的章节。一旦代理与命令和控制服务器通信，我们就可以输入“info”来查找有关被攻击者主机的信息。目前，我们在cyberspacekitten域中突破了Windows 10系统主机，主机已经打上了完整的Windows补丁，用户名为neil.pawstrong，如图4.23所示。
图4.23
接下来，我们想要在域中查询信息，并且要避免引起太多怀疑。我们可以使用Empire中的PowerView工具获取信息。PowerView查询域控制器（DC）以获取有关用户、组、计算机等各种信息。我们使用PowerView功能查询域控制器，并且应该看起来像普通流量一样。
Empire中有一些模块可用于态势感知，如图4.24所示。
图4.24
我们开始使用PowerView中的get_user脚本。Get_user查询指定域中特定用户或所有用户的信息，如图4.25所示。使用默认设置，我们可以转储有关域控制器中用户以及相关的所有信息。
模块：situational_awareness/network/powerview/get_user。
图4.25
在上面的转储中，可以看到其中一个用户Purri Gagarin的信息。我们得到了什么类型的信息？我们可以看到samaccountname用户名、密码更改的时间、对象类别是什么，以及他们是哪些组的成员和最后登录的时间等。通过这些基本用户信息转储，可以从目录服务中获取大量信息。我们还可以获得哪些其他类型的信息？
模块：situational_awareness/network/powerview/get_group_member。
Get_group_member返回特定组的成员，设置“Recurse”参数能够找到所有有效的组成员。我们可以使用活动目录查找某些组的特定用户。例如，通过以下Empire设置，我们可以搜索所有域管理员和属于域管理员组的分组，如图4.26所示。
info。
设置身份“域管理员”。
设置Recurse True。
设置FullData True。
执行。
图4.26
现在，我们获得一个用户、组、服务器和服务列表，这将帮助我们了解哪些用户具有哪些权限。但是，我们仍然需要有关工作站和系统的详细信息。信息中可能包括版本、创建日期、使用情况和主机名等。我们可以在使用get_computer命令时获取这些信息。
模块：situational_awareness/network/powerview/get_computer。
说明：get_computer模块查询域中计算机对象。
get_computer查询域控制器可以获得哪些信息？我们获取了机器、创建时间、DNS主机名和专有名称等信息。作为攻击者，一个有用的侦察信息是操作系统类型和操作系统版本。在这个例子中（见图4.27），我们可以看到操作系统是Windows 10，版本是Build 16299。我们获取了操作系统的相关信息，了解这个操作系统的最新状态，以及这个操作系统是否在微软公司的发布信息页面上发布了补丁信息。
图4.27
4.8.3 Bloodhound/Sharphound
我们如何利用从侦察阶段搜集到的所有信息，实现后续的渗透？我们如何快速地关联谁有权访问什么？回到之前，我们过去只是试图突破一切，以达到我们的目的，但这总是增加了被发现的可能性。
Andrew Robbins、Rohan Vazarkar和Will Schroeder开发了一种不错的关联工具，称为Bloodhound/Sharphound。在他们的GitHub页面中有下列介绍内容：“BloodHound使用图论来揭示活动目录环境中隐藏且经常无意识的关联。攻击者可以使用BloodHound轻松识别高度复杂的攻击路径，否则这样的路径很难发现。防御者可以使用BloodHound识别和找到这些攻击路径。蓝色团队和红色团队都可以使用BloodHound轻松且深入地了解活动目录环境中的权限关系。”
Bloodhound的工作原理是在被攻击者系统上运行Ingestor，然后查询活动目录（类似于我们之前手动执行的操作）中的用户、组和主机信息。然后，Ingestor将尝试连接到每个系统以枚举登录的用户、会话和权限。当然，在网络上这动作有点大。对于默认设置（可以修改）的中型、大型组织，使用Sharphound连接到每个主机系统和查询信息可能不到 10min。请注意，由于这涉及网络上每个加入域的系统，因此可能会被捕获。Bloodhound中有一个Stealth选项，它只查询活动目录并不连接到每个主机系统，但输出信息非常有限。
目前有两个不同的版本（其中我确定旧的版本很快就会删除）。
在Empire内部，您可以使用该模块。 
usemodule situational_awareness/network/bloodhound
这仍然使用非常慢的旧PowerShell版本
更好的选择是Sharphound。Sharphound是原始Bloodhound Ingester的C＃版本，它更快、更稳定，可以用作独立二进制文件或作为PowerShell脚本导入。Sharphound PowerShell脚本使用reflection和assembly.load，将已编译的BloodHound C＃ingestor加载到内存。
运行Bloodhound/Sharphound Ingestor，您可能需要指定多个信息搜集方式。
Group，搜集组成员身份信息。
LocalGroup，搜集计算机的本地管理员信息。
Session，搜集计算机的会话信息。
SessionLoop，连续搜集会话信息直到退出。
Trusts，搜集域信任数据。
ACL，搜集ACL（访问控制列表）数据。
ComputerOnly，搜集本地管理员和会话数据。
GPOLocalGroup，使用GPO（组策略对象）搜集本地管理员信息。
LoggedOn，使用高权限（需要管理员！）搜集会话信息。
ObjectProps，搜集用户和计算机的节点属性信息。
Default，搜集组成员身份、本地管理员、会话和域信任。
在主机系统上运行Blood/Sharphound。
运行PowerShell，然后导入Bloodhound.ps1或SharpHound.ps1。 
Invoke-Bloodhound -CollectionMethod Default
Invoke-Bloodhound -CollectionMethod ACL,ObjectProps,Default -CompressData -RemoveCSV -NoSaveCache
运行可执行文件。 
SharpHound.exe -c Default,ACL,Session,LoggedOn,Trusts,Group
Bloundhound/Sharphound操作完成后，被攻击者系统上将生成4个文件。访问这些文件并复制到您的Kali设备。接下来，我们需要启动Neo4j服务器，导入这些数据，构建关联图。
启动Bloodhound过程如下。
（1）apt-get install bloodhound。
（2）neo4j console。
（3）打开浏览器，访问http://localhost:7474。
Connect to bolt://localhost:7687
Username: neo4j
Password: neo4j