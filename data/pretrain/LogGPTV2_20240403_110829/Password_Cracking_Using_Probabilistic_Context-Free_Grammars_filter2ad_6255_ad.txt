only provide the lists to legitimate researchers who agree to 
abide by accepted ethical standards. 
    The first list, hereafter referred to as the “MySpace List”, 
was  originally  published  in  October  2006.  The  passwords 
were  compromised  by  an  attacker  who  created  a  fake 
MySpace login page and then performed a standard phishing 
attack  against  the  users.  The  attacker  did  not  secure  the 
server  they  were  collecting  passwords  upon  which  allowed 
independent  security  researchers  to  obtain  copies  of  the 
passwords. One of these researchers, (not affiliated with any 
university),  subsequently  posted  his  copy  of  the  list  on  the 
Full-Disclosure mailing list [15]. While multiple versions of 
the  MySpace  list  exist,  owing  to  the  fact  that  different 
researchers downloaded the list at different times, we choose 
to use the version posted on Full-Disclosure which contained 
67042 plain text passwords. Please note that not all of these 
passwords represent actual user passwords. This is because 
some  users  recognized  that  it  was  a  phishing  attack  and 
entered fake, (and often vulgar), data. For our test we did not 
397
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:33 UTC from IEEE Xplore.  Restrictions apply. 
attempt to purge these fake passwords due to the difficulties 
in distinguishing between fake and real passwords.  
    The  second  list  will  be  referred  to  as  the  SilentWhisper 
list.  This  list  contains  7480  plain  text  passwords  and  was 
originally from the website www.silentwhisper.net. A hacker 
compromised the site via SQL injection, and due to a feud 
with the site owner, subsequently posted the list to bittorrent. 
As  a  special  note,  these  later  passwords  were  extremely 
basic.  Only  3.28%  of  the  passwords  contained  both  letters 
and numbers, and only 1.20% of them contained both letters 
and special characters. A grand total of two of the passwords 
contained  letters,  numbers  and  special  characters.  We 
included this list though as it does represent the passwords 
many users choose. 
    The final list will be referred to as the “Finnish List”. This 
list  was  obtained  by  a  hacker  group  via  SQL  injection 
attacks  and  the  results  were  subsequently  posted  on  the 
internet [16]. This list actually contains the passwords from 
many  different  sites  that  were  compromised;  most  of  them 
based in Finland, hence the name.  This list contains 15699 
passwords  in  plain  text  and  an  additional  22733  unique 
MD5 password hashes. It is important to note that the plain 
text passwords and the hashed passwords represent different 
user bases as they came from separate compromised sites. In 
fact,  it  appears  that  each  set,  (both  the  MD5  and  plaintext 
lists),  are  composed  of  several  lists  from  distinct  websites 
that were broken into. 
4.2  EXPERIMENT SETUP AND PROCEDURES 
the  current 
    In 
implementation  of  our  probabilistic 
password  cracking  guess  generator,  (written  in  C),  our 
program is trained on an existing password list. Then once it 
is given an input dictionary it can generate password guesses 
based on either the pre-terminal probability or the terminal 
probability of the password structures. It is important to note 
that  the  training  need  only  be  done  once  to  generate  the 
grammar  that  will  be  used.  This  means  that  any  group can 
create many different targeted grammars and then distribute 
them  to  the  end  users  of  the  password  cracking  program. 
The end user would use input dictionaries of their choosing 
to  crack  passwords.  Note  that  the storage requirement of a 
grammar  is  likely  to  be  significantly  less  than  the  storage 
requirements  of  a  typical  input  dictionary.  Section  4.5 
discusses  space 
in  greater  detail.  This 
distinction  between  training  and  operation,  and  the  small 
size of the base grammar generated means that our method is 
highly portable. 
    Our  program  currently  outputs  these  guesses  to  stdout. 
This  gives  us  the  flexibility  to  use  our  guesses  as  input  to 
various other password cracking programs. For instance, to 
test against a test set of plaintext passwords, we can simply 
requirements 
the  Ripper 
check  for  an  exact  match,  and  record  how  many  guesses 
were  necessary  before  the  first  match  could  be  found.  For 
password  lists  that  are  hashed,  such  as  the  Finnish  list,  we 
piped the guesses generated by our program into the popular 
password  cracking  program  John 
[11]. 
Essentially  this  allows  us  to  use  our  program’s  word-
mangling  rules  without  having  to  code  our  own  hash 
evaluator. 
    As  a  comparison  against  our  probabilistic  password 
cracking  technique,  we  decided  to  use  John  the  Ripper’s 
default  word-mangling  rules.    These  word-mangling  rules 
are  as  close  to  an  industry  standard  as  we  could  find,  and 
represent  the  approach  most  people  would  take  when 
performing a dictionary-based password cracking attack. At 
its  core,  both  our  probabilistic  password  cracking  guess 
generator  and  John  the  Ripper  operating  in  wordlist  mode 
are  dictionary  based  attacks.  When  comparing  the  two 
methods,  we  ensure  both  programs  use  the  same  input 
dictionaries when trying to crack a given password set. In a 
dictionary-based attack, the number of guesses generated is 
finite, and determined by the size of the dictionary and the 
type  of  word-mangling  rules  used.  To  reflect  this,  unless 
otherwise  specified,  we  limited  the  number  of  guesses  our 
probabilistic  password  generator  was  allowed  to  create 
based  on  the  number  of  guesses  generated  by  the  default 
John  the  Ripper  rule  set.  This  is  because  our  program  can 
generate  many  more  rules  than  what  is  included  in  the 
default John the Ripper configuration and thus would create 
more  guesses  given  the  chance.  By  ensuring  both  methods 
are  only  allowed  the  same  number  of  guesses,  we  feel  we 
can fairly compare the two approaches. 
    To use our method, we have to train our password cracker 
on  real  passwords.  To  do  this,  we  needed  to  separate  our 
password  lists  into  training  lists  and test lists. As a special 
note, if a password was used to train our method we made 
sure we did not include it in any of our test lists. We created 
two different training lists to train our probabilistic password 
cracker.  The  first  list  was  created  from  the  MySpace 
password  list.  We  divided  the  MySpace  password  list  into 
two parts, a training list and a test list. The MySpace training 
list  contained  a  total  of  33561  passwords.  For  the  second 
training list, we used all of the plaintext passwords from the 
Finnish list. This contained a total of 15699 passwords. We 
used  all  the  Finnish  plaintext  passwords  since  we  used  the 
Finnish hashed passwords for the test set.  We did not create 
a training list from the SilentWhisper set due to its small size 
and the fact that we would need to have passwords left over 
to test against. 
    We then designated all passwords not in the training set as 
the test set. These passwords are never trained against, and 
are  used  solely  to  gauge  the  effectiveness  of  both  our 
probabilistic password cracker and John the Ripper on real 
398
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:33 UTC from IEEE Xplore.  Restrictions apply. 
world  passwords.  Just  as  in  standard  machine  learning 
research, our goal is by keeping these two groups, (training 
and  testing),  separate  so  we  can  avoid  overtraining  our 
method  and  provide  a  more  accurate  estimation  of  its 
potential.    In summary, the three test lists we used were the 
MySpace test list containing 33481 plaintext passwords, the 
SilentWhisper list which contained 7480 plaintext passwords 
and the Finnish test list which contained 22733 unique MD5 
password hashes. 
    One  final  note;  a  password  was  considered  ‘cracked’  if 
the program generated a guess that matched the password in 
the test list. 
4.3  DESCRIPTION OF INPUT DICTIONARIES 
Fig. 4.3.2.   Number of Password Guesses Generated by JtR 
    Due to the fact that both our password cracker and John 
the Ripper in wordlist mode operate as a dictionary attack, 
they both require an input dictionary to function. We choose 
a total of six publicly available input dictionaries to use in 
our  tests.  Four  of  them,  “English_lower”, “Finnish_lower”, 
“Swedish_lower” and “Common_Passwords” were obtained 
from John the Ripper’s public web site [11]. As a side note, 
the word “lower” refers to the fact that the dictionary words 
are stored as all lower case. Additionally we used the input 
dictionary  “dic-0294”  which  we  obtained  from  a  popular 
password-cracking site [9]. This list was chosen due to the 
fact  that  we  have  found  it  very  effective  when  used  in 
traditional  password  crackers.  Finally,  we  created  our  own 
wordlist  “English_Wiki”  which  is  based  on  the  English 
words  gathered  off  of  www.wiktionary.org.  This  is  a  sister 
project  of  Wikipedia,  and 
it  provides  user  updated 
dictionaries in various languages. 
    Each  dictionary  contained  a  different  number  of 
dictionary  words  as  seen  in  Table  4.3.1.  Due  to  this,  the 
number of guesses generated by each input dictionary when 
used  with  John  the  Ripper’s  default  mangling  rules  also 
varied as can be seen by Fig. 4.3.2.  
Table 4.3.1  
Size of Input Dictionaries 
4.4  PASSWORD CRACKING RESULTS 
    Our first test, pictured in Fig. 4.4.1, shows the results of 
training our Probabilistic Password Cracker on the MySpace 
training list. Three different cracking techniques are used on 
the MySpace test list. The first is the default rule set for John 
the  Ripper.  The  second  technique  is  our  Probabilistic 
Password Cracker using the pre-terminal probabilities of its 
structures. Once again, the pre-terminal probabilities do not 
assign a probability value to the dictionary words.  The third 
technique  is  our  Probabilistic  Password  Cracker  using  the 
probabilities  of  the  terminals  (guesses).  Recall  that  in  this 
case, we assign probabilities to dictionary words and extend 
our  probabilistic  context-free  grammar  to  terminal  strings.  
Once  again,  the  number  of  guesses  allowed  to  each  run  is 
shown in Fig. 4.3.2.  
Dictionary Name 
Dic-0294 
English_Lower 
Common_Passwords 
English_Wiki 
Swedish_Lower 
Finnish_Lower 
Number of Dictionary Words 
869228 
444678 
816 
68611 
14555 
358963 
Fig.  4.4.1.      Number  of  Passwords  Cracked.  Trained  on  the 
MySpace Training List. Tested on the MySpace Test List 
    As  the  data  shows,  our  password  cracking  operating  in 
terminal  probability  order performed the best. Using it, we 
achieved an improvement over John the Ripper ranging from 
399
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:33 UTC from IEEE Xplore.  Restrictions apply. 
probability  order  performed  competitively  with  John  the 
Ripper. 
28%  to  129%  more  passwords  cracked  given  the  same 
number  of  guesses.  Additionally,  when  we  used  the  pre-
terminal order, in all cases but one we also achieved better 
results  than  John  the  Ripper,  though  less  then  what  we 
achieved using terminal probability order. 
    The  next  question  would  be  how  does  our  probabilistic 
method work when trained on a different data set? The same 
test as above was run on the MySpace test list, but this time 
we  used  the  Finnish  training  list  to  train  our  password 
cracker. The results are shown in Fig. 4.4.2.  
trained  on 
the  MySpace  data.  This 
Fig. 4.4.2.   Number of Passwords Cracked. Trained on the Finnish 
Training List. Tested on the MySpace Test List 
    As  the  results  show,  the  terminal  probability  order  once 
again performed the best, though not as well as it did when it 
was 
the 
improvement  ranged  from  11%  to  96%  more  passwords 
cracked compared to John the Ripper. A surprising result to 
us was that when we used Pre-Terminal Probability Order, it 
did  not  result  in  a  noticeable  improvement  over  John  the 
Ripper’s default rule set. In fact, in two of the test cases it 
actually performed worse. 
    Next  we  ran  the  same  tests  by  training  our  Probabilistic 
Password  Cracker  on  the  MySpace  training  list,  and  then 
running it against the SilentWhisper test list. The results can 
be  seen  in  Fig.  4.4.3.  As  expected,  in  this  case  the  default 
John  the  Ripper  word-mangling  rules  performed  slightly 
better.  This  is  due  to  the  relative  simplicity  of  the 
SilentWhisper test set.  Since our probabilistic method had 
been trained on more complex passwords, it spent much of 
its  time  generating guesses using advanced mangling rules, 
vs.  John  the  Ripper  which  exhausted  the  simple  mangling 
rules, (such as just use the dictionary word), first. This does 
show a limitation of our probabilistic method as it does need 
to  be  trained  on  passwords  of  similar  complexity  as  the 
passwords it is trying to crack.  That being said, in all of the 
test  runs  with 
the 
English_Lower dictionary, our method operating in terminal 
the  exception  of 
the  one  using 
time 
Fig.  4.4.3.      Number  of  Passwords  Cracked.  Trained  on  the 
MySpace Training List. Tested on the SilentWhisper Test List 
    To round things out, we then evaluated our probabilistic 
method  by  training  it  on  the  Finnish  training  set  and  then 
attacking  the  Finnish  test  set.  Please  note  that  the  Finnish 
training  set  and  the  Finnish  test  set  were  gathered  from 
separate websites. Thus for this experiment, even though the 
users share a common language, we trained and then tested 
our password cracker against different user bases. Due to the 