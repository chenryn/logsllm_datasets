查看代码：`confluence-6.0.6/plugins-osgi-cache/transformed-plugins/confluence-editor-6.0.6_1487721990000.jar!/com/atlassian/confluence/tinymceplugin/rest/PageResource#getDraftDiff`  
可以发现这个路径是允许匿名用户访问的：
漏洞修复
使用6.0.7版本进行测试。
不带Cookie的情况下，发现页面404了。
跟到对应的代码`atlassian-confluence-6.0.7/confluence/WEB-INF/atlassian-bundled-plugins/confluence-editor-6.0.7.jar!/com/atlassian/confluence/tinymceplugin/rest/PageResource#getDraftDiff`：
增加了权限校验。若当前用户没有编辑当前页面的权限，则直接响应404。
## Bitbucket
###  Bitbucket历史漏洞
Bitbucket最近比较重要的是以下两个漏洞。CVE-2019-15000 git的参数注入漏洞，和CVE-2019-3397。
**[CVE-2019-15000]参数注入漏洞**
Bitbucket最近的漏洞不多，而且我对它也不是很熟悉。最近出的比较严重的漏洞还是`CVE-2019-15000`，
由于REST接口的diff功能未对`--`这种对于git命令有特殊意义的字符进行过滤，导致了git
diff的参数注入，至少可以读取敏感文件的效果。详情参考：
**[CVE-2019-3397]**
这个漏洞是由rips发现并分析的。利用这个漏洞需要管理员权限。  
详情参考：
Bitbucket的漏洞可以跟gitlab等git服务解决方案的漏洞进行对比。如果今后它出漏洞很可能还是跟git参数命令相关的。  
下面提供一些git参数注入漏洞的例子：
**git ls-remote**
比如Jenkins的Git Client插件的命令执行漏洞`CVE-2019-10392`，
    git ls-remote -h --upload-pack=calc.exe HEAD
这个也是git ls-remote命令的参数注入漏洞：
**git grep**
    git grep --open-files-in-pager=calc.exe master
参考：
感觉好几个是跟pager相关的。pager是用户指定的一个外部的执行diff、cat等功能的可执行文件的路径。
但是我在git log和git diff命令下没找到。
另外又看到几个git的参数注入的：
使用docker build命令的时候：
PoC：
    docker build "PI:EMAIL/a/b#--upload-pack=sleep 5;:"
实际上执行的命令是：
    $ git init
    $ git remote add PI:EMAIL/a/b
    $ git fetch origin "--upload-pack=sleep 5; PI:EMAIL/a/b"
另外还有一个git submodule的命令执行：
    https://staaldraad.github.io/post/2018-06-03-cve-2018-11235-git-rce/
利用git hooks实现路径穿越。
less读取文件：
`shift + e`，然后输入文件名即可读取这个文件。
less执行命令：
参考：
比如`git-receive-pack --help`命令就用到了less命令，可以用来读取文件和执行命令。
这个产品的漏洞挖掘需要对git的各种参数及其使用场景非常熟悉或有过深入的研究。可以从以下资料展开研究：
  * [对基于Git的版本控制服务的通用攻击面的探索](https://data.hackinn.com/ppt/2019%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E9%A2%86%E8%A2%96%E5%B3%B0%E4%BC%9A/%E5%AF%B9%E5%9F%BA%E4%BA%8EGit%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%80%9A%E7%94%A8%E6%94%BB%E5%87%BB%E9%9D%A2%E7%9A%84%E6%8E%A2%E7%B4%A2.pdf)
  * [hackerone上公开的gitlab漏洞](https://hackerone.com/reports/658013)
  * [git命令文档说明](https://git-scm.com/docs/)
## Atlassian产品环境搭建
Atlassian家产品的环境搭建都比较类似。会自带一个Tomcat，然后具体产品作为其一个webapp存在。Github上有一份[带dockerfile的环境](https://github.com/TommyLau/docker-atlassian)，基本上Atlassian产品的环境都有了。
如果自己在Mac上或者Linux上搭建环境，可以用以下方式，以Jira为例，Confluence类似。找到具体的产品和版本号即可。
    $ wget https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-7.13.0.tar.gz
    $ tar zxf atlassian-jira-software-7.13.0.tar.gz
    $ cd atlassian-jira-software-7.13.0-standalone/
    $ vi atlassian-jira/WEB-INF/classes/jira-application.properties #设置jira的Home目录，这里我设置为
    #/home/cqq/jiraHome
    $ mkdir /home/cqq/jiraHome  # 作为jira的安装目录(不手动创建目录也行，jira会自动创建)
    $ conf/server.xml #修改端口，这里我改成8091，与Confluence的8090接近
    $ bin/start-jira.sh #启动jira
若想调试，需要修改`bin/setenv.sh`:
    CATALINA_OPTS="-Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=12346 ${CATALINA_OPTS}"  # for debug
    CATALINA_OPTS="${GC_JVM_PARAMETERS} ${CATALINA_OPTS}"
    export CATALINA_OPTS
如果觉得卡可以把允许的内存设置的大一些：
    JVM_MINIMUM_MEMORY="4096m"
    JVM_MAXIMUM_MEMORY="4096m"
安装时会选择数据库，如果图方便可以选择内置的h2数据库，也可以自己创建好对应的数据库之后，让Jira连接它即可。我尝试使用了postgresql数据库，可以参考：
Bitbucket的设置调试和环境变量稍微有点区别：
下载：
解压之后设置好`JAVA_HOME`环境变量，以及`BITBUCKET_HOME`环境变量，
这个是到时候bitbucket的数据被安装到的目录。
    vi bin/set-bitbucket-home.sh #设置JAVA_HOME，以及BITBUCKET_HOME环境变量
    vi bin/_start-webapp.sh
    # DEBUG="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=12346"
    bin/start-bitbucket.sh  # 启动Bitbucket
Jira、Confluence、Bitbucket的历史版本下载：
  * 
  * 
  * 
可以选择安装程序进行安装，也可以选择压缩文件解压到本地。
在安装过程中需要输入相应的licnese，如果只是用于测试，可以到Atlassian选择对应的产品，申请试用的license，有效期是一个月。
## Atlassian产品最新漏洞获取方式
Atlassian产品主要发布在官方公告和issues页面中。
官方公告一般发高危及以上的漏洞，其他的漏洞会先在issues里提交然后分配CVE编号(安全公告一般也是从issues中来的)。一般监控官方公告页面就可以了。如果想获取最新的可能的漏洞信息，而又不担心误报的话，可以监控issues页面，或者跟着NVD的邮件列表看看有没有Atlassian产品相关的。
  * Jira官方公告页面：  
  * Confluence官方公告页面：  
  * Bitbucket官方公告页面：  
issues页面:
  * 
## Atlassian产品漏洞应急
根据这段时间跟进Atlassian产品的漏洞的经验，当一个jira或者confluence的cve出来的时候，可能当时只有漏洞描述，没有复现步骤，需要自己定位到漏洞点。
我一般是通过在相应产品目录下各种文本文件(包括jar包)搜索关键词(忽略大小写)
    grep -rni "或者关键或者或者" *
或者在其各种jar包中搜索关键字：
    grep -rni "关键词" `find . -name *.jar`
或者通过strings工具判断某二进制文件中是否包含某关键词字符串。
可能在`WEB-INF/web.xml`中找到url对应的处理类：
比如我通过官方的描述，知道了CVE-2019-8446的触发点是`/rest/issueNav/1/issueTable`，那我就搜`/rest/issueNav`，然后在`WEB-INF/web.xml`中找到了对应的处理类/过滤器名
然后根据过滤器的名字搜索类
再根据类名定位到具体的文件中，可能是jar包形式，也可能是.class文件形式。
然后再去IDEA中下断点。
还有一个办法就是直接去日志里查调用栈（如果有报错的话）
如果只知道一个关键方法的名字，可以先搜它在哪个jar包中
确定jar包之后， 再用反编译工具将jar包反编译你成java代码，再搜索，确定其具体的路径，定位到具体的文件。
## 参考
  * [Confluence中文版文档](https://www.cwiki.us/display/CONFLUENCEWIKI)
  * [There is a proxy in your Atlassian Product! (CVE-2017-9506)](http://dontpanic.42.nl/2017/12/there-is-proxy-in-your-atlassian.html)
  * [Jira Architecture overview](https://developer.atlassian.com/server/jira/platform/architecture-overview/)
  * [Jira相关背景知识](https://blog.csdn.net/caiqiiqi/article/details/89927578)
  * [Confluence相关背景知识](https://blog.csdn.net/caiqiiqi/article/details/96426205)
  * [Bitbucket相关](https://blog.csdn.net/caiqiiqi/article/details/102799830)
  * [Vulnerability Spotlight: Multiple vulnerabilities in Atlassian Jira](https://blog.talosintelligence.com/2019/09/vuln-spotlight-atlassian-jira-sept-19.html)
  * [BitBucket服务器参数注入漏洞(CVE-2019-15000)](https://mp.weixin.qq.com/s/3J-lA0CQylrq2ZY3ZEESiQ)
  * [Jira未授权SSRF漏洞(CVE-2019-8451)](https://mp.weixin.qq.com/s/_Tsq9p1pQyszJt2VaXd61A)
  * [Jira未授权服务端模板注入漏洞(CVE-2019-11581)](https://mp.weixin.qq.com/s/d2yvSyRZXpZrPcAkMqArsw)
  * [Confluence路径穿越漏洞(CVE-2019-3398)](https://xz.aliyun.com/t/4854)
  * [Confluence未授权模板注入/代码执行(CVE-2019-3396)](https://caiqiqi.github.io/2019/11/03/Confluence%E6%9C%AA%E6%8E%88%E6%9D%83%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2019-3396/)
  * [Confluence 未授权RCE分析（CVE-2019-3396）](https://lucifaer.com/2019/04/16/Confluence%20%E6%9C%AA%E6%8E%88%E6%9D%83RCE%E5%88%86%E6%9E%90%EF%BC%88CVE-2019-3396%EF%BC%89/)
  * [Confluence Pre-Auth SSRF(CVE-2019-3395)](https://mp.weixin.qq.com/s/URDaO5xZISL0Bosh1nzM7A)
  * [Confluence敏感信息泄露漏洞(CVE-2019-3394)](https://mp.weixin.qq.com/s/puRrvfqWFVKvQ0hOoVs8lQ)
  * [Atlassian products in Docker](https://github.com/TommyLau/docker-atlassian)
  * 
  * 
  * 
  * [CVE-2017-9506 – SSRF](https://github.com/random-robbie/Jira-Scan)