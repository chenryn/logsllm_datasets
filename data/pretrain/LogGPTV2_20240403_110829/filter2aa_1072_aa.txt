# GNU History Library

## Edition 6.1, for History Library Version 6.1
**October 2009**

- **Authors:**
  - Chet Ramey, Case Western Reserve University
  - Brian Fox, Free Software Foundation

This document details the GNU History library (version 6.1, released on October 9, 2009), a programming tool that offers a consistent user interface for recalling and reusing previously typed input.

### Copyright
Copyright © 1988–2009 Free Software Foundation, Inc.

**Permissions:**
- You are permitted to make and distribute verbatim copies of this manual, provided the copyright notice and permission notice are preserved on all copies.
- You may copy, distribute, and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation, with no Invariant Sections, and with the Front-Cover texts being “A GNU Manual.” The Back-Cover Texts are as follows: "You are free to copy and modify this GNU manual. Buying copies from GNU Press supports the FSF in developing GNU and promoting software freedom."

### Published by:
Free Software Foundation  
59 Temple Place, Suite 330,  
Boston, MA 02111-1307  
USA

---

## Table of Contents

1. [Using History Interactively](#using-history-interactively)
   1.1 [History Expansion](#history-expansion)
      1.1.1 [Event Designators](#event-designators)
      1.1.2 [Word Designators](#word-designators)
      1.1.3 [Modifiers](#modifiers)
2. [Programming with GNU History](#programming-with-gnu-history)
   2.1 [Introduction to History](#introduction-to-history)
   2.2 [History Storage](#history-storage)
   2.3 [History Functions](#history-functions)
      2.3.1 [Initializing History and State Management](#initializing-history-and-state-management)
      2.3.2 [History List Management](#history-list-management)
      2.3.3 [Information About the History List](#information-about-the-history-list)
      2.3.4 [Moving Around the History List](#moving-around-the-history-list)
      2.3.5 [Searching the History List](#searching-the-history-list)
      2.3.6 [Managing the History File](#managing-the-history-file)
      2.3.7 [History Expansion](#history-expansion-1)
   2.4 [History Variables](#history-variables)
   2.5 [History Programming Example](#history-programming-example)
3. [Appendix A: GNU Free Documentation License](#appendix-a-gnu-free-documentation-license)
4. [Appendix B: Concept Index](#appendix-b-concept-index)
5. [Appendix C: Function and Variable Index](#appendix-c-function-and-variable-index)

---

## 1. Using History Interactively

### 1.1 History Expansion

The GNU History library provides a history expansion feature similar to that of `csh`. This section describes the syntax used to manipulate history information.

**Overview:**
- **Purpose:** History expansions allow users to reuse and modify previous commands, making it easy to repeat commands, insert arguments from a previous command into the current one, or quickly correct errors in previous commands.
- **Process:** History expansion occurs in two parts:
  1. Determine which line from the history list to use.
  2. Select portions of that line for inclusion in the current command.
- **Terminology:**
  - **Event:** The line selected from the history.
  - **Words:** The portions of the event that are acted upon.
  - **Modifiers:** Tools to manipulate the selected words.
- **Syntax:** History expansions are introduced by the history expansion character, which is `!` by default.

#### 1.1.1 Event Designators

An event designator refers to a specific command line entry in the history list.

- `!`: Start a history substitution, except when followed by a space, tab, end of line, or `=`.
- `!n`: Refer to command line `n`.
- `!-n`: Refer to the command `n` lines back.
- `!!`: Refer to the previous command (synonym for `!-1`).
- `!string`: Refer to the most recent command starting with `string`.
- `!?string[?]`: Refer to the most recent command containing `string`. The trailing `?` can be omitted if `string` is followed immediately by a newline.
- `^string1^string2^`: Quick substitution. Repeat the last command, replacing `string1` with `string2` (equivalent to `!!:s/string1/string2/`).
- `!#`: The entire command line typed so far.

#### 1.1.2 Word Designators

Word designators are used to select specific words from the event. A `:` separates the event specification from the word designator. It may be omitted if the word designator begins with `^`, `$`, `*`, `-`, or `%`.

- **Word Numbering:** Words are numbered from the beginning of the line, with the first word being `0`.
- **Insertion:** Words are inserted into the current line, separated by single spaces.

**Examples:**
- `!!`: Repeats the preceding command.
- `!!:$`: Refers to the last argument of the preceding command (can be shortened to `!$`).
- `!fi:2`: Refers to the second argument of the most recent command starting with `fi`.

**Word Designators:**
- `0`: The 0th word (usually the command word).
- `n`: The nth word.
- `^`: The first argument (word 1).
- `$`: The last argument.
- `%`: The word matched by the most recent `?string?` search.
- `x-y`: A range of words; `-y` abbreviates `0-y`.
- `*`: All words except the 0th (synonym for `1-$`). If there is only one word, the empty string is returned.
- `x*`: Abbreviates `x-$`.
- `x-`: Abbreviates `x-$` but omits the last word.

If a word designator is supplied without an event specification, the previous command is used as the event.

#### 1.1.3 Modifiers

After the optional word designator, you can add one or more of the following modifiers, each preceded by a `:`.

- `h`: Remove a trailing pathname component, leaving only the head.
- `t`: Remove all leading pathname components, leaving the tail.
- `r`: Remove a trailing suffix of the form `.suffix`, leaving the basename.
- `e`: Remove all but the trailing suffix.
- `p`: Print the new command but do not execute it.
- `s/old/new/`: Substitute `new` for the first occurrence of `old` in the event line. Any delimiter may be used in place of `/`. The final delimiter is optional if it is the last character on the input line.
- `&`: Repeat the previous substitution.
- `g`: Apply the following `s` modifier over the entire event line (used with `s`, as in `gs/old/new/`, or with `&`).
- `G`: Apply the following `s` modifier once to each word in the event.

---

## 2. Programming with GNU History

### 2.1 Introduction to History

Many programs read input from the user line by line. The GNU History library helps track these lines, associate arbitrary data with each line, and use information from previous lines to compose new ones.

**Features for Programmers:**
- **Line Tracking:** Remember lines on a history list.
- **Data Association:** Associate arbitrary data with a line.
- **Line Management:** Remove lines from the list, search for lines containing a text string, and reference any line directly.
- **History Expansion:** Provide a consistent user interface across different programs.

**Benefits for Users:**
- **Consistent Interface:** A set of well-known commands for manipulating the text of previous lines and using that text in new commands.
- **Basic Commands:** Similar to the history substitution provided by `csh`.

**Integration with Readline:**
- **Optional Use:** Programmers can use the Readline library, which includes some history manipulation by default and offers command-line editing.

**Initialization:**
- **Header File:** Before declaring any functions using the History library, include `<readline/history.h>` in any file that uses the History library’s features. This file provides extern declarations for all public functions and variables and declares all public data structures.

### 2.2 History Storage

The history list is an array of history entries. Each history entry is defined as follows:

```c
typedef void *histdata_t;
typedef struct _hist_entry {
    char *line;
    char *timestamp;
    histdata_t data;
} HIST_ENTRY;
```

The history list itself might be declared as:

```c
HIST_ENTRY **the_history_list;
```

The state of the History library is encapsulated into a single structure:

```c
typedef struct _hist_state {
    HIST_ENTRY **entries; /* Pointer to the entries themselves. */
    int offset;           /* The location pointer within this array. */
    int length;           /* Number of elements within this array. */
    int size;             /* Number of slots allocated to this array. */
    int flags;            /* Flags indicating the state of the history. */
} HISTORY_STATE;
```

If the `flags` member includes `HS_STIFLED`, the history has been stiﬂed.

### 2.3 History Functions

This section describes the calling sequence for the various functions exported by the GNU History library.

#### 2.3.1 Initializing History and State Management

[Content to be added]

#### 2.3.2 History List Management

[Content to be added]

#### 2.3.3 Information About the History List

[Content to be added]

#### 2.3.4 Moving Around the History List

[Content to be added]

#### 2.3.5 Searching the History List

[Content to be added]

#### 2.3.6 Managing the History File

[Content to be added]

#### 2.3.7 History Expansion

[Content to be added]

### 2.4 History Variables

[Content to be added]

### 2.5 History Programming Example

[Content to be added]

---

## Appendix A: GNU Free Documentation License

[Content to be added]

## Appendix B: Concept Index

[Content to be added]

## Appendix C: Function and Variable Index

[Content to be added]