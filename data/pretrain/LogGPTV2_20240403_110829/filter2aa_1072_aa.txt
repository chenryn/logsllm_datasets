GNU History Library
Edition 6.1, for History Library Version 6.1.
October 2009
Chet Ramey, Case Western Reserve University
Brian Fox, Free Software Foundation
This document describes the GNU History library (version 6.1, 9 October 2009), a program-
ming tool that provides a consistent user interface for recalling lines of previously typed
input.
Copyright c⃝ 1988–2009 Free Software Foundation, Inc.
Permission is granted to make and distribute verbatim copies of this manual provided the
copyright notice and this permission notice are preserved on all copies.
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant Sections,
with the Front-Cover texts being “A GNU Manual”, and with the Back-Cover
Texts as in (a) below. A copy of the license is included in the section entitled
“GNU Free Documentation License”.
(a) The FSF’s Back-Cover Text is: You are free to copy and modify this GNU
manual. Buying copies from GNU Press supports the FSF in developing GNU
and promoting software freedom.”
Published by the Free Software Foundation
59 Temple Place, Suite 330,
Boston, MA 02111-1307
USA
i
Table of Contents
1
Using History Interactively . . . . . . . . . . . . . . . . . . . . 1
1.1
History Expansion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.1.1
Event Designators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.1.2
Word Designators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.1.3
Modiﬁers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
2
Programming with GNU History . . . . . . . . . . . . . 4
2.1
Introduction to History. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.2
History Storage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.3
History Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.3.1
Initializing History and State Management. . . . . . . . . . . . . . . . . 5
2.3.2
History List Management. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.3.3
Information About the History List. . . . . . . . . . . . . . . . . . . . . . . . 6
2.3.4
Moving Around the History List . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.3.5
Searching the History List . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
2.3.6
Managing the History File. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
2.3.7
History Expansion. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
2.4
History Variables. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
2.5
History Programming Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
Appendix A
GNU Free Documentation License
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
Appendix B
Concept Index . . . . . . . . . . . . . . . . . . . . 20
Appendix C
Function and Variable Index . . . . 21
Chapter 1: Using History Interactively
1
1 Using History Interactively
This chapter describes how to use the gnu History Library interactively, from a user’s
standpoint.
It should be considered a user’s guide.
For information on using the gnu
History Library in your own programs, see Chapter 2 [Programming with GNU History],
page 4.
1.1 History Expansion
The History library provides a history expansion feature that is similar to the history
expansion provided by csh.
This section describes the syntax used to manipulate the
history information.
History expansions introduce words from the history list into the input stream, making
it easy to repeat commands, insert the arguments to a previous command into the current
input line, or ﬁx errors in previous commands quickly.
History expansion takes place in two parts. The ﬁrst is to determine which line from
the history list should be used during substitution.
The second is to select portions of
that line for inclusion into the current one. The line selected from the history is called the
event, and the portions of that line that are acted upon are called words. Various modiﬁers
are available to manipulate the selected words. The line is broken into words in the same
fashion that Bash does, so that several words surrounded by quotes are considered one word.
History expansions are introduced by the appearance of the history expansion character,
which is ‘!’ by default.
1.1.1 Event Designators
An event designator is a reference to a command line entry in the history list.
!
Start a history substitution, except when followed by a space, tab, the end of
the line, or ‘=’.
!n
Refer to command line n.
!-n
Refer to the command n lines back.
!!
Refer to the previous command. This is a synonym for ‘!-1’.
!string
Refer to the most recent command starting with string.
!?string[?]
Refer to the most recent command containing string. The trailing ‘?’ may be
omitted if the string is followed immediately by a newline.
^string1^string2^
Quick Substitution. Repeat the last command, replacing string1 with string2.
Equivalent to !!:s/string1/string2/.
!#
The entire command line typed so far.
Chapter 1: Using History Interactively
2
1.1.2 Word Designators
Word designators are used to select desired words from the event. A ‘:’ separates the event
speciﬁcation from the word designator. It may be omitted if the word designator begins
with a ‘^’, ‘$’, ‘*’, ‘-’, or ‘%’. Words are numbered from the beginning of the line, with the
ﬁrst word being denoted by 0 (zero). Words are inserted into the current line separated by
single spaces.
For example,
!!
designates the preceding command. When you type this, the preceding com-
mand is repeated in toto.
!!:$
designates the last argument of the preceding command. This may be shortened
to !$.
!fi:2
designates the second argument of the most recent command starting with the
letters fi.
Here are the word designators:
0 (zero)
The 0th word. For many applications, this is the command word.
n
The nth word.
^
The ﬁrst argument; that is, word 1.
$
The last argument.
%
The word matched by the most recent ‘?string?’ search.
x-y
A range of words; ‘-y’ abbreviates ‘0-y’.
*
All of the words, except the 0th. This is a synonym for ‘1-$’. It is not an error
to use ‘*’ if there is just one word in the event; the empty string is returned in
that case.
x*
Abbreviates ‘x-$’
x-
Abbreviates ‘x-$’ like ‘x*’, but omits the last word.
If a word designator is supplied without an event speciﬁcation, the previous command
is used as the event.
1.1.3 Modiﬁers
After the optional word designator, you can add a sequence of one or more of the following
modiﬁers, each preceded by a ‘:’.
h
Remove a trailing pathname component, leaving only the head.
t
Remove all leading pathname components, leaving the tail.
r
Remove a trailing suﬃx of the form ‘.suffix’, leaving the basename.
e
Remove all but the trailing suﬃx.
p
Print the new command but do not execute it.
Chapter 1: Using History Interactively
3
s/old/new/
Substitute new for the ﬁrst occurrence of old in the event line. Any delimiter
may be used in place of ‘/’. The delimiter may be quoted in old and new with a
single backslash. If ‘&’ appears in new, it is replaced by old. A single backslash
will quote the ‘&’. The ﬁnal delimiter is optional if it is the last character on
the input line.
&
Repeat the previous substitution.
g
a
Cause changes to be applied over the entire event line. Used in conjunction
with ‘s’, as in gs/old/new/, or with ‘&’.
G
Apply the following ‘s’ modiﬁer once to each word in the event.
Chapter 2: Programming with GNU History
4
2 Programming with GNU History
This chapter describes how to interface programs that you write with the gnu History
Library. It should be considered a technical guide. For information on the interactive use
of gnu History, see Chapter 1 [Using History Interactively], page 1.
2.1 Introduction to History
Many programs read input from the user a line at a time. The gnu History library is able
to keep track of those lines, associate arbitrary data with each line, and utilize information
from previous lines in composing new ones.
The programmer using the History library has available functions for remembering lines
on a history list, associating arbitrary data with a line, removing lines from the list, searching
through the list for a line containing an arbitrary text string, and referencing any line in
the list directly. In addition, a history expansion function is available which provides for a
consistent user interface across diﬀerent programs.
The user using programs written with the History library has the beneﬁt of a consistent
user interface with a set of well-known commands for manipulating the text of previous
lines and using that text in new commands. The basic history manipulation commands are
similar to the history substitution provided by csh.
If the programmer desires, he can use the Readline library, which includes some history
manipulation by default, and has the added advantage of command line editing.
Before declaring any functions using any functionality the History library provides in
other code, an application writer should include the ﬁle  in any ﬁle
that uses the History library’s features. It supplies extern declarations for all of the library’s
public functions and variables, and declares all of the public data structures.
2.2 History Storage
The history list is an array of history entries. A history entry is declared as follows:
typedef void *histdata_t;
typedef struct _hist_entry {
char *line;
char *timestamp;
histdata_t data;
} HIST_ENTRY;
The history list itself might therefore be declared as
HIST_ENTRY **the_history_list;
The state of the History library is encapsulated into a single structure:
/*
* A structure used to pass around the current state of the history.
*/
typedef struct _hist_state {
HIST_ENTRY **entries; /* Pointer to the entries themselves. */
int offset;
/* The location pointer within this array. */
Chapter 2: Programming with GNU History
5
int length;
/* Number of elements within this array. */
int size;
/* Number of slots allocated to this array. */
int flags;
} HISTORY_STATE;
If the ﬂags member includes HS_STIFLED, the history has been stiﬂed.
2.3 History Functions
This section describes the calling sequence for the various functions exported by the gnu
History library.
2.3.1 Initializing History and State Management