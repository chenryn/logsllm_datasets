the global key ∆ and the keys for all the authenticated values,
that are sent to this functionality by A. S also receives B∗ ∈ Fpr
from A when emulating F p,r
by sending uniformly
random δi for each i ∈ Iin and di for the i-th multiplication
gate to adversary A.
(3) S executes steps 6–7 of the protocol as an honest prover, except
that sampling V ← Fpr and computing U := W −V ·∆ where W
is computed using ∆, B∗ and the keys received from A following
the protocol specification.
(4) In step 8 of the protocol, S computes kh (based on the keys sent
to F p,r
by A) and then sets mh := kh + ∆, where h is the
single output wire. Then, S sends mh to A.
Since {µi}, {νi} and A∗
1 are uniformly random and perfectly hidden
against the view of adversary A, we easily obtain that the view of
A simulated by S is distributed identically to its view in the real
protocol execution. This completes the proof.
□
shown in Figure 4, if we set p = 261 − 1 and
r = 1, then the computation of χi for i ∈ [t] is expensive (especially
In the protocol Π
ext-sVOLE
ext-sVOLE
p,r
ZK
for large t). We can replace χi for i ∈ [t] with independent uniform
coefficient χi for i ∈ [t] to obtain better computational efficiency.
In this case, the verifier can send a random seed in {0, 1}κ to the
prover, and then both parties compute χ1, . . . , χt using the seed
and a random oracle. Now, the soundness error is bounded by
q/2κ + 4/pr , where q is an upper bound of the number of random
oracle queries made by the adversary. 3 When using the random
oracle, the security is guaranteed in the computational sense.
p,r
ZK
Non-interactive online phase. In the online phase of our pro-
tocol Π
, the verifier only sends a random coefficient χ to the
prover. Thus, the communication cost is one field element per mul-
tiplication gate even without random oracle. But the online phase
needs communication of three rounds.
We can use the Fiat-Shamir heuristic to make the online phase
non-interactive at the cost of that the information-theoretic security
is degraded to the computation security. Specifically, both parties
can compute χ ∈ Fpr as H(d1, . . . , dt), where H : {0, 1}∗ → Fpr
is a cryptographic hash function modeled as a random oracle and
pr ≥ 2κ. In this case, the soundness error for the batch check of
multiplication gates together with the correctness of the single
output is now bounded by (qH + t + 3)/pr ≤ (qH + t + 3)/2κ,
where qH is an upper bound of the number of H queries made by
the adversary. When we set p = 2 and r = 128, we can obtain a
non-interactive online phase with a blazing-fast computation given
hardware-instruction support.
5 ZERO-KNOWLEDGE PROOF FOR
POLYNOMIAL SETS OVER ANY FIELD
Recall that we have explained the intuition of our ZK protocol for
polynomial sets in Section 3.2. Thus, we directly show the detailed
protocol in Figure 5. Similar to the circuit-based ZK protocol de-
scribed in Section 4.2, our polynomial-based ZK protocol is also
constant-round. In Section 5.1, we provide the formal security proof
of the polynomial-based ZK protocol. In Section 5.2, we also present
some practical applications of the polynomial-based ZK protocol,
including how to optimize the zero-knowledge proofs for proving
matrix multiplication, proving knowledge of a solution to an SIS
problem, proving integer multiplication over a ring and proving
the circuits with some level of weak uniformity.
Computing polynomial coefficients. In the ZK protocol shown
in Figure 5, prover P can compute the coefficients {Ai ,h}h∈[0,d−1]
of polynomial дi(x) for i ∈ [t] in the following generic way.
• P computes yi ,j := дi(αj) for j ∈ [d + 1], where α1, . . . , αd +1 are
any d + 1 different fixed points over extension field Fpr .
j∈[d +1] yi ,j · δj(x), where δj(x) =
is a fixed d-degree polynomial that can be precom-
• Then P computes дi(x) :=

puted in the preprocessing phase.
In a lot of practical applications, the polynomials {дi(x)} are usually
simple, and thus the coefficients can be computed efficiently without
the need of using the above Lagrange interpolation approach.
x−αk
αj−αk
k(cid:44)j
3This bound can be easily obtained by adapting the proof of Theorem 4.2 and computing
the probability that the adversary succeeds to guess the seed.
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2994Protocol Π
p ,r
polyZK
represented as fi =
Inputs: The prover P and verifier V hold t number of d-degree
polynomials f1, . . . , ft all over n variables. Each polynomial fi is
h∈[0,d] fi ,h where all terms in fi ,h have degree
h. P also holds a witness w ∈ Fn
p , such that fi(w) = 0 for all i ∈ [t].
Preprocessing phase: Both polynomials and witness are unknown.
, which returns ∆ ∈ Fpr to V.
(1) P and V send (init) to Fp ,r
ext-sVOLE
(2) P and V send (extend, n) to Fp ,r
, which returns authenti-
ext-sVOLE
cated values {[si]}i∈[n] to the parties.
(3) P and V also send (VOPE, d − 1) to Fp ,r
{A∗
h }h∈[0,d−1] to P, B∗ to V, such that
, which returns
h · ∆h = B∗.
ext-sVOLE
h∈[0,d−1] A∗
h∈[0,d] fi ,h(k1, . . . , kn) · ∆d−h .
Online phase: Now the polynomials and witness are known.
(4) For i ∈ [n], P sends δi := wi − si ∈ Fp to V, and both parties
compute [wi] := [si] + δi . Note that ki = mi + wi · ∆ for i ∈ [n].
(5) From i = 1 to t, for the i-th polynomial fi , two parties perform
the following:
• P defines a univariate d-degree polynomial over field Fpr as
h∈[0,d] fi ,h(m1 + w1 · x , . . . , mn + wn · x) · x d−h,
and computes the coefficients {Ai ,h }h∈[0,d] such that дi(x) =
h∈[0,d] Ai ,h · x h. Since Ai ,d = fi(w1, . . . , wn) = 0, дi(x)
h∈[0,d−1] Ai ,h ·
• V computes Bi :=
дi(x) =

can be written as
(6) Two parties perform the following to check that
(b) For all h ∈ [0, d−1], P computes Uh :=
(c) V computes W := 
W =
i∈[t] Ai ,h · χ i +A∗
i∈[t] Bi · χ i + B∗ and checks that
h∈[0,d−1] Uh · ∆h. If the check fails, V outputs false;
∆h = Bi for all i ∈ [t]:
(a) V samples χ ← Fpr and sends it to P.
h∈[0,d−1] Ai ,h · x h.
and sends it to V.
h
otherwise it outputs true.
Figure 5: Zero-knowledge protocol for polynomial satisfia-
bility over any field in the F p,r
ext-sVOLE-hybrid model.
ext-sVOLE
Computational complexity. In the F p,r
-hybrid model, the
computational cost of protocol Π
is dominated by polyno-
p,r
polyZK
mial evaluation (i.e., computing {Bi} and {Ai ,h}). We easily bound
the computational complexities of prover P and verifier V by
O(tdc + dn) and O(tc) respectively, where c is the maximum cost to
evaluate any polynomial on a single point, and O(dn) is the cost to
compute {mi +wi ·αj}i∈[n] for j ∈ [d +1]. Here, we assume that the
polynomial coefficients {Ai ,h}h∈[0,d] for i ∈ [t] are computed us-
ing the generic Lagrange interpolation approach described as above.
For many practical applications, the computational complexity of
the prover may be lower without using the generic approach. Let z
be the maximum number of terms in all t polynomials. Then we
have that c = O(dz), as each term in any polynomial has a degree
at most d. Therefore, the computational complexities of P and V
can be bounded by O(td
z + dn) and O(tdz), respectively.
2
5.1 Proof of Security
When both parties are honest, it is not hard to see that the verifier
will always output true with probability 1. Specifically, from ki =
mi + wi · ∆ for i ∈ [n] and the description in Section 3.2, we
h∈[0,d−1] Ai ,h · ∆h for all i ∈ [t]. Together with
have that Bi =

h∈[0,d−1] A∗
W = 
= 
= 
i∈[t]
i∈[t]
∗
h · ∆h = B∗, we obtain that the following holds:
(cid:16) 
Bi · χi + B
(cid:16)
Ai ,h · ∆h(cid:17) · χi + 
(cid:17) · ∆h = 
∗
h · ∆h
A
∗
Ai ,h · χi + A
h
h∈[0,d−1]
h∈[0,d−1]
Uh · ∆h .
h∈[0,d−1]
h∈[0,d−1]
i∈[t]
p,r
Theorem 5.1. Protocol Π
Thus, our protocol shown in Figure 5 achieves perfect completeness.
polyZK UC-realizes functionality FZK
that proves polynomial satisfiability in the F p,r
ext-sVOLE-hybrid model
with soundness error (d + t)/pr and information-theoretic security.
We defer the formal proof of the above theorem to Appendix C.
For the polynomial-based ZK protocol, we can also use the Fiat-
Shamir heuristic to make the online phase non-interactive at the
cost of assuring the security in the computational sense.
p
i∈[n] xi ·yi for two vectors x, y ∈ Fn
a polynomial f (x, y) =
5.2 Optimizing Practical Applications
In the following applications, for the sake of simplicity, we always
assume that pr ≈ 2κ as the Fiat-Shamir heuristic is assumed to be
implicitly used in the applications. For the interactive case, we can
also extend the applications to smaller extension fields, as long as
the soundness error is assured negligible in ρ. In this section, the
communication cost is computed in the sVOLE-hybrid model.4
Optimizing matrix multiplication. The prover wants to prove
that A · B = C, where A, B ∈ Fn×n
are two secret matrices and
C ∈ Fn×n
is a public matrix known by the verifier. Using the circuit-
p
based ZK protocol shown in Figure 4, this will need communication
of (2n
3) log p + 2κ bits.
2 + n
Using the polynomial-based ZK protocol described in Figure 5,
we can directly obtain a ZK protocol for inner product of two n-
length vectors with communication of 2n log p +2κ bits, by defining
p . The
communication complexity remains unchanged, even if the inner
product of t vector pairs needs to be proved. This immediately gives
us a ZK protocol for proving matrix multiplication with communi-
2 log p + 2κ bits, since a matrix multiplication can be
cation of 2n
2 vector pairs, where the commu-
written as the inner-product of n
2 log p bits is used to commit the entries in matrices
nication of 2n
A and B using sVOLE.
Proving solutions to lattice problems. Here, we assume the
prover has a binary vector s ∈ {0, 1}m and intends to prove that
A · s = t, with public matrix A ∈ Zn×m
q. Here
we assume that q is a prime. The SIS problem has been considered
in prior work such as [5, 48]. Our ZK protocol for polynomial sets
can be used to prove the statements more efficiently. To commit
to all input bits s1, . . . , sm, the ZK protocol takes m log q bits. Then
we need to show that 1) the prover indeed commits bits and that 2)
the above linear equation holds. All of the above can be modeled
as a set of m + n polynomials with degree at most 2. In particular,
we need to show that si · (si − 1) = s
i − si = 0 for all i ∈ [m] and
2
4The communication for generating sVOLE correlations is sublinear to the number of
resulting sVOLE correlations, using the recent LPN-based protocols [17, 41, 48, 49].
and vector t ∈ Zn
q
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2995that
(t −
j∈[m] ai ,j · sj − ti = 0 for i ∈ [n] where ai ,j is the entry in
the i-th row and j-th column of matrix A. Since the polynomial
degree is at most 2, the communication cost would be 2 elements
over the extension field, each of size roughly κ bits. Therefore, the
total communication cost is m log q + 2κ bits.
If the secret vector s is in [−B, B]m (with a small integer B)
instead of a binary vector, which has also been addressed by prior
work [14, 15, 26, 48], we would need a degree-(2B +1) polynomial to
prove that f (si) = 0 for all i ∈ [m] where f (x) = Πj∈[−B,B](x − j),
with the total communication cost of m log q + (2B + 1)κ bits.
In Section 6.2, we evaluate the concrete performance to demon-
strate that our polynomial-based ZK protocol significantly outper-
forms prior work for proving knowledge of solutions to SIS.
Optimizing integer operations over a ring. Arithmetic opera-
tions over a field may often be sufficient for some applications.
However, for applications where matching cleartext computation is
crucial, the statement to be proven may require native computation
over a ring Z2n such as Z232. In this case, one may naturally think
about ring operations. Here we explore an alternative approach.
Our idea is to view integer multiplication over Z2n as a set of n
polynomials that take 2n variables as input. In this case, the maxi-
2, since the Boolean circuit
mum degree for these polynomials is 8n
for integer multiplication has a depth 2 log n + 3 [21]. The com-
munication cost for proving a set of integer multiplications would
become linear to n, when the number of integer multiplications to
be proven is large. In particular, if there are t integer multiplications