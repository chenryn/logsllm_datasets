cannot be reused to activate the same or a different IC in
the future. Hence, the test facility is able to accomplish the
test process using ATPG tools with a key which is valid for
structural/functional test and it is not valid for any subsequent
activation. Additionally, the communication to/from IC is
secured using a side-channel protected cryptographic engine,
combined with a dynamic switching and inversion structure
that enhances the security of the chip against invasive and side-
channel attacks. We demonstrate that COMA provides two
useful means of secure communication to/from the untrusted
chip, one for added security, and one for supporting a higher
throughput. The proposed architecture is a comprehensive
solution for the key management of the obfuscated IPs, where
the challenges related to the activation of the IC and secure
communication to/from the IC are addressed at the same time.
However, as discussed earlier, it is not a universal solution and
would ﬁt within the context of IoT-based solutions or within
2.5D package-integrated solutions, as this solution requires
constant connectivity.
3 Proposed COMA Architecture
The primary goal of the COMA is to remove the need for
storing the obfuscation key (OK) on an untrusted chip while
securing the communication ﬂow used for activation of the
obfuscated circuit in the untrusted chip. The additional ben-
eﬁts of the proposed architecture are the implementation of
two new modes of 1) highly secure and 2) very high-speed
encrypted communication. We propose two variants of the
COMA architecture: The ﬁrst variant is designed for secur-
ing the activation of the obfuscated IP and communication
to/from an untrusted IC in 2.5D package-integrated architec-
m+ IK-KS(CUK)sign(m)m{m,sign(m)}KSIKKDpub(KS)IKKDpub(KS)KSsign(m)mKSCUKCUKOTP+compareTRNGKSKCpri(.)OTPKDpub(.)m-OTPKDpri(.)KCpub(.)OTP==m ?Chip+KDpub(KS)SoC DesignerUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 183Switching Network (CSN) and Reverse CSN (RCSN) are log-
arithmic routing and switching networks. They are capable of
permuting the order and possibly inverting the logic levels of
their primary inputs while these signals are being routed to dif-
ferent primary outputs. The RCSN is the exact inverse of the
CSN. Hence, passing a signal through CSN-RCSN (or RCSN-
CSN) will recover the original input. The switching and in-
version behavior of CSN-RCSN is conﬁgured using a True
Random Number (TRN). This TRN is generated in the trusted
chip to avoid any potential weakening/manipulating of the
TRNG. In addition, since the TRNG in COMA is equipped
with standard-statistical-tests applied post-fabrication, such
as Repetition-Count test and the Adaptive-Proportion test, as
described in NIST SP 800-90B [12], any attempt at weaken-
ingthe TRNG during regular operation (i.e. fault attack) can
be detected by continuously checking the output of a source
of entropy for any signs of a signiﬁcant decrease in entropy,
noise source failure, and hardware failure. By using TRN for
the CSN-RCSN conﬁguration, any signal passing through the
CSN is randomized, and then by passing through the RCSN
is recovered. Additional details are provided in section 3.3.1.
The untrusted chip unlock process in COMA is as follows:
Prior to each activation, the CSN and RCSN are conﬁgured
with the same TRN. Since the SK is a PUF-based key gen-
erated at the untrusted side, ﬁrst the SK must be securely
readout from untrusted chip. This is done by deploying public
key cryptography, the details of which are described in section
3.3.4. Then, the trusted chip encrypts the TRN using the SK
and sends it to the untrusted chip. To perform an activation,
as shown in Fig. 2, the OK is read in segments, denoted as
Partial Obfuscation Key (POK), and is passed through the
CSN and encryption on the trusted side and the decryption
and RCSN on the untrusted side. This process is repeated
every time the obfuscated circuit in the untrusted chip is to be
activated, each time using a different TRN for conﬁguring the
CSN-RCSN. Usage of a different TRN as the conﬁguration
input for the CSN-RCSN for each activation randomizes the
input data to Secret key crypto engine. Hence, by using a
different TRN for each activation, the obfuscation key (after
passing through CSN) is transformed into a one-time license,
denoted as Dynamic Activation License (DAL). Since the OK
is read and sent in segments (from trusted chip), the DAL
will be received (at untrusted chip) in segments, denoted as
Dynamic Partial Obfuscation Key (DPOK), shown in Fig. 2,
and is used as an input to RCSN. Passing DPOKs through
RCSN recovers the POKs, and concatenating the POKs will
generate the OK. Note that the DAL is only valid until the
TRN is changed. So, the DAL cannot be used to activate other
chips or the same chip at a later time.
In 2.5D-COMA, the untrusted chip(s) is used as an accel-
erator, and for safety reasons should not be able to directly
communicate to the outside world. Hence, all communica-
tion to/from the untrusted chip must go through the trusted
chip. In addition, it is possible that the computation, depend-
Figure 2: Proposed COMAs for (left) 2.5D and (right) IoT-
based/remote devices.
tures similar to the DARPA SPADE architecture [10] (denoted
by 2.5D-COMA). The second proposed architecture is de-
signed for protecting IoT-based or remotely activated/metered
devices (denoted by R-COMA). Fig. 2 captures the overall
architecture of two variants of the proposed COMAs.
3.1 2.5D-COMA: Protecting 2.5D package in-
tegrated system solutions
The DARPA SPADE project [10] explores solutions in which
an overall system is split-manufactured between two differ-
ent technologies, In this solution, a trusted IC which is con-
structed in an older yet secure technology is packaged with
an IC fabricated in an untrusted foundry in an advanced ge-
ometry. The purpose of this solution is to provide the best of
two worlds: the security of older yet trusted technology and
the scalability, power, and speed of the newer yet untrusted
technology. The 2.5D-COMA is designed to work with an
architecture similar to the DARPA SPADE architecture. The
proposed solution allows an entire or partial IP in an untrusted
chip to be obfuscated, while pushing the mechanism for un-
locking and secure activation of the untrusted chip out to a
trusted chip. In this solution, the trusted chip encapsulates the
sensitive information, veriﬁes the integrity of the untrusted
chip, performs sensitive logic monitoring, and controls the
activation of the untrusted chip. Also, the key to unlock the
obfuscated circuit changes per activation, details of which
will be explained shortly.
As shown in Fig. 2, the two variants of COMA contain
two main parts, the trusted side (green) and the untrusted side
(red). In both variants, the architectures of untrusted chips
are identical, and only the architectures of trusted sides are
different. In 2.5D-COMA, only the trusted chip is equipped
with a secure memory. The secure memory stores the Obfus-
cation Key (OK) and the Secret Key (SK) used for encrypted
communication between the trusted and untrusted chips. The
SK is generated using a PUF in the untrusted chip, thus it is
unique for each untrusted chip, and the untrusted chip does
not need a secure memory to store the SK. The Conﬁgurable
Untrusted ChipPOKCSNTRN MEMSecureSecret Key CryptoTrusted ChipRNGDPOKTRNSecret Key CryptoRNGPUFActivation Scan ChainRCSNUntrusted ChipModemDPOKTRNSecret Key CryptoRNGPUFSecure PUF ReadoutActivation Scan ChainRCSNDB(OK & SK) TRNAuthentication Server  Design HouseSKSecure PUF Readout184          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association(a) Double Cipher mode of Cryptography (DCC)
(b) Leaky Cipher mode of Cryptography (LCC)
Figure 3: Modes of Encrypted Communication in COMA
ing on the sensitivity of processed data, is divided between
the trusted and untrusted chips. Hence, there is a need for
constant communication between the trusted and untrusted
chips. The communication needed is sometimes for limited
but highly sensitive data, and sometimes for vast amounts of
less sensitive data. As illustrated in Fig. 3, the proposed archi-
tecture is designed to provide two hybrid means of encrypted
communication : (1) Double-Cipher Communication (DCC)
as ultra-secure communication, and (2) Leaky-Cipher Com-
munication (LCC) as ultra-fast communication mechanism.
3.1.1 Double-Cipher Communication (DCC)
As shown in Fig. 3(a), DCC is implemented by passing each
message through both CSN-RCSN and the secret key cryptog-
raphy engine, where the TRN used in CSN-RCSN is renewed
every U cycles. DCC provides the ultimate protection against
side-channel attacks. In DCC mode, two necessary require-
ments for mounting a side channel attack are eliminated. The
side channel attack aims to break the cryptography system by
analyzing the leaked side channel information for different
input patterns. Hence, (1) the degree of correlation between
the input and the leaked side-channel information, and (2) the
intensity of side-channel variation, are important. In COMA,
the attacker cannot control the input to the secret-key cryp-
tography. In addition, the input to the CSN is randomized
using a TRN and then passed to the secret-key cryptography,
removing the correlation between leaked side channel info
(from secret-key cryptography) and the original input to the
CSN. Additionally, the secret-key cryptography engine is side-
channel protected to pass a t-test [6]. So, the intensity and
variation in side-channel information is signiﬁcantly reduced,
making the DCC an extremely difﬁcult attack target.
3.1.2 Leaky-Cipher Communication (LCC)
LCC is a fast and energy efﬁcient mode of communication
between the trusted (or remote device) and the untrusted chip.
As illustrated in Fig. 3(b), in this protocol, the CSN-RCSN
pair is used for exchanging data. The secret key cryptogra-
phy engine is used to transmit a TRN from one chip to the
other. Since the throughput of TRNG is the bottleneck point
compared to the performance of CSN-RCSN, the TRNG is
used as a seed generator to the PRNG (which offers higher
performance) on both sides, Hence, in LCC mode, PRNG is
used to conﬁgure the CSN-RCSN to avoid any performance
degradation on transmitting data. For U consecutive cycles,
the PRNG is kept idle allowing the CSN to use the same
PRNG output for U cycles. It not only reduces the power
consumption of PRNG and TRNG, it also provides faster
communication in LCC mode. However, using this model
of communication is prone to algebraic and SAT attacks as
each communicated message leaks some information about
the TRN used to conﬁgure the CSN-RCSN pair. If an attacker
can control the message and observe the output of the CSN,
each communicated message leaks some information about
the key, reducing its security. Extracting the key from such
observations is possible by various attack models, including
Satisﬁability attacks. Hence, an attacker with enough time
and enough traces could extract the TRN and retrieve the
communicated messages. Preventing such attacks poses a
minimum limit to U (the update frequency of the PRNG). U
should be small to prevent SAT and other trace-based learning
or analysis attacks, but large enough to be energy efﬁcient.
In Section 5, we deploy a SAT attack against LCC and will
further elaborate on the required TRN update frequency.
3.2 R-COMA: for Protecting IoT devices
The R-COMA architecture in the untrusted chip is identi-
cal to that of 2.5D-COMA. However, the trusted chip is re-
placed with a remote key management service. The R-COMA
provides a mechanism for an IP owner to remotely activate
parts or entire functionality of the hardware. Similar to 2.5D-
COMA, the DAL is different from chip to chip and from
activation to activation. In R-COMA, the obfuscation unlock
key is stored in a central database, while the CSN, the TRNG
for conﬁguring CSN-RCSN, and the secret key cryptography
engine are implemented in software.
In R-COMA, an authentication server (AS) ﬁrst securely
receives the PUF-based SK from the untrusted chip. Then, it
generates a TRN and sends it to the untrusted chip for RCSN
conﬁguration. Then, the AS starts sending the obfuscation
key (OK). For the activation phase, the communication is dou-
ble encrypted and authenticated using the CSN-RCSN and
side-channel protected cryptography engine. Each COMA-
protected device needs to be registered with the AS to receive
the obfuscation key. The registration is done using the PUF-
ID of the untrusted chip. Hence, the PUF is used for both
authentication and generation of the secret key for communi-
cation. In R-COMA, the generation of DAL is granted after
PUF authentication, and is based on the generated TRN, and
the stored OK, which is generated at design time. The genera-
tion of DAL is algorithmic and takes linear time.
messageTRNRNGSecure MEMPlaintext (TRN)SKTRNPUFSecure Design HouseSKmessageTrusted ChipUntrusted ChipPlaintext (TRN)CSNSecret Key CryptoSecret Key CryptoRCSNPUFReadoutmessageTRNRNGSecure MEMSecret Key CryptoPlaintext (TRN)SKTRNSecret Key CryptoPUFDesign HouseSKmessageTrusted ChipUntrusted ChipPlaintext (TRN)CSNRCSNSecure PUFReadoutUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 185Figure 4: 2.5D-COMA Architecture.
(a)
(b)
Figure 5: Logarithmic Network (a) Omega-based Blocking,
(b) LOG8,1,1 near Non-blocking.
Implementation Detail of COMA
3.3
Fig. 4 captures the overall architecture of COMA and relation
and connectivity of its macros. As discussed, COMA sup-
ports both key-management and secure data communication.
Based on the selected mode of communication (LCC/DCC),
the message passes through {CSN → RCSN} or {CSN →
encryption → decryption → RCSN}. RNG, which contains
both TRNG and PRNG, is used in both sides. In the trusted
chip, RNG is used for implementing side-channel protected
cryptography engine, as well as generating the conﬁguration
of the CSN-RCSN (TRN). In the untrusted side, it is used
only for implementing the side-channel protected cryptogra-
phy engine. Finally, PUF is engaged in the untrusted chip for
both unique IC authentication and for generation of the secret
key for encryption. As shown in Fig. 4, all modules employ
an AXI-stream interface to maximize the simplicity of the
overall design, and minimize the overhead incurred by the
controller of the top module in each side. The description of
the behavior of each macro in COMA is provided next:
3.3.1 Conﬁgurable Switching Network (CSN)
The CSN is a logarithmic routing network that could route
the signals at its input pins to its output pins while permuting
their order and possibly inverting their logic levels based on
its conﬁguration. Fig. 5(a) captures a simple implementation
of an 8-by-8 CSN using OMEGA [19] network. The network
is constructed using routing elements, denoted as Re-Routing
Blocks (RRB). Each RRB is able to possibly invert and route
each of the input signals to each of its outputs. The number of
RRBs needed to implement this simple CSN for N inputs (N
is a power of 2) is simply N/2∗ logN. Each CSN should be
paired with an RCSN. The RCSN, is simply constructed by
ﬂipping the input/output pins of RRB, and treating the CSN
input pins as its output pins and vice versa.
The OMEGA network along with many other networks
of such nature (Butterﬂy, etc.) are blocking networks [19],
in which we cannot produce all permutations of input at the
network’s output pins. This limitation signiﬁcantly reduces
the ability of a CSN to randomize its input. Also, we will
show that a blocking CSN can be easily broken by a SAT
attack within few iterations.
Being a blocking or a non-blocking CSN depends on the
number of stages in CSN. Since no two paths in an RRB
are allowed to use the same link to form a connection, for
a speciﬁc number of RRB columns, only a limited number
of permutations is feasible. However, adding extra stages
could transform a blocking CSN into a strictly non-blocking
CSN. Using a strictly non-blocking CSN not only improves