的。空间程调们自的以文件
以同步。
文件文件进实上对文件文件
。相文件 inode（ inode 的进
。 inode  (inode number)写 i-number 或 ino。
inode 存文件的的时间、、、以及文
件的的 – 文件。 inode  Unix 文件上实
理对 Linux 内的的实。
1.4.3 目录和链接
 inode 文件然的（的
。们文件文件。提文件
时的的将读的 inode 进映射。 inode 的
对（link。映射理上的式以单的、
或何式映射内对的文件实
理。上以何的文件的同
存 inode 的映射。内映射将文件 inode。
空间的文件时内文件的
然文件。内文件 inode 然 inode 
对的 inode。 inode 文件相的文件
上的存。
上 /。我们的
上。内给的文件
同文件相实上们的
inode。内的能的的 inode。以
的。 Unix 的
文件 /home/blackbeard/landscaping.txt.
内的时上的（directory
– 10 –
 1 
entry内 dentry的 inode。的子内
/  home 的 inode然 blackbeard 的 inode进
 landscaping.txt 的 inode。操作程或。内
存（ dentry cache存的提时间性
。时间性我们将。
的（fully qualified的绝对
。的相们相对（
todo/plunder)。相对。相对时内的工作
进。工作内 todo
内 plunder 的 inode。
然以的文件内操作文件
操作们。相们的调操作们
调进操作。
空间内的理进操作单的能
文件。
1.4.4 硬链接
上何内及同
inode 上。实上以的。我们将同映射同 indoe 
的。
的文件相同的。
以同以同的内
以将的上。 /home/bluebeard/map.txt 
/home/blackbeard/treasure.txt 以的 inode 上。
的文件将 unlink 操作操作将文件
inode 的映射。然 Linux 文件能
 unlink 操作 inode 以及的。文件的
方存? 文件的
文件 inode  (link count) 文件
文件的。将 1。 0 的时
inode 的真的文件。
– 11 –
 1 
1.4.5 符号链接
 inode 自文件何以能文件
。文件 Unix 实（
 symlinks。
上文件 symlink 自的 inode 
文件的。以何方同文
件上的文件存的文件。存文件的
。
相更。效的
文件的文件。的
或进文件的文件何。的
的然的。
相的性。的实
操作出文件。操作
的调。作文件的方式文件内
时性的的。
1.4.6 特殊文件
文件以文件方式示的内对。以 Unix 
同的文件 Linux 的文件设备文件、设备文
件、 Unix 。文件将文件的方
文件理的实。 Linux 提文件的调。
对 Unix 的设备进设备文件实设备文件的
文件的文件。设备文件以、读写以
空间程操作上的（理的设备。 Unix 的设备
设备设备。设备自的设备文件。
设备同性。设备程将写
空间程写的进读。的
设备。”peg”程将设备读 p然 e
 g。更的读时设备 end-of-file（EOF。读
或以何的读。设备设备文件 (character
– 12 –
 1 
device file) 进。
相设备同以的方式进。设备将
映射的设备上空间以自的以何的
何以读 12 7 然读 12。设备存设
备、、、 CD-ROM 存的设备们设备
文件 (block device files) 进。
（ FIFOs进出的以文件
的进程间 (IPC) 文件进。将
程的出以的方式给程程的。们
调内存何文件存。
文件进。 FIFO 文件相的进程以
文件进。
的文件。进程间的
式同进程进同同以。实
上程的。们出 Unix 
进的式。相上的
对的 Unix 文件上的文
件进文件文件。
1.4.7 文件系统和名字空间
同的 Unix  Linux 提的文件的
空间。操作将的空间。
上的文件能 A:\plank.jpg 文件进 C:\。 Unix
同上的文件 /media/floppy/plank.jpg 或 /home/captain/stuff/-
plank.jpg 的文件同空间的。
 Unix 的空间的。
文件以的文件的集。文件能
的文件的空间的。操作（mounting
 (unmounting)。文件空间的
。文件的以。 CD
 /media/cdrom然以 CD 上的文件的
。的文件空间的 /文件。 Linux
– 13 –
 1 
文件。的的文件
。
文件存理上的（存上同时 Linux
存内存上的文件的文件。理文件
  存    CD、 、 存 或      存  设 备。    设 备 
的们以操作的文件。 Linux 
的文件 (的文件)文
件（media-specific filesystems（ ISO9660文件（NFS原
文件（ext3 Unix 的文件（XFS以及 Unix 文件
（FAT。
设备小单设备的理单。
2 的 512 。设备或更小的单
。的 I/O 操作或上。
同文件小的单文件的
对理的 2 的小的。
的小小页的小（小的内存理单件
件。小 512B 1KB  4KB。
的 Unix 单空间上的进程
。 Linux 进程的空间进程
文件的。子进程进程的
空间进程以的自
的空间。
1.4.8 进程
文件 Unix 的进程文件。进程
的的、存的、的程。进程
、、以及的。
进程周。内能
的式（Linux 的式 ELF以。
式段。段性内存的性
。段内的将同相同的同
的的。
– 14 –
 1 
的段段段 bss 段。段
读读。段的
的 C 读写的。 bss 段的
 C  C 的 0上的
存 0。相以单的 bss 段的内
将映射 0 页（ 0 的内存页进内存的段性能们设
 bss 段。 block started by symbol或 block
storage segment 的写。 ELF 的段绝对段（absolut
section（段（。
进程内理的进程的
操作能调。时、文件
件进程。进程的进程相的存
内进程的进程。
进程的。 Linux 内式内存给进
程提处理内存的。进程的进程
。给的进程的进程调
。将的新进进程调将的处理
进程进程。的进程的
性空间内存。内存页调内
进程存上进程操作自的空间。内
处理的件理操作能理
的进程。
1.4.9 线程
进程或程（程程进程的
单。程进程的。
进程程们单程的（single-thread
程的进程程的（multithreaded。上 Unix 
、进程时间、的进程对程
的。以 Unix 程单程。
程（同程上的进程存)、处
理、的（处理的。进程的
– 15 –
 1 
程。
Linux 内实的程们然的（
空间进程。空间 Linux  POSIX1003.1c
实程（pthread。 Linux 程实的 Native POSIX Threading Li-
brary（NPTL glibc 的。
1.4.10 进程体系
进程的即进程 ID（pid。进程的
pid  1进程新的的 pid。
 Linux 进程的的进程。进
程以进程 init 进程 ( init（8程) 。新进程
fork（调。 fork（调进程原进程进程新进
程子进程。进程进程进程。进程
子进程内将 init 进程的进程。
进程即。相内将内存存
进程的内进程进程的进程
。进程的的子进程子进程的。
进程进程的进程 (zombie)。 init 进
程的子进程的子进程处。
1.4.11 用户和组
Linux 进。的
ID（uid。进程 ID 进程的
进程的真实 uid(real uid)。 Linux 内 uid 的。
 id 自或。们
对的 id 存 /etc/passwd 程将映射相的 uid 上。
的程 login(1) 程提。提的
 login(1) 程将 /etc/passwd  shell(login
shell)将 id 作进程的 uid。子进程进程的 uid。
uid 0 超 root 的 id。超何的
 root 进程的 uid。 login(1) 的超理。
真实 UID(real uid) 进程效 UID(effective uid)
– 16 –
 1 
 uid(saved uid) 文件 uid(filesystem uid)。真实 UID(real uid) 进
程的效 UID(effective uid) 以进程的
uid(saved uid) 存原的效 UID(effective uid)的将
效 UID(effective uid) 。文件 uid 效 UID(effective uid) 相
文件的。
属或 /etc/passwd 的
（primary group或（login group能 /etc/group 
。   进 程        ID(gid)    真 实 gid(real gid) 效
gid(effective gid) gid(saved gid) 以及文件 gid(filesystem gid)。进程
。
进程满时能进操作。的
Unix 的原单 uid  0 的进程以的的进程
。 Linux 更效率的的单
的方式内进更的设。
1.4.12 权限
Linux 上的文件 Unix 。
文件属以及集。
、属以及对文件进读、写的。对
 9 。文件存文件的 indoe 。
对文件然的们读文件写文件
文件的。然文件实读写的内文件自
文件上的读写文件的文件上
。的读的内出写新的
进。 1-1 出 9 们
的 8 进（的 9 示方式文（ ls 示的对的
。 1-1
Bit Octal value Text value Corresponding permission
8 400 r-------- Owner may read
7 200 -w------- Owner may write
6 100 --x------ Owner may execute
– 17 –
 1 
5 040 ---r----- Group may read
4 020 ----w---- Group may write
3 010 -----x--- Group may execute
2 004 ------r-- Everyone else may read
1 002 -------w- Everyone else may write
0 001 --------x Everyone else may execute
 Unix 的 Linux （ACLs ACLs 更
、及理性存的。
1.4.13 信号
单异步能内进程能
进程进程或进程给自。进程件段
或 Ctrl+C。
Linux 内实 30 （实的
文示。 SIGHUP 示 i386 上
的 1.
 SIGKILL（进程 SIGSTOP（进程进程能
的进。们以的处理操作能进
程、内存（coredump、进程或的
操作。进程以式的或处理。
将处理。处理将写的处理程将
时处理处理程将程给
原的程的处。
1.4.14 进程间通讯
进程的件操作的工作
。 Linux 内实的 Unix 的进程间（IPC System V 
POSIX 同的以及 Linux 自的。
Linux 的进程间
内存空间（Futexes。
– 18 –
 1 
1.4.15 头文件
Linux 程离的文件。内 glibc 程提
文件。文件 C （,以及 Unix 的献（
。
1.4.16 错误处理
处理的。程
的示的 errno 。 glibc 对调
的 errno 提。提及的。
的（ -1调
的。调提的原
 errno 的原。
extern int errno;
erron 的 errno 设示（ -1时间效, 
何的以。
errno 以读写的（lvalue。 errno 的
的文对。处理 #define 同将 errno 映射相的
上。处理 EACCESS  1示 1-2 上
相的文。
– 19 –
 1 
Preprocessor define Description
E2BIG
EACCESS
EAGAIN
EBADF
文件
EBUSY
设备或
ECHILD
子进程
EDOM
内
EEXIST
文件存
EFAULT
EFBIG
文件
EINTR
调
EINVAL
效
EIO
I/O 
EISDIR
EMFILE
文件
EMLINK
ENFILE
文件出
ENODEV
设备
ENOENT
文件或
ENOEXEC
式
ENOMEM
内存
ENOSPC
设备空间
ENOTDIR
ENOTTY
理 I/O 操作
ENXIO
设备或
EPERM
操作
EPIPE
ERANGE
EROFS
读文件
ESPIPE
ESRCH
进程
ETXTBSY
文文件
EXDEV
文件
– 20 –
 1 
C 提将 errno 对的文。
时的处理操作以处理
errno 进处理。
的 perror():
#include 
void perror(const char *str);
 stderr（出出以 str 的
间然 errno 的的。出更
的的
if (close (fd) == -1)
perror (”close”);
C 提 streeor()  strerror r(), 原
#include 
char * strerror (int errnum);
#include 
int strerror_r(int errnum, char *buf, size_t len);
 errnum 的的。能程
以的 perror()  streeror() 。方
程 (thread-safe) 的。
strerror r() 程的 buf 的 len 的写
。 streeror r() 时 0时 -1的
时设 errno。
对的内的的。
 errno 调设 0调进（真
时 0 。
errno = 0;
arg = strtoul (buf, NULL, 0);
– 21 –
 1 
if (errno)
perror (”strtoul”);
 errno 时的调以 errno。
以的
if (fsync (fd) == -1) {
printf (stderr, ”fsync failed!\n”);
if (errno == EIO)
fprintf (stderr, ”I/O error on %d!\n”, fd);
}
调 errno 的存
if (fsync (fd) == -1) {
int err = errno;
fprintf (stderr, ”fsync failed: \n”, strerror
(errno));
if (err == EIO) {
/* if the error is I/O-related, jump ship */
fprintf (stderr, ”I/O error on %d!\n”, fd);