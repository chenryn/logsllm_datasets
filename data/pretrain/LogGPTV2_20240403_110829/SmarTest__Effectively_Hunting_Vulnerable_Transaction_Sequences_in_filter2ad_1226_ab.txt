and understand the bug.
SMARTEST is able to generate such a vulnerable transac-
tion sequence automatically. It reports the scenario described
above with concrete argument values of each transaction and
automatically demonstrates that following the scenario indeed
causes an integer overﬂow in a real environment (Figure 1).
A few existing tools (e.g. MYTHRIL [3] and MANTI-
CORE [30]) support generating transaction sequences but they
are unsatisfactory; they fail to ﬁnd a vulnerable sequence for
demonstrating the bug at line 32 in this medium-sized con-
tract (404 lines) even after 3 hours. SMARTEST addresses this
performance issue of symbolic executors with a novel lan-
guage model-guided symbolic execution. Other existing tools
(e.g., [6,24,28,36,37]) do not help here, too. For example, ex-
isting safety veriﬁers such as SMTCHECKER [6], ZEUS [24],
and VERISMART [36] or bug-ﬁnders such as OYENTE [28]
and OSIRIS [37] do not support producing concrete scenarios;
they just point out potentially vulnerable locations without
any trace information. As a result, bug triage with these tools
is time-consuming and error-prone; users should manually
analyze reported warnings to decide whether the warnings are
true positives or not and, if they are true, to understand how
they happen in what situations. SMARTEST aims to reduce
this burden on the tool users.
We remark that, in addition to reporting the ﬂaw at line 32
by overﬂow detection, SMARTEST can directly report that
the transferFrom function does not decrease the agent’s
allowance properly, by producing the same transaction se-
quence with different argument values. For example, the
same sequence with V2=1 and V3=1 can demonstrate the log-
ical ﬂaw, where the addition at line 32 does not overﬂow.
SMARTEST supports this feature with rules (Appendix C) for
detecting violations of ERC20 standard [2].
Example 2. Figure 3 shows a simpliﬁed version of the Goal
token contract.3 There are four global state variables in the
contract, where owner denotes the owner of the contract, and
balance, totalSupply, and allowance are variables that
are similar to those in the previous example (Figure 2).
The constructor sets totalSupply to 0 and initializes the
owner (owner) to be the sender of the initial transaction
(msg.sender). The function mintToken allows owner to
30x7b69b78cc7fee48202c208609ae6d1f78ce42e13
USENIX Association
30th USENIX Security Symposium    1363
issue a designated amount (amount) of tokens. The func-
tion approve is the same as the one in the previous exam-
ple. The function burnFrom allows the transaction sender
(msg.sender) to decrease the balance (balance[from]) of
the original token holder (from), where totalSupply and
allowance[from][msg.sender] are equally decreased.
This contract has three integer over/underﬂow bugs (lines
15, 16, and 31) where ﬁnding vulnerable transaction se-
quences for them is nontrivial. Understanding how the in-
teger underﬂow at line 31 occurs is particularly tricky, al-
though the existence of the bug seems apparent as there are
no explicit guard statements (e.g. require (totalSupply
>= value)) to prevent it from happening. For example, sim-
ply sending a transaction like burnFrom (A, 1) after de-
ployment fails to trigger the bug, because all balances and
allowances are initially zeros and therefore the transaction is
aborted by the statement at line 27. To demonstrate the bug,
we need to generate a transaction sequence of length at least
4, excluding an initial transaction (i.e. call to the constructor
for deployment). For example, the bug can be triggered by
the following scenario:
1. mintToken(A,V1) with msg.sender = owner
2. approve(C,V2) with msg.sender = B
3. mintToken(B,V3) with msg.sender = owner
4. burnFrom(B,V4) with msg.sender = C
where A, B and C are some account addresses, and V1–
V4 are crafted integer values, e.g., V1=0x800...00, V2=10,
V3=0x800...01, and V4=10. What is tricky in this scenario
is that, in order to trigger the integer underﬂow at line 31, a
series of transactions must ﬁrst conspire to exploit another
bug in the contract (the integer overﬂow at line 16). Note
that the ﬁrst and third transactions cause totalSupply to
overﬂow at line 16 and have an integer value at high risk
of underﬂow; in the scenario above, totalSupply becomes
1 (=0x800...00+0x800...01). The second transaction is
required for the last transaction to pass the guard statement
at line 28. Finally, invoking burnFrom is able to cause the
desired underﬂow bug at line 31.
SMARTEST automatically generates the above transaction
sequence and helps to diagnose and ﬁx the root cause of the
bug; to avoid the underﬂow at line 31, it is enough to in-
sert a guard statement require (totalSupply + amount
>= totalSupply) at the entry of the mintToken for pre-
venting the overﬂow at line 16, without any modiﬁcations
in the burnFrom. By contrast, existing tools do not help in
this aspect. As mentioned earlier, most tools (e.g. [6, 24, 28,
36, 37]) are fundamentally improper for generating vulner-
able transaction sequences. Two symbolic execution tools,
MYTHRIL [3] and MANTICORE [30], are ineffective too in
this case; they fail to produce a sequence in 3 hours even
when we hint that the maximum search depth is 4.
3 Approach
In this section, we describe our approach in detail. Section 3.1
describes the basic symbolic execution algorithm for discov-
ering vulnerable transactions. Section 3.2 explains how to
guide the symbolic execution with a language model. We use
Figure 4 as a running example.
Language. We formalize our approach for a core subset of
Solidity [4], which is deﬁned by the following grammar [36]:
c ∈ C ::= G∗ F∗,
a ∈ A ::= x := E | x[y] := E | assume(B) | assertl(B)
s ∈ S ::= A | if B S1 S2 | while B S | S1;S2
F ::= f (x){S}
A contract C is a sequence of global variable declarations
(G∗) followed by a sequence of function deﬁnitions (F∗).
A function is comprised of a function name ( f ), a formal
parameter (x), and a body statement (S). We denote the name
of a constructor function by f0. A statement S is an atomic
statement A, an if-statement, a while-loop, or a sequence. An
atomic statement A is an assignment to either a variable (x :=
E) or an array (or a mapping in Solidity) element (x[y] := E),
an assume statement, or an assert statement. E and B are usual
arithmetic and boolean expressions, respectively. We assume
E evaluates to an unsigned 256-bit integer.
In our language, assume statements are used to model guard
expressions (i.e. B in if-statements, while-loops, or require
statements in Solidity) when generating paths in Section 3.1.
On the other hand, assert statements do not affect program
semantics; they express safety properties to be veriﬁed or
refuted. We assume every safety condition that needs to be
checked is expressed as an assert statement. Note that users of
SMARTEST do not need to write safety conditions for check-
ing common security vulnerabilities (e.g., integer overﬂows),
because assertions that express the safety conditions are au-
tomatically inserted in the preprocessing step of SMARTEST.
For example, when we want to check whether a contract con-
tains integer overﬂow vulnerabilities, given an assignment
x := y + z, we assume an assertion assert(y + z >= y) is in-
serted right before the assignment. Custom safety conditions
can be provided using assert statements in Solidity. We as-
sume every assert statement is annotated with a unique label
l, which serves as an identiﬁer for each assertion. Let L be
the set of all labels in a program. We assume all functions
have public or external visibilities (i.e., callable from out-
side). We assume functions that cannot be called from outside
(i.e., internal or private functions) are inlined at each call
site. We also assume all variables have primitive types (e.g.
uint) or mapping types (e.g. mapping(address => uint)).
These assumptions are for presentation brevity; our imple-
mentation supports most of the features in Solidity.
Transaction Sequence. Given a function f (x){S} ∈ F, we
say ( f ,x,a) is a function path, where a ∈ A∗ is a sequence of
atomic statements from the entry to the exit of the function
(we assume the body S of the function is transformed into
1364    30th USENIX Security Symposium
USENIX Association
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
contract Example {
bool flag ;
uint x;
constructor () public { }
function setX (uint y) public returns {
x = y;
}
function setFlag (bool b) public returns {
flag = b;
}
function incX () public returns {
if ( flag ) {
assert (x +1 >= x); // goal : disprove the assertion
x = x +1;
}
}
}
Figure 4: A running example.
a set of atomic statement sequences [8]). Let P be the set
of all function paths in a given contract c ∈ C. We deﬁne a
transaction t ∈ T to be a four-tuple:
t = (id, f ,x,a)
which is a function path augmented with a transaction identi-
ﬁer id. We note that multiple transactions can be generated
from a single function because the function may have multi-
ple paths (e.g., the incX function in Figure 4 has two paths).
We write t0 for an initial transaction, i.e., a transaction whose
second component (function name) is the name of a construc-
tor ( f0). A transaction sequence (t0,t1, . . . ,tn) ∈ T∗ is a series
of transactions that start from an initial transaction. We say
a transaction sequence (t0,t1, . . . ,tn) is vulnerable when the
function called by the last transaction tn contains an assertion
(i.e., safety condition) that can be violated along the sequence.
Goal. In this paper, we tackle the problem of ﬁnding as many
vulnerable transaction sequences as possible with concrete
argument values for the parameters of involved transactions.
3.1 Basic Symbolic Execution
Algorithm 1 shows the overall symbolic execution algorithm.
The input is a Solidity smart contract c, and the output is a
report that shows a vulnerable transaction sequence disprov-
ing the safety condition of each assertion in c. The algorithm
consists of a preparation step (lines 1–4) and a main analysis
phase (lines 5–16).
To avoid generating function paths indeﬁnitely, we ﬁrst
unroll all loops m times and inline each function into its call
site up to n nested calls (line 1). From the resulting contract c,
we collect function paths in c until up to o paths are gathered
for each function in c (line 2). In the current implementa-
tion, we set m, n, and o to 2, 3, and 50, respectively. The
algorithm initializes the workset W with initial transactions
Algorithm 1 Our Symbolic Execution Procedure for Finding
Vulnerable Transaction Sequences
Input: A Solidity smart contract c
Output: A vulnerability report R
1: Unroll loops and inline function calls in c
2: P ← The set of function paths in c
3: W ← {(id, f0,x,a) | ( f0,x,a) ∈ P, new id}
4: R ← λl.⊥
5: repeat
6:
7:
8:
9:
10:
11:
12:
13:
14:
s ← argminw∈W cost(w)
W ← W \{s}
(State,Π) ← GENERATEVC(s)
for each (l,VC) ∈ Π do
(cid:46) l is not yet falsiﬁed
if SAT(VC) then R ← [l (cid:55)→ (s, model(VC))]
end for
if SAT(State) or Solver timeout then
W ← W ∪{s· (id, f ,x,a) | ( f ,x,a) ∈ P,
if R(l) = ⊥ then
(cid:46) s = t0,t1, . . . ,tn
f (cid:54)= f0, new id}
end if
15:
16: until W = /0 or ∀l. R(l) (cid:54)= ⊥ or timeout
17: return R
(line 3). During the algorithm, the workset W keeps candidate
transaction sequences to be explored. At line 4, the algorithm
also initializes the report R : L → T∗ × Model, i.e., mapping
from assertion labels to vulnerable transaction sequences with
error-triggering input values (models), where λl.⊥ (line 4)
means that no vulnerable transaction sequences are found yet
for any assertions.
The algorithm enters the loop at lines 5–16, which itera-
tively searches for vulnerable transaction sequences. The algo-
rithm picks a candidate transaction sequence s = t0,t1, . . . ,tn
with the least cost (line 6) and remove it from W (line 7),
where t0 is an initial transaction. At the moment, given
a sequence s, we assume the cost function is deﬁned as
cost(t0,t1, . . . ,tn) = n, which outputs the length of the trans-
action sequence. That is, the current cost function simply
prioritizes short transaction sequences. This cost function will
be replaced by the language model-guided cost function in
Section 3.2.
After picking the candidate s, we perform symbolic ex-
ecution over s to obtain a state condition (State) for s and
veriﬁcation conditions (VCs) (line 8), where Π is a set of
pairs of an assertion label l and the VC associated with l. The
VCs are conditions that must be checked to see whether s is
a vulnerable sequence with respect to some assertions; the
satisﬁability of the VCs implies the existence of vulnerable
transaction sequences. We will explain the VC generation
procedure (GENERATEVC) shortly in Section 3.1.1. We in-
vestigate each of the VCs through the inner loop at lines 9–12.
If a vulnerable transaction sequence with respect to an as-
sertion annotated with l is already found (i.e., R(l) (cid:54)= ⊥), we
USENIX Association
30th USENIX Security Symposium    1365
move on to the next VC (i.e., we do not attempt to disprove as-
sertions whose safety conditions are already falsiﬁed by other
transaction sequences). For assertions that are not disproved
yet (i.e., R(l) = ⊥, line 10), we check the satisﬁability of the
VC by invoking an off-the-shelf SMT solver (we use Z3 [13]).
If satisﬁable (i.e., s is a vulnerable transaction sequence), we
update the report R by mapping l to s with a corresponding
satisfying model (line 11).
Finally, if the state condition State is satisﬁable (i.e., s is a
feasible transaction sequence in concrete execution) or a pre-
determined solver timeout expires (line 13), we generate a set
of new transaction sequences by appending new transactions
to the current sequence s, and add the set into the workset
W (line 14). Otherwise (i.e., State is unsatisﬁable), we do
not collect new transaction sequences, because further explo-
rations of unsatisﬁable states will not produce satisﬁable VCs.
The loop repeats until the workset becomes empty, vulnerable
sequences for all assertions are found, or a given time limit is
reached. At line 17, the symbolic execution procedure ﬁnally
returns R, from which we can obtain a vulnerable transaction
sequence (with concrete input values) for each potentially
violated assertion.
3.1.1 VC Generation
We describe the GENERATEVC procedure for generating veri-
ﬁcation conditions, which symbolically executes a transaction
sequence and derives a condition to be vulnerable. We ﬁrst
deﬁne symbolic execution for atomic statements and extend
it to transactions and their sequences.
Let FOL be the set of the ﬁrst-order formulas in the com-
bined theory of ﬁxed-sized bitvectors and arrays with exten-
tionality. Let sp : A → FOL×℘(L× FOL) → FOL×℘(L×
FOL) be the strongest postcondition predicate transformer [8],
which symbolically executes each atomic statement as fol-
lows:
sp(x := e)(φ,Π) = (φ[x(cid:48)/x]∧ (x = e[x(cid:48)/x])◦,Π)
sp(x[y] := e)(φ,Π) = (φ[x(cid:48)/x]∧ (x = x(cid:48)(cid:104)y (cid:67) e[x(cid:48)/x](cid:105))◦,Π)
sp(assume(e))(φ,Π) = (φ∧ e•,Π)
sp(assertl(e))(φ,Π) = (φ,{(l,φ∧¬e)}∪ Π)
where φ[x(cid:48)/x] and e[x(cid:48)/x] denote the formula φ and expression
e, respectively, where x is replaced by x(cid:48). The deﬁnition is
mostly standard; it transforms a precondition φ into a post-
condition with respect to a given atomic statement, while
accumulating Π (pairs of assertion labels and corresponding
VCs). In the assignment cases (x := e or x[y] := e), a primed
variable (e.g., x(cid:48)) represents the previous state of an unprimed
variable (e.g., x) before processing the assignments. We write