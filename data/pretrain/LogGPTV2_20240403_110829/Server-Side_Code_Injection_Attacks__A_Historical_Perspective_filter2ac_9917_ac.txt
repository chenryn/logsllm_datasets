the circles is proportional to the logarithm of the number of attacks observed in
a given network on a given day. By just looking at the volume of attacks in the
diﬀerent networks, we can see that the their distribution is not constant over the
IP space: certain sensors receive considerably more attacks on a daily basis than
others. We believe this diversity in attack volume to be the culprit for the appar-
ent decrease in attacks observed in Figures 1 and 2. In May 2011, the SGNET
deployment was upgraded to a new version, but the rollout of new sensors was
slowed down to tackle potential problems or bugs. As a consequence to this, the
20082009201020112012time6981848595122128129130131133134136138139141152157158160161192193194195203209212217/8 networkLow prevalenceof packingHigh prevalenceof packing11
deployment has lost visibility on several “high-volume networks” consequently
lowering the average number of attacks per honeypot sensor.
Attack complexity. Figure 3 also represents using color codes the level of
complexity of the observed attacks. Speciﬁcally, we have leveraged the output
of nemu to identify the presence of a packing routine in the shellcode pushed
by the attackers to the victim. Warmer colors are associated to networks in
which most of the attacks observed on a daily basis leverage shellcode packing,
while colder colors are associated to networks hit by simpler attacks leveraging
plain shellcode. While certain networks expose a clear evolution from a lower
sophistication period to a prevalence of packing, other networks are consistently
characterized by solely low or high sophistication attacks. For instance, network
133.0.0.0/8 has been monitored solely in the last part of 2011 and beginning of
2012 but was consistently aﬀected by only low-sophistication attacks in a period
in which most attacks observed in other networks showed a clear predominance
of shellcode packing practices.
4.2 Packers and payloads
It is clear from the high-level analysis performed so far that the practice of
packing has been widely used for the distribution of shellcode, especially after
2009. In a previous work, a smaller dataset was used to analyze the prevalence of
diﬀerent packers [55]. The dataset at our disposal provides a wider perspective
that can allow us to identify common practices and long-term trends.
As explained in Section 3.2, nemu analyzes the decryption routine of a packed
shellcode, identifying loops and allowing us to categorize the decryption routines
as a sequence of opcodes [55]. At the same time, the execution of the decryption
routine in nemu’s CPU emulator reveals the unencrypted payload. By applying
heuristics inspired by those used in knowledge-based approaches such as amun
or nepenthes, we can easily classify the diﬀerent plaintext payloads into diﬀerent
types. Over the ﬁve years, we have identiﬁed a total of 37 distinct decryption
loops, which is a result comparable to ﬁndings described in previous studies [55],
and 15 plaintext payload implementations. Figure 4 oﬀers a comprehensive view
over all the diﬀerent ways in which packers and payloads have been combined
together. With packers identiﬁed by a numeric ID and payloads by an alphanu-
meric string, we have connected each packer and payload with an edge whenever
the two were associated on a given destination port. The size of the circles is
proportional to the logarithm of the number of occurrences of that packer or
payload, while the width of edges is proportional to the logarithm of the number
of times a packer and payload combination was observed on a given port.
Figure 4 provides a quantiﬁcation to a well known scenario in the context
of server-side exploits, where both payloads and packers are being freely com-
bined together. Popular payloads such as the HTTP one have been encrypted
with diﬀerent packers, possibly as part of diﬀerent malware implementations.
Conversely, speciﬁc decryptor routines are used across multiple payloads. For
instance, packer 6 has been used in conjunction with four diﬀerent payloads
(Mainz bindshell 1, Mainz connectback 1, Mainz connectback 2, HTTP ) and was
12
Fig. 4. Relationship between shellcode packers and the associated decrypted payloads.
possibly applied by means of a separate packing tool applied to diﬀerent plain
shellcode payloads. At the same time, most combinations are used across diﬀer-
ent ports, and thus completely diﬀerent execution environments.
Most importantly, the association between packer, payload and vulnerable
service port can be used to create an approximate deﬁnition of “activity type”
that we can use to study their evolution over time. The result is shown in Fig-
ure 5, where each association of port number, payload type and packer identiﬁer
is shown evolving across the ﬁve years of data at our disposal. The size of each
circle is proportional to the logarithm of the number of hits per day per honey-
pot address associated to that combination. The coloring is associated instead
to the breadth of the activities, i.e., the percentage of currently active sensors
where the speciﬁc combination was observed on that day. Cold and dark colors
are associated to activities that were observed on a small number of sensors, and
are therefore “more targeted.” Figure 5 underlines very important facts.
Long-lived activities. Some packer-payload combinations are extremely long-
lived, and span the entire ﬁve years of the dataset. This includes several old
exploits against the RPC DCOM service, one of which (port 135, payload “Ade-
TCP port 139TCP port 445TCP port 135UnnamedBindshell 2373TFTPIP74RothenburgConnectback23Mainzconnectback 26Mainzconnectback 1MainzBindshell 1Lindayconnectback 3Lindayconnectback 2Lindayconnectback 1Langenfeldconnectback21Koelnbind9HTTP8536322924CMDFTP hostnameCMDFTP IPAdenauBind25TCP port 296713
Fig. 5. Evolution of diﬀerent activity types (identiﬁed by speciﬁc combinations of
port,payload and packer) over time.
nau bind”, packer 25) we believe to be associated to the almost 10-year-old
Blaster worm. Similar considerations hold also for more recent threats: for in-
stance, one of the most visible activities (port 445, payload “HTTP”, packer
5) appears for the ﬁrst time in November 2008 and persists since then, and is
associated to the spread of the Conﬁcker worm. Assuming a constant propaga-
tion strategy, the population of hosts infected by these speciﬁc malware families
has not changed signiﬁcantly over a very long period of time. This fact is, per
se, rather alarming: little or nothing seems to have been done to reach out to
infected victims, and well-known threats can survive undisturbed across years
by breeding within populations of users with low security hygiene.
Targeted activities. We can identify a diﬀerent type of activities in our dataset:
certain cases have been observed by a limited number of sensors and for rather
limited timeframes. Some packer-payload combinations have appeared for a sin-
gle day, and have been observed by a single honeypot sensor. The dataset has
been generated only by monitoring a few dozens of networks, and shows that the
task of having a comprehensive view and understanding of these extremely short
lived, sparse activities is extremely challenging. This opens important questions
with respect to knowledge-based approaches to intrusion detection, and on their
ability to successfully detect activities that are clearly costly to observe.
4.3 Defenses
We have pictured in the previous section a scenario that involves a combination of
long-lived activities associated to old, but still active, self-propagating malware.
20082009201020112012time135,Adenau Bind,25135,CMD FTP IP,7135,HTTP135,Linday connectback 1,4135,Linday connectback 2,4135,Linday connectback 3,4135,Mainz Bindshell 1,6135,Mainz connectback 1,6135,Rothenburg Connectback,37135,TFTP IP,4135,TFTP IP,7135,Unnamed Bindshell 2,3135,Unnamed Bindshell 2,37139,CMD FTP IP,7139,CMD FTP hostname,7139,HTTP139,HTTP,24139,HTTP,29139,HTTP,3139,HTTP,32139,HTTP,5139,HTTP,6139,HTTP,7139,Linday connectback 2,4139,Mainz Bindshell 1,6139,Unnamed Bindshell 2,3139,Unnamed Bindshell 2,372967,Langenfeld connectback,212967,Unnamed Bindshell 2,37445,CMD FTP IP,7445,CMD FTP hostname,7445,HTTP445,HTTP,24445,HTTP,29445,HTTP,36445,HTTP,5445,HTTP,6445,HTTP,7445,HTTP,8445,Koeln bind,37445,Koeln bind,9445,Linday connectback 1,4445,Linday connectback 2,4445,Linday connectback 3,4445,Mainz Bindshell 1,6445,Mainz connectback 2,6445,Rothenburg Connectback,23445,Rothenburg Connectback,3445,TFTP IP,7445,Unnamed Bindshell 2,3445,Unnamed Bindshell 2,37Targeted activityGlobally spreadactivity14
Fig. 6. Precision and recall of the detection tools using Nemu as ground truth.
Shorter, bursty activities are also present, which probably are associated with
botnets, instructed by the bot herder to scan only speciﬁc ranges of the IP space
for their self-propagation. This scenario is a challenging one: only by being in
the right “place” at the right moment will it be possible to identify the activity.
Detectors relying on a priori knowledge of all possible attack vectors are likely
to face considerable challenges at dealing with these cases.
We have deﬁned in Section 3.2 a number of diﬀerent detectors characterized
by varying level of complexity and reliance on knowledge of the attack vector. We
range from detectors such as snort and snort-et that fully rely on such knowledge,
detectors such as snort-shellcode, snort-et-shellcode that attempt static heuristics
for the detection of shellcode, to amun that includes dynamic unpackers for
common shellcodes, to nemu and libemu that leverage CPU emulation for the
detection of inherent characteristics of a shellcode and avoid any assumption on
the characteristics of the exploit that is injecting the shellcode itself. In order
to evaluate their performance, we elect nemu as most generic approach for the
identiﬁcation of a shellcode. By not relying on sole getPC heuristics and by
trying to identify self-reference, implicit in any unpacking routine, nemu is likely
to be the most reliable source of information at our disposal.
We have thus evaluated all the tools performance against the nemu ground
truth and computed precision and recall. Commonly used in information retrieval
and classiﬁcation, the precision of a tool expresses the fraction of retrieved in-
stances that are relevant, i.e., the fraction of events ﬂagged by a tool as malicious
that are considered malicious by Argos. The recall expresses instead the fraction
of relevant instances that are retrieved, i.e., the fraction of malicious instances
identiﬁed by nemu that have also been identiﬁed by the tool. For a given period
of time, deﬁning tp as the number of true positives, fp as the number of false
positives, and fn as the number of false negatives, the precision and recall are
computed as:
precision =
tp
tp + fp
recall =
tp
tp + fn
(1)
Figure 6 shows the evolution of each tool’s performance in terms of precision
and recall over time. We can observe the following:
20082009201020112012time0.00.20.40.60.81.0precision20082009201020112012time0.00.20.40.60.81.0recallamunlibemusnortsnort_shellcodesnort_etsnort_et_shellcode15
Fig. 7. Detection performance of the various tools when dealing with diﬀerent combi-
nations of packers and payloads, using nemu as ground truth.
Simple shellcode identiﬁcation heuristics are unreliable. Detectors attempt-
ing to identify the presence of a shellcode in a completely static fashion (snort-
shellcode and snort-et-shellcode) or through unpacking heuristics (amun) con-
sistently decrease in performance across the years. From a precision standpoint,
the degradation seems to be associated to an increasing false positive rate. From
a recall standpoint, the heuristics leveraged by amun and the snort-et-shellcode
achieved acceptable performance in 2008, detecting around 70% of the attacks,
but have quickly dropped until 10% or below in recent years.
Nemu vs libemu: the importance of comparative studies. We have identiﬁed
some discrepancies in the performance of the two most generic detection method-
ologies. Upon manual inspection, we have seen that libemu (which relies on the
identiﬁcation of getPC code and on the presence of valid x86 instructions) ﬂagged
the transfer of some executables (malware being downloaded by the honeypots)
as exploits, leading to a drop in recall. However, we have also identiﬁed some
cases that were correctly marked as exploits by libemu but were missed by nemu.
Nemu could not correctly execute the decryption loop due to due to lack of sup-
port of a CPU instruction in the emulator code.3
The cost of knowledge. We observe a surprising diﬀerence between the two
knowledge-based approaches, namely snort and snort-et. In both cases, it is
diﬃcult to reason about precision: given the nature of the dataset, we expect a
considerable amount of network traﬃc to trigger IDS alerts without constituting
an exploitation attempt (as we have seen already in Figure 1). When looking at
the recall, instead, we see that the snort detector consistently detects only around
50% of the observed exploits, conﬁrming the community perception regarding the
challenges associated with the use of knowledge-based approaches at dealing with
the complexity of the threat landscape. However, the snort-et dataset reveals a
3 The issue has been reported to the developers and has now been ﬁxed.
135,Adenau Bind,25135,CMD FTP IP,7135,HTTP135,Linday connectback 1,4135,Linday connectback 2,4135,Linday connectback 3,4135,Mainz Bindshell 1,6135,Mainz connectback 1,6135,Rothenburg Connectback,37135,TFTP IP,4135,TFTP IP,7135,Unnamed Bindshell 2,3135,Unnamed Bindshell 2,37139,CMD FTP IP,7139,CMD FTP hostname,7139,HTTP139,HTTP,24139,HTTP,29139,HTTP,3139,HTTP,32139,HTTP,5139,HTTP,6139,HTTP,7139,Linday connectback 2,4139,Mainz Bindshell 1,6139,Unnamed Bindshell 2,3139,Unnamed Bindshell 2,372967,Langenfeld connectback,212967,Unnamed Bindshell 2,37445,CMD FTP IP,7445,CMD FTP hostname,7445,HTTP445,HTTP,24445,HTTP,29445,HTTP,36445,HTTP,5445,HTTP,6445,HTTP,7445,HTTP,8445,Koeln bind,37445,Koeln bind,9445,Linday connectback 1,4445,Linday connectback 2,4445,Linday connectback 3,4445,Mainz Bindshell 1,6445,Mainz connectback 2,6445,Rothenburg Connectback,23445,Rothenburg Connectback,3445,TFTP IP,7445,Unnamed Bindshell 2,3445,Unnamed Bindshell 2,37020406080100Percentage of successful detectionssnortsnort_shellcodesnort_etsnort_et_shellcode16
completely diﬀerent picture. The ruleset has consistently achieved a coverage of
more than 90% and its performance has increased since 2010. Interestingly, 2010
also coincides with the time the commercial version of the ruleset was launched,
probably with an increase in resources allocated to the collection of information
on threats and to the generation of signatures. The lower recall in the years
before 2010 could be conjectured as being due to a lower amount of resources
devoted to the collection of intelligence in those years. These facts show that
full coverage over the threat landscape is a costly, but not impossible operation:
community-driven approaches can only go up to a certain point at addressing
a problem whose solution requires an amount of resources achievable only by
commercial entities.
Signature robustness. Figure 7 explores more in depth the recall performance
of the signature-based detectors on a per-activity basis. Static shellcode detec-
tion heuristics detect a limited range of activities, but in many cases are rather
consistent: for instance, both snort-shellcode and snort-et-shellcode detect all
occurrences of packer 37 and packer 3 regardless of the payload or the service
being exploited. This is however not true in other cases: snort-et-shellcode has
inconsistent performance at dealing for instance with packer 4, that evades de-
tection when combined with speciﬁc services or speciﬁc payloads. When looking
at exploit detection signatures we also detect a varying degree of inconsistent
behavior: the snort detector, and to a much lesser degree also the snort-et one,
often ﬂag only a percentage of an activity as malicious. This is an indication
that, despite the extensive research work on the topic [35,36,12,37], the correct
identiﬁcation of invariants is often a manual process.
4.4 The limitations of knowledge
Figure 7 underlines an important limitation of knowledge-based approaches. The
two activities associated to port 2967 have been observed at the very beginning
of the dataset, and for a very limited amount of time. In that case, only shellcode
detection heuristics and the snort-et detector have been capable of identifying
a threat. Knowledge-based approaches seem to struggle at coping with stealthy
or highly targeted activities.
Figure 8 delves into the correlation between the diﬃculty of detecting an
event and its global scale. We analyze the diﬀerent activity types according to the
spread of the attacking population over the IP space (X axis), the spread of the
victim population (i.e., the honeypots being hit, Y axis) and the average number
of detectors capable of identifying the activity. Colder colors represent activities
that are diﬃcult to detect, while warm colors represent well-detectable activities.
Most well-detectable activities are associated to a widely spread attacker and
victim base (e.g., worm-like behavior), although we do identify a few cases where
well-detectable activities involve a small number of attackers and victims. When
moving away from the graph diagonal, we see how more localized, “botnet-like”
activities target a very small number of sensors (small Y coordinates), while