6
7
8
For Each cell in
’Create Outlook object using CreateObject()
Set OutlookApp = CreateObject("Outlook.Application")
Columns("a").Cells.SpecialCells(xlCellTypeConstants)
email_ = cell.Value
subject_ = cell.Offset(0, 1).Value
body_ = cell.Offset(0, 2).Value
’Create Mail Item and send it via Outlook object
Set MItem = OutlookApp.CreateItem(0)
With MItem
9
10
11
12
13
14
15
16
17
18
19
End With
20
Next
21
22 End Sub
.To = email_
.Subject = subject_
.Body = body_
.Display
(b) A macro for sending an email via Outlook
Fig. 1: VBA macro code sample
The users of the host applications are able to leverage the
VBA language to write script that access to the functionalities
of host applications.
III. BACKGROUND
A. Visual Basic for Applications
Visual Basic for Applications (VBA) is a scripting language
that is implemented within host applications, such as Microsoft
Ofﬁce Word or Excel [27]. The advantage of VBA is its ability
to automatically and repeatedly use various functions of the
host application and system. Figure 1 displays a sample macro
code that interacts with a system. Figure 1(a) shows the macro
code for executing a program of a system via the VBA function
Shell(). With several lines of code, any program in a computer
can be executed. As shown in Figure 1(b), VBA can be used
to send emails in Excel via an Outlook object. Through VBA,
users can perform a variety of tasks.
The expandability of VBA is convenient for users, but
it can also become an opportunity for attackers. Attackers
can accomplish almost every action that can be used for
malicious behavior, such as downloading or executing, via a
VBA macro. Figure 1 represents the sample code of functions
492
TABLE I: Type of obfuscation techniques
Type
Method
Random obfuscation
Randomize name
Split obfuscation
Split strings
Encoding obfuscation
Encode strings
1 Public Const pzonda = "a"
2 Public Const pzonde = "e"
3 Public Const pzondP = "P"
4
5 ’Parameter "wScript.shell" is divided
6 CreateObject("WScript.Sh" + pzonde + "ll")
7 ’Parameter "Process" is divided
8 .Environment(pzondP + "" + "roc" + pzonde + "ss")
Logic obfuscation
Insert and reorder code
Fig. 3: An example of Split obfuscation
#
O1
O2
O3
O4
1 ’Procedure name is changed to "ueiwjfdjkfdsv"
2 Sub ueiwjfdjkfdsv()
3
4
5
6
7
8 End Sub
’Variable name is changed to "yruehdjdnnz"
Dim yruehdjdnnz As Integer
yruehdjdnnz = 2
Do While yruehdjdnnz < 45
DoEvents: yruehdjdnnz = yruehdjdnnz + 1
Fig. 2: An example of Random obfuscation
that are triggered by users – however attackers prefer to take
advantage of functions triggered upon opening a document,
such as workbook open() or document open(). Furthermore,
by using simple social engineering techniques which lure users
to enable macros, attackers are able to bypass MS Ofﬁce’s
security mechanism.
B. Obfuscation Techniques in VBA
The goal of this study is to detect obfuscation with the
textual characteristics of obfuscated macro code. For more
effective detection, we classify obfuscation techniques into
four types by target and method of obfuscation based on the
studies by Collberg et al. [28] and Xu et al. [9]: 1) Random
obfuscation, 2) Split obfuscation, 3) Encoding obfuscation, and
4) Logic obfuscation. Each obfuscation type has different syn-
tactic structure and different uses of functions and operators.
Therefore, we can use the unique characteristics of each type
to detect obfuscation. Table I provides a summary of each
obfuscation type.
The obfuscation techniques affect
the manual code in-
spection of human experts. Whether it be a signature-based
AV or machine learning based AV,
in order to judge the
maliciousness of code, it must be predetermined by human
experts. These obfuscation techniques are applied to decelerate
the time of analysis, which in turn, delays the countermeasures
after detection. Although each obfuscation technique is quite
simple, when used in combination,
they render the code
visually indecipherable. In addition, attackers use obfuscation
tools to create many variants of malware with different hash
values. In the following subsections, the explanation of each
obfuscation technique and our machine learning features to
detect these techniques will be provided with example code.
1) O1 Random Obfuscation: Random obfuscation is a type
of obfuscation that changes the identiﬁers of VBA macro
code. Identiﬁers are the names of variables and procedures that
are used in VBA macro code. Random obfuscation makes it
difﬁcult to analyze the ﬂow from variables and function calls
by changing the identiﬁers to random strings.
Figure 2 shows an example of random obfuscation. The
names of the sub procedure and the variables are changed
to random meaningless strings such as ueiwjfdjkfdsv, yruehd-
jdnnz. This change to random strings makes it difﬁcult for
humans to understand the actual operation of the macro code.
The identifying feature of this random obfuscation is in the
naming of the identiﬁers. Therefore, using Entropy, a measure
of the disorder of the characters of the identiﬁers, can be one
way of detecting the characteristics of this obfuscation. Related
studies already leverage the entropy of the entire code as one
feature to detect malicious scripts [18], [26]. In addition to
this, given that random obfuscation is applied to identiﬁers, it
is also possible to use the variance or mean value of length
of identiﬁers as one feature of obfuscation detection.
Transform of Random Obfuscation
Sub function() → Sub uoweghklsdfdw()
Dim variable → Dim io3u9nlkq8lqk
2) O2 Split Obfuscation: Split obfuscation usually per-
forms obfuscation by dividing parameter data. The morpholog-
ical changes that occur in the process of partitioning data have
proven to be very effective in avoiding signature-based AVs
[9]. As the data is partitioned, it has a form that is different
from the detection signature hence, it is not ﬂagged by the
detection technique. However, when the macro is executed,
the parameter value transferred to the function is the same, so
the macro can successfully execute its malicious action. Figure
3 displays an example of macro code with split obfuscation.
This conversion does not change the actual behavior of the
code, but it avoids the detection of the use of “wScript.shell”
or “Process” as the signature for malware detection.
Functions such as Shell() and URLDownloadToFile() are
frequently used for attacks in malicious VBA macros, but
legitimate users can also use them in benign VBA macros for
normal programs. Therefore, in order to determine whether
a VBA macro is obfuscated or not, it is necessary to verify
not only the functions it uses, but also the input parameters
of the functions. Split obfuscation obstructs the detection of
malicious code by modifying parameter values.
493
1 ’Parameter "savetofile" is changed to "savteRKtofilteRK"
2 Replace("savteRKtofilteRK", "teRK", "e")
(a) Obfuscation using built-in function Replace()
1 ’Each character of URL is changed to number
2 urlAr = Array(1878, 1890, 1890, 1886, 1832, 1832, 1821,
1886, 1871, 1890, 1878, 1875, 1884, 1888, 1895, 1879,
1882, 1891, 1883, 1879, 1884, 1871, 1873, 1879, 1885,
1884, 1820, 1879, 1830, 1820, 1873, 1885, 1883, 1821,
1829, 1828, 1876, 1828, 1874, 1827, 1821, 1827, 1826,
1889, 1874, 1876, 1877, 1829, 1878, 1830, 1880, 1820,
1875, 1894, 1875)
3 urlstr = DecodeArray(urlAr)
(b) Obfuscation using user-deﬁned function DecodeArray()
Fig. 4: An example of Encoding obfuscation
In obfuscated macro code, in order to use the split data, it
is essential to combine it. The combination of data is done
using the join operators ‘&’ and ‘+’, as shown in Figure 3.
The join operators are used in normal macros, but more often
in obfuscated macros. Thus, an excessive appearance of these
characters can be selected as one of the features to detect
obfuscation. In addition to this, given that it also increases the
number and length of string variables, we can also leverage it
as a feature.
Transform of Split Obfuscation
“String” → “St” & “r” & “in” & “g”
3) O3 Encoding Obfuscation: Encoding obfuscation per-
forms obfuscation by modifying function parameters like split
obfuscation. Modiﬁcation is performed by converting param-
eter data using reversible algorithms such as Base64 or Shift.
Three types of methods are used in encoding obfuscation: 1)
built-in VBA functions, 2) character encoding, and 3) user-
deﬁned functions.
The ﬁrst type of encoding obfuscation uses the built-in
functions of VBA such as Replace(), Right(), or Left(). Figure
4(a) shows an obfuscation using Replace() which is basically
supported by VBA. As shown in the ﬁgure, the parameter
“savetoﬁle” is saved as “savteRKtoﬁlteRK” which replaces “e”
to “teRK”. It prevents macros from being detected by the key-
word “savetoﬁle”. The second type of encoding obfuscation
changes the character encoding by the use of VBA functions
such as Asc(), Hex(), Chr(). These functions change characters
to the number of the ASCII code and vice versa. The last type
of encoding obfuscation uses conversion algorithms that are
manually deﬁned by users, for example, 4(b). Many algorithms
are used with simple bitwise operations, such as shift or xor,
or complex encryptions, such as Base64.
The functions used for encoding obfuscation are used in
non-obfuscated macros as well, but there is a large gap in
the frequency of their appearance. This is because attackers
encode as many strings as possible to prevent AVs from ﬁnding
keywords. In the case of “Downloader [15]” which downloads
and executes a malicious executable, the URL, path and related
strings are all encoded by use of the aforementioned functions.
Hence, we can leverage the appearance frequency of encoding
functions as a feature to detect this type of obfuscation.
Transform of Encoding Obfuscation
→
“A”
“String” → Replace(“Stripe”,“pe”,“ng”))
“String” → decodeBase64(“U3RyaW5n”)
Ord(65)
4) O4 Logic Obfuscation: Logic obfuscation changes the
execution ﬂow of macro code. It complicates the code and
makes analysis difﬁcult. This technique is done by declaring
unused variables or using redundant function calls. It
is
not difﬁcult to increase the code size by inserting dummy
codes, and it is already being used by a public VBA macro
obfuscation tool [29]. If the size of the code that needs to
be analyzed increases 100 times by deliberately inserting
redundant dummy code, it means that the time it takes for
the code analyst to troubleshoot the obfuscated code will be
increased by the considerable amount.
Although the logic obfuscation affects the code analysis,
it often results in a signiﬁcant change in code size. It also
changes several characteristics of code such as the number of
functions and declared variables, function parameters, string
data, etc. Therefore, logic obfuscation has no effect on the
detection rate in our obfuscation detection study using static
features. Rather, if the characteristics of logic obfuscation are
well-summarized, we can leverage them as features to detect
obfuscation. In Section IV, 15 discriminant static features
which reﬂect the above-mentioned characteristics of the ob-
fuscation techniques will be introduced.
IV. DETECTING OBFUSCATION WITH
A MACHINE LEARNING APPROACH
The obfuscation techniques in VBA macros are explained
in Section III. To detect aforementioned obfuscation tech-
niques, we propose a method based on classiﬁcation algo-
rithm through supervised machine learning. Although machine
learning based detection method requires several prerequisites
such as sufﬁcient data collection, training set labeling, and
feature selection process, it nevertheless has several advantages
over alternative techniques. Unlike machine learning, static
analyses, such as signature or pattern based detection method,
have limitations when counteracting to unknown malware;
dynamic analysis has a heavy overhead. On the other hand,
machine learning approach has been applied in numerous areas
of the computer science ﬁeld including anomaly detection, and
has guaranteed and acceptable run time. If the prerequisites are
satisﬁed, machine learning method can overcome the short-
comings of the above-mentioned approaches and promising
performance can be expected.
This section provides an overview of our experiment pro-
cess. It consists of 1) Data collection, 2) Preprocessing, 3)
Feature extraction & selection, and 4) Classiﬁcation using
494
machine learning classiﬁers. To thoroughly evaluate the perfor-
mance of our proposed machine learning method, we ﬁrst ex-
plain how we collected the samples and preprocess them. After
that, the entire process of extracting and selecting features to
effectively detect the obfuscation techniques summarized in
Section III will be described. Finally, the explanation of the
machine learning classiﬁers will follow.
A. Data collection
Before proceeding with the experiment, we collected Mi-
crosoft Ofﬁce document ﬁles which contained VBA macros.
Owing to the fact that our study targets VBA macros, we
collected “.docm” and “.xlsm” ﬁles, which will likely contain
macros, through keyword searches from Google. We also col-
lected all the MS Ofﬁce ﬁles that were classiﬁed as malicious
in the malware portal [30]–[32] unconditionally, to ensure
that our proposed method is well-suited to be applied to the