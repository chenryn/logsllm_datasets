problem. For example, compressed SIKE [21] uses only 331
bytes for the public key and 363 bytes for the ciphertext, even
at the highest security level. However, SIKE is not exactly
known for its high computational performance; for example,
it is more than an order of magnitude slower than most lattice-
based KEMs.
PQ-WireGuard uses a combination of two KEMs, namely
Classic McEliece [22] and a passively secure variant of
Saber [23], [24]. One advantage of this solution for actual
applications is that most security properties are guaranteed
by the Classic McEliece scheme, considered by many as the
most conservative choice among all NIST candidates. Another
advantage is the computational efﬁciency (see below). Finally,
our approach allows us to give a concrete example of an
application that
1) works extremely efﬁciently with Classic McEliece, a
cryptosystem that is often discarded as “impractical”
because of its large public keys; and
2) heavily beneﬁts from the savings in public-key and
ciphertext size that lattice-based KEMs can achieve if
they do not aim for active security.
The second point may be seen as new insight into the question
whether or not KEMs which only provide passive security
really offer any beneﬁts for real-world applications, which was
repeatedly raised by Bernstein on the NIST pqc-forum mailing
list [25], [26]. The parameters our proposal uses achieve the
“AES-192-equivalent” security level (NIST level 3).
Performance evaluation. To evaluate the performance of
PQ-WireGuard, we compare the handshake efﬁciency of
PQ-WireGuard with that of WireGuard, the strongSwan im-
plementation of
IPsec, and OpenVPN. We show that a
PQ-WireGuard handshake is less than 60% slower than a
WireGuard handshake, is more than 5 times faster than an
IPsec handshake using Curve25519, and more than 1000 times
faster than an OpenVPN handshake.
B. Related Work.
2See https://csrc.nist.gov/Projects/Post-Quantum-Cryptography.
Related work can be grouped in four categories.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
305
First,
there is ongoing effort for post-quantum security
in the Noise framework [2] that the WireGuard handshake
is based on. Currently this effort only covers “transitional
post-quantum security” (i.e., no post-quantum authentication),
which is achieved by combining ephemeral-ephemeral ECDH
with a post-quantum KEM (currently NewHope-Simple [27]).
Noise calls this approach hybrid forward secrecy (HFS); the
details are described in [28]. As the WireGuard handshake is
one of the more complex Noise key-exchange patterns, our
work may also be seen as a ﬁrst step towards fully post-
quantum Noise.
Second, there is a large body of work on authenticated
key exchange including works on generic KEM-based con-
structions. Most important for this work is the generic KEM-
based approach by Fujioka, Suzuki, Xagawa, Yoneyama [18]
(which can be seen as a generalization of "Efﬁcient one-
round key exchange in the standard model" [29]). All cur-
rently considered actively secure post-quantum KEMs start in
their construction from a passively secure encryption scheme
and obtain active security through variants of the Fujisaki-
Okamoto (FO) transform [30]. In [31], Hövelmanns, Kiltz,
Schäge, and Unruh present a generic AKE construction that
starts directly from passively secure encryption schemes and
moves some of the FO machinery into the AKE construction.
A somewhat similar idea of reconsidering the FO transform
in the context of authenticated key exchange is presented by
Xue, Lu, Li, Liang, and He in [32]. However, the primitive they
start from in their generic construction is what they call a “2-
key KEM”. Also more specialized, non-generic, constructions
of post-quantum AKEs have been described in the literature.
In [33], Zhang, Zhang, Ding, Snook, and Dagdelen describe
a lattice-based AKE (which, however, was later outperformed
by instantiating a generic construction with the lattice-based
KEM Kyber in [34, Sec. 5]). Isogeny-based constructions were
presented by Longa in [35], by Xu, Xue, Wang, Au, Liang,
and Tian in [36], and by Fujioka, Takashima, Terada, and
Yoneyama in [37].
Third, there have been additional efforts on proving security
properties of WireGuard and more generally Noise. Most
notably, in [38], Lipp, Blanchet, and Bhargavan present a
computer-veriﬁed proof of security of the WireGuard hand-
shake in the computational model. The proof is in the ROM;
a meaningful translation to PQ-WireGuard would require ﬁrst
moving this proof to the QROM or the standard model. In [39],
Dowling, Rösler, and Schwenk introduce a generalization of
the ACCE model from [40] and prove 8 out of the fundamental
15 Noise AKE patterns secure in this generalized ACCE
model; the IK pattern used by WireGuard is not one of those
8 patterns. In [41], Kobeissi, Nicolas, and Bhargavan present
“Noise Explorer”, a tool that fully automatically proves certain
security properties of Noise AKE patterns in the symbolic
model using ProVerif [42]. Adapting Noise Explorer to support
KEM-based AKE such as the one we use in this paper
would certainly be interesting, but for the concrete case of
PQ-WireGuard would not provide any more insight than our
adaptation of the Tamarin [43] proof.
Finally, there are proposals to upgrade other VPN solu-
tions to post-quantum security. Speciﬁcally, we are aware of
two independent efforts to migrate OpenVPN [44] to post-
quantum cryptography. One of these efforts is described in the
Master’s thesis by de Vries, which adds transitional security
to OpenVPN through the use of McEliece as additional
key exchange [45]. The other effort is PQCrypto-VPN by
Easterbrook, Kane, LaMacchia, Shumow, and Zaverucha at
Microsoft Research [46]. We give a performance comparison
between our proposal and PQCrypto-VPN in Section VI.
C. Availability of Software.
Just like the Linux kernel module implementing the original
WireGuard protocol, we make all software described in this
paper available under the GPLv2 license. The software is avail-
able online from https://cryptojedi.org/crypto/#pqwireguard.
Note that the optimized Classic-McEliece and the Saber soft-
ware we make use of has been placed into the public-domain.
D. Organization of this paper.
Section II gives a brief summary of the cryptographic
primitives involved in the WireGuard handshake and then
reviews the full handshake. Section III introduces the abstract,
KEM-based construction of the PQ-WireGuard handshake
and Section IV analyzes its security. Section V describes
the instantiation of PQ-WireGuard using McEliece and a
passively secure version of Saber. Finally, Section VI presents
benchmark results for PQ-WireGuard.
II. PRELIMINARIES
In the following we brieﬂy discuss the security notion under
which we analyze PQ-WireGuard. We then recall some cryp-
tographic primitives used by WireGuard and PQ-WireGuard,
and eventually provide a brief description of the WireGuard
handshake protocol. We start the discussion of security notions
with a brief discussion of post-quantum security.
A. A Note on Post-Quantum Security
Our proofs in the computational model analyze the post-
quantum security of PQ-WireGuard. This requires deﬁnitions
of post-quantum security. In our case, the security notions
for pre- and post-quantum security only differ with regard
to the computational model of the attackers. More precisely,
pre-quantum security assumes adversaries to be conventional
probabilistic algorithms. For post-quantum security we assume
adversaries to be quantum algorithms (which are probabilistic
by nature). All honest parties are assumed to be conventional
probabilistic algorithms. Consequently, all communication in
our models is classical. We provide all deﬁnitions below with
respect to probabilistic polynomial time (PPT) adversaries.
We then obtain the post-quantum version by allowing the
adversaries to be quantum polynomial time (QPT) algorithms.
This treatment is possible as our computational proofs are in
the so-called standard model, i.e., the proofs do not make use
of idealized primitives, like random oracles or ideal ciphers
which would require quantum-access to oracles.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
306
Looking at
the symbolic model, we are not aware of
research that analyzes the implications of considering quantum
adversaries against conventional cryptography. Consequently,
for now our proofs in the symbolic model are only known to
apply to the pre-quantum setting.
B. Security Properties and Corruption Patterns
Before discussing formal models, we give some intuition
on the security that WireGuard was designed to achieve.
WireGuard considers a setting where an initiator I initiates
a secure connection with a responder R. The WireGuard
handshake aims to achieve the following security goals:
• Session-Key Secrecy: The established session key is pseu-
dorandom, i.e., indistinguishable from a random bit string
for everyone except the initiator and the responder.
• Session-Key Uniqueness: The established session key is,
with overwhelming probability, never repeated.
• Entity authentication: Both, initiator and responder, know
who they are talking to. Speciﬁcally, it is practically
infeasible for a party to impersonate another party.
• Identity Hiding: The identities of initiator and responder
are only revealed to each other.
• DoS Mitigation: By DoS mitigation we refer to the ﬁrst
message by the initiator being authenticated. This allows
a responder to reject forged messages before performing
any costly public-key operations.
These security goals should even be preserved under cor-
ruption of secrets. All parties have a static long-term secret
(usually the secret key of a key-pair). Identity is deﬁned as
knowledge of a certain long-term secret. In addition, parties
have ephemeral secrets (think of ephemeral keys but also
the randomness used during the execution of the protocol3)
which are only used in a single execution of the protocol
and are erased afterwards. We consider these a party’s secrets
and assume that they may be corrupted independently by an
adversary. In addition, every pair of parties may or may not
have a pre-shared secret that can be corrupted by the adversary
as well. This allows to deﬁne different corruption patterns.
In general we consider maximal exposure (MEX) attacks [47,
Sec. 3.3],[48],[18] allowing adversaries to corrupt arbitrary
combinations of static and ephemeral secrets.
However, certain corruption patterns allow for trivial, unpre-
ventable attacks against certain security goals. For example, if
all long-term secret data is compromised, there is no way to
protect against active adversaries. In the following we discuss
under which corruption patterns which security goals should
still be achieved, explicitly excluding such trivial attacks.
• Session-Key Secrecy. The session key remains pseudoran-
dom if either the parties share an uncorrupted pre-shared
key or if each party has at least one uncorrupted secret.
This notion implies perfect forward secrecy (PFS) (also
known as pre-compromise security) where an adversary
3Some deﬁnitions limit the meaning of ephemeral secrets to ephemeral
key pairs. We use it to refer to all temporary secret data in a party’s state,
especially all used randomness. This turns out to be important when using
KEMs.
learns the victim’s secrets at some point in time and tries
to learn the session key of previous sessions. In the case
of weak-PFS the adversary is limited to sessions in which
it did not actively interfere before.
• Session-Key Uniqueness. Session-key uniqueness holds
against passive adversaries that only observe secrets of
corrupted parties but do not actively change them.
• Entity Authentication. The handshake provides entity
authentication under arbitrary corruption except for two
cases. Assume Eve wants to impersonate Alice towards
Bob then there exist two trivial corruption patterns.
If Eve corrupts Alice’s long-term secrets and all pre-
shared secrets between Alice and Bob, authentication
cannot be achieved.
In addition to that, the impersonation may succeed if all
of Bobs secrets are compromised, that is if Eve knows
Bob’s long-term and ephemeral secrets as well as the
pre-shared secret between Alice and Bob. While this is
no trivial attack in the sense that it cannot be prevented,
it is often excluded as it describes a setting where Eve
has essentially full control over Bob’s system. In this case
there are more direct ways than breaking cryptography to
convince Bob that he is talking to Alice.
All other attacks against entity authentication are mit-
igated, including key-compromise impersonation (KCI)
attacks, where Eve tries to impersonate Alice towards
Bob, while knowing all of Bob’s long-term secrets. It
also covers unknown-key-share (UKS) attacks in which
Eve tricks an honest party into believing that they are
communicating with someone else than they actually do.
• Identity Hiding. The identity of the initiator and the
responder are hidden as long as both long-term secrets
and the initiator’s ephemeral secrets are uncompromised.
Note that a compromise of a party’s long-term secret is
by deﬁnition also a reveal of its identity.
• DoS Mitigation. DoS mitigation can be achieved against
adversaries that do not corrupt a pair of long-term key
and pre-shared secret.
C. Formal Security Models
We formally analyze the security of the PQ-WireGuard
handshake in two models.
The symbolic model. In the symbolic model, security is proven
by ruling out the possibility of certain attacks, one by one.
The original symbolic analysis by Donenfeld and Milner [8]
covered all of the above security goals except DoS mitigation.
The analysis of forward secrecy was limited to weak-PFS. We
extend their model by DoS mitigation and full PFS. We detail
our formalization of this model in Section IV-B.
The computational model. For the analysis of WireGuard in
the computational model, Dowling and Paterson introduced the
notion of eCK-PFS-PSK security [9]. It extends the eCK-PFS
notion of Cremers and Feltz [49] by the treatment of pre-
shared keys. The notion of eCK-PFS security in turn is a
strengthening of the eCK security notion [50] that integrates
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
307
perfect forward secrecy. In terms of the informal description
above, eCK-PFS-PSK covers session-key secrecy, including
PFS, and all the authentication-related security goals. What is
not covered are session-key uniqueness, identity hiding, and
DoS mitigation.
As Dowling and Paterson did for WireGuard, we prove
security of PQ-WireGuard in the computational model with
respect to eCK-PFS-PSK. The only difference is that we allow
adversaries to be quantum algorithms as discussed above. For
a formal description of eCK-PFS-PSK see [9, Sec. 4].
D. Cryptographic building blocks
In the following we discuss cryptographic building blocks
used in (PQ-)WireGuard.
Difﬁe-Hellman key exchange. Strictly speaking Difﬁe-Hellman
key exchange (DH) is not a generic cryptographic building
block in the sense of the other building blocks below. Instead
it is an actual scheme. However, authenticated key-exchange
protocols built using the Noise framework are explicitly based
on DH instead of some generic building block. This is what
lead to complicated security arguments for such protocols, re-
quiring the introduction of non-standard security assumptions
like the PRFODH-assumption discussed below. Nevertheless
we describe DH as it is a core ingredient of WireGuard.
We use the multiplicative notation for the group G with
generator g in which the DH is carried out. To highlight
similarities to the KEM-based approach, we write DH.Gen
for DH key generation which returns a keypair (a, ga). DH
shared-key computation is denoted DH.Shared and outputs
gab on input a secret key a and a public key gb. WireGuard
instantiates the DH key exchange with X25519 [3].
DH is vulnerable to Shor’s algorithm [51], [52] and thus
what makes the WireGuard handshake vulnerable to quantum