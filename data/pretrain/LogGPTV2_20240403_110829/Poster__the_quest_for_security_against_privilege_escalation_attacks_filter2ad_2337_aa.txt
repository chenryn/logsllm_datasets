title:Poster: the quest for security against privilege escalation attacks
on android
author:Sven Bugiel and
Lucas Davi and
Alexandra Dmitrienko and
Thomas Fischer and
Ahmad-Reza Sadeghi and
Bhargava Shastry
POSTER: A New Framework against Privilege  
Escalation Attacks on Android
Wenming Zhou 
State Key Lab of Integrated Service 
Network, Xidian University 
Xi’an, China, 710126 
PI:EMAIL 
Yuqing Zhang 
National Computer Network Instrusion 
Protection Center, UCAS 
Beijing, China, 100048 
PI:EMAIL 
Xuefeng Liu 
State Key Lab of Integrated Service 
Network, Xidian University 
Xi’an, China, 710071 
PI:EMAIL 
from 
previous 
schemes, 
policy-centered 
the  permissions.  Specially,  we  allow 
ABSTRACT 
The Android provides a permission-based security model to restrict 
the  operations  that  each  application  can  perform;  however,  it  has 
been  shown  to  be  vulnerable  to  privilege  escalation  attacks. 
Applications can cooperate to perform operations that forbidden to 
perform  separately  which  may  lead  to  privacy  leakage.  In  this 
poster,  we  present  the  design  of  a  new  policy-centered  security 
framework against the application-level privilege escalation attacks. 
Different 
the 
communication  content  is  also  considered  into  the  inspection 
besides 
the  privacy 
information selectively to be passed in the middleware and deploy a 
mandatory access control at the kernel based on the dynamical taint 
tracking.  Test  results  show  that  it  can  prevent  known  confused 
deputy  attacks  and  is  also  flexible  to  prevent  the  unknowns; 
furthermore it can reduce the false positives of preventing colluding 
attacks compared to the previous work.   
Categories and Subject Descriptors: D.4.6 [Operating Systems]: 
Security and Protection  
General Terms: Security 
Keywords 
 Privilege Escalation Attacks, Taint Tracking, Privacy Protection 
1.  INTRODUCTION 
In the Android’s permission-based security model, applications are 
only granted permissions that they really need and each application 
runs in a sandbox as its own user. Files owned by one application 
shall  not  be  accessed  by  another  except  that  they  are  explicitly 
exposed  by  the  developers  [1].  However,  this  security  model  has 
been shown to be vulnerable to privilege escalation attacks [2-5, and 
8] including collusion attacks and confused deputy attacks. Previous 
works  [6,  7]  have  identified  such  problems  and  provided  various 
overt as well as covert channels between colluding applications to 
launch  privilege  escalation  attacks.  Colluding  applications 
constructed to aggregate their permissions, and therefore they can 
indirectly  execute  operations  that  should  not  be  able  to  execute 
based on their individually permissions. To deal with such attacks, 
many  security  extensions  and  enhancements  have  been  proposed 
such  as  TaintDroid  [2],  IPC  Inspection,  SEAndroid,  QUIRE  [11], 
Permission to make digital or hard copies of part or all of this work for personal 
or classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage, and that copies bear this notice 
and the full citation on the first page. Copyrights for third-party components of 
this  work  must  be  honored.  For  all  other  uses,  contact  the  owner/author(s). 
Copyright is held by the author/owner(s). 
CCS’13, November 4–8, 2013, Berlin, Germany. 
ACM 978-1-4503-2477-9/13/11. 
http://dx.doi.org/10.1145/2508859.2512513   
the 
into 
XManDroid  [3,  4]  and  so  on.  However,  none  of  these  existing 
schemes  can  efficiently  protect  the  user’s  privacy  leakage  via 
privilege  escalation  attacks.  As  a  countermeasure,  TaintDroid 
presented  a  way  of  perceiving  the  leakage  of  privacy  data  by 
tracking 
the  privacy  flow  within  and  among  applications. 
XManDroid  proposed  a  framework  which  allows  for  enforcing  a 
flexible range of policies, semantic links established between IPCs 
can  be  verified  at  the  middleware  level.  And  Mandatory  Access 
Control is deployed at the kernel level. It has a limitation that the 
communication  prevention  appears  regardless  of 
the  actual 
communication content and therefore might lead to false positives, 
and it does not allow an application to regain privileges which they 
lost due to the communication with other applications.  
Our model can protect Android against privilege escalation attacks 
by introducing two design principles. The framework is similar to 
XManDroid,  however,  the  communication  content  is  carefully 
considered 
inspection.  Our  main  contributions  are 
summarized as follows. 
(1) We propose a policy-centered framework maintaining a white-
list storing the call-chains or accesses that can be allowed to provide 
security  itself.  While  the  security  of  XManDroid  depends  on  the 
effective policies. 
(2)  Inspired  by  QUIRE,  we  propose  an  automated  permissions 
granted  mechanism.  When  an  IPC  is  to  be  established,  the  callee 
shall receive reduced permissions during the first life-cycle.  
(3) Benefit from TaintDroid, we introduce a scheme to concern the 
actual  communication  content  of  IPCs  at  the  middleware  and 
combine  the  taint  tracking  technique  with  Mandatory  Access 
Control mechanism at the kernel level.  
2.  FRAMEWORK DESIGN  
We  give  an  overview  at  the  beginning,  and  then  we  present  two 
design  principles.  Later  we  describe  the  involved  components  in 
detail and how they interact with each other.  
2.1  Overview 
Inspired by XManDroid, our security framework also performs both 
runtime  monitoring  and  analysis  of  communications  across 
applications.  In  contrast  to  XManDroid,  our  framework  only 
enforces  two  basic  policies  following  the  two  design  principles 
proposed in subsection 2.2. All IPCs which don’t accord with the 
two principles should be denied except that they are in the white list. 
Considering covert channels, once a new covert channel has been 
found, a policy can be added to the black list in order to prevent the 
communication via the new channel. 
2.2  Design Principles 
Before  describing  the  two  design  principles,  we  define  two 
conceptions as follows. Consider that application A is granted the 
permissions  PA=  {pA1,  pA2  …  pAi  …pAn},  and  according  to  its 
1411permissions it can access a privacy data collection DA= {dA1, dA2 … 
dAi  …dAn},  where
i   .  Similarly,  let  PB  and  DB  denote  the 
permission  set  and  privacy  data  collection  of  application  B 
respectively.  When  A  attempts  to  establish  an  IPC  to  B,  the 
privilege  escalation  permissions  set  Pescalation=  PB－(PA∩PB),  and 
the data leakage set Dleakage= (DA∪DB)－(DA∩DB) are defined. 
Limitation of permission. Inter Component Communication at the 
middleware  (ICC)  enforces  the  policy  that  a  component  without 
permissions p should not call a component with permission p. That 
is to say Pescalation is limited of the callee.  
Isolation  of  privacy  data. This applications should not access to 
privacy data which they don’t have permissions to access. Namely, 
Dleakage should not be passed during the IPCs. 
2.2.1  Life-cycle Based Permission Mechanism 
Inspired by the solution of QUIRE, we will check the permissions 
of the caller and the callee when an ICC is to be established. If the 
permission set Pescalation  ≠∅, then we limit the permissions of the 
*
callee  during  one  life  cycle  time.  Through  the  analysis  of  50 
applications,  we  found  98%  privilege  escalation  attacks  occurred 
during  the  first  life-cycle  of  the  exposure  components.  So  we 
consider  the  callee’s  permissions  belonging  to  Pescalation  should  be 
limited  during  the  first  life-cycle.  When  the  caller  is  system,  it 
obviously requires additional consideration. 
2.2.2   ICC Inspection 
It  is  designed  to  inspect  the  communication  between  components 
with  different  UIDs  in  the  middleware.  Its  function  includes  the 
computing  of  Pescalation,  extracting  the  Intent  object  passed  among 
components and checking whether it contains privacy data with the 
help of taint tracking at message level provided by TaintDroid. 
2.2.3  Privacy-Type-Based Access Control 
Applications  with  different  UIDs  are  isolated  in  Discretionary 
Access Control mechanism (DAC). But DAC does not concern the 
applications colluding. In collusion scenario, in order to protect the 
particular  privacy  data  fine-grained,  we  propose  the Privacy  Type 
Access  Control  (PTBAC)  that  allows  Mandatory  Access  Control 
(MAC)  on  Android  at  the  kernel  level.  The  differences  between 
PTBAC  and  MAC  lie  in  that  the  PTBAC’s  access  policies  are 
dynamical based on taint tracking. When the taint tracking system 
becomes aware of that a particular type of privacy data is written to 
a  file,  the  taint  information  will  be  analyzed  and  stored  to  the 
policies database. If another application is to access the file, PTBAC 
policies  will  be  enforced  to  ensure  that  it  should  not  access  to 
particular type of privacy data which it does not have permissions to 
access. 
2.2.4  Role-Based Management model 
By default, the callee will receive reduced permissions during the 
first life-cycle in an ICC, and the Dleakage is not allowed to be passed. 
However  the  user  may  have  special  requirements  in  particular 
situation where applications have to perform colluding in order to 
provide normal functions. The Google Play divided its applications 