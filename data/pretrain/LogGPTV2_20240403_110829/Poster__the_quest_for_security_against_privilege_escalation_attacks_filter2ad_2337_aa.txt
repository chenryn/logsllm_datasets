# Poster: The Quest for Security Against Privilege Escalation Attacks on Android

**Authors:**
- Sven Bugiel
- Lucas Davi
- Alexandra Dmitrienko
- Thomas Fischer
- Ahmad-Reza Sadeghi
- Bhargava Shastry

## A New Framework Against Privilege Escalation Attacks on Android

### Authors:
- **Wenming Zhou**
  - State Key Lab of Integrated Service Network, Xidian University
  - Xi’an, China, 710126
  - Email: [PI:EMAIL]
- **Yuqing Zhang**
  - National Computer Network Intrusion Protection Center, UCAS
  - Beijing, China, 100048
  - Email: [PI:EMAIL]
- **Xuefeng Liu**
  - State Key Lab of Integrated Service Network, Xidian University
  - Xi’an, China, 710071
  - Email: [PI:EMAIL]

### Abstract
Android employs a permission-based security model to restrict the operations each application can perform. However, this model is vulnerable to privilege escalation attacks, where applications can collaborate to perform operations that are individually forbidden, leading to potential privacy leaks. This poster presents a new policy-centered security framework designed to mitigate application-level privilege escalation attacks. Our approach considers the communication content and selectively passes privacy information through middleware, while deploying mandatory access control at the kernel level using dynamic taint tracking. Test results show that our framework can prevent known confused deputy attacks, is flexible enough to prevent unknown attacks, and reduces false positives in preventing colluding attacks compared to previous methods.

### Categories and Subject Descriptors
- D.4.6 [Operating Systems]: Security and Protection

### General Terms
- Security

### Keywords
- Privilege Escalation Attacks, Taint Tracking, Privacy Protection

## 1. Introduction
In Android's permission-based security model, applications are granted only the permissions they need, and each application runs in a sandbox as its own user. Files owned by one application should not be accessible to another unless explicitly exposed by the developers. However, this model is vulnerable to privilege escalation attacks, including collusion and confused deputy attacks. Previous work has identified these issues and provided various overt and covert channels between colluding applications to launch such attacks. Colluding applications can aggregate their permissions, allowing them to indirectly execute operations that should not be possible based on their individual permissions. Several security extensions and enhancements, such as TaintDroid, IPC Inspection, SEAndroid, QUIRE, and XManDroid, have been proposed. However, none of these existing schemes effectively protect against privacy leakage via privilege escalation attacks.

TaintDroid tracks privacy data flow within and among applications, while XManDroid enforces a range of policies and verifies semantic links between IPCs at the middleware level. Mandatory Access Control (MAC) is deployed at the kernel level, but it has limitations: it prevents communication regardless of the actual content, leading to false positives, and does not allow applications to regain lost privileges due to communication with other applications.

Our model introduces two design principles to protect Android against privilege escalation attacks. The framework is similar to XManDroid but carefully considers the communication content during inspection. Our main contributions are:

1. A policy-centered framework maintaining a whitelist of allowed call-chains or accesses.
2. An automated permission-granting mechanism inspired by QUIRE, which limits the callee's permissions during the first lifecycle.
3. A scheme that integrates taint tracking at the middleware level and MAC at the kernel level, inspired by TaintDroid.

## 2. Framework Design
We provide an overview of the framework, followed by a detailed description of the design principles and involved components.

### 2.1 Overview
Inspired by XManDroid, our security framework performs runtime monitoring and analysis of communications across applications. Unlike XManDroid, our framework enforces two basic policies following the design principles outlined in Section 2.2. All IPCs that do not comply with these principles are denied, except those in the whitelist. For covert channels, a policy can be added to the blacklist to prevent communication via new channels.

### 2.2 Design Principles
Before describing the design principles, we define two concepts. Consider an application A with permissions PA = {pA1, pA2, ..., pAn} and a privacy data collection DA = {dA1, dA2, ..., dAn}. Similarly, let PB and DB denote the permission set and privacy data collection of application B, respectively. When A attempts to establish an IPC with B, the privilege escalation permission set Pescalation = PB - (PA ∩ PB), and the data leakage set Dleakage = (DA ∪ DB) - (DA ∩ DB) are defined.

#### 2.2.1 Limitation of Permission
Inter-Component Communication (ICC) at the middleware enforces the policy that a component without permission p should not call a component with permission p. This means Pescalation is limited for the callee.

#### 2.2.2 Isolation of Privacy Data
Applications should not access privacy data for which they do not have permissions. Specifically, Dleakage should not be passed during IPCs.

### 2.2.3 Life-cycle Based Permission Mechanism
Inspired by QUIRE, we check the permissions of the caller and callee when an ICC is established. If Pescalation ≠ ∅, we limit the callee's permissions during one lifecycle. Analysis of 50 applications shows that 98% of privilege escalation attacks occur during the first lifecycle of the exposed components. Thus, we limit the callee's permissions belonging to Pescalation during the first lifecycle. Special consideration is given when the caller is the system.

### 2.2.4 ICC Inspection
This component inspects communication between components with different UIDs at the middleware level. It computes Pescalation, extracts the Intent object passed among components, and checks for privacy data using taint tracking at the message level, provided by TaintDroid.

### 2.2.5 Privacy-Type-Based Access Control
To protect specific privacy data, we propose Privacy Type Access Control (PTBAC), which allows Mandatory Access Control (MAC) at the kernel level. PTBAC policies are dynamic and based on taint tracking. When the taint tracking system detects a particular type of privacy data being written to a file, the taint information is analyzed and stored in the policies database. If another application attempts to access the file, PTBAC policies ensure it cannot access the specific privacy data it lacks permission for.

### 2.2.6 Role-Based Management Model
By default, the callee receives reduced permissions during the first lifecycle of an ICC, and Dleakage is not allowed to be passed. However, users may have special requirements where applications must collude to provide normal functions. In such cases, the Google Play role-based management model can be used to manage these scenarios.

---

This revised version aims to enhance clarity, coherence, and professionalism, ensuring the text is well-structured and easy to follow.