**Description**

Currently, Symfony uses the following condition in multiple places to check if the PHP environment is not running on Windows:
```php
if ('\\' !== DIRECTORY_SEPARATOR) { // PHP does not run in Windows }
```
This could be refactored to use a more explicit and readable approach, such as:
```php
if (OperatingSystem::WINDOWS !== $os->getType()) { // PHP does not run in Windows }
```

I am considering integrating a small package like [operating-system/operating-system](https://packagist.org/packages/operating-system/operating-system) into Symfony to achieve this. However, since this change has not been implemented yet, I assume there might be valid reasons for maintaining the current approach.

**Pros:**
- **Improved Readability:** The new approach is more explicit and easier to understand.
- **Centralized Detection Logic:** The operating system detection logic would be centralized, making it easier to update if needed (although such updates are unlikely).

**Cons:**
- **Performance Impact:** The additional abstraction layer may introduce a slight performance overhead.
- **Increased Complexity:** Adding a new dependency and changing the detection method could increase the overall complexity of the codebase.

**Example**

Current Implementation:
```php
if ('\\' !== DIRECTORY_SEPARATOR) { // PHP does not run in Windows }
```

Proposed Implementation:
```php
if (OperatingSystem::WINDOWS !== $os->getType()) { // PHP does not run in Windows }
```

Is it worth the effort to implement this change, or are there significant reasons to maintain the current approach?