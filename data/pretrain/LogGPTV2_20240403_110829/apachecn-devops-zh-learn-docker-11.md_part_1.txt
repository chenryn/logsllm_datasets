# 十一、零停机部署和机密
在最后一章中，我们详细探讨了 Docker Swarm 及其资源。我们学习了如何在本地和云中构建一个高度可用的集群。然后，我们深入讨论了群服务和栈。最后，我们在群中创建了服务和栈。
在本章中，我们将向您展示如何在不中断服务和栈可用性的情况下更新在 Docker Swarm 中运行的服务和栈。这叫做**零停机部署**。我们还将引入群机密，作为一种安全地向使用这些机密的服务容器提供敏感信息的手段。
本章的主题是:
*   零停机部署
*   机密
完成本章后，您将能够:
*   列出两到三种不同的部署策略，通常用于在不停机的情况下更新服务
*   批量更新服务，而不会导致服务中断
*   为更新失败时使用的服务定义回滚策略
*   在服务中使用机密
*   更新机密的价值而不会导致停机
# 技术要求
本章的代码文件可以在[https://github . com/原教旨主义文档/labs/tree/master/ch11](https://github.com/fundamentalsofdocker/labs/tree/master/ch11) 链接中找到。
# 零停机部署
需要频繁更新的任务关键型应用最重要的一个方面是能够以完全不需要停机的方式进行更新。我们称之为零停机部署。在任何时候，被更新的应用都是完全可操作的。
# 流行的部署策略
有各种方法可以实现这一点。其中一些如下:
*   滚动更新
*   蓝绿色部署
*   金丝雀释放
Docker Swarm 支持开箱即用的滚动更新。另外两种类型的部署可以通过我们的额外努力来实现。
# 滚动更新
在任务关键型应用中，每个应用服务都必须在多个副本中运行。根据负载的不同，可以少至两到三个实例，多至几十个、几百个或几千个实例。在任何给定的时间，我们都希望所有服务实例中有明显多数在运行。因此，如果我们有三个副本，我们希望至少有两个副本一直运行。如果我们有 100 个副本，我们可以满足于至少 90 个副本，这些副本必须可用。然后，我们可以定义副本的批量大小，以便进行升级。在第一种情况下，批次大小为 1，在第二种情况下，批次大小为 10。
当我们关闭副本时，Docker Swarm 将自动从负载平衡池中取出这些实例，并且所有流量将在剩余的活动实例之间进行负载平衡。因此，这些剩余的实例的流量将略有增加。在下图中，在滚动更新开始之前，如果**任务 A3** 想要访问**服务 B，**可以通过 SwarmKit 对服务 B 的三个任务中的任何一个进行负载平衡。滚动更新开始后，SwarmKit 关闭**任务 B1** 进行更新。然后，该任务会自动从目标池中取出。因此，如果**任务 A3** 现在请求连接到**服务 B** ，负载平衡将仅从剩余任务 B2 和 B3 中选择。因此，这两个任务可能会暂时承受更高的负载:
![](img/04070fc1-8938-40b8-b8f2-a1bc835add47.png)
Task B1 is taken down for update
然后，停止的实例被应用服务的新版本的同等数量的新实例替换。一旦新的实例启动并运行，我们就可以让蜂群观察它们一段给定的时间，并确保它们是健康的。如果一切都好，那么我们可以通过取下下一批实例并用新版本的实例替换它们来继续。重复这个过程，直到应用服务的所有实例都被替换。
在下图中，我们看到**服务 B** 的**任务 B1** 已经更新到版本 2。**任务 B1** 的容器分配了一个新的 IP 地址，并部署到另一个有空闲资源的工作节点:
![](img/b130416c-eeb8-4100-90f7-a79dc0f73adf.png)
First batch updated in a rolling update
重要的是要理解，当一个服务的任务被更新时，在大多数情况下，它会被部署到一个不同的工作节点，而不是它曾经生活的节点。但是只要相应的服务是无状态的，这应该没问题。如果我们有一个位置或节点感知的有状态服务，并且我们想要更新它，那么我们必须调整我们的方法，但是这超出了本书的范围。
现在，让我们来看看我们如何实际指示群执行应用服务的滚动更新。当我们在栈文件中声明一个服务时，我们可以定义多个与这个上下文相关的选项。让我们看一个典型栈文件的片段:
```
version: "3.5"
services:
 web:
   image: nginx:alpine
   deploy:
     replicas: 10
     update_config:
       parallelism: 2
       delay: 10s
...
```
在这个片段中，我们看到一个部分，`update_config`，具有属性`parallelism`和`delay`。并行度定义滚动更新期间一次将更新多少副本的批量大小。延迟定义了 Docker Swarm 在各个批次的更新之间要等待多长时间。在前面的例子中，我们有`10`副本，每次更新两次，在每次成功更新之间，Docker Swarm 等待`10`秒。
让我们测试这样一个滚动更新。我们导航到`labs`文件夹的子文件夹`ch11`，并使用文件`stack.yaml`创建一个为滚动更新配置的网络服务。该服务使用基于阿尔卑斯山的 Nginx 映像，版本为`1.12-alpine`。然后我们将更新服务到一个更新的版本`1.13-alpine`。
我们将把这个服务部署到我们在 VirtualBox 本地创建的集群中。首先，我们确保我们的终端窗口配置为访问我们集群的一个主节点。我们可以带领导`node-1`:
```
$ eval $(docker-machine env node-1)
```
现在，我们可以使用栈文件部署服务:
```
$ docker stack deploy -c stack.yaml web
```
前面命令的输出如下所示:
![](img/7356fa5f-a06a-456a-9340-b2552f2a4b70.png)
Deployment of the stack called web
部署服务后，我们可以使用以下命令对其进行监控:
```
$ watch docker stack ps web
```
我们将看到以下输出:
![](img/5e27d7f6-5656-4f5f-b432-6dc367239446.png)
Service web of stack web running in swarm with 10 replicas If you're working on a Mac, you need to make sure your watch tool is installed. Use this command to do so: `brew install watch`.
前面的命令将持续更新输出，并为我们提供滚动更新期间发生的事情的良好概述。
现在，我们需要打开第二个终端，并将其配置为远程访问我们集群的管理节点。完成后，我们可以执行`docker`命令，该命令将更新栈的`web`服务(也称为`web`)的映像:
```
$ docker service update --image nginx:1.13-alpine web_web
```
前面的命令导致以下输出，指示滚动更新的进度:
![](img/1fc96283-49d8-465d-babd-9ef47c6e701f.png)
Screen showing progress of rolling update
输出表明前两个批次和每两个任务已经成功，第三个批次正在准备中。
在我们观察栈的第一个终端窗口中，我们现在应该看到 Docker Swarm 如何以 10 秒的间隔一批一批地更新服务。第一批完成后，应该如下图所示:
![](img/90a4d2d3-ca3e-4375-a152-ede8af9bc766.png)
Rolling update of a service in Docker Swarm
在前面的截图中，我们可以看到第一批的两个任务`8`和`9`已经更新了。Docker 正在等待`10 seconds`进行下一批。
It is interesting to note that in this particular case, SwarmKit deploys the new version of the task to the same node as the previous version. This is accidental since we have five nodes and two tasks on each node. SwarmKit always tries to balance the workload evenly across the nodes. So, when SwarmKit takes down a task, then the corresponding node has less workload than all the others and thus gets the new instance scheduled. Normally, you cannot expect to find the new instance of a task on the same node. Just try it out yourself by deleting the stack with `docker stack rm web` and changing the number of replicas to say, seven, and then redeploy and update. 
所有任务更新后，我们手表`docker stack ps web`命令的输出看起来类似于下面的截图:
![](img/fac8fdcb-4f89-4595-9356-d4775b2f14f2.png)
All tasks have been updated successfully
请注意，SwarmKit 不会立即从相应的节点中移除任务的早期版本的容器。这是有意义的，因为我们可能想要，例如，从那些容器中检索日志用于调试目的，或者我们可能想要使用`docker container inspect`检索它们的元数据。在清除旧的任务实例之前，SwarmKit 会保留四个最新终止的任务实例，以免未使用的资源阻塞系统。
完成后，我们可以使用以下命令来拆除栈:
```
$ docker stack rm web
```
虽然使用栈文件来定义和部署应用是推荐的最佳实践，但是我们也可以在服务`create`语句中定义更新行为。如果我们只想部署单个服务，这可能是首选方式。我们来看这样一个`create`命令:
```
$ docker service create --name web \
 --replicas 10 \
 --update-parallelism 2 \
 --update-delay 10s \
 nginx:alpine
```
该命令定义了与前面的栈文件相同的所需状态。我们希望服务以`10`副本运行，并且希望滚动更新一次以 2 个任务的批次进行，连续批次之间有`10`秒的间隔。
# 健康检查
例如，为了做出明智的决定，在 swarm 服务的滚动更新期间，无论刚刚安装的新服务实例批次是否运行正常，或者是否需要回滚，SwarmKit 都需要一种方法来了解系统的整体健康状况。通过它自己，FlowKit(和 Docker)可以收集相当多的信息。但这是有限度的。想象一个包含应用的容器。从外面看，这个容器看起来绝对健康，笑起来也很舒服。但这并不一定意味着容器内运行的应用也运行良好。例如，应用可能处于无限循环或损坏状态，但仍在运行。但是，只要应用运行，容器运行，从外部来看，一切看起来都很完美。
因此，SwarmKit 提供了一个接缝，我们可以为它提供一些帮助。我们，群中容器内运行的应用服务的作者，最清楚我们的服务是否处于健康状态。SwarmKit 让我们有机会定义一个针对我们的应用服务执行的命令，以测试其运行状况。*这个命令具体做什么对 Swarm* 来说并不重要，命令只需要返回 OK 或 NOT OK 或者超时即可。后两种情况，即“不正常”或“超时”，将告诉 SwarmKit 它正在调查的任务可能是不健康的。在这里，我有意写下*潜在的*，稍后，我们将看到原因:
```
FROM alpine:3.6
...
HEALTHCHECK --interval=30s \
    --timeout=10s
    --retries=3
    --start-period=60s
    CMD curl -f http://localhost:3000/health || exit 1
...
```
在前面的 Dockerfile 片段中，我们看到了关键字`HEALTHCHECK`。它有几个选项或参数和一个实际命令`CMD`。让我们首先讨论一下选项:
*   `--interval`定义健康检查之间的等待时间。因此，在我们的例子中，指挥者每`30`秒执行一次检查。
*   `--timeout`参数定义了如果健康检查没有响应，Docker 应该等待多长时间，直到因错误而超时。在我们的示例中，这是`10`秒。现在，如果一次运行状况检查失败，SwarmKit 会重试几次，直到它放弃并将相应的任务声明为不健康，并为 Docker 关闭该任务并将其替换为新实例打开了大门。
*   重试次数由参数`--retries`定义。在前面的代码中，我们希望有三次重试。
*   接下来，我们有开始期。有些容器需要一些时间来启动(这并不是推荐的模式，但有时这是不可避免的)。在此启动期间，服务实例可能无法响应运行状况检查。有了启动周期，我们可以定义在执行第一次运行状况检查之前，SwarmKit 应该等待多长时间，从而给应用初始化时间。为了定义启动时间，我们使用`--start-period`参数。在我们的情况下，我们在`60`秒后进行第一次检查。这个启动周期需要多长时间完全取决于应用及其启动行为。建议从相对较低的值开始，如果您有许多误报和多次重新启动的任务，您可能希望增加时间间隔。
*   最后，我们在最后一行用`CMD`关键字定义实际的探测命令。在我们的例子中，我们将对端口`3000`处的`localhost`的`/health`端点的请求定义为探测命令。本次电话会议预计有三种可能的结果:
    *   命令成功
    *   命令失败
    *   命令超时
后两者被 FlowKit 以同样的方式对待。这向指挥者表明相应的任务可能是不健康的。我确实有意说了*可能*，因为 SwarmKit 不会立即假设最坏的情况，而是假设这可能只是任务的暂时侥幸，它会从中恢复过来。这就是我们有`--retries`参数的原因。在这里，我们可以定义 SwarmKit 应该重试多少次，然后它才能假设任务确实是不健康的，并因此杀死它，并在另一个空闲节点上重新调度该任务的另一个实例，以协调服务的期望状态。
*为什么我们可以在探测命令中使用 localhost？*这是一个非常好的问题，原因是因为 SwarmKit 在探测一个在 swarm 中运行的容器时，会在容器内部执行这个`probing`命令(也就是说，它会做一些类似`docker container exec  `的事情)。因此，该命令在与容器内运行的应用相同的网络命名空间中执行。在下图中，我们从一开始就看到了服务任务的生命周期:
![](img/3c5c8b7a-b275-4aac-8dbe-8ba0e3ba776a.png)
Service task with transient health failure
首先，FlowKit 等待探测，直到开始周期结束。然后，我们进行第一次健康检查。此后不久，探测任务失败。它连续失败了两次，但后来又恢复了。因此，第 4 次运行状况检查再次成功，SwarmKit 让任务继续运行。