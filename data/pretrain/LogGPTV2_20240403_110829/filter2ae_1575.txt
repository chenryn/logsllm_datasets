**前言**

在一次渗透测试中，我们在信息收集阶段发现了一个登录界面。在测试逻辑漏洞时，通过修改参数触发了Debug信息的暴露，从而展开了后续的攻击过程。本文将详细记录此次渗透测试的过程，并希望各位师傅能够指出其中的不足之处。

**1. RCE（远程代码执行）漏洞利用**

通过Debug信息，我们得知目标系统使用的是ThinkPHP CMS。鉴于之前多次成功利用ThinkPHP的日志泄露漏洞，我们首先尝试寻找日志文件。然而，Debug信息显示根目录为`/www/wwwroot/devorder/public`，且只能访问Public目录下的文件，无法直接访问runtime目录，因此需要另寻他法。

在页面底部找到了CMS的具体版本号后，我们在互联网上搜索了该版本的公开漏洞。经过一番查找和测试，最终确认存在由变量覆盖导致的RCE漏洞。关于此漏洞的具体分析可参考相关技术文章。

尝试使用网上提供的Payload时，命令执行函数被禁用，可能是由于`disable_functions`配置的影响。部分命令执行请求直接返回登录界面，无法判断执行状态。为此，我们采用了在线DnsLog平台进行验证。此类平台会提供一个随机子域名，当对子域名发起HTTP或ICMP请求时，平台将接收并记录这些数据包，从而帮助我们判断命令是否已执行。这种方法同样适用于SQL注入测试。更多关于DnsLog平台使用的细节，请参阅专业文章。

尽管尝试了几次Ping操作但未能收到响应，推测可能是ICMP包被拦截。转而采用Curl请求子域名后，终于收到了预期的反馈。需要注意的是，在线工具仅能用于初步验证RCE的存在性，若要获取完整的命令输出结果，则需借助Ceye平台或其他自建VPS服务器。后者可以通过开启Web服务或确保ICMP未被防火墙阻止的情况下，捕获并查看日志中的访问记录以获得命令回显。

例如：
```bash
curl 'http://example.com/index.php?cmd=`whoami`'
```
上述命令会在Linux环境中先执行反单引号内的`whoami`指令，并将其输出作为参数传递给`cmd`。根据实际测试结果，从日志中可以看出目标主机运行着基于Linux的操作系统，并且Web服务是以`www-data`用户身份启动的。

**2. 获取Shell**

尝试使用Bash反弹Shell的方法未果。此外，尝试通过`echo`追加内容至文件的方式也遇到了障碍。最终决定采取Wget下载恶意脚本到指定路径的方式来实现目的。如果各位读者对于上述两种失败尝试的原因有所了解，请不吝赐教。

由于直接利用Debug给出的绝对路径写入WebShell文件失败，我们进一步探索了网站结构，找到了真正的登录页面所在位置。随后将预先准备好的WebShell上传至个人VPS，并再次利用Wget将其下载至正确的目标路径，最终成功获取到了控制权限。

以上便是本次渗透测试过程中针对特定目标所采取的主要步骤和技术手段总结。期待与同行交流更多安全攻防经验。