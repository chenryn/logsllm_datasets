::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
上游文档将此技术称为
[**[DNF]{.application}**]{.strong}，这个工具在上游社区被称为
[**[DNF]{.application}**]{.strong}。因此，RHEL 8 中新的
[**[YUM]{.application}**]{.strong} 工具返回的一些输出会包括
[**[DNF]{.application}**]{.strong}。
:::
尽管 RHEL 8 中使用的 [**[YUM v4]{.application}**]{.strong} 是基于
[**[DNF]{.application}**]{.strong}的，但它与 RHEL 7 中使用的 [**[YUM
v3]{.application}**]{.strong} 兼容。对于软件安装，`yum`{.literal}
命令及其大多数选项的工作方式与 RHEL 7 中的 RHEL 8 相同。
所选 [**[yum]{.application}**]{.strong} 插件和实用程序已移植到新的 DNF
后端，并可安装在 RHEL 7
中的名称下。软件包也提供兼容性符号链接，因此可在通常的位置找到
二进制文件、配置文件和目录。
请注意，[**YUM v3**]{.strong} 提供的旧版本的 Python API
不再可用。您可以将插件和脚本迁移到 [**YUM v4**]{.strong} (DNF Python
API)提供的新 API 中，该 API 稳定且完全受支持。如需更多信息，请参阅 [DNF
API 参考](https://dnf.readthedocs.io/en/latest/api.html){.link}。
:::
::: section
::: titlepage
# []{#managing-software-packages_configuring-basic-system-settings.html#application-streams_managing-software-packages}应用程序流 {.title}
:::
Red Hat Enterprise Linux 8 引进了应用程序流（Application
Streams）的概念。和操作系统软件包相比，现在为用户空间组件提供了多个版本且会更频繁地进行更新。这为自定义
Red Hat Enterprise Linux
提供了更大的灵活性，不会影响平台或特定部署的基本稳定性。
作为 Application Streams 提供的组件可打包为模块（module）或 RPM
软件包，并通过 RHEL 8 中的 AppStream 软件仓库提供。每个 Application
Stream 都有一个生命周期，它与 RHEL 8 的生命周期相同或更短。[Red Hat
Enterprise Linux 8 Application Streams
生命周期](https://access.redhat.com/node/4079021){.link}
页中列出了生命周期较短的应用程序流。
模块是代表逻辑单元的软件包集合：
应用程序、语言堆栈、数据库或一组工具。这些软件包被一同构建、测试并发布。
模块流代表 Application Stream 组件的版本。例如，PostgreSQL
数据库服务器的两个流（版本）位于 postgresql 模块中： PostgreSQL
10（默认流）和 PostgreSQL 9.6。在系统中只能安装 一
个模块流。不同的容器可以使用不同的版本。
详细的模块命令，请参考
[安装、管理和删除用户空间组件文档](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/installing_managing_and_removing_user-space_components/){.link}。有关
AppStream 中可用模块列表，请查看
[软件包清单](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/package_manifest/#chap-AppStream_Modules){.link}。
:::
::: section
::: titlepage
# []{#managing-software-packages_configuring-basic-system-settings.html#searching-for-software-packages_managing-software-packages}搜索软件包 {.title}
:::
[**[yum]{.application}**]{.strong} 允许您使用软件包执行一组完整的操作。
下面的部分描述了如何使用 [**yum**]{.strong}:
::: itemizedlist
-   搜索软件包。
-   列出软件包。
-   列出软件仓库。
-   显示软件包信息。
-   列出软件包组。
-   在 yum 输入中指定全局表达式。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#searching-packages-using-yum_searching-for-software-packages}使用 yum 搜索软件包 {.title}
:::
::: itemizedlist
-   要搜索软件包，使用：
    ``` screen
    # {PackageManagerCommand} search term
    ```
    使用与该软件包相关的术语替换 [*term*]{.emphasis}。
    请注意，`yum search`{.literal}
    命令返回与软件包名称和概述中的术语匹配。这样可加快搜索速度，您可以搜索您不知道名称但您了解相关术语的软件包。
-   要在软件包描述中包含匹配名，请使用：
    ``` screen
    # {PackageManagerCommand} search --all term
    ```
    用您要在软件包名称、概述或描述中搜索的术语替换 [*term*]{.emphasis}。
    请注意 `yum search --all`{.literal} 可进行更详细但更慢的搜索。
:::
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#listing-packages-with-yum_searching-for-software-packages}使用 yum 列出软件包 {.title}
:::
::: itemizedlist
-   要列出所有安装以及可用软件包的信息，请使用：
    ``` screen
    # {PackageManagerCommand} list --all
    ```
-   要列出安装在您的系统中的所有软件包，请使用：
    ``` screen
    # {PackageManagerCommand} list --installed
    ```
-   要列出所有启用的软件仓库中可以安装的软件包，请使用：
    ``` screen
    # {PackageManagerCommand} list --available
    ```
:::
请注意，您可以通过将全局表达式附加为参数来过滤结果。详情请查看 ["在 yum
输入中指定全局表达式"一节](#managing-software-packages_configuring-basic-system-settings.html#specifying-global-expressions-in-yum-input_searching-for-software-packages "在 yum 输入中指定全局表达式"){.xref}。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#listing-repositories-with-yum_searching-for-software-packages}使用 yum 列出库 {.title}
:::
::: itemizedlist
-   要列出您系统中所有启用的库，请使用：
    ``` screen
    # {PackageManagerCommand} repolist
    ```
-   要列出系统中所有禁用的软件仓库，请使用：
    ``` screen
    # {PackageManagerCommand} repolist --disabled
    ```
-   要列出启用和禁用的存储库，请使用：
    ``` screen
    # {PackageManagerCommand} repolist --all
    ```
-   要列出有关存储库的附加信息，请使用：
    ``` screen
    # {PackageManagerCommand} repoinfo
    ```
:::
请注意，您可以通过传递 ID
或库名称作为参数或者附加全局表达式来过滤结果。详情请查看 ["在 yum
输入中指定全局表达式"一节](#managing-software-packages_configuring-basic-system-settings.html#specifying-global-expressions-in-yum-input_searching-for-software-packages "在 yum 输入中指定全局表达式"){.xref}。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#displaying-package-info-with-yum_searching-for-software-packages}使用 yum 显示软件包信息 {.title}
:::
::: itemizedlist
-   要显示一个或多个软件包的信息，请使用：
    ``` screen
    # {PackageManagerCommand} info package-name
    ```
    使用软件包名称替换 [*package-name*]{.emphasis}。
:::
请注意，您可以通过将全局表达式附加为参数来过滤结果。详情请查看 ["在 yum
输入中指定全局表达式"一节](#managing-software-packages_configuring-basic-system-settings.html#specifying-global-expressions-in-yum-input_searching-for-software-packages "在 yum 输入中指定全局表达式"){.xref}。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#listing-package-groups-with-yum_searching-for-software-packages}使用 yum 列出软件包组 {.title}
:::
::: itemizedlist
-   要查看已安装的和可用组的数量，请使用：
    ``` screen
    # {PackageManagerCommand} group summary
    ```
-   要列出所有安装的和可用的组，请使用：
    ``` screen
    # {PackageManagerCommand} group list
    ```
    请注意，您可以通过为 `yum group list`{.literal}
    命令添加命令行选项（`--hidden`{.literal}，`--available`{.literal}）过滤结果。更多可用选项请查看
    man page。
-   要列出特定组群中包含的强制和可选软件包，请使用：
    ``` screen
    # {PackageManagerCommand} group info group-name
    ```
    用组群的名称替换 [*group-name*]{.emphasis}。
:::
请注意，您可以通过将全局表达式附加为参数来过滤结果。详情请查看 ["在 yum
输入中指定全局表达式"一节](#managing-software-packages_configuring-basic-system-settings.html#specifying-global-expressions-in-yum-input_managing-software-package-groups "在 yum 输入中指定全局表达式"){.xref}。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#specifying-global-expressions-in-yum-input_searching-for-software-packages}在 yum 输入中指定全局表达式 {.title}
:::
`yum`{.literal} 命令允许您将一个或多个 [*glob 表达式*]{.emphasis}
作为参数过滤。当作为参数传递给 `yum`{.literal}
命令时，全局表达式必须被转义。要确定将全局表达式传递给
`yum`{.literal}，请使用以下方法之一 :
::: itemizedlist
-   使用双引号或单引号包括整个全局表达式。
    ``` screen
    # {PackageManagerCommand} provides "*/file-name"
    ```
    用文件名替换 [*file-name*]{.emphasis}。
-   在它们前面使用反斜杠(`\`{.literal})符号转义通配符字符。
    ``` screen
    # {PackageManagerCommand} provides \*/file-name
    ```
    用文件名替换 [*file-name*]{.emphasis}。
:::
:::
:::
::: section
::: titlepage
# []{#managing-software-packages_configuring-basic-system-settings.html#installing-software-packages_managing-software-packages}安装软件包 {.title}
:::
下面的部分描述了如何使用 [**yum**]{.strong}:
::: itemizedlist
-   安装软件包。
-   安装软件包组。
-   在 yum 输入中指定软件包名称。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#installing-packages-with-yum_installing-software-packages}使用 yum 安装软件包 {.title}
:::
::: itemizedlist
-   要安装软件包以及所有软件包的依赖软件包，请使用：
    ``` screen
    # {PackageManagerCommand} install package-name
    ```
    使用软件包名称替换 [*package-name*]{.emphasis}。
-   要同时安装多个软件包及其依赖软件包，请使用：
    ``` screen
    # {PackageManagerCommand} install package-name-1 package-name-2
    ```
    使用软件包名称替换 [*package-name-1[ *和*
    ]{.emphasis}package-name-2*]{.emphasis}。
-   当在一个 [*multilib*]{.emphasis} 系统（AMD64、Intel 64
    机器）中安装软件包时，您可以指定软件包的构架，方法是将其附加到软件包名称中：
    ``` screen
    # {PackageManagerCommand} install package-name.arch
    ```
    使用软件包的名称和构架替换 [*package-name.arch*]{.emphasis}。
-   如果您知道要安装的二进制代码的名称，但不知道软件包名，则可以使用到这个二进制代码的路径作为一个参数：
    ``` screen
    # {PackageManagerCommand} install /usr/sbin/binary-file
    ```
    使用二进制文件路径替换 `/usr/sbin/binary-file`{.literal}。
    [**[yum]{.application}**]{.strong} 搜索软件包列表，找到提供
    `/usr/sbin/binary-file`{.literal}
    的软件包，并提示您是否安装该软件包。
-   要从本地目录中安装之前下载的软件包，请使用：
    ``` screen
    # {PackageManagerCommand} install /path/
    ```
    使用到该软件包的路径替换 [*/path/*]{.emphasis}。
:::
请注意，您可以通过显式定义如何解析参数来优化软件包搜索。详情请查看 ["在
yum
输入中指定软件包名称"一节](#managing-software-packages_configuring-basic-system-settings.html#specifying-a-package-name-in-yum-input_installing-software-packages "在 yum 输入中指定软件包名称"){.xref}。
:::
::: section
::: titlepage
## []{#managing-software-packages_configuring-basic-system-settings.html#installing-a-package-group-with-yum_installing-software-packages}使用 yum 安装软件包组 {.title}
:::
::: itemizedlist
-   要根据组名称安装软件包组，请使用：
    ``` screen
    # {PackageManagerCommand} group install group-name