'iso-8859-1-string 0ut id :length length)))
(string (code-char first-byte)) rest))))
'iso-8859-1-string in :length (1- length))))
www.TopSage.com
(in-padding))
25.8
支持 ID3的多个版本
301
---
## Page 319
容易理解了。举个例子，下面是使用了optional槽的id3v2.3-tag的定义：
的变量来参数化地定义这个新类型。
的参数化的二进制类型就足够好了。你可以使用一个类型的名字和一个代表是否实际读写该类型
展的头标志位被设置时会被包含进来，它是标签其余部分的一个四字节的循环余校验（CRC)。
以及另一个用来指定标签中含有多少个字节补白的四字节的整数。“第4个可选字段，当第15个扩
被设置时包含在标签中。它们包括一个用来指定扩展头大小的四字节的整数,两个字节的标志位，
据所读取的顿类型进行参数化选择的形式。目前，假设你将通过为id3-frames类型描述符添加
失的槽frames。由于版本2.2和2.3使用了不同的帧格式，所以你必须将id3-frames类型改成根
tag类的定义比较简单也就不奇怪了，它继承了来自新的iα3-tag类的大部分槽并添加了一个缺
2.3之间发生了变化，这意味着你将使用不同的类来表示版本2.2的帧和对应的版本2.3的帧。
一个:frame-type参数来做到这点，如下所示：
选的扩展头部字段所扩展，这可以通过flags字段的值来检测到。其次，帧格式在版本2.2和版本
302
① 如果一个标签带有扩展的头部，那么可以用这个值来检测帧数据的结束位置。不过，如果这个扩展的头部没有使
 使用if作为参数的名字可能看起来有些奇怪，但它使得这个optional类型描述符变得更加
二进制数据处理库没有提供对于二进制类中的可选字段的任何特别的支持，但是看起来正规
id3v2.3类带有可选的字段，因此会稍微复杂一些。4个可选字段中的前3个将在flag的第6位
由于新的id3-tag类以最初为了表示版本2.2标签所写的那个为基础，所以新的id3v2.2-
(define-binary-class id3v2.3-tag (id3-tag)
(define-binary-type optional (type if)
(define-binary-class id3v2.2-tag (id3-tag)
版本2.2和2.3的标签在两方面上有所区别。首先，一个版本2.3标签的头部可能被至多四个可
(define-tagged-binary-class id3-tag ()
用，那么就继续使用老方法，不值得添加新代码以不同的方式来做这件事。
((extended-header-size
((frames (id3-frames :tag-size size :frame-type ‘id3v2.2-frame))))
(:writer (out value)
(:reader (in)
(:dispatch
((identifier 
(frames 
(padding-size
(extra-flags 
(when if (write-value type out value))))
(when if (read-value type in)))
(ecase major-version
(size
(flags
(revision
(major-version 
crc
第25章
‘id3v2.3-tag))))
实践：ID3解析器
id3-tag-size))
u1)
(iso-8859-1-string :length 3))
(optional
www.TopSage.com
(optional
(optional
:type
:type
:type
'u4 :if (extended-p flags)))
(extended-p flags)))
(extended-p flags)))
---
## Page 320
id3v2.3-frame。其中id3v2.2-frame类和最初的id3-frame类完全相同。
25.9版本化的帧基础类
面这样将其定义成一个广义函数是合理的：
头的大小在版本2.2和2.3之间发生了改变。由于该函数在结果上的区别取决于帧的类，所以像下
并且在计算帧大小的时候，需要使用一个函数frame-header-size来代替字面数值6，因为帧
参数。
尽管如此，你需要对id3-frames和read-frame做一些小的改动以使其支持额外的frame-type
数，并在该整数中的指定位被设置时返回真。
之前你定义了单一的基础类用于所有的帧类型，现在，你需要两个类id3v2.2-frame和
改动发生在对read-frame和write-value的调用中，这里你需要传递frame-type参数，
和版本2.2的标签类一样，帧槽被定义为类型id3-frames，其中帧类型的名字作为参数传递。
(defun extended-p(flags)(logbitp 6 flags))
其中extended-p和crc-p是用来测试特定标志位是否被传递的助手函数。为了测试一个整
(define-tagged-binary-classid3v2.2-frame ()
下一节，在定义了新的帧类以后，你将在该广义函数上定义必要的方法。
(defgeneric frame-header-size(frame))
(define-binary-type id3-frames (tag-size frame-type)
(defun crc-p （flags extra-flags)
(（id（frame-id:length3))
(handler-case (read-value frame-type in)
(:reader（in)
(and（extended-pflags)（logbitp 15extra-flags)))
(:dispatch (find-frame-class id)))
(:writer(out frames)
（sizeu3）)
(in-padding(）nil)))
(loop with to-write=tag-size
(loop with to-read= tag-size
finally（loop repeat to-write do（write-byte 0out)))))
(decf to-write (+(frame-header-size frame)(size frame)))
do
forframe
finally
whileframe
forframe
while(pluspto-read)
(write-value frame-typeoutframe)
(decf to-read(+(frame-header-size frame)(size frame)))
frame
(read-frame frame-type in)
prepeat(1-to-read)do(read-bytein))))
www.TopSage.com
25.9
---
## Page 321
只有唯一的附加字段，所以看起来还不算太坏。但如果你将这种思路用在其他具体的帧类上，尤
generic-frame，为每个基础类定义一个。定义这些类的一种方法如下所示：
了两个版本相关的基础类id3v2.2-frame和id3v2.3-frame。所以，你需要定义两个新版本的
25.10
在帧的size值中了。
2.3的帧基础类以及相关的助手函数：
含有可选字段，具体由三个帧标志位的值来控制。
节增加到4个字节，而另有两个字节的标志位被添加进来。另外，和版本2.3的标签一样，帧可以
304
①这些标志位，除了控制是否包含可选字段以外，还可以影响标签中其余部分的解析方式。特别地，如果第七个标
不过，这里面不太好的一点是这两个类除了基类以外其余部分都相同。在本例中，由于它们
(define-binary-class generic-frame-v2.2 (id3v2.2-frame)
在最初的定义中，id3-frame是generic-frame的子类。但现在id3-frame已经被替换成
版本2.3帧中的可选字段并不在这些计算中作为帧头的一部分而计入，因为它们已经被包括
另一方面，id3v2.3-frame需要更多的修改。帧标识符和大小字段在版本2.3里各自从3个字
(define-binary-class generic-frame-v2.3 (id3v2.3-frame)
有了这两个函数，现在你可以实现广义函数frame-header-size上的方法了。
((s6et1 9 datqbot) (sbets) d-paad<ioua-aurery ungap)
((s6e13 L datq6ot) (s6e1s) d-passaiduos-awrery ungap)
(define-tagged-binary-class id3v2.3-frame ()
数并向其传递所有标志位。如果帧被压缩或加密了，那么你应当实例化一个通用帧来保存数据。
(defmethod frame-header-size ((frame id3v2.2-frame)) 6)
(defun frame-grouped-p (flags) (logbitp 5 flags))
库，那么就不得不涉及到这些领域了。一个简单的不完整解决方案是改变find-frame-class来接受第二个参
在实践中这些选项很少出现，但如果真的出现的话，目前只能忽略它们。不过如果你打算实现一个产品级的ID3
志位被设定，那么实际的帧数据将使用zlib压缩算法进行压缩。而如果第六个标志位被设定，那么数据将被加密。
((data (raw-bytes :size size))))
((data (raw-bytes :size size))))
(:dispatch (find-frame-class id)))
((id
(grouping-identity 
版本化的具体帧类
encryption-scheme
flags
第25章实践：ID3解析器
(optional
(optional
u2)
(frame-id :length 4))
www.TopSage.com
:type
ul
'ul
'u4
:if (frame-grouped-p flags))))
:if
，“考虑到这些变化，可以像下面这样定义版本
(frame-encrypted-p flags)))
---
## Page 322
编辑器，那么你可能需要实现所有的帧。
需实现那些含有你所关心的信息的帧所对应的类即可。另一方面，如果你打算编写一个ID3标签
取决于你正在编写哪种类型的应用。如果你最关心的是从已有的ID3标签中解出信息，那么你只
因为正如我之前所提到的，ID3标签规范中指定了许多几乎从不使用的帧。当然，你所关心的帧
特定帧的类了。不过，在就此深入下去之前，应该先停下来思考一下究竟哪些帧是你所关心的，
25.11你实际需要哪些帧
正确的版本化的类。
相应的在版本2.2和2.3的帧下都可以正确工作的方法。
尤其当版本2.3的帧里含有任何可选字段时。因此，你需要定义一个广义函数data-bytes 以及
数来访问你正在读写的对象并将其传递给size。并且需要考虑整个帧的大小在字节数上的区别，
在其定义中访问size槽。因此，你必须使用前一章结尾处讨论的current-binary-object函
这种思路唯一的难点是，如果generic-frame没有扩展任何一个帧基础类的话，那么你就无法
用来作为基类的类，它和一个版本相关的基类可以共同使用来产生一个具体的版本相关的帧类。
浪费很多时间。
其是那些带有更复杂的内部结构但在两个ID3版本上却又完全相同的帧类，那么这些重复定义将
有了使用通用帧来同时读取版本2.2和2.3标签的能力，就可以开始实现那些代表你所关心的
(defun find-frame-class (id)
另一种你实际应当采用的思路是，将generic-frame类定义为一个合成类（mixin)：一个
有了这些类的定义，现在你可以重定义find-frame-class函数，根据标识符的长度来返回
然后你可以扩展版本相关的基础类和generic-frame类，来定义出版本相关的通用帧类。
(define-binary-class generic-frame-v2.2 (id3v2.2-frame generic-frame) ())
(defmethod data-bytes ((frame id3v2.3-frame))
(defmethod data-bytes ((frame id3v2.2-frame))
(defgeneric data-bytes (frame))
(define-binary-class generic-frame ()
{let
(size frame))
((data (raw-bytes :size
'generic-frame-v2.3)))
'generic-frame-v2.2)
(if
(frame-compressed-p flags) 4 0)
(data-bytes (current-binary-object))))))
flags)
www.TopSage.com
0)/））
25.11你实际需要哪些帧
305
---
## Page 323
MP3文件，并将在这些文件上调用frame-types得到的结果组合在一起。我们知道nUNION是
个值为#'string=的：test参数，当两个元素是相同的字符串时，把它们视为是等价的。
在一个DELETE-DUPLICATES中以保证结果的简洁性。你应当在DELETE-DUPLICATES中使用一
曲集的部分、年份、风格、以及编码程序的帧。
似。这里所辨认出的一些特定的文本信息帧其实是用来表示歌曲标题、艺术家、专辑、音轨、歌
都是文本信息帧并且都具有相似的结构。而COM是评论帧的标识符，其结构也跟文本信息帧相
想知道这些帧的ID，这可以通过下面这样一个简单的MAPCAR来实现：
到它。
MP3文件中实际用到了哪些帧。你需要从一个id3-tag的实例开始，可以通过read-id3函数得
306