www.TopSage.com
---
## Page 307
文件处理
find（续）
com
type t
选定类型：的文件，类型是单一字母：d为目录、f为文件、1为符号性进
接。还有其他字母表示其他的文件类型，不过很少用到。
-user u
选定用户u拥有的文件（u为用户ID名称或端号）。
行为
find向下深入目录树状结构，寻找所有在这些目录树下的文件。接下来，应
用其命令行选项所定义的选定器，选择文件供进一步操作、通常是显示它们
的名称，或产生类纵18的完长列出。
登告
由于find默认会向下寻找目录，所以当它在大型文件系统中寻找时，会花费
银长的执行时间。
find输出的是未排序的结果，
find提供额外选项，可对选定的文件执行任意操作。由于这是一个潜在的危
险，我们不建议使用这类选项，除非你的系统拥有严格的控制。
find不同于1s与Shell的地方是：它没有隐藏文件的概念，也就是说：就算是点号开
头的文件名，find还是能找到它。
另一点不同于1s的是：find不排序文件名。它只是以它读到目录的顺序依次显示，事
实上这个排序应是随机的（注7）.因此，你可能得在find命令之后，通过管道加入sort
最后一个与ls不同的地方是：当find处理的是目录时，它会自动递归深入目录结构，
寻找在那之下的任何东西，除非你使用-prune选项要求不要这么做。
当find找到文件要处理时，它会先执行命令行选项所设置的选择限制，如果这些测试
成功，则将名称交给内部的操作程序处理。默认操作是将名称打印在标准输出上，不过
如果使用-exec选项，则可提供命令模板，在其中名称可以被替换，并再执行该命令。
旧的find实现会要求明确地指出-print选项，才能产生输出，不过幸好这样的不良
设计，已在现行所有实现中完成修正，至少我们测试过的都已完成修正，包括POSIX。
注7：
四为用户习惯在1s与Shel遥配字持展开下，看到排序后的列表，因此常常认定目录必
以排序后的序存储名称。但如果你编写一个调用opendir（）、readdir（）以及
closedir（）程序库的程序，你就会发现gsort（）电常要是可移植的！
www.TopSage.com
---
## Page 308
296
第10章
在选定的文件上自动执行命令是很强的功能，但也极度危险。如果该命令具破坏性，那
么最好是让find先将列表产生在临时性文件中，再由可胜任的人小心地确认，决定是
否将命令进一步自动化处理，
使用find进行破坏性目的的Shell脚本，在编写时必须格外小心，之后，也必须彻底执
行调试，例如在破坏性命令开始前插人echo，这么一来你可以看看会有哪些操作，而
不必真地执行它。
我们先来做一个最简单的例子：单纯使用find寻找当前目录树下的所有东西。正如前
面的例子、我们先从空的目录开始，之后再将它填人一些空文件：
$ 18
确认这是一个空目录
$ mikdir -p eub/eub1
建立一个目录树
S touch ose two ,uno ,dos
在该目录最上层建立一些空文件
$ touch sub/three eub/sab1/four
在树状结构较深层的地方建立一些空文件
$find
从此开始寻找所有东西
./sub
. /sub/subL
 /sub/sub1/four
. /sub/three
- /tiwo
• /one
• /,uno
- / .dos
这个混乱的列表可以很轻松地完成排序：
S find 1 ic_ALu=C sort
以传统斯序，排序find的输出结果
./ .0o8
 - / -uno
. /one
. /sub
. /sub/sub1
xpog/tqns/qns / *
, /sub/ three
. /two
设置LC_ALL取得传统的（ASCII）排序顺序，这是因为现行sort实现都与locale相
关，见4.1.1节。
find还有一个好用的选项：-ls，可得到如指定了ls-liRs的输出结果，不过，它
缺乏进一步的选项控制这个元长显示的格式：
www.TopSage.com
---
## Page 309
文件处理
297
S find -ls
寻找文件，并使用1s风格的输出结果
1451550
4 drvecr-xr--
3jones
deve1
4096 Sep 26 09;40
1663219
X-DORDRIP 
3 jones
deve1
4096 Sep 26 09:40 ./sub
1663220
4 drwoxrwxr-x
2  jones
deve1
4096
Sep 26 09:40 ./sub/mub1 
1663222
0 -Iw-W=-
1 jones
1 Jones
deve1
0 Sep 26 09:40 - /sub/subl/four
1663221
0 -rw-rw---
devel
0 Sep 26 09:40 ./sub/three
1451546
-rw-rw-r--
1 jones
deve1
0 Sep 26 09:40 -/two
0 Sep 26 09:40
-/one
1451547
0 =rw-rw---
1 Jones
deve1
1451548
1. jones
devel
0 Sep 26 09:40 -/ .dos
0 Sep 36 09:40 
/,uno
1451549
0 -W-W---
1 Jones
deve1
$ find -1s 1 sort -k11
寻找文件，并以文件名排序
1451550
4 dnoxr-x-
3 jones
devel
4096 Sep 26 09:40
1451549
-IAI-AI- 0
1 Jones
deve1
0 Sep, 26 09:40 -/,do8
1451548
0 -nrrrr--
1 jones
deve1
0 Sep 26 09:40 -/ .uno
1451546
1663219
4 dnoxrwxr-x
3Jones
1 jones
deve1
deve1
4096 5ep 26 09:40 -/sub
0Sep 26 09 :40./one
1663220
0 -r-n-r--
4 dnetnor-x
1Jones
2
joees
deve1
4096 Sep 26 09:40 ./eub/sub1
1663222
deve1
mos/tqms/qne/* 0b160 9z des 0
1663221
0 -Iv-r-r--
1 jones
Geve1
0 Sep 26 09:40 -/sub/three
1451547
---R-A-0
1 jones
deve1
0 .$ep 26 09:40 -/two
为作对照：这里我们以1s显示相同的文件meta数据：
$ 1e -1iRs *
1jones
显示18退归的元长输出
59625L
752964
0 --W---
deve1
02003-09-26 09:40 to
0 200309-26*09:40 one
0 -rv-rw---
1jones
deve1
sub:
tota1 4
4 drxoxrwxr-x
2jones
deve1
4096200309-2609:40 8ub1
752968
0 -W-rW---
1 jones
deve1
0 2003-0926 09:40 three
sub/sub1:
total0
0 --r---
1 Jones
deve1
0. 20030926 09:40 foux
现在我们给find命令一些文件模式：
S find 'o*'
寻找此目录下，以“o开头的文件
one
$ find eub
在目录sub下寻找文件
sub
sub/sub1/four
sub/sub1
sub/three
接下来，我们抑制目录向下寻找的功能：
S find -prune
不要在此目录下导找
相同操作的另一种方式
www.TopSage.com
---
## Page 310
298
第10南
S find *-prune
导找此目录下的文件
lopSage.com
one
two
$ 1s -d *
列出文件。但没有目录内容，
onesub two
请注意：没有文件或目录参数，是等同于当前的目录，所以前两个例子只会报告该目录。
然面，星号会匹配每一个非隐藏文件，所有第三个find的运行，就如同ls-d，只不
过它是一行显示一个文件。
这时便是试试find儿个强大选项的时候了。我们从所有者与组的选定开始：选项
-group与-user都需要一个接着的符号名称或数值识别码.因此，find/-userroot
会启动执行很久的查找文件操作，它会在root拥有的整个树状结构中查找文件。除非
此命令是由root执行，否则目录权限几乎一定会隐藏此树状结构的主要部分。
你可能会预期在登录目录树中的所有文件都属于你。要确认这件事，只要执行find
SHOME/.！-uSerSUSER即可，惊叹号是非的意思，也就是说，这条命令就是：从
我的根目录开始，列出所有不属于我的文件。HOME与USER两个都是标准ShelI变量，
用于定制你的登录，所以这个命令适用于所有人。我们用SHOME/，而非只是SHOME，
使得如果SHOME为符号连接，命令也可正常运行。
-perm需要接上一个八进制字符串的权限掩码，其可以具有选用的正/负号。如掩码不
带任何正负号，则必须有确实的匹配权限。如果为负号，则所有的位设置都必须匹配。
如果为正号，则至少须有一个位设置要匹配，看来有点复杂，我们将惯用的方式放在表
10-1中。