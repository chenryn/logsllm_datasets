(see below). Xenon’s MSM can be conﬁgured with a thresh-
old for the number of security violations allowed by a guest.
If a guest attempts more unauthorized hypercalls than the
threshold then the guest is terminated by the hypervisor,
and the attempt is both reported to the console and perma-
nently recorded in the MSM security log. Since all resources
are accessed via hypercalls, checking on a per-hypercall ba-
sis provides essentially the same protection. The distinction
is that Xen can have two individual resources for a single
domain labeled with diﬀerent security labels. Xenon either
allows the resource class to a domain or denies it.
MSM includes hooks that check the hypercall privileges of
the guest, before the VMM begins execution of the hyper-
call. Hypercalls in Xen are implemented as a simple call to
an entry in the guest’s hypercall page, after the guest places
all parameters in general purpose registers. Each hypercall
page contains a mode-speciﬁc piece of trampoline code [8]
that bounces the ﬂow of control in a way that is appro-
priate for the guest’s mode of operation, e.g., HVM mode
for guests using hardware virtualization. For example, in
the case of a guest running in HVM mode on an Intel pro-
cessor, the guest’s hypercall page contains trampoline code
that executes a vmcall instruction which transfers the ﬂow
of control into the VMM to perform the hypercall. In our
HVM mode example, the VMM code to execute the hyper-
call is in C function hvm_do_hypercall. The MSM hook is
placed in this C function, to check all Intel HVM mode guest
hypercalls.
Basing resource management on the VMM “API” hyper-
calls rather than on individual resources enables a signiﬁcant
reduction in the size and complexity of the security policy
speciﬁcation, as depicted by the diagram in Figure 2. Be-
cause a single hypercall controls many resources, the number
of rules can be reduced, in comparison to a policy that spec-
iﬁes individual resources directly. The reduction in security
enforcement code makes this clear. The drawback to this ap-
proach is the need to construct a resource-to-hypercall map,
as part of an assurance argument, to show that all resources
are protected. Since an assurance argument will need list all
resources anyways, the additional map is not a signiﬁcant as-
surance burden. Describing policies using per-resource rules
will eliminate this map, but cause a combinatorial explosion
of rules that is less intuitive.
4.5 Protecting Multicall
The multicall feature is potentially vulnerable to a time-
of-check-time-of-use attack against the separation policy. Mul-
ticall allows guests to reduce virtualization hypercall over-
head by grouping multiple hypercall requests into a single
multicall hypercall. A typical use would be grouping mul-
tiple requests to update a page table. Multicall requests
pass in a variable-length list of guest handles that point to
guest memory locations. Each list entry is a data structure
corresponding to a single hypercall request. This list is not
copied into the VMM’s address space, to save time but also
to avoid overrun attacks.
The initial trampoline-based security check can only con-
423
XSM
hypercalls
API
resource-based
policy rules
hypercalls
API
API-based
policy rules
resources
MSM
resources
Figure 2: Comparison of resource- and API-based
security policy rules.
ﬁrm a guest’s privilege to perform multicalls; it cannot check
the entire list, because of the impact that would have on pre-
serving the Xen-compatible interface of Xenon. Even if the
trampoline-based check could conﬁrm every entry on the list,
a guest could still perform a time-of-check-time-of-use attack
by modifying the list after the multicall was initiated. So the
separation policy component of the MSM security module
checks each list entry as part of the code that processes the
multicall list internally. Each hypercall request is checked
just before it is performed.
4.6 Logging
The MSM security logging feature allows the Xenon sepa-
ration VMM to report its security events to external security
management layers or intrusion detection and prevention
systems. Conventional Xen’s XSM does not provide logs
of security activity. This is not unusual, because persistent
logging of events of any kind is problematic for VMMs. Ex-
cepting a rudimentary console for the local host hardware,
a VMM does not have its own ﬁle system, high-level net-
work interfaces (for remote persistent storage), or even disk
drives per se. Instead, a VMM manages or exports devices
such as block or serial devices, so any persistent storage
that could be used for sensor data must be implemented by
a guest. Conventional Xen’s non-security VMM logging is
implemented as writes to Xen’s local console device.
MSM logging collects security events as ﬁxed-length (cur-
rently 512 byte) records held in VMM memory. A single-
purpose logging guest is given the privilege of registering
with the VMM and subsequently pulling log records from
VMM memory. All security logging interaction with the
VMM is through a logging-speciﬁc hypercall that is con-
trolled through the separation policy, so only authorized
guests can manipulate the security logs. A typical conﬁgu-
ration would be to have the logger directly export the log
records into to a remote host, so that the log data could be
incorporated into intrusion detection systems.
Xenon uses a special purpose logging guest operating sys-
tem based on Xen’s mini-os. This gives the logging guest a
small code base, less than 10,000 lines of source code in its
present form, and a correspondingly small attack surface.
4.7 Hypercall Flooding
The Xenon prototype also includes a simple defense against
hypercall ﬂooding attacks. In a hypercall ﬂooding attack, a
VMM.VM
Xen.alpha
Xen.delta
Xenon.alpha
Xenon.delta
Xenon.alpha
1st Run
167.02
198.19
167.25
199.00
167.14
2nd Run
167.11
197.95
167.13
199.16
167.06
3rd Run Change Set
0
0
294
305
343
167.04
197.94
167.31
199.21
167.21
Table 2: Single-VM in seconds for kcbench. Change
Set 0 is the Xen base. VM alpha is a PVops HVM
Linux guest; VM delta is a paravirtualized Linux
guest.
malicious guest generates a large number of hypercalls in an
attempt to consume VMM resources. The malicious guest
makes specious hypercalls but discards the results and does
not wait for the VMM response. This is analogous to net-
work attacks based on SYN ﬂooding [3]. The Xenon VMM
can be conﬁgured to measure and limit the hypercall rate
for its guests. Our measurements show a typical rate of 30
hypercalls per millisecond for domain 0, running on either
the Xen VMM or Xenon. The Xenon prototype can be con-
ﬁgured to limit the hypercall rate in terms of hypercalls per
millisecond. The defense is simple and adds no measurable
overhead.
4.8 Minimizing Overhead
One of the goals of the Xenon project is to reduce the
runtime space and time performance overhead of both the
security and assurance modiﬁcations to conventional Xen.
We tested each change for performance, using a variety of
commodity hardware, with several benchmark tools. The
benchmarks were conﬁgured to stress test the prototype
VM system while measuring its performance. We have been
able to keep the runtime overhead within acceptable lim-
its by backing out any changes that perform poorly. This
approach let us simplify the code by over 3000% with no
impact (the raw data shows the simpliﬁed code actually
ran faster, but the diﬀerence was in the noise). More in-
formation about Xenon performance measurements are pre-
sented in [21]. We present a brief table here of single VM
data from a kcbench Linux compiler benchmark, as Ta-
ble 2. The data is for a machine using Hardware Assisted
Paging (HAP), with an Intel R(cid:27) S1200BTL base board, a
single Intel R(cid:27) Xeon R(cid:27) (E31270) processor (3.20GHz) and
16GiB of memory. The domain 0 kernel was Fedora 3.1.9-
1.fc16.x86 64; the same kernel was used for the PVops HVM
guests and the paravirtualized guest was installed from the
same Fedora 16 ISO image. The examples are for diﬀer-
ent Xenon change sets, to show how we have been able to
maintain performance as the internals are simpliﬁed.
An important part of security overhead is the cost of
factoring Xen’s single large domain 0 into multiple single-
purpose security domains. Each one of these domains brings
with it some scheduling and context switch overhead. The
overhead of the MSM logging domain is so small that we
were unable to measure it accurately, that is, the cost of
logging is negligible. The data for change set 343 in Table
2 shows the performance change caused by running the se-
curity logger; notice that for the 2nd run, the measurement
actually shows the VM system to be faster with the logger
than without, i.e. the diﬀerence is not measurable in this
test.
424
5. JUSTIFIABLE ASSURANCE
Given the separation VMM concept and a working proto-
type, we need a more concrete notion of highest justiﬁable
assurance for modern commodity hardware. We need to un-
derstand how orthogonal feature creep reduces the value of
individual components of an assurance argument. The key
question is: does orthogonal feature creep reduce the value
of a speciﬁc measure to the point where it is no longer jus-
tiﬁed?
We can use the amount of rework required by a change in
hardware as the measure of value reduction. The fraction of
a work product that must be changed to preserve an assur-
ance argument, with respect to hardware variation, can be
viewed as the “cost” of the hardware variation.
Using this perspective, we can identify speciﬁc assurance
measures that are less sensitive to orthogonal feature creep
than complete mathematical veriﬁcation but still exceed com-
mercial/open source best practice for VMM construction.
For the Xenon project, we found the following 6 measures
to be justiﬁable for modern commodity hardware. These
measures also increase assurance beyond commercial/open
source best practice, Common Criteria EAL4, or both. We
do not consider our collection of measures to be deﬁnitive for
either the concept of highest assurance justiﬁable for modern
commodity hardware or separation VMMs.
Instead, they
provide a consistent package of assurance measures that can
be applied to a separation VMM to give higher assurance
than commercial/open source best practice etc. but not be
as sensitive to orthogonal feature creep.
5.1 Reduced Features and Size
Commercial/open source best practice does not reduce
features (or the size of a product) to obtain greater secu-
rity. Reducing the features of a software product strongly
tends to reduce both its market share and installed base.
VMM software also suﬀers from orthogonal feature creep.
So a key element of the separation VMM concept is to push
back against this creep by directly reducing the features of a
conventional VMM, and then reducing the size and complex-
ity of the remaining software. The reduction is constrained
by the requirement for the reduced VMM to virtualize pre-
cisely the same guests that the conventional VMM supports.
Reducing the features of a product strongly tends to reduce
both its attack surface and the total residual ﬂaws present in
the product. Reducing product features is easily justiﬁed as
an assurance measure. It reduces the likelihood that a given
hardware variation will impact the VMM and reduces the
total amount of rework because the both the product and its
assurance argument is smaller. Feature and size reduction
is also essential to the separation VMM concept.
Space limitations prevent us from explaining all of the
feature and size reductions we applied in constructing the
Xenon prototype. We can give a few examples
• support for the Itanium processor: our initial decision
was simply to limit the source code to a single instruc-
tion set architecture (ISA). We dropped the Itanium
because there is a greater variety of commodity hard-
ware for the x86 ISA family,
• support for the 32-bit x86 processor: we removed sup-
port for this older member of the x86 ISA family,
• transcendent memory: the design of this feature does
not properly scrub memory before re-using it and the
feature is not essential,
• supervisor mode kernel: this feature is a mode of VMM
execution that supports running a single VM with the
same privilege level as the VMM itself. This single
supervisor mode kernel VM is the only VM that can
run in this mode. This VMM mode is not essential to
normal virtualization.
5.2 Reduced Complexity
In this case, we mean reducing complexity to be lower than
commercial/open source best practice. Developing simple
but correct and eﬃcient code is time consuming; simplify-
ing code beyond commercial/open source best practice not
only reduces the likelihood of security weaknesses but also
makes it easier to review by automatic or manual means.
Simplifying the VMM internals to satisfy CC requirement
ADV INT.2 also increases assurance beyond EAL4.
In our prototype, we simpliﬁed code by the application of a
small set of patterns. This was only possible because a great
deal of the Xen code consistently uses other patterns and it
is possible to re-factor the Xen patterns into the Xenon pat-
terns. This refactoring still requires developers analysis; it is
probably not practical to use code generation or other ma-
chine translation techniques to generate the simpliﬁcations.
In some cases, e.g. in bringing the complexity of C function
x86_emulate down from 2,450 to 27 2, it was necessary to
design an intermediate form of the code, to support chang-
ing and testing the new code in small increments. The ﬁnal
stage of the re-factored code follows the Xenon simpliﬁcation
patterns, but the mapping is not direct from old to new.
The use of a small set of patterns to re-factor the Xen code
is essential to the relatively low cost of keeping pace with the
conventional Xen code base. Because of the patterns, an
experienced programmer can quickly spot the points where
the Xenon code should be changed, when reading a Xen
patch.
5.3 Programming Language Subset
Use of a programming language subset exceeds commer-
cial/open source best practice for VMMs. While subsets are
commercial best practice for safety critical embedded sys-
tems, subsets are specialist practice for general commercial
software development. Specialist use of subsets for safety
critical systems makes the case that subsets provide greater
assurance. Use of a programming language subset exceeds
all Common Criteria assurance requirements. For a given
language, the use of a carefully designed subset should in-
crease assurance with minimal risk from hardware variation.
For the Xenon project, we chose Hatton’s EC– subset [12]
of the C programming language as a basis. We had to mod-
ify this subset because the EC– subset is designed for ISO
C 9899 but Xen is implemented using the GCC compiler
in a way that does not conform to the ISO standard. For
example, Xen’s implementation contains many uses of the
VARARGS macros, which breaks the ISO C standard. For
Xenon the modiﬁed subset uses the EC– rules that are inde-
pendent of ISO C, and then conforms to the GCC features
2The careful reader will have noticed that 27 is less than
the value of 70 mentioned earlier. After simpliﬁcation, func-
tion x86_emulate is no longer the most complex function in
Xenon.
425
Xen uses to enhance the assurance of the code, e.g.
-Werror ﬂag.
5.4 Formal Security Model
Common Criteria EAL4 does not require a formal secu-
rity model to guide the design and implementation of the
security features of a software product. However, using a
formal security model (requirement ADV SPM.1) does in-
crease assurance as it is used in CC EAL’s 6 and 7. Because
it is very abstract, a formal security model is not likely to
require signiﬁcant (if any) rework because of hardware vari-
ation.
Franklin et al. [10] have already developed a formal model
for the sHype security mechanism of Xen [27]. They model
checked the Xen sHype Chinese Wall model using the Murφ
model checker. (The sHype mechanism was implemented in
Xen as the Access Control Module (ACM) but ACM has
been replace by NSA’s XSM, as described above.)
McDermott and Freitas developed a formal security model
speciﬁcally for Xenon [19]. This model used the Circus for-
malism [37] to adapt the independence policies of Roscoe,
Woodcock, and Wulf [23, 24] into a state-based framework.
This kind of formal security model is especially suitable for
practical separation VMMs because it is a deﬁnition of se-
curity that is preserved by reﬁnement.
5.5 Formal Interface Speciﬁcation