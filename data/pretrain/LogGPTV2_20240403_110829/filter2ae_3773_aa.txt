# 写在前面
关于无字母数字Webshell这个话题，可以说是老生常谈了。但是一直以来我都没怎么去系统的研究过这个问题，在这里做一波研究与总结。所谓无字符webshell,其基本原型就是对以下代码的绕过:
结果将会输出o,我们来分析下原因,5的ASCII码是53,转成二进制是00110101,Z的ASCII码是90,转成二进制是01011010,将他们进行异或,为,也即十进制的111,为o.  
我们深入一点来看看关于函数的执行的示例:
结果将能够成功输出"Hello,Von",我们来看一下执行的原理。
  * $_++对_变量进行了自增操作,由于我们没有定义_的值,PHP会给_赋一个默认值NULL==0, **由此我们可以看出,我们可以在不使用任何数字的情况下,通过对未定义变量的自增操作来得到一个数字**
  * $__= "5" ^ "Z"这步我们上面已经见过了,将会赋给__这个变量一个值"o"
  * 由于PHP的动态语言特性,PHP允许我们将字符串当成函数来处理,因此在这里面的$__()就相当于调用了o()
## PHP中的取反
来看下面这个例子:
    >>> print("卢".encode("utf8"))
    b'\xe5\x8d\xa2'
    和。其中，相当于对的替换。而则是相当于。例如:
将会输出'111'
大部分文章说短标签需要在php.ini中设置short_open_tag为on才能开启短标签(默认是开启的，但似乎又默认注释，所以还是等于没开启)。但实际上在PHP5.4以后，无论short_open_tag是否开启，这种写法总是适用的，这种写法则需要short_open_tag开启才行。
## PHP中的反引号
PHP中，反引号可以起到命令执行的效果。
# 方法解析
基本所有的思路都是利用无字符构造出相关字符如assert,来进行执行函数。
## 方法一
方法一就是利用我们上面提到的关于异或的知识, 我给出一个POC:
    ";
    echo $result2;
    function judge($c)
    {
        if(!preg_match('/[a-z0-9]/is',$c))
        {
            return true;
        }
        return false;
    }
这个POC可以将"assert"变成两个字符串异或的结果。为了便于表示，生成字符串的范围我均控制为可见字符(即ASCII为33~126)，如果要使POC适用范围更广，可以改为0~126，只不过对于不可见字符，需要用url编码表示。  