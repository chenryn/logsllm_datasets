overall algorithm for identifying and localizing behavioral differ-
ences between configurations 𝐶1 and 𝐶2 is as follows:
1
2
3
4
5
6
7
result ← [ ]
pairs ← MatchPolicies(𝐶1, 𝐶2)
for (𝑝1, 𝑝2) ∈ pairs do
differences ← Diff(𝑝1, 𝑝2)
for 𝑑 ∈ differences do
result ← result.append(Present(𝑑, {𝐶1, 𝐶2}))
func ConfigDiff (𝐶1, 𝐶2)
8
return result
This algorithm consists of three main parts:
(1) The corresponding components (ACLs or BGP route maps)
for 𝐶1 and 𝐶2 are paired up by the MatchPolicies function.
This can be done with heuristics such as matching compo-
nents by name or matching components that relate to the
same neighboring node, or this information can be provided
by the user.
(2) For each component pair, the Diff function invokes either
SemanticDiff or StructuralDiff to produce a set of differ-
ences, each of which can include a set of inputs, the actions
taken by each component, and the locations in the configu-
rations.
752
(3) The Present function formats the results for output to the
user, including invoking HeaderLocalize on the results
of SemanticDiff in order to produce an understandable
representation of the set of inputs.
We now describe SemanticDiff, HeaderLocalize, and Struc-
turalDiff in more detail. We then discuss the general applicability
of SemanticDiff and StructuralDiff and show how our mod-
ular approach can find and localize behavioral differences across
entire router configurations.
3.1 SemanticDiff
SemanticDiff takes a pair of configuration components as input
and returns a list of all behavioral differences. The same basic
algorithm applies to both ACLs and route maps. Each difference is
a quintuple of the form: (𝑖, 𝑎1, 𝑎2, 𝑡1, 𝑡2). In this quintuple, 𝑖 refers to
a set of inputs to the components, represented as a logical formula
over message headers. For dataplane ACLs the inputs are sets of
packets, and for route maps they are route advertisements. 𝑎1 and
𝑎2 are the respective actions taken by the two components when
given an input from 𝑖. The action for ACLs is either accept or reject,
but for route maps the accept action can also set fields such as local
preference. 𝑡1 and 𝑡2 are the respective lines of text from the two
components that process inputs from 𝑖 and result in 𝑎1 and 𝑎2.
The SemanticDiff algorithm has two main steps. First, for each
configuration component, the space of inputs is divided into equiv-
alence classes, based on their paths through the component. Both
ACLs and route maps can be viewed as a sequence of if-then-else
statements, so two inputs are in the same equivalence class if and
only if they take the same set of branches through these statements.
Each equivalence class is represented symbolically as a logical pred-
icate on the input (either a packet header or route advertisement).
Our implementation uses BDDs to represent these predicates. Each
equivalence class is also associated with the text lines that are
on the corresponding path as well as the action taken. This step
consequently produces two lists of triples:
𝐿1 = [(𝑖1,1, 𝑎1,1, 𝑡1,1), (𝑖1,2, 𝑎1,2, 𝑡1,2), . . . , (𝑖1,𝑚, 𝑎1,𝑚, 𝑡1,𝑚)]
𝐿2 = [(𝑖2,1, 𝑎2,1, 𝑡2,1), (𝑖2,2, 𝑎2,2, 𝑡2,2), . . . , (𝑖2,𝑚, 𝑎2,𝑚, 𝑡2,𝑚)]
Figure 2 shows the equivalence classes for the example route
map from Figure 1(a). NETS and COMM correspond to the names of
the attribute filters — NETS for prefix filters and COMM for commu-
also denote the complement of a set 𝑋 as ¬ 𝑋. There are three
equivalence classes, one per clause in the route map — the first
nities. We use(cid:74)NETS(cid:75) to denote the set of accepted prefixes, and
similarly(cid:74)COMM(cid:75) to denote the set of accepted communities. We
clause is associated with the space(cid:74)NETS(cid:75), the second clause is
associated with ¬(cid:74)NETS(cid:75) ∩ (cid:74)COMM(cid:75), the space of routes matching
(cid:74)COMM(cid:75) but not(cid:74)NETS(cid:75), and the third clause is for all remaining
routes. Each equivalence class is also associated with whether it
accepts or rejects routes and what fields are set.
Once the inputs are partitioned into equivalence classes for both
components, the SemanticDiff algorithm then performs a pairwise
comparison to identify behavioral differences. For each pair of
equivalence classes (𝑖1,𝑖, 𝑎1,𝑖, 𝑡1,𝑖) and (𝑖2,𝑗 , 𝑎2,𝑗 , 𝑡2,𝑗) from the two
components, if 𝑖1,𝑖 and 𝑖2,𝑗 have a non-empty intersection and the
actions 𝑎1,𝑖 and 𝑎2,𝑗 differ, then there is a behavioral difference. In
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Tang et al.
route-map POL deny 10
match ip address NETS
route-map POL deny 20
match community COMM
route-map POL permit 30
set local-preference 30
Action: Reject
Inputs: (cid:74)NETS(cid:75)
Inputs: ¬(cid:74)NETS(cid:75) ∩ (cid:74)COMM(cid:75)
Inputs: ¬(cid:74)NETS(cid:75) ∩ ¬(cid:74)COMM(cid:75)
Action: Reject
Action: Accept, local-pref=30
Figure 2: Partitioning the space of route advertisements
based on route map definitions.
that case, we add
(𝑖1,𝑖 ∩ 𝑖2,𝑗 , 𝑎1,𝑖, 𝑎2,𝑗 , 𝑡1,𝑖, 𝑡2,𝑗)
to the list of differences returned by SemanticDiff.
3.2 HeaderLocalize
SemanticDiff produces the set of packets that exhibit behavioral
differences as a logical predicate. The HeaderLocalize algorithm
produces a more human-understandable representation in terms of
the constants (e.g. IP prefixes) that appear in the configuration, han-
dling the header localization problem. Specifically, HeaderLocalize
produces a compact representation of the set of all destination IP
addresses relevant to an ACL difference and the set of all IP prefix
ranges relevant to a route map difference. For ease of presenta-
tion, we only describe finding prefix ranges relevant to route map
differences, but the process for ACLs is analogous. In principle,
HeaderLocalize can also be extended to other route fields such
as communities, but we have not yet done so. Currently, instead
of producing all communities relevant to a route map difference,
Campion outputs a single example.
For route maps, sets of IP prefixes are represented by prefix
ranges, each of which is a pair of a prefix and a range of lengths.
For example, (1.2.0.0/16, 16-32) is a prefix range where the
prefix is 1.2.0.0/16 and the length range is 16-32. A prefix 𝑝 is a
member of a prefix range 𝑅 if both of the following hold:
(1) The IP address of 𝑝 matches the prefix of 𝑅
(2) The length of 𝑝 is included inside the range of 𝑅
For example, 1.2.3.0/24 is a member of the prefix range
(1.2.0.0/16, 16-32), (0.0.0.0/0, 0-32) is the set of all pre-
fixes, and (1.0.0.0/8, 24-24) is the set of all prefixes with length
24 and 1 as the first octet. We say that a prefix range 𝑅1 is contained
in another prefix range 𝑅2, denoted 𝑅1 ⊂ 𝑅2, if the members of 𝑅1
are a subset of those of 𝑅2.
The input to HeaderLocalize is a BDD 𝑆 representing the set of
messages affected by an identified policy difference, along with the
original configurations 𝐶1 and 𝐶2. The output is a representation
of 𝑆’s prefix ranges in terms of the prefix ranges that are in the two
configurations. First, all prefix ranges from the two configurations
are extracted to get the set R = {𝑅1, 𝑅2, . . . 𝑅𝑛}. If the set of all
prefixes (0.0.0.0/0, 0-32), which we will call 𝑈 , is not in R, then
it is added. Furthermore, R is extended so that it is closed under
intersection. Since each line of a route map can allow or reject
route advertisements based on prefix ranges in the configuration,
it is always possible to represent the set 𝑆 as a combination of
complements, unions, and intersection of sets from R. The goal of
HeaderLocalize is to identify the minimal such representation.
753
To find this minimal representation, HeaderLocalize builds a
directed acyclic graph (DAG) that relates the prefix ranges in R
to one another. This data structure is analogous to the ddNF data
structure previously used for packet header spaces [8], but here
we associate each node with prefix ranges rather than tri-state bit
vectors representing data-plane packets. HeaderLocalize’s ddNF
data structure consists of a set of nodes 𝑁 , a set of edges 𝐸 ⊆ 𝑁 × 𝑁 ,
a labeling function 𝑙 mapping nodes to prefix ranges, and a root
node. It satisfies the following properties:
(1) The root node is labeled with 𝑈 , the set of all prefixes, and
all other nodes are reachable from it.
(2) Each node has a unique label (and thus in the following
explanation, we will sometimes refer to a node by its prefix
range or vice versa).
(3) The set of prefix ranges used as labels contains R and is
closed under intersection.
(4) For any nodes 𝑚, 𝑛 ∈ 𝑁 , there is an edge (𝑚, 𝑛) ∈ 𝐸 exactly
when 𝑙(𝑛) ⊂ 𝑙(𝑚) and there is no node 𝑚′ such that 𝑙(𝑛) ⊂
𝑙(𝑚′) ⊂ 𝑙(𝑚).
An example DAG is shown in Figure 3 for a set of seven prefix
ranges. There is one node per prefix range, and each node’s prefix
range is a subset of those of its ancestors. For example 𝐷 is contained
in 𝐵 and 𝐴. The DAG is built by inserting one prefix range at a time,
starting with 𝑈 [8]. We also associate each internal node, with prefix
range 𝑅 and outgoing edges to nodes labeled 𝐶1, 𝐶2, . . . , 𝐶𝑘, with
the set of prefixes 𝑅−𝐶1−𝐶2 · · ·−𝐶𝑘. We call this set the remainder
set, as it is the set of prefixes that remain in 𝑅 after prefixes of the
children nodes are removed. For example, the remainder set of node
𝐵 in Figure 3 is 𝐵 − 𝐷 − 𝐸. The remainder and leaf node sets are all
disjoint from one another, and their union is 𝑈 . Importantly, because
the set 𝑆 of interest was created through unions, intersections, and
complements of the prefix ranges in R, each remainder set and
leaf prefix range has the property that either it is contained in 𝑆 or
disjoint from 𝑆.
Next HeaderLocalize uses the DAG to produce a representation
of 𝑆 in terms of the prefix ranges in R. This is done by traversing
the DAG with the recursive function GetMatch shown below. If
the current node is a leaf, then its prefix range 𝑅 is included in the
result if that range is contained in 𝑆. If the current node is internal,
then there are two cases. If the node’s remainder is contained in
𝑆, then its prefix range 𝑅 should be included in the result, after
removing any of the node’s child prefixes in the DAG that are not
contained in 𝑆. This latter process is done through a recursive call
to GetMatch with the complement set of 𝑆. if the node’s remainder
is not contained in 𝑆, then we simply recurse on the children and
union the results.
The GetMatch algorithm produces a representation of 𝑆 that
is a union of terms of the form 𝑅 − 𝑋1 − 𝑋2 − . . . 𝑋𝑘, where 𝑅 is a
prefix range, but each 𝑋 𝑗 is also in the form 𝑅 − 𝑋1 − 𝑋2 − . . . 𝑋𝑘.
For example, running GetMatch on the DAG in Figure 3 produces
{𝐵 − 𝐷, 𝐶 − (𝐹 − 𝐺)}, and the nodes in the figure are colored to
illustrate the algorithm’s process. As a final simplification step, we
remove all nested differences from the result through a single pass
over it. In our example, the result 𝐶 − (𝐹 − 𝐺) is transformed into
{𝐶−𝐹, 𝐺}, so the final representation of the set 𝑆 is {𝐵−𝐷, 𝐶−𝐹, 𝐺}.
Campion: Debugging Router Configuration Differences
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Remainder: 𝐵 − 𝐷 − 𝐸
✓
𝐵: (1.0.0.0/8, 8-32)
𝐶: (2.0.0.0/8, 8-32)
Remainder: 𝐶 − 𝐹
✓
𝐴: (0.0.0.0/0, 0-32)
Remainder: 𝐴 − 𝐵 − 𝐶
✕
Remainder: 𝐹 − 𝐺
✕
𝐹: (2.0.0.0/8, 24-32)
𝐷: (1.2.0.0/16, 16-32)
✕
𝐸: (1.3.4.0/24, 24-32)
✓
𝐺: (2.5.6.0/24, 24-32)
✓
Figure 3: DAG created from prefix ranges. Green (✓) nodes represent leaves or remainders contained in a set 𝑆, and red (✕)
nodes represent those that are not. 𝑆 can be represented by the union of 𝐵 − 𝐷, 𝐶 − 𝐹, and 𝐺
Route
Input
In
Route Map
BGP
✓
Descision
Out
Route Map
Route
Output
Costs, Areas, etc.
Route
Input
OSPF
✓
Descision
✓
Select
Route
Export
Route Map
Route
Output
Connected
Routes
Static
Routes
Packet
Input
In ACL
Forwarding
Table
Out ACL
Packet
Output
Figure 4: Basic features of routing and forwarding. Blue
nodes(✓) represent fixed processes. Yellow nodes (incoming
) are outputs.
) are inputs and green nodes (outgoing
Unmarked (brown) nodes represent configurable entities.
func GetMatch (S, node)
C ← Children(node)
R ← PrefixRange(node)
if IsLeaf(node) then
if R ⊆ S then
return {R}
else
return ∅
1
2
3
4
5
6
7
8
9
▶ node is a leaf, and 𝑅 ⊆ 𝑆
𝑅 − 𝐶1 − 𝐶2 . . . 𝐶𝑘 ⊆ 𝑆