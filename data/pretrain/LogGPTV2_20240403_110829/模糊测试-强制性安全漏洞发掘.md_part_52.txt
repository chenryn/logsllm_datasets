·可执行可读页（PAGE_EXECUTE_READ）
·保护页（PAGE_GUARD）
·不允许访问的页（PAGE_NOACCESS）
我们也想要忽略属于可执行映射的那些页，因为它们不太可能发生变化。遍历所有可用的
内存页需要在Virtua1QueryEx（）API例程外面加人一个简单的循环，以提供关于在指定虚拟
地址范围内的页的信息：
cursor
-0
menory_blocks = []
read_buf
nonegsm
count
-c_ulong(0)
mb1
MEMORY_BASIC_INFORMATIONO
while cursor < OxFFFFFFFF:
save_block = True
bytes_read = kerne132.Virtua1QueryEx(\
h_process,
cursor,
byref(nbi).
sizeof(mbi))
if bytes_read < sizeof(mbi):
hreak
如果对Virtua1QueryEx（）的调用执行失败，那么就假定我们已经耗尽了可用的用户空间，
然后退出读取循环。对于在循环中所发现的每个内存块，我们检查有利的页许可：
if mbi.State 1= MEM_COMMIT or\
mbi.Type== MEM_IMAGE:
save_block = False
if mbi.Protect &PAGE_READONLY:
save_b1ock = Fa1se
if nbi .Protect & PAGE_EXECUTE_READ:
save_b1ock = Fa1se
ifmbi.Protect &PACE_CUARD:
save_block= FaTse
1fmb1.Protect&PAGE_NOACCESS:
save_block-False
如果我们偶然遇到了想要包含在快照中的一个内存块，那么我们就使用ReadProcess-
Memory（）API来读取该内存块的内容，并且将原始数据同内存信息一样保存到快照列表中。
http://msdn2.microsoft.com/en-us/library/a366907.aspx
http:/msdn2.microsoft.com/en-us/library/a680553.aspx
---
## Page 246
第20章内存数据的模糊测试：自动化
231
最后，我们递增内存扫描指针井继续执行：
区
if save_block:
kerne132.ReadProcessMemory（
mb1.BaseAddress,
read_buf,
mb1.RegionSize,
byref(count))
menory_b1ocks.append((nb1, read_buf.raw))
cursor += mbi.RegionSize
只读页（PAGE_READONLY）而后来又被更新为可写的和可修改的，那么情况将会是怎样
呢？答案是我们遗漏了这种情形。我们从来没有许诺说该方法是完美的！实际上，让我们利用
这次机会来再次强调一下该课题所具有的实验本质，对于具有求知欲的读者来说，对此缺陷的
一个潜在的解决方法是“钩住”那些调整内存许可的函数，并且基于观察到的变化来修改我们
的监视。
将我们所提出的两个步骤结合在一起，就提供了获取和恢复特定内存快照所需要的元素。
20.4.3如何选择植入钩子的点
这是我们从科学方法轴向艺术技巧的转换点，因为目前没有确定的方法能够帮助我们选择
植入钩子的点。做出这个决定需要具备逆向工程的丰富经验。从本质上来说，我们正在寻找负
责解析用户控制数据的代码起始点和结束点。假定你对目标应用没有任何先验知识，使用一个
跟踪进行更加详细的介绍。为了更好的理解这一点，我们稍后将分析一个例子。
20.4.4如何对目标内存空间进行定位和变异
在需要具备的所有先决条件中，最后一个步骤就是选择实施变异的内存位置。同样，完成
这个过程更多的是需要艺术技巧，而不是太多的科学知识。使用一个调试器来进行跟踪将有助
于我们的搜索。然而在通常情况下，我们应当选择一个初始的植入钩子的点，比如指向目标数
据或者邻近的下一个内存空间的一个指针。
20.5一个最好的新工具PyDbg
到现在为止，你无疑已经推断出编写一个调试器需要进行大量的工作。但幸运的是，到目
前为止我们所遇到的所有内容（或者更多的内容）都已经有开发者为你编写好了，他们将其写
人一个被称为PyDbg的方便的Python类中。你可能会非常困惑地问自己，为什么我们在前面
http://openrce.org/downloads/details/208/PaiMei
---
## Page 247
232
第二部分目标和自动化
没有提到该类呢？我们是在有意隐瞒它。因为理解这些基础知识是非常重要的，如果我们在一
开始就告诉你这个捷径，那么你将不会对这些知识给予足够的关注。
使用PyDbg，可以非常容易通过Windows调试API来执行进程instrumentation。使用PyDbg
可以非常简单地完成如下功能：
·读内存，写内存以及查询内存。
·枚举进程，关联到进程，与进程相分离，终止进程。
nsicmorgan.idn
·枚举线程，暂停线程的执行，恢复线程的执行。
·设置断点，删除断点，处理断点。
·快照以及恢复内存状态（SRM中的SR）。
·确定函数地址。
·其他功能。
项购只
考虑如下的简单例子，我们初始化了一个PyDbg对象，将其在PID123关联到目标进程，并
且进人了一个调试循环：
from pydbg inport*
from pydbg.defines inport *
dbg -new pydbg()
出
dbg.attach(123)
doouana5ngap6ap
人
这并不是那么的令人兴奋，因此让我们再添加一些更多的功能。以上一个例子为基础，在
下一个代码片段中，我们在Winsockrecv（）API的调用中设置了一个断点，并且当遇到一个断
点时，记录一个回调函数的句柄以被调用：
fron pydbg inport •
fron pydbg.defines inport *
ws2_recv =None
def hander_bp (pydbg. dbg. context):
g1oba1ws2_recv
dbg.u.Exceptfon.ExceptfonRecord.ExceptfonAddress
1f exception_address us ws2_recv:
print “ws2.recvO) cal1ed!"
return DBG_CONTINUE
dbg = new pydbg()
dbg-set_ca11back(EXCEPTION_BREAKPOINT,handler_bp)
bg-attach(123)
ws2_recv - dbg.func_reso1ve(“ws2_32",“recv")
dbg. debug_event_1oopC)
---
## Page 248
第20章内存数据的模物测试：自动化233
上面代码片段中的粗体文本强调了我们所增加的内容。你看到的第一个所增加的内容是我
们定义了一个函数hand1er_bp（），该函数包含三个参数。第一个参数接收我们所创建的PyDbg
的实例。第二个参数接收来自于调试事件循环的DEBUG_EVENT结构°，并且包含刚刚发生的
关于调试事件的一些不同信息。第三个参数接收发生调试事件的线程的上下文环境。我们的断
点处理器简单地检查发生异常的地址与Winsockrecv（）API的地址是否是相同的地址。如果是
同一个地址，那么就输出一条消息。断点处理器返回DBG_CONTINUE以告知IPyDbg我们已经
完成了对异常的处理，并且PyDbg应当让目标进程继续执行。回过头来看一下调试器脚本的主
体部分，你将会看到增加了对PyDbg例程set_cal1back（）的一个调用。该例程用做为PyDbg记
录一个回调函数，以处理一个特定的调试事件或者异常。在这种情况下，只要遇到一个断点，
那么就将调用handler_bp（）。最后，我们看到增加了对func_resolve（）和bp_set（）的调用。
前面一个调用用来确定recv（）API在Windows模块ws2_32.dll中的地址，并且将其保存到一个
全局变量中。后一个调用用来在所确定的地址处设置一个断点。当关联到一个目标进程时，任
何对WinsockrecvOAPI的调用都将导致调试器显示“ws2.recv（）被调用”的消息，然后继续
正常执行。同样，这也不是非常令人兴奋，但是现在我们就可以进一步向前推进，并且创建第
一个内存数据模糊器的概念验证工具。
20.6一个构想的示例
在已经了解了一些背景知识以及必备的先决条件之后，现在我们就可以建立一个最初的概
念验证工具，以告诉你所有这些理论构想实际上都是可行的。在ruzzing.orgweb站点上，你会
看到包含源代码的两个文件fuzz_client.exe和fuzz_server.exe。先不要马上研究源代码。为了创
建一个更加接近于实际情况的场景，让我们假定逆向工程是必需的。客户机一服务器模式是
非常简单的目标应用。当服务器部署之后，它绑定到TCP端口11427并且等待一个客户端的连
接。客户端进行连接并向服务器发送数据，稍后该数据被解析。那么数据是如何被解析的呢？
实际上我们并不知道，但是我们对此并不关心，因为我们的目的是对目标应用进行模糊测试，
而不是对源代码或二进制代码进行评审。让我们首先来部署服务器：
Listening and waiting for client to connect...
s./fuzz_server.exe
接下来，我们要部署客户端，该操作需要两个参数，第一个参数是服务器的IP地址，第二
个参数是发送给服务器以被解析的数据：
5 ./fuzz_c1ient.exe 192.168.197.1 *sending some data
connecting....
sending...
sent...
客户端在IP地址192.168.197.1处成功地连接到了服务器，并且传递了字符串“sending
somedata”。在服务器端，我们看到了如下的附加消息：
 http://msdn2.microsoft.com/en-us/library/a686832.aspx
---
## Page 249
234
第二部分目标和自动化
received 17 bytes.
client connected.
parsing:sending some data
exiting...
服务器成功接收到了我们所发送的17个字节，并对其进行解析，然后退出。然面，当对网
络上所传输的包进行检查时，却无法定位我们的数据。该包应当在TCP的三次握手过程之后包
含我们的数据，但是它实际包含了来自于Ethereal的屏幕快照中突出显示的那些字节，如图
20-7所示。
VwareViral EreAdapeCapurg-there
p
南图间个一
No.,Tere
Soroa
Pot
Prtrotcn
民租阳个一面
中量变员
同常玉
内
图20-7Ethereal的客户端—服务器数据捕获示的个一a.OS
Ethereal网络史探器项目已经特向了Wireshark，该项目可以从htp://www.wireshark.org处下载
客户端必须要在将包数据写人到网络之前，对数据进行干扰、加密、压缩或者以别的方式
进行模糊化处理。在服务器端，必须要在解析包数据之前对该数据进行反模期化处理，因为我
们可以在输出的消息日志中看到正确的字符串。以传统的方式对我们的示例服务器进行模糊测
试要求我们对模糊例程实施逆向工程。一且模糊方法中的秘密被揭露，我们就可以生成并发送
任意的数据。当你在后面看到解决方案时，你将会意识到在这种情况下完成这项操作将会非常
容易。然而，为了继续使用我们的例子，我们假定所采用的模糊化方法将利用相当多的资源来