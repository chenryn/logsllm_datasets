肯定是 apache 服务器有一些问题，我们可以使用 root 或是 sudo 访问权限来运行 `apachectl start`查看它输出的日志。在本教程执行过程中, 我们发现一个 `/etc/apache2/sites-enabled/puppetmaster.conf` 的证书配置问题。修改其中的 `SSLCertificateFile /var/lib/puppet/ssl/certs/server.pem` 为 `SSLCertificateFile /var/lib/puppet/ssl/certs/puppetmaster.pem`，然后注释掉后面这行 `SSLCertificateKeyFile` 。然后在命令行重新启动 apache。
### 8. 安装 Puppet 代理节点的软件包
我们已经准备好了 puppet 的服务器，现在需要一个可以管理的代理节点，我们将安装 puppet 代理软件到节点上去。这里我们要给每一个需要管理的节点安装代理软件，并且确保这些节点能够通过 DNS 查询到服务器主机。下面将 安装最新的代理软件到 节点 puppetnode.example.com 上。
在代理节点上使用下面的命令下载 puppet 实验室提供的软件包：
```
# cd /tmp/
# wget https://apt.puppetlabs.com/puppetlabs-release-trusty.deb\
--2015-06-17 00:54:42-- https://apt.puppetlabs.com/puppetlabs-release-trusty.deb
Resolving apt.puppetlabs.com (apt.puppetlabs.com)... 192.155.89.90, 2600:3c03::f03c:91ff:fedb:6b1d
Connecting to apt.puppetlabs.com (apt.puppetlabs.com)|192.155.89.90|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 7384 (7.2K) [application/x-debian-package]
Saving to: ‘puppetlabs-release-trusty.deb’
puppetlabs-release-tr 100%[===========================>] 7.21K --.-KB/s in 0.04s
2015-06-17 00:54:42 (162 KB/s) - ‘puppetlabs-release-trusty.deb’ saved [7384/7384]
```
在 ubuntu 15.04 上我们使用 debian 包管理系统来安装它，命令如下：
```
# dpkg -i puppetlabs-release-trusty.deb
```
使用 apt 包管理命令更新一下本地的软件源：
```
# apt-get update
```
通过远程仓库安装：
```
# apt-get install puppet
```
Puppet 代理默认是不启动的。这里我们需要使用文本编辑器修改 `/etc/default/puppet` 文件，使它正常工作：
```
# nano /etc/default/puppet
```
更改 `START` 的值改成 "`yes`" 。
```
START=yes
```
最后保存并退出。
### 9. 使用 Apt 工具锁定代理软件的版本
和上面的步骤一样为防止随意升级造成的配置文件混乱，我们要使用 apt 工具来把它锁定。具体做法是使用文本编辑器创建一个文件 `/etc/apt/preferences.d/00-puppet.pref`：
```
# nano /etc/apt/preferences.d/00-puppet.pref
```
在新建的文件里面加入如下内容
```
# /etc/apt/preferences.d/00-puppet.pref
Package: puppet puppet-common
Pin: version 3.8*
Pin-Priority: 501
```
这样 puppet 就不会随着系统软件升级而随意升级了。
### 10. 配置 puppet 代理节点
我们需要编辑一下代理节点的 `puppet.conf` 文件，来使它运行。
```
# nano /etc/puppet/puppet.conf
```
它看起来和服务器的配置文件完全一样。同样注释掉 `templatedir`这行。不同的是在这里我们需要删除掉所有关于`[master]` 的部分。
假定主控服务器可以通过名字“puppet-master”访问，我们的客户端应该可以和它相互连接通信。如果不行的话，我们需要使用完整的主机域名 `puppetmaster.example.com`
```
[agent]
server = puppetmaster.example.com
certname = puppetnode.example.com
```
在文件的结尾增加上面3行，增加之后文件内容像下面这样：
```
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
#templatedir=$confdir/templates
[agent]
server = puppetmaster.example.com
certname = puppetnode.example.com
```
最后保存并退出。
使用下面的命令来启动客户端软件：
```
# systemctl start puppet
```
如果一切顺利的话，我们不会看到命令行有任何输出。 第一次运行的时候，代理节点会生成一个 ssl 证书并且给服务器发送一个请求，经过签名确认后，两台机器就可以互相通信了。
**提示**： 如果这是你添加的第一个代理节点，建议你在添加其他节点前先给这个证书签名。一旦能够通过并正常运行，回过头来再添加其他代理节点。
### 11. 在主控服务器上对证书请求进行签名
第一次运行的时候，代理节点会生成一个 ssl 证书并且给服务器发送一个签名请求。在主控服务器给代理节点服务器证书签名之后，主服务器才能和代理服务器通信并且控制代理服务器。
在主控服务器上使用下面的命令来列出当前的证书请求：
```
# puppet cert list
"puppetnode.example.com" (SHA256) 31:A1:7E:23:6B:CD:7B:7D:83:98:33:8B:21:01:A6:C4:01:D5:53:3D:A0:0E:77:9A:77:AE:8F:05:4A:9A:50:B2
```
因为只设置了一台代理节点服务器，所以我们将只看到一个请求。看起来类似如上，代理节点的完整域名即其主机名。
注意有没有“+”号在前面，代表这个证书有没有被签名。
使用带有主机名的 `puppet cert sign`这个命令来签署这个签名请求，如下：
```
# puppet cert sign puppetnode.example.com
Notice: Signed certificate request for puppetnode.example.com
Notice: Removing file Puppet::SSL::CertificateRequest puppetnode.example.com at '/var/lib/puppet/ssl/ca/requests/puppetnode.example.com.pem'
```
主控服务器现在可以通讯和控制它签名过的代理节点了。
如果想签署所有的当前请求，可以使用 `-all` 选项，如下所示：
```
# puppet cert sign --all
```
### 12. 删除一个 Puppet 证书
如果我们想移除一个主机，或者想重建一个主机然后再添加它。下面的例子里我们将展示如何删除 puppet 主控服务器上面的一个证书。使用的命令如下：
```
# puppet cert clean hostname
Notice: Revoked certificate with serial 5
Notice: Removing file Puppet::SSL::Certificate puppetnode.example.com at '/var/lib/puppet/ssl/ca/signed/puppetnode.example.com.pem'
Notice: Removing file Puppet::SSL::Certificate puppetnode.example.com at '/var/lib/puppet/ssl/certs/puppetnode.example.com.pem'
```
如果我们想查看所有的签署和未签署的请求，使用下面这条命令：
```
# puppet cert list --all
+ "puppetmaster" (SHA256) 33:28:97:86:A1:C3:2F:73:10:D1:FB:42:DA:D5:42:69:71:84:F0:E2:8A:01:B9:58:38:90:E4:7D:B7:25:23:EC (alt names: "DNS:puppetmaster", "DNS:puppetmaster.example.com") 
```
### 13. 部署 Puppet 清单
当配置并完成 puppet 清单后，现在我们需要部署清单到代理节点服务器上。要应用并加载主 puppet 清单，我们可以在代理节点服务器上面使用下面的命令：
```
# puppet agent --test
Info: Retrieving pluginfacts
Info: Retrieving plugin
Info: Caching catalog for puppetnode.example.com
Info: Applying configuration version '1434563858'
Notice: /Stage[main]/Main/Exec[apt-update]/returns: executed successfully
Notice: Finished catalog run in 10.53 seconds
```
这里向我们展示了主清单如何立即影响到了一个单一的服务器。
如果我们打算运行的 puppet 清单与主清单没有什么关联，我们可以简单使用 `puppet apply` 带上相应的清单文件的路径即可。它仅将清单应用到我们运行该清单的代理节点上。
```
# puppet apply /etc/puppet/manifest/test.pp
```
### 14. 为特定节点配置清单
如果我们想部署一个清单到某个特定的节点，我们需要如下配置清单。
在主控服务器上面使用文本编辑器编辑 `/etc/puppet/manifest/site.pp`：
```
# nano /etc/puppet/manifest/site.pp
```
添加下面的内容进去
```
node 'puppetnode', 'puppetnode1' {
# execute 'apt-get update'
exec { 'apt-update': # exec resource named 'apt-update'
command => '/usr/bin/apt-get update' # command this resource will run
}
# install apache2 package
package { 'apache2':
require => Exec['apt-update'], # require 'apt-update' before installing
ensure => installed,
}
# ensure apache2 service is running
service { 'apache2':
ensure => running,
}
}
```
这里的配置显示我们将在名为 puppetnode 和 puppetnode1 的2个指定的节点上面安装 apache 服务。这里可以添加其他我们需要安装部署的具体节点进去。
### 15. 配置清单模块
模块对于组合任务是非常有用的，在 Puppet 社区有很多人贡献了自己的模块组件。
在主控服务器上, 我们将使用 `puppet module` 命令来安装 `puppetlabs-apache` 模块。
```
# puppet module install puppetlabs-apache
```
**警告**: 千万不要在一个已经部署 apache 环境的机器上面使用这个模块，否则它将清空你没有被 puppet 管理的 apache 配置。
现在用文本编辑器来修改 `site.pp` ：
```
# nano /etc/puppet/manifest/site.pp
```
添加下面的内容进去，在 puppetnode 上面安装 apache 服务。
```
node 'puppet-node' {
class { 'apache': } # use apache module
apache::vhost { 'example.com': # define vhost resource
port => '80',
docroot => '/var/www/html'
}
}
```
保存退出。然后重新运行该清单来为我们的代理节点部署 apache 配置。
### 总结
现在我们已经成功的在 ubuntu 15.04 上面部署并运行 puppet 来管理代理节点服务器的基础运行环境。我们学习了 puppet 是如何工作的，编写清单文件，节点与主机间使用 ssl 证书认证的认证过程。使用 puppet 开源软件配置管理工具在众多的代理节点上来控制、管理和配置重复性任务是非常容易的。如果你有任何的问题，建议，反馈，与我们取得联系，我们将第一时间完善更新，谢谢。
---
via: 
作者：[Arun Pyasi](http://linoxide.com/author/arunp/) 译者：[ivo-wang](https://github.com/ivo-wang) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出