### 2. Tamper Data 插件安装
Tamper Data 是一款用于抓包和修改数据的 Firefox 浏览器扩展插件。用户只需在浏览器的扩展插件商店中搜索并下载该插件，然后按照提示完成安装即可。

### 3. 使用 Tamper Data 进行抓包分析
#### 3.1.4 CSRF 漏洞利用
##### 3.1.4.1 恶意链接伪造
一旦发现目标站点存在密码修改的 CSRF 漏洞，下一步便是如何利用这一漏洞。最直接的方法是通过 Burp Suite 抓取包含密码修改操作的 GET 请求 URL，并对其进行适当的处理后，结合社会工程学手段诱使他人点击该链接，从而实现对他人账号密码信息的篡改。具体步骤如下：

1. **截断请求包，提取 URL 请求**
   - 提取的 URL 示例：`http://www.dvwa.com/vulnerabilities/csrf/?password_new=admin&password_conf=admin&Change=Change`

2. **URL 链接伪装**
   - 对提取到的 URL 进行缩短或简单伪装，再通过社会工程学方法诱导受害者点击该链接，触发漏洞利用。

##### 3.1.4.2 恶意 HTML 表单伪造
相较于简单的 URL 伪装，伪造一个 HTML 页面可以更专业地实施攻击，且成功率更高。以下是基本步骤：
- **第一步**：提取密码修改的 URL 请求；
- **第二步**：根据获取的 URL 格式，构造一个伪造的 form 表单；
- **第三步**：通过社会工程学手段诱导被攻击者点击恶意的 HTML 链接。

###### 具体操作
1. **提取密码修改的 URL 请求**
   - 利用 Burp Suite 抓取密码修改操作的数据包，解析其中的请求内容。
   
2. **伪造 form 表单**
   - 分析修改密码的数据请求后，手动创建一个简单的 HTML 表单页面，为 CSRF 攻击做准备。
   
3. **诱使被攻击者点击恶意 HTML 链接**
   - 将构建好的 HTML 表单页面上传至网络上，然后通过社会工程学方式发送给被攻击者，诱导其访问此恶意页面以触发“密码修改”操作。

#### 3.1.5 CSRF 密码修改漏洞小结
CSRF 密码修改漏洞的特点在于：系统在用户修改密码时未设置任何条件限制或校验机制。这种漏洞相对容易发现。

### 3.2 后台管理员新增之 CSRF 漏洞重现
在进行渗透测试过程中，针对 CMS 系统进行“黑盒测试”是非常常见的。例如，搭建目标系统的本地环境并进行全面的安全测试，尤其是后台管理员添加功能的 CSRF 漏洞挖掘尤为重要。如果成功找到此类漏洞，攻击者可以通过构造恶意 HTML 表单页面来向真实的目标 CMS 系统发起攻击，进而非法添加后台管理员账户，获得系统管理权限，进一步扩大攻击范围。

#### 3.2.1 环境准备
- PHPStudy Web 容器环境
- Burp Suite 抓包工具
- IvyCMS 系统

#### 3.2.2 PHPStudy Web 容器环境
关于 PHPStudy 的安装与配置，由于过程较为简单，此处不再赘述。用户可直接从官方网站下载并默认安装使用。

#### 3.2.3 Burp Suite 抓包工具
有关 Burp Suite 的使用说明，请参考第 3.1 节的内容。值得一提的是，Burp Suite 功能强大，强烈推荐各位掌握其使用方法。后续还将演示如何利用 Burp Suite 一键生成 CSRF POC 表单。

#### 3.2.4 IvyCMS 环境搭建
##### 3.2.4.1 解压源码包
将 IvyCMS 源码解压缩后重命名为 `lvyecms` 并将其复制到 PHPStudy 主目录下的 WWW 文件夹中。

##### 3.2.4.2 站点域名设置
- 选择“其他选项菜单” -> “站点域名管理”
- 添加网站域名 `www.lvye.com`
- 设置网站目录为 `E:\phpstudy\www\lvyecms`
- 保存设置并重启服务

##### 3.2.4.3 配置 hosts 主机解析文件
- 打开 `C:\Windows\System32\drivers\etc\hosts` 文件（需以管理员身份运行）
- 添加解析记录 `127.0.0.1 www.lvye.com` 并保存

#### 3.2.5 后台管理添加过程测试
1. 进入添加后台管理员界面
2. 添加后台管理员 `test`
3. 确认管理员添加情况

#### 3.2.6 CSRF 漏洞发现分析
通过对以上三步的操作，我们完成了后台管理员账号的授权添加，但并未发现明显异常。接下来我们将使用 Burp Suite 进一步分析在添加管理员账号过程中是否存在未对用户进行除 cookie 外的有效身份验证的问题。

1. **配置 Firefox 代理设置**
   - 请参阅第 3.1 节中的相关说明。
   
2. **开启 Burp Suite 数据包代理截断**

3. **请求包抓包分析**
   - 通过抓包可以看到，在添加管理员的过程中，仅包含了用户的 cookie 值及添加管理员的相关参数信息，缺少其他任何形式的身份验证措施。因此，推测此处可能存在 CSRF 漏洞。
   
4. **构造 GET 类型的 CSRF 恶意链接**
   - 直接在 Burp Suite 中右键选择 "Copy URL" 获取完整的 GET 请求 URL。
   - 经过测试，GET 类型的恶意链接无法成功添加管理员，推断脚本可能仅接受 POST 类型的数据提交。
   
5. **构造 POST 类型的 HTML 页面**
   - 在 Burp Suite 中右键选择 "Engagement tools" -> "Generate CSRF PoC" 生成表单 POC。
   
6. **构造 CSRF HTML 表单验证**
   - 将生成的表单内容保存为 `csrf.html` 文件，并发布到站点中。
   - 通过社会工程学手段诱导管理员访问此恶意页面，触发添加管理员的操作。

### 4. CSRF 漏洞防护
目前针对 CSRF 漏洞的防护措施已较为成熟，主要思路是在执行敏感操作时增加有效的用户身份验证。以下是一些常用的防护策略：
- **来源校验**：检查 HTTP 请求头中的 referer 字段，虽然早期常用但易被绕过。
- **用户 token 校验**：引入基于当前用户身份的随机 tokens，在每次数据提交时附带验证。
- **当前用户密码验证**：要求用户在修改关键信息前输入自身密码以确认身份。
- **验证码机制**：在提交请求前填写验证码，增加额外的身份验证环节。