## Page 561
you follow the approach used in the example code, however, it should be straightfor-
ward to add as many more entity names as you need.
The JavaScript example code converts the following subject string:
“%1t; &bogus; dec &#65;&#0065; &anp;1t; hex &#x41;&#x041; &gt;"
To this:
""
JavaScript doesn’t support Unicode code points beyond U+FFFF, so the provided code
(or more specifically, the String fronCharCode() method used within it) works cor-
rectly only with numeric character references up to &#xFFFF; hexadecimal and
&#65535; decimal. This shouldn’t be a problem in most cases, since characters beyond
this range are rare. Numeric character references with numbers above this range are
invalid in the first edition of the XML 1.0 standard.
Some programming languages and XML APls have built-in functions to
perform XML or HTML entity decoding, For instance, in PHP 4.3 and
helpful to implement your own method since such functions vary in
which entity names they recognize, In some cases, such as with Ruby’s
CGI::unescapeHTML (), even fewer than the standard five XML named
entities are recognized.
See Also
Recipe 9.5 explains how to convert plain text to HTML. by adding  and  tags.
The first step in the process is HTML-encoding &,  characters using named
entities.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.9 explains grouping. Recipe 2.12 ex-
plains repetition.
9.7FindaSpecificAttributeinXML-StyleTags
Problem
Within an (X)HTML or XML fle, you want to find tags that contain a specific atribute,
such as 1d.
This recipe covers several variations on the same problem. Suppose that you want to
match each of the following types of strings using separate regular expressions:
•Tags that contain an id attribute.
• tags that contain an id attribute.
9.7 Find a Specific Atribute in XML-Style Tags I 545
---
## Page 562
•Tags that contain an id attribute with the value my-id.
Tags that contain my-class within their class atribute value (even if there are
multiple classes separated by whitespace)
Solution
Tags that contain an id attribute (quick and dirty)
If you want to do a quick search in a text editor that lets you preview your results, the
following (overly simplistic) regex might do the trick:
]+\sid\b[^>]*>
Regex options: Case insensitive
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Here’s a breakdown of the regex in free-spacing mode:
 Start of the tag
[^>]+
# Tag nane, attributes, etc.
\s id \b # The target attribute name, as a whole word
[^>]*
# The renainder of the tag, including the id attribute′s value
# End of the tag
Regex options: Case insensitive, free-spacing
Regexflaver: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Tags that contain an id attribute (more reliable)
attribute values that contain literal > characters, and it doesn’t match tags that merely
contain the word id within one of their attributes’ values:
*(,*[].1*[])s\=5\ps\+(*[].I[]1[
"']
# Tag and attribute nanes, etc.
1"[A"]**
and quoted attribute values
*[,√],1
)+?
\sid
# The target attribute name, as a whole word
\s* = \s*
# Attribute nane-value deliniter
（"[^"]**|*[^′]*′)# Capture the attribute value to backreference 1
(？: [^>"*]
# Any remaining characters
"fa"]e*
and quoted attribute values
*[v].
546 | Chapter 9: Markup and Data Fermats
---
## Page 563
Regex options: Case insensitive, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
This regex captures the id attribute’s value and surrounding quote marks to backre-
ference 1. This allows you to use the value in code outside of the regex or in a replace-
ment string. If you don’t need to reuse the value, you can switch to a noncapturing
group or replace the entire  tags that contain an id attribute
To search for aspecific tag type, you need toaddits name to the beginning ofthe regex
and make a couple of other minor changes. In the following regex, we've added div
\s> after the opening  sequence has been changed to *?\bid, so that
the regex works when id is the first attribute within the tag and there are no additional
separating characters (beyond the initial space) ater the tag name:
(,
"]
# Tag and attribute nanes, etc.
1"[A"]**
#
and quoted attribute values
*[，√].|
)*?
\b id
# The target attribute name, as a whole word
\s* = \s*
# Attribute nane-value deliniter
（[.].1*[])
# Capture the attribute value to backreference 1
(？: [^>"*]
# Any remaining characters
“A”*
and quoted attribute values
[A']**
*
Regex options: Case insensitive, free-spacing
Regexflavers: NET, Java, XRegExp, PCRE, Perl, Python, Ruby
9.7 Find a SpecificAtributein XML-Style Tags | 547
---
## Page 564
Tags that contain an id attribute with the value *my-id*
Compared to the regex riled "Tags that contain an id atribute (more relia-
ble)* on page 546, this time we'’ll remove the capturing group around the id attribute's
value since we know the value in advance. Specifically, the subpattern
("[^*J**|′[^′]*′)> has been replaced with :
(.pA,Ip-Au=)s\=5\pTs\+(*[]. I*[]1[
"']
# Tag and attribute names, etc.
“["]*
[]*
and quoted attribute values
)+?
\s 1d
# The target attribute nane, as a whole word
s* = s*
# Attribute nane-value deliniter
(?: "my-id”
# The target attribute value
‘my-id')
surrounded by single or double quotes
(？:[^>"']
# Any renaining characters 
#
and quoted attribute values
[]*
)*
Regex options: Case insensitive, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Going back to the (?:*my-id"I 'my-id' )  subpattern for a second, you could alterna-
tively avoid repeating “my-id* (at the cost of some efficiency) by using 
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
548 | Chapter 9: Markup and Data Fermats
---
## Page 565
Recipe 9.1 is dedicated to matching XML-style tags. It explains how the
regex just shown works, and provides a number of alternatives with
Next, follow the code in Recipe 3.13 to search within each match for a class attribute
using the following regex:
（[]。1[])5\=5\sse[s\+(*[~].1*[]1[ would match
within not-my-class.
Discussion
The *Solution* section of this recipe already covers the details of how these regular
expressions work, so we'll avoid rehashing it all here. Remember that regular expres-
sions are often not the ideal solution for markup searches, especially those that reach
aaprstoo suotssudxa nenau asou dusn auojag adoau stq u paquosap xaduos a
whether you’d be better served by an alternative solution, such as XPath, a SAX parser,
or a DOM. We’ve included these regexes since it’s not uncommon for people to try to
pull off this kind of thing, but don’t say you weren’t warned. Hopefully this has at least
9.7 Find a Specific Atribute in XML-Style Tags I 549
---
## Page 566
helped to show some of the issues involved in markup searches, and helped you avoid
even more naive solutions.
The regular expressions in this recipe are written with the expectation
that aribute values are always enclosed in single or double quotes.
: Unquoted atrbute values are not supported.
See Also
Recipe 9.8 is the conceptual inverse of this recipe, and finds tags that do not contain a
specific attribute.
Recipe 9.1 shows how to match all XML-syle tags while balancing trade-offs including
tolerance for invalid markup.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.6 explains
word boundaries. Recipe 2.8 explains altermation. Recipe 2.9 explains grouping.
Recipe 2.10 explains backreferences. Recipe 2.12 explains repetition.
9.8AddacellspacingAttributetoTagsThatDoNot
AlreadyIncludeIt
Problem
You want to search through an (X)HTML file and add cellspacing=*o? to all tables
that do not already include a cellspacing attribute.
This recipe serves as an example of adding an attribute to XML-style tags that do not
already include it. You can modify the regexes and replacement strings in this recipe
to use whatever tag and attribute names and values you prefer.
Solution
Solution 1, simplistic
You can use negative lookahead to match  tags that do not contain the word
cellspacing, as follows:
]*?\scellspacing\b)([^>]*)>
Regexoptions: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Here’s the regex again in free-spacing mode:
550 I Chapter 9: Markup and Data Fermats
---
## Page 567
]*?
Any attributes, etc.
\s cellspacing b #
*cellspacing*, as a complete word
([] are replaced with "′]1"[^"]**|′ [^* ]*′ ).
This longer pattern passes over double- and single-quoted atribute values in one step:
"]1*[^"]**|′[^]**)*\scellspacing\b) 
 tags to backre
ference 1. This lets you bring back those artributes as part of your replacement value,
while adding the new cellspacing artribute. Here are the necessary replacement strings:
Replacement text flavors: .NET, Java, JavaScript, Perl, PHP
Replacement text flavors: Python, Ruby
Recipe 3.15 shows the code for performing substitutions that use a backreference in
the replacement string.
IS 1 1apnpu Apeayog 1eq sfe1 oanqa bupedsao e ppv g6
---
## Page 568
Discussion
In order to examine how these regexes work, we'll first break down the simplistic Sol-
ution 1. As you'll see, it has four logical parts.
The first part, , matches the literal characters ). The word boundary prevents matching tag names that merely start
(X)HTML (since there are no valid elements named “tablet,* "tableau,” or "table
spoon,” for example), it’s good practice nonetheless, and can help you avoid bugs when
adapting this regex to search for other tags.