ing convention Π := Π(cid:1) ∪ Π(cid:0). The switch from G0 to G1
introduces abort conditions in lines 20 and 29. Inspection
shows that each condition is met with probability at most
Q/2L per oracle invocation, so the overall abort probability
for these lines is Q2/2L. As games G0 and G1 are identi-
0 ⇒ 1] ≤
cal as long as these conditions are not met, Pr[GF
Pr[GF
1 ⇒ 1] + Q2/2L.
(G2, G3)
Procedure Init
00 (Π(cid:1), Π(cid:0)) ← (∅,∅)
01 β1, . . . , βQ ←$ B
q ; X ← gx
02 x ←$ Z∗
03 Return X
Procedure Fin(m∗,(cid:104)s∗, t∗(cid:105))
04 If s∗ = 0 ∨ t∗ = 0: Abort
05 U∗ ← gH(m∗)X t∗
06 If U∗ = 1: Abort
07 R∗ ← (U∗)1/s∗
08 α∗ ← ϕ(R∗)
09 β∗ ← Π(α∗)
10
11 If ψ(β∗) (cid:54)= t∗: Abort
12 If (α∗, β∗) ∈ Π(cid:0): Abort (G3)
13 // Note: β∗ = βj
14 // for unique j ∈ [1 .. k]
15 Stop with 1
// was queried before
(G3)
(G3)
Return Π(α)
Procedure BRO(α)
16 If (α,·) ∈ Π:
17
18 β ←$ B
(G1)
19 k ← k+1; β ← βk (G2, G3)
20 If (·, β) ∈ Π: Abort
21 Π(cid:1) ← Π(cid:1) ∪ {(α, β)}
22 Return β
Procedure BRO−1(β)
23 If (·, β) ∈ Π:
24
25 α ←$ A
26 If α ∈ ϕ(G∗):
a ←$ Z∗
27
α ← ϕ(ga)
28
29 If (α,·) ∈ Π: Abort
30 Π(cid:0) ← Π(cid:0) ∪ {(α, β)}
(G2, G3)
(G2, G3)
(G2, G3)
Return Π−1(β)
q
31 Return α
Figure 7: Games G1, G2, and G3. We use writing
convention Π := Π(cid:1)∪Π(cid:0) and write ‘Abort’ as a short-
cut for ‘Stop with 0’.
Consider next Game G2 from Figure 7. There are two
diﬀerences to G1. First, in the BRO oracle, instead of sam-
pling values β individually for each query (line 18), these
are now sampled a priori (line 01) and spent one by one
(line 19). Second, in the BRO−1 oracle, if a sampled value α
happens to be an element of ϕ(G∗) it is resampled such that
the discrete logarithm a of a preimage under ϕ is known
(lines 26–28). As ϕ is a semi-injective function this change
)1/s∗
2 ⇒ 1].
1 ⇒ 1] = Pr[GF
does not aﬀect the distribution of sampled values α. We
thus have Pr[GF
Observe that if F succeeds in G2 with ﬁnding a valid
forgery (m∗,(cid:104)s∗, t∗(cid:105)) then the corresponding pair (α∗, β∗)
(cf. line 09) was established in either a forward or a back-
ward query to the bijective random oracle, i.e., it is con-
tained either in list Π(cid:0) or in list Π(cid:1). We next prove that
2 ⇒ 1] ≤ Pr[GF
from any adversary that forges using a pair established in a
backward query we can construct a DLP solver that recov-
ers the discrete logarithm of X with the same advantage.
Assume thus that F forges such that (α∗, β∗) ∈ Π(cid:0). Then
we have R∗ = (gH(m∗)X t∗
, which gives rise to equa-
tion H(m∗) + xt∗ = s∗r∗ with unknowns x = log X and
r∗ = log R∗, and we have ϕ(R∗) = α∗. By lines 26–28 and
the fact that ϕ is semi-injective we know that R∗ = gηa for
a known a and η ∈ {±1}. This allows solving above equa-
tion for x, as required. The speciﬁcation of Game G3 (in
Figure 7) adds to G2 an abort condition (in line 12) that
is triggered whenever F performs a forgery of the type just
considered. A standard reductionist argument thus shows
3 ⇒ 1] + ε(cid:48)(cid:48), for an inverter that
that Pr[GF
(τ(cid:48)(cid:48), ε(cid:48)(cid:48))-breaks DLP in time at most τ(cid:48)(cid:48) = τ + O(Q).
We employ the forking lemma (cf. Section 2.4) to analyze
3 ⇒ 1], i.e., the probability that F successfully forges
Pr[GF
using a forward query (in Π(cid:1)). To this end, from F we con-
struct an algorithm A that takes a vector (X, β1, . . . , βQ; ρ),
where X ∈ G∗ is a DLP instance, β1, . . . , βQ ∈ B, and ρ is a
set of random coins, as speciﬁed in Figure 8. The algorithm
invokes F as a subroutine, on input X and a random tape
derived from ρ, and processes bijective random oracle queries
as they are processed in G3. More precisely, queries to
BRO are answered using the β1, . . . , βQ values, and queries
to BRO−1 are answered using randomness derived from ρ.
When F stops and outputs a forgery (m∗,(cid:104)s∗, t∗(cid:105)), algo-
rithm A ﬁnds the index j of the BRO query correspond-
ing to the forgery (which necessarily exists), and outputs
it together with the triple (m∗, s∗, t∗). If F aborts also A
aborts. In Section 2.4 the probability acc = Pr[X ←$ G∗;
β1, . . . , βQ ←$ B; A(X, β1, . . . , βQ) (cid:59) ⊥] that A does not
abort is referred to as its accepting probability. A compar-
ison of A from Figure 8 with G3 from Figure 7 shows that
we have acc = Pr[GF
Consider next the DLP solver I speciﬁed in Figure 9. It
starts with invoking the forking algorithm ForkA (cf. Fig-
ure 2) as a subroutine (lines 01–09), on input X. The fork-
ing lemma (cf. Section 2.4) establishes that the probabil-
ity frk that ForkA(X) terminates without aborting, i.e., that
the execution of I reaches at least line 10, is bounded as
frk ≥ acc(acc/Q − 2−L).
To assess the success probability of I of solving DLP chal-
lenges it remains to bound the probability of abort in line 10,
and to assert the eﬀectiveness of the recovery step in line 11.
Concerning line 10, the probability of an abort can be
bounded using the ψ-relative division advantage εψdr (cf.
Deﬁnition 5) of a stateful adversary B = (B1,B2) as in Fig-
ure 10. Concretely, B1 gets input β and guesses j∗ ∈ [1 .. Q].
It then simulates lines 01 to 04 of I with the only diﬀerence
that it overwrites βj∗ ← β. Once it gets (j, (m, s, t)) from A
it checks if it guessed j correctly and forwards m to its own
challenger, together with state Γ = (X, j∗, β1, . . . , βj∗ , ρ).
When B2 is invoked on input (Γ, β(cid:48)), it simulates lines 05–09
of I, overwriting β(cid:48)
j∗ ← β(cid:48). Once it gets m(cid:48) from A, it for-
wards it to its challenger and wins if H(m)/t = H(m(cid:48))/t(cid:48)
3 ⇒ 1].
1659Procedure Init
00 (Π(cid:1), Π(cid:0)) ← (∅,∅)
01 Obtain (X, β1, . . . , βQ; ρ)
02 Return X
Procedure BRO(α)
as in G3 (cf. Figure 7)
Procedure BRO−1(β)
as in G3 (cf. Figure 7)
Procedure Fin(m∗,(cid:104)s∗, t∗(cid:105))
03 If s∗ = 0 ∨ t∗ = 0: Abort
04 U∗ ← gH(m∗)X t∗
05 If U∗ = 1: Abort
06 R∗ ← (U∗)1/s∗
07 α∗ ← ϕ(R∗)
08 β∗ ← Π(α∗)
09
10 If ψ(β∗) (cid:54)= t∗: Abort
11 If (α∗, β∗) ∈ Π(cid:0): Abort
12 Find j ∈ [1 .. k] s.t. β∗ = βj
13 Output j and (m∗, s∗, t∗)
// was queried before
Figure 8: Algorithm A is constructed from key-only
forger F. It obtains its input in line 01 and declares
its output, unless it aborts, in line 13. Procedures
Init, BRO, BRO−1, Fin are invoked by F. Note that
BRO−1 contains instructions for sampling from sets
A and Z∗
q ; in the context of A, these operations are
understood to take their randomness from ρ. Also
the randomness of F is taken from ρ. We write
‘Abort’ as shortcut for ‘Output ⊥ and stop’.
I(X)
00 Run forking algorithm ForkA(X) as a subroutine:
01
02
03
04
05
06
07
08
09
10 Abort if H(m)/t = H(m(cid:48))/t(cid:48)
11 Compute x as described in text
12 Output x
Pick random coins ρ for A
β1, . . . , βQ ←$ B
(j, (m, s, t)) ← A(X, β1, . . . , βQ; ρ)
// If A aborts outputting ⊥: Abort
Q ←$ B
β(cid:48)
j, . . . , β(cid:48)
Abort if βj = β(cid:48)
(j(cid:48), (m(cid:48), s(cid:48), t(cid:48))) ← A(X, β1, . . . , βj−1, β(cid:48)
// If A aborts outputting ⊥: Abort
Abort if j (cid:54)= j(cid:48)
j
j, . . . , β(cid:48)
Q; ρ)
Figure 9: DLP-solver I runs algorithm A (twice)
as a subroutine. We write ‘Abort’ as shortcut for
‘Output ⊥ and stop’.
j∗ ) and t, t(cid:48) (cid:54)= 0). It follows that
(since t = ψ(βj∗ ), t(cid:48) = ψ(β(cid:48)
the probability of an abort in line 10 of I is bounded by
Qεψdr.
)1/s(cid:48)
Now consider the case line 11 of Figure 9 is reached. Note
that the same ϕ(R) is used in both forgeries by construction
of A and ForkA, since the executions of I only diﬀer from
the jth BRO query onwards, so by the semi-injectiveness
of ϕ we have Rη = (gH(m)X t)η/s = (gH(m(cid:48))X t(cid:48)
= R(cid:48)
for η ∈ {±1}. Let r = log R, r(cid:48) = log R(cid:48), and x = log X.
Then r(cid:48) = ηr and hence sr − tx = H(m) and s(cid:48)ηr − t(cid:48)x =
H(m(cid:48)). By dividing the ﬁrst equation by t and the second
by t(cid:48) and subtracting them from each other, it follows that
r(s/t − s(cid:48)η/t(cid:48)) = H(m)/t − H(m(cid:48))/t(cid:48). Since the right-hand
side is nonzero by the condition in line 10 and r is nonzero by
validity of the forgery, so is s/t − s(cid:48)η/t(cid:48) and I can compute
r = (H(m)/t − H(m(cid:48))/t(cid:48))/(s/t − s(cid:48)η/t(cid:48)) and thus also x =
(sr − H(m))/t.
Recall that adversary F (τ, Q, ε)-breaks the key-only se-
curity of GenDSA, that adversary B (τψdr, εψdr)-breaks the
ψ-relative division resistance of H, and that there is an ad-
versary that (τ(cid:48)(cid:48), ε(cid:48)(cid:48))-breaks the DLP in G. As we saw, acc =
3 ⇒ 1] ≥ ε− ε(cid:48)(cid:48) − Q2/2L, and frk ≥ acc(acc/Q− 1/2L).
Pr[GF
q ; X ← gx
j∗ , . . . , β(cid:48)
j∗ ← β(cid:48)
B2(Γ, β(cid:48))
11 Recover X, j∗, β1, . . . , βj∗ , ρ
Q ←$ B
12 β(cid:48)
13 β(cid:48)
14 Abort if βj∗ = β(cid:48)
j∗
15 L(cid:48) ← (β1 . . . βj∗−1, β(cid:48)
j∗ . . . β(cid:48)
Q)
16 (j(cid:48), (m(cid:48), s(cid:48), t(cid:48))) ← A(X, L(cid:48); ρ)
// If A outputs ⊥: Abort
17
18 Abort if j (cid:54)= j(cid:48)
19 Return m(cid:48)
B1(β)
00 x ←$ Z∗
01 j∗ ←$ [1 .. Q]
02 Pick random coins ρ for A
03 β1, . . . , βQ ←$ B
04 βj∗ ← β
05 L ← (β1, β2, . . . , βQ)
06 (j, (m, s, t)) ← A(X, L; ρ)
// If A outputs ⊥: Abort
07
08 Abort if j (cid:54)= j∗
09 Γ ← (X, j∗, β1, . . . , βj∗ , ρ)
10 Return (m, Γ)
Figure 10: Construction of adversary B against the
ψ-relative division resistance of H. We write ‘Abort’
as a shortcut for ‘Return ⊥’.
We can assume w.l.o.g. that 1/2L ≤ acc/2Q, because oth-
erwise ε can be bounded by ε(cid:48)(cid:48) + Q(Q + 2)/2L and we are
done. Now overall, for the success probability ε(cid:48) of I we
have ε(cid:48) ≥ frk − Qεψdr ≥ acc(acc/Q − 1/2L) − Qεψdr ≥
acc(acc/Q − acc/2Q) − Qεψdr = acc2/2Q − Qεψdr ≥ (ε −
ε(cid:48)(cid:48) − Q2/2L)2/2Q − Qεψdr. All in all we proved Pr[KOF ⇒
1] ≤(cid:112)2Q2εψdr + 2Qε(cid:48) + ε(cid:48)(cid:48) + Q2/2L, as required.
5. CONCLUSIONS FOR DSA AND ECDSA
By combining Theorems 1 and 2 we obtain that if ϕ is
semi-injective and H is suﬃciently secure then GenDSA is
euf-cma secure if the discrete logarithm problem in G is hard,
in the bijective random oracle model for Π. Further, in the
full version we show that GenDSA is strongly unforgeable if
and only if ϕ is injective. In practice, the conditions on H
and G are arguably fulﬁlled for the standardized versions of
DSA and ECDSA. That is, if one accepts the random bijec-
tion model for Π, our overall results in a nutshell are: DSA
signatures are strongly unforgeable, and ECDSA signatures