Cardoso, J., "Integrating HAD Organizational Data Assets using Semantic Web Technologies", 3rd
International Conference Interoperability for Enterprise Software and Applications (I-ESA 2007),
Funchal, Portugal, March 28th-30th, 2007. Enterprise Interoperability II, Ricardo Gonçalves, Jörg
Müller, Kai Mertins, and Martin Zelm (eds), pp. 333-344, Springer. ISBN: 978-1-84628-857-9.
Integrating HAD Organizational Data Assets using
Semantic Web Technologies
J. Cardoso
Department of Mathematics and Engineering, University of Madeira, 9050-390 Funchal,
Portugal.
PI:EMAIL
Keywords: Semantic Web, Data Integration, Data Semantics, Enterprise Data
Management, Semantic Information Architecture, XML, OWL.
ABSTRACT
To create value based on information and knowledge, organizations need to recognize that
they are composed of various types of data assets. In this context, data integration has been
proven to be a challenge due to the heterogeneity of the information systems involved. The
Extensible Markup Language (XML) was one of most successful solutions developed to
provide business-to-business integration. However, XML “lacks semantics”. Thus problems
arise when it is necessary to manipulate and integrate different XML data sources.
Consequently, today’s organizations are again shifting from a syntactic interoperability level
to a semantic one. This paper presents a Semantic data Integration Middleware (SIM)
which, when based on a single query, integrates data residing in different data sources. The
middleware uses an ontology-based multi-source data extractor/wrapper approach to
transform data into semantic knowledge.
1 Introduction
Barnett and Standing (Barnett and Standing, 2001) argue that the rapidly changing
business environment brought on by the Internet requires organizations to
implement new business models as rapidly, develop new networks and alliances,
and be creative in their marketing strategies. In order to compete in the electronic
2 J. Cardoso
era, businesses must be prepared to use technology-mediated channels, create
internal and external value, formulate technology convergent strategies, and
organize resources around knowledge and relationships (Rayport and Jaworski,
2001).
To create internal and external value based on information and to organize
resources around knowledge and relationships, organizations need to recognize that
they are composed of various types of data assets. Examples of data asset formats
include relational databases, Web pages, plain text files, EDI documents
(Electronic Data Interchange), XML files, and, more recently, Web services.
Despite the large quantity of data collected by organizations, managers often
struggle to obtain information that would help them in decision-making. In this
context, data exchange and integration has been proven to be a challenge due to the
heterogeneity of the information systems involved.
At least three types of data heterogeneity may occur when integrating
information from heterogeneous, autonomous, and distributed (HAD) data schema
(Sheth, 1998, Ouskel and Sheth, 1999): syntactic heterogeneity: the technology
supporting the data sources differs (e.g. databases, Web pages, XML streams, Web
services, etc); schematic heterogeneity: data sources schema have different
structures; and semantic heterogeneity. These heterogeneity problems create a
market for the creation and the maintenance of point-to-point translations between
these schemas worth billions dollars per annum (Schreiber, 2003). When these
translations are carried out manually they are expensive to create. Moreover, since
most of the time they are not based on the semantic understanding of the data, they
result in poor information integration quality. In 2003, the cost of this limitation
was estimated to be $600 billion/year for the US (Eckerson, 2003).
The need to integrate of heterogeneous, autonomous, and distributed (HAD)
data and systems has become a hard task since several data representations,
formats and schema exist nowadays. Figure 1 illustrates the evolution of the
various data representations over the years. Several decades ago, organizations
stored their data in static flat files. However, in answer to the inherent dynamic
nature of businesses, organizations started to rely on dynamic solutions to manage
their data. One solution was the worldwide adoption relational database
management systems (RDBMS). This technique offers the opportunity to deliver
information that is highly customized to the needs of individual users.
Fig. 1. Evolution of data representations
Nevertheless, the technologies available to query data based on databases were
insufficient for the requirements of organizations looking for application
integration solutions. Businesses required their heterogeneous systems and
applications to communicate in a transactional manner. The Extensible Markup
Language (XML, 2005) was one of most successful solutions developed to provide
Integrating HAD Organizational Data Assets using Semantic Web Technologies 3
business-to-business integration. XML became a means of transmitting
unstructured, semi-structured, and even structured data between systems,
enhancing the integration of applications and businesses.
XML brought syntactic interoperability and became the de facto standard as a
B2B data exchange format (Bussler, 2003). However, XML “lacks semantics”
(Hawke, 2001, Shabo A. et al., 2006). Thus problems arise when it is necessary to
manipulate and integrate different XML data sources. Consequently, today’s
organizations are again shifting (or it is expected of them to do so) from a syntactic
interoperability level to a semantic one (EBizQ, 2005).
Approaches to the problems of semantic heterogeneity should equip
heterogeneous, autonomous, and distributed software systems with the ability to
share and exchange information in a semantically consistent way (Sheth, 1998). A
suitable solution to the problem of semantic heterogeneity is to rely on the
technological foundations of the semantic Web; or more precisely, to semantically
define the meaning of the terminology of each distributed system data using the
concepts present in a shared ontology to make clear the relationships and
differences between concepts.
Schreiber (Schreiber, 2003) points out that the Semantic Web and its
underlying technologies may have their greatest impact within organizations that
struggle with business information being spread across thousands of data sources
each of which is semantically different. Furthermore, it has been identified that the
Semantic Web has already demonstrated its practical use in Bioinformatics, Web
services, Tourism Information Systems, Digital Libraries, etc (Cardoso and Sheth,
2006, Cardoso and Sheth, 2005).
This paper presents a Semantic data Integration Middleware (SIM) which,
when based on a single query, integrates data residing in different data sources
possibly with different formats, structures, schema, and semantics. The middleware
uses an ontology-based multi-source data extractor/wrapper approach to transform
data into semantic knowledge (Silva and Cardoso, 2006). SIM is composed of two
main modules: the Schematic Transformation module and the Syntactic-to-
Semantic Transformation module. The first module is responsible for integrating
data residing in different data sources possibly with different formats, structures,
and schema. The second module maps XML Schema documents to existing OWL
ontologies and automatically transform XML instance documents into individuals
of the mapped ontology (Rodrigues et al., 2006). This module is crucial for
organizations that plan to move from a syntactic representation of data using XML
to a semantic one using OWL.
This paper is structured as follows. In Section 2, the architecture of our system,
namely, semantic data integration middleware (SIM) is presented . In Section 3,
the Schematic Transformation module is described. This module uses a multi-
source data extractor/wrapper approach to transform data to an XML
representation. In Section 4 the second most important module of SIM is described,
the Syntactic-to-Semantic Transformation module which automatically transforms
XML instance documents into individuals of an OWL ontology. In Section 5 the
related work in data integration middleware is presented and finally, in section 6,
our conclusions.
4 J. Cardoso
2 SIM Architecture
The development of our Semantic data Integration Middlware (SIM) is a complex
issue since it requires the integration of distributed systems with infrastructures
that are not frequently encountered in more traditional centralized systems. For a
SIM to be successful it is indispensable to study its architecture. The study of
architectural strategies has a critical impact on early decisions in system
development; it is both cost-effective and efficient to conduct analyses at the
architecture level, before substantial resources have been committed to
development (Bass et al., 1998). Therefore, we will undertake a study of our
approach to SIM development by presenting its architecture.
We propose architecture for SIM composed of four layers: data sources,
Schematic Transformation, Syntactic-to-Semantic Transformation, and ontology.
The relationships between these layers are illustrated in Figure 2.
Fig. 2. Overview of SIM architecture
These four modules have the following objectives and responsibilities:
Data Sources (Y): The data sources define the scope of the integration system,
thus data source diversity provides a wider integration range and data visibility.
SIM can connect to B2B traditional data source formats, such as structured (e.g.
relational databases), semi-structured (e.g. XML) and unstructured (e.g. Web pages
and plain text files), EDI (Electronic Data Interchange), and Web services. The
supported data source types can easily be increased to support other formats.
Schematic Transformation (Y-to-XML): This module integrates data residing in
different data sources possibly with different formats, structures, schema, and
Integrating HAD Organizational Data Assets using Semantic Web Technologies 5
semantics. The module uses a multi-source data extractor/wrapper approach to
transform data to a XML representation.
Syntactic-to-Semantic Transformation (XML-to-OWL): This module uses the
JXML2OWL framework (described in section 4.2) to map XML Schema
documents to existing OWL ontologies and automatically transform XML instance
documents into individuals of the mapped ontology. This module is crucial for
organizations that plan to move from a syntactic representation of data using XML
to a semantic one using OWL.
Ontologies (OWL): SIM introduces the ability to extract data from various data
source types (unstructured, semi-structured, and structured) and wrap the result in
OWL (Web Ontology Language) format (OWL, 2004), providing a homogenous
access to a heterogeneous set of information sources. The decision to adopt OWL
as the ontology language is based on the fact that this is the World Wide Web
Consortium (W3C) recommendation for building ontologies.
Since the two most important components of our middleware are the Schematic
Transformation and Syntactic-to-Semantic Transformation modules, they will be
described in detail in the next two sections.
3 Schematic Transformation
As organizations grow and change, their needs to manage and access information
increases exponentially. In many situations, “data supporting architectures have
shifted from a centralized to a distributed approach due to the advantages in the
cost and flexibility”. While these trends have resulted in many advantages for
organizations, they have also introduced a large gap in the ability to integrate data
between applications and organizations.
A middleware for data integration should allow users to focus on what
information is needed and leave the details on how to obtain and integrate
information hidden from users (Silva and Cardoso, 2006). Thus, in general, data
integration systems must provide mechanisms to communicate with an
autonomous data source, handle queries across heterogeneous data sources, and
combine the results in an interoperable format. Therefore, the key problem is to
bridge syntactic, schematic and semantic gaps between data sources, thereby
solving data source heterogeneity.
At least three types of data heterogeneity may occur when integrating
information from heterogeneous, autonomous, and distributed data sources:
syntactic heterogeneity: the technology supporting the data sources differs (e.g.
databases, Web pages, XML streams, Web services, etc); schematic heterogeneity:
data sources schema have different structures; and semantic heterogeneity: data
sources use different meanings, nomenclatures, vocabulary or units for concept.
The Schematic Transformation module is responsible for integrating data from
different data source and resolving syntactic heterogeneity and schematic
6 J. Cardoso
heterogeneity. Semantic heterogeneity is solved by the Syntactic-to-Semantic
Transformation module.
3.1 Architecture
Figure 2 presents a high level illustration of the Schematic Transformation module.
Two key areas can be identified. The first concerns the extractor (Extractor
Manager) used to connect to the different data sources registered in the system and
to extract data from them. The extracted data fragments are then compiled in order
to generate ontology instances. The second key area is the mapping result between
an ontology schema and the data sources (Mapping Module). This information is
produced when the ontology attributes and classes are intersected with the data
sources forming an extraction schema used by the extractor to retrieve data from
the sources.
Other areas also play an important role in the architecture. This is the case of
the Query Handler, which receives and handles the queries to the data sources, the
Instance Generator, which is responsible for providing information about any error
that has occurred during the extraction process or in the query, and finally the
Ontology Schema that plays a major role in data mapping.
3.2 Mapping Module
To enable the extraction from distributed and heterogeneous sources, it is
necessary to formally denote the notion of mapping between remote data and the
local ontology. The mapping is the result of information crossing between the
XML schema and the data sources in order to provide information about XML’s
attributes in the extraction process.
Depending on data source characteristics, two data extraction scenarios may
emerge. This is because data sources might have ‘one’ data record (for instance a
Web page describing a watch) or might have ‘n’ data records (for instance a
database of watches). The data source scenario defines how the mapping is made
and how data is extracted (in order to support the existence of an infinite number of
records).
According to our approach, the mapping procedures are carried out manually.
This task is time consuming but offers the highest degree of data extraction