### Cardoso, J., "Integrating HAD Organizational Data Assets using Semantic Web Technologies"

**3rd International Conference on Interoperability for Enterprise Software and Applications (I-ESA 2007), Funchal, Portugal, March 28th-30th, 2007.**

**Enterprise Interoperability II, edited by Ricardo Gonçalves, Jörg Müller, Kai Mertins, and Martin Zelm, pp. 333-344, Springer. ISBN: 978-1-84628-857-9.**

### Integrating HAD Organizational Data Assets using Semantic Web Technologies

**J. Cardoso**
Department of Mathematics and Engineering, University of Madeira, 9050-390 Funchal, Portugal.
**Email:** [PI:EMAIL]

**Keywords:** Semantic Web, Data Integration, Data Semantics, Enterprise Data Management, Semantic Information Architecture, XML, OWL.

### Abstract

To create value based on information and knowledge, organizations must recognize that they are composed of various types of data assets. In this context, data integration has proven to be a challenge due to the heterogeneity of the involved information systems. The Extensible Markup Language (XML) was one of the most successful solutions developed for business-to-business integration. However, XML lacks semantic richness, leading to difficulties in manipulating and integrating different XML data sources. Consequently, organizations are shifting from syntactic interoperability to semantic interoperability. This paper presents a Semantic Data Integration Middleware (SIM) that integrates data from different sources based on a single query. The middleware uses an ontology-based multi-source data extractor/wrapper approach to transform data into semantic knowledge.

### 1. Introduction

Barnett and Standing (2001) argue that the rapidly changing business environment, driven by the Internet, requires organizations to implement new business models, develop new networks and alliances, and adopt creative marketing strategies. To compete in the digital era, businesses must use technology-mediated channels, create internal and external value, formulate convergent technology strategies, and organize resources around knowledge and relationships (Rayport and Jaworski, 2001).

To create value based on information and organize resources around knowledge and relationships, organizations need to recognize their diverse data assets. Examples of data asset formats include relational databases, web pages, plain text files, EDI documents, XML files, and more recently, web services. Despite the large quantity of data collected, managers often struggle to obtain useful information for decision-making. Data exchange and integration are challenging due to the heterogeneity of the information systems involved.

At least three types of data heterogeneity can occur when integrating information from heterogeneous, autonomous, and distributed (HAD) data schemas (Sheth, 1998; Ouskel and Sheth, 1999):
- **Syntactic heterogeneity:** Different technologies support the data sources (e.g., databases, web pages, XML streams, web services).
- **Schematic heterogeneity:** Data sources have different structures.
- **Semantic heterogeneity:** Data sources use different meanings, nomenclatures, vocabularies, or units for concepts.

These heterogeneity problems create a market for creating and maintaining point-to-point translations between schemas, worth billions of dollars annually (Schreiber, 2003). Manual translations are expensive and often result in poor integration quality. In 2003, the cost of this limitation was estimated at $600 billion per year in the US (Eckerson, 2003).

The need to integrate heterogeneous, autonomous, and distributed data and systems has become increasingly complex due to the variety of data representations, formats, and schemas. Figure 1 illustrates the evolution of data representations over the years. Organizations initially stored data in static flat files but later adopted dynamic solutions like relational database management systems (RDBMS) to manage data. RDBMS offers highly customized information delivery to individual users.

However, the technologies available for querying data based on databases were insufficient for application integration. Businesses required their heterogeneous systems and applications to communicate transactionally. XML became a successful solution for business-to-business integration, transmitting unstructured, semi-structured, and structured data between systems. While XML brought syntactic interoperability, it lacks semantics, leading to issues when integrating different XML data sources. Thus, organizations are shifting towards semantic interoperability (EBizQ, 2005).

Approaches to semantic heterogeneity should enable heterogeneous, autonomous, and distributed software systems to share and exchange information semantically (Sheth, 1998). A suitable solution is to use the technological foundations of the Semantic Web, defining the meaning of terminology in each distributed system using shared ontologies to clarify relationships and differences between concepts.

Schreiber (2003) notes that the Semantic Web and its underlying technologies may have the greatest impact within organizations struggling with business information spread across thousands of semantically different data sources. The Semantic Web has already demonstrated practical use in fields such as Bioinformatics, web services, tourism information systems, and digital libraries (Cardoso and Sheth, 2006, 2005).

This paper presents a Semantic Data Integration Middleware (SIM) that integrates data from different sources based on a single query. The middleware uses an ontology-based multi-source data extractor/wrapper approach to transform data into semantic knowledge (Silva and Cardoso, 2006). SIM consists of two main modules: the Schematic Transformation module and the Syntactic-to-Semantic Transformation module. The first module integrates data from different sources, while the second maps XML Schema documents to existing OWL ontologies and transforms XML instance documents into individuals of the mapped ontology (Rodrigues et al., 2006). This module is crucial for organizations transitioning from XML to OWL.

### 2. SIM Architecture

Developing the Semantic Data Integration Middleware (SIM) is complex, requiring the integration of distributed systems with infrastructures not commonly found in traditional centralized systems. Studying the architecture is essential for successful development. Architectural analysis is both cost-effective and efficient, allowing early decisions before substantial resources are committed (Bass et al., 1998).

We propose a SIM architecture consisting of four layers: data sources, Schematic Transformation, Syntactic-to-Semantic Transformation, and ontology. The relationships between these layers are illustrated in Figure 2.

**Figure 2. Overview of SIM Architecture**

- **Data Sources (Y):** Define the scope of the integration system, providing a wide integration range and data visibility. SIM supports B2B traditional data source formats, including structured (e.g., relational databases), semi-structured (e.g., XML), and unstructured (e.g., web pages, plain text files, EDI, and web services). Additional formats can be easily supported.
- **Schematic Transformation (Y-to-XML):** Integrates data from different sources with varying formats, structures, and schemas. It uses a multi-source data extractor/wrapper approach to transform data into an XML representation.
- **Syntactic-to-Semantic Transformation (XML-to-OWL):** Uses the JXML2OWL framework (described in Section 4.2) to map XML Schema documents to existing OWL ontologies and transform XML instance documents into individuals of the mapped ontology. This module is crucial for organizations transitioning from XML to OWL.
- **Ontologies (OWL):** SIM extracts data from various data source types and wraps the results in OWL format, providing homogeneous access to a heterogeneous set of information sources. OWL is chosen as the ontology language because it is the W3C recommendation for building ontologies.

The Schematic Transformation and Syntactic-to-Semantic Transformation modules are the most important components and will be described in detail in the following sections.

### 3. Schematic Transformation

As organizations grow and change, their need to manage and access information increases exponentially. Data architectures have shifted from centralized to distributed approaches, offering cost and flexibility advantages. While these trends have many benefits, they also introduce significant challenges in integrating data between applications and organizations.

A middleware for data integration should allow users to focus on what information is needed, hiding the details of how to obtain and integrate information (Silva and Cardoso, 2006). Data integration systems must provide mechanisms to communicate with autonomous data sources, handle queries across heterogeneous data sources, and combine results in an interoperable format. The key problem is to bridge syntactic, schematic, and semantic gaps between data sources, solving data source heterogeneity.

Three types of data heterogeneity can occur when integrating information from HAD data sources:
- **Syntactic heterogeneity:** Different technologies support the data sources.
- **Schematic heterogeneity:** Data sources have different structures.
- **Semantic heterogeneity:** Data sources use different meanings, nomenclatures, vocabularies, or units for concepts.

The Schematic Transformation module integrates data from different sources, resolving syntactic and schematic heterogeneity. Semantic heterogeneity is addressed by the Syntactic-to-Semantic Transformation module.

#### 3.1 Architecture

Figure 2 provides a high-level illustration of the Schematic Transformation module. Two key areas are identified:
- **Extractor Manager:** Connects to different data sources registered in the system and extracts data. Extracted data fragments are compiled to generate ontology instances.
- **Mapping Module:** Maps an ontology schema to the data sources. This information is produced by intersecting ontology attributes and classes with the data sources, forming an extraction schema used by the extractor.

Other areas play important roles:
- **Query Handler:** Receives and handles queries to the data sources.
- **Instance Generator:** Provides information about errors during the extraction process or in the query.
- **Ontology Schema:** Plays a major role in data mapping.

#### 3.2 Mapping Module

To enable extraction from distributed and heterogeneous sources, it is necessary to formally denote the mapping between remote data and the local ontology. The mapping is the result of information crossing between the XML schema and the data sources, providing information about XML attributes in the extraction process.

Two data extraction scenarios may emerge depending on data source characteristics:
- **Single record:** For example, a web page describing a watch.
- **Multiple records:** For example, a database of watches.

The data source scenario defines the mapping and extraction process. According to our approach, the mapping procedures are carried out manually, which is time-consuming but offers the highest degree of data extraction accuracy.