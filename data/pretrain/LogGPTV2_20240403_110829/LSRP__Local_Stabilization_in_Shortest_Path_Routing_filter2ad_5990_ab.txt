system state q, denoted as P (q), is minq(cid:1)∈Ql
(cid:1)) ∧ q(i) (cid:9)= q
DSq(cid:1)(V.q \ V.q
Ql is the set of all possible legitimate system states,
Aq(cid:1) = {i : i ∈ (V.q ∩ V.q
Bq(cid:1) = {i : i ∈ V.q ∧ i ∈ (DSq(cid:1)(V.q
(cid:1) \ E.q)∪
(cid:1)))}
(cid:1) \ V.q, E.q
, E.q \ E.q
(cid:1)(i)},
(cid:1)
Intuitively, the perturbation size at a state q equals to the
minimum number of nodes in G.q whose states either have
been corrupted by some transient faults or the values of whose
problem-speciﬁc variables have to be changed in order for the
system to stabilize to a legitimate state. It denotes the min-
imum amount of work needed to correct a perturbation that
occurs in a system.
Then, the set of potentially perturbed node sets at state q,
(cid:1) ∈ Ql ∧|Aq(cid:1) ∪
denoted as P P (q), is deﬁned as {Aq(cid:1) ∪ Bq(cid:1): q
Bq(cid:1)| = P (q)}, where Ql, Aq(cid:1), and Bq(cid:1) are the same as in
Deﬁnition 1.
For example, in the problem of shortest path routing, Fig-
ure 1 represents a legitimate system state. When the system
1
V11
2
V13
3
8V
0
2V
4
6V
5
1V
1
V12
2
V14
3
4
5
3V
7V
V
9
In the ﬁgure, each circle represents a
node in the system, the string in a circle
represents the ID of the node, node v2
is a destination node, and the number be-
sides each circle represents the distance
from that node to v2. A directed edge
 means that vj is the next-hop
on the chosen shortest path from vi to v2,
and an undirected dashed edge (vi, vj)
means that vi and vj are neighbors in the
system, but neither is vj on the chosen
shortest path from vi to v2, nor is vi on
the chosen shortest path from vj to v2.
4
5V
5
10V
6
4V
Figure 1. Example of perturbation size in a system
when faults occur
is at this state, if state corruption occurs at node v8, then the
perturbation size at the state after the corruption is 1 and the
set of potentially perturbed node sets is {{v8}}, since only v8
needs to change its state in order for the system to stabilize to
legitimate state, and at least one node in the system needs to
change its state in order for the system to stabilize; however,
if node v8 fail-stops, then the perturbation size is 3 and the
set of potentially perturbed node sets is {{v6, v5, v10}}, since
nodes v6, v5, and v10 have to change their next-hop on their
shortest paths to v2, while all the other nodes in the system
don’t need to.
In contrast to the concept of perturbation size which is
protocol independent, the concept of F-local stabilization is
protocol-dependent.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:56:18 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 2 (F-local stabilization) A system G is F-local
stabilizing if and only if
we say that a system is local stabilizing (for simplicity).
Starting at an arbitrary state q, every computa-
tion of G reaches a legitimate state within F(P (q))
time, where F is a function and P (q) is the pertur-
bation size at state q.
If a system is F-local stabilizing and F is a linear function,
Given an F-local stabilizing system and a system compu-
(cid:1)
,
tation β that starts at state q and reaches a legitimate state q
the perturbed node set at q, denoted as P N(q), is deﬁned such
that P N(q) ∈ P P (q) and |P N(q)| = maxS∈P P (q)|S ∩ {i :
(cid:1)(i)}|. A node i is perturbed at q if
i ∈ G.q ∧ q(i) (cid:9)= q
i ∈ P N(q), otherwise, it is healthy at q. A node is con-
taminated if it is healthy at q and there is at least one action
executed at the node during stabilization. Then, the range of
contamination, denoted by Rc(q), is deﬁned as the the maxi-
mum distance from the set of contaminated nodes to the per-
turbed node set P N(q).
3.2 Properties of F-local stabilizing systems
A set of nodes S are contiguous at a system state q if
S ⊆ V.q and the subgraph of G.q(V.q, E.q) on S is con-
(cid:1) = S
nected, i.e., the graph G
(cid:1) = {(i, j) : i ∈ S ∧ j ∈ S ∧ (i, j) ∈ E.q}. A
and E
maximal set of perturbed nodes that are contiguous is called
a perturbed region. Then the following properties hold for a
F-local stabilizing system G:
• Starting at an arbitrary state q, the maximum distance
that faults can propagate outward from the perturbed re-
gions is O(F(P (q))), i.e., the range of contamination is
O(F(P (q))). Therefore, every node that is ω(F(P (q)))
hops away from the perturbed regions at state q will not
be contaminated by the perturbation.
• Starting at an arbitrary state q where the perturbed re-
gions are ω(F(P (q))) hops away from one another, the
stabilization of one perturbed region is independent of
and concurrent with that of the other perturbed regions,
and the time taken for the system to stabilize only de-
pends on the size of the largest perturbed region.
• Because it is F-local stabilizing, the availability of G is
high in the sense that it stabilizes quickly after perturba-
tions and the impact of perturbations is contained locally
around where they occur. Moreover, G can tolerate high
frequency of repeated faults while still guaranteeing lo-
cal fault containment.
(cid:1)) is connected, where V
, E
(cid:1)
(cid:1)(V
protocol concepts underlying LSRP, and ﬁnally present LSRP
and its design.
4.1 Problem statement
The problem is to design a protocol that, given a system
G(V, E) and a destination node r in the system, constructs
and maintains a spanning tree T (called shortest path tree) of
G that meets the following requirements:
• Node r is the root of the shortest path tree T ;
• (∀i : i ∈ V ⇒ dist(i, r, T ) = dist(i, r, G)), where
dist(i, r, T ) and dist(i, r, G) are the minimum distance
between nodes i and r in T and G respectively; (that is,
the path from every node i to r in T is a shortest path
between i and r in G.)
• The system G is F−local stabilizing.
4.2 Fault propagation in existing distance-vector
protocols
Existing distance-vector routing protocols are based on the
distributed Bellman-Ford algorithm [6, 10]. In these proto-
cols, each node i maintains the distance, denoted as d.i, of
and the next-hop, denoted as p.i, on its shortest path to each
destination. For a destination r, if node j is a neighbor of i and
d.j = min{d.k : k is a neighbor of i}, i will choose j as the
next hop on its shortest path to r (i.e., set p.i to j) and set d.i
to d.j + wij, where wij is the weight of edge (i, j). However,
in these protocols, faults cannot be contained around where
they have occurred, and F-local stabilization is not guaran-
teed, which results in routing instability.
One example is shown in Figure 2. For the same system in
0
2V
0
2V
1
12V
2
14V
3
3V
4
7V
5
V
9
1
11V
2
13V
1
8V
4
6V
5
1V
4
5V
5
10V
6
4V
1
2
3
12V
14V
3V
4
7V
3
9V
1
11V
2
13V
1
8V
2
6V
3
1V
2
5V
3
10V
4
4V
(a)
(b)
4 Protocol LSRP
In this section, we ﬁrst specify the problem of local stabi-
lization in shortest path routing. Then we explain the limita-
tions of existing distance-vector routing protocols, present the
Figure 2. Example of fault propagation in existing
distance-vector routing protocols
Figure 1, Figure 2(a) represents a system state where the state
of node v8 is corrupted such that d.v8 = 1. Ideally, v8 should
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:56:18 UTC from IEEE Xplore.  Restrictions apply. 
correct its state such that d.v8 = 3, and all the other nodes
in the system remain unaffected by the state corruption at v8.
However, in existing distance-vector routing protocols, it is
possible that nodes v6 and v5 detect the change of d.v8 before
v8 corrects its state. Then both v6 and v5 will change their
state correspondingly such that d.v6 = d.v5 = d.v8 + 1 = 2.
And the same happens at nodes v9, v1, v10, and v4. There-
fore, the fault at v8 propagates to nodes v6, v5, etc., and the
perturbed system state after the fault propagation from v8 is
shown in Figure 2(b). Even though the system will stabilize
to a legitimate state later, nodes far away from v8, such as v4
and v9, have been contaminated by the state corruption at v8,
and the time taken for the system to stabilize depends on the
diameter of the system instead of the perturbation size. Fur-
thermore, node v9 has changed its route to destination v2 be-
cause of the fault propagation, which leads to route ﬂapping,
a severe kind of routing instability.
4.3 Protocol concepts
be smaller than it should be in a legitimate state;
In the example shown in Figure 2, the state corruption at v8
can propagate far away until it reaches the leaves of the short-
est path tree, and the time taken for the system to stabilize
depends on its diameter instead of the perturbation size. The
reasons for the unbounded fault propagation and slow stabi-
lization are as follows:
• First, the distance value of v8 (i.e., d.v8) is corrupted to
• Second, before node v8 corrects its corrupted state, v6 as
well as v5 detects that d.v8 decreases. Because neither
v6 nor v5 knows that the new state of v8 is a corrupted
one, both v6 and v5 update their state according to the
corrupted state of node v8, and the state corruption at v8
propagates to its neighbors v6 and v5. Then, the same
thing that has happened to node v6 and v5 happens to
nodes that are neighbors of v6 and v5, and so on.
• Third, after detecting that its state has been corrupted,
node v8 corrects its state (i.e., sets d.v8 to 3). Then, its
neighbors v6 and v5 correct their corrupted states, and so
on. However, this “correction” action is unable to catch
up with the “fault propagation” action that propagates the
initial corruption at v8. Therefore, the initial corruption
at v8 is propagated far away until it reaches the leaves of
the shortest path tree, hence the time taken for the system
to stabilize depends on the system diameter instead of the
perturbation size at the initial state.
In short, the reason why faults propagate and local sta-
bilization is violated is that the “correction” action always
lags behind the “fault propagation” action. Therefore, one
approach to contain faults locally and achieve local stabiliza-
tion is to guarantee that the node that is the source of fault
propagation (for example, node v8) will detect the existence
of fault propagation, and initiate a “containment” action that
can catch up with and stop the “fault propagation” action be-
fore faults propagate far away. We develop this approach as
follows.
Layering of diffusing waves In shortest path routing, the
system computation can be regarded as a diffusing compu-
tation. To achieve local stabilization in shortest path routing,
we layer the diffusing computation into three diffusing waves:
the stabilization wave, the containment wave, and the super-
containment wave (see Figure 3). Each wave has a differ-
ent propagation speed, with the stabilization wave propagated
at the lowest speed, containment wave at intermediate speed,
and super-containment wave at the highest speed.
Super−containment Wave
Containment Wave
Stabilization Wave
Figure 3. Layering of diffusing waves in shortest path
routing
The stabilization wave is a diffusing computation that im-
plements the basic distributed Bellman-Ford algorithm with
some changes in order to cooperate with the containment