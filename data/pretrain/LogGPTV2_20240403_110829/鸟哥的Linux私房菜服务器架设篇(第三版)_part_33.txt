理为：
[root@www ~]# links -dump \
> http://some.site.name/web.php?name=user&password=pw > testfile
上面的网站后面有加个问号 (?) 对吧？后面接的则是利用网页的‘ GET ’功能取得的
各项变量数据， 利用这个功能，我们就可以直接点选到该网站上啰！非常的方便吧！
而且会将执行的结果输出到 testfile 档案中，不过如果网站提供的数据是以‘ POST ’
为主的话，那鸟哥就不知道如何搞定了。 GET 与 POST 是 WWW 通讯协议中，用来将数
据透过浏览器上传到服务器端的一种方式， 一般来说，目前讨论区或部落格等，大多
使用可以支持较多数据的 POST 方式上传啦！ 关于 GET 与 POST 的相关信息我们会在
第二十章 WWW 服务器当中再次的提及！
PI:EMAIL
5.4.2 文字接口下载器： wget
如果说 links 是在进行网页的‘浏览’，那么 wget 就是在进行‘网页数据的取
得’。举例来说，我们的 Linux 核心是放置在 www.kernel.org 内，主要同时提供 ftp
与 http 来下载。我们知道可以使用 lftp 来下载资料，但如果想要用浏览器来下载呢？
那就利用 wget 吧！
[root@www ~]# wget [option] [网址]
选项与参数：
若想要联机的网站有提供账号与密码的保护时，可以利用这两个参数来输入
喔！
--http-user=usrname
--http-password=password
--quiet ：不要显示 wget 在抓取数据时候的显示讯息
更多的参数请自行参考 man wget 吧！ ^_^
# 范例一：请下载 2.6.39 版的核心
[root@www ~]# wget \
> http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.39.tar.bz2
--2011-07-18 16:58:26--
http://www.kernel.org/pub/linux/kernel/v2.6/..
Resolving www.kernel.org... 130.239.17.5, 149.20.4.69,
149.20.20.133, ...
Connecting to www.kernel.org|130.239.17.5|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 76096559 (73M) [application/x-bzip2]
Saving to: `linux-2.6.39.tar.bz2'
88% [================================> ] 67,520,536 1.85M/s
eta 7s
你瞧瞧～很可爱吧！不必透过浏览器，只要知道网址后，立即可以进行档案的下载， 又
快速又方便，还可以透过 proxy 的帮助来下载呢！透过修改 /etc/wgetrc 来设定你的
代理服务器：
[root@www ~]# vim /etc/wgetrc
#http_proxy = http://proxy.yoyodyne.com:18023/  192.168.1.100.22: Flags [.], ack 196, win 65219,
17:01:47.362139 IP 192.168.1.100.22 > 192.168.1.101.1937: Flags [P.], seq 196:472, ack 1,
17:01:47.363201 IP 192.168.1.100.22 > 192.168.1.101.1937: Flags [P.], seq 472:636, ack 1,
17:01:47.363328 IP 192.168.1.101.1937 > 192.168.1.100.22: Flags [.], ack 636, win 64779,
 ：传送端是 192.168.1.100 这个 IP，而传送的 port
number 为 22，你必须要了解的是，那个大于 (>) 的符号指的是封包的传输方
向喔！
 192.168.1.101.1937：接收端的 IP 是 192.168.1.101， 且该主机开启
port 1937 来接收；
 [P.], seq 196:472：这个封包带有 PUSH 的数据传输标志， 且传输的数据
为整体数据的 196~472 byte；
 ack 1：ACK 的相关资料。
最简单的说法，就是该封包是由 192.168.1.100 传到 192.168.1.101，透过的
port 是由 22 到 1937 ， 使用的是 PUSH 的旗标，而不是 SYN 之类的主动联机标志。
呵呵！不容易看的懂吧！所以说，上头才讲请务必到 TCP 表头资料的部分去瞧一瞧的
啊！
PI:EMAIL
再来，一个网络状态很忙的主机上面，你想要取得某部主机对你联机的封包数据而
已时， 使用 tcpdump 配合管线命令与正规表示法也可以，不过，毕竟不好捉取！ 我
们可以透过 tcpdump 的表示法功能，就能够轻易的将所需要的数据独立的取出来。 在
上面的范例一当中，我们仅针对 eth0 做监听，所以整个 eth0 接口上面的数据都会被
显示到屏幕上， 不好分析啊！那么我们可以简化吗？例如只取出 port 21 的联机封包，
可以这样做：
[root@www ~]# tcpdump -i eth0 -nn port 21
tcpdump: verbose output suppressed, use -v or -vv for full protocol
decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
01:54:37.96 IP 192.168.1.101.1240 > 192.168.1.100.21: . ack 1 win 65535
01:54:37.96 IP 192.168.1.100.21 > 192.168.1.101.1240: P 1:21(20) ack
1 win 5840
01:54:38.12 IP 192.168.1.101.1240 > 192.168.1.100.21: . ack 21 win
65515
01:54:42.79 IP 192.168.1.101.1240 > 192.168.1.100.21: P 1:17(16) ack
21 win 65515
01:54:42.79 IP 192.168.1.100.21 > 192.168.1.101.1240: . ack 17 win 5840
01:54:42.79 IP 192.168.1.100.21 > 192.168.1.101.1240: P 21:55(34) ack
17 win 5840
瞧！这样就仅提出 port 21 的信息而已，且仔细看的话，你会发现封包的传递都是双
向的， client 端发出‘要求’而 server 端则予以‘响应’，所以，当然是有去有回
啊！ 而我们也就可以经过这个封包的流向来了解到封包运作的过程。举例来说：
1. 我们先在一个终端机窗口输入‘ tcpdump -i lo -nn ’ 的监听，
2. 再另开一个终端机窗口来对本机 (127.0.0.1) 登入‘ssh localhost’
那么输出的结果会是如何？
[root@www ~]# tcpdump -i lo -nn
1 tcpdump: verbose output suppressed, use -v or -vv for full protocol
decode
2 listening on lo, link-type EN10MB (Ethernet), capture size 96 bytes
3 11:02:54.253777 IP 127.0.0.1.32936 > 127.0.0.1.22: S
933696132:933696132(0)
win 32767 
4 11:02:54.253831 IP 127.0.0.1.22 > 127.0.0.1.32936: S
920046702:920046702(0)
ack 933696133 win 32767 
PI:EMAIL
5 11:02:54.253871 IP 127.0.0.1.32936 > 127.0.0.1.22: . ack 1 win 8192
6 11:02:54.272124 IP 127.0.0.1.22 > 127.0.0.1.32936: P 1:23(22) ack
1 win 8192
7 11:02:54.272375 IP 127.0.0.1.32936 > 127.0.0.1.22: . ack 23 win 8192
上表显示的头两行是 tcpdump 的基本说明，然后：
 第 3 行显示的是‘来自 client 端，带有 SYN 主动联机的封包’，
 第 4 行显示的是‘来自 server 端，除了响应 client 端之外(ACK)，还带
有 SYN 主动联机的标志；
 第 5 行则显示 client 端响应 server 确定联机建立 (ACK)