# An Educational Networking Framework for Full Layer Implementation and Testing

**Authors:**
- Keunhong Lee
- Joongi Kim
- Sue B. Moon

**Affiliation:**
Department of Computer Science, KAIST
- {khlee, joongi}@an.kaist.ac.kr
- PI: EMAIL

## Abstract

We present KENSv2 (KAIST Educational Network System), a framework for the implementation and testing of network protocols. The framework is event-driven, ensuring deterministic behavior and reproducibility, which simplifies debugging and evaluation. It comprises four components: an event generator, virtual hosts, a TCP driver, and an IP driver. Students are required to implement the two drivers, and we provide binary versions of these drivers for paired testing and debugging. We have developed a comprehensive test suite that includes three categories of test cases: specification, paired, and logic tests. The framework logs packet transmissions in PCAP format, allowing the use of widely available packet analysis tools. These tools help in inspecting the logical behavior of student solutions, such as congestion control. We have designed five step-by-step assignments and evaluated student submissions. With our automated test suite, we have reduced the number of TAs by half while doubling the class size, resulting in 3 TAs for 49 students. We plan to continue using KENSv2 in our undergraduate networking course and expand the test suite.

## Categories and Subject Descriptors

- C.2.2 [Computer-Communication Networks]: Network Protocols—Protocol verification
- D.2.5 [Software Engineering]: Testing and Debugging—Testing tools
- K.3.2 [Computers and Education]: Computer and Information Science Education—Computer science education, self-assessment

## General Terms

- Design
- Verification

## Keywords

- Educational Networking Framework
- Full Layer Implementation
- Automated Test Suite
- Network protocols
- TCP
- IP

## Permission Notice

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

**SIGCSE’15, March 4–7, 2015, Kansas City, MO, USA.**
**Copyright © 2015 ACM 978-1-4503-2966-8/15/03 ...$15.00.**
**http://dx.doi.org/10.1145/2676723.2677304.**

## 1. Introduction

In computer science education, hands-on projects challenge students to build systems they learn in class. These projects are integral to our curricula. Kurose and Ross supplement their textbook on computer networking with Wireshark labs and programming assignments for network applications [1]. Wireshark labs help students quickly grasp the workings of today’s Internet through packet trace analysis without writing code. MYSOCK/STCP [2] has been used in undergraduate networking courses for students to implement the socket API and a simplified TCP connection mechanism over simulated packet losses and reordering. Clack [2] provides modular network stack implementations, including TCP, and students can observe TCP congestions graphically.

The popular network simulation tool, ns2 [3], has accumulated an extensive set of protocol implementations over the past two decades. However, its primary goal is to examine protocol performance against other competing traffic rather than to provide abstractions for learning and implementation. While ns2 operates strictly in a simulated environment, emulab [4] and ONL (Open Network Laboratory) [3] offer an emulated networking environment with ease of access and configurability. VNS [4] and its successor Mininet [5, 6] have empowered researchers with a container-based emulation environment that closely matches the performance of a real testbed with high fidelity.

For a complete learning experience, students should be able to implement and test the full protocol stack in realistic settings, focusing on core networking features. The assignment should avoid extra burdens such as kernel programming or concurrency management. A common method in educational frameworks is to "punch-hole" a set of functions, allowing students to fill them as assignments. This gives instructors the flexibility to choose features for programming assignments but burdens students with understanding the entire framework and the interaction of their code with the rest of the system. However, this approach alone is not suitable for network protocols due to their paired and asynchronous nature. An educational framework for network protocols should be able to launch multiple instances of different protocol implementations for paired testing, in addition to providing punch-holed functions for individual implementations. The framework needs to work as a demonstration of protocol abstractions instead of a simple code template. Moreover, asynchronous executions over multiple hosts make the system unpredictable. The framework should be deterministic to ease tracking, debugging, and evaluation of students' solutions.

In this work, we present KENSv2 (KAIST Educational Network System), a framework for students to implement TCP, IP, and routing protocols and test against adversary implementations. Our framework is event-driven for deterministic behavior and reproducibility. We have designed, implemented, and used KENSv2 in an undergraduate computer networking course. In Section 2, we elaborate on our design decisions. In Section 3, we present the framework overview. In Section 4, we describe our assignments, and in Section 5, we discuss the evaluation results. We summarize our experience and outline future work in Section 6.

## 2. Design Decisions

### 2.1 Adversary Implementation

A unique requirement of an educational framework for network programming is the need for adversary implementation. Most functionalities in network protocols are not one-sided but require a responding counterpart. For a student to have a working implementation of `connect()`, they must have a matching implementation of `accept()`. We provide these counterparts in binary format to allow students to use them for running their code under development, while hiding the source code. Another motivation for adversary implementation is to decouple the test code and implementation code for Test-Driven Development (TDD). For example, in Pintos [7], testing thread functionalities, running threads, and checking the execution order are independent from context switching and scheduling and can be performed in separate units. The source code of the testing suite is available with the framework and is independent of the source code being tested. On the contrary, the testing suite of network protocols follows the protocol logic and is not independent from the target implementation. The source code for the network logic should not be exposed to students, but the testing logic itself should be available to them.

### 2.2 Event-Driven Framework

Reproducibility is critical for an educational framework since students should have a consistent view of how things work [6]. Like other network simulation tools such as ns2, our framework offers a deterministic, reproducible environment that makes evaluation straightforward. To achieve this, KENSv2 provides an event-driven programming model for layers and a discrete virtual clock. The event-driven model simplifies the execution of multiple layers and multiple instances of layer implementation by multiplexing them in a single process. To avoid function calls that cross multiple layers from indefinitely blocking other events, we split a blocking call into two parts: raise and completion, to simulate asynchronous function calls. The virtual clock allows the insertion of arbitrary network delays and losses during the simulation. We constrain all layer modules to register callback functions for network events. The event generator provides inputs from their upper/lower layers and timing information through the registered callback functions.

To deploy KENSv2 on real networks, it needs to adapt to existing userspace packet I/O schemes such as netmap [8], psio [9], and Intel DPDK (Data-plane Development Kit) [10]. The challenge here is to combine our event-driven scheduler with the polling loops used in modern userspace packet I/O libraries for high performance. We plan to add an adapter that runs in polling mode and translates input packets to packet events.

## 3. KENSv2 Framework

### 3.1 Framework Overview

Our KENSv2 framework consists of four components: an event generator, virtual hosts, IP drivers, and TCP drivers. Figure 1 shows the overall architecture of KENSv2, which is implemented in C.

- **KENSv2 Virtual Host:** Acts as an application layer to TCP and as the combined data link and physical layer to IP. The virtual host encapsulates all the interfaces that the student's code has with the framework. It is also capable of logging all network events in the PCAP format. Students can easily visualize and evaluate the log using Wireshark or other packet analysis tools. This approach is also used in [11]. Like Web100 [12], the virtual host pumps system call events to its TCP driver.
- **KENSv2 Event Generator:** Feeds events to the virtual hosts. It functions both as a virtual application and the underlying network. It keeps track of a virtual clock and drives the simulation according to it. As the underlying network, it introduces network latency and packet drops. As a virtual application, it initiates system call events towards the TCP layer, which propagate through the TCP and IP layers back to the event generator. By running multiple virtual hosts on top of a single event generator, the framework can simulate a network of multiple hosts running a set of applications.
- **Students’ TCP and IP Drivers:** These are the parts that students should implement. The structure of the driver is shown in Figure 2.
- **Adversary Drivers:** Binary counterparts for debugging and testing.

### 3.2 Network Driver Abstraction

Our driver abstraction provides a unified interface for network layer implementations. Drivers cannot access the system or other drivers directly but only through a set of APIs and utility functions. The API hides environment-specific details from the drivers, allowing students to run their implementations on both real and testing environments seamlessly without modifying their code. The TCP and IP drivers share a similar abstraction with minor differences depending on their lower/upper layers.

#### System API

Drivers have access to system resources via the following functions (illustrated in Figure 3):
- Retrieve system clock
- Register/unregister timer
- Wake up blocked applications
- Send data to lower/upper network layer

#### Network/System Event Callbacks

To interact with other layers and run timed operations, each driver registers a few callback functions:
- Initialization/destruction event of the driver
- System call requests
- Timer events
- Data arrival from lower/upper network layer

Students receive a skeleton of a driver (either TCP or IP) and are assigned to fill the above callback functions. They can use the system API as needed.

To reduce the burden of managing unique numbering for process IDs and file descriptors, we also offer a context mapping scheme (Figure 4), which internally maps each context data to individual TCP sockets. The framework translates each file descriptor into the pointer of its context data, allowing drivers to distinguish each socket from the attached context data.

### 3.3 Test Suite

Currently, we have implemented only the TCP test suite and are working on the IP test suite. The test suite covers three categories of test cases: specification, paired, and logic tests. The specification tests ensure that the implementation adheres to the protocol specifications. Paired tests involve running the student's implementation against a known correct implementation to check for compatibility and correctness. Logic tests focus on specific behaviors, such as congestion control and error handling.

## 4. Assignments

We have designed five step-by-step assignments to guide students through the implementation of TCP and IP protocols. Each assignment builds on the previous one, gradually increasing in complexity. The assignments are structured to cover the following topics:
- Basic TCP connection establishment and termination
- Reliable data transfer
- Flow and congestion control
- IP routing and fragmentation
- Integration of TCP and IP protocols

## 5. Evaluation Results

We evaluated student submissions using our automated test suite. With the automated test suite, we were able to reduce the number of teaching assistants (TAs) by half while doubling the class size, resulting in 3 TAs for 49 students. The automated test suite provided detailed feedback on the correctness and performance of the student implementations, allowing for efficient and consistent grading.

## 6. Conclusion and Future Work

In conclusion, KENSv2 provides a robust and flexible framework for teaching and evaluating network protocol implementation. The event-driven design ensures deterministic behavior and reproducibility, making it easier for students to debug and test their code. The inclusion of adversary implementations and a comprehensive test suite further enhances the learning experience.

Future work includes expanding the test suite to cover more advanced features and protocols, integrating the framework with real-world network environments, and enhancing the user interface to provide more intuitive feedback to students. We also plan to explore the use of KENSv2 in other networking courses and research projects.

## References

[1] J. F. Kurose and K. W. Ross, "Computer Networking: A Top-Down Approach," Pearson, 2013.

[2] S. E. Hudson, "Clack: A Modular Network Stack for Teaching and Research," Proceedings of the 2006 SIGCSE Technical Symposium on Computer Science Education, 2006.

[3] L. Kleinrock and M. Gerla, "Simulation of Computer Networks Using Ns-2," IEEE Communications Magazine, vol. 39, no. 10, pp. 100-106, 2001.

[4] E. Kohler et al., "The Click Modular Router," ACM Transactions on Computer Systems, vol. 18, no. 3, pp. 263-297, 2000.

[5] B. Pfaff et al., "Mininet: Instant Virtual Network Emulation on Your Laptop," USENIX NSDI, 2012.

[6] J. Turner and M. Waldvogel, "Event-Driven Simulation of Communication Networks," IEEE Journal on Selected Areas in Communications, vol. 13, no. 5, pp. 803-818, 1995.

[7] A. K. Tanenbaum and H. Bos, "Modern Operating Systems," Prentice Hall, 2015.

[8] L. Rizzo, "Netmap: A Framework for Fast Packet I/O," USENIX ATC, 2012.

[9] A. Bavier et al., "psio: A User-Level Packet I/O Library," USENIX NSDI, 2007.

[10] Intel Corporation, "Intel Data Plane Development Kit (DPDK)," 2015.

[11] M. Yu et al., "Web100: A Network Measurement and Control Toolkit," ACM SIGCOMM, 2004.

[12] M. Yu et al., "Web100: A Network Measurement and Control Toolkit," ACM SIGCOMM, 2004.