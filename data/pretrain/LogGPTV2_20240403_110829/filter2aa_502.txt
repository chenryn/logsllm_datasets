# DROID-FF: The Android Fuzzing Framework

## About the Author
- **Twitter**: @ANTOJOSEP007
- **GitHub**: @ANTOJOSEPH
- **Professional Background**:
  - Security Engineer at Intel
  - Android Security Enthusiast
  - Speaker/Trainer at various security conferences including Hitb Amsterdam, BruCON, Hack in Paris, Black Hat, Nullcon, Ground Zero, and c0c0n
  - In his free time, he enjoys traveling, DJing, and biking.

## Why DROID-FF?
DROID-FF aims to address the challenges of fuzzing on mobile devices, specifically for Android. These challenges include:
- Data generation
- Handling low-powered devices
- Crash logging
- Crash triage
- Determining exploitability

## Approach
- **Scripts written in Python**
- **Integration with Peach, Pyzuff, and Radamsa**
- **Custom crash logging and triaging**
- **Exploitability checks via GDB plugin**
- **Fully automated process**

## Data Generation
- **Two approaches**:
  1. **Dump fuzzing using Radamsa or Pyzuff**
  2. **Generation-based fuzzing using Peach**
- **Handling checksums and magic numbers**:
  - Custom fixers (e.g., dex repair for fixing checksums in mutated dex files, credits: github.com/anestisb)
  - Grammar specified in pit files for Peach

## Fuzzing Campaign
- **Execution**:
  - Runs generated files against the target binary (e.g., `/system/xbin/dexdump crash1.dex`)
  - Uses `adb_android` Python module to push files to the device
  - Executes the file using `adb shell`
  - Adds a custom log to the Android logcat to track files responsible for crashes (e.g., `log -p F -t CRASH_LOGGER SIGSEGV: filename.dex`)

## Building Android Modules
- **Steps**:
  1. Navigate to the module directory (e.g., `/frameworks/av/cmd/stagefright/`)
  2. Use the make helper
     - `source build/envsetup.sh`
     - Edit `Android.mk` and set `LOCAL_MODULE=$BUILD_EXECUTABLE`
     - Run `mma` to build the module (e.g., `/out/target/product/generic/system/xbin/dexdump`)

## Processing Logs
- **Steps**:
  1. Pull `adb logcat` data from the device and save it to a file
  2. Parse the log file for crashes (e.g., "SIGSEGV", "SIGFPE", "SIGILL")
  3. Identify the file responsible for the crash using the custom crash logger
  4. Queue the file for further verification

## Crash Verification
- **Steps**:
  1. Run the files responsible for the crash against the target binary
  2. If a crash occurs, the Android system writes tombstone files (crash dumps) to `/data/tombstones`
  3. Backup the tombstone file and the crashing file
  4. Filter the PC register value in the tombstone file to identify unique crashes

## Processing Tombstones
- **Steps**:
  1. Map unique crashes to relevant source code using `ndk-stack` and `addr2line` utilities
  2. **Using ndk-stack**:
     - Provide the path to the file with symbols and the tombstone file
  3. **Using addr2line**:
     - Provide the address of the crash, the symbols file, and the crash address
     - Output gives the function and filename responsible for the crash

## Exploitability Check
- **Steps**:
  1. Use the `exploitable` GDB plugin which supports ARM
  2. Load the plugin via `gdb` API
  3. Push `gdbserver` to the device and set up the symbol search path
  4. Connect `gdb` to `gdbserver` and continue execution until a fault
  5. Run `exploitable` to determine if the crash is exploitable

## Achievements
- **High number of crashes detected**
- **Easier and more accessible fuzzing for the masses**
- **Mostly automated and easily customizable**
- **Written in Python**
- **Source code available on GitHub**: [github.com/antojoseph/droid-ff](https://github.com/antojoseph/droid-ff)

## Future Improvements
- **Integration with ASAN**
- **Automated GDB exploitability testing and reporting**
- **Instrumented fuzzing**
- **Automate posting of exploitable crashes to the Android security group**

## Other Fuzzing Tools
- **AFL for Android**:
  - Open-sourced by Intel
  - Responsible for many Stagefright crashes
  - Instrumented fuzzing for better code coverage
- **Honggfuzz**:
  - Ported to Android by anestisb
  - Easy to set up and useful for quickly fuzzing binaries
  - Built-in native crash logging mechanism

## Acknowledgments
- **@Ananth Srivastava**: For packaging and suggestions
- **@Sumanth Naropanth**: For being a supportive manager
- **@jduck**: For inspiration and help from droidsec IRC
- **@anestisb**: For tools and articles on Android fuzzing
- **@Alexandru Blanda**: For work in MFF and friendship
- **@Stephen Kyle**: For articles on fuzzing in ARM
- **@flanker_hqd**: For BH presentation on fuzzing parcels

## How to Use DROID-FF
### Step 1: Initialize
- **Run** `python droid-ff.py`
- **Select the data generator** (options: bitflipper, radamsa, peach)
- **Ensure all Python requirements are installed** (e.g., pyZUFF, adb_android)

### Step 2: Run the Fuzzing Campaign
- **Start the Android emulator**
- **Check `adb devices` to ensure the emulator is running**
- **Run `droid-ff.py` and select option 2**

### Step 3: Find Crashes
- **Ensure the emulator is running and you can connect via ADB**
- **Select step 3 in `droid-ff.py`**
- **Pull ADB logs and search for crashes, identifying the responsible files**
- **Manually verify logcat output if needed**

### Step 4: Verify Crashes
- **Re-run files identified as causing crashes**
- **If a crash happens, a tombstone file is created**
- **Pull the tombstone file and identify the PC address of the crash**
- **Use a dictionary to track unique crashes and move them to a separate folder**

### Step 5: Resolve Crashes to Source Code
- **Use `ndk-stack` and `addr2line` to map the crash to a line and method in the source code**
- **Provide the binary with symbols and the tombstone file**

### Step 6: Check Exploitability
- **Use the `exploitable` GDB plugin**
- **Set up the symbol search path in GDB**
- **Connect GDB to `gdbserver` running on the device**
- **Continue execution until a fault and run `exploitable` to determine exploitability**

## Next Steps
- **Perform a second round of manual analysis to confirm exploitability**
- **Reproduce the bug on different devices and architectures**
- **Report the security bug to the Android security team**
- **Potentially receive a security bounty**

## Questions
- **Feel free to ask any questions!**