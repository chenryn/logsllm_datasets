title:ZeroTrace : Oblivious Memory Primitives from Intel SGX
author:Sajin Sasy and
Sergey Gorbunov and
Christopher W. Fletcher
ZeroTrace: Oblivious Memory Primitives
from Intel SGX
Sajin Sasy
University of Waterloo
PI:EMAIL
Sergey Gorbunov
University of Waterloo
PI:EMAIL
Christopher W. Fletcher
NVIDIA/UIUC
cwﬂPI:EMAIL
Abstract—We are witnessing a conﬂuence between applied
cryptography and secure hardware systems in enabling secure
cloud computing. On one hand, work in applied cryptography
has enabled efﬁcient, oblivious data-structures and memory prim-
itives. On the other, secure hardware and the emergence of Intel
SGX has enabled a low-overhead and mass market mechanism
for isolated execution. By themselves these technologies have
their disadvantages. Oblivious memory primitives carry high
performance overheads, especially when run non-interactively.
Intel SGX, while more efﬁcient, suffers from numerous software-
based side-channel attacks, high context switching costs, and
bounded memory size.
In this work we build a new library of oblivious memory
primitives, which we call ZeroTrace. ZeroTrace is designed to
carefully combine state-of-the-art oblivious RAM techniques
and SGX, while mitigating individual disadvantages of these
technologies. To the best of our knowledge, ZeroTrace represents
the ﬁrst oblivious memory primitives running on a real secure
hardware platform. ZeroTrace simultaneously enables a dramatic
speed-up over pure cryptography and protection from software-
based side-channel attacks. The core of our design is an efﬁcient
and ﬂexible block-level memory controller that provides oblivious
execution against any active software adversary, and across
asynchronous SGX enclave terminations. Performance-wise, the
memory controller can service requests for 4 B blocks in 1.2 ms
and 1 KB blocks in 3.4 ms (given a 10 GB dataset). On top of
our memory controller, we evaluate Set/Dictionary/List interfaces
which can all perform basic operations (e.g., get/put/insert).
I.
INTRODUCTION
Cloud computing is a paradigm, ever growing in popularity,
that offers on-demand compute and storage resources for users.
Applications such as machine learning, AI, analytics, web, and
mobile services are now frequently hosted in public clouds.
Protecting users’ data in these environments is challenging due
to their underlying complexity and shared infrastructure model.
As a result, multiple attack vectors from infrastructure and
service providers, other users, and targeted adversaries remain
open.
Up until recently, secure cloud computing could only be
achieved through cryptography (e.g., fully homomorphic encryp-
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23239
www.ndss-symposium.org
tion – FHE [12]), or through course-grained hardware isolation
techniques (e.g., Intel TPM+TXT [18], [26], [14]). Both of the
above have severe performance and usability limitations. FHE,
for example, introduces many orders of magnitude overheads.
On the other hand, these techniques provide very strong security
guarantees (stronger than TPM+TXT) needed for applications
that operate over highly sensitive data (e.g., federal, military,
government data, etc.). They can be used to protect even
against malicious operating systems snooping on the data access-
pattern.
Recently, Intel released an instruction set extension called
Software Guard Extensions (SGX) which addresses the above
performance challenges [9], [27], [28]. In SGX, user-level
sensitive portions of ring-3 applications can be run in one or
more application containers called enclaves. While running,
SGX uses a set of hardware mechanisms to preserve the privacy
and integrity of enclave memory. However, using SGX to
achieve whole-program privacy against software adversaries
still faces multiple challenges. First, the user must map its
application to enclave(s) in a way that gives a favorable trade-
off in trusted computing base (TCB) size, performance and
code isolation. The default approach, natively supported by
Intel SGX, is to manually partition the application into trusted
and untrusted code [40], [59]. This is non-trivial and must be
done sparingly: code within enclaves is trusted and enclaves
have limited functionality (e.g., no support for IO/syscalls and a
bounded memory size). Alternatively, a number of works study
how to load unmodiﬁed applications into enclaves [2], [4], [17],
[46]. While more automated, these approaches induce a larger
TCB. Second, the user must carefully write enclave code to
avoid numerous software side-channels [6], [21], [35], [48],
[53]. Taken together, leveraging SGX to achieve small TCB
and side-channel free trusted execution environments remains
an open problem.
A. This Work
We address this challenge by designing and implementing
ZeroTrace – an oblivious library enabling applications to be
built out of ﬁne-grained building-blocks at the application’s
data-structure interface boundary. Any operation on the data
stored by the library is protected using SGX enclaves and
remains secure against all software attacks, including all known
side-channels.
Partitioning applications at the oblivious data-structure
boundary hits a sweet spot for several reasons. First, the
data-structure interface is narrow, which makes it easier to
sanitize application to data-structure requests—improving intra-
application security. Second, the data-structure interface is re-
usable across many applications. A service provider can pre-
package data-structure backends as pre-certiﬁed blocks with
a common interface, enabling application developers to build
complex applications from known-good pieces. Lastly, each
data-structure can seamlessly support multiple clients and can
be oblivious to where each client is physically running. For
the latter point, clients can attach to data-structure enclaves
remotely, providing performance improvements to related
systems (e.g., oblivious ﬁle servers; Section II-A2).
As part of this research, we implement and evaluate the
ﬁrst oblivious memory controller running on a real secure
hardware platform. Our memory controller, which implements
an Oblivious RAM (ORAM) protocol [13], can be called as
a subroutine in a larger application and defends against any
active software adversary. A key insight that drives our design
is that with SGX, ORAM state (both untrusted storage and
trusted ORAM client logic) can safely live anywhere in the
system (e.g., cache, DRAM, disk, etc), even outside the SGX
enclave, despite the adversary running concurrent to the victim
and controlling the software stack. For data inside enclaves,
the SGX mechanism prevents direct inspection of data. Thus
security against software attacks reduces to accessing in-enclave
data in a data oblivious fashion [13], [29], [30], [32]. For data
living outside enclaves, enclave code can add a second layer
of protection (via encryption, integrity checks, etc) to securely
extend the ORAM algorithm working set as needed.
B. Contributions
This paper makes the following contributions:
1) We design and build an oblivious memory controller
from Intel SGX. To the best of our knowledge, the core memory
controller (the bulk of our system) is the ﬁrst oblivious memory
controller implemented on a real secure hardware platform. We
provide two implementations, one using Path ORAM [43] and
one using Circuit ORAM [49] and compare both across multiple
backend memory organizations (DRAM and HDD). All designs
protect against an active software adversary and provide secure
fault-tolerance across asynchronous SGX enclave terminations
(a common challenge for SGX applications). These extensions
may be of independent interest.
2) We design and implement ZeroTrace, an application
library for serving data-structures obliviously in an SGX
environment. In this paper, ZeroTrace’s core primitive is the
above oblivious memory controller.
3) We evaluate system performance for ZeroTrace as a
stand alone oblivious memory controller and for plug-and-play
data structures on an SGX-enabled Dell Optiﬂex 7040. Our
system can make oblivious read and write calls to 1 KB memory
locations on a 10 GB dataset in 3.4 ms. In the plug-and-play
setting, ZeroTrace can make oblivious read and write calls at
8 B granularity on an 80 MB array in 1.2 ms.
Our design is open source and available at https://github.
com/ssasy/ZeroTrace.
C. Paper Organization
In Section II, we describe our usage and security models.
Section III gives a required background on Intel SGX and
ORAM. In section IV we give details on our architec-
ture; including the instantiation process, client and server
2
components, optimizations and security analysis. Section V
gives a scheme to achieve persistent
integrity and fault
tolerance. Section VI describes our prototype implementation
and evaluation. Section VII gives related work, and ﬁnally
Section VIII concludes.
II. OUR MODEL
A. Usage Model
We consider a setting where a computationally weak client
wishes to outsource storage or computation to an untrusted
remote server that supports Intel’s Software Guard Extensions
(SGX). As secure hardware extensions such as SGX reach
the market, we anticipate this setting will become a common
way to implement many real world applications such as
image/movie/document storage and computation outsourcing.
The cloud can be any standard public cloud such as Amazon
AWS, Microsoft Azure or Google cloud, and the client can be
any mobile or local device.
As introduced in Section I, our proposal consists of stand-
alone enclaves that implement secure memory services. We
envision future applications being constructed from these (and
similar) plug-and-play services. We now describe this general
scenario in more detail. Afterwards, we show how a special
case of this scenario improves performance in a related branch
of research.
1) Plug-and-play memory protection for outsourced com-
putation: We envision an emerging scenario where client
applications (e.g., a database server), which run in an SGX
enclave(s), connect to other enclaves to implement secure
memory and data-structure services. In an example deployment,
calling a memory service enclave is hidden behind a function
call, which is dynamically linked (connected to another enclave
via a secure channel) at runtime. What “backend” memory
service our system supports can be changed depending on the
application’s needs. For example, our core memory controller
currently supports an ORAM backend. Without changing the
application-side interface, this backend can be transparently
changed to support a different ORAM, different security level
for memory protection (e.g., plain encryption) or different
security primitive entirely (e.g., a proof of retrievability [5]).
A similar argument goes for memory services exposing a data-
structure interface. For example, Wang et al. [50] proposed
a linked-list optimized for use as an iterator, while another
implementation can be optimized for insertion.
A reasonable question is: why break these services into
separate enclaves, as opposed to statically linking them into
the main application? Our design has several advantages. First,
breaking an application into modules eases veriﬁcation. SGX
provides enclave memory isolation. Thus, verifying correct
operation reduces to sanitizing the module interface (a similar
philosophy is used by Google’s NaCl [56]). Data structures and
memory controllers naturally have narrow interfaces (compared
to more general
interfaces, such as POSIX [40]), easing
this veriﬁcation. Second, breaking applications into modules
eases patching. Upgraded memory services can be re-certiﬁed
and re-attached piecemeal, without requiring the vendor to
re-compile and the client to re-attest the entire application.
Third, inter-communication between enclaves gives ﬂexibility
in deployment, as shown in the next paragraph.
2) (Special case) Remote block data storage: Suppose a
client device wishes to store blocks of data (e.g., ﬁles) on the
remote server (e.g., Amazon S3). To achieve obliviousness,
the standard approach is for the client to use an Oblivious
RAM protocol where the client runs the ORAM controller
locally [41], [52]. The ORAM controller interacts over the
network with the server, which acts as a disk. While beneﬁting
from not trusting the server, these solutions immediately incur
an at-least logarithmic bandwidth blowup over the network
(e.g., WAN) due to the protocol between ORAM controller
and server. As a special case of the ﬁrst setting (above), the
core memory controller can serve as the ORAM controller,
from the oblivious remote ﬁle server setting, now hosted on
the server side. As our architecture can protect side-channel
leakages introduced from the SGX architecture,
the only
change to security is we now trust the SGX mechanism. The
advantage is bandwidth savings: this deployment improves
client communication over the network by over an order of
magnitude in typical parametrizations. Our scheme still incurs
logarithmic bandwidth blowup between the enclave code and
server disks, but this is dwarfed by the cost to send data over
the network.
B. Threat Model
In our setting, memory controller logic (e.g., the ORAM
controller) and higher-level interfaces are implemented in
software run on the server. The server hosts SGX and a
regular software stack outside of SGX. The client and SGX
mechanism are trusted; memory controller logic is assumed
to be implemented correctly. We do not trust any component
on the server beyond SGX (e.g., the software stack, disks,
the connection between client and server, other hardware
components besides the processor hosting SGX). Per the usual
SGX threat model, we assume the OS is compromised and
may run concurrently on the same hardware as the software
memory controller. By trusting the SGX mechanism, we trust
the processor manufacturer (e.g., Intel).
Security goals. Our highest supported level of security –
thus, our focus for much of the paper – is for the SGX enclave,
running the memory controller, to operate obliviously in the
presence of any active (malicious), software-based adversary.
In this case, the memory controller implements an ORAM
protocol. We default to this level of security because a known
limitation of SGX is its software-based side-channel leakages
(Section I), which are dealt with via data oblivious execution.
(Related work calls these digital side-channels [32].) Data
obliviousness means the adversary only learns the number of
requests made between client and memory controller; i.e., not
any information contained in those requests. We are interested