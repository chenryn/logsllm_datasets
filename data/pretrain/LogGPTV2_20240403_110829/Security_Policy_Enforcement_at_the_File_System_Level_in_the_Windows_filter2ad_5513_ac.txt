memory) would go a different route from ordinary opera-
tions. In case of smart read-ahead by the ﬁle system or of
explicit mapping, there would also arise a possible incon-
sistency. Paging requests therefore must also be handled.
4.3. File size considerations
The actual ﬁle sizes on the ﬁle system that is intercepted
by the ﬁlter driver and the ﬁle sizes reported to the upper
levels of the system and eventually to the user-mode API
may differ from one another.
There are two reasons for this. One is that it is nec-
essary to maintain an in-line object label identifying the
data object (ﬁle) for administrative purposes. This could
be handled more elegantly for ﬁle systems supporting mul-
tiple data streams such as NTFS, but since removable media
(e.g. FAT ﬂoppy disks) and network ﬁle systems (e.g. NFS
ﬁle servers) do not necessarily offer this feature, the more
cumbersome in-line mechanism must be used. The second
reason is that in case an encryption mechanism is employed
for a data object, the algorithms used may dictate padding
to a certain multiple of bytes; the end of the padding must
also be stored in-line.
Neither the object label nor the padding data size change
may be exposed to the upper levels of the driver and execu-
tive architecture.
As a result, the ﬁle system ﬁlter driver must adjust the
ﬁle size reported by the underlying ﬁle systems in IRPs
such as IRP MJ QUERY INFORMATION possibly used for
obtaining size as well as IRP MJ SET INFORMATION,
which could be used to adjust ﬁle length informa-
tion, and the similar IRP MJ DIRECTORY CONTROL and
IRP MJ QUERY DIRECTORY requests.
The padding and object label information is stored at the
end of the ﬁle stored on the lower-level ﬁle system. This
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:43 UTC from IEEE Xplore.  Restrictions apply. 
avoids complications with memory-mapped ﬁles and con-
tinuous offset adjustments that would be necessary if the
information were to be stored as a header since otherwise
page-sized requests from upper levels of the system would
in fact straddle page boundaries and thus incur a signiﬁcant
performance penalty. To the ﬁle systems below the ﬁlter
driver, however, the data looks like the contents of an ordi-
nary ﬁle.
Another issue the ﬁlter driver must deal with is the
locking of ﬁles by applications since it may have to mod-
ify the ﬁle as a result of actions by upper layers that
would not require ﬁle modiﬁcation without the presence
of the security mechanisms. To be able to access such
ﬁles, a so-called locking key must be known. There-
fore, IRP MJ LOCK CONTROL requests also must be in-
tercepted.
4.4. Information gathering and processing
The processing of IRP MJ CREATE requests is of crit-
ical importance. This IRP is issued when a ﬁle is accessed
for the ﬁrst time (not just for ﬁle creation) by an upper level
function, so it is possible to perform a number of bookkeep-
ing tasks at the same time as the opening. For this pur-
pose, the ﬁlter driver must itself issue IRPs to the subordi-
nate ﬁle systems, as well as communicate with other layers
and modules within the security system. Subordinate re-
quests are usually necessary to read in the object label (if
present) at the end of the ﬁle. Based on the object label, the
object is classiﬁed within the internal bookkeeping mech-
anisms together with other relevant information regarding
the ﬁle (e.g. ﬁles or memory maps shared with other pro-
cesses) and further processing can be determined based on
the security policy at the associated driver providing pol-
icy information (e.g. whether transparent en-/decryption on
subsequent read/write requests is required). The informa-
tion on the ﬁle stored in this step is referenced in any further
processing of the ﬁle since gathering the necessary informa-
tion would – even disregarding performance issues – not be
possible due to restrictions on subordinate IRPs especially
during paging operations.
Another
request
that must
is
IRP MJ CLEANUP. This
typically precedes
the closing of a ﬁle. In case the object label itself must be
changed or if the size of a ﬁle has changed, the new object
label gets written during the processing of this IRP.
dealt with
be
request
The IRP MJ CLOSE request must also be processed
since the internal bookkeeping data structures associated
with the ﬁle must be released.
This information gathering mechanism can be triggered
implicitly by opening ﬁles and then querying the ﬁlter driver
from the central policy enforcement mechanism; in addi-
tion, explicit functions such as the calculation of signatures
over applications can also be triggered at the kernel level
without interactions with any user level components.
4.5. Selective use of enforcement mechanisms
Even though the enforcement mechanisms are loaded
very early during the boot process, there are some ﬁles
in Microsoft Windows NT which must be processed prior
to the driver becoming active (e.g. ntldr.exe, ntde-
tect.com, and pagefile.sys). This means that such
ﬁles must not have an object label and also must not be en-
crypted. However, other processing, such as signature veri-
ﬁcation which does not involve intrusive changes to the ﬁles
is still possible.
Another ﬁle class that may not have an object label and
generally should not be encrypted is paging ﬁles. The lat-
ter is mainly due to performance reasons; depending on the
threat model it might be acceptable to wipe the paging ﬁles
on each — orderly — system shutdown.
In addition, the security policy might dictate that certain
ﬁles, directories, or even entire volumes (volumes are a sub-
case of directories) are not subjected to labeling and encryp-
tion.
For this exclusion mechanism to work, the full names of
the ﬁles must be kept at hand; since the Microsoft Windows
NT stores the device identity separately from the path and in
a different format inside the ﬁle object, the ﬁlter driver must
maintain a translation table to minimize overhead during
lookup comparisons.
An additional complication arises in conjunction with re-
movable media; simply querying the root directory with-
out a medium being present would result in an error con-
dition. Instead, we resorted to an undocumented function
for querying the properties of symbolic links; this works
since the “drive letters” in Microsoft Windows NT are im-
plemented as symbolic links.
5. Related Work
Early work on segregating policy decisions from en-
forcement was performed at UCLA [17] and also in the
LOCK project [11]. The DTOS project also dealt with this
concept [7] based on a Mach microkernel architecture.
Using an encrypted ﬁle system is a transparent mecha-
nism for enforcing a security policy regardless of who has
access to the physical ﬁle system that does not place an un-
due burden on users. This has been recognized and both re-
search [1, 6, 20] and commercial (e.g. Microsoft EFS, Soft-
Winter SeNTry) implementations have resulted. However,
the goal pursued by all of these implementations was mainly
to provide individual users (or at best small groups of users)
a more convenient mechanism for encrypting their personal
data and protecting it from other users.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:43 UTC from IEEE Xplore.  Restrictions apply. 
Another alternative, mainly pursued by commercial ven-
dors, is to encrypt entire media regardless of ﬁle systems.
While this provides protection against theft of storage me-
dia, the main drawbacks are limited compatibility and a
lack of support for storage accessed via interfaces not in-
tercepted by such mechanisms (e.g. network ﬁle systems).
An example of a pass-through ﬁlter driver for monitor-
ing ﬁle system activity on Microsoft Windows NT 4.0 was
described in [9]; some third-party information on the work-
ings of ﬁle system drivers and ﬁle system ﬁlter drivers is
found in [8].
6. Conclusions and Future Work
We have presented a mechanism for enforcing security
policy at the ﬁle system level retroﬁtted onto the Microsoft
Windows NT family of operating systems. It enables the
enforcement of a security policy without requiring modi-
ﬁcations to applications and only limited changes in user
behavior. The mechanism was developed without requiring
access to the sources or modiﬁcations of the host operating
system.
While this mechanism can be used for ﬁle system en-
cryption and access control by itself, it becomes fully oper-
ational only when tightly integrated with other security pol-
icy enforcement components and a mechanism for ensuring
consistent enforcement throughout a distributed system.
To enable the use of the system in a heterogeneous en-
vironment we are also developing the enforcement mecha-
nisms for other operating system platforms, with Unix Sys-
tem V Release 4 derived platforms (Sun Solaris, SGI IRIX)
as the lead system.
Our future work will be directed primarily at tight in-
tegration of the individual policy enforcement modules as
well as on providing scalability to ensure that the system
can be deployed in very large ((cid:1) 100,000 nodes) networks.
An additional topic of research currently under way is
the realization of a policy mechanims of sufﬁcient expres-
siveness to model even complex security models and spe-
ciﬁc requirements.
References
[1] M. Blaze. A Cryptographic File System for Unix. Technical
report, AT&T Bell Labs, Nov. 1993.
[2] T. Fraser, L. Badger, and M. Feldman. Hardening COTS
Software with Generic Software Wrappers. In Proceedings
of the 1999 Conference on Security and Privacy (S & P ’99),
pages 2–16, Los Alamitos, CA, May 9–12 1999. IEEE Press.
[3] R. Goldenberg and S. Saravanan. Open VMS AXP Internals
and Data Structures: Version 1.5. Digital Press, Maynard,
MA, USA, 1994.
[4] B. Goodheart and J. Cox. The Magic Garden Explained:
The Internals of Unix System V Release 4. Prentice Hall,
Englewood Cliffs, NJ, USA, 1994.
[5] P. A. Loscocco, S. D. Smalley, P. A. Muckelbauer, R. C. Tay-
lor, S. J. Turner, and J. F. Farrell. The Inevitability of Failure:
The Flawed Assumption of Security in Modern Computing
Environments. In Proceedings of the 21st National Informa-
tion Systems Security Conference, Crystal City, VA, pages
303–314, Oct. 1998.
[6] E. Mauriello. TCFS: Transparent Cryptographic File Sys-
tem. Linux Journal, 40, Aug. 1997.
[7] S. E. Minear. Providing policy control over object oper-
ations in a Mach based system.
In USENIX, editor, 5th
USENIX UNIX Security Symposium, June 5–7, 1995. Salt
Lake City, UT, pages 141–155, Berkeley, CA, USA, June
1995. USENIX.
[8] R. Nagar. Windows NT File System Internals: A Developer’s
Guide. O’Reilly & Associates, Sebastopol, CA, USA, 1997.
[9] M. Russinovich and B. Cogswell. Examining the Win-
dows NT Filesystem. Dr. Dobb’s Journal of Software Tools,
22(2):42–50, Feb. 1997.
[10] O. S. Saydjari, J. M. Beckman, and J. R. Leaman. Locking
In Proc. 10th NIST-NCSC National
Computers Securely.
Computer Security Conference, pages 129–141, 1987.
[11] O. S. Saydjari, J. M. Beckman, and J. R. Leaman. LOCK
trek: Navigating uncharted space. In Proc. IEEE Symposium
on Security and Privacy, pages 167–175, 1989.
[12] O. S. Saydjari, S. J. Turner, D. E. Peele, J. F. Farrell, P. A.
Loscocco, W. Kutz, and G. L. Bock. Synergy: A dis-
tributed, microkernel-based security architecture. Technical
Report version 1.0, National Security Agency, Ft. George G.
Meade, MD, Nov. 1993.
[13] E. J. Sebes. Overview of the architecture of Distributed
Trusted Mach.
In USENIX, editor, Proceedings of the
USENIX Mach Symposium: November 20–22, 1991, Mon-
terey, California, USA, pages 251–262, Berkeley, CA, USA,
1991. USENIX Association.
[14] D. Solomon. Inside Windows NT. Microsoft Press, Bellevue,
WA, USA, 2nd edition, 1998.
[15] D. Solomon and M. Russinovich. Inside Windows 2000. Mi-
crosoft Press, Bellevue, WA, USA, 3rd edition, 2000.
[16] R. Spencer, S. Smalley, P. Loscocco, M. Hibler, D. Ander-
sen, and J. Lepreau. The Flask security architecture: System
support for diverse security policies. In 8th USENIX Secu-
rity Symposium, pages 123–139, Washington, D.C., USA,
Aug. 1999. USENIX.
[17] B. J. Walker, R. A. Kemmerer, and G. J. Popek. Speciﬁca-
tion and Veriﬁcation of the UCLA Unix Security Kernel. In
Proceedings of the 7th ACM Symposium on Operating Sys-
tems Principles (SOSP), pages 64–65, 1979.
[18] S. Wolthusen. Enforcing Security Policies using Externally
Controlled Reference Monitors. Submitted for publication.
[19] S. Wolthusen. Layered multipoint network defense and se-
curity policy enforcement.
In Proceedings from the Sec-
ond Annual IEEE SMC Information Assurance Workshop,
United States Military Academy, West Point, NY, pages 100–
108, June 2001.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:43 UTC from IEEE Xplore.  Restrictions apply. 
[20] E. Zadok, I. Badulescu, and A. Shender. Extending File Sys-
tems Using Stackable Templates. In Proceedings of the 1999
USENIX Annual Technical Conference (USENIX-99), pages
57–70, Berkeley, CA, June 6–11 1999. USENIX Associa-
tion.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:43 UTC from IEEE Xplore.  Restrictions apply.