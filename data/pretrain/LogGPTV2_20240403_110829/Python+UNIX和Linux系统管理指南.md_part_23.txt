importsys
import.re
In [6]:s.close()
Server: Apache/2.0.55 (Ubuntu) DAV/2 PHP/5.1.6\r\n\
Out[4]: 16
In [4]: s.send("GET / HTTP/1.0\n\n")
except socket.error,e:
try:
<!DOCTYPE HTML P'
Content-Type:text/html;charset=UTF-8\r\n\
Connection:
Date:Mon,03Sep200718:25:45GMT\r\n\
=socket.socket()
r\n\
print
return True
return False
s.connect((address, port))
'HTTP/1.12000K\r\n\
(a ‘41od ‘ssaxppe) % s% :pa1Te s% 4xod uo s% 04 uot42auuo
close\r\n\
www.TopSage.com
网络丨153
ODG
---
## Page 168
现在已经创建了三个示例来展示如何在shell脚本中使用socket工具。首先，给出运行
有关。
日志的最后一行是check_server returned False，这表明连接失败。倒数第二行的输
下面是一个失败的连接示例：
最后一行输出check_server returned True，表示成功建立连接。
的用法。以下是一个成功连接到web服务器的代码示例：
的工具。成功时返回o值到shell，失败时返回非o值（正数）到shell，这是一种非常典型
值返回给shell。返回与check_server()返回值相反的值使得该脚本成为一个极为有用
后一项数据是check_server()的返回值。最后，脚本将与check_server()返回值相反的
式传递给check_server()。整个脚本代码在执行过程中都能够输出状态信息。输出的最
调用check_server()。main部分解析用户的参数，并将用户请求的参数转化为适当的格
socket.connect()调用会抛出一个可操作的异常，函数返回值为假。代码中的main部分
对象，之后试图连接到指定的地址和端口号。如果成功，则返回值为真。如果失败，
所有的工作都由check_server()函数完成的。check_server()先创建了一个socket
（连接被拒绝）。大胆地猜测一下，可能与这台服务器中没有在81端口守护的进程
sys.exit(not check)
print 'options: %s,
check_server returned False
 jmjones@dinkgutsy:code$ python port_checker_tcp.py -a 192.168.1.15 -p 81
Connected to 192.168.1.15 on port 80
Attempting toconnect to 192.168.1.15on port 80
parser.add_option("-p",
parser.add_option("-a",
parser = OptionParser()
Connection
第5章
address'
www.TopSage.com
‘192.168.1.15
}，args:[]
args:[]
---
## Page 169
#!/usr/bin/env python
例5-2：基于Socket的web服务器检测
以通过一个测试帮助我们准确地判断web服务器的状态，该测试可以检测是否产生HTTP
事实上，web服务器允许连接80端口，并不意味着存在可供连接使用的HTTP服务器。可
这个脚本执行失败，但是我们将&&变为，这意味着如果脚本返回结果为假，将打印输
该脚本执行失败，但不会输出FAILURE：
可以看到，该脚本成功执行，因此，在执行并输出状态结果后，shel输出SUCCESS。
头以及一些特定的URL状态代码。例5-2就实现了这样一个测试。代码如下所示：
出FAILURE。可以看到，它确实是这样执行的。
语句：
脚本的shell命令，如果脚本成功执行，则输出SUCCESS。这里用&操作符来代替if-then
print
print
request_string = "GET %s HTTP/1.1\r\nHost: %s\r\n\r\n" % (resource, address)
def check_webserver(address,port,resource):
import sys
importre
import socket
resource=
FAILURE
Attempting to connect to 192.168.1.15 on port 81
check_server returned False
SUCCESS
check_server returned True
Connected
'port': 81,
 % request_string
+Iesource
address':
address':
'address':
www.TopSage.com
'192.168.1.15'}, args: []
'Connection refused')
'Connection refused')
网络丨155
---
## Page 170
except ValueError:
finally:
exceptsocket.error,e:
try:
(41od ‘ssa1ppe) % us% 41od uo0 5% 04 1auu5 04 Sutadu#av, 4ud
s = socket.socket()
#create a TCP socket
可以把HTTP协议理解为一种已定义的HTTP客户端与服务器进行通信的方法。check
来完成所有工作。首先，check_webserver()建立HTTP请求字符串。如果不了解HTTP，
与之前使用check_server()完成所有工作的示例类似，本示例中使用check_webserver()
if
else:
try:
print
lines
156
print 'Status was %s' % status
return False
print "Connection to %s on port %s failed: %s" % (address, port, e)
print
S.connect((address, port))
sys.exit(not check)
check = check_webserver(options.address, options.port, options.resource)
parser.add_option("-r", "--resource", dest="resource", default=′index.html',
parser.add_option("-p", 
parser = OptionParser()
return
return
return False
print
s.close()
print
(options,
print
'First line of HTTP response: %s'% lines[o]
第5章
'Success
True
args)= parser.parse_args()
main_
need thefirst 100 bytes or so
status was %s'% status
'301']：
help="ADDRESS for webserver", metavar="ADDRESS")
connection"
-a
www.TopSage.com
dest="address",
%（version, status, message)
,default='localhost',.
PDG
---
## Page 171
败时的显示结果：
下面是另一次运行。这一次，我们特意制定一个并不存在的资源，以查看HTTP调用失
这说明运行是成功的。
最后四行输出表示在这个Web服务器上，
是否成功。下面是执行代码的示例：
之前使用普通socket的检测代码相似。我们希望能够从shell脚本调用该方法，并且查看
webserver()取得结果后，它向shell返回与check_webserver()返回值相反的值，这个与
回False。脚本中的main部分解析用户输入，并调用check_webserver()。在从check
示OK的200，或是表示永久移动的301，check_webserver()都会返回True，否则，返
示检测失败。它会取出从服务器读取的信息，并从中提出状态代码。如果状态码是表
务器返回的响应并关闭连接。出现socket错误时，check_webserver()返回False，表
创建一个socket对象，连接到服务器，并向服务器发送HTTP请求。之后，它读取从服
webserver()建立的HTTP请求几乎是最简单的HTTP请求。接下来，check_webserver()
Date: Wed,
Connected
Attempting to connect to 192.168.1.15 on port 80
Host: 192.168.1.15
二
HTTP request:
Success- status was 301
D
Date: Wed, 16 Apr 2008 23:31:24 GMT
Il|HTTP/1.1 301 Moved Permanently
Attempting to connect to 192.168.1.15 on port 80
IIGET /foo HTTP/1.1
Host:192.168.1.15
HTTPrequest:
options:
一
IIGET /apache2-default HTTP/1.1
1to 192.168.1.15 on port 80
16 Apr 2008 23:58:55 GMT
'apache2-default'
www.TopSage.com
，HTTP/apache2-default的默认状态码为301，
'address': *192.168.1.15'], args: []
'port':80,
'address':
网络丨157
---
## Page 172
def check_webserver(address, port, resource):
#1/usr/bin/env python
例5-3：基于httplib的web服务器检测
httplib模块完成。
级库而使用socket这样的低级库。例5-3实现了与之前示例相同的功能，只是这里使用
需要有更出色的性能时。但是在本示例中，我们没有任何理由不使用httplib这样的高
些在可用的库中找不到的任务时，或是需要对库中的任务进行细粒度的控制时，或是
socket模块呢？或者说，什么时候应该使用更高层的库而不是较低层的库呢？真正的
示如何使用httplib模块。我们首先考虑的是，什么时候应该使用httplib模块而不是
先前的示例演示了如何直接使用socket模块创建一个HTTP请求。接下来的示例将演
需要在类似socket这样的底层库上花费太多时间。
组件，应该使用高于socket模块的其他库。实际上，在真正编写网络组件的时候，并不
import httplib
经验是根据具体情况而定。有时候，我们需要使用较低层的库。比如当我们需要完成一
httplib
例，展示了客户端与服务器进行通讯时有可能出现的不同场景。如果你有机会编写网络
本节主要介绍如何构建底层网络服务器连接，并实现基本的检测功能。通过一系列示
没有成功执行。由于在web服务器上不存在/foo，检测程序返回False。
之前示例代码中，最后四行显示代码被成功执行，而这个示例代码的最后四行却表明它
158
import sys
check_webserver returned False
Status was 404
Version: HTTP/1.1, Status: 404, Message: Not Found
First line of HTTP response: HTTP/1.1 404 Not Found
try:
第5章
#get response
#make request
+resource
% response.status
www.TopSage.com
ODG
---
## Page 173
目录，但是没有找到。
下面的示例中，我们使用了与之前示例执行失败时所使用的相同的命令行参数寻找/fo0
务器上寻找/，并且找到了：
下面的示例中，我们使用了与之前示例成功执行时所使用的相同的命令行参数在web服
且，这段代码看起来也让人觉得更整洁一些。
代码，但无须我们手动创建、发送和接收HTTP请求和响应，减少了不必要的麻烦。而
象。可以通过引用响应对象的状态（status）属性访问HTTP的状态。虽然这并没有少写
HTTP请求。connection对象也有一个getresponse()方法，该方法可以创建一个响应对
必手动解析HTTP响应。httplib连接对象具有request()方法，该方法能够建立和发送
本示例与socket示例非常相似。两者最大的差异是你没必要手动创建HTTP请求，也不
$ python web_server_checker_httplib.py -a 192.168.1.15 -r /foo
HTTP connection closed successfully
response status: 200
$ python web_server_checker_httplib.py -a 192.168.1.15 -r /
parser.add_option("-r"
_name_
request for/successful
sys.exit(not check)
print'check_webserverreturned%s'%check
parser.add_option("
parser.add_option("
parser = OptionParser()
else:
if response.status in [200, 301]:
finally:
except sock.error, e:
return False
return True
return False
print'
conn.close()
'HTTP connection failed: %s' % e
connection closed successfully'
help="ADDRESS for webserver"
-a"
"--address", dest="address", default='localhost',
--port", dest="port",
-resource"
port':80,
www.TopSage.com
type="int"，default=80,
"，metavar="ADDRESS")
default='index.html',
网络丨159
8
---
## Page 174
parser.add _option("-r",
from ftplib import FTP
#1/usr/bin/env python
例5-4：使用ftplib实现FTPURLretriever
在这里，我们没有对该库进行全面的介绍，仅展示了例5-4，然后对该示例进行解析。
GUIFTP应用程序。
Python脚本来完成。你甚至可以使用许多在Python中可用的GUI框架，建立属于自己的
行任何通常会使用FTP客户端应用程序来执行的任务。例如，可以登录FTP服务器，列
模块。ftplib是一个全功能（full-featured）的FTP客户端库，它可让你以编程方式执
除了socket和httplib模块之外，Python标准库还包含了一个名为ftplib的FTP客户端
ftplib
使用socket模块会使代码更简洁、清晰。而代码越简洁，其中的bug就越少。
if not (options.remote_file and.
parser.add_option("-a",
出指定目录中的文件，下载文件、上传文件、更改目录、退出，所有这一切都可以通过
正如之前所说，如果有机会使用高级库，
160
(options, args) = parser.parse_args()
parser.add_option("-p",
parser.add_option("-1",
parser =OptionParser()
import sys
importftplib
help="LOCAL FILE NAME to save remote file to", metavar="LOCAL FILE NAME")