She walks in beauty, like the night
She walks in beauty, like the night
Of cloudless climes and starry skies...
Of cloudless climes and starry skies...
Lord Byron
Lord Byron
[Ctrl+D]
每次按下Enter键，系统便会处理缓冲区中储存的字符，并在下一行打
印该输入行的副本。这个过程一直持续到以UNIX风格模拟文件结尾（按下
507
Ctrl+D）。在PC中，要按下Ctrl+Z。
我们暂停一会。既然echo_eof.c程序能把用户输入的内容拷贝到屏幕
上，那么考虑一下该程序还可以做什么。假设以某种方式把一个文件传送给
它，然后它把文件中的内容打印在屏幕上，当到达文件结尾发现EOF信号时
停止。或者，假设以某种方式把程序的输出定向到一个文件，然后通过键盘
输入数据，用echo_eof.c 来储存在文件中输入的内容。假设同时使用这两种
方法：把输入从一个文件定向到echo_eof.c中，并把输出发送至另一个文
件，然后便可以使用echo_eof.c来拷贝文件。这个小程序有查看文件内容、
创建一个新文件、拷贝文件的潜力，没想到一个小程序竟然如此多才多艺！
关键是要控制输入流和输出流，这是我们下一个要讨论的主题。
注意 模拟EOF和图形界面
模拟EOF的概念是在使用文本界面的命令行环境中产生的。在这种环境
中，用户通过击键与程序交互，由操作系统生成EOF信号。但是在一些实际
应用中，却不能很好地转换成图形界面（如Windows和Macintosh），这些用
户界面包含更复杂的鼠标移动和按钮点击。程序要模拟EOF的行为依赖于编
译器和项目类型。例如，Ctrl+Z可以结束输入或整个程序，这取决于特定的
设置。
508
8.4 重定向和文件
输入和输出涉及函数、数据和设备。例如，考虑 echo_eof.c，该程序使
用输入函数 getchar()。输出设备（我们假设）是键盘，输入数据流由字符组
成。假设你希望输入函数和数据类型不变，仅改变程序查找数据的位置。那
么，程序如何知道去哪里查找输入？
在默认情况下，C程序使用标准I/O包查找标准输入作为输入源。这就是
前面介绍过的stdin流，它是把数据读入计算机的常用方式。它可以是一个过
时的设备，如磁带、穿孔卡或电传打印机，或者（假设）是键盘，甚至是一
些先进技术，如语音输入。然而，现代计算机非常灵活，可以让它到别处查
找输入。尤其是，可以让一个程序从文件中查找输入，而不是从键盘。
程序可以通过两种方式使用文件。第 1 种方法是，显式使用特定的函数
打开文件、关闭文件、读取文件、写入文件，诸如此类。我们在第13章中再
详细介绍这种方法。第2种方法是，设计能与键盘和屏幕互动的程序，通过
不同的渠道重定向输入至文件和从文件输出。换言之，把stdin流重新赋给文
件。继续使用getchar()函数从输入流中获取数据，但它并不关心从流的什么
位置获取数据。虽然这种重定向的方法在某些方面有些限制，但是用起来比
较简单，而且能让读者熟悉普通的文件处理技术。
重定向的一个主要问题与操作系统有关，与C无关。尽管如此，许多C
环境中（包括UNIX、Linux和Windows命令提示模式）都有重定向特性，而
且一些C实现还在某些缺乏重定向特性的系统中模拟它。在UNIX上运行苹果
OS 
X，可以用UNIX命令行模式启动Terminal应用程序。接下来我们介绍
UNIX、Linux和Windows的重定向。
8.4.1 UNIX、Linux和DOS重定向
UNIX（运行命令行模式时）、Linux（ditto）和Window命令行提示（模
仿旧式DOS命令行环境）都能重定向输入、输出。重定向输入让程序使用文
件而不是键盘来输入，重定向输出让程序输出至文件而不是屏幕。
509
1.重定向输入
假设已经编译了echo_eof.c 
程序，并把可执行版本放入一个名为
echo_eof（或者在Windows系统中名为echo_eof.exe）的文件中。运行该程
序，输入可执行文件名：
echo_eof
该程序的运行情况和前面描述的一样，获取用户从键盘输入的输入。现
在，假设你要用该程序处理名为words的文本文件。文本文件（text file）是
内含文本的文件，其中储存的数据是我们可识别的字符。文件的内容可以是
一篇散文或者C程序。内含机器语言指令的文件（如储存可执行程序的文
件）不是文本文件。由于该程序的操作对象是字符，所以要使用文本文件。
只需用下面的命令代替上面的命令即可：
echo_eof 或C>。
$ echo_eof mywords
>符号是第2个重定向运算符。它创建了一个名为mywords的新文件，然
后把echo_eof的输出（即，你输入字符的副本）重定向至该文件中。重定向
把stdout从显示设备（即，显示器）赋给mywords文件。如果已经有一个名为
mywords的文件，通常会擦除该文件的内容，然后替换新的内容（但是，许
多操作系统有保护现有文件的选项，使其成为只读文件）。所有出现在屏幕
的字母都是你刚才输入的，其副本储存在文件中。在下一行的开始处按下
Ctrl+D（UNIX）或Ctrl+Z（DOS）即可结束该程序。如果不知道输入什么内
容，可参照下面的示例。这里，我们使用UNIX提示符$。记住在每行的末尾
单击Enter键，这样才能把缓冲区的内容发送给程序。
$ echo_eof > mywords
You should have no problem recalling which redirection
operator does what. Just remember that each operator 
points
in the direction the information flows. Think of it as
511
a funnel.
[Ctrl+D]
$
按下Ctrl+D或Ctrl+Z后，程序会结束，你的系统会提示返回。程序是否
起作用了？UNIX的ls命令或Windows命令行提示模式的dir命令可以列出文件
名，会显示mywords文件已存在。可以使用UNIX或Linux的cat或DOS的type命
令检查文件中的内容，或者再次使用echo_eof，这次把文件重定向到程序：
$ echo_eof  savewords
下面的命令也起作用，因为命令与重定向运算符的顺序无关：
echo_eof > savewords  mywords.... mywords在输入之前已导致原mywords的长度被截断为0。
总之，在UNIX、Linux或Windows/DOS系统中使用两个重定向运算符
（）时，要遵循以下原则。
重定向运算符连接一个可执行程序（包括标准操作系统命令）和一个数
据文件，不能用于连接一个数据文件和另一个数据文件，也不能用于连接一
个程序和另一个程序。
使用重定向运算符不能读取多个文件的输入，也不能把输出定向至多个
文件。
通常，文件名和运算符之间的空格不是必须的，除非是偶尔在UNIX
shell、Linux shell或Windows命令行提示模式中使用的有特殊含义的字符。例
如，我们用过的echo_eof beets        ←违反第1条规则
addup  beets fish     ←违反第2条规则
UNIX、Linux或Windows/DOS 还有>>运算符，该运算符可以把数据添加
到现有文件的末尾，而 | 运算符能把一个文件的输出连接到另一个文件的输
入。欲了解所有相关运算符的内容，请参阅 
UNIX 
的相关书籍，如UNIX
Primer Plus，Third Edition（Wilson、Pierce和Wessler合著）。
4.注释
513
重定位让你能使用键盘输入程序文件。要完成这一任务，程序要测试文
件的末尾。例如，第 7 章演示的统计单词程序（程序清单7.7），计算单词
个数直至遇到第1个|字符。把ch的char类型改成int类型，把循环测试中的|替
换成EOF，便可用该程序来计算文本文件中的单词量。
重定向是一个命令行概念，因为我们要在命令行输入特殊的符号发出指
令。如果不使用命令行环境，也可以使用重定向。首先，一些集成开发环境
提供了菜单选项，让用户指定重定向。其次，对于 Windows系统，可以打开
命令提示窗口，并在命令行运行可执行文件。Microsoft Visual Studio的默认
设置是把可执行文件放在项目文件夹的子文件夹，称为Debug。文件名和项
目名的基本名相同，文件名的扩展名为.exe。默认情况下，Xcode在给项目
命名后才能命名可执行文件，并将其放在Debug文件夹中。在UNIX系统中，
可以通过Terminal工具运行可执行文件。从使用上看，Terminal比命令行编译
器（GCC或Clang）简单。
如果用不了重定向，可以用程序直接打开文件。程序清单8.3演示了一
个注释较少的示例。我们学到第13章时再详细讲解。待读取的文件应该与可
执行文件位于同一目录。
程序清单8.3 file_eof.c程序
// file_eof.c --打开一个文件并显示该文件
#include 
#include        // 为了使用exit()
int main()
{
int ch;
FILE * fp;
514
char fname[50];       // 储存文件名
printf("Enter the name of the file: ");
scanf("%s", fname);
fp = fopen(fname, "r");   // 打开待读取文件
if (fp == NULL)       // 如果失败
{
printf("Failed to open file. Bye\n");
exit(1);         // 退出程序
}
// getc(fp)从打开的文件中获取一个字符
while ((ch = getc(fp)) != EOF)
putchar(ch);
fclose(fp);          // 关闭文件
return 0;
}
小结：如何重定向输入和输出
绝大部分C系统都可以使用重定向，可以通过操作系统重定向所有程
序，或只在C编译器允许的情况下重定向C程序。假设prog是可执行程序
名，file1和file2是文件名。
把输出重定向至文件：>
515
prog >file1
把输入重定向至文件：file1
prog >file1 
int main(void)
{
int guess = 1;
printf("Pick an integer from 1 to 100. I will try to 
guess ");
printf("it.\nRespond with a y if my guess is right and 
with");
517
printf("\nan n if it is wrong.\n");
printf("Uh...is your number %d?\n", guess);
while (getchar() != 'y')   /* 获取响应，与 y 做对比 */
printf("Well, then, is it %d?\n", ++guess);
printf("I knew I could do it!\n");
return 0;
}
下面是程序的运行示例：
Pick an integer from 1 to 100. I will try to guess it.
Respond with a y if my guess is right and with
an n if it is wrong.
Uh...is your number 1?
n
Well, then, is it 2?
Well, then, is it 3?
n
Well, then, is it 4?
Well, then, is it 5?
y
518