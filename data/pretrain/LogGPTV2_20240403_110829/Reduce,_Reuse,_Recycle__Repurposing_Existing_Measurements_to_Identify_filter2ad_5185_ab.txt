tion 4.3 describes how our techniques can be applied to monitoring
systems to help keep a corpus of traceroutes up-to-date. Figure 2
provides an overview of our technique and their sections and data
sources. Appendix A describes the (existing) techniques we use
Figure 2: Methodology overview showing data sources (left),
proposed techniques (gray boxes), and which data sources
are used by each technique. IP-to-AS mapping and AS border
detection use multiple data sources (Appendix A).
to map an IP-level traceroute to the coarser granularities and to
geolocate IP addresses.
4.1 Detecting Changes from Public BGP Feeds
We seek to use BGP data not to build snapshots of the Internet’s
AS-level routing topology, but to detect when a traceroute in our
corpus is likely to be out-of-date and incorrect. This problem is
challenging because BGP routing activity is not necessarily reflected
in traceroutes, and vice-versa. BGP provides an AS-path towards
an IP prefix, a coarser granularity than the traceroute corpus’s IP-
level path to a (specific) IP destination. Moreover, vantage points
that provide BGP data (e.g., RouteViews and RIPE RIS collectors)
differ from vantage points from which traceroutes can be gathered
(e.g., Ark, RIPE Atlas), both in terms of host ASes and geographic
locations.
We overcome these limitations by developing techniques that
monitor BGP feeds to infer IP-level border changes, where both
types of changes need not result in any route changes at the AS
level (i.e., not visible in BGP AS-paths). Our techniques consider
BGP data obtained from BGP route collectors in a new light: an
update from a BGP router signals that the router has changed its
routing configuration, even if the update carries the same AS-path
as the previous update. Our techniques extract signals of possible
path changes by correlating BGP activity across time and across
vantage points.
First, similar to earlier work [18], we identify traceroute staleness
prediction signals by looking for changes in overlapping BGP AS-
paths. Second, we monitor for changes in the BGP communities
attribute, as such changes may indicate a change in the border IPs,
even if the AS-path remains unchanged [21]. Third, we rely on the
fact that many routers issue updates whenever they change a route,
even though the transitive attributes may be identical to those of
the previous update. Before describing any of these techniques, we
discuss how we collect and preprocess BGP data.
Initializing BGP feeds to monitor. We use BGPStream [61]
4.1.1
to stream updates from RouteViews and RIPE RIS collectors and
IRRRIPEAtlasBGPStreamBorderDetectionPeeringDBIPMapDataSourcesTracerouteCorpusIP-to-ASMappingBorder router changesMIDARInitializationSignal ComputationAS-RankIP subpath changesIXP membershipsBGP burstsBGP communitiesBGP AS-pathsSignalsCalibrationSignal selectionCandidatetraceroutes§4.3§4.4§4.1.2§4.1.3§4.1.4§4.2.1§4.2.2§4.2.3IMC ’20, October 27–29, 2020, Virtual Event, USA
Vasileios Giotsas et al.
to maintain BGP table views for every route collector peer. We
exclude prefixes more specific than /24, as such prefixes generally
do not propagate far [9] and may indicate misconfigurations or
blackholing [31]. We also strip from all AS-paths any AS used by
Internet exchange points (IXPs) [63], so as to include AS links
between IXP members and not the IXP itself. For every destination
in the traceroute corpus, we find the most specific prefix advertised
by each BGP vantage point (VP), a router peering with a BGP
collector, and we monitor for updates in the VP’s route to the
prefix. Note that different ASes may use a different prefix to the
same destination due to the presence of overlapping prefixes in the
routing system [40].
Inference of AS-level path changes. Given a traceroute τd
4.1.2
to a destination IP d measured at time t0, traversing AS hops
{a1, a2, . . . , ad}, we determine the times at which AS hops change
in the BGP paths that intersect with τd.
In every fixed-duration time window wi = [ti , ti +1), ti > t0,1 we
find the set of AS paths to d that overlap the traceroute (i.e., include
some AS aj from τd), denoting each by ρv,d,t′ for ti ≤ t′ < ti +1;
is the AS path used by VP v at the beginning of the window,
ρv,d,ti
and ρv,d,t′ for ti < t′ indicates a BGP update from v at time t′
changing its AS path. From these path segments, we compute the
intersect
i,aj,d whose AS-paths first intersect τd at aj, i.e., aj
set of paths P
is the AS farthest from the destination that is in both τd and ρv,d,t′.
intersect
i,aj,d whose AS
We also compute the subset of paths P
hops from aj to the destination traverse the same ASes aj . . . ad
as τd. For each time window wi and AS aj ∈ τd, we compute
the ratio of paths that match the current traceroute in the corpus,
i,aj,d = |P
ratio
P
ratio
i,aj,d across time
We monitor the resulting time series for P
windows and generate a staleness prediction signal when the Bitmap
detection algorithm identifies an outlier in the time series [79].
We selected a statistical method for outlier detection instead of a
machine learning approach because statistical methods can achieve
better accuracy and execution time for univariate time series with
ratio
no seasonality [8]. If P
i,aj,d
intersect and P
match count
as missing and not as an outlier. Since P
ratio
path updates rather than VPs, outliers in P
i,aj,d can capture both
shifts of VPs away from the overlapping path and periods of routing
instability, enabling the detection of IP-level changes even when
an AS path reverts back to its original hops.
= ∅, we consider the value P
i,aj,d | ÷ |P
match
i,aj,d ⊆ P
match
We need to avoid changes to the time series (and possible outliers)
caused by variation in the underlying set of VPs over time. To
ratio
achieve this, P
i,aj,d is computed over only the set of VPs that
intersected τd at aj when the traceroute was issued at t0.
To prevent persistent path changes from introducing level-shifts
ratio
in the time series for P
i,aj,d that obscure the detection of further
outliers, we remove time windows flagged as outliers in order to
preserve the stationarity of the time series [17, 75], so the persis-
tent change will continue to register as an outlier suggesting the
traceroute is stale.
intersect
i,aj,d
|.
intersect
i,aj,d
1The time window duration is a function of the frequency at which public data is made
available. In this paper we use a time period of 15 minutes in our analysis because it is
the duration of a RouteViews BGP dump cycle. Since RIPE RIS dumps BGP messages
every 5 minutes, a 15-minute window allow us to combine BGP messages from both
projects in every time window.
TIME: 09/23/2020 10:00:12
TYPE: TABLE_DUMP_V2/IPV4 UNICAST
FROM: 195.66.224.175 AS13030
ASPATH: 13030 1299 2914 18747
COMMUNITY: 13030:2 13030:1299 13030:7214 13030:51701
ANNOUNCE: 200.61.128.0/19
TIME: 09/23/2020 12:00:12
TYPE: TABLE_DUMP_V2/IPV4 UNICAST
FROM: 195.66.224.175 AS13030
ASPATH: 13030 1299 2914 18747
COMMUNITY: 13030:2 13030:1299 13030:7173 13030:51203
ANNOUNCE: 200.61.128.0/19
Figure 3: Example change of BGP communities that indicate
the interconnection location of AS13030 and AS1299 (from
London (13030:51701) to Frankfurt (13030:51203)), while the
AS path remains unchanged.
4.1.3 Tracking changes in BGP communities. BGP communities are
often used to encode properties of a route, such as the geographic
location at which an AS learned a route, traffic engineering poli-
cies associated with the route, or preferences for how the route is
processed (e.g., whether it should be prepended or not exported).
These encodings allow a router to communicate information to
other routers in its own AS or other ASes.
Figure 3 provides an example. By convention, the top 16 bits of
a community indicate the AS that defines it. The figure shows BGP
updates from a route collector’s peer 195.66.224.175 (in AS13030) to
the destination prefix 200.61.128.0/19 at two points in time. The AS-
path is the same; the communities, however, differ because border
routers of AS13030 signal their locations by adding communities to
routes they receive from external peers. Specifically, 195.66.224.175
switched from using a route learned from a router at the Telehouse
LON-1 point-of-presence (PoP) in London (13030:51701), to using a
route from the Interxion FRA-3 PoP in Frankfurt (13030:51203)
[58]. While the AS-level path remains identical, the change of peer-
ing point signals a possible IP-level border change in any corpus
traceroute to a destination in 200.61.128.0/19 that goes through
AS13030.
To infer IP-level border changes based on BGP communities, we
monitor for changes in the communities attached to the paths of
BGP VPs that overlap an AS-level suffix of a traceroute τd. We only
consider communities as relevant if they are defined by some AS
aj that intersects τd. If the path received from a VP has a change in
communities associated with aj (i.e., a community aj:xxx is added
and/or removed), we consider it a staleness prediction signal that τd
may have changed, except in two cases which we explain next.
First, since communities are an optional transitive BGP attribute,
the communities values may be stripped out by any AS along the
path. Consequently, we may observe a community appearing or dis-
appearing if there are changes in the AS hops between the intersect-
ing AS a and the VP. For example, suppose a vantage point v’s path
changes from {v, x, aj , ..., ad} to {v, y, aj , ..., ad}. If x strips out ev-
ery community before propagating a route, while y preserves the
Repurposing Existing Measurements to Identify Stale Traceroutes
IMC ’20, October 27–29, 2020, Virtual Event, USA
communities, then communities may appear in the BGP feed even
though the set of communities added to the route never changed.
To avoid such artificial changes, if the route changes from having to
not having communities (or vice versa), we only consider it a stale-
ness prediction signal if the AS-path remains the same. Additionally,
if a new community appears on the path from v, but that same
community was already on an overlapping AS path from another
VP v′, we do not consider it as a new signal of change.
Second, while some communities reflect attributes of border IPs
(e.g., geolocation communities), other communities have no relation
to the traversed IP hops (e.g., control of path prepending). The
semantics of BGP communities are defined by each network, and
documentation, if even publicly available, follows ad-hoc formats.
Additionally, even community values that do relate to properties
of border IPs may not relate to the traceroutes in the corpus. For
example, the BGP path may traverse a different portion of the AS
than the traceroute and may carry a geolocation community for an
interconnection point that is not used by the traceroute. To prevent
false signals due to these issues, our technique automatically learns
over time which BGP communities correlate with changes, using a
process we describe in Section 4.3.
Inferring changes from duplicate updates. To catch changes
4.1.4
that do not manifest as AS path or community changes, we exploit
the observation made in prior work that many seemingly duplicate
updates correspond to changes in attributes that are not propagated
across AS borders, some of which relate to route changes invisible
at the AS granularity (e.g., multi-exit discriminator and IGP cost
changes) [34, 62]. While we can associate changes in AS paths or
BGP communities to particular ASes that appear on traceroutes,
duplicate updates give no direct indication as to which AS triggered
them.
⊆ Vj,d0
= |Vj,d
A complication happens when some of the peers in Vj,d
To overcome this challenge, we check for contemporaneous
duplicate/unchanged updates (i.e., updates without changes to AS-
path or communities attributes) to the same destination from multi-
ple BGP collector peers with overlapping AS-paths, suggesting that
the change originated on the common subpath shared by the peers.
In particular, for each AS-level suffix of the traceroute {aj , . . . , ad},
we find the set of BGP VPs Vj,d0
that share that suffix at time
t0 when the traceroute τd is issued and track the subsets of VPs
Vj,d
that propagate an unchanged update in window
i
wi. We monitor the time series tracking the number of such peers
| for anomalous time intervals (§4.1.2).
U j,d
i
have a
common subpath that extends beyond the portion that overlaps the
traceroute. For example, consider a subset of BGP collector peers
that all share a common AS subpath {aj−n, . . . , aj−1, aj , . . . , ad},
but only hops {aj , . . . , ad} are common with the corresponding
traceroute. A later flurry of updates from these VPs could indicate
that the traceroute is out-of-date, or it could be due to a change in
{aj−n, . . . , aj−1}, which does not overlap the traceroute.
To avoid this issue, we identify each AS ak that is on the paths of
at least 2 VPs in Vj,d0
and is not on the traceroute. For each, we find
the set of VPs V′k,d
that traverse AS ak on the way to d but not
the entire subpath {aj , . . . , ad}, and monitor the number of those
VPs that propagate an unchanged BGP update U ′k,d
|.
i
= |V′k,d
i
i
i
i
Figure 4: Example correlating bursts of BGP updates to infer
potential changes of border-level IP interfaces. The shaded
areas indicate time intervals with outliers. There are two
time intervals with outliers (ta and tb) for U j,d