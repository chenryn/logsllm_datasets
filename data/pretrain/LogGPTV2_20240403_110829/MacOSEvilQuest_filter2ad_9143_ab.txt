    __text:0000000100004A39                 cmp     dword ptr [rcx+8], 0DEADFACEh
    __text:0000000100004A40                 mov     [rbp+var_38], rax
    __text:0000000100004A44                 jz      leave
在没有找到预定义数据的情况下，该样本跳过了某些持久性逻辑……看起来像是在保留一个守护程序的逻辑：
    ;rcx: trailer data
     if (extract_ei(*var_10, &var_40) != 0x0) {
         _persist_executable_frombundle(var_48, var_40, var_30, *var_10);
         _install_daemon(var_30, _ei_str("0hC|h71FgtPJ32afft3EzOyU3xFA7q0{LBx..."), 
                         _ei_str("0hC|h71FgtPJ19|69c0m4GZL1xMqqS3kmZbz3FWvlD..."), 0x1);
         var_50 = _ei_str("0hC|h71FgtPJ19|69c0m4GZL1xMqqS3kmZbz3FWvlD1m6d3j0000073");
         var_58 = _ei_str("20HBC332gdTh2WTNhS2CgFnL2WBs2l26jxCi0000013");
         var_60 = _ei_str("1PbP8y2Bxfxk0000013");
        ...
        _run_daemon_u(var_50, var_58, var_60);
        ...
        _run_target(*var_10);
    }
程序混淆了我们感兴趣的各种值（例如守护程序的名称/路径）。但是，看起来_ei_str函数负责去模糊处理：
查看它的反编译，我们看到一个名为_eib_string_key的变量的一次性初始化，然后调用名为_eib_secure_decode的函数（它调用了名为_tpdcrypt的方法）：
     int _ei_str(int arg0) {
         var_10 = arg0;
         if (*_eib_string_key == 0x0) {
                 *_eib_string_key = _eip_decrypt(_eib_string_fa, 0x6b8b4567);
         }
         var_18 = 0x0;
         rax = strlen();
         rax = _eib_secure_decode(var_10, rax, *_eib_string_key, &var_18);
         var_20 = rax;
        if (var_20 == 0x0) {
                var_8 = var_10;
        }
        else {
                var_8 = var_20;
        }
        rax = var_8;
        return rax;
    }
通常，我们不必担心去混淆（或解密）算法的细节，因为我们可以简单地在函数末尾设置调试器断点，并打印出纯文本字符串(通常解密之后的值会存放在eax中)。
但是至少让我们转储解密密钥（_eib_string_key）：
    (lldb) x/s $rdx
    0x1001004c0: "PPK76!dfa82^g"
由于该样本貌似不包含预定义的数据，因此将跳过此特定代码块……但是，该恶意软件随后调用了一个名为_ei_persistence_main（也可以持久化该恶意软件）的函数。
在执行在持久化之前操作之前，_ei_persistence_main会执行各种反调试操作以防止动态调试。具体来说，它首先调用一个名为is_debugging的函数。is_debugging方法在地址0000000100007AA0处实现。此外，程序还通过CTL_KERN、KERN_PROC、KERN_PROC_PID和getpid（）等函数判断是否在调试环境中。一旦获取到返回，程序将检查P_TRACED
是否被设置，这是一种很常见的反调试检测思路。
如果is_debugging函数返回1（true），则恶意软件将退出：
    __text:000000010000B89A                 call    _is_debugging
    __text:000000010000B89F                 cmp     eax, 0
    __text:000000010000B8A2                 jz      continue
    __text:000000010000B8A8                 mov     edi, 1
    __text:000000010000B8AD                 call    _exit
想要在调试器中绕过它，我们只需要在0x000000010000B89F处设置断点，然后将RAX寄存器的值更改为0（false）：
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    ->  0x10000b89f: cmpl   $0x0, %eax
        0x10000b8a2: je     0x10000b8b2
        0x10000b8a8: movl   $0x1, %edi
        0x10000b8ad: callq  0x10000feb2
    Target 0: (patch) stopped.
    (lldb) reg read $rax
         rax = 0x0000000000000001
    (lldb) reg write $rax 0
    (lldb) c
但是！该恶意软件的反调试不止这一处，程序还通过_prevent_trace函数进行反调试检测：
     __text:0000000100007C20 _prevent_trace  proc near   
     __text:0000000100007C20                 push    rbp
     __text:0000000100007C21                 mov     rbp, rsp
     __text:0000000100007C24                 call    _getpid
     __text:0000000100007C29                 xor     ecx, ecx
     __text:0000000100007C2B                 mov     edx, ecx        ; addr
     __text:0000000100007C2D                 xor     ecx, ecx        ; data
     __text:0000000100007C2F                 mov     edi, 1Fh        ; request
     __text:0000000100007C34                 mov     esi, eax        ; pid
    __text:0000000100007C36                 call    _ptrace
    __text:0000000100007C3B                 pop     rbp
    __text:0000000100007C3C                 retn
    __text:0000000100007C3C _prevent_trace  endp
要绕过这一点，我们只需避免调用_prevent_trace,我们可以在调用这个函数时设置一个断点，然后修改指令指针（RIP）的值跳过它！
    (lldb) b 0x000000010000B8B2
    Breakpoint 12: where = patch`patch[0x000000010000b8b2], address = 0x000000010000b8b2
    (lldb) c
    Process 683 resuming
    Process 683 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 2.1
    ->  0x10000b8b2: callq  0x100007c20
        0x10000b8b7: leaq   0x7de2(%rip), %rdi
        0x10000b8be: movl   $0x8, %esi
        0x10000b8c3: movl   %eax, -0x38(%rbp)
    Target 0: (patch) stopped.
    (lldb) reg write $rip 0x10000b8b7
    (lldb) c
十分简单！现在，我们可以不受干扰地继续进行动态分析。
顾名思义,ei_persistence_main可实现恶意软件的持久化，但是，在进行持久化之前，它会调用一个名为kill_unwanted杀死所有可能检测或阻止恶意行为的知名安全产品的函数。
kill_unwanted函数获取正在运行的进程的列表，将每个进程与“不需要的”程序的加密列表进行比较。使用前面提到的ei_str函数断点，我们可以转储解密的字符串，以确定“不需要的”程序的值：
    (lldb) x/s $rax
    0x100108fd0: "Little Snitch"
    (lldb) x/s $rax
    0x100100880: "Kaspersky"
    (lldb) x/s $rax
    0x1001028a0: "Norton"
    (lldb) x/s $rax
    0x10010a2f0: "Avast"
    (lldb) x/s $rax
    0x10010a300: "DrWeb"
    (lldb) x/s $rax
    0x100102eb0: "Mcaffee"
    (lldb) x/s $rax
    0x100109d20: "Bitdefender"
    (lldb) x/s $rax
    0x100109d30: "Bullguard"
我相信有一天，Objective-See的工具会列出这样的清单！哈哈！
最终，ei_persistence_main执行，成功实现恶意软件的本地持久化。我们可以通过文件监视器和/或在调试器中观察到这一点。
首先，我们观察到恶意软件解密了与持久性相关的各种字符串：
    (lldb) x/s $rax
    0x100118fd0: "/Library/AppQuest/com.apple.questd"
    (lldb) x/s $rax
    0x1001190f0: "%s/Library/AppQuest/com.apple.questd"
文件监视器（例如macOS的fs_usage）显示了恶意软件向其写入二进制文件~/Library/AppQuest/com.apple.questd，然后创建启动代理属性列表以保留该二进制文件：
    # fs_usage -w -f filesystem
    open ~/Library/AppQuest/com.apple.questd
    ...
    chmod  ~/Library/AppQuest/com.apple.questd       
    ...
    WrData[A]  ~/Library/LaunchAgents/com.apple.questd.plist
com.apple.questd只是恶意软件的一个副本，我们可以通过com.apple.questd.plist的内容发现一些有趣的东西：
    x/s $rax
    0x100119540: "nnnnLabeln%snnProgramArgumentsnn%sn--silentnnnRunAtLoadnnnKeepAlivennnn"
比如填充com.apple.questd二进制文件的完整路径：
    cat /Users/user/Library/LaunchAgents/com.apple.questd.plist 
    Label
    questd
    ProgramArguments
    /Users/user/Library/AppQuest/com.apple.questd
    --silent
    RunAtLoad
    KeepAlive
由于RunAtLoad密钥设置为true恶意软件（现在称为com.apple.questd），因此每次用户登录时都会自动重新启动。
当然[BlockBlock](https://objective-see.com/products/blockblock.html)会检测到这种持久性尝试
一旦确定恶意软件能够持久存在，它似乎就会对其进行复制（复制到~/Library/.9W4S5dtNK，并附带一个预定义数据：
通过流程监视器，我们可以观察到恶意软件，然后通过launchctl submit -l 命令启动此副本：
    [procInfo] process start:
    pid: 737
    path: /bin/launchctl
    user: 501
    args: (
        launchctl,
        submit,
        "-l",
        questd,
        "-p",
        "/Users/user/Library/.9W4S5dtNK"
    )
    [procInfo] process start:
    pid: 738
    path: /Users/user/Library/.9W4S5dtNK
    user: 0
    ...
注意：
该恶意软件也可能会继续存在于/ Library / mixnkey / toolroomd
因此，现在该恶意软件已经持久存在并启动了自身的新配置（即带有“trailer”数据）实例。现在样本可以实现很多功能了：
首先，它将开始加密用户的文件。具体来说，它调用一个名为carve_target的函数，该函数通过eip_encrypt对文件进行加密。文件加密完成后，它将创建一个文本文件，名称READ_ME_NOW为勒索提示我文件：
为确保用户读取此文件，它显示以下模式提示符，并通过macOS内置的“语音”功能大声朗读它：
幸运的是[RansomWhere](https://objective-see.com/products/RansomWhere.html)可以检测到该勒索病毒。
该恶意软件还会查找一些有趣的文件，例如
“wallet.pdf”
“wallet.png”
“key.png”
“*.p12”
此外，它还调用一个名为eilf _rglk_watch_ 的函数，通过CGEventTapCreate Apple API启动一个键盘记录器。
另外，一个名为dispatch（位于address
0x000000010000A7E0）的函数似乎可以处理来自命令和控制服务器（andrewka6.pythonanywhere.com）的任务。这些任务包括：
    1. 执行命令
    2. 启动键盘记录器
    3. 直接在内存中执行模块
最后，如果满足某些先决条件，恶意软件也可能尝试创建反向shell。
有了这些功能，攻击者就可以完全控制受感染的主机！
## 结论
今天，我们对一个有趣的新恶意软件进行了分析-详细介绍了其持久性和功能。
尽管是新的，但我们的（免费！）工具，例如[BlockBlock](https://objective-see.com/products/blockblock.html)和[RansomWhere](https://objective-see.com/products/ransomwhere.html)能够在没有分析的情况下检测并阻止此类的攻击。
## IOC
/Library/mixednkey/toolroomd  
~/Library/AppQuest/com.apple.questd  
~/Library/LaunchAgents/com.apple.questd.plist