the same time as they are displayed on the conﬁrmation
screen. While our architecture might be most relevant to
jurisdictions that have decided, for whatever reason, to
use paperless DREs, we expect that our methods could
offer some beneﬁts to VVPAT-enabled DREs, too.
Others have proposed cryptographic voting protocols
to enhance the security of DREs [10, 16, 26, 27]. We note
that our methods could be easily combined with those
cryptographic schemes.
8 Extensions and discussion
In addition to the properties we discussed, there are other
relevant security properties which we considered in de-
signing our voting system. We have not rigorously val-
idated that the design provides these properties, though
we outline directions we will follow to do so.
Property 3 The DRE cannot leak information through
the on-disk format. Additionally, it should be history-
independent and tamper evident.
Property 3 removes the back-end tabulation system from
the trusted path. Without this property, the tabulation
system may be in the trusted path because the data in-
put to the tabulation system may reveal individual voter’s
choices. With this property, it is possible to make the
outputs of each individual DRE publicly available, and
allow multiple parties to independently tabulate the ﬁnal
results. We believe we can use the techniques from Mol-
nar et al. in implementing Property 3 [25].
Property 4 The DRE only stores ballots the voter ap-
proves.
Property 4 refers to a few conditions. The DRE must not
change the ballot after the voter makes their selection in
the VoteSelection module; software analysis techniques
could prove useful in ensuring the ballot is not modiﬁed.
Additionally, there will need to be some auditing of the
code to ensure display routines accurately display votes
to the screen.
Property 5 The ballot contains nothing more than the
voter’s choices.
In particular, the ballot needs to be put into a canonical
form before being stored. Violation of Property 5 could
violate the voter’s privacy, even if the voter approves the
ballot. Suppose the voter’s choice, “James Polk” were
stored with an extra space: “James Polk”. The voter
would not likely notice anything were amiss, but this
could convey privacy leaking information in a sublimi-
nal channel [16]. We expect software analysis techniques
could ensure that canonicalization functions are run on
all program paths. Combined with Property 4 to ensure
the ballot doesn’t change, this would help ensure the bal-
lot is canonicalized.
USENIX Association
Security ’06: 15th USENIX Security Symposium
333
We do not expect these to be an exhaustive list of
the desirable security properties; rather, they are proper-
ties that we believe are important and that we can easily
achieve with this architecture without any changes.
Minimizing the underlying software platform. Our
prototype runs under an embedded Linux distribution
that is custom designed for the gumstix platform. De-
spite its relatively minimal size (4MB binary for ker-
nel and all programs and data), it still presents a large
TCB, most of which is unnecessary for a special-purpose
voting appliance. We expect that a serious deployment
would dispense with the OS and build a single-purpose
embedded application running directly on the hardware.
For instance, we would not need virtual memory, mem-
ory protection, process scheduling, ﬁlesystems, dual-
mode operation, or most of the other features found in
general-purpose operating systems.
It might sufﬁce to
have a simple bootloader and a thin device driver layer
specialized to just those devices that will be used during
an election. Alternatively, it may be possible to use ideas
from nanokernels [11], microkernels [14, 31], and oper-
ating system specialization [30] to reduce the operating
system and accordingly the TCB size.
Deploying code. Even after guaranteeing the software
is free of vulnerabilities, we must also guarantee that the
image running on the components is the correct image.
This is not an easy problem, but the research commu-
nity has begun to address the challenges. SWATT [34] is
designed to validate the code image on embedded plat-
forms, though their model does not allow for CPUs with
virtual memory, for example. TCG and NGSCB use a
secure hardware co-processor to achieve the same ends,
though deploying signed and untampered code to devices
still requires much work. Additionally, a human must
then check that all components are running the latest bi-
nary and must ensure that the binaries are compatible
with each other – so that a version 1.0 VoteCore is not
running with a version 1.1 IOMultiplexor module, for ex-
ample.
This concern is orthogonal to ours, as even current vot-
ing machines must deal with versioning. It illustrates one
more challenge in deploying a secure voting system.
9 Related work
There has been a great deal of work on high-assurance
and safety-critical systems, which are designed, imple-
mented, and tested to achieve speciﬁc safety, reliability,
and security properties. We use many classic techniques
from that ﬁeld, including minimization of the size of the
TCB and decomposing the application into clearly spec-
iﬁed components. One contribution of this paper is that
we show in detail how those classic techniques may be
applied in the e-voting context.
Modularity is widely understood to be helpful in build-
ing high-reliability systems. Deep space applications of-
ten use multiple components for reliability and fault tol-
erance [41]. Telephone switches use redundant com-
ponents to upgrade software without loss of availabil-
ity [41]. In avionics, Northrop Grumman has proposed
an architecture for future avionics systems suitable to the
Department of Defense’s Joint Vision 2020 [39]. Their
MLS-PCA architecture is intended to support tens to
hundreds of thousands of separate processors. MLS-
PCA uses isolation for several purposes, including mis-
sion ﬂexibility, multi-level security when interoperating
with NGOs, and reduction in the amount of trusted soft-
ware over traditional federated architectures. Of these
reasons, the last is most related to our setting. Others
have articulated composibility of security as one of the
key challenges in applying modularity to the security set-
ting [21].
Rebooting is widely recognized in industry as a useful
way to prevent and rectify errors [9]. Rebooting returns
the system to its original state, which is often a more
reliable one. Others use preventative rebooting to mit-
igate resource leaks and Heisenbugs [15].
In contrast,
our work uses rebooting for what we believe is a new
purpose: privacy. Prior work focuses on availability and
recoverability, while we use it to simplify our task in ver-
ifying privacy preserving properties.
The Starlight Interactive Link is a hardware device that
allows a workstation trusted with secret data to safely
interact with an unclassiﬁed network [2]. The Starlight
Interactive Link acts as a data diode. A chief concern is
secret data leaking onto the untrusted network. Many of
these ideas led to the design of our IOMultiplexor.
Our design shares similarities with existing DRE vot-
ing machines from major vendors, such as Diebold, Hart
Intercivic, Sequoia Voting Systems, and Election Sys-
tems and Software. A criticism of the machines, how-
ever, is that people must trust the software running on
the machines since the voter cannot be sure their vote
was properly recorded. Rebecca Mercuri has called for
vendors to augment DRE machines with a voter veriﬁed
paper audit trail (VVPAT) [22, 23]. In this DRE variant,
the voter must approve a paper copy of their selections
that serves as the permanent record. The paper copy is
typically held behind glass so the voter cannot tamper
with it. Even in spite of malicious software, the paper
copy accurately reﬂects the voter’s selections.
The principle of isolation for systems is well estab-
lished [4, 7, 12, 20, 28, 31, 32, 35, 36, 40].
Isola-
tion has been proposed as a technique to improve se-
curity in two existing voting systems. The FROGS and
Pnyx.DRE systems both separate the vote selection pro-
cess from vote conﬁrmation [1, 6]. However, FROGS
334
Security ’06: 15th USENIX Security Symposium
USENIX Association
signiﬁcantly alters the voting experience while it is not
clear the Pnyx.DRE was designed for veriﬁcation nor
does it provide our privacy protections.
Finally, Hall discusses the impact of disclosing the
source for voting machines for independent audit [13].
ACM Symposium on Operating Sstems Principles (SOSP
2003), October 2003.
[5] M. Barnett, K. R. Leino, and W. Schulte. The Spec# pro-
gramming system: An overview. In Proceedings of Con-
struction and Analysis of Safe, Secure and Interoperable
Smart Devices (CASSIS), 2004.
10 Conclusions
Democracy deserves the best efforts that computer sci-
entists can deliver in producing accurate and veriﬁable
voting systems. In this work, we have proposed better
DRE based voting designs, whether VVPAT-enabled or
not. In both cases, our architecture provides stronger se-
curity properties than current voting systems.
Our approach uses hardware to isolate components
from each other and uses reboots to guarantee voter pri-
vacy.
In particular, we have shown how isolating the
VoteSelection module, where much of the hairiness of a
voting system resides, into its own module can eliminate
a great deal of complex code from the TCB. Though iso-
lation is not a novel idea, the way we use it to improve
the security of DREs is new. This work shows that it
is possible to improve existing DREs without modifying
the existing voter experience or burdening the voter with
additional checks or procedures.
The principles and techniques outlined here show that
there is a better way to design voting systems.
Acknowledgments
We thank David Jefferson for early discussions that led
to this work. Umesh Shankar, Chris Karlof, Rob John-
son, and Mike Reiter provided invaluable feedback on
the presentation, organization, and provided great insight
into the thinking and organization of the work. We thank
Matt Bishop and David Molnar for helpful discussions
about related works.
References
[1] Auditability and voter-veriﬁability for electronic voting
terminals. http://www.scytl.com/docs/pub/
a/PNYX.DRE-WP.pdf, December 2004. White paper.
[2] M. Anderson, C. North, J. Grifﬁn, R. Milner, J. Yesberg,
and K. Yiu. Starlight: Interactive Link. In Proceedings of
the 12th Annual Computer Security Applications Confer-
ence (ACSAC), 1996.
[6] S. Bruck, D. Jefferson, and R. Rivest.
A modu-
http://www.
lar voting architecture (“Frogs”).
vote.caltech.edu/media/documents/wps/
vtp wp3.pdf, August 2001.
Project Working Paper.
Voting Technology
[7] E. Bugnion, S. Devine, and M. Rosenblum. Disco: Run-
ning commodity operating systems on scalable multipro-
cessors. In Proceedings of the 16th ACM Symposium on
Operating Systems Principles (SOSP), October 1997.
[8] L. Burdy, Y. Cheon, D. Cok, M. Ernst, J. Kiniry, G. Leav-
ens, K. R. Leino, and E. Poll. An overview of JML
tools and applications.
International Journal on Soft-
ware Tools for Technology Transfer (STTT), 7(3):212–
232, June 2005.
[9] G. Candea, S. Kawamoto, Y. Fujiki, G. Friedman, and
A. Fox. Microreboot – a technique for cheap recovery. In
6th Symposium on Operating System Design and Imple-
mentation (OSDI), December 2004.
[10] D. Chaum. Secret-ballot receipts: True voter-veriﬁable
elections. IEEE Security & Privacy Magazine, 2(1):38–
47, Jan.–Feb. 2004.
[11] D. Engler, M. F. Kaashoek, and J. O’Toole. Exokernel:
An operating system architecture for application-level re-
source management.
In Proceedings of the 15th ACM
Symposium on Operating Systems Principles (SOSP), Oc-
tober 1995.
[12] I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. A se-
cure environment for untrusted helper applications: Con-
ﬁning the wily hacker. In Proceedings of the 6th USENIX
Security Symposium, August 1996.
[13] J. Hall. Transparency and access to source code in e-
voting. Unpublished manuscript.
[14] G. Heiser. Secure embedded systems need microkernels.
USENIX ;login, 30(6):9–13, December 2005.
[15] Y. Huang, C. Kintala, N. Kolettis, and N. D. Fulton. Soft-
ware rejuvenation: Analysis, module and applications. In
Twenty-Fifth International Symposium on Fault-Tolerant
Computing, 1995.
[16] C. Karlof, N. Sastry, and D. Wagner. Cryptographic
voting protocols: A systems perspective. In Fourteenth
USENIX Security Symposium, August 2005.
[3] J. Bannet, D. W. Price, A. Rudys, J. Singer, and D. S. Wal-
lach. Hack-a-vote: Demonstrating security issues with
electronic voting systems.
IEEE Security and Privacy
Magazine, 2(1):32–37, Jan./Feb. 2004.
[17] T. Kohno, A. Stubbleﬁeld, A. D. Rubin, and D. S. Wal-
lach. Analysis of an electronic voting system. In IEEE
Symposium on Security and Privacy, pages 27–40, May
2004.
[4] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris,
A. Ho, R. Neugebauer, I. Pratt, and A. Warﬁeld. Xen
and the art of virtualization. In Proceedings of the 19th
[18] M. Kuhn. Optical time-domain eavesdropping risks of
CRT displays. In IEEE Symposium on Security and Pri-
vacy, May 2002.
USENIX Association
Security ’06: 15th USENIX Security Symposium
335
[35] M. Swift, M. Annamalai, B. Bershad, and H. Levy.
Recovering device drivers.
In Proceedings of the 6th
ACM/USENIX Symposium on Operating System Design
and Implementation, December 2004.
[36] M. Swift, B. Bershad, and H. Levy. Improving the reli-
ability of commodity operating systems. In Proceedings
of the 19th ACM Symposium on Operating Sstems Princi-
ples (SOSP 2003), October 2003.
[37] W. van Eck. Electromagnetic radiation from video display
units: An eavesdropping risk? Computers & Security, 4,
1985.
[38] D. Wagner, D. Jefferson, M. Bishop, C. Karlof, and
N. Sastry. Security analysis of the Diebold AccuBa-
sic interpreter. California Secretary of State’s Voting
Systems Technology Assessment Advisory Board (VS-
TAAB), February 2006.
[39] C. Weissman. MLS-PCA: A high assurance security ar-
chitecture for future avionics. In Proceedings of the 19th
Annual Computer Security Applications Conference (AC-
SAC 2003), 2003.
[40] A. Whitaker, M. Shaw, and S. Gribble. Denali: A scal-
In 10th ACM SIGOPS European
able isolation kernel.
Workship, September 2002.
[41] I.-L. Yen and R. Paul. Key applications for high-
assurance systems. IEEE Computer, 31(4):35–45, April
1998.
[19] G. Leavens and Y. Cheon.
Design by contract
with JML. ftp://ftp.cs.iastate.edu/pub/
leavens/JML/jmldbc.pdf.
[20] J. Liedtke. Toward real microkernels. Communications
of the ACM, 39(9):70, September 1996.
[21] D. McCullough. Noninterference and the composability
In IEEE Symposium on Security
of security properties.
and Privacy, May 1988.
[22] R. Mercuri. Electronic Vote Tabulation Checks & Bal-
ances. PhD thesis, School of Engineering and Applied
Science of the University of Pennsylvania, 2000.
[23] R. Mercuri. A better ballot box?
IEEE Spectrum,
39(10):46–50, October 2002.
[24] D. Mertz.
XML Matters:
Practical XML data
design
systems.
http://www-128.ibm.com/developerworks/
xml/library/x-matters36.html, June 2004.
and manipulation
for
voting
[25] D. Molnar, T. Kohno, N. Sastry, and D. Wagner. Tamper-
evident, history-independent, subliminal-free data struc-
tures on PROM storage -or- How to store ballots on a vot-
ing machine (extended abstract). In IEEE Symposium on
Security and Privacy, May 2006.
[26] C. A. Neff. A veriﬁable secret shufﬂe and its applica-
tion to e-voting.
In 8th ACM Conference on Computer
and Communications Security (CCS 2001), pages 116–
125, November 2001.
[27] C. A. Neff. Practical high certainty intent veriﬁcation
for encrypted votes. http://www.votehere.net/
vhti/documentation, October 2004.
[28] N. Provos, M. Friedl, and P. Honeyman. Preventing priv-
ilege escalation. In Proceedings of the 12th USENIX Se-
curity Symposium, August 2003.
[29] RABA Innovative Solution Cell. Trusted agent report
Diebold AccuVote-TS voting system, January 2004.
[30] M. Rajagopalan, S. Debray, M. Hiltunen, and R. Schlicht-
ing. Automated operating system specialization via bi-
nary rewriting. Technical Report TR05-03, University of
Arizona, February 2005.
[31] R. Rashid Jr., A. Tevanian, M. Young, M. Young,
D. Golub, R. Baron, D. Black, W. Bolosky, and J. Chew.
Machine-independent virtual memory management for
paged uniprocessor and multiprocessor architectures. In
Proceedings of the 2nd Symposium on Architectural Sup-
port for Programming Languages and Operating Systems
(ASPLOS), October 1987.
[32] J. Rushby. Design and veriﬁcation of secure systems.
In Proceedings of the 8th ACM Symposium on Operating
Systems Principles (SOSP), December 1981.
[33] Science Applications International Corporation (SAIC).
Risk assessment report Diebold AccuVote-TS voting sys-
tem and processes, September 2003.
[34] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla.
SWAtt: Software-based attestation for embedded devices.
In Proceedings of the IEEE Symposium on Security and
Privacy, May 2004.
336
Security ’06: 15th USENIX Security Symposium
USENIX Association