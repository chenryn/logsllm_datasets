以上排序代码调用方法为
void sort() {
vector nums = {1,3,5,7,2,6,4,8,9,2,8,7,6,0,3,5,9,4,1,0} ;
vector tenp(nums.size());
sort (nums.begin() , nums.end ()) ;
quick_sort(nums, O, nums.size());
merge_sort(nums, O, nums,size(), temp);
insertion_sort (nums, nums.size());
bubble_sort (nums, nums .size());
selection_sort (nums, nums.size ()) ;
5.2快速选择
215.Kth Largest Element in an Array
题目描述
在一个未排序的数组中，找到第k大的数字。
输人输出样例
输入一个数组和一个目标值k，输出第k大的数字。题目默认一定有解。
Input: [3,2,1,5,6,4] and k = 2
Dutput: 5
题解
快速选择一般用于求解k-hElemen润题，可以在O（n）时间复杂度，O（1）空间复杂度完成求
解工作。快速选择的实现和快速排序相似，不过只需要找到第k大的枢（pivot）即可，不需要对
其左右再进行排序。与快速排序一样，快速选择一般需要先打乱数组，否则最坏情况下时间复杂
度为O(n²)，我们这里为了方便省略掉了打乱的步骤。
//主函数
int findKthLargest(vector& nums, int k) {
int 1 = 0, r = nums.size() - 1, target = nums.size() - k;
while (1 & nums, int 1, int r) {
int i = 1 + 1, j - r;
while (true){
while(i= nums[1]) {
--j;
if (i >= j) {
break;
svap(nums [i], nums [j]) ;
上
svap(nums[1], nums [j]);
F
return j;
5.3桶排序
347.Top K Frequent Elements (Medium)
题目描述
给定一个数组，求前k个最额繁的数字。
输人输出样例
输入是一个数组和一个目标值k。输出是一个长度为k的数组。
Input: nums = [1,1,1,1,2,2,3,4], k = 2
Output:[1,2]
在这个样例中，最频繁的两个数是1和2
题解
顾名思义，排序的意思是为每个值设立一个桶，桶内记录这个值出现的次数（或其它属
性），然后对桶进行排序。针对样例来说，我们先通过桶排序得到三个桶[1.2,3.4]，它们的值分别
为[4,2.1,1]，表示每个数字出现的次数。
---
## Page 28
5.4练习
23/143 
紧接着，我们对桶的频次进行排序，前k大个桶即是前k个频繁的数。这里我们可以使用各种
排序算法，甚至可以再进行一次桶排序，把每个旧桶根据频次放在不同的新桶内。针对样例来说，
因为目前最大的频次是4，我们建立[1.2.3.4]四个新桶，它们分别放入的旧桶为[[3.4].[2].□[1]，
表示不同数字出现的频率。最后，我们从后往前遍历，直到找到k个旧桶。
vector topKFrequent(vector& nums, int k) {
unordered_map counts;
int max_count = 0;
for (const int & num:nums){
max_count = max(max_count, ++counts [num] );
y
vector> buckets (max_count + 1);
buckets [p.second] . push_back (p.first) ;
：
vector ans;
for （int i = max_count; i >= O && ans.size() 2（遍历更深一层的左子节点）->4（遍历更深一层的左子节点）->2（无子节点，返回
父结点）->1（子节点均已完成遍历，返回父结点）->3（遍历更深一层的右子节点）->1（无子节
点，返回父结点）->结束程序（子节点均已完成遍历）。如果我们使用栈实现，我们的栈顶元素
的变化过程为1->2->4->3。
深度优先搜索也可以用来检测环路：记录每个遍历过的节点的父节点，若一个节点被再次遍
历且父节点不同，则说明有环。我们也可以用之后会讲到的拓扑排序判断是否有环路，若最后存
在入度不为零的点，则说明有环。
有时我们可能会需要对已经搜索过的节点进行标记，以防止在遍历时重复搜索某个节点，这
种做法叫做状态记录或记忆化（memoization）。
695.Max Area of Island (Easy)
题目描述
给定一个二维的0-1矩阵，其中0表示海洋，1表示陆地。单独的或相邻的陆地可以形成岛
屿，每个格子只与其上下左右四个格子相邻。求最大的岛屿面积。
---
## Page 30
6.2深度优先搜索
25/143 -
输人输出样例
输入是一个二维数组，输出是一个整数，表示最大的岛的面积。
Input:
[[1,0,1,1,0,1,0,1],
[1,0,1,1,0,1,1,1],
[0,0,0,0,0,0,0,1]]
Output: 6
最大的岛屿面积为6，位于最右侧。
题解
此题是十分标准的搜索题，我们可以拿来练手深度优先搜索。一般来说，深度优先搜索类型
的题可以分为主函数和辅函数，主函数用于遍历所有的搜索位置，判断是否可以开始搜索，如果
可以即在辅函数进行搜索。辅函数则负责深度优先搜索的递归调用。当然，我们也可以使用栈
（stack）实现深度优先搜索，但因为栈与递归的调用原理相同，而递归相对便于实现，因此刷题时
笔者推荐使用递归式写法，同时也方便进行回溯（见下节）。不过在实际工程上，直接使用栈可
能才是最好的选择，一是因为便于理解，二是更不易出现递归栈满的情况。我们先展示使用栈的
写法。
vector direction{1, 0, 1, 0, -1};
int maxArea0fIsland(vector>& grid) {
 x 0 =xe x ‘0 : (）z[]xm -u *()zpx -w
for (int i = 0; i > island;
island.push({i, j));
uhile (!island.empty()）
auto [r, c] = island.top();
island.pop() ;
for (int k = 0; k = 0 & x = 0 &k y  direction{-1, 0,1, 0, -1};
//主函数
int maxArea0fIsland(vector>& grid){
if (grid.empty() 1l grid[0] .empty()) return 0;
int max_area = 0;
for (int  - O; i >& grid,int r, int c) {
if (grid[x][c] == 0) return 0;
grid[x] [c] = 0;
int x, y, area = 1;
for (int i = 0; i = 0 && x = 0 && y >& grid) {
if (grid.empty() 1l grid[0] .empty()) return 0;
int max_area = 0;
for (int i = O; i >& grid,int r, int c) {
if (r = grid.size() 11
c = grid[0] .size() 11 grid[r] [c] == 0) {
return 0;
---
## Page 32
6.2深度优先搜索
27/143 -
grid[x][c] = 0;
return 1 + dfs(grid, r + 1, c) + dfs(grid, r - 1, c) +
dfs(grid, r, c + 1) + dfs(grid, r, c - 1) ;
547.Friend Circles (Medium)
题目描述
给定一个二维的0-1矩阵，如果第（.J位置是1，则表示第i个人和第”个人是朋友。已知
朋友关系是可以传递的，即如果a是b的朋友，b是c的朋友，那么a和c也是朋友，换言之这
三个人处于同一个朋友圈之内。求一共有多少个朋友圈，
输人输出样例
输入是一个二维数组，输出是一个整数，表示朋友圈数量。因为朋友关系具有对称性，该二
维数组为对称矩阵。同时，因为自已是自己的朋友，对角线上的值全部为1，
[[1,1,0],
Input :
[1,1,0],
[0,0,1]]
Output: 2
在这个样例中，[1,2]处于一个朋友圈，[3]处于一个朋友圈。
题解
对于题目695，图的表示方法是，每个位置代表一个节点，每个节点与上下左右四个节点相
邻。而在这一道题里面，每一行（列）表示一个节点，它的每列（行）表示是否存在一个相邻节
点。因此题目695拥有mXn个节点，每个节点有4条边：而本题拥有n个节点，每个节点最多
有n条边，表示和所有人都是朋友，最少可以有1条边，表示自已与自已相连。当清楚了图的表
示方法后，这道题与题目695本质上是同一道题：搜索朋友圈（岛屿）的个数（最大面积）。我
们这里采用递归的第一种写法。
//主函数
int findCirclelum(vector>& friends){
int n = friends.size(), count = 0;
vector visited(n, false);
for (int i = 0; i >& friends, int i, vector& visited) {
---
## Page 33
6.2深度优先搜索
28/143 -
visited[i] = true;
for (int k = O; k < friends.size(); +k) {
if (friends[i] [k] == 1 && !visited[k]) {
dfs(friends, k, visited) ;
417.Pacific Atlantic Water Flow (Medium)
题目描述
给定一个二维的非负整数矩阵，每个位置的值表示海拔高度。假设左边和上边是太平洋，右
边和下边是大西洋，求从哪些位置向下流水，可以流到太平洋和大西洋。水只能从海拔高的位置
流到海拔低或相同的位置。
输人输出样例
输入是一个二维的非负整数数组，表示海拔高度。输出是一个二维的数组，其中第二个维度
大小固定为2，表示满足条件的位置坐标。
Input :
太平洋
1
2.
(5)*
3
2
3
(4)(4)*
-(6) (7) 1
2
4
(5)
1
*
4
5
(5)11
4*
2
*
*
*
*
大西洋
0utput: [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]