defined as
L2 :=
stmt2 := (𝐺, 𝐾, 𝐻0, 𝐻1)
(cid:110)(𝐺, 𝐾, 𝐻0, 𝐻1)(cid:12)(cid:12)(cid:12)∃ 𝑠, 𝜌 s.t. 𝐻0 = 𝐺𝑠·2−𝜌
𝑖,0 and 𝐻1 :=𝛼
where 𝐻0 :=𝛼
𝑖=1 𝑐2𝑖−1
• Language L3 contains statements
𝑖=1 𝑐2𝑖−1
𝑖,1
AND 𝐻1 = 𝐾𝑠·2−𝜌(cid:111) ,
· 𝑍−1
1 .
stmt3 := (𝐺, 𝐾, ˜𝐺, ˜𝐾, {𝑐𝑖,0, 𝑐𝑖,1, ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼]),
defined as
L3 :=
(𝐺, 𝐾, ˜𝐺, ˜𝐾)
{𝑐𝑖,0, 𝑐𝑖,1}𝑖∈[𝛼]
{ ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼]
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
AND
∃ {𝑠𝑖, ˜𝑠𝑖, 𝜌𝑖 }𝑖∈[𝛼] s.t.
(𝑐𝑖,0, 𝑐𝑖,1) = (𝐺𝑠𝑖·2−𝜌𝑖 , 𝐾𝑠𝑖·2−𝜌𝑖 )
( ˜𝑐𝑖,0˜,𝑐𝑖,1) = ( ˜𝐺 ˜𝑠𝑖 , ˜𝐾 ˜𝑠𝑖)
(𝑐𝑖,0, 𝑐𝑖,1) = (𝐺𝑠𝑖·2−𝜌𝑖 , 𝐾𝑠𝑖·2−𝜌𝑖
( ˜𝑐𝑖,0, ˜𝑐𝑖,1) = ( ˜𝐺 ˜𝑠𝑖 , ˜𝐾 ˜𝑠𝑖 · ˜𝐺)
AND
OR
· 𝐺)
While we present individual protocols for each language, our system
will prove the conjunction of such statements. This can be achieved
by standard AND composition of sigma protocols. The protocols are
presented in Figures 6 to 8 and they assume three hash functions
H1, H2 : {0, 1}∗ → Z2𝜆 and H3 : {0, 1}∗ → (Z2𝜆)𝛼 modelled
as random oracles. These functions can be obtained by a single
random oracle via standard domain separation techniques, but for
simplicity we treat them as independent oracles. In all protocols, we
assume that the prover checks that the elements of the statements
belong to the correct groups as in standard discrete log based ZK
proofs. For instance, for elements of the class groups, one has to
check that there are squares, which can be done in polynomial time
(cf. [49]). The setup algorithm solely consists of the sampling of the
corresponding hash function, and it is therefore omitted. We recall
the following standard lemma, proven e.g. in [2].
Lemma E.1. Let 𝑈[0,𝑟] be the uniform distribution on the interval
[0, 𝑟] and 𝛽 ∈ Z. Then the statistical distance between 𝑈[0,𝑟] and
𝑈[0,𝑟] + 𝛽 is 𝛽/𝑟.
We now proceed with the analysis our protocols. We remark
that many of these proofs are already well known in the literature
(e.g. some proofs for the CL encryption scheme can be found in
[24, 26]) and we present them here only for completeness.
Theorem E.2 (Zero-knowledge). The protocol in Figure 6 satis-
fies statistical zero-knowledge in the random oracle model.
Proof of Theorem E.2. The simulator on input (crs, stmt), pic-
𝐾 ← Z𝑄 and 𝑒′ ← Z2𝜆. It then computes 𝐾′
ks 𝑡′
𝐾 /𝐾𝑒′ and
sets the random oracle H1(stmt, 𝐾′
0, 𝑡′
𝐾)
as its proof. Notice that for a randomly sampled 𝑡 in the honest
proof the statistical distance between 𝑡′
𝐾 and 𝑡 + 𝑒 · 𝑥 is 2𝜆 · ˜𝑞/𝑄
(following from Lemma E.1) which is negligible. Therefore the joint
distribution of (𝐾′
𝐾 , 𝑒′) computed by the simulator is statistically
close to computing (𝐾0, 𝑡 + 𝑒 · 𝑥, 𝑒) honestly.
□
0) := 𝑒′. It outputs 𝜋 := (𝐾′
0 := 𝐺𝑡′
0, 𝑡′
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2680PrvL1(crs, stmt, wit): The prover routine does the following:
• Sample 𝑡 ← Z𝑄, where 𝑄 = ˜𝑞 · 22𝜆, compute 𝐾0 := 𝐺𝑡
• Compute 𝑒 ← H1(stmt, 𝐾0)
• Compute 𝑡𝐾 := 𝑡 + 𝑒 · 𝑥
• Set the proof 𝜋 := (𝐾0, 𝑡𝐾 , 𝑒)
VfyL1(crs, stmt, 𝜋): The verifier routine does the following:
• Parse 𝜋 := (𝐾0, 𝑡𝐾 , 𝑒)
?
• Check if 𝑒
= H1(stmt, 𝐾0), if so continue, otherwise output 0
?
= 𝐾0 · 𝐾𝑒. If successful, output 1, else output 0.
• Check if 𝐺𝑡𝐾
Figure 6: Prover and Verifier routine for NIZK proof for statements in language L1
Theorem E.3 (Simulation Soundness). The protocol in Figure 6
satisfies simulation soundness provided the 2𝜆-low order assumption
and the strong root assumption holds in G, in the random oracle
model.
Proof of Theorem E.3. In the following we assume without
loss of generality that the reduction is given ahead of time the
false statement stmt and the more general claim follows with a
polynomial loss (by guessing the right query of the adversary to
the random oracle). The proof consists of a reduction against the
2𝜆-low order assumption and the strong root assumption. Consider
a reduction R that on input G, generates crs and gives it to the
adversary A. The adversary A may query statements stmt to the
reduction and the reduction returns simulated proofs. The reduction
sets and answers random oracle queries to H1 via lazy sampling.
At some point in the execution, the adversary makes a query of the
form (stmt, 𝐾0) to the random oracle H1. The reduction forks the
execution of the game by answering with two different integers
(𝑒, 𝑒′) ← Z𝑄 such that 𝑒′ ≠ 𝑒. By the forking lemma [63], with
inverse polynomial probability the adversary outputs two accepting
proofs 𝜋 := (𝐾0, 𝑡𝐾 , 𝑒) and 𝜋′ := (𝐾0, 𝑡′
𝐾 , 𝑒′) on the statement stmt.
𝐾), (𝑒 − 𝑒′) and
𝐾 , 𝑒 − 𝑒′).
· 𝐾− 𝑒−𝑒′
The reduction computes (𝑡𝐾 − 𝑡′
𝛾 := gcd(𝑡𝐾 − 𝑡′
We denote
𝜇 := 𝐺
𝑡𝐾 −𝑡′
which is either 1 or different from 1. In the case 𝜇 ≠ 1, we clearly
have 𝜇𝛾 = 1. Given the maximum value of (𝑒 − 𝑒′) is at most 2𝜆
and 𝛾 divides (𝑒 − 𝑒′), the reduction outputs (𝜇, 𝛾) as a solution to
2𝜆-low order assumption.
𝐾
𝛾
𝛾
Now suppose that 𝜇 = 1. Let us denote 𝐸 := 𝑒−𝑒′
𝑡𝐾 −𝑡′
𝐾
𝛾
= 𝐾𝐸. We have two cases here,
𝐺
(1) In the first case we suppose that 𝐸 = 2𝜌 for some integer 𝜌. In
such that 𝐺𝑥 = 𝐾2𝜌 or
this case we can compute 𝑥 :=
equivalently 𝐺𝑥·2−𝜌
= 𝐾 as 𝐺, 𝐾 are checked to be in the correct
groups (in our applications with class groups, one checks that
𝐺 and 𝐾 are squares which means that they have odd orders).
But since stmt ∉ L1, this case is not possible.
(2) In the second case. We have for some (𝛼, 𝛽) that
𝑡𝐾−𝑡′
𝛾
𝐾
𝛾 , so that
𝛼(𝑡𝐾 − 𝑡′
𝐾) + 𝛽(𝑒 − 𝑒′) = 𝛾
which can be efficiently computed by the extended Euclidean
algorithm. Observe that
𝐾)+𝛽(𝑒−𝑒′)
𝐺𝛾 = 𝐺𝛼(𝑡𝐾−𝑡′
𝐺𝛾 = 𝐺𝛼(𝑡𝐾−𝑡′
𝐾)𝐺 𝛽(𝑒−𝑒′)
𝐺𝛾 = 𝐾𝛼(𝑒−𝑒′)𝐺 𝛽(𝑒−𝑒′)
𝐺𝛾 = (𝐾𝛼𝐺 𝛽)(𝑒−𝑒′) .
The reduction outputs (𝐾𝛼𝐺 𝛽, 𝐸) as its solution to the strong
root problem since 𝐸 is not a power of 2 or a solution to the
2𝜆-low order assumption as before. Thus we arrive at a contra-
diction, which proves the simulation soundness of the protocol.
□
Theorem E.4 (Zero-knowledge). The protocol in Figure 7 satis-
fies statistical zero-knowledge in the random oracle model.
Proof of Theorem E.4. The simulator samples 𝑡′
and 𝑒′ ← Z2𝜆. It then computes 𝐺′
𝐾𝑡′
𝐺,𝐾 /(𝐻1)𝑒′ and sets the random oracle
0 := 𝐺𝑡′
𝐺,𝐾 ← Z𝑄
0 :=
𝐺,𝐾 /(𝐻0)𝑒′ and 𝐾′
0) := 𝑒′.
It outputs the proof 𝜋 := (𝐺′
lated proof is statistically close to the honest one.
H2(stmt, 𝐺′
0, 𝐾′
𝐺,𝐾 , 𝑒′). By Lemma E.1 the simu-
0, 𝑡′
0, 𝐾′
□
Theorem E.5 (Simulation Soundness). The protocol in Figure 7
satisfies simulation soundness provided the 2𝜆-low order assumption
and the strong root assumption holds in G, in the random oracle
model.
Proof of Theorem E.5. The proof follows along the lines of the
argument for Theorem E.3 and it boils down to showing that it is
possible to extract a solution to the 2𝜆-low order assumption or the
strong root problem given two accepting transcripts with the same
first message 𝜋 := (𝐺0, 𝐾0, 𝑡𝐺,𝐾 , 𝑒) and 𝜋′ := (𝐺0, 𝐾0, 𝑡′
𝐺,𝐾 , 𝑒′).
□
Theorem E.6 (Zero-knowledge). The protocol in Figure 8 is
zero-knowledge in the random oracle model.
Proof of Theorem E.6. We describe the simulator for a single
index 𝑖 ∈ [𝛼] and the algorithm can be extended to the more
general case in a natural way. The simulator picks 𝑑𝑖,1, 𝑑𝑖,2 ← Z2𝜆,
𝑟𝑖,1, 𝑟𝑖,2 ← Z𝑄 and ˜𝑟𝑖,1, ˜𝑟𝑖,2 ← Z ˜𝑞. It then sets
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2681PrvL2(crs, stmt, wit): The prover routine does the following:
• Sample 𝑡 ← Z𝑄, where 𝑄 = ˜𝑞 · 22𝜆, compute 𝐺0 := 𝐺𝑡 and 𝐾0 := 𝐾𝑡
• Compute 𝑒 ← H2(stmt, 𝐺0, 𝐾0)
• Compute 𝑡𝐺,𝐾 := 𝑡 + 𝑒 · 𝑠
• Set the proof 𝜋 := (𝐺0, 𝐾0, 𝑡𝐺,𝐾 , 𝑒)
VfyL2(crs, stmt, 𝜋): The verifier routine does the following:
• Parse 𝜋 := (𝐺0, 𝐾0, 𝑡𝐺,𝐾 , 𝑒)
• Check if 𝑒
• Check if 𝐺𝑡𝐺,𝐾
?
= 𝐺0 · 𝐻𝑒
?
= H2(stmt, 𝐺0, 𝐾0), if so continue, otherwise output 0
0 and 𝐾𝑡𝐺,𝐾
?