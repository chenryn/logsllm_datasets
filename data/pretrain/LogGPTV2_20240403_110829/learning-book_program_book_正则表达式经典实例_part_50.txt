1译注：在美国，邮局信箱地址可以用来接收普通信件，但是无法接收稍微大一些的包裹或需要签名
的快递等，因此从网站在线购物时一般都要求提供街道地址（Streetaddress，也就是有人可以接收包
裹的住址)。
254
第4章
www.TopSage.com
---
## Page 271
讨论
下面的解释使用了宽松排列模式，所以在正则表达式中的每个有意义的空白字符都使
用反斜杠进行了转义：
#判断字符串的开始位置
(？:
#分组但是不捕获..·
Post\
匹配"Post"
(?:Office\)?
匹配（可选的）"office”
善或者...
[\·]
#
匹配"P"和一个可选的点号或空白字符
匹配“O”、一个可选的点号和一个空白字符
)?
#重复上述分组0次或1次
Box
匹配“Box”
\b
#判断单词边界的位置
正则选项：不区分大小写、和S匹配换行处
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
这个正则表达式会匹配所有下列的例子，前提是它们必须出现在一行的起始处：
·Post Office Box
·post box
·P.O.box
·POBox
·Po.box
·POBoX
·Box
虽然我们在这里已经做了很小心的处理，但是你还是可能会遇到一些误报或漏报，因
为许多人都习惯于送货方在解释地址时会比较灵活。为了消除这种风险，最好在一开
个匹配，要考虑向用户提醒一下他使用的好像是一个邮箱，但是以防万一还可以让用
户选择保留该输入。
参见
实例4.14、实例4.15和实例4.16。
4.18转换姓名格式
问题描述
你想要把人的姓名顺序从“FirstNameLastName”的格式转换为“LastName，FirstName”，
这样会方便用于对LastName按字母排序的列表中。另外你还需要处理名字的其他部分，
例如，你可以把“FirstNameMiddleNamesParticlesLastNameSuffix”转换成“LastName，
合法性验证和格式化
255
www.TopSage.com
---
## Page 272
FirstNameMiddleNamesParticlesSuffix”。
解决方案
不幸的是，使用正则表达式是不可能对姓名进行可靠分析的。正则表达式是严格的，
而姓名则是非常灵活的，即使人也可能会把它们搞错。要确定一个姓名的结构，或者
决定它应该如何按顺序排列，通常需要考虑传统、国家惯例甚至是个人喜好。然而，
如果你愿意对数据做一些假设，并且可以接受一定程度的错误率，那幺正则表达式可
以作为一个快速的解决方案。
作者有意对下面的正则表达式采用了简化处理，而没有去考虑所有的边界情况。
正则表达式
(. +?)·([^\s,]+)(,?·(?: [JS]r\.？[III?[IV)) ?S
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
替代文本
$2,·$1$3
替代文本流派：.NET、Java、JavaScript、Perl、PHP
\2,.\1\3
替代文本流派：Python、Ruby
JavaScript
function formatName （name)(
return name.replace(/^(.+?)([^\s,]+)(,?(?:[JS]r\.?1III?|IV))?$/i,
"$2，$1$3");
、
其他编程语言
如果读者希望了解在其他编程语言中如何实现这个正则表达式，请参考实例3.15中的
讲解。
讨论
首先，我们来逐个部分解释一下这个正则表达式。其中提供了注释，以便帮助解释姓
名中的哪个部分是由正则式中的某个片段来进行匹配的。因为下面这个正则式采用了
宽松排列模式，所以字面的空白字符都使用反斜杠进行了转义：
A
#判断字符串的开始位置
(
#把括号内的匹配捕获到向后引用#1中..
. +?
匹配一个或多个字符，匹配次数尽量少
）
#捕获分组的结束
1
匹配一个字面的空格字符
256
第4章
www.TopSage.com
---
## Page 273
#把括号内的匹配捕获到向后引用#2中..
[\S,]+
匹配不是空格或逗号的一个或多个字符
）
#捕获分组的结束
#把括号内的匹配捕获到向后引用#3中..
，？\
#
匹配“，"或"
(? :
分组但是不捕获...
[JS]r\.?
#
匹配"Jr"，"Jr."，"Sr”，或“Sr."
#
或者..
III?
#
匹配“II"或者"III"
或者...
IV
#
匹配“IV"
）
非捕获分组的结束
)?
#重复该分组0次或1次
$
#判断字符串的结束位置
正则选项：不区分大小写、宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
这个正则表达式会对目标数据做如下假设：
·它包含至少一个firstname和一个lastname（其他姓名部分是可选的）；
·first name应该出现在lastname之前。
.
如果姓名中包含一个后缀（sufix），那么它应该是逗号之后跟着的下列取值之一，
AI，是II，I，S，S，f，f，
另外还有一些需要考虑的事项。
正则表达式无法识别不使用连字符的复姓。例如，SachaBaronCohen会被替换为
Cohen,SachaBaron，而无法替换为正确的结果BaronCohen,Sacha。
它无法把保留在姓（familyname）之前的附加词（particle），虽然这有时候是根据
习俗或个人喜欢来决定的。例如，根据ChicagoManualofSryle（《芝加哥论文格式》）
第15版，“CharlesdeGaulle”在排序时应该被列为“deGaulle，Charles”，然而这
和《韦伯斯特传记词典》中的规定是相矛盾的。
因为定位符和S>会把匹配定位到字符串的开始和结束，所以如果整个目标文
本不能符合这个模式，那么就不会进行任何匹配。因此，如果没有找到合适的匹
配（例如，如果目标文本只包含一个名字，即使用一个单词作为其姓名），那么该
名字就会照原样返回。
下面来解释上述正则表达式是如何工作的，它使用了三个捕获分组来拆分姓名。然后
会在替代字符串中使用向后引用来重新组合这些片段。捕获分组1使用了最为灵活的
来匹配lastname。同在捕获分组1中使用的点号一样，这个
字符类的灵活性允许它匹配带读音符号的字符，以及任意其他非拉丁语字符。捕获分
组3会从一个预定义的取值列表中匹配一个可选的后缀，例如“Jr.”或“mI”。这个后
缀会同lastname分别进行处理，因为它应当出现在重新格式化之后的姓名的末尾。
我们再回来看一下捕获分组1。为什么在分组1中的点号之后跟着的是懒情的量词呢？如果分组1（它会处理可
变个数的元素，因此需要尽量匹配姓名中的更多部分）使用了贪心量词，那么分组3
（它会尝试匹配一个后缀）就不可能参与到匹配中来。分组1中的点号会一直匹配到字
符串的结束，然后因为捕获分组3是可选的，所以正则引擎就只会回溯到为分组2找
到一个匹配，然后就会宣布匹配成功。捕获分组2可以使用贪心量词，因为它的字符
类中包含更多限制，它只能匹配一个名字。
表4-2给出了一些例子，展示使用这个正则表达式和替代字符串对姓名进行格式化处
理之后的结果。
表4-2姓名的格式化
输入
输出
Robert Downey, Jr.
Downey,Robert, Jr.
John F.Kennedy
Kennedy, John F.
Scarlett O'Hara
O'Hara,Scarlett
Pepe Le Pew
Pew,Pepe Le
J.R.R.Tolkien
Tolkien, J.R.R.
Catherine Zeta-Jones
Zeta-Jones,Catherine
变体
把姓附加词列在姓名的开头
在下面的正则表达式中添加了一个片段，允许你把-个预定义列表中给定的姓附加词
输出到lastname的前面。具体来说，这个正则表达式会考虑的附加词包括“De”、“Du”、
，，，，，，，
值出现任意多次（例如，“dela”）：
(.+?)·((？:(?:D[eu] 1L[ae] ISte?\.?|V[ao]n)) *[^\s,]+)
（,?(?:[JS]r\.?1III?|IV)) ?$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
258
第4章
www.TopSage.com
---
## Page 275
$2,·$1$3
替代文本流派：.NET、Java、JavaScript、Perl、PHP
\2,\1\3
替代文本流派：Python、Ruby
4.19信用卡号码的合法性验证
问题描述
你有个任务，要给一个公司实现一个接受信用卡付账的订购表单。由于信用卡处理中
心对每次交易尝试都要收费，其中也包括失败的尝试在内，所以你想要使用一个正则
表达式来先排除掉明显不合法的信用卡号码。
这样做同样会改善客户的使用体验。在客户完成网页上的输人之后，正则式可以在瞬
间检查出比较明显的错误。相比来说，如果要访问信用卡处理中心，那么一个来回可
能需要花费10～30秒钟。
解决方案
去掉空格和连字符