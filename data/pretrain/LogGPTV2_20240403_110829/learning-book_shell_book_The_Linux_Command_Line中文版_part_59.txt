[ne@linuxbox -]$
也可以使用unset命令删除单个的数组元素：
[ne@linuxbox-]$ foo=(a b c d e f)
[ne@linuxbox-]$ echo ${foo[@]}
a b c d e f
[nellinuxbox-]$ unset 'foo[2] *
[ne@linuxbox-]$ echo ${foo[@]}
a b d e f
在这个例子中，我们删除了数组中的第三个元素，下标为2。记住，数组下标开始于0，而
不是1！也要注意数组元素必须用引号引起来为的是防止shell执行路径名展开操作。
有趣地是，给一个数组赋空值不会清空数组内容：
[ne@linuxbox -]$ foo=(a b c d e f)
[ne@linuxbox -]$ foo=
[ne@linuxbox -]$ echo $(foo[q]}
b c d e f
任何没有下标的对数组变量的引用都指向数组元素0：
[ne@linuxbox-]$ foo=(a b c d e f)
[neglinuxbox-]$ echo $(foo[@]}
a b c d e f
488
---
## Page 490
[ne@linuxbox-]$ foo=A
[ne@linuxbox-]$echo$(foo[α]}
A b c d e f
36.6关联数组
现在最新的bash版本支持关联数组了。关联数组使用字符串而不是整数作为数组索引。这种
功能给出了一种有趣的新方法来管理数据。例如，我们可以创建一个叫做“colors”的数组，并
用颜色名字作为索引。
0000=[]x
colors ["green"]="#00ff00"
0000#=,n]xoo
不同于整数索引的数组，仅仅引用它们就能创建数组，关联数组必须用带有-A选项的
declare 命令创建。
访问关联数组元素的方式几乎与整数索引数组相同：
[on]sxoto]s oqa
在下一章中，我们将看一个脚本，很好地利用关联数组，生产出了一个有意思的报告。
36.7总结
如果我们在bash手册页中搜索单词“array”的话，我们能找到许多bash在哪里会使用数组变
量的实例。其中大部分相当晦涩难懂，但是它们可能在一些特殊场合提供临时的工具。事实上
在shell编程中，整套数组规则利用率相当低，很大程度上归咎于传统Unixshell程序（比如说
sh）缺乏对数组的支持。这样缺乏人气是不幸的，因为数组广泛应用于其它编程语言，并为解
决各种各样的编程问题，提供了一个强大的工具。
数组和循环有一种天然的姻亲关系，它们经常被一起使用。该
489
---
## Page 491
for ((expr; expr; expr))
形式的循环尤其适合计算数组下标。
36.8拓展阅读
·Wikipedia上面有两篇关于在本章提到的数据结构的文章：
http://en.wikipedia.org/wiki/Scalar_(computing)
http://en.wikipedia.org/wiki/ Associative_array
490
---
## Page 492
37
奇珍异宝
已经涵盖了很多方面，但是还有许多bash特性我们没有涉及到。其中大部分特性相当毒涩，主
要对那些把bash集成到Linux发行版的程序有用处。然而还有一些特性，虽然不常用，但是
37.1组命令和子shell
bash允许把命令组合在一起。可以通过两种方式完成；要么用一个group命令，要么用一个子
shell。这里是每种方式的语法示例：
组命令：
{connandl; comnand2; [connand3; ..-] ]
子 shell:
(command1; cosmand2; [coanand3; . - .])
这两种形式的不同之处在于，组命令用花括号把它的命令包裹起来，而子shell用括号。值
得注意的是，鉴于bash实现组命令的方式，花括号与命令之间必须有一个空格，并且最后一个
命令必须用一个分号或者一个换行符终止。
那么组命令和子shell命令对什么有好处呢？尽管它们有一个很重要的差异（我们马上会接
触到），但它们都是用来管理重定向的。让我们考虑一个对多个命令执行重定向的脚本片段。
491
---
## Page 493
x·andno> output.txt
cat foo.txt >> output.txt
这些代码相当简洁明了。三个命令的输出都重定向到一个名为output.txt的文件中。使用
一个组命令，我们可以重新编写这些代码，如下所示：
{ 1s -l; echo "Listing of foo.txt"; cat foo.txt; } > output.txt
使用一个子shell是相似的：
(1s -1; echo "Listing of foo.txt*; cat foo.txt) > output.txt
使用这样的技术，我们为我们自己节省了一些打字时间，但是组命令和子shell真正闪光的
地方是与管道线相结合。当构建一个管道线命令的时候，通常把几个命令的输出结果合并成一
个流是很有用的。组命令和子shell使这种操作变得很简单：
{ 1s -1; echo "Listing of foo.txt"; cat foo.txt; 3 1 1pr
这里我们已经把我们的三个命令的输出结果合并在一起，并把它们用管道输送给命令lpr的
输入，以便产生一个打印报告。
在下面的脚本中，我们将使用组命令，看几个与关联数组结合使用的编程技巧。这个脚本，
称为array-2，当给定一个目录名，打印出目录中的文件列表，伴随着每个文件的文件所有者和
组所有者。在文件列表的末尾，脚本打印出属于每个所有者和组的文件数目。这里我们看到的
（为简单起见而缩短的）结果，是给定脚本的目录为/usr/bin的时候：
[ne@linuxbox -]$ array-2 /usr/bin
/usr/bin/2to3-2.6
root
root
/usr/bin/2to3
root
root
492
---
## Page 494
/usr/bin/a2p
root
root
/usr/bin/abrovser
root
root
/usr/bin/aconnect
root
root
/usr/bin/acpi_fakeikey
root
root
/usr/bin/acpi_listen
root
root
/usr/bin/add=apt-repository
root
root
/usr/bin/zipgrep
root
root
/usr/bin/zipinfo
root
root
/usr/bin/zipnote
root
root
/usr/bin/zip
root
root
/usr/bin/zipsplit
root
root
/usr/bin/zjsdecode
root
root
/usr/bin/zsoelin
root
root
File ovners:
daenon  : 1 file(s)
root
: 1394 file(≤) File group ovners:
crontab : 1 file(s)
daenon
: 1 file(s)
lpadnin : 1 file(s)
mai1
: 4 file(s)
mlocate : 1 file(s)
root
: 1380 file (s)
shadov
: 2 file(s)
ssh
: 1 file(s)
tty
: 2 file(s)
utnp
: 2 file(s)
这里是脚本代码列表（带有行号）：
1.
#!/bin/bash
# array-2: Use arrays to tally file ovners
declare -A files file_group file_owner groups ovners
6
if [[ ! -d “$1" ]]; then
493
---
## Page 495
9
echo "Usage: array-2 dir" >k2
9
exit 1
10
fi
11
12
op/$.u T xo
13
（T$。0 o-es）$=zouno
14
group=$(stat -c %G *$i")
15
.T$.=[.$.]s
16
file_owner [*$i"]=$ovner
17
file_group [*$i"}=$group
18
((++ouners [$owner]))
19
((++groups [Sgroup]）)
20
done
21
22
# List the collected files
23
{ for 1 in "$(files[e]}*; do
24
\d
25
"$i" $(file_ovner["$i"]} ${file_group["$i"]}
26
done } 1 sort
27
echo
28
29
# List owners
0E
echo *File ouners:"
31
{ for i in "${!ouners[a]}"; do
32
{[$]sz)$$(=） Pud
done }1sort
34
echo
35
36
# List groups
37
38
 for 1 in "${!groups[@]}"; do
6E
printf "%10s: %5d file(s)\n"*$i* ${groups["$i*]}
40
done } 1 sort
让我们看一下这个脚本的运行机制：
行5：关联数组必须用带有-A选项的declare命令创建。在这个脚本中我们创建了如下五
个数组：
files包含了目录中文件的名字，按文件名索引
494
---
## Page 496
file_group包含了每个文件的组所有者，按文件名索引
file_owner包含了每个文件的所有者，按文件名索引
groups包含了属于索引l的组的文件数目
owners包含了属于索引的所有者的文件数目
行7-10：查看是否一个有效的目录名作为位置参数传递给程序。如果不是，就会显示一条
使用信息，并且脚本退出，退出状态为1
行12-20：循环遍历目录中的所有文件。使用stat命令，行13和行14抽取文件所有者和
组所有者，并把值赋给它们各自的数组（行16，17），使用文件名作为数组索引。同样地，文件
名自身也赋值给files数组。
行18-19：属于文件所有者和组所有者的文件总数各自加1。
行22-27：输出文件列表。为做到这一点，使用了“${array[@]}”参数展开，展开成整个的
数组元素列表，并且每个元素被当做是一个单独的词。从而允许文件名包含空格的情况。也要
道输送给sort命令的输入。这是必要的，因为展开的数组元素是无序的。
行29-40：这两个循环与文件列表循环相似，除了它们使用“s{！array[@])”展开，展开成数
组索引的列表而不是数组元素的。
37.1.1进程替换
虽然组命令和子shell看起来相似，并且它们都能用来在重定向中合并流，但是两者之间有一个
很重要的不同之处。然而，一个组命令在当前shell中执行它的所有命令，而一个子shell（顾
名思义）在当前shell的一个子副本中执行它的命令。这意味着运行环境被复制给了一个新的
shell实例。当这个子shell退出时，环境副本会消失，所以在子shell环境（包括变量赋值）中
的任何更改也会消失。因此，在大多数情况下，除非脚本要求一个子shell，组命令比子shell
更受欢迎。组命令运行很快并且占用的内存也少。
我们在第20章中看到过一个子shell运行环境问题的例子，当我们发现管道线中的一个
read命令不按我们所期望的那样工作的时候。为了重现问题，我们构建一个像这样的管道线：
echo $REPLY
该REPLY变量的内容总是为空，是因为这个read命令在一个子shell中执行，所以当该
子shell终止的时候，它的REPLY副本会被毁掉。因为管道线中的命令总是在子shell中执行
495
---