### 使用 `unset` 命令删除数组元素

在 Linux 系统中，可以使用 `unset` 命令来删除单个数组元素。例如：

```bash
[ne@linuxbox-]$ foo=(a b c d e f)
[ne@linuxbox-]$ echo ${foo[@]}
a b c d e f
[ne@linuxbox-]$ unset 'foo[2]'
[ne@linuxbox-]$ echo ${foo[@]}
a b d e f
```

在这个例子中，我们删除了数组中的第三个元素（下标为 2）。需要注意的是，数组的下标从 0 开始，而不是 1。同时，数组元素需要用引号括起来，以防止 shell 进行路径名展开。

有趣的是，给一个数组赋空值并不会清空数组内容：

```bash
[ne@linuxbox-]$ foo=(a b c d e f)
[ne@linuxbox-]$ foo=
[ne@linuxbox-]$ echo ${foo[@]}
a b c d e f
```

任何没有下标的对数组变量的引用都指向数组的第一个元素（即下标为 0 的元素）：

```bash
[ne@linuxbox-]$ foo=(a b c d e f)
[ne@linuxbox-]$ echo ${foo[0]}
a
```

### 关联数组

最新版本的 Bash 支持关联数组，这种数组使用字符串作为索引，而不是整数。关联数组提供了一种新的数据管理方法。例如，我们可以创建一个名为 `colors` 的数组，并用颜色名称作为索引：

```bash
declare -A colors
colors["green"]="#00ff00"
```

与整数索引数组不同，关联数组必须使用带有 `-A` 选项的 `declare` 命令来创建。访问关联数组元素的方式与整数索引数组类似。

在下一章中，我们将看到一个脚本，该脚本利用关联数组生成了一个有趣的报告。

### 总结

如果我们在 Bash 手册页中搜索“array”，我们会发现许多 Bash 使用数组变量的例子。尽管其中大部分相当晦涩难懂，但在某些特殊情况下它们提供了有用的工具。实际上，在 Shell 编程中，数组的使用率相对较低，这主要是由于传统的 Unix Shell（如 sh）缺乏对数组的支持。然而，这是不幸的，因为数组在其他编程语言中广泛应用，并且是解决各种编程问题的强大工具。

数组和循环之间有一种天然的关系，它们经常一起使用。特别是 `for ((expr; expr; expr))` 形式的循环非常适合计算数组下标。

### 拓展阅读

- Wikipedia 上有关于本章提到的数据结构的文章：
  - [Scalar (computing)](http://en.wikipedia.org/wiki/Scalar_(computing))
  - [Associative array](http://en.wikipedia.org/wiki/Associative_array)

### 组命令和子 Shell

Bash 允许将多个命令组合在一起执行。可以通过两种方式实现：组命令或子 Shell。以下是每种方式的语法示例：

- **组命令**：
  ```bash
  { command1; command2; [command3; ...] }
  ```

- **子 Shell**：
  ```bash
  (command1; command2; [command3; ...])
  ```

这两种形式的区别在于，组命令使用花括号并将命令包裹起来，而子 Shell 使用圆括号。值得注意的是，花括号与命令之间必须有一个空格，并且最后一个命令必须用分号或换行符终止。

那么，组命令和子 Shell 对什么有好处呢？尽管它们有一个重要的区别（我们稍后会讨论），但它们都用于管理重定向。考虑一个需要对多个命令进行重定向的脚本片段：

```bash
ls -l > output.txt
echo "Listing of foo.txt" >> output.txt
cat foo.txt >> output.txt
```

这些代码非常简洁明了。三个命令的输出都被重定向到名为 `output.txt` 的文件中。使用组命令，我们可以这样重写这些代码：

```bash
{ ls -l; echo "Listing of foo.txt"; cat foo.txt; } > output.txt
```

使用子 Shell 是类似的：

```bash
(ls -l; echo "Listing of foo.txt"; cat foo.txt) > output.txt
```

通过这种方式，我们可以节省一些打字时间，但组命令和子 Shell 在与管道结合时真正发挥作用。当构建管道命令时，通常需要将几个命令的输出合并成一个流。组命令和子 Shell 使这种操作变得简单：

```bash
{ ls -l; echo "Listing of foo.txt"; cat foo.txt; } | lpr
```

这里，我们将三个命令的输出合并在一起，并将其通过管道传递给 `lpr` 命令，以生成打印报告。

在下面的脚本中，我们将使用组命令，并展示一些与关联数组结合使用的编程技巧。这个脚本称为 `array-2`，它接受一个目录名作为参数，打印出该目录中的文件列表及其所有者和组信息。在文件列表末尾，脚本还会打印出每个所有者和组拥有的文件数量。以下是脚本的部分结果示例（为了简洁起见进行了简化）：

```bash
[ne@linuxbox-]$ array-2 /usr/bin
/usr/bin/2to3-2.6   root   root
/usr/bin/2to3       root   root
...
File owners:
daemon: 1 file(s)
root  : 1394 file(s)
File group owners:
crontab: 1 file(s)
daemon: 1 file(s)
lpadmin: 1 file(s)
mail  : 4 file(s)
mlocate: 1 file(s)
root  : 1380 file(s)
shadow: 2 file(s)
ssh   : 1 file(s)
tty   : 2 file(s)
utmp  : 2 file(s)
```

以下是脚本代码列表（带有行号）：

```bash
1. #!/bin/bash
2. # array-2: Use arrays to tally file owners
3. declare -A files file_group file_owner groups owners
4. if [[ ! -d "$1" ]]; then
5.     echo "Usage: array-2 dir" >&2
6.     exit 1
7. fi
8. 
9. for i in "$1"/*; do
10.    owner=$(stat -c %U "$i")
11.    group=$(stat -c %G "$i")
12.    files["$i"]=$i
13.    file_owner["$i"]=$owner
14.    file_group["$i"]=$group
15.    ((++owners[$owner]))
16.    ((++groups[$group]))
17. done
18. 
19. # List the collected files
20. { for i in "${!files[@]}"; do
21.     echo "$i ${file_owner[$i]} ${file_group[$i]}"
22. done } | sort
23. echo
24. 
25. # List owners
26. echo "File owners:"
27. { for i in "${!owners[@]}"; do
28.     printf "%-10s: %5d file(s)\n" "$i" "${owners[$i]}"
29. done } | sort
30. echo
31. 
32. # List groups
33. echo "File group owners:"
34. { for i in "${!groups[@]}"; do
35.     printf "%-10s: %5d file(s)\n" "$i" "${groups[$i]}"
36. done } | sort
```

让我们看一下这个脚本的运行机制：

- **第 3 行**：声明五个关联数组：
  - `files` 包含目录中的文件名，按文件名索引。
  - `file_group` 包含每个文件的组所有者，按文件名索引。
  - `file_owner` 包含每个文件的所有者，按文件名索引。
  - `groups` 包含属于每个组的文件数量，按组名索引。
  - `owners` 包含属于每个所有者的文件数量，按所有者名索引。

- **第 4-7 行**：检查是否传递了一个有效的目录名作为位置参数。如果不是，则显示使用信息并退出，退出状态为 1。

- **第 9-17 行**：遍历目录中的所有文件。使用 `stat` 命令提取文件所有者和组所有者，并将值赋给相应的数组（第 13 和 14 行），使用文件名作为数组索引。同时，文件名本身也赋值给 `files` 数组。

- **第 18-22 行**：输出文件列表。使用 `${array[@]}` 参数展开，将整个数组元素列表展开为单独的词，从而允许文件名包含空格的情况。输出结果通过管道传递给 `sort` 命令进行排序。

- **第 25-29 行** 和 **第 32-36 行**：这两个循环类似于文件列表循环，但使用 `${!array[@]}` 展开，将数组索引展开为列表，而不是数组元素。

### 进程替换

虽然组命令和子 Shell 看起来相似，并且都可以用于在重定向中合并流，但两者之间有一个重要区别。组命令在当前 Shell 中执行其所有命令，而子 Shell 在当前 Shell 的一个子副本中执行命令。这意味着运行环境被复制到一个新的 Shell 实例中。当子 Shell 退出时，环境副本会消失，因此在子 Shell 环境中的任何更改也会消失。因此，在大多数情况下，除非脚本明确要求使用子 Shell，否则组命令比子 Shell 更受欢迎。组命令运行速度快且占用内存少。

我们在第 20 章中看到了一个子 Shell 运行环境问题的例子，当我们发现管道中的 `read` 命令不按预期工作时。为了重现问题，我们可以构建如下管道：

```bash
echo $REPLY
```

`REPLY` 变量的内容总是为空，因为 `read` 命令在一个子 Shell 中执行，当子 Shell 终止时，它的 `REPLY` 副本会被销毁。由于管道中的命令总是在子 Shell 中执行，因此这种行为是预料之中的。