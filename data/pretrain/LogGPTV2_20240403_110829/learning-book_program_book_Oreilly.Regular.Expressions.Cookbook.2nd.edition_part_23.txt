As explained in the previous recipe, the exec() method of a regular expression object
returms an array with details about the match. Element zero in the array holds the overall
3.9 Retrieve Partef the Matched Text | 159
---
## Page 176
regex match. Element one holds the text matched by the first capturing group, element
rwo stores the second group's match, etc.
If the regular expression cannot match the string at all, regexp-exec () returns nul1.
PHP
Recipe 3.7 explains how you can get the text matched by the regular expression by
passing a third parameter to preg_match(). When preg_match() returms 1, the parameter
is filled with an array. Element zero holds a string with the overall regex match.
Element one holds the text marched by the first capturing group, element two the text
from the second group, and so on. The length of the array is the number of capturing
groups plus one. Array indexes correspond to backreference numbers in the regular
expression.
If you specify the PREG_oFFSET_CAPTURE constant as the fourth parameter, as explained
inthe previousreipe, then thelengthofthearayisstill henumberofcapuringgroups
plus one. But instead of holding a string at each index, the array will hold subarrays
with two elements. Subelement zero is the string with the text matched by the overall
regex or the capturing group. Subelement one is an integer that indicates the position
in the subject string at which the matched text starts.
Perl
When the pattern-matching operator m// finds a match, it sets several special variables.
Those include the numbered variables $1, $2, $3, etc., which hold the part of the string
matched by the capturing groups in the regular expression.
Python
The solution to this problem is almost identical to the one in Recipe 3.7. Instead of
calling group) without any parameters, we specify the number of the capruring group
we're interested in. Call group(1) to get the text matched by the first capruring group,
Suumdeo 66 o1 dn siuoddns uou uo os pue ^dnou8 puooas aq 1og (z)dnox8
groups. Group number O is the overall regular expression match. If you pass a number
greater than the number of capruring groups in your regular expresson, then group()
raises an IndexError exception. If the group number is valid but the group did not
participate in the regex match, group() rerums None.
You can pass multiple group numbers to group() to get the text matched by several
capturing groups in one call. The result will be a list of strings.
If you want to retrieve a tuple with the text matched by althe capruring groups, you
can call the groups() method of Matchobject. The tuple will hold None for groups that
did not participate in the match. If you pass a parameter to groups( ), that value is used
instead of None for groups that did not participate in the match.
160 | Chapter3: Programming with RegularExpressions
---
## Page 177
If you want a dictionary instead of a tuple with the text matched by the capturing
groups, call groupdict() instead of groups(). You can pass a parameter to
groupdict() to put something other than None in the dictionary for groups that did not
participate in the match.
Ruby
Recipe 3.8 explains the $α variable and the MatchData object. In an array context, this
object evaluates to an array with the text matched by all the capruring groups in your
regular expression. Capruring groups are numbered starting at 1, just like backrefer-
ences in the regular expression. Element o in the array holds the overall regular ex-
pression match.
$1, $2, and beyond are special read-only variables. $1 is a shortcut to $~[1], which holds
the text matched by the first capturing group. $2 retrieves the second group, and so on.
Named Capture
If your regular expression uses named capruring groups, you can use the group's name
to retrieve its match in your code.
C#
For quick one-off matches, you can use the static call:
“Buxstsaqnsuoe*xatag = uasnsax Sutxs
*http://(?[a-20-9. -]+)°).Groups[°domain"] .Value;
To use the same regex repeatedly, construct a Regex object:
Regex regex0bj = new Regex(*http://(?[a-z0-9 -]+)°);
antea*[uteuop,]sdnox(8uxsoaqns)uptew fqoxalax = gugxstnsax 8utxs
In C#, there's no real difference in the code for getting the Group object for a named
group compared with a numbered group. Instead ofindexing the Groups collection with
an integer, index it with a string. Also in this case, .NET will not throw an exception if
the group does not exist. Match, Groups[*nosuchgroup* ]. Success merely returns false.
VB.NET
For quick one-off matches, you can use the static call:
Dim ResultString = Regex.Match(SubjectString,
an[eA*(ureuop_)sdnox((+[-6-0z-e])//:du
To use the same regex repeatedly, construct a Regex object:
Dim Regex0bj As New Regex("http://(?[a-z0-9. -]+)")
nte*(,ueuop,)sdnox(uxsoaans)uoewaoxaag = utxstnsa wa
3.9 Retrieve Partef the Matched Text | 161
---
## Page 178
In VB.NET, there’s no real difference in the code for gerting the Group object for a named
group compared with a numbered group. Instead of indexing the Groups collection with
an integer, index it with a string. Also in this case, .NET will not throw an exception if
the group does not exist. Match, Groups(*nosuchgxoup*) . Success merely returns False.
Java
String resultString = null;
((+[-*6-oz-e])//:d4au,)atduo*uxaed = xa8ax uxated
Matcher regexMatcher = regex,matcher(subjectString);
1f (regexMatcher find())(
resultString = regexMatcher group(*domain°);
Java 7 adds support for named capturing groups. It also adds an overload to the
Matcher.group () method that takes the name of a capturing group as its parameter, and
retums the text matched by that capturing group. It throws an I1legalArgumentExcep
tion if you pass the name of a group that does not exist.
overloads. If you want to get the start or the end of a named capuring group, you have
Unfortunately, the Matcher,start() and Matcher.end() methods do not have similar
to reference it by its number. Java numbersboth named and unnamedcapruring groups
from left to right. The groupO, startO, and end() methods of the Matcher class all take
one optional parameter. Without this parameter, or with this parameter set to zero,
you get the match or positions of the whole regex match.
XRegExp
var match = XRegExp.exec(subject,
var result;
xRegExp(*http://(?[a-z0-9. -]+)"));
if (match){
}else {
result = match,donain;
result = *";
XRegExp extends JavaScript’s regular expression syntax with named capture. XReg
Exp-exec() adds a property for each named capruring group to the natch object it re-
tums, allowing you to easily reference each group by name.
PHP
1f (preg_match(*%http://(?P[a-z0-9. - ]+)%′, $subject, $groups)) {
[,uteuop.]sdnox8s = 4Tnsaxs
}else {
$result = '';
162 | Chapter 3: Programming with RegularExpressions
---
## Page 179
If your regular expression has named capturing groups, then the array assigned to
$groups is an associative array. The text matched by each named capruring group is
added to the array twice. You can retrieve the matched text by indexing the array with
the overall regex match, whereas both $groups[1] and $groups[ ' domain ] store the text
either the group’s number or the group’s name. In the code sample, Sgroups[o] stores
matched by the regular expression’s only capruring group.
Perl
1f ($subject =~ ‘!http://(?[a-z0-9.-]+)%!) {
$result = $+{'domain′);
}else{
$result = *';
saons qseq +g u1 0t' uorsian um Suueis sdnou8 Suumadeo poueu suoddns 1ad
the text matched by all named capruring groups. Perl numbers named groups along
with numbered groups. In this example, both $1 and $+{nane} store the text matched
by the regular expression’s only capruring group.
Python
matchob] = re.search(*http://(?P[a-z0-9. - ]+)°, subject)
if matchobj:
result = matchobj -group(°domain*)
else:
result = *"
If your regular expression has named capturing groups, you can pass the group's name
instead of its number to the group() method.
Ruby
os[e 1I xesuks uojssadxa reqn8au aq1 oi aundeo paueu 1oj uoddns sppe 6°[ Kqn8
extends the $α variable and the Matchbata object explained in Recipe 3.8 to support
named capture. $°[*nane*] or matchobj[*nane*] returns the text matched by the named
group “name." Callmatchobj.begin("name”) and matchobj ,end(*nane*) to retrieve the
beginning and ending positions of the match of a named group.
See Also
Recipe 2.9 explains numbered capruring groups.
Recipe 2.11 explains named capturing groups.
3.9 Retrieve Partef the Matched Text | 163
---
## Page 180
3.10Retrievea ListofAll Matches
Problem
All the preceding recipes in this chapter deal only with the first match that a regular
jeq uorssaadxa 1eqnBau e *saseo Kueu ul sng Buus ioofqns aq u! puy ueo uoissaudx3
partially matches a string can find another match in the remainder of the string. And
there may be a third match after the second, and so on. For example, the regex ^d+)
can find six matches in the subject string The lucky nunbers are 7, 13, 16, 42, 65,
and 99: 7, 13, 16, 42, 65, and 99.
You want to retrieve the list of all substrings that the regular expression finds when it
is applied repeatedly to the remainder of the string, after each match.
Solution
C#
You can use the static call when you process only a small number of strings with the
same regular expression:
MatchCollection natchlist = Regex.Matches(subjectString, @"\d+°);
Construct a Regex object if you want to use the same regular expression with a large
number of strings:
(+p\@)xa3ay mau =[qoxa8a1 xa8ag
VB.NET
You can use the static call when you process only a small number of strings with the
same regular expression:
Dim MatchList = Regex.Matches(SubjectString, *\d+*)
al e uia uoissaudxa 1eqnau aues au asn on suem no. j! iafqo xaag t ionsuo
number of strings:
Dim RegexObj As New Regex("\d+*)
Dim MatchList = RegexObj .Matches (SubjectString)
Java
List resultList = nen ArrayList();
Pattern regex = Pattern.compile("\\d+*); 
while (regexMatcher,find()) {
resultList,add(regexMatcher.group());
164 | Chapter 3: Programming with RegularExpressions
---
## Page 181
JavaScript
var list = subject,match(/\d+/g);
PHP
preg_match_al1(*/\d+/', $subject, $result, PREG_PATTERN_oRDER);
$result = $result[o];
Perl
@result = $subject =~ m/\d+/g;
This only works for regular expressions that don’r have capruring groups, so use
noncapturing groups instead. See Recipe 2.9 for details.
Python
If you process only a small number of strings with the same regular expression, you can
use the global function:
result = re.findall(r*\d+*, subject)
To use the same regex repeatedly, use a compiled object:
reobj = re.conpile(x*\d+")
result = reobj.findall(subject)
Ruby
result = subject,scan(/\d+/)
Discussion
NET
The Matches () method of the Regex class applies the regular expression repeatedly to
holds allthe matches. The subject string is always thefirst parameter, This is the sting
the string, until all matches have been found. It returms a MatchCollection object that
in which the regular expression will ry to find a match. The first parameter must not
be null. Otherwise, Matches() will throw an ArgumentNullException.
If you want to get the regex matches in only a small number of srings, you can use the
static overload of Matches (). Pass your subject string as the first parameter and your
regular expression as the second parameter. You can pass regular expression options
as an optional third parameter.
If you’ll be processing many strings, construct a Regex object first, and use that to call
Matches(). The subject string is then the only required parameter, You can specify an
sion should begin the check. Essentially, the number you pass as the second parameter
optional second parameter to indicate the character index at which the regular expres-
3.10 Retrieve alist ofAlMatches | 165
---
## Page 182
is the number of characters at the start of your subject string that the regular expression
should ignore. This can be useful when you've already processed the string up to a
point and want to check whether the remainder should be processed further. If you
specify the number, it must be berween zero and the length of the subject string. Other-
wise, IsMatch() throws an ArgumentoutofRangeException.
The static overloads do not allow for the parameter that specifies where the regex at-
tempt should start in the string. There is no overload that allows you to tell
Matches() to stop before the end of the string. If you want to do that, you could call
Regex.Match(*subject* , start, stop) in a loop, as shown in the next recipe, and add
all the matches it finds to a list of your own.
Java
Java does not provide a function that retrieves the list of matches for you. You can easily
do this in your own code by adapting Recipe 3.7. Instead of calling find() in an 1f
Statement, do it in a shile loop.
To use the List and ArrayList classes, as in the example, put inport java.util. *; at
the start of your code.
JavaScript
This code calls string-match(), just like the JavaScript solution to Recipe 3.7. There is
one small but very important difference: the /g flag. Regex flags are explained in
Recipe 3.4.
The /g flag tells the match() function to iterate over all matches in the string and put
them into an array. In the code sample, list[o] will hold the first regex match,
list[1] the second, and so on. Check 1ist. length to determine the number of matches.
If no matches can be found at all, string match returns null as usual.
The elements in the array are strings. When you use a regex with the /g flag.
uoissaudxa reqnsau aq inoqe seiap aouang Xue apiaoud 1ou saop (uptew 8upup5
match. If you want to get match details for all regex matches, iterate over the matches
as explained in Recipe 3.11.
PHP
All the previous PHP recipes used preg_match(), which finds the first regex match in a
string. preg_natch_al1() is very similar. The key difference is that it wil find all matches
in the string. It returms an integer indicating the number of times the regex could match.
The fist three parameters for preg_match_al1() are the same as the first three for
preg_match(): a string with your regular expression, the string you want to search
through, and a variable that will receive an array with the results. The only differences
are that the third parameter is required and the array is always multidimensional.
166 |Chapter 3: Programming with Regular Expresons
---
## Page 183
For the fourth parameter, specify either the constant PREG_pATTERN_oRDER or
PREG_SET_oRDER. If you omit the fourth parameter, PREG_PATTERN_oRDER is the default.
If you use PREG_PATTER_oRDER, you will get an array that stores the details of the overall
match at element zero, and the details of capruring groups one and beyond at elements
one and beyond. The length of the array is the number of capturing groups plus one.
This is the same order used by preg_match(). The difference is that instead of each
element holding a string with the only regex match found by preg_match(), each ele-
ment holds a subarray with all the matches found by preg_natches(). The length of
each subarray is the same as the value returmed by preg_matches()
To get alist of al the regex matches in the string, discarding text matched by capturing
groups, specify PREG_pATTERN_oRDER and retrieve element zero in the array. If you're
only interested in the text matched by a particular capturing group, use PREG_PAT
TERN_oRDER and the capturinggroup’s number. For example, specifying $result [1] after
calling preg_match(*%http:/([a-z0-9. -]+)%', Ssubject, $result) gives you the list
of domain names of all the URL.s in your subject string.
PREG_SET_oRDER fills the array with the same strings, but in a different way. The length
of the array is the value returned by preg_matches(). Each element in the array is a
subarray, with the overall regex match in subelement zero and the capturing groups in
same array as if you had called preg_match().
elements one and beyond. If you specify PREG_SET_oRDER, then $result[o] holds the
Doing so has the same effect as passing PREG_oFFSET_CAPTURE as the fourth parameter
to preg_natch).Istead of each element in the arrayholdinga string, it willhold awo
element array with the string and the offset at which that string occurs in the original
subject string-
Perl
Recipe 3.4 explains that you need to add the /g modifier to enable your regex to find
will find all the matches and retum them. In this recipe, the list variable to the left of
more than one match in the subject string. If you use a global regex in a list context, it
the assignment operator provides the list context.
If the regular expression does not have any capuring groups, the lst willcontain the
overall regex matches. Iftheregular expression does have capturing groups, the lis will
contain the text matched by al the capturing groups for each regex match. The overall
regex match is not included, unless you put a capturing group around the whole regex.
If you only want to get alist of verallregex matches, replace all capruring groups with
noncapturing groups. Recipe 2.9 explains both kinds of grouping.
3.10 Retrieve a List of AlIMatches | 167
---
## Page 184