    The orgmode docs have a tutorial to [sync with google](https://orgmode.org/worg/org-tutorials/org-google-sync.html) and suggests some orgmode packages that do that, sadly it won't work with `nvim-orgmode`. We'll need to go the "ugly way" by:
    * Downloading external calendar events to ics with [`vdirsyncer`](vdirsyncer.md).
    * [Importing the ics to orgmode](#importing-the-ics-to-orgmode)
    * Editing the events in orgmode
    * [Exporting from orgmode to ics](#exporting-from-orgmode-to-ics)
    * Uploading then changes to the external calendar events with [`vdirsyncer`](vdirsyncer.md).
* New: [Comparison with Markdown.](orgmode.md#comparison-with-markdown)
    What I like of Org mode over Markdown:
    * The whole interface to interact with the elements of the document through key bindings:
      * Move elements around.
      * Create elements
    * The TODO system is awesome
    * The Agenda system
    * How it handles checkboxes ` and the `:tickler:` tag so that it doesn't show up in the agenda view even if you move it to another file.
    - When the appointed day comes you'll review the tickler elements as part of your day's routine. If you think it's time to do it, refile it to the `todo.org` file, if not, adjust the recurrence period and set the next date. Even though this workflow is reproducing the "kick the can forward" that we want to avoid, the idea is that once you get the period right you'll never have to do it again. If you see that after some iterations the period keeps on changing, maybe this workflow is not working for that kind of task and you may need to think of a better system `¯\(°_o)/¯`.
    - Once you complete the item, the new one will be spawned, once it has refile it to the tickler file again.
    We use appointments instead of `DEADLINE` or `SCHEDULED` so that they don't clutter the tickler view if you don't do them on the appointment date.
    Another option is not to archive the DONE tasks and in the weekly reset them to TODO the ones that you want to do the next week.
* New: [Create an issue in the orgmode repository.](orgmode.md#create-an-issue-in-the-orgmode-repository)
* New: Refile from the capture window.
    If you refile from the capture window, [until this issue is solved](https://github.com/joaomsa/telescope-orgmode.nvim/issues/4), your task will be refiled but the capture window won't be closed.
    Be careful that it only refiles the first task there is, so you need to close the capture before refiling the next
* New: [Code blocks syntax.](orgmode.md#code-blocks)
    Org offers two ways to structure source code in Org documents: in a source code block, and directly inline. Both specifications are shown below.
    A source code block conforms to this structure:
    ```org
    ```
    You need to use snippets for this to be usable.
    An inline code block conforms to this structure:
    ```org
    src_{}
    ```
    or
    ```org
    src_[]{}
    ```
    Where:
    - `#+NAME: `: (Optional) Names the source block so it can be called, like a function, from other source blocks or inline code to evaluate or to capture the results. Code from other blocks, other files.
    - `#+BEGIN_SRC’ … ‘#+END_SRC`: (Mandatory) They mark the start and end of a block that Org requires.
    - ``: (Mandatory) It is the identifier of the source code language in the block. See [Languages](https://orgmode.org/worg/org-contrib/babel/languages/index.html) for identifiers of supported languages.
    - ``: (Optional) Switches provide finer control of the code execution, export, and format.
    - ``: (Optional) Heading arguments control many aspects of evaluation, export and tangling of code blocks. Using Org’s properties feature, header arguments can be selectively applied to the entire buffer or specific subtrees of the Org document.
    - ``: Source code in the dialect of the specified language identifier.
* New: [Narrow/Widen to subtree.](orgmode.md#narrow/widen-to-subtree)
    It's [not yet supported](https://github.com/nvim-orgmode/orgmode/issues/200) to focus or zoom on one task.
* New: [Interesting things to investigate.](orgmode.md#interesting-things-to-investigate)
    - [org-bullets.nvim](https://github.com/akinsho/org-bullets.nvim): Show org mode bullets as UTF-8 characters.
    - [headlines.nvim](https://github.com/lukas-reineke/headlines.nvim): Add few highlight options for code blocks and headlines.
    - [Sniprun](https://github.com/michaelb/sniprun): A neovim plugin to run lines/blocs of code (independently of the rest of the file), supporting multiples languages.
    - [Python library: Org-rw](https://github.com/kenkeiras/org-rw)
    - [List of plugins](https://github.com/topics/orgmode-nvim)
* New: [The orgmode repository file organization.](orgmode.md#the-orgmode-repository-file-organization)
    How to structure the different orgmode files is something that has always confused me, each one does it's own way, and there are no good posts on why one structure is better than other, people just state what they do.
    I've started with a typical [gtd](gtd.md) structure with a directory for the `todo` another for the `calendar` then another for the `references`. In the `todo` I had a file for personal stuff, another for each of my work clients, and the `someday.org`. Soon making the internal links was cumbersome so I decided to merge the personal `todo.org` and the `someday.org` into the same file and use folds to hide uninteresting parts of the file. The reality is that I feel that orgmode is less responsive and that I often feel lost in the file.
    I'm now more into the idea of having files per project in a flat structure and use an index.org file to give it some sense in the same way I do with the mkdocs repositories. Then I'd use internal links in the todo.org file to organize the priorities of what to do next.
    Benefits:
    - As we're using a flat structure at file level, the links between the files are less cumbersome `file:./project.org::*heading`. We only need to have unique easy to remember names for the files, instead of having to think on which directory was the file I want to make the link to. The all in one file structure makes links even easier, just `*heading`, but the disadvantages make it not worth it.
    - You have the liberty to have a generic link like `Work on project` or if you want to fine grain it, link the specific task of the project
    - The todo file will get smaller.
    - It has been the natural evolution of other knowledge repositories such as blue
    Cons:
    - Filenames must be unique. It hasn't been a problem in blue.
    - Blue won't be flattened into Vida as it's it's own knowledge repository
* New: [Syncronize orgmode repositories.](orgmode.md#synchronizations)
    I use orgmode both at the laptop and the mobile, I want to syncronize some files between both with the next requisites:
    - The files should be available on the devices when I'm not at home
    - The synchronization will be done only on the local network
    - The synchronization mechanism will only be able to see the files that need to be synched.
    - Different files can be synced to different devices. If I have three devices (laptop, mobile, tablet) I want to sync all mobile files to the laptop but just some to the tablet).
    Right now I'm already using [syncthing](syncthing.md) to sync files between the mobile and my server, so it's tempting to use it also to solve this issue. So the first approach is to spawn a syncthing docker at the laptop that connects with the server to sync the files whenever I'm at home.
    I've investigated the next options:
    - [Mount the whole orgmode repository with syncthing](orgmode.md#mount-the-whole-orgmode-repository-with-syncthing)
    - [Mount a specific directory to sync](orgmode.md#mount-a-specific-directory-to-sync)
    - [Use the org-orgzly script](orgmode.md#use-the-org-orgzly-script)
### [OpenProject](openproject.md)
* Correction: Suggest not to use openproject.
    I've decided to use [orgmode](orgmode.md) instead.
## Knowledge Management
### [Spaced Repetition](spaced_repetition.md)
* New: Introduce spaced repetition references.
    - https://collegeinfogeek.com/spaced-repetition-memory-technique/
    - [The leitner box](https://www.youtube.com/watch?v=uvF1XuseZFE)
### [Anki](anki.md)
* New: How to install the latest version.
    Install the dependencies:
    ```bash
    sudo apt-get install zstd
    ```
    Download [the latest release package](https://apps.ankiweb.net/).
    Open a terminal and run the following commands, replacing the filename as appropriate:
    ```bash
    tar xaf Downloads/anki-2.1.XX-linux-qt6.tar.zst
    cd anki-2.1.XX-linux-qt6
    sudo ./install.sh
    ```
* New: [How long to do study sessions.](anki.md#how-long-to-do-study-sessions)
    I have two study modes:
    * When I'm up to date with my cards, I study them until I finish, but usually less than 15 minutes.
    * If I have been lazy and haven't checked them in a while (like now) I assume I'm not going to see them all and define a limited amount of time to review them, say 10 to 20 minutes depending on the time/energy I have at the moment.
    The relief thought you can have is that as long as you keep a steady pace of 10/20 mins each day, inevitably you'll eventually finish your pending cards as you're more effective reviewing cards than entering new ones
* New: [What to do with "hard" cards.](anki.md#what-to-do-with-"hard"-cards)
    If you're afraid to be stuck in a loop of reviewing "hard" cards, don't be. In reality after you've seen that "hard" card three times in a row you won't mark it as hard again, because you will remember. If you don't maybe there are two reasons:
    * The card has too much information that should be subdivided in smaller cards.
    * You're not doing a good process of memorizing the contents once they show up.
* New: [What to do with unneeded cards.](anki.md#what-to-do-with-unneeded-cards)
    You have three options:
    - Suspend: It stops it from showing up permanently until you reactivate it through the browser.
    - Bury: Just delays it until the next day.
    - Delete: It deletes it forever.
    Unless you're certain that you are not longer going to need it, suspend it.
* New: [Configure self hosted synchronization.](anki.md#configure-self-hosted-synchronization)
    Explain how to install `anki-sync-server` and how to configure Ankidroid
    and Anki. In the end I dropped this path and used Ankidroid alone with
    syncthing as I didn't need to interact with the decks from the computer. Also the ecosystem of synchronization in Anki at 2023-11-10 is confusing as there are many servers available, not all are compatible with the clients and Anki itself has released it's own so some of the community ones will eventually die.
## [Computer configuration management](configuration_management.md)
* New: Introduce configuration management.
    Configuring your devices is boring, disgusting and complex. Specially when your
    device dies and you need to reinstall. You usually don't have the time or energy
    to deal with it, you just want it to work.
    To have a system that allows you to recover from a disaster it's expensive in
    both time and knowledge, and many people have different solutions.
    This article shows the latest step of how I'm doing it.
## [Game Theory](game_theory.md)
* New: Add the evolution of trust game theory game.
    [Evolution of trust](https://ncase.me/trust/)
    Game theory shows us the three things we need for the evolution of trust:
    - Repeat interactions: Trust keeps a relationship going, but you need the knowledge of possible future repeat interactions before trust can evolve
    - Possible win-wins: You must be playing a non-zero-sum game, a game where it's at least possible that both players can be better off -- a win-win.
    - Low miscommunication: If the level of miscommunication is too high, trust breaks down. But when there's a little bit of miscommunication, it pays to be more forgiving
# Coding
## Languages
### [Bash snippets](python.md)
* New: [Move a file.](python.md#move-a-file)
    Use one of the following
    ```python
    import os
    import shutil
    os.rename("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
    os.replace("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
    shutil.move("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
    ```
* New: [Get the root path of a git repository.](bash_snippets.md#get-the-root-path-of-a-git-repository)
    ```bash
    git rev-parse --show-toplevel
    ```
* New: [Get epoch gmt time.](bash_snippets.md#get-epoch-gmt-time)
    ```bash
    date -u '+%s'
    ```
* New: [Check the length of an array with jq.](bash_snippets.md#check-the-length-of-an-array-with-jq)
    ```
    echo '[{"username":"user1"},{"username":"user2"}]' | jq '. | length'
    ```
* New: [Exit the script if there is an error.](bash_snippets.md#exit-the-script-if-there-is-an-error)
    ```bash
    set -eu
    ```
* New: [Prompt the user for data.](bash_snippets.md#prompt-the-user-for-data)
    ```bash
    read -p "Ask whatever" choice
    ```
* New: [How to deal with HostContextSwitching alertmanager alert.](bash_snippets.md#how-to-deal-with-hostcontextswitching-alertmanager-alert)
    A context switch is described as the kernel suspending execution of one process on the CPU and resuming execution of some other process that had previously been suspended. A context switch is required for every interrupt and every task that the scheduler picks.
    Context switching can be due to multitasking, Interrupt handling , user & kernel mode switching. The interrupt rate will naturally go high, if there is higher network traffic, or higher disk traffic. Also it is dependent on the application which every now and then invoking system calls.
    If the cores/CPU's are not sufficient to handle load of threads created by application will also result in context switching.
    It is not a cause of concern until performance breaks down. This is expected that CPU will do context switching. One shouldn't verify these data at first place since there are many statistical data which should be analyzed prior to looking into kernel activities. Verify the CPU, memory and network usage during this time.
    You can see which process is causing issue with the next command:
    ```bash
    10:15:24 AM     UID     PID     cswch/s         nvcswch/s       Command
    10:15:27 AM     0       1       162656.7        16656.7         systemd
    10:15:27 AM     0       9       165451.04       15451.04        ksoftirqd/0
    10:15:27 AM     0       10      158628.87       15828.87        rcu_sched
    10:15:27 AM     0       11      156147.47       15647.47        migration/0
    10:15:27 AM     0       17      150135.71       15035.71        ksoftirqd/1
    10:15:27 AM     0       23      129769.61       12979.61        ksoftirqd/2
    10:15:27 AM     0       29      2238.38         238.38          ksoftirqd/3
    10:15:27 AM     0       43      1753            753             khugepaged
    10:15:27 AM     0       443     1659            165             usb-storage
    10:15:27 AM     0       456     1956.12         156.12          i915/signal:0
    10:15:27 AM     0       465     29550           29550           kworker/3:1H-xfs-log/dm-3
    10:15:27 AM     0       490     164700          14700           kworker/0:1H-kblockd
    10:15:27 AM     0       506     163741.24       16741.24        kworker/1:1H-xfs-log/dm-3
    10:15:27 AM     0       594     154742          154742          dmcrypt_write/2
    10:15:27 AM     0       629     162021.65       16021.65        kworker/2:1H-kblockd
    10:15:27 AM     0       715     147852.48       14852.48        xfsaild/dm-1
    10:15:27 AM     0       886     150706.86       15706.86        irq/131-iwlwifi
    10:15:27 AM     0       966     135597.92       13597.92        xfsaild/dm-3