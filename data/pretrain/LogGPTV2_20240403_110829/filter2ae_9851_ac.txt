### Android权限说明

- **READ_SYNC_SETTINGS**：允许应用程序读取同步设置。
- **READ_SYNC_STATS**：允许应用程序读取同步统计信息。
- **READ_VOICEMAIL**：允许应用程序读取系统中的语音信箱。
- **REBOOT**：允许应用程序重新启动设备。
- **RECEIVE_BOOT_COMPLETED**：允许应用程序在系统完成启动后接收`ACTION_BOOT_COMPLETED`广播。
- **RECEIVE_MMS**：允许应用程序监听传入的彩信。
- **RECEIVE_SMS**：允许应用程序接收短信。
- **RECEIVE_WAP_PUSH**：允许应用程序接收WAP推送消息。
- **RECORD_AUDIO**：允许应用程序录制音频。
- **REORDER_TASKS**：允许应用程序更改任务的Z顺序。
- **REQUEST_COMPANION_RUN_IN_BACKGROUND**：允许随播应用在后台运行。
- **REQUEST_COMPANION_USE_DATA_IN_BACKGROUND**：允许随播应用在后台使用数据。
- **REQUEST_DELETE_PACKAGES**：允许应用程序请求删除包。
- **REQUEST_IGNORE_BATTERY_OPTIMIZATIONS**：允许应用程序请求忽略电池优化。
- **REQUEST_INSTALL_PACKAGES**：允许应用程序请求安装软件包。
- **RESTART_PACKAGES**：此常量已在API级别8中被弃用，不再支持。
- **SEND_RESPOND_VIA_MESSAGE**：允许应用程序（电话）向其他应用程序发送请求，以处理来电期间的响应通过消息动作。
- **SEND_SMS**：允许应用程序发送短信。
- **SET_ALARM**：允许应用程序为用户设置闹钟。
- **SET_ALWAYS_FINISH**：允许应用程序控制是否在后台放置活动时立即完成。
- **SET_ANIMATION_SCALE**：修改全局动画缩放因子。
- **SET_DEBUG_APP**：配置应用程序进行调试。
- **SET_PREFERRED_APPLICATIONS**：此常量已在API级别7中被弃用，不再有用。
- **SET_PROCESS_LIMIT**：允许应用程序设置可以运行的最大数量的应用程序进程。
- **SET_TIME**：允许应用程序设置系统时间。
- **SET_TIME_ZONE**：允许应用程序设置系统时区。
- **SET_WALLPAPER**：允许应用程序设置壁纸。
- **SET_WALLPAPER_HINTS**：允许应用程序设置壁纸提示。
- **SIGNAL_PERSISTENT_PROCESSES**：允许应用程序请求将信号发送到所有持久进程。
- **STATUS_BAR**：允许应用程序打开、关闭或禁用状态栏及其图标。
- **SYSTEM_ALERT_WINDOW**：允许应用程序创建类型为`TYPE_APPLICATION_OVERLAY`的窗口，显示在所有其他应用程序的顶部。
- **TRANSMIT_IR**：允许应用程序使用设备的红外发射器（如果有的话）。
- **UNINSTALL_SHORTCUT**：此权限已不再支持。
- **UPDATE_DEVICE_STATS**：允许应用程序更新设备统计信息。
- **USE_FINGERPRINT**：允许应用程序使用指纹硬件。
- **USE_SIP**：允许应用程序使用SIP服务。
- **VIBRATE**：允许应用程序访问振动器。
- **WAKE_LOCK**：允许应用程序使用`PowerManager WakeLock`来防止处理器进入睡眠状态或屏幕变暗。
- **WRITE_APN_SETTINGS**：允许应用程序写入APN设置。
- **WRITE_CALENDAR**：允许应用程序写入用户的日历数据。
- **WRITE_CALL_LOG**：允许应用程序写入用户的通话记录数据。
- **WRITE_CONTACTS**：允许应用程序写入用户的联系人数据。
- **WRITE_EXTERNAL_STORAGE**：允许应用程序写入外部存储。
- **WRITE_GSERVICES**：允许应用程序修改Google服务地图。
- **WRITE_SECURE_SETTINGS**：允许应用程序读取或写入安全系统设置。
- **WRITE_SETTINGS**：允许应用程序读取或写入系统设置。
- **WRITE_SYNC_SETTINGS**：允许应用程序写入同步设置。
- **WRITE_VOICEMAIL**：允许应用程序修改和删除系统中现有的语音信箱。

### 0x05. 从apk文件中获取AndroidManifest.xml文件

1. **解压apk文件**
   - 首先，下载apk文件并使用压缩软件（如WinRAR或7-Zip）直接解压缩。解压后，在apk目录中会生成一个`AndroidManifest.xml`文件。
   - 使用记事本或其他文本编辑器打开该文件，其内容可能显示为乱码。

2. **使用androguard进行转码**
   - 下载并安装最新版本的androguard（也可以选择1.9版本）。
   - 将`AndroidManifest.xml`文件复制到androguard目录。
   - 在命令行中，导航到androguard目录并执行以下命令：
     ```sh
     androaxml.py -i AndroidManifest.xml -o new.WoCloud.AndroidManifest.xml
     ```
   - 这将解码`AndroidManifest.xml`文件的内容。

### 0x06. 使用apktool反编译apk

1. **下载apktool.jar**
2. **创建apktool.bat脚本**
   - 将以下脚本保存为`apktool.bat`：
     ```bat
     @echo off
     if "%PATH_BASE%" == "" set PATH_BASE=%PATH%
     set PATH=%CD%;%PATH_BASE%;
     java -jar -Duser.language=en "%~dp0\apktool.jar" %*
     ```
3. **反编译程序**
   - 直接使用Java进行反编译：
     ```sh
     java -jar apktool.jar d test.apk
     ```
   - 使用bat脚本进行反编译：
     ```sh
     apktool -f d test.apk  # 覆盖已有的反编译程序及其目录
     apktool d test.apk
     ```
   - 注意：确保`apktool.bat`和`apktool_2.2.4.jar`在同一个目录，并且将`apktool_2.2.4.jar`重命名为`apktool.jar`。

### 0x07. AndroidManifest.xml 默认设置漏洞

1. **allowBackup属性的风险**
   - **安全风险描述**
     - Android API Level 8及以上版本提供了应用程序数据备份和恢复功能。`allowBackup`属性值默认为`true`，当其为`true`时，用户可以通过`adb backup`和`adb restore`命令备份和恢复应用数据，这可能导致敏感信息泄露和财产损失。
   - **影响范围**
     - 影响Android API等级8（Android 2.2 - 2.2.3）及以上的系统。
   - **测试流程**
     - 测试环境：Windows 7，ADB调试工具；物理接触目标手机1，连接手机1到PC端。
     - 步骤：
       1. 连接手机1到PC端，确保USB调试开启。
       2. 执行以下命令：
          ```sh
          adb devices  # 检查设备连接
          adb backup -nosystem -noshared -apk -f com.sina.weibo.ab com.sina.weibo  # 备份微博客户端数据
          ```
       3. 点击手机1上的“备份我的数据”确认备份。
       4. 断开手机1的连接，连接手机2。
       5. 执行以下命令：
          ```sh
          adb kill-server  # 关闭ADB
          adb devices  # 重新启动ADB，检测手机2是否成功连接
          adb restore com.sina.weibo.ab  # 恢复备份数据
          ```
       6. 点击手机2上的“恢复我的数据”确认恢复。
       7. 打开手机2上的微博客户端，测试可正常登录手机1中的账号并执行各种操作。
   - **安全防护**
     - 设置`android:allowBackup=false`，并使用`android:restoreAnyVersion`的默认值。
   - **检测漏洞**
     - 使用apktool等工具反编译apk后，查看`AndroidManifest.xml`文件，查找`allowBackup`属性。如果其值为`true`，则表示存在漏洞。

2. **Debuggable属性的风险**
   - **原理**
     - `android:debuggable`属性用于指定应用程序是否能够被调试。如果设置为`true`，应用程序可以被Java调试工具（如jdb）调试，信息和代码都可能被获取和修改。
   - **防护**
     - 系统默认设置为`false`，建议保持默认设置。