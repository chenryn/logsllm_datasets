1
OLONLNOV-从.NET源码看⽂件上传绕waf
@我是killer 
.NET⾥⼀般使⽤  context.Request.Files 来处理⽂件上传，编写如下代码测试。 
跟⼊⽂件上传处理流程 
C#
复制代码
using System.Web;
namespace WebApplication1
{
    public class Handler1 : IHttpHandler
    {
        public void ProcessRequest(HttpContext context)
        {
            context.Response.ContentType = "text/plain";
            HttpPostedFile file = context.Request.Files["file_upload"];
            string filePath = context.Server.MapPath("~/test/") + 
System.IO.Path.GetFileName(file.FileName);
            file.SaveAs(filePath);
            context.Response.Write(filePath);
        }
        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
2
跟⼊  System.Web.HttpRequest.EnsureFiles  
跟⼊  System.Web.HttpRequest.FillInFilesCollection  
3
第⼀个红框处，判断了我们的Content-Type是否以  multipart/form-data 开头 
第⼆个红框处以及在获取⽂件相关的东⻄了，说明已经解析完了，说明解析的地⽅在箭头处 
于是跟⼊  System.Web.HttpRequest.GetMultipartContent  
GetAttributeFromHeader 代码如下 
4
C#
复制代码
private static string GetAttributeFromHeader(string headerValue, string 
attrName)
{
    if (headerValue == null)
        return (string) null;
    int length1 = headerValue.Length;
    int length2 = attrName.Length;
    int startIndex;
    for (startIndex = 1; startIndex = 0 && startIndex + length2 = length1)
        return (string) null;
    int index1 = startIndex + length2;
    while (index1 = length1 || headerValue[index1] != '=')
        return (string) null;
    int num1 = index1 + 1;
    while (num1 = length1)
        return (string) null;
    string attributeFromHeader;
    if (num1 < length1 && headerValue[num1] == '"')
    {
        if (num1 == length1 - 1)
            return (string) null;
        int num2 = headerValue.IndexOf('"', num1 + 1);
        if (num2 < 0 || num2 == num1 + 1)
            return (string) null;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
5
⼤概意思就是以下都可以解析 
然后继续回到  System.Web.HttpRequest.GetMultipartContent  
第⼀处这⾥没啥看的获取请求的内容，第⼆处我们看到他传⼊  System.Web.HttpMultipartConte
ntTemplateParser.Parse 时有⼀个好像是编码的东⻄，很可疑我们跟进去看看。 
        attributeFromHeader = headerValue.Substring(num1 + 1, num2 - num1 
- 1).Trim();
    }
    else
    {
        int index2 = num1;
        while (index2 < length1 && headerValue[index2] != ' ' && 
headerValue[index2] != ',' && 
(AppSettings.UseLegacyMultiValueHeaderHandling || headerValue[index2] != 
';'))
            ++index2;
        if (index2 == num1)
            return (string) null;
        attributeFromHeader = headerValue.Substring(num1, index2 - 
num1).Trim();
    }
    return attributeFromHeader;
    }
41
42
43
44
45
46
47
48
49
50
51
52
53
C#
复制代码
Content-Type: multipart/form-dataAAAAAAAAAAAA;boundary=----aaaa
Content-Type: multipart/form-dataAAAAAAAAAAAA,boundary=----aaaa
Content-Type: multipart/form-dataAAAAAAAAAAAA boundary=----aaaa
Content-Type: multipart/form-dataAAAAAAAAAAAA\tboundary\t=\t----aaaa
1
2
3
4
6
跟⼊  System.Web.HttpRequest.GetEncodingFromHeaders  
7
有两种获取⽅式第⼀种是  UserAgent 头需要以  UP 开头，并且存在  x-up-devcap-post-charse
t 头从中获取编码格式。第⼆种就是从  contentType 获取  charset 字段。 
这⾥我们先跟⼊  System.Web.HttpMultipartContentTemplateParser.Parse 看看 
先初始化，然后调⽤  ParseIntoElementList ⽅法 
8
此处为解析⽂件名的位置，红框处使⽤我们刚才设置的编码获取字符串。然后查了下⽀持的编码 
https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding?view=net-6.0#list-of-
encodings 
9
此处我们使⽤utf-16来测试，构造请求如下。
然后看下⾯这段 
10
先⽤冒号分割，然后开头必须为  Content-Disposition  
进⼊  ExtractValueFromContentDispositionHeader 看看 
红框处其实只要  Content-Disposition: 后⾯存在  filename= 就⾏了，红框下⾯就是就是有没
有双引号 
所以可以下⾯这样写 
11
Plain Text
复制代码
Content-Disposition:name="file_upload"aaaaafilename=1.aspx
1