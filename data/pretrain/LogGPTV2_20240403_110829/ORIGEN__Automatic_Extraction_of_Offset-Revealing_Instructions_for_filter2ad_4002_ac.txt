3.13.0
6.8.0
2002
2012
3.13.0
Date
2009
2014
2015
2015
Table 1: Datasets of released versions
6.2 Overall True/False Positive Analysis
We also evaluate the accuracy of ORIGEN using the
OpenSSH family. We use its 40 versions which covers a span
of 13 years. Each version gets the true proﬁle from its source
code. We conduct the pair-wise proﬁle generation on the 40
samples by ORIGEN, and calculate the oﬀset prediction
precision. For each version, ORIGEN utilizes it as a base
version to localize proﬁles for all 40 versions. Each localized
proﬁle calculates precision by diﬃng itself with the true pro-
ﬁle from the source code of that version.
Figure 6: The average precision of our method on 40
versions of OpenSSH. The dashed bar on top shows
the average.
Figure 6 shows the overall precision of ORIGEN on each
test OpenSSH version, where the x-axis represents the oﬀset
prediction precision and the y-axis lists the versions. The
dashed bar labeled as “average” on top represents the aver-
age precision across all 40 versions. As we see, on average,
ORIGEN obtains a reasonable precision of 89.33%. The
variance of the precision across versions is only 0.003, with
the highest precision of 92.88% and the lowest of 83.98%.
The small variance suggests that the proposed method is
robust. The results shown in Figure 6 substantiate the ef-
ﬁcacy of ORIGEN and suggests that ORIGEN points to a
feasible solution for cross-version memory analysis.
We inspect the results and hypothesize that the accurate
result derives from two main reasons: 1) the most of ﬁeld
types are referenced by multiple ORIs. A single or a few
ORI searching failures can be corrected through the voting
mechanism; 2) the code search based cross-version inference
is resistant to some data structure reorganizations. We cal-
culate the statistics on ORIs for each ﬁeld to explain the
ﬁrst reason. As shown in Figure 5, we can see that each
data type has more than 50 ORIs for its ﬁelds on average.
Any single or a few ORI searching failures can be recorrected
by rest of correct ORIs. We also manually investigate 40 re-
constructed data proﬁles from Figure 6 and ﬁnd that ORI-
GEN still correctly infers connection_in and other ﬁelds in
session_state in OpenSSH2.2, even if session_state data
structure ﬁrst appears in OpenSSH5.3. The reason is that
OpenSSH5.3 creates session_state as a wrapper to wrap
these ﬁelds in previous versions. The code accessing these
ﬁelds are relatively stable. ORIGEN can still identify ORIs
from these codes and update the type information.
We further inspect the false positives in our method and
ﬁnd most of false positives are caused by the inaccuracy of
the code search technique used by ORIGEN. For example,
Bindiﬀ cannot yield good alignment results if source code are
compiled from diﬀerent compiler or diﬀerent optimization
level. We can further improve the accuracy of the binary
alignment by leveraging more advanced techniques [6, 11,
15]. In this paper, we will discuss how to address the false
positive issue in Section 6.4.
6.3
In-depth True/False Positive Analysis
We also conduct an in-depth analysis to evaluate the ac-
curacy of ORIGEN. Figure 7 presents detailed comparison
results in the heat map. For the convenience of illustration,
we only include 10 representative versions from 2.9.9p1 to
6.6p1, where each block indicates a pair-wise prediction ex-
periment on the two versions. The brightness of the block
in Figure 7(a) shows the oﬀset prediction precision for 100
pair-wise proﬁle generations; in Figure 7(b), the brightness
indicates the true proﬁle similarity for the 100 pairs.
We can see that ORIGEN exhibits better performance for
adjacent versions, or in other words, it has the better per-
formance when the time interval of two versions is smaller.
For example, two adjacent versions of OpenSSH 3.3p1 and
4.5p1 have a very high oﬀset prediction precision. This is
reasonable, because two adjacent versions tend to have less
diﬀerences in their binaries. In most cases, these diﬀerences
in adjacent versions are from minor code changes such as
security patches, so these two binaries still share most of
similar codes. When the time interval of two versions is
large enough, ORIGEN may not generate the proﬁle with
the good quality. In this case, we can either use the method
in Section 6.4 or create a new base model on the more recent
version. The new model creation is much less frequent than
the version change. In fact, we only need to create 2 models
for the 40 versions of OpenSSH.
The true data structure similarity in Figure 7(b) shows a
good explanation about the performance of ORIGEN. Each
true data structure similarity in this matrix is calculated by
diﬃng true data structures of two versions. We can see that
most of adjacent versions can reach 100% similarity. When
the time interval increases, the drop of data structure sim-
ilarities is marginal. This also demonstrates that adjacent
versions have few design changes and look similar. This
results substantiate our intuition that software of diﬀerent
versions tend to be similar.
6.4 Handling False Positives
The accuracy of ORIGEN has been veriﬁed in Section 6.2.
The average precision is about 90%, but there are still 10%
false positives, which might not be desirable in some mission
critical applications. To this end, we incorporate a thresh-
olding method to reduce the number of false positives. The
idea is that we can adopt the number of accesses to quantify
the searching robustness of the data ﬁeld type, and only con-
00.10.20.30.40.50.60.70.80.912.2.0p12.5.1p13.0.1p13.2.2p13.4p13.6.1p13.8.1p14.0p14.2p14.4p14.6p14.9p15.1p15.3p15.5p15.7p15.9p16.1p16.3p16.5p1AveragePrecisionVersions of OpenSSH (40 in total)(a) The oﬀset prediction precision
(b) The true data structure similarity
Figure 7: The illustration of pair-wise experiments on 10 representative versions of OpenSSH.
sider the data ﬁeld type above the threshold as the searching
candidate. We admit it will sacriﬁce coverage for accuracy,
but it is necessary for the practical integration in some cases.
The result as shown in Figure 8 illustrates the precision
under diﬀerent thresholds, where the x-axis lists the thresh-
old, and the y-axis represents the precision. For each thresh-
old, the 95% conﬁdence interval of 40 versions is also plotted.
As we see, the precision increases along with the thresh-
old, and a bigger threshold leads to a more accurate re-
sult, e.g. the precision is 98.53% under the threshold 32.
As the threshold determines the searching robustness of the
data type, a method with a bigger threshold behaves more
prudently, and makes less yet more accurate predictions.
For example, when the threshold is 2, our method yields
116,446 predictions; but when the threshold is 16, it yields
only 42,324 conﬁdent predictions. The experimental results
substantiate the claim that our method can be tailored to
produce very few false positives.
Figure 8: Precision of our method under diﬀerent
thresholds.
6.5 Case Studies
In this section, we conduct a qualitative analysis to eval-
uate the practice of ORIGEN. We select several key data
ﬁelds in all of the software samples listed in 1 and conduct
case studies in two application scenarios: virtual machine
introspection and memory forensics.
For virtual machine introspection (VMI), we choose to en-
hance DECAF [18], the dynamic analysis platform. DECAF
relies on VMI to retrieve the running processes and loaded
modules inside a virtual machine to analyze the behaviors
of speciﬁed processes or kernel modules, for automatic mal-
ware detection and analysis. However, it only supports a
limited number of guest OS versions (including Windows
and Linux), due to the hardcoded proﬁles. To support a
new guest OS version, a user must compile and load a ker-
nel module inside the virtual machine to generate the cor-
responding proﬁle. We aim to demonstrate that with help
of ORIGEN, we can eliminate this manual task by auto-
matically generating the proﬁle from a given virtual ma-
chine image within just a few minutes. This case study can
demonstrate how ORIGEN greatly improves the usability
of VMI for the cloud provider.
For memory forensics, we show two forensic analysis tasks:
OpenSSH session key extraction, and dm crypt2 encryption
key extraction. We develop two plugins on Volatility mem-
ory forensics framework [38] to accomplish these two tasks,
respectively. We aim to demonstrate that with help of ORI-
GEN, we can perform these analysis tasks in a cross-version
manner. It means that without knowing the version infor-
mation of the application in a memory dump, we can au-
tomatically create a localized proﬁle and then immediately
perform the forensic analysis on the memory dump.
We select key data ﬁelds as a demo for each analysis. The
second column in Table 2 lists key data ﬁelds of interest.
To be more speciﬁc, for Windows VMI, we need the global
variable PsActiveProcessHead as the starting point to tra-
verse the linked list of EPROCESS, and then within each EPRO-
CESS object, we obtain the process ID in UniqueProcessID,
the name in ProcessName, and so on. We visit the next
EPROCESS object through ActiveProcessLinks. Similarly
for Linux VMI, we need to start from init_task to traverse
the task_struct linked list and locate the process ID in pid,
and the process name in comm, and so on.
In memory forensics scenario, for dm crypt, we create a
signature using the ﬁve ﬁelds in the structure crypt_config
to scan the memory and ﬁnd the actual encryption key in
crypt_config.key.
We select three base versions for each software, as shown
in Table 2. In order to evaluate the strength of ORIGEN,
2dm crypt is a disk encryption tool in Linux.
  2.9.9p13.3p13.7.1p14.1p14.5p15.0p15.4p15.8p16.2p16.6p12.9.9p13.3p13.7.1p14.1p14.5p15.0p15.4p15.8p16.2p16.6p10.10.20.30.40.50.60.70.80.91  2.9.9p13.3p13.7.1p14.1p14.5p15.0p15.4p15.8p16.2p16.6p12.9.9p13.3p13.7.1p14.1p14.5p15.0p15.4p15.8p16.2p16.6p10.10.20.30.40.50.60.70.80.91051015202530350.880.90.920.940.960.981ThresholdPrecisionName
Field Name
EPROCESS.UniqueProcessId
EPROCESS.EitTime
EPROCESS.ActiveProcessLinks
Windows
EPROCESS.ProcessName
EPROCESS.PEB
EPROCESS.DirectoryTableBase
.data : PsActiveProcessHead
Linux
.data: init task
task struct.tgid
task struct.pid
task struct.comm
task struct.tasks
task struct.mm
mm struct.pgd
OpenSSH
.bss: active state
session state.ssh1 key
session state.ssh1 key length
dm crypt
crypt conﬁg.cpher
crypt conﬁg.cipher string
crypt conﬁg.iv size
crypt conﬁg.key size
crypt conﬁg.key
ORI Statistic
on Windows XPSP0
Total
DL SL
7
2
3
4
2
1
3
5
0
1
0
5
2
0
12
2
4
4
7
3
3
ORI Statistic
on Linux3.5.0
Total
DL SL
10
1
2
4
2
5
4
0
9
8
1
1
42
12
10
10
10
5
3
47
16
ORI Statistic
on OpenSSH5.9
Total
DL SL
5
2
4
1
0
0
6
2
4
ORI Signature Statistic
on Linux3.8.0
DL SL
3
4
8
4
3
1
1