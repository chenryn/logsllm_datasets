title:Breaking Kernel Address Space Layout Randomization with Intel TSX
author:Yeongjin Jang and
Sangho Lee and
Taesoo Kim
Breaking Kernel Address Space Layout Randomization with Intel TSX
Yeongjin Jang, Sangho Lee, and Taesoo Kim
Georgia Institute of Technology
Abstract
Kernel hardening has been an important topic, as many
applications and security mechanisms often consider the
kernel as part of their Trusted Computing Base (TCB).
Among various hardening techniques, Kernel Address
Space Layout Randomization (KASLR) is the most ef-
fective and widely adopted defense mechanism that can
practically mitigate various memory corruption vulner-
abilities, such as buffer overflow and use-after-free. In
principle, KASLR is secure as long as no memory leak
vulnerability exists and high entropy is ensured.
In this paper, we introduce a novel timing attack against
KASLR, called DrK, that can precisely de-randomize the
memory layout of the kernel without violating any such
assumptions. DrK exploits a hardware feature called Intel
Transactional Synchronization Extension (TSX) that is
readily available in most modern commodity CPUs. One
surprising behavior of TSX, which is essentially the root
cause of this security loophole, is that it aborts a transac-
tion without notifying the underlying kernel even when
the transaction fails due to a critical error, such as a page
fault or an access violation, which traditionally requires
kernel intervention. DrK turned this property into a pre-
cise timing channel that can determine the mapping status
(i.e., mapped versus unmapped) and execution status (i.e.,
executable versus non-executable) of the privileged, ker-
nel address space. In addition to its surprising accuracy
and precision, DrK is universally applicable to all OSes,
even on a virtualized environment, and generates no visi-
ble footprint, making it difficult to detect in practice. We
demonstrated that DrK could break KASLR of all major
OSes (i.e., Windows, Linux, and OS X) with near-perfect
accuracy in under a second. Finally, we propose a few
potential countermeasures that can effectively prevent or
mitigate the DrK attack.
We urge our community to be aware of the potential
threat of having Intel TSX, which is present in most recent
Intel CPUs—100% in workstation and 60% in high-end
Intel CPUs since Skylake—and is even available on Ama-
Figure 1: The adoption status of both user-space and kernel-
space ASLR in popular operating systems, ordered by year [62].
zon EC2 (X1).
1
Introduction
Enhancing the security of operating systems (OSes) has
been an active, important research topic as the underlying
OS is commonly considered to be the Trusted Comput-
ing Base (TCB) for user applications and their security
mechanisms. Among various hardening techniques, Ker-
nel Address Space Layout Randomization (KASLR) is
the most comprehensive but effective security mechanism
that raises a practical hurdle for exploiting memory cor-
ruption vulnerabilities [32, 33], such as buffer overflow
and use-after-free. In this regard, today’s major commod-
ity OSes (e.g., Windows, Linux and OS X) as well as
mobile OSes (e.g., Android and iOS) have implemented
and deployed KASLR to protect the core kernel image
and their device drivers from exploitation (see Figure 1).
In principle, KASLR can effectively (i.e., statistically)
mitigate exploitation, as long as two assumptions hold: 1)
no memory disclosure vulnerability exists and 2) enough
entropy of the randomness is guaranteed. Therefore,
typical attacks against the kernel require a preceding at-
tack, which focuses either on leaking code or data point-
ers [17, 41, 43] to directly figure out the memory lay-
out, or on exploiting implementation caveats to indirectly
break the imperfect randomness [45], as a stepping stone
for the ultimate control-hijacking attack.
To the best of our knowledge, exploiting the cache-
1
Windows VistaKernel/User spaceOS X 10.5User-spaceiOS 5User-spaceAndroid 4.0User-spaceOS X 10.8Kernel-spaceLinux 3.14Kernel-spaceYears2005200720142011iOS 6Kernel-space2012Linux 2.6.12User-spaceGrade/Generation
Skylake
Broadwell
Haswell
Server/Workstation
High-end Consumer
Low-end Consumer
17/17 (100.0%)
23/38 (60.1%)
4/32 (12.5%)
19/19 (100.0%)
11/22 (50.0%)
2/16 (12.5%)
37/85 (43.5%)
2/92 (2.2%)
0/79 (0.0%)
Table 1: Commodity Intel CPUs supporting TSX, varying CPU
grades and generations (February 2016). Server CPUs include
Xeon and Pentium D server, high-end consumer CPUs include
i5 and i7, and low-end consumer CPUs include i3, m, and others.
All recent CPUs for server/workstation and more than half of
high-end consumer CPUs support TSX [29].
based timing channel [28] is the first attempt to univer-
sally break KASLR without violating the two fundamen-
tal assumptions. The key idea of the cache-based timing
attack is to exploit a timing difference (i.e., cache miss and
hit) for accessing mapped (i.e., cached) and unmapped
(i.e., not-cached) pages to determine page mapping sta-
tus. More precisely, it deliberately fills or evicts certain
cache lines to indirectly affect the execution time in the
kernel space. Such timing differences can be observed
by measuring how quickly a system call returns from the
kernel space, or how quickly a faulty access to the kernel
space gets to the OS page fault handler. Under a typical
threat model—local privilege escalation, this attack can
break KASLR (i.e., leaking the partial bits of a random-
ized address) in theory, but it barely works in practice
for three reasons. First, it generates strong signals (e.g.,
segmentation faults and lots of system calls) that typical
system monitoring tools (e.g., fail2ban and sysdig) con-
sider to be abnormal behavior, thereby resulting in prompt
mitigation.
Second, it requires a large page (2 MB) to accurately
locate the virtual address regions to intentionally generate
cache conflicts to the targeted physical pages, which un-
fortunately requires higher privileges than a normal user
in most commodity OSes: hugetlbfs in Linux [57], and
SeLockMemoryPrivilege in Windows [13, 63].
Lastly, the attack is neither accurate (i.e., reversely
mapping a conflicted cache line to its preimage set) nor
fast enough (e.g., their double page fault attack took 17.3–
72.9 s to probe the entire kernel space of 32-bit Windows
7 in the carefully controlled environment) for practical
use. In fact, these practical hurdles are the essential foun-
dation of currently proposed software-based mitigation
schemes [28].
In this paper, we introduce a new timing attack against
KASLR, called DrK ([dIræk] De-Randomize Kernel ad-
dress space), which is similar in spirit to the previous uni-
versal attack [28], but with higher accuracy and better per-
formance. To break KASLR in an OS-agnostic way, DrK
exploits a timing side-channel in a new hardware feature,
called Intel Transactional Synchronization Extension (In-
tel TSX), that is widely deployed in modern Intel CPUs—
in our survey, 100% of CPUs for server/workstation and
60% in high-end computers since Skylake have Intel TSX
(see Table 1). Our attack has higher precision (e.g., exe-
cutable bits of pages), higher accuracy (e.g., near-prefect
de-randomization of memory layout), and is faster (e.g.,
under a second) than the state-of-the-art cache-based at-
tack. More importantly, DrK does not generate distinctive
footprints that look abnormal to system monitoring tools,
and is universally applicable to all OSes, even under a
virtualized environment (e.g., Amazon EC2).
The key idea of DrK is to exploit an unusual behavior
of TSX in handling erroneous situations inside a transac-
tion. When a transaction aborts (typically due to read or
write conflicts), the CPU directly invokes an abort han-
dler (specified by a user) to resolve such conflicts without
interrupting the underlying OS. However, even when an
unrecoverable error happens inside a transaction (e.g., an
access violation or a page fault), the CPU similarly aborts
the transaction without informing the underlying OS, al-
though these errors traditionally require the intervention
of the underlying OS.
In DrK, we turned this property into a better timing
channel, enabling us to precisely determine the mapping
status (i.e., mapped versus unmapped) and executable
status (i.e., executable versus non-executable) of the priv-
ileged address space, by intentionally generating access
violation inside a transaction (e.g., accessing or jumping
into kernel address regions).
In this paper, we make three significant contributions:
• A practical attack. We demonstrate that DrK could
break KASLR of popular OSes, including the latest
Windows, Linux and OS X, with near-perfect accu-
racy and high precision with sub-second execution
time.
• Analysis. We provide an in-depth analysis of the
DrK attack with our hypothesis and designs of ex-
periments. We show our results in three major OSes
to understand the root cause (i.e., CPU internal ar-
chitecture) of the timing differences.
• Countermeasures. Although we believe there
might be no practical software-based mitigation, we
propose a few hardware modifications that can effec-
tively prevent a DrK attack.
The remainder of this paper is organized as follows. §2
introduces KASLR and Intel TSX. §3 explains how our
attack works. §4 shows our evaluation results. §5 provides
an in-depth analysis of DrK to understand the hardware
characteristics. §6 proposes possible countermeasures.
§7 discusses the limitations of DrK. §8 compares it with
other projects, and §9 concludes this paper.
2 Background
In this section, we provide a technical overview of
KASLR and Intel TSX as a basis for understanding the
technical details of the DrK attack.
2
OS
Linux
Windows
OS X
Kernel
Modules
Kernel
Modules
Kernel
6 bits
10 bits
*13 bits
*13 bits
8 bits
64
1,024
8,192
8,192
16 MB
4 KB
2 MB
2 MB
2 MB
✓
✓
✓
✓
✓
(100.00%)
(100.0%)
(100.0%)
(99.98%)
(100.0%)
0x200000
0x200000
0x200000
Types
Entropy
#Slots
Address Range
Align Base
Align Size
Broken by DrK?
0xffffffff80000000 – 0xffffffffc0000000
0xffffffffc0000000 – 0xffffffffc0400000
0x1000000
0x1000
0xfffff80000000000 – 0xfffff80400000000
0xfffff80000000000 – 0xfffff80400000000
256
0xffffff8000000000 – 0xffffff8020000000
Table 2: Summary of KASLR implementations in popular OSes. According to our experiment, all KASLR implementations we
tested generate a random address by adding a random offset to the fixed base address (i.e., kernel or module base) either at the
booting time or when loading modules. The numbers marked in blue color indicate varying, randomized ranges, so called entropy.
(*) Johnson and Miller [32] reported that Windows has 17-bit worth of entropy for the kernel and 19-bit for modules, but we have
only observed 13-bit of entropy during our experiments.
2.1 Kernel ASLR
ASLR is a comprehensive, popular defense mechanism
that mitigates memory corruption attacks in a probabilistic
manner. To exploit a memory corruption vulnerability,
such as use-after-free, attackers need to figure out the
memory layout of a target process or the system ahead
of time. ASLR mitigates such attacks by incorporating
a non-deterministic behavior in laying out the program’s
or system’s address space. More specifically, whenever
a program is loaded or a system is booted, the ASLR
mechanism randomizes their address spaces, including
code and data pages.
Since ASLR is highly effective in practice, most real
exploits first have to bypass ASLR (or KASLR) before
attempting to launch a real control-hijacking attack, such
as return-oriented programming (ROP). For example,
most web browser exploits demonstrated in the latest
Pwn2Own competition [42, 44] include one or more in-
formation leak vulnerabilities to bypass KASLR, thereby
escaping a user-level sandbox. For this reason, all major
commodity OSes, including Windows, Linux, and OS X,
as well as mobile OSes, including Android and iOS, have
deployed ASLR in user space and recently applied it to
kernel space.
Adoption. Figure 1 shows the timeline of the ASLR
deployment in popular OSes. Microsoft started sup-
porting KASLR since Windows Vista (2007) and Ap-
ple started its support from iOS 5 and OS X 10.8
(2012). Linux has provided KASLR as an option (i.e.,
CONFIG_RANDOMIZE_BASE=y) since kernel version 3.14
(2014) and, recently, popular distributions (e.g., Ubuntu
15.04) have enabled KASLR by default in their kernel.
Implementation. Table 2 summarizes how 64-bit com-
modity OSes implement KASLR for kernel text and mod-
ules in terms of entropy (i.e., amount of randomness) and
granularity (i.e., unit of randomization). The entropy of
KASLR is determined by the kernel address range (e.g.,
1 GB–16 GB) and the size of alignment, which is usually
a multiple of the page size (e.g., 4 KB–16 MB) for bet-
ter performance and memory utilization. For example,
Linux’s kernel address range is 1 GB (30 bits) and its
// the transaction starts
...
// this transaction successfully terminated
_xend();
1 // begin a transaction
2 if (_xbegin() == _XBEGIN_STARTED) {
3
4
5
6
7 } else {
8
9
10 }
Figure 2: A minimal code snippet that derives TSX: this exam-
ple executes the code block in the if-statement transactionally,
meaning that any error inside the code block makes it roll back.
// the transaction is aborted
abort_handler();
alignment size for kernel text is 16 MB (24 bits), so that
its KASLR entropy is only 6 bits (i.e., 64 slots for the
location). In contrast, Windows 10’s kernel address range
is 16 GB (34 bits) and its alignment size for kernel text is
2 MB (21 bits), so that its KASLR entropy is 13 bits (i.e.,
8,192 slots for the location). Thus, a set of all possible
randomized base addresses is
{base_address + s× align_size : 0 ≤ s < #slots}.
2.2
Intel TSX
In this section, we explain the basic concept of Intel
TSX to help understand the DrK attack. Intel TSX is
Intel’s implementation of hardware transactional memory
(HTM) [24, 37, 38, 58, 61]. HTM provides lock-less
synchronization among threads by ensuring transactional
execution at the hardware level; i.e., it enables concurrent
access to the shared memory by multiple threads and
discards any memory changes they made if a read-write
conflict, a write-write conflict, or any other error happens
during the transaction.
Note that this paper’s main concern is not how we ef-