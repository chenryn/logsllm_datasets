A=1A=0T1T2i1i3B=A+1C=A*2i2i4G[B]=falsecond=G[C]SYS_symlinkSYS_readlinkSYS_truncateif(flag & DIR)B=1if(size >= res)…… WRe1e2e3A=1B=A+1A=0C=A*2T1T2A=1B=A+1A=0C=A*2T1T2A=1B=A+1A=0C=A*2T1T2A=1B=A+1A=0C=A*2T1T2A=1B=A+1A=0C=A*2T1T2A=1B=A+1A=0C=A*2T1T2i3→i2i3→i2B=2, C=0B=1, C=0B=1, C=0i1→i4i1→i4B=2, C=0B=2, C=2B=2, C=2①②③④⑤⑥execution. As shown in Figure 2, in CFGs, execution flows
through basic blocks and user-controllable inputs, e.g., size in
SYS_truncate, determine the set of edges that join the basic
blocks. For a branch coverage-guided fuzzer: given an input
(e.g., a list of syscalls), it tracks the set of edges that are hit at
runtime and leverages this feedback to decide whether this input
is “useful” and should be kept for more mutations. Intuitively,
the fuzzer expects to probe more branches by mutating the
seed, and not surprisingly, once the branch coverage growth
stalls, the fuzzer will shift focus to other seeds.
In the case shown in Figure 2, exhausting all branches
sequentially will only yield the status of B==1, B==2, and
C==0. After that, these execution paths (represented by the
seeds covering them) will be de-prioritized and considered
non-interesting by the fuzzer. However, this is not the end of
the story. To trigger the data race when B==C==2, the execution
of four critical instructions (i1-i4) has to be interleaved in
a special way, as shown in Figure 3. Unfortunately, all six
interleavings yield the same branch coverage, and the fuzzer
is likely to give up the seed upon hitting a few of them.
Further note that this is an extremely simplified example
that involves only six possible interleavings among two threads.
In actual executions, the concurrency dimension can be huge,
as the instructions executed by each thread are usually in the
thousands or even millions, while there will be tens of threads
running at the same time. As a result, when fuzzing highly
concurrent programs, we need to pay attention to not only
code paths explored, but also meaningful thread interleavings
explored that yield to the same branch coverage. In other words,
if the fuzzer believes that there could be unexplored thread
interleavings in a seed, the seed should not be de-prioritized.
B. Alias coverage for the concurrency dimension
Intuition. At first thought, recording the exploration of thread
interleavings can be futile. A realistic kernel file system at
its peak time may use over 60 internal threads, where each
thread may execute over 100,000 instructions. The total possible
number of thread interleavings is 60100000, an enormous search
space that no bitmap can ever approximate.
However, it is worth noting that not all interleaved executions
are useful. In fact, only interleavings of memory-accessing
instructions to the same memory address matters. As shown
in Figure 2, interleaving instructions apart from i1-i4 has no
effect on the final results of B, C, as well as the manifestation
of the data race. This is true in the actual code, where hundreds
and thousands of instructions sit between i1, i3 and i2, i4.
In other words, based on the crucial observation that data
races, and even in the broader term, concurrency bugs, typically
involve unexpected interactions among a few instructions
executed by a small number of threads [7, 62, 63], if KRACE is
able to track how many interactions among these few memory-
accessing instructions have been explored, it is sufficient to
represent thread interleaving coverage and to find data races.
This is precisely what gets tracked by alias coverage.
A formal definition. First, suppose all memory-accessing
instructions in a program are uniquely labeled: i1, i2, ...., iN.
At runtime, each memory address M keeps track of its last
define operation, i.e., the last instruction that writes to it as
well as the context (thread) that issues the write, represented
by A ← . Now, in the case in which a new access to
M is observed, carried by instruction iy from context ty: if iy
is a write instruction, update A ←  to reflect the fact
that A is redefined. Otherwise:
• if tx == ty, i.e., same context memory access, do nothing,
• or else, record directed pair ix→iy in the alias coverage.
Figure 3 is a working example of this alias coverage tracking
rule. In cases 1 and 4 , there is no inter-context define-then-
use of memory address A, and hence, the alias coverage map is
empty. On the other hand, in cases 2 and 3 , the calculation
of B in T1 relies on A defined in T2, hence the pair i3→i2.
The same rule applies to cases 5 and 6 .
Feedback mechanism. Essentially, alias coverage provides a
signal to the fuzzer on whether it should expect more useful
thread interleavings out of the current test case, i.e., a multi-
threaded syscall sequence. If the alias coverage keeps growing,
the fuzzer should come up with more delay schedules to inject
at the memory-accessing instructions (detailed in §IV-B) in the
hope of probing unseen interleavings. Otherwise, if the coverage
growth stalls, it is a sign that the concurrency dimension of the
current test case is toward saturation, and the most economical
choice is to switch to other seeds for further exploration.
Coverage sensitivity fine-tuning. Finding one-suits-all cover-
age criteria has been a never-ending quest in software engineer-
ing [64]. Even the branch coverage has several variations, such
as N-gram branch coverage, context-sensitive coverage [52],
etc., which are well-documented and compared in a recent
survey [65]. However, despite the fact that branch coverage
is always subsumed by program whole-path coverage, branch
coverage is still preferred over path coverage, as the latter is
overly sensitive to input changes and thus requires a much
larger bitmap to hold and compare. On the other hand, branch
coverage strikes a balance among effectiveness, execution speed,
and bitmap accounting overhead.
Similarly, alias coverage strives to find such a balance point
in the concurrency dimension. In our experiments with kernel
file system fuzzing, KRACE observed 63,590 unique pairs of
alias instructions (directed access). Based on the data, for
an empirical estimation, a bitmap of size 128KB should be
sufficient to avoid heavy collisions, which is close to AFL’s
branch coverage bitmap size (64KB). In addition, if more
sensitivity is needed for alias coverage, KRACE can be easily
adopted from 1st-order alias pair (alias coverage) to 2nd-order
alias pair, Nth-order alias pair, and up-to total interleaving
coverage. We leave this for future exploration.
IV. INPUT GENERATION FOR CONCURRENCY FUZZING
In this section, we present how to synthesize and merge
multi-threaded syscall sequences for file system fuzzing, as
well as how to exploit a hidden input domain—thread delay
schedule—to accelerate thread interleaving probing.
5
Fig. 4: Illustration of four basic syscall sequence evolution strategies
supported in KRACE: mutation, addition, deletion, and shuffling. For
KRACE, each seed contains multi-threaded syscall sequences and each
thread trace is highlighted in different shades of grayscale.
Fig. 5: Semantic-preserving combination of two seeds. For KRACE,
each seed contains multi-threaded syscall sequences and each thread
trace is highlighted in different shades of grayscale.
A. Multi-threaded syscall sequences
Specification-based synthesization. The goal of syscall
generation and mutation is to generate diverse and complex file
operations that are otherwise difficult for human developers
to contemplate. Given that syscalls are highly structured data,
it is almost fruitless to mutate their arguments blindly. As
a result, we use a specification to guide the generation and
mutation of syscall arguments. A feature worth highlighting in
KRACE’s specification is the encoding of inter-dependencies
among syscalls, especially path components and file descriptors
(fd), which are most relevant to file system fuzzing. To illustrate,
as shown in Figure 5, the open syscall in seed 1 reuses the
same path component in the mkdir syscall, while the write
syscall in seed 2 relies on the return value of creat.
Seed format. The seed input for KRACE is a multi-threaded
syscall sequence. Internally, it is represented by a single list
of syscalls (a.k.a, the main list) and a configurable number
of sub-lists (3 in KRACE) in which each sub-list contains a
disjoint sequence of syscalls in the main list. Each sub-list
represents what will be executed by each thread at runtime. To
illustrate, as shown in Figure 5, seed 1 has three threads, where
each thread will be executing mkdir-close, mknod-open-close,
and dup2-symlink, respectively, marked in different grayscale.
Evolution strategies. KRACE uses four strategies to evolve a
seed for both branch and alias coverage, as shown in Figure 4.
• Mutation: a randomly picked argument in one syscall will
be modified according to specification. If a path compo-
nent is mutated, it is cascaded to all its dependencies.
• Addition: a new syscall can be added to any part of the
trace in any thread, but must be after its origins.
• Deletion: a random syscall is kicked out of the main list
and the sub-list. In case a file descriptor is deleted, its
dependencies are forced to re-select another valid file.
• Shuffling: syscalls in the main list are redistributed to
sub-lists, but their orders in the main list are preserved.
Merging multi-threaded seeds. The power of fuzzing lies
not only in evolving a single seed but also in joining two seeds
to produce more interesting test cases. To enable seed merging
in KRACE, a naive solution might be simply to concatenate
two traces. However, this is not the most economical use of
seeds, as it forgoes the opportunities to find new coverage by
further interleaving these high-quality executions.
KRACE adopts a more advanced merging scheme: upon
merging, the main lists of the two seeds are interweavingly
joined, i.e., the relative orders of syscalls are still preserved in
the resulting main list as well as in the sub-lists. As a result,
the syscall inter-dependencies are preserved too. As shown
in Figure 5, all the dependencies on path and fds are properly
preserved after merging (highlighted in corresponding colors).
Primitive collection. Successful syscalls are valuable assets
out of the file system fuzzing practice, not only because they
lead to significantly broader coverage than failed syscalls, but
also because they can be difficult, and sometimes even fortunate,
to generate due to the dependencies among them. This is true
especially for long traces of closely related syscalls. As a result,
upon discovering a new seed, KRACE first prunes it and retains
only successful syscalls and further splits these syscalls into
non-disjoint primitives where each primitive is self-contained,
i.e., for any syscall, all its path and fd dependencies (also
syscalls) are captured in the same primitive.
Over the course of fuzzing, KRACE has accumulated a
pool of around 10,000 primitives covering 68 file system
related syscalls for which KRACE has a specification. In each
primitive, file operations span across 3 threads, with each thread
containing 1-10 syscalls, and most importantly, all syscalls
succeed. We will open-source this collection in the hope that
these primitives may serve as quality seeds for future concurrent
file system fuzzing.
B. Thread scheduling control (weak form)
Thread scheduling is a hidden input domain for concur-
rency programs. Unfortunately, there is no way to control
kernel scheduling by merely mutating syscall traces. Hooking
the scheduling implementation (or using a hypervisor) and
systematically permuting the schedules might be possible
for small-scale programs [63] or for a few user threads in
the kernel [7, 24]. But these algorithms are far from being
6
• no locks are commonly held by both contexts, tx and ty,
at the time when memory operations ix and iy are issued
from them, respectively.