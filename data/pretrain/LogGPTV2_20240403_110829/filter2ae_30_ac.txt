会弹出一个确认框询问是否打开 samba 路径，需要一次额外的用户确认。
还是直接 DOM RCE 好使……
## 5.Dictionary XSS 到命令执行
mac 系统有一个自带的词典应用，词条的界面实际上是基于 WebView 渲染的 HTML。通常情况下 Dictionary
不会随意加载第三方网页，除了这一次。这一串漏洞利用便是前文提到的，在天府杯前两个月被修补掉的问题。
在 Safari 的沙箱配置文件中有这样一个服务：
    (global-name "com.apple.mobileassetd")
服务访问的对象是 mobileassetd 进程。其实除了系统软件版本更新之外，一些资源文件（assets）会定期从 apple 官方网站通过 OTA
的方式更新。这些文件存在 /System/Library/Assets(V2?) 目录下，通常受到 SIP 保护，即使有 root 权限也无法修改，只有
mobileassetd 等特殊权限的进程才可以更新。这类资源包括词典、字体等不可执行的文件，访问它们要用到私有 API 框架 MobileAsset
当中的 ASAssetQuery 和 ASAsset 类。
首先我们创造一个查询实例，获得其 results 数组，当中便是所有的 ASAsset 对象：
    const static NSString *kVictim = @"com.apple.dictionary.AppleDictionary";
    [[ASAssetQuery alloc] initWithAssetType:kType];
    [query runQueryAndReturnError:&err];
    NSArray *results = [query results];
通过修改 ASAsset 对象的如下属性，并执行其 beginDownloadWithOptions: 方法，可以诱导 mobileassetd
从任意网址下载资源并替换本地的文件：
· __BaseURL
· __RelativePath
· __RemoteURL
· _DownloadSize（压缩包的大小）
· _UnarchivedSize（解压后的大小）
· _Measurement（校验值）
到这一步我们正好可以在 Safari 的沙箱内通过强制 OTA 的方式，让系统下载任意的词典资源，我们便有机会向 Dictionary.app 当中注入任意
js 代码了。
来看看 Dictionary 里可以干什么。
    a = document.createElement('a');
    a.href = 'file:///Applications/Calculator.app';
    a.click()
这一段代码匪夷所思地可以从 Dictionary 的 WebView 里直接运行计算器。而 location 赋值跳转的方式并不起作用，为什么？
让我们来到这个函数 -[DictionaryController
webView:decidePolicyForNavigationAction:request:frame:decisionListener:]:
    element = action[WebActionElementKey];
    url = element[WebElementLinkURLKey];
    if (!url)
      url = action[WebActionOriginalURLKey];
    ...
    [[NSWorkspace sharedWorkspace] openURL:url];
这个方法处理 WebView 的跳转事件，真对 WebActionElementKey 的情况来取出 URL，最后用 -[NSWorkspace
openURL:] 方法执行本地应用，也就是只处理了表单提交、链接点击等事件，而不管 location 的跳转。如果只熟悉
XSS，而不对程序进行逆向，就可能错过这个点。
再看前面 mobileassetd 的漏洞可以在后台下载解压任意文件。一个很有利的点在于，通过 OTA 方式下载的文件和浏览器下载不同，不会给文件打上“来自
Internet”的标记。假如里面包含可执行的应用，运行的时候不会触发 GateKeeper 检查，直接运行。因此直接编译一个可执行的 .app
文件包含在词典的包当中，再通过这个跳转漏洞直接打开即可绕过沙箱执行任意命令。
在 macOS 10.15 开发者测试版上，这个打开 URL 的操作被修复过了，只有 http 和 https URL
才会允许打开，也导致了我们之前的利用代码栽在了最后一步命令执行上。假设仍然在 10.14
存在问题的版本，这中间显然还有一段缺口没解决。我们可以在沙箱里任意下载替换词典，那么怎么样才可以从浏览器沙箱里直接打开词典？
虽然 dict:///apple 的 URL scheme 可以直接跳转到某个词条，但 dict:
不在我们前文提到的信任名单中，浏览器会询问用户。这时候就要请出一个小功能的帮忙了。
如图所示，mac 下的浏览器可以直接通过 ForceTouch 的方式打开一个浮动窗口，就是一个精简版的 Dictionary 界面。这个界面来自
LookupViewService 进程，也是一个 WebView。
通过阅读 WebView 的源代码，笔者找到一个叫做
WebKit::WebPage::performDictionaryLookupOfCurrentSelection() 的方法。这个方法可以在
WebProcess（沙箱中）通过 WebKit 内置的进程间通信发送给主进程，接着主进程就会打开 LookupViewService
界面载入指定单词的解释。这个过程不需要用户确认，因此我们获得了第一个跨进程 XSS。
在 LookupViewService 中注入任意 js 代码之后，通过一行简单的 location 跳转即可打开 Dictionary，触发第二次跨进程
XSS：
    location = "dict://ExploitStage2"
这时用前文提到的漏洞执行词典当中包含的恶意 app 即可。
有趣的是，在这个漏洞链条当中用到的三个中间进程——mobileassetd、LookupViewService 和 Dictionary.app
全都是有各自的沙箱的。这又得说到 NSWorkspace 启动进程的特点上。通过 openURL 这种方式运行的 app，最后会调用
LaunchService，启动出来的应用和调用者并不存在父进程子进程的关系，也不会继承前者的 sandbox profile，只要求调用者有 lsopen
权限。而 Dictionary.app 正好满足。
这个 MobileAsset 的漏洞还有一个神奇的副作用。在 mac 上这个 XSS 影响本地的词典应用，而在 iOS
上问题同样存在。在覆盖了本地词典之后，被攻击的 iPhone 在桌面上查询英文单词的定义时，会在 SpringBoard 进程里打开一个词典界面。
由于这个界面所在的进程 SpringBoard 没有沙箱，而且使用到了 UIWebView
进行网页渲染，可以导致恶意脚本可以无限制地使用绝对路径读取本地文件并上传，例如相册和所有的联系人、通话记录和短信。此外，只要有不涉及到 JIT 的
WebKit 浏览器引擎漏洞，攻击者便可以获得沙箱外完整的代码执行权限。这是一个潜在的持久化攻击向量。
我们把这个问题作为附加分析一同报告给了苹果，在 iOS 12 之后换成了更安全的 WKWebView。
## 6.总 结
本议题提出了一种特殊的思路来完成 Safari 浏览器沙箱逃逸，将大家熟悉不过的 XSS 从 Web
领域迁移到跨进程通信的场景上，得到了“老树开新花”的效果。结合其他浏览器渲染引擎漏洞，可实现全链路的利用。
相比流行的思路，纯逻辑漏洞可以获得百发百中的稳定性，以及完全无视针对内存安全问题设计的各种缓解措施。不过，这些漏洞虽然都可以完美利用，但由于涉及跨 App
的跳转等操作，会出现肉眼可感知的现象，对攻击者而言不是最理想的方案。
本文也带来了一些启示。对于开发维护者，历史遗留组件可能拖累整个系统的安全性。如何在保证系统可用性的同时，尽可能地抛弃历史包袱，是一个需要考虑的问题。而对于攻击者来说，跨组件之间小问题的有机结合常常会带来让人意想不到的效果。
## 关于作者
**蚂蚁安全光年实验室** 隶属于蚂蚁安全九大实验室之一，通过对基础软件及设备的安全研究，达到全球顶尖破解能力，致力于保障蚂蚁集团及行业金融级基础设施安全。
因发现并报告行业系统漏洞，蚂蚁安全光年实验室上百次获得Google、Apple等国际厂商致谢。
* * *