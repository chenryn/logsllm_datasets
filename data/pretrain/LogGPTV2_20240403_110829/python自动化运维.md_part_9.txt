“0：%H”0表示数字对齐格线，%H表示标签以小时显示
rrdtool.graph（ "Flow.png"， "--start"， "-1d"，"--vertical-label=Bytes/s"，\
"--x-grid"，"MINUTE：12：HOUR：1：HOUR：1：0：%H"，\
"--width"，"650"，"--height"，"230"，"--title"，title，
"DEF：inoctets=Flow.rrd：eth0_in：AVERAGE"， #指定网卡入流量数据源DS及CF
"DEF：outoctets=Flow.rrd：eth0_out：AVERAGE"， #指定网卡出流量数据源DS及CF
"CDEF：total=inoctets，outoctets，+"， #通过CDEF合并网卡出入流量，得出总流量
total
"LINE1：total#FF8833：Total traffic"， #以线条方式绘制总流量
"AREA：inoctets#00FF00：In traffic"， #以面积方式绘制入流量
"LINE1：outoctets#0000FF：Out traffic"， #以线条方式绘制出流量
"HRULE：6144#FF0000：Alarm value\\r"， #绘制水平线，作为告警线，阈值为6.1k
"CDEF：inbits=inoctets，8，*"， #将入流量换算成bit，即*8，计算结果给inbits
"CDEF：outbits=outoctets，8，*"， #将出流量换算成bit，即*8，计算结果给outbits
"COMMENT：\\r"， #在网格下方输出一个换行符
"COMMENT：\\r"，
"GPRINT：inbits：AVERAGE：Avg In traffic\： %6.2lf %Sbps"， #绘制入流量平均值
"COMMENT： "，
"GPRINT：inbits：MAX：Max In traffic\： %6.2lf %Sbps"， #绘制入流量最大值
"COMMENT： "，
"GPRINT：inbits：MIN：MIN In traffic\： %6.2lf %Sbps\\r"， #绘制入流量最小值
"COMMENT： "，
"GPRINT：outbits：AVERAGE：Avg Out traffic\： %6.2lf %Sbps"， #绘制出流量平均
值
"COMMENT： "，
"GPRINT：outbits：MAX：Max Out traffic\： %6.2lf %Sbps"， #绘制出流量最大值
"COMMENT： "，
"GPRINT：outbits：MIN：MIN Out traffic\： %6.2lf %Sbps\\r"） #绘制出流量最小
值
以上代码将生成一个Flow.png文件，如图3-13所示。
提示
查看rrd文件内容有利于观察数据的结构、更新等情况，rrdtool提供几个常用
命令：
·info查看rrd文件的结构信息，如rrdtool info Flow.rrd；
·first查看rrd文件第一个数据的更新时间，如rrdtool first Flow.rrd；
·last查看rrd文件最近一次更新的时间，如rrdtool last Flow.rrd；
·fetch根据指定时间、CF查询rrd文件，如rrdtool fetch Flow.rrd AVERAGE。
图3-13 graph.py执行输出图表
参考提示 3.2.1rrdtool参数说明参考http://bbs.chinaunix.net/thread-
2150417-1-1.html和http://oss.oetiker.ch/rrdtool/doc/index.en.html。
3.3 生成动态路由轨迹图
scapy（http://www.secdev.org/projects/scapy/）是一个强大的交互式数据包处
理程序，它能够对数据包进行伪造或解包，包括发送数据包、包嗅探、应答和
反馈匹配等功能。可以用在处理网络扫描、路由跟踪、服务探测、单元测试等
方面，本节主要针对scapy的路由跟踪功能，实现TCP协议方式对服务可用性的
探测，比如常用的80（HTTP）与443（HTTPS）服务，并生成美观的路由线路图
报表，让管理员清晰了解探测点到目标主机的服务状态、骨干路由节点所处的
IDC位置、经过的运营商路由节点等信息。下面详细进行介绍。
scapy模块的安装方法如下：
# scapy模板需要tcpdump程序支持，生成报表需要graphviz、ImageMagick图像处理包支持
# yum -y install tcpdump graphviz ImageMagick
# 源码安装
# wget http：//www.secdev.org/projects/scapy/files/scapy-2.2.0.tar.gz
# tar -zxvf scapy-2.2.0.tar.gz
# cd scapy-2.2.0
# python setup.py install
3.3.1 模块常用方法说明
scapy模块提供了众多网络数据包操作的方法，包括发包send（）、
SYN\ACK扫描、嗅探sniff（）、抓包wrpcap（）、TCP路由跟踪traceroute（）
等，本节主要关注服务监控内容接下来详细介绍traceroute（）方法，其具体定
义如下：
traceroute（target，dport=80，minttl=1，maxttl=30，sport=
，l4=None，filter=None，timeout=2，verbose=None，**kargs）
该方法实现TCP跟踪路由功能，关键参数说明如下：
·target：跟踪的目标对象，可以是域名或IP，类型为列表，支持同时指定多
个目标，如["www.qq.com"，"www.baidu.com"，"www.google.com.hk"]；
·dport：目标端口，类型为列表，支持同时指定多个端口，如[80，443]；
·minttl：指定路由跟踪的最小跳数（节点数）；
·maxttl：指定路由跟踪的最大跳数（节点数）。
3.3.2 实践：实现TCP探测目标服务路由轨迹
在此次实践中，通过scapy的traceroute（）方法实现探测机到目标服务器的
路由轨迹，整个过程的原理见图3-14，首先通过探测机以SYN方式进行TCP服务
扫描，同时启动tcpdump进行抓包，捕获扫描过程经过的所有路由点，再通过
graph（）方法进行路由IP轨迹绘制，中间调用ASN映射查询IP地理信息并生成
svg流程文档，最后使用ImageMagick工具将svg格式转换成png，流程结束。
图3-14 TCP探测目标服务路由轨迹原理图
本次实践通过traceroute（）方法实现路由的跟踪，跟踪结果动态生成图片格
式。功能实现源码如下：
【/home/test/scapy/simple1.py】
# -*- coding： utf-8 -*-
import os，sys，time，subprocess
import warnings，logging
warnings.filterwarnings（"ignore"， category=DeprecationWarning） #屏蔽scapy无
用告警信息
logging.getLogger（"scapy.runtime"）.setLevel（logging.ERROR） #屏蔽模块IPv6多余
告警
from scapy.all import traceroute
domains = raw_input（'Please input one or more IP/domain： '） #接受输入的域名或
IP
target = domains.split（' '）
dport = [80] #扫描的端口列表
if len（target） >= 1 and target[0]！=''：
res，unans = traceroute（target，dport=dport，retry=-2） #启动路由跟踪
res.graph（target="> test.svg"） #生成svg矢量图形
time.sleep（1）
subprocess.Popen（"/usr/bin/convert test.svg test.png"， shell=True） #svg
转png格式
else：
print "IP/domain number of errors，exit"
代码运行结果见图3-15，“-”表示路由节点无回应或超时；“11”表示扫描的指
定服务无回应；“SA”表示扫描的指定服务有回应，一般是最后一个主机IP。
图3-15 代码运行结果
生成的路由轨迹图见图3-16（仅局部），“-”将使用unk*单元代替，重点路由
节点将通过ASN获取所处的运营商或IDC位置，如
IP“202.102.69.210”为“CHINANET-JS-AS-AP AS Number for CHINANET jiangsu
province backbone，CN”意思为该IP所处中国电信江苏省骨干网。
图3-16 路由轨迹图
通过路由轨迹图，我们可以非常清晰地看到探测点到目标节点的路由走向，
运营商时常会做路由节点分流，不排除会造成选择的路由线路不是最优的，该
视图可以帮助我们了解到这个信息。另外IE8以上及chrome浏览器都已支持SVG
格式文件，可以直接浏览，无需转换成png或其他格式，可以轻松整合到我们的
运营平台当中。
参考提示 3.3.1节scapy方法参数说明参考
http://www.secdev.org/projects/scapy/doc/usage.html。
第4章 Python与系统安全
信息安全是运维的根本，直接关系到企业的安危，稍有不慎会造成灾难性的
后果。比如近年发生的多个知名网站会员数据库外泄事件，另外，国内知名漏
洞报告平台乌云也频频爆出各大门户的安全漏洞。因此，信息安全体系建设已
经被提到了前所未有的高度。如何提升企业的安全防范水准是目前普遍面临的
问题，大体上主要分以下几个方面，包括安全设备防护、提高人员安全意识、
实施系统平台安全加固、安全规范融合到ITIL体系、关注最新安全发展动向等，
通过上述几个方面可以在很大程度上避免出现安全事故。本章主要讲述如何通
过Python来实现系统级的安全防范策略，包括构建集中式的病毒扫描机制、端口
安全扫描、安全密码生成等。
4.1 构建集中式的病毒扫描机制
Clam AntiVirus（ClamAV）是一款免费而且开放源代码的防毒软件，软件与
病毒库的更新皆由社区免费发布，官网地址：http://www.clamav.net/lang/en/。目
前ClamAV主要为Linux、Unix系统提供病毒扫描、查杀等服务。
pyClamad（http://xael.org/norman/python/pyclamd/）是一个Python第三方模块，
可让Python直接使用ClamAV病毒扫描守护进程clamd，来实现一个高效的病毒检
测功能，另外，pyClamad模块也非常容易整合到我们已有的平台当中。下面详
细进行说明。
pyClamad模块的安装方法如下：
# 1、客户端（病毒扫描源）安装步骤
# yum install -y clamav clamd clamav-update #安装clamavp相关程序包
# chkconfig --levels 235 clamd on #添加扫描守护进程clamd系统服务
# /usr/bin/freshclam #更新病毒库，建议配置到crontab中定期更新
# setenforce 0 #关闭SELinux，避免远程扫描时提示无权限的问题
# 更新守护进程监听IP配置文件，根据不同环境自行修改监听的IP，“0.0.0.0”为监听所有主机IP
# sed -i -e '/^TCPAddr/{ s/127.0.0.1/0.0.0.0/； }' /etc/clamd.conf
# /etc/init.d/clamd start #启动扫描守护进程
# 2、主控端部署pyClamad环境步骤
# wget http：//xael.org/norman/python/pyclamd/pyClamd-0.3.4.tar.gz
# tar -zxvf pyClamd-0.3.4.tar.gz
# cd pyClamd-0.3.4
# python setup.py install
4.1.1 模块常用方法说明
pyClamad提供了两个关键类，一个为ClamdNetworkSocket（）类，实现使用
网络套接字操作clamd；另一个为ClamdUnixSocket（）类，实现使用Unix套接字
类操作clamd。两个类定义的方法完全一样，本节以ClamdNetworkSocket（）类
进行说明。
·__init__（self，host='127.0.0.1'，port=3310，timeout=None）方法，是
ClamdNetworkSocket类的初始化方法，参数host为连接主机IP；参数port为连接
的端口，默认为3310，与/etc/clamd.conf配置文件中的TCPSocket参数要保持一
致；timeout为连接的超时时间。
·contscan_file（self，file）方法，实现扫描指定的文件或目录，在扫描时发
生错误或发现病毒将不终止，参数file（string类型）为指定的文件或目录的绝对
路径。
·multiscan_file（self，file）方法，实现多线程扫描指定的文件或目录，多核
环境速度更快，在扫描时发生错误或发现病毒将不终止，参数file（string类型）
为指定的文件或目录的绝对路径。
·scan_file（self，file）方法，实现扫描指定的文件或目录，在扫描时发生错
误或发现病毒将终止，参数file（string类型）为指定的文件或目录的绝对路径。
·shutdown（self）方法，实现强制关闭clamd进程并退出。
·stats（self）方法，获取Clamscan的当前状态。
·reload（self）方法，强制重载clamd病毒特征库，扫描前建议做reload操作。
·EICAR（self）方法，返回EICAR测试字符串，即生成具有病毒特征的字符
串，便于测试。
4.1.2 实践：实现集中式的病毒扫描
本次实践实现了一个集中式的病毒扫描管理，可以针对不同业务环境定制扫
描策略，比如扫描对象、描述模式、扫描路径、调度频率等。示例实现的架构
见图4-1，首先业务服务器开启clamd服务（监听3310端口），管理服务器启用多
线程对指定的服务集群进行扫描，扫描模式、扫描路径会传递到clamd，最后返
回扫描结果给管理服务器端。
图4-1 集群病毒扫描架构图
本次实践通过ClamdNetworkSocket（）方法实现与业务服务器建立扫描
socket连接，再通过启动不同扫描方式实施病毒扫描并返回结果。实现代码如
下：
【/home/test/pyClamad/simple1.py】
#！/usr/bin/env python
# -*- coding： utf-8 -*-
import time
import pyclamd
from threading import Thread
class Scan（Thread）：
def __init__ （self，IP，scan_type，file）：
"""构造方法，参数初始化"""
Thread.__init__（self）
self.IP = IP
self.scan_type=scan_type
self.file = file
self.connstr=""
self.scanresult=""
def run（self）：
"""多进程run方法"""
try：
cd = pyclamd.ClamdNetworkSocket（self.IP，3310） #创建网络套接字
连接对象
if cd.ping（）： #探测连通性
self.connstr=self.IP+" connection [OK]"
cd.reload（） #重载clamd病毒特征库，建议更新病毒库后做reload（）操
作
if self.scan_type=="contscan_file"： #选择不同的扫描模式
self.scanresult="
{0}\n".format（cd.contscan_file（self.file））
elif self.scan_type=="multiscan_file"：
self.scanresult="
{0}\n".format（cd.multiscan_file（self.file））
elif self.scan_type=="scan_file"：
self.scanresult="
{0}\n".format（cd.scan_file（self.file））
time.sleep（1） #线程挂起1秒
else：
self.connstr=self.IP+" ping error，exit"
return
except Exception，e：
self.connstr=self.IP+" "+str（e）
IPs=['192.168.1.21'，'192.168.1.22'] #扫描主机列表
scantype="multiscan_file" #指写扫描模式，支持multiscan_file、contscan_file、
scan_file
scanfile="/data/www" #指定扫描路径
i=1
threadnum=2 #指定启动的线程数
scanlist = [] #存储扫描Scan类线程对象列表
for ip in IPs：
currp = Scan（ip，scantype，scanfile） #创建扫描Scan类对象，参数（IP，扫描模
式，扫描路径）
scanlist.append（currp） #追加对象到列表
if i%threadnum==0 or i==len（IPs）： #当达到指定的线程数或IP列表数后启动、退出
线程
for task in scanlist：
task.start（） #启动线程
for task in scanlist：
task.join（） #等待所有子线程退出，并输出扫描结果
print task.connstr #打印服务器连接信息
print task.scanresult #打印扫描结果
scanlist = []
i+=1
通过EICAR（）方法生成一个带有病毒特征的文件/tmp/EICAR，代码如下：
void = open（'/tmp/EICAR'，'w'）.write（cd.EICAR（））
生成带有病毒特征的字符串内容如下，复制文件/tmp/EICAR到目标主机的扫
描目录当中，以便进行测试。
#cat /tmp/EICAR
u'X5O！P%@AP[4\\PZX54（P^）7CC）7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE！$H+H*'
最后，启动扫描程序，在本次实践过程中启用两个线程，可以根据目标主机
数量随意修改，代码运行结果如图4-2，其中192.168.1.21主机没有发现病
毒，192.168.1.22主机发现了病毒测试文件EICAR。