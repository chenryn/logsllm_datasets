![](OEBPS/Images/273-3-i.jpg){.calibre660}
:::
7）运行时动态调用Lua脚本。该功能可以通过Lua脚本动态调用Java代码。使用场景：可以动态调用解密函数，完成解密。可以动态触发特定逻辑：
::: bodypic-c
![](OEBPS/Images/273-4-i.jpg){.calibre430}
:::
8）相关命令执行结果查看。命令执行结果：
::: bodypic-c
![](OEBPS/Images/273-5-i.jpg){.calibre661}
:::
敏感API调用监控输出结果：
::: bodypic-c
![](OEBPS/Images/273-6-i.jpg){.calibre101}
:::
[]{#111.xhtml}
#### 18.5 工具使用案例 {.bodycontent-title2}
下面就要用一个案例来看看这个工具到底如何使用，有哪些功效。案例是捕鱼达人v1.0.1版本，具体的apk文件可以自行去网上搜索。安装游戏之后，然后顺便把上面的ZjDroid模块工具也安装上，之后进行重启生效。
最好是单独开一个CMD窗口用来查看打印结果，但是从上面的命令可以看到，应该需要这游戏的包名和进程id，那么这两个数据怎么获取呢？其实在前几章已经介绍很多次，用一个命令即可：adb
shell dumpsys activity
top。如下所示，但是这时候需要运行起来捕鱼达人游戏：
::: bodypic-c
![](OEBPS/Images/273-7-i.jpg){.calibre662}
:::
使用命令就可以获取到游戏的包名org.cocos2d.fishingjoy3和进程id=25304，这两个数据非常重要，这里可以先进行保管，进而后面使用。
下面首先来看一下这个应用用了哪些敏感的API数据，使用上面查看日志的命令即可：
::: bodypic-c
![](OEBPS/Images/273-8-i.jpg){.calibre101}
:::
运行结果如下所示：
::: bodypic-c
![](OEBPS/Images/274-i.jpg){.calibre663}
:::
这里有网络请求信息、网络切换的广播等数据，感觉这个工具的功能还是蛮多的。
下面再来看一下这个应用的dex文件信息，可以使用下面命令即可：
::: bodypic-c
![](OEBPS/Images/274-2-i.jpg){.calibre100}
:::
运行之后的结果如下所示：
::: bodypic-c
![](OEBPS/Images/274-3-i.jpg){.calibre664}
:::
这时候会发现，运行没有看到实际效果，原因是需要通过日志才能看到数据，因为上面命令运行的结果都是需要通过这个日志才可以看到的：
::: bodypic-c
![](OEBPS/Images/274-4-i.jpg){.calibre665}
:::
查看日志信息，结果如下所示：
::: bodypic-c
![](OEBPS/Images/274-5-i.jpg){.calibre666}
:::
这里可以看到具体的信息，看到有一个filepath，这就是后续有些命令需要用到的dex路径，所以一定要记下来。
接下来看一个关于dump出游戏中所有的类名的命令：
::: bodypic-c
![](OEBPS/Images/274-6-i.jpg){.calibre112}
:::
这里的路径就是上面获取到的apk路径，结果还需要通过上面的日志命令才可以看到，如下所示：
::: bodypic-c
![](OEBPS/Images/275-i.jpg){.calibre667}
:::
这就导出了游戏包含的所有类名了。
最后来看如何脱壳，这是最关键的，也是本章的重点，当然也是这个工具最实用的一个功能。而本章用的游戏也是经过加固处理的，可以反编译看看这个游戏，如图18-3所示。
::: bodypic-c
![](OEBPS/Images/18a3-i.jpg){.calibre668}
:::
图18-3 游戏加固图
会发现没几个类，而且有一个Application类，那么可以认定这个游戏被加固了，这里不介绍是使用哪家的加固平台操作了，也不再使用IDA等工具去动态调试脱壳了，这里直接使用这个工具进行操作即可。为了后续代码阅读方便，可以直接获取它的smali代码，使用这个命令：
::: bodypic-c
![](OEBPS/Images/275-2-i.jpg){.calibre102}
:::
这个命令的运行结果通过日志查看，如下所示：
::: bodypic-c
![](OEBPS/Images/276-i.jpg){.calibre669}
:::
而这个smali文件夹是存放在应用的/data/app/org.cocos2d.fishingjoy3/smali中，可以把它拷贝出来即可，如图18-4所示。
::: bodypic-c
![](OEBPS/Images/18a4-i.jpg){.calibre670}
:::
图18-4 dump出游戏之后的smali代码
可以看到成功脱壳了，生成了游戏的所有smali文件代码。这个脱壳操作和后面章节介绍使用IDA工具进行脱壳的原理都差不多，因为应用程序不管怎么加固，最终都会使用一个系统函数将dex文件加载到内存中，而加载之前肯定要进行解密操作，只要在加载之前解密之后进行拦截即可。
[]{#112.xhtml}
#### 18.6 本章小结 {.bodycontent-title2}
本章介绍了基于Xposed框架的脱壳神器ZjDroid的实现原理以及具体用法，从而使读者感受到Xposed框架的强大之处。当然本章只讲了一部分功能，还可以利用这个框架编写游戏外挂等操作。可以慢慢地解读这个框架的源码，能够学习到很多知识点。
[]{#113.xhtml}
### 第19章 Native层Hook神器Cydia Substrate {.bodycontent-title4}
前面介绍了Android中一款hook神器Xposed，本章介绍另外一个hook神器Cydia
Substrate，当逆向游戏和应用的时候遇到so文件中的一个重要方法，这时候就想进行hook操作，但是Xposed几乎没法用，就需要使用这个框架了。这个框架的优点在于Hook底层函数非常方便，对so中的函数进行hook操作非常便捷。
[]{#114.xhtml}
#### 19.1 环境搭建 {.bodycontent-title2}
先介绍这个框架如何安装使用，操作的环境如下：
·设备系统：小米三+原生CM 4.4系统
·框架版本：0.9.4010
·是否root：必须root
关于这个环境，可能有的同学操作最大的问题就在于设备和系统，用不同设备、不同系统，可能安装会失败，具体问题可能需要自己去解决了。关于框架apk和功能jar包下载地址可以去官网：[http://www.cydiasubstrate.com](http://www.cydiasubstrate.com){.calibre32
.pcalibre}。
[]{#115.xhtml}
#### 19.2 Hook Java层功能 {.bodycontent-title2}
搭建好了环境，下面就直接操作了。首先来看看如何Hook Java层功能。
[第一步：]{.yanse}导入jar包
在Eclipse中新建一个Android工程，将下载好的框架的jar包拷贝到工程的libs目录下即可，如图19-1所示。
::: bodypic-c
![](OEBPS/Images/19a1-i.jpg){.calibre671}
:::
图19-1 导入jar包\
[第二步：]{.yanse}编写Hook入口类
具体API不多介绍了，就那么几个，没必要详细讲。下面代码对系统的imei进行Hook操作了：
::: bodypic-c
![](OEBPS/Images/278-i.jpg){.calibre672}
:::
下面代码是对系统的颜色值进行了Hook：
::: bodypic-c
![](OEBPS/Images/278-2-i.jpg){.calibre673}
:::
[第三步：]{.yanse}配置XML信息
在AndroidManifest.xml中需要配置两个地方：一个是使用权限，一个是声明hook的入口类。
::: bodypic-c
![](OEBPS/Images/279-i.jpg){.calibre674}
:::
[第四步：]{.yanse}安装运行
代码编写完成之后，直接运行安装即可，前提是需要正确安装Cydia
Substrate框架程序，安装成功界面如图19-2所示。
安装Hook项目时会出现提示，如图19-3所示。
点击按钮，进入框架界面，点击重启即可。然后查看系统界面颜色以及返回的imei值，如图19-4所示。
::: bodypic-c
![](OEBPS/Images/19a2-i.jpg){.calibre675}
:::
图19-2 安装成功
::: bodypic-c
![](OEBPS/Images/19a3-i.jpg){.calibre676}
:::
图19-3 提示安装Hook项目
::: bodypic-c
![](OEBPS/Images/19a4-i.jpg){.calibre677}
:::
图19-4 框架界面
查看颜色的确变成粉色了，再看看imei值的修改：
::: bodypic-c
![](OEBPS/Images/279-2-i.jpg){.calibre678}
:::
imei值也Hook成功了。到这里就用Cydia
Substrate框架Hook了Java层功能。之前提到的Xposed框架也是可以做到这些功能的。
[]{#116.xhtml}
#### 19.3 Hook Native层功能 {.bodycontent-title2}
下面继续来看如何Hook Native层的功能，也是本章的重点。
###### 第一步：创建一个Native项目 {.section-subtitle}
这里用Eclipse操作，简单便捷，有很多人问为什么不用AS，这要看每个人的使用习惯。虽然AS工具是主流，不过本人还是习惯用Eclipse，如图19-5所示。
###### 第二步：导入Substrate的Native功能包 {.section-subtitle}
需要导入一个substrate.h头文件，和两个so功能包。Native层应用都是这么操作的，提供一个头文件告诉你API，具体实现在so包中。
::: bodypic-c
![](OEBPS/Images/19a5-i.jpg){.calibre679}
:::
图19-5 创建Native项目\
###### 第三步：寻找Hook的函数名 {.section-subtitle}
这里网上没有好的hook代码，为了更好的了解这个工具的厉害之处，弄一个比较实际的案例就是hook系统加载dex的函数，这样就可以获取到每个应用的dex文件了，这种方式对于早期加固是一个比较好的脱壳方案。在之前介绍脱壳会使用IDA在指定函数处下个断点，这里如果要hook的话，就需要找到这个加载dex的函数名称，一定要记的是导出的函数名。
下面就用IDA来查找需要Hook的函数名，首先导出设备的libdvm.so文件：system/lib/libdvm.so
::: bodypic-c
![](OEBPS/Images/280-i.jpg){.calibre680}
:::
然后使用IDA打开，寻找加载dex函数，如图19-6所示。
::: bodypic-c
![](OEBPS/Images/19a6-i.jpg){.calibre681}
:::
图19-6 寻找加载dex函数
切换到Exports视图页面，然后搜索dexFileParse函数，点进去：
::: bodypic-c
![](OEBPS/Images/280-2-i.jpg){.calibre682}
:::
需要得到的是EXPORT函数，需要Hook的是它，一定要注意函数，不然Hook没效果的。找到函数之后还得获取函数的参数类型和返回类型，这个也好办，因为有Android源码，所以直接在源码中找这个函数参数说明、已经返回值说明即可。因为Native层Hook的其实是函数指针的替换，所以如果想Hook原来的函数，必须新建一个和原来一样的函数功能，然后传递函数指针即可。这个函数的参数和返回值定义如下：
::: bodypic-c
![](OEBPS/Images/280-3-i.jpg){.calibre683}
:::
参数含义非常简单，第一个参数表示dex文件的起始地址，第二个参数是dex文件的长度，有这两个参数就可以写入文件了。这里需要获取DexFile类型，这个直接在Android源码目录下找到这个头文件DexFile.h即可。然后导入工程中。这样就找到了需要hook的函数，下面就开始编写hook代码了。
###### 第四步：编写hook代码 {.section-subtitle}
在编写hook代码之前，需要考虑这几件事：
·hook之后的dex存在哪？怎么存？这里直接通过当前的pid值获取进程名，然后将其作为dex的文件名，这样每个进程的dex文件名就不会冲突了。这里要理解一点：一个进程对应一个DVM，加载一个dex文件。所以这里hook其实就是注入每个进程，在每个进程中hook每个函数功能。
·需要过滤系统进程，并不是所有的进程都是想要hook的，而且这些进程未必有dex文件，比如鼻祖进程zygote，而这些进程过滤规则，需要自己打印看结果，然后构造。
下面开始写代码了，首先定义想要hook的so文件：
::: bodypic-c
![](OEBPS/Images/281-i.jpg){.calibre684}
:::
主要是第二个参数，是需要hook的so路径。然后在入口处开始hook代码：
::: bodypic-c
![](OEBPS/Images/281-2-i.jpg){.calibre685}
:::