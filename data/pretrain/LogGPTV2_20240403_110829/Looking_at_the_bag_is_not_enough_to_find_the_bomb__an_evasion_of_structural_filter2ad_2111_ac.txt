### Testing the Classifier with a New Sample

1. **Start**
2. **Is the sample labeled Malicious?**
   - **Yes**: End
   - **No**: 
     - **Malicious Region**
     - **Benign Region**
     - **Decision Boundary**
     - **Benign Sample!**
     - **Malicious Sample!**

**Figure 7:** Differences between the beginning of the trees in benign and malicious samples.

**Figure 8:** An example of a PDF embedded object.

In the figure, the object number is changed from 176 to 182. These objects are typically associated with actions such as code execution or, in the case of benign files, form filling. The presence of these objects makes the file more suspicious, but it does not constitute definitive proof of maliciousness. Figure 7 better illustrates the changes introduced by the new version to the logical tree.

**Object 182** contains the JavaScript keyword, which automatically triggers a launch action on the embedded file, described by the keyword `EmbeddedFiles`, which is contained within stream 181. This is known as the CVE-2010-1240 vulnerability, discovered by Didier Stevens. Mr. Stevens also implemented a method to launch an application inside a PDF without using JavaScript [35]. While the details of how the vulnerability can be exploited are not crucial, this vulnerability is interesting because it provides a clear and concrete proof-of-concept for the effectiveness of the reverse mimicry attack, despite not being very recent (it will not work on Adobe Reader X).

### 5.3.2 PDF Embedding

A limitation of the attack described is that it exploits an old vulnerability, which may not work in patched versions of Adobe Reader (specifically, after version 9.3). However, the PDF standard supports embedding other file formats, including PDF itself. It is possible to embed a PDF file inside another one, allowing the embedded file to be opened automatically without user interaction. This means a malicious file can be embedded within a benign one. There are no restrictions on the type of file that can be embedded; it can contain JavaScript, Flash code, etc. Such samples can be automatically generated using the embedding function provided by the PeePDF tool [7]. To enhance obfuscation, PeePDF can embed the file in a compressed stream, requiring the parser to decompress the stream to retrieve the features of the embedded file. This can provide a significant advantage against simple parsers that do not decompress objects. Figure 8 shows an example of a typical PDF embedded object. The presence of the `EmbeddedFile` keyword indicates that an embedded file is present, making the file more suspicious, but not definitively malicious. The keys `Filter` and `FlateDecode`, followed by the stream, indicate that the embedded object is compressed with the FlateDecode filter. This approach can bypass simple parsers like PdfID [5], which cannot decompress object streams. Accurate parsers are essential for retrieving useful information about embedded content. Even if a parser can decompress object streams, embedding a PDF file allows fine-grained control over the structural features of the carrier file, enabling the exploitation of a wide range of vulnerabilities, even those affecting the latest versions of PDF readers.

### 5.3.3 JavaScript Injection

Most malicious PDF files use JavaScript code to exploit vulnerabilities in the reader application. Smutz et al. identified two types of JavaScript code: one that includes the payload for the attack along with the code to exploit the vulnerability, and another that relies on other objects in the file or external malicious links to download malicious code [33]. The best way to perform a reverse mimicry attack is to encapsulate a malicious JavaScript code that does not reference other objects. This minimizes the structural variation in the root (benign) file. Furthermore, adding a single object is faster and more feasible for an attacker than a complex obfuscation process. An interesting characteristic of JavaScript injection is that no new version is added; the entire tree is rewritten, causing minimal modifications to the tree structure and leading to small variations in the PDF pattern in the feature space. Figure 9 shows an example of this specific attack, which can be easily built using specific Python libraries [14]. As shown, a JavaScript object is added, and the JavaScript code is inserted after the `JS` keyword. The `Catalog` object is also modified, with the reference `93 0 R` added to ensure the code is executed independently of other objects in the PDF file.

### 5.4 Systems Weaknesses

The effectiveness of reverse mimicry and its variants against machine learning systems can be understood by examining the layers of the PDF file on which detection systems focus. Figure 10 provides a conceptual representation of the layers analyzed by systems like PJScan, Malware Slayer, and PDFRate.

**Three types of layers:**
- **Standard Objects (STO) Layer:** Objects not related to external actions (e.g., code execution). They may contain references to suspicious or malicious objects.
- **Suspicious Objects (SUO) Layer:** Objects related to external actions (e.g., code execution, forms). This category includes objects with keywords like `Acroform`, `Names`, `JavaScript`, etc.
- **Malicious Code or Embedded Files (CE) Layer:** Describes codes or embedded files within suspicious objects. This is the layer where the actual attack is contained and is considered the most internal layer.

**Malware Slayer [26]** extracts information from the STO and SUO layers. Injecting JavaScript introduces small changes in both layers, which the classifier can detect as suspicious objects. However, objects in the SUO layer do not necessarily contain malicious code. A benign file with a suspicious distribution of objects in the STO and SUO layers can exist. If a malicious and a benign JavaScript code are injected into the same PDF file, resulting in two files (one malicious and one benign), they would be indistinguishable based on features from the STO and SUO layers alone. Figure 11 illustrates this behavior.

**PJScan [24]** does not suffer from this issue as it primarily extracts features from the CE layer. However, it only analyzes JavaScript code, making it vulnerable to evasion by samples carrying other malicious content, such as ActionScript code or EXE payloads.

### 6. Experimental Evaluation

To assess the efficacy of reverse mimicry attacks, we implemented three attack variants: EXE Payload embedding (EXEembed), PDF embedding (PDFembed), and JavaScript injection (JSinject). We tested these against various PDF malware detectors, including Wepawet (online tool) [10], PJScan [24], Malware Slayer [26], and three online versions of PDFRate (Contagio, George Mason, and Community version) [33].

**Training Data:**
- **PJScan and Malware Slayer:** Trained on 5993 malicious samples from the Contagio repository [1] and 5591 benign files collected using the Yahoo search API [42].
- **PDFRate Contagio:** Trained on the same data source as PJScan and Malware Slayer.

**Attack Variants:**
- **EXEembed:** Embedded a Zeus EXE payload with simple compression.
- **PDFembed:** Embedded a PDF file containing malicious JavaScript code implementing the CVE-2009-4324 vulnerability. The embedded file opens automatically when the root file is opened.
- **JSinject:** Injected the same JavaScript code used in PDFembed into the root file without adding a new version.

**Results:**
- **Table 1:** Summary of evasion results. For each detector, we indicate whether the attack was successful (evaded, in bold) or not (detected). When available, we provide the root and attack scores separated by a `/`. The maliciousness score ranges from 0 to 1, with high values indicating a higher likelihood of being malicious.

| Detector | EXEembed | PDFembed | JSinject |
|----------|----------|----------|----------|
| PJScan | evaded (-/.317) | evaded (.002/.069) | detected (-/.905) |
| PDFRate Contagio | evaded (0/.162) | evaded (0/.008) | evaded (0/.148) |
| PDFRate George Mason | evaded (.001/.2) | evaded (0/0) | evaded (0/.013) |
| PDFRate Community | evaded (0/.08) | evaded (0/0) | evaded (0/.125) |
| Malware Slayer | evaded (0/.08) | evaded (0/0) | evaded (0/.08) |
| Wepawet | - | - | - |

**Conclusion:**
Reverse mimicry attacks are highly effective against all PDF detectors. Almost all detectors assign relatively low scores to the attack instances, successfully evading detection. Detectors that use structural analysis, such as PDFRate and Malware Slayer, are particularly vulnerable. PJScan, which operates at the CE layer, can detect JSinject but is evaded by EXEembed and PDFembed.