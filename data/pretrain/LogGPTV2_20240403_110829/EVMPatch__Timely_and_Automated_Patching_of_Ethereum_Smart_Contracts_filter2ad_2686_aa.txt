title:EVMPatch: Timely and Automated Patching of Ethereum Smart Contracts
author:Michael Rodler and
Wenting Li and
Ghassan O. Karame and
Lucas Davi
EVMPatch: Timely and Automated Patching of 
Ethereum Smart Contracts
Michael Rodler, University of Duisburg-Essen; Wenting Li and Ghassan O. Karame, 
NEC Laboratories Europe; Lucas Davi, University of Duisburg-Essen
https://www.usenix.org/conference/usenixsecurity21/presentation/rodler
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.EVMPatch: Timely and Automated Patching of Ethereum Smart Contracts
Michael Rodler
University of Duisburg-Essen
Wenting Li
NEC Laboratories Europe
Ghassan O. Karame
NEC Laboratories Europe
Lucas Davi
University of Duisburg-Essen
Abstract
Recent attacks exploiting errors in smart contract code had
devastating consequences thereby questioning the beneﬁts of
this technology. It is currently highly challenging to ﬁx er-
rors and deploy a patched contract in time. Instant patching is
especially important since smart contracts are always online
due to the distributed nature of blockchain systems. They also
manage considerable amounts of assets, which are at risk and
often beyond recovery after an attack. Existing solutions to
upgrade smart contracts depend on manual and error-prone pro-
cesses. This paper presents a framework, called EVMPATCH,
to instantly and automatically patch faulty smart contracts.
EVMPATCH features a bytecode rewriting engine for the pop-
ular Ethereum blockchain, and transparently/automatically
rewrites common off-the-shelf contracts to upgradable con-
tracts. The proof-of-concept implementation of EVMPATCH
automatically hardens smart contracts that are vulnerable to
integer over/underﬂows and access control errors, but can be
easily extended to cover more bug classes. Our evaluation on
14,000 real-world contracts demonstrates that our approach
successfully blocks attack transactions launched on contracts,
while keeping the intended functionality of the contract intact.
We perform a study with experienced software developers,
showing that EVMPATCH is practical, and reduces the time
for converting a given Solidity smart contract to an upgradable
contract by 97.6 %, while ensuring functional equivalence to
the original contract.
1 Introduction
Smart contracts are used in modern blockchain systems to
allow nearly arbitrary (Turing-complete) business logic to be
implemented. They enable autonomous management of cryp-
tocurrency or tokens and have the potential to revolutionize
many business applications by removing the need for a trusted
(potentially malicious) third party, e.g., in applications for
payments, insurances, crowd funding, or supply chains. Due to
their ease of use and the high monetary value (cryptocurrency)
some of these contracts hold, smart contracts have become
an appealing target for attacks. Programming errors in smart
contract code can have devastating consequences as an attacker
can exploit these bugs to steal cryptocurrency or tokens.
Recently, the blockchain community has witnessed several
incidents due smart contract errors [7, 39]. One especially
infamous incident is the “TheDAO” reentrancy attack, which
resulted in a loss of over 50 million US Dollars worth of
Ether [31]. This led to a highly debated hard-fork of the
Ethereum blockchain. Several proposals demonstrated how
to defend against reentrancy vulnerabilities either by means of
ofﬂine analysis at development time or by performing run-time
validation [16, 23, 32, 42]. Another infamous incident is the
parity wallet attack [39]. In this case, an attacker moved a
smart contract into a state, where the currency held by the
contract could not be accessed anymore. This resulted in a
total of about 500,000 Ether to be stuck in smart contracts due
to an access control error [38]. Automatic detection of such
access control vulnerabilities has been previously studied in
the context of automated exploit generation [20, 28]. Further,
integer overﬂow bugs constitute a major vulnerability class
in smart contracts. Such bugs occur when the result of an
arithmetic operation has a longer width than the integer type
can hold [34]. According to a study by Torres et al. [13]
more than 42,000 contracts suffer from an integer bug. They
especially affect so-called ERC-20 Token contracts, which are
leveraged in Ethereum to create subcurrencies. Interestingly,
several of the disclosed vulnerabilities were actually exploited
leading to substantial token and ether losses.
These attacks have fueled interest in the community to
enhance the security of smart contracts. In this respect, a
number of solutions ranging from devising better development
environments to using safer programming languages, formal
veriﬁcation, symbolic execution, and dynamic runtime
analysis have been proposed in the last few years [19, 23, 32].
We point out that all these solutions only aim to prove the
correctness or absence of a certain type of vulnerability [19,
23, 42] and as such cannot be used to protect already deployed
(legacy) contracts. Although some contracts integrate upgrade
USENIX Association
30th USENIX Security Symposium    1289
mechanisms (see § 2), once a particular contract has been
ﬂagged as vulnerable, it is unclear how to automatically patch it
and test the effectiveness of the patched contract. Even though
manually patching contracts on the source-code level seems
plausible, the patch may unexpectedly break compatibility and
make the upgraded contracts unusable. For example, given the
special storage layout design of Ethereum, the delegatecall-
proxy pattern requires developers to ensure that the patched
version of the contract is compatible with the previously de-
ployed version. Even small changes like changing the ordering
of variables in the source code can break this compatibility.
This additionally poses the challenge that developers must
adhere to strict coding standards [46] and have to use the same
exact compiler version. As a result, patching smart contract
errors is currently a time-consuming, cumbersome, and error-
prone process. For instance, while patching the Parity multisig
wallet contract, a vulnerability was introduced. An attacker
was able to become the owner of the newly deployed library
contract. This allowed the attacker to destroy the contract and
break all contracts that depend on the multisig wallet library
contract. As a result, a considerable amount of Ether is now
locked in those broken contracts [38]. On top of that, patching
smart contract bugs is highly time-critical. In contrast to errors
discovered in PC or mobile software, smart contract errors are
unique from an attacker’s point of view as (1) smart contracts
are always online on the blockchain, (2) they usually hold
a signiﬁcant amount of assets, and (3) an attacker does not
need to consider other environmental variables (e.g., software
and library version, network trafﬁc analysis, spam or phishing
mails to trigger the exploit through a user action).
Contributions. In this paper, we address the problem of auto-
mated and timely patching of smart contracts to aid developers
to instantly take action on reported smart contract errors. We
introduce a novel patching framework (in § 3) that features a
bytecode-rewriter for Ethereum smart contracts, is indepen-
dent of the source programming language and works on unmod-
iﬁed contract code. Our framework, dubbed EVMPATCH, uti-
lizes the bytecode-rewriting engine to ensure that patches are
minimally intrusive and that the newly patched contract is com-
patible with the original contract. In particular, our framework
automatically replays transactions on the patched contract to
1. test the functional correctness of the patched contract with
respect to previous transactions pertaining to the contract,
2. identify potential attacks, i.e., developers can determine
whether their vulnerable contract has been attacked in
the past.
EVMPATCH uses a best effort approach to ensure the
introduced patch does not break functionality by testing with
previously issued transactions to the contract and optionally
also developer provided unit tests. While such a differential
testing approach cannot provide a formal proof on the correct-
ness of the patched contract,it works without requiring a formal
speciﬁcation. Our experiments (see § 5.2.1) show that this
approach is sufﬁcient in practice to identify broken patches.
By applying patches on the bytecode level, EVMPATCH
is independent of the used programming language/compiler
and compiler version. That is, EVMPATCH supports any
off-the-shelf Ethereum smart contract code. We employ
bytecode writing to ensure minimally intrusive patches, that
are compatible by design with the contract’s storage layout, We
argue that source-level patching is not easily usable in an auto-
mated patching process that we propose. However, as for any
approach working on either the binary or bytecode-level, we
had to tackle several technical challenges (§ 4). Furthermore,
EVMPATCH automatically converts the original contract to
use the delegatecall-proxy pattern. As such, EVMPATCH is
able to automatically deploy newly patched contracts in a fully
automated way without requiring any developer intervention.
While in principle EVMPATCH can support patching of
different classes of vulnerabilities (see § 4.5), our proof-of-
concept implementation targets the two major classes of access
control and integer overﬂow (§ 5) bugs. The latter have been
repeatedly exploited in high-value ERC-20 contracts [30],
whereas the former has been abused in the Parity wallet
attack [39].
To evaluate EVMPATCH in terms of performance, effec-
tiveness, and functional correctness, we apply EVMPATCH to
14,000 real-world vulnerable contracts. To this end, we used
the patch testing component of the EVMPATCH framework to
re-play all existing transactions to the original contract on the
patched contract. This allows us to provide in-depth investi-
gation of several actively exploited smart contracts, e.g., token
burning and history of attack transactions (before and after
public disclosure). For a number of contracts we investigated
in our evaluation, we found that EVMPATCH would have
blocked several attacks that happened after public disclosure of
the vulnerability. This shows that even though those contracts
were ofﬁcially deprecated, they were still used by legitimate
users and exploited by malicious actors. As such, there is
an immediate need for tooling, as provided by EVMPATCH,
which allows the developers of smart contracts to efﬁciently
patch their contracts. Our evaluation also covers important
practical aspects such as gas and performance overhead (i.e.,
the costs for executing transactions in Ethereum). The gas
overhead for all our patched contracts was below 0.01 US$
per transaction and the performance overhead negligible.
To assess the usefulness of EVMPATCH, we conducted a
sophisticated developer study1 that focuses on comparing the
usability of patching and deploying an upgradable contract
with and without EVMPATCH (§ 5.3). Our study reveals that
developers required 62.5 min (median) to manually (without
EVMPATCH) convert a simple smart contract, which imple-
ments common Wallet functionality in about 80 lines of code,
into an upgradable smart contract. In spite of this considerable
time, none of them performed a correct conversion, leading to
broken and potentially vulnerable contracts. As such, this time
1See github.com/uni-due-syssec/evmpatch-developer-study for details
1290    30th USENIX Security Symposium
USENIX Association
measurements must be seen as a lower bound, as correctly
converting a more complex contract will take even more time.
In contrast, the same task was performed by the developers
using EVMPATCH in 1.5 min (median)—a reduction by
97.6 %—while producing a correct upgradable contract.
2 Background
In this section, we provide background information on the
Ethereum Virtual Machine (EVM), binary rewriting, and some
common contract upgrade strategies.
EVM & Smart Contracts: At the core of the Ethereum
blockchain system lies a custom virtual machine, dubbed
Etherum Virtual Machine (EVM), which executes Ethereum
smart contracts. EVM consists of a simple stack-based virtual
machine with a custom instruction format. Every instruction is
represented as a one-byte opcode. Arguments are passed on the
data stack. The only exception are the push instructions, which
are used to push constants onto the stack. These constants are
encoded directly into the instruction bytes. Furthermore, the
EVM follows the Harvard architecture model and separates
code and data into different address spaces. In fact, the EVM
features different address spaces for different purposes: the
code address space, which contains a smart contract’s code and
is considered immutable, the storage address space for storing
global state, and the memory address space for temporary data.
In the Ethereum network, a smart contract must be executed
by every miner and every full node in the network to compute
and verify the state before and after a block. Ethereum features
a mechanism to limit the execution time per smart contract and
reward miners for executing smart contracts: the so-called gas.
Every EVM instruction requires a certain gas budget to execute.
The transaction sender selects the price per gas unit in Ether and
when a transaction is included into a block the corresponding
Ether is transferred to the miner as a reward. Minimizing the
gas required for executing a contract is important as it indirectly
minimizes the cost of operating a smart contract in Ethereum.
Smart contracts are developed in an object-oriented fashion,
i.e., every smart contract has a deﬁned interface of functions:
the contract’s ABI (Application Binary Interface). Whenever
a smart contract calls another smart contract, it utilizes one of
the call instructions, such as CALL or STATICCALL. The called
contract will then process the provided input and update its
own state accordingly. A contract cannot directly access the
state (i.e., the storage area) of other contracts and must always
use function calls according to the ABI to retrieve any data
from another contract.
contrast
to the
In
regular CALL instruction,
the
DELEGATECALL instruction will execute the called con-
tract’s code in the context of the caller contract. This
instruction was introduced to implement library contracts, i.e.,
common functionality can be deployed once to the blockchain
and multiple contracts can rely on one library contract. This
means that the callee, i.e., the library contract, has full access
to the state (the storage) and the Ether funds of the caller. As
such, a contract that utilizes a DELEGATECALL instruction must
fully trust the callee.
Binary Rewriting: Binary rewriting is a well-known
technique to instrument programs after compilation. Binary
rewriting has also been applied to retroﬁt security hardening
techniques such as control-ﬂow integrity, to compiled
binaries [8], but also to dynamically apply security patches
to running programs [29]. For binary rewriting on traditional
architectures two ﬂavors of approaches have been developed:
static and dynamic rewriting.
Dynamic approaches [22] rewrite code on-the-ﬂy, i.e.,
while the code is executing. This avoids imprecise static
analysis on large binaries. However, dynamic binary rewriting
requires an intermediate layer, which analyzes and rewrites
code at runtime. Since the EVM does not support dynamic
code generation or modiﬁcation, it is not possible to apply
this approach efﬁciently in Ethereum. In contrast, static
binary rewriting [5, 21] is applicable to Ethereum as it works
completely ofﬂine. It relies on static analysis to recover
enough program information to accurately rewrite the code.
Contract Upgrade Strategies: Ethereum treats the code of
smart contracts as immutable once they are deployed on the
blockchain2. To remedy this, the community came up with
strategies for deploying upgraded smart contracts [11, 41, 45].
The most naive approach is to deploy the patched contract at a
new address and migrate the state of the original contract to it.
However, state migration is speciﬁc to the contract and must
be manually implemented by the developers of the contract.
It requires the contract developers to have access to all the
internal state of the old contract, and a procedure in the new
contract to accept state transfers. To avoid state migration,
developers can also use a separate contract as a data storage
contract, which is sometimes referred to as the eternal storage
pattern [10, 45]. However, this adds additional gas overhead
since every time the logic contract needs to access data it must
perform a costly external call into the data storage contract.
A more common strategy is to write contracts with the proxy-
pattern, with the most favorable version being the delegatecall-
proxy pattern. Here, one smart contract is split into two
different contracts, one for the code and one for data storage:
i) an immutable proxy contract, which holds all funds and all
internal state, but does not implement any business logic; ii) a
logic contract, which is completely stateless and implements
all of the actual business logic, i.e., this contract contains the
actual code that governs the actions of the contract. The proxy
contract is the entry point of all user transactions. It has im-
mutable code and its address remains constant over the lifetime
of the contract. The logic contract implements the rules, which
govern the behavior of the smart contract. The proxy contract
forwards all function calls to the registered logic contract using
the DELEGATECALL instruction. This instruction is used to give
2Except for the selfdestruction mechanism to kill a smart contract.
USENIX Association
30th USENIX Security Symposium    1291
the logic contract access to all internal state and funds stored
in the proxy contract. To upgrade the contract, a new logic
contract is deployed and its address is updated in the proxy con-
tract. The proxy contract then forwards all future transactions
to the patched logic contract. As a result, deploying upgraded
contracts does not require any data migration, as all data is
stored in the immutable proxy contract. Moreover, the upgrad-
ing process is also transparent to users, as the contract address
remains the same. Although existing blockchain platforms do
not provide mechanisms to upgrade smart contracts, the usage
of this proxy pattern allows EVMPATCH to quickly upgrade a
contract with negligible costs (in terms of gas consumption).
3 Design of EVMPatch
In this section, we introduce the design of our automated patch-
ing framework to timely patch and harden smart contracts. Our
framework operates on unmodiﬁed smart contracts and is inde-
pendent of the source code programming language, as it does
not require source code. At its core, our framework utilizes a
bytecode rewriter to apply minimally intrusive patches to EVM
smart contracts. Combined with a proxy-based upgradable
smart contract, this bytecode rewriting approach allows the
developer to automatically introduce patches and deploy them
on the blockchain. One major advantage of this approach
is that when new attack types are discovered or bug ﬁnding
tools improve, the contract can be automatically re-checked,
patched, and re-deployed in a short amount of time and with
minimal developer intervention. EVMPATCH is typically
executed on a developer’s machine and is continuously running
new and updated vulnerability detection tools. This can also
include dynamic analysis tools, which analyze transactions
that are not yet included in a block, but already available to
the Ethereum network. Whenever one of the analysis tools
discovers a new vulnerability, EVMPATCH automatically
patches the contract, tests the patched contract and deploys it.
3.1 Design Choices
The proxy-pattern makes it possible to easily deploy a
patched smart contract in Ethereum. However, it neither
generates a patched version nor features functional tests on
the patched contract. EVMPATCH ﬁlls this gap by providing a
comprehensive framework and toolchain to automatically and
timely patch and test the effectiveness of the generated patch.
As shown in Table 1, there are two possible strategies for au-
tomatically generating a patch in Ethereum: static rewriting of