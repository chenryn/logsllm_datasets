of SEAndroid/SELinux policies, and general software-engineering
analyses of Git repositories.
SEAndroid/SELinux policy analysis. Understanding software
complexity is an important topic in the software engineering com-
munity, and a variety of useful metrics have been proposed over
the years, such as cyclomatic complexity [31] and Halstead vol-
ume [32]. However, in the context of SEAndroid/SELinux policy,
complexity measurements are much less studied; the dominant
metric is simply the number of rules in the policy source code [36].
Researchers have also used formal verification on SELinux poli-
cies [2, 14, 17, 18, 38, 39], artificial intelligence, information flow
integrity measurement [15, 16, 48], and functional tests [49]. Even
machine learning techniques have been used to analyze policies
based on SELinux denial logs from billions of devices [50].
Chen et al. [6] study the SEAndroid policy with the goal of iden-
tifying potential misconfigurations. They combine the SEAndroid
mandatory policies with the discretionary policies embedded in the
Android file system (i.e., Unix permission bits), giving them a more
complete look at what is actually allowed or denied in practice.
Both their work and ours present metrics and tools that might be
useful in the Android development process. One important differ-
ence, however, is that we focus on quantifying the complexity of a
policy snapshot, and on how the complexity evolves over time.
Git mining. Bird et al. [5] provide a comprehensive analysis on
the pros and cons of Git mining [5]. Notably, one of the challenges
they mention is the lack of a mainline repository when dealing
with multiple Git branches. Many other researchers have studied
Git repositories (see, e.g., [13, 44, 47]). Negara et al. [33] use Git
mining to detect patterns of code changes [33], German et al. [9]
and Jiang et al. [20] analyze Linux kernel repositories’ code over
time. In our work, we apply similar concepts toward the study of
SEAndroid’s evolution.
8 CONCLUSION
In this paper, we have performed the first historical analysis of the
SEAndroid policy to understand its evolution over time. We looked
at both “rules” as written in the SEAndroid policy and the “boxes”
those rules expanded to after processing all the macro and group-
ing operators. By plotting these metrics over time, we can observe
the exponential growth in the complexity of SEAndroid policies,
which will inevitably hit a brick wall of engineering complexity
and require new and novel approaches to manage this complexity.
Such approaches might lean on techniques from across many fields
of computer science. For instance, we might imagine policy “unit
tests” that express operations that are expected to succeed or fail
and can be verified alongside other such tests as part of any modern
software engineering and testing process. We might also imagine
combinations of approaches from AI and machine learning with
approaches from formal verification and model checking, not only
to find bugs and exploits, but more importantly to explain what
a given SEAndroid policy actually means. Without such under-
standing, it will remain challenging to point at any a policy and
definitively declare it to be “correct”.
9 ACKNOWLEDGMENT
We thank Robert Williams and Tomasz Swierczek for valuable ad-
vice and answering many of our questions as well as the anonymous
referees for their valuable feedback. This work was supported in
part by NSF grants CNS-1801884, CNS-1409401, and CNS-1314492.
REFERENCES
[1] Android Open Source Project 2018. SEAndroid Policy Git Repository. Android Open
Source Project. https://android.googlesource.com/platform/system/sepolicy
[2] Myla Archer, Elizabeth Leonard, and Matteo Pradella. 2003. Analyzing Security-
Enhanced Linux Policy Specifications. Technical Report. Naval Research Lab
Center For Computer High Assurance Systems.
[3] Armis, Inc. 2017. The Attack Vector “BlueBorne” Exposes Almost Every Connected
Device. Armis, Inc. https://www.armis.com/blueborne/
[4] Lee Badger, Daniel F Sterne, David L Sherman, Kenneth M Walker, and Sheila A
Haghighat. 1995. Practical Domain and Type Enforcement for UNIX. In IEEE
Symposium on Security and Privacy. IEEE, IEEE, Oakland, CA, 66–77.
[5] Christian Bird, Peter C Rigby, Earl T Barr, David J Hamilton, Daniel M German,
and Prem Devanbu. 2009. The Promises and Perils of Mining Git. In 6th IEEE
International Working Conference on Mining Software Repositories (MSR ’09). IEEE,
IEEE, Vancouver, BC, Canada, 1–10.
[6] Haining Chen, Ninghui Li, William Enck, Yousra Aafer, and Xiangyu Zhang.
2017. Analysis of SEAndroid Policies: Combining MAC and DAC in Android. In
Proceedings of the 33rd Annual Computer Security Applications Conference. ACM,
ACM, Orlando,FL, 553–565.
[7] Nikolay Elenkov. 2014. Android Security Internals: An in-depth Guide to Android’s
Security Architecture. No Starch Press.
[8] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner.
2011. Android permissions demystified. In 18th ACM Conference on Computer
and Communications Security (CCS ’11). ACM, Chicago, IL, 627–638. https:
//doi.org/10.1145/2046707.2046779
[9] Daniel M German, Bram Adams, and Ahmed E Hassan. 2016. Continuously
Mining Distributed Version Control Systems: an Empirical Study of How Linux
Uses Git. Empirical Software Engineering 21, 1 (2016), 260–299.
[10] Google 2017. Media Framework Hardening. Google. https://source.android.com/
devices/media/framework-hardening
[11] Google 2017. SELinux for Android 8.0. Google. https://source.android.com/
security/selinux/images/SELinux_Treble.pdf
[12] Google 2018. Android Open Source Project. Google. https://source.android.com
[13] Georgios Gousios, Margaret-Anne Storey, and Alberto Bacchelli. 2016. Work
practices and challenges in pull-based development: the contributor’s perspective.
In Software Engineering (ICSE), 2016 IEEE/ACM 38th International Conference on.
IEEE, IEEE, Austin, TX, 285–296.
[14] Boniface Hicks, Sandra Rueda, Luke St Clair, Trent Jaeger, and Patrick McDaniel.
2010. A Logical Specification and Analysis for SELinux MLS Policy. ACM
Transactions on Information and System Security (TISSEC) 13, 3 (2010).
[15] Trent Jaeger, Reiner Sailer, and Umesh Shankar. 2006. PRIMA: policy-reduced in-
tegrity measurement architecture. In Proceedings of the eleventh ACM symposium
on Access control models and technologies. ACM, ACM, Lake Tahoe, CA, USA,
19–28.
639ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
B. Im et al.
[43] Stephen Smalley and Robert Craig. 2013. Security Enhanced (SE) Android: Bring-
ing Flexible MAC to Android.. In NDSS, Vol. 310. Internet Society, San Diego, CA,
USA, 20–38.
[44] Margaret-Anne Storey, Leif Singer, Brendan Cleary, Fernando Figueira Filho, and
Alexey Zagalsky. 2014. The (r) evolution of social media in software engineering.
In Proceedings of the on Future of Software Engineering. ACM, ACM, Hyderabad,
India, 100–116.
[45] Tresys Technology 2017. SELinux Policy Analysis Tools v4. Tresys Technology.
https://github.com/TresysTechnology/setools
[46] Tresys Technology 2017. Tresys :: Security Enhanced Linux. Tresys Technology.
http://www.tresys.com/solutions/security-enhanced-linux
[47] Bogdan Vasilescu, Daryl Posnett, Baishakhi Ray, Mark GJ van den Brand, Alexan-
der Serebrenik, Premkumar Devanbu, and Vladimir Filkov. 2015. Gender and
tenure diversity in GitHub teams. In Proceedings of the 33rd Annual ACM Con-
ference on Human Factors in Computing Systems. ACM, ACM, Seoul, Republic of
Korea, 3789–3798.
[48] Hayawardh Vijayakumar, Guruprasad Jakka, Sandra Rueda, Joshua Schiffman,
and Trent Jaeger. 2012. Integrity walls: Finding attack surfaces from mandatory
access control policies. In Proceedings of the 7th ACM Symposium on Information,
Computer and Communications Security. ACM, ACM, Seoul, Republic of Korea,
75–76.
[49] Ruowen Wang, Ahmed M Azab, William Enck, Ninghui Li, Peng Ning, Xun Chen,
Wenbo Shen, and Yueqiang Cheng. 2017. SPOKE: Scalable Knowledge Collection
and Attack Surface Analysis of Access Control Policy for Security Enhanced
Android. In Proceedings of the 2017 ACM on Asia Conference on Computer and
Communications Security. ACM, ACM, Abu Dhabi, UAE, 612–624.
[50] Ruowen Wang, William Enck, Douglas S Reeves, Xinwen Zhang, Peng Ning,
Dingbang Xu, Wu Zhou, and Ahmed M Azab. 2015. EASEAndroid: Automatic
Policy Analysis and Refinement for Security Enhanced Android via Large-Scale
Semi-Supervised Learning.. In USENIX Security Symposium. USENIX Association,
Washington, DC, USA, 351–366.
[51] Giorgio Zanin and Luigi Vincenzo Mancini. 2004. Towards a Formal Model for
Security Policies Specification and Validation in the SELinux System. In Proceed-
ings of the Ninth ACM Symposium on Access Control Models and Technologies.
ACM, ACM, Yorktown Heights, NY, USA, 136–145.
[52] Nikias Bassen Zuk Avraham, Joshua Drake. 2015.
corn in the Heart of Android.
experts-found-a-unicorn-in-the-heart-of-android/
Zimperium.
Experts Found a Uni-
http://blog.zimperium.com/
[53] Serkan Özkan. 2018. Google Android: List of Security Vulnerabilities. CVEde-
tails. https://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_
id-19997/Google-Android.html
[16] Trent Jaeger, Reiner Sailer, and Xiaolan Zhang. 2003. Analyzing integrity pro-
tection in the SELinux example policy. In Proceedings of the 12th conference on
USENIX Security Symposium-Volume 12. USENIX Association, USENIX Associa-
tion, Washington, DC, USA, 5–5.
[17] Trent Jaeger, Reiner Sailer, and Xiaolan Zhang. 2004. Resolving constraint con-
flicts. In Proceedings of the ninth ACM symposium on Access control models and
technologies. ACM, ACM, Yorktown Heights, NY, USA, 105–114.
[18] Trent Jaeger, Xiaolan Zhang, and Antony Edwards. 2003. Policy Management
Using Access Control Spaces. ACM Transactions on Information and System
Security (TISSEC) 6, 3 (2003), 327–364.
[19] Xuxian Jiang and Yajin Zhou. 2012. Dissecting android malware: Characterization
and evolution. In 2012 IEEE Symposium on Security and Privacy. IEEE, IEEE, San
Francisco, CA, USA, 95–109.
[20] Yujuan Jiang, Bram Adams, and Daniel M German. 2013. Will My Patch Make It?
and How Fast? Case Study on the Linux Kernel. In 10th IEEE Working Conference
on Mining Software Repositories (MSR). IEEE, IEEE, an Francisco, CA, USA, 101–
110.
[21] Mariantonietta La Polla, Fabio Martinelli, and Daniele Sgandurra. 2013. A Survey
on Security for Mobile Devices. IEEE Communications Surveys & Tutorials 15, 1
(2013), 446–471.
[22] Butler W Lampson. 1974. Protection. ACM SIGOPS Operating Systems Review 8,
[23] Linux Foundation 2016. Security: Cynara. Linux Foundation. https://wiki.tizen.
1 (1974), 18–24.
org/Security:Cynara
[24] Linux Foundation 2016. Smack three domain model. Linux Foundation. https:
//wiki.tizen.org/Security:SmackThreeDomainModel
[25] Linux Foundation 2016. Tizen 2.x security architecture. Linux Foundation. https:
//wiki.tizen.org/Security/Tizen_2.X_Architecture
[26] Linux Foundation 2016. Tizen 3.0 security overview. Linux Foundation. https:
//wiki.tizen.org/Security/Tizen_3.X_Overview
[27] Linux Foundation 2017. Tizen 4.0 Public M1 Release Notes. Linux Foundation.
https://developer.tizen.org/tizen/release-notes/tizen-4.0-public-m1
[28] Linux Foundation 2018. Tizen | An open source, standards-based software platform
for multiple device categories. Linux Foundation. https://www.tizen.org/
[29] Peter Loscocco. 2001. Integrating Flexible Support For Security Policies into
the Linux Operating System. In Proceedings of the FREENIX Track: 2001 USENIX
Annual Technical Conference. USENIX association, Boston, MA.
[30] Lisa Mahapatra. 2013. Android vs. ios: What’s the most popular mobile operating
system in your country. International Business Times. Retrieved March 1 (2013),
2014.
[31] Thomas J McCabe. 1976. A Complexity Measure. IEEE Transactions on Software
Engineering SE-2, 4 (Dec. 1976), 308–320.
[32] John C Munson and Taghi M Khoshgoftaar. 1989. The dimensionality of pro-
gram complexity. In Proceedings of the 11th international conference on Software
engineering. ACM, ACM, Pittsburgh, PA, USA, 245–253.
[33] Stas Negara, Mihai Codoban, Danny Dig, and Ralph E Johnson. 2014. Mining Fine-
grained Code Changes to Detect Unknown Change Patterns. In Proceedings of the
36th International Conference on Software Engineering. ACM, ACM, Hyderabad,
India, 803–813.
[34] Palo Alto Networks,
“Cloak and Dagger” with No Permissions.
Android Toast Overlay At-
Palo Alto Net-
tack:
works,
https://researchcenter.paloaltonetworks.com/2017/09/
unit42-android-toast-overlay-attack-cloak-and-dagger-with-no-permissions/
[35] Redhat 2015. SELinux/audit2allow, Fedora Wiki. Redhat. http://fedoraproject.
2017.
Inc.
Inc.
org/wiki/SELinux/audit2allow
[36] Elena Reshetova, Filippo Bonazzi, Thomas Nyman, Ravishankar Borgaonkar, and
N Asokan. 2015. Characterizing SEAndroid Policies in the Wild. arXiv preprint
arXiv:1510.05497 (2015).
[37] Samsung
2017.
sung.
Samsung-Knox-Security-Solution-Whitepaper.pdf
Samsung Knox
Sam-
http://docs.samsungknox.com/samsung-knox-whitepaper/
Solution.
Security
[38] Beata Sarna-Starosta and Scott D Stoller. 2004. Policy Analysis for Security-
Enhanced Linux. In Proceedings of the 2004 Workshop on Issues in the Theory of
Security (WITS). Washington, DC, USA, 1–12.
[39] Amit Sasturkar, Ping Yang, Scott D Stoller, and CR Ramakrishnan. 2006. Pol-
icy analysis for administrative role based access control. In Computer Security
Foundations Workshop, 2006. 19th IEEE. IEEE, IEEE, Venice, Italy, 13–pp.
[40] Casey Schaufler. 2008.
The Simplified Mandatory Access Control Ker-
nel. http://schaufler-ca.com/yahoo_site_admin/assets/docs/SmackWhitePaper.
257153003.pdf.
[41] Z Cliffe Schreuders, Tanya Jane McGill, and Christian Payne. 2012. Towards
Usable Application-Oriented Access Controls: Qualitative Results from a Usability
Study of SELinux, AppArmor and FBAC-LSM. International Journal of Information
Security and Privacy 6, 1 (2012), 57–76.
[42] Stephen Smalley. 2005. Configuring the SELinux Policy. Technical Report 02-007.
NAI Labs.
https://www.nsa.gov/resources/everyone/digital-media-center/
publications/research-papers/assets/files/configuring-selinux-policy-report.
pdf.
640