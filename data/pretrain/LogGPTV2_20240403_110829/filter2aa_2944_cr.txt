Expires attribute 122
Expires header 58
eXtensible Access-Control Markup Language 
(XACML) 290–291
external additional authenticated data 504
extract method 472, 501
extract-and-expand method 426
F
fault attack 477
federation protocol 72
fetchLinkPreview method 359
file descriptors 295
file exposure 420
findMessages method 310, 326
findOptional method 491
INDEX
541
fingerprint 411
FINISHED status 447
firewalls 10
first-party caveats 321, 325–328
first-party clients 111
followRedirects(false) method 365
ForgeRock Access Management 525–531
running evaluation version 526–531
setting up host alias 526
ForgeRock Directory Services 531
form submission, intercepting 104
forward secrecy 246
PSK with 465–467
ratcheting for 482–484
freshness 497
FROM command 341–342
- -from-file 416
future secrecy 484
G
GCM (Galois Counter Mode) 197, 201, 453
GDPR (General Data Protection Regulation) 4, 
224
GeneralCaveatVerifier interface 326
generic secrets 416
getCookie function 142, 166
getDelegatedTask() method 447
getEncoded() method 460, 502
getHint() method 494
getIdentityManager() method 494
getItem(key) method 165
getrandom() method 157
getSecurityParametersConnection() method
495
getSecurityParametersHandshake() method
495
getSupportedCipherSuites() method 464
getSupportedVersions() method 462
GIDs (group IDs) 343, 350
GRANT command 46, 277
grants
client credentials grant 385–388
JWT bearer grant for OAuth2 389–396
client authentication 391–393
generating 393–395
service account authentication
395–396
grant_type parameter 233, 432, 515
-groupname secp256r1 argument 391
groupOfNames class 272
groupOfUniqueNames class 272
groupOfURLs class 272
groups 268–273
Guava, rate-limiting with 66
H
H2 database
building as Docker container 341–345
deploying to Kubernetes 345–349
halt() method 151
handshake 245, 397
hardening
capability URIs 315–318
code exchange with PKCE 236–237
database token storage 170–180
authenticating tokens with HMAC 172–177
hashing database tokens 170–171
protecting sensitive attributes 177–180
OIDC 263–264
hardware security module (HSM) 422, 480–481
Hash field 407
hash function 130
hash-based double-submit cookies 129–133
hash-based key derivation function (HKDF) 425, 
469
hashing database tokens 170–171
hash.substring(1) method 312
HATEOAS (Hypertext as Engine of Application 
State) 308–311
headers
encoding with end-to-end security 509–510
JOSE 188–190
algorithm header 188–189
specifying key in header 189–190
headless JWTs 188
HKDF (hash-based key derivation function) 425, 
469
HKDF_Context_PartyU_nonce attribute 470
HKDF-Expand method 426
HKDF.expand() method 501
HKDF-Extract method 425, 501
HMAC (hash-based MAC)
authenticating tokens with 172–177
generating key 176–177
trying it out 177
protecting JSON tokens with 183
HmacKeyStore 177
HMAC-SHA256 algorithm 172
HmacTokenStore 173, 176, 183–184, 191–193, 
197–198, 206, 208, 211, 304, 319, 323
holder-of-key tokens 410
host alias 526
host name 147
__Host prefix 123, 130
host-only cookie 121
HS256 algorithm 191
HSM (hardware security module) 422, 480–481
HSTS (HTTP Strict-Transport-Security) 82
HTML 105–108
INDEX
542
HTTP Basic authentication
drawbacks of 108
preventing spoofing with 71
HTTP OPTIONS request 148
HTTP Strict-Transport-Security (HSTS) 82
HttpClient class 247, 444
HttpOnly attribute 121
HTTPS 9
enabling 80–81
securing client configuration 245–247
hybrid tokens 210–213
Hypertext as Engine of Application State 
(HATEOAS) 308–311
I
iat claim 187
IBAC (identity-based access control) 267–293
attribute-based access control (ABAC) 282–293
best practices for 291
combining decisions 284
distributed policy enforcement and 
XACML 290–291
implementing decisions 285–288
policy agents and API gateways 289–290
role-based access control (RBAC) 274–281
determining user roles 279–280
dynamic roles 280–281
mapping roles to permissions 276–277
static roles 277–278
users and groups 268–273
ID tokens 260–262, 264–266
idempotent operations 506
identification 21–22
identity
combining capabilities with 314–315
verifying client identity 402–406
identity-based access control 22
idle timeouts 211
IDS (intrusion detection system) 10
IIoT (industrial IoT) 440
IllegalArgumentException 51
image property 354
img tag 167
impersonation 431
implicit grant 228
implicit nonces 453
import statement 287
in transit encryption 20
inactivity logout 211
indistinguishability 15
industrial IoT (IIoT) 440
Inet6Address class 363
InetAddress.getAllByName() method 363
information disclosure 18
InfoSec (Information security) 8
ingress controller 375, 377–378
init container 338
InitialDirContext 272
initialization vector (IV) 201, 475
injection attacks 39–47
mitigating SQL injection with permissions
45–47
preventing 43–45
.innerHTML attribute 169
input validation 47–51
InputStream argument 421
insecure deserialization vulnerability 48
- -insecure option 81
INSERT statement 41–42, 46
insert() method 286
insufficient_scope 221
int value 61
integrity 14
intermediate CAs 246, 369–370
Introspection endpoint 529
intrusion detection system (IDS) 10
intrusion prevention system (IPS) 10
invalid curve attacks 455
IoT (Internet of Things) 4, 65
IoT (Internet of Things) APIs 488–522
authenticating devices 489–496
device certificates 492
identifying devices 489–492
with TLS connection 492–496
end-to-end authentication 496–510
avoiding replay in REST APIs 506–510
Object Security for Constrained RESTful Envi-
ronments (OSCORE) 499–506
OAuth2 for constrained environments 511–517
offline access control 518–521
offline authorization 520–521
offline user authentication 518–520
IoT (Internet of Things) communications
439–487
end-to-end security 467–478
alternatives to COSE 472–474
COSE 468–472
misuse-resistant authenticated encryption 
(MRAE) 475–478
key distribution and management 479–486
key distribution servers 481–482
one-off key provisioning 480–481
post-compromise security 484–486
ratcheting for forward secrecy 482–484
pre-shared keys (PSK) 458–467
clients 462–463
implementing servers 460–461
supporting raw PSK cipher suites 463–464
with forward secrecy 465–467
INDEX
543
IoT (Internet of Things) communications 
(continued)
transport layer security (TLS) 440–457
cipher suites for constrained devices
452–457
Datagram TLS 441–452
IPS (intrusion prevention system) 10
isAfter method 326
isBlockedAddress 364
isInboundDone() method 450
isMemberOf attribute 273
iss claim 187, 253, 393, 395
Istio Gateway 408
IV (initialization vector) 201, 475
ivLength argument 502
J
Java 523–531
installing
Authorization Server 525–531
Docker 525
LDAP directory server 531
setting up 523–525
Linux 525
macOS 523–524
Windows 525
Java EE (Java Enterprise Edition) 10
java -version command 524
java.net.InetAddress class 363
java.net.URI class 303
JavaScript
calling login API from 140–142
calling Natter API from 102–104
java.security package 133
java.security.cert.X509Certificate object 402
java.security.egd property 350
java.security.MessageDigest class 411
java.security.SecureRandom 201
javax.crypto.Mac class 174, 320
javax.crypto.SecretKey class 205
javax.crypto.spec.SecretKeySpec class 426
javax.net.ssl.TrustManager 246
JdbcConnectionPool object 33
jku header 190
JOSE (JSON Object Signing and Encryption) 
header 188–190
algorithm header 188–189
specifying key in header 189–190
jq utility 327
JSESSIONID cookie 141
JSON Web Algorithms (JWA) 185
JSON Web Encryption (JWE) 185
JSON Web Key (JWK) 185, 189
JSON Web Signatures (JWS) 185, 469
JSONException 51
JsonTokenStore 183, 187, 192, 198, 200, 203, 206, 
208–209, 322
jti claim 187, 394
JWA (JSON Web Algorithms) 185
JWE (JSON Web Encryption) 185
JWEHeader object 203
JWK (JSON Web Key) 185, 189
jwk header 190
JWK Set URI 529
JWKSet.load method 392
jwks_uri field 252
JWS (JSON Web Signatures) 185, 469
JWS Compact Serialization 185
JWSAlgorithm object 191
JWSSigner object 191
JWSVerifier object 191, 193
JWT bearer authentication 384–385
JWT ID (jti) claim 211
JwtBearerClient class 391
JWTClaimsSet.Builder class 203
JWTs (JSON Web Tokens) 185–194, 389
bearer grant for OAuth2 396
client authentication 391–393
generating 393–395
service account authentication 395–396
encrypted 200–202, 256
generating standard 190–193
JOSE header 188–190
algorithm header 188–189
specifying key in header 189–190
standard claims 187–188
using library 203–205
validating access tokens 249–256
choosing signature algorithm 254–256
retrieving public key 254
validating signed 193–194
K
-k option 81
KDF (key derivation function) 425
KEK (key encryption key) 421
Kerckhoff’s Principle 195
key derivation function (KDF) 425
key distribution and management 479–486
derivation 425–428
generating for HMAC 176–177
key distribution servers 481–482
managing service credentials 420–422
one-off key provisioning 480–481
post-compromise security 484–486
ratcheting for forward secrecy 482–484
retrieving public keys 251–254
specifying in JOSE header 189–190
INDEX
544
key distribution servers 481–482
key encryption key (KEK) 421
key hierarchy 421
Key ID (KID) header 504
key management 415
Key object 174, 460
key rotation 189–190
key-driven cryptographic agility 189
KeyManager 443
KeyManagerFactory 450
keys 22
keys attribute 251
keys field 393
KeyStore object 246, 421
keytool command 199, 391
KID (Key ID) header 504
kid header 190, 428
KieServices.get().getKieClasspathContainer() 
method 286
kit-of-parts design 186
KRACK attacks 475
kty attribute 189
kubectl apply command 346, 377
kubectl command-line application 533
kubectl create secret docker-registry 416
kubectl create secret tls 416
kubectl describe pod 417
kubectl get namespaces command 346
kubectl version - -client - -short command 533
Kubernetes
deploying Natter on 339–368
building H2 database as Docker 
container 341–345
calling link-preview microservice 357–360
deploying database to Kubernetes
345–349
deploying new microservice 355–357
DNS rebinding attacks 366–368
link-preview microservice 353–354
preventing server-side request forgery 
(SSRF) attacks 361–365
microservice APIs on 336
secrets 380, 415–420
securing incoming requests 381
securing microservice communications