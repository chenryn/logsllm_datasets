title:Cross-origin pixel stealing: timing attacks using CSS filters
author:Robert Kotcher and
Yutong Pei and
Pranjal Jumde and
Collin Jackson
Cross-origin pixel stealing:
Timing attacks using CSS ﬁlters
Robert Kotcher, Yutong Pei, Pranjal Jumde∗
Carnegie Mellon University
{rkotcher, ypei, pjumde}@andrew.cmu.edu
Collin Jackson
Carnegie Mellon University
PI:EMAIL
ABSTRACT
Timing attacks rely on systems taking varying amounts of
time to process diﬀerent input values. This is usually the
result of either conditional branching in code or diﬀerences
in input size. Using CSS default ﬁlters, we have discovered a
variety of timing attacks that work in multiple browsers and
devices. The ﬁrst attack exploits diﬀerences in time taken to
render various DOM trees. This knowledge can be used to
determine boolean values such as whether or not a user has
an account with a particular website. Second, we introduce
pixel stealing. Pixel stealing attacks can be used to sniﬀ user
history and read text tokens.
Categories and Subject Descriptors
K.4.4 [Computers and Society]: Electronic Commerce
Security; K.4.1 [Computers and Society]: Public Policy
Issues - Privacy
General Terms
Security, Experimentation
Keywords
CSS-Filters, CSS-Shaders, OpenGL ES, Timing Attacks,
Privacy
1.
INTRODUCTION
In this section we discuss CSS ﬁlters and describe how web
content is rendered in browsers. Finally we introduce other
timing attacks to provide a basis for our own work.
1.1 CSS ﬁlter speciﬁcation
Cascading Style Sheets, CSS, is a declarative styling lan-
guage that applies and prioritizes styling rules to elements
of a web document (also known as Document Object Model
elements or ”DOM elements”). Some of the latest members
∗These author contributed equally to this paper
Permission to make digital or hard copies of part or all of this work for personal or  classroom
use is granted without fee provided that copies are not made or distributed for profit or 
commercial advantage, and that copies bear this notice and the full citation  on  the  first  page.
Copyrights for components  of  this  work  owned  by  others  than  the  author(s)  must  be 
honored.  Abstrcacting  with  credit  is  permitted.  To  copy  otherwise,  or  republish,  to  post
on servers or to redistribute to lists, requires prior specific permission and/or fee.
Request permissions from premissions@acm.org.
(cid:38)(cid:82)(cid:83)(cid:92)(cid:85)(cid:76)(cid:74)(cid:75)(cid:87)(cid:3)(cid:75)(cid:72)(cid:79)(cid:71)(cid:3)(cid:69)(cid:92)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:82)(cid:90)(cid:81)(cid:72)(cid:85)(cid:18)(cid:68)(cid:88)(cid:87)(cid:75)(cid:82)(cid:85)(cid:11)(cid:86)(cid:12)(cid:17)(cid:3)(cid:51)(cid:88)(cid:69)(cid:79)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:85)(cid:76)(cid:74)(cid:75)(cid:87)(cid:86)(cid:3)(cid:79)(cid:76)(cid:70)(cid:72)(cid:81)(cid:86)(cid:72)(cid:71)(cid:3)(cid:87)(cid:82)(cid:3)(cid:36)(cid:38)(cid:48)(cid:17)(cid:3)
CCS’13, November 4–8, 2013, Berlin, Germany.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2516712
Figure 1: Image of the Stanford bunny with a CSS
blur ﬁlter
of the CSS feature family, ﬁlter eﬀects, are descendants of the
W3C SVG speciﬁcation[11] that allow developers to apply
personalized style to arbitrary web content. Filters are, as of
recently, GPU accelerated [12, 22] giving developers a robust
new way to stylize arbitrary DOM elements through simple
CSS attributes. While ﬁlters are not implemented in all
browsers, support does exist in WebKit browsers including
Safari, and mobile browsers such as iOS Safari, Blackberry,
and Chrome for Android. Google Chrome is based on Blink
which is a fork of WebKit in the area of graphics [9, 11].
There are three types of CSS ﬁlters. The ﬁrst, built-in
ﬁlters, are canned eﬀects that are parameterized and can be
speciﬁed directly as an attribute-value pair in a CSS class.
Figure 1 shows the Stanford bunny with a blur ﬁlter applied
to the right panel.
The second type, SVG ﬁlters, are similar eﬀects that can
be applied to SVG content.
The ﬁnal type, CSS shaders, was proposed by Adobe to
the W3C FX task force[18] in October, 2011 as a complement
to CSS ﬁlters. Shaders are now referred to as CSS custom
ﬁlter eﬀects. The CSS custom ﬁlter eﬀects allow web devel-
opers to write OpenGL ES shader programs that operate
on arbitrary web content. Content is applied either through
separate text ﬁles speciﬁed with a url or directly through
HTML5 tags[18]. The proposed feature is now a part of the
CSS Filter Eﬀect draft[1], and prototype implementation
has started and is available in developer builds. Because
custom ﬁlters are experimental, they must ﬁrst be enabled
by entering chrome://ﬂags in the URL bar.
1055The GPU can be used to render content more quickly.
While a description of GPU rendering mechanisms is out of
the scope of this paper, its important to know that additional
structures are built for GPU rendering and may also account
for timing diﬀerences.
1.3 Timing attacks
Timing attacks work when a system takes diﬀerent amounts
of time to process diﬀerent inputs [4, 10, 14, 19]. Vulnerabili-
ties tend to occur as a result of inherent behavior, not ”buggy
code”. Scenarios allowing for successful timing attacks have
been found in performance optimized code [2, 14] browser
caching [4, 10], DNS caching [10], CBC encryption, and RAM
cache hits [14]. By timing these properties, an attacker can
gain insight into a large amount of information.
Timing attacks are usually regarded as an invasion of a
user’s privacy [4, 10]. Exposing Private Information by Tim-
ing Web Applications [4] by Bortz et al deﬁnes two families
of web timing attacks:
A Direct timing attack can be used to determine boolean
values such as a user’s login status or content data size such
as the relative size of a shopping cart [4]. A direct timing
attack is carried out by the attacker’s browser against a
victim web server.
In contrast to direct timing attacks, cross-site timing at-
tacks rely on a user to visit, and remain on, a malicious page
while a cross-site exchange is made. Our proposals are all
cross-site timing attacks.
2. RELEVANT SECURITY TOPICS
New features usually arrive with their own set of security
considerations, and CSS ﬁlters are no exception. Much work
has already gone into safe integration of CSS ﬁlters into web
browsers. We ﬁrst present a threat model for our timing
attacks. Then we discuss security in CSS custom ﬁlters,
browsers, and browser policies.
2.1 Threat model
The threat model for our timing attacks is a web attacker
who operates a malicious domain. The attacker is either able
to provide content that keeps a user engaged on a webpage
for an extended period of time, or is able to open another
window in front of the window being attacked.
2.2 Security in CSS custom ﬁlters
Our attempts to look for new timing channels in browser
rendering engines stemmed from an interesting attack pro-
posal by Adam Barth [2], who showed that simply removing
access to sensitive information in custom ﬁlters is not enough
to protect web pages from malicious ﬁlter developers. He
suggested that a fragment shader could contain code similar
to the following:
Listing 1: Abstract timing attack on color
if ( p i x e l C o l o r ! = 0 x000 ) {
for ( int i = 0; i . This page resides at www.attacker.com/
attack.html. The victim must browse to this page for
the attack to occur.
3. Victim is engaged. A victim using a vulnerable
browser visits www.attacker.com/attack.html, and is
engaged for a short period of time.
4. Shaders are applied. A CSS built-in ﬁlter is rapidly
re-applied to the iframe, causing the framed page to
rerender without refreshing. Example code for this step
is in Listing 3.
5. Victim’s data is collected. After some time, the
average framerate is determined.
6. Reference page is timed. The iframe loads the
reference page on the attacker’s server,
located at
www.attacker.com/reference.html, and the same pro-
cess is repeated for the new page. Data must be col-
lected from both pages since timing between devices
may diﬀer.
7. Data is analyzed. The total frame counts for both
pages are returned to the attacker’s server to be com-
pared.
Listing 3: Toggle ﬁlter