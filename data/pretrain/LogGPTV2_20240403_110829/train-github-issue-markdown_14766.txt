### Current Behavior:
I've got a pre-workspaces monorepo setup like this:
    .
    ├── app1
    │   └── package.json
    ├── app2
    │   └── package.json
    └── packages
        ├── pkg1
        │   └── package.json
        └── pkg2
            └── package.json
In app1 and app2 we consume the shared packages like this:
    {
    	"dependencies": {
    		"@us/pkg1": "file:./../packages/pkg1"
    	}
    }
`pkg1` has a set of external dependencies specified in its `package.json`,
e.g.
    {
    	"dependencies": {
    		"lodash": "4.17.21"
    	}
    }
When I run `npm i` from within one of the app folders, the package itself gets
installed, however starting with npm 7 (all versions I could test until now),
the transient dependencies of the packages (lodash when following the example
above) won't get installed, thus making the applications fail with import
errors. When I manually install the transient dependencies by running `npm i`
from within the package directory, it works as expected.
The repo does not have a top level package.json and it does not configure
workspaces anywhere.
### Expected Behavior:
I would expect npm to not only install the linked local package, but also its
dependencies. This happens with npm 6 but not with npm 7.
Using `npm link` or installing does not make a difference.
### Environment:
  * OS: Ubuntu 20.04
  * Node: 12.6.1
  * npm: 7.8.0
### This might not be a bug?
I am aware that npm 7 brought the workspaces feature and this behavior might
not be a bug but expected behavior as I am supposed to use workspaces for such
a monorepo setup, however this would mean we'd need to migrate the entire team
from npm 6 to 7 at the same point in time.
* * *
I created a reproducible example over here https://github.com/m90/npm-
monorepo-issue