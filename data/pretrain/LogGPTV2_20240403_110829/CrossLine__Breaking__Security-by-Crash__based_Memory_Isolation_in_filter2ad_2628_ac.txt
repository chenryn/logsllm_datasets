mentary execution, though very brief, already enables the attacker
VM to impersonate the victim VM and breach its confidentiality
and integrity. Note that the only requirement of the victim VM
at the time of the attack is that it has been launched and the tar-
geted memory pages have been encrypted in the physical memory.
Whether or not the victim VM is concurrently running during the
attack is not important. Therefore, CrossLine is stealthy in that
it does not interact with the victim VM at all. Detection of such
attacks from the victim VM itself is unlikely.
4.1 Variant 1: Extracting Encrypted Memory
through Page Table Walks
The CrossLine V1 explores the use of nested page table walks dur-
ing the momentary execution to decrypt the victim VM’s memory
protected by SEV. To ease the description, let the victim VM’s ASID
be 1 and the attacker VM’s ASID be 2. We use sPFN0 to denote the
system page frame number of the targeted memory page encrypted
with the victim VM’s VEK. We use sPA0 to denote the system phys-
ical address of one 8-byte aligned memory block on sPFN0, which
is the target memory the adversary aims to read. The workflow of
CrossLine V1 is shown in Figure 2. When the hypervisor handles
a VMEXIT of the attacker VM, the following steps are executed:
➀ Clear the Present bits. The hypervisor alters the attacker VM’s
nPT to clear the Present bits of the PTEs of all memory pages.
Thereafter, any memory access from the attacker VM after VMRUN
will trigger a nested page fault, because the mapping from gPA to
sPA in the nPT is missing.
➁ Remap the current gCR3 of the attacker VM. The hypervi-
sor remaps the gCR3 of the current process in the attacker VM by
altering the nPT. Now the gCR3 maps to sPFN0. The hypervisor
then sets the Present bit of this new mapping in the nPT.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2941Algorithm 1: Determine nRIP when dumping one layer of page table
(4096 bytes)
initialization;
while dumping the page do
end
end
try to dump 8-byte memory block sPA0 ;
if sPA0% 0x1000 < 0x800 then
else
nRIP = 0x8000000000* (sPA0% 0x1000 / 0x8);
nRIP = 0xffff000000000000 + 0x8000000000* (sPA0% 0x1000 / 0x8);
Figure 2: Workflow of CrossLine V1.
➂ Modify the attacker VM’s VMCB. The hypervisor changes
the attacker VM’s ASID field in the VMCB to the victim VM’s ASID
(from 2 to 1 in this example).
➃ Specify the targeted page offset. Before resuming the attacker
VM with VMRUN, the hypervisor also modifies the value of nRIP
in VMCB to specify which offset (i.e., sPA0) of the target page (i.e.,
sPFN0) to decrypt. Specifically, in a 64-bit Linux OS, bits 47 to 12
of a virtual address are used to index the page tables: bits 47-39
for the top-level page table; bits 38-30 for the second-level; bits
29-21 for the third; and bits 20-12 for the last-level page table. Each
4KB page in the page table has 512 entries (8 bytes each) and each
entry contains the page frame number of the memory page of next-
level page table or, in the case of the last-level page table, the page
frame number of the target address. CrossLine V1 exploits the
top-level page table walk to decrypt one 8-byte block each time. To
control the offset of the 8-byte block within the page, the adversary
modifies the value of nRIP stored in the VMCB so that its bit 47-39
can be used to index the top-level page table. The algorithm to
choose nRIP properly is specified in Algorithm 1. Specifically, if
the offset is less than 0x800, the nRIP is set to be in the range of
0x0000000000000000 - 0x00007fffffffffff (canonical virtual addresses
of user space); if the offset is greater than or equal to 0x800, the
nRIP is set to be in the range of 0xffff800000000000 - 0xffffffffffffffff
(canonical virtual addresses of kernel space).
➄ Extract secrets from nested page faults. After VMRUN, the
resumed attacker VM immediately fetches the next instruction to
be executed from the memory. This memory access is performed
with ASID=1 (i.e., the victim VM’s ASID). The address translation is
also performed with the same ASID. As the TLB does not hold valid
entries for address translation, and thus an address translation starts
with a page table walk from the gCR3, which maps to sPFN0 in the
nPT. Therefore, an 8-byte memory block on sPFN0, whose offset is
determined by bit 47-39 of the virtual address of the instruction, is
loaded by the processor as if it is an entry of the page table directory.
As long as the corresponding memory block conforms to the format
of a PTE (to be described shortly), the data can be extracted and
notified to the adversary as the faulting address (encoded in the
EXITINFO2 field of VMCB).
4.1.1 Dumping Victim Page Tables A direct security conse-
quence of CrossLine V1 is to dump the victim VM’s entire guest
page table, which is deemed confidential as page-table pages are
always encrypted in SEV VMs regardless of the C-bit in the PTEs.
To dump the page tables, the adversary first locates the root of
the victim VM’s guest page table specified by its gCR3. She can do
so by monitoring the victim VM’s page access sequence using page-
fault side channels. Specifically, during the victim VM’s VMEXIT,
the adversary clears the Present bit of all page entries of the nPT
of the victim VM, evicts all the TLB entries, invalidates the nPT
entries cached by nTLB and PWC. After VMRUN, the victim VM
immediately performs a page table walk. The gPA of the first page
to be accessed is stored in its gCR3. The adversary thus learns the
gPA of the root of the guest page table. Once each of the entries of
the root page table is extracted by CrossLine V1, the rest of the
page table can be decrypted one level after another.
Evaluation. We evaluated this attack on a blade server with an
8-Core AMD EPYC 7251 Processor. The host OS runs Ubuntu 64-
bit 18.04 with Linux kernel v4.20 and the guest VMs run Ubuntu
64-bit 18.04 with Linux kernel v4.15 (SEV supported since v4.15).
The QEMU version used was QEMU 2.12. The victim VMs were
SEV-enabled VMs with 4 virtual CPUs, 4 GB DRAM and 30 GB disk
storage. The attacker VMs were SEV-enabled VMs with only one
virtual CPU, 2 GB DRAM and 30 GB disk storage. All the victim
VMs were created by the ubuntu-18.04-desktop-amd64.iso image
with no additional modification.
After decrypting one 8-byte memory block, the attacker VM is
trapped by a triple fault, which indicates the VM itself cannot handle
the error. In order to continue decrypting other memory blocks, one
intuitive solution is to reboot the attack VM every time there is a
triple fault. Our empirical evaluation sugggests that it takes around
2 seconds to decrypt one 8-byte memory block (including a VM
reboot). To speed up the memory decryption, the adversary could
take the following VMCB rewinding approach: After extracting one
8-byte block through a VMEXIT caused by the nested page fault, the
adversary could continue to decrypt the next 8-byte block without
rebooting the attacker VM. To do so, the adversary directly repeats
the attack steps by rewinding the VMCB of the attacker VM to the
previous state and changing the nRIP to perform the next round of
attack. With this approach, we found the average time (over 500
trials) to decrypt a 4KB memory page by a single attacker VM was
only 39.580ms (with a standard deviation of 4.26ms).
4.1.2 Reading Arbitrary Memory Content Beyond page ta-
bles, the adversary could also extract regular memory pages of the
victim VM. For example, if the data of an 8-bytes memory block is
0x00 0x00 0xf1 0x23 0x45 0x67 0x8e 0x7f, the extracted data
through page fault is 0x712345678; if the data is 0x00 0x00 0x0a
0xbc 0xde 0xf1 0x20 0x01, the extracted data is 0xabcdef12.
ATK VM’s VMCBLinear AddressFirst Page Table Walk After VMRUNCPUDec with Vic’sVEKNPFKVMVMRUNgCR3ASIDN_RIPWith VIC’s ASIDVMEXITWith ATK’s ASIDSystem MemoryNCR3gCR3SPANCR3VIC RAM①ClearPBitinNPT②RemapgCR3③ModifyASID⑤ExtractSecret④SpecifyoffsetSession 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea29425.88%, 6.10%, and 6.50%. While they only account for a small por-
tion of the whole memory space, they leak enough information for
process fingerprinting purposes.
4.2 Variant 2: Executing Victim VM’s
Encrypted Instructions
In CrossLine V2, we show that, when certain conditions are met,
it is possible for the attacker VM to momentarily execute a few
instructions that are encrypted in the victim VM’s memory. Appar-
ently, CrossLine V2 is more powerful than the previous variant.
Fortunately, the only prerequisite of CrossLine V2 is the conse-
quence of CrossLine V1.
Similar to the settings in the previous attack variant, two SEV
VMs were configured so that the ASID of the victim VM is 1 and
the ASID of the attacker VM is 2. We assume that the attacker
VM aims to execute one instruction—“movl $2020, %r15d"—in
the victim VM’s encrypted memory. Let the virtual address of this
target instruction be gVA0 and the corresponding gCR3 of the target
process be gCR30. The adversary’s strategy is to follow the common
steps of CrossLine attacks and manipulate the nPT of the attacker
VM so that it finishes a few nested page table walks to successfully
execute this instruction. More specifically, CrossLine V2 can be
performed in the following steps:
➀ Prepare nPT. The hypervisor clears the Present bit of all PTEs
of the attacker VM’s nPT. It also prepares valid mappings for the
gVA0 to the physical memory encrypted with the victim’s VEK. To
do so, the hypervisor needs to prepare five gPA to sPA mappings
(for the gPFNs of the four levels of the gPT and the instruction
page), respectively.
➁ Set nRIP. The hypervisor sets nRIP as gVA0. It also clears the
Interrupt Flag of the RFLAGs register (RFLAGS.IF) in the VMCB, so
that the attacker VM directly executes the next instruction specified
by nRIP, instead of referring to Interrupt-Descriptor-Table Register.
➂ Change ASID. The hypervisor changes the attacker VM’s ASID
to the victim’s ASID, marks the VMCB as dirty, and resumes the
attacker VM with VMRUN. During the next VMEXIT, the value
of %𝑟15 has been changed to $2020, which means the attacker VM
has successfully executed an instruction that is encrypted with the
victim’s VEK.
These experiments suggest that CrossLine allows the attacker
VM to execute some instruction of the victim VM. We exploit this
capability to construct decryption oracles and encryption oracles.
4.2.1 Constructing Decryption Oracles A decryption oracle
allows the adversary to decrypt an arbitrary memory block en-
crypted with the victim’s VEK. With CrossLine V2, the attacker
VM executes one instruction of the victim VM to decrypt the target
memory.
The first step of constructing a decryption oracle is to locate an in-
struction in the victim VM with the format of “mov (%𝑟𝑒𝑔1),%𝑟𝑒𝑔2”,
which loads an 8-byte memory block whose virtual address is spec-
ified in 𝑟𝑒𝑔1 to register 𝑟𝑒𝑔2. As most memory load instructions
follow this format, the availability of such an instruction is not
an issue. The adversary can leverage CrossLine V1 to scan the
physical memory of the victim VM, in hope that the readable mem-
ory blocks contain such a 3-byte instruction. Alternatively, if the
Figure 3: Valid PTE format.
However, as CrossLine V1 only reveals the encrypted data as a
page frame number embedded in the PTE, such memory decryption
only works on 8-byte aligned memory blocks (i.e., the begin address
of the block is a multiple of 8 and the size of the block is also 8
bytes) that conforms to the format of a PTE.
Concretely, as shown in Figure 3, the 8-byte memory block to be
extracted from CrossLine, must satisfy the following requirements:
The Present bit (bit 0) must be 1; Bits 48-62 must be all 0s, and Bits
7-8 are both 0s (optional). This is because the Present bit must be 1
to trigger nested page fault. Otherwise, non-present faults in the
guest VM will be handled without involving the hypervisor. Bits
48-62 are reserved and must be 0. The Page Size (PS) bit (bit-7) is
used to determine the page size (e.g., 4KB vs. 2MB); the Global Page
(G) bit (bit-8) is used to indicate whether the corresponding page
is a global page. These 2 bits can only be set 1 in the last level of
the page table. Therefore, if CrossLine V1 generates page faults at
the top-level page table, they must be set as 0. However, we find
it possible to configure the nPT so that the first three levels of the
guest page table walk all pass successfully, and only trigger the
nested page fault at the last-level page table. In this way, the target
memory block can be regarded as a PTE of the last-level page table
and hence these two bits are not restricted to be 0s. It is also worth
pointing out that the non-executable page-protection feature is
enabled by default [4]. For example, the level-four No-Execute (NX)
bit (bit-63) controls the execution ability to execute code from all
downward 128M (512 × 512 × 512 × 4KB) physical pages. The value
of NX bit does not cause violation during the page table walk itself,
so CrossLine will succeed.
Performance evaluation. The speed of memory decryption for
arbitrary memory content is the same as dumping page tables,
as long as the they are of PTE format. If the target block does
not conform to the PTE format, a triple fault takes place instead
of nested page fault, in which case the adversary could take the
VMCB rewinding approach and target another memory block in
the next round of attacks.
Percentage of readable memory blocks. We studied the binary
file of ten common applications, python 2.7, OpenSSH 7.6p1, perl
5.26.1, VIM 8.0.1453, tcpdump 4.9.3, patch 2.7.6, grub-install 2.02.2,
sensors 3.4.0 , Nginx 1.14.0, and diff 3.6, which are installed from
the default package archives in Ubuntu 18.04 (64-bit). The percent-
ages of 8-byte aligned memory blocks that can be directly read
using this method is 1.00%, 1.53%, 1.79%, 1.81%, 2.10%, 3.50%, 4.00%,
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2943kernel version of the victim VM is known, the adversary can scan
the binary file of the kernel image to locate this instruction and
then obtain its runtime location by reading the gPT, which can be
completely extracted by CrossLine V1.
Let the virtual address of this instruction be gVA0, its corre-
sponding system physical address be sPA0, and the gCR3 value of
the process in the victim VM be gCR30. The virtual address and
the system physical address of the target memory address to be
decrypted are gVA1 and sPA1. Note since the adversary is able to
extract the gPT of the victim, the corresponding translation for
gVA0 and gVA1 can be obtained. Then following the three steps
outlined above, during a VMEXIT of the attacker VM, the adver-
sary prepares the nPT of the attacker VM (including one mapping
for gCR30, four mappings for gVA0, and four mappings for gVA1),
configures the VMCB (including nRIP, ASID, the value of %𝑟𝑒𝑔1),
and then resumes the attacker VM.
In the next VMEXIT, the adversary is able to extract the secret
stored in sPA1 by checking the value of %𝑟𝑒𝑔2. The adversary can
immediately perform the next round of memory decryption. The
system physical page frame number can be manipulated in the
last-level nPT and the page offset can be controlled in %𝑟𝑒𝑔1.
Performance evaluation. We measured the performance of the
decryption oracle described above for decrypting a 4KB memory
page. With only one attacker VM, the average decryption time (of
5 trials) for a 4KB page was 113.6ms with one standard deviation
of 4.3ms. Note the decryption speed is slower than the optimized