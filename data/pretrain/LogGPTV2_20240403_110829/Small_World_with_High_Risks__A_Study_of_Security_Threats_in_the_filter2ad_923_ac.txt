In 2018, the npm ecosystem included 230,000 packages, a number that has been growing steadily since npm's inception. The graph at the bottom illustrates the reach of the top-5 packages (in terms of their package reach as of 2018). In 2018, each of these packages reached between 134,774 and 166,086 other packages, making them highly attractive targets for potential attackers.

To better understand the evolution of package reach over time, Figure 5 shows the distribution of reached packages for multiple years. For example, the red line indicates that in 2018, approximately 24,500 packages had reached at least 10 other packages, compared to about 9,500 packages in 2015. This trend highlights that more and more packages are reaching a significant number of other packages, thereby increasing the attractiveness of attacks that exploit dependencies.

Some highly popular packages reach over 100,000 other packages, making them prime targets for attacks. This problem has been intensifying over the past few years. The high reach of a package amplifies the impact of both vulnerabilities (TM-leg) and malicious code (TM-mal). An example of the latter is the event-stream incident, which is discussed in Section 2.2 under TM-acc.

### Growth and Impact

The number of packages and maintainers in the npm ecosystem has been increasing super-linearly over the past eight years. By the end of our measurement period, there were 676,539 packages, a number likely to exceed one million soon. These packages are maintained by 199,327 maintainers, with a stable ratio of packages to maintainers ranging from 2.81 to 3.51.

While this growth is generally positive for the JavaScript community, as it increases the amount of reusable code, it also means that developers may rely more on third-party code, thereby increasing the attack surface for TM-pkg. This section analyzes the evolution of direct and transitive dependencies (Section 4.1.1) and the reach of individual packages via dependencies (Section 4.1.2).

#### 4.1.1 Direct and Transitive Dependencies

Figure 3 illustrates the number of direct and transitive dependencies for an average npm package. The number of direct dependencies has increased slightly from 1.3 in 2011 to 2.8 in 2018, which is expected given the growing code base. However, a small linear increase in direct dependencies leads to a significant, super-linear increase in transitive dependencies. As shown in Figure 3, the number of transitive dependencies for an average package has risen to 80 in 2018 (note the logarithmic scale).

From a security perspective, each directly or transitively depended-on package becomes part of the implicitly trusted code base. When installing a package, it is crucial to be aware of this trust chain.

### Package Reach Analysis

The event-stream package, with a reach of 5,466 as of April 1, 2018, is just one of many possible targets. In fact, 1,165 other packages have a greater or equal reach, indicating that similar attacks could easily be repeated with other packages.

For the eslint-scope security incident, we need to use a modified version of package reach that includes dev dependencies. This modified reach shows that eslint-scope has a reach of over 100,000 packages, but there are 347 other packages with a higher reach, suggesting that even more serious attacks may occur in the future.

### Analysis of Maintainers

There is a significant difference between npm maintainers and repository contributors. While contributors have control over the code, only maintainers can release new versions on npm. The security risks associated with maintainers should be considered a lower bound for the overall attack surface.

Attacks targeting maintainers, such as the eslint-scope incident, highlight the vulnerability of the ecosystem to targeted attacks. We further discuss the relationship between packages and maintainers.

#### 4.2.1 Packages per Maintainer

Despite the super-linear growth of the ecosystem, the number of packages per maintainer also increases, suggesting that current members are actively publishing new packages. The average number of packages controlled by a maintainer rose from 2.5 in 2012 to 4.5 in 2018. Conversely, the average number of maintainers per package is 1.35. The top 5,000 most popular packages have an average of 2.83 maintainers.

Figure 6 shows the evolution of the number of packages a maintainer controls. The majority of maintainers manage few packages, but some manage over 100. The number of maintainers managing more than one package has more than tripled from 2015 to 2018.

#### 4.2.2 Implicitly Trusted Maintainers

The average npm package transitively relies on code published by 40 maintainers, while popular packages rely on only 20. Figure 8 shows the evolution of the average number of implicitly trusted maintainers, which almost doubled in the last three years. This is concerning, as compromising any of these maintainer accounts can seriously impact the security of a package.

#### 4.2.3 Maintainers Reach

Figure 10 plots the reach of maintainers in the npm ecosystem. The reach has increased at all levels, with 391 highly influential maintainers affecting more than 10,000 packages in 2018. If an attacker compromises the account of any of these maintainers, the community will experience a serious security incident.

### Security Advisories Evolution

Finally, we study the reporting and fixing of vulnerabilities in the npm ecosystem (TM-leg). Figure 13 shows the number of reported vulnerabilities, which has increased steeply in the last two years. Figure 14 shows the rate of published vulnerabilities per 10,000 packages, growing from two in 2013 to almost eight in 2018. This indicates a healthy security community that reports vulnerabilities at a good pace, keeping up with the ecosystem's growth.

### Conclusion

The npm ecosystem's growth, while beneficial, also increases the attack surface. Highly popular packages and maintainers with extensive reach are prime targets for attacks. The community must remain vigilant and proactive in addressing these security challenges.