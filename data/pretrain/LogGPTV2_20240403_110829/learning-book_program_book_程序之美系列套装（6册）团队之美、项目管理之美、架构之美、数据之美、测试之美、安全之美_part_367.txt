---
## Page 2094
画布元素（canvaselement）。当测试运行的时候，每一个文件被加
载入浏览器窗口的一个元素。当文件的onload事件被引发
的时候，“魔法"就发生了，例19-2中的代码将被调用。借助第一个
onload事件，待测渲染被复制并保存到一个画布上。第二个onload事
件把我们带入了选择语句的第二种情况，复制参照的渲染到另一个
画布并且调用gWindowUtils.compareCanvases函数来比较两个画布。
[5]
例19-2：参照测试框架里的图像比较
function DocumentLoadedO
...Some Housekeeping Stuff.
if(gURICanvases[gCurrentURL]){
gCurrentCanvas=gURICanvases[gCurrentURL];
}else if(gCurrentCanvas==null)
InitCurrentCanvasWithSnapshotO;
if(gState=1){
gCanvas1=gCurrentCanvas;
}else
gCanvas2=gCurrentCanvas;
gCurrentCanvas=null;
resetZoom);
2093
---
## Page 2095
switch(gState)
case 1:
/First document has been loaded.
/Proceed to load the second document.
StartCurrentURI(2);
break;
case 2:
/Both documents have been loaded.Compare the renderings and see
/if the comparison result matches the expected result specifed
/in the manifest.
/number of different pixels
var differences;
/whether the two renderings match:
var equal;
if(gWindowUtils){
differences=gWindowUtils.compareCanvases(gCanvas1,gCanvas2,{});
equal=(differences==0);
}else{
differences=-1;
var k1=gCanvas1.toDataURLO;
var k2=gCanvas2.toDataURLO;
equal=(k1==k2);
2094
---
## Page 2096
//And then we use the manifest token to determine how to interpret
//the result of the compareCanvases call...
如果框架判定比较结果不符合清单，那么测试就被视为失败了。当
测试失败以后，待测画布和参照画布都被序列化成测试记录里的数
据URL了。使用该信息，日志观察者们就能通过把测试图像和参照
图形相叠加，来可视化地渲染失败结果，从而判定是什么导致了错
误。
[1]http://www.mozilla.org/about/manifesto.en.html查看Mozilla宣言。
[2]CSS2.1选择器，参见http://www.w3.org/TR/CSS2/selector.html。
[3]事实上，由于在Gecko中的实现方式，本测试实际测试了相
同的代码路径，但是这个例子清楚地解释了参照测试的原理。
[4]在http://mxr.mozilla.org/mozilla-
central/source/layout/tools/reftest/README.txt。
[5]关于nsIDomWindowUtilsCompareCanvases的C++代码，请参见
http://mxr.mozilla.org/mozilla-
central/source/dom/base/nsDOMWindowUtils.cpp#611。
参照测试的扩展性
测试框架会比它们所测的程序使用得更久，因而可扩展性在它们的
设计中至关重要。可扩展性对于参照测试尤为重要的原因是它必须
适应不断改变的开放性Web应用。虽然如表19-1所示的内容就是1996
年的参照测试所需的全部行为，但是今天的页面有了更加复杂的行
为，于是现在的测试需要模拟这些行为。为了维护一个综合性的渲
染引擎的测试套件，参照测试会继续调整以应对Web带来的挑战。
异步测试
Web不仅仅再是一个静态的场地。页面会修改它们的DOM对象，增
加和移除元素还有样式规则，浏览器必须能对此及时地做出响应。
要测试这种行为，"reftest-wait"测试就应运而生了。这类测试里，当
2095
---
## Page 2097
onload事件触发的时候，渲染过的画布并不会被送往compareCanvas
函数。测试的建立者使用JavaScript去告诉参照测试框架何时捕捉用
以比较的文件。这使得我们自已就能设计出可以利用标准onload处理
函数的测试，就像许多网页所做的一样（表19-3）。
备注
测试用例：编辑摘要一输入第二个摘要
wait_for_element_present_oksteditsummarytextarea
30000
click.ok
steditsummarytextarea
这个测试里有两样事情需要注意：第一个是元素的class属
性，第二个是元素的onload属性。节点里的class属
性的"reftest-wait"值指出子系统是一个reftest-wait测试。参照测试子
系统将创建一个监听器来检测class属性的值何时发生改变。在元素里，我们定义了一个onload事件处理器去引导浏览器在页
面加载的时候调用fixupDOM函数。函数fixupDOM的功能是改变body
标签的样式，引发CSS系统自动生成内容，引发"Before"和"After"单
词的出现。请注意fxupDOM函数的最后一行：
document.documentElement.className
2096
---
## Page 2098
这行清除了标签的class属性，给测试的监听器发送了信号，
同时引发测试框架去捕捉画布进行比较。如果测试清除reftest-wait值
没有成功，那么测试会超时并被标记为失败。
这个测试中的参照文件非常简单。它是一个包含用来匹配测试最终
状态的标记的静态HTML页面。因为这是一个静态页面，所以没必要
把reftest-wait标签放在参照标记上。参照渲染加载，参照测试系统马
上就会捕捉它。保持参照文件尽量简单是非常有用的，因为这样可
以确信测试正在测需要测试的部分，在这个例子里要测的是由CSS
生成的内容。1]
打印测试
设想一下此时你正在机场拿着需要自己去打印的登机牌，而它上面
的条形码却因为印刷错误不能被扫描。如今，很多公司都把越来越
多的服务内容转移到网上：预约、收据、票务、支票、地图、照片
等。但如果你需要一份任何该信息的硬拷贝，你还是得自已去打
印。所以，虽然打印看起来像是一个早已被解决的问题，但实际上
它对于现代浏览器来说是非常重要的。而且，当更多的重要文件打
印服务切换成“自助"模式时，重要性会进一步提高。
打印引入了一种不同类型的渲染，从页面空百设置、分页到不同的
颜色模式。即使对于最简单的页面，当开始打印时，该页也会根据
实际纸张的页面设置被切分成不同的部分。例如，在法律纸张上打
印不同于在信封上打印。因为网站的复杂性也在增加，它们也试图
去干预浏览器打印它们的方式。网页现在引入了被称为@mediaCSS
规则的打印专用的样式规则。这创建了一个全新的领域，带来了页
面渲染的多种可能性。而这些可能性必须被测试。[2]
测试中的reftest-print种类允许对各种打印配置进行测试。它的语法和
异步reftest-wait测试完全一样，但是机制却是完全不同的（表19
4）。
2097
---
## Page 2099
备注
测试用例：编辑摘要
输人第二个摘要
wait_for_element_present_ok
steditsummarytextarea
30000
click.ok
steditsummarvtextarea
2098
---
## Page 2100
备注
测试用例：编辑摘要—输入第二个摘要
wait_for_element_present_ok
steditsummarytextarea
30000
click.ok
steditsummarytextarea
reftest-print类就像一个典型的类定义的那样工作。它定义了具体的页
面排版，强制了页面被渲染就如同它被打印在一些3英寸x5英寸索引
卡片上一样。因为reftest-print类的目的是更改画布的大小，所以它必
须被包含进测试项和参照项的标记中。不同于表19-3中的异步测
试，它不需要移除reftest-print的值。
表19-4中的测试项确保根元素设置中的整个页面的高度设置被适当
地计算过。通过使用100%高度设置，高度成为了根元素高度的一项
功能。如果计算恰当，那么测试项中的标记将会跨越两个页
面。在标记中的"The...."将会被绘制到蓝色框后面，用来触发page
break-beforeCSS样式规则，从而确信在元素之内有内容并且达
到分页的目的。
表中的参照项则要清晰得多：两个标签，各带有一个100%高
度设置项，引起渲染引擎把放到每个页面。
2099
---
## Page 2101
失效测试
失效测试是最近增加到参照测试框架的能力。当文档的一部分改变
了而剩下的部分保持不变，改变的部分就被称做是“失效的”，因为
它必须被渲染引擎重新绘制。所有的失效测试都是异步测试，允许
我们可以完全控制什么时候使用快照（snapshot）捕捉画布。为了进
行失效测试，我们从渲染引擎捕捉信号以便得知何时修改页面来使
得先前的渲染失效。一旦先前的渲染失效了，我们就移除"reftest
wait"值并允许快照被捕捉。
一个简单的失效测试可能是：用不透明的形状覆盖一个文档的一部
分，然后移除该形状从而引起被覆盖的背景被重新绘制。我们把这
个测试同没有覆盖形状的静态渲染做个比较，如图19-1所示。
这次，让我们从参照文件开始。这个测试的参照物仅仅是一个绿色
边框环绕的句子。