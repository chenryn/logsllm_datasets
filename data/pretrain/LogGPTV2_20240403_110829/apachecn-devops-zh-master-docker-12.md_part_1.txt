# 十二、Docker 安全
在这一章中，我们将看看 Docker 安全性，这是目前每个人脑海中最前沿的话题。我们将把这一章分成以下五个部分:
*   容器注意事项
*   Docker 命令
*   最佳实践
*   Docker Bench 安全应用
*   第三方安全服务
# 技术要求
在本章中，我们将在桌面上使用 Docker，我们将使用 Docker Machine 在云中启动 Docker 主机。和前面几章一样，我将使用我喜欢的操作系统，也就是 macOS。如前所述，我们将运行的 Docker 命令将在迄今为止安装了 Docker 的所有三个操作系统上运行。然而，一些支持命令可能只适用于基于 macOS 和 Linux 的操作系统，而且数量很少。
查看以下视频，了解《行动守则》:
[http://bit.ly/2AnEv5G](http://bit.ly/2AnEv5G)
# 容器注意事项
当 Docker 首次发布时，有很多关于 Docker 与虚拟机的讨论。记得在杂志上看文章，在 Reddit 上评论帖子，看不完的博文。在 Docker alpha 和 beta 版本的早期，人们习惯于像虚拟机一样接近 Docker 容器，因为实际上没有任何其他参考点，我们将它们视为微小的虚拟机。
过去，我会启用 SSH，在容器中运行多个进程，甚至通过启动一个容器并运行命令来安装我的软件栈来创建我的容器映像。这是我们在[第二章](02.html) *中讨论过的，建造容器映像*；你永远不应该这样做，因为这被认为是一种不好的做法。
因此，与其讨论容器和虚拟机，不如让我们看看在运行容器而不是虚拟机时需要考虑的一些问题。
# 优点
当您启动一个 Docker 容器时，Docker 引擎会在幕后做很多工作。Docker 引擎在启动容器时执行的任务之一是设置名称空间和控制组。这是什么意思？通过设置名称空间，Docker 将进程隔离在每个容器中——不仅与其他容器隔离，还与主机系统隔离。控制组确保每个容器都获得自己的项目份额，如中央处理器、内存和磁盘输入/输出。更重要的是，它们确保一个容器不会耗尽给定 Docker 主机上的所有资源。
正如您在前面几章中看到的，能够将容器启动到 Docker 控制的网络中意味着您可以在应用级别隔离容器；应用 A 的所有容器都不能在网络层访问应用 b 的容器
此外，这种网络隔离可以通过使用默认网络驱动程序在单个 Docker 主机上运行，也可以通过使用 Docker Swarm 的内置多主机网络驱动程序或来自 Weave 的 Weave Net 驱动程序跨越多个 Docker 主机。
最后，我认为 Docker 相对于典型虚拟机的最大优势之一是，您不必登录容器。Docker 正在尽最大努力避免您需要登录容器来管理它正在运行的进程。有了`docker container exec`、`docker container top`、`docker container logs`和`docker container stats`这样的命令，你可以做任何你需要做的事情，而不会暴露出比你必须暴露的更多的服务。
# 你的 Docker 主持人
当您处理虚拟机时，您可以控制谁有权访问哪个虚拟机。假设您只希望开发人员用户 1 能够访问开发虚拟机。但是，用户 2 是负责开发和生产环境的操作员，因此他需要访问所有虚拟机。大多数虚拟机管理工具都允许您授予虚拟机基于角色的访问权限。
对于 Docker，您有一个小缺点，因为无论谁能够访问您的 Docker 主机上的 Docker 引擎，无论是通过被授予 sudo 访问权限，还是通过将其用户添加到 Docker Linux 组，都可以访问您正在运行的每个 Docker 容器。他们可以运行新的容器，可以停止现有的容器，还可以删除映像。请注意您授予谁访问主机上的 Docker 引擎的权限。他们实际上掌握着王国的钥匙，关于你所有的容器。了解了这一点，建议只对 Docker 使用 Docker 主机；将其他服务与 Docker 主机分开。
# 映像信任
如果您正在运行虚拟机，您很可能会自己从头开始设置它们。很可能，由于下载的规模(以及启动它的努力)，你不会下载某个互联网上的随机人创建的预建机器映像。通常，如果您要这样做，它将是来自可信软件供应商的预构建虚拟设备。
因此，您将知道虚拟机内部有什么，什么没有，因为您负责构建和维护它。
Docker 的部分吸引力在于它的易用性；然而，这种易用性会使它很容易忽略一个非常关键的安全考虑:你知道它在你的容器里面运行什么吗？
在前面的章节中，我们已经谈到了**映像信任**。例如，我们谈到不发布或下载尚未使用 Dockerfiles 定义的映像，不将自定义代码或机密(等等)直接嵌入到您将推送到 Docker Hub 的映像中。
虽然容器有名称空间、控制组和网络隔离的保护，但我们讨论了判断不佳的映像下载如何会给您的环境带来安全问题和风险。例如，运行未修补软件的完全合法的容器会给应用和数据的可用性带来风险。
# Docker 命令
让我们看一下 Docker 命令，这些命令可以用来帮助加强安全性，以及查看您可能正在使用的映像的信息。
我们将重点关注两个命令。第一个将是`docker container run`命令，这样你就可以看到一些你可以用这个命令对你有利的物品。其次，我们来看一下`docker container diff`命令，您可以使用它来查看您计划使用的映像的处理情况。
# 运行命令
关于`docker run`命令，我们将主要关注允许您将容器内的所有内容设置为只读的选项，而不是指定的目录或卷。这有助于限制恶意应用可能造成的损害，恶意应用还可能通过更新易受攻击的应用的二进制文件来劫持该应用。
让我们看看如何启动只读容器，然后分解它的功能，如下所示:
```
$ docker container run -d --name mysql --read-only -v /var/lib/mysql -v /tmp -v /var/run/mysqld -e MYSQL_ROOT_PASSWORD=password mysql
```
这里，我们正在运行一个 MySQL 容器，并将整个容器设置为只读，除了以下文件夹:
*   `/var/lib/mysql`
*   `/var/run/mysqld`
*   `/tmp`
这些卷将创建为三个独立的卷，然后以读/写方式装载。如果您不添加这些卷，那么 MySQL 将无法启动，因为它需要读/写访问才能在`/var/run/mysqld`中创建套接字文件，在`/tmp`中创建一些临时文件，最后在`/var/lib/mysql`中创建数据库本身。
容器内的任何其他位置都不允许您在其中写入任何内容。如果您尝试运行以下内容，将会失败:
```
$ docker container exec mysql touch /trying_to_write_a_file
```
前面的命令会给你以下信息:
```
touch: cannot touch '/trying_to_write_a_file': Read-only file system
```
如果您想要控制容器可以写入(或不写入)的位置，这将非常有帮助。一定要明智地使用这个。彻底测试，因为当应用无法写入特定位置时，可能会有后果。
与前面的命令`docker container run`类似，我们将所有内容设置为只读(除了指定的卷)，我们可以反其道而行之，将单个卷(或者更多，如果您使用更多的`-v`开关)设置为只读。关于卷要记住的一点是，当您使用一个卷并将其装入容器时，它将作为一个空卷装入容器内的目录顶部，除非您在容器启动后使用`--volumes-from`开关或以其他方式向其添加数据:
```
$ docker container run -d -v /local/path/to/html/:/var/www/html/:ro nginx
```
这将把`/local/path/to/html/`从 Docker 主机挂载到`/var/www/html/`，并将它设置为只读。如果您不想让正在运行的容器写入卷，以保持数据或配置文件完好无损，这将非常有用。
# 差异命令
我们再来看看`docker diff`命令；由于它涉及容器的安全方面，您可能希望使用 Docker Hub 或其他相关存储库中托管的映像。
请记住，任何有权访问您的 Docker 主机和 Docker 守护程序的人都有权访问您所有正在运行的 Docker 容器。也就是说，如果您没有适当的监控，有人可能会对您的容器执行命令并做恶意的事情。
让我们看一下我们在上一节中启动的 MySQL 容器:
```
$ docker container diff mysql
```
您会注意到没有文件被返回。为什么会这样？
好吧，`diff`命令告诉你自从容器启动后对映像所做的改变。在前一节中，我们启动了带有只读映像的 MySQL 容器，然后将卷装载到我们知道 MySQL 需要能够读写的位置，这意味着我们下载的映像和我们正在运行的容器之间没有文件差异。
停止并删除 MySQL 容器，然后通过运行以下命令清理卷:
```
$ docker container stop mysql
$ docker container rm mysql
$ docker volume prune
```
然后，再次启动同一个容器，去掉只读标志和卷；这给了我们一个不同的故事，如下:
```
$ docker container run -d --name mysql -e MYSQL_ROOT_PASSWORD=password mysql
$ docker container exec mysql touch /trying_to_write_a_file
$ docker container diff mysql
```
如您所见，创建了两个文件夹并添加了几个文件:
```
A /trying_to_write_a_file
C /run
C /run/mysqld
A /run/mysqld/mysqld.pid
A /run/mysqld/mysqld.sock
A /run/mysqld/mysqld.sock.lock
A /run/mysqld/mysqlx.sock
A /run/mysqld/mysqlx.sock.lock
```
这是发现容器内可能发生的任何异常或意外的好方法。
# 最佳实践
在本节中，我们将了解 Docker 的最佳实践，以及*互联网安全中心*指南，以正确保护 Docker 环境的各个方面。
# Docker 最佳实践
在深入了解互联网安全中心指南之前，让我们先来看一下使用 Docker 的一些最佳实践，如下所示:
*   **每个容器一个应用**:将您的应用分散到每个容器一个。Docker 就是为此而生的，它让一切变得更容易，在一天结束的时候。我们之前讨论的隔离是关键所在。
*   **只安装你需要的东西**:前面几章我们已经讲过了，只在你的容器镜像中安装你需要的东西。如果您必须安装更多的来支持您的容器应该运行的一个进程，我建议您回顾一下原因。这不仅使您的映像小巧便携，还减少了潜在的攻击面。
*   **查看谁有权访问您的 Docker 主机**:请记住，无论谁对您的 Docker 主机拥有 root 或 sudo 访问权限，都有权操作主机上的所有映像和容器。
*   **使用最新版本**:始终使用最新版本的 Docker。这将确保所有安全漏洞都已修补，并且您也拥有最新的功能。在修复安全问题时，使用社区版本保持最新可能会引入由功能变化或新功能引起的问题。如果这是你关心的问题，那么你可能会想看看 LTS 企业版可从 Docker，以及红帽。
*   **利用资源**:如果需要帮助，就利用可以利用的资源。Docker 内部的社区非常庞大，非常有帮助。在规划您的 Docker 环境和评估平台时，使用他们的网站、文档和 Slack 聊天室对您有利。有关如何访问 Slack 和社区其他部分的更多信息，请参见[第 14 章](14.html) *，Docker 的下一步*。
# 互联网安全基准中心
**互联网安全中心(CIS)** 是一个独立的非营利组织，其目标是提供安全的在线体验。他们发布基准和控制，这些被认为是信息技术所有方面的最佳实践。
Docker 的 CIS 基准测试可以免费下载。您应该注意到，它目前是一个 230 页的 PDF，在知识共享许可下发布，涵盖了 Docker CE 17.06 和更高版本。
当您实际运行扫描(在本章的下一节)并获得需要(或应该)修复的结果时，您将参考本指南。该指南分为以下几个部分:
*   主机配置
*   Docker 守护程序配置
*   Docker 守护程序配置文件
*   容器映像/运行时
*   Docker 保安业务
# 主机配置
指南的这一部分是关于 Docker 主机的配置。这是 Docker 环境的一部分，您的所有容器都在这里运行。因此，保持它的安全是最重要的。这是抵御攻击者的第一道防线。