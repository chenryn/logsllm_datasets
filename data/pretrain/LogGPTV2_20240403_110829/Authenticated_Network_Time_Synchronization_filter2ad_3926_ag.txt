client session πs∗
i∗ to accept maliciously in Game 9.
MAC (BA8 ).
We brieﬂy summarize the changes in games.
1. Nonces no longer collide for honest parties. Each
i .T will have unique honest matching
transcript πs
session πt
j.
asked.
2. Guess target session; C aborts if Reveal(i,s) query
3. Guess partner session; C aborts if Corrupt( j) or
4. Hash values no longer collide for honest parties.
Note h is now unique for each negotiation phase,
via Game 1.
Reveal( j,t) query asked.
5. C1 is not forged in session πt
j.
6. Replace premaster secret pms in target session πs
i
with a random value, rather than key encapsulated in
KEM ciphertext e. Note k is unique and computed
via shared secret data.
7. Replace k with uniformly random data of same
length when computing τ. Thus veriﬁcation of τ
in Time Synchronization and Key Exchange phases
is done via a uniformly random key, independent of
the protocol run.
8. C2 is not forged in session πt
j and contains random
data.
i are not forged.
9. MAC tags in session πs
After all of the game changes, πs
i is a target session
where: no Reveal(i,s) or Reveal( j,t) queries were is-
sued before πs
i .α ← accept; no Corrupt( j) query was
ever issued before πs
i .pid = j;
and πs
i only accepts if τ1 = MAC(k,h(cid:23)m3(cid:23)C2) and τ2 =
MAC(k,m5(cid:23)t1(cid:23)t2(cid:23)t3). By unforgeability these tags can-
not be generated by A and by Game 1 the protocol ﬂow
of each session is unique. τ1 and τ2 veriﬁcation will
i .α ← accept, where πs
838  25th USENIX Security Symposium 
USENIX Association
i .T = πt
thus only occur if πs
j.T , as τ1 is over all mes-
sages in the negotiation and key exchange phase, and τ2
is over all messages in the time synchronization phase
and thus πs
i .T .
Thus, no client session accepts maliciously in Game 9:
Pr(break9) =0.
i will only accept if πt
j.T preﬁx-matches πs
Summing all of the probabilities yields the desired
bound, showing that ANTPE is a E-accurate secure time
synchronization protocol.
6.3 Multi-Phase Security
Multi-phase security of ANTPE can be established in a
similar way to single-phase security as in the previous
section, with minor changes to the games in the proof
to enable guessing of the ﬁrst phase session to accept
maliciously.
Theorem 3 (Multi-Phase Security of ANTP). Fix E,n ∈
N. Under the same assumptions as in Theorem 2, ANTPE
is a E-accurate secure multi-phase time synchronization
protocol as deﬁned in Deﬁnition 5. In particular, there
exist algorithms B3, . . . ,B 8 described in the proof of The-
orem 2, such that, for all adversaries A, we have that
Advmulti-time
ANTPE ,E (A) ≤
s n(cid:31)Advcoll
n2
pn2
s
pn2
2λ−2 + n2
Hash(BA3 )
(BA4 ) +Adv ind-cca
+ Advauth-enc
AE
KDF(BA6 ) +Adv auth-enc
+ Advkdf
MAC (BA8 )(cid:30)
+ Adveuf-cma
AE
KEM (BA5 )
(BA7 )
where np, ns, n are the maximum number of parties, ses-
sions and phases created by A during the experiment.
Proof. The proof for Theorem 3 is identical to the proof
to Theorem 2 except as follows.
i matches πt
A new game is inserted between Game 3 and Game
4 that guesses the ﬁrst time synchronization phase p ∈
{1, . . . ,n} that the target session πs
i will accept mali-
ciously: by Theorem 2, we know that a session πs
i will
not accept maliciously for time synchronization phase
p = 1, so by this step we know that πs
j up to
and including phase p− 1.
We also edit the ﬁnal game (MAC challenger) so that
B aborts if πs
i accepts maliciously in phase p. We do this
by editing the ﬁnal game in the following way: When pro-
cessing m5 for πt
j in the guessed phase p (we indicate this
with m5p) B will also compute τ2p by querying the MAC
challenger with m5p(cid:24)t1p(cid:24)t2p(cid:24)t3p, and veriﬁes the τ2p for
πs
i by querying the MAC challenger with m5p(cid:24)t1p(cid:24)t2p(cid:24)t3p
and accepting only if the output from the MAC challenger
matches the τp in m6p. Following the same structure as
the proof to Theorem 2, we have that k is a uniformly
random key generated independently from the protocol
run and this change is indistinguishable. Veriﬁcation of τ
will only occur if πs
j.T up to phase p, as τ1 is over
all messages in the negotiation and key exchange phase,
and τp is over all messages in phase p.
i .T = πt
7 Discussion
In this work we introduced a new authenticated time syn-
chronization protocol called ANTP, designed to securely
synchronize the time of a client and server, using public
key infrastructure. Our design allows a server to perform
a single public key operation per client during the infre-
quently performed key exchange phase, and then use only
faster symmetric key operations for each subsequent time
synchronization request from that client. This efﬁcient
design means that the throughput of ANTP time syn-
chronization phases is reduced by a factor of only 1.6×
compared to NTP. Our protocol has been designed such
that servers sharing the same long-term secret can han-
dle different phases of the same client for load-balancing
purposes. Furthermore, the server need not even store
per-client state, instead securely ofﬂoading storage of that
state to the client.
ANTP is accompanied by a provable security analy-
sis showing that it provides secure time synchronization
within user-speciﬁed accuracy bounds. The analysis is
carried out in a new provable security framework. A novel
aspect of our new framework, when compared with the
long line of work on authentication deﬁnitions, is that
our framework models an adversary with the ability to
control the ﬂow of time, meaning the adversary can initial-
ize different parties’ clocks to different times, and even
control the rate at which their clocks are advanced. The
security framework can be used for the analysis of other
time synchronization protocols such as the Network Time
Security (NTS) protocol and the Precision Time Protocol
(PTP).
Several interesting open problems in the area of secure
time synchronization remain. Since ANTP uses public
keys, it inherits problems associated with public key in-
frastructure, such as the dangers of certiﬁcate authority
compromise. All existing time synchronization proto-
cols that rely on public keys, including ours, need to
initially validate the certiﬁcate of the time server, speciﬁ-
cally that it is within its validity period. While nonces can
be combined with OCSP responses to check freshness,
this cannot completely solve the “ﬁrst-boot” problem. A
detailed study of denial of service attacks against secure
time synchronization protocols including ANTP would
also be worthwhile, giving detailed consideration to both
the cost of cryptographic operations in practice and the
bandwidth ampliﬁcation afforded by directing protocol
responses to a victim.
USENIX Association  
25th USENIX Security Symposium  839
Acknowledgements
We thank Gleb Sechenov at the Queensland University of
Technology for assistance in setting up the network for
the experiments. B.D. and D.S. were supported in part
by Australian Research Council (ARC) Discovery Project
grant DP130104304. Part of this work performed while
B.D. was an intern at Microsoft Research and while D.S.
was at QUT.
References
[1] IEEE Std 1588 for a Precision Clock Synchronization Protocol for
Networked Measurement and Control Systems Networked Mea-
surement and Control Systems. Tech. rep., IEEE Instrumentation
and Measurement Society, 2008.
[2] ADRIAN, D., BHARGAVAN, K., DURUMERIC, Z., GAUDRY, P.,
GREEN, M., HALDERMAN, J. A., HENINGER, N., SPRINGALL,
D., THOM ´E, E., VALENTA, L., VANDERSLOOT, B., WUSTROW,
E., B ´EGUELIN, S. Z., AND ZIMMERMANN, P. Imperfect forward
secrecy: How difﬁe-hellman fails in practice. In ACM CCS 15
(Oct. 2015), I. Ray, N. Li, and C. Kruegel:, Eds., ACM Press,
pp. 5–17.
[3] APPELBAUM, J.
ioerror/tlsdate.
tlsdate, 2015.
https://github.com/
[4] BASIN, D., CAPKUN, S., SCHALLER, P., AND SCHMIDT, B.
Formal reasoning about physical properties of security protocols.
ACM Trans. Inf. Syst. Secur. 14, 2 (Sept. 2011), 16:1–16:28.
[5] BELLARE, M., AND ROGAWAY, P. Random oracles are practical:
A paradigm for designing efﬁcient protocols. In ACM CCS 93
(Nov. 1993), V. Ashby, Ed., ACM Press, pp. 62–73.
[6] DOWLING, B., STEBILA, D., AND ZAVERUCHA, G. Authenti-
cated network time synchronization. Cryptology ePrint Archive,
Report 2015/171, 2015. http://eprint.iacr.org/2015/
171.
[7] EVANS, C., PALMER, C., AND SLEEVI, R. Public Key Pinning
Extension for HTTP. RFC 7469 (Proposed Standard), Apr. 2015.
[8] GALINDO, D., MARTIN, S., AND VILLAR, J. L. Evaluating
elliptic curve based KEMs in the light of pairings. Cryptology
ePrint Archive, Report 2004/084, 2004. http://eprint.iacr.
org/2004/084.
[9] HEDRICK, C. Routing Information Protocol. RFC 1058 (Historic),
June 1988.
[10] HODGES, J., JACKSON, C., AND BARTH, A. HTTP Strict Trans-
port Security (HSTS). RFC 6797 (Proposed Standard), Nov. 2012.
[11] JAGER, T., KOHLAR, F., SCH ¨AGE, S., AND SCHWENK, J. On
the security of TLS-DHE in the standard model. In CRYPTO 2012
(Aug. 2012), R. Safavi-Naini and R. Canetti, Eds., vol. 7417 of
LNCS, Springer, Heidelberg, pp. 273–293.
[12] MALHOTRA, A., COHEN, I. E., BRAKKE, E., , AND GOLDBERG,
S. Attacking the Network Time Protocol. In NDSS 2016 (Feb.
2016), Internet Society.
[13] MICROSOFT CORPORATION. Windows Time Service Tools
and Settings. Microsoft Developer Network, May 2012. https:
//msdn.microsoft.com/de-de/library/cc773263%28v=
ws.10%29.aspx#w2k3tr_times_tools_uhlp.
[14] MICROSOFT CORPORATION. [MS-W32T]: W32Time Remote
Protocol. Microsoft Developer Network, May 2014. https:
//msdn.microsoft.com/en-us/library/cc249627.aspx.
[15] MILLS, D. Network Time Protocol (NTP). RFC 958, Sept. 1985.
[16] MILLS, D. Network Time Protocol (version 2) speciﬁcation and
implementation. RFC 1119 (Internet Standard), Sept. 1989.
[17] MILLS, D. Network Time Protocol (Version 3) Speciﬁcation,
Implementation and Analysis. RFC 1305 (Draft Standard), Mar.
1992.
[18] MILLS, D., MARTIN, J., BURBANK, J., AND KASCH, W. Net-
work Time Protocol Version 4: Protocol and Algorithms Speciﬁ-
cation. RFC 5905 (Proposed Standard), June 2010.
[19] MILLS, D. L. On the accuracy and stablility of clocks synchro-
nized by the network time protocol in the internet system. ACM
SIGCOMM Computer Communication Review 20, 1 (1989), 65–
75.
[20] MIZRAHI, T. Security Requirements of Time Protocols in Packet
Switched Networks. RFC 7384 (Informational), Oct. 2014.
[21] NATIONAL INSTITUTE FOR STANDARDS AND TECHNOLOGY
(NIST). The NIST Authenticated NTP Service. http://www.
nist.gov/pml/div688/grp40/auth-ntp.cfm.
[22] PERRIG, A., CANETTI, R., TYGAR, J., AND SONG, D. The
TESLA broadcast authentication protocol. RSA CryptoBytes 5,
Summer (2002).
[23] R ¨OTTGER, S. Analysis of the NTP Autokey Protocol. Masters
Thesis, Technische Universit¨at Braunschweig, Feb. 2012. http:
//zero-entropy.de/autokey_analysis.pdf.
[24] SALOWEY, J., ZHOU, H., ERONEN, P., AND TSCHOFENIG,
H. Transport Layer Security (TLS) Session Resumption with-
out Server-Side State. RFC 5077 (Proposed Standard), Jan. 2008.
[25] SANTESSON, S., MYERS, M., ANKNEY, R., MALPANI, A.,
GALPERIN, S., AND ADAMS, C. X.509 Internet Public Key
Infrastructure Online Certiﬁcate Status Protocol - OCSP. RFC
6960 (Proposed Standard), June 2013.
[26] SCHNORR, C.-P. Efﬁcient identiﬁcation and signatures for smart
cards. In CRYPTO’89 (Aug. 1990), G. Brassard, Ed., vol. 435 of
LNCS, Springer, Heidelberg, pp. 239–252.
[27] SCHWENK, J. Modelling time, or a step towards reduction-
based security proofs for OTP and kerberos. Cryptology ePrint
Archive, Report 2013/604, 2013. http://eprint.iacr.org/
2013/604.
[28] SELVI, J. Bypassing HTTP Strict Transport Security. In Black
Hat Europe (2014). https://www.blackhat.com/docs/eu-
14/materials/eu-14-Selvi-Bypassing-HTTP-Strict-
Transport-Security-wp.pdf.
[29] SHOUP, V. ISO/IEC 18033-2:2006: Information technology –
security techniques – encryption algorithms – part 2: Asymmetric
ciphers. Tech. rep., 2006. See also http://shoup.net/iso/
std6.pdf.
[30] SIBOLD, D., AND R ¨OTTGER, S. Analysis of NTP’s Autokey
Protocol, 2012. https://www.ietf.org/proceedings/83/
slides/slides-83-tictoc-1.pdf.
[31] SIBOLD, D., R ¨OTTGER, S., AND TEICHEL, K.
Net-
Jan. 2016.
work Time Security.
https://tools.ietf.org/html/draft-ietf-ntp-
network-time-security-12.
IETF Internet-Draft,
[32] TEICHEL, K., SIBOLD, D., AND MILIUS, S. First Results of a
Formal Analysis of the Network Time Security Speciﬁcation. In
Security Standardisation Research. Springer, 2015, pp. 218–245.
[33] TEICHEL, K., SIBOLD, D., AND MILIUS, S. An Attack Possi-
bility on Time Synchronization Protocols Secured with TESLA-
Like Mechanisms, 2016. https://www8.cs.fau.de/staff/
milius/AttackPossibilityTimeSyncTESLA.pdf.
[34] THE OPENBSD PROJECT. OpenNTPD version 5.7p4, Mar. 2015.
http://www.openntpd.org/.
[35] THE OPENSSL PROJECT. OpenSSL version 1.0.2f, Jan. 2016.
https://www.openssl.org/.
840  25th USENIX Security Symposium 
USENIX Association