    hints.
* New: Sum up the basic documentation.
    Explain how to:
    * [Sending data to the server](fastapi.md#sending-data-to-the-server):
        Through [path parameters](fastapi.md#path-parameters), [query parameters](fastapi.md#query-parameters) and [body requests](fastapi.md#body-requests).
    * [Handle errors](fastapi.md#handling-errors).
    * [Update data](fastapi.md#updating-data)
    * [Configure OpenAPI](fastapi.md#openapi-configuration)
    * [Test FastAPI applications](fastapi.md#testing)
    And add a lot of [more interesting features](fastapi.md#interesting-features-to-explore) I've discovered.
* New: [Explain how to log exceptions to sentry.](fastapi.md#logging-to-sentry)
* New: [Explain how to send raw data to the client.](fastapi.md#sending-data-to-the-client)
    With the [`Response`](https://fastapi.tiangolo.com/advanced/response-directly/#returning-a-custom-response) object.
* New: [Explain how to configure the application.](fastapi.md#configuration)
* New: [Explain how to inject a testing configuration in the tests.](fastapi.md#inject-testing-configuration)
### [Pytest](pytest.md)
* New: [Explain how to exclude code from the coverage report.](pytest.md#excluding-code-from-coverage)
    Add `# pragma: no cover`.
* New: [Explain how to run tests in parallel.](pytest.md#running-tests-in-parallel)
    `pytest-xdist` makes it possible to run the tests in parallel, useful when the
    test suit is large or when the tests are slow.
    ```bash
    pip install pytest-xdist
    pytest -n auto
    ```
### [Python Snippets](python_snippets.md)
* New: [Explain how to install dependencies from git repositories.](python_snippets.md#install-a-python-dependency-from-a-git-repository)
    With [pip you can](https://stackoverflow.com/questions/16584552/how-to-state-in-requirements-txt-a-direct-github-source):
    ```bash
    pip install git+git://github.com/path/to/repository@master
    ```
    If you want [to hard code it in your `setup.py`](https://stackoverflow.com/questions/32688688/how-to-write-setup-py-to-include-a-git-repository-as-a-dependency/54794506#54794506), you need to:
    ```python
    install_requires = [
      'some-pkg @ git+ssh://PI:EMAIL/someorgname/pkg-repo-name@v1.1#egg=some-pkg',
    ]
    ```
* Correction: Explain how to create PyPI valid packages with direct dependencies.
    It looks like PyPI don't want pip to reach out to URLs outside their
    site when installing from PyPI. So you can't define the direct
    dependencies in the `install_requires`. Instead you need to install them
    in a `PostInstall` custom script. Ugly as hell.
* Correction: [Add warning about the method to use direct dependencies.](python_snippets.md#install-a-python-dependency-from-a-git-repository)
    Last time I used this solution, when I added the library on a `setup.py`
    the direct dependencies weren't installed :S
### [NetworkX](networkx.md)
* New: Introduce the python library.
    [NetworkX](https://networkx.org/) is a Python package for the creation,
    manipulation, and study of the structure, dynamics, and functions of complex
    networks.
### [Pydantic](pydantic.md)
* Improvement: Change parse_obj definition to find how to import pydantic models from dictionary.
* New: [Explain how to use private attributes.](pydantic.md#set-private-attributes)
    With the [`PrivateAttr`](https://pydantic-docs.helpmanual.io/usage/models/#private-model-attributes) object.
* New: [Explain how to update entity attributes with a dictionary.](pydantic.md#update-entity-attributes-with-a-dictionary)
    You can create a new object with the new data using the `update`
    argument of the `copy` entity method.
### [rich](rich.md)
* New: Introduce the python cli builder library and it's progress bar.
    [Rich](https://github.com/willmcgugan/rich) is a Python library for rich text
    and beautiful formatting in the terminal.
    Check out the beautiful progress bar:
    ```bash
    pip install rich
    python -m rich.progress
    ```
### [Ruamel YAML](ruamel_yaml.md)
* Improvement: Suggest to use ruyaml instead of ruamel.yaml.
    As it's maintained by the community and versioned with git.
### [sqlite3](sqlite3.md)
* New: [Explain how to implement the REGEXP operator with Python.](sqlite3.md#regexp)
### [TinyDB](tinydb.md)
* New: [Explain how to serialize datetime objects.](tinydb.md#serializing-custom-data)
## [SQLite](sqlite.md)
* New: [Explain how to configure sqlite to be able to use the REGEXP operator.](sqlite.md#regexp)
    It's not enabled by default.
# Operative Systems
## Linux
### [Beets](vim_plugins.md)
* Correction: Typo.
    There was a missing comma in the list.
* New: Introduce Beets the music management library.
    [Beets](https://beets.io/) is a music management library used to get your music
    collection right once and for all. It catalogs your collection, automatically
    improving its metadata as it goes using the MusicBrainz database. Then it
    provides a set of tools for manipulating and accessing your music.
### [HAProxy](haproxy.md)
* New: Add interesting guidelines on [how to configure HAProxy in AWS](https://github.com/jvehent/haproxy-aws).
### [Hushboard](husboard.md)
* New: Introduce Husboard.
    [Hushboard](https://kryogenix.org/code/hushboard/) is an utility that mutes your microphone while youâ€™re typing.
    (Thanks [M0wer](https://m0wer.github.io/memento/computer_science/gnu_linux/hushboard/)!)
### [ffmpeg](ffmpeg.md)
* New: Introduce the program and multiple of it's uses.
    [ffmpeg](https://www.ffmpeg.org/) is a complete, cross-platform solution
    to record, convert and stream audio and video.
### [Mopidy](mopidy.md)
* New: Introduce the music server.
    [Mopidy](https://github.com/mopidy/mopidy) is an extensible music server written
    in Python, that plays perfectly with [beets](beets.md) and the MPD
    ecosystem.
    The awesome documentation, being Python based, the extension system,
    JSON-RPC, and JavaScript APIs make Mopidy a perfect base for your
    projects.
# Arts
## [Writing](writing.md)
* New: [Explain when to use I'm good or I'm well.](writing.md#im-good-or-im-well)
    Use I'm well when referring to being ill, use I'm good for the rest.
### [Grammar and Orthography](orthography.md)
* New: Explain when to write won't or wont.
    * Won't is the correct way to contract will not.
    * Wont is a synonym of "a habit". For example, "He went for a morning jog, as was his wont".
# Other
* Correction: Broken links.
    Removed the link to (everything_i_know.md) since it no longer exists. Updated some links that where broken due to a folder structure change.
* New: Explain how to select a random choice from `Enum` objects.
    [pydantic](pydantic.md) uses `Enum` objects to define [the choices of
    fields](https://pydantic-docs.helpmanual.io/usage/types/#enums-and-choices), so
    we need them to create the factories of those objects.
* New: Improve the periodic tasks and application metrics monitoring.
    Setup an [healthchecks](https://healthchecks.io/) instance with the [linuxserver image](https://docs.linuxserver.io/images/docker-healthchecks) to monitor cronjobs.
    For the notifications either use the [prometheus metrics](https://healthchecks.io/docs/configuring_prometheus/) or an [apprise](https://github.com/healthchecks/healthchecks/issues/271) compatible system.