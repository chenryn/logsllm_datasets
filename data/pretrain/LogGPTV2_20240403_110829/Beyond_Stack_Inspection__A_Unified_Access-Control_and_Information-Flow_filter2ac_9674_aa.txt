title:Beyond Stack Inspection: A Unified Access-Control and Information-Flow
Security Model
author:Marco Pistoia and
Anindya Banerjee and
David A. Naumann
A Uniﬁed Access-Control and Information-Flow Security Model
Beyond Stack Inspection:
Marco Pistoia
∗
Anindya Banerjee
†
David A. Naumann
IBM T. J. Watson Research Ctr.
Hawthorne, New York, USA
Kansas State University
Manhattan, Kansas, USA
PI:EMAIL
PI:EMAIL
Stevens Institute of Technology
Hoboken, New Jersey, USA
PI:EMAIL
Abstract
Modern component-based systems, such as Java and
Microsoft .NET Common Language Runtime (CLR), have
adopted Stack-Based Access Control (SBAC). Its purpose is
to use stack inspection to verify that all the code respon-
sible for a security-sensitive action is sufﬁciently autho-
rized to perform that action. Previous literature has shown
that the security model enforced by SBAC is ﬂawed in that
stack inspection may allow unauthorized code no longer
on the stack to inﬂuence the execution of security-sensitive
code. A different approach, History-Based Access Control
(HBAC), is safe but may prevent authorized code from exe-
cuting a security-sensitive operation if less trusted code was
previously executed. In this paper, we formally introduce
Information-Based Access Control (IBAC), a novel security
model that veriﬁes that all and only the code responsible
for a security-sensitive operation is sufﬁciently authorized.
Given an access-control policy α, we present a mechanism
to extract from it an implicit integrity policy ι, and we prove
that IBAC enforces ι. Furthermore, we discuss large-scale
application code scenarios to which IBAC can be success-
fully applied.
1
Introduction
Modern component-based systems allow code from dif-
ferent sources and with different levels of trust to be exe-
cuted at the same time. From an integrity point of view,
it is important to verify that, any time a security-sensitive
action guarded by a permission q is attempted, all the
code responsible for that action has been granted q (or
a permission stronger than q). Among the solutions that
have been adopted to enforce this principle are Stack-Based
∗
Supported by National Science Foundation (NSF) grants CCR-
0296182, ITR-0326577, and CNS-0627748.
†
Supported by NSF grants CCF-0429894 and CNS-0627338.
Access Control (SBAC) and History-Based Access Con-
trol (HBAC). This section shows the limitations of SBAC
and HBAC, and introduces a new security model, called
Information-Based Access Control (IBAC), which signiﬁ-
cantly improves upon SBAC and HBAC. The programs pre-
sented in this section are not contrived examples, but repre-
sent problems encountered in real production-level Eclipse
code [14] in the process of adopting Java’s SBAC, as will
be discussed in Section 4.2.
1.1 Stack-Based Access Control Systems
When access to a restricted resource is attempted, SBAC
systems, such as Java and Microsoft .NET Common Lan-
guage Runtime (CLR), have a primitive function walk the
execution stack and verify that all the callers currently on
that stack have been granted the permission q guarding
access to that resource [20]. This primitive function is
called checkPermission in Java and Demand in CLR;
in this paper, we call it test. The purpose of the SBAC
stack traversal is to prevent Confused Deputy attacks, in
which unauthorized code indirectly causes the execution of
security-sensitive functions by calling (or being called by)
authorized code [24].
Unfortunately, SBAC systems may inadvertently allow
unauthorized code to inﬂuence the execution of security-
sensitive code—an integrity violation.
This is illus-
trated in Figure 1, where a Java program and its corre-
sponding access-control policy are shown. The security-
sensitive operation performed by the program in Fig-
ure 1 is the construction of a FileOutputStream
object.
The FileOutputStream.(File,
boolean) constructor triggers a stack walk by calling
checkPermission on the active SecurityManager
with a FilePermission parameter guarding the
passwords.txt ﬁle against write access, as shown in
Figure 2.1 The purpose of the stack walk is to verify that all
1Only the fragment of the FileOutputStream code relevant to the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007public class A {
public static void main(String[] args) throws Exception {
B b = new B();
String fileName = b.m1();
FileOutputStream f = new FileOutputStream(fileName);
}
} public class B {
public String m1() {
return "passwords.txt";
}
}
Component
A
B
System
Permission Set
R1 = {FilePermission ">", "write"}
R2 = ∅
R3 = {AllPermission}
Figure 1. Classes A and B, with the Corresponding Access-control Policy
public class FileOutputStream {
private boolean append;
public FileOutputStream(String name) throws FileNotFoundException {
File file;
if (name != null)
file = new File(name);
this(file, false);
}
public FileOutputStream(File file, boolean append) throws FileNotFoundException {
String name = (file != null ? file.getPath() : null);
SecurityManager security = System.getSecurityManager();
if (security != null)
security.checkPermission(new FilePermission(name, "write"));
this.append = append;
if (append)
openAppend(name);
else
open(name);
}
private native void open(String name) throws FileNotFoundException;
private native void openAppend(String name) throws FileNotFoundException;
}
Figure 2. Fragment of System Class FileOutputStream
the callers currently on the stack have been granted at least
the required FilePermission "passwords.txt",
"write".
Since A is not responsible for setting the ﬁle name,
the access-control policy has to conservatively grant
it a broad FilePermission ">",
"write" for the program to execute without run-time au-
thorization failures. Furthermore, the access-control policy
grants AllPermission to all the system classes, such as
FileOutputStream and SecurityManager.
When the test is performed, the callers on the stack,
in reverse order, are security.checkPermission,
FileOutputStream.(File, boolean),
examples of Section 1.1 and 1.2 is shown in Figure 2. Moreover, the
FileOutputStream code has been slightly simpliﬁed for expository
purposes.
FileOutputStream.(String),
and
The test succeeds because these callers
A.main.
have all been granted permissions at least as strong as
FilePermission "passwords.txt", "write".
The problem is that B inﬂuences the ﬁle-access operation,
since the ﬁle name is deﬁned by B, but B’s right to perform
that operation is never checked because b.m1 is not on the
stack when the stack walk is performed, and the ﬁle access
succeeds despite B’s having been granted no permissions.
In cases in which trusted code needs to perform a
security-sensitive operation—such as reading from a con-
ﬁguration ﬁle or writing to a log ﬁle—not explicitly re-
quested by its (possibly untrusted) callers, SBAC sys-
tems allow marking a block of code as privilege assert-
ing. When test encounters privilege-asserting code on the
stack, it stops stack inspection and does not proceed fur-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007public class C {
public String logFileName = "C:\\log.txt";
public void m2() throws Exception {
FileOutputStream f = (FileOutputStream)
AccessController.doPrivileged(new PrivilegedExceptionAction() {
public Object run() throws Exception {
return new FileOutputStream(logFileName);
}
});
PrintStream ps = new PrintStream(f);
ps.print("Log file started.");
}
}
Component
C
Client
System
Permission Set
1 = {FilePermission ">", "write"}
R(cid:2)
R(cid:2)
2 = ∅
3 = {AllPermission}
R(cid:2)
Figure 3. Class C with the Corresponding Access-control Policy
ther, thereby temporarily granting the asserted permission
to the callers of the privilege-asserting code, recursively.
The function used to mark code as privilege-asserting is
called doPrivileged in Java and Assert in CLR; in
this paper we call it grant. Privilege-asserting code is par-
ticularly vulnerable to this type of integrity violations be-
cause attacks can be mounted even by code on the current
stack of execution [33].
Consider for example the trusted library method m2 in
Figure 3. Here, any untrusted client can instantiate an ob-
ject c of type C, set the value of c.logFileName to an
operating system ﬁle or a password ﬁle, and cause the con-
tents of that ﬁle to be overwritten by calling c.m2. The
untrusted client code will be on the stack when f is created,
but the presence of doPrivileged will prevent the stack
inspection from reaching that client code, which will suc-
ceed in altering the contents of any ﬁle of the ﬁle system.
1.2 History-Based Access Control Systems
HBAC [18, 1] was proposed to alleviate the limitations
of SBAC. In HBAC systems, when a security-sensitive re-
source is accessed, all the code previously executed (and
not just the code currently on the stack) must be sufﬁciently
authorized to access that resource, regardless of the fact that
some of that code may not be responsible for the resource
access.
As an example,
the HBAC test triggered by the
FileOutputStream.(File, boolean)
constructor detects the presence of b.m1 in the execution
history of the program in Figure 1, and since b.m1
is not sufﬁciently authorized,
the program fails with a
SecurityException, which is appropriate because
b.m1 inﬂuences the values used in the security-sensitive
operations initiated by A.main, and B does not have the
necessary permission. However, HBAC rejects also the
program in Figure 4 because the executions of unautho-
rized methods G. and g.m3 are in the history,
even though that code does not inﬂuence the ﬁle-access
operation initiated by F.main.
The execution of the FileOutputStream construc-
tor in F.main does not depend on the execution of g.m3.
Therefore, the order of these two calls in F.main can be
safely reversed. In this case, the program will succeed under
HBAC. This inconsistent behavior may be a source of con-
fusion for end users, and can render an application unstable;
an authorization failure may remain undiscovered until run
time if program components are not tested in the particular
order that causes that failure.
The grant primitive can be used also in HBAC to pre-
vent previously-executed untrusted code from reducing the
permissions dynamically granted to a trusted library per-
forming a security-sensitive action. However, previously-
executed code, though shielded from the permission re-
quirement by the grant call, can still cause an integrity vi-
olation by inﬂuencing the execution of that action through
a tainted variable, such as logFileName in Figure 3.
1.3 Contributions
In this paper, we introduce IBAC, a new access-control
model that, for any security-sensitive operation, veriﬁes that
all the code responsible for that operation is sufﬁciently au-
thorized.
IBAC does not limit an authorization check to
the current execution stack, since code responsible for a
security-sensitive operation may no longer be on that stack.
Therefore, IBAC is more restrictive and more precise than
SBAC. On the other hand, when a security-sensitive oper-
ation is attempted, IBAC does not restrict the permissions
of the program based on the permissions granted to all the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007public class F {
public static void main(String[] args) throws Exception {
G g = new G();
g.m3();
FileOutputStream f = new FileOutputStream("passwords.txt");
}
}
public class G {
public void m3() {
System.out.println("The program has started");
}
}
Component
F
G
System
Permission Set
1 = {FilePermission ">", "write"}
R(cid:2)(cid:2)
R(cid:2)(cid:2)
2 = ∅
3 = {AllPermission}
R(cid:2)(cid:2)
Figure 4. Classes F and G, with the Corresponding Access-control Policy
code that has ever executed (as in HBAC), but only based on
the permissions granted to the code that has effectively in-
ﬂuenced the execution of that security-sensitive operation.
Therefore, IBAC is less restrictive and more precise than
HBAC.
IBAC is based on the concept that every access-control
policy α implicitly deﬁnes an information-ﬂow policy ι.
Speciﬁcally, α assigns sets of permissions to a program’s
components, and identiﬁes which permissions are neces-
sary to execute the program.
IBAC uses the permission
sets granted by α as the labels for ι. Furthermore, IBAC
transforms the existing calls to the access-control test
primitive, which are already embedded into the program,
into information-ﬂow check points. Subsequently, for any
security-sensitive operation requiring permission q, ι im-
poses the integrity property that no code component with-
out permission q be allowed to inﬂuence the execution of
that security-sensitive operation. To achieve this result,
IBAC attaches dynamic labels on values and on the pro-
gram counter, and augments ordinary stack inspection with
tracking of information ﬂows to security-sensitive opera-
tions. More speciﬁcally, a call to the test primitive checks
all the callers on the current stack of execution up to the ﬁrst
grant call, just like in ordinary stack inspection. However,
in addition to that, an IBAC test veriﬁes the labels on all
the values read in the security-sensitive operation guarded
by the test call. (One way to carry out this reinterpretation
is to retain the standard semantics of test and to insert ad-
ditional checks for the values read, using a new operation
for that purpose. This is the approach taken in our formal-
ization.) This way, IBAC prevents untrusted code no longer
on the stack from inﬂuencing the execution of a security-
sensitive operation.
obtained from the program’s access-control policy (which,
if absent, can be automatically computed [27, 10]), and its
enforcement is automatically derived from the existing calls
to the test and grant primitives. Unlike the Data Mark
Machine approach [16], ﬂows that violate integrity are not
prevented; rather, they are recorded and later detected by
the new IBAC test semantics.
This paper formally describes how to deﬁne ι from α and
proves that the enforcement of ι performed by IBAC guar-