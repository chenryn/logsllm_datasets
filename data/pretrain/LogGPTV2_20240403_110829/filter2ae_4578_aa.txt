本文由红日安全成员： ruanruan 编写，如有不当，还望斧正。
大家好，我们是 **红日安全-Web安全攻防小组** 。此项目是关于Web安全的系列文章分享，还包含一个HTB靶场供大家练习，我们给这个项目起了一个名字叫
[Web安全实战](https://github.com/hongriSec/Web-Security-Attack)
，希望对想要学习Web安全的朋友们有所帮助。每一篇文章都是于基于漏洞简介-漏洞原理-漏洞危害-测试方法（手工测试，工具测试）-靶场测试（分为PHP靶场、JAVA靶场、Python靶场基本上三种靶场全部涵盖）-实战演练（主要选择相应CMS或者是Vulnhub进行实战演练)，如果对大家有帮助请
**Star** 鼓励我们创作更好文章。如果你愿意加入我们，一起完善这个项目，欢迎通过邮件形式（ **PI:EMAIL** ）联系我们。
# 1\. XXE概述
XXE（XML External Entity Injection）即XML外部实体注入。漏洞是在对非安全的外部实体数据进行处理时引发的安全问题。  
下面我们主要介绍PHP语言下的XXE攻击.
## 1.1 XML基础
XML是可扩展的标记语言（eXtensible Markup Language），设计用来进行数据的传输和存储。
### 1.1.1文档结构
XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。
    ]]]>
    Dave
    Tom
    Reminder
    You are a good man
### 1.1.2 DTD
文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML
文档中，也可作为一个外部引用。  
（1）内部的 DOCTYPE 声明  
``  
（2）外部文档声明  
``
### 1.1.3 DTD实体
（1）内部实体声明  
``  
（2）外部实体声明  
``  
（3）参数实体声明  
``或者``
三种实体声明方式使用区别：  
参数实体用%实体名称申明，引用时也用`%`实体名称;  
其余实体直接用实体名称申明，引用时用`&`实体名称。  
参数实体只能在`DTD`中申明，`DTD`中引用；  
其余实体只能在`DTD`中申明，可在`xml`文档中引用。
## 1.2 XXE原理
`XXE`即`XML外部实体注入` 。我们先分别理解一下注入和外部实体的含义。  
注入：是指`XML`数据在传输过程中被修改，导致服务器执行了修改后的恶意代码，从而达到攻击目的。  
外部实体：则是指攻击者通过利用外部实体声明部分来对`XML`数据进行修改、插入恶意代码。  
所以`XXE`就是指`XML`数据在传输过程中利用外部实体声明部分的`“SYSTEM”`关键词导致`XML`解析器可以从本地文件或者远程`URI`中读取受保护的数据。
## 1.3 XXE分类
下面我们对`XXE`进行一下分类，按照构造外部实体声明的方法不同可分为直接通过`DTD`外部实体声明、通过`DTD`文档引入外部`DTD`文档中的外部实体声明和通过`DTD`外部实体声明引入外部`DTD`文档中的外部实体声明。按照`XXE`回显信息不同可分为`正常回显XXE`、`报错XXE`和`Blind
XXE`。
### 1.3.1 按构造外部实体声明
#### 1.3.1.1 直接通过DTD外部实体声明
    ]>
    &f;
#### 1.3.1.2 通过DTD文档引入外部DTD文档中的外部实体声明
XML文件内容：
    &f;
DTD文件内容：
#### 1.3.1.3 通过DTD外部实体声明引入外部DTD文档中的外部实体声明
    ]>
    &f;
Quan.dtd的外部实体声明内容：
### 1.3.2 按输出信息
#### 1.3.2.1正常回显XXE
正常回显XXE是最传统的XXE攻击,在利用过程中服务器会直接回显信息，可直接完成XXE攻击。
#### 1.3.2.2 报错XXE
报错XXE是回显XXE攻击的一种特例,它与正常回显XXE的不同在于它在利用过程中服务器回显的是错误信息，可根据错误信息的不同判断是否注入成功。
#### 1.3.2.3 Blind XXE
当服务器没有回显，我们可以选择使用Blind XXE。与前两种XXE不同之处在于Blind
XXE无回显信息,可组合利用file协议来读取文件或http协议和ftp协议来查看日志。  
Blind XXE主要使用了DTD约束中的参数实体和内部实体。  
在XML基础有提到过参数实体的定义，这里就不再做详细讲解。  
参数实体是一种只能在DTD中定义和使用的实体，一般引用时使用%作为前缀。而内部实体是指在一个实体中定义的另一个实体，也就是嵌套定义。
    %remote;
    %all;
    ]>
    &send;
Quan.xml内容：
    ">
`%remote`引入外部XML文件到这个 XML 中，`%all`检测到send实体，在 root 节点中引入 send 实体，便可实现数据转发。  
利用过程：第3行，存在漏洞的服务器会读出file的内容（c:/1.txt），通过Quan.xml带外通道发送给攻击者服务器上的1.php，1.php做的事情就是把读取的数据保存到本地的1.txt中，完成Blind
XXE攻击。
# 2\. 危害
当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。
## 2.1 读取任意文件
PHP中可以通过FILE协议、HTTP协议和FTP协议读取文件，还可利用PHP伪协议。
    ]>
    &f;
XML在各语言下支持的协议有:  
## 2.2 执行系统命令
这种情况很少发生，但在配置不当/开发内部应用情况下（PHP
expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上），攻击者能够通过XXE执行代码。
    ]>
    &f;
## 2.3 探测内网端口
可根据返回信息内容判断该端口是否打开。若测试端口返回“Connection refused”则可以知道该端口是closed的，否则为open。
    ]>
    &Quan;Any bugs?
# 3.测试方法
在进行手工测试之前先介绍几个测试XXE漏洞常用的靶场，包括靶场的安装、环境配置以及使用方法。
## 3.1 测试靶场介绍
### 3.1.1 PHP靶场－bWAPP
bwapp是一款非常好用的漏洞演示平台，包含有100多个漏洞。开源的php应用后台Mysql数据库。
#### 3.1.1.1 安装
BWAPP有两种安装方式，一种是单独安装，需部署在Apache＋PHP＋Mysql环境下；一种是虚拟机导入，下载后直接用VMWare打开即可。  
下面分别介绍两种方式的安装方法。  
1）单独安装  
由于需要部署在`Apache＋PHP＋Mysql`环境下，我们可以直接使用集成环境，这里笔者使用的是PHPStudy，PHPStudy的安装及使用在此就不做介绍了。  
（1）下载链接：  
（2）安装步骤：  
Ａ．下载后解压文件，将文件放在WWW目录下  
Ｂ．在admin/settings．php下更改数据库连接设置  
同时也能在文件下方看到默认登录账户名及密码，可按需更改  
Ｃ．运行PHPStudy，然后在浏览器打开  
点击here创建数据库  
Ｄ．安装成功，进入靶场主界面  
（3）使用方法：  
账户名及密码：`bee/bug`  
可在右上方选择漏洞和安全级别进行测试  
#### 3.1.1.2 虚拟机导入
虚拟机版本能够测试的漏洞更多，比如破壳漏洞，心脏滴血漏洞等在单独安装的环境下无法测试。  
（1）下载链接：  
（2）安装步骤  
下载后解压，打开VMWare，在打开虚拟机选项中进入bee－box文件选择bee－box．vmx即可。  
选择NAT模式，开启虚拟机即可进入主界面  
（3）使用方法：  
登录：bee/bug；安全等级可选；低-中-高  
方法一：直接在bee-box虚拟机中使用，点击bWAPP-Start即可进入登陆页面,登录后在右上方找到XXE漏洞，选择测试等级  
方法二：查看虚拟机IP，在物理机浏览器访问`http://虚拟机IP地址/bWAPP/login.php`进行登录，登录后在右上方找到XXE漏洞，选择测试等级  
### 3.1.2 java靶场--webGoat
#### 3.1.2.1 webGoat简介
WebGoat是OWASP组织研制出的用于进行web漏洞实验的Java靶场程序，用来说明web应用中存在的安全漏洞。WebGoat运行在带有java虚拟机的平台之上，当前提供的训练课程有30多个，其中包括：跨站点脚本攻击（XSS）、访问控制、线程安全、操作隐藏字段、操纵参数、弱会话cookie、SQL盲注、数字型SQL注入、字符串型SQL注入、web服务、Open
Authentication失效、危险的HTML注释等等。
#### 3.1.2.2 WebGoat安装
（1）下载链接  
（2）安装JDK  
需为最新JDK版本  
（3）启动  
java -jar webgoat-server-8.0.0.M25.jar  
WebGoat默认是127.0.0.1:8080  
java -jar webwolf-8.0.0.M25.jar  