her message to Bob, and Dave’s message to Bob has arrived, but
not his message to Alice. In this state, neither Alice nor Bob can
know whether one or both transactions have begun. It is impossi-
ble for either to communicate this information to the other without
violating relaxed observational determinism. Speciﬁcally, any pro-
tocol that relayed such information from one cloud provider to the
other would allow the recipient to distinguish the order of message
delivery to the other cloud provider. That ordering is considered se-
cret input, and so this would be a security violation. All executions
with identical start states, and identical inputs visible to Alice, but
differently ordered network delay events at Bob, which are inputs
invisible to Alice, would become distinguishable to Alice.
4.1 Cryptography
This essentially information-theoretic argument does not account
for the possibility that some protocol could produce computation-
ally indistinguishable traces that are low-distinguishable with sufﬁ-
cient computational power (e.g., to break encryption). However, we
are unaware of any cryptographic protocols that would permit Al-
ice and Bob to learn a consistent order in which to schedule events
without learning each other’s conﬁdential information.
5. ANALYSIS
Although secure scheduling is impossible in general, many sets
of transactions can be scheduled securely. We therefore investigate
which conditions are sufﬁcient for secure scheduling, and what pro-
tocols can function securely under these conditions.
5.1 Monotonicity
A relatively simple condition sufﬁces to guarantee schedulabil-
ity, while preserving relaxed observational determinism:
DEF. 4
(MONOTONICITY). A transaction is monotonic if it
is information-ﬂow secure and its events are totally ordered by
happens-before ((cid:95)).
THEOREM 2
(MONOTONICITY ⇒ SCHEDULABILITY).
A protocol exists that can serialize any set of monotonic transac-
tions and preserve relaxed observational determinism.
PROOF SKETCH. Monotonicity requires that each event must be
allowed to inﬂuence all future events in the transaction. A simple,
pessimistic transaction protocol can schedule such transactions se-
curely. In order to deﬁne this protocol, we need a notion of locks
within our model.
Locks. A lock consists of an inﬁnite set of events for each al-
lowed transaction. A transaction acquires a lock by scheduling any
event from this set. It releases a lock by scheduling another event
from this set. Thus, in a system state S, a transaction T holds a
lock if S contains an odd number of events from the lock’s set cor-
responding to T . No correct protocol should result in a state in
which multiple transactions hold the same lock. All pairs of events
in a lock conﬂict, so scheduled events that are part of the same lock
must be totally ordered by happens-before ((cid:95)). All events in a
lock share a location, which is considered to be the location of the
lock itself. Likewise, all events in a lock share a label, which is
considered to be the label of the lock itself.
A critical property for transaction scheduling is deadlock free-
dom [17, 35], which requires that a protocol can eventually sched-
ule all events from any transaction whose start event has been sched-
uled. A system enters deadlock when it reaches a state after which
this is not the case. For example, deadlock happens if a protocol re-
quires two transactions each to wait until the other completes: both
will wait forever. If all transactions are ﬁnite sets of events (i.e.,
all transactions can terminate), then deadlock freedom guarantees
that a system with a ﬁnite set of start events eventually terminates,
a liveness property.
We now describe a deadlock-free protocol that can securely se-
rialize any set of monotonic transactions, and preserve relaxed ob-
servational determinism:
• Each event in each transaction has a corresponding lock, ex-
cept start events.
• Any events that have the same label share a lock, and this
lock shares a location with at least one of the events. Con-
ﬂicting events are assumed to share a label (§3.4).
• A transaction must hold an event’s lock to schedule that event.
• A transaction acquires locks in sequence, scheduling events
as it goes. Since all events are ordered according to a global
security lattice, all transactions that acquire the same locks
do so in the same order. Therefore they do not deadlock.
• If a lock is already held, the transaction waits for it to be
released.
• When all events are scheduled, the transaction commits, re-
leasing locks in reverse order. Any messages sent as part of
the transaction would thus receive a reply, indicating only
that the message had been received, and all its repercussions
committed. We call these replies commit messages.
• For each location, the protocol rotates between all uncommit-
ted transactions, scheduling any intermediate events (such as
lock acquisitions) until it either can schedule one event in the
transaction or can make no progress, and then rotates to the
next transaction.
Security Intuition. Acquiring locks shared by multiple events on
different locations requires a commit protocol between those loca-
tions. However, this does not leak information because all locations
involved are explicitly allowed to observe and inﬂuence all events
involved. Therefore several known commit protocols will do, in-
cluding 2PC. Since the only messages sent as part of the protocol
are commit messages, and each recipient knows it will receive a
commit message by virtue of sending a message in the protocol,
no information (other than timing) is transferred by the scheduling
mechanism itself.
5.2 Relaxed Monotonicity
Monotonicity, while relatively easy to understand, is not the weak-
est condition we know to be sufﬁcient for secure schedulability. It
can be substantially relaxed. In order to explain our weaker condi-
tion, relaxed monotonicity, we ﬁrst need to introduce a concept we
call visibility:
DEF. 5
(VISIBLE-TO). An event e in transaction T is visible
to a location L if and only if it happens at L, or if there exists
another event e(cid:48) ∈ T at L, such that e(cid:95)e(cid:48).
DEF. 6
(RELAXED MONOTONICITY). A transaction T satis-
ﬁes relaxed monotonicity if it is information-ﬂow secure and for
each location L, all events in T visible to L happen before all
events in T not visible to L.
In §6, we demonstrate that relaxed monotonicity guarantees schedu-
lability. Speciﬁcally, we present a staged commit protocol, and
prove that it schedules any set of transactions satisfying relaxed
monotonicity, while preserving relaxed observational determinism
(Thm. 4).
5.3 Requirements for Secure Atomicity
Monotonicity and relaxed monotonicity are sufﬁcient conditions
for a set of transactions to be securely schedulable. Some sets of
transactions meet neither condition, but can be securely serialized
by some protocol. For example, any set of transactions that each
happen entirely at one location can be securely serialized if each
location schedules each transaction completely before beginning
the next. We now describe a relatively simple condition that is
necessary for any set of transactions to be securely scheduled.
Decision Events and Conﬂicting Events
In order to understand this necessary condition, we ﬁrst describe
decision events and conﬂicting events.
Borrowing some terminology from Fischer, Lynch, and Pater-
son [18], for a pair of transactions T1 and T2, any system state is
either bivalent or univalent. A system state is bivalent with respect
to T1 and T2 if there exist two valid executions that both include
that state, but end with opposite orderings of T1 and T2. A sys-
tem state is univalent with respect to T1 and T2 otherwise: for one
ordering of the transactions, no valid execution ending with that
ordering contains the state.
We can deﬁne a similar relationship for start events: for any pair
of distinct start events s1 and s2, a system state is bivalent with re-
spect to those events if it features in two valid executions, both of
which have s1 and s2 in scheduled transactions, but those transac-
tions are in opposite order. A system state is univalent with respect
to s1 and s2 otherwise.
All full executions (i.e., those starting with an empty state) that
order a pair of transactions begin in a bivalent state with respect to
their start events, before either is scheduled. By our deﬁnition of se-
rializability and transaction ordering, once transactions are ordered,
they cannot be un-ordered. Any execution that orders the transac-
tions therefore ends in a univalent state with respect to their start
events. Any such execution consists of a sequence of 0 or more bi-
valent states followed by a sequence of univalent states. The event
that is scheduled in the ﬁrst univalent state, in a sense, decides the
ordering of the transactions. We call it the decision event.
We call any event in T1 or T2 that conﬂicts with an event in the
other transaction a conﬂicting event.
LEMMA 1
(DECISION EVENT(cid:95) CONFLICTING EVENTS).
For any univalent state S with T1(cid:95)T2, there exists a full execution
((cid:95)) all conﬂicting events in T1 and T2 (other than ed itself, if ed is
E ending in S featuring a decision event ed that happens before
a conﬂicting event).
PROOF SKETCH. We show that the contradiction implies an in-
ﬁnite chain of equivalent executions with earlier and earlier non-
decision conﬂicting events, which is impossible given that system
states are ﬁnite.
We show that two fundamental system state properties are nec-
essary for secure scheduling:
DEF. 7
(FIRST-PRECEDES-DECISION). State S satisﬁes First-
Precedes-Decision if, for any pair of transactions T1 and T2 in S
with T1(cid:95)T2, there is a full execution E ending in S with a decision
event ed that either is in T1, or happens after an event in T1.
DEF. 8
(DECISION-PRECEDES-SECOND). A state S satisﬁes
Decision-Precedes-Second if, for any pair of transactions T1 and
a decision event e(cid:48)
T2 in S with T1(cid:95)T2, there is a full execution E(cid:48) ending in S with
d, such that no event in T2 happens before e(cid:48)
d.
Therefore, for a protocol to be secure, it must ensure resulting
system states have these properties.
THEOREM 3
(NECESSARY CONDITION). Any secure, dead-
lock-free protocol p must ensure that all full executions consistent
with p feature only states satisfying both First-Precedes-Decision
and Decision-Precedes-Second.
PROOF. Given T1(cid:95)T2, any execution E(cid:48) ending in S features a
decision event ed. Decision events for the same pair of transactions
in equivalent executions must agree on ordering, by the deﬁnition
of equivalent execution. If T1 does not contain E’s decision event,
ed, or any event that happens before ed, then there exists an equiv-
alent execution in which ed is scheduled before any events in T1
or T2. This execution would imply the existence of a system state
in which no event in either transaction is scheduled, but it is im-
possible to schedule T2 before T1, regardless of inputs after that
state. If, after this state, the start event for T2 were scheduled, but
not the start event for T1, then T2 cannot be scheduled. This con-
tradicts a the deadlock-freedom requirement: no protocol should
which is impossible, by the deﬁnition of happens-before, or
∃e1 ∈ T1.e(cid:48)
(cid:48)
d ∈ T1, and
d ⇒ T2(cid:95)T1
e2(cid:95)e
d(cid:95)e1 ⇒ e2(cid:95)e1 ⇒ T2(cid:95)T1
d(cid:95)e1, and
e2(cid:95)e
(cid:48)
result in a system state in which a supported transaction can never
be scheduled.
Therefore some event in T1 either is or happens before ed for
If T1 and T2 conﬂict, then e(cid:48)
some full execution E ending in S.
d either is an event in T1 or happens
before an event in T1, by Lemma 1. If an event e2 ∈ T2 happens
before e(cid:48)
d, then either e(cid:48)
which is also impossible, by the deﬁnition of happens-before.
If T1 and T2 do not conﬂict, then the only way T1(cid:95)T2 implies
that there exists some chain T1(cid:95)T3(cid:95)T4(cid:95) . . .(cid:95)Tn(cid:95)T2 such that
and each transaction in the chain conﬂicts with the next. Therefore,
by the above proof, an equivalent execution exists in which each
transaction in the chain contains the decision event for ordering it-
self and the following transaction, and no events in the following
transaction are before that decision event.
Therefore there exists some equivalent execution E(cid:48) in which
no event in T2 happens before the decision event e(cid:48)
d deciding the
ordering between T1 and T2.
Although Thm. 3 may seem trivial, it represents some impor-
tant conclusions: No protocol can make any ﬁnal ordering decision
until at least one transaction involved has begun. Furthermore, it is
impossible for the later transaction to determine the decision. Truly
atomic transactions cannot include any kind of two-way interaction
or negotiation for scheduling.
6. THE STAGED COMMIT PROTOCOL
We now present the staged commit protocol (SC) and prove that
it is secure, given transactions satisfying relaxed monotonicity.
SC is a hybrid of traditional serialization protocols, such as 2PC,
and the simple pessimistic protocol described in the proof of Thm. 2.
Compared to our simple pessimistic protocol, it allows a broader
variety of transactions to be scheduled (relaxed monotonicity vs.
regular monotonicity), which in turn allows more concurrency. A
transaction is divided into stages, each of which can be securely
committed using a more traditional protocol. The stages them-
selves are executed in a pessimistic sequence.
Each event scheduled is considered to be either precommitted
or committed. We express this in our model by the presence or
absence of an “isCommitted” event corresponding to every event
in a transaction. Intuitively, a precommitted event is part of some
ongoing transaction, so no conﬂicting events that happen after a
precommitted event should be scheduled. A committed event, on
the other hand, is part of a completed transaction; conﬂicting events
that happen after a committed event can safely be scheduled. Once
an event is precommitted, it can never be un-scheduled. It can only
change to being committed. Once an event is committed, it can
never change back to being precommitted.
• The events of each transaction are divided into stages. Each
stage will be scheduled using traditional 2PC, so aborts within
a stage will be sent to all locations involved in that stage.
To divide the events into stages, we establish equivalence
classes of the events’ labels. Labels within each class are
equivalent in the following sense: when events with equiva-
lent labels are aborted, those aborts can securely ﬂow to the
same set of locations. An event’s abort can always ﬂow to the
event’s own location, so locations involved in a stage can se-
curely ensure the atomicity of the events in that stage. Since
conﬂicting events have the same security labels, they will
be in the same equivalence class. We call these equivalence
classes conﬂict labels (cl).
• Each stage features events of the same conﬂict label, and is
scheduled with 2PC. One location must coordinate the 2PC.
All potential aborts in the stage must ﬂow to the coordina-
tor, and some events on the coordinator must be permitted to
affect all events in the stage. Relaxed monotonicity implies
that at least one such location exists for each conﬂict label.
When a stage tries to schedule an event, but ﬁnds a precom-
mitted conﬂicting event, it aborts the entire stage. Because