divulged to the guest OS’s process loader via standard interfaces in
order to load the process.
There are more sophisticated binary code ﬁngerprinting tech-
niques, such as byte-signatures [24], string-signatures [16], and
semantic-aware signature [45], that would also work. However,
our simple hash-based signature sufﬁced for all our experiments.
In addition, our experiments only required process-level context
tracking, not thread-level tracking. Thread tracking at the hypervisor
layer can also be realized (e.g., [12]) if needed.
Syscall execution context identiﬁcation (C2). Syscalls are ex-
ported OS services with standard interfaces. In x86, syscalls are
implemented via unique instruction pairs. The Linux kernel uses
int0x80/iret and sysenter/sysexit pairs, and Microsoft Win-
dows uses int 0x2e/iret and sysenter/sysexit pairs. The
callee of the syscall is indexed by register eax when invoked.
With the instruction translation-based virtualization presented in
§4.2, it is trivial to identify the speciﬁc syscall execution context.
With hardware-assisted virtualization (e.g., Xen and KVM), we
must rely on other hardware mechanisms to intercept the execution
of the syscall instructions. Ether [8], built atop the Xen hypervisor,
leverages page fault exceptions to capture syscall enter and syscall
return points. Nitro [35], based on the KVM hypervisor, leverages
invalid opcode exceptions to intercept syscalls. In addition, hard-
ware breakpoints can also be used [43]. Here, we adopt the page
fault exception approach of Ether and synthesize a page fault at each
syscall entry and syscall return point:
• Syscall-Entry. We copy the value of the original 0x80 (0x2e
for Windows) IDT entry, and substitute it with a unique invalid
memory address. A similar method applies to sysenter-
based syscalls using the SYSENTER_EIP_MSR register. All
syscall invocations therefore result in a page fault exception,
where we can detect the syscall entry point by inspecting the
invalid address.
233
• Syscall-Return. To intercept syscall returns, we set the page
containing the return address as inaccessible in the shadow
page table. This return address page is identiﬁed at the syscall
entry point.
4.1.2 Detailed Design
The design of SYSVMI is based on hardware virtualization. In
particular, it achieves coarse-grained execution context identiﬁcation
and performs syscall-level reactive tampering. In the following, we
describe the design of each speciﬁc reactive tampering attack.
A1. Tampering with Instruction Code. Right after a victim pro-
cess is loaded—for instance, at the syscall exit point after executing
the execve call in line 1 of Fig. 2—we fetch the target page
in which the victim PC resides (e.g., 804a885, 804a88c), and
directly tamper with its machine code. This attack is general, but
requires a detailed understanding (and binary analysis) of the victim
application.
A2. Tampering with Syscall Arguments and Return Values.
Rootkits often tamper with syscall arguments and return values
(e.g., to hide the presence of a malicious process). Since we have the
capability to intercept the syscall entry and syscall return, it is trivial
to tamper with any of the arguments and return values of interest
to attackers. Although our login process attack does not solely
involve such tampering, it is needed in many other attack scenarios.
For example, it is needed by certain attacks that corrupt the system
log by disabling syscalls that write to certain ﬁles.
A3. Tampering with Syscall-produced Data. Whenever there is a
data dependency between program-consumed and syscall-produced
data, there is an opportunity for a spooﬁng MitM attack. The syscall
return value tampering in A2 is a special case of this more general
class of attacks. In the case of our login attack, right after the
execution of mmap2 when mapping /etc/shadow to memory,
we can replace the memory chunk with the ﬁle content from an
attacker-controlled ﬁle. Such spooﬁng is very difﬁcult to prevent or
detect, and does not require any sophisticated reverse engineering
of the binary code.
A4. Using IO Virtualization. If attack A3 requires syscall level
knowledge, such as the semantics of mmap2, then A4 lifts this
requirement by using IO virtualization [1, 40]. More speciﬁcally,
since login processes eventually open the /etc/shadow ﬁle
and read it through disk IO, we can intercept the data transmission
from disk IO to memory to successfully spoof the ﬁle.
To avoid the need for ﬁle name abstractions, which are not
readily available at the IO virtualization layer, we can leverage
information available from the trace in Fig. 2 to identify the victim
IO transmission by its content. For example, the /etc/shadow
ﬁle content can be identiﬁed by using parsing to match its general
syntax, or by ﬁngerprinting its exact contents, and waiting for a
matching IO transfer. Depending on the attack scenario, the syntax
or ﬁngerprint can be revised, so we believe this methodology also
generalizes to many attacks.
4.1.3
Implementation
We have implemented SYSVMI atop a recent Xen hypervisor
(Xen-4.12), and supported attack methodologies A1–4 with 1,895
LOC in total. Table 1 reports a size breakdown of our SYSVMI
implementation. The size of our context-aware reactive VMI is
presented in column 2, and each speciﬁc attack is presented from
column A1–4. The table shows that once the introspection foun-
dation of C1–2 is established, the implementation of attacks A1–4
is relatively trivial. This indicates that our VMI approach is easily
extensible to many attacks, with new tampering attacks being easily
implementable based on attacker needs.
VMM
Xen-4.12
C1–2 A1 A2 A3 A4
1,748
45
17
10
75
Total
1,895
VMM
QEMU-1.01
C1–2 A1 A2 A3 A4
1,250
48
22
30
38
Total
1,388
Table 1: Code Size (LOC) of Our SYSVMI Implementation
Table 2: Code Size (LOC) of the INSTVMIa Implementation
4.2
INSTVMI
Next, we present the detailed design and implementation of
INSTVMI. Since a VMM based on software virtualization emulates
hardware entirely through binary code translation, it has complete
control of the system, including all the capabilities of SYSVMI
(e.g., introspection levels C1–2 and attack methods A1–4). To avoid
redundancy, we therefore limit our discussion in this section to the
new introspection opportunities and tampering attacks afforded by
ﬁne-grained execution context identiﬁcation.
4.2.1 Fine-Grained Context Awareness
Instruction execution context identiﬁcation (C3). We use the
program counter (PC) to identify the speciﬁc instruction execution
context under C1. This is very trivial, since we control the binary
code translation, and we can therefore instrument it to tamper with
the execution precisely when the PC visits certain addresses of our
interest.
Call-stack context identiﬁcation (C4). In addition to the PC, the
call stack and the return addresses it contains can also be used to
more precisely describe the execution context, as demonstrated in
VtPath [10]. To collect the call-stack, we instrument call and
ret instructions. Whenever a call gets executed in our monitored
process (C1), we push the return address and the current esp value
onto a private shadow stack, and whenever a ret gets executed
for the monitored process, we pop from our shadow stack until it
matches the right esp. Tracking esp is necessary to identify and
avoid mismatched call/ret pairs.
4.2.2 Detailed Design
The facility to identify these ﬁne-grained execution contexts offers
attackers extremely powerful tampering attacks. Since we are able
to track the execution of each instruction, we can achieve coarse-
grained syscall context identiﬁcation (C1–2) by simply intercepting
int 0x80, sysenter, and sysexit instructions. It is very simple
to identify these syscall contexts, as illustrated by past work [9, 11].
In addition to attacks A1–4, which can be realized by SYSVMI, the
following new attacks become possible with INSTVMI:
A5. Tampering with Instruction Code at PC Level. While A1
is already able to tamper with the instruction code, its granularity
is at syscall level and lacks ﬂexibility. For more precise tamper-
ing, SYSVMI can tamper with the machine code only when the
instruction at a particular virtual address is about to execute.
A6. Tampering with Instruction Operand. The most intuitive and
ﬁne-grained tampering is to forge an instruction’s register or memory
operand. Our framework facilitates surgical alteration of CPU
registers without corrupting the rest of the execution. Effectively
using this capability requires a detailed reverse engineering of the
binary code, in order to single out the exact victim operand and PC
address.
A7. Tampering with Function Call Arguments and Return Val-
ues. In A2, we are only able to tamper with the syscall related
arguments and return values. In A7, we can now tamper with any
function call arguments, including function calls in user space or
library space, as long as attackers specify which function to corrupt
(via a conﬁguration interface in our design).
VMM
QEMU-1.01
C1–4 A5 A6 A7
3,513
25
35
34
Total
3,607
Table 3: Code Size (LOC) of the INSTVMIb Implementation
Implementation
4.2.3
We have implemented two kinds of INSTVMI: INSTVMIa ports
the SYSVMI implementation (C1–2 and A1–4) to QEMU-1.01, and
INSTVMIb implements the new attacks unique to software virtual-
ization (A5–7) with ﬁne-grained execution context identiﬁcation
(C3–4). A size breakdown of both are presented in Table 2 and
Table 3, respectively.
A comparison of Tables 1 and 2 shows that identifying process
and syscall level context is easier using approach INSTVMIa, whose
total implementation is about 500 LOC smaller. Adding support
for C3–4 and A5–7 requires INSTVMIb to dynamically instrument
each instruction to check the execution context, resulting in a larger
3,513 LOC implementation for the context identiﬁcation in Table 3.
5. EVALUATION
This section presents our experimental results. We ﬁrst describe
the effectiveness of each of our attacks (A1–7) in §5.1, and then
study the performance overhead in §5.2. Next, §5.3 evaluates the
generality of our attacks with respect to different software applica-
tions running on different platforms. Our testing system is a Dell
workstation with Intel Core2 Quad Processor and 24GB of RAM.
The guest-OSes are Linux-2.6.32 and Windows XP (SP2), and the
host OS is Linux-3.0.1 for INSTVMI. The SYSVMI hypervisor is
Xen-4.12.
5.1 Effectiveness
In addition to UNIX login (our running example), our authen-
tication software victims include sshd, vsftpd, and telnetd,
which all have an authentication component. We tested whether
each of our attacks is effective against each program.
login. Using SYSVMI, we applied attacks A1–4, except with A2
and A3 combined to implement the concrete attack (i.e., enabling a
root user entering the system without knowing any password). The
general interface for each attack is adequate to launch the attack
without developing any new code; we simply conﬁgure the concrete
address and instruction code to modify (A1), the syscalls and the
spoofed content (A2 and A3), or the ﬁle pattern of the spooﬁng
hijacking (A4).
Likewise, INSTVMIa and INSTVMIb are similarly conﬁgurable
(without any code modiﬁcation) to successfully launch attacks A1–4
to subvert the login process. For the new unique attacks A5–7
available with INSTVMIb, we conﬁgure A5 to tamper with the
machine code at 0x804a885 without actually calling the pw_auth,
we conﬁgure A6 to tamper with the EFLAGS register at instruction
0x804a88c, and we conﬁgure A7 to tamper with the return value of
function call pw_auth at 0x804a88a. All of these attacks succeed.
sshd. The sshd authentication program (from openssh-5.8),
whose binary code is excerpted in Fig. 4, offers at least two tam-
pering opportunities for A1: change the two arguments to function
strcmp (at 0x80517e2 and 0x80517e6) to be identical, or change
234
 encrypted_password = xcrypt(password,
     (pw_password[0] && pw_password[1]) ? pw_password : "xx");
 return (strcmp(encrypted_password, pw_password) == 0);
 80517da:   89 34 24              mov    %esi,(%esp)
 80517dd:   e8 4e 3b 04 00        call   8095330 
 80517e2:   89 5c 24 04           mov    %ebx,0x4(%esp)
 80517e6:   89 04 24              mov    %eax,(%esp)
 80517e9:   e8 ae b3 ff ff        call   804cb9c 
 80517ee:   85 c0                 test   %eax,%eax
 80517f0:   0f 94 c0              sete   %al
 80517f3:   0f b6 c0              movzbl %al,%eax
 80517f6:   8b 55 f4              mov    -0xc(%ebp),%edx
 80517f9:   65 33 15 14 00 00 00  xor    %gs:0x14,%edx
 8051800:   75 39                 jne    805183b 
Figure 4: Code snippet of the targeted sshd program.
p_crypted = crypt(str_getbuf(p_pass_str), p_pwd->pw_passwd);
if (!vsf_sysutil_strcmp(p_crypted, p_pwd->pw_passwd))
{
  return 1;
}
1b465:   e8 56 8f fe ff   call   43c0 