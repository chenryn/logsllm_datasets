Script1:
            v25 -= 1
        v29 = ctx[0] & 0xF0
        ctx[0] = (v24 & 0xf) + (ctx[0] & 0xf0)
        for v28 in range(7):
            ctx[v28] = (ctx[v28] & 0xF) + (ctx[v28 + 1] & 0xF0)
        ctx[7] = (ctx[7] & 0xF) | v29
def solveRound(off, ctx, round, corr):
    s = Solver()
    doRound(ctx, round)
    for j in range(8):
        s.add(ctx[j] == corr[j])
        s.add(x[j] >= 0x20)
        s.add(x[j] > 8, w & 0xFF,
        x >> 8, x & 0xFF,
        y >> 8, y & 0xFF,
        z >> 8, z & 0xFF]
# Given a 16-
element bytelist, this computes and returns a tuple containing 52 elements of ui
nt16.
def _expand_key_schedule(key):
    # Pack all key bytes into a single uint128
    bigkey = 0
    for b in key:
        assert 0 > 112)
    # Extract consecutive 16 bits at different offsets to form the key schedule
    result = []
    for i in range(_NUM_ROUNDS * 6 + 4):
        offset = (i * 16 + i // 8 * 25) % 128
        result.append((bigkey >> (128 - offset)) & 0xFFFF)
    return tuple(result)
# Given an encryption key schedule, this computes and returns the
# decryption key schedule as a tuple containing 52 elements of uint16.
def _invert_key_schedule(keysch):
    assert isinstance(keysch, tuple) and len(keysch) % 6 == 4
    result = []
    result.append(_reciprocal(keysch[-4]))
    result.append(_negate(keysch[-3]))
    result.append(_negate(keysch[-2]))
    result.append(_reciprocal(keysch[-1]))
    result.append(keysch[-6])
    result.append(keysch[-5])
    for i in range(1, _NUM_ROUNDS):
        j = i * 6
        result.append(_reciprocal(keysch[-j - 4]))
        result.append(_negate(keysch[-j - 2]))
        result.append(_negate(keysch[-j - 3]))
        result.append(_reciprocal(keysch[-j - 1]))
        result.append(keysch[-j - 6])
        result.append(keysch[-j - 5])
    result.append(_reciprocal(keysch[0]))
    result.append(_negate(keysch[1]))
    result.append(_negate(keysch[2]))
    result.append(_reciprocal(keysch[3]))
    return tuple(result)
# ---- Private arithmetic functions ----
# Returns x + y modulo 2^16. Inputs and output are uint16. Only used by _crypt()
.
def _add(x, y):
    assert 0 <= x <= 0xFFFF
    assert 0 <= y <= 0xFFFF
    return (x + y) & 0xFFFF
# Returns x * y modulo (2^16 + 1), where 0x0000 is treated as 0x10000.
# Inputs and output are uint16. Note that 2^16 + 1 is prime. Only used by _crypt
().
def _multiply(x, y):
    assert 0 <= x <= 0xFFFF
    assert 0 <= y <= 0xFFFF
    if x == 0x0000:
        x = 0x10000
    if y == 0x0000:
        y = 0x10000
    z = (x * y) % 0x10001
    if z == 0x10000:
        z = 0x0000
    assert 0 <= z <= 0xFFFF
    return z
# Returns the additive inverse of x modulo 2^16.
# Input and output are uint16. Only used by _invert_key_schedule().
def _negate(x):
    assert 0 <= x <= 0xFFFF
    return (-x) & 0xFFFF
# Returns the multiplicative inverse of x modulo (2^16 + 1), where 0x0000 is
# treated as 0x10000. Input and output are uint16. Only used by _invert_key_sche
dule().
def _reciprocal(x):
    assert 0 <= x <= 0xFFFF
    if x == 0:
        return 0
    else:
        return pow(x, 0xFFFF, 0x10001)  # By Fermat's little theorem
# ---- Numerical constants/tables ----
if __name__ == '__main__':
    _NUM_ROUNDS = 8
    k  = unhexlify('1f ef aa fe 12 4f f4 5f 1a 90'.replace(' ',''))
    # print(len(k))
    a = ARC4.new(k)
    enc = unhexlify('60 dc bc f3 57 8f d2 16 fd b9 1e d8 aa c9 34 d6 50 dc 16 87
 57 8f f7 2f 7f a7 8d 21 aa d9 66 e5'.replace(' ',''))
    print('len rc4 result', len(enc))
    k1 = a.decrypt(enc[:16])
    a = ARC4.new(k)
    sm4_key = a.decrypt(enc[16:])
    enc2 = 'a2 77 1a 22 48 84 73 e7 32 fd bc 96 5f 64 60 46 d3 f5 9f b3 84 d4 8f
 24 a3 c6 aa cb e1 94 7d 58 1c a3 e4 12 e7 b7 86 86 7d 9b 0c ad ee b3 ee 11'.spl
it(' ')
    # print(len(enc2))
    for i in range(48):
        enc2[i] = int(enc2[i],16)
    k11 = []
    for i in range(16):
        k11.append(k1[i])
    de1 = []
Output:
Script2:
    k11 = bytearray(k11)
    print('idea key:', hexlify(k11))
    for i in range(0,48,8):
        de1 += (ideadecrypt(enc2[i:i+8],k11))
    de1 = bytearray(de1)
    print('idea decrypt result:' , hexlify(de1))
    #de1 = ''.join(chr(i) for i in de1)
    de2 = b''
    sm4_key = bytearray(sm4_key)
    print('sm4 key', (hexlify(sm4_key)))
    for i in range(0,48,16):
        kk = bytes_to_long(sm4_key[:16])
        enc = bytes_to_long(de1[i:i+16])
        de2 += long_to_bytes(decrypt(enc, kk))
    print('sm4 decrypt result', hexlify(de2))
    # print(len(de2))
len rc4 result 32
idea key: b'1333efdfaa1a3f1a4fe13f1610024331'
idea decrypt result: 
b'c7d4830dd06755741bf39a4fb611d79fc0c05e1fe41cb213a0eb75b9e4c45527ecc217f217ad0b
81016edecc4b383a70'
sm4 key b'233345abaa1a1a23cdffacef10121102'
sm4 decrypt result 
b'e2aae4282edb06a303752de2430da6ace9f38e7640e955fd99e37f16247b0695f249e5e38ae428
8ededb76fc2ba9fdbc'
from z3 import *
from Crypto.Util.number import long_to_bytes, bytes_to_long
from multiprocessing import Pool
from binascii import unhexlify
def rev(dst):
    s = Solver()
    v4 = BitVec('v4', 32)
    s.add(dst == v4 ^ ((LShR((v4 ^ (32 * v4)), 17)) ^ (32 * v4) ^
                       ((LShR((v4 ^ (32 * v4)), 17) ^ v4 ^ (32 * v4)) << 13)))
    assert s.check() == sat
    return s.model()[v4].as_long()
def worker(args):
    id, num = args
    print(f'id:{id}, trying {hex(num)}')
    for i in range(100016):
        num = rev(num)
    return long_to_bytes(num)[::-1]
Output:
ﬁrmware_blob
if __name__ == '__main__':
    de2 = unhexlify(
        'e2aae4282edb06a303752de2430da6ace9f38e7640e955fd99e37f16247b0695f249e5e
38ae4288ededb76fc2ba9fdbc')
    with Pool(12) as p:
        result = p.map(
            worker, [(i, bytes_to_long(de2[i*4:(i+1)*4]
[::-1])) for i in range(12)])
    print(b''.join(result).decode())
id:0, trying 0x28e4aae2
id:1, trying 0xa306db2e
id:2, trying 0xe22d7503
id:3, trying 0xaca60d43
id:4, trying 0x768ef3e9
id:5, trying 0xfd55e940
id:6, trying 0x167fe399
id:7, trying 0x95067b24
id:8, trying 0xe3e549f2
id:9, trying 0x8e28e48a
id:10, trying 0xfc76dbde
id:11, trying 0xbcfda92b
flag{wf3224s3r4datgsjx524xfsfd1fghzrav42lo1d0a0}
operands = [
  [ '4', 0, -1, 0 ],
  [ '4', 1, 2, 0 ],
  [ ';', 0, 1, 0 ],
  [ '4', 1, 3, 0 ],
  [ 'n', 0, 1, 0 ],
  [ '4', 1, 4, 0 ],
  [ '=', 0, 1, 0 ],
  [ '4', 1, 103, 0 ],
  [ '=', 0, 1, 0 ],
  [ 'O', 0, 0, 0 ],
  [ '4', 0, -1, 0 ],
  [ '4', 1, 2, 0 ],
  [ ';', 0, 1, 0 ],
  [ '4', 1, 2, 0 ],
  [ ':', 0, 1, 0 ],
  [ '4', 1, -116, 0 ],
  [ '=', 0, 1, 0 ],
  [ '4', 1, 80, 0 ],
  [ '=', 0, 1, 0 ],
  [ 'O', 0, 0, 0 ],
  [ '4', 0, -1, 0 ],
  [ '4', 1, 3, 0 ],
  [ ';', 0, 1, 0 ],
  [ '4', 1, 2, 0 ],
  [ ':', 0, 1, 0 ],
  [ '4', 1, 122, 0 ],
  [ '=', 0, 1, 0 ],
  [ '4', 1, 78, 0 ],
  [ '=', 0, 1, 0 ],
  [ 'O', 0, 0, 0 ],
  [ '4', 0, -1, 0 ],
  [ '4', 1, 4, 0 ],
  [ ';', 0, 1, 0 ],
  [ '4', 1, 4, 0 ],
  [ 'n', 0, 1, 0 ],
  [ '4', 1, 111, 0 ],
  [ '=', 0, 1, 0 ],
  [ 'O', 0, 0, 0 ],
  [ '4', 0, -1, 0 ],
  [ '4', 1, 1, 0 ],
  [ ';', 0, 1, 0 ],
  [ '4', 1, 2, 0 ],
  [ 'n', 0, 1, 0 ],