作者：Hcamael@知道创宇404区块链安全研究团队  
时间：2018/09/04
上一篇[《以太坊智能合约 OPCODE
逆向之理论基础篇》](https://paper.seebug.org/640/)，对智能合约的OPCODE的基础数据结构进行了研究分析，本篇将继续深入研究OPCODE，编写一个智能合约的调试器。
## Remix调试器
Remix带有一个非常强大的`Debugger`，当我的调试器写到一半的时候，才发现了Remix自带调试器的强大之处，本文首先，对Remix的调试器进行介绍。
能调试的范围：
**1\. 在Remix上进行每一个操作(创建合约/调用合约/获取变量值)时，在执行成功后，都能在下方的控制界面点击`DEBUG`按钮进行调试**
**2\. Debugger能对任意交易进行调试，只需要在调试窗口输入对应交易地址**
**3\. 能对公链，测试链，私链上的任意交易进行调试**
点击`Environment`可以对区块链环境进行设置，选择`Injected Web3`，环境取决去浏览器安装的插件
比如我，使用的浏览器是`Chrome`，安装的插件是[MetaMask](https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en-US)
通过`MetaMask`插件，我能选择环境为公链或者是测试链，或者是私链
当`Environment`设置为`Web3 Provider`可以自行添加以太坊区块链的RPC节点，一般是用于设置环境为私链
**4\. 在JavaScript的EVM环境中进行调试**
见3中的图，把`Environment`设置为`JavaScript VM`则表示使用本地虚拟环境进行调试测试
在调试的过程中能做什么？
Remix的调试器只提供了详细的数据查看功能，没法在特定的指令对`STACK/MEM/STORAGE`进行操作
在了解清楚Remix的调试器的功能后，感觉我进行了一半的工作好像是在重复造轮子。
之后仔细思考了我写调试器的初衷，今天的WCTF有一道以太坊智能合约的题目，因为第一次认真的逆向EVM的OPCODE，不熟练，一个下午还差一个函数没有逆向出来，然后比赛结束了，感觉有点遗憾，如果当时能动态调试，可能逆向的速度能更快。
Remix的调试器只能对已经发生的行为(交易)进行调试，所以并不能满足我打CTF的需求，所以对于我写的调试器，我转换了一下定位：调试没有源码，只有OPCODE的智能合约的逻辑，或者可以称为离线调试。
## 调试器的编写
智能合约调试器的编写，我认为最核心的部分是实现一个OPCODE解释器，或者说是自己实现一个EVM。
实现OPCODE解释器又分为两部分，1. 设计和实现数据储存器(把STACK/MEM/STORAGE统称为数据储存器)，2. 解析OPCODE指令
### 数据储存器
#### STACK
根据OPCODE指令的情况，EVM的栈和计算机的栈数据结构是一个样的，先入先出，都有`PUSH`和`POP`操作。不过EVM的栈还多了`SWAP`和`DUP`操作，栈交换和栈复制，如下所示，是我使用`Python`实现的EVM栈类:
    class STACK(Base):
        """
        evm stack
        """
        stack: [int]
        max_value: int
        def __init__(self):
            self.stack = []
            self.max_value = 2**256
        def push(self, data: int):
            """
            OPCODE: PUSH
            """
            self.stack.append(data % self.max_value)
        def pop(self) -> (int):
            """
            OPCODE POP
            """
            return self.stack.pop()
        @Base.stackcheck
        def swap(self, n):
            """
            OPCODE: SWAPn(1-16)
            """
            tmp = self.stack[-n-1]
            self.stack[-n-1] = self.stack[-1]
            self.stack[-1] = tmp
        @Base.stackcheck
        def dup(self, n):
            """
            OPCODE: DUPn(1-16)
            """
            self.stack.append(self.stack[-n])
和计算机的栈比较，我觉得EVM的栈结构更像Python的List结构
计算机的栈是一个地址储存一个字节的数据，取值可以精确到一个字节，而EVM的栈是分块储存，每次PUSH占用一块，每次POP取出一块，每块最大能储存32字节的数据，也就是`2^256-1`，所以上述代码中，对每一个存入栈中的数据进行取余计算，保证栈中的数据小于`2^256-1`
#### MEM
EVM的内存的数据结构几乎和计算机内存的一样，一个地址储存一字节的数据。在EVM中，因为栈的结构，每块储存的数据最大为`256bits`，所以当OPCODE指令需要的参数长度可以大于`256bits`时，将会使用到内存
如下所示，是我使用`Python`实现的MEM内存类:
    class MEM(Base):
        """
        EVM memory
        """
        mem: bytearray
        max_value: int
        length: int
        def __init__(self):
            self.mem = bytearray(0)
            self.max_value = 2**256
            self.length = 0
            self.extend(1)
        @Base.memcheck
        def set(self, key: int, value: int):
            """
            OPCODE: MSTORE
            """
            value %= self.max
            self.mem[key: key+0x20] = value.to_bytes(0x20, "big")
            self.length += 0x20
        @Base.memcheck
        def set_byte(self, key: int, value: int):
            """
            OPCODE: MSTORE8
            """
            self.mem[key] = value  & 0xff
            self.length += length
        @Base.memcheck
        def set_length(self, key: int, value: int, length: int):
            """
            OPCODE: XXXXCOPY
            """
            value %= (2**(8*length))
            data = value.to_bytes(length, "big")
            self.mem[key: key+length] = data
            self.length += length
        @Base.memcheck
        def get(self, key: int) -> (int):
            """
            OPCODE: MLOAD
            return uint256
            """
            return int.from_bytes(self.mem[key: key+0x20], "big", signed=False)
        @Base.memcheck
        def get_bytearray(self, key: int) -> (bytearray):
            """
            OPCODE: MLOAD
            return 32 byte array
            """
            return self.mem[key: key+0x20]
        @Base.memcheck
        def get_bytes(self, key: int) -> (bytes):
            """
            OPCODE: MLOAD
            return 32 bytes
            """
            return bytes(self.mem[key: key+0x20])
        @Base.memcheck
        def get_length(self, key:int , length: int) -> (int):
            """
            return mem int value
            """
            return int.from_bytes(self.mem[key: key+length], "big", signed=False)
        @Base.memcheck
        def get_length_bytes(self, key:int , length: int) -> (bytes):
            """
            return mem bytes value
            """
            return bytes(self.mem[key: key+length])
        @Base.memcheck
        def get_length_bytearray(self, key:int , length: int) -> (bytearray):
            """
            return mem int value
            """
            return self.mem[key: key+length]
        def extend(self, num: int):
            """
            extend mem space
            """
            self.mem.extend(bytearray(256*num))
使用python3中的`bytearray`类型作为MEM的结构，默认初始化256B的内存空间，因为有一个OPCODE是`MSIZE`:
> Get the size of active memory in bytes.
所以每次设置内存值时，都要计算`active memory`的size
内存相关设置的指令分为三类
  1. MSTORE, 储存0x20字节长度的数据到内存中
  2. MSTORE8, 储存1字节长度的数据到内存中
  3. CALLDATACOPY(或者其他类似指令)，储存指定字节长度的数据到内存中