    { 
        want-=(len-off); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
236 
        if (!BUF_MEM_grow(b,len+want)) 
        { 
            ASN1err(ASN1_F_ASN1_D2I_BIO, 
                    ERR_R_MALLOC_FAILURE); 
            goto err; 
        } 
        i=want); 
This code is called in a loop for retrieving ASN.1 objects. The ASN1_get_object() 
function reads an object header that specifies the length of the next ASN.1 object. 
This length is placed in the signed integer c.slen, which is then assigned to want. The 
ASN.1 object function ensures that this number isn't negative, so the highest value 
that can be placed in c.slen is 0x7FFFFFFF. At this point, len is the amount of data 
already read in to memory, and off is the offset in that data to the object being 
parsed. So, (len-off) is the amount of data read into memory that hasn't yet been 
processed by the parser. If the code sees that the object is larger than the available 
unparsed data, it decides to allocate more space and read in the rest of the object. 
The BUF_MEM_grow() function is called to allocate the required space in the memory 
buffer b; its second argument is a size parameter. The problem is that the len+want 
expression used for the second argument can be overflowed. Say that upon entering 
this code, len is 200 bytes, and off is 50. The attacker specifies an object size of 
0x7FFFFFFF, which ends up in want. 0x7FFFFFFF is certainly larger than the 150 bytes 
of remaining data in memory, so the allocation code will be entered. want will be 
subtracted by 150 to reflect the amount of data already read in, giving it a value of 
0x7FFFFF69. The call to BUF_MEM_grow() will ask for len+want bytes, or 0x7FFFFF69 + 
200. This is 0x80000031, which is interpreted as a large negative number. 
Internally, the BUF_MEM_grow() function does a comparison to check its length 
argument against how much space it has previously allocated. Because a negative 
number is less than the amount of memory it has already allocated, it assumes 
everything is fine. So the reallocation is bypassed, and arbitrary amounts of data can 
be copied into allocated heap data, with severe consequences. 
7.2.5 Type Conversions 
C is extremely flexible in handling the interaction of different data types. For example, 
with a few casts, you can easily multiply an unsigned character with a signed long 
integer, add it to a character pointer, and then pass the result to a function expecting 
a pointer to a structure. Programmers are used to this flexibility, so they tend to mix 
data types without worrying too much about what's going on behind the scenes. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
237 
To deal with this flexibility, when the compiler needs to convert an object of one type 
into another type, it performs what's known as a type conversion. There are two 
forms of type conversions: explicit type conversions, in which the programmer 
explicitly instructs the compiler to convert from one type to another by casting, and 
implicit type conversions, in which the compiler does "hidden" transformations of 
variables to make the program function as expected. 
Note 
You might see type conversions referred to as "type coercions" in 
programming-language literature; the terms are synonymous. 
Often it's surprising when you first learn how many implicit conversions occur behind 
the scenes in a typical C program. These automatic type conversions, known 
collectively as the default type conversions, occur almost magically when a 
programmer performs seemingly straightforward tasks, such as making a function 
call or comparing two numbers. 
The vulnerabilities resulting from type conversions are often fascinating, because 
they can be subtle and difficult to locate in source code, and they often lead to 
situations in which the patch for a critical remote vulnerability is as simple as 
changing a char to an unsigned char. The rules governing these conversions are 
deceptively subtle, and it's easy to believe you have a solid grasp of them and yet 
miss an important nuance that makes a world of difference when you analyze or write 
code. 
Instead of jumping right into known vulnerability classes, first you look at how C 
compilers perform type conversions at a low level, and then you study the rules of C 
in detail to learn about all the situations in which conversions take place. This section 
is fairly long because you have to cover a lot of ground before you have the 
foundation to analyze C's type conversions with confidence. However, this aspect of 
the language is subtle enough that it's definitely worth taking the time to gain a solid 
understanding of the ground rules; you can leverage this understanding to find 
vulnerabilities that most programmers aren't aware of, even at a conceptual level. 
Overview 
When faced with the general problem of reconciling two different types, C goes to 
great lengths to avoid surprising programmers. The compilers follow a set of rules 
that attempt to encapsulate "common sense" about how to manage mixing different 
types, and more often than not, the result is a program that makes sense and simply 
does what the programmer intended. That said, applying these rules can often lead to 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
238 
surprising, unexpected behaviors. Moreover, as you might expect, these unexpected 
behaviors tend to have dire security consequences. 
You start in the next section by exploring the conversion rules, the general rules C 
uses when converting between types. They dictate how a machine converts from one 
type to another type at the bit level. After you have a good grasp of how C converts 
between different types at the machine level, you examine how the compiler chooses 
which type conversions to apply in the context of C expressions, which involves three 
important concepts: simple conversions, integer promotions, and usual 
arithmetic conversions. 
Note 
Although non-integer types, such as floats and pointers, have some coverage, the 
primary focus of this discussion is on how C manipulates integers because these 
conversions are widely misunderstood and are critical for security analysis. 
Conversion Rules 
The following rules describe how C converts from one type to another, but they don't 
describe when conversions are performed or why they are performed. 
Note 
The following content is specific to twos complement implementations and represents 
a distilled and pragmatic version of the rules in the C specification. 
Integer Types: Value Preservation 
An important concept in integer type conversions is the notion of a 
value-preserving conversion. Basically, if the new type can represent all possible 
values of the old type, the conversion is said to be value-preserving. In this situation, 
there's no way the value can be lost or changed as a result of the conversion. For 
example, if an unsigned char is converted into an int, the conversion is 
value-preserving because an int can represent all of the values of an unsigned char. 
You can verify this by referring to Table 6-2(? [????.]) again. Assuming you're 
considering a twos complement machine, you know that an 8-bit unsigned char can 
represent any value between 0 and 255. You know that a 32-bit int can represent any 
value between -2147483648 and 2147483647. Therefore, there's no value the 
unsigned char can have that the int can't represent. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
239 
Correspondingly, in a value-changing conversion, the old type can contain values 
that can't be represented in the new type. For example, if you convert an int into an 
unsigned int, you have potentially created an intractable situation. The unsigned int, 
on a 32-bit machine, has a range of 0 to 4294967295, and the int has a range of 
-2147483648 to 2147483647. The unsigned int can't hold any of the negative values 
a signed int can represent. 
According to the C standard, some of the value-changing conversions have 
implementation-defined results. This is true only for value-changing conversions that 
have a signed destination type; value-changing conversions to an unsigned type are 
defined and consistent across all implementations. (If you recall from the boundary 
condition discussion, this is because unsigned arithmetic is defined as a modulus 
arithmetic system.) Twos complement machines follow the same basic behaviors, so 
you can explain how they perform value-changing conversions to signed destination 
types with a fair amount of confidence. 
Integer Types: Widening 
When you convert from a narrow type to a wider type, the machine typically copies 
the bit pattern from the old variable to the new variable, and then sets all the 
remaining high bits in the new variable to 0 or 1. If the source type is unsigned, the 
machine uses zero extension, in which it propagates the value 0 to all high bits in 
the new wider type. If the source type is signed, the machine uses sign extension, 
in which it propagates the sign bit from the source type to all unused bits in the 
destination type. 
Warning 
The widening procedure might have some unexpected implications: If a narrow 
signed type, such as signed char, is converted to a wider unsigned type, such as 
unsigned int, sign extension occurs. 
Figure 6-1 shows a value-preserving conversion of an unsigned char with a value of 5 
to a signed int. 
Figure 6-1. Conversion of unsigned char to int (zero extension, big endian) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
240 
The character is placed into the integer, and the value is preserved. At the bit pattern 
level, this simply involved zero extension: clearing out the high bits and moving the 
least significant byte (LSB) into the new object's LSB. 
Now consider a signed char being converted into a int. A int can represent all the 
values of a signed char, so this conversion is also value-preserving. Figure 6-2 shows 
what this conversion looks like at the bit level. 
Figure 6-2. Conversion of signed char to integer (sign extension, big endian) 
This situation is slightly different, as the value is the same, but the transformation is 
more involved. The bit representation of -5 in a signed char is 1111 1011. The bit 
representation of -5 in an int is 1111 1111 1111 1111 1111 1111 1111 1011. To do 
the conversion, the compiler generates assembly that performs sign extension. You 
can see in Figure 6-2 that the sign bit is set in the signed char, so to preserve the 
value -5, the sign bit has to be copied to the other 24 bits of the int. 
The previous examples are value-preserving conversions. Now consider a 
value-changing widening conversion. Say you convert a signed char with a value of -5 
to an unsigned int. Because the source type is signed, you perform sign extension on 
the signed char before placing it in the unsigned int (see Figure 6-3). 
Figure 6-3. Conversion of signed char to unsigned integer (sign extension, big endian) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
241 
As mentioned previously, this result can be surprising to developers. You explore its 
security ramifications in "Sign Extension(? [????.])" later in this chapter. This 
conversion is value changing because an unsigned int can't represent values less than 
0. 
Integer Types: Narrowing 
When converting from a wider type to a narrower type, the machine uses only one 
mechanism: truncation. The bits from the wider type that don't fit in the new 
narrower type are dropped. Figures 6-4 and 6-5 show two narrowing conversions. 
Note that all narrowing conversions are value-changing because you're losing 
precision. 
Figure 6-4. Conversion of integer to unsigned short integer (truncation, big endian) 
Figure 6-5. Conversion of integer to signed char (truncation, big endian) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
242 
Integer Types: Signed and Unsigned 
One final type of integer conversion to consider: If a conversion occurs between a 
signed type and an unsigned type of the same width, nothing is changed in the bit 
pattern. This conversion is value-changing. For example, say you have the signed 
integer -1, which is represented in binary as 1111 1111 1111 1111 1111 1111 1111 
1111. 
If you interpret this same bit pattern as an unsigned integer, you see a value of 
4,294,967,295. The conversion is summarized in Figure 6-6. The conversion from 
unsigned int to int technically might be implementation defined, but it works in the 
same fashion: The bit pattern is left alone, and the value is interpreted in the context 
of the new type (see Figure 6-7). 
Figure 6-6. Conversion of int to unsigned int (big endian) 
Figure 6-7. Conversion of unsigned int to signed int (big endian) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
243 
Integer Type Conversion Summary 
Here are some practical rules of thumb for integer type conversions: 
When you convert from a narrower signed type to a wider unsigned type, the 
compiler emits assembly to do sign extension, and the value of the object 
might change. 
When you convert from a narrower signed type to a wider signed type, the 
compiler emits assembly to do sign extension, and the value of the object is 
preserved. 
When you convert from a narrower unsigned type to a wider type, the 
compiler emits assembly to do zero extension, and the value of the object is 
preserved. 
When you convert from a wider type to a narrower type, the compiler emits 
assembly to do truncation, and the value of the object might change. 
When you convert between signed and unsigned types of the same width, the 
compiler effectively does nothing, the bit pattern stays the same, and the 
value of the object might change. 
Table 6-4 summarizes the processing that occurs when different integer types are 
converted in twos complement implementations of C. As you cover the information in 
the following sections, this table can serve as a useful reference for recalling how a 
conversion occurs. 
Table 6-4. Integer Type Conversion in C (Source on Left, Destination on Top) 
signed char unsigne
d char 
short int 
Unsigne
d short 
int 
int 
unsigne
d int 
signed 
char 
Compatible 
types 
Value 
changing 
Bit 
pattern 
Value 
preserving 
Sign 
extension 
Value 
changing 
Sign 
extensio
Value 
preserving 
Sign 
extension 
Value 
changing 
Sign 
extensio
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
244 
Table 6-4. Integer Type Conversion in C (Source on Left, Destination on Top) 
signed char unsigne
d char 
short int 
Unsigne
d short 
int 
int 
unsigne
d int 
same 
n 
n 
unsign
ed char 
Value 
changing 
Bit pattern 
same 
Implementat
ion defined 
Compati
ble types 
Value 
preserving 
Zero 
extension 
Value 
preservi
ng 
Zero 
extensio
n 
Value 
preserving 
Zero 
extension 
Value 
preservi
ng 
Zero 
extensio
n 
short 
int 
Value 
changing 
Truncation 
Implementat
ion defined 
Value 
changing 
Truncati
on 
Compatible 
types 
Value 
changing 
Bit 
pattern 
same 
Value 
changing 
Sign 
extension 
Value 
changing 
Sign 
extensio
n 
unsign
ed 
short 
int 