somewhere persistent and, thus, could undermine plausible
deniability. Similarly, key management
techniques used in
traditional disk encryption software, such as key wrapping [7],
[31], [40], could likewise undermine deniability. Currently, all
deniable ﬁle systems demand the user select good passwords,
and DEFY is no exception to this.
Relatedly, attacks against deniable ﬁle systems may be
possible when adversaries have access to data from external
sources (“hints”) or are otherwise unconstrained by the single-
view and snapshot models. For example, Skillen and Mannan
propose a “colluding carrier” attack [46], where the adversary
colludes with a wireless provider or ISP (e.g., through govern-
mental writ), collecting network trace data to aid later forensic
analysis of the device. Discrepancies between the device logs
and the carrier’s logs may enable an adversary to conclude
the presence of hidden data, and compel hidden levels to be
revealed. Skillen and Mannan make suggestions to restrict
these threats to deniable ﬁle systems for mobile devices,
including disabling wireless connectivity (or limiting network
connectivity to WiFi only) during privileged use, and using
multiple SIM cards and carriers to make log collection difﬁcult.
We, too, acknowledge DEFY’s limitations to resist this type
of attack, and suggest that users follow those same practices
in countries where carriers may assist forensic investigation.
More generally, we ﬁnd the ultimate guarantees of deniable
ﬁle systems have not been critically examined. In all existing
deﬁnitions, the onus is on the adversary to prove that the
system contains hidden data. This reﬂects the presumption of
innocence common in many legal systems, i.e. the adversary
must prove the user’s guilt and until then she is presumed
innocent. Given that adversaries have been known to torture
individuals for their passwords [47], it is unclear if a system
founded upon this tenant is viable for use in truly hostile
environments. In practice, the very existence of a deniable ﬁle
system may draw unwanted attention. To a casual observer,
DEFY looks and behaves like a full-disk encryption scheme,
so that revealing a single level may be convincing.
XI. CONCLUSION
We have presented DEFY, a deniable ﬁle system for solid-
state memory, usable as a ﬁle system for mobile devices
and laptops. Current design patterns for deniable ﬁle systems
cannot be easily adapted for many mobile devices; this is
largely due to system design assumptions about the storage
media that, while valid for many settings, are inappropriate
for solid-state drives. The physical properties of solid-state
memory require wear leveling and disallow in-place updates,
motivating our use of a log-structured ﬁle system. Thus, DEFY
is the ﬁrst log-structured deniable ﬁle system. At ﬁrst glance,
log-structured systems appear to deeply conﬂict with the goal
of empowering a user to deny actions from the recent past.
We apply techniques from a secure, versioning ﬁle system
in a completely new way, to support a log-structure with a
deniable history. As the ﬁrst deniable ﬁle system designed
for log-structured storage, we believe DEFY ﬁlls a gap in
the space of privacy enhancing technologies for devices using
solid-state drives, such as mobile devices. DEFY also supports
other features useful in a mobile setting, including authen-
ticated encryption and ﬁne-grained secure deletion of data.
Our DEFY prototype implementation is based on YAFFS and
WhisperYAFFS, and is released as an open-source project on
BitBucket1. Preliminary evaluation demonstrates performance
similar to that experienced with full-disk encryption on these
devices, i.e., WhisperYAFFS.
1https://bitbucket.org/solstice/defy/
11
ACKNOWLEDGMENTS
The authors would like to thank the NDSS program
committee for their very constructive feedback, Hayawardh
Vijayakumar for feedback on a pre-publication version of this
paper, and LT M. Chase Smith for earlier work on a related
DEFY design. Our thanks to the YAFFS and WhisperYAFFS
developers for their respective contributions to the free and
open-source software movement.
REFERENCES
[1]
[2]
[3]
“UBIFS - A UBI File System,” October 2008, http://www.linux-
mtd.infradead.org/doc/ubifs.html.
“Martus case studies: The global human rights abuse reporting system,”
2012, https://www.martus.org/resources/case studies.shtml.
[Online].
Available: https://www.martus.org/resources/case studies.shtml
“GuardianProject/ChatSecure:Android,”
https://guardianproject.info/apps/chatsecure.
“GuardianProject/Orbot,” 2014, https://guardianproject.info/apps/orbot/.
“Lookout/lookout mobile security,” 2014, https://www.lookout.com/.
“Truecrypt,” 2014, http://www.truecrypt.org/.
[4]
[5]
[6]
[7] Accredited Standards Committee, X9, Inc., “ANS X9.102- Wrapping of
Keys and Associated Data,” http://eprint.iacr.org/2004/340.pdf, Novem-
ber 2004.
2014,
[8] R. Anderson, “The dancing bear – a new way of composing ciphers,”
in Proceedings of the International Workshop on Security Protocols,
April 2004.
[9] R. Anderson, R. Needham, and A. Shamir, “The steganographic ﬁle
system,” in Information Hiding, Second International Workshop (IH
’98), Portland, Oregon, USA, April 1998, pp. 73–82.
[10] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway, “A Concrete Security
Treatment of Symmetric Encryption,” in Proceedings of the Annual
Symposium on Foundations of Computer Science, 1997, pp. 394–403.
[11] M. Bellare and C. Namprempre, “Authenticated Encryption: Relations
among notions and analysis of the generic composition paradigm,”
in Advances in Cryptology - Asiacrypt’00 Proceedings, vol. 1976.
Springer-Verlag, 2000, lecture Notes in Computer Science.
[12] M. Blaze, “High-bandwidth encryption with low-bandwidth smart-
cards,” in Fast Software Encryption, vol. 1039, 1996, pp. 33–40, lecture
Notes in Computer Science.
[13] M. Blaze, J. Feigenbaum, and M. Naor, “A formal treatment of remotely
keyed encryption,” in Advances in Cryptology – EUROCRYPT ’98, vol.
1403, 1998, pp. 251–265, Lecture Notes in Computer Science.
[14] M. Blaze, “A cryptographic ﬁle system for UNIX,” in Proceedings of
the ACM Conference on Computer and Communications Security, 1993,
pp. 9–16.
[15] D. Boneh and R. Lipton, “A revocable backup system,” in Proceedings
of the USENIX Security Symposium, July 1996, pp. 91–96.
[16] R. Canetti, C. Dwork, M. Naor, and R. Ostrovsky, “Deniable encryp-
tion,” Advances in Cryptology — CRYPTO ’97, pp. 90–104, 1997.
[17] A. Czekis, D. J. St Hilaire, K. Koscher, S. D. Gribble, T. Kohno, and
B. Schneier, “Defeating encrypted and deniable ﬁle systems: Truecrypt
v5.1a and the case of the tattling os and applications,” 3rd USENIX
Workshop on Hot Topics in Security (HotSec ’08), 2008.
[18] D. Defreez, “Android privacy through encryption,” Master’s thesis,
Southern Oregon University, May 2012, available at http://goo.gl/
94HBb.
[19] Y. Dodis and J. An, “Concealment and its applications to authenticated
encryption,” in Advances in Cryptology – EUROCRYPT ’03, vol. 2656,
2003, Lecture Notes in Computer Science.
[20] M. Dworkin, “Recommendation for block cipher modes of operation:
The XTS-AES mode for conﬁdentiality on storage devices,” National
Institute of Standards and Technology, NIST Special Publication SP-
800-38E, January 2010.
[21] S. L. Garﬁnkel and A. Shelat, “Remembrance of data passed: A study
of disk sanitization practices,” IEEE Security and Privacy, vol. 1, no. 1,
pp. 17–27, 2003.
[22] P. Gasti, G. Ateniese, and M. Blanton, “Deniable cloud storage: sharing
ﬁles via public-key deniability,” in WPES ’10: Proceedings of the 9th
annual ACM workshop on Privacy in the electronic society, Oct. 2010.
[23] P. Gutmann, “Secure deletion of data from magnetic and solid-state
memory,” in Proceedings of the USENIX Security Symposium, July
1996, pp. 77–90.
[24] M. Jakobsson, J. Stern, and M. Yung, “Scramble all. Encrypt small.” in
Fast Software Encryption, vol. 1636, 1999, lecture Notes in Computer
Science.
[25] B. Kaliski, “PKCS #5: Password-based cryptography speciﬁcation,”
IETF Network Working Group, Request for Comments RFC 2898, Sept.
2000.
J. Lee, S. Yi, J. Heo, S. Y. Shin, and Y. Cho, “An Efﬁcient Secure
Deletion Scheme for Flash File Systems,” Journal of Information
Science and Engineering, vol. 26, pp. 27–38, 2010.
[26]
[27] C. Manning, “How YAFFS works,” 23 May 2012, available at http:
//goo.gl/0Mdja.
[28] A. D. Mcdonald and M. G. Kuhn, “StegFS: A steganographic ﬁle system
[29]
for Linux,” in Information Hiding, 1999.
J. Mull, “How a Syrian refugee risked his life to bear witness to atroc-
ities,” March 2012, toronto Star Online; posted 14-March-2012. [On-
line]. Available: http://www.thestar.com/news/world/2012/03/14/how
a syrian refugee risked his life to bear witness to atrocities.html
[30] T. M¨uller and M. Spreitzenbarth, “Frost: Forensic recovery of scrambled
telephones,” in Applied Cryptography and Network Security (ACNS’13),
2013, pp. 373–388.
[31] National Institute of Standards and Technology, “AES key wrap speci-
ﬁcation,” November 2001.
[32] W. Norcott
and D. Capps,
http://www.iozone.org/.
“IOzone ﬁlesystem benchmark,”
[33] H. Pang, K. lee Tan, and X. Zhou, “StegFS: A Steganographic File
the International Conference on Data
System,” in Proceedings of
Engineering, 2003.
[34] Z. N. J. Peterson, R. Burns, J. Herring, A. Stubbleﬁeld, and A. D.
Rubin, “Secure Deletion for a Versioning File System,” in Proceedings
of the USENIX Conference on File and Storage Technologies, 2005.
[35] N. Provos and D. Mazieres, “A future-adaptable password scheme,” in
Proceedings of the USENIX Annual Technical Conference, 1999.
J. Reardon, S. Capkun, and D. Basin, “Data node encrypted
ﬁle
in
the USENIX Security Symposium, 2012, pp.
Proceedings of
333–348.
https://www.usenix.org/conference/
usenixsecurity12/technical-sessions/presentation/reardon
secure deletion for ﬂash memory,”
[Online]. Available:
system: Efﬁcient
[36]
[37] Reporters Without Borders, “Internet enemies,” 12 March 2012, avail-
able at http://goo.gl/x6zZ1.
[38] R. L. Rivest, “All-or-nothing encryption and the package transform,” in
Fast Software Encryption Conference, vol. 1267, 1997, pp. 210–218,
lecture Notes in Computer Science.
[39] P. Rogaway, M. Bellare, J. Black, and T. Krovet, “OCB: A block-
cipher mode of operation for efﬁcient authenticated encryption,” in
Proceedings of the ACM Conference on Computer and Communications
Security, November 2001, pp. 196–205.
[40] P. Rogaway and T. Shrimpton, “Deterministic authenticated-encryption
a provable-security treatment of the key-wrap problem,” in Advances
in Cryptology – EUROCRYPT 06, vol. 4004, 2007, Lecture Notes in
Computer Science.
[41] M. Rosenblum and J. K. Ousterhout, “The Design and Implementation
of a Log-Structured File System,” Operating Systems Review, vol. 25,
pp. 1–15, 1991.
[42] S. Schmitt, M. Spreitzenbarth, and C. Zimmermann, “Reverse engi-
neering of the Android ﬁle system (YAFFS2),” Friedrich-Alexander-
Universit¨at Eriangen-N¨urnberg, Tech. Rep. CS-2011-06, 2011.
[43] B. Schneier, ““Evil maid” attacks on encrypted hard drives,” 23 Oct.
2009, http://goo.gl/Z1Kny. [Online]. Available: https://www.schneier.
com/blog/archives/2009/10/evilmaidattac.html
[44] M. Seltzer, K. Bostic, M. K. McKusick, and C. Staelin, “An implemen-
tation of a log-structured ﬁle system for UNIX,” in Proceedings of the
Winter USENIX Technical Conference, January 1993, pp. 307–326.
12
“GitHub: WhisperSystems/RedPhone,” http://goo.gl/Mmz9s, Whisper-
Systems, 2012.
“GitHub: WhisperSystems/TextSecure,” http://goo.gl/3qoV8, Whisper-
Systems, 2012.
“GitHub: WhisperSystems/WhisperYAFFS: Wiki,” http://goo.gl/Qsku4,
WhisperSystems,
https://github.com/
WhisperSystems/WhisperYAFFS/wiki
[Online]. Available:
2012.
[52] C. P. Wright, M. C. Martino, and E. Zadok, “Ncryptfs: A secure and
convenient cryptographic ﬁle system,” in Proceedings of the USENIX
Technical Conference, 2003, pp. 197–210.
[45] A. Skillen, “Deniable storage encryption for mobile devices,” Master’s
thesis, Concordia University, 2013.
[46] A. Skillen and M. Mannan, “On implementing deniable storage
encryption for mobile devices,” in Proceedings of the Network and
Distributed System Security Symposium, February 2013.
[Online].
Available: http://spectrum.library.concordia.ca/975074/
[49]
[50]
[51]
[47] M. Weaver, “Developer tortured by raiders with crowbars,” Daily
Telegraph, 31 October 1997.
[48] M. Wei, L. M. Grupp, F. E. Spada, and S. Swanson, “Reliably erasing
data from ﬂash-based solid state drives,” in Proceedings of the USENIX
Conference on File and Storage Technologies, 2011.
13