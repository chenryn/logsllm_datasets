# Title: Exploiting Races for Fun and Profit: How to Abuse atime
# Authors: Nikita Borisov, David Wagner, Rob Johnson, Naveen Sastry
# Affiliation: University of California, Berkeley
# Email: {nikitab, daw, rtjohnso, nks}@cs.berkeley.edu

## Abstract
Dean and Hu proposed a probabilistic countermeasure to the classic access(2)/open(2) TOCTTOU (Time Of Check To Time Of Use) race condition in privileged Unix programs [4]. In this paper, we describe an attack that succeeds with very high probability against their countermeasure. We then consider a stronger randomized variant of their defense and show that it, too, is vulnerable. Our findings suggest that the use of access(2) in privileged Unix programs should be avoided. The tools we develop can also be used to exploit other filesystem races, highlighting the importance of avoiding such vulnerabilities in secure software.

## 1. Introduction
At USENIX Security 2004, Dean and Hu presented a probabilistic scheme for safely using the access(2) system call in Unix systems [4]. The access(2) system call is known to be vulnerable to TOCTTOU race attacks, leading to its near-complete disuse. This leaves Unix programmers without a portable, secure, and efficient way to check file permissions before opening them. If Dean and Hu's scheme were secure, it would be a significant improvement for systems programmers. However, in this paper, we demonstrate that it is not.

Dean and Hu's scheme, which we call k-Race, aims to thwart attackers by requiring them to win multiple races to successfully exploit the system. The security of their scheme relies on the assumption that an attacker has a low probability of winning each individual race, and thus an exponentially low probability of winning all required races. Dean and Hu identified two main challenges for attackers: ensuring they are scheduled in time to win each race and maintaining synchronization with the victim over multiple successive races. We have developed three tools to overcome these challenges: filesystem mazes, system call synchronizers, and system call distinguishers. Using these tools, we can win races with extremely high probability, violating Dean and Hu's assumptions. Our attack reliably breaks the k-Race algorithm using the recommended security parameter, k = 7, on several platforms, as shown in Table 1.

| Operating System | Success Rate (Attacker Wins / Trials) |
|------------------|--------------------------------------|
| FreeBSD 4.10-PR2 | 92/100                               |
| Linux 2.6.8      | 98/100                               |
| Solaris 9        | 100/100                              |

Our attack remains successful even when the security parameter is much larger than recommended. We also consider a randomized extension of the k-Race algorithm, which makes non-deterministic sequences of calls to access(2), open(2), and fstat(2), and show that it can also be defeated. The tools we develop for this attack are applicable to other Unix filesystem race vulnerabilities, such as the stat(2)/open(2) race common in insecure temporary file creation. We have ported our attack code to several Unix variants, and it succeeds on all of them. Our technique exploits the performance disparity between disks and CPUs, making our attack more powerful as this gap grows. This refutes Dean and Hu's claim that the risk to systems using their defense would decline as CPU speeds increase in the future.

Recent research in automated code auditing has discovered over 40 TOCTTOU races in the Red Hat Linux distribution [10]. Combined with our techniques for exploiting race conditions, this shows that races are a prevalent and serious threat to system security.

In summary, we show that the k-Race algorithm is insecure, that Unix filesystem races are easy to win, and that they will continue to be easy to win for the foreseeable future. The rest of this paper is organized as follows: Section 2 reviews setuid programs in Unix and the access(2)/open(2) race. Section 3 presents Dean and Hu's countermeasure for preventing access(2)/open(2) races. Sections 4 and 5 describe a simple attack on Dean and Hu's scheme and enhance this attack. Sections 6 and 7 describe a randomized generalization of the k-Race algorithm and an attack on that scheme. Section 8 considers other defenses against the access(2)/open(2) race. Section 9 discusses related work, and Section 10 summarizes our contributions.

## 2. The access(2)/open(2) Race
The access(2) system call was introduced to address a problem with setuid-root programs. The setuid mechanism allows a program to run with the permissions of the executable's owner rather than the invoker, enabling it to use private data files that the invoker cannot access. A setuid-root program can access any file on the system, including the invoker's personal files, leading to a classic confused deputy problem [6].

Consider a setuid-root printing program that prepares users' files for printing and places them in the printing queue. The queue is not accessible to ordinary users, but the setuid-root program can write to it. The program should only allow users to print files they can access. Unfortunately, since setuid-root programs have permission to read every file on the system, there is no easy way to determine whether the requested input file is readable by the caller.

To solve this, Unix introduced the access(2) system call. A setuid program can use access(2) to check if the invoker has the necessary rights to open a file. While this solves the confused deputy problem, it introduces a new security vulnerability: TOCTTOU races [8]. The vulnerability occurs because the return value from access(2) reflects the state of the filesystem at some recent time in the past, but does not guarantee the state when the next filesystem operation is performed.

Figure 1 illustrates a typical setuid-root program vulnerable to the access(2)/open(2) TOCTTOU race attack. An attacker can attempt to modify the filesystem (e.g., by changing symbolic links) between the access(2) and open(2) system calls so that when the setuid program calls access(2), the given filename points to a safe, accessible file, but when the setuid program calls open(2), the filename points to a protected file. Thus, even if a setuid program uses access(2), an attacker can still trick it into opening files it should not.

```c
// Victim (installed setuid-root)
void main(int argc, char **argv) {
    int fd;
    if (access(argv[1], R_OK) != 0)
        exit(1);
    fd = open(argv[1], O_RDONLY);
    // Do something with fd...
}
```

**Figure 1: A setuid-root program vulnerable to the access(2)/open(2) TOCTTOU race attack. An attacker may be able to change the filesystem between the calls to access(2) and open(2).**

Figure 2 shows a simple attack program that can trick the victim into opening /etc/shadow, a file that only root can read. The attack is highly timing-dependent: the attack program must interrupt the victim program between its access(2) call and open(2) call. When this happens, the access(2) call succeeds because, at that time, the path activedir/lnk resolves to a user-accessible file, public_file. After the victim calls access(2), it gets interrupted, and the attacker changes the symbolic link activedir to point to dir1. When the victim resumes, it calls open(2) on activedir/lnk, which now resolves to /etc/shadow. Since the victim is a setuid-root program, the open(2) succeeds, but the victim believes it has opened a file accessible by the invoking user.

```c
// Attacker
void main(int argc, char **argv) {
    // Assumes directories and links:
    // dir0/lnk -> public_file
    // dir1/lnk -> /etc/shadow
    // activedir -> dir0
    // Let the victim run
    if (fork() == 0) {
        system("victim activedir/lnk");
        exit(0);
    }
    usleep(1); // yield CPU
    // Switch where target points
    unlink("activedir");
    symlink("dir1", "activedir");
}
```

**Figure 2: A program for exploiting access(2)/open(2) races. A non-root attacker can use this program to exploit the setuid-root program shown in Figure 1.**

Notice that the attacker has a better chance of winning the race if dir0 is not currently in the buffer cache. If that is the case, the victim's call to access(2) will need to fetch the contents of dir0 from disk, putting the victim to sleep and giving the attacker a chance to switch the symbolic link activedir. This observation is one of the key ideas behind our attack on the k-Race defense.

## 3. The k-Race Proposal
Dean and Hu observed that, in practice, exploiting the access(2) race condition can be quite difficult. Their experiments showed that a naive attacker can only expect to win a race with a probability of 10^-3 on uniprocessor machines and 10^-1 on multiprocessor machines. Based on this evidence, Dean and Hu proposed a probabilistic countermeasure to this race condition. By requiring the attacker to win a large number of races, they intended to make it practically impossible to successfully exploit the access(2)/open(2) race.

An implementation of their defense is given in Figure 3. The k-Race algorithm essentially repeats the access(2)/open(2) idiom k times. To ensure that the attacker must win a race between every system call, the k-Race algorithm uses fstat(2) to check that every open(2) call resolves to the same file. 

```c
int dh_access_open(char *fname) {
    int fd, rept_fd;
    int orig_ino, orig_dev;
    struct stat buffer;
    if (access(fname, R_OK) != 0)
        return -1;
    fd = open(fname, O_RDONLY);
    if (fd < 0)
        return -1;
    // This is the strengthening.
    // *First, get the original inode.
    if (fstat(fd, &buffer) != 0)
        goto error;
    orig_inode = buffer.st_ino;
    orig_device = buffer.st_dev;
    // Now, repeat the race.
    // File must be the same each time.
    for (i = 0; i < k; i++) {
        if (access(fname, R_OK) != 0)
            goto error;
        rept_fd = open(fname, O_RDONLY);
        if (rept_fd < 0)
            goto error;
        if (fstat(rept_fd, &buffer) != 0)
            goto error;
        if (close(rept_fd) != 0)
            goto error;
        if (orig_inode != buffer.st_ino)
            goto error;
        if (orig_device != buffer.st_dev)
            goto error;
        /* If generation numbers are available, do a similar check for buffer.st_gen. */
    }
    return fd;
error:
    close(fd);
    close(rept_fd);
    return -1;
}
```

**Figure 3: Dean and Hu’s k-Race algorithm [4]. An attacker must win 2k + 1 races to defeat this algorithm.**

To see how this works, consider an attacker trying to defeat k-Race. After the victim makes the first access(2) call, the attacker must switch symlinks so that, when the victim calls open(2), the given filename points to a protected file. After the first call to open(2), the attacker has tricked the victim into opening a secret file, but the k-Race algorithm forces the attacker to continue racing with the victim. The victim next performs another call to access(2). The attacker must race to switch the symlink to point to a public file, or this access(2) call will not succeed. Next, the victim calls open(2) again and uses fstat(2) to verify that the resulting file descriptor is a handle on the same file as the result of the first call to open(2). For this test to succeed, the attacker must race to switch the symlinks.