### Issue Submission

- [X] Bug Report
  - Please search GitHub for a similar issue or PR before submitting.
- [ ] Feature Request
- [ ] Support Request
  - For support requests, please refer to: https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question

### Current Behavior
After upgrading from Angular 2.2.1 to 2.4.1, the `loadChildren: () => Module` syntax in routes no longer functions as expected. Prior to the upgrade, I was able to use this construction to delegate certain routes to external modules without employing lazy loading. Instead, I used `loadChildren` to logically separate parts of my application.

**Error in Console:**
```
Uncaught TypeError: Cannot convert undefined or null to object
```

This error is thrown in the following code block:
```javascript
ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
    var parentCtor = Object.getPrototypeOf(typeOrFunc.prototype).constructor;
    var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
    var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
    return parentAnnotations.concat(ownAnnotations);
};
```

The error occurs on the second line, where `typeOrFunc` is a `() => Module` and does not have a `prototype` property.

### Expected Behavior
Before the upgrade, the `loadChildren: () => Module` syntax worked correctly, allowing me to navigate between modules without any errors.

### Minimal Reproduction
A minimal reproduction of the problem can be found in the following repository:
- **Repository:** https://github.com/peku33/angular2-dependency-injection-failure

### Motivation / Use Case
I want to use `loadChildren()` to logically separate parts of my application. I am not using lazy loading, but rather using this approach to organize my application's structure.

### Environment
- **Node Version:** v7.2.0
- **NPM Version:** 3.10.9
- **Angular Version:** 2.4.1
- **Webpack Version:** 1.14.0
- **Browser:** Chrome, Firefox
- **Language:** TypeScript 2.1.4, ES6

### Additional Information
- The issue persists across both Chrome and Firefox browsers.
- The `loadChildren: () => Module` syntax was working as expected in Angular 2.2.1.