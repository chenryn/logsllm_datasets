the composited display and the virtual buttons in the top
right corner.
The CDDC can render arbitrarily complex user interfaces
that allow a user to communicate with and control aspects
of the CDDC.
4.4 Trusted Computing Base
Our design philosophy was to minimise the size and com-
plexity of the trusted components, allowing us to focus on
their trustworthiness, and enforce an appropriate informa-
tion ﬂow policy – non-interference between the separate do-
mains. The minimal trusted computing base of the CDDC
consists of a composition module and a switch for the HID
data. We also use replication and isolation of components,
and enforced unidirectional data ﬂows to help achieve the
desired non-interference property.
Minimising this trusted computing base, limits the attack
surface for both malicious software and hardware attacks.
Limiting the trusted component to a single FPGA allows
speciﬁc Hardware Trojan countermeasures to be applied.
4.4.1 Trusted Composition
The correct composition and decoration of window regions
is critical for the integrity of the CDDC. A user must be able
to discern which domain they are currently interacting with.
By decorating all identiﬁed content from every domain, cor-
rectly ordering the domains, and displaying the active do-
main banner a user can always be sure of the current context.
Whilst window decoration is not critical to ensuring this, it
aids the user against potential spooﬁng attacks, and as such
it must operate correctly.
The position of the cursor must also be accurately ren-
dered to ensure a users actions are correctly enacted.
Failure of the decoration, active banner or cursor render-
ing can result in a compromise of the CDDC’s security. A
user may either unwittingly perform incorrect actions, or
perform actions in an incorrect domain – risking both the
integrity and conﬁdentiality protections aﬀorded by a cor-
rectly operating CDDC.
The window position inputs are not trusted, however the
identiﬁed window positions are always correctly decorated.
Attacks against these positions could cause user confusion.
The active domain banner combined with the decoration
should alert users to potential issues. Possible attacks are
explored later in Section 7.3.
The trusted code for the ﬁrmware to implement the com-
position, including the on-screen display and cursor render-
ing is around 150 lines of VHDL for the prototype described
in Section 5.2.
4.4.2 Trusted Switch
The HID switch is trusted to direct the key strokes and
cursor position to the currently active domain. Failure of
this switch could compromise the conﬁdentiality of data as-
sociated with the underlying domains. The trusted code for
the ﬁrmware to implement the switch is only a couple of
lines of VHDL.
4.4.3 Failsafe Architecture
We maintain separation between the inputs and replicate
video processing up until the data is composited – mean-
ing data is only mixed in the trusted components. We en-
force undirectionality constraints on the input video streams
and the output HID data in the hardware. Whilst there
are no generic processing elements that could take advan-
tage of bidirectional channels, these hardware-based data
diodes provide failsafe mechanisms in the architecture, and
also provide primitives upon which we can model and reason
about the security of the CDDC.
The underlying unidirectional nature of the input and out-
put streams means there is little impact of these data diodes.
The dynamic information ﬂow policy we desire is: informa-
tion will only ﬂow from the keyboard or mouse input to a
single (active) domain at any one time; and no information
will ﬂow between domains.
The integrity of the CDDC relies on the compositor being
trusted to correctly: apply domain decorations, maintain
domain ordering, render the active domain banner, main-
tain and render cursor position, and interpret some cursor
interactions, e.g., window-based domain switching.
When correctly operating, the CDDC can protect the in-
tegrity and conﬁdentiality of user actions to an equivalent
level of a single-level secure system.
5. PROTOTYPE
5.1 Domain Software
Untrusted domain-side software identiﬁes graphical win-
dows to be composited by using standard Windows API
calls. This list includes the application windows, task bars,
pop-up windows, dialogue boxes, menus, desktop icons, and
tool tips. The list is processed to remove duplicates and
some items fully enclosed within other windows (e.g., some
tool-tips, dialogue boxes and menus).
The domain software reserves the top portion of the dis-
play, e.g., the top 50 lines of the screen. The presentation
order (z-order), location, and size of each window is encoded
into pixel values and sent in-band within the digital display
data to the CDDC by drawing directly to the desktop can-
vas in the reserved space. Other windows are prevented
from being located in this area, stopping the in-band infor-
mation being obscured, and also preventing windows from
residing underneath the trusted banner. For similar reasons,
the domain-side software also hides the cursor. An exam-
ple of the domain software and a close-up of the in-band
information is shown in Figure 4.
Figure 4: In-band encoded window information
A deﬁned format including a header and checksum pro-
vides for reliable in-band communications.
The CDDC extracts the in-band information for each do-
main, allowing it to operate on the identiﬁed window re-
gions. The CDDC also renders the top portion of the out-
put display with the trusted banner indicating the currently
active domain, obscuring the in-band communications from
the user’s perspective.
Having all domains running the same operating environ-
ment (e.g., Windows 7) at the same resolution, aids the in-
tegrated look and feel of the CDDC. If the task bars and
desktop icons are in the same positions for the diﬀerent do-
mains, then only the elements for the active domain are
displayed and decorated, with the other elements obscured
in the composition; providing a level of cognitive integration
and uniformity when interacting with the diﬀerent domains.
This circumstance is not uncommon with many large enter-
prises deploying a standard operating environment.
5.2 Hardware
We developed a hardware prototype, Figure 5, that ac-
cepts three displayport inputs, operating up to 1920x1200
resolution and outputs a composited display at 1920x1200
resolution. The hardware also accepts a single USB key-
board and mouse input and switches the output to any of
the three domains. The composition, control, and switching
is performed in a Xilinx Kintex 7 FPGA.
Figure 5: Displayport hardware prototype
5.2.1 Architecture
The natural decoupling between the keyboard and mouse
data, and the display data allows separate processing chains
for each. Figure 6 shows the very simple hardware architec-
ture. Three displayport input streams ﬂow separately into
an FPGA for processing, composition, and output on a sin-
gle displayport output. The keyboard and mouse are input
through USB host interfaces, which connect to the FPGA
via a Serial Peripheral Interface (SPI) link. The keyboard
and mouse are output to each domain through a USB client
interface, which also connects to the FPGA via an SPI link.
Figure 7 shows the ﬁrmware architecture of the modules
contained in the FPGA. The display inputs and keyboard
and mouse outputs are unidirectional and the hardware en-
forces this unidirectionality within the FPGA logic.
Isolating the input video paths and output USB paths al-
lows the TCB to be kept simple. Any malicious action in
these paths could also occur on the single-level secure do-
mains, hence they are not considered part of the TCB. The
TCB consists of the compositor, HID switch, video trans-
mitter, mouse SPI interface, and the unidirectional links.
The keyboard interface is not trusted and cannot aﬀect the
operation of the compositor.
5.2.2 Cursor Control
The CDDC rendered desktop cursor is the only element
that crosses between the display composition and the in-
put devices. It is the users actions through the cursor that
uniﬁes the trusted composition and the trusted switching to
trimming the original identiﬁed window regions if necessary.
In our prototype the decoration was 4 pixels wide. Pixel
processing then follows the pipeline shown in Figure 8.
Figure 8: Pixel processing pipeline
Firstly, for every pixel in each domain frame, hardware
comparators compare the current pixel raster location with
the stored window and decoration regions for that domain,
creating an intermediate decorated pixel output for each do-
main. This decorated pixel contains either: original win-
dowed content; domain decoration colour; or no content.
The z-order of the windows within a domain is important
in correctly applying decorations, the algorithm used is in-
cluded in Appendix A for reference.
The intermediate pixel values are then combined together
to form the composited output. The output is generated
based on the domain ordering and the existence of content
at a raster pixel location, giving priority to the domains
based on their ordering:
In the ﬁnal pipeline step, the CDDC adds its generated
content, including the active domain banner, virtual but-
tons, and the cursor.
For regions of the composited output that contain no pixel
information, i.e., no windowed domain content, no decora-
tion content, and no CDDC generated content, the compos-
itor renders the background of the currently active domain
greyed out by pixel modiﬁcation. Greying out the back-
ground can prevent certain spooﬁng attacks where a do-
main attempts to render its own decorated content without
reporting its window location.
5.2.4 Domain Switching
Seamless domain switching underpins the intuitive inter-
face provided by the CDDC. On startup the CDDC deﬁnes
and composites the domains in a speciﬁed order. The do-
main order can be changed by clicking on content or deco-
ration from another domain, clicking on a CDDC generated
virtual button, or pressing a physical button corresponding
to a diﬀerent domain. When a domain switch occurs, the
new domain becomes the active domain and the ordering of
all other domains remains the same. Composition ordering
is updated at the start of the next video frame.
5.2.5 HID Switching
USB keyboard and mouse events generated by the trusted
input devices are converted into unidirectional serial streams
by FTDI VNC2 USB integrated circuits.
To facilitate responsive domain switching, a separate USB
proxy device maintains a continual USB keyboard and USB
mouse connection with each domain, similar to [20], us-
ing a Cypress PSoC acting as a serial to USB converter.
Unmodiﬁed keyboard packets, and updated mouse packets
are exclusively directed to the proxy for the currently ac-
Figure 6: Hardware block diagram
Figure 7: Firmware block diagram
create the converged desktop experience – the cursor crosses
the trust boundary between the domains. The cursor also
provides user control over the MLS actions of the CDDC.
Given the importance of the cursor, its position is controlled
and rendered by the CDDC, informed by the physically con-
nected pointing device.
5.2.3 Composition
Xilinx displayport IP cores handle the display input and
output from the FPGA. The input streams are buﬀered in
independent, 3-frame cyclic buﬀers to compensate for video
frequency variations, prevent I/O contention, and allow syn-
chronous processing of the input display streams.
Frames are then synchronously processed in real-time in
a raster fashion. Whilst processing the top portion of a
frame (the bit corresponding to the position of the trusted
banner), the identiﬁed windows regions are extracted from
the pixel data and stored separately for each domain.
In
our prototype, this region of the display was 50 pixels high,
corresponding to 50 lines of video.
The compositor module also creates and stores separate
decoration regions representing the extents to be decorated;
tive domain. In this manner domains are unaware of being
connected or disconnected to the real keyboard and mouse.
When a domain switch occurs, the CDDC ensures any ex-
isting keystrokes are ﬂushed to the currently active domain
before switching to the newly active domain.
The USB mouse proxy is reported as an absolute position-
ing device, this ensures the cursor is positioned correctly in
the active domain when a domain switch occurs.
5.3 Software Emulator
A software emulator of the CDDC has been developed. It
connects to multiple desktop computers via the VNC proto-
col and composites the received video output. The keyboard
and mouse are logically switched between the domains as re-
quired. The software emulator provides a base for further
experimentation and reﬁnement of composition algorithms.
6. FORMAL ANALYSIS
Formal modelling in Isabelle/HOL [12] was used to exer-
cise the design early in the development, identifying data
structures, exposing assumptions and exploring weaknesses.
The emphasis for this work was to provide timely input, and
thus the system’s design was modelled at a relatively high
level of abstraction and a global conﬁdentiality property in
the style of noninterference [7] was proved.
Even at this relatively coarse level of abstraction, however,
the resulting security property captures a number of poten-
tial channels in the system. These include, for instance,
buﬀered keyboard data from the current domain that needs
to be ﬂushed (i.e. cleared) when switching to a diﬀerent do-
main to prevent information ﬂows due to residual data, as
well as potential information ﬂows arising from when the
user chooses to switch between domains.
In this section, we give just a ﬂavour of the overall struc-
ture and intuition of the formal model and the security prop-
erty proved for it. The model is formally deﬁned as an event
system comprising a number of concurrently executing com-
ponents, and the security property comes from Murray et
al.’s value-dependent noninterference formulations [11].
6.1 Formal Model
Let each of the external domains (i.e. the domain-side
computers, each of whose video output is plugged into the
CDDC and each of which receives its keyboard and mouse
input from the CDDC) be denoted by a unique natural num-
ber between 1 and the number N of such external domains,
and let extdom = {1. . . N}. Then the formal model com-
prises the components: Keyboard, Mouse, CDDC and WSd
for each d ∈ extdom.
For the sake of brevity, in this presentation we restrict
our attention to those parts of the model that deal with key-
board and mouse input processing, including domain switch-
ing. The full formal model also captures the processing of
video frames, including their composition and rendering of
CDDC-generated content, like the mouse cursor, and the
banner across the top of the screen indicating the currently
active domain and the trusted window decorations. How-
ever, these operations pose little security threat, given the
unidirectional nature of the information streams involved.
Hence, they are modelled abstractly and the conﬁdentiality
property says less about them.
Figure 9 depicts the component decomposition of the for-
mal model. The CDDC component models the behaviour of
Figure 9: Relevant components of the CDDC formal
model.
the internal keyboard/mouse input processing loop of the
CDDC and its interaction with the other components. Its
internal state includes dom ord the current external domain
ordering (the topmost domain of which is the currently ac-
tive domain): when a domain switch occurs, this ordering
is updated by putting the newly active domain on top. Its
state also includes a number of internal buﬀers, including
key buﬀer, a keyboard buﬀer, and mouse buﬀer, a mouse
buﬀer, as well as output buﬀers outputd for each of the exter-
nal domains d ∈ extdom. Finally, in this simpliﬁed presenta-
tion, its state includes the framebuﬀer aug, which holds the
augmented display data generated by the CDDC, including
the top banner that indicates to the user the currently ac-
tive domain. A system-wide invariant that we proved, and
is required for security to be proved, is that the topmost
domain in dom ord agrees with the currently active domain
as indicated by aug. We return to the CDDC component
shortly.
Each WSd component models the untrusted domain-side
computers connected to the CDDC. Its internal state in-
cludes an input buﬀer inputd into which the CDDC com-
ponent places keyboard and mouse input data. A single
execution step for a WSd component has it read the next
item of data in the CDDC’s outputd buﬀer and copy it to
the inputd buﬀer, modelling the receipt of user input data