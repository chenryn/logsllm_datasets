  code *pcVar1;
  uint uVar2;
  uVar2 = FUN_0040b5c7();
  pcVar1 = *(code **)(uVar2 + 0xc);
  if (pcVar1 != (code *)0x0) {
    _guard_check_icall();
    (*pcVar1)();
  }
  FUN_00409f3e();
  pcVar1 = (code *)swi(3);
  (*pcVar1)();
  return;
}
// Library Function - Single Match
// Name: _strcpy_s
// Library: Visual Studio 2015 Release
errno_t __cdecl _strcpy_s(char *_Dst,rsize_t _SizeInBytes,char *_Src)
{
  char cVar1;
  errno_t *peVar2;
  char *pcVar3;
  errno_t eVar4;
  if ((_Dst != (char *)0x0) && (_SizeInBytes != 0)) {
    if (_Src != (char *)0x0) {
      pcVar3 = _Dst;
      do {
        cVar1 = (_Src + -(int)_Dst)[(int)pcVar3];
        *pcVar3 = cVar1;
        pcVar3 = pcVar3 + 1;
        if (cVar1 == 0) break;
        _SizeInBytes = _SizeInBytes - 1;
      } while (_SizeInBytes != 0);
      if (_SizeInBytes != 0) {
        return 0;
      }
      *_Dst = 0;
      peVar2 = (errno_t *)FUN_00407f40();
      eVar4 = 0x22;
      goto LAB_00409f09;
    }
    *_Dst = 0;
  }
  peVar2 = (errno_t *)FUN_00407f40();
  eVar4 = 0x16;
LAB_00409f09:
  *peVar2 = eVar4;
  FUN_00407e83();
  return eVar4;
}
void FUN_00409f3e(void)
{
  code *pcVar1;
  int iVar2;
  BOOL BVar3;
  iVar2 = FUN_0040f2dd();
  if (iVar2 != 0) {
    FUN_0040f32d(0x16);
  }
  if ((DAT_0041e0f0 & 2) != 0) {
    BVar3 = IsProcessorFeaturePresent(0x17);
    if (BVar3 != 0) {
      pcVar1 = (code *)swi(0x29);
      (*pcVar1)();
      return;
    }
    ___acrt_call_reportfault(3,0x40000015,1);
  }
  FUN_004097d4(3);
  pcVar1 = (code *)swi(3);
  (*pcVar1)();
  return;
}
// Library Function - Single Match
// Name: _calloc
// Library: Visual Studio 2015 Release
void * __cdecl _calloc(size_t _Count,size_t _Size)
{
  LPVOID pvVar1;
  pvVar1 = __calloc_base(_Count,_Size);
  return pvVar1;
}
// Library Function - Single Match
// Name: _wcsncmp
// Library: Visual Studio 2015 Release
int __cdecl _wcsncmp(wchar_t *_Str1,wchar_t *_Str2,size_t _MaxCount)
{
  if (_MaxCount != 0) {
    while (((_MaxCount = _MaxCount - 1, _MaxCount != 0 && (*_Str1 != 0)) && (*_Str1 == *_Str2))) {
      _Str1 = (wchar_t *)((ushort *)_Str1 + 1);
      _Str2 = (wchar_t *)((ushort *)_Str2 + 1);
    }
    return (uint)(ushort)*_Str1 - (uint)(ushort)*_Str2;
  }
  return _MaxCount;
}
// Library Function - Single Match
// Name: __calloc_base
// Library: Visual Studio 2015 Release
LPVOID __cdecl __calloc_base(uint param_1,uint param_2)
{
  int iVar1;
  LPVOID pvVar2;
  undefined4 *puVar3;
  SIZE_T dwBytes;
  if ((param_1 == 0) || (param_2 > bVar4 | (DAT_0041e004 ^ *puVar1) > bVar4 | -1 << 0x20 - bVar4) ^ DAT_0041e004;
        pFVar2 = (FARPROC)0x0;
      }
      else {
        uVar3 = FUN_004022fb((uint)pFVar2);
        *puVar1 = uVar3;
      }
    }
  }
  return pFVar2;
}
int FUN_0040a279(undefined4 param_1)
{
  FARPROC pFVar1;
  int iVar2;
  undefined4 uVar3;
  pFVar1 = FUN_0040a1f6(0x1c,"AppPolicyGetProcessTerminationMethod",(int *)&DAT_00418464,
                        (int *)"AppPolicyGetProcessTerminationMethod");
  if (pFVar1 == (FARPROC)0x0) {
    iVar2 = -0x3ffffddb;
  }
  else {
    uVar3 = 0xfffffffa;
    _guard_check_icall();
    iVar2 = (*pFVar1)(uVar3,param_1);
  }
  return iVar2;
}
void FUN_0040a2b9(int param_1,DWORD param_2,PCNZWCH param_3,int param_4,PCNZWCH param_5,int param_6,
                 undefined4 param_7,undefined4 param_8,undefined4 param_9)
{
  code *pcVar1;
  LCID Locale;
  pcVar1 = (code *)FUN_0040a0df();
  if (pcVar1 == (code *)0x0) {
    Locale = FUN_0040a4bd(param_1,0);
    CompareStringW(Locale,param_2,param_3,param_4,param_5,param_6);
  }
  else {
    _guard_check_icall();
    (*pcVar1)(param_1,param_2,param_3,param_4,param_5,param_6,param_7,param_8,param_9);
  }
  return;
}
void FUN_0040a316(undefined4 param_1)
{
  FARPROC pFVar1;
  pFVar1 = FUN_0040a1f6(3,"FlsAlloc",(int *)&DAT_004183c0,(int *)"FlsAlloc");
  if (pFVar1 == (FARPROC)0x0) {
    TlsAlloc();
  }
  else {
    _guard_check_icall();
    (*pFVar1)(param_1);
  }
  return;
}
void FUN_0040a355(DWORD param_1)
{
  FARPROC pFVar1;
  pFVar1 = FUN_0040a1f6(4,"FlsFree",(int *)&DAT_004183d4,(int *)"FlsFree");
  if (pFVar1 != (FARPROC)0x0) {
    _guard_check_icall();
    (*pFVar1)(param_1);
    return;
  }
                    // WARNING: Could not recover jumptable at 0x0040a38e. Too many branches
                    // WARNING: Treating indirect jump as call
  TlsFree(param_1);
  return;
}
void FUN_0040a394(DWORD param_1)
{
  FARPROC pFVar1;
  pFVar1 = FUN_0040a1f6(5,"FlsGetValue",(int *)&DAT_004183e4,(int *)"FlsGetValue");
  if (pFVar1 != (FARPROC)0x0) {
    _guard_check_icall();
    (*pFVar1)(param_1);
    return;
  }
                    // WARNING: Could not recover jumptable at 0x0040a3cd. Too many branches
                    // WARNING: Treating indirect jump as call
  TlsGetValue(param_1);
  return;
}
void FUN_0040a3d3(DWORD param_1,LPVOID param_2)
{
  FARPROC pFVar1;
  pFVar1 = FUN_0040a1f6(6,"FlsSetValue",(int *)&DAT_004183f8,(int *)"FlsSetValue");
  if (pFVar1 != (FARPROC)0x0) {
    _guard_check_icall();
    (*pFVar1)(param_1,param_2);
    return;
  }
                    // WARNING: Could not recover jumptable at 0x0040a40f. Too many branches
                    // WARNING: Treating indirect jump as call
  TlsSetValue(param_1,param_2);
  return;
}
void FUN_0040a415(LPCRITICAL_SECTION param_1,DWORD param_2,undefined4 param_3)
{
  FARPROC pFVar1;
  pFVar1 = FUN_0040a1f6(0x12,"InitializeCriticalSectionEx",(int *)&DAT_0041840c,
                        (int *)"InitializeCriticalSectionEx");
  if (pFVar1 == (FARPROC)0x0) {
    InitializeCriticalSectionAndSpinCount(param_1,param_2);
  }
  else {
    _guard_check_icall();
    (*pFVar1)(param_1,param_2,param_3);
  }
  return;
}