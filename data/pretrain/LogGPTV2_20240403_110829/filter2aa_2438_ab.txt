# 服务器限制（Apache）

- 使用 `Header` 函数设置响应代码：
  ```php
  Header($_SERVER["SERVER_PROTOCOL"] . " $status_code");
  ```

- 测试浏览器自动处理情况。
- 创建 PHP 文件以设置状态码，例如：`http://c22.cc/POC/respcode.php?code=XXX`

## 浏览器及其状态码处理习惯

### 3.2 状态码处理

- 大多数情况下，浏览器对大多数响应的处理类似于 200 OK 的处理方式。
- **HTML 响应**：几乎所有状态码都能被浏览器正确渲染。
- **iFrames**：对于 IE 有一些特殊情况，但其他浏览器与 HTML 处理方式相同。
- **JavaScript/CSS**：
  - 受限的状态码支持。
  - 对 3XX 支持有限。
  - Chrome 是一个例外，不支持 4XX/5XX 状态码。

### 3.3 状态码和头部字段

- 即使 RFC 规定特定状态码必须有相应的头部字段，并不意味着它必须如此。
  - **重定向代码 (301-304, 307)**：没有 Location 头部字段，则不会发生重定向。
  - **401 Unauthorized**：没有 WWW-Authenticate 头部字段，则不会弹出认证提示。
  - **407 Proxy Authentication Required**：没有 Proxy-Authenticate 头部字段，则不会弹出认证提示。

- 即使 RFC 规定特定状态码不应有相应的头部字段，并不意味着它不能如此。
  - **300 Multiple Choices**：带有 Location 头部字段时，Firefox 和 IE6 会跟随重定向，而 Chrome 不会。
  - 需要进一步研究这一方向。

### 每个浏览器的处理方式略有不同

- 利用这些差异，我们可以做些什么？

## 目标

- 每个浏览器处理方式不同。
- 利用已知条件：
  - 已处理的状态码。
  - 未处理的状态码。
  - 浏览器的特殊行为。

### 4.1 浏览器指纹识别

- **Firefox**：不加载返回 300 'Multiple Choices' 状态码的 JavaScript。
- **Chrome**：加载返回 307 'Temporary Redirect' 状态码的 JavaScript。
- **Internet Explorer**：加载返回 205 'Reset Content' 状态码的 JavaScript。

### 4.2 代理检测

- **Chrome** 处理代理配置的方式与其他浏览器不同。
  - 407 状态码不会被渲染，除非设置了 HTTP 代理。
  - 允许我们检测是否设置了 HTTP 代理，但无法检测具体是哪个代理。

### 4.3 代理漏洞

- **Privoxy 3.0.20 (CVE-2013-2503)**：当收到带有 Proxy-Authenticate 头部字段的 407 状态码时，用户会被提示输入用户名和密码，这可能会导致凭证泄露。

## 综合应用

### 5.1 打破爬虫工具

- **简化视图**：爬虫访问目标 URL，读取链接和功能，测试它们，如果为真则继续。
- 如果所有响应都是 200、404 或 500，会导致什么问题？
  - **200 OK**：永无止境的爬虫。
  - **404 Not Found**：无法找到网站。
  - **500 Internal Server Error**：Skipfish 爬虫不高兴。

### 5.2 虚假正负结果

- 大多数扫描器使用状态码进行初步匹配。
- 如果所有响应都是 200、404 或 500，会发生什么？
- **解决方案**：使用所有浏览器都接受为内容的状态码。

### 漏洞基线

- **w3af**：信息点 → 79，漏洞 → 

通过以上方法，我们可以利用浏览器的差异来实现指纹识别、代理检测以及干扰扫描工具。