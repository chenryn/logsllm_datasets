# Efficient Computational Oblivious Transfer Using Interactive Hashing

**Authors:** Kirill Morozov and George Savvides

## Abstract
We present two protocols for reducing oblivious transfer (OT) to the security of trapdoor permutations and to the hardness of certain coding problems, respectively. The first protocol is the most efficient known to date, while the second one serves as a theoretical proof-of-concept. Our constructions leverage the power of Interactive Hashing (IH). The first protocol can be seen as a simple modification of the well-known OT construction by Even, Goldreich, and Lempel (1985), where a receiver must send a random domain element to a sender through IH. Alternatively, our protocol can be viewed as a simple modification of the construction by Ostrovsky, Venkatesan, and Yung (1993), in which the players substitute a one-way permutation with a trapdoor permutation. We use a similar approach to derive a second OT protocol based on coding assumptions related to the security of the McEliece cryptosystem. In this second construction, the receiver inputs a public key into IH while privately keeping the corresponding secret key. Two different versions of IH are used: the computationally secure version in the first protocol, and the information-theoretically secure version in the second.

## Categories and Subject Descriptors
- **F.m [Theory of Computation]:** Miscellaneous—Distributed computation
- **E.3 [Data]:** Data Encryption—Public key cryptosystems
- **E.4 [Data]:** Coding and Information Theory—Error-correcting codes

## General Terms
- Security
- Theory

## Keywords
- Oblivious transfer
- Interactive hashing
- Trapdoor permutations
- McEliece cryptosystem

## 1. Introduction
Oblivious transfer (OT) is a fundamental cryptographic primitive, as it implies secure two- (and multi-) party computation [11]. Initially proposed in several forms [25, 22, 8], all variants have been shown to be equivalent [4]. We focus on the one-out-of-two (1-2) OT [8], a two-party primitive where a honest sender inputs two bits \( b_0, b_1 \) and a honest receiver chooses to obtain one of them, \( b_c \), by inputting his choice bit \( c \). A cheating sender must remain ignorant of \( c \), while a cheating receiver should not learn both bits. In this work, we consider a version of 1-2 OT where both inputs and the choice bit are uniformly random.

This can be done without loss of generality due to the very efficient randomized self-reduction of OT [1, Section 3.2], which requires only 1 round, 3 bits of communication, and the computation of 3 bitwise exclusive-ors. The reduction is information-theoretic, requiring no additional assumptions.

### 1.1 Interactive Hashing
Interactive hashing (IH) has numerous applications in cryptography, including bit commitment, zero-knowledge, and unconditional oblivious transfer protocol design [23, Sec. 2.1]. IH is a two-party primitive where a honest sender inputs a string \( w \in \{0, 1\}^n \), and both parties obtain on the output \( (w, w') \) where \( w' \in_R \{0, 1\}^n \setminus \{w\} \). The hiding property ensures that a cheating receiver cannot determine which of \( (w, w') \) was the input. The binding property guarantees that at least one of \( (w, w') \) is effectively beyond the control of a cheating sender.

IH comes in two versions: computationally binding (C-IH) [21] and information-theoretic binding (IT-IH) [2]. Hiding is information-theoretic in both versions. Both protocols are similar, with the main difference being in the formulations of security properties and their respective proofs.

### 1.2 Related Work
C-IH has been used to implement OT from one-way permutations (OWP) by Ostrovsky, Venkatesan, and Yung [21] (referred to as the OVY-protocol). However, in that work, one of the honest players had to invert OWP, implying computational strength. In contrast, our work allows both honest players to be bound to probabilistic polynomial time (PPT) by strengthening the assumption to trapdoor permutations (TDP).

OT from TDP has been considered in several works [8, 12], with protocols designed to be secure against passively cheating players. Protection against active attackers is achieved using secure compilers [11, 13].

OT from coding-based assumptions was recently constructed by Dowsley et al. [6] and Kobara et al. [16]. The work [6] is based on standard assumptions, while [16] uses a non-standard assumption on the hardness of decoding partly random codes.

### 1.3 Our Contribution
We explore the connection between oblivious transfer and interactive hashing by constructing two simple protocols using the two versions of IH and corresponding computational assumptions. Both protocols are proven secure in the standalone model against active attacks.

Our first protocol can be viewed as a simple modification of either:
1. The EGL-protocol [8], where a receiver sends a random domain element to a sender using C-IH.
2. The OVY-protocol [21], where the players replace OWP with TDP. We require the domain of TDP to be efficiently representable in binary, ensuring each encoding is valid.

The communication cost of our first protocol is \( O(n^2) + F \), where \( n \) is the size (in bits) of the TDP's domain and \( F \) is the size of the representation of the TDP's index. This cost is comparable to [21], which is \( O(n^2) \). Both protocols compute TDP (or OWP) three times and \( n-1 \) scalar products of \( n \)-bit strings. Additionally, our protocol inverts TDP once using its trapdoor, while [21] assumes the sender inverts OWP. Both protocols have \( n \) rounds, making them comparably efficient, but our scheme allows both honest players to be PPT. We also achieve a nearly round-optimal OT protocol with information-theoretic receiver-security based on TDP in a black-box manner, with a round complexity of \( n \) and a lower bound of \( \Omega(n / \log n) \) [14, Sec. 7.3].

The compiler by Haitner [13] requires the receiver in passively-secure OT to commit to his random coins, which must be at least the size of two domain elements (i.e., \( 2n \)). For information-theoretic receiver-security, statistically hiding commitments must be used. The most efficient construction [15] uses C-IH, making our protocol more efficient than the straightforward application of the Haitner's compiler [13] to the EGL protocol.

Our second protocol extends this approach by constructing OT with computational security for both players using coding-based assumptions underlying the security of the McEliece public key cryptosystem (PKC) [18]. In this protocol, the receiver sends a public key to the sender using IT-IH, while privately keeping the corresponding secret key. To prove sender-security, we assume that the codes that can work as public keys for the McEliece-type cryptosystem do not constitute a substantial (non-negligible) fraction of all linear codes, a plausible assumption given the few known candidates [7, Sec. 1.1].

With \( n \) as the length of the code, our second protocol uses \( O(n^2) \) rounds, has a communication cost of \( O(n^4) \), and a computation cost of two McEliece encryptions and one decryption plus \( O(n^2) \) scalar products of \( O(n^2) \)-bit strings. In comparison, both [6] and [16] have a communication cost of \( O(n^2 \log n) \), with the quadratic factor from sending McEliece public keys and the logarithmic factor from the cut-and-choose technique in [6] and zero-knowledge proof in [16]. The computation cost of the protocols in [6] and [16] is higher, making our protocol more efficient.