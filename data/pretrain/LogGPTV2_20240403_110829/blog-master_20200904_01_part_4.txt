          |  {"id":91068027,"repo":752,"src":753,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":5,"ts":"2020-10-10T23:28:35.064065"},   +    
          |  {"id":108889953,"repo":129,"src":130,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":1,"ts":"2020-10-11T11:30:04.680044"},  +    
          |  {"id":56234471,"repo":650,"src":651,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":2,"ts":"2020-10-11T17:25:42.849833"},   +    
          |  {"id":115533593,"repo":263,"src":264,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":2,"ts":"2020-10-11T17:30:38.587551"},  +    
          |  {"id":123231720,"repo":108,"src":109,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":3,"ts":"2020-10-12T16:31:15.64879"},   +    
          |  {"id":118615053,"repo":5,"src":6,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":10,"ts":"2020-10-13T09:30:53.436333"},     +    
          |  {"id":118059286,"repo":348,"src":349,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":6,"ts":"2020-10-14T14:30:50.738637"},  +    
          |  {"id":29969289,"repo":694,"src":695,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":3,"ts":"2020-10-14T19:23:32.880148"},   +    
          |  {"id":59308401,"repo":514,"src":515,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":1,"ts":"2020-10-14T22:25:58.158332"},   +    
          |  {"id":64955133,"repo":492,"src":493,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":8,"ts":"2020-10-15T01:26:26.624283"},   +    
          |  {"id":120735166,"repo":380,"src":381,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":9,"ts":"2020-10-15T14:31:03.652749"},  +    
          |  {"id":82500025,"repo":289,"src":290,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":5,"ts":"2020-10-15T19:27:52.677637"},   +    
          |  {"id":108609107,"repo":251,"src":252,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":2,"ts":"2020-10-16T02:30:03.317684"},  +    
          |  {"id":137212562,"repo":76,"src":77,"maotai_id":"ff47908aafddd72d4e655016520d277e","ops":6,"ts":"2020-10-16T03:32:23.928613"}]    
```    
## 设计2    
-- 区块链结构1     
```    
create table tbl_maotai1 (    
  maotai_id text primary key,  -- 酒唯一标示    
  status jsonb,  -- 所有历史变更记录    
  ts timestamp  -- 修过时间     
);    
```    
```    
vi t1.sql    
\set repo random(1,999)    
\set maotai_id random(1,1000000)    
\set ops random(0,10)    
insert into tbl_maotai1 values (md5(:maotai_id::text), to_jsonb(row(nextval('seq'), :repo, :repo+1, md5(:maotai_id::text), :ops, clock_timestamp()+((random()*1000)::int::text||' hour')::interval )::tbl), clock_timestamp())     
on conflict (maotai_id)     
do update set status =  jsonb_build_array(tbl_maotai1.status , excluded.status), ts=excluded.ts;    
```    
## 设计3    
-- 区块链结构2    
```    
create table tbl (  -- 主类型结构 , 也可以使用create type代替之    
  id int8 primary key,  -- 主键    
  repo int,  -- 仓库ID    
  src int, -- 来源ID    
  maotai_id text, -- 酒二维码     
  ops int, -- 操作(入库非0, 出库0)     
  ts timestamp -- 操作时间     
);    
create sequence seq;    
```    
主数据结构    
```    
create table tbl_maotai2 (    
  maotai_id text primary key,  -- 酒唯一标示    
  status tbl[],  -- 所有历史变更记录    
  ts timestamp  -- 修过时间     
);    
```    
```    
vi t2.sql    
\set repo random(1,999)    
\set maotai_id random(1,1000000)    
\set ops random(0,10)    
insert into tbl_maotai2 values (md5(:maotai_id::text), array[row(nextval('seq'), :repo, :repo+1, md5(:maotai_id::text), :ops, clock_timestamp()+((random()*1000)::int::text||' hour')::interval )::tbl], clock_timestamp())     
on conflict (maotai_id)     
do update set status =  array_cat(tbl_maotai2.status , excluded.status), ts=excluded.ts;    
```    
```    
pgbench -M prepared -n -r -P 1 -f ./t2.sql -c 52 -j 52 -T 600    
```    
## 建议
采用方案1, 优势: 没有更新和删除, 不需要垃圾回收, 性能最好; 不限每瓶酒的操作次数.   
方案2,3缺陷: 更新会产生垃圾, 需要垃圾回收(当然如果更新的并发量在每秒1000量级别, 垃圾回收几乎没有任何影响). 每条记录跟踪所有的生命周期, 最大1GB每个字段, 极端情况下可能超过一个商品的可维持内容, 例如更踪100万次变更后可能会达到1GB.   
## 参考    
[《PostgreSQL 家族图谱、社交图谱、树状关系、藤状分佣、溯源、等场景实践 - 递归,with recursive query (有向无环 , 有向有环)》](../202003/20200329_01.md)      
[《PostgreSQL index include - 类聚簇表与应用(append only, IoT时空轨迹, 离散多行扫描与返回)》](../201905/20190503_03.md)      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")