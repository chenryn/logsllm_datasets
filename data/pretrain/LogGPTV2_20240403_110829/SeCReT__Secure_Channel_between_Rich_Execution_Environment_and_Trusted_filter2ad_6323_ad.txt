list of pre-authorized applications.
The session key should be used in a secure manner be-
cause simple operations can create copies of the key. We are
designing SeCReT libraries that help developers safely use the
session key. For instance, a SeCReT library should not copy
the key values to unprotected memory during message signing.
The library can achieve this by strictly using the general-
purpose registers that SeCReT can ﬂush out on every mode
switch.
12
We note that an alternate design could avoid using keys
and transfer data directly to the TEE using a secure buffer in
the memory area that is protected by SeCReT. Unfortunately,
this approach is limited by the the following implementation
challenges. First, the secure buffer approach requires more
protected memory pages, depending on the size of the mes-
sages that need to be transferred to the TEE. Second, because
the pages that SeCReT should protect can be dynamic during
the runtime of the application (e.g., the location, size, and
value of the data can change), more interactions between the
REE and the TEE may be required to update the information
appropriately.
Finally, to provide the TEE services to newly developed
applications, we must securely update the list of pre-authorized
applications. To this end, we can leverage the mechanism that
TrustZone-based DRM solutions utilize. In other words, we
can send an encrypted list outside of the device and safely
decrypt it inside TrustZone. Alternatively, we can also update
the list as part of a ﬁrmware-upgrade procedure that is cur-
rently available for updating the TEE resource on commercial
devices.
VIII. RELATED WORK
A. Active Monitoring
Active monitoring utilizes either trampoline code or hooks
implanted in the monitored system to redirect
the control
ﬂow to the monitoring code. Thus, active monitoring relies
on the protection of the trampolines and the monitoring code
to guarantee the event-driven nature and consistency of the
monitoring. The hypervisor was widely adopted to satisfy
this requirement because, in essence, it provides an isolation
between guest VMs. Furthermore, the hypervisor can control
and inspect the guest VMs because it is accorded a higher
privilege than the guest VMs. Lares [28] implants the tram-
poline code in a monitored VM and uses the hypervisor-layer
memory protection to prevent attackers from compromising
the trampolines. SIM [33] is similar to Lares in that it uses
trampolines to branch to the monitoring code. However, SIM
is focused more on efﬁciency. To this end,
locates the
monitoring code in an untrusted guest VM and removes the
involvement of the hypervisor during the transition between
the trampolines and the monitoring code. SecVisor [32] is a
tiny hypervisor that protects the kernel code by leveraging
hardware-memory protection. To protect the module code, it
hooks the kernel code to invoke SecVisor with a hypercall.
HookSafe [37] relocates thousands of kernel hooks into con-
tinuous memory and protects them with the page granularity.
Even though HookSafe aims to solve the problem related to
the protection-granularity gap, its effect is somewhat redundant
because it redirects or veriﬁes accesses to the hooks that are
done similarly with active monitoring.
it
On the other hand, TrustZone is also utilized to implement
active monitoring. TIMA [14], [27], [30] and SPROBES [19]
locate the monitoring code in TrustZone and implants the
trampoline in the kernel code in the REE to enforce the
integrity of the kernel’s static region. SeCReT can also be
regarded as a variety of active monitoring in TrustZone because
it implements trampolines and isolated access-control modules.
However, the purpose of SeCReT is to secure a communica-
tion channel, and this is clearly different from other works.
Moreover, SeCReT was implemented with the assumption that
the kernel’s static region is immutable due to the protection
provided by active monitoring.
B. Process-Data Protection
Several previous works aim to protect user processes
from the untrusted kernel. XOM [22] and XOMOS [23] are
hardware-based approaches — specially designed hardware
and a dedicated OS for XOM, respectively — enabling the
protection of secure processes by using cryptographic technol-
ogy. All code and data remains encrypted outside XOM, but
securely decrypted and executed during run-time in XOM.
A hypervisor and compiler have also been used as a
software-based approach. Overshadow [16] and InkTag [20],
both of which are implemented on hypervisors, encrypt and
decrypt the memory of user processes based on the context
switch. Overshadow introduces a Shim that communicates
with the hypervisor to interpose every mode switch between
a cloaked application and the OS. InkTag uses a trampoline
code similar to the Shim, and it also provide para-veriﬁcation
so that the untrusted OS veriﬁes its own behavior to some
degree. Virtual Ghost [17] uses compiler-based instrumentation
to prevent untrusted kernels from writing to or reading from
the protected memory area of the user process.
SeCReT, like previous work, attempts to protect the critical
component of the process, whether it is data or code. Securing
a communication channel also requires the interposition of
SeCReT at every mode switch. However, because it utilizes
an existing hardware component — namely, TrustZone — Se-
CReT does not require additional hardware or software stacks.
Furthermore, TrustZone basically ensures the conﬁdentiality of
the contents inside it, so we only focused on a way to reinforce
the access control to the resources in TrustZone. In the absence
of a direct channel, such as hypercall, SeCReT creates the
protocol that the user process can use to communicate with
TrustZone as directly as possible.
C. Trusted-Execution Environment
Isolating individual guest VMs, ensured by a hypervisor,
enables the TEE to be built on the hypervisor. Previous systems
[18], [28], [34], [35] that implement an external monitor on
separated VMs are examples of a TEE built on the hypervisor.
Intel’s SMM is an operating mode with special software, such
as ﬁrmware or a debugger, running with all normal execution
suspended. This is also regarded as a TEE, because any process
that runs in SMM is isolated from an attacker outside SMM.
HyperCheck [36] and HyperSentry [15] use SMM as a TEE to
securely run the monitoring code to check the integrity of the
hypervisor. Intel’s Software Guard Extensions (SGX) is similar
to TrustZone in that it provides separated memory regions from
the REE [26]. The isolated area, called an enclave, is protected
against all external software access, guaranteeing the security
of critical resources inside the enclave.
In addition to TIMA, Trusted Sensor [25] and Trusted
Language Runtime (TLR) [31] also leverage TrustZone as
a TEE. Trusted Sensor attempts to ensure that mobile ap-
plications read sensors securely in TrustZone. TLR enables
separating the critical part of a .NET mobile application and
runs it in TrustZone. These systems were implemented without
13
considering a secure communication channel. We believe that
SeCReT can help to reinforce the security of those systems.
IX. CONCLUSION
SeCReT is a framework that strengthens the security of the
communication channel between two domains, the REE and
the TEE built in TrustZone. To establish a secure channel,
SeCReT enables a legitimate process to use a session key
in the REE. The key is only readable at the moment the
legitimate process accesses the memory that is reserved for the
key assignment. To protect the key, SeCReT interposes with
every switch between user mode and kernel mode, verifying
the code’s integrity and the coarse-grained control ﬂow of the
process. To minimize the performance overhead, SeCReT’s
key-protection mechanism is activated only during the runtime
of the process that has permission to access TrustZone. As the
ﬁrst work to secure a communication channel in TrustZone,
we believe that SeCReT will not only regulate malicious
access to the critical resources, but also cooperate with existing
TrustZone-based security solutions such as TIMA.
ACKNOWLEDGMENT
We would like to thank our shepherd William Enck and the
anonymous reviewers for insightful comments and suggestions.
This research was supported by MOTIE (The Minister of
Trade, Industry and Energy), Korea, under the BrainScouting-
Program (HB609-12-3002) by the NIPA (National IT Promo-
tion Agency). This work was also sponsored by Agency for
Defense Development (ADD) under Grant No. UD140002ED
and the research project from SAMSUNG ELECTRONICS.
REFERENCES
the
motorola
bootloader,”
April
a
secure
Available:
2013.
[Online]. Available:
http://www.
technology: Building
2013.
http://blog.azimuthsecurity.com/2013/04/
“Architecture reference manual (armv7-a and armv7-r edition),” ARM
DDI C, vol. 406, 2008.
“cve-2013-3051,” April
cvedetails.com/cve/CVE-2013-3051/
“Unlocking
[Online].
unlocking-motorola-bootloader.html
“Arm fastmodels,” June 2014. [Online]. Available: http://www.arm.
com/products/tools/models/fast-models/
“Arm security
system using
trustzone technology,” Tech. Rep., June 2014. [Online]. Available:
http://infocenter.arm.com/help/topic/com.arm.doc.prd29-genc-009492c/
PRD29-GENC-009492C trustzone security whitepaper.pdf
“Arndale board,”
arndaleboard.org/wiki/index.php/Main Page
“Discretix,” June 2014. [Online]. Available: http://www.discretix.com/
products-solutions
“Model debugger for fast models,” Tech. Rep., June 2014. [Online].
Available: http://infocenter.arm.com/help/topic/com.arm.doc.dui0314i/
DUI0314I model debugger ug.pdf
“Proxama,” June 2014. [Online]. Available: http://www.proxama.com/
products-and-services/trustzone
“Sensepost,” June 2014. [Online]. Available: http://www.sensepost.
com/blog/9114.html
“Sierraware,”
June
openvirtualization.org/
June 2014.
[Online]. Available: http://www.
[Online]. Available:
http://www.
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
2014.
[12] W. A. Arbaugh, D. J. Farber, and J. M. Smith, “A secure and reliable
bootstrap architecture,” in Security and Privacy, 1997. Proceedings.,
1997 IEEE Symposium on.
IEEE, 1997, pp. 65–71.
14
[13] ARM, “Procedure call standard for the arm architecture,” Tech. Rep.,
November 2012. [Online]. Available: http://infocenter.arm.com/help/
topic/com.arm.doc.ihi0042e/IHI0042E aapcs.pdf
[14] A. AZAB and P. Ning, “Methods, systems, and computer readable
medium for active monitoring, memory protection and integrity
veriﬁcation of
June
2, 2014.
[Online]. Available: http://patentscope.wipo.int/search/en/
WO2014021919
target devices,” Patent WO 2014/021 919,
[15] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky,
“Hypersentry: enabling stealthy in-context measurement of hypervisor
integrity,” in Proceedings of the 17th ACM conference on Computer
and communications security. ACM, 2010, pp. 38–49.
[16] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam, C. A. Wald-
spurger, D. Boneh, J. Dwoskin, and D. R. Ports, “Overshadow: a
virtualization-based approach to retroﬁtting protection in commod-
ity operating systems,” in ACM SIGOPS Operating Systems Review,
vol. 42, no. 2. ACM, 2008, pp. 2–13.
J. Criswell, N. Dautenhahn, and V. Adve, “Virtual ghost: protecting
applications from hostile operating systems,” in Proceedings of the
19th international conference on Architectural support for programming
languages and operating systems. ACM, 2014, pp. 81–96.
[17]
[18] Y. Fu and Z. Lin, “Space traveling across vm: Automatically bridging
the semantic gap in virtual machine introspection via online kernel data
redirection,” in Security and Privacy (SP), 2012 IEEE Symposium on.
IEEE, 2012, pp. 586–600.
[19] X. Ge, H. Vijayakumar, and T. Jaeger, “Sprobes: Enforcing kernel code
integrity on the trustzone architecture,” 2014.
[20] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel,
“Inktag: secure applications on an untrusted operating system,” ACM
SIGPLAN Notices, vol. 48, no. 4, pp. 265–278, 2013.
[21] S. Jin, J. Ahn, S. Cha, and J. Huh, “Architectural support for secure
virtualization under a vulnerable hypervisor,” in Proceedings of the
44th Annual IEEE/ACM International Symposium on Microarchitecture.
ACM, 2011, pp. 272–283.
[22] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell,
and M. Horowitz, “Architectural support for copy and tamper resistant
software,” ACM SIGPLAN Notices, vol. 35, no. 11, pp. 168–177, 2000.
[23] D. Lie, C. A. Thekkath, and M. Horowitz, “Implementing an untrusted
operating system on trusted hardware,” in ACM SIGOPS Operating
Systems Review, vol. 37, no. 5. ACM, 2003, pp. 178–192.
[24] L. Litty, H. A. Lagar-Cavilla, and D. Lie, “Hypervisor support for iden-
tifying covertly executing binaries,” in USENIX Security Symposium,
2008, pp. 243–258.
[25] H. Liu, S. Saroiu, A. Wolman, and H. Raj, “Software abstractions for
trusted sensors,” in Proceedings of the 10th international conference on
Mobile systems, applications, and services. ACM, 2012, pp. 365–378.
[26] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. R. Savagaonkar, “Innovative instructions and
software model for isolated execution,” HASP, vol. 13, p. 10, 2013.
[27] P. Ning, “Introducing the samsung knox plaform,” Tech. Rep., June
2014. [Online]. Available: http://samsungdevus.com/sites/Default/ﬁles/
IntroducingtheSamsungKNOXPlatform-PengNing.pdf
[28] B. D. Payne, M. Carbone, M. Sharif, and W. Lee, “Lares: An archi-
tecture for secure active monitoring using virtualization,” in Security
and Privacy, 2008. SP 2008. IEEE Symposium on.
IEEE, 2008, pp.
233–247.
[29] D. R. Ports and T. Garﬁnkel, “Towards application security on untrusted
operating systems,” in HotSec, 2008.
[30] L. Samsung Electronics Co.,
samsung knox,” Tech. Rep.,
http://www.samsung.com/my/business-images/resource/white-paper/
2013/11/Samsung KNOX whitepaper An Overview of Samsung
KNOX-0.pdf
“White paper: An overview of
[Online]. Available:
June 2014.
[31] N. Santos, H. Raj, S. Saroiu, and A. Wolman, “Using arm trustzone
to build a trusted language runtime for mobile applications,” in Pro-
ceedings of the 19th international conference on Architectural support
for programming languages and operating systems. ACM, 2014, pp.
67–80.
[32] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: A tiny hypervisor
to provide lifetime kernel code integrity for commodity oses,” ACM
SIGOPS Operating Systems Review, vol. 41, no. 6, pp. 335–350, 2007.
[33] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi, “Secure in-vm monitoring
using hardware virtualization,” in Proceedings of the 16th ACM con-
ference on Computer and communications security. ACM, 2009, pp.
477–487.
[34] D. Srinivasan, Z. Wang, X. Jiang, and D. Xu, “Process out-grafting:
an efﬁcient out-of-vm approach for ﬁne-grained process execution
monitoring,” in Proceedings of the 18th ACM conference on Computer
and communications security. ACM, 2011, pp. 363–374.
[35] A. Srivastava and J. T. Gifﬁn, “Efﬁcient monitoring of untrusted kernel-
[36]
mode execution.” in NDSS, 2011.
J. Wang, A. Stavrou, and A. Ghosh, “Hypercheck: A hardware-assisted
integrity monitor,” in Recent Advances in Intrusion Detection. Springer,
2010, pp. 158–177.
[37] Z. Wang, X. Jiang, W. Cui, and P. Ning, “Countering kernel rootkits
with lightweight hook protection,” in Proceedings of the 16th ACM
conference on Computer and communications security. ACM, 2009,
pp. 545–554.
[38] F. Zhang, J. Chen, H. Chen, and B. Zang, “Cloudvisor: retroﬁtting
protection of virtual machines in multi-tenant cloud with nested vir-
tualization,” in Proceedings of the Twenty-Third ACM Symposium on
Operating Systems Principles. ACM, 2011, pp. 203–216.
15