**Author: mengchen@Knownsec 404 Team**  
**Date: August 1, 2019**  
**Chinese Version:**
## 1\. Introduction
TYPO3 is a free and open-source Web content management system written in PHP.
It is released under the GNU General Public License.
On July 16, 2019, the RIPS team revealed a vulnerability(CVE-2019-12747)
[detail](https://blog.ripstech.com/2019/typo3-overriding-the-database/) for
Typo3 CMS. It allows users to execute any PHP code in the backend.
Affected Versions: `8.0.0-8.7.26` and `9.0.0-9.5.7`
## 2\. Test Environment
    Nginx/1.15.8
    PHP 7.3.1 + xdebug 2.7.2
    MySQL 5.7.27
    Typo3 9.5.7
## 3\. TCA
Before this , we need to know the `TCA(Table Configuration Array)` of `Typo3`.
In the code of `Typo3`, it is represented as `$GLOBALS['TCA']`.
In `Typo3`, `TCA` is an extension of the definition of the database table. It
defines which tables can be edited in the backend of `Typo3`. It has 3 main
functions :
  * Represents the relationship between tables
  * Define the fields and layouts displayed in the backend
  * Verifies fields
The two exploits of this vulnerability are in the `CoreEngine` and
`FormEngine` structures, and`TCA` is the bridge between them. It tells the two
core structures how to represent tables, fields and relationship.
Table entries (first level) ï¼š
    $GLOBALS['TCA']['pages'] = [
        ...
    ];
    $GLOBALS['TCA']['tt_content'] = [
        ...
    ];
`pages` and `tt_content` are the tables in the database.
The next level is an array that defines how to process a table.
    $GLOBALS['TCA']['pages'] = [
        'ctrl' => [
            ....
        ],
        'interface' => [
            ....
        ],
        'columns' => [
            ....
        ],
        'types' => [
            ....
        ],
        'palettes' => [
            ....
        ],
    ];
Above is all we need to know about for this analysis. More detailed
information can be found in the [Official
Handbook](https://docs.typo3.org/m/typo3/reference-tca/master/en-us/Introduction/Index.html).
## 4\. Vulnerability analysis
The process of exploiting the entire vulnerability is not particularly
complicated. It requires two steps. In the first step, the variable is
overwritten to cause the deserialized input to be controllable. The second
step is to construct a special deserialized string to write `shell`. The
second step is the old routine. All we need to do is to find a class that can
write files in the magic method. The fun part of this vulnerability is the
variable covering, and the way to get into the vulnerability of the two
components is also slightly different. Let's take a look at this
vulnerability.
### 4.1 Patch analysis
From the official
[Notification](https://typo3.org/security/advisory/typo3-core-sa-2019-020/) of
Typo3 we can see that the vulnerability affects two components - `Backend &
Core API (ext :backend, ext:core)`. We can find
[records](https://github.com/TYPO3/TYPO3.CMS/commit/555e0dd2b28f01a2f242dfefc0f344d10de50b2a?diff=unified)
on GitHub:
![
](https://images.seebug.org/content/images/2019/08/abd6a4f6-2547-4626-87b3-6d20b1323b32.png-w331s)
Obviously, the patch disables the deserialization operations in
`DatabaseLanguageRows.php` of `backend` and `DataHandler.php` in `core`.
### 4.2 Backend ext vulnerability point exploit process analysis
Look at the vulnerability points in the `Backend` component based on the
location of the patch.
Path:
`typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseLanguageRows.php:37`
    public function addData(array $result)
    {
        if (!empty($result['processedTca']['ctrl']['languageField'])
            && !empty($result['processedTca']['ctrl']['transOrigPointerField'])
        ) {
            $languageField = $result['processedTca']['ctrl']['languageField'];
            $fieldWithUidOfDefaultRecord = $result['processedTca']['ctrl']['transOrigPointerField'];
            if (isset($result['databaseRow'][$languageField]) && $result['databaseRow'][$languageField] > 0
                && isset($result['databaseRow'][$fieldWithUidOfDefaultRecord]) && $result['databaseRow'][$fieldWithUidOfDefaultRecord] > 0
            ) {
                // Default language record of localized record
                $defaultLanguageRow = $this->getRecordWorkspaceOverlay(
                    $result['tableName'],
                    (int)$result['databaseRow'][$fieldWithUidOfDefaultRecord]
                );
                if (empty($defaultLanguageRow)) {
                    throw new DatabaseDefaultLanguageException(
                        'Default language record with id ' . (int)$result['databaseRow'][$fieldWithUidOfDefaultRecord]
                        . ' not found in table ' . $result['tableName'] . ' while editing record ' . $result['databaseRow']['uid'],
                        1438249426
                    );
                }
                $result['defaultLanguageRow'] = $defaultLanguageRow;
                // Unserialize the "original diff source" if given
                if (!empty($result['processedTca']['ctrl']['transOrigDiffSourceField'])
                    && !empty($result['databaseRow'][$result['processedTca']['ctrl']['transOrigDiffSourceField']])
                ) {
                    $defaultLanguageKey = $result['tableName'] . ':' . (int)$result['databaseRow']['uid'];
                    $result['defaultLanguageDiffRow'][$defaultLanguageKey] = unserialize($result['databaseRow'][$result['processedTca']['ctrl']['transOrigDiffSourceField']]);
                }
                    //......
            }
            //......
        }
        //......
    }
Many classes inherit the `FormDataProviderInterface` interface, so static
analysis to find out who called the `DatabaseLanguageRows` `addData` method is
not realistic. But according to the demo video in the article, we can know
that there is a vulnerability point in the function of modifying the `page` in
the website. Add a breakpoint to the `addData` method and send a normal
request to modify the `page`.
When the program breaks at the `addData` method of `DatabaseLanguageRows`, we
can get the call chain.
![
](https://images.seebug.org/content/images/2019/08/de2cfc50-044e-4760-b2fa-5f32b4f6f4dc.png-w331s)
In `DatabaseLanguageRows` of this `addData`, only one `$result` array is
passed in, and the target of the deserialization operation is a value in
`$result['databaseRow']`. Depending on the name of the variable, it may be the
value obtained from the database . Continue to analyze it.
Go to the `compile` method of `OrderedProviderList`.
Path:
`typo3/sysext/backend/Classes/Form/FormDataGroup/OrderedProviderList.php:43`
    public function compile(array $result): array
    {
        $orderingService = GeneralUtility::makeInstance(DependencyOrderingService::class);
        $orderedDataProvider = $orderingService->orderByDependencies($this->providerList, 'before', 'depends');
        foreach ($orderedDataProvider as $providerClassName => $providerConfig) {
            if (isset($providerConfig['disabled']) && $providerConfig['disabled'] === true) {
                // Skip this data provider if disabled by configuration
                continue;
            }
            /** @var FormDataProviderInterface $provider */
            $provider = GeneralUtility::makeInstance($providerClassName);
            if (!$provider instanceof FormDataProviderInterface) {
                throw new \UnexpectedValueException(
                    'Data provider ' . $providerClassName . ' must implement FormDataProviderInterface',
                    1485299408
                );
            }
            $result = $provider->addData($result);
        }
        return $result;
    }
We can see that in the `foreach` loop, the program dynamically instantiates
the class in `$this->providerList`, then calls its `addData` method, and uses
`$result` as the argument to the method.
Before calling the `DatabaseLanguageRows` class, the `addData` method of the
class shown in the figure is called.
![
](https://images.seebug.org/content/images/2019/08/88820b8f-2c06-4941-928e-baa2a4fb770b.png-w331s)
After querying the manual and analyzing the code, we can know that in the
`DatabaseEditRow` class, the data in the database table is read by calling the
`addData` method and stored in the `$result['databaseRow']` variable.
Path:`typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseEditRow.php:32`
    public function addData(array $result)
    {
        if ($result['command'] !== 'edit' || !empty($result['databaseRow'])) {
            return $result;
        }
        $databaseRow = $this->getRecordFromDatabase($result['tableName'], $result['vanillaUid']); // Get records in the database
        if (!array_key_exists('pid', $databaseRow)) {
            throw new \UnexpectedValueException(
                'Parent record does not have a pid field',
                1437663061
            );
        }
        BackendUtility::fixVersioningPid($result['tableName'], $databaseRow);
        $result['databaseRow'] = $databaseRow;
        return $result;
    }
The `addData` method of the `DatabaseRecordOverrideValues` class is called
later.
![
](https://images.seebug.org/content/images/2019/08/4d0dde58-8cdb-4d3d-9c29-4276e263fbfe.png-w331s)
Path:
`typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseRecordOverrideValues.php:31`
    public function addData(array $result)
    {
        foreach ($result['overrideValues'] as $fieldName => $fieldValue) {
            if (isset($result['processedTca']['columns'][$fieldName])) {
                $result['databaseRow'][$fieldName] = $fieldValue;
                $result['processedTca']['columns'][$fieldName]['config'] = [
                    'type' => 'hidden',
                    'renderType' => 'hidden',
                ];
            }
        }
        return $result;
    }
Here, the key-value pairs in `$result['overrideValues']` are stored in
`$result['databaseRow']`. If `$result['overrideValues']` is controllable, then
through this class, we can control the value of `$result['databaseRow']`.
Go ahead and see where the value of `$result` comes from.
Path: `typo3/sysext/backend/Classes/Form/FormDataCompiler.php:58`
    public function compile(array $initialData)
    {
        $result = $this->initializeResultArray();
        //......
        foreach ($initialData as $dataKey => $dataValue) {
            // ......
            $result[$dataKey] = $dataValue;
        }
        $resultKeysBeforeFormDataGroup = array_keys($result);
        $result = $this->formDataGroup->compile($result);
        // ......
    }
Obviously, the data in `$initialData` is stored in `$result` by calling the
`compile` method of the `FormDataCompiler` class.
Go forward and we will come to the `makeEditForm` method in the
`EditDocumentController` class.
![
](https://images.seebug.org/content/images/2019/08/4d5293f0-f158-4897-a739-fc694170bb40.png-w331s)
Here, `$formDataCompilerInput['overrideValues']` gets the data from
`$this->overrideVals[$table]`.
While the value of `$this->overrideVals` is set in the method `preInit`, which
gets the key-value pairs in the form passed in via the `POST` request.
![
](https://images.seebug.org/content/images/2019/08/b383c611-2e21-4ba3-942a-e815999e0dfb.png-w331s)
In this way, we can control the deserialized string during this request.
Submit any input in the form of an array. It will be parsed in the backend
code, and then the backend will judge and process it according to `TCA`. For
example, we added a form item named `a[b][c][d]` in the submission form and
set its value to be `233`.
![
](https://images.seebug.org/content/images/2019/08/468c848f-65e7-490f-9c73-e1227ab3ff5e.png-w331s)
Add a breakpoint in the controller `EditDocumentController.php` of the edit
form, then submit the request.
![
](https://images.seebug.org/content/images/2019/08/2b1e6491-0fcd-4b2a-807a-eb6152c3df69.png-w331s)
We can see that the passed key-value pairs become parsed arrays after being
parsed by the `getParsedBody` method, and there are no restrictions.
We only need to pass in the `overrideVals` array in the form. For the specific
key-value pairs in this array, you need to see which key value of
`$result['databaseRow']` is taken when deserializing.
    if (isset($result['databaseRow'][$languageField]) && $result['databaseRow'][$languageField] > 0 && isset($result['databaseRow'][$fieldWithUidOfDefaultRecord]) && $result['databaseRow'][$fieldWithUidOfDefaultRecord] > 0) {
        //......
        if (!empty($result['processedTca']['ctrl']['transOrigDiffSourceField']) && !empty($result['databaseRow'][$result['processedTca']['ctrl']['transOrigDiffSourceField']])) {
            $defaultLanguageKey = $result['tableName'] . ':' . (int) $result['databaseRow']['uid'];
            $result['defaultLanguageDiffRow'][$defaultLanguageKey] = unserialize($result['databaseRow'][$result['processedTca']['ctrl']['transOrigDiffSourceField']]);
        }
        //......
    }
In order to enter the deserialization , we also need to achieve the above
condition `if` . We can debug it dynamically and then the below is called in
the `if` statement.
    $result['databaseRow']['sys_language_uid']
    $result['databaseRow']['l10n_parent']
Called later in deserialization is:
    $result['databaseRow']['l10n_diffsource']
Therefore, we only need to add three parameters to the request form.
    overrideVals[pages][sys_language_uid] ==> 4
    overrideVals[pages][l10n_parent] ==> 4
    overrideVals[pages][l10n_diffsource] ==> serialized_shell_datas
![
](https://images.seebug.org/content/images/2019/08/ea9b5322-916b-419b-9f49-dc9b665d02a5.png-w331s)
As you can see, our input successfully reached the deserialized position.
### 4.3 Core ext vulnerability point exploit process analysis
Let us then analyze the vulnerability point in `Core`.
Path: `typo3/sysext/core/Classes/DataHandling/DataHandler.php:1453`
    public function fillInFieldArray($table, $id, $fieldArray, $incomingFieldArray, $realPid, $status, $tscPID)
    {
        // Initialize:
        $originalLanguageRecord = null;