Privacy
Correctness
Figure 1: Real cost per server (for a total of k servers) of mixing n items using diﬀerent mixes. The cost is
measured in terms of the number of exponentiations. Note that α is the security parameter of our scheme
(e.g. 1 ≤ α ≤ 5)
mixing servers. Since this makes decryption servers easier
to recruit than mixing servers, it is appropriate that our
adversarial model requires a majority of honest decryption
servers but only a single honest mixing server.
For concreteness, we base our presentation of re-encryption
mix nets on an ElGamal implementation. ElGamal is a
probabilistic public-key cryptosystem. The public param-
eters are a multiplicative group / of prime order q (either
a subgroup of ∗
p or an elliptic curve over .p), a genera-
tor g of the group /, and an element y = gx. The private
key consists of the value x. ElGamal is semantically secure
[27] under the assumption that the Decisional Diﬃe Hell-
man (DDH) problem is hard in /. To encrypt a plaintext
m ∈ /, a user chooses a random r ∈ q and produces the
following ciphertext: (gr, myr). Note that a ciphertext is a
pair of two elements of /. To decrypt a ciphertext (a, b),
a user computes ax/b which yields the plaintext m since
(gr)x = yr.
The ElGamal cryptosystem makes re-encryption of ci-
phertexts possible with knowledge of only the public pa-
rameters. To re-encrypt a ciphertext c = (gr, myr), one
only needs to choose a new random value r(cid:48) ∈ q and com-
pute c(cid:48) = (gr · gr(cid:48)
). It is easy to convince oneself
that the ciphertexts c and c(cid:48) decrypt to the same plaintext
m. Furthermore, one cannot test if c(cid:48) is a re-encryption of
c if the DDH problem is hard in /.
, myr · yr(cid:48)
Definition 2.2. Re-encryption mix networks (ElGamal
implementation)
• Key generation: all decryption servers jointly gener-
ate the parameters (q, g, x, y) of an ElGamal cryptosys-
tem in a group / of order q generated by g, using for
example the threshold key generation protocol of Ped-
ersen [23, 10]. The public parameters q, g, y are made
public, while the private key x is shared among the de-
cryption servers in a (t, k) secret sharing scheme.
• Submission of inputs: users submit to the mix net
ElGamal encrypted inputs (gr, myr) using the parame-
ters generated above. Users are also required to submit
a proof of knowledge for the corresponding plaintext m.
This can be done for example by proving knowledge of
r with respect to gr, using myr as input to a random
oracle (see [13, 27]).
• Mixing phase: mixing server Mi receives as input
the set of ElGamal ciphertexts output by mixing server
Mi−1. Server Mi permutes and re-randomizes (i.e. re-
encrypts) all these ciphertexts, and outputs a new set
of ciphertexts, which is then passed to Mi+1. Server
Mi must also provide a proof of correct execution (this
will be discussed in much detail below).
• Decryption phase: a quorum of decryption servers
jointly perform a threshold decryption of the ﬁnal out-
put, and provide a zero-knowledge proof of correctness
for decryption.
3. RELATED WORK
The main diﬃculty of re-encryption mixnets lies in design-
ing computationally eﬃcient ways for mix servers to prove
that they mixed and re-encrypted their inputs correctly in
the mixing phase. We survey here some techniques that are
representative of the progress made and compare the eﬃ-
ciency of these techniques in Figure 1. The table in Figure 1
compares the real cost per server (for a total of k servers)
of mixing n items. The cost is expressed as the number
of exponentiations required to re-encrypt the inputs, ver-
ify correctness and decrypt the outputs. We do not take
into account the cost of operations such as additions and
multiplications that are much faster to perform than expo-
nentiations. Where applicable, the table also mentions what
trade-oﬀ is made for eﬃciency.
The ﬁrst methods to prove the correctness of the mixing
were based on cut-and-choose zero-knowledge proofs [26, 21,
1]. Though much work went into designing eﬃcient cus-
tomized zero-knowledge proofs, these schemes remain com-
putationally expensive. To make the proofs more eﬃcient,
an approach proposed independently by Millimix [16] and
MIP-2 [2, 3] is to decompose a permutation on n elements
into n log n pairwise permutations called comparitors. The
mix server then proves correct execution of all the compari-
tors one by one, which can be done eﬃciently with a variant
of the Chaum-Pedersen [6] protocol that proves equality of
discrete logarithms. The schemes recently proposed by Fu-
rukawa and Sako [9], and Neﬀ [20] oﬀer yet more eﬃcient
proofs of correct mixing.
We now compare in more detail our new mix net to the two
schemes to which it is closest: Randomized Partial Check-
ing [18] and Optimistic Mixing [11]. Randomized Partial
Checking (RPC) trades-oﬀ some privacy for more eﬃciency:
correctness is veriﬁed by asking each mix server to reveal
a randomly selected fraction of its input/output relations.
This guarantees with high probability that all but an expo-
nentially small number of inputs were processed correctly by
70the mix server. On the downside, RPC oﬀers a weaker guar-
antee of privacy. Since each mix server reveals a fraction of
its input/output relations, privacy becomes a global prop-
erty of the mix network: a majority of honest mix servers is
required to ensure privacy, rather than a single mix server.
To achieve the same conﬁdence in privacy, RPC requires the
involvement of many more servers than the schemes we have
previously surveyed.
While our mix net bears some resemblance to RPC, it
exploits mostly a diﬀerent trade-oﬀ. RPC trades oﬀ mostly
privacy (and some correctness) for eﬃciency, while our scheme
trades oﬀ mostly correctness (and a little privacy) for eﬃ-
ciency. Contrary to RPC, a mix server in our scheme does
not reveal individual relationships between inputs and out-
puts, but only the global relationship between a large subset
of the inputs and a large subset of the outputs. Like RPC,
our mix oﬀers perfect privacy if there is an honest majority
of mix servers. But unlike RPC, our mix preserves some
privacy even when there is only a single honest mix server.
In the case of a single honest mix server, as we show in
section 6, every input is hidden among n/2α outputs on
average, where n is the total number of inputs and α is
the security parameter (e.g. α = 4). On the downside, our
mixnet does not guarantee perfect correctness but must rely
on the parallel execution of a slower veriﬁcation protocol to
guarantee perfect correctness.
Finally, a proof technique similar to ours is used in [11]
to build a mix network with diﬀerent properties. The proof
of correctness in [11] consists of a proof that the product of
all the inputs equals the product of all the outputs of the
mix server. This, combined with redundancy checks in the
inputs, guarantees perfect correctness. As in our scheme,
the cost of the proof is independent of the number of inputs
mixed. But on the downside, the redundancy checks in the
inputs (which guarantee perfect correctness) result in a cost
of mixing and decrypting that is more than twice as high as
in all other re-encryption mix networks.
To summarize, our mix has the lowest total computational
overhead for mixing n inputs. In particular the number of
exponentiations required to prove correct mixing is a con-
stant independent of the number of inputs. Our scheme
guarantees only almost entirely correct mixing: any error in
the output is detected with probability 99% whereas per-
fectly correct mixes provide standard guarantees of correct-
ness of 1 − 280. Our scheme also trades oﬀ a little privacy
(see section 6).
4. PROOF OF ALMOST ENTIRELY COR-
RECT MIXING
To illustrate the key idea of our proof of almost entirely
correct mixing, we introduce ﬁrst the following simple prob-
lem. Consider a prover who is committed to two sets of
n elements: m1, . . . , mn ∈ / and m(cid:48)
prover wants to convince a veriﬁer that there exists a per-
mutation ϕ on n elements such that for all i, m(cid:48)
i = mϕ(i).
In other words, the prover must convince the veriﬁer that
the set {m(cid:48)
In
addition, the prover must reveal no information about the
sets {mi}n
i}n
i=1 and as little information as pos-
sible about the permutation ϕ. We assume that the prover
is computationally bounded.
i}n
i=1 is a permutation of the set {mi}n
i=1 and {m(cid:48)
n ∈ /. This
1, . . . , m(cid:48)
i=1.
We propose the following approach:
1. The veriﬁer chooses a random subset of indices S ⊂
{1, . . . , n} (note that |S| ≈ n/2 with high probability).
2. The prover reveals to the veriﬁer the set S(cid:48) = ϕ(S)
deﬁned as ϕ(S) = {ϕ(s)|s ∈ S}. The veriﬁer checks
that |S| = |S(cid:48)|.
3. The prover shows that3S mi =3S(cid:48) m(cid:48)
i. We assume
that this can be done without revealing anything about
the mi or m(cid:48)
i. The veriﬁer is satisﬁed if this product
equality holds.
There are a few important observations to make about
this approach:
• A prover who knows a permutation ϕ such that for all
i = mϕ(i) will always trivially succeed in steps 2
i, m(cid:48)
and 3.
3S mi =3S(cid:48) m(cid:48)
• Consider a malicious prover who does not have a per-
mutation ϕ such that for all i, m(cid:48)
i = mϕ(i). This
prover must ﬁnd a set S(cid:48) such that |S| = |S(cid:48)| and
i. We prove in section 7 that if the set
{m(cid:48)
i} is not a permutation of the set {mi}, then the
probability that the prover can ﬁnd a set S(cid:48) with the
desired properties in polynomial time is at most 5/8,
or else the discrete logarithm problem can be solved in
polynomial time in /.
• The proof leaks a little bit of information about the
permutation ϕ. Given S and S(cid:48) = ϕ(S), the veriﬁer
knows that ϕ(i) ∈ S(cid:48) if and only if i ∈ S. This is ac-
ceptable for mix network applications, considering the
number of inputs mi is typically large, so that being
hidden among about half the outputs is suﬃcient.
Applications to ElGamal re-encryption mixes.
ElGamal re-encryption mix networks were deﬁned in sec-
tion 2.1. Recall that the inputs to a mix server are ElGamal
ciphertexts. The mix server mixes these inputs, re-encrypts
them, and outputs a new set of ElGamal ciphertexts. Fol-
lowing the example above, we propose to verify that the
inputs were mixed correctly by ﬁrst computing the product
of a randomly selected subset S of the inputs, then giving S
to the mix server and asking it to produce a subset S(cid:48) of the
outputs whose product is the same. To make this proof tech-
nique work with ElGamal ciphertexts, we need the following
two propositions:
Proposition 4.1. (Multiplicative homomorphism of El-
Gamal) Let (g1, m1) and (g2, m2) be ElGamal encryptions
of plaintexts P1 and P2. Then (g1g2, m1m2) is an ElGamal
encryption of the product P1P2.
Proposition 4.2. (Chaum-Pedersen protocol [6]) Con-
sider a prover who knows values (g, x, h, y) in p and also
knows logg x and logh y. The Chaum-Pedersen protocol al-
lows this prover to convince a veriﬁer that logg x = logh y
without revealing anything about these discrete logarithms.
A trivial application of the Chaum-Pedersen protocol is to
prove that two ElGamal ciphertexts are re-encryption of the
same plaintext.
Consider a mix server who receives as inputs n ElGamal
ciphertexts (gri , mi · yri ), and outputs n ElGamal cipher-
texts (gr(cid:48)
i ). Proposition 4.1 shows that any veriﬁer
i , m(cid:48)
i · yr(cid:48)
71can compute an ElGamal encryption (g, m) of3 mi, and
an ElGamal encryption (g(cid:48), m(cid:48)) of3 m(cid:48)
4.2, the mix server can then prove that3 mi =3 m(cid:48)
i. With Proposition
i by
giving a zero-knowledge proof that log(g(cid:48)/g) = logy(m(cid:48)/m).
5. OUR NEW MIX NET
In this section, we integrate our proof of almost entirely
correct mixing in the design of the ElGamal re-encryption
mix network and give a detailed description of the resulting
mix network protocol.
Setup. The decryption servers jointly generate the param-
eters (q, g, x, y) of an ElGamal cryptosystem in a group / of
prime order q generated by g. The private key x such that
y = gx is shared among all decryption servers in a (t, k)
secret sharing scheme. This may be done using for exam-
ple the (t, k)-threshold key generation protocol of Pedersen.
This setup step is executed only once. After that, the same
parameters can be used to mix any number of input batches.
The parameters of the ElGamal cryptosystem need only be
generated anew if new servers join the mix or existing servers
leave the mix.
Submission of inputs.
• The servers publish the public ElGamal parameters
that were generated in the setup phase.
• Users submit their inputs to the mix net encrypted
with ElGamal. Let mi be the input of user Ui. For