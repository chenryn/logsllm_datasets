secret M, where M is an element in the ﬁnite ﬁeld F of size
p (p is a prime s.t. 0 < k ≤ n < p). We create a random
polynomial P ∈ F(x) of degree k by choosing k−1 random
301301301
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:24:09 UTC from IEEE Xplore.  Restrictions apply. 
coefﬁcients in F and P (0) = M. Each of the i = 1 . . . n
participant receives the share (i, P (i)). Now, given any k of
these shares P (s1), P (s2), . . . , P (sk), where sj (cid:4)= sj(cid:2) and
sj, sj(cid:2) ∈ {1 . . . n}, the secret P (0) = M (constant term of
P ) can be recovered using Lagrange interpolation as:
(cid:3)
j(cid:2)(cid:2)=j
sj(cid:2)
sj(cid:2) − sj
P (0) =
γjP (sj), where γj =
k(cid:2)
j=1
C. Ciphertext-Policy Attribute-Based Encryption (CP-ABE)
In ciphertext-policy attribute-based encryption (CP-ABE)
[19], a party encrypting a message can specify a policy
(based on attributes describing user credentials) for who can
decrypt. Speciﬁcally, the private key (used to decrypt) is
associated with an arbitrary number of attributes. When a
party encrypts a message, he speciﬁes an access structure
over these attributes. Any user can decrypt this message only
if his attributes pass through the ciphertext’s access structure.
CP-ABE consists of the following main procedures.
1
• Setup: The Key Authority (KA) takes no other input,
except a security parameter, and outputs a public key
P K = G0, g, h = gβ, f = g
β , e(g, g)α and a master
secret M K = (b, gα), where G0 is a bilinear group of
prime order p and α, β ∈ Zp.
• Encrypt(P K, M, τ): This algorithm encrypts a mes-
sage M under a policy τ which is represented as a tree
access structure by using the public key P K. Let s (a
random number in Zp) be the secret at the root of the
policy tree, qx be the polynomial of degree dx = kx−1
at the node x where kx is the threshold value at the node
x, Y be the set of leaf nodes in τ and att(y) returns
the attribute of the leaf node y. The ciphertext CT is:
CT = (τ,
˜
C = M e(g, g)αs
qy(0)
∀y ∈ Y : Cy = g
, C = h
, C
s
,
(cid:3)
y = H(att(y))qy(0))
Here, H is a hash function that maps to a random
element in G0, i.e., H : {0, 1}∗ → G0
• KeyGen(M K, S): It takes as input a set of attributes S,
the master secret M K and outputs a key that identiﬁes
with that set. It chooses randoms r ∈ Zp, and rj ∈ Zp
for each attribute j ∈ S and computes the key as:
SK = (D = g
(α+r)/β
,
∀j ∈ S : Dj = g
r · H(j)rj , D
(cid:3)
j = g
rj )
• Decrypt(CT , SK, x): It implements a recursive algo-
rithm DecryptNode(CT , SK, x). For each leaf node
(cid:3)
x in τ, DecryptNode pairs Di and D
i (from SK)
x, resp., to obtain e(g, g)rqx(0) if i ∈ S,
(cid:3)
with Cx and C
where i = att(x). If i /∈ S, then DecryptNode returns
⊥. For each non-leaf node x in τ, it recursively calls
Decrypt(CT , SK, zj) on all children zj of x. It
then calculates e(g, g)rqx(0) for the non-root node x
302302302
by using Lagrange interpolation on at least kx such
(0) obtained from its children {zj}. If kx
e(g, g)rqzj
(0) are not available then DecryptNode
such e(g, g)rqzj
returns ⊥ for the non-root node x. Decrypt begins by
calling DecryptNode(CT , SK, R) on the root node
R and computes A = e(g, g)rqR(0) = e(g, g)rs. It then
retrieves M by computing ˜
C/(e(C, D)/A).
IV. MODEL
In this section, we outline details of the system and
adversary model considered in this work.
A. The System
We consider an OSN provider, denoted by SP , where each
subscribing user maintains a list of contacts (or friends) and
uses the OSN platform to store and share digital content
(e.g., status updates, photos, locations, etc.) with his/her
social network. We consider a symmetric social networking
service, i.e, if a user a has another user b in her friend list,
then user b has user a as her friend as well. A popular exam-
ple of a symmetric OSN is Facebook. OSN services usually
maintain a proﬁle and a list of contacts (which includes
relationship type) for each registered user. A proﬁle typically
contains personal information which uniquely identiﬁes the
user. Users can typically add/update their proﬁle information
and access proﬁles of their contacts at various levels of
granularity, often dictated by the contact’s privacy setting.
We consider a user S, referred to as the sharer, who has a
registered account with the service provider SP . The sharer
S wants to share some data object O, e.g., a picture or video
ﬁle, with her contacts (or social network) ST , provided they
have some knowledge of the context related to the sharer
and/or the object O. S is unwilling to share the object with
those contacts who may not know this context. There may
also be contacts who may not be interested in receiving
certain data objects from the sharer without knowing the
related context. Such situations are very common in social
networking or other data sharing applications. For instance, a
user may want to share pictures of a particular private event
with only those contacts who were either at the event or were
invited but missed the event. Some other contacts, such as
professional contacts, may not be interested in viewing the
sharers’ personal event pictures or it may be inappropriate
for the sharer to share those with them.
The context CO related to an object O can be formu-
lated as a set of N key-value (or question-answer) pairs
{(cid:8)q1, a1(cid:9),(cid:8)q2, a2(cid:9), . . . ,(cid:8)qN , aN(cid:9)}. Without loss of general-
ity, let us assume that each context can be represented by
exactly N key-value pairs. Each key qi typically deﬁnes a
domain with the corresponding ai taking exactly a single
value (from that domain). For each shared object O, the
sharer S typically sets a threshold ζO on the minimum
number of key-value pairs that should be known to the
receiver before she can access O. Let RO ⊆ ST be the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:24:09 UTC from IEEE Xplore.  Restrictions apply. 
set of S’s contacts that know the ai values corresponding to
at least ζO qis related to an object O. Thus, users in RO are
said to “know” the context. Without loss of generality, let’s
assume that ζO = k, for some k < N for all objects O.
The shared object O is stored in an encrypted form on a
storage service denoted as DH. Details of the encryption
strategy will be clear soon. The storage service DH is
logically separate from SP , but physically, it can either be
co-located with the SP or hosted by a different third-party
provider such as Dropbox6. The encrypted object stored on
the DH is publicly accessible by means of a unique URI or
web resource locater denoted as U RLO.
B. The Adversary
We want to protect against the unauthorized disclosure of
the sharer’s object O to the following entities: (i) all users
(including users in the sharer’s social network ST − RO)
who do not know the context (have knowledge of less than
ζO key-value context pairs), and (ii) the SP and the DH,
if they do not know the context. Although our scheme is
general enough and can protect against any entity that does
not know the context, we focus here only on those users that
belong to the sharer’s social network. We rely on the social
network service’s access control policies to protect against
users outside the sharer’s social network.
Access (or non-access) for an object O granted to users
in the sharer’s social network, based on amount of context
known, is referred to as the access control property, whereas,
preventing disclosure of the object O to the hosting ser-
vices, such as SP and DH, is referred to as the surveil-
lance resistance property. Context-based access control and
surveillance resistance are the two main requirements of the
proposed system. We assume that users who do not know
the context, i.e., all users in ST − RO, can collude with
each other. However, there is no collusion between users in
RO and users in ST − RO, as otherwise the access control
property can be trivially compromised.
We also assume that entities who do not know the context,
including SP and DH, do not perform active attacks. One
example of such an attack is compromising accounts of
users in RO in order to obtain context CO related to an
object O. All entities that desire access to the object O
will ﬁrst interact with the access control protocol who will
verify the context known by the entity, and accordingly,
either enable or disable access to O. Malicious users (except,
SP and DH) may attempt to circumvent the operation of
the access control protocol by manipulating inputs to the
protocol or learn from the intermediate outputs. Finally, we
assume that the SP and DH execute the access control
protocol truthfully. Due to business and legal consequences
resulting from malicious behavior, such a semi-honest model
is a practical assumption for the service provider.
6Dropbox, https://www.dropbox.com
V. CONSTRUCTION
We propose two novel constructions for context-based
access control
in OSN services. These mechanisms are
implemented as puzzles, referred to as social puzzles, where
users willing to access a particular object are presented with
a series of questions based on the context related to the
object. Only those users that know the context (i.e., solve the
puzzle) are able to access the object. Our ﬁrst construction
makes an elegant use of Shamir’s secret sharing scheme
[18], while the second construction uses an attribute-based
encryption scheme such as CP-ABE [19].
A. Construction 1
Let F be a ﬁnite ﬁeld of size p (where, p is a prime). Let,
H be a cryptographically secure hash function and let E
be a secure symmetric cryptosystem. Our ﬁrst construction
(Fig. 1) consists of the following subroutines.
Storage Service (DH) 
5. Access( ࣌ ࢐ , ࢇ࣌(࢐) ⊕ ࢊ࣌(࢐)
ࡹࡻ , … , ࢁࡾࡸࡻ) 
Encrypted 
Data (     ) 
K
O
O
Service Provider 
(SP) 
Puzzle (ZO) 
1. Upload (O,k,n) 
Data (O) 
Sharer (S) 
Sharer’s Social 
Network (ST) 
Figure 1. Construction 1
• Upload (O, k, n): The Upload subroutine is executed
by the sharer S to create a social puzzle and to securely
upload the object O on the storage service DH. S ﬁrst
determines a k and n ≤ N such that 0 < k ≤ n < p.
Recollect that k is the minimum number of key-value
pairs that should be known to a user before he/she can
access the object O and N is the maximum number of
context key-value pairs available for the object O. S
then creates a random polynomial P ∈ F(x) of degree
k by choosing k − 1 random coefﬁcients in F and a
random constant term P (0). The constant term of the
polynomial P is used as the object-speciﬁc secret by S,
i.e., P (0) = MO. S then computes the object-speciﬁc
secret encryption key KO by using a cryptographically
secure hash function H, i.e., KO = H(MO). S then
= E(O, KO),
encrypts O using the key KO, i.e, OKO
and stores the encrypted object OKO on the storage
service DH at location U RLO. S then prepares n
1 = (cid:8)s1, P (s1)(cid:9),
random shares of MO = P (0) as d
MO
303303303
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:24:09 UTC from IEEE Xplore.  Restrictions apply. 
2 = (cid:8)s2, P (s2)(cid:9), . . . , dMO
n = (cid:8)sn, P (sn)(cid:9), where
MO
d
each si is chosen at random. S then creates a social puz-
zle ZO for controlling access to O by using the context
CO of O. Speciﬁcally, the puzzle ZO is formed using
exactly n ≤ N question-answer pairs {(cid:8)qi, ai(cid:9)} ⊆ CO
and a puzzle speciﬁc key KZO, and is shown below:
⎫⎪⎪⎪⎬
⎪⎪⎪⎭
(cid:9),
), a1 ⊕ d
(cid:9), . . . ,
), a2 ⊕ d
), an ⊕ dMO
n (cid:9),
(cid:8)q1, H(a1, KZO
(cid:8)q2, H(a2, KZO
(cid:8)qn, H(an, KZO
n, k, KZO , U RLO
⎧⎪⎪⎪⎨
⎪⎪⎪⎩
MO
1
MO
2
ZO =
if
she wishes
S then uploads ZO to the service provider SP .
• DisplayPuzzle (ZO): For each puzzle ZO, DisplayPuz-
zle is executed by the OSN provider SP for all the users
u in S’s social network, i.e., ∀u ∈ ST . The subroutine
ﬁrst randomly picks an integer r : k ≤ r ≤ n. For the
object O uploaded by S, SP selects a permutation σ
of numbers from 1 to r and displays qσ(1), qσ(2), . . . ,
qσ(r), KZO to all users u ∈ ST .
• AnswerPuzzle (qσ(1), qσ(2), . . . , qσ(r), KZO): On
receiving the puzzle questions qσ(1), qσ(2), . . . , qσ(r),
each user u ∈ ST ,
to access
the object O, responds with the hash of the an-
swers to the corresponding questions, i.e., hσ(1) =
), . . . , hσ(r) =
H(a
H(a
the user knows the
correct answer aσ(j)
then
H(a
(cid:3)
), hσ(2) = H(a
σ(2), KZO
). Obviously,
if
(cid:3)
σ(1), KZO
(cid:3)
σ(r), KZO
(cid:3)
σ(j), KZO
to a question qσ(j),
) = H(aσ(j), KZO
(cid:3)
σ(2), KZO
• Verify (u, hσ(1), hσ(2), . . . , hσ(r)): In response to a
puzzle ZO and displayed questions qσ(1), qσ(2), . . . ,
(cid:3)
qσ(r), SP receives hσ(1) = H(a
), hσ(2) =
σ(1), KZO
(cid:3)
), . . . , hσ(r) = H(a
) from a
H(a
σ(r), KZO
user u ∈ ST . For each j (0 ≤ j ≤ r), SP veriﬁes if
). If at least k such veriﬁcations
hσ(j) = H(aσ(j), KZO
σ(j)(cid:9) for
are successful, then SP sends (cid:8)σ(j), aσ(j) ⊕ d