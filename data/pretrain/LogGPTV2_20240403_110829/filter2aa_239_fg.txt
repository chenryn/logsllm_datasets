上，也可以绑定到一个方法上，该方法根据Click事件的委托类型，有object和
RoutedEventArgs类型的两个参数。
在列表框中，ItemsSource的设置与前面的方式类似——使用x:Bind标记扩展。现在不
同的是绑定到SelectedItem上。如果把Binding标记表达式改为x: Bind标记表达式，会得到
一个编译器错误：没有转换器，无法绑定Models.Book和System.Object。原因是
SelectedItem是object类型，SelectedBook属性返回Book。使用一个转换器，这可以很容易
解决（代码文件BooksUniversalApp / Views/BooksView.xaml）：
转换器实现了接口IValueConverter。对于双向绑定，接口IValueConverter定义了
Convert和ConvertBack方法。在这种情况下，实现可以仅返回接收到的对象（代码文件
BooksUniversalApp/Converters /ObjectToObjectConverter.cs）：
    public class ObjectToObjectConverter: IValueConverter
    {
      public object Convert(object value,
                        Type targetType,
                        object parameter,
                        string language) => value;
      public object ConvertBack(object value,
                            Type targetType,
                            object parameter,
                            string language) => value;
    }
使用用户控件的资源，实例化ObjectToObjectConverter，其名称与使用前面列表框中
的StaticResource标记扩展和ItemsSource绑定来引用转换器的键相同（代码文件
BooksUniversalApp/Views/ BooksView.xaml）：
与已编译绑定的另一个区别是数据模板。把TextBlock的Text属性绑定到Book的Title
属性上，就需要知道Book。为此，把x: DataType添加到DataTemplate元素上：
有了已编译的数据绑定，UWP应用程序就与WPF应用程序有相同的状态。
  注意： 已编译绑定也在第32和33章中使用。
31.8 使用事件传递消息
对于应用程序的当前状态，用BooksViewModel选择图书时，BookViewModel需要更
新当前的图书。为了解决这个问题，可以定义一个协定，其中一个视图模型调用另一个视
图模型。然而，这是一个小场景，应用程序的其他部分会在其他地方需要这种通知。直接
通信很快就会成为一个噩梦。
解决这个问题的一个方法是使用事件。使用Framework项目定义一个泛型
EventAggregator。这个聚合器定义了一个事件Event，其中Action类型的处
理程序可以订阅和退订，Publish方法触发事件。该聚合器实现为单实例，以便于访问，而
无须创建实例（代码文件Framework/EventAggregator.cs）：
    public class EventAggregator
        where TEvent: EventArgs
    {
      private static EventAggregator s_eventAggregator;
      public static EventAggregator Instance =>
        s_eventAggregator ? ? (s_eventAggregator = new EventAggregator())
;
      private EventAggregator()
      {
      }
      public event Action Event;
      public void Publish(object source, TEvent ev)
      {
        Event? .Invoke(source, ev);
      }
    }
  注意： 使用泛型Singleton类，不仅创建了一个实例，还为每个使用的泛型参
数类型创建了一个实例。这很适合EventAggregator，因为不同的事件类型不需要共享一
些数据，并允许获得更好的可伸缩性。
为了把书的信息从BooksViewModel传递给BooksView，只需要图书的标识符，因此
定义BookInfoEvent类（代码文件Contracts/Events/BookInfoEvent.cs）：
    public class BookInfoEvent: EventArgs
    {
      public int BookId { get; set; }
    }
BookViewModel现在可以订阅事件。在BookViewModel的构造函数中，访问静态的成
员Instance，获得BookInfoEvent类型的单例对象，把LoadBook事件处理程序方法分配给事
件。在处理程序方法中，带有请求ID的书通过图书服务来检索（代码文件ViewModels 
/
BookViewModel.cs）：
    public class BookViewModel: ViewModelBase, IDisposable
    {
      private IBooksService _booksService;
      public BookViewModel(IBooksService booksService)
      {
        _booksService = booksService;
        SaveBookCommand = new DelegateCommand(OnSaveBook);
        EventAggregator.Instance.Event += LoadBook;
      }
      public ICommand SaveBookCommand { get; }
      private void LoadBook(object sender, BookInfoEvent bookInfo)
      {
        if (bookInfo.BookId == 0)
        {
        Book = new Book();
        }
        else
        {
        Book = _booksService.GetBook(bookInfo.BookId);
        }
      }
      public void Dispose()
      {
        EventAggregator.Instance.Event -= LoadBook;
      }
      // etc.
在列表框中选择一本书时触发事件，因此SelectedBook属性调用set访问器。这里，现
在可以使用静态属性Instance，通过调用Publish方法访问EventAggregator，类似于订阅，
Publish方法传递BookInfoEvent对象（代码文件ViewModels / BooksViewModel.cs）：
    private Book _selectedBook;
    public Book SelectedBook
    {
      get { return _selectedBook; }
      set
      {
        if (SetProperty(ref _selectedBook, value))
        {
        EventAggregator.Instance.Publish(
            this, new BookInfoEvent { BookId = _selectedBook.BookId });
        }
      }
    }
有了消息传递机制，可以启动应用程序，选择图书，并添加它们，如图31-11所示。
图31-11
31.9 IoC容器
使用依赖注入，还可以使用一个控制反转（IoC）容器。之前的代码片段使用依赖注
入，直接注入了客户机应用程序中的一个具体类型，例如，在BooksViewModel中的
BooksService实例（代码文件BooksDesktopApp / Views / BooksView.xaml.cs）：
    public BooksViewModel ViewModel { get; } =
        new BooksViewModel((App.Current as App).BooksService);
可以改变它，让IoC容器注入依赖项。几个IoC容器提供为NuGet包，比如Castle
Windsor （http://castleproject.org/projects/Windsor）、Unity （http://unity.codeplex.com）、
Autofac（http://github.com/autofac）、Managed Extensibility Framework （参见第26章）
等。在.NET 
Core 
1.0中，还有一个来自微软的IoC容器，可通过NuGet包
Microsoft.Framework.DependencyInjection （http://github.com/aspnet/DependencyInjection）
获得。这是一个轻量级框架，支持构造函数注入和依赖注入容器，由ASP.NET Core 1.0使
用（参见第40章）。本节中的代码示例使用这个.NET Core 1.0 IoC容器。
为了使用容器，需要添加NuGet包Microsoft.Framework.DependencyInjection。在App类
中，可以把服务添加到ServiceCollection中（名称空间
Microsoft.Framework.DependencyInjection）。AddTransient方法注册一个类型，它用类型
的每一个解析进行新的实例化；AddSingleton只实例化类型一次，每次解析类型时都返回
相同的实例。传递两个泛型参数（用图书服务和图书库来完成），第一类型可以请求，容
器会创建第二个参数的实例。BuildServiceProvider方法返回一个实现了IServiceProvider的
对象，以后该对象可以用于解析类型。在WPF中，返回的IServiceProvider对象在OnStartup
方法中分配给Container方法（代码文件BooksDesktopApp / App.xaml.cs）：
    private IServiceProvider RegisterServices()
    {
      var serviceCollection = new ServiceCollection();
      serviceCollection.AddTransient();
      serviceCollection.AddTransient();
      serviceCollection.AddSingleton();
      serviceCollection.AddSingleton();
      return serviceCollection.BuildServiceProvider();
    }
    public IServiceProvider Container { get; private set; }
    protected override void OnStartup(StartupEventArgs e)
    {
      base.OnStartup(e);
      Container = RegisterServices();
      var mainWindow = new MainWindow();
      mainWindow.Show();
    }
在UWP项目中，方法RegisterServices和Container属性在App类中是相同的。不同的是
OnLaunched启动方法，在其中调用RegisterServices方法（代码文件BooksUniversalApp 
/
App.xaml.cs）：
    protected override void OnLaunched(LaunchActivatedEventArgs e)
    {
      Container = RegisterServices();
      // etc.
    }
在视图的后台代码中，可以通过调用IServiceProvider的GetService方法，初始化
ViewModel属性。App类的Container属性返回一个IServiceProvider。GetService方法的泛型
版是一个扩展方法，可用于名称空间Microsoft.Framework.DependencyInjection，需要导入
才能使用这个扩展方法（代码文件BooksDesktopApp/Views/BooksView.xaml.cs和
BooksUniversalApp / Views / BooksView.xaml.cs）：
    public BooksViewModel ViewModel { get; } =
        (App.Current as App).Container.GetService();
BookView.xaml.cs文件需要相同的更改，否则会创建另一个BooksService实例。在可
下载的示例文件中，需要取消这个属性设置的注释，给上一个属性设置添加注释符号，使
IoC容器成为活动的容器。
现在，运行应用程序，在容器中实例化BooksViewModel。这个视图模型的构造函数
需要IBooksService类型，创建并传递BooksService实例，因为这些类型也使用容器来注
册。BooksService在构造函数中需要IBooksRepository。这里注入BooksSampleRepository。
如果没有注册这些依赖项，就抛出一个InvalidOperationException类型的异常。注册
IBooksRepository接口失败，会给出错误消息：试图激活Services.BooksService时，无法解
析Contracts.IBooksRepository类型的服务。
31.10 使用框架
在示例应用程序中，看到Framework项目中定义的类，例如，BindableBase、
DelegateCommand和EventAggregator。基于MVVM的应用程序需要这些类，但不需要自己
来实现它们。其工作量不大，但可以使用现有的MVVM框架。Laurent Bugnion的MVVM
Light（http://mvvmlight.net）是一个小框架，完全符合MVVM应用程序的目的，可用于许
多不同的平台。
另一个框架Prism.Core（http://github.com/PrismLibrary）最初由Microsoft Patterns and
Practices团队创建，现在转移到社区。虽然Prism框架非常成熟，支持插件和定位控件的区
域，但Prism.Core，很轻，仅包含几个类型，如BindableBase、DelegateCommand和
ErrorsContainer。在本章的下载代码中，也包含用Prism.Core实现的本章示例。
31.11 小结
本章围绕MVVM模式提供了创建基于XAML的应用程序的架构指南。讨论了模型、
视图和视图模型的关注点分离。除此之外，还介绍了使用接口INotifyPropertyChanged实现
更改通知、数据绑定和已编译的数据绑定，分离数据访问代码的存储库模式，使用事件在
视图模型之间传递消息（这也可以用来与视图通信），以及使用或不使用IoC容器注入依
赖项。
这些都允许代码共享，同时仍然允许使用特定平台的功能。可以通过库和服务实现使
用特定于平台的特征，协定可用于所有的平台。为了共享代码，介绍了用于UWP的API协
定、共享的项目和移动库。
第32章将讨论Universal Windows Platform应用程序的用户界面特性。
第32章
Windows应用程序：用户界面
本章要点
● 页面之间导航
● 创建一个汉堡按钮
● 使用SplitView
● 用RelativePanel布局
● 不同屏幕尺寸的自适应用户界面
● 使用AutoSuggest控件
● 使用Pen和InkCanvas
● 用应用程序栏控件定义命令
● 已编译的绑定功能
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章的代码只包含一个大示例，它展示了本章的各个方面：
● Page Navigation
● App Shell
● Layout
● Controls
● Compiled Binding
32.1 概述
本章介绍的Windows应用程序使用通用Windows平台（UWP）运行在Windows 10设备
上。本章涵盖了用户界面特性，如页面之间的导航，创建页面布局，定义命令，允许用户
执行一些操作，使用新的编译数据绑定，使用一些特殊的控件。
前面的章节介绍了XAML：第29章介绍了核心信息，第30章定义了应用程序的样式，
第31章讨论了基于XAML的应用程序常用的几个模式。
本章首先讨论Windows应用程序中用户界面元素的一个相关话题：使用UWP。为
UWP创建的应用程序可以运行在Windows 10、Windows Phone和其他设备系列上，例如
Xbox、HoloLens和物联网（IoT）。
本章创建页面之间的导航，使用新的系统后退按钮、汉堡按钮和SplitView，使导航
控件适应不同的屏幕尺寸。本章介绍了主页面的不同类型，如Hub和Pivot控件，允许进行
不同的导航，本章也解释了如何创建自定义的应用程序shell。
本章探讨如何使用VariableSizedWrapGrid、RelativePanel和自适应触发器创建单个页
面的布局。延迟加载允许更快地显示用户界面。
使用已编译的绑定，会获得另一个性能改进，帮助更早地检测出错误。
在“控件”一节，将论述一些新的控件，比如AutoSuggest控件和InkCanvas，它便于使
用笔、触摸屏和鼠标绘图。
在阅读本章之前，你应该熟悉第29、30、31章讨论的XAML。本章只包含具体的
UWP应用程序功能。
32.2 导航
如果应用程序是由多个页面组成的，就需要能在这些页面之间导航。导航的核心是
Frame类。Frame类允许使用Navigate方法，选择性地传递参数，导航到具体的页面上。
Frame类有一个要导航的页面堆栈，因此可以后退、前进，限制堆栈中页面的数量等。
导航的一个重要方面是能够返回。在Windows 8中，回航通常是由页面左上角一个带
有返回箭头的按钮处理。Windows Phone总是有一个物理返回键。在Windows 10中，此功
能需要合并。下面几节介绍了使用回航的新方法。
32.2.1 导航回最初的页面
下面开始创建一个有多个页面的Windows应用程序，在页面之间导航。模板生成的代
码在App类中包含OnLaunched方法，在该方法中，实例化一个Frame对象，再调用
Navigate方法，导航到MainPage （代码文件PageNavigation / App.xaml.cs）：
    protected override void OnLaunched(LaunchActivatedEventArgs e)
    {
      Frame rootFrame = Window.Current.Content as Frame;
      if (rootFrame == null)
      {
        rootFrame = new Frame();
        rootFrame.NavigationFailed += OnNavigationFailed;
        if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
        {
        //TODO: Load state from previously suspended application
        }
        Window.Current.Content = rootFrame;
      }
      if (rootFrame.Content == null)
      {
        rootFrame.Navigate(typeof(MainPage), e.Arguments);
      }
      Window.Current.Activate();
    }
  注意： 源代码有一个TODO注释，从前面暂停的应用程序中加载状态。如何
处理暂停在第33章中解释。
Frame类有一个已访问的页面堆栈。GoBack方法可以在这个堆栈中回航（如果
CanGoBack属性返回true）, 
GoForward方法可以在后退后前进到下一页。Frame类还提供
了几个导航事件，如Navigating、Navigated、NavigationFailed和NavigationStopped。
为了查看导航操作，除了MainPage之外，还创建SecondPage和ThirdPage页面，在这