Against a quantum attacker or black-box attacker, we cannot
do this operation, as it morally implies that we are duplicating
the attacker’s inner state at the end of att0, using each copy
to run att1 once on u and once on v.
We therefore add a syntactic condition on terms to forbid
such cases, and force that all occurrences of atti are made
with the same arguments.
Condition 2 - Monotonicity: With the new term inter-
pretation, att0 and att1 implicitly share states. This means
that when interpreting att1, we will always get an answer
that depends on the argument previously given to att0.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
7131
Consider for example the terms:
att0(n), att1() .= n
In the classical BC logic, the second term would evaluate to
false, as att1() does not depend on the distribution of n. But
if we are forced to interpret the symbols using a black box
attacker, the computation of att1() does depend on n. Thus,
we lose the locality of our logic on some terms, that we will
need to restore by further reducing the set of terms. This result
in a second syntactic condition, where the arguments of the
successive atti must form a growing sequence of terms.
Condition 3 - Balance: In the classical BC logic, we
can write formulas that do not model interactions between
a single attacker with a protocol, and for instance prove
indistinguishability formulas that would be trivially false
against a single attacker, but true for an independent set of
attackers. For instance, consider the formula(cid:0)att0() .= n(cid:1) ∼
(cid:0)att1(att0(), n(cid:48)) .= n(cid:1). Both sides evaluate to false, because
the attacker is completely independent of n (this is the =IND
rule). In the classical BC logic, the ﬁnal distinguisher is also
a disjoint machine, which typically does not know how many
other attacker machines were executed: therefore, the formula
is true in classical BC. This reﬂects that classical BC allows
modeling a weaker threat model with independent attackers.
In the PQ-BC interpretation, the ﬁnal attacker will be a ﬁnal
call to the interactive machine, which of course knows how
many times it was previously called.
Thus, under the new and strictly stronger interpretation with
a single attacker, some formulas that held under the classical
BC logic might no longer hold. We therefore have to ensure
that none of our logical rules allows for deriving such formulas.
We implement this by introducing a syntactic condition for
PQ-BC that essentially requires that the number of attacker
calls is balanced, i.e., the number of calls is equal on both
sides of an indistinguishability operator, and which will be a
side condition of all our logical rules.
Design choices for the conditions: While the above three
conditions solve issues in designing a post-quantum sound BC
logic, they were additionally chosen because they also form a
small sufﬁcient set of conditions to derive a usable PQ-BC
logic, as we prove in the following section. It would have been
possible, for instance, to replace the balance condition by a
speciﬁc and more reﬁned condition for each logical rule, that
as a set would have been equivalent to the balance condition.
However, the balance condition is both necessary and more
generic, and hence we decide to use this one within PQ-BC.
Overall, the three conditions allow for a generic implementation
in the SQUIRREL prover, and yield a logic usable in practice.
IV. PQ-BC: A POST-QUANTUM BC LOGIC
In this section we ﬁrst provide the core of the formal
deﬁnition of the PQ-BC logic: its term interpretation that is
suitable for post-quantum attackers, as well as the consistency
and monotonicity conditions needed to ensure the stability and
locality of the logic. This interpretation allows to consider
a single interactive attacker, rather than a set of single-
one shot attackers. In the long version [1]we also provide
the computational soundness of the logic, which is a direct
adaptation of the original BC soundness proof. Intuitively, the
original proof needed to justify how an interactive attacker
in the real world could be seen as a set of many one-shot
attackers that needed to recompute the state of the previous
attackers. With the new interpretation, we can directly use the
real-world attacker. This implies that the logic can be used to
obtained computational guarantees against quantum attackers.
Second, we provide the structural rules of the logic, as well as
the balance condition needed to prove the rules sound in the
post-quantum setting. Finally, we discuss which cryptographic
axioms - and thus which corresponding BC axioms - can
be used inside the logic to get post-quantum soundness of a
protocol analysis.
While we directly refer to a quantum attacker in deﬁnitions
and proofs, we actually design a logic with an interpretation and
rules that are computationally sound for any interactive black-
box attacker. The attacker can be instantiated as a Polynomial
Time attacker, or a Quantum Polynomial Time attacker, or
even an unbounded Turing machine attacker. It is only the
cryptographic assumptions used inside a given proof that restrict
the attacker’s computational power.
A. Syntax and Semantics
We use terms to model random samplings, public function
computations by honest parties, and black-box attacker com-
putations. For random samplings, the BC logic inherits some
conventions from the Pi calculus: notably, fresh values (such
as nonces) are called names (and have nothing to do with
identities); by convention, variables called n, n(cid:48), . . . are names
and hence freshly generated values. In Example 1 r, r(cid:48), and sk
would also be modeled as names. Let N be a set of names.
Names can be seen as ﬁxed identiﬁers, where each is a pointer
to a uniformly sampled bitstring. Let Σ be a set of function
symbols, the set used for public functions and primitives. Let
{atti | i ∈ N} be a set of function symbols such that atti
is of arity i for each i ∈ N.
Deﬁnition 1. We consider terms built according to the syntax:
t
::= n ∈ N
|
|
f (t1, . . . , tk)
atti(t1, . . . , ti)
name (fresh value)
function symbol f ∈ Σ
i-th attacker call
We write (cid:126)t or t1, . . . , tn for sequences of terms.
1) Functional model: Recall that while we consider a
quantum attacker, we model honest protocol participants as
classical Polynomial Time Turing Machines (PTTMs). To
interpret terms, we introduce the notion of a functional model
Mf , a library implementing the public function symbols and
names that are used in the protocol: for each function symbol
f (encryptions, signatures,. . . ), Tf is a PTTM, which we view
as a deterministic machine with an inﬁnite random tape and
taking the security parameter as input. The functional model
also contains a PTTM Tn for each n ∈ N , which will extract
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
8132
from the random tape a bitstring of length η. We give η in
unary to the PTTMs, as they are expected to be polynomial
time w.r.t. η in the computational model.
Deﬁnition 2. A functional model Mf is a set of PTTMs, one
for each name and symbol function, such that:
1) if n ∈ N (i.e., n is a name), n is associated to the machine
Tn that on input (1η, ρs) extracts a word of length η from
the tape ρs. Different names extract disjoint parts of the
random tape.
2) if f ∈ Σ is of arity n, f is associated to a machine Tf
which, on input 1η, expects n more bitstrings, and does
not use ρs.
We model public functions as deterministic functions: if
randomness is required, it should be given explicitly as an
argument to the function symbol. This modeling is needed for
the stability of the interpretation.
We can now deﬁne the basic interpretation of terms, assum-
ing that we have been given the output bitstring corresponding
to each attacker call. Based on this ﬁrst interpretation, we will
then deﬁne the one where there is an actual attacker.
Deﬁnition 3. Given a functional model Mf , the security
parameter η, a mapping σ from terms atti(φ) to bitstrings,
and an inﬁnite sequence of bitstrings ρs, we deﬁne the
interpretation of terms such that all occurrences of atti(φi)
are in the domain of σ as:
[[n]]η,σMf ,ρs
[[f ((cid:126)u)]]η,σMf ,ρs
[[atti((cid:126)u)]]η,σMf ,ρs
:= Tn(1η, ρs)
:= Tf ([[(cid:126)u]]η,σMf ,ρs
:= atti((cid:126)u)σ
)
, if n ∈ N
, if f ∈ Σ
, for all i
We assume that the functional model contains function
symbols that expresses propositional formulas, which are
interpreted as expected. We denote those connectives by the
.=,
.∧, .⇒, . . . – note these are marked with a dot.
We will ultimately use two different sets of logical connec-
tives: (1) the dot variants, used in terms, and (2) the variants
without a dot that are part of the logic we are building. We
will illustrate their combination in Example 7.
2) Computational Model: To deﬁne the interpretation of
terms with attacker function symbols, we view terms as directed
acyclic graphs from leaves to their root.
Example 6. Consider a variant of Example 1, where we denote
tuples using (cid:104). . .(cid:105):
P := new sk. in(c, x). new r. out(c, enc(x, r, sk)).
in(c, y). new r(cid:48). out(c, enc((cid:104)y, x, y(cid:105), r(cid:48), sk)).
In the second step, the protocol encrypts the tuple made with
twice the second protocol input on and once the ﬁrst input.
The frame corresponding to this protocol would be t0, t1:
• t0 := enc(att0(), r, sk)
• t1 := enc((cid:104)att1(t0), att0(), att1(t0)(cid:105), r(cid:48), sk)
We give the original terms and the acyclic graph variant for
this frame in Fig. 6.
The acyclic representation leads to a natural interpretation
that we can execute even when we are only given access to
a black-box straight line attacker. We illustrate this interpre-
tation in Fig. 7. When we model the interactions with an
interactive attacker, this corresponds to the high-level change
between Fig. 3 and Fig. 5.
We assume that the attacker is an oracle Quantum Turing
Machine (QTM) to obtain post-quantum soundness. We provide
the formal deﬁnition of such machines in the long version [1].
For our purpose here, it sufﬁces to know that such a machine
behaves as a quantum computer that interactively performs
oracle queries and receives the answers. Importantly, the oracle
queries and answers are classical bitstrings, and do not contain
any quantum state. This models a quantum computer interacting
over a network with a classical protocol. One can also abstract
such an attacker as a straight-line black-box interactive process,
which is what we do in most of our proofs.
Deﬁnition 4. A computational model MA is an extension of
a functional model Mf , which provides an additional oracle
QTM A that takes as input a security parameter 1η.
Given MA, η, σ, ρs and ρr, we deﬁne the interpretation
[[t]]ηMA,ρs
1) First, evaluate att0, by running A on input 1η until the
ﬁrst oracle query, and store the content of the oracle
query tape o inside the substitution σ0 : {att0() (cid:55)→ o}.
2) Then, we assume that we have a substitution σi mapping
all occurrences of attj, j < i to a bitstring. We ﬁnd
the smallest subterm occurrence of a attl(t1, . . . , tl)
in t. Then, for k from i to l, we write on A’s oracle
, then continue A and
answer tape the value [[tk]]η,σk−1Mf ,ρs
wait for the next oracle query, and store the content
of the oracle query tape o inside the substitution σk =
σk−1 ∪ {attk(t1, . . . , tk) (cid:55)→ o}.
of a term t as:
3) Finally, given σl, where l corresponds to the biggest
occurrence of a attl, return [[t]]η,σlMf ,ρs
.
This interpretation does not require that a term contains all
intermediate calls to the attacker. Thus, interpreting the term
att1(t) or the sequence att0(), att1(t) leads to the same
interactions with the attacker.
3) Well-deﬁned interpretation: Our previous deﬁnition is
not deﬁned over all possible terms: there may not be a unique
smallest occurrence of a attl. This is expected, as there exist
terms that correspond to experiments that are not realisable
with a quantum attacker. Notably, recall that in this context,
we cannot interpret the sequence att0(), att1(u), att1(v).
Indeed, if the attacker is straight-line and black-box, it means
that we can only get one attacker answer corresponding
to att1. Therefore, to ensure that a term corresponds to
a valid experiment with respect to a quantum attacker, we
require consistency: atti should always occur with the same
arguments in the terms, i.e., corresponds to the same unique
call of this attacker’s interactive step.
Deﬁnition 5 (Consistency). A sequence of terms (cid:126)t is consistent
if all function symbol atti occurs with the same arguments.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
9133
Fig. 6. From the classical BC to the acyclic graph representation in PQ-BC
5) Interpretation of
formulas: Atomic formulas of the
logic are built using a set of predicate symbols ∼n of
the predicate
arity 2n. Given terms t1, . . . , tn, s1, . . . , sn,
∼n (t1, . . . , tn, s1, . . . , sn) will be interpreted as computational
indistinguishability between the two sequences of terms.
We use inﬁx notation, and always omit n as it
is clear
from the context, thus denoting the previous equivalence by
(t1, . . . , tn) ∼ (s1, . . . , sn). The ﬁrst order formulas are then
built using the usual logical connectives ∨,∧,(cid:62),⊥,⇒,∃,∀,¬.
Note that these connectives are not marked with a dot, and are
part of the logic, not the terms.
Example 7. Given terms u, v, t, we can write the formula:
.∨ v) ∼ t(cid:1)
(cid:0)(u .⇒ v) ∼ t(cid:1) ⇔(cid:0)(
.¬ u
This formula holds because we assume that for all functional
models,
.¬ and .∨ are classically interpreted.
.⇒,
To deﬁne a distinguisher between sequences of terms, we
must deﬁne this distinguisher as a continuation of the interactive
attacker A, and thus pass to it the quantum state of A. This
is only a technicality, and in practice we simply consider that
the continuation is the last stage of the interactive attacker.
Deﬁnition 7. Let (cid:126)v be a sequence of term. For any computa-
tional model MA, we denote by φ(cid:126)vMA,ρs,η the ﬁnal (quantum)
conﬁguration reached by A during a computation of [[(cid:126)v]]ηMA,ρs
.
Deﬁnition 8. Given a computational model MA, and two
sequences of ground terms (cid:126)t, (cid:126)u, the formula (cid:126)t ∼ (cid:126)u is satisﬁed
by MA if, for every polynomial time QTM B,
, 1η, φ(cid:126)tMA,ρs,η) = 1}
|Prρs{B([[(cid:126)t]]ηMA,ρs
−Prρs{B([[(cid:126)u]],ηMA,ρs
, 1η, φ(cid:126)uMA,ρs,η) = 1}|
is negligible in η. Here, ρs is drawn according to a distribution
such that every ﬁnite preﬁx is uniformly sampled, and the
probabilities also depend on the inherent probabilistic behavior