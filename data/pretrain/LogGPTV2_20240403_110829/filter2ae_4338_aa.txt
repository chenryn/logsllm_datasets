# FRP 内网穿透
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
在HW过程中（真是令人折磨的过程），核心目标系统通常处于内网，攻击的方式也基本上是通过暴露在互联网的机器获取权限并将其作为跳板机，再进行进一步的内网渗透
获取一台应用系统的权限之后，我们可能需要对目标内部网络进行信息收集、服务探测、指纹识别、发起攻击等等过程，通常需要对一个C段乃至B段发送大量的数据包，因此一个稳定的内网穿透手段成为了重中之重
在以往的渗透中，拿到了服务器权限后，个人最常使用的内网代理方式是 reGeorg +
Proxifier/proxychains，虽然是脚本代理的方式，但使用快捷方便，能够迅速访问到内部网，真的是日站渗透必备良药。可能是由于个人习惯原因，更喜欢在本地直接能打开对方的内网地址，使用自己电脑的常用工具进行工作，因此基本上首选就是这类脚本代理形式
但是随着目标内网环境越来越大，这种脚本形式代理的局限性越来越明显
除脚本外，还多次尝试过使用 CS+MSF 来进行内网控制，emmmmm 只能说有利有弊，具体环境的搭建在公众号“凌天实验室”或安百资讯平台中都发布了教程
在最近的HW中，一位老铁（某厂大佬）跟我推荐了 frp 内网穿透，于是就来尝试一下，网上关于 frp 的文章也还不少，但似乎都浅尝辄止，而且在 frp
不断更新中，更新了诸多新鲜特性，这次抽出几天时间着重测试一下，看看效果怎么样
## 二、简介
项目地址：
在网络上可以搜索到诸多安装部署教程，可以看到 frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https
应用协议提供了额外的能力，且尝试性支持了点对点穿透
frp 采用go语言开发，如果你擅长此种编程语言，可以进行客制化修改，来满足不同的需求
更多的人使用 frp
是为了进行反代，满足通过公网服务器访问处于内网的服务，如访问内网web服务，远程ssh内网服务器，远程控制内网NAS等，实现类似花生壳、ngrok等功能
而对于内网渗透来讲，这种功能恰好能够满足我们进行内网渗透的流量转发
## 三、安装与配置
对于不同操作系统的用户，frp 提供了对应不同的软件，各位按需下载即可
安装也没什么好装的，毕竟我们又看不懂 go 语言源码，把人家发布的的 release 下回来就得了
重点在于这个软件的配置文件，以及它的功能能在我们渗透中带来什么作用
首先这个工具有两端，服务端和客户端，服务端部署在我们具有公网IP的服务器上，客户端放在我们拿到权限的跳板服务器上，双端都需要对配置文件进行配置，我们先来完整的看一下双端的配置文件
服务端：
    # [common] 是必需的
    [common]
    # ipv6的文本地址或主机名必须括在方括号中
    # 如"[::1]:80", "[ipv6-host]:http" 或 "[ipv6-host%zone]:80"
    bind_addr = 0.0.0.0
    bind_port = 7000
    # udp nat 穿透端口
    bind_udp_port = 7001
    # 用于 kcp 协议 的 udp 端口，可以与 "bind_port" 相同
    # 如果此项不配置, 服务端的 kcp 将不会启用 
    kcp_bind_port = 7000
    # 指定代理将侦听哪个地址，默认值与 bind_addr 相同
    # proxy_bind_addr = 127.0.0.1
    # 如果要支持虚拟主机，必须设置用于侦听的 http 端口（非必需项）
    # 提示：http端口和https端口可以与 bind_port 相同
    vhost_http_port = 80
    vhost_https_port = 443
    # 虚拟 http 服务器的响应头超时时间（秒），默认值为60s
    # vhost_http_timeout = 60
    # 设置 dashboard_addr 和 dashboard_port 用于查看 frps 仪表盘
    # dashboard_addr 默认值与 bind_addr 相同
    # 只有 dashboard_port 被设定，仪表盘才能生效
    dashboard_addr = 0.0.0.0
    dashboard_port = 7500
    # 设置仪表盘用户密码，用于基础认证保护，默认为 admin/admin
    dashboard_user = admin
    dashboard_pwd = admin
    # 仪表板资产目录(仅用于 debug 模式下)
    # assets_dir = ./static
    # 控制台或真实日志文件路径，如./frps.log
    log_file = ./frps.log
    # 日志级别，分为trace（跟踪）、debug（调试）、info（信息）、warn（警告）、error（错误） 
    log_level = info
    # 最大日志记录天数
    log_max_days = 3
    # 认证 token
    token = 12345678
    # 心跳配置, 不建议对默认值进行修改
    # heartbeat_timeout 默认值为 90
    # heartbeat_timeout = 90
    # 允许 frpc(客户端) 绑定的端口，不设置的情况下没有限制
    allow_ports = 2000-3000,3001,3003,4000-50000
    # 如果超过最大值，每个代理中的 pool_count 将更改为 max_pool_count
    max_pool_count = 5
    # 每个客户端可以使用最大端口数，默认值为0，表示没有限制
    max_ports_per_client = 0
    # 如果 subdomain_host 不为空, 可以在客户端配置文件中设置 子域名类型为 http 还是 https
    # 当子域名为 test 时, 用于路由的主机为 test.frps.com
    subdomain_host = frps.com
    # 是否使用 tcp 流多路复用，默认值为 true
    tcp_mux = true
    # 对 http 请求设置自定义 404 页面
    # custom_404_page = /path/to/404.html
客户端：
    # [common] 是必需的
    [common]
    # ipv6的文本地址或主机名必须括在方括号中
    # 如"[::1]:80", "[ipv6-host]:http" 或 "[ipv6-host%zone]:80"
    server_addr = 0.0.0.0
    server_port = 7000
    # 如果要通过 http 代理或 socks5 代理连接 frps，可以在此处或全局代理中设置 http_proxy
    # 只支持 tcp协议
    # http_proxy = http://user:PI:EMAIL:8080
    # http_proxy = socks5://user:PI:EMAIL:1080
    # 控制台或真实日志文件路径，如./frps.log
    log_file = ./frpc.log
    # 日志级别，分为trace（跟踪）、debug（调试）、info（信息）、warn（警告）、error（错误）
    log_level = info
    # 最大日志记录天数
    log_max_days = 3
    # 认证 token
    token = 12345678
    # 设置能够通过 http api 控制客户端操作的管理地址
    admin_addr = 127.0.0.1
    admin_port = 7400
    admin_user = admin
    admin_pwd = admin
    # 将提前建立连接，默认值为 0
    pool_count = 5
    # 是否使用 tcp 流多路复用，默认值为 true，必需与服务端相同
    tcp_mux = true
    # 在此处设置用户名后，代理名称将设置为  {用户名}.{代理名}
    user = your_name
    # 决定第一次登录失败时是否退出程序，否则继续重新登录到 frps
    # 默认为 true
    login_fail_exit = true
    # 用于连接到服务器的通信协议
    # 目前支持 tcp/kcp/websocket, 默认 tcp
    protocol = tcp
    # 如果 tls_enable 为 true, frpc 将会通过 tls 连接 frps
    tls_enable = true
    # 指定 DNS 服务器
    # dns_server = 8.8.8.8
    # 代理名, 使用 ',' 分隔
    # 默认为空, 表示全部代理
    # start = ssh,dns
    # 心跳配置, 不建议对默认值进行修改
    # heartbeat_interval 默认为 10 heartbeat_timeout 默认为 90
    # heartbeat_interval = 30
    # heartbeat_timeout = 90
    # 'ssh' 是一个特殊代理名称
    [ssh]
    # 协议 tcp | udp | http | https | stcp | xtcp, 默认 tcp
    type = tcp
    local_ip = 127.0.0.1
    local_port = 22
    # 是否加密, 默认为 false
    use_encryption = false
    # 是否压缩
    use_compression = false
    # 服务端端口
    remote_port = 6001
    # frps 将为同一组中的代理进行负载平衡连接
    group = test_group
    # 组应该有相同的组密钥
    group_key = 123456
    # 为后端服务开启健康检查, 目前支持 'tcp' 和 'http' 
    # frpc 将连接本地服务的端口以检测其健康状态
    health_check_type = tcp
    # 健康检查连接超时
    health_check_timeout_s = 3
    # 连续 3 次失败, 代理将会从服务端中被移除
    health_check_max_failed = 3
    # 健康检查时间间隔
    health_check_interval_s = 10
    [ssh_random]
    type = tcp
    local_ip = 127.0.0.1
    local_port = 22
    # 如果 remote_port 为 0 ,frps 将为您分配一个随机端口
    remote_port = 0
    # 如果要暴露多个端口, 在区块名称前添加 'range:' 前缀
    # frpc 将会生成多个代理，如 'tcp_port_6010', 'tcp_port_6011'
    [range:tcp_port]
    type = tcp
    local_ip = 127.0.0.1
    local_port = 6010-6020,6022,6024-6028
    remote_port = 6010-6020,6022,6024-6028
    use_encryption = false
    use_compression = false
    [dns]
    type = udp
    local_ip = 114.114.114.114
    local_port = 53
    remote_port = 6002
    use_encryption = false
    use_compression = false
    [range:udp_port]
    type = udp
    local_ip = 127.0.0.1
    local_port = 6010-6020
    remote_port = 6010-6020
    use_encryption = false
    use_compression = false
    # 将域名解析到 [server_addr] 可以使用 http://web01.yourdomain.com 访问 web01
    [web01]