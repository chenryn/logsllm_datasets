图2.3.5提示验证通过的代码位置
阅读图2.3.5中显示的反汇编代码，可以知道通过验证的程序分支的指令地址为
0x00401122。
0x00401102处的函数调用就是verify_password函数，之后在0x0040110A处将EAX中的
函数返回值取出，在0x0040110D处与0比较，然后决定跳转到提示验证错误的分支或提示验
证通过的分支。
58
---
## Page 84
第
提示验证通过的分支从0x00401122处的参数压栈开始。如果我们把返回地址覆盖成这个
2
地址，那么在0x00401102处的函数调用返回后，程序将跳转到验证通过的分支，而不是进入
戛
0x00401107处分支判断代码。这个过程如图2.3.6所示。
栈溢出
通过动态调试，发现栈顿中的变量分布情况基本没变。这样我们就可以按照如下方法构造
password.txt中的数据。
原
理与实践
正常情况下的
返回地址
正常情况下
的返回地址
00401101PUSHEDX
00401102CAL4_3_oVWr.00401005
bufler[0~3]
00401107ADDESP.4
0040110AMOVDWORDPTRSS:[EBP4EAX
0040110DCMPDWORDPTRSS:[EBP-40
buffer[4~7]
00401113PUSHOFFSET:Incomectp
00401111JESHORT 4_3_oVer.00401122
00401118CALL4_3_oveprn
dr
authentlcated
00401120JMP SHORT 4_3_OVer.0040112F
0040111DADDESP,4
前栈械EBP
00401122RUSHOFFSET:Congratlat.
00401127CALL3_over.print
返回地址
溢出后被改写
的新返回地址
验证通过的分支
图2.3.6栈溢出攻击示意图
仍然出于字节对齐、容易辨认的目的，我们将“4321”作为一个输入单元。
buffer[8]共需要两个这样的单元。
第3个输入单元将authenticated覆盖；第4个输入单元将前栈帧EBP值覆盖：第5个输入
单元将返回地址覆盖。
为了把第5个输入单元的ASCI码值0x34333231修改成验证通过分支的指令地址
0x00401122，我们将借助十六进制编辑工具UltraEdit来完成（0x40、0x11等ASCI码对应的
符号很难用键盘输入）。
步骤1：创建一个名为password.txt的文件，并用记事本打开，在其中写入5个“4321”
后保存到与实验程序同名的目录下，如图2.3.7所示。
图2.3.7制作触发栈溢出的输入文件
59
---
## Page 85
0
day
步骤2：保存后用UltraEdit_32重新打开，如图2.3.8所示。
安
全
 Ultraf dit-32 - [0:ny_booktchapter_4\4_3_owerflow_retDebug\pesword.txt]
teEdSearhBoetymFogConBacoadacedndowbop
lax
软件漏洞分析技术
13214321432143214321
图2.3.8制作触发栈溢出的输入文件
步骤3：将UltraEdit_32切换到十六进制编辑模式，如图2.3.9所示
2
word.txt)
向区
版
dancedWindow
-ox
D
wordtt
00000h:3332313433323134
16进制模式
3231：321432143214321
1C 20 C00:40100000
与文本模式
4321
切换快捷键
DOS
Moc3/1220
图2.3.9制作触发栈溢出的输入文件
步骤4：将最后4个字节修改成新的返回地址，注意这里是按照“内存数据”排列的，由
于“大顶机”的缘故，为了让最终的“数值数据”为0x00401122，我们需要逆序输入这4个字
节，如图2.3.10所示。
ord.txt]
后区
teEdSorhBoedymmForngCon SeooBdncedndowep
注意逆序输入！
C0  1 20C0  :4000000
1321432143214321
140100000
2214000
图2.3.10制作触发栈溢出的输入文件
步骤5：这时我们可以切换回文本模式，最后这4个字节对应的字符显示为乱码，如图2.3.11
所示。
60
---
## Page 86
第
 Ural dit3 (D:wny. hook Vchapter (V3 ewrtlow rerWiobugpswond.1xt]
2
dkShBoeefogCnSacroahncedmdotr
lox
章
dte
栈
43214321432143219
溢
出
修改后的文本模式
原
F1 Ln 1,Col. 18,Cw
D05
Mod:3/12/200
理
图2.3.11
制作触发栈溢出的输入文件
与
实
将password.txt保存后，用OlyDbg加载程序并调试，可以看到最终的栈状态如表2-3-4所示。
践
表2-3-4
栈帧数据
局部变量名
内存地址
偏移3处的值
偏移2处的值
偏移1处的值
偏移0处的值
buffer[0~3]
0x0012FB14
0x31(1')
0x32(*2')
0x33 (*3)
0x34 (*4′)
buffer[4~7]
0x0012FB18
0x31 (°1′)
0x32(*2')
0x33 (*3')
0x34(°4')
authenticated（被覆盖前）
0x0012FB1C
0x00
00x0
0x00
0x01
authenticated（被覆盖后）
0x0012FB1C
0x31 (1′)
0x32 (*2')
0x33 (*3′)
0x34 (*4')
前栈顿EBP（被鞭盖前）
0x0012FB20
0x00
0x12
OxFF
0x80
前栈帧EBP（被覆盖后）
0x0012FB20
0x31 (°1′)
0x32(°2')
0x33 (*3′)
0x34(*4')
返回地址（被覆盖前）
0x0012FB24
0x00
0x40
0x11
0x07
返回地址（被覆盖后）
0x0012FB24
0x00
0x40
0x11
0x22
程序执行状态如图2.3.12所示。
4_3_ovarflow_reg.ese has encounbered a problem and
gybeloe
Far
cick.hero
Debug
图2.3.12栈溢出成功改变了程序执行流程
由于栈内EBP等被覆盖为无效值，使得程序在退出时堆栈无法平衡，导致崩溃。虽然如
此，我们已经成功地淹没了返回地址，并让处理器如我们设想的那样，在函数返回时直接跳转
到了提示验证通过的分支。
61
---
## Page 87
0
day安全：
2.4
代码植入
2.4.1
代码植入的原理
软件漏洞分析技术
本章第2节和第3节已经依次展示了淹没相邻变量，改变程序流程和淹没返回地址，改变
程序流程的方法。本节将给您介绍一个更有意思的实验一一通过栈溢出让进程执行输入数据中
植入的代码。
在上节实验中，我们让函数返回到main函数的验证通过分支的指令。试想一下，如果我
们在buffer里包含我们自已想要执行的代码，然后通过返回地址让程序跳转到系统栈里执行，
我们岂不是可以让进程去执行本来没有的代码，直接去做其他事情了！
（第2版）
用包含可正
确执行的机
器码填充缓
冲区，并将
返回地址覆
盖成buffer
的起址，成
正常情况下
溢出后被改写
功后可以让
的返回地址
的新返回地址
程序跳到栈
区执行我们
输入的代
码！
CALL veri fy_password
ADDESP.4
MOV DWORD PTR SS:[EBP4], EAX
authenticated（覆盖）
OMP DWORD PTR SS:[EBP4], 0
前栈帧EBP（覆盖）
返回地址（覆盖）
正常情况下的
返回地址
图2.4.1利用栈溢出植入可执行代码的攻击示意图
如图2.4.1所示，在本节实验中，我们准备向password.txt文件里植入二进制的机器码，并
用这段机器码来调用Windows的一个API函数MessageBoxA，最终在桌面上弹出一个消息框
并显示“failwest”字样。
2.4.2向进程中植入代码
为了完成在栈区植入代码并执行，我们在上节的密码验证程序的基础上稍加修改，使用如
62
---
## Page 88
第
下的实验代码。
2
#include 
章
#include
栈
#definePASSWORD*1234567*
溢
int verify_password (char *password)
出
原
int authenticated;
理与实
char buffer[44];
authenticated=strcmp(password,PASswoRD);
strcpy(buffer,password)://over flowed here!
践
return authenticated;
main()
int valid_flag=0;
char password[1024];
FILEfp;
LoadLibrary("user32.dll*);//prepare for messagebox
(（（.+mx,.xpxomssed.）uadog=dg）i)
exit(o);
fscanf(fp,"ss",password);
if(valid_flag)
else
printf("Congratulation!You have passed the verification!\n"):
fclose（fp):
这段代码在2.3节溢出代码的基础上修改了3处。
（1）增加了头文件windows.h，以便程序能够顺利调用LoadLibrary函数去装载user32.dll。
（2）verify_password函数的局部变量buffer由8字节增加到44字节，这样做是为了有足
够的空间来“承载”我们植入的代码。
（3）main函数中增加了LoadLibrary(user32.dll"）用于初始化装载user32.dll，以便在植入代
码中调用MessageBox。
实验环境如表2-4-1所示。
63
---
## Page 89
0
day
表2-4-1实验环境
安
推荐使用的环境
备注
全
操作系统
Windows XP SP2
其他Win32操作系统也可进行本实验
：
编译器
VisualC++6.0
如使用其他编译器，需重新调试
软
件
编译选项
默认编详选项
VS2003和VS2005中的GS编详选项会使栈溢出实验失败
漏
build版本
debug版本
如使用release版本，则需要重新调试
洞
分
地址可能依赖于操作系统的补丁版本等。这些地址的确定方法在实验指导中均给出了详细的说明。
析
技
用VC6.0将上述代码编译（默认编译选项，编译成debug版本），得到有栈溢出的可执行
术
文件。在同自录下创建password.txt文件用于程序调试。
（第
我们准备在password.txt文件中植入二进制的机器码，在password.txt攻击成功时，密码验
证程序应该执行植入的代码，并在桌面上弹出一个消息框显示“failwest”字样。
2
让我们在动手之前回顾一下我们需要完成的几项工作。
版
（1）分析并调试漏洞程序，获得淹没返回地址的偏移。
（2）获得buffer的起始地址，并将其写入password.txt的相应偏移处，用来冲刷返回地址。
（3）向password.txt中写入可执行的机器代码，用来调用API弹出一个消息框。
本节验证程序里verify_password中的缓冲区为44个字节，按照前边实验中对栈结构的分
析，我们不难得出栈顿中的状态。
如果在password.txt中写入恰好44个字符，那么第45个隐藏的截断符null将冲掉
authenticated低字节中的1，从而突破密码验证的限制。我们不妨就用44个字节作为输入来进
行动态调试。
出于字节对齐、容易辨认的目的，我们把“4321”作为一个输入单元。
buffer[44]共需要11个这样的单元。
第12个输入单元将authenticated覆盖；第13个输入单元将前栈帧EBP值覆盖：第14个
输入单元将返回地址覆盖。
分析过后，我们需要进行调试验证分析的正确性。首先，在password.txt中写入11组“4321”
共44个字符，如图2.4.2所示
 posword.txtNotepod