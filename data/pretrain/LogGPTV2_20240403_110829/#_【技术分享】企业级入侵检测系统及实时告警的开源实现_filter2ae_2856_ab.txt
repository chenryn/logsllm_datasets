        }
      }
    }
利用webhook可以向任意Web服务发送请求，这是我们想要的。通过这个接口非常便于与企业内的其他已有平台进行交互，或者可以通过如今流行的IM公众号。
这里以蓝信为例，需要先请求获取一个token，然后发送JSON字串到API即可，其中JSON字串的内容为：
了解了基础的Watcher配置方法和蓝信接口后，我们来制作告警任务。拟一个目标：在每天9、14、18点查询当日日志数量，日志类型的统计，来源IP统计。
    PUT _xpack/watcher/watch/attack_alert
    {
        "trigger" :{"schedule" : {"cron" : "0 0 9,14,18 * * ?"}},
        "input": {
            "chain": {
                "inputs": [
                    ##发送HTTP请求到蓝信获取token
                    {
                        "first": {
                            "http" :{
                                "request": {
                                    "host": "lxopen.api.xxx.com","port": 80,
                                    "path":  "/ffff/token",
                                    "params": {"grant_type":"client_credential","appid":"12345","secret":"abcde"}
                                }
                            }
                        }                   
                    },
                    ##进行查询得到目标结果
                    {
                        "all": {
                          "search": {
                                "request": {
                                    "indices": "",
                                    "body": {
                                        "query": { 
                                            "bool": {
                                                "must": {"match_all": {}}
                                            }
                                        },
                                        "aggs" : {
                                            "ip_list" : {
                                                "terms" : { "field" : "src_ip.keyword" }
                                            },
                                            "type_list" : {
                                                "terms" : { "field" : "event_type.keyword" }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        ##只要数量大于0就执行ACTION
        "condition" :{
            "compare" : {"ctx.payload.all.hits.total": {"gt": 0}}
        },
         "actions": {
            "attack_alert" : {
                "throttle_period" : "600s", //每两次告警间的最小时间间隔
                "webhook" : {
                    "method" : "POST",
                    "headers": {"Content-type": "application/json"},
                    "host" : "lxopen.api.xxx.com",
                    "port" : 80,
                    "path" :"/xxxx/message/send", 
                    "params" : {"access_token" : "{{ctx.payload.first.access_token}}"}, //传入前面获取到的 token
                    #构造我们的文本消息
                    "body" : "{"toall": "true","tousers": ["180******0"],"msgtype": "text","text": {"content": "=======Total {{ctx.payload.all.hits.total}}\n{{#ctx.payload.all.aggregations.type_list.buckets}}{{key}} {{doc_count}}\n{{/ctx.payload.all.aggregations.type_list.buckets}}\n=======Src IP\n{{#ctx.payload.all.aggregations.ip_list.buckets}}{{key}} {{doc_count}}\n{{/ctx.payload.all.aggregations.ip_list.buckets}}"}}"
                }
            }
        }
    }
创建成功后，蓝信客户端就可以每天定时收到当天的日志统计报告了。
只需要改下接口，也可以同时发送到其他如微信等平台上。
第二个例子，来个干货。
针对敏感操作的日志记录。对于敏感或者储存重要数据的服务器，如果发生了入侵事件我们可以通过命令记录来查看黑客入侵的方式，但有经验的入侵者往往会删去这些记录。为了防止这一点，我们有必要对命令历史记录做一个增强，让它能较完整的记录命令相关信息（时间、命令、登录用户、当前用户等），同时能实时将日志回传到es。
在/etc/bash.bashrc行末加入以下内容：
    HISTDIR='/var/log/command.log'
    if [ ! -f $HISTDIR ];then
        touch $HISTDIR
    chmod 666 $HISTDIR
        fi
        export HISTTIMEFORMAT="{"TIME":"%F %T","HOSTNAME":"$HOSTNAME","LI":"$(who -u am i 2>/dev/null| awk '{print $NF}'|sed -e 's/[()]//g')","LU":"$(who am i|awk '{print $1}')","NU":"${USER}","CMD":""
        export PROMPT_COMMAND='history 1|tail -1|sed "s/^[ ]+[0-9]+  //"|sed "s/$/"}/">> /var/log/command.log'
执行 source /etc/bash.bashrc，就可以在/var/log/command.log看到日志
JSON类型的日志，通过logstash中配置日志回传：
    input {
      ...
      file {
        path => "/var/log/command.json"
        type => "cmd"
      }
      ...
    }
    filter {
      ...
      if [type] == "cmd" {
        json{
          source => "message"
        }
      }
      ...
    }
    output {
      if [type] == "attack" or [type] == "cmd"{
        elasticsearch {
          hosts => ["localhost:9200"]
          user => elastic
          password => changeme
        }
      }
    }
这样ES就会实时收集主机的shell日志了。
最后完善下告警任务，在Input里加入：
     {
        "cmd": {
          "search": {
                "request": {
                    "indices": "",
                    "types" : "cmd",
                    "body": {
                        "query": { 
                            "bool": {
                                "must": {"match_all": {}}
                            }
                        }
                    }
                }
            }
        }
    }
在告警内容里面添加：
    \n=======CMD\n{{#ctx.payload.cmd.hits.hits}}{{HOSTNAME}} {{LI}}:{{CMD}}\n{{/ctx.payload.cmd.hits.hits}}
效果预览像这样：
一旦服务器上有操作产生，我们便能立马得到通知，进行应急响应。
最后
对于告警，我想说的是一定要记得：满篇的告警是不会有人去看的。重点过多也就没有重点了，告警一定要精而不要多，只针对一些关键的异常告警往往能事半功倍。
**参考链接**
蓝信开放平台 
Getting Started with Watcher
Suricata IDS 