### Table IX: Pattern Examples

| Log Example Pattern | Pattern Description |
|---------------------|----------------------|
| 2012-05-25 15:02:46 GET /proxy.txt - 80 - - 200 0 0 0 | (YYYYMMDD) (TIME) GET \W proxy \W txt \W (NUMERICAL) \W \W (NUMERICAL) (NUMERICAL) (NUMERICAL) (NUMERICAL) |
| 2012-05-25 15:02:46 GET /proxy.txt - 80 - - 200 0 0 0 | (YYYYMMDD) (TIME) GET \W proxy \W txt \W (NUMERICAL) \W \W (NUMERICAL) (NUMERICAL) (NUMERICAL) (NUMERICAL) |
| 2012-05-25 15:02:46 GET /proxy.txt - 80 - - 200 0 0 0 | (YYYYMMDD) (TIME) GET \W proxy \W txt \W (NUMERICAL) \W \W (NUMERICAL) (NUMERICAL) (NUMERICAL) (NUMERICAL) |
| 2012-05-25 15:02:46 GET /proxy.txt - 80 - - 200 0 0 0 | (YYYYMMDD) (TIME) GET \W proxy \W txt \W (NUMERICAL) \W \W (NUMERICAL) (NUMERICAL) (NUMERICAL) (NUMERICAL) |

| Log Example | Pattern Description |
|-------------|----------------------|
| 2012-05-25 15:02:46 GET /proxy.txt - 80 - - 200 0 0 0 | (YYYYMMDD) (TIME) GET \W proxy \W txt \W (NUMERICAL) \W \W (NUMERICAL) (NUMERICAL) (NUMERICAL) (NUMERICAL) |
| 2012-05-25 15:02:46 GET /proxy.txt - 80 - - 200 0 0 0 | (YYYYMMDD) (TIME) GET \W proxy \W txt \W (NUMERICAL) \W \W (NUMERICAL) (NUMERICAL) (NUMERICAL) (NUMERICAL) |
| 2012-05-25 15:02:46 GET /proxy.txt - 80 - - 200 0 0 0 | (YYYYMMDD) (TIME) GET \W proxy \W txt \W (NUMERICAL) \W \W (NUMERICAL) (NUMERICAL) (NUMERICAL) (NUMERICAL) |
| 2012-05-25 15:02:46 GET /proxy.txt - 80 - - 200 0 0 0 | (YYYYMMDD) (TIME) GET \W proxy \W txt \W (NUMERICAL) \W \W (NUMERICAL) (NUMERICAL) (NUMERICAL) (NUMERICAL) |

| Log Example | Pattern Description |
|-------------|----------------------|
| /var/www/html/research/robust/robust | /var/www/html/research/robust/robust |
| asm-website/main/contents.php on line 90 | asm-website/main/contents.php on line 90 |

| Pattern | Pattern Description |
|---------|----------------------|
| /var/www/html/research/robust/robust | /var/www/html/research/robust/robust |
| asm-website/main/contents.php on line 90 | asm-website/main/contents.php on line 90 |

| Pattern | Pattern Description |
|---------|----------------------|
| (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) | (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) |
| (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) | (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) |
| (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) | (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) |
| (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) | (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) |

| Log Example | Pattern Description |
|-------------|----------------------|
| (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) | (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) |
| (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) | (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) |
| (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) | (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) |
| (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) | (NUMERICAL) (NUMERICAL) (TIME) www httpd [(NUMERICAL)] [error] [client (IPV4)] php notice undefined variable tags in /var/www/html/research/robust/robust asm-website/main/contents.php on line (NUMERICAL) |

| Log Example | Pattern Description |
|-------------|----------------------|
| 2012-07-09 21:21:06,975 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: Receiving block blk | (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) |
| 2012-07-09 21:21:06,975 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: Receiving block blk | (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) |
| 2012-07-09 21:21:06,975 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: Receiving block blk | (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) |
| 2012-07-09 21:21:06,975 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: Receiving block blk | (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) |

| Log Example | Pattern Description |
|-------------|----------------------|
| 15274 src: 138.15.164.121:57053 dest: 138.15.164.127:41010 (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) (NUMERICAL) src (IPV4) (NUMERICAL) dest (IPV4) (NUMERICAL) | 15274 src: 138.15.164.121:57053 dest: 138.15.164.127:41010 (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) (NUMERICAL) src (IPV4) (NUMERICAL) dest (IPV4) (NUMERICAL) |
| 15274 src: 138.15.164.121:57053 dest: 138.15.164.127:41010 (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) (NUMERICAL) src (IPV4) (NUMERICAL) dest (IPV4) (NUMERICAL) | 15274 src: 138.15.164.121:57053 dest: 138.15.164.127:41010 (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) (NUMERICAL) src (IPV4) (NUMERICAL) dest (IPV4) (NUMERICAL) |
| 15274 src: 138.15.164.121:57053 dest: 138.15.164.127:41010 (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) (NUMERICAL) src (IPV4) (NUMERICAL) dest (IPV4) (NUMERICAL) | 15274 src: 138.15.164.121:57053 dest: 138.15.164.127:41010 (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) (NUMERICAL) src (IPV4) (NUMERICAL) dest (IPV4) (NUMERICAL) |
| 15274 src: 138.15.164.121:57053 dest: 138.15.164.127:41010 (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) (NUMERICAL) src (IPV4) (NUMERICAL) dest (IPV4) (NUMERICAL) | 15274 src: 138.15.164.121:57053 dest: 138.15.164.127:41010 (YYYYMMDD) (TIME) (NUMERICAL) INFO org.apache.hadoop.hdfs.server.datanode.DataNode receiving block blk (NUMERICAL) (NUMERICAL) src (IPV4) (NUMERICAL) dest (IPV4) (NUMERICAL) |

### F. Search Results
Examples of search results are presented in Table X. On average, it takes 6.44e-5 seconds to return a query result.

### Table X: Query Examples

| Query | Result |
|-------|--------|
| =,2012-05-25 05:49:06 GET /virtualserver/vswebapp.exe view=17&vm=k%2 dkato%2 ddc 3 80 k-kato-dc 2 \0000010816740 mozilla/4.0... | 2012-05-25 05:49:06 GET /virtualserver/vswebapp.exe view=17&vm=k%2 dkato%2 ddc 3 80 k-kato-dc 2 \0000010816740 mozilla/4.0... |
| >,2012-07-09 21:26:57,214 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: packetresponder 1 for block blk... | 2012-07-09 21:26:57,214 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: packetresponder 1 for block blk... |
| >,2012-07-09 21:16:13,960 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: packetresponder 0 for block blk... | 2012-07-09 21:16:13,960 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: packetresponder 0 for block blk... |
| >,2012-07-09 21:26:52,791 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: packetresponder 2 for block blk... | 2012-07-09 21:26:52,791 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: packetresponder 2 for block blk... |

### IX. Conclusion & Discussion

#### A. Conclusion
In this manuscript, we proposed HLAer, a novel system for heterogeneous log analysis. HLAer achieves the following goals concurrently:
1. Heterogeneous log categorization and organization.
2. Automatic log format recognition.
3. Heterogeneous log indexing.

HLAer supports queries and outlier detection on heterogeneous logs. It is constructed in a purely data-oriented fashion, making it highly adaptable to arbitrary log formats, applications, or systems. The current implementation of HLAer is scalable to Big Data. Technical details of HLAer are documented in this manuscript along with comprehensive experiments. A comparison between HLAer and other log analysis tools is also presented. The current implementation of HLAer is demonstrated to achieve the above goals and outperforms other log analysis tools in terms of clustering/outlier detection performance, scalability, and generalizability.

#### B. Further Discussions
1. **Efficiency of Outlier Detection**: 
   - The efficiency for offline outlier detection is not a major concern as long as the clustering algorithm and similarity/distance calculation are efficient.
   - Online outlier detection, however, has more critical demands for high efficiency. Currently, online outlier detection is implemented via sequence-profile alignment, which has quadratic complexity. This is not ideal for an online setting. Improvement can be achieved by implementing a specific parser for each pattern and assigning the parsers that most favorably match the new log to parse the new log.

2. **HLAer Incremental Updates**:
   - HLAer can be updated in two ways:
     1. **Offline Upgrade**: Once the most recent logs are accumulated after a certain period, a new HLAer can be built from these logs. This method will automatically adopt the most recent system status into HLAer.
     2. **Online Upgrade**: When a new log comes in, it is routed down to a certain node of the HLAer tree, and the statistics of that node (e.g., pattern profiles) will be updated correspondingly. New nodes can be grown if there are enough similar logs to form a cluster. The dynamic growth of the tree can also be utilized as a real-time reflection of the system's dynamics.

### Appendix A: DBScan Algorithm

#### A. Definitions of Distances
- **Reachability-Distance (ε, minPts)(d, p)**:
  - If |neighborPts(d)| < minPts, then reachability-distance(ε, minPts)(d, p) = max(core-distance(ε, minPts)(p), distance(d, p)).
  - Otherwise, it is undefined.

- **Core-Distance (ε, minPts)(d)**:
  - If |neighborPts(d)| < minPts, then core-distance(ε, minPts)(d) = distance to the minPts-th closest point.
  - Otherwise, it is undefined.

#### B. The DBScan Algorithm
- **References**:
  - M. Ankerst, M. M. Breunig, H.-P. Kriegel, and J. Sander, “OPTICS: Ordering Points To Identify the Clustering Structure,” ACM SIGMOD Record, vol. 28, no. 2, pp. 49–60, 1999.
  - D. Arlia and M. Coppola, “Experiments in Parallel Clustering with DBSCAN,” in Euro-Par 2001 Parallel Processing, Springer, 2001, pp. 326–331.
  - R. Vaarandi, “A Breadth-First Algorithm for Mining Frequent Patterns from Event Logs,” in Proceedings of the 2004 IFIP International Conference on Intelligence in Communication Systems, 2004, pp. 293–308.
  - W. Xu, L. Huang, A. Fox, D. Patterson, and M. I. Jordan, “Detecting Large-Scale System Problems by Mining Console Logs,” in Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles, 2009, pp. 117–132.
  - K. Yamanishi and Y. Maruyama, “Dynamic Syslog Mining for Network Failure Monitoring,” in Proceedings of the Eleventh ACM SIGKDD International Conference on Knowledge Discovery in Data Mining, 2005, pp. 499–508.
  - K. Q. Zhu, K. Fisher, and D. Walker, “Incremental Learning of System Log Formats,” ACM SIGOPS Operating Systems Review, vol. 44, no. 1, pp. 85–90, 2010.