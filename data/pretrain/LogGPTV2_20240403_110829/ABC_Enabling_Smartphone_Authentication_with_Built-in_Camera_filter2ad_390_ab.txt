between the smartphone and the veriﬁer. The smartphone uses
the wireless channel to send the captured images to the veriﬁer.
The wireless channel may vary depending upon availability.
B. Threat Model
We assume a powerful adversary, who knows everything
about the victim user and may sniff and alter the communica-
tion between the victim and the veriﬁer, e.g., through deploying
a malicious interface. The objective of the adversary is to im-
personate a legitimate user and authorize a malicious request.
We also assume that the adversary can access any images that
the victim captures with her smartphone. Those images may be
hard to be kept private anyway, for example, pictures shared
through online social networks such as Facebook. However,
we assume that the adversary does not physically possess the
victim’s smartphone.
We now use the POS terminal example again and discuss
potential attacks in two cases: 1) The adversary is a mali-
cious user who wants to make a payment with a victim’s
bank account. She knows the victim’s account identiﬁer and
has pictures taken by the victim device. The adversary may
perform the following attacks: Replay attack - the adversary
replays the previous image tokens from the victim smartphone
to the veriﬁer. Such tokens can be obtained through eaves-
dropping the wireless channel of the victim smartphone from
a previous authentication session. Fingerprint forgery attack -
the adversary uploads a forged image token that is composed of
the victim smartphone’s ﬁngerprint and the adversary’s image.
The victim smartphone’s ﬁngerprint can be obtained from
the victim’s public images. 2) The adversary is a malicious
merchant who wants to lure a victim to authorize a malicious
payment. She controls the POS terminal that processes the
victim’s transaction. This adversary may further conduct Man
in the middle attack - The adversary secretly modiﬁes the
victim user’s ongoing transaction. She controls the terminal
3
TABLE I.
EXAMPLES OF IMAGE SENSORS FOR DIGITAL AND SMARTPHONE CAMERAS. A SMARTPHONE’S IMAGE SENSOR IS NORMALLY TENS OF TIMES
SMALLER THAN A TRADITIONAL DIGITAL CAMERA’S
Digital camera
Canon EOS 5D Mark II
Sony A850
Nikon D300s
Pentax Pentax K-30
Sigma SD1 Merrill
(mm2)
Sensor size
36.00×24.00
35.90×24.00
23.60×15.80
23.70×15.70
23.50×15.70
pixel amount
(million)
21.1
24.6
12.3
16.3
15.36
Smartphone camera
Samsung Galaxy S4
Apple iPhone 6
HTC One X
LG G3
Nokia Lumia 920
Sensor size
(mm2)
4.69 ×3.53
4.89×3.67
4.54×3.42
4.69×3.53
4.80×3.60
pixel amount
(million)
13
8
8
13.13
8.7
(a) Matching image pairs captured
by iPhone 6
(b) Non-matching image pairs cap-
tured by iPhone 6
(c) Matching image pairs captured
by Galaxy Note 5
(d) Non-matching image pairs cap-
tured by Galaxy Note 5
Fig. 2. Similarity statics for images captured by smartphone cameras. PCE measures the correlation between two images’ noise residues. For both iPhone 6 and
Galaxy Note 5, images taken by the same smartphone (matching image pair) show signiﬁcantly higher correlation than images captured by different smartphone
(non-matching image pair).
to upload a modiﬁed payment request to the bank, instead of
uploading the payment shown on the screen of the terminal.
C. Design Goals
We envision the following design goals for a robust and
usable smartphone authentication system:
Attack resilience: the protocol should only accept fresh
images captured by legitimate smartphones. It should be able
to detect forged images and the images collected from the
victim’s previous authentication sessions.
Real-time authentication: the protocol should be able to
provide accurate and real-time authentication. Both the ﬁnger-
print matching process and the attack detection process should
be efﬁcient.
User-friendliness: the protocol should provide simple and
convenient interaction processes for both registration and au-
thentication. The involved overhead should be minimal and
tolerable for all involved entities.
IV. PROPOSED SYSTEM
This section presents our real-time smartphone authenti-
cation system. We ﬁrst
investigate the feasibility of using
PRNU as a smartphone’s unique identity. We then discuss
two baseline authentication schemes and their vulnerabilities.
Finally, we present our full ﬂedged authentication protocol that
achieves the aforementioned design goals.
A. Smartphone Camera Fingerprinting
Table I [1] shows that although smartphone cameras and
digital cameras use similar types of image sensors, a smart-
phone’s image sensor is often tens of times smaller than the
image sensor of a traditional digital camera. The reduction in
the sensor’s dimension signiﬁcantly degrades the light received
by the image sensor, and leads to a worse signal to noise ratio
(SNR) in captured images. Since the quality of the extracted
ﬁngerprint (W = IK + Ξ) is mainly determined by the image’s
noise components, we have to ﬁnd out whether the existing ﬁn-
gerprint detection strategy is suitable for smartphone cameras.
To investigate the characteristics of a smartphone camera’s
PRNU, we collected over 16,000 images from 40 individual
smartphones and evaluated their noise residues. Our experi-
mental results (Fig. 2) demonstrate a very strong correlation
between noise residues from the same smartphone camera.
The ﬁngerprint generated by a smartphone camera is much
stronger than the ﬁngerprint generated by a traditional digital
camera. This is likely caused by the small size of the pixels
in a smartphone’s image sensor. With the same level of
manufacturing imperfection, small pixels exhibit stronger non-
uniformity, and hence introduce a “high-quality” ﬁngerprint in
a captured image.
We now demonstrate the strong correlation between images
captured by smartphone cameras. Since an authentication is
usually carried out in an indoor environment, we look at the
scenario where the tested image and the reference image are
both indoor images. We note that this is also the worst case
scenario since the quality of the ﬁngerprint on a captured
image signiﬁcantly increases with the rise of the intensity of
ambient light (will be shown in section VI).
We construct two types of image pairs: 1) matching image
pairs, each of which contains two images taken by the same
smartphone; 2) non-matching image pairs, each of which con-
tains two images taken by different smartphones. For iPhone 6,
we tested 1250 matching image pairs and 1150 non-matching
image pairs. For Galaxy Note 5, we tested 4000 matching
4
Fig. 3.
ROC curve for ﬁngerprint matching. True positive rate measures
the percentage of matching images that are correctly identiﬁed. False positive
rate measures the percentage of non-matching images that are identiﬁed as
matching ones.
image pairs and 5300 non-matching image pairs. Fig. 2 shows
the distribution of the obtained PCE values. It can be observed
that, for both smartphone models,
the PCE values of the
matching image pairs are signiﬁcantly higher than the PCE
values of non-matching image pairs. By using thresholding to
differentiate matching image pairs from non-matching image
pairs, we obtained the Receiver operating characteristic (ROC)
shown in Fig. 3. Minimizing the total error rate of ﬁngerprint
matching based on Fig. 3, we choose 7.4338 as the matching
threshold for iPhone 6 and 13.0704 for Galaxy note 5. For
iPhone 6, the chosen threshold leads to a false positive rate of
0.08% at a false negative rate of 0.71%. For Galaxy Note 5,
the chosen threshold leads to a false positive rate of 0.16% at
a false negative rate of 0.94%.
For both smartphone models, the PRNU achieves high
accuracy in differentiating image pairs even when the ambient
light intensity is low. This suggests that one image alone can
be used as a reference ﬁngerprint to uniquely identify a smart-
phone. The reason why some image pairs are wrongly detected
is because the ﬁngerprints on those images are relatively weak.
In order to further improve the identiﬁcation accuracy, the
veriﬁer can increase the intensity of ambient light or use a
reference ﬁngerprint extracted from a bright image. As will
be shown in section VI, if the images are captured in a bright
environment (e.g. outdoor), the ﬁngerprint detection strategy
can achieve 100% accuracy.
Due to the high quality ﬁngerprint, smartphone camera
ﬁngerprinting differs from the digital camera ﬁngerprinting in
the following aspects: Fingerprint detection strategy - with
a high quality ﬁngerprint on every captured image, we do
not need to acquire a large number of images in order to
estimate a reference ﬁngerprint any more. Therefore, for a
smartphone camera, we can use only one image’s noise residue
as the reference ﬁngerprint. Fingerprint forgery - use of PRNU
for smartphone camera ﬁngerprinting is vulnerable to the
ﬁngerprint forgery attack. With a high quality ﬁngerprint on
every image taken by a smartphone camera, the adversary can
conduct the ﬁngerprint forgery attack with only one reference
image. Since existing forgery detection mechanisms are not
practical and unreliable, it is a grand challenge to provide a
trustworthy ﬁngerprinting result.
Fig. 4. Usecase: a user captures an image shown on the veriﬁer’s interface
to be authenticated (or registered).
Fig. 5. Basic Scheme I. Registration: the user uploads an arbitrary image
captured by her smartphone. Authentication: the veriﬁer challenges the user to
capture a freshly constructed QR code shown on its interface. The QR code is
encoded with an abstract of the ongoing transaction, which enables the user
to verify the information before authorizing.
B. Basic Authentication Schemes
Before presenting the full ﬂedged ABC protocol
that
achieves all three design goals outlined in Section III-C, we
now introduce the framework of the camera ﬁngerprint based
smartphone authentication system and two baseline schemes.
The ﬁrst scheme can not distinguish a forged ﬁngerprint from
a genuine one. The second scheme can detect forgery attacks,
but introduces a huge overhead to the veriﬁer and the user.
1) System Framework: Fig. 4 shows a use case of the
two-phase authentication process. Registration:
the veriﬁer
constructs a ﬁngerprint proﬁle for a target smartphone. This
phase collects the target smartphone’s reference ﬁngerprint,
smartphone make and model. The registration process is con-
ducted on the veriﬁer’s interface. Authentication: the veriﬁer
authenticates a smartphone in real time. The veriﬁer challenges
the user to upload freshly captured images and uses the ﬁn-
gerprint derived from those images to authenticate the device.
2) Basic Scheme I: This authentication scheme, shown in
Fig. 5, can defeat the replay attack and the man in the middle
attack. It integrates a challenge response scheme that enforces
the user to capture a freshly constructed scene embedded with
an abstract of the ongoing transaction. We propose to use a
Quick Response Code (QR code) as the challenge since it can
carry long messages and support fast image content matching.
The registration phase has no constraint on the user’s
reference image I(r). Upon receiving the reference image
uploaded by the user, the veriﬁer extracts the ﬁngerprint ˆK(c)
contained in this image and uses it to construct a proﬁle P(c)
for this smartphone.
During the authentication phase, upon receiving the user’s
authentication request, the veriﬁer generates a QR code I(s)
5
Algorithm 1 Triangle Test
F1 function TriangleTest(I(q),{W(1), ..., W(N )})
W(q) ← F (I(q))
1.
for i:= 1 to N do
2.
3.
4.
5.
6.
7.
8.
η ← P CE(W(i), W(q))
If (η > threshold) then
end for
Accept.
end function
Reject
end if
Fig. 6. Basic Scheme II. Registration: the user uploads one image freshly
captured by her smartphone and all other images the smartphone has ever
captured. Authentication: this process is similar to the process in basic scheme
I, except that triangle test is applied to detect forged images.
that encodes an abstract of the ongoing transaction ω, a random
string str and a time stamp T , displays this QR code on
its interface, and challenges the user to capture it. The user
photographs the QR code with her smartphone and examines
the transaction embedded in the QR code. In this stage, any
modiﬁcation to the user’s request will be noticed by the
user (defeat man in the middle attack). She then uploads the
captured image I(c) to the veriﬁer. Finally, the veriﬁer performs
image content matching and ﬁngerprint matching to make the
authentication decision. Image content matching ensures the
liveness of the authentication process through detecting the
newly presented QR code in the received image. Fingerprint
matching veriﬁes the producer of the received image by
matching the noise residue extracted from the QR image to the
target smartphone’s reference ﬁngerprint. A legitimate image
token should consist of the challenging QR code and the target
smartphone’s ﬁngerprint.
Although this scheme provides great convenience and
strong resistance against replay attacks and man in the middle
attacks, it is vulnerable to ﬁngerprint forgery attacks. During
the authentication process, the adversary could capture the
presented QR code with a foreign smartphone and embed the
victim smartphone’s ﬁngerprint in the captured image. Since
the forged image contains both the challenging QR code and
the victim smartphone’s ﬁngerprint, the veriﬁer will accept this
image as a legitimate token.
3) Basic Scheme II: To address the ﬁngerprint forgery at-
tack against Basic Scheme I, Basic Scheme II adopts the state-
of-the-art forgery detection mechanism named triangle test.
The main reason for not using the fragile ﬁngerprint detection
technique is that transmitting large number of uncompressed
raw images will lead to a huge latency as discussed in section
II-B. With a complete history image set, triangle test can
determine with a high level of conﬁdence whether or not
the received image contains a forged ﬁngerprint. The triangle
test has two requirements for the veriﬁer: 1) the reference
ﬁngerprint ˆK(c) for the target smartphone should be extracted
from a private image that is not accessible to the adversary; 2)
the veriﬁer should maintain a history image set for the target
smartphone. This image set contains all of this smartphone’s
6
public images that might be accessible to the adversary.
Fig. 6 shows the second baseline authentication scheme.
The registration phase of this scheme requires the user to
upload their history image set {I1, ..., IN} and a freshly
captured image I(r). The veriﬁer extracts the noise residues
of these images and uses them to construct a proﬁle P(c) for
this smartphone.
During the authentication phase, this scheme also asks