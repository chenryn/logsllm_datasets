title:VTPin: practical VTable hijacking protection for binaries
author:Pawel Sarbinowski and
Vasileios P. Kemerlis and
Cristiano Giuffrida and
Elias Athanasopoulos
VTPin: Practical VTable Hijacking Protection for Binaries
Pawel Sarbinowski
Vrije Universiteit Amsterdam
PI:EMAIL
Vasileios P. Kemerlis
Brown University
PI:EMAIL
Elias Athanasopoulos
Vrije Universiteit Amsterdam
PI:EMAIL
Cristiano Giuffrida
Vrije Universiteit Amsterdam
PI:EMAIL
ABSTRACT
VTable hijacking has lately been promoted to the de facto technique
for exploiting C++ applications, and in particular web browsers.
VTables, however, can be manipulated without necessarily corrupt-
ing memory, simply by leveraging use-after-free bugs. In fact, in
the recent Pwn2Own competitions all major web browsers were
compromised with exploits that employed (among others) use-after-
free vulnerabilities and VTable hijacking.
In this paper, we propose VTPin: a system to protect against
VTable hijacking, via use-after-free vulnerabilities, in large C++
binaries that cannot be re-compiled or re-written. The main idea be-
hind VTPin is to pin all the freed VTable pointers on a safe VTable
under VTPin’s control. Speciﬁcally, for every object deallocation,
VTPin deallocates all space allocated, but preserves and updates
the VTable pointer with the address of the safe VTable. Hence, any
dereferenced dangling pointer can only invoke a method provided
by VTPin’s safe object. Subsequently, all virtual-method calls due
to dangling pointers are not simply neutralized, but they can be
logged, tracked, and patched.
Compared to other solutions that defend against VTable hijack-
ing, VTPin exhibits certain characteristics that make it suitable for
practical and instant deployment in production software. First, VT-
Pin protects binaries, directly and transparently, without requiring
source compilation or binary rewriting. Second, VTPin is not an
allocator replacement, and thus it does not interfere with the allo-
cation strategies and policies of the protected program; it intervenes
in the deallocation process only when a virtual object is to be freed
for preserving the VTable pointer. Third, VTPin is fast; Mozilla
Firefox, protected with VTPin, experiences an average overhead of
1%–4.1% when running popular browser benchmarks.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Keywords
Control-ﬂow hijacking, use-after-free, VTable protection
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05–09, 2016, Los Angeles, CA, USA
c(cid:2) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991121
1.
INTRODUCTION
The recent advances in software hardening have undoubtedly
made exploitation a challenging craft [45]. Yet, despite the plethora
of defenses in place [37], attackers still ﬁnd ways to compromise
essential commodity software, like web browsers [5, 6]. Modern
exploits are highly sophisticated and typically leverage a variety of
different vulnerabilities to bypass established protections, such as
address space layout randomization (ASLR) [42], non-executable
memory [12], and sandboxing [18]. To this end, temporal safety
errors, and particularly use-after-free vulnerabilities, are becoming
a key component of the attackers’ arsenal [1, 2, 7, 8]. Interestingly,
exploiting use-after-free bugs does not require corrupting memory;
instead, an attacker merely needs to utilize dangling pointers, still
accessible by a process, for hijacking the control ﬂow.
Temporal safety violations are extremely effective when (ab)used
for compromising large C++ programs. Virtual objects contain (at
least) one pointer towards a Virtual Table (VTable), which further
contains (function) pointers to the implementation of the methods
associated with the respective object(s). An attacker can hijack
the VTable by forcing the vulnerable program to carefully allocate
memory with attacker-controlled data; assuming there are still dan-
gling pointers that (now) point to the hijacked VTable, the control
ﬂow of the program can be redirected according to the needs of
the attacker. Notice that VTable hijacking, through use-after-free,
can be combined with other attack vectors for delivering the end-
to-end exploit. In fact, in recent Pwn2Own security contests, all
major web browsers were compromised using exploits that contain
a step where VTable hijacking was the key attack vector [5, 6].
In this paper, we propose VTPin for protecting software against
VTable hijacking in the least intrusive way. VTPin works directly
with C++ binaries that provide Run-time Type Information (RTTI),
does not rely on complex binary analysis or rewriting (often hinder-
ing practical deployment [51]), does not interfere with the strate-
gies and policies imposed by the allocator of the protected pro-
gram, and exhibits low overhead (1%–4.1%). VTPin pins all freed
VTable pointers on a safe VTable by instrumenting every free
call of a running program. For every free, VTPin quickly iden-
tiﬁes if it is associated with a virtual object; in case it is, VTPin
handles the deallocation accordingly, otherwise the deallocation is
forwarded to the program’s allocator. VTPin deallocates all space
allocated by the object, but preserves its VTable pointers. Addi-
tionally, the value of the contained VTable pointer(s) is replaced
with the address of a special VTable that VTPin controls. Any
dangling pointer, if triggered, can only invoke a method provided
by the corresponding safe object. Subsequently, all virtual-method
calls due to dangling pointers are not simply prevented, but can also
be logged, tracked, and patched.
448c l a s s P a r e n t {
p u b l i c :
v i r t u a l void t a l k ( ) ;
c l a s s Boy : p u b l i c P a r e n t {
p u b l i c :
void t a l k ( ) ;
} ;
} ;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
VTPin follows two strategies for pinning freed virtual objects.
If the memory allocator provides reallocation of memory with par-
ticular placement, such as the standard GNU allocator, then VT-
Pin pins just the VTable pointer(s) and frees the rest of the ob-
ject. Otherwise, for slab allocators that do not support reallocation
with placement, or for objects with multiple VTable pointers, VT-
Pin pins all the VTable pointers and maintains all data associated
with the freed virtual object. Notice that VTPin handles only the
deallocation of objects; all other memory operations, including the
allocation of virtual objects, are outsourced to the default alloca-
tor of the protected program. VTPin pins only virtual objects, and
in most cases only a single pointer (i.e., 8 bytes) survives. Hence,
the induced memory overhead, as we demonstrate with extensive
measurements that stress the memory footprint of Mozilla Firefox
and Chromium, is low. In addition, VTPin employs a conservative
garbage collector for periodically removing all pinned objects and
reclaiming back their occupied memory.
Scope. VTPin protects VTable pointers, in C++ binaries, from be-
ing hijacked through use-after-free vulnerabilities. Although VT-
Pin focuses only on a very speciﬁc class of attacks, we stress that
VTable hijacking via use-after-free is a popular and effective ex-
ploitation vector—as demonstrated by recent security contests [1,
2,7,8]. Moreover, by limiting its scope to a speciﬁc, yet important,
class of attacks, VTPin is able to not only complicate such attacks,
but solve the problem entirely and in a practical way (i.e., by just
pre-loading a given binary with minimal impact on its execution).
In Section 2, we show that more general binary-level solutions do
exist, but they yield high overhead, intrusive deployment, or suf-
ﬁcient leeway for attacks, all factors which ultimately hinder their
practical adoption in real-world scenarios.
Contributions. This paper makes the following contributions:
1. We design, implement, and evaluate VTPin: a system to pro-
tect VTable pointers from exploitation through use-after-free
vulnerabilities. VTPin does not require access to the source
code of the protected program, is not based on binary anal-
ysis or rewriting, is highly portable, and does not interfere
with the semantics and policies used by standard allocators.
2. We evaluate VTPin with the C++ programs of SPEC CPU2006,
Chromium, and Mozilla Firefox. Mozilla Firefox over VT-
Pin experiences an average runtime overhead of 1%–4.1%
when executing popular browser benchmarks.
2. BACKGROUND
2.1 VTable Hijacking
Use-after-free vulnerabilities are core assets in modern software
exploitation. As they do not manifest by writing past memory
bounds or overwriting the process’ data structures (i.e., memory
corruption), existing countermeasures for protecting critical data,
such as return addresses stored at the process stack, fail to protect
against use-after-free abuses. Essentially, the exploitation of use-