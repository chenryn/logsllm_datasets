Figure 1: SAN Model for the PD Scheme
Note that an early-stage vulnerable state is generally
not detectable2, which means that the error accumulation
may take time to reach a point at which a pattern-matching
mechanism is likely to capture the precursor of failure.
The transition from a vulnerable state to a detectable near-
failure state is represented by the timed activities n1 det
and n2 det. Each of the activities is associated with two
cases, indicating the detection mechanism’s imperfect cov-
erage. Undetected pre-failure conditions at this stage are
likely to manifest themselves quickly into a replica fail-
2An attempt to detect early-stage pre-failure conditions may lead to a
high rate of false alarm, since a loose pattern match does not necessarily
mean a precursor of failure.
ure, which is modeled by the timed activities n1 fail and
n2 fail. As all those timed activities have exponential dis-
tributions, the time it takes a replica to go from a robust state
to a failure state has a hypo-exponential distribution (which
is one form of increasing failure rate distribution [6]).
As discussed in Section 3, software rejuvenation in the
distributed applications we consider must be followed by
consistency restoration. Therefore, upon the completion of
the activity n1 rejuv (or n2 rejuv), another timed activ-
ity n1 restore (or n2 restore) will be enabled. Note
also that there are arcs from the places n1 update and
n2 update to the input gates n1 crash and n2 crash (re-
spectively); this enables the model to accommodate the fact
that the post-rejuvenation/recovery consistency restoration
processes themselves are not immune to failures, due to the
potential performance stress caused by the service requests
accumulated during rejuvenation or recovery.
In Section 4.2.3, we will describe how we character-
ize the consistency-restoration duration (for specifying the
rates for the activities n1 restore and n2 restore), but
we will omit further discussion of the SAN model due to
space limitations.
4.2.3 Consistency Restoration Duration
Recall that during a replica’s rejuvenation, update requests
will be saved to its local buffer and will be processed upon
the completion of rejuvenation. Since additional service re-
quests may arrive in the meantime, post-rejuvenation con-
sistency restoration will continue until the completion of
a requested service results in an empty buffer and an idle
replica server. Hence, the duration of consistency restora-
tion is analogous to a busy period [10]. Clearly, the longer a
rejuvenation process takes or the higher the update-request
rate is, the lengthier the busy period will be. Moreover, the
higher server utilization factor during this period is likely
to cause a temporary, user-perceived performance degrada-
tion. However, the derivation of a busy period probability
density function (pdf) is very complex even for the simplest
queueing system M/M/1 [10]. Although we can compute
the ﬁrst three moments of a busy period and then derive
a more accurate exponential pdf approximation based on
them [11], in this study we choose to apply an exponential
approximation that uses only the ﬁrst moment, for simplic-
ity. In the following, we derive a solution for the expected
value of a busy period, E[B], whose reciprocal will be used
as the constant rate in the exponential approximation that
characterizes the busy period. Moreover, for clarity, we use
the context-speciﬁc term “consistency restoration duration”
to refer to such a busy period, in the remainder of the paper.
We assume that the update-request interarrival time and
service time are both exponentially distributed so that we
have an M/M/1 queueing system at each replica server. In
order to evaluate the expected value of consistency restora-
tion duration E[B] analytically, we view 1) the update re-
quests that have not yet been processed when rejuvenation
starts, and 2) the requests accumulated during rejuvenation,
collectively, as a single customer C1. Then C1 is the cus-
tomer who initiates a busy period and has a service time dis-
tribution different from other customers (i.e., the individual
service requests that arrive during consistency restoration).
From that perspective, the system becomes an M/G/1. Be-
fore proceeding to derive the solution for E[B], we deﬁne
the following notation:
λ Update request rate.
µ Update service rate.
γ
ω
Rejuvenation completion rate.
Failure recovery completion rate.
k1 Number of update requests that are left in the local
system when rejuvenation starts.
k2 Number of update requests that arrive at the local sys-
tem during rejuvenation.
τ
Rejuvenation completion time.
X1 Service time of C1.
X Service time of Ci, i ∈ {2, 3, . . .}.
Then, if we let S denote the service time of the M/G/1
system, we have (see [10], for example)
E[B] = E[S]
1 − λE[S] .
(2)
Due to Poisson arrivals, a0 = p0 = 1 − λE[S], where
a0 and p0 are the steady-state probabilities that an arrival
will see an empty system and that the system will be empty,
respectively. Thus,
E[S] = (1 − λE[S])E[X1] + λE[S]E[X].
To solve for E[S], we obtain
E[S] =
E[X1]
1 + λE[X1] − λE[X] .
(3)
(4)
Since the service times of individual requests are inde-
pendently and identically distributed with a constant rate µ
(i.e., an exponential distribution), E[X1] = kE[X], where
k = k1 + k2. Then, by plugging that into Eq. (4), which in
turn is plugged into Eq. (2), we obtain an expression for the
conditional expectation of consistency restoration duration:
E[B | k] = kE[X]
1 − λE[X]
=
k
µ
1 − λ
µ
= k1 + k2
µ − λ
.
(5)
Finally, from the theorem of total expectation, it follows
that
E[B] =
(cid:1) ∞
∞(cid:2)
τ =0
∞(cid:2)
γe−γτ
k1=0
(λτ)k2
k2! e−λτ
(1 − ρ)ρk1
(cid:3)
k1 + k2
µ − λ
(cid:4)
dτ
k2=0
λ
(µ − λ)2
=
+
λ
γ(µ − λ)
(6)
Note that if we replace γ with ω in Eq. (6), we can then
compute the expected value of post-recovery consistency
restoration duration.
4.3 Quantitative Results
Using the SAN model developed in Section 4.2.2 and
applying UltraSAN, we conduct parametric studies. Before
proceeding to discuss the results, we introduce additional
notation as follows:
α: Rate at which a replica enters a vulnerable state from
a robust state.
β: Rate at which a replica enters a near-failure state from
a vulnerable state.
cd: Coverage of precursor detection.
η1: Rate at which a replica enters a crash state from a
near-failure state.
η2: Rate at which a replica enters a crash state from
the state in which the replica undergoes consistency
restoration.
ν1: Completion rate of post-rejuvenation consistency
restoration.
ν2: Completion rate of post-recovery consistency
restoration.
cr1: Probability of a successful recovery from an error-
accumulation-caused failure.
cr2: Probability of
a
successful
recovery from a
performance-stress-caused failure.
The ﬁrst study we conduct is based on the following
parameter values (unless noted, all the parameters involv-
ing time presume that time is quantiﬁed in hours): α =
0.001, cd = 0.95, η1 = 1, η2 = 10−6, ω = 2, ν1 =
4, ν2 = 1.33, γ = 6, cr1 = 0.5, and cr2 = 0.95. Note
that ν1 and ν2 are computed (based on Eq. (6)) as the func-
tions of λ, µ, γ, and ω, with the values of λ and µ set to 150
and 250 (per second), respectively.
Note also that if we set cd to zero, the performabil-
ity model shown in Figure 1 will degenerate into a base-
line model in which no software rejuvenation will ever be
performed. In order to assess the effectiveness of the PD
scheme, we also compute the same performability measures
for the baseline system. The measures are computed by
the transient analytic solver in UltraSAN at the time point
t = 10, 000 hours. The evaluation results are illustrated in
Figure 2(a), where the results of P (Y = 0) and P (Y = 3)
for the PD scheme and baseline (BL) system are compared.
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
)
3
,
0
(
∈
y
,
)
y
=
Y
(
P
PBL  (Y=0)
PBL  (Y=3)
PPD  (Y=0)
PPD  (Y=3)
0
1e-08 1e-07 1e-06 1e-05 0.0001 0.001
0.01
Replica Failure Rate β
(a) cd = 0.95
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
)
3
,
0
(
∈
y
,
)
y
=
Y
(
P
PBL  (Y=0)
PBL  (Y=3)
PPD  (Y=0)
PPD  (Y=3)
0
1e-08 1e-07 1e-06 1e-05 0.0001 0.001
0.01
Replica Failure Rate β
(b) cd = 0.4
Figure 2: Improvement from the Use of the PD Scheme
The curves show that after β increases to 10−5, the sys-
tem with the PD scheme is much more likely to operate at
performance level 3 than the baseline system. Meanwhile,
the former is much less likely than the latter to be at perfor-
mance level 0 after β reaches 10−5.
Nonetheless, we get a quite different picture, as shown in
Figure 2(b), when cd is reduced to 0.4. In particular, the im-
provement from the use of the PD scheme can be observed
only in a limited value range of β, and the improvement
becomes increasingly negligible when β becomes greater
than 0.001. As explained in Section 4.1, while the detection
mechanisms using pattern matching have better accuracy
(i.e., fewer false alarms), they tend to have lower detection
coverage due to their inability to recognize pre-failure con-
ditions that are not known a priori. In addition, distributed
applications nowadays tend to evolve quickly, which may
also prevent us from recognizing enough precondition pat-
terns of possible failures. Those factors together suggest to
us an approach for enhancing the rejuvenation framework,
as described in the next section.
5 PDRT Scheme
5.1 Algorithm
Based on the ﬁndings discussed in Section 4.3, we
enhance the framework by including in it a random-
timer-triggered rejuvenation scheme to complement the
precursor-detection-triggered scheme for better performa-
bility.
In order to let the two schemes coordinate syner-
gistically, the enhanced scheme employs a scheduler which
can be implemented as a function of the sequencer in our
system model (see Section 2). The duties of the sched-
uler include 1) keeping track of the detection-triggered-
rejuvenation events and failure-caused-recovery events, and
2) determining, upon every timer expiration, which of the
replicas should undergo rejuvenation. With the result-
ing precursor-detection-triggered random-timer-triggered
(PDRT) rejuvenation algorithm, a replica R will undergo a
software rejuvenation upon the detection of a failure pre-
cursor or the expiration of the random timer that signals
R’s turn for rejuvenation, whichever occurs ﬁrst. Conse-
quently, in the absence of detectable pre-failure conditions,
the PDRT scheme will reduce to a solely time-based round-
robin rejuvenation policy.
We choose a random timer mainly because random
scheduling for preventive maintenance is often used in in-
dustry (see [12], for example). To implement the random-
timer-triggered, round-robin scheduling policy, we begin by
determining a value φ for mean time between rejuvenation,
or mean rejuvenation interval. To let the rejuvenation inter-
vals for all the n replicas have identical distributions (with
a mean φ), we let the time between two consecutive rejuve-
nations that are performed by two different replicas have an
exponential distribution and have a mean ϕ which equals
φ
n . Finally, to distinguish it from φ, we call ϕ the “mean
rejuvenation sub-interval.” Consequently, φ = nϕ and the
rejuvenation interval has a hypo-exponential distribution.
The algorithm is shown in Figure 3. Note that the al-
gorithm allows a choice of Nmin, which is the minimum
number of operational replicas below which the timer-
countdown will be disabled so that timer-triggered rejuve-
nation will not take place (to ensure service availability).
We can also see from Figure 3 how the value of the next
rejuvenation sub-interval is assigned, how the timer is set,
and how k, the ID of the replica that is supposed to undergo
rejuvenation upon the next timer expiration, is updated to
enable the round-robin scheduling.
// n replicas in a networked system
replicaSet = {R1, R2, · · · , Rn-1, Rn};
// φ is a replica’s mean rejuvenation interval
ϕ = φ/n;
δ = 1/ϕ;
edist = ExponentialDistribution(δ);
τ = getNextIntvl(random(edist));
setTimer(rejuvTimer, opSize(replicaSet), Nmin, τ );
k = 1;
while (rejuvEnabled) {
if (rejuvTimer(opSize(replicaSet), Nmin) == 0) {
if (k /∈ {SfID, SrID})
send(rejuvReqst, k);
τ = getNextIntvl(random(edist));
setTimer(rejuvTimer, opSize(replicaSet), Nmin, τ );
update(SrID, n);
k = (k mod n) + 1;
}
}
Figure 3: PDRT Algorithm
Combining two different schemes into a framework cre-
ates several design issues.
In particular, it would not be
reasonable to let the scheduler send a replica R to a timer-
triggered rejuvenation soon after R completes a detection-
triggered rejuvenation or a failure recovery. Rather, in such
a scenario, the replica should be allowed to skip the timer-
triggered rejuvenation until after a complete rejuvenation
cycle (whose ending point is signaled by the nth timer
expiration3 relative to the point at which R completes a
detection-triggered rejuvenation or recovers from failure).
The above rule, and a rule that prevents a rejuvenation re-
quest from being sent to a crashed replica, are implemented
in the PDRT algorithm using two sets that are maintained by
the scheduler, SfID and SrID, which keep track of the repli-
cas 1) that are crashed or engaged in a detection-triggered
rejuvenation, and 2) that have just recovered from failure
or have just completed a detection-triggered rejuvenation,
respectively. More speciﬁcally, when a replica R crashes
or undergoes a detection-triggered rejuvenation, its ID will
be entered into SfID; when R has recovered from failure or
completed a detection-triggered rejuvenation, its ID will be
transferred from SfID to SrID. The ID will remain in SrID
until the nth timer expiration (relative to the point when R’s
ID is transferred into SrID), meaning that a replica will be
exempted from rejuvenation in the next rejuvenation cycle
after failure recovery or detection-triggered rejuvenation.
Accordingly, as shown in Figure 3, when the timer ex-
pires, the scheduler will ﬁrst check if a replica R that is
picked up by the round-robin scheduling policy belongs to
SfID or SrID, and will send a rejuvenation request to R if
and only if R is neither in SfID nor in SrID.
3This does not mean that R has to undergo rejuvenation upon the nth
timer expiration, but that R will be allowed to do so when the (n + k)th
timer expiration (k ≥ 0) indicates that it is R’s turn for rejuvenation ac-
cording to the round-robin scheduling.
5.2 Performability Model for the PDRT Scheme
We build a SAN model for the PDRT scheme by ex-
tending the PD model, as shown in Figure 4. The exten-
sion includes the timed activity rdm timer, the input gate
scheduler, and two places inop and scheduled whose
markings indicate, respectively, the number of operational
replicas and the ID of the replica that is scheduled for reju-
venation at the next epoch.
n1_inrj
n1_torj
n1_rejuv
n1_robust
n1_vuln
n1_age
n1_gorj
n1_det
n1_nrf
n1_crash
n1_fail
n1_down
n1_rpr
n1_repair
n1_rpf
n1_update
n1_rec
n1_restore
n1_rpok
inop
scheduler
rdm_timer
scheduled