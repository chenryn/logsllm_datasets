选项时，约束被视为可选，且仅在两个资源都执行指定操作时才适用。您指定的第一个资源的状态更改不会对您指定的第二个资源起作用。
以下命令为名为 `VirtualIP`{.literal} 和 `dummy_resource`{.literal}
的资源配置咨询排序约束。
``` literallayout
# pcs constraint order VirtualIP then dummy_resource kind=Optional
```
:::
::: section
::: titlepage
# []{#assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters.html#proc_configuring-ordered-resource-sets.adocdetermining-resource-order}配置排序的资源集 {.title}
:::
常见的情况是，管理员创建排序资源链，例如资源 A 在资源 C
之前启动。如果您的配置需要创建一组在一起并启动的资源，您可以配置包含这些资源的资源组。
然而，在有些情况下，配置资源需要以指定顺序启动，因为资源组不合适：
::: itemizedlist
-   您可能需要配置资源以启动，而且资源不一定是在一起的。
-   您可能有一个资源 C，它必须在资源 A 或 B 启动后启动，但 A 和 B
    之间没有关系。
-   您可能有资源 C 和 D 在资源 A 和 B 启动时必须启动，但 A 和 B
    之间没有关系，C 和 D 之间没有关系。
:::
在这些情况下，您可以使用
`pcs constraint set 命令在一组或一组资源中创建排序约束。`{.literal}
您可以使用 `pcs constraint order set`{.literal}
命令为一组资源设置以下选项。
::: itemizedlist
-   `sequential`{.literal}，可以设为 `true`{.literal} 或
    `false`{.literal}，以指示资源集合是否可以相互排序。默认值为
    `true`{.literal}。
    将 `sequential`{.literal} 设为 `false`{.literal}
    ，允许一个集合相对于排序约束中的其他集合进行排序，而不对其成员进行相互排序。因此，只有在约束里列出了多个集合时才有意义
    ; 否则，约束无效。
-   `require-all`{.literal}，它可以设为 `true`{.literal} 或
    `false`{.literal}，以指示集合中的所有资源在继续前是否处于活动状态。将
    `require-all`{.literal} 设为 `false`{.literal}
    ，表示集合中只有一个资源需要启动，然后才能继续下一个集合。将
    `require-all`{.literal} 设为 `false`{.literal}
    没有任何作用，除非与未排序的集合一起使用，未排序的集合是那些
    `sequential`{.literal} 设置为 `false`{.literal} 的集合。默认值为
    `true`{.literal}。
-   可将其设置为 `启动`{.literal}、`提升`{.literal}、`降级`{.literal}
    `或停止`{.literal} `操作`{.literal}，如
    [确定群集资源的运行顺序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters){.link}
    中\" Order Constraint\"表中的\"属性\"中所述。
-   `role`{.literal}，它可以设为
    `Stopped`{.literal}、`Started`{.literal}、`master`{.literal} 或
    `Slave`{.literal}。从 RHEL 8.5 开始，`pc`{.literal} s 命令行界面接受
    `Promoted`{.literal} 和 `Unpromoted`{.literal} 作为 `role`{.literal}
    的值。`Promoted`{.literal} 和 `Unpromoted`{.literal}
    角色的功能等同于 `Master`{.literal} 和 `Slave`{.literal} 角色。
:::
您可以按照 `pcs constraint set 命令的 setoptions`{.literal}
参数为一组资源设置``{=html} 以下约束选项。
::: itemizedlist
-   `ID`{.literal}，为您定义的约束提供名称：
-   `kind`{.literal}，它表示如何强制实施约束，如 Order
    Constraint\"表的\"属性中所述
    [，用于确定集群资源的运行顺序。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters){.link}
-   `对称`{.literal}，要设置约束的反向是否适用于相反操作，如在确定
    [集群资源运行顺序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters){.link}
    中\" Order Constraint\"表中的\"Properties 所述。
:::
``` literallayout
pcs constraint order set resource1 resource2 [resourceN]... [options] [set resourceX resourceY ... [options]] [setoptions [constraint_options]]
```
如果您有三个名为 `D1`{.literal}、`D2`{.literal} 和 `D3`{.literal}
的资源，以下命令将它们配置为排序的资源集。
``` literallayout
# pcs constraint order set D1 D2 D3
```
如果您有六种名为
`A`{.literal}、`B`{.literal}、`C`{.literal}、`D`{.literal}、`E`{.literal}
和 `F`{.literal} 的资源，本例为启动的一组资源配置了排序约束：
::: itemizedlist
-   `A`{.literal} 和 `B`{.literal} 相互独立启动
-   `C`{.literal} 在 `A`{.literal} 或 `B`{.literal} 启动后启动
-   `d`{.literal} 在 `C`{.literal} 启动后启动
-   `D`{.literal} 启动后，`E`{.literal} 和 `F`{.literal} 相互独立启动
:::
停止资源不受此约束的影响，因为设置了 `symmetrical=false`{.literal}。
``` literallayout
# pcs constraint order set A B sequential=false require-all=false set C D set E F sequential=false setoptions symmetrical=false
```
:::
::: section
::: titlepage
# []{#assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters.html#proc_configuring-nonpacemaker-dependencies.adoc-determining-resource-order}为不由 Pacemaker 管理的资源依赖项配置启动顺序 {.title}
:::
集群可能包含不是由集群管理的依赖项的资源。在这种情况下，您必须确保在
Pacemaker 停止后启动这些依赖项，然后才能停止 Pacemaker。
您可以使用 `systemd`{.literal} `resource-agents-deps`{.literal}
目标将您的启动顺序配置为在这种情况下。您可以为此目标创建一个
`systemd`{.literal} drop-in 单元，Pacemaker 会根据这个目标自行排序。
例如，如果集群包含依赖于集群管理的外部服务 `foo`{.literal}
的资源，请执行以下步骤。
::: orderedlist
1.  创建包含以下内容的 drop-in 单元
    `/etc/systemd/system/resource-agents-deps.target.d/foo.conf`{.literal}
    ：
    ``` literallayout
    [Unit]
    Requires=foo.service
    After=foo.service
    ```
2.  运行 `systemctl daemon-reload`{.literal} 命令。
:::
用这种方法指定的集群依赖项可以是服务以外的其它依赖项。例如，您可能依赖于在
`/srv`{.literal} 中挂载文件系统，在这种情况下，您将执行以下步骤：
::: orderedlist
1.  确保 `/srv`{.literal} 在 `/etc/fstab`{.literal}
    文件中列出。当重新加载系统管理器的配置时，系统管理器将在启动时自动转换为
    `systemd`{.literal} 文件 `srv.mount`{.literal}。如需更多信息，请参阅
    `systemd.mount`{.literal}(5)和
    `systemd-fstab-generator`{.literal}(8)man page。
2.  要确保 Pacemaker 在挂载磁盘后启动，请创建包含以下内容的 drop-in 单元
    `/etc/systemd/system/resource-agents-deps.target.d/srv.conf`{.literal}
    ：
    ``` literallayout
    [Unit]
    Requires=srv.mount
    After=srv.mount
    ```
3.  运行 `systemctl daemon-reload`{.literal} 命令。
:::
:::
:::
[]{#assembly_colocating-cluster-resources.adoc_configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_colocating-cluster-resources.adoc_configuring-and-managing-high-availability-clusters.html#assembly_colocating-cluster-resources.adoc_configuring-and-managing-high-availability-clusters}第 13 章 Colocating 集群资源 {.title}
:::
要指定一个资源的位置取决于另一个资源的位置，您需要配置 colocation 约束。
在两个资源间创建 colocation
约束具有重要的副作用：它会影响分配给节点资源的顺序。这是因为您无法相对于资源
B 来放置资源 A，除非您知道资源 B 的位置。因此，当创建 colocation
约束时，您必须考虑是将资源 A 与资源 B 共处，还是将资源 B 与资源 A 共处。
在创建 colocation 约束时要记住的是，假设资源 A 与资源 B
在一起，在决定哪个节点要选择资源 B 时，集群也会考虑资源 A 的首选项。
以下命令创建了 colocation 约束。
``` literallayout
pcs constraint colocation add [master|slave] source_resource with [master|slave] target_resource [score] [options]
```
下表总结了配置 colocation 约束的属性和选项。
::: table
[]{#assembly_colocating-cluster-resources.adoc_configuring-and-managing-high-availability-clusters.html#idm140695917347552}
**表 13.1. Colocation 约束的参数**
::: table-contents
+-----------------------+---------------------------------------------+
| 参数                  | 描述                                        |
+:======================+:============================================+
| source_resource       | 共处源。如果约束                            |
|                       | 不满意，集群可能决定完全不允许该资源运行。  |
+-----------------------+---------------------------------------------+
| target_resource       | 共处目标。集群将决定优先放                  |
|                       | 置此资源的位置，然后决定放置源资源的位置。  |
+-----------------------+---------------------------------------------+
| 分数                  | 正数值表示资源应该在同一个节点上            |
|                       | 运行。负值表示资源不应在同一节点上运行。值  |
|                       | +`INFINITY`{.literal} （默认值）表示        |
|                       | [*source_resource*]{.emphasis} 必须在与     |
|                       | [*target_resource*]{.emphasis}              |
|                       | 相同的节点上运行。值 -`INFINITY`{.literal}  |
|                       | 表示 [*source_resource*]{.emphasis}         |
|                       | 不得在与 [*target_resource*]{.emphasis}     |
|                       | 相同的节点上运行。                          |
+-----------------------+---------------------------------------------+
| `影响`{.literal} 选项 | （RHEL 8.4                                  |
|                       | 及更新的版本）决                            |
|                       | 定集群是否会在依赖资源达到其故障迁移阈值时  |
|                       | 将主资源([*source[*\_resource*]{.emphasis}  |
|                       | )和依赖资源(                                |
|                       | target_resource)                            |
|                       | *]{.emphasis}移动到另一个节点，或者集群是否 |
|                       | 会在不造成服务切换的情况下将依赖资源离线。  |
|                       |                                             |
|                       | `影响`{.literal} colocation                 |
|                       | 约束选项的值可以是 `true`{.literal} 或      |
|                       | `false`{.literal}。这个选项的默认值由相依   |
|                       | `资源`{.literal} meta                       |
|                       | 选项的值决定，该选项的默认值为              |
|                       | `true`{.literal}。                          |
|                       |                                             |
|                       | 当这个选项的值为 `true`{.literal}           |
|                       | 时，Pacemaker                               |
|                       | 将尝试                                      |
|                       | 使主资源和依赖资源都处于活跃状态。如果依赖  |
|                       | 资源出现故障，两个资源都会移到另一个节点。  |
|                       |                                             |
|                       | 当这个选项的值为 `false`{.literal}          |
|                       | 时，Pacemaker                               |
|                       | 会避免因                                    |
|                       | 为依赖资源的状态而移动主资源。在这种情况下  |
|                       | ，如果依赖资源达到失败的迁移阈值，则当主资  |
|                       | 源活跃并可以保持在当前节点上时，它将停止。  |
+-----------------------+---------------------------------------------+
:::
:::
::: section
::: titlepage
# []{#assembly_colocating-cluster-resources.adoc_configuring-and-managing-high-availability-clusters.html#proc_specifying-mandatory-placement.adoc-colocating-cluster-resources}指定资源的强制放置 {.title}
:::
当约束分数为 `+INFINITY 或 -INFINITY`{.literal} ``{=html}
时，就会发生强制放置。在这种情况下，如果约束无法满足，则不允许
[*source_resource*]{.emphasis} 运行。对于
`score=INFINITY`{.literal}，这包括 [*target_resource*]{.emphasis}
没有激活的情况。
如果您需要 `myresource1`{.literal} 始终与 `myresource2`{.literal}
运行在同一台机器上，则您可以添加以下约束：
``` literallayout
# pcs constraint colocation add myresource1 with myresource2 score=INFINITY
```
由于使用了 `INFINITY`{.literal}，如果 `myresource2`{.literal}
无法在任何一个集群节点上运行（出于某种原因），则将不允许
`myresource1`{.literal} 运行。
或者，您可能想要配置相反的情况，在集群中，`myresource1`{.literal} 不能与
`myresource2`{.literal} 运行在同一台机器上。在这种情况下，请使用
`score=-INFINITY`{.literal}
``` literallayout
# pcs constraint colocation add myresource1 with myresource2 score=-INFINITY
```
同样，通过指定 `-INFINITY`{.literal}，约束是绑定的。因此，如果只剩下
`myresource2`{.literal} 所在的位置可以运行，那么 `myresource1`{.literal}
可能无法在任何地方运行。
:::
::: section
::: titlepage
# []{#assembly_colocating-cluster-resources.adoc_configuring-and-managing-high-availability-clusters.html#con_specifying-advisory-placement-colocating-cluster-resources}指定资源的公告放置 {.title}
:::
资源公告的放置表示资源的放置是首选项，但不是强制性的。对于 score 大于
`-INFINITY`{.literal} 且小于 `INFINITY`{.literal}
的约束，集群将尝试满足您的要求，但如果替代方案是停止某些集群资源，则可能会忽略它们。
:::
::: section
::: titlepage
# []{#assembly_colocating-cluster-resources.adoc_configuring-and-managing-high-availability-clusters.html#proc_colocating-resource-sets.adoc-colocating-cluster-resources}资源共存集合 {.title}