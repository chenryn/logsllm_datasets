missions, the overhead of the SQL operations is very high, leading
to slow performance even in situations where a large proportion of
the requests can be rejected early. When considering that Cloudflare
estimates the percentage of Internet bot traffic to be 40% [46], much
 0 1 2 3 4 5 6 7 8product-photosproduct-purchase-publishproduct-purchase-get-priceproduct-purchase-authorize-ccproduct-purchase-authenticateproduct-photos-successproduct-photos-reportproduct-photos-recordproduct-photos-receiveproduct-photos-messageproduct-photos-assignproduct-catalog-builderproduct-catalog-apiproduct-purchaseTime (S)OpenFaaSWILL.IAMTrapezeValve 0 0.01 0.02 0.03 0.04 0.05 0.06product-catalog-builderproduct-catalog-apiproduct-purchaseTime (S)OpenFaaSWILL.IAMTrapeze 0 200 400 600 800 1000 1200 1400 1600 1800 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9Time (ms)Bad requests (proportion)OpenFaaSWILL.IAMTrapezeACSAC 2020, December 7–11, 2020, Austin, USA
Arnav Sankaran, Pubali Datta, and Adam Bates
of which emanates from malicious bots, this suggests potential for
significant savings through use of will.iam. While the workloads
used in this experiment were synthetic, we discuss how this result
may inform the use of will.iam as a DDoS defense in Section 9.
9 DISCUSSION
Portability. The access control mechanism proposed in this paper and
the implementation of the framework in OpenFaaS provides a way to
enforce access control with low overhead in a serverless computing
environment. Building the framework into OpenFaaS allows for this
access control system to be deployed on top of Kubernetes and thus
on every major cloud provider’s infrastructure. Additionally this
framework can easily be deployed on an in-house Kubernetes or
Docker Swarm cluster. This portability is due to the fact that we
do not depend directly on any functionality which is specific to a
cloud providers serverless implementation. The entire framework
runs inside of containers and utilizes common technologies for it’s
required functionality. For example, request and responses between
services are serialized to and from JSON and performed over HTTP
and routing between functions and the gateway leverages DNS.
Denial of Service Attacks. will.iam’s ability to determine if a re-
quest will fail ahead of time and reject it at the gateway has the
potential to mitigate targeted denial of service attacks. This is be-
cause the wasted computation we identified above can be seen as a
traffic amplifier; permitting these requests to travel partially through
a complex workflow greatly increases the cost of the attack for the
application owner. For example, in Hello, Retail! the function "pur-
chase" depends on "get-price", "authorize-cc", and "publish" in that
order. The first function in that ordering which requires a non-public
data permission is "authorize-cc", therefore it is possible for a request
without the proper permissions to invoke multiple functions before
failing. However, when will.iam is used, the upcoming permissions
failurewouldbedetectedimmediatelyandcomputationalcostwould
be incurred only at the gateway. From the DDoS attack on GitHub
[54] in 2018, we can see that bad requests accounted for upwards of
90% of incoming traffic. From the evaluation section above we can see
that will.iam access control model greatly outperforms the Vanilla
model when proportion of bad requests is at 90%. Using Amazon
Lambda’s pricing model we determined the cost-saving of will.iam
under a DoS attack to be 64% less than that of the standard serverless
platform. While we do not argue that will.iam is a complete solution
for DoS defense, it does prevent an application’s own permissioned
workflows from being weaponized against it.
10 RELATED WORK
Attacks on serverless platforms. Remote code execution, poor re-
source isolation and covert channels (i.e. VM, container and func-
tion co-location vulnerabilities) [52, 53], reconnaissance attacks
and canonical cloud vulnerabilities [15] are rampant in serverless
platforms [76, 92]. Researchers have demonstrated event injection
attacks [2, 6, 10] and data exfiltration [64, 71] in serverless. Access
control misconfigurations are shown to enable attackers to steal
sensitive informative [4, 19] or launch denial-of-service (or denial-
of-wallet [13, 14]) attacks by exhausting allocated resource limits
and expanding usage bill. Common vulnerabilities and bugs in SDKs,
third-party libraries and platform code [5, 9, 18, 20] plague serverless
functions. Existing security solutions [3, 8, 11, 16, 17, 21–24] each
solve some part of these problems. will.iam adds to the growing set
of defenses against described attacks.
Serverless Security Research. Alpernasetal.proposedTrapeze[36],
a language-based approach to dynamic information flow control.
Trapeze wraps each serverless function in a security shim that inter-
cepts data accesses from shared data stores, external communication
channels (i.e. Internet), and messages exchanged with other func-
tions. Trapeze’s implementation depends on the programming lan-
guage of the function and usage of predefined key-value store func-
tions from the Trapeze library. Trapeze’s secure key-value store suf-
fers high overhead induced by expensive SQL operations. Moreover,
Trapeze completely forgoes serverless warm-start performance op-
timizations and worsens the overhead. The fork-optimized Trapeze
does not work for some API calls and requires effort at the external
APIimplementationleveltoenablethecloudfunctiontoworkwithin
Trapeze. In contrast, will.iam takes a transparent approach to access
control and is agnostic to function and platform implementation.
will.iam proactively evaluates access control policies at the ingress
point of a serverless application and makes a decision on acceptance
or rejection of the request even before any function executes leading
to negligible overhead. Another flow-based framework, Valve [47],
assists workflow developers in policy specification and employs a
transparent coarser-grained (i.e. function-level) information flow
control model that restricts unwanted function behavior through
network proxying and taint propagation. We believe that Valve is
complementary to will.iam and will allow developers to better un-
derstand the data flows in their applications to write proper policy
configuration for will.iam. [61] optimizes authentication queries
via caching in order to reduce the overhead of authenticating every
function request. Instead, will.iam leverages the idea of encoding
absolute and conditional information flows within an application
into a graph. This allows will.iam to detect and disallow access
policy violations at the point of ingress.
Baldini et. al. examined several popular platforms and concluded
the lack of proper function isolation is a major problem [41]. Wang et.
al. have measured several metrics like scalability, cold-start latency,
instance lifetime in Google Cloud functions, Microsoft Azure Func-
tions and AWS lambda [92]. They found placement vulnerabilities
and arbitrary code execution bugs in Azure Functions that make the
platform vulnerable to side-channel attacks. Robust access control
can alleviate the damaging effect of such attacks as shown in this
paper. Utilizing Intel’s SGX to build secure containers [40] and cloud
functions [35, 45] to provide better isolation, formal modeling of
serverless platforms [51, 61], and semi-automated troubleshooting
based on log data [75] are some related topics in serverless security
research.
Access Control Models. Cloud platforms typically use federated
identity management [65, 89] for access control which is insuffi-
cient to define expressive policies required in serverless application
workflows. Graph based access control models [68, 81, 91] have used
graphs to express hierarchical nature of user roles. Graph based
frameworks have also been used to augment role based access con-
trol (RBAC) [69, 70] and relation based access control (ReBAC) [60]
systems and have application in operating systems. will.iam lever-
ages the well-researched concepts of graph based access control to
Workflow Integration Alleviates Identity and Access Management in Serverless Computing
ACSAC 2020, December 7–11, 2020, Austin, USA
propose flexible and dynamic access control model for serverless
platforms.
Serverless computing application and design. Researchers have
predicted the future of serverless computing [39, 62] and have evalu-
ated its efficacy across several domains, including scientific comput-
ing [87], real-time systems [78], publisher-subscriber systems [55],
internet-of-things [82], edge computing [56], and big data process-
ing [42, 72, 93]. While this thread of research confirms the potential
of serverless infrastructure, another thread focusses on improving
the state-of-the-art serverless design. Improving serverless perfor-
mance [34, 50, 57, 76, 79], combining SDN and serverless computing
[32, 90], better serverless programming models [77], serverless pric-
ing models [48], and serverless analytics optimizations [66, 67, 84]
are some active research areas. Our paper adds to this literature by
proposing an improved access control framework design to balance
security-performance trade-off in serverless platforms.
11 CONCLUSIONS
In this paper we propose an access control mechanism which allows
for requests to be preemptively rejected before known access control
violations will occur, leading to time, compute, and cost saving. We
implemented the proposed access control mechanism described for
the OpenFaaS ecosystem and compared the implementation against
prior work, Trapeze and Valve. In our evaluation we determined
that there was no meaningful overheads at build time or during
orchestration. We also determined that the runtime overhead was
minimal when compared against prior access control system. When
compared against the Vanilla implementation the average overhead
was 0.51%. Furthermore we demonstrated that when load-testing
the system at bad request proportion of 30%, will.iam outperforms
the Vanilla implementation by 22%.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous referees for their
valuable comments and helpful suggestions. This work is supported
in part by NSF 17-50024 and NSF CNS 19-55228. The views expressed
are those of the authors only.
REFERENCES
[1] 2019.
21% of Open Source Serverless Apps Have Critical Vulnerabilities.
https://www.puresec.io/blog/puresec-reveals-that-21-of-open-source-
serverless-applications-have-critical-vulnerabilities.
[2] 2019. A Deep Dive into Serverless Attacks, SLS-1: Event Injection. https:
//www.protego.io/a-deep-dive-into-serverless-attacks-sls-1-event-injection/.
[3] 2019. Aqua Cloud Native Security Platform. https://www.aquasec.com/products/
aqua-container-security-platform/.
[4] 2019.
https:
AWS Lambda Container Lifetime and Config Refresh.
//www.linkedin.com/pulse/aws-lambda-container-lifetime-config-refresh-
frederik-willaert/.
[5] 2019. CVE-2019-5736: runc container breakout. https://www.openwall.com/
[6] 2019.
Injection: Protecting your Serverless Applications.
lists/oss-security/2019/02/11/2.
Event
[7] 2019.
https://www.jeremydaly.com/event-injection-protecting-your-serverless-
applications/.
Function-as-a-Service Market by User Type (Developer-Centric and
Operator-Centric), Application (Web & Mobile Based, Research & Academic),
Service Type, Deployment Model, Organization Size, Industry Vertical, and
Region - Global Forecast to 2021. https://www.marketsandmarkets.com/Market-
Reports/function-as-a-service-market-127202409.html.
[8] 2019. FunctionShield. https://www.puresec.io/function-shield.
[9] 2019. Gathering weak npm credentials. https://github.com/ChALkeR/notes/blob/
master/Gathering-weak-npm-credentials.md.
[27] 2020.
[26] 2020.
watch?v=TcN7wHuroVw.
OWASP Serverless Top 10.
articles/cl-lambda-functions-rapid-prototyping/.
blog/new-attack-vector-serverless-crypto-mining.
faced-threats-to-serverless-security-519e94d19dba.
OWASPServerlessTop10Project.
elastic-defense/.
[10] 2019. Hacking a Serverless Application: Demo. https://www.youtube.com/
[11] 2019. Intrinsic: Software security, re-invented. https://intrinsic.com/.
[12] 2019. Lambda functions for rapid prototyping. https://developer.ibm.com/
[13] 2019. Many-faced threats to Serverless security. https://hackernoon.com/many-
[14] 2019. New Attack Vector - Serverless Crypto Mining. https://www.puresec.io/
[15] 2019.
https://www.owasp.org/index.php/
[16] 2019. Protego Serverless Runtime Security. https://www.protego.io/platform/
[17] 2019. Puresec Serverless Security Platform. https://www.puresec.io/.
[18] 2019. ReDoS Vulnerability in "AWS-Lambda-Multipart-Parser" Node Package.
https://www.puresec.io/blog/redos-vulnerability-in-aws-lambda-multipart-
parser-node-package.
[19] 2019. Securing Serverless: Attacking an AWS Account via a Lambda Function.
https://www.darkreading.com/cloud/securing-serverless-attacking-an-aws-
account-via-a-lambda-function/a/d-id/1333047.
https://www.infoq.com/
[21] 2019. Serverless Security for AWS Lambda, Azure Functions, and Google Cloud
https://www.twistlock.com/solutions/serverless-security-aws-
Securing Serverless – by Breaking in.
Functions.
lambda-azure-google-cloud/.
[22] 2019. Snyk. https://snyk.io/.
[23] 2019. Sysdig Secure. https://sysdig.com/products/secure/.
[24] 2019. Vandium-node. https://github.com/vandium-io/vandium-node.
[25] 2020.
AWS Identity and Access Management
presentations/serverless-security-2018.
[20] 2019.
(IAM).
https:
AWS::Lambda::Function.
//aws.amazon.com/iam/
AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
//rhinosecuritylabs.com/aws/aws-iam-credentials-get-compromised/
https://docs.aws.amazon.com/
https:
Cloud Breach: Compromising AWS IAM Credentials.
[30] 2020.
[31] 2020. What Is ABAC for AWS?
[33] Gojko Adzic and Robert Chatley. 2017.
[28] 2020. List of AWS S3 Leaks. https://github.com/nagwww/s3-leaks
[29] 2020. Policy Evaluation Logic.
https://docs.aws.amazon.com/IAM/latest/
UserGuide/referencepoliciesevaluation-logic.html
This Is What Happened When I Leaked My AWS Secret Key.
https://alexanderpaterson.com/posts/this-is-what-happened-when-i-leaked-
my-aws-secret-key
https://docs.aws.amazon.com/IAM/latest/
UserGuide/introductionattribute-based-access-control.html
[32] P. Aditya, I. E. Akkus, A. Beck, R. Chen, V. Hilt, I. Rimac, K. Satzke, and M. Stein.
2019. Will Serverless Computing Revolutionize NFV? Proc. IEEE 107, 4 (April
2019), 667–678. https://doi.org/10.1109/JPROC.2019.2898101
Serverless Computing: Economic
and Architectural Impact. In Proceedings of the 2017 11th Joint Meeting on
Foundations of Software Engineering (Paderborn, Germany) (ESEC/FSE 2017).
Association for Computing Machinery, New York, NY, USA, 884–889.
https://doi.org/10.1145/3106237.3117767
[34] Istemi Ekin Akkus, Ruichuan Chen, Ivica Rimac, Manuel Stein, Klaus Satzke,
Andre Beck, Paarijaat Aditya, and Volker Hilt. 2018.
SAND: Towards
High-Performance Serverless Computing. In 2018 USENIX Annual Technical
Conference (USENIX ATC 18). USENIX Association, Boston, MA, 923–935.
https://www.usenix.org/conference/atc18/presentation/akkus
[35] FritzAlder,N.Asokan,ArsenyKurnikov,AndrewPaverd,andMichaelSteiner.2019.
S-FaaS: Trustworthy and Accountable Function-as-a-Service Using Intel SGX. In
Proceedings of the 2019 ACM SIGSAC Conference on Cloud Computing Security
Workshop (London, United Kingdom) (CCSW’19). Association for Computing Ma-
chinery, New York, NY, USA, 185–199. https://doi.org/10.1145/3338466.3358916
[36] Kalev Alpernas, Cormac Flanagan, Sadjad Fouladi, Leonid Ryzhyk, Mooly Sagiv,
Thomas Schmitz, and Keith Winstein. 2018. Secure Serverless Computing Using
Dynamic Information Flow Control. Proc. ACM Program. Lang. 2, OOPSLA,
Article 118 (Oct. 2018), 26 pages. https://doi.org/10.1145/3276488
aws/whats-new/2006/08/24/announcing-amazon-elastic-compute-cloud-
amazon-ec2---beta/
[37] Amazon. 2006. EC2 Beta Announcement.
https://aws.amazon.com/about-
[38] Amazon Web Services. 2020. Identity and access management for AWS Lambda.