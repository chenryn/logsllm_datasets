# Logical Replication in PostgreSQL

## Presentation Details
- **Location:** Tallinn, 2016
- **Presenter:** Petr Jelínek
- **Company:** 2ndQuadrant
- **Copyright:** © 2ndQuadrant 2016

## About the Presenter
- **Affiliation:** 2ndQuadrant
- **Role:** PostgreSQL developer and consultant
- **Contributions:**
  - Over a decade of contributions to PostgreSQL
  - Features: DO, default privileges, TABLESAMPLE, etc.
  - Co-maintainer of Pgbouncer
- **Contact Information:**
  - Email: [PI:EMAIL]
  - GitHub: [https://github.com/pjmodos](https://github.com/pjmodos)

## Logical Replication
### Key Features
- **Target Node Writeability:**
  - Allows temporary tables
  - Supports different indexes
  - Supports different security settings
  - Enables data transformation
- **Selective Replication:**
  - Can replicate a subset of the database
- **Cross-Version Compatibility:**

### History
- **Trigger-Based Solutions:**
  - **Slony (circa 2004)**
  - **Londiste (circa 2007)**
  - **Characteristics:**
    - Run outside of PostgreSQL
    - Use tables as queues
    - Increase load on the upstream
    - No synchronous replication
    - Complex code to ensure commit order

### Current Development
- **BDR (Bi-Directional Replication):**
  - Modified PostgreSQL 9.4 + extension
  - 9.6 version coming soon (extension only)
  - Multi-master support
  - Transparent DDL
- **pglogical:**
  - Extension for PostgreSQL 9.4 and later
  - Primarily for one-way replication
  - Replacement for trigger-based solutions

## Physical Streaming Replication
- **Master-Standby Setup:**
  - Applications
  - Executor
  - WAL (Write-Ahead Log)
  - Heap
  - WAL Sender
  - WAL Receiver

## Logical Streaming Replication
- **Provider-Subscriber Setup:**
  - Applications
  - Executor
  - WAL
  - Heap
  - WAL Sender
  - Apply
  - Output Plugin

## pglogical
- **Features:**
  - Selective replication
  - Online upgrade
  - Data transport (e.g., data integration, streaming changes to analytical databases, master configuration data management)
  - Optionally synchronous apply

- **Installation and Configuration:**
  - **Extension Installation:**
    ```sql
    CREATE EXTENSION pglogical;
    ```
  - **Provider Node:**
    ```sql
    SELECT create_node('myprovider', 'dbname=foo host=10.10.1.1');
    ```
  - **Subscriber Node:**
    ```sql
    SELECT create_node('mysubscriber', 'dbname=foo host=10.10.1.2');
    SELECT create_subscription('mysubscription', 'dbname=foo host=10.10.1.1');
    ```

- **Replication Sets:**
  - Replication is defined in terms of groups (sets) of tables rather than individual tables.
  - Tables are not replicated until added to a set.
  - Tables can be defined in multiple sets, but changes will only be sent once per subscription.
  - **Default Actions:**
    - INSERT, UPDATE, DELETE, TRUNCATE
  - **Action Filtering:**
    - Useful for data aggregation and data warehousing.
  - **Predefined Sets:**
    - "default", "default_insert_only", "ddl_sql"

- **Table Replication:**
  - **Add Table to Replication Set:**
    ```sql
    SELECT pglogical.replication_set_add_table(
      set_name := 'default',
      relation := 'public.users',
      synchronize_data := true
    );
    ```
  - **Full Data Resynchronization:**
    ```sql
    SELECT pglogical.alter_subscription_resynchronize_table(...);
    ```
  - **Structure Synchronization:**
    - Not yet automated.

- **Sequences:**
  - Replicated using replication sets like tables.
  - Periodically bulk-replicated with dynamic buffering of last values.

- **DDL Replication:**
  - Initial schema either fully synchronized or not at all.
  - DDL commands not automatically replicated yet.
  - **Manual DDL Replication:**
    ```sql
    SELECT pglogical.replicate_ddl_command(command, replication_sets);
    ```

## Performance
- **Benchmark (pgbench):**
  - Comparison with Slony, Londiste3, and Streaming Replication.

## Caveats
- **Big Transactions:**
  - May cause replication lag.
- **Physical Replication Compatibility:**
  - Issues with failover.
- **Superuser Requirement:**
  - Currently required.

## Future Developments
- **pglogical 2.0:**
  - **Column Filtering:**
    ```sql
    SELECT pglogical.replication_set_add_table(
      set_name := 'default',
      relation := 'public.users',
      columns := '{id,name,...}'
    );
    ```
  - **Row-Based Filtering:**
    ```sql
    SELECT pglogical.replication_set_add_table(
      set_name := 'default',
      relation := 'public.users',
      row_filter := 'expression'
    );
    ```

## Contact Information
- **Email:** [PI:EMAIL]
- **Website:** [https://2ndquadrant.com/en/pglogical/](https://2ndquadrant.com/en/pglogical/)
- **GitHub:** [https://github.com/2ndQuadrant/pglogical](https://github.com/2ndQuadrant/pglogical)

**Thank you!**