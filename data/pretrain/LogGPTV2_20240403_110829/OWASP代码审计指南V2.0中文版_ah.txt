[https://tools.ietf.or
提供 Clickjacking 保护。 值和含义： 
deny-在帧内不进行渲染， 
sameorigin 如果原点不匹配则不进行
渲染， 
allow-from ： DOMAIN- 如 果 按 从
DOMAIN 加载的帧进行帧化，则允许进行
渲染 
X-Frame
-Options: 
deny 
82 
g/html/draft-ietf-webse
cframe-options-00] 
X-XSS-Protection 
[http://blogs.msdn.c
om/b/ie/archive/2008/0
7/02/ie8-security-part-iv
-thexss-filter.aspx 
X-XSS-Protection] 
此标头启用了内置在最新 Web 浏览器
中的跨站点脚本（XSS）筛选器。 无论如
何，通常默认情况下都会启用该过滤器，因
此，如果用户禁用了此属性，则此标头的作
用是重新启用该过滤器。 IE 8+和 Chrome
（不知道哪个版本）均支持此标头。 在
Chrome 4 中添加了反 XSS 过滤器。 
X-XSS-P
rotection: 
1;mode=blo
ck 
X-Content-Type-Op
tions 
[https://blogs.msdn.
microsoft.com/ie/2008/
09/02/ie8-security-part-
vi-beta-2-update/] 
唯一可取的值“ nosniff”，可防止
Internet Explorer 和 Google Chrome 浏
览器进行 MIME 嗅探已声明内容类型的响
应。这也适用于 Google Chrome 浏览器，
下载扩展程序使用。 这样可以减少遭受偷
渡式下载攻击和为用户上传的内容提供服
务的站点的风险，这些站点通过巧妙的命名
可 以 被 MSIE 视 为 可执 行 文 件 或 动 态
HTML 文件。 
X-Conte
nt-Type-Opt
ions:nosniff 
Content-Security-Po
licy, 
X-Content-Security-
内容安全策略需要仔细调整和精确定
义策略。 如果启用，CSP 将对浏览器呈现
页面的方式产生重大影响（例如，默认情况
Content
-Security-Po
licy:default-s
83 
policy,X-WebKit-CSP 
[https://www.w3.org
/TR/ 
CSP/] 
下禁用内联 JavaScript，并且必须在策略中
明确允许）。 CSP 可防止各种攻击，包括
跨站点脚本和其他跨站点注入。 
rc ‘self’ 
Content-Security-Po
licy-Report_Only 
[https://www.w3.org
/TR/CSP/CSP/] 
类似于 Content-Security-Policy，不
过仅仅是报告。 在实施，调整和测试过程
中很有用。 
Content
-Security-Po
licy-Report-
Only: 
default-src 
‘ self ’ ; 
report-uri 
http://logho
st.example.c
om/reports.j
sp 
请 注 意 ， Spring Security
库 可 以 帮 助 处 理 这 些 标 题 ， 请 参 见
http://docs.spring.io/spring-security/site/docs/current/reference/html/headers.ht
ml 
84 
参考 
Apache:http://httpd.apache.org/docs/2.0/mod/mod_headers.html  
IIS:http://TechNet . Microsoft . com/pl-pl/library/cc 753133(v = ws . 10)。 
3.1.5 输入验证 
输入验证是应用程序安全性最有效的技术控制之一。它可以减轻许多漏洞，包括跨站点
脚本、各种形式的注入和一些缓冲区溢出。输入验证不仅仅是审计表单字段值。 
来自用户的所有数据都是是不可的。请记住，安全编码的首要规则之一是“不要相信用
户输入”。始终保持在充分了解您的应用程序想要实现的目标的情况下验证用户数据。 
正则表达式可以用来验证用户输入，但是正则表达式越复杂，它就越有可能无法被完全
的证明，并且在极端情况下会有错误。正则表达式对于质量保证来说也很难测试。正则表达
式也可能使代码审计者很难准确地审计正则表达式。 
数据有效性 
系统(以及系统/应用程序之间)的所有外部输入都应经过输入验证。验证规则由应用程
序的业务需求定义。如果可能，应该实现完全匹配的 validator，只允许符合期望值的数据。
一种“已知良好”的方法(白名单)很常见，这种方法可移植性差，但更灵活。适用于已知允
许白名单中定义的字符/ASCII 范围。 
85 
这样的范围是由输入字段的业务需求定义的。数据验证的其他方法都是“已知不安全的”，
是类似“不良字符”的黑名单形式。这种形式无法解决根本问题，且需要维护。 
业务验证 
业务验证与业务逻辑有关。在审计执行这种逻辑的代码之前，需要理解业务逻辑。业务
验证可以用来限制用户输入的值范围或交易。审计业务验证代码还可能包括舍入误差或浮点
问题，这些问题可能会导致整数溢出等问题，从而严重损害安全基线。 
标准化 
规范化是一个过程，通过这个过程，一个名字的各种等价形式可以被解析为一个标准的
名字，或“规范的”名字。最流行的编码是 UTF-8、UTF-16 等等(在 RFC 2279 中有详细
描述)。单个字符，如句点/句号(可以用许多不同的方式来表示:ASCII 2E、Unicode C0 AE
和许多其他方式。 
有了无数种编码用户输入的方式，如果没有仔细构建，web 应用程序的过滤器很容易
被绕过。 
反面示例： 
1 public static void main(String[] args) { 
2 File x = new File(“/cmd/” + args[1]); 
3 String absPath = x.getAbsolutePath(); 
4 } 
86 
1 public static void main(String[] args) throws IOException { 
2 File x = new File(“/cmd/” + args[1]); 
3 String canonicalPath = x.getCanonicalPath(); 
1 var isValidUri = Uri.IsWellFormedUriString(passedUri, UriKind.Absolute); 
1 var uriToVerify = new Uri(passedUri); 
2 var isValidUri = uriToVerify.IsWellFormedOriginalString(); 
3 var isValidScheme = uriToVerify.Scheme == “http” || uriToVerify.Scheme == “https”; 
正面示例： 
.NET 请求验证 
一种解决方法是使用.Net“请求验证”。使用请求验证是验证用户数据的良好开端，非
常有效。缺点是过于一般化，不够具体，无法满足我们提供用户数据完全信任的所有要求。 
您永远不能使用请求验证来保护您的应用程序免受跨站点脚本攻击。 
下面的示例演示如何在 URL 类中使用静态方法来确定用户提供的 URL 是否有效。 
87 
但是，为了充分验证 URL，您还应该审计以确保它指定了 http 或 https。下面的示例
使用实例方法来验证 URL 是否有效。 
在将用户输入呈现为超文本标记语言或在查询中包含用户输入之前，请对这些值进行编
码，以确保不包含非法代码。 
您可以使用语法对标记中的值进行 HTML 编码，如下所示。 
或者，在 Razor 语法中，可以用@进行 HTML 编码，如下图所示。 
 @userInput 
下一个例子展示了如何在代码隐藏中对一个值进行 HTML 编码。 
var encodedInput = Server.HtmlEncode(userInput); 
托管代码和非托管代码 
Java 和.Net 有托管和非托管代码的概念。为了在调用本机代码时提供这些保护，不要
将本机方法声明为公共的。相反，将其声明为私有，并通过公共包装方法公开功能。包装器
可以在调用本机方法之前执行任何必要的输入验证。 
调用带有数据验证的本机方法的示例代码： 
88 
代码审计者的数据验证清单。 
⚫ 
确保存在数据验证机制。 
⚫ 
确保所有可能(并将)被恶意用户修改的输入(如 HTTP 头、输入字段、隐藏字段、下拉
列表和其他网络组件)都得到正确验证。 
⚫ 
确保对所有输入进行适当的长度审计。 
⚫ 
确保所有字段、cookies、http 头/正文和表单字段都经过验证。 
⚫ 
确保数据格式良好，并尽可能只包含已知的安全字符。 
⚫ 
确保数据验证发生在服务器端。 
⚫ 
审计数据验证在哪里进行，以及是否使用了集中式模型或分散式模型。 
1 public final class NativeMethodWrapper { 
2 private native void nativeOperation(byte[] data, int offset, int len); 
3 public void doOperation(byte[] data, int offset, int len) { 
4 // copy mutable input 
5 data = data.clone(); 
6 // validate input 
7 // Note offset+len would be subject to integer overflow. 
8 // For instance if offset = 1 and len = Integer.MAX_VALUE, 
9 // then offset+len == Integer.MIN_VALUE which is lower 
10 // than data.length. 
11 // Further, 
12 // loops of the form 
13 // for (int i=offset; i data.length - len) { 
17 throw new IllegalArgumentException(); 
18 } 
19 nativeOperation(data, offset, len); 
20  } 
21 } 
89 
⚫ 
确保数据验证模型中没有后门。 
⚫ 
“黄金法则”：所有外部输入，无论是什么，都将经过检验和验证。 
资源: 
http://msdn.microsoft.com/en-us/library/vstudio/system.uri 
3.2 A2 身份验证和会话管理中断 
3.2.1 概述 
Web 应用程序和 Web 服务都使用身份验证作为通过用户 id 和密码登录的主要访问控
制手段。这种控制对于防止黑客或用户越权访问机密文件、数据或网页的行为至关重要。 
3.2.2 身份验证的作用 
身份验证很重要，因为它是您希望保护的功能的网关。一旦用户通过身份验证，他们的
请求将被授权与您的应用程序进行某种级别的交互，未经身份验证的用户将被禁止这样做。
您无法控制用户如何管理他们的身份验证信息或令牌，但您可以确保现在有办法在不进行正
确身份验证的情况下无法执行某些应用程序功能。 
有许多形式的身份验证，密码是最常见的。其他形式包括客户端证书、生物识别技术、
通过短信或特殊设备的一次性密码，或开放授权(OAUTH)或单点登录(SSO)等认证框架。 