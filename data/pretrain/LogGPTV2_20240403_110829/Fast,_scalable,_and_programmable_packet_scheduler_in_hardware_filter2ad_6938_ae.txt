Certainly! Here is a more polished and coherent version of your text:

---

### Performance Comparison: PIFO vs. PIEO

The PIFO (Push-In-First-Out) scheduler can operate at a higher rate than the PIEO (Push-In-Extract-Out) scheduler. This difference in performance is a trade-off made in the hardware design of PIEO, which achieves an order of magnitude more scalability compared to PIFO. Alternatively, one could implement the PIEO primitive using PIFO's hardware design, thereby achieving greater expressibility without sacrificing scheduling rate, though on a smaller scale. However, we argue that the trade-off in PIEO’s hardware design is justified. PIEO remains extremely fast, capable of scheduling at tens of nanoseconds (or even less with higher clock rates), while also scaling to tens of thousands of flows, a critical requirement for today's multi-tenant cloud networks [31, 32].

**Note:** Porting the PIEO primitive to PIFO's hardware design is straightforward, despite PIEO supporting a more complex dequeue function. The predicates used in PIEO can be evaluated in parallel in flip-flops within a single clock cycle.

### Related Work

PIEO builds upon and complements existing work in packet scheduling, such as PIFO [37] and universal packet scheduling algorithms like UPS [27], whose goals closely align with our work. We discuss the limitations of PIFO and UPS in §2.3. Loom [38] proposes a flexible packet scheduling framework in the NIC, leveraging the PIFO scheduler for enforcing scheduling policies. In principle, systems like Loom could use the PIEO scheduler instead of PIFO to achieve greater expressibility and scalability.

### Data Structures for Hardware Packet Schedulers

Most hardware packet schedulers rely on FIFO-based data structures, which enable fast and scalable scheduling but at the cost of limited programmability or accuracy (§2.3). A priority queue allows ordered scheduling of elements, making it suitable for a wide range of scheduling algorithms. P-heap [7] is a scalable heap-based implementation of a priority queue in hardware. However, a heap-based priority queue cannot efficiently implement the "Extract-Out" primitive in PIEO. PIFO [37] provides a priority queue abstraction using an ordered list data structure, which is also used in PIEO. Unfortunately, PIFO’s hardware implementation of the ordered list is not scalable (Fig. 8). In this paper, we present both a fast and scalable implementation of an ordered list in hardware.

### Discussion: PIEO as an Abstract Dictionary Data Type

In general, the PIEO primitive can be viewed as an abstract dictionary data type [43], which maintains a collection of (key, value) pairs indexed by key and supports operations such as search, insert, delete, and update. PIEO offers an extremely efficient hardware implementation of the dictionary data type, performing all these operations in O(1) time while being scalable. Additionally, it can support traditionally challenging dictionary operations, such as filtering keys within a specified range, by extending the PIEO implementation to support predicates of the form \(a \leq \text{key} \leq b\). Dictionary data types are widely used in computer science, and PIEO presents a potential alternative to traditional hardware implementations like hashtables and search trees.

### Conclusion

We introduced a new packet scheduling primitive called Push-In-Extract-Out (PIEO), which can express a wide range of packet scheduling algorithms. PIEO assigns each element a rank and an eligibility predicate, both of which can be programmed based on the chosen scheduling algorithm. At any given time, it schedules the "smallest ranked eligible" element. We presented a fast and scalable hardware design for the PIEO scheduler and prototyped it on an FPGA. Our prototype can schedule at tens of nanoseconds while scaling to tens of thousands of flows.

### Acknowledgments

I thank the anonymous SIGCOMM reviewers and the shepherd, Anirudh Sivaraman, for their valuable comments and suggestions. I also thank my mentors at Cornell, Hakim Weatherspoon and Rachit Agarwal, as well as the entire Microsoft Azure Datapath team for valuable discussions. This work was partially supported by NSF (award No. 1704742).

### Figures

- **Figure 11:** Rate-limit enforcement in the PIEO prototype.
- **Figure 12:** Fair queue enforcement in the PIEO prototype.

### Programmability

In §4, we demonstrate that a wide range of scheduling algorithms can be expressed using the PIEO primitive. In this section, we program two such algorithms, Token Bucket (§4.2) and WF2Q+ (§4.1), on our FPGA prototype using System Verilog. These algorithms implement two of the most widely-used scheduling policies in practice: rate-limiting and fair queuing.

We programmed a two-level hierarchical scheduler using our prototype, with ten nodes at level-2 and ten flows within each node, totaling 100 flows. We implemented packet generators, one per flow, on the FPGA to simulate the flows. The link speed is 40 Gbps, and we scheduled at MTU granularity. For experiments, we assigned varying rate-limit values to each node at level-2 in the hierarchy and enforced them using the Token Bucket algorithm. The rate-limit value of a particular node at level-2 was then shared fairly across its ten flows using the WF2Q+ algorithm. In Fig. 11, we sampled a random level-2 node and showed that the PIEO scheduler accurately enforces the rate-limit on that node. In Fig. 12, we demonstrated that for each rate-limit value assigned to the chosen level-2 node, the PIEO scheduler accurately enforces fair queuing across all the flows within that level-2 node.

### References

[1] IEEE Standard 802.11Q-2005. 2005. Standard for local and metropolitan area networks, Virtual Bridged Local Area Networks. (2005).
...
[53] H Zhang and D Ferrari. 1994. Rate-Controlled Service Disciplines. Journal of High Speed Networks 3, 4 (1994), 389–412.

---

This version is more structured, clear, and professional, with improved transitions and coherence.