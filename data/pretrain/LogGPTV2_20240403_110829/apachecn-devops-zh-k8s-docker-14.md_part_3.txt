              - k8sapi.apps.192-168-2-114.nip.io
            import_into_ks: certificate
            name: unison-ca
            tls_secret_name: ou-tls-certificate
    ```
11.  删除`ou-tls-certificate` `Secret` :
    ```
    $ kubectl delete secret ou-tls-certificate -n openunison
    secret "ou-tls-certificate" deleted
    ```
12.  编辑`openunison` `Ingress`对象，将`cert-manager.io/cluster-issuer: ca-issuer`添加到`annotations`列表中。
13.  使用第 7 章 、*将认证集成到您的集群中*的 [*部分的*中的步骤 4–6*完成与测试身份提供者的单点登录集成。*](07.html#_idTextAnchor203)
14.  登录打开统一，然后注销。
15.  OpenUnison 自动化门户不对来自测试身份提供者的组做任何事情。要成为集群管理员，您必须“引导”到环境的组中:
    ```
    $ kubectl exec -ti mariadb-0 -n mariadb -- mysql -u \
     unison --password='startt123' \
     -e "insert into userGroups (userId,groupId) values (2,1);" \
     unison
    $ kubectl exec -ti mariadb-0 -n mariadb -- mysql -u \
     unison --password='startt123' \
     -e "insert into userGroups (userId,groupId) values (2,2);" \  unison
    ```
16.  最后，重新登录。您将成为您的群集的全局管理员和群集管理员。
部署 OpenUnison 后，您现在可以远程管理您的集群。根据您访问集群的方式，在本章的其余步骤中，使用工作站直接管理集群可能会更容易。
你会注意到现在 OpenUnison 中有不同的“徽章”。除了获取令牌或访问仪表盘，您还可以请求创建新的命名空间或访问 ActiveMQ 仪表盘。您还会看到标题栏有附加选项，如**请求访问**。OpenUnison 将成为我们部署管道的自助服务门户，而无需在我们的应用或集群中手动创建对象。我们不会详细讨论这些，直到我们谈到使用 OpenUnison 来自动部署我们的管道。
准备好集群后，下一步是为我们的管道部署组件。
# 部署 GitLab
在构建 GitOps 管道时，最重要的组件之一是 Git 存储库。GitLab 除了 Git 之外，还有很多组件，包括用于导航代码的 UI、用于编辑代码的基于 web 的**集成开发环境** ( **IDE** )以及在多租户环境中管理项目访问的强大身份实现。这使得它成为我们平台的一个很好的解决方案，因为我们可以将我们的“角色”映射到 GitLab 组。
在本节中，我们将把 GitLab 部署到我们的集群中，并创建两个简单的存储库，我们将在以后部署 Tekton 和 ArgoCD 时使用它们。当我们重新访问 OpenUnison 来自动化我们的管道部署时，我们将关注自动化步骤。
GitLab 部署了一个 Helm 图表。对于这本书，我们构建了一个定制的`values`文件来运行一个最小的安装。虽然 GitLab 附带了类似于 ArgoCD 和 Tekton 的功能，但我们不会使用它们。我们也不想担心高可用性。让我们开始吧:
1.  创建名为`gitlab` :
    ```
    $ kubectl create ns gitlab
    namespace/gitlab created
    ```
    的新命名空间
2.  我们需要添加我们的证书颁发机构作为 GitLab 信任与 OpenUnison 对话的机密，以及我们最终将为 Tekton 创建的网络钩子:
    ```
    $ kubectl get secret ca-key-pair \
     -n cert-manager -o json | jq -r '.data["tls.crt"]' \
     | base64 -d > tls.crt
    $ kubectl create secret generic \
     internal-ca --from-file=. -n gitlab
    ```
3.  Open `chapter14/gitlab/secret/provider` in your favorite text editor. Replace `local.tremolo.dev` with the full domain suffix for your cluster. For instance, my cluster is running on `192.168.2.114`, so I'm using the `apps.192-168-2-114.nip.io` suffix. Here's my updated `Secret`:
    ```
    name: openid_connect
    label: OpenUnison
    args:
      name: openid_connect
      scope:
        - openid
        - profile
      response_type: code
      issuer: https://k8sou.apps.192-168-2-114.nip.io/auth/idp/k8sIdp
      discovery: true
      client_auth_method: query
      uid_field: sub
      send_scope_to_token_endpoint: false
      client_options:
        identifier: gitlab
        secret: secret
        redirect_uri: https://gitlab.apps.192-168-2-114.nip.io/users/auth/openid_connect/callback
    ```
    重要说明
    我们使用的是`secret`的客户机密。对于生产集群，不应该这样做。如果您正在使用我们的模板作为起点将 GitLab 部署到生产中，请确保对此进行更改。
4.  为 GitLab 创建`secret`与 OpenUnison 进行单点登录集成。当我们再次访问 OpenUnison 时，我们将完成流程:
    ```
    $ kubectl create secret generic gitlab-oidc --from-file=. -n gitlab
    secret/gitlab-oidc created
    ```
5.  编辑`chapter14/yaml/gitlab-values.yaml`。就像在*步骤 3* 中一样，用集群的完整域后缀替换`local.tremolo.dev`。例如，我的集群运行在`192.168.2.114`上，所以我使用了`apps.192-168-2-114.nip.io`后缀。
6.  如果您的群集运行在单个虚拟机上，现在是创建快照的好时机。如果在 GitLab 部署过程中出现问题，恢复到快照会更容易，因为 Helm 图表在删除后没有做好清理工作。
7.  将图表添加到您的本地存储库中，并部署 GitLab:
    ```
    $ helm repo add gitlab https://charts.gitlab.io
    $ "gitlab" has been added to your repositories
    $ helm install gitlab gitlab/gitlab -n gitlab -f chapter14/yaml/gitlab-values.yaml
    NAME: gitlab
    LAST DEPLOYED: Sat Aug  8 14:50:13 2020
    NAMESPACE: gitlab
    STATUS: deployed
    REVISION: 1
    WARNING: Automatic TLS certificate generation with cert-manager is disabled and no TLS certificates were provided. Self-signed certificates were generated.
    ```
8.  运行需要几分钟。即使安装了 Helm 图表，所有 Pods 完成部署也需要 15–20 分钟。当 GitLab 正在初始化时，我们需要更新 web 前端的`Ingress`对象，以使用由我们的证书颁发机构签署的证书。在`gitlab`命名空间中编辑`gitlab-webservice` `Ingress`对象。将`kubernetes.io/ingress.class: gitlab-nginx`注释改为`kubernetes.io/ingress.class: nginx`。另外，将`secretName`从`gitlab-wildcard-tls`改为`gitlab-web-tls` :
    ```
    apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      annotations:
        cert-manager.io/cluster-issuer: ca-issuer
        kubernetes.io/ingress.class: nginx
        kubernetes.io/ingress.provider: nginx
    .
    .
    .
      tls:
      - hosts:
        - gitlab.apps.192-168-2-114.nip.io
        secretName: gitlab-web-tls
    status:
      loadBalancer: {}
    ```
9.  我们接下来需要更新我们的 GitLab shell，以接受端口`2222`上的 SSH 连接。这样，我们可以提交代码，而不必担心阻止 SSH 访问您的 KinD 服务器。编辑`gitlab`命名空间中的`gitlab-gitlab-shell` `Deployment`。找到`containerPort: 2222`并将`hostPort: 2222`插入下方，确保保持间距。一旦 Pod 重新启动，您将能够在端口`2222`上 SSH 到您的 GitLab 主机名。
10.  要获取登录 GitLab 的根密码，请从生成的机密中获取:
    ```
    $ kubectl get secret gitlab-gitlab-initial-root-password -o json -n gitlab | jq -r '.data.password' | base64 -d
    10xtSWXfbvH5umAbCk9NoN0wAeYsUo9jRVbXrfLn KbzBoPLrCGZ6kYRe8wdREcDl
    ```
现在，您可以通过转到`https://gitlab.apps.x-x-x-x.nip.io`登录到您的 GitLab 实例，其中`x-x-x-x`是您的服务器的 IP。由于我的服务器运行在`192.168.2.114`上，我的 GitLab 实例运行在`https://gitlab.apps.192-168-2-114.nip.io/`上。
## 创建示例项目
为了探索 Tekton 和 ArgoCD，我们将创建两个项目。一个用于存储简单的 Python web 服务，而另一个用于存储运行该服务的清单。让我们开始吧:
1.  GitLab 屏幕的顶部会要求您添加一个 SSH 密钥。现在就这样做，这样我们就可以提交代码了。由于我们将通过 SAML 集中认证，GitLab 将没有用于认证的密码。
2.  创建一个项目，并将其称为`hello-python`。保持能见度**私密**。
3.  使用 SSH 克隆项目。因为我们运行在端口`2222`上，我们需要将 GitLab 提供的 URL 更改为合适的 SSH URL。例如，我的 GitLab 实例给了我 URL[git @ git lab . apps . 192-168-2-114 . nip . io:root/hello-python . git](mailto:PI:EMAIL:root/hello-python.git)。这个需要改成[ssh://git @ git lab . apps . 192-168-2-114 . nip . io:2222/root/hello-python . git](mailto:ssh://PI:EMAIL:2222/root/hello-python.git)。
4.  克隆后，将`chapter14/python-hello`的内容复制到您的存储库中，并推送到 GitLab:
    ```
    $ cd chapter14/python-hello
    $ git archive --format=tar HEAD > /path/to/hello-python/data.tar
    $ cd /path/to/hello-python
    $ tar -xvf data.tar
    README.md
    source/
    source/Dockerfile
    source/helloworld.py
    source/requirements.txt
    $ git add *
    $ git commit -m 'initial commit'
    $ git push
    ```
5.  在 GitLab 中，创建另一个名为`hello-python-operations`的项目，将可见性设置为私有。克隆这个项目，将`chapter14/python-hello-operations`的内容复制到存储库中，然后推送。
现在已经使用一些示例代码部署了 gitrab，我们可以继续下一步，构建一个实际的管道！