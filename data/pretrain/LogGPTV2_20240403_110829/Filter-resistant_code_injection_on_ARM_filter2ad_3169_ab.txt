The third type of addressing mode is used with the instructions
that perform multiple loads and stores at once. The LDM and STM
instructions take a list of registers, and will either load data into the
registers in this list, or store data from these registers in memory.
The general syntax for multiple loads and stores looks like this:
  { ! } , 
  { ! } , 
The addr_mode operand can be one of the following four pos-
increment after (IA), increment before (IB), decrement
sibilities:
after (DA), or decrement before (DB). In all cases, Rn is used as
the base register to start computing memory addresses where the
selected registers will be stored. The different addressing modes
specify different schemes of computing these addresses.
By default, GCC compiles the above code to:
r1 , #0
CMP
BEQ . L4
LDR r0 , 
BL
B
. L4 :
p r i n t f
. L8
LDR r0 , 
BL
. L8 :
p r i n t f
The value in r1 contains the value of the err variable, and is
compared to the value 0. If the contents of r1 is zero, the code
branches to the label .L4, where the string ‘OK!’ is printed out. If
the value in r1 isn’t zero, the BEQ instruction is not executed, and
the code continues to print out the ErrorCode string. Finally, it
branches to label .L8.
With conditional execution, the above code could be rewritten
as:
r1 , #0
CMP
LDRNE r0 , 
LDREQ r0 , 
BL
p r i n t f
The ‘NE’ sufﬁx means that the instruction will only be executed
if the contents of, in this case, r1 is not equal to zero. Similarly,
the ‘EQ’ sufﬁx means that the instructions will be executed if the
contents of r1 is equal to zero.
132.2.4 Thumb Instructions
In order to further increase code density, most ARM processors
support a second instruction set called the Thumb instruction set.
These Thumb instructions are 16 bits in size, compared to the 32
bits of ordinary ARM instructions. Prior to ARMv6, only the T
variants of the ARM processor supported this mode (e.g. ARM4T).
However, as of ARMv6, Thumb support is mandatory.
Instructions executed in 32 bit mode are called ARM instruc-
tions, whereas instructions executed in 16 bit mode are called Thumb
instructions. Unlike ARM instructions, Thumb instructions do not
support conditional execution.
Since instructions are only two bytes large in Thumb mode, it
is easier to satisfy the alphanumeric constraints for instructions be-
cause we only need to get two bytes alphanumeric instead of four.
To this end, we will discuss how to get into Thumb mode from
ARM mode using only alphanumeric instructions. For programs al-
ready running in Thumb mode, a way of going back to ARM mode
is also discussed. In order to achieve the broadest possible com-
patibility with earlier versions of ARM that do not support Thumb
mode, Thumb instructions will not be used as part of our shellcode.
3. ALPHANUMERIC CODE
In most cases, alphanumeric bytes are likely to get through con-
versions and ﬁlters unmodiﬁed. Therefore, having shellcode with
only alphanumeric instructions is sometimes necessary and often
preferred.
An alphanumeric instruction is an instruction where each of the
four bytes of the instruction is either an upper case or lower case
letter, or a digit. In particular, the bit patterns of these bytes must
always conform to the following constraints:
• The most signiﬁcant bit, bit 7, must be set to 0
• Bit 6 or 5 must be set to 1
• If bit 5 is set to 1, but bit 6 is set to 0, then bit 4 must also be
set to 1
These constraints do not eliminate all non-alphanumeric charac-
ters, but they can be used as a rule of thumb to quickly dismiss
most of the invalid bytes. Each instruction will have to be checked
whether its bit pattern follows these conditions and under which
circumstances.
It is worth emphasizing that these constraints are tough: only
0.34% of the 32 bit words consist of 4 alphanumerical bytes.
This section will discuss some of the difﬁculties of writing al-
phanumeric code. When we discuss the bits in a byte, we will
maintain the deﬁnition as introduced above: the most signiﬁcant
bit in a byte is bit 7 and the least signiﬁcant bit is bit 0. The ﬁrst
byte of an ARM instruction is bits 31 to 24 and the last byte is bits
7 to 0.
3.1 Alphanumeric Instructions
The ARM processor (in its v5 incarnation) has 147 instructions.
Most of these instructions cannot be used in alphanumeric code,
because at least one of the four bytes of the instruction is not al-
phanumeric. In addition, we have also ﬁltered out instructions that
require a speciﬁc version of the ARM processor, in order to keep
our work as broadly applicable as possible.
After ﬁltering the instructions, only 18 instructions remain: B/BL,
CDP, EOR, LDC, LDM(1), LDM(2), LDR, LDRB, LDRBT, LDRT,
MCR, MRC, RSB, STM(2), STRB, STRBT, SUB, SWI.
Even though they can be used alphanumerically, some of the
instructions have no or only limited use in the context of shell-
code: CDP, LDC, MCR and MRC all perform operations on copro-
cessors, however since we can not be sure which coprocessors will
be available on a speciﬁc platform, we discard these instructions.
The B/BL (branch) instruction is also of limited use to us in most
cases: the last 24 bits are used as an offset to the program counter
to calculate the destination of the jump. After making these bits
alphanumeric, the instruction would have to jump at least 12MB1
from the current location, far beyond the scope of our shellcode.
The remaining thirteen instructions can be categorized in groups
that contain instructions with the same basic functionality but that
only differ in the details. For instance, LDR loads a word from
memory into a register whereas LDRB loads a byte into the least
signiﬁcant bytes of a register. Even though these are two different
instructions, they perform essentially the same operation.
We can distinguish the following seven categories:
• EOR Exclusive OR
• LDM (LDM(1), LDM(2)) Load multiple registers from a
consecutive memory locations
• LDR (LDR, LDRB, LDRBT, LDRT) Load value from mem-
ory into a register
• STM Store multiple registers to consecutive memory loca-
tions
• STRB (STRB, STRBT) Store a register to memory
• SUB (SUB, RSB) Subtract
• SWI Software Interrupt a.k.a. do a system call
Unfortunately, the instructions in the list above are not always
alphanumeric. Depending on which operands are used, these func-
tions may still generate non-alphanumeric characters. Hence, ad-
ditional constraints apply to each instruction. These constraints are
discussed further in the following subsections.
3.2 Registers
In alphanumeric shellcode, not all instructions that take registers
as operands can use any register for any operand.
In particular,
none of the data-processing instructions can take registers r0 to
r2 and r8 to r15 as the destination register Rd. The reason is
that the destination register is encoded in the four most signiﬁcant
bits of the third byte of an instruction. If these bits are set to the
value 0, 1 or 2, this would generate a byte that is too small to be
alphanumerical.
If the bits are set to a value greater than 7, the
resulting byte will be too high.
If these registers cannot be set as the destination registers, this
essentially means that any calculated value cannot be copied into
one of these registers using the data-processing instructions. How-
ever, being able to set the contents of some of these registers is very
important. As explained in Section 2.2, ARM uses registers r0 to
r3 to transfer parameters to functions and system calls.
In addition, registers r4 and r6 can in some cases also generate
non-alphanumeric characters. The only registers that can be used
without restrictions are limited to r3, r5 and r7. This means that
we only have three registers that we can use freely throughout the
program.
1The branch instruction will ﬁrst shift the 24 bit offset left twice
because all instructions start on a 4 byte boundary, this means that
the smallest possible value we can provide as offset: 0x303030 will
in fact be an offset of 12632256.
143.3 Self-modifying code
ARM processors have an instruction cache, which makes writing
self-modifying code a hard thing to do since all the instructions that
are being executed will most likely already have been cached. The
Intel architecture has a speciﬁc requirement to be compatible with
self-modifying code, and as such will make sure that when code
is modiﬁed in memory the cache that possibly contains those in-
structions is invalidated. ARM has no such requirement, meaning
that the instructions that have been modiﬁed in memory could be
different from the instructions that are actually executed. Given the
size of the instruction cache and the proximity of the modiﬁed in-
structions, it is very hard to write self-modifying shellcode without
having to ﬂush the instruction cache. We discuss how to do this in
section 4.7
3.4 Conditional execution
Because the condition code of an instruction is encoded in the
most signiﬁcant bits of the ﬁrst byte of the instruction (bits 31-28),
the value of the condition code has a direct impact on the alphanu-
meric properties of the instruction. As a result, only a limited set of
condition codes can be used in alphanumeric shellcode.
Unfortunately, the condition code AL, which speciﬁes that an in-
struction should always be executed, cannot be used. This means
that all alphanumeric ARM instructions must be executed condi-
tionally. From the 15 possible condition codes, only ﬁve can be
used: CC (Carry clear), MI (Negative), PL (Positive), VS (Over-
ﬂow) and VC (No overﬂow). This means that we can only execute
instructions if the correct condition codes are set and that the con-
ditions that can be used when attempting conditional control ﬂow
are limited.
4. FILTER-RESISTANT SHELLCODE
In the previous sections, we’ve sketched some of the features
of the ARM processor, and some of the problems that arise when
writing alphanumeric shellcode. When the shellcode starts up, we
know nothing about the program state, we do not know the value
of any registers (including CPSR), the state of memory or anything
else. This presents us with a number of important challenges to
solve. This section will introduce a number of solutions for these
problems. In addition, this section will show how to use the limited
instructions that are available to simulate the operations of a much
richer instruction set.
4.1 Conditional execution
In our implementation, we’ve chosen the condition codes PL and
MI. Instructions marked with PL will only be executed if the condi-
tion status is positive or zero. In contrast, MI instructions will only
be executed if the condition status is negative.
When our shellcode starts up, we can not be sure what state the
CPSR register is in. However, because PL and MI are mutually
exclusive, we can always ensure that an instruction gets executed
by simply adding the same instruction twice to the shellcode, once
with the PL sufﬁx and once with the MI sufﬁx.
Once we gain more knowledge about the program state, we can
execute an instruction that we know the result of, and mark it as an
instruction that must update the CPSR register. This can be done,
for example, by setting the S bit in a calculation with SUB or EOR.
Setting the S bit on either instruction will still allow them to be
represented alphanumerically.
4.2 Registers
When the processor starts executing the alphanumeric shellcode,
the contents of all the registers is unknown. However, in order to
do any useful calculations, the value of at least some registers must
be known. In addition, a solution must be found to set the contents
of registers r0 to r2. Without these registers, the shellcode will
not be able to do system calls or execute library functions.
Getting a constant in a register.
None of the traditional instructions are available to place a known
value in a register, making this a non-trivial problem. The MOV in-
struction cannot be used, because it is never alphanumeric. The
only data processing instructions that are available are EOR and
SUB, but these instructions can only be used in conjunction with ad-
dressing modes that use immediate values or involve shifting and
rotating. Because the result of a subtraction or exclusive OR be-
tween an unknown value and a known value is still unknown, these
instructions are not useful. Given that these are the only arithmetic
instructions that are supported in alphanumeric code, it is impossi-
ble to arithmetically get a known value into a register.
Fortunately, there is some knowledge about the running code that
can be exploited in order to get a constant value into a register. Even
though the exact value of the program counter, register r15, is
unknown, it will always point to the executing shellcode. Hence, by
using the program counter as an operand for the LDRB instruction,
one of the bytes of the shellcode can be loaded into a register. This
is done as follows:
SUBPL
LDRPLB
pc cannot be used directly in an LDR instruction as this would
result in non-alphanumeric code. So its contents is copied to regis-
ter r3 by subtracting 56 from pc. The value 56 is chosen to make
the instruction alphanumeric. Then, register r3 is used in the LDRB
instruction to load a known byte from the shellcode into r3. The
immediate offset -48 is used to ensure that the LDRB instruction
is alphanumeric. Once this is done, r3 can be used to load other
values into other registers by subtracting an immediate value.
r3 , pc , #56
r3 ,
[ r3 , #−48]
Loading values in arbitrary registers.
As explained in Section 3.2, it is not possible to use registers r0
to r2 as the destination registers of arithmetic operations. There is,
however, one operation that can be used to write to the three lowest
registers, without generating non-alphanumeric instructions. The
LDM instruction loads values from the stack into multiple registers.
It encodes the list of registers it needs to write to in the last two
bytes of the instruction. If bit n is set, register Rn is included in the
list and data is written to it. In order to get the bytes of the instruc-
tion to become alphanumeric, other registers have to be added to
the list.
r 3
r 4
r 6
That is, the following code
MOV r0 ,
MOV r1 ,
MOV r2 ,
has to be transformed as following to be alphanumeric:
STMPLDB r5 , { r3 ,
l r }^
RSBPL r3 ,
SUBPL r5 ,
LDMPLDA r 5 ! , { r0 ,
In the example above, the registers r3, r4 and r6 are stored on
the stack using the STM instruction and then read from the stack
into registers r0, r1, r2 using the LDM instruction. In order to
make the STM instruction alphanumeric, the dummy registers r8,
r3 , ROR #2
r2 ,
r8 , #72
r5 ,
l r }
r8 ,
r4 ,
r6 ,
r9 ,
r1 ,
r6 ,
r9 ,
15r9 and lr are added to the list, which will write them to the stack.
Similarly the LDM instruction adds r6, r9 and lr. This will re-
place the value of r6 with the value of r8. The caret symbol is
also necessary to make the instruction alphanumerical. This sym-
bol sets a bit that is only used if the processor is executing in privi-
leged mode. In unprivileged mode, the bit is ignored.
The decrement before addressing mode that is used for the STM
instruction results in an invalid bit pattern when used in conjunc-
tion with LDM. Hence, we use a different addressing mode for the
STM instruction. This requires, however, that we modify the start-
ing address slightly for it to work as expected, which we do by
subtracting 4 from r5 using the RSB and SUB instructions above.
4.3 Arithmetic operations
The ADD instruction is not alphanumeric, so it must be simu-
lated using other instructions. After generating a negative number
by subtracting from our known value, an addition can be performed
by subtracting that negative value from another register. However,
one caveat is that when the SUB instruction is used with two regis-
ters as operands, an additional rotate right (ROR) on the second op-
erand must be done in order to make the bytes alphanumeric. This
effect can be countered by either rotating the second operand with
an immediate value that will result in a (different) known value,
or by rotating the second operand with a register that contains the
value 0.
SUBPL
SUBPL
SUBPL
If we assume that register r3 contains the value 56, using the