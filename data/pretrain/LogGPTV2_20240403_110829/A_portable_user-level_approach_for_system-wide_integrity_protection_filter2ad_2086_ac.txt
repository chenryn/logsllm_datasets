### Aho-Corasick Algorithm for Efficient String Matching

The Aho-Corasick algorithm [4] is a well-known method for efficient string matching. 

### Inferred Types and Preferences

- **Read and Write**: 
  - **Preference**: Redirect
  - **Action**: Implicitly accessed by benign
  - **Code and Configuration**: Deny
  - **Explicitly Accessed Data**: Deny

**Figure 3: Untrusted Sandbox Policy on Writing Benign Files**

### 4.2 Benign Code Policy

Policies can also be inferred for benign programs, although some aspects are too complex to resolve entirely automatically.

#### Logical Isolation

The default policy for benign code is to prevent the consumption of untrusted inputs while returning a "permission denied" error code.

#### Untrusted Execution

Requiring users to explicitly invoke `uudo` has the benefit that users know in advance whether they can trust the outputs or not. However, it is inconvenient for users to make this decision all the time. Therefore, our system can automatically infer the use of `uudo`. The idea is as follows: if an execution will fail without `uudo` but may succeed with it, we automatically invoke `uudo`. Currently, this is implemented for simple cases where benign applications are invoked with untrusted input files. This technique works well when applications are launched by a file manager (e.g., double-clicking a file or using an "open with" dialog) and for simple commands that take a file name argument. Handling more general cases, such as pipelines, is a topic for future work.

#### Trust-Constrained Execution

There does not seem to be a practical way to automatically decide which applications are trustworthy. However, it is possible to identify where trust is inappropriate: given the critical role played by implicitly accessed files, it does not seem appropriate to trust applications to defend themselves from untrusted data in these files. The inference procedure described earlier is helpful for determining trust confinement policies.

### 5. Implementation and Evaluation

Our primary implementation was performed on Ubuntu 10.04. Fifteen assembly instructions were inserted around each system call invocation site in system libraries (libc and libpthread). This allows us to intercept all system calls. Our implementation then modifies the behavior of these system calls as needed to realize the sandboxes described in Sections 2 and 3. We also modified the loader to refuse loading untrusted libraries for benign processes.

When our system is installed, existing files are considered benign. We found no world-writable regular files, so no permission changes were needed for them. There were 26 world-writable devices, but we did not change their permissions because they do not behave like files. We also left permissions on sockets unchanged because some operating systems ignore their permissions. Instead, we perform checking within the `accept` system call. World-writable directories with sticky-bit set were left unmodified because operating systems enforce a policy that closely matches our requirements. Half of the 48 world-executable setuid programs were modified to group-executable by Gb. The rest were setgid programs and were protected using ACLs.

There are a few pivotal benign applications, such as web browsers, email readers, and word processors, that are exposed to a wide range of inputs. One way to use them safely is to run them as benign or untrusted processes based on the integrity of the input files. This works well for applications such as editors or document viewers. However, some applications need to simultaneously process messages from both benign and untrusted sources, e.g., browsers and file utilities. We have experimented with two approaches for such applications:
1. Expect the application to protect its integrity from certain untrusted inputs, thus allowing it to have unrestricted interactions on those specific interfaces.
2. Use separate instances of the application when interacting with untrusted or benign data.

We experimented with both choices for Firefox and Thunderbird. Many file utilities (mv, cp, tar, find, grep, and rm) represent mature programs, so we used option (a).

A key requirement for using option (a) is that applications need to label their outputs accordingly, instead of always labeling them as benign. For most file utilities, this is done by using appropriate flags. For Firefox and Thunderbird, we developed add-ons for this purpose.

Installation of untrusted software represents another key challenge, as administrative privileges are needed during installation, yet many components executed at install time are from untrusted sources. To address this challenge, we have developed an approach based on SSI [24] to secure this phase.

We also limited the privileges of untrusted X-clients with X-security extensions or nested X-servers to protect other benign clients.

### 5.1 Portability and Complexity

To further establish the simplicity and practicality of our approach, we ported our system to PCBSD (version 8.2), one of the best-known desktop versions of BSD. Similar to the implementation on Ubuntu, we modified the library by inserting assembly instructions at each system call invocation site.

**Figure 4: Number of System Calls Instrumented**

On i386 Linux, some calls are multiplexed using a single system call number (e.g., `socketcall`). We demultiplexed them so that the results are comparable to BSD. Most of the system calls require no instrumentation. A large number of system calls that require instrumentation are shared between the operating systems. Note that some calls, e.g., `open`, need to be instrumented in both sandboxes. A large portion of the PCBSD-specific system calls are never invoked, such as NFS, access control list, and mandatory access control related calls. Of the 59 (10 overlaps in both sandboxes) system calls that require instrumentation, 29 are in the benign sandbox. However, only 4 (`nmount`, `kldload`, `fexecve`, `eaccess`) out of the 29 calls are actually used in our system. Hence, we only handle these 4 calls. For the rest of the calls, we warn about the missing implementation if there is any invocation. The other 40 calls in the untrusted sandbox are for providing transparency. We found that implementing only a subset of them (`futimes`, `lchmod`, `lutimes`) is sufficient for the OS and applications like Firefox and OpenOffice to run. Note that incomplete implementation in the transparency library UL does not compromise security.

**Figure 5: Code Size for Different Components Supporting Ubuntu and PCBSD**

The overall size of the code is not very large. Moreover, a significant fraction of the code is targeted at application transparency. We estimate that the code truly relevant for security is less than half of what is shown, and hence the additions introduced to the TCB size are modest. At the same time, our system reduces the size of the TCB by a much larger amount, as many programs that needed to be trusted to be free of vulnerabilities no longer need to be trusted.

### 5.2 Preserving Functionality of Code

We performed compatibility testing with about 100 applications shown in Figure 6. Seventy of them were chosen randomly, and the rest were hand-picked to include some widely used applications.

#### 5.2.1 Benign Mode

First, we installed all 100 packages as benign software. As expected, all of them worked perfectly when given benign inputs. To use these applications with untrusted inputs, we first ran them with an explicit `uudo` command. In this mode, they all worked as expected. When used in this mode, most applications modified their preference files, and our approach for redirecting them worked as expected.

We then used these applications with untrusted inputs but without an explicit `uudo`. In this case, our `uudo` inference procedure was used, and it worked without a hitch when benign applications were started using a double-click or an "open-with" dialog on the file manager Nautilus. The inference procedure also worked well with simple command lines without pipelines and redirection. Further refinements to this procedure to handle pipelines and more complex commands are ongoing.

#### 5.2.2 Untrusted Mode

We then configured the software installer to install these applications as untrusted. Remarkably, all of the packages shown in Figure 6 worked without any problems or perceptible differences. We discuss our experience further for each category shown in Figure 6.

- **Document Readers**: All document readers behave the same when used to view benign files. Additionally, they can open untrusted files without any issues and can perform "save as" operations to create new files with an untrusted label.
- **Games**: By default, we connect untrusted applications as untrusted X-clients, which are restricted from accessing some advanced features of the X-server such as the OpenGL GLX extensions. As a result, only 8 out of 12 games worked correctly in this mode. However, all 12 applications worked correctly when we used a nested X-server (Xephyr).
- **Editors/Office/Document Processors**: These applications typically open files in read/write mode. Since our system does not permit untrusted processes to modify benign files, attempts to open benign files would be denied. Most applications handle this denial gracefully: they open the file in read-only mode, with an appropriate message to the user, or prompt the user to create a writable copy before editing it.
- **Internet Applications**: This category includes web browsers, email clients, instant messengers, file transfer tools, remote desktop clients, and information retrieval applications. All these applications worked well when run as untrusted processes. Files downloaded by applications are correctly labeled as untrusted. Any application opening these downloaded files will hence be run in untrusted mode, ensuring that they cannot damage system integrity.
- **Media Players**: These are music or video players. Their functions are similar to document readers, i.e., they open their input files in read-only mode. Hence, they do not experience any security violations.
- **Shell-like Applications**: This category includes shells or program interpreters that can be executed interactively like a shell. Once started in untrusted mode, all subsequent program executions will automatically be performed in untrusted mode.
- **Other Programs**: We tested a system resource monitor (wmmon), file manager (tkdesk), some personal assistant applications (jpilot, w2do, arbtt), Google Earth, and other specialized applications. While we are not confident that we have fully explored all the features of these applications, we observed the same behavior in our tests in both benign and untrusted modes. The only problem experienced was with the application `gpscorrelate-gui`, which did not handle permission denial (to write a benign file) gracefully and crashed.

### 5.3 Experience with Malicious Software

Here we illustrate scenarios involving stealthy attacks that are stopped by our system.

- **Real-World Malware**: Malware can enter systems during the installation of untrusted software or via data downloads. As secure installation is not our focus, we assumed that attacks during installation are prevented by systems like [24], and untrusted files are labeled properly. We tested our system with malware available on [1]. These malware were mainly rootkits: patched system utilities like `ps` and `ls`, kernel modules, and `LD_PRELOAD`-based libraries. Specific packages tested include: JynxKit, ark, BalaurRootkit, Dica, and Flea. All of them tried to overwrite benign (indeed, root-owned) files and were hence stopped.
- **KBeast (Kernel Beast)**: This requires tricking the root process to load a kernel module. The benign sandbox prevents root processes from loading the kernel module since the module is labeled as untrusted.
- **Real-World Exploit**: We tested an Adobe Flash Player exploit (CVE-2008-5499) which allows remote attackers to execute arbitrary code via a crafted SWF file. If the browser is simply trusted to be free of vulnerabilities, then this attack would obviously succeed. Our approach was based on treating the website as untrusted and opening it using an untrusted instance of the browser. In this case, the payload may execute, but its actions are contained by the untrusted sandbox. Specifically, it cannot damage system integrity.
- **Simulated Targeted Attacks**: We also simulated a targeted attack via compromising a document viewer. A user received a targeted attack email from an attacker, which contained a PDF that could compromise the viewer. When the user downloaded the file, the email client labeled the attachment as untrusted automatically since the sender could not be verified. Our system, however, did not prevent the user from using the document. The user could still save the file along with other files. When the file was opened, the document viewer got compromised. On an unprotected system, the attacker-controlled viewer could cause damage, but in our system, the damage was contained.