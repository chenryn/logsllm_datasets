在某些情况下，例如当我们构建实时视频和通用视频基础架构时，我们知道这将是一个典型的案例，因此我们从一开始就参与其中。不幸的是，我们不得不从其他团队中抽调有价值的成员来组建这个团队，而且这样的权衡往往需要大量沟通。
当我们进入服务的扩展阶段时，我们需要弄清楚团队应该首先处理哪些工作，有时很难确定。服务可能会遇到可靠性问题，容量，部署问题，或监视问题中的任何一种。  我们团队的生产工程师
Andrew Ryan
经常为我们提供组织设计方面的帮助，他根据  马斯洛的需求层次结构提出了一个"服务金字塔"。我在有关生产工程师的
SRECon 演讲中介绍了这种需求层次。后来我发现，Mickey Dickerson 在
O\'Reilly
会议上也介绍了类似的服务可靠性需求层次。很高兴看到其他一些团队也共享了有关工作方法的概念。
我们使用此服务层次结构来确定生产工程师首次与团队合作时的工作类型。金字塔的底层侧重于确保服务与标准
Facebook
工具很好地集成，以处理服务器的生命周期（预配、监视、替换、迁移、停用）和服务部署（新部署、集成测试、金丝雀等）。满足服务器和服务的基本需求后，可以将金字塔的层向上移动，以处理更高级别的组件，如性能调优和效率、灾难恢复、异常检测和故障建模。
只有这样，你才能有效地在金字塔的顶端做"奥妙的工作"。这些事情可能不会在较小规模上发生，但由于数据的涌入和后端系统完成的工作量，在我们的环境中会发生。每个
PE 和 SWE
都有义务调查这些奇怪的问题，但如果服务的基本需求得不到满足，他们可能会发现自己只能动手修复本应自动处理的问题，而不是真正的可伸缩性问题。
**大卫：** 你所说的发展阶段是什么意思？
**佩德罗：**我看到团队和服务按此顺序经历三个阶段：
引导阶段
:   执行任何所需的操作，使服务启动和运行。这可能意味着大量的故障修复和人工干预来解决问题。这可能意味着快速、迭代的部署会快速失败。这可能意味着一开始只允许最少的流量。在这个阶段可以建立相关运维的肌肉，并找出什么是失败模式，发现它如何影响其他系统。
缩放阶段
:   一旦你离开了引导阶段，就开始进入规模阶段。这可能包括将服务部署到多个区域，根据服务类型让数百万或数十亿人使用服务。团队在能够运维服务及其功能集、了解对其他系统的依赖关系，以及可能需要最终面对的体系结构变更方面变得更加成熟。
*卓越阶段*
:   现在，服务需要变得真的非常卓越。完成优化服务所需的最后 10% 到 20%
    的工作，以便更高效、更卓越。我称之为"追求卓越"，因为当我试图要求人们优化某些东西时，没有人真正想要这样做。但是每个人都想做出一些令人惊叹的东西，所以我称之为卓越阶段。
每个阶段所需的人员可能不同。软件和生产工程团队中都有一组人非常喜欢从事引导工作。也有人真正喜欢中间阶段的工作。引导完成后，他们希望扩展服务：使其更好、更具弹性和更大；承担更多的用户；并处理一致性和并发问题，以及更高成熟度相关的大型灾难恢复问题。甚至还有其他人想要做出一些性能好、效率高、坚如磐石的东西。有些人会随着时间推移而发展，并随着每个阶段的成长而成长，但我的经验是，大多数人不会通过这三个阶段留在服务中。他们会找到自己的最佳位置，他们会在组织中四处走动，找到发挥自己优势的工作。最终，我们希望每个人都做着卓越的工作，但现实是，并不是每个人都这样做，这是自然的。
**大卫：**  鉴于这些阶段和人们相应的倾向，你如何创建团队？
**佩德罗：**我见过一种倾向，即试图拉伸人才的普适性：做每一件事，并成为一个千斤顶，可以在各个层次工作，从低级硬件问题，到中层协议问题，到
UI
编程。此模型在许多新兴小团队中很有用，并且是必需的，但在大规模下不能很好地工作。一个人不可能做那么多工作，并使自己能够随着时间的推移而持续，且不会陷入精疲力竭，所以我们更专注于将个人与技术相匹配。例如，在缓存团队中，需要了解有关网络协议和调试的知识，但了解整个系统的工作原理是最终目标。
当我们启动一个新的团队时，我们会寻找四个因素并提出以下问题：
-   在未来18至24个月内，是否有足够的工作供至少三人工作？我想出了三个，因为这个数字，对我来说，真正定义了一个团队。如果只有两个人，一个人生病或想休假，那么另一个人必须承担整个工作量。有了第三人时，至少可以对项目进行配对、定义共同责任等。这是简单的团队模型。
-   该服务是否适合我们的优先级模型？我们需要了解服务如何解决业务需求，它将是真正实用的东西，而不仅仅是一个可能永远不会看到生产规模的原型。现在是确定这个团队优先于另一个团队的合适时机吗？这一个是棘手的问题，因为它更主观。
-   我们是否有经理可以与生产工程师合作，并建立一个更大的团队？经理是一个关键组成部分，确保工程师集中注意力，完成事情。重要的是，每个人都在不断成长和成长。我们需要确保团队为他们的工作获得适当的背景信息，并确保他们从其他人中学习。
-   是否有本地 SWE
    团队来使用此服务？这主要是在我们不是构建软件的人的情况下。我们需要确保有一个
    SWE 团队可以进行肩并肩的调试和面对面讨论有关体系结构和问题。
这四个考量必须一起考虑。这过滤掉了一批新生的项目，这些项目可能会占用有价值的人。尽管在每种类型的团队中都有生产工程师是不错的，但根据我们的优先级模型，这没有意义。
为了从生产工程团队引入一个新的职位，上述四个要素需要存在，我们后来又补充了另一个约束。我们需要确保新职位有能力维持三个不同的团队，且至少有三人，为期
18 到 24 个月，在当地与 SWE 合作。这意味着我们建立 PE 团队到网站成熟。
**大卫：**确实如此，但是那些小事情呢？必须做，但又不会花这么长时间的事情？有全能团队吗？
**佩德罗：**不，没有一个全能的团队做那种工作。一般来说，软件工程团队有责任管理他们的技术和操作债务。他们尽可能长时间地这样做，但最终如果他们的服务需要优先排序，并且建立一个团队是有意义的，那么我们就这样做。通常，对某些工作有亲和力的
PE 可能会看到其他团队中没有 PE
带来的问题，并花费几周的时间来改进它，然后回到原来的团队。我们认为这是有价值的，因此只要可以负担，我们就会鼓励这么做，因为它可以帮助
SWE 团队获得一些快速的运维效率和知识。
在基础设施中，我们通常专注于使诸如引导之类的操作消失。我们已经建立了许多服务，为工程师提供"更多的免费便利"。他们可以使用我们的容器化服务进行部署。他们将免费获得服务器常规健康监控。我们有一个集中式监控系统，具有内置的图形、异常检测和警报功能。所有服务可以通过
FBAR（最初由 SRO 构建，然后由 PE
显著增强）等机制免费获得基本修复。所有基础都为你部署好了，因此你可以更专注于更高级别的软件问题。这使得我们的软件工程师能够先进行快速原型设计，并首先处理小事情，并找出是否有值得进行构建的东西，而不必须专注于小东西。这种"更多的免费便利"让你很容易通过之前讨论的引导阶段，不需要太多的初始帮助，因为它都是自助服务。
**大卫：**我们讨论了 PE 如何参与团队和产品或服务。PE 如何离开团队？
**佩德罗：**移动性实际上是我们的核心宗旨。
我们喜欢聘请通才。除了核心的实用和算法编程技能外，我们还寻找其他特征。我们期望我们雇佣或培训的
PE
了解网络协议以及如何调试它们。他们需要具备较低级别的系统知识，并了解软件如何与内核、硬件和网络层交互。如果他们在事业上走得更远，他们需要了解如何构建分布式系统。这些是我们在雇用
PE
时寻求的一般技能。当他们加入一个团队时，他们可能不是每个领域的专家，但随着时间的推移，他们将获得这些知识和经验，他们将成为更强大的工程师。这些知识使他们能够在
PE 中更轻松地转移到其他团队。
他们还将学习如何使用 Facebook 构建的工具和服务。其中许多模仿 Facebook
以外的服务，如容器化的服务。如果服务使用我们的内部容器化系统（无论是缓存、消息、广告或新闻源，还是任何其他内容），它仍然是相同的容器化服务。他们所处理的系统的内部工作以及出现的问题（例如，并发性、一致性、灾难恢复）会因服务而异。这就是
PE
在加入团队时需要学习的内容，但在我们的环境中管理系统的一般技能，以及如何使用我们构建的工具是可移植的。PE
可以获取所有这些知识，并迁移到 Facebook 的任何团队，只要它们与 SWE
团队构建该服务共存。以这种方式进行协作比让运维团队和软件工程团队位于不同区域甚至不同时区要容易得多。
因此，为了回答原始问题，我们通过经理在 18 到 24 个月后询问 PE
在团队中的时间，问他们是否考虑过转会到另一个团队。一般来说，这个问题的答案是，"不，我喜欢我正在做的工作。我构建的服务还有待完善。我喜欢我的团队和工作。走开，以后再找我。"这并不坏，因为引入了可以转移的念头，让他们知道，可以考虑在某个时候移动，我们重视移动性。