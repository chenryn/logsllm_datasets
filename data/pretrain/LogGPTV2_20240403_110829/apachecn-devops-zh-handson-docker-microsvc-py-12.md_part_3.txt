# 定期维护
这种维护以软件服务固有的任务形式出现。通过运行依赖于其他组件的服务，例如底层操作系统或 Python 解释器，我们需要保持它们的最新状态，并将它们升级到新版本。
In the context of using containers and Kubernetes, there are two systems that act as operating systems that we need to take into account. One is the OS from the containers; here, we used Alpine. The other is the OS that handles the Kubernetes nodes, in which AWS EKS is handled automatically, but needs to be upgraded to the Kubernetes version.
保持依赖关系最新的主要原因如下，按其重要性排序:
*   新版本修复了安全问题。
*   总体性能提升。
*   可以添加支持新功能的新功能。
如果我们做好计划，这些任务是可以减轻的。例如，使用标有**长期支持** ( **LTS** )的操作系统版本可以减少系统更新时的问题。
An LTS version of an OS is a version that receives support and critical updates during a long cycle. For example, a regular Ubuntu version is released every 6 months and receives updates (including critical security updates) for 9 months. LTS versions are released every 2 years and receive support for 5 years.
When running services, it is recommended to use LTS versions in order to minimize required maintenance work.
所有这些包和依赖项都需要更新，以确保操作系统运行良好。另一种选择是打开安全漏洞，或者留下一个过时的系统。
更新依赖项可能需要我们修改代码，这取决于部分代码是被弃用还是被删除。在某些情况下，这可能成本很高。在撰写本文时，最著名的迁移是 Python 社区从 Python 2 升级到 Python 3，这是一项耗时多年的任务。
大多数升级通常都很常规，只需要很少的工作。尝试制定一个合理的升级计划，并制定坚实的指导方针；例如，当新的操作系统 LTS 版本发布时*和*等规则，所有系统应在接下来的 3 个月内迁移*。这产生了可预测性，并给每个人一个明确的目标，可以跟进和执行。*
*Continuous integration tools can help in this process. For example, GitHub automatically detects dependencies in files such as `requirements.txt` and notifies us when a vulnerability is detected. It's even possible to automatically generate pull requests when updating modules. Check out the documentation for more information: [https://help.github.com/en/github/managing-security-vulnerabilities/configuring-automated-security-fixes](https://help.github.com/en/github/managing-security-vulnerabilities/configuring-automated-security-fixes).
升级依赖项可能是最常见的常规维护任务，但也有其他可能性:
*   清理或归档旧数据。这些操作通常可以自动化，节省了大量时间并减少了问题。
*   修复依赖于业务流程的操作，如生成月度报告等。在可能的情况下，这些应该是自动化的，或者工具应该被设计成使得用户可以自动生产它们，而不是依赖于技术人员进行定制操作。
*   修复由 bug 或其他错误引起的永久性问题。bug 有时会让系统处于糟糕的状态；例如，数据库中可能有损坏的条目。当 bug 被修复时，我们可能需要通过解除进程或用户的阻塞来解决这个问题。
这些过程可能很烦人，尤其是如果它们是重复的，但通常被很好地理解。
处理技术债务的另一种维护形式更为复杂，因为它的引入更为缓慢，也更难明确检测。正确解决技术债务是最具挑战性的维护任务，但在我们做任何事情之前，我们需要了解它。
# 理解技术债务
技术债务是软件开发中使用的一个概念，用来描述未来在实现非最优解决方案时将增加的额外成本。换句话说，选择快速或简单的选择意味着以后的功能需要更长的时间，并且更难开发。
As a metaphor, technical debt has been around since the early 90s, but the concept has been described before then.
Like any metaphor, it is useful, but it has limits. In particular, non-technical people tend to associate it with financial debt, even though they have different implications. For example, most technical debt is created without us even noticing it. Make sure that you don't take the metaphor too far.
技术债务在一定程度上是不可避免的。在实现一个特性之前，没有无限的时间去研究所有的可能性，在做出任何决定的时候也没有完美的信息。这也是任何复杂系统中熵增长的结果。
除了不可避免之外，这也可以是一个深思熟虑的选择。发展受到时间的限制，所以一个不完美的市场快速解决方案可能比错过最后期限更可取。
技术债务的另一个标志是专注于某些知识。无论如何，随着时间的推移，技术债务不断堆积，这给新功能带来了摩擦。复杂性的增加也会造成可靠性问题，因为 bug 将越来越难以理解和修复。
Simplicity is the best friend of reliable systems. Simple code is easy to understand and correct and makes bugs either obvious or quick to detect. The microservice architecture aims to reduce the inherent complexity of a monolith by creating independent services that are smaller and have clear responsibilities assigned to them and that create explicit interfaces across them.
技术债务可能增长到需要大架构的程度。我们已经看到了如何从一个整体转变为一个微服务架构可能是这些时刻之一。
An architectural migration such as this is a big effort and will require time to deliver. New microservices that are reproducing the features that already exist in the monolith may conflict with new features being introduced.
This creates a moving target effect that can be very disruptive. Ensure that you identify these conflicting points and try to minimize them in your migration plan. Some new features may be able to be delayed until the new microservice is ready, for example.
然而，我们需要能够更早地解决技术债务，而不是等到技术债务大到只有彻底的变革才能解决它。
# 持续解决技术债务
降低技术债务需要一个持续的过程，并将其引入到日常运营中。专注于持续改进的敏捷技术试图引入这种心态。
检测技术债务通常来自开发团队内部，因为他们更接近代码。团队应该考虑哪里的操作可以更顺畅，并预留时间来执行这些改进。
A great source of information that allows us to detect technical debt is metrics, such as the ones we set up in [Chapter 10](10.html), *Monitoring Logs and Metrics*.
忽视解决这些问题的风险是，当已经存在的特性慢慢变得越来越慢、越来越不可靠时，就会陷入软件腐烂。随着时间的推移，它们对客户和外部合作伙伴来说会越来越明显。在此之前，在这种环境中工作会让开发人员的生活变得困难，并且有倦怠的风险。新开发中的延迟也很常见，因为代码本来就很难处理。
为了避免陷入这种情况，需要分配时间，以持续的方式减少技术债务，并插入新功能和其他工作。应该在维护和技术债务减免与新功能之间找到平衡。
A lot of the techniques we've talked about in this book help us improve the system in a continuous fashion, from the continuous integration techniques we described in [Chapter 4](04.html), *Creating a Pipeline and Workflow*, to the code reviews and approvals that we described in [Chapter 8](08.html), *Using GitOps Principles*.  
分发可能高度依赖于系统的当前形状，但是它是显式的和强制的，这确实很有帮助。在技术债务削减上花费特定的时间百分比可能会有所帮助。
降低技术债务代价高昂且困难重重，因此尽可能少地引入技术是有意义的。
# 避免技术债务
处理技术债务的最好方法是一开始就不引入技术债务。然而，这说起来容易做起来难。有多种因素会影响导致技术债务的决策质量。
最常见的原因如下:
*   **缺乏给出方向的战略、高层计划**:这产生了不一致的结果，因为每次发现相同的问题，都会以不同的方式解决。我们讨论了跨团队的协调如何需要解决整个组织的标准，并确保它们得到遵守。让某人作为一个软件架构师，寻找在所有方面创建一致的指导方针，应该会极大地改善这种情况。
*   **没有适当的知识去选择正确的选项**:这是很常见的。有时，由于沟通不畅或缺乏经验，需要做出决定的人没有所有相关的信息。这个问题是典型的结构缺乏经验的问题。确保你有一个训练有素的团队，并创造一种文化，让更有经验的成员帮助和指导初级成员将减少这些情况。记录以前的决策并简化如何使用其他微服务的文档将帮助我们协调团队，以便他们拥有难题的所有相关部分。这有助于他们避免因不正确的假设而犯错误。另一个重要的因素是确保团队对他们使用的工具进行适当的培训，以便他们充分意识到自己的能力。外部工具应该如此，例如熟练使用 Python 或 SQL，以及任何需要培训材料、文档和指定联系人的内部工具。
*   **没有花足够的时间去调查不同的选择或计划**:这个问题是压力和快速进步的需要造成的。这可能会在组织文化中根深蒂固，当组织发展时，减缓决策可能是一项具有挑战性的任务，因为较小的组织往往需要更快的流程。记录决策过程并要求其经过同行评审或批准有助于减缓这一过程，并确保工作彻底。重要的是要在哪些决定需要更多审查和哪些不需要审查之间找到平衡。例如，在一个微服务中非常合适的所有东西都可以在团队内部进行审查，但是需要多个微服务和团队的特性应该在外部进行审查和批准。在这种情况下，在收集信息和做出决策之间找到适当的平衡非常重要。记录决策和输入，这样你就能理解把它们带到那里的过程，并改进你的过程。
避免这些问题的最好方法是反思以前的错误，从错误中学习。
# 设计更广泛的发布流程
虽然独立部署每个微服务的能力确实是系统的关键要素，但这并不意味着不需要协调。
首先，仍然有一些功能需要部署在多个微服务中。我们已经研究了如何在开发过程中工作，包括诸如处理版本控制和明确检查依赖关系等细节。那现在怎么办？
在这些情况下，需要团队之间的协调，以确保依赖关系得到实现，并且以适当的顺序执行不同的部署。