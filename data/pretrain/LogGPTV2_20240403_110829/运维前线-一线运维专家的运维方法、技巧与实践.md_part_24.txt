1.问题描述
（1）确认/var/log/messages 内容中不再出现 table full 的报错信息。
我们在禁用了连接追踪之后，可以使用如下的两个方法来验证禁用的效果：
sysctl net.netfilter.nf_conntrack_max
如果是在NAT服务器上，则需要执行以下的命令来检查效果：
（2）检查 lsmod Igrep nf _conntrack 的输出，确认没有任何输出即可。
为Buckets 设置一个合理的值（一般为预计的连接追踪表上限的1/4），使得连接追踪表
sysctl net.netfilter.nf_conntrack_count
Buckets和连接追踪表的关系如图5-4所示。
在本案例中，我们使用options nf_conntrack hashsize=131072 自主指定了Buckets 的大小。
在系统内存大于等于4GB时，nf_conntrack_buckets=65536
系统nf_conntrack_buckets 的值，在未指定时，可根据以下公式计算得出：
nf_conntrack_max =nf_conntrack_buckets *4
系统nf_conntrack_max的值，在未指定时，可根据以下公式计算得出：
图 5-4Buckets 和连接追踪表的关系
ConntrackTable(HashTable)
Node.1
Bucket.1
Node.n
#确认该值能够突破出现问题时的最大追踪数
#确认该值是我们修改后的结果
第5章深度实践iptables117
---
## Page 134
据帧相匹配。
这个ICMP的数据帧的TCP序列号。③、4、5、O、7正好与图5-7中的编号为20的数
层信息），O和7是引起这个ICMP的数据帧的源端口和目的端口（TCP层信息），O是引起
送方）应该使用的MTU（1400字节），④和6是引起这个ICMP的数据帧的源IP和目的IP(IP
网卡支持TSO，进行自动分片传输到网络上）后，在编号为21的数据帧中，被路由器
（如图5-7中的1所示的数据帧）。
仍然可以传输大文件，但超过10分钟后，上面的问题又会重现。
iptables后，则可以传输大文件。更奇怪的事还在后面，再次启用iptables，大约在10分钟内
小左右的文件，稍大一点的文件，比如2KB以上的文件，在传输中就被卡住了。当停止
(架构如图5-6所示）。
电信通转发，使电信和联通之间的互访变得更快速），为了安全和快速，文件传输改走大内网
的（架构如图5-5所示）。
118
在抓包中（文件：ICMP_Fragmentation_Needed.pcap），我们看到了有ICMP的报错信息
后来建成了大内网（使用GREVPN技术在Internet上组建的私有网络，目前通过北京
图5-8中，0是ICMP类型，②是该类型ICMP的错误代码，③是通知10.10.60.69（发
ICMP信息的具体内容如图5-8所示。
编号为20的数据帧，是服务器10.10.60.69向网卡提交了长度为2974的数据帧（该
在启动iptables之后，我们进行抓包。
2.排查过程
结果碰到了奇怪的问题：使用 scp 或wget 通过大内网传输文件时，只能传输1KB大
8.887343
887350
887245
88
图5-5通过公网传输正常
运维前线：一线运维专家的运维方法、技巧与实践
8
310.10.251.2
通过公网传输文件√
10.2.3.27
ntemet
10.10.60.69
10.10.60.69
图5-7
TCP
ICMP报错信息
1514
68747
0
42711
ati
图5-6通过大内网传输失败
通过大内网传输文件×
ission]
ionl
Seq=
42711
6386302
54818307
---
## Page 135
图5-9所示），我们称该值为MTU。
那么剩下承载上层协议的Data域（IP头+TCP头+应用数据）最大就只能有1500字节（如
大不能超过1518字节，刨去以太网帧的帧头（源MAC+目标MAC+Type+CRC）18字节，
过的最大数据包大小（以字节为单位）。由于以太网传输电气方面的限制，每个以太网帧最
5.2.2MTU发现的原理
MSS一般为1460字节。TCP协议在建立连接的时候双方将会协商本次通信使用的MSS值。
据分段。这个值等于MTU减去IP数据包包头的20字节和TCP数据段包头的20字节，所以
去封装另一种网络协议的方法，它是一种应用非常广泛的第三层VPN隧道协议。
为允许：
MSS：最大分段尺寸（Maximum Segment Size），是TCP数据包每次能够传输的最大数
8000207A3F3E
GRE：通用路由封装协议（GenericRoutingEncapsulation），规定了如何用一种网络协议
MTU（MaximumTransmissionUnit，最大传输单元）是指一种通信协议的某一层所能通
以下是一些与MTU密切相关的概念。
通过以上的分析，我们认识到有一类ICMP专门用于通知MTU信息，那么什么是MTU呢？
iptables
而这个ICMP 的信息，正好被iptables 给过滤了。因为我们只开放了ICMP 的以下类型
iptables
-AINPUT-p
-A
INPUT
MAC Heeder
800020203AAE
d-
1400
icmp --icmp-type echo-request-j AccEPT
icmp --icmp-type echo-reply -j ACcEPT
图5-9以太网数据帧封装结构图
图5-8ICMP信息内容
一
EtherType
0800
42711
第5章深度实践iptables119
(46-1500 bytes)
IP,ARP,etc.
Payload
Data
0020203A
(4bytes)
---
## Page 136
中沿用这个MTU大小。PMTUD的工作流程如图5-11所示。
ICMP差错控制报文，它就可以调整使用正确的MTU重新传送这个报文，并在以后的传输
要进行分片但设置了不分片位），其中填有下一跳正确的MTU。如果发送端主机接收到这个
路由器就会丢弃这个报文，并返回一个ICMP不可达的差错报文（类型为3、代码为4：需
进行分片。如果一个待转发的IP数据报被设置成DF比特，而其长度又超过了MTU，那么
分片位（Don'tFragment，DF）”，来确定当前路径的路由器是否需要对正在发送的IP数据报
可以使用如下的命令检查该老化时间：
我们可以通过配置PMTU的老化时间来更改PMTU项在缓存中的时间。在Linux中，我们
机路径中的最小MTU被称作路径MTU(PMTU)。默认情况下，PMTU的老化时间是10分钟。
之间的通信要经过多个网络，而每个不同的网络在IP层可能会有不同的MTU。两台通信主
120
PMTUD：路径最大传输单元发现（Path MTU Discovery）。通过在IP 首部中设置“不要
sysctl net.ipv4.route.mtu_expires
PMTU：路径最大传输单元（Path Maximum TransmissionUnit）。在因特网上，两台主机
通过图5-10，我们可以看到以太网中MTU与MSS、以太网数据帧大小的关系。
运维前线：一线运维专家的运维方法、技巧与实践
ICMP error:packet too big;useMTU=1350
以太网首部
14
MTU=1500
PacketwithMTU=1500
图5-10MTU与MSS、以太网数据帧关系图
IP首部
20
图5-11PMTUD工作流程
MTU=1500
Packet withMTU=1350
Packet received
以太网帧MAX：1518
TCP首部
20
MTU:1500
MTU=1350
MSS:1460
数据
MTU=1400
以太网尾部
（单位：Byte）
4
Destination
Server2
---
## Page 137
5.3.1源地址NAT
中。网络地址转换分为源地址转换（源地址NAT）和目的地址转换（目的地址NAT)。
5.3网络地址转换在实践中的案例
而引发网络传输的问题。因此，在实践中，我们建议不要完全禁止 iptables，至少应该打开以
5.2.3解决问题的方法
节的MTU重新发包。
出MTU为1500字节的报文时，就会被路由器返回ICMP的报错，并通知服务器以1400字
在VPN路由器上，网络管理员将MTU手动减少到1400字节。因此，服务器10.10.60.69发
MTU为1500字节，减去GRE封装的24字节，因此VPN网关的MTU应该是1476字节了。
增加了GRE报文头（4字节）+外层IP报文头（20字节），总共24字节。而以太网默认的
下的访问权限：
在实践中，iptables 除了可用于网络安全之外，还经常用于网络地址转换（NAT）的环境
在这个案例中，我们可以看到，如果简单地禁止iptables会导致MTU协商不成功，从
在iptables 中，增加以下的条目：
表5-1是常见网络环境下的一些MTU值。
iptables -A INPUT -p icmp--icmp-type fragmentation-needed -j ACCEPT
公司的大内网使用了GREVPN技术。GRE隧道需要对IP包进行再封装，这样就额外
源地址NAT，
iptables-
为什么图5-8中的3提示下一跳的MTU是1400呢？
iptables
iptables
MTU值（单位：Byte）
1500
576
1430
1468
1472
1476
1492
-A INPUT
，主要用于如图5-12所示的网络示意图中无外网IP的服务器（ServerB）需
-picmp
表5-1常见网络环境下的MTU值
--icmp-type
--icmp-type
fragmentation-needed -j ACCEPT
拨号连接到ISP的标准值
VPN和PPTP的最佳值
DHCP的最佳值
使用ping的最大值
GREVPN的最大值
PPPoE的最佳值
以太网信息包最大值，也是默认值
第5章深度实践iptables121
描述
---
## Page 138
设置：
据库（监听端口是TCP1521）时，我们可以使用如下的命令在ServerA上进行目的地址NAT
器（Server B）提供的服务。例如，外部用户希望通过互联网访问到 Server B上的Oracle数
5.3.2
ServerA将改写网络层数据包为源地址IP8.8.8.8，目的地址IP10.128.70.111。
地址 IPx.y.z.173。该转换条目被记录在/proc/net/nf_conntrack中。
10.128.70.111。
将是Server A的外网 IP。
Server A访问互联网。此时，在互联网上看到的源地址
方法是执行以下的命令：
地址)。
要访问互联网的场景。
122
（3）8.8.8.8的响应（源地址IP 8.8.8.8，目的地址IPx.y.z.173）到达 Server A之后，
（2）在ServerA上经过源地址NAT后的网络层数据包格式为：目的地址IP8.8.8.8，
Q（2）在服务器ServerA上，启用路由功能。启用的
目的地址 NAT 用于如图 5-12 所示的网络示意图中，外部用户直接访问无外网 IP 的服务
这就是源地址NAT 的工作过程。
（1）在ServerB上，网络层数据包的格式为：目的地址IP8.8.8.8，源地址IP
（1）在服务器ServerB上，指定其网络的默认网关是10.128.70.112（即Server A的内网
在图5-12中，ServerB 没有外网 IP，若其需要访问互联网，则需要进行如下的设置。
当于是和 Server A进行通信
SNAT
iptables-tnat
以 ServerB访问8.8.8.8的DNS服务为例，其数据流程如下。
经过以上3个步骤的设置之后，
x.y.z.173是ServerA的外网IP
SNAT--to x.y.z.173#eth0是Server A的外网网卡，
（3）在Server A上，设置 iptables 规则如下；
--to-destination10.128.70.111:1521#改写目的地址为10.128.70.111，目的端口为1521
iptables-tnat-APOsTROUTING-oeth0
iptables -t filter -A FORWARD -j ACCEPT
sysctl-w net.ipv4.ip_forward=1
目的地址NAT
运维前线：一线运维专家的运维方法、技巧与实践
-to-source10.128.70.112#改写源地址IP为ServerA的内网IP，此时与Server B
，ServerB将会通过
-
图5-12
网络地址转换的网络示意图
ServerB
etho:x.y.z.173
eth1:10.128.70.111/24
eth1:10.128.70.112/24
Interet
--dport1521
源
---
## Page 139
回调函数的处理。
调函数（callbackfunction）提供了支持。数据包在协议栈中将依次经过这些处于不同位置的
netilter是Linux内核中的一系列钩子（hook），它为内核模块在网络栈中的不同位置注册回
网络地址转换功能。在Linux中，为iptables 提供这些功能的底层模块是netfilter框架。
5.4
目的地址转换这两种方案。
下面我们以图5-13讲解netfilter钩子与iptables各种表和链的处理顺序：
通过以上几节的实践我们知道，iptables 为系统工程师提供了强大的包过滤功能和NAT
网络地址转换是运维人员在工作中经常会用到的技术，我们需要非常熟悉源地址转换和
深人理解iptables的各种表和各种链
图5-13netfiter 钩子与 iptables 各种表和链的处理顺序图
conntrack
图例
NF_IP_FORWARD3
NF_IP_LOCAL_IN
RREROUTING
POSTROUTING
OSTROUTING