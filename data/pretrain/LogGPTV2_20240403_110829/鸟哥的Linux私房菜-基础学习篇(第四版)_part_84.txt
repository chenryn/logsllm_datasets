+ 光标移动到非空白字符的下一列
- 光标移动到非空白字符的上一列
那个 n 表示“数字”，例如 20 。按下数字后再按空白键，光标会向右移动这一列的 n 个字符。例如
n
20 则光标会向后面移动 20 个字符距离。
0 或功能键[Home] 这是数字“ 0 ”：移动到这一列的最前面字符处 （常用）
$ 或功能键[End] 移动到这一列的最后面字符处（常用）
H 光标移动到这个屏幕的最上方那一列的第一个字符
M 光标移动到这个屏幕的中央那一列的第一个字符
L 光标移动到这个屏幕的最下方那一列的第一个字符
G 移动到这个文件的最后一列（常用）
nG n 为数字。移动到这个文件的第 n 列。例如 20G 则会移动到这个文件的第 20 列（可配合 :set nu）
gg 移动到这个文件的第一列，相当于 1G 啊！ （常用）
n n 为数字。光标向下移动 n 列（常用）
搜寻与取代
向光标之下寻找一个名称为 word 的字串。例如要在文件内搜寻 vbird 这个字串，就输入 /vbird 即可！
/word
（常用）
?word 向光标之上寻找一个字串名称为 word 的字串。
这个 n 是英文按键。代表“重复前一个搜寻的动作”。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻
n vbird 这个字串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字串。如果是执行 ?vbird 的话，
那么按下 n 则会向上继续搜寻名称为 vbird 的字串！
这个 N 是英文按键。与 n 刚好相反，为“反向”进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表
N
示“向上”搜寻 vbird 。
使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键字！
n1 与 n2 为数字。在第 n1 与 n2 列之间寻找 word1 这个字串，并将该字串取代为 word2 ！举例来说，在
:n1,n2s/word1/word2/g 100 到 200 列之间搜寻 vbird 并取代为 VBIRD 则：
“:100,200s/vbird/VBIRD/g”。（常用）
:1,$s/word1/word2/g 从第一列到最后一列寻找 word1 字串，并将该字串取代为 word2 ！（常用）
从第一列到最后一列寻找 word1 字串，并将该字串取代为 word2 ！且在取代前显示提示字符给使用者确认
:1,$s/word1/word2/gc
（confirm） 是否需要取代！（常用）
删除、复制与贴上
在一列字当中，x 为向后删除一个字符 （相当于 [del] 按键）， X 为向前删除一个字符（相当于
x, X
[backspace] 亦即是倒退键） （常用）
nx n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， “10x”。
dd 删除光标所在的那一整列（常用）
ndd n 为数字。删除光标所在的向下 n 列，例如 20dd 则是删除 20 列 （常用）
d1G 删除光标所在到第一列的所有数据
dG 删除光标所在到最后一列的所有数据
d$ 删除光标所在处，到该列的最后一个字符
d0 那个是数字的 0 ，删除光标所在处，到该列的最前面一个字符
yy 复制光标所在的那一列（常用）
nyy n 为数字。复制光标所在的向下 n 列，例如 20yy 则是复制 20 列（常用）
y1G 复制光标所在列到第一列的所有数据
yG 复制光标所在列到最后一列的所有数据
y0 复制光标所在的那个字符到该列行首的所有数据
y$ 复制光标所在的那个字符到该列行尾的所有数据
p 为将已复制的数据在光标下一列贴上，P 则为贴在光标上一列！ 举例来说，我目前光标在第 20 列，且已
p, P 经复制了 10 列数据。则按下 p 后， 那 10 列数据会贴在原本的 20 列之后，亦即由 21 列开始贴。但如
果是按下 P 呢？ 那么原本的第 20 列会被推到变成 30 列。 （常用）
J 将光标所在列与下一列的数据结合成同一列
c 重复删除多个数据，例如向下删除 10 列，[ 10cj ]
u 复原前一个动作。（常用）
[Ctrl]+r 重做上一个动作。（常用）
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！
不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下
.
小数点“.”就好了！ （常用）
第第二二部部份份：：一一般般指指令令模模式式切切换换到到编编辑辑模模式式的的可可用用的的按按钮钮说说明明
进入插入或取代的编辑模式
进入插入模式（Insert mode）：
i, I
i 为“从目前光标所在处插入”， I 为“在目前所在列的第一个非空白字符处开始插入”。 （常用）
进入插入模式（Insert mode）：
a, A
a 为“从目前光标所在的下一个字符处开始插入”， A 为“从光标所在列的最后一个字符处开始插入”。（常用）
进入插入模式（Insert mode）：
o, O 这是英文字母 o 的大小写。o 为“在目前光标所在的下一列处插入新的一列”； O 为在目前光标所在处的上一列插
入新的一列！（常用）
进入取代模式（Replace mode）：
r, R
r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；（常用）
上面这些按键中，在 vi 画面的左下角处会出现“--INSERT--”或“--REPLACE--”的字样。 由名称就知道该动作了吧！！特别注意的
是，我们上面也提过了，你想要在文件里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！
[Esc] 退出编辑模式，回到一般指令模式中（常用）
第第三三部部份份：：一一般般指指令令模模式式切切换换到到指指令令列列模模式式的的可可用用按按钮钮说说明明
指令列模式的储存、离开等指令
:w 将编辑的数据写入硬盘文件中（常用）
:w! 若文件属性为“只读”时，强制写入该文件。不过，到底能不能写入， 还是跟你对该文件的文件权限有关啊！
:q 离开 vi （常用）
:q! 若曾修改过文件，又不想储存，使用 ! 为强制离开不储存盘案。
注意一下啊，那个惊叹号 （!） 在 vi 当中，常常具有“强制”的意思～
:wq 储存后离开，若为 :wq! 则为强制储存后离开 （常用）
ZZ 这是大写的 Z 喔！若文件没有更动，则不储存离开，若文件已经被更动过，则储存后离开！
:w [filename] 将编辑的数据储存成另一个文件（类似另存新文件）
:r [filename] 在编辑的数据中，读入另一个文件的数据。亦即将 “filename” 这个文件内容加到光标所在列后面
:n1,n2 w [filename] 将 n1 到 n2 的内容储存成 filename 这个文件。
暂时离开 vi 到指令列模式下执行 command 的显示结果！例如
:! command
“:! ls /home”即可在 vi 当中察看 /home 下面以 ls 输出的文件信息！
vim 环境的变更
:set nu 显示行号，设置之后，会在每一列的字首显示该列的行号
:set nonu 与 set nu 相反，为取消行号！
特别注意，在 vi 中，“数字”是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。举例来说，
要删除 50 列，则是用 “50dd” 对吧！ 数字加在动作之前～那我要向下移动 20 列呢？那就是“20j”或者是“20↓”即可。
OK！会这些指令就已经很厉害了，因为常用到的指令也只有不到一半！通常 vi 的指令除了上面鸟哥注明的常用的几个外，其他是不用
背的，你可以做一张简单的指令表在你的屏幕墙上， 一有疑问可以马上的查询呦！这也是当初鸟哥使用 vim 的方法啦！
来来来！赶紧测试一下你是否已经熟悉 vi 这个指令呢？请依照下面的需求进行指令动作。 （下面的操作为使用 CentOS 7.1 中的
man_db.conf 来做练习的，该文件你可以在这里下载： http://linux.vbird.org/linux_basic/0310vi/man_db.conf。） 看看你的显示结果与鸟哥的结
果是否相同啊？
1. 请在 /tmp 这个目录下创建一个名为 vitest 的目录；
2. 进入 vitest 这个目录当中；
3. 将 /etc/man_db.conf 复制到本目录下面（或由上述的链接下载 man_db.conf 文件）；
4. 使用 vi 打开本目录下的 man_db.conf 这个文件；
5. 在 vi 中设置一下行号；
6. 移动到第 43 列，向右移动 59 个字符，请问你看到的小括号内是哪个文字？
7. 移动到第一列，并且向下搜寻一下“ gzip ”这个字串，请问他在第几列？
8. 接着下来，我要将 29 到 41 列之间的“小写 man 字串”改为“大写 MAN 字串”，并且一个一个挑选是否需要修改，如何下达指令？如果在挑
选过程中一直按“y”， 结果会在最后一列出现改变了几个 man 呢？
9. 修改完之后，突然反悔了，要全部复原，有哪些方法？
10. 我要复制 66 到 71 这 6 列的内容（含有MANDB_MAP），并且贴到最后一列之后；
11. 113 到 128 列之间的开头为 # 符号的注解数据我不要了，要如何删除？
12. 将这个文件另存成一个 man.test.config 的文件名；
13. 去到第 25 列，并且删除 15 个字符，结果出现的第一个单字是什么？
14. 在第一列新增一列，该列内容输入“I am a student...”；
15. 储存后离开吧！
整个步骤可以如下显示：
1. “mkdir /tmp/vitest”
2. “cd /tmp/vitest”
3. “cp /etc/man_db.conf .”
4. “/bin/vi man_db.conf”
5. “:set nu”然后你会在画面中看到左侧出现数字即为行号。
6. 先按下“43G”再按下“59→”会看到“ as ”这个单字在小括号内；
7. 先执行“1G”或“gg”后，直接输入“/gzip”，则会去到第 93 列才对！
8. 直接下达“ :29,41s/man/MAN/gc ”即可！若一直按“y”最终会出现“在 13 列内置换 13 个字串”的说明。
9. （1）简单的方法可以一直按“ u ”回复到原始状态，（2）使用不储存离开“ :q! ”之后，再重新读取一次该文件；
10. “66G” 然后再“ 6yy ”之后最后一列会出现“复制6列”之类的说明字样。 按下“ G ”到最后一列，再给他“ p ”贴上6列！
11. 因为 113~128 共 16 列，因此“ 113G ”→“ 16dd ”就能删除 16 列，此时你会发现光标所在 113 列的地方变成 “ # Flags. ” 开头啰
12. “ :w man.test.config ”，你会发现最后一列出现 "man.test.config" [New].. 的字样。