Theorem 1. For a defender wanting to minimize its cost, the
game with exponential strategy has a Nash equilibrium with
∗
d = Λd,0 and λ
λ
∗
a = Λd,0
− 1
.
(cid:11)(cid:12)
(cid:13)
pccl
2ca
(cid:10)
(cid:8)
Proof. Examining the defender’s payoff reveals that
strictly decreasing at this rate:
it
is
dβd
dλd
1 + pcα
cm
= −λ
2
d − 2λaλd − λ
2
a
Note that the root of the payoff function, βd(λ
 0. The best response function of
the defender is:
BRd(λa) = Λd,0.
this
equilibrium of
game
is λ
∗
a
=
The Nash
∗
BRa(BRd(λ
a)).
We consider the case in which the defender decides to inﬂict
damage on the attacker.
521
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:32:10 UTC from IEEE Xplore.  Restrictions apply. 
Def. Inflicting Damage
NE2
d

t
e
a
r
r
e
d
n
e
e
D
f

d,0
Def. Max Utility
NE1
Attacker
Attacker rate 
a
Fig. 6: Game proﬁle with pure Nash equilibrium.
Theorem 2. For a defender attempting to inﬂict damage on
∗
d =
the attacker, a Nash equilibrium strategy exists such that λ
pc
d(X − 1) where X =
∗
∗
a = λ
αX−1
cmX and λ
pccl
2ca .
(cid:12)
Proof. Increasing λd increases the best response rate of the
attacker, thus forcing the attacker to hide more frequently. We
propose that the defender play a strategy that leads to βd = 0.
The goal of this strategy is to harm the attacker before the
detection succeeds. We deﬁne the best response strategy for
the defender in response to the attacker’s λa as the root of the
payoff function:
(cid:14)
BRd(λa) =
m + 2λacm(α + 1)p + (α − 1)2p2
λ2
ac2
− λacm − pα + p
2cm
.
2cm
On the other hand, the attacker’s best strategy is highlighted
in Equation (1). Assuming that cm (cid:8) pcα, then the best
attacker response is to linearly follow the defender’s rate:
(cid:8)(cid:9)
(cid:10)
− 1
pccl
2ca
.
BRa(λd) = λd
The Nash
∗
BRd(BRa(λ
d)).
equilibrium is
computed
∗
as λ
d
=
Figure 6 shows the game proﬁle for both defender goal and
the Nash equilibria due to said strategies. Our analysis shows
that we have two Nash equilibria depending on the goals of
the defender. If the defender is interested in inﬂicting damage
on the attacker, the defender plays a Nash equilibrium (NE
2) that uses lots of resources for the sake of detecting the
attacker; at this equilibrium, the utility of the defender is kept
at 0. This NE forces the attacker to hide more often to avoid
detection, thus stopping malicious activity. However, if the
defender wants to maximize his utility, then he selects the
smallest possible rate as a strategy (NE 1). This equilibrium
has the attacker playing at a relatively slow rate in response
to the defender’s slow rate. The defender slowly checks the
state of the system and eventually detects the attacker while
being unpredictable to an adaptive attacker.
VII. DISCUSSION
In this section, we discuss some security details related to
the implementation of this system. Speciﬁcally, we discuss the
attack surface of POWERALERT and the security concerns with
the IC-Program. Moreover, we consider the practicality of our
solution, and it’s important despite the existence of TPMs.
A. Implementation Details
Each POWERALERT device has a client on the untrusted
machine. The client is a low-level module that communicates
with POWERALERT. The client is implemented for placement
in the kernel or the hypervisor. The communication channel
between POWERALERT and the client can be over any medium
such as Ethernet, USB, or serial. All those channels are feasi-
ble because of the proximity between POWERALERT and the
untrusted machine. The use of serial or USB communication is
advantageous because it limits the attacker to physical attacks,
making man-in-the-middle and collusion attacks harder. If the
attacker has physical access to the machine, then she could
tamper with POWERALERT.
The client receives the IC-Program as machine code over
the communication channel. POWERALERT signs the code,
their keys are exchanged during the initialization phase of the
system. The signed program allows the machine to attest that
POWERALERT is the generator. We propose using a stream
cipher as it has better performance than public-private key
ciphers or block ciphers. Finally, the client on the machine
has to pause execution of other programs when the protocol
is initiated. In our implementation, the IC-program is run on a
single core using spin_lock_irqsave(), while the other
cores’ executions are blocked by running a sequence of NOP
instructions.
The hardware requirements for POWERALERT are minimal.
We implemented a prototype using Raspberry PI 2. The
prototype uses an ADC to convert the current measurements
from the current loop to a digital signal. The ADC uses a
sampling rate of 500KHz; most low-cost hardware can handle
this sampling rate. Moreover, power state extraction is only
performed when the POWERALERT-Protocol is initiated, the
operation does not need to be real-time.
B. Comparison to TPM
POWERALERT does not rely on specialized hardware within
the untrusted machine such as TPM or Intel’s AMT. However,
POWERALERT and trusted modules are orthogonal systems;
whereas TPMs provide a method for secure boot, dynamic
integrity checking is still costly and harder to enforce. POW-
ERALERT provides an external security solution that can be
tied to a security management across a wide network. In fact,
POWERALERT can use Intel’s AMT as a communication chan-
nel. Finally, our work demonstrates the need for measurements
that do not pass through or origin in the untrusted machine.
Such measurements reduce the risk of attacker tampering and
mimicry. Having POWERALERT be an external box as opposed
to being an internal module aids in separating the boundaries
between the entities. The clear boundary allows us to ﬁnd a
522
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:32:10 UTC from IEEE Xplore.  Restrictions apply. 
clear attack surface, enables easier alerting capabilities, and
easier methods to update POWERALERT when vulnerabilities
or new features are added.
C. Space of IC-Programs
(cid:15)2n
A large space of IC-programs is required to prevent reuse.
The maximum number of IC-programs that can be generated is
the product of the maximum number of binary trees multiplied
by the maximum number of irreducible polynomials. Thus,
the total number of IC-programs that can be generated is
Dd,n = Md(2) × tn. Where, tn =
is the
maximum number of binary trees with depth n, computed
using the Catalan number, and Md = 1
k|d μ(k)2d (the
d
necklace polynomial) is the maximum number of irreducible
polynomials of degree d in GF (2). The total number of
programs for n = 40 and d = 5, D5,40 = 1.97 × 1026
D. Performance Impact
(cid:11)(cid:16)i
(cid:15)
(cid:13)
k=2
i+k
i=0
k
We deem the performance impact of POWERALERT ac-
ceptable. When the POWERALERT-protocol is initiated and
the IC-program starts execution, execution of all other tasks
on the machine is paused. This is needed in order to ensure
that no other tasks interfere with the current measured from
the CPU. The POWERALERT-procotol is initiated, on average,
once every minute for 0.9 ms for the aggressive defense
strategy in Nash Equilibrium 2. The graphical degradation will
not be noticeable by a user, because, in terms of graphical
responsiveness, the pixel response time should not exceed 4
ms [22]. Moreover, CPU overhead due running the protocol
is insigniﬁcant at 0.18%.
E. Limitations
In this work, we did not study the variability of the power
the power model will not
model. While we argued that
vary over time due to degradation, however,
it does vary
due to hardware process variation and operation temperature
variation. Moreover, we did not study the false positives of
the approach because it is determined by three parameters,
the sampling rate, the error of the power model and γ (used
to ﬁnd the size of the IC-program). The designer is encouraged
to pick those parameters to decrease the false positive rate to
near zero.
VIII. SECURITY ANALYSIS
POWERALERT uses current measurements, timing infor-
mation, and diversity of the IC-Program to protect against
subversion of integrity checking. The power measurements
are used to limit the operation of the machine to just the IC-
Program while diversity limits the attacker’s ability to adapt to
our checking mechanisms. In this section, we list the methods
in which POWERALERT addresses the attacks discussed in
Section II-C.
Proxy attack: In this attacker,
the attacker attempts to
forward the IC-Program to a remote machine to compute and
return the result via the same network link. POWERALERT
detects this attack by examining its effects on the current
trace and the timing of the network phase. Using the current
trace, POWERALERT will observe that network operations
took longer than expected as more bytes were transferred
between the CPU and the network card. The size of the
IC-Program, which was picked by the optimization process
described in Section V-G, ensures that our hardware will pick
up the retransmission. Any physical attack, such as tapping
of the network line or ﬁrmware changes to the NIC, are not
within our purview.
Active analysis: In this attack, active reverse engineer-
ing is used to learn the usage patterns of the IC-Program.
POWERALERT changes the IC-Program each time the POW-
ERALERT-protocol is initiated; the diversity renders the infor-
mation learned by the attacker from the previous run obsolete.
The probability that a program will ever get repeated is
1/1020. Moreover, it is practically impossible for the attacker
to predict our next IC-Program. The attacker has to predict
the random numbers generated by POWERALERT’s random
number generator; in this work, we require POWERALERT to
use a true random number generator that uses some physical
phenomena as opposed to a pseudorandom number generator
that can be predicted by a dedicated attacker.
Static analysis: Analyzing a ﬂattened control ﬂow is NP-
hard [27]. Thus it will not be possible for the attacker to
analyze the program without signiﬁcant computations. Note
that we combine control ﬂow ﬂattening with IC-Program
diversity; thus even if the attacker successfully analyzes the
IC-Program the solution is not useful for the next run of the
protocol.
Data pointer redirection attack: In this attack, the attacker
stores an unmodiﬁed copy of the data in another portion
of memory. When an address is to be checked, the attacker
changes the address to be checked to that of the unmodiﬁed
data. The IC-Program uses the address and the memory
content when computing the hash function. To compute a valid
hash, the attacker has to change the address to the location
of the copy while retaining the original address. In our IC-
Program design phase, the designer sets the smallest number
of instructions that can be added to the program such that
the execution difference is detected when POWERALERT’s
hardware speciﬁcations are taken into account (the sampling
rate).
Note that this measure is more effective when combined