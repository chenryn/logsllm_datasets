    li $t0,0
    while:
        beq $t0,12,exit
        lw  $t2,array($t0)
        addi $t0,$t0,4
        li $v0,1
        move $a0,$t2
        syscall
        j while
    exit:
        li $v0,10
        syscall
我们分段来看，先看如何查找角标为2的数值。先将array的地址传入s1，将s1初始化。因为我们要查询角标为2的值，所以我们将a0的值加载为立即数2，因为存储的时候是四个字节一组，所以我们将a0，也就是角标乘4，获得开始的地址，然后把s1的值和a0的值相加得到想要获取的数值的偏移量，此时的s1就是8了，然后我们知道了偏移量和初始地址，通过lw来进行读取，此时的a0内就存放了从第八位开始的值，也就是角标为2的时候的值了。
我们再看第二段，将角标临时设置为0的。
首先先初始化寄存器`$t0`的值为 0。然后进入一个循环，如果`$t0`的值等于
12，则跳转到`exit`标签处结束程序。从数组`array`中读取数据，存入寄存器`$t2`中。将寄存器`$t0`的值加
4，以便在下一次循环中读取下一个整数。输出寄存器 $t2 中的整数。通过跳转回`while`标签处，继续循环读取下一个整数。循环结束后，执行 exit
标签处的代码，将程序结束。
快速初始化数组
    .data
        array: .word 20 :3  #批量定义3个整型数据20
## 分支跳转
  * `bgt`(branch if greater than):用于 **大于** 比较
    bgt $t0,$t1,sub # 如果$t0中的数据大于$t1,则跳转到sub分支,执行sub中的代码,否则,按照顺序执行bgt下面的代码, sub是一个代号,可以自定义
    sub:
  * `beq`(branch equal):用于 **等于** 比较
    beq $t0,$t1,sub # 如果$t0中的数据等于$t1,则跳转到sub分支,执行sub中的代码,否则,按照顺序执行beq下面的代码, sub是一个代号,可以自定义
    sub:
  * `ble`(branch if less than):用于 **小于** 比较
    ble $t0,$t1,sub # 如果$t0中的数据小于$t1,则跳转到sub分支,执行sub中的代码,否则,按照顺序执行ble下面的代码, sub是一个代号,可以自定义
    sub:
这个东西怎么用呢？举个例子
当我们在c语言中简单写好饿了一个比较数字大小的小工具
    scanf("%d",$a);
    scanf("%d",$b);
    if(a>b){
        printf("YES");
    }else{
        printf("NO");
    }
在mips中如何实现呢？首先在`.data`节定义了两个字符串变量`msg_yes`和`msg_no`，分别存储`"YES\0"`和`"NO\0"`两个字符串，其中
\0 表示字符串的结尾。
接下来在.text节中，使用li指令将`$v0`寄存器设置为5，表示要使用`syscall`服务5读取一个整数。然后使用`syscall`指令，等待用户输入一个整数，并将输入的结果存储在`$v0`寄存器中。接着使用move指令将`$v0`中的值复制到$t0寄存器中。
接下来再次使用li和syscall指令读取一个整数，并将输入结果存储在$t1寄存器中。
然后使用bgt指令比较`$t0`和`$t1`的大小，如果`$t0`大于`$t1`，则跳转到标记为sub的代码块；否则继续执行下一条指令。
如果`$t0`大于`$t1`，则使用li和la指令将`$v0`和`$a0`寄存器分别设置为4和msg_no，表示要使用syscall服务4输出字符串msg_no。然后使用syscall指令将msg_no字符串输出到控制台。
最后使用li指令将`$v0`寄存器设置为10，表示要使用syscall服务10退出程序，然后使用syscall指令退出程序。
如果`$t0`不大于`$t1`，则直接跳转到标记为sub的代码块。在sub代码块中，使用li和la指令将`$v0`和`$a0`寄存器分别设置为4和msg_yes，表示要使用syscall服务4输出字符串msg_yes。然后使用syscall指令将msg_yes字符串输出到控制台。
最后使用li指令将$v0寄存器设置为10，表示要使用syscall服务10退出程序，然后使用syscall指令退出程序。
可以发现，麻烦了不少。
    # 用$t0指代a ,$t1指代b
    .data
    msg_yes: .ascii "YES\0" # \0表示字符串结尾
    msg_no: .ascii "NO\0"
    .text
    li $v0,5  #控制syscall为读取integer状态
    syscall # 此时io控制台显示光标,可输入数字,回车后将输入的数字保存在$v0中
    move $t0,$v0 #由于接下来还需要使用$v0 ,为避免数据被覆盖掉 将输入的数据转移到$t0中进行临时保存
    li $v0,5
    syscall
    move $t1,$v0 
    bgt $t0,$t1,sub 
        li $v0,4
        la $a0,msg_no
        syscall
        #结束程序
        li $v0,10
        syscall
    sub:
        li $v0,4
        la $a0,msg_yes
        syscall
我们再看一个计算从一到一百的和的mips汇编。首先，通过 .text 段设置了两个寄存器 $t0 和 $t1 分别为 1 和 0。
然后，通过 loop 标签实现了一个循环，每次循环中：
  1. 计算 $t1 = $t1 + $t0，将 $t0 加到 $t1 中。
  2. 计算 $t0 = $t0 + 1，将 $t0 加 1。
  3. 检查 $t0 是否小于等于 100，如果小于等于 100，则跳转到 loop 标签继续执行循环。
最后，将 $t1 中的值作为参数传递给系统调用函数，通过 syscall 输出到控制台上。
总体来说，以上代码实现的功能是计算从 1 到 100 的所有整数的和，并将结果输出到控制台上。
    # 用$t0指代i ,$t1指代s
    .text
    li $t0 ,1
    li $t1 ,0
    loop:
    # s=s+i;
    add $t1,$t1,$t0
    add $t0,$t0,1
    ble $t0,100,loop
    move $a0,$t1
    li $v0,1
    syscall
## 关于多文件的处理
在文件A中定义函数
    fun:
      li $v0,1
      li $a0,1
      syscall 
      jr $ra
在文件B中使用关键字`.include`引用A文件中的函数
    .text
    jal fun
    .include "A.asm"
所有文件必须在同一目录下！！！
## 宏
### 宏的替换
全局替换，使用我们上面的`.include`伪指令进行替换
### 宏匹配
在汇编中,如果我们要依次打印1、2、3三个整数,那么汇编如下
    print1:
        li $v0,1
        li $a0,1
        syscall
        jr $ra
    print2:
        li $v0,1
        li $a0,2
        syscall
        jr $ra
    print2:
        li $v0,1
        li $a0,3
        syscall
        jr $ra
我们发现使用标签的方式定义函数,当函数体内容存在不确定变量值时,代码非常冗余, 如果使用高级语言进行封装的话,我们一般一个函数就搞定了:
    void print(int a){
        print(a);
    }
有没有办法使得汇编能像高级语言一样简洁呢?
在MARS中给我们提供了一个扩展伪指令,叫做 **宏匹配**
宏匹配使用的格式如下:
    .macro 别名
        #汇编指令...
    .end_macro
举个例子
    li $v0,10
    syscall
    #比如我们要对以上两行指令使用宏匹配进行封装
    #封装结果为
    .macro exit
        li $v0,10
        syscall
    .end_macro
    #在代码中引用
    .text
        exit #直接使用别名调用
如果我们要封装一个打印整型数据的函数,那么我们可以:
    #封装结果为
    .macro print_int(%param)
        li $v0,1
        li $a0,%param
        syscall
    .end_macro
    #在代码中引用
    .text
        print_int(1) #直接使用别名调用
        print_int(2)
        print_int(3)
经过这样对程序的封装之后，我们使用再去编写程序的成本就大大降低了，避免了重复编写系统调用代码的繁琐。
结合上面学的对多文件的处理，我们会在很多地方见到将封装好的函数单独放在一个文件中,然后直接在头部`.include`。
### 宏定义
我们可以使用伪指令`.eqv`来对系统中原生的东西进行定义别名进行调用
举个例子：首先，使用伪指令 ".eqv" 定义了三个常量。其中，常量 "LIMIT" 被定义为数值 20 的别名，常量 "CTR" 被定义为寄存器
`$t2`的别名，常量 "CLEAR_CTR" 被定义为将寄存器，常量 "CLEAR_CTR" 被定义为将寄存器`$t2`的值清零的伪指令`add CTR,
$zero, 0`的别名。
在 ".text" 段中，首先将系统调用号 1 (即 "print_int") 装载到寄存器`$v0`中。然后调用伪指令 "CLEAR_CTR"，将寄存器
`$t2` 清零。接着使用 "li" 指令将数值 20 装载到寄存器 `$t0` 中，该值为之前定义的常量 "LIMIT" 的值。
    .eqv  LIMIT      20 #给20这个立即数取个别名为LIMIT
    .eqv  CTR        $t2
    .eqv  CLEAR_CTR  add  CTR, $zero, 0
    .text
        li   $v0,1
        CLEAR_CTR
        li $t0,LIMIT
**宏定义** 和 **宏匹配** 必须 **先定义后使用** ,也就是说定义的代码需要放在前头
## Mips汇编指令汇总
这里乱码三千师傅已经整理的很全了，直接放图吧
## 参考链接
 汇编语言之MIPS汇编  
 Mips汇编入门  
 MIPS汇编语言入门