# 基于机器学习的恶意软件分类实作：Microsoft Malware Classification Challenge 经验谈

**演讲者：**
- ch0upi（趋势科技工程师）
  - 趋势科技员工
  - 专长：机器学习与数据分析、威胁情报服务
  - 成就：KDDCup 2014 和 KDDCup 2016 前十名，GoTrend 在 UEC Cup 2015 中获得第六名
- miaoski（趋势科技高级威胁研究员）
  - 专长：威胁情报、智慧城市、SDR、Arduino 和 RPi 制造
  - 爱好：喜欢猫

**日期：2016 年 12 月 2 日**

## 目录
1. 为什么需要恶意软件分类？
2. 机器学习简介
3. Microsoft 挑战赛
4. 如何解决该问题？
5. 结论

### 恶意软件分类是什么？
- 识别恶意软件家族

### 为什么需要恶意软件分类？
- 了解如何清理
- 可能的归因
- 设置适当的优先级

### 当前的恶意软件分类方法
- 由研究人员手动生成
- 使用签名来指纹识别恶意软件
- YARA 规则

### 面临的挑战
- 手动过程可能导致错误分类
- 恶意软件家族数量不断增加
- 大量样本（每天超过 1M 个）
- 签名数量增加导致扫描速度变慢且需要更多存储空间

### BSidesLV 2016: VirusShare
- John Seymour, "Labeling the VirusShare Corpus: Lessons Learned," BSidesLV 2016
- VirusShare 数据集包含约 20M 个文件

### 机器学习的应用
- 自动化恶意软件家族识别
- 节省研究人员的工作量

### 机器学习步骤
1. 准备数据
2. 生成特征
3. 训练模型
4. 进行预测
5. 评估

### 示例：水果分类
- 苹果
- 香蕉

#### 水果特征
- 颜色
- 形状
- 大小
- 重量

#### 学习
- 苹果
- 香蕉

#### 学到的水果模型
- 苹果
  - 颜色：红色
  - 形状：圆形
- 香蕉
  - 颜色：黄色
  - 形状：长条形

#### 新水果来了…
- 是苹果还是香蕉？

#### 水果预测
- 水果 1
  - 颜色：红色 => 苹果
  - 形状：圆形 => 苹果
- 水果 2
  - 颜色：黄色 => 香蕉
  - 形状：长条形 => 香蕉

#### 水果评估
- 准确率：(9+9)/20 = 90%

|       | 预测为苹果 | 预测为香蕉 |
|-------|------------|------------|
| 实际为苹果 | 9          | 1          |
| 实际为香蕉 | 1          | 9          |
| 总计    | 10         | 10         |

### 机器学习是什么？
- 数学方法和算法
- 从历史标记数据中学习
- 找到一个分离超平面
- 应用于未来数据

### 特征是什么？
- 观察现象的可测量属性
- 用于描述条目
- 特征向量
  - 作为机器学习算法的输入
  - 特征来源
    - 数据探索
    - 领域知识

### 模型是什么？
- 对如何分类数据的数学描述
- 通过某些算法调整参数
- 用于进行预测

### 预测
- 识别新实体的类别
- 使用训练数据训练的模型

### 评估
- 通过一些度量标准审查模型结果
- 交叉验证
- 评估函数
  - 准确率
  - logloss
  - AUC
  - 精确率、召回率、F1 分数

### 胶水语言
- 将机器学习步骤粘合在一起
- 大批量数据的批处理运行
- 与 Hadoop、Spark 的集成
- 丰富的库/算法支持
- 易于开发/学习

### scikit-learn
- 开源 Python 机器学习库
- 支持多种分类、回归和聚类算法
- 与 NumPy、SciPy 和底层 BLAS 兼容

### scikit-learn 快速指南
- 分类算法
  - 逻辑回归：`linear_model.LogisticRegression()`
  - SVM：`svm.SVC()`
  - 随机森林：`ensemble.RandomForestClassifier()`
- 接口
  - `fit(X, Y)`：训练模型
  - `Yp = predict(X)`：进行预测

### scikit-learn 评估函数
- `metrics.accuracy_score()`
- `metrics.log_loss()`
- `metrics.auc()`
- `metrics.f1_score()`
- `metrics.confusion_matrix()`
- `metrics.classification_report()`

### Microsoft 恶意软件分类挑战
- 由 WWW 2015 / BIG 2015 主办
- 微软恶意软件保护中心
- 微软 Azure 机器学习
- 微软人才管理
- PE 十六进制转储和反汇编
- 训练集：10,868 个样本（压缩后 17.5GB）
- 测试集：10,873 个样本（压缩后 17.7GB）

### 九种类别
| 类别      | 数量  |
|-----------|-------|
| Ramnit     | 1541  |
| Lollipop   | 2478  |
| Kelihos_ver3 | 2942 |
| Vundo      | 475   |
| Simda      | 42    |
| Tracur     | 751   |
| Kelihos_ver1 | 398  |
| Obfuscator.ACY | 1228 |
| Gatak      | 1013  |
| 总计       | 10868 |

### 类别：Ramnit
- 盗取敏感个人信息
- 通过可移动驱动器感染
- 复制自身并使用硬编码名称或随机文件名
- 向 svchost.exe 注入代码
- 感染 DLL、EXE 和 HTML 文件

### 类别：Lollipop
- 显示广告的广告软件
- 捆绑第三方软件
- Windows 启动时自动运行

### 类别：Kelihos
- 发送带有恶意下载链接的垃圾邮件
- 与 C&C 服务器通信
- 某些变种安装 WinPcap 以监视网络活动

### PE 十六进制转储（无头信息）

### IDA Pro 转储

### 评估函数
- \( \text{logloss} = -\frac{1}{N} \sum_{i,j} y_{ij} \log(p_{ij}) \)
- 提交示例：
  - 00000000,0.5,0.5,0,0,0,0,0,0,0,0
  - 00000001,0,0,0.5,0.5,0,0,0,0,0,0
  - 00000002,0,0,1,0,0,0,0,0,0,0
- logloss = - (log(0.5) + log(0) + log(1)) / 3
- log(0) => log(1e-15)

希望这个优化后的版本更清晰、连贯和专业。如果有任何进一步的需求，请告诉我！