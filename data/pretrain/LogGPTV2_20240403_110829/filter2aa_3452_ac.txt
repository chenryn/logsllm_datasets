    } 
    @Override 
    public void close() { 
        System.out.println("门关了"); 
    } 
    @Override 
    public void LockUp() { 
        System.out.println("门锁上了"); 
    } 
    @Override 
    public void openLock() { 
        System.out.println("门开锁了"); 
    }
}
Lock接⼝：
package 
;
/* 
 * 1. 只能有抽象⽅法 
 * 2. 只能有常量 
 * 3. 接⼝不能创建对象 
 * 4. ⼀个类要实现他的接⼝必须要实现他所有的⽅法 
 */ 
public interface Lock { 
    public abstract void LockUp(); 
    public abstract void openLock();
}
com.chouxiang.core
com.chouxiang.core
com.chouxiang.core
Java代码审计之基础开发
40
TestDoor类：
package 
; 
public class TestDoor { 
    public static void main(String[] args) { 
        Door d = new SecurityDoor(); 
        d.close(); 
        d.open(); 
        ((SecurityDoor)d).LockUp(); 
        ((SecurityDoor)d).openLock(); 
    }
}
接⼝的特点
只能有抽象⽅法
只能有常量
接⼝不能创建对象
⼀个类要实现⼀个接⼝必须实现它的所有⽅法
接⼝与类之间的关系
类与类：继承关系
接⼝与类：多实现关系
接⼝与接⼝：继承关系
com.chouxiang.core
Java代码审计之基础开发
41
接⼝的优点
打破了继承的局限性
对外提供了⼀种规则
降低了程序的耦合性
接⼝与抽象类的区别
异常处理
异常（Exception）的概念
异常的体系结构
常⻅的异常类
Java中如何进⾏异常处理
try...catch...finally处理异常
⾃定义异常
运⾏异常和编译异常
异常的概念
在我们编写程序的时候，代码中可能会出现运⾏错误或者编译错误，那么为了处理这些问题，Java为我们提供了⼀种机制，
叫做异常处理机制
异常包含了错误的类型、原因以及位置
异常的体系结构
Java代码审计之基础开发
42
如何进⾏异常处理
Java异常处理都是由五个关键字实现的：Try、Catch、Finally、throw、throws
Java代码审计之基础开发
43
这时候我们加上异常处理
常⻅的异常类
Java代码审计之基础开发
44
try...catch...finally
catch不能独⽴于try存在
在try/catch后⾯添加finally块并⾮强制性的要求
try代码后不能既没有catch块也没有finally块
try，catch，finally块之间不能添加代码
Java代码审计之基础开发
45
⾃定义异常
如果在⼀个⽅法体中抛出了异常，如何通知调⽤者呢？
 throws  声明在某个⽅法可能抛出的各种异常，多个异常⽤逗号隔开
 ⽅式1：调⽤者处理异常
 ⽅式2：调⽤者继续声明异常
              main()⽅法声明的异常通常由Java虚拟机处理
例⼦：⽤⼾注册异常
Java代码审计之基础开发
46
⾸先我们去主类中继承 Exception  
 public class demo3 extends Exception
Java代码审计之基础开发
47
这时候我们去创建⼀个⽤⼾注册的类: UserReg  
除了这⾥可以使⽤try...catch之外我们还可以在⽅法后使⽤ throws  
这⾥可以看出来，需要我们⼀个⼀个去⼿动抛出异常，很⿇烦
Java代码审计之基础开发
48
运⾏异常和编译异常
运⾏时期异常：RuntimeException的⼦类就是运⾏时期异常，在编译时期可以⾃由选择处理或者不处理
编译时期异常：是Exception的在编译时期必须处理
这⾥举个运⾏时期异常的例⼦
⾸先写⼀个运⾏时异常的类
ClothException类：
package 
; 
public class ClothException extends RuntimeException{ 
    public ClothException() { 
        super(); 
    } 
    public ClothException(String message) { 
        super(message); 
    } 
    public ClothException(String message, Throwable cause) { 
        super(message, cause); 
    } 
    public ClothException(Throwable cause) { 
        super(cause); 
    } 
    protected ClothException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) { 
        super(message, cause, enableSuppression, writableStackTrace); 
    }
}
⼀个测试购买类（TestCloth）：
com.exception.core
Java代码审计之基础开发
49
package 
;
//运⾏时期的异常
public class TestCloth { 
    public static void main(String[] args) { 
        TestCloth t = new TestCloth(); 
        t.bug(200); 
    } 
    public void bug(int nSize){ 
        if (nSize100){ 
            throw new ClothException("尺⼨出错"); 
        } 
    }
}
这时候可以发现，编译是不出错的，在运⾏的时候才会抛出异常，我们可以使⽤try让他抛出异常
集合框架及泛型
为什么要使⽤集合框架
Java集合框架包含的内容
List接⼝实现类
ArrayList常⽤⽅法
LinkedList常⽤⽅法
HashSet常⽤⽅法
HashMap常⽤⽅法
泛型的引⽤
泛型集合
为什么要使⽤集合框架
com.exception.core
Java代码审计之基础开发
50
Java集合框架提供了⼀套性能优良、使⽤⽅法简单的接⼝和类，它们位于 java.util  包中
Java集合框架包含的内容
Collection接⼝：存储⼀组 不唯⼀ ， ⽆序 的对象
List接⼝：存储⼀组 不唯⼀  ， 有序  (顺序插⼊)的对象
Set接⼝：存储⼀组 唯⼀  ， ⽆序  的对象
Java代码审计之基础开发
51
Map接⼝：存储⼀组键值对象，提供 key  到 value  的映射
List接⼝实现类
ArrayList实现了⻓度可变的数组，在内存中分配连续的空间。遍历元素和随机访问元素的效率⽐较⾼
LinkedList采⽤链表存储⽅式。插⼊，删除元素时的效率⽐较⾼
ArrayList常⽤⽅法
Java代码审计之基础开发
52
package 
; 
import 
.ArrayList; 
public class ArrayListTest { 
    public static void main(String[] args) { 
        //创建ArrayList集合对象 
        ArrayList al = new ArrayList(); 
        al.add(12);//添加元素 
        al.add("赵四"); 
        al.add(28.0); 
        //查询元素个数 
        System.out.println("元素的个数为："+al.size()); 
        //查找第⼆个元素 
        System.out.println("第⼆个元素为:"+al.get(1)); 
        //输出所有元素 
        for (int i = 0;i value 
        Set set = hm.keySet(); 
        Iterator it = set.iterator(); 
        while(it.hasNext()){ 
com.jihe.core
java.util
java.util
java.util
Java代码审计之基础开发
56
            Object key = it.next(); 
            Object value = hm.get(key); 
            System.out.println("key = "+key+" value is "+value); 
        } 
    }
}
泛型的引⽤
如何解决以下强制类型转换时容易出现的异常问题
List的get(int index)⽅法获取元素
Map的get(Object key)⽅法获取元素
Iterator的next()⽅法获取元素
泛型改写了集合框架中所有的接⼝和类
泛型集合
将对象的类型作为参数，指定到其他类或者⽅法上，从⽽保证类型转换的安全性和稳定性
典型的泛型集合： ArrayList   、 HashMap 
E、K,V表⽰该泛型集合中的元素类型
泛型集合中的数据不再转换为Object
我们以ArrayList举例
Java代码审计之基础开发
57
package 
; 
import 
.ArrayList; 
public class fanxingTest { 
    public static void main(String[] args) { 
        ArrayList al = new ArrayList(); 
        //创建狗的对象 
        Dog d1 = new Dog("pp","泰迪"); 
        Dog d2 = new Dog("xx","阿拉斯加"); 
        Dog d3 = new Dog("kk","哈⼠奇"); 
        //插⼊ArrayList 
        al.add(d1); 
        al.add(d2); 
        al.add(d3); 
        //循环输出 
        for (Dog dd:al){ 
            System.out.println(dd.getsName()+"的种类是:"+dd.getsType()); 
        } 
    }
} 
class Dog{ 
    String sName; 
    String sType; 
    public Dog(String sName, String sType) { 
        this.sName = sName; 
        this.sType = sType; 
    } 
    public String getsName() { 
        return sName; 
    } 
    public void setsName(String sName) { 
        this.sName = sName; 
    } 
com.jihe.core
java.util
Java代码审计之基础开发
58
    public String getsType() { 
        return sType; 
    } 
    public void setsType(String sType) { 
        this.sType = sType; 
    }
}
序列化与反序列化
序列化