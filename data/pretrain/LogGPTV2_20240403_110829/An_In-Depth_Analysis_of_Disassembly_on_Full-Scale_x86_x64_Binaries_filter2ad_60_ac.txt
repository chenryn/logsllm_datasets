level increases, repeatedly falling from close to 99% true
positives at O0, to only 82% at O3, and worsened by high
false positive rates. For IDA Pro, the worst case mean true
positive rate is even lower, falling to 62% for C++ on x64
gcc at O3. Moreover, the standard deviation increases to
over 15% even for IDA Pro.
8060985:
pop
%ebx
8060986:
8060987:
8060988:
8060989:
pop
ret
nop
lea
%esi
0x0(%esi,%eiz,1),%esi
Listing 3: False positive function (shaded) for Dyninst,
due to code misinterpreted as epilogue, sphinx compiled
with gcc at O2 for x86 ELF.
46b990 :
46ba02:
46ba08:
46ba0b:
46ba0e:
46ba11:
46ba14:
46bb47:
46bb49:
46bb4a:
46bb50:
[...]
ja
mov
shl
mov
and
je
[...]
pop
retq
nopw
sub
46bb50 
%rsi,%rdi
%cl,%rdi
%rdi,%rcx
$0x46,%ecx
46bb50 
%r12
0x0(%rax,%rax,1)
$0x90,%rax
Listing 4: False positive function (shaded) for Dyninst,
due to code misinterpreted as epilogue, perlbench com-
piled with gcc at O3 for x64 ELF.
False negatives. The vast majority of false nega-
tives is caused by indirectly called or tailcalled functions
(reached by a jmp instead of a call), as shown in List-
ing 1. This explains why the true positive rate drops
steeply at high optimization levels, where tail calls and
functions lacking standard prologues are common (see
Section 3.1.3). Symbols, if available, help greatly in im-
proving accuracy. They are used especially effectively
by IDA Pro, which consistently yields over 99% true
positives for binaries with symbols, even at higher opti-
mization levels.
False positives. Several factors contribute to the false
positive rate. We analyzed a random sample of 50 false
positives for Dyninst, Hopper and IDA Pro, the three best
performing disassemblers in function detection.
For Dyninst, false positives are mainly due to erro-
neously applied signatures for function prologues and
epilogues. As an example, Listing 2 shows a false posi-
tive in Dyninst due to a misidentiﬁed prologue: Dyninst
scans for the push %r15 instruction (as well as several
other prologue signatures), missing preceding instructions
in the function. We observe similar cases for function
epilogues. For instance, as shown in Listings 3 and 4,
Dyninst assumes a new function following a ret; nop
instruction sequence. This is not always correct: as shown
in the examples, the same code pattern can result from
a multi-exit function with padding between basic blocks.
Note that both examples could be handled correctly by
control ﬂow and semantics-aware disassemblers. In List-
ing 4, there are intraprocedural jumps towards the basic
block at 0x46bb50, showing that it is not a new function.
USENIX Association  
25th USENIX Security Symposium  589
7
gcc-5.1.1 x86
gcc-5.1.1 x64
clang-3.7.0 x86
clang-3.7.0 x64
Visual Studio '15 x86
Visual Studio '15 x64
angr 4.6.1.4
BAP 0.9.9
ByteWeight 0.9.9
Dyninst 9.1.0
Hopper 3.11.5
IDA Pro 6.7
Jakstab 0.8.4
SPEC (C)
SPEC (C++)
 100
)
n
a
e
m
c
i
r
t
e
m
o
e
g
(
s
e
v
i
t
i
s
o
p
e
s
l
a
f
%
 80
 60
 40
 20
 0
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
O0
O1
O2
O3
Figure 3: False positives for function start detection (percentage of total detected functions).
42cec3:
42cecb:
42ced0:
movss
jmpq
mov
%xmm0,-0x340(%rbp)
42cfc8 
-0x344(%rbp),%eax
Listing 5: False positive function (shaded) for Hopper,
due to misclassiﬁed switch case block, hmmer compiled
with gcc at O0 for x64 ELF.
The false positive in Listing 3 is in effect a nop instruction,
emitted for padding by gcc on x86.
All false positives we sampled for Hopper are located
directly after padding code, or after a direct jmp (with-
out a fallthrough edge), and are not directly reached by
other instructions. An example is shown in Listing 5.
Since these instructions are never reached directly, Hop-
per assumes that they represent function starts. This is not
always correct; for instance, the same pattern frequently
results from case blocks belonging to switch statements,
as seen in Listing 5.
Similarly, the majority of false positives for IDA Pro
is also caused by unreachable code assumed to be a new
function. However, these cases are far less common in
IDA Pro than in Hopper, as IDA Pro more accurately
resolves difﬁcult control ﬂow constructs such as switches.
Interestingly, the false positive rate for IDA Pro drops
to a mean of under 0.3% for x64 Visual Studio 2015.
This is because 64-bit Visual Studio uses just one well-
deﬁned calling convention, while other compilers use a
variety [22].
3.1.1.3 Function signatures
Of the tested disassemblers, only IDA Pro supports func-
tion signature analysis. Figure 2c shows the percentage
of non-empty function argument lists where IDA Pro cor-
rectly identiﬁed the number of arguments. We focus on
non-empty argument lists because IDA Pro defaults to an
empty list, skewing our results if counted as correct.
Argument recovery is far more accurate on x86 code,
where parameters are typically passed on the stack, than
it is on the register-oriented x64 architecture. For x86
code generated by gcc and clang, IDA Pro correctly
identiﬁes between 64% and 81% of the argument lists
on non-optimized binaries, dropping to 48% in the worst
case at O3. Results for Visual Studio are slightly worse,
ranging from 36% worst case to 59% in the best case.
As for function starts, the standard deviation is just over
15%. On x64 code, IDA Pro recovers almost none of the
argument lists, with accuracy between 0.38% and 1.87%.
Performance is signiﬁcantly better for binaries with
symbols, even on x64, but only for C++ code. For in-
stance, IDA Pro’s accuracy for gcc x64 increases to a
mean of 44% for C++, peaking at 75% correct argument
lists. This is because IDA Pro parses mangled function
names that occur in C++ symbols, which encode signature
information in the function name.
3.1.1.4 Control Flow Graph accuracy
Figure 2d presents the accuracy of basic blocks in the
ICFG, the union of all function-level CFGs. We found
these results to be representative of the per-function CFG
accuracy. The accuracy of the ICFG is strongly correlated
with instruction discovery; indeed, recursive disassem-
blers typically ﬁnd instructions through the process of
expanding the ICFG itself. Thus, the disassemblers that
perform well in instruction recovery also perform well in
CFG construction. For some disassemblers, such as IDA
Pro, the basic block true positive rate at high optimization
levels even exceeds the raw instruction recovery results
(Figure 2a). This is because for the ICFG, we did not
count missing nop instructions as false negatives.
590  25th USENIX Security Symposium 
USENIX Association
8
IDA Pro consistently achieves a basic block recovery
rate of between 98–100%, even at high optimization lev-
els. Even at moderate optimization levels, the results
for Hopper and Dyninst are considerably less complete,
regularly dropping to 90% or less. For the remaining
disassemblers, basic block recovery rates of 75% or less
are typical.
All disassemblers except IDA Pro show a considerable
drop in accuracy on gcc and clang for x64, compared
to the x86 results. This is strongly correlated with the
diminishing instruction and function detection results for
these disassembler/architecture combinations (see Fig-
ures 2a–2b). This implies that when functions are missed,
these disassemblers also fail to recover the instructions
and basic blocks contained in the missed functions. In
contrast, IDA Pro disassembles instructions even when
it cannot attribute them to any function. The difference
between x86/x64 and C/C++ results is less pronounced
for Visual Studio binaries than for gcc/clang.
3.1.1.5 Callgraph accuracy
Like ICFG accuracy, callgraph accuracy depends strongly
on the completeness of the underlying instruction analy-
sis. As mentioned, the callgraphs returned by the tested
disassemblers contain only the direct call edges, and do
not deal with address-taken functions. For this reason,
Figure 2e presents results for the direct component of the
callgraph only. We study the impact of indirect calls on
function identiﬁcation accuracy in our complex case anal-
ysis instead (Section 3.1.3). The direct callgraph results in
Figure 2e again show IDA Pro to be the most accurate at
a consistent 99% function call resolve rate (linking func-
tion call edges to function starts), in most cases followed
closely by Dyninst and Hopper. This illustrates that the
lower accuracy for function starts (Figure 2b) is mainly
due to indirectly called functions (such as those called via
function pointers or in tail call optimizations).
3.1.2 Server Results
Table 1 shows disassembly results for the servers from
our test suite. For space reasons, and because the rel-
ative accuracy of the disassemblers is the same as for
SPEC, we only show results for IDA Pro, the best overall
disassembler. All other results are available externally,
as mentioned at the start of Section 3. We compiled all
servers for both x86 and x64 with gcc and clang, using
their default Makeﬁle optimization levels.
The server tests conﬁrm that the SPEC results from
Section 3.1.1 are representative; all results lie well within
the established bounds. As with SPEC, linear disassembly
achieved 100% correctness. The nginx results warrant
closer inspection; given its optimization level O1, the
Instructions
u
F
nctions
Signatures
G
F
IC
h
Callgrap
Instructions
u
F
nctions
Signatures
G
F
IC
h
Callgrap
x86
x64
gcc-5.1.1
nginx 99.9 65.5 49.6
100
lighttpd 99.9 99.5 85.9 99.9
100 99.9 59.2 0.9 99.9
100 99.9 99.5 0.0 99.9
vsftpd 95.4 93.4 73.6 95.9 99.5 93.0 92.5 4.3 99.9
100 99.9 86.2 0.0
100
100 99.9 89.9 4.5 99.9
100
exim 99.9 90.1 58.2 99.9
opensshd 99.9 86.2 74.9
100
100
100
100
100
clang-3.7.0
nginx 98.5 57.5 44.0 99.5
lighttpd 98.7 99.5 87.9 99.9
vsftpd 96.8 93.3 72.9 99.8
100
exim 99.0 82.7 54.6 99.3
opensshd 98.9 86.5 78.1
100
100 98.6 53.0 0.7 99.4
100 99.0 99.5 0.0 99.9
100
100 97.0 92.0 6.6 99.5 99.9
100
100 99.2 86.3 0.0
100
100 99.1 81.7 5.4 99.4
100
Table 1: IDA Pro 6.7 disassembly results for server tests
(% correct, per test case).
function start and argument information is on the low
end of the accuracy spectrum. Closer analysis shows that
this results from extensive use in nginx of indirect calls
through function pointers; Section 3.1.1 shows that this
negatively affects function information. Indeed, for all
tested servers, the accuracy of function start detection is
inversely proportional to the ratio of address-taken func-
tions to the total number of instructions. This shows that
coding style can carry through the compilation process to
have a strong effect on disassembler performance.
3.1.3 Prevalence of Complex Constructs
Figure 4 shows the prevalence of complex constructs in
SPEC CPU2006, which pose special disassembly chal-
lenges. We also analyzed these constructs in the server
binaries, ﬁnding no signiﬁcantly different results.
We did not encounter any overlapping or shared basic
blocks in either the SPEC or server tests on any compiler.
This is surprising, as these constructs are frequently cited
in the literature [5, 17, 23]. Closer inspection showed
that all the cited cases of overlapping blocks are due to
constructs which we classify more speciﬁcally, namely
overlapping instructions and multi-entry functions. These
constructs are exceedingly rare, and occur almost exclu-
sively in library code (discussed in Section 3.2.2). This
ﬁnding ﬁts with the examples seen in the literature, which
all stem from library code, most commonly glibc.
No overlapping instructions occur in Linux applica-
tion code, and only a handful in Windows code (with a
mean of zero, and a maximum of 3 and 10 instructions
for x86 and x64 Visual Studio, respectively). Multi-entry
functions are somewhat more common. All cases we
found consisted of functions with optional basic blocks
that can execute before the main function body, and ﬁnish
by jumping over the main function body prologue. Fig-
ure 4 lists such jumps as multi-entry jumps, and shows
USENIX Association  
25th USENIX Security Symposium  591
9
gcc-5.1.1 x86
gcc-5.1.1 x64
clang-3.7.0 x86
clang-3.7.0 x64
Visual Studio '15 x86
Visual Studio '15 x64
BB overlap
ins overlap
multi-entry jmps
multi-entry targets
tailcall jmps
tailcall targets
SPEC (C)
SPEC (C++)
)
n
a
e
m
c
i
r
t
e
m
o
e
g
(
s
e
s
a
c
l
x
e
p