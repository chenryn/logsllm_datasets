route					# 显示/操作IP路由表
ip route				# 显示/操纵路由，设备，策略路由和隧道
ip neigh				# 显示邻居表
```
**DNS**
```bash
cat /etc/resolv.conf	# 查看 DNS 解析配置文件
```
**arp 条目**
```bash
arp -e					# 以 Linux 的显示风格显示 arp 缓冲区中的条目
```
---
### 配置
**修改主机名**
```bash
vim /etc/hosts
127.0.0.1  test localhost		# 修改 localhost.localdomain 为 test,shutdown -r now 重启使修改生效
```
或
```bash
hostnamectl set-hostname test	# 修改 hostname 立即生效且重启也生效
```
**修改 DNS**
- 通用(一次性,重启失效)
	```vim
	vim /etc/resolv.conf
	nameserver 8.8.8.8
	```
- 通用(长期)
	```vim
	apt install -y resolvconf
	vim /etc/resolvconf/resolv.conf.d/head
	nameserver 8.8.8.8
	```
	```
	resolvconf -u
	```
- 如果可以 ping 通 ip，但 ping 不通域名, 那么有以下几种原因
	- 没有配置好 /etc/resolv.conf
	- /etc/nsswitch.conf 文件删除 DNS 解析记录
		```bash
		grep hosts /etc/nsswitch.conf
		# 一般只有 files host 如果没有就添加 host
		```
	- 上面2个都不行的话,就重启一下试试
**修改 IP**
 - Ubuntu
	```bash
	vim /etc/network/interfaces
	auto enp7s0	 				# 使用的网络接口
	iface enp7s0 inet static	# 静态 ip 设置
	address 10.0.208.222
	netmask 255.255.240.0
	gateway 10.0.208.1
	```
	```bash
	ip addr flush enp7s0
	systemctl restart networking.service
	systemctl restart NetworkManager
	systemctl enable NetworkManager
	```
- ubuntu 17.10 引入的新方式 netplan
	网卡信息配置在 /etc/netplan/01-network-manager-all.yaml 文件中，如果这个 yaml 文件不存在，可以使用以下的命令创建出来。
	```bash
	sudo netplan generate
	```
	创建出来的名字可能略有不同，但是 /etc/netplan/ 这个目录下面所有的 yaml 文件都可以生效。
	```bash
	vim /etc/netplan/01-network-manager-all.yaml
	```
	```yaml
		network:
			ethernets:
				ens33:
					addresses:
						- 192.168.2.222/24
					gateway4: 192.168.1.1
					nameservers:
							addresses:
								- 8.8.8.8
			version: 2
	```
	```bash
	netplan apply	# 使配置生效
	```
	> 注意 : ip 配置信息要使用 yaml 语法格式
- Centos
	```bash
	vim /etc/sysconfig/network-scripts/ifcfg-eth0	# 配置文件名称和网卡对应,可使用 ip a 查看所有网卡名称
	HOSTNAME=test
	onboot=yes			# 激活网络
	HWADDR=00:0C:29:F1:2E:7B
	BOOTPROTO=static	# 使用静态 IP,而不是由 DHCP 分配 IP
	# BOOTPROTO=dhcp 这个是 DHCP 的配置,如果配这个那下面的就不需要配置了
	IPADDR=172.16.102.61
	PREFIX=24
	GATEWAY=172.16.102.254
	DNS1=223.5.5.5
	```
	```bash
	service network restart
	systemctl restart NetworkManager.service
	systemctl restart NetworkManager	# 重启网络管理
	systemctl enable NetworkManager
	```
- Arch
	```bash
	ifconfig -a			# 查看下可用的网卡
	ifconfig eth0 up	# 启动网卡
	dhcpcd  eth0		# 获取 ip
	```
	```vim
	vim /etc/rc.conf
	interface=eth0
	eth0="dhcp"
	lo="lo 127.0.0.1"
	eth0="eth0 192.168.0.2 netmask 255.255.255.0 broadcast 192.168.0.255"
	INTERFACES=(eth0)
	gateway="default gw 192.168.0.1"
	ROUTES=(gateway)
	```
	```bash
	/etc/rc.d/network restart
	```
**配置 DHCP**
- Ubuntu
	```bash
	iface enp7s0 inet dhcp		# dhcp 配置
	```
**ethtool**
`ethool 是一个实用的工具，用来给系统管理员以大量的控制网络接口的操作。`
```bash
ethtool eth0		# 显示关于该网卡的基本设置
ethtool -i eth0		# 查询该网卡的驱动相关信息
ethtool -d eth0		# 查询 eth0 网口注册性信息
ethtool -S eth0		# 查询网口收发包统计
ethtool -s eth0 speed 100 autoneg off	# -s 选项可以修改网卡配置
# 以上命令将 eth0 网卡的自协商传输模式关闭，传输速率改为 100Mb/s。命令执行后需要重新启动 eth0 网卡：
ifup eth0
# 通过以上命令修改网卡配置，在机器重启后配置将不再生效
```
**设置包转发**
在 CentOS 中默认的内核配置已经包含了路由功能，但默认并没有在系统启动时启用此功能。开启 Linux 的路由功能可以通过调整内核的网络参数来实现。要配置和调整内核参数可以使用 sysctl 命令
```bash
sysctl -w net.ipv4.ip_forward=1
```
这样设置之后，当前系统就能实现包转发，但下次启动计算机时将失效。为了使在下次启动计算机时仍然有效，需要将下面的行写入配置文件 /etc/sysctl.conf
```diff
vim /etc/sysctl.conf
++ net.ipv4.ip_forward = 1
```
**修改路由**
```bash
route	# 查看路由表
# 添加到主机的路由
route add -host 192.168.1.2 dev eth0
route add -host 10.20.30.148 gw 10.20.30.40
# 添加到网络的路由
route add -net 10.20.30.40 netmask 255.255.255.248 eth0
route add -net 10.20.30.48 netmask 255.255.255.248 gw 10.20.30.41
route add -net 192.168.1.0/24 eth1
# 添加默认路由
route add default gw 192.168.1.1
# 删除路由
route del -host 192.168.1.2 dev eth0:0
route del -host 10.20.30.148 gw 10.20.30.40
route del -net 192.168.1.0/24 eth1
route del default gw 192.168.1.1
```
---
### 抓包
**tcpdump**
```bash
# Debian安装
apt install -y tcpdump
# Redhat安装
yum install -y tcpdump
# 当我们在没用任何选项的情况下运行 tcpdump 命令时,它将捕获所有接口上的数据包
tcpdump -i {接口名}	# 指定接口
# 假设我们想从特定接口(如 enp0s3)捕获 12 个数据包
tcpdump -i enp0s3 -c 12
# 使用 -D 选项显示 tcpdump 命令的所有可用接口
tcpdump -D
# 默认情况下,在 tcpdump 命令输出中,不显示可读性好的时间戳,如果你想将可读性好的时间戳与每个捕获的数据包相关联,那么使用 -tttt 选项,示例如下所示
tcpdump -i enp0s3 -c 12 -tttt
# 使用 tcpdump 命令中的 -w 选项将捕获的 TCP/IP 数据包保存到一个文件中
tcpdump -i enp0s3 -c 12 -tttt -w test.pcap	# 注意:文件扩展名必须为 .pcap
# 捕获并保存大小大于 N 字节的数据包.
tcpdump -i enp0s3 -c 12 -tttt -w test.pcap greater 1024
# 捕获并保存大小小于 N 字节的数据包.
tcpdump -i enp0s3 -c 12 -tttt -w test.pcap less 1024
# 使用选项 -r 从文件中读取这些数据包
tcpdump -r test.pcap -tttt
# 只捕获特定接口上的 IP 地址数据包
tcpdump -i enp0s3 -n
# 使用 tcp 选项来只捕获 TCP 数据包
tcpdump -i enp0s3 tcp
# 从特定接口 enp0s3 上的特定端口(例如 22)捕获数据包
tcpdump -i enp0s3 port 22
# 使用 src 关键字后跟 IP 地址,捕获来自特定来源 IP 的数据包
tcpdump -i enp0s3 -n src 1.1.1.1
# 捕获来自特定目的 IP 的数据包
tcpdump -i enp0s3 -n dst 1.1.1.1
# 假设我想捕获两台主机 169.144.0.1 和 169.144.0.20 之间的 TCP 数据包
tcpdump -w test2.pcap -i enp0s3 tcp and \(host 169.144.0.1 or host 169.144.0.20\)
# 只捕获两台主机之间的 SSH 数据包流
tcpdump -w test3.pcap -i enp0s3 src 169.144.0.1 and port 22 and dst 169.144.0.20 and port 22
# 使用 tcpdump 命令,以 ASCII 和十六进制格式捕获 TCP/IP 数据包
tcpdump -c 10 -A -i enp0s3
```
---
### 传输-下载
**scp**
```bash
scp /home/space/music/1.mp3 root@192.168.1.1:/home/root/others/music	# 本地文件复制到远程
scp root@192.168.1.1:/home/root/others/music /home/space/music/1.mp3	# 远程文件复制到本地
scp -r 		# 文件夹传输
	scp -r /home/space/music/ root@192.168.1.1:/home/root/others/	# 将本地 music 目录复制到远程 others 目录下
```
**lrzsz**
```bash
yum install -y lrzsz
sz xxx		# 将选定的文件发送(send)到本地机器
rz 			# 运行该命令会弹出一个文件选择窗口,从本地选择文件上传到服务器(receive),需要远程软件支持
```
**wget**
```bash
# 用于下载文件的工具
wget [options] [target]
# e.g.
wget example.com/big.file.iso								# 下载目标文件
wget -O filename.html example.com							# 另行命名
wget -c example.com/big.file.iso							# 恢复之前的下载
wget -i list.txt											# 下载文件中的 url
wget -r example.com											# 递归下载
wget --no-check-certificate									# 不检查 https 证书
wget ftp://user:password@host:/path-to-file/file.txt		# ftp 下载
wget -br ftp://user:password@ftp-host:/path-for-download/	# 递归下载 ftp 目录下文件
```
**curl**
```bash
curl -o wordpress.zip https://wordpress.org/latest.zip		# 另行命名
curl -C - O https://wordpress.org/latest.zip				# 恢复之前的下载
```
**Aria2**
```bash
aria2c http://releases.ubuntu.com/18.10/ubuntu-18.10-desktop-amd64.iso.torrent		# 下载磁力链接
aria2c -i downloadurls.txt									# 下载文件中的 url
aria2c -c http://releases.ubuntu.com/18.10/ubuntu-18.10-desktop-amd64.iso.torrent	# 恢复之前的下载
aria2c -max-download-limit=100K http://releases.ubuntu.com/disco/ubuntu-19.04-desktop-amd64.iso.torrent		# 设置最大速度限制
```
#### bt
- Transmission
- rtorrent
- **[peerflix](https://github.com/mafintosh/peerflix)**
	```bash
	npm install -g peerflix
	peerflix "magnet:?xt=urn:btih:ef330b39f4801d25b4245212e75a38634bfc856e"
	```
- **[tget](https://github.com/jeffjose/tget)**
	```bash
	npm install -g t-get
	tget 'magnet:?xt=urn:btih:0403fb4728bd788fbcb67e87d6feb241ef38c75a'
	```
---
#### 远程访问
**ssh**
```bash
ssh [options] 
	e.g. : ssh 127.0.0.1
	ssh -V	# 识别 SSH 客户端版本
	ssh-v	# 调试 ssh 会话
```
---
### Firewall
#### Firewalld
```bash
firewall-cmd --zone=public --add-port=12345/tcp --permanent		# 开放端口
firewall-cmd --zone=public --add-service=http --permanent		# 开放服务
firewall-cmd --zone=public --add-rich-rule 'rule family="ipv4" source address="192.168.1.10" accept' --permanent						# 允许192.168.1.10所有访问所有端口
firewall-cmd --zone=public --add-rich-rule 'rule family="ipv4" source address="192.168.1.10" port port=22 protocol=tcp reject' --permanent	# 拒绝192.168.1.10所有访问TCP协议的22端口
firewall-cmd --reload			# 重新加载
firewall-cmd --list-services	# 查看防火墙设置
systemctl status firewalld		# 查看服务运行状态
systemctl start firewalld		# 开启服务
systemctl stop firewalld		# 关闭服务
```
**更多配置**
见 [Firewall.md](./实验/Firewall.md)
#### Iptables
```bash
iptables-save > /root/firewall_rules.backup		# 备份策略
iptables -L			# 查看防火墙规则
iptables-restore </root/firewall_rules.backup	# 恢复规则
# 以下为清除所有策略并允许所有流量通过防火墙。这和你停止防火墙效果一样,生产环境请不要使用
iptables -F  		# 清除防火墙配置
iptables -X
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
```
**更多配置**
见 [Iptables.md](./实验/Iptables.md)