Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
V. IMPLEMENTATION
A. Compatibility
TrustGraph is built on top of an existing graphics and
windowing software to avoid the redundant effort to code the
basic graphics functionality. Although X is the default graph-
ics software in the Linux operating system, it was not chosen
for this purpose due to its large code base, complex design,
and inefﬁciencies. Instead, we have modiﬁed DirectFB to
build TrustGraph. DirectFB is simple and lightweight and
it has small overhead. Hence, it is often used in embedded
systems. Unlike X, it does not use the client-server model
which adds to the complexity of the graphics software. By
choosing a simple base graphics system, we adhere to our
ﬁrst design principle: simplicity.
TrustGraph is implemented by modifying DirectFB ver-
sion 1.2.0. The code size of DirectFB is about 40,000 LOC
(lines of code) with a default window manager of about
3,800 LOC. This is signiﬁcantly smaller than X’s 1,837,000
LOC. The entire implementation of TrustGraph requires less
than 3,000 LOC of fresh code and modiﬁcation.
labeling,
To implement
the following resources are
augmented with security labels:
IDirectFB-
DataBuffer, IDirectFBWindow, IDirectFBSurface, and IDi-
rectFBEventBuffer. Each label comprises an integer security
level in the range of [0, 255] and a set of up to ﬁve different
categories from the set {c0, c1, ..., c255}.
IDirectFB,
All of the resource creation and acquisition methods
are modiﬁed to propagate and check the labels. The input
grabbing methods are also modiﬁed to ensure focus be-
fore redirecting input events to a window. These methods
are part of the default window manager. The wm grab
method of the default window manager handles all input
grabbing requests. CJP is also implemented by modifying
the wm request focus method.
For secure copy-pasting, the ClipboardData structure is
augmented with a security label. In addition, two methods
of the main interface have been modiﬁed to enforce the
security policy. The SetClipboardData method is modiﬁed
to set the security tag of the ClipboardData to that of the
main interface that perform a “copy.” The GetClipboardData
method is also modiﬁed to provide the ClipboardData to any
dominating security label and deny any other request.
Screenshots are handled in the input module of Di-
rectFB. Whenever the PrintScreen key of the keyboard
is pressed on any window, the input module ﬁlters that
event and dumps the display by calling the function
dump primary layer surface. In order to secure screen-
shots, this function is modiﬁed to zerioze the pixel data of
non-dominated windows.
strict
ordering,
the
the window manager,
wm add window,
and
wm remove window, are modiﬁed. Events on the windows
call one of these functions to change the window ordering.
three main functions of
wm restack window,
security-label-based
To
implement
TrustGraph provides backward compatibility with the X
applications using the XDirectFB library. This library en-
ables the applications developed for X to run seamlessly over
DirectFB or TrustGraph. It is also possible to develop native
applications or to port the existing X applications to use
the TrustGraph (DirectFB) API directly. Many applications
have already been ported to the DirectFB API, including
Mozilla[2].
B. End-to-End Implementation
As a proof of concept, we have implemented an end-to-
end virtualized architecture using TrustGraph. We have used
Xen [7] and sHype [33] as the hypervisor and the mandatory
access control (MAC) module. Xen’s access control module
(ACM) is in fact an implementation of IBM’s sHype and
it supports type enforcement and Chinese wall security
policies.
In this architecture, TrustGraph runs in the privileged
partition (dom0) of Xen and any graphical request by the
virtual machines are sent to dom0 via hyper calls (see ﬁgure
2). We have modiﬁed sHype security labels to carry the MLS
labels (i.e. a level and a set of categories.) In our current
implementation, the MLS security policy is enforced inside
TrustGraph. However, it is also possible for the graphics
subsystem to ask the hypervisor’s ACM for the access
decisions. Note that we do not know whether Xen provides
strong isolation and non-interference between the virtual
machines or not and these properties are yet to be proven.
It is used in our implementation just as a proof of concept.
For the end-to-end implementation, we have used Xen
3.3.1 with XSM and ACM (sHype) features turned on.
Fedora 10 is used in dom0 and the virtual machines (dom1)
run Fedora 8.
VI. EVALUATION AND FORMAL METHODS
To evaluate the implementation of TrustGraph, we have
performed different levels of testing. First, we have tested
the functionality of TrustGraph through a number of appli-
cations. Then we have implemented a number of successful
attacks on vanilla DirectFB based on the threat model. We
show that these or similar attacks are prevented in Trust-
Graph. For the most critical parts of the implementation, i.e.
label ﬂow logic and the window manager ordering logic,
we have used formal methods techniques to model check
the implementation. Finally, an analysis of the possible
covert channels on top of TrustGraph is presented and their
capacities are estimated and then reduced using the concept
of fuzzy time.
A. Functionality Testing
Testing the functionality of TrustGraph is done by devel-
oping a number of native applications. These applications
test different modules and functionalities of TrustGraph.
260
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
Three applications have been developed to test window-
ing, input handling, and image/video loading. The windowed
application checks the window manager, correct window
ordering, and window insertion and re-stacking. The in-
put handling application tests the input grabbing methods
and input redirection. Finally, the last application tests the
data buffer and the successful loading of image and video
modules. The functionality tests have been performed on
a Fedora 10 workstation (kernel version 2.6.27.9) with an
Nvidia Quadro FX 570M video card. X has been disabled
for all the tests.
B. Attack Evaluation
To show the types of attacks possible under a graph-
ics subsystem which are blocked by TrustGraph, we have
implemented three sample attacks. Note that these are not
ad-hoc attacks; they are designed in a bottom-up approach
based on the threat model discussed in section III. In
fact, the reader can easily design and implement similar
attack under DirectFB or X. The attacks are not indicative
of implementation problems of any graphics subsystem.
These graphics subsystems, in their vanilla form, were not
designed, nor should they be used for trusted systems. On
the other hand, the attacks show the necessity of a secure
graphics subsystem and how it can block the security policy
violations.
Three attacks have been implemented to test TrustGraph.
In the ﬁrst attack, two applications conspire to communicate
in the violation of the security policy. One application
acquires an interface to the window of another application
by enumerating all the windows on the display and retrieving
an interface to its layer. It then dumps the surface regularly
for the new messages and writes its messages back on the
surface. The other application can communicate with the ﬁrst
one by simply reading and writing to its surface. The system
has no control over this channel and the two applications can
easily communicate.
In the second attack, a window attaches to the event buffer
of another window, reads and removes some of the events,
and puts a number of false events back to the event buffer.
This violates both the conﬁdentiality and the integrity of the
other window.
In the third attack, the attacker grabs the speciﬁc key
events (e.g. the function keys F1-F12 or the escape key)
regardless of the focus. Whenever these keys are pressed on
the victim window, they are redirected to the attacker. Since
the speciﬁc operations of the victim application are bound
to these key presses, the attacker can infer those operations
whenever it receives the key press events.
The attacks are successful under vanilla DirectFB. Sim-
ilar attacks can be designed and implemented under X.
TrustGraph, however, stops these attacks. The ﬁrst and
second attacks are stopped when the ﬁrst application gets the
interface while the third attack is blocked when the attacker
grabs the keys.
In fact, while implementing the functionality testing pro-
grams, an accidental bug was introduced to the windowed
application where a window was trying to get a higher level
surface. We observed an abnormal behavior when one of the
windows failed to start. Finally, by inspecting the log, we
realized that TrustGraph successfully detected and prevented
the buggy assignment.
C. Formal Veriﬁcation
Formal method techniques are used to verify some of the
more critical parts of the TrustGraph implementation such
as the label ﬂow logic and the window manager ordering
logic. We have used ACL2 to describe and model check the
correctness of those parts.
1) ACL2: ACL2 (A Computational Logic for Applicative
Common Lisp) [23] is an automated reasoning system
consisting of a language and a mechanical theorem prover.
It is the “industrial strength” successor to the Boyer-Moore
theorem prover [22]. Both the ACL2 language and its
implementation is built using the side-effect free version of
Common Lisp [37].
In common Lisp everything including the code and the
data is a list. The lists hold data such as integers, lists,
fractions, or characters. For instance, (120) is an integer,
(1 2 3 6) is a list of integers, (a) is a character, and (1/6) is
a fraction, all represented as lists. The code is also written
using lists, usually with the ﬁrst element representing the
operator or function name and the rest of the elements
representing the arguments. For instance, (if x y z) is
equivalent to “if x then y else z”, or (car (x y z)) represent
the ﬁrst element of (x y z) which is x.
When using ACL2, ﬁrst
the operation or the model
is described using this syntax and a number of function
deﬁnitions (defun.) Then, we describe a number of theorems
(defthm) that ACL2 tool tries to prove about that operation
or model. The ACL2 theorem prover then tries to prove the
theorem using some basic axioms that it has in its libraries
and by breaking it into some smaller theorems (subgoals.)
Upon successful proof of the theorem, ACL2 outputs the list
of rules and axioms it used to prove that theorem. ACL2
theorem prover is sound, but incomplete. As a result, if it
proves a theorem, the theorem is always true, but if it fails
to prove it, the theorem might be true or false. Detailed
description of how ACL2 works or how to check models
with ACL2 is beyond the scope of this paper. The readers
may refer to the ACL2 book [23] for more information.
2) Formal Veriﬁcation of TrustGraph: To check the cor-
rectness of the logic implemented in the TrustGraph window
manager and the label ﬂows, we have performed model
checking on them using ACL2. Note that verifying the entire
implementation of a graphics subsystem is very difﬁcult if
not impossible due to its large size. Hence, we chose to
261
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
model check the most critical components of TrustGraph
upon which the entire security is dependent.
First, we verify the label ﬂow logic. Four main methods
are modeled: acquiring window, surface, event buffer, and
setting the window level. Some of the ACL2 scripts are
provided in appendix A. Each method behaves as described
in its ACL2 model. If the acquirer has a declassiﬁcation label
that dominates the resource’s permanent label, it is allowed
to acquire the resource. When acquired, both labels of the
acquirer is propagated to the resource.
To prove the correctness of label ﬂow, we deﬁne four
ACL2 theorems. The ﬁrst theorem ensures that no applica-
tion can acquire a window if it does not have a dominating
label. The second theorem proves a similar property for
windows and surfaces. The third theorem ensures that no
window can attach to a higher security event buffer. Finally,
the fourth theorem consider the combined effect; i.e. an
application cannot access a higher security event buffer
through another window interface. We also model and prove
the correctness of the logic of window ordering in the
window manager.
Using the model, ACL2 messages, and proof sub goals,
we were actually able to ﬁnd a number of ﬂaws in the initial
implementation of TrustGraph. First, a security tag can never
be NULL. This bug was found when ACL2 failed to prove
the label propagation theorems and the output showed that
no assumption can be made about “(CONSP label)”. In
the ACL2 context, the “CONSP” predicate means that the
both elements of a label (the permanent and declassiﬁcation
labels) always exist and are not NULL. To ﬁx this bug, the
NULL condition is checked after any creation or acquisition
just in case a component fails to set a label as a result of
an unpredictable condition.
Also the initial condition of the window manager was
not secure. ACL2 messages showed that although adding
and restacking functions preserve the correct ordering, there
is no guarantee that if we start with a window stack, the
ordering is correct initially. Additional checks were put in
place to guarantee that when the graphics subsystem starts,
the windows are in the correct order.
Finally, another ﬂaw was that there was a type mismatch
for some of the security labels. This bug was found when
ACL2 failed to prove the label propagation theorems because
no assumption could be made about
the type of each
label (e.g. INTEGERP or CHAR-P predicates of ACL2
corresponding to labels being integer or characters.) This
is because if the labels have mismatching types, the com-
parison cannot be made. For the system to operate correctly,
all labels must be type consistent. As an example, if a byte
representing the MLS level is unsigned in some portions
of the code and signed in other places, it can result in a
security breach. A main interface with a signed char level
of 120 actually gets access to a resource with an unsigned
char level of 251 because when the comparison operator
is used, the resource level is interpreted as -5. All security
levels in TrustGraph are implemented as unsigned chars.
Each security compartments is also an unsigned char and
each resource can have a set of up to ﬁve different categories.
After correcting the ﬂaws, ACL2 was able to prove the
label ﬂow theorems using 29 axioms and rules and by
breaking them into 15 sub-goals. The window ordering
theorem was also proved by ACL2 using 17 rules and 30
sub-goals. Note that the scripts in the appendix are the
corrected versions.
D. Covert Channel Analysis
Covert channel attacks [29] can pose a threat
to the
security of high-assurance systems by using the shared
resources in a way not intended in their design to leak
information and violate the security policy. It is often very
difﬁcult, if not impossible, to eliminate or even enumerate all
possible covert channels in a system. The best current rec-
ommendations for dealing with covert channels are speciﬁed
by the TCSEC [3] and its successor the Common Criteria [5]
evaluation schemes. In these schemes it is recommended that
ﬁrst the channel capacities of the possible covert channels
are estimated. Then, using some mitigation techniques, the
channel capacity must be reduced to an acceptable level
(usually 100 bits/sec is considered acceptable.)
We are interested in the covert channel attacks that use
the dynamics of the graphics subsystem to communicate
information. Such channels use the graphics methods to