of the RR ﬁeld, we may not observe the merging router. In obtain-
ing these results, we omitted R/PL and R/PL+S datasets since we
typically only observe a small number of hops past R, making it
rarer to observe complete diamonds. In PL/PL cases when we do
not observe the merge, we assume that the next (unrecorded) hop
would be the merging router. While this likely results in an under-
estimation of the diamond lengths, the small number of such cases
has a negligible effect on the overall outcome.
As shown in Table 5, diamonds where the forking and merging
routers belong to the same AS have an average length of 2.5 nodes.
This result roughly coincides with the average diamond length of
load-balanced paths studied by Augustin et al. [3]. In contrast, di-
amonds induced by AS forks are roughly twice as long on average.
When a path diverges at the AS level, it will usually traverse mul-
tiple nodes inside this AS before exiting to another AS where it
could reconverge with the path traversed by the control probe.
4. CASE STUDIES
In Section 1 we brieﬂy discussed a routing violation we found
with our measurements (see Figure 1).
In the example, the tar-
geted IP is not globally routable. Normally, it only carries MPLS-
encapsulated packets and local network management trafﬁc. Be-
cause it normally only forwards trafﬁc based on MPLS labels, it
3If the two forks have different lengths we use the smaller value.
does not carry a full IP routing table. Instead, it has a default route
pointing to the University of Texas System (THENet) that sufﬁces
to carry management trafﬁc back to the network operators. In our
case, a record route probe from a PlanetLab node at the University
of Texas, Arlington (UTA), uncovered the router. Even though the
IP was not globally routable, routes to it exist from the University
of Texas system, and so our test probe from UTA reached the IP.
However, the UTA node spoofed the test probe to claim it came
from a different PlanetLab site. The target, lacking a non-default
route to this other site, responded to the test probe via its default
route. Despite the fact that the control and test probes visit com-
pletely different ASes, they do travel via similar locations. More
concretely, in this example all probes follow routes via Arlington,
Dallas, Houston and Los Angeles before leaving the RR scope.
There are other cases in our dataset showing similar behavior and
we omit presenting them separately here.
However, many violations are hard to classify if no load balanc-
ing or MPLS labels are observed. This is especially true in cases
where we have no corresponding traceroute data available for the
measured path, i.e. when we analyze reverse paths. For example,
below we describe a violation observed in the R/PL set. The control
probes always observed the following hops:
1 dinet-gw.spb.citytelecom.ru
2 te4-1-20-adelaida.spb.cloud-ix.net
3 runnet-gw.msk.citytelecom.ru
4 msk-1-gw.runnet.ru
5 CORE-VL42.radio-msu.net
In contrast, the test probe response traversed a different path:
1 dinet-gw.spb.citytelecom.ru
2 * (vsevnet.ru)
3 border.vsevnet.ru
4 CORE-VL42.radio-msu.net
The paths fork in an AS in St. Petersburg, Russia and merge in a
different AS in Moscow, but observe different intermediate ASes.
Based on the measurements, we can only rule out load balancing as
a possible cause for the violation. However, we cannot determine
whether the point of injection or the different source address of the
test probe traversing the reverse path is causing the forking router
to forward the probes to different next hops.
5.
IMPACT OF VIOLATIONS
In this section we discuss the possible impact of routing viola-
tions on two existing systems: Doubletree and reverse traceroute.
Impact on Doubletree: Doubletree reduces probing overhead
in large-scale distributed traceroute measurements by stopping prob-
ing a path once it reaches a hop already observed on the path from
another monitor to the destination [6]. Consequently, forking paths
are not explored and remain invisible to the system (Figure 5).
To quantify the impact, we issued Paris traceroutes from over
170 PlanetLab nodes to 200 randomly chosen destinations.4 In to-
tal, we acquired 30,911 traceroutes.
We found that 22,582 of these (73.1%) include at least one load
balancing node. This differs from results by Augustin et al. who
found that only 39% of their recorded traces contain a load bal-
ancer [3]. Since their study was published in 2007, we suspect that,
4We executed multiple trials with different destination sets to en-
sure that the results are not biased by the number of destinations se-
lected. We synchronized the probing mechanism, such that tracer-
outes for the same destination were issued within a time frame of
ﬁve minutes on all PlanetLab nodes, thus minimizing the probabil-
ity of route changes.
269Figure 5: Scenario where Doubletree output deviates from the
ground truth. Both paths from S1 (blue edges) and S2 (red
edges) visit the common hop A. If Doubletree already observed
the path A → B → D it would not ﬁnd the edge from A to C
since the probing algorithm stops at the common node.
as part of the evolution of the Internet, more ASes have started to
incorporate load balancing mechanisms into their topologies. This
number is also larger than the results shown in Table 3. This dis-
crepancy likely stems from the fact that traceroute provides data
about all hops on a path, whereas RR has a 9 hop limit (see discus-
sion of Table 3 in Section 3).
Of our recorded traces, 2997 (9.7%) visit a node with a vio-
lation unexplained by load balancing. Furthermore, 1260 traces
(4.1%) encounter a node where traces towards the same destination
forked into different ASes. These numbers are qualitatively con-
sistent with Table 3. In that table, a little over 11% of the traces
contained violations not explained by load balancing, with default
routing and unknown causes usually resulting in AS forks.
We then determined the number of links that Doubletree would
miss. Out of 49,272 observed links in the data, Doubletree would
miss 11,222 links (22.8%) as a result of load balancers splitting
trafﬁc across multiple next hops. Furthermore, 601 links (1.2%)
would remain unobserved due to other violations, with 150 unob-
served links (0.3%) related to AS forks. Doubletree was shown to
be unable to observe about 18% of links in an experiments [6]; our
results are consistent with that number, but give some insight into
the causes of unobserved links.
Impact on reverse traceroute: Reverse traceroute assumes
forwarding is destination-based in order to incrementally piece to-
gether a path [10]. All the violations quantiﬁed in Section 3 would
impact the accuracy of that technique; in particular, the statistics
on diamond lengths give us a feel for the degree to which reverse
traceroute can be affected.
Possible solutions: Both systems could employ Paris traceroute-
like techniques to identify and incorporate load-balanced paths.
However, Doubletree aims to reduce the number of probes required
to establish a topology. Since Paris traceroute probes a node many
times to ensure that all load balancing paths are explored, incorpo-
rating this technique to Doubletree would result in a signiﬁcantly
larger number of probes required to ﬁnd the currently missing links.
Thus, it is less clear how Doubletree should balance the tension be-
tween completeness and overhead reduction.
Additionally, systems could use the techniques in this paper to
generate blacklists of violation candidates along a path, at the ex-
pense of additional probing overhead. Upon encountering these
hops, systems could issue additional measurements to improve con-
ﬁdence in a result or ﬂag it as suspect. For example, reverse tracer-
oute could send additional spoofed RR pings, as described above,
to ﬁnd hops employing default routing that would otherwise dis-
tort results. Upon encountering these hops, reverse traceroute can
easily adapt its IP timestamp-based technique to verify that hops
discovered by its RR probes actually appear along the end-to-end
path and not just on a default route. Similarly, in cases where an RR
ping yields multiple reverse hops, reverse traceroute can then target
each of those hops to check for consistent routes, as we did in this
paper. Using a week of data from a reverse traceroute deployment
monitoring routing failures [11], we analyzed probes sent for over
33,000 router-destination pairs. We found that 75% of them in-
cluded multiple reverse hops, thus enabling the consistency check
described above.
6. RELATED WORK
Systems such as reverse traceroute [10], Doubletree [6], and
iPlane [15] assume destination-based forwarding. Other studies
also make this assumption [2, 13, 16], but we omitted a detailed
discussion of these due to space considerations.
Prior studies analyzed the prevalence of load balancing and MPLS
deployments in the Internet. Augustin et al. describe measurements
from ﬁfteen RON nodes to over 68,000 destinations using Paris
traceroute [3]. Their 2007 study found that about 39% of the paths
between source-destination pairs contain at least one ﬂow-based
load balancer. In contrast, we have designed a generic mechanism
to detect violations to destination based forwarding and demon-
strate the existence of a non-trivial proportion of AS forks.
Using data from the CAIDA Archipelago project [1], Sommers
et al. were able to detect MPLS tunnels based on traceroute data [18].
Besides extracting MPLS stacks from traceroute data, they inferred
probable tunnels by comparing latency differences between con-
secutive hops. Their results indicate that about 25% of all paths
in 2011 contained at least one tunnel. While their MPLS detec-
tion techniques are more advanced than ours, we did not incorpo-
rate their methodology due to the high number of false positives.
Furthermore, our focus was on detecting violations to destination-
based forwarding, and we use a different probing methodology be-
cause, as we have discussed above, not all MPLS tunnels trigger
these violations.
Recently Donnet et al. demonstrated additional mechanisms to
detect MPLS tunnels [5].
In their study they propose inference
techniques for non-explicit tunnels based on using TTL signatures
from traceroute and ping measurements. Incorporating their meth-
ods into our analysis would likely help to attribute some of the un-
classiﬁed violations to non-explicit MPLS tunnels, and we leave
this to future work.
7. CONCLUSION
We designed a probing methodology to uncover violations of
destination-based forwarding. Our measurements reveal that an
unexpectedly signiﬁcant fraction of these violations cause forked
paths to traverse different ASes as compared to the original path:
4.4% of targeted ASes and about 10.2% of paths exhibit such be-
havior. In general, these violations impact the accuracy of systems
like Doubletree and reverse traceroute; the former can miss 22%
of the links as a result of these violations. Finally, while it is con-
ceptually easy to mitigate the impact of these violations in reverse
traceroute by incorporating some of our mechanisms, it is less clear
how to do so in Doubletree in a manner that also achieves one of
that system’s objectives, reducing probing overhead.
Acknowledgments
We would like to thank our shepherd, Peter Steenkiste, and the
anonymous referees for their helpful comments on earlier versions
of the paper. In addition we thank Byron Hicks from the Lones-
tar Education and Research Network (LEARN) for his insight on
the causes of violations observed in his network. This work was
funded in part by Google, Cisco, and the NSF (CNS-0121778 and
CNS-0905568).
2708. REFERENCES
[1] Archipelago IPv4 Routed /24 AS Links Dataset.
http://www.caida.org/data/active/ipv4_
routed_topology_aslinks_dataset.xml.
[2] B. Armbruster, J. C. Smith, and K. Park. A Packet Filter
Placement Problem with Application to Defense Against
Spoofed Denial of Service Attacks. European Journal of
Operational Research, 176(2):1283–1292, 2007.
[3] B. Augustin, T. Friedman, and R. Teixeira. Measuring
Load-balanced Paths in the Internet. In IMC, 2007.
[4] B. Augustin, T. Friedman, and R. Teixeira. Multipath tracing
with Paris traceroute. In E2EMON, 2007.
[5] B. Donnet, M. Luckie, P. Mérindol, and J.-J. Pansiot.
Revealing MPLS tunnels obscured from traceroute.
SIGCOMM Computer Communication Review, 42(2):87–93,
2012.
[6] B. Donnet, P. Raoult, T. Friedman, and M. Crovella.
Deployment of an Algorithm for Large-Scale Topology
Discovery. IEEE Journal on Selected Areas in
Communications, 24(12):2210–2220, 2006.
[7] R. Govindan and V. Paxson. Estimating router ICMP
generation delays. In PAM, 2002.
[8] Internet Engineering Task Force. RFC 1812: Requirements
for IP Version 4 Routers, June 1995.
[9] E. Katz-Bassett. Systems for Improving Internet Availability
and Performance. PhD thesis, University of Washington,
2012.
[10] E. Katz-Bassett, H. V. Madhyastha, V. K. Adhikari, C. Scott,
J. Sherry, P. van Wesep, T. E. Anderson, and
A. Krishnamurthy. Reverse Traceroute. In NSDI, 2010.
[11] E. Katz-Bassett, C. Scott, D. R. Choffnes, I. Cunha,
V. Valancius, N. Feamster, H. V. Madhyastha, T. E.
Anderson, and A. Krishnamurthy. LIFEGUARD: Practical
repair of persistent route failures. In SIGCOMM, 2012.
[12] K. Keys, Y. Hyun, M. Luckie, and K. Claffy. Internet-Scale
IPv4 Alias Resolution with MIDAR: System Architecture -
Technical Report. Technical report, Cooperative Association
for Internet Data Analysis (CAIDA), May 2011.
[13] A. Kvalbein, A. F. Hansen, T. ˇCiˇcic, S. Gjessing, and
O. Lysne. Multiple routing conﬁgurations for fast IP network
recovery. IEEE/ACM Transactions on Networking,
17(2):473–486, April 2009.
[14] Lonestar Education and Research Network (Austin, Texas):
Private communication.
[15] H. V. Madhyastha, T. Isdal, M. Piatek, C. Dixon, T. E.
Anderson, A. Krishnamurthy, and A. Venkataramani. iPlane:
An Information Plane for Distributed Services. In OSDI,
2006.
[16] A. Riedl and D. A. Schupke. Routing Optimization in IP
networks Utilizing Additive and Concave Link Metrics.
IEEE/ACM Transactions on Networking, 15(5):1136–1148,
October 2007.
[17] R. Sherwood, A. Bender, and N. Spring. Discarte: A
Disjunctive Internet Cartographer. In SIGCOMM, 2008.
[18] J. Sommers, P. Barford, and B. Eriksson. On the Prevalence
and Characteristics of MPLS Deployments in the Open
Internet. In IMC, 2011.
[19] UCLA Internet Topology Collection.
http://irl.cs.ucla.edu/topology/.
271