### Authorized Use and Download Information
This document is authorized for licensed use limited to Tsinghua University. It was downloaded on March 20, 2021, at 05:38:34 UTC from IEEE Xplore. Usage restrictions apply.

### DNSSEC: Challenges and Alternatives

DNSSEC (Domain Name System Security Extensions) aims to ensure the authenticity and integrity of DNS responses. For instance, DNS cache poisoning attacks, as we know them today, would be ineffective because forged responses can be identified and discarded. DNSSEC appears to be a comprehensive solution to the vulnerabilities of the DNS. However, despite being proposed in January 1997 [9], large-scale adoption and deployment have been slow. The reasons for this are multifaceted, involving both technological and "political" issues.

**Technological Challenges:**
- **NSEC Resource Record:** One of the main obstacles has been the use of NSEC resource records, which can allow zone enumeration, viewed by many as a security risk. This issue was recently addressed with the introduction of NSEC3 [15].
- **Key Management:** Key management for DNSSEC is also complex [14].

**Non-Technical Controversies:**
- **Root Nameserver Ownership:** A significant point of contention is the question of who owns the root nameservers. DNSSEC relies on a chain of trust that depends on signing zones and sub-zones, with the root nameservers being the primary anchor of trust. Different nations have different opinions on who should control these servers and thus be entitled to sign their zones.

Due to these unresolved issues, the deployment of DNSSEC remains limited to a few isolated islands of trust [21]. Given the uncertainty surrounding the widespread adoption of DNSSEC, several alternative techniques have been proposed to protect against brute-force poisoning attacks [7, 12, 5, 11, 20]. These techniques aim to increase the entropy of DNS queries to make forging a valid response more difficult.

### Alternative Techniques

**UDP Source Port Randomization:**
- **Mechanism:** Proposed and implemented by Bernstein in djbdns [4], this technique involves selecting the source UDP port for DNS queries at random.
- **Effectiveness:** This significantly increases the difficulty of poisoning attacks because the attacker must now guess both the transaction ID (TXID) and the correct UDP port.
- **Limitations:** However, this method may not be effective in certain practical scenarios, such as when resolvers are behind load balancers or firewalls that implement network address and port translation (NAT/PAT). These devices often reduce the randomness of the UDP source ports, making them more predictable [8].

**0x20-bit Encoding:**
- **Mechanism:** This technique uses a random combination of lower- and upper-case letters to write domain name queries.
- **Effectiveness:** It works independently of NAT/PAT and adds entropy to the query. However, the amount of additional entropy is a function of the length of the queried domain name. For short, popular domain names like hp.com, hi5.com, and cnn.com, the 0x20-bit encoding only adds 5 or 6 bits of entropy, which is not sufficient to make poisoning attacks infeasible [7].

**DNSCurve:**
- **Mechanism:** Proposed by Bernstein [5], DNSCurve uses high-speed elliptic-curve cryptography and simplifies key management.
- **Challenges:** The main criticism is the lack of detailed specifications and public implementations. While it seems superior to DNSSEC in terms of key management, DNSSEC is well-documented in several RFCs [1, 2, 3, 9] and has been implemented and tested by most DNS vendors.

**DNS Cookies:**
- **Mechanism:** Another technique proposed by Bernstein [6], which uses wildcards and TXT records to fetch signed IP addresses.
- **Comparison:** Our WSECDNS solution, discussed below, also uses wildcard and TXT records but in a different manner. We use TXT records to verify if a zone is WSEC-enabled and wildcard CNAME records for secure DNS resolution.

### Our Contribution: WSECDNS

In this paper, we propose Wildcard SECure (WSEC) DNS, a novel solution to brute-force DNS cache poisoning attacks. WSEC DNS leverages existing properties of the DNS protocol, specifically the definition of wildcard domain names in RFC 1034 [18] and RFC 4592 [17], and the use of TXT resource records [19].

**Key Features:**
- **Entropy Increase:** WSEC DNS prepends a random string to the queried domain names, significantly increasing the entropy of DNS queries.
- **Backward Compatibility:** DNS operators are not required to implement WSEC DNS, as it ensures complete backward compatibility with current nameserver configurations.
- **Security Benefits:** Recursive DNS (RDNS) resolvers that implement WSEC DNS will be protected from brute-force cache poisoning attacks, including Kaminsky’s attack [13].

**Configuration Requirements:**
- **TXT Records:** Add two TXT resource records to indicate whether WSEC queries are supported.
- **CNAME Records:** Introduce two CNAME records for each non-wildcard domain name in the zone.

By implementing these changes, WSEC DNS provides a practical and incremental approach to enhancing DNS security, making brute-force cache poisoning attacks infeasible.

### Background and Threat Model

A traditional brute-force DNS cache poisoning attack involves an attacker trying to poison the IP address of a domain, such as www.example.com. The attacker sends a query to the RDNS, forcing it to initiate a recursive query process. If the attacker can guess the TXID and source UDP port and send a spoofed response before the legitimate answer arrives, the attack will be successful. This results in the RDNS storing the attacker's IP address in the cache, redirecting all clients using that RDNS server to the attacker's malicious website.

**Kaminsky’s Attack:**
- **Mechanism:** Discovered by Dan Kaminsky, this attack allows an attacker to perform successful cache poisoning with minimal effort compared to traditional attacks.
- **Advantage:** If the initial attempt fails, the attacker can immediately retry without waiting for the TTL of the genuine cache entry to expire, greatly improving the probability of success.

### Conclusion

WSECDNS offers a practical and backward-compatible solution to protect against brute-force DNS cache poisoning attacks. By increasing the entropy of DNS queries and leveraging existing DNS properties, WSECDNS makes such attacks infeasible. Incremental deployment is possible due to its compatibility with current DNS configurations, making it a viable alternative to DNSSEC until wider adoption is achieved.