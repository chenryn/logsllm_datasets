ensure they are completely used
 Trailing data could be shell code
 Exceeding data could be the actual attack
 Place the container’s content into a new memory block
 CLR ensures boundaries
 Post parsing code ensures complete consumption
A defense approach
Only Parse Documented Data
 For the approach to work, all data must be parsed completely
 Simply copying byte arrays from the original file is dangerous, as it may 
contain the attack
 All input data must be checked thoroughly against the specification
 Are the correct format and fields for the declared version of the SWF file 
used?
 Are all reserved Bits clear?
 Are conditions declared for objects correct and make sense?
 Are all type fields using documented values?
A defense approach
AVM1 Code Verification
 Is the instruction legal within the declared SWF Version?
 Does the instruction have exactly the number of arguments 
specified?
 Is the declared instruction length correct and completely used?
 Does the code flow remain within the code block?
 Do all branches, try/catch/finally and all function declaration target 
addresses point to the beginning of an instruction?
 This is ensured using linear disassembly instead of code flow disassembly
 Do all instructions belong to exactly one function?
A defense approach
Countering Functional Attacks
 If done correctly and completely, the approach so far leaves 
you with a representation of a nice and tidy SWF file that you 
completely understand.
 Static analysis will provably not be able to determine what any 
given code is actually doing.
 Emulation will cause a state discrepancy between your 
emulation and the Flash player’s interpretation of the same 
code.
Introspective Code Behavior Verification
Patching the Point of Execution
 In runtime analysis, you verify the arguments to the final API 
call before the call is made.
 We are not part of the show when execution actually 
happens.
 But we can introduce AVM1 code before the final API call that 
inspects and verifies the arguments for us when executed.
Introspective Code Behavior Verification
Example: ActionGetURL2
 ActionGetURL2 is the most widely used action to forward 
browsers to potentially dangerous targets
 When we handle the Flash file, we know the origin of it
 We introduce a Same Origin Test before the actual 
ActionGetURL2 instruction is executed
Introspective Code Behavior Verification
What Should be Patched?
 According to Adobe*, this is:
 Functions and objects that accept URLs as strings
 Functions that display or accept HTML
 Which in fact are fields of the respective objects, but never mind.
 Functions that communicate with the web browser
 Functions for accessing FlashVars
 Functions for accessing shared objects
 Functions that make networking calls
 Additionally, we need to patch any undocumented voodoo, e.g. 
calls to ASNative
Introspective Code Behavior Verification
* http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps_13.html
How To Do Patching
 Blitzableiter features a full, if somewhat spartanian, AVM1 
assembler, so patches can be written in text files
 Supports all 100 documented AVM1 instructions
 Support for variable names to allow the patch to interface with 
the verification code
 Variables are used to store case-by-case information, e.g. the origin 
URL of the Flash file
 Variable names can be randomized in order to prevent the surrounding 
code from checking them
 This is the low level view of the patching
Introspective Code Behavior Verification
Determining What Method Is Called
 Method calls are implemented in AVM1 as a sequence of:
 Therefore, we need to check if we are
dealing with an instance of the object
first and then determine the method:
Introspective Code Behavior Verification
ActionConstantPool 0:'receiving_lc' [...] 8:'connect'
ActionPush [0]Const8:07 [1]UInt32:00000001 [2]Const8:00
ActionGetVariable
ActionPush [0]Const8:08
ActionCallMethod
ActionStackSwap
ActionPushDuplicate
ActionPush String:OBJECTTYPE
ActionGetVariable
ActionInstanceOf
ActionNot
ActionIf ExitPatch:
ActionStackSwap
ActionPushDuplicate
ActionPush String:connect
ActionStringEquals
ActionIf CleanUp:
Cleaning Up In Case We Don’t Want Something
Introspective Code Behavior Verification
ActionPop
# Remove method name
ActionPop
# Remove object reference
ActionPush String:$RANDOM
# Create a variable with a random name
ActionStackSwap
# Swap variable name and number of arguments
ActionSetVariable
# Store number of arguments
RemovalLoop:
ActionPush String:$RANDOM
# Push random variable name
ActionPushDuplicate
# Duplicate
ActionGetVariable
# Get number of arguments
ActionPush UInt32:0
# Push 0
ActionEquals2
# Compare
ActionIf RemovalLoopDone:
# If number of arguments == 0, we are done
ActionPushDuplicate
# Duplicate random variable name again
ActionGetVariable
# Get number of arguments
ActionDecrement
# Decrement it
ActionSetVariable
# Store in random variable name
ActionPop
# Now remove one of the original arguments
ActionJump RemovalLoop:
# Repeat
ActionPop
# Remove remaining string
ActionPush UNDEFINED
# Return UNDEFINED to the code that called
# the method
Example: Gnida
 Adding a function to the top of 
the code sequence in order to 
perform all the object and 
method checks in one place
 Patching all ActionCallMethod
places to verify the call using 
our check function
Feeding Malware to Blitzableiter
 Out of 20 real malware samples:
 All AVM2 based files were rejected, as we don’t support that yet
 All exploits targeting the player where rejected for format violations
 All attacks using obfuscation were rejected for code violations
 All exploits targeting the browser were patched to harmlessness
 So far, nothing survived Blitzableiter
Testing the Blitzableiter
Collateral Damage
SWF obfuscation software is used to prevent decompilation
Ambiera irrFuscator, http://www.ambiera.com/irrfuscator/
Dcomsoft SWF Protector, http://www.dcomsoft.com/
Kaiyu Flash Encryption Genius, http://www.kaiyusoftware.com/products.html
Swfshield, http://swfshield.com/
Amayeta SWF Encrypt, http://www.amayeta.com/software/swfencrypt/
Kindisoft secureSWF, http://www.kindisoft.com/
Except for irrFuscator, all obfuscation tools produce invalid SWF files, 
which were accordingly rejected during tests
Another good argument why obfuscation is zarking bullocks
Testing the Blitzableiter
Feeding Blinking Things to Blitzableiter
Testing the Blitzableiter
http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps_13.html
Item
Result
Sum of test cases
95780
Total size of all test case
45,47 GB
Sum of all Tags
120111586
Total number of test cases passing parsing and validation
88080
Percentage of test cases passing parsing and validation
92%
Number of AVM1 instructions before modification
472.698.973
Number of AVM1 instructions after modification
1.155.737.360
Average code size increase per file
224%
Total number of successfully patched files
82214
Percentage of test cases successfully patched
82%
Total number of unhandled exceptions during processing
82
Performance (on a fairly decent machine)
 Average read and validation time:
0,447932 seconds over 96408 Files
 Average patch and write time:
0,450058 seconds over 82203 Files
 Generating Code Flow Graphs (CFG) for all code takes 
significantly more time
 Not fit for smaller machines (Blitzableiter within Web browser)
 Graph operations on the CFG are computationally expensive 
Testing the Blitzableiter
The Obvious and the Less Obvious Problem
 Patching every instance of a method call inflates the code 
significantly but still ignores the arguments to said call
 This is a major problem for in-line patching
 AVM1 does not have any long branch instruction
 15 Bit is all we get: 32768 byte distance is the maximum
 Some Flash files already max out the branch distance
 Patching such files results in an integer overflow (which we catch, 
thanks to the .NET CLR)
Challenges and Future Work
Extrospection and Code Flow Analysis
 To overcome the branch target overflow issue, we need to 
introduce “jump pads” into the code
 Determining the Code Flow Graph (CFG) for the AVM1 code block
 Determining which branch instructions would overflow
 Placing jump pads for them halfway into the code
 Ensuring that this does not cause more overflows
 This isn’t algorithmically trivial as far as I can tell
 It also depends on how the Flash player likes jumping into and out of 
functions without them being actually called
Challenges and Future Work
Stack Tracing
We can provably not determine all call arguments using static analysis
 But we can determine calls and arguments that are loaded directly from the 
constant pool or static values on the stack
 In order to determine values, we need to be able to track the stack state 
backwards
A couple of approaches have been tried so far, but it’s not easy
 Trivial to implement within the same basic block, but notion of basic block 
requires more expensive CFG generation
 Even constant pools can be overwritten by AVM1 code. Therefore, the even 
constant pools are conditional and need CFG inspection.
Challenges and Current Work
Higher Level Verification Modeling
The goal is to model: 
“Does the 2nd argument of this instruction begin with the following string?”
The current implementation uses a dual stack machine approach
 An internal stack machine performs individual static analysis operation steps to 
model conditions we want to verify
 If the internal stack machine cannot deterministically continue, all basic 
operations emit AVM1 code to perform the same operation within the file.
The individual operations are of small granularity
 Example: ArgN determines the value of the n-th argument on the stack
 Easier to verify the equivalence of the internal and the AVM1 representation
Challenges and Current Work
Things Blitzableiter Cannot Do Anything About
 Heap Spraying using Flash cannot be prevented using this 
approach
 There is no obvious way to tell legitimate and malicious heap 
allocations apart
 We could try the approach outlined by Microsoft’s Nozzle *
 Flash API overflows (as seen by the metric ton in PDF vs. 
Adobe Reader JavaScript API currently)
 This would introduce checking for specific call arguments
 We could consider a general call argument length limit
Challenges and Future Work
* http://research.microsoft.com/en-us/projects/nozzle/
The Current State
 This talk gives you the first official BETA
 We are covering 54 out of 63 Tag types so far
 That’s 47 more tag types than the initial release at 26C3 supported!
 Parsing media data, as it is also often used for attacks
 Currently using the .NET classes wherever possible
 Need to find documentation on the Adobe proprietary things
 Support for AVM2 code
 Really needed, already started, a whole new can of worms by itself
Challenges and Future Work
Why Blitzableiter is Open Source
Apply Kerckhoffs’ Principle to defense
 No yellow box solution that magically protects you
FX would like people to look over his zarking code and find bugs
Flash developers shall to be able to test their stuff
We want allow people to integrate Blitzableiter 
 Web browser extensions
 Proxy server filter module
 File upload filter module
The Release
Where To Get It From
 The project site is up and running at
http://
http://
http://
http://blitzableiter.recurity.com
blitzableiter.recurity.com
blitzableiter.recurity.com
blitzableiter.recurity.com
 Full source code for the class library under GPLv3
 Developer documentation for quick starts
 Test cases for malicious and non-malicious Flash
 Public bug tracking system
The Release
Summary
 The longer we work on this, it becomes evident that:
 Format validation is doable, practical and can prevent a lot of attacks
 3rd party tools in Flash world produce even less specification compliant 
files than any of the Adobe tools
 Code validation is, not surprisingly, quite a bit more complex
 It might only make sense to do this on server side (upload)
 FAQ: What about Adobe AIR, Flex, Flirr, Fluff, Fart, etc?
 A: This is about Flash. Get the code and try it out yourself if you want.
Thank you!
PI:EMAIL