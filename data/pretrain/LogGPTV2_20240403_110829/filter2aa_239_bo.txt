            T temp = sortArray[i];
            sortArray[i] = sortArray[i + 1];
            sortArray[i + 1] = temp;
            swapped = true;
          }
        }
        } while (swapped);
      }
    }
为了使用这个类，需要定义另一个类，从而建立要排序的数组。在本例中，假定
Mortimer Phones移动电话公司有一个员工列表，要根据他们的薪水进行排序。每个员工分
别由类Employee的一个实例表示，如下所示（代码文件BubbleSorter/Employee.cs）：
    class Employee
    {
      public Employee(string name, decimal salary)
      {
        Name = name;
        Salary = salary;
      }
      public string Name { get; }
      public decimal Salary { get; private set; }
      public override string ToString() => $"{Name}, {Salary:C}";
      public static bool CompareSalary(Employee e1, Employee e2) =>
        e1.Salary 委托的签名，在这个类中必须定义CompareSalary，
它的参数是两个Employee引用，并返回一个布尔值。在实现比较的代码中，根据薪水进
行比较。
下面编写一些客户端代码，完成排序（代码文件BubbleSorter/Program.cs）：
    using static System.Console;
    namespace Wrox.ProCSharp.Delegates
    {
      class Program
      {
        static void Main()
        {
        Employee[] employees =
        {
          new Employee("Bugs Bunny", 20000),
          new Employee("Elmer Fudd", 10000),
          new Employee("Daffy Duck", 25000),
          new Employee("Wile Coyote", 1000000.38m),
          new Employee("Foghorn Leghorn", 23000),
          new Employee("RoadRunner", 50000)
        };
        BubbleSorter.Sort(employees, Employee.CompareSalary);
        foreach (var employee in employees)
        {
          WriteLine(employee);
        }
        }
      }
    }
运行这段代码，正确显示按照薪水排列的Employee，如下所示：
    BubbleSorter
    Elmer Fudd, $10,000.00
    Bugs Bunny, $20,000.00
    Foghorn Leghorn, $23,000.00
    Daffy Duck, $25,000.00
    RoadRunner, $50,000.00
    Wile Coyote, $1,000,000.38
9.2.6 多播委托
前面使用的每个委托都只包含一个方法调用。调用委托的次数与调用方法的次数相
同。如果要调用多个方法，就需要多次显式调用这个委托。但是，委托也可以包含多个方
法。这种委托称为多播委托。如果调用多播委托，就可以按顺序连续调用多个方法。为
此，委托的签名就必须返回void；否则，就只能得到委托调用的最后一个方法的结果。
可以使用返回类型为void的Action委托（代码文件
MulticastDelegates/Program.cs）：
    class Program
    {
        static void Main()
        {
        Action operations = MathOperations.MultiplyByTwo;
        operations += MathOperations.Square;
在前面的示例中，因为要存储对两个方法的引用，所以实例化了一个委托数组。而这
里只是在同一个多播委托中添加两个操作。多播委托可以识别运算符“+”和“+=”。另外，
还可以扩展上述代码中的最后两行，如下面的代码段所示：
    Action operation1 = MathOperations.MultiplyByTwo;
    Action operation2 = MathOperations.Square;
    Action operations = operation1 + operation2;
多播委托还识别运算符“-”和“- =”，以从委托中删除方法调用。
 注意： 
根据后台执行的操作，多播委托实际上是一个派生自
System.MulticastDelegate的类，System.MulticastDelegate又派生自基类System.Delegate。
System.MulticastDelegate的其他成员允许把多个方法调用链接为一个列表。
为了说明多播委托的用法，下面把SimpleDelegate示例转换为一个新示例
MulticastDelegate。现在需要委托引用返回void的方法，就应重写MathOperations类中的方
法，让它们显示其结果，而不是返回它们（代码文件
MulticastDelegates/MathOperations.cs）：
    class MathOperations
    {
      public static void MultiplyByTwo(double value)
      {
        double result = value ＊ 2;
        WriteLine($"Multiplying by 2: {value} gives {result}");
      }
      public static void Square(double value)
      {
        double result = value ＊ value;
        WriteLine($"Squaring: {value} gives {result}");
      }
    }
为了适应这个改变，也必须重写ProcessAndDisplayNumber（）方法（代码文件
MulticastDelegates/Program.cs）：
    static void ProcessAndDisplayNumber(Action action, double value)
    {
      WriteLine();
      WriteLine($"ProcessAndDisplayNumber called with value = {value}");
      action(value);
    }
下面测试多播委托，其代码如下：
    static void Main()
    {
      Action operations = MathOperations.MultiplyByTwo;
      operations += MathOperations.Square;
      ProcessAndDisplayNumber(operations, 2.0);
      ProcessAndDisplayNumber(operations, 7.94);
      ProcessAndDisplayNumber(operations, 1.414);
      WriteLine();
    }
现在，每次调用ProcessAndDisplayNumber（）方法时，都会显示一条消息，说明它
已经被调用。然后，下面的语句会按顺序调用action委托实例中的每个方法：
    action(value);
运行这段代码，得到如下所示的结果：
    MulticastDelegate
    ProcessAndDisplayNumber called with value = 2
    Multiplying by 2: 2 gives 4
    Squaring: 2 gives 4
    ProcessAndDisplayNumber called with value = 7.94
    Multiplying by 2: 7.94 gives 15.88
    Squaring: 7.94 gives 63.0436
    ProcessAndDisplayNumber called with value = 1.414
    Multiplying by 2: 1.414 gives 2.828
    Squaring: 1.414 gives 1.999396
如果正在使用多播委托，就应知道对同一个委托，调用其方法链的顺序并未正式定
义。因此应避免编写依赖于以特定顺序调用方法的代码。
通过一个委托调用多个方法还可能导致一个更严重的问题。多播委托包含一个逐个调
用的委托集合。如果通过委托调用的其中一个方法抛出一个异常，整个迭代就会停止。下
面是MulticastIteration示例，其中定义了一个简单的委托Action，它没有参数并返回void。
这个委托打算调用One（）和Two（）方法，这两个方法满足委托的参数和返回类型要
求。注意One（）方法抛出了一个异常（代码文件
MulticastDelegateWithIteration/Program.cs）：
    using System;
    using static System.Console;
    namespace Wrox.ProCSharp.Delegates
    {
      class Program
      {
        static void One()
        {
        WriteLine("One");
        throw new Exception("Error in one");
        }
        static void Two()
        {
        WriteLine("Two");
        }
在Main（）方法中，创建了委托d1，它引用方法One（）；接着把Two（）方法的地
址添加到同一个委托中。调用d1委托，就可以调用这两个方法。在try/catch块中捕获异
常：
      static void Main()
      {
        Action d1 = One;
        d1 += Two;
        try
        {
          d1();
        }
        catch (Exception)
        {
          WriteLine("Exception caught");
        }
      }
    }
  }
委托只调用了第一个方法。因为第一个方法抛出了一个异常，所以委托的迭代会停
止，不再调用Two（）方法。没有指定调用方法的顺序时，结果会有所不同。
    One
    Exception Caught
  注意： 错误和异常的介绍详见第14章。
在这种情况下，为了避免这个问题，应自己迭代方法列表。Delegate类定义
GetInvocationList（）方法，它返回一个Delegate对象数组。现在可以使用这个委托调用与
委托直接相关的方法，捕获异常，并继续下一次迭代：
    static void Main()
    {
      Action d1 = One;
      d1 += Two;
      Delegate[] delegates = d1.GetInvocationList();
      foreach (Action d in delegates)
      {
        try
        {
        d();
        }
        catch (Exception)
        {
        WriteLine("Exception caught");
        }
      }
    }
修改了代码后，运行应用程序，会看到在捕获了异常后将继续迭代下一个方法。
    One
    Exception caught
    Two
9.2.7 匿名方法
到目前为止，要想使委托工作，方法必须已经存在（即委托通过其将调用方法的相同
签名定义）。但还有另外一种使用委托的方式：通过匿名方法。匿名方法是用作委托的参
数的一段代码。
用匿名方法定义委托的语法与前面的定义并没有区别。但在实例化委托时，就会出现
区别。下面是一个非常简单的控制台应用程序，它说明了如何使用匿名方法（代码文件
AnonymousMethods/Program.cs）：
    using static System.Console;
    using System;
    namespace Wrox.ProCSharp.Delegates
    {
      class Program
      {
        static void Main()
        {
          string mid = ", middle part, ";
          Func anonDel = delegate(string param)
          {
          param += mid;
          param += " and this was added to the string.";
          return param;
          };
          WriteLine(anonDel("Start of string"));
        }
      }
    }
Func委托接受一个字符串参数，返回一个字符串。anonDel是这种委托
类型的变量。不是把方法名赋予这个变量，而是使用一段简单的代码：前面是关键字
delegate，后面是一个字符串参数。
可以看出，该代码块使用方法级的字符串变量mid，该变量是在匿名方法的外部定义
的，并将其添加到要传递的参数中。接着代码返回该字符串值。在调用委托时，把一个字
符串作为参数传递，将返回的字符串输出到控制台上。
匿名方法的使用优点是减少了要编写的代码。不必定义仅由委托使用的方法。在为事
件定义委托时，这一点非常明显（本章后面探讨事件）。这有助于降低代码的复杂性，尤
其是在定义了好几个事件时，代码会显得比较简单。使用匿名方法时，代码执行速度并没
有加快。编译器仍定义了一个方法，该方法只有一个自动指定的名称，我们不需要知道这
个名称。
在使用匿名方法时，必须遵循两条规则。在匿名方法中不能使用跳转语句（break、
goto或continue）跳到该匿名方法的外部，反之亦然：匿名方法外部的跳转语句不能跳到
该匿名方法的内部。
在匿名方法内部不能访问不安全的代码。另外，也不能访问在匿名方法外部使用的
ref和out参数。但可以使用在匿名方法外部定义的其他变量。
如果需要用匿名方法多次编写同一个功能，就不要使用匿名方法。此时与复制代码相
比，编写一个命名方法比较好，因为该方法只需要编写一次，以后可通过名称引用它。
  注意： 匿名方法的语法在C# 2中引入。在新的程序中，并不需要这个语法，
因为lambda表达式（参见下一节）提供了相同的功能，还提供了其他功能。但是，在
已有的源代码中，许多地方都使用了匿名方法，所以最好了解它。
从C# 3.0开始，可以使用lambda表达式。
9.3 lambda表达式
自C# 3.0开始，就可以使用一种新语法把实现代码赋予委托：lambda表达式。只要有
委托参数类型的地方，就可以使用lambda表达式。前面使用匿名方法的例子可以改为使用
lambda表达式。
    using System;
    using static System.Console;
    namespace Wrox.ProCSharp.Delegates
    {
      class Program
      {
        static void Main()
        {
        string mid = ", middle part, ";
        Func lambda = param =>
            {
              param += mid;
              param += " and this was added to the string.";
              return param;
            };
        WriteLine(lambda("Start of string"));
        }
      }
    }
lambda运算符“=>”的左边列出了需要的参数，而其右边定义了赋予lambda变量的方法
的实现代码。
9.3.1 参数
lambda表达式有几种定义参数的方式。如果只有一个参数，只写出参数名就足够了。
下面的lambda表达式使用了参数s。因为委托类型定义了一个string参数，所以s的类型就是
string。实现代码调用String.Format（）方法来返回一个字符串，在调用该委托时，就把该
字符串最终写入控制台（代码文件LambdaExpressions/Program.cs）：
    Func oneParam = s =>
            $"change uppercase {s.ToUpper()}";
    WriteLine(oneParam("test"));
如果委托使用多个参数，就把这些参数名放在花括号中。这里参数x和y的类型是
double，由Func委托定义：