(UUID) of the device, which is by deﬁnition identifying.
There is no oﬃcial speciﬁcation for the generation of the
UUID, but the Wi-Fi Alliance recommends [47, §3.19] to
follow the speciﬁcation of RFC 4122 [34] and to derive it
from the MAC address of one of the device’s interfaces. More
speciﬁcally, RFC 4122 speciﬁes that the UUID should be
derived from the truncation of the digest obtained from a
cryptographic hashing of the MAC address.
On Linux, wpa_supplicant is responsible for the addition
of the WPS element. It generates the UUID by computing
the SHA-1 hash of the MAC address with a ﬁxed seed, before
truncating it. The full algorithm is shown in Algorithm 1.
It was shown in [14] that hashed MAC address are reversible
through brute-forcing, due to their relatively small address
space. Hence it is possible to recover the MAC address that
was used to generate the UUID. In other words, if the UUID
is calculated in this manner, it leaks the real MAC address.
We calculated the UUID based on the MAC address as
described in Algorithm 1 for the Train-station and Lab
datasets. This revealed that roughly 75% of all devices us-
ing the WPS IE indeed derive the UUID from the MAC
address (see Table 3). For the Sapienza dataset, which
preserves only the OUI part of the MAC addresses, we at-
tempted to recover the original MAC address by testing all
possible values for the last three bytes of the address (to-
gether with the given OUI). This proved extremely success-
ful, as this yielded a result for 92% of the devices. Because
Dataset
Lab
Train-station
Sapienza
Number of clients
with WPS a tag
8.4%
5.5%
3.6%
Fraction of success-
fully reversed UUID
76.1% (35/46)
73.9% (391/529)
92.0% (5378/5844)
we do not have access to the original MAC addresses, we
cannot guarantee that all of the recovered addresses are the
one used as the Wi-Fi MAC address. Indeed, RFC 4122 [34]
recommends to use the address of one of the interfaces,
meaning other MAC addresses, such as the Bluetooth one,
can be used. We informed the authors of the Sapienza
dataset about theses de-anonymization issues. Using the
same method, we tested our own datasets again, this time
exhaustively testing all possible values for the last three
bytes of the MAC address, while keeping the advertised OUI.
This uncovered 7 new MAC addresses for the Train-station
dataset, and none for Lab. These 7 addresses are all one bit
away from the Wi-Fi MAC address of the device, indicat-
ing that they are the address of another interface (e.g., the
Bluetooth address). We also found a few devices using bogus
UUIDs (12:34:56. . . or 00:00:00. . . ). We conclude that,
at the exception of devices using bogus UUIDs, the WPS
element is a unique identiﬁer in all our datasets. Moreover,
the UUID ﬁeld of the WPS element can be used to reveal
the real MAC address of a device.
3.3 SSID ﬁngerprint
Probe requests include a Service Set Identiﬁer (SSID) el-
ement, which is used to specify a network searched by the
device. We show that the SSID ﬁngerprint, i.e., the list of
SSIDs searched by a device, can be a unique identiﬁer. De-
vices including this element send multiple probe requests to
cover all the SSIDs in their preferred network list (one probe
for each network). During each scan iteration, devices send
an ordered burst of probe requests over a small timeframe.
Although the practice of putting SSIDs in probe requests
is progressively abandoned for obvious privacy reasons, it is
still observed for a number of reasons. First, some active de-
vices are not up-to-date and are still running an OS that does
not include this privacy-enhancing modiﬁcation. Second, us-
ing a probe request with an SSID is the only way to discover
a hidden access point. No matter how up-to-date the OS is,
a device with conﬁgured hidden networks will broadcast the
corresponding SSID. Finally, we have observed that some
020406080100120Anonymity set size100101102103Number of devices0100200300400500600700Anonymity set size101102103Number of devices010000200003000040000Anonymity set size101102103104105Number of devices(a) Lab
(b) Train-station
(c) Sapienza
Figure 4: Number of devices that share the same SSID ﬁngerprint with a group (i.e., anonymity set) of varying size.
recent devices like the iPad 2 running iOS 9.1 or the One
Plus One running Android 5.1.1 broadcast probe requests
with SSIDs when waking up from sleep mode. We conjec-
ture this is because some OSes, as a way to speed up the
network-reactivation process, oﬀer separate APIs to initiate
background and on-demand (wake up) scans.
In our datasets we found that 29.9% to 36.4% of devices
broadcast at least one SSID. Among these, 53% to 64.8%
broadcast a unique list of SSIDs. Therefore, this list can be
used as an additional unique identiﬁer to track devices.
Using the same method as for IEs, we computed the distri-
bution of anonymity sets for SSIDs. The results are shown
in Fig. 4. For readability, we removed the empty SSID list,
corresponding to devices which do not broadcast any SSID.
As for IE ﬁngerprints, the three datasets exhibit a simi-
lar distribution. For instance, in the Lab dataset, 87 SSID
ﬁngerprints are unique, and 26 devices share the same ﬁn-
gerprint. Apart from these extreme values, it appears that
the anonymity set of devices sending SSIDs is small (< 2%
of devices). This makes the SSID ﬁngerprint a good tool for
identifying and tracking devices.
4.
IDENTIFIER-FREE TRACKING
In this section, we present an algorithm to track devices
even if MAC address randomization is used. That is, we as-
sume no unique identiﬁers are available. Our algorithm ﬁrst
clusters probe requests by their Information Element (IE)
ﬁngerprint, and then distinguishes devices in each cluster
by relying on predictable sequence numbers.
4.1 Adversary and System Model
We assume the adversary is a passive observer who wants
to track the movements of people in a certain area. This is
done by tracking people’s mobile devices, and by placing ra-
dio receivers that cover the complete target area. The radios
only have to be able to receive broadcast probe requests, full
monitor mode support is not required. In practice many in-
stitutions, e.g., shopping centers, universities, etc., can use
existing infrastructure for this purpose. We assume not all
probe requests are captured due to packet loss, and do not
require all channels to be monitored. In other words, our
algorithm can handle missed packets, and works as long as
several consecutive network scans of a device are not missed.
Our algorithm relies on the IE ﬁngerprint and on the pre-
dictable sequence numbers of probe requests. Note that all
802.11 frames, apart from control frames, contain a 12-bit se-
quence number. It is used to detect retransmissions and re-
construct fragmented packets. Based on our tests, all Wi-Fi
radios use an incremental counter to initialize the sequence
number. Even when MAC address randomization is enabled,
we found that iOS, Linux, and Windows, all use incremental
sequence numbers in probe requests. This conﬁrms and ex-
tends the observations by Freudiger [18]. Unsurprisingly, in
our datasets all devices use an incremental sequence counter.
However, roughly one third of devices reset their sequence
number on speciﬁc occasions. In particular, many devices
reset their sequence counter between scan iterations, likely
because they turn oﬀ the radio chip when idle.
4.2 Tracking Algorithm
Our algorithm works in two phases. First it uses the IE
ﬁngerprint to group probes requests into clusters. Then, it
relies on predictable sequence numbers to distinguish probe
requests sent from diﬀerent devices within one cluster.
If
successful, each ﬁnal cluster corresponds to a unique device.
The full algorithm is shown in Algorithm 2. Its input is
the list of probe requests P, and the parameters ∆T and ∆S.
Parameter ∆S is the (assumed) maximum distance between
sequence numbers of probe requests sent by the same device,
and ∆T the (assumed) maximum time between two network
scans of a device. The list of probes requests P can come
from multiple APs. The ﬁrst phase corresponds to the ﬁrst
forall loop. In this loop, all probe requests are assigned to
some cluster C based on their IE ﬁngerprint. The algorithm
uses the fingerprint function to extract the IE ﬁngerprint
based on the information elements that are present (see Sec-
tion 3). The hashmap M maps ﬁngerprints to the cluster
that contains probe requests with the given ﬁngerprint.
In the second phase, our algorithm iterates over all clus-
ters C in the hashmap M. Here, we rely on sequence num-
bers and packet arrival times to distinguish devices that have
the same IE ﬁngerprint. Eﬀectively, each cluster C is divided
into a list of subclusters S. The sequence number of a probe
request is denoted by p.seq, and the arrival time by p.time.
The notation S[i].last references the last probe request that
has been added to the subcluster S[i]. In the nested forall
loop, we search for a cluster such that the last probe re-
quest added to this cluster has an arrival time and sequence
number that indicate that it was sent by the same device as
probe request p. Care must be taken so devices that reset
their sequence number after one scan iteration do not get
split up into diﬀerent clusters. As a heuristic, we assume
that if a device exhibits this behaviour, all devices with the
same IE ﬁngerprint also have this behaviour. We can then
detect devices that reset their sequence number by calculat-
ing the maximum sequence number within a cluster. If this
number is lower than 100, we assume devices with this ﬁn-
0510152025Anonymity set size100101102Number of devices050100150200Anonymity set size101102103104Number of devices010002000300040005000Anonymity set size101102103104105Number of devicesAlgorithm 2: Cluster probe requests based on their IE
ﬁngerprint and sequence numbers.
Input: P : List of captured probe requests
∆T : maximum time between two probes
∆S: maximum sequence number distance
Returns: Set of clusters corresponding to devices
M ← ∅
forall p ∈ P do
// M maps fingerprints to clusters
f ← ﬁngerprint(p)
M[f ].append(p)
// Calculate IE fingerprint
// Append probe to cluster
D ← [ ] // List of clusters representing devices
forall C ∈ M do
// Will contain subdivision of C
S ← [ ]
m ← max(p.seq for p in C)
forall p ∈ C do
Find i such that:
d(S[i].last.seq, p.seq, m) ≤ ∆S
and p.time − S[i].last.time ≤ ∆T
// Find matching cluster
if no i found then
i ← |S|
S[i].append(p)
D.extend(S)
// Create new subcluster
// Add p to subcluster
// Extend list D with S
return D
gerprint reset their sequence number. We get the following
deﬁnition for the distance between two sequence numbers:
Definition 3. The sequence distance d(x, y, max ) between
two sequence numbers x and y is deﬁned as:
|x − y|
y − x
212 − x + y
if max < 100
if x < y
otherwise
d(x, y, max ) =
Here max represents the maximum sequence number in a
given cluster. All subclusters are appended to the ﬁnal list
of subclusters D. Finally, the algorithm returns D, where it
is assumed each cluster in D corresponds to one device.
4.3 Evaluation
We investigated the performance of our algorithm based
on our real-world datasets. To control the number of concur-
rent devices, and the duration that they are present, we ﬁrst
ﬁltered these datasets. To only simulate devices that remain
in the tracked area for a given duration, we removed devices
of which we lost too many consecutive probe requests. This
indicates that the device moved outside the tracked area. We
rely on sequence numbers to determine how many frames are
lost:
if 64 or more consecutive frames are lost, we assume
the device moved outside the tracked area, and we remove
the device. For devices that reset their sequence number
after each scan iteration, we only base ourselves on the time
between frames to determine if a device went out of range.
We also removed the WPS information element in all probe
requests, and replaced all SSIDs with a broadcast (empty)
SSID. This assures we are tracking devices without relying
on obvious unique identiﬁers. We only make use of MAC
addresses to measure the performance of our algorithm.
We consider a device to be successfully tracked if there
is exactly one cluster that contains all probe requests sent
Figure 5: Probability of a device being successfully tracked
using Algorithm 2, in function of the duration that the de-
vice was present, and the number of concurrent devices.
by this device, and no other frames are in this cluster. Put
diﬀerently, all probe requests of this device have to be suc-
cessfully linked together without a single error. With this
deﬁnition, the tracking probability under various conditions
is shown in Fig. 5. We used a value of 64 for ∆S, and
500 seconds for ∆T . These rather large values are picked so
the tracking algorithm can tolerate several missed probe re-
quests. Our results are promising. Even when simulating as
much as 1024 concurrent devices, over a duration of 20 min-
utes, we manage to successfully track a signiﬁcant amount
of devices. For shorter tracking durations, and when the
number on concurrent devices is more realistic, we manage
to track roughly half of all devices.
4.4 Discussion and Countermeasures
The main reason why certain devices are not successfully
tracked, is because some clusters contain probe requests of
multiple devices. In Section 5, we show that scrambler seeds
can further distinguish devices in these clusters. The sec-
ond type of error is that probe requests of some devices are
spread out over multiple clusters. This is caused by the
variability of the IE ﬁngerprint (see Section 3). Hence, im-
provements to the ﬁngerprint function may further increase
the tracking probability of our algorithm.
In our datasets, we generally only monitor one channel.
This makes it harder to distinguish devices using sequence
numbers, since the average gap between sequence numbers
of captured frames is relatively high. Monitoring multiple
channels may further increase the tracking probability.
The 802.11 standard only requires that the same sequence
number is used for retransmissions, and that the same num-
ber is used for all fragments of a packet [31, §8.2.4.4.2].
Hence, one can reset the sequence counter to a random (un-
used) value if a new MAC address is being used.
5. PREDICTABLE SCRAMBLER SEEDS
In this section, we study the scrambler seeds of commodity
Wi-Fi radios, and ﬁnd that all of them use predictable seeds.
We show this can be used to improve our tracking algorithm.
5.1 Background and Experimental Setup
Recently, Bloessl et al. discovered that the scrambler seeds
of two (prototype) radios used in wireless vehicular networks
are predictable [6]. They showed this can be used to improve
Tracking ProbabilityDuration (in minutes)681012141618200%20%40%60%80%#concurrent devices:16642561024vehicle tracking algorithms. While the 802.11 standard says
that scrambler seeds should be initialized with a pseudo-