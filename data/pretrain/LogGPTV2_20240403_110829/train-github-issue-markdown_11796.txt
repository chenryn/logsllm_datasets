## 🐛 Bug
When attempting to convert a ResNet18-based PyTorch model to ONNX, the following error is encountered:
```
RuntimeError: Failed to export an ONNX attribute 'onnx::Gather', since it's not constant. Please try to make things (e.g., kernel size) static if possible.
```

## Steps to Reproduce
1. Download the repository and place the `79999_iter.pth` model weights in the `res/cp` directory.
2. Run the conversion script in Google Colab with the following code:

```python
from model import BiSeNet
import torch.onnx
import torch

net = BiSeNet(19)
net.cuda()
net.load_state_dict(torch.load('/content/drive/My Drive/Collab/fp/res/cp/79999_iter.pth'))
net.eval()

dummy = torch.rand(1, 3, 512, 512).cuda()
torch.onnx.export(net, dummy, "Model.onnx", input_names=["image"], output_names=["output"])
```

## Expected Behavior
The conversion should complete without any errors.

## Environment
- **PyTorch version:** 1.4.0
- **Is debug build:** No
- **CUDA used to build PyTorch:** 10.1
- **OS:** Ubuntu 18.04.3 LTS
- **GCC version:** (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
- **CMake version:** 3.12.0
- **Python version:** 3.6
- **Is CUDA available:** Yes
- **CUDA runtime version:** 10.0.130
- **GPU models and configuration:** GPU 0: Tesla T4
- **Nvidia driver version:** 418.67
- **cuDNN version:** /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
- **Relevant library versions:**
  - [pip3] numpy==1.17.5
  - [pip3] torch==1.4.0
  - [pip3] torchsummary==1.5.1
  - [pip3] torchtext==0.3.1
  - [pip3] torchvision==0.5.0
  - [conda] Could not collect

## Additional Context
I added `print(v.node())` to `symbolic_helper.py` just before the runtime error is raised to identify the cause of the error. The output is:
```
%595 : Long() = onnx::Gather[axis=0](%592, %594) # /content/drive/My Drive/Collab/fp/model.py:111:0
```
The line in `model.py` at 111 is:
```python
avg = F.avg_pool2d(feat32, feat32.size()[2:])
```

Based on further research, I found a source stating that:
> Both ResNet50 and ResNet32 can be exported to ONNX, but ResNet18 cannot.

The source suggests making the following changes:
**From:**
```python
import torch.nn.functional as F

def forward(self, x):
    feat = self.base(x)
    feat = F.avg_pool2d(feat, feat.size()[2:])
```

**To:**
```python
class Model(nn.Module):
    def __init__(self, ...):
        super(Model, self).__init__()
        ...
        self.avg_pool2d = nn.AvgPool2d(kernel_size=k_s, ceil_mode=False)
        ...

    def forward(self, x):
        ...
        feat = self.avg_pool2d(feat)
        ...
```

However, this change results in other errors.

cc @houseroad @spandantiwari @lara-hdr @BowenBao @neginraoof