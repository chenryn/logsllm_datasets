title:USB Snooping Made Easy: Crosstalk Leakage Attacks on USB Hubs
author:Yang Su and
Daniel Genkin and
Damith Chinthana Ranasinghe and
Yuval Yarom
USB Snooping Made Easy:  
Crosstalk Leakage Attacks on USB Hubs
Yang Su, Auto-ID Lab, The School of Computer Science, The University of Adelaide;  
Daniel Genkin, University of Pennsylvania and University of Maryland; Damith Ranasinghe, 
Auto-ID Lab, The School of Computer Science, The University of Adelaide;  
Yuval Yarom, The University of Adelaide and Data61, CSIRO
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/su
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXUSB Snooping Made Easy: Crosstalk Leakage Attacks on USB Hubs
Yang Su
University of Adelaide
PI:EMAIL
Daniel Genkin
University of Pennsylvania and
University of Maryland
PI:EMAIL
Damith Ranasinghe
University of Adelaide
Yuval Yarom
University of Adelaide and Data61
PI:EMAIL
PI:EMAIL
Abstract
The Universal Serial Bus (USB) is the most prominent
interface for connecting peripheral devices to computers.
USB-connected input devices, such as keyboards, card-
swipers and ﬁngerprint readers, often send sensitive in-
formation to the computer. As such information is only
sent along the communication path from the device to the
computer, it was hitherto thought to be protected from
potentially compromised devices outside this path.
We have tested over 50 different computers and exter-
nal hubs and found that over 90% of them suffer from a
crosstalk leakage effect that allows malicious peripheral
devices located off the communication path to capture
and observe sensitive USB trafﬁc. We also show that in
many cases this crosstalk leakage can be observed on the
USB power lines, thus defeating a common USB isola-
tion countermeasure of using a charge-only USB cable
which physically disconnects the USB data lines.
Demonstrating the attack’s low costs and ease of con-
cealment, we modify a novelty USB lamp to implement
an off-path attack which captures and exﬁltrates USB
trafﬁc when connected to a vulnerable internal or a ex-
ternal USB hub.
1 Introduction
Modern computer systems typically consist of hundreds
of components, each with a clear functionality and well-
deﬁned input-output interfaces. Connecting all of these
components are buses, which transfer information be-
tween components. Since the internal hardware com-
ponents of a system are usually assumed to be trusted,
most buses carry no protections against malicious be-
havior. However, with the development of complicated
computer peripherals, buses are no longer kept inter-
nal. High-Deﬁnition Multimedia Interface (HDMI) [28],
DisplayPort [47],
the external Serial AT Attachment
(eSATA) [43], the Universal Serial Bus (USB) [14], and
many others all connect to external devices of unknown
origin. Moreover, these buses often carry sensitive infor-
mation such as key strokes (including passwords), mouse
movements, ﬁle transfers, screen images, etc.
The security model of these buses does not follow the
standard methods of securing communication channels.
Rather than using common techniques, such as encryp-
tion and authentication, these buses seem to rely on a
unicast network model, where messages are physically
routed along the path from the sender to the receiver
instead of being broadcasted to all of the components
connected to the bus. This, coupled with short and sim-
ple routes that only have few intermediate components,
seems to provide a “good enough” security. As a result,
in order to externally monitor trafﬁc such as the victim’s
keystrokes, the attacker has to corrupt one of the often
small number of components that are located between the
sender (the keyboard) and the receiver (the USB host).
Consequently, it is commonly assumed that “devices are
not able to snoop information sent from the Device to
Host since information ﬂows only through Hubs until it
reaches the Host” [36].
In this paper we challenge this assumption. More
speciﬁcally, we investigate the following questions:
Are common communication buses vulnerable to
off-path attacks? How can such attacks be mounted and
at what cost?
1.1 Our Results
As a case study, in this paper we focus on the Univer-
sal Serial Bus (USB) interface, which is the predom-
inant interface used by modern computer parapherna-
lia. Compared with legacy interfaces such as serial port
(RS-232) [17], parallel port (IEEE 1284) [19] or key-
board jack (DIN 41524/IEC 60130-9) [29], USB has
wide range of advantages: it is hot pluggable, extensible
(via USB hubs) and capable of supporting many types of
equipment. A ﬁnal feature of the USB interface is the
ability to provide both data communication and power to
peripheral devices.
USENIX Association
26th USENIX Security Symposium    1145
In this paper we demonstrate that in many cases, data-
dependent voltage ﬂuctuations of the USB port’s data
lines can be monitored from adjacent ports on the USB
hub. Our results apply to both internal USB hubs which
are installed inside computers, as well as to external off-
the-shelf USB hubs. Moreover, this phenomena is not
limited to a small number of vulnerable hubs but seems
to be quite common, spanning various manufacturers and
hub designs.
In our experiments, 94% of the internal
hubs in computers and in docking stations and 90% of the
external USB hubs we evaluated displayed some form of
exploitable leakage.
In the context of communication channels,
this
phenomena is often referred to as channel-to-channel
crosstalk [38]. We demonstrate that this crosstalk effect
allows an off-path attacker to eavesdrop on USB com-
munication. In particular we show that a corrupted pe-
ripheral device can monitor the communication of other
peripheral devices connected to the same non-corrupted
USB hub, or just connected directly to the same com-
puter. Moreover, we show that common “ad-hoc” phys-
ical protections, such as physically disconnecting USB
data and power lines, are often ineffective in stopping
the discovered leakage.
Attack Scenario. As noted above, in addition to com-
munication, the USB bus can also provide power to var-
ious peripherals. Many “USB toys”, such as lamps, fans
or ofﬁce foam rocket launchers [21], often of unknown
origin, have been designed to use the feature and are thus
routinely connected to USB ports. An attacker can thus
augment such a toy with the required equipment in order
to monitor the USB port crosstalk and subsequently sell
it at below-market-value prices. In Section 6 we show
how to cheaply construct such a probe which can moni-
tor and extract the communication of other devices.
We mainly focus on slow-speed USB 1.x input de-
vices, such as keyboards, card readers, ﬁngerprint read-
ers, USB headsets, etc. Information sent from these de-
vices is often sensitive (e.g., passwords, credit card num-
bers, biometric data, voice conversations, etc.) and thus
should remain secret. While faster versions of the USB
standard were published almost two decades ago and are
in common use, these versions are backwards compatible
with USB 1.x and many input devices are manufactured
to the slower standard. We believe that in the forsee-
able future, slow speed-devices will continue to use the
USB 1.x interface.
While our proof-of-concept probe (Section 6) was de-
signed to attack USB 1.x devices (connected to any USB
hub, including 3.0 hubs), we do show that attacks on
devices using the faster USB 2.0 standard are feasible
(Section 3.3). We leave the task of attacking USB 3.0
devices connected to 3.0 hubs as an open problem (See
Section 7).
1.2 Related Work
For a summary of attacks on USB, see [16, 44] and ref-
erences therein.
USB Trafﬁc Monitoring. Because USB trafﬁc is not
encrypted, on-path devices can listen in to all of the com-
munication that passes through them. This capability is
exploited by commercial keyloggers, such as Key Grab-
ber [2] and KeyGhost [1]. Neugschwandtner et al. [34]
note that downstream trafﬁc is broadcasted to all devices
connected to the bus, demonstrating recovery of all the
downstream trafﬁc using a USB analyzer. They further
suggest encrypting downstream USB trafﬁc to protect
against snooping attacks. Unlike their attack, we capture
upstream USB trafﬁc, which is not broadcasted. Further-
more, because their countermeasure only encrypts down-
stream trafﬁc, it does not prevent our attack.
Oberg et al. [36] describe a timing-based covert chan-
nel that creates an off-path information ﬂow between col-
luding devices. To mitigate the channel they suggest
using deterministic time slots for serving each device.
We note that our attack allows capture of the actual data
transferred from a non-cooperating device and that the
suggested mitigation does not protect against our attack.
Exploiting Trust on Buses.
Instead of monitoring traf-
ﬁc, malicious devices can attack the host, exploiting
weaknesses in the host software [10, 50], ﬁrmware [39],
trust [15, 5] or protocol [42]. Similarly, malicious hosts
can attack attached devices [33, 35, 32, 52]. The attack
of the USB bus was also explored by Bratus et al. [12]
both at the hardware level and at the device driver level.
To protect the host from malicious devices, Tian et
al. [46, 45] and Angel et al. [7] suggest ﬁltering the USB
trafﬁc and implementing a permission mechanisms for
USB ports. Angel et al. [7] also suggests applying end-
to-end encryption between devices and the host to pro-
tect the conﬁdentiality and the integrity of USB data in
transit.
A common method for protecting hosts from mali-
cious devices and vice versa is to cut the data lines be-
tween the two, connecting only the USB power lines.
Such an approach allows the host to power a device with-
out the risk of data interchange between the two. Avail-
able options for this approach include power-only USB
cables as well as dedicated devices such as the USB Con-
dom [3]. We note that such defenses do not protect
against our attack in the case that crosstalk leakage is
present on the power lines.
Attacks On The Physical Medium. USB Killer [18] is
a device designed to collect energy from the USB power
line and inject a high voltage pulse back into the com-
puter, to destroy sensitive electronic components.
Vuagnoux and Pasini [48] as well as Wang and Yu [49]
show that the electromagnetic (EM) emanations from
1146    26th USENIX Security Symposium
USENIX Association
PS/2 keyboards can be used to spy on key presses. How-
ever, the design of the USB port seems to make this leak-
age much harder to exploit with only partial information
being leaked about key presses, allowing the attack to
only narrow down the pressed key to a group of 5 poten-
tial keys [48]. EM attacks have also been shown effective
in recovering video signals [31] and Ethernet communi-
cation [41]. See [22] for a survey of EM-based surveil-
lance attacks. Similar attacks exploit acoustic emana-
tions from keyboards [8, 26] and printers [9].
Side Channel Attacks. Attacks on cryptographic im-
plementations by monitoring devices’ electromagnetic
emanations and power usage have been extensively
demonstrated. See [6, 30] and references therein. While
many such works have focused on small devices such as
smart cards or FPGAs, recent works have demonstrated
similar vulnerabilities in PCs [23] and smartphones [24].
Side Channel Attacks Using USB Ports. The USB
ports of various devices were also used for mounting
side channel attacks. For laptop and desktop comput-
ers, monitoring the USB power lines [37] can reveal in-
formation about the system’s activity.
In addition, the
“far-end-of-cable” key extraction attack of [25, 23] can
be also mounted over USB ports. For mobile phones, the
USB port can be used for power analysis key extraction
attacks [24] and distinguishing websites [51].
1.3 Structure of this Paper
The rest of this paper is organized as follows: Section 2
introduces USB, including the bus topology and relevant
aspects of its physical and logical protocols. In Section 3
we discuss the crosstalk leakage on the USB data and
power lines. We show how to decode the leakage to re-
cover the transferred data in Section 4, and proceed to
describe the attacks on various devices in Section 5. Sec-
tion 6 demonstrates a practical attack using a subverted
USB lamp that captures key presses and exﬁltrates the
information wirelessly via Bluetooth.
2 The USB Interface
USB Versions and Speeds.
Since its introduction in
1996, the USB standard underwent three main upgrades.
Initially USB 1.x [13] used a single data path supporting
up to 127 peripheral devices and with 12 Mbps data rate
(also known as USB full-speed). This version currently
still powers a huge number HIDs (Human Interface De-
vices) such as keyboards, remotes and various card read-
ers. Next, in the early 2000’s USB 2.0 uniﬁed the com-
puter peripheral market, supporting speeds of up to 480
Mbps (also known as USB high-speed) while maintain-
ing backwards compatibility. USB 2.0 is commonly used
for devices requiring high data transfer rates, such as ex-
ternal storage devices and Web cameras. Finally, in 2008
another major upgrade of the USB family, USB 3.0, was
published [27]. In this version, the maximum bus speed
was increased to 5 Gbps (also known as USB super-
speed). In order to achieve such a speed and to support
full-duplex communication, ﬁve new pins were added to
the classic connectors and the cable material standard
was upgraded.
USB Hubs. USB hubs are commonly used to split a
single USB port to many (typically four) ports, thus al-
lowing the user to connect additional peripheral devices.
In addition to increasing the number of available USB
ports, USB hubs serve four functions. Each USB hub
may function as a signal repeater, extending the cable
length by ﬁve meters. Some hubs may include indepen-
dent power supply to ensure each downstream port has
enough power available. Hubs also function as protocol
translators: for example in case a USB 1.0 ticket printer
is plugged in a USB 3.0 hub, the hub translates the latest
USB 3.0 downstream signal back to the legacy USB 1.0
language and forwards to the printer. Finally, the USB
hub also protects the bus by isolating and disconnecting
malfunctioning devices which draw too much power or
do not obey the USB protocol.
USB Tiered Topology. All USB devices are connected
in a tree topology, up to 127 devices (including any hubs)
can be connected. At the root of the tree, there is a single
host (also known as USB root hub) which is directly ad-
dressable from CPU. The host coordinates the USB tree
network and in USB 1.0 and 2.0 it is the only one in
the network who can initiate communication. Up to ﬁve
additional hubs can be cascaded in series on each tree
branch. Each hub has one upstream port and up to seven
downstream ports. Downstream trafﬁc is broadcasted to
all of the devices in the tree. However, upstream data
is only sent along the (single) path from the transmitting
peripheral device to the host. In particular, hubs which
are not located on the path between the transmitting pe-
ripheral and the host should not be able to observe the