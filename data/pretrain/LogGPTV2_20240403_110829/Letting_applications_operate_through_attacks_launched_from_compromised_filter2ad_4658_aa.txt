title:Letting applications operate through attacks launched from compromised
drivers
author:Shengzhi Zhang and
Peng Liu
Letting Applications Operate through Attacks Launched
from Compromised Drivers
Compute Science and Engineering Department
Pennsylvania State University, University Park
College of Information Sciences and Technology
Pennsylvania State University, University Park
Shengzhi Zhang
PI:EMAIL
Peng Liu
PI:EMAIL
ABSTRACT
Existing techniques, such as state rollback or replay, can
preserve accumulated “state” when the target application
is compromised due to its own vulnerability exploitation.
However, if such compromise stems from kernel, e.g., driver
vulnerability exploitation, the target application has to lose
its accumulated “work in progress” states, due to the re-
quired whole system reboot. In this paper, we present DRASP,
a system that leverages virtualized device diversity to pro-
duce system replicas and preserves application state by sur-
viving one replica from the driver code vulnerability ex-
ploitation. After loose synchronization of the replicas, we
compare the responses, critical memory regions and persis-
tent data of the target applications, and generate intrusion
alarms once any validation policy is violated. Once intru-
sion is conﬁrmed, the service continuity and accumulated
states can be preserved by the running application on the
survival system replica. Our evaluation demonstrates that
DRASP can achieve on-the-ﬂy driver-oriented intrusion re-
sponse, and ensure the correctness and continuity of the tar-
get application’s execution.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security, Reliability
Keywords
Intrusion response, heterogeneous drivers, application state
preserving
1.
INTRODUCTION
With the rapid prevalence of E-Commerce, MMO and so-
cial networking, the demand on service availability and con-
tinuity is increasingly crucial to production servers or data
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-1303-2/12/05 ...$10.00.
centers. Hence, software failure recovery systems are thor-
oughly studied (e.g., [13], [17], [9], [11] and [6]). However,
stimulated by the signiﬁcant commercial revenue, attack-
ers begin trying to evade the existing auditing/recovering
techniques by manipulating the service applications through
compromised kernel. Nowadays, device drivers account for
more than half (could be as high as 70%) of the source code
of most commodity operating system kernels, with much
more exploitable vulnerabilities than other kernel code [3]
and [12]. This renders the attackers the opportunity to ex-
ploit the driver vulnerability and leverage the kernel privi-
lege of the compromised drivers. With the unrestricted ac-
cess to the whole (kernel/user) memory address space, suc-
cessful attackers can launch denial of service attack by in-
curring driver fault, manipulating critical code/data or even
the metadata of the service application process.
In order to preserve the correctness and state the ser-
vice applications against compromised drivers, in this pa-
per, we present DRASP (Diverse Replication based Appli-
cation State Preserving), a novel architecture to producing
heterogeneous devices based operating system replicas. The
device diversity is deployed through virtualization, and the
system replicas need to load diﬀerent drivers (i.e., loadable
kernel modules) for the diverse devices. The key assump-
tion is that due to separated developing procedures, diﬀer-
ent drivers should have very diﬀerent vulnerabilities. Hence,
one driver vulnerability exploitation can at most succeed in
one replica, while fail in the other. Once the successful ex-
ploit tampers the applications’ code/data or compromises
the applications’ metadata for commercial beneﬁts, it can be
detected through either response or state veriﬁcation with
the other replica. After intrusion conﬁrms, the service appli-
cation on the survival replica can immediately take over the
workload to preserve the service continuity and accumulated
state, while ensuring the correct execution.
DRASP is the ﬁrst workable approach that can be feasi-
bly deployed in real server environment to let applications
operate through attacks launched from compromised device
drivers. DRASP can dynamically detect and respond to
driver-vulnerability-oriented exploits targeting commercial
applications without relying on driver speciﬁc semantics or
heuristic. DRASP is ﬂexible and very easy to be deployed,
without any modiﬁcation to the driver code, compilers, or
commodity operating systems. In addition, this architecture
can be immediately applied to the existing fault tolerant sys-
tems, which often run replicas and verify their responses to
client requests through comparison (e.g., [18], [20] and [15]).
The rest of this paper is organized as follows. The next
front-tier proxy. The device diversity can be produced by
the heterogeneous hardware devices naturally. For instance,
the two replicas run on two hardware platforms, one with
Intel 82540EM NIC (Network Interface Card), sound blaster
(sound card), Universal Host Controller Interface (USB con-
troller) and etc., the other with Realtek RTL8139 NIC, Gravis
ultrasound (sound card), Intel Open Host Controller Inter-
face (USB controller) and etc. correspondingly. However,
the requirement of deploying two machines with heteroge-
neous hardware devices can be costly, especially in the pro-
duction server environment. Inspired by the hardware-based
diversity approach and the sweeping deployment of virtual
platforms, we produce the device diversity by conﬁguring
virtual platforms to emulate heterogeneous devices for the
replicas to “virtualize” the hardware diversity.
The expenses we pay involve the additional resources for
the backup replica and the integration of the virtual machine
monitor or so called hypervisor into trusted computing base
(TCB). Nevertheless, the resource cost can be minimized
if deploying DRASP architecture into fault tolerant system
environment, since DRASP is totally compatible with most
existing fault tolerant systems [16]. Furthermore, with the
fact that the hypervisor code base is quite small and rela-
tively well developed, we assume that integrating it into the
TCB will not introduce much more vulnerabilities.
In this paper, we call the diverse devices performing the
same functionality, e.g., Intel 82540EM NIC and Realtek
RTL8139, as a pair of heterogeneous devices. As a result of
pairs of heterogeneous devices, the guest OS kernel of each
replica will load diﬀerent drivers as loadable kernel modules
for the corresponding devices. The guest OS and the pro-
tected service application are replicated on the front stage
VM replica and the back stage VM replica respectively, with
the same version and conﬁguration. The two replicas are
synchronized in a loose style, to ensure that the state val-
idator and response validator can verify the “output” (either
to the remote end or to the memory/disk) of the two service
applications eﬀectively and eﬃciently.
We deploy a proxy in front of the two replicas to repli-
cate service requests to them and verify the corresponding
responses from them. After passing the validation policies,
only the responses from the front stage replica are sent out
to preserve the communication semantics. Since only the
front stage replica directly interacts with the outside, it is
generally safe to assume that the malicious exploits would
primarily target the front stage replica and ignore the back
stage replica. Though the attackers can launch brute force
attack to explore the driver vulnerabilities/bugs on both the
two replicas, we believe that lots of such suspicious exploita-
tion packets will deﬁnitely catch system administrator’s at-
tention.
3. DRASP DESIGN
In this section, we present the design details of DRASP
beginning with modelling the problem. Then we will de-
scribe our synchronization and validation mechanisms.
3.1 Model and Rationale
Modelling the Harm to Service Applications. We
classify the harm to the service applications by malicious
exploit as either transitional or persistent. By transitional,
we mean that by manipulating the service application, the
request processing routine or the state information that the
Figure 1: DRASP Architecture
section overviews the problem and the DRASP architec-
ture. Section 3 presents the design details of DRASP ar-
chitecture, focusing on the intrusion detection and response
of driver-vulnerability-oriented service-application-targeted
exploit. In Section 4, we evaluate DRASP by case studies.
Finally, we discuss related work in Section 5 and conclude
the paper in Section 6.
2. PROBLEM STATEMENT AND DRASP AR-
CHITECTURE
The ultimate goal of DRASP is to preserve the correct-
ness, continuity and accumulated state of any service appli-
cation in the scenario when device driver is compromised.
Below, we summarize the problems in the scenario when
attackers tamper the service application execution by ex-
ploiting the driver vulnerability, and then overview DRASP
architecture.
2.1 Threat Model
We assume that the service application has undergone ex-
tensive forensic analysis to verify that the code is generally
immune from common vulnerabilities. Moreover, existing
state rollback [13] and selective replay techniques [9] can be
applied to recover the application from any attack that ex-
ploited the application’s own vulnerability. Instead, we focus
on the application state preserving against the application-
target attacks launched from compromised drivers. In par-
ticular, the attackers ﬁrst craft exploit code to speciﬁc driver
vulnerability, and then leverage the privilege of the compro-
mised driver to unscrupulously and undetectably manipulate
the service application for commercial beneﬁts. Though this
compromise procedure is indirect and probably more eﬀort-
consuming, it can eﬀectively evade most existing intrusion
detection and/or recovery techniques for the service appli-
cations.
2.2 DRASP Architecture
Figure 1 shows our DRASP architecture with the front
stage replica and the back stage replica connecting to the
RequestsplitterThe front stage replicaThe back stage replicaResponsevalidaterProxySynchronizerStatevalidaterprocessing routine relies on are tampered. As a result, the
response to the request diverges, thus producing immediate
intrusion revenue. For instance, by manipulating the pric-
ing data, the attackers can purchase anything for free. By
persistent, we denote a long-term-beneﬁt-pursuing intrusion
that achieves its goal by tampering state information of the
service applications. For example, by manipulating the ac-
count records, the attacker’s property could be augmented
signiﬁcantly. However, the service responses generated may
not be tampered, since they might not rely on the mali-
ciously manipulated (application) state information.
Validation Mechanism to Detect the Harm During
the transitional harm procedure, since the responses gener-
ated by the victim service application must have been tam-
pered by attackers, we can synchronize the replicas at the
granularity of per packet processing, and verify the responses
of the two service applications at the front tier proxy. The
rational of the response validation is that as long as the
state of the service applications and the service requests are
identical, the replicated applications should generate exactly
the same responses. To defeat persistent attack, we also ver-
ify the state of the service applications, e.g., some critical
memory regions (e.g., metadata, crucial code/data segment)
and persistent data of the applications (opened ﬁles by the
service application process) on the two replicas in an oﬄine
comparison style. Certainly, the prerequisite of the state val-
idation is that a well-designed synchronization mechanism
can ensure the state of the service applications on diﬀerent
replicas in the same rhythm.
3.2 Synchronization of the Front Stage and Back
Stage Replicas
We do not allow the two replicas to run at large by them-
selves. Instead, they are well synchronized at the granularity
of system call abstraction to ensure the correctness of the
response and state validation. There are several abstrac-
tion layers to synchronize OS replicas, such as instruction
level synchronization and memory state transition synchro-
nization. However, they either introduce signiﬁcant runtime
overhead or incur challenges in ﬁltering out irrelevant syn-
chronization points. Hence, we take a loose synchronization
approach, that is, to synchronize system calls made by the
two service applications.
Typically, the replicated service applications will always
issue the same set of system calls when they are in the idle
mode. When entering the busy mode triggered by the same
incoming packets, they will also issue the same system calls
since the processing routine of the packets is exactly the
same. However, if one service application stays one or more
additional cycles in the idle mode than the other replicated
application due to the late arrival of incoming packet, the
system call sequences of them will diverge a little bit. This
divergence can be accumulated, which causes troubles to
system call synchronization of the two replicas. Hence, we
further synchronize the NIC interrupt delivery of the two
replicas, which ensures that OS kernels on the two repli-
cas receive the incoming packet interrupt simultaneously.
Though OS kernels on the two replicas may perform context
switch interchangeably, the service applications will experi-
ence mode transition once it gets scheduled by OS kernel.
The mode transition of the replicated service applications
can be ensured as identical, thus the system call synchro-
nization can be applied eﬀectively.
3.3 Response Validation for Intrusion Detec-
tion
Comparison of responses is widely used in the fault tol-
erance or server validation environment such as server vali-
dation [18] and Splitter [7]. We integrate the comparison of
service applications’ responses into our DRASP architecture
to detect malicious or exploited drivers targeting at service
applications. The two service applications must generate ex-
actly the same responses upon the same request before any
anomaly occurs. The front-tier proxy can replicate and for-
ward requests to both the applications on the two replicas,
and verify the responses from them through comparison.
In this paper, we consider the service application working
on well-known protocols, e.g., HTTP, FTP, etc. However,
our response validation approach can be extended to the
applications based on other protocols with additional eﬀort.
We will consider traﬃc between the service applications and
clients that is transmitted as encrypted HTTPS traﬃc us-
ing SSL protocol to avoid eavesdropping of sensitive infor-