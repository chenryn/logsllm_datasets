addr=Deploy(S.StateT ransT able(k).N extState)
DS=CreateDummyAcceptState()
DS.N extState ← addr
S.StateT ransT able(k).N extState ← DS
end for
Site = CreateSite()
Site.addSegment(S)
Coordinator = GetCoordinator()
Coordinator.AssignSite(Site)
return Coordinator.address
In its simplest (and ineﬃcient) form, an access control au-
tomaton can be segmented to the ﬁnest granularity to best
preserve privacy. In this case, each automaton state is di-
vided into one segment and deployed at one site. Algorithm
1 demonstrates a recursive algorithm for ﬁnest-granularity
automaton segmentation and deployment. As an example,
the global automaton shown in Figure 2 is partitioned into
11 segments as shown in Figure 4. For instance, Site 0
(cid:304)
0
0
1
0
2
categories
1
1
0
0
1
regions
5
1
1
*
0
0
*
3
4
name
0
0
1
0
7
1
1
6
item
1
1
0
0
0
1
1
site
0
0
192.168.0.5
8
1
0
1
0
location
quantity
name
0
0
description
192.168.0.1
192.168.0.3 
192.168.0.3
192.168.0.3
192.168.0.3
1
0
1
0
0
1
0
1
1
0
1
0
0
1
0
1
9
10
11
5
1
1
*
0
0
6
item
0
0
1
1
Addr of Site 6
Site 5
Addr of Site 7
Site 6
0
1
1
site
0
0
categories
1
0
1
0
1
regions
Addr of Site 1
Site 0
Addr of Site 2
Site 1
Addr of Site 5
2
1
1
(cid:304)
0
0
*
3
4
1
1
1
1
name
0
0
1
0
Addr of Site 3
Site 2
7
1
1
Addr of Site 8Addr of Site 9
location
quantity
name
0
0
description
Addr of Site 4
Site 3
192.168.0.5
Site 4
8
9
1
0
1
0
1
0
1
0
192.168.0.1
192.168.0.3
Site 8
192.168.0.3
Site 9
10
0
1
11
0
1
0
1
0
1
Addr of Site 10
Addr of Site 11
Site 7
192.168.0.3
Site 10
192.168.0.3
Site 11
Figure 4: An example to illustrate automaton seg-
mentation scheme.
holds state 0 of the global automaton (symbol “site”); and a
dummy accept state which holds the address of Site 1.
Example 3. To illustrate how decentralized automata en-
forces access control, let us use the query Q: “/site/regions
/asia/item[name=’Abacavir’]/location”. When Q arrives
at Site 0, the ﬁrst XPath step “/site” is accepted. As the
dummy accept state of Site 0 points to Site 1, Q is for-
warded to Site 1. Then, the second XPath step “/regions”
is accepted and the corresponding dummy accept state di-
rects the remaining query to Site 5. There, Site 5 accepts
“/asia” (wildcard “*” matches any input token) and for-
wards Q to Site 6. At Site 6, element name “item” is ﬁrst
accepted. Since the automaton segment does not carry any
predicate states, the predicate from Q is kept as it is. Fi-
nally, “/location” is accepted at Site 7, and Site 10 forwards
the query to data server at 192.168.0.3. Note that, “Aba-
cavir” is a medicine used in AIDS treatment. Therefore,
the query Q, as well as related data and metadata, are all
highly private and sensitive information. Under the automa-
ton segmentation scheme, metadata privacy is preserved by
dividing metadata into multiple sites. In Section 4.4, we will
further analyze this example to show how we protect query
2
and data privacy.
If there are wildcard “*” or descendent “//” in the query,
access control enforcement in the partitioned automaton be-
comes more complicated. The query may match multiple
keywords at a particular site (e.g., the “/*” step in a query
matches with all tokens in the automaton segment). Thus
the query is split into several branches, each of which contin-
ues to be processed in the automaton independently. The
process is similar to the un-partitioned global automaton.
For details, refer to [13].
Distribution and Replication of Automaton Segments
In our design, a site is a logical unit which hosts one segment
of the global automaton. A physical network peer which
holds one or more logical site is called a coordinator. Espe-
cially, the coordinator holding the root node of the global
automaton is called the root-coordinator; the coordinators
with the accept states of the global automaton are called
the leaf-coordinators; and the others are called intermediate
coordinators.
Sites could be ﬂexibly replicated. For a site Si, we ﬁrst
(cid:2)
make a replication S
i. Then, for all sites that forward queries
to Si (i.e., whose dummy accept states point to Si), we
(cid:2)
change the pointers, re-route some of them to S
i. For in-
stance, we can create a replication of Site 0 of Figure 4
without changing any other site since it is the root. On the
other hand, if we create a replication of Site 1, we need to
change the dummy accept state of Site 0 to route a portion
of the queries to this replicated site. Moreover, replicates
of diﬀerent logical sites could reside at one physical node.
For instance, Site 2 and Site 6 in Figure 4 could be hosted
at one coordinator and do not hurt the ACR privacy. This
is because the two segments they are holding do not belong
to the same rule, and combining them cannot provide any
extra hint on ACR.
However, for simplicity, throughout the rest of the paper,
we assume that each coordinator only host one site, and we
do not consider replications of sites. Therefore, we do not
specially distinguish logical sites and physical coordinators
anymore, and we will mainly use the term coordinator.
We also need to clarify that our PPIB approach supports
co-existence of multiple schemas. All access control rules
based on the same XML schema are captured in one au-
tomaton; and independent automatons are constructed for
rules from diﬀerent XML schemas. Independent automatons
could be merged by combining the root coordinators.
4.3 Query Segment Encryption Scheme
To protect user/data privacy that may be revealed by
the queries, we propose a query segment encryption scheme,
which is a good instance that combines data avoidance prin-
ciple (i.e. encrypting sensitive data) with multilateral secu-
rity principle (i.e. multiple parties cooperate to take one
task, while each party only holds one share of sensitive in-
formation).
When an XPath query is being processed at a particu-
lar state in the NFA, the query content naturally splits into
two parts: XPath steps that has been processed by NFA
(accepted or rewritten), and XPath steps to be processed.
Although the whole query will be forwarded to the coordi-
nator who holds the next NFA state, NFA will only take the
unprocessed steps as input. The idea of query segment en-
cryption scheme is to encrypt the processed part of a query
so that subsequent coordinators have only an incomplete
view of the query content. For encryption, a trusted au-
thority is needed for key distribution and management. In
our scheme, this trustee is the super node.
The notions used for encryption are deﬁned as follows:
both the public and private keys of an XML query are de-
noted as P ubQ and P rivQ, respectively; then the corre-
sponding encryption and decryption of string M are de-
noted as Encrypt(M, P ubQ) and Decrypt(M, P rivQ), re-
spectively; for the symmetric encryption scheme, we denote
the encryption and decryption applied to message M with
secret key K as EK (M ) and DK (M ), respectively.
When an XPath query Q = s1s2...sn ﬁrst arrives at the
root-coordinator, it becomes the input to the automata seg-
(cid:2)
ment. Suppose automata segment takes s1, generates s
1 and
(cid:2)
reaches the dummy accept state (when s1 is accepted, s
1 =
(cid:2)
s1, when s1 is rewritten, s
1 <> s1). The root-coordinator
then requests a new P ubQ from the super node and encrypts
(cid:2)
(cid:2)
s
1 as (EK1 (s
1), Encrypt(K1, P ubQ)), where K1 is the secret
key of the root-coordinator. Both encrypted part and the
remaining query (s2...sn) are forwarded to the next coordi-
nator. If the query passes all intermediate-coordinators and
reaches the leaf-coordinator, the whole query will be en-
(cid:2)
(cid:2)
(cid:2)
crypted as EK1 (s
2), ..., EKn (s
1), EK2 (s
n). Thus, the entire
query content is hidden from the leaf-coordinator.
4.4 Query Brokering Process
Conceptually, the overall query brokering process can be
described as four phases.
• In Phase 1, an end user sends his/her XML query to
the local broker since the user has no idea about data
and data server distribution. The broker checks user
identity and replaces user authentication information
with “role ID”. Before sending the query to the broker,
user encrypts it with root-coordinator’s public key so
that the broker cannot see the query content. User
also generates a new public key and passes it with the
query.
• In Phase 2, the broker forwards the encrypted query,
user’s role ID and public key to the root-coordinator,
which is the entrance of the coordinator tree. The
broker also encrypts user location with symmetric en-
cryption, and attaches its own address to the query.
In this way, the broker works in a similar way as an
anonymizer in [27] – none of the coordinators is able
to infer who created the query.
• In Phase 3, the encrypted query is recovered by the
root-coordinator with its own private key, and then
processed in the coordinator-tree, as described in Sec-
tions 4.2 and 4.3. Once it arrives at the accept state
of any leaf-coordinator, the query is sent to destined
data servers. In this phase, query content privacy is
protected by the query segment encryption scheme in
Section 4.3.
• Finally, in Phase 4, data server decrypts the secret
keys (K1, ..., Kn) of the coordinators with the private
key from the super node, and then decrypts all the en-
crypted segments (s1, ..., sn) of the query with these
secret keys. The XML answer is encrypted with user’s
public key (generated in phase 1) to protect data conﬁ-
dentiality, and returned to the user through local bro-
ker.
Example 4. Let us revisit Example 3. The user is asking
for the location of item “Abacavir”, a medicine typically used
in AIDS treatment. Obviously, the user does not want any-
one to know that she queried for this item. Moreover, it is a