title:PrivAnalyzer: Measuring the Efficacy of Linux Privilege Use
author:John Criswell and
Jie Zhou and
Spyridoula Gravani and
Xiaoyu Hu
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
PrivAnalyzer: Measuring the Efﬁcacy of Linux
Privilege Use
John Criswell
Jie Zhou
University of Rochester
PI:EMAIL
University of Rochester
PI:EMAIL
Spyridoula Gravani
University of Rochester
PI:EMAIL
Xiaoyu Hu
BitFusion.io Inc.
PI:EMAIL
Abstract—Operating systems such as Linux break the power
of the root user into separate privileges (which Linux calls
capabilities) and give processes the ability to enable privileges
only when needed and to discard them permanently when the
program no longer needs them. However, there is no method of
measuring how well the use of such facilities reduces the risk of
privilege escalation attacks if the program has a vulnerability.
This paper presents PrivAnalyzer, an automated tool that
measures how effectively programs use Linux privileges. Priv-
Analyzer consists of three components: 1) AutoPriv, an existing
LLVM-based C/C++ compiler which uses static analysis to
transform a program that uses Linux privileges into a program
that safely removes them when no longer needed, 2) ChronoPriv,
a new LLVM C/C++ compiler pass that performs dynamic
analysis to determine for how long a program retains various
privileges, and 3) ROSA, a new bounded model checker that can
model the damage a program can do at each program point if an
attacker can exploit the program and abuse its privileges. We use
PrivAnalyzer to determine how long ﬁve privileged open-source
programs retain the ability to cause serious damage to a system
and ﬁnd that merely transforming a program to drop privileges
does not signiﬁcantly improve security. However, we ﬁnd that
simple refactoring can considerably increase the efﬁcacy of Linux
privileges. In two programs that we refactored, we reduced the
percentage of execution in which a device ﬁle can be read and
written from 97% and 88% to 4% and 1%, respectively.
I. INTRODUCTION
Commodity operating systems such as Windows [1] and
Linux [2] mediate a process’s access to system objects such
as ﬁles, pipes, and sockets. Signiﬁcant research has been
devoted to designing access controls and privilege models
which reduce the damage that an application can cause should
an attacker exploit a vulnerability within the application.
Examples of such access controls include Unix discretionary
access control [2], [3], ﬁne-grained privileges ﬁrst developed
for compartmented mode workstations [4] and now deployed
in Windows and Linux [1], [2], and capabilities such as those
found in Capsicum on FreeBSD [5].
Linux privileges (called capabilities) [6] are intended to
reduce the risk of privilege escalation attacks, and they are
increasingly being used in the deployment of inter-application
isolation mechanisms such as Linux containers [7]. Docker [8],
a major container platform, uses Linux privileges to reduce
the likelihood of a bug in a container leading to a privilege
escalation exploit. Docker removes the need for privileged
containers by assigning only the necessary capabilities for
launching execution and allows for dynamic addition/removal
as necessary [8]. Unfortunately, it is unclear how to effectively
use capabilities and beneﬁt from such a design.
Currently, programmers manually reason about how long
their programs retain privileges and what damage an attacker
could do with those privileges if the program has an exploit.
Such reasoning must be done for every possible type of attack
and must account for the process’s privileges, user IDs, group
IDs, and the owners, groups, and permissions of directories,
ﬁles, devices, and other objects. Manual analysis is error-
prone and fails to scale. It also fails to provide a quantiﬁable
metric that can be used to compare different software designs.
While there are tools that evaluate the efﬁcacy of mandatory
access controls [9], [10], there are no tools, to the best of
our knowledge, that evaluate how much security improves
when real programs use Linux privileges. Consequently, the
value of Linux privileges is unknown. This may be why many
developers forgo using them.
To address this problem, we have developed an auto-
mated tool named PrivAnalyzer. PrivAnalyzer consists of
three components: 1) AutoPriv, 2) ChronoPriv, and 3) ROSA.
AutoPriv [11] is an existing compiler that computes which
privileges are still usable by a program at each program point
and transforms the program to permanently drop privileges
when no longer needed. We feed AutoPriv’s output to the
second component, ChronoPriv, our new compiler pass that
records the number of instructions executed with a speciﬁc
privilege set along with the process’s user IDs and group
IDs. The third component, ROSA (Rewrite of Objects for
Syscall Analysis), is a new bounded model checker, written
in Maude [12], that models the Linux system call API and its
privileges. Given a set of system calls that an application is
allowed to make, the number of times it is allowed to make
each system call, and the privileges each system call is allowed
to use, ROSA can determine whether an application could
put the system into a speciﬁed compromised state. ROSA
models processes, directories, ﬁles, sockets, and a subset of
system calls that operate upon these objects. ROSA takes
ChronoPriv’s output as its input along with a description of a
compromised system state and decides whether the program,
if it were compromised, could put the system into the compro-
mised state. Altogether, PrivAnalyzer can determine whether
a vulnerability could put the system into a compromised state
and for how long the program poses such a risk. Programmers
can use PrivAnalyzer to determine the ramiﬁcations of using
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00065
593
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:55 UTC from IEEE Xplore.  Restrictions apply. 
various privileges within their programs.
Using PrivAnalyzer, we modeled four privilege escalation
attacks on ﬁve open-source programs that were modiﬁed to
use Linux privileges. Our results show that simply adding
code to enable privileges when needed and disabling them
permanently when no longer needed is insufﬁcient; programs
such as passwd and su retain powerful privileges for over
88% of their execution that an attacker could use to read
and write device ﬁles such as /dev/mem. Subsequently, we
manually analyzed two of these programs and discovered that
the poor results are primarily due to design decisions motivated
by the fact that most Unix systems only have a root user
and no privileges. With some simple refactoring, we modiﬁed
passwd and su so that they used these powerful privileges
for only 4% of their execution, signiﬁcantly decreasing the
window of opportunity in which an attacker could mount a
privilege escalation attack on these programs.
To summarize, our contributions are as follows:
• We present an automated tool, PrivAnalyzer, that mea-
sures how effectively programs use Linux privileges.
It aims to help security-critical software developers to
minimize privileges use. We describe the design and
implementation of the ChronoPriv dynamic analysis and
the ROSA bounded model checker which we added to
AutoPriv [11] to create PrivAnalyzer.
• We evaluate the performance of the ROSA bounded
model checker.
• We use PrivAnalyzer to quantitatively show that merely
using the minimum set of Linux privileges is insufﬁcient
in mitigating privilege escalation attacks. Programs such
as passwd and su maintain powerful privileges for 88%
or more of their execution.
• We study and refactor two programs to use Linux priv-
ileges more effectively. PrivAnalyzer shows that these
refactored programs use powerful privileges for 4% of
their execution.
• We summarize two lessons learnt
from refactoring
passwd and su that should help programmers write
software that better resists privilege escalation attacks.
The rest of this paper is organized as follows: Sections II,
III, and IV describe Linux privileges, our attack model,
and background on building model checkers in Maude. Sec-
tions V and VI describe the design and implementation of
PrivAnalyzer. Section VII presents our evaluation on security
improvements when using Linux privileges and how to refactor
applications to improve the efﬁcacy of Linux privileges. Sec-
tion VIII evaluates PrivAnalyzer’s performance. Sections IX
and X describe related and future work; Section XI concludes.
II. LINUX PRIVILEGES
Linux divides the power of the root user into separate
privileges (which Linux calls capabilities) [2]. Each privilege
bypasses a subset of the access control rules which the root
user on a traditional Unix system can bypass. For example, the
CAP_CHOWN privilege allows a process to change the owner
of a ﬁle to any user even if the process is owned by a non-root
594
user. Likewise, the CAP_SETUID privilege allows a process
to set its effective, real, and saved user IDs to any value.
Each Linux process has three sets of privileges [6]:
• Effective: This is the privilege set that the operating sys-
tem kernel checks when making access control decisions.
• Permitted: This is the set of privileges that the process is
allowed to use in its effective set.
• Inheritable: This privilege set limits the privileges that a
process can acquire when executing a new program.
The Linux kernel provides system calls which allow a
process to change its effective and permitted sets [2]. The
effective privilege set must always be a subset of the permitted
privilege set, thereby making the permitted set the feature that
limits the privileges that can be enabled and used within the
effective set [6]. A process can only change its permitted set
to a subset of its current value i.e., a process can remove
privileges from its permitted set but cannot add privileges to
its permitted set [6].
Borrowing terminology from the compartmented mode
workstation [4], we say a process raises a privilege when it
turns it on in the effective set and lowers a privilege when
it disables it
in the effective set. The PitBull Foundation
system [13] remove operation disables a privilege in both the
effective and permitted sets; a removed privilege is no longer
in the permitted set and can never again be acquired by the
process until it executes a new program [6].
We use three wrappers around the Linux system calls that
manipulate a process’s privileges taken from the AutoPriv
compiler project [11]:
• priv raise: Enable one or more privileges in the effective
• priv lower: Disable one or more privileges in the effec-
privilege set.
tive privilege set.
• priv remove: Disable one or more privileges in both the
effective and permitted privilege sets.
III. ATTACK MODEL
Our attack model is a modiﬁed version of the attack model
from the AutoPriv compiler [11]. We assume a strong at-
tacker that can use memory safety attacks against applications.
Consequently, our model allows an attacker to corrupt the
arguments to system calls and to call system calls in an order
not permitted by the original application’s control ﬂow [14],
[15]. Our attack model also permits an attacker to inject code
into an application. However, since there are defenses that can
limit the system calls invoked by a process [16], our model
assumes that attackers can only use system calls used by the
original program [17].
As Hu et al. [11] explain, a consequence of the AutoPriv
attack model is that attackers can use system calls to enable
any privilege in the effective set that still remains in the
process’s permitted set [2]. We assume that Linux kernel is
part of the trusted computing base (TCB), i.e., once a privilege
is removed from the permitted set, it can not be added back.
Our work therefore measures the amount of damage that an
attacker can perform with the privileges in the permitted set.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:55 UTC from IEEE Xplore.  Restrictions apply. 
Compromised 
System State
Program
AutoPriv 
Static Privilege Analysis
Program
ChronoPriv 
Dynamic Privilege Analysis
Privilege 
Sets
ROSA 
Exploit Analyzer Model Checker
Privileged 
Instruction 
Counts
Risk 
Assessment
Fig. 1: PrivAnalyzer Architecture
IV. MAUDE BACKGROUND
Maude [12] is a term rewriting language for creating formal
veriﬁcation tools. Maude programs specify the format of
abstract syntax trees representing terms and rules that rewrite,
or transform, abstract syntax trees from one form to another.
Maude supports both equational rewrite rules and term rewrite
rules. Equational rewrite rules are used to model deterministic
behavior; repeated application of equational rewrite rules must
eventually yield a term that has a unique normal form that
equational rewrite rules cannot rewrite further. Term rewrite
rules permit Maude to model non-deterministic computation
and do not need to yield a unique normal form.
Maude [12] provides a search command that takes a term
representing the initial state of a system and a pattern for what
could be the end state of the system and searches for whether
a set of rewrite rules will take the system from the initial term
to a term matching the search criteria. This feature allows
Maude programs to be used as model checkers: if terms model
the state of a system and the rewrite rules model transitions
between those states, then a user can search the space of terms
for states matching a speciﬁed criteria.
To ease modeling of concurrent systems, Maude provides
syntactic sugar for expressing a term rewriting system as an
associative set of objects that can consume messages from an
associative set of messages [12]. While primarily designed for
modeling concurrent systems, we leverage this syntactic sugar
to build our bounded model checker with less Maude code.
V. DESIGN
Figure 1 shows the PrivAnalyzer system. PrivAnalyzer ﬁrst
analyzes the program with AutoPriv [11]. AutoPriv takes a
program that uses Linux privileges, uses static analysis to ﬁnd
the points in the program that use privileges, and computes
the program points at which each privilege becomes dead,
i.e., points after which the program will never use the privilege
again. AutoPriv computes this information so that it can safely
insert code into a program that removes privileges from the
permitted set when they are no longer needed, making the
privileges inaccessible to attackers.
Once the AutoPriv component has ﬁnished, PrivAnalyzer
feeds the transformed program from AutoPriv into Chrono-
595
Priv. ChronoPriv measures the number of instructions a pro-
gram executes dynamically while a certain privilege set is
live i.e., the privileges are in the permitted set. ChronoPriv
also records the user and group IDs that the process uses
while various privileges are live. ChronoPriv creates a report