# Title: Efficient Intrusion Detection using Automaton Inlining

## Authors:
- Rajeev Gopalakrishna
- Eugene H. Spafford
- Jan Vitek

### Affiliations:
Center for Education and Research in Information Assurance and Security  
Department of Computer Sciences  
Purdue University  
{rgk, spaf, jv}@cs.purdue.edu

---

## Abstract

Host-based intrusion detection systems (IDS) aim to identify attacks by detecting program behaviors that deviate from expected patterns. While the concept of on-the-fly behavior validation and immediate termination of errant tasks is appealing, existing systems often suffer from accuracy and efficiency issues. To achieve broader acceptance, several technical advancements are necessary. This paper focuses on automated, conservative intrusion detection techniques that do not require human intervention and avoid false positives.

We present a static analysis algorithm for constructing a flow- and context-sensitive model of a program, enabling efficient online validation. Context-sensitivity is crucial to minimize the number of impossible control-flow paths accepted by the IDS, as these paths can be exploited by attackers to evade detection. A key consideration for real-time intrusion detection is to minimize the performance overhead caused by monitoring. Our inlined automaton model (IAM) offers a good balance between accuracy and performance. For a 32K line program, the monitoring overhead is negligible. Although the space requirements of a naive IAM implementation can be high, compaction techniques can significantly reduce this footprint.

---

## 1. Introduction

The goal of a host-based IDS is to identify attempts to subvert processes running on the system. Anomaly-based IDS achieve this by detecting deviations from known normal behavior. IDS algorithms typically monitor a program by observing event traces and comparing them to expected behavior. Most approaches use sequences of system calls to characterize program behavior. "Normal" program traces can be modeled through dynamic analysis [2, 5, 7, 10, 11, 12, 19], manual analysis [8], or static program analysis [1, 3, 4, 16, 17]. All methods must address false positives (when a legal event is deemed invalid) and false negatives (when an attack goes undetected). False negatives are undesirable, but false positives can be more harmful as they disrupt correct program execution. Dynamic and manual analyses can be accurate but are prone to false positives. Static analysis techniques, on the other hand, can construct conservative models that guarantee no false positives.

The design space for automated program-model construction must balance accuracy, scalability, and efficiency. Accuracy is measured by the number of false negatives, scalability by the size of programs the algorithm can handle, and efficiency by the runtime overhead of monitoring. Two aspects of static analysis affect accuracy: flow-sensitivity and context-sensitivity. Flow-sensitive models consider the order of statement execution, while context-sensitive models track the calling context of functions. 

Wagner and Dean [17] describe a basic flow-insensitive model where the expected behavior is the regular language \( S^* \) over the set of program events \( S \). If a program issues a system call outside \( S \), an exception is raised. This approach, while sound and efficient, is imprecise because it cannot detect attacks using system calls within \( S \). Therefore, we focus on flow-sensitive models that differentiate between sequences of system calls and raise alerts if calls are issued out of order.

Context-sensitive models keep track of the calling context of functions, matching function returns with their call sites. In context-insensitive models, event sequences can start at one call site, go through a called procedure, and return to a different call site, leading to inaccurate traces. Wagner and Dean [17] used non-deterministic finite automata (NFA) to represent program behavior, which are flow-sensitive but lack call-return semantics. Pushdown automata (PDA) models, while more accurate, have prohibitive runtime costs. Recent works [1, 4] have reduced these overheads, but some monitored programs still run more than twice as slowly as the original unmonitored code.

To make mimicry attacks more difficult, IDSs must either decrease the granularity of observed events or perform inferences on the values of arguments to 'dangerous' system calls. These approaches improve accuracy but increase the state needed for verification, further increasing runtime costs.

In this paper, we introduce the Inlined Automaton Model (IAM), which is as accurate as a PDA (up to recursion) and as efficient as an NFA. The contributions of this paper are:

- **Inlined Automaton Model (IAM):** A flow- and context-sensitive model that is as accurate as a PDA up to recursion.
- **Implementation:** An IAM implementation based on library interposition, tracking library function invocations for more frequent and accurate modeling.
- **Empirical Evaluation:** IAM has been evaluated on benchmark programs, showing improved runtime performance and scalability.
- **Automata Compaction Techniques:** Techniques to reduce the space overhead of IAMs, allowing users to tune the footprint with some potential loss of performance.

The remainder of the paper is organized as follows: Section 2 describes existing approaches to statically-constructed model-based anomaly detection. Section 3 details the construction of IAM, and Section 5 discusses automata compaction techniques. Implementation issues, a solution to reducing non-determinism in IAM, and experimental results are covered in Sections 4, 6, and 7, respectively. Section 8 discusses the challenges faced by existing approaches, and Section 9 presents the conclusion.

---

## 2. Static Analysis-based Automated Intrusion Detection

Static analysis techniques can be used to construct conservative models of program behavior in an automated fashion. The seminal work by Wagner and Dean [17] considers four models: trivial, digraph, callgraph, and abstract stack. The trivial model represents expected behavior using the regular language \( S^* \) over the set of system calls \( S \), ignoring the ordering of calls. The digraph model precomputes possible consecutive pairs of system calls from the control flow graph (CFG) and checks at runtime if the pair (previous, current) is in the model. The callgraph model uses an NFA derived from the CFG, but its context-insensitivity leads to impossible paths. The abstract stack model uses a PDA to eliminate such paths, but it incurs prohibitive space and time costs due to maintaining all possible stack configurations.

Giffin et al. [3] propose optimizations to increase the precision of NFA models and the efficiency of PDAs. These include renaming system calls, argument recovery, and inserting null calls to provide additional context. The Dyck model [4, 1] improves on null call insertion by adding unique push/pop symbols around non-recursive call sites, achieving context-sensitivity. The VPStatic model [1] captures context using a virtual stack list, reducing the overhead of stack walks compared to the Dyck model.

---

## 3. The Inlined Automaton Model (IAM)

The Inlined Automaton Model (IAM) is a flow- and context-sensitive, statically-constructed model of program behavior that is simple, scalable, and efficient. The model is generated by first constructing NFAs for each user function, then inlining call sites with the models of the called functions. This process is repeated until all calls are expanded. Recursive calls are treated specially to ensure termination.

Figure 2 shows an example program and its NFA representation. The NFA is a union of statement-level CFGs for each function, with unique entry and exit nodes. Call nodes are connected to the entry nodes of invoked functions, and exit nodes are connected to return nodes. Context-insensitivity arises because only a single copy of a function's CFG is maintained, leading to impossible paths.

Formally, an \(\epsilon\)-NFA \( N \) for a program \( P \) is represented as \( N = (Q, \Sigma, \delta, q_0, F) \) [6], where:
- \( Q \) is a finite set of states,
- \( \Sigma \) is a finite set of input symbols,
- \( q_0 \in Q \) is the start state,
- \( F \subseteq Q \) is a set of final states,
- \( \delta \) is the transition function that takes a state \( q \in Q \) and an input symbol in \( \Sigma \cup \{\epsilon\} \) and returns a subset of \( Q \).

We associate a type \( T \) with every state in the NFA, representing entry, exit, call, and return nodes. The successor and predecessor of a state are defined, and fan-in and fan-out are calculated accordingly.

The IAM representation is obtained by inlining all function calls, resulting in a context-sensitive model. Formally, an \(\epsilon\)-NFA \( N \) for a program \( P \) given by \( N = (Q, \Sigma, \delta, q_0, F) \) is transformed into an \(\epsilon\)-IAM \( M \) given by \( M = (Q', \Sigma, \delta', q_0, F') \) with an additional property ensuring that entry and exit nodes of non-recursive and non-main functions have specific fan-in and fan-out properties.

The final IAM representation includes only system call nodes and transitions, discarding other nodes. \(\epsilon\)-reduction is performed to obtain an \(\epsilon\)-free IAM. The definitions of successor and predecessor remain the same, excluding \(\epsilon\) as an input symbol.

Inlining can result in state explosion, but this can be mitigated by restricting the model to observable behavior, such as system calls or library function calls. Section 5 discusses space compaction techniques.

Recursion is a limitation of inlining. To ensure termination, we perform inlining depth-first and terminate on detecting recursion. We connect the call node of the repeating function to the entry node of its previously inlined instance and the exit node to the current return node, modeling the winding phase of recursion. We also connect the call and return nodes to model the unwinding phase. Examples of recursion bounding for direct and indirect recursion are shown in Figures 4 and 5.

Our approach can be related to the formalization in [1].

---

[Note: Figures 1, 2, 3, 4, and 5 should be included in the document for visual reference.]

---

Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05)  
1081-6011/05 $ 20.00 IEEE