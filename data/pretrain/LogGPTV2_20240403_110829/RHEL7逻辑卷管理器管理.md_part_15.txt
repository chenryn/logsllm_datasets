  --- Logical volume ---
  LV Name                /dev/new_vg/lvol0
  VG Name                new_vg
  LV UUID                LBy1Tz-sr23-OjsI-LT03-nHLC-y8XW-EhCl78
  LV Write Access        read/write
  LV snapshot status     source of
                         /dev/new_vg/newvgsnap1 [active]
  LV Status              available
  # open                 0
  LV Size                52.00 MB
  Current LE             13
  Segments               1
  Allocation             inherit
  Read ahead sectors     0
  Block device           253:2
```
::: para
默认情况下，`lvs`{.command}
命令显示原始卷及每个快照卷目前使用的百分比。以下示例显示了系统
`lvs`{.command} 命令的默认输出结果，该系统中包括逻辑卷
`/dev/new_vg/lvol0`{.filename}，为其创建的快照为
`/dev/new_vg/newvgsnap`{.filename}。
:::
``` screen
。
# lvs
  LV         VG     Attr   LSize  Origin Snap%  Move Log Copy%
  lvol0      new_vg owi-a- 52.00M
  newvgsnap1 new_vg swi-a-  8.00M lvol0    0.20
```
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
因为快照的大小随原始卷的变化而变化，常规使用 `lvs`{.command}
命令监控快照卷的百分比，以保证不会满溢就变得很重要。如果快照 100%
填满则会丢失全部数据，因为写入原始卷的未更改部分一定会破坏快照。
:::
:::
:::
::: para
除快照本身填满后会失效外，所有那个快照设备中挂载的文件系统都会被强制卸载，以避免访问挂载点时不可避免的文件系统错误。另外，可在
`lvm.conf`{.filename} 文件中指定
`snapshot_autoextend_threshold`{.literal}
选项。这个选项允许在剩余快照空间低于所设定阈值时可随时自动扩展快照。这个功能要求在卷组中包含尚未分配的空间。
:::
::: para
LVM
不允许您创建超过原始元与该卷所需元数据大小总和的快照卷。同样，自动扩展快照也不会将快照卷大小增大为超过该快照所需最大计算大小。快照增长到足以覆盖原始卷后，则不会监控其自动扩展。
:::
::: para
设定 `lvm.conf`{.filename} 文件本身提供的
`snapshot_autoextend_threshold`{.literal} 和
`snapshot_autoextend_percent`{.literal} 的详情。有关
`lvm.conf`{.filename} 文件的详情，请查看 [附录 B, *LVM
配置文件*](#config_file.html){.xref}。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#thinly_provisioned_snapshot_creation}4.4.7. 创建精简配置快照卷 {.title}
:::
[]{#LVM_CLI.html#idm140426149346160
.indexterm}[]{#LVM_CLI.html#idm140426149344720 .indexterm}
::: para
Red Hat Enterprise Linux
提供精简配置快照卷支持。有关精简快照卷的优点及局限，请参看 [第 2.3.6 节
"精简配置快照卷"](#LVM_components.html#thinly-provisioned_snapshot_volumes){.xref}。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
本小节提供用来创建并增大精简配置快照据的基本命令概述。有关 LVM
精简配置的详情，以及在精简配置逻辑卷中使用 LVM 命令及程序的详情，请查看
`lvmthin`{.command}(7) man page。
:::
:::
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
创建精简快照卷时，不能指定该卷的大小。如果指定 size
参数，所创建快照就不是精简快照卷，也不会使用精简池保存数据。例如：命令
`lvcreate -s vg/thinvolume -L10M`{.literal}
不会创建精简快照，即使原始卷是精简卷也不行。
:::
:::
:::
::: para
可为精简配置原始卷或非精简配置逻辑卷创建精简快照。
:::
::: para
可使用 `lvcreate`{.command} 命令的 `--name`{.option}
选项指定快照卷名称。下面的命令为精简配置逻辑卷
`vg001/thinvolume`{.literal} 创建名为 `mysnapshot1`{.literal}
的精简配置快照卷。
:::
``` screen
# lvcreate -s --name mysnapshot1 vg001/thinvolume
  Logical volume "mysnapshot1" created
# lvs
  LV          VG       Attr     LSize   Pool       Origin     Data%  Move Log Copy%  Convert
  mysnapshot1 vg001    Vwi-a-tz   1.00g mythinpool thinvolume   0.00                        
  mythinpool  vg001    twi-a-tz 100.00m                         0.00                        
  thinvolume  vg001    Vwi-a-tz   1.00g mythinpool              0.00
```
::: para
精简快照卷与其他精简卷有同样的特征。您可以单独激活、扩展、重命名、删除该卷，甚至可以为该卷生成快照。
:::
::: para
默认情况下，正常激活命令会跳过快照卷。有关控制快照卷激活的详情，请查看
[第 4.4.17 节 "控制逻辑卷激活"](#LVM_CLI.html#LV_activate){.xref}。
:::
::: para
还可以在非精简配置逻辑卷中创建精简配置快照。因为非精简配置逻辑卷不存在于精简池中，因此将其视为*外部原始卷*。外部原始卷可由很多精简配置快照卷使用并共享，即使这些快照卷来自不同的精简池。创建该精简配置快照时，外部原始卷必须为不活跃卷，且处于只读状态。
:::
::: para
要创建外部原始卷的精简配置快照，则必须指定 `--thinpool`{.option}
选项。下面的命令创建只读、不活跃卷 `origin_volume`{.literal}
的精简快照卷。该精简快照卷名为 `mythinsnap`{.literal}。然后逻辑卷
`origin_volume`{.literal} 会成为卷组 `vg001`{.literal} 中精简快照卷
`mythinsnap`{.literal} 的精简外部原始卷，使用现有精简池
`vg001/pool`{.literal}。因为原始卷必须与该快照卷处于同一卷组，因此不需要在指定原始逻辑卷时指定该卷组。
:::
``` screen
# lvcreate -s --thinpool vg001/pool origin_volume --name mythinsnap
```
::: para
可使用下面的命令创建第一个快照卷的第二个精简配置快照卷。
:::
``` screen
# lvcreate -s vg001/mythinsnap --name my2ndthinsnap
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#snapshot_merge}4.4.8. 合并快照卷 {.title}
:::
::: para
可使用 `lvconvert`{.command} 命令的 `--merge`{.option}
选项将快照合并到其原始卷中。如果原始卷及快照卷都没有打开，则会立即开始合并。否则会在第一次激活原始卷或快照卷，且两者均为关闭状态时开始合并快照。将快照合并到无法关闭的原始卷时，比如
root
文件系统，会延迟到下次激活该原始卷时方才进行。合并开始时，得到的逻辑卷会有原始卷的名称、次要号码及
UUID。在合并过程中，对原始卷的读取或者写入直接指向要合并的快照。合并完成后，则会删除合并的快照。
:::
::: para
下面的命令将快照卷 `vg00/lvol1_snap`{.literal} 合并到期原始卷中。
:::
``` screen
# lvconvert --merge vg00/lvol1_snap
```
::: para
可在命令行中指定多个快照，或者使用 LVM
对象标签将多个快照合并到其各自的原始卷中。在下面的示例中，逻辑卷
`vg00/lvol1`{.literal}、`vg00/lvol2`{.literal} 和 `vg00/lvol3`{.literal}
均使用 `@some_tag`{.literal}
标记。下面的命令将该快照逻辑卷按顺序合并到所有三个卷中：即
`vg00/lvol1`{.literal}，然后 `vg00/lvol2`{.literal}，然后
`vg00/lvol3`{.literal}。如果使用 `--background`{.option}
选项，所有快照逻辑卷合并操作都应同时开始。
:::
``` screen
# lvconvert --merge @some_tag
```
::: para
有关标记 LVM 对象的详情，请查看 [附录 C, *LVM
对象标签*](#lvm_tags.html){.xref}。有关 `lvconvert --merge`{.command}
命令的详情，请查看 `lvconvert`{.command}(8) man page。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#persistent_numbers}4.4.9. 永久设备号 {.title}
:::
[]{#LVM_CLI.html#idm140426170448096
.indexterm}[]{#LVM_CLI.html#idm140426170447136
.indexterm}[]{#LVM_CLI.html#idm140426170445696
.indexterm}[]{#LVM_CLI.html#idm140426157631488 .indexterm}
::: para
载入模块时会动态分配主要和次要设备号。有些应用程序在块设备永远使用同一设备（主要和次要）号激活状态时工作状态最佳。可使用下面的参数，通过
`lvcreate`{.command} 和 `lvchange`{.command} 命令的指定这些内容：
:::
``` screen
--persistent y --major major --minor minor
```
::: para
使用较大的次要号码以保证尚未将其动态分配给另一个设备。
:::
::: para
如果要使用 NFS 导出文件系统，在导出文件中指定 `fsid`{.option}
参数可避免在 LVM 中设定持久设备号。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#resize_volumes}4.4.10. 重新定义逻辑卷大小 {.title}
:::
[]{#LVM_CLI.html#idm140426180194752
.indexterm}[]{#LVM_CLI.html#idm140426180193312
.indexterm}[]{#LVM_CLI.html#idm140426180191872 .indexterm}
::: para
可使用 `lvreduce`{.command}
命令减小逻辑卷大小。如果该逻辑卷包含一个文件系统，请确定首先减小该文件系统（或使用
LVM GUI），以便逻辑卷总是可至少达到文件系统所需要的大小。
:::
::: para
下面的命令将卷组 `vg00`{.filename} 中逻辑卷 `lvol1`{.filename} 大小减小
3 个逻辑扩展。
:::
``` screen
# lvreduce -l -3 vg00/lvol1
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#LV_change}4.4.11. 更改逻辑卷组的参数 {.title}
:::
[]{#LVM_CLI.html#idm140426150247680
.indexterm}[]{#LVM_CLI.html#idm140426150246240 .indexterm}
::: para
可使用 `lvchange`{.command}
命令更改逻辑卷的参数。有关可更改的参数列表，请查看
`lvchange`{.command}(8) man page。
:::
::: para
可使用 `lvchange`{.command} 命令激活和停用逻辑卷。可使用
`vgchange`{.command} 命令同时激活和停用卷组中的所有逻辑卷，如
[第 4.3.8 节 "更改卷组参数"](#LVM_CLI.html#VG_change){.xref} 所述。
:::
::: para
下面的命令将卷组 `vg00`{.filename} 中卷 `lvol1`{.filename}
的权限改为只读。
:::
``` screen
# lvchange -pr vg00/lvol1
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#LV_rename}4.4.12. 重命名逻辑卷 {.title}
:::
[]{#LVM_CLI.html#idm140426154669760
.indexterm}[]{#LVM_CLI.html#idm140426154668320
.indexterm}[]{#LVM_CLI.html#idm140426154666880 .indexterm}
::: para
请使用 `lvrename`{.command} 命令重命名现有逻辑卷。
:::
::: para
下面的命令将卷组 `vg02`{.filename} 中的逻辑卷 `lvold`{.filename}
重命名为 `lvnew`{.filename}。
:::
``` screen
# lvrename /dev/vg02/lvold /dev/vg02/lvnew
```
``` screen
# lvrename vg02 lvold lvnew
```
::: para
有关在集群的独立节点中激活逻辑卷的详情，请查看 [第 4.7 节
"在集群的独立节点中激活逻辑卷"](#LVM_CLI.html#cluster_activation){.xref}。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#LV_remove}4.4.13. 删除逻辑卷 {.title}
:::
[]{#LVM_CLI.html#idm140426156405744
.indexterm}[]{#LVM_CLI.html#idm140426156404304
.indexterm}[]{#LVM_CLI.html#idm140426114911424 .indexterm}
::: para
请使用 `lvremove`{.command}
命令删除不活跃的逻辑卷。如果目前未挂载该逻辑卷，请在将其删除前卸载该卷。另外，在集群的环境中必须在将其删除前停用逻辑卷。
:::
::: para
下面的命令从卷组 `testvg`{.filename} 中删除逻辑卷
`/dev/testvg/testlv`{.filename}。注：在此情况下尚未停用该逻辑卷。
:::
``` screen
# lvremove /dev/testvg/testlv
Do you really want to remove active logical volume "testlv"? [y/n]: y
  Logical volume "testlv" successfully removed