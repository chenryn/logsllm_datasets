---
title: Redis
background: bg-[#c13b2c]
tags:
    - cache
categories:
    - Database
date: 2020-12-26 19:33:15
intro: |
    This is a [redis](https://redis.io/) quick reference cheat sheet that lists examples of redis commands
plugins:
    - copyCode
---
Getting Started
---------------
### Getting started
Start Redis
```shell script
$ redis-server
```
Connect to redis (Redis CLI client)
```shell script
$ redis-cli
```
Connect to redis (telnet)
```shell script
$ telnet 127.0.0.1 6379
```
### Hello World
#### Ping
```shell script
redis> PING
PONG
```
#### Hello World
```shell script
redis> SET mykey "Hello world"
OK
redis> GET mykey
"Hello world"
```
### Basic Data types
- [Strings](#redis-string-command)
- [Lists](#redis-list-command)
- [Hashes](#redis-hash-command)
- [Sets](#redis-set-command)
- [Sorted Sets](#redis-sorted-set-command)
Redis supports 5 basic data types
Redis String command{.cols-3}
------------
### APPEND 
``` {.wrap}
APPEND key value
```
#### Example
```shell script
redis> EXISTS mykey
(integer) 0
redis> APPEND mykey "Hello"
(integer) 5
redis> APPEND mykey " World"
(integer) 11
redis> GET mykey
"Hello World"
```
Append a value to a key
### BITCOUNT 
``` {.wrap}
BITCOUNT key [start end]
```
#### Example
```shell script
redis> SET mykey "foobar"
"OK"
redis> BITCOUNT mykey
(integer) 26
redis> BITCOUNT mykey 0 0
(integer) 4
redis> BITCOUNT mykey 1 1
(integer) 6
```
Count set bits in a string
### BITFIELD 
``` {.wrap}
BITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]
```
#### Example
```shell script
redis> BITFIELD mykey INCRBY i5 100 1 GET u4 0
1) (integer) 1
2) (integer) 0
```
Perform arbitrary bitfield integer operations on strings
### BITOP 
``` {.wrap}
BITOP operation destkey key [key ...]
```
#### Example
```shell script
redis> SET key1 "foobar"
"OK"
redis> SET key2 "abcdef"
"OK"
redis> BITOP AND dest key1 key2
(integer) 6
redis> GET dest
"`bc`ab"
```
Perform bitwise operations between strings
### BITPOS 
``` {.wrap}
BITPOS key bit [start] [end]
```
#### Example
```shell script
redis> SET mykey "\xff\xf0\x00"
"OK"
redis> BITPOS mykey 0
(integer) 12
redis> SET mykey "\x00\xff\xf0"
"OK"
redis> BITPOS mykey 1 0
(integer) 8
redis> BITPOS mykey 1 2
(integer) 16
redis> set mykey "\x00\x00\x00"
"OK"
redis> BITPOS mykey 1
(integer) -1
```
Find first bit set or clear in a string
### DECR 
``` {.wrap}
DECR key
```
#### Example
```shell script
redis> SET mykey "10"
"OK"
redis> DECR mykey
(integer) 9
redis> SET mykey "234293482390480948029348230948"
"OK"
redis> DECR mykey
ERR ERR value is not an integer or out of range
```
Decrement the integer value of a key by one
### DECRBY 
``` {.wrap}
DECRBY key decrement
```
#### Example
```shell script
redis> SET mykey "10"
"OK"
redis> DECRBY mykey 3
(integer) 7
```
Decrement the integer value of a key by the given number
### GET 
``` {.wrap}
GET key
```
#### Example
```shell script
redis> GET nonexisting
(nil)
redis> SET mykey "Hello"
"OK"
redis> GET mykey
"Hello"
```
Get the value of a key
### GETBIT 
``` {.wrap}
GETBIT key offset
```
#### Example
```shell script
redis> SETBIT mykey 7 1
(integer) 0
redis> GETBIT mykey 0
(integer) 0
redis> GETBIT mykey 7
(integer) 1
redis> GETBIT mykey 100
(integer) 0
```
Returns the bit value at offset in the string value stored at key
### GETRANGE 
``` {.wrap}
GETRANGE key start end
```
#### Example
```shell script
redis> SET mykey "This is a string"
"OK"
redis> GETRANGE mykey 0 3
"This"
redis> GETRANGE mykey -3 -1
"ing"
redis> GETRANGE mykey 0 -1
"This is a string"
redis> GETRANGE mykey 10 100
"string"
```
Get a substring of the string stored at a key
### GETSET 
``` {.wrap}
GETSET key value
```
#### Example
```shell script
redis> INCR mycounter
(integer) 1
redis> GETSET mycounter "0"
"1"
redis> GET mycounter
"0"
```
Set the string value of a key and return its old value
### INCR 
``` {.wrap}
INCR key
```
#### Example
```shell script
redis> SET mykey "10"
"OK"
redis> INCR mykey
(integer) 11
redis> GET mykey
"11"
```
Increment the integer value of a key by one
### MSETNX 
``` {.wrap}
MSETNX key value [key value ...]
```
#### Example
```shell script
redis> MSETNX key1 "Hello" key2 "there"
(integer) 1
redis> MSETNX key2 "new" key3 "world"
(integer) 0
redis> MGET key1 key2 key3
1) "Hello"
2) "there"
3) (nil)
```
Set multiple keys to multiple values, only if none of the keys exist
### INCRBYFLOAT 
``` {.wrap}
INCRBYFLOAT key increment
```
#### Example
```shell script
redis> SET mykey 10.50
"OK"
redis> INCRBYFLOAT mykey 0.1
"10.6"
redis> INCRBYFLOAT mykey -5
"5.6"
redis> SET mykey 5.0e3
"OK"
redis> INCRBYFLOAT mykey 2.0e2
"5200"
```
Increment the float value of a key by the given amount
### MGET 
``` {.wrap}
MGET key [key ...]
```
#### Example
```shell script
redis> SET key1 "Hello"
"OK"
redis> SET key2 "World"
"OK"
redis> MGET key1 key2 nonexisting
1) "Hello"
2) "World"
3) (nil)
```
Get the values of all the given keys
### MSET 
``` {.wrap}
MSET key value [key value ...]
```
#### Example
```shell script
redis> MSET key1 "Hello" key2 "World"
"OK"
redis> GET key1
"Hello"
redis> GET key2
"World"
```
Set multiple keys to multiple values
### INCRBY 
``` {.wrap}
INCRBY key increment
```
#### Example
```shell script
redis> SET mykey "10"
"OK"
redis> INCRBY mykey 5
(integer) 15
```
Increment the integer value of a key by the given amount
### PSETEX 
``` {.wrap}
PSETEX key milliseconds value
```
#### Example
```shell script
redis> PSETEX mykey 1000 "Hello"
"OK"
redis> PTTL mykey
(integer) 1000
redis> GET mykey
"Hello"
```
Set the value and expiration in milliseconds of a key
### SET 
``` {.wrap}
SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX] [GET]
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> GET mykey
"Hello"
redis> SET anotherkey "will expire in a minute" EX 60
"OK"
```
Set the string value of a key
### SETBIT 
``` {.wrap}
SETBIT key offset value
```
#### Example
```shell script
redis> SETBIT mykey 7 1
(integer) 0
redis> SETBIT mykey 7 0
(integer) 1
redis> GET mykey
"\u0000"
```
Sets or clears the bit at offset in the string value stored at key
### SETEX 
``` {.wrap}
SETEX key seconds value
```
#### Example
```shell script
redis> SETEX mykey 10 "Hello"
"OK"
redis> TTL mykey
(integer) 10
redis> GET mykey
"Hello"
```
Set the value and expiration of a key
### SETNX 
``` {.wrap}
SETNX key value
```
#### Example
```shell script
redis> SETNX mykey "Hello"
(integer) 1
redis> SETNX mykey "World"
(integer) 0
redis> GET mykey
"Hello"
```
Set the value of a key, only if the key does not exist
### SETRANGE 
``` {.wrap}
SETRANGE key offset value
```
#### Example
```shell script
redis> SET key1 "Hello World"
"OK"
redis> SETRANGE key1 6 "Redis"
(integer) 11
redis> GET key1
"Hello Redis"
```
Overwrite part of a string at key starting at the specified offset
### STRLEN 
``` {.wrap}
STRLEN key
```
#### Example
```shell script
redis> SET mykey "Hello world"
"OK"
redis> STRLEN mykey
(integer) 11
redis> STRLEN nonexisting
(integer) 0
```
Get the length of the value stored in a key
### STRALGO 
``` {.wrap}
STRALGO LCS algo-specific-argument [algo-specific-argument ...]
```
#### Example
```shell script
redis> STRALGO LCS KEYS key1 key2 IDX
1) "matches"
2) 1) 1) 1) (integer) 4
         2) (integer) 7
      2) 1) (integer) 5
         2) (integer) 8
   2) 1) 1) (integer) 2
         2) (integer) 3
      2) 1) (integer) 0
         2) (integer) 1
3) "len"
4) (integer) 6
```
Run algorithms (currently LCS) against strings
Redis Set command
------------
### SADD 
``` {.wrap}
SADD key member [member ...]
```
#### Example
```shell script
redis> SADD myset "Hello"
(integer) 1
redis> SADD myset "World"
(integer) 1
redis> SADD myset "World"
(integer) 0
redis> SMEMBERS myset
1) "Hello"
2) "World"
```
Add one or more members to a set
### SCARD 
``` {.wrap}
SCARD key
```
#### Example
```shell script
redis> SADD myset "Hello"
(integer) 1
redis> SADD myset "World"
(integer) 1
redis> SCARD myset
(integer) 2
```
Get the number of members in a set
### SDIFF 
``` {.wrap}
SDIFF key [key ...]
```
#### Example
```shell script