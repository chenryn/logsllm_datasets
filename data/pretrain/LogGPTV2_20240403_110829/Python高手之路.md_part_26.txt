---
## Page 194
熊猫爱中国www.xiongmaoi.com
这多少有点儿碰运气的成分。
慢，因此也很难成为一个长期的解决方案。有些文档甚至建议在 setup·py 阶段运行它，
2的向后兼容，而且在任何情况下，都需要自己手工处理语义的转换。此外，运行2to3相当
议，如为你的项目建立一个特殊的Python3 分支。
文档中讨论了很多关于2to3工具（将Python2的代码转换为Python 3），并且包含了一些建
Python2.7和Python 3.3的了，几乎没有什么困难。
耸耸肩。
年12月就已经发布了。
第13章一
也有3to2工具，但基于上述原因，我并不建议使用。
注意
和Python 3之间的差异如此之大，以至于人们甚至没有去考虑如何过渡，而只是害怕地
首先，2to3并不总是对的，它并不是万能的。它只是处理语法的转换，而不维护与Python
有些文档推荐使用不同的项目分支去支持 Python2和Python3。经验表明这样维护起来
在我看来,这是一个糟糕的建议。在几年前这也许是最合适的建议,但考虑到现在Python
关于移植应用的官方文档（http://zeromq.org/）是有的，但我不建议不折不扣地参考它。
但后来事情发生了变化，Python 2.7从 Python 3.1引入了很多新功能，缩小了二者的差
如你所知，问题在于Python3和Python2不兼容。在Python3发布的时候，Python 2.6
据我所知，目前Python3仍然不是任何操作系统的默认 Python 解释器，尽管它在2008
Python3支持策略
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 195
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
①我已经听说过有这样的项目存在。
能读文档然后移植你的代码。如果可能的话使用cffi（http://cffi.readthedocs.org/
言，少了很多生僻的场景，针对不同对象基类有了更加清晰的接口。你会喜欢Python 3 的。
本书给出了要支持 Python3 所需做修改的良好概述。
单，那太无趣了，而且可以在网上找到。Porting to Python3（http://python3porting.com/）这
13.1
到 Python 2的移植，但我个人是肯定不会这么干的。
有了一个 Python 2 的代码库。尽管下面讨论的一些内容可能在理论上也可以用于 Python 3
en/release-0.8/）选项重写可能会有用。
错误的数量应该缓慢并稳定下降，从而最终实现代码对Python2和 Python3的全兼容。
测试，那么首先要做的就是大幅增加代码覆盖率，可以回顾一下第6章中的内容。
试不可能知道代码在两个上下文环境和不同版本间是否能工作正常。如果应用中还没有任何
OpenStack上投入精力做的。
的哪个分支时你会很困惑。
相当麻烦，而且用户会困惑该使用哪个版本。更糟糕的是，当用户提交bug 但却没有指明用
188
如果你还没来得及看一下 Pyton 3所做的语言修改，建议看一下。这是一门非常好的语
在后面几节中会讨论一些在不同 Python 版本间移植可能遇到的问题。这里假设你已经
如果有针对Python 写的C 模块需要移植，那么很抱，关于这个没什么好说的，你只
根据提示的错误进行修改，重新运行tox，直到所有测试都通过为止。如果做得对的话，
tox 是对多个Python版本进行自动测试的很好的工具，在6.7节中已经介绍过了。
最后，确保代码能够对两个 Python 版本都可用的唯一方式就是单元测试。没有单元测
这门语言并没有彻底地修改。我敢肯定你已经简单看过了。本书不会包含全部的修改清
更好的方法就是使用一个代码库并保持对 Python 2和 Python3 兼容。这也是目前我们在
一旦有了单元测试并配置了tox,就很容易使用下面的方法对两个Python版本运行测试：
第13章Python3支持策略
语言和标准库
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 196
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
①u前缀在 Python 3.0中被移除了，但在Python 3.3中又被加了回来，参考 PEP414（https://www.python.
以通过一个类装饰器自动完成这个过程。
和'foobar'是同一样东西。
Python 2.6是第一个为向Python3移植提供足够兼容性的版本。
hacking工具能帮你解决这些不兼容的用法，并避免引入更多。
对旧的 Python 版本的兼容性，而且如果使用的话，处理起来会非常痛苦。在1.4节中讨论的
（如图13-1和图13-2所示）。这意味着任何字符串都是Unicode的，也就是说u'foobar
org/ dev/peps/pep-0414/）
影响你最多的可能是字符串处理方面。在 Python3中过去称为 unicode，现在叫 str
实现 unicode 方法的类应该将其重命名为 str，因为 unicode 方法将不再使用。可
支持Python 的多版本时，应该尽量避免同时支持 Python 3.3 和早于 Python 2.6 的版本。
但它也带来了巨大的兼容性问题。某些语句的语法变化（如异常捕获）已经完全去除了
str/bytes
S
本电子书仅限学习交流使用，请勿用于商业用途
basestring
图13-2Python3基类
图13-1Python2基类
bytes
unicode
object
bytearray
bytearray
object
boo
13.1  语言和标准库
---
## Page 197
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
①另一个不支持老版本的原因。
以用搜索引擎找到。
http://docs.pythonsprints.com/python3_porting/py-porting.html 就有一份很好的清单，或者也可
被重命名或者删除，但最终呈现的是更为清晰的布局。我不知道是否有官方的清单，但是
这是一个巨大的变化，但six（将在13.3节中讨论）将帮你处理这个问题。
或者items）现在也返回可迭代对象，而函数iterkeys 和 iteritems 则已经被删除。
始提供?。
性问题。
190
six模块会在13.3节中讨论，它对于维护Python2和3的兼容性很有用。
显然，标准库也经历了从Python2到Python3的演化，但无需过分担心。
许多函数不再返回列表而是返回可迭代对象（如range）。此外，字典方法（如keys
u'foobar'
另一个处理 Python 和 Unicode 的技巧是使用unicode_literals，它从 Python2.6开
这种方式可以针对所有返回Unicode 的 Python 版本实现一个方法，装饰器会处理兼容
@unicode_compat
def unicode_compat(klass):
import six
>>> 'foobar'
>>>from
'foobar'
>>>
class Square(object):
第13章Python3支持策略
return klass
if not six.PY3:
'foobar'
return u" "+ str(id(self))
klass.str
future_
本电子书仅限学习交流使用，请勿用于商业用途
import unicode_literals
= lambda self: self.
=klass.  str
一些模块已经
---
## Page 198
熊猫爱中国www.xiongmaoi.com
关键变量。不过在用的时候要谨慎，如果代码中到处都是ifsix.PY3，那么后续会很难
正在运行Python 3。对于任何有两个版本（Python2和Python 3）的代码库而言这都是一个
实现向前和向后兼容的模块——Python2和Python3之间的桥梁。
化。但是，这门语言的基础并没有发生变化，所以是可以实现一种转换层的，也就是一个能
13.3
但截止到目前，如何解决还没有具体的计划。
时还没有进行任何的Python3兼容性检查。我们已经意识到这个模块在未来会是个大问题，
支持Python 2.5（可以想象，这不利于移植）。这个决定是OpenStack 在很早之前做出的，当
的 Python 版本。不过，要注意的是它们可能不是最新的。
比大的框架更容易移植到Python3，所以你可能需要对它们做一点儿尝试。
上，如果某个库不太可能支持Python3的话，那么这可能是最好的办法。不过，中小型的库
建议，将外部库进行足够的隔离以避免其扩散到整个代码库，则是可以考虑替换它的。事实
的需求。不过，可能你很早就开始了自己的项目并且已经犯了这个错误。
考了我的检查表，在这里你就不会遇到麻烦了。因为那个检查表已经包含了对Python3支持
13.2
six 首先要做的就是提供一个名为 six.PY3 的变量。它是一个布尔值，用来表明是否
这样的模块是有的，名字就叫做 six（htp:/lpythonhosted.org/six/），因为2乘以3等于6。
在OpenStack项目早期所做出的关于外部库的一个选择就是eventlet
千万别犯同样的错误！
在寻找 PyPI 上的包时，可以查看它的收藏分类符"Programming Language：:
遗憾的是，对于这个问题没有什么特别的好办法。但幸运的是，如果你参考了我的其他
你的头号敌人就是所依赖的外部库。如果你读了我在2.3节（外部库）中的建议并且参
正如我们所看到的，Python3破坏了与早期版本间的兼容性并且周边很多东西发生了变
使用six
外部库
本电子书仅限学习交流使用，请勿用于商业用途
13.3使用six
191
---
## Page 199
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
①现在只接受一个参数，一个异常。
同样对整数也提供了相应的兼容性，通过 six.integer_types 能够处理在 Python 3中移除的
基本的字符流。
中 unicode 类的属性，并能处理更为高级的编码。bytes 类型代替 str 类型，用来处理
来处理文本的真正字符串。在 Python 3 中，基本的类型仍然是 str，但它共享了 Python 2
的基本类型是 str，其只能用来处理 ASCII码字符串。而后来加入的unicode 类型，则用
巧。例如，如果正在使用 abc 抽象基类元类，则可以像下面这样使用 six：
间的兼容性。
所有要做的只是将
个迭代器而不是列表。显然，这会破坏你的代码。six对此提供了 six.iteritems，使得
表。这意味着类似 dict.iteritems 这样的方法将会消失，并且 dict.items 将返回一
维护。
192
six提供了一组不错的函数和常量用来处理这种转换，如 six.u和 six.string_types。
谈到Python 3必然会涉及其引入的字符串和 Unicode 混乱问题。在 Python 2中，字符串
如果正在使用元类，Python3对其进行了彻底修改。six针对这个转换有一个不错的技
raise 语法在Python3中也发生了变化?，因此再次抛出异常应该使用six.reraise。
看，Python3的兼容性立刻就解决了！six提供了大量类似的辅助函数以提升不同版本
正如在8.1节中所讨论的，Python 3有一个非常好的功能能够返回可迭代对象而不是列
class MyClass(with metaclass(abc.ABCMeta, object)):
from six import with_metaclass
import abc
for k, v in six.iteritems (mydict):
import six
替换为
for k, v in mydict.iteritems ():
pass
print(k,v)
print(k, v)
第13章Python3支持策略
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 200
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
择，通过执行大多数繁重的工作使你的移植工作有个良好的开端。还是值得试试的。
单纯转换语法为Python3 代码，它使用 six模块。与标准的 2to3工具相比，它是更好的选
2to3之上的一层很薄的包装器，用来通过迁移代码到Python3使其“现代化”。但是不同于
它。six是开源的，因此你可以直接贡献它而不用维护自己的兼容模块。
版本做一些增强，或者在你不再需要继续支持某个特定 Python 版本的时候销毁（部分的)
块是值得的。通过在一个特殊的模块中隔离这个，可以确保未来有能力针对 Python 的后续
2中使用ConfigParser的代码：
也可以通过 six,add_move 添加自己的变动来处理其他转换。
six.moves的模块，用来透明地处理这些变动。
long类型。
提示
最后需要提及的是modernize 模块（htps://pypi.python.org/pypi/modermize）。它是在
six 库可能不足以覆盖你的所有用例。在这种情况下，构建一个封装了six 的兼容模
例如,在 Python 3 中 ConfigParser 模块被重命名为 configparser。因此,在 Python
conf = ConfigParser()
from six.moves.configparser import ConfigParser
就可以修改成下面的方式以兼容主要的 Python 版本：
conf = ConfigParser()
from ConfigParser import ConfigParser
如同在1
13.1 节中讨论的，有些模块已经变动了，因此 six 提供了一个不错的名为
本电子书仅限学习交流使用，请勿用于商业用途
13.3使用six
193
---
## Page 201
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 202
熊猫爱中国www.xiongmaoi.com
括任何父类和属性。这些类组成了一套架子鼓，我们可以将它们组合起来并发出声音。于是，
方法一
本组件，提供了一种很好的定义和处理方法分发的方式。这里会先展示一下Lisp 中的泛型
是对的。最近我偶然发现了PEP443（https://www.python.org/dev/peps/pep-0443/)，它描述了
14.1
第14章一
上面的代码定义了几个类：snare-drum、symbal、stick 和 brushes。它们不包
如果你熟悉Lisp 的话，对这些应该并不陌生。Lisp 对象系统是Common Lisp 的一个基
我经常说Python 是Lisp 的一个很好的子集，并且随着时间的推移，我越来越觉得这话
(defclass cymbal ()
(defclass snare-drum ()
一开始让我们先定义几个非常简单的类，没有任何父类和属性：
本章中汇总了我发现的一些有意思的更为高级的功能，它们有助于写出更好的代码。
(defclass brushes ()
(defclass stick()
(））
(））
（））
(））
—尽管在一本Python书中包含Lisp代码更多是为了好玩儿！
单分发器
少即是多
本电子书仅限学习交流使用，请勿用于商业用途