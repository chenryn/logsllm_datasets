>  在实际网络场景下往往都是非常复杂的，比如：防火墙、多层NAT、单侧NAT，这里我们选择了两端都处于一层 NAT
> 的场景来进行演示讲解，可以让我们更容易的进行理解。
在我们的演示环境下，有 `PC1，Router1，PC2，Router2，Server` 五台设备；公网服务器用于获取客户端实际的出口地址端口，UDP
穿透的流程如下：
  1. `PC1(192.168.1.1:7777)` 发送 UDP 请求到 `Server(9.9.9.9:1024)`，此时 Server 可以获取到 PC1 的出口地址端口(也就是 Router1 的出口地址端口) `1.2.3.4:10000`，同时 Router1 添加一条映射 `192.168.1.1:7777  1.2.3.4:10000  9.9.9.9:1024`
  2. `PC2(192.168.2.1:8888)` 同样发送 UDP 请求到 Server，Router2 添加一条映射 `192.168.2.1:8888  5.6.7.8:20000  9.9.9.9:1024`
  3. Server 将 PC2 的出口地址端口(`5.6.7.8:20000`) 发送给 PC1
  4. Server 将 PC1 的出口地址端口(`1.2.3.4:10000`) 发送给 PC2
  5. PC1 使用相同的内网地址端口(`192.168.1.1:7777`)发送 UDP 请求到 PC2 的出口地址端口(`Router2 5.6.7.8:20000`)，此时 Router1 添加一条映射 `192.168.1.1:7777  1.2.3.4:10000  5.6.7.8:20000`，与此同时 Router2 没有关于 `1.2.3.4:10000` 的映射，这个请求将被 Router2 丢弃
  6. PC2 使用相同的内网地址端口(`192.168.2.1:8888`)发送 UDP 请求到 PC1 的出口地址端口(`Router1 1.2.3.4:10000`)，此时 Router2 添加一条映射 `192.168.2.1:8888  5.6.7.8:20000  1.2.3.4:10000`，与此同时 Router1 有一条关于 `5.6.7.8:20000` 的映射(上一步中添加的)，Router1 将报文转发给 `PC1(192.168.1.1:7777)`
  7. 在 Router1 和 Router2 都有了对方的映射关系，此时 PC1 和 PC2 通过 UDP 穿透建立通信。
![
](https://images.seebug.org/content/images/2021/04/f007302d-b3b7-4f85-a8f3-aac3a75ebee7.png-w331s)
[9.UDP打洞流程]
按照该步骤，我们编写了 UDP 穿透的示例脚本：
server.py
    #!/usr/bin/python3
    #coding=utf-8
    import socket
    if __name__ == "__main__":
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
        sock.bind(("0.0.0.0", 1024))
        # 1.receive message and get one export ip:port (PC1)
        data, conn1 = sock.recvfrom(1024)
        addr1 = "%s:%d" % (conn1[0], conn1[1])
        print("1.get PC1 export ip:port = %s" % addr1)
        # 2.receive message and get another export ip:port (PC2)
        data, conn2 = sock.recvfrom(1024)
        addr2 = "%s:%d" % (conn2[0], conn2[1])
        print("2.get PC2 export ip:port = %s" % addr2)
        # 3.send export address of PC1 to PC2
        sock.sendto(addr1.encode("utf-8"), conn2)
        print("3.send export address of PC1(%s) to PC2(%s)" % (addr1, addr2))
        # 4.send export address of PC2 to PC1
        sock.sendto(addr2.encode("utf-8"), conn1)
        print("4.send export address of PC2(%s) to PC1(%s)" % (addr2, addr1))
        print("done")
        sock.close()
    # end main()
client.py
    #!/usr/bin/python3
    #coding=utf-8
    import random
    import socket
    import string
    import time
    if __name__ == "__main__":
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
        #serv = ("10.0.1.1", 1024)
        serv = ("192.168.50.55", 1024)
        print("server =>", serv)
        # 1/2.send message to server, server can get our export ip:port
        sock.sendto("REGISTER".encode("utf-8"), serv)
        print("1/2.send REGISTER message to server")
        # 3/4.receive the export address of the peer from the server
        data, conn = sock.recvfrom(1024)
        array = data.decode("utf-8").split(":")
        addr = (array[0], int(array[1]))
        print("3/4.receive the export address of the peer, %s" % str(addr))
        # 5/6.send KNOCK message to export address of peer
        wait = random.randint(2, 5)
        print("5/6.send KNOCK message to export address of peer (wait %d s)" % wait)
        # in order to stagger the two clients
        # so that the router can better create the mapping
        time.sleep(wait)
        sock.sendto("KNOCK".encode("utf-8"), addr)
        name = "".join(random.sample(string.ascii_letters, 8))
        print("my name is %s, start to communicate" % name)
        # 7.communicate each other
        count = 0
        while True:
            sock.settimeout(5)
            try:
                data, conn = sock.recvfrom(1024)
                print("%s => %s" % (str(conn), data.decode("utf-8")))
            except Exception as e:
                print(e)
            msg = "%s: %d" % (name, count)
            count += 1
            sock.sendto(msg.encode("utf-8"), conn)
            time.sleep(1)
        # end while()
        sock.close()
    # end main()
### 0x06 拓展
在实践了以上步骤后，我们对 锥型NAT 下的 UDP 穿透已经有了大致的了解，那我们接着再拓展研究一下“其他场景”。
**1.Symmetric NAT可以穿透吗？**  
根据 `Symmetric NAT`
的特性我们可以知道当请求的目标端口地址改变后，会创建新的一对映射关系，我们无法知晓新的映射关系中的端口号；但是在实际场景下， **部分路由器** 对于
`Symmetric NAT` 的生成算法过于简单，新的端口可能呈现于：递增、递减、跳跃等特征，所以这种条件下，我们可以基于端口猜测，来穿透
`Symmetric NAT`。
> 如果两端的 `Symmetric NAT` 路由器是已知的，我们可以直接逆向分析映射生成算法，即可准确预测端口号。
**2.TCP穿透有哪些难点？**  
TCP 穿透的流程基本和 UDP 穿透一样。
在标准 socket 规范中，UDP 可以允许多个 socket 绑定到同一个本地端口，但 TCP 不行，在 TCP 中我们不能在同一个端口上既
`listen` 又进行 `connect`；不过在 **部分操作系统** 下 socket 提供了端口复用选项(`SO_REUSEADDR /
SO_REUSEPORT`) 可以允许 TCP 绑定多个 socket。
在使用端口复用选项后，TCP 就按照 UDP 穿透的流程一样借助公网服务器然后向对端发送 `syn` 报文了，其中靠后的 `syn` 报文就可以正确穿透完成
TCP 握手并建立连接。
**但是** 在实际场景下还有诸多的阻碍，不同厂商的 NAT 实现机制有一些差异，比如某些针对 TCP 的实现有：
  1. 对端 NAT 在接收到 `syn` 由于没有找到映射而返回 `RST` 报文，而本端 NAT 在接收到 `RST` 报文后删除了此条映射
  2. 由于主机生成的 `syn` 报文中的 `seq` 序号为随机值，如果 NAT 开启了 `syn` 过滤，对于没有标记过的 `seq` 的报文将直接丢弃
  3. 等等
**3.无第三方服务器的穿透**  
我们回到文章开头提到的“不需要第三方服务器实现 NAT 穿透”的方法，文中作者先提出了一种便于理解的网络拓扑，客户端位于公网，服务器位于 NAT
下，我们必须预先知道服务器的公网地址；在这个方法下，服务器不断的向外部未分配的地址发送 `ICMP(ECHO REQUEST)` 消息，服务器端的 NAT
将保留一条 ICMP 响应的映射，由于目的地址未分配所以没有设备会响应服务器发出的请求，此时由客户端发送一条伪装的 `ICMP(DESTINATION
UNREACHABLE)` 给服务器，服务器可以收到该条消息并从中获取到客户端的地址；随后便可以根据预先约定的端口进行穿透并通信了。
但是如果客户端也位于 NAT 下呢，由于 NAT 可能会更改源端口信息(不同厂商的NAT实现不同)，导致无法向上文一样使用预设端口进行通信，所以这里需要和
`Symmetric NAT` 穿透一样进行端口猜测。
### 0x07 总结
本文从 NAT 原理出发，详细介绍了不同 NAT 类型的工作流程和原理，在此基础上我们深入学习和实现了 锥型NAT 的穿透，并拓展介绍了一些特殊的穿透场景。
NAT 的出现极大的缓解了 IPv4 地址短缺，同时也延迟了 IPv6 的推广，但 IPv6 是大势所趋，未来使用 NAT
的场景可能会慢慢减少；但无论怎样， NAT 的原理和策略都非常值得我们学习，比如：1.NAT 是一个天然的防火墙，2.NAT
其实可以看作是代理服务器，3.NAT 可以作为负载均衡服务器，4.等等。
* * *
References:  
[https://so.csdn.net/so/search/blog?q=packet&t=blog&p=1&s=0&tm=0&lv=-1&ft=0&l=&u=gengkui9897](https://so.csdn.net/so/search/blog?q=packet&t=blog&p=1&s=0&tm=0&lv=-1&ft=0&l=&u=gengkui9897)
* * *