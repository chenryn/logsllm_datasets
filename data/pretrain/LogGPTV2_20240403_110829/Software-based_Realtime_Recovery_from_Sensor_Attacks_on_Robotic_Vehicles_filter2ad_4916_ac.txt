system [33]. Hence during software sensor conversion, we
have to perform frame canonicalization. Speciﬁcally, for an
RV with a rigid body, we commonly use different reference
frames for describing its position and orientation (i.e., pose).
The inertial and body frames are used to provide the pose
in the global and local coordinate systems, respectively. The
inertial frame is an earth-ﬁxed frame, whereas the body frame
is aligned with the vehicle’s body (hence the sensors). The
sensor measurements are usually related to the body frame
where the sensors are attached to, and must be converted from
the body frame to the inertial frame and vice versa. Frame
conversion is accomplished by multiplying with constant con-
version matrices. The detailed equations are in Appendix A.
3.3 Error Correction
Software sensors aim to closely predict real sensor measure-
ments. However, the errors between software and real sensors
are intrinsic for the following reasons: (1) the conversion
(from model states to sensor readings) introduces conversion
errors, (2) the system model provides only an approximation
of the real states and hence introduces model errors over time,
(3) external disturbances and noises affect the accuracy of
model prediction, which introduce external errors.
Obtaining an accurate prediction model - thus avoiding
the above errors - through precise modeling of complex real-
world effects for a speciﬁc system is neither practical nor
generic. Instead, we choose to tolerate model inaccuracies
through integrating additional error correction techniques to
compensate for the errors. Note that our recovery does not
aim to replace the real sensors permanently when the attack is
continuous, but rather aims to isolate the compromised sensor
and provide the needed feedback to the control loop for a
certain time duration so that we can ensure continuous stable
operation for some time without catastrophic consequences
(e.g., immediate crashes) or take an appropriate emergency
action (e.g. safe landing).
(a) Raw measurement
(b) Filtered measurement
Figure 8: Raw and ﬁltered acceleration measurements with software
sensor output
Conversion Errors. Although the concept of comparing soft-
ware sensor readings and real readings is straightforward, di-
rect comparison is problematic. Speciﬁcally, on the software
sensor side, higher-order state variables (e.g, acceleration)
may contain noise at high-frequency. The conversion process
introduces additional errors. As such, directly comparing such
software sensor readings with the real ones leads to numer-
ous false alarms. To address the problem, we leverage error
reduction techniques [40]. Speciﬁcally, to mitigate output in-
accuracy caused by numerical differentiation, we can use a
simple ﬁnite differentiation method like Eq. (4). However,
with this method, the output tends to be close to zero in the
presence of high frequency noise. To tackle this, we imple-
ment a smooth noise-robust differentiator that provides noise
suppression [25].
On the real sensor side, raw measurements have various
kinds of errors, such as noise, bias, and time lags. Figure 8a
shows that a highly ﬂuctuating raw signal is not ideal for
comparison with the software sensor signal. Therefore, we
smooth it out with a basic ﬁlter (see Figure 8b). Speciﬁcally,
we apply the low-pass ﬁlter [40] which is a standard ﬁlter to
attenuate high frequencies with a pre-selected cutoff.
Model Errors. The system model approximates the real RV
states. Such approximation contains intrinsic model error.
This is because the model is constructed from a universal tem-
plate (for a family of vehicles), which does not describe the
details and nuances of a concrete RV. In addition, the model
assumes a simple linear PID controller whereas real RVs may
use non-linear control algorithms. To mitigate intrinsic model
errors, we introduce periodic synchronization and error reset.
Although model errors are marginal at any time instance, they
tend to aggregate overtime, namely prediction drift. Thus,
errors should be corrected periodically.
Speciﬁcally, our solution regularly resets software sensor er-
rors, by synchronizing with the real sensor readings to remove
prediction drift during normal operations. To reset errors, we
partition the entire operation duration to small time windows
of a ﬁxed duration and synchronize the software sensor read-
ings with the real ones at the start of each window. Note that
the synchronized readings are then fed to the system model,
eliminating errors in the predicted system states.
Recovery Parameters. We select the recovery parameters
(i.e., window sizes and recovery thresholds) systematically.
The window size (N) for historical error is an important param-
eter. If N is too large, there can be a signiﬁcant accumulation
of the error which could cause false alarms. Conversely, if
N is too small, the synchronization of the software sensors
with the real sensors will be so frequent that it would lead
to false negatives. Moreover, the conversion might introduce
a small delay in the generation of software sensor measure-
ment, causing it to not align with the real sensor. Therefore,
to achieve the measurement synchronization at correct time-
steps, N should be more than a potential time-displacement
between the software and real sensor signals. We choose N to
be the maximum time-displacement computed from the large
set of operation data using the dynamic time-warping algo-
rithm [45] that computes the optimal alignment of two data
sequences. Once the window size is determined, we calculate
the maximum error between two signals within each window
in the large set of operation data. We select the threshold
T = emax + m, where emax is the maximum accumulated error
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    355
and m is a margin parameter. For example in the 3DR Solo
quadrotor, the main control loop is invoked at every 2.5ms and
we use the 575ms (i.e., 230 loop counts) as the window size
which is chosen as described above. We evaluate the effect of
different recovery parameters in Section 4.2.
(a) Hovering with no wind
(b) Hovering with wind
Figure 9: External force and external error (state discrepancy)
External Errors. So far, our technique does not model exter-
nal forces that may introduce errors. For example, when the
wind speed is 5 mph west, it introduces external forces that
move the aerial vehicle to the east. To adapt software sensors
to external disturbances, we calculate an estimation of exter-
nal force by measuring errors within the previous window.
The key observation is that external forces are likely static
across two consecutive windows in practice as long as the
wind is not drastically changing. Speciﬁcally, the time unit is
400Hz (2.5ms), and the window is 2Hz (500ms) less. Within
0.5s, the forces are highly likely unchanged.
Based on our observation, we calculate the average error by
comparing the real state and model prediction within each win-
dow. Figure 9 illustrates a simple external error. The quadro-
tor maintains a stable attitude during hovering. Without wind
(a), the real next states and model prediction are the same
since both cases are affected only by thrust force (the blue
up-arrow). However, with the wind (b), to maintain a stable
state without tilting, the controller increases the right thrust (in
red) such that the drone does not tilt right, whereas the model
(without the wind force) thinks the vehicle tilts left with the
increased right thrust. We use the average error from the pre-
vious window as an estimate of external forces in the next
window. The correction result can be found in Section 4.2.2.
Supplementary Compensation. Certain sensor types and us-
age scenarios require very accurate measurements. As such,
using software sensors alone may not be sufﬁcient, especially
for lengthy operations. To increase an accuracy of these spe-
cial sensors and to extend the operation time under the recov-
ery mode, we employ additional error correction techniques.
Speciﬁcally, we leverage other types of sensors - less sensitive
ones - to reduce the estimation errors. Under this approach, we
can provide real sensor readings in model prediction. Since
model prediction is based on the model and real input, the
real sensor measurement (converted from different sensors)
would contain more realistic feedback with real disturbances
factored in. We present an example of this approach that
estimates angle status from the accelerometer and magne-
tometer (where angle status is typically measured by gyro)
in Appendix B. Note that this compensation approach is not
(cid:46) calculates model response
y ← C· x + D· u
x ← A· x + B· u
m ← f ilter(m)
ms ← convert(y)
t + +
if !recovery_mode && t > window then
t ← 0
r ← 0
e ← error_estimation(r,m,ms)
ms = m
end if
ms ← ms − e
r ← r +|m− ms|
if r > Ton then
Algorithm 1 Runtime Recovery Monitoring
1: u control input of the real vehicle
2: m sensor measurement
3: x control states of the real vehicle
4:
5: procedure RECOVERYMONITOR(u, m)
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33: end procedure
end if
if sa f e_count > K then
recovery_mode ← f alse
recovery_mode ← true
sa f e_count ← 0
end if
if recovery_mode then
m ← ms
if r < To f f then
sa f e_count + +
end if
recovery_action()
end if
(cid:46) checkpoint
(cid:46) error compensation
(cid:46) checks residual
(cid:46) recovers sensor
(cid:46) switches back
(cid:46) optional action
necessary for majority of the sensors. In most cases, using
our software sensors for recovery - without other real sensors
- is sufﬁcient. In our evaluation (Section 4.2.2), among all the
studied scenarios, we leverage this technique only when all
the gyros are compromised at the same time, which is rare.
3.4 Recovery Monitoring
Algorithm 1 describes our proposed recovery procedure. The
recovery_monitor() function is inserted right after the sen-
sor reading code in the main control loop. It takes runtime
inputs and actual sensor measurements as the parameters. It
then computes the predicted new state (x) and output (y) from
the previously predicted states (line 6 and 7). The real sensor
measurements (m) are ﬁrst ﬁltered to attenuate noises (line
8). The model output is then converted into sensor predic-
tion (ms) according to the sensor type (line 9). In lines 11-16,
when the current time is a checkpoint, that is, the start of a
new window, the error (e) is calculated using the function
error_estimation() that estimates the model and external
error (see Section 3.3). Error compensation is applied to the
sensor prediction within the window (line 17). At line 18, the
cumulative difference (residual r) is computed by comparing
the values with the real measurement. If the difference ex-
ceeds the recovery threshold Ton, then it changes to recovery
mode and starts new sa f e_count (line 19-22). In the recovery
mode, the real sensor measurement (m) is replaced by the
sensor prediction (ms) (line 24). At the same time, the differ-
ence is continuously checked by the recovery-off threshold
To f f (usually, To f f < Ton) and when the difference is smaller
356    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Model PredictionNext Real StateCurrent StatewindwindModel PredictionNext Real StateCurrent Statethan the threshold, the sa f e_count is increased (lines 25-27).
When the difference is below the threshold for more than K
times, we resume using the real sensors, assuming the attack
is over (lines 28-30). If there is predeﬁned recovery action,
we trigger it through calling the function recovery_action.
4 Evaluation
We have developed a prototype that includes a mission gen-
erator based on Mavlink [35], a customized log module us-
ing Dataﬂash log system, and a system model construction
component implemented in Matlab. The recovery module is
implemented in C/C++ and includes the software sensors,
recovery switch, error correction modules (i.e., differentia-
tor, low-pass ﬁlter and supplementary compensation). The
model validation and parameter selection components using
the proﬁle data are implemented in Matlab. Additionally, we
implemented attack modules to simulate physical sensor at-
tacks that maliciously modify the sensor measurements via a
remote trigger at runtime.
4.1 Evaluation Setting
We evaluate our framework with both simulated and real-
world RVs, including quadrotor, hexarotor, and rover. Table 1
shows the subject vehicles. We ﬁrst evaluate the effective-
ness of our technique under various simulated environmental
conditions, since it is difﬁcult to realize different wind ef-
fects/conditions in real-world. We then conﬁrm the results
with real vehicles including a 3DR Solo quadrotor and an
Erle-Rover in real-world conditions.
Table 1: Subject Vehicles in Evaluation
Type
Model
Controller Software
Quadrotor
Hexacopter
Rover
Quadrotor
Rover
APM SITL
APM SITL
APM SITL
Erle-Copter
Erle-Rover†
3DR Solo†
ArduCopter 3.4
ArduCopter 3.6
APMrover2 2.5
ArduCopter 3.4
APMrover2 3.2
APM:solo 1.3.1
Quadrotor
* G: gyroscope, A: accelerometer, M: magnetometer, B: barometer, P: GPS
† Real Vehicles
Number of Sensors
G
2
2
2
2
1
3
A M B
1
2
1