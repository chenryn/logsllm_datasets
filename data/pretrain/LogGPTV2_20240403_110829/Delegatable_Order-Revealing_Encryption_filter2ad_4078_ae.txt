### Viewing the Results

To view the results, including tables, plots, values, and raw JSON data used to generate the plots for this paper, please note that the input size on the website is limited for practical purposes. Users are encouraged to run simulations of arbitrary sizes using our binaries or Docker images.

### 5.1 Implementation

We have implemented most of the primitives, data structures, and constructions ourselves. For some primitives and all schemes, we provided the first open-sourced, cross-platform C# implementation. We emphasize that neither the primitives nor the schemes are production-ready; however, they can be used in research projects and prototypes. The B+ tree implementation we use, though instrumented by us, is a standard one as defined in the original paper [3] with the deletion algorithm from [33].

This software project, consisting of 22,000 lines of code (one-third of which are tests), is well-documented and thoroughly tested, achieving over 97% coverage. All code, including primitives, data structures, schemes, protocols, simulation logic, benchmarks, build scripts, and tests, is published on GitHub [6] under the CC BY-NC 4.0 license. Additionally, we have published parts of the project as standalone .NET Core (nuGet) packages, and we host a web server where users can run simulations for small inputs (as mentioned in the previous section).

#### 5.1.1 Primitives

All schemes and protocols use the same set of primitives, most of which we implemented ourselves. These primitives rely on the default .NET Core AES implementation, which uses platform-specific AES-NI CPU instructions. In our project, all key sizes are 128 bits, matching the AES block size.

- **AES-based PRG**: We implemented an AES-based pseudorandom generator (PRG) using AES in CTR mode, caching unused entropy as suggested in [30].
- **PRF**: For pseudorandom functions (PRFs), we used a single application of AES, as described in [37, Proposition 3.27].
- **Symmetric Encryption**: We use AES with a random initialization vector in CBC mode for symmetric encryption, as per [37, Section 3.6.2].
- **Hash**: We use the default .NET Core SHA2 implementation for hashing.
- **PRP**: For pseudorandom permutations (PRPs), we implemented unbalanced Feistel networks [59] for large inputs and the Knuth shuffle [43] for small inputs. Detailed low-level information can be found in the project's README [6].

#### 5.1.2 Schemes and Protocols

We implemented the schemes and protocols exactly as described in the original papers. When we encountered issues or identified improvements, we documented them in our implementation challenge notes but did not alter the original designs unless explicitly stated. Each Order-Revealing Encryption (ORE) scheme implements a C# interface, allowing our B+ tree implementation to operate on a generic ORE. For the no-encryption baseline, we provide a stub implementation with identity functions for encryption and decryption. It is important to note that all schemes and protocols use exclusively our implementations of primitives, thereby eliminating any bias due to different primitive performance.

**Figure 1: Benchmarks of the Schemes and Primitives**
- **(a) Schemes benchmark (time in microseconds, log scale)**: Lewi-Wu parameter is the number of blocks.
- **(b) Primitives benchmark (time in microseconds)**

#### 5.1.3 Simulations

We have four types of simulations:

1. **Protocol Simulation**: Runs both protocol stages—construction and search—on supplied data for all protocols, including all schemes coupled with B+ tree. This simulation measures primitive usage, ORE scheme operations, communication volume and size, and I/O requests. Elapsed time is not measured due to the substantial overhead of simulation and measurement routines.
2. **Scheme Simulation**: Runs all five ORE schemes and tracks only primitive usage.
3. **Scheme Benchmark**: Tracks time using Benchmark.NET [54] to ensure accurate measurements. This tool handles issues like cold/warm start, process priority, and statistical significance. It reports elapsed time up to nanoseconds for all four schemes (excluding CLOZ) and their variants.
4. **Primitive Benchmark**: Uses Benchmark.NET to compare different implementations of primitives (e.g., Feistel PRP vs. pre-generated permutation) and to approximate time consumption based on primitive usage.

### 5.2 Setup

For our simulations, we used three datasets:
- Two synthetic distributions: uniform (range is one-third of data size) and normal (standard deviation is 0.1 of data size).
- A real dataset: California public employees' salaries ("total pay and benefits" column) [63]. Synthetic datasets and subsets of the real dataset are generated pseudo-randomly. Queries are generated uniformly at random with a range as a percentage of data size.

### 5.3 Results

#### 5.3.1 Primitive Usage by Schemes

Table 4 shows the simulation-derived values of each OPE and ORE scheme’s primitive usage. Each scheme is given 1,000 data points from each dataset. The scheme encrypts each data point, decrypts each ciphertext, and performs five comparisons (all possible types) pairwise. This micro-simulation is repeated 100 times, and the resulting values for primitive usage are averaged. State and ciphertext sizes are calculated after each operation and averaged. The simulated values are consistent with theoretical calculations.

#### 5.3.2 Benchmarks of Schemes and Primitives

Using Benchmark.NET [54], we accurately tracked the performance of the schemes and primitives running with different parameters (see Figure 1). The setup for the ORE schemes benchmark is the same as in the primitive usage simulation (Section 5.3.1). Primitives were given randomly generated byte inputs and keys of different sizes (e.g., PRP of 2 to 32 bits). Benchmark.NET determines the number of runs needed for statistically sound results. For example, large variance results in more runs. To improve accuracy, each run is compiled in release mode as a separate project and runs in a separate process with the highest priority.

- **Schemes’ Performance (logarithmic scale)**: FH-OPE is fast because it does not perform CPU-heavy operations and works in main memory. Lewi-Wu performance degrades exponentially with increasing block size due to the exponential number of PRF executions and the performance of PRP degrading exponentially. Lewi-Wu comparison takes noticeable time due to hash primitive usage.
- **Primitives Benchmark**: Most primitives use AES under the hood. PRG and PRF take less time than AES because they do not include the initialization vector generation needed for symmetric encryption. PRP is implemented as a Knuth shuffle, with complexity exponential in the input bit length. PRG does not discard the entropy generated by the AES cycle, so one AES cycle can supply four 32-bit integers. PRP generates the permutation table once and does not regenerate it if the same key and number of bits are supplied.

#### 5.3.3 Protocols

In this experiment, we ran each protocol with each of the three datasets. Dataset sizes are 247,000 (bounded by the California Employees dataset size), and the number of queries is 1,000. Queries are generated uniformly at random with a fixed range (0.5% of data size). The cache size is fixed to 128 blocks, and the B+ tree branching factor and block sizes for other protocols are set such that the page size is 4 kilobytes. We measure the number of I/O operations, communication volume, and size for both construction and query stages.

- **Table 3**: Snapshot for the CA employees distribution.
- **Figure 2**: Performance values for different data distributions and protocols. Values for ORE-based protocols are averaged. "Cold" means executing the first query, while "warm" means the first query has been previously executed. This difference is significant only for POPE, which incurs a large overhead on the first query by design.

**Figure 2: Performance values for different data distributions**
- **(a) Construction stage number of I/O requests**
- **(b) Construction stage communication volume (number of messages)**
- **(c) Construction stage communication size (bytes transferred)**
- **(d) Queries stage number of I/O requests**
- **(e) Queries stage communication volume (number of messages)**
- **(f) Queries stage communication size (bytes transferred, log scale)**

Note that all ORE-based protocols behave similarly except when ciphertext size matters. BCLO, CLWW, and FH-OPE have the same ciphertext size, creating B+ trees with the same page capacity and the same number of I/Os for different operations. Lewi-Wu and CLOZ schemes have larger ciphertexts, inducing more traffic and smaller B+ tree branching factors, resulting in more I/O requests. Kerschbaum protocol requires a high number of I/O requests during construction due to inserting elements into arbitrary places in an array and rotating the data structure on disk.

POPE suffers a significant penalty on the first query (see Subfigures 2d, 2e, and 2f) because it reads and sends all blocks to the client for sorting. POPE performance improves as more queries are executed.

Logarithmic-BRC does not support interactive insertions and thus its construction stage is not benchmarked. Otherwise, it is the most performant of all non-ORE protocols. Its performance depends on the result size, not the data size.

As expected, ORAM performs worse than the ORE-based protocols but is in line with the non-ORE protocols. ORAM's poor construction communication (Subfigures 2e, 2f) is due to POPE's shortcut in construction, which is paid off during queries (Subfigure 2f).

The values do not vary much among different data distributions, except for I/O requests, which depend on the result size for queries and are more sensitive to data distribution.

Using an ORE scheme with relatively small ciphertext in B+ tree does not add substantial I/O overhead (see "No encryption").

- **Figure 4a**: Query performance does not substantially depend on query size, except for Logarithmic-BRC, which shows a linear relationship. For large ranges, BRC returns higher nodes (keywords matching many documents), which are optimally packed in I/O pages. As the query range doubles, higher nodes are involved, increasing the chance that requested keywords have their documents packed.
- **Figure 3**: Shows Table 2 asymptotic values. The simulation was run for a uniform dataset of 247,000 records (100%), 1,000 queries, 0.5% query range, and 128 blocks cache size. Kerschbaum construction I/Os and cold POPE query values grow linearly with inputs, while other protocols grow logarithmically, square-logarithmically, or do not grow.
- **Figure 4b**: Shows how protocol performance fluctuates as queries are processed. POPE and Logarithmic-BRC fluctuate the most, and POPE is the only protocol where cold versus warm makes a difference.

### 6. Remarks and Conclusion

After conducting theoretical and practical evaluations of the protocols, we found that primitive usage is a better performance measure than plain time measurements. In practical use, the observed time of a query execution is influenced by multiple factors, and I/O requests can significantly slow down the system.

- **ORE-based B+ tree protocol**: Proven to be I/O optimal and potentially extendable with another data structure using ORE. Its security/performance trade-off is tunable by choosing and parametrizing the underlying ORE scheme.
- **BCLO [8]**: Least secure scheme in the benchmark but stateless and produces numerical ciphertexts, making it suitable for databases without modifications.
- **Frequency-hiding OPE [39]**: Hides the frequency of ciphertexts but is stateful and requires uniform input.
- **Lewi-Wu [46]**: Easily customizable for performance-to-security ratio and offers security benefits of the left/right framework, particularly useful for B+ tree.
- **CLWW [18]**: Provides weaker security guarantees but is the fastest scheme in the benchmark.
- **Kerschbaum protocol [41]**: Offers semantically secure ciphertexts, hiding the location of the smallest and largest, and has a simple implementation. Well-suited for bulk insertions and scales well.
- **POPE [58]**: Defers the sorting of its ciphertexts, remaining more secure for a small number of queries. Has the fastest insertion routine and does not reveal the order of most ciphertexts. More performant for systems with more insertions than queries. We recommend "warming up" the structure to avoid a substantial delay on the first query.
- **Logarithmic-BRC**: Ideal for huge datasets with limited query result size. Only protocol with substantial space overhead but offers scalability and perfect (in a snapshot setting) security. Carefully chosen and configured SSE ensures I/O grows slowly as a function of result size.
- **ORAM**: Showed the most interesting result, with performance not only adequate but also in line with less secure protocols. This empirical result suggests more interest in ORAM research, possibly leading to tighter bounds, faster constructions, and efficient ways to use the schemes. ORAM performance provides an upper bound on the acceptable performance level of less secure (access-controlled) protocols.