# 影子SUID：权限持久化技术详解

本文分为两部分，深入探讨了`Shadow SUID`这一概念及其在Linux系统中的应用。第一部分基于[SHADOW SUID FOR PRIVILEGE PERSISTENCE: PART 1](https://www.sentinelone.com/blog/shadow-suid-for-privilege-persistence-part-1/)，第二部分则参考了[SHADOW SUID FOR PRIVILEGE PERSISTENCE: PART 2](https://www.sentinelone.com/blog/shadow-suid-privilege-persistence-part-2/)。

## 第一部分

### 引言
SentinelOne的Linux代理引入了一个新特性——`Shadow SUID`保护。本文将分两个部分介绍该特性的由来及其必要性。获取root权限在Linux中通常较为困难，因为安全更新频繁且迅速。一旦攻击者获得所需权限，他们往往会试图维持这些权限，常见的手段之一是利用`setuid`机制。

### 什么是SUID？
在Linux中，基本文件权限包括读、写和执行。此外，还有`setuid`和`setgid`等特殊权限。当带有`setuid`或`setgid`标志的程序被执行时，它可以请求操作系统赋予其所有者的权限（通常是root）。例如，`ping`命令需要`root`权限发送ICMP包，但通过设置SUID位，任何用户都可以运行它而无需直接拥有高权限。

### `影子SUID`简介
`影子SUID`与传统SUID类似，区别在于前者不显示`setuid`位，这使得其更难以被发现。`影子SUID`利用`binfmt_misc`内核机制继承现有SUID二进制文件的`setuid`属性。此方法要求至少存在一个合法的SUID文件作为基础。具体实现细节将在第二部分进一步阐述。

### 检测与清除
要检查系统是否支持`binfmt_misc`，可以使用如下命令：
```bash
grep 'BINFMT_MISC' /boot/config-$(uname -r)
```
如果需要删除相关规则，可以通过向相应的规则文件写入“-1”来完成。
对于不确定性质的文件，请谨慎处理，确保其合法性后再采取行动。

## 第二部分

### 工作原理概述
本节详细介绍了如何通过`binfmt_misc`模块创建`影子SUID`。首先解释了Linux上命令执行的过程，然后展示了如何利用`binfmt_misc`注册新的文件类型并执行特定代码。

### 实践示例
为了更好地理解这一过程，我们提供了一个简单的Python脚本示例，并演示了如何使其获得`root`权限。通过选择一个具有独特签名的SUID程序作为“解释器”，我们可以让非SUID脚本以`root`身份运行。

### 防御策略
虽然`影子SUID`难以检测，但仍有一些方法可以防御此类攻击。一种方法是在执行原始命令前禁用相关规则，之后再重新启用。这种方法能够有效避免潜在的安全风险。

### 结论
尽管最初看似是一个边缘案例，但实际上`影子SUID`构成了严重的安全隐患，几乎影响到所有使用Linux系统的用户。因此，了解其工作原理及防范措施至关重要。

希望本文能帮助读者更好地理解`Shadow SUID`的概念及其在实际场景中的应用。