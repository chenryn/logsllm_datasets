title:Efficient model checking of fault-tolerant distributed protocols
author:P&apos;eter Bokor and
Johannes Kinder and
Marco Serafini and
Neeraj Suri
Efﬁcient Model Checking of Fault-Tolerant Distributed Protocols
P´eter Bokor†, Johannes Kinder†, Marco Seraﬁni‡ and Neeraj Suri†
†Technische Universit¨at Darmstadt, Germany
{pbokor,kinder,suri}@cs.tu-darmstadt.de
‡Yahoo! Research, Barcelona, Spain
seraﬁPI:EMAIL
Abstract—To aid the formal veriﬁcation of fault-tolerant
distributed protocols, we propose an approach that signiﬁcantly
reduces the costs of their model checking. These protocols
often specify atomic, process-local events that consume a set
of messages, change the state of a process, and send zero
or more messages. We call such events quorum transitions
and leverage them to optimize state exploration in two ways.
First, we generate fewer states compared to models where
quorum transitions are expressed by single-message transi-
tions. Second, we reﬁne transitions into a set of equivalent,
ﬁner-grained transitions that allow partial-order algorithms
to achieve better reduction. We implement the MP-Basset
model checker, which supports reﬁned quorum transitions. We
model check protocols representing core primitives of deployed
reliable distributed systems, namely: Paxos consensus, regular
storage, and Byzantine-tolerant multicast. We achieve up to
92% memory and 85% time reduction compared to model
checking with standard unreﬁned single-message transitions.
I. INTRODUCTION
Message-passing is a broadly used communication and
programming paradigm in the design of reliable distributed
systems [6], [32], [10], [28]. However, given the complex-
ity resulting from concurrency and faults, message-passing
systems are prone to subtle bugs [29], [23], [35], [37].
Consequently, a variety of formal techniques is advocated
for ascertaining protocol correctness. A widely used formal
technique for ﬁnding bugs or proving their absence is model
checking [12], i.e., the automated and exhaustive exploration
of the system’s state space. The continuing main limitation
of model checking is that the size of the full state space
(and the corresponding time of exploration) is intractably
large even for small systems, i.e., state space explosion.
An effective measure against state space explosion is
abstraction [12], the separation of the conceptual, protocol-
level state space from the low-level implementation (Fig-
ure 1). An implementation of protocol-level constructs
deﬁnes a “one-to-many” mapping between protocol and
implementation-level states and transitions. Once the cor-
rectness of the implementation (i.e., the mapping in general)
is veriﬁed, a new protocol can be checked on the reduced
protocol-level state space only [23]. If the implementation is
Research supported in part by EC FP7 INDEXYS, Loewe TUD CASED,
and DFG GKMM.
Figure 1.
Illustration of protocol and implementation-level states.
not proven correct, the properties that hold at protocol-level
are still valuable, e.g., to justify the conceptual design, but
they do not transfer to the implementation.
Another generic state space reduction technique is partial-
order reduction (POR) [12]. POR assumes that the system
is deﬁned in terms of transitions, i.e., atomic operations
that change the state of the system. In message passing
systems, for example, transitions are the sending or receiv-
ing of messages. The idea of POR is that the sequential
execution of “independent” transitions leads to the same
state irrespective of the relative order of the transitions and,
often, the intermediate states do not impact the properties
of interest. Therefore, it sufﬁces to explore a representative
execution order of such transitions.
Our overall goal is to minimize the size of protocol-level
models and to perform space and time efﬁcient state explo-
ration of these models. A general pattern in the message-
passing computation model is that a transition consumes
multiple messages by a single execution. We call such tran-
sitions quorum transitions. Generally speaking, a quorum
transition can process multiple messages, change the state
of the process that executes it, and send new messages, in a
single indivisible step. We show that quorum transitions not
only enable a natural speciﬁcation of a class of protocols,
they also yield succinct protocol-level models and allow
better POR performance.
As an example of quorum transitions, consider systems
that guarantee reliability under the assumption that
the
number of faulty processes lies below a given threshold and
each correct (non-faulty) process executes an instance of the
same replicated service [4], [6], [10], [38]. The threshold
assumption implies that a set of messages from a large
enough subset (or quorum) of processes contains at least
one message from a correct process. Therefore, a common
technique in such systems is that the execution of an event
is triggered when a set of messages from a quorum (e.g., a
majority) of processes is received.
Exploiting the characteristics of quorum transitions, we
make the following contributions:
• We argue for quorum transitions to be modeled at the
protocol-level. Otherwise, a quorum transition must be
modeled via a sequence of transitions, each of them
processing a single message, which generates a large
number of (implementation-level) states (Section II).
Although the implementation of quorum transitions can
be complex, its correctness has to be veriﬁed only once.
• We observe that, maybe surprisingly, the deﬁnition of
transitions, which depends on the programming style
and language, can greatly affect the reduction achieved
by POR. We introduce the concept of transition re-
ﬁnement, which exploits this observation to tune POR
for better performance. Transition reﬁnement splits a
transition into multiple sub-transitions such that (a) the
behavior of the system remains the same and (b) POR
algorithms can detect more independent transitions. In
particular, we deﬁne two transition reﬁnement strate-
gies: quorum-split and reply-split (Section III).
• We implement a POR-based model checker called MP-
Basset that supports quorum transitions and the quorum
and reply-split strategies. MP-Basset is built upon Bas-
set, an existing model checker for actor programs, and
upon its input language ActorFoundry [23]. Our proto-
col speciﬁcation language is highly expressive, allowing
the execution of arbitrary Java code that respects the
message-passing computation model (Section IV).
• We evaluate MP-Basset based on diverse protocol ex-
amples with a range of fault semantics, namely (a)
Paxos, a fundamental crash-tolerant consensus protocol
[20], (b) a message-based regular storage implementa-
tion [3], and (c) a Byzantine-tolerant multicast protocol
[26]. As the protocol properties are preserved by POR,
our veriﬁcation results are sound. While Paxos-similar
protocols and storage implementations are already see-
ing deployment in various commercial settings [10],
[38], [40], ready-to-use Byzantine tolerant libraries are
also available [41]. Our experiments show that
the
proposed approach can be highly efﬁcient with savings
(veriﬁcation memory and time) of more than one order
of magnitude compared to models with unsplit single-
message transitions. In addition, the proposed approach
is also suitable for fast debugging especially of “subtle”
bugs (Section V).
II. MESSAGE-PASSING MODELS WITH QUORUM
TRANSITIONS
In this section, we brieﬂy review the message-passing
computation model [4]; we use simpliﬁed but equivalent
semantics, which does not distinguish delivery and sending
transitions and is better suited for model checking [8].
We then introduce MP, a Java-like language for specifying
message-passing protocols. Finally, we show how quorum
transitions affect the size of protocol-level models.
A. The Message-Passing Computation Model
Syntax. The system consists of n processes communi-
cating via directed channels, which are (unordered) sets of
messages from a set M . For processes i, j, ci,j represents
a channel from process i to j and is called the outgoing
channel of process i and incoming channel of j. Each
process i assumes a set Si of local states. Initially, every
process i is in some initial state from Si, and all channels
are empty.
A message passing protocol is speciﬁed by deﬁning a set
Ti of transitions for each process i. Intuitively, a transition
t ∈ Ti can consume zero or more messages from the
incoming channels of i, change the local state of i, and
send multiple messages. If it can consume more than one
(respectively, at most one) message, t is called a quorum
(respectively, single-message) transition. t is associated with
a predicate (or guard) gt, whose truth value depends only on
a set of incoming messages and i’s local state. In addition,
t is associated with ls t : Si × 2M → Si, the local state
transition function of t. Intuitively, ls t returns the new local
state of process i depending on the current local state and
a set of incoming messages. If the guard is true (i.e., t is
enabled) in the current local state of i for a set of messages
X in the incoming channels of i, the transition t can be
executed. After executing t, all messages in X have been
removed from the incoming channels of i, its local state
may have been updated via ls t, and messages may have
been added (i.e., sent) to the incoming channels of other
processes.
Note that transitions can be non-deterministic. For exam-
ple, if transition t is enabled for messages {m1} and {m2},
then t non-deterministically consumes either m1 or m2.
Semantics. The semantics of a message passing protocol
is given by a state graph, i.e., pairs of states forming directed
edges. Formally, a state graph (often referred to as Kripke
structure [12]) is a tuple (S, S0, ∆), where S is the set of
states, S0 is the set of initial states, and ∆ ⊆ S ×S is a set of
state pairs. A state s ∈ S is a vector with all channel contents
and the local state of each process. We denote the contents
of channel ci,j and the local state of process i in s by s(ci,j )
and s(i), respectively. Every transition t is a relation such
that t ⊆ S × S. For every s, s′ ∈ S and t ∈ Ti, (s, s′) ∈ t
iff gt(X, s(i)) is true for some subset X of the union of all
incoming channels of i in s and s′ is identical to s except
2
@guard
boolean READ_REPL(READ_REPL[] messages) {
// guard: replies from a majority of N acceptors
return messages.length==(Math.ceil((double)(N+1)/2));
}
@message
void READ_REPL(READ_REPL message){
cnt++;
... // stores READ REPL if it is the highest seen
if (cnt>=(Math.ceil((double)(N+1)/2))){
@message
void READ_REPL(READ_REPL[] messages) {
... // select highest READ REPL message among messages
WRITE write=new WRITE(propNo, readReplHighest.val);
for (ActorName w : acceptors)
send(w, write);
}
Figure 2. MP syntax: Quorum transition in Paxos.
for the following: (1) the messages in X are removed from
the input channels of i, (2) s′(i) = ls t(s(i), X), and (3) zero
or more messages are added to every outgoing channel of i.
In this case, we say that t is executed in s with X and write
t(X)
−−−→ s′. Now, (s, s′) ∈ ∆ iff there is a transition t such
s
that (s, s′) ∈ t.
For later use, we deﬁne senders(X) to be {j | m ∈
the set of processes that have
X ∧ m ∈ s(cj,i)},
t(X)
sent a message in X. If there is s
−−−→ s′ such that
|senders(X)| > 1, then t is a quorum transition. Otherwise,
t is a single-message transition.
i.e.,
Properties. Properties of a state graph can be deﬁned
using temporal logics [12]. These properties are interpreted
over paths, i.e., sequences of states starting in an initial
state such that each state is connected to the next state
in the sequence. For example, a simple but useful class of
properties are invariants, which deﬁne a state-local predicate
that must hold in every state of any path. A counterexample
is a path that violates the property. The property is true if
there exist no counterexamples.
B. MP: A Language Implementation
We have implemented a language called MP (from
message-passing) which allows specifying protocols in the
message-passing computation model. MP extends the input
language of the Basset model checker [23] with quorum
transitions. MP inherits from Basset the ability to specify
expressive guards and transitions in native Java. The only
restrictions compared to full-ﬂedged Java (in both Basset
and MP-Basset) are imposed by the message-passing com-
putation model, e.g., transitions cannot change the local state
of other processes.
Figure 2 shows an example of a quorum transition from
the Paxos consensus protocol [20] written in MP. In this
transition a proposer deﬁnes its behavior on receiving a
READ REPL message from a quorum of acceptors.1 By
convention, the type of the message (here READ REPL)
1The original Paxos protocol is deﬁned in terms of four phases 1a, 1b,
2a, and 2b, which we call READ, READ REPL, WRITE, and ACCEPT,
respectively. In the following discussion we assume basic familiarity with
Paxos. As space constraints preclude us from fully detailing the protocol
operations, we point the reader to [20], [21] and also pages 8-9.
cnt=0;
WRITE write=new WRITE(propNo, readReplHighest.val);
for (ActorName w : acceptors)
send(w, write);
}
}
Figure 3. MP syntax: Single-message Paxos transition.
must match with the name of the transition. The transi-
tion (annotated by @message) can only be executed if its
guard (annotated by @guard) is true. In this example, the
guard requires that the quorum contains a majority of the
N acceptors. In the body of the transition the proposer
sends the “highest” among the READ REPL messages to
all acceptors. Again, the name of the transition (and the
corresponding guard) determines the type of messages this
transition can consume. The argument of the transition (and
guard) is an array of this message type, which stores the
messages consumed by the transition. In accordance with
the message-passing model, the order of elements in the
array is arbitrary. It is guaranteed by the implementation
that, given the current state of the process and the input
array of messages, the guard function returns true before
any execution of the transition.
A transition can change the local state of a process and
send messages. Messages are sent using the send operation,
which takes the recipient and the message as arguments.
For example, the READ REPL transition sends the same
WRITE message to every acceptor (Figure 2).
C. MP without Quorum Transitions
Arguably, implementing quorum transitions is more com-
plex than single-message transitions. We now show that the
extra effort can pay off, given that the use of only single-
message transitions can inﬂate the size of the state space.
Consider a language where only single-message transi-
tions are allowed [23], i.e., a transition cannot consume
multiple messages. In such a language the transition of Paxos
shown in Figure 2 cannot be directly deﬁned. We can de-
scribe a Paxos-like protocol by “simulating” READ REPL
via single-message transitions. Figure 3 shows such a tran-
sition: it receives a READ REPL message, increments cnt
to count the number of messages, and, if a majority of
acceptors have sent a READ REPL message, sends the
WRITE message (with the same content as in Figure 2). In
this case, the counter is reset, and the process of collecting
READ REPL messages starts over.
State space issues. A signiﬁcant drawback of express-
ing quorum transitions with single-message transitions is
that
they can be interleaved with other transitions. For
example, given the single-message READ REPL and an-
other transition of Paxos that can be co-enabled in states
3
where READ REPL is executed, a model checker executes
READ REPL and this other transition in different orders in
each of these states.
In general, consider a message-passing protocol P and
transitions t1, ..., tk that are enabled in some state s. De-
pending on the order of execution, the number of different
states resulting from executing t1, ..., tk is at most k!k.
Let t be a quorum transition that is enabled in s for a set
t(X)
−−−→ s′ for some s′. Assume that P ′ is a message-
X and s
passing protocol that is speciﬁed via single-message transi-
tions only and s′ is reachable from s in P ′. The shortest
path from s to s′ in P ′ contains at least |X| = l transitions,