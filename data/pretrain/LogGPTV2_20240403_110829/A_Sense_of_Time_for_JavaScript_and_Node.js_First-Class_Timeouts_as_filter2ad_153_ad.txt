### Optimized Text

**Node.cure: Detecting and Mitigating EHP Attacks in Node.js**

#### 1. Introduction
Node.cure is designed to detect and abort long-running callbacks and tasks executing on Node.js's event handlers. For unique malicious inputs, this is the best we can achieve at runtime, as accurately predicting whether an unseen input will time out is challenging.

If an attacker reuses the same malicious input multiple times, we can track whether the input led to a timeout and short-circuit subsequent requests with an early timeout. While this memoization technique could be applied to any API, the size of the input space to track is a limiting factor. Malicious inputs that trigger CPU-bound EHP attacks, such as ReDoS, exploit properties of the vulnerable algorithm and are typically not unique. In contrast, I/O-bound EHP attacks, like ReadDoS, often target specific slow resources, providing an opportunity to short-circuit requests on these slow resources.

#### 2. Slow Resource Management
In Node.cure, we implemented a slow resource management policy for libuvâ€™s file system APIs, specifically those that reference a single resource (e.g., open, read, write). When one of these APIs times out, we mark the file descriptor and the associated inode number as slow. We then permanently blacklist these resources by aborting subsequent accesses. This approach has the added benefit of solving the dangling worker problem for write operations. This policy is suitable for the file system, where access times are unlikely to change. However, we did not implement a similar policy for DNS queries, as timeouts in DNS might be due to network issues, and a temporary blacklist would be more appropriate.

#### 3. Implementation
Node.cure is built on top of Node.js LTS v8.8.1, a recent long-term support version of Node.js. Our prototype is for Linux, and we added approximately 4,000 lines of C, C++, and JavaScript code across 50 files, spanning V8, libuv, the Node.js C++ bindings, and the Node.js JavaScript libraries.

Node.cure passes the core Node.js test suite, with a few failures due to interactions with experimental or deprecated features. Several cases fail when they invoke rarely-used file system APIs that we did not make timeout-aware. Real applications run on Node.cure without difficulty (Table 3).

Timeouts for callbacks and tasks in Node.cure are controlled by environment variables. Our implementation can accommodate fine-grained assignment of timeouts for individual callbacks and tasks.

#### 4. Evaluation
We evaluated Node.cure in terms of its effectiveness, runtime overhead, and security guarantees.

- **Effectiveness**: Node.cure detects all known EHP attacks with overhead ranging from 1.3x to 7.9x on micro-benchmarks but manifesting at 1.0x to 1.24x using real applications.
- **Runtime Overhead**: The overhead introduced by Node.cure varies depending on the application. Applications that make little use of the Worker Pool pay minimal overhead, while those that use the Worker Pool may experience higher overhead due to data buffering.
- **Security Guarantees**: Node.cure enforces timeouts for all vulnerable JavaScript and framework APIs identified by both us and the Node.js developers as long-running. However, applications that add their own C++ bindings may not be timeout-aware without refactoring. Only 0.7% of npm modules define C++ bindings, indicating that this is not a significant limitation.

#### 5. Practitioner Community Impact
To engage the EDA practitioner community, we published a guide on safe service architecture for Node.js on nodejs.org and studied unnecessarily vulnerable Node.js APIs, adding documentation or improving their security.

- **Guide on Safe Service Architecture**: We prepared a guide to building EHP-safe EDA-based applications, which was merged into the official Node.js documentation.
- **Changes to API and Documentation**: We identified and proposed patches to improve the documentation and functionality of several vulnerable APIs in Node.js, such as `fs.readFile`, `crypto.randomFill`, and `crypto.randomBytes`.

By addressing these areas, Node.cure aims to provide robust protection against EHP attacks while maintaining acceptable performance and ease of integration for real-world applications.