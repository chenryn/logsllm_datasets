tects and aborts long-running callbacks and tasks execut-
ing on Node.js’s Event Handlers. For unique evil input
this is the best we can do at runtime, because accurately
predicting whether a not-yet-seen input will time out is
difﬁcult.
If an attacker might re-use the same evil in-
put multiple times, however, we can track whether or not
an input led to a timeout and short-circuit subsequent re-
quests that use this input with an early timeout.
While evil input memoization could in principle be ap-
plied to any API, the size of the input space to track is a
limiting factor. The evil inputs that trigger CPU-bound
EHP attacks such as ReDoS exploit properties of the vul-
nerable algorithm and are thus usually not unique.
In
contrast, the evil inputs that trigger I/O-bound EHP at-
tacks such as ReadDoS must name a particularly slow
resource, presenting an opportunity to short-circuit re-
quests on this slow resource.
In Node.cure we implemented a slow resource man-
agement policy for libuv’s ﬁle system APIs, targeting
those that reference a single resource (e.g. open, read,
write). When one of the APIs we manage times out, we
mark the ﬁle descriptor and the associated inode num-
ber as slow. We took the simple approach of perma-
nently blacklisting these aliases by aborting subsequent
accesses8, with the happy side effect of solving the dan-
gling worker problem for write. This policy is appropri-
ate for the ﬁle system, where access times are not likely
to change9. We did not implement a policy for DNS
queries. In the context of DNS, timeouts might be due
to a network hiccup, and a temporary blacklist might be
more appropriate.
8To avoid leaking ﬁle descriptors, we do not eagerly abort close.
9Of course, if the slow resource is in a networked ﬁle system such as
NFS or GPFS, slowness might be due to a network hiccup, and incorpo-
rating temporary device-level blacklisting might be more appropriate.
USENIX Association
27th USENIX Security Symposium    351
Implementation
5.6
Node.cure is built on top of Node.js LTS v8.8.1, a re-
cent long-term support version of Node.js10. Our proto-
type is for Linux, and we added 4,000 lines of C, C++,
and JavaScript code across 50 ﬁles spanning V8, libuv,
the Node.js C++ bindings, and the Node.js JavaScript li-
braries.
Node.cure passes the core Node.js test suite, with a
handful of failures due to bad interactions with experi-
mental or deprecated features. In addition, several cases
fail when they invoke rarely-used ﬁle system APIs we
did not make timeout-aware. Real applications run on
Node.cure without difﬁculty (Table 3).
In Node.cure, timeouts for callbacks and tasks are con-
trolled by environment variables. Our implementation
would readily accommodate a ﬁne-grained assignment
of timeouts for individual callbacks and tasks.
6 Evaluating Node.cure
We evaluated Node.cure in terms of its effectiveness
(§6.1), runtime overhead (§6.2), and security guaran-
tees (§6.3). In summary: with a lazy TimeoutWatchdog,
Node.cure detects all known EHP attacks with overhead
ranging from 1.3x-7.9x on micro-benchmarks but mani-
festing at 1.0x-1.24x using real applications. Node.cure
guarantees EHP-safety to all Node.js applications that do
not deﬁne their own C++ bindings.
All measurements provided in this section were ob-
tained on an otherwise-idle desktop running Ubuntu
16.04.1 (Linux 4.8.0-56-generic), 16GB RAM, Intel i7
@3.60GHz, 4 physical cores with 2 threads per core.
For a baseline we used Node.js LTS v8.8.1 from which
Node.cure was derived, compiled with the same ﬂags.
We used a default Worker Pool (4 Workers).
6.1 Effectiveness
To evaluate the effectiveness of Node.cure, we devel-
oped an EHP test suite that makes every type of EHP
attack, as enumerated in Table 1. Our suite is com-
prehensive and conducts EHP attacks using every vul-
nerable API we identiﬁed, including the language level
(regular expressions, JSON), framework level (all vul-
nerable APIs from the ﬁle system, DNS, cryptography,
and compression modules), and application level (inﬁ-
nite loops, long string operations, array sorting, etc.).
This test suite includes each type of real EHP attack
from our study of EHP vulnerabilities in npm mod-
ules (§3.4). Node.cure detects all 92 EHP attacks in
this suite: each synchronous vulnerable API throws a
TimeoutError, and each asynchronous vulnerable API
10Speciﬁcally, we built Node.cure on Node.js v8.8.1 commit
dc6bbb44da from Oct. 25, 2017.
returns a TimeoutError. Our suite could be used to eval-
uate alternative defenses against EHP attacks.
software
To evaluate any difﬁculties in porting real-world
to Node.cure, we ported the
Node.js
node-oniguruma [12] npm module.
This module
ofﬂoads worst-case exponential
regular expression
queries from the Event Loop to the Worker Pool using
a C++ add-on. We ported it using the API described
in Table 2 without difﬁculty, as we did for the core
modules, and Node.cure then successfully detected
ReDoS attacks against this module’s vulnerable APIs.
6.2 Runtime overhead
We evaluated the runtime overhead using micro-
benchmarks and macro-benchmarks. We address other
costs in the Discussion.
Overhead: Micro-benchmarks. Whether or not they
time out, Node.cure introduces several sources of over-
heads to monitor callbacks and tasks. We evaluated the
most likely candidates for performance overheads using
micro-benchmarks:
1. Every time V8 checks for interrupts, it now tests for a
pending timeout as well.
2. Both the precise and lazy versions of the Timeout-
Watchdog require instrumenting every asynchronous
callback using async-hooks, with relative overhead
dependent on the complexity of the callback.
3. To ensure memory safety for dangling workers,
Workers operate on buffered data that must be allo-
cated when the task is submitted. For example, Work-
ers must copy the I/O buffers supplied to read and
write twice.
New V8 interrupt. We found that the overhead of our
V8 Timeout interrupt was negligible, simply a test for
one more interrupt in V8’s interrupt infrastructure.
TimeoutWatchdog’s async hooks. We measured the
additional cost of invoking a callback due to Timeout-
Watchdog’s async hooks. A precise TimeoutWatchdog
increases the cost of invoking a callback by 7.9x due
to the synchronous communication between Event Loop
and TimeoutWatchdog, while a lazy TimeoutWatchdog
increases the cost by 2.4x due to the reduced cost of
asynchronous communication. While these overheads
are large, note that they are for an empty callback. As
the number of instructions in a callback increases, the
cost of executing the callback will begin to dominate the
cost of issuing the callback. For example, if the callback
executes 500 empty loop iterations, the precise overhead
drops to 2.7x and the lazy overhead drops to 1.3x. At
10,000 empty loop iterations, the precise and lazy over-
heads are 1.15x and 1.01x, respectively.
Worker buffering. Our timeout-aware Worker Pool re-
quires buffering data to accommodate dangling workers,
affecting DNS queries and ﬁle system I/O. Our micro-
352    27th USENIX Security Symposium
USENIX Association
Benchmark
LokiJS [11]
Node Acme-Air [3]
webtorrent [26]
ws [27]
Three.js [23]
Express [5]
Sails [21]
Restify [20]
Koa [9]
Description
Server, Key-value store
Server, Airline simulation
Server, P2P torrenting
Utility, websockets
Utility, graphics library
Middleware
Middleware
Middleware
Middleware
Overheads
1.00, 1.00
1.03, 1.02
1.02, 1.02
1.00, 1.00*
1.09, 1.08
1.24, 1.06
1.23, 1.14*
1.63, 1.14*
1.60, 1.24
Table 3: Results of our macro-benchmark evaluation of Node.cure’s
overhead. Where available, we used the benchmarks deﬁned by the
project itself. Otherwise, we ran its test suite. Overheads are reported
as “precise, lazy”, and are the ratio of Node.cure’s performance to that
of the baseline Node.js, averaged over several steady-state runs. We
report the average overhead because we observed no more than 3%
standard deviation in all but LokiJS, which averaged 8% standard de-
viation across our samples of its sub-benchmarks. *: Median of sub-
benchmark overheads.
benchmark indicated a 1.3x overhead using read and
write calls with a 64KB buffer. This overhead will vary
from API to API.
Overhead: Macro-benchmarks.
Our micro-
benchmarks suggested that the overhead introduced by
Node.cure may vary widely depending on what an appli-
cation is doing. Applications that make little use of the
Worker Pool will pay the overhead of the additional V8
interrupt check (minimal) and the TimeoutWatchdog’s
async hooks, whose cost is strongly dependent on the
number of instructions executed in the callbacks. Appli-
cations that use the Worker Pool will pay these as well
as the overhead of Worker buffering (variable, perhaps
1.3x).
We chose macro-benchmarks using a GitHub pot-
pourri
technique: we searched GitHub for “lan-
guage:JavaScript”, sorted by “Most starred”, and iden-
tiﬁed server-side projects from the ﬁrst 50 results. To
add additional complete servers, we also included Lok-
iJS [11], a popular key-value store, and IBM’s Acme-
Air airline simulation [3], which is used in the Node.js
benchmark suite.
Table 3 lists the macro-benchmarks we used and the
performance overhead for each type of TimeoutWatch-
dog. These results show that Node.cure introduces min-
imal overhead on real server applications, and they con-
ﬁrm the value of a lazy TimeoutWatchdog. Matching
our micro-benchmark assessment of the TimeoutWatch-
dog’s overhead, the overhead from Node.cure increased
as the complexity of the callbacks used in the macro-
benchmarks decreased — the middleware benchmarks
sometimes used empty callbacks to handle client re-
quests. In non-empty callbacks similar to those of the
real servers, this overhead is amortized.
6.3 Security guarantees
As described in §5, our Node.cure prototype imple-
ments ﬁrst-class timeouts for Node.js. Node.cure en-
forces timeouts for all vulnerable JavaScript and frame-
work APIs identiﬁed by both us and the Node.js develop-
ers as long-running: regular expressions, JSON, ﬁle sys-
tem, DNS, cryptography, and compression. Application-
level APIs composed of these timeout-aware language
and framework APIs are also timeout-aware.
However, Node.js also permits applications to add
their own C++ bindings, and these may not be timeout-
aware without refactoring. To evaluate the extent of this
limitation, we measured the number of npm modules that
deﬁne C++ bindings. These modules typically depend on
the node-gyp and/or nan modules [37, 38]. We obtained
the dependency list for each of the 628,863 npm modules
from skimdb.npmjs.com and found that 4,384 modules
(0.7%) had these dependencies11.
As only 0.7% of npm modules deﬁne C++ bindings,
we conclude that C++ bindings are not widely used and
that they thus do not represent a serious limitation of our
approach. In addition, we found the refactoring process
for C++ bindings straightforward when we performed it
on the Node.js framework and the node-oniguruma mod-
ule as described earlier.
7 Practitioner Community Impact
In conjunction with the development of our Node.cure
prototype, we took a two-pronged approach to reach
out to the EDA practitioner community. First, we pub-
lished a guide on safe service architecture for Node.js on
nodejs.org. Second, we studied unnecessarily vulnera-
ble Node.js APIs and added documentation or increased
the security of these APIs.
7.1 Guide on safe service architecture
Without ﬁrst-class timeouts, developers in the EDA com-
munity must resort to partitioning as a preventive mea-
sure. Do new Node.js developers know this? We expect
they would learn from the Node.js community’s guides
for new developers, hosted on the nodejs.org website.
However, these guides skip directly from “Hello world”
to deep dives on HTTP and proﬁling. They do not ad-
vise developers on the design of Node.js applications,
which as we have discussed must ﬁt the EDA paradigm
and avoid EHP vulnerabilities.
We prepared a guide to building EHP-safe EDA-
based applications, including discussions about appro-
priate work patterns and the risks of high-complexity
operations.
The pull request with the guide was
merged after discussion with the community.
It can
11We counted those that matched the regexp "nan"|"node-gyp"
on 11 May 2018.
USENIX Association
27th USENIX Security Symposium    353
be found at https://nodejs.org/en/docs/guides/
dont-block-the-event-loop/. We believe that it
will give developers insights into secure Node.js pro-
gramming practices, and should reduce the incidence of
EHP vulnerabilities in practice.
7.2 Changes to API and documentation
We studied the Node.js implementation and identi-
ﬁed several unnecessarily vulnerable APIs in Node.js
v8. Each of fs.readFile, crypto.randomFill, and
crypto.randomBytes submits a single unpartitioned task
to the Worker Pool, and in each of these cases a large task
could be expensive in terms of I/O or computation. Were
a careless developer to submit a large request to one of
these APIs, it could cause one of the Workers to block.
This risk was not mentioned in the API documentation.
These APIs could instead be automatically partitioned by
the framework to avoid their use as an EHP vector.
We took two steps to address this state of affairs. First,
we proposed documentation patches warning develop-
ers against submitting large requests to these APIs, e.g.
“The asynchronous version of crypto.randomBytes()
is carried out in a single threadpool request. To min-
imize threadpool task length variation, partition large
randomBytes requests when doing so as part of fulﬁll-
ing a client request” [39]. These patches were merged
without much comment. Second, we submitted a patch
improving the simplest of these APIs, fs.readFile. This
API previously read the entire ﬁle in a single read re-