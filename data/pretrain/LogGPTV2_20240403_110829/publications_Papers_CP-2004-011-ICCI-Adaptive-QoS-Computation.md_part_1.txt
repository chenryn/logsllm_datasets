### Adaptive Algorithm to Predict the QoS of Web Processes and Workflows

**Jorge Cardoso**

**Abstract:**
Workflow Management Systems (WfMS) enable organizations to streamline and automate business processes, as well as reengineer their structure. A critical requirement for such systems is the management and computation of the Quality of Service (QoS) of processes and workflows. Currently, a variety of web process and workflow languages exist, each characterized by the set of patterns they support. Developing and implementing a generic algorithm to compute the QoS of processes designed using different languages is challenging due to the specificity of some patterns and the potential introduction of new patterns in future versions of these languages. This paper describes an adaptive algorithm that addresses these challenges. The algorithm can be dynamically modified to accommodate changes in the patterns supported by process languages. The development of such algorithms is the primary objective of this paper.

**Keywords:**
Quality of Service, Web processes, Web services, Workflows

---

### 1. Introduction

With the emergence of web services, Workflow Management Systems (WfMS) have become essential for supporting, managing, and enacting workflows and web processes, both within and between enterprises. The management of QoS is crucial for the success of organizations involved in e-commerce. One key requirement for QoS management is the ability to automatically compute the QoS of web processes based on the QoS of their components (i.e., web services). This feature is particularly important for large processes that may involve hundreds of web services, where manual computation is impractical.

The implementation of QoS management involves developing integrated solutions composed of four modules: specification, prediction, monitoring, and control. In this paper, we focus on the development of prediction algorithms, which are essential for computing the QoS of a web process before it is made available to customers. Given the lack of consensus on the patterns or control-flow constructs that should be part of web processes or workflow languages, prediction algorithms need to be tailored to fit the patterns of specific process specification languages. As a result, slightly different implementations of the same prediction algorithm must be developed for each process language.

---

### 2. QoS Prediction Algorithms

#### 2.1. Importance of QoS in Process Design

The design and composition of processes cannot ignore the importance of QoS measurements. The management of QoS directly impacts the success of organizations participating in e-commerce. One important requirement for QoS prediction algorithms is the ability to automatically compute the QoS of web processes based on the QoS of process components (i.e., web services). This is especially important for large processes that may contain hundreds of web services, making manual computation unrealistic.

#### 2.2. Describing the Structure of a Process

Web processes, workflows, and processes in general can be specified using languages such as BPEL4WS and WSFL. A web process schema is the actual topology of a process, representing the sequence of web services that must be performed to achieve an organizational goal. An example of a web process is illustrated in Figure 1.

![Example of a Web Process](figure1.png)

#### 2.3. Computing Web Processes' QoS

We identify two methods for computing the overall QoS of processes: mathematical modeling and simulation. Simulation will not be discussed here, and readers are referred to [4] for details on simulation analysis techniques and systems.

Mathematical modeling methods formally describe the formulae to compute QoS metrics among web services. In the next section, we present an algorithm that we have developed to automatically compute the overall QoS of a process.

#### 2.4. The SWR Algorithm

To compute QoS metrics for web processes based on web service QoS metrics, the Stochastic Workflow Reduction (SWR) algorithm [5] can be used. Initially developed for workflows, this algorithm can also be applied to web processes. The SWR algorithm repeatedly applies a set of reduction rules to a web process until only one web service remains. Each time a reduction rule is applied, the process structure changes. When only one web service remains, it contains the QoS metrics corresponding to the web process under analysis.

The algorithm uses a predefined set of six reduction rules because most workflow systems support them. However, the algorithm is static and cannot easily be adapted to new patterns. For example, Figure 2 shows how a system of parallel web services can be reduced to a sequence of three web services.

![Reduction of Parallel Web Services](figure2.png)

---

### 3. From a Static to an Adaptive QoS Prediction Algorithm

In this section, we present two versions of the SWR algorithm. The first version is a static version, where any modification or adaptation to support new process patterns requires recoding and recompiling the algorithm. The second version is adaptive, allowing new patterns to be dynamically added or retracted without the need to recompile or rebuild the algorithm.

#### 3.1. SWR Algorithm: The Static Version

Comprehensive solutions to the difficult problems encountered in synthesizing QoS for composite web services (web processes) are discussed in detail [8]. The SWR algorithm can compute metrics such as response time (T), cost (C), and reliability (R). The algorithm has six reduction rules (sequential, parallel, conditional, fault-tolerant, loop, and network) that are hard-coded and static.

As an illustration, Figure 2 shows how a system of parallel web services can be reduced to a sequence of three web services.

#### 3.2. The Need for an Adaptive Algorithm

A large number of process specification languages exist, and there is a lack of consensus on what constitutes a web process specification. While some languages have been around for over a decade, there is no agreement on the key components of a process specification language. Process specification languages, such as workflow languages, can be described based on the control flow constructs they allow to model. These constructs, known as patterns, describe control flow dependencies and address business requirements.

It is important to realize that patterns are derived from business requirements. Depending on the application domain, it may be essential to create additional patterns to represent and handle particular types of control flow structures. When new patterns are needed to design processes with specific requirements, the QoS of the newly created process can no longer be computed and analyzed using a static algorithm. One solution is to rewrite and recompile the algorithm, but a more attractive solution is to use an adaptive algorithm that can accept new patterns as needed.

---

### 4. Conclusions

This paper presents an adaptive algorithm for predicting the QoS of web processes and workflows. The algorithm can be dynamically modified to accommodate changes in the patterns supported by process languages. This adaptability is crucial given the lack of consensus on the patterns and control-flow constructs that should be part of web processes or workflow languages. The development of such adaptive algorithms is essential for the effective management of QoS in modern e-commerce and e-business activities.

---

**References:**

[1] Reference 1
[2] Reference 2
[3] Reference 3
[4] Reference 4
[5] Reference 5
[6] Reference 6
[7] Reference 7
[8] Reference 8

---

**Manuscript received October 29, 2004.**

**J. Cardoso is with the Department of Mathematics and Engineering, University of Madeira, Funchal, 9000-019 Portugal (Phone: 291-705-156; Fax: 291-705-199; e-mail: PI:EMAIL).**