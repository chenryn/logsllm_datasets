### 10 Seconds Overview
- All connections to the service port numbers are blocked by a firewall in PC B to prevent any file transfers to the Winny network.
- Traffic is measured using Snort version 2.0.

### 4. Proposed Identification Method for Pure P2P Traffic

Traditional Internet applications such as WWW, FTP, and E-mail are based on the client/server computing model. In this model, each communication entity is categorized as either a server or a client. The server provides the service, while the client receives it. When communication begins, the client accesses the server's service port using its client port, and the server provides its service over the connection. Thus, the communication is identified by a single tuple of source/destination IP addresses, source/destination port numbers, and protocol number.

In contrast, pure P2P communications involve peers that act simultaneously as both servers and clients. Consequently, there are two types of connections between peers during their communication. Our traffic identification method focuses on the access relations to the ports among the peers.

#### 4.1. Proposed Identification Method 1

The core idea of our proposed identification method is to use a decoy peer to collect all pairs of IP addresses and service ports of the Winny peers. However, due to the limited search capacity of the decoy peers, collecting all these pairs is challenging. Therefore, we need to find the missing Winny peers by leveraging the server/client relationship between peers.

**Figure 2: Procedures of our proposed identification method 1**

We place Peer B as a decoy peer in the stub network with an IP address of W.X.Y.Z and service port numbers 10001–10005. The service and client ports are depicted by circles beside the PCs. As soon as the decoy peer joins the Winny network, other peers in the network access it, and the decoy peer continuously accesses peers in the Internet to configure the overlay networks. Each arrow represents a connection made by one peer to another's service port. These accesses are measured in PCs A and B.

**Procedures:**

1. **Identify Service Port Number and IP Address of Winny Peers:**
   - When the decoy peer B joins the Winny network, some Winny peers in the Internet access the service port of the decoy peer B. The accesses come from the client ports, and we can only identify the IP addresses of the Winny peers. The decoy peer B functions as the server. We add these IP addresses to database α (e.g., peer a IP, peer b IP, and peer c IP).
   
2. **Accessing Service Ports of Winny Peers:**
   - Using its client port, the decoy peer B accesses the service ports of the Winny peers in the Internet. If the decoy peer B accesses peers in database α, we can identify the service port and IP address of the Winny peers (including peers in the stub network). We add the IP addresses and service ports to database β (e.g., peer a IP:service port number, peer b IP:service port number, and peer c IP:service port number). In this connection, the decoy peer B functions as a client, establishing two relations between the peers.

3. **Identify IP Address and Service Port Number of Winny Users in the Stub Network:**
   - For a node inside the stub network accessing a service port of a peer in database β, the node has the capability of a Winny peer. To improve the identification probability, we define a Winny peer in the stub network as one that accesses more than two peers in database β. In this case, the access is initiated by a node inside the stub network, and the accessed port is a service port of the peer. We add the source IP address to database γ (e.g., peer C IP and peer D IP).

4. **Identifying "Winny" and "Port 0" Peers:**
   - The Winny peers in database β access the service ports of peers in database γ. If more than two peers in database β access an identical IP address and port number in the stub network, we define the peer as "Winny" and add it to database δ (e.g., peer C IP:service port number and peer D IP:service port number). Some peers in database β do not return to the peers in database γ by using their client ports because they do not prepare their service port in their settings. We call these peers "Port 0" and add their IP addresses to database .

From these procedures, we can identify the IP addresses and service ports of Winny peers in the Internet and the stub network. Figure 3 shows the relationship of the various databases of Winny peers. Using databases β, γ, and , we can select the Winny and Port 0 traffic from log A with this improved port number-based application traffic identification method.

#### 4.2. Proposed Identification Method 2

By extending the identification method proposed in the previous subsection, we can find new Winny peers iteratively (Figure 4). The service ports of Winny peers in the stub network play the same role as the decoy peer in the previous subsection.

**Procedures:**

1. **Newly Found Winny Peers:**
   - When peers d access the service ports of peers C and D, which are not in database α, the peer d becomes a newly found Winny peer. We add its IP address to database α.
   
2. **Identifying Service Port of New Peers:**
   - When peers C or D use their client ports to access peer d, the service port of peer d is identified, and the information is added to database β (e.g., peer e is also found by the same procedures).
   
3. **Identifying Peers in the Stub Network:**
   - From inside the stub network, peer E, which is not in databases δ and , accesses the newly found peers' service ports (peers d and e), and we identify their IP addresses and add them to database γ.
   
4. **Identifying "Winny" and "Port 0" Peers:**
   - If more than two peers in database β use their client ports to access peer E, the IP address and service port of the peer in the stub network are identified, and the peers are added to database δ. The "Port 0" peers are also found in database γ and added to database .

By repeating these procedures, we can eventually find new Winny peers even if they were not initially identified. The next section presents the analysis results of our proposed methods.

### 5. Analysis Results

#### 5.1. Analysis Results 1

To identify Winny peers in the stub network, we used two traffic logs. First, we determined the same 24-hour measurement period for point A and point B. The decoy peer is logged as "Winny" in log A but is excluded from the analysis results in this subsection. Some "IP address:service port" combinations in log B have not been identified as Winny peers in log A because the node address and service port number change at that time. However, our identification method ensures that the probability of false positive identification is small with these procedures.

**Number of Peers Identified in Each Step:**

1. **Unique IP Addresses of Winny Peers:**
   - 67,984 (database α).
   
2. **Unique Pairs of IP Addresses and Service Ports of Winny Peers:**
   - 45,873 (database β).
   
3. **Unique IP Addresses of Winny Peers in the Stub Network:**
   - 9 (database γ).
   
4. **Unique IP Address and Service Port of Winny Peers in the Stub Network:**
   - 0 (database δ). The number of "Port 0" peers is 9 (database ).
   
5. **No Additional Winny Peers in the Stub Network:**
   - We cannot find additional Winny peers in the stub network since there is no "Winny" peer in the stub network.

From steps (1) and (2), the service port of the decoy peer is accessed by many Winny peers in the Internet when the decoy peer joins the Winny network. In the default setting of Winny, each peer maintains a few active file search connections to other peers and searches for further connectable peers to maintain the file search network. With these procedures, several hundred peer search connections are always maintained by each Winny peer.