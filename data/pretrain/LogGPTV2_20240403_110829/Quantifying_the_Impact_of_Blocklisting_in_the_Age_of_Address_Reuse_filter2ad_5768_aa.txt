title:Quantifying the Impact of Blocklisting in the Age of Address Reuse
author:Sivaramakrishnan Ramanathan and
Anushah Hossain and
Jelena Mirkovic and
Minlan Yu and
Sadia Afroz
Quantifying the Impact of Blocklisting in the Age of Address
Reuse
Sivaramakrishnan
Ramanathan
University of Southern California
PI:EMAIL
Anushah Hossain
UC Berkeley, ICSI
PI:EMAIL
Jelena Mirkovic
USC Information Sciences Institute
PI:EMAIL
Minlan Yu
Harvard University
PI:EMAIL
ABSTRACT
Blocklists, consisting of known malicious IP addresses, can be used
as a simple method to block malicious traffic. However, blocklists
can potentially lead to unjust blocking of legitimate users due to IP
address reuse, where more users could be blocked than intended. IP
addresses can be reused either at the same time (Network Address
Translation) or over time (dynamic addressing). We propose two
new techniques to identify reused addresses. We built a crawler
using the BitTorrent Distributed Hash Table to detect NATed ad-
dresses and use the RIPE Atlas measurement logs to detect dy-
namically allocated address spaces. We then analyze 151 publicly
available IPv4 blocklists to show the implications of reused ad-
dresses and find that 53–60% of blocklists contain reused addresses
having about 30.6K–45.1K listings of reused addresses. We also find
that reused addresses can potentially affect as many as 78 legitimate
users for as many as 44 days.
CCS CONCEPTS
• Networks → Network measurement; • Security and privacy
→ Network security;
KEYWORDS
IP address reuse, blocklists, unjust blocking
ACM Reference Format:
Sivaramakrishnan Ramanathan, Anushah Hossain, Jelena Mirkovic, Minlan
Yu, and Sadia Afroz. 2020. Quantifying the Impact of Blocklisting in the
Age of Address Reuse. In ACM Internet Measurement Conference (IMC ’20),
October 27–29, 2020, Virtual Event, USA. ACM, New York, NY, USA, 10 pages.
https://doi.org/10.1145/3419394.3423657
1 INTRODUCTION
Consider one user’s experience with Cloudflare discussed under a
trouble ticket [24]. When the user tried to access any website hosted
by Cloudflare, they were unnecessarily blocked and subjected to
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’20, October 27–29, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-8138-3/20/10...$15.00
https://doi.org/10.1145/3419394.3423657
360
Sadia Afroz
ICSI/Avast
PI:EMAIL
CAPTCHAs. On further inspection, the user found that their public
IP address was shared with many other users via a Network Ad-
dress Translation (NAT). One of the NAT users was running a spam
campaign leading to the NAT’s IP address being listed in many
blocklists. It is known that Cloudflare uses its own IP reputation
with the help of blocklists [21] to protect its customers. Thus users
behind reused addresses will be unjustly blocked whenever they
access websites hosted on Cloudflare [23]. Other hosting providers
have similar issues as well [35, 36]. What should legitimate users
do when they are unjustly blocked? In fact, Cloudflare’s best prac-
tice [25] recommends users to obtain a new IP address, by either
resetting their device or by contacting their ISP. In reality, obtain-
ing a new untainted static IP address may be impossible or too
costly for many users [59, 66, 77]. This type of blocking often gets
unnoticed by the network operators because currently there is no
way to measure the excessive blocking for a blocking mechanism.
This paper proposes two techniques to measure unjust blocking
from IP blocklisting. Blocklists are lists of identifiers (most often
IP addresses) that are associated with malicious activities. For a
network operator, blocklists provide a simple method to quickly
block malicious traffic entering their network. Blocklists can have
unjust blocking due to two forms of address reuse: 1) NATed
addresses where several users share the same IP address at the
same time and 2) dynamic addressing where the same IP address is
allocated to multiple users over time.
In this study, we make the following contributions:
Detecting reused addresses: We propose two new techniques
to identify reused addresses that provide high-confidence detection,
leverage only public datasets, and can be replicated by other re-
searchers. While extensive prior work exists on detecting NATed [7,
8, 45, 49, 51, 52, 62, 69, 73] and dynamic addresses [40, 61, 78], we
find that they either do not provide sufficiently accurate and fine-
grained information per IP address or do not publicly release the
final list of reused addresses or prefixes. To detect NATed IP ad-
dresses, we implement a crawler using the BitTorrent’s Distributed
Hash Table (DHT). Our crawler detects when BitTorrent users si-
multaneously use the same IP address (Section 3.1), and thus we
can measure the lower bound of users behind that IP address that
would be adversely affected if the address were blocklisted. To
detect dynamic addresses, we use the RIPE Atlas probe measure-
ment logs to identify probes whose IP addresses change frequently
and thus determine IP prefixes that are dynamically allocated (Sec-
tion 3.2). By determining dynamic prefixes, we can identify users
IMC ’20, October 27–29, 2020, Virtual Event, USA
Ramanathan et al.
that would be affected by address reuse when allocated a previously
blocklisted IP address. Our techniques have a reasonable overlap
with the blocklisted IP address space, where BitTorrent and RIPE
addresses are present in 29.6% and 17.1% of autonomous systems
that have blocklisted addresses.
Measuring the impact of reused addresses: We apply our
detection techniques to identify reused addresses in 151 publicly
available IPv4 blocklists (Section 4). About 60% of blocklists contain
at least one NATed address and about 53% of blocklists list at least
one dynamic address that will lead to unjust blocking. We find 45.1K
and 30.6K listings in blocklists for each type of reuse, respectively.
NATed and dynamic addresses in blocklists can have an impact on
end-users by blocking as many as 78 users for as long as 44 days.
Finally, we survey 65 network operators (Section 6) on their
blocklisting practices and find that IP blocklists are often used to
directly block traffic. To assist network operators to avoid unjust
blocking, we make our techniques publicly available and also pub-
lish a new address list that has all reused addresses we detect1.
2 RELATED WORK
Existing studies identify autonomous systems (ASes) or IP prefixes
that may be reused (e.g., that use carrier-grade NATs) using heuris-
tics. However, to estimate the impact of blocklisting reused ad-
dresses, we need to accurately identify IP addresses that are reused.
Müeller et al. [52] use traceroutes to a dedicated server in an ISP to
detect middleboxes (including NAT). Other techniques use IPid [7],
OS fingerprinting [8] or UDP hole punching [69] to detect NATed
addresses. Netalyzr [45] and NetPiculet [73], on the other hand,
require users to install Android applications that carry out measure-
ments from the client’s device. Though these techniques are effec-
tive in detecting NATs, they require many users to install custom
applications to achieve significant coverage, and must continuously
incentivize them to conduct measurements. These measurements
are also no longer active.
Other approaches to reused address identification use private
data and cannot be replicated. Richter et al. [61] and Casado et
al. [15] observed IP addresses using NAT or dynamic addressing by
monitoring server connection log of a CDN. Xie et al. [78] analyzed
Hotmail user-login trace to determine dynamic addresses. Metwally
et al. [51], use Google’s application logs to detect NATed addresses
and reduce false positives in detecting abuse traffic.
Cai et al. [13] present an ongoing survey by sending ICMP ECHO
messages to 1% of the IPv4 address space. Based on the responses,
they define metrics on availability, volatility, and median up-time to
determine address blocks that are potentially dynamically allocated.
This work produces a public dataset, which we compare against our
approach in Section 5. However, this work has several limitations.
An ICMP reply from an IP address need not uniquely identify the
host using the IP address since firewalls and middleboxes can reply
on behalf of hosts. Further, some networks filter outgoing ICMP
traffic, potentially leading to undercounting. Finally, this work in-
troduces an ad-hoc estimate of dynamically allocated prefixes based
on the address uptime, and we cannot establish its accuracy.
Foremski et al. [34] define Entropy/IP that discovers IPv6 address
structures using clustering and statistical techniques on a subset of
1https://steel.isi.edu/members/sivaram/blocklisting_impact/
361
IPv6 addresses that are known to be active. Using this system, one
could identify IPv6 addresses that share similar characteristics (such
as a network’s address allocation strategy). Although we could use
their technique to drive our measurement study to identify reused
addresses, our current work focuses only on IPv4 blocklists.
BitTorrent network has been used to identify carrier-grade NATs
(CGNs) in autonomous systems [49, 62]. These techniques leverage
the fact that CGN public-facing IP addresses are likely to appear
more frequently in a time window than non-CGN addresses. How-
ever, identifying ASes that use CGN is not useful for our research,
since blocklists list IP addresses and CGN’s may not be deployed
across the entire AS. Thus making it hard to identify IP addresses
that are using CGN.
3 TECHNIQUES
We propose two novel techniques to identify reused IP addresses.
We use a BitTorrent-based crawler to identify NATed addresses
and to estimate a lower bound on the number of users behind a
NATed address. To identify dynamically addressed /24 prefixes,
we extend Padmanabhan et al. [58]’s idea of using the RIPE Atlas
measurement logs. Our priorities in designing these approaches
were: (1) IP address granularity, (2) high accuracy of a positive
detection, and (3) reasonable coverage. In other words, we accept
some loss in coverage to achieve the first two goals: accuracy and
fine granularity of detection. Our findings are therefore a lower
bound on reused addresses.
3.1 Identifying NATed Addresses
We crawl the BitTorrent network to identify NATed addresses
among BitTorrent users. BitTorrent is a popular peer-to-peer net-
work for content exchange. A new BitTorrent user learns about
other users as it joins the network. Every user generates its own
unique 160-bit node_id that is obtained by hashing the (possibly pri-
vate) IP address of the user and a random number. A new user learns
IP addresses and port numbers of eight other users through the
BitTorrent protocol – these users become the neighbors of the new
user. The protocol supports two messages – bt_ping to periodically
ping active neighbors and get_nodes to get a list of neighbors of
any given node. We built a crawler that uses bt_ping and get_nodes
messages to crawl the BitTorrent network and identify BitTorrent
users using the same IP address at the same time, indicating such
users are likely behind a NAT.
Initially, the crawler sends a get_nodes message to the BitTorrent
bootstrap node, which returns a set of its neighbors. The crawler
maintains a list of discovered BitTorrent users, and issues further
get_nodes messages to the users on the list. The messages are issued
in the order of discovery time. Replies to the get_nodes messages
include the IP address, port number, node_id and the BitTorrent
version of the node. If the crawler finds a new user with an al-
ready discovered IP address, but with a different port number, it
tries to establish the reason behind this occurrence: (1) multiple
BitTorrent users are using the same IP address (NATed address),
or (2) the BitTorrent user has changed the port number and the
crawler encountered stale information. We do not use node_id to
determine multiple BitTorrent nodes using the same IP address,
because the BitTorrent user can regenerate a new node_id every
time their machine reboots.
Quantifying the Impact of Blocklisting in the Age of Address Reuse
IMC ’20, October 27–29, 2020, Virtual Event, USA
(a)
(b)
(c)
(d)
Figure 1: BitTorrent crawler to detect NATed reused addresses. In (a), the crawler identifies BitTorrent users with same IP
address and multiple port numbers. In (b) and (c), the crawler sends bt_ping to 𝐼𝑃1 and 𝐼𝑃2 and receives replies. In (d), the
crawler determines 𝐼𝑃1 is a NATed reused address.
To determine if more than one active BitTorrent users share the
same IP address at the same time, the crawler issues bt_ping’s to all
discovered ports behind a given IP address, and waits for responses.
If the crawler gets more than two responses with two different
node_id’s and two different port numbers, we conclude that the
IP address is shared by multiple BitTorrent users. Our technique
provides an underestimation of NATed addresses and users, but
with a high precision.
Figure 1 shows an example of how our BitTorrent crawler finds
NATed addresses. The crawler encounters two users (𝐼𝑃1 and 𝐼𝑃2)
having the same IP address, but with two different ports in Fig-
ure 1(a) (with ports 2215, 12281 with 𝐼𝑃1 and ports 155, 1821 with
𝐼𝑃2). To verify if multiple active BitTorrent users are using the same
IP address, the crawler issues four bt_ping messages in Figure 1(b),
one for each port across two IP addresses and waits for responses.
The crawler receives two replies from 𝐼𝑃2 and one reply from 𝐼𝑃1
(in Figure 1(c)), therefore determining that 𝐼𝑃2 is shared by multiple
BitTorrent users and 𝐼𝑃1 is not (in Figure 1(d)).
BitTorrent bt_ping messages are sent over UDP, which means
that they could be lost in transit. To compensate for this, the crawler
sends bt_ping messages every hour for all the IP addresses that
have more than one discovered port. The crawler logs all the mes-
sages (bt_ping or get_nodes) sent and all the messages received with
the timestamps, which are then processed to determine NATed ad-
dresses. Once the crawler sends out a message (get_nodes or bt_ping)
to all discovered ports associated with an IP address, the crawler
does not contact that same IP address for the next 20 minutes. Ini-