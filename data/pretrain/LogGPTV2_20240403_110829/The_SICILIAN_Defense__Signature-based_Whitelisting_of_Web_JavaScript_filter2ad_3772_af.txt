3
3
2
1
var chat_listmenu
var lastcache
var oc_current_user
var static_token
var yii
var region_id
var theme_token
var s
Rest of seven applications (Table 1) exhibit no user-related changes.
Table 2: Changes in scripts due to multiple users. SRI handles none of
these changes and SICILIAN can handle all of them with the corresponding
policy mentioned in the last column. # P represents the pages crawled, # C
represents the pages where inline scripts change, # D represents the number
of data that change.
1553Per-user Changes. Beside time-related changes, we analyze 15
PHP applications (listed in Table 1) to determine changes related
to multiple users. Such standalone web applications enable us to
create multiple user accounts with different privilege levels which
are difﬁcult in popular live websites. Note that we do not apply any
patches on the installed PHP applications thus excluding the C3
category from our observation set. We crawl for 100 web pages on
each application and summarize our observations in Table 2. Seven
out of the 15 applications exhibited no change in external, inter-
nal and inline scripts and hence can be retroﬁtted to raw signatures
as stated in Section 5.1. In the rest eight applications, only inline
scripts were observed to change. These applications maintain user-
speciﬁc information like var oc_current_user mentioned in
Table 2. All the crawled web pages changed in three of the applica-
tions (eg. Elgg, Owncloud and PrestaShop) but only in small num-
ber of data (see column "#D"). The changes observed across users
fall in the C1 and C2 category. These can be handled by structural
signatures by specifying the dynamic-data policy for variables
mentioned in column SICILIAN’s policy. Thus, we infer that such
standalone applications remain mostly static across different users
and structural signatures can be used to whitelist them.
Performance. To measure performance, we sample one page for
every domain in the Alexa’s top 500 websites and compare the
page load time between vanilla browser, SRI-enabled browser (im-
plements raw signature), and SICILIAN-enabled browser — aver-
aged over ﬁve attempts. We outline the performance overhead of
ﬁve websites and the overall 500 websites in Table 3. As listed
in the table, our structural signature mechanism gives an average
performance overhead of 7.02% for pages in 500 domains. Such
overhead is acceptable for all but the most latency-sensitive web-
sites. Our multi-layered approach guarantees structural signatures
are only applied on changing scripts. The remaining (7.02% -
2.34%) = 4.68% overhead is due to procedures required to com-
pute structural signatures like building the AST and computing
hashes while walking the tree. However, the overhead for comput-
ing structural signatures is overshadowed by the time for loading
non-script resources such as videos. Therefore, structural signature
tends to give high overhead on sites that contain only texts, such as
wikipedia.org (20.94%) and wordpress.com (9.5%). De-
spite such overhead, the total page load time for these sites is small
(below 3s) and hence not impacting user experience signiﬁcantly.
Domain
Vanilla
Raw-Sign
LD
8.7
blogspot.sg
2.168
wikipedia.org
24.75
mashable.com
4.65
google.cn
2.86
twitter.com
Average Overhead of Alexa’s 500 Sites
LD
8.25
2.158
23.74
4.55
2.79
OVD(%)
5.35
0.46
4.26
2.19
2.57
2.34%
Struct-Sign
OVD(%)
LD
8.708
2.61
25.14
4.86
3.03
5.44
20.94
5.89
6.94
8.51
7.02%
Table 3: Performance evaluation of structural signature on Alexa’s Top 500
sites. LD represents load time of the page, measured in seconds whereas
OVD represents overhead percentage (%), as compared to the load time in
vanilla browser.
Policy Development Effort. A ﬁne-grained policy for a script can
be derived with modest development effort. For our dataset, it took
us less than 5 minutes of manual effort per script to compile a ﬁne-
grained policy. The average policy size is 83 bytes for static scripts
and 263 bytes for changing scripts. Since there are 30,989 static
scripts and 2,105 changing scripts, we expect the entire whitelist
database size to be around 2.9 MB for the 33,302 scripts we have
crawled. The most time-consuming steps were code beautiﬁcation
and the use of a text differencing tool to ﬁnd out the dynamic parts
of the code. The developer may need to compare several versions
of the script to derive a ﬁne-grained policy, however in our experi-
ence three script versions proved to be sufﬁcient. This manual task
of determining the policy and which variables change can be auto-
mated by comparing the AST of the different script versions. In our
semi-automatic analysis of the crawled data set, we determined the
types of changes in all the scripts along with the variables whose
values change therefore building the policy for all 33,302 scripts.
5.3 Examples of Script Changes
Scripts in C1
In this section, we give examples and comprehensive breakdown
of scripts in C1 and C2 category of changes. These changes were
observed in our 3-month crawling period.
5.3.1
We ﬁrst categorize changing scripts that preserve the code se-
mantics as C1 which can be handled by using structural signatures.
Table 4 gives details about the number of scripts falling in C1.
Scripts in C1 can be further classiﬁed into four sub-categories (see
Table 4), with changes in code comments section as the majority.
We point out that few scripts in C1 exhibit more than one type of
change and hence belong to more than one sub-categories.
Changes
Comments
Permutations of Object
Variable Renaming
Others
# ES
274
51
8
7
# IS
192
10
1
85
Total
466
61
9
92
UF
0.401
0.749
0.22
0.269
# AD
94
92
5
30
Table 4: Changes in scripts belonging to C1. #ES and #IS represent the
number of external and internal scripts respectively, Total denotes the total
number of scripts (sum of external and internal), UF represents the update
frequency and #AD the number of affected domains.
Code Comments. In our experiments, out of the 586 scripts falling
in C1, 466 scripts had changes in the comments section of the code.
These form the majority of the script changes observed in C1. As
shown in Table 4, these 466 scripts are included in 94 domains
and have a UF value of 0.401 on the average, which indicates that
scripts with changes in comments tend to be updated frequently.
We present an example where the comments section of a script
changes periodically in Listing 7.
1 /* requested Sat, 14 Feb 2015 8:10:57 GMT */
2 /* generated February 14, 2015 12:10:58 AM PST*/
3
4 (function(){ geolocation = {};
5
...}();
Listing 7: An example of script where the comments contain time related
information which changes on every visit.
1 // First version of the script, requested at 2 April
2 "wgAvailableSkins":{"cologneblue":"CologneBlue",
3 "myskin":"MySkin","simple":"Simple","modern":"Modern",
4 "nostalgia":"Nostalgia","monobook":"MonoBook",
5 "standard":"Standard","chick":"Chick"}
6
7 // Second version of the script, requested at 3 April
8 "wgAvailableSkins":{"cologneblue":"CologneBlue",
9 "monobook":"MonoBook","myskin":"MySkin",
10 "simple":"Simple","chick":"Chick","modern":"Modern",
11 "nostalgia":"Nostalgia","standard":"Standard"}
Listing 8: An example of permutation of properties during object
initialization. The underlined strings are properties which get permuted.
Permutation of properties in JavaScript Objects. A JavaScript
Object is a collection of properties of the form key:value.
In
1554# ES
64
# IS
Unused Data
12
Side-effects of Changing JS Literals
36
1) Data-JS
242
2) Data-URL
229
3) Data-HTML
8
4) Data-Cookie
Multi-Version Scripts
17
36
423
113
50
51
UF
0.632
0.533
0.722
0.76
0.563
0.303
# AD
43
47
203
65
21
62
Table 5: Changes in dynamically-generated scripts which affect execution
of the scripts (type C2).(#ES,#IS) represents the number of external and
internal scripts, UF represents the update frequency and # AD the number
of affected domains.
our experiments, a total of 53 scripts were found to differ in the
ordering of object properties during initialization. This was espe-
cially observed in scripts like www.google.com/jsapi where
a loader function takes in an object as an argument that is a collec-
tion of modules to be loaded. An example of a script with different
ordering of properties is shown in Listing 8 hosted at weibo.com.
We encounter different ordering of several properties owned by an
object wgAvailableSkins.
Other Syntactical Changes. In addition to previously mentioned
categories, we ﬁnd a few other interesting changes. In our study,
we have versions of a script hosted at bol.com.br where all the
double-quote characters (") around a string were replaced by sin-
gle quotes (’). JavaScript offers the ﬂexibility of optional semi-
colons (;) at the end of each statement and optional brace brackets
around single line conditional statements. We ﬁnd 1 script where
two different versions differ in semi-colons and braces for single if
statements and 2 scripts where equality operators (==,!=) were re-
placed by their strict versions (===,!==) for comparing strings and
boolean. All such changes bring no semantic change to the code.
The number of scripts falling prey to such syntactical changes are
handful, however, we aim to show that such cases are prevalent.
5.3.2 Scripts in C2
Next, we discuss types of changes in scripts belonging to C2,
which is summarized in Table 5.
Side-effects of Changing JavaScript Literals. Since changes in
C2 are data-only, we observe the side-effects of such data in the
script’s execution, i.e., in what form do such data eventually get
used in the scripts (sink). We classify the sinks into: HTML
(Data-HTML), part of resource URL (Data-URL), stored in a
DOM cookie object (Data-Cookie), or used as part of the script’s
logic (Data-JS). Table 5 shows the summary of these side-effects.
In our study, we observe 342 scripts where dynamic data ﬁnds
sink in functions like document.write as shown in Listing 9. The
periodically-changing JavaScript data also ﬂows into sensitive Java-
Script objects like URL and Cookies. As seen in Table 5, 203
websites include scripts with changing data going into the URL
whereas 21 websites include scripts where changing data affect
cookies. The scripts in Data-URL are a majority (665 scripts)
while scripts in Data-HTML have the highest UF of 0.76 followed
by Data-URL at 0.722. All the categories under side-effects have
high UF (≥ 0.5) which characterizes their highly dynamic behavior.
1 document.write(’\n’)
Listing 9: Sample usage of periodically-changing JavaScript data used
to construct HTML content.
Unused Variables. We observe a number of unused variables of
the scripts which have periodically-changing values. To decide
whether such changing variables are unused, we apply a semi auto-
matic analysis by removing them from the code and check whether
such removal affects the script execution. Such changes in data
happen in 76 scripts, which were embedded in a total of 43 sites.
Multi-Version Scripts. We ﬁnd cases where the server returns
completely different versions of the script across visits. At ﬁrst,