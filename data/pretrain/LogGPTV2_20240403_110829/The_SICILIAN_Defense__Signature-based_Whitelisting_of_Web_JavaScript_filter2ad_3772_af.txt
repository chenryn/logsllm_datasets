### Analysis of User-Related Changes in Web Applications

#### Overview
In our study, we analyzed 15 PHP applications (see Table 1) to determine changes related to multiple users. These standalone web applications allow us to create multiple user accounts with different privilege levels, which is difficult to achieve on popular live websites. We did not apply any patches to the installed PHP applications, thus excluding the C3 category from our observation set.

#### Data Collection and Observations
We crawled 100 web pages for each application and summarized our findings in Table 2. Seven out of the 15 applications exhibited no user-related changes in external, internal, or inline scripts. These applications can be retrofitted with raw signatures as discussed in Section 5.1. In the remaining eight applications, only inline scripts were observed to change, often maintaining user-specific information such as `var oc_current_user` (Table 2).

For three applications (e.g., Elgg, Owncloud, and PrestaShop), all crawled web pages showed changes, but only in a small number of data points (column "#D" in Table 2). The changes across users fall into the C1 and C2 categories, which can be handled by structural signatures by specifying dynamic-data policies for the variables mentioned in the SICILIAN policy column. This suggests that standalone applications remain mostly static across different users, and structural signatures can be effectively used to whitelist them.

#### Performance Evaluation
To measure performance, we sampled one page from each domain in Alexa's top 500 websites and compared the page load times between a vanilla browser, an SRI-enabled browser (implementing raw signatures), and a SICILIAN-enabled browser. We averaged the results over five attempts and outlined the performance overhead in Table 3.

Our structural signature mechanism introduces an average performance overhead of 7.02% for pages in 500 domains. This overhead is generally acceptable for most websites, though it can be higher for sites with primarily text content, such as Wikipedia (20.94%) and WordPress (9.5%). Despite this, the total page load time for these sites remains below 3 seconds, ensuring minimal impact on user experience.

| Domain          | Vanilla (s) | Raw-Sign (s) | LD (s) | OVD (%) | Struct-Sign (s) | OVD (%) |
|-----------------|-------------|--------------|--------|---------|-----------------|---------|
| blogspot.sg     | 2.168       | 2.158        | 2.61   | 0.46    | 2.61            | 5.89    |
| wikipedia.org   | 24.75       | 23.74        | 25.14  | 4.26    | 25.14           | 20.94   |
| mashable.com    | 4.65        | 4.55         | 4.86   | 2.19    | 4.86            | 6.94    |
| google.cn       | 2.86        | 2.79         | 3.03   | 2.57    | 3.03            | 8.51    |
| twitter.com     | 8.7         | 8.25         | 8.708  | 5.35    | 8.708           | 5.44    |

**Table 3: Performance evaluation of structural signatures on Alexaâ€™s Top 500 sites.**

- **LD**: Load time of the page in seconds.
- **OVD**: Overhead percentage compared to the load time in a vanilla browser.

The overhead for computing structural signatures (4.68%) is mainly due to procedures like building the AST and computing hashes while walking the tree. However, this overhead is overshadowed by the time required to load non-script resources such as videos.

#### Policy Development Effort
Developing a fine-grained policy for a script requires modest effort. For our dataset, it took less than 5 minutes per script to compile a fine-grained policy. The average policy size is 83 bytes for static scripts and 263 bytes for changing scripts. For the 33,302 scripts we crawled, the entire whitelist database size is expected to be around 2.9 MB.

The most time-consuming steps were code beautification and using a text differencing tool to identify dynamic parts of the code. Typically, comparing three versions of the script was sufficient. This manual task can be automated by comparing the AST of different script versions.

#### Examples of Script Changes

##### Scripts in C1
Scripts in C1 preserve the code semantics and can be handled by structural signatures. Table 4 provides details about the number of scripts falling into C1, which can be further classified into four sub-categories, with changes in code comments being the majority.

| Changes                | # ES | # IS | Total | UF      | # AD |
|------------------------|------|------|-------|---------|------|
| Comments               | 274  | 192  | 466   | 0.401   | 94   |
| Permutations of Object | 51   | 10   | 61    | 0.749   | 92   |
| Variable Renaming      | 8    | 1    | 9     | 0.22    | 5    |
| Others                 | 7    | 85   | 92    | 0.269   | 30   |

**Table 4: Changes in scripts belonging to C1.**

- **#ES, #IS**: Number of external and internal scripts, respectively.
- **Total**: Sum of external and internal scripts.
- **UF**: Update frequency.
- **#AD**: Number of affected domains.

**Code Comments Example:**
```javascript
/* requested Sat, 14 Feb 2015 8:10:57 GMT */
/* generated February 14, 2015 12:10:58 AM PST*/

(function(){ geolocation = {}; ...}();
```
**Listing 7: An example of a script where the comments contain time-related information that changes on every visit.**

**Permutation of Properties Example:**
```javascript
// First version of the script, requested at 2 April
"wgAvailableSkins":{"cologneblue":"CologneBlue", "myskin":"MySkin", "simple":"Simple", "modern":"Modern", "nostalgia":"Nostalgia", "monobook":"MonoBook", "standard":"Standard", "chick":"Chick"}

// Second version of the script, requested at 3 April
"wgAvailableSkins":{"cologneblue":"CologneBlue", "monobook":"MonoBook", "myskin":"MySkin", "simple":"Simple", "chick":"Chick", "modern":"Modern", "nostalgia":"Nostalgia", "standard":"Standard"}
```
**Listing 8: An example of permutation of properties during object initialization.**

##### Scripts in C2
Scripts in C2 are dynamically generated and affect the execution of the scripts. Table 5 summarizes the types of changes in C2.

| Changes                | # ES | # IS | Total | UF      | # AD |
|------------------------|------|------|-------|---------|------|
| Unused Data            | 64   | 12   | 76    | 0.632   | 43   |
| Side-effects of JS Literals | 242 | 36   | 278   | 0.533   | 47   |
| Data-URL               | 229  | 0    | 229   | 0.722   | 203  |
| Data-HTML              | 8    | 0    | 8     | 0.76    | 65   |
| Data-Cookie            | 17   | 0    | 17    | 0.563   | 21   |
| Multi-Version Scripts  | 50   | 1    | 51    | 0.303   | 62   |

**Table 5: Changes in dynamically-generated scripts affecting script execution (type C2).**

- **#ES, #IS**: Number of external and internal scripts, respectively.
- **Total**: Sum of external and internal scripts.
- **UF**: Update frequency.
- **#AD**: Number of affected domains.

**Side-effects of Changing JavaScript Literals:**
```javascript
document.write('\n')
```
**Listing 9: Sample usage of periodically-changing JavaScript data to construct HTML content.**

**Unused Variables:**
We identified 76 scripts with periodically-changing values in unused variables. To determine if these variables are unused, we applied a semi-automatic analysis by removing them from the code and checking if the removal affects the script execution.

**Multi-Version Scripts:**
We found cases where the server returns completely different versions of the script across visits.