dential are actually the bridges that U received in OT. To
achieve this, we let D (before running OT) generate a pair of
one-time public/private keys (denoted by P K o
D ), give
D , SK o
D to sign each available bridge Bj, and
D to U, use SK o
P K o
}k
j to Bj. After OT, U gets {Bi∥σo
tag the signature σo
i=1,
and he needs to prove the possession of a valid signature σo
i
on Bi. Intuitively, U is no longer able to replace Bi with any
∗
i ) that is not one of the k received bridges,
other bridge (B
∗
because he does not have a signature on B
i . In addition,
we let U provide D a random nonce nonj for each available
bridge Bj; nonj is included in the computation of σo
j to pre-
vent D from later ﬁnding out which bridges are retrieved by
U using these signatures (refer to Appendix B for details).
i
To get the credential, U constructs the following proof:
5U needs to run k rounds of
m
1
is possible to invoke one round of
higher when k is much smaller than m (typically k = 3).
-OT to get k bridges. While it
-OT, but its complexity is
m
k
)
(
)
(
∧
(x, (cid:8), O(cid:8), ω, Oω,{Bi, τi, ϕi, σo
k
i=1) :
i=1 ((Ci, Oi) = CMT(Bi, τi, ϕi, x)∧
i , Bi) = Accept∧
Verify(P K o
τi = Tcur ∧ ϕi = 0)∧
D , σo
i , Oi}k
(C(cid:8), O(cid:8)) = CMT((cid:8), x)∧
κx = OWF(x)∧
(cid:8) = 0∧
(Cω, Oω) = CMT(ω, x)∧
ω = Tcur
i=1
∥π1 to D.
and sends κx∥C(cid:8)∥Cω∥{Ci}k
After verifying the validity of π1 and the freshness of κx,
D signs C(cid:8), Cω, and Ci (1 ≤ i ≤ k), respectively, and sends
the signatures σ(cid:8)∥σω∥{σi}k
i=1 to U. Finally, D adds κx to
the list of indicators of used secret keys (denoted by elistx)
to prevent other users from re-using it.
Note that in the privacy-preserving scheme, it is infeasi-
ble for D to count the number of users who ever connected
to each bridge; instead, we let each bridge notify D once the
number of users that ever connect to it exceeds the thresh-
old g, and then D will exclude the bridge from the list when
running OT. (The bridge could let each new user register
himself upon the ﬁrst connection, e.g., by setting up a pass-
word [4], in order to count the ever connected users.)
5.3.3 Updating Credit Balance
U can update his credit balance (cid:8) with recently earned cred-
its from time to time. Suppose the credits are from Bu. The
new credit balance is calculated as ~(cid:8) = (cid:8)+ ~ϕu−ϕu, where
~ϕu = Credit(Tcur − τu). U needs to show that Bu is not
blocked. To do so, we let D compute bj = OWF( (cid:22)Bj) for
each of the blocked bridges { (cid:22)Bj} (cid:22)m
j=1 (where (cid:22)m is the total
number of blocked bridges) and publish {bj} (cid:22)m
j=1; U needs
to prove that OWF(Bu) is not equal to any of {bj} (cid:22)m
j=1.
D must record expired credentials to prevent re-use of old
credentials (e.g., those with more credits). For this, we let
U provide an indicator of (cid:8) to show that (cid:8) is up-to-date.
Note that we cannot use κ(cid:8) = OWF(σ(cid:8)) as the indicator,
since D could try all of the signatures he has generated to
ﬁnd a match between κ(cid:8) and σ(cid:8) to link U’s transactions.
To address this, we craft a special indicator function κ(cid:8) =
Indic(σ(cid:8)) based on the feature of k-TAA blind signature [8]
(Essentially, this indicator function ﬁrst converts σ(cid:8) into
′
(cid:8) using a random factor and then applies an
another form σ
′
(cid:8) to get κ(cid:8). See Appendix B for more
one-way function to σ
details.)
In particular, U constructs the following proof:
5.3.4 Getting a New Bridge
5.3.5
Inviting New Users
π2 = NIPK
(x, (cid:8), C(cid:8), O(cid:8), σ(cid:8), Bu, τu, ϕu, Cu, Ou, σu,
~ϕu, ~Ou, ~(cid:8), ~O(cid:8)) :
(cid:22)m
∧
j=1 (bj ̸= OWF(Bu))∧
(Cu, Ou) = CMT(Bu, τu, ϕu, x)∧
Verify(P KD, σu, Cu) = Accept∧
(C(cid:8), O(cid:8)) = CMT((cid:8), x)∧
Verify(P KD, σ(cid:8), C(cid:8)) = Accept∧
κ(cid:8) = Indic(σ(cid:8))∧
~ϕu = Credit(Tcur − τu)∧
~(cid:8) = (cid:8) + ~ϕu − ϕu∧
( ~Cu, ~Ou) = CMT(Bu, τu, ~ϕu, x)∧
( ~C(cid:8), ~O(cid:8)) = CMT( ~(cid:8), x)∧
U builds a Tor circuit (using one of his bridges as the entry
relay) to send κ(cid:8)∥ ~C(cid:8)∥ ~Cu∥π2 to D.
D veriﬁes π2 and checks that κ(cid:8) is not on the list
of seen indicators (denoted by elist(cid:8)); then, D signs ~C(cid:8)
and ~Cu, sends the signatures ~σ(cid:8) and ~σu to U, and adds
κ(cid:8) to elist(cid:8).
Finally, U updates his credential with
~(cid:8), ~C(cid:8), ~O(cid:8), ~σ(cid:8), ~ϕu, ~Cu, ~Ou, and ~σu.
To get a new bridge, U ﬁrst needs to prove that one of his
bridges (say Bb) on his credential has been blocked and
−. Since a user usu-
his credit balance is higher than ϕ
ally requests a new bridge right after one of his bridges got
blocked which allows D to ﬁgure out what Bb is by check-
ing which bridge was recently blocked, we do not intend to
hide Bb from U. We note that revealing Bb will not degrade
the anonymity, as long as D is unable to link the transaction
of replacing Bb with other transactions of U.
U ﬁrst sends Bb to D through a Tor circuit. After verifying
Bb is blocked, D replies with βb (i.e., the time when Bb got
blocked). The new credit balance of U is ~(cid:8) = (cid:8) + ( ~ϕb −
−, where ~ϕb = Credit(βb − τb), by considering
ϕb) − ϕ
the credits earned from Bb and the cost for getting a new
bridge. U constructs the following proof:
(x, (cid:8), C(cid:8), O(cid:8), σ(cid:8), τb, ϕb, Cb, Ob, σb,
~ϕb, ~(cid:8), ~O(cid:8)) :
(Cb, Ob) = CMT(Bb, τb, ϕb, x)∧
Verify(P KD, σb, Cb) = Accept∧
κb = Indic(σb)∧
(C(cid:8), O(cid:8)) = CMT((cid:8), x)∧
Verify(P KD, σ(cid:8), C(cid:8)) = Accept∧
κ(cid:8) = Indic(σ(cid:8))∧
~ϕb = Credit(βb − τb)∧
~(cid:8) = (cid:8) + ~ϕb − ϕb − ϕ
~(cid:8) > 0∧
( ~C(cid:8), ~O(cid:8)) = CMT( ~(cid:8), x)
−∧
π3 = NIPK
and sends κ(cid:8)∥κb∥ ~C(cid:8)∥π3 to D. Note that we use κb to make
sure each blocked bridge can be used only once to request a
new bridge.
)
(
After verifying κ(cid:8) /∈ elist(cid:8), κb /∈ elistBb, and π3
(where elistBb denotes the list of used indicators of Bb), D
adds κ(cid:8) to elist(cid:8) and κb to elistBb. Similar to the registra-
-OT with D to obtain a new bridge ~Bb with
tion, U runs
b . Then, U sets ~τb = Tcur and ~ϕb = 0,
a tagged signature ~σo
computes ( ~Cb, ~Ob) = CMT( ~Bb, ~τb, ~ϕb, x), constructs the
following proof:
m
1
π4 = NIPK
(x, ~(cid:8), ~O(cid:8), ~Bb, ~τb, ~ϕb, ~σo
b , ~Ob) :
( ~C(cid:8), ~O(cid:8)) = CMT( ~(cid:8), x)∧
~τb = Tcur ∧ ~ϕb = 0∧
( ~Cb, ~Ob) = CMT( ~Bb, ~τb, ~ϕb, x)∧
b , ~Bb) = Accept
Verify(P K o
D , ~σo
and sends ~Cb∥π4 to D.
D veriﬁes π4,
signs ~C(cid:8) and ~Cb, and sends ~σ(cid:8)
Finally, U updates his credential with
and ~σb to U.
~(cid:8), ~C(cid:8), ~O(cid:8), ~σ(cid:8), ~Bb, ~τb, ~ϕb, ~Cb, ~Ob, and ~σb.
U can request D for an invitation ticket as long as his credit
balance is higher than (cid:8)θ. D grants the request with certain
probability. Recall that ω in the credential represents the
latest time when U requested an invitation ticket. To prevent
a corrupt user from repeatedly requesting invitation tickets
to increase his chance of getting one, we let each requesting
user prove that his last time requesting a ticket is at least ωθ
days ago, i.e., Tcur − ω > ωθ. In particular, to request a
ticket, U constructs the proof:
π5 = NIPK
(x, (cid:8), C(cid:8), O(cid:8), σ(cid:8), ω, Cω, Oω, σω, ~ω,
~Oω, ~O(cid:8)) :
(C(cid:8), O(cid:8)) = CMT((cid:8), x)∧
Verify(P KD, σ(cid:8), C(cid:8)) = Accept∧
κ(cid:8) = Indic(σ(cid:8))∧
(Cω, Oω) = CMT(ω, x)∧
Verify(P KD, σω, Cω) = Accept∧
κω = Indic(σω)∧
(cid:8) > (cid:8)θ∧
Tcur − ω > ωθ∧
~ω = Tcur∧
( ~Cω, ~Oω) = CMT(~ω, x)∧
( ~C(cid:8), ~O(cid:8)) = CMT((cid:8), x)
and sends κ(cid:8)∥κω∥ ~C(cid:8)∥ ~Cω∥π5 to D through a Tor circuit.
After verifying κ(cid:8) /∈ elist(cid:8), κω /∈ elistω and π5, D
signs ~C(cid:8) and ~Cω, sends ~σ(cid:8) and ~σω to U, and adds κ(cid:8) to
elist(cid:8) and κω to elistω. Then, D ﬂips a coin to decide
whether to grant the request: if yes, D generates a ticket for
U; otherwise, U needs to wait at least ωθ days to try again.
Table 1: Performance (averaged over 100 runs)
6 Security Analysis
Operation
Registration
Updating credit balance
Getting a new bridge
Inviting new users
Comp. (s)
U
D
5.15
0.51
5.35
0.27
17.44
0.47
17.62
0.16
Comm. (KB)
388.1
34.7
340.1
2.0
5.4 Performance Evaluation
We implemented rBridge using Paring-Based Crytogra-
phy (PBC) Library6 and GNU Multiple Precision library7
in C++, and used OpenSSL for hash related routines. The
credential system, built upon k-TAA signature, was imple-
mented with Type-A curves, which is deﬁned in the PBC
Library in the form of E : y2 = x3 + x over the ﬁeld Fq
for some prime q. Bilinear groups G1 and G2, both formed
by points over E(Fq), are of order p for some prime p, such
that p is a factor of q + 1. Using the default setting, p and
q are 160-bit and 512-bit in length respectively. We imple-
-OT protocol in [17] using G1 as the under-
mented the
lying group. We consider there are 1000 available bridges
and 100 blocked bridges, and set the size of each bridge
descriptor the same as that of the current bridge descriptor
(208 bits including 32-bit IP, 16-bit port, and 160-bit ﬁnger-
print).
(
)
m
1
We measured the computational times for U and D on
a Dell Precision T3500 workstation with a quad-core 2.67
GHz Intel Xeon W3550 CPU and 12 GB RAM, running
Ubuntu 10.04. Table 1 shows that it takes only less than 0.5
seconds for U and D to update credit balance or process an
invitation ticket request. It takes longer to perform the ini-
tial registration or request a new bridge, which are about 5
seconds and 17 seconds for U and D, respectively. The ma-
jority of computational times are spent on the retrieval of
new bridges. We note that these operations are quite infre-
quent; each user only needs to register once, and according
to our simulation results, the averaged time interval to re-
quest new bridges is 133 days. Hence, we believe these
occasional computations can be handled by both U and D
with fairly strong computational power. We also measured
the communication costs. The operations of registration and
getting a new bridge incur 388 KB and 340 KB communi-
cation overheads respectively, and the data transmission for
any other operation is less than 35 KB. In comparison, with
2000 Tor relays, each Tor client needs to download a 120
KB “network status document” every 3 hours, and 1.25 MB
of relay “descriptors” spread over 18 hours [16].
6http://crypto.stanford.edu/pbc/
7http://gmplib.org/
In this section, we discuss the potential attacks that are
not covered by the evaluation (Section 4.3).
6.1 Curious Bridge Distributor in Privacy Preser(cid:173)
vation
One of the major security requirements in the privacy-
preserving scheme is to ensure different transactions of a
particular user are unlinkable. A typical way to link a user’s
transactions is based on the credential content. For example,
suppose in the x-th transaction U received a new bridge BX
and updated his credential with some signed information of
BX (e.g., BX, τX, and ϕX); later, when BX gets blocked
and U requests a new bridge to replace it in the y-th trans-
action, U needs to use the signed information to prove that,
e.g., BX was assigned to him and a certain amount of cred-
its should be earned from BX; however, such information
can be utilized by D to link the two transactions. (Similar
attacks are applicable in the cases when U updates his credit
balance or requests invitation tickets.) To ensure the unlink-
ability of transactions, rBridge uses commitments and zero-
knowledge proofs to conceal the content of the credential,
so that D only knows the validity of the credential but learns
nothing about the content of the credential.
Although BX is revealed to D in the y-th transaction (i.e.,
after BX gets blocked), D is unable to link BX to U due
to the use of a Tor circuit; more importantly, since BX is
perfectly hidden in any other transactions, D cannot use BX
to link any two transactions of U.
Similarly, D can learn U’s identity (i.e., his IP address, but
nothing else) in the registration, since at that moment U has
no bridge to build a Tor circuit to hide his IP address (if he
does not use any other circumvention tool or ask an existing
user to perform the registration on his behalf). Nevertheless,
D is unable to learn which bridges are retrieved because of
U in OT; moreover, since U’s IP address will be hidden in
all the later transactions of U, D cannot use U’s IP address to
link his transactions.
6.2 Users’ Misbehaviors in Privacy Preservation
In the privacy-preserving scheme, a corrupt user could
try to manipulate the information on his credential, e.g., in-
creasing the credit balance. rBridge uses zero-knowledge
proofs with the help of blind signatures to verify the cor-
rectness of the credential without revealing any information
in the credential.
In addition, since D does not know what bridge is re-
trieved by U in OT, U could try to replace the received bridge
with another one when updating his credential so that he can
block the assigned bridge instantly without worrying about
potential loss of credits. To address this, we let D employ
one-time signatures to make sure the bridge written in the
credential is indeed the bridge that the user received in OT.
Furthermore, malicious users could try to re-use old cre-
dentials that have more credits or use a blocked bridge to
request more than one new bridges. To prevent these, we
let D record all the used credentials as well as the claimed
blocked bridges, and ask U to provide indicators to prove
that the presented credential or the claimed blocked bridge