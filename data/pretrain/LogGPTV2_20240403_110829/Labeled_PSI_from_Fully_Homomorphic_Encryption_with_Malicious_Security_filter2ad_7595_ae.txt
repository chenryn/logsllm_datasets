To improve the clarity, coherence, and professionalism of the given text, I have restructured and refined the content. Here is the optimized version:

---

### Security Analysis

For the sender to compute an encryption of \( H(\text{OPRF}_k(y)) \) with non-negligible probability, they must know the plaintext value \( \text{OPRF}_k(y) \). Consequently, the sender is limited to choosing a set \( X' \) of polynomial size, which may be larger than \( N_x \), for use in the Private Set Intersection (PSI) protocol. The simulator can extract \( X' \) as all \( x \) such that the sender has queried \( H(\text{OPRF}_k(x)) \). It is important to note that the sender is not committed to its set \( X' \) and can use an arbitrary subset in each protocol invocation.

However, the sender can still make the intersection indirectly dependent on the set \( Y \setminus X \). Specifically, the sender can choose a circuit leakage function, and the ideal functionality is defined as:
\[ X \cap Y \cap \text{leakage}(Y) \]

This leakage function models the fact that the sender can perform some malicious computation with the receiver's encrypted hash table, allowing the sender to conditionally remove items from the intersection based on items in \( Y \setminus X \). For a full security proof, see Appendix A.

While such an attack can be serious in some settings, this leakage is significantly less severe than in [12], where the sender can force the intersection to be \( Y \).

### Reusing the Pre-Processing Phase

Next, we consider the scenario where the sender reuses the pre-processing phase with multiple receivers. In this setting, the hashing parameters must be fixed and reused. Specifically, the cuckoo hash function and the hash function \( H \) used to hash to \( \sigma \)-bit strings are chosen by the sender. This deviates from Steps 1 and 2 in Figure 2, where the parties jointly sample random hash functions. This deviation implies that the sender can select hash functions that conditionally fail based on the receiver's set \( Y \). For example, if \( y, y' \in Y \) both hash to the same cuckoo position \( i \) under all three hash functions, cuckoo hashing will fail. Such failures would be observable by the sender, leaking information about the receiver's set being a member of all sets that fail to cuckoo hash under these parameters—a single bit of information.

While such attacks can be serious, many applications can tolerate leaking a single bit. One countermeasure is to sample the hash functions from a public reference string, which can significantly restrict the effectiveness of selective failure attacks by fixing the hash functions.

### Experiments

We implemented our protocols (unbalanced PSI for arbitrary length items and Labeled PSI) and benchmarked them against previous methods. For unbalanced PSI with both long and short items, our points of comparison are [47,5] and [12], respectively. For labeled PSI, we compare with multi-PIR by keyword from the multi-query SealPIR solution of [2].

Our implementation is built from scratch on top of the homomorphic encryption library SEAL v2.3.0-4, which is based on the BFV scheme [22]. We provide a detailed report of the end-to-end and online running times along with the communication overhead of our protocol in Figure 4, both in single and multi-threaded settings. We restrict the receiver to at most 4 threads to model a low-power device, while the sender utilizes up to 32 threads as denoted in the table. Figure 5 shows a comparison with the unbalanced PSI protocols of [47,5,12].

We benchmark the protocols on a 32-core Intel Xeon CPU with 256 GB of RAM. This machine is similar to that used by [12], and the numbers reported for their protocol are obtained directly from their paper. All protocols are run in a LAN setting with a 10 Gbps throughput and sub-millisecond latency.

#### Improved Communication from Symmetric-Key BFV

We further reduce our communication cost by modifying SEAL to use a symmetric-key variant of the BFV scheme instead of the more common public-key variant. The benefit is that the second polynomial in a freshly encrypted BFV ciphertext does not depend on a public key and can be generated from a random seed. This nearly halves the size of every freshly encrypted ciphertext, significantly reducing the R → S communication. After homomorphic multiplications, it is not possible to return to the half-size representation, so this technique does not improve the R ← S communication. By employing various trade-offs in the protocol to shift more communication to the R → S step, we achieve a significant (20-40%) improvement in total communication with negligible computational overhead.

#### Unbalanced PSI

Figure 4 contains our main performance numbers, demonstrating flexibility in set sizes. For the sender, we consider set sizes of \( 2^{20} \), \( 2^{24} \), and \( 2^{28} \), while the receiver's set sizes range between 128 and 4096. For each receiver's set size, approximately 1.33 times more items could be added with no difference in performance due to extra space in the cuckoo table. However, to provide a fair comparison with other protocols without parameter restrictions, we round down to the nearest power of two.

For the smallest set sizes of \( |X| = 2^{20} \) and \( |Y| = 128 \), our protocol is extremely efficient, requiring an online time of less than a second on a single thread and only 3.9 MB of communication. When the receiver's set is increased to 512 items, we observe only a minimal increase in running time and communication. For the largest receiver set size of 4096, we observe roughly a 4.7× increase in online running time and a 3× increase in communication. This sublinear growth in overhead with respect to the receiver's set size is attributed to the ability to use more efficient FHE parameters. For the sender's offline running time, in almost all cases with \( |X| = 2^{20} \), the running time is roughly 40 seconds on a single thread, with the exception of \( |Y| = 256 \), which has double the running time. This is attributed to the FHE parameters used, which allowed an efficient online time at the expense of increased computation during the offline phase.

Increasing the sender's set size to \( |X| = 2^{24} \), we observe a similar trend. For the smallest receiver set sizes, the same performance is achieved. For \( |Y| = 128, 256, 512 \), the same FHE parameters were utilized, yielding a single-thread online running time of 9.1 seconds and 8.2 MB of communication. The choice to use oversized parameters for smaller set sizes stems from the complex interplay between the parameters that can be optimized while maintaining a computational security level of 128 bits. For a receiver's set size of 4096, we observe an online running time of 22 seconds in the single-threaded setting and 15.9 MB of communication. The sender's offline time required 806 seconds on a single thread or 32 seconds on 32 threads. Interestingly, the offline running time decreases as the sender's set size increases, primarily because the sender's database has fewer items per bin as \( |Y| \) increases, reducing the degree of the polynomials the sender needs to compute in preprocessing, resulting in improved performance.

For \( |X| = 2^{28} \), which, to our knowledge, is the largest PSI set size considered in the two-party setting, we consider a receiver's set size of 1024. The online phase can be performed in just 12 seconds when the sender and receiver use 32 and 4 threads, respectively, with only 18.4 MB of communication. The primary impact of such a large set size is on the sender's offline running time. However, in cases where such a large set is used, it is likely that the set is held by a powerful server and is relatively static, allowing the sender to amortize the cost of preprocessing across several protocol executions. Our protocol also allows fast additions and deletions from the preprocessed set by updating only small targeted locations when necessary. The current implementation of the offline phase is far from optimal, as there exist more efficient algorithms for computing the coefficients of the sender's polynomials, which is the primary bottleneck.

#### Comparison

We now compare our protocol with the OPRF-based protocols of [47,5] and the FHE-based protocol of [12]. These protocols utilize the same Diffie-Hellman-based OPRF as our protocol, where the sender holds the key \( k \) and applies the OPRF to its set \( X \) to obtain \( X' = \{ F_k(x) : x \in X \} \). The receiver then interactively computes...

---

This version maintains the technical details while improving readability and structure.