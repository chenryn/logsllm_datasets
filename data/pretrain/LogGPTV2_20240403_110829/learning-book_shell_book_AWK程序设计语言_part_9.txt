print $1
i ++
{
）
当i到达NF+1时，循环停止，这也是循环结束时i的值.
for语句是while的更加一般的形式：
for(expression1;expression2expressions)
statements
49
右括号后面的换行符是可选的.for等效于
expression1
while(expression)(
statements
expression3
}
所以
{for (i = 1; i  n 7 m : n
变量m与n属于函数max,它们与程序中其他网名的变量没有任何关联.
54
用户定义的函数可以在任何模式一动作语句的任何表达式中使用，也可以在出现在任何函数体内，
每一个对函数的使用都叫做一个调用（call).如果一个用户定义的函数在函数体内调用了它自身，我们
就说这个函数是递咖（recursive）的.
举例来说，max函数可以像这样调用：
{print max(S1,max($2, $3)) } print maxinum of $1,$2,$3
function max(m, n) {
return m > n ? m : n
调用函数时，函数名与左括号之间不能留有空白。
一个带有参数S1的函数被调用时（$1只是一个普通的变量），函数接收到的参数是变量的值的一份
拷贝，所以函数操作的是变量的拷员，而不是变量本身，这意味着函数不会对函数体外部的变量的值产生
影响.（用行话来说，这样的变量叫做“标量”，“按值传递”给函数）然而，当数组作为函数的参数时，函数
接收到的参数就不是数组的拷员，所以函数可以改变数组的元素，或往数组增添新的值（这叫作“按引用
传递"）函数名不能当作参数使用
重申一遍，在函数体内部，参数是局部变量一它们只在函数执行时才存在，而且它们与程序中其他
同名的变量没有任何关联，但是，其他所有的变量都是全局的（all other uariables are global);如果函数
体内的某个变量没有出现在参数列表中，那么整个程序范围内都可以访问该变量。
---
## Page 57
第二章AWK语言
49
这意味看如果函数想要拥有私有的局部变量，唯一的方法是将该变量包含在参数列表的末尾，参数
列表中没有实际参数对应的参数都将作为局部变量使用，初始值为空值，虽然这种设计不是非常优雅，但
至少为语言提供了必要的能力，我们在参数与局部变量之网多放置几个空格，以区分它们
2.4输出
print与printf 语句可以用来产生输出.print用于产生简单的输出;printf用于产生格式化
的输出，来自print与printf 的输出可以被重定向到文件，管道与终端，这两个语句可以混合使用，
输出按照它们产生的顺序出现
55
输出语句
1. print
将$0打印到标准输出
2. print expression, expression, .
打印各个expression,expression 之网由OFS 分开，由 ORS 终止
3. print expression,expression,... > filename
输出至文件filename
4. print expression ,expression ,... >> filename
累加输出到文件filename，不覆盖之前的内容
5. print expression,expression,... |command
输出作为命令command标准输入
6. printf (format , expression ,expression , -.-)
7. printf (format , expression ,expression ,-.-) > filename
8. printf (format,expression ,expression , -.-) >> filename
9. printf (format,expression,expression,-.-)| command
printf 类似于print，但是第1个参数规定了输出的格式
10. close(filename), close( command)
断开print与filename（或command)之间的连接
11. system(command)
执行command；函数的返回值是command的退出状态
---
## Page 58
第二章AWK语言
50
printf 的参数列表不需要被包围在一对括号中.但是如果print或printf的参数列表中，
有一个表达式含有关系运算符，那么或者表达式，或者参数列表，必须用一对括号包围，在非
Unix系统上可能不提供管道与system
print语句
print语句具有形式：
pr int expression1 , expression2, ..., expression-n
print (expression, expression2 -, expression)
两种形式都会把表达式的字符串值打印出现，各个表达式的字符串值之网用输出字段分隔符分开，最后
跟着输出记录分隔符，语句
print
是
print $0
的缩写形式.为了打印空白行（即只含有换行符的行），可以这样写：
print ""
print 的第2种形式将参数列表包围在一对括号当中，正如
print($1 ":",$2)
56
两种形式的print都可以产生相同的输出，但是，正如我们将会看到的那样，当参数含有关系运算符时，
就必频使用括号.
输出分隔符
输出字段分割符与输出记录分隔符存储在内建变量OFS与ORS中.初始情况下，OFS与ORS分别
被设置成一个空格符与一个换行符，但它们的值可以在任何时候改变，举例来说，下面这个程序打印每一
行的第1与第2个字段，字段之间用分号分开，在每一行的第2个字段之后输出两个换行符，
BEGIN
(u\u\-=So:=Sao）
{print $1，$2}
作为对比，
{print $1 $2}
打印第1个与第2个字段，两个字段之间没有输出字段分隔符插入，这是因为S1S2表示两个字符串的
拼接
---
## Page 59
第二章AWK语言
51
表2.9:printf 格式控制字符
字符
表达式将被打印为
ASCII字符
d
十进制整数
e
[- ]d.ddddddE[+- ]dd
f
[-]ddd.dddddd
6
按照e或f进行转换，选择较短的那个，无意义的零会被抑制
无符号八进制数
字符串
无符号十六进制数
打印一个百分号，不会有参数被吸收
printf语句
printf 用于产生格式化的输出.它与C语言中的printf 函数很像，但是awk的 printf 不支
持格式说明符*.与print一样，它也有带括号与不带括号的两种形式：
printf format, expression expression2,-, expression.,
printf (format ,expression, expression -, expression, )
参数format总是必须的，它是一个变量，其字符串值含有字面文本与格式说明符，字面文本会按照文本
的字面值输出，格式说明符规定了参数列表中的表达式将被如何格式化地输出，表2.9列出了所有的格
式说明符.每一个格式说明符都以卷开始，以转换字符结束，可能含有下面三种修饰符：
57
表达式在它的域内左对齐
width