---
author: ''
category: 系统运维
comments_data:
- date: '2014-06-25 14:06:31'
  message: LVM是一个非常给力的工具啊~~
  postip: 113.204.117.138
  username: tenght
- date: '2016-02-13 01:46:08'
  message: 非常感谢楼主的分享, 一直使用古老的分区方式(额,因为我是做开发的咯...), LZ 的文章让我完全理解了使用 LVM 的基础知识. 感觉 LZ
    这篇文章是介绍 LVM 基础概念和命令使用最好的一篇文章了, 感谢!
  postip: 14.152.94.25
  username: 来自广东的 Firefox 41.0|Ubuntu 用户
- date: '2016-06-16 12:50:04'
  message: lvm1中vg的数量有限制，lvm2的话没有限制，是不是说lvm可以无限扩容啦？
  postip: 58.210.170.46
  username: 来自江苏苏州的 Chrome 49.0|Windows 7 用户
- date: '2017-05-23 17:57:14'
  message: 谢谢楼主分享， 在实际情况下是不可以卸载的
  postip: 113.246.199.83
  username: 来自湖南长沙的 Chrome 45.0|Windows 10 用户
- date: '2020-05-31 14:52:51'
  message: 想知道上面用的什么终端 ? 能显示行号和彩色字体的 ？
  postip: 111.202.167.25
  username: 来自北京的 Firefox 76.0|Windows 10 用户
- date: '2020-06-22 17:26:39'
  message: 扩展的LV用挂载吗
  postip: 221.220.243.162
  username: 来自北京的 Chrome 83.0|Windows 10 用户
- date: '2020-06-23 15:42:06'
  message: '.....'
  postip: 124.89.195.101
  username: 来自浙江宁波的 Chrome 83.0|Windows 10 用户
- date: '2021-02-02 16:36:33'
  message: 感谢分享
  postip: 112.17.191.198
  username: 来自浙江的 Chrome 88.0|Windows 10 用户
- date: '2021-07-16 14:35:39'
  message: 可以的，不过服务器要暂停一下，不要有大量读写，不然会显示设备忙就只能加 -l强制卸载
  postip: 183.6.170.146
  username: 来自广东广州的 Chrome 78.0|GNU/Linux 用户
count:
  commentnum: 9
  favtimes: 18
  likes: 0
  sharetimes: 3
  viewnum: 119314
date: '2014-06-18 13:44:00'
editorchoice: false
excerpt: 逻辑卷管理LVM是一个多才多艺的硬盘系统工具。无论在Linux或者其他类似的系统，都是非常的好用。传统分区使用固定大小分区，重新调整大小十分麻烦。但是，LVM可以创建和管理逻辑卷，而不是直接使用物理硬盘。可以让管理员弹性的管理逻辑卷的扩大缩小，操作简单，而不损坏已存储的数据。可以随意将新的硬盘添加到LVM，以直接扩展已经存在的逻辑卷。LVM并不需要重启就可以让内核知道分区的存在。
  LVM使用分层结构，如下图所示。  图中顶部，首先是实际的物理磁盘及其划分的分区和其上的物理卷（PV）。一个或多个物理卷可以用来创建卷组（VG
fromurl: http://xmodulo.com/2014/05/use-lvm-linux.html
id: 3218
islctt: true
largepic: /data/attachment/album/201406/18/134408sa12dauefffyszfg.jpg
permalink: /article-3218-1.html
pic: /data/attachment/album/201406/18/134408sa12dauefffyszfg.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 3965
- displayorder: 0
  raid: 3974
- displayorder: 0
  raid: 4145
- displayorder: 0
  raid: 4445
reviewer: ''
selector: ''
summary: 逻辑卷管理LVM是一个多才多艺的硬盘系统工具。无论在Linux或者其他类似的系统，都是非常的好用。传统分区使用固定大小分区，重新调整大小十分麻烦。但是，LVM可以创建和管理逻辑卷，而不是直接使用物理硬盘。可以让管理员弹性的管理逻辑卷的扩大缩小，操作简单，而不损坏已存储的数据。可以随意将新的硬盘添加到LVM，以直接扩展已经存在的逻辑卷。LVM并不需要重启就可以让内核知道分区的存在。
  LVM使用分层结构，如下图所示。  图中顶部，首先是实际的物理磁盘及其划分的分区和其上的物理卷（PV）。一个或多个物理卷可以用来创建卷组（VG
tags:
- LVM
- 磁盘
- 分区
thumb: false
title: Linux LVM简明教程
titlepic: false
translator: Vic___
updated: '2014-06-18 13:44:00'
---
逻辑卷管理LVM是一个多才多艺的硬盘系统工具。无论在Linux或者其他类似的系统，都是非常的好用。传统分区使用固定大小分区，重新调整大小十分麻烦。但是，LVM可以创建和管理“逻辑”卷，而不是直接使用物理硬盘。可以让管理员弹性的管理逻辑卷的扩大缩小，操作简单，而不损坏已存储的数据。可以随意将新的硬盘添加到LVM，以直接扩展已经存在的逻辑卷。LVM并不需要重启就可以让内核知道分区的存在。
LVM使用分层结构，如下图所示。
![](/data/attachment/album/201406/18/134408sa12dauefffyszfg.jpg)
图中顶部，首先是实际的物理磁盘及其划分的分区和其上的物理卷（PV）。一个或多个物理卷可以用来创建卷组（VG）。然后基于卷组可以创建逻辑卷（LV）。只要在卷组中有可用空间，就可以随心所欲的创建逻辑卷。文件系统就是在逻辑卷上创建的，然后可以在操作系统挂载和访问。
### LVM测试说明
本文将介绍**怎么在linux中创建和管理LVM卷**。我们将会分成两个部分。第一个部分，我们首先要在一个硬盘上创建多个逻辑卷，然后将它们挂载在/lvm-mount目录。然后我们将要对创建好的卷调整大小。而第二部分，我们将会从另外一块硬盘增加额外的卷到LVM中。
### 准备磁盘分区
通过使用fdisk，创建磁盘分区。我们需要创建3个1G分区，注意，并不要求分区的大小一致。同样，分区需要使用‘8e’类型来使他们可用于LVM。
```
# fdisk /dev/sdb 
```
---
```
Command (m for help): n ## 新建
Command action
   e   extended
   p   primary partition (1-4)
p ## 主分区
Partition number (1-4): 1 ## 分区号
First cylinder (1-1044, default 1):  ## 回车用默认的1
Last cylinder, +cylinders or +size{K,M,G} (1-1044, default 1044): +1G ## 大小
Command (m for help): t ## 改变类型
Selected partition 1
Hex code (type L to list codes): 8e ## LVM 的分区代码
Changed system type of partition 1 to 8e (Linux LVM)
```
重复上面的操作来创建其他两个分区。分区创建完成后，我们应该有类似如下的输出：
```
# fdisk -l 
```
---
```
   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1         132     1060258+  8e  Linux LVM
/dev/sdb2             133         264     1060290   8e  Linux LVM
/dev/sdb3             265         396     1060290   8e  Linux LVM
```
### 准备物理卷(PV)
刚创建的分区是用来储存物理卷的。LVM可以使用不同大小的物理卷。
```
# pvcreate /dev/sdb1
# pvcreate /dev/sdb2
# pvcreate /dev/sdb3 
```
使用下列命令检查物理卷的创建情况。下面截取部分输出。"/dev/sdb2"是一个新的"1.01 GiB"物理卷。
```
# pvdisplay 
```
---
```
  --- NEW Physical volume ---
  PV Name               /dev/sdb2
  VG Name
  PV Size               1.01 GiB
  Allocatable           NO
  PE Size               0
  Total PE              0
  Free PE               0
  Allocated PE          0
  PV UUID               jszvzz-ENA2-g5Pd-irhV-T9wi-ZfA3-0xo092
```
使用下列命令可以删除物理卷。
```
# pvremove /dev/sdb1 
```
### 准备卷组(VG)
下列命令用来创建名为'volume-group1'的卷组，使用/dev/sdb1, /dev/sdb2 和 /dev/sdb3创建。
```
# vgcreate volume-group1 /dev/sdb1 /dev/sdb2 /dev/sdb3
```
使用下列命令可以来验证卷组。
```
# vgdisplay 
```
---
```
  --- Volume group ---
  VG Name               volume-group1
  System ID
  Format                lvm2
  Metadata Areas        3
  Metadata Sequence No  1
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                0
  Open LV               0
  Max PV                0
  Cur PV                3
  Act PV                3
  VG Size               3.02 GiB
  PE Size               4.00 MiB
  Total PE              774
  Alloc PE / Size       0 / 0
  Free  PE / Size       774 / 3.02 GiB
  VG UUID               bwd2pS-fkAz-lGVZ-qc7C-TaKv-fFUC-IzGNBK
```
从输出中，我们可以看见卷组的使用量/总量。物理卷给卷组提供空间。只要在这个卷组中还有可用空间，我们就可以随意创建逻辑卷。
使用下列命令删除卷组。
```
# vgremove volume-group1 
```
### 创建逻辑卷(LV)
下列命令创建一个名为'1v1'、大小为100MB的逻辑卷。我们使用小分区减少执行时间。这个逻辑卷使用之前创建的卷组的空间。
```
# lvcreate -L 100M -n lv1 volume-group1 
```
逻辑卷可使用lvdisplay命令查看。
```
# lvdisplay 
```
---
```
  --- Logical volume ---
  LV Name                /dev/volume-group1/lv1
  VG Name                volume-group1
  LV UUID                YNQ1aa-QVt1-hEj6-ArJX-I1Q4-y1h1-OFEtlW
  LV Write Access        read/write
  LV Status              available
  # open                 0
  LV Size                100.00 MiB
  Current LE             25
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:2
```
现在逻辑卷已经准备好了，我们可以格式化和挂载逻辑卷，就像其它ext2/3/4分区一样！
```
# mkfs.ext4 /dev/volume-group1/lv1
# mkdir /lvm-mount
# mount /dev/volume-group1/lv1 /lvm-mount/ 
```
一旦逻辑卷挂载，我们就可以到挂载点 /lvm-mount/ 上读写了。要创建和挂载其它的逻辑卷，我们重复这个过程。
最后，使用lvremove我们可以删除逻辑卷。