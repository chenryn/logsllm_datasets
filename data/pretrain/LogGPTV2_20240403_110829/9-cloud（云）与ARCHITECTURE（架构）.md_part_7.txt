root@85c6b0b62235:/# exit
exit
\[root@docker1 docker_images\]#docker top 85
UID PID PPID C STIME TTY TIME CMD
root 2744 2729 0 18:01 pts/4 00:00:00 /bin/bash
### 6）过滤查看mac和ip地址
\[root@docker1 docker_images\]# docker inspect -f
\'{{.NetworkSettings.MacAddress}}\' 4f
02:42:ac:11:00:03
\[root@docker1 docker_images\]# docker inspect -f
\'{{.NetworkSettings.IPAddress}}\' 4f
172.17.0.3
7）修改nginx的显示内容
\[root@docker1 docker_images\]# docker run -it nginx:latest
\[root@docker1 docker_images\]# docker exec -it 56 /bin/bash
root@56ec8154f8e0:/# nginx -T /usr/share/nginx/html/
nginx: invalid option: \"/usr/share/nginx/html/\" //查找并显示结果
root@56ec8154f8e0:/# echo aaa \> /usr/share/nginx/html/index.html
//修改主页显示的内容
root@56ec8154f8e0:/# nginx -T
root@56ec8154f8e0:/# cat /usr/share/nginx/html/index.html
aaa
8）过滤查看nginx的ip地址
\[root@docker1 \~\]# docker inspect -f
\'{{.NetworkSettings.IPAddress}}\' 56
172.17.0.5
\[root@docker1 \~\]# curl 172.17.0.5
aaa
# \-\-\-\-\-\--NSD CLOUD(云) DAY06\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# 自定义镜像
## docker commit 方式
\[root@dacker1 \~\]# docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
\[root@dacker1 \~\]# docker ps -a
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
c1dd1c4bd382 centos \"/bin/bash\" 12 minutes ago Exited (0) 22 seconds
ago cocky_curie
c668e9c26be3 nginx \"nginx -g \'daemon off\" 13 hours ago Exited (0) 13
hours ago cranky_shaw
a46ee72b53a2 busybox:latest \"sh\" 13 hours ago Exited (1) 40 minutes
ago distracted_pike
\[root@dacker1 \~\]# docker commit c1dd1c4bd382 mydocker:latest
\[root@dacker1 \~\]# docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
mydocker latest 0f63c3204b03 4 seconds ago 310.8 MB
## Dockerfile 方式
Dockerfile语法格式：
-- FROM:基础镜像
-- MAINTAINER:镜像创建者信息(说明)
-- EXPOSE:开放的端口
-- ENV:设置环境变量
-- ADD:复制文件到镜像
-- RUN:制作镜像时执行的命令,可以有多个
-- WORKDIR:定义容器默认工作目录
-- CMD:容器启动时执行的命令,仅可以有一条CMD
### 用Dockerfile方式创建一个镜像
用该镜像启动一个容器,配置好了yum 源,,安装了vim net-tools
psmisc(pstree命令)
\[root@dacker1 \~\]# mkdir ooxx
\[root@dacker1 \~\]# cd ooxx
\[root@dacker1 ooxx\]# touch Dockerfile
\[root@dacker1 ooxx\]# ls
Dockerfile dockre.repo
\[root@dacker1 ooxx\]# vim Dockerfile
FROM centos:latest
RUN rm -f /etc/yum.repos.d/\*.repo
ADD dockre.repo /etc/yum.repos.d/a.repo
RUN yum -y install vim net-tools psmisc
\[root@dacker1 ooxx\]# docker build -t imagename .
#点表示当前目录(注意当前目录)
### 用Dockerfile方式创建一个http镜像
创建完之后,自动启动httpd服务
\[root@dacker1 ooxx\]# vim Dockerfile
FROM centos:latest
RUN rm -f /etc/yum.repos.d/\*.repo
ADD dockre.repo /etc/yum.repos.d/a.repo
RUN yum -y install vim net-tools pstree psmisc
RUN yum -y install httpd
ENV EnvironmentFile=/etc/sysconfig/httpd
WORKDIR /var/www/html/
RUN echo \"test\" \> /var/www/html/index.html
EXPOSE 80
CMD \[\"/usr/sbin/httpd\", \"-DFOREGROUND\"\] #启动httpd
\-\-\-\-\-\--CMD如何填写\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\[root@room9pc01 \~\]# rpm -ql httpd \|grep service
/usr/lib/systemd/system/htcacheclean.service
/usr/lib/systemd/system/httpd.service
\[root@room9pc01 \~\]# cat /usr/lib/systemd/system/httpd.service
\[Unit\]
Description=The Apache HTTP Server
After=network.target remote-fs.target nss-lookup.target
Documentation=man:httpd(8)
Documentation=man:apachectl(8)
\[Service\]
Type=notify
EnvironmentFile=/etc/sysconfig/httpd #此文件中查看\$OPTIONS调用的参数
ExecStart=/usr/sbin/httpd \$OPTIONS -DFOREGROUND
ExecReload=/usr/sbin/httpd \$OPTIONS -k graceful
ExecStop=/bin/kill -WINCH \${MAINPID}
\...\...
give
\# httpd time to finish.
KillSignal=SIGCONT
PrivateTmp=true
\[Install\]
WantedBy=multi-user.target
\[root@room9pc01 \~\]# cat /etc/sysconfig/httpd #查看\$OPTIONS参数
\#
\# This file can be used to set additional environment variables for
\# the httpd process, or pass additional options to the httpd
\.....
\#
\# To pass additional options (for instance, -D definitions) to the
\# httpd binary at startup, set OPTIONS here.
\#
#OPTIONS=
\# This setting ensures the httpd process is started in the \"C\" locale
\# by default. (Some modules will not behave correctly if
\# case-sensitive string comparisons are performed in a different
\# locale.)
\#
LANG=C
\[root@room9pc01 \~\]#
\-\-\-\-\-\--CMD填写查询方式结束\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\[root@dacker1 ooxx\]# docker build -t centos:http .
\...
Removing intermediate container 8f9a97899c13
Successfully built 63f99dcd04f2
\[root@node111 ooxx\]# docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
centos http 2a3d3ebf49a9 47 minutes ago 338.4 MB
\[root@node111 ooxx\]# docker run -itd centos:http #启动并放入后台运行
\[root@node111 ooxx\]# docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
2abceb52d399 centos:http \"/usr/sbin/httpd -DFO\" 2 minutes ago Up 2
minutes 80/tcp sad_feynman
\[root@node111 ooxx\]# docker inspect 2abce #查看容器底层信息
\[root@node111 ooxx\]# curl 172.17.0.2
test
# 创建私有镜像仓库
## 创建仓库
docker1的地址是:192.168.1.100
docker2的地址是:192.168.1.200
**docker1上的操作**
\[root@dacker1 \~\]# docker rm \`docker ps -qa\` #清空所有的容器
-q只显示ID
\[root@dacker1 \~\]# docker ps -a #查看所有容器
\[root@dacker1 \~\]# vim /etc/docker/daemon.json #编辑json文件
{
\"insecure-registries\" : \[\"192.168.1.100:5000\"\]
}
#地址为dacker1的ip地址
\[root@dacker1 \~\]# systemctl restart docker #重启docker
\[root@dacker1 \~\]# docker run -d -p 5000:5000 registry
#docker重启之后要重新运行
8b51ce2509eace0a6e8cb5856bd6d6255ea3941f19f5ce098abe6e2b81e0267c
\[root@dacker1 \~\]# scp /etc/docker/daemon.json 192.168.1.200:./
**docker2上的操作:**
\[root@docker2 docker\]# docker ps -a
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
\[root@docker2 docker\]# systemctl restart docker
\[root@docker2 docker\]# docker rmi \`docker images -q\` #清空所有镜像
\[root@docker2 docker\]# docker images #查看
## 制作镜像
\[root@dacker1 \~\]# docker tag busybox:latest
192.168.1.100:5000/busybox:latest
\[root@dacker1 \~\]# docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
imagename latest e6576bb5edd5 4 hours ago 299.8 MB
mydocker latest 0f63c3204b03 5 hours ago 310.8 MB
192.168.1.100:5000/busybox latest d8233ab899d4 4 weeks ago 1.199 MB
busybox latest d8233ab899d4 4 weeks ago 1.199 MB
\[root@dacker1 \~\]# curl http://192.168.1.100:5000/v2/\_catalog
显示所有镜像
{\"repositories\":\[\"busybox\"\]}
\[root@dacker1 \~\]# curl http://192.168.1.100:5000/v2/busybox/tags/list
#查看镜像的所有标签
{\"name\":\"busybox\",\"tags\":\[\"latest\"\]}
## docker1上传镜像
**上传单个**
\[root@dacker1 \~\]# docker push 192.168.1.100:5000/busybox:latest
The push refers to a repository \[192.168.1.100:5000/busybox\]
adab5d09ba79: Layer already exists
latest: digest:
sha256:491145eaade79b2434e0ddf88ec2ecd7634acae71a2b3bc54aeac35a74a63ea0
size: 527
**批量制作镜像并上传**
docker \[root@dacker1 \~\]# for i in http python
do
docker tag mydocker:latest 192.168.1.100:5000/mydocker:\$i
docker push 192.168.1.100:5000/mydocker:\$i
done
The push refers to a repository \[192.168.1.100:5000/mydocker\]
9067977f5105: Pushed
43e653f84b79: Pushed
http: digest:
sha256:1f133814a8eba7de11563c719362151915bd8270f823b7229671825e8abe940b
size: 741
The push refers to a repository \[192.168.1.100:5000/mydocker\]
9067977f5105: Layer already exists
43e653f84b79: Layer already exists
python: digest:
sha256:1f133814a8eba7de11563c719362151915bd8270f823b7229671825e8abe940b
size: 741
\[root@dacker1 \~\]# curl 
{\"repositories\":\[\"busybox\",\"mydocker\"\]}
\[root@dacker1 \~\]# curl
{\"name\":\"mydocker\",\"tags\":\[\"http\",\"python\"\]}
## docker2上直接启动镜像
\[root@docker2 docker\]# docker run -it
192.168.1.100:5000/busybox:latest /bin/bash
Unable to find image \'192.168.1.100:5000/busybox:latest\' locally
latest: Pulling from busybox
0f81c35f33fb: Pull complete
Digest:
sha256:491145eaade79b2434e0ddf88ec2ecd7634acae71a2b3bc54aeac35a74a63ea0
Status: Downloaded newer image for 192.168.1.100:5000/busybox:latest
docker: Error response from daemon: oci runtime error: exec:
\"/bin/bash\": stat /bin/bash: no such file or directory.
\[root@docker2 docker\]# docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
192.168.1.100:5000/busybox latest d8233ab899d4 4 weeks ago 1.199 MB
# 持久化存储
NFS共享存储
![image002](media/image84.png){width="3.6333333333333333in"
height="2.283333333333333in"}
1.  NFS服务器,共享一个目录给两台docker主机
存储卷
用Dockerfile方式创建一个http镜像
创建完之后,自动启动httpd服务
\[root@dacker1 ooxx\]# vim Dockerfile
FROM centos:latest
RUN rm -f /etc/yum.repos.d/\*.repo
ADD dockre.repo /etc/yum.repos.d/a.repo
RUN yum -y install vim net-tools pstree psmisc
RUN yum -y install httpd
ENV EnvironmentFile=/etc/sysconfig/httpd
WORKDIR /var/www/html/
RUN echo \"test\" \> /var/www/html/index.html
EXPOSE 80
CMD \[\"/usr/sbin/httpd\", \"-DFOREGROUND\"\]
\[root@dacker1 ooxx\]# docker build -t centos:http .
\...
Removing intermediate container 8f9a97899c13
Successfully built 63f99dcd04f2
\[root@dacker1 \~\]# docker run -d -v /docker01/:/var/www/html/ -it
centos:http
d6c582318d93b174a33d497418f410074316bc5f8ddc0d6d0f5e622eb99b5d00
\[root@dacker1 \~\]# curl 172.17.0.3
\^C
\[root@dacker1 \~\]# curl 172.17.0.2
nfs
/docker01/
目录为:http服务器docker1主机的文件目录,将nfs共享目录挂载在此目录,能看到nfs目录共享的html文件
然后将真实机的/docker01/的目录/docker01/挂载到容器中,提供持久化存储.nfs的html文件改变,容器提供的http服务的网页也改变了
# 真机网络设置
## 创建虚拟网卡
![LINUXNSD_V01CLOUDDAY06_024](media/image85.png){width="7.108333333333333in"
height="4.332638888888889in"}
## 创建虚拟网桥
![LINUXNSD_V01CLOUDDAY06_025](media/image86.png){width="7.264583333333333in"
height="4.719444444444444in"}
# Docker 网络拓扑
## 查看Docker网络
![LINUXNSD_V01CLOUDDAY06_027](media/image87.png){width="7.264583333333333in"
height="3.3444444444444446in"}
## Docker创建网桥
![LINUXNSD_V01CLOUDDAY06_028](media/image88.png){width="7.264583333333333in"
height="5.011111111111111in"}
案例1：制作自定义镜像
案例2：创建私有镜像仓库
案例3：NFS共享存储
案例4：创建自定义网桥
1 案例1：制作自定义镜像
1.1 问题
本案例要求制作自定义镜像：
基于centos镜像使用commit创建新的镜像文件
基于centos镜像使用Dockerfile文件创建一个新的镜像文件
1.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：使用镜像启动容器
1）在该容器基础上修改yum源
\[root@docker1 docker_images\]# docker run -it centos
\[root@8d07ecd7e345 /\]# rm -rf /etc/yum.repos.d/\*
\[root@8d07ecd7e345 /\]# vi /etc/yum.repos.d/dvd.repo
\[dvd\]
name=dvd
baseurl=ftp://192.168.1.254/system
enabled=1