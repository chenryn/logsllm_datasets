# Title: Catch You With Cache: Out-of-VM Introspection to Trace Malicious Executions

## Authors:
- Chao Su
- Xuhua Ding
- Qingkai Zeng

### Affiliations:
- State Key Lab for Novel Software Technology, Nanjing University
- School of Information Systems, Singapore Management University

**Abstract:**
Out-of-VM introspection is a critical component of security analysis. Traditional methods either modify the system, introducing significant overhead, or rely on hardware features that are not available or practical in most cloud environments. In this paper, we introduce a novel analysis method called Catcher, which leverages CPU cache to perform out-of-VM introspection. Catcher does not modify the target program or its environment and does not require special hardware support. Implemented on Linux KVM, it natively introspects the target's virtual memory and uses a cache-based side channel to infer the target's control flow. To address the inherent limitations of the side channel, we propose several heuristics to enhance the accuracy and stability of Catcher. Our experiments with various malware, including those employing packing techniques, demonstrate that Catcher can recover the control flow in real time with an accuracy ranging from 67% to 97%. Catcher imposes negligible overhead on the system and can be initiated at any time to monitor ongoing attacks within a virtual machine.

**Keywords:**
- Out-of-VM Introspection
- Cache
- Malware Analysis
- Non-intrusiveness
- Transparency

## I. Introduction
Control flow tracing is a fundamental aspect of dynamic malware analysis, as it reveals malicious behaviors that are often undetectable through static analysis. Common methods for capturing control flow include software instrumentation and the use of hardware facilities. Software instrumentation involves placing hooks in the target program to record control transfer destinations, such as system calls and function calls. However, this approach inevitably alters the target's virtual address space. Hardware facilities, such as Intel’s Performance Monitor Unit (PMU), Processor Tracing, and ARM’s TreadMill, can log control transfers without modifying the target. Nevertheless, these facilities are often disabled in production or end-user systems, and their activation can alert malware to the presence of analysis. Additionally, some hardware facilities, like Branch Trace Storage (BTS), can introduce significant performance overhead, up to 6.1% [34].

Modern malware employs advanced evasion techniques to bypass defense mechanisms. It may check for debuggers or other system artifacts to determine if it is under analysis. For effective introspection of malware with anti-analysis capabilities, transparency is essential. Most existing methods, which involve using a debugger or dynamic binary instrumentation, can be detected by the malware. We categorize these methods as environmentally intrusive because they cause changes (e.g., address space alterations, hardware setting changes, and performance slowdowns) that would not occur if the malware were not being analyzed. Environmental intrusiveness is undesirable for malware analysis, as it compromises transparency. Advanced malware can detect the presence of analysis, especially after gaining kernel privileges. Unlike x86 virtualization, these changes serve as strong indicators of analysis, causing malware to alter or terminate its malicious activities. Furthermore, the need for environmental changes hinders the smooth and "silent" deployment of analysis tools in scenarios where prior setup or secure login is not possible. While there are ways to impose changes on the system (e.g., by trapping it to the hypervisor [10]), these methods often contaminate the attack scene and may even cause the malware to terminate.

Out-of-VM introspection [7], [9], [23], [31], [37], [39] examines the virtual or physical memory of a target virtual machine and is known for its non-intrusiveness compared to in-VM introspection. However, it is limited to reading the target memory and cannot capture control flows within the VM. In this paper, we propose a novel out-of-VM introspection technique, termed Catcher, to trace malicious execution without introducing environmental variability.

### A. System & Adversary Models
We consider a multicore platform with CPU and MMU virtualization extensions, managed by Linux KVM. The virtual machine hosting the OS with the target malware is defined as the target VM. We assume that hardware security and cache latency cannot be manipulated by the OS or malware. The host OS (i.e., the hypervisor) managing the target VM is trusted. The malware under study may employ anti-analysis techniques to check if it is being monitored.

### B. Idea Sketch
Catcher is designed based on the principle that cache states are closely related to control flow. Different execution paths result in different cache states. Figure 1 illustrates two possible execution traces of a process, represented by dashed and solid arrows. Recently executed code blocks will show "hit" in the cache, while non-executed code blocks will show "miss." The two cache states, A and B, are tightly bound to their respective execution paths. Therefore, if the cache states can be obtained, the control flow of the program can be inferred.

```python
Algorithm 1: Core Scheme of Catcher
1: get a starting code block g0
2: while g0 != end do
3:    g1, g2 ← different branches from g0
4:    s1 ← PROBECACHELINESTATE(g1)
5:    s2 ← PROBECACHELINESTATE(g2)
6:    if s1 == hit and s2 == miss then
7:        g0 ← g1
8:        add g0 to execution path P
9:    else if s1 == miss and s2 == hit then
10:        g0 ← g2
11:        add g0 to execution path P
12:    else
13:        get another starting code block g0
14:    end if
15: end while
16: return P
```

This approach provides a non-intrusive way to monitor target malware by leveraging the relationship between cache states and control flow.

### A. Cache Access
Monitoring the target process non-intrusively through CPU cache across VMs is challenging. In most cases, the analyzer cannot directly obtain cache states across VMs.