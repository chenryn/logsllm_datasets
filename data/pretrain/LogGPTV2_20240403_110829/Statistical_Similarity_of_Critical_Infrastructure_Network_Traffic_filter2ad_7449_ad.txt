90.4
98.0
67.6
88.4
95.0
94.8
1.4
1.6
2.0
1.0
2.0
1.2
2.2
1.4
6.0
31.6
8.6
50.6
60.8
9.6
62.6 10.0
34.0 10.0
62.0 21.2
83.2 27.0
84.0 26.8
1.8
23.6
49.0
2.0
2.8
61.6
2.8
63.0
0.4
21.6
0.2
49.2
90.4
1.6
1.6
99.4
2.2
13.6
3.2
27.0
39.8
3.8
42.8
3.8
49.2 11.8
78.6 18.2
91.6 21.6
92.6 21.6
0.8
0.6
0.4
0.6
7.2
9.8
11.4
11.6
12.2
22.6
28.6
28.8
1.0
1.6
2.2
2.2
0.4
0.6
1.2
1.2
1.8
3.6
3.6
4.0
13.2
18.8
21.8
22.2
2.4
1.8
2.4
2.6
38.6
72.8
96.6
97.2
37.6
65.0
82.2
83.8
21.6
42.0
66.0
69.8
10.4
33.4
87.2
98.8
11.4
32.4
74.8
83.2
45.4
76.6
90.6
92.0
1
2
3
4
5
6
7
8
9
10
11
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
1
2
5
10
0.8
0.4
0.4
0.6
43.0
76.4
92.8
95.4
39.4
58.0
62.8
63.6
18.6
33.2
49.4
52.4
10.8
23.2
46.4
52.6
5.6
14.0
28.6
34.6
40.8
55.6
63.2
63.6
NNS of Critical Infrastructure Network Traﬃc
595
the number of packets is considerably diﬀerent. As the number of victim edges
increases, the probability of adding packets to the corresponding edge increases,
which increases the detection rate signiﬁcantly.
Table 4 shows the results of the experiments according to the number of
victim windows. In general, the higher number of victim windows conﬁrms the
higher detection rate in Table 4. When packets are added to only one window,
most sites have low detection rates. It is diﬃcult to distinguish small amounts
of traﬃc change with only one window due to noise. However, since the noise
generated in each window is diﬀerent, it is possible to ﬁnd out the probability
of artiﬁcially added network traﬃc by comparing multiple windows.
Table 5 shows that the detection rate varies with the occurrence of victim
windows even if the number of victim windows is the same. The timing at which
packets are added artiﬁcially determines the diﬀerence between existing traﬃc
transmission patterns.
The actual reasons for the detection rates observed in each individual site
vary.
Site 1 collects network traﬃc only from control devices, which perform only
certain speciﬁc tasks, resulting in a high anomaly detection rate. A high detection
rate is also obtained at sites 6, 8, 9, 10, and 11, where regular communication
between control devices is mostly achieved. The CCDF density graph of site 11
in Fig. 7a shows that the CCDF values learned and the CCDF values in the
anomaly test are well separated.
MinCCDF Density
0.18
0.16
0.14
0.12
0.1
0.08
0.06
0.04
0.02
0
0.000001
0.00001
0.0001
learn
0.001
a(cid:425)ackE
a(cid:425)ackN
0.01
Normal
(a) Site 11
0.1
1
0.000001
0.00001
MinCCDF Density
0.35
0.3
0.25
0.2
0.15
0.1
0.05
0.0001
learn
0.001
a(cid:425)ackE
a(cid:425)ackN
0.01
Normal
(b) Site 5
0.1
0
1
Fig. 7. CCDF density graph (blue: learning result, yellow: normal test, orange: abnor-
mal test) (Color ﬁgure online)
Site 2 is a backup site, but the resident administrator continuously monitors
the site information using the HMI. Because a network traﬃc throughput pattern
is learned based on human operation on the small-scale site, small changes in the
network traﬃc are diﬃcult to detect in a short period of time. However, since
human monitoring task does not require a long time to perform once, it can be
seen that abnormal behavior is detected with a high probability when the traﬃc
change time exceeds 4 min.
Sites 3 and 5 experienced a lot of administrator work during the period when
the traﬃc data was collected. Site 5 in particular had DB server backup, failure
596
J.-H. Yun et al.
response, and other administrator work being carried out. Because the learning
traﬃc contains too many transmission patterns, the proposed algorithm could
not detect small changes in the amount of network traﬃc in site 5. The CCDF
density graph of site 5 in Fig. 7b shows that it is diﬃcult to distinguish CCDF
values from learning, normal test, and anomaly tests.
Site 4 only performed periodic ﬁeld monitoring by control devices during the
network traﬃc data collection, without any non-regular work. As can be seen
in Table 1, site 4 has fewer IP→ IPs used in one minute than in other sites.
Therefore, when selecting the victim edge, the probability of choosing an edge
without network traﬃc transmission is higher in site 4 than other sites. This has
aﬀected the high detection rate in site 4.
Site 7 has similar size and work characteristics to site 1. However, network
traﬃc for all IPs was collected in site 7. The network traﬃc collected at site 7
includes non-regular and uneven patterned network traﬃc generated by security
equipment, web server, HMI, etc. Therefore, site 7 has a lower detection rate
than site 1.
Table 6. Querying time
Site Period of learned
traﬃc (days)
9.36
5.84
7.84
6.64
9.60
4.00
23.20
5.60
6.96
2.40
16.80
1
2
3
4
5
6
7
8
9
10
11
Volume of learned
data (MB)
66.4
4.8
12.0
7.8
18.4
9.6
237.6
15.2
19.2
13.6
448.0
Query time (s)
0.902
0.042
0.118
0.084
0.292
0.062
7.030
0.152
0.228
0.072
8.736
5.4 Speed of Anomaly Detection
Our experiments were carried out on a server with Intel Xeon CPU E5-2670
2.30 GHz and 384 GB RAM, and the time to perform anomaly detection (referred
to below as query) is shown in Table 6.
A more detailed analysis of the execution times for site 1 is as follows. In site
1, we collected 11.7 days of network traﬃc and used 80% (9.36 days) network
traﬃc for learning data. As shown in Table 1, the capacity of converting the
network traﬃc used for learning into the histogram every minute is 66.4 MB.
NNS of Critical Infrastructure Network Traﬃc
597
The approximate capacity of 1-minute histograms of network traﬃc over a year
can be estimated to be 2.5 GB (365 days ÷ 9.36 days × 66.4 MB = 2.5 GB).
Therefore, even if histograms for more than one year are used as learning data,
it is assumed that all the data are stored in the RAM, so that the calculation
time is proportional to the length of the learning data. According to Table 6, the
querying time is 0.902 s when using 9.36 days network traﬃc as learning data.
Therefore, when 1-year network traﬃc is used as learning data, the querying
time is 35.2 s (365 days ÷ 9.36 days × 0.902 s = 35.2 s) and the query can be
executed within 1 min. That is, even if 1-year network traﬃc is used as learning
data, this algorithm can be used for real-time detection.
Sites 7 and 11 require 110.6 s and 189.8 s, respectively, for queries with one
year of traﬃc. It is possible to shorten the detection time by performing the
distance calculation of NNS in parallel by dividing the learning traﬃc into several
parts.
6 Conclusion
In this paper, we set out to propose an anomaly-based IDS based on the NNS to
learn normal traﬃc patterns over the entire network of an ICS. If an attack or
an operation error in the equipment or communication within a system does not
cause changes in the traﬃc patterns, it may be diﬃcult to detect the attack or
error solely through monitoring the network traﬃc. However, for a system that
performs repetitive tasks, such as a control system, analyzing the entire network
of the system can lead to the identiﬁcation of unusual outliers.
We proposed a method to ﬁnd anomalous signals in an ICS using the traﬃc
transmission pattern of the control system network. We mathematically deduced
whether the traﬃc transmission pattern can be used, and conﬁrmed its eﬀective-
ness by applying it to the traﬃc collected from actual control system infrastruc-
tures.
Our experiments conﬁrmed that small changes4 in the amount of traﬃc can
be detected in a small number of communication sections and that the speed of
execution can be used for real-time network monitoring. We demonstrated the
utility of our method to monitor the number of packets per IP→IP in this paper.
Similar results are obtained when the total number of bytes is used instead of
the number of packets following our experience, and our method can also be
applied on a server-by-client basis.
References
1. Shodan search engine for internet-connected devices. http://www.shodan.io
2. Barbosa, R.R.R., Sadre, R., Pras, A.: A ﬁrst look into SCADA network traﬃc. In:
Network Operations and Management Symposium (NOMS), pp. 518–521. IEEE
(2012)
4 In the proposed algorithm, the increments and decrements in the amount of network
traﬃc produce the same eﬀect in detecting anomaly of traﬃc.
598
J.-H. Yun et al.
3. Barbosa, R.R.R., Sadre, R., Pras, A.: Diﬃculties in modeling SCADA traﬃc: a
comparative analysis. In: Taft, N., Ricciato, F. (eds.) PAM 2012. LNCS, vol.
7192, pp. 126–135. Springer, Heidelberg (2012). https://doi.org/10.1007/978-3-
642-28537-0 13
4. Berthier, R., et al.: On the practicality of detecting anomalies with encrypted traﬃc
in AMI. In: International Conference on Smart Grid Communications (SmartGrid-
Comm), pp. 890–895. IEEE (2014)
5. Bishop, C.M.: Pattern recognition. Mach. Learn. 128, 1–58 (2006)
6. Black, F., Scholes, M.: The pricing of options and corporate liabilities. J. Polit.
Econ. 81(3), 637–654 (1973)
7. Caselli, M., Zambon, E., Kargl, F.: Sequence-aware intrusion detection in industrial
control systems. In: Proceedings of the 1st Workshop on Cyber-Physical System
Security, pp. 13–24. ACM (2015)
8. Downey, A.B.: Lognormal and Pareto distributions in the Internet. Comput. Com-
mun. 28(7), 790–801 (2005)
9. Feng, X., Li, Q., Wang, H., Sun, L.: Characterizing industrial control system
devices on the internet. In: 24th International Conference on Network Protocols
(ICNP), pp. 1–10. IEEE (2016)
10. Formby, D., Srinivasan, P., Leonard, A., Rogers, J., Beyah, R.: Who’s in control of
your control system? Device ﬁngerprinting for cyber-physical systems. In: Network
and Distributed System Security Symposium (NDSS) (2016)
11. Goh, J., Adepu, S., Junejo, K.N., Mathur, A.: A dataset to support research in
the design of secure water treatment systems. In: Havarneanu, G., Setola, R., Nas-
sopoulos, H., Wolthusen, S. (eds.) CRITIS 2016. LNCS, vol. 10242, pp. 88–99.
Springer, Cham (2017). https://doi.org/10.1007/978-3-319-71368-7 8
12. Gong, W.B., Liu, Y., Misra, V., Towsley, D.: Self-similarity and long range depen-
dence on the internet: a second look at the evidence, origins and implications.
Comput. Netw. 48(3), 377–399 (2005)
13. Krotoﬁl, M., Larsen, J., Gollmann, D.: The process matters: ensuring data veracity
in cyber-physical systems. In: Proceedings of the 10th Symposium on Information,
Computer and Communications Security, pp. 133–144. ACM (2015)
14. Kwon, H., Kim, T., Yu, S.J., Kim, H.K.: Self-similarity based lightweight intrusion
detection method for cloud computing. In: Nguyen, N.T., Kim, C.-G., Janiak, A.
(eds.) ACIIDS 2011. LNCS (LNAI), vol. 6592, pp. 353–362. Springer, Heidelberg
(2011). https://doi.org/10.1007/978-3-642-20042-7 36
15. Leland, W.E., Taqqu, M.S., Willinger, W., Wilson, D.V.: On the self-similar nature
of ethernet traﬃc (extended version). IEEE/ACM Trans. Netw. 2(1), 1–15 (1994)
16. Lemay, A., Fernandez, J.M.: Providing SCADA network data sets for intrusion
detection research. In: Workshop on Cyber Security Experimentation and Test
(CSET). USENIX Association (2016)
17. Lin, C.Y., Nadjm-Tehrani, S., Asplund, M.: Timing-based anomaly detection in
SCADA networks. In: International Conference on Critical Infrastructures Security
(CRITIS) (2017)
18. Rawat, S., Sastry, C.S.: Network intrusion detection using wavelet analysis. In:
Das, G., Gulati, V.P. (eds.) CIT 2004. LNCS, vol. 3356, pp. 224–232. Springer,
Heidelberg (2004). https://doi.org/10.1007/978-3-540-30561-3 24
19. Rodoﬁle, N.R., Schmidt, T., Sherry, S.T., Djamaludin, C., Radke, K., Foo, E.: Pro-
cess control cyber-attacks and labelled datasets on S7Comm critical infrastructure.
In: Pieprzyk, J., Suriadi, S. (eds.) ACISP 2017. LNCS, vol. 10343, pp. 452–459.
Springer, Cham (2017). https://doi.org/10.1007/978-3-319-59870-3 30
NNS of Critical Infrastructure Network Traﬃc
599
20. Urbina, D.I., et al.: Limiting the impact of stealthy attacks on industrial control
systems. In: Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, pp. 1092–1105. ACM (2016)
21. Welch, G., Bishop, G.: An introduction to the Kalman ﬁlter (1995)
22. Willinger, W., Taqqu, M.S., Sherman, R., Wilson, D.V.: Self-similarity through
high-variability: statistical analysis of ethernet LAN traﬃc at the source level.
IEEE/ACM Trans. Netw. (ToN) 5(1), 71–86 (1997)
23. Yu, S.J., Koh, P., Kwon, H., Kim, D.S., Kim, H.K.: Hurst parameter based anomaly
detection for intrusion detection system. In: International Conference on Computer
and Information Technology (CIT), pp. 234–240. IEEE (2016)