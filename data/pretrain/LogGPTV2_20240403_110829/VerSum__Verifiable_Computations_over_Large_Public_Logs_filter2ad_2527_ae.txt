and does it in a verifiable way, which takes 25 hours in total. The
VERSUM prototype is not optimized for the initial computation, but
these numbers demonstrate VERSUM is practical.
10. RELATED WORK
10.1 Outsourcing computation
Various schemes have been proposed to outsource computation
not in the RDoC model. AVM [11] provides auditable virtual ma-
chines to clients. However, these virtual machines do not guarantee
correctness; instead, their mistakes can be proven to others. Pio-
neer [19] provides timing proofs of correctness, but these proofs
cannot be reused for multiple clients.
1https://blog.conformal.com/deslugging-in-go-with-pprof-btcd/
11
A number of systems have required servers to produce an eff-
iciently checkable cryptographic proof that the computation was
performed correctly [3, 18]. Pantry [6] has shown that this approach
can be coupled with authenticated data structures to verify compu-
tations with state. While not relying on any trusted servers, these
systems suffer from high server-side computation overheads, mak-
ing it impractical to run computations over a large input such as the
Bitcoin blockchain.
In cases where the system needs to perform only a limited class
of computations, specialized schemes have been designed, for ex-
ample to support range queries over streaming data [17]. However,
such systems cannot support arbitrary computations; in contrast,
VERSUM can outsource and verify the results of any computation
expressed as a functional program.
Finally, some systems rely on a piece of trusted server hardware,
such as a TPM [21], to generate an attestation that the computation
was performed correctly. Although efficient, this plan requires
trusting the trusted hardware manufacturer. If any trusted hardware
device or the root cryptographic key is compromised, it can produce
incorrect attestations, and can trick the client into accepting an
incorrect computation result.
10.2 Other data structures
SEQHASH used as an ADS is the first data structure for holding
sequences supporting both fast comparison and fast concatenation.
Although there are various other candidate schemes, they do not
provide the same functionality as SEQHASH:
Merkle trees. Standard Merkle trees [13] have a rigid shape, and
thus support fast comparison. However, because of that rigid shape,
Merkle trees are not efficiently concatenable: for example, a Merkle
tree of the sequence {1,2, . . . ,2n} always combines 2i + 1 on the
left with 2i + 2 on the right to form an intermediate node. When we
prepend the value 0 to this sequence, all internal nodes change, as
now 2i on the left is always paired with 2i + 1 on the right.
Balanced binary trees. Balanced binary trees, as implemented
as an ADS by Miller et al. [14], are efficiently concatenable. How-
ever, a single sequence can be stored in many distinct balanced
binary trees (by performing simple tree rotations). This means that
two different trees are not efficiently comparable: deciding if two
trees contain the same elements might require inspecting the entire
tree, since the hash at the top of the tree depends on the internal
structure of the tree. Thus, balanced binary trees are useless for
testing sequence equality.
The shape of a balanced binary tree is determined by the order
in which the sequence elements were inserted into or concatenated
onto the tree. In the context of VERSUM, if balanced binary trees
were used instead of SEQHASH, the tree representing a prefix might
have a different shape depending on if it was formed during conflict
resolution (where prefixes are extended one entry at a time) or
during computation (where large sequences of entries get reused
and concatenated all at ones).
Uniquely represented data structures. Since SEQHASH pro-
vides efficient equality comparison, it can be thought of as a uniquely
represented data structure, or a strongly history-independent data
structure [16]. Such data structures have been used to perform O(1)
comparisons, such as between dictionaries [8], hash tables [5], or
B-Treaps [10]. Similar data structures have also been used to en-
force append-only properties on logs [9, 22], including the Bitcoin
blockchain itself [15]. Unlike SEQHASH, none of these data struc-
tures support O(logn) concatenation of sequences in the face of
adversaries choosing the input data.
For example, in the case of a treap, an adversary could construct
a sequence of steps with monotonically increasing priority, leading
to an imbalanced tree.
[8] S. A. Crosby. Authenticated dictionaries: Real-world costs
and trade-offs. ACM Transactions on Information and System
Security, 14(2), Sept. 2011.
11. CONCLUSION
This paper introduced VERSUM, a system that allows lightweight
clients to outsource computations over large, frequently changing
public logs to a collection of servers. As long as one of the servers
is not compromised, VERSUM will return the correct result to the
client. VERSUM achieves its efficiency using three key ideas: ex-
press the computations as functional programs, record the evaluation
trace of programs in a computation history that helps clients deter-
mine which server is honest, and summarize computation histories
using the SEQHASH authenticated data structure. Experiments with
the Bitcoin log demonstrate that VERSUM is practical. We believe
that VERSUM can also enable lightweight clients to perform ver-
ifiable name lookup in Namecoin and to validate certificates for
Certificate Transparency. As more publicly available logs become
available, we expect the number of use cases for VERSUM to grow.
The VERSUM prototype is publicly available at https://github.
com/jellevandenhooff/versum.
Acknowledgments
We thank Sergio Benitez, Raluca Ada Popa, the anonymous re-
viewers, and our shepherd, Charalampos Papamanthou, for their
help and feedback. This research was supported by the DARPA
Clean-slate design of Resilient, Adaptive, Secure Hosts (CRASH)
program under contract #N66001-10-2-4089, and by NSF awards
CNS-1053143 and CNS-1413920.
References
[1] Electrum Bitcoin wallet, 2014. URL https://electrum.
org.
[2] Namecoin, 2014. URL http://namecoin.info.
[3] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza.
SNARKs for C: Verifying program executions succinctly and
in zero knowledge. In Proceedings of the 33rd Annual Interna-
tional Cryptology Conference (CRYPTO), Santa Barbara, CA,
Aug. 2013.
[9] S. A. Crosby and D. S. Wallach. Efficient data structures for
tamper-evident logging. In Proceedings of the 18th Usenix
Security Symposium, Montreal, Canada, Aug. 2009.
[10] D. Golovin. B-treaps: A uniquely represented alternative to
B-Trees. In Proceedings of the 36th International Colloquium
on Automata, Languages and Programming, Rhodes, Greece,
July 2009.
[11] A. Haeberlen, P. Aditya, R. Rodrigues, and P. Druschel. Ac-
countable virtual machines. In Proceedings of the 9th Sym-
posium on Operating Systems Design and Implementation
(OSDI), Vancouver, Canada, Oct. 2010.
[12] B. Laurie, A. Langley, and E. Kasper. Certificate transparency.
RFC 6962, Internet Engineering Task Force (IETF), June 2013.
[13] R. C. Merkle. A digital signature based on a conventional
encryption function. In Proceedings of the 7th Annual Inter-
national Cryptology Conference (CRYPTO), pages 369–378,
Santa Barbara, CA, Aug. 1987.
[14] A. Miller, M. Hicks, J. Katz, and E. Shi. Authenticated data
structures, generically. In Proceedings of the 41st ACM Sym-
posium on Principles of Programming Languages, pages 411–
423, San Diego, CA, Jan. 2014.
[15] S. Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System,
2008. URL https://bitcoin.org/bitcoin.pdf.
[16] M. Naor and V. Teague. Anti-persistence: History independent
data structures. In Proceedings of the 33rd Annual ACM Sym-
posium on Theory of Computing (STOC), Heraklion, Greece,
July 2001.
[17] S. Papadopoulos, Y. Yang, and D. Papadias. CADS: Continu-
ous authentication on data streams. In Proceedings of the 33rd
International Conference on Very Large Data Bases (VLDB),
Vienna, Austria, Sept. 2007.
[18] B. Parno and C. Gentry. Pinocchio: Nearly practical verifiable
computation. In Proceedings of the 34th IEEE Symposium on
Security and Privacy, San Francisco, CA, May 2013.
[4] G. Bertoni, J. Maemen, M. Peeters, and G. van Assche. On the
indifferentiability of the sponge construction. In Proceedings
of the 27th Annual International Conference on the Theory and
Applications of Cryptographic Techniques (EUROCRYPT),
pages 181–197, Istanbul, Turkey, Apr. 2008.
[19] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and
P. Khosla. Pioneer: Verifying code integrity and enforcing
untampered code execution on legacy systems. In Proceedings
of the 20th ACM Symposium on Operating Systems Principles
(SOSP), Brighton, UK, Oct. 2005.
[5] G. E. Blelloch and D. Golovin. Strongly history-independent
In Proceedings of the 48th An-
hashing with applications.
nual IEEE Symposium on Foundations of Computer Science,
Providence, RI, Oct. 2007.
[6] B. Braun, A. J. Feldman, Z. Ren, S. Setty, A. J. Blumberg, and
M. Walfish. Verifying computations with state. In Proceedings
of the 24th ACM Symposium on Operating Systems Principles
(SOSP), Farmington, PA, Nov. 2013.
[7] R. Canetti, B. Riva, and G. N. Rothblum. Practical delegation
In Proceedings of
of computation using multiple servers.
the 18th ACM Conference on Computer and Communications
Security, pages 445–454, Chicago, IL, Oct. 2011.
12
[20] R. Tamassia. Authenticated data structures. In Proceedings of
the 11th Annual European Symposium on Algorithms (ESA),
pages 2–5, Budapest, Hungary, Sept. 2003.
[21] Trusted Computing Group.
computing
group – Developers – Trusted platform module, 2014.
URL
https://www.trustedcomputinggroup.org/
developers/trusted_platform_module.
Trusted
[22] A. A. Yavuz, P. Ning, and M. K. Reiter. Efficient, compromise
resilient and append-only cryptographic schemes for secure
audit logging. In Proceedings of the 16th International Confer-
ence on Financial Cryptography and Data Security, Bonaire,
Feb. 2012.
APPENDIX
A. PROOF OF SECURITY FOR SEQHASH
To precisely state and prove SEQHASH’s security properties,
we will use standard cryptographic notation: κ will be a security
parameter, negl(·) is a negligible function, a ← B denotes sampling
a randomly from a uniform distribution over B, and a ← Alg()
denotes running a probabilistic algorithm Alg to produce result a.
We use Alg( f (·)) to represent algorithm Alg running with query
access to function f (·).
Formalizing SEQHASH’s security properties requires addressing
one technicality: because SEQHASH uses a public hash function,
it is difficult to bound the amount of pre-computation done by an
adversary in constructing some adversarial algorithm Adv. In prac-
tice, this is not a problem, because we assume our hash function is
indifferentiable from a random oracle [4] and assume the adversary
has been running from the time SEQHASH was designed. However,
to capture the notion of efficiency in our definitions, we temporarily
assume that SEQHASH uses a keyed PRF P instead of a pseudo-
random oracle, and we give the adversary’s algorithm query access
to this keyed PRF.
First, we define and prove collision-resistance.
DEFINITION A.1
(COLLISION-RESISTANCE). F is collision-
resistant if, for every probabilistic polynomial-time adversary Adv,
for every sufficiently large security parameter κ,
Pr[k ← {0,1}κ;
(a,b) ← Adv(Pk(·));
F(k,a) = F(k,b) and a ̸= b] ≤ negl(κ)
THEOREM A.2. SEQHASH is collision-resistant, as defined in
Definition A.1.
PROOF. Suppose that there exists an adversary Adv that can
construct a pair of sequences a and b with identical SEQHASH
values with non-negligible probability. We will use Adv to construct
a reduction to break the security of the Merkle tree used for each
tree in SEQHASH’s forest.
This reduction works as follows. Invoke Adv to obtain a and b.
Pick the first tree hash h in SEQHASH(a) = SEQHASH(b) where
the nodes corresponding to h in a and b are different. Such a tree
hash h must exist because a ̸= b. Output the corresponding nodes
from a and b. The resulting Merkle tree nodes are different but lead
to the same Merkle root hash.
This reduction works with non-negligible probability, but by
assumption Merkle trees cannot be broken with non-negligible prob-
ability. Thus, our supposition was wrong, and such an adversary
Adv does not exist.
Second, we define and prove efficiency.
DEFINITION A.3. A function F that maps a key and a sequence
to a forest of trees is efficient if, for every probabilistic polynomial-
time adversary Adv, for every sufficiently large security parameter
κ,
Pr[k ← {0,1}κ;
seq ← Adv(Pk(·));
NumTrees(F(k, seq)) ≥ 2κ logn] ≤ negl(κ)
where NumTrees(·) counts the number of trees in a forest.
Before we can prove that SEQHASH is efficient, we first prove a
lemma about the maximum number of bits that has to be processed
in a SEQHASH round until n different nodes merge. Let P be the
keyed PRF used by SEQHASH, which produces an infinite stream of
13
bits. Let m(k,a,b) be the number of bits until nodes a and b merge
in a given round; that is, the number of bits until Pk(a) has a 1 bit
and Pk(b) has a 0 bit.
LEMMA A.4
(MERGE PROBABILITY). For every n, for every
sufficiently large security parameter κ, for every p which is polyno-
mial in n,
Pr[k ← {0,1}κ;
max({m(k,a,b)|a,b ∈ {1, . . . , p} and
a ̸= b}) ≥ κ] ≤ negl(κ).
PROOF. For every distinct a and b, Pr[m(k,a,b) ≥ κ] = ( 3
4 )κ,
since Pk(a) and Pk(b) are indistinguishable from random, and ev-
ery bit position causes a and b to merge with probability 1
4 . The
probability that at least one of the p(p − 1) pairs (a,b) satisfies
m(k,a,b) ≥ κ is at most p2 · ( 3
4 )κ. This is negl(κ).
Now we will prove a lemma about the maximum length of a
SEQHASH round.
LEMMA A.5
(SEQHASH ROUND LENGTH). For every proba-
bilistic polynomial-time adversary Adv, for every sufficiently large
security parameter κ,
Pr[k ← {0,1}κ;
seq ← Adv(Pk(·));
MaxRound(k, seq) ≥ κ] ≤ negl(κ)
where MaxRound(k, seq) is the maximum number of bits consumed
in any round while computing SEQHASH(k, seq).
PROOF. Assume there exists such an adversary Adv that suc-
ceeds with non-negligible probability. Since we assume that P is
indifferentiable from a random oracle, let p be the number of times
that Adv invokes Pk(·). Since Adv is polynomial-time, p is polyno-
mial in 1κ. Without loss of generality, include in p all invocations
of Pk(·) needed to compute SEQHASH on the sequence produced by
Adv, even if Adv did not make such queries. Because P is a PRF,
the exact arguments on which Adv(k) queries P are irrelevant, so
without loss of generality, assume they are 1,2, . . . , p.
Since Adv produces seq with MaxRound(k, seq) ≥ κ, it must
be that SEQHASH(k, seq) runs into some pair of distinct a,b ∈
{1, . . . , p} such that m(k,a,b) ≥ κ. But according to Lemma A.4,
the probability that this would be true for any such pair a,b is negligi-
ble. Thus, Adv cannot succeed with non-negligible probability.
Now we can prove the theorem about efficiency.
THEOREM A.6. SEQHASH is efficient, as defined in Defini-
tion A.3.
PROOF. Suppose there exists an adversary Adv that, given argu-
ment k, constructs a sequence seq such that
NumTrees(SEQHASH(k, seq)) ≥ 2κ logn,
with non-negligible probability. By construction, SEQHASH runs for
O(logn) rounds, so there must be some round that produces at least
2κ trees. The number of trees produced in a round is bounded by
the number of unmerged nodes, which is bounded by 2× the length
of the round (number of bits consumed). But by Lemma A.5, no
adversary can construct a sequence that causes a round to consume
at least κ bits, with non-negligible probability. So such an adversary
Adv cannot exist.