The  client  is  a  dedicated  application  named  “Windows 
CardSpace”. InfoCard was not widely adopted before it was 
retired. The SSO schemes really adopted are those that we 
analyzed in this study. These unsuccessful attempts suggest 
that web-based schemes indeed have a clear advantage for 
deployment.  On  the  other  hand,  our  paper  shows  that  the 
easy deployment comes with the cost of significant security 
uncertainty.  Therefore,  a  possible  mitigation  might  be  to 
build  a  simplified  web  platform  for  running  security 
schemes.  The  programming  language  is  still  HTML  with 
Javascript,  but  its  functionalities  are  so  restricted  that  the 
system details of the platform can be faithfully modeled.  
is 
Delivering  security-critical  services  as  “integrated 
circuits”, not as “individual electronic components”. Today 
the  APIs  of  service  providers  (e.g.,  IdP  and  cashiers)  are 
designed at a level which is too low. Integrating these APIs 
into a website is like wiring up many electronic components 
to implement a circuit. There is too much room for mistakes. 
We believe that it is better for the services to be provided as 
“integrated  circuits”.  A  potential  argument  in  favor  of 
“individual  electronic  components” 
they  give 
flexibility to website developers. However, we argue that it 
is service providers’ job to understand the level of flexibility 
that  developers  want,  and  build  “integrated  circuits”  for 
them,  but  do  not  allow  developers  to  abuse  the  flexibility. 
Website  developers’  task  should  be  minimized:  they  only 
need 
the 
corresponding library from the service provider, and make a 
single library call to do the whole work. 
6. RELATED WORK 
integration  scenario, 
to  choose  an 
include 
Research  related  to  web  SSO  security  covers  many 
topics, including users’ misconceptions about OpenID [31], 
chances  for  phishing  attacks  [29],  and  various  privacy 
that 
to 
concerns [30][32]. Our work is focused on the type of SSO 
security 
the  purpose  of 
authentication – the attacker signing in as the victim user.  
totally  defeats 
flaws 
that 
The 
analysis 
protocol 
formalize 
community 
developed 
frameworks and tools to model and examine many security 
protocols.  Some  classic  approaches  and  tools  include 
Millen’s  model  [27],  the  NRL  Protocol  analyzer  [25]  and 
the BAN logic [9]. There are also specific studies about web 
SSO  protocols,  such  as  several  protocols  based  on  SAML 
(Security  Assertion  Markup  Language)  [28].  Groß’s  work 
attempted 
the  SAML  Single  Sign-on 
Browser/Artifact  Profile  [20].  It  found  three  protocol 
weaknesses  based  on  the  assumptions  of  an  attacker  being 
able to intercepting protocol traffic or spoofing DNS servers. 
Pfitzmann  and  Waidner  discovered  a  protocol  flaw  in  a 
protocol  called  Liberty-Enabled  Client  and  Proxy  Profile, 
which is also SAML-based. Hansen et al also used a static 
analysis approach to automatically analyze the SAML SSO 
protocol  [21].  In  2008,  Armando  et  al  formally  modeled 
SAML  2.0  Web  Browser  SSO  Profile,  and  used  an  LTL 
(Linear  Temporal  Logic)  model  checker  that  the  authors 
developed,  namely  SATMC,  to  discover  an  authentication 
flaw  [2].  The  practical  consequence  of  the  flaw  was 
significant because the SAML-based SSO for Google Apps 
was an instantiation of the vulnerable protocol, thus Google 
Apps suffered from the vulnerability. Bhargavan et al used 
an  automated  theorem  prover  to  prove  certain  security 
properties  of 
is 
complementary  to  protocol  verification  techniques  in  a 
number of aspects: (1) the primary motivation of our work 
is to do a “field study” about real SSO deployments, so our 
analyses starts with real systems, not documented protocols; 
(2)  the  key  output  of  our  analyses  include  semantics  of 
message 
(e.g., 
whitelisting),  important  system  assumptions  that  an  SSO 
scheme  relies  on  (e.g.,  same-domain  communication)  and 
how an RP consumes data from the IdP. A protocol verifier 
would need such analysis result as necessary input.  
InfoCard  protocol 
[4].  Our  work 
protections 
server-side 
elements, 
Research  papers  about  SSO  analysis  also  pointed  out 
another  type  of  vulnerabilities,  which  cause  an  opposite 
consequence, i.e., the victim user unknowingly signing in as 
the attacker. For example, Akhawe modeled WebAuth SSO 
in Alloy and used a model checker to find a flaw of this type 
[1]; in reference [3], Armando et al extended their previous 
model  described  in  [2]  and  discovered  such  a  flaw  in  the 
SAML-based SSO for Google Apps. 
In  Section  5.2,  we  summarized  the  similarity  between 
this SSO study with our earlier study about logic flaws on 
merchants’  integrations  of  cashier  services  [34].  The  two 
studies, however, differ in two aspects: (1) most logic flaws 
in  reference  [34]  were  identified  using  merchants’  source 
code;  (2)  reference  [34]  only  considered  the  situation  that 
the client is  malicious,  which is our scenario (A).  Another 
related  research  direction  is  black-box  security  testing  for 
web  systems.  For  example,  NoTamper  [6]  is  a  technique 
that tests if the client-side logic of a web app is duplicated 
on the server side, without access to the server source code. 
378
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:30 UTC from IEEE Xplore.  Restrictions apply. 
It  was  not  designed  to  find  logic  flaws  in  service 
integrations like SSO schemes. 
 Protocol  reverse  engineering  has  been  studied  for  a 
while,  e.g,  [11].  Different  from  the  prior  research  that 
focuses  on  recovering  the  message  format  of  an  unknown 
protocol, our aim is to identify the semantics of the HTTP 
fields in SSO BRMs and their relations. 
7. CONCLUSIONS 
In this paper, we report an extensive security study of 
commercial  web  SSO  systems.  The  study  shows  that 
security-critical  logic  flaws  pervasively  exist  in  these 
systems,  which  can  be  discovered  from  browser-relayed 
messages and practically exploited by a party without access 
to source code or other insider knowledge of these systems. 
We  elaborate  our  analysis  steps  performed  on  commercial 
systems and how they lead to discoveries. Every discovered 
flaw  allows  the  attacker  to  sign  in  as  the  victim.  The 
affected companies all acknowledged the importance of our 
findings, and expressed their gratitude in various ways.  
In  addition  to  those  reported,  we  are  discovering  and 
confirming  new  flaws  in  other  web  SSO  systems.  This 
suggests the seriousness of the overall situation. Clearly the 
scale  of  the  problem  is  beyond  what  we  can  cover  as  a 
single research team, so we wish this paper can be a call for 
a  collaborative  effort  of  the  SSO  community.  The  service 
that  we  will  launch  soon  at  http://sso-analysis.org  enables 
developers  and  security  analysts  to  conduct  investigations 
similar to what we did. Such a collaborative study hopefully 
helps  the  community  better  understand  security  challenges 
in web SSO deployments and identify suitable solutions.  
ACKNOWLEDGEMENT 
We  thank  our  shepherd  Alex  Halderman  for  valuable 
suggestions on the improvement of the paper. We also thank Zhou 
Li for pointing us to the Unpredictable Domain Communication of 
Adobe Flash, and Manuel Caballero and David Ross for referrer-
free posting examples.  We appreciate the comments from Martín 
Abadi,  Shaz  Qadeer,  Nik  Swamy  and  Helen  Wang  on  the  early 
draft of the paper, and the discussions with Cormac Herley and Yi-
Min Wang. Authors with Indiana University were supported in part 
by  the  NSF  Grants  CNS-1017782  and  CNS-1117106.  Rui  Wang 
was also supported in part by a Microsoft Research internship.  
REFERENCES 
[1]  Devdatta Akhawe, Adam Barth, Peifung Lam, John Mitchell, Dawn 
Song.  "Towards  a  Formal  Foundation  of  Web  Security,"  IEEE 
Computer Security Foundations Symposium, 2010 
[2]  Alessandro  Armando,  Roberto  Carbone,  Luca  Compagna,  Jorge 
Cuellar, Llanos Abad. "Formal Analysis of SAML 2.0 Web Browser 
Single  Sign-On:  Breaking  the  SAML-based  Single  Sign-On  for 
Google Apps," ACM FMSE, 2008 
[3]  Alessandro  Armando,  Roberto  Carbone,  Luca  Compagna,  Jorge 
Cuellar,  G.  Pellegrino,  A.  Sorniotti.  "From  Multiple  Credentials  to 
Browser-based  Single  Sign-On:  Are  We  More  Secure?"  IFIP 
Information Security Conference (SEC), 2011 
[4]  Karthikeyan Bhargavan, Cédric Fournet, Andrew D. Gordon, Nikhil 
Swamy. "Verified implementations of the information card federated 
identity-management protocol, ACM ASIACCS 2008. 
[5]  Adam Barth, Collin Jackson, and John C. Mitchell. “Robust Defenses 
for Cross-Site Request Forgery,” ACM CCS, 2008 
[6]  Prithvi  Bisht,  Timothy  Hinrichs,  Nazari  Skrupsky,  Radoslaw 
Bobrowicz  and  V.N.  Venkatakrishnan.  "NoTamper:  Automatically 
Detecting 
in  Web 
Applications," ACM CCS 2010 
Parameter  Tampering  Vulnerabilities 
[7]  Blue  Research.  "Consumer  Perceptions  of  Online  Registration  and 
Social Sign-In," http://janrain.com/consumer-research-social-signin 
[8]  Andrew  Bortz,  Adam  Barth,  and  Alexei  Czeskis.  “Origin  Cookies: 
Session Integrity for Web Applications,” W2SP 2011. 
[9]  Michael  Burrows,  Martín  Abadi,  and  Roger  Needham.  A  logic  of 
authentication. ACM Trans. Computer Systems 8, 1, 18-36. 1990. 
[10]  Hao  Chen,  David  Wagner  and  Drew  Dean.  "Setuid  demystified,"  
USENIX Security Symposium, San Francisco, CA, August 2002 
[11]  Weidong  Cui,  Jayanthkumar  Kannan,  Helen  J.  Wang.  "Discoverer: 
Automatic  Protocol  Reverse  Engineering  from  Network  Traces," 
USENIX Security Symposium 2007 
[12]  Facebook. "White hats," http://www.facebook.com/whitehat 
[13]  Facebook.  "OAuth  Dialog,"  http://developers.facebook.com/docs 
/reference/dialogs/oauth/ 
[14]  Facebook 
Developers. 
“Legacy 
Canvas 
Auth,” 
http://developers.facebook.com/docs/authentication/fb_sig/ 
[15]  Fiddler Web Debugger. http://www.fiddler2.com/fiddler2 
[16]  Firebug. http://getfirebug.com/ 
[17]  About Freelancer. http://www.freelancer.com/info/about.php 
[18]  Google.  "Security  Hall  of  Fame,"  http://www.google.com/about/ 
company/halloffame.html 
[19]  Google  Code.  "Federated  Login  for  Google  Account  Users," 
http://code.google.com/apis/accounts/docs/OpenID.html  
[20]  Thomas  Groß.  "Security  analysis  of  the  SAML  single  sign-on 
browser/artifact profile," ACSAC 2003 
[21]  S. M. Hansen, J. Skriver, and H. R. Nielson. "Using static analysis to 
validate the SAML single sign-on protocol," Workshop on Issues in 
the Theory of Security, 2005 
[22]  Brian 
Kissel. 
"OpenID 
2009 
Year 
in 
Review," 
http://openid.net/2009/12/16/openid-2009-year-in-review/ 
[23]  LocalConnection 
(in 
flash.net). 
  http://help.adobe.com/en_US 
/FlashPlatform/reference/actionscript/3/flash/net/LocalConnection.ht
ml?filter_flex=4.1&filter_flashplayer=10.1&filter_air=2 
[24]  Los Angeles Times. "The Sims Social bests FarmVille as the second-
http://latimesblogs.latimes.com/ 
largest 
entertainmentnewsbuzz/2011/09/sims-social-surpasses-farmville-as-
second-largest-facebook-game.html 
[25]  Catherine  Meadows.  "Language  Generation  and  Verification  in  the 
Facebook 
game," 
NRL Protocol Analyzer," Computer Security Foundations 1996. 
[26]  Microsoft. "INFO: Internet Explorer Does Not Send Referer Header 
in Unsecured Situations," http://support.microsoft.com/kb/178066 
[27]  Jonathan K. Millen. "The Interrogator Model," IEEE Symposium on 
Security and Privacy 1995. 
[28]  OASIS  Standard.  Assertions  and  Protocols  for  the  OASIS  Security 
Assertion Markup Language (SAML) V2.0, 2005. 
[29]  OpenID  Wiki. 
"OpenID  Phishing  Brainstorm,"  http://wiki. 
openid.net/w/page/12995216/OpenID_Phishing_Brainstorm 
in 
[30]  Birgit Pfitzmann and Michael Waidner. "Analysis of Liberty Single-
Sign-on with Enabled Clients," IEEE Internet Computing, 7(6) 2003. 
[31]  San-Tsai  Sun,  Eric  Pospisil,  Eric  Pospisil,  Ildar  Muslukhov,  Nuray 
Dindar,  Kirstie  Hawkey,  Konstantin Beznosov.  "What  Makes  Users 
Refuse  Web  Single  Sign-On?  An  Empirical  Investigation  of 
OpenID,"  Symposium On Usable Privacy and Security, 2011 
[32]  Manuel  Uruena  and  Christian  Busquiel.  "Analysis  of  a  Privacy 
the  OpenID  Authentication  Protocol,"  IEEE 
Vulnerability 
Multimedia Communications, Services and Security, 2010. 
[33]  Rui  Wang,  Shuo  Chen,  XiaoFeng  Wang.  “Signing  Me  onto  Your 
Accounts  through  Facebook  and  Google:  a  Traffic-Guided  Security 
Study  of  Commercially  Deployed  Single-Sign-On  Web  Services”. 
http://www.informatics.indiana.edu/xw7/papers/websso.pdf. 
Supporting materials: http://research.microsoft.com/~ruiwan/sso/supp 
[34]  Rui Wang, Shuo Chen, XiaoFeng Wang, and Shaz Qadeer. “How to 
Shop  for  Free  Online  –  Security  Analysis  of  Cashier-as-a-Service 
Based Web Stores,” IEEE Symposium on Security and Privacy, 2011 
http://en. 
[35]  Wikipedia, 
Transaction," 
Electronic 
"Secure 
wikipedia.org/wiki/Secure_Electronic_Transaction 
379
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:30 UTC from IEEE Xplore.  Restrictions apply.