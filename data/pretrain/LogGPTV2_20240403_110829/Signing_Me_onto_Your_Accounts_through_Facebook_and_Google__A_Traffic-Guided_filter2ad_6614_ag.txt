### Client Application and Adoption

The client application in question is "Windows CardSpace," previously known as InfoCard. Despite its potential, InfoCard did not achieve widespread adoption before it was retired. The Single Sign-On (SSO) schemes that have been widely adopted are those we analyzed in this study. These unsuccessful attempts highlight the clear deployment advantages of web-based SSO solutions. However, our research also indicates that the ease of deployment comes with significant security uncertainties.

### Mitigation and Simplification

To address these security concerns, a possible solution could be to develop a simplified web platform for running security schemes. This platform would still use HTML and JavaScript, but with highly restricted functionalities, allowing for more accurate modeling of the system's details. This approach aims to deliver security-critical services as "integrated circuits" rather than "individual electronic components."

### Service Integration

Currently, the APIs provided by service providers (e.g., Identity Providers (IdPs) and cashiers) are designed at a low level, requiring extensive integration into websites. This process is akin to wiring up many electronic components to create a circuit, which leaves ample room for errors. We propose that services should be provided as "integrated circuits." While individual components offer flexibility to developers, we argue that it is the responsibility of service providers to understand the desired level of flexibility and build integrated solutions. This would minimize the tasks of website developers, who would only need to call a single library function to perform the entire integration.

### Related Work

Research on web SSO security covers various topics, including user misconceptions about OpenID, phishing attack vulnerabilities, and privacy concerns. Our work focuses specifically on SSO security flaws that allow an attacker to sign in as a victim user, thereby completely defeating the purpose of authentication.

The security protocol community has developed frameworks and tools to model and analyze many security protocols. Classic approaches and tools include Millen’s model, the NRL Protocol Analyzer, and BAN logic. Specific studies on web SSO protocols, such as those based on SAML, have identified several weaknesses. For example, Groß’s work on the SAML Single Sign-on Browser/Artifact Profile found three protocol weaknesses based on assumptions of traffic interception or DNS spoofing. Pfitzmann and Waidner discovered a flaw in the Liberty-Enabled Client and Proxy Profile, and Hansen et al. used static analysis to examine the SAML SSO protocol. Armando et al. formally modeled the SAML 2.0 Web Browser SSO Profile and used an LTL model checker to discover an authentication flaw, which had significant practical consequences, particularly for Google Apps.

Our work complements protocol verification techniques in several ways:
1. Our primary motivation is to conduct a "field study" of real SSO deployments, starting with actual systems rather than documented protocols.
2. Our key outputs include message semantics (e.g., whitelisting), important system assumptions (e.g., same-domain communication), and how Relying Parties (RPs) consume data from IdPs. These results can serve as necessary inputs for protocol verifiers.

### Conclusions

In this paper, we report an extensive security study of commercial web SSO systems. Our findings reveal that security-critical logic flaws are pervasive in these systems and can be discovered and exploited without access to source code or insider knowledge. The affected companies acknowledged the importance of our findings and expressed gratitude in various ways.

We are continuously discovering and confirming new flaws in other web SSO systems, indicating the seriousness of the overall situation. Given the scale of the problem, we hope this paper will inspire a collaborative effort within the SSO community. We will soon launch a service at http://sso-analysis.org to enable developers and security analysts to conduct similar investigations, fostering a better understanding of SSO security challenges and identifying suitable solutions.

### Acknowledgements

We thank Alex Halderman for valuable suggestions on improving the paper. We also thank Zhou Li for pointing us to the Unpredictable Domain Communication of Adobe Flash, and Manuel Caballero and David Ross for referrer-free posting examples. We appreciate the comments from Martín Abadi, Shaz Qadeer, Nik Swamy, and Helen Wang on the early draft, and discussions with Cormac Herley and Yi-Min Wang. Authors from Indiana University were supported in part by NSF Grants CNS-1017782 and CNS-1117106. Rui Wang was also supported in part by a Microsoft Research internship.

### References

[References listed here, formatted as in the original text]