# Brahmastra: Driving Apps to Test the Security of Third-Party Components

## Authors
Ravi Bhoraskar, Microsoft Research and University of Washington; Seungyeop Han, University of Washington; Jinseong Jeon, University of Maryland, College Park; Tanzirul Azim, University of California, Riverside; Shuo Chen, Jaeyeon Jung, Suman Nath, and Rui Wang, Microsoft Research; David Wetherall, University of Washington

## Abstract
We introduce Brahmastra, an app automation tool designed to help app stores and security researchers test third-party components in mobile apps at runtime. The primary challenge is that call sites invoking third-party code are often deeply embedded within the app, making them inaccessible to traditional GUI testing tools. Our approach combines static analysis to construct a page transition graph and discover execution paths to invoke third-party code, with binary rewriting to efficiently "jump start" the third-party code by following these paths. Compared to state-of-the-art GUI testing tools, Brahmastra successfully analyzes third-party code in 2.7 times more apps and reduces test duration by a factor of 7. We apply Brahmastra to two use cases: 1) 175 out of 220 children's apps display ads that attempt to collect personal information, potentially violating the Children’s Online Privacy Protection Act (COPPA); and 2) 13 out of 200 apps with the Facebook SDK are vulnerable to a known access token attack.

## Introduction
Third-party libraries offer a convenient way for mobile application developers to integrate external services into their applications. For example, 95% of 114,000 popular Android applications contain at least one advertisement library [22]. Social media add-ons, such as Facebook Login, are also widely used to enhance user experience.

However, the use of third-party components is not without risks. If there are bugs in the library or in how it is used, the entire host application becomes vulnerable. This is particularly problematic because many third-party libraries are widely used, and any vulnerability can impact a large number of applications. Our interest in this topic was sparked by reports of misuse of popular SDKs provided by Facebook and Microsoft for authentication [30], and improper use of Android cryptography libraries [20].

In this paper, we present our solution to the problem of third-party component integration testing at scale. Our goal is to develop a tool that can test a large number of applications using the same third-party component for potential vulnerabilities, without human intervention. Simply testing the third-party library in isolation is insufficient, as vulnerabilities often arise from the interaction between the application and the third-party component. Therefore, our focus is on developing tools that enable testers to observe in-situ interactions between the third-party component and remote services in the context of a specific application at runtime.

## Background
### Android App Structure
An Android app is organized as a set of pages (activities) that users can interact with and navigate between. Each activity represents a type of page and may be initialized with different data, resulting in different activity instances. Each page contains various GUI elements (views), which can be associated with callback functions invoked when a user interacts with the view. Callback functions can instantiate new activities using intents, which encapsulate the description of a desired action and associated parameters.

### Automated Dynamic Analysis
Recent works have used automation tools, commonly called Monkeys, to automatically execute mobile apps and navigate through various states. Examples include PUMA [23], DECAF [25], AppsPlayground [26], A3E [14], and VanarSena [27]. These tools launch the app in a phone or emulator, emulate user interactions, and perform specific tasks on each page. However, they often fail to exercise the target third-party component, especially if it is deeply embedded within the app.

## Problem and Insights
Our goal is to develop the ability to automatically and systematically test a large set of mobile apps that embed a specific third-party component for potential vulnerabilities. Existing Monkeys, while effective at executing many code paths, often fail to reach the target third-party component due to several reasons:
1. **Timeout**: Monkeys can exhaust their time budget before reaching the target pages.
2. **Human Inputs**: Monkeys cannot handle pages requiring human inputs like login/password or complex gestures.
3. **Unidentified Elements**: Monkeys fail to explore clickable UI elements that are not visible or activated.
4. **Crashes**: Monkeys can exacerbate app crashes, limiting exploration.

Unlike existing Monkeys, our goal is to execute specific code paths to invoke methods of interest in the third-party library. We leverage the integration of third-party components at the activity level, allowing us to restrict our analysis to a smaller set of activities.

## Brahmastra: Our Solution
Brahmastra uses three techniques to significantly boost test hit rate and speed compared to traditional Monkeys:

### Static Path Pruning
Brahmastra identifies and considers only the "useful" paths that eventually invoke the target third-party methods, ignoring all other "useless" paths. This requires identifying useful paths statically before dynamic analysis, which poses challenges due to the asynchronous nature of Android apps.

### Dynamic Node Pruning
Brahmastra opportunistically starts from an activity in the middle of the path. If successful, it can ignore all preceding activities. For example, in Figure 1, Brahmastra can directly start activity A3, leading to the target activity A4. This technique requires enabling jump-starting of arbitrary activities and handling incorrect intent parameters.

### Self-Execution of App
Brahmastra rewrites the app binary to automatically call methods that cause activity transitions. This method can discover activity-transitioning callbacks even if they are invisible in the current screen.

## Contributions
1. **Brahmastra**: A hybrid approach combining static and dynamic analysis to solve the third-party component integration testing problem for Android apps. We discuss our approach and key techniques in §4 and their implementation in §5. We show in §6 that our techniques work for a large fraction of apps while existing tools often fail.
2. **Empirical Study**: An empirical study of two security and privacy issues for popular third-party components. We find potential violations of child-safety laws by ads displayed in kids' apps and several popular Android apps vulnerable to the Facebook access token attack. We have made the static analysis part of Brahmastra available at https://github.com/plum-umd/redexer.

## Conclusion
Brahmastra provides a robust and efficient solution for testing third-party components in mobile apps. By leveraging static and dynamic analysis, it significantly improves the coverage and speed of testing, enabling app store operators, component developers, and security researchers to effectively assess and mitigate vulnerabilities.