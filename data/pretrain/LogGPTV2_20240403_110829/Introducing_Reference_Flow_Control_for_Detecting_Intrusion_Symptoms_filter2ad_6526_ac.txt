### 3. Reference Flow Control Example

Let \( \Omega_3 \) be the operation that creates a symbolic link, where:
- \( uid: bob \)
- \( symref_s \) denotes the read, write, and execute references to the file `/home/bob/mydoc.ps` in the reference bag `uid:bob`.

By creating the symbolic link, \( \Omega_3 \) writes to the `/home/bob` directory. The operation \( \Omega_4 \) consists of two steps:
1. **Step 1 (Ω4.1):** Reads the `/home/bob` directory and searches for the `mydoc.ps` file.
2. **Step 2 (Ω4.2):** Opens the `mydoc.ps` file.

#### Step 1 (Ω4.1)
- By definition, \( \Omega_3 \Rightarrow \Omega4.1 \).
- According to the reference propagation rule:
  \[
  ref4.1 = Ref(\Omega_{rs}^{4.1}) = ref3 \cup \{R_{uid:bob}(fd.read)\}
  \]
  where \( fd \) is a file descriptor to the `/home/bob` directory.

#### Step 2 (Ω4.2)
- Trivially, \( \Omega4.1 \Rightarrow \Omega4.2 \).
- The semantics of a symbolic link in Unix state that a read operation on the symlink is permitted if it is also permitted on the file the link points to.
- Therefore, opening `/home/bob/mydoc.ps` for reading requires both:
  - \( RS(/home/bob/mydoc.ps.openread) \)
  - \( RS(/etc/shadow.openread) \)

However, \( RS(/etc/shadow.openread) \notin ref4.1 \). Additionally, \( \Omega4.2 \) cannot be considered an independent concurrent operation, as \( rs \) does not contain the required references to read `/home/bob/mydoc.ps`. The operation would be possible with \( \Omega_{ref4.1 \cup rs} \), but this is by definition an intrusion symptom.

### 4. OpenSSH Vulnerability

This vulnerability was published in November 2001 [13]. It is a well-known attack that originally affected the telnet daemon, which was patched. Recently, it was discovered that a similar technique could be used against OpenSSH to achieve the same symptom (a regular user getting a root shell).

#### Attack Mechanism
The OpenSSH daemon allows users to define their own environment variables on login. If configured, this can be exploited to introduce a Trojan horse that prevents the user’s login shell from being started with the correct `uid`. In practice, the `LD_PRELOAD` variable is used to load an attacker-supplied shared library (e.g., `libroot.so`) that overrides the `setuid` system call, effectively setting the session's `uid` to 0.

The attack involves the following steps:
1. **Ω1:** Create and install `libroot.so`.
2. Log in as a regular user.
3. **Ω2:** Load `libroot.so`.
4. **Ω3:** Set the session’s `uid` to 0.
5. Start a root shell.

- Clearly, \( \Omega1 \Rightarrow \Omega2 \).
- The `libroot.so` file requires a buffer that is written by \( \Omega2 \) and read by \( \Omega3 \). Memory buffer access monitoring is needed to establish that \( \Omega3 \) requires a read reference to this buffer.
- The only reference to allow reading this buffer is \( R_{uid:bob}(libroot.so.read) \), resulting from \( \Omega2 \).
- Additionally, \( \Omega3 \) requires \( R_{setuid:root}(setuid.root) \) to perform the actual `setuid` call.
- Since these requirements cannot be met within the same reference bag, \( \Omega3 \) is an intrusion symptom.

### 4.3 Discussion

We have described how two different, realistic attacks can be detected using the proposed model. In the first example, any race-condition attack involving symbolic links can be detected similarly. The reference propagation rules restrict the usage of symbolic links, requiring them to point to objects accessible within the same domain. This behavior, if implemented in Unix, would prevent such attacks.

In the OpenSSH example, reference propagation forbids using a shared library to overload operations in another operation domain. While the model effectively prevents the attack, such a restriction on shared libraries might be too strong for practical use. Weaker reference propagation rules for dynamic library function calls should be explored.

The model appears capable of detecting various "intrusions by delegation" given a security policy specification, providing a policy-based intrusion detector. No specific knowledge of program behavior or attack scenarios is required for policy definition.

### 5. Related Work

The proposed approach belongs to the EM class of security policy enforcement mechanisms, as defined by F. B. Schneider [14]. Our implementation uses causal dependency relations to detect illegal step sequences. The model is suitable for cases where intrusion goals are well-defined, but the methods to achieve them are unknown or hard to define.

Certain race-condition attacks can be detected by the noninterference-based intrusion detection model proposed by C. Ko and T. Redmond [9]. However, our model relies on weaker assumptions about system calls and is more fine-grained, not considering system calls as atomic operations.

Research in information flow control is active, and robust formalisms exist [15,16]. These may be useful for static security policy validation. Applications of information flow for access control have been proposed [17,18,19], and we will explore how reference flow control can implement such policies on general-purpose operating systems. However, real information flow control without static program analysis cannot detect hidden channel exploits.

### 6. Conclusion

We have presented an approach to detect intrusion symptoms by controlling the flow of references. The proposed approach can detect the same symptom achieved in various scenarios, even those unknown at the time the security policy is defined. Controlling reference flow by observing executed system operations is straightforward.

We are currently experimenting with a reference flow simulator using actual execution traces and plan to develop a runtime implementation. Future work includes addressing distributed intrusion symptoms, which would require dealing with remote objects through "distant references" and distant reference authentication.

### References

1. J. Allen, A. Christie, W. Fithen, J. McHugh, J. Pickel, and E. Stoner. State of the practice of intrusion detection technologies. Technical Report SEI-99TR-028, CMU/SEI, 2000.
2. John McHugh. Intrusion and intrusion detection. International Journal of Information Security, July 2001.
3. D. Schnackenberg, K. Djahandari, and D. Sterne. Infrastructure for intrusion detection and response. In Proceedings of the DARPA Information Survivability Conference and Exposition (DISCEX’00), 2000.
4. Frédéric Cuppens. Managing alerts in a multi-intrusion detection environment. In Proceedings of the 17th Annual Computer Security Applications Conference (ACSAC 2001), December 2001.
5. R. P. Goldman, W. Heimerdinger, S. A. Harp, C. W. Geib, V. Thomas, and R. L. Carter. Information modeling for intrusion report aggregation. In Proceedings of the DARPA Information Survivability Conference and Exposition, June 2001.
6. Frédéric Cuppens and Alexandre Miège. Alert correlation in a cooperative intrusion detection framework. In Proceedings of the IEEE Symposium on Security and Privacy, 2002.
7. Benjamin Morin, Ludovic Mé, Hervé Debar, and Mireille Ducassé. M2D2: A formal data model for IDS alert correlation. In Proceedings of the Fifth International Symposium on the Recent Advances in Intrusion Detection (RAID’2002), 2002.
8. Prem Uppuluri and R. Sekar. Experiences with specification-based intrusion detection. In W. Lee, L. Mé, and A. Wespi, editors, Proceedings of the Fourth International Symposium on the Recent Advances in Intrusion Detection (RAID’2001), number 2212 in LNCS, pages 172–189, October 2001.
9. Calvin Ko and Timothy Redmond. Noninterference and intrusion detection. In Proceedings of the IEEE Symposium on Security and Privacy, 2002.
10. Daniel Hagimont, Jacques Mossiere, Xavier Rousset de Pina, and F. Saunier. Hidden software capabilities. In International Conference on Distributed Computing Systems, pages 282–289, 1996.
11. David F.C. Brewer and Michael J. Nash. The Chinese Wall security policy. In Proceedings of the IEEE Symposium on Research in Security and Privacy, pages 206–214. IEEE Computer Society Press, May 1989.
12. CMU CERT/CC. CA-1995-02: Vulnerabilities in /bin/mail. http://www.cert.org/advisories/CA-1995-02.html, January 26, 1995.
13. CMU CERT/CC. VU#40327: OpenSSH uselogin option allows remote execution of commands as root. http://www.kb.cert.org/vuls/id/40327, November 2001.
14. Fred B. Schneider. Enforceable security policies. Information and System Security, 3(1):30–50, 2000.
15. John Rushby. Noninterference, transitivity, and channel-control security policies. Technical Report CSL-92-02, SRI, December 1992.
16. J. McLean. A general theory of composition for trace sets closed under selective interleaving functions. In Proceedings of the IEEE Symposium on Research in Security and Privacy, May 1994.
17. E. Ferrari, P. Samarati, E. Bertino, and S. Jajodia. Providing flexibility in information flow control for object-oriented systems. In Proceedings of the IEEE Symposium on Security and Privacy, pages 130–140, 1997.
18. H. Mantel and A. Sabelfeld. A generic approach to the security of multi-threaded programs. In Proceedings of the 13th IEEE Computer Security Foundations Workshop, pages 200–214, June 2001.
19. Steve Zdancewic, Lantian Zheng, Nathaniel Nystrom, and Andrew C. Myers. Untrusted hosts and confidentiality: Secure program partitioning. In Proceedings of the 18th ACM Symposium on Operating Systems Principles, 2001.