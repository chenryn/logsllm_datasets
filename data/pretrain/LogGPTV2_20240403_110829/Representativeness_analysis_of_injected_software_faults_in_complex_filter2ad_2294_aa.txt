# Title: Representativeness Analysis of Injected Software Faults in Complex Software

## Authors:
- Roberto Natella
- Domenico Cotroneo
- João Durães
- Henrique Madeira

### Affiliations:
- **DIS, Università degli Studi di Napoli Federico II, Via Claudio 21, 80125, Naples, Italy**
  - Roberto Natella: roberto.natella@unina.it
  - Domenico Cotroneo: cotroneo@unina.it
- **CISUC, University of Coimbra, 3030-290 Coimbra, Portugal**
  - João Durães: jduraes@dei.uc.pt
  - Henrique Madeira: henrique@dei.uc.pt

## Abstract
Despite the existence of several techniques for emulating software faults, there are still open issues regarding the representativeness of these faults. This is a crucial aspect, as non-representative faults can lead to misleading results in fault injection studies. In this paper, we investigate the representativeness of injected software faults and propose criteria to improve it. We use the G-SWFIT technique to inject faults into a real-world DBMS, running over 40,000 tests and 2 million executions. Our analysis reveals that a significant portion (15%) of the injected faults are not realistically representative. By applying our proposed criteria, we demonstrate an improvement in the representativeness of the fault load.

## 1. Introduction
Software Fault Injection (SFI) has emerged as a valuable method for assessing the impact of software faults on system dependability and evaluating fault tolerance mechanisms. A key property of SFI is the representativeness of the injected faults, meaning they should emulate realistic faults. However, achieving this representativeness is challenging due to the complex nature of software and the difficulty in reproducing real-world fault conditions. This paper aims to address this issue by proposing criteria to select more representative faults and evaluating their effectiveness in a real-world case study using the MySQL DBMS.

## 2. Related Work
The relationship between testing and fault injection has been explored in the past, but from different perspectives. Previous work focused on using fault injection to evaluate the effectiveness of test cases. The problem of software fault representativeness was first addressed in [7], which proposed rules for injecting faults based on field data. However, these rules are highly dependent on the target system and the availability of field data, making them difficult to apply in practice. Subsequent studies, such as [10], have shown that a unique fault distribution is common across programs and proposed techniques like G-SWFIT to emulate software faults at the executable code level.

## 3. Problem and Methodological Approach
To address the issue of fault representativeness, we define a set of criteria to guide the selection of faults. These criteria are based on the complexity of the target components and the activation conditions of the faults. We use the G-SWFIT technique to inject faults into the MySQL DBMS and analyze the results to evaluate the representativeness of the fault load. Our approach involves running an extensive SFI campaign with over 40,000 tests and 2 million executions to gather data for analysis.

## 4. Case Study and Results
In our case study, we used the G-SWFIT technique to inject faults into the MySQL DBMS. We analyzed the fault load and found that a significant portion (15%) of the injected faults were easily detected and thus not representative of real-world faults. By applying our proposed criteria, we were able to reduce the percentage of non-representative faults, thereby improving the overall representativeness of the fault load. Our results confirm that using these criteria can help in selecting more representative faults for SFI.

## 5. Discussion
Our findings highlight the importance of carefully selecting target components and considering the activation conditions of faults. The extent of non-representative faults varies among components, and our criteria help in identifying and excluding these faults. This, in turn, leads to a more accurate assessment of system dependability and fault tolerance. Future work could focus on further refining these criteria and applying them to other systems and fault injection techniques.

## 6. Conclusion
This paper presents a method for improving the representativeness of injected software faults in SFI studies. By defining and applying criteria based on the complexity of target components and fault activation conditions, we were able to reduce the number of non-representative faults in the fault load. Our results demonstrate the effectiveness of this approach and its potential for enhancing the accuracy of dependability evaluations.

---

**Note:** The references and additional details in the original text have been omitted for brevity. Please ensure to include all relevant references and additional details in the final version.