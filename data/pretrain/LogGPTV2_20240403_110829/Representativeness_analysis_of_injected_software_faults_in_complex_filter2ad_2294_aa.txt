title:Representativeness analysis of injected software faults in complex
software
author:Roberto Natella and
Domenico Cotroneo and
João Durães and
Henrique Madeira
201O IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Representativeness 
Analysis 
of Injected 
Software 
Faults in Complex Software 
Roberto Natellat, 
Domenico Cotroneot, 
Joao Duraes+, Henrique Madeira+ 
tDIS, Universita 
degli Studi di Napoli Federico II, Via Claudio 21, 80125, Naples, Italy 
+CISUC, University 
{roberto.natella,  cotroneo}@unina.it, 
of Coimbra, 3030-290, 
{jduraes, 
Coimbra, Portugal 
henri que }@dei.uc.pt 
Abstract 
Despite of the existence 
of several techniques 
for emu­
code, and with the system as a whole. Nevertheless, 
play an important 
they are a well-known 
they 
role in the field of fault injection, 
since 
[12]. 
major cause of system outages 
faults can be improved regarding 
the 
there are still open issues regarding 
faults, 
lating software 
representativeness 
of the faults 
tant aspect, 
not considered 
non-trivial 
condition 
activation 
which causes them to elude testing 
operation. 
In this paper, we investigate 
by existing 
fault patterns 
fault patterns 
techniques, 
of real faults, 
being injected. 
model of software 
An impor­
is the 
Past efforts in this research 
(trigger) 
and remain hidden until 
the use of 
it can be 
realistic 
injected 
area led to significant 
steps 
faults [7, 10]; 
that can be used to perturb 
the 
way. Nevertheless, 
may not be sufficient; 
a set of generic 
from a faultload. 
faults 
because many other factors 
For instance, 
crash of the system, 
towards a representative 
they specify 
target system in a controlled 
representative 
argued that they alone do not guarantee 
how the representativeness 
faults, 
representativeness. 
cause the immediate 
submitted 
goal of SF! (i.e.,fault acceleration), 
(i.e., trigger) 
condition 
and thus undesirable 
trivially 
In the dependability 
distorted 
to wrong design or selection 
system which is apparently 
when in fact it might not be the case). Thus, it is important 
to select 
in the program affect 
fault could 
of the 
regardless 
failures 
is the 
is not representative 
in SF!, since a programmer 
software 
and 2 mil­
with respect 
decisions 
more dependable 
evaluation 
of the perceived 
find and fix the fault before the system release. 
share 
Our proposed 
that a non-negligible 
representative 
software 
a too simple activation 
system dependability 
of non-elusive 
in a faultload. 
(e.g., selecting 
an injected 
of real faults 
scenario, 
this can lead to a 
than other, 
and 
one 
Although 
inputs. 
causing 
picture 
faults in 
faults 
faults 
would 
elude testing. 
software 
of injected 
representativeness 
criteria 
of triggers, 
to select 
faults 
We used the G-SWFIT technique 
representative 
by proposing 
to inject 
in over 40 thousands 
in a DBMS, resulting 
lion runs of a real test suite. 
to their triggers, 
( I 5%) would not realistically 
criteria 
the percentage 
the faultload, 
and concluded 
decreased 
We analyzedfaults 
improving its representativeness. 
1 Introduction 
faults, 
that SF! need to 
mechanisms 
[2]. A key property 
faults experienced 
mean for assessing 
Software Fault Injection 
is the representativeness 
of injected 
that is, 
should represent  realistic 
(SF!) has emerged in the last 
the impact 
decades as a valuable 
of software faults on a system and for evaluating 
fault 
tolerance 
satisfy 
the faultload 
in the field [9,21]. Only the appropriate 
to be injected 
ability 
metrics 
dependability 
fault tolerance 
of faults. 
property 
to characterize 
related 
by the strong interaction 
in the presence 
benchmarking), 
with respect 
Unfortunately, 
to attain for software 
and to emulate since their root causes are 
representativeness 
is a very hard 
to human design errors [3]; this issue is exacerbated 
with the surrounding 
can assure an accurate 
They are difficult 
choice of faults 
evaluation 
of the faults 
of depend­
faults. 
of faults (as in the case of 
and an efficient  testing  of 
to the extremely  large  space 
In order to put some light on this problem, 
this paper 
It is worth mentioning 
that works such as [7, 10], al­
on real software faults, 
could 
conditions 
of the software faults. 
were based on the analysis 
of how 
bugs found in the field and understand 
in order to infer the most 
what (in term 
though based on field studies 
not capture 
the activation 
In fact, these studies 
real faults have been corrected, 
typical 
of code pattern) 
production 
solely on its defining code patterns 
realism 
whether the injected 
of the triggering 
makes a typical 
fault. 
faults 
conditions, 
of most frequent types of software 
Nevertheless, 
the re­
based 
faults 
cannot guarantee 
thus cannot guarantee 
the 
are representative 
or not. 
how the representativeness 
by means of a set of criteria 
investigates 
can be improved, 
representative 
extent of the issue and the effectiveness 
criteria 
faults from a faultload. 
in a real-world 
We evaluate 
of the proposed 
case study, using an existing 
of injected 
faults 
for selecting 
the 
SF! 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
437 
DSN 2010: Natella et al. 
conditions. 
a non-negligible 
or 
faults 
by the test 
injected 
results, 
features 
these faults. 
we observed 
to 
From 
can be 
we 
In this respect, 
biases the results 
in the faultload 
under realistic 
fault elusiveness 
of an experimental 
of the test suite used by MySQL developers 
faults, 
to characterize 
as they would most 
by test cases. Since including 
G-SWFIT (or any other SFI technique) 
by discarding 
to dependability evaluation 
these 
40 thousands 
advantage 
analyze 
the experimental 
share of faults (15%) that are easily detected 
suite. Such faults cannot be viewed as representative 
interesting 
surely be identified 
faults 
campaign, 
improved 
deeply analyze the injected 
general 
that the choice of target components 
percentage 
the extent of these faults varies among components. 
Therefore, 
complexity 
ponents in which representative 
our results 
percentage 
In section 
we describe 
approach 
case study and the results 
5 discusses 
Section 
decreases 
in the faultload. 
work. In section 
confirm that using these criteria 
of non-elusive 
we defined a set of criteria, 
metrics, 
affects the 
faults in the faultload, 
2, we discuss 
the research 
adopted in this paper. Section 4 discusses 
faults can be injected; 
the use of complexity 
from the SFI campaign. 
to guide the selection 
them. The analysis 
based on software 
of non-elusive 
in order to draw some 
6 concludes 
to guide SFI. 
actually 
the paper. 
of target com­
reveals 
Section 
because 
metrics 
related 
faults 
the 
the 
3, 
problem and the methodological 
that work used a representative 
faults in a representative 
manner, this approach 
workload to 
because real faults are in the 
in order to aid system administrators; 
of the target. 
to evaluate 
to operator 
and 
in 
is essential 
to identify 
in [21] requires 
that 
at given times after the system reaches 
realistic 
conditions; 
by existing 
SFI 
it is still an open issue to reproduce 
software 
with respect 
is proposed, 
performance 
(e.g., throughput, 
execution 
is proposed 
estimate 
degradation 
are needed to obtain a realistic 
faultload 
The benchmark 
at run-time 
the activation 
for web servers 
to both performance 
dependability 
with respect 
faults 
(e.g., the expected 
in operation), 
faults are injected 
order to reproduce 
although 
exercise 
is not fully representative, 
system before and during the entire 
In [21], a dependability 
benchmark 
different 
DBMS configurations 
software faults, 
this case, a representative 
the best configuration. 
faults are injected 
a "steady 
however, 
techniques, 
fault activation 
device drivers 
modes with respect 
feedback 
the best as to be included 
specific requirements. 
are activated 
contrast 
startup 
account the fault trigger 
dependability  assessment. 
adopted for risk assessment, 
the distribution 
the representativeness 
affecting 
to different 
to the user, stability), 
of triggers 
in risk estimates. 
state", 
since fault triggers 
into a system, 
However, several 
to field data 
are a small part (3.4%); therefore, 
in a fully representative 
is adopted to classify 
in order to reproduce 
are neglected 
the confidence 
of faults 
way. In [8], SFI in 
3 ass and their failure 
scales (i.e., availability, 
to enable the user to choose 
according 
to his 
faults (45.16%) 
during the as boot phase in [8], which are in 
during 
[7,20], in which failures 
studies 
not taking into 
can have a significant 
In [17], complexity 
impact on 
metrics 
were 
and in particular 
to estimate 
across components; 
nevertheless, 
is still neglected, 
thus 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Fault Injection 
(G-SWFIT, Generic SoftWare 
technique 
Technique [10]), and a complex and widely used open­
source system (the MySQL DBMS). We analyze injected 
faults according 
and remain hidden (we call this property 
faults 
elude testing 
in the field, which SFI aims to emulate, 
activities 
elusiveness), 
and go with the deployed 
to elude testing 
to their ability 
experienced 
[20]. 
as 
to assess a set of metrics 
related 
response 
time) and 
(e.g., percentage 
operations), 
to software faults in the as. Representative 
of erroneous 
of measures 
that may occur 
We performed 
an extensive 
product 
SFI campaign, 
and 2 million 
based on over 
runs. We took 
and to make systems comparable. 
In [9] 
in 
in the binary program, 
of faults 
during operation; 
2 Related work 
in terms of fault representativeness. 
to evaluate 
a fault 
The relationship 
between testing 
and fault injection 
has 
in the past, but from an opposite 
perspective 
technique 
been explored 
than this work. Here, we adopt testing 
injection 
Past work focused on fault injection 
cases (in the hypothesis 
against 
mutation 
mutation 
forecasting 
injected 
faults, 
program mutations 
There are several 
mutants, 
testing 
analysis 
not necessarily 
examples 
for generating 
test 
that, if a test case is effective 
it will be able to detect real faults), 
[13], and comparing 
testing 
i.e., 
i.e., 
strategies, 
[1]. These techniques 
do not aim at fault 
or fault removal in fault tolerant 
systems, 
thus 
representative, 
are simple 
to assess the effectiveness 
of tests. 
of dependability 
research 
The problem of software 
fault representativeness 
was 
a set of 
software 
of errors that emulate 
for the first time in [7]. It proposed 
addressed 
rules for the injection 
based on field data. However, these emulation 
dependent 
of the target system, 
makes the technique 
not totally 
on the availability 
which is normally 
very difficult to apply in practice, 
of field data on real faults 
impossible. 
not the case. This 
rules are 
faults, 
if 
Following 
studies evaluated 
existing 
techniques 
for 
such as SWIFI and robustness 
techniques 
that existing 
faults, 
software 
and demonstrated 
for this purpose. 
emulating 
testing 
[14-16], 
are not suitable 
the study in [10] demonstrated 
tion is common among several 
applicable, 
faults 
at the executable 
and proposed 
To tackle these limitations, 
that a unique fault distribu­
programs 
and thus generally 
emulating 
G-SWFIT for precisely 
code. This technique 
emulates 
the 
works in the literature 
software faults 
is crucial. 
of 
In [9], a dependability 
in which the representativeness 
benchmark 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
438 
DSN 2010: Natella et al. 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
regardless 
of the way the faults 
will manifest 
themselves. 
Table 1. Most common fault types (from [10]). 
Fault types Description 
MIFS 
Missing "If(cond) { statements
Missing function 
Missing "AND EXPR" I "OR EXPR" in expression 
used as branch condition 
call 
}" 
MFC 
MLC 
MIA 
Missing "If(cond)" 
surrounding 
statements 
MLPA 
Missing small and localized 
part of the algorithm 
MVAE 
WLEC 
Missing variable 
assignment 
using an expression 
Wrong logical 
expression 
used as branch condition 
WVAV 
Wrong value assigned to variable 
MVI 
MVAV 