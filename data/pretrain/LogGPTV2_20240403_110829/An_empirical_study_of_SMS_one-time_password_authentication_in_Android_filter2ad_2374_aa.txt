title:An empirical study of SMS one-time password authentication in Android
apps
author:Siqi Ma and
Runhan Feng and
Juanru Li and
Yang Liu and
Surya Nepal and
Diethelm Ostry and
Elisa Bertino and
Robert H. Deng and
Zhuo Ma and
Sanjay Jha
An Empirical Study of SMS One-Time Password
Authentication in Android Apps
Siqi Ma
CSIRO
PI:EMAIL
Runhan Feng, Juanru Li
Shanghai Jiao Tong University
{fengrunhan,jarod}@sjtu.edu.cn
Surya Nepal, Diethelm
Ostry
CSIRO
{surya.nepal,diet.ostry}@csiro.au
Elisa Bertino
Purdue University
PI:EMAIL
Yang Liu
Xidian University
PI:EMAIL
Robert H. Deng
Singapore Management University
PI:EMAIL
Zhuo Ma
Xidian University
PI:EMAIL
Sanjay Jha
University of New South Wales
PI:EMAIL
ABSTRACT
A great quantity of user passwords nowadays has been
leaked through security breaches of user accounts. To en-
hance the security of the Password Authentication Protocol
(PAP) in such circumstance, Android app developers often
implement a complementary One-Time Password (OTP) au-
thentication by utilizing the short message service (SMS).
Unfortunately, SMS is not specially designed as a secure ser-
vice and thus an SMS One-Time Password is vulnerable to
many attacks. To check whether a wide variety of currently
used SMS OTP authentication protocols in Android apps
are properly implemented, this paper presents an empiri-
cal study against them. We first derive a set of rules from
RFC documents as the guide to implement secure SMS OTP
authentication protocol. Then we implement an automated
analysis system, AUTH-EYE, to check whether a real-world
OTP authentication scheme violates any of these rules. With-
out accessing server source code, AUTH-EYE executes An-
droid apps to trigger the OTP-relevant functionalities and
then analyzes the OTP implementations including those pro-
prietary ones. By only analyzing SMS responses, AUTH-EYE
is able to assess the conformance of those implementations
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for profit or commercial advantage and that copies bear
this notice and the full citation on the first page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior specific permission and/or a fee. Request
permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359828
to our recommended rules and identify the potentially inse-
cure apps. In our empirical study, AUTH-EYE analyzed 3,303
popular Android apps and found that 544 of them adopt
SMS OTP authentication. The further analysis of AUTH-EYE
demonstrated a far-from-optimistic status: the implementa-
tions of 536 (98.5%) out of the 544 apps violate at least one
of our defined rules. The results indicate that Android app
developers should seriously consider our discussed security
rules and violations so as to implement SMS OTP properly.
CCS CONCEPTS
• Security and privacy → Software security engineer-
ing; Multi-factor authentication; Software reverse engineer-
ing;
KEYWORDS
Authentication Protocol; Mobile Application Security; One-
Time Password Authentication; Vulnerability Detection
ACM Reference Format:
Siqi Ma, Runhan Feng, Juanru Li, Yang Liu, Surya Nepal, Diethelm
Ostry, Elisa Bertino, Robert H. Deng, Zhuo Ma, and Sanjay Jha. 2019.
An Empirical Study of SMS One-Time Password Authentication
in Android Apps. In 2019 Annual Computer Security Applications
Conference (ACSAC ’19), December 9–13, 2019, San Juan, PR, USA.
ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3359789.
3359828
1 INTRODUCTION
Many Android apps commonly use password authentica-
tion protocols to verify user identity (i.e., authenticating the
user with the combination of the username and a static pass-
word [29]). However, in recent years, many security breaches
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Siqi et al.
led to large-scale password leakage1. Moreover, users usually
choose weak passwords (e.g., the infamous “123456”) because
a secure password is often too complex to remember. Because
of such issues, a single password authentication becomes
vulnerable to attacks such as brute force or dictionary based
search, and thus is not suitable for user login protection.
To address the above security issues, one-time password
(OTP, also known as dynamic password) authentication is
used. Referred to as two-factor authentication, the enhanced
validation requires the user to provide both a static password
and a dynamic OTP. The OTP here is used to protect valida-
tion systems against typical attacks because attackers must
determine and consume each OTP before the legitimate user
can do so for each authentication session. Typically, an OTP
is generated through a security token or retrieved from the
server via a secure channel. For example, Google and Apple
use both static passwords set by users and dynamic pass-
words generated by mobile authenticators (e.g., the Google
Authenticator [20]). Another case is the CITI Bank app, which
requires both the static password and an additional dynamic
password generated by a portable security token [5, 21].
Designing a secure OTP authentication protocol is, how-
ever, challenging and error-prone [22]. The security of OTP
authentication is regulated by a number of RFC documents
and a secure OTP authentication must satisfy several security
requirements. A crucial requirement is how to generate and
deliver the OTP securely. For an Android app, it is often too
heavyweight and inconvenient to deploy a portable security
token or a mobile authenticator. Therefore, generating and
transferring OTP through the short message service (SMS)
becomes the most prevalent implementation2.
We observed that although several techniques have been
proposed to analyze designs and implementations of tradi-
tional password authentication in Android apps [6, 30, 48],
seldom studies considered SMS OTP authentications and
barely analyzed the implementation security of them. In
this paper, we focus on security requirements of the SMS
OTP authentication protocol (hereinafter, we refer it as OTP
authentication protocol) and conduct an empirical evalu-
ation of the security of user validation systems which im-
plement OTP authentication protocols. The purpose of our
study is two-fold: (1) investigating the OTP authentication
protocol in the Android ecosystem, and (2) identifying apps
which implement vulnerable OTP authentication. We focus
on Android apps because Android is the most widely used
mobile operating system [8] and a large number of Android
apps adopt OTP authentications.
1Massive breach leaks 773 million email addresses and 21 million
passwords https://www.cnet.com/news/massive-breach-leaks-773-million-
emails-21-million-passwords/
2https://www.quora.com/Why-do-companies-use-SMS-and-OTP-to-
verify-the-mobile-number-doesnt-one-suffice
Our goal is to check how well an OTP implementation
(including the server side and the app side) complies with
a set of OTP authentication protocol rules (hereinafter, it is
referred to as OTP rules), which we derive from the best
practices outlined in a number of RFCs 3. Since these rules
are recommended as the best practices for implement se-
cure OTP protocols, we propose a novel analysis system,
AUTH-EYE, which determines whether OTP implementations
violate our defined OTP rules. AUTH-EYE locates and exe-
cutes login via an app to trigger the relevant functionalities
in server’s validation system and then examines server be-
haviours (i.e., server requests and responses). Unlike previ-
ous code-based approaches using semantic executions and
code dependencies [49, 52], AUTH-EYE only relies on limited
app code information (i.e., class names and function names).
Moreover, since source code of remote servers is often not
available, AUTH-EYE treats each remote server as a black box
and thus only checks its authentication system by analyzing
the server responses.
We applied AUTH-EYE to assess 3,303 popular Android
apps, collected from the top 2 Android app markets: Google
Play and Tencent marketplaces. We observed that there are
three types of login schemes, only password authentication,
only OTP authentication, and two-factor authentication with
both password authentication and OTP authentication. Since
we only focus on OTP authentication in this paper, AUTH-EYE
found 544 apps implemented OTP authentication protocols
in total. For the apps with two-factor authentication, we man-
ually registered an account and filled in the corresponding
username and password in each app. Surprisingly, AUTH-EYE
detected that OTP authentication protocols in 536 (98.6%) out
of the 544 apps violate at least one of our defined OTP rules,
and only eight (1.4%) apps implement their OTP authenti-
cation protocols with all OTP rules satisfied. This indicates
that developers may not be aware of the OTP security recom-
mendations outlined in the RFCs, and AUTH-EYE can be used
to help them implement more secure OTP authentication
protocols.
Contributions: Our contributions are:
• We derived a set of OTP rules that developers should
follow to implement secure OTP authentication proto-
col. Those rules are summarized from RFC documents
and then used to check implementations of OTP au-
thentication protocols in remote servers.
• We proposed a novel analysis system, AUTH-EYE, to
automatically evaluate protocol implementations. In
particular, AUTH-EYE conducts an efficient code anal-
ysis to locate login Activities in apps, requiring only
3Protocols defined in RFC: RFC 4226 [35], RFC 2289 [22], RFC 6238 [36],
RFC 1750 [14] and RFC 4086 [15]
An Empirical Study of SMS OTP Authentication in Android Apps
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
limited semantic information. It also examines the re-
mote validation system by only analyzing the network
(and SMS) requests and responses rather than source
code on server sides.
• We tested 3,303 real-world Android apps with AUTH-EYE
and found 544 apps adopt OTP authentication, and
AUTH-EYE reported that a large notion of those apps
violates at least one of our defined OTP rules.
2 DEFINITIONS AND OTP RULES
In this section, we introduce the OTP authentication proto-
cols, and explain OTP rules for designing and implementing
OTP authentication protocols properly.
2.1 One-Time Password Authentication
Protocol
When a user account is created in OTP authentication pro-
tocols, the account is bound to the user by the possession
of some information specific to the user, such as a mobile
phone number or an email address. At login, an OTP is cre-
ated for the user who must correctly return it. Android apps
often use SMS OTP authentication, where the server gen-
erates a pseudo-random value as an OTP and sends it via
SMS to the mobile phone number in the user’s profile. Such a
pseudo-random value is shared only between the server and
the user owning the mobile phone. The user then submits
the received value to the server for authentication. The un-
predictable and unique nature of the pseudo-random value
prevents password replay attacks. Two algorithms (namely
HMAC-based OTP and time-based OTP) are widely used to
generate the one-time password.
2.1.1 HMAC-based One-Time Password (HOTP). The algo-
rithm of HMAC-based one-time password (HOTP) combines
an incrementing counter value (C) and a secret key (K) to
generate the one-time password. The OTP value generated
by the HOTP algorithm is defined as [35]:
value = HOT P(K, C),
where HOT P is the function:
HOT P(K, C) = Truncate(HMACH(K, C)).
where H is a cryptographic hash function, and the output
of the hash function HMACH is truncated to a user-friendly
size.
An HOTP value with a short length is convenient, but
vulnerable to brute-force attacks. To address this problem,
RFC 4426 recommends two steps: 1) the maximum number of
possible attempts per login session should be set beforehand,
and 2) each failed attempt should introduce an additional
delay before a retry is permitted. RFC 4426 also suggests
that with these protective steps the length of an HOTP value
should be at least six digits.
2.1.2 Time-based One-Time Password (TOTP). The time-
based one-time password (TOTP) algorithm [36] is an exten-
sion of the HOTP algorithm, using elapsed time increments
instead of an event counter. Because of human and network
latency, the one-time password for each login session must
remain valid over a time interval (defined by the time step
parameter). Based on RFC 6238, the OTP value generated by
the TOTP algorithm is defined as:
value = HOT P(K, CT)
where K is a secret key, and CT is an integer counting the
number of completed time steps between the initial counter
time T0 and the current Unix time. Given a time step Tx in
seconds, CT is calculated as:
(current unix time − T0)
CT =
Tx
Due to the network latency, the number of time steps (CT )
calculated by clients and servers may differ and so resulting
in different TOTP values. This problem can be addressed by
setting the OTP time step Tx to an acceptable size. The OTPs
generated anytime within a time step will be the same and
will allow the user to login successfully. However, depending
on when a login request is made, a server might reasonably
accept OTPs from earlier or later time steps. For example, if
an OTP is generated near the end of a time step, the user may
compute a counter based on the succeeding time step due to
latency. To take this into account, the server may accept OTPs
computed from time steps +/-1 from its current time step. A
larger time step makes the OTP authentication protocol with
a TOTP value become more vulnerable because it offers an
attacker more time to guess the TOTP value and consume
the TOTP value before the valid user does. To balance the
security and the usability of this authentication scheme, RFC
6238 recommends setting the size of the time step to 30
seconds.
Furthermore, the server must ensure that sufficient time
has elapsed between generating successive TOTP values so
that the number of time steps (CT ) has changed.
2.2 Best Practices and Threats for OTP
In this subsection, we first summarize six OTP rules (i.e.,
rules for secure OTP implementation) according to RFC doc-
uments, and then discuss threats against OTP authentications
if one or more rules are violated.
2.2.1 OTP Rules. Several RFC documents such as RFC
4226 [35], RFC 2289 [22], RFC 6238 [36], RFC 1750 [14], and
RFC 4086 [15] regulate how to securely implement an OTP
authentication protocol. We conclude them as six OTP rules
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Siqi et al.
that developers are recommended to follow for a secure OTP
implementation.