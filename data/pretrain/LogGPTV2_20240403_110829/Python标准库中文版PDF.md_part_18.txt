if blurb:
file.write(blurb)
def close(self):
"End of message"
self.mime.lastpart()
self.mime = self.file = None
def write(self, data, mimetype="text/plain"):
"Write data from string or file to message"
# data is either an opened file or a string
if type(data) is type(""):
file = StringIO.StringIO(data)
else:
file = data
data = None
part = self.mime.nextpart()
typ, subtyp = string.split(mimetype, "/", 1)
if typ == "text":
# text data
encoding = "quoted-printable"
encoder = lambda i, o: quopri.encode(i, o, 0)
if data and not must_quote(data):
# copy, don't encode
encoding = "7bit"
encoder = None
else:
# binary data (image, audio, application, ...)
encoding = "base64"
encoder = base64.encode
#
# write part headers
if encoding:
part.addheader("Content-Transfer-Encoding", encoding)
part.startbody(mimetype)
#
# write part body
if encoder:
encoder(file, self.file)
elif data:
self.file.write(data)
else:
while 1:
data = infile.read(16384)
if not data:
break
outfile.write(data)
#
# try it out
BLURB = "if you can read this, your mailer is not MIME-aware\n"
mime = Writer(sys.stdout, BLURB)
# add a text message
mime.write("""\
here comes the image you asked for. hope
it's what you expected.
""", "text/plain")
# add an image
mime.write(open("samples/sample.jpg", "rb"), "image/jpeg")
mime.close()
6.5. mailbox 模块
mailbox 模块用来处理各种不同类型的邮箱格式, 如 Example 6-6 所示. 大部
分邮箱格式使用文本文件储存纯 RFC 822 信息, 用分割行区别不同的信息.
6.5.0.1. Example 6-6. 使用 mailbox 模块
File: mailbox-example-1.py
import mailbox
mb = mailbox.UnixMailbox(open("/var/spool/mail/effbot"))
while 1:
msg = mb.next()
if not msg:
break
for k, v in msg.items():
print k, "=", v
body = msg.fp.read()
print len(body), "bytes in body"
subject = for he's a ...
message-id = 
received = (from PI:EMAIL)
by spam.egg (8.8.7/8.8.5) id CAA03202
for effbot; Fri, 15 Oct 1999 02:27:36 +0200
from = Fredrik Lundh 
date = Fri, 15 Oct 1999 12:35:36 +0200
to = PI:EMAIL
1295 bytes in body
6.6. mailcap 模块
mailcap 模块用于处理 mailcap 文件, 该文件指定了不同的文档格式的处理方
法( Unix 系统下). 如 Example 6-7 所示.
6.6.0.1. Example 6-7. 使用 mailcap 模块获得 Capability 字典
File: mailcap-example-1.py
import mailcap
caps = mailcap.getcaps()
for k, v in caps.items():
print k, "=", v
image/* = [{'view': 'pilview'}]
application/postscript = [{'view': 'ghostview'}]
Example 6-7 中, 系统使用 pilview 来预览( view )所有类型的图片, 使用
ghostscript viewer 预览 PostScript 文档. Example 6-8 展示了如何使用
mailcap 获得特定操作的命令.
6.6.0.2. Example 6-8. 使用 mailcap 模块获得打开
File: mailcap-example-2.py
import mailcap
caps = mailcap.getcaps()
command, info = mailcap.findmatch(
caps, "image/jpeg", "view", "samples/sample.jpg"
)
print command
pilview samples/sample.jpg
6.7. mimetypes 模块
mimetypes 模块可以判断给定 url ( uniform resource locator , 统一资源定
位符) 的 MIME 类型. 它基于一个内建的表, 还可能搜索 Apache 和 Netscape
的配置文件. 如 Example 6-9 所示.
6.7.0.1. Example 6-9. 使用 mimetypes 模块
File: mimetypes-example-1.py
import mimetypes
import glob, urllib
for file in glob.glob("samples/*"):
url = urllib.pathname2url(file)
print file, mimetypes.guess_type(url)
samples\sample.au ('audio/basic', None)
samples\sample.ini (None, None)
samples\sample.jpg ('image/jpeg', None)
samples\sample.msg (None, None)
samples\sample.tar ('application/x-tar', None)
samples\sample.tgz ('application/x-tar', 'gzip')
samples\sample.txt ('text/plain', None)
samples\sample.wav ('audio/x-wav', None)
samples\sample.zip ('application/zip', None)
6.8. packmail 模块
(已废弃) packmail 模块可以用来创建 Unix shell 档案. 如果安装了合适的工
具, 那么你就可以直接通过运行来解开这样的档案. Example 6-10 展示了如何
打包单个文件, Example 6-11 则打包了整个目录树.
6.8.0.1. Example 6-10. 使用 packmail 打包单个文件
File: packmail-example-1.py
import packmail
import sys
packmail.pack(sys.stdout, "samples/sample.txt", "sample.txt")
echo sample.txt
sed "s/^X//" >sample.txt <<"!"
XWe will perhaps eventually be writing only small
Xmodules, which are identified by name as they are
Xused to build larger ones, so that devices like
Xindentation, rather than delimiters, might become
Xfeasible for expressing local structure in the
Xsource language.
X -- Donald E. Knuth, December 1974
!
====Example 6-11. 使用 packmail 打包整个目录树===[eg-6-11]
File: packmail-example-2.py
import packmail
import sys
packmail.packtree(sys.stdout, "samples")
注意, 这个模块不能处理二进制文件, 例如声音或者图像文件.
6.9. mimify 模块
mimify 模块用于在 MIME 编码的文本信息和普通文本信息(例如 ISO Latin 1
文本)间相互转换. 它可以用作命令行工具, 或是特定邮件代理的转换过滤器:
$ mimify.py -e raw-message mime-message
$ mimify.py -d mime-message raw-message
作为模块使用, 如 Example 6-12 所示.
6.9.0.1. Example 6-12. 使用 mimify 模块解码信息
File: mimify-example-1.py
import mimify
import sys
mimify.unmimify("samples/sample.msg", sys.stdout, 1)
这里是一个包含两部分的 MIME 信息, 一个是引用的可打印信息, 另个是
base64 编码信息. unmimify 的第三个参数决定是否自动解码 base64 编码的
部分:
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary='boundary'
this is a multipart sample file. the two
parts both contain ISO Latin 1 text, with
different encoding techniques.
--boundary
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable
sillmj=F6lke! blindstyre! medisterkorv!
--boundary
Content-Type: text/plain
Content-Transfer-Encoding: base64
a29tIG5lciBiYXJhLCBvbSBkdSB09nJzIQ==
--boundary--
解码结果如下 (可读性相对来说更好些):
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary= 'boundary'
this is a multipart sample file. the two
parts both contain ISO Latin 1 text, with
different encoding techniques.
--boundary
Content-Type: text/plain
sillmj?lke! blindstyre! medisterkorv!
--boundary
Content-Type: text/plain
kom ner bara, om du t?rs!
Example 6-13 展示了如何编码信息.
6.9.0.2. Example 6-13. 使用 mimify 模块编码信息
File: mimify-example-2.py
import mimify
import StringIO, sys
#
# decode message into a string buffer
file = StringIO.StringIO()
mimify.unmimify("samples/sample.msg", file, 1)
#
# encode message from string buffer
file.seek(0) # rewind
mimify.mimify(file, sys.stdout)
6.10. multifile 模块
multifile 模块允许你将一个多部分的 MIME 信息的每部分作为单独的文件处
理. 如 Example 6-14 所示.
6.10.0.1. Example 6-14. 使用 multifile 模块
File: multifile-example-1.py
import multifile
import cgi, rfc822
infile = open("samples/sample.msg")
message = rfc822.Message(infile)
# print parsed header
for k, v in message.items():
print k, "=", v
# use cgi support function to parse content-type header
type, params = cgi.parse_header(message["content-type"])
if type[:10] == "multipart/":
# multipart message
boundary = params["boundary"]
file = multifile.MultiFile(infile)
file.push(boundary)
while file.next():
submessage = rfc822.Message(file)
# print submessage
print "-" * 68
for k, v in submessage.items():
print k, "=", v
print
print file.read()
file.pop()
else:
# plain message
print infile.read()
7. 网络协议
"Increasingly, people seem to misinterpret complexity as sophistication,
which is baffling - the incomprehensible should cause suspicion rather
than admiration. Possibly this trend results from a mistaken belief that
using a somewhat mysterious device confers an aura of power on the user."
- Niklaus Wirth
7.1. 概览
本章描述了 Python 的 socket 协议支持以及其他建立在 socket 模块上的网
络模块. 这些包含了对大多流行 Internet 协议客户端的支持, 以及一些可用
来实现 Internet 服务器的框架.
对于那些本章中的底层的例子, 我将使用两个协议作为样例: Internet Time
Protocol ( Internet 时间协议 ) 以及 Hypertext Transfer Protocol (超文
本传输协议, HTTP 协议).
7.1.1. Internet 时间协议
Internet 时间协议 ( RFC 868, Postel 和 Harrenstien, 1983) 可以让一个网
络客户端获得一个服务器的当前时间.
因为这个协议是轻量级的, 许多 Unix 系统(但不是所有)都提供了这个服务.
它可能是最简单的网络协议了. 服务器等待连接请求并在连接后返回当前时间
( 4 字节整数, 自从 1900 年 1 月 1 日到当前的秒数).
协议很简单, 这里我们提供规格书给大家:
File: rfc868.txt
Network Working Group J. Postel -
ISI
Request for Comments: 868 K. Harrenstien - SRI
May
1983
Time Protocol
This RFC specifies a standard for the ARPA Internet community. Hosts on
the ARPA Internet that choose to implement a Time Protocol are expected
to adopt and implement this standard.
本 RFC 规范提供了一个 ARPA Internet community 上的标准.
在 ARPA Internet 上的所有主机应当采用并实现这个标准.
This protocol provides a site-independent, machine readable date and
time. The Time service sends back to the originating source the time in
seconds since midnight on January first 1900.
此协议提供了一个独立于站点的, 机器可读的日期和时间信息.
时间服务返回的是从 1900 年 1 月 1 日午夜到现在的秒数.
One motivation arises from the fact that not all systems have a
date/time clock, and all are subject to occasional human or machine
error. The use of time-servers makes it possible to quickly confirm or
correct a system's idea of the time, by making a brief poll of several
independent sites on the network.
设计这个协议的一个重要目的在于, 网络上的一些主机并没有时钟,
这有可能导致人工或者机器错误. 我们可以依靠时间服务器快速确认或者修改
一个系统的时间.
This protocol may be used either above the Transmission Control Protocol
(TCP) or above the User Datagram Protocol (UDP).
该协议可以用在 TCP 协议或是 UDP 协议上.
When used via TCP the time service works as follows:
通过 TCP 访问时间服务器的步骤:
* S: Listen on port 37 (45 octal).
* U: Connect to port 37.
* S: Send the time as a 32 bit binary number.
* U: Receive the time.
* U: Close the connection.
* S: Close the connection.
* S: 监听 37 ( 45 的八进制) 端口.
* U: 连接 37 端口.
* S: 将时间作为 32 位二进制数字发送.
* U: 接收时间.
* U: 关闭连接.
* S: 关闭连接.
The server listens for a connection on port 37. When the connection
is established, the server returns a 32-bit time value and closes the
connection. If the server is unable to determine the time at its
site, it should either refuse the connection or close it without
sending anything.
服务器在 37 端口监听. 当连接建立的时候, 服务器返回一个 32 位的数字
值
并关闭连接. 如果服务器自己无法决定当前时间, 那么它应该拒绝这个连接
或者
不发送任何数据立即关闭连接.
When used via UDP the time service works as follows:
通过 TCP 访问时间服务器的步骤:
S: Listen on port 37 (45 octal).
U: Send an empty datagram to port 37.
S: Receive the empty datagram.
S: Send a datagram containing the time as a 32 bit binary number.
U: Receive the time datagram.
S: 监听 37 ( 45 的八进制) 端口.
U: 发送空数据报文到 37 端口.
S: 接受空报文.
S: 发送包含时间( 32 位二进制数字 )的报文.
U: 接受时间报文.
The server listens for a datagram on port 37. When a datagram
arrives, the server returns a datagram containing the 32-bit time
value. If the server is unable to determine the time at its site, it
should discard the arriving datagram and make no reply.
服务器在 37 端口监听报文. 当报文到达时, 服务器返回包含 32 位时间值
的报文. 如果服务器无法决定当前时间, 那么它应该丢弃到达的报文,
不做任何回复.
The Time
时间
The time is the number of seconds since 00:00 (midnight) 1 January 1900
GMT, such that the time 1 is 12:00:01 am on 1 January 1900 GMT; this
base will serve until the year 2036.
时间是自 1900 年 1 月 1 日 0 时到当前的秒数,
这个协议标准会一直服务到2036年. 到时候数字不够用再说.
For example:
the time 2,208,988,800 corresponds to 00:00 1 Jan 1970 GMT,
2,398,291,200 corresponds to 00:00 1 Jan 1976 GMT,
2,524,521,600 corresponds to 00:00 1 Jan 1980 GMT,
2,629,584,000 corresponds to 00:00 1 May 1983 GMT,
and -1,297,728,000 corresponds to 00:00 17 Nov 1858 GMT.
例如:
时间值 2,208,988,800 对应 to 00:00 1 Jan 1970 GMT,
2,398,291,200 对应 to 00:00 1 Jan 1976 GMT,
2,524,521,600 对应 to 00:00 1 Jan 1980 GMT,
2,629,584,000 对应 to 00:00 1 May 1983 GMT,
最后 -1,297,728,000 对应 to 00:00 17 Nov 1858 GMT.
RFC868.txt Translated By Andelf(gt: PI:EMAIL )
非商业用途, 转载请保留作者信息. Thx.
7.1.2. HTTP 协议
超文本传输协议 ( HTTP, RFC 2616 ) 是另个完全不同的东西. 最近的格式说明