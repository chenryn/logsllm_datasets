#01
pc 0001fdd3 /sy8tem/1ib/1ibe.so (sflush+54)
#02
pc 0001fe61 /system/1ib/1ibc.so (fflush+60)
#04pc 00022291/aystem/1ib/1ibc.so
+03
pc 00020cad /system/1ib/1ibc.so
以上崩溃由SIGPIPE信号触发。系统尝试将ps命令的输出结果通过管道传给1o1z命令时，
发现1olz命令不存在。然后，操作系统将此SIGPIPE信号传送给ps进程来通知终止进程。除
了SIGPIPE信号之外，一些其他信号也被捕获并产生原生代码崩溃日志。值得注意的是，段越
界错误也是通过此功能记录到日志中的。
仅仅使用崩溃dump进行调试是远远不够的。当前溃dump无法满足需求时，研究人员会借
助交互式调试技术。本章其余部分关注交互式调试方法以及如何使用这些方法来分析漏洞。
7.4远程调试
通过使用运行在目标程序之外独立计算机上的调试器来进行调试的方法，称为远程调试。这
种方法通常在目标程序使用全屏图像时，或像我们这种情况，目标设备无法提供合适的调试接口
时使用。远程调试必须在两个机器之间建立通信信道。图7-1描述了一种典型的应用在Android
设备上的远程调试配置。
USB或Wi-Fi连接
图7-1远程调试配置
在此配置中，开发者通过同一个局城网（LAN）或通用串行总线（USB）将其设备连接到主
机上。如果使用局域网，设备通过Wi-Fi连接到网络。如果使用USB，则直接将设备插到主机上。
---
## Page 182
166第7章调试与分析安全漏洞
然后，开发者在Android设备和主机上分别运行调试器服务器和客户端，通过客户端与服务器之
间的通信来调试目标程序。
远程调试是在Android平台上调试的首选方法。此方法可以用来调试Dalvik代码和原生代码。
因为大部分Android设备的屏幕相对较小，而且没有物理键盘，所以没有友好的调试接口。因此，
远程调试的优越性不言面喻。
7.5调试Dalvik代码
Java编程语言构成了Android软件生态系统的绝大部分。许多Android应用以及Android框
架层都是用Java语言编写然后编译成Dalvik字节码的。由于存在一些非常复杂的软件栈（Software
Stack），程序员会犯错误并产生bug。使用调试器能够更容易地跟踪、分析和处理这些bug。幸
运的是，有许多可用的工具来调试Dalvik字节码。
与Java一样，Dalvik实现了一个标准的调试接口，称为Java调试线协议（Java DebugWire
Protocol，JDWP）。所有用来调试 Dalvik和Java程序的工具儿乎都是基于此协议开发的。虽然
此协议的内部组成超出了本书的范围，但是研究此协议对一些读者是有益的。更多信息可以参
见 Oracle B JDWP 文档 : http://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html。
编写本书时，Android小组提供了两个官方开发环境。较新的是AndroidStudio，基于JetBrains
公司开发的IntellijIDEA。遗感的是，该工具仍然处于预发布阶段。另一个是EclipseIDE的Android
开发工具（ADT）插件，自从Android软件开发套件（SDK）发布r3版本，该工具已成为了官方
支持的Android应用开发环境。
除了开发环境，一些其他的工具也是依据JDWP标准协议开发的，例如AndroidSDK中的
Android设备监视器和 Dalvk调试监视服务器（DDMS）都采用了JDWP协议。这些工具便于对
应用进行分析以及对其他系统任务进行监控。它们使用JDWP来访问指定应用的信息，例如线程、
堆使用情况以及正在进行的方法调用。除了包含在SDK中的这些工具，还有一些工具也是基于
JDWP协议开发的，包括OracleJava开发组件（JDK）中传统的Java调试器（JDB），以及第4章介
绍的AndBug工具。这绝不是详尽的清单，因为文中未列举的一些其他工具也采用了JDWP协议。
为了简化问题，本节选择官方支持的工具进行演示。在本节的所有实例中，使用了如下软件：
 Ubuntu 12.04 amd64
 来自 eclipse-java-indigo-SR2-linux-gtk-x86_64.tar.gz 中的 Eclipse
 Android SDK r22.0.5
 Android NDK r9
 Android ADT 插if件 v22.0.5
出于为开发者提供方便的目的，Android小组在2012年年底开始提供这些组件的捆绑下载，
称为ADT套件。该套件包括Eclipse、ADT插件、AndroidSDK和平台工具等。无需单独下载每
一个组件，一次下载就包括了大部分开发者需要的一切。唯一需要注意的例外是AndroidNDK，
只有开发包含原生代码的应用时才会用到它。
---
## Page 183
7.5调试Dalvik代码
167
7.5.1调试示例应用
使用Eclipse来调试Android应用十分简单。Android SDK自带一些样本应用来帮助你熟悉
Eclipse环境。本书的官网上有关于本章的材料，里面包含了一个非常简单的“HelloWorld”应用，
链接为：www.wiley.com/go/androidhackershandbook。我们在本节使用这个应用进行演示。接下来，
将 He11oWor1d 项目导入 Eclipse 工作空间，使用 File》Import followedby General> Existing Projects
into Workspace。在Eclipse完成加载后，会显示如图7-2所示的界面。
若想开始调试应用，点击工具栏中的DebugAs图标（看起来像只虫子）进人Debug界面。
正如其名字所示，该界面是专门为调试设计的。它展示了与调试相关的窗口，关注最相关的信息。
图7-3展示了启动调试会话后的调试界面。
正如你所看到的，一些窗口在Java界面中并没有展示。实际上，与Java界面相同的窗口只
有概要和源代码窗口。在图7-3中，调试器停在了一个主activity的断点上，通过高亮代码行和
调试窗口中已选的栈赖可以明显看出这一点。点击调试窗口中的各个栈顿会在源代码窗口中显示
附近的代码。点击没有可用源代码的栈帧时会显示一个描述性错误。下一小节介绍调试时如何展
示来自Android框架层的源代码。
虽然这种方法很简单，但实际上在后台发生了许多事情。Eclipse自动负责创建该应用的调试
版本，安装该应用至设备，启动并附加到调试器上。在Android设备上调试应用通常需要应用
manifest 清单（也称为 AndroidManifest.xml文件）中的 android:debuggable=true 标志。稍
后，在7.5.3节中会介绍一些调试其他类型代码的方法。
---
## Page 184
168
第7章调试与分析安全漏洞
图7-3Eclipse 调试界面
7.5.2显示框架层源代码
有时候需要查看应用代码与Android框架层的交互，例如想了解应用是如何被调用的，或者
函数调用进人Android框架层是如何处理的。幸运的是，当点击栈帧时显示Android框架层源代
码是可行的，和显示应用源代码一样。
首先需要完成的是正确初始化AOSP资料库。正确地初始化AOSP资料库，可以参考官网
Android文档中的创建说明，链接为：http:/source.android.com/source/building.html。若使用Nexus
设备，正如我们建议使用的，需要特殊留意该设备使用的分支和配置。详细说明请参考
http:/source.android.com/source/building-devices.html。初始化的最后一步是运行启动命令，在正
确完成AOSP资料库初始化后，进行下一步。
下一步操作为Eclipse 创建类路径。在AOSP根目录下，运行make idegen命令来创建
idegen.sh脚本。创建完成后，可以在development/tools/idegen目录下找到此脚本。运行此脚
本前，在顶层目录下创建excluded-paths文件，以排除顶层目录下不想包含的所有目录。为了
更方便地进行这一步操作，本书附带资料中提供了只包含frameworks目录的excluded-paths
文件。准备好excluded-paths文件后，执行idegen.sh脚本。以下shell会话片段展示了成功执
行后的输出结果：
dev:~/android/source $ . /development/too1s/1degen/idegen.sh
Read excludes: 3ms
---
## Page 185
7.5调试Dalvik代码
169
Traver8ed tree: 1794ms
dev:~/android/source $ 1s 1 .classpath
-rv-...*- 1 Jdrake 5drake 20k Aug 25 17:46 .classpath
dev:~/android/source $
生成的类路径数据被写人了当前目录下的.classpath文件。下一步操作将使用这个文件。
下一步是新建一个工程，使其包含刚才类路径中的代码。使用和之前“HelloWorld”应用相
同的工作空间，通过File>New Project>Java>Java Project新建—个 Java 工程。输人项目名称，
如AOSPFramework Source。取消 Use Default Location复选框并另外指定AOSP 顶层目录。这样，
Eclipse就会使用上一步中生成的.classpath文件。点击Finish结束这一步操作。
注意由于Android代码规模庞大，Eclipse创建或加载此工程时可能会导致内存溢出。为了解
决此问题，启动Eclipse时增加-vmargs-Xmx1024m命令行选项。
接下来，开始调试上一节的示例应用。如果断点仍然设置在主activity的onCreate方法中，
运行时会在那里暂停。现在，点击调试窗口中的一个父栈顿会产生SourceNotFound错误。点击
AtachSource按钮。为了显示出此按钮，可能需要扩大窗口，因为此窗口无法滑动。Sourcc
Altachment Configuration 对话框出现后，点击Workspace按钮。选择上一步创建的AOSP
Framework Source项目并点击OK按钮，之后再次点击OK按钮。最后，再次点击调试窗口中的
栈帧。看！和所选栈帧相关的Android框架层方法显示出来了。图7-4展示了Eclipse显示调用主
activity的onCreate方法的源代码。
图 7-4Eclipse 中 Activity.performCreate 的源代码
---
## Page 186
170第7章调试与分析安全漏洞
按照本节接下来的说明，可以使用Eclipse单步调试Android框架层源代码。有一些代码被
有意排除在了类路径之外。如果有必要显示已排除类的代码，可以修改其中的excluded-paths文
件。反之，如果确定调试时一些已包含路径是没有必要的，就可以将其添加到excluded-paths中。
修改excluded-paths后，重新生成.classpath文件。
7.5.3调试现有代码
调试系统服务和预装应用与上述方法稍有区别。简单地说，调试Dalvik代码通常需要在应
用中将android：debuggable 标志设置为true。如图 7-5所示，启动Android SDK中自带的
DDMS或Android Device Monitor，只显示可调试的进程。
100
医
fjae
图 7-5Android Device Monitor ( ro . debuggable=0 )
如图所示，只出现了com.example.helloworld应用。对于原厂设备来说，情况通常是这样的。
使用eng配置生成的工程设备允许访问所有的进程。eng与user或userdebug之间的主
要区别在于系统属性ro，secure和ro.debuggable的数值。user 和userdebug生成时将这
两个值分别设置为1和0：面eng生成时设置为0和1。另外，eng生成以root权限运行ADB
守护进程。本节将介绍在已root设备上修改这些设置以及实际附加现有进程的方法。
1.伪造调试设备
幸运的是，修改已root设备以支持调试其他代码并不复杂。共有两种实现方法，各有其优缺
点。第一种方法是修改设备的启动过程；第二种方法更加容易，可以在已root设备上直接进行。
---
## Page 187
7.5调试Dalvik代码171
每种方法都需要一些特殊的步骤。
第一种方法本章不作深入介绍，即修改设备中 default.prop文件的ro.secure 和 ro.
debuggable设置。然而，这个特殊的文件通常存储于initrd镜像中。由于是ram磁盘，修改它
需要提取并重打包设备的boot.img文件。虽然这种方法可以半永久性地实现系统范围的调试，但
是目标设备需要有已解锁的启动加载器（bootloader）。如果倾向于使用此方法，可以在第10章
中找到更多关于创建定制bootimg的细节。
第二种方法只需以root用户执行一些简单操作即可。采用这种方法避免了解锁bot loader，
但不是永久性的，以下步骤在设备重启后就失效了。首先，获取一份setpropex工具，这个工具
可以在已root设备上修改只读的系统属性。使用此工具来修改ro，secure为0，ro.debuggable
为1。
ns s du/teoot/esep/:ozneugttaqs
rootemaguro:/data/1oca1/tmp  ./setpropex ro.secure 0
rootemaguro:/data/local/tmp  getprop ro.secure
rootemaguro:/data/local/tmp # ./setpropex ro.debuggable 1
rootemaguro:/data/local/tap # getprop ro.debuggable
接下来断开连接，在主机上使用adbroot命令，以root权限重新启动ADB守护进程。
rootemaguro:/data/local/tmp # exit
restarting adbd as root
dev:-/android $ adb root
dev:~/android $ adb she11
注意一些设备，包括运行Android4.3的Nexus设备，将adbd二进制版本改为不支持adbroot
命令。对于这些设备，重新挂载root分区为读/写，删除/sbin/adbd，并复制一份adbd
的定制userdebug版本。
最后，重启所有依赖DalvikVM的进程。这一步并非强制要求，因为在修改ro.debuggable
属性后启动的任何进程都是可调试的。如果所期望的进程已经在运行，重启此进程也许就足够了。
然而，对于长期运行的进程和系统服务来说，重启Dalvik层是必要的。为了强制重启Android
Dalvik层，可以简单地结束system_server进程。以下片段展示了所需的命令：
zzasussdax5 xoqsmq/-|sddma/teoot/eep/:oxmfeaoox
system 527174953652 62492 ffffffff 4011c304 S system_server
rootenaguro:/data/1ocal/tmp #
kil1命令执行后，设备应该会重新启动。这是正常的，表示AndroidDalvik层正在重启。
在此过程中，不应该中断ADB与设备的连接。当主界面重新出现时，所有的Dalvk进程都会显
示出来，如图7-6所示。
---