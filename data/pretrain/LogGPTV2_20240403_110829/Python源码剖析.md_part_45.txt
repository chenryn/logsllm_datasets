PyStringObjectrepr)
slotder
slot_tprepr
offset
slar
277
---
## Page 308
Python源码剖析
278
转而访问基类的mro列表。在访问的过程中，不断将所访问到的c1ass对象放入到D自身
从左到右遍历该1ist，当访问到1it中的任一个基类时，如果基类存在mro列表，则会
次放入D和它的基类，如图12-12所示：
析Python虚拟机如何确定一个class对象的mro列表。
解析属性时的mro顺序。最终这个tuple将被保存在PyTypeobject.tp_muro中。
象中依次存放着一组class对象。在tuple中，class对象的顺序就是Python虚拟机在
函数完成了对一个类型的mro顺序的建立。Pyhon虚拟机将创建一个tuple对象，在对
被调用，还是B的show被调用呢？Python内部在PyType_Ready中通过mro_internal
的Python代码：
Pyhon是支持多重继承的，在多重继承时，就必须设置按照何种顺序解析属性。考虑如下
解析顺序。如果Pyhon像Java一样，只支持单根继承的话，这就不是一个问题了。但是
class D(C,B):
class C(A):
class B(list):
[mro.py]
对于在mro.py中的D，Python虚拟机会在内部创建一个1ist，其中根据D的声明依
EDO
注意在1ist的最后一项存放着一个包含所有D的直接基类的列表。Python虚拟机将
由于mro_intemal在内部实现时相当繁杂，所以这里我们不深入代码，仅在概念上剖
由于在D的基类A和B中都实现了show，那么在调用d.show(）时，究竟是A的show
第12章Python虚拟机中的类机制
pass
pass
def
print*B::show"
print "a:show"
snow(self):
一深度探索动态语言核心技术
图12-12D建立mro列表时Python虚拟机内部的辅助list
D
object
list
object
---
## Page 309
12.2.3.5
象的mro列表的第一项总是其自身，所以遍历是从第二项开始的）。在mro列表中实际上
正确性。输出结果如表12-2所示：
mro.py中添加如下的代码，对这个结果进行验证：
上面的遍历过程可以看到，这个列表是（D、C、A、B、1st、object），我们可以通过在
的mro列表中去。
class D(B,C)
[aou]
class D(C,B,A)
不同继承顺序下的mro列表
main_.C>
main
main
Python源码剖析
12.2从type对象到class对象
class D(C,B)
A'>
279
---
## Page 310
Python源码剖析
280
为按照inherit_slots的结果，这两个地址应该都指向同一个地址，即int_ada的地址。
输出语句，当处理的type分别是booi和int时，输出其nb_add的地址，进行验证。因
Type，而 pyInt_Type中却设置了nb_aaa操作。所以我们可以在pyType_Ready中添加
statie void inherit_slots(PyTypeobject*type,PyTypeobject *base)
设置而基类中设置了的操作拷贝到class对象中，从而完成对基类操作的继承动作。
存储的就是class对象的所有直接和间接基类，Python虚拟机会将class对象自身没有
#define COPYNUM(SEOT) cOFYSLOT(tp_as_number->SLOT)
#define COPYSLOT(SLOTy
defineSLOTDEFINED(SLOT)
[typeobject.c]
intPyType_Ready(EyTypeObject*type)
[typeobject.c]
iF(strcmp(type->tp_name,
我们知道pyBool_Tye中并没有设置nb_ada操作，但它的tp_base设置的是&PyInt
在inherit_slots中，会拷贝相当多的操作，这里我们拿np_add来做个例子：
这个继承操作的动作发生在inherit_slots中：
第12章Python虚拟机中的类机制
if(type->tp_as_numberI=NULl &&base->tp_as_number!NULL）(
（base->sLoT I=O && (hasebase ==NuLt fI base->SLoT l= basebase->SLor))
printf（"intnb_add
Ⅱ
COPYNUM(nb_add):
Inherit slots(type,
Pyobject
oas
深度探索动态语言核心技术
type->tp-mro1
basebase
base->bp_base;
PyTuple_GET_ITEM(bases,
：0xxn
(PyTypeObject
int")
boo）0
(type->tpasinumber->nb_add));
---
## Page 311
12.2.3.6
Python的内置类型对应的ryTypeObject进行了多种复杂的改造工作，总结一下，主要包
到了这里，我们才算是完整地剖析了eyType_Reaay的动作，可以看到，Pyhon虚拟机对
通过调用add_subelass完成向这个tp_subclasses中填充子类对象的动作：
是一个list对象。在其中存放着所有直接继承自该类型的class对象。PyType_Ready
如此”的。
自己尝试一下把两个boo1对象相加，结果会令你先大吃一惊，但是旋即又会觉得“理当
inE PyType_Ready(PyTypeObiect *type)
[typeobject.c]
bool nb_a@d :0x1E0c3230
intnb_add:0x1E0c3230
果然，
在图12-13中我们验证了这个子类列表的存在：
到这里，PyType_Ready还剩下最后一个重要的动作了：设置基类中的子类列表。在
填充基类中的子类列表
这个结果预示着对于Pyhon中的两个boo1对象，我们可以进行加法操作，读者可以
Pyobject
输出的结果为：
tor
bases
/填充基类的子类列表
=PyTuple_GET_SIZE(bases);
add_aubclass((PyTypeobject ）b,type);
object真不愧是“万物之母”，那么多的class对象都是继承自object的。
class
ype
eption
,
C
type
module
12.2
从type对象到class对象
type
Ktype
ctype
一深度探索动态语言核心技术
'nt.atatv
<tyP
tsit
281
---
## Page 312
Python源码剖析
12.3
282
于包含类的Python源文件，编译之后的结果又如何呢？
对象A，而与函数对应的PyCodeObject对象B则存储在A的co_cnosts变量中。那么对
Python源文件，在Python源文件编译之后，会得到一个与源文件对应的PycodeObject
a.g(10)
类成员函数的调用等。这些内容就是在本节中将深入剖析的内容。
中，我们看到了许多关于类的内容，其中包括类的定义、类的构造函数、对象的实例化、
我们将研究单个class的实现，所以在这里并没有关于继承及多态的讨论。然而在class_0.py
跟踪PyType_Ready的操作，以清楚了解初始化过程中的每一个细节。
的行为，有的类型可能继承得多，有的可能继承得少。对于某个特定类型，读者可以自己
时候，有的操作不一定完全等同，比如对于不同类型，可能从基类继承操作时就会有不同
括以下的工作：
P
[class_0.py]
V
在第11章对Pyhon中函数机制的分析中，我们知道，对于一个包含有函数定义的
第12章Python虚拟机中的类机制
我们可以照葫芦画瓢，根据以前的经验，推测与class_O.py对应的PyCodeobject 对
用户自定义class
从本节开始，我们将正式进入对用户自定义type（class）的剖析。在classO.py中，
这里列出的PyType_Type中的动作序列只是一个框架性的概括，在处理不同类型的
设置基类的子类列表。
设置type信息、基类及基类列表：
A()
defg(self,avalue):
def f(self):
def
基于mro列表从基类继承操作；
确定mro列表：
填充tp_aict:
prlnt self.vaiue
princ A
深度探索动态语言核心技术
init
python
iect）:
(self):
avalue
---
## Page 313
12.3.1.1class的动态元信息
12.3.1
度灵活的动态性。
中，元信息的概念被发挥得淋漓尽致，因而Python也提供了Java、C#等语言所没有的高
的诸如Reflecion等动态特性才有可能得到实现。在以后的剖析中我们可以看到，在Pyhon
息在现代编程语言中是一个非常重要的概念，正是有了这个东西，Java、C#中的一些初级
信息，才能创建A的class对象，否则，我们是没有办法创建A的class对象的。元信
个王对应了一个函数：还有一个符号g，这个g也对应了一个函数。有了这些关于A的元
中所定义的classA来说，我们必须知道这样的信息：在elassA中，有一个符号，这
属性、方法，该class实例化时要为实例对象申请的内存空间的大小等。对于class_O.py
Object开始的，第一步就是执行“classA”这条Python语句，并创建class对象。
看到，类的成员函数与一般的函数相同，同样也会有这种声明和实现分离的现象。
应的PyCodeObject对象中。这一点在图12-14中可以看得很清楚。在图12-14中还可以
PyCodeObject对象中：而classA的实现代码编译后的字节码指令序列则存储在A所对
地说，应该是创建类A的语句—编译后的字节码指令序列存储在与class_O.py对应的
object中的。在类机制中，同样存在这样的分离现象。声明类的elassA语句—准确
实现代码虽然是一个逻辑整体，但是它们对应的字节码指令却是分离在两个PyCode
包含3个与函数对应的PyCodeobject。这正是Python编译之后的结果，如图12-14所示
象会包含一个与class对应的PyCodeobject，而与class对应的PyCodeObject对象则
（图中的方框表示PyCodeObject对象，虚线箭头表示包含关系）：
在考察具体的字节码之前，我们首先来看看与class_O.py对应的pyCodeobject中，
所谓class的元信息就是指关于class的信意，比如说class的名称，它所拥有的
创建class对象
当Python执行引擎开始执行class0.py时，是从与classO.py对应的那个PyCode-
在第11章对函数机制的剖析中，我们已经看到，函数的声明语句de语句和函数的
[class A(object):]
class_0.py
图12-14class_0.py编译后的PyCodeObject之间的关系
[def g(self,value):]
[def
[def f(self):]
Python源码剖析
init
(self):]
12.3用户自定义class
K---。
深度探索动态语言核心技术
283
---
## Page 314
284
Python源码剖析
常量表（co_consts）和符号表（co_names）的情况，如图12-15所示：
些操作完成之后，我们来看一看这时的运行时栈，如图12-16所示：
入到运行时栈中，并通过MAKE_FUNCTION指令创建一个PyFunctionObject对象。在这
创建
NAME指令和BUILD_TUPLE指令是一个非常关键的点，这两条指令将基于类A的所有基类
晰地展示Python虚拟机现在所处的位置。