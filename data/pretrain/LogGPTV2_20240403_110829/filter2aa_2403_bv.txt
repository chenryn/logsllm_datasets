  add      rsp, 32 
  pop      rbx 
  ret      0 
get_month1_checked ENDP 
严格地说，assert()只能算作宏而不能算作函数。它对条件表达式进行判断，然后把行号信息和文件名
信息传递给另外一个函数，并由后者向用户进行提示。 
在可执行程序里，我们可以看到以 UTF-16 格式封装文件名和条件表达式，以及 assert()在原文件中的
行号（29）。 
所有编译器在编译 assert 宏时的处理机制基本都大同小异。本文仅演示 GCC 的编译结果。 
指令清单 18.19  Optimizing GCC 4.9 x64 
.LC1: 
  .string "month.c" 
.LC2: 
  .string "month 
char a[3][4]; 
int main() 
{ 
  int x, y; 
  //清空数组 
  for (x=0; x 
char a[3][4]; 
int main() 
{ 
  int x, y; 
  // 清空数组 
  for (x=0; x 
char a[3][4]; 
char get_by_coordinates1 (char array[3][4], int a, int b) 
{ 
  return array[a][b]; 
}; 
char get_by_coordinates2 (char *array, int a, int b) 
{ 
  // treat input array as one-dimensional 
  // 4 is array width here 
  return array[a*4+b]; 
}; 
char get_by_coordinates3 (char *array, int a, int b) 
{ 
  // treat input array as pointer, 
  // calculate address, get value at it 
  // 4 is array width here 
  return *(array+a*4+b); 
}; 
int main() { 
  a[2][3]=123; 
  printf ("%d\n", get_by_coordinates1(a, 2, 3)); 
  printf ("%d\n", get_by_coordinates2(a, 2, 3)); 
  printf ("%d\n", get_by_coordinates3(a, 2, 3)); 
}; 
编译并运行上述程序，可观测到数组元素的相应数值。 
MSVC 2013 的编译方法可圈可点，三个函数的指令完全一致。 
指令清单 18.22  Optimizing MSVC 2013 x64 
array$ = 8 
a$ = 16 
b$ = 24 
get_by_coordinates3 PROC 
; RCX=address of array 
; RDX=a 
; R8=b 
  movsxd  rax, r8d 
; EAX=b 
  movsxd  r9, edx 
; R9=a 
  add     rax, rcx 
; RAX=b+address of array 
  movzx   eax, BYTE PTR [rax+r9*4] 
; AL=load byte at address RAX+R9*4=b+address of array+a*4=address of array+a*4+b 
  ret     0 
get_by_coordinates3 ENDP 
array$ = 8 
a$ = 16 
b$ = 24 
get_by_coordinates2 PROC 
  movsxd  rax, r8d 
  movsxd  r9, edx 
  add     rax, rcx 
  movzx   eax, BYTE PTR [rax+r9*4] 
  ret     0 
get_by_coordinates2 ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
248 
逆向工程权威指南（上册） 
array$ = 8 
a$ = 16 
b$ = 24 
get_by_coordinates1 PROC 
  movsxd  rax, r8d 
  movsxd  r9, edx 
  add     rax, rcx 
  movzx   eax, BYTE PTR [rax+r9*4] 
  ret     0 
get_by_coordinates1 ENDP 
GCC 会生成等效的指令，只是各函数的指令略有区别。 
指令清单 18.23  Optimizing GCC 4.9 x64 
; RDI=address of array 
; RSI=a 
; RDX=b 
get_by_coordinates1: 
; sign-extend input 32-bit int values "a" and "b" to 64-bit ones 
  movsx   rsi, esi 
  movsx   rdx, edx 
  lea     rax, [rdi+rsi*4] 
; RAX=RDI+RSI*4=address of array+a*4 
  movzx   eax, BYTE PTR [rax+rdx] 
; AL=load byte at address RAX+RDX=address of array+a*4+b 
  ret 
get_by_coordinates2: 
  lea     eax, [rdx+rsi*4] 
; RAX=RDX+RSI*4=b+a*4 
  cdqe 
  movzx   eax, BYTE PTR [rdi+rax] 
; AL=load byte at address RDI+RAX=address of array+b+a*4 
  ret 
get_by_coordinates3: 
  sal     esi, 2 
; ESI=a 
int a[10][20][30]; 
void insert(int x, int y, int z, int value) 
{ 
  a[x][y][z]=value; 
}; 
x86 
用 MSVC 2010 编译后，这个函数对应的汇编代码如下所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
249 
指令清单 18.25  MSVC 2010 
_DATA  
SEGMENT 
COMM    
_a:DWORD:01770H 
_DATA   
ENDS 
PUBLIC  
_insert 
_TEXT    
SEGMENT 
_x$ = 8  
; size = 4 
_y$=12  
; size = 4 
_z$=16  
; size = 4 
_value$ = 20      
; size = 4 
_insert     PROC 
    push    ebp 
    mov     ebp, esp 
    mov     eax, DWORD PTR _x$[ebp] 
    imul    eax, 2400  
; eax=600*4*x 
    mov     ecx, DWORD PTR _y$[ebp] 
    imul    ecx, 120  
; ecx=30*4*y 
    lea     edx, DWORD PTR _a[eax+ecx]; edx=a + 600*4*x + 30*4*y 
    mov     eax, DWORD PTR _z$[ebp] 
    mov     ecx, DWORD PTR _value$[ebp] 
    mov     DWORD PTR [edx+eax*4], ecx; *(edx+z*4)=value 
    pop     ebp 
    ret     0 
_insert     ENDP 
_TEXT       ENDS 
中规中矩。对于三维数组（int a[x][y][z];）来说，计算各元素指针地址的公式是：数组元素地址=600×4x 
+ 30×4y + 4z。32 位系统里 int 类型是 32 位（4 字节）数据，所以要每项都要乘以 4。 
使用 GCC 4.4.1 编译上述程序可得如下所示的指令。 
指令清单 18.26  GCC 4.4.1 
public  insert 
insert   
proc near 
x  
= dword ptr 8 
y        
= dword ptr  0Ch 
z        
= dword ptr  10h 
value    
= dword ptr  14h 
push    ebp 
mov     ebp, esp 
push    ebx 
mov     ebx, [ebp+x] 
mov     eax, [ebp+y] 
mov     ecx, [ebp+z] 
lea     edx, [eax+eax]     
; edx=y*2 
mov     eax, edx            
; eax=y*2 
shl     eax, 4  
; eax=(y*2)<<4 = y*2*16 = y*32 
sub     eax, edx  
; eax=y*32 - y*2=y*30 