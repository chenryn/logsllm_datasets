# 一、行动起来——设计、规划和执行
随着 web 服务变得越来越复杂，软件服务公司的规模越来越大，我们需要新的工作方式来适应和加快变化的速度，同时建立高质量的标准。微服务架构已经成为控制大型软件系统的最佳工具之一，由容器和编排器等新工具支持。我们将首先介绍传统整体架构和微服务架构之间的差异，以及转向后者的优势。我们将介绍如何构建架构迁移，以及如何计划在这个困难的过程中取得成功。
在这本书里，我们将讨论 web 服务器服务，尽管有些想法可以用于其他类型的软件应用，显然是通过修改它们。整体/微服务架构与操作系统设计中的整体/微内核讨论有一些相似之处，包括早在 1992 年莱纳斯·托瓦尔兹和安德鲁·s·塔南鲍姆之间著名的辩论([https://www.oreilly.com/openbook/opensources/book/appa.html](https://www.oreilly.com/openbook/opensources/book/appa.html))。这一章是相对不可知的工具，而接下来的章节将介绍具体的工具。
本章将涵盖以下主题:
*   传统的整体方法及其问题
*   微服务方法的特点
*   并行部署和开发速度
*   挑战和危险信号
*   分析当前系统
*   通过测量使用情况进行准备和调整
*   打破整体的战略规划
*   执行移动
在这一章的最后，您将熟悉我们将在整本书中使用的基本概念，在迁移到微服务的过程中如何继续和构建工作的不同策略，以及我们将在其余章节中研究的一个实际例子。
# 技术要求
本章不关注具体的技术，而是采用一种更不可知的方法。我们将讨论 Python Django 应用作为我们的整体示例。
整体的例子可以在以下网址找到:https://github . com/PacktPublishing/动手操作-Python 微服务-Docker/tree/master/chapter 01/整体。安装和运行说明可在其`README.md`文件中找到。
# 传统的整体方法及其问题
当开发一个系统时，软件的传统方法是创建一个整体。这是一个奇特的词来形容*一个单一的元素，包含一切*，这是几乎每个项目开始的方式。在 web 应用的上下文中，这意味着创建可复制的可部署代码，以便将请求定向到任何已部署的副本:
![](img/a6a73149-82f7-4880-9121-7b110bda40ad.png)
毕竟，每个项目都会从小处着手。早期进行严格的划分是不方便的，甚至是没有意义的。新创建的项目很小，可能由一个开发人员来处理。虽然设计可以适合少数人的头脑，但在系统的各个部分之间建立严格的界限会适得其反。
There are a lot of options for running a web service, but one will typically consist of one or more servers (physical boxes, virtual machines, and cloud instances such as EC2 and more)  running a  web server application (such as NGINX or Apache) to direct requests directed to HTTP port `80` or HTTPS port `443` toward one or more Python workers (normally, through the WSGI protocol), run by `mod_wsgi`—[https://github.com/GrahamDumpleton/mod_wsgi](https://github.com/GrahamDumpleton/mod_wsgi) (Apache only), uWSGI, GNUnicorn, and so on.
If more than one server is used, there will be a load balancer to spread the load among them. We'll talk about them later in this chapter. The server (or load balancer) needs to be accessible on the internet, so it will have a dedicated DNS and a public IP address.
In other programming languages, the structure will be similar: a frontend web server that exposes the port in HTTP/HTTPS, and a backend that runs the monolith code in a dedicated web worker. 
但是事情变了，成功的软件成长了，一段时间后，拥有一大堆代码可能不是构建一个大项目的最佳方式。
无论如何，单片可以有内部结构，这意味着它们不一定进入意大利面代码的领域。它可能是结构完美的代码。整体的定义是需要将系统作为一个整体来部署，而不能进行部分部署。
Spaghetti code is a common way of referring to code that lacks any structure and is difficult to read and follow.
随着整体的增长，它的一些局限性将开始显现:
*   **代码会变大**:如果模块之间没有严格的界限，开发人员会开始在理解整个代码库时出现问题。虽然良好的实践可以有所帮助，但复杂性自然会增加，使得以某些方式更改代码变得更加困难，并增加了微妙的 bug。运行所有测试将变得缓慢，降低任何持续集成系统的速度。
*   **资源的低效利用**:每个单独部署的 web worker 将需要整个系统工作所需的所有资源，例如，任何一种请求的最大内存量，即使一个需要大量内存的请求很少，只有几个 worker 就足够了。CPU 也可能发生同样的情况。如果单块连接到一个数据库，每个工人都需要连接到它，不管它是否经常使用，等等。
*   **开发可扩展性问题**:即使系统被完美设计为横向可扩展(可以无限增加新的工作人员)，随着系统的增长和开发团队的壮大，不踩对方的脚趾头，开发也会越来越难。一个小团队很容易协调，但是一旦几个团队在同一个代码库上工作，冲突的概率就会增加。除非执行严格的纪律，否则在所有权和责任方面给团队强加界限也会变得模糊。无论如何，团队需要积极协调，这降低了他们的独立性和速度。
*   **部署限制**:部署方法需要跨团队共享，团队不能单独负责每个部署，因为部署可能会涉及多个团队的工作。部署问题会使整个系统瘫痪。
*   **技术的相互依赖性**:任何新技术都需要与整体中使用的技术相适应。例如，一项新技术，一个完美解决特定问题的工具，由于技术的不匹配，可能很难添加到整体中。更新依赖项也会导致问题。例如，Python 新版本(或子模块)的更新需要使用整个代码库。一些必要的维护任务，如安全补丁，可能会导致问题，因为单块已经使用了库的特定版本，如果更改，该版本将会崩溃。适应这些变化也需要额外的工作。
*   **系统一小部分的 bug 可以拖垮整个服务**:由于服务是一个整体，任何影响稳定性的关键问题都会影响到一切，难以产生优质的服务策略或造成降级的结果。
正如你在例子中看到的，大部分的整体问题都是不断增长的问题。除非系统有相当大的代码库，否则它们并不真正重要。有些东西在单片中工作得非常好，例如，因为代码中没有边界，所以代码可以非常快速有效地更改。但是随着团队的成长，越来越多的开发人员在系统中工作，边界有助于定义目标和责任。从长远来看，过多的灵活性会成为一个问题。
# 微服务方法的特点
整块的方法一直有效，直到它不起作用为止。但是，有什么选择呢？这就是微服务架构进入场景的地方。
遵循微服务架构的系统*是松散耦合的专业服务的集合，这些服务协同工作以提供全面的服务*。让我们用更具体的术语来划分一下定义:
1.  专门服务的集合，意味着有不同的、定义良好的模块。
2.  **松散耦合**，意味着每个微服务都可以独立部署。
3.  **协同工作**—每个微服务都能够与其他人通信。
4.  提供全面的服务，因为我们的微服务系统将需要复制使用整体方法提供的相同功能。它的设计背后有一个意图。
与上图相反，微服务体系结构如下所示:
![](img/037b0910-8b4b-48af-b863-4c1ece183ba4.png)
每个外部请求将被引导至**微服务 A** 或**微服务 B** ，每个微服务专门处理特定类型的请求。在某些情况下，**微服务 B** 与**微服务 C** 通信，不能直接从外部获得。请注意，每个微服务可能有多个工作人员。
这种架构有几个优点和含义:
1.  如果微服务之间的通信是通过标准协议完成的，那么每个微服务都可以用不同的语言进行编程。
Throughout the book, we will use HTTP requests with data encoded in JSON to communicate between microservices. Though there are more options, this is definitively the most standard and widely-used option, as virtually every widely-used programming language has good support for it.
这在专门的语言对于专门的问题是理想的情况下非常有用，但是限制它的使用以便它被包含，而不需要公司的剧烈变化。
2.  更好的资源利用率——如果**微服务 A** 需要更多内存，我们可以减少工作副本的数量。虽然在一个整体上，每个工作人员需要最大限度的资源分配，但现在每个微服务只使用整个系统中其部分所需的资源。例如，可能其中一些不需要连接到数据库。每个单独的元素都可以被调整，甚至可能在硬件级别。
3.  每个服务都比较小，可以独立处理。这意味着需要维护的代码行更少，构建更快，设计更简单，需要维护的技术债务更少。服务之间不存在依赖性问题，因为每个服务都可以按照自己的速度定义和移动它们。执行重构可以以更可控的方式完成，因为它们不会影响整个系统。此外，每个微服务都可以改变它所使用的编程语言，而不会影响其他微服务。
From a certain point of view, the microservices architecture is similar to the UNIX philosophy, applied to web services: write each program (service) to do one thing and do it well, write programs (services) to work together and write programs (services) to handle text streams (HTTP calls), because that is a universal interface.
4.  一些服务可以对外部访问隐藏。比如**微服务 C** 只被其他服务调用，不对外调用。在某些情况下，这可以提高安全性，减少敏感数据或服务的攻击面。
5.  由于系统是独立的，一个系统中的稳定性问题不会完全停止系统。这减少了关键响应，并限制了灾难性故障的范围。
6.  每个服务都可以由不同的开发人员独立维护。这允许并行开发和部署，增加了公司可以完成的工作量。这要求公开的 API 向后兼容，我们将在后面描述。
# Docker 容器
微服务架构对于支持它的平台是相当不可知的。它可以部署在专用数据中心、公共云中的旧物理盒上，也可以以容器形式部署。
但是，有一种趋势是使用容器来部署微服务。容器是一个打包的软件包，它封装了运行所需的一切，包括所有的依赖关系。它只需要一个兼容的操作系统内核就可以自主运行。
Docker 是 web 应用容器的主角。它有一个极其活跃的社区来支持它，也有很好的工具来处理各种操作。我们将学习如何使用 Docker 工作和操作。