# Understanding and Developing Role-Based Administrative Models

**Author: Jason Crampton**

## Abstract
Access control data structures must evolve over time to reflect changes in security policies and personnel. An administrative model defines the rules that govern state changes in an access control model and its associated data structures. This paper introduces a powerful framework for describing role-based administrative models, based on the concept of administrative domains and criteria that control state changes to preserve certain domain features. We define multiple sets of criteria, each controlling the impact of state changes on administrative domains, leading to different role-based administrative models. Using this framework, we identify unexpected connections between the ARBAC97 and RHA (Role Hierarchy Administration) models and compare their properties, suggesting improvements for both.

**Categories and Subject Descriptors**
- D.4.6 [Operating Systems]: Security and Protection—Access controls
- H.2.7 [Database Management]: Database Administration—Security, integrity, and protection
- K.6.5 [Management of Computing and Information Systems]: Security and Protection

**General Terms**
- Security, Theory

**Keywords**
- Role-based access control, role-based administration, administrative scope, administrative domain, RHA, ARBAC97

## 1. Introduction
An access control mechanism is a component of a computer system used to limit the access that authenticated and authorized users have to system resources. An access control model typically defines a collection of sets, functions, and relations representing elements of the access control mechanism. For example, the Harrison-Ruzzo-Ullman (HRU) model includes the set of objects \( O \), the set of subjects \( S \), the set of access rights \( A \), and the protection matrix \( M : S \times O \rightarrow 2^A \).

Components can be static or dynamic. A static component, like the set of access rights \( A \) in the HRU model, does not change over time. Conversely, a dynamic component, such as the set of subjects \( S \), changes over time. The state of a model can be represented as a tuple \( (C_1, \ldots, C_n) \), where each \( C_j \) is a dynamic component. In the HRU model, the state is \( (S, O, M) \), with the set of access rights being static.

An administrative model for an access control mechanism defines a decision process to determine whether a request to change the state is permitted. Typically, it is defined by a fixed set of commands, each containing a conditional statement and a body executed if the condition is true. The body consists of atomic operations that modify dynamic components. In the HRU model, the conditional statement checks for the presence of access rights in the matrix, and the atomic operations modify the matrix's rows, columns, or entries.

Inspired by early work at MITRE Corporation and NIST, role-based access control (RBAC) has been extensively researched, resulting in several important models, including RBAC96 and the NIST model. These ideas were consolidated into the ANSI RBAC standard. Many commercial products, such as Trusted Solaris, Windows Authorization Manager, Oracle 9, and Sybase Adaptive Server, implement RBAC.

Despite the enthusiasm for RBAC, the use of RBAC principles to manage RBAC systems has been less studied. The most mature decentralized role-based administrative models are ARBAC97 and the RHA model. Both models are designed to interoperate with RBAC96 and can be applied to ANSI RBAC systems, leveraging the role hierarchy to control changes. However, the motivation for these models has been somewhat vague, with ARBAC97 aiming to prevent "anomalous side effects" and RHA preventing "unexpected side effects due to inheritance."

In this paper, we rigorously analyze the properties that define the behavior of role-based administrative models. Our analysis is based on the concept of an administrative domain, a self-contained sub-hierarchy of the role hierarchy. We prove that administrative domains are pairwise nested or disjoint and define what it means for them to be preserved. This enables us to define multiple sets of criteria that impose constraints on the functionality of role-based administrative models. Each set defines a mode of operation, allowing developers to choose the best-suited administrative model. We classify role-based administrative models according to their permissiveness and create a framework for developing new models.

One significant finding is a fundamental and unexpected connection between RHA and ARBAC97. We find that RHA is the most permissive, while ARBAC97 is among the most restrictive. Our analysis provides a roadmap from RHA to ARBAC97, identifying interesting features along the way. We also establish that ARBAC97 is more restrictive than necessary and point out weaknesses in its original formulation.

In the next section, we review the RBAC96 model and relevant mathematics, specifying the operational semantics of the operations used in a role-based administrative model. In Section 3, we define administrative scope, the central concept in RHA, and show how it leads to the concept of an administrative domain. We prove that administrative domains must be either disjoint or nested and introduce the idea of a domain tree. In Section 4, we formally define what it means for an administrative domain to be preserved by an administrative operation and introduce the concepts of local, hierarchical, and universal domain preservation. We then introduce three different sets of criteria and state important results related to the preservation of administrative domains. In Section 5, we introduce the idea of an administrative role and define a template for constructing role-based administrative models, noting the connection between this template and RHA. In Section 6, we describe the connection between our framework and ARBAC97, provide a concise characterization of ARBAC97, identify flaws, and suggest remedies. We conclude with an appraisal of our framework and describe opportunities for further research.

## 2. Preliminaries

### 2.1 RBAC96
RBAC96 is a family of access control models that assumes the existence of a set of roles \( R \), a set of permissions \( P \), a set of users \( U \), and two relations \( UA \subseteq U \times R \) and \( PA \subseteq P \times R \) that bind users and permissions to roles. These sets and relations form the basis for RBAC0, the simplest model in the RBAC96 family. A request by a user \( u \) to invoke permission \( p \) is granted if there exists a role \( r \) such that \( (u, r) \in UA \) and \( (p, r) \in PA \).

RBAC1 introduces the concept of a role hierarchy, modeled as a partial order on the set of roles. The role hierarchy allows a role \( r \) to inherit the permissions assigned to any more junior role, reducing the administrative burden by minimizing explicit assignments in the \( UA \) and \( PA \) relations. A request by a user to invoke permission \( p \) is granted if there exist roles \( r \) and \( r' \) such that \( (u, r) \in UA \), \( (p, r') \in PA \), and \( r \leq r' \). (RBAC0 and RBAC1 have recently been superseded by the core and hierarchical components of the ANSI RBAC standard.)

### 2.2 Partial Orders
Let \( (X, \leq) \) be a partially ordered set and let \( x, y \in X \). We write \( x < y \) if \( x \leq y \) and \( x \neq y \). We may write \( y \geq x \) whenever \( x \leq y \). We write \( x \parallel y \) if \( x \not\leq y \) and \( y \not\leq x \). We say \( Y \) is an antichain if for all \( y, z \in Y \), \( y \neq z \) implies \( y \parallel z \). We write \( [x, y] \) to denote the range \( \{z \in X : x \leq z \leq y\} \). We say \( y \) covers \( x \), or \( x \) is covered by \( y \), denoted \( x \prec y \), if \( x < y \) and for all \( z \in X \), \( x \leq z < y \) implies \( x = z \). In other words, \( x \prec y \) means “\( y \) is an immediate parent of \( x \)”.

The Hasse diagram of \( X \) is the directed graph of the covering relation \( (X, \prec) \): transitive relationships in the poset are implied by paths in the Hasse diagram. In the context of RBAC, the Hasse diagram represents the role hierarchy.

We define \( \downarrow x = \{y \in X : y \leq x\} \) and \( \uparrow x = \{y \in X : x \leq y\} \). For \( Y \subseteq X \), we define \( \downarrow Y = \bigcup_{y \in Y} \downarrow y \) and \( \uparrow Y = \bigcup_{y \in Y} \uparrow y \). The interested reader is referred to the book by Davey and Priestley for an introduction to lattice and order theory [7].

In the context of RBAC, \( \downarrow r \) represents the set of roles available to a user assigned to \( r \), and \( \uparrow r \) represents the set of roles to which the permission \( p \) is available if \( p \) is assigned to \( r \). The expression \( \downarrow r \cup \uparrow r \) will be used extensively once we introduce the concept of administrative scope and will be abbreviated to \( \mathcal{R}(r) \).

### 2.3 Administrative Operations
Role-based access control models typically include a role hierarchy, modeled as a partial order on the set of roles. The role hierarchy is represented as the set of directed edges in the Hasse diagram of \( R \). There are two dynamic components: \( R \) and the covering relation on \( R \). This gives rise to four hierarchy operations:

- **addEdge(a, c, p)**: Adds the directed edge \( (c, p) \) to the hierarchy, where \( c, p \in R \).
- **deleteEdge(a, c, p)**: Deletes the directed edge \( (c, p) \) from the hierarchy.
- **addRole(a, r, C, P)**: Creates the role \( r \) with immediate children \( C \subseteq R \) and immediate parents \( P \subseteq R \).
- **deleteRole(a, r)**: Deletes the role \( r \in R \).

Additionally, we have the following assignment operations, each assumed to be performed by an administrative role \( a \):

- **addUA(a, u, r)**: Adds the pair \( (u, r) \) to the \( UA \) relation.
- **deleteUA(a, u, r)**: Deletes the pair \( (u, r) \) from the \( UA \) relation.
- **addPA(a, p, r)**: Adds the pair \( (p, r) \) to the \( PA \) relation.
- **deletePA(a, p, r)**: Deletes the pair \( (p, r) \) from the \( PA \) relation.

Collectively, we refer to these eight operations as administrative operations. In this paper, we focus on the hierarchy operations; experience has shown that incorporating the other operations is straightforward [6].

Informally, executing a hierarchy operation affects one or more roles in the hierarchy. The set of affected roles is not always immediately obvious due to the transitivity implied by the role hierarchy. It may be necessary to "repair" the hierarchy relation following addEdge and deleteEdge operations to remove redundancy and preserve inheritance, respectively. Table 1 summarizes the changes to \( R \) and the hierarchy caused by hierarchy operations, assuming only the covering relation is stored.

## 3. Administrative Scope
The RBAC96 model does not provide a model for controlling updates to the role hierarchy and assignment relations. This was addressed by the ARBAC97 model, which provides a role-based model for administering a role-based access control system. However, ARBAC97 struggles to manage many types of hierarchies [6, Section 8]. Crampton and Loizou introduced the RHA model as a more flexible and widely applicable alternative to ARBAC97 [6].

In RBAC0, the only dynamic component is the set of roles, so we only require two operations: one to add a role and one to delete a role. Of course, the full order relation could be stored, which would simplify some operations but complicate others.