title:Understanding and developing role-based administrative models
author:Jason Crampton
Understanding and Developing
Role-Based Administrative Models
Information Security Group, Royal Holloway, University of London, England
Jason Crampton
ABSTRACT
Access control data structures generally need to evolve over
time in order to reﬂect changes to security policy and person-
nel. An administrative model deﬁnes the rules that control
the state changes to an access control model and the data
structures that model deﬁnes. We present a powerful frame-
work for describing role-based administrative models. It is
based on the concept of administrative domains and criteria
that control state changes in order to preserve certain fea-
tures of those domains. We deﬁne a number of diﬀerent sets
of criteria, each of which control the eﬀect of state changes
on the set of administrative domains and thereby lead to dif-
ferent role-based administrative models. Using this frame-
work we are able to identify some unexpected connections
between the ARBAC97 and RHA administrative models and
to compare their respective properties. In doing so we are
able to suggest some improvements to both models.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Ac-
cess controls; H.2.7 [Database Management]: Database
Administration—Security, integrity and protection; K.6.5
[Management of Computing and Information Sys-
tems]: Security and Protection
General Terms
Security, Theory
Keywords
role-based access control, role-based administration, admin-
istrative scope, administrative domain, RHA, ARBAC97
1.
INTRODUCTION
An access control mechanism is a component of a com-
puter system that is used to limit the access that authenti-
cated and authorized users have to the resources provided
by that system. An access control model typically deﬁnes a
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
collection of sets, functions and relations that represent ele-
ments of an access control mechanism. We will refer to such
sets as components of the access control model. The com-
ponents of the Harrison-Ruzzo-Ullman (HRU) model [10],
for example, are the set of objects O, the set of subjects
S, the set of access rights A, and the protection matrix
M : S × O → 2A.
A component can be static or dynamic: a static compo-
nent is one that doesn’t change over time, such as the set of
access rights A in the protection matrix model; conversely, a
dynamic component, such as the set of subjects S in the pro-
tection matrix model, does change over time. The state of a
model can be thought of as a tuple (C1, . . . , Cn), where Cj
is a dynamic component in the model. In the HRU model,
for example, the state is deﬁned to be the tuple (S, O, M );
the set of access rights is static.
An administrative model for an access control mechanism
deﬁnes a decision process that determines whether a request
to change the state is permitted. Typically, an administra-
tive model is deﬁned by a ﬁxed set of commands, each com-
mand containing a conditional statement and a body that is
executed if the conditional statement evaluates to true. The
body will comprise a number of atomic operations each of
which changes a dynamic component of the associated access
control model. In the HRU model, for example, the condi-
tional statement checks for the presence of access rights in
the matrix and the atomic operations make changes to the
rows, columns or entries of the matrix.
[16], the role graph model
Inspired by early work at MITRE Corporation [1] and
NIST [8], role-based access control (RBAC) has been the
subject of considerable research in recent years result-
including the RBAC96
ing in several important models,
model
[13], and the NIST
model [9]. Many of these ideas were recently consolidated
to form the basis for the ANSI RBAC standard [2]. A num-
ber of commercial products, such as Trusted Solaris, Win-
dows Authorization Manager, Oracle 9 and Sybase Adaptive
Server, implement RBAC.
Despite the enthusiasm for RBAC, the use of RBAC prin-
ciples to manage RBAC systems has been less widely stud-
ied. The models cited above, for example, rely on centralized
procedures to change dynamic components of the respective
models. The most mature decentralized role-based adminis-
trative models are ARBAC97 [15] and the RHA (role hier-
archy administration) model [6]. Both models are designed
to inter-operate with RBAC96, but could also be applied to
ANSI RBAC systems, and both models exploit the structure
of the role hierarchy to control changes. Nevertheless, the
motivation for the development and design of these models
has been somewhat vague: the creators of ARBAC97, for
example, talk of the need to prevent “anomalous side ef-
fects” arising from unconstrained changes to the hierarchy;
similarly, Crampton and Loizou state that RHA prevents
“unexpected side eﬀects due to inheritance elsewhere in the
hierarchy”, although this notion is formalized to some ex-
tent.
In this paper, we undertake a rigorous analysis of the
properties that deﬁne the behaviour of role-based admin-
istrative models. The analysis is based on the notion of
an administrative domain, a self-contained sub-hierarchy of
the role hierarchy. Our ﬁrst major result is to prove that
administrative domains are pairwise nested or disjoint. We
then deﬁne what it means for administrative domains to
be preserved. This enables us to deﬁne a number of sets
of criteria that impose constraints on the functionality of a
role-based administrative model. Each of these sets deﬁnes a
mode of operation for a role-based administrative model, en-
abling systems and application developers to choose the ad-
ministrative model best suited to their requirements. Each
set of criteria requires that administrative operations must
preserve certain structural properties of administrative do-
mains. We might insist, for example, that an administrative
role can make changes to its own administrative domain and
any domains contained within it. These criteria enable us to
classify role-based administrative models according to their
permissiveness, and to create a framework for developing
role-based administrative models.
One of the most striking consequences of our analysis is
to reveal a fundamental and hitherto unexpected connec-
tion between RHA and ARBAC97. In particular, we ﬁnd
that RHA is the most permissive of administrative models,
whereas ARBAC97 is among the most restrictive.
Infor-
mally, our analysis enables us to draw a road map from RHA
to ARBAC97, identifying interesting features (new models)
along the way. We also establish that ARBAC97 is more re-
strictive than is necessary and point out a number of weak-
nesses in the original formulation.
In the next section we brieﬂy review the RBAC96 model
and some relevant mathematics. We also specify the op-
erational semantics of the operations used in a role-based
administrative model.
In Section 3 we deﬁne administra-
tive scope, the central concept in RHA, and show how this
immediately leads to the concept of an administrative do-
main. We prove that administrative domains must be ei-
ther disjoint or nested and introduce the idea of a domain
tree. In Section 4 we formally deﬁne what it means for an
administrative domain to be preserved by an administra-
tive operation and introduce the idea of local, hierarchical
and universal domain preservation. We also deﬁne what
it means for an operation to be autonomy preserving. We
then introduce three diﬀerent sets of criteria and state a
number of important results in relation to the preservation
of administrative domains.
In Section 5 we introduce the
idea of an administrative role and deﬁne a template for con-
structing role-based administrative models. In this section
we note the connection between this template and RHA.
In Section 6 we describe the connection between our frame-
work and ARBAC97, and provide a concise characterization
of ARBAC97. We also identify a number of ﬂaws in AR-
BAC97 and describe appropriate remedies. We conclude
with an appraisal of our framework and describe the numer-
ous opportunities for further research in this area.
2. PRELIMINARIES
2.1 RBAC96
RBAC96 is a family of access control models that assumes
the existence of a set of roles R, a set of permissions P , a set
of users U , and two relations UA ⊆ U × R and PA ⊆ P × R
that bind users and permissions to roles [16]. These sets
and relations form the basis for RBAC0, the simplest model
in the RBAC96 family. A request by a user u to invoke
permission p is granted if there exists a role r such that
(u, r) ∈ UA and (p, r) ∈ PA.
RBAC1 introduces the concept of a role hierarchy, which
is modelled as a partial order on the set of roles. The role hi-
erarchy permits a role r to inherit the permissions assigned
to any more junior role. This signiﬁcantly reduces the ad-
ministrative burden by reducing the number of explicit as-
signments that need to be stored in the UA and PA relations.
A request by a user to invoke permission p is granted if there
) ∈ PA and
exist roles r and r(cid:1)
r (cid:1) r(cid:1)
. (RBAC0 and RBAC1 have recently been superseded
by the core and hierarchical components of the ANSI RBAC
standard [2].)
such that (u, r) ∈ UA, (p, r(cid:1)
2.2 Partial orders
Let (cid:4)X, (cid:2)(cid:5) be a partially ordered set and let x, y ∈ X.
We write x < y if x (cid:2) y and x (cid:6)= y. We may write y (cid:1) x
whenever x (cid:2) y. We write x (cid:7) y if x (cid:6)(cid:2) y and y (cid:6)(cid:2) x. We say
Y is an antichain if for all y, z ∈ Z, y (cid:6)= z implies that y (cid:7) z.
We write [x, y] to denote the range {z ∈ X : x (cid:2) z (cid:2) y}.
We say y covers x, or x is covered by y, denoted x (cid:1) y, if
x < y and for all z ∈ X, x (cid:2) z < y implies x = z. In other
words, x(cid:1)y is shorthand for “y is an immediate parent of x”.
The Hasse diagram of X is the directed graph of the covering
relation (X, (cid:1)):
in other words, transitive relationships in
the poset are implied by paths in the Hasse diagram.
In
the context of RBAC, the Hasse diagram represents the role
hierarchy.
We deﬁne (cid:3)x = {y ∈ X : y (cid:1)x} and (cid:4)x = {y ∈ X : x(cid:1)y}.
In other words, (cid:3)x is the set of immediate children of x and
(cid:4)x is the set of immediate parents of x. It is easy to show
that (cid:3)x and (cid:4)x are antichains for all x ∈ X. We deﬁne
↓x = {y ∈ X : y (cid:2) x} and ↑x = {y ∈ X : x (cid:2) y}. For
Y ⊆ X, we deﬁne
↓Y =
and ↑Y =
(cid:1)
↑y.
↓y
y∈Y
(cid:1)
y∈Y
The interested reader is referred to the book by Davey and
Priestley for an introduction to lattice and order theory [7].
In the context of RBAC, ↓r represents the set of roles
available to a user assigned to r and ↑r represents the set of
roles to which the permission p is available if p is assigned
to r. The expression ↓r ∪ ↑r will be used extensively once
we introduce the concept of administrative scope, and will
be abbreviated to (cid:11)r.
2.3 Administrative operations
Role-based access control models typically include a role
hierarchy, which is modelled as a partial order on the set of
roles. The role hierarchy is represented as the set of directed
edges in the Hasse diagram of R (an example is shown in
Figure 1). Hence, there are two dynamic components: R
and the covering relation on R. This gives rise to the four
hierarchy operations:1
• addEdge(a, c, p), which adds the directed edge (c, p) to
the hierarchy, where c, p ∈ R;
• deleteEdge(a, c, p), which deletes the directed edge
(c, p) from the hierarchy;
• addRole(a, r, C, P ), which creates the role r with imme-
diate children C ⊆ R and immediate parents P ⊆ R;
• deleteRole(a, r), which deletes the role r ∈ R.
In addition we have the following assignment operations,
each of which is assumed to be performed by administrative
role a.
• addUA(a, u, r), which adds the pair (u, r) to the UA
relation;
• deleteUA(a, u, r), which deletes the pair (u, r) from the
UA relation;
• addPA(a, p, r), which adds the pair (p, r) to the PA
relation;
• deletePA(a, p, r), which deletes the pair (p, r) from the
PA relation.
Collectively we refer to these eight operations as administra-
tive operations. In this paper, we will focus on the hierarchy
operations; experience has shown that it is straightforward
to incorporate the other operations [6].
Informally, the execution of a hierarchy operation will af-
fect one or more roles in the hierarchy. The set of roles that
are aﬀected by an operation is not necessarily immediately
obvious, because of the transitivity implied by the role hi-
erarchy. It may be necessary, for example, to “repair” the
hierarchy relation following addEdge and deleteEdge opera-
tions in order to remove redundancy and to preserve inher-
itance, respectively. Table 1 summarizes the changes to R
and RH caused by hierarchy operations. The approach de-
scribed in this table assumes that only the covering relation
is stored.2
3. ADMINISTRATIVE SCOPE
The RBAC96 model does not provide any model for con-
trolling updates to the role hierarchy and the assignment
relations. This omission was addressed by the ARBAC97
model [15], which provides a role-based model for admin-
istering a role-based access control system. However, the
ARBAC97 model suﬀers from its inability to manage many
types of hierarchies [6, Section 8]. Crampton and Loizou
introduced the RHA model3 as a more ﬂexible and widely
applicable alternative to ARBAC97 [6].
1In RBAC0, the only dynamic component is the set of roles
(since the set is unordered), so we only require two opera-
tions: one to add a role and one to delete a role.
2Of course, the full order relation could be stored, which