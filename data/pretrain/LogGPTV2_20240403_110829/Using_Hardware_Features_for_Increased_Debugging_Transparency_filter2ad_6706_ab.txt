debugging.
Virt-ICE [9] is a remote debugging framework similar to
MALT. It leverages emulation technology to debug malware
in a VM and communicates with a debugging client over a
TCP connection. As it debugs the system outside of the VM,
it is capable of analyzing rootkits and other ring 0 malware
transparently. However, since it uses a VM, a malware may
refuse to unpack itself in the VM. MALT relies on the BIOS
integrity and does not employ any virtualization. Thus, we are
capable of achieving higher transparency while debugging and
analyzing code.
There is a vast array of popular debugging tools. For
instance, IDA Pro [19] and OllyDbg [31] are popular debug-
gers running within the operating system focusing on ring 3
malware. DynamoRIO [32] is a process virtualization system
implemented using software code cache techniques. It executes
on top of the OS and allows users to build customized dynamic
instrumentation tools. Similar to MALT, WinDbg [33] uses a
remote machine to connect to the target machine using serial
or network communications. However, these options require
special booting conﬁguration or software running within the
operating system, which is easily detected by malware. Table II
summarizes the differences between MALT and other malware
debugging and analysis systems. The source lines of code
(SLOC) are obtained from [34], and we use the Linux kernel
as the OS in Table II.
B. SMM-based Systems
In recent years, SMM-based research has appeared in the
security literature. For instance, SMM can be used to check
the integrity of higher level software (e.g., hypervisor and OS).
HyperGuard [35], HyperCheck [36], and HyperSentry [37] are
integrity monitoring systems based on SMM. SPECTRE [38]
uses SMM to introspect the live memory of a system for
malware detection. Another use of SMM is to reliably acquire
system physical memory for forensic analysis [39], [40].
However, MALT differs from previous SMM-based systems
in these aspects: (1) MALT is the ﬁrst system that uses
SMM for debugging, and its intended usage involves with
human interaction; (2) it addresses the debugging transparency
problem by mitigating its side effects, while previous systems
do not consider this challenging problem; (3) it uses a variety
of methods to trigger SMIs, and the triggering frequency can
be instruction-level. In addition, other security researchers
have proposed using SMM to implement attacks. In 2004,
5757
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
Duﬂot [41] demonstrated the ﬁrst SMM-based attack to bypass
the protection mechanism in OpenBSD. Other SMM-based
attacks focus on achieving stealthy rootkits [42], [43]. For
instance, the National Security Agency (NSA) uses SMM to
build an array of rootkits including DEITYBOUNCE for Dell
and IRONCHEF for HP Proliant servers [44]. However, these
attacks require bypassing or unlocking SMRAM protection.
MALT locks the SMRAM in the BIOS code. We will discuss
bypassing SMRAM protection in Section IX.
IV. THREAT MODEL AND ASSUMPTIONS
A. Threat Model
MALT is intended to transparently analyze a variety of
code that is capable of detecting or disabling typical malware
analysis or detection tools. We consider two types of powerful
malware in our threat model: armored malware and rootkits.
1) Armored Malware: Armored malware or evasive mal-
ware [30] is a piece of code that employs anti-debugging
techniques. Malicious code can be made to alter its be-
havior if it detects the presence of a debugger. There are
many different detection techniques employed by current
malware [12]. For example, IsDebuggerPresent() and
CheckRemoteDebuggerPresent() are Windows API
methods in the kernel32 library returning values based upon
the presence of a debugger. Legitimate software developers
can take advantage of such API calls to ease the debugging
process in their own software. However, malware can use these
methods to determine if it is being debugged to change or hide
its malicious behavior from analysis.
Malware can also determine if it is running in a virtual
[10], [14], [15]. For instance, Red
machine or emulator
the presence of a VM. It
Pill [28] can efﬁciently detect
executes a non-privileged (ring 3) instruction, SIDT, which
reads the value stored in the Interrupt Descriptor Table (IDT)
register. The base address of the IDT will be different in
a VM than on a bare-metal machine because there is only
one IDT register shared by both host-OS and guest-OS.
Additionally, QEMU can be detected by accessing a reserved
Model Speciﬁc Register (MSR) [7]. This invalid access causes
a General Protection (GP) exception on a bare-metal machine,
but QEMU does not.
2) Rootkits: Rootkits are a type of stealthy malicious
software. Speciﬁcally, they hide certain process information to
avoid detection while maintaining continued privileged access
to a system. There are a few types of rootkits ranging from user
mode to ﬁrmware level. For example, kernel mode rootkits run
in the operating system kernel (in ring 0) by modifying the
kernel code or kernel data structures (e.g., Direct Kernel Ob-
ject Modiﬁcation). Hypervisor-level rootkits run in ring -1 and
host the target operating system as a virtual machine. These
rootkits intercept all of the operations including hardware calls
in the target OS, as shown in Subvirt [22] and BluePill [23].
Since MALT runs in SMM with ring -2 privilege, it is capable
of debugging user mode, kernel mode, and hypervisor-level
rootkits. As no virtualization is used, MALT is immune to
hypervisor attacks (e.g., VM escape [20], [21]). However, for
ﬁrmware rootkits run in ring -2, MALT cannot detect these
kind of rootkits.
B. Assumptions
As our trusted code (SMI handler) is stored in the BIOS,
we assume the BIOS will not be compromised. We assume
the Core Root of Trust for Measurement (CRTM) is trusted so
that we can use Static Root of Trust for Measurement (SRTM)
to perform the self-measurement of the BIOS and secure the
boot process [45]. We also assume the ﬁrmware is trusted,
although we can use SMM to check its integrity [46]. After
booting, we lock the SMRAM to ensure the SMI handler code
is trusted. We discuss attacks against SMM in Section IX.
We assume the debugging client and remote machine are
trusted. Furthermore, we consider an attacker that can have
unlimited computational resources on our machine. We assume
the attacker launches a single vulnerable application that can
compromise the OS upon completing its ﬁrst
instruction.
Lastly, we assume the attacker does not have physical access
to the machines. Malicious hardware (e.g., hardware trojans)
is also out of scope.
V. SYSTEM ARCHITECTURE
Figure 1 shows the architecture of the MALT system.
The debugging client is equipped with a simple GDB-like
debugger. The user inputs basic debugging commands (e.g.,
list registers), and then the target machine executes the com-
mand and replies to the client as required. When a command
is entered,
the client sends a message via a serial cable
to the debugging server. This message contains the actual
command. While in SMM, the debugging server transmits
a response message containing the information requested by
the command. Since the target machine executes the actual
debugging command within the SMI handler, its operation
remains transparent to the target application and underlying
operating system.
As shown in Figure 1, the debugging client ﬁrst sends an
SMI triggering message to the debugging server; we reroute
a serial interrupt to generate an SMI when the message is
received. Secondly, once the debugging server enters SMM,
the debugging client starts to send debugging commands to
the SMI handler on the server. Thirdly, the SMI handler trans-
parently executes the requested commands (e.g., list registers
and set breakpoints) and sends a response message back to the
client.
The SMI handler on the debugging server inspects the
debugged application at runtime. If the debugged application
hits a breakpoint, the SMI handler sends a breakpoint hit mes-
sage to the debugging client and stays in SMM until further
debugging commands are received. Once SMM has control
of the system, we conﬁgure the next SMI via performance
counters on the CPU. Next, we will detail each component of
the MALT system.
A. Debugging Client
The client can ideally implement a variety of popular
debugging options. For example, we could use the SMI handler
5858
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
Debugging Client
Debugging Server
1) Trigger SMI
SMI
handler
GDB-like
Debugger
2) Debug command
Breakpoint
3) Response message
Debugged
application
Inspect
application
Fig. 1. Architecture of MALT
to implement the GDB protocol so that it would properly inter-
face with a regular GDB client. Similarly, we might implement
the necessary plugin for IDAPro to correctly interact with
our system. Section X discusses the prospect of combining
MALT with GDB and IDAPro. However, this would require
implementing a complex protocol within the SMI handler,
which we leave for our future work. Instead, we implement
a custom protocol with which to communicate between the
debugging client and the SMI handler. MALT implements a
small GDB-like client to simplify our implementation.
B. Debugging Server
The debugging server consists of two parts — the SMI
handler and the debugging target application. The SMI handler
implements the critical debugging features (e.g., breakpoints
and state reports), thus restricting the execution of debugging
code to System Management Mode (SMM). The debugging
target executes in Protected Mode as usual. Since the CPU
state is saved within SMRAM when switching to SMM,
we can reconstruct useful information and perform typical
debugging operations each time an SMI is triggered.
SMRAM contains architectural state information of the
thread that was running when the SMI was triggered. Since the
SMIs are produced regardless of the running thread, SMRAM
often contains a state unrelated to the debugging target. In
order to ﬁnd the relevant state information, we must solve the
well-known semantic gap problem. By bridging the semantic
gap within the SMI handler, we can ascertain the state of
the thread executing in Protected Mode. This is similar to
Virtual Machine Introspection (VMI) systems [47]. We need to
continue our analysis in the SMI handler only if the SMRAM
state belongs to a thread we are interested in debugging.
Otherwise, we can exit the SMI handler immediately. Note
that MALT does not require Protected Mode; SMM can be
initialized from other x86 modes (e.g., Real Mode), but the
semantics of the code would be different.
C. Communication
In order to implement remote debugging in our system, we
deﬁne a simple communication protocol used by the client
and server hosts. Table III shows the communication protocol
commands. These commands are derived from basic GDB
stubs, which are intended for debugging embedded software.
The commands cover the basic debugging operations upon
which the client can expand. The small number of commands
greatly simpliﬁes the process of communication within the
SMI handler.
VI. DESIGN AND IMPLEMENTATION
The MALT system is composed of two main parts: (1) the
debugging client used by the malware analyst and (2) the
debugging server, which contains the SMI handler code and
the target debugging application. In this section, we describe
how these two parts are implemented and used.
A. Debugging Client
The client machine consists of a simple command line
application. A user can direct the debugger to perform useful
tasks, such as setting breakpoints. For example,
the user
writes simple commands such as b 0xdeadbeef to set a
breakpoint at address 0xdeadbeef. The speciﬁc commands
are described in Table III. We did not implement features
such as symbols; such advanced features pose an engineering
challenge that we will address in our future work. The client
machine uses serial messages to communicate with the server.
B. Debugging Server
The target machine consists of a computer with a custom
Coreboot-based BIOS. We changed the SMI handler in the
Coreboot code to implement a simple debugging server. This
custom SMI handler is responsible for all typical debugging
functions found in other debuggers such as GDB. We im-
plemented remote debugging functions via the serial protocol
to achieve common debugging functions such as breakpoints,
step-by-step execution, and state inspection and mutation.
C. Semantic Gap Reconstruction
As with VMI systems [48], SMM-based systems encounter
the well-known semantic gap problem. In brief, SMM cannot
understand the semantics of raw memory. The CPU state saved
by SMM only belongs to the thread that was running when the
SMI was triggered. If we use step-by-step execution, there is
a chance that another application is executing when the SMI
occurs. Thus, we must be able to identify the target application
so that we do not interfere with the execution of unrelated
applications. This requires reconstructing OS semantics. Note
that MALT has the same assumptions as traditional VMI
systems [47].
In Windows, we start with the Kernel Processor Control
Region (KPCR) structure associated with the CPU, which has a
static linear address, 0xffdff000. At offset 0x34 of KPCR, there
is a pointer to another structure called KdVersionBlock,
which contains a pointer to PsActiveProcessHead. The
PsActiveProcessHead serves as the head of a doubly
and circularly linked list of Executive Process (EProcess)
structures. The EProcess structure is a process descriptor
containing critical information for bridging the semantic gap
in Windows NT kernels. Figure 2 illustrates this procedure.
In particular, the Executive Process contains the value of the
CR3 register associated with the process. The value of the CR3
register contains the physical address of the base of the page
5959
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:38 UTC from IEEE Xplore.  Restrictions apply. 
COMMUNICATION PROTOCOL COMMANDS
TABLE III
Message format
Description
R
mAAAALLLL
Wr1r2r3...rn
SAAAALLLLV...
BAAAA
C
X
KAAAA
SI, SB, SF, SN
A single byte, R is sent to request that all
registers be read. This includes all the x86 reg-
isters. The order in which they are transmitted
corresponds with the Windows trap frame. The
response is a byte, r, followed by the registers
r1r2r3r4...rn.
The byte m is sent
to request a particular
memory address for a given length. The ad-
dress, A, is a 32-bit little-endian virtual address
indicating the address to be read. The value L
represents the number of bytes to be read.
The byte W is sent to request that the SMI
handler write all of the registers. Each value
ri contains the value of a particular register.
The response byte, + is sent to indicate that it
has ﬁnished.
The command, S, is sent when the debugger
wants to write a particular address. A is the
32-bit, little-endian virtual address to write, L