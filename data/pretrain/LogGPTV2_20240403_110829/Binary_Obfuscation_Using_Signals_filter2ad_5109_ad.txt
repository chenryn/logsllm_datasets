max ∆over:
min ∆under:
edges in original program
control ﬂow edges lost due to trap conversion
bogus control ﬂow edges added
upper bound on overestimation errors
lower bound on underestimation errors
Figure 4: Efﬁcacy of obfuscation
ecuted at runtime that should be accounted for by hot
basic blocks. (The execution times in Figure 5 are for
θ = 1.0, i.e., all basic blocks with an execution count
greater than 0 are consider hot.)
If we run our obfus-
cator with θ = 0.999—which means that, in addition to
cold basic blocks, we obfuscate the hot basic blocks that
account for just a tenth of a percent of the dynamic ex-
ecution count—then the mean slowdown for the eleven
benchmarks increases to 2.38. For smaller values of θ,
the situation is far worse: at θ = 0.99 the mean slow-
down is 6.79, and at θ = 0.9 the mean slowdown climbs
to 43.39. The confusion factor increases somewhat when
θ is decreased, but even at θ = 0.9 the increase in confu-
sion is less than 10% relative to the confusion at θ = 1.0.
Program Size
Figure 6 shows the impact of obfuscation on the size of
the text and initialized data sections. It can be seen that
the size of the text section increases by factors ranging
from 1.90 (crafty) to almost 2.1 (vortex), with a mean
increase of a factor of 2.01. The relative growth in the
size of the initialized data section is considerably larger,
ranging from a factor of about 10 (crafty) to a factor of
over 58 (twolf), with a mean growth of a factor of 26.46.
The growth in the size of the initialized data is due to the
addition of the mapping tables used to compute the type
of each branch as well as its target address. However,
this large relative growth in the data section size is due
mainly to the fact that the initial size of this section is
284
16th USENIX Security Symposium
USENIX Association
PROGRAM
bzip2
crafty
gap
gcc
gzip
mcf
parser
perlbmk
twolf
vortex
vpr
GEOM. MEAN
Original Obfusc.
(T
0)
343.6
474.5
690.9
1,494.4
344.9
301.6
402.6
808.6
472.f
725.3
407.1
TEXT SECTION (KB)
Change Original Obfusc.
(D
(T
0)
1)
1
145.4
2.02
1.90
192.4
273.1
1.96
675.5
2.04
145.0
2.03
128.2
2.05
2.07
180.0
359.0
1.99
192.2
1.97
340.7
2.09
1.97
165.5
2.01
(T
1)
694.2
903.1
1,351.6
3,051.8
699.8
618.8
833.1
1,612.2
930.9
1,513.5
800.7
0)
6.4
19.7
6.8
21.9
5.8
3.3
5.7
32.8
3.3
19.8
3.4
INITIALIZED DATA SECTION (KB)
(D
/T
Change
(D
/D
0)
1
22.64
9.78
39.95
30.88
24.94
39.03
31.32
10.95
58.46
17.23
48.45
26.46
COMBINED: TEXT+DATA (KB)
Change
Original Obfusc.
(C
/C
(C
0)
0)
1
2.40
350.0
494.2
2.22
2.33
697.8
2.46
1,516.3
2.41
350.7
2.45
304.9
408.3
2.48
2.34
841.4
2.36
475.7
2.49
745.1
410.5
2.35
2.39
(C
1)
840.0
1,095.5
1,624.7
3,727.3
844.8
747.0
1,013.f
1,971.3
1,123.2
1,854.2
966.2
Figure 6: Effect of Obfuscation on Text and Data Section Sizes
not very large. When we consider the total increase in
memory requirements due to our technique, obtained as
the sum of the text and initialized data sections, we see
that it ranges from a factor of 2.22 (crafty) to about 2.5
(parser and vortex), with a mean growth of a factor of
about 2.4.
The increase in the size of the text section arises from
three sources. The ﬁrst of these is the code required to
set up and raise the trap for each obfuscated control trans-
fer instruction. The second is the junk bytes and bogus
conditional branch inserted after a trap instruction. Fi-
nally, there is the signal handler and restore code. In our
current implementation, the ﬁrst two of these sources—
the setup code for a trap and bogus code inserted after
a trap—introduces on average an additional 30 bytes of
memory for each obfuscated control transfer instruction.
This accounts for over 95% of the total increase in the
text section size. Each obfuscated control transfer also
adds three memory words (12 bytes) to the initialized
data section, accounting for the increase in the size of
this section.
Stealth
The stealth of an obfuscation refers to the difﬁculty of
distinguishing code introduced by an obfuscator from the
original program code. We estimate the stealth of our ob-
fuscations by comparing the distributions of (i) opcodes
and (ii) opcode pairs from adjacent instructions. The
points of comparison are the original program, the ob-
fuscated program (for which we know the actual instruc-
tions), and the instructions observed by the different at-
tack disassemblers we tested. The idea is to see whether
the obfuscation process introduces any atypical instruc-
tion sequence signatures that could be used to identify
the obfuscation code statically.
Figure 7 shows the distribution of individual opcodes.
Because of the large number of opcodes in the x86 archi-
tecture, we have grouped the commonly used opcodes
into 27 sets—moves, conditional jumps, and so on—and
also added sets for illegal instructions and all other in-
structions. The 29 different sets of opcodes are given
along the x-axis (“jc” denotes conditional jumps), while
the y-axis shows the percentage of instructions in any
program accounted for by that opcode. The y-axis uses a
logarithmic scale to in order to magnify the data ranges
for small percentage values. Each data point was ob-
tained by computing the opcode distribution for each of
the SPECint-2000 benchmarks in our test suite: the orig-
inal binary, the distribution in the obfuscated program
obtained from the obfuscator, and the distributions for
the disassemblies produced by each of the attack disas-
semblers. We then used these data to compute the arith-
metic mean, minimum, and maximum values of instruc-
tion percentages for that opcode across all of our test
programs. For each opcode, the dark line in Figure 7
shows the mean instruction percentage for each opcode,
together with the range of its values. This line is then
followed immediately to the right by a set of lighter lines
that show the values for the obfuscated programs as well
as those in the disassemblies obtained from the attack
disassemblers.
Figure 7 illustrates that, in most cases, the mean value
of each opcode’s range in the obfuscated code is within
the range of values in the unobfuscated benchmark code.
Calls, returns, and jumps are somewhat less frequent for
the obvious reason that we obfuscated many of those in-
structions. Conditional jumps are somewhat more fre-
quent because we added these to bogus code. On bal-
ance, however, there are no obvious outliers that an at-
tacker could use to use as a signature for where obfusca-
tions occur.
USENIX Association
16th USENIX Security Symposium
285
s
n
o
i
t
c
u
r
t
s
n
i
f
o
e
g
a
t
n
e
c
r
e
P
100.0
10.0
1.0
0.1
0.0
Unobfuscated
Obfuscator
Objdump
IDA Pro
Exhaustive
v
o
m
h
s
u
p
c
j
t
s
e
t
p
m
c
l
l
a
c
p
m
j
a
e
l
d
d
a
p
o
p
b
u
s
c
n
i
r
o
x
p
o
n
r
e
h
t
o
e
v
a
e
l
c
z
v
o
m
d
n
a
t
e
r
c
e
d
r
o
l
h
s
r
h
s
r
a
s
t
o
n
g
e
n
v
i
d
l
u
m
l
a
g
e
l
l
i
Figure 7: Obfucation Stealth I: Distribution of Individual Opcodes
Figure 8 shows the distribution of pairs of adjacent op-
codes, not including pairs involving illegal opcodes. Due
to space constraints, we show the data for just one attack
disassembler, IDA Pro; the data are generally similar for
the other attack disassemblers. Figure 8(a) shows the ac-
tual distribution of opcode pairs in the obfuscated code,
while Figure 8(b) shows the distribution for the disas-
sembly obtained from IDA Pro. To reduce visual clutter
in these ﬁgures, we plot the ranges of values for each
opcode pair in the unobfuscated code (the dark band run-
ning down the graph), but only the mean values for the
obfuscated code.
There are two broad conclusions to be drawn from Fig-
ure 8. First, as can be seen from Figure 8(a), the actual
distribution of adjacent opcode pairs in the obfuscated
code is, by and large, reasonably close to that of the orig-
inal code; however, there are a few opcode pairs, very of-
ten involving conditional jumps, that occur with dispro-
portionate frequency. The selection of obfuscation code
to eliminate such atypical situations is an area of future
work. The second conclusion is that, as indicated by Fig-
ure 8(b), the opcode-pairs in the obfuscated code are sig-
niﬁcantly more random than in the unobfuscated code,
partly because of disassembly errors caused by “junk