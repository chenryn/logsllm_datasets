nal, which means they can deviate arbitrarily from the
honest protocol to gain more reward. An alternative is a
malicious model where the attacker does anything just to
harm other miners. In this work, we are not interested
in the malicious model since i) such sustained attacks in
cryptocurrencies often require huge capital, and ii) exist-
ing centralized pools are not secure in such a model ei-
ther [9–11]. We also assume that the adversary controls
less than 50% of the computation power in the network
on which SMARTPOOL runs. This assumption rules out
double-spending via 51% attacks [1].
On the other hand, we do not make any assumption on
the centralization or trusted setup in our solution apart
from what have been made in existing cryptocurrencies 6.
2.1 Existing Solutions
In the widely adopted centralized pooled mining proto-
col, there is a pool operator who asks pool miners to
solve pool sub-puzzles by ﬁnding nonce so that the hash
satisﬁes some smaller difﬁculty d (d (cid:28) D). A solution
6Bitcoin and Ethereum have trusted setups where the ﬁrst blocks
are constructed and provided by Satoshi Nakamoto (for Bitcoin) and
Ethereum Foundation (for Ethereum).
USENIX Association
26th USENIX Security Symposium    1411
for a pool-puzzle is called a share and has some prob-
ability of being a valid solution for the main PoW puz-
zle. Once a miner in the pool ﬁnds a valid block, the re-
ward, i.e., new crypto-coins, is split among all pool min-
ers in proportion to the number of their valid submitted
shares [2].
Despite being widely used in practice, centralized
mining pools have several problems including network
centralization and transaction censorship as discussed in
Section 1. P2POOL for Bitcoin is the ﬁrst and only
deployed solution we are aware of which decentralizes
pooled mining for cryptocurrencies [8]. At a high level,
P2POOL decides on the contribution of each miner by
running an additional Nakamoto Consensus protocol to
build a share-chain between all miners in the pool. The
share-chain includes all shares submitted to the pool, one
after another (akin to the normal Bitcoin blockchain, but
each block is a share). To guarantee that each share is
submitted and credited exactly once, P2POOL leverages
coinbase transactions, which are special transactions that
pay block reward to miners (see details in Section 3.3).
P2POOL satisﬁes almost all ideal properties of a de-
centralized pool (deﬁned in Section 2) except the efﬁ-
ciency and security properties. Speciﬁcally, P2POOL en-
tails a high performance overhead since the number of
messages exchanged between miners is a scalar multi-
ple of the number of shares in the pool. When the share
difﬁculty is low, miners have to spend a lot of resources
(e.g. bandwidth, local computation) to download, and
verify each other’s shares. Figure 1 demonstrates how
adjusting the difﬁculty of shares affects the variance of
miners’ reward and the amount of resource (both band-
width and computation) consumed per miner (with 1GHs
capacity) in a decentralized pool like P2POOL. As a re-
sult, P2POOL requires high share difﬁculty in order to
reduce the number of transmitted messages. Therefore
P2POOL miners experience higher reward variance than
they would when mining with centralized pools. As dis-
cussed in [2], high variance in the reward (i.e. the supply
of money) decreases miners’ utility by making it harder
for them to predict their income and verify that their sys-
tems are working correctly. Perhaps as a result, P2POOL
has to date attracted only a few miners who comprise a
negligible fraction of Bitcoin mining power (as of June
23, 2017, the last block mined by P2POOL was 22 days
ago [8]).
The security of P2POOL’s share-chain depends on the
amount of computation power in its pool. As of this writ-
ing, P2POOL accounts for less than 0.1% of Bitcoin min-
ing power, thus P2POOL’s share chain is vulnerable to
51% attacks from adversaries who control only 0.1% of
Bitcoin mining power. Hence P2POOL may not offer
better security guarantees than centralized pools.
2.2 Our Solution and Challenges
Our solution for a decentralized pooled mining lever-
ages Ethereum smart contracts which are decentralized
autonomous agents running on the blockchain itself [17,
18]. A non-contract account has an address and balance
in Ether, the native currency for Ethereum. A smart con-
tract has, in addition, code and private persistent storage
(i.e. a mapping between variables and values). Smart
contract code is akin to a normal program which can ma-
nipulates stored variables. To invoke a contract (i.e. ex-
ecute its code) at address addr, users send a transaction
to addr with an appropriate payload, i.e. payment for the
execution (in Ether) and/or input data for the invocation.
The contract code executes correctly on the blockchain
as long as a majority of Ethereum miners faithfully fol-
low the Ethereum protocol.
At a high level, SMARTPOOL replaces the mining pool
operator with a smart contract. The smart contract acts as
a trustless bookkeeper for the pool by storing all shares
submitted by miners. When a new share is submitted, the
contract veriﬁes the validity of the share, checks that no
previous record of the share exists, and then updates the
corresponding miner’s record. We allow miners to lo-
cally generate the block template of the pool (discussed
more in Section 3.3). If a miner ﬁnds a share which is a
valid block, it will broadcast the block to the cryptocur-
rency network, the reward will be instantly credited to
SMARTPOOL. SMARTPOOL then disburses the block re-
ward fairly to all miners in the pool.
Challenges. There are several challenges in building
such a smart contract for a mining pool. We illus-
trate them by considering a straw-man solution (called
StrawmanPool) in Figure 2 which implements a decen-
tralized pool as a Ethereum smart contract. The solution
works by having a smart contract which receives all the
shares submitted by miners, veriﬁes each of them and
records number of shares one has submitted. The con-
tract has a designated address for receiving block reward.
A share is valid if it uses the contract address as the coin-
base address (i.e., the address that the block reward is
sent to) and satisﬁes the predeﬁned difﬁculty (e.g. Line
6). On each share submission, the pool veriﬁes the share
and updates the contribution statistics of the pool mem-
bers (Line 13). If a miner ﬁnds a valid block, the smart
contract distributes the reward to miners in the pool pro-
portional to their contribution by using any of the stan-
dard payout schemes [2](Line 16). The solution in Fig-
ure 2 has the following shortcomings and challenges.
• C1. The number of shares in the pool may be
large, thus resulting in an unwieldy number of mes-
sages sent to the contract. For example, it may
take 1,000,000 shares on average to get a valid
block. A na¨ıve solution might require miners to
1412    26th USENIX Security Symposium
USENIX Association
// check v a l i d i t y
if ! isValid ( s o m e S h a r e )
return false ;
// check if the share has been s u b m i t t e d
if m S u b m i t t e d S h a r e s [ s o m e S h a r e . hash ]
mapping ( uint256 = > boolean ) m S u b m i t t e d S h a r e s ;
mapping ( uint256 = > int ) m C o n t r i b u t i o n ;
f u n c t i o n s u b m i t S h a r e ( s o m e S h a r e ) returns ( boolean ){
1 c o n t r a c t S t r a w m a n P o o l {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
Figure 2: Pseudo-code of a straw-man solution which imple-
ments a mining pool in a smart contract.
m S u b m i t t e d S h a r e s [ s o m e S h a r e . hash ] = true ;
// update miner ’s c o n t r i b u t i o n
m C o n t r i b u t i o n [ msg . owner ] += 1;
// d i s t r i b u t e reward if is a valid block
if i s V a l i d B l o c k ( s o m e S h a r e )
return false ;
d i s t r i b u t e R e w a r d ( m C o n t r i b u t i o n );
return true ;
}}
create 1,000,000 transactions and send all of them
to the pool’s contract. No existing open network
agreement protocol can process that many transac-
tions within the course of a few minutes [19, 20].
On the other hand, reducing the number of shares
per block by increasing the share difﬁculty will in-
crease the variance in reward for miners, thus negat-
ing the sole advantage of pooled mining (see [2] for
more analysis on the effects of share difﬁculty).
• C2. A valid share earns miners a small amount
of reward, but miners may have to pay much more
in Ethereum gas fees when submitting their shares
to the pool. The gas fee compensates for the
storage and computation required to verify shares
and update the contract state (see [21, 22]). Thus,
StrawmanPool may render a negative income for
miners when the fee paid to submit a share out-
weighs the reward earned by the share itself.
• C3. In Ethereum, transactions are in plaintext; thus,
any network adversary can observe other miners’
transactions that include the shares and either steal
or resubmit the shares. This challenge does not ex-
ist in centralized pools where miners can establish
secure and private connections to the pools. In de-
centralized settings, such secure connections are not
immediate since i) there is no centralized operator
who can initiate secure connections to miners, and
ii) there is no PKI between miners in the pool. Thus,
a good design for a mining pool must prevent the
adversary from stealing others’ shares. Similarly,
the pool should prevent miners from over-claiming
their contribution by either re-submitting previous
shares or submitting invalid shares. Centralized
pools can efﬁciently guarantee this since the pool
manager can check every submission from miners.
• C4. This challenge is speciﬁc to the scenario when
one wishes to use SMARTPOOL for a different cryp-
tocurrency (e.g. Bitcoin) than the one on which
its contract is deployed (e.g. Ethereum). A smart
contract in Ethereum running a Bitcoin mining pool
must guarantee correct payments in Bitcoin. This
is tricky because Bitcoin miners expect to receive
rewards in Bitcoin, but Ethereum contracts can op-
erate only on balances in Ether.
3 Design
SMARTPOOL’s design can be used to implement a de-
centralized mining pool on Ethereum for many existing
target cryptocurrencies, but for ease of explanation we ﬁx
Ethereum as the target. In Section 5, we discuss how one
can use SMARTPOOL-based decentralized mining pools
for other cryptocurrencies (e.g. Bitcoin).
3.1 Approach
We brieﬂy describe how we address the challenges from
Section 2.2 in SMARTPOOL.
• SMARTPOOL guarantees the decentralization prop-
erty by implementing the pool as a smart contract.
Like any smart contract, SMARTPOOL is operated
by all miners in the Ethereum network, yet it can se-
cure other cryptocurrency networks including Bit-
coin as well as the underlying Ethereum network
itself. SMARTPOOL relies on the Ethereum’s con-
sensus protocol to agree on the state of the pool.
The security of SMARTPOOL depends exclusively
on the underlying network (i.e. Ethereum) which
runs smart contracts, not on how many users adopt
the pool.
• SMARTPOOL’s efﬁciency comes from allowing
miners to claim their shares in batches, e.g. one
transaction to the SMARTPOOL contract can claim,
say, 1 million shares. Furthermore, miners do not
have to submit data of all shares but only a few for
veriﬁcation purposes, hence the transaction fee per
share is negligible. As a result, the number of trans-
actions required to send to SMARTPOOL is several
orders of magnitude less than the number of shares
(i.e. the number of messages in P2POOL).
• We propose a simple but powerful probabilistic ver-
iﬁcation of submissions from miners. Our mech-
anism, aided by a new and efﬁcient Merkle-tree
based commitment scheme, guarantees the same av-
erage outcome as running a full veriﬁcation for each
submission by enforcing a penalty function to disin-
centivize cheating. Our mechanism detects miners
submitting duplicated shares or resubmitting shares
in different batched claims. As a result, we guar-
USENIX Association
26th USENIX Security Symposium    1413
antee fairness in that miners receive their expected
reward based on their contributions even when other
dishonest miners submit invalid shares.
• SMARTPOOL forces the miner to commit the right
set of beneﬁciary addresses in the share before min-
ing, so that it cannot be changed after a solution
is found. This commitment prevents share theft,
wherein a network participant tries to use someone
else’s solutions to pay itself.
• For the case of running an external SMARTPOOL-
based Bitcoin mining pool on top of Ethereum,
SMARTPOOL leverages the Bitcoin coinbase
transaction to guarantee that miners can mine di-
rectly in their target currency (i.e. Bitcoin) without
trusting a third party to proxy the payment (e.g. be-
tween Ethereum and Bitcoin). Nevertheless, miners
still need to acquire Ether to pay for the gas when
interacting with the SMARTPOOL smart contract.
Such costs are less than 1% of miners’ reward as
we show in our experiments with a deployment in
Ethereum testnet. Indeed SMARTPOOL operates at
lower cost than today’s centralized pools.
3.2 Overview of SMARTPOOL
SMARTPOOL is a smart contract which implements a de-
centralized mining pool for Ethereum and runs on the
Ethereum network. SMARTPOOL maintains two main
lists in its contract state — a claim list claimList and
a veriﬁed claim list verClaimList. When a miner sub-
mits a set of shares as claim for the current Ethereum
block, it is added to the claimList. This step acts as a
cryptographic commitment to the set of shares claimed
to be found by the miner. Each claim speciﬁes the num-
ber of shares the miner claims to have found, and it has
a particular structure that aids veriﬁcation in a subse-
quent step. SMARTPOOL then proceeds to verify the
validity of the claim, and once veriﬁed, it moves it to
the verClaimList. Claim veriﬁcation and payments for
veriﬁed claims happen atomically in a single Ethereum
transaction. Each claim allows miners to submit a batch
of (say, 1 million) shares. Submitted claims need to in-
clude sufﬁcient meta-data for veriﬁcation purposes. Dur-
ing the ﬁrst step of mining the shares, if a miner ﬁnds
a valid block in the target cryptocurrency, it can directly
submit the found block to the target cyrptocurrency net-
work with the SMARTPOOL address as the beneﬁciary.
Thus, miners receive payouts for their shares one or more
blocks after SMARTPOOL receives reward from the tar-
get network; and, the mechanism ensures that the cryp-
tographic commitment strictly preceeds the veriﬁcation
step (the cryptographic reveal phase).
In Section 3.4 we will discuss our veriﬁcation pro-
tocol, a key contribution of this work which enables
Field Size
(bytes)
4
32
32
20
32
32
8
8
8
Name
number
parent hash
TRIEHASH(TX list)
coinbase address
state root
extra data
timestamp
difﬁculty
nonce
Data type
uint
uint