title:Detecting Stealth Software with Strider GhostBuster
author:Yi-Min Wang and
Doug Beck and
Binh Vo and
Roussi Roussev and
Chad Verbowski
Detecting Stealth Software with Strider GhostBuster 
Yi-Min Wang, Doug Beck, Binh Vo, Roussi Roussev, and Chad Verbowski 
Microsoft Research, Redmond 
Abstract
[XG03,XG04,YC04,XA04,XS04,XP04,XW04]  pose  a 
serious  threat  to  the  future  of  the  Internet  and  the 
Stealth  malware  programs 
that 
silently 
infect 
computing industry. 
enterprise  and  consumer  machines  are  becoming  a  major 
It  is  very  difficult  to  reason  about  the  general  stealth 
threat to the future of the Internet [XZ04]. Resource hiding 
software  problem  and  to  create  solutions  because  stealth 
is  a  powerful  stealth  technique  commonly  used  by  
behavior is not well-defined. In this paper, we  focus on an 
malware  to  evade  detection  by  computer  users  and  anti-
important  subclass  of  stealth  software,  which  we  call 
malware scanners. In this paper, we focus on a subclass of 
“ghostware”  [W04]  for  ease  of  presentation.  Ghostware 
malware, 
termed  “ghostware”,  which  hide 
files, 
programs  hide  their  resources  from  the  OS-provided 
configuration  settings, processes,  and  loaded  modules 
Application  Programming  Interfaces  (APIs)  that  were 
from  the  operating  system’s  query  and  enumeration 
designed to query and enumerate them. The resources may 
Application  Programming  Interfaces  (APIs).  Instead  of 
include  files,  Windows  Registry  entries,  processes,  and 
targeting  individual  stealth  implementations,  we  describe 
loaded modules. The hiding  behavior  is typically  achieved 
a  systematic  framework  for  detecting  multiple  types  of 
through  API  interception  and  filtering  [YN04]  (e.g., 
hidden  resources  by  leveraging  the  hiding  behavior  as  a 
detection  mechanism.  Specifically,  we  adopt  a  cross-view 
diff-based approach  to ghostware detection by  comparing 
intercepting  file  enumeration  API  calls  and  removing  the 
to-be-hidden  entries  from  the returned result  set)  or Direct 
Kernel  Object  Manipulation  (DKOM,  e.g.,  removing  to-
a high-level infected  scan with a  low-level  clean  scan and 
be-hidden  processes  from  the  Active  Process  List  data 
alternatively  comparing  an  inside-the-box  infected  scan 
structure)  [YV04].  Ghostware  encompasses  at  least  three 
with an outside-the-box clean scan. We describe the design 
types  of  malware  and  commercial  software:  (1)  rootkits 
and  implementation  of  the  Strider  GhostBuster  tool  and 
[PFM+04,ZR,YO03,XP03]  and  Trojans  that  hide  their 
demonstrate  its  efficiency  and  effectiveness  in  detecting 
executable  files  and  process  instances  [ZH,ZV];  (2) 
resources  hidden  by  real-world  malware  such  as  rootkits, 
commercial key-loggers that hide their log files containing 
Trojans, and key-loggers. 
1. Introduction
keystrokes and screenshots; and (3) commercial file-hiders 
that  hide  user-specified  files  [ZHF].  Although  some  of 
these  ghostware  programs  may  have  legitimate  uses, 
resource-hiding  behavior  is  generally  considered  highly 
The  term  “stealth  malware”  refers  to  a  large  class  of 
undesirable from the user’s perspective. 
software  programs  that  try  to  hide  their  presence  from 
operating  system  (OS)  utilities  commonly  used  b y 
computer  users  and  malware  detection  software  such  as 
anti-virus  and  anti-spyware  programs.  Stealth  techniques 
range  widely  from  the  simple  use  of  hidden  file  attributes 
to  sophisticated  code  hiding  in  video  card  EEPROM  and 
bad  disk  sectors,  from  user-mode  API  interception  to 
kernel-mode  data  structure  manipulation,  and 
from 
individual  trojanized  OS  utilities  to  OS  patching  with 
system-wide  effect.  Stealth  software  presents  a  major 
challenge 
to 
trustworthy  computing  by  making 
it 
extremely  difficult  for  computer  users  to  answer  the 
There  are  two  different  approaches  to  ghostware 
detection. The first approach targets the hiding mechanism 
by, 
for  example,  detecting 
the  presence  of  API 
interceptions  [YI,ZVI,YK,YKS,YV04].  It has  at  least  two 
disadvantages:  first,  it  cannot  catch  ghostware  programs 
that  do  not  use  the  targeted  mechanism;  second,  it  may 
catch as false positives legitimate uses of API interceptions 
for 
in-memory 
software 
patching, 
fault-tolerance 
wrappers,  etc.  The  second  approach  targets  the  hiding 
behavior  by  detecting  any  discrepancies  between  “the 
truth” and “the lie”. For example, comparing the output of 
“ls”  and  “echo  *”  can  detect  an  infected  “ls”  program 
question: “Has  my  machine  been  compromised?”
Information on stealth techniques [YN04] and easy-to-use, 
[B99].
configurable 
tools 
for  providing  stealth  capabilities 
In  this paper, we propose  a  framework  for  the  second 
[ZH,ZA] are becoming increasingly available. Installations 
approach, 
called  GhostBuster, 
that 
systematically 
of  such  unwanted  software  on  user  machines  through 
accommodates  multiple  resource  types  and  provides  a 
vulnerability  exploits  [XS04,YB04],  spam  emails  [XG04], 
convenient  inside-the-box  solution  as  well  as  a  more 
and  bundling  with  freeware  are  becoming  widespread 
fundamental  outside-the-box  solution. To detect  each  type 
[XZ04].  The 
increasing  uses  of  malware-infected 
of hidden resource, we divide the problem into two parts.  
machines in computer crimes such as phishing, spamming, 
First,  we  perform  both  a  high-level  and  a  low-level 
DOS 
attacks, 
keystroke 
logging, 
etc. 
scan of the resources in an inside-the-box solution. When a 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:20 UTC from IEEE Xplore.  Restrictions apply. 
ghostware  program  implements  its  hiding  mechanism 
diff  targets  only  ghostware  and  usually  has  zero  or  very 
between  the  two  levels  as  shown  in  Figure  1,  the  high-
few  false  positives  because  legitimate  programs  rarely 
level  scan  contains  “the  lie”  and  the  low-level  scan 
hide. 
contains  “the  truth”  so  that  their  difference  exposes  the 
This paper is organized as follows. Section 2 describes 
hidden resources. Specifically, the “Master File Table”, the 
stealth  techniques  that  are  used  to  hide  files,  analyzes  the 
“Raw  Hive  Files”,  and  the  “Kernel  Process  List”  are  the 
implementations of actual file-hiding ghostware programs, 
low-level  resources  that  we  scan  to  detect  hidden  files, 
presents the design and implementation of GhostBuster for 
Registry  entries,  and  processes,  respectively.  A  major 
hidden-file  detection,  and  evaluates  its  performance. 
advantage  of  such  a  completely  inside-the-box  solution  is 
Sections  3  and  4  apply  the  same  framework  to  the 
that  it  is  convenient,  efficient  and  scalable:  users  can 
detection  of  ghostware  programs  that  hide  Windows 
quickly  scan  their  machines  daily  or  as  needed  without 
Registry  entries,  processes,  and  modules,  respectively. 
having  to  reboot  and  corporate  IT  organizations  can 
Section  5  presents  GhostBuster  extensions  designed  to 
remotely  deploy  the  solution  on  a  large  number  of 
avoid  being  targeted  by  malware  and  for  automating  the 
desktops  without 
requiring  user 
cooperation.  A 
outside-the-box  detection  process.  Although  the  main 
disadvantage  is  that  a  ghostware  program  running  with 
focus  of  this paper  is  on Windows ghostware, we  show  in 
sufficient privilege can always try to defeat the solution by 
Section 5  that  the GhostBuster  approach  can  be  applied  to 
interfering  with  the  low-level  scan.  Another  related  issue 
detecting    actual  Linux/Unix  ghostware  as  well.  Section  6 
occurs  due  to  the  discrepancies  between  the  truth  and  the 
concludes the paper and outlines future work.  
“truth approximation”, which we discuss later. 
Second,  to  avoid  scan  interference  from  a  ghostware-
2. Detection of File-hiding Ghostware
infected OS,  our  framework  aims  at  exporting  the  truth  so 
that it can be scanned outside the box from a clean OS; the 
Between  a user-mode  file-query program  (such  as  the 
scan is then compared against the inside-the-box generated 
“dir”  command  in  a  cmd  window)  and  the  physical  disk, 
high-level  scan  to  expose  hidden  resources,  as  shown  in 
there  exist  many  layers  where  ghostware  programs  can 
Figure 1. While persistent-state resources such as files and 
insert  themselves  to  intercept  and  filter  resource  queries. 
Registry  entries  are  naturally  available  outside,  volatile-
Figure  2  illustrates  the  six  different  techniques  employed 
state  resources  such  as  processes  and  loaded  modules 
by the 10 file-hiding ghostware programs in our collection. 
require  a  mechanism  to  persist  relevant  kernel  data 
Of  these 10 programs, Urbin, Mersting, Vanquish, Aphex, 
structures (see Section 4). Our current implementation uses 
and  Hacker  Defender  are  rootkits  and Trojans,  ProBot  SE 
Windows  Preinstallation  Environment 
(WinPE)  CD 
is  a  key-logger,  and  Hide  Files,  Hide  Folders  XP, 
[WPE]  as the  clean OS. Since  the ghostware programs  are 
Advanced  Hide  Folders,  and  File  &  Folder  Protector  are 
not  running  when  we  perform  a  scan  from  WinPE,  there 
commercial file hiders. 
will  not  be  any  hiding  or  malicious  interference.  This 
Urbin and Mersting make modifications at the highest 
implies 
that  an  outside-the-box 
solution 
is  more 
level  by  altering  the  per-process  Import  Address  Table 
fundamental. However, this solution is less convenient and 
(IAT)  [R00]  entries  of  file  enumeration  APIs  to  point  to 
therefore  users  will  only  be  willing  to  run  it  on  an 
their  Trojan  import  functions.  In  contrast,  Vanquish 
infrequent  basis  or  when  they  suspect  that  their machines 
directly modifies  the  loaded,  in-memory  API  code  so  that 
have been compromised. 
its function is called and then it calls the next OS function. 
There is a subtle but important difference between the 
Both  techniques  cause  the  Trojan  functions  to  appear  in 
“cross-view  diff”  used  in  GhostBuster  and  the  more 
the  call  stack  trace  of  a  kernel  or  user-mode  debugging 
common “cross-time  diff”  used  in  Tripwire  [KS94]  and 
session.  To  achieve  better  stealth,  Aphex  and  Hacker 
the  Strider  Troubleshooter  [WVS03,WVD+03].  The  goal 
Defender modify  the  in-memory API  code  with  a  jump  to 
of  a  cross-time  diff  is  to  capture  changes  made  to 
the Trojan code along with a Trojan code jump back to the 
persistent  state  by  essentially  comparing  snapshots  from 
next  instruction  after  the  API  detour  [HB99];  the  Trojan 
two  different  points  in  time  (one  before  the  changes  and 
code  modifies  the  return  address  on  the  stack  to  cause  its 
one  after).  In  contrast,  the  goal  of  a  cross-view  diff  is  to 
code to be executed in the return path. The only difference 
detect hiding  behavior  by comparing  two  snapshots of  the 
is  that Aphex modifies  the FindFirstFile  and FindNextFile 
same  state at  exactly  the  same point  in  time, but from  two 
API  code 
inside  Kernel32.dll  [YN04]  (denoted  b y 
different  points  of  view  (one  through  the  ghostware  and 
Kernel32!FindFirst(Next)File),  while  Hacker  Defender 
one  not).  Cross-time  diff  is  a  more  general  approach  for 
modifies 
the 
lower-level  NtQueryDirectoryFile  API 
capturing  a  broader range  of malware programs, hiding  or 
exported by NtDll.dll [YH03].  
not;  the downside  is  that  it  typically  includes  a  significant 
System-wide  file  hiding  can  also  be  achieved  b y 
number  of  false  positives  stemming  from  legitimate 
running  a  centralized,  kernel-mode  intercepting  program, 
changes  and  thus requires  additional noise  filtering, which 
without  modifying  per-process  memory.  ProBot  SE 
has  a negative  impact  on usability.  In  contrast,  cross-view 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:20 UTC from IEEE Xplore.  Restrictions apply. 
hijacks  kernel-mode  file-query  APIs  by  modifying  their 
ranging  from  5  to  34GB  and  CPU  speed  ranging  from 
dispatch entries in the Service Dispatch Table [YT04]. All 
550MHz to 2.2GHz. For these machines the inside-the-box 
four  commercial  file hiders use  a  filter driver  [IFS]  that  is 
solution  took  between  30  seconds  and  7 minutes.  (On  the 
inserted  into  the  OS  file  system  stack  to  intercept  all  file 
8th machine, which  is  a dual-proc 3GHz  workstation with 
operations.  The  filter  driver  can  scope  the  file-hiding 
95GB  of  the  111GB  hard  drive  utilized,  the  scan  took  38 
behavior  to  specific  processes  by  examining  the  IRP  (I/O 
minutes.)  The  outside-the-box  solution  typically  adds  1.5 
Request  Packet)  for  the  I/O  operation  to  determine  the 
to 3 minutes for booting into the WinPE CD. 
originating process. 
We did not  observe  any  false positives  on  any  inside-
Another form of file hiding exploits the restrictions on 
the-box  scans.  However,  in  the  outside-the-box  solution, 
filenames enforced by some Win32 API, but not the NTFS 
the  larger  time  gap  between  the  two  scans  and  the  file 