International Conference on Computer-Aided Design (ICCAD), 2013.
[43] S. Kelly, X. Zhang, M. Tehranipoor, and A. Ferraiuolo, “Detecting
hardware trojans using on-chip sensors in an asic design,” Journal of
Electronic Testing, 2015.
[44] Cadence
Design
Systems,
“JasperGold,”
https://www.cadence.com/en US/home/tools/system-design-and-
veriﬁcation/formal-and-static-veriﬁcation/jasper-gold-veriﬁcation-
platform.html.
and-formal-veriﬁcation/vc-formal.html.
[46] S. Williams, “Icarus verilog,” http://iverilog.icarus.com/.
[47] P. Jamieson, K. B. Kent, F. Gharibian, and L. Shannon, “Odin ii-an open-
source verilog hdl synthesis tool for cad research,” in IEEE International
Symposium on Field-Programmable Custom Computing Machines, 2010.
[48] C. H. Kingsley and B. K. Sharma, “Method and apparatus for identifying
ﬂip-ﬂops in hdl descriptions of circuits without speciﬁc templates,” 1998,
US Patent 5,854,926.
[49] OpenCores.org, “Openrisc or1k tests,” https://github.com/openrisc/or1k-
tests/tree/master/native/or1200.
[50] U.
of
gnu
https://github.com/riscv/riscv-gnu-toolchain.
California,
“Risc-v
compiler
toolchain,”
[51] OpenCores.org, “Or1k-elf toolchain,” https://openrisc.io/newlib/.
[52] Arm,
https://developer.arm.com/ip-
Cortex-M0,”
“Arm
products/processors/cortex-m/cortex-m0.
[53] M. Hrishikesh, N. P. Jouppi, K. I. Farkas, D. Burger, S. W. Keckler,
and P. Shivakumar, “The optimal logic depth per pipeline stage is 6 to
8 FO4 inverter delays,” in IEEE International Symposium on Computer
Architecture (ISCA), 2002.
[54] T. Trippel, K. G. Shin, K. B. Bush, and M. Hicks, “ICAS: an extensible
framework for estimating the susceptibility of ic layouts to additive
trojans,” in IEEE Symposium on Security and Privacy (S&P), 2020.
1
2
3
4
5
6
7
8
9
1
2
3
4
5
6
7
8
9
1
2
3
4
5
6
7
8
9
1
2
3
4
5
6
7
8
9
984
[55] E. Biham, Y. Carmeli, and A. Shamir, “Bug attacks,” in Annual Inter-
national Cryptology Conference, 2008.
[56] M. Banga and M. S. Hsiao, “A region based approach for the identiﬁca-
tion of hardware trojans,” in IEEE International Workshop on Hardware-
Oriented Security and Trust (HOST), 2008.
[57] M. Banga, M. Chandrasekar, L. Fang, and M. S. Hsiao, “Guided test
generation for isolation and detection of embedded trojans in ics,” in
ACM Great Lakes Symposium on VLSI (GLSVLSI), 2008.
[58] Google LLC, “RISCV-DV,” https://github.com/google/riscv-dv.
A. Ticking Timebomb Trigger Variants
APPENDIX
In these Verilog examples of TTT triggers, we use a three
letter naming convention to describe their building blocks:
SSC type (C or D), increment value (U or N), and incre-
ment event (P or S). For example, a CNS TTT indicates a
Coalesced (C) SSC, with a Non-uniform (N) increment value,
and a Sporadic (S) increment event. For TTTs comprised of
distributed SSCs we use the “D-” naming convention
to indicate the type: homogeneous or heterogeneous. This list
is not comprehensive, but rather a representative sampling of
the TTT design space. Note, all examples assume a processor
victim circuit, with a pageFault ﬂag, overﬂow ﬂag, and a 32-
bit program counter (PC) register.
// 1. CUP = Coalesced SSC, Uniform increment, Periodic event
reg [31:0] ssc ;
always @posedge(clock) begin
if ( reset )
ssc [0:0]
[0:0]->[0:0]
[0:0]->[0:0]
[0:0]->[0:0]
[0:0]->[0:0]
[0:0]->[0:0]
[0:0]->[0:0]
[0:0]->[0:0]
[0:0]->[4:0]
or1200_fpu_div.s_start_i[0:0]
or1200_fpu_div.s_sign_dvd_i[0:0]
or1200_fpu_div.s_sign_div_i[0:0]
or1200_fpu_div.s_sign_o[0:0]
[0:0]->[26:0]
[0:0]->[49:0]
[0:0]->[0:0]
[0:0]->[4:0]
[0:0]->[0:0]
or1200_fpu_div.dvsor_i[26:0]
or1200_fpu_div.dvdnd_i[49:0]
[0:0]->[26:0]
or1200_fpu_div.s_count[4:0]
[4:0]->[4:0]
[0:0]->[0:0]
[0:0]->[0:0]
or1200_fpu_div.sign_o[0:0]
[26:0]->[26:0]
[49:0]->[49:0]
[0:0]->[26:0]
[4:0]->[0:0]
[0:0]->[4:0]
[0:0]->[0:0]
or1200_fpu_div.s_dvsor_i[26:0]
[0:0]->[26:0]
or1200_fpu_div.s_dvdnd_i[49:0]
[0:0]->[26:0]
or1200_fpu_div.s_state[0:0]
[0:0]->[0:0]
[4:0]->[0:0]
[0:0]->[31:0]
[0:0]->[31:0]
[26:0]->[0:0]
[49:0]->[0:0]
[26:0]->[26:0]
[4:0]->[4:0]
[0:0]->[26:0]
[0:0]->[26:0]
[0:0]->[0:0]
[0:0]->[26:0]
or1200_fpu_div.s_div_zero_o[0:0]
[49:26]->[23:0]
or1200_fpu_div.s_dvd[26:0]
or1200_fpu_div.s_ready_o[0:0]
[26:0]->[26:0]
[0:0]->[0:0]
[26:0]->[26:0]
[26:0]->[31:5]
[25:0]->[26:1] [26:0]->[26:0]
[0:0]->[26:0]
[0:0]->[26:0]
[0:0]->[0:0]
or1200_fpu_div.div_zero_o[0:0]
[25:0]->[26:1]
or1200_fpu_div.v_div[26:0]
or1200_fpu_div.ready_o[0:0]
[26:0]->[26:0]
[26:0]->[26:0]
[26:0]->[26:0]
or1200_fpu_div.v_div_minus_s_dvsor_i[26:0]
or1200_fpu_div.s_qutnt_o[26:0]
or1200_fpu_div.s_rmndr_o[26:0]
[3:0]->[31:0]
[3:0]->[31:0]
[26:0]->[26:0]
[26:0]->[26:0]
or1200_fpu_div.coal_counter_2[31:0]
[31:0]->[31:0]
or1200_fpu_div.coal_counter_1[31:0]
[31:0]->[31:0]
or1200_fpu_div.qutnt_o[26:0]
or1200_fpu_div.rmndr_o[26:0]
[31:0]->[63:32]
[31:0]->[31:0]
or1200_fpu_div.dist_counter[63:0]
Fig. 11. Hardware Data-Flow Graph. Example data-ﬂow graph, generated by Bomberman, of an open-source ﬂoating-point division unit [19]. Bomberman
cross-references this graph with veriﬁcation simulation results to identify SSCs (red). In the graph, rectangles represent registers, or ﬂip-ﬂops, and ellipses
represent intermediate signals, i.e., outputs from combinational logic. Red rectangles indicate coalesced SSCs, while red ellipses represent distributed SSCs.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
986