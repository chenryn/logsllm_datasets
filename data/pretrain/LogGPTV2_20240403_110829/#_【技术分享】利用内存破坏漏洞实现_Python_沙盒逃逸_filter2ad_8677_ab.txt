我们来看看我们的大字符串0xa52cd0，小字符串0x7ffff7f65848和numpy数组0x7ffff7e777b0。
    $ cat /proc/`pgrep python`/maps 
    00400000–006ea000 r-xp 00000000 08:01 2712 /usr/bin/python2.7
    008e9000–008eb000 r — p 002e9000 08:01 2712 /usr/bin/python2.7
    008eb000–00962000 rw-p 002eb000 08:01 2712 /usr/bin/python2.7
    00962000–00fa8000 rw-p 00000000 00:00 0 [heap]  # big string
    ...
    7ffff7e1d000–7ffff7edd000 rw-p 00000000 00:00 0 # numpy array
    ...
    7ffff7f0e000–7ffff7fd3000 rw-p 00000000 00:00 0 # small string
字符串在常规堆中。 小字符串和numpy数组位于单独的mmap区域中。
**Python对象结构**
泄漏和破坏Python对象元数据可能相当强大，因此了解Python对象的表示方式很有用。 在封面下，Python对象都派生自PyObject
，这是一个包含引用计数和对象实际类型描述符的结构。 值得注意的是，类型描述符包含许多字段，包括可能对读取或覆盖有用的函数指针。
我们先检查我们在前一节中创建的小字符串。
    (gdb) print *(PyObject *)0x7ffff7f65848
    $2 = {ob_refcnt = 1, ob_type = 0x9070a0 }
    (gdb) print *(PyStringObject *)0x7ffff7f65848
    $3 = {ob_refcnt = 1, ob_type = 0x9070a0 , ob_size = 256, ob_shash = -1, ob_sstate = 0, ob_sval = “A”}
    (gdb) x/s ((PyStringObject *)0x7ffff7f65848)->ob_sval
    0x7ffff7f6586c: ‘A’ ...
    (gdb) ptype PyString_Type 
    type = struct _typeobject {
        Py_ssize_t ob_refcnt;
        struct _typeobject *ob_type;
        Py_ssize_t ob_size;
        const char *tp_name;
        Py_ssize_t tp_basicsize;
        Py_ssize_t tp_itemsize;
        destructor tp_dealloc;
        printfunc tp_print;
        getattrfunc tp_getattr;
        setattrfunc tp_setattr;
        cmpfunc tp_compare;
        reprfunc tp_repr;
        PyNumberMethods *tp_as_number;
        PySequenceMethods *tp_as_sequence;
        PyMappingMethods *tp_as_mapping;
        hashfunc tp_hash;
        ternaryfunc tp_call;
        reprfunc tp_str;
        getattrofunc tp_getattro;
        setattrofunc tp_setattro;
        PyBufferProcs *tp_as_buffer;
        long tp_flags;
        const char *tp_doc;
        traverseproc tp_traverse;
        inquiry tp_clear;
        richcmpfunc tp_richcompare;
        Py_ssize_t tp_weaklistoffset;
        getiterfunc tp_iter;
        iternextfunc tp_iternext;
        struct PyMethodDef *tp_methods;
        struct PyMemberDef *tp_members;
        struct PyGetSetDef *tp_getset;
        struct _typeobject *tp_base;
        PyObject *tp_dict;
        descrgetfunc tp_descr_get;
        descrsetfunc tp_descr_set;
        Py_ssize_t tp_dictoffset;
        initproc tp_init;
        allocfunc tp_alloc;
        newfunc tp_new;
        freefunc tp_free;
        inquiry tp_is_gc;
        PyObject *tp_bases;
        PyObject *tp_mro;
        PyObject *tp_cache;
        PyObject *tp_subclasses;
        PyObject *tp_weaklist;
        destructor tp_del;
        unsigned int tp_version_tag;
    }
许多有用的字段读取或写入类型的指针，函数指针，数据指针，大小等等。
**Shellcode like it's 1999**
ctypes库作为Python和C代码之间的桥梁。 它提供C兼容的数据类型，并允许在DLL或共享库中调用函数。
许多具有C绑定或需要调用共享库的模块需要导入ctypes。
我注意到，导入ctypes会导致以读/写/执行权限设置的4K大小的内存区域映射。 如果还不明显，这意味着攻击者甚至不需要编写一个ROP链。
利用一个错误就像把指令指针指向你的shellcode一样简单，你被授予你已经找到了RWX区域。
    $ cat foo.py
    import ctypes
    while True: 
        pass
    $ python foo.py
    ^Z
    [2] + 30567 suspended python foo.py
    $ grep rwx /proc/30567/maps7fcb806d5000–7fcb806d6000 rwxp 00000000 00:00 0
进一步调查，我发现libffi的封闭API 负责打印RWX区域。 但是，该区域不能在某些平台上分配RWX，例如启用了selinux强制或PAX
mprotect的系统，并且有代码可以解决这个限制。我没有花太多时间尝试可靠地定位RWX映射，但是从理论上说，如果你有一个任意读取的exploit，应该是可能的。
当ASLR应用于库（library）时，动态链接器以可预测的顺序映射库（library）的区域。
库（library）的地区包括库私有的全局变量和代码本身。Libffi将对RWX地区的引用存储为全局。
例如，如果您在堆上找到指向libffi函数的指针，则可以将RWX区域指针的地址预先计算为与libffi函数指针的地址的偏移量。 每个库版本都需要调整偏移量。
**De facto exploit mitigations**
我在Ubuntu 14.04.5和16.04.1上测试了Python2.7二进制程序的安全相关编译器标志。 有几个弱点，对攻击者来说是非常有用的：
Partial RELRO：可执行文件的GOT部分 ，包含动态链接到二进制文件中的库函数的指针，是可写的。
例如，explolo可以用system()替换printf()的地址。
No PIE：二进制文件不是与位置无关的可执行文件，这意味着当内核将ASLR应用于大多数内存映射时，二进制本身的内容将映射到静态地址。
由于GOT部分是二进制文件的一部分，因此PIE不会使攻击者更容易找到并写入GOT。
**Road blocks**
虽然CPython是充分利用开发人员工具的环境，但有一些力量破坏了我的许多漏洞尝试，难以调试
垃圾收集器，类型系统以及可能的其他未知的力将破坏您的漏洞利用，如果您不小心克隆对象元数据。
id()可能不可靠。 由于我无法确定，Python有时会在使用始对象时传递对象的副本。
对象分配的区域有些不可预测。 由于我无法确定，某些编码模式导致缓冲区被分配到brk堆中，而其他模式导致在一个python特定的mmap'd堆中分配。
**漏洞利用**
发现numpy整数溢出后不久，我向Bug的一个报告提交了劫持指令指针的概念证明，但没有注入任何代码。
当我最初提交时，我没有意识到PoC实际上是不可靠的，并且我无法对其服务器进行正确的测试，因为验证劫持指令指针需要访问核心转储或调试器。
供应商承认这个问题的合法性，但是比起我的第一份报告，他们给了一个不那么慷慨的回报。
很公平！
我不是一个漏洞利用开发者，但我挑战自己做得更好。 经过多次尝试和错误，我最终写了一个似乎是可靠的漏洞。
不幸的是，我无法在供应商的沙箱中测试它，因为在完成之前更新了numpy，但是在Python解释器中本地测试时它的工作正常。
在高层次上，漏洞利用一个numpy数组的大小来获取任意的读/写漏洞利用的攻击。这个攻击用于将system的地址写入fwrite的GOT / PLT条目。
最后，Python的内置print调用fwrite覆盖，所以现在你可以调用print '/bin/sh'来获取shell，或者用任何命令替换/ bin /
sh。
有一些比高级别的解释更多，所以请查看下面的漏洞。 我建议从自下而上开始阅读，包括评论。
如果您使用的是不同版本的Python，请在运行该文件之前调整fwrite和system的GOT位置。
    import numpy as np
    # addr_to_str is a quick and dirty replacement for struct.pack(), needed
    # for sandbox environments that block the struct module.
    def addr_to_str(addr):