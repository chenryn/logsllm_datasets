}
}
}
*r = 0;
/*定时器准备*/
timer = api_alloctimer();
api_inittimer(timer, 128);
/*主体*/
p = txtbuf;
for (;;) {
if (('A' > (17 - i / 12));
} else {
api_beep(0);
}
图灵社区会员 metorm 专享 尊重版权
3 MML播放器（harib27c） …… 677
note_old = i; 1
}
/*音长计算*/
18
if ('0' ') { /*八度++ */ 27
p++;
o++;
} else if (*p == 'O') { /*八度指定*/ 28
o = strtol(p + 1, &p, 10);
} else if (*p == 'Q') { /* Q参数指定*/
q = strtol(p + 1, &p, 10); 29
} else if (*p == 'L') { /*默认音长指定*/
l = strtol(p + 1, &p, 10);
if (l == 0) {
30
goto syntax_error;
}
l = 192 / l;
for (; *p == '.'; ) { 30
p++;
l += l / 2;
} 16
} else if (*p == 'T') { /*速度指定*/
图灵社区会员 metorm 专享 尊重版权
678 …… 第30天：高级的应用程序
t = strtol(p + 1, &p, 10);
} else if (*p == '$') { /*扩展命令*/
if (p[1] == 'K') { /*卡拉OK命令*/
p += 2;
for (; *p != 0x22; p++) {
if (*p == 0) {
goto syntax_error;
}
}
p++;
for (i = 0; i  30) {
end("karaoke too long.\n");
}
api_boxfilwin(win + 1, 8, 88, 247, 103, 7);
s[i] = 0;
if (i != 0) {
api_putstrwin(win + 1, 128 - i * 4, 88, 0, i, s);
}
api_refreshwin(win, 8, 88, 248, 104);
}
for (; *p != ';'; p++) {
if (*p == 0) {
goto syntax_error;
}
}
p++;
} else if (*p == 0) {
p = txtbuf;
} else {
syntax_error:
end("mml syntax error.\n");
}
}
}
void waittimer(int timer, int time)
图灵社区会员 metorm 专享 尊重版权
4 图片阅览器（harib27d） …… 679
{ 1
int i;
api_settimer(timer, time);
for (;;) {
18
i = api_getkey(1);
if (i == 'Q' || i == 'q') {
api_beep(0);
api_end(); 3
}
if (i == 128) {
return; 20
}
}
}
21
void end(char *s)
{
if (s != 0) { 22
api_putstr0(s);
}
api_beep(0); 7
api_end();
}
8
只要读过之前的程序，这段程序应该不会难懂吧。由音符数据计算频率，以及由音符的长度
计算定时器应该设定为几秒这些地方可能不太容易理解，其实只要有相应的音乐知识（例如一个
9
音升高半音后，频率是原来的约1.059463倍）就很容易看懂了。
总之（老生常谈了），本书的目的是编写操作系统，而不是编写MML播放器，关于相关音乐
26
理论的讲解就省略了，不好意思。当然，笔者也是想给大家仔细讲讲的，只不过要讲清楚的话，
又得增加1章的篇幅了。
27
将这个程序make一下，得到的mmlplay.hrb大小为1975字节，还是非常小的，真不错！
44 图片阅览器（harib27d） 28
话说，到现在为止的几个应用程序，都比昨天的invader.hrb要小，感觉非常对不起今天这一
29
章的标题（高级的应用程序）。不过，体积大也未必说明它比较高级。虽说如此，我们还是来做
一个规模大一点的应用程序吧。
30
其实invader.hrb之所以比较大，并不是因为内容比较高级，而是因为使用了sprintf函数。
sprintf是一个很大的函数，如果可以避免使用这个函数的话，大约又可以缩小500多字节。 30
于是我们来做一个图片阅览器吧。用这一个程序，就可以查看BMP和JPEG两种格式的图片。
我们先来看看实际运行的画面。 16
图灵社区会员 metorm 专享 尊重版权
680 …… 第30天：高级的应用程序
“gview night.bmp” “gview fujisan.jpg”
怎么样，显示效果不错吧？呵呵，小菜一碟（笑）。
关于程序，如果要给大家讲解BMP和JPEG的文件格式的话，篇幅又要变得很～长了，于是
我们只好又省略了。而且用来解释BMP和JPEG文件格式的程序我们也不重新编写了，而是直接
使用OSASK中的应用程序所引用的代码。
OSASK中有一个叫做PICTURE0.BIN的应用程序，这就是一个用来查看BMP和JPEG格式图
片的图片阅览器。从这个程序的源代码中，我们提取了bmp.nasm和jpeg.c（这剧情怎么跟tek那时
候差不多啊）。
这两个源程序看起来无需修改就可以直接使用，其中bmp.nasm的作者是I.Tak.，jpeg.c的作者
是nikq、笔者、I.Tak.和Kumin。在这里要向I.Tak.、nikq和Kumin表示感谢，这个应用程序能很快
编写出来都是你们的功劳。
于是，剩下的只需要载入文件并显示出来而已，这些程序刷刷刷就写出来了，放在这里了哦
（关于bmp.nasm和jpeg.c的源代码，请大家查阅附送的光盘）。
gview.c
#include "apilib.h"
struct DLL_STRPICENV { /* 64KB */
int work[64 * 1024 / 4];
};
struct RGB {
unsigned char b, g, r, t;
};
/* bmp.nasm */
int info_BMP(struct DLL_STRPICENV *env, int *info, int size, char *fp);
int decode0_BMP(struct DLL_STRPICENV *env, int size, char *fp, int b_type, char *buf, int skip);
/* jpeg.c */
int info_JPEG(struct DLL_STRPICENV *env, int *info, int size, char *fp);
int decode0_JPEG(struct DLL_STRPICENV *env, int size, char *fp, int b_type, char *buf, int skip);
图灵社区会员 metorm 专享 尊重版权
4 图片阅览器（harib27d） …… 681
1
unsigned char rgb2pal(int r, int g, int b, int x, int y);
void error(char *s);
void HariMain(void) 18
{
struct DLL_STRPICENV env;
char filebuf[512 * 1024], winbuf[1040 * 805];
3
char s[32], *p;
int win, i, j, fsize, xsize, info[8];
struct RGB picbuf[1024 * 768], *q;
20
/*命令行解析*/