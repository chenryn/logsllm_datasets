the jku parameter, which we discussed before. Instead of pointing 
to a JWK set, the URL here points to an X.509 certificate or a chain 
of X.509 certificates. The resource pointed by the URL must hold 
the certificate or the chain of certificates in the PEM-encoded form. 
Each certificate in the chain must appear between the delimiters4: 
-----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----. 
The public key corresponding to the key used to encrypt the Content 
Encryption Key (CEK) should be the very first entry in the certificate 
chain, and the rest is the certificates of intermediate CAs (certificate 
authority) and the root CA. The x5u is an optional parameter in the 
JOSE header.
• 
x5c: The x5c parameter in the JOSE header represents the X.509 
certificate (or the certificate chain), which corresponds to the public 
key, which is used to encrypt the Content Encryption Key (CEK). This 
is similar to the jwk parameter we discussed before, but in this case 
instead of a JWK, it’s an X.509 certificate (or a chain of certificates). 
The certificate or the certificate chain is represented in a JSON 
4 The Internet IP Security PKI Profile of IKEv1/ISAKMP, IKEv2, and PKIX (RFC 4945) defines the 
delimiters for X.509 certificates under Section 6.1, https://tools.ietf.org/html/rfc4945
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
189
array of certificate value strings. Each element in the array should 
be a base64-encoded DER PKIX certificate value. The public key 
corresponding to the key used to encrypt the Content Encryption Key 
(CEK) should be the very first entry in the JSON array, and the rest 
is the certificates of intermediate CAs (certificate authority) and the 
root CA. The x5c is an optional parameter in the JOSE header.
• 
x5t: The x5t parameter in the JOSE header represents the base64url- 
encoded SHA-1 thumbprint of the X.509 certificate corresponding 
to the key used to encrypt the Content Encryption Key (CEK). This 
is similar to the kid parameter we discussed before. Both these 
parameters are used to locate the key. If the token issuer uses the 
x5t parameter in the JOSE header to let the recipient know about 
the signing key, then the corresponding key should be exchanged 
“somehow” between the token issuer and the recipient beforehand. 
How this key exchange happens is out of the scope of the JWE 
specification. The x5t is an optional parameter in the JOSE header.
• 
x5t#s256: The x5t#s256 parameter in the JOSE header represents 
the base64url-encoded SHA256 thumbprint of the X.509 certificate 
corresponding to the key used to encrypt the Content Encryption 
Key (CEK). The only difference between x5t#s256 and the x5t is the 
hashing algorithm. The x5t#s256 is an optional parameter in the 
JOSE header.
• 
typ: The typ parameter in the JOSE header is used to define the 
media type of the complete JWE. There are two types of components 
that process a JWE: JWE implementations and JWE applications. 
Nimbus5 is a JWE implementation in Java. The Nimbus library 
knows how to build and parse a JWE. A JWE application can be 
anything, which uses JWE internally. A JWE application uses a 
JWE implementation to build or parse a JWE. In this case, the typ 
parameter is just another parameter for the JWE implementation. It 
will not try to interpret the value of it, but the JWE application would. 
The typ parameter will help JWE applications to differentiate the 
5 Nimbus JWT Java implementation, http://connect2id.com/products/nimbus-jose-jwt
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON 
190
content when multiple types of objects are present. For a JWS token 
using JWS compact serialization and for a JWE token using JWE 
compact serialization, the value of the typ parameter is JOSE, and for 
a JWS token using JWS JSON serialization and for a JWE token using 
JWE JSON serialization, the value is JOSE+JSON. (JWS serialization 
was discussed in Chapter 7 and JWE serialization is discussed later in 
this chapter). The typ is an optional parameter in the JOSE header.
• 
cty: The cty parameter in the JOSE header is used to represent 
the media type of the secured content in the JWE. It is only 
recommended to use this parameter in the case of a nested JWT. The 
nested JWT is discussed later in this chapter, and the definition of 
the cty parameter is further explained there. The cty is an optional 
parameter in the JOSE header.
• 
crit: The crit parameter in the JOSE header is used to indicate to the 
recipient of the JWE that the presence of custom parameters, which 
neither defined by the JWE or JWA specifications, in the JOSE header. If 
these custom parameters are not understood by the recipient, then the 
JWE token will be treated as invalid. The value of the crit parameter 
is a JSON array of names, where each entry represents a custom 
parameter. The crit is an optional parameter in the JOSE header.
Out of all the 13 parameters defined earlier, 7 talk about how to reference the public 
key, which is used to encrypt the Content Encryption Key (CEK). There are three ways 
of referencing a key: external reference, embedded, and key identifier. The jku and x5u 
parameters fall under the external reference category. Both of them reference the key 
through a URI. The jwk and x5c parameters fall under embedded reference category. 
Each one of them defines how to embed the key to the JOSE header itself. The kid, 
x5t, and x5t#s256 parameters fall under the key identifier reference category. All 
three of them define how to locate the key using an identifier. Then again all the seven 
parameters can further divide into two categories based on the representation of the 
key: JSON Web Key (JWK) and X.509. The jku, jwk, and kid fall under the JWK category, 
while x5u, x5c, x5t, and x5t#s256 fall under the X.509 category. In the JOSE header 
of a given JWE token, at a given time, we only need to have one from the preceding 
parameters.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
191
Note the JsON payload, which is subject to encryption, could contain 
whitespaces and/or line breaks before or after any JsON value.
The JWE specification does not restrict applications only to use 13 header 
parameters defined earlier. There are two ways to introduce new header parameters: 
public header names and private header names. Any header parameter that is intended 
to use in the public space should be introduced in a collision-resistant manner. It 
is recommended to register such public header parameters in the IANA JSON Web 
Signature and Encryption Header Parameters registry. The private header parameters 
are mostly used in a restricted environment, where both the token issuer and the 
recipients are well aware of each other. These parameters should be used with caution, 
because there is a chance for collision. If a given recipient accepts tokens from multiple 
token issuers, then the semantics of the same parameter may be different from one 
issuer to another, if it is a private header. In either case, whether it’s a public or a private 
header parameter, if it is not defined in the JWE or the JWA specification, the header 
name should be included in the crit header parameter, which we discussed before.
 JWE Encrypted Key
To understand JWE Encrypted Key section of the JWE, we first need to understand how a 
JSON payload gets encrypted. The enc parameter of the JOSE header defines the content 
encryption algorithm, and it should be a symmetric Authenticated Encryption with 
Associated Data (AEAD) algorithm. The alg parameter of the JOSE header defines the 
encryption algorithm to encrypt the Content Encryption Key (CEK). We can also call this 
algorithm a key wrapping algorithm, as it wraps the CEK.
AUTHENTICATED ENCRYPTION
encryption alone only provides the data confidentiality. Only the intended recipient can decrypt 
and view the encrypted data. even though data is not visible to everyone, anyone having 
access to the encrypted data can change the bit stream of it to reflect a different message. 
For example, if alice transfers us $100 from her bank account to bob’s account and if that 
message is encrypted, then eve in the middle can’t see what’s inside it. but, eve can modify 
the bit stream of the encrypted data to change the message, let’s say from us $100 to us 
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
192
$150. the bank which controls the transaction would not detect this change done by eve 
in the middle and will treat it as a legitimate transaction. this is why encryption itself is not 
always safe, and in the 1970s, this was identified as an issue in the banking industry.
unlike just encryption, the Authenticated Encryption simultaneously provides a confidentiality, 
integrity, and authenticity guarantee for data. isO/ieC 19772:2009 has standardized six 
different authenticated encryption modes: gCM, OCb 2.0, CCM, Key wrap, eaX, and encrypt- 
then- MaC. Authenticated Encryption with Associated Data (AEAD) extends this model to add 
the ability to preserve the integrity and authenticity of Additional Authenticated Data (aaD) 
that isn’t encrypted. aaD is also known as Associated Data (aD). aeaD algorithms take two 
inputs, plaintext to be encrypted and the additional authentication Data (aaD), and result in 
two outputs: the ciphertext and the authentication tag. the aaD represents the data to be 
authenticated, but not encrypted. the authentication tag ensures the integrity of the ciphertext 
and the aaD.
Let’s look at the following JOSE header. For content encryption, it uses A256GCM 
algorithm, and for key wrapping, RSA-OAEP:
{"alg":"RSA-OAEP","enc":"A256GCM"}
A256GCM is defined in the JWA specification. It uses the Advanced Encryption 
Standard (AES) in Galois/Counter Mode (GCM) algorithm with a 256-bit long key, 
and it’s a symmetric key algorithm used for AEAD. Symmetric keys are mostly used 
for content encryption. Symmetric key encryption is much faster than asymmetric key 
encryption. At the same time, asymmetric key encryption can’t be used to encrypt large 
messages. RSA-OAEP is too defined in the JWA specification. During the encryption 
process, the token issuer generates a random key, which is 256 bits in size, and encrypts 
the message using that key following the AES GCM algorithm. Next, the key used to 
encrypt the message is encrypted using RSA- OAEP,6 which is an asymmetric encryption 
scheme. The RSA-OAEP encryption scheme uses RSA algorithm with the Optimal 
Asymmetric Encryption Padding (OAEP) method. Finally, the encrypted symmetric key 
is placed in the JWE Encrypted Header section of the JWE.
6 RSA-OAEP is a public key encryption scheme, which uses the RSA algorithm with the Optimal 
Asymmetric Encryption Padding (OAEP) method.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
193
KEY MANAGEMENT MODES
the key management mode defines the method to derive or compute a value to the Content 
encryption Key (CeK). the Jwe specification employs five key management modes, as listed 
in the following, and the appropriate key management mode is decided based on the alg 
parameter, which is defined in the JOse header:
 1. Key encryption: with the key encryption mode, the value of the CeK is encrypted 
using an asymmetric encryption algorithm. For example, if the value of the 
alg parameter in the JOse header is rsa-Oaep, then the corresponding key 
management algorithm is the rsaes Oaep using the default parameters. this 
relationship between the alg parameter and the key management algorithm is 
defined in the Jwa specification. the rsaes Oaep algorithm occupies the key 
encryption as the key management mode to derive the value of the CeK.
 2. Key wrapping: with the key wrapping mode, the value of the CeK is encrypted 
using a symmetric key wrapping algorithm. For example, if the value of the 
alg parameter in the JOse header is a128Kw, then the corresponding key 
management algorithm is the aes Key wrap with the default initial value, which 
uses a 128- bit key. the aes Key wrap algorithm occupies the key wrapping as 
the key management mode to derive the value of the CeK.
 3. Direct key agreement: with the direct key agreement mode, the value of 
the CeK is decided based upon a key agreement algorithm. For example, 
if the value of the alg parameter in the JOse header is eCDh-es, then the 
corresponding key management algorithm is the elliptic Curve Diffie-hellman 
ephemeral static key agreement using Concat KDF. this algorithm occupies the 
direct key agreement as the key management mode to derive the value of the 
CeK.
 4. Key agreement with key wrapping: with the direct key agreement with key 
wrapping mode, the value of the CeK is decided based upon a key agreement 
algorithm, and it is encrypted using a symmetric key wrapping algorithm. 
For example, if the value of the alg parameter in the JOse header is eCDh- 
es+a128Kw, then the corresponding key management algorithm is the eCDh- 
es using Concat KDF and CeK rapped with a128Kw. this algorithm occupies 
the direct key agreement with key wrapping as the key management mode to 
derive the value of the CeK.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
194
 5. Direct encryption: with the direct encryption mode, the value of the CeK is 
the same as the symmetric key value, which is already shared between the 
token issuer and the recipient. For example, if the value of the alg parameter 
in the JOse header is dir, then the direct encryption is occupied as the key 
management mode to derive the value of the CeK.
 JWE Initialization Vector
Some encryption algorithms, which are used for content encryption, require an 
initialization vector, during the encryption process. Initialization vector is a randomly 
generated number, which is used along with a secret key to encrypt data. This will add 
randomness to the encrypted data, which will prevent repetition even if the same data 
gets encrypted using the same secret key again and again. To decrypt the message at the 
token recipient end, it has to know the initialization vector, hence included in the JWE 
token, under the JWE Initialization Vector element. If the content encryption algorithm 
does not require an initialization vector, then the value of this element should be kept 
empty.
 JWE Ciphertext
The fourth element of the JWE token is the base64url-encoded value of the JWE 
ciphertext. The JWE ciphertext is computed by encrypting the plaintext JSON payload 
using the CEK, the JWE Initialization Vector, and the Additional Authentication Data 
(AAD) value, with the encryption algorithm defined by the header parameter enc. The 
algorithm defined by the enc header parameter should be a symmetric Authenticated 
Encryption with Associated Data (AEAD) algorithm. The AEAD algorithm, which is used 
to encrypt the plaintext payload, also allows specifying Additional Authenticated Data 
(AAD).
 JWE Authentication Tag
The base64url-encoded value of the JWE Authentication Tag is the final element of the 
JWE token. The value of the authentication tag is produced during the AEAD encryption 
process, along with the ciphertext. The authentication tag ensures the integrity of the 
ciphertext and the Additional Authenticated Data (AAD).
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
195
 The Process of Encryption (Compact Serialization)
We have discussed about all the ingredients that are required to build a JWE token under 
compact serialization. The following discusses the steps involved in building the JWE 
token. There are five elements in a JWE token; the first element is produced by step 6, the 
second element is produced by step 3, the third element is produced by step 4, the fourth 
element is produced by step 10, and the fifth element is produced by step 11.
 1. Figure out the key management mode by the algorithm used 
to determine the Content Encryption Key (CEK) value. This 
algorithm is defined by the alg parameter in the JOSE header. 
There is only one alg parameter per JWE token.
 2. Compute the CEK and calculate the JWE Encrypted Key based on 
the key management mode, picked in step 1. The CEK is later used 
to encrypt the JSON payload. There is only one JWE Encrypted 
Key element in the JWE token.
 3. Compute the base64url-encoded value of the JWE Encrypted Key, 
which is produced by step 2. This is the second element of the JWE 
token.
 4. Generate a random value for the JWE Initialization Vector. 
Irrespective of the serialization technique, the JWE token carries 
the value of the base64url-encoded value of the JWE Initialization 
Vector. This is the third element of the JWE token.
 5. If token compression is needed, the JSON payload in plaintext 
must be compressed following the compression algorithm defined 
under the zip header parameter.
 6. Construct the JSON representation of the JOSE header and find 
the base64url- encoded value of the JOSE header with UTF-8 
encoding. This is the first element of the JWE token.
 7. To encrypt the JSON payload, we need the CEK (which we already 
have), the JWE Initialization Vector (which we already have), and 
the Additional Authenticated Data (AAD). Compute ASCII value 
of the encoded JOSE header (step 6) and use it as the AAD.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
196
 8. Encrypt the compressed JSON payload (from step 5) using 
the CEK, the JWE Initialization Vector, and the Additional 
Authenticated Data (AAD), following the content encryption 
algorithm defined by the enc header parameter.
 9. The algorithm defined by the enc header parameter is an AEAD 
algorithm, and after the encryption process, it produces the 
ciphertext and the Authentication Tag.
 10. Compute the base64url-encoded value of the ciphertext, which is 
produced by step 9. This is the fourth element of the JWE token.
 11. Compute the base64url-encoded value of the Authentication Tag, 
which is produced by step 9. This is the fifth element of the JWE 
token.
 12. Now we have all the elements to build the JWE token in the 
following manner. The line breaks are introduced only for clarity.
BASE64URL-ENCODE(UTF8(JWE Protected Header)).
BASE64URL-ENCODE(JWE Encrypted Key).
BASE64URL-ENCODE(JWE Initialization Vector).
BASE64URL-ENCODE(JWE Ciphertext).
BASE64URL-ENCODE(JWE Authentication Tag)
 JWE JSON Serialization
Unlike the JWE compact serialization, the JWE JSON serialization can produce 
encrypted data targeting at multiple recipients over the same JSON payload. The 
ultimate serialized form under JWE JSON serialization represents an encrypted JSON 
payload as a JSON object. This JSON object includes six top-level elements: protected, 
unprotected, recipients, iv, ciphertext, and tag. The following is an example of a 
JWE token, which is serialized with JWE JSON serialization:
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
197
{
    "protected":"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2In0",
    "unprotected":{"jku":"https://server.example.com/keys.jwks"},
    "recipients":[
       {
        "header":{"alg":"RSA1_5","kid":"2011-04-29"},
        "encrypted_key":"UGhIOguC7IuEvf_NPVaXsGMoLOmwvc1GyqlIK..."
       },
       {
        "header":{"alg":"A128KW","kid":"7"},
        "encrypted_key":"6KB707dM9YTIgHtLvtgWQ8mKwb..."
       }
    ],
    "iv":"AxY8DCtDaGlsbGljb3RoZQ",
    "ciphertext":"KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY",