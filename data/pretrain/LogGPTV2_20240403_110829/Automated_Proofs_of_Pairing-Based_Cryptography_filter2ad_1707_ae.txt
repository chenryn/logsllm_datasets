termination might still be possible and we therefore bound
the size of the explored proof trees.
Example 2. We now prove the judgment from Example 1
using the high-level rules. Our implementation of the proof
search automatically ﬁnds the following proof.
The proof search ﬁrst applies Simp which yields the game
GBB,1 given in Figure 6. We keep the let-deﬁnitions in our
presentation to increase readability.
In the next step, the proof search applies the Rnd(cid:63) rule
to the sampling of h. The proof search discovers that h is
used in the context h + d∗ i∗ in the exponent of C2 and that
replacing h+d∗i∗ by h removes all occurences of the product
d ∗ e from the game. The elaborated core rule application is
Rnd(ph, 2 − d ∗ i
∗
, 2 + d ∗ i
∗
)
where ph is the position of the sampling of h. The rule
replaces h ←$ Fq by h(cid:48) ←$ Fq; let h = h(cid:48) − d ∗ i∗ and after
unfolding, the new exponent of C2 is (d∗i∗ +(h(cid:48)−d∗i∗))∗e =
h(cid:48) ∗ e. After renaming h(cid:48) to h, we get game GBB,2 given in
Figure 6.
Next, the proof search focuses on the product c ∗ d in the
exponent of the ﬁrst group element returned by PrivKey and
applies Rnd(cid:63) to replace the expression r ∗ (i − i∗) + c by r
The actual core rule application is
Rnd(pr, (2 − c)/(i − i
∗
), 2 ∗ (i − i
∗
) + c)
where pr is the position of the sampling of r in the oracle.
Here, sppr (GBB,2) includes the axiom i (cid:54)= i∗ which is re-
quired to prove that the second context is the inverse of the
ﬁrst. After simpliﬁcation, line 5.3 changes to
5.3 :
return (gd∗r+h∗(r−c)/(i−i∗), g(r−d)/(i−i∗)).
In the next step, the proof search automatically applies
the DBDH assumption. The rule matches up the samplings
of c, d, e in the game with the samplings of a, b, c in the
DBDH assumption. The rule synthesizes the simulator given
in Figure 7 using (ξ1, ξ2, ξ3, ξ4) = (gc, gd, ge, ˆe(g, g)c∗d∗e) to
denote B’s input. Applying the rule results in the game
GBB,4 given in Figure 6. The game GBB,4 diﬀers from GBB,3
in the sampling of t and the value assigned to K0.
To ﬁnish the proof, the proof search ﬁrst applies IfEq to
obtain game GBB,5 given in Figure 6. Afterwards b does not
occur anywhere except in the event b = b(cid:48) and the proof
is concluded by applying the Indep rule to the randomly
sampled boolean b. The application of Indep yields the
desired probability bound 1
2 .
6. ADVANCED CORES RULES
The set of basic core rules are complemented by a set of
advanced core rules which are required for more advanced
examples. The set of advanced core rules is given in Fig-
ure 8. The set contains rules new rules for program trans-
formations, equivalence up to failure, and hybrid arguments.
1164Program transformation:
Equivalence up to failure:
Assert(c)
[ G; assert(c) : ev ∧ c ]t (cid:22) 
[ G : ev ∧ c ]t (cid:22) 
Upto(p, c)
[ G{guard(c)}p : ev ]t (cid:22) 1
[ G{guard(c)}p : ∃ x ∈ Qo. c(x) (cid:54)= c
[ G{guard(c
(cid:48)
)}p : ev ]t (cid:22) 1 + 2
(cid:48)
(x) ]succ (cid:22) 2
p ﬁrst position in o
Guess
[ G; x ← A() : ev ]t (cid:22)  × no
[ G : ∃ x ∈ Qo. ev ]t (cid:22) 
Find(C, e)
[ G; x ← A(e) : ev1 ∧ ev2 ]t (cid:22) 
[ G : (∃ x ∈ Qo. ev1) ∧ ev2 ]t (cid:22) 
C eﬃcient and
sp|G|(G) |= C{(e, x)} =E ev1
Hybrid Arguments:
Hybrid(p, ob)
[ G{ob}p : ev ]t (cid:22) 1
[ SE1 ][SE2] (cid:22) 2
[ G{ob
(cid:48)}p : ev ]t (cid:22) 1 + no × 2
p points to body of o, ev(cid:48) = splitQuants(o, ev),
SE1 = [ G{bif : ob(cid:48)}p : ev(cid:48) ], and
SE2 = [ G{bif : ob(cid:48)}p : ev(cid:48) ]
OSwap(p)
[ SE{}p{x ←$ D}p(cid:48) ]t (cid:22) 
[ SE{x ←$ D}p ]t (cid:22) 
p ﬁrst position in bif= of hybrid oracle
p(cid:48) position before adversary call containing p
Figure 8: Advanced Core Rules.
i∗ ← A1();
1 :
2 : h ←$ Fq; let P =(ξ1, ξ2, ξi∗
3 : b ←$ B; let C =(ξ3, ξh
3 ;
let K0 = ξ4; K1 ←$ Gt;
4 :
5 : b(cid:48) ← A2(P, C, (b?K0 : K1)) with
2 ∗ gh);
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
B =
5.1 :
5.2 :
5.3 :
6 :
PrivKey(i) = {
guard(i (cid:54)= i∗);
r ←$ Fq;
return (ξr
};
return b = b(cid:48)
2 ∗ gh∗r/(i−i∗) ∗ ξ
, gr/(i−i∗) ∗ ξ
−1/(i−i∗)
2
)
−h/(i−i∗)
1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Figure 7: Synthesized simulator for DBDH.
6.1 Program transformation
The Assert(c) rule appends the command assert(c) to
the body of the game and requires that the event already
contains the conjunct c. The assert(c) can then be moved
further up using Swap if c is well-deﬁned at the given posi-
tion. Then the condition c can be exploited to simplify later
commands.
6.2 Equivalence up to failure
The Upto(p, c) rule replaces guard(c(cid:48)) at position p in an
oracle with guard(c) and yields two proof obligations: In the
resulting game, bound the probability of the original event
and the probability that the adversary performs a query
where the results of c and c(cid:48) diﬀer. To deal with the exis-
tential quantiﬁers introduced by Upto, the following rules
are used. The Guess and Find(C, e) rules get rid of an exis-
tential quantiﬁcation ∃x ∈ Qo. ev in the event by introducing
an adversary that guesses or ﬁnds an e ∈ Qo for which ev
is true. The arguments e and C of the Find rule deﬁne the
argument given to A and (eﬃcient) test executed by A to
determine if a given x ∈ Qo satisﬁes ev.
6.3 Hybrid arguments
To formalize hybrid arguments, we ﬁrst extend the syntax
and semantics of games with hybrid oracles. A hybrid oracle
has a body of the following form:
[bif : ob3]
Here, ob1, ob2, and ob3 are ordinary oracle bodies consisting
of a sequence of oracle commands and a return expression.
To execute a game containing hybrid oracles, a value io in
{0, . . . , δo − 1} is sampled initially for each hybrid oracle o.
The oracle body for a hybrid oracle o is deﬁned as
(co  io) then bif>.
For Hybrid oracles, the query loq Qo contains only argu-
ments for queries with co (cid:54)= io and the argument of the
io-query is stored in a global variable.
Hybrid oracles are required to express the proof obliga-
tions of the Hybrid rule. The Hybrid(p, ob) rule replaces
the oracle body ob(cid:48) with ob at position p and yields two
proof obligations: Bound the original event ev in the result-
ing game and bound the distinguishing probability for the
two hybrid games. In both hybrid games, ob is used if co  io. If co = io, the ﬁrst hybrid game
uses ob(cid:48) and the second hybrid game uses ob. The modiﬁed
event ev(cid:48) accounts for the fact that the query log does not
contain the argument for the io-th query anymore. It uses
the function splitQuants to replace quantiﬁcations such as
∀x ∈ Qo. c (cid:54)= c∗ with (∀x ∈ Qo. c (cid:54)= c∗) ∧ c (cid:54)= c∗ where c
refers to the argument of the io-th query.
1165A related rule is the OSwap(p) rule that requires the po-
sition p to point into a hybrid oracle deﬁnition. More pre-
cisely, p must point to the ﬁrst command of the body for
io = co, and this must be a sampling. OSwap exploits that
the body for io = co is executed at most once and moves this
sampling to the main body of the game immediately before
the adversary call containing the oracle deﬁnition.
7. TOOL AND CASE STUDIES
We have implemented the logic and the described algo-
rithms in the AutoG&P tool and veriﬁed its eﬀectiveness on
the case studies presented in Table 1.1 The source code of
AutoG&P comprises about 13K lines of OCaml with about
3KLoC each for proof search and extraction to EasyCrypt.
The tool performs proof search with a bound on the size of
the proof tree to ensure termination.
7.1 Case studies
The ﬁrst four entries of the table are smaller examples
that can be proven automatically except for the ﬁrst one.
The ﬁrst example proves the implication between two as-
sumptions and requires a creative step that the proof search
(expectedly) does not discover.
The Cramer-Shoup encryption scheme and the Kurosawa-
Desmedt encryption scheme use cyclic groups and are IND-
CCA secure. Our proofs of the two schemes closely follow
the published proofs and yield similar bounds. For Cramer-
Shoup, we provide two proofs. The ﬁrst proof is manual
(25 lines) and checked in one second. The second proof is
discovered fully automatically by the proof search algorithm.
The proof is essentially identical to our manual proof and
is found in around 12 seconds. The structure-preserving
encryption scheme by Camenisch et al. uses bilinear groups
of Type I. Again, the structure of our proofs closely follows
the pen-and-paper proof. All three proofs rely on the Upto
rule for reasoning up to failure.
The proof of selective security for the Boneh-Boyen IBE
scheme is discovered automatically both for the Type I and
Type III versions of the scheme. Somewhat surprisingly, the
sequence of high-level rule applications is identical for both
settings which is promising for certiﬁed automated trans-
lation between settings. The proof of full security for the
Water dual-system IBE follows the dual-system methodol-
ogy, i.e., ﬁrst the challenge cipher-text is encrypted using
the so-called semi-functional encryption algorithm, then a
hybrid argument is used to replace the key generation algo-
rithm by a semi-functional version, and ﬁnally, it is shown
that the view of the adversary is independent of the bit b.
7.2 EasyCrypt proof generation
We have implemented a proof generation mechanism that
transforms a valid derivation in our logic into a ﬁle that
can be veriﬁed independently using EasyCrypt. Generation
is done in four steps:
1. build a context that declares all size variables, opera-
tors, constants and global variables required in the diﬀerent
games of the proof. This step translates the signature and
the setting into EasyCrypt;
2. build the sequence of games, including the code of the
simulators in reduction steps;
1 The AutoG&P tool and the case studies are available at
https://github.com/ZooCrypt/AutoGnP.
3. output judgments in the relational and ambient logics
of EasyCrypt to justify all steps in the derivation tree. This
step critically uses high-level proof principles formalized and
proved in EasyCrypt libraries;
4. prove the concluding claim by combining all previous
derived inequalities.
The generation algorithm involves some non-trivial “plumb-
ing” between the two systems. In the long term, we plan to
enhance automation in EasyCrypt by providing a tighter in-
tegration of AutoG&P and EasyCrypt.
8. RELATED WORK
There is an increasing number of tools for proving the se-
curity of cryptographic constructions in the computational
model. The oldest tool is CryptoVerif [13], which has been
used for protocols and a few primitives. To our best knowl-
edge, CryptoVerif achieves best automation for protocols and
has never been used to verify pairing-based constructions.
More recent tools, such as CertiCrypt [9], EasyCrypt [8], and
FCF [34] can be used to reason about protocols and primi-
tives. Indeed, CertiCrypt has been used to verify the chosen
plaintext security of Boneh and Franklin Identity Based En-
cryption in the random oracle model [10]. However, these
tools are mostly interactive and proofs are very long and
can only be built by experts. On the other hand, there ex-
ist specialized tools, such as [19], [27], [26], [33], [31] and [7],
which achieve complete automation for specialized classes of
constructions (padding-based encryption, message authen-
tication codes, modes of operation, authenticated encryp-
tion, bounded security of structure-preserving signatures in
the generic group model). Our work is closely related to
ZooCrypt [5], which relies on a powerful domain-speciﬁc logic
to reason about chosen-plaintext and chosen-ciphertext se-
curity of padding-based encryption schemes; in particular,
our work generalizes the idea of algebraic reduction from
ZooCrypt. However, our logic is applicable to a broad range
of constructions—although AutoG&P is focused on group-
based and pairing-based cryptography. Moreover, our core
logic has strong connections with Computational Indistin-
guishability Logic, or CIL [6], a general-purpose logic to
reason about security of cryptographic constructions. How-