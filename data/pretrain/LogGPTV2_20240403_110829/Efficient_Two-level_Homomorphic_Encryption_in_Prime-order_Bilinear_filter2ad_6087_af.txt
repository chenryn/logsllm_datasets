1
2
1
2
1
2
BN254
0.0668
0.191
2.33
2.61
0.0646
0.193
0.0025
0.0063
1.16
BN382
0.199
0.532
4.85
5.5
0.196
0.571
0.0053
0.0126
3.82
BN462
0.452
1.14
9.01
10.01
0.447
1.14
0.0109
0.0231
8.47
ReRand
Add(cid:48)
1
Add(cid:48)
2
Mult(cid:48)
∗ The bit length of message for encryption or encrypted
message for decryption is 32.
† Enc, Dec, and ReRand use 221-entry precomputed
look-up tables.
‡ Add(cid:48)
2 and Mult(cid:48) denotes the part of Add1, Add2,
and Mult, resp., without ReRand (see Section 4.1 for
the detail), namely, the timings of Add(cid:48)
2, and
Mult(cid:48), resp., are that of Add1, Add2, and Mult, resp.,
without ReRand.
§ All the timings are given in milli-seconds.
1, Add(cid:48)
1, Add(cid:48)
Table 5: The performances for our wasm imple-
mentation of our proposed scheme on a Barreto–
Naehrig curve BN254
Algo.
Level
Windows
0.60
1.64
16.0
17.8
0.63
1.69
0.036
0.056
9.4
iPhone
1.90
3.74
25.2
27.7
1.95
3.83
0.048
0.084
14.5
ReRand
Add(cid:48)
1
Add(cid:48)
2
Mult(cid:48)
∗ See the text for the speci(cid:27)cations of two platforms
“Windows” and “iPhone.”
† The other conditions are the same as the footnotes
indicated by ∗, †, ‡, and § in Table 4.
Enc
Dec
1
2
1
2
1
2
1
2
6.3 Implementation in WebAssembly
Besides the above implementation, we also implemented our
scheme using WebAssembly (wasm) [31]. We made a demo for our
wasm implementation publicly available at the following URL.
https://herumi.github.io/she-wasm/she-demo.html
WebAssembly (wasm) is a portable low-level bytecode format
which is e(cid:28)cient in both size and load-time. Despite being intro-
duced only recently, due to its usefulness, wasm has been already
widely supported in almost all popular web browsers. Therefore, in
particular, our implementation and demo can be run on these web
browsers without having to install any plugins. These include pop-
ular web browsers such as Microsoft Edge, Safari, Google Chrome,
and Firefox on Windows/Linux/macOS/Android/iPhone.
In this implementation, we again use a Barreto–Naehrig curve
BN254 and the optimization techniques regarding look-up tables as
explained in Section 6.2.2. The message space that can be decrypted
is set to all bit strings of size less than or equal to 20 bits.
We wrote the program in C++, and used the compiler called
Emascripten version 1.37.22 to generate its corresponding wasm
bytecode. Note that this is not a trivial task in the (cid:27)rst place since
a full-(cid:30)edge arbitrary-precision arithmetic library, like the GMP
library, has not been available for wasm yet. We thus speci(cid:27)cally
designed and implemented required functionalities in order to use
for wasm directly. We included these functionalities in the current
version of the mcl library. The details on implementation methods
are out of scope for this paper and are omitted here.
Similarly to our x86 implementation, our wasm implementation
is also very fast. Interested readers can try running on their own
devices by accessing the above URL (see also a remark on the
demo below.) To show a quantitative performance, we run the
demo on two platforms. The (cid:27)rst one is an Windows platform
with Core i7-6700 (3.4GHz) CPU, using Windows 10 Pro and a web
browser Firefox 59.0.2. The second one is an iPhone platform with
iPhone 7 model number MNCF2J/A, using iOS 11.2.1 and the built-
in web browser (Safari). The resulting performances are shown in
Table 5.
Demo on Web Browsers. To try the demo, please update the web
browser to recent versions so that wasm is supported. The message
dialog “library status ok” will be shown if it can be run (this means
that wasm is supported). The current version of demo shows a
gimmick application where a client sends some ciphertext pairs:
(cid:0) Enc(1, x1), Enc(1, y1)(cid:1) , . . . ,(cid:0) Enc(1, xn), Enc(1, yn)(cid:1)
to a server who then computes the inner product over encrypted
data, which yields Enc(2, x1y1 +· · · + xnyn), and returns it back to
the client who will then decrypt. We omit writing pk for simplicity.
Decryption is possbile when x1y1 + · · · + xnyn ≤ 220. Note that
there is no real client and server there as they are only gimmick.
Indeed, to experience the fact that all the algorithms are actually
run on the browser, one can even turn o(cid:29) the Internet connection
after the above status-ok dialog appears. We note that, for simplicity
of visualizing ciphertexts, we only include the G1 component for
Enc(1, xi) and the G2 component for Enc(1, yi), analogously to
the “basic scheme” given in Section 1.3 (albeit the demo includes
re-randomizations).
7 CONCLUDING REMARKS
In this paper, we present an e(cid:28)cient two-level homomorphic public-
key encryption in prime-order bilinear groups which signi(cid:27)cantly
improves the state-of-the-art scheme by Freeman.
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea694One more advantage of our scheme is that it has exactly the same
form as the lifted ElGamal encryption [19], hence it can be immedi-
ately plugged into many useful real-world cryptographic protocols
which already utilize the lifted-ElGamal encryption scheme as a
building block. By such a replacement, it is possible to enhance
the functionality of various cryptographic protocols. For example,
Sakai et al. [52] proposed non-interactive zero-knowledge proof
that can verify whether or not a lifted-ElGamal ciphertext is an
encryption of either one of prede(cid:27)ned two values. This scheme was
applied to several cryptographic protocols for real-world problems
in the (cid:27)eld of bioinformatics [55–57], and has a large potential to be
used in various applications. The functionality upgrade from eval-
uating only linear polynomials (by the lifted-ElGamal scheme) to
degree-2 polynomials (by our scheme) will prove bene(cid:27)cial for these
real-world employments as it expands the class of functions that we
can compute over encrypted data. This expansion is proved already
useful in applications suggested in [9, 12, 36]. When applying the
(generalized) Catalano–Fiore conversion [12] to our two-level HE
scheme, we further obtain a four-level HE scheme, which allows
evaluating degree-4 polynomials over encrypted data; we expect
that this would expand applications even further.
ACKNOWLEDGMENTS
A part of this work is supported by JST CREST grant number
JPMJCR1688.
REFERENCES
[1] Diego F. Aranha, Paulo S. L. M. Barreto, Patrick Longa, and Je(cid:29)erson E. Ri-
cardini. 2013. The Realm of the Pairings. In Selected Areas in Cryptogra-
phy - SAC 2013 - 20th International Conference, Burnaby, BC, Canada, August
14-16, 2013, Revised Selected Papers (Lecture Notes in Computer Science), Tanja
Lange, Kristin E. Lauter, and Petr Lisonek (Eds.), Vol. 8282. Springer, 3–25.
https://doi.org/10.1007/978-3-662-43414-7_1
[2] Giuseppe Ateniese, Jan Camenisch, Susan Hohenberger, and Breno de Medeiros.
2005. Practical Group Signatures without Random Oracles. Cryptology ePrint
Archive, Report 2005/385. (2005). https://eprint.iacr.org/2005/385.
[3] R. Azarderakhsh, D. Fishbein, G. Grewal, S. Hu, D. Jao, P. Longa, and R. Verma.
2017. Fast Software Implementations of Bilinear Pairings. IEEE Transactions on
Dependable and Secure Computing PP, 99 (2017), 1–1. https://doi.org/10.1109/
TDSC.2015.2507120
[4] Razvan Barbulescu and Sylvain Duquesne. 2017. Updating key size estimations
for pairings. Cryptology ePrint Archive, Report 2017/334. (2017). https://eprint.
iacr.org/2017/334
[5] Paulo S. L. M. Barreto and Michael Naehrig. 2005. Pairing-Friendly Elliptic
Curves of Prime Order. In Selected Areas in Cryptography, 12th International
Workshop, SAC 2005, Kingston, ON, Canada, August 11-12, 2005, Revised Selected
Papers (Lecture Notes in Computer Science), Bart Preneel and Sta(cid:29)ord E. Tavares
(Eds.), Vol. 3897. Springer, 319–331. https://doi.org/10.1007/11693383_22
[6] Daniel J. Bernstein and Tanja Lange. 2012. Computing Small Discrete Logarithms
Faster. In Progress in Cryptology - INDOCRYPT 2012, 13th International Conference
on Cryptology in India, Kolkata, India, December 9-12, 2012. Proceedings (Lecture
Notes in Computer Science), Steven D. Galbraith and Mridul Nandi (Eds.), Vol. 7668.
Springer, 317–338. https://doi.org/10.1007/978-3-642-34931-7_19
[7] Jean-Luc Beuchat, Jorge Enrique González-Díaz, Shigeo Mitsunari, Eiji Okamoto,
Francisco Rodríguez-Henríquez, and Tadanori Teruya. 2010. High-Speed Soft-
ware Implementation of the Optimal Ate Pairing over Barreto-Naehrig Curves.
In Pairing-Based Cryptography - Pairing 2010 - 4th International Conference, Ya-
manaka Hot Spring, Japan, December 2010. Proceedings (Lecture Notes in Computer
Science), Marc Joye, Atsuko Miyaji, and Akira Otsuka (Eds.), Vol. 6487. Springer,
21–39. https://doi.org/10.1007/978-3-642-17455-1_2
[8] Dan Boneh, Xavier Boyen, and Hovav Shacham. 2004. Short Group Signatures. In
Advances in Cryptology - CRYPTO 2004, 24th Annual International CryptologyCon-
ference, Santa Barbara, California, USA, August 15-19, 2004, Proceedings (Lecture
Notes in Computer Science), Matthew K. Franklin (Ed.), Vol. 3152. Springer, 41–55.
https://doi.org/10.1007/978-3-540-28628-8_3
[9] Dan Boneh, Eu-Jin Goh, and Kobbi Nissim. 2005. Evaluating 2-DNF Formulas on
Ciphertexts. In Theory of Cryptography, Second Theory of Cryptography Conference,
TCC 2005, Cambridge, MA, USA, February 10-12, 2005, Proceedings (Lecture Notes
in Computer Science), Joe Kilian (Ed.), Vol. 3378. Springer, 325–341. https://doi.
org/10.1007/978-3-540-30576-7_18
[10] Zvika Brakerski. 2012. Fully Homomorphic Encryption without Modulus Switch-
ing from Classical GapSVP. In Advances in Cryptology - CRYPTO 2012 - 32nd An-
nual Cryptology Conference, Santa Barbara, CA, USA, August 19-23, 2012. Proceed-
ings (Lecture Notes in Computer Science), Reihaneh Safavi-Naini and Ran Canetti
(Eds.), Vol. 7417. Springer, 868–886. https://doi.org/10.1007/978-3-642-32009-5_
50
[11] Zvika Brakerski, Craig Gentry, and Vinod Vaikuntanathan. 2012. (Leveled) fully
homomorphic encryption without bootstrapping. In Innovations in Theoretical
Computer Science 2012, Cambridge, MA, USA, January 8-10, 2012, Sha(cid:27) Goldwasser
(Ed.). ACM, 309–325. https://doi.org/10.1145/2090236.2090262
[12] Dario Catalano and Dario Fiore. 2015. Using Linearly-Homomorphic Encryption
to Evaluate Degree-2 Functions on Encrypted Data. In Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security, Denver, CO,
USA, October 12-6, 2015, Indrajit Ray, Ninghui Li, and Christopher Kruegel (Eds.).
ACM, 1518–1529. https://doi.org/10.1145/2810103.2813624
[13] Jung Hee Cheon and Damien Stehlé. 2015. Fully Homomophic Encryption over
the Integers Revisited. In Advances in Cryptology - EUROCRYPT 2015 - 34th
Annual International Conference on the Theory and Applications of Cryptographic
Techniques, So(cid:27)a, Bulgaria, April 26-30, 2015, Proceedings, Part I (Lecture Notes in
Computer Science), Elisabeth Oswald and Marc Fischlin (Eds.), Vol. 9056. Springer,
513–536. https://doi.org/10.1007/978-3-662-46800-5_20
[14] Josh D. Cohen and Michael J. Fischer. 1985. A Robust and Veri(cid:27)able Cryptograph-
ically Secure Election Scheme (Extended Abstract). In 26th Annual Symposium
on Foundations of Computer Science, Portland, Oregon, USA, 21-23 October 1985.
IEEE Computer Society, 372–382. https://doi.org/10.1109/SFCS.1985.2
[15] Ronald Cramer, Matthew K. Franklin, Berry Schoenmakers, and Moti Yung. 1996.
Multi-Autority Secret-Ballot Elections with Linear Work. In Advances in Cryp-
tology - EUROCRYPT ’96, International Conference on the Theory and Application
of Cryptographic Techniques, Saragossa, Spain, May 12-16, 1996, Proceeding (Lec-
ture Notes in Computer Science), Ueli M. Maurer (Ed.), Vol. 1070. Springer, 72–83.
https://doi.org/10.1007/3-540-68339-9_7
[16] Ronald Cramer, Rosario Gennaro, and Berry Schoenmakers. 1997. A secure and
optimally e(cid:28)cient multi-authority election scheme. European Transactions on
Telecommunications 8, 5 (1997), 481–490. https://doi.org/10.1002/ett.4460080506
[17] Ronald Cramer, Rosario Gennaro, and Berry Schoenmakers. 1997. A Secure and
Optimally E(cid:28)cient Multi-Authority Election Scheme. In Advances in Cryptol-
ogy - EUROCRYPT ’97, International Conference on the Theory and Application of
Cryptographic Techniques, Konstanz, Germany, May 11-15, 1997, Proceeding (Lec-
ture Notes in Computer Science), Walter Fumy (Ed.), Vol. 1233. Springer, 103–118.
https://doi.org/10.1007/3-540-69053-0_9
[18] Ivan Damgård, Mads Jurik, and Jesper Buus Nielsen. 2010. A generalization of
Paillier’s public-key system with applications to electronic voting. Int. J. Inf. Sec.
9, 6 (2010), 371–385. https://doi.org/10.1007/s10207-010-0119-9
[19] Taher ElGamal. 1985. A public key cryptosystem and a signature scheme based