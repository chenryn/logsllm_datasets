I'm trying to have `std` imported conditionally for testing only, as I use
`core` in my OS kernel, and found this issue. This code:
    #![feature(core)]
    #![feature(no_std)]
    #![no_std]
    extern crate std;
    extern crate core;
    #[derive(Copy)]
    pub enum Kind {
        None = 0,
        Reserved = 1,
    }
With this `Cargo.toml` (where `../lib/libcore` is from the exact same commit
as the compiler):
    [package]
    name = "example"
    version = "0.0.1"
    authors = ["Virtlink "]
    [dependencies.core]
    path = "../lib/libcore"
Gives me these errors:
       Compiling example v0.0.1 (file:///home/virtlink/projects/example)
    src/lib.rs:1:1: 1:1 error: duplicate entry for `const_ptr` [E0152]
    src/lib.rs:1 #![feature(core)]
                 ^
    src/lib.rs:1:1: 1:1 error: duplicate entry for `mut_ptr` [E0152]
    src/lib.rs:1 #![feature(core)]
                 ^
    src/lib.rs:1:1: 1:1 error: duplicate entry for `i8` [E0152]
    src/lib.rs:1 #![feature(core)]
                 ^
    ...
    src/lib.rs:1:1: 1:1 error: duplicate entry for `non_zero` [E0152]
    src/lib.rs:1 #![feature(core)]
                 ^
    src/lib.rs:1:1: 1:1 error: duplicate entry for `debug_trait` [E0152]
    src/lib.rs:1 #![feature(core)]
                 ^
    error: aborting due to 58 previous errors
    Could not compile `example`.
However, if I remove the local `libcore` dependency from `Cargo.toml` then it
works fine:
    [package]
    name = "example"
    version = "0.0.1"
    authors = ["Virtlink "]
I expected there to be no difference between using a local copy of `core` and
using the built-in `core`.
I can't remove `extern crate core`, due to issue #23982, and I can't use the
built-in `core` as I'm using a _custom target_ for my Rust kernel.
    rustc 1.0.0-nightly (c89de2c56 2015-03-28) (built 2015-03-29)
    binary: rustc
    commit-hash: c89de2c56baeb61e7cc434924dcc8bedd32b26b8
    commit-date: 2015-03-28
    build-date: 2015-03-29
    host: x86_64-unknown-linux-gnu
    release: 1.0.0-nightly