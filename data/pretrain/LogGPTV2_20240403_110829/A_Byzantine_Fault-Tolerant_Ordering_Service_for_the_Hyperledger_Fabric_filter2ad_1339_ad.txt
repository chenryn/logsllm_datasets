A
T
-
S
E
A
T
-
S
E
A
T
-
S
E
A
T
-
S
E
A
T
-
S
E
A
T
-
S
E
A
T
-
S
E
A
T
-
S
E
A
T
-
S
E
A
M
T
M
T
M
T
M
T
M
T
M
T
M
T
M
T
M
T
M
T
M
T
M
T
a
R
t
a
R
t
a
R
t
a
R
t
a
R
t
a
R
t
a
R
t
a
R
t
a
R
t
a
R
t
a
R
t
a
R
t
40 bytes
200 bytes
1 kbytes
4 kbytes
40 bytes
200 bytes
1 kbytes
4 kbytes
40 bytes
200 bytes
1 kbytes
4 kbytes
(a) Oregon (weighted Vmax , leader node).
(b) Virginia (weighted Vmax ).
(c) S˜ao Paulo (weighted Vmin).
Fig. 7: Amazon EC2 latency results (4 receivers, blocks with 100 envelopes).
conﬁgured to launch enough client
throughput always above 1000 transactions/second.
threads to keep node
Figure 7 presents the results for the geo-distributed micro-
benchmark with a a block size of 100 envelopes. As expected,
WHEAT’s latency is consistently lower than BFT-SMART’s
across all frontends – always below 500 miliseconds and up
to 45% less than BFT-SMART. It is worth pointing out that
envelope size has a relatively modest impact on latency: across
all regions, the difference between a 4k and a 400k bytes
block was never above 61 milliseconds for any percentile or
protocol. By contrast, the placement of the frontends when
using WHEAT exhibited a larger impact on latency:
the
difference between Virginia (weighted Vmax ) and S˜ao Paulo
(weighted Vmin) is above 90 milliseconds. In addition, the
difference between S˜ao Paulo and Oregon is even larger, in
the order of 120 miliseconds.
VII. POSSIBLE IMPROVEMENTS ON FABRIC
In the following we list some improvements that could be
made on the Fabric codebase to facilitate the implementation
and improve the performance of ordering services.
The implementation of our ordering service produces a
single signature per block, aimed at protecting its integrity.
By contrast, as pointed out in Section VI-A, Fabric expects
each block to contain two signatures associated with it. While
one signature is meant to protect the integrity of its associated
block, the other is intended to bind the block transactions to
an execution context. However, this can lead to a signiﬁcant
performance penalty when the bounding factor is the rate of
signature generation, i.e., small transactions with few fron-
tends. By inspecting the code and talking to Fabric developers,
we found no good reason to have this second signature,
as it basically covers the regular payload plus the id of a
block storing the last reconﬁguration envelope. It appears that
producing only this second signature sufﬁces to protect the
integrity of the blockchain.
To withstand malicious behavior from ordering nodes, each
one locally assembles blocks and produces their respective
signatures. This results in a stream of blocks that are appended
to the local copy of the ledger that
the
frontends. However, the Fabric codebase is better suited for
crash-only ordering services such as Kafka, which generates
a stream of envelopes rather than a stream of blocks. For
is maintained at
instance, upon receiving a stream of envelopes, Fabric uses
methods to both generate blocks and append them to the chain.
Moreover, the methods that append the blocks to the chain
also produce the signatures discussed previously. This is not
only unnecessary in the case of our ordering service, but also
does not provide any additional protection to the block in a
scenario in which Byzantine faults are considered. This forced
us to augment the Fabric with support for receiving pre-signed
blocks and strictly appending them to the chain.
As mentioned in Section V, we use UNIX sockets to com-
municate between the Fabric process that receives transactions
from clients (Go) and BFT-SMART’s process that relays
envelopes to ordering nodes (Java). This adds an overhead
that could be avoided if we had a single Java process receiving
envelopes directly from clients and relaying them to ordering
nodes. While this overhead could potentially be mitigated with
a proper Go wrapper for BFT-SMART,6 we believe it would
be worth to augment the Fabric Java SDK (that we also use)
with support for reception and parsing of client requests.
Finally, due to BFT-SMART native support of view recon-
ﬁguration, our ordering service can fully support reconﬁgura-
tion of the set of ordering nodes. However, this does not extend
to the set of frontends, speciﬁcally at Fabric’s Go process. In
order to support reconﬁguration on this set of nodes, Fabric
needs to be augmented with the capacity to transfer the ledger
between these Fabric processes.
VIII. RELATED WORK
The concept of blockchain was originally introduced by
Bitcoin to solve the double spending problem associated with
crypto-currency in permissionless peer-to-peer networks [9].
Since Bitcoin’s inception and widespread adoption, other
platforms based on Proof-of-Work blockchain have emerged.
Within these new platforms, Ethereum is particularly relevant
for its support of smart contracts [10].
Because of
the known performance penalty associated
with Proof-of-Work creation and the fact
that Blockchain
technology is gaining the attention of many industries, the
idea of permissioned blockchains are quickly gaining trac-
tion. Examples of other permissioned blockchain platforms
include Chain, which uses the Federated Consensus algorithm
[21]. Tendermint implements the BFT protocol designed by
6Such wrapper is already available for C++ and Python [20].
57
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:27:14 UTC from IEEE Xplore.  Restrictions apply. 
Buchman et. al. [14]. Kadena [15] uses a variant of the
Raft consensus protocol [22] adapted to Byzantine faults
[23]. Finally, Symbiont Assembly7 uses a Go implementation
of the Mod-SMaRt algorithm [17] and heavily follows the
design of BFT-SMART. A recent survey [3] compares all
these permissioned protocols and points BFT-SMART as a
prominent candidate for implementing this type of ledgers.
Many services have been implemented on top of BFT-
SMART over the years.8 The one that most closely resembles
the architecture of the ordering service presented here is
SieveQ [24]. This system is a hybrid between a publish-
subscribe service and an application-level ﬁrewall that also
orders messages before sending them to targetted receivers.
Among many differences, SieveQ focus on the robustness
against DoS attacks and recovery of faulty replicas, while our
service focuses on the speciﬁcs of block generation for Fabric.
IX. CONCLUSION
In this paper we described the design, implementation, and
evaluation of a BFT ordering service for Hyperledger Fabric
using the BFT-SMART replication library. Our experimental
evaluation shows that peak throughput is bound either by the
rate at which block signatures are generated by a replica,
or the rate of envelopes ordered by the total order protocol.
Moreover, the results also suggest that, for smaller envelope
sizes, increasing the block size while decreasing the rate of
signature generation can yield higher throughput than to sim-
ply rely on the maximum possible rate of signature generation.
Nonetheless, for a higher number of repliers, throughput tends
to converge to similar values across all micro-benchmarks.
Even when transmitting blocks of 400 kbytes to 32 receivers
in a cluster of 10 nodes, the ordering service still reaches a sus-
tained throughput of approximately 2200 transactions/second
– which is more than twice of Ethereum’s theoretical peak
of 1000 transactions/second [25], and vastly superior than
Bitcoin’s peak of 7 transaction/second [1]. Finally, latency
measurements taken from a geo-replicated setting are also
shown attractive, with values within half a second under
moderate workload using WHEAT, even when accounting for
large block sizes.
ACKNOWLEDGMENT
This work was supported by an IBM Faculty Award, by FCT
through the LASIGE Research Unit (UID/CEC/00408/2013)
and the IRCoC project (PTDC/EEI-SCR/6970/2014), and by
the European Commission through the H2020 SUPERCLOUD
project (643964).
REFERENCES
[1] M. Vukoli´c, “The quest for scalable blockchain fabric: Proof-of-work
vs. BFT replication,” in Open Problems in Network Security - IFIP WG
11.4 International Workshop, Zurich, Switzerland, 2015.
[2] M. Castro and B. Liskov, “Practical Byzantine fault
tolerance and
proactive recovery,” ACM Transactions on Computer Systems, vol. 20,
no. 4, pp. 398–461, 2002.
7https://symbiont.io/technology/assembly/
8https://github.com/bft-smart/library/wiki/Used-in-and-by
[3] C. Cachin and M. Vukolic, “Blockchain consensus protocol in the wild
(invited paper),” in Proceedings of 31th International Symposium on
Distributed Computing, Vienna, Austria, 2017.
[4] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis, A. D.
Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich, S. Mu-
ralidharan, C. Murthy, B. Nguyen, M. Sethi, G. Singh, K. Smith,
A. Sorniotti, C. Stathakopoulou, M. Vukolic, S. W. Cocco, and J. Yellick,
“Hyperledger fabric: A distributed operating system for permissioned
blockchains,” in Proceedings of
the 13th ACM SIGOPS European
Conference on Computer Systems, Porto, Portugal, 2018.
[5] A. Bessani, J. Sousa, and E. Alchieri, “State machine replication for
the masses with BFT-SMART,” in Proceedings of the 44th IEEE/IFIP
International Conference on Dependable Systems and Networks, Atlanta,
GA, USA, 2014.
[6] J. Sousa and A. Bessani, “Separating the WHEAT from the chaff: An
empirical design for geo-replicated state machines,” in Proceedings of
the IEEE 34th Symposium on Reliable Distributed Systems, Montreal,
Quebec, Canada, 2015.
[7] A. Miller, Y. Xia, K. Croman, E. Shi, and D. Song, “The honey badger
of BFT protocols,” in Proceedings of the 2016 ACM Conference on
Computer and Communications Security, Vienna, Austria, 2016.
[8] P. Hunt, M. Konar, F. Junqueira, and B. Reed, “Zookeeper: Wait-free
coordination for internet-scale services,” in Proceedings of the 2010
USENIX Annual Technical Conference, Boston, MA, USA, 2010.
[9] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2009.
[Online]. Available: http://bitcoin.org/bitcoin.pdf
[10] G. Wood, “Ethereum: A secure decentralised generalised transaction
ledger,” 2015. [Online]. Available: http://gavwood.com/Paper.pdf
[11] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol:
Analysis and applications,” in Proceedings of the 34th Annual Inter-
national Conference on the Theory and Applications of Cryptographic
Techniques, Soﬁa, Bulgaria, 2015.
[12] A. Back, “Hashcash - a denial of service counter-measure,” 2002.
[Online]. Available: http://www.hashcash.org/papers/hashcash.pdf
[13] C. Dwork and M. Naor, “Pricing via processing or combatting junk
the 12th Annual International Cryptology
mail,” in Proceedings of
Conference on Advances in Cryptology, London, UK, 1993.
[14] E. Buchman, “Tendermint: Byzantine fault
tolerance in the age of
blockchains,” Master’s thesis, University of Guelph, 2016.
[15] W. Martino,
“Kadena: The ﬁrst
performance
private blockchain,” 2016. [Online]. Available: http://kadena.io/docs/
Kadena-ConsensusWhitePaper-Aug2016.pdf
scalable,
high
[16] N. Szabo, “Smart contracts: Building blocks for digital markets,” EX-
TROPY: The Journal of Transhumanist Thought, no. 16, 1996.
[17] J. Sousa and A. Bessani, “From Byzantine consensus to BFT state ma-
chine replication: A latency-optimal transformation,” in Proceedings of
the 9th European Dependable Computing Conference, Sibiu, Romania,
2012.
[18] D. Gifford, “Weighted voting for replicated data,” in Proceedings of the
7th ACM SIGOPS Symposium on Operating Systems Principles, Paciﬁc
Grove, CA, USA, 1979.
[19] D. B. Johnson and A. J. Menezes, “Elliptic curve DSA (ECSDA): An
enhanced DSA,” in Proceedings of the 7th Conference on USENIX
Security Symposium - Volume 7, Berkeley, CA, USA, 1998.
[20] C. Y. da Silva Costa and E. A. P. Alchier, “Diversity on state machine
replication,” in Proceedings of the 32nd IEEE International Confer-
ence on Advanced Information Networking and Applications, Krak´ow,
Poland, 2018.
[21] “Chain protocol whitepaper,” 2014. [Online]. Available: https://chain.
com/docs/1.2/protocol/papers/whitepaper
[22] D. Ongaro and J. Ousterhout, “In search of an understandable consensus
algorithm,” in 2014 USENIX Annual Technical Conference, Philadelphia,
PA, USA, 2014.
[23] C. Copeland and H. Zhong, “Tangaroa: a Byzantine fault tolerant raft,”
[Online]. Available: http://www.scs.stanford.edu/14au-cs244b/
2014.
labs/projects/copeland zhong.pdf
[24] M. Garcia, N. Neves, and A. Bessani, “SieveQ: A layered BFT pro-
tection system for critical services,” IEEE Transactions on Dependable
and Secure Computing (accepted for publication), 2016.
[25] V. Buterin, “Ethereum platform review: Opportunities and challenges
for private and consortium blockchains,” 2016. [Online]. Available:
http://r3cev.com
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:27:14 UTC from IEEE Xplore.  Restrictions apply. 
58