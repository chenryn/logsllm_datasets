1. We need to install the following list of required packages:
DHCP server
TFTP server
Web server
Assuming an Ubuntu 18.04 host, as discussed earlier, run this command to install
the packages we will need for this part of the chapter:
$ apt-get install isc-dhcp-server tftpd-hpa nginx
2. With these installed, the next step is to configure our DHCP
server, with which the preceding package is configured through the
/etc/dhcp/dhcpd.conf file. The configuration file shown in the following code
block is a good, if basic, example for our PXE boot network, though naturally,
you'll need to edit the subnet definition to match your own test network. The first
part of the file contains some important global directives and the subnet
definition for the network:
allow bootp;
# https://www.syslinux.org/wiki/index.php?title=PXELINUX#UEFI
# This one line must be outside any bracketed scope
option architecture-type code 93 = unsigned integer 16;
subnet 192.168.201.0 netmask 255.255.255.0 {
range 192.168.201.51 192.168.201.99;
option broadcast-address 192.168.201.255;
option routers 192.168.201.1;
option domain-name-servers 192.168.201.1;
The next part of the file then contains configuration directives, to ensure that we
load the correct pre-execution binary, depending on the type of system being
used. It is common at the time of writing to find a mix of both BIOS- and UEFI-
based systems, so the following configuration is important:
class "pxeclients" {
match if substring (option vendor-class-identifier, 0, 9) =
"PXEClient";
if option architecture-type = 00:00 {
[ 146 ]
Custom Builds with PXE Booting Chapter 6
filename "BIOS/pxelinux.0";
} else if option architecture-type = 00:09 {
filename "EFIx64/syslinux.efi";
} else if option architecture-type = 00:07 {
filename "EFIx64/syslinux.efi";
} else if option architecture-type = 00:06 {
filename "EFIia32/syslinux.efi";
} else {
filename "BIOS/pxelinux.0";
}
}
}
Most of this is fairly self-explanatory if you have worked with DHCP servers
before. However, the block of text headed class "pxeclients" deserves a
special mention. Some years ago, server hardware relied on the BIOS to boot, and
thus PXE boot configurations were simple, as there was only one pre-boot
environment that you needed to load. Most new server hardware now is
configured with firmware that can operate in either Legacy BIOS or UEFI modes,
and most default to UEFI, unless configured otherwise. The pre-execution binary
is different, depending on the type of firmware in use, and hence,
the if statements in this block make use of a DHCP option, returned to the
server when the client makes its DHCP request.
3. With this configuration in place, enable the DHCP server, and restart it, as
follows:
$ systemctl enable isc-dhcp-server.service
$ systemctl restart isc-dhcp-server.service
4. The default configuration for the TFTP server will suffice for this example, so,
let's also enable this and ensure it is running as follows:
$ systemctl enable tftpd-hpa.service
$ systemctl restart tftpd-hpa.service
5. Finally, we'll use the default configuration of nginx, and serve all the files we
need from /var/www/html—obviously, in an enterprise environment, you
would want to do something a bit more advanced, but for the following practical
example here, this will suffice:
$ systemctl enable nginx.service
$ systemctl restart nginx.service
[ 147 ]
Custom Builds with PXE Booting Chapter 6
That's our server infrastructure configured, but one last task remains. We need the pre-
execution environment binaries for our TFTP server, to send to the clients.
Although these are readily available for most Linux distributions (and Ubuntu 18.04 is no
exception), these packages are often quite old (the last stable release of PXELINUX was in
2014), and I have run into known bugs with these, especially when working with UEFI
hardware. Although you are welcome to try newer snapshots, the author has achieved the
most success with the release tagged 6.04-pre2, and so, we will explain how to build this
and copy the files into the correct places for our TFTP server, as follows:
1. First of all, download and unpack the required release of SYSLINUX (which
contains the PXELINUX code) by entering the following code:
$ wget
https://www.zytor.com/pub/syslinux/Testing/6.04/syslinux-6.04-pre2.
tar.gz
$ tar -xzf syslinux-6.04-pre2.tar.gz
$ cd syslinux-6.04-pre2/
2. Next, we need to install a few build tools to successfully compile the code, as
follows:
$ sudo apt-get install nasm uuid-dev g++-multilib
3. Finally, we'll make sure the build directory is clean, and then build the code, as
follows:
$ make spotless
$ make
When the build is complete, the final step is to copy the files into the correct places.
Recalling our DHCP server configuration from earlier, we know that we need to separate
out the files related to Legacy BIOS boots, and those released to newer UEFI boots. Here,
we will step through the process of setting up your server for both BIOS and UEFI network
boots:
1. The default root directory for the TFTP server is /var/lib/tftpboot on
Ubuntu 18.04. Under this path, we will create the two directories referenced by
the DHCP server configuration, as follows:
$ mkdir -p /var/lib/tftpboot/{EFIx64,BIOS}
[ 148 ]
Custom Builds with PXE Booting Chapter 6
2. Then, we will run this set of commands, to gather up and copy all BIOS-related
boot files into the newly created BIOS directory:
$ cp bios/com32/libutil/libutil.c32
bios/com32/elflink/ldlinux/ldlinux.c32 bios/core/pxelinux.0
/var/lib/tftpboot/BIOS
$ mkdir /var/lib/tftpboot/BIOS/pxelinux.cfg
$ mkdir /var/lib/tftpboot/BIOS/isolinux
$ find bios -name *.c32 -exec cp {} /var/lib/tftpboot/BIOS/isolinux
\;
3. We then repeat this step, except this time, we specify the UEFI-related boot files,
as follows:
$ cp efi64/com32/elflink/ldlinux/ldlinux.e64
efi64/com32/lib/libcom32.c32 efi64/com32/libutil/libutil.c32
efi64/efi/syslinux.efi /var/lib/tftpboot/EFIx64
$ mkdir /var/lib/tftpboot/EFIx64/pxelinux.cfg
$ mkdir /var/lib/tftpboot/EFIx64/isolinux
$ find efi64/ -name *.c32 -exec cp {}
/var/lib/tftpboot/EFIx64/isolinux \;
With those steps completed, we now have a completed, functional PXE server. We have not
downloaded any operating system images yet, so the boot process wouldn't proceed very
far, but if you were to execute a test at this point, your server firmware should report that it
has obtained an IP address from the DHCP server, and should present you with some boot-
related messages. However, we will build this out further before going into any detailed
testing in this book, and, in the next section, we will look at how to obtain the correct
network installation images for your chosen Linux distribution.
Obtaining network installation images
The next step in our PXE boot setup process is to build out the images required. Luckily,
obtaining the boot images is quite easy—the kernel and packages are normally contained
on the DVD ISO images for your chosen Linux distribution. Obviously, this can vary from
distribution to distribution, so you will need to check this. In this chapter, we will show
examples for Ubuntu Server and CentOS 7—these principles could also be applied to many
Debian derivatives, Fedora, and Red Hat Enterprise Linux.
[ 149 ]
Custom Builds with PXE Booting Chapter 6
The installation images required for network booting, along with the
required installation packages, are normally found on the full DVD
images—live images are often not sufficient because they lack either a
sufficiently complete set of packages to perform the installation, or the
network boot-capable kernel is missing.
Let's make a start with the CentOS 7 image, as follows:
1. First of all, download the latest DVD image from your nearest mirror—for
example, the one shown in the following code block:
$ wget
http://mirror.netweaver.uk/centos/7.6.1810/isos/x86_64/CentOS-7-x86
_64-DVD-1810.iso
2. Once downloaded, mount the ISO image to a suitable location so that the files
can be copied from it, as follows:
$ mount -o loop CentOS-7-x86_64-DVD-1810.iso /mnt
3. Now, the network boot-capable kernel and initial RAMDisk image should be
copied to a location of our choosing, under the TFTP server root.
Note that in the following example, we are only doing this for UEFI
booting. To set up for Legacy BIOS booting, follow exactly the same
process, but place all files to be served by TFTP
in /var/lib/tftpboot/BIOS instead. This applies throughout the rest of
this chapter.
The commands to achieve this on our test system are as follows:
$ mkdir /var/lib/tftpboot/EFIx64/centos7
$ cp /mnt/images/pxeboot/{initrd.img,vmlinuz}
/var/lib/tftpboot/EFIx64/centos7/
[ 150 ]
Custom Builds with PXE Booting Chapter 6
4. Finally, we need the web server we installed earlier to serve out the files for the
installer—once the kernel and initial RAMDisk environment load, the rest of the
environment will be served over HTTP, which is better suited to large data
transfers. Again, we'll create a suitable subdirectory for our CentOS content, as
follows:
$ mkdir /var/www/html/centos7/
$ cp -r /mnt/* /var/www/html/centos7/
$ umount /mnt
That's all there is to it! Once these steps have been completed, we'll repeat this process for
our Ubuntu 18.04 Server boot image, as follows:
$ wget
http://cdimage.ubuntu.com/releases/18.04/release/ubuntu-18.04.2-ser
ver-amd64.iso
$ mount -o loop ubuntu-18.04.2-server-amd64.iso /mnt
$ mkdir /var/lib/tftpboot/EFIx64/ubuntu1804
$ cp /mnt/install/netboot/ubuntu-installer/amd64/{linux,initrd.gz}
/var/lib/tftpboot/EFIx64/ubuntu1804/
$ mkdir /var/www/html/ubuntu1804
$ cp -r /mnt/* /var/www/html/ubuntu1804/
$ umount /mnt
With these steps complete, we just have one more configuration stage to go before we can
perform a network boot of our chosen operating system.
The process is almost identical—the only difference is that the NetBoot-
capable kernel and RAMDisk were sourced from a different directory on
the ISO image.
In the next section, we will configure the PXE boot server we have built so far, so as to boot
from these installation images.
[ 151 ]
Custom Builds with PXE Booting Chapter 6
Performing your first network boot
Thus far, we have configured our server to give our clients an IP address on boot, and have
even built two installation trees, such that we can install either CentOS 7 or Ubuntu 18.04
Server, without the need for any physical media. However, when our target machine boots
over the network, how does it know what to boot?
The answer to this comes in the form of the PXELINUX configuration. This is very similar
in nature to the GRand Unified Bootloader (GRUB) configuration that most Linux
installations use, to define their boot options and parameters when they boot from disk.
Using the installation we have built so far, these configuration files are expected to be
in /var/lib/tftpboot/EFIx64/pxelinux.cfg (or /var/lib/tftpboot/BIOS/pxelin
ux.cfg for Legacy BIOS machines).
Now, a word on file naming. You might want all devices that boot off a network interface
to perform a network boot. However, consider a server where a valid Linux installation is
on the local disk, but through some error (perhaps misconfiguration of the boot order in the
firmware, or a missing boot loader), it boots from the network interface instead of the local
disk. If you have a full, unattended installation configured on your PXE server, this would
wipe the local disks, with potentially disastrous consequences.
If you want all servers to perform a network boot regardless, you create a special
configuration file, called default.
However, if you want to be more targeted, you instead create a configuration file with the
name based on the MAC address. Suppose we have a server with the MAC
address DE:AD:BE:EF:01:23, and our DHCP server is going to assign it the IP
address 192.168.10.101/24 (this would most likely be through a static DHCP mapping
so that we can ensure that this server always gets this IP address). When this server
network boots using UEFI, it will look initially
for /var/lib/tftpboot/EFIx64/pxelinux.cfg/01-de-ad-be-ef-01-23.
If this file is not present, it will look for a file named after the hex-encoded IP address. If
this does not exist, it then takes one digit off the hexadecimal IP address at a time, until it
finds a matching file. In this manner, our server would look
for /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0A80A65. If it doesn't find it, it cycles
through the ever-shortening IP address representations, until it runs out of options. If no
appropriately named file is found, it finally reverts to the default file, and if that file isn't
present, a boot failure is reported by the client.
[ 152 ]
Custom Builds with PXE Booting Chapter 6
Thus, the full search sequence for configuration files is as follows:
1. /var/lib/tftpboot/EFIx64/pxelinux.cfg/01-de-ad-be-ef-01-23
2. /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0A80A65
3. /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0A80A6
4. /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0A80A
5. /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0A80
6. /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0A8
7. /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0A
8. /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0
9. /var/lib/tftpboot/EFIx64/pxelinux.cfg/C
10. /var/lib/tftpboot/EFIx64/pxelinux.cfg/default
The idea of shortening the IP address filename is to enable you to create a subnet-wide
configuration—for example, if all machines in the 192.168.10.0/24 subnet needed the
same boot configuration, you could create a single file
called /var/lib/tftpboot/EFIx64/pxelinux.cfg/C0A80A. Pay special attention to the
case of the letters in the filename—the MAC address-based filename requires lowercase
letters, while the IP address requires uppercase letters.
There are numerous permutations of configuration for the contents of this configuration
file, and looking into all the possibilities for this is left as an exercise for the reader—there is
ample documentation, and examples, available for PXELINUX. However, with the specific
aim of booting our network install images, let's consider the following file. Initially, we
define the header for the menu, with a simple title and timeout, as follows:
default isolinux/menu.c32
prompt 0
timeout 120
menu title --------- Enterprise Automation Boot Menu ---------
[ 153 ]
Custom Builds with PXE Booting Chapter 6
We then proceed to define the entries for our two operating system install images that we
have built, as follows:
label 1
menu label ^1. Install CentOS 7.6 from local repo
kernel centos7/vmlinuz
append initrd=centos7/initrd.img method=http://192.168.201.1/centos7
devfs=nomount ip=dhcp inst.vnc inst.vncpassword=password
label 2
menu label ^2. Install Ubuntu Server 18.04 from local repo
kernel ubuntu1804/linux
append initrd=ubuntu1804/initrd.gz vga=normal locale=en_US.UTF-8
mirror/country=manual mirror/http/hostname=192.168.201.1
mirror/http/directory=/ubuntu1804 mirror/http/proxy="" live-installer/net-
image=http://192.168.201.1/ubuntu1804/install/filesystem.squashfs
As with other examples in this book, these are real-world, tested examples that will work in
their own right. However, they should be customized to your own requirements, and you
should endeavor to read and understand the code before applying it in a production
environment.
In these preceding examples, 192.168.201.1 is the IP address of my PXE
server in my test setup. Be sure to replace this wherever you see it with
the IP address of your PXE server.
This is, in fact, a very simple example—here, we are defining a simple text mode menu with
two entries, one for each of our operating systems. Each menu entry has a label, a title that
appears in the menu, and then, a kernel and append line. The kernel line tells the client
from where to source the kernel on our TFTP server, while the append line is used to
specify the path of the RAMDisk image and all supplementary boot parameters.
These boot parameters, as you can see, are greatly different for different Linux
distributions, as are the capabilities of the installers. For example, the CentOS 7 installer is
graphical (though a text mode option is available) and supports a VNC server, which we
are configuring in the first menu item, enabling a remote installation using a VNC console,
using the parameters inst.vnc and inst.vncpassword=password. The other parameters
used are the following:
method=http://192.168.201.1/centos7: Sets the address from where our
CentOS 7 repo will be served
devfs=nomount: Tells the kernel not to mount the devfs filesystem
[ 154 ]
Custom Builds with PXE Booting Chapter 6
ip=dhcp: Tells the pre-boot environment to obtain an IP address using DHCP, to
then be able to reach the HTTP server
The Ubuntu installer is, by contrast, normally run in text mode, and so does not support a
VNC server, so a different remote access technology would be required to perform an
interactive installation, such as Serial-Over-LAN (SOL). Nonetheless, this menu file would
be sufficient for us to perform an interactive installation of either OS as we choose, and is
provided as a template for the reader to build on and develop, as they see fit. The
parameters in use are the following:
vga=normal: Tells the installer to use the standard VGA mode
locale=en_US.UTF-8: Sets the locale—adjust this to suit your environment
mirror/country=manual: Tells the installer we are manually defining the