# Analysis of Bugs in Apache Virtual Computing Lab

**Authors:**
- Flavio Frattini¹
- Rahul Ghosh²
- Marcello Cinque¹
- Andy Rindos²
- Kishor S. Trivedi³

¹University of Naples Federico II, Naples, Italy
²IBM Software Group, Research Triangle Park, NC, USA
³Duke University, Durham, NC, USA

**Contact Emails:**
- [flavio.frattini@unina.it](mailto:flavio.frattini@unina.it)
- [rahul.ghosh@ibm.com](mailto:rahul.ghosh@ibm.com)
- [marcello.cinque@unina.it](mailto:marcello.cinque@unina.it)
- [andy.rindos@ibm.com](mailto:andy.rindos@ibm.com)
- [kishor.trivedi@duke.edu](mailto:kishor.trivedi@duke.edu)

## Abstract
Understanding the bugs in software platforms is crucial for developers, especially during the testing phase. However, this issue has been rarely explored for open-source cloud platforms. In this paper, we analyze 146 bug reports from Apache Virtual Computing Lab (VCL), a representative open-source cloud platform. The analysis is conducted using an empirical approach tailored for open-source clouds. For VCL development and test teams, these results provide valuable guidelines, such as directing volunteer efforts to components where more residual bugs are expected.

## 1. Introduction
Open-source cloud software platforms have recently gained significant attention from both industry and academia. While these platforms are still in their early stages, various research challenges need to be addressed before they can offer mature cloud services. Analyzing bugs is one such important aspect, as it helps organizations like the Apache Software Foundation to coordinate testing efforts and decide when to release new versions. However, bugs in open-source cloud platforms remain underexplored.

In this paper, we analyze the publicly available bugs of Apache VCL. We classify bugs based on the software component where they are discovered, their type, and the time of reporting. This classification helps in studying bug discovery over time. Instead of focusing on specific platform components, we use a generic cloud software system for classification. Thus, while the results are specific to VCL, the approach can be applied to other open-source cloud platforms. Additionally, we consider the phase of the generic cloud service life cycle during which the bug is discovered (e.g., request submission, resource placement, management). For a service-oriented, component-based software, identifying the phase when a bug is discovered can help pinpoint key functionalities for testing.

Our analysis of Apache VCL bugs reveals several interesting insights:
- 42% of VCL bugs are found in the front end, and 18% in the component used for creating and providing access to virtual resources.
- 28% of bugs are discovered during the management phase.
- 41% of the bugs in the front end component are discovered during the management phase.
- The trend of bugs per component over time suggests that the front end has the most residual bugs.

## 2. Related Work
There are few studies that present bug analysis in open-source cloud platforms. For example, [4] discusses how to test open-source cloud platforms, but the strategy lacks the necessary knowledge to guide the testing phase [5]. Empirical bug analysis has proven valuable for various software systems, including desktop OSes [6, 7], mobile OSes [8, 9], and space mission software [10]. Prior research on open-source software includes [11]. In [12], bugs are considered a subset of software defects. Chillarege et al. [13] use orthogonal defect classification (ODC) to analyze such bugs. Woods [3] and others [14, 15] show how the study of bug discovery over time can predict the residual number of bugs in the code.

## 3. Classification and Analysis Approach
One of the key goals of our research is to develop a bug classification and analysis method that can be applied to a wide variety of open-source cloud platforms, allowing for comparative and contrasting results. To achieve this, we start with a generic cloud model, onto which the components and service phases of the cloud platform under analysis are mapped (Figure 1).

### 3.1. Components and Phases of the Generic Cloud Model
We developed a generic cloud model based on our understanding of five open-source cloud platforms: Apache VCL [2], CloudStack [16], Nimbus [17], OpenNebula [18], and OpenStack [19]. This analysis allowed us to identify the software components and the life cycle phases of the cloud service, which include provisioning and configuring virtual computing or storage resources and making them remotely accessible.

#### 3.1.1. Generic Cloud Components
- **Front End (FE):** The user interface of the system, allowing users to request, access, and manage resources.
- **Resource Manager (RM):** Responsible for allocating available resources to requests.
- **Provisioning Engine (PE):** Instantiates virtual machines, provides storage, and manages network resources.
- **Hypervisor (HV):** Provides virtualized abstraction of physical resources.
- **Storage System (SS):** Stores VM images and provides storage capabilities.
- **Network Manager (NM):** Performs networking tasks, such as creating virtual network interfaces and assigning IP addresses.
- **Service Engine (SE):** Includes hardware and software for providing cloud services.
- **Database (DB):** Tracks information about available resources, instantiated VMs, and user details.
- **Management Engine (ME):** Provides administrative functionalities, such as modifying delivered cloud services and repairing failed components.

#### 3.1.2. Phases of the Generic Cloud Service Life Cycle
- **Authentication (AN):** The first step for accessing cloud services.
- **Submission (SB):** A consumer submits a request for a resource.
- **Placement (PT):** The resource manager identifies free resources to satisfy a request.
- **Provisioning (PV):** Setup of the requested resource.
- **Operational (OP):** The provisioned resources are used until the end of the service period.
- **Deprovisioning (DP):** The deployed VM is deprovisioned and allocated resources are released.
- **Management (MT):** Administrative actions, such as upgrades, backups, and failure/repair/migration.

Using the generic cloud model, each reported bug is classified based on the components and phases where it was discovered. This classification is used to compute:
- **Component percentages:** The percentage of bugs discovered in each component.
- **Phase percentages:** The percentage of bugs likely to be found in each phase of the service life cycle.

### 3.2. Bug Type and Time of Reporting
Understanding the type of a bug and the date when the report was created are important aspects of bug analysis. The eight defect types defined in [13] are based on the correction necessary to remove the defect. Assigning a type to each bug allows us to compute the bug type percentages, which can help determine the type of correction usually required for a component.

Analyzing the bugs found over time is useful for identifying temporal patterns in bug discovery and trends among different software releases. This helps in assessing the effectiveness of development and testing strategies [14, 3].

### 3.3. Classification and Analysis
Table I presents the definition of the classification sets used in our approach. Elements in sets C and P are the components and phases described in Section 3.1, respectively. Elements in O are the ODC defect types. Set T contains the times (e.g., dates) when each bug report is created. Our bug classification involves associating individual bugs with a tuple <ec, ep, eo, et>, where ec∈C, ep∈P, eo∈O, et∈T.

Once the individual bug classification is completed, we perform an aggregate analysis by computing the percentages of bugs across the elements of a classification set and determining the mutual relations among the classification sets. These relations help identify which components are likely to require more effort during testing and code checking phases.

## 4. Apache VCL Case Study
In this section, we demonstrate how the proposed approach is applied to the Apache VCL reported bugs. We first describe the platform and then map it onto the generic cloud model.

### 4.1. Apache VCL Platform and its Mapping onto the Generic Cloud Model
Apache VCL allows creating different kinds of cloud services, including IaaS, PaaS, and SaaS, as well as combinations of these [20]. We briefly describe its main components and their mapping onto the generic cloud model.

- **Access Interface:** VCL uses a simple GUI for login and resource access. It maps onto the FE component.
- **Authentication Service:** Every VCL user needs to be authenticated. It maps onto the FE component.
- **Database:** Stores system capacity information, user details, and VM image metadata. It maps onto the DB component.
- **Image Repository:** Stores all VM images. It maps onto the SS component.
- **Node Manager:** Manages installation or provisioning of accepted resources, loads VCL images, and creates virtual networks. It maps onto the PE, SS, and NM components.
- **VCL Manager:** Performs resource scheduling, performance monitoring, and virtual network management. It maps onto the RM and ME components.
- **Computation, Storage, and Networking Resources:** Can be viewed as the SE of the generic model.

Figure 2 shows the conceptual view of the mapping of the VCL platform onto the generic cloud model. Note that some VCL components can implement functionalities belonging to multiple generic cloud components. In such cases, the classification of bugs is done with respect to the particular function during which the bug is found.

### 4.2. Apache VCL Bug Reports
Apache uses the JIRA bug and issue tracker [21] for VCL issue reports, which are publicly available [22]. Reports can be created by anyone using the platform (e.g., developers, administrators, consumers). Developers can report a bug at any stage of the software life cycle. Figure 3 shows the number of reported bugs for each month, with black lines indicating when a new version of the software was released. Figure 4 shows the cumulative number of bugs found for each release, with m being the slope of the line fitting the increasing part of the curve.

## Figures and Tables
- **Figure 1:** Schema of the proposed approach for bug classification and analysis.
- **Figure 2:** Mapping of Apache VCL components onto the generic cloud model.
- **Figure 3:** Number of reported bugs for each month.
- **Figure 4:** Cumulative number of bugs found for each release.
- **Table I:** Bug classification sets.

---

This optimized text aims to make the document more coherent, clear, and professional. It also ensures that the structure and flow of the content are improved for better readability.