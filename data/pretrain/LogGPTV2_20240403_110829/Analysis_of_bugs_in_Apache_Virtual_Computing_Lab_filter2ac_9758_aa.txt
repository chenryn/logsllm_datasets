title:Analysis of bugs in Apache Virtual Computing Lab
author:Flavio Frattini and
Rahul Ghosh and
Marcello Cinque and
Andy Rindos and
Kishor S. Trivedi
Analysis of Bugs in Apache Virtual Computing Lab
Flavio Frattini1, Rahul Ghosh2, Marcello Cinque1, Andy Rindos2, Kishor S. Trivedi3
1University of Naples Federico II (Naples, Italy)
2IBM Software Group (Research Triangle Park, NC, USA)
3Duke University (Durham, NC, USA)
ﬂPI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—Understanding the bugs in software platforms is
extremely valuable for developers, especially during the testing
phase. However, this is a rarely investigated issue for open
source Cloud platforms till date. In this paper, we present the
analysis of 146 bug reports from Apache Virtual Computing
Lab, a representative open source Cloud platform. Analysis is
performed by means of an empirical approach tailored to open
source Clouds. For VCL development and test teams, these
results provide useful guidelines, e.g., directing volunteers’
effort to components where more residual bugs are expected
to be found.
I. INTRODUCTION
Open source Cloud software platforms have recently
gained signiﬁcant attention from industry as well as from
academia. While these platforms are still in their infancy, a
variety of research challenges need to be addressed before
one can expect mature Cloud services from them. Analysis
of bugs is one such important aspect, which helps the respon-
sible organization (e.g., the Apache Software Foundation) to
coordinate the test effort and to decide when a new release is
required [1]. However, bugs in open source Cloud platforms
are not yet well explored.
In this paper we analyze the publicly available bugs of
Apache VCL [2]. We classify bugs by taking into account
the software component where the bug is discovered, its
type, and time of reporting (which is useful to study the bug
discovery over time [3]). Instead of considering the software
component of the speciﬁc platform, bugs are classiﬁed
according to a generic Cloud software system. Thus, even
though the results of the analysis presented in this paper are
speciﬁc to VCL, the adopted approach can be used for the
analysis of other open source Cloud platforms. In addition,
we consider the phase of the generic Cloud service life
cycle during which the presence of a bug is discovered (e.g.,
request submission, resource placement, management). For
a service-oriented, component-based software (e.g., an open
source Cloud platform), we believe that the phase when a
bug is discovered helps to identify the key functionalities
considered for testing.
Results of Apache VCL bug analysis reveal several in-
teresting aspects: (i) 42% of VCL bugs are found in the
front end and 18% in the component used for creating and
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
providing access to the virtual resources; (ii) 28% of bugs are
discovered while the administrator of the VCL installation
is acting on the platform (management phase); (iii) 41% of
the bugs in the front end component are discovered during
the management phase; (iv) the trend of bugs per component
over time suggests the front end is the component with more
residual bugs.
II. RELATED WORK
The number of papers that present bug analysis in open
source Cloud is rather small. In [4] authors show how to
test open source Cloud platforms, but the strategy lacks
the knowledge necessary to guide the testing phase [5].
Nevertheless, empirical bug analysis has been demonstrated
to be valuable for several software systems, such as desktop
OSes [6], [7], mobile OSes [8], [9], and space mission
software [10]. Example of prior research on open source
software includes [11]. In [12], bugs are considered as
a subset of software defects. Chillarege et al. [13] use
orthogonal defect classiﬁcation (ODC) to analyze such bugs.
Woods [3] and others [14] [15] show how the study of bug
discovery over time can be used to predict their residual
number in the code.
III. CLASSIFICATION AND ANALYSIS APPROACH
One of the key drivers behind our research is to rely
on a bug classiﬁcation and analysis method that can be
utilized for a large variety of open source Cloud platforms,
allowing one to compare and contrast achieved results. To
meet this goal, we start with a generic Cloud model on which
components and service phases of the Cloud platform under
analysis are mapped (leftmost box in Figure 1).
A. Components and Phases of the Generic Cloud Model
We develop a generic Cloud model based on our un-
derstanding of ﬁve open source Cloud platforms: Apache
VCL [2], CloudStack [16], Nimbus [17], OpenNebula [18],
and OpenStack [19]. Analysis of these platforms allows
us to identify the software components and the life cycle
phases of the Cloud service, which include provisioning and
conﬁguring of virtual computing or storage resources and
making them remotely accessible.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:47:27 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1: Schema of the proposed approach for bug classiﬁcation and analysis.
Table I: Bug classiﬁcation sets.
Set Elements
C
P
O
T
{F E, RM, P E, HV , SS, N M, DB, M E, SE}
{AN, SB, P T , P V , OP , DP , M T}
{O1, O2, ..., O8}
{t0, t1, ..., tk}
Description
Generic Cloud components that contain the bug
Phases in the Cloud when the bug could be discovered
Orthogonal defect types
Time when the report was created
Components of the generic Cloud software system are:
Front End (FE). It is the interface of the system to the
user. FE allows user to request a resource (e.g., a Virtual
Machine (VM)), to access and use such a resource, or to
perform management operations.
Resource Manager (RM). Primary responsibility of re-
source manager is the allocation of available resources to
a request, i.e., placement decision or scheduling.
Provisioning Engine (PE). Once the placement decision is
taken, PE instantiates the VM using a hypervisor, provides
storage using the Storage System, and network by means
of the Network Manager. PE also releases the resources
allocated to a consumer once the service period expires.
Hypervisor (HV). This component, usually from third-
parties, provides virtualized abstraction of physical
re-
sources.
Storage System (SS). This component stores the VM im-
ages and provides storage capabilities to VMs.
Network Manager (NM). NM performs networking tasks,
i.e., creates virtual network interfaces to a VM, assigns IP
addresses etc.
Service Engine (SE). SE includes both the hardware (e.g.,
CPU, RAM, disks, network interfaces) and software pack-
ages (e.g., monitoring tools) for providing the Cloud service.
Database (DB). A database in a Cloud software stack
keeps track of a wide variety of information, e.g., available
resources, instantiated VMs, and users details etc.
Management Engine (ME). ME provides administrative
functionalities such as modiﬁcation of delivered Cloud ser-
vices and repair of failed components. Typically, ME can
interact with all the other Cloud components.
Next, we describe phases of the generic Cloud service
life cycle.
Authentication (AN). Authentication is the ﬁrst step for
accessing the Cloud services. Cloud consumers and admin-
istrators are both required to be authenticated.
Submission (SB). A consumer submits the request for a
resource over a certain period, and then waits until the
service is made available for access.
Placement (PT). During this phase, resource manager tries
to identify free resources to satisfy a request. After its
completion, an accepted request is mapped onto the system
resources where the request can be provisioned.
Provisioning (PV). This phase includes the setup of the
requested (virtual) resource (on the physical resources).
Operational (OP). During operational phase, provisioned
resources can be used until the end of the service period.
Deprovisioning (DP). Once the consumer releases the re-
source or the service duration expires, the deployed VM is
deprovisioned and allocated physical resources are released.
Management (MT). Many events in a Cloud require admin-
istrative actions. Examples include software/hardware up-
grades, backup, patch management, failure/repair/migration
of hardware/software components, and so on. We put to-
gether all such administrative activities under this umbrella.
Using the model of generic Cloud as described above,
each reported bug of a given Cloud platform (e.g., Apache
VCL) is classiﬁed based on several factors including the
components of the generic Cloud software system where it
was found and the phases of the generic Cloud service life-
cycle where it was discovered. Such classiﬁcation is used to
compute: (i) component percentages, i.e., the percentage
of bugs discovered in each component, and (ii) phase
percentages, i.e., the percentage of bugs likely to be found
in each phase of the service life cycle. While component
percentages indicate the components where bugs are likely
to be found, phase percentages help identifying the service
phases that require more attention during testing.
B. Bug Type and Time of Reporting
Understanding the type of a bug and the date when the
report was created are important aspects of bug analysis.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:47:27 UTC from IEEE Xplore.  Restrictions apply. 
ANALYSIS BUG REPOSITORY COMPONENTS & PHASES BUG REPORTS CLASSIFIED  BUGS RELATIONS AMONG CLASSIFICATION SETS GENERIC CLOUD SERVICE LIFE CYCLE GENERIC CLOUD SOFTWARE SYSTEM SPECIFIC CLOUD PLATFORM MAPPING MAPPING BUG TYPE PERCENTAGES PHASE PERCENTAGES COMPONENT PERCENTAGES BUGS FOUND  OVER TIME BUGS CLASSIFICATION The eight defect types deﬁned in [13] are based on the
correction necessary to remove the defect. They are: Func-
tion, Interface, Checking, Assignment, Timing/Serialization,
Build/Package/Merge, Documentation, Algorithm. Assigning
a type to each bug allows us to compute the bug type
percentages, used, for instance, to ﬁgure out the type of
correction usually required for a component.
The analysis of the bugs found over time is useful to
identify the temporal pattern in bug discovery and its trend
among different software releases. This helps in assessing
the validity of the adopted development and testing strategies
[14], [3].
C. Classiﬁcation and Analysis
Table I presents the deﬁnition of the classiﬁcation sets
used in our approach. Elements in sets C and P are the com-
ponents and phases described in Section III-A, respectively.
Elements in O are the ODC defect types. Set T contains
the times (e.g., dates) when each bug report is created. Our
bug classiﬁcation involves associating individual bugs with
a tuple , where ec∈C, ep∈P , eo∈O, et∈T .
Once the individual bug classiﬁcation is completed, we
perform an aggregate analysis by computing the percentages
of bugs across the elements of a classiﬁcation set and
determining the mutual relations among the classiﬁcation
sets. Such mutual relations are useful to ﬁgure out which
components are likely to require more effort during the
testing and code checking phases. Due to space limitations,
we demonstrate only speciﬁc examples of relations among
classiﬁcation sets.
IV. APACHE VCL CASE STUDY
In this Section we show how the proposed approach is
applied to the Apache VCL reported bugs. We ﬁrst describe
the platform and then map it onto a generic Cloud, as
described in Section III.
A. Apache VCL Platform and its Mapping onto the Generic
Cloud Model
Apache VCL platform allows creating different kinds
of Cloud services, i.e., IaaS, PaaS, and SaaS, as well as
combinations of those [20]. We brieﬂy describe its main
components and their mapping on the generic Cloud model.
Access interface. VCL uses a simple and easy to use GUI
for login and accessing the resources. Additional manage-
ment functions are also available to advanced VCL users
with different levels of privileges.
Authentication service. Every VCL user (both consumers
and administrators) needs to be authenticated to gain access
to those VCL resources and services that they are authorized
to use. Access interface and authentication service of VCL
map onto the FE component of the generic Cloud model.
Database. In VCL a database is used for storing system
capacity information (e.g. available resources for provision-
ing), user details, and virtual machine images metadata
(identiﬁer, location, hardware requirements, ...). It is mapped
onto the DB component of the generic Cloud model.
Image repository. An image repository stores all the VM
images available in VCL. Most common types are Kickstart-
based installs and VMware disk images.
Node manager. This component manages installation or
provisioning of accepted resources, loads VCL images, and
creates virtual networks. It also includes the SS and the
NM components of the generic model and together with
the Image repository it serves as the PE.
VCL manager. Different tasks performed by VCL manager
include resource scheduling, performance monitoring and
virtual network management. It also keeps track of avail-
able and assigned resources via interactions with the VCL
database. VCL manager performs the tasks of the RM, and,
together with the Node Manager, also tasks of the ME.
Computation, storage and networking resources. VCL is
able to provide both preconﬁgured resources and resources
conﬁgured with user speciﬁc requirements. When a resource
is reserved, it can be accessed in different ways (e.g., RDP,
ssh). Computation, storage and networking resources can be
viewed as the SE of the generic model.
Figure 2 shows the conceptual view of the mapping of
the VCL platform onto the generic Cloud model. Note that
some components of VCL can implement functionalities
belonging to multiple generic Cloud components. For in-
stance, the Node Manager can act as PE or ME, depending
on the particular performed function. In all such cases, the
classiﬁcation of bugs is done with respect to the particular
function during which the bug is found.
B. Apache VCL Bug Reports
Apache uses the JIRA bug and issue tracker [21] for
the VCL issue reports, publicly available on the website
provided in [22]. Reports can be created by whoever uses
the platform (e.g., developers, administrators, consumers).
Developers can report a bug during any stage of the software
life cycle (development, testing, use). Corresponding to each
Figure 2: Mapping of Apache VCL components onto the generic
Cloud model.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:47:27 UTC from IEEE Xplore.  Restrictions apply. 
PROVISIONING ENGINE ACCESS INTERFACE VCL MANAGER AUTHENTICATION SERVICE VCL DATABASE IMAGE REPOSITORY NODE MANAGER COMPUTATION - STORAGE - NETWORKING . . . FRONT END FRONT END RESOURCE  MANAGER MANAGEMENT ENGINE DATABSE SERVICE ENGINE Figure 3: Number of reported bugs for each month. Black lines
indicate when a new version of the software was released.
Figure 4: Cumulative number of bugs found for each release. m
is the slope of the line ﬁtting the increasing part of the curve.
issue (which can be a bug, an improvement, or a new