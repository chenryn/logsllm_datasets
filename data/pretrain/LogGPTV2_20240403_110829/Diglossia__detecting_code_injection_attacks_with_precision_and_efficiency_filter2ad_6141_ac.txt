10
11 $ c o l l e c t i o n −>f i n d ( array ( ‘ $where ’ => $query ) ) ;
12 ?>
( s e c r e t _ n u m b e r != u s e r _ t r y )
.
‘ ; " ;
r e t u r n f a l s e ; " ;
Attack URL
http://victimHost/vulnerable.php?id=secret_number
Figure 3: JavaScript syntax mimicry attack.
Figure 3 shows sample PHP code that builds a JavaScript query
for a MongoDB. User input in $_GET [‘id’] is supposed to be a
numeric literal. If the attacker inputs secret_number instead of
a number, the query will return “true”, sabotaging the intended se-
mantics. CANDID will use “aaaaaaaaaaaa” as the benign input for
secret_number in its shadow execution and miss the attack, but
DIGLOSSIA will detect it.
Figure 4 shows login.php in minibill, an actual PHP program
vulnerable to syntax mimicry attacks. The attack URL makes the
syntactic structures of the actual and shadow queries equivalent.
1 
Attack URL exploiting CVE-2013-0135
http://victimHost/login.php?password_hint=no\&email=WHERE zip=‘77051
UPDATE users SET password=‘arbitrary’,
email=’ WHERE zip=‘77051’
password_hint=‘no\’ WHERE
Actual query
Query on a benign input
UPDATE users SET password=’arbitrary’,
email=’aaaaaaaaaaaaaaaaa’
password_hint=’aaa’ WHERE
Figure 5: SQL syntax mimicry attack on phpAddressBook.
Observe, however, that the attack query refers to the others ﬁeld
instead of the intended password ﬁeld. This particular attack may
not seem damaging, but if the actual query had used OR instead of
AND, the attack would have been much more serious.
Figure 5 shows another PHP program with an injection vulnera-
bility (CVE-2013-0135). The attack URL results in this query re-
setting the passwords of users whose ZIP code is 77051. DIGLOS-
SIA can detect syntax mimicry attacks such as this one because,
unlike CANDID, it creates shadow queries from the same input
as the actual execution. The syntactic structures of the actual and
shadow queries are equivalent, but the shadow contains the code
“WHERE” in original characters (since it originated from user in-
put). Therefore, DIGLOSSIA reports an attack.
4. DESIGN AND IMPLEMENTATION
DIGLOSSIA is as an extension to the PHP interpreter. It is imple-
mented in C using PECL (PHP Extension Community Library).
The Web server invokes the interpreter automatically when the
URL hosting a PHP application is accessed.
DIGLOSSIA has has three phases, as depicted in Figure 6 and
described below.
1185Figure 6: Overview of DIGLOSSIA.
Phase I creates a shadow character map and the dual parser.
Phase II computes a shadow value for each string that depends on
user input.
Phase III detects injected code by examining and comparing the
actual query string and its shadow.
Phase I creates a map from all characters c in the query language
L to a disjoint set of shadow characters SC = {map(c)}. Phase I
also creates the dual parser for the shadow language SL, which is
a superset of L and described in more detail in Section 4.3.
In tandem with the execution of the application, Phase II creates
and computes shadow values for all strings and array operations
that depend on user input. When the Web server invokes a PHP
application, DIGLOSSIA creates a shadow string value for each in-
put string, exactly equal to that string. Therefore, at the beginning
of the execution, all shadow values consist only of original char-
acters. For every subsequent string or character array computation
where one or both operands already have shadow values, DIGLOS-
SIA computes the shadow value for the result of the operation. If
an operand does not have a shadow value, DIGLOSSIA creates a
shadow value for it by remapping each character to the correspond-
ing shadow character. This remapping guarantees that all charac-
ters introduced by the application itself are in the shadow character
set, regardless of whether they appear in the application as explicit
constants, come from a library, or are generated dynamically.
When the PHP application issues a query q, Phase III intervenes
and checks whether the query includes injected code. To this end,
DIGLOSSIA parses q and its shadow q(cid:48) with the dual parser and
checks the following two conditions.
First, there must exist a one-to-one mapping between the nodes
in the respective parse trees of q and q(cid:48). Furthermore, each parse
tree node in q(cid:48) must be a shadow of the corresponding node in q, as
deﬁned in Section 4.3. For instance, a string literal node in q must
map to a string literal node in q(cid:48), except that the string in q only uses
characters in C, whereas the string in q(cid:48) may use characters in C ∪
SC. This isomorphism condition ensures that shadow characters
in the shadow query correspond exactly to the untainted characters
in the actual query.
Malicious Inputid = “12; return true;//”DiglossiaPHP script...$q = “var id = “ . $_GET[‘id’] . “;”;$q .= “if(this.id == id) return true”;$q .= “else return false”;…$collection->find( array(“$where” => $q ) );Mapping Table (CT)  A => 가  I => 나  F => 다  …Original Parser (P)   IF   ELSE   DO  … Dual Parser (PCT)   IF, 나다    ELSE, 마바사마      DO, 아자    … Original values  $q =“var id =”. “12;return true;// ” . “;”;  $q .= “if(this.id == id ) return true;”  $q .= “else return false;”Shadow values $q_s=“이가영 타아 는”. “12;return true;// ” . “끝”; $q_s=“나다 괄티카타사점나아 는는 나아괼           영마티유영엔 티영유마끝”; $q_s=“마바사마 영마티유영엔 다가바사마끝”;  rootstmt 1varid=12returntrue;;stmt 2comment 1;if(this.id …//rootstmt 1이가영타아는12returntrue;;stmt 2comment 1끝 나다 …  //code injection!Phase II. Value shadowingPhase I. Prepare a character mapping table and a dual parserPhase III. Validate queriesActual query parse treeShadow query parse treePHP interpreter1186Second, all code in the shadow query q(cid:48) must use only the char-
acters in SC, because all characters in C come from user input.
If both conditions are satisﬁed, DIGLOSSIA passes the original
query q to the back-end database. Otherwise, DIGLOSSIA stops the
application and reports a code injection attack.
4.1 Character remapping
We implemented character remapping and dual parsing for SQL,
JSON, and JavaScript query languages. These languages use
ASCII characters, found on standard English keyboards, for all
keywords, numerals, identiﬁers (variables, types, method names,
etc.) and special values (NULL, TRUE, etc.). Although the lan-
guages are different and DIGLOSSIA has a separate parser for each,
we use the term “query language L” generically to simplify the
exposition.
Let C be the subset of ASCII characters consisting of the lower-
and upper-case English alphabet and special characters (DIGLOS-
SIA does not remap digits). Formally, C includes characters whose
decimal ASCII codes are from 33 to 47 and from 58 to 126.
DIGLOSSIA dynamically creates a one-to-one mapping from each
character in C to a shadow UTF-8 character that occurs in neither
C, nor user input. Observe that since L uses only characters from
C, no shadow characters appear in code written in L.
UTF-8 is a variable-byte representation that uses one to four 8-bit
bytes to encode characters. The total number of UTF-8 characters
is 1,112,064 and it is easy to ﬁnd 84 characters among them that do
not occur in user input. In our current implementation, every web-
page request (i.e., every invocation of a PHP application) results in
a different random map. To create this map, DIGLOSSIA (1) ran-
domly selects two-byte shadow characters from among 1,112,064
possible UTF-8 characters, and (2) examines all variables holding
user input (e.g., P OST , GET , and COOKIE) to ensure that
shadow characters do not occur in them.
It is also possible to pre-compute a set of random mappings of-
ﬂine to reduce runtime overhead.
4.2 Value shadowing
As the application executes, DIGLOSSIA computes shadow values
for the results of all string and character array operations that de-
pend on user input. Because DIGLOSSIA is implemented using
PECL, it can directly manage memory and monitor program state-
ments during the application’s execution.
DIGLOSSIA allocates shadow values on the heap and stores their
addresses in the shadow value table indexed by the address of the
memory location for the original value. For operations that do
not involve user input, including all non-string, non-array opera-
tions, conditionals, branches, arithmetic operations, etc., DIGLOS-
SIA performs no computations or allocations. Therefore, the con-
trol ﬂow of value shadowing follows the control ﬂow of the appli-
cation.
When a Web server invokes the PHP application, it passes in
user inputs as strings. DIGLOSSIA allocates a shadow value for
each input string, equal to the string itself, and adds this value to
the shadow value table. If the application reads in additional user
input, DIGLOSSIA repeats this process. These initial shadow values
contain only characters from the original character set C.
Whenever the application performs a string or character array
operation lhs = operation(op1, op2) where one or both operands
(op1 and op2) already have shadow values—and, therefore, the op-
eration is data-dependent on user input—DIGLOSSIA computes the
shadow value shadowlhs for the result as follows.
If one operand op does not already have a shadow value, DIGLOS-
SIA allocates a new shadow value and remaps each character in
op to the corresponding shadow character, creating shadowop.
Given individual characters ci ∈ op, shadowop = map(c0) || . . .||
map(cn−1) where n is the length of op. This remapping guaran-
tees that all characters introduced by the application itself are in
the shadow character set, regardless of whether they appear in the
application as explicit string literal constants, come from libraries,
or are generated dynamically. DIGLOSSIA then computes
shadowlhs = operation(shadowop1,shadowop2).
If lhs does not have an entry in the shadow value table, DIGLOS-
SIA allocates a shadow value and enters it in the table. DIGLOSSIA
shadows built-in PHP string and array operations. Built-in PHP
string operations include string trim, string assignment, substring,
concatenation, and replacement. Built-in PHP array operations in-
clude array merge, push, pop, and assignment.
Memory for shadow values is proportional to memory tainted by
user input, and shadow computations are proportional to the num-
ber of program statements that depend on user input. The num-
ber of lookups for taint information is signiﬁcantly smaller than in
byte-level taint tracking methods. In value shadowing, the number
of lookups is the same as the number of involved values; in contrast,
the number of lookups in precise byte- and character-level taint
tracking methods is proportional to the byte or character length
of every value. Furthermore, ﬁne-grained taint tracking methods
require heavy augmentation of built-in operations on strings and
bytes to precisely propagate taint information. In contrast, value
shadowing performs only the same string and array operations on
shadow values as the application performs on the actual values.
Figure 6 shows an overview of our approach,
in which we
remap ASCII characters into Korean characters and use the lat-
ter to compute shadow values. In Figure 6, the assignment $q =
“var id = ”.“12; return true; //”.“; ”; concatenates string
constants with user input. We compute the shadow value as
$qs = map(“var id = ”).“12; return true; //”.map(“; ”);.
Observe that computing the shadow value involves the same con-
catenation operation on the shadow values as done in the original
application. All strings originating from user input remain the
same, but string constants introduced by the application have been
remapped to (in this case) Korean UTF-8 characters. DIGLOS-
SIA stores the resulting $qs as the shadow of q and uses it for
subsequent shadow operations.
Figure 7 illustrates how DIGLOSSIA computes shadow val-
ues. Given that $input is 150, this PHP application computes
the $SQL string to be used as the query. $SQLs is the shadow
value of $SQL. Let SOi be the shadow operation correspond-
ing to the ith line of the application (it is shown in the gray box
underneath the corresponding line). The full execution sequence
comprises lines 1, SO1, 2, SO2, 3, SO3, 4, 6, 9, SO9, 11, SO11,
12, and 13 in order. Observe that non-string, non-character-array
operations are not shadowed.
Line 13 makes the database call with the query stored in string
$SQL. In this case, $SQL has a shadow value $SQLs because
the query depends on user input.
4.3 Detecting injected code
When the application issues a query q using calls such as mysql_qu-
ery, MongoCollection::ﬁnd, or MongoCollection::remove, DIGLOS-
SIA intervenes and compares q with its shadow q(cid:48). DIGLOSSIA
checks that (1) q and q(cid:48) are syntactically isomorphic, and (2) the
code in the shadow query q(cid:48) is not tainted. If either condition fails,
it reports an attack. DIGLOSSIA performs both checks at the same
time, using a dual parser.
1187show t h e shadow o p e r a t i o n s
/ / b o x e s
1 $ i n p u t = $_GET [ ' i n p u t ' ] ;
$input_s = $_GET[‘input’];
2 $amount = $_GET [ ' amount ' ] ;
$amount_s = $_GET[‘amount’];
3 $SQL = ' CCS13SELECT * FROM ' ;
$SQL_s = map(‘CCS13SELECT * FROM ’);
( $ i n p u t  200) {
6 } e l s e
7
$SQL = $SQL .
$amount
;
' l a r g e _ n u m b e r s WHERE c o u n t > '
.
$SQL_s = $SQL_s . map(‘large_numbers WHERE count > ’) . $amount_s;
8 } e l s e {
9
$SQL = $SQL .
$amount
;
' middle_numbers WHERE c o u n t 
v a l i d a t e ( $SQL , $SQL_s
) ;
Figure 7: An example of value shadowing.
Intuitively,
the purpose of the dual parser is to analyze the
shadow query using the grammar of the query language L, but
taking into account the fact that the shadow query contains a mix
of original and shadow characters. Value shadowing guarantees
that all characters in q(cid:48) that were introduced by the application are
in the shadow character set, and all characters in q(cid:48) that originate
from user input are in the original character set.
We ﬁrst formally deﬁne a new shadow language SL that is a
superset of the original query language L. We then describe how
we optimize our implementation by re-using the parser for L to
parse the shadow language SL.
Query language and grammar.
Let G = (N, Σ, R, S) be the
context-free grammar of the query language L. N is the set of
non-terminal states, representing different operations, conditionals,
expressions, etc. Σ is the set of terminal states, disjoint from N.
We will use the symbol  to refer to individual terminal states in Σ.
R is the set of production rules that express the ﬁnite relation from
N to (N ∪ Σ)∗. S ∈ N is the unique start symbol.
When the parser uses this grammar G to accept a program P , it
produces a parse tree that maps every character in P to a terminal.
Each terminal is either code or non-code. Code terminals include
operations (e.g., “+” and “-”), keywords, bound identiﬁers, and
method calls. Non-code terminals include constant literals, string
literals, and reserved symbols (NULL, TRUE, etc.).
Shadow language and grammar. Given a query language L and
its grammar G, DIGLOSSIA deﬁnes a corresponding shadow lan-
guage SL and shadow grammar SG. As described in Section 4.1,
every character c used in L has a corresponding shadow character
sc. Characters in SL are drawn from C ∪ SC, where C is the
original character set and SC is the shadow character set.
We deﬁne SG = (N, Σs, Rs, S) to be the grammar of the
shadow language SL. N and S are the same as in G. For every
terminal  ∈ Σ, there exists exactly one corresponding shadow
terminal s ∈ Σs, deﬁned as follows.
Let σ be any string accepted by . If  is an identiﬁer or string
literal, then, for each legal character c occurring in σ, the shadow
terminal s accepts c or map(c). In other words, any identiﬁer or
string literal from the original language L can be expressed in an
arbitrary mixture of original and shadow characters in the shadow
language SL. For these terminals, s accepts a superset of .
For any other terminal  in G, the corresponding shadow terminal
s accepts only σ or map(σ). In other words, any non-identiﬁer,