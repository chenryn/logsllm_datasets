### Different Meanings to Each Section of the Document

When faced with input like:
```xml
Hello world!
```
A general-purpose renderer will typically attempt to interpret all recognized namespaces and assemble the markup into a single, consistent document with a standard Document Object Model (DOM) representation. If any recognized namespace supports scripting, embedded scripts will also execute.

Due to the somewhat counterintuitive handling of `xmlns`, the `Content-Type` header is not a reliable way to control how an XML document is parsed. The presence of a top-level `xmlns` directive does not guarantee that other data formats will be ignored. Therefore, XML-based formats controlled by attackers must be handled with care and thoroughly sanitized.

### Generic XML View

In most browsers, a valid XML document without any recognized namespaces will be displayed as an interactive, pretty-printed representation of the document tree, as shown in Figure 7-1. This mode is not particularly useful for end users but can aid in debugging.

However, if any of the namespaces in the document are known to the browser, the document will be rendered differently: recognized markup will work as intended, unsupported tags will have no effect, and any text between them will be displayed as is.

For example, consider the following input:
```xml
Hello
world!
```
This will be rendered as “Hello world!”. The first `<u>` tag, with no associated semantics-defining namespace, will have no visible effect. The second `<u>` tag, understood as an XHTML tag, will trigger underlining.

**Figure 7-1: Firefox displaying an XML document with no recognized namespaces**

The fault-tolerant approach to rendering unknown XML documents and unrecognized namespaces has subtle but important consequences. For instance, it is not safe to proxy an unsanitized RSS feed, even though this format is typically routed to a specialized renderer and thus not subject to XSS risks. Any browser without a built-in RSS reader may fall back to generic rendering and find HTML buried deep inside the feed.

### Scalable Vector Graphics (SVG)

Scalable Vector Graphics (SVG) is a rapidly evolving, XML-based vector graphics format. First published in 2001 by the W3C, SVG is notable for its integrated animation capabilities and direct JavaScript scripting features. For example, the following SVG code draws a circle and displays a message when clicked:

```xml
<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
  <circle cx="50" cy="50" r="40" fill="yellow" onclick="alert('Circle clicked!')" />
</svg>
```

Modern browsers, except for Internet Explorer prior to version 9, recognize the SVG file format, which is handled by the general-purpose XML renderer. SVG images can be embedded into XHTML with an appropriate `xmlns` directive or inlined in non-XML HTML5 documents using a predefined `<svg>` tag.

Interestingly, in some browsers, SVG can be placed in a standalone XML document and viewed directly or loaded on third-party pages via the `<img>` tag. While it is safe to load SVG images via `<img>` (with scripting disabled), hosting user-supplied SVG data is dangerous because, in cases of direct navigation, all embedded scripts will execute in the context of the hosting domain. This requires very careful syntax sanitization to eliminate non-SVG `xmlns` content and permit only certain types of markup in the remainder of the document.

**Note:** The `Content-Disposition` header on relevant HTTP responses can be a potential workaround, allowing SVG to be included via `<img>` but not accessed directly. This approach is not perfect but limits the risk. Using a throwaway domain to host such images is another possibility.

### Mathematical Markup Language (MathML)

Mathematical Markup Language (MathML) is a straightforward means to represent mathematical equations semantically, albeit somewhat verbosely. Proposed by the W3C in 1998, MathML has gained partial support in Opera and Firefox over the years. In supporting browsers, MathML can be placed in a standalone file or inlined in XHTML and HTML5 documents.

Unlike SVG, MathML has no additional security considerations beyond those associated with generically handled XML.

### XML User Interface Language (XUL)

The XML User Interface Language (XUL) is a presentation markup language created by Mozilla for building browser-based applications. XUL exists because, although modern HTML is often powerful enough to build basic graphical user interfaces, it is not particularly convenient for specialized tasks that desktop applications excel in, such as implementing common dialog windows or system menus.

XUL is currently supported only by Firefox, and it appears to be disabled in recent releases. In Firefox, XUL is handled by the general-purpose renderer based on the appropriate `xmlns` namespace. From a web application security standpoint, XUL documents can be considered roughly equivalent to HTML documents, with JavaScript scripting capabilities and broad control over the appearance of the rendered page.

### Wireless Markup Language (WML)

Wireless Markup Language (WML) is a largely obsolete, "optimized" HTML syntax developed in the 1990s by a consortium of mobile handset manufacturers and cellular network operators. Part of the Wireless Application Protocol (WAP) suite, WML offered a simplified web-like browsing experience for pre-smartphone devices with limited bandwidth and CPU resources. A simple WML page might look like this:

```xml
<?xml version="1.0"?>
<!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN" "http://www.wapforum.org/DTD/wml_1.1.xml">
<wml>
  <card title="Sample Card">
    <p>Click <a href="#second">here</a>!</p>
  </card>
  <card id="second" title="Second Card">
    <p>You clicked the link!</p>
  </card>
</wml>
```

WML never became as popular as hoped due to the rise of fast, Internet-enabled smartphones with fully featured HTML browsers. However, it is still routed to specialized renderers in Opera and Internet Explorer Mobile. In these browsers, it is possible to use WML-based scripts, either through WMLScript (WMLS) or by embedding normal JavaScript URLs.

### RSS and Atom Feeds

RSS (Really Simple Syndication) and Atom are two competing XML-based feed formats. Built-in, specialized RSS and Atom renderers are available in Firefox, Safari, and Opera. The determination to route an XML document to these modules is based on simple, browser-specific heuristics, such as the top-level tag being named `<rss>` or `<feed>` (and not having any conflicting `xmlns` directives).

Both feed formats permit a subset of HTML, including CSS, to be embedded in a document in an entity-escaped text format. For example:

```xml
<item>
  <title>&lt;u&gt; Underlined text! &lt;/u&gt;</title>
</item>
```

The subset of HTML permitted in RSS and Atom feeds is not well defined, and some feed renderers have previously allowed direct scripting or navigation to potentially dangerous pseudo-URLs. Browsers without built-in feed previews may render the file using the generic XML parsing approach, leading to script execution if the feeds are not sanitized carefully.

### A Note on Nonrenderable File Types

Modern browsers support various specialized file formats that remain opaque to the renderer or web application layer but are recognized by in-browser subsystems. Examples include plug-in and extension installation manifests, PAC files, installable visual skins, CRLs, antimalware site blacklists, and downloadable TrueType and OpenType fonts.

The security properties of these mechanisms should be studied individually before deciding to allow them to be served to users. While they are unlikely to harm the hosting web application directly, they may cause problems for users.

### Security Engineering Cheat Sheet

#### When Hosting XML-Based Document Formats
- Assume the payload may be interpreted as XHTML or another script-enabled document type, regardless of the `Content-Type` and top-level `xmlns` directive.
- Do not allow unconstrained attacker-controlled markup anywhere inside the file.
- Use `Content-Disposition: attachment` if the data is not meant to be viewed directly.
- RSS and Atom feeds will still work.

#### On All Non-HTML Document Types
- Use correct, browser-recognized `Content-Type` and `charset` values.
- Specify `Content-Disposition: attachment` where possible.
- Verify and constrain output syntax.
- Consult the cheat sheet in Chapter 13 to avoid security problems related to content-sniffing flaws.

### Content Rendering with Browser Plug-ins

Browser plug-ins come in many forms, but the most common variety allows the display of new file formats as if they were HTML. The browser hands over the retrieved file, provides the helper application with a drawing surface, and essentially backs away from the scene. These content-rendering plug-ins are distinct from browser extensions, which rely on JavaScript to tweak in-browser content.

Browser plug-ins have a long history of security flaws. According to some analysts, 12 out of the 15 most frequently exploited client-side vulnerabilities in 2010 were attributed to plug-in software. Many of these issues arise because the underlying parsers were not originally designed to handle malicious inputs gracefully and have not been subject to the same scrutiny as the rest of the Web. Other problems stem from the unusual security models devised by plug-in developers and the interference between these permissions, the traditional design of web browsers, and the expectations of application developers.

#### Invoking a Plug-in

Content-rendering plug-ins can be activated in several ways. The most popular explicit method is to use `<object>` or `<embed>` markup in a "host" HTML document, with the `src` or `data` parameter pointing to the URL of the plug-in-recognized document. The dimensions and position of the drawable area can be controlled with CSS or legacy HTML parameters.

Each `<object>` or `<embed>` tag should be accompanied by a `type` parameter. The MIME type specified there will be compared to the list of MIME types registered by active plug-ins, and the retrieved file will be routed to the appropriate handler. If no match is found, a warning asking the user to download a plug-in should be displayed, although most browsers look at other signals before resorting to this, such as examining the `Content-Type` or the file extension in the URL.

Additional input to the plug-in can be passed using nested `<param>` tags or nonstandard additional parameters attached to the `<object>` or `<embed>` markup. For example:

```html
<object data="example.swf" type="application/x-shockwave-flash">
  <param name="movie" value="example.swf">
  <param name="quality" value="high">
</object>
```

In this content-inclusion mode, the `Content-Type` header returned by the server is typically ignored unless the `type` parameter is unknown to the browser. This is an unfortunate design for reasons that will be explained shortly.

The other method for displaying plug-in content involves navigating directly to a suitable file. In this case, and in the case of `<object>` or `<embed>` with a missing `type` parameter, the `Content-Type` value obtained from the server is honored and compared with the list of plug-in-recognized MIME types. If a match is found, the content is routed to the appropriate component. If the `Content-Type` lookup fails or the header is missing, some browsers will examine the response body for known content signatures, while others will simply give up.

**Note:** Some types of plug-ins can be loaded directly from within JavaScript or VBScript programs without the need to create any HTML markup or retrieve external data. This is the case for ActiveX, an infamous script-to-system integration bridge available in Internet Explorer.

#### The Perils of Plug-in Content-Type Handling

In certain scenarios, the `Content-Type` parameter on a retrieved plug-in-handled file is ignored, and the `type` parameter in the corresponding markup on the embedding page is used instead. While this decision is similar to the behavior of other type-specific content-inclusion tags, it has unique and ultimately disastrous consequences in the plug-in world.

Several types of plug-ins are full-fledged code execution environments and grant executed applications (applets) special privileges to interact with the originating domain. For example, a Flash file retrieved from `fuzzybunnies.com` would be granted access to its originating domain (complete with a user’s cookies) when embedded on `bunnyoutlet.com`.

In such a scenario, it would be important for `fuzzybunnies.com` to clearly communicate that a particular document is meant to be interpreted by a plug-in. Unfortunately, the handling of a retrieved file is fully controlled by the embedding site. Therefore, if the originating domain hosts any type of user-controlled content, even in a nominally harmless format (such as `text/plain` or `image/jpeg`), the owners of `bunnyoutlet.com` may instruct the browser to disregard the existing metadata and route that document to a plug-in of their choice. A simple markup to achieve this might be:

```html
<object data="http://fuzzybunnies.com/avatars/user11630.jpg" type="application/x-shockwave-flash">
  <param name="movie" value="http://bunnyoutlet.com/malicious.swf">
</object>
```

This can lead to significant security risks and underscores the importance of thorough content sanitization and proper `Content-Type` handling.