# Restricting Access with Certificate Attributes in Multiple Root Environments: A Recipe for Certificate Masquerading

**Author:** Capt James M. Hayes, USAF  
**Affiliation:** Systems and Network Attack Center, National Security Agency  
**Address:** Suite 6704 – 9800 Savage Road, Fort George G. Meade, Maryland 20755-6704  
**Email:** [PI:EMAIL]

## Abstract
The issue of certificate masquerading against the SSL protocol is highlighted in [4], where various forms of server certificate masquerading are identified. This paper mirrors [4] but focuses on client certificate masquerading. The motivation for this paper stems from the fact that this anomaly has been observed in commercial products. Unlike the MITM attack described in [4], this form of masquerading does not require direct manipulation of the SSL protocol and only necessitates that the application trusts a given root certificate authority (CA). The problem arises in environments using multiple roots that do not cross-certify, and it is exacerbated by the inability of applications to apply external name constraints and policies. Despite being well-known within the PKI community, this problem persists in practice.

## 1. Introduction
Public Key Infrastructure (PKI) has become a key term in Internet, extranet, and intranet security. While PKI holds significant promise, it also has subtle vulnerabilities. Ford and Baum note that a certificate user may hold multiple root public keys, trusting one root key for some purposes and another for different purposes [2]. In recent years, some product manufacturers have introduced features allowing administrators to define the purpose of a CA in terms of how its issued certificates can be used. However, most products do not allow users or organizations to enforce policies that restrict the use of certificates based on specific attributes or name constraints. Typically, CAs are either trusted or not trusted for all purposes, regardless of the intended use.

This paper will detail attribute-based client masquerading. Section 2 defines PKI, Section 3 defines certificate masquerading, and Section 4 discusses trust implications in multi-root environments. Sections 5, 6, and 7 illustrate the problem, while Section 8 analyzes it. Finally, Section 9 presents possible solutions. It is important to note that according to the 2001 "Computer Crime and Security Survey" by [3], 34 out of 538 respondents reported a $151,230,100 loss in proprietary information, and 21 respondents reported a $92,935,500 loss to financial fraud.

## 2. PKI Defined
[1] defines PKI as the set of hardware, software, people, policies, and procedures needed to create, manage, store, distribute, and revoke public key certificates based on public-key cryptography. The overall goal of a PKI is to ensure that a certificate used in any transaction is valid at the time of the transaction. To achieve this, the PKI incorporates functions such as registration, initialization, certification, key pair recovery, key generation, key update, key expiry, key compromise, cross-certification, and revocation notice distribution and publication. If a root CA makes an incorrect decision, severe consequences can result, undermining the trustworthiness of its peers [4].

## 3. Certificate Masquerading Defined
Certificate masquerading, as defined in [4], allows a masquerader to substitute an unsuspecting certificate holder's valid certificate with their own valid certificate. A valid certificate is one signed by a CA that a relying party (user, computer, service, etc.) accepts without challenge, meaning the certificate has a CA trust point, a verifiable signature, is not revoked, and the certification path is valid. It is also noted that masquerading can occur with invalid certificates, i.e., those without a CA trust point.

## 4. Trust Implications in Multi-Root Environments
When an organization trusts an external organization's CA without cross-certifying, it creates an unbounded cross-certification by default. This is often done for convenience or expedience, but it leaves unresolved issues of trust management. These include the types of certificates accepted (e.g., client, web server, timestamp), limits on certificate names, path lengths, and other PKI policy issues. In formal trust relationships, these issues would be addressed through cross-certification. However, in informal relationships, such as trusting the default CAs in a web browser, these issues are often overlooked. Some products are beginning to address this by allowing administrators to configure policies to limit the types of certificates accepted from a CA, but this capability is yet to be extended to include path length and name constraints.

## 5. Case Study: BIMM Corporation, PPC, and SRPC
Consider the relationship between the Bureaucratic Institution for Mismanagement (BIMM), Popular Products Corporation (PPC), and Second Rate Products Corporation (SRPC). Bob, Mallory, Trent, and Victor are used to illustrate the problem. Mallory is a network penetration tester and CA administrator for SRPC, while Trent is an administrator for PPC's CA. BIMM has a web application created by Victor, used by BIMM, PPC, and SRPC, which uses SSL 3.0 and requires client authentication. Client certificates are issued by BIMM, PPC, and SRPC CAs.

BIMM has provided marketing data to PPC and SRPC for many years. SRPC, struggling to compete with PPC, offers Mallory a substantial amount of money to obtain restricted information about PPC from the BIMM web application.

## 6. Mallory’s Reconnaissance
Mallory, who frequently discusses security with Victor, learns that the web application uses SSL 3.0 with client authentication and four trusted root certificates: BIMM, PPC, SRPC, and Ultra Trust (a commercial CA). The application uses certificate mapping rules (Table 1) to determine which user accounts should be mapped to a given certificate, based on the issuer distinguished name. BIMM certificates are stored in a directory, but PPC, SRPC, and Ultra Trust certificates are not, to avoid overhead and delays.

Mallory decides to test the web application. He creates a fraudulent SRPC certificate with the same subject distinguished name (SDN) as Bob's certificate. When prompted, he selects the fraudulent certificate, and the web application grants him access as Bob. The complete certificate chain is shown in Figure 2.

### Table 1: Certificate Mapping Rules
| Mapping Rules | CA Name |
|---------------|---------|
| Default       |         |

### Figure 1: Bob’s SRPC Certificate
```
Masquerading SRPC User Certificate
Vice President Research and Development
Research and Development
```

### Figure 2: Mallory’s Fake Certificate Chain
```
Root SRPC Certificate
Masquerading PPC CA Certificate
Masquerading User Certificate
Bob
PI:EMAIL
Vice President Research and Development
Research and Development
```

This case study demonstrates the vulnerability in the web application's certificate validation process, highlighting the need for more robust and flexible certificate policies in multi-root environments.