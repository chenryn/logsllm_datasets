As @giordano and I are working on microarchitecture-specific tarballs in
BinaryBuilder, we are currently importing a modified version of `CpuId.jl`,
however if `Base` is going to be selecting artifacts based on the current CPU
type, it makes sense that something with similar capabilities to this `CpuId`
package would become a stdlib at the least, if not a part of `Base`.
We already have some CPUID code in `src/processor*.cpp`; should we export
`jl_test_cpu_feature()` and simply maintain a Julia mapping of the flags? The
way I see it, we have three options:
  * Export the C function, create a simple wrapper stdlib that has various flag definitions and invokes a `ccall()` to probe CPUID bits.
  * Leave the C code alone, duplicate the functionality in pure Julia (similar to `CpuId.jl`), but have it shipped by default with Julia.
  * Force all packages that want to use microarchitecture-specific artifacts to do the artifact selection themselves (this will only work for lazy artifacts; no `Pkg.add()`-time artifacts allowed)
I am in favor of 1 or 2, and between the two of them I'm in favor of (2)
because it is most maintainable.