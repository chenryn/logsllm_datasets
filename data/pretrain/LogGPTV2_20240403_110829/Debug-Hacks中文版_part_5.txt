#1 0x08107421 in iseq_translate_threaded_code (iseq=0x977dcf0) at compile.c:510
$4 = 0xbf9cf6cd
(gdb) p argv[1]
$3 = Oxbf9cf6a5
(gdb)  p argv[0]
$2 = xbf9cf6a5
(gdb) p *argy
(gdb) p argv
tag
gdb)
variable_in_this_stack_frame = 135679849
= 0, retval = 4294967295, prev = 0x0}
第 2 章调试前的必知必会
initialized = 1
state =0
_tag = [buf = {_jmpbuf = {-1076497952, 135679824, 134593648, -1076498024,
-1092008770};
"-a"
5"/home/hyoshiok/work/coreutils/src/uname'
5"/home/hyoshiok/work/coreutils/src/uname"
www.TopSage.com
_mask_was_saved = 0,
_saved_mask = {__val = [134537212,
---
## Page 43
+
表2-3显示寄存器可使用的格式
p/格式变量
格式：
显示时可以使用以下格式，如表2-3所示。
在寄存器名之前添加$，即可显示各个寄存器的内容。
info registers 可以显示寄存器，简写为 info reg。
显示寄存器
coreutils/src/uname/")，argv[1]中为第 1 个选项("-a")。
该例显示 argv[]。可以看出，argv[0]中为可执行文件名（“/home/hyoshiok/work/
$8 = 97 
(gdb) p $eax
6
8
eflags
eip
9.
(gdb) info reg
0x3351
0x0
0x7b
0x7b
0x7b
0x73 115
0x200213
0x8048ebd
θx2 2
x0θ
0xbf9cd4a0
0xbf9cd714
0xb7f140f8
x0θ
0x6197
0xbf9cd678
?
3
13
显示为十进制数
显示为十六进制数
www.TopSage.com
0x8048ebd 
HACK#5调试器（GDB）的基本使用方法（之一）|25
[ CF AF IF ID ] 
Oxbf9cd678
0xbf9cd4a0
-1080240364
-1208925960
---
## Page 44
27
用×命令可以显示内存的内容。x这个名字的由来是eXamining。
26 | 第2章调试前的必知必会
数，F为前面讲过的格式（x、d、u、0、t、a、C、f、s、i)，U为表 2-4 中所示的单位。
一般使用×命令时，格式为 ×/NFU ADDR。此处 ADDR 为希望显示的地址，N为重复次
此处x/i意为显示汇编指令。
x/格式 地址
格式：
中的程序指针名为 eip。
程序指针可以写为$pc，也可写为$eip，两者都可以显示。这是因为 Intel IA-32 架构
十进制数的 97 为 ASCII 字符的a'。
格式
0x8048ebd :
(gdb) x/i $pc
0x8048ebd :
(gdb) x $pc
$10 = (void (*)()) 0x8048ebd 
(gdb)  p $eip
$9 = (void (*)()) 0x8048ebd 
(gdb) p $pc
$7 = 97 'a'
(gdb) p/c $eax
显示为机器语言（仅在显示内存的×命令中可用）
显示为字符串 
浮点小数
显示为字符（ASCII)
地址
显示为二进制数，t的由来是two
显示为八进制数
显示为无符号十进制数
说明
cmp
0x0f6ef883
www.TopSage.com
$ox6e,seax
（续表）
---
## Page 45
汇编从开始地址到结束地址之前的部分。
格式①反汇编当前整个函数，②为反汇编程序计数器所在函数的整个函数，③为反
格式：
也有反汇编的命令disassemble，简写为disas。
下面显示从pc所指地址开始的10条指令（i）。
表2-4U代表的单位
?
?
E
单位
0x08048ed0:je
0x08048ecf:nop
0x08048ecc:cmp
0x08048ec6:jg
0x08048ec0:je
0x08048ebd:cmp
Dump of assembler codefrom 0x8048ebd to0x8048eef:
(gdb) disassem $pc $pc+50
0x8048ee7:
0x8048ee1
0x8048edc
0x8048ed6
0x8048edo
0x8048ecf
0x8048ecc
0x8048ec6
0x8048ec0
0x8048ebd
（gdb）x/10i$pc
6
disassemble开始地址结束地址。
disassemble程序计数器。
disassemble.
6
f
双字（8字节）
字（4字节）（默认值）
半字（2字节）
字节
说明
D
6
D
6
D
0x8049055
$0x61,%eax
0x8048f62
0x8049048
$0x6e,seax
www.TopSage.com
HACK#5调试器（GDB）的基本使用方法（之一)
$0xffffff7e,%eax
0x8048fe8
$xffff7d,eax
0x8048f90
0x8049055
$0x61,%eax
0x8048f62
0x8049048
$0x6e,%eax
---
## Page 46
29
print_element （）函数内部执行，但 next 命令会在 print_element （）函数执行之后
例如，下例中停止在print_element(name.sysname)中。step 命令可以进入
格式：
再次暂停运行。如果没有遇到断点，就会一直运行到结束。
调试时，可以使用 continue（简写为c）命令继续运行程序。程序会在遇到断点后
继续运行
nexti命令不会进入函数内部执行，而 stepi 命令会。
分别使用nexti和 stepi 命令。
next 命令和 step 命令都是执行源代码中的一行。如果要逐条执行汇编指令，可以
停在下一行（if(toprint& PRINT_NODENAME)）。
执行到函数内部，此时可以使用 step（简写为 p）命令。
执行源代码中一行的命令为 next（简写为 n)。执行时如果遇到函数调用，可能想
单步执行的意思是根据源代码一行一行地执行。
单步执行
认其值与预期是否相同，以确认是否存在bug。
首先在任意位置暂停执行程序，即可像上例那样自由显示任意变量和地址。通过确
28 | 第2章调试前的必知必会
continue 次数
continue
if (toprint & PRINT_NODENAME)
 print_element (name.sysname);
if (toprint & PRINT_KERNEL_NAME)
End of assembler dump.
0x08048eec :lea
0x08048ee7 :cmp
0x08048eel :je
0x08048edc :cmp
0x08048ed6 :jg
www.TopSage.com
0x8048f90 
0x0($esi,$eiz,1),sesi
$oxffffff7e,keax
0x8048fe8 
$0xffffff7d,&eax
---
## Page 47
被访问时暂停运行。
格式：
被访问、改变时暂停运行。
格式：
此处的意思是常量或变量等。
发生变化时暂停运行。
格式：
量在何处被改变，可以使用 watch命令（监视点，watchpoint)。
大型软件或大量使用指针的程序中，很难弄清变量在什么地方被改变。要想找到变
监视点
试)。
除了正常结束之外，其他情况都需要从开头开始继续执行，以寻找问题的原因（调
被调试的程序通常为以下几种情况之一：
点时才暂停执行。
指定次数可以忽略断点。例如，continue 5则5 次遇到断点不停止，第6 次遇到断
[例]
rwatch
?
(gdb) awatch short_output
awatch
watch
被挂起(停止响应、死锁等)。
由于某种原因异常结束（发生内核转储、非法访问等)。
可以正常结束。
无法结束（死循环等）。
www.TopSage.com
HACK#5 调试器(GDB)  的基本使用方法（之一) I 29
指示的断点或监视点。
格式：
用delete（简写为d）命令删除断点和监视点。
删除断点和监视点
要注意的是，
变量（short_output）的值发生变化时就会暂停运行。
30| 第2章调试前的必知必会
[例]
delete
(gdb) info b
main (argc=l, argv=oxbfbf8924) at who.c:783
New value = true
Old value = false
Hardware access (read/write) watchpoint 3: short_output 
Continuing.
(gdb)c
Hardware access (read/write) watchpoint 3: short_output
(gdb)info b
(gdb）delete 2（删除2号断点
acc watchpoint
Type
acc watchpoint keep y
watchpoint
Type
 breakpoint already hit 1 time
 breakpoint already hit 1 time
设置监视点可能会降低运行速度。
keep y
Disp Enb Address
www.TopSage.com
keepy
Disp Enb Address
short_output
What
short_output
assumptions
What
---
## Page 49
此外，gcore命令可以从命令行直接生成内核转储文件。
值、内存值等)。
有了内核转储文件和调试对象，以后就能查看生成转储文件时的运行历史（寄存器
例
使用generate-core-file可将调试中的进程生成内核转储文件。
生成内核转储文件
情况。
该功能可以在运行时随意修改变量的值，因此无须修改源代码就能确认各种值的
上例将变量（options）的值改成了0。
[例]
格式：
改变变量的值
遗憾的是没有临时监视点。
所以在只需要停止一次时用起来很方便。
在运行到该处时暂停，不同之处就是临时断点（临时硬件断点）会在此时被删除，
临时断点（tbreak）和临时硬件断点（thbreak)，与断点（硬件断点）相同，都会
$ gcore 'pidof emacs'
 Saved corefile core.13163
set variable=
(gdb) generate-core-file
$8=θ
(gdb) print options 
(gdb) set variable options = 0
(gdb) p options
www.TopSage.com
HACK#5调试器（GDB）的基本使用方法（之一）I 31
---
## Page 50