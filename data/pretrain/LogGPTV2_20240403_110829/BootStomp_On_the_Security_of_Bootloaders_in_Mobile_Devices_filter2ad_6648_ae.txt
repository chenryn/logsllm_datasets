0
4
0
3
-
7
Bugs Timeout
0
1
1
5
-
7
1
0
0
1
-
2
Total
Duration
12:49
10:14
24:39
21:28
00:08
69:18
Duration Memory
per EP
04:16
02:03
02:03
00:48
00:04
09:14
512
478
248
275
272
1785
Table 2: Alerts raised and bugs found by BOOTSTOMP’s taint analysis. Time is reported in MM:SS format, memory in MB.
Finally, we rediscovered a previous vulnerability re-
ported against Qualcomm’s aboot, CVE-2014-9798.
These vulnerabilities allowed an attacker to perform
denial-of-service attack. However, this vulnerability has
been patched, and our analysis of the current version of
aboot did not yield any alerts.
Case study: Huawei memory corruption vulnera-
bility. BOOTSTOMP raised multiple alerts concern-
ing a function, whose original name we believe to be
read oem(). In particular, the tool highlighted how this
function reads content from the ﬂash and writes the con-
tent to a buffer. A manual investigation revealed how
this function is vulnerable to memory corruption.
In
particular, the function reads a monolithic record-based
datastructure stored in a partition on the device storage
known as oem info. This partition contains a number of
records, each of which can span across multiple blocks.
Each block is 0x4000 bytes, of which the ﬁrst 512 bytes
constitute a header. This header contains, among oth-
ers, the four following ﬁelds: record id, which indi-
cates the type of record; record len, which indicates
the total length of the record; record num, which in-
dicates the number of blocks that constitute this record;
record index, which is a 1-based index.
The vulnerability lies in the following:
the function
will ﬁrst scan the partition for blocks with a matching
record id. Now, consider a block whose record num is
2 and whose record index is 1. The fact that record num
is 2 indicates that this record spans across two different
blocks. At this point, the read oem function assumes
that the length of the current block is the maximum, i.e.,
0x4000, and it will thus copy all these bytes into the des-
tination array, completely ignoring the len value passed
as argument. Thus, since the oem info partition can be
controlled by an attacker, an attacker can create a spe-
cially crafted record so that a buffer overﬂow is triggered.
Unfortunately, this bootloader uses this partition to store
essential information that is accessed at the very begin-
ning of every boot, such as the bootloader’s logo. Thus,
an attacker would be able to fully compromise the boot-
loader, fastboot, and the chain of trust. As a result, it
would thus be possible for an attacker to install a persis-
tent rootkit.
Case study: Huawei arbitrary memory write. The
second case study we present is related to an arbi-
trary memory write vulnerability that our tool identiﬁed
in Huawei’s bootloader.
In particular, the tool raised
a warning related to the read from partition func-
tion. Speciﬁcally,
the tool pinpointed the following
function invocation read from partition("boot",
hdr->kernel addr), and, more precisely,
the tool
highlighted that
the structure hdr can be attacker-
controllable. Manual investigation revealed that not only
hdr (and its ﬁeld, including kernel addr) are fully
controllable by an attacker, but that the function actu-
ally reads the content from a partition speciﬁed as input
(“boot”, in this case), and it copies its content to the ad-
dress speciﬁed by hdr->kernel addr. Since this desti-
nation address is attacker-controllable, an attacker could
rely on this function to write arbitrary memory (by mod-
ifying the content of the “boot” partition) to an arbitrary
address, which the attacker can point to the bootloader
itself. We note that this vulnerability is only exploitable
when the bootloader is unlocked, but, nonetheless, it is a
vulnerability that allows an attacker to run arbitrary code
as the bootloader itself (and not just as part of non-secure
OS). Moreover, the next section provides evidence that,
at least for this speciﬁc case, it is easy for an attacker to
unlock the bootloader.
7.3 Analyzing (In)Secure State Storage
As a second use case for our tool, we use it to analyze
the same ﬁve bootloaders we previously consider to de-
termine how their security state (i.e., their lock/unlock
state) is stored.
In particular, as we discussed in Sec-
tion 4, if the bootloader merely stores the security state
on one of the ﬂash partitions, then an attacker may be
able to change the content of this partition, unlock the
phone without the user’s consent, and thus violate one of
Google’s core Veriﬁed Boot principles.
To run this experiment, we begin with the manually-
identiﬁed unlocking functionality, as described in Sec-
tion 6.2, and locate paths that reach automatically-
identiﬁed writes to the device’s storage. This means that
each bootloader has one entry point. Table 3 shows the
overall results of this experiment, including the number
USENIX Association
26th USENIX Security Symposium    793
Bootloader Sinks Potentially Timeout Duration
vulnerable?
Remarks
Qualcomm (Latest)
Qualcomm (Old)
NVIDIA
HiSilicon
MediaTek
6
4
9
17
1










01:00 Detected write on ﬂash and mmc
00:40 Detected write on ﬂash and mmc
02:21
10:00
10:00
Memory mapped IO
Memory mapped IO
Write oeminfo
Table 3: Alerts raised by BOOTSTOMP on potentially vulnerable write operation inside unlock routines. Time is reported in MM:SS
format.
of possible write operations to the device’s storage that
occurred within the unlocking functionality. Our system
was easily able to locate paths in Qualcomm’s bootloader
(both the old and the newest version) and Huawei’s boot-
loader where the security state was written to the device’s
non-volatile storage. Upon manual investigation, we dis-
covered that Qualcomm’s simply stores the bit ‘1’ or ‘0’
for whether the device is locked. Huawei’s stores a static
hash, but can still be recovered and replayed (see case
study at the end of this section).
In both cases, writ-
ing the needed value to the ﬂash will unlock the boot-
loader, potentially bypassing the mandatory factory re-
set, if additional steps are not taken to enforce it, such
as those mentioned in Section 8. Our tool did not iden-
tify any path to non-volatile storage for the NVIDIA’s
or MediaTek’s bootloaders. Upon manual investigation,
we discovered that these two bootloaders both make use
of memory-mapped I/O to write the value, which could
map to anything from the ﬂash to special tamper-resistant
hardware. Thus, we cannot exclude the presence of vul-
nerabilities.
Case Study: Huawei bootloader unlock. Our tool
identiﬁed a path from a function, which we believe to
be called oem unlock, to a “write” sink. Upon man-
ual investigation, we were able to determine the pres-
ence of a vulnerability in the implementation of this
functionality, as shown in Figure 4.
In a normal sce-
the user needs to provide to the bootloader a
nario,
device-speciﬁc unlock code. Such code can be ob-
tained by a user through Huawei’s website, by providing
the hardware identiﬁers of the device. The problem lies
in the fact that the “correct” MD5 of the unlock code,
, is stored in a partition of the device’s
storage. Thus, even if it not possible to determine the
correct unlock code starting from its hash, an attacker
could just reuse the correct MD5, compute the expected
unlock state, and store it to the oem info partition,
thus entirely bypassing the user’s involvement.
7.4 Discussion
As stated in Section 6, and as demonstrated by the re-
sults in this section, our tool might present some false
negatives as well as false positives. In this section we
1 x = md5sum ( u n l o c k _ c o d e ) ;
2 if ( x == ‘‘ ’ ’) {
3
u n l o c k _ s t a t e = c u s t o m _ h a s h ( x ) ;
write ( oem_info , u n l o c k _ s t a t e ) ;
4
5 }
Figure 4: Implementation of the (vulnerable) unlock function-
ality in Huawei’s bootloader.
consider the results achieved by our taint analysis en-
gine, and we discuss how false positive and false neg-
atives might arise.
As symbolic execution suffers from the path explosion
problem, generally speaking, not all the possible paths
between two program points can be explored in a ﬁnite
amount of time. This might cause some tainted paths
to be missed, causing some vulnerabilities to be missed.
False negatives might be present also because BOOT-
STOMP does not follow function calls when no taint is
applied. This approach is very useful, since it makes our
tool faster as less code has to be analyzed, but it might
miss some correlation between pointers. In fact, if a fu-
ture tainted variable is aliased, within a skipped function
to a variable whose scope falls within the current func-
tion, and this variable later happens to reach a sink, it
will not be reported.
Furthermore, since BOOTSTOMP relies on a maxi-
mum ﬁxed inter-function level, it might not follow all the
function calls it encounters, possibly resulting in some
tainted variables not to be untainted as well as some
pointer aliases not being tainted. This problem might
create both false positives and false negatives.
Additionally, false positives could possibly arise from
the fact that not all the reported tainted paths lead to ac-
tual vulnerabilities. In fact, when the initial taint is ap-
plied, our tool tries to understand which parameter repre-
sents the variable(s) that will point to the read data, as ex-
plained in Section 6. If the taint is not applied correctly,
this will result in false positive results. Note however,
that our tool would taint every parameter that our type
inference heuristic does not exclude. Therefore, false
negatives are not possible in this case.
Our concretization strategy could possibly introduce
both false positives and false negatives. Given two un-
constrained pointers, intuitively it is unlikely that they
794    26th USENIX Security Symposium
USENIX Association
will point to the same memory location. Therefore, the
most natural choice is to concretize them (if necessary)
to two different values. Assuming that these two point-
ers are indeed aliases, if one of them is tainted and the
other reaches a sink, no alarm will be raised causing then
a false negative. On the other hand if both of them are
tainted, but the former becomes untainted and the latter
reaches a sink, an alarm would be raised causing then a
false positive. According to our observations these cases
are very rare though, as we never encountered two un-
constrained pointers that happened to be aliases.
Finally, it is worth noting that while we found some
tainted paths that were not leading to actual vulnerabil-
ities, our tool never detected a tainted path which was
supposed to be untainted.
8 Mitigations
In this section, we will explore ways of mitigating the
vulnerabilities discovered in the previous section. With
the increasing complexity of today’s devices, it may be
difﬁcult to completely ensure the correctness of boot-
loaders, but taking some simple steps can dramatically
decrease the attack surface.
As we have discussed throughout the previous sec-
tions, the goal of Trusted Boot and Veriﬁed Boot is
to prevent malicious software from persistently com-
promising the integrity of the operating system and
ﬁrmware. The attacks we discovered all rely on the at-
tacker’s ability to write to a partition on the non-volatile
memory, which the bootloader must also read. We can
use hardware features present in most modern devices to
remove this ability.
Binding the Security State. Google’s implementations
of Veriﬁed Boot bind the security state of the device (in-
cluding the lock/unlock bit) to the generation of keys
used to encrypt and decrypt user data, as described in
Section 2.3. While not speciﬁcally requiring any partic-
ular storage of the security state, this does ensure that if
the security state is changed, the user’s data is not usable
by the attacker, and the system will not boot without ﬁrst
performing a factory reset. This, along with the crypto-
graphic veriﬁcation mandated by Veriﬁed Boot, achieves
the goals Google sets, but does not completely shield the
bootloader from arbitrary attacker-controlled input while
verifying partitions or checking the security state.
Protect all partitions the bootloader accesses. Most
modern mobile devices utilize non-volatile storage meet-
ing the eMMC speciﬁcation. This speciﬁes the set of
commands the OS uses to read and write data, man-
age partitions, and also includes hardware-enforced se-
curity features. Since version 4.4, released in 2009 (a
non-public standard, summarized in [17]), eMMC has
supported Power-on Write-Lock, which allows individual
partitions to be selectively write-protected, and can only
be disabled when the device is rebooted. The standard
goes as far as to specify that this must also be coupled
with binding the reset pin for the eMMC device to the
main CPU’s reset pin, so that intrusive hardware attacks
cannot be performed on the eMMC storage alone.
While we are not able to verify directly whether any
handsets on the market today makes use of this fea-
ture, we note that none of the devices whose bootload-
ers we examined currently protect the partitions involved