mented to tidy up the hierarchy.
Instead of showing the
cardinality of permission sets in roles, number of users as-
signed to each role can be derived (line 15). These values
250250
Algorithm 2: Role hierarchy construction using fre-
quent permission set support
Require: candidate roles C = {hσ, F i} sorted on σ
begin
x ← 1 // unique identifier for
roles, can be changed to more
meaningful representation upon
user inspection
while C 6= ∅ do
hσ′, F ′i ⇐ ﬁrst element in C
create new role Rx
insert hσ′, F ′i into Rx
insert Rx into the hierarchy H≺
if |F ′| != 1 then
∀Ry in H≺ : ∀p ∈ Ry, p ∈ Rx , insert
Ry ≺ Rx into H≺
// remove links that can be
derived by transitive
closure
∀Rz, Ry in H≺ : Rz ≺ Ry, Ry ≺ Rx,
remove ordering Rz ≺ Rx from H≺
end
remove hσ′, F ′i from C
increment x
end
// Optional cleansing operations
calculate how many users are assigned to each role
remove roles that are not assigned to any users
identify inherited permissions
end
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
can be calculated as a recursive subtraction of the number
of users explicitly assigned to roles ordered higher in the
hierarchy. Using these values, removal of roles that are not
assigned to any users can be performed in line 16. This op-
eration is optional as depending on the enterprise structure,
roles that are not assigned to any user may still be desired.
One such reason for retaining them is if they assist with the
abstraction and manageability of the role hierarchy. Finally,
line 17 removes permissions that should not be explicitly as-
signed to roles, but inherited through partial orderings from
other roles.
Since permission itemsets that are more frequent are
more likely to be roles, they will be added to the role hi-
erarchy ﬁrst. This means permission sets are added in order
of support with more probable roles being placed more cen-
tral to the role selection and hierarchy construction process.
The process can be terminated at any stage to disregard un-
likely candidate roles. Unlikely candidate roles are roles
with lower support and user assignment counts. Depend-
ing on the cardinality of frequent permission set |F | and the
support of the frequent permission set σ, permissions are
placed into various positions in the ordering to create the
desired role hierarchy.
4. Experimental Results
This section presents the role extraction and hierarchy
construction results of our proposed approach on both real
and synthetic user permission assignment datasets. The real
data set originates from The Department of Computer Sci-
ence and Software Engineering at The University of Mel-
bourne. No formal form of access control administration
is set up; users request permission to certain groups when
required. All systems refer to a Unix groups access con-
trol system where each group is considered an assignable
permission to users. Within this environment, there are
1993 uniquely identiﬁable users and 1267 assignable per-
missions.
Phase 1 of the algorithm was created using FP-trees as
a fast implementation of the frequent permission set iden-
tiﬁcation. Using the identiﬁed frequent itemsets generated
from Phase 1, Phase 2 was implemented to create partial or-
derings. The results were output to a markup language for
graph descriptions that can be used to create a visual repre-
sentation of the derived role hierarchy.
For our implementation on the real data set, ξ was
enforced during phase 2. Different thresholds produced
graphs of different complexities ranging from 4155 iden-
tiﬁed roles and 15889 role relationships when ξ = 2 and
55 roles with 25 role relationships when ξ = 10. Clearly
setting ξ = 2 produces an inappropriately large number
of roles, while ξ = 10 appears to offer a more reasonable
number of recommendations. Optimal threshold values will
vary depending on environment and more semantic analy-
sis of ξ will be discussed in Section 5.3. The relationship
between ξ and the derived hierarchy is illustrated in Fig-
ure 1(a).
From the ﬁgure, it can be seen that when ξ is low, there
is a large number of identiﬁed frequent patterns that can be
manipulated and added to the hierarchy. As ξ increases,
the number of permission sets that occur above the chosen
threshold will decrease. The relationship between ξ and role
relations, or edges will be similar. However, the relationship
between roles and inter-role relationships may not be linear.
As the number of candidate roles decreases, the num-
ber of role relationships will decrease. However, due to the
nature of identiﬁed roles, it is possible that when there are
a smaller number of roles, the roles will be less related to
other roles.
It is possible to identify candidate roles that
cannot be placed in a partial ordering with any other can-
didate role because there are no overlapping permissions
at that threshold. These roles exist in subtrees or in iso-
lation to the hierarchy. The permissions in these subtrees
251251
s
p
i
h
s
n
o
i
t
a
l
e
R
e
l
o
R
r
o
s
e
l
o
R
f
o
r
e
b
m
u
N
4000
3000
2000
1000
0
number of roles
number of role relationships
5
10
15
20
Frequency Threshold 
(a) Threshold values to number of roles and role relationships.
(b) Section of partial ordering role hierarchy using full test
data. Each role contains a set of permissions.
Figure 1. Test Results
correspond to job speciﬁc permissions assigned within cer-
tain parts of the department. On closer inspection of our
data, one isolated subtree contained permissions assigned
entirely to users within a particular research group of the
department. In our test data, isolated roles out number the
inter-role relationships when ξ > 6.
Experience shows these roles are most likely to be de-
partment or division speciﬁc. Also expected is the fairly ﬂat
nature of constructed hierarchies. Our generated role hier-
archies consisted of at most 5 levels. The majority of can-
didate roles exist in a single directed graph structure with a
few candidate roles in isolation and subtrees.
These pictorial representations of a hierarchy can be pro-
duced for human inspection after completion of phase 2.
An example of a constructed hierarchy of when ξ = 6 is
shown in Figure 2. At this threshold, 161 candidate roles
were identiﬁed and 172 partial ordering constraints were
produced after the removal of orderings derivable from tran-
sitive closure. The depth of the hierarchy extends to 4 lev-
els. Figure 1(b) shows a closer view at a section within the
role hierarchy when ξ = 6.
We also tested our system on simulated data produced
by Zhang et al.’s data generator for role engineering test-
ing [19]. Given the number of roles and permissions and the
maximum number of permissions per role, a random num-
ber of permissions between 1 and the maximum number of
permissions inclusive was assigned to each role. Then given
the number of users and the maximum number of roles to
assign to each user, a random number of roles between 1
and the maximum number of roles inclusive was assigned
to each user. Direct user to permission assignments were
extracted from these data sets for testing. Finally, discov-
ered roles from the direct user to permission assignments
using our approach were compared with the original roles.
This simulated data generation scheme is similar to that
used by Vaidya et al.’s testing methodology [17]. In the cho-
sen approach, there are no roles with no permissions and no
users with no roles. While it is possible for users without
permissions to exist in enterprise environments, their pres-
ence neither improves nor degrades the mining process. Our
results will only report on users who have at least one per-
mission through any one role.
Our algorithm was tested on three sets of data, varying
the number of permissions, the number of users or the num-
ber of permissions while keeping other parameters constant.
The role to user and permission to role statistics remained
constant. Each test was repeated ten times and the aver-
age accuracies and processing times have been computed.
Figures 3 and 4 show the accuracy and processing speeds
respectively of varying permissions, users and roles.
In each test set, we measured the accuracy of exact role
permission set identiﬁcation, the percentage of user permis-
sions that are covered by the identiﬁed roles and the pro-
cessing time for the role identiﬁcation process.
accuracy =
no. roles identiﬁed exactly
no. of roles in original data set
252252
Figure 2. Generated partial ordering role hierarchy using full test data when ξ = 6. The purpose of
this diagram is to show the general structure and layout of produced role hierarchies.
100
80
60
40
20
e
g
a
r
e
v
o
C
r
o
y
c
a
r
u
c
c
A
:
)
%
(
e
g
a
t
n
e
c
r
e
P
0
0
100
80
60
40
20
e
g
a
r
e
v
o
C
r
o
y
c
a
r
u
c
c
A
:
)
%
(
e
g
a
t
n
e
c
r
e
P
Accuracy
Coverage
100
80
60
40
20
e
g
a
r
e
v
o
C
r
o
y
c
a
r
u
c
c
A
:
)
%
(
e
g
a
t
n
e
c
r
e
P
Accuracy
Coverage
Accuracy
Coverage
500
1000
1500
2000
Number of Permissions 
0
0
200
400
600
800
1000
0
0
100
200
300
400
500
Number of Users
Number of Roles 
(a) Varying number of permissions
(b) Varying number of users
(c) Varying number of roles
Figure 3. Accuracy and Coverage
i
)
s
d
n
o
c
e
s
(
e
m
T
g
n
i
s
s
e
c
o
r
P
50
40
30
20
10
0
0
i
)
s
d
n