### Performance and Simulation of Zerocash Transactions

#### Performance Metrics
- **VerifyTransaction (mint)**
  - Time: 5 min 17 s
  - Memory: 896 MiB
  - Size: 749 B
- **Receive**
  - Time: 2 min 2 s
  - Size: 288 B
- **Pour (excluding L scan)**
  - Time per transaction: 1 min 3 s
  - Memory: 896 MiB
  - Time: 326.0 ms
  - Sizes: 343 B, 319 B
  - Additional times: 23 µs, 463 B, 72 B
- **Intel Core i7-4770 @ 3.40GHz with 16GB of RAM (1 thread)**
  - Setup: 2 min 2.01 s
  - Sizes: 996 B
  - Additional times: 8.3 µs, 5.7 ms, 1.6 ms

#### Figures
- **Figure 3**: Performance of our zk-SNARK for the NP statement POUR.
  - (N = 10, σ ≤ 2.5%)
- **Figure 4**: Performance of Zerocash algorithms.
  - (N = 10, σ ≤ 2.5%)

#### Network Impact
Zerocash transactions may take longer to spread through the network, and blocks containing Zerocash transactions may take longer to verify. This can lead to delays in block propagation, causing nodes to waste CPU cycles on outdated blocks, reducing the computational power of the network and increasing the risk of a "51% attack."

#### Simulation Design
- **Testnet Setup**: Due to the breaking changes required by Zerocash, we cannot test it on the live Bitcoin network or even the dedicated testnet. We run a private testnet.
- **Node Configuration**: To maximize efficiency, we run multiple Bitcoin nodes on minimal hardware. However, this raises two issues:
  - Reducing proof of work to practical levels while maintaining a realistic block rate is challenging, especially on virtualized hardware.
  - The overhead of zk-SNARK verification limits the number of nodes that can be run on one server.

- **Block Generation**: Modeled as a Poisson process with a mean of Λblock seconds. Blocks are trivially mined on a randomly selected node.
- **Transaction Introduction**: Another Poisson process with a mean of Λtx introduces new transactions at random network nodes.
- **Transaction Differentiation**: Simulated Zerocash transactions pay a unique amount (7 BTC). If a transaction matches this value and is not in the verification cache, a 10 ms delay simulates the runtime of VerifyTransaction.

#### Methodology
- **Network Parameters**: Based on recent research, the Bitcoin network contains approximately 3,500 reachable nodes, each with an average of 32 open connections. The peak observed transaction rate is slightly under one transaction per second.
- **Simulation Parameters**:
  - 1,000-node network
  - Each node has 32 peers
  - Transactions generated with a mean of Λtx = 1 s
  - Duration: 1 hour
  - Variable percentage (ε) of Zerocash traffic
  - Blocks created every Λblock = 150 s

#### Results
- **Transaction Latency**: The interval between a transaction's creation and its inclusion in a block.
- **Block Propagation Time**: 
  - Average time for a new block to reach a node
  - Average time for the last node to see the block
- **Block Verification Time**: Average time required to verify a block across all nodes.

- **Observations**:
  - Worst-case block verification time: 80 ms
  - Effective caching minimizes the impact on block propagation
  - Transaction confirmation time: approximately 190 s
  - For slower block generation rates (e.g., Bitcoin's 10-minute block), users must wait only one block before spending received transactions.

#### Optimizations and Extensions
For more details on optimizations and extensions, see the extended version of this paper [26].

#### Concurrent Work
- **Danezis et al. [19]**: Suggest using zk-SNARKs to reduce proof size and verification time in Zerocoin. Our work differs in functionality and scalability, supporting anonymous payments of any amount and having polylogarithmic complexities.

#### Conclusion
Decentralized currencies should ensure user privacy. Zerocash provides such privacy but may face criticism for hampering accountability and regulation. However, the underlying zk-SNARK cryptographic proof machinery can support a wide range of policies, enabling privacy-preserving verification and enforcement of compliance and regulatory policies.

#### Acknowledgments
We thank Amazon for their assistance and donation of EC2 resources, and Gregory Maxwell for advice on the Bitcoin codebase. We also thank Iddo Ben-Tov and SCIPR Lab members for inspiring discussions. This work was supported by various organizations and grants.

#### References
[1] D. Chaum, “Blind signatures for untraceable payments,” in CRYPTO '82.
[2] J. Camenisch, S. Hohenberger, and A. Lysyanskaya, “Compact e-cash,” in EUROCRYPT '05.
[3] T. Sander and A. Ta-Shma, “Auditable, anonymous electronic cash,” in CRYPTO '99.
[4] F. Reid and H. Martin, “An analysis of anonymity in the Bitcoin system,” in SocialCom/PASSAT '11.
[5] S. Barber, X. Boyen, E. Shi, and E. Uzun, “Bitter to better - how to make Bitcoin a better currency,” in FC '12.
[6] D. Ron and A. Shamir, “Quantitative analysis of the full Bitcoin transaction graph,” ePrint 2012/584, 2012.
[7] G. Maxwell, “CoinJoin: Bitcoin privacy for the real world,” August 2013, bitcoin Forum.
[8] I. Miers, C. Garman, M. Green, and A. D. Rubin, “Zerocoin: Anonymous distributed e-cash from Bitcoin,” in SP '13.
[9] J. Groth, “Short pairing-based non-interactive zero-knowledge arguments,” in ASIACRYPT '10.