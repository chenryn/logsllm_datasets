5 min 17 s
896 MiB
749 B
2 min 2 s
288 B
1 min 3 s
VerifyTransaction mint
5.4 ms
Receive
pour (excludes L scan)
Time (per pour tx)
5 min 17 s
896 MiB
326.0 ms
343 B
319 B
23 µs
463 B
72 B
2 min 2.01 s
996 B16
8.3 µs
5.7 ms
1.6 ms
Intel Core i7-4770 @ 3.40GHz with 16GB of RAM (1 thread)
Setup
CreateAddress
Mint
Pour
Time
pp
Time
addrpk
addrsk
Time
Coin c
txMint
Time
txPour
Fig. 3: Performance of our zk-SNARK for the NP statement POUR.
(N = 10, σ ≤ 2.5%)
Fig. 4: Performance of Zerocash algorithms.
(N = 10, σ ≤ 2.5%17)
Thus Zerocash transactions may take longer to spread though
the network and blocks containing Zerocash transactions may
take longer to verify. While we are concerned with the ﬁrst
issue, the potential impact of the second issue is cause for
greater concern. This is because Zerocash transactions cannot
be spent until they make it onto the ledger.
Because blocks are also veriﬁed at each hop before they are
forwarded through the network, delays in block veriﬁcation
slow down the propagation of new blocks through the network.
This causes nodes to waste CPU-cycles mining on out-of-date
blocks, reducing the computational power of the network and
making it easier to mount a “51% attack” (dishonest majority
of miners) on the distributed ledger.
It
is a priori unclear whether this potential
issue is a
real concern. Bitcoin caches transaction veriﬁcations, so a
transaction that was already veriﬁed when it propagated through
the network need not be veriﬁed again when it is seen in a
block. The unknown is what percentage of transactions in a
block are actually in any given node’s cache. We thus conduct
a simulation of the Bitcoin network to investigate both the
time it takes Zerocash transactions to make it onto the ledger
and establish the effects of Zerocash transactions on block
veriﬁcation and propagation. We ﬁnd that Zerocash transactions
can be spent reasonably quickly and that the effects of increased
block validation time are minimal.
Simulation design. Because Zerocash requires breaking
changes to the Bitcoin protocol, we cannot test our protocol in
the live Bitcoin network or even in the dedicated testnet. We
must run our own private testnet. For efﬁciency and cost reasons,
we would like to run as many Bitcoin nodes as possible on the
least amount of hardware. This raises two issues. First, reducing
the proof of work to practical levels while still preserving a
realistic rate of new blocks is difﬁcult (especially on virtualized
hardware with variable performance). Second, the overhead of
zk-SNARK veriﬁcation prevents us from running many Bitcoin
16346 B of this are due to the ciphertexts C1, C2. Future implementations
may signiﬁcantly reduce this overhead or discard these (cf. Section VI-C).
17We note that σ for both Mint and VerifyTransaction (mint) is higher
than 2.5% due to the variability at such short timescales. Respectively, it is
3.3 µs and 1.9 µs.
nodes on one virtualized server.
The frequency of new blocks can be modeled as a Poisson
process with a mean of Λblock seconds. To generate blocks
stochastically, we modify bitcoind to ﬁx its block difﬁculty
at a trivial level and run a Poisson process, on the simulation
control server, which trivially mines a block on a randomly
selected node. This preserves the distribution of blocks, without
the computational overhead of a real proof of work. Another
Poisson process triggering mechanism, with a different mean
Λtx, introduces new transactions at random network nodes.
To differentiate which transactions represent normal Bitcoin
expenditures vs. which contain Zerocash pour transactions,
simulated Zerocash transactions pay a unique amount of
bitcoins (we set this value arbitrarily at 7 BTC). If a trans-
action’s output matches this preset value, and it is not in
veriﬁcation cache, then our modiﬁed Bitcoin client inserts
a 10 ms delay simulating the runtime of VerifyTransaction.18
Otherwise transactions are processed as speciﬁed by the Bitcoin
protocol. We vary the amount of simulated Zerocash trafﬁc by
varying the number of transactions with this particular output
amount. This minimizes code changes and estimates only the
generic impact of veriﬁcation delays and not of any speciﬁc
implementation choice.
Methodology. Recent research [17] suggests that the Bitcoin
network contains 16,000 distinct nodes though most are likely
no longer participating: approximately 3,500 are reachable
at any given time. Each node has an average of 32 open
connections to randomly selected peers. As of November 2013,
the peak observed transaction rate for Bitcoin is slightly under
one transaction per second [34].
In our simulation, we use a 1000-node network in which
each node has an average of 32 peers, transactions are generated
with a mean of Λtx = 1 s, a duration of 1 hour, and a variable
percentage  of Zerocash trafﬁc. To allow for faster experiments,
instead of generating a block every 10 minutes as in Bitcoin,
we create blocks at an average of every Λblock = 150 s (as in
Litecoin, a popular altcoin).
18Subsequent optimizations lowered the cost of VerifyTransaction below
this, after our experiments.
472
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
(a) Transaction latency
(b) Block propagation time
(c) Block veriﬁcation time
Fig. 5: The average values of the three metrics we study, as a function of , the percentage of transactions that are Zerocash transactions. Note
that, in (a), latency is undeﬁned when  = 0 and hence omitted.
We run our simulation for different trafﬁc mixes, where
 indicates the percentage of Zerocash transactions and  ∈
{0%, 25%, 50%, 75%, 100%}. Each simulation is run on 200
Amazon EC2 general-purpose m1.medium instances, in one
region on a 10.10./16 private network. On each instance,
we deploy 5 instances of bitcoind.
Results. Transactions are triggered by a blocking function call
on the simulation control node that must connect to a random
node and wait for it to complete sending a transaction. Because
the Poisson process modeling transactions generates delays
between such calls and not between the exact points when the
node actuals sends the transactions, the actual transaction rate
is skewed. In our experiments the real transaction rate shifts
away from our target of one per second to an average of one
every 1.4 seconds.
In Figure 5 we plot three metrics for  ∈ {0%, 25%, 50%,
75%, 100%}. Each is the average deﬁned over the data from
the entire run of the simulation for a given  (i.e., they include
multiple transactions and blocks).19 Transaction latency is the
interval between a transaction’s creation and its inclusion in
a block. Block propagation time comes in two ﬂavors: 1) the
average time for a new block to reach a node computed over
the times for all nodes, and 2) the same average computed
over only the last node to see the block.
Block veriﬁcation time is the average time, over all nodes,
required to verify a block. If veriﬁcation caching was not
effective, we would expect to see a marked increase in both
block veriﬁcation time and propagation time. Since blocks
occur on average every 150 s, and we expect approximately
one transaction each second, we should see 150 × 10 ms =
1500 ms of delay if all transactions were non-cached Zerocash
transactions. Instead, we see worst case 80 ms and conclude
caching is effective. This results in a negligible effect on block
propagation (likely because network operations dominate).
The time needed for a transaction to be conﬁrmed, and hence
19Because our simulated Bitcoin nodes ran on shared EC2 instances, they
were subject to variable external load, limiting the benchmark precision. Still, it
clearly demonstrates that the mild additional delay does not cause catastrophic
network effects.
spendable, is roughly 190 s. For slower block generation rates
(e.g., Bitcoin’s block every 10 minutes) this should mean users
must wait only one block before spending received transactions.
VIII. OPTIMIZATIONS AND EXTENSIONS
See the extended version of this paper [26] for extensions
on everlasting anonymity, batched Merkle tree updates, faster
block propagation, and scaling to 264 serial numbers.
IX. CONCURRENT WORK
Danezis et al. [19] suggest using zk-SNARKs to reduce
proof size and veriﬁcation time in Zerocoin. Our work differs
from [19] in both supported functionality and scalability.
First, [19]’s protocol, like Zerocoin, only supports ﬁxed-value
coins, and is best viewed as a decentralized mix. Instead, we
deﬁne, construct, and implement a full-ﬂedged decentralized
electronic currency, which provides anonymous payments of
any amount.
Second, in [19], the complexity of the zk-SNARK generator,
prover, and veriﬁer all scale superlinearly in the number of
coins, because their arithmetic circuit computes, explicitly,
a product over all coins. In particular, the number of coins
“mixed together” for anonymity cannot be large. Instead, in our
construction, the respective complexities are polylogarithmic,
polylogarithmic, and constant in the number of coins; our
approach supports a practically-unbounded number of coins.
X. CONCLUSION
Decentralized currencies should ensure a user’s privacy from
his peers when conducting legitimate ﬁnancial transactions.
Zerocash provides such privacy protection, by hiding user
identities, transaction amounts, and account balances from
public view. This, however, may be criticized for hampering
accountability, regulation, and oversight. Yet, Zerocash need
not be limited to enforcing the basic monetary invariants of
a currency system. The underlying zk-SNARK cryptographic
proof machinery is ﬂexible enough to support a wide range of
policies. It can, for example, let a user prove that he paid his due
taxes on all transactions without revealing those transactions,
their amounts, or even the amount of taxes paid. As long
473
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
 0 20 40 60 80 100 120 140 160 180 2000%20%40%60%80%100%time in secondsεZerocash 0 0.5 1 1.5 2 2.5 3 3.5 4 4.50%20%40%60%80%100%time in secondsεlast nodeevery node 0 10 20 30 40 50 60 70 800%20%40%60%80%100%time in millisecondsεZerocash[10] H. Lipmaa, “Progression-free sets and sublinear pairing-based non-
interactive zero-knowledge arguments,” in TCC ’12.
[11] N. Bitansky, A. Chiesa, Y. Ishai, R. Ostrovsky, and O. Paneth, “Succinct
non-interactive arguments via linear interactive proofs,” in TCC ’13.
[12] R. Gennaro, C. Gentry, B. Parno, and M. Raykova, “Quadratic span
programs and succinct NIZKs without PCPs,” in EUROCRYPT ’13.
[13] B. Parno, C. Gentry, J. Howell, and M. Raykova, “Pinocchio: nearly
practical veriﬁable computation,” in Oakland ’13.
[14] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza, “SNARKs
for C: verifying program executions succinctly and in zero knowledge,”
in CRYPTO ’13.
[15] H. Lipmaa, “Succinct non-interactive zero knowledge arguments from
span programs and linear error-correcting codes,” in ASIACRYPT ’13.
[16] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza, “Succinct non-
interactive arguments for a von Neumann architecture,” ePrint 2013/879.
[17] C. Decker and R. Wattenhofer, “Information propagation in the Bitcoin
network,” in P2P ’13.
[18] E. Ben-Sasson, “Universal and affordable computational integrity,” May
2013, bitcoin 2013: The Future of Payments. [Online]. Available:
http://www.youtube.com/watch?v=YRcPReUpkcU
[19] G. Danezis, C. Fournet, M. Kohlweiss, and B. Parno, “Pinocchio
Coin: building Zerocoin from a succinct pairing-based proof system,”
in PETShop ’13. [Online]. Available: http://www0.cs.ucl.ac.uk/staff/G.
Danezis/papers/DanezisFournetKohlweissParno13.pdf
[20] S. Nakamoto, “Bitcoin: a peer-to-peer electronic cash system,” 2009.
[Online]. Available: http://www.bitcoin.org/bitcoin.pdf
[21] M. Bellare, A. Boldyreva, A. Desai, and D. Pointcheval, “Key-privacy
in public-key encryption,” in ASIACRYPT ’01.
[22] D. Boneh and X. Boyen, “Secure identity based encryption without
random oracles,” in CRYPTO ’04.
[23] R. Gennaro, “Multi-trapdoor commitments and their applications to
proofs of knowledge secure under concurrent man-in-the-middle attacks,”
in CRYPTO ’04.
[24] C. Gentry and D. Wichs, “Separating succinct non-interactive arguments
from all falsiﬁable assumptions,” in STOC ’11.
[25] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer, “From extractable
collision resistance to succinct non-interactive arguments of knowledge,
and back again,” in ITCS ’12.
[26] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E. Tromer, and
M. Virza, “Zerocash: Decentralized anonymous payments from Bitcoin
(extended version),” Cryptology ePrint Archive, 2014.
[27] J. Katz and Y. Lindell, Introduction to Modern Cryptography. Chapman
& Hall/CRC, 2007.
[28] M. Bellare, “New proofs for NMAC and HMAC: security without
collision-resistance,” in CRYPTO ’06.
[29] P. Wuille, “Proposed BIP for dealing with malleability,” Available at
https://gist.github.com/sipa/8907691, 2014.
[30] V. Shoup, “A proposal for an ISO standard for public key encryption
(version 2.1),” IACR E-Print Archive, 2001.
[31] Certicom Research, “SEC 1: Elliptic curve cryptography,” 2000. [Online].
Available: http://www.secg.org/collateral/sec1 ﬁnal.pdf
[32] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: the second-
generation onion router,” in Security ’04.
[33] G. Danezis, R. Dingledine, and N. Mathewson, “Mixminion: design of
a type III anonymous remailer protocol,” in SP ’03.
[34] T. B. Lee, “Bitcoin needs to scale by a factor of 1000 to compete
with Visa. here’s how to do it.” The Washington Post (http://www.
washingtonpost.com), November 2013.
as the policy can be speciﬁed by efﬁcient nondeterministic
computation using NP statements, it can (in principle) be
enforced using zk-SNARKs, and added to Zerocash. This
can enable privacy-preserving veriﬁcation and enforcement
of a wide range of compliance and regulatory policies that
would otherwise be invasive to check directly or might be
bypassed by corrupt authorities. This raises research, policy,
and engineering questions over what policies are desirable and
practically realizable.
Another research question is what new functionality can
be realized by augmenting the capabilities already present in
Bitcoin’s scripting language with zk-SNARKs that allow fast
veriﬁcation of expressive statements.
ACKNOWLEDGMENTS
We thank Amazon for their assistance and kind donation of
EC2 resources, and Gregory Maxwell for his advice regarding
the Bitcoin codebase. We thank Iddo Ben-Tov and the SCIPR
Lab members — Daniel Genkin, Lior Greenblat, Shaul Kﬁr,
Gil Timnat and Michael Riabzev — for inspiring discussions.
This work was supported by: Amazon.com through an AWS
in Education research grant; the Broadcom Foundation and
Tel Aviv University Authentication Initiative; the Center for
Science of Information (CSoI), an NSF Science and Technology
Center, under grant agreement CCF-0939370;
the Check
Point Institute for Information Security; the U.S. Defense
Advanced Research Projects Agency (DARPA) and the Air
Force Research Laboratory (AFRL) under contract FA8750-
11-2-0211; the European Community’s Seventh Framework
Programme (FP7/2007-2013) under grant agreement number
240258; the Israeli Centers of Research Excellence I-CORE
program (center 4/11); the Israeli Ministry of Science and
Technology; the Ofﬁce of Naval Research under contract
N00014-11-1-0470; the Simons Foundation, with a Simons
Award for Graduate Students in Theoretical Computer Science;
and the Skolkovo Foundation under grant agreement 6926059.
The views expressed are those of the authors and do not reﬂect
the ofﬁcial policy or position of the Department of Defense or
the U.S. Government.
REFERENCES
[1] D. Chaum, “Blind signatures for untraceable payments,” in CRYPTO
[2] J. Camenisch, S. Hohenberger, and A. Lysyanskaya, “Compact e-cash,”
[3] T. Sander and A. Ta-Shma, “Auditable, anonymous electronic cash,” in
’82.
in EUROCRYPT ’05.
CRYPTO ’99.
[4] F. Reid and H. Martin, “An analysis of anonymity in the Bitcoin system,”
in SocialCom/PASSAT ’11.
[5] S. Barber, X. Boyen, E. Shi, and E. Uzun, “Bitter to better - how to
make Bitcoin a better currency,” in FC ’12.
[6] D. Ron and A. Shamir, “Quantitative analysis of the full Bitcoin
transaction graph,” ePrint 2012/584, 2012.
[7] G. Maxwell, “CoinJoin: Bitcoin privacy for the real world,” August
2013, bitcoin Forum. [Online]. Available: https://bitcointalk.org/index.
php?topic=279249.0
[8] I. Miers, C. Garman, M. Green, and A. D. Rubin, “Zerocoin: Anonymous
distributed e-cash from bitcoin,” in SP ’13.
[9] J. Groth, “Short pairing-based non-interactive zero-knowledge arguments,”
in ASIACRYPT ’10.
474
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply.