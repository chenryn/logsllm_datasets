# Flexible µTPMs through Disembedding

## Authors
- **Klaus Kursawe**
  - Philips Research Europe
  - High Tech Campus 34
  - 5656 AE Eindhoven, The Netherlands
  - Email: [EMAIL]
- **Dries Schellekens**
  - ESAT/SCD-COSIC and IBBT
  - Katholieke Universiteit Leuven
  - Kasteelpark Arenberg 10
  - 3001 Heverlee, Belgium
  - Email: [EMAIL]

## Abstract
The adoption of Trusted Platform Modules (TPMs) in real-world applications has led to the identification of fundamental flaws in the TPM architecture, resulting in increasingly complex and expensive hardware requirements. In this paper, we propose a new architecture that redefines the trust boundary, allowing for simpler and more flexible TPM implementations without compromising security.

## Categories and Subject Descriptors
- C.2 [Computer Systems Organization]: Special-Purpose and Application-Based Systems—Real-time and embedded systems
- K.6.5 [Management of Computing and Information Systems]: Security and Protection

## General Terms
- Design, Measurement, Security

## Keywords
- Trusted Computing, secure coprocessor, Trusted Platform Module, Mobile Trusted Module

## 1. Introduction
Trusted Platform Modules (TPMs) were introduced by the Trusted Computing Platform Alliance (TCPA) to provide a low-cost, universal building block for establishing a certain level of trust in computing platforms. This is achieved primarily through trustworthy measurement of the platform’s boot sequence and secure storage. Initially, TPMs were designed as separate chips; later versions have been more closely integrated into the platform's chipset.

Over time, the TPM specification has expanded in scope and complexity to accommodate various functional requirements. A study by Sadeghi et al. [12] revealed that some vendors are struggling with the implementation complexity. For cost-sensitive mobile devices, a different specification (the Mobile Trusted Module or MTM [9]) was required to manage complexity.

Current TPM implementations have deviated from the original TCPA philosophy of a simple, easy-to-implement, and verifiable module. Additionally, the increasing interest and use of TPMs have generated more requirements for additional functionality, such as support for virtualized machines and distributed protocols.

In this paper, we explore how TPM functionality can be achieved with simpler hardware and greater flexibility to meet specialized application demands. We re-evaluate which functionalities must be implemented within the trust boundary and which can be externalized to the host platform. By externalizing large parts of the TPM implementation, we aim to create a smaller, more flexible, and easier-to-implement and verify hardware base.

### 1.1 Related Work
- **Chevallier-Mames et al. [4]** proposed a theoretical blueprint for a ROM-less smart card called Externalized Microprocessor (XµP). They suggest several public key-oriented alternatives for authenticating externalized code.
- **Eisenbarth et al. [8]** defined a new FPGA architecture for embedding a TPM in a reconfigurable System-on-Chip (SoC) design. Their Bitstream Trust Engine (BTE) records partial configuration bitstreams and limits access to internal non-volatile memory (NVM).
- **Costan et al. [6]** proposed the Trusted Execution Module (TEM) as a more flexible alternative to TPMs. TEM can execute arbitrary general-purpose applications, split into encrypted closures, ensuring only designated modules can run the application.

### 1.2 Structure of the Paper
- **Section 2**: Motivation for the alternative TPM architecture.
- **Section 3**: Description of the µTPM scheme to disembed the TPM firmware.
- **Section 4**: Comparison of the security of our µTPM proposal with traditional TPMs.
- **Section 5**: Discussion on minimizing the µTPM’s memory footprint.
- **Section 6**: Conclusion.

## 2. Towards an Alternative TPM Architecture
The current TPM design shows limitations due to its "one-size-fits-all" approach, leading to complex, hard-to-verify, and expensive hardware. To address these issues, we propose redefining the trust boundaries of the TPM architecture. By externalizing TPM functionality, we increase flexibility and reduce the size of critical hardware components.

### Key Benefits
- **Verifiability**: Separating code and hardware makes the hardware easier to verify, while ensuring the code has not been modified. This allows for alternative implementations and customization.
- **Customizability**: TPM functionality can be easily extended or limited, allowing each platform to include only the necessary commands.
- **Upgrades**: TPM code can be updated in the field, fixing bugs and retiring unsafe protocols.
- **Specialized Implementations**: Low-end TPMs can implement minimal hardware, while high-end TPMs can offer more resources for rapid context switches.

### Requirements
- The new architecture must be compatible with the TPM trust model and functionality.
- It should support parallel, independent processes, enabling multiple security co-processors in one hardware block without interference.

## 3. The µTPM Architecture
We propose a new TPM architecture called µTPM, building upon the XµP concept [4] and the BTE proposal [8]. The firmware is stored outside the trust perimeter and authenticated on a command granularity. The Firmware Trust Engine (FTE) measures and reports the running code and controls access to internal resources.

### 3.1 Architecture Overview
The µTPM requires similar hardware components to a regular TPM, including a microcontroller (µC), volatile memory (RAM), and multiple-time-programmable (MTP) non-volatile memory (NVM). However, it lacks read-only memory (ROM).

#### Components
- **Firmware Trust Engine (FTE)**: Manages the externalized firmware and multiple execution contexts. It provides shielded locations for key material and acts as the Root of Trust for Storage (RTS).

By redefining the trust boundaries and externalizing TPM functionality, we aim to create a more flexible, simpler, and cost-effective TPM solution.