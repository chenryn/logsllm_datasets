Broadcom Wi-Fi ﬁrmware could enable a remote attacker
to execute arbitrary code within the context of the Wi-Fi SoC.
As a proof of concept we exploited this vulnerability simi-
larly to [6] and sent malicious inputs that triggered the buffer
overﬂow vulnerability. Nonetheless, the ﬁrmware did not
crash and continued to function normally with no observ-
able side-effects. This is mainly due to the fact that Broadcom
Wi-Fi SoC lacks all basic memory protection mechanisms
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    383
Figure 1: Workﬂow of µSBS.
including access permission protection by means of either
MMU, MPU or more advance protections like stack canaries.
There exist several approaches to make faulty states ob-
servable. Sanitizers [51] monitor the actual execution of an
application in order to observe faulty states as they happen.
They enforce spatial memory safety by detecting dereferences
of pointers that do not target their intended referent, or en-
force temporal memory safety by detecting dereferences of
pointers that target a referent that is no longer valid. Sanitiz-
ers implement memory safety policies by embedding inlined
reference monitors (IRM) into the application through instru-
mentation. IRMs mediate and monitor every memory accesses
and memory object (de)allocations instructions. IRMs can be
embedded at either source code or binary level. Source-based
sanitizers [30, 33, 46, 53, 60] are not widely deployable on
bare-metal devices due to the unavailability of their ﬁrmware
source code since they are often proprietary.
Binary images of bare-metal ﬁrmware are often available
to the analyst since they can be acquired by directly extracting
from the physical device using debugging port (e.g., JTAG
interface) or downloading and unpacking update packages
available on many vendors websites. Thus, binary sanitiza-
tion [23, 34, 48] is the only viable option for enforcing mem-
ory safety in bare-metal ﬁrmware. Dynamic binary sanitizers
read application code, instrument it, and translate it to ma-
chine code while the application executes. However, these
approaches do not generate a standalone instrumented bi-
nary and sanitization process has to be done again each time
the application executes. In addition, they have signiﬁcant
run-time and space overhead which is a critical problem for
bare-metal devices which have limited processing power and
a small memory space. This overhead can essentially be at-
tributed to the dynamic translation process. This issue can
be addressed by instrumenting applications statically using a
binary sanitizer, which we believe is a promising solution for
our requirements.
Until now, there is no binary sanitizer for bare-metal
ﬁrmware. Based on this limitation of previous work, we pro-
pose a novel and tailored automated method for making faults
observable in bare-metal devices.
3 Static Binary Sanitization for Bare-metal
Devices
Figure 1 illustrates a high-level overview of our approach,
with the different components and their interactions. There
are three main phases: the static disassembling, the binary
instrumentation, and the reassembling.
The ﬁrst step of our µSBS workﬂow is static disassembling
(§ 3.1). It disassembles the raw binary and decodes instruc-
tions using a linear disassembly method. The second phase is
binary instrumentation (§ 3.2) that instruments the ﬁrmware
binary based on the sanitization speciﬁcation. Sanitization
speciﬁcation (§ 3.3) contains instrumentation information
determining what instructions will be inserted or replaced
in order to embed IRMs and monitor every memory access.
In other words, µSBS statically instruments every memory
access with a runtime check to verify if it is an access to an
allowed address. If not, our fault handler raises a warning
close to the location of the bug to guide the follow-up security
analysis to ﬁnd out the root cause of the fault. The last step is
the reassembling, that takes the instrumented assembly code
and reassembles it as a working binary using off-the-shelf
assemblers. In the following sections, we describe the most
important and challenging aspects of µSBS design.
3.1 Static Disassembling
Disassembly is referred as the process of parsing executable
region of binary ﬁle from beginning to the end and decoding
all encountered bytes into their raw textual representation.
There are two popular types of disassembly approaches: lin-
ear sweep and recursive traversal disassemblers [19, 37, 45].
Linear sweep decodes all encountered bytes as instructions
by sweeping the entire code section. Recursive traversal dis-
assembles instructions following control ﬂow transfers (e.g.,
jumps and calls). It is challenging to correctly and completely
disassemble arbitrary code. This is mainly due to the fact that,
in hand-written assembly and modern compilers, code and
data can be interleaved and there is no syntactic distinction
whereby the disassembler may distinguish them. However,
384    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
06/04/2020draw.iochrome-extension://pebppomjfocnoigkeepgbmcifnnlndla/index.html1/1Firmware BinaryStaticDisassemblingMappingGenerationReassemblingSanitizedFirmware BinaryBinary InstrumentationSanitizationSpeciﬁcation#include
void printer_ver1 (float var ) {
printf (" %.10 f\n" , var );
}
void printer_ver2 (float var ) {
printf (" %.50 f\n" , var );
}
void (*printers [2]) (float) = { printer_ver1 ,
printer_ver2 };
int main (void)
{
static float var = 4e -34;
static int (**ptr )(float)= & printers ;
(*( ptr +1) )( var );
return 0;
}
0 x804816c :
...
0 x8048198 :
bl
8048688 
0 x80481b0 :
...
0 x80481bc :
0 x80481c0 :
0 x80481c4 :
0 x80481c8 :
0 x80481cc :
0 x80481d0 :
0 x80481d4 :
0 x80481d8 :
0 x80481dc :
0 x80481e0 :
r3 , [ r3 ]
r3 , r3 , #4
r2 , [ r3 ]
movw r3 , #64668 ; 0xfc9c
movt r3 , #1
ldr
add
ldr
movw r3 , #64672 ; 0xfca0
movt r3 , #1
ldr
mov
blx
r3 , [ r3 ]
r0 , r3
r2
(a) Source code of running example.
(b) Partial assembly code of running example.
Hex dump of section . data :
0 x0001fc90 00000000 28810408 6 c810408 94 fc0100
0 x0001fca0 3 dec0408 00000000 00000000 94 ff0100
(c) Hexdump of .data section.
Figure 2: A running example that covers three main challenges of binary instrumentation and illustrates four general classes of
references (C2C, C2D, D2D, D2C) in assembly code.
Andriesse et al. [18] noted that such cases are exceedingly
rare and disassemblers achieve close to 100% accuracy for
instruction disassembly from compiler-generated binaries.
Therefore, we applied a linear sweep disassembly algorithm
to our evaluation set.
3.2 Binary Instrumentation
The µSBS binary instrumentation component takes the dis-
assembled ﬁle and sanitization speciﬁcation as inputs with
the aim of statically inserting a number of memory check
instructions to catch memory corruption vulnerabilities. How-
ever, binary instrumentation introduces challenges that are
not present when modifying source code. Speciﬁcally, when
instructions are inserted or removed at the source code level,
the compiler will redo the linking process to rearrange code
and data in memory. In binaries, inserting or removing in-
structions causes addresses to change and breaks the binary
ﬁle due to the lack of linkage information. The symbol and
relocation information, that is used in the linking process to
ensure that application elements can correctly refer to each
other, are discarded by the compiler once ﬁnished. In the
following, we provide the details of practical challenges in
designing µSBS binary instrumentation component and our
solutions tackling them.
The core process of instrumenting binaries is the ability
to relocate any binary code without any relocation and meta-
data information. There are three main challenges in reloca-
tion procedure to avoid breaking the binary ﬁle. To describe
these challenges clearly, Figure 2 shows a running applica-
tion alongside its disassembly and the hex dump of its data
section. This application declares a ﬂoat variable var with an
initial value of 4e-34 and prints that with two different for-
mats (i.e., printer_ver1 and printer_ver2). The ﬁrst challenge
is recognizing static addresses. There is no syntactic distinc-
tion to disambiguate between reference and scalar type for
immediate values and updating references to the new targeted
addresses. In our application, the compiler stores 3dec0408
in data section as the binary representation of var. Since our
application has a code section with memory addresses rang-
ing from 0x8000000 to 0x8100000, this immediate value can
be considered as a pointer (0x804ec3d) on little-endian ma-
chines; this will irremediably corrupt the image if we update
it after binary instrumentation.
The second challenge is relocating static addresses after
instrumentation. For example, as illustrated in our applica-
tion disassembly, the printer_ver2 function calls the printf
function with static address 0x8048688. It is clear that the
insertion of instructions into, or removal of instructions from
disassembly code can break this static address. The third
challenge is determining dynamically referenced memory ad-
dresses. Contrary to static memory addresses that are explicit,
the target addresses of some references are computed dynam-
ically at runtime and they can not be updated statically. As
shown in our application disassembly, the reference target r2
is computed dynamically.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    385
To tackle these challenges, we categorize all references
into four general classes: Code-to-Code (C2C), Code-to-Data
(C2D), Data-to-Code (D2C), and Data-to-Data (D2D). In our
application, the ldr r3, [r3] instruction accesses to the ad-
dress 0x0001fc9c in order to retrieve the printers array ad-
dress from data section (C2D). 94fc0100 hex value at address
0x0001fc9c is a pointer to the printers array in data section
(D2D). The second element (6c810408) of the printers array
points to the printer_ver2 function in code section (D2C),
which calls the printf function at address 0x8048688 (C2C).
C2D and D2D references. Due to the fact that there is no
need to perform instrumentation on the original data space,
we can preserve the starting addresses of data sections intact.
By doing so, we may easily ignore and handle C2D and D2D
references.
C2C and D2C references. Since insertion of instructions
causes stretched code space, µSBS adds a new expanded code
section (.newsec) at a new entry point. As demonstrated in
Algorithm 1, µSBS iterates all disassembled instructions and
rewrites them intact in the .newsec section. Also, in the mean-
while, µSBS performs instrumentation and inserts new mem-
ory check instructions in the .newsec section.
µSBS adjusts all branch instructions target addresses while
rewriting them in the .newsec section. Each direct branch
instruction with an immediate operand can easily point to
the new address by changing its offset statically. However,
indirect branch instructions have multiple possible target ad-
dresses and therefore needs some sort of target-prediction
mechanism. Unlike many prior efforts [36, 54, 55], we ob-
serve that while it is challenging to statically identify targets
of indirect branch instructions, we can instead perform a dy-
namic lookup at runtime. It is mainly due to the fact that the
precise target addresses are known at runtime. Speciﬁcally, we
provide a mapping table from the old code section to .newsec.
By doing so, we can modify each indirect branch instruction
to search for the new target address in the mapping table after
the old target address has been computed at runtime.
To generate the mapping table, it is ﬁrst required to know
each instruction size that is present in the .newsec section.
Therefore, we record any changes to instructions and sizes
while rewriting them in the .newsec section. More speciﬁcally,
we generate a mapping table from each address in the old code
section to the size of the corresponding rewritten bytes in the
.newsec section. Afterwards, we are able to adjust reference
targets by converting each size record in the mapping table to
the corresponding offset in the .newsec section. Essentially,
we add a level of indirection by replacing all indirect branch
instructions with a direct branch to the mapping routine and
consulting the mapping table for computing the new target
address.
For instance, in Figure 2, the runtime value of indirect
branch (blx r2) target address is 0x804816c. As shown in
Figure 3, µSBS rewrites instructions in the .newsec section
with base address 0x8200000. At runtime, the mapping rou-
Algorithm 1: Generating a new code section
newsecGenerator (Insts)
inputs :Insts = inst1 . . .instn
output :newsec section
foreach disassemled instruction insti ∈ Insts do
if insti.type is a branch_instruction then
if insti.re f is static then
insti.re f := Ad justTarget(insti.re f );
W riteInst(newsec,insti)
else
W riteInst(newsec,mapping_instructions)
else if SanitizationSpeciﬁcation(insti) then
if insti.type is a memory_allocation then
W riteInst(newsec,redzone);
W riteInst(newsec,insti);
W riteInst(newsec,redzone);
else
W riteInst(newsec,metadata_check);
W riteInst(newsec,insti);
else
W riteInst(newsec,insti)
return newsec;
tine looks for 0x804816c entry in mapping table in order to
ﬁnd the offset of new target address (0x81d0), and then re-
turns new translated target address (0x8200000 + 0x81d0 =
0x82081d0). Finally, ﬁrmware jumps (ldr pc, [sp, #-4]) to the
translated address.
3.3 Sanitization Speciﬁcation
The sanitization speciﬁcation determines which exact instruc-
tions should be instrumented by µSBS. AddressSanitizer [46]
and Valgrind’s Memcheck [48] are the most widely adopted
sanitizers for detecting memory safety violations in prac-
tice [52]. Inspired by these approaches, µSBS utilizes a meta-
data store that keeps the status of allocated memory bytes.
µSBS surrounds every memory value with a so-called red-
zone representing out-of-bounds memory and marks it as
invalid memory in the metadata store. Then, µSBS instru-
ments every memory instruction (i.e., load and store) in order
to consult the metadata store whenever the ﬁrmware attempts
to access memory. Any access to a red-zone or to an unallo-
cated memory region is considered as a memory corruption
vulnerability and triggers a warning close to the location of
the bug.
The current version of µSBS sanitizer enables us to observe
faulty states caused by various types of spatial and temporal
memory corruptions including: (1) Overrunning and under-
running heap blocks. (2) Overrunning the top of the stack. (3)
Accessing memory after it has been freed. (4) Using memory
values that have not been initialized or that have been derived
386    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
branch instructions to deploy the dynamic mapping procedure.
To do so, every indirect jump instruction with target address
label must be rewritten by instructions shown in Listing 2.
str
mov
bl
str