The following text has been optimized for clarity, coherence, and professionalism:

---

### Attack Specification in LAMBDA

An attack's effect upon success is defined by its post-condition. The various scenarios associated with an attack include the attack scenario, detection scenario, and verification scenario.

- **Attack Scenario**: This is the sequence of actions an intruder performs to execute the attack.
- **Detection Scenario**: This encompasses the events necessary to detect the occurrence of the attack.
- **Verification Scenario**: This involves a combination of events to verify if the attack was successful.

#### Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P'02)
1081-6011/02 $17.00 Â© 2002 IEEE

**Post-Condition Example:**
- `can_access(Source_user, Partition)`: This indicates that the intruder `Source_user` gains access to the mounted partition `Partition`.

**Note:** Sometimes, the effect of an attack is simply a gain in knowledge about the target system. For example, the `TCPScan` attack in Figure 2. Such attacks are crucial as they often precede more complex attack scenarios. To represent this knowledge gain, we extend language L1 to include the meta-predicate `knows`. For instance, `knows(bad_guy, use_service(192.168.12.3, 'NetBios'))` means that `bad_guy` knows that `NetBios` is an active service on the system with IP address `192.168.12.3`.

**Other Fields in LAMBDA:**
- **Action**: Specifies the single event corresponding to the attack scenario.
- **Alert**: Specifies the single event corresponding to the detection of the attack.

**Event Calculus Algebra:**
- This algebra uses operators such as `;` (sequential composition), `||` (parallel unconstrained execution), `?` (non-deterministic choice), `&` (synchronized execution), and `if_not` (exclusion of an event when another event occurs).

**Condition Fields:**
- **cond_scenario**: Describes the event specified in the attack scenario using the `script` predicate.
- **cond_detection**: Describes the main attributes of the alert expected when the attack occurs, using logical expressions built from predicates introduced in Section 2.2.

**Example:**
- `alert(Alert), classification(Alert, "MIR-0163"), source(Alert, Source), source_user(Source, Source_user)`

**Additional Fields:**
- Other fields, such as a "reaction" field, can be included to specify actions to be taken upon detection of the attack. In this paper, we focus on the "Pre-condition," "Post-condition," and "Detection scenario" fields.

**Pre-Condition and Post-Condition:**
- These describe conditions over the system's state using a language L1 based on predicate logic. Predicates are used to describe properties of the state relevant to the attack. The set of predicates is partly inspired by the DARPA taxonomy for classifying attacks.

**Predicates Used:**
- **access_level**: Specifies the intruder's access level over the target system.
- **deny_of_service, alter, (illegal) use**: Specify the effects of attacks on the target system.
- **use_service**: Specifies conditions on the state of the target or source systems.

**Logical Connectives:**
- Predicates are combined using conjunction (`and`) and negation (`not`). Disjunction is not allowed in pre- and post-conditions, and negation applies only to individual predicates, not conjunctive expressions.

**Figure 2 Examples:**
- **NFS Mount**: 
  - Pre-condition: `access_level(Source_user, Target_address, remote), mounted_partition(Target_address, Partition)`
  - Action: `script(Action, 'mount -t nfs $Partition:$Target_address $Partition')`
  - Alert: `alert(Alert), classification(Alert, "MIR-0163")`

- **Modification of .rhost**:
  - Pre-condition: `access_level(Source_user, Target_address, remote), can_access(Source_user, Partition), owner(Partition, Target_User), userid(Target_user, Target_address, Userid), access_level(Source_user, Target_address, user)`
  - Action: `script(Action, 'cat "++" > .rhost')`
  - Alert: `alert(Alert), source(Alert, Source), source_user(Source, Source_user), target(Alert, Target), target_node(Target, Target_node), address(Node, Target_address), classification(Alert, "MIR-0163")`

- **Winnuke**:
  - Pre-condition: `use_os(Target_address, windows), state(Target_address, available), dns_server(Target_address)`
  - Action: `script(Action, 'winnuke $Target_address')`
  - Alert: `alert(Alert), source(Alert, Source), source_node(Source, Source_node), address(Source_node, Source_address), target(Alert, Target), target_node(Target, Target_node), address(Target_node, Target_address), classification(Alert, "MIR-0036")`

- **TCPScan**:
  - Pre-condition: `use_soft(Source_address, tcpscan), use_service(Target_address, Target_service), service_type(Target_service, tcp)`
  - Action: `script(Action, 'tcpscan $Target_address')`
  - Alert: `alert(Alert), source(Alert, Source), source_node(Source, Source_node), address(Source_node, Source_address), source_user(Source, Source_user), target(Alert, Target), target_node(Target, Target_node), target_service(Target, Target_service), classification(Alert, "MIR-0074")`

**Correlation Rules:**
- **attack_correlation**: Correlates two attacks. For example, `attack_correlation("MIR-0066", "MIR-0162")` correlates the `rpcinfo` attack with the `showmount` attack.
- **alert_correlation**: Correlates two alerts. For example, `alert_correlation(Alert1, Alert2)` specifies that `Alert1` is correlated with `Alert2`.

**Example Correlation Rule:**
- Premise: 
  - Part 1: Description of `Alert1` (classification "MIR-0066")
  - Part 2: Description of `Alert2` (classification "MIR-0162")
  - Part 3: Conditions for correlation (target addresses must be equal, and the service name in `Alert1` must be "mountd").
- Conclusion: `alert_correlation(Alert1, Alert2)`

**Implicit Condition:**
- Alerts must occur in a specific order, checked by comparing the detection times of `Alert1` and `Alert2`.

---

This optimized version aims to provide a clear, coherent, and professional description of the attack specification in LAMBDA, including examples and correlation rules.