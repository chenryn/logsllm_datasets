ment of our system. Like other user-level solutions [54,60], this bootstrap module
is integrated into the app by simply including a proxy class which extends the
Application class. Then the bootstrap module will invoke BlenderLRM to
self-randomize the current loaded libraries. After that, it will invoke Blender-
ART to rearrange the ART runtime in the memory. Finally, the original app
468
M. Sun et al.
will be loaded and started. Since the bootstrap module has been extensively dis-
cussed in previous research [54,60], in this paper, we will explain BlenderLRM
and BlenderART, respectively.
Fig. 5. Overview of Blender library randomization module.
4.2 BlenderLRM
Figure 5 illustrates the overview of BlenderLRM. The main purpose of
BlenderLRM is to randomize the addresses of already loaded system libraries
inherited from the zygote process, and all other app-provided third-party
libraries. For this purpose, BlenderLRM leverages a customized dynamic linker
(named as blinker), which ﬁrst rearranges the already loaded system libraries
and then takes over the process of loading app-provided third-party libraries and
randomizes their addresses. Note that all the described operations in this section
later are only applied to its own process of the app with our system, and does
not aﬀect other processes running on the same device.
Rearrange System Libraries. Rearranging the system libraries looks straight-
forward, since all system libraries on the Android with ASLR support should be
compiled as position independent code (PIC). This means that these libraries
could be loaded into any addresses1. We can simply copy the loaded libraries
from one location to another one to randomize the loaded addresses of them.
However, most, if not all, system libraries are dynamically linked. These dynami-
cally linked libraries depend on other libraries, and their dependencies have been
resolved when creating the zygote process. Simply moving the system libraries
from one location to another location will break the resolved dependencies, and
crash the app.
1 In early versions of Android without ASLR support, system libraries are pre-loaded
into ﬁxed locations.
Blender: Self-randomizing Address Space Layout for Android Apps
469
Algorithm 1. Memory Randomization Algorithm
1: function RandomizeLibraries(libraryDependencyGraph)
sortedN odes ← TopoSort(libraryDependencyGraph)
2:
for each n ∈ sortedNodes do
3:
4:
5:
6:
7:
8:
9:
10:
11: end function
DupMap(n)
for each node m with an edge from n to m do
end for
SaveLibraryInformation(n)
UnMap(n)
end for
(cid:2) Unmap library n from memory mappings.
(cid:2) Duplicate memory mapping to a random free space.
FixGOT(m, n)
(cid:2) Fix symbol resolution in GOT of m.
Before presenting our method to solve this challenge, we will describe the
background of dynamic linking ﬁrst to help readers better understand our pro-
posed method. For each dynamically linked library, there is a Procedure Linkage
Table (PLT) section (.plt), which contains several stubs to call external func-
tions. For example, suppose library A uses the strcpy function in libc, then
there is a stub for the strcpy function in the PLT section of library A. The
functionality of this PLT stub is to load the real address of the strcpy (of libc
in the memory) from the entry of the Global Oﬀset Table (GOT) section, and
then jump to it. Each external function used by the library has an entry in GOT,
and its real address is resolved by the dynamic linker (i.e., /system/bin/linker
in Android) when the library is ﬁrst loaded into the memory and written in the
corresponding GOT entry. Note that the dynamic linker in Android does not
adopted the “lazy binding” mechanism [20], which is common in the desktop
systems, to speed up the app startup stage.
To solve the challenge of dependencies between system libraries, blinker
generates a dependency graph on the loaded libraries and ﬁxes the wrong
addresses in GOT due to library rearrangement. We say that library A depends
on library B if there exists a function call from library B to library A. For
instance, liblog.so uses the strcpy() function in libc.so, and we say libc.so
depends on liblog.so. In the dependency graph, there will be an edge from A
(e.g., libc.so) to B (e.g., liblog.so). Correspondingly, the GOT section of
liblog.so should contain an entry of the strcpy function pointing to libc.so.
Figure 6 illustrates the dependency graph of ten common libraries loaded by
zygote. From the ﬁgure, we can see that there are eight libraries which depend
on libc.so. Therefore, if BlenderLRM rearranges libc.so library to other
address, addresses pointing to libc.so in GOTs of its dependent libraries needs
to be updated. Note that blinker itself is statically linked, otherwise it will
depend on other system libraries which will be rearranged and a dead lock will
be created between blinker and its dependent libraries.
After generating the dependency graph, blinker rearranges system libraries
according to the method described in Algorithm 1. The algorithm takes a library
dependency graph as an input. blinker ﬁrst topologically sorts the dependency
graph. For each node in the sorted node list, blinker ﬁrst duplicates it into a
470
M. Sun et al.
Fig. 6. Dependency graph.
Fig. 7. Overview of BlenderART.
random free space aligned with the memory page size. Then, blinker ﬁxes GOTs
of its dependent nodes. Furthermore, blinker will store the library information
including new base locations, names, dependency information, etc. This infor-
mation will help blinker to link libraries which will be added at later stages.
Finally, blinker will unmap the original libraries from memory.
Rearrange App-Provided Third-Party Libraries. Besides system libraries,
an app may have its own third-party libraries. For instance, the app using the
Cocos2d game engine will include the corresponding native libraries in the app.
Our system needs to randomize these libraries as well to ensure they have dif-
ferent addresses in diﬀerent runs. For this purpose, blinker takes over the role
of the original linker. Speciﬁcally, native libraries are loaded into memory by the
dlopen() function in libdl.so. We modify the dynamic linker related function
pointers in the GOT section of libdl.so to our customized blinker. Then,
if a new native library is loaded into memory by using the dlopen() function,
blinker will map it into a random address and resolve external function calls.
4.3 BlenderART
As discussed in Sect. 3.2, the newly introduced ART runtime exposes a new
attack surface, due to the fact that the pre-compiled boot.oat ﬁle is in a ﬁxed
memory location after the system is ﬁrst booted and will not change unless
an OTA update is performed2. Our system needs to rearrange this boot.oat
to other locations. However, the diﬀerences between the boot.oat and other
system libraries we discussed in Sect. 4.2 pose new challenges, and we cannot
directly apply the method proposed in Sect. 4.2 to the boot.oat ﬁle.
Figure 7 illustrates the workﬂow of BlenderART. There are three steps to
carry out the ART runtime randomization: (1) patch the boot.oat ﬁle with an
oﬀset, (2) load this patched boot.oat ﬁle into the memory, (3) ﬁx code addresses
of the class linker instance in the ART runtime.
2 Actually, the app’s bytecode in the ﬁle classes.dex is also compiled into the native
code. However, this compiled native code is loaded into diﬀerent places each time
the app is started.
Blender: Self-randomizing Address Space Layout for Android Apps
471
Patch and Load Boot.oat. of the boot.oat ﬁle, two main components in the
boot.oat ﬁle should be patched. First, some branch instructions in the boot.oat
use absolute addresses to jump to the target instruction. For instance, suppose
method A invokes method B in the framework as shown in Fig. 7, the branch
instruction jumping from method A to method B uses an absolute address in
memory. These absolute addresses should be patched if we want to move the
boot.oat to another location. Second, the metadata information in the oat ﬁle
header contains absolute addresses, and need to be patched too.
One natural choice to patch the address is to leverage the binary rewrit-
ing tool to disassemble the compiled native code, locate and modify absolute
addresses in branch instructions. However, writing a binary rewriting tool from
scratch is a tedious and error-prone process. In this work, we take advantage of
a convenient interface provided by Google for binary rewriting, which is called
the oat patches. When converting the dex bytecode to native code, the ART
compiler ﬁrst translates the dex bytecode into an intermediate representations
(MIR), and then compiles it into the low-level intermediate representation (LIR).
During the converting stage from MIR to LIR, the compiler records all liter-
als (including code, method, class, and string literals) which contain absolute
addresses and can be modiﬁed later (implemented in InstallLiteralPools()
methods in the codegen util.cc ﬁle [10] from AOSP). And the literal infor-
mation will be written into one special ELF section of the ﬁnal oat ﬁle, which
is called the oat patches section. We leverage the oat patches tool to help us
relocate boot.oat and patch the original ﬁxed absolute addresses. In fact, this
oat patches information is also used by Android to patch the boot.oat when
the system is ﬁrst powered on.
BlenderART ﬁrst randomly picks a free memory region and calculates the
oﬀset (Δ) between the new base address and the original one (B). Algorithm 2
illustrates the procedure to patch the boot.oat ﬁle. The patching algorithm
takes the oat ﬁle and oﬀset number as input, and will go through all patches
and add an oﬀset. The FixupOatHeader function is to relocate the metadata
of the embedded oat header. The FixupELF function is to rewrite the section
header information, dynamic symbol section (dynsym) and the symbol table
section (symtab) information. At last, the patched boot.oat will be loaded into
the memory. Because we already ﬁxup all relocation based on an oﬀset, the load
address should be B + Δ.
Algorithm 2. ART Runtime (boot.oat) Patching Algorithm
1: function PatchOat(oatFile, oﬀset)
2:
3:
4:
5:
6:
7:
8: end function
patchLocation ← GetLocation(patch)
∗patchLocation ← patchLocation + oﬀset
for each patch ∈ oatFile.oatPatches do
end for
FixupOatHeader(oatFile, oﬀset)
FixupELF(oatFile, oﬀset)
472
M. Sun et al.
Fix Class Linker Data Instance. Besides the absolute address in the code
area in the boot.oat ﬁle, some information in the data area of the ART run-
time should be patched too. Class linker (i.e., the ClassLinker class) is a single
global instance maintained by the ART runtime. Since the executable code in
the boot.oat ﬁle has been relocated by our system, several important infor-
mation maintained by it should be ﬁxed too. For instance, it maintains a class
table (the class table ﬁeld), which contains loaded classes information (i.e.,
the mirror::Class class). For each class structure, it contains corresponding
methods in the method tables. There are two types of methods: direct meth-
ods and virtual methods, which are stored in the direct methods table and
virtual methods table respectively. The methods in the method table are in the
mirror::ArtMethod class. There is a pointer sized ﬁeld contains four entry point
addresses. For example, the entry point from quick compiled code ﬁeld of a
framework method points to the actual compiled code address of boot.oat in
the memory. Since boot.oat has been relocated, this pointer should be ﬁxed
to point to the new address. Finally, BlenderART changes the old memory
region of boot.oat to non-executable to ensure data in this ﬁle cannot be exe-
cuted, but can still be accessed by the ART runtime. In theory, we could fully
unmap this memory region. However, we then need to ﬁx all the references to
this memory region in the ART runtime, which is a time-consuming work. As
long as the code area is no-longer executable, it is safe to leave it there since
attackers cannot leverage it to construct ROP gadgets.
Apps with BlenderART should perform all the previ-
Optimization.
ous steps to achieve the ART runtime randomization. However, patching the
boot.oat ﬁle introduces an overhead of around 1.6 s which will be shown in
Sect. 5. To reduce this overhead, we cache the randomized boot.oat so as to
reduce the app’s startup time. We design a patched boot.oat pool which con-
tains a set of oﬄine patched boot.oat ﬁles with diﬀerent random patched oﬀsets.
For each execution, our system picks up a patched boot.oat ﬁle from the pool
and loads it into the memory, without patching it online.
4.4
Implementation Details
We prototype our Blender system based on Android 5.1 Lollipop (the AOSP
tag android-5.1.0 r1) for 32-bit ARM architecture. Since the code base of
the ART runtime is stable after Android 5.0, our implementation is generic for
Android 5.0 and 6.0 versions. The system contains about two thousand lines of
code including C/C++ and Java. For the implementation, we reuse the peer-
reviewed code from AOSP as much as possible. This will ensure the stability and
security of Blender. We use the /dev/random ﬁle as the seed for randomization.
There is no oﬃcial ART support for Android versions less than 5.03. There-
fore, the Dalvik virtual machine runtime cannot be exploited by using the
3 There is an experimental implementation of the ART runtime in Android 4.4 but is
disabled by default.
Blender: Self-randomizing Address Space Layout for Android Apps
473
ret2art attack technique. Although a researcher discovered interpreter exploita-
tion [16] on the conventional JIT based virtual machine, it is still diﬃcult
to initiate attacks on the Dalvik runtime. However, the security issue caused
by the zygote app creation model still exists. To harden the ASLR for old
Android versions (before Android 5.0), we port BlenderLRM to them so as to
self-randomize addresses of system libraries inherited from the zygote process.
Because Blender is a user-level solution and provides self-randomization capa-
bility to the apps using our system, rather than modifying the source code of
the Android framework, app developers could safely deploy our system and their
apps immediately get protected.
5 Evaluation
In this section we evaluate the eﬀectiveness of Blender by measuring the app
memory entropy, and the performance overhead at apps’ startup time, execution,
memory, and battery usage. The device used in the evaluation is a Nexus 5 device
with Quad-core 2.3 GHz CPU, 2 GB memory and 16 GB internal storage. The
test device runs the Google oﬃcial Android ﬁrmware which is Lollipop 5.1 with
the build number LMY47D and the kernel version 3.4.0.
5.1 Eﬀectiveness
The goal of the Blender system is to prevent attackers from predicting address
space layout of apps. To evaluate the eﬀectiveness of Blender, we ﬁrst discuss
from an app’s perspective.
i=1
p(xi) ln p(xi)
To measure the address space layout randomness of shared system libraries,
we use the notion of entropy. Entropy is a metric to represent the uncertainty
of random variables. We apply entropy to measure memory layout randomness,
and the library loading addresses are treated as a random variable. We utilize the
space layout entropy metric from [32] to evaluate the application randomness.
Speciﬁcally, for a shared library or runtime image code m, let Xm be a discrete
random variable with base addresses {x1, x2, . . . , xn} and p(xi) is a probability
of xm = xi. The normalized address space layout entropy can be deﬁned as
H(Xm) = − (cid:2)n
ln n , and 0 ≤ H(Xm) ≤ 1 because of normalization.
App Randomness. Because Blender only randomizes memory of certain
apps with the Blender protection, we evaluate the entropy on one app for mul-
tiple executions. We deﬁne {x1, x2, . . . , xn} as base addresses of the library m,
and n is the number of executions for one app. For instance, suppose n = 10,
we execute the app with Blender ten times, and the base addresses of library