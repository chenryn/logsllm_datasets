**译者：知道创宇404实验室翻译组  
原文链接：**
## 摘要
2021年9月16日，美国网络安全和基础设施安全局(CISA)发布了一个警报，警告APT攻击组织的攻击者正在积极利用一个漏洞，该漏洞是在自助密码管理和单点登录解决方案
ManageEngine ADSelfService Plus 中新发现的。该警告解释说，我们观察到恶意攻击者部署特定的 webshell
和其他技术，以保持受害者环境中的持久性; 然而，在随后的日子里，我们观察到第二个不同的攻击行为，是利用了同一漏洞。
早在9月17日，这位攻击者就利用美国的租赁基础设施扫描了互联网上数百个易受攻击的组织。随后，对漏洞的利用在9月22日开始了，可能持续到了10月初。在此期间，这个攻击者成功地攻击至少9个全球实体，涉及科技、国防、医疗、能源和教育等行业。
经过初步步骤，一个安装了 Godzilla webshell有效载荷被上传到受害者网络。这种操作对所有受害者中都是一致的;
然而，我们也观察到一小部分受到危害的组织随后收到了一个名为 NGLite 的修改版本的新后门。然后，攻击者使用 webshell 或者 NGLite
有效载荷来运行命令，并横向移动到网络上的其他系统，而他们只要网络服务器上下载，就可以提取利益相关的文件。如果攻击者们想攻击一个域控制器，他们就安装了一个新的窃取证书工具，我们称之为
KdcSponge。
KdcSponge和 NGLite 都是按照中文说明开发的，可以在 GitHub
上公开下载。我们认为，攻击者将这些工具结合使用，作为冗余的一种形式，以维护对高利益网络的访问。Godzilla 是一个功能丰富的
webshell，它解析入站 HTTP POST 请求，用私密密钥解密数据，执行解密内容以执行额外的功能，并通过 HTTP
响应返回结果。这使得攻击者可以将可能被标记为恶意的代码与目标系统隔开，直到他们准备好动态执行它。
NGLite是一个“基于区块链技术的匿名跨平台远程控制程序”它利用新型网络(NKN)基础设施进行命令和控制(C2)通信，从理论上讲，这会为用户带来匿名性。需要注意的是，NKN
是一个合法的网络服务，它使用区块链技术来支持分散的对等点网络。使用 NKN 作为
c2通道是非常罕见的。我们已经看到的只有13个样本与分散的对等点网络通信——共9个 NGLite
样本和4个相关的一个合法的开放源码实用程序（Surge），它使用 NKN 用来文件共享。
最后，KdcSponge 是一种新型的证书窃取工具，用于针对域控制器窃取证书。KdcSponge
将自己注入到本地安全认证子系统服务服务器进程(LSASS)中，并将挂接特定的函数来收集用户名和密码，这些用户名和密码是从尝试通过 Kerberos
验证到域的帐户中获得的。恶意代码将盗取的证书写入文件，但依赖于其他功能进行提取。
## 初始访问
从9月17日开始一直到10月初，我们观察到，ManageEngine ADSelfService
Plus服务器被扫描。通过全球遥测，我们认为攻击者仅在美国就瞄准了至少370台Zoho
ManageEngine服务器。鉴于规模，我们评估这些扫描基本上是完全随机的，因为目标范围从教育到国防部实体。
在获得扫描结果后，攻击者于9月22日转变了攻击企图。这些攻击集中于CVE-2021-40539，CVE-2021-40539允许REST
API身份验证绕过，从而在受攻击的设备中执行远程代码。为了实现这一结果，攻击者向REST API LicenseMgr交付了精心编制的POST语句。
虽然我们尚不了解此次活动中被侵害的组织总数，但我们认为，在全球范围内，技术、国防、医疗保健、能源和教育行业至少有九家实体受到了损害。成功利用该漏洞后，攻击者上传了一个有效负载，该负载部署了一个Godzilla
webshell，从而能够额外访问受害者网络。我们观察到美国的以下租用IP地址与受损服务器交互：
24.64.36[.]238  
45.63.62[.]109  
45.76.173[.]103  
45.77.121[.]232  
66.42.98[.]156  
140.82.17[.]161  
149.28.93[.]184  
149.248.11[.]205  
199.188.59[.]192
在部署了webshell之后，我们还发现了在一个受损网络子集中部署的额外工具的使用。具体来说，攻击者部署了一个名为NGLite的自定义开源后门变体和一个我们跟踪的凭证收集工具KdcSponge。下面几节将详细分析这些工具。
## 恶意软件
利用阶段，两个不同的可执行文件被保存到受感染的服务器:`ME_ADManager.exe`和`ME_ADAudit.exe`。`ME_ADManager.exe`文件作为一个dropper木马，不仅保存了一个Godzilla的webshell到系统，而且还安装和运行保存到系统的其他可执行文件，特别是`ME_ADAudit.exe`。`ME_ADAudit.exe`可执行文是基于NGLite，威胁攻击者将其用作在系统上运行命令的有效负载。
### `ME_ADManager.`dropper
初始利用完成后，dropper病毒保存到以下路径:
`c:\Users\[username]\AppData\Roaming\ADManager\ME_ADManager.exe`
对该文件的分析显示，该有效负载的作者在构建样本时没有删除调试符号。因此，在样本中存在以下调试路径，并建议使用用户名pwn创建此有效负载:
`c:\Users\pwn\documents\visual studio
2015\Projects\payloaddll\Release\cmd.pdb`
在执行时，该示例首先创建以下通用互斥锁，这些互斥锁在网上的许多代码示例中都可以找到，这是为了避免运行多个droper案例:
`cplusplus_me`
然后，dropper尝试编写一个硬编码的Godzilla webshell到下列位置，我们将在稍后的报告中提供详细的分析，
    ../webapps/adssp/help/admin-guide/reports.jsp
    c:/ManageEngine/ADSelfService Plus/webapps/adssp/help/admin-guide/reports.jsp
    ../webapps/adssp/selfservice/assets/fonts/lato/lato-regular.jsp
    c:/ManageEngine/ADSelfService Plus/webapps/adssp/selfservice/assets/fonts/lato/lato-regular.jsp
然后，dropper创建文件夹`%APPDATA%\ADManager`，然后创建以下注册表项，以在重启后持续运行，并将自己复制到`%APPDATA%\ADManager\ME_ADManager.exe`，
    Software\Microsoft\Windows\CurrentVersion\Run\ME_ADManager.exe : %APPDATA%\ADManager\ME_ADManager.exe
    Software\Microsoft\Windows\CurrentVersion\Run\ME_ADAudit.exe : %SYSTEM32%\ME_ADAudit.exe
然后，dropper将ADAudit.exe从当前目录复制到以下路径，并使用WinExec运行该文件:
`%SYSTEM32%\ME_ADAudit.exe`
Dropper不会将`ME_ADAudit.exe`文件写入磁盘，这意味着攻击者必须在dropper执行之前将该文件上传到服务器，这可能是cve - 201
-40539漏洞的一部分。在我们对多个事件的分析中，我们发现ME_ADAudit.exe样本保持了一致的SHA256哈希值`805b92787ca7833eef5e61e2df1310e4b6544955e812e60b5f834f904623fd9f`，因此表明攻击者针对多个目标部署了相同的定制版本的NGLite后门。
## Godzilla webshell
如前所述，最初的拖dropper含一个硬编码的Java Server Page (JSP)
webshell。通过对webshell的分析，确定为中文版哥斯拉webshell V3.00+。Godzilla
webshell是由用户BeichenDream开发的，他说他们创建这个webshell是因为当时可用的webshell在红队比赛时经常被安全产品检测到。因此，作者宣称它将通过利用AES对其网络流量加密来避免检测，并且在安全厂商产品保持非常低的静态检测率。
VirusTotal对Godzilla webshell的检测
区域威胁组织入侵时，采用Godzilla
webshell并不奇怪，因为它提供了比相同组织使用的其他webshell(如ChinaChopper)更多的功能和网络逃避。
就功能而言，JSP webshell本身相当简单，并保持了轻量级的内存占用。它的主要功能是解析HTTP
POST，使用秘密密钥解密内容，然后执行有效负载。这使得攻击者可以将可能被标记为恶意的代码隔离在目标系统之外，直到他们准备好动态执行它。
下图显示了默认JSP webshell的初始部分以及解密函数。
默认Godzilla JSP webshell的头部
值得注意的是变量`xc`和`pass`在代码的第一行和第二行。这些是每次操作符生成新的webshell时都会更改的主要组件，这些变量表示在该webshell中用于AES解密的秘密密钥。
当您手动生成webshell时，您需要指定明文传递和密钥。默认情况下，它们是`pass`和`key`。
为了弄清楚这些是如何在webshell本身中呈现的，我们可以看看Godzilla JAR文件。
下面，您可以看到代码在`/shells/cryptions/JavaAES/GenerateShellLoder`函数下替换了其中一个嵌入式webshell模板中的字符串。
Generate.class文件中的GenerateShellLoder函数
因此，我们知道webshell中的`xc`变量将是AES密钥，如模板中所示。
    String xc="{secretKey}"; String pass="{pass}"; String md5=md5(pass+xc)
我们观察到xc值似乎是一个散列，存在`/core/shell/ShellEntity.class`文件下，我们可以看到代码使用MD5散列的前16个字符作为明文密钥。
    public String getSecretKeyX()
    {
    return functions.md5(getSecretKey()).substring(0, 16);
    }
这样，我们就知道`3c6e0b8a9c15224a`的`xc`值是单词key的MD5散列的前16个字符。
鉴于此，`xc`和`pass`变量是两个主要字段，可用于跟踪和尝试跨事件映射活动。在本博客中，我们生成了一个Godzilla
webshell，其中包含用于分析的默认选项；其中，默认选项与攻击中观察到的值之间的唯一区别是`xc`和`pass`值不同。
此webshell的一个重要特征是，作者称它缺乏静态检测，通过避免关键字或安全产品签名可能识别的常见结构，使此文件不太显眼。一种特别有趣的静态规避技术是使用Java三元条件运算符来指示解密。
这里的条件是`m？1:2–m`是传递给该函数的布尔值，如下图所示，如果m为真，则使用第一个表达式常量（`1`）。否则，第二（`2`）项通过。参考Java文档，`1`是加密模式，而`2`是解密模式。
当webshell执行此函数`x`时，它不会设置m的值，因此会强制`m`为False并将其设置为解密。
    response.getWriter（）.write（base64Encode（x（base64Decode（f.toString（）），true））；
为了理解Godzilla的功能，我们可以查看`/shell/payloads/java/JavaShell.class`。该类文件包含提供给操作者的所有函数。下面是`getFile`函数的一个示例。
有效载荷功能：
    getFile
    downloadFile
    getBasicsInfo
    uploadFile
    copyFile
    deleteFile
    newFile
    newDir
    currentDir
    currentUserName