title:On the Practicality of Cryptographically Enforcing Dynamic Access
Control Policies in the Cloud
author:William C. Garrison III and
Adam Shull and
Steven A. Myers and
Adam J. Lee
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
On the Practicality of Cryptographically Enforcing
Dynamic Access Control Policies in the Cloud
William C. Garrison III
University of Pittsburgh
Adam Shull
Indiana University
Steven Myers
Indiana University
Adam J. Lee
University of Pittsburgh
over objects stored on untrusted platforms. Our primary result
is negative: we demonstrate that prohibitive computational
burdens are likely to be incurred when supporting practical,
dynamic workloads.
Abstract—The ability to enforce robust and dynamic access
controls on cloud-hosted data while simultaneously ensuring
conﬁdentiality with respect to the cloud itself is a clear goal
for many users and organizations. To this end, there has been
much cryptographic research proposing the use of (hierarchical)
identity-based encryption, attribute-based encryption, predicate
encryption, functional encryption, and related technologies to
perform robust and private access control on untrusted cloud
providers. However, the vast majority of this work studies static
models in which the access control policies being enforced do not
change over time. This is contrary to the needs of most practical
applications, which leverage dynamic data and/or policies.
In this paper, we show that the cryptographic enforcement of
dynamic access controls on untrusted platforms incurs computa-
tional costs that are likely prohibitive in practice. Speciﬁcally,
we develop lightweight constructions for enforcing role-based
access controls (i.e., RBAC0) over cloud-hosted ﬁles using identity-
based and traditional public-key cryptography. This is done
under a threat model as close as possible to the one assumed
in the cryptographic literature. We prove the correctness of
these constructions, and leverage real-world RBAC datasets and
recent techniques developed by the access control community to
experimentally analyze, via simulation, their associated compu-
tational costs. This analysis shows that supporting revocation,
ﬁle updates, and other state change functionality is likely to
incur prohibitive overheads in even minimally-dynamic, realistic
scenarios. We identify a number of bottlenecks in such systems,
and fruitful areas for future work that will lead to more natural
and efﬁcient constructions for the cryptographic enforcement of
dynamic access controls. Our ﬁndings naturally extend to the use
of more expressive cryptographic primitives (e.g., HIBE or ABE)
and richer access control models (e.g., RBAC1 or ABAC).
I. INTRODUCTION
In recent years, numerous cryptographic schemes have been
developed to support access control on the (untrusted) cloud.
One of the most expressive of these is attribute-based encryption
(ABE) [31], which is a natural ﬁt for enforcing attribute-based
access control (ABAC) policies [40]. However, the practical
implications of using these types of cryptographic schemes to
tackle realistic access control problems are largely unexplored.
In particular, much of the literature concerns static scenarios
in which data and/or access control policies are rarely, if
ever, modiﬁed (e.g., [5], [30], [31], [42], [49], [52], [59]).
Such scenarios are not representative of real-world systems,
and oversimplify issues associated with key management and
revocation that can carry substantial practical overheads. In this
paper, we explore exactly these types of issues in an attempt
to understand the computational overheads of using advanced
cryptographic techniques to enforce dynamic access controls
The push to develop and use cryptography to support adaptive
access control on the cloud is natural. Major cloud providers
such as Google, Microsoft, Apple, and Amazon are providing
both large-scale, industrial services and smaller-scale, consumer
services. Similarly, there are a number of user-focused cloud-
based ﬁle sharing services, such as Dropbox, Box, and Flickr.
However, the near-constant media coverage of data breaches
has raised both consumer and enterprise concerns regarding the
privacy and integrity of cloud-stored data. Among the widely-
publicized stories of external hacking and data disclosure
are releases of private photos [56]. Some are even state-
sponsored attacks against cloud organizations themselves, such
as Operation Aurora, in which Chinese hackers inﬁltrated
providers like Google, Yahoo, and Rackspace [20], [51].
Despite the economic beneﬁts and ease-of-use provided by
outsourcing data management to the cloud, this practice raises
new questions regarding the maintenance and enforcement of
the access controls that users have come to expect from ﬁle
sharing systems.
Although advanced cryptographic primitives seem well-
suited for protecting point states in many access control
paradigms, supporting the transitions between protection states
that are triggered by administrative actions in a dynamic
system requires addressing very subtle issues involving key
management, coordination, and key/policy consistency. While
there has been some work seeking to provide a level of
dynamism for these types of advanced cryptographic primitives,
this work is not without issues. For instance, techniques have
been developed to support key revocation [8] and delegated
re-encryption [32], [58]. Unfortunately, these techniques are not
compatible with hybrid encryption—which is necessary from
an efﬁciency perspective—under reasonable threat models.
In this paper, we attempt to tease out these types of critical
details by exploring the cryptographic enforcement of a widely-
deployed access control model: role-based access control
(speciﬁcally, RBAC0 [61]). In particular, we develop two
constructions for cryptographically enforcing dynamic RBAC0
policies in untrusted cloud environments: one based on standard
public-key cryptographic techniques, and another based on
identity-based encryption/signature (IBE/IBS) techniques [11],
[13], [59]. By studying RBAC0 in the context of these relatively
2375-1207/16 $31.00 © 2016 IEEE
© 2016, William C. Garrison_III. Under license to IEEE.
DOI 10.1109/SP.2016.54
DOI 10.1109/SP.2016.54
819
819
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
efﬁcient cryptographic schemes, we can effectively lower-
bound the costs that would be associated with supporting richer
access controls (e.g., ABAC) by using more advanced—and
more expensive—cryptographic techniques exhibiting similar
administrative and key delegation structures (e.g., ABE).
We use tools from the access control literature [36] to
prove the correctness of our RBAC0 constructions. To quantify
the costs of using these constructions in realistic access
control scenarios, we leverage a stochastic modeling and
simulation-based approach developed to support access control
suitability analysis [26]. Our simulations are driven by real-
world RBAC datasets that allow us to explore—in a variety
of environments where the RBAC0 policy and ﬁles in the
system are subject to dynamic change—the costs associated
with using these constructions. In doing so, we uncover several
design considerations that must be addressed, make explicit
the complexities of managing the transitions that occur as
policies or data are modiﬁed at runtime, and demonstrate
the often excessive overheads of relying solely on advanced
cryptographic techniques for enforcing dynamic access controls.
This provides us with a number of insights toward the
development of more effective cryptographic access controls.
Through our analysis, we make the following contributions:
• We demonstrate that the cryptographic enforcement of role-
based access controls on the cloud incurs overheads that
are likely prohibitive in realistic dynamic workloads. For
instance, we show that removing a single user from a role
in a moderately-sized organization can require hundreds or
thousands of IBE encryptions! Since our constructions are
designed to lower-bound deployment costs (given current
cryptographic techniques), this indicates that cryptographic
access controls are likely to carry prohibitive costs for even
mildly dynamic scenarios.
• Prior work often dismisses the need for an access control
reference monitor when using cryptographically-enforced
access controls (e.g., [5], [30], [31], [52]). We discuss the
necessity of some minimal reference monitor on the cloud
when supporting dynamic, cryptographically-enforced access
controls, and we outline other design considerations that
must be addressed in dynamic environments.
• We develop constructions that use either the IBE/IBS or
public-key cryptographic paradigms to enable dynamic
outsourced RBAC0 access controls. In an effort to lower-
bound deployment costs, our constructions exhibit design
choices that emphasize efﬁciency over the strongest possible
security (e.g., using lazy rather than online re-encryption,
cf. Section IV-C), but are easily extended to support
stronger security guarantees (albeit at additional costs). These
constructions further highlight practical considerations that
are often overlooked in the literature, or that prevent the
application of techniques designed to enhance the dynamism
of advanced cryptographic techniques.
• Having established the infeasibility of enforcing even the
relatively simple RBAC0 in dynamic scenarios, we discuss
the increase in costs that would be associated with more
expressive cryptographically-enforced access control such
as hierarchical RBAC (RBAC1) using HIBE [10], [29], or
attribute-based access control (ABAC) using ABE.
The remainder of this paper is organized as follows. In Sec-
tion II, we discuss relevant related work. Section III documents
our system model and assumptions, and provides background
on RBAC0 and the cryptographic techniques used in this paper.
In Section IV, we describe our IBE/IBS construction in detail,
and overview the key differences between it and our PKI-
based construction. Section V presents theorems stating the
correctness of our constructions, as well as experimental results
showing the overheads incurred by our constructions when
applied to real-world RBAC datasets. In Section VI, we identify
interesting directions for future work informed by our ﬁndings.
Section VII details our conclusions.
II. RELATED WORK
A. Access Control
Access control is one of the most fundamental aspects
of computer security, with instances occurring pervasively
throughout most computer systems: relational databases often
provide built-in access control commands; network administra-
tors implement access controls, e.g., ﬁrewall rules and router
ACLs; operating systems provide access control primitives that
enable users to protect their private ﬁles; and web applications
and other frameworks typically implement purpose-speciﬁc
access controls to control access to the information that
they manage. The literature describes a diversity of access
control systems supporting policies including basic access
control lists [60], cryptographically-enforced capabilities [64],
group- [43], role- [61], and attribute-based [40] controls.
Despite this diversity, a central theme in most access control
work is the reliance on a fully-trusted reference monitor to
check compliance with the policy to be enforced prior to
brokering access to protected resources. This dependency on
a trusted reference monitor is problematic, however, when
resources are stored on (potentially) untrusted infrastructure.
Distributed or decentralized approaches to access control
have also been well studied in the literature and in practice.
Work in the trust management space (e.g., [4], [7], [21],
[45]) allows the speciﬁcation of declarative access control
policies for protecting resources, which are satisﬁed using
digital credentials of various forms. For instance, a research
portal may allow free access to publications, provided that the
requester is a graduate student at an accredited university. This
allows the portal to delegate trust: provided that a requestor
can produce a proof-of-ownership for a “graduate student”
attribute certiﬁcate issued by an accredited university, she
will be permitted access. We note that these approaches need
not rely on heavyweight certiﬁcate infrastructures; recent
work has provided similar functionality using lightweight
cryptographic bearer credentials [6]. Further, widely-deployed
identity management solutions (e.g., OAuth [35]) can also be
viewed as simpliﬁed trust management approaches that ofﬂoad
identity veriﬁcation to a third party, receiving only a “token”
820820
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
attesting to a requestor’s identity. In all cases, however, a trusted
reference monitor is still required to validate that the presented
credentials actually satisfy the policy protecting a resource.
In this paper, by contrast, we investigate the implications of
using cryptography to enforce access controls on cloud-based
storage infrastructure, where the provider is not trusted to view
ﬁle contents.
B. Cryptography
We assume the reader is familiar with basic concepts
from symmetric-key and public-key cryptography, and many
references exist (e.g., [41]) discussing these topics. Starting
with the development of practical identity-based encryption
(IBE) schemes [11], there has been considerable work on the
development of cryptographic systems that directly support
a number of access control functionalities, with examples
including hierarchical IBE [29], [37], attribute-based encryp-
tion [59], and functional encryption [57]. At a high level,
these encryption schemes encrypt data to a policy, so that
only those who have secret keys satisfying the policy can
decrypt. What varies between these types of schemes is the
expressiveness of the policies that are supported. With IBE and
traditional public-key encryption, one can encrypt to a given
target individual, and only that individual can decrypt. With
attribute-based encryption, a ciphertext can be encrypted to a
certain policy, and can be decrypted only by individuals whose
secret keys satisfy that policy. With functional encryption, a
certain function is embedded in the ciphertext, and when one
“decrypts,” one does not retrieve the underlying value, but rather
a function of the encrypted value and the decryptor’s secret
key. One underlying motivation in all of the above work is the
ability to enforce access controls on encrypted data.
Each cryptographic scheme has its own associated costs,
but they can be broadly categorized as follows. Symmetric
cryptography is orders of magnitude faster than traditional
public-key encryption, and traditional public-key encryption is
an order of magnitude faster than pairing-based cryptography,
in which the pairing operation itself typically carries the largest
cost.1 The vast majority of IBE, IBS, HIBE and ABE schemes
are pairing-based cryptographic schemes. IBE schemes use
a small constant number of pairings in either encryption
or decryption. In contrast, ABE schemes use a number of
pairings that is a function of the policy being encoded, and
thus, assuming minimally expressive access policies, have
computational costs substantially greater than IBE.
Much of the work on these advanced cryptographic systems
allows for data to be stored on the cloud, but it does not
address the issue of revocation or dynamic modiﬁcation of
the access control structure being used to store data on
the cloud. This can, of course, be done by downloading
the data, decrypting it, and then re-encrypting under a new
policy, but this is communication intensive, and potentially
computationally intensive too. Further, for large ﬁles, clients
1We will exclude lattice-based systems, due to the difﬁculty in determining
appropriate security parameters. This, amongst other factors, makes such
generic comparisons difﬁcult.
821821
making the changes in the access structure may not be able to
support the entire ﬁle locally (e.g., smartphones). Therefore,
there has been some work done in considering delegated
encryption and revocation in these models (e.g., [8], [32],
[33], [46], [53], [58], [62]).
C. Cryptographic Access Controls
There has been signiﬁcant work on using cryptography as an
access control mechanism, starting with seminal works such as
that by Gudes [34]. This work describes how access controls
can be enforced using cryptography, but does not address many
practical issues such as key distribution and management, policy
updates, and costs. Furthermore, as the work’s motivation is
a local ﬁle system, the access control system must be trusted
with the keys (and trusted to delete them from memory as soon
as possible). Work by Akl and Taylor [1] addresses some of the
key management issues by proposing a key assignment scheme:
a system for deriving keys in a hierarchical access control
policy, rather than requiring users higher in the hierarchy to
store many more keys than those lower in the hierarchy. Again,
this work does not consider key distribution or policy updates.
Later work in key hierarchies by Atallah et al. [3] proposes a
method that allows policy updates, but in the case of revocation,
all descendants of the affected node in the access hierarchy
must be updated, and the cost of such an operation is not
discussed. Continued work in key assignment schemes has
improved upon the efﬁciency of policy updates; see [16] for a
survey of such schemes that discusses tradeoffs such as how
much private vs. public information must be stored and how
much information must be changed for policy updates. Much
of this work focuses on the use of symmetric-key cryptography,
and so its use for the cloud is potentially limited.
De Capitani di Vimercati et al. [18], [19] describe a method
for cryptographic access controls on outsourced data using
double encryption (one layer by the administrator and one by
the service). An extension to this work also enforces write
privileges [17]. However, this solution requires a high degree
of participation by the cloud provider or third party, and the
work does not address the high cost of such operations as
deleting users (which can incur cascading updates). Ibraimi’s
thesis [38] proposes methods for outsourcing data storage using
asymmetric encryption. However, the proposed method for
supporting revocation requires a trusted mediator and keyshare
escrow to verify all reads against a revocation list (and does not
address revoked users reusing cached keyshares). Furthermore,
policy updates require an active entity to re-encrypt all affected
ﬁles under the new policy. Similarly, work by Nali et al. [50]
enforces RBAC using public-key cryptography, but requires a
series of active security mediators.
Crampton has shown that cryptography is sufﬁcient to
enforce RBAC policies [14] and general interval-based access
control policies [15], but revocation and policy updates are not
considered (i.e., the constructions are shown only for static
policies). Ferrara et al. [24] formally deﬁne a cryptographic
game for proving the security of cryptographically-enforced
RBAC systems and prove that such properties can be satisﬁed
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
Organization
Cloud storage
r
o
t
i
n
o
m
e
c
n
e
r
e
f
e
r
U R
P A
Policy
data
i
l
a
m
n
M
i
Update policy
Admin
Users
Write ﬁles
Read ﬁles
Encrypted
ﬁles
Fig. 1: Diagram of a cloud storage system
using an ABE-based construction. This construction has since
been extended to provide policy privacy and support writes
with less trust on the provider [23]. The latter is accomplished
by eliminating the reference monitor that checks if a write is
allowed and instead accepting each write as a new version;
versions must then be veriﬁed when downloaded for reading
to determine the most recent permitted version (the provider
is trusted to provide an accurate version ordering). However,
these works do not consider the costs and other practical
considerations for using such a system in practice (e.g., lazy
vs. active re-encryption, hybrid encryption). In this paper, we
consider exactly these types of issues.
Pirretti et al. [55] have shown that distributed ﬁle systems and
social networks can use ABE-based constructions to perform
practical access control, but they leave dynamic revocation as
future work.
III. BACKGROUND AND ASSUMPTIONS
Our goal is to understand the practical costs of leveraging
public-key cryptographic primitives to implement outsourced
dynamic access controls in the cloud. In this section, we (i)
deﬁne the system and threat models in which we consider
this problem, (ii) specify the access control model that we
propose to enforce, and (iii) deﬁne the classes of cryptographic
primitives that will be used in our constructions.
A. System and Threat Models
The environment that we consider—which is based on the
untrusted cloud provider typically assumed in the cryptographic
literature—is depicted in Fig. 1. The system consists of
three main (classes of) entities: access control administrators,
users/clients, and cloud storage providers. In particular, we
consider a model
in which a single storage provider is
contracted by an organization. This is analogous to companies
contracting with providers like Microsoft (via OneDrive for
Business) or Dropbox (via Dropbox Business) to outsource
enterprise storage, or individuals making use of cloud platforms
like Apple iCloud or Google Drive for hosting and sharing
personal media. Further, this simpliﬁes the overall system
design by eliminating the need for a secondary mechanism
that synchronizes cryptographic material and other metadata.
Assumptions. The cloud storage provider is contracted to
manage the storage needs of a (perhaps virtual) organization.
This includes storing the ﬁles hosted in the cloud, as well
as any metadata associated with the access control policies
protecting these ﬁles. We assume that the cloud is not trusted
to view the contents of the ﬁles that it stores. However, it is
trusted to ensure the availability of these ﬁles, and to ensure
that only authorized individuals update these ﬁles. File access
is assumed to occur directly though the cloud provider’s API,
with read access permissions being enforced cryptographically
on the client side, and write access permissions being enforced
by a minimal reference monitor on the cloud provider that
validates client signatures that prove write privileges prior to
ﬁle updates.2 In short, the storage provider ensures ﬁle system
consistency by preventing unauthorized updates, yet cannot
read or make legitimate modiﬁcations to ﬁles or metadata.
Access control administrators are tasked with managing the
protection state of the storage system. That is, they control the
assignment of access permissions, which entails the creation,
revocation, and distribution of cryptographic keys used to
protect ﬁles in a role-based manner. Metadata to facilitate key
distribution is stored in a cryptographically-protected manner
on the cloud provider. Users may download any ﬁle stored
on the storage provider, but may decrypt, read, and (possibly)
modify only the ﬁles for which they have been issued the
appropriate (role-based) keys. All ﬁles are encrypted and signed
prior to being uploaded to the cloud storage provider. Finally,
we assume that all parties can communicate via pairwise-
authenticated and private channels (e.g., SSL/TLS tunnels).
Implications. To simplify presentation and analysis, the
above threat model does leave some degree of trust in the
cloud provider (albeit far less than is routinely placed in
these providers today). In particular, the cloud provider is
trusted to verify digital signatures prior to authorizing write
operations. This could be avoided by using a versioning ﬁle
system, allowing all writes, and relying on clients to ﬁnd
the most recent version of a ﬁle that has a valid signature
prior to accessing that ﬁle. Similarly, it is possible—although
prohibited by our threat model—for a malicious provider
to “roll back” the ﬁlesystem to a prior state by replacing
current ﬁles and metadata with previous versions. We note that
it is possible to detect (e.g., via comparison with off-cloud
metadata) or prevent (e.g., by splitting metadata and ﬁle storage
across multiple providers) this issue, and thus this prohibition
could be dropped. Further, we do not consider the denial-of-
service threat of a user overwhelming the storage provider with
spurious ﬁle downloads; in practice, this is easily addressed by
using unguessable (perhaps cryptographically-produced) ﬁle
names, or lightweight authorization tokens. However, all of
these types of relaxations come with additional complexity. As
we will demonstrate, the costs associated with cryptographic
enforcement of dynamic access controls are likely prohibitive,
even under the above threat model. This, effectively, lower-
2Note that this eliminates the possibility of a purely symmetric-key approach:
the ability to validate, e.g., symmetric-key MACs would also allow the cloud
provider to modify these MACs.
822822
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
bounds the costs entailed by weaker threat models (which
require more complex mechanisms). For the bulk of this paper,
we will therefore focus on the above threat model, leaving
discussion of further relaxations to Section VI.
B. Access Control Model
In this paper, we focus on cryptographic enforcement of a
role-based access control (RBAC) system, given the prevalence
of this type of access control system in both the research
literature and commercial systems. RBAC systems simplify
permission management through the use of abstraction: roles
describe the access permissions associated with a particular
(class of) job function, users are assigned to the set of
roles entailed by their job responsibilities, and a user is
granted access to an object if they are assigned to a role
that is permitted to access that object. In this paper, we
will investigate cryptographic implementations of the simplest
RBAC formulation: RBAC0 [61]. More formally, the state of
an RBAC0 system can be described as follows:
• U is a set of users,
• R is a set of roles,
• P is a set of permissions (e.g., (cid:2)f ile, op(cid:3)),
• P A ⊆ R × P is the permission assignment relation, and
• U R ⊆ U × R is the user assignment relation.
The authorization predicate auth : U × P → B determines
whether user u can use permission p and is deﬁned as follows:
auth(u, p) = ∃r : [(u, r) ∈ U R] ∧ [(r, p) ∈ P A]
Many variants of RBAC exist, but we focus on the use of
RBAC0 as it is conceptually the simplest of these variants
yet still provides adequate expressive power to be interesting
for realistic applications. Generalizing this model to richer
RBAC variants (e.g., RBAC1) and attribute-based access control
(ABAC) is discussed in Section VI-C.
C. Cryptographic Primitives
Both of our constructions make use of symmetric-key
authenticated encryption (GenSym, EncSym, DecSym). Our
PKI scheme uses public-key encryption and digital signatures
(GenPub, EncPub, DecPub, GenSig, SignSig, VerSig).
While many attribute-based encryption (ABE) schemes are
being developed to support policy constructions of varying
expressivity, RBAC0 does not require this level of sophistication.
To this end, we instead use identity-based encryption (IBE):
• MSKGenIBE(1n): Takes security parameter n; generates
public parameters (which are implicit parameters to every
other IBE algorithm) and master secret key msk.
• KeyGenIBE(ID, msk): Generates a decryption key kID
for identity ID.
• EncIBE
ID (M ): Encrypts message M under identity ID.
• DecIBE
kID (C): Decrypts ciphertext C using key kID; correct-
ness requires that ∀ ID if kID = KeyGenIBE(ID) then
∀ M, DecIBE
We also use identity-based signature (IBS) schemes:
ID (M )) = M.
kID (EncIBE
• MSKGenIBS(1n): Takes security parameter n; generates
public parameters (which are implicit parameters to every
other IBS algorithm) and master secret key msk.
• KeyGenIBS(ID, msk): Generates a signing key sID for
identity ID.
• SignIBS
ID,sID (M ): Generates a signature sig on message M
ID (M, SignIBS
ID,sID (M )) = 1.
ID (M, sig): Veriﬁes whether sig is a valid signature
if sID is a valid signing key for ID.
• VerIBS
on message M for identity ID; requires that ∀ ID
if sID = KeyGenIBS(ID) then
∀ M, VerIBS
IBE (resp. IBS) schemes build upon traditional public-key
schemes by allowing any desired string to act as one’s en-
cryption (resp. veriﬁcation) key. This requires the introduction
of a third party who can generate the decryption and signing
keys corresponding to these identity strings. This third party,
who holds the master keys, is able to produce decryption
or signing keys for anyone, and thus the system has inbuilt
escrow. In our use of these systems, the RBAC administrator(s)
will act as this third party. Since administrators traditionally
have the power to access/assign arbitrary permissions, this
escrow is not a weakness. In practice, if this is still a concern,