# On the Practicality of Cryptographically Enforcing Dynamic Access Control Policies in the Cloud

**Authors:**
- William C. Garrison III, University of Pittsburgh
- Adam Shull, Indiana University
- Steven A. Myers, Indiana University
- Adam J. Lee, University of Pittsburgh

**Conference:**
2016 IEEE Symposium on Security and Privacy

## Abstract
The ability to enforce robust and dynamic access controls on cloud-hosted data while ensuring confidentiality with respect to the cloud provider is a critical goal for many users and organizations. Recent cryptographic research has proposed various techniques, such as (hierarchical) identity-based encryption, attribute-based encryption, predicate encryption, and functional encryption, to achieve this. However, most of this work focuses on static models where access control policies do not change over time, which does not align with the needs of practical applications that often involve dynamic data and policies.

In this paper, we investigate the practicality of cryptographically enforcing dynamic access control policies on untrusted cloud platforms. We develop lightweight constructions for enforcing role-based access controls (RBAC0) using both identity-based and traditional public-key cryptography. These constructions are analyzed under a threat model closely aligned with those assumed in the cryptographic literature. We prove the correctness of these constructions and use real-world RBAC datasets and recent techniques from the access control community to experimentally analyze their computational costs via simulation. Our analysis reveals that supporting revocation, file updates, and other state changes incurs prohibitive overheads even in minimally dynamic, realistic scenarios. We identify key bottlenecks and suggest areas for future work to improve the efficiency and naturalness of cryptographic enforcement of dynamic access controls. Our findings extend to more expressive cryptographic primitives (e.g., HIBE or ABE) and richer access control models (e.g., RBAC1 or ABAC).

## 1. Introduction
Recent years have seen the development of numerous cryptographic schemes to support access control on untrusted cloud platforms. Attribute-based encryption (ABE) is one of the most expressive of these, naturally fitting for enforcing attribute-based access control (ABAC) policies. However, the practical implications of using such cryptographic schemes for realistic access control problems remain largely unexplored. Much of the existing literature focuses on static scenarios where data and access control policies are rarely modified, which oversimplifies issues related to key management and revocation. This paper aims to address these gaps by exploring the computational overheads of using advanced cryptographic techniques to enforce dynamic access controls.

The push to use cryptography for adaptive access control on the cloud is driven by the increasing reliance on cloud services by major providers like Google, Microsoft, Apple, and Amazon. Despite the economic benefits and ease-of-use, concerns about the privacy and integrity of cloud-stored data have been heightened by frequent reports of data breaches. Advanced cryptographic primitives seem well-suited for protecting point states in many access control paradigms, but supporting the transitions between protection states in a dynamic system requires addressing subtle issues involving key management, coordination, and key/policy consistency.

In this paper, we explore the cryptographic enforcement of a widely-deployed access control model: role-based access control (RBAC0). We develop two constructions for enforcing dynamic RBAC0 policies in untrusted cloud environments: one based on standard public-key cryptographic techniques and another based on identity-based encryption/signature (IBE/IBS) techniques. By studying RBAC0 in the context of these relatively efficient cryptographic schemes, we can effectively lower-bound the costs associated with supporting richer access controls using more advanced—and more expensive—cryptographic techniques.

We use tools from the access control literature to prove the correctness of our RBAC0 constructions and leverage a stochastic modeling and simulation-based approach to quantify the costs in realistic access control scenarios. Our simulations, driven by real-world RBAC datasets, uncover several design considerations and highlight the complexities of managing policy and data modifications at runtime. We demonstrate the often excessive overheads of relying solely on advanced cryptographic techniques for enforcing dynamic access controls, providing insights toward the development of more effective cryptographic access controls.

Our contributions include:
- Demonstrating that the cryptographic enforcement of role-based access controls on the cloud incurs overheads likely prohibitive in realistic dynamic workloads.
- Discussing the necessity of a minimal reference monitor on the cloud when supporting dynamic, cryptographically-enforced access controls.
- Developing constructions that use either IBE/IBS or public-key cryptographic paradigms to enable dynamic outsourced RBAC0 access controls, emphasizing efficiency over the strongest possible security.
- Highlighting the increase in costs associated with more expressive cryptographically-enforced access controls, such as hierarchical RBAC (RBAC1) using HIBE or attribute-based access control (ABAC) using ABE.

## 2. Related Work
### 2.1 Access Control
Access control is a fundamental aspect of computer security, implemented in various forms across different systems. The literature describes a diversity of access control systems, including basic access control lists, cryptographically-enforced capabilities, group-based, role-based, and attribute-based controls. Most access control work relies on a fully-trusted reference monitor to check compliance with the policy before granting access to protected resources. This dependency is problematic when resources are stored on potentially untrusted infrastructure.

Distributed or decentralized approaches to access control have also been studied, allowing the specification of declarative access control policies and delegating trust. Examples include trust management systems and widely-deployed identity management solutions like OAuth. However, a trusted reference monitor is still required to validate that presented credentials satisfy the policy protecting a resource.

### 2.2 Cryptography
We assume the reader is familiar with basic concepts from symmetric-key and public-key cryptography. Recent developments in identity-based encryption (IBE), hierarchical IBE, attribute-based encryption (ABE), and functional encryption (FE) have enabled the direct support of access control functionalities. These schemes encrypt data to a policy, allowing only those with secret keys satisfying the policy to decrypt. The expressiveness of the policies varies, with IBE and traditional public-key encryption encrypting to a specific individual, ABE encrypting to a more complex policy, and FE embedding a function in the ciphertext.

Each cryptographic scheme has its own associated costs, with symmetric cryptography being the fastest, followed by traditional public-key encryption, and then pairing-based cryptography. Most IBE, IBS, HIBE, and ABE schemes are pairing-based, with IBE using a small constant number of pairings and ABE using a number of pairings that depends on the policy, leading to higher computational costs.

Much of the work on these advanced cryptographic systems allows for data to be stored on the cloud but does not address revocation or dynamic modification of the access control structure. Solutions often involve downloading, decrypting, and re-encrypting data, which is communication and computationally intensive. Some work has considered delegated encryption and revocation, but practical issues remain.

### 2.3 Cryptographic Access Controls
Significant work has been done on using cryptography as an access control mechanism, starting with seminal works by Gudes and Akl and Taylor. These works describe how access controls can be enforced using cryptography but do not address practical issues such as key distribution and management, policy updates, and costs. Later work in key hierarchies by Atallah et al. and others has improved the efficiency of policy updates, but the cost of operations like revocation is not fully addressed.

Other methods, such as double encryption and asymmetric encryption, have been proposed for cryptographic access controls on outsourced data, but they require high participation from the cloud provider or third parties and do not address the high cost of operations like deleting users. Crampton has shown that cryptography is sufficient to enforce RBAC policies, but revocation and policy updates are not considered. Ferrara et al. formally define a cryptographic game for proving the security of cryptographically-enforced RBAC systems, but practical considerations are not fully explored.

## 3. Background and Assumptions
Our goal is to understand the practical costs of leveraging public-key cryptographic primitives to implement outsourced dynamic access controls in the cloud. In this section, we define the system and threat models, specify the access control model, and define the classes of cryptographic primitives used in our constructions.

### 3.1 System and Threat Models
The environment we consider is based on an untrusted cloud provider, as typically assumed in the cryptographic literature. The system consists of three main entities: access control administrators, users/clients, and cloud storage providers. We consider a model where a single storage provider is contracted by an organization, similar to companies contracting with providers like Microsoft (OneDrive for Business) or Dropbox (Dropbox Business) for enterprise storage.

**Assumptions:**
- The cloud storage provider is contracted to manage the storage needs of an organization, storing files and associated metadata.
- The cloud is not trusted to view the contents of the files it stores but is trusted to ensure availability and prevent unauthorized updates.
- File access occurs directly through the cloud provider's API, with read access permissions enforced cryptographically on the client side and write access permissions enforced by a minimal reference monitor on the cloud provider.
- All parties can communicate via pairwise-authenticated and private channels (e.g., SSL/TLS tunnels).

**Implications:**
- The threat model leaves some degree of trust in the cloud provider, particularly in verifying digital signatures for write operations.
- Relaxations, such as using a versioning file system or splitting metadata and file storage across multiple providers, could be considered but would add complexity.
- The costs associated with cryptographic enforcement of dynamic access controls are likely prohibitive even under the above threat model, effectively lower-bounding the costs of weaker threat models.

### 3.2 Access Control Model
We focus on the cryptographic enforcement of a role-based access control (RBAC) system, specifically RBAC0, due to its prevalence in both research and commercial systems. RBAC systems simplify permission management through abstraction, with roles describing access permissions, users assigned to roles, and access granted based on role assignments.

Formally, the state of an RBAC0 system is defined as follows:
- \( U \) is a set of users,
- \( R \) is a set of roles,
- \( P \) is a set of permissions (e.g., \( (file, op) \)),
- \( PA \subseteq R \times P \) is the permission assignment relation, and
- \( UR \subseteq U \times R \) is the user assignment relation.

The authorization predicate \( auth : U \times P \rightarrow B \) determines whether a user \( u \) can use permission \( p \):
\[ auth(u, p) = \exists r : [(u, r) \in UR] \land [(r, p) \in PA] \]

### 3.3 Cryptographic Primitives
Both of our constructions use symmetric-key authenticated encryption (GenSym, EncSym, DecSym). Our PKI scheme uses public-key encryption and digital signatures (GenPub, EncPub, DecPub, GenSig, SignSig, VerSig). For RBAC0, we use identity-based encryption (IBE) and identity-based signature (IBS) schemes:

- **IBE:**
  - \( MSKGenIBE(1^n) \): Generates public parameters and master secret key \( msk \).
  - \( KeyGenIBE(ID, msk) \): Generates a decryption key \( k_{ID} \) for identity \( ID \).
  - \( EncIBE_{ID}(M) \): Encrypts message \( M \) under identity \( ID \).
  - \( DecIBE_{k_{ID}}(C) \): Decrypts ciphertext \( C \) using key \( k_{ID} \).

- **IBS:**
  - \( MSKGenIBS(1^n) \): Generates public parameters and master secret key \( msk \).
  - \( KeyGenIBS(ID, msk) \): Generates a signing key \( s_{ID} \) for identity \( ID \).
  - \( SignIBS_{ID,s_{ID}}(M) \): Generates a signature \( sig \) on message \( M \).
  - \( VerIBS_{ID}(M, sig) \): Verifies whether \( sig \) is a valid signature for message \( M \) for identity \( ID \).

IBE and IBS schemes build upon traditional public-key schemes by allowing any string to act as an encryption or verification key, requiring a third party to generate the corresponding decryption and signing keys. In our use, the RBAC administrator(s) will act as this third party.

## 4. Constructions
### 4.1 IBE/IBS Construction
We detail our construction for enforcing dynamic RBAC0 policies using identity-based encryption and signature schemes. This construction is designed to be lightweight and efficient, with a focus on minimizing computational overhead.

### 4.2 Public-Key Cryptography Construction
We also present a construction using traditional public-key cryptography. This construction is compared with the IBE/IBS construction to provide a comprehensive understanding of the trade-offs between the two approaches.

## 5. Correctness and Experimental Analysis
We prove the correctness of our constructions and use real-world RBAC datasets and recent techniques from the access control community to experimentally analyze their computational costs via simulation. Our analysis shows that supporting revocation, file updates, and other state changes incurs prohibitive overheads even in minimally dynamic, realistic scenarios. We identify key bottlenecks and suggest areas for future work to improve the efficiency and naturalness of cryptographic enforcement of dynamic access controls.

## 6. Future Work
Based on our findings, we identify several directions for future work, including:
- Improving the efficiency of key management and revocation in dynamic access control systems.
- Exploring hybrid encryption and other techniques to reduce computational overhead.
- Extending our constructions to support richer access control models and more expressive cryptographic primitives.

## 7. Conclusion
In conclusion, our study demonstrates that the cryptographic enforcement of dynamic access control policies on untrusted cloud platforms incurs significant computational overheads, making it impractical for realistic workloads. We identify key challenges and suggest areas for future research to address these issues and develop more efficient and practical solutions.