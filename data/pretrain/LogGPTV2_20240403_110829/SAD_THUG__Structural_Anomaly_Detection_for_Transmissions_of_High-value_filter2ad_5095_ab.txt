tions exist, e.g. quantization tables must occur before the
encoded image data that refers to them, the JPEG stan-
dard is generally permissive with respect to the order of
segments.
3.2 PNG File Structure
The Portable Network Graphics (PNG) standard was
written partly due to the realization that
the earlier
Graphics Interchange Format (GIF) standard relied on
a patented compression algorithm. It provides lossless
compression for bitmap images with a 24 bit color space
and optional alpha channel. PNG ﬁles start with a ﬁxed
header followed by a variable number of segments and
end with an “IEND” segment. Each segment starts with
a four byte payload length ﬁeld followed by four ASCII
letters indicating its type, the optional payload and ﬁnally
a checksum. The case of each letter in the type identiﬁer
indicates some properties of the segment, e.g. an upper
case ﬁrst letter indicates that the segment is “critical” and
the decoder must be able to interpret it. Technically, the
standard only mandates that the ﬁle header is followed
by an “IHDR”, which has a ﬁxed structure and indicates
the dimensions and other basic properties of the image,
and the closing “IEND” segment.
3.3 Structural Embedding Methods
In this section, we brieﬂy describe the basic methods for
hiding data exploiting the structure of container ﬁle for-
mats. As we will see below, the methods actively used
by current malware are variations of these approaches.
Figure 2 shows a generic structured container ﬁle format
without hidden data as well as with data embedded using
the three methods described below.
Append This approach simply appends the stegano-
graphic payload at the end of the cover ﬁle. Thus, the
structure of the cover ﬁle remains intact but it is followed
by additional data.
Byte Stufﬁng File containers often allow the length of
a segment to be speciﬁed even if it is already implied by
the segment’s type or header. While the resulting ﬁles are
not strictly standard-compliant, most parsers only read
the expected data from the segment and ignore the addi-
tional bytes that follow. Therefore, attackers may expect
that their ﬁle is accepted as legitimate by most decoders.
Segment Injection Finally, container ﬁle formats like
JPEG and PNG permit the addition of segments that are
not used in the decoding process. For instance, comment
segments allow storing data for informational purposes,
e.g. to indicate which program was used to modify the
ﬁle, but have no inﬂuence on the decoded data. Hence,
attackers can add such segments without risk of losing
compatibility and with little risk of discovery.
3.4 Structural Embedding Methods Used
by Malware
In this section, we brieﬂy introduce the structural em-
bedding methods used by eleven live malware families,
grouped by the ﬁle format they exploit. For reference, we
included their basic properties on the left half of table 1
in section 6.
3.4.1
JPEG-based Methods
Cerber The Cerber malware [5] transfers a malware bi-
nary by appending it to a JPEG ﬁle. Before appending
the ﬁle, it is encrypted by simply XORing the binary with
a single constant byte.
DuQu, DuQu 2.0 The DuQu malware [15, 14] exe-
cutable contains a simple JPEG ﬁle. To exﬁltrate screen-
shots and process lists gathered from the infected system,
it bzips and encrypts the data using the AES cipher. The
encrypted data is then appended to the JPEG ﬁle and sent
to the C&C server.
Hammertoss [23] uses the append method to deliver
conﬁgurations and commands to infected systems. Here,
the attackers use a JPEG ﬁle of their liking and then ap-
pend the RC4-encrypted message to the end of that ﬁle.
1150    27th USENIX Security Symposium
USENIX Association
(a) Without embedding
(b) Append
(c) Byte Stufﬁng
(d) Segment Injection
Figure 2: Examples for a structured container ﬁle without and with data embedded using different methods.
Microcin The Microcin malware [16] retrieves JPEG
ﬁles that contain additional executable modules. While
it uses the append paradigm, it ﬁrst adds the sequence
ABCD followed by a small header and ﬁnally the en-
crypted payload.
SyncCrypt Once the SyncCrypt ransomware’s [6] ini-
tial infection is successful, it downloads a JPEG ﬁle.
From the JPEG ﬁle, it extracts a ZIP ﬁle that, along with
an HTML and PNG image ﬁle, contains the malware’s
executable. The ﬁle is hidden simply by appending it to
a given cover ﬁle.
Tropic Trooper The Tropic Tropper malware [8] uses
the append approach in conjunction with a JPEG ﬁle to
deliver a malware binary to an infected system.
Zberp The Zberp malware is a hybrid built from the Car-
berp and ZeusVM banking trojans [2]. It uses ZeusVM’s
method described to transfer conﬁgurations, which we
describe below.
ZeusVM The ZeusVM banking trojan [51] uses a vari-
ation of the segment injection approach to hide the con-
ﬁguration and web-inject data provided to the infected
systems. It injects a comment segment into a JPEG ﬁle
but sets the length header ﬁeld for that segment to 16,144
regardless of the length of the actual payload.
3.4.2 PNG-based Methods
Brazilian EK An unnamed Brazilian exploit kit [37]
uses a simple yet effective method to deliver its payload
to the infected users. It appends an XOR-encrypted mal-
ware executable to an otherwise inconspicuous PNG ﬁle.
CryLocker The CryLocker ransomware [34] uses a
variation of the byte stufﬁng method.
It creates a ﬁle
that consists of a PNG ﬁle header and the mandatory
IHDR segment only. However, it injects information on
the compromised system into the IHDR segment. While
the resulting ﬁle is not compliant with the PNG stan-
dard, CryLocker successfully used the imgur.com pic-
ture sharing platform for sending information to its cre-
ators.
DNSChanger The DNSChanger exploit kit [3] hides ad-
ditional modules used to attack home routers in a com-
ment segment injected into a PNG cover ﬁle.
3.4.3 Discussion
While most malware uses variations of the append
paradigm, we have seen a diverse set of approaches for
structurally hiding data in image ﬁles. In comparison to
image data-based approaches, these methods can be im-
plemented straightforwardly. However, there is a more
important while less obvious property of these methods
that makes them even more attractive. Image data-based
methods can only embed a limited number of bits be-
fore their manipulation becomes obvious and even when
that is acceptable, the total size of the image poses an in-
surmountable limit for them. Structural embeddings on
the other hand generally not only do not affect the ren-
dered image but also allow the transfer of messages of
arbitrary sizes. Even where some limits apply, e.g. the
maximum segment size when injecting a segment like
DNSChanger, this can easily be overcome by distributing
the message over several segments. Thus, in principle,
structural embedding methods could be used to exﬁltrate
terabytes of data in a single ﬁle transfer.
4 Proposed Embedding Methods
In this section, we propose a small set of new embed-
ding methods that exploit the ﬁle structure of JPEG or
PNG ﬁles. We used the identify command from the
ImageMagick [29] suite to establish the fact that only the
pHYs Byte Stufﬁng method triggers a warning during the
decoding. Using a regular image viewer, we also veriﬁed
that none of these methods caused any visual changes to
the encoded images.
JPEG-based Methods
4.1
APP0 Byte Stufﬁng For this method, we exploit the
fact that the structure of the mandatory APP0: JFIF seg-
ment in JFIF ﬁles is well-deﬁned. Since the segment’s
length is nevertheless indicated by a length ﬁeld, we can
USENIX Association
27th USENIX Security Symposium    1151
File HeaderMeta-DataDecoder InfoFile FooterFile HeaderMeta-DataDecoder InfoFile FooterAppended DataFile HeaderMeta-DataDecoder InfoFile FooterStuﬀed DataFile HeaderMeta-DataDecoder InfoFile FooterCommentInjected Datasimply append data after the original payload of the seg-
ment and then adjust the length ﬁeld accordingly.
5.1 File Decomposition
APP1: Comment Injection APP markers are de-
signed to be used for application speciﬁc data. Hence,
they start with a null-terminated ASCII string that indi-
cates the nature of the data in the segment and parsers are
supposed to ignore data they do not understand. Here, we
simply chose the APP1 marker with identiﬁer Comment
because it should cause the least suspicion.
4.2 PNG-based Methods
pHYs Byte Stufﬁng The PNG standard contains a
number of optional segments that usually have no effect
on the decoded image. From these segments, we arbi-
trarily selected the pHYs segment, which indicates the
physical scale of the image. Since it has a ﬁxed struc-
ture, we can apply the byte stufﬁng paradigm and simply
add additional data to an existing pHYs segment or inject
a stuffed segment when the cover ﬁle does not contain a
pHYs segment yet.
aaAa Injection The PNG standard uses a four ASCII
letter code to determine the type of a segment and several
other of its properties. A code starting with two lower
case letters is designated as ancillary, non-publicly reg-
istered. The third letter is supposed to always be upper
case and by using a lower case forth letter, we indicate
that the segment may be copied by a decoder that does
not recognize it. Besides these restrictions, we should
only make sure that our new segment type is not used by
any widely used application. For simplicity, we simply
chose aaAa, which satisﬁes all of these criteria.
5 The SAD THUG Approach
Our approach consists of two main phases, a training
phase for building a formal model and a classiﬁcation
phase to check whether ﬁles correspond to that model.
Since this model is based on empirical data, it represents
how a given standard is implemented rather than how it
is speciﬁed.
To build our model or to classify ﬁles against it, we
ﬁrst decompose each given ﬁle into a sequence of sym-
bols describing the ﬁle’s segments. This process is
sketched in section 5.1. We then describe how we model
the knowledge obtained during the training phase, which
is described in section 5.3. Finally, we describe how we
use the trained model to determine whether a given ﬁle
is anomalous with respect to our training data set or not.
For both training and detection, we ﬁrst decompose each
given ﬁle into a sequence s = s0, ...,sn−1 of segments.
Generally, such a sequence can be obtained trivially and
at negligible cost by sequentially parsing the ﬁle. Given
a ﬁle type T , ST refers to the set of all segments for that
type. Correspondingly, the alphabet ΣT includes all seg-
ment types that occur in ﬁles of that type. We use (cid:96)(si)
to refer to the length of segment si.
While the length of a segment is clearly deﬁned, i.e.
the count of bytes in the ﬁle until either the next seg-
ment or the end of the ﬁle is encountered, there is some
ambiguity with respect to the type of a segment. Most
segments start with a header or byte sequence that indi-
cates their type. Often, their payload starts with another
header that is needed to correctly interpret the segment’s
payload. Although the segment type is deﬁned by the
outer header, the inner header may have signiﬁcant im-
pact on how the segment is interpreted. Thus, we suggest
identifying subtypes based on these inner headers where
appropriate. These subtypes will be treated as fully sep-
arate types in all respects.
For instance, in section 3.1, we introduced the JPEG
ﬁle format’s APP segments. They use the same segment
type indicator but are supposed to start with a string indi-
cating the software using the given segment, i.e. the pur-
pose of a segment or even whether it should be ignored
completely by most decoders can only be determined by
interpreting this inner header. Hence, segments with dif-
ferent inner headers are written and read for different
purposes and should thus be assigned different subtypes.
Our prototype parses PNG or JPEG ﬁles. For both
ﬁle types, the length of a segment corresponds to the
length of the encoded segment in a given ﬁle, as ex-
plained above. When data is encountered following a
valid segment that cannot be decoded, it is stored as a
residual data segment encompassing all bytes up to the
end of the ﬁle. To determine the type of a segment in
a PNG ﬁle, our parser simply uses the segment names
described in section 3.2. However, when parsing JPEG
ﬁles, it introduces subtypes for various segment types as
illustrated for APP segments above.
Figure 3 a) shows a simpliﬁed decomposed Exif ﬁle.
In the ﬁgure, each segment corresponds to a box where a
smaller grey number on the bottom right of each box in-
dicates the length of the respective segment in the parsed
ﬁle. It starts with a start-of-image segment on the left,
followed by an APP1 marker and two quantization ta-
bles. They are followed by a large scan segment, which
contains the encoded image data. The ﬁle ends with an
end-of-image marker, as indicated on the right hand side
of ﬁg. 3 a).
1152    27th USENIX Security Symposium
USENIX Association
(a) A simpliﬁed, decomposed Exif ﬁle
(b) Automaton after learning a simpliﬁed JFIF ﬁle
(c) The automaton from b) after learning a simpliﬁed Exif ﬁle
Figure 3: Simpliﬁed data structures used by SAD THUG.
5.2 Model
For each given ﬁle, we want to determine whether its
structure is reasonably close to the structure of benign
ﬁles observed during a training phase. We character-
ize the entirety of benign ﬁle structures as a formal lan-
guage. Thus, each decomposed image corresponds to a
sequence of symbols and our core problem is to deter-
mine whether a given sequence is a word in that lan-
guage. To achieve this, during the training phase we
build a discrete ﬁnite automaton that approximates this
language based on the training samples. In the classiﬁ-
cation phase, we check whether a given decomposed ﬁle
corresponds to a word in the language described by that
automaton.
More formally, for each ﬁle type T we build a directed
graph GT = (V,v0,ΣT ,E,F,γ) with a set of vertices V , a
designated vertex v0, corresponding to the head of a ﬁle,
the alphabet of segment types ΣT for the given ﬁle type,
directed edges E between elements of V and a set of ver-
tices F corresponding to the last segments in the training
ﬁles. Additionally, γ maps an edge to its annotations.
In our automaton, an edge v → v(cid:48) ∈ E indicates that
in the training data set, two segments corresponding to v
and v(cid:48), were observed at least once in that order. When
the segment corresponding to v(cid:48) has a ﬁxed length, we
use the annotations to store how often this transition was
observed during training. For variable length segments
however, we store all observed lengths. This allows us
to derive a proﬁle for the lengths expected in the context
deﬁned by the given edge. In the classiﬁcation phase, we
use these annotations to enforce additional constraints on
the inspected ﬁles.
5.3 Training Phase
To train our classiﬁer, we build the model described
in section 5.2 that reﬂects the segments observed in the
training set, including their observed order and length.
Figure 4 shows the algorithm for building the respec-
tive automaton. It starts with a set of decomposed train-
ing ﬁles A and initializes an empty automaton GT =
Require: A {Set of decomposed training ﬁles}
σ : ST → V(cid:48) {Returns vertex corresponding to given segment’s type}
V ← {v0} {Vertices}