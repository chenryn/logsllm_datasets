{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "Enforce that all binaries be signed by the correct Apple Developer IDs, and whitelist applications via known hashes. Binaries can also be baselined for what dynamic libraries they require, and if an app requires a new dynamic library that wasn\u2019t included as part of an update, it should be investigated.", "external_references": [{"external_id": "T1161", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/T1161"}], "id": "course-of-", "modified": "2019-07-24T19:45:55.012Z", "name": "LC_LOAD_DYLIB Addition Mitigation", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_deprecated": true, "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2019-07-19T14:58:42.715Z", "created_by_ref": "", "description": "This category is to associate techniques that mitigation might increase risk of compromise and therefore mitigation is not recommended.", "external_references": [{"external_id": "M1055", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/M1055"}], "id": "course-of-", "modified": "2019-07-23T14:44:24.727Z", "name": "Do Not Mitigate", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2020-10-19T14:57:58.771Z", "created_by_ref": "", "description": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.", "external_references": [{"external_id": "M1056", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/M1056"}], "id": "course-of-", "modified": "2020-10-20T19:52:32.439Z", "name": "Pre-compromise", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "Network segmentation can be used to isolate infrastructure components that do not require broad network access. Properly manage accounts and permissions used by parties in trusted relationships to minimize potential abuse by the party and if the party is compromised by an adversary. Vet the security policies and procedures of organizations that are contracted for work that require privileged access to network resources.", "external_references": [{"external_id": "T1199", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/T1199"}], "id": "course-of-", "modified": "2019-07-25T12:30:35.417Z", "name": "Trusted Relationship Mitigation", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_deprecated": true, "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "Update software regularly. Install software in write-protected locations. Use the program sxstrace.exe that is included with Windows along with manual inspection to check manifest files for side-loading vulnerabilities in software.", "external_references": [{"external_id": "T1073", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/T1073"}], "id": "course-of-", "modified": "2019-07-24T14:24:44.818Z", "name": "DLL Side-Loading Mitigation", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_deprecated": true, "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "Drive-by compromise relies on there being a vulnerable piece of software on the client end systems. Use modern browsers with security features turned on. Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique.\n\nFor malicious code served up through ads, adblockers can help prevent that code from executing in the first place. Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process.\n\nBrowser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist. (Citation: Windows Blogs Microsoft Edge Sandbox) (Citation: Ars Technica Pwn2Own 2017 VM Escape)\n\nOther types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)\n\nSecurity applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility.", "external_references": [{"external_id": "T1189", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/T1189"}, {"description": "Cowan, C. (2017, March 23). Strengthening the Microsoft Edge Sandbox. Retrieved March 12, 2018.", "source_name": "Windows Blogs Microsoft Edge Sandbox", "url": "https://blogs.windows.com/msedgedev/2017/03/23/strengthening-microsoft-edge-sandbox/"}, {"description": "Goodin, D. (2017, March 17). Virtual machine escape fetches $105,000 at Pwn2Own hacking contest - updated. Retrieved March 12, 2018.", "source_name": "Ars Technica Pwn2Own 2017 VM Escape", "url": "https://arstechnica.com/information-technology/2017/03/hack-that-escapes-vm-by-exploiting-edge-browser-fetches-105000-at-pwn2own/"}, {"description": "Nunez, N. (2017, August 9). Moving Beyond EMET II \u2013 Windows Defender Exploit Guard. Retrieved March 12, 2018.", "source_name": "TechNet Moving Beyond EMET", "url": "https://blogs.technet.microsoft.com/srd/2017/08/09/moving-beyond-emet-ii-windows-defender-exploit-guard/"}, {"description": "Wikipedia. (2018, January 11). Control-flow integrity. Retrieved March 12, 2018.", "source_name": "Wikipedia Control Flow Integrity", "url": "https://en.wikipedia.org/wiki/Control-flow_integrity"}], "id": "course-of-", "modified": "2019-07-24T19:14:33.952Z", "name": "Drive-by Compromise Mitigation", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_deprecated": true, "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "On Windows 8.1 and Server 2012 R2, enable LSA Protection by setting the Registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\RunAsPPL to dword:00000001. (Citation: Microsoft LSA Protection Mar 2014) LSA Protection ensures that LSA plug-ins and drivers are only loaded if they are digitally signed with a Microsoft signature and adhere to the Microsoft Security Development Lifecycle (SDL) process guidance.\n\nOn Windows 10 and Server 2016, enable Windows Defender Credential Guard (Citation: Microsoft Enable Cred Guard April 2017) to run lsass.exe in an isolated virtualized environment without any device drivers. (Citation: Microsoft Credential Guard April 2017)\n\nEnsure safe DLL search mode is enabled HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode to mitigate risk that lsass.exe loads a malicious code library. (Citation: Microsoft DLL Security)", "external_references": [{"external_id": "T1177", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/T1177"}, {"description": "Microsoft. (2014, March 12). Configuring Additional LSA Protection. Retrieved November 27, 2017.", "source_name": "Microsoft LSA Protection Mar 2014", "url": "https://technet.microsoft.com/library/dn408187.aspx"}, {"description": "Lich, B., Tobin, J., Hall, J. (2017, April 5). Manage Windows Defender Credential Guard. Retrieved November 27, 2017.", "source_name": "Microsoft Enable Cred Guard April 2017", "url": "https://docs.microsoft.com/windows/access-protection/credential-guard/credential-guard-manage"}, {"description": "Lich, B., Tobin, J. (2017, April 5). How Windows Defender Credential Guard works. Retrieved November 27, 2017.", "source_name": "Microsoft Credential Guard April 2017", "url": "https://docs.microsoft.com/windows/access-protection/credential-guard/credential-guard-how-it-works"}, {"description": "Microsoft. (n.d.). Dynamic-Link Library Security. Retrieved November 27, 2017.", "source_name": "Microsoft DLL Security", "url": "https://msdn.microsoft.com/library/windows/desktop/ff919712.aspx"}], "id": "course-of-", "modified": "2019-07-24T19:47:23.978Z", "name": "LSASS Driver Mitigation", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_deprecated": true, "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of operating system design features. For example, mitigating all hooking will likely have unintended side effects, such as preventing legitimate software (i.e., security products) from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior.", "external_references": [{"external_id": "T1179", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/T1179"}], "id": "course-of-", "modified": "2019-07-24T19:37:27.850Z", "name": "Hooking Mitigation", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_deprecated": true, "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2019-06-06T20:15:34.146Z", "created_by_ref": "", "description": "Break and inspect SSL/TLS sessions to look at encrypted web traffic for adversary activity.", "external_references": [{"external_id": "M1020", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/M1020"}], "id": "course-of-", "modified": "2019-06-06T20:15:34.146Z", "name": "SSL/TLS Inspection", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. (Citation: University of Birmingham C2)", "external_references": [{"external_id": "T1043", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/T1043"}, {"description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "source_name": "University of Birmingham C2", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "id": "course-of-", "modified": "2019-07-24T14:17:58.966Z", "name": "Commonly Used Port Mitigation", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_deprecated": true, "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of operating system design features. For example, mitigating specific API calls will likely have unintended side effects, such as preventing legitimate software (i.e., security products) from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior. \n\nAlthough process hollowing may be used to evade certain types of defenses, it is still good practice to identify potentially malicious software that may be used to perform adversarial actions and audit and/or block it by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)", "external_references": [{"external_id": "T1093", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/T1093"}, {"description": "Beechey, J. (2010, December). Application Whitelisting: Panacea or Propaganda?. Retrieved November 18, 2014.", "source_name": "Beechey 2010", "url": "http://www.sans.org/reading-room/whitepapers/application/application-whitelisting-panacea-propaganda-33599"}, {"description": "Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.", "source_name": "Windows Commands JPCERT", "url": "https://blogs.jpcert.or.jp/en/2016/01/windows-commands-abused-by-attackers.html"}, {"description": "NSA Information Assurance Directorate. (2014, August). Application Whitelisting Using Microsoft AppLocker. Retrieved March 31, 2016.", "source_name": "NSA MS AppLocker", "url": "https://apps.nsa.gov/iaarchive/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm"}, {"description": "Corio, C., & Sayana, D. P. (2008, June). Application Lockdown with Software Restriction Policies. Retrieved November 18, 2014.", "source_name": "Corio 2008", "url": "http://technet.microsoft.com/en-us/magazine/2008.06.srp.aspx"}, {"description": "Microsoft. (2012, June 27). Using Software Restriction Policies and AppLocker Policies. Retrieved April 7, 2016.", "source_name": "TechNet Applocker vs SRP", "url": "https://technet.microsoft.com/en-us/library/ee791851.aspx"}], "id": "course-of-", "modified": "2021-08-23T20:25:18.615Z", "name": "Process Hollowing Mitigation", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_deprecated": true, "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}
{"created": "2019-06-11T17:02:36.984Z", "created_by_ref": "", "description": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.", "external_references": [{"external_id": "M1046", "source_name": "mitre-attack", "url": "https://attack.mitre.org/mitigations/M1046"}], "id": "course-of-", "modified": "2020-05-19T12:28:50.603Z", "name": "Boot Integrity", "object_marking_refs": ["marking-"], "type": "course-of-action", "x_mitre_domains": ["enterprise-attack"], "x_mitre_modified_by_ref": "", "x_mitre_version": "1.0"}