necessarily the widest among the provider paths that are
usable at the node. In Figure 5, the numbers by the links
represent their capacities. Upon convergence of the protocol,
node 2 chooses path 2 1 to reach node 1, because it is the
only customer path from node 2 to node 1, and customer
paths are preferred to both peer and provider paths. This
choice forces node 0 to choose provider path 0 2 1 to reach
node 1. But provider path 0 2 1, of capacity 5, is not the
widest provider path from node 0 to node 1: that distinction
belongs to provider path 0 2 3 1 which has capacity 10.
7.8 Alternative guidelines
The approach described in Section 7.5 to include backup
paths has two limitations. First, it allows valleys, if they
cross peer links. A valley is a path that starts with a cus-
tomer link and ends with a provider link, implying that a
node may provide transit service to a provider. For exam-
2
r, 10
r, 10
p, 5
c, 5
c, 10
3
p, 10
p, 10
r, 4
r, 4
1
c, 10
0
Figure 5: Network with customer-provider and
peer-peer relationships. The numbers by the links
represent their capacities.
ple, with the algebra of Section 7.5, paths 3 0 1 4 and 4 1 0 3
would be allowed in the network of Figure 4, meaning that
nodes 0 and 1 would provide transit service to their respec-
tive providers 3 and 4. Second, a node may prefer a backup
path with provider links to one without provider links, be-
cause, as we have seen in Section 7.6, monotonicity would
fail otherwise. For example, with the algebra of Section 7.5,
and despite having a provider link, path 2 3 6 4 1 is preferred
to path 2 0 1 if its avoidance level is lower.
We present alternative guidelines with the following four
characteristics:
• primary paths are always preferred to backup paths;
• valleys are not allowed;
• backup paths without provider links are always pre-
ferred to those that have them;
• the avoidance level of a backup path increases with
every peer link that it contains.
We have L = {c, p}∪{r}× R+, Σ = {, c, p, φ}∪{r, ˆc, ˆp}×
R+, and W = {0, 1, 2, 3, 4} × R+
0 ∪ {+∞}. The set W is
lexicographically ordered based on the order ≤. In labels,
the letters c, r, and p, again identify customer, peer, and
provider links, respectively. The value x in a label of the
form (r, x) is positive and corresponds to the contribution
of a peer link to the avoidance level of a backup path. In
signatures, the letters c, r, and p identify customer, peer,
and provider paths, respectively, and the accented letters ˆc
and ˆp identify backup paths without and with provider links,
respectively. The value x in signatures of the form (ˆc, x)
and (ˆp, x) indicates the avoidance level of a backup path.
The signature of a peer path, of the form (r, x), inherits the
value x from the label of its ﬁrst link. Every trivial path has
signature . The ⊕ operation is given next (the column for
signature  equals the one for signature c and is omitted).
⊕
c
c
c
(r, y)
p
(r, y)
p
(r, x)
(ˆc, x)
(ˆc, x + y)
p
p
φ
(ˆp, y)
p
(ˆc, x)
(ˆc, x)
(ˆc, x + y)
(ˆp, x)
(ˆp, x)
φ
(ˆp, x + y)
(ˆp, x)
For example, c ⊕ p = c ⊕ (ˆp, x) = φ means that a customer
link can never be preﬁxed to a path that contains provider
links, thereby implying that valleys are not allowed. The
equality (r, y) ⊕ (ˆp, x) = (ˆp, x + y) means that a backup
path with provider links sees its avoidance level increase as
it crosses a peer link.
The function f is given by
f () = (0, 0)
f (c) = (1, 0)
f ((r, x)) = f (p) = (2, 0)
f ((ˆc, x)) = (3, x)
f ((ˆp, x)) = (4, x)
f (φ) = +∞.
Note that in selecting a backup path, whether or not the
path contains provider links takes precedence over its avoid-
ance level. The freeness condition is equivalent to the state-
ment that there is no cycle where all links have label c or
all links have label p.
7.9 Route reﬂection
We now apply the concepts developed to study conver-
gence of BGP inside an Internet domain (Autonomous Sys-
tem, AS) that employs route reﬂection [9, 8]. The routers
inside an AS are partitioned into clusters. Each cluster con-
tains a number of route reﬂectors, at least one, and their
clients. For simplicity, we assume only one route reﬂector
per cluster.
iBGP sessions are established between every
pair of route reﬂectors, and between a route reﬂector and
every one of its clients. They may also be established be-
tween two clients in the same cluster. Given an IP preﬁx,
external to the AS, the BGP route selection process prefers
routes with the highest value of LOCAL-PREF attribute,
and among these, it prefers routes with the lowest length
of the AS-PATH attribute. We neglect the MED attribute,
and from now on, we consider only the routes with highest
LOCAL-PREF, and among these, only the ones with the
lowest AS-PATH length. A router that learned at least one
of these remaining routes from an eBGP (external BGP)
session is called a border router for that IP preﬁx. The bor-
der routers are destinations as far as routing inside the AS
is concerned.
We ﬁrst identify the algebra that emerges from the route
selection rules and export rules that are applied inside an
AS that uses route reﬂection. The best of a set of available
routes at a router is selected as follows: prefer the route
with the shortest Interior Gateway Protocol (IGP) path dis-
tance to a border router, breaking ties with the identities of
the border routers. The export rules are as follows: border
routers export eBGP routes to all routers with which they
have iBGP sessions; a route reﬂector exports routes learned
from another route reﬂector only to all clients in its cluster;
a route reﬂector exports routes learned from a client in the
same cluster to all other clients in the cluster and all other
route reﬂectors.
In the model, routers have identiﬁers taken from the set
N of positive integers. We have L = {d, o, u} × N , Σ =
0 ∪
({d, o} × N × N ) ∪ ({0, +∞} × N ) ∪ {φ}, and W = (R+
{+∞}) × (N ∪ {+∞}), lexicographically ordered based on
the order ≤. The second component in the label of each
link is always the identity of the node at the head of the
link. A link that joins a route reﬂector to a client has d for
ﬁrst label component; a link that joins a route reﬂector to
another route reﬂector has o for ﬁrst label component; and a
link with a client at its head has u for ﬁrst label component.
The last component in the signature of a path is always the
identity of its border router. Trivial paths, those consisting
of a border router alone, have signatures of the form (0, k);
6
(u,6)
(o,7)
4
(d,7)
(d,7)
7
5
(u,5)
(o,2)
(u,1)
(o,7)
(o,4)
1
(d,2)
2
(d,2)
(u,1)
(u,0)
(u,0)
(o,2)
(o,4)
0
(d,4)
(u,3)
3
Figure 6: AS with three clusters. Clusters are en-
closed in ovals. Route reﬂectors are represented
with diamonds, clients are represented with circles,
and border routers (for an unspeciﬁed IP preﬁx) are
shaded.
non-trivial paths with origin at a client have signatures of
the form (+∞, k); non-trivial paths with origin at a route
reﬂector have signatures either of the form (d, i, k) or of the
form (o, i, k), where i is the identity of the route reﬂector.
Figure 6 depicts an AS that uses route reﬂection, and where
the border routers, for an unspeciﬁed IP preﬁx, are shaded.
Path 0 is a trivial path and has signature (0, 0); path 6 7 2 0
has signature (+∞, 0); path 2 0 has signature (d, 2, 0); path
4 2 0 has signature (o, 4, 0); and path 7 4 2 0 is not usable.
The ⊕ operation is given next.
(d, i, k)
⊕
(d, j)
(o, j)
(u, j)
(0, k)
(d, j, k)
(o, j, k)
(+∞, k)
(o, i, k)
φ
φ
(+∞, k)
(+∞, k)
φ
φ
φ
φ
(o, j, k)
(+∞, k)
We look into some examples: (o, j)⊕(o, i, k) = φ means that
a route reﬂector does not export paths learned from route
reﬂectors to other route reﬂectors; (o, j)⊕ (d, i, k) = (o, j, k)
means that route reﬂector i exports to route reﬂector j paths
learned from its client k, which is an border router, and the
resulting path keeps the identity of the border router but
sees the origin of the path updated from i to j.
The function f is given next.
f ((0, k)) = (0, k)
f ((d, i, k)) = f ((o, i, k)) = (dist(i, k), k)
f ((+∞, k)) = (+∞, k)
f (φ) = (+∞, +∞)
where dist(i, k) is the IGP path distance from router i to
router k. With this algebra all networks are free, because
the antecedent of the freeness condition is never true. We
are left to verify monotonicity. Monotonicity clearly holds
when a trivial path is extended to any router and when any
path is extended to a client. The interesting case is when
a path consisting of a route reﬂector followed by a client
border router is extended to another route reﬂector. The
weight of the original path is (dist(i, k), k), where i is the
identity of the route reﬂector and k is the identity of its
client border router. The weight of the extended path is
(dist(j, k), k), where j is the identity of the route reﬂector
to which the original path has been extended. Therefore, for
monotonicity to hold, we must have dist(i, k) ≤ dist(j, k).
We can then conclude with generality that the path vector
protocol converges within an AS if for every client k and
every route reﬂector j we have
dist(reﬂect (k), k) ≤ dist(j, k),
where reﬂect (k) is the identity of the route reﬂector that be-
longs to the same cluster as client k. In words, client k must
not be farther from its route reﬂector reﬂect (k) than from
any other route reﬂector, in terms of IGP path distances.
The contrapositive states that for the path vector protocol
not to converge within an AS at least one client must be
closer to a router reﬂector other than the one in its cluster;
examples of non-convergence can be found in [8].
8. PROOF OF CONVERGENCE
In this section, we present a semi-formal temporal-logic
proof of Proposition 3. Speciﬁcally, we ﬁx a destination and
prove convergence of the protocol for that destination.
Let P be the set of all usable paths in the network through
which the destination can be reached, and let the strict par-
tial order ✁ be deﬁned such that P ✁ Q if P and Q have the
same origin and P weighs less that Q or, having the same
weight as Q, is preferred to it. Deﬁne the paths digraph to
be the digraph that has P for vertex set and where there is
an edge from path P to path Q if any one of the next two
conditions is veriﬁed:
• Q is an extension of P , that is, Q = uv ◦ P for some
node u in the network;
• P and Q have the same origin, and either P weighs less
than Q or, their weights being equal, P is preferred to
Q, that is, P ✁ Q.
We remark that the use of the paths digraph is conﬁned to
the proof of Proposition 3, not being needed thereafter to
prove convergence of speciﬁc path vector protocols. Figure 7
shows the paths digraph for the network of Figure 4, taking
0 for destination node. At the top part of the ﬁgure, the
usable paths are depicted next to the nodes at their origin.
The higher a path in a list the smaller it is with respect
to the order ✁. The bottom part of the ﬁgure shows the
corresponding paths digraph.
Proposition 6. If the algebra is monotone and the net-
work is free, then the paths digraph is acyclic.
Proof. The proof is by contradiction and comprises three
stages. Assume that the paths digraph contains a cycle, and
let C = P0 · ·· Pn−1Pn (Pn = P0) be a cycle of minimum
length. Since the paths usable at a node are totally ordered,
and a path and any of its extensions have diﬀerent origins,
we must have n ≥ 4. The origin of path Pi is denoted as ui,
0 ≤ i ≤ n.
In the ﬁrst stage, we show that any repeated nodes in
the sequence u0 ··· un−1un (un = u0) must appear consecu-
tively. Suppose otherwise. Then there is i, 0 ≤ i < n, and k,
1 < k < n−1, such that ui = ui +n k and Pi ✁Pi +n k, where
5 2 0
5 6 3 0
5
6 3 0
6 5 2 0
6
2 0
2 5 6 3 0
2 3 0
2
4
4 6 3 0