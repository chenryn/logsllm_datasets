## IMPORTANT: DevOps Kit (AzSK) is being sunset by end of FY21. More details [here](../ReleaseNotes/AzSKSunsetNotice.md)
----------------------------------------------
> The Secure DevOps Kit for Azure (AzSK) was created by the Core Services Engineering & Operations (CSEO) division at Microsoft, to help accelerate Microsoft IT's adoption of Azure. We have shared AzSK and its documentation with the community to provide guidance for rapidly scanning, deploying and operationalizing cloud resources, across the different stages of DevOps, while maintaining controls on security and governance.
AzSK is not an official Microsoft product – rather an attempt to share Microsoft CSEO's best practices with the community..
>NOTE:  
>The OMS* parameter/variable names will soon be deprecated. Please ensure that you have made the necessary changes to CA, CICD and AzSK Monitoring Solution as per below:  
>	1. Updated CA setups with new names ([details here](../04-Continous-Assurance#updating-an-existing-continuous-assurance-setup)). (Not required for CSEO subscriptions!)  
>	2. Switched to new names in CICD extension ([details here](../03-Security-In-CICD#advanced-cicd-scanning-capabilities)). (Required for all subscriptions)  
>	3. Start using the new parameters for [CA](../04-Continous-Assurance#setting-up-continuous-assurance---step-by-step) and [AzSK Monitoring Solution](../05-Alerting-and-Monitoring#1-c).
# Alerting & Monitoring
![Alerting_and_Monitoring](../Images/Alerting_and_Monitoring.png)
## Monitoring Solution for AzSK
 ### Contents
- [Overview](Readme.md#overview)
- [Components of the AzSK Monitoring Solution](Readme.md#components-of-the-azsk-monitoring-solution)
- [Setting up the AzSK Monitoring Solution (Step by Step)](Readme.md#setting-up-the-azsk-monitoring-solution-step-by-step)
- [Guide to AzSK Monitoring Solution queries](Readme.md#guide-to-azsk-monitoring-solution-queries)
- [Next Steps](Readme.md#next-steps)
- [Appendix](Readme.md#appendix)
  - [Creating a Log Analytics workspace](Readme.md#a-creating-a-log-analytics-workspace)
  - [Testing Log Analytics workspace connectivity](Readme.md#b-testing-log-anaytics-workspace-connectivity)
  - [Routing AzSK events to Log Analytics](Readme.md#c-routing-azsk-events-to-log-analytics)
  - [Leveraging other Management Solutions from the Azure Marketplace](Readme.md#d-leveraging-other-management-solutions-from-the-azure-marketplace)
--------------------------
### Overview: 
The Alerting & Monitoring features of AzSK empower dev ops teams with the following capabilities:
- a single pane of glass view of cloud security across dev ops stages
- visibility to control status for their Azure subscription and critical enterprise/application resources
- pre-configured search queries for creating alerts to facilitate action on security drift
Out of the box, these capabilities can be leveraged via the Log Analytics-based Monitoring solution in AzSK.
However, a dev ops team can equally easily leverage a different system for log analytics (e.g., Splunk) and view the AzSK control evaluation events
in the alternate system. This can be accomplished by using connectors for Event Hubs or Webhooks in the AzSK.
[Back to top…](Readme.md#contents)
### Components of the AzSK Monitoring Solution
The AzSK Monitoring Solution is deployed to a Log Analytics workspace that is used by the dev ops team for monitoring and 
generating a dashboard for security monitoring and alerting based on AzSK control evaluation events.
The out of box security dashboard generated by the AzSK Monitoring Solution includes:
1. An "Overview tile" for the Log Analytics workspace summary (Home view)
2. A detailed "View dashboard" comprised of multiple blades displaying security control status for your: 
   a) subscription, 
   b) express route networks and 
   c) other cloud resources (shown with various pivots)
3. Ready to use Logs queries for security drift conditions
![05_Application_Security_View](../Images/05_Application_Security_View.png)  
[Back to top…](Readme.md#contents)
### Setting up the AzSK Monitoring Solution (Step by Step)
This section will walk you through the step-by-step experience of setting up the AzSK Monitoring Solution.
Note that for the Monitoring Solution to display anything, you have to configure AzSK in SDL or CICD or
CA mode to send events to the target Log Analytics workspace as mentioned [here](Readme.md#c-routing-azsk-events-to-log-analytics).
If you do not have a Log Analytics workspace yet, see [Appendix](Readme.md#appendix) to create one.
The rest of this section assumes that:
a) you have a Log Analytics worskpace**
b) you have setup AzSK to send events to that workspace (from one or more of SDL, CICD, CA stages)
c) some AzSK scans have run in respective stages and events are already present in the Log Analytics workspace
If you need help for any of the above, see the respective section in the [Appendix](Readme.md#appendix) at the bottom.
The AzSK Monitoring setup involves two sets of steps - one set to be run by the monitoring team that owns 
the Log Analytics workspace and the other set to be run by the application team (for applications which 
are to be monitored via a common Log Analytics dashboard). 
We will refer to the monitoring team as the "**Ops team**" and the application team as 
the "**App team**" below. 
The general model assumed is one where there are (1) multiple subscriptions covering a 
portfolio of applications for a business unit and (2) a central subscription that hosts the Log Analytics workspace for that business unit. We call the former the 'app subscriptions' and 
the latter the 'Log Analytics subscription'.
> **Note**: This is not to suggest a hard separation of roles between the actual individuals
involved. Indeed, most dev ops teams will have Dev rotating to support Ops and vice versa.)
### Step-1 (Ops Team): Deploy the AzSK Monitoring Solution
### [1-a]
Use Set-AzContext to choose the subscription corresponding to the Log Analytics workspace and run the command below 
to get the details about your Log Analytics workspace:
```PowerShell
 Set-AzContext -SubscriptionId ''   #switch to the Log Analytics subscription
 Get-AzOperationalInsightsWorkspace #get info about the Log Analytics workspace (we'll need that below)
```
This outputs the Log Analytics workspaces from the Log Analytics subscription as shown below:
![05_Get_AzOperationalInsightsWorkspace](../Images/05_Get_AzOperationalInsightsWorkspace.png)
### [1-b]
Obtain the workspaceId and sharedKey for the Log Analytics workspace you'd like to use for monitoring.
Go to the Log Analytics workspace and navigate to "Advanced Settings -> Connected Sources -> Windows Servers" as shown in the image below:
> **Note**: The "Advanced Settings" option will be visible only if you have 'Owners' access (and have elevated to Owner if using PIM). It will not be visible if you are 'Reader'.
![05_Log_Analytics_Workspace_WsId_ShrKey](../Images/05_Log_Analytics_Workspace_WsId_ShrKey.png)
### [1-c]
Run the commands below in PS after replacing the various '<>' with
  (a) respective values for the Log Analytics workspace to be used
  and (b) a unique name to identify the view with in the Log Analytics workspace summary (Overview).
```PowerShell
    $lawsSubId =''   #subscription hosting the Log Analytics workspace
    $lawsId =''
    $lawsRGName =''     #RG where the Log Analytics workspace is hosted (See 1-a)
    $azSkViewName = '' #This will identify the tile for AzSK view in Log Analytics workspace. E.g., MyApp-View-1
    #This command will deploy the AzSK view in the Log Analytics workspace. Happy monitoring!  
    Install-AzSKMonitoringSolution -LAWSSubscriptionId $lawsSubId `
                    -LAWSResourceGroup $lawsRGName `
                    -WorkspaceId $lawsId `
                    -ViewName $azSkViewName [-Force]
```
The table below explains the different parameters used by Install-AzSKMonitoringSolution cmdlet:
|ParameterName|Comments|
| ----- | ---- | 
|LAWSSubscriptionId|Id of the subscription where the Log Analytics workspace is hosted|
|LAWSResourceGroup|Name of the resource group where the Log Analytics workspace is hosted|
|WorkspaceId|Workspace ID of the Log Analytics workspace name which will be used for monitoring|
|ViewName|Name of the AzSK Log Analytics Workspace summary (Overview) (unique per Log Analytics workspace)|
|Force|Provide this switch to force deployment without further user consent (Optional)|
> Note: A resource group name such as 'mms-xxx' is used by default by the Monitoring setup process (where 'xxx' can 
be 'eus' or 'sea' etc. based on the region). If you specified a custom resource group name when creating 
the Log Analytics workspace, then remember to use *that* name in the install command above. 
If you forgot the custom resource group name you used, you can always use 
Get-AzOperationalInsightsWorkspace to see the correct value to use for 
the respective Log Analytics workspace.
The installation command will display output like the below:
![05_Install-AzSKMonitoringSolution](../Images/05_Install-AzSKMonitoringSolution.png)
At this point, assuming that AzSK events were already being sent to the Log Analytics workspace, you should start
seeing a tile such as the one below:
![05_Workspace_Summary_View](../Images/05_Workspace_Summary_View.png)
**Step-2 (Ops Team): Using the Log Analytics Workspace Summary (Overview) for monitoring**
**2 (a)** Viewing raw events from AzSK (sanity check)
Click on the 'Logs' in the menu bar on the left to open the "Logs" query page.
Enter "AzSK_CL" in the query field. (Old query: "Type=AzSK_CL")
You should see data about AzSK events as query results. (Again, this assumes that by now AzSK 
control scan results are being sent to this workspace. See [this](Readme.md#b-testing-log-anaytics-workspace-connectivity) for
how that is done.)
![05_Log_Analytics_Workspace_Logs_Query](../Images/05_Log_Analytics_Workspace_Logs_Query.png) 
If you are certain that events are being sent to the Log Analytics workspace but you are seeing blank views/no query results, 
you may need to extend the duration applicable to the queries. (This can be done using the 'Time range' selector next to the 'Run' button at the top of the query window.)
![05_Log_Analytics_Workspace_Query_Duration](../Images/05_Log_Analytics_Workspace_Query_Duration.png)
**2 (b)** Using the AzSK Monitoring Solution
The solution view contains multiple blades representing alerts, various types of security activity, 
security trends, etc. This view shows up when you click on the view tile and looks like the picture
below:
![05_Log_Analytics_Workspace_New_View](../Images/05_Log_Analytics_Workspace_New_View.png)
The very first (Summary) blade provides complete instructions on how to interpret the different
blades in this view. These blades cover the complete picture of baseline security compliance
for your subscription and resources. It starts with a couple of blades that display subscription
level security baseline issues and any issues with Express Route connections (if one is enabled
for your subscription). The subsequent blades display resource level security queries - each 
blade takes a different pivot to show the resource baseline compliance data. The very last blade
provides some handy queries that you can use to get started with building your own custom 
queries for log searches and alerting on top of the AzSK events in the repository.
As shown in the image below, you can dive deeper into a specific control failure and look at 
the AzSK control event for details such as severity, controlId, recommendation, etc. These 
are the same fields that display in the CSV file when you run the AzSK manually as a developer.
![05_Log_Analytics_Control_Failure](../Images/05_Log_Analytics_Control_Failure.png)
[Back to top…](Readme.md#contents)
### Guide to AzSK Monitoring Solution queries
This section walks you through the queries present in the AzSK Monitoring solution. To get the latest queries make sure that you have the latest solution installed in your Log Analytics workspace. To get the latest version of solution you need to re-install Monitoring solution using step **[[1-c]](#1-c)** mentioned above. The queries show the status of controls based on the following criteria.
- Each blade shows the aggregated control status for all subscriptions whose data is sent to the Log Analytics workspace.
- By default, each blade shows the status of baseline controls.
- The queries show counts based on control status received for last scan data(done with required access) received by the Log Analytics workspace.
- Any control status other than "Passed" is treated as "Failed"(including "Verify",Manual,etc.) in queries for calculating failure counts.
Details of various blades of Azure Security Health View are as follows:
**1) Subscription Security Status:** This blade shows the status of baseline Subscription Security controls of your subscription(s).
- Donut: The query below shows the aggregated control status of Subscription Security controls.
	``` AIQL
	AzSK_CL 
	| where TimeGenerated > ago(3d)  
	| summarize arg_max(TimeGenerated, *) by SubscriptionId,ControlId_s 
	| where HasRequiredAccess_b == true and IsBaselineControl_b == true  
	| where FeatureName_s == "SubscriptionCore"  
	| extend ControlStatus=iff(ControlStatus_s!= "Passed","Failed","Passed") 
	| summarize  count() by SubscriptionId,ControlId_s,ControlStatus 
	| summarize AggregatedValue = count() by ControlStatus 
	| sort by AggregatedValue desc
	```
- List: The query below shows the list of subscriptions that have one or more Subscription Security controls failing along with the number of controls failing on each subscription. 
	``` AIQL
	AzSK_CL 
	| where TimeGenerated > ago(3d)  
	| summarize arg_max(TimeGenerated, *) by SubscriptionName_s,ControlId_s 
	| where HasRequiredAccess_b == true and IsBaselineControl_b == true  
	| where FeatureName_s == "SubscriptionCore"  
	| extend ControlStatus=iff(ControlStatus_s!= "Passed","Failed","Passed") 
	| where ControlStatus=="Failed"
	| summarize  count() by SubscriptionName_s,ControlId_s,ControlStatus_s 
	| summarize AggregatedValue = count() by SubscriptionName_s 
	| sort by AggregatedValue desc
	```
**2) Express Route vNet Security Status:** This blade shows the status of baseline ERvNet Controls for virtual networks in your subscription that have Express Route connectivity setup.
- Donut: The query below shows the aggregated control status of ERvNet controls.
	``` AIQL
	AzSK_CL 
	| where TimeGenerated > ago(3d)  
	| where HasRequiredAccess_b == true and IsBaselineControl_b == true 
	| where FeatureName_s == "ERvNet"  
	| extend ControlStatus=iff(ControlStatus_s!= "Passed","Failed","Passed")   
	| summarize arg_max(TimeGenerated,*) by SubscriptionName_s,ResourceId,ControlId_s 
	| summarize AggregatedValue = count() by ControlStatus 
	| sort by AggregatedValue desc
	```
- List: The query below shows the list of subscriptions that have one or more ERvNet control failing and number of failures on each subscription.
	``` AIQL
	AzSK_CL 
	| where TimeGenerated > ago(3d)  
	| where HasRequiredAccess_b == true and IsBaselineControl_b == true 
	| where FeatureName_s == "ERvNet"  
	| extend ControlStatus=iff(ControlStatus_s!= "Passed","Failed","Passed")   
	| summarize arg_max(TimeGenerated,*) by  SubscriptionName_s,ResourceId,ControlId_s 
	| where ControlStatus =="Failed" 
	| summarize AggregatedValue = count() by SubscriptionName_s 
	| sort by AggregatedValue desc
	```
**3) Resource Security (RS-1):** This blade shows the status of baseline controls for all resources present on your subscription(s). The below image depicts the blade:
![05_Log_Analytics_Blade_RS1](/Images/05_Log_Analytics_Blade_RS1.PNG)
- Donut: The query below shows the aggregated status of controls for all the resources present on your subscription(s).
	``` AIQL
	AzSK_CL 
	| where TimeGenerated > ago(3d) 
	| where HasRequiredAccess_b == true and IsBaselineControl_b == true  
	| where FeatureName_s != "SubscriptionCore"  
	| extend ControlStatus = iff(ControlStatus_s == "Passed", "Passed","Failed") 
	| summarize arg_max(TimeGenerated, *) by SubscriptionId, ResourceId, ControlId_s 
	| summarize AggregatedValue = count() by ControlStatus 