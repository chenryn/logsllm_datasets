For example, we have interface
    interface A {
       a: string;
       b: number;
       c: string;
       d: number;
       //etc
    }
and we want interface which contains all members except `{c: string}` and
includes
    {
        f: number;
    }
Ofcource we can split interface A, but, for example, this interface stored in
another npm package.
Another example
    interface BemProps {
        modifications?: Array;
        prefix?: string;
        additionalClasses?: string;
    }
    // we want to pass all HTMLButtonElement valid props except className
    // for set className we use bem.
    function UiButton(props: BemProps & React.HTMLProps) {
        return (
                {props.children}
        );
    }
I suggest new keyword 'except' or '!'
Usage
    type Props =  BemProps & React.HTMLProps except { className: string }
or "!"
    type Props =  BemProps & React.HTMLProps ! { className: string }