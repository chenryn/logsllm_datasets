### 优化后的文本

#### 创建和使用 Reserve Blob

通过调用 `NtAlpcCreateResourceReserve` 函数，可以创建一个名为 "Reserve Blob" 的结构。该函数会进一步调用 `AlpcAddHandleTableEntry` 函数，将新创建的 Reserve Blob 的地址写入 `_ALPC_HANDLE_TABLE` 结构中的 `Handles` 数组。

当创建 ALPC 端口时，系统会自动调用 `AlpcInitializeHandleTable` 函数来初始化 `HandleTable` 结构。`Handles` 是一个初始大小为 0x80 的数组，用于存储 blob 结构的地址。随着越来越多的 blob 被创建，`Handles` 数组的大小会成倍增加，最大可达 0x1000。

`_KALPC_RESERVE` 结构定义如下：
```plaintext
kd> dt nt!_KALPC_RESERVE
   +0x000 OwnerPort        : Ptr64 _ALPC_PORT
   +0x008 HandleTable      : Ptr64 _ALPC_HANDLE_TABLE
   +0x010 Handle           : Ptr64 Void
   +0x018 Message          : Ptr64 _KALPC_MESSAGE
   +0x020 Size             : Uint8B
   +0x028 Active           : Int4B
```

#### 溢出 Handles 数组

当你溢出并覆盖了 `Handles` 数组中 `_KALPC_RESERVE` 结构的指针时，可以伪造一个虚假的 Reserve Blob。由于 `_KALPC_RESERVE` 中存储着 `Message` 的地址，你可以进一步伪造一个虚假的 `_KALPC_MESSAGE` 结构。

`_KALPC_MESSAGE` 结构定义如下：
```plaintext
kd> dt nt!_KALPC_MESSAGE
   +0x000 Entry            : _LIST_ENTRY
   +0x010 PortQueue        : Ptr64 _ALPC_PORT
   +0x018 OwnerPort        : Ptr64 _ALPC_PORT
   +0x020 WaitingThread    : Ptr64 _ETHREAD
   +0x028 u1               : 
   +0x02c SequenceNo       : Int4B
   +0x030 QuotaProcess     : Ptr64 _EPROCESS
   +0x030 QuotaBlock       : Ptr64 Void
   +0x038 CancelSequencePort : Ptr64 _ALPC_PORT
   +0x040 CancelQueuePort  : Ptr64 _ALPC_PORT
   +0x048 CancelSequenceNo : Int4B
   +0x050 CancelListEntry  : _LIST_ENTRY
   +0x060 Reserve          : Ptr64 _KALPC_RESERVE
   +0x068 MessageAttributes : _KALPC_MESSAGE_ATTRIBUTES
   +0x0b0 DataUserVa       : Ptr64 Void
   +0x0b8 CommunicationInfo : Ptr64 _ALPC_COMMUNICATION_INFO
   +0x0c0 ConnectionPort   : Ptr6::: 以下内容已优化：

#### 任意地址读写

调用 `NtAlpcSendWaitReceivePort` 函数发送消息时，它会将用户传入的数据写入到 `_KALPC_MESSAGE` 结构中 `ExtensionBuffer` 所指向的地址，从而实现任意地址写入。相反，当接收消息时，该函数会从 `ExtensionBuffer` 所指向的地址读取数据，从而实现任意地址读取。

整个过程如下：
1. 通过溢出 `Handles` 数组中的 `_KALPC_RESERVE` 指针，构造一个虚假的 Reserve Blob。
2. 继续构造一个虚假的 `_KALPC_MESSAGE` 结构。
3. 利用 `_KALPC_MESSAGE` 结构中的 `ExtensionBuffer` 和 `ExtensionBufferSize` 字段，实现任意地址读写。

## 漏洞利用流程

### 结合 WNF 和 ALPC 进行漏洞利用

1. **喷射大量 WNF 结构**：调用 `NtUpdateWnfStateData` 喷射大量大小为 0x1000 的 `_WNF_STATE_DATA` 结构，并使它们在内存中相邻排列。
2. **创建内存空洞**：调用 `NtDeleteWnfStateName` 函数创建大量的内存空洞。
3. **创建存在漏洞的池块 (Ownerpage)**：创建一个 Multiplexed 类型的 BLF 文件，并包含两个 container 文件。向 container 中写入大量记录，当记录长度超过 0x7f000 时，会自动创建 Ownerpage 页到 container 中。然后调用 `CreateLogFile` 打开这个 Multiplexed 类型的 BLF 文件，解析 container 并在内存中创建 Ownerpage 池块。

### 覆盖 WNF 池块

- 当进入 `OverflowReferral` 函数时，会导致越界写操作，覆盖相邻的 WNF 池块的内容。
- 将 WNF 的 `AllocatedSize` 成员覆盖为 0xffffffff，以允许通过 WNF 向下一个块进行任意内容越界写。

### 分配 Handles 结构

- 在 WNF 块后面分配一个 `Handles` 结构，其所有成员都是 `_KALPC_RESERVE` 结构的指针。
- 由于 WNF 有 0x1000 大小的写入限制，写入的起始位置在 WNF 结构 +0x10 的偏移处，因此只能向下一个块写入 16 字节长度的内容。
- 将 `Handles` 中原来的指针成员替换为我们自己的指针 0x00000282`99055970，该指针指向我们在用户态伪造的 `_KALPC_RESERVE` 结构。

### 发送和接收消息

- 调用 `NtAlpcSendWaitReceivePort` 函数，进入 `AlpcpLookupMessage` 函数，再调用 `AlpcReferenceBlobByHandle` 函数，从 `Handles` 中获取我们伪造的用户态地址。
- `_KALPC_RESERVE` 结构的 `Message` 成员是我们伪造的 `_KALPC_MESSAGE` 结构。
- 在伪造 `_KALPC_MESSAGE` 时，将 Token 的地址写入 `_KALPC_MESSAGE+0xe0` 偏移处，即 `ExtensionBuffer` 的位置。
- 最后，调用 `NtAlpcSendWaitReceivePort` 后，流程进入 `AlpcpCaptureMessageDataSafe` 函数，调用 `memmove` 向 `ExtensionBuffer`（Token 的地址）写入可控的任意内容，覆盖 token 的 Privileges 为 0xff，获得所有特权。

### 验证权限提升

- 使用 Procexp.exe 查看利用进程的权限，发现已经获得了 `SeDebugPrivilege` 权限。
- 利用该权限向 `Winlogon.exe` 进程注入 shellcode，最终实现特权提升。

## 为什么是通用的？

在本次利用中，我们使用了三个结构：`_WNF_STATE_DATA`、`Handles` 和 `_KALPC_MESSAGE`。这些结构都有一个共同特性，即结构大小可控。根据测试，它们可以适配 0x30 ~ 0x11000+ 大小的池块。

### 适配范围

- **0x30 ~ 0x1000 size**:
  - `_WNF_STATE_DATA` (0x30 ~ 0x1000)
  - `_ALPC_HANDLE_TABLE->Handles` (0x90、0x110、0x210、0x410 、0x810、0x1000…0x10000…)
  - `_KALPC_MESSAGE` (0x160 ~ 0x11000)

- **> 0x1000 size**:
  - `_ALPC_HANDLE_TABLE->Handles`
  - `_KALPC_MESSAGE`

- **> 0x11000 size**:
  - `_ALPC_HANDLE_TABLE->Handles` (0x90、0x110、0x210、0x410 、0x810、0x1000…0x10000…)

### 通用利用方法

- **WNF**: 适配 0x30 ~ 0x1000 的大小，通过修改 `AllocatedSize` 成员达到越界写，通过修改 `DataSize` 成员达到越界读。越界读写的最大长度是 0x1000。
- **Handles**: 结构长度成倍增长（例如：0x90、0x110、0x210、0x410 、0x810、0x1000…0x10000…）。超过 0x1000 后没有池头，不会被分配成 0x1010。可以覆盖 `Handles` 的成员为我们伪造的 `_KALPC_RESERVE` 指针，调用 `NtAlpcSendWaitReceivePort` 达到任意地址写。
- **_KALPC_MESSAGE**: 适配范围在 0x160 ~ 0x11000。只需通过溢出覆盖 0xe0 偏移处的地址，再调用 `NtAlpcSendWaitReceivePort` 即可实现任意地址写。

## 参考链接

- [CLFS Internals](https://github.com/ionescu007/clfs-docs/) – Alex Ionescu
- [DeathNote of Microsoft Windows Kernel](https://www.slideshare.net/PeterHlavaty/deathnote-of-microsoft-windows-kernel) – Keen Lab
- [Microsoft Windows 10 CLFS.sys ValidateRegionBlocks privilege escalation vulnerability](https://talosintelligence.com/vulnerability_reports/TALOS-2020-1098) – Cisco Talos