users log in. The name of the copyright file, if one is defined, is obtained by calling 
login_getcapstr(). The login_getcapstr() function, defined in libutil, pulls an entry 
from the login capabilities database by using the libc function cgetstr(). The 
database it uses is referenced in the lc argument set by a previous call to 
login_getpwclass(), which essentially looks in a user's home directory for the 
user-specific class file. 
Say a user creates a ~/login.conf file containing these lines: 
default:\ 
 :copyright= 
If the user logs in to the system, the preceding OpenSSH code returns 
/etc/master.passwd as the copyright string, and the ssh daemon proceeds to open the 
password file as root and print its contents. 
File Creation 
Applications that create new files and directories in the file system need to be careful 
to select appropriate initial permissions and file ownership. Even if the process is 
working within a fairly safe part of the file system, it can get into trouble by leaving 
newly created files and directories exposed to attackers. 
The UNIX open() interface 
The primary interface on a UNIX system for creating and opening files is the open() 
system call. The open() function has the following semantics: 
int open(char *pathname, int flags, mode_t mask); 
As you can see, open () has three parameters. The pathname and mask parameters 
specify the name of the file to create or open and the 12-bit permission mask to apply 
to the file if one is being created. (If a file is being opened rather than created, the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
520 
permissions mask is ignored.) The flags parameter specifies how open() should 
behave. This parameter is composed of 0 or more special flag values that are OR'd 
together to create a bitmask. You will be introduced to these flags throughout the rest 
of this chapter. 
Permissions 
When reviewing a UNIX application, you should ensure that reasonable permission 
bits are initially chosen when a file or directory is created. If the file is created with 
open(), creat(), or a special function such as mknod(), programmers will likely specify 
an explicit file creation mode, which should be easy to spot-check. Keep in mind that 
the creation mode specified will silently be combined with the process's umask value 
which was discussed previously. Although the functions mentioned here use explicit 
file creation modes, you will see later on in "The Stdio File Interface(? [????.])" that 
the standard C libraries provide file I/O APIs that implicitly determine permissionsa 
much more dangerous programming model. 
Forgetting O_EXCL 
Creating a new file is easy to get wrong. Often when a developer writes code that is 
intended to open a file, the same code can inadvertently open an existing file. This 
kind of attack is possible because the open() function is responsible for both creating 
new files and opening existing ones. It will do one or the other depending on which 
flags are present in the flags parameter. The O_CREAT flag indicates that open() 
should create a new file if the requested file name doesn't already exist. Therefore, 
any invocation of open() that has the O_CREAT flag passed to it will potentially create 
a new file, but also might just open an existing one if it is already there (and the 
calling program has sufficient access to open it). When the O_EXCL flag is used in 
conjunction with O_CREAT, the open() function will exclusively create a new file. If the 
specified file name already exists, the open() function will fail. So, if open() is called 
with O_CREAT but not O_EXCL, the system might open an existing file instead of 
creating a new one. To see how this might be a problem, consider the following 
example: 
if ((fd=open("/tmp/tmpfile.out", 
        O_RDWR|O_CREAT, 0600)) < 0) 
        die("open"); 
... 
The code presented in the example creates a temporary file named /tmp/tmpfile.out. 
However, because the O_EXCL flag isn't specified, it is also possible that this code 
opens a pre-existing file if /tmp/tmpfile.out already exists. You see in "Race 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
521 
Conditions(? [????.])" later on in this chapter that attackers can use file sym-links to 
exploit a problem like this to force an application to open sensitive system files. 
Also keep in mind that if a file is opened rather than created, the permissions mask 
passed to open() is completely ignored. Returning to the previous code snippet, if an 
application created the file /tmp/tmpfile.out with restrictive permissions as shown 
because it was going to store sensitive data in the file, any user could access that data 
by creating a file of the same name first. 
Unprivileged Owner 
Applications that run with special privileges often relinquish some or all of their 
privileges when performing potentially dangerous operations, such as creating or 
opening files. In general, this approach is reasonable, but there are definitely some 
pitfalls to watch out for. 
If the process creates a file or directory, it's created as the lesser privileged user. If 
it's a setuid root program, and the attacker is the lesser privileged user, this can have 
some serious consequences. Remember that if you own a file, you can change its 
group ownership and permission bitmask. Because you control the permissions, you 
can read, write, and truncate the file at will. Consider this code: 
drop_privs(); 
if ((fd=open("/usr/safe/account3/resultfile", 
             O_RDWR | O_CREAT, 0600))<0) 
    die("open"); 
regain_privs(); 
... 
This code is simple, but it shows what a file creation might look like in a 
privilege-savvy setuid program. There may or may not be a security issue with this 
program; it depends on what the program does with the file later. As it's written, if the 
file isn't already on the file system, it's created by the call to open(). It would be 
owned by the attacker, who could then manipulate the file's contents and permissions 
at will. These actions could include changing file contents out from under the program 
as it worked with the file, changing permissions to prevent the program from 
reopening the file later, or just reading the content in the file. 
Directory Safety 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
522 
As discussed, a process that creates files needs to make sure it chooses an 
appropriate set of permissions and an appropriate owner and group for the file. This 
is not an application's only concern, as directories containing the file are also key to 
the file's overall security. 
If the new files are created in a directory that's writeable by an unprivileged user, the 
program needs to be capable of dealing with attackers doing things such as deleting 
files it creates, creating files with names that conflict with names the program is using, 
and renaming files after the program creates them. You see some examples of these 
attacks in "Links(? [????.])" and "Race Conditions(? [????.])" later in this chapter. 
If the directory is writeable by an attacker but is a sticky directory, the program is still 
in dangerous territory, but it doesn't need to worry about attackers renaming or 
deleting its files after it successfully creates them. However, it can run into plenty of 
trouble when creating these files, which you'll also see in "Race Conditions(? [????.])" 
later in this chapter. 
If the containing directory is actually owned by the attacker, the program has a 
different, yet equally serious, set of problems to worry about. An attacker who owns 
the directory can change the file permissions and group ownership of the directory to 
lock the process out or prevent it from doing certain actions at certain times. 
Parent Directories 
For a file to be safe, it isn't enough for it to be created securely and be in a secure 
directory. Every directory referenced in the filename has to be equally safe. For 
example, say a program works with a file in this location: 
/tmp/mydir/safedir/safefile. If safedir and safefile are secure and impervious to 
attack, but unprivileged users have ownership or write access to mydir, they can 
simply rename or remove the safedir enTRy and provide their own version of safedir 
and safefile. If the program uses this pathname later, it refers to a completely 
different file. This is why it's important for every directory to be secure, starting at the 
file's parent directory and going all the way up to the root directory. 
Filenames and Paths 
You already know about pathnames, but in this section you revisit them, focusing on 
security-relevant details. A pathname is a sequence of one or more directory 
components separated by the directory separator character, /. The pathname, like 
any other C string, is terminated with the NUL character (\x00). A pathname tells the 
kernel how to follow a path from a known directory location to a file or directory by 
traversing through the directory tree. For example, a pathname of /home/jm/test tells 
the kernel it should start at the root directory (/), then go to the home directory, then 
go to the jm directory, and then open the test file. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
523 
The terminology for files and paths isn't set in stone. Some sources separate a 
pathname into two parts: a path and a filename. In this context, the path is every 
directory component in the pathname except the last one, and it tells the kernel how 
to get to the directory containing the requested file. The filename is the last directory 
component, which is the name of the file in that directory. So the file referenced by 
the /home/jm/test pathname has a path of /home/jm/ and a filename of test. In 
practice, however, most people use the terms "pathname" and "filename" 
interchangeably. Usually, the term "path" indicates the directory containing a file, but 
it's also used when talking about any pathname that refers to a directory. 
There are two kinds of paths: absolute and relative. Absolute paths always start with 
the / character, and they describe how to get from the root directory, which has the 
name /, to another file or directory on the file system. Relative paths start with any 
character other than / or NUL, and they tell the kernel how to get from the process's 
current working directory to the target. 
Every directory has two special entries: the . enTRy, which refers to the directory 
itself, and the .. enTRy, which points to its parent directory. The root directory, which 
has a name of /, has a special .. entry that points back to itself. Files can't contain the 
/ character in their names, nor can they contain the NUL character, but every other 
character is permitted. More than one slash character in a row in a pathname is 
treated as just one slash, so the path /////usr////bin//// is the same as /usr/bin. If 
the pathname refers to a directory, generally it can have any number of trailing 
slashes because they're effectively ignored. 
Say you have the pathname /usr/bin/find. Because it begins with a /, you know that 
it's an absolute path that tells the kernel how to get to the find program from the root 
directory. /./////././usr/bin/../share/../bin/find is also an absolute path that 
references the same file, although it does so in a more circuitous fashion. If the 
currently running process has its current working directory set to the /usr/bin 
directory, perhaps as a result of using chdir("/usr/bin"), the relative pathname find 
references the program, as does ./find or ../../../../../../usr/bin/find. 
It might seem strange, but every time you use a system call that takes a pathname, 
the kernel goes through the process of stepping through each directory to locate the 
file. For the kernel to follow a path, you must have search permissions on every 
directory in that path. A lot of caching goes on to avoid a performance hit, but it's 
worth keeping that behavior in mind when you look at some of the attack vectors later 
in this section. 
Pathname Tricks 
Many privileged applications construct pathnames dynamically, often incorporating 
user-malleable data. These applications often do sanity checking on constructed 
filenames to ensure that they're in a safe location or don't contain any malicious 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
524 
components. For example, imagine you have a privileged program that can be used to 
parse special data files, but these data files can be located in only two directories. The 
program contains the following code: 
if (!strncmp(filename, "/usr/lib/safefiles/", 19)) 
{ 
    debug("data file is in /usr/lib/safefiles/"); 
    process_libfile(filename, NEW_FORMAT); 
} 
else if (!strncmp(filename, "/usr/lib/oldfiles/", 18)) 
{ 
    debug("data file is in /usr/lib/oldfiles/"); 
    process_libfile(filename, OLD_FORMAT); 
} 
else 
{ 
    debug("invalid data file location"); 
    app_abort(); 
} 
Suppose this program takes the filename argument from users. The code tries to 
ensure that the pathname points to a safe location by checking the filename's prefix 
to make sure it points to an appropriate directory in /usr/lib, for which users 
shouldn't have write access. Users could potentially bypass these checks by providing 
a filename such as the following: 
/usr/lib/safefiles/../../../../../../../../etc/shadow 
This filename would pass the filename check, yet still make the privileged application 
open the shadow password file as its data file, which is likely to have exploitable 
consequences. 
An old Linux version of tftpd had a vulnerability of this nature that a researcher 
named Alex Belits discovered. The following code from tftpd is supposed to validate a 
filename (taken from his original bugtraq post, archived at 
http://insecure.org/sploits/linux.tftpd.dotdotbug.html): 
    syslog(LOG_ERR, "tftpd: trying to get file: %s\n", 
       filename); 
    if (*filename != '/') { 
            syslog(LOG_ERR, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
525 
             "tftpd: serving file from %s\n", dirs[0]); 
            chdir(dirs[0]); 
    } else { 
            for (dirp = dirs; *dirp; dirp++) 
                    if (strncmp(filename, 
                        *dirp, strlen(*dirp)) == 0) 
                            break; 
            if (*dirp==0 && dirp!=dirs) 
                    return (EACCESS); 
    } 
    /* 
     * prevent tricksters from getting around the directory restrictions 
     */ 
    for (cp = filename + 1; *cp; cp++) 
            if(*cp == '.' && strncmp(cp-1, "/../", 4) == 0) 
                    return(EACCESS); 
If the filename's first character is a slash, tftpd assumes the directory is an absolute 
path and checks to make sure the initial directory matches up with one it knows about. 
If the filename's first character isn't a slash, ttfpd assumes it's a relative pathname, 
referring to a file in the first predefined directory. 
The code then checks that the filename doesn't contain any /../ sequences; if it does, 
the filename is rejected as being an attack attempt. The problem is that if the 
filename starts with the characters ../, it isn't caught by the check, and remote users 
can retrieve arbitrary files from the system by recursing out of the tftp directory, 
which is usually /tftpd. 
Embedded NUL 
The NUL character terminates a pathname, as a pathname is just a C string. When 
higher-level languages interact with the file system, however, they mostly use 
counted strings and don't use a NUL character to indicate string termination. Java, 
PHP, Visual Basic, and Perl programs can often be manipulated by passing filenames 
containing embedded NUL characters. The programming language views these 
characters as part of the pathname, but the underlying OS views them as a 
terminator. You delve into this pathname-related issue in Chapter 8(? [????.]), 
"Strings and Metacharacters." 
Dangerous Places 
The file system of a multiuser UNIX machine is much like a modern metropolis; most 
neighborhoods are safe, assuming you don't do anything stupid, but in a few parts of 
town, even the police warn you not to stop at traffic lights. On a UNIX machine, the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
526 
"safe neighborhoods" are like gated communities: directories and files that only you 
and your trusted friends have control over. "Doing something stupid" would include 
creating new files and directories with insufficient permissions, the digital equivalent 
of not locking your doors. It would also include asking potentially malicious users for 
input on which files to process, which is akin to asking a thief to help you find a good 
place to hide your money. The dangerous parts of town would correspond to public 
directories that can be a bit scary on large multiuser boxes, such as /tmp, /var/tmp/, 
and the mail spool directory. 
In general, an application can be fairly insulated from file-related vulnerabilities if it 
stays within the safer parts of the file system. For example, if a program interacts 
with the file system just to read static files owned by privileged users, such as 
configuration files in /etc, it's likely to be immune to tampering from malicious third 
parties. If an application has to do more involved file system interaction, but it works 
with files in a safe location and makes sure to create and manipulate new files and 
directories safely, it's still likely to be safe. 
Any time a program has to go beyond these simple use cases, it runs into potential 
problems with malicious third parties manipulating the file system out from under it. 
From this perspective, potentially vulnerable programs are those that have to interact 
with files and directories in hostile locations on the file system. A hostile location is a 
place where other users and programs can interfere with, manipulate, interrupt, or 
hijack the use of files. The following locations are potentially hostile: 
User-supplied locations Any time a file or directory name is constructed based 
on user input, a potential risk emerges. Any daemon or setuid application that 
takes a filename as input from a user of lesser privilege or a network 
connection has to be cautious in how it makes use of that filename. Users 
could easily point a process to a place in the file system where they have total 
control, and then pull off some subtle manipulation of files behind the 
program's back. 
New files and directories A privileged process can work in a totally safe and 
protected location in the file system, but if it creates a new file or directory 
with overly lenient permissions, attackers might be able to manipulate it 
surreptitiously. 
Temporary and public directories Many applications make use of temporary 
files in public directories, and if they are used improperly, the applications are 
exposed to various attacks. Daemons and setuid applications are certainly 
susceptible to these problems, but unprivileged applications can also run into 
trouble. If a program running as a unprivileged user can be tricked into 
exposing that user's files or privileges to other users on the system, it can 
result in a serious vulnerability. 
Files controlled by other users Some setuid applications work with files 
controlled by the unprivileged user who called the program, such as a 
configuration file in the user's home directory. Many daemons make similar 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
527 
use of other users' files, and some daemons even traverse portions of the file 
system periodically to perform maintenance tasks. Privileged programs have 
to be careful about how they interact with these user-controlled files. 
Interesting Files 
A typical UNIX system has several files and directories that are interesting to code 
auditors because they contain secret information or configuration or control data for 
privileged programs, encapsulate hardware or kernel objects, or have behaviors or 
attributes that could be leveraged in an attack. 
When you're auditing code, having a general knowledge of what exists on a typical 
UNIX system is useful because this information can help you brainstorm potential 
attacks. The files covered in the following section are by no means an exhaustive list 
of potentially risky files, but they address some of the more interesting places in the 
file system. 
System Configuration Files 
Configuration files in /etc/ are generally a good target for attackers. Certain daemons, 
such as radius, OpenSSH, VPN daemons, and ntpd, might use shared secrets or 
private keys to encrypt network communication. Attackers who can read the 
configuration files containing these secrets might be able to launch an attack against 
the service or its clients. In general, being able to write to configuration files often 
leads to security exposures, and being able to corrupt or delete them often disables a 
system. The following list describes some commonly targeted files and explains the 
advantages attackers might gain from accessing them: 
Authentication databases (/etc/passwd, /etc/shadow, /etc/master.passwd, 