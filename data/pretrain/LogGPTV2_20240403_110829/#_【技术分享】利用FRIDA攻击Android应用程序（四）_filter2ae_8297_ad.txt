        var ret = ptr(0);
        if (ptr1.isNull() && ptr3.isNull()) {
            send("loading fake pthread_create because ptr1 and ptr3 are equal to 0!");
        } else {
            send("loading real pthread_create()");
            ret = pthread_create(ptr0,ptr1,ptr2,ptr3);
        }
        do_native_hooks_libfoo();
        send("ret: " + ret);
    }, "int", ["pointer", "pointer", "pointer", "pointer"]));
让我们运行这个脚本看看会发生什么事情。请注意，两个native调用pthread_create被hook，因此我们绕过了安全检查(init和anti_debug函数)。还要注意，我们希望在第一个和第三个参数被设置为0时避免pthread_create被调用并在应用程序中留下其它正常的线程。
    [20:07 edu@ubuntu hooks] > python run_usb_spawn.py
    pid: 11075
    [*] Intercepting ...
    [!] Received: [Placing native hooks....]
    [!] Received: [arch: arm64]
    [!] Received: [NativeFunction pthread_create() replaced @ 0x7ef5b63170]
    [!] Received: [Done with native hooks....]
    [!] Received: [pthread_create() overloaded]
    [!] Received: [loading real pthread_create()]
    [!] Received: [p_foo is null (libfoo.so). Returning now...]
    [!] Received: [ret: 0]
    [!] Received: [pthread_create() overloaded]
    [!] Received: [loading fake pthread_create because ptr1 and ptr3 are equal to 0!]
    [!] Received: [ret: 0x0]
    [!] Received: [pthread_create() overloaded]
    [!] Received: [loading fake pthread_create because ptr1 and ptr3 are equal to 0!]
    [!] Received: [ret: 0x0]
    [!] Received: [pthread_create() overloaded]
    [!] Received: [loading real pthread_create()]
    [!] Received: [ret: 0]
    [!] Received: [pthread_create() overloaded]
    [!] Received: [loading real pthread_create()]
    [!] Received: [ret: 0]
或者，如果你想要更多地使用Frida的话，那么你可能会首先想要调用pthread_create观察行为。为此，您可以使用下面的hook。
    // int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
    var p_pthread_create = Module.findExportByName("libc.so","pthread_create");
    Interceptor.attach(ptr(p_pthread_create), {
        onEnter: function (args) {
            this.thread        = args[0];
            this.attr          = args[1];
            this.start_routine = args[2];
            this.arg           = args[3];
            this.fakeRet       = Boolean(0);
            send("onEnter() pthread_create(" + this.thread.toString() + ", " + this.attr.toString() + ", "
                + this.start_routine.toString() + ", " + this.arg.toString() + ");");
            if (parseInt(this.attr) == 0 && parseInt(this.arg) == 0)
                this.fakeRet = Boolean(1);
        },
        onLeave: function (retval) {
            send(retval);
            send("onLeave() pthread_create");
            if (this.fakeRet == 1) {
                var fakeRet = ptr(0);
                send("pthread_create real ret: " + retval);
                send("pthread_create fake ret: " + fakeRet);
                return fakeRet;
            }
            return retval;
        }
    });
Hook secret：一旦抵达这里，我们几乎准备好进行最后一步了。下一个native
hook将包含拦截与用户输入进行比较的参数。在下面的C代码中，我们已经把一个函数重命名为protect_secret。这个函数在一堆经过混淆的操作之后生成secret。一旦生成了这个secret，它就在strncmp_with_xor函数中与用户输入进行比较。如果我们hook这个函数的参数呢？
验证的代码被反编译如下:(名称由我重命名)。
    bool __fastcall Java_sg_vantagepoint_uncrackable3_CodeCheck_bar(JNIEnv *env, jobject this, jbyte *user_input)
    {
      bool result; // r0@6
      int user_input_native; // [sp+1Ch] [bp-3Ch]@2
      bool ret; // [sp+2Fh] [bp-29h]@4
      int secret; // [sp+30h] [bp-28h]@1
      int v9; // [sp+34h] [bp-24h]@1
      int v10; // [sp+38h] [bp-20h]@1
      int v11; // [sp+3Ch] [bp-1Ch]@1
      int v12; // [sp+40h] [bp-18h]@1
      int v13; // [sp+44h] [bp-14h]@1
      char v14; // [sp+48h] [bp-10h]@1
      int cookie; // [sp+4Ch] [bp-Ch]@6
      v14 = 0;
      v13 = 0;
      v12 = 0;
      v11 = 0;
      v10 = 0;
      v9 = 0;
      secret = 0;
      ret = codecheck == 2
         && (protect_secret(&secret),
             user_input_native = _JNIEnv::GetByteArrayElements(env, user_input, 0),
             _JNIEnv::GetArrayLength(env, user_input) == 24)
         && strncmp_with_xor(user_input_native, (int)&secret, (int)&xorkey_native) == 24;
      result = ret;
      if ( _stack_chk_guard == cookie )
        result = ret;
      return result;
    }
为了准备hook
strncmp_with_xor，我们需要在反汇编代码中获得某些偏移量，还要获得libc的基址，并在运行时重新计算最终的指针。可以通过调用Interceptor来附加到native指针。请注意，使用native指针p_protect_secret的hook不需要恢复secret。因此，您可以在脚本中跳过它。
    var offset_anti_debug_x64   = 0x000075f0;
    var offset_protect_secret64 = 0x0000779c;
    var offset_strncmp_xor64    = 0x000077ec;
    function do_native_hooks_libfoo(){
        var p_foo = Module.findBaseAddress("libfoo.so");
        if (!p_foo) {
            send("p_foo is null (libfoo.so). Returning now...");
            return 0;
        }
        var p_protect_secret = p_foo.add(offset_protect_secret64);
        var p_strncmp_xor64  = p_foo.add(offset_strncmp_xor64);
        send("libfoo.so          @ " + p_foo.toString());
        send("ptr_protect_secret @ " + p_protect_secret.toString());
        send("ptr_strncmp_xor64  @ " + p_strncmp_xor64.toString());
        Interceptor.attach( p_protect_secret, {
            onEnter: function (args) {
                send("onEnter() p_protect_secret");
                send("args[0]: " + args[0]);
            },
            onLeave: function (retval) {
                send("onLeave() p_protect_secret");
             }
        });
        Interceptor.attach( p_strncmp_xor64, {
            onEnter: function (args) {
                send("onEnter() p_strncmp_xor64");
                send("args[0]: " + args[0]);
                send(hexdump(args[0], {
                    offset: 0,
                    length: 24,
                    header: false,
                    ansi: true
                }));
                send("args[1]: " + args[1]);
                var secret = hexdump(args[1], {
                    offset: 0,
                    length: 24,
                    header: false,
                    ansi: true
                })
                send(secret);
**  
**
**传送门**
* * *
[**【技术分享】利用FRIDA攻击Android应用程序（一）**](http://bobao.360.cn/learning/detail/3641.html)
[**【技术分享】利用FRIDA攻击Android应用程序（二）**](http://bobao.360.cn/learning/detail/3634.html)
[**【技术分享】利用FRIDA攻击Android应用程序（三）**](http://bobao.360.cn/learning/detail/3794.html)