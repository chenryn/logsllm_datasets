For example, for web browsing—assuming some base trafﬁc
model—the client could collect a set of assets available on
the server to use as its trafﬁc model and inform the server on
which assets to use going forward.
Additionally, the trafﬁc model need not be static. For exam-
ple, in the audio streaming setting, the server could dynam-
ically generate audio from a seed and send that seed along
with covert data to the client. The Balboa client could then
replicate the dynamically-generated music that the server is
sending. For web browsing, the server could be running a
blog in which the articles are automatically generated from
some seed (enabling them to be replaced with covert data for
a Balboa client), while comments (which can be posted by
arbitrary users) can be sent through unmodiﬁed.
2.2 Potential Deployment Scenarios
Due to Balboa’s use of both a shared key and trafﬁc model be-
tween the communicating parties, we believe Balboa’s ideal
deployment scenario is one in which a small trusted set of
clients (such as a select set of journalists) are aware that
a given server is Balboa-enabled. Recall that the Balboa-
enabled server functions exactly as a server would without
Balboa running, and thus this server could provide a service to
the public at large. For example, the server could be a program-
ming blog, providing the set of trusted clients a reasonable
alibi for accessing the server.
2.3
Intercepting TLS Data
Balboa needs to intercept outgoing TLS data (Step 1, Figure 1)
in order to rewrite the underlying plaintext before sending
it to the receiver, and needs to intercept incoming TLS data
(Step 6, Figure 1) to extract the covert data before sending the
(original) plaintext on to the application. In Balboa, we use
dynamic linker features to manipulate network trafﬁc by inter-
cepting calls to libc system call wrappers. This approach has
two distinct advantages over other approaches: (1) since we
are directly running an unmodiﬁed version of the application,
the network trafﬁc characteristics exactly match those of the
application (besides slight timing differences), and (2) the
approach is more amenable to adding support for additional
applications (or additional application versions) since we can
largely treat the application as a black box and do not depend
on the application’s source code.
2.3.1
Implementing Dynamic Library Injection
On Linux, Balboa takes advantage of the LD_PRELOAD op-
tion to ld.so to perform dynamic library injection2. The
dynamic linker causes calls to read(), write(), sendmsg(),
writev(), among others, to be captured by Balboa instead
of performing their usual action inside the C standard library.
Balboa’s injection library is tuned to the particular protocol
to specify (1) which network connections to intercept (e.g.,
based on IP address or port number), and (2) which plaintext
rewriter to use for the particular protocol/application.
This approach does have several subtle considerations that
complicate the implementation, which we discuss below.
Performance considerations. Because Balboa performs
in-band network trafﬁc rewriting, it operates on the “hot path”,
and thus any delay imposed by Balboa’s processing may be
directly visible to a censor monitoring the connection. Thus,
it is vital that Balboa is as efﬁcient as possible. As a result,
Balboa’s rewriter code is designed to be low-latency. We
achieve this primarily by avoiding memory allocation along-
side implementing a high-performance logging library (see
§4), among other standard techniques. We discuss speciﬁc
performance numbers in §6.2.
Recursive calls. Balboa may invoke libc functions as part
of its operation. If such a call occurs within an intercepted
libc function this could cause an inﬁnite loop. Balboa miti-
gates this by maintaining a ﬂag in thread-local storage to see
whether control has already entered an injected function call.
If so, then the libc routine that Balboa replaced is transpar-
ently called instead.
2Balboa additionally works on macOS using DYLD_INSERT_LIBRARIES
(and other features of the macOS dynamic linker) instead of LD_PRELOAD.
3402    30th USENIX Security Symposium
USENIX Association
Signal safety. Several functions that Balboa intercepts are
considered signal-safe by the POSIX standard. As a result,
an application might call any of these functions from inside
a signal-handler. Balboa mitigates this issue via the same
recursive call mechanism described above. That being said,
Balboa is not perfectly signal-safe—more extensive testing
and implementation work is necessary to ensure full signal
safety.
Limitations of dynamic library injection. Because we use
dynamic library injection, Balboa does not work on applica-
tions that do not use dynamic library calls to perform network
operations (such as applications written in Go)3. In addi-
tion, because we only intercept POSIX (and Linux) network
APIs, we restrict ourselves to Unix-like operating systems;
in particular, we do not have Windows support for Balboa.
However, this could potentially be added using DLL injection
techniques; we leave this to future work.
2.4 Extracting TLS Key Material
In order for Balboa to manipulate TLS data it must ﬁrst learn
the TLS key material. It does so by taking advantage of de-
bugging features available in most modern TLS libraries.
SSLKEYLOGFILE. When working with an application
using GnuTLS, NSS4, or Rustls5, Balboa constructs a
named pipe and passes it to the application using the
SSLKEYLOGFILE environment variable. The application sends
a serialized form of the TLS master secret to Balboa which
can use it for further processing.
OpenSSL. OpenSSL does not support the SSLKEYLOGFILE
environment variable. Thus, when working with an appli-
cation that dynamically links to OpenSSL, Balboa uses
LD_PRELOAD to inject a shim over the SSL_new() function
that conﬁgures a callback to receive the TLS key material. For
applications that statically link to OpenSSL, we rely on the
application itself to support SSLKEYLOGFILE; this is the case
for many applications, including curl, among many others.
Because Balboa treats the application’s TLS library as a
gray-box—that is, the only requirement beyond using libc
system call wrappers is that the TLS library supports dumping
the TLS key material in some way—Balboa has a single
TLS rewriter codebase that works with OpenSSL, GnuTLS,
NSS, and Rustls. Since Balboa is very weakly-coupled to the
application’s TLS library, it makes it easy to extend support
3We note that Balboa still works even if the TLS library is statically
linked, as long as the TLS library supports extracting the TLS key material
through the SSLKEYLOGFILE environment variable.
4Mozilla’s TLS library, used in Firefox and Thunderbird, among other
software.
to additional applications, as well as additional TLS libraries.
As an example, no code changes were required to get Balboa
working for Rustls once we implemented GnuTLS support.
A signiﬁcant beneﬁt of extracting TLS key material from
the library itself is that Balboa does not modify the TLS hand-
shake. This prevents a whole class of attacks that censors
commonly employ to detect CRSs [13]. One downside how-
ever is that Balboa cannot make any active changes to the
TLS trafﬁc until the key information has been emitted. Fortu-
nately, every TLS library that we looked at releases the TLS
master secret by the time a TLS Application Record is sent
or received, which is sufﬁcient for Balboa’s needs.
2.5 Processing Intercepted TLS Data
Once Balboa has intercepted the TLS data, the next steps are
to: (1) decrypt the data, (2) rewrite the resulting plaintext,
and (3) re-encrypt the plaintext to either send over the wire or
return to the application. We describe each of these steps in
turn.
2.5.1 Decrypting TLS Data
Balboa decrypts incoming and outgoing TLS data (Steps 2
and 7, Figure 1) identically. How decryption works depends
on the particular TLS version and cipher suite used. In par-
ticular, Balboa currently only supports TLS 1.2 and stream
cipher suites (see §A and §B for a discussion on how we can
support TLS 1.3 and non-stream cipher suites, respectively,
although we leave the implementation to future work). To de-
crypt, Balboa scans the intercepted TLS data for Application
Data records, ignoring other record types6. Once it has found
an Application Data record, it reads the explicit nonce for
the record (if there is one7). Armed with the explicit nonce,
Balboa performs an unauthenticated decryption of the bytes.
As these bytes are decrypted, they are sent to the plaintext
rewriter for processing. After the payload has been processed,
Balboa reads the (original) MAC of the incoming record, and
checks that it is correct. If it is, Balboa generates a new MAC
for the rewritten record, and if not, Balboa generates an in-
valid MAC. While the above gives the high-level idea, we
discuss some subtleties with this approach in §2.5.4.
2.5.2 Rewriting the Plaintext
Given the extracted plaintext data, Balboa either rewrites the
plaintext to make room for covert data (Step 3, Figure 1) or
extracts the covert data and rewrites the plaintext to recover
the original data (Step 8, Figure 1). Rewritten bytes are then
forwarded on for re-encryption.
6Balboa also looks for Alert records. If an Alert record is observed, Balboa
transparently passes trafﬁc to the application without modifying it.
7In TLS 1.2, the ChaCha20-Poly1305 cipher takes the approach that is
5A TLS library written in Rust: https://github.com/ctz/rustls
standard in TLS 1.3 of having no explicit nonce sent over the wire.
USENIX Association
30th USENIX Security Symposium    3403
How rewriting is performed is protocol (and possibly ap-
plication) speciﬁc and must be designed on a per-protocol
basis. This is the key point at which Balboa is conﬁgurable.
We have implemented two instantiations of Balboa—audio
streaming and web browsing—which we discuss in §3.
2.5.3 Re-encryption
The ﬁnal step is to re-encrypt the plaintext before sending it
either over the wire (Step 4, Figure 1) or to the application
itself (Step 9, Figure 1). For the former case, we could simply
re-encrypt using the extracted TLS master secret; however,
this leaves open the possibility that a censor that man-in-the-
middles the TLS connection could extract the user data. We
thus re-encrypt using a key k(cid:48) derived from the TLS master
secret mk and the pre-shared key k. That is, k(cid:48) ← KDF(mk(cid:107)k),
where KDF is a key derivation function (BLAKE3 in our
case). Besides this change, re-encryption operates the same
for Steps 4 and 9.
2.5.4 Handling Partial Reads and Writes
In order to be as faithful to the application’s behavior as
possible, Balboa rewrites TLS data immediately upon inter-
cepting a system call. If a system call returns an error (such as
EWOULDBLOCK), then Balboa forwards that response on to the
caller8. The immediate rewriting, however, results in several
implementation complications, which we elaborate on below.
Handling partial writes. For performance purposes, TLS
libraries optimistically try to write() as much data as possi-
ble. In practice, this means that Balboa gets to see at least one
full TLS record in a single intercepted write(). However,
if the application’s TLS library attempts to write more bytes
than there is room for in the kernel’s buffer, then the kernel
reports that only a partial write occurred. Balboa handles this
by performing unauthenticated decryption until the MAC is
received. Figure 2 provides an illustrated example, where it
takes three write()s to emit a complete TLS record.
Handling partial reads. Handling read()s is more com-
plicated as the number of bytes that read() returns may
depend on censor-controlled network conditions. As a result,
unlike with write()s, where we know that we should see
whole chunks at a time, with read()s a censor could manip-
ulate the TCP connection such that each successful read()
only yields one byte. In order to cope with this, we designed
Balboa to be able to decide what byte to return to the ap-
plication given only a single incoming byte alongside any
previously observed trafﬁc. In particular, when processing
one byte at a time Balboa does not necessarily have access
8An alternative approach would be to perform multiple, e.g., read()s
upon intercepting a read(). However, such an approach would potentially
alter the TCP ﬂow control in a sufﬁcient way to be identiﬁable to a censor.
Figure 2: Processing outgoing TLS records. We consider a
scenario where it takes three calls to the write() function for
the application to write the full TLS record. Green denotes
data written during a given write() call, purple denotes prior
written data, and orange denotes data computed by Balboa.
to the given TLS record’s MAC (that is, it may not be con-
tained in the data acquired for the particular read() function
call made by the application), and so it cannot authenticate
the TLS record until all bytes of the TLS record have been
received. However, Balboa must provide something to the
application on each read() call, and this something must be
the re-encrypted plaintext data if the MAC is indeed correct.
Balboa addresses this conundrum by assuming that the TLS
record is valid, up until the last byte of the incoming MAC,
providing an invalid value for the last MAC byte if it turns
out that the incoming MAC was incorrect.
Figure 3 provides an illustrated example of how Balboa
handles this. In the ﬁgure, the application makes three calls to
the underlying read() function to read the full TLS record.
In the ﬁrst read(), Balboa has not yet received the MAC so
cannot actually validate that the incoming TLS record is valid.
It thus assumes it is, sending back the re-encrypted plaintext
data to the application. In the second read(), Balboa receives
a portion of the MAC. Again, it cannot assume the MAC is
correct, but must provide the plaintext data alongside a por-
tion of the MAC to the application. In this case, it computes
the expected MAC (MAC(cid:48) in the ﬁgure) and passes the requi-
site portion of MAC(cid:48) to the application. Finally, in the third
read(), Balboa receives the full MAC. It does an equality
check between this MAC and its precomputed one: if these
MACs are equal then the TLS record is valid, and Balboa
sends the rest of the MAC on to the application. Otherwise,
it sends the inverse of the last byte of the MAC to force the
application to receive an invalid MAC (which is what the
application would have received in the case where Balboa
3404    30th USENIX Security Symposium
USENIX Association
Data record from the client before it sends any Application
Data itself (as is the case in HTTP and other protocols), and
(2) one in which it does not make this assumption.
Setting #1. When Balboa intercepts the client’s ﬁrst Ap-
plication Data record, it leaves the plaintext untouched but
replaces the MAC T with T ⊕ kC. Because the client has
already veriﬁed the server’s certiﬁcate as part of the key ex-
change, the censor is unable to distinguish between T and
T ⊕ kC.
On the server, Balboa looks for the incoming client-sent
Application Data record. Balboa then checks to see whether
T or T ⊕ kC is a valid MAC for the given record. If T is a
valid MAC then the server assumes it is dealing with a non-
Balboa client and enters a transparent pass-through state in
which it performs no trafﬁc modiﬁcation. If T ⊕ kC is a valid
MAC, then signaling has succeeded and the rewriting stages
can proceed as normal. If neither T nor T ⊕ kC is a valid
MAC, then Balboa passes an intentionally invalid MAC to the
application and enters a transparent pass-through state. This
case may occur if the censor has tampered with the connection,
and by passing an invalid MAC to the application, Balboa
causes it to respond as it would ordinarily to an invalid MAC.
Setting #2.
If the client does not always send an Application
Data record before the server, then Balboa proceeds as follows.
Balboa on the server starts by transparently passing-through
all outgoing Application Data records. When Balboa on the
client receives these records, it also transparently passes them
on to its application.
Balboa on the client performs the same operation as in Set-
ting #1 on the ﬁrst client-sent Application Data record. The
client has now successfully completed its outgoing signal-
ing efforts, and can now freely perform its normal plaintext
rewriting and re-encryption processes on its outgoing trafﬁc.
Because TLS (and TCP) are full-duplex protocols, there is
no ordering relationship between client-to-server messages
and server-to-client messages. The client can immediately
proceed with its normal outgoing rewriting processes because
the ordering constraints of TCP and TLS ensure that the server
sees the Application Data message with the mangled MAC
before it sees any messages sent after that. However, when a
message comes in from the server, the client does not know
whether that message was sent before or after the server saw
the client’s initial signaling message (in the form of the man-
gled MAC). As a result, the client does not know which key
(namely, the standard TLS master secret or the derived re-
encryption key) to use to decrypt the message. In addition,
the client does not know whether to attempt to rewrite the
message. To reiterate, the problem is the following: the client
knows that the server is a Balboa-server, and it has told the
server that it is a Balboa-client, but because incoming and
outgoing messages have no ordering relationship, the client
Figure 3: Processing incoming TLS records. We consider a
scenario where it takes three calls to the read() function for
the application to read the full TLS record. Green denotes
data read during a given read() call, purple denotes prior
read data, and orange denotes data computed by Balboa.
was not used).
2.6 Signaling
While the above steps allow parties to communicate using
Balboa, an important step is for the parties to signal that
they want to send/receive data in the ﬁrst place. Balboa’s
signaling protocol allows the client and server to authenticate
to each other, and is designed to be secure even against active
probes made by the censor. We assume a secret key k has
been pre-shared between the client and server, and use that—
in conjunction with the TLS master secret—to derive a server
key kS and client key kC.
2.6.1 How the Client Authenticates the Server