User
Uses
Displays data
to
Nim
Ruby
Figure 7.1
The three different 
components in the MVC architec-
ture and how they interact
Model
View
Current Answer: 5000 
Current Operation: Add 
Current Input: None 
Controller
Operation
Input
Figure 7.2
The three different 
MVC components as seen on a 
calculator’s GUI
Licensed to   
183
Architecture of a web application
architectural patterns, and there are some web frameworks that are pattern agnostic.
This type of framework is more suited for small web applications, or applications that
don’t need to incorporate all the components of the MVC pattern.
 Sinatra is one example of a framework that doesn’t enforce the MVC pattern. It’s
written in Ruby, just like Ruby on Rails, but it has been designed to be minimalistic. In
comparison to Ruby on Rails, Sinatra is much lighter because it lacks much of the
functionality that’s common in full-fledged web application frameworks:
 Accounts, authentication, and authorization
 Database abstraction layers
 Input validation and sanitation
 Templating engines
This makes Sinatra very simple to work with, but it also means that Sinatra doesn’t sup-
port as many features out of the box as Ruby on Rails does. Sinatra instead encourages
developers to work on additional packages that implement the missing functionality.
 The term microframework is used to refer to minimalistic web application frame-
works like Sinatra. Many microframeworks exist, some based on Sinatra and written in
various programming languages. There’s even one written in Nim called Jester.
 Jester is a microframework heavily based on Sinatra. At the time of writing, it’s
one of the most popular Nim web frameworks. We’ll use Jester to develop the web
application in this chapter, as it’s easy to get started with and it’s the most mature of
the Nim web frameworks. Jester is hosted on GitHub: https://github.com/dom96/
jester. Later on in this chapter, you’ll see how to install Jester using the Nimble pack-
age manager, but first I’ll explain how a microframework like Jester can be used to
write web applications.
7.1.1
Routing in microframeworks
Full-fledged web frameworks usually require a big application structure to be created
before you can begin developing the web application. Microframeworks, on the other
hand, can be used immediately. All that’s needed is a simple definition of a route. The
following listing shows a simple route definition in Jester.
routes:
get "/":
resp "Hello World!"
To better understand what a route is, let me first explain how your web browser
retrieves web pages from web servers. Figure 7.3 shows an HTTP request to twitter
.com.
 When you’re browsing the internet and you navigate to a website or web page,
your web browser requests that page using a certain URL. For example, when navigat-
ing to the front page of Twitter, your web browser first connects to twitter.com and
Listing 7.1
A / route defined using Jester
Licensed to   
184
CHAPTER 7
Building a Twitter clone
then asks the Twitter server to send it the contents of the front page. The exchange
occurs using the HTTP protocol and looks something like the following.
GET / HTTP/1.1
Host: twitter.com
Note the similarities between the information in listing 7.2 and listing 7.1. The two
important pieces of information are the GET, which is a type of HTTP request, and the /,
which is the path of the web page requested. The / path is a special path that refers to
the front page.
 In a web application, the path is used to distinguish between different routes. This
allows you to respond with different content depending on the page requested. Jester
receives HTTP requests similar to the one in listing 7.2, and it checks the path and exe-
cutes the appropriate route. Figure 7.4 shows this operation in action.
 An ordinary web application will define multiple routes, such as /register, /login,
/search, and so on. The web application that you’ll develop will include similar
routes. Some routes will perform certain actions, such as tweeting, whereas others will
simply retrieve information. 
Listing 7.2
A simple HTTP GET request
GET / HTTP/1.1
Host: twitter.com
HTTP/1.1 200 OK 
...
Twitter
server
Figure 7.3
An HTTP request to twitter.com
Specifies three pieces of information: the type 
of HTTP request used, the path of the page 
requested, and the HTTP protocol version
The HTTP request may include one or 
more headers. The Host header 
specifies the domain name that the 
web browser has connected to.
An empty line is sent to ask 
the server for a response.
GET / HTTP/1.1 
routes:
  get "/": 
    resp "Hello World!" 
HTTP/1.1 200 OK 
Hello World! 
routes:
  get "/": 
    resp "Hello World!" 
Figure 7.4
HTTP requests and routing in Jester
Licensed to   
185
Architecture of a web application
7.1.2
The architecture of Tweeter
Tweeter is what we’ll call the simplified version of Twitter that you’ll develop in this
chapter. Obviously, implementing all of Twitter’s features would take far too much
time and effort. Instead, Tweeter will consist of the following features:
 Posting messages up to 140 characters
 Subscribing to another user’s posts, called following in Twitter and many other
social media websites
 Viewing the messages posted by users you’re following
Some of Twitter’s features that won’t be implemented are
 User authentication: the user will simply type in their username and log in with
no registration required
 Search, including hashtags
 Retweeting, replying to messages, or liking messages
That’s a pretty small set of features, but it should be more than enough to teach you
the basics of web development in Nim. Through these features, you’ll learn several
things:
 How web application projects are structured
 How to store data in a SQL database
 How to use Nim’s templating language
 How to use the Jester web framework
 How the resulting application can be deployed on a server
The architecture of Tweeter will roughly follow the MVC architectural pattern
explained earlier.
 The following information will need to be stored in a database:
 Posted messages, and the users who posted them
 The username of each user
 The names of the users that each user is following
When you’re developing web applications, it’s useful to abstract database operations
into a separate module. In Tweeter, this module will be called database and it will
define procedures for reading from and writing to a database. This maps well onto the
model component in the MVC architecture.
 HTML will need to be generated based on the data provided by the database mod-
ule. You’ll create two separate views containing procedures to generate HTML: one for
the front page and the other for the timelines of different users. For example, a ren-
derMain procedure will generate an HTML page, and a renderUser procedure will
generate a small bit of HTML representing a user.
Licensed to   
186
CHAPTER 7
Building a Twitter clone
 Finally, the main source code file that includes the routes will act as the controller.
It will receive HTTP requests from the web browser, and, based on those requests, it
will perform the following actions:
 Retrieve the appropriate data from the database
 Build the HTML code based on that data
 Send the generated HTML code back to the requesting web browser
Figure 7.5 shows the process of developing these three components and their features.   
7.2
Starting the project
The previous section described how web applications in general are designed and spe-
cifically how Tweeter will be designed, so you should have a reasonable idea of what
you’ll be building in this chapter. This section describes the first steps in beginning
the project, including the following:
 Setting up Tweeter’s directory structure
 Initializing a Nimble package
 Building a simple Hello World Jester web application
Just like in chapter 3, we’ll start by creating the directories and files necessary to hold
the project. Create a new Tweeter directory in your preferred code directory, such as
C:\code\Tweeter or ~/code/Tweeter. Then create a src directory inside that, and a
Nim source code file named tweeter.nim inside the src directory. This directory struc-
ture is shown in the following listing.
Tweeter
└── src
└── tweeter.nim
Listing 7.3
Tweeter’s directory structure
database  module
post(message)
follow(follower, user)
create(user)
View modules
renderMain(html)
renderUser(user)
Controller
Stores information
about users, posts,
and followers
Transforms information
from the database
into HTML
Sends HTML
to browser
via HTTP
Renders HTML
using views
Controls 
database
Figure 7.5
The components of Tweeter 
and how they’ll be developed
Licensed to   
187
Starting the project
The web framework that this project will use is Jester. This is an external dependency
that will need to be downloaded in order for Tweeter to compile. It could be down-
loaded manually, but that’s not necessary, because Jester is a Nimble package, which
means that Nimble can download it for you.
 Chapter 5 showed you how to use Nimble, and in this chapter you’ll use Nimble
during development. To do so, you’ll need to first create a .nimble file. You may recall
that Nimble’s init command can be used to generate one quickly.
 To initialize a .nimble file in your project’s directory, follow these steps:
1
Open a new terminal window.
2
cd into your project directory by executing something like cd ~/code/Tweeter.
Make sure you replace ~/code/Tweeter with the location of your project.
3
Execute nimble init.
4
Answer the prompts given by Nimble. You can use the default values for most of
them by simply pressing Enter.
If you’ve done everything correctly, your terminal window should look something like
figure 7.6.
Now, open the Tweeter.nimble file that was created by Nimble. It should look similar
to the following.
# Package
version
= "0.1.0"
author
= "Dominik Picheta"
description
= "A simple Twitter clone developed in Nim in Action."
license
= "MIT"
# Dependencies
requires "nim >= 0.13.1"
Listing 7.4
The Tweeter.nimble file
Figure 7.6
Successful initialization of a Nimble package
Licensed to   
188
CHAPTER 7
Building a Twitter clone
As you can see in the last line, in order for the Tweeter package to successfully com-
pile, the Nim compiler’s version must be at least 0.13.1. The requires line specifies
the dependency requirements of the Tweeter package. You’ll need to edit this line to
introduce a requirement on the jester package. Simply edit the last line so that it
reads requires "nim >= 0.13.1", "jester >= 0.0.1". Alternatively, you can add
requires "jester >= 0.0.1" at the bottom of the Tweeter.nimble file.
 You’ll also need to add bin = @["tweeter"] to the Tweeter.nimble file to let Nim-
ble know which files in your package need to be compiled. You should also instruct
Nimble not to install any Nim source files, by adding skipExt = @["nim"] to the file.
Your Tweeter.nimble file should now contain the following lines.
# Package
version
= "0.1.0"
author
= "Dominik Picheta"
description
= "A simple Twitter clone developed in Nim in Action."
license
= "MIT"
bin = @["tweeter"]
skipExt = @["nim"]
# Dependencies
requires "nim >= 0.13.1", "jester >= 0.0.1"
Now, open up tweeter.nim again, and write the following code in it.
import asyncdispatch
import jester
routes:
get "/":
resp "Hello World!"
runForever()
Go back to your terminal and execute nimble c -r src/tweeter. Your terminal should
show something like what you see in figure 7.7.
 Compiling your project using Nimble will ensure that all dependencies of your
project are satisfied. If you haven’t previously installed the Jester package, Nimble will
install it for you before compiling Tweeter.
 As you can see in figure 7.7, Jester lets you know in its own whimsical way about the
URL that you can use to access your web application. Open a new tab in your favorite
Listing 7.5
The final Tweeter.nimble file
Listing 7.6
A simple Jester test
This module defines the runForever procedure, 
which is used to run the event loop.
Imports the Jester web framework
These are part of the DSL 
defined by Jester.
Starts the definition of the routes
Defines a new route that will be 
executed when the / path is accessed 
using an HTTP GET request
Responds with the text “Hello World!”
Runs the asynchronous event loop forever
Licensed to   
189
Storing data in a database
web browser and navigate to the URL indicated by Jester, typically http://local-
host:5000/. At that URL, you should see the “Hello World” message shown in figure 7.8.
Your web application will continue running and responding to as many requests as
you throw at it. You can terminate it by pressing Ctrl-C.
 With Nimble’s help, you were able to get started with Jester relatively quickly, and
you now have a good starting point for developing Tweeter. Your next task will involve
working on the database module. 
7.3
Storing data in a database
Tweeter will use a database module to implement the storage and querying of infor-
mation related to the messages and users. This module will be designed in such a way
that it can easily be extended to use a different database implementation later.
 Because Nim is still relatively young, it doesn’t support as many databases as some of
the more popular programming languages such as C++ or Java. It does, however, sup-
port many of the most popular ones, including Redis, which is a key-value database;
Figure 7.7
The successful compilation and execution of tweeter
Figure 7.8
“Hello World!” from Jester
Licensed to   
190
CHAPTER 7
Building a Twitter clone
MongoDB, which is a document-oriented database; MySQL, which is a relational data-
base; and many more.
 If you’re familiar with databases, you’ll know that both Redis and MongoDB are
what’s known as NoSQL databases. As the name suggests, these databases don’t sup-
port SQL for making queries on the database. Instead, they implement their own lan-
guage, which typically isn’t as mature or sophisticated as SQL.
 It’s likely that you have more experience with relational databases than any of the
many different types of NoSQL databases, so you’ll be happy to hear that Nim supports
three different SQL databases out of the box. MySQL, SQLite, and PostgreSQL are all
supported via the db_mysql, db_sqlite, and db_postgres modules, respectively.
 Tweeter will need to store the following information in its database:
 Messages posted by users with metadata including the user that posted the mes-
sage and the time it was posted
 Information about specific users, including their usernames and the names of
users that they’re following
All the databases I mentioned can be used to store this information. The choice of
database depends on the requirements. Throughout this chapter, I use a SQL database
for development, and specifically SQLite because it’s far easier to get started with than
MySQL or PostgreSQL.
MYSQL AND POSTGRESQL SUPPORT
Both MySQL and PostgreSQL are sup-
ported by Nim in the same way that SQLite is. Changing between different
database backends is trivial. As far as code changes go, simply importing
db_mysql or db_postgres instead of db_sqlite should be enough.
7.3.1
Setting up the types
Let’s begin by setting up the types in the database module. First, you’ll need to create
a new database.nim file in Tweeter’s src directory. You can then define types in that
file. These types will be used to store information about specific messages and users.
 The next listing shows what those definitions look like.
import times
type
User* = object
username*: string
following*: seq[string]
Listing 7.7
The types that store a Tweeter message and user information
Imports the times module, which 
defines the Time type needed in 
the definition of Message
Begins a new type definition section
Defines a new User value type
Defines a string field named 
username in the User type
Defines a sequence named following in 
the User type, which will hold a list of 
usernames that the user has followed
Licensed to   
191
Storing data in a database
Message* = object
username*: string
time*: Time
msg*: string
The User type will represent information about a single specific user, and the Message
type will similarly represent information about a single specific message. To get a bet-
ter idea of how messages will be represented, look at the sample Twitter message
shown in figure 7.9.
An instance of the Message type can be used to represent the data in that message, as
shown in the next listing.
var message = Message(
username: "d0m96",
time: parse("18:16 - 23 Feb 2016", "H:mm - d MMM yyyy").toTime,
msg: "Hello to all Nim in Action readers!"
)
Figure 7.9 doesn’t include information about the people I follow, but we can speculate
and create an instance of the User type for it anyway.
var user = User(
username: "d0m96",
following: @["nim_lang", "ManningBooks"]
)
Listing 7.8
Representing the data in figure 7.9 using an instance of Message
Listing 7.9
Representing a user using an instance of User
Defines a string field named username in 
the Message type. This field will specify 
the unique name of the user who posted 
the message.
Defines a new Message value type
Defines a floating-point time field in the 
Message type. This field will store the time 
and date when the message was posted.
Defines a string field named msg in 
the Message type. This field will 
store the message that was posted.
Figure 7.9
A sample Twitter message
The parse procedure is defined in the times module.
It can parse a given time in the specified format and
return a TimeInfo object that holds that time.
Licensed to   
192
CHAPTER 7
Building a Twitter clone
The database module needs to provide procedures that return such objects. Once
those objects are returned, it’s simply a case of turning the information stored in
those objects into HTML to be rendered by the web browser. 
7.3.2
Setting up the database