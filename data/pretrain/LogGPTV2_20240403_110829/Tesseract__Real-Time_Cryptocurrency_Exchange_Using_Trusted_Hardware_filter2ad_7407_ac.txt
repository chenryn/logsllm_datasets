current account balances of the users. See Figure 6 for an
illustration, and Section 5 regarding a secure settlement
protocol.
The enclave extends the time limit of each user’s
output in the settlement transactions that it constructs
(e.g., if the user could control the output in 5 days before
the settlement, then she could control the output in 19
days after the settlement). This allows uninterrupted
7
trading by active traders. To minimize the size of the
settlement transactions, users who did not trade are not
included in the inputs and outputs. When some of a
user’s funds are in an output whose time limit is about
to expire, the user will be prohibited from trading. The
user is permitted to send a renewal request before the
expiration, in case she was unlucky and none of her
trade orders were matched (renewal after the expiration
can be exploited by malicious users who would create
conﬂicting transactions near the time limit). The user can
also request an early withdrawal of some of her funds.
This is done by directing the enclave to prepare an output
that is controlled only by the user, in the next settlement.
In our design,
the Tesseract exchange collects a
proportional fee for each successful trade (e.g., 0.1%
from both ends of a trade), and a ﬂat fee for early
withdrawal and renewal requests. The exchange limits
the total number of pending orders that a user may have
in the order book, and users who ﬂood the exchange
with an excessive number of orders may be penalized
(by conﬁscating some of their funds) or blacklisted for
a period of time. The fees that Tesseract collects are
needed in order to pay miner fees for the settlement
transactions.
Forthcoming Bitcoin support for aggregated Schnorr
signatures [82] will enable Tesseract to attach a single
signature to the settlement transaction, instead of one
signature for every input. This implies that the settlement
transaction size can be halved, which is signiﬁcant for
large transactions (e.g., with 1000 traders the transaction
size will 64 kilobytes smaller).
It is also likely that
miners will impose a considerably lower fee for a large
settlement transaction with a single aggregated signature.
Let us note that signature aggregation is required in
principle if the enclave refreshes its deposit address after
each settlement, since the aggregated signature will need
to be veriﬁed against different public keys.
In case of a forthcoming hard fork of the kind
that created Ethereum Classic or Bitcoin Cash, users
should secure themselves against replay attacks (cf.
[49, Section 2.4]) by withdrawing their coins from the
Tesseract exchange. The users may switch to a new
version of Tesseract with updated code that supports
the hard fork (or completely new cryptocurrencies),
and which can be deployed at a later time. Our
implementation has dynamic support for ERC20 tokens,
hence no switch is needed when new ERC20 tokens are
introduced (a user can create new order book pairs, for a
fee).
In Appendix B we provide excerpts of our reference
code that corresponds to the above description.
4.1 Eclipse Attacks
Let us assume an adversary A that controls some p  1, it
is possible to set a large enough n so that the probability
of a successful attack becomes negligible. However, a
large n implies that honest users need to wait for a long
time before their deposit is conﬁrmed, which makes the
Tesseract exchange service unattractive.
Table 2: Deposit conﬁdence vs false positives
n Pr[Erlang(n, p) ≤ δ n] Pr[Erlang(n,1) > δ n]
δ
p
1
60
10 2
1
10 2 120
1
5 1.5 120
1
4 1.3 120
2−75
2−145
2−92
2−82
2−31
2−58
2−21
2−10
In Table 2 we provide exemplary concrete parameters
for n and δ . E.g., the third row of Table 2 shows that with
n = 120 (20 hours on average in Bitcoin) and δ = 1.5:
• An adversary with computational power p ≤ 1
5 can
mount a successful eclipse attack on the enclave
with probability 2−92 or smaller.
• On expectation, an honest user will need to wait
for extra conﬁrmations once in every ≈ 2 million
deposits that she makes.
While the concrete parameters that can be obtained
are already quite reasonable, let us stress that prudent
users of the Tesseract exchange will not be exposed to
eclipse attacks at all. Any user can simply compare
the latest blocks in the actual cryptocurrency networks
with the latest blocks that Tesseract enclave publishes
(with remote attestation), and cancel her bids/asks in case
of a discrepancy. In the example above, the honest Pj
will avoid Pi’s attack by observing that the latest Bitcoin
blocks that Tesseract published are inconsistent with the
real Bitcoin network, and refuse to trade her LTC for
BTC. Our practical instantiation of Tesseract has another
layer of security that further protects (incautious) users
from eclipse attacks, see Section 5.3.
4.2 Secure Communication
For each user who has already opened an account with
Tesseract, we establish a secure channel (TLS) when
the user wishes to communicate with the enclave. The
reasons for a channel with authenticated encryption are
the following:
• Fast
identiﬁcation: The authenticated messages
in the TLS Record Protocol are computed via
symmetric-key operations, after the initial key
exchange (done via public-key operations in the
Handshake Protocol)
to establish the channel.
Since symmetric-key operations are an order of
magnitude faster than public-key operations, a
persistent TLS connection delivers performance
suitable for real-time trades.
8
• Frontrunning prevention: An adversary can try to
inspect the entire communication ﬂow that arrives
at the Tesseract server, learn information regarding
and exploit
real-time actions of other users,
this information to perform trades.
Encrypted
communication avoids such attacks.
An example of a frontrunning attack is shown
in Figure 5. There, Alice believes that the BTC price
is going to rise. Therefore, she places an order to buy 10
BTC at $870 each, so that any of the current sellers will
match her order ﬁrst. On the other hand, Bob believes
that the price of BTC is going to drop, and he therefore
places an order to sell his 10 BTC for a price that is as low
as $820. Given the public order book, Bob’s intention is
thus to sell 2 BTC for $850, 5 BTC for $840, and 3 BTC
for $820. If the trades are executed in this order, it will
be to the beneﬁt of Bob, because he will actually sell 10
BTC to Alice for $870 each. However, an adversary with
this knowledge can permute the orders and insert her own
new orders.
In this scenario, the adversary would be
guaranteed to gain $10· (870− 851) = $190, by buying
Bob’s 10 BTC cheaply and then selling it to Alice.
Since all users send encrypted messages through their
secure channels, an adversary with a physical control
of the Tesseract server cannot frontrun other users. To
the best of our knowledge, all the other designs of
cryptocurrency exchanges are exposed to these kinds of
frontrunning attacks.
We note that an adversary may still observe patterns
of communication at
the IP-level and try to learn
information about the traders. An IP-level anonymizer
(e.g., Tor [24]) is inapplicable as a mitigation technique
against such adversaries, since users wish to perform
real-time trades. However, the user’s client can randomly
inject dummy data into the TLS channel (which would
be ignored on arrival), thereby making it more difﬁcult
to track communication patterns. Furthermore, in future
versions of Tesseract we plan to allow users to upload
an algorithmic trading program to their enclave account
(for a fee), that will enable them to issue multiple trading
orders without communication with the server. The
use of automated trading programs is quite popular in
centralized exchanges (cf. [7]), although these automated
traders do communicate each of their orders to the server.
4.3 Double Attestation
Several reputable providers may wish to offer different
variants of the Tesseract service (perhaps with their
own tokenized coins and ﬁat assets, see Sections 7
and 8). This raises the following question: does a single
entity (i.e., the hardware manufacturer) have the power
to compromise the security of all the Tesseract-based
platforms, simultaneously?
Figure 5: Example of frontrunning.
No such single entity exists with regard to centralized
exchanges (cf. Section 3.1), because these exchanges are
independent of one another. That is to say, a security
breach of one centralized exchange will not have a direct
impact on the users of the other centralized exchanges.
For trusted hardware with remote attestation support,
the plain way that the manufacturer can break security
is by attesting to fraudulent data.
In our context,
there are two Tesseract-
suppose for example that
based exchanges X1,X2 that
invite users to deposit
their funds to PKSGXBTC1 and PKSGXBTC2, respectively.
If Intel has knowledge of the secret signing keys
sk1,sk2 that are embedded into the CPUs of X1 and
X2,
to fresh
SGXBTC1,PK(cid:48)
ephemeral public keys PK(cid:48)
that
Intel would generate together with the corresponding
secret keys SK(cid:48)
SGXBTC1,SK(cid:48)
SGXBTC2. Thus, Intel will
be able deceive users into sending their deposits to
PK(cid:48)
SGXBTC1,PK(cid:48)
SGXBTC2, and then steal funds that users
wished to deposit to X1,X2.
then it can forge signatures that attest
SGXBTC2
The manufacturer may also break security by
embedding malicious logic into the hardware.
For
instance, whenever an application executes code that
generates a (supposedly) random secret key, the key will
actually be generated in a way that can be predicted
by the manufacturer. While this attack would be
easy enough if there were one assembly opcode that
generates a random key (the malicious opcode can
use a randomness source with low entropy), it is far
more difﬁcult to achieve predictable behavior for any
application-level code that is executed by a general-
purpose CPU.
Another attack vector that the hardware manufacturer
may attempt is simply to send the data that a CPU
the network (to the manufacturer’s
generates over
address), without
the
administrator of the server computer. This is indeed a
concern with Intel’s Management Engine (see [63]), but
it is not an inherent defect of the trusted hardware model
(and hopefully the Management Engine will soon have
consent or knowledge of
9
Price    Volume $850       2 $840       5 $820       5Buying           Order Book (BTC/USD)Arrival of new orders:1. Alice:  buy($870, 10)2.   Bob: sell($820, 10)Frontrunning:1. Adversary:  buy($851, 10)2.       Bob: sell($820, 10)3.     Alice:  buy($870, 10)4. Adversary: sell($870, 10)SellingPrice    Volume $890       3 $906       5 $945       4their original deposit (or the last settlement transaction)
expires.
are
(that
trading among multiple
On the other hand,
cryptocurrency systems
independent of
one another) may allow an adversary to steal funds from
honest users. We provide an illustration of the risk in
Figure 6. Suppose for instance that 1 BTC is worth
$2000, and also that the market price of 1 BTC is 300
LTC. In the illustration, Alice and Bob traded 1000 BTC
(i.e., $2 million worth of BTC) for 300000 LTC (i.e., $2
million worth of LTC), while Carol and Dave traded 1
BTC for 300 LTC. Thus, the enclave will construct and
sign the Bitcoin and Litecoin settlement transactions,
and attempt to broadcast the settlements to the Bitcoin
and Litecoin networks. An adversary with physical
access to the Tesseract server can collude with Alice
and intercept the Bitcoin settlement transaction when it
leaves the CPU but before it is broadcast to the Bitcoin
network, and let the Litecoin settlement transaction go
through and reach the Litecoin network. The result
is that the transfer of ownership of $2 million worth
of LTC from Bob to Alice will be committed on the
Litecoin system, while the transfer of ownership of $2
million worth of BTC will never occur. In effect, Bob
lost $2 million worth of funds to Alice.
Let us provide security deﬁnitions that capture the
above fairness problem.
Deﬁnition 1 (All-or-nothing settlement). Given the
transaction tx1 for system CA and the transaction tx2 for
system CB, an all-or-nothing cross-chain settlement is a
protocol that guarantees that
1. Both tx1 will become conﬁrmed on system CA and
tx2 will become conﬁrmed on system CB, or
2. Neither tx1 will become conﬁrmed on system CA nor
will tx2 become conﬁrmed on system CB.
Notice that Deﬁnition 1 does not
In our context, CA and CB are cryptocurrencies. We
stress that parties that execute the consensus protocol for
CA may be unaware of the existence of CB, and vice versa.
imply that
honest users are fully protected against ﬁnancial loss.
Speciﬁcally, an adversary A that prevents both tx1 and
tx2 from being conﬁrmed may beneﬁt at the expense
of honest users: A may wish to renege on a trade after
observing some external events and/or price ﬂuctuations
that worked to her disadvantage. Still, Deﬁnition 1
implies better security than that of the commonplace
centralized exchanges (cf. Section 3.1), because the
users of such centralized exchanges run not only the risk
that their trades will be reversed but also the risk that
their initial funds will be stolen.
Figure 6: The cross-chain settlement problem.
an opt-out option).
Similarly to [71],