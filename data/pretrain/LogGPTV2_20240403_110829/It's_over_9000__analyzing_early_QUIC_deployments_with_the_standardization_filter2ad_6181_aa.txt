title:It's over 9000: analyzing early QUIC deployments with the standardization
on the horizon
author:Johannes Zirngibl and
Philippe Buschmann and
Patrick Sattler and
Benedikt Jaeger and
Juliane Aulbach and
Georg Carle
It’s Over 9000: Analyzing Early QUIC Deployments with the
Standardization on the Horizon
Johannes Zirngibl
Technical University of Munich
Garching bei München, Germany
PI:EMAIL
Benedikt Jaeger
Technical University of Munich
Garching bei München, Germany
PI:EMAIL
Philippe Buschmann
Technical University of Munich
Garching bei München, Germany
PI:EMAIL
Patrick Sattler
Technical University of Munich
Garching bei München, Germany
PI:EMAIL
Juliane Aulbach
Technical University of Munich
Garching bei München, Germany
PI:EMAIL
Georg Carle
Technical University of Munich
Garching bei München, Germany
PI:EMAIL
ABSTRACT
After nearly five years and 34 draft versions, standardization of the
new connection oriented transport protocol QUIC was finalized
in May 2021. Designed as a fundamental network protocol with
increased complexity due to the combination of functionality from
multiple network stack layers, it has the potential to drastically
influence the Internet ecosystem. Nevertheless, even in its early
stages, the protocol attracted a variety of parties including large
providers. Our study shows, that more than 2.3 M IPv4 and 300 k
IPv6 addresses support QUIC hosting more than 30 M domains.
Using our newly implemented stateful QUIC scanner (QScanner)
we are able to successfully scan 26 M targets. We show that TLS as
an integral part is similarly configured between QUIC and TLS over
TCP stacks for the same target. In comparison, we identify 45 widely
varying transport parameter configurations, e.g., with differences
in the order of magnitudes for performance relevant parameters.
Combining these configurations with HTTP Server header values
and associated domains reveals two large edge deployments from
Facebook and Google. Thus, while found QUIC deployments are
located in 4667 autonomous systems, numerous of these are again
operated by large providers.
In our experience, IETF QUIC already sees an advanced deploy-
ment status mainly driven by large providers. We argue that the
current deployment state and diversity of existing implementations
and seen configurations solidifies the importance of QUIC as a fu-
ture research topic. In this work, we provide and evaluate a versatile
tool set, to identify QUIC capable hosts and their properties.
Besides the stateful QScanner we present and analyze a newly im-
plemented IPv4 and IPv6 ZMap module. We compare it to additional
detection methods based on HTTP Alternative Service Header val-
ues from HTTP handshakes and DNS scans of the newly drafted
HTTPS DNS resource record. While each method reveals unique
deployments the latter would allow lightweight scans to detect
QUIC capable targets but is drastically biased towards Cloudflare.
This work is licensed under a Creative Commons Attribution International 4.0 License.
IMC ’21, November 2–4, 2021, Virtual Event, USA 
© 2021 Copyright held by the owner/author(s). 
ACM ISBN 978-1-4503-9129-0/21/11.
https://doi.org/10.1145/3487552.3487826
CCS CONCEPTS
• Networks → Network protocols; Network measurement.
KEYWORDS
IETF QUIC, TLS, Server Deployment, Internet Measurement
ACM Reference Format:
Johannes Zirngibl, Philippe Buschmann, Patrick Sattler, Benedikt Jaeger, Ju-
liane Aulbach, and Georg Carle. 2021. It’s Over 9000: Analyzing Early QUIC
Deployments with the Standardization on the Horizon. In ACM Internet Mea-
surement Conference (IMC ’21), November 2–4, 2021, Virtual Event, USA. ACM,
New York, NY, USA, 15 pages. https://doi.org/10.1145/3487552.3487826
1 INTRODUCTION
QUIC, a new connection-oriented Internet protocol was finally
standardized by the Internet Engineering Task Force (IETF) in May
2021 [21]. The protocol was initially developed and implemented
by Google and made public in 2013 [23]. Afterwards, the official
standardization process was transferred to the IETF within its own
working group1. Over the years, the base draft passed through 34
revisions before entering its last calls.
The QUIC protocol combines functionalities from different layers
of the network stack, including the transport layer, security in
the form of Transport Layer Security (TLS) and stream control to
optimize higher layer applications. The integration of QUIC into the
protocol stack and the comparison to TLS over TCP can be seen in
Figure 1. In addition to the QUIC base protocol, Hypertext Transfer
Protocol (HTTP) Version 3 is drafted [4], specifically focusing on
the deployment of HTTP on top of QUIC. This combination of
functionality from multiple layers increases the overall complexity
of a protocol and, therefore, increases the possibility of diverging
implementations, potential errors or unintended behavior.
As new, fundamental network protocol, QUIC has the potential
to drastically influence the Internet ecosystem. It attracted a variety
of providers, developers and contributors even in its early stages.
The QUIC working group already lists 22 different implementa-
tions [17]. Additionally, with the initial contribution from Google,
and as shown by Rüth et al. [39] in 2018 significant, productive
deployment of Google QUIC was already visible on the Internet
in early stages of the specification. By now, QUIC carries over a
third of the Google traffic [8] and Facebook reports that QUIC is
1https://tools.ietf.org/wg/quic/
261
IMC ’21, November 2–4, 2021, Virtual Event, USA
Johannes Zirngibl, Philippe Buschmann, Patrick Sattler, Benedikt Jaeger, Juliane Aulbach, and Georg Carle
Figure 1: QUIC stack compared to TLS over TCP.
responsible for over 75 % of its traffic [24]. Furthermore, in April
2021, Firefox officially announced QUIC support in its Nightly and
Beta release [7].
Due to the attraction of the protocol in the community and
within large providers but also due to the increased complexity
of the protocol based on the combinations of functionality from
multiple layers, thorough research of the protocol, its deployment
and its effects on the Internet ecosystem are necessary.
Therefore, research requires the means to identify QUIC ca-
pable targets. Furthermore, knowledge about the state of deploy-
ments, configurations but also involved parties provides a funda-
mental baseline for future research and developments regarding
IETF QUIC.
In this paper, we compare different methods to identify QUIC
deployments and analyze the availability of QUIC shortly before
the standardization based on an Internet-wide measurement study.
This allows to identify how many QUIC deployments can already
be found and whether deployments are well-prepared for the fi-
nal standardization already supporting latest versions. Besides the
identification of deployments and supported versions, we examine
characteristics in regard to successful handshakes, TLS behavior,
transport parameters and HTTP/3 capabilities based on a newly
implemented and shared QUIC scanner, namely QScanner.
Our contributions in this work are:
(i) We compare different methodologies to identify IETF QUIC
deployments. On one hand, we execute large scale ZMap based
IPv4 and IPv6 scans which detect QUIC servers and their supported
versions. On the other hand, we compare our findings to alterna-
tive service discovery methods that can reveal QUIC deployments.
Therefore, we analyze the HTTP Alternative Service (ALT-SVC)
Header from TLS-over-TCP scans including HTTP requests and the
newly drafted Domain Name System Resource Records (DNS RRs)
for Service Binding, SVCB and HTTPS [41]. We scanned in regular
intervals over a period of three months to analyze the development
during the final steps of the standardization.
(ii) We deploy stateful scans that attempt complete QUIC hand-
shakes with found deployments and analyze how many targets can
be successfully connected to using QUIC. This allows us and future
research to analyze the configuration of targets in regard to their
transport parameters, TLS and HTTP.
(iii) To support the community to conduct substantial research
on QUIC, we publish our versatile tool set including the ZMap
modules to detect IETF QUIC deployments and our stateful QUIC
scanner QScanner. Furthermore, we provide access to our analysis
results and raw data:
https://quicimc.github.io/
262
Figure 2: QUIC handshake including a version negotiation.
In Section 2 important background is provided, followed by a
description and motivation of newly implemented scan tools and
conducted scans in Section 3. We analyze and compare different
methodologies to discover QUIC capable hosts in Section 4 and in-
vestigate distribution and version support of deployments. We fur-
ther analyze deployments regarding their TLS setup, QUIC specific
transport parameters and HTTP capabilities in Section 5 followed
by a comparison to related work in Section 6 and a discussion of
results in Section 7.
2 BACKGROUND
We explain important background covering relevant parts of the
QUIC handshake and version negotiation. Additionally, we cover
the HTTP ALT-SVC Header and HTTPS DNS RR.
2.1 QUIC
QUIC is designed to be a general transport protocol combining fea-
tures from different layers of the network stack. The protocol covers
transport functionality, including reliable delivery and congestion
control, allows network path independent connection migration,
and integrates TLS 1.3 to provide confidentiality and integrity of
data. To reduce latency, mainly during the handshake, it combines
the exchange of transport and cryptographic parameters as shown
in Figure 2.
As indicated in Figure 1, QUIC includes functionality, namely
stream multiplexing and per stream flow control that is normally
handled by higher layers, e.g., HTTP/2. Therefore, HTTP/3 is stan-
dardized alongside QUIC [4] as HTTP derivative on top of QUIC.
Furthermore, new Application-Layer Protocol Negotiation (ALPN)
values are specified to indicate the support of HTTP/3. During the
standardization process, it included the draft version, e.g., h3-29 for
“Version 29” but will be fixed to h3 [4].
Handshake. To begin a handshake, a client sends an Initial packet
including a TLS 1.3 Client Hello and transport parameters. The latter
are sent as TLS extension to offer integrity protection. Furthermore,
the Initial packet needs to be padded to at least 1200 B. This ensures
that a reasonable Path Maximum Transmission Unit (PMTU) is
NetworkTransportApplicationIPTCPTLSHTTP/2UDPQUICHTTP/3ClientServerInitial[0]:CRYPTO[CH],PADDINGOptional:(VersionNegotiation)Optional:(Initial[0]:CRYPTO[CH],PADDING)Initial[0]:CRYPTO[SH]ACK[0]Handshake[0]:CRYPTO[EE,CERT,CV,FIN]1-RTT[0]:STREAM[1,"..."]Initial[1]:ACK[0]Handshake[0]:CRYPTO[FIN],ACK[0]1-RTT[0]:STREAM[0,"..."],ACK[0]Handshake[1]:ACK[0]1-RTT[1]:HANDSHAKEDONE,STREAM[3,"..."],ACK[0]It’s Over 9000: Analyzing Early QUIC Deployments with the Standardization on the Horizon
IMC ’21, November 2–4, 2021, Virtual Event, USA
supported and reduces the amplification factor to prevent potential
misuse. If the server is able to pursue the handshake, it replies with
an Initial packet containing the TLS 1.3 Server Hello in a Crypto
frame, and further TLS messages in Handshake frames. The client
needs to conclude the handshake with necessary Acknowledgment
frames, a Crypto frame finishing the TLS handshake and can start
data transmission using Stream frames.
Version Negotiation. Due to the possibility to implement QUIC in
user space, different implementations are available [17] which can
be quickly adapted to new versions [38]. Besides, Google advanced
its own QUIC specification. This resulted in a multitude of existing
versions [18] and their deployment in parallel. To allow successful
handshakes without previous knowledge about supported versions
by a server, a simple version negotiation mechanism was specified
alongside QUIC [21]. If the server does not support the initially
offered version, it can reply to the client’s Initial frame with a ver-
sion negotiation including its set of supported versions. A specific
set of versions with the pattern 0x?a?a?a?a is specified to enforce
a version negotiation [21]. This mechanism might be updated in
the future with more functionality as proposed in an additional
draft [40]. Similar to Rüth et al. [39], we use this to discover QUIC
capable hosts and their supported versions described in Section 3.1.
Transport Parameter. QUIC allows each client and server to spec-
ify an individual set of transport parameters [21]. To send these
parameters early during the handshake and provide integrity pro-
tection, a new TLS extension was defined. Currently, 17 different
parameters exist in the specification, which can be extended in the
future. For example, peers can set the initial size of the flow con-
trol window for the connection or streams, the maximum number
of allowed streams, and options regarding connection migration.
Some options are server-only and cannot be used by the client.
Also, options set during the handshake can later be updated with
corresponding QUIC frames. We look into deployment specific
parameters on the Internet in more detail in Section 5.2.
2.2 Alternative Service Discovery
With the increase of different services sharing the same domain or
even the same port and the necessity to reduce latency, different
mechanisms exist to discover alternative service endpoints and
their parameters.
HTTP Alternative Services. HTTP provides a functionality called
Alternative Services [36], to enable servers to redirect clients. Alter-
native service endpoints are defined as ALPN protocol name, a host
and port. They can be served using the HTTP ALT-SVC Header
or in a dedicated ALTSVC frame using HTTP/2. The new HTTP/3
ALPN value can be added accordingly to indicate support. Due to
the strict relation between HTTP/3 and QUIC, receiving an HTTP
ALT-SVC Header with an ALPN value indicating HTTP/3 implies
QUIC support.
SVCB and HTTPS DNS RR. Besides HTTP ALT-SVC Header, IETF
works on new DNS RRs, namely SVCB and HTTPS [41] to allow
a client to learn about endpoints or additional information for a
specific endpoint before an initial transport layer handshake using
DNS.
263
The SVCB DNS RR stands for Service Binding and represents
a more general record, while the HTTPS DNS RR is specifically
designed to be used with HTTPS. They accomplish two major goals,
directing a client (i) to another alias or (ii) to an alternative endpoint
including service information. In the scope of this work, the latter
goal is mainly of interest. A major use case of the HTTPS DNS RR
is to direct clients to QUIC endpoints [41]. Besides ALPN values,
these DNS RRs can directly contain ipv4- and ipv6hints including IP
addresses for the service. This allows to identify, whether a domain
can be accessed using QUIC and which IP address can be used,
using a single, recursive DNS query. We use addresses from these
hints in combination with resolved domains for further analysis
(see Section 4) and as targets for stateful scans (see Section 5).
3 CONDUCTED SCANS
This section explains our measurements and describes all imple-
mented or used tools to conduct scans including QUIC, DNS and
TLS over TCP. We publish all implemented scanning tools to sup-
port the community with research regarding QUIC. For all scans,
we apply ethical measures described in Appendix A.