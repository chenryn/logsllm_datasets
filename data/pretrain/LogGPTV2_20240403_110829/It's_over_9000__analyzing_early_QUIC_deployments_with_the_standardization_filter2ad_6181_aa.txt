# Title: It's Over 9000: Analyzing Early QUIC Deployments with the Standardization on the Horizon

## Authors:
- Johannes Zirngibl
- Philippe Buschmann
- Patrick Sattler
- Benedikt Jaeger
- Juliane Aulbach
- Georg Carle

### Affiliation:
Technical University of Munich, Garching bei München, Germany

### Contact:
PI:EMAIL (for all authors)

## Abstract
After nearly five years and 34 draft versions, the standardization of the new connection-oriented transport protocol QUIC was finalized in May 2021. Designed to integrate functionalities from multiple layers of the network stack, QUIC has the potential to significantly influence the Internet ecosystem. Even in its early stages, the protocol attracted a variety of large providers. Our study reveals that more than 2.3 million IPv4 and 300,000 IPv6 addresses support QUIC, hosting over 30 million domains. Using our newly implemented stateful QUIC scanner (QScanner), we successfully scanned 26 million targets. We found that TLS configurations are similar between QUIC and TCP stacks for the same target, but identified 45 widely varying transport parameter configurations. Combining these configurations with HTTP Server header values and associated domains, we discovered two major edge deployments from Facebook and Google. While QUIC deployments are located in 4,667 autonomous systems, many are operated by large providers.

Our findings indicate that IETF QUIC already has an advanced deployment status, primarily driven by large providers. The current deployment state and diversity of implementations underscore the importance of QUIC as a future research topic. In this work, we provide and evaluate a versatile toolset to identify QUIC-capable hosts and their properties. Besides QScanner, we present and analyze a newly implemented IPv4 and IPv6 ZMap module. We compare it to additional detection methods based on HTTP Alternative Service Header values and DNS scans of the newly drafted HTTPS DNS resource record. Each method reveals unique deployments, with the latter allowing lightweight scans to detect QUIC-capable targets, though it is biased towards Cloudflare.

### Publication Details
- **Event:** IMC '21, November 2–4, 2021, Virtual Event, USA
- **Copyright:** © 2021 Copyright held by the owner/author(s).
- **ACM ISBN:** 978-1-4503-9129-0/21/11.
- **DOI:** https://doi.org/10.1145/3487552.3487826
- **License:** Creative Commons Attribution International 4.0 License

### CCS Concepts
- Networks → Network protocols; Network measurement.

### Keywords
- IETF QUIC, TLS, Server Deployment, Internet Measurement

### ACM Reference Format
Johannes Zirngibl, Philippe Buschmann, Patrick Sattler, Benedikt Jaeger, Juliane Aulbach, and Georg Carle. 2021. It’s Over 9000: Analyzing Early QUIC Deployments with the Standardization on the Horizon. In ACM Internet Measurement Conference (IMC ’21), November 2–4, 2021, Virtual Event, USA. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3487552.3487826

## 1 Introduction
QUIC, a new connection-oriented Internet protocol, was standardized by the Internet Engineering Task Force (IETF) in May 2021 [21]. Initially developed and implemented by Google in 2013 [23], the standardization process was transferred to the IETF, where the base draft underwent 34 revisions before finalization.

QUIC integrates functionalities from different layers of the network stack, including the transport layer, security via Transport Layer Security (TLS), and stream control to optimize higher-layer applications. Figure 1 illustrates the integration of QUIC into the protocol stack and its comparison to TLS over TCP. Additionally, Hypertext Transfer Protocol (HTTP) Version 3 is being drafted [4], focusing on deploying HTTP on top of QUIC. This combination of functionality increases the overall complexity of the protocol, leading to potential divergences in implementation, errors, or unintended behavior.

As a new, fundamental network protocol, QUIC has the potential to significantly influence the Internet ecosystem. It attracted a variety of providers, developers, and contributors even in its early stages. The QUIC working group lists 22 different implementations [17]. By 2018, significant productive deployment of Google QUIC was already visible on the Internet [39]. Currently, QUIC carries over a third of Google's traffic [8], and Facebook reports that QUIC is responsible for over 75% of its traffic [24]. In April 2021, Firefox officially announced QUIC support in its Nightly and Beta releases [7].

Given the protocol's attraction and increased complexity, thorough research is necessary to understand its deployment and effects on the Internet ecosystem. This requires identifying QUIC-capable targets and understanding the state of deployments, configurations, and involved parties.

In this paper, we compare different methods to identify QUIC deployments and analyze the availability of QUIC shortly before the standardization. This allows us to determine the number of existing QUIC deployments and whether they are prepared for the final standardization. We also examine characteristics such as successful handshakes, TLS behavior, transport parameters, and HTTP/3 capabilities using a newly implemented and shared QUIC scanner, QScanner.

Our contributions in this work are:
1. **Comparison of Methodologies:** We compare different methodologies to identify IETF QUIC deployments, including large-scale ZMap-based IPv4 and IPv6 scans, and alternative service discovery methods such as the HTTP Alternative Service (ALT-SVC) Header and the newly drafted Domain Name System Resource Records (DNS RRs) for Service Binding (SVCB) and HTTPS [41].
2. **Stateful Scans:** We deploy stateful scans to attempt complete QUIC handshakes with found deployments, analyzing the configuration of targets in terms of transport parameters, TLS, and HTTP.
3. **Toolset Publication:** To support the community, we publish our versatile toolset, including the ZMap modules for detecting IETF QUIC deployments and the stateful QUIC scanner QScanner. We also provide access to our analysis results and raw data at: https://quicimc.github.io/

## 2 Background
This section provides important background information on the QUIC handshake, version negotiation, HTTP ALT-SVC Header, and HTTPS DNS RR.

### 2.1 QUIC
QUIC is designed as a general transport protocol, integrating features from different layers of the network stack. It includes reliable delivery, congestion control, connection migration, and TLS 1.3 for data confidentiality and integrity. To reduce latency, QUIC combines the exchange of transport and cryptographic parameters during the handshake, as shown in Figure 2.

QUIC includes stream multiplexing and per-stream flow control, typically handled by higher layers like HTTP/2. Therefore, HTTP/3 is standardized alongside QUIC [4] as an HTTP derivative on top of QUIC. New Application-Layer Protocol Negotiation (ALPN) values are specified to indicate HTTP/3 support.

**Handshake:** A client initiates a handshake by sending an Initial packet containing a TLS 1.3 Client Hello and transport parameters. The Initial packet must be padded to at least 1200 bytes to ensure a reasonable Path Maximum Transmission Unit (PMTU) and reduce the amplification factor. If the server can proceed, it responds with an Initial packet containing the TLS 1.3 Server Hello and further TLS messages. The client concludes the handshake with acknowledgment frames, a Crypto frame, and can start data transmission using Stream frames.

**Version Negotiation:** Due to the possibility of implementing QUIC in user space, different versions exist [17]. A simple version negotiation mechanism was specified to allow successful handshakes without prior knowledge of supported versions. If the server does not support the initially offered version, it can reply with a version negotiation including its supported versions. This mechanism might be updated in the future [40].

**Transport Parameters:** QUIC allows clients and servers to specify individual transport parameters [21]. These parameters are sent early during the handshake and protected by a new TLS extension. Currently, 17 parameters are defined, which can be extended. Peers can set the initial size of the flow control window, the maximum number of allowed streams, and options for connection migration. Some options are server-only, and others can be updated later with corresponding QUIC frames.

### 2.2 Alternative Service Discovery
With the increase in services sharing the same domain or port, mechanisms exist to discover alternative service endpoints and their parameters.

**HTTP Alternative Services:** HTTP provides the Alternative Services feature [36], enabling servers to redirect clients. Alternative service endpoints are defined by ALPN protocol name, host, and port, and can be served using the HTTP ALT-SVC Header or an ALTSVC frame in HTTP/2. The new HTTP/3 ALPN value can be added to indicate QUIC support.

**SVCB and HTTPS DNS RR:** IETF is working on new DNS RRs, SVCB and HTTPS [41], to allow clients to learn about endpoints or additional information before the initial transport layer handshake. The SVCB DNS RR represents a general record, while the HTTPS DNS RR is specifically designed for HTTPS. These records direct clients to alternative endpoints, including service information. The HTTPS DNS RR can include ALPN values and IP hints, allowing clients to identify QUIC-capable domains and IP addresses with a single DNS query.

## 3 Conducted Scans
This section explains our measurements and describes the tools used to conduct scans, including QUIC, DNS, and TLS over TCP. We publish all implemented scanning tools to support the community with QUIC research. Ethical measures described in Appendix A were applied for all scans.

[The rest of the content can be similarly optimized for clarity, coherence, and professionalism.]