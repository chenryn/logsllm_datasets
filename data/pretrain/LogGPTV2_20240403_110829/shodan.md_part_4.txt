Shodan.Itdoesn’tprovideanysearchorlookupcapabilities,itissimplyafeedofeverythingthatis
gatheredbythecrawlers.
For example, here is a script that outputs a stream of banners from devices that are vulnerable to
FREAK(CVE-2015-0204):
DeveloperAPI 48
def has_vuln(banner, vuln):
if 'vulns' in banner['opts'] and vuln in banner['opts']['vulns']:
return True
return False
for banner in api.stream.banners():
if has_vuln(banner, 'CVE-2015-0204'):
print banner
To save space and bandwidth many properties in the banner are optional. To make working with
optionalpropertieseasieritisbesttowrapaccesstopropertiesinafunction.Intheaboveexample,
thehas_vuln()methodcheckswhethertheserviceisvulnerablefortheprovidedCVE.
Note: Regular API subscriptions only have access to 1% of the feed. 100% access is
availabletodatalicensecustomersonly.
Network Alert
Anetworkalertisareal-timefeedofdatathatisbeingcollectedbyShodanforanetworkrange.To
getstartedwithnetworkalertsrequires2steps:
Creating a Network Alert
To create a network alert you need to provide a name and a network range. The name should be
descriptivetoletyouknowwhatthealertismonitoringorwhyitwascreated.
alert = api.create_alert('Production network', '198.20.69.0/24')
Aswiththescan()methodyoucanalsoprovidealistofnetworkrangestomonitor:
alert = api.create_alert('Production and Staging network', [
'198.20.69.0/24',
'198.20.70.0/24',
])
Note: Only a limited number of IPs can be monitored using network alerts and an
accountcan’thavemorethan100alertsactive.
A useful trick when combining networkalerts with the scanning API is to set an expiration for the
alert:
DeveloperAPI 49
alert = api.create_alert('Temporary alert', '198.20.69.0/24', expires=60)
The above alert would be active for 60 seconds and then expire, at which point the alert can’t be
usedanymore.
Uponsuccessfullycreatinganalert,theAPIwillreturnthefollowingobject:
{
"name": "Production network",
"created": "2015-10-17T08:13:58.924581",
"expires": 0,
"expiration": null,
"filters": {
"ip": ["198.20.69.0/24"]
},
"id": "EPGWQG5GEELV4799",
"size": 256
}
Subscribing
Onceanalerthasbeencreateditisreadytobeusedasareal-timestreamofdataforthatnetwork.
for banner in api.stream.alert(alert['id']):
print banner
Aswiththeregular,real-timestreamthealert()methodprovidesaniteratorwhereeachitemisa
bannerasit’sbeingcollectedbytheShodancrawlers.Theonlyargumentthatthealert()method
requiresisthealertIDthatwasreturnedwhencreatingthenetworkalert.
Using the Shodan Command-Line Interface
WewillquicklyexaminehowtheabovePythoncodecouldbeimplementedusingtheShodanCLI9
instead.Let’sstartoffbyclearingoutanyexistingalerts:
Warning
Theclearcommandremovesallalertsthathavebeencreatedonyouraccount.
9https://cli.shodan.io
DeveloperAPI 50
$ shodan alert clear
Removing Scan: 198.20.69.0/24 (ZFPSZCYUKVZLUT4F)
Alerts deleted
Andconfirmthattherearen’tanyexistingalertsanymore:
$ shodan alert list
You haven't created any alerts yet.
Nowit’stimetocreateanewnetworkalert:
$ shodan alert create "Temporary alert" 198.20.69.0/24
Successfully created network alert!
Alert ID: ODMD34NFPLJBRSTC
Thefinalstepistosubscribetothenetworkalertandstorethedataitreturns.Tostreamresultsfor
thecreatedalertwegivethealertIDODMD34NFPLJBRSTCtothestreamcommand:
$ mkdir alert-data
$ shodan stream --alert=ODMD34NFPLJBRSTC --datadir=alert-data
Intheabovecommandwearestreamingresultsforthe–alertwiththeIDofODMD34NFPLJBRSTC
andtheresultswillbestoredinadirectorycalledalert-data.Everydayanewfilewillbegenerated
in the alert-data directory which contains the banners gathered for the day. I.e. we don’t need to
take care of rotating files, thestream command will take care of that for us so after a few days the
directorywilllooklike:
$ ls alert-data
2016-06-05.json.gz
2016-06-06.json.gz
2016-06-07.json.gz
DeveloperAPI 51
Example: Public MongoDB Data
MongoDB10 is a popular NoSQL11 database and for a long time it didn’t come with any authenti-
cation. This has resulted in many instances of MongoDB being publicly accessible on the Internet.
Shodan grabs a banner for these databases that contains a lot of information about the data stored.
Followingisanexcerptfromthebanner:
MongoDB Server Information
...
{
"ok": 1.0,
"tokumxAuditVersion": "unknown",
"bits": 64,
"tokukvVersion": "unknown",
"tokumxVersion": "2.0.2",
"javascriptEngine": "V8",
"version": "2.4.10",
"versionArray": [
2,
4,
10,
0
],
"debug": false,
"compilerFlags": "-fPIC -fno-strict-aliasing -ggdb -Wall -Wsign-compare -Wno\
-unknown-pragmas -Winvalid-pch -pipe -Wnon-virtual-dtor -Woverloaded-virtual -Wn\
o-unused-local-typedefs -fno-builtin-memcmp -O3",
"maxBsonObjectSize": 16777216,
"sysInfo": "Linux vps-vivid-x64-04 2.6.32-042stab106.6 #1 SMP Mon Apr 20 14:\
48:47 MSK 2015 x86_64 x86_64 x86_64 GNU/Linux BOOST_LIB_VERSION=1_55",
"loaderFlags": " ",
"gitVersion": "unknown"
},
...
Basically,thebanneriseithermadeupofaheaderthatsays“MongoDBServerInformation”followed
by 3 JSON objects that are separated by commas or the banner contains “authentication enabled”
in case the server requires credentials. Each JSON object contains different information about the
databaseandIrecommendyoucheckoutafullbanneronShodan(it’sverylong)bysearchingfor:
10https://www.mongodb.com
11https://en.wikipedia.org/wiki/NoSQL
DeveloperAPI 52
product:MongoDB metrics
Note: the metrics search term ensures we only get MongoDB instances that don’t
requireauthentication.
Let’s use the banner information to determine which database names are most popular and how
muchdataispubliclyexposedontheInternet!Thebasicworkflowwillbeto:
1. DownloadallMongoDBbanners
2. Process the downloaded file and output a list of top 10 database names as well as the total
datasize
DownloadingthedataissimpleusingtheShodancommand-lineinterface12:
shodan download --limit -1 mongodb-servers.json.gz product:mongodb
Theabovecommandsaystodownloadallresults(–limit-1)intoafilecalledmongodb-servers.json.gz
for the search query product:mongodb. You can also download the results of the command from
theExtrassectionofthebookonLeanpub.NowwejustneedasimplePythonscripttoprocessthe
Shodandatafile.Toeasilyiterateoverthefilewe’regoingtousetheshodan.helpers.iterate_files()
method:
import shodan.helpers as helpers
import sys
# The datafile is the 1st argument to the command
datafile = sys.argv[1]
for banner in helpers.iterate_files(datafile):
# Now we have the banner
SinceeachbannerisjustJSONwithsomeaddedheader,letsprocessthebannerintoanativePython
dictionaryusingthesimplejsonlibrary:
12https://cli.shodan.io
DeveloperAPI 53
# Strip out the MongoDB header added by Shodan
data = banner['data'].replace('MongoDB Server Information\n', '').split('\n},\n'\
)[2]
# Load the database information
data = simplejson.loads(data + '}')
The only thing that’s left is keeping track of the total amount of data that’s exposed and the most
populardatabasenames:
total_data = 0
databases = collections.defaultdict(int)
...
# Then in the loop
# Keep track of how much data is publicly accessible
total_data += data['totalSize']
# Keep track of which database names are most common
for db in data['databases']:
databases[db['name']] += 1
Python has a useful collections.defaultdict class that automatically creates a default value for a
dictionarykeyifthekeydoesn’tyetexist.AndwejustaccessthetotalSizeanddatabasesproperty
oftheMongoDBbannertogathertheinformationwecareabout.Finally,wejustneedtooutputthe
actualresults:
print('Total: {}'.format(humanize_bytes(total_data)))
counter = 1
for name, count in sorted(databases.iteritems(), key=operator.itemgetter(1), rev\
erse=True)[:10]:
print('#{}\t{}: {}'.format(counter, name, count))
counter += 1
First, weprintthe total amountof data that’sexposed andwe’reusing a simplehumanize_bytes()
method to convert bytes into human-readable format of GB/ MB/ etc. Second, we loop sort the
databases collection in reverse order by the number of times that a certain database name was
seen(key=operator.itemgetter(1))andgetthetop10results([:10]).
BelowisthefullscriptthatreadsaShodandatafileandanalyzesthebanner:
DeveloperAPI 54
import collections
import operator
import shodan.helpers as helpers
import sys
import simplejson
def humanize_bytes(bytes, precision=1):
"""Return a humanized string representation of a number of bytes.
Assumes `from __future__ import division`.
>>> humanize_bytes(1)
'1 byte'
>>> humanize_bytes(1024)
'1.0 kB'
>>> humanize_bytes(1024*123)
'123.0 kB'
>>> humanize_bytes(1024*12342)
'12.1 MB'
>>> humanize_bytes(1024*12342,2)
'12.05 MB'
>>> humanize_bytes(1024*1234,2)
'1.21 MB'
>>> humanize_bytes(1024*1234*1111,2)
'1.31 GB'
>>> humanize_bytes(1024*1234*1111,1)
'1.3 GB'
"""
abbrevs = (
(1= factor:
break
return '%.*f %s' % (precision, bytes / factor, suffix)
DeveloperAPI 55
total_data = 0
databases = collections.defaultdict(int)
for banner in helpers.iterate_files(sys.argv[1]):
try:
# Strip out the MongoDB header added by Shodan
data = banner['data'].replace('MongoDB Server Information\n', '').split(\
'\n},\n')[2]
# Load the database information
data = simplejson.loads(data + '}')
# Keep track of how much data is publicly accessible
total_data += data['totalSize']
# Keep track of which database names are most common
for db in data['databases']:
databases[db['name']] += 1
except Exception, e:
pass
print('Total: {}'.format(humanize_bytes(total_data)))
counter = 1
for name, count in sorted(databases.iteritems(), key=operator.itemgetter(1), rev\
erse=True)[:10]:
print('#{}\t{}: {}'.format(counter, name, count))
counter += 1
Here’sasampleoutputofthescript:
Total: 1.8 PB
#1 local: 85845
#2 admin: 67648
#3 test: 24983
#4 s: 5121
#5 config: 4329
#6 proxy: 2045
#7 research: 2007
#8 seolib_new: 2001
#9 traditional: 1998
#10 simplified: 1998
DeveloperAPI 56
Exercises: Shodan API
Exercise1
WriteascripttomonitoranetworkusingShodanandsendoutnotifications.
Exercise2
Writeascripttooutputthelatestimagesintoadirectory.
Tip: Images are encoded using base64. Python can easily decode it into binary using:
image_string.decode(‘base64’)
Industrial Control Systems
In a nutshell, industrial control systems (ICS) are computers that control the world around you.
They’reresponsibleformanagingtheairconditioninginyouroffice,theturbinesatapowerplant,
thelightingatthetheatreortherobotsatafactory.
Research conducted from 2012 through 2014 by Project SHINE13 (SHodan INtelligence Extraction)
indicatesthereareatleast2millionpubliclyaccessibledevicesrelatedtoICSontheInternet.Thefirst
datasetcontaining500,000ICSdeviceswassentin2012totheICS-CERT.TheICS-CERTdetermined
thatroughly7,200outofthe500,000werecriticalinfrastructure14 intheUnitedStates.Andwiththe
demand for increased connectivity in everything that number is expected to rise. There have been
effortstosecurethesedevicesbytakingthemofflineorpatchingflaws,butit’sachallengingproblem
andthereisn’taneasysolution.
Common Abbreviations
BeforegettingintotheprotocolsandhowtofindICSdevices,hereareafewcommonabbreviations
thatareusefultoknow:
BMS BuildingManagementSystem
DCS DistributedControlSystem
HMI HumanMachineInterface
ICS IndustrialControlSystem
PLC ProgrammableLogicController
RTU RemoteTerminalUnit
SCADA SupervisoryControlandDataAcquisition(asubsetofICS)
VNC VirtualNetworkComputing
Protocols
Thereare2differentwaysofidentifyingcontrolsystemsontheInternet:
Non-ICS protocols used in an ICS environment
The majority of the ICS findings on Shodan are discovered by searching for web servers or other
popularprotocolsthataren’tdirectlylinkedtoICSbutmaybeseenonanICSnetwork.Forexample:
13http://www.slideshare.net/BobRadvanovsky/project-shine-findings-report-dated-1oct2014
14https://ics-cert.us-cert.gov/sites/default/files/Monitors/ICS-CERT_Monitor_Oct-Dec2012.pdf
IndustrialControlSystems 58
awebserverrunningonanHMIoraWindowscomputerrunningunauthenticatedremotedesktop
while connected to an ICS. These protocols provide you with a visual view of the ICS but they
usuallyhavesomeformofauthenticationenabled.
The above is an HMI for an engine exposed via an unauthenticated VNC connection found on
ShodanImages15.
ICS protocols
These are the raw protocols that are used by the control systems. Every ICS protocol has its own
uniquebannerbutthere’sonethingtheyallhaveincommon:theydon’trequireanyauthentication.
Thismeansthatifyouhaveremoteaccesstoanindustrialdeviceyouautomaticallyhavetheability
to arbitrarily read and write to it. However, the raw ICS protocols tend to be proprietary and hard
todevelopwith.Thismeansthatit’seasytocheckwhetheradevicesupportsanICSprotocolusing
Shodanbuthardtoactuallyinteractwiththecontrolsystem.
15https://images.shodan.io
IndustrialControlSystems 59
ThefollowingbannerdescribesaSiemensS7PLC,notethatitcontainsalotofdetailedinformation
aboutthedeviceincludingitsserialnumberandlocation: