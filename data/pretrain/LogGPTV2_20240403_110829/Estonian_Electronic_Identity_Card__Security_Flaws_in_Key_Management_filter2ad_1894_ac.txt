### 5.1 Key Generation and Distribution Analysis

#### 5.1.1 MICARDO Platform
The MICARDO platform does not allow setting the value of the public exponent \( e \). For each key, the platform randomly selects a public exponent \( e \) that is either 2, 3, or 4 bytes in length, depending on the configuration. This behavior is evident in the certificates: for all over one million MICARDO-powered ID card certificates in our dataset, the public exponent values are random, with no single value being over-represented.

**Figure 9: MICARDO: Distribution of the MSB of \( N \)**

As shown in Figure 9, the distribution of the most significant bit (MSB) of \( N \) from keys generated by the MICARDO platform closely matches the distribution from MICARDO-powered ID card certificates. The unique pattern observed in the distribution of the MSB of \( N \) from MICARDO-generated keys, which is not seen in keys generated by any known software library (see Figure 12 in [33]), indicates that the keys in MICARDO-powered ID cards were indeed generated by the platform. However, our dataset lacks sufficient certificates issued between 2002 and 2007 to draw definitive conclusions about the keys generated during this period.

#### 5.1.2 MULTOS Platform
We did not have access to a non-personalized MULTOS platform, so we could not generate reference keys. Our dataset includes 29,262 certificates issued for MULTOS-powered ID cards. Figure 10 shows the distribution of the MSB values of these keys. The public keys have a random 4-byte public exponent, similar to the non-standard behavior of MICARDO.

**Figure 10: Distribution of the MSB of \( N \) from MULTOS-Powered ID Card Certificates**

We cannot conclusively determine the origin of these keys. However, it is clear that they were not generated by OpenSSL (non-FIPS), as the moduli are not always congruent to 1 modulo 3 (see Section 4.2 in [33]).

#### 5.1.3 jTOP SLE66 (Initially Issued)
To export a million keys generated by the jTOP SLE66 platform, we used blank jTOP SLE66 JavaCards. Since RSA key generation is implemented at the JavaCard platform level, access to the manufacturer’s proprietary EstEID JavaCard applet was not required.

We observed a functional bug in this Common Criteria (CC) certified [34] JavaCard platform. When asked to generate a 2048-bit RSA key, the platform returns a 2047-bit key in 38% of cases. This is close to the theoretical ratio of 38.6294% when \( p \) and \( q \) are chosen uniformly from the distribution of 1024-bit primes. Typically, to generate an RSA modulus of the required length, either the rejection sampling method is used to regenerate primes until their product is of the required length, or the primes are sampled ensuring that a \( k \)-bit prime is larger than \( 2 \cdot 2^{k-1} \) (see Section 3.2 in [33]). The distribution of the MSB of \( N \) from the keys generated by the jTOP SLE66 platform is shown in Figure 11.

**Figure 11: Distribution of the MSB of \( N \) for Keys Generated by the jTOP SLE66 Platform**

jTOP SLE66-powered ID cards were issued from 2011 until the end of 2014. All certificates for initially issued ID cards contain public keys with random 4-byte public exponents, mimicking the non-standard behavior of MICARDO. The JavaCard specification requires implementations to support arbitrary public exponent values up to 4 bytes in length. We verified that the jTOP SLE66 platform accepts and can generate RSA key pairs with any odd value \( e \) up to 4 bytes in length, confirming that the keys in the certificates could have been generated by the platform.

For ID cards issued in 2014, the distribution of the MSB matches the distribution generated by the platform (Figure 12b). However, ID cards issued before 2014 lack 2047-bit RSA keys (MSB values smaller than 128) (Figure 12a). The exceptions are three cardholders who received certificates with 2047-bit keys in October 2013, including two employees of SK and a person related to the manufacturer. We hypothesize that these cards were issued to test changes in the manufacturing process before going into production.

**Figure 12: Distribution of the MSB of \( N \) from Initially Issued jTOP SLE66-Powered ID Cards**

- **(a) ID cards issued before 2014**
- **(b) ID cards issued in 2014**

#### 5.1.4 jTOP SLE66 (PPA Renewal)
To address a flaw in 2011 ID cards (see Section 3), the ID card manufacturer introduced a renewal procedure that could be performed at PPA customer service points. In the renewal process, the old EstEID JavaCard applet was removed, and a new applet with new keys and certificates was installed. The renewal was later reused in 2015 to fix an incident with duplicate email addresses in certificates and in 2016 to correct certificates with incorrectly encoded public keys (see Section 3). The renewal of jTOP SLE66-powered ID cards was terminated on July 1, 2017. In total, more than 74,000 jTOP SLE66-powered ID cards were renewed at PPA customer service points.

In contrast to initially issued ID cards, the keys renewed at PPA customer service points have a public exponent \( e \) set to 65537. These keys show an MSB distribution that is completely different from the keys generated by the jTOP SLE66 platform (see Figure 13). Such a distribution results from setting the two most significant bits of \( p \) and \( q \) to 112 (see Section 3.2.2 in [33]).

**Figure 13: Distribution of the MSB of \( N \) from jTOP SLE66-Powered ID Cards Renewed at PPA Customer Service Points**

Since the generation of 2047-bit RSA keys is an anomaly specific to the jTOP SLE66 platform, we conclude that for ID cards issued in 2014, the keys were generated by the platform. By analyzing the time difference between the `notBefore` fields of the authentication and digital signature certificates, we found strong evidence that both the keys for ID cards issued before 2014 and those issued in 2014 were generated by the platform (see Section 5.2).

Apparently, the ID card manufacturing process before 2014 rejected 2047-bit keys to ensure that the certificates contained standards-compliant 2048-bit keys. This rejection increased the key generation time by a factor of 1.63, raising the average time from 87 to 141 seconds. The slower key generation time may have led to the discontinuation of 2047-bit key rejection in 2014.

In theory, the EstEID applet version installed at PPA customer service points could have regenerated the keys until the two most significant bits of \( p \) and \( q \) were 112. However, this would have increased the key generation time by a factor of 4, from 33 to 132 seconds. There is no legitimate explanation for this, leading us to conclude that these keys were generated outside the smart card, likely to increase the throughput of the PPA renewal service. Authorities could verify this by examining the average time required to renew a jTOP SLE66-powered ID card at a PPA customer service point.

According to Table 7 in [33], several software libraries generate keys by setting the two most significant bits of \( p \) and \( q \) to 112, including Botan 1.11.29, cryptlib 3.4.3, GPG Libgcrypt 1.6.5, LibTomCrypt 1.17, Nettle 3.2, OpenSSL FIPS 2.0.12, PGP SDK 4, and WolfSSL 3.9.0. OpenSSL 1.0.2g is excluded because the moduli generated by OpenSSL (non-FIPS) are always congruent to 1 modulo 3, which is not the case for the moduli observed in the certificates.

#### 5.1.5 jTOP SLE78
The jTOP SLE78 platform was affected by the ROCA flaw (Section 3). Using the method published in [18], we verified whether the certificates issued for jTOP SLE78-powered ID cards contain keys affected by the ROCA flaw. The method has no false negatives, and the rate of false positives for 2048-bit RSA keys is negligible (1 in \( 2^{713} \)).

Verification confirmed that the RSA keys were generated by the platform, including all keys—initially issued, remotely renewed, and those renewed at PPA customer service points. However, 23 keys did not have the structure of vulnerable keys. The possible causes for these anomalous keys are analyzed in Section 6.

### 5.2 Inferring Key Generation Time from Certificate Issuance Time

While modern computers can generate 2048-bit RSA keys in less than a second, RSA key generation in smart card chips typically takes tens of seconds. To deduce whether the keys were generated by the slow on-card key generation process, we investigated the timing of certificate issuance.

During the ID card personalization process, if the certificate signing request is submitted to the CA immediately after generating a key pair, the time difference between the `notBefore` fields of the first and second ID card certificates will include the key generation time. If the requests are submitted together after both key pairs are generated, the `notBefore` date differences will not include the key generation time. To our knowledge, this is the first work proposing the use of certificate validity dates as a side-channel to infer key generation time.

We grouped the certificates into pairs belonging to the same ID card if they were issued to the same cardholder within a 24-hour window for the same type of identity document and examined the distribution of time differences in the `notBefore` validity dates.

#### 5.2.1 MICARDO
For all initially issued MICARDO certificates, the `notBefore` validity date is set to '00:00:00'. For certificates issued during the renewal process, the `notBefore` field contains different values corresponding to the actual issuance time. Generating a 1024-bit RSA key on the MICARDO platform takes around 15 seconds on average. However, the average time difference between certificate issuance each month is below 4 seconds, indicating that certificates are issued after both key pairs have been generated in the MICARDO certificate renewal process.

#### 5.2.2 MULTOS
All certificates for MULTOS-powered ID cards have different `notBefore` values, likely corresponding to the actual issuance time. The time difference between certificate issuance is a few seconds at best, which is expected because the MULTOS platform was used solely for digital identity cards distributed to PPA customer service points with pre-generated keys (see Section 6.1.2.1 in [35]).

#### 5.2.3 jTOP SLE66 (Initially Issued)
For jTOP SLE66-powered ID cards issued up to July 9, 2011, the `notBefore` validity date is set to '00:00:00'. Starting from July 11, 2011, the `notBefore` date contains different time values corresponding to the actual issuance time.

ID cards with a certificate issuance time difference larger than 2 hours were excluded from the analysis, accounting for less than 0.32% of cases each month. These cases are possibly due to interrupted card personalization processes completed later.

**Figure 14: Certificate Issuance Time Differences for Certificates from the Same ID Card (by Month)**

- **(a) jTOP SLE66-Powered ID Cards (Initially Issued)**
- **(b) jTOP SLE66-Powered ID Cards (PPA Renewal)**
- **(c) jTOP SLE78-Powered ID Cards**

Before October 6, 2011, the time difference between certificate issuance is minimal, with the authentication certificate being the first issued certificate about half the time. Starting from October 6, 2011, the authentication certificate is the first issued certificate at least 99.88% of the time, and the average time difference between certificate issuance increases significantly.

The distribution of time differences closely matches the key generation time distribution of the jTOP SLE66 on-card key generation. From November 2011 to January 2014, the distributions match the RSA on-card key generation with a random public exponent \( e \) and rejection sampling (average time 141 seconds). From January 2014, the distributions match the RSA on-card key generation with a random public exponent \( e \) but without rejection sampling (average time 87 seconds).

This timing supports the hypothesis that the keys on ID cards issued before 2014 and in 2014 were generated by the jTOP SLE66 platform. The small time differences observed before October 6, 2011, do not allow definitive conclusions, but the properties of these keys match those issued after October 6, 2011, leading us to conclude that these keys were also generated by the platform.

#### 5.2.4 jTOP SLE66 (PPA Renewal)
In Section 5.1.4, we found that the keys for jTOP SLE66-powered ID cards renewed at PPA were not generated by the card. To consider any possible counter-evidence, we also examined the timing between the authentication and digital signature certificate issuance for these ID cards (see Figure 14b). The time difference between the issuance of the first and second certificates varies only slightly. In February 2013, August 2015, and July 2016, some changes were introduced in the PPA renewal process, causing changes in the certificate issuance time differences. Since the time difference is not close to zero and the authentication certificate is the first issued certificate 99.79% of the time, we conclude that the observed time differences include the time spent on key generation, import, and possibly certificate loading in the ID card.

#### 5.2.5 jTOP SLE78
The timing between the authentication and digital signature certificate issuance for jTOP SLE78-powered ID cards is shown in Figure 14c. Digital identity card certificates were excluded from the analysis. The timing of certificate issuance matches the distribution of key generation time by the jTOP SLE78 platform when \( e = 65537 \) (average time 13 seconds). This confirms the findings of Section 5.1.5. The average time below 13 seconds, starting from June 2016, is explained by the introduction of remote ID card renewal on June 22, 2016. In the remote renewal process, certificates are issued after both key pairs have been generated by the card.

### 5.3 Discussion

The illicit practice of key importing in jTOP SLE66-powered ID card renewals was not accidental. The EstEID applet had to be specially programmed to implement such a key import functionality. The fact that the ID card manufacturer could use this forbidden feature without it being discovered for years suggests that the manufacturer might have also used the key export feature to retrieve private keys after they were generated by the chip. It is unclear to what extent strict industry rules were violated.

Large-scale abuse of signature keys would be hard to keep secret, while abuse of decryption keys would not. We hope that the manufacturer's intent was not malicious and that this illicit practice was motivated by the need to increase the throughput of the PPA renewal service.

It is uncertain whether the manufacturer initially understood that generating keys with a random public exponent increases the average key generation time from 33 to 87 seconds (see Figure 15 for distribution). The increase is due to the candidate primes \( p \) and \( q \) having a higher probability of not being suitable, as a randomly selected public exponent \( e \) is likely to require more attempts to find suitable primes.