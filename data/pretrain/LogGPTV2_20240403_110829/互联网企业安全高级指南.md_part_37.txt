/* Send the previous message and check for a response */
result = smb_send_and_recv (conn, &msg) J
state)
1
742
case SMB_TREE_CONNECT:
743
if (h->status){
744
req->result
= CURLE_REMOTE_FIL&_NOT_FOUND;
745
if (h->status
smb_swap32 (SMB_ERR_NOACCESS))
746
req->resu1t - CURLS_REMOTE_ACCESS_DENIED;
747
break;
74 8
749
req->tid =
 smb_swap16 (h>tid) ;
750
next_state
= SMB_OPEN;
751
break;
752
753
SMB_OPEN:
754
if (h=>status)
755
req->result
CURLE_REMOTE_FILE_NOT_FOUND;
756
next_state
= SMB_TREE_DISCONNECT;
757
break;
758
6SL
req>fid = smb_swap16 (( (struct 
f (pgdata->req.offset - 0
761
if (conn->data->set.upload)(
762
conn=>data=>req-size = conn=>data=>state.infilesize>
763
Cur1_pgrsSetUploadSize (conn=>data, conn->data->req-size) :
764
next_state - SMB_UPLOAD;
765
766
767
conn->data->req.size =
768
smb_swap64 (( (struct smb_nt_create_response *)msg) ->end_of_file) ;
769
Cur1_pgrsSetDownloadSize (conn->data, conn->data->req size) :
770
next_state = SMB_DOwNLOAD;
771
772
break;
ELL
LL
caSe SMB_DOWNLOAD:
775
status){
778
req=>result - CURLE_RECV_ERROR;
6 LL
next_state = SMB_CLOSE;
780
break;
CC>
tests its lower bound.
 0*, taking true branch
 0*,
785
If (len > 0){
result = result;
792
next_state = SMB_CLOSE;
793
break;
794
795
796
conn=>data->req-bytecount += len;
L6 L
conn->data->req,offset += len;
798
Cur1_pgrsSetDownloadCounter (conn->data, conn->data->req-bytecount) 
799
next_state = (len status)[
803
req->result = CURLE_UPLOAD_FAILED;
804
next_state = SMB_CLoSE;
805
break;
806
807
len = Cur1_readl6_le(((unsigned char *) msg)+
---
## Page 226
214技术篇
808
sizeof (struct smb_header) + 5):
809
conn->data->req,bytecount += len;
810
conn->data->req.offset += lenj
811
Cur1_pgrsSetUploadCounter (conn->data, conn->data->req-bytecount) ;
812
可以看到在满足以上代码数字开头的条件后，即可触发该漏洞，简化的流程如下：
smb_request_state
→ 1en = Cur1_read16_le ()
→ Cur1_client_rite (, len)
Curl客户端从服务端接到的数据包中提取出len的值，之后没有经过检查便将len作为
长度参数传入Curl_client_write函数：
CURLcode Curl_client_vrite(struct connectdata *conn,
Int type,
char *ptr,
size_t len)
Curl_client_write会将ptr指针后的len字节数据发送给服务端，即使len超过预期的数
据包长度。
Curl新版本中针对这个漏洞的补丁中增加了对len的长度检查，计算后的值不能超过已
收到的 smb 数据包的边界(smb->got)。(http://curl.haxx.se/CVE-2015-3237.patch);
1ib/smb.c 1 12 ++++++++
1 file changed, 9 insertions (+) , 3 deletions (-)
diff -=git a/1ib/smb,c b/1ib/snb,c
Lndex 8cb3503.,d461a71 100644
a/1ib/smb , c
+++ b/1ib/smb , c
e8 -781,13 +781,19 8e static CuRLcode smb_request_state (struct connectdata *conn
(euop [ooq
len = Cur1_read16_le (((unsigned char *) msg) +
sizeof (struct smb_header) + 11);
off = Cur1_read16_le (((unsigned char *) msg)+
sizeof (struct snb_header) + 13):
if (len > 0) {
result = Cur1_client_write (conn, CLIENTWRITE_BODY,
(char *)msg + off + sizeof (unsigned int),
len) ;
---
## Page 227