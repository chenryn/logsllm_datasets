# x86系统调用（中）

#### 译文声明
本文为翻译文章，具体内容和含义以原文为准。

## 分析KiSystemService保存现场代码 (INT 2E)

当用户态代码通过`sysenter`或`int 2E`的方式进入内核态后，最终需要返回到用户态。因此，在进入内核态之前，必须保存用户态的寄存器状态。那么这些寄存器状态保存在哪里呢？

### 找到INT 2E中断处理程序

1. 打开`ntoskrnl.exe`文件。
2. 使用Alt+T搜索_IDT表。
3. 在IDT表中找到`int 2E`，IDA已经解析出各个中断号对应的EIP地址。

此时已经进入内核态代码，`push 0`操作将0压入ESP/0堆栈。

> **注意**：这里的`push 0`将在后面进行解释。

### Trap_Frame 结构体

Windows 将内核态堆栈定义为一个结构体 `_Trap_Frame`。使用Windbg查看该结构体：

```windbg
kd> dt _KTrap_Frame
```

在8086模式下使用的最后四个成员在保护模式下并未使用。

进入内核态的一瞬间，ESP0(EIP)指向+0x07c的位置，即SS寄存器的下一个位置。当`push SS`时，SS的值正好存储在+0x78的位置，以此类推。五个值存储在以下五个成员中：

- `Eip`
- `Cs`
- `Eflags`
- `Esp`
- `Ss`

这五个值是由CPU自动压入堆栈的，而不是操作系统代码显式执行的。理解这一点的关键在于区分CPU和操作系统各自的作用以及它们的设计思想。

再看`int 2E`的代码，开头的几个`push`指令实际上是在填充`_Trap_Frame`结构体中的几个成员：

```asm
+0x050 SegFs            : Uint4B
+0x054 Edi              : Uint4B
+0x058 Esi              : Uint4B
+0x05c Ebx              : Uint4B
+0x060 Ebp              : Uint4B
+0x064 ErrCode          : Uint4B
```

每个线程都有自己的ESP0，而TSS只有一个。当线程切换时，当前TSS中存储的ESP0一定是当前线程的ESP0。

并不是所有的中断代码都会上来就`push 0`。例如，缺页异常（中断e）：

```asm
// 查看int e的代码
// 可以看到上来之后并没有push 0，因为errorcode已经由CPU填充。
```

### KPCR 结构体

KPCR 是一个结构体，称为 CPU 控制区（Processor Control Region）。每个 CPU 都有一个 KPCR。

```windbg
kd> dt _KPCR
```

查看 CPU 数量：

```windbg
kd> dd KeNumberProcessors
```

在用户态，FS 指向 TEB；在内核态，FS 指向 KPCR。

KPCR 结构体的最后一个成员是另一个结构体 `_KPRCB`。

```windbg
kd> dt _KPRCB
```

以下是 `_KPRCB` 的部分成员：

```plaintext
+0x000 MinorVersion     : Uint2B
+0x002 MajorVersion     : Uint2B
+0x004 CurrentThread    : Ptr32 _KTHREAD
+0x008 NextThread       : Ptr32 _KTHREAD
+0x00c IdleThread       : Ptr32 _KTHREAD
...
+0x8a0 DpcLock          : Uint4B
+0x8a4 PrcbPad6         : [28] UChar
+0x8c0 CallDpc          : _KDPC
+0x8e0 ChainedInterruptList : Ptr32 Void
+0x8e4 LookasideIrpFloat : Int4B
...
+0x910 MHz              : Uint4B
+0x914 FeatureBits      : Uint4B
+0x918 UpdateSignature  : _LARGE_INTEGER
+0x920 NpxSaveArea      : _FX_SAVE_AREA
+0xb30 PowerState       : _PROCESSOR_POWER_STATE
```

查看 KPRCB 地址：

```windbg
kd> dd KiProcessorBlock L2
```

这个地址减去0x120就是KPCR的地址。

继续分析`int 2e`：

```asm
0FFDFF000h 这个地址正好是 KPCR 的首地址。
```

第一个成员是 `_NT_TIB`：

```windbg
kd> dt _NT_TIB
```

`_NT_TIB` 结构体的部分成员如下：

```plaintext
+0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD
+0x004 StackBase        : Ptr32 Void
+0x008 StackLimit       : Ptr32 Void
+0x00c SubSystemTib     : Ptr32 Void
+0x010 FiberData        : Ptr32 Void
+0x010 Version          : Uint4B
+0x014 ArbitraryUserPointer : Ptr32 Void
+0x018 Self             : Ptr32 _NT_TIB
```

`push` 的作用是保存旧的异常链表，并将新的 `ExceptionList` 设为空白。

在 `0FFDFF124h` 位置，实际上是 KPCR 的 +0x4 位置，存储的是当前 CPU 执行线程的 `_ETHREAD`。

`_ETHREAD` 的第一个成员是 `_KTHREAD`：

```windbg
kd> dt _ETHREAD
```

`_ETHREAD` 结构体的部分成员如下：

```plaintext
+0x000 Tcb              : _KTHREAD
+0x1c0 CreateTime       : _LARGE_INTEGER
+0x1c0 NestedFaultCount : Pos 0, 2 Bits
+0x1c0 ApcNeeded        : Pos 2, 1 Bit
+0x1c8 ExitTime         : _LARGE_INTEGER
+0x1c8 LpcReplyChain    : _LIST_ENTRY
+0x1c8 KeyedWaitChain   : _LIST_ENTRY
+0x1d0 ExitStatus       : Int4B
```

通过以上分析，我们了解了在 `int 2E` 中断处理过程中，如何保存和恢复用户态寄存器状态，以及相关结构体的作用。