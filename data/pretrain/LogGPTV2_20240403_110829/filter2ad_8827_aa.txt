# x86系统调用（中）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 分析KiSystemService保存现场代码(INT 2E)
> 当3环代码通过sysenter或者int
> 2E的方式进入0换后，总归是要重新回到三环的，那么必然进入0环前就必须要保存原来三环的寄存器，这些寄存器保存在哪？
打开ntoskrnl.exe文件，Alt+T搜索_IDT。
再IDT表中找到int 2E，IDA已经帮我们解析出了各个中断号要去的EIP。
此时已经进入0环代码，push 0压的是在ESP/0的堆栈。
> 但是这里push 0是什么意思，在后面会有解释
学习中断门的时候，我们都知道，当进入0环的时候，会往0环的堆栈压5个值：eip,cs,eflag,esp,ss。
###  Trap_Frame
**windows将0环堆栈定义成一个结构体** ，叫`_Trap_Frame`。这是操作系统定义的。
用windbg查看这个结构体，在结构体最前面加上_K
    kd> dt _KTrap_Frame
最后四个成员在8086模式下使用，保护模式下并没有使用。
进入0环的一瞬间，ESP0(EIP)指向+0x07c的位置，也就是ss的下一个位置，当push
SS的时候，ss的值正好存储在+0x78的位置，然后以此类推。五个值存储在这五个成员中：
这五个值细说一下，想一下这个问题：这五个值是谁push的？
我们在操作系统代码中并没有看到有这段代码，学过中断门的同学应该知道，这是cpu的规定，所以操作系统的代码并没有push ss ，push
esp。。。理清楚的关键在于要弄清楚cpu和操作系统分别做了那些事情，以及cpu的设计思想和操作系统的设计思想。
所以当再回头看int 2E的代码
上来的几个push，实际上就是压的`_Trap_Frame`结构体中的几个成员
    +0x050 SegFs            : Uint4B
    +0x054 Edi              : Uint4B
    +0x058 Esi              : Uint4B
    +0x05c Ebx              : Uint4B
    +0x060 Ebp              : Uint4B
    +0x064 ErrCode          : Uint4B
> 每一个线程都有一个自己的ESP0，而TSS只有一个，当线程切换时，一定能保证当前TSS中存储的ESP0是当前线程的ESP0。
并不是所有的中断代码上来就push 0。以缺页异常举例：
缺页异常是e号中断，我们查看int e的代码
可以看到上来之后并没有push 0，很好解释，errorcode已经有了，谁填充的呢？cpu。
说明如果是int e，那么除了压5个值到堆栈中，还要将errorcode写入。
###  KPCR
KPCR是个结构体。叫CPU控制区（Processor Control Region）。
CPU也有自己的控制块，每一个CPU有一个，叫KPCR。
    kd> dt _KPCR
查看cpu数量,这里是单核。
    kd> dd KeNumberProcessors
在三环fs指向了TEB，在0环fs指向KPCR
KPCR结构的最后一个成员，也是一个结构体`_KPRCB`。
    kd> dt _KPRCB
    nt!_KPRCB
       +0x000 MinorVersion     : Uint2B
       +0x002 MajorVersion     : Uint2B
       +0x004 CurrentThread    : Ptr32 _KTHREAD
       +0x008 NextThread       : Ptr32 _KTHREAD
       +0x00c IdleThread       : Ptr32 _KTHREAD
       +0x010 Number           : Char
       +0x011 Reserved         : Char
       +0x012 BuildType        : Uint2B
       +0x014 SetMember        : Uint4B
       +0x018 CpuType          : Char
       +0x019 CpuID            : Char
       +0x01a CpuStep          : Uint2B
       +0x01c ProcessorState   : _KPROCESSOR_STATE
       +0x33c KernelReserved   : [16] Uint4B
       +0x37c HalReserved      : [16] Uint4B
       +0x3bc PrcbPad0         : [92] UChar
       +0x418 LockQueue        : [16] _KSPIN_LOCK_QUEUE
       +0x498 PrcbPad1         : [8] UChar
       +0x4a0 NpxThread        : Ptr32 _KTHREAD
       +0x4a4 InterruptCount   : Uint4B
       +0x4a8 KernelTime       : Uint4B
       +0x4ac UserTime         : Uint4B
       +0x4b0 DpcTime          : Uint4B
       +0x4b4 DebugDpcTime     : Uint4B
       +0x4b8 InterruptTime    : Uint4B
       +0x4bc AdjustDpcThreshold : Uint4B
       +0x4c0 PageColor        : Uint4B
       +0x4c4 SkipTick         : Uint4B
       +0x4c8 MultiThreadSetBusy : UChar
       +0x4c9 Spare2           : [3] UChar
       +0x4cc ParentNode       : Ptr32 _KNODE
       +0x4d0 MultiThreadProcessorSet : Uint4B
       +0x4d4 MultiThreadSetMaster : Ptr32 _KPRCB
       +0x4d8 ThreadStartCount : [2] Uint4B
       +0x4e0 CcFastReadNoWait : Uint4B
       +0x4e4 CcFastReadWait   : Uint4B
       +0x4e8 CcFastReadNotPossible : Uint4B
       +0x4ec CcCopyReadNoWait : Uint4B
       +0x4f0 CcCopyReadWait   : Uint4B
       +0x4f4 CcCopyReadNoWaitMiss : Uint4B
       +0x4f8 KeAlignmentFixupCount : Uint4B
       +0x4fc KeContextSwitches : Uint4B
       +0x500 KeDcacheFlushCount : Uint4B
       +0x504 KeExceptionDispatchCount : Uint4B
       +0x508 KeFirstLevelTbFills : Uint4B
       +0x50c KeFloatingEmulationCount : Uint4B
       +0x510 KeIcacheFlushCount : Uint4B
       +0x514 KeSecondLevelTbFills : Uint4B
       +0x518 KeSystemCalls    : Uint4B
       +0x51c SpareCounter0    : [1] Uint4B
       +0x520 PPLookasideList  : [16] _PP_LOOKASIDE_LIST
       +0x5a0 PPNPagedLookasideList : [32] _PP_LOOKASIDE_LIST
       +0x6a0 PPPagedLookasideList : [32] _PP_LOOKASIDE_LIST
       +0x7a0 PacketBarrier    : Uint4B
       +0x7a4 ReverseStall     : Uint4B
       +0x7a8 IpiFrame         : Ptr32 Void
       +0x7ac PrcbPad2         : [52] UChar
       +0x7e0 CurrentPacket    : [3] Ptr32 Void
       +0x7ec TargetSet        : Uint4B
       +0x7f0 WorkerRoutine    : Ptr32     void 
       +0x7f4 IpiFrozen        : Uint4B
       +0x7f8 PrcbPad3         : [40] UChar
       +0x820 RequestSummary   : Uint4B
       +0x824 SignalDone       : Ptr32 _KPRCB
       +0x828 PrcbPad4         : [56] UChar
       +0x860 DpcListHead      : _LIST_ENTRY
       +0x868 DpcStack         : Ptr32 Void
       +0x86c DpcCount         : Uint4B
       +0x870 DpcQueueDepth    : Uint4B
       +0x874 DpcRoutineActive : Uint4B
       +0x878 DpcInterruptRequested : Uint4B
       +0x87c DpcLastCount     : Uint4B
       +0x880 DpcRequestRate   : Uint4B
       +0x884 MaximumDpcQueueDepth : Uint4B
       +0x888 MinimumDpcRate   : Uint4B
       +0x88c QuantumEnd       : Uint4B
       +0x890 PrcbPad5         : [16] UChar
       +0x8a0 DpcLock          : Uint4B
       +0x8a4 PrcbPad6         : [28] UChar
       +0x8c0 CallDpc          : _KDPC
       +0x8e0 ChainedInterruptList : Ptr32 Void
       +0x8e4 LookasideIrpFloat : Int4B
       +0x8e8 SpareFields0     : [6] Uint4B
       +0x900 VendorString     : [13] UChar
       +0x90d InitialApicId    : UChar
       +0x90e LogicalProcessorsPerPhysicalProcessor : UChar
       +0x910 MHz              : Uint4B
       +0x914 FeatureBits      : Uint4B
       +0x918 UpdateSignature  : _LARGE_INTEGER
       +0x920 NpxSaveArea      : _FX_SAVE_AREA
       +0xb30 PowerState       : _PROCESSOR_POWER_STATE
查看KPRCB地址,这里是单核，所以只有一个值。
    kd> dd KiProcessorBlock  L2
这个地址减去0x120就是KPCR的地址。
继续看int 2e
    0FFDFF000h这个地址正好就是KPCR的首地址。
第一个成员叫 _NT_TIB
    kd> dt _NT_TIB
    nt!_NT_TIB
       +0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD
       +0x004 StackBase        : Ptr32 Void
       +0x008 StackLimit       : Ptr32 Void
       +0x00c SubSystemTib     : Ptr32 Void
       +0x010 FiberData        : Ptr32 Void
       +0x010 Version          : Uint4B
       +0x014 ArbitraryUserPointer : Ptr32 Void
       +0x018 Self             : Ptr32 _NT_TIB
这里是DWORD，实际上就是`_EXCEPTION_REGISTRATION_RECORD`。一个异常链表，存储的是异常的处理函数。
push的作用就是保存老的异常链表，然后将新的ExceptionList设为空白。
再看0FFDFF124h这个位置，实际上是KPCRB的+0x4这个位置。当前CPU所执行线程的_ETHREAD。
而_ETHREAD第一个成员是 _KTHREAD
    kd> dt _ETHREAD
    nt!_ETHREAD
       +0x000 Tcb              : _KTHREAD
       +0x1c0 CreateTime       : _LARGE_INTEGER
       +0x1c0 NestedFaultCount : Pos 0, 2 Bits
       +0x1c0 ApcNeeded        : Pos 2, 1 Bit
       +0x1c8 ExitTime         : _LARGE_INTEGER
       +0x1c8 LpcReplyChain    : _LIST_ENTRY
       +0x1c8 KeyedWaitChain   : _LIST_ENTRY
       +0x1d0 ExitStatus       : Int4B