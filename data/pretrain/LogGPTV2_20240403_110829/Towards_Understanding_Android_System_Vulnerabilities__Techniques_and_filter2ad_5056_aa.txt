title:Towards Understanding Android System Vulnerabilities: Techniques and
Insights
author:Daoyuan Wu and
Debin Gao and
Eric K. T. Cheng and
Yichen Cao and
Jintao Jiang and
Robert H. Deng
Towards Understanding Android System Vulnerabilities:
Techniques and Insights
Daoyuan Wu∗
Debin Gao
Singapore Management University
Singapore Management University
PI:EMAIL
PI:EMAIL
Eric K. T. Cheng
The Hong Kong Polytechnic
University
PI:EMAIL
Yichen Cao
SOBUG, ShenZhen, China
PI:EMAIL
Jintao Jiang
SOBUG, ShenZhen, China
PI:EMAIL
Robert H. Deng
Singapore Management University
PI:EMAIL
ABSTRACT
As a common platform for pervasive devices, Android has been
targeted by numerous attacks that exploit vulnerabilities in its apps
and the operating system. Compared to app vulnerabilities, system-
level vulnerabilities in Android, however, were much less explored
in the literature. In this paper, we perform the first systematic study
of Android system vulnerabilities by comprehensively analyzing all
2,179 vulnerabilities on the Android Security Bulletin program over
about three years since its initiation in August 2015. To this end,
we propose an automatic analysis framework, upon a hierarchical
database structure, to crawl, parse, clean, and analyze vulnerability
reports and their publicly available patches. This framework in-
cludes (i) a lightweight technique to pinpoint the affected modules
of given vulnerabilities; (ii) a robust method to study the complexity
of patch code; and most importantly, (iii) a similarity-based algo-
rithm to cluster patch code patterns. Our clustering algorithm first
extracts patch code’s essential changes that not only concisely re-
flect syntactic changes but also keep important semantics, and then
leverages affinity propagation to automatically generate clusters
based on their pairwise similarity. It allows us to obtain 16 vulnera-
bility patterns, including six new ones not known in the literature,
and we further analyze their characteristics via case studies. Besides
identifying these useful patterns, we also find that 92% Android
vulnerabilities are located in the low-level modules (mostly in na-
tive libraries and the kernel), whereas the framework layer causes
only 5% vulnerabilities, and that half of the vulnerabilities can be
fixed in fewer than 10 lines of code each, with 110 out of 1,158 cases
requiring only one single line of code change. We further discuss
the implications of all these results. Overall, we provide a clear
overview and new insights about Android system vulnerabilities.
∗The idea was proposed by this author, and partial of his work was performed while
at SOBUG (https://sobug.com/) during a research internship as a vulnerability analyst.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329831
CCS CONCEPTS
• Security and privacy → Mobile platform security;
KEYWORDS
Android Security; System Vulnerability; Patch Code Clustering
ACM Reference Format:
Daoyuan Wu, Debin Gao, Eric K. T. Cheng, Yichen Cao, Jintao Jiang, and Robert
H. Deng. 2019. Towards Understanding Android System Vulnerabilities:
Techniques and Insights. In ACM Asia Conference on Computer and Com-
munications Security (AsiaCCS ’19), July 9–12, 2019, Auckland, New Zealand.
ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3321705.3329831
1 INTRODUCTION
Android has become the most popular system for pervasive de-
vices over years, with a global market share of smartphones at over
80% [8]. As more and more attacks are targeting at Android by
exploiting vulnerabilities in its apps and the system [7, 23, 61, 75],
detecting and analyzing Android vulnerabilities has been an emerg-
ing topic in Android security research. Compared to app vulnera-
bilities that have been extensively studied (e.g., [22, 24, 25, 27, 30,
34, 42, 48, 54, 58, 66–69, 72, 79, 80]), system-level vulnerabilities in
Android, however, were much less explored in the literature (mainly
about framework-layer vulnerabilities, e.g., [16, 37, 60, 64]). This
could be due to the difficulty of understanding low-level system
vulnerabilities and the lack of analysis resources.
The recent arise of bug bounty programs gives researchers a
new source to systematically analyzing vulnerabilities. For example,
Finifter et al. [29] performed the first empirical study of vulnerabil-
ity rewards programs (VRP) using the Chrome and Firefox VRPs,
and Zhao et al. [76] measured the vulnerability reports submitted by
white-hats on the Hackerone and Wooyun vulnerability platforms.
Android also has its own bug bounty program called the Android
Security Bulletin program. A recent study [52] utilized the Bulletin
resource to analyze Android system vulnerabilities; however, it re-
lied on significant manual effort to measure 660 vulnerabilities only
for metadata and statistical results. Moreover, only text information
from corresponding CVE (Common Vulnerabilities and Exposures)
reports was analyzed, while the patch was left not mined.
In this paper, we aim to fill the current gap in understanding
Android system vulnerabilities by performing the first systematic
study that covers all 2,179 vulnerabilities and their 1,349 publicly
available patches on the Android Security Bulletin program from
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand295its initiation in August 2015 to our analysis launched in June 2018.
To make such scale a study and to easily adapt to larger datasets
in the future, it is critical to adopt a systematic methodology with
manual efforts involved only for configuring the analysis and inter-
preting the results. Fortunately, with structured Bulletin reports,
we are able to propose such an automatic analysis framework that
can crawl, parse, clean, and analyze vulnerability reports and their
patches. Specifically, it builds upon a hierarchical database to store
all the text and code information of each Android vulnerability in
an organized and searchable structure, and the major novelty lies
in its three analyzers for the analysis of vulnerable modules, patch
code complexity, and vulnerability patterns. In particular, how to
automatically cluster vulnerability patterns from a number of ini-
tially irrelevant code fragments (i.e., contiguous lines of code [40])
is the key challenge. We now elaborate these three analyzers and
the corresponding analysis results.
In the first analyzer, we classify vulnerabilities by different An-
droid modules to shed light on the system modules that are most
susceptible and thus require more security attention. Unlike the
prior work [52] that employs manual analysis, we propose a light-
weight technique that leverages two useful features of Android Bul-
letin reports (see §3.2 for details) to effectively pinpoint the affected
modules of given vulnerabilities. With this analyzer, we successfully
obtain the layered map of vulnerable Android modules, and find
that 92% of the Android vulnerabilities are located in low-level mod-
ules that are mainly coded in C/C++, especially native libraries and
kernel drivers. In contrast, the framework and application layers
contribute to only 5% and 2.5% vulnerabilities, respectively. More-
over, the media, Wi-Fi, and telephony related modules introduce
hundreds of vulnerabilities across different layers, making them
highly risky. We also perform more in-depth study on code with a
large number of vulnerabilities, e.g., MPEG4Extractor.cpp in the
libstagefright media library that appeared in 26 distinct patches.
Secondly, we present a robust method to study the complexity of
patch code, in which we extract the “real” patch diff code by exclud-
ing not only the auxiliary code lines (e.g., the include/import and
the comment statements) but also the test code that is associated
with patches. We analyze the complexity of diff code extracted at
both the file and the code line granularity. Results show that a sig-
nificant portion of the Android vulnerabilities involve non-complex
fixes, with 60% requiring only one file change and with 50% fixable
in fewer than 10 lines of code. This indicates that many Android
vulnerabilities are likely implementation bugs.
Lastly, we propose a similarity-based algorithm to automatically
cluster Android patch code patterns, and reveal system developers’
common coding mistakes that lead to vulnerabilities. Note that this
task is different from the classic code clone detection problem [17,
39, 40, 43, 44, 49–51, 71] because our goal of clustering similar
patches is about finding similar “changes” that involve four pieces
of code per pair of patches, whereas code clone detection focuses
only on two pieces of “original” code per comparison. Hence, we
design a new algorithm specifically for similar patch clustering.
We first extract diff code fragments’ essential changes and express
each such change into one code text. We then generate a similarity
matrix by calculating these code texts’ pairwise similarity, and
further leverage affinity propagation [31] to automatically generate
Figure 1: A sample webpage of Android Security Bulletin website.
clusters according to the matrix. Finally, patterns are abstracted
from top similar cases within clusters.
By running this algorithm, we obtain 83 initial clusters of which
we quickly filter out 50 small-size ones as they contain only fewer
than 10 code fragments each and actually do not exhibit evident
security-oriented patterns. Out of the remaining 33 clusters, 28
(84.8%) are associated with certain patterns, with 19 clusters for
security-oriented patterns and 9 clusters for non-security-related
patterns. We eventually extract 16 vulnerability patterns from 19
security-oriented clusters. They include not only traditional pat-
terns, e.g., overflow and uninitialized data, but also six new ones
not known in the literature, such as mis-retrieving Android service
by reference and inconsistent Android Parcelable serialization. We
then analyze their characteristics by performing case studies.
Furthermore, we discuss four implications of our analysis results.
Besides quantitatively pointing out the seriousness of Android
system vulnerabilities and the necessity of adopting them into
future threat models, our results can help system developers avoid
making similar mistakes in the same module and guide program
analysis techniques for automatic vulnerability detection.
2 ANDROID SECURITY BULLETIN PROGRAM
Android Security Bulletin program (https://source.android.com/
security/bulletin/) started in August 2015 and is updated monthly.
Figure 1 shows a sample page (October 2016) of its website. It lists
all vulnerabilities that were fixed and made public in a calendar
month. As shown on the right-hand side of Figure 1, it first gives
an outline of the vulnerabilities in different modules, such as the
service manager, the lock setting service, and the media server. For
each module, it further lists the detailed vulnerability information,
including CVE, the Android vulnerability ID (AID), the vulnerability
severity, and the updated Android versions. In particular, the URL
of AID actually points to the webpage of the corresponding patch
code, and we call such URL “the patch URL”.
3 METHODOLOGY
Our goal is to conduct a systematic study of Android system vul-
nerabilities by comprehensively analyzing all vulnerabilities on the
Android Security Bulletin program from its initiation in August
2015 to our analysis launched in June 2018. To minimize manual
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand296Figure 2: The workflow of our automatic analysis framework for Android system vulnerability reports and their patches.
Figure 3: An example illustrating our hierarchical database structure for storing all the text and code information of each
Android vulnerability in an organized and searchable structure.
analysis as in previous work [41, 52], we propose the first analysis
framework that can automatically crawl, parse, clean, and analyze
Android bulletin reports and their publicly available patches. With
such a framework, manual efforts are required only for configuring
the analysis and interpreting the results (e.g., abstracting patterns
from automatically generated clusters). It can also easily adapt to
larger datasets in the future with evolving analysis results.
Overview. Figure 2 shows the overall workflow of our analysis
framework. It consists of a bulletin crawler, a patch crawler, a
cleaner, and three analyzers. All these components are written in
Python, with 1,230 lines of code excluding the library support, e.g.,
Selenium [14] for crawlers and Jellyfish [9] for string similarity
metrics. We summarize the functionality of each component as
follows:
• Bulletin crawler is responsible for crawling the basic infor-
mation of every vulnerability on Android Bulletin website.
The information crawled includes CVE (Common Vulner-
ability Entry) id, vulnerability type, vulnerability severity,
and several other meta information. One important meta
information is the URLs of each vulnerability’s patch code,
which will be further used by the patch crawler. All this
information is parsed directly from the bulletin website’s
HTML files and saved into a vulnerability metadata database.
• Patch crawler takes patch URLs as input to crawl the patch
code websites and then builds a patch code database. Since
there are several types of patch code websites for Android
bulletin vulnerabilities, we build all corresponding patch
crawlers. The HTML parsing here is more complicated than
that in the bulletin crawler, because extracting diff code of
patches into organized structures is difficult; see details in
§3.3.
• Cleaner is designed for cleaning the raw database, especially
the text information in the vulnerability metadata. This is
because Android bulletin reports are still manually created
and thus could come with disorganized text. For example, the
“EoP” vulnerability type could be represented as “elevation-
of-privilege-vulnerability”, “elevation_of_privilege”, and even
“eopv”. Moreover, although the majority of patch URLs are
correct, a few of them are outdated (e.g., “commit/?id=” in-
stead of “patch/?id=”), or contain unescaped characters (e.g.,
“%2F”) and redundant characters (e.g., redundant “/” in “la//”).
Cleaner cleans all this misconfigured information in a one-
time manner.
• Analyzers take the cleaned database as input and output
analysis results. Besides the vulnerability metadata analysis,
we have designed three analyzers (as shown in Figure 2) to