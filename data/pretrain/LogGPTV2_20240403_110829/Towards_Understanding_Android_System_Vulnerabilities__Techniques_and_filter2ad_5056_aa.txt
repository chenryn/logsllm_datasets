# Title: Towards Understanding Android System Vulnerabilities: Techniques and Insights

## Authors:
- Daoyuan Wu
- Debin Gao
- Eric K. T. Cheng
- Yichen Cao
- Jintao Jiang
- Robert H. Deng

## Abstract
As a widely adopted platform for pervasive devices, Android has been the target of numerous attacks that exploit vulnerabilities in both its applications and operating system. While app-level vulnerabilities have been extensively studied, system-level vulnerabilities in Android have received comparatively less attention in the literature. This paper presents the first comprehensive study of Android system vulnerabilities by analyzing all 2,179 vulnerabilities listed in the Android Security Bulletin program over approximately three years since its inception in August 2015.

To achieve this, we propose an automated analysis framework based on a hierarchical database structure. This framework is designed to crawl, parse, clean, and analyze vulnerability reports and their publicly available patches. The framework includes:
1. A lightweight technique to identify the affected modules of given vulnerabilities.
2. A robust method to evaluate the complexity of patch code.
3. A similarity-based algorithm to cluster patch code patterns.

Our clustering algorithm extracts essential changes from patch code, capturing both syntactic and semantic aspects, and uses affinity propagation to generate clusters based on pairwise similarity. This approach allowed us to identify 16 vulnerability patterns, including six previously unknown ones. We further analyzed these patterns through case studies.

Additionally, our findings indicate that 92% of Android vulnerabilities are located in low-level modules (primarily native libraries and the kernel), while the framework layer accounts for only 5% of vulnerabilities. Furthermore, half of the vulnerabilities can be fixed with fewer than 10 lines of code, and 110 out of 1,158 cases require just one line of code change. We discuss the implications of these results, providing new insights into Android system vulnerabilities.

## Keywords
Android Security, System Vulnerability, Patch Code Clustering

## ACM Reference Format
Daoyuan Wu, Debin Gao, Eric K. T. Cheng, Yichen Cao, Jintao Jiang, and Robert H. Deng. 2019. Towards Understanding Android System Vulnerabilities: Techniques and Insights. In ACM Asia Conference on Computer and Communications Security (AsiaCCS '19), July 9–12, 2019, Auckland, New Zealand. ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3321705.3329831

## 1. Introduction
Android has become the most popular operating system for mobile devices, with a global market share of over 80% [8]. As more attacks target Android by exploiting vulnerabilities in its apps and system [7, 23, 61, 75], detecting and analyzing these vulnerabilities has become a critical area of research. While app-level vulnerabilities have been extensively studied (e.g., [22, 24, 25, 27, 30, 34, 42, 48, 54, 58, 66–69, 72, 79, 80]), system-level vulnerabilities in Android have received much less attention (mainly focusing on framework-layer vulnerabilities, e.g., [16, 37, 60, 64]). This disparity may be due to the complexity of understanding low-level system vulnerabilities and the lack of dedicated analysis resources.

The rise of bug bounty programs has provided researchers with a new source for systematic vulnerability analysis. For example, Finifter et al. [29] conducted the first empirical study of vulnerability rewards programs (VRPs) using Chrome and Firefox VRPs, and Zhao et al. [76] analyzed vulnerability reports submitted by white-hat hackers on HackerOne and Wooyun platforms. Android's own bug bounty program, the Android Security Bulletin, offers a valuable resource for such analysis. A recent study [52] used this resource to analyze Android system vulnerabilities, but it relied heavily on manual effort and only covered 660 vulnerabilities, focusing on metadata and statistical results. Moreover, it did not analyze the actual patch code.

In this paper, we aim to fill this gap by conducting the first systematic study covering all 2,179 vulnerabilities and their 1,349 publicly available patches on the Android Security Bulletin program from its initiation in August 2015 to June 2018. To handle this scale of data and to adapt to larger datasets in the future, we developed an automated analysis framework that minimizes manual effort. This framework builds upon a hierarchical database to store and organize text and code information for each Android vulnerability. It includes three key analyzers for identifying vulnerable modules, evaluating patch code complexity, and clustering vulnerability patterns.

## 2. Android Security Bulletin Program
The Android Security Bulletin program (https://source.android.com/security/bulletin/) was launched in August 2015 and is updated monthly. Figure 1 shows a sample page from October 2016, listing all vulnerabilities fixed and made public in that month. The bulletin provides an overview of vulnerabilities in different modules, such as the service manager, lock setting service, and media server. For each module, it lists detailed information, including CVE, Android vulnerability ID (AID), severity, and updated Android versions. The AID URL points to the webpage containing the corresponding patch code, which we refer to as the "patch URL."

## 3. Methodology
Our goal is to conduct a systematic study of Android system vulnerabilities by comprehensively analyzing all vulnerabilities listed in the Android Security Bulletin program from August 2015 to June 2018. To minimize manual effort, we developed an automated analysis framework that can crawl, parse, clean, and analyze Android bulletin reports and their publicly available patches. This framework requires manual intervention only for configuring the analysis and interpreting the results, making it adaptable to larger datasets in the future.

### Overview
Figure 2 illustrates the workflow of our analysis framework, which consists of a bulletin crawler, a patch crawler, a cleaner, and three analyzers. All components are implemented in Python, with 1,230 lines of code excluding library support, such as Selenium [14] for crawling and Jellyfish [9] for string similarity metrics. The functionality of each component is summarized below:

- **Bulletin Crawler**: Crawls basic information about every vulnerability on the Android Bulletin website, including CVE ID, vulnerability type, severity, and other meta information. It also collects URLs of each vulnerability’s patch code, which are used by the patch crawler. This information is parsed from the bulletin website's HTML files and stored in a vulnerability metadata database.
- **Patch Crawler**: Takes patch URLs as input, crawls the patch code websites, and builds a patch code database. Since there are multiple types of patch code websites for Android bulletin vulnerabilities, we developed corresponding patch crawlers. Extracting diff code into organized structures is more complex than in the bulletin crawler; see §3.3 for details.
- **Cleaner**: Cleans the raw database, particularly the text information in the vulnerability metadata. This is necessary because Android bulletin reports are manually created and may contain disorganized text. For example, the "EoP" vulnerability type might be represented as "elevation-of-privilege-vulnerability," "elevation_of_privilege," or even "eopv." The cleaner also corrects outdated, unescaped, and redundant characters in patch URLs.
- **Analyzers**: Take the cleaned database as input and output analysis results. In addition to the vulnerability metadata analysis, we designed three analyzers (as shown in Figure 2) to:

  1. Classify vulnerabilities by different Android modules to highlight the most susceptible modules.
  2. Evaluate the complexity of patch code by extracting "real" diff code, excluding auxiliary and test code.
  3. Cluster patch code patterns using a similarity-based algorithm to identify common coding mistakes leading to vulnerabilities.