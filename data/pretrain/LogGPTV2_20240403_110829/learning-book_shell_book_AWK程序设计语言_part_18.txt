capitals:
country
capital
CC :
country
area
population
continent
capital
Isort countries >temp.countries
Isort capitals >temp.capitals
Ijoin temp.countries temp.capitals >cc
这个文件说明数据库中有两张基表—countries 与capitals，一张导出表cc，导出表cc通过把基
表排序并存放在恪时文件中，再对临时文件执行连接操作来生成，也就是说，cc通过执行
107
sort countries >temp.countries
sort capitals >temp.capitals
join temp.countries temp.capitals >cc
生成.
一个relfile常常包含一张全局美系表（universalrelation），它是一张包含了所有属性的表，是
relfile的最后一张表，这种做法保证至少有一张表包含了属性的所有可能的组合，表格cc就是数据
库countries-capitals 的全局关系表.
一个优秀的数据库设计必须考虑到该数据库可能收到的查询种类，属性间存在的依赖关系，但是对
于一个小数据库来说，q已经足够快了，因为数据库的表比较少，所以很难展现出relfile设计的精妙
之外
q，类awk查询语言
我们的数据库查询语言q由单独一行的awk程序组成，但字段名被属性名替代.查询处理程序
qawk按照下面的步骤来响应一个查询：
---
## Page 110
第四章报表与数据库
102
1.判断该查询所包含的属性集；
2.从relfile的第一行开始，搜索第一张包含了查询中全部属性的表，如果该表是基表，则用它作为
查询的输入，如果是导出表，则构造该表，再用它作为查询的输入.（这意味者查询中可能出现的属
性组合一定也出现在relfile的基表或导出表中)；
3.通过把符号型的字段引用替换成对应的数值型字段引用，将q查询转换成等价的awk程序，这个
程序接下来会把步骤2决定的表作为输入数据，
q查询：
$continent~/Asia/(print $country,$population}
提到了属性continent，country与population，它们都是第一张表countries的属性子集.查
询处理程序把该查询转换成程序
$4 ~/Asia/ ( print $1, $3}
并把文件countries作为输入数据.
9查询
{print $country, $population, $capital }
包含属性country，population与capital，它们都是导出表cc的属性子集.于是查询处理程序利
用relfile列出的构造命令构造出表格cc，并将该查询转换成程序
{print $1，$3,$5 }
108
程序犯用构造而成的cc作为输入数据.
虽然我们用的是“查询”这个词来描述qawk，但实际上它也可以用来作计算，下面这个查询打印面
积的平均值：
{ area += $area ); END ( print area/NR }
qawk,q-to-awk翻译器
我们用gawk的实现来结束本章，它把q查询转换成等价的awk程序.
首先，qawk读取文件relfile,将表名收集到数组relname中.为了构造第i张表，程序把必要
的构造命令收集到数组array中，从cmd[i，1]开始存放.它还把每张表的属性收集到2维数组attr
中，元素attr[i，a]存放的是第i张表中，名为a的属性的索引.
然后，qawk读取一个查询，判断它会用到哪些属性，查询中的属性都是形式为Sname的字符串，利
用函数subset，就可以找到第一张包含了查询中全部属性的表T.程序通过把属性的索引替换成原始
形式来生成awk程序，并执行必要的命令来生成表格T，再执行新生成的awk程序，把表格T作为输
入数据，
对每一个后来的查询，第二个步骤都要重复一次，下面这个流程图展示了gawk的桓架：
---
## Page 111
第四章报表与数据库
103
q query
relfile
qawk
awk program
input T;
awk
answer
109
这是qawk的源代码：
#qawk - awk relational database
query processor
BEGIN { readrel("relfile") }
/./
{doquery($0）}
function readrel(f) (
while (getline  0)
#parse relfile
if （S0 -/^[A-Za-z]+ *:/){
name:
gsub(/[^A-Za-z]+/,"", $0)
remove all but name
relname[++nrel] = $0
}else if ($0~/^[\t]*1/)
Icommand..
cmd[nrel, ++ncmd[nrel]]
= substr($0,index($0,"!")+1)
else if ($0 ~/^[\t]*[A-Za-z]+[ \t]*$/)
#attribute
attr[nrel, $1] = ++nattr[nrel]
else if ($0 1-/^[ \t]*$/)
 not white space
print “bad 1ine in relfile:", $0
一
function doquery(s,
i,j）{
for (i in qattr)
#clean up for next query
delete qattr[i]
query = s
# put $names in query into qattr, without $
while(match(s,/\$[A-Za-z]+/))(
qattr[substr(s, RSTART+1, RLENGTH-1)] = 1
S = substr(S, RSTART+RLENGTH+1)
}
for (i = 1;i  nrel)
# didn't find a table with all attributes
missing(qattr)
else{
# table i contains attributes in query
for (j in qattr)
create awk program
gsub("\\s" j,"$" attr[i,j], query)
for (j = 1;j  0; i++)
if (rand()  Nounphrase Verbphrase
Nounphrase -> the boy
Nounphrase -> the gir1
Verbphrase -> Verb Modlist Adverb
Verb -> runs
Verb -> walks
Modlist -> very Modlist
Adverb -> quick1y
Adverb => s1owly
114
如下所示，产生式为非终结符生成语句.叙设Sentence是起始非终结符，那么选择一条以该符号
作为左部的产生式：
Sentence -> Nounphrase Verbphrase
接下来，从右部选择一个非终结符，比如说Nounphrase，然后用以Nounphrase作为左部的产生式替
换梓Nounphrase：
---
## Page 117
第五章文本处理
109