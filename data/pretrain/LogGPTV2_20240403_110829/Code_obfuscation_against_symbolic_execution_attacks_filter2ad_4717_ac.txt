plying Flat after Virtualize increases the slowdown.
Observation 4: The average percentage of time spent wait-
ing for the SMT solver to solve path constraints in the orig-
inal program is equal to 66.35% for the original programs
in the ﬁrst dataset. EncL, AddO, ISub and BCF do not
have a signiﬁcant impact on this value. This is because very
few additional queries are added by EncL and ISub. Also
KLEE can simplify the majority of path constraints added
by AddO and BCF via caching query results, i.e. without
calling the SMT solver for each path constraint. On the
other hand, EncA, Flat and CFF each cause an increase of
about 10% when used separately. EncA and Flat cause an
increase of about 15% when used together. However, apply-
ing Flat twice does not lead to a 20% increase. Contrarily,
Virt decreases the time spent waiting for the SMT solver by
about 5% when used alone (despite issuing more and larger
queries) and by 5-45% when used in combination with EncL,
AddO and Virt.
Observation 5: Flat and CFF on average lead to an in-
crease of 2 orders of magnitude in the number of queries
issued by KLEE to the SMT solver. The queries are also ap-
proximately 10 times larger than the original queries. This
means that the slowdown is due to the fact that KLEE is
issuing many more large queries to the SMT solver which
is expensive in terms of time. These queries are generated
due to branches which are dependent on program input val-
ues. Programs which do not contain loops or if statements
dependent on input values have no increase in the number
of issued queries. An important advantage of ﬂattening is
that it has the smallest eﬀect on program size compared to
all other employed transformations.
Observation 6: EncA increases the query size 20 times.
This suggests that the slowdown for this technique is due
to the diﬃculty of solving the queries and not to the large
number of queries as was the case in Observation 5. These
queries are more diﬃcult to solve due to the non-trivial
complexity of the arithmetic expressions added by EncA.
Remarkably, the size of the program is aﬀected less by this
transformation than by Virt, AddO and even EncL, because
the complex expressions added by EncA are not as large as
control ﬂow statements added by the other transformations.
Observation 7: Virt tends to reduce the time that KLEE
waits for the SMT solver. The reason for this reduction is
due to the fact that this transformation adds more instruc-
tions to the execution paths, i.e. loading bytecode values
and data values for every original statement of the program.
Since all instructions have to be interpreted by the sym-
bolic execution engine, this translates into higher slowdown.
Applying Virt multiple times yields multiple levels of in-
terpreter fetch-decode-dispatch instructions, hence the large
slowdown when virtualization is applied twice. Similarly to
ﬂattening, Virt induces a higher slowdown on programs with
loops or if-statements depending on program inputs.
Experiment 3: KLEE outputs an SMT ﬁle for every
path that it ﬁnds in the program it analyzes. These SMT
instances contain the path constraints necessary to generate
a test case that leads to the corresponding path. We com-
pared the SMT instances output by KLEE for all programs
in the dataset (including the original programs).
Observation 8: The sets of SMT instances corresponding
to each obfuscated version of a program are practically iden-
tical to the set of SMT instances of the original (unobfus-
cated) program, except for EncA, which were signiﬁcantly
larger. For all transformations (except EncA) only small
diﬀerences occur such as using shifting and adding instead
of multiplication. This is due to the fact that KLEE uses
concrete values for instructions added by the majority of ob-
fuscation transformations employed in this case-study. The
concrete values can be simpliﬁed away from path constraints
even without calling the SMT solver.
Observation 9: The time the symbolic engine waits for
the SMT solver to ﬁnd an answer to the query accounts
for almost all the increase in eﬀort added by obfuscating
a program using EncA. Therefore, one possibility for im-
proving obfuscation is to make these expressions more com-
plex and diﬃcult to solve by applying the EncA transfor-
mation multiple times to the same program. However, such
an obfuscation could be bypassed by an attacker who knows
all the substitution rules that the EncA transformation can
use and then simply applies them backwards. Rolles [44]
has developed a method that could automatically extract
such substitution rules from programs by employing SMT
solvers. In general, the complexity of SMT instances can be
increased by non-linear transformations such as those em-
ployed in cryptographic hash functions (see Section 5.2).
Observation 10: None of the obfuscation transformations
insert additional paths dependent on input values to the
program, i.e. the sizes of the sets of SMT instances corre-
sponding to each obfuscated version of a program have the
same size as the set of SMT instances of the original (un-
obfuscated) program. This may be counter intuitive since
AddO and BCF insert additional if statements. Since these
if statements are not input dependent and always have the
same truth value, the SMT solver is able to eliminate the
dead branches of these if-statements, i.e. the symbolic execu-
tion engine will not analyze the code in those dead branches.
3.3 Experiments with Second Dataset
The second dataset contains over 5000 C programs con-
sisting of a main function and another function fi randomly
generated by the RandomFuns feature of Tigress. Each pro-
gram from the second data set computes a diﬀerent function
fi(argv[1]) and outputs some integer number. The output of
the function is then compared to a hard coded integer value
equal to fi(12345), as shown in Listing 1. If the comparison
succeeds then the program prints a distinctive message on
the standard output. This comparison resembles a license
check. Finding an input value that passes this comparison
is harder for a white-box test case generator to ﬁnd, than
an input that would fail the comparison.
For the experiments described in this subsection we used
Listing 1: Example program from 2nd dataset.
1 // f_i ( " 1 2 3 4 5 " ) = 0 x 7 6 5 4 3 2 1 0
2 if ( f_i ( argv [1]) == 0 x 7 6 5 4 3 2 1 0 )
3
printf ( " win " ) ;
Data Types
Mean
StdDev
char
1.32
0.98
short
9.95
6.48
int
13.41
7.86
long
13.91
8.34
Loop Bound Constant Bounded Input
8.43
7.28
Mean
StdDev
8.45
8.07
Input
10.62
9.65
Operators Bitwise
4.74
5.60
Mean
StdDev
Simple Arith. Harder Arith.
9.97
8.60
8.91
6.81
All
11.23
8.60
Table 2: KLEE execution time (seconds) on original
programs w.r.t. code characteristics of 2nd dataset.
a machine with more cores to enable running multiple sym-
bolic executions in parallel. The machine uses the Ubuntu
14.04 64-bit operating system and it has an Intel Xeon E5-
1650v2 CPU with 12 logical cores each running at 3.50GHz
and 64GB of physical memory. For second dataset of pro-
grams we varied the same code characteristics as for the
manually written programs in the previous dataset. Addi-
tionally we also varied the following characteristics to see if
they inﬂuence the analysis of symbolic execution engines:
1. The data types of variables: char, short, int and long.
2. The types of bounds placed on loops:
integer con-
stants, integer input values bounded via modulo a small
constant and unbounded integer input values.
3. The types of operators used inside statements: sim-
ple arithmetic (i.e. addition and subtraction), harder
arithmetic (which also includes multiplication, modulo
and division), bitwise (i.e. logical and, or, xor and bit
shifting) and a combination of all operators.
Experiment 4: The impact of these 3 code characteris-
tics on the execution time of KLEE given the original (unob-
fuscated) programs can be seen in Table 2. As was the case
with the input size in Table 1, the symbolic execution time
increases with the size (ranges) of the data types. Diﬀerent
types of bound conditions placed on loop statements cause
a mild diﬀerence on symbolic execution time, i.e. if the loop
iterates a constant number of times, then the symbolic exe-
cution engine will execute faster on average than if the num-
ber of loop iterations depends on the program input. Finally,
the type of operators used by the program have an impor-
tant impact on symbolic execution, because these operators
are used by path constraints which are issued as queries to
the SMT solver. We notice that bitwise operators are easier
to solve than arithmetic operators. The type of arithmetic
operators does not cause a large diﬀerence in symbolic ex-
ecution. However, harder arithmetic tends to be slower to
solve than simple arithmetic. More importantly, combining
all operators seems to have an additive eﬀect w.r.t. the time
taken to solve path constraints.
Experiment 5: We have obfuscated the fi functions with
5 obfuscation transformations from the Tigress tool: AddO,
EncA, EncL, Flat and Virt. We only chose these 5 trans-
formations, due to the fact that Obfuscator LLVM transfor-
mations are very similar to AddO, EncL and Flat. For this
KLEE
Median Mean
0.97
1.14
0.98
1.15
1.53
1.03
1.21
0.99
1.22
2.08
AddO16
EncA
EncL
Flat
Virt
angr
StdDev Median Mean
0.26
0.37
0.22
0.44
1.27
1.72
1.39
1.40
3.77
7.32
2.25
1.79
2.22
4.45
8.85
StdDev
2.49
1.90
4.60
2.85
5.01
Table 3: Symbolic execution slowdown on programs
obfuscated using Tigress, relative to unobfuscated
counterparts from 2nd dataset.
experiment we used KLEE and angr as symbolic execution
engines and we let them run until they found the path in
the program that prints a distinctive message on the stan-
dard output or the timeout of 1 hour is reached. When this
path is entered we know that the check guarding that path
has been bypassed by the symbolic execution engine. We
did not use angr in previous experiments because (as far as
the authors are aware) angr does not aim to achieve 100%
code coverage, as opposed to KLEE. Note that we have also
tried to employ the Triton symbolic execution engine [45] on
the obfuscated programs for both datasets. However, Tri-
ton crashed when symbolically executing programs obfus-
cated using Flat and Virt due to insuﬃcient memory. Tri-
ton transforms each assembly instruction into a sequence of
SMT constraints, which increases directly proportional to
the execution trace, which is large for programs obfuscated
with Flat and Virt.
Table 3 shows the median, mean and standard deviation of
symbolic execution slowdown on programs obfuscated from
the second dataset w.r.t. their unobfuscated counterparts.
The slowdown is computed as the time needed to symbol-
ically execute an obfuscated program until the path in the
program that prints the distinctive message on the standard
output is found, divided by the time need to symbolically
execute the unobfuscated version of the program to ﬁnd the
corresponding path. The median and standard deviation
were taken across 12713 obfuscated programs successfully
analyzed by the KLEE and angr within the 1 hour time
limit. We make the following observations using Table 3.
Observation 11: KLEE incurs a lower slowdown than angr
for all of the 5 obfuscation transformations employed in this
experiment. Therefore, we conclude that KLEE is the worst
case attacker for the obfuscation transformations we have
employed in this paper. Note that KLEE also has limita-
tions, e.g. it does not support goto instructions or in-line
assembly in C programs. However we see this as a techni-
cal, not a fundamental limitation.
Observation 12: The slowdown of ﬁnding the path that
prints a distinctive message (“win”) is much lower than the
slowdown for covering all reachable code (which was the goal
of the attacker in § 3.2). This is expected since the symbolic
execution engine may discover that particular path before
covering all reachable code.
3.4 Summary and Threats to Validity
In § 3.2, we have symbolically executed a set of programs
obfuscated with 39 diﬀerent conﬁgurations of 8 transforma-
tions from 2 obfuscation tools. We generated 100% code cov-
erage test suites that would be used by an attacker who aims
to simplify the CFG of an obfuscated program. The results
indicate that all obfuscation transformations can be broken
with diﬀerent computational eﬀort, which also depends on
Listing 2: Range divider with 2 branches
z = x + y + w
1 if ( x > 42)
2
3 else
4
5
z = ((( x ^ y ) + (( x & y ) << 1) ) | w ) +
((( x ^ y ) + (( x & y ) << 1) ) & w ) ;
Listing 3: Program with loop
u n s i g n e d char * str = argv [1];
u n s i g n e d int hash = 0;
for ( int i = 0; i < strlen ( str ) ; str ++ , i ++) {
hash = ( hash << 7) ^ (* str ) ;
}
if ( hash == 809267) printf ( " win \ n " ) ;
1
2
3
4
5
6
code characteristics of the original program. EncL and ISub
are not eﬀective against symbolic execution. AddO and BCF
have a mild eﬀect on the slowdown. EncA slows down sym-