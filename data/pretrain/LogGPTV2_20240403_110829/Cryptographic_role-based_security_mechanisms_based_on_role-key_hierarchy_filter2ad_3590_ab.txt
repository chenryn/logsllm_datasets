chy H = hU, K, R, (cid:22)i on Ψ and generate all keys on H,
which is speciﬁed by three randomized algorithms, Setup,
KeyRGen, and AddU ser, described as follows:
• Setup(s, Ψ): Takes a security parameter s and a role
hierarchy Ψ as an input. It produces a manager key mk
and an initial parameter params, that is, Setup(s, Ψ) →
{H, mk, params}.
• GenRKey(params, ri): Takes the parameter params
and a role index ri. It generates a role key pki in ri,
that is, KeyRGen(params, ri) → pki.
• AddUser(mk, ID, ui,j): Takes a user identity ID, a
user index ui,j, and the manager key mk.
It out-
puts a user secret key, which involves a user label
labi,j and a private key dki,j, for the user ui,j, that is,
AddU ser(mk, ID, ui,j) → ski,j = (labi,j, dki,j). The
user label labi,j is added to the public encryption key:
params = paramsS{labi,j}.
In public-key settings, a user does not hold any private
information and the permission process is performed only
with the help of the public role key {pki} containing the
user’s labels {labi,j}, which is also called as ID-based RBC
because the user’s public labels can be used to support the
various functions.
3.3 Security Goal of RKH
Obviously, security requirements in general cryptosystem
are not suﬃcient enough to reﬂect the requirements of role-
key hierarchy.
It is important to consider typical attacks
when we try to design key hierarchy and its schemes.
In
contrast with existing key hierarchy, RKH has several unique
features:
1. Each user ui,j is assigned to an exclusive user key ski,j,
by which certain users can be chosen or identiﬁed in
the processes of encryption, revocation, and tracing;
2. Public-key cryptography can be introduced to ensure
the security of a user’s private key even if the role key
makes public in some systems. Therefore the role keys
can be stored anywhere by RBAC systems; and
3. The derivation function of a user’s private key is for-
bidden even for the cases of partial order relations,
Pr[Delegate(ski,j, cl) = skl,j′ ] ≤ ǫ, ∀cl (cid:22) ci.
(1)
where, ǫ is small enough. Hence a user cannot use this
capability to obtain new keys or identities.
In order to ensure system security, RKH also needs to
satisfy following properties:
• Each user in a role cannot get permissions to access
another role’s objects except for its subordinates, Also,
a user cannot forge other’s secret keys;
• The role key can be modiﬁed to satisfy the require-
ments of constraint policy, but it should not interfere
with the issued keys of others; and
• To support the capability of audit capability, there ex-
ists an eﬃcient tracing algorithm to identify the cor-
rupted users or gain the corresponding evidence.
The RKH is a group-oriented cryptography with “1:n”
character, where one role key corresponds to many user keys.
Hence, in addition to passive cryptanalysis, the collusion at-
tack is a major attack, which focuses on changing the priv-
ilege of the granted users or getting the other users’ keys.
This kind of attack involves the following cases:
• Collusion attack for framing users, in which the cor-
rupted users in R = {uik ,jk }t
k=1 wish to forge a new or
unused key in U \ R (called as honest user). The aim
of this attack is to avoid tracing and frame innocent
users.
• Collusion attack for role’s privilege, in which the cor-
rupted users in R = {uik ,jk }t
k=1 wish to forge a new or
unused key in R\{ri1 , · · · , rit}. The aim of this attack
is to change the privilege in partial order hierarchy.
We also present a formal security model for two cases of
collusion attacks in Appendix A. It is a challenging task to
avoid collusion attack since the traitors (corrupted users)
have been granted users before they are detected. Traitor
tracing is an eﬃcient method to tackle this attack. However,
we must ensure that the traitors cannot forge an ‘unused’ key
to avoid tracing but leave some ‘foregone’ clue of evidence
to discover them.
The number of colluders |R| = t is an important param-
eter. A RBC scheme is to be (t, n, m)-collusion secure if for
any subset of t in R with |U | = n and |R| = m, the adversary
can gain the advantage from R to break this scheme. It is
said to be fully collusion secure when it is (n, n, m)-collusion
secure.
4. CRYPTOGRAPHIC SECURITY MECH-
ANISMS BASED ON RKH
4.1 Role-based Signature
The signature is a mathematical scheme for demonstrating
the authenticity of a digital message or document. In RBAC
model, the roles assigned to a user can be considered as one
kind of identities of the user. Hence, a user could use his
own roles to sign a resource. In other words, such a signature
scheme provides a method to allow a user to anonymously
sign a message on behalf of his roles. We call it Role-based
Signature (RBS). The formal deﬁnition of RBS is provided
as follows:
Initial: Takes role hierarchy hR, (cid:22)i, and returns the role-
key hierarchy H = hU, K, R, (cid:22)i according to Setup and
GenRKey algorithms in RBC model;
Sign: Takes the role-key pki for ri, a user key ski,j, and
a message M ∈ {0, 1}∗, and returns a signature σ:
Sign(pki, ski,j, M ) → σ;
Verify: Takes the role-key pki and a purported signature σ
on a message M . It returns the validation result which
would be either valid or invalid. The latter response
can mean either that σ is not a valid signature, or that
the user who generated has been revoked (in a set of re-
voked users, RL): V erif y(pki, σ, M ) → valid/invalid;
Trace: Takes a user key ski,j then this algorithm can trace
a signature σ to at least one role member ui,j who gen-
erated it: T race(ski,j, σ) → valid/invalid.
The trace algorithm allows a third party to undo the sig-
nature anonymity using a special trapdoor and recognize the
original signer. A secure role-based signature scheme must
satisfy following properties:
• Correctness: This requires that, for all K = (P K, SK)
generated by role-key hierarchy, valid signatures by
role members can always be veriﬁed correctly, and in-
valid signatures should fail in the veriﬁcation phase:
V erif y(pki, Sign(pki, ski,j, M ), M ) = valid.
(2)
• Unforgeability: Only members of a role can create
valid signatures with the role.
• Anonymity: Given a message and its signature, the
identity of the individual signer cannot be determined
without the manager key mk.
• Traceability: Given any valid signature, the manager
or trusted third party should be able to trace who is-
sued the signature by the user’s secret key.
• Unlinkability: Given two messages and their signa-
tures, we cannot determine whether the signatures were
from the same signer or not.
In autonomous systems, role-based signature is used to
verify the legality of the source of input data transmitted
from other hosts or devices. This is more important for
information sharing systems to prevent harmful information
ﬂows.
4.2 Role-based Authentication
Authentication allows access control systems to gain suf-
ﬁcient assurance that the identity of certain entity is le-
gitimate as claimed. Cryptography-based authentication
is widely adopted in current systems because it provides a
higher level of security than password-based authentication.
In addition, a real-time authentication for high-risk opera-
tions is necessary to prevent a user from changing roles after
logging in. The authentication on RBAC should support two
qualitative classes of identiﬁcations:
Definition 3
(Role-based Signature). A role-based
signature scheme is a digital signature consisted of the fol-
lowing four procedures:
• User-based authentication, which is used to validate a
user’s identity, but the systems need to store the user’s
role information; and
4
Verify: The veriﬁer veriﬁes whether the response is consis-
tent with the commitment, the challenge, and the role
key: V erif y(pki, S, c, s) → valid/invalid. In the case
of user-based authentication, he can also check the va-
lidity of the prover’s label: V erif y(pki, S, c, s, labi,j) →
valid/invalid.
Trace: Takes a prover key ski,j then it can analyze an ex-
isting record re = hS, c, s, rii to verify whether or not
this prover generated this record: T race(ski,j, re) →
valid/invalid.
Similarly to role-based signature, role-based authentica-
tion protocols must satisfy the following properties: correct-
ness, anonymity, traceability, and unlinkability. Moreover,
the following attacks should be avoided:
• Impersonation: a deception whereby one entity pur-
ports to be another;
• Replay attack: an impersonation or other deception
involving information from a previous protocol execu-
tion on the same or a diﬀerent veriﬁer;
• Interleaving attack: an impersonation or other decep-
tion involving selective combination of information from
one or more previous or ongoing protocol executions;
and
• Chosen-text attack: an adversary strategically chooses
challenges in an attempt to extract information about
the manager key.
4.3 Role-based Encryption
Encryption systems allow users to encrypt resources (ﬁles
or data) on disk, or synchronously transfer messages among
multiple systems. Many encryption ﬁle systems have been
developed in Windows and Linux environments, e.g., Win-
dows Encrypting File System (EFS), SiRiUS [9] and Plu-
tus [12]. However, these systems implement some trivial
schemes where the number of ciphertexts in the ﬁle header
grows linearly with the increased number of users who have
permissions to access the ﬁle. To overcome such a limitation,
we introduce a new scheme called Role-based Encryption
(RBE), which can be used to improve the performance of ex-
isting encryption ﬁle systems.
Definition 5
(Role-based Encryption). A role-based
encryption scheme is an encryption system consisting of the
following three procedures:
Initial: Takes role hierarchy hR, (cid:22)i, and returns the role-
key hierarchy H = hU, K, R, (cid:22)i according to Setup and
GenKey algorithms in RHC model;
Encrypt: Takes the encryption key pki and a plaintext M .
It produces a ciphertext C: Encrypt(pki, M ) → Ci.
Decrypt: Takes the user key ski,j and the ciphertext C. It
generates the plaintext M : Decrypt(ski,j, Cl) → M ,
where rl (cid:22) ri.
Figure 3: Authentication protocol based on RBC.
• Role-based authentication, which can provide identi-
ﬁable evidences that a given user possesses the at-
tributes of a given role.
Obviously, role-based authentication is a useful way for
anonymous accesses, sharing systems, or oﬀ-line devices while
the user information (including the user’s public key in PKI)
is not maintained by themselves. Furthermore, this ap-
proach can help achieve the interoperability as well. Hence,
we propose a common framework of Role-based Authen-
tication (RBA) based on a challenge-response protocol as
shown in Figure 3.
Definition 4
(Role-based Authentication). A role-
based authentication scheme is a challenge-response identiﬁ-
cation protocol between prover (P) and veriﬁer (V), consist-
ing of following four procedures:
Initial: Takes role hierarchy hR, (cid:22)i, and returns the role-
key hierarchy H = hU, K, R, (cid:22)i according to Setup and
GenRKey algorithms in RBC model;
Interact: the prover and the veriﬁer execute the protocol:
1. Login: The prover sends the label of identity (in-
cluding rolename and username) to the veriﬁer,
then the veriﬁer checks the availability by search-
ing user-label database or role hierarchy: P → V :
ri ∨ labi,j;
2. Witness: If the check succeeds, the veriﬁer requires
the prover to return the witness of the veriﬁer’s
private key on a random number r: P → V : S =
Oneway(ski,j, r);
3. Challenge: The veriﬁer selects a challenge (ran-
dom number) and sends it to the prover: P ←
V : c = Random();
4. Response: After receiving the challenge c, the prover
The relationship between encryption and decryption can
computes the response in terms of his private key
ski,j and the random numbers r in the witness,
and sends it back to the veriﬁer: P → V : s =
Respose(ski,j, r, c).
be described as follows:
Decrypt(ski,j, Encrypt(pkl, M )) = M
(3)
where rl (cid:22) ri and (ui,j, ri) ∈ U A.
5
In order to improve the performance, we assume the fol-
lowing encrypted ﬁle structure: A ﬁle M is stored in the
form hHdrpkl(S, ek), Eek(M )i, where ek is a session key for
encrypting M via a symmetric encryption method E, and
S denotes the subset of the authorized users or the access
control policy of this ﬁle. A user in S can use his private
keys to decrypt the session key ek from Hdrpkl(S, ek) and
then decrypt the ﬁle M from Eek(M ). The ﬁle system based
on this structure is also called as role-based encryption ﬁle
system (R-EFS) with revocation.
(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)
(cid:39)(cid:72)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)
(cid:41)(cid:76)(cid:79)(cid:72)(cid:86)
(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:72)(cid:71)(cid:3)
(cid:41)(cid:76)(cid:79)(cid:72)(cid:86)
(cid:54)(cid:72)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)
(cid:46)(cid:72)(cid:92)(cid:11)(cid:86)(cid:78)(cid:12)
(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)
(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:72)(cid:71)(cid:3)
(cid:41)(cid:76)(cid:79)(cid:72)(cid:86)
(cid:39)(cid:72)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)
(cid:41)(cid:76)(cid:79)(cid:72)(cid:86)
(cid:54)(cid:72)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:46)(cid:72)(cid:92)(cid:11)(cid:86)(cid:78)(cid:12)
5. PROPOSED SCHEMES
In this section, we present our role-based cryptosystem
scheme with role-key hierarchy based on pairing-based cryp-
tosystem. Meanwhile, role-based signature & authentication
and role-based encryption mechanisms are addressed based
on the proposed role-based cryptosystem construction.
5.1 Bilinear Pairings
We set up our systems using bilinear pairings proposed
by Boneh and Franklin [4, 6]. Let G1, G2 and GT be three
cyclic groups of large prime order p. G1 and G2 are two
additive group and GT is a multiplicative group using elliptic
curve conventions. Let ˆe be a computable bilinear map e :
1 with the following properties: For any
G1 × G2 → GT
G ∈ G1, H ∈ G2 and all a, b ∈ Zp, we have
(cid:43)(cid:71)(cid:85)
(cid:43)(cid:71)(cid:85)
1. Bilinearity: e([a]G, [b]H) = e(G, H)ab.
(cid:36)(cid:88)(cid:87)(cid:75)(cid:72)(cid:81)(cid:87)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:40)(cid:81)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:78)(cid:72)(cid:92)(cid:11)(cid:83)(cid:78)(cid:12)
(cid:53)(cid:46)(cid:43)(cid:3)
(cid:53)(cid:82)(cid:79)(cid:72)(cid:16)(cid:46)(cid:72)(cid:92)(cid:3)(cid:43)(cid:76)(cid:72)(cid:85)(cid:68)(cid:85)(cid:70)(cid:75)(cid:92)