       /*初始化struct ext4_encryption_policy对象 
       * 指定文件内容的加密算法是AES_256_XTS
      */
      ext4_encryption_policy policy = {};
      policy.version = 0;
      policy.contents_encryption_mode = EXT4_ENCRYPTION_MODE_AES_256_XTS;
      policy.filenames_encryption_mode = EXT4_ENCRYPTION_MODE_AES_256_CTS;
      policy.flags = 0;
      // key_descriptor即FEK 的key sig
      memcpy(policy.master_key_descriptor, key_descriptor.data(),
             EXT4_KEY_DESCRIPTOR_SIZE);
      /*通过ioctl完成设置*/
      if (ioctl(fd.get(), EXT4_IOC_SET_ENCRYPTION_POLICY, &policy) s_feature_incompat` 是否支持 ENCRYPT 属性；然后利用 `copy_from_user` 函数从用户空间拷贝
`ext4_encryption_policy` 到内核空间；紧接着在 `ext4_process_policy` 函数里将
`ext4_encryption_policy` 转换成 `ext4_encryption_context` 保存到 inode 的
attr；最后将加密目录对应的 inode 的修改保存到磁盘。重点部分在 `ext4_process_policy`
函数，主要分三大步骤，第一步还是进行照例检查校验，包括：访问权限、`ext4_encryption_policy`的版本号、目标目录是否为空目录、目标目录是否已经存在`ext4_encryption_context`；第二步为目标目录生成`ext4_encryption_context`并保存到
xattr；最后提交修改的保存请求。第一步的具体操作表现在函数操作上如下：
  * `inode_owner_or_capable()` 完成 DAC 方面的权限检查
  * 对`ext4_encryption_policy`的版本号 version 进行检查，当前仅支持版本0
  * `ext4_inode_has_encryption_context()`尝试读取目标目录对应的 inode 的 xattr 的 EXT4 Encryption 字段”c”，看是否存在内容，若存在内容，则说明目标目录在先前已经进行过 EXT4 Encryption 设置
  * `S_ISDIR()`校验目标目录是否真的是目录
  * `ext4_empty_dir()`判断目标目录是否为空目录，在首次设置 EXT4 Encryption 时，仅支持对空目录进行操作。这点有别于 eCryptfs，eCryptfs 加密文件所在的目录下支持非加密和加密文件的同时存在；而 EXT4 Encryption 要么是全加密，要么是全非加密。
第二步在`ext4_create_encryption_context_from_policy`函数中完成，具体如下：
  * `ext4_convert_inline_data()`对inline data做处理
  * `ext4_valid_contents_enc_mode()`校验`ext4_encryption_policy`的文件内容加密模式是否为`AES_256_XTS`，当前仅支持该算法的内容加密
  * `ext4_valid_filenames_enc_mode()`校验`ext4_encryption_policy`的文件名加密模式是否为`AES_256_CTS`，当前仅支持该算法的内容名加密
  * 对`ext4_encryption_policy`的 flags 做检验
  * `get_random_bytes()`产生 16 Bytes 的随机数，赋值给`ext4_encryption_context`的 nonce，其他如 master key descriptor、flags、文件内容加密模式、文件名加密模式等值，从`ext4_encryption_policy`中获取，完成目标目录对应的`ext4_encryption_context`的初始化
  * `ext4_xattr_set()`将用于目标目录的`ext4_encryption_context`保存到 inode 的 xattr
  * `ext4_set_inode_flag()`将目标目录对应 inode 的 i_flags 设置成 `EXT4_INODE_ENCRYPT`，表明其属性。后续在文件open、read、write 时通过该标志进行判断
最后使用`ext4_journal_start`、`ext4_mark_inode_dirty`、`ext4_journal_stop`等函数完成
xattr 数据回写到磁盘的请求。
若非首次对目标目录进行 EXT4 Encryption 设置，请流程如图四所示，通过 ext4_xattr_get 函数读取对应 inode 的 xattr
的EXT4 Encryption字段”c”对应的内容，即保存的
`ext4_encryption_context`，将其与`ext4_encryption_policy`的相应值进行对比，若不一致返回-EINVAL。
图四 非首次进行EXT4 Encryption设置的函数调用关系
相比 eCryptfs，此`EXT4_IOC_SET_ENCRYPTION_POLICY`的 ioctl 的作用类似 eCryptfs 的“mount –t
ecryptfs ”操作。
##### creat file 流程
creat file 流程特指应用程序通过 `creat()`函数或 `open( , O_CREAT,
)`在已经通过`EXT4_IOC_SET_ENCRYPTION_POLICY ioctl`完成 EXT4 Encryption
设置的目录下新建普通文件的过程。希望通过介绍该过程，可以帮助读者了解如何创建加密文件，如何利用 master key 和 nonce 生成 derived
key。
应用程序使用`creat()`函数通过系统调用经由VFS，在申请到fd、初始化好 nameidata 、struct file
等等之后利用`ext4_create()`函数完成加密文件的创建，函数调用关系如图五所示。
创建加密文件的核心函数`ext4_create()`的函数调用关系如图六所示，函数主要功能是创建 ext4 inode 节点并初始化，这里只关注 EXT4
Encryption 部分。在创建时首先判断其所在目录 inode 的 i_flags
是否已经被设置了`EXT4_INODE_ENCRYPT`属性（该属性在`EXT4_IOC_SET_ENCRYPTION_POLICY ioctl`或者在
EXT4 Encryption 根目录下的任何地方新建目录/文件时完成i_flags设置），若是则表明需要进行 EXT4
Encryption；接着读取新文件所在目录，即其父目录的 xattr 属性获取到`ext4_encryption_context`，再为新文件生成新的
nonce，将 nonce 替换父目录的`ext4_encryption_context`中的 nonce
生成用于新文件的`ext4_encryption_context`并保存到新文件对应 inode 的 xattr
中；然后用`ext4_encryption_context`中的 master key descriptor 匹配到 keyring 中的 master
key，将`ext4_encryption_context`中的nonce做为密钥对 master key 进行 AES-128-ECB 加密，得到
derived key；最后使用 derived key 和 AES-256-XTS 初始化 kernel crypto API，将初始化好的 tfm
保存到 `ext4_crypt_info` 的ci_ctfm
成员中，再将`ext4_crypt_info`保存到`ext4_inode_info`的`i_crypt_info`，后续对新文件进行读写操作时直接取出
ci_ctfm 做具体的加/解密即可。
图五 creat 和 open file 函数调用关系
图六 ext4_create函数调用关系
具体到图六中`ext4_create`函数调用关系中各个要点函数，完成的功能如下：
  * `ext4_encrypted_inode()`判断文件父目录的 inode 的 i_flags 是否已经被设置了`EXT4_INODE_ENCRYPT`属性
  * `ext4_get_encryption_info()`读取父目录的 xattr 属性获取到`ext4_encryption_context`，并为父目录生成 derived key，初始化好 tfm 并保存到其`ext4_inode_info的i_crypt_info`
  * `ext4_encryption_info()`确认父目录的`ext4_inode_info`的`i_crypt_info`已经初始化好
  * `ext4_inherit_context()`为新文件创建`ext4_encryption_context`并保存到其 xattr 中，并为新文件生成 derived key，初始化好 tfm 并保存到其`ext4_inode_info`的`i_crypt_info`
从上可看到`ext4_get_encryption_info()`和`ext4_inherit_context()`是最关键的部分，其代码如清单八和清单九所示，代码较长，但强烈建议耐心读完。
###### 清单八 ext4_get_encryption_info 函数
    int ext4_get_encryption_info(struct inode *inode)
    {
        struct ext4_inode_info *ei = EXT4_I(inode);
        struct ext4_crypt_info *crypt_info;
        char full_key_descriptor[EXT4_KEY_DESC_PREFIX_SIZE +
                     (EXT4_KEY_DESCRIPTOR_SIZE * 2) + 1];
        struct key *keyring_key = NULL;
        struct ext4_encryption_key *master_key;
        struct ext4_encryption_context ctx;
        const struct user_key_payload *ukp;
        struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb); 
        struct crypto_ablkcipher *ctfm;
        const char *cipher_str;
        char raw_key[EXT4_MAX_KEY_SIZE];
        char mode;
        int res;
        //若ext4_inode_info中的i_crypt_info有值，说明先前已经初始化好
        if (ei->i_crypt_info)
            return 0;
        if (!ext4_read_workqueue) {
        /*为readpage时解密初始化read_workqueue，为ext4_crypto_ctx预先创建128个
        *cache，为writepage时用的bounce page创建内存池，为ext4_crypt_info创建slab
        */
            res = ext4_init_crypto();
            if (res)
                return res;
        }
        /*从xattr中读取加密模式、master key descriptor、nonce等加密相关信息到
        *ext4_encryption_context
        */
        res = ext4_xattr_get(inode, EXT4_XATTR_INDEX_ENCRYPTION,
                     EXT4_XATTR_NAME_ENCRYPTION_CONTEXT,
                     &ctx, sizeof(ctx));
        if (res ci_flags = ctx.flags;
        crypt_info->ci_data_mode = ctx.contents_encryption_mode;
        crypt_info->ci_filename_mode = ctx.filenames_encryption_mode;
        crypt_info->ci_ctfm = NULL;
        memcpy(crypt_info->ci_master_key, ctx.master_key_descriptor,
               sizeof(crypt_info->ci_master_key));
        if (S_ISREG(inode->i_mode))
            mode = crypt_info->ci_data_mode;
        else if (S_ISDIR(inode->i_mode) || S_ISLNK(inode->i_mode))
            mode = crypt_info->ci_filename_mode;
        else
            BUG();
        switch (mode) {
        case EXT4_ENCRYPTION_MODE_AES_256_XTS:
            cipher_str = "xts(aes)";
            break;
        case EXT4_ENCRYPTION_MODE_AES_256_CTS:
            cipher_str = "cts(cbc(aes))";
            break;
        default:
            printk_once(KERN_WARNING
                    "ext4: unsupported key mode %d (ino %u)\n",
                    mode, (unsigned) inode->i_ino);
            res = -ENOKEY;
            goto out;
        }
        if (DUMMY_ENCRYPTION_ENABLED(sbi)) {
            memset(raw_key, 0x42, EXT4_AES_256_XTS_KEY_SIZE);
            goto got_key;
        }
        //实际使用时将master key descriptor加上”ext4:”的前缀用于匹配master key
        memcpy(full_key_descriptor, EXT4_KEY_DESC_PREFIX,
               EXT4_KEY_DESC_PREFIX_SIZE);
        sprintf(full_key_descriptor + EXT4_KEY_DESC_PREFIX_SIZE,
            "%*phN", EXT4_KEY_DESCRIPTOR_SIZE,
            ctx.master_key_descriptor);
        full_key_descriptor[EXT4_KEY_DESC_PREFIX_SIZE +
                    (2 * EXT4_KEY_DESCRIPTOR_SIZE)] = '\0';
        //使用master key descriptor为匹配条件向keyring申请master key
        keyring_key = request_key(&key_type_logon, full_key_descriptor, NULL);
        if (IS_ERR(keyring_key)) {
            res = PTR_ERR(keyring_key);
            keyring_key = NULL;
            goto out;
        }
        //确保master key的type是logon类型，防止应用程序读取到key的内容
        if (keyring_key->type != &key_type_logon) {
            printk_once(KERN_WARNING
                    "ext4: key type must be logon\n");
            res = -ENOKEY;
            goto out;
        }
        down_read(&keyring_key->sem);
        //从keyring中取出master key的payload
        ukp = user_key_payload(keyring_key);
        if (ukp->datalen != sizeof(struct ext4_encryption_key)) {
            res = -EINVAL;
            up_read(&keyring_key->sem);
            goto out;
        }
        //取出master key的有效数据ext4_encryption_key
        master_key = (struct ext4_encryption_key *)ukp->data;
        BUILD_BUG_ON(EXT4_AES_128_ECB_KEY_SIZE !=
                 EXT4_KEY_DERIVATION_NONCE_SIZE);
        if (master_key->size != EXT4_AES_256_XTS_KEY_SIZE) {
            printk_once(KERN_WARNING
                    "ext4: key size incorrect: %d\n",
                    master_key->size);
            res = -ENOKEY;
            up_read(&keyring_key->sem);
            goto out;
        }
        /*以nonce做为密钥，采用AES_128_ECB算法，利用kernel crypto API加密master
        * key（master_key->raw），生成derived key保存在raw_key里
        */
        res = ext4_derive_key_aes(ctx.nonce, master_key->raw,
                      raw_key);
        up_read(&keyring_key->sem);
        if (res)
            goto out;
    got_key:
        //为AES_256_XTS加密算法申请tfm
        ctfm = crypto_alloc_ablkcipher(cipher_str, 0, 0);
        if (!ctfm || IS_ERR(ctfm)) {
            res = ctfm ? PTR_ERR(ctfm) : -ENOMEM;
            printk(KERN_DEBUG
                   "%s: error %d (inode %u) allocating crypto tfm\n",