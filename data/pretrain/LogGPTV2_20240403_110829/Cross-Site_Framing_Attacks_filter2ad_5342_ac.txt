graduate computer science course). We then published a
link to this page to a group of 165 students in the course.
Students who solved our exam were asked to add their email
to get the answers for the exam and receive updates about
additional exams that will be published. This web page con-
taining the ﬁrst exam tried to load a ﬁle in a new iframe,
which initiates the downloading ﬁle procedure. The ﬁle was
a 1MB zip ﬁle with an image protected by a password, down-
loaded from an anonymous ﬁle storage site.
Two days after the deadline for this ﬁrst online exam, we
sent an email with a new exam to the 108 students who
solved the ﬁrst exam. At the end of this second exam, we
asked the students who solved both exams on the same com-
puter to help us in the experiment by checking whether the
ﬁle was in their downloads folder or in their recycle bin. We
also asked them about their browser and OS, and referred
them to a web page where they could check whether their
browser prompts them with a message before downloading
ﬁles. Participation was voluntary; 84 students participated
using the same computer in both exams and replying to the
questions.
Experimental results Out of the 84 participants, 61
participants (i.e., 73%) had their browsers conﬁgured to
‘automatically download’ ﬁles. Most participants, and also
most users with ‘automatically download’ set, used the
Chrome browser, see Figure 1(a). A large majority among
these users (79%) also reported ﬁnding the ﬁle in the down-
loads folder. In total, 60% of the participants found the ﬁle
in the downloads folder, and few more found it in the recycle
bin. See Figure 1(b).
Our results indicate that the ‘automated download’ fea-
ture signiﬁcantly increases the risk of framing. Notice, how-
165
ﬁle on the hard-disk, with no indication at all that this ﬁle
was received from the web.
In the POA attack, the malicious website embeds an ob-
ject (e.g., image) that is a composition of a legitimate ﬁle
and the malicious framing ﬁle. Then the malicious website
causes the browser to partially override the legitimate part
of the ﬁle, leaving the framing ﬁle ﬂoating in the hard disk.
We found that prominent forensic tools detect the injected
ﬁle as a deleted ﬁle, without any warning, e.g., that this ﬁle
may have been received from the web rather than created
locally.
We ﬁrst applied the POA attack on the old and simple
FAT32 ﬁle system, which is still used by removable media.
We then applied the attack on the common NTFS ﬁle sys-
tem. In this Section we focus on the NTFS ﬁle system, and
begin with a brief background in Subsection 5.1.
In Sub-
section 5.2 we describe the framing attack. We evaluate the
attack using forensic software in Subsection 5.3.
5.1 Background on NTFS
NTFS is the ﬁle system of modern Windows operating
systems. All ﬁles, directories, and their metaﬁle data (i.e.,
ﬁle name, creation date, access permissions and size) are
stored as metadata in the Master File Table (MFT).
The smallest logical amount of disk space that can be allo-
cated to hold a ﬁle in the NTFS is called a cluster. Usually,
the default cluster size is 4 KB; we used this size during our
experiments. The cluster is a logical limit, as compared to
the sector size, which is the physical limit set by the man-
ufacturer for the drive (512 bytes for old hard-disks, 4 KB
for newer ones). Each ﬁle is split into one or more clusters,
depending on its size. This means that every ﬁle has two
diﬀerent sizes: the exact size of the ﬁle in bytes, and the
total space the ﬁle actually takes up on the disk, which is
divisible by the cluster size. The one exception is tiny ﬁles,
typically less than 900 bytes, which can be stored directly
in the MFT without allocating any clusters.
A new feature of NTFS (cf. to FAT) is the journal ﬁle.
The journal ﬁle logs every action that is committed to ﬁle
system’s driver. Hence, the journal ﬁle can provide indica-
tions of the POA. However, none of the forensic programs
applied in this research issued any warning, e.g., about miss-
ing journal records; this includes programs we used and pro-
grams available only to the law enforcement units.
5.2 Partial Overriding Attack (POA)
The POA attack has two steps: (1) The attacker identiﬁes
the victim surﬁng in her rogue website. That attacker then
creates a composite ﬁle that is a concatenation of a legitimate
ﬁle and the framing ﬁle (see Figure 2(a)) and causes the vic-
tim’s browser to load it (e.g., as a legitimate image). (2) The
rogue site initiates an additional request for the same ﬁle;
this time, the attacker replies with a shorter (legitimate) ﬁle
that overrides the preﬁx of the original ﬁle. This procedure
leaves the framing ﬁle (the suﬃx of the composite ﬁle) ﬂoat-
ing in the disk; namely, the framing ﬁle is not connected to
any ﬁle entry in the journal (see Figure 2(b)).
In the composite ﬁle, the legitimate part might be an im-
age that the victim can see in the website without anything
appearing to be suspicious. This legitimate part is placed
together with some padding to reach a multiplication of the
cluster size. The framing part can contain arbitrary content,
such as a pedophilic photo. While surﬁng, the victim sees
(a) Participants’ download
features, by browser
(b) Files found, by download
feature
Figure 1: Results for ﬁle download experiment
ever, that the few users who did not have ‘automated down-
load’, still had the ﬁle. They apparently downloaded the ﬁle
manually when prompted by the browser.
We recommend that vendors reconsider the use of fully
automated download, and also consider adding metadata
to identify the origin site and the type of download, such
as user-initiated versus site initiated, and automated or ap-
proved.
4.3 Framing by Browser History
By default, browsers maintain history records of the re-
quests sent to diﬀerent web pages. This browser history
is routinely mentioned in computer forensic literature and
guidelines [8,18] as an important source of forensic evidence.
The browser history also includes the exact search strings
used in requests to most search engines. This search his-
tory is mentioned as important forensic evidence in many of
the court cases we viewed (Table 2). However, this evidence
does not appear with an indication of its source, whether
browser, provider, or history record provided by the site to
the user.
Consequently, framing attackers may try to inject forged
entries into the browser history, to create another source of
framing evidence, complementary to the website-history and
cache evidence. Note that the requests used for the website
history framing would not appear in the browser history,
since these are injected from embedded objects (such as IMG
and IFRAME tags).
To inject browser history, all the adversary has to do is
open a web page brieﬂy, in a small new window. Although
all the browsers we tested block JavaScript from prompting
windows arbitrarily, they do allow opening a new window
when the user clicks a button or a link and closing it im-
mediately. Using clickjacking techniques [26], this behavior
can be abused to inject browser history. See demo [15].
5. FILE SYSTEM MANIPULATIONS
In Section 4 we began the discussion about planting pieces
of evidence in the victim’s computer. All the pieces of fram-
ing evidence we discussed there were caused by an interac-
tion with the web, and could be identiﬁed as such. However,
there is other digital evidence that is not related to the web,
such as ﬁles on the hard disk.
In this section we present
the partial overriding attack (POA), which allows a rogue
website to manipulate the ﬁle system and plant a framing
166
(a) File system after downloading the composite ﬁle.
(b) File system after overwriting the composite ﬁle with
a legitimate ﬁle of the same name. The malicious part of
the ﬁle is marked as deleted, while the other parts belong
to the legitimate ﬁle.
Figure 2: The composite ﬁle in memory during the POA
attack
only the legitimate image, because the rest of the ﬁle does
not match the image format.
This attack is simple to implement and the framing ﬁle
does not leave any traces pointing to the attacker or any
indication that it was received from the web.
5.3 Evaluation
We successfully tested the POA attack on the latest ver-
sions of three of the most popular browsers:
IE 11.0.96,
Firefox 38.0.1, and Chrome 43.0.2357. On Safari 5.1.7 the
attack failed because Safari stores its cache in a SQLite ﬁle,
which contains diﬀerent oﬀsets for padding.
To implement the attack, we built a web page that embeds
an IMG HTML tag with the composite image as the source.
We added a JavaScript code that initiates a second request
for the same image once the browser has completed loading
the image for the ﬁrst time. We replied to the second request
with a shorter legitimate image that overwrites the preﬁx of
the composite image. At the end of the process, the framing
ﬁle is ﬂoating in the hard disk.
Evaluation with forensic software. We used two
known forensic software tools to evaluate the attack: Au-
topsy and OSForensics. The National Cyber Unit in the
Israel Police assisted us in the examination of the attack
using two additional tools, Encase and IEF; both are ex-
pensive, sophisticated forensic software tools. All of these
tools detected the framing ﬁle and did not give any warning
of anything unusual. In particular, they did not indicate a
framing attempt or even that the ﬁle originated via the web.
As expected, the forensic software tools ignored the fact
that there is no journal entry for the framing ﬁle. This is
most likely due to three reasons: (1) Searching for ﬁles as
they appear in the hard disk is a general task that can be
done on several ﬁle systems. (2) The main goal of forensic
tools is to ﬁnd incriminating ﬁles; they do not consider the
framing threat. (3) Journal entries might be deleted, either
automatically, due to lack of space, or intentionally, using
dedicated software.
Size of the ﬁles. The size of the composite image was
206 KB, of which 55 KB was the framing image. We tried
several other sizes, which produced similar results. A study
of the optimal sizes requires further experimentation.
Framing evidence lifetime. An important factor of the
attack is the lifetime of the evidence. For the evaluation, we
used Windows 7 machines in the Google Cloud. To keep
the machines active after the attack, we ran a script that
randomly loads 1 of the 100 most popular websites, sleeps
for a random time of up to 5 minutes, and then repeats the
process inﬁnitely.
We ran the attack on the latest versions of the IE, Chrome,
and Firefox browsers, and noticed that the ﬁle remained
on the hard disk for one or several hours. To improve the
results, we built a new web page that repeats the attack
100 times to plant 100 framing images. We found that this
repetition improved the results signiﬁcantly and that the
ﬁles remained on the hard disk for one or several days. We
are planning to perform a more conclusive experiment that
will run for longer periods on the computers of volunteers.
6. COVERING TRACES
Detection of a framing attack could result in serious reper-
cussions, often including criminal charges. Therefore, risk of
exposure can be a major deterrent to potential framing at-
tackers. Naturally, the attackers are likely to consider this
risk and take steps to minimize it. Since the attacks involve
the use of a script received from the attacker’s site, one ob-
vious way to detect the attack on the malicious web page is
by identifying this script and/or other content that indicates
the intent of framing the user. We now evaluate the ability
of the framing attacker to ‘eliminate traces’ and prevent de-
tection of the script or other suspicious signs such as iframe
tags, on the attacker’s web page.
6.1 Covering Browser Traces
Normally, the framing web page and the script (within it
or as a separate object), would be cached by the browser,
similar to other objects. Consequently, it might be possible
to ﬁnd the attacking page in the cache and detect that it
actually created the framing evidence.
To prevent a web page from being saved in the cache, the
attacker can use the Cache-Control HTTP response header
[14]. However, in some cases, although the content of the
malicious web page will not appear in the cache, evidence
of the visit might remain in the browser history or even in
network logs. The mere fact that this page’s objects are not
cached could then cause them to become suspect, since web
objects are almost always cached (except when containing
sensitive information).
There is an alternative method that would not raise suspi-
cions and can be used to prevent the caching of the framing
web page. Namely, the attacker simply reloads a new, benign
version of the page. The cache only keeps the latest version
of each object, hence, it would simply overwrite the previous
version. See Figure 3 and the demonstration in [15].
This process can be done while the original framing page
and script continue to operate. Speciﬁcally, loading the ‘be-
nign’ versions of the page and script into a new hidden iframe
is suﬃcient for the browser to overwrite the framing versions
in the cache with the benign versions now received.
6.2 Covering Web-Service Traces
We do not know which information is saved by web-
services and whether the history information they give to
the law authorities contains anything beyond the history
available to the user. However, as the recipients of cross-site
requests, the web-services could potentially save informa-
tion that allows exposure to the framing. We ﬁrst show how
167
Accept request header. Modern browsers use this
header to specify certain types of media that are acceptable
for the response. In all of the attacks noted in this paper,
all HTTP GET requests were sent from the SRC attribute
of the IMG tag. Hence, the Accept header indicated an im-
age; the servers ignored this and handled the request as a
valid form. From our ﬁndings, web applications do not pay
attention to the Accept header, even though it can be used
to easily detect some CSRF attacks. It is possible to avoid a
suspicious Accept header by sending the request into a new
window.
6.2.2
The need to manipulate the HTTP headers derives from
the fact that the attacker sends cross-site framing requests.
However, in some cases, it is possible to cause other websites
to send the framing request, in which case the HTTP headers
will indicate a legitimate request. We give two examples of
such techniques and demonstrate them on the Google search
engine.
Sending Requests from Other Sites
Exploiting the hash sign (#) in URL. The hash sign
separates a URL into two parts. The ﬁrst part is sent as
an HTTP request by the browser and the second is added
by the browser once the response arrives. If the addition of
the second part initiates another framing request, it will be
sent from the page returned by the ﬁrst request. We found
that Google is vulnerable to this technique. In particular,
it is possible to initiate a search using the hash sign. From
the perspective of Google, the victim was referred to Google
from the attacking site, and then (from the Google page)
searched for the framing term. Similarly, it is possible to
initiate two search requests via one request. We demonstrate
the procedure in [15].
Exploiting redirection by JavaScript. Many websites
use JavaScript to redirect the users to other pages. Such
redirection has a similar eﬀect to the use of the hash sign.
The site ﬁrst loads the page and then the JavaScript code
loads the other page. Unlike HTTP redirection (response
code 302), where the browser initiates the loading of the
target page with the original Referer header, in redirection
by JavaScript the page with the JavaScript is the origin of
the request. Hence, the browser names it in all the relevant
headers.
Redirection by JavaScript also occurs in Google search
results. Therefore, an attacker who wants to install a visit
from the victim’s IP address in the log of some website needs
to load a link to the website that was taken from Google
search results (see Section 3.1) instead of loading it directly.
By doing so, the HTTP headers will indicate that the request