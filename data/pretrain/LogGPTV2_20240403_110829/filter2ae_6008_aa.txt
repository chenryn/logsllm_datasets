# 漏扫动态爬虫实践
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：9ian1i@0keeTeam
## 0x00 简介
动态爬虫作为漏洞扫描的前提，对于web漏洞发现有至关重要的作用，先于攻击者发现脆弱业务的接口将让安全人员占领先机。即使你有再好的payload，如果连入口都发现不了，后续的一切都无法进行。这部分内容是我对之前开发动态爬虫经验的一个总结，在本文将详细介绍实践动态爬虫的过程中需要注意的问题以及解决办法。
在Chrome的Headless模式刚出现不久，我们当时就调研过用作漏洞扫描器爬虫的需求，但由于当时功能不够完善，以及无法达到稳定可靠的要求。举个例子，对于网络请求，无法区分导航请求和其它请求，而本身又不提供navigation
lock的功能，所以很难确保页面的处理不被意外跳转中断。同时，不太稳定的CDP经常意外中断和产生Chrome僵尸进程，所以我们之前一直在使用PhantomJS。
但随着前端的框架使用越来越多，网页内容对爬虫越来越不友好，在不考虑进行服务端渲染的情况下，Vue等框架让静态爬虫彻底失效。同时，由于JS的ES6语法的广泛使用，缺乏维护（创始人宣布归档项目暂停开发）的PhantomJS开始变的力不从心。
在去年，[puppeteer](https://github.com/GoogleChrome/puppeteer)和Chromium项目在经历了不断迭代后，新增了一些关键功能，Headless模式现在已经能大致胜任扫描器爬虫的任务。所以我们在去年果断更新了扫描器的动态爬虫，采用Chromium的Headless模式作为网页内容解析引擎，以下示例代码都是使用[pyppeteer](https://github.com/miyakogi/pyppeteer)
项目(采用python实现的puppeteer非官方版本)，且为相关部分的关键代码段，如需运行请根据情况补全其余必要代码。
## 0x01 初始化设置
因为Chrome自带XSS
Auditor，所以启动浏览器时我们需要进行一些设置，关闭掉这些影响页面内容正常渲染的选项。我们的目的是尽可能的去兼容更多的网页内容，同时在不影响页面渲染的情况下加快速度，所以常见的浏览器启动设置如下：
    browser = await launch({
        "executablePath": chrome_executable_path,
        "args": [
            "--disable-gpu",
            "--disable-web-security",
            "--disable-xss-auditor",# 关闭 XSS Auditor
            "--no-sandbox",
            "--disable-setuid-sandbox",
            "--allow-running-insecure-content",# 允许不安全内容
            "--disable-webgl",
            "--disable-popup-blocking"
        ],
        "ignoreHTTPSErrors": True # 忽略证书错误
    })
接下来，创建隐身模式上下文，打开一个标签页开始请求网页，同样，也需要进行一些定制化设置。比如设置一个常见的正常浏览器UA、开启请求拦截并注入初始的HOOK代码等等：
    context = browser.createIncognitoBrowserContext()
    page = await context.newPage()
    tasks = [
        # 设置UA
        asyncio.ensure_future(page.setUserAgent("...")),
        # 注入初始 hook 代码，具体内容之后介绍
        asyncio.ensure_future(page.evaluateOnNewDocument("...")),
        # 开启请求拦截
        asyncio.ensure_future(page.setRequestInterception(True)),
        # 启用JS，不开的话无法执行JS
        asyncio.ensure_future(page.setJavaScriptEnabled(True)),
        # 关闭缓存
        asyncio.ensure_future(page.setCacheEnabled(False)),
        # 设置窗口大小
        asyncio.ensure_future(page.setViewport({"width": 1920, "height": 1080}))
    ]
    await asyncio.wait(tasks)
这样，我们就创建了一个适合于动态爬虫的浏览器环境。
## 0x02 注入代码
这里指的是在网页文档创建且页面加载前注入JS代码，这部分内容是运行一个动态爬虫的基础，主要是Hook关键的函数和事件，毕竟谁先执行代码谁就能控制JS的运行环境。
###  包含新url的函数
hook History API，许多前端框架都采用此API进行页面路由，记录url并取消操作：
    window.history.pushState = function(a, b, url) { console.log(url);}
    window.history.replaceState = function(a, b, url) { console.log(url);}
    Object.defineProperty(window.history,"pushState",{"writable": false, "configurable": false});
    Object.defineProperty(window.history,"replaceState",{"writable": false, "configurable": false});
监听hash变化，Vue等框架默认使用hash部分进行前端页面路由：
    window.addEventListener("hashchange", function()  {console.log(document.location.href);});
监听窗口的打开和关闭，记录新窗口打开的url，并取消实际操作：
    window.open = function (url) { console.log(url);}
    Object.defineProperty(window,"open",{"writable": false, "configurable": false});
    window.close = function() {console.log("trying to close page.");};
    Object.defineProperty(window,"close",{"writable": false, "configurable": false});
同时，还需要hook `window.WebSocket` 、`window.EventSource` 、 `window.fetch`
等函数，具体操作差不多，就不再重复贴代码了。
###  定时函数
`setTimeout`和`setInterval`两个定时函数，在其它文章里都是建议改小时间间隔来加速事件执行，但我在实际使用中发现，如果将时间改的过小，如将
`setInterval` 全部设置为不到1秒甚至0秒，会 **导致回调函数执行过快**
，极大的消耗资源并阻塞整个页面内javascript的正常执行，导致页面的正常逻辑无法执行，最后超时抛错退出。
所以在减小时间间隔的同时，也要考虑稳定性的问题，个人不建议将值设置过小，最好不小于1秒。因为这些回调函数一般都是相同的操作逻辑，只要保证在爬取时能触发一次即可覆盖大部分情况。就算是设置为1秒，部分复杂的网页也会消耗大量资源并显著降低爬取时间，如果你发现有一些页面迟迟不能结束甚至超时，说不定就是这两个定时函数惹的祸。
###  收集事件注册
我们为了尽可能获取更多的url，最好能将页面内注册过的函数全部触发一遍，当然也有意见是触发常见的事件，但不管什么思路，我们都需要收集页面内全部注册的事件。
除了内联事件，事件注册又分`DOM0级`和`DOM2`级事件，两种方式都可以注册事件，使用的方式却完全不相同，Hook点也不同。许多文章都提到了Hook
addEventListener的原型，但其实是有遗漏的，因为 `addEventListener` 只能Hook `DOM2`级事件的注册，无法Hook
`DOM0` 级事件。总之就是，`DOM0`级事件与`DOM2`级事件之间需要不同的方式处理。  
测试如下：
可以看到，在注册事件时并没有打印出 name 的值。
####  DOM0 级事件
这是JavaScript指定事件处理程序的传统方式，将一个函数赋值给一个事件处理程序属性。这种方式目前所有浏览器都支持，使用简单且广泛。下面的代码就是一个常见的`DOM0`级事件注册：
    let btn = document.getElementById("test");
    btn.onclick = function() {
        console.log("test");
    }
那如何Hook `DOM0`级事件监听呢？答案就是修改所有节点的相关属性原型，设置访问器属性。将以下JS代码提前注入到页面中：
    function dom0_listener_hook(that, event_name) {
        console.log(that.tagName);
        console.log(event_name);
    }
    Object.defineProperties(HTMLElement.prototype, {
        onclick: {set: function(newValue){onclick = newValue;dom0_listener_hook(this, "click");}},
        onchange: {set: function(newValue){onchange = newValue;dom0_listener_hook(this, "change");}},
        onblur: {set: function(newValue){onblur = newValue;dom0_listener_hook(this, "blur");}},
        ondblclick: {set: function(newValue){ondblclick = newValue;dom0_listener_hook(this, "dblclick");}},
        onfocus: {set: function(newValue){onfocus = newValue;dom0_listener_hook(this, "focus");}},
        ... ... // 略 继续自定义你的事件
    })
    // 禁止重定义访问器属性
    Object.defineProperty(HTMLElement.prototype,"onclick",{"configurable": false});
这样我们就完成了对`DOM0级`事件的Hook收集。效果如下：
####  DOM2 级事件
`DOM2级`事件定义了两个方法，用于处理指定和删除事件处理函数的操作：`addEventListener()` 和
`removeEventListener()`，所有的DOM节点中都包含了这两个方法。下面是一个简单的示例：
    let btn = document.getElementById("test");
    btn.addEventListener("click", function() {
        console.log("test");
    }, true)
其中第三个参数，true表示在捕获阶段调用事件处理函数，false表示在冒泡阶段调用。
Hook `DOM2` 级事件这部分比较简单，大多数文章也都有提到，通过Hook `addEventListener`的原型即可解决：
    let old_event_handle = Element.prototype.addEventListener;
    Element.prototype.addEventListener = function(event_name, event_func, useCapture) {
        let name = " " + this.id + this.name + this.getAttribute("class") + "|" + event_name;
        console.log(name);
        old_event_handle.apply(this, arguments);
    };
###  锁定表单重置
爬虫在处理网页时，会先填充表单，接着触发事件去提交表单，但有时会意外点击到表单的重置按钮，造成内容清空，表单提交失败。所以为了防止这种情况的发生，我们需要Hook表单的重置并锁定不能修改。
    HTMLFormElement.prototype.reset = function() {console.log("cancel reset form")};
    Object.defineProperty(HTMLFormElement.prototype,"reset",{"writable": false, "configurable": false});
## 0x03 导航锁定
爬虫在处理一个页面时，可能会被期间意外的导航请求中断，造成漏抓。所以除了和本页面相同url的导航请求外，其余所有的导航请求都应该取消。面对重定向需要分多种情况对待：
  * 前端重定向全部取消，并记录下目标链接放入任务队列
  * 后端重定向响应的body中不包含内容，则跟随跳转
  * 后端重定向响应的body中含有内容，无视重定向，渲染body内容，记录下location的值放入任务队列
虽然有请求拦截的相关API（`setRequestInterception`），但导航请求其实已经进入了网络层，直接调用 `request.abort`
会使当前页面抛出异常（`aborted: An operation was aborted (due to user
action)`），从而中断爬虫对当前页面的处理。所以下面会介绍相关的解决办法。
###  Hook前端导航
前端导航指由前端页面JS发起的导航请求，如执行 `location.href` 的赋值、点击某个`a`标签等，最后的变化都是location的值发生改变。
**如何优雅的hook前端导航请求** 之前一直是个难题，因为location是不可重定义的：
意味着你无法通过`Object.defineProperty` 方法去重定义访问器属性，也就无法hook
`window.location`的相关赋值操作。PhantomJS中有个`navigationLocked`选项可以很容易的锁定当前导航，但很遗憾这个特性在Chromium中并没有。一旦导航请求进入网络层，整个页面进入阻塞状态。
在说我的做法之前，先介绍一下目前已知的两种解决方案。
####  修改Chromium源码
这是fate0师傅提出的方案，既然Chromium默认location属性的configurable选项是false，那直接修改源码将它设置为true就解决了，具体操作见其[博客文章](http://blog.fatezero.org/2018/03/05/web-scanner-crawler-01/)。优点是直接从底层修改源码支持，但维护成本较高，每次都得自己编译Chromium。