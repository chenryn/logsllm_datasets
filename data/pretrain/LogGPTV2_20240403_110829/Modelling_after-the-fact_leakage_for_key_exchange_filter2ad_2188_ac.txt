previous set of randomly generated ephemeral values the
adversary may be able to identify the statistical pattern of
the random number generator and hence correctly guess the
next value with a high probability. EphemeralKeyReveal
query addresses situations where the adversary can get the
ephemeral secrets.
Key compromise impersonation attacks:
Known key attacks: SessionKeyReveal query covers
the attacks which can be mounted by knowing past session
keys.
In the
generic (·)AFL-eCK model, freshness conditions allow the
adversary to corrupt the owner of the test session before the
activation of the test session. Hence, the generic (·)AFL-eCK
model security protects against the key compromise imper-
sonation attacks.
In the generic (·)AFL-eCK
model, freshness conditions allow the adversary to corrupt
both of the protocol principals, after the test session is acti-
vated. Hence, the generic (·)AFL-eCK model addresses weak
forward secrecy.
eCK security: The generic (·)AFL-eCK model is a leak-
age version of the eCK model [25], hence, it captures all
possible attacks from long-term and ephemeral key compro-
Weak forward secrecy:
mises. More precisely, in sessions where the adversary does
not modify the communication between parties (passive ses-
sions), the adversary is allowed to reveal both ephemeral
secrets, both long-term secrets, or one of each from two
diﬀerent parties, whereas in sessions where the adversary
may forge the communication of one of the parties (active
sessions), the adversary is allowed to reveal the long-term or
ephemeral key of the other party.
The main reason to introduce a generic security model,
(·)AFL-eCK model, and then propose two instantiations
(BAFL-eCK model and CAFL-eCK model) is to oﬀer more
ﬂexibility to construct leakage-resilient key exchange pro-
tocols. The generic (·)AFL-eCK model gives a reasonable
security framework for key exchange protocols capturing
wide range of practical attacks including side-channel at-
tacks. The only diﬀerence between the two instantiations
is the leakage allowance (bounded or continuous).
If we
need to implement a key exchange protocol which captures
all the properties mentioned in Section 3.6 in the bounded
leakage model, we use the BAFL-eCK model as the security
framework, whereas if we need security in the continuous
leakage model, we use the CAFL-eCK model as the security
framework.
4. CONSTRUCTING (·)AFL-eCK-SECURE
KEY EXCHANGE PROTOCOLS
We investigate how to construct (·)AFL-eCK-secure key
exchange protocols. The motivation of LaMacchia et al. [25]
in designing the eCK model was that an adversary should
have to compromise both the long-term and ephemeral secret
keys of a party in order to recover the session key. In their
NAXOS protocol, the main way this is accomplished is using
what is now called the “NAXOS trick”: a “psuedo” ephemeral
key (cid:103)esk is computed as the hash of the long-term key lsk
and the actual ephemeral key esk: (cid:103)esk ← H(esk, lsk). The
value (cid:103)esk is never stored, and thus in the eCK model the
compute(cid:103)esk. Note however, that in the NAXOS protocol,
the initiator must compute (cid:103)esk = H(esk, lsk) twice: once
when sending its Diﬃe–Hellman ephemeral public key g(cid:103)esk,
adversary must learn both esk and lsk in order to be able to
and once when computing the Diﬃe–Hellman shared secrets
from the received values. This is to avoid storing a single
value that, when compromised, can be used to compute the
session key.
4.1 Leakage-Resilient NAXOS Trick
Moving to the leakage-resilient setting requires rethinking
the NAXOS trick. In the model “only computation leaks
information”, we must consider leakage at any place the
long-term secret key is used. Thus, we need some kind of
leakage-resilient NAXOS trick. As noted above, the initiator
must not store the pseudo-ephemeral value,(cid:103)esk, and instead
must apply the NAXOS trick twice for each session. We
replace the hash function H with a new leakage-resilient
NAXOS trick to compute the pseudo-ephemeral value. The
requirement is, given the long-term secret key and a particular
ephemeral key, the NAXOS trick should always compute the
same pseudo-ephemeral value, such that without knowing
both the long-term and ephemeral keys the adversary is
unable to compute the pseudo-ephemeral value. Moreover,
the NAXOS trick computation should be resilient to the
212leakage of the long-term secret key, which happens even after
the test session is activated.
A leakage-resilient NAXOS trick can be achieved by us-
ing the decryption function of a CPLA2-secure public-key
cryptosystem [18]. Since decryption is deterministic, given
the long-term secret key and a randomly chosen cipher-
text, it will output the corresponding plaintext. So one
can randomly choose an ephemeral key and use it as the
ciphertext to the decryption function, and obtain the cor-
responding plaintext (output of the decryption function) as
the pseudo-ephemeral value. Without knowing both the
long-term and ephemeral keys, it is infeasible to compute the
pesudo-ephemeral value. Thus, a leakage-resilient NAXOS
trick can be achieved and the pseudo-ephemeral value can be
computed. Further, bounded or continuous leakage-resilient
key exchange protocol can be constructed, if the underlying
public-key cryptosystem is bounded or continuous leakage-
resilient.
4.2 Pair Generation Indistinguishability
Using a decryption algorithm of a CPLA2-secure public-
key cryptosystem does not work for our requirement unless
the public-key cryptosystem has a special property: any
randomly chosen ciphertext should be decrypted without
rejection. A randomly chosen ciphertext can be rejected
with a signiﬁcant probability if NIZK proofs have been used
for CPLA2-secure public-key cryptosystems. In NIZK proofs,
the party which creates a ciphertext should provide a proof
of knowledge of the plaintext, and the party which decrypts
the ciphertext ﬁrst veriﬁes the proof, then only if the proof is
correct it decrypts the ciphertext, otherwise rejects. Use of a
CPLA2-secure public-key cryptosystem without the special
property would allow the adversary to break the protocol
with a signiﬁcant probability, whenever a randomly chosen
ciphertext is rejected. We formally deﬁne the special property
as pair generation indistinguishability.
1
, D(p,s)
Deﬁnition 7. (Pair Generation Indistinguishability). Let
PKE = (KeyGen, Enc, Dec) be a public-key cryptosystem.
For (p, s) $←− KeyGen(1k), let D(p,s)
be two distribu-
= {(m, c) : m $←− M, c $←− Enc(p, m)}
tions such that D(p,s)
= {(m, c) : c $←− C, m ← Dec(s, c)} where M
and D(p,s)
is the message space and C is the ciphertext space. For
 ≥ 0, the public-key cryptosystem PKE is -pair-generation-
indistinguishable (-PG-IND) if for all (p, s) $←− KeyGen(1k),
SD(D(p,s)
) ≤ .
, D(p,s)
2
1
2
1
2
u∈U
(cid:80)
Recall that the statistical distance, SD, between two distri-
butions X and Y over a domain U is deﬁned as SD(X, Y ) =
1
2
(cid:12)(cid:12) Pr[X = u] − Pr[Y = u](cid:12)(cid:12).
Now we show a 0-PG-IND public-key cryptosystem avail-
able in the literature. Naor et al. [30] described the frame-
work of a hash proof system [10] as a key-encapsulation
mechanism using the notion of Kiltz et al. [22]. Let K be
the symmetric key space, C be the ciphertext space and
M be the message space. Both K and C are the same size
and elements of M are µ-bit strings. The leakage-resilient
public-key cryptosystem of Naor et al. encrypts an arbitrary
message m $←− M as (Ψ, c, seed), where c $←− C with the cor-
responding witness ω, seed $←− {0, 1}t is a random seed and
Ψ = Ext(P ub(p, c, ω), seed)⊕m. Ext : K×{0, 1}t → {0, 1}m
is a public average-case strong extractor function [14], p is
the public key and P ub is the deterministic public evalu-
ation function of the underlying key-encapsulation mecha-
nism. So whenever a random (Ψ, c, seed) is sampled, the
decryption, m ← Ψ ⊕ Ext(P rivs(c), seed) corresponds to
a random m ∈ M. P riv is a private evaluation algorithm
of the underlying key-encapsulation mechanism, which is
parametrized by the secret key s. Thus, the leakage-resilient
public-key cryptosystem of Naor et al.
is 0-PG-IND. The
generic CPLA2-secure public-key cryptosystem of Halevi et
al. [18] can be instantiated using the leakage-resilient public-
key cryptosystem of Naor et al. Hence, the instantiation of
the generic CPLA2-secure public-key cryptosystem of Halevi
et al. is also 0-PG-IND.
Remark 3. In Table 3, let (cid:98)C be the ciphertext space: in
just chosen from the C but from (cid:98)C which gives random r· in
a setting like Naor et al. [30] the random r· values are not
the form (Ψ, c, seed).
4.3 Authenticating Protocol Messages
In this section we review how to provide authentication
to the protocol messages. After computing the pseudo-
ephemeral value by the NAXOS trick, a principal computes
a Diﬃe-Hellman exponentiation and sends it to the other
protocol principal. If that value is sent alone, the protocol is
not secure because there is no authentication for the protocol
messages, and hence an attacker can simply replace the origi-
nal protocol message with its own value. In order to prevent
this, we need to provide authenticity to the protocol messages.
There are UFCMLA-secure signature schemes available in
the literature [20, 17, 26, 7], which we can use to sign the
protocol messages and provide authenticity. Further, the key
exchange protocol is bounded or continuous leakage-resilient,
if the underlying signature scheme is bounded or continuous
leakage-resilient.
4.4 Protocol π
In Table 3, we show the construction of protocol π. Key-
Gen, Enc and Dec are the key generation, encryption and
decryption algorithms of the underlying CPLA2-secure, -PG-
IND-public-key cryptosystem PKE respectively. KG, Sign
and Vfy are the key generation, signature generation and
signature veriﬁcation algorithms of the underlying leakage-
resilient signature scheme SIG respectively. KDF is a secure
key derivation function which generates the session key of
length k. The protocol π is a Diﬃe-Hellman-type [11] key
agreement protocol where G is a group of prime order q and
generator g. We require that q is the size of the message
space M. After exchanging the public values both principals
compute a Diﬃe-Hellman-type shared secret value, and then
compute the session key using the key derivation function
KDF, with inputs identities of the two principals and the
Diﬃe-Hellman-type shared secret. The computations which
leak information are underlined.
4.5 Security Proof of the Protocol π
We prove the security of the generic protocol π in the
(·)AFL-eCK model. If the underlying primitives are secure
in bounded or continuous leakage model, the protocol π is
BAFL-eCK-secure or CAFL-eCK-secure respectively.
Theorem 1. Let A be any PPT adversary against the
protocol π. Then the advantage of A against (·)AFL-eCK-
213A (Initiator)
B (Responder)
skA, vkA
sA, pA
$←− KG(1k)
$←− KeyGen(1k)
rA
$←−(cid:98)C
(cid:102)rA ← Dec(sA, rA)
XA ← g(cid:102)rA
If Vfy(vkB, (B, A, XB), σB) = “true”(cid:8)
(cid:102)rA ← Dec(sA, rA)
(cid:9)
KAB ←KDF(A, B, X(cid:102)rA
$←− Sign(skA, (A, B, XA))
B )
σA
Initial Setup
Protocol Execution
A,B,XA,σA
−−−−−−−−→
←−−−−−−−−
B,A,XB ,σB
$←− KG(1k)
skB, vkB
sB, pB
$←− KeyGen(1k)
If Vfy(vkA, XA, σA) = “true”(cid:8)
$←−(cid:98)C
(cid:102)rB ← Dec(sB, rB)
XB ← g(cid:102)rB
rB
$←− Sign(skB, (B, A, XB))
σB
KAB ←KDF(A, B, X(cid:102)rB
A )
(cid:9)
Table 3: Protocol π. Underline denotes operations to which leakage functions apply.
security of protocol π, Adv(·)AFL-eCK
is:
NP AdvUFCMLA
(E),
(C)
PKE (D) + AdvDDH
SIG
q,g
Adv(·)AFL-eCK
π
π
(cid:104)
2(cid:0)pg + 2AdvCPLA2
(A) ≤ max
N 2
P Ns
+ AdvKDF(B)(cid:1)(cid:105)
.
B,C,D,E are eﬃcient algorithms constructed using the ad-
versary A, against the underlying key derivation function,
KDF, DDH problem, public-key cryptosystem, PKE and
the signature scheme, SIG, respectively, where PKE is -PG-
IND.
In order to formally prove the (·)AFL-eCK-security of the
protocol π, we use the game hopping technique [31]: deﬁne
a sequence of games and relate the adversary’s advantage
of distinguishing each game from the previous game to the
advantage of breaking one of the underlying cryptographic
primitive. The proof structure is similar to Boyd et al. [6].
The proof sketch of Theorem 1 is available in Appendix A.
The full proof is available in the full version of the paper [2].
5. REFERENCES
[1] A. Akavia, S. Goldwasser, and V. Vaikuntanathan.
Simultaneous hardcore bits and cryptography against
memory attacks. In Theory of Cryptology Conference,
pages 474–495, 2009.
[2] J. Alawatugoda, D. Stebila, and C. Boyd. Modelling
after-the-fact leakage for key exchange (full version).
IACR Cryptology ePrint Archive, Report 2014/131.
[3] J. Alwen, Y. Dodis, and D. Wichs. Leakage-resilient
public-key cryptography in the bounded-retrieval
model. In CRYPTO, pages 36–54, 2009.
[4] M. Bellare and P. Rogaway. Entity authentication and
key distribution. In CRYPTO, pages 232–249, 1993.
[5] D. J. Bernstein. Cache-timing attacks on AES.
Technical report, 2005.
http://cr.yp.to/antiforgery/cachetiming-20050414.pdf.
[6] C. Boyd, Y. Cliﬀ, J. M. G. Nieto, and K. G. Paterson.
One-round key exchange in the standard model.
International Journal of Advanced Computer
Technology, pages 181–199, 2009.
[7] Z. Brakerski, Y. T. Kalai, J. Katz, and
V. Vaikuntanathan. Overcoming the hole in the bucket:
Public-key cryptography resilient to continual memory
leakage. IACR Cryptology ePrint Archive, Report
2010/278, 2010.
[8] D. Brumley and D. Boneh. Remote timing attacks are
practical. In USENIX Security Symposium, pages 1–14,
2003.
[9] R. Canetti and H. Krawczyk. Analysis of key-exchange
protocols and their use for building secure channels. In
EUROCRYPT, pages 453–474, 2001.
[10] R. Cramer and V. Shoup. Universal hash proofs and a
paradigm for adaptive chosen ciphertext secure
public-key encryption. In EUROCRYPT, pages 45–64.
Springer, 2002.
[11] W. Diﬃe and M. Hellman. New directions in
cryptography. IEEE Transactions on Information
Theory, pages 644 – 654, 1976.
[12] Y. Dodis, K. Haralambiev, A. L´opez-Alt, and D. Wichs.
Eﬃcient public-key cryptography in the presence of key
leakage. In ASIACRYPT, pages 613–631, 2010.
[13] Y. Dodis, Y. T. Kalai, and S. Lovett. On cryptography
with auxiliary input. In STOC, pages 621–630, 2009.
[14] Y. Dodis, L. Reyzin, and A. Smith. Fuzzy extractors: