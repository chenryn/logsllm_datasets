# Service Failures and Error Models: Analysis and Discussion

## 1. Introduction
This document analyzes the robustness of system services using different error models, including Bit-Flip (BF), Data Type (DT), and Fuzzing (FZ). The goal is to identify vulnerable services and compare the effectiveness of these error models.

## 2. Services Identified by Class 3 Failures
Table 7 lists the services identified by class 3 failures. "x" indicates class 2 service failures.

| Service                      | BF | DT | FZ |
|------------------------------|----|----|----|
| SERIAL OPEN                  | x  | 1  |    |
| CreateThread                 | x  | 4  | x  |
| DisableThreadLibraryCalls    | x  | x  |    |
| FreeLibrary                  | x  | 6  | 1  |
| InitializeCriticalSection    | x  | 4  | 1  |
| LoadLibraryW                 | x  | 2  | 4  |
| LocalAlloc                   | x  | 1  | 1  |
| MapPtrToProcess              | x  | 3  | 3  |
| memcpy                       | x  | 9  | x  |
| memset                       | x  |    | 1  |
| MmMapIoSpace                 | x  | 1  | 1  |
| NDISInitializeWrapper        | x  | 4  | 2  |
| NDISMSetAttributesEx         | x  | 7  | 2  |
| NDISMSynchronizeWithInterrupt| x  | 2  | 2  |
| QueryPerformanceCounter      | x  | 77 | 74 |
| SetProcPermissions           | x  | 11 | 1  |
| wcscpy                       | x  | 4  | 7  |
| wcslen                       | x  | 2  | 1  |

Figure 3 shows the stability of diffusion for the FZ model with respect to the number of injections.

## 3. Interpretation and Discussion
### 3.1 Identifying Vulnerable Services
Identifying vulnerable services is crucial for enhancing system robustness, such as through the use of wrappers. The table indicates which services exhibit class 2 failures, increasing the coverage slightly. Four services are identified only by BF. The DT model performs slightly better than FZ, but in two cases, FZ identifies a service that DT does not. One service is found only by FZ.

### 3.2 Error Models and Error Severity
The first major finding is that the BF model causes more severe failures than the other models. Table 6 shows that BF finds the most class 3 failures. However, the number of injections used is high, leading to increased execution time (Table 5). When time is crucial, other error models may be considered. In terms of the number of injections and execution time, the DT error model performs the best, with FZ in the middle.

### 3.3 Comparing BF and FZ
The second major finding is that BF identifies more services with class 3 failures than the other models. FZ identifies one service (InitializeCriticalSection) that none of the other models identified. FZ uses random values, while BF and DT modify existing values. Services with basic parameter checking can easily detect random values, but values close to the expected value (e.g., changing one bit) are harder to find and may cause system failures. This is particularly true for handles and control values like bit-mask flags.

### 3.4 Model Choice
Table 4 shows differences in results between the models. BF identifies atadisk as the most vulnerable driver, while the other models identify the serial driver as the most vulnerable. The choice of error model depends on various factors, including time, implementation complexity, and evaluation goals.

### 3.5 Implementation Complexity and Cost
Table 5 shows that BF and FZ are more expensive in terms of execution time compared to DT. However, DT has a higher implementation cost because it requires keeping track of each parameter type for every service. BF and FZ do not have this requirement, making their implementation cheaper. The cost for DT could be reduced with automatic parsing tools or reflection-capable programming languages.

### 3.6 Experiment Time
Experiment time is influenced by operator involvement. Some experiments require manual reboots, which can delay the experiment. Each manual reboot is given a generic penalty of 200 seconds.

### 3.7 Class 2/3 Failures and Bugs
Class 2 and 3 failures do not necessarily indicate bugs. It is common practice to have a "gentlemen's agreement" between the OS and drivers, where thorough checking of kernel calls is not always feasible. From a robustness perspective, these failures are vulnerabilities. All targeted drivers are deployed and tested to some extent.

## 4. Developing the Composite Error Model
### 4.1 Major Findings
- BF pinpoints the most services for class 3 failures.
- FZ gives similar diffusion results to BF at a lower cost but does not find as many services.

### 4.2 CM Setup: Bit Failure Distribution
BF's inefficiency in terms of execution time is due to the number of injections. Figure 4 and Figure 5 show that bits 0-9 and 31 are the most effective for identifying failures. Using only these bits reduces the number of test cases for BF by 62% while still identifying all services.

### 4.3 Distinguishing Control vs. Data
Parameters identified by BF but not by FZ are typically control values like pointers and handles. These parameters are more sensitive to changes in the least significant bits (LSB) than the most significant bits (MSB).

### 4.4 Composite Model and Effectiveness
A composite model using bits 0-9 and 31, along with ten FZ injections, identifies the same set of class 3 vulnerable services as the full set of BF and FZ injections. This reduces the number of injections to 48.7% of the original, saving up to 60 hours of experimentation time.

## 5. Conclusions
This paper reports on extensive fault injection experiments using three error models: bit-flip, data type, and fuzzing. Bit-flips are the most acute but have the highest implementation cost. A new composite error model achieves comparable error propagation results and identifies the same set of vulnerable services with fewer injections. General guidelines for selecting an error model include:
- Use any of the three error models (or the composite) for comparing drivers' potential to spread errors or evaluating OS robustness.
- If implementation cost is critical, use bit-flips or fuzzing. Fuzzing gives similar diffusion results with fewer injections.
- For identifying serious failures, bit-flips are the most efficient, followed by data type. Fuzzing, being random, may find cases where other models do not.
- The composite error model provides accurate results at a moderate execution/setup cost.

## 6. References
[References listed here]

---

This document provides a clear, structured, and professional analysis of the robustness of system services using different error models.