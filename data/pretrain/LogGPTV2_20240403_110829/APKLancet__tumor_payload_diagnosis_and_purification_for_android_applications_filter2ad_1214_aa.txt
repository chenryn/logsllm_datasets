title:APKLancet: tumor payload diagnosis and purification for android applications
author:Wenbo Yang and
Juanru Li and
Yuanyuan Zhang and
Yong Li and
Junliang Shu and
Dawu Gu
APKLancet: Tumor Payload Diagnosis and Puriﬁcation for
Android Applications
Shanghai Jiao Tong University
Shanghai Jiao Tong University
Shanghai Jiao Tong University
∗
Wenbo Yang
Juanru Li*
800 Dongchuan Road
Shanghai, China
PI:EMAIL
800 Dongchuan Road
Shanghai, China
PI:EMAIL
Yuanyuan Zhang*
800 Dongchuan Road
Shanghai, China
PI:EMAIL
†
Dawu Gu
Yong Li
Junliang Shu
Shanghai Jiao Tong University
Shanghai Jiao Tong University
Shanghai Jiao Tong University
800 Dongchuan Road
Shanghai, China
PI:EMAIL
800 Dongchuan Road
Shanghai, China
PI:EMAIL
800 Dongchuan Road
Shanghai, China
PI:EMAIL
ABSTRACT
A huge number of Android applications are bundled with
relatively independent modules either during the develop-
ment or by intentionally repackaging. Undesirable behav-
iors such as stealthily acquiring and distributing user’s pri-
vate information are frequently discovered in some bundled
third-party modules, i.e., advertising libraries or malicious
code (we call the module tumor payload in this work), which
sabotage the integrity of the original app and lie as a threat
to both the security of mobile system and the user’s privacy.
In this paper, we discuss how to purify an Android APK
by resecting the tumor payload. Our work is based on two
observations: 1) the tumor payload has its own characteris-
tics, so it could be spotted through program analysis, and 2)
the tumor payload is a relatively independent module so it
can be resected without aﬀecting the original app’s function.
We propose APKLancet, an automatic Android application
diagnosis and puriﬁcation system, to detect and resect the
tumor payload. Relying on features extracting from ad li-
braries, analytics plugins and an approximately 8,000 mal-
ware samples, APKLancet is capable of diagnosing an APK
and discovering unwelcome code fragment. Then it makes
use of the code fragment as index to employ ﬁne-grained
program analysis and detaches the entire tumor payload.
More precisely, it conducts an automatic app patching pro-
cess to preserve the original normal functions while resect-
ing tumor payload. We test APKLancet by the Android
apps bundled with representative tumor payloads from on-
∗All three authors contributed equally to this work.
†Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan.
Copyright 2014 ACM 978-1-4503-2800-5/14/06$15.00.
http://dx.doi.org/10.1145/2590296.2590314.
line sandbox system. The result shows that the puriﬁcation
process is feasible to resect tumor payload and repair the
apps. Moreover, all of the above do not require any An-
droid system modiﬁcation, and the puriﬁed app does not
introduce any performance latency.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: (e.g., viruses, worms,
Trojan horses);
General Terms
Security
Keywords
Program analysis; Third-party libraries; Malicious code; An-
droid Security
1.
INTRODUCTION
Smartphones such as Android phones are beneﬁcial sup-
plements to stationary computing: online payment, web
surﬁng, email processing, etc. Being a functional cellular
phone, smartphone maintains the contacts lists, geographic
location, SMS and more, which are directly related to the
user herself. As a result, with the booming of the market
share of these mobile devices, Android attracts great at-
tention of malicious activities that are rapidly increasing.
Android applications are discovered gathering data such as
GPS location, device identiﬁers, and even user’s identity
without proper notice or authorization from the end user.
The unwanted behaviors, however, are usually introduced by
the bundled third-party libraries or injected malicious code.
These kinds of potentially undesirable third-party code, as
we call tumor payload in this paper, introduce new secu-
rity threat to benign apps and expose the users to privacy
leakage or system compromising.
Typical tumor payload includes not only malicious code
but also some advertising/analytics libraries. Most of the tu-
mor payload choose to bundle with the popular apps which
would bring in more proﬁt for the publisher. The Brightest
Flashlight Free app for Android, which has been downloaded
between 50 to 100 million times, has been secretly sending
location and device data to advertisers[5]. For third-party
ad libraries or analytics plugins that seem to be benign, they
may also introduce potential security breaches. For instance,
ad libraries have been observed the behavior of downloading
code over HTTP and dynamically loading and executing at
runtime without checking the integrity[3]. Attacker may hi-
jack the network and replace the executable with malicious
code.
Due to the fact that Android apps are vulnerable to repack-
aging attack, tumor payload bundling becomes even more
popular. Attackers could simply modify the apps using
sophisticated decompilation tools to inject extra code or
change the user interface through tweaking resource ﬁles.
According to Zhou and Jiang’s study[24], about 86.0% of
the malwares they analyzed are repackaged versions of legit-
imate apps with malicious payloads. BitDefender’s survey
on Google Play[1] shows that more than 4,000 apps out of
about 420,000 apps are plagiarized or simply re-engineered
from other app developers, adding new advertising SDK to
original apps for proﬁt. In third-party application market,
the situation is even worse. The experiment in[23] displays
the fact that 5% to 13% of apps hosted on these studied
marketplaces are repackaged. Since bundling tumor payload
with an app is becoming a common phenomenon in Android
ecosystem, tackling the tumor payload is not only the issue
of protecting the secure execution environment of Android
app, or of constraining the undesirable behavior, but also of
protecting the ecosystem of the Android OS.
From the end users point of view, not only do they want
to detect but also to forbid the imposed function (mostly
from the tumor payload) while remaining the expected app
function. Several studies on detecting the tumor payload
have been proposed at module level pairwise comparison and
large-scale analysis[8, 9, 14, 22]. The issue here is how to
repress the undesirable behaviors and restore a puriﬁed app
to its normal status.
A coarse-grained approach is to forbid the unnecessary
permissions that tumor payload has declared. Android OS
grants and controls the permissions to an entire APK, so
the injected tumor payload shares the same privilege that
the original APK has declared. Avoiding declaring unneces-
sary permission could somehow protect the apps from per-
mission abuse by malicious activities, but notice that many
apps provide their own function based on privileged permis-
sions, and the injected code itself could share those permis-
sions to conduct malicious activities, so this method is not
recommended.
There also exist several ﬁne-grained access control ap-
proaches[15, 10, 20] by rewriting the APK and inserting
instrumentation routines to monitor the API invocation and
dynamically applying security countermeasures when detect-
ing threats. We should notice that these countermeasures do
not account for the fact that APK is composed of modules
of equal status but treated as an entire package. So it still
goes to the end user’s judgment call on granting permission
to the ”benign” or ”malicious” functions in the APK. This
is a diﬃcult task even for the savvy user with the help of
advanced information ﬂow analysis, not to mention the non-
savvy users who have little knowledge on the mechanism
behind the veil. An alternative approach suggests to iso-
late the unwanted code (typically, the advertising libraries)
and execute it in another process with limited privilege[21,
18, 17]. The advantage is to ensure the function of legally
inserted third-party advertising libraries to bring proﬁt to
developers. The problem is that it commonly requires An-
droid system modiﬁcation and thus is diﬃcult to implement.
We found that in most cases tumor payload is simply in-
serted as an independent module (otherwise the decompila-
tion and re-compilation process may fail and it will be hard
to be deployed in large scale) in APK ﬁles. When executed,
this module runs in a separated work ﬂow and is loosely
relevant to the original work ﬂow. Moreover, the styles of
integration of the tumor payload are limited and usually the
integrating procedure is reversible. Thus, it is able to purify
an app through properly analyzing the way of integration
and precisely locating and resecting the tumor payload.
In this paper we propose APKLancet, a tumor payload
diagnosis and puriﬁcation system for Android app. AP-
KLancet is an APK rewriting system focusing on resecting
tumor payload (the resecting process is called puriﬁcation in
this work) and further repairing the puriﬁed app after the
resecting. It diagnoses an APK to spot potential tumor code
with tumor payload feature database. Then it partitions the
entire tumor payload with program analysis. Rather than
directly cutting the tumor code oﬀ and leaves the normal
function unchanged, APKLancet will automatically detect
the integration style of the tumor payload and correspond-
ingly patches the APK ﬁle to prove that it can work properly
after the puriﬁcation. Finally, APKLancet conducts a veriﬁ-
cation process to assure that the puriﬁcation does resect the
unwanted behavior, and the operated app is able to work
properly.
The contributions of this work include:
• We conduct a systematic study on the characteristics
of diﬀerent kinds of tumor payload as ad libraries, an-
alytics plugins and malicious code. This serves as a
ﬁrst step towards resecting the tumor payload. Based
on this study, we summarize typical integration styles
of the tumor payload. We propose an eﬀective pu-
riﬁcation and restoration process that adopts diﬀerent
strategies to trim the tumor payload and sew the APK
back.
• We build a tumor payload feature database using the
knowledge of ad libraries, analytics plugins and an ap-
proximately 8,000 malware samples to help ﬁnding sus-
picious code fragment in the app. The diagnosed sus-
picious code fragment is then used as index to partition
the entire tumor payload from the app using code and
data dependency analysis.
• The proposed APK puriﬁcation approach directly op-
erates on apps and does not need to modify the system.
Compared with other access control schemes, our pu-
riﬁcation approach operated by APKLancet does not
bring any extra runtime overhead to either the app or
the system.
• We evaluated the eﬀect of resecting a variety of repre-
sentative tumor payloads such as malicious code Gein-
imi and ad library Wooboo. Our work shows that tu-
mor payload is able to be split. Based on this fact,
APKLancet provides a novel way of access control at
the code level.
2. PRELIMINARIES
2.1 Tumor Payload
We deﬁne the term of tumor payload as the code that
is loosely linked to the primary function of the host app
and performs undesirable behaviors (e.g., collecting infor-
mation without proper notice or authorization from the end
user). Malicious code, ad libraries and analytics plugins that
contain privacy-violated function (although they may bring
proﬁt to developer or help collecting information) can all be
regarded as tumor payload.
2.1.1 Malicious Code
Among all kinds of potentially unwanted code, malicious
code is perhaps the most dangerous one. Malicious code
refers to the code that intentionally conducts undesirable
behaviors without approval. On Android OS, malicious code
has evolved from simple functions such as sending SMS with-
out the authorization to sophisticated functions such as get-
ting root privileges by exploits, receiving and executing com-
mands from remote server. More works[12, 19] have de-
scribed the details on such threats caused by malicious code.
One example is the Geinimi malware, the ﬁrst sophisticated
malware for Android found in the wild in 2010. Many legit-
imate apps are infected by being repackaged and the mali-
cious code that includes a backdoor-like functionality. Fol-
lowing Geinimi, the repackaging-based infections were soon
arising by other variants such as the Trojan ADRD. Re-
searchers found that 86.0% repackaged apps have included
malicious payloads after analyzing more than 1200 Android
malware samples in 49 diﬀerent malware families[24].
2.1.2 Ad Library
Ad library is the most common third-party code among
Android apps. According to [2], about 50% of the apps
contain at least one ad library. Although users dislike ads
popping in their apps, developers can gain proﬁt from it (by
user’s clicking the ads) so it is not reasonable to classify the
ad library as malicious code. However, if an app without
advertising is modiﬁed by injecting ad library for proﬁt, the
intellectual property rights of the original author are vio-
lated, which harms the whole Android ecosystem. In this
situation, the injected library is obviously considered to be
unwanted code by both the end users and the developers.
2.1.3 Analytics Plugin
Being diﬀerent from the ad library, analytics plugin is to
help developer collect user engagement data from their ap-
plications and make decision according to huge amount of
collected information. For instance, the Google Analytics
SDK for Android can help Android developers to collect data
such as the number of active users, location of the users who
use the application, etc. Analytics plugin generally runs in
background and does not intervene in any operation at the
front-end. Same as ad lib, analytics plugin should not be
deﬁned as malicious code. The potential risk of analytic
plugin is that it may collect data related to user’s privacy.
2.2 Observations
Tumor payload has obvious characteristics. From the
viewpoint of program analysis, the tumor payload is a mod-
ule that is loosely linked to the primary function of the host
app and can be eﬀectively partitioned[22]. From the per-
spective of pattern matching, typical tumor payload often
contains special meta-data information declared in the xml
ﬁle of the APK. And from the viewpoint of behavior moni-
toring, tumor payload generally involves privileged permis-
sion requirement and sensitive API invoking.
Another observation is that although tumor payloads may
be various, they are basically using the same repackaging
techniques, and most repackaging processes are reversible.
The typical repackaging process involves unpacking the orig-
inal APK to extract bytecode part and resource part, de-
compiling bytecode, modifying existing code (injecting new
code) and resource ﬁles, and repacking the modiﬁed contents
into a new package. Most of the repackaging procedures do
not make too much modiﬁcation to the inside of the original
code but only add extra functional modules due to the ap-
plicability and dissemination. The function of the original
APK is often preserved, and the injected code is normally
a third-party module that is well encapsulated. Therefore,
it is feasible to split the tumor payload from the app and
purify the host app because the injection is detachable.
3. APK PURIFICATION
APK puriﬁcation is the process of resecting tumor code
from an app. The goal is to resect the undesirable behav-
iors brought by the tumor code while preserving the original
function. It relies on the observation that tumor code is not
tightly interweaving with the major function of the APK.
To this end, we propose APKLancet, a tumor code exci-
sion system to conduct the app puriﬁcation process. AP-
KLancet’s work ﬂow consists of four stages(Fig 1). At the
ﬁrst stage APKLancet mainly relies on existing tumor code
features to diagnose the APK ﬁle and ﬁlter out possible code
fragment related to tumor payload. At the second stage the
ﬁltered suspicious code fragment is used as index to partition
the entire tumor payload from the benign code, the parti-