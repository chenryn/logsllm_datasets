## PostgreSQL 事务快照功能 - Parallel Export consistent data or Parallel Query use snapshot transaction feature    
### 作者                                                                                                                                                       
digoal                                                                                                     
### 日期                                                                                                       
2013-03-06                                                                                                      
### 标签                                                                                                     
PostgreSQL , snapshot , 事务快照  
----                                                                                                    
## 背景                  
PostgreSQL 9.2 的一个新特性支持事务状态的导出和导入, 以前写过一篇文章测试这项特性,  
http://blog.163.com/digoal@126/blog/static/1638770402012416105232835/  
本文主要是针对这项特性的一个延展, 利用这个特性可以让PostgreSQL 支持并行的一致性数据导出, 或者并行查询.  
首先测试两个事务导出和导入的场景, 从测试结果可以看到多个事务导入同一个事务状态后看到了一致的数据.  
同时如果导出事务状态的事务提前结束, 状态可以保持, 不会影响导入这个状态的事务的一致性.  
一、导出repeatable read 事务状态.  
SESSION A(导出repeatable read事务状态) :   
```  
postgres=# drop table snapshot ;  
DROP TABLE  
postgres=# create table snapshot (id int, info text);  
CREATE TABLE  
postgres=# insert into snapshot values (1,'abc');  
INSERT 0 1  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SELECT pg_export_snapshot();  
 pg_export_snapshot   
--------------------  
 000007E9-1  
(1 row)  
```  
SESSION B(修改数据,自动提交) :   
```  
postgres=# insert into snapshot values (2,'test');  
INSERT 0 1  
```  
SESSION C(导入repeatable read事务状态, 查看数据) :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SET TRANSACTION SNAPSHOT '000007E9-1';  
SET  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
SESSION B(修改数据,自动提交) :   
```  
postgres=# insert into snapshot values (3,'test');  
INSERT 0 1  
```  
SESSION D(导入repeatable read事务状态, 查看数据) :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SET TRANSACTION SNAPSHOT '000007E9-1';  
SET  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
SESSION A(结束事务, 不会影响已导入事务状态的事务的一致性) :   
```  
postgres=# end;  
COMMIT  
```  
SESSION B(修改数据,自动提交) :   
```  
postgres=# insert into snapshot values (4,'test');  
INSERT 0 1  
```  
SESSION C(查询数据) :   
```  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
SESSION D(查询数据) :   
```  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
二、导出read committed事务状态.  
SESSION A(导出read committed事务状态) :   
```  
postgres=# drop table snapshot ;  
DROP TABLE  
postgres=# create table snapshot (id int, info text);  
CREATE TABLE  
postgres=# insert into snapshot values (1,'abc');  
INSERT 0 1  
postgres=# begin transaction isolation level read committed;  
BEGIN  
postgres=# SELECT pg_export_snapshot();  
 pg_export_snapshot   
--------------------  
 000007F0-1  
(1 row)  
```  
SESSION B(修改数据,自动提交) :   
```  
postgres=# insert into snapshot values (2,'test');  
INSERT 0 1  
```  
SESSION C(导入read committed事务状态, 查看数据) :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SET TRANSACTION SNAPSHOT '000007F0-1';  
SET  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
SESSION B(修改数据,自动提交) :   
```  
postgres=# insert into snapshot values (3,'test');  
INSERT 0 1  
```  
SESSION D(导入read committed事务状态, 查看数据) :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SET TRANSACTION SNAPSHOT '000007F0-1';  
SET  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
SESSION A(结束事务, 不会影响已导入事务状态的事务的一致性) :   
```  
postgres=# end;  
COMMIT  
```  
SESSION B(修改数据,自动提交) :   
```  
postgres=# insert into snapshot values (4,'test');  
INSERT 0 1  
```  
SESSION C(查询数据) :   
```  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
SESSION D(查询数据) :   
```  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
从上面的测试可用看出, 导出事务状态的事务不管是read committed还是repeatable read的, 不影响后续事务导入的结果.  
但是需要注意, 以下场景则存在差异, 这也是read committed和repeatable read事务的特性差异, 并不会影响后续多节点导入这个事务状态后的数据一致性观测.   
注意pg_export_snapshot()会获得一个事务号.  
而begin; 并不会马上获得事务号, 需要在第一条变更数据的语句开启前获得. 或者使用txid_current()直接获得.  
1\. repeatable read :   
SESSION A(启动repeatable read事务) :   
```  
postgres=# drop table snapshot ;  
DROP TABLE  
postgres=# create table snapshot (id int, info text);  
CREATE TABLE  
postgres=# insert into snapshot values (1,'abc');  
INSERT 0 1  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# select txid_current();  
 txid_current   
--------------  
         2045  
(1 row)  
```  
SESSION B(修改数据) :   
```  
postgres=# insert into snapshot values (2,'test');  
INSERT 0 1  
```  
SESSION A(导出repeatable read事务状态) :   
```  
postgres=# SELECT pg_export_snapshot();  
 pg_export_snapshot   
--------------------  
 000007FD-1  
(1 row)  
```  
SESISON C(导入repeatable read事务状态, 查看数据) :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SET TRANSACTION SNAPSHOT '000007FD-1';  
SET  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
(1 row)  
```  
2\. read committed :   
SESSION A(启动read committed事务) :   
```  
postgres=# drop table snapshot ;  
DROP TABLE  
postgres=# create table snapshot (id int, info text);  
CREATE TABLE  
postgres=# insert into snapshot values (1,'abc');  
INSERT 0 1  
postgres=# begin transaction isolation level read committed ;  
BEGIN  
postgres=# select txid_current();  
 txid_current   
--------------  
         2050  
(1 row)  
```  
SESSION B(修改数据) :   
```  
postgres=# insert into snapshot values (2,'test');  
INSERT 0 1  
```  
SESSION A(导出read committed事务状态) :   