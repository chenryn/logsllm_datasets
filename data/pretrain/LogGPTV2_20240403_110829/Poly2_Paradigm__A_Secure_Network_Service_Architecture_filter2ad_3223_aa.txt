title:Poly2 Paradigm: A Secure Network Service Architecture
author:Eric Bryant and
James P. Early and
Rajeev Gopalakrishna and
Gregory Roth and
Eugene H. Spafford and
Keith Watson and
Paul Williams and
Scott Yost
Poly2 Paradigm: A Secure Network Service Architecture ∗
Eric Bryant, James Early, Rajeev Gopalakrishna, Gregory Roth, Eugene H. Spafford,
Keith Watson, Paul Williams, Scott Yost
Center for Education and Research in Information Assurance and Security (CERIAS),
Purdue University
656 Oval Drive, Purdue University,
{bryante, earlyjp, rgk, groth, spaf, kaw, pdwillia, syost}@cerias.purdue.edu
West Lafayette, IN 47907
Abstract
General-purpose operating systems provide a rich computing en-
vironment both to the user and the attacker. The declining cost of
hardware and the growing security concerns of software necessi-
tate a revalidation of the many assumptions made in network ser-
vice architectures. Enforcing sound design principles while retain-
ing usability and ﬂexibility is key to practical security. Poly2 is an
approach to build a hardened framework for network services from
commodity hardware and software. Guided by well-known secu-
rity design principles such as least common mechanism and econ-
omy of mechanism, and driven by goals such as psychological ac-
ceptability and immediate usability, Poly2 provides a secure plat-
form for network services. It also serves as a testbed for several
security-related research areas such as intrusion detection, foren-
sics, and high availability. This paper discusses the overall design
and philosophy of Poly2, presents an initial implementation, and
outlines future work.
1. Introduction and Philosophy
Poly2 (short for poly-computer, poly-network) is a hard-
ened framework in which the mission critical network ser-
vices of an organization can operate. This framework is in-
tended to provide robust protection against attacks to the
services running within its domain. The design and imple-
mentation of Poly2 is based on good design principles—
principles developed in the ﬁeld of computer security over
the last 30 years [5] but are infrequently and often inconsis-
tently applied in actual systems.
The basic operating tenet is that the use of a general-
purpose operating system and the consolidation of network
services on a single system (as is typical of modern net-
∗ We acknowledge some initial inspiration to explore this architecture
from conversations with Peter Neumann and William Hugh Murray.
The initial design of Poly2 has been funded by a gift from the Intel
Corporation, and by sponsors of CERIAS.
working environments) often leads to compromised ser-
vices and systems. Vulnerabilities in the operating system
or a speciﬁc network service allow attackers to subvert the
entire system or to disable or modify other network ser-
vices running on the same machine. Compromised sys-
tems are also used to attack other systems, to breach sys-
tems internal to an organization, to gather sensitive infor-
mation, and to covertly monitor organizational activities.
Furthermore, these general purpose systems are difﬁcult to
protect—detecting anomalous behavior in systems rich with
services is a difﬁcult task [19].
The Poly2 approach is to separate network services onto
different systems, to use application-speciﬁc (minimized)
operating systems, and to isolate speciﬁc types of network
trafﬁc. Trust in the entire architecture comes from the sepa-
ration of untrusted systems and services. The separation of
network services helps contain successful attacks against in-
dividual systems and services. Therefore no single compro-
mised system can bring down the entire architecture. The
minimized operating systems only provide the services re-
quired by a speciﬁc network service. Removal of all other
services reduces the functionality of the system to a bare
minimum. Speciﬁc types of network trafﬁc such as adminis-
trative, security-speciﬁc, and application-speciﬁc trafﬁc are
isolated onto special sub-networks. Because the nature of
the trafﬁc on each sub-network is speciﬁc and known in ad-
vance, deviations in normal trafﬁc patterns are more easily
detected [1] [19].
This effort builds on ongoing work at CERIAS. A pre-
liminary design was created using good security design
principles. This paper covers the Poly2 initial philosophy
and ongoing work, with particular emphasis on the overall
architectural design and initial implementation.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
2. Challenging Conventional Wisdom
2.1. Core Design Principles
A trend in modern information technology (IT) architec-
tures is server consolidation. In many cases, this is an at-
tempt to reduce the overall costs of owning and operating
IT systems by consolidating services spread throughout an
organization into centralized locations, and run them on a
single, large computer system, or onto clusters of servers
all performing related or similar tasks. In both cases, how-
ever, these services are often deployed on systems running a
general-purpose, full-featured operating system. Such sys-
tems are designed to be simple to install and use, and re-
quire little time to conﬁgure. Subsequently, they provide a
large number of services, many of which are not necessary
or used, except by attackers.
This paradigm is especially troublesome in the context
of security. The consolidation of many network services on
a single system is problematic if one of the services is com-
promised. If an attacker gains system-level access through
a vulnerable service, she will likely disable, modify, or in
some way compromise the other network services or dam-
age the entire system. Additionally, general-purpose oper-
ating systems often have unnecessary services running by
default. Often these services are overlooked or assumed to
be required for stable operation of the system. Vulnerabil-
ities in these services may provide an attacker with unau-
thorized ways into the system. A general-purpose operat-
ing system might also have libraries and utilities (such as
compilers, shells, and ﬁle-transfer programs) that are not re-
quired by the critical network services deployed on a system
or for the maintenance of the system. These provide an at-
tacker, who has subverted the system, with a full set of tools
that could be used to create and launch attacks against other
systems.
While recent attempts have enhanced security by empha-
sizing the disabling of unneeded services [7] [12], determin-
ing which services are necessary and which are not is a difﬁ-
cult task. Thus, services that can be disabled are overlooked,
assumed to be required for stable operation, or left active
for future needs. To further complicate the issue, there are
many capabilities and services built into modern operating
systems that are very difﬁcult or impossible to disable us-
ing the available conﬁguration interfaces.
The Poly2 architecture is based on a simple philosophy:
apply well-known design principles and supply hardware to
support those principles. The resulting system is composed
of simple components, exhibits good principles of separa-
tion and structure, and is easier to verify, operate, and main-
tain while being more secure.
Principled development is central to the Poly2 project.
The historic Saltzer and Schroeder principles [13] and Neu-
mann’s augmented and reﬁned versions [11] of them as pre-
sented in Bishop’s text [1] inspired our work.
Currently, the primary principles of focus are:
• Economy of Mechanism: Security mechanisms should
be as simple as possible. Economy of mechanism is a
key driver in Poly2 design and development. Its appli-
cation to the network services provided by the Poly2
architecture eschews the “bundling” that is prevalent
in today’s software systems.
• Least Privilege: A subject should be given only those
privileges needed to complete its task. Ensuring net-
work services run with the least privileges possible is
critical to the Poly2 infrastructure.
• Separation of Privilege: A system should not grant per-
mission based on a single condition. Security mecha-
nisms in Poly2 are separated such that the trust neces-
sary to compromise the system is not placed into a sin-
gle mechanism.
• Complete Mediation: All accesses to an object must
be checked to ensure access is allowed. The principle
of complete mediation is applied in layers of protec-
tion throughout the system by using sound authentica-
tion, authorization, and comprehensive accountability
both locally to speciﬁc network services, and globally,
protecting the internal systems from each other.
• Fail-Safe Defaults: Unless a subject
is given ex-
plicit access to an object, access should be de-
nied. The system as a whole initially embodies no
trust
relationships—the authorized movements of
data and control through the system must be explic-
itly deﬁned by the security policy and allowed by the
security mechanisms.
• Least Common Mechanism: Mechanisms used to ac-
cess resources should not be shared. Shared resources,
such as operating system services and broadcast net-
works, may offer both vulnerabilities and springboards
for attackers who have successfully compromised part
of the system. Interference between Poly2 components
is minimized by isolating network services on individ-
ual computer hosts and partitioning the network trafﬁc
into physically-separate, type-speciﬁc networks.
• Open Design: Security of a mechanism should not de-
pend on secrecy of the design or implementation. The
combination of policy and mechanisms designed to
support the principles explained above will provide
sufﬁciently robust protection that the design of a Poly2
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
system need not be protected in order to keep the sys-
tem safe.
• Psychological Acceptability: Security mechanisms
should not make the resource more difﬁcult to ac-
cess than if security mechanisms were not present.
The tension between usability and security is a fun-
damental concern—a robust and secure system is of
little value if it is too difﬁcult or onerous to oper-
ate in real environments. Therefore Poly2 is designed
to balance security and usability.
3. High-Level Design
3.1. Physical Separation versus Logical Separa-
tion
Multiple users and multiple processes share CPU, disk,
memory, and network resources, all of which are logically
separated over time and space. The applications and the un-
derlying operating system are required to enforce this sep-
aration. However, software tends to be more complex than
hardware, and is therefore more vulnerable to ﬂaws in de-
sign and implementation. Hardware is also more difﬁcult
to conﬁgure or tamper with remotely, requiring physical ac-
cess in most cases. Therefore, enforcing physical separation
using hardware allows more assurance than doing the same
in software. Migrating security functionality to the hard-
ware is desirable, but this has to be ﬁnely balanced with
manageability and ﬂexibility. Examples of the use of phys-
ical separation include stripping unnecessary services and
applications from server hosts, isolation of services on sep-
arate machines, distinct physical networks for different traf-
ﬁc classes, the use of write-once and read-only media where
applicable (inspired in part by [14]), and the use of one-way
only network links where possible (inspired in part by the
concept of a Data-Diode as discussed in [4]).
3.2. One Application — One Machine
Running a single application on a machine provides iso-
lation of services, thus providing immunity from ﬂaws in
other applications. Additionally, because the underlying op-
erating system need only support a single, speciﬁc applica-
tion, the O/S can be tuned to best support that application,
both in terms of performance and security. Examples of per-
formance characteristics that can be tuned include schedul-
ing algorithms and ﬁle systems. From a security standpoint,
behavior of such a specialized system is simpler to spec-
ify and deviations from normal behavior are easier to detect
[1][19].
3.3. Isolated Networks
Networks provide a communication medium for differ-
ent types of information by using a variety of protocols. The
possibility of monitoring, injecting, or replaying trafﬁc ex-
ists when systems share a network channel. These issues
are dealt with using different protocol mechanisms (such
as addressing, time-stamping, and sequence numbers) and
cryptographic techniques (such as message authentication
codes and encryption) [6]. Again, though, these are soft-
ware mechanisms that can be broken given sufﬁcient time
and resources (information theoretically) [2]. The Poly2 so-
lution to this problem is to use isolated networks for carry-
ing different types of trafﬁc with no trafﬁc routed between
the networks.
three categories of
Types of information can be categorized based on var-
ious attributes. One such categorization is based on the
intended purpose of the information. Poly2 currently de-
ﬁnes
trafﬁc—application-speciﬁc,
maintenance/administrative-speciﬁc, and security-speciﬁc.
These three types of trafﬁc are deﬁned in Poly2 to be at dif-
ferent sensitivity levels with the security and administra-
tive trafﬁc being more critical to the functioning of the
whole system than the application trafﬁc. Using sepa-
rate networks for carrying trafﬁc of different sensitivities
allows for better separation of concerns, reduces interfer-
ence, and increases conﬁdence in the authenticity of the
information.
3.4. Operating Environment and Speciﬁc Network
Types
The operating environment of Poly2 is intended to be the
network presence located outside the organization’s primary
ﬁrewall in what is known as a demilitarized zone (DMZ).
The equipment is physically protected by isolating it from
common users both inside and outside the organization. As
discussed above, the network infrastructure is partitioned
into several physically and logically separate components:
• Application Network: This
is
the public-facing
and only publicly visible part of Poly2. The sys-
tem, while internally partitioned into functional
sub-systems, presents a single interface to the exter-
nal world. This satisﬁes the principle of least privilege
in that external users do not need to know the inter-
nal organization of the system.
• Administration Network: This network is used to ad-
minister the servers and services in the system, en-
abling both control over and awareness of the health
of Poly2 systems.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
• Security Network: This network is used exclusively for
security-speciﬁc trafﬁc such as intrusion detection and
auditing.
• Internal Data: This network is used as a link from Ap-
plication Servers to data not available in a DMZ or on
a Poly2 server (e.g. databases, web server, etc.).
The separate networks limit sharing of information be-
tween components of the system which satisﬁes the prin-
ciple of least common mechanism. The data stored on and
moving throughout the system is also categorized as Appli-
cation, Administration, Security, and Internal Data.
3.5. Security Policy Development
The security policy deﬁnes how information can and
cannot move about the Poly2 system. It deﬁnes require-
ments, not mechanisms. The requirements for supporting
the policy are deﬁned during system design.
3.5.1. System Users The three user groups of Poly2 are:
• Administrators: Personnel responsible for conﬁguring
• Internal users: Internal organization users that need ac-
• External users: Users outside the organization that ac-
cess to services located in the Poly2 domain.
and maintaining the deployed services.
cess the deployed services.
3.5.2. High-level Security Policy Poly2 is intended to of-
fer protection against unauthorized use of organizational re-
sources by external users. The following requirements have
been established:
1. Each application server component provides a single
service to external users. All network trafﬁc related
to that service goes directly from the gateway to that
server, traverses only the application network, and is
not visible to any other service. However, outside users
see only a single address for the entire Poly2 system.
2. Each service runs at the lowest possible security level.
Additionally, only the internal services and applica-
tions required to provide the service are available to
processes running at the service’s security level. This
means that a compromise of a server application will
not present to the attacker with a full suite of appli-
cations and services from which to launch further at-
tacks.
3. The various networks are separated, both logically and
physically.
(a) Information cannot ﬂow from one network to
another without the intervention of a speciﬁc
trusted and controlled process. Speciﬁcally, traf-
ﬁc coming in on the Application Network, which
may contain commands from an attacker, can-
not ﬂow onto any other network. Nor can a user
who has entered the system via the Application
Network, compromised a service running on a
server, and has that server’s privileges, see or
modify trafﬁc on any other network.
(b) Information can only move from one network to
another through the actions of security or admin-
istrative mechanisms. In these speciﬁc cases, the
information is moved and handled in a way that
will prevent any malicious code from being ex-
ecuted. Any malicious code will not be entered
into trusted data stores, but may be used as part
of security, forensics, or administration tasks.
4. No trafﬁc is to propagate from one Application Server
to another Application Server inside the system.