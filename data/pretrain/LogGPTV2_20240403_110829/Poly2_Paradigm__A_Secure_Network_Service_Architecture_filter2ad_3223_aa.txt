# Poly2 Paradigm: A Secure Network Service Architecture

## Authors
- Eric Bryant
- James P. Early
- Rajeev Gopalakrishna
- Gregory Roth
- Eugene H. Spafford
- Keith Watson
- Paul Williams
- Scott Yost

## Affiliation
Center for Education and Research in Information Assurance and Security (CERIAS),  
Purdue University,  
656 Oval Drive, West Lafayette, IN 47907, USA  
Emails: {bryante, earlyjp, rgk, groth, spaf, kaw, pdwillia, syost}@cerias.purdue.edu

## Abstract
General-purpose operating systems (OS) provide a rich computing environment, but they also present numerous vulnerabilities. The declining cost of hardware and the increasing security concerns necessitate a reevaluation of network service architectures. Enforcing sound design principles while maintaining usability and flexibility is crucial for practical security. Poly2 is an approach to build a hardened framework for network services using commodity hardware and software. Guided by well-known security design principles such as least common mechanism and economy of mechanism, and driven by goals such as psychological acceptability and immediate usability, Poly2 provides a secure platform for network services. It also serves as a testbed for several security-related research areas, including intrusion detection, forensics, and high availability. This paper discusses the overall design and philosophy of Poly2, presents an initial implementation, and outlines future work.

## 1. Introduction and Philosophy
Poly2, short for poly-computer, poly-network, is a hardened framework designed to protect mission-critical network services. The framework aims to provide robust protection against attacks on the services within its domain. The design and implementation of Poly2 are based on established security principles developed over the past three decades [5], which are often inconsistently applied in real-world systems.

The fundamental principle is that using a general-purpose OS and consolidating multiple network services on a single system, as is common in modern networking environments, can lead to compromised services and systems. Vulnerabilities in the OS or a specific network service can allow attackers to subvert the entire system or disable or modify other network services running on the same machine. Compromised systems can be used to attack other systems, breach internal organizational systems, gather sensitive information, and covertly monitor organizational activities. Detecting anomalous behavior in systems with a rich set of services is challenging [19].

The Poly2 approach involves separating network services onto different systems, using application-specific (minimized) operating systems, and isolating specific types of network traffic. Trust in the architecture comes from the separation of untrusted systems and services. This separation helps contain successful attacks against individual systems and services, ensuring that no single compromised system can bring down the entire architecture. Minimized operating systems provide only the necessary services, reducing the system's functionality to a bare minimum. Specific types of network traffic, such as administrative, security-specific, and application-specific traffic, are isolated onto special sub-networks. The known nature of the traffic on each sub-network makes deviations in normal traffic patterns easier to detect [1] [19].

This effort builds on ongoing work at CERIAS. A preliminary design was created using good security design principles. This paper covers the initial philosophy and ongoing work of Poly2, with a focus on the overall architectural design and initial implementation.

## 2. Challenging Conventional Wisdom

### 2.1. Core Design Principles
A trend in modern IT architectures is server consolidation, which aims to reduce the overall costs of owning and operating IT systems by centralizing services. However, this often results in deploying services on systems running a general-purpose, full-featured OS. Such systems are designed to be easy to install and use, providing a large number of services, many of which are unnecessary and can be exploited by attackers.

In the context of security, consolidating multiple network services on a single system is problematic if one of the services is compromised. An attacker who gains system-level access through a vulnerable service can compromise other network services or damage the entire system. General-purpose OSes often have unnecessary services running by default, which can be overlooked or assumed to be required for stable operation. These services may provide unauthorized entry points for attackers. Additionally, general-purpose OSes may include libraries and utilities (such as compilers, shells, and file-transfer programs) that are not required by critical network services, providing tools for attackers to create and launch further attacks.

Recent efforts to enhance security by disabling unneeded services [7] [12] face the challenge of determining which services are necessary and which are not. Services that can be disabled are often overlooked, assumed to be required, or left active for future needs. Moreover, many capabilities and services in modern OSes are difficult or impossible to disable using available configuration interfaces.

The Poly2 architecture is based on the philosophy of applying well-known design principles and supplying hardware to support those principles. The resulting system is composed of simple components, exhibits good principles of separation and structure, and is easier to verify, operate, and maintain while being more secure.

Principled development is central to the Poly2 project, inspired by the historic Saltzer and Schroeder principles [13] and Neumann’s augmented and refined versions [11] as presented in Bishop’s text [1]. The primary principles of focus are:

- **Economy of Mechanism**: Security mechanisms should be as simple as possible. This principle drives the Poly2 design, eschewing the "bundling" prevalent in today’s software systems.
- **Least Privilege**: A subject should be given only the privileges needed to complete its task. Ensuring network services run with the least privileges possible is critical to the Poly2 infrastructure.
- **Separation of Privilege**: A system should not grant permission based on a single condition. Security mechanisms in Poly2 are separated to ensure that the trust necessary to compromise the system is not placed into a single mechanism.
- **Complete Mediation**: All accesses to an object must be checked to ensure access is allowed. This principle is applied in layers of protection throughout the system, using sound authentication, authorization, and comprehensive accountability both locally and globally.
- **Fail-Safe Defaults**: Access to an object should be denied unless explicitly granted. The system initially embodies no trust relationships; authorized movements of data and control must be explicitly defined by the security policy and allowed by the security mechanisms.
- **Least Common Mechanism**: Mechanisms used to access resources should not be shared. Shared resources, such as OS services and broadcast networks, may offer vulnerabilities and springboards for attackers. Interference between Poly2 components is minimized by isolating network services on individual computer hosts and partitioning the network traffic into physically separate, type-specific networks.
- **Open Design**: Security should not depend on the secrecy of the design or implementation. The combination of policy and mechanisms designed to support the above principles will provide sufficiently robust protection, making it unnecessary to protect the design of a Poly2 system to keep it safe.
- **Psychological Acceptability**: Security mechanisms should not make the resource more difficult to access than if security mechanisms were not present. Balancing security and usability is a fundamental concern; a robust and secure system is of little value if it is too difficult to operate in real environments. Therefore, Poly2 is designed to balance security and usability.

## 3. High-Level Design

### 3.1. Physical Separation versus Logical Separation
Multiple users and processes share CPU, disk, memory, and network resources, which are logically separated over time and space. The applications and underlying OS enforce this separation. However, software tends to be more complex and vulnerable to flaws than hardware, which is more difficult to configure or tamper with remotely. Enforcing physical separation using hardware provides more assurance than doing so in software. Migrating security functionality to hardware is desirable but must be balanced with manageability and flexibility. Examples of physical separation include stripping unnecessary services and applications from server hosts, isolating services on separate machines, using distinct physical networks for different traffic classes, employing write-once and read-only media, and using one-way network links where possible.

### 3.2. One Application — One Machine
Running a single application on a machine provides isolation of services, offering immunity from flaws in other applications. The underlying OS can be tuned to best support the specific application, both in terms of performance and security. Performance characteristics that can be tuned include scheduling algorithms and file systems. From a security standpoint, the behavior of a specialized system is simpler to specify, and deviations from normal behavior are easier to detect [1][19].

### 3.3. Isolated Networks
Networks provide a communication medium for different types of information using various protocols. The possibility of monitoring, injecting, or replaying traffic exists when systems share a network channel. These issues are addressed using protocol mechanisms (such as addressing, time-stamping, and sequence numbers) and cryptographic techniques (such as message authentication codes and encryption) [6]. However, these are software mechanisms that can be broken given sufficient time and resources. The Poly2 solution is to use isolated networks for carrying different types of traffic, with no traffic routed between the networks.

Types of information can be categorized based on their intended purpose. Poly2 currently defines three categories of traffic: application-specific, maintenance/administrative-specific, and security-specific. These types of traffic are at different sensitivity levels, with security and administrative traffic being more critical to the functioning of the system than application traffic. Using separate networks for different sensitivities allows for better separation of concerns, reduces interference, and increases confidence in the authenticity of the information.

### 3.4. Operating Environment and Specific Network Types
The Poly2 operating environment is intended to be the network presence located outside the organization’s primary firewall in a demilitarized zone (DMZ). The equipment is physically protected by isolating it from common users both inside and outside the organization. The network infrastructure is partitioned into several physically and logically separate components:

- **Application Network**: This is the public-facing and only publicly visible part of Poly2. The system, while internally partitioned into functional subsystems, presents a single interface to the external world, satisfying the principle of least privilege.
- **Administration Network**: This network is used to administer the servers and services, enabling control and awareness of the health of Poly2 systems.
- **Security Network**: This network is used exclusively for security-specific traffic such as intrusion detection and auditing.
- **Internal Data Network**: This network is used as a link from Application Servers to data not available in a DMZ or on a Poly2 server (e.g., databases, web servers, etc.).

The separate networks limit the sharing of information between system components, satisfying the principle of least common mechanism. The data stored and moving throughout the system is categorized as Application, Administration, Security, and Internal Data.

### 3.5. Security Policy Development
The security policy defines how information can and cannot move about the Poly2 system. It defines requirements, not mechanisms. The requirements for supporting the policy are defined during system design.

#### 3.5.1. System Users
The three user groups of Poly2 are:
- **Administrators**: Personnel responsible for configuring and maintaining the deployed services.
- **Internal Users**: Internal organization users that need access to the deployed services.
- **External Users**: Users outside the organization that access services located in the Poly2 domain.

#### 3.5.2. High-level Security Policy
Poly2 is intended to offer protection against unauthorized use of organizational resources by external users. The following requirements have been established:

1. **Single Service per Application Server**: Each application server component provides a single service to external users. All network traffic related to that service goes directly from the gateway to that server, traverses only the application network, and is not visible to any other service. However, outside users see only a single address for the entire Poly2 system.
2. **Lowest Possible Security Level**: Each service runs at the lowest possible security level. Only the internal services and applications required to provide the service are available to processes running at the service’s security level. This means that a compromise of a server application will not give the attacker a full suite of applications and services from which to launch further attacks.
3. **Separated Networks**:
   - **No Cross-Network Traffic**: Information cannot flow from one network to another without the intervention of a specific trusted and controlled process. Specifically, traffic coming in on the Application Network, which may contain commands from an attacker, cannot flow onto any other network. Nor can a user who has entered the system via the Application Network, compromised a service running on a server, and has that server’s privileges, see or modify traffic on any other network.
   - **Controlled Information Movement**: Information can only move from one network to another through the actions of security or administrative mechanisms. In these specific cases, the information is moved and handled in a way that prevents any malicious code from being executed. Any malicious code will not be entered into trusted data stores but may be used as part of security, forensics, or administration tasks.
4. **No Propagation Between Application Servers**: No traffic is to propagate from one Application Server to another Application Server inside the system.

---

This revised version aims to make the text more coherent, clear, and professional, while preserving the original content and intent.