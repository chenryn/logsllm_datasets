PORT     STATE  SERVICE
22/tcp   open   ssh    
25/tcp   closed smtp
53/tcp   closed domain
80/tcp   closed http
443/tcp  closed https
445/tcp  closed microsoft-ds
1433/tcp closed ms-sql-s
3306/tcp closed mysql
3389/tcp closed ms-wbt-server
5800/tcp closed vnc-http
5900/tcp closed vnc
8080/tcp closed http-proxy
8443/tcp closed https-alt
nmap done: 22 IP addresses (22 hosts up) scanned in 2.55 seconds
Listing 3.2
Nmap scan: checking for common ports
This host has only one 
open port: port 22.
46
CHAPTER 3
Discovering network services
As you can see from the output, this command took less than three seconds to finish.
Now you have a quick understanding of some of the commonly attacked services that
are running within this target scope. This is the only scan that I would sort manually
through the output files using grep. For larger scans with additional results, you’ll use
an XML parser, which I will show you in the next section. For now, look at the three
files just created in the services directory. Once again, the quick-sweep.gnmap file is
handiest for seeing which ports are open from the scan that just ran. You should be
familiar with this by now; use cat to display the contents of the file and grep to limit
the output to lines that contain the string “open”. 
~$ ls -lah services/
total 84K
drwxr-xr-x 2 royce royce 4.0K May 20 14:01 .
drwxr-xr-x 4 royce royce 4.0K Apr 30 10:20 ..
-rw-rw-r-- 1 royce royce 9.6K May 20 14:04 quick-sweep.gnmap
-rw-rw-r-- 1 royce royce 9.1K May 20 14:04 quick-sweep.nmap
-rw-rw-r-- 1 royce royce  49K May 20 14:04 quick-sweep.xml
~$ cat services/quick-sweep.gnmap |grep open
Host: 10.0.10.1 ()      Ports: 22/closed/tcp//ssh///,
25/closed/tcp//smtp///, 53/open/tcp//domain///, 80/open/tcp//http///,
443/closed/tcp//https///, 445/closed/tcp//microsoft-ds///,
1433/closed/tcp//ms-sql-s///, 3306/closed/tcp//mysql///,
3389/closed/tcp//ms-wbt-server///, 5800/closed/tcp//vnc-http///,
5900/closed/tcp//vnc///, 8080/closed/tcp//http-proxy///,
8443/closed/tcp//https-alt///
Host: 10.0.10.27 ()     Ports: 22/open/tcp//ssh///, 25/closed/tcp//smtp///, 
53/closed/tcp//domain///, 80/closed/tcp//
Of course, it’s worth noting that this output isn’t very useful if you don’t know what
service is typically running on a given port. Don’t worry about memorizing all of these
ports; the more time you spend doing these types of engagements, the more ports and
services you will commit to your mental vault. For now, table 3.1 provides a quick ref-
erence for the ports used in this command. Again, I chose these because I often
encounter and attack them during engagements. You could easily specify your own list
or simply use the --top-ports nmap flag as an alternative. 
Listing 3.3
Checking the gnmap file for open ports
Table 3.1
Commonly used network ports
Port
Type
22 
Secure Shell (SSH)
25
Simple Mail Transfer Protocol (SMTP)
53 
Domain name service (DNS)
80 
Unencrypted web server (HTTP)
47
Port scanning with Nmap
It’s also important to point out that a port being open isn’t a guarantee that the ser-
vice typically associated with that port is the one listening on your target host. For
example, SSH is usually listening on port 22, but you could just as easily configure it to
listen on port 23 or 89 or 13,982. The next scan will go beyond simply querying for lis-
tening ports: Nmap will send network probes that attempt to fingerprint the specific
service that is listening on the identified open port.
DEFINITION
Fingerprinting is just a fancy way of saying you’re identifying the
exact software and version of a service listening on an open port.
3.2.2
Scanning all 65,536 TCP ports
Now that you have some targets to go after, you’ll want to run an exhaustive scan that
checks for the presence of all 65,536 network ports and performs service name and ver-
sion enumeration on whatever services are identified. This command will likely take a
long time on a large enterprise network, which again is the reason you first run the
shorter command so you have some targets to manually poke and prod while you wait.
TIP
With any task that might end up taking longer than is desirable, it’s a
good practice to use a tmux session. This way, you can background the pro-
cess and walk away from it if you need to. As long as you don’t reboot your
machine, it will run until it’s finished. This is helpful when you prefer not to
have dozens of miscellaneous terminal windows open at a time. If you aren’t
familiar with using tmux, there is a quick primer in appendix A.
Here is the command for a full TCP port scan followed in listing 3.4 by a snippet of
the output produced against my target network:
nmap -Pn -n -iL hosts/targets.txt -p 0-65535 -sV -A -oA services/full-sweep
➥ --min-rate 50000 --min-hostgroup 22  
443 
SSL/TLS encrypted web server (HTTPS)
445 
Microsoft CIFS/SMB
1433 
Microsoft SQL server
3306 
MySQL server
3389 
Microsoft remote desktop
5800 
Java VNC server
5900 
VNC server
8080  
Misc. web server port
8443 
Misc. web server port
Table 3.1
Commonly used network ports (continued)
Port
Type
48
CHAPTER 3
Discovering network services
This scan introduces a couple of new flags, including -sV and -A, which I will explain
in a moment.
nmap scan report for 10.0.10.160
Host is up (0.00012s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux;
 protocol 2.0)    
| ssh-hostkey:    
|   2048 9b:54:3e:32:3f:ba:a2:dc:cd:64:61:3b:d3:84:ed:a6 (RSA)
|   256 2d:c0:2e:02:67:7b:b0:1c:55:72:df:8c:38:b4:d0:bd (ECDSA)
|_  256 10:80:0d:19:3f:ba:98:67:f0:03:40:82:43:82:bb:3c (ED25519)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
Post-scan script results:
| clock-skew:
|   -1h00m48s:
|     10.0.10.200
|     10.0.10.202
|     10.0.10.207
|_    10.0.10.205
Service detection performed. Please report any incorrect results 
at https://nmap.org/submit/ .
nmap done: 22 IP addresses (22 hosts up) scanned in 1139.86 seconds
As you can see, this port scan took almost 20 minutes to complete targeting a small
network with only 22 hosts. But you should also notice that a lot more information is
returned. Also, this command uses two new flags:
-sV: Probe open ports to determine service/version info
-A: Enable OS detection, version detection, script scanning, and traceroute
The first flag tells Nmap to issue service probes that attempt to fingerprint listening
services and identify whatever information the service is broadcasting. Using the pro-
vided output as an example, if the -sV flag had been omitted, you simply would have
seen that port 22 was open and nothing more. But with the help of service probes, you
now know that port 22 is open and is running OpenSSH 7.6p1 Ubuntu 4ubuntu0.3
(Ubuntu Linux; protocol 2.0). This is obviously much more useful to us as attack-
ers trying to learn valuable intel about our target environment.
 The second new flag introduced with this command is -A. This tells Nmap to run a
series of additional checks that attempt to further enumerate the target’s operating
system as well as enable script scanning. NSE (Nmap Scripting Engine) scripts are dis-
cussed in appendix B. When the -A flag is enabled and nmap detects a service, it then
initiates a series of NSE script scans associated with that particular service, to gain fur-
ther information.
Listing 3.4
Nmap scanning all ports with service probes and script scanning
Additional service-banner
information is displayed.
The NSE script provides additional
information about the specific SSH service.
49
Port scanning with Nmap
3.2.3
Sorting through NSE script output
Take a closer look at what happens when you include the -A flag. Because Nmap iden-
tified the SSH service listening on port 22, it automatically kicked off the ssh-hostkey
NSE script. If you’re able to read the Lua programing language, you can see exactly what
this script is doing by opening the /usr/share/local/nmap/scripts/ssh-hostkey.nse file
on your Ubuntu pentest platform. However, what this script is doing should be pretty
obvious from looking at the output from your nmap scan. Here it is again.
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; 
protocol 2.0)
| ssh-hostkey:
|   2048 9b:54:3e:32:3f:ba:a2:dc:cd:64:61:3b:d3:84:ed:a6 (RSA)
|   256 2d:c0:2e:02:67:7b:b0:1c:55:72:df:8c:38:b4:d0:bd (ECDSA)
|_  256 10:80:0d:19:3f:ba:98:67:f0:03:40:82:43:82:bb:3c (ED25519)
Essentially, this script is just returning the target SSH server’s key fingerprint, which is
used to identify an SSH host and ensure that a user is connecting to the server they
intend to. Typically, this information is stored in the ~/.known_hosts file—that is, if
you have initiated an SSH session with this host before. The NSE script output is
stored in the .nmap file, not the .gnmap file that has been our primary focus up until
this point. Sorting through this output isn’t as efficient as it could be using only cat
and grep. This is because NSE scripts are a community effort created by various indi-
viduals, so naming conventions and spacing aren’t 100% consistent. I’ll offer a few tips
that can help you make your way through large scan outputs and make sure you don’t
miss something juicy.
 The first thing I do is figure out which NSE scripts have run. Nmap determines this
automatically for us based on which open ports it discovered and which service was lis-
tening on that port. The easiest way to do this is to cat out the .nmap file and grep for
the string “|_”: a Linux pipe followed by an underscore. Not every NSE script name
begins with this string of characters, but most of them do. That means you can use this
Listing 3.5
Output from ssh-hostkey NSE script
Scanning large network ranges
When your scope contains more than a few hundred IP addresses, you might want to
consider taking a slightly different approach than outlined in listing 3.4. Sending
65,000+ probes to hundreds or thousands of systems can take a really long time,
not to mention all the extra probes sent with the -sV and -A options.
Instead, for large networks, I prefer to use a simple -sT connect scan for all 65k
ports with no service discovery or NSE scripting. This lets me know what ports are
open but not what is listening on them. Once that scan is complete, I run the scan
listed in listing 3.4 but replace -p 0-65535 with a comma-separated list of open
ports: for example, -p 22,80,443,3389,10000 ....
50
CHAPTER 3
Discovering network services
strange-looking command to quickly identify what scripts were executed. By the way,
I’m running this command from the ~/capsulecorp/discovery directory. The com-
mand uses cat to display the contents of the full-sweep.nmap file. (1) That output is
piped into grep, which is searching for lines containing |_, (2) which signals an NSE
script and then a couple of different pipes to the cut command to grab the right field,
(3) which displays the name of the NSE script that was run. All together, the com-
mand looks like this:
cat services/full-sweep.nmap |grep '|_' | cut -d '_' -f2 | cut -d ' ' -f1
➥ | sort -u | grep ':'
The following listing shows the output for my target environment. Yours will look sim-
ilar but different depending on what services Nmap identified.
ajp-methods:
clock-skew:
http-favicon:
http-open-proxy:
http-server-header:
https-redirect:
http-title:
nbstat:
p2p-conficker:
smb-os-discovery:
ssl-cert:
ssl-date:
sslv2:
tls-alpn:
tls-nextprotoneg:
vnc-info:
Now you at least have an idea which NSE scripts ran during the port scan. From here,
I’m sorry to report that it’s a somewhat manual effort to sort through the .nmap file. I
recommend opening it in a text editor such as vim and using the search function for
the various script headings you identified. I do this because the number of lines of
output varies from script to script, so trying to use grep to extract the useful informa-
tion is challenging. You will, however, grow to learn which scripts are useful with grep
and eventually become adept at quickly digesting this information. 
 For example, the http-title script is a short and sweet one-liner that can sometimes
help point you in the direction of a potentially vulnerable web server. Once again, use
cat to list the contents of the full-sweep.nmap file and grep -i http-title to see all
the web server banners that nmap was able to identify. This is a fast and easy way to get
some lay-of-the-land insight into what kind of HTTP technologies are in use. The full
command is cat full-sweep.nmap | grep -i http-title, and the next listing shows
the output from my target environment. Yours will look similar but different depend-
ing on what services Nmap identified.
Listing 3.6
Identify which NSE scripts have executed
51
Port scanning with Nmap
|_http-title: Welcome to AmpliFi
|_http-title: Did not follow redirect to https://10.0.10.95/
|_http-title: Site doesn't have a title (text/html).
|_http-title: Site doesn't have a title (text/xml).
|_http-title: Welcome to AmpliFi
|_http-title: Welcome to AmpliFi
| http-title: BookStack
|_http-title: Service Unavailable
|_http-title: Not Found
|_http-title: Not Found
|_http-title: Not Found
|_http-title: Not Found
|_http-title: 403 - Forbidden: Access is denied.
|_http-title: Not Found
|_http-title: Not Found
|_http-title: Site doesn't have a title (text/html;charset=utf-8).
| http-title: Welcome to XAMPP
| http-title: Welcome to XAMPP
|_http-title: Not Found
|_http-title: Apache Tomcat/7.0.92
|_http-title: Not Found
|_http-title: TightVNC desktop [workstation01k]
|_http-title:  [workstation02y] 
|_http-title: 403 - Forbidden: Access is denied.
|_http-title: IIS Windows Server
|_http-title: Not Found
|_http-title: Not Found
|_http-title: Site doesn't have a title (text/html).
|_http-title: Site doesn't have a title (text/html).
|_http-title: Site doesn't have a title (text/html).
You’re probably starting to notice the potential limitations of manually sorting through
these large file outputs, even when using grep and cut to trim down the results. You’re
absolutely right if you’re thinking that when conducting a real pentest against an enter-
prise network, sorting through all that data using this method would be a cumber-
some task.
 Fortunately, like all good security tools, Nmap produces XML output. XML (Exten-
sible Markup Language) is a powerful format for storing relational information about
a list of similar but different objects in a single ASCII file. With XML, you can break the
results of your scan into high-level nodes called hosts. Each host possesses sub-nodes or
child nodes called ports or services. Those child nodes can potentially have their own child
nodes in the form of NSE script output. Nodes can also have attributes; for example, a
port/service node might have attributes named port_number, service_name, service
_version, and so on. Here is an example of what a host node might look like using the
format that Nmap stores in the .xml scan file.
Listing 3.7
NSE script output for http-title
52
CHAPTER 3
Discovering network services
Here you can see the typical structure of an XML node. The top-level host contains a
child node called address, which has two attributes storing its IPv4 address. Addition-
ally, it contains two child ports, each with its own service information. 
3.3
Parsing XML output with Ruby
I’ve written a simple Ruby script to parse Nmap’s XML and print out all the useful
information on a single line. You can grab a copy of the code from my public GitHub
page https://github.com/R3dy/parsenmap. I recommend creating a separate direc-
tory to store scripts you pull down from GitHub. If you find yourself conducting regu-
lar pentests, you will likely build up a large collection of scripts that can be easier to
manage from a centralized location. Check out the code, and then run the bundle