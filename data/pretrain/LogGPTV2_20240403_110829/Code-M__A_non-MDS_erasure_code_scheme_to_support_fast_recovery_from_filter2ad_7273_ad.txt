liD complexity 
elements. 
in each of the two failed disks, the decoding 
is also to access L * (3C -1) / (S * (C -1)) 
are in two different 
strip­
to Figure 
is two. According 
two strips 
or 2C elements, 
should be read and 2C elements 
Therefore, 
to recover L / (S * (C -1)) lost 
in each of the two failed disks, the decoding 
is to access L* (3C2 -C + l)/(S * C * (C -1)) 
liD 
strips 
distance 
4, to recover 
(C -1) + 1 elements 
Case III: The two failed 
sets where the strip-set 
9 and Algorithm 
3 * C * 
should be written. 
elements 
complexity 
elements. 
strips 
distance 
to Figure 10, to recover 
(C - 1) elements 
Case IV: The two failed 
sets where the strip-set 
cording 
4 * C * 
should be written. 
lost elements 
liD complexity 
Therefore, 
are in two different 
is no less than three. Ac­
two strips 
or 2C elements, 
strip­
should be read and 2C elements 
to recover L/(S * (C -1)) 
in each of the two failed disks, the decoding 
is L * (4C -2)/(S * (C -1)) elements. 
4.4 Comparisons between Code-M and 
RDP 
anyone element [5]. To recover 
Based on the above analysis, 
we next compare the re­
of Code-M with RDP. In an array of 
covery performance 
n disks encoded using RDP, n - 3 XOR operations 
are re­
quired to recover 
strip or n - 2 elements 
coding computational 
and the decoding 
erations, 
elements 
accessed. 
elements 
under double 
tional 
the decoding 
liD complexity 
strips 
the de­
is n2 -5n + 6 XOR op­
two failed 
disk failures, 
is n2 -3n + 2 
or 2 * (n -2) 
under double disk failures, 
is n2 -2n elements 
liD complexity 
complexity 
complexity 
the decoding 
To recover 
is 2n2 -lOn + 12 XOR operations, 
one failed 
computa­
and 
accessed. 
We compare Code-M with RDP under three different 
same number of total disks (used for both data 
scenarios: 
and parity), 
each scenario, 
M(S,C) and RDP are described 
in Figure 11. 
the required 
same rate, and same capacity 
for data. For 
numbers of total disks of Code­
with Equations 
4, 5, and 6 
computational 
complexity 
2) and the liD complexity 
ofRDP is 2(S*C-3)L/(S*C-
ofRDP is S * C * 
Figure 12 shows how Code-M performs 
L/(S* C -2). 
under various 
outperforms 
RDP and it can speed up 
compared to RDP using 12, 20, 24, and 30 
We notice that under single disk failure, 
by a factor up to 5.18. Under double disk fail­
configurations 
disks,  respectively. 
Code-M consistently 
the recovery 
ures, Code-M outperforms 
S == 3, and the speedup of recovery 
In the case of S == 3, Code-M is slightly worse than RDP 
(e.g.:  1.002 
the data needs to be accessed 
failures. 
vs. 1) and the reason is that in this case,  all 
RDP in nearly all cases except 
from double disk 
is up to a factor of 2.8. 
to recover 
4.4.2 Comparisons with Same Rates 
one failed 
Code-M and RDP under same rates. 
5, to recover 
disk, the compu­
ofRDP is (2C -3) * L/(2C -2) and 
ofRDP is (2C - 1) * L/(2C -2). To 
double failed disks, the computational 
of 
Next we evaluate 
Based on Equation 
tational 
complexity 
the liD complexity 
recover 
ofRDP is (2C -3) * L/(C -1) and the liD complexity 
RDP is C * L/(C -1). 
complexity 
Figure 13 shows how Code-M performs 
under various 
to RDP with the same rates (50%, 
and 90%, respectively). 
It is clear that under all con­
to RDP, Code-M consistently 
speeds 
and double 
under both single disk failure 
2010 IEEEIIFIP 
International 
Conference 
on Dependable Systems 
(DSN) 
& Networks 
n == S * C 
(4) 
(n-2)/n==(C-l)/C=}n==2C  (5) 
(C -1) + 2 (6) 
(C -1) =} n == S * 
n - 2 == S * 
between the num­
Figure 11. Relationships 
ber of disks n in RDP and (5, C) in Code-M 
for different 
same number of total disks, Equation 
the same rate, and Equation 
capacity. 
4 is for the 
5 for 
6 for the same 
scenarios. 
Equation 
In our comparisons, 
we evaluate 
the reconstruction 
times 
same liD bandwidth 
for 
For each scenario, 
under different 
of both RDP and Code-M utilizing 
reconstruction 
we consider 
ures below, RDP is used as the baseline, 
sults given as ratios with respect 
mance. 
both single and double disk failures. 
In all fig­
with Code-M re­
to RDP recovery 
scenarios. 
perfor­
compared 
configurations 
83.3%, 
figurations, 
up the recovery 
disk failures. 
compared 
4.4.3 Comparisons with Same Capacity 
4.4.1 Comparisons with Same Disks 
Code-M and RDP in arrays consisting 
4, to recover 
First we evaluate 
same number of total disks. 
Using Equation 
one failed disk, the computational 
(S* C -3)L/(S* 
(S*C-l)L/(S*C-2). 
To recover 
complexity 
C -2) and the liD complexity 
of RDP is 
ofRDP is 
the 
double failed disks, 
of 
we evaluate 
Based on Equation 
Code-M and RDP under same capacity 
Finally, 
(disk space for data elements). 
cover one failed disk, 
is (S * C - S -1) * L/(S * C -S) and the liD complexity 
ofRDP is (S * C - S + 
double disk failures, 
is 2(S * C -S -1) * L/(S * C -S) and the liD complexity 
l)L/(S * C -S). To recover 
from 
complexity 
of RDP 
6, to re­
complexity 
of RDP 
the computational 
the computational 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
58 
DSN 2010: Wan et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:14:18 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable Systems 
(DSN) 
& Networks 
Reconstruction 
Time Ratio 
vs. 12-disk 
RDP vs. 20-disk 
RDP  vs. 24-disk 
RDP 
VS. 30-disk 
RDP 
1.200 
1.000 
Figure 12. Comparisons 
of the recovery 
times between Code-M and RDP with same number of disks. 
Reconstruction 
Time Ratio 
VS. 12-disk RDP  vS.20-disk 
RDP 
vs. 4-disk 
RDP 
1.200 ---------+-------t---
1.000 1--------- -+------ -+ --;::::;-
0.800 1--1'"""1--------+-------+--1 
0.600 
0.400 
0.200 
0.000 
Reconstruction 
Time Ratio 
_ vs_.2_0-_d_iSk_R_DP __ 
1.200  _ .::.:vS.1:::.4.:.:::.d·:!:lSk:..::R:::::DP_
1.000 1-------- +- -------
-+  __
• Single 
Failure 0.667 
• Double Failures 0.833 
Figure 13. Recovery times of Code-M and 
RDP with same rate. 
Figure 14. Recovery times of Code-M and 
RDP with same capacity. 
C -S). 
efficient 
disk recovery 
ofRDP is (S * C - S + 2)L/(S * 
Figure 14 shows how Code-M performs 
under various 
compared to RDP with the same capacity 
is 12 and 18 disks, respectively).  To achieve 
achieve 
M is lowest density 
2C - 1 for a given number of columns in  a strip-set 
The rate of Code-M, or percentage 
of disk space occupied 
Code-M needs 16 total disks and RDP 
by non-parity 
time of Code-M is 53.8% of 
tailed 
and 79% under double disk 
urations 
18 disk data capacity, 
Code­
all cases against 
to ours in its parity layout. 
configurations 
(data capacity 
12 disk data capacity, 
uses 14 disks. The recovery 
RDP under single disk failure 
failures. 
M uses 24 disks while RDP uses 20 disks. The recovery 
time of Code-M is 36.8% of RDP under single disk failure 
and 58% under double disk failures. 
data, is (C -l)/C. We have performed 
config­
de­
of Code-M under various 
and found it to reduce reconstruction 
at a small rate cost. Code­
and its parity chain length is fixed at 
C. 
time in almost 
that is similar 
RDP, a well-established code 
theoretical 
Similarly, 
to achieve 
analysis 
aspects 
For future work, we plan to do hardware-based 
tests, 
Code-M with other non-MDS codes to further 
comparing 
verify the computational 
investigating 
how to possibly 
scheme to tolerate 
all, we found Code-M to be a fast implementation 
RAID-6 type code, supporting 
duced computational 
fast recovery 
and I/O complexity. 
more than two concurrent 
coding 
Over­
of Code-M. We are also 
implement 
failures. 
and having re­
a similar 
of a 
5 Conclusions 
and Future Work 
We have presented 
a novel coding scheme to tolerate 
up to double disk failures, 
the RAID-6 property. 
Our code, Code-M, is a non-MDS RAID-6 construction 
satisfying 
to 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
59 
DSN 2010: Wan et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:14:18 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable Systems 
(DSN) 
& Networks 
Acknowledgment 
[12] C.-I. Park. Efficient placement of parity and data to toler­
We would like to thank our shepherd, 
Jay Wylie, and the 
reviewers 
for their helpful 
comments in review­
by the National 
anonymous 
ing this paper. This work is supported 
ural Science Foundation 
Natural 863 Plan under the Grant No. 2009AAOI A402, 
innovative 
Foundation 
CNS-On0617. 
Science 
fund of WNLO, and the U.S. National 
(NSF) under Grant No. CCF-00937799 
and No. 
of China (Grant No. 60933002), 
Nat­
References 
[1] M. Blaum, J. Brady, J. Bruck, and J. Menon. EVEN­
ODD: An efficient scheme for tolerating 
ures in raid architectures. 
IEEE Transactions 
44(2): 192-202, February 1995. 
double disk fail­
On Computers, 
[2] M. Blaum and R. M. Roth. On lowest density MDS codes. 
IEEE Transactions on Information T heory, 45(1):46-59, 
January 1999. 
[3] J. Blomer, M. Ka1fane, R. Karp, M. Karpinski, 
M. Luby, 
and D. Zuckerman. An XOR-based erasure-resilient 
coding 
scheme. Technical Report TR-95-048, International 
Com­
puter Science Institute, 
California, 
August 1995. 
Berkeley, 
[4] Y. Cassuto and J. Bruck. Cyclic lowest density MDS 
array codes. IEEE Transactions 
55(4):1721-1729, 
Apri12009. 
on Information T heory, 
[5] P. Corbett, B. English, A. Goe1, T. Grcanac, S. Kleiman, 
parity for double 
J. Leong, and S. Sankar. Row-diagonal 
disk failure correction. 
posium on File and Storage Technologies, 
Francisco, 
CA, March 2004. 
In FAST-2004: 3rd USENIX Sym­
pages 1-14, San 
[6] R. G. Gallager. Low-density  parity-check 
codes, mono­
graph, m.i.t press, 1963. 
ate two disk failures 
tions on Parallel and Distributed 
November 1995. 
in disk array systems. IEEE Transac­
Systems, 6(11): 1177-1184, 
[13] D. A. Patterson, 
G. Gibson, and R. H. Katz. A case for 
disks (RAID). In Proceed­
redundant arrays of inexpensive 
ings of the 1988 ACM SIGMOD international 
Chicago, Illinois, 
USA, June 1988. 
conference, 
[14] J. S. Plank. A new minimum density raid-6 code with a word 
Sympo­
Cambridge, MA, 
size of eight. In NCA-2008: 7th IEEE International 
sium on Network Computing Applications, 
July 2008. 
[15] J. S. Plank. The RAID-6 liberation 
codes. In FAST-2008: 
6th USENIX Conference 
pages 97-110, San Jose, February 2008. 
on File and Storage Technologies, 
[16] J. S. Plank, A. L. Buchsbaum, R. L. Collins, and M.  G. 
Thomason. Small parity-check 
and observations. 
Con­
ference on Dependable Systems and Networks, pages 326-
335, Yokohama, Japan, 2005. IEEE. 
In DSN-2005: the 35th International 
erasure codes -exploration 
[17] J. S. Plank, L. Xu, J. Luo, C. D. Schuman, and Z. Wilcox­
of 
for storage. In FAST-
on File and Stor­
O'Hearn. A performance  evaluation 
open-source 
2009: the 7th USENIX  Conference 
age Technologies, 
2009. 
pages 253-265, San Francisco, 
erasure coding libraries 
and examination 
February 
[18] I. S. Reed and G. Solomon. Polynomial codes over certain 
and Applied 
finite fields. Journal of the Society for Industrial 
Mathematics, 
[19] M. Sivathanu, 
June 1960. 
8:300--304, 
V. Prabhakaran, 
A. C. Arpaci-Dusseau, 
and 
R. H. Arpaci-Dusseau. 
ity with d-graid. ACM Transactions 
170, May 2005. 
Improving storage system availabil­
on Storage, 1(2): 133-
[20] L. Tian, D. Feng, H. Jiang, K. Zhou, L. Zeng, J. Chen, 
Z. Wang, and Z. Song. PRO: A popularity-based 
multi­
threaded reconstruction 
storage systems. In FAST-2007: 5th USENIX Conference 
pages 277-290, February 
on File and Storage Technologies, 
2007. 
optimization 
for raid-structured 
[21] S. Wu, D. Feng, H. Jiang, B. Mao, and J. Chen. JOR: 
reconstruction 
optimization 
for RAID­
A journal-guided 
structured 
the Fifteenth International 
tributed 
on Parallel 
Systems, Shenzhen, China, December 2009. 
Conference 
of 
and Dis­
storage systems. In ICPADS-2009:Proceedings 
[22] S. Wu, H. Jiang, D. Feng, L. Tian, and B. Mao. Work­
Out: Vo workload outsourcing 
struction 
ference on File and Storage Technologies, 
February 2009. 
performance. 
In FAST-2009: 7th USENIX Con­
for boosting RAID recon­
San Francisco, 
[23] J. Wylie  and R. Swaminathan. 
Determining 
fault tolerance 
of XOR-based erasure codes efficiently. 
37th International 
Networks, pages 206-215, Edinburgh, 
IEEE. 
Conference 
In DSN-2007: the 
on Dependable Systems and 
Scotland, 
June 2007. 
[24] L. Xu and J. Bruck. X-Code: MDS array codes with opti­
on Information T heory, 
mal encoding. IEEE Transactions 
45(1):272-276, 
January 1999. 
[7] J. L. Hafner. WE AV ER codes: Highly fault tolerant  erasure 
codes for storage systems. In FAST-2005: 4th USENIX Con­
ference on File and Storage Technologies, 
San Francisco, 
December 2005. 
pages 211-224, 
[8] J. L. Hafner. HoVer erasure codes for disk arrays. In In 
Conference on Depend­
DSN-2006: the 36th International 
able Systems and Networks, pages 217-226, Philadelphia, 
PA, June 2006. 
[9] M. Holland and G. A. Gibson. Parity declustering 
for contin­
in redundant disk arrays. In ASPLOS-2005: 
uous operation 
Proceedings of the 5th Conference 
for Programming Languages and Operating Systems, pages 
23-35, Boston, Massachusetts, 
USA, October 1992. 
on Architectural 
Support 
[10] C. Huang, M. Chen, and J. Li. Pyramid codes: Flexible 
schemes to trade space for access efficiency in reliable 
storage systems. In NCA-2007: the 6th IEEE International 
pages 
Symposium on Network Computing and Applications, 
79-86, Cambridge, MA, July 2007. 
data 
[11] C. Jin, H. Jiang, D. Feng, and L. Tian. P-code: A new RAID-
6 code with optimal properties. 
of the 23rd International 
pages 360-369, Yorktown Heights, NY, USA, June 2009. 
In ICS-2009: Proceedings 
Conference on Supercomputing, 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
60 
DSN 2010: Wan et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:14:18 UTC from IEEE Xplore.  Restrictions apply.