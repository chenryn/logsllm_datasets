.nf
$\fBpsql testdb\fR
Welcome to psql 7.4beta5, the PostgreSQL interactive terminal.
Type: \\copyright for distribution terms
      \\h for help with SQL commands
      \\? for help on internal slash commands
      \\g or terminate with semicolon to execute query
      \\q to quit
testdb=>
.sp
.fi
.PP
 用户可以在这个提示符下键入SQL 查询。 通常，输入的行将在命令终止分号出现时送到服务器。 一行的终止并不结束命令！因此命令可以因清晰起见跨越好几行。如果命令发送出去而且没有错误， 命令结果会显示在屏幕上。
.PP
 当命令正在进行时，psql 同样还轮询由 LISTEN [\fBlisten\fR(7)] 和 NOTIFY [\fBnotify\fR(7)] 生成的异步通知信号。
.SS "META-COMMANDS 元命令"
.PP
 你在 psql 里输入的任何以不带引号的反斜杠（'\\'）开头的东西都是 psql 元命令，这些命令是由 psql 自己处理的。这些命令也是令 psql 可用于管理或书写脚本的原因。 元命令更常见的叫法是斜杠或反斜杠命令。
.PP
 一个 psql 命令的格式是反斜杠后面紧跟一个命令动词，然后是任意参数。 参数与命令动词和其他参数以任意个空白字符间隔。
.PP
 要在参数里面包含空白，你必须用单引号把它包围起来。 要在这样的参数里包含单引号，前面加一个反斜杠。 任何包含在单引号里的东西会被进一步进行类 C 的替换，把
\\n (new line),\\t (tab),
\\\fIdigits\fR,
\\0\fIdigits\fR, 和
\\0x\fIdigits\fR 
（给出的十进制，八进制，或十六进制码的字符）替换掉。
.PP
 如果一个不带引号的参数以冒号（:）开头， 它会被当作一个psql 变量，并且该变量的值会最终成为真正的参数值。 （译注：类似 ecpg 和 pl/pgsql 的变量用法。）
.PP
 用反引号 （"backticks" `） 包围的内容被当作一个命令行传入 shell。 该命令的输出（删除了结尾的新行）被当作参数值。上面描述的逃逸（字符）序列在反引号里也生效。
.PP
 有些命令以一个 SQL 标识的名称（如，一个表名）为参数。 这些参数遵循 SQL 语法关于双引号的规则： 不带双引号的标识强制成小写， 而双引号保护字母不受大小写转换，并且允许在标识符中使用空白。 在双引号中，成对的双引号在结果名字中分析成一个双引号。比如， FOO"BAR"BAZ 解析成 fooBARbaz，而 "A weird"" name" 变成 A weird" name。
name.
.PP
 对参数的分析在碰到另一个不带引号的反斜杠时停止。 这里会认为是一个新的元命令的开始。特殊序列 \\\\ （双反斜杠）标识参数的结尾并将继续分析后面的 SQL 命令（如果存在的话）。这样 SQL 和 psql命令可以自由的在一行里面混合。 但是在任何情况下，一条元命令的参数不能延续超过行尾。
.PP
 下列元命令是已定义的：
.TP
\fB\\a\fR
 如果目前的表输出格式是不对齐的，切换成对齐的。 如果是对齐的，切换成不对齐。这条命令是为了向后兼容。参阅\fB\\pset\fR 获取一个通用的解决方法。
.TP
\fB\\cd [\fIdirectory\fB]\fR
 把当前工作目录改变到 directory。 没有参数是则改变到当前用户的家目录。
.sp
.RS
.B "Tip:"
提示:  要打印出你的当前工作目录，使用\\!pwd.
.RE
.sp
.TP
\fB\\C [\fItitle\fB ]\fR
 把正在打印的表的标题设置为一个查询的结果或者取消这样的设置。 这条命令等效于
\\pset title\fItitle\fR. （这条命令的名称源于 "caption"，因为以前只是用于在一个 HTML 表里面设置标题。）
.TP
\fB\\connect (or\\c) [\fIdbname\fB [\fIusername\fB ] ]\fR
 与一个新的数据库建立一个联接，使用/不用一个用户名。 前面的联接将关闭。如果 dbname 是 -，那么就假设是当前数据库名称。
 如果省略 username，则假设是当前用户名。
 作为一条特殊规则，不带任何参数运行\fB\\connect\fR  将以缺省用户身份与缺省数据库连接（正如你不带任何参数运行 psql 一样。）
 如果联接失败（用户名错，访问拒绝等），那么将保留前面的联接--当且仅当在 psql 处于交互模式下如此。 如果运行的是非交互的脚本，处理会马上停止，并返回一个错误。 选择这样的区别是一方面为用户使用方便考虑，另一方面为保证脚本不会碰巧操作了错误的数据库的安全机制考虑的。
.TP
\fB\\copy\fItable\fB\fR
 执行前端（客户端）拷贝。这是一个运行 SQL  COPY 命令的操作， 不同的是 SQL COPY 是服务器在读写指明的文件，而 psql 读写文件并作为本地的文件系统和服务器之间的路由取出或写入数据。 这意味着文件访问性和权限都是本地用户的，而不是服务器的，因此不需要 SQL 超级用户权限。
 这条命令的语法是模拟 SQL COPY 命令的。（参考它的描述获取细节。） 要注意的是由此而来，有一些特殊的分析规则应用于\fB\\copy\fR 命令。 尤其是变量替换规则和反斜杠代换规则不起作用。
.sp
.RS
.B "Tip:"
提示:  此操作不象 SQL COPY 命令这样高效， 因为所有数据必须通过客户端/服务器联接。对于大数据量的操作，另一种方法更可行。
.RE
.sp
.sp
.RS
.B "Note:"
注意:  注意在客户端和服务器拷贝时对 stdin 和 stdout  的解释的区别：在前端拷贝时，这些总是指 psql的输入和输出流。在服务器拷贝时 stdin 来自 COPY 本身的标准输入（比如，一个带有 -f 选项的脚本）， 而 stdout 指的是查询输出流（参阅下面的\fB\\o\fR 元命令）。
.RE
.sp
.TP
\fB\\copyright\fR
 显示 PostgreSQL 的版权和版本信息。
.TP
\fB\\d [\fIpattern\fB ]\fR
 对于每个匹配pattern的关系（表，视图，索引或者序列）， 显示所有列，它们的类型，和任何特殊属性，象NOT NULL或缺省等－－只要存在。 如果实际上这个关系是一个表，任何已定义的索引，主键，唯一约束相关的索引，规则，约束，和触发器也同样显示出来， 如果关系是一个视图，还显示视图的定义。 （"匹配模式"在下面定义。）
从\\d+ 来的命令也是一样的，只不过还显示与表的列关联的注解。
.sp
.RS
.B "Note:"
注意:  如果如果不带任何pattern调用\fB\\d\fR ， 等效于\fB\\dtvs\fR，将显示一个所有表，视图和序列的列表。 这完全是出于方便的考虑。
.RE
.sp
.TP
\fB\\da [\fIpattern\fB ]\fR
 列出所有可用聚集函数，以及它们操作的数据类型。如果声明了 pattern，那么只显示匹配（正则表达式）的聚集函数。
.TP
\fB\\dc [\fIpattern\fB ]\fR
 列出所有字符集之间的可用转换。如果声明了 pattern， 则只列出那些匹配模式的转换。
.TP
\fB\\dC\fR
 列出所有类型转换。
.TP
\fB\\dd [\fIpattern\fB ]\fR
 显示所有匹配 pattern  的描述，如果没有给出参数，显示所有可视对象。 但是不管怎样，只有那些有描述内容的对象才显示出来。 （"对象"包括聚集，函数，操作符，类型， 关系（表，视图，索引，序列，大对象），规则和触发器。）例如：
.sp
.nf
=>\fB\\dd version\fR
                     Object descriptions
   Schema   |  Name   |  Object  |        Description
------------+---------+----------+---------------------------
 pg_catalog | version | function | PostgreSQL version string
(1 row)
.sp
.fi
 可以用\fBCOMMENT  SQL\fR 命令生成对对象的描述。
.TP
\fB\\dD [\fIpattern\fB ]\fR
 列出所有可用域。如果声明了 pattern，那么只显示匹配的域。
.TP
\fB\\df [\fIpattern\fB ]\fR
 列出所有可用函数，以及它们的参数和返回的数据类型。如果声明了 pattern，那么只显示匹配（正则表达式）的函数。如果使用了\\df+ 的形式，每个函数的附加信息，包括语言和描述也会显示出来。
.sp
.RS
.B "Note:"
注意:  为了减少混乱，\\df 并不显示数据类型的 I/O 函数。 这样是通过忽略那些接受或者返回类型 cstring 的函数实现的。
.RE
.sp
.TP
\fB\\distvS [\fIpattern\fB ]\fR
 这不是一个实际上的命令名称：字母 i，s，t，v，S 分别代表索引（index）， 序列（sequence），表（table），视图（view）和系统表（system table）。 你可以以任意顺序声明任意或者所有这些字母获得这些对象的一个列表。 字幕 S 把列表限制于系统对象；如果没有 S，则只显示非系统对象。 如果在命令名上附加了 +，那么还会列出和每个对象相关联的描述，如果有的话。
 如果声明了 pattern，那么只列出匹配模式的对象。
.TP
\fB\\dl\fR
这是\fB\\lo_list\fR 的别名，显示一个大对象的列表。
.TP
\fB\\dn [\fIpattern\fB ]\fR
 列出所有可用模式（名字空间）。如果声明了 pattern  （一个正则表达式），那么只列出匹配模式的模式名。
.TP
\fB\\do [\fIpattern\fB ]\fR
 列出所有可用操作符，以及它们的操作数和返回的数据类型。 如果声明了 pattern，那么只显示匹配模式的操作符。
.TP
\fB\\dp [\fIpattern\fB ]\fR
 生成一列可用的表和它们相关的权限。 如果声明了 pattern， 那么只列出名字可以匹配模式的表。
 命令\fBgrant\fR(7) 和\fBrevoke\fR(7) 用于设置访问权限。参阅\fBgrant\fR(7) 获取更多信息。
.TP
\fB\\dT [\fIpattern\fB ]\fR
 列出所有数据类型或只显示那些匹配 pattern的。这条命令的\\dT+ 形式显示更多信息。
.TP
\fB\\du [\fIpattern\fB ]\fR
 列出所有已配置用户或者只列出那些匹配 pattern 的用户。
.TP
\fB\\edit (or\\e) [\fIfilename\fB ]\fR
如果声明了 filename， 则编辑此文件并且在编辑器退出后将其内容拷贝回查询缓
冲区。 如果没有给出参数，则把当前查询缓冲区内容拷贝到一个临时文件然后以相
同方式编辑。
然后根据一般的psql规则重新分析查询缓冲区， 这时整个缓冲区当作一个单行。
（因此你无法用这个方法制作\(lq脚本\(rq，用\fB\\i\fR 做脚本。） 这还意味着
如果该查询以分号结尾（或者包含分号），它就会马上被执行。否则它只是在查询
缓冲区里等待。
.sp
.RS
.B "Tip:"
提示:  psql 搜索环境变量 PSQL_EDITOR，EDITOR  和 VISUAL（以此顺序）查找要用到哪个编辑器。如果上面的都没有设置，使用\fI/bin/vi\fR。
.RE
.sp
.TP
\fB\\echo\fItext\fB [ ... ]\fR
 向标准输出打印参数，用一个空格分隔并且最后跟着一个新行。 这个特性在显示脚本的输出时会有用。例如：
.sp
.nf
=>\fB\\echo `date`\fR
Tue Oct 26 21:40:57 CEST 1999
.sp
.fi
 果第一个参数是一个无引号的 -n，那么不会写出结尾的新行。
.sp
.RS
.B "Tip:"
提示:  如果你使用\fB\\o\fR 命令重定向你的查询的输出，你可能会用\fB\\qecho\fR 取代这条命令。
.RE
.sp
.TP
\fB\\encoding [\fIencoding\fB ]\fR
 设置客户端字符编码方式。不带参数时，这条命令显示当前的编码方式。
.TP
\fB\\f [\fIstring\fB ]\fR
 为不对齐的查询输出设置域分隔符。缺省时是竖条（|）。 参阅\fB\\pset\fR 获取设置输出选项的通用方法。
.TP
\fB\\g [ {\fIfilename\fB | |\fIcommand\fB } ]\fR