### 4.3 Quality of Protocol Specification

To evaluate the quality of the protocol specifications inferred by Veritas, we used real-world network traces to test the Probabilistic Protocol State Machines (P-PSMs) that we inferred. The following experiments demonstrate that the P-PSMs we inferred are complete. Completeness is a measure of how well the protocol specifications can accept valid protocol sessions.

**SMTP:**
- **Data Collection:** Approximately 100,000 SMTP flows were captured from a backbone router.
- **Results:** The SMTP protocol state machine successfully parsed the state transitions for about 86% of the flows. The remaining flows may use encrypted transmission, which our system currently cannot handle due to its limitation in dealing with encrypted traffic.

**PPLIVE:**
- **Data Collection:** About 200,000 UDP flows of PPLIVE were captured from a server running a news channel on September 9th, 2009.
- **Results:** For PPLIVE flows, we were able to parse the state transitions of all flows successfully.

**XUNLEI:**
- **Data Collection:** Approximately 500,000 UDP flows of XUNLEI were obtained from a backbone router.
- **Results:** For XUNLEI flows, we successfully parsed the state transitions for about 90% of the flows. The parsed flows account for more than 99% of the XUNLEI protocol packets under analysis. Since our method is based on high probability sets, it is not sensitive to events with small probabilities.

From these experiment results, we can conclude that the probabilistic protocol state machines inferred by Veritas are of high quality. The system can be effectively used as an auxiliary tool for analyzing unknown behaviors in real-world applications.

### 4.4 Summary

Our technique for inferring protocol state machines is based on a statistical model and is sensitive to states that are statistically significant. While Veritas may not cover all paths of a protocol state machine, it is well-suited for analyzing critical paths, which is crucial for intrusion detection. Our experimental results show that our inference method has a high degree of accuracy in practice.

### 5 Conclusions and Future Work

Inferring protocol state machines from Internet traffic is a fundamental problem in network security, with numerous practical applications. In this paper, we presented Veritas, a system that automatically extracts protocol state machines for stateful network protocols from real-world network traces. The input to Veritas is the trace of a specific application, and the output is the protocol state machine with a probabilistic description. The process involves the following steps:
1. Extracting the real-world trace of a specific application from Internet traffic.
2. Analyzing each packet header to capture the protocol message format.
3. Using clustering algorithms to obtain protocol state messages.
4. Assigning a type to each packet in the flows based on the clusters.
5. Generating the probabilistic protocol state machine.

Our verification experiments show that Veritas is general and suitable for both text and binary protocols. The P-PSMs inferred by our system accurately reflect the actual applications.

**Future Work:**
- We plan to work on semantic inference with Veritas to better understand protocol specifications.
- Currently, Veritas can only handle the real-world network trace of a single application. In the future, we aim to extend its capabilities to multi-protocol environments.

### References

1. Lim, J., Reps, T., Liblit, B.: Extracting Output Formats from Executables. In: WCRE 2006: Proceedings of the 13th Working Conference on Reverse Engineering (2006)
2. Gringoli, F., Salgarelli, L., Dusi, M., Cascarano, N., Risso, F., Claﬀy, K.C.: GT: picking up the truth from the ground for internet traffic. In: SIGCOMM Comput. Commun. Rev. (2009)
3. Comparetti, P.M., Wondracek, G., Kruegel, C., Kirda, E.: Prospex: Protocol Specification Extraction. In: SP 2009: Proceedings of the 2009 30th IEEE Symposium on Security and Privacy (2009)
4. Leita, C., Mermoud, K., Dacier, M.: Scriptgen: an automated script generation tool for honeyd. In: Annual Computer Security Applications Conference (2005)
5. Caballero, J., Yin, H., Liang, Z., Song, D.: Polyglot: automatic extraction of protocol message format using dynamic binary analysis. In: CCS 2007: Proceedings of the 14th ACM conference on Computer and Communications Security (2007)
6. Cui, W., Kannan, J., Wang, H.J.: Discoverer: automatic protocol reverse engineering from network traces. In: SS 2007: Proceedings of 16th USENIX Security Symposium on USENIX Security Symposium (2007)
7. Haﬀner, P., Sen, S., Spatscheck, O., Wang, D.: ACAS: automated construction of application signatures. In: MineNet 2005: Proceedings of the 2005 ACM SIGCOMM workshop on Mining network data (2005)
8. Kannan, J., Jung, J., Paxson, V., Koksal, C.E.: Semi-automated discovery of application session structure. In: IMC 2006: Proceedings of the 6th ACM SIGCOMM conference on Internet measurement (2006)
9. Ma, J., Levchenko, K., Kreibich, C., Savage, S., Voelker, G.M.: Unexpected means of protocol inference. In: IMC 2006: Proceedings of the 6th ACM SIGCOMM conference on Internet measurement (2006)
10. Vidal, E., Thollard, F., de la Higuera, C., Casacuberta, F., Carrasco, R.C.: Probabilistic Finite-State Machines-Part I. IEEE Trans. Pattern Anal. Mach. Intell. (2005)
11. Kendall, M.G., Stuart, A., Ord, J.K.: Kendall’s advanced theory of statistics. Oxford University Press, Inc., Oxford (1987)
12. Kaufman, L., Rousseeuw, P.: Finding Groups in Data: An Introduction to Cluster Analysis. Wiley, Chichester (1990)
13. Jaccard, P.: The distribution of the flora in the alpine zone. The New Phytologist (1912)
14. Brumley, D., Caballero, J., Liang, Z., Newsome, J., Song, D.: Towards automatic discovery of deviations in binary implementations with applications to error detection and fingerprint generation. In: SS 2007: Proceedings of 16th USENIX Security Symposium on USENIX Security Symposium (2007)
15. Caballero, J., Venkataraman, S., Poosankam, P., Kang, M.G., Song, D., Blum, A.: FiG: Automatic Fingerprint Generation. In: Annual Network and Distributed System Security Symposium (2007)
16. Dreger, H., Feldmann, A., Mai, M., Paxson, V., Sommer, R.: Dynamic application-layer protocol analysis for network intrusion detection. In: USENIX-SS 2006: Proceedings of the 15th conference on USENIX Security Symposium (2006)
17. Borisov, N., Brumley, D.J., Wang, H.J.: A Generic Application-Level Protocol Analyzer and its Language. In: Network and Distributed System Security Symposium (2007)
18. Dunn, J.C.: Well separated clusters and optimal fuzzy-partitions. Journal of Cybernetics (1974)
19. Internet2 netflow statistics, http://netflow.internet2.edu
20. XUNLEI, http://www.xunlei.com/
21. PPLIVE, http://www.pptv.com/
22. How Samba Was Written, http://samba.org/ftp/tridge/misc/french_cafe.txt
23. Gaim Instant Messaging Client, http://gaim.sourceforge.net/