(cid:84)(cid:21)
(cid:11)(cid:19)(cid:12)
(cid:70)(cid:11)(cid:19)(cid:17)(cid:20)(cid:28)(cid:12)
(cid:68)(cid:11)(cid:19)(cid:17)(cid:20)(cid:27)(cid:12)
(cid:84)(cid:25)
(cid:11)(cid:19)(cid:12)
(cid:68)(cid:11)(cid:19)(cid:17)(cid:26)(cid:24)(cid:12)
(cid:75)(cid:11)(cid:19)(cid:17)(cid:19)(cid:19)(cid:24)(cid:12)
(cid:74)(cid:11)(cid:19)(cid:17)(cid:21)(cid:26)(cid:12)
(cid:73)(cid:11)(cid:19)(cid:17)(cid:21)(cid:20)(cid:12)
(cid:72)(cid:11)(cid:19)(cid:17)(cid:21)(cid:20)(cid:12)
(cid:74)(cid:11)(cid:19)(cid:17)(cid:23)(cid:21)(cid:12)
(cid:84)(cid:23)
(cid:11)(cid:19)(cid:12)
(cid:74)(cid:11)(cid:19)(cid:17)(cid:20)(cid:25)(cid:12)
(cid:73)(cid:11)(cid:19)(cid:17)(cid:23)(cid:23)(cid:12)
(cid:84)(cid:22)
(cid:11)(cid:19)(cid:12)
(cid:68)(cid:11)(cid:19)(cid:17)(cid:20)(cid:20)(cid:12)
(cid:69)(cid:11)(cid:19)(cid:17)(cid:20)(cid:22)(cid:12)
(cid:73)(cid:11)(cid:19)(cid:17)(cid:19)(cid:19)(cid:26)(cid:12)
(cid:70)(cid:11)(cid:19)(cid:17)(cid:21)(cid:20)(cid:12)
(cid:70)(cid:11)(cid:19)(cid:17)(cid:25)(cid:24)(cid:12)
(cid:75)(cid:11)(cid:19)(cid:17)(cid:19)(cid:19)(cid:26)(cid:12)
(cid:75)(cid:11)(cid:19)(cid:17)(cid:20)(cid:21)(cid:12)
(cid:73)(cid:11)(cid:19)(cid:17)(cid:20)(cid:27)(cid:12)
(cid:75)(cid:11)(cid:19)(cid:17)(cid:19)(cid:19)(cid:24)(cid:12)
(cid:75)(cid:11)(cid:19)(cid:17)(cid:21)(cid:20)(cid:12)
(cid:84)(cid:26)
(cid:11)(cid:19)(cid:12)
(cid:70)(cid:11)(cid:19)(cid:17)(cid:21)(cid:25)(cid:12)
(cid:71)(cid:11)(cid:19)(cid:17)(cid:19)(cid:24)(cid:12)
(cid:71)(cid:11)(cid:19)(cid:17)(cid:22)(cid:27)(cid:12)
(cid:74)(cid:11)(cid:19)(cid:17)(cid:19)(cid:28)(cid:12)
(cid:74)(cid:11)(cid:19)(cid:17)(cid:21)(cid:26)(cid:12)
(cid:84)(cid:27)
(cid:11)(cid:19)(cid:12)
(cid:71)(cid:11)(cid:19)(cid:17)(cid:22)(cid:27)(cid:12)
(cid:71)(cid:11)(cid:19)(cid:17)(cid:19)(cid:26)(cid:12)
(cid:75)(cid:11)(cid:19)(cid:17)(cid:22)(cid:23)(cid:12)
Fig. 7. Probabilistic protocol state machine of PPLIVE protocol
Table 2. XUNLEI Protocol State Messages
Sign
Protocol State Message
a
b
c
d
e
f
0x32 0x00 0x00 0x00 0x06 0x00 0x00
0x32 0x00 0x00 0x00 0x07
0x32 0x00 0x00 0x00 0x08
0x32 0x00 0x00 0x00 0x11
0x32 0x00 0x00 0x00 0x12
0x32 0x00 0x00 0x00 0x09
(cid:71)(cid:11)(cid:19)(cid:17)(cid:26)(cid:25)(cid:12)
(cid:84)(cid:21)
(cid:11)(cid:19)(cid:12)
(cid:71)(cid:11)(cid:19)(cid:17)(cid:20)(cid:22)(cid:12)
(cid:70)(cid:11)(cid:19)(cid:17)(cid:19)(cid:21)(cid:12)
(cid:71)(cid:11)(cid:19)(cid:17)(cid:19)(cid:20)(cid:21)(cid:12)
(cid:68)(cid:11)(cid:19)(cid:17)(cid:27)(cid:21)(cid:12)
(cid:84)(cid:19)
(cid:11)(cid:19)(cid:12)
(cid:68)(cid:11)(cid:20)(cid:12)
(cid:84)(cid:20)
(cid:11)(cid:19)(cid:12)
(cid:72)(cid:11)(cid:19)(cid:17)(cid:21)(cid:21)(cid:12) (cid:71)(cid:11)(cid:19)(cid:17)(cid:21)(cid:27)(cid:12)
(cid:72)(cid:11)(cid:19)(cid:17)(cid:22)(cid:25)(cid:12)
(cid:72)(cid:11)(cid:19)(cid:17)(cid:19)(cid:25)(cid:26)(cid:12)
(cid:84)(cid:22)
(cid:11)(cid:19)(cid:12)
(cid:72)(cid:11)(cid:19)(cid:17)(cid:25)(cid:28)(cid:12)
(cid:70)(cid:11)(cid:19)(cid:17)(cid:19)(cid:21)(cid:12)
(cid:69)(cid:11)(cid:19)(cid:17)(cid:20)(cid:20)(cid:12)
(cid:68)(cid:11)(cid:20)(cid:12)
(cid:70)(cid:11)(cid:19)(cid:17)(cid:24)(cid:20)(cid:12)
(cid:84)(cid:23)
(cid:11)(cid:19)(cid:12)
(cid:84)(cid:24)
(cid:11)(cid:19)(cid:12)
Fig. 8. Probabilistic protocol state machine of XUNLEI protocol
state type pairs correspond with f are of very small probability. As far as we
know, f is an old version of XUNLEI protocol state message. If we analyze ﬂows
correlated with f respectively, we will get a more comprehensive experiment
result, which we do not show here.
16
Y. Wang et al.
4.3 Quality of Protocol Speciﬁcation
In order to evaluate the quality of protocol speciﬁcation inferred by Veritas,
we make use of real-world network traces to test P-PSMs we inferred. In the
following experiments, we will demonstrate that the P-PSMs we inferred are
complete. Completeness is a measurement of protocol speciﬁcations accepting
valid protocol sessions.
For SMTP, there are about 100,000 SMTP ﬂows captured from the backbone
router. Out of those ﬂows, the SMTP protocol state machine are able to parse
the state transitions of about 86% ﬂows successfully. The remaining SMTP ﬂows
may use an encryption transmission, which we can not handle properly as one of
the limitations of our system is its incompetence to deal with encrypted traﬃc.
PPLIVE peers always employ UDP packets to communicate and transmit
data with each other. For the purpose of testing the quality of the PPLIVE
speciﬁcation, about 200,000 UDP ﬂows of PPLIVE are captured from a server
which runs a news channel of PPLIVE on September 9th, 2009. For PPLIVE
ﬂows, we are able to parse the state transitions of all ﬂows successfully.
In order to test and verify XUNLEI protocol speciﬁcation, there are about
500,000 UDP ﬂows of XUNLEI obtained from a backbone router. For XUNLEI
ﬂows, we are able to parse the state transitions of about 90% ﬂows success-
fully. The ﬂows we parsed take up more than 99% XUNLEI protocol packets
under analysis. Since our method is based on high probability sets, it will not
be sensitive to the event of small probability.
From the above experiment results, we can ﬁnd that the probabilistic pro-
tocol state machines we inferred are of good quality. The whole system can be
employed as an auxiliary tool for analyzing unknown behaviors in real-world
applications.
4.4 Summary
Our technique for inferring protocol state machine is based on a statistical model,
and it is sensitive to states which are statistically signiﬁcant. Therefore, maybe
Veritas cannot cover all the paths of a protocol state machine. However, our
method is suitable for analyzing critical paths in a protocol, which is very im-
portant in intrusion detection. Moreover, our experiment results show that the
our inference method has a high degree of accuracy in practice.
5 Conclusions and Future Work
Inferring protocol state machine from Internet traﬃc is a fundamental network
security problem, solutions to which have many practical applications. In this
paper, we presented a new solution to this problem. We proposed Veritas, a sys-
tem that can automatically extract protocol state machine for stateful network
protocols solely from Internet traﬃc. The input to Veritas is the real-world trace
of a speciﬁc application, and the output is the protocol state machine of that ap-
plication with a probabilistic description. Our technique proceeds mainly in the
Inferring Protocol State Machine from Network Traces
17
following steps. First, the real-world trace of a speciﬁc application is extracted
from Internet traﬃc. Then, by analyzing each packet header, we capture the pro-
tocol message format from packet headers. Afterwards, by means of clustering
algorithms, protocol state messages will be obtained. Based on the clusters, we
assign a type to each packet of ﬂows. Finally, we obtain the probabilistic proto-
col state machine. Our veriﬁcation experiments show that Veritas is general and
suitable for both text and binary protocols. The P-PSM inferred by our system
reﬂects the actual applications with high degrees of accuracy.
For future work, we plan to work on semantic inference with Veritas for better
understanding of protocol speciﬁcations. Moreover, Veritas can only deal with
real-world network trace of a single application. In the future, we would like to
make it ﬁt for the multi-protocol environment.
References
1. Lim, J., Reps, T., Liblit, B.: Extracting Output Formats from Executables. In:
WCRE 2006: Proceedings of the 13th Working Conference on Reverse Engineering
(2006)
2. Gringoli, F., Salgarelli, L., Dusi, M., Cascarano, N., Risso, F., Claﬀy, K.C.: GT:
picking up the truth from the ground for internet traﬃc. In: SIGCOMM Comput.
Commun. Rev. (2009)
3. Comparetti, P.M., Wondracek, G., Kruegel, C., Kirda, E.: Prospex: Protocol Spec-
iﬁcation Extraction. In: SP 2009: Proceedings of the 2009 30th IEEE Symposium
on Security and Privacy (2009)
4. Leita, C., Mermoud, K., Dacier, M.: Scriptgen: an automated script generation
tool for honeyd. In: Annual Computer Security Applications Conference (2005)
5. Caballero, J., Yin, H., Liang, Z., Song, D.: Polyglot: automatic extraction of pro-
tocol message format using dynamic binary analysis. In: CCS 2007: Proceedings of
the 14th ACM conference on Computer and Communications Security (2007)
6. Cui, W., Kannan, J., Wang, H.J.: Discoverer: automatic protocol reverse engi-
neering from network traces. In: SS 2007: Proceedings of 16th USENIX Security
Symposium on USENIX Security Symposium (2007)
7. Haﬀner, P., Sen, S., Spatscheck, O., Wang, D.: ACAS: automated construction
of application signatures. In: MineNet 2005: Proceedings of the 2005 ACM SIG-
COMM workshop on Mining network data (2005)
8. Kannan, J., Jung, J., Paxson, V., Koksal, C.E.: Semi-automated discovery of ap-
plication session structure. In: IMC 2006: Proceedings of the 6th ACM SIGCOMM
conference on Internet measurement (2006)
9. Ma, J., Levchenko, K., Kreibich, C., Savage, S., Voelker, G.M.: Unexpected means
of protocol inference. In: IMC 2006: Proceedings of the 6th ACM SIGCOMM
conference on Internet measurement (2006)
10. Vidal, E., Thollard, F., de la Higuera, C., Casacuberta, F., Carrasco, R.C.: Prob-
abilistic Finite-State Machines-Part I. IEEE Trans. Pattern Anal. Mach. Intell.
(2005)
11. Kendall, M.G., Stuart, A., Ord, J.K.: Kendall’s advanced theory of statistics. Ox-
ford University Press, Inc., Oxford (1987)
12. Kaufman, L., Rousseeuw, P.: Finding Groups in Data: An Introduction to Cluster
Analysis. Wiley, Chichester (1990)
18
Y. Wang et al.
13. Jaccard, P.: The distribution of the ﬂora in the alpine zone. The New Phytologist
(1912)
14. Brumley, D., Caballero, J., Liang, Z., Newsome, J., Song, D.: Towards automatic
discovery of deviations in binary implementations with applications to error detec-
tion and ﬁngerprint generation. In: SS 2007: Proceedings of 16th USENIX Security
Symposium on USENIX Security Symposium (2007)
15. Caballero, J., Venkataraman, S., Poosankam, P., Kang, M.G., Song, D., Blum,
A.: FiG: Automatic Fingerprint Generation. In: Annual Network and Distributed
System Security Symposium (2007)
16. Dreger, H., Feldmann, A., Mai, M., Paxson, V., Sommer, R.: Dynamic application-
layer protocol analysis for network intrusion detection. In: USENIX-SS 2006: Pro-
ceedings of the 15th conference on USENIX Security Symposium (2006)
17. Borisov, N., Brumley, D.J., Wang, H.J.: A Generic Application-Level Protocol An-
alyzer and its Language. In: Network and Distributed System Security Symposium
(2007)
18. Dunn, J.C.: Well separated clusters and optimal fuzzy-partitions. Journal of Cy-
bernetics (1974)
19. Internet2 netﬂow statistics, http://netflow.internet2.edu
20. XUNLEI, http://www.xunlei.com/
21. PPLIVE, http://www.pptv.com/
22. How Samba Was Written, http://samba.org/ftp/tridge/misc/french_cafe.txt
23. Gaim Instant Messaging Client, http://gaim.sourceforge.net/