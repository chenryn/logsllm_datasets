User: 请解答这个和日志有关的问题Is it considered a CSRF if it requires a unique identifier which is not a CSRF token - not tied to the user session? Consider an end point such as below. Let's imagine that this endpoint updates an address of the signed in user, changing the zip code. The address to update is identified by the address ID (kUj3Nkg10).

http://example.com/address-update/kUj3Nkg10/?zipCode=1234

Importantly, the identifier is an alphanumeric string, not an incremental integer. If it was an incremental integer, then it feasibly could be predicted. The alphanumeric can't reasonably be predicted or guessed.

To clarify, in the example, the address ID was randomaly generated, but once it exists, it never changes. The ID is not based on any specific user or address data.

Also, an address update is just one example, it doesn't really matter what the request actually does. It could be updating a phone number, or removing an email address. The key is that this alphanumeric is used to identify the entity and that no CSRF token is present.

Argument for considering it a CSRF

A CRSF token only lives and remains valid for the current session (or possibly even shorter). The unique ID in question remains the same (probably forever). Therefore a CSRF token should be used. It's possible that the identifier could be used elsewhere in the app, and made available for another user to see.

Argument for not considering it a CSRF

The attacker is unlikely to ever obtain the unique ID. It could be close to being as difficult to obtaining an actual CSRF token itself.



OWASP defines a CSRF as:


  Any application that accepts HTTP requests from an authenticated user without having some control to verify that the HTTP request is unique to the user's session. 


I think the above example satisfies the OWASP definition, because the address ID is not unique to the user's session.


OWASP reference

Assistant: There are CSRF prevention techniques that do not rely upon a session-bound CSRF token,  after all there is more than on way to skin a cat.  When considering a CSRF protection system,  look for any shortcut that doesn't exist with the commonly used CSRF synchronization token pattern. There are three concerns with this proposed CSRF protection system.

Expiration - CSRF is also called "session riding",  in some sense a CSRF token is a lot like a session id,  most importantly they both must expire.  The concern is that an attacker is permitted to guess the exact value of the CSRF token over an unlimited period of time.

Recovery from attack -  XSS can be used to obtain any value on any page using an XMLHTTPRequest(),  which includes CSRF tokens.  Once the attacker has the CSRF token, they are permitted ride on the victim's session indefinitely,  because it never expires.

Referer Information leakage - Sending the CSRF token in the URL is risky behavior.  If at any point an attacker can control the href of an &lt;a&gt; tag or the src of an &lt;img&gt; tag, then an attacker can force browsers into loading content from a web server controlled by the attacker,  thus allowing the attacker to log the HTTP referer,  which will contain the CSRF token of the victim.