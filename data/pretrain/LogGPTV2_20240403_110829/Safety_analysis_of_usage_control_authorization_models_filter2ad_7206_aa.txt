title:Safety analysis of usage control authorization models
author:Xinwen Zhang and
Ravi S. Sandhu and
Francesco Parisi-Presicce
Safety Analysis of Usage Control Authorization Models
Xinwen Zhang
George Mason University
PI:EMAIL
George Mason University and TriCipher Inc.
Ravi Sandhu
PI:EMAIL
Francesco Parisi-Presicce
George Mason University and
Univ. di Roma La Sapienza, Italy
PI:EMAIL
ABSTRACT
The usage control (UCON) model was introduced as a uniﬁed ap-
proach to capture a number of extensions for traditional access con-
trol models. While the policy speciﬁcation ﬂexibility and expres-
sive power of this model have been studied in previous work, as a
related and fundamental problem, the safety analysis of UCON has
not been explored. This paper presents two fundamental safety re-
sults for UCONA, a sub-model of UCON only considering autho-
rizations. In UCONA, an access control decision is based on the
subject and/or the object attributes, which can be changed as the
side-effects of using the access right, resulting in possible changes
to future access control decisions. Hence the safety question in
UCONA is all the more pressing since every access can potentially
enable additional permissions due to the mutability of attributes
in UCON. In this paper, ﬁrst we show that the safety problem is
in general undecidable. Then, we show that a restricted form of
UCONA with ﬁnite attribute value domains and acyclic attribute
creation relation has a decidable safety property. The decidable
model maintains good expressive power as shown by specifying an
RBAC system with a speciﬁc user-role assignment scheme and a
DRM application with consumable rights.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access con-
trols; K.6.5 [Management of Computing and Information Sys-
tems]: Security and Protection—Unauthorized access
General Terms
Security
Keywords
access control, usage control, UCON, authorization, safety
1.
INTRODUCTION
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’06 March 21-24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003 ...$5.00.
Modern information systems require ﬁne-grained and ﬂexible
access control policies, which need dynamic and expressive access
control models. Traditional access control models, such as access
matrix [5], mandatory access control (MAC) [1, 3], discretionary
access control (DAC), and role-based access control (RBAC) [15,
4], have been formulated to meet different application requirements.
Recently, usage control (UCON) [11] was proposed as a general
and comprehensive model to extend the underlying mechanism of
traditional access control models. In [11, 19], the policy speciﬁ-
cation ﬂexibility and expressive power of UCON has been shown
in access control systems, digital rights management (DRM), and
trust management applications, among others.
A different but related important problem in access control is the
leakage of permissions. In an access control system, a permission
is granted or an access is authorized depending on the current state
of the system. Also, the granting of a permission may consequently
change the state of the system, and this, in turn, may enable other
permissions. This dynamic property makes it is difﬁcult to foresee
a system state in which a subject can have a particular right on a
particular object. This is referred to as the safety problem in access
control. The requirement of strong expressive power and that of a
tractable safety property have been conﬂicting since the introduc-
tion of protection models in 1970’s. It is not a surprising fact that
for a given access control model, the more expressive power it has,
the harder it is, computationally, to carry out safety analysis, if at
all possible.
Access control in UCON is made by policies of authorizations,
obligations, and conditions (also referred as UCONABC model [11]).
In UCONA, the control decision of an access is determined by one
or more predicates built from the attributes of the subject and the
object. A particularly powerful innovation of UCONA is that an
access can result in the updates of the subject’s and/or the object’s
attributes as side-effects. These updates, in turn, may result in
the changes of the permissions of future accesses. The resultant
permission propagations, because of attribute mutability, make the
safety analysis complex and untractable in general UCON models.
This paper presents two main contributions to the safety anal-
ysis of UCONA. First, we prove that the safety problem in gen-
eral UCONA is undecidable by reduction to the halting problem in
Turing machines. Second, two decidable models of UCONA are
obtained with some restrictions in the general model. Speciﬁcally,
the safety problem is decidable for a UCONA model with ﬁnite at-
tribute domains and without “creating” policies. Also, the safety
problem is decidable for a UCONA model with ﬁnite attribute do-
mains and “creating” policies, where the attribute creation graph
is acyclic. We then show that these restricted forms of UCONA
are practically useful by specifying policies for RBAC systems and
DRM applications.
The rest of the paper is organized as follows. Section 2 con-
tains an introduction to and a formal deﬁnition of UCONA. Sec-
tion 3 presents the undecidability result of the safety problem in
general UCONA systems. We then present two decidable models
with some restrictions on the general UCONA in Section 4, and
their expressive power in Section 5. Section 6 gives some related
work on safety analysis in access control models. Section 7 con-
cludes the paper and presents some further directions of research.
2. USAGE CONTROL MODEL
In this section, ﬁrst we brieﬂy review the main components of the
UCON model in [11], and then we present a policy-based formal
UCONA model.
2.1 A Brief Introduction
A UCON system consists of six components: subjects and their
attributes, objects and their attributes, generic rights, authoriza-
tions, obligations, and conditions, where authorizations, obliga-
tions and conditions are the components of usage control decisions.
An attribute is regarded as a variable with a value assigned to it in
each system state. Authorizations are predicates based on subject
and/or object attributes, such as role name, security classiﬁcation
or clearance, credit amount, etc. Obligations are actions that are
performed by subjects or by the system. For example, playing a
licensed music ﬁle requires a user to click an advertisement, and
downloading a white paper requires a user to ﬁll out a form. Con-
ditions are system and environmental restrictions such as system
clock, location, system load, system mode, etc.
In UCON, a complete usage process consists of three phases:
before-usage, ongoing-usage, and after-usage. The control deci-
sion components are checked and enforced in the ﬁrst two phases,
called pre-decisions and ongoing-decisions respectively, while no
decision check is deﬁned in the after-usage phase (since there is no
control after a subject ﬁnishes an access on an object). The pres-
ence of ongoing decisions is called the continuity of UCON.
Another important property of UCON is attribute mutability. Mu-
tability means that one or more subject or object attribute values can
be updated as the results of an access. Along with the three phases,
there are three kinds of updates: pre-updates, ongoing updates, and
post-updates. All these updates are performed and monitored by
the security system. The updating of attributes as side-effect of
subject activity is a signiﬁcant extension of classic access control
where the reference monitor mainly enforces existing permissions.
Changing subject and object attributes has impact on the future us-
age of permissions involving this subject or object. This aspect of
mutability makes UCON very powerful as discussed in [11, 19] but
also makes the safety question much more important.
For each decision component (authorizations, obligations, and
conditions) in UCON, a number of core models are deﬁned based
on the phase where usage control is checked and updates are per-
formed. For example, in authorization core models, usage con-
trol decisions are dependent on subject and object attributes, which
can be checked and determined before or during a usage process,
and are called preA (pre-authorizations) and onA (ongoing au-
thorizations), respectively. Based on possible updates in all three
phases, each sub-model has four core models. For example, preA0
is the core model with pre-authorizations and without updates, and
preA1, preA2, and preA3 are core models with pre-authorizations,
and pre-updates, ongoing updates, and post-updates, respectively.
Similar core models have been deﬁned for onA, preB (pre-obliga-
tions), onB (ongoing obligations), preC (pre-conditions), and onC
(ongoing conditions). We mention obligations and conditions for
completeness, but do not consider them any further in this paper.
In this paper we focus on the safety analysis of UCON preA
models. Since an authorization decision is determined by subject’s
and object’s attributes, and these attribute values can be updated as
side-effects of the authorization, the safety problem in authoriza-
tion models is more pressing than that in obligation and condition
models. For UCON onA models, the system state changes non-
deterministically, depending on concurrent accesses and reasons
for attribute updates (e.g., ended access vs. revoked access). We
leave the safety analysis of onA models for future work. For the
sake of simplicity in this paper we refer UCONA as UCON preA
models.
2.2 A Formal Model of UCONA
A logical model of UCON is presented in [19] to capture the new
features of UCON, such as the attribute mutability and the decision
continuity, but it is not appropriate to study the safety problem. The
main reason is that the logical model focuses on the speciﬁcation
of the detailed state change of the system in a single usage process,
while for safety analysis, the overall effect of a usage process and
the permission propagation as the cumulative result of a sequence
of usage processes need to be formulated. Therefore a new for-
mal model is developed in this paper to capture the global effect
of a usage process and the cumulative result of a sequence of us-
age processes. Speciﬁcally, in this model, a single usage process is
atomic, and all usage processes are serialized in a system. By seri-
alized processes we mean that there is no interference between any
two usage processes, so that the net effect is as though the individ-
ual usage processes executed serially one after another. We don’t
specify precisely how the serialization is achieved, since there are
many known standard techniques for this purpose. The details of
how to achieve serialization is an implementation-level issue as op-
posed to a model-level issue. Focusing on model-level issues, we
deﬁne a set of policies to specify the authorization predicates for us-
ages, and sequences of primitive actions as the side-effect results.
Also, policies for creating and destroying subjects and objects are
deﬁned.
2.2.1
Subjects, Objects, and Rights
The subject, object and right abstractions are well known in ac-
cess control. Generally speaking, a subject is an active object that
can invoke some access requests or execute some permissions on
another object, such as a process that opens a ﬁle for reading. A
subject, in turn, can be accessed by another subject, e.g., a process
can be created, stopped or killed by another process. Following the
general concepts in traditional access control models, we consider
the set of subjects in UCONA to be a subset of the set of objects.
The objects that are not subjects are called pure objects. We require
that each object be speciﬁed with an identity, called name, which
is unique and cannot be changed, and cannot be reused after the
object is destroyed in the system1
Rights are a set of privileges that a subject can hold and execute
on an object, such as read, write, pause, etc. In access control
systems, a right enables the access of a subject to an object in a
particular mode, referred to as a permission. Formally, a permis-
sion is a triple (s, o, r), where s, o, r are a subject, object, and right,
respectively. In UCONA, a permission is enabled by an authoriza-
tion rule in a policy.
1This unique name in many cases will not be the identity of a user.
For example, a process executing on behalf of a user will have a
process identity and not a user identity.
The set of subjects, objects, and rights are denoted by S, O, and
R, respectively, where S ⊆ O.
2.2.2 Attributes, Values, and States
Each object is speciﬁed with a non-empty and ﬁnite set of at-
tributes, such as group membership, role, security clearance, credit
amount, etc, deﬁned by the system designer. An attribute of an ob-
ject is denoted as o.a where o is the object name (i.e., the object’s
unique identity) and a is the attribute name. Without loss of gen-
erality, we assume that in a system, each object has the same ﬁxed
set of attribute names AT T .
Each attribute name is treated as a variable of a speciﬁc datatype,
which determines the attribute’s domain and the set of functions
that can be used with the attribute values. The domain of the at-
tribute a is denoted as dom(a), and we assume that for each a ∈
AT T , null /∈ dom(a).
EXAMPLE 1. Each subject (user) in an organization has the
same set of attribute names AT T = {adminRole, regRole},
where the adminRole’s value is an administrative role name and
the regRole’s value is a regular role name. An administrator in the
organization has no-null values for both attributes, while a regular
employee’s adminRole is null, which is set when the subject is
created and cannot be updated.
2
An assignment of an attribute maps its attribute name to a value
in its domain, denoted as o.a = v, where v ∈ dom(a) ∪ {null}.
The set of assignments for all objects’ attributes collectively con-
stitute a state of the system.
DEFINITION 1. A system state, or state, is a pair (O, σ), where
O is a set of objects, and σ : O × AT T → dom(AT T ) ∪ {null}
is a function that assigns a value or null to each attribute of each
object.
EXAMPLE 2. Consider an organization in which RBAC [15] is
enforced. Each subject has an attribute ua, which stores all the
roles explicitly assigned to this subject by the security ofﬁcer, and
whose domain consists of all possible subsets of roles in the system.
Another attribute dev ua is deﬁned to store a single role that an
employee (say Alice) can be assigned to within the development de-
partment. If Rdev = {roles within the development department},
then dom(dev ua) = Rdev ∪ {null}. For Bob, who is in the test-
ing department, the dev ua value is always null. A possible sys-
tem state (if no other objects and attributes exist in the system) is
t = {Alice.ua = {p1, p2}, Alice.dev ua = {p1, p2}, Bob.ua =
{p3}, Bob.dev ua = null}, where p1, p2, p3 are role names, and
p1, p2 ∈ Rdev.
2.2.3 Predicates
2
DEFINITION 2. A predicate p(s, o) is a boolean-valued poly-
nomially computable function built from a set of a subject s’s and
an object o’s attributes and constants.
The semantics of a predicate is a mapping from system states
to boolean values. A state satisﬁes a predicate if the attribute val-
ues assigned in this state satisfy the predicate. For example, the
predicate s.credit > $100 is true in the current state of a sys-
tem if s’s credit attribute value is larger than $100 in this state.
A predicate can be deﬁned with a number of attributes from a
single object or two objects. For examples, a unary predicate is
built from one attribute variable and constants, e.g., s.credit ≥
$100.00, o.classif ication = “supersecure”. A binary pred-