# Title: Safety Analysis of Usage Control Authorization Models

## Authors:
- Xinwen Zhang, George Mason University, PI:EMAIL
- Ravi S. Sandhu, George Mason University and TriCipher Inc., PI:EMAIL
- Francesco Parisi-Presicce, George Mason University and Univ. di Roma La Sapienza, Italy, PI:EMAIL

## Abstract
The usage control (UCON) model was introduced as a unified approach to extend traditional access control models. While the policy specification flexibility and expressive power of UCON have been studied, the safety analysis of UCON has not been fully explored. This paper presents two fundamental safety results for UCONA, a sub-model of UCON that focuses on authorizations. In UCONA, access control decisions are based on subject and/or object attributes, which can be modified as side effects of using the access right, potentially leading to changes in future access control decisions. The safety question in UCONA is critical because every access can enable additional permissions due to the mutability of attributes. We first show that the safety problem is generally undecidable. Then, we demonstrate that a restricted form of UCONA with finite attribute value domains and acyclic attribute creation relations has a decidable safety property. The decidable model maintains good expressive power, as shown by specifying an RBAC system with a specific user-role assignment scheme and a DRM application with consumable rights.

### Categories and Subject Descriptors
- D.4.6 [Operating Systems]: Security and Protection—Access controls
- K.6.5 [Management of Computing and Information Systems]: Security and Protection—Unauthorized access

### General Terms
- Security

### Keywords
- Access control, usage control, UCON, authorization, safety

## 1. Introduction
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

ASIACCS '06, March 21-24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003 ...$5.00.

Modern information systems require fine-grained and flexible access control policies, which necessitate dynamic and expressive access control models. Traditional access control models, such as the access matrix, mandatory access control (MAC), discretionary access control (DAC), and role-based access control (RBAC), have been formulated to meet different application requirements. Recently, usage control (UCON) was proposed as a general and comprehensive model to extend the underlying mechanisms of traditional access control models. In previous work, the policy specification flexibility and expressive power of UCON have been demonstrated in various applications, including access control systems, digital rights management (DRM), and trust management.

An important but related problem in access control is the leakage of permissions. In an access control system, a permission is granted or an access is authorized based on the current state of the system. The granting of a permission may change the system state, which in turn may enable other permissions. This dynamic property makes it difficult to predict a system state where a subject can have a particular right on a particular object, known as the safety problem in access control. Since the introduction of protection models in the 1970s, there has been a conflict between the need for strong expressive power and the requirement for a tractable safety property. Generally, the more expressive power a model has, the harder it is to perform safety analysis.

In UCON, access control decisions are made based on policies of authorizations, obligations, and conditions (also referred to as the UCONABC model). In UCONA, the control decision for an access is determined by one or more predicates built from the attributes of the subject and the object. A key innovation in UCONA is that an access can result in updates to the subject's and/or the object's attributes as side effects. These updates can lead to changes in the permissions of future accesses. The resulting permission propagations, due to attribute mutability, make the safety analysis complex and generally untractable in UCON models.

This paper presents two main contributions to the safety analysis of UCONA. First, we prove that the safety problem in general UCONA is undecidable by reduction to the halting problem in Turing machines. Second, we show that two restricted forms of UCONA have decidable safety properties. Specifically, the safety problem is decidable for a UCONA model with finite attribute value domains and without "creating" policies. Additionally, the safety problem is decidable for a UCONA model with finite attribute value domains and "creating" policies, where the attribute creation graph is acyclic. We then demonstrate the practical utility of these restricted forms of UCONA by specifying policies for RBAC systems and DRM applications.

The rest of the paper is organized as follows. Section 2 introduces and formally defines UCONA. Section 3 presents the undecidability result of the safety problem in general UCONA systems. Section 4 discusses two decidable models with some restrictions on the general UCONA, and Section 5 evaluates their expressive power. Section 6 reviews related work on safety analysis in access control models. Finally, Section 7 concludes the paper and suggests further research directions.

## 2. Usage Control Model

### 2.1 Brief Introduction
A UCON system consists of six components: subjects and their attributes, objects and their attributes, generic rights, authorizations, obligations, and conditions. Authorizations, obligations, and conditions are the components of usage control decisions. An attribute is a variable with a value assigned in each system state. Authorizations are predicates based on subject and/or object attributes, such as role name, security classification, or credit amount. Obligations are actions performed by subjects or the system, such as requiring a user to click an advertisement to play a licensed music file. Conditions are system and environmental restrictions, such as system clock, location, system load, and system mode.

In UCON, a complete usage process consists of three phases: before-usage, ongoing-usage, and after-usage. The control decision components are checked and enforced in the first two phases, called pre-decisions and ongoing-decisions, respectively. No decision check is defined in the after-usage phase since there is no control after a subject finishes an access on an object. The presence of ongoing decisions is called the continuity of UCON.

Another important property of UCON is attribute mutability. Mutability means that one or more subject or object attribute values can be updated as a result of an access. Along with the three phases, there are three kinds of updates: pre-updates, ongoing updates, and post-updates. All these updates are performed and monitored by the security system. The updating of attributes as a side effect of subject activity is a significant extension of classic access control, where the reference monitor mainly enforces existing permissions. Changing subject and object attributes impacts the future usage of permissions involving this subject or object, making UCON very powerful but also making the safety question more critical.

For each decision component (authorizations, obligations, and conditions) in UCON, a number of core models are defined based on the phase where usage control is checked and updates are performed. For example, in authorization core models, usage control decisions are dependent on subject and object attributes, which can be checked and determined before or during a usage process, and are called preA (pre-authorizations) and onA (ongoing authorizations), respectively. Based on possible updates in all three phases, each sub-model has four core models. For example, preA0 is the core model with pre-authorizations and without updates, and preA1, preA2, and preA3 are core models with pre-authorizations and pre-updates, ongoing updates, and post-updates, respectively. Similar core models have been defined for onA, preB (pre-obligations), onB (ongoing obligations), preC (pre-conditions), and onC (ongoing conditions).

In this paper, we focus on the safety analysis of UCON preA models. Since an authorization decision is determined by the subject's and object's attributes, and these attribute values can be updated as side effects of the authorization, the safety problem in authorization models is more pressing than in obligation and condition models. For UCON onA models, the system state changes non-deterministically, depending on concurrent accesses and reasons for attribute updates (e.g., ended access vs. revoked access). We leave the safety analysis of onA models for future work. For simplicity, we refer to UCONA as UCON preA models.

### 2.2 Formal Model of UCONA
A logical model of UCON was presented in [19] to capture new features such as attribute mutability and decision continuity, but it is not suitable for studying the safety problem. The main reason is that the logical model focuses on the detailed state change of the system in a single usage process, while for safety analysis, the overall effect of a usage process and the permission propagation as the cumulative result of a sequence of usage processes need to be formulated. Therefore, a new formal model is developed in this paper to capture the global effect of a usage process and the cumulative result of a sequence of usage processes. Specifically, in this model, a single usage process is atomic, and all usage processes are serialized in the system. By serialized processes, we mean that there is no interference between any two usage processes, so the net effect is as though the individual usage processes executed serially one after another. We do not specify precisely how serialization is achieved, as there are many known standard techniques for this purpose. The details of how to achieve serialization are an implementation-level issue rather than a model-level issue. Focusing on model-level issues, we define a set of policies to specify the authorization predicates for usages and sequences of primitive actions as the side-effect results. Policies for creating and destroying subjects and objects are also defined.

#### 2.2.1 Subjects, Objects, and Rights
Subjects, objects, and rights are well-known abstractions in access control. A subject is an active entity that can invoke access requests or execute permissions on another object, such as a process opening a file for reading. A subject can also be accessed by another subject, e.g., a process can be created, stopped, or killed by another process. Following the general concepts in traditional access control models, we consider the set of subjects in UCONA to be a subset of the set of objects. The objects that are not subjects are called pure objects. Each object is specified with an identity, called a name, which is unique, cannot be changed, and cannot be reused after the object is destroyed in the system.

Rights are a set of privileges that a subject can hold and execute on an object, such as read, write, pause, etc. In access control systems, a right enables the access of a subject to an object in a particular mode, referred to as a permission. Formally, a permission is a triple (s, o, r), where s, o, and r are a subject, object, and right, respectively. In UCONA, a permission is enabled by an authorization rule in a policy.

The sets of subjects, objects, and rights are denoted by S, O, and R, respectively, where S ⊆ O.

#### 2.2.2 Attributes, Values, and States
Each object is specified with a non-empty and finite set of attributes, such as group membership, role, security clearance, and credit amount, defined by the system designer. An attribute of an object is denoted as o.a, where o is the object name (i.e., the object's unique identity) and a is the attribute name. Without loss of generality, we assume that in a system, each object has the same fixed set of attribute names AT T.

Each attribute name is treated as a variable of a specific datatype, which determines the attribute's domain and the set of functions that can be used with the attribute values. The domain of the attribute a is denoted as dom(a), and we assume that for each a ∈ AT T, null ∉ dom(a).

**Example 1.** Each subject (user) in an organization has the same set of attribute names AT T = {adminRole, regRole}, where adminRole's value is an administrative role name and regRole's value is a regular role name. An administrator in the organization has non-null values for both attributes, while a regular employee's adminRole is null, which is set when the subject is created and cannot be updated.

An assignment of an attribute maps its attribute name to a value in its domain, denoted as o.a = v, where v ∈ dom(a) ∪ {null}. The set of assignments for all objects' attributes collectively constitutes a state of the system.

**Definition 1.** A system state, or state, is a pair (O, σ), where O is a set of objects, and σ : O × AT T → dom(AT T) ∪ {null} is a function that assigns a value or null to each attribute of each object.

**Example 2.** Consider an organization in which RBAC [15] is enforced. Each subject has an attribute ua, which stores all the roles explicitly assigned to this subject by the security officer, and whose domain consists of all possible subsets of roles in the system. Another attribute dev_ua is defined to store a single role that an employee (say Alice) can be assigned to within the development department. If Rdev = {roles within the development department}, then dom(dev_ua) = Rdev ∪ {null}. For Bob, who is in the testing department, the dev_ua value is always null. A possible system state (if no other objects and attributes exist in the system) is t = {Alice.ua = {p1, p2}, Alice.dev_ua = {p1, p2}, Bob.ua = {p3}, Bob.dev_ua = null}, where p1, p2, p3 are role names, and p1, p2 ∈ Rdev.

#### 2.2.3 Predicates
**Definition 2.** A predicate p(s, o) is a boolean-valued polynomially computable function built from a set of a subject s's and an object o's attributes and constants.

The semantics of a predicate is a mapping from system states to boolean values. A state satisfies a predicate if the attribute values assigned in this state satisfy the predicate. For example, the predicate s.credit > $100 is true in the current state of a system if s’s credit attribute value is larger than $100 in this state.

A predicate can be defined with a number of attributes from a single object or two objects. For example, a unary predicate is built from one attribute variable and constants, e.g., s.credit ≥ $100.00, o.classification = "supersecure". A binary predicate is built from two attribute variables and constants, e.g., s.role = "admin" ∧ o.owner = s.