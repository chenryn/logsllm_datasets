title:POSTER: Semi-supervised Classification for Dynamic Android Malware
Detection
author:Li Chen and
Mingwei Zhang and
Chih-Yuan Yang and
Ravi Sahita
POSTER: Semi-supervised Classification for Dynamic Android
Malware Detection
Li Chen, Mingwei Zhang, Chih-yuan Yang, Ravi Sahita
Security and Privacy Lab, Intel Labs, Hillsboro, OR
ABSTRACT
Manually labeling the large number of samples of Android APKs
into benign or different malicious families requires tremendous hu-
man effort, while it is comparably easy and cheap to obtain a large
amount of unlabeled APKs from various sources. Moreover, the
fast-paced evolution of Android malware continuously generates
derivative and new malware families. These families often contain
new signatures, which can escape detection that uses static analy-
sis. These practical challenges can also cause classical supervised
machine learning algorithms to degrade in performance.
We propose a framework that uses model-based semi-supervised
(MBSS) classification scheme built using dynamic Android API call
logs. The semi-supervised approach efficiently uses the labeled and
unlabeled APKs to estimate a finite mixture model of Gaussian
distributions via conditional expectation-maximization and effi-
ciently detects malware during out-of-sample testing. We compare
MBSS with the popular malware detection classifiers such as sup-
port vector machine (SVM), k-nearest neighbor (kNN) and linear
discriminant analysis (LDA). Under the ideal classification setting,
MBSS has competitive performance with 98% accuracy and very low
false positive rate for in-sample classification. For out-of-sample
testing, the out-of-sample test data exhibit similar behavior of re-
trieving phone information and sending to the network, compared
with in-sample training set. When this similarity is strong, MBSS
and SVM with linear kernel maintain 90% detection rate while kNN
and LDA suffer great performance degradation. When this similar-
ity is slightly weaker, all classifiers degrade in performance, but
MBSS still performs significantly better than other classifiers.
KEYWORDS
Android dynamic malware analysis, semi-supervised machine learn-
ing, robust machine learning
1 MOTIVATION
The rampant evolution of Android malware makes it more so-
phisticated to avoid detection and more difficult to classify using
commonly-used machine learning algorithms. Human effort of la-
beling the malware as malicious or benign cannot keep up with the
pace of the voluminous generation of Android malware, resulting
in an imbalance of much more unlabeled data than labeled data.
Even VirusTotal could take a long time to finalize the prediction of
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4946-8/17/10.
https://doi.org/10.1145/3133956.3138838
large amount of unlabeled data. Further, this can cause supervised
learning algorithms to degrade in performance.
Furthermore, due to this imbalance of unlabeled and labeled data,
the distribution observed from the labeled data can be different from
the actual data distribution. This is seen in malware detection, as
study suggests that malware family exhibit polymorphic behaviors.
Translated into machine learning, it implies that at testing phase,
the test data can be similarly distributed as the training data, but is
not identically distributed as the training data. Classical supervised
machine learning algorithms can suffer performance degradation
when tested on samples that do not distribute identically as the
training data.
2 PROPOSED FRAMEWORK
To address the above challenges, we propose a framework of uti-
lizing model-based semi-supervised (MBSS) classification on the
dynamic behavior data for Android malware detection. We focus on
detecting malicious behavior at runtime by using dynamic behavior
data. The main advantage of semi-supervised classification is the
strong robustness in performance for out-of-sample testing. The
model-based semi-supervised classification uses both labeled and
unlabeled data to estimate the parameters, since unlabeled data
usually carries valuable information on the model fitting procedure.
Specifically, we use mixture modeling to achieve the classifica-
tion task. Mixture modeling is a type of machine learning technique,
which assumes that every component of the mixture represents a
given set of observations in the entire collection of data. Gaussian
mixture modeling is the most popularly used applied and studied
technique.
We run the Android applications in our emulator infrastructure
and harvest the API calls at runtime. Our framework efficiently
uses the labeled and unlabeled behavior data to estimate a set of
finite mixture models of Gaussian distributions via conditional
expectation-maximization, and uses the Bayesian information cri-
terion for model selection. We compare MBSS with the popular
malware detection classifiers such as SVM, kNN and LDA. We
demonstrate that MBSS has competitive performance for in-sample
classification, and maintains strong robustness when applied for
out-of-sample testing. We consider semi-supervised learning on
dynamic Android behavior data a practical and valuable addition
to Android malware detection.
3 DATA GENERATION AND PREPARATION
Malicious and benign APKs were downloaded from VirusTotal
and Google Play respectively. Both samples were uploaded to our
emulator infrastructure for execution. Our Android emulator (AE)
runs in a emulator machine. Each machine may contain multiple
emulators. The downloaded APKs were dispatched by the scheduler
and installed to new emulator instances for execution. Since most of
PosterCCS’17, October 30-November 3, 2017, Dallas, TX, USA2479Android applications are UI-based, merely launching the application
may be insufficient to expose its behaviors. An automation tool
is developed to provide simulated human interactions, such as
clicks, and sensor events, such as GPS location. In addition, this
tool navigates the UI automatically without human intervention.
We harvest applications behavior logs through Android Debug
Bridge (ADB) [1] and aggregate them into the disk.
We capture dynamic behavior of each android application by
executing it in our emulator. The instrumentation of Android run-
time was implemented by Xposed [6] in a similar environment like
CuckooDroid[5]. The dynamic log consists of a time sequence of
API calls made by an application to the Android runtime. Since
current Android runtime export more than 50K APIs, for efficiency,
we carefully select 160 API calls that are critical to change Android
system state such as sending short messages, accessing website,
reading contact information, etc. Our selection of Android API
function comes from the union of function set selected by three
well-known open source projects: AndroidEagleEye [3], Droidmon
[4], and Droidbox [2].
As a result, our data consists of the dynamic traces of the APKs
as samples, and the feature space of our data set is the collec-
tion of n-gram of APIs. That is, suppose the unique number of
n-concatenated API calls is d, then a sample APK is represented by
x = (0, 0, .., 1, .., 1, .., 0) ∈ {0, 1}d, where 1 denotes the existence of
an n-API call sequence and 0 otherwise.
4 MODEL-BASED SEMI-SUPERVISED
CLASSIFICATION
to be distributed from a mixture density f (x)=K
In the model-based semi-supervised approach, the data x is assumed
k =1 πk fk(x), where
fk(·) is the density from the k-th group and πk is the probability
that an observation belongs to group k. Each component is Gauss-
ian, which is characterized by its mean µk and covariance matrix
Σk. The probability density function for the k-th component is thus
exp(− 1
2(x − µk)T Σ−1
(cid:112)det(2π Σk)
k (x − µk))
.
(1)
fk = fk(x, µk , σk) =
The mean µ = (µ1, ..., µK), covariance matrix Σ = (Σ1, ..., ΣK)
and the population distribution π = (π1, ..., πK) are the parameters
to be estimated from the mixture models.
Denote θ := (µ, Σ) as all the parameters in the Gaussian compo-
nents. Hence we want to estimate π and θ. DenoteXn = {X1, ..., Xn}
as the training data and Yn = {Y1, ..., Yn} as the training labels,
where for the i-th observation, denote Yik = 1 if the observation
comes from group k and 0 otherwise. Denote the unknown labels
of the unlabeled data as YM = {Yn+1, ..., Yn+m}.
In our framework, we apply model-based semi-supervised classi-
fication using both labeled and unlabeled Android behavioral data
to develop the classification decision for the unlabeled data. The
likelihood of the complete-data consisting of labeled and unlabeled
data is
LC(π , θ|Xn,Yn,Xm,Ym)
= Πn
k =1[πk f (xi|θk)Yik ]Πn+m
i =1ΠK
j=n+1ΠK
k =1[πk f (Xj|θk)]Yjk .
(2)
Essentially we treat the data with unknown labels as missing data
to include them in the complete likelihood.
To estimate the unknown parameters and maximize the log-
likelihood of the complete data, we use the conditional expectation-
maximization (CEM) algorithm [8]. It is used to solve the likelihood
maximization on the complete data, and consists of four main steps:
• Initialization;
• Calculate expectation;
• Maximize the expectation;
• Stop until convergence.
Parameter estimation via CEM results in multiple models depending
on the Gaussian shapes. We proceed with model selection using
the Bayesian information criterion, given by