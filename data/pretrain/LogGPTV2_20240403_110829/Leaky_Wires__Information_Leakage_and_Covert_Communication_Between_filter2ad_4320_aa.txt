title:Leaky Wires: Information Leakage and Covert Communication Between
FPGA Long Wires
author:Ilias Giechaskiel and
Kasper Bonne Rasmussen and
Ken Eguro
Leaky Wires: Information Leakage and Covert Communication
Between FPGA Long Wires
Ilias Giechaskiel
University of Oxford
PI:EMAIL
Kasper B. Rasmussen
University of Oxford
PI:EMAIL
Ken Eguro
Microsoft Research
PI:EMAIL
ABSTRACT
Field-Programmable Gate Arrays (FPGAs) are integrated circuits
that implement reconfigurable hardware. They are used in modern
systems, creating specialized, highly-optimized integrated circuits
without the need to design and manufacture dedicated chips. As the
capacity of FPGAs grows, it is increasingly common for designers
to incorporate implementations of algorithms and protocols from
a range of third-party sources. The monolithic nature of FPGAs
means that all on-chip circuits, including third party black-box de-
signs, must share common on-chip infrastructure, such as routing
resources. In this paper, we observe that a “long” routing wire carry-
ing a logical 1 reduces the propagation delay of other adjacent but
unconnected long wires in the FPGA interconnect, thereby leaking
information about its state. We exploit this effect and propose a
communication channel that can be used for both covert transmis-
sions between circuits, and for exfiltration of secrets from the chip.
We show that the effect is measurable for both static and dynamic
signals, and that it can be detected using very small on-board cir-
cuits. In our prototype, we are able to correctly infer the logical
state of an adjacent long wire over 99% of the time, even without
error correction, and for signals that are maintained for as little as
82us. Using a Manchester encoding scheme, our channel bandwidth
is as high as 6kbps. We characterize the channel in detail and show
that it is measurable even when multiple competing circuits are
present and can be replicated on different generations and families
of Xilinx devices (Virtex 5, Virtex 6, and Artix 7). Finally, we pro-
pose countermeasures that can be deployed by systems and tools
designers to reduce the impact of this information leakage.
KEYWORDS
FPGA covert channel; information leakage; long wire delay; crosstalk
1 INTRODUCTION
The ever-increasing size and sophistication of FPGAs make them
an ideal platform for System-on-Chip integration. FPGAs are often
used in high-bandwidth, low-latency applications, providing func-
tionality such as network card replacement, or massively parallel
computation. Besides permeating distributed systems and critical
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ASIACCS’18, June 4–8, 2018, Songdo, Korea
© 2018 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/XXXXXX.XXXXXX
infrastructure, FPGA chips are also integrated in end-products, rang-
ing from consumer electronics to medical and scientific equipment.
As a result, protecting their security is a necessary step to ensure
that their computations are performed in a trustworthy manner.
The high cost of design and development has led to an increase
in outsourcing, making it common to have designs from different
contractors on the same FPGA chip. Such designs often include
protocol and data structure implementations, or more sophisticated
circuits, like radio front-ends or soft processors. This practice raises
concerns about the malicious inclusion of circuits (cores) that have
additional backdoor functionality. The cores can be functionally
validated before being included in the overall design, but such static
analysis cannot always detect covert channels [10]. It is therefore
important to identify and protect against such channels.
In this paper, we show that the value driven onto certain types
of FPGA routing resources, called “long” wires, influences the delay
of nearby wires, even when the driven value remains constant. This
distinguishes our approach from prior work which depends on
fast-changing signals [8, 12, 35], and thus local voltage drops or
inductive crosstalk. Specifically, we find that if a long wire carries a
logical 1, the delay of nearby long lines will be slightly lower than
when it carries a logical 0. This difference in delay allows cores
sharing the same reconfigurable FPGA fabric to communicate, even
when they are not directly connected.
We demonstrate the phenomenon by building a transmitter and
receiver, which are unconnected, and only use adjacent long wires
to communicate. The receiver is a three-stage Ring Oscillator (RO),
whose routing uses a long wire between two of its stages. The
transmitter drives a long wire adjacent to that of the RO. When the
transmitting wire carries a logical 1, the routing delay of the RO
long wire decreases, thereby increasing the RO frequency. We detect
these minor frequency changes by counting the number of the RO
signal transitions during a fixed time interval. This mechanism can
be used either for covert communication, or for the exfiltration of
fast-changing dynamic signals.
We conduct extensive experiments on three Xilinx FPGA families
and show that the phenomenon is independent of the device used,
the location and orientation of the transmitter and receiver, and the
pattern of transmission. We perform all tests on stock prototyping
boards without modifications, and show that the phenomenon can
be detected even in the presence of environmental noise and with
only small circuits internal to the FPGA. Finally, we propose new
defense mechanisms which can be implemented by systems and
tools designers to reduce the impact of this information leakage.
2 BACKGROUND
Field-Programmable Gate Arrays (FPGAs) are integrated circuits
that implement reconfigurable hardware. At a basic level, they
ASIACCS’18, June 4–8, 2018, Songdo, Korea
Ilias Giechaskiel, Kasper B. Rasmussen, and Ken Eguro
consist of blocks of configurable lookup tables (LUTs), which can
be used to represent the truth table of combinatorial functions. They
also include registers to store data, as well as programmable routing,
which determines how the LUTs and registers are interconnected.
FPGAs can thus be used to represent all computable functions,
including emulating sophisticated circuits such as entire CPUs.
The Xilinx FPGAs used in our experiments internally have a grid
layout, whose fundamental building block is called a Configurable
Logic Block (CLB). It is composed of two slices, each of which con-
tains four LUTs and registers. Each CLB has an associated switch
matrix, which contains resources to connect elements within a
CLB, and enables CLBs to communicate with each other. There are
multiple types of such communication wires, which have different
orientations and lengths. In this paper we focus on a specific type
of routing resource, called a long. Longs are a wire type used to
efficiently communicate between CLBs that are far apart, and can
be vertical (connecting elements with the same x coordinate), or
horizontal (same y coordinate). We have observed the phenomenon
in both types of wires, but for brevity we limit our discussion to
vertical longs, or VLONGs. Due to the FPGA’s routing topology, ad-
ditional shorter wires are often needed to connect certain elements
via long wires. We will refer to these wires as “local routing”.
Usually, the details of how logic elements are placed and signals
are routed are transparent to the circuit designers. Designers define
their desired logic, but the conversion to a physical implementation
is handled by the manufacturer tools. Compiler directives for the
manual routing of signals are available, but these are often only used
if the exact routing impacts functionality. In the absence of manual
directives, the tools may elect to use any wire, including longs, to
carry a given signal in the circuit, without alerting designers.
That said, user-designed circuits often share the FPGA with third-
party implementations of various protocols, data structures, and
algorithms. These licensed designs, called Intellectual Property (IP)
cores or blocks, often come in a pre-routed black-box format, to
eliminate the variability of on-the-fly routing and attain a known
clock frequency. As a result, the routing of these blocks is opaque
to circuit designers, and blocks created by different parties can use
routing resources in the same channel of long wires. As our paper
shows, this use of nearby long wires can enable malicious circuits
to communicate covertly, or extract information from other cores.
Ring Oscillators (ROs) are a type of circuit which consists of an
odd number of NOT gates, chained together in a ring formation
(i.e., the output of the last gate is fed back as input to the first
gate). ROs form a bi-stable loop, whose output oscillates between 1
and 0 (true and false). The frequency of oscillation depends on the
number of stages in the RO, the delay between the stages, as well
as voltage, temperature, and small variations in the manufacturing
process [9]. ROs in FPGAs are used as temperature monitors [36],
True Random Number Generators (TRNGs) [33], and Physically-
Unclonable Functions (PUFs)s [20], while in this paper we present
a way to use them to detect the logic state of nearby wires.
3 SYSTEM AND ADVERSARY MODEL
FPGA designs contain IP cores sourced from third-parties, and some
of these cores may contain unwanted functionality, as shown in
Figure 1: System model. Different IP cores share common
FPGA routing resources. The cores can be supplied by differ-
ent contractors and may contain malicious functionality.
Figure 1. These third-party IP cores can be distributed as fully-
specified, pre-placed and pre-routed elements (“macros”) to meet
timing constraints (e.g., DDR controllers) and reduce compilation
time, with the macro repositioned at specific intervals where the
logic and routing fabric is self-similar [13, 15–17].
As FPGAs often process highly-sensitive information (e.g., cryp-
tographic keys), it is essential to ensure that data does not leak to
unauthorized third-parties. In this paper, we focus on malicious IP
cores which aim to infer information about the state of nearby (but
physically-unconnected) logic. The adversary can thus insert one
or more IP cores into the design, but these cores are not directly
connected. The adversary can also define the internal placement
and routing of his own blocks and force his cores to use specific
routing resources that can compromise the integrity of a reverse-
engineered target IP block. Note that directly connecting to the
target IP block would result in a logical error in the compilation
flow, but merely using adjacent wires does not raise such errors. We
discuss how the adversary can accomplish his goals in Section 3.2.
The adversary does not have physical access to the board, and can
thus not alter the environmental conditions or physically modify
the FPGA board in any way. There is also no temperature control
beyond the standard heatsink and fan already mounted on the
FPGA, and we do not add any special voltage regulation, or shielding
to the chip or the connected wires. Such modifications reduce noise
and improve the stability of measurements [18, 23, 31, 36], and
would thus make it easier for the adversary to achieve his goals.
In this paper, we show that by using long wires, an adversary
can infer the nearby state of blocks he does not control, or establish
covert communication between two co-operating IP cores under his
control, even in the presence of power and temperature fluctuations.
We provide further motivation and applications of the capabilities
offered by this new source of information leakage in Section 3.1.
3.1 Motivation
With increased outsourcing, Hardware Trojans (HTs) have become
a common-place security threat for FPGAs [7, 32]. Adversarial IP
cores can thus eavesdrop on nearby cores and attempt to extract
information about their state. As designs are often tested to detect
HTs and other security threats [12, 18, 35], we thus assume that
the IP cores provide legitimate functionality that is needed by the
user, and that they do not contain additional logic which would
Leaky Wires: Information Leakage and Covert Communication Between FPGA Long Wires ASIACCS’18, June 4–8, 2018, Songdo, Korea
make them easy to detect. Indeed, the transmitter and receiver
we present have dual use, hiding their malicious functionality in
their routing, not their actual combinatorial and sequential logic.
As a result, unlike conventional backdoors, our IP cores would
pass timing/netlist/bitfile verification, since they do not require
additional gates, presenting a bigger challenge to designers.
Multi-user setups present further threats beyond a malicious core
eavesdropping on signals not under the adversary’s control. Intel
Xeon and other CPUs with integrated FPGAs bring FPGAs closer to
a traditional server model, while FPGAs in cloud environments (e.g.,
Amazon EC2 F1 instances) are also becoming increasingly available.
Although these are currently allocated on a per-user basis, we
can expect that they will eventually become sharable commodity
resources, since FPGAs already allow for partial reconfiguration,
and designs exist where different processors have access to and can
re-configure the same FPGA chip [29].
An additional threat arises when IP cores of different security
guarantees are integrated on the same design [10, 11, 28]. For exam-
ple, an adversary implementing the FM radio core on a phone SoC
would want to eavesdrop on the Trusted Platform Module’s (TPM)
AES encryption operations to recover its key. As sensitive cores
are highly scrutinized, an adversary who has also implemented the
TPM would want to establish a covert channel to transfer the key