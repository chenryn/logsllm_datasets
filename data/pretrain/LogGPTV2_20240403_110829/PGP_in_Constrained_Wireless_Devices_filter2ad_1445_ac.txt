HMAC and Triple-DES (in CBC mode) of ECAES are
compliant, respectively, with RFC 2104 [30] and ANSI
X9.52 [3].
6 Porting PGP to the Pager
There are now a number of cryptographic libraries and
PGP applications which have received extensive devel-
opment and for which source code is available; see, for
example, cryptlib by Peter Gutmann [20] and Crypto++
by Wei Dai [10]. Our plan was to adapt existing code,
adding public-key schemes based on elliptic curves. For
comparisons and development, it was essential that the
Koblitz curve over F
Random curve over F
Key generation
ECAES encrypt
ECAES decrypt
ECDSA signing
ECDSA verifying
RIM pager
751
1,759
1,065
1,011
1,826
PalmPilot
1,334
2,928
1,610
1,793
3,263
2163
Pentium II
1.47
4.37
2.85
2.11
4.09
RIM pager
1,085
3,132
2,114
1,335
3,243
PalmPilot
1,891
5,458
3,564
2,230
5,370
2163
Pentium II
2.12
6.67
4.69
2.64
6.46
Table 3: Timings (in milliseconds) for ECC operations over F
2163 on various platforms.
Koblitz curve over F
Random curve over F
Key generation
ECAES encrypt
ECAES decrypt
ECDSA signing
ECDSA verifying
RIM pager
1,552
3,475
2,000
1,910
3,701
PalmPilot
2,573
5,563
2,969
3,080
5,878
2233
Pentium II
3.11
7.83
4.85
4.03
7.87
RIM pager
2,478
6,914
4,593
3,066
7,321
PalmPilot
3,948
11,373
7,551
4,407
11,964
2233
Pentium II
4.58
13.99
9.55
5.52
14.08
Table 4: Timings (in milliseconds) for ECC operations over F2233 on various platforms.
code run on several platforms in addition to the RIM de-
vice.
Our
[18], an OpenPGP-compliant
initial work was with GNU Privacy Guard
freely dis-
(GnuPG)
tributable replacement for PGP, which was nearing a
post-beta release in 1999. Initial tests on the pager with
several fragments adapted from GnuPG sources were
promising, and the code appeared to be ideal for adding
the elliptic curve routines and testing on Unix-based and
other systems. However, it appeared that untangling code
dependencies for our use on the pager would be unpleas-
ant. (Perhaps a better understanding of GnuPG internals
and design decisions would have changed our opinion.)
Jonathan Callas suggested that we look again at the
OpenPGP reference implementation [8], which we had
put aside after initial testing revealed a few portability
and alignment problems in the code. The reference im-
plementation relied on the OpenSSL library [37].
The OpenPGP reference implementation is surpris-
ingly complete for the amount of code, although it is
admittedly a little rough on the edges.4 The code was de-
veloped on a Linux/x86 system, and modiﬁcations were
required for alignment errors which prevented the pro-
gram from running on systems such as Solaris/SPARC.
In addition, some portability changes were required, in-
cluding code involving the “long long” data type. For
the RIM pager, the separation of the PGP code from the
well-tested OpenSSL library, along with the small size
of the OpenPGP sources, were deﬁnite advantages. Fi-
4Zerucha writes that he wasn’t “careful about wiping memory and
preventing memory leaks and other things to make the code robust” [8].
nally, it should be noted that the OpenSSL libraries build
easily on Unix and Microsoft Windows systems, and are
designed so that adding routines such as the elliptic curve
code is straightforward.
Although applications for the pager are built as Win-
dows DLLs, the pager is not a Windows-based system.
There are signiﬁcant restrictions on the calls that can be
used, extending to those involving memory allocation,
time and character handling, and the ﬁle system. There
is no ﬂoating-point processor on the pager. In order to
adapt code developed on more traditional systems, we
wrote a library of compatibility functions to use with the
pager. Some functions were trivial (such as those involv-
ing memory allocation, since the SDK included equiv-
alent calls); others, such as the stream I/O calls, were
written to speed testing and porting and cannot be rec-
ommended as particularly robust or elegant.
We used portions of OpenSSL 0.9.4, along with the
library in the OpenPGP reference implementation. Rela-
tively few changes to OpenSSL were required, and could
be restricted to header ﬁles in many cases. The ellip-
tic curve routines were integrated, including additions to
the scripts used to build OpenSSL. For some platforms,
OpenSSL can be built using assembly-language versions
of certain key routines to improve execution speed. Some
of these ﬁles for the Intel x86 include instructions (such
as bswap) which were introduced for the 486, and cannot
be used on the pager.
The OpenPGP sources were modiﬁed to correct the
alignment bugs and portability problems mentioned
above, and necessary changes were made for the elliptic
curve schemes (public-key algorithms 18 and 19 in the
Key generation
ECAES encrypt
ECAES decrypt
ECDSA signing
ECDSA verifying
RIM pager
2,369
5,227
2,932
2,760
5,485
PalmPilot
4,062
8,579
4,495
4,716
9,059
2283
Pentium II
4.50
11.02
6.78
5.64
11.46
Koblitz curve over F
Random curve over F
RIM pager
3,857
11,264
7,498
4,264
11,587
PalmPilot
6,245
18,273
12,046
6,816
18,753
2283
Pentium II
6.88
20.86
13.88
8.08
21.15
Table 5: Timings (in milliseconds) for ECC operations over F
2283 on various platforms.
RSA key generation
RSA encrypt (e D 3)
RSA encrypt (e D 17)
RSA encrypt (e D 216 C 1)
RSA decrypt
RSA signing
RSA verifying (e D 3)
RSA verifying (e D 17)
RSA verifying (e D 216 C 1)
512-bit modulus
768-bit modulus
Pager
73,673
213
262
428
2,475
2,466
99
147
314
Pilot
189,461
317
410
743
5,858
5,751
200
293
623
Pentium II
346.77
1.13
1.28
1.90
11.05
10.78
0.40
0.56
1.17
Pager
287,830
388
451
793
7,905
7,889
214
273
616
Pilot
496,356
587
753
1,347
16,262
16,047
413
577
1,221
Pentium II
953.01
1.87
2.17
3.32
28.05
27.72
0.78
1.07
2.24
Table 6: Timings (in milliseconds) for 512-bit and 768-bit RSA operations on various platforms.
OpenPGP speciﬁcation [9]). The compatibility library,
along with a few stream-to-memory conversion functions
allowed fairly direct use of the OpenPGP sources on the
pager.
The only code tested exclusively in the pager environ-
ment involved the user interface (see §7.1). The SDK
provides a fairly powerful and high-level API for work-
ing with the display and user input. The difﬁculties we
encountered were mostly due to the lack of support in
the API for direct manipulation of messages desired in a
PGP framework. In part, this reﬂects a deliberate design
decision by BlackBerry to develop a robust and intuitive
communication solution which provides some protection
against misbehaving applications.5
The pager DLLs for the interface and PGP library
were over 400 KB in combined size. This includes all
of the OpenPGP required algorithms and recommended
algorithms such as IDEA and RSA, along with the new
schemes based on elliptic curves. For a rough compar-
ison, the code size for the main executable from the
OpenPGP reference implementation (with the addition
of the elliptic curve routines) is 300–400 KB, depending
on platform.
5During our work on this project, BlackBerry modiﬁed the API to
provide some of the access needed to smoothly integrate PGP into their
mail application.
7 Implementation
7.1 User interface
PGP in any form has not been an easy application for
novices to manage properly, in part due to the sophis-
tication required, but also because of poor interface de-
sign [47]. The goals for our user interface design were
rather modest: that a user who is familiar with using PGP
on a workstation, and is comfortable operating the RIM
device, should, without having to refer to a manual or
help pages, be easily able to ﬁgure out how to use PGP
on the pager and avoid dangerous errors (such as those
described in [47]). As mentioned in §3.1, the graphics
capabilities and screen size of the RIM device are very
limited. This forced us to keep our PGP implementation
simple and only offer the user the essential features.
A glimpse of our user interface is provided in Figures
1–5. Clicking on the PGP icon (see Figure 1) displays
the list of users whose keys are in the public key ring
(see Figure 2). Selecting a user name displays the menu
shown in Figure 3, which allows the user to view the
key’s attributes, compose a new key, delete a key, or send
a key.
1024-bit modulus
2048-bit modulus
RSA key generation
RSA encrypt (e D 3)
RSA encrypt (e D 17)
RSA encrypt (e D 216 C 1)
RSA decrypt
RSA signing
RSA verifying (e D 3)
RSA verifying (e D 17)
RSA verifying (e D 216 C 1)
Pager
580,405
533
683
1,241
15,901
15,889
301
445
1,008
Pilot
1,705,442
1,023
1,349
2,670
36,284
36,130
729
1,058
2,374
Pentium II
2,740.87
2.70
3.23
5.34
67.32
66.56
1.23
1.76
3.86
Pager
—
1,586
2,075
4,142
112,091
111,956
1,087
1,585
3,608
Pilot
Pentium II
— 26,442.04
7.26
9.09
16.57
440.78
440.69
4.20
6.10
13.45
3,431
4,551
8,996
292,041