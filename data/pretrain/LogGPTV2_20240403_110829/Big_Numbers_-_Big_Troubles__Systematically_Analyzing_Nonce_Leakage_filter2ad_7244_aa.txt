# Big Numbers - Big Troubles: Systematically Analyzing Nonce Leakage in (EC)DSA Implementations

**Authors:**
- Samuel Weiser, Graz University of Technology
- David Schrammel, Graz University of Technology
- Lukas Bodner, Graz University of Technology
- Raphael Spreitzer, SGS Digital Trust Services

**Conference:**
- Proceedings of the 29th USENIX Security Symposium
- August 12â€“14, 2020
- ISBN: 978-1-939133-17-5
- Open access sponsored by USENIX
- [Presentation Link](https://www.usenix.org/conference/usenixsecurity20/presentation/weiser)

## Abstract

Side-channel attacks that exploit nonce leakage in (EC)DSA implementations can lead to full key recovery. Despite efforts to harden (EC)DSA implementations against side-channel leakage using the constant-time paradigm, vulnerabilities continue to be discovered. Current code review processes often miss less obvious side channels hidden deep in the call stack. To address this, a systematic analysis of nonce leakage is essential.

In this paper, we present a systematic analysis of nonce leakage in cryptographic implementations. We extend DATA, an open-source side-channel analysis framework, to detect nonce leakage. Our analysis identified multiple unknown nonce leakage vulnerabilities across all essential computation steps involving nonces. Specifically, we uncovered inherent problems in Bignumber implementations that break claimed constant-time guarantees if secrets are close to a word boundary. Lazy resizing of Bignumbers in OpenSSL and LibreSSL was found to yield a highly accurate and easily exploitable side channel, documented under two CVEs. Surprisingly, we also found a small but significant leakage in the constant-time scalar multiplication of OpenSSL and BoringSSL. During the reporting and patching process, our tool helped identify newly introduced leakage, preventing another attack-patch cycle. We have open-sourced our tool along with an intuitive graphical user interface.

## 1. Introduction

Digital signatures are crucial for secure communication channels, such as Transport Layer Security (TLS), public key infrastructures, SSH, and cryptocurrencies. The extensive use of digital signature schemes necessitates robust security, both from a cryptanalytic perspective and in their implementation. A single implementation vulnerability can completely compromise the scheme.

Most digital signature schemes used today are vulnerable to attacks on their nonces. Even partial knowledge of nonces can lead to full private key recovery, enabling attackers to forge signatures, impersonate users, intercept communications, and steal funds. Therefore, digital signature implementations must be hardened against nonce leakage. While biased random number generation is a common pitfall, side-channel attacks have also proven to be a powerful method for leaking nonce bits. Side-channel attacks continuously improve in terms of observation methods, required knowledge, key recovery speed, and the discovery of new leakage points.

Modern cryptographic libraries aim to prevent nonce leakage by using constant-time code execution. However, efforts to make implementations side-channel resistant are often not thoroughly evaluated, leading to a continuous cycle of vulnerability disclosure and patching. A more systematic approach to nonce leakage analysis is needed, but it faces several challenges:
1. Evaluating complex code bases like OpenSSL.
2. Analyzing blinded computations for side channels.
3. Avoiding false positives when dealing with non-constant-time code for public data.
4. Lack of tools specifically addressing nonce leakage.

We address these challenges by extending the DATA framework. We adapt DATA to recognize nonces as additional secrets and develop leakage models tailored for detecting nonce leakage. Our statistical tests filter leakage results, and we provide a graphical user interface for visualizing the results. This allows us to systematically analyze three popular cryptographic libraries: OpenSSL, LibreSSL, and BoringSSL.

We systematically analyze the entire lifecycle of a nonce, from its generation to its final use. Rather than proving code secure, we focus on finding actual side-channel vulnerabilities. We uncovered numerous unknown vulnerabilities, including a fundamental problem in the Bignumber representation in OpenSSL and LibreSSL. If the nonce is close to a machine word boundary, lazy resize operations can leak several nonce bits via Flush+Reload, as documented under CVE-2018-0734 and CVE-2018-0735. We also found that small nonces can leak nine nonce bits at once for the secp521r1 curve. The Bignumber implementation in BoringSSL prevents size-related issues, but we found a small but expressive leak in the constant-time scalar multiplication of BoringSSL and OpenSSL. During responsible disclosure, we identified a flaw in the OpenSSL patches that would have downgraded exponentiation to a vulnerable implementation. We report residual leakage in the patched OpenSSL version, which we exploit via controlled-channel attacks for full key recovery. Due to our findings, the OpenSSL team decided to rework Bignumber arithmetic, similar to BoringSSL.

This work provides a snapshot of the current state of nonce leakage in popular cryptographic libraries. With the help of our GUI, we analyzed known and unknown vulnerabilities, documenting their potential damage, exploitability, and patching status. We open-source both our tool and the GUI to facilitate reproducibility and future side-channel analysis.

### Contributions
- We expand an analysis framework for automated nonce leakage detection and present results in an intuitive GUI.
- We systematically analyze nonce leakage in three popular crypto libraries: OpenSSL, LibreSSL, and BoringSSL.
- We document several unknown leakage vulnerabilities resulting from fundamental flaws in the Bignumber representation of OpenSSL and LibreSSL.
- We responsibly disclosed vulnerabilities, proposed fixes, and documented residual leakage that remains unpatched.

### Outline
- **Section 2:** Background information on digital signatures and the Hidden Number Problem.
- **Section 3:** Related work on nonce attacks and side-channel analysis tools.
- **Section 4:** Presentation of our automated side-channel analysis tool.
- **Section 5:** Analysis results.
- **Section 6:** Detailed discussion of the vulnerabilities.
- **Section 7:** Evaluation of our leakage models.
- **Section 8:** Implications of our work.
- **Section 9:** Conclusion.

### Tool Availability
- Our tool and the GUI are available at:
  - [DATA Framework](https://github.com/Fraunhofer-AISEC/DATA)
  - [GUI](https://github.com/IAIK/data-gui)

## 2. Background

### 2.1 Digital Signatures

#### DSA
The Digital Signature Algorithm (DSA) [29] is based on prime fields. It relies on two primes \( p \) and \( q \), where \( q \) divides \( p - 1 \). The parameter \( g \) serves as a generator over \( p \) such that \( g^q \equiv 1 \mod p \). Keys are generated as follows:
- Private key \( x \) is sampled uniformly from \([1, q-1]\).
- Public key \( y \) is obtained by \( y \leftarrow g^x \mod p \).

The signature \((r, s)\) for message \( m \) involves a random value \( k \) denoted as a nonce:
- \( k \leftarrow [1, q-1] \)
- \( r \leftarrow (g^k \mod p) \mod q \)
- \( s \leftarrow k^{-1} \cdot (m + xr) \mod q \)

#### Other DSA Constructions
Several DSA variants exist. Schnorr signatures [47] omit the inversion step. Deterministic schemes [28, 44] derive unique nonces from the message input instead of using random numbers. ECDSA [29] is one of the most widely used signature algorithms. It computes \( r \) via scalar multiplication over an elliptic curve generator \( G \):
- \( r = k \cdot G \)

#### Nonce Attacks
Nonce-based cryptosystems strongly rely on the secrecy and uniformity of the nonce \( k \). Partial knowledge of the nonce can break the scheme [40]. This knowledge can be obtained through weak nonce generation or side channels. By collecting enough "leaky" signatures, one can formulate a Hidden Number Problem (HNP) [10] and recover the private key with lattice or Bleichenbacher attacks. Thus, an implementation needs to protect nonces throughout their entire lifetime (cf. Equations (3) to (6)).

### 2.2 The Hidden Number Problem

Nonce leakage can be encoded as a Hidden Number Problem (HNP). Solving the HNP via lattice attacks or more generic Bleichenbacher attacks reveals the private key.

#### HNP
The HNP [10, 11] denotes the problem of finding a hidden number given partial information about multiples of the hidden number. Following [6, 46], we denote \(\lfloor \cdot \rfloor_q\) as the value modulo \( q \) and \( |\cdot|_q \) as reducing the argument modulo \( q \) into the range \([-q/2, q/2]\) and then taking the absolute value. \( MSB_{L,q}(k) \) denotes knowledge about the \( L \) most significant bits of \( k \), i.e., an integer \( u \) satisfying \( |k - u|_q < q/2^{L+1} \).

The HNP attempts to recover a hidden number \( x \in [1, q-1] \), given knowledge of its multiples \( t_1, ..., t_d \in \mathbb{F}_q \) for a known prime \( q \) and knowledge about \( u_i = MSB_{L,q}(\lfloor t_i x \rfloor_q) \). This yields a system of \( d \) inequalities:
\[ |\lfloor t_i x \rfloor_q - u_i|_q < q/2^{L_i+1} \quad \text{for all } i \in \{1, ..., d\} \]

(EC)DSA can be encoded as an instance of the HNP to recover the private key \( x \) from signatures \((r, s)\) and known nonce bits \( u = MSB_{L,q}(k) \). Using Equation (6) gives:
\[ |k - u|_q < q/2^{L+1} \]
\[ |\lfloor (m + xr) \cdot s^{-1} \rfloor_q - u|_q < q/2^{L+1} \]
\[ |\lfloor \lfloor s^{-1} r \rfloor_q \cdot x \rfloor_q - \lfloor u - s^{-1} m \rfloor_q|_q < q/2^{L+1} \]

Applying Equation (11) to \( d \) signatures \((r_i, s_i)\) and nonce bits \( u_i \) yields an HNP. The HNP can also be applied when leaking inverse nonces, least significant nonce bits, or a block of contiguous [27] or non-contiguous bits [26].

#### Lattice
Boneh et al. [10] mapped the HNP to a Closest Vector Problem (CVP). Let \( t = (t_1, ..., t_d, 1) \) and \( t_x = (t_1 x, ..., t_d x, x) \). According to the HNP, \( \lfloor t_x \rfloor_q \) will be a close vector to \( u = (u_1, ..., u_d, 0) \) with a distance smaller than \( q/2^{L_i+1} \) for the first \( d \) components. By constructing a lattice basis \( B \) from \( t \) and solving the CVP, the closest vector \( t_x \) reveals the private key \( x \). Boneh et al. solved the CVP using LLL [33] lattice reduction and Babaiâ€™s nearest plane algorithm [4] to recover Diffie-Hellman keys.

Different representations of the lattice exist [6, 38, 39]. To ensure that the closest vector reveals the private key \( x \), the first \( d \) components of \( t \) and \( u \) are scaled by \( 2^{L_i+1} \). Following [6], this gives a \( d + 1 \)-dimensional row-wise lattice basis \( B \):
\[ B = \begin{pmatrix}
2^{L_1+1} q & 2^{L_1+1} t_1 & \cdots & 2^{L_d+1} q & 2^{L_d+1} t_d & 0 \\
\vdots & \vdots & \ddots & \vdots & \vdots & \vdots \\
0 & 0 & \cdots & 0 & 0 & 1
\end{pmatrix} \]

Instead of using Babaiâ€™s nearest plane algorithm, it is also possible to embed the CVP into a Shortest Vector Problem (SVP) and solve it directly via lattice reduction [22, 40, 57]. The idea is to include the scaled vector \( u' \) in the lattice basis:
\[ B' = \begin{pmatrix}
B & 0 \\
u' & q
\end{pmatrix} \]

Boneh et al. [10] showed that this requires at least \( L = \log_2 \log_2 q \) bit leakage. Howgrave-Graham and Smart [27] recovered the private key for 160-bit DSA given 30 signatures and knowledge of 8 bits for each nonce. Naccache et al. [37] only required 27 signatures for the same leakage using the BKZ algorithm. Given 200 signatures and two shared LSBs of the nonce, FaugÃ¨re et al. [22] recovered the private key using a lattice attack. Besides, they recovered the private key with a probability of 90% with just a single shared LSB and 400 signatures.

#### Bleichenbacher
Bleichenbacher [9] proposed an FFT-based attack using exponential sums to detect influences of small biases. Compared to lattice attacks, this requires more samples but is noise-tolerant and works with small and even fractional bit leaks [35, 36]. Aranha et al. [3] exploited a single-bit leakage to recover the private key.

### 2.3 Side-Channel Attacks

Side-channel attacks allow breaking cryptographic implementations via unintended information leakage. They range from observing the overall execution time [30] to more fine-grained microarchitectural effects. Cache attacks target code accesses on a cache-line granularity via Flush+Reload [61] or data accesses via the more generic but coarse-grained Prime+Probe technique [42, 50]. In an SGX setting, powerful controlled-channel attacks [59] leak page accesses with high accuracy. In this work, we consider address leakage, as a generalization of the above side channels. Physical side channels are out of scope.

## 3. Related Work

### 3.1 Side-Channel Attacks

#### Modular Exponentiation
Square-and-multiply is a common technique for computing modular exponentiations and was targeted by Yarom and Falkner [61] in GnuPG. They extracted 97% of an RSA key from a single sign operation observed with Flush+Reload. Similarly, Prime+Probe attacks have been launched against GnuPG [34] and libgcrypt [64]. A faster alternative is the sliding window approach [12]. Percival [42] attacked OpenSSLâ€™s sliding window implementation by a technique that became known as Prime+Probe [50]. Similarly, the sliding window implementations of libgcrypt RSA [8] and GnuPG ElGamal [34] have been attacked.

Using fixed windows eradicates leakage due to conditional code execution in the sliding window approach. However, an implementation flaw in an earlier version of OpenSSL allowed bypassing the fixed window implementation [24]. To prevent leakage of the window multipliers, the scatter-gather technique aligns multipliers in memory such that the same cache lines are accessed all the time. Yarom et al. [62] exploited cache-bank conflicts to attack OpenSSLâ€™s scatter-gather implementation.

In the SGX setting, Prime+Probe attacks have been launched from malicious operating systems against the fixed-window exponentiation during the RSA decryption in the Intel IPP library [13]. Besides, Prime+Probe attacks have also been launched against other cryptographic implementations.