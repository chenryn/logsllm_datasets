](https://images.seebug.org/content/images/2018/09/2919144a-7b57-4a86-81b8-da11386fac8e.png-w331s)
图 3-13 案例3涉及样本的解密算法
 图 3-14 案例9涉及样本的解密算法
根据案例3中update.exe的时间戳，我们可以判断该样本出现于2013年2月6日，虽然时间戳是可以被修改的，但是结合案例3释放的欺骗文档的内容（请参见第2章，doc中内容的时间），我们相信它具有一定的参考价值。
##### 3.4.2 Gh0st后门
通过我们对于案例4中update.exe的分析，得到该样本所使用的互斥量为“chinaheikee__inderjns”，该互斥量与我们分析过的gh0st样本的互斥量一致，是默认配置，而且上线数据包与gh0st
3.75版本非常一致，因此我们可以判定该update.exe为gh0st后门。
![
](https://images.seebug.org/content/images/2018/09/ee8c7485-0c78-4f16-8984-c89b36fd7cdc.png-w331s)
图 3-15 Gh0st RAT后门界面
##### 3.4.3 HttpBots后门
通过我们对于案例5中svchost.exe的分析，可以确定该样本实际是一个BOT后门程序。svchost.exe通过Web端来控制安装有该后门程序的机器，图3-16为具体指令信息截图。
![
](https://images.seebug.org/content/images/2018/09/93cf9417-63da-4aad-b6b7-b68d2d7a3686.png-w331s)
图 3-16 httpbots后门控制指令
表 3-4 指令说明 ![
](https://images.seebug.org/content/images/2018/09/1e86dc8d-acad-4bac-8bd4-27cc57aa93eb.png-w331s)
##### 3.4.4 ZXSHELL后门（针对性）
经过安天分析，案例6、7、8中释放的PE文件确定为ZXShell后门家族（分别为3个不同版本），是使用ZXShell源码修改后编译的，具有ZXShell后门常规功能：系统信息获取、文件管理、进程查看等。
很特别的一点是作者将版本修改为V3.6（ZXShell最后更新版本为3.0），并新增了窃密功能：样本收集 _.doc_ 、 _.xls_ 、 _.ppt_
等文档文件（案例6只收集网络磁盘、U盘、CDROM中的文件，案例7-8则收集全盘文件），且为保证收集的文档具有价值，只收集半年内修改过的文档文件并使用RAR打包，以日期加磁盘卷序列号命名（案例6以磁盘卷序列号命名），后缀名和压缩包密码各不相同。
![
](https://images.seebug.org/content/images/2018/09/081379a9-ef1b-4b7d-86e8-b217984e83b7.png-w331s)
图 3-17 案例6只收集U盘、CD、网络磁盘中的文件
![
](https://images.seebug.org/content/images/2018/09/664efaf7-6bbc-4010-a206-17a5b3c79078.png-w331s)
图 3-18 打包收集到的文档
根据已有样本分析配置后，我们统计出样本搜集文档的类型： _.doc_ 、 _.xls_ 、 _.ppt_ 、 _.wps_ 、*.pdf。
经分析，我们发现了样本新增的功能：
  1. 获取IE自动保存的邮箱账户密码和对应网址，对IE6和IE6以上的版本采取不同的方法。
  2. 收集网络信息、主机信息、进程信息，记录在如下目录中：`%Application Data%\Microsoft\Windows\Profiles.log`
  3. 样本根据各自的配置，收集全盘包含指定关键字的文件路径、C盘Program Files目录下的EXE文件路径，将收集到的文件路径信息同样记录在`%Application Data\Microsoft\Windows\Profiles.log`
![
](https://images.seebug.org/content/images/2018/09/0ea90fb9-688b-434e-8126-8c7011b7baa8.png-w331s)
图 3-19 收集指定关键文件列表
根据目前已捕获样本，我们发现每个样本都硬编码了三个关键字，根据关键字对攻击目标进行敏感资料收集，去重后的具体关键字为十二个，包括“战”、“军”、“航”等，通过这些关键字我们可以清晰的了解“绿斑”组织的作业意图：
  1. 样本存在一个额外域名，自动回传Profiles.log文件和RAR打包文件。
  2. 后门发包：`***_IP-计算机名^^//@@&&***（“***”部分各个样本不同）`
  3. 监听回应：kwo（口令）
  4. 后门发包：IP-计算机名-2014010106.tmpp19769（年月日小时.tmpp文件大小）
  5. 监听回应：任意（支持以指定偏移读取文件）
  6. 后门发包：Profiles.log文件内容（参见图3-20）
![
](https://images.seebug.org/content/images/2018/09/1a9254b9-e85c-4884-8061-4149779c59de.png-w331s)
图 3-20 Profiles.log文件内容
  1. 案例6样本中，指令的帮助提示为正常中文，而案例8样本是乱码，经过分析，发现新样本其实对这部分中文是其他编码，而在编译程序时候却将这部分转换为GB2312编码，导致显示乱码。
![
](https://images.seebug.org/content/images/2018/09/41622923-e6d8-464a-a90f-5a23bd3158c5.png-w331s)
图 3-21 案例6样本指令提示
![
](https://images.seebug.org/content/images/2018/09/c133398e-7b8b-404a-b73a-5bdf50b40be5.png-w331s)
图 3-22 案例8样本指令提示
  1. 案例7样本对中国安全厂商产品的相关进程的判断，根据安装不同的杀软，采取退出、正常运行、添加特殊启动项等不同的行为，可以看出这是针对中国用户专门设计的恶意程序。
表3-5是该组织使用的样本与ZXShell原版功能的对比，可以发现这批样本只保留了必要的远控功能，并添加了ZXShell原本没有的窃密相关功能，具体功能对比如表3-5所示：
表 3-5 案例6、7、8样本与 ZXShell RAT原版后门对比 ![
](https://images.seebug.org/content/images/2018/09/01cf65b5-51d4-455d-99ab-97d88254fd6c.png-w331s)
##### 3.4.5 攻击期间部分样本的检出情况
事件中的后门样本均是互联网公开的RAT程序，一般而言安全厂商对这些程序都会重点关注，基本主流安全厂商都可以检测和查杀，但是该组织对这些公开的RAT程序进行修改和加密使用，使这些样本在其行动的一段时间内的整体检出率不到8%，一些个别样本甚至只有1-2家安全厂商检出，可见这批样本是针对杀软做了针对性的免杀处理的，可以在目标主机持续化驻留。
![
](https://images.seebug.org/content/images/2018/09/d44bdabb-e4b5-4a65-9062-125d1673f9ab.png-w331s)
图 3-23 部分样本检出率
##### 3.4.6 近期捕获样本分析
###### 3.4.6.1 EXE文件
EXE文件是3.3.2章节中提到的由HTA文件下载并执行的最终载荷，该类文件主要功能是从指定网址下载ShellCode，解密之后，创建线程执行此ShellCode。以jin2.exe为例分析，样本关键代码如下：
![
](https://images.seebug.org/content/images/2018/09/ad2e7b41-4139-41c0-ab78-1a5920a59148.png-w331s)
图 3-24 连接指定网址下载ShellCode
![
](https://images.seebug.org/content/images/2018/09/7d716d5c-64dc-467e-83b8-df78bb1c5dc5.png-w331s)
图 3-25 解密shellcode函数
从指定网址下载完ShellCode后，样本对ShellCode进行解密，然后分配内存将解密后的ShellCode复制过去。随后创建一个线程，将ShellCode的首地址作为参数传给线程函数从而运行ShellCode。
![
](https://images.seebug.org/content/images/2018/09/e0a7a91e-6899-4d41-9344-350c6be9f15a.png-w331s)
图 3-26 分配内存，创建线程执行ShellCode
每个EXE文件功能代码基本相同，只有下载ShellCode的地址不同的，各个地址如下表所示：
表 3-6 EXE文件下载shellcode对应列表
![
](https://images.seebug.org/content/images/2018/09/2fbb5bf0-0abf-4b9f-8bc6-c055397d9c55.png-w331s)
###### 3.4.6.2 ShellCode（Poison Ivy）
我们对解密后的ShellCode进行分析，发现其ShellCode为Poison