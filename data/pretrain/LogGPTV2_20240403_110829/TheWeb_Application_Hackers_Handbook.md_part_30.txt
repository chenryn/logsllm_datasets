1. If HTTP authentication is being used, it is possible that no session manage-
ment mechanism is implemented. Use the methods described previously to
examine the role played by any token-like items of data.
2. If the application uses a sessionless state mechanism, transmitting all
data required to maintain state via the client, this may sometimes be
difficult to detect with certainty, but the following are strong indicators
that this kind of mechanism is being used:
n Token-like data items issued to the client are fairly long (100 or more bytes).
n The application issues a new token-like item in response to every request.
n The data in the item appears to be encrypted (and therefore has no
discernible structure) or signed (and therefore has a meaningful structure
accompanied by a few bytes of meaningless binary data).
n The application may reject attempts to submit the same item with more
than one request.
3. If the evidence suggests strongly that the application is not using session
tokens to manage state, it is unlikely that any of the attacks described in
this chapter will achieve anything. Your time probably would be better
spent looking for other serious issues such as broken access controls or
code injection.
cc0077..iinndddd 220099 88//1199//22001111 1122::0077::3399 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 210
210 Chapter 7 n Attacking Session Management
Weaknesses in Token Generation
Session management mechanisms are often vulnerable to attack because tokens
are generated in an unsafe manner that enables an attacker to identify the values
of tokens that have been issued to other users.
NOTE There are numerous locations where an application’s security
depends on the unpredictability of tokens it generates. Here are some
examples:
n Password recovery tokens sent to the user’s registered e-mail address
n Tokens placed in hidden form fi elds to prevent cross-site request forgery
attacks (see Chapter 13)
n Tokens used to give one-time access to protected resources
n Persistent tokens used in “remember me” functions
n Tokens allowing customers of a shopping application that does not use
authentication to retrieve the current status of an existing order
The considerations in this chapter relating to weaknesses in token generation
apply to all these cases. In fact, because many of today’s applications rely on
mature platform mechanisms to generate session tokens, it is often in these
other areas of functionality that exploitable weaknesses in token generation
are found.
Meaningful Tokens
Some session tokens are created using a transformation of the user’s username
or e-mail address, or other information associated with that person. This infor-
mation may be encoded or obfuscated in some way and may be combined with
other data.
For example, the following token may initially appear to be a long random
string:
757365723d6461663b6170703d61646d696e3b646174653d30312f31322f3131
However, on closer inspection, you can see that it contains only hexadecimal
characters. Guessing that the string may actually be a hex encoding of a string
of ASCII characters, you can run it through a decoder to reveal the following:
user=daf;app=admin;date=10/09/11
cc0077..iinndddd 221100 88//1199//22001111 1122::0077::3399 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 211
Chapter 7 n Attacking Session Management 211
Attackers can exploit the meaning within this session token to attempt to
guess the current sessions of other application users. Using a list of enumerated
or common usernames, they can quickly generate large numbers of potentially
valid tokens and test these to confi rm which are valid.
Tokens that contain meaningful data often exhibit a structure. In other words,
they contain several components, often separated by a delimiter, that can be
extracted and analyzed separately to allow an attacker to understand their
function and means of generation. Here are some components that may be
encountered within structured tokens:
n The account username
n The numeric identifi er that the application uses to distinguish between
accounts
n The user’s fi rst and last names
n The user’s e-mail address
n The user’s group or role within the application
n A date/time stamp
n An incrementing or predictable number
n The client IP address
Each different component within a structured token, or indeed the entire
token, may be encoded in different ways. This can be a deliberate measure to
obfuscate their content, or it can simply ensure safe transport of binary data via
HTTP. Encoding schemes that are commonly encountered include XOR, Base64,
and hexadecimal representation using ASCII characters (see Chapter 3). It may
be necessary to test various decodings on each component of a structured token
to unpack it to its original form.
NOTE When an application handles a request containing a structured token,
it may not actually process every component with the token or all the data
contained in each component. In the previous example, the application may
Base64-decode the token and then process only the “user” and “date” com-
ponents. In cases where a token contains a blob of binary data, much of this
data may be padding. Only a small part of it may actually be relevant to the
validation that the server performs on the token. Narrowing down the sub-
parts of a token that are actually required can often considerably reduce the
amount of apparent entropy and complexity that the token contains.
cc0077..iinndddd 221111 88//1199//22001111 1122::0077::3399 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 212
212 Chapter 7 n Attacking Session Management
HACK STEPS
1. Obtain a single token from the application, and modify it in systematic
ways to determine whether the entire token is validated or whether some
of its subcomponents are ignored. Try changing the token’s value one
byte at a time (or even one bit at a time) and resubmitting the modified
token to the application to determine whether it is still accepted. If you
find that certain portions of the token are not actually required to be cor-
rect, you can exclude these from any further analysis, potentially reducing
the amount of work you need to perform. You can use the “char frobber”
payload type in Burp Intruder to modify a token’s value in one character
position at a time, to help with this task.
2. Log in as several different users at different times, and record the tokens
received from the server. If self-registration is available and you can choose
your username, log in with a series of similar usernames containing small
variations between them, such as A, AA, AAA, AAAA, AAAB, AAAC, AABA,
and so on. If other user-specific data is submitted at login or stored in user
profiles (such as an e-mail address), perform a similar exercise to vary that
data systematically, and record the tokens received following login.
3. Analyze the tokens for any correlations that appear to be related to the
username and other user-controllable data.
4. Analyze the tokens for any detectable encoding or obfuscation. Where the
username contains a sequence of the same character, look for a correspond-
ing character sequence in the token, which may indicate the use of XOR
obfuscation. Look for sequences in the token containing only hexadecimal
characters, which may indicate a hex encoding of an ASCII string or other
information. Look for sequences that end in an equals sign and/or that con-
tain only the other valid Base64 characters: a to z, A to Z, 0 to 9, +, and /.
5. If any meaning can be reverse-engineered from the sample of session
tokens, consider whether you have sufficient information to attempt to
guess the tokens recently issued to other application users. Find a page
of the application that is session-dependent, such as one that returns an
error message or a redirect elsewhere if accessed without a valid session.
Then use a tool such as Burp Intruder to make large numbers of requests
to this page using guessed tokens. Monitor the results for any cases in
which the page is loaded correctly, indicating a valid session token.
TRY IT!
http://mdsec.net/auth/321/
http://mdsec.net/auth/329/
http://mdsec.net/auth/331/
cc0077..iinndddd 221122 88//1199//22001111 1122::0077::3399 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 213
Chapter 7 n Attacking Session Management 213
Predictable Tokens
Some session tokens do not contain any meaningful data associating them
with a particular user. Nevertheless, they can be guessed because they contain
sequences or patterns that allow an attacker to extrapolate from a sample of
tokens to fi nd other valid tokens recently issued by the application. Even if the
extrapolation involves some trial and error (for example, one valid guess per
1,000 attempts), this would still enable an automated attack to identify large
numbers of valid tokens in a relatively short period of time.
Vulnerabilities relating to predictable token generation may be much easier to
discover in commercial implementations of session management, such as web
servers or web application platforms, than they are in bespoke applications.
When you are remotely targeting a bespoke session management mechanism,
your sample of issued tokens may be restricted by the server’s capacity, the
activity of other users, your bandwidth, network latency, and so on. In a labora-
tory environment, however, you can quickly create millions of sample tokens,
all precisely sequenced and time-stamped, and you can eliminate interference
caused by other users.
In the simplest and most brazenly vulnerable cases, an application may use
a simple sequential number as the session token. In this case, you only need
to obtain a sample of two or three tokens before launching an attack that will
quickly capture 100% of currently valid sessions.
Figure 7-1 shows Burp Intruder being used to cycle the last two digits of a
sequential session token to fi nd values where the session is still active and can
be hijacked. Here, the length of the server’s response is a reliable indicator that
a valid session has been found. The extract grep feature has also been used to
show the name of the logged-in user for each session.
In other cases, an application’s tokens may contain more elaborate sequences
that take some effort to discover. The types of potential variations you might
encounter here are open-ended, but the authors’ experience in the fi eld indicates
that predictable session tokens commonly arise from three different sources:
n Concealed sequences
n Time dependency
n Weak random number generation
We will look at each of these areas in turn.
Concealed Sequences
It is common to encounter session tokens that cannot be easily predicted when
analyzed in their raw form but that contain sequences that reveal themselves
when the tokens are suitably decoded or unpacked.
cc0077..iinndddd 221133 88//1199//22001111 1122::0077::3399 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 214
214 Chapter 7 n Attacking Session Management
Figure 7-1: An attack to discover valid sessions where the session token is
predictable
Consider the following series of values, which form one component of a
structured session token:
lwjVJA
Ls3Ajg
xpKr+A
XleXYg
9hyCzA
jeFuNg
JaZZoA
No immediate pattern is discernible; however, a cursory inspection indicates
that the tokens may contain Base64-encoded data. In addition to the mixed-case
alphabetic and numeric characters, there is a + character, which is also valid in
a Base64-encoded string. Running the tokens through a Base64 decoder reveals
the following:
--Õ$
.ÍÀŽ
Æ’«ø
^W-b
ö‚Ì
?án6
%¦Y
cc0077..iinndddd 221144 88//1199//22001111 1122::0077::3399 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 215
Chapter 7 n Attacking Session Management 215
These strings appear to be gibberish and also contain nonprinting characters. This
normally indicates that you are dealing with binary data rather than ASCII text.
Rendering the decoded data as hexadecimal numbers gives you the following:
9708D524
2ECDC08E
C692ABF8
5E579762
F61C82CC
8DE16E36
25A659A0
There is still no visible pattern. However, if you subtract each number from the
previous one, you arrive at the following:
FF97C4EB6A
97C4EB6A
FF97C4EB6A
97C4EB6A
FF97C4EB6A
FF97C4EB6A
which immediately reveals the concealed pattern. The algorithm used to generate
tokens adds 0x97C4EB6A to the previous value, truncates the result to a 32-bit
number, and Base64-encodes this binary data to allow it to be transported using
the text-based protocol HTTP. Using this knowledge, you can easily write a
script to produce the series of tokens that the server will next produce, and the
series that it produced prior to the captured sample.
Time Dependency
Some web servers and applications employ algorithms to generate session tokens
that use the time of generation as an input to the token’s value. If insuffi cient
other entropy is incorporated into the algorithm, you may be able to predict
other users’ tokens. Although any given sequence of tokens on its own may
appear to be random, the same sequence coupled with information about the
time at which each token was generated may contain a discernible pattern. In a
busy application with a large number of sessions being created each second, a
scripted attack may succeed in identifying large numbers of other users’ tokens.
When testing the web application of an online retailer, the authors encoun-
tered the following sequence of session tokens:
3124538-1172764258718
3124539-1172764259062
3124540-1172764259281
3124541-1172764259734
3124542-1172764260046
3124543-1172764260156
cc0077..iinndddd 221155 88//1199//22001111 1122::0077::3399 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 216
216 Chapter 7 n Attacking Session Management
3124544-1172764260296
3124545-1172764260421
3124546-1172764260812
3124547-1172764260890
Each token is clearly composed of two separate numeric components. The
fi rst number follows a simple incrementing sequence and is easy to predict.
The second number increases by a varying amount each time. Calculating the
differences between its value in each successive token reveals the following:
344
219
453
312
110
140
125
391
78
The sequence does not appear to contain a reliably predictable pattern. However,
it would clearly be possible to brute-force the relevant number range in an auto-
mated attack to discover valid values in the sequence. Before attempting this
attack, however, we wait a few minutes and gather a further sequence of tokens:
3124553-1172764800468
3124554-1172764800609
3124555-1172764801109
3124556-1172764801406
3124557-1172764801703
3124558-1172764802125
3124559-1172764802500
3124560-1172764802656
3124561-1172764803125
3124562-1172764803562
Comparing this second sequence of tokens with the fi rst, two points are imme-
diately obvious:
n The fi rst numeric sequence continues to progress incrementally; however,
fi ve values have been skipped since the end of the fi rst sequence. This is
presumably because the missing values have been issued to other users
who logged in to the application in the window between the two tests.
n The second numeric sequence continues to progress by similar intervals
as before; however, the fi rst value we obtain is a massive 539,578 greater
than the previous value.
cc0077..iinndddd 221166 88//1199//22001111 1122::0077::3399 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 217
Chapter 7 n Attacking Session Management 217
This second observation immediately alerts us to the role played by time
in generating session tokens. Apparently, only fi ve tokens have been issued
between the two token-grabbing exercises. However, a period of approximately
10 minutes has elapsed. The most likely explanation is that the second number
is time-dependent and is probably a simple count of milliseconds.
Indeed, our hunch is correct. In a subsequent phase of our testing we perform
a code review, which reveals the following token-generation algorithm:
String sessId = Integer.toString(s_SessionIndex++) +