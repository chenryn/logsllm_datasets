      SCMP_CMP_LT = 2,        /** [seccomp_policy.c
> ](https://gist.github.com/mstemm/1bc06c52abb7b6b4feef79d7bfff5815#file-> seccomp_policy-c)
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "seccomp-bpf.h"
    void install_syscall_filter()
    {
            struct sock_filter filter[] = {
                    /* Validate architecture. */
                    VALIDATE_ARCHITECTURE,
                    /* Grab the system call number. */
                    EXAMINE_SYSCALL,
                    /* List allowed syscalls. We add open() to the set of
                       allowed syscalls by the strict policy, but not
                       close(). */
                    ALLOW_SYSCALL(rt_sigreturn),
    #ifdef __NR_sigreturn
                    ALLOW_SYSCALL(sigreturn),
    #endif
                    ALLOW_SYSCALL(exit_group),
                    ALLOW_SYSCALL(exit),
                    ALLOW_SYSCALL(read),
                    ALLOW_SYSCALL(write),
                    ALLOW_SYSCALL(open),
                    KILL_PROCESS,
            };
            struct sock_fprog prog = {
                    .len = (unsigned short)(sizeof(filter)/sizeof(filter[0])),
                    .filter = filter,
            };
            assert(prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) == 0);
            assert(prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog) == 0);
    }
    int main(int argc, char **argv)
    {
            int output = open("output.txt", O_WRONLY);
            const char *val = "test";
            printf("Calling prctl() to set seccomp with filter...\n");
            install_syscall_filter();
            printf("Writing to an already open file...\n");
            write(output, val, strlen(val)+1);
            printf("Trying to open file for reading...\n");
            int input = open("output.txt", O_RDONLY);
            printf("Note that open() worked. However, close() will not\n");
            close(input);
            printf("You will not see this message--the process will be killed first\n");
    }
执行结果
    $ ./seccomp_policy
    Calling prctl() to set seccomp with filter...
    Writing to an already open file...
    Trying to open file for reading...
    Note that open() worked. However, close() will not
    Bad system call
## seccomp-tools
一款用于分析seccomp的开源工具，项目地址：
主要功能：
  * Dump： 从可执行文件中自动转储 seccomp BPF 
  * Disasm： 将 seccomp BPF 转换为人类可读的格式 
  * Asm：使编写seccomp规则类似于编写代码
  * Emu： 模拟 seccomp 规则 
安装
    sudo apt install gcc ruby-dev
    gem install seccomp-tools
使用
    null@ubuntu:~/seccomp$ seccomp-tools dump ./simple_syscall_seccomp
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A  example.json
    {
        "defaultAction": "SCMP_ACT_ERRNO",