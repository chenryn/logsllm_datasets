retrieve it. The encrypted authentication credentials can then be saved directly to regular storage on the the device
(e.g. SharedPreferences ). This design is a relatively safe way to ensure the user actually entered an authorized
fingerprint. Note however that this setup requires the app to hold the symmetric key in memory during cryptographic
operations, potentially exposing it to attackers that manage to access the app's memory during runtime.
An even more secure option is using asymmetric cryptography. Here, the mobile app creates an asymmetric key pair
in the KeyStore and enrolls the public key on the server backend. Later transactions are then signed with the private
key and verified by the server using the public key. The advantage of this is that transactions can be signed using
KeyStore APIs without ever extracting the private key from the KeyStore. Consequently, it is impossible for attackers
to obtain the key from memory dumps or by using instrumentation.
Note that there are quite some SDKs provided by vendors, which should provide biometric support, but which have
their own insecurities. Be very cautious when using third party SDKs to handle sensitive authentication logic.
Static Analysis
Begin by searching for FingerprintManager.authenticate calls. The first parameter passed to this method should be a
CryptoObject instance which is a wrapper class for crypto objects supported by FingerprintManager. Should the
parameter be set to null , this means the fingerprint authorization is purely event-bound, likely creating a security
issue.
The creation of the key used to initialize the cipher wrapper can be traced back to the CryptoObject . Verify the key
was both created using the KeyGenerator class in addition to setUserAuthenticationRequired(true) being called
during creation of the KeyGenParameterSpec object (see code samples below).
Make sure to verify the authentication logic. For the authentication to be successful, the remote endpoint must require
the client to present the secret retrieved from the KeyStore, a value derived from the secret, or a value signed with the
client private key (see above).
Safely implementing fingerprint authentication requires following a few simple principles, starting by first checking if
that type of authentication is even available. On the most basic front, the device must run Android 6.0 or higher (API
23+). Four other prerequisites must also be verified:
The permission must be requested in the Android Manifest:
Fingerprint hardware must be available:
FingerprintManager fingerprintManager = (FingerprintManager)
context.getSystemService(Context.FINGERPRINT_SERVICE);
fingerprintManager.isHardwareDetected();
The user must have a protected lock screen:
KeyguardManager keyguardManager = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE
);
keyguardManager.isKeyguardSecure(); //note if this is not the case: ask the user to setup a protecte
d lock screen
193
Local Authentication on Android
At least one finger should be registered:
fingerprintManager.hasEnrolledFingerprints();
The application should have permission to ask for a user fingerprint:
context.checkSelfPermission(Manifest.permission.USE_FINGERPRINT) == PermissionResult.PERMISSION_GRANT
ED;
If any of the above checks fail, the option for fingerprint authentication should not be offered.
It is important to remember that not every Android device offers hardware-backed key storage. The KeyInfo class
can be used to find out whether the key resides inside secure hardware such as a Trusted Execution Environment
(TEE) or Secure Element (SE).
SecretKeyFactory factory = SecretKeyFactory.getInstance(getEncryptionKey().getAlgorithm(), ANDROID_KEYSTORE);
KeyInfo secetkeyInfo = (KeyInfo) factory.getKeySpec(yourencryptionkeyhere, KeyInfo.class);
secetkeyInfo.isInsideSecureHardware()
On certain systems, it is possible to enforce the policy for biometric authentication through hardware as well. This is
checked by:
keyInfo.isUserAuthenticationRequirementEnforcedBySecureHardware();
Fingerprint Authentication using a Symmetric Key
Fingerprint authentication may be implemented by creating a new AES key using the KeyGenerator class by adding
setUserAuthenticationRequired(true) in KeyGenParameterSpec.Builder .
generator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, KEYSTORE);
generator.init(new KeyGenParameterSpec.Builder (KEY_ALIAS,
KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
.setBlockModes(KeyProperties.BLOCK_MODE_CBC)
.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
.setUserAuthenticationRequired(true)
.build()
);
generator.generateKey();
To perform encryption or decryption with the protected key, create a Cipher object and initialize it with the key alias.
SecretKey keyspec = (SecretKey)keyStore.getKey(KEY_ALIAS, null);
if (mode == Cipher.ENCRYPT_MODE) {
cipher.init(mode, keyspec);
Keep in mind, a new key cannot be used immediately - it has to be authenticated through the FingerprintManager
first. This involves wrapping the Cipher object into FingerprintManager.CryptoObject which is passed to
FingerprintManager.authenticate before it will be recognized.
cryptoObject = new FingerprintManager.CryptoObject(cipher);
fingerprintManager.authenticate(cryptoObject, new CancellationSignal(), 0, this, null);
194
Local Authentication on Android
When the authentication succeeds, the callback method
onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) is called at which point, the authenticated
CryptoObject can be retrieved from the result.
public void authenticationSucceeded(FingerprintManager.AuthenticationResult result) {
cipher = result.getCryptoObject().getCipher();
//(... do something with the authenticated cipher object ...)
}
Fingerprint Authentication using an Asymmetric Key Pair
To implement fingerprint authentication using asymmetric cryptography, first create a signing key using the
KeyPairGenerator class, and enroll the public key with the server. You can then authenticate pieces of data by signing
them on the client and verifying the signature on the server. A detailed example for authenticating to remote servers
using the fingerprint API can be found in the Android Developers Blog.
A key pair is generated as follows:
KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, "AndroidKeyStore");
keyPairGenerator.initialize(
new KeyGenParameterSpec.Builder(MY_KEY,
KeyProperties.PURPOSE_SIGN)
.setDigests(KeyProperties.DIGEST_SHA256)
.setAlgorithmParameterSpec(new ECGenParameterSpec("secp256r1"))
.setUserAuthenticationRequired(true)
.build());
keyPairGenerator.generateKeyPair();
To use the key for signing, you need to instantiate a CryptoObject and authenticate it through FingerprintManager .
Signature.getInstance("SHA256withECDSA");
KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
keyStore.load(null);
PrivateKey key = (PrivateKey) keyStore.getKey(MY_KEY, null);
signature.initSign(key);
CryptoObject cryptObject = new FingerprintManager.CryptoObject(signature);
CancellationSignal cancellationSignal = new CancellationSignal();
FingerprintManager fingerprintManager =
context.getSystemService(FingerprintManager.class);
fingerprintManager.authenticate(cryptoObject, cancellationSignal, 0, this, null);
You can now sign the contents of a byte array inputBytes as follows.
Signature signature = cryptoObject.getSignature();
signature.update(inputBytes);
byte[] signed = signature.sign();
Note that in cases where transactions are signed, a random nonce should be generated and added to the signed
data. Otherwise, an attacker could replay the transaction.
To implement authentication using symmetric fingerprint authentication, use a challenge-response protocol.
Additional Security Features
Android Nougat (API 24) adds the setInvalidatedByBiometricEnrollment(boolean invalidateKey) method to
KeyGenParameterSpec.Builder . When invalidateKey value is set to true (the default), keys that are valid for
fingerprint authentication are irreversibly invalidated when a new fingerprint is enrolled. This prevents an attacker from
195
Local Authentication on Android
retrieving they key even if they are able to enroll an additional fingerprint. Android Oreo (API 26) adds two additional
error-codes:
FINGERPRINT_ERROR_LOCKOUT_PERMANENT : The user has tried too many times to unlock their device using the
fingerprint reader.
FINGERPRINT_ERROR_VENDOR â€“ A vendor-specific fingerprint reader error occurred.
Third party SDKs
Make sure that fingerprint authentication and/or other types of biometric authentication happens based on the Android
SDK and its APIs. If this is not the case, ensure that the alternative SDK has been properly vetted for any
weaknesses. Make sure that the SDK is backed by the TEE/SE which unlocks a (cryptographic) secret based on the
biometric authentication. This secret should not be unlocked by anything else, but a valid biometric entry. That way, it
should never be the case that the fingerprint logic can just be bypassed.
Dynamic Analysis
Patch the app or use runtime instrumentation to bypass fingerprint authentication on the client. For example, you
could use Frida to call the onAuthenticationSucceeded callback method directly. Refer to the chapter "Tampering and
Reverse Engineering on Android" for more information.
References
OWASP Mobile Top 10 2016
M4 - Insecure Authentication - https://www.owasp.org/index.php/Mobile_Top_10_2016-M4-
Insecure_Authentication
OWASP MASVS
MSTG-AUTH-1: "If the app provides users access to a remote service, some form of authentication, such as
username/password authentication, is performed at the remote endpoint."
MSTG-AUTH-8: "Biometric authentication, if any, is not event-bound (i.e. using an API that simply returns "true"
or "false"). Instead, it is based on unlocking the keychain/keystore."
MSTG-STORAGE-11: "The app enforces a minimum device-access-security policy, such as requiring the user to
set a device passcode."
CWE
CWE-287 - Improper Authentication
CWE-604 - Use of Client-Side Authentication
Request App Permissions
Runtime Permissions - https://developer.android.com/training/permissions/requesting
196
Android Network APIs
Android Network APIs
Testing Endpoint Identify Verification (MSTG-NETWORK-3)
Using TLS to transport sensitive information over the network is essential for security. However, encrypting
communication between a mobile application and its backend API is not trivial. Developers often decide on simpler but
less secure solutions (e.g., those that accept any certificate) to facilitate the development process, and sometimes
these weak solutions make it into the production version, potentially exposing users to man-in-the-middle attacks.
Two key issues should be addressed:
Verify that a certificate comes from a trusted source (CA).
Determine whether the endpoint server presents the right certificate.
Make sure that the hostname and the certificate itself are verified correctly. Examples and common pitfalls are
available in the official Android documentation. Search the code for examples of TrustManager and HostnameVerifier
usage. In the sections below, you can find examples of the kind of insecure usage that you should look for.
Note that from Android 8 onward, there is no support for SSLv3 and HttpsURLConnection will no longer perform
a fallback to an insecure TLS/SSL protocol.
Static Analysis
Verifying the Server Certificate
"TrustManager" is a means of verifying conditions necessary for establishing a trusted connection in Android. The
following conditions should be checked at this point:
Has the certificate been signed by a "trusted" CA?
Has the certificate expired?
Is the certificate self-signed?
The following code snippet is sometimes used during development and will accept any certificate, overwriting the
functions checkClientTrusted , checkServerTrusted , and getAcceptedIssuers . Such implementations should be
avoided, and, if they are necessary, they should be clearly separated from production builds to avoid built-in security
flaws.
TrustManager[] trustAllCerts = new TrustManager[] {
new X509TrustManager() {
@Override
public X509Certificate[] getAcceptedIssuers() {
return new java.security.cert.X509Certificate[] {};
}
@Override
public void checkClientTrusted(X509Certificate[] chain, String authType)
throws CertificateException {
}
@Override
public void checkServerTrusted(X509Certificate[] chain, String authType)
throws CertificateException {
}
}
};
// SSLContext context
context.init(null, trustAllCerts, new SecureRandom());
197
Android Network APIs
WebView Server Certificate Verification
Sometimes applications use a WebView to render the website associated with the application. This is true of
HTML/JavaScript-based frameworks such as Apache Cordova, which uses an internal WebView for application
interaction. When a WebView is used, the mobile browser performs the server certificate validation. Ignoring any TLS
error that occurs when the WebView tries to connect to the remote website is a bad practice.
The following code will ignore TLS issues, exactly like the WebViewClient custom implementation provided to the
WebView:
WebView myWebView = (WebView) findViewById(R.id.webview);
myWebView.setWebViewClient(new WebViewClient(){
@Override
public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
//Ignore TLS certificate errors and instruct the WebViewClient to load the website
handler.proceed();
}
});
Apache Cordova Certificate Verification
Implementation of the Apache Cordova framework's internal WebView usage will ignore TLS errors in the method
onReceivedSslError if the flag android:debuggable is enabled in the application manifest. Therefore, make sure that
the app is not debuggable. See the test case "Testing If the App is Debuggable".
Hostname Verification
Another security flaw in client-side TLS implementations is the lack of hostname verification. Development
environments usually use internal addresses instead of valid domain names, so developers often disable hostname
verification (or force an application to allow any hostname) and simply forget to change it when their application goes
to production. The following code disables hostname verification:
final static HostnameVerifier NO_VERIFY = new HostnameVerifier() {
public boolean verify(String hostname, SSLSession session) {
return true;
}
};
With a built-in HostnameVerifier , accepting any hostname is possible:
HostnameVerifier NO_VERIFY = org.apache.http.conn.ssl.SSLSocketFactory
.ALLOW_ALL_HOSTNAME_VERIFIER;
Make sure that your application verifies a hostname before setting a trusted connection.
Dynamic Analysis
Dynamic analysis requires an interception proxy. To test improper certificate verification, check the following controls:
Self-signed certificate
In Burp, go to the Proxy -> Options tab, then go to the Proxy Listeners section, highlight your listener, and click
Edit . Then go to the Certificate tab, check Use a self-signed certificate , and click Ok . Now, run your
application. If you're able to see HTTPS traffic, your application is accepting self-signed certificates.
Accepting invalid certificates
198
Android Network APIs
In Burp, go to the Proxy -> Options tab, then go to the Proxy Listeners section, highlight your listener, and click
Edit . Then go to the Certificate tab, check Generate a CA-signed certificate with a specific hostname , and type
in the backend server's hostname. Now, run your application. If you're able to see HTTPS traffic, your application is
accepting all certificates.
Accepting incorrect hostnames
In Burp, go to the Proxy -> Options tab, then go to the Proxy Listeners section, highlight your listener, and click
Edit . Then go to the Certificate tab, check Generate a CA-signed certificate with a specific hostname , and type
in an invalid hostname, e.g., example.org. Now, run your application. If you're able to see HTTPS traffic, your
application is accepting all hostnames.
If you're interested in further MITM analysis or you have problems with the configuration of your interception proxy,
consider using Tapioca. It's a CERT pre-configured VM appliance for MITM software analysis. All you have to do is
deploy a tested application on an emulator and start capturing traffic.
Testing Custom Certificate Stores and Certificate Pinning (MSTG-NETWORK-
4)
Overview
Certificate pinning is the process of associating the backend server with a particular X.509 certificate or public key
instead of accepting any certificate signed by a trusted certificate authority. After storing ("pinning") the server
certificate or public key, the mobile app will subsequently connect to the known server only. Withdrawing trust from
external certificate authorities reduces the attack surface (after all, there are many cases of certificate authorities that
have been compromised or tricked into issuing certificates to impostors).
The certificate can be pinned and hardcoded into the app or retrieved at the time the app first connects to the
backend. In the latter case, the certificate is associated with ("pinned" to) the host when the host is seen for the first
time. This alternative is less secure because attackers intercepting the initial connection can inject their own
certificates.
Static Analysis
Network Security Configuration
To customize their network security settings in a safe, declarative configuration file without modifying app code,
applications can use the Network Security Configuration that Android provides for versions 7.0 and above.
The Network Security Configuration can also be used to pin declarative certificates to specific domains. If an
application uses this feature, two things should be checked to identify the defined configuration:
First, find the Network Security Configuration file in the Android application manifest via the
android:networkSecurityConfig attribute on the application tag:
...
Open the identified file. In this case, the file can be found at "res/xml/network_security_config.xml":
199
Android Network APIs