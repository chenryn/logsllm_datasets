title:Pivot: Fast, Synchronous Mashup Isolation Using Generator Chains
author:James Mickens
2014 IEEE Symposium on Security and Privacy
Pivot: Fast, Synchronous Mashup Isolation Using Generator Chains
James Mickens
Microsoft Research
PI:EMAIL
Abstract—Pivot is a new JavaScript isolation framework for
web applications. Pivot uses iframes as its low-level isolation
containers, but
it uses code rewriting to implement syn-
chronous cross-domain interfaces atop the asynchronous cross-
frame postMessage() primitive. Pivot layers a distributed
scheduling abstraction across the frames, essentially treating
each frame as a thread which can invoke RPCs that are
serviced by external threads. By rewriting JavaScript call
sites, Pivot can detect RPC invocations; Pivot exchanges RPC
requests and responses via postMessage(), and it pauses
and restarts frames using a novel rewriting technique that
translates each frame’s JavaScript code into a restartable
generator function. By leveraging both iframes and rewriting,
Pivot does not need to rewrite all code, providing an order-
of-magnitude performance improvement over rewriting-only
solutions. Compared to iframe-only approaches, Pivot provides
synchronous RPC semantics, which developers typically prefer
over asynchronous RPCs. Pivot also allows developers to use
the full, unrestricted JavaScript language, including powerful
statements like eval().
I. INTRODUCTION
A modern web application often contains JavaScript code
from multiple origins. For example, a single web page might
contain JavaScript from advertisers, analytics providers, and
social networking sites. These external origins have differing
levels of pairwise trust, and all of the external code must
coexist with the JavaScript that belongs to the owner of the
enclosing page. For security, each domain should expose
a narrow interface to its code and data. Unfortunately,
JavaScript has poor built-in mechanisms for encapsulation
and information hiding (§II). Thus, to enforce strong iso-
lation between untrusting origins, developers must use a
mashup isolation framework [3], [14], [22], [24] to restrict
cross-domain interactions.
A. Prior Isolation Schemes
At a high-level, these isolation systems use one of two
approaches. Some use iframes as the fundamental isolation
container. Browsers give each iframe a separate JavaScript
runtime; each runtime has distinct global variables, heap
objects, visual display areas, and so on. Iframes from
different origins cannot directly manipulate each other’s
state—instead,
they must communicate using the asyn-
chronous, pass-by-value postMessage() call. By placing
each domain’s code in a separate frame, systems like
Privilege-separated JavaScript [3] leverage fast C++ code
inside the browser to enforce isolation boundaries. How-
ever, domains are forced to communicate via asynchronous
message passing. Asynchronous channels are an unnatural
ﬁt for many types of cross-domain communication [22],
and continuation-passing style (CPS) [18], the most pop-
ular method for converting asynchronous calls into pseudo-
synchronous ones, can introduce subtle race conditions [18],
[22].
Other mashup frameworks use a rewriting approach [22],
[24]. In these systems, the integrating web page translates
each domain’s code into a constrained JavaScript dialect
that lacks dangerous features like the eval() function. The
rewriter also adds dynamic checks which enforce statically
unveriﬁable security properties. Code from different origins
runs in the same frame, so domains can communicate using
synchronous interfaces that resemble traditional RPCs. From
a developer’s perspective, these synchronous interfaces are
extremely attractive, since JavaScript’s pervasive asynchrony
is widely perceived to hinder application development and
maintenance [25], [26], [27], [36]. Unfortunately, JavaScript
is a highly dynamic language, and enforcing a reasonable
isolation model requires the rewriter to insert runtime checks
at every function call and property access. These checks,
which are implemented in slow JavaScript instead of fast
C++ inside the browser, can cause execution slowdowns
of up to 10x compared to the original, untranslated source
code [12], [22], [31].
B. Overview of Pivot
In this paper, we introduce Pivot, a new isolation frame-
work that combines the performance of iframe solutions
with the synchronous cross-domain interfaces that have tra-
ditionally been restricted to rewriting frameworks. Pivot uses
iframes as isolation containers, and uses postMessage()
as a low-level communication primitive. However, by com-
bining a novel rewriting technique with dynamic patching of
the JavaScript runtime [21], [23], Pivot provides true syn-
chronous interfaces that avoid the potential race conditions
of CPS’s pseudo-synchrony.
Figure 1 depicts the architecture of a Pivot application.
Pivot’s trusted master frame places each untrusted domain
into a separate “satellite” frame. Each satellite frame con-
tains untrusted JavaScript code from an external domain,
and an untrusted copy of the Pivot RPC library. Using that
library, a satellite can register one or more public RPC
interfaces with the Pivot master frame. Pivot implements a
distributed directory service that allows domains to discover
each other’s entry points.
© 2014, James Mickens. Under license to IEEE.
DOI 10.1109/SP.2014.24
261
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
Untrusted satellite frame 1
Untrusted satellite frame 2
Rewritten app code
Rewritten app code
Local 
scheduler
Deferred 
event queue
Local 
scheduler
Deferred 
event queue
RPC routing
Sensitive app 
code
RPC directory
Trusted master frame
Figure 1: A sample Pivot application. Grey boxes indicate
components that are implemented by Pivot.
//The yielding function.
function factorial(){
var curr = 1;
var n = 1;
while(true){
curr = curr * n;
yield curr;
n += 1;
}
}
//Print the first 10 items in the factorial sequence.
var generator = factorial();
for(var i = 0; i < 10; i++){
alert(generator.next());
}
Figure 2: Example of a JavaScript generator function.
To build a
synchronous RPC interface
asynchronous postMessage() primitive, Pivot
three techniques:
atop the
uses
Static rewriting: Pivot rewrites each domain’s JavaScript
code, combining all of the code in a frame into a single
generator function [9]. In contrast to a normal function,
which uses the return statement to return a single value
per function execution, and which loses its activation record
upon returning, a generator uses the yield statement to
remember its state across invocations. A generator can
yield different values after each invocation. Figure 2
provides a simple example of a generator function that
returns the factorial sequence. A rewritten Pivot frame is
a generator function that starts execution when invoked
by the local Pivot library, and yields to that library upon
invoking an RPC.
Distributed scheduling: The untrusted Pivot libraries in
each satellite communicate with the trusted Pivot library
in the master frame. Collectively, the master library and
262
the satellite libraries implement a distributed scheduler.
When frame X invokes an RPC deﬁned by frame Y, X
yields control to its local Pivot library. That library sends a
postMessage() to the master that contains the RPC name
and the RPC arguments. The master uses postMessage()
to forward the information to the Pivot library in Y. Y’s
Pivot library invokes the appropriate code in Y, and uses
postMessage() to return the result to the master. The
master sends the result to the Pivot library in X. Finally, that
library restarts X’s code by calling X’s generator function
(Pivot places the result of the RPC in a well-known global
variable so that X’s restarted generator can consume it).
Buggy or malicious satellites may hang forever; to prevent
denial-of-service attacks on RPC initiators, Pivot will
timeout an RPC that takes too long to complete, restarting
the initiator and forcing the RPC to return an error value.
Deferring asynchronous events: JavaScript is an event-
driven language—programs deﬁne handler
functions to
deal with asynchronous inputs like mouse clicks and the
arrival of network data. Browsers ensure that each frame is
single-threaded and non-preemptable, i.e., only one event
handler can run at any given time, and once started, a
handler runs to completion in an atomic fashion. However,
in Pivot, a frame’s generator function can invoke an RPC
(and thus yield) at arbitrary moments; while Pivot is waiting
for the RPC response,
the yielded frame may generate
other asynchronous events. If Pivot allowed the associated
event handlers to run, it would violate the guarantee of
handler atomicity. Thus, Pivot dynamically interposes on
the browser’s event registration framework [23], wrapping
each event handler in code that simply adds the real event
handler to Pivot’s deferred execution queue. Pivot detects
when a satellite’s generator yields at a “natural” termination
point, i.e., a place at which the browser would normally
declare a handler call chain to be ﬁnished. At these points,
Pivot drains the deferred execution queue, executing any
handlers that it ﬁnds.
At a high-level, Pivot resembles a user-mode threading
library [32] in which frames are threads, and cross-frame
RPCs cause threads to yield to the Pivot scheduler. However,
Pivot must solve various challenges that are unique to
the web environment, such as preserving the atomicity of
rewritten event handlers without explicit support from the
browser’s JavaScript engine.
C. Our Contributions
Conventional wisdom is that mashup frameworks must
use one of two approaches: fast but asynchronous frame-
based isolation, or synchronous but slow rewriting-based
isolation. Pivot is the ﬁrst mashup framework that provides
truly synchronous cross-domain interfaces while leveraging
iframes as isolation containers. Pivot uses less rewriting
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
var X = {data: "hello"}; //Create a prototype object
var obj = {__proto__: X};//Create an instance of X.
//for a class named X.
alert(obj.data);
X.data = "goodbye";
alert(obj.data);
//Displays "hello".
//Displays "goodbye".
//The "with" statement places a JavaScript
//object at the front of the name resolution
//chain.
var str = "global";
var obj = {str: "insideWithStmt"};
alert(str);
with(obj){
//Displays "global".
alert(str); //Displays "insideWithStmt".
Figure 3: Example of JavaScript’s prototype-based objects.
}
to provide higher performance—whereas prior rewriting
schemes like Caja [24] and Jigsaw [22] require dynamic
checks at every function call site and every []-mediated
property access, Pivot only requires checks at function call
sites. Furthermore, since Pivot uses iframes as isolation
containers, it allows the safe composition of rewritten code
with unrewritten code. Domains that do not require the
ability to make synchronous RPCs do not need to be
rewritten. By including the (untrusted) Pivot satellite library,
unrewritten satellites can still deﬁne externally visible RPCs;
the unrewritten satellites will asynchronously serve those
requests, and Pivot will pause and resume the rewritten
callers as necessary, providing those callers with the de-
sired synchronous RPC semantics. This safe composition of
rewritten code and unrewritten code is much different than
the rewrite-everything requirement of systems like Jigsaw,
and it facilitates important performance optimizations when
Pivot is run on browsers which have slow implementations
of the yield statement (§V-C). Our empirical analysis of
JavaScript call graphs demonstrates that Pivot’s master/satel-
lite architecture is well-aligned with the RPC patterns of real
applications (§V-A).
Since each satellite frame contains an isolated JavaScript
runtime, Pivot allows untrusted satellite code to use the
full JavaScript language, including powerful functions like
eval(). In contrast, rewriting systems that place all code
in a single frame require applications to use a restricted
JavaScript subset. Unlike prior rewriting systems that pro-
vide pseudo-synchrony [25], [26], [27], [36], Pivot provides
true synchrony without adding special syntax for RPCs, or
breaking the traditional JavaScript concurrency model of
atomic handler execution. This makes it easier to write new
Pivot applications and port legacy applications to Pivot. Our
evaluation also shows that Pivot can provide an order of
magnitude performance improvement over Jigsaw.
II. BACKGROUND
In this section, we provide an overview of the JavaScript
language, and describe how the JavaScript runtime interacts
with the rest of the browser. We focus on the security
interactions which inﬂuence Pivot’s design (§III) and the
design of previous isolation frameworks (§VI).
A. The JavaScript Language
JavaScript is an object-oriented scripting language that
provides extensive runtime mechanisms for object reﬂection
//The "delete" statement removes a property
//from an object. So, if a rewriter tries
//to hide sensitive global objects using
//with statements, attacker code can
//use delete statements to reveal the
//sensitive global.
//Original attacker code wants to send
//a network request.
delete XMLHttpRequest;
var ajax = new XMLHttpRequest(...);
//The rewritten code places the original
//attacker code inside a with statement,
//but the delete allows the attacker to
//access the real XMLHttpRequest!
var blinder = {XMLHttpRequest: null};
with(blinder){
delete XMLHttpRequest;
var ajax = new XMLHttpRequest(...);
}
Figure 4: An attacker can use statements like delete to
subvert rewriting-based isolation.
and mutation. JavaScript has little support for encapsulation
or data hiding; this dearth of native isolation mechanisms,
combined with an abundance of reﬂection interfaces, makes
it difﬁcult to write secure web applications that integrate
code from mutually untrusting origins. For example:
Prototype poisoning: Traditional object-oriented languages
like C++ use statically deﬁned classes to implement object
inheritance. In contrast, JavaScript uses dynamic prototype
objects. As shown in Figure 3, a prototype is a JavaScript
object whose property names deﬁne the properties belonging
to all instances of that object. The property values of the
prototype become the default property values for instances
of that object.
An object’s prototype is a mutable property called
__proto__. By changing an object’s __proto__ value,
one can change an object’s type at runtime. In a prototype
poisoning attack [1], [18], malicious code mutates the pro-
totype for sensitive objects, or redeﬁnes their __proto__
references to point to attacker-controlled objects. This allows
the attacker to redeﬁne the behavior of these sensitive ob-
jects. Poisoning attacks can be launched against application-
deﬁned objects, as well as the built-in objects provided by
the browser. For example, by tampering with the prototype
for the built-in regular expression object, an attacker can sub-
vert security computations that look for patterns in strings.
263
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
For
example,
key
interfaces
JavaScript.
overwritten with
Mutability attacks: Prototype poisoning is a speciﬁc
the mutability attacks which are endemic
example of
like
to
Math.random() and XMLHttpRequest can
simply
be
code. Such
dynamic patching is not necessarily a sign of evil—for
example, diagnostic tools like Mugshot
[23] use such
patching to debug application state. However, if a frame
libraries from domains X and
contains two JavaScript
Y, and X’s code loads ﬁrst, then Y cannot guarantee that
its code has unmediated access to the real system interfaces.
application-deﬁned
Dangerous built-in statements: JavaScript provides sev-
eral constructs for dynamically compiling and executing
source code; examples include the eval() method and the
Function() constructor. Malicious applications can use
these interfaces to hide attack code from static security
analyses. Prohibiting access to these interfaces is tricky
because JavaScript deﬁnes many aliases for such func-
tions, e.g., window.eval(), window.parent.eval(),
window.top.eval(), etc. [19].
statements
JavaScript also provides
like with and
delete that allow programs to dynamically modify the
scope chain that the runtime consults to resolve variable
names. Using these statements, attackers can circumvent
dynamic security mechanisms used by naïve code rewriters
(see Figure 4).
the built-in window object
the global namespace. For example,
Complex “this” semantics: As implied by the previ-
is an alias
ous paragraph,
for
the global
XMLHttpRequest object can also be referenced via
window.XMLHttpRequest. If a secure application wants to
prevent an untrusted library from accessing sensitive globals,
the application must prevent that library from accessing
window. Unfortunately, doing so is tricky, since JavaScript
provides multiple ways to access window. For example, all
JavaScript functions are actually methods, and if a method is
called unbound, e.g., as f() instead of someObj.f(), the
method’s this reference is automatically set to window.
The browser also uses window as the this reference for
timer callback functions and other event handling callbacks.
Source code that is dynamically evaluated via Function()
will also use window as this.
B. Isolation Using Iframes
Each frame represents a separate JavaScript runtime. If
two frames belong to the same origin1,
they can ma-
nipulate each other’s JavaScript state using mechanisms
like the window.frames array. If two frames belong to
different origins, cross-frame interactions are restricted to