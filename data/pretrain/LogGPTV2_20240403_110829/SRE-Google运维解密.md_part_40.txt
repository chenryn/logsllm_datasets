·前端服务器和后端服务器通常有独立的发布周期，这些发布周期不会同步。
发布测试可能将集成服务器包在一个前端服务器和一个虚假的后端服务器之间。
端服务器之间。
第17章测试可靠性
伪后端版本
---
## Page 217
推演可靠性。
好地度量失败与不确定性提供一个坚实的基础，可以帮助工程师在编写和发布软件时，
而在工程领域，了解一个问题的方法只有实际度量。本章提到的方法论和工具可以为更
试基础框架以推行强测试文化也是一样。在未充分理解一个问题之前，我们没法修复它
次的活动，而是持久不断的。写出优质的测试需要付出的成本是很大的，建立和维护测
测试是工程师提高可靠性投入回报比最高的一种手段。测试并不是一种只执行一次或两
小结
求，直到版本问题解决。
再可能出现。另一方面，对应的研发团队也可以考虑暂时禁止某些问题实例接受请
在另一方面，
我们只需要每次发布新版本的时候进行。这样的测试问题不一定需要阻拦新的发布
可以获取不同版本的所有组合，以确保测试还能成功通过。监控不需要一直进行
我们的监控体系应该知道每个接口的两端的所有发布版本，这种结构可以保证我们
自动发布机制应该在理想情况下自动阻止更新，直到这种问题组合不
小结
---
## Page 218
[206>SRE进行软件工程非常合适和有效的原因是：
2>第18章
176
SRE自行开发工具的益处。
第三方工具是按照这种复杂情况设计的。Google在软件工程方面的成功经验，显示了
Google生产环境的复杂程度导致了很多内部工具必须由Google自己开发，因为很少有
为什么软件工程项目对SRE很重要
规划，制定未来的发展方向。
不是一次性的脚本和小补丁。开发这些工具的SRE也需要针对内部用户的需求进行产品
构上建立起来的开发环境。总体来讲，SRE开发的工具是一个完整的软件工程项目，而
多样的。有的是二进制文件的变更发布系统，也有监控系统，还有在动态服务器组合架
有运维这些系统的一手经验，这使得SRE非常适合开发内部工具解决运维问题。大部分
Google的生产环境，在某种程度上来说，是人类所建造的最复杂的机器系统之一。SRE
Colossus这样的基础设施项目，但是Google其实有更多的不为人知的幕后软件工程实践。
Gmail或者Google地图这样面向消费者的产品。有的人可能能够说出像Bigtable或者
当你让某人说出一个Google的软件工程实践成就时，他们很可能说起的是一个类似
编辑：Kavita Guliani
作者：Dave Helstroom、Trisha Weir、Evan Leonard、Kurt Delimon
SRE部门中的软件工程实践
工具与维持机器的正常运行以及保证系统延迟处于较低水平有关，但是具体形式是多种
这些软件工程实践很多是来源于SRE部门的。
·SRE组织内所拥有的Google特有的生产环境构建知识的深度和广度使得 SRE工
---
## Page 219
列这些：
传统的容量规划方法
些问题，以及传统方法的（Google内部的以及行业内普遍采用的）不足之处。有关这里
这篇案例分析是关于Auxon的，这是SRE内部开发的一个自动化容量规划的工具。要理
Auxon案例分析：项目背景和要解决的问题
给SRE团队同时配备具备传统的软件工程经验的工程师和具备系统工程经验的工程师。
化的解认问题的方式可以避免在团队中出现盲点。为了实现这个目标，Google一直强调要
很多不！能的工程师。S?E团队最需要的就是技能的多样性，成员多元化的背景和多样
在减轻其他SRE工作的压力之外，这些软件工程项目更可以为SRE组织吸引和留住拥有
可以为同时想保持软件工程技能与系统工程技能的工程师提供一个满意的工作机会。
技能的良好机会。长期的软件工程项目开发可以在on-call轮值之余提供平衡工作的选择，
完整的软件工程项目在SRE组织内部提供了一个职业发展的方向，也提供了一些磨炼编程
件工程项目中获益。
从另外一方面来讲，每个单独的SRE，以及整个SRE组织，也会从这些SRE驱动的软
让有直接运维经验的人来开发对应的生产工具是非常合理的。
以及不停地优化工具、流程，消除一切其他日常运维相关的效率问题。在这种情况下
成指数增长的情况下，想要保持SRE团队以线性增长需要不断地进行自动化工具的开发
SRE组织的一个指导思想是，团队大小不应该与用户服务规模成比例增长。在用户服务
使用的服务和集群的定义，请参看第2章。
解Auxon是如何诞生的，以及它能解决的问题，我们首先来看一下容量规划要解决的一
从组织架构设计上来说，SRE组织的成长速度要低于SRE所服务的用户服务的成长速度
从实践的角度来看，让具有SRE经验的工程师开发软件对Google有非常明显的好处
有很强的包容性。
以让开发团队更快地进行选代。内部用户一般对UI的不足和alpha版本的问题
用户反馈变得很容易。向一个对问题和解决方案都很熟悉的内部团体发布工具可
与这些工具的直接用户一
他基础设施项目和工具良好集成的软件。
程师可以设计和实现出能够应对大规模部署，能够在灾难中优雅降级，可以和其
一其他SRE——的密切联系使得获取直接的和高质量的
Auxon案例分析：项目背景和要解决的问题
177
207
---
## Page 220
208
翻重来。某单个集群的资源延迟到位会影响到多个服务全局的余程度以及延迟要求受
通常，对细节的小改动需要重新整合资源的配置计划，以确保该计划仍然有效。而稍微
传统的容量规划过程容易产生出一个非常不可靠的资源配给计划，该计划会由于出现某
不可靠性
在每次“需求”有变动时，手工调整供给，以满足“需求”。
必须要在未来的某个季度中得到补偿。传统的容量规划使用“需求”作为一个关键驱动值
次变化，都必须向下传递到未来的计划中。举例来说，本季度遇到的一个资源短缺问题
资源部署可能会延期，预算可能会改变，我们制定的计划也会一再变化。而该计划的每
这里要着重强调的是，
4.部署和配置对应的资源
3.评审，并且批准这个计划
2.制定资源的采购、构建和分配计划
些看起来很小的改动而全盘失效，例如：
1.收集对未来项目需求的预测
178
这项计划是不是合理的？这项计划是否和预算相符，是否符合产品的期望与技术的
基于上述预测，我们如何能最好地满足未来的资源需求？需要在“哪里”构建“多少”
需要多少资源？这些资源什么时候需要，以及它们需要在什么物理位置？
·该服务可能出现了效率下降的问题，从而需要更多的资源以满足同样的业务需求。
够将底层的CPU、磁盘等资源合理配置给服务使用？
一旦资源最终到位（有可能是在一段时间内），哪些服务最终会使用该资源？如何能
要求？
资源？
预测长度一般是几个季度到儿年。
使用我们今天拥有的最佳数据来计划明天。
大幅变化）。
求改变（例如，产品决定每个视频需要存两份，而不是一份，将会导致资源用量
与性能有关的某个产品设计决策变化导致服务的部署规模改变，从而导致资源需
某个新计算集群的上线日期推迟。
该服务变得更受欢迎，用户“需求”增加，导致资源的需求也随之增加。
第18章
SRE部门中的软件工程实践
，容量规划是一个永远没有尽头的循环：我们的假设时刻在变化，
---
## Page 221
同时利用一个算法自动产生资源的配给方案，包括在哪个集群中将多少资源配置给哪个
来说，这个规划过程是将服务的依赖和资源的参数（也就是意图）用编程的方式记录下来，
Google内部的大部分团队都已经切换到了这套我们称为基于意图的容量规划流程。简单
解决方案：基于意图的容量规划
结果。这个过程非常不可靠，没有什么好的方法可以保证产生出一个优化结果。
经早已灭在信息的传递过程中了。
要命的。最佳压缩（bin-packing）问题是一个NP-hard问题，不适合人类进行手工计算。
数据可能会过期（stale），而对改变的追踪常常是很困难的。这常常导致制定计划的团队
者非常难用的。电子表格（spreadsheet）经常遇到扩展性的问题和错误检查能力有限。
资源的需求编排（bin-pack）到可用的资源过程中非常复杂和烦琐，尤其是还要考虑到
将带有“限制”的资源请求与实际可用的资源进行结合也是一个很麻烦的过程。手工将
密相关的，下一节我们会详细叙述。
括某种“限制”，限制了什么条件的资源能够满足这个需求，这种限制是跟产品意图紧
户，那么在北美洲的空闲资源就无法用于满足亚洲的容量问题。每种对未来的预测都包
说：如果产品在延迟方面的要求意味着某服务必须要用部署在相同大陆上的资源服务用
当需要寻找合适的资源以满足未来需求的时候，又面临着选择合适资源的问题。举例来
对很多团队来说，收集足够的数据以预测未来需求的过程是非常麻烦以及容易出错的
耗时巨大，
季度的容量规划制定的，这意味着每个季度的执行计划变化必须要更新未来季度的规划。
同时，我们还要考虑的是，每个季度的容量规划（或者其他时间间隔）都是基于前一个
到影响，这种类型的变化必须要体现在容量规划中。
列出你的要求，而不要拘泥于具体实现细节。
这样的后果是，我们要消耗大量的人力才能产生一个勉强可用的、极不精确的资源配置
Y中需要X个CPU。但是为什么需要X个CPU，以及为什么在Y集群中需要的原因已
更重要的是，在这个阶段中，每个服务所提供的容量请求常常是非常死板的，如在集群
当某个服务的规划者需要将一系列容量需求与可用资源对应起来的时候，不精确性是很
法做到最优化配置）。
不得不大幅简化模型，以降低复杂度，只为了能够勉强满足他们的容量规划需求（而无
这个过程看起来已经很糟糕了，更糟的是，这个过程采用的工具常常是非常不可靠，或
预算的情况。
同时不够精确
Auxon案例分析：项目背景和要解决的问题
|179
<209
---
## Page 222
210
我们，一般的服务在达到第三步的时候获得的好处最大：提供足够的选择自由度，同时
4.我们想要将F00以99.999%的可靠度运行。
3.我想要满足Fo0在每个地理区域的需求增长，同时保障N+2余度。
2.我需要50个CPU的资源，在地理区域YYYY中的任意三个集群中，为服务Foo使用。
1.我需要50个CPU的资源，必须在集群X、Y、Z中，为服务Foo使用。
性原因的表达通常需要跳过几个抽象级别。举例如下：
基于意图的容量规划
找到一些已知的局部最优解。
解决，因为某些配置问题仍具有NP-hard的计算复杂度。但是我们现在的算法已经能够
计划精确度，最后可以给整个组织降低更多的成本。最优解的计算仍然并不能称为完全
另外一个好处是，用计算优化的方式来将容量的需求和实际供给对应，可以提供更高的
底层的资源。
比如SLO的保障，生产系统的依赖问题，以及服务基础架构的优化上，而不是费力抢夺
最佳情况的计算能够节省大量的人力，从而使得服务负责者可以关注在更高级的目标，
临变动的时候非常可靠，我们可以产生出一个满足最多要求的最优解。由计算机来处理
由于这里记录了每个服务的真实需求和它们的选择自由度信息，所产生的容量规划在面
新生成这项计划，以便更好地分配资源。
服务这些细节。如果需求、供给，或者某个服务的产品需求发生变化，我们可以随时重
180
都应该包括，服务提供的“意图”越多，它们得到的好处也就越大。Google的经验告诉
所以，我们应该在容量规划过程中采用哪个级别的抽象呢？理想情况下，所有上述级别
“意图”是服务负责人对如何运维该服务的一个理性表达。从具体的容量需求到背后理
这项请求增加了更多的选择自由度，也更容易被满足，但是仍然没有解释这项请求
现在有了更多的选择自由度，同时我们可以更好地理解如果Foo没有获得相应的资
这是一个具体的资源请求，但是，为什么我们需要这么多资源，同时一定要在这三