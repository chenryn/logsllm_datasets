其中令牌component_access_token是必填值，为了可以调用预授权
码获取接口，必须先拿到令牌component_access_token。而令牌
component_access_token的获取，也是需要一个必填参数验证票据
component_verify_ticket，令牌获取的请求参数说明如图8-11所示。
●图8-11 第三方平台获取微信公共平台令牌的请求参数定义
而参数验证票据component_verify_ticket的说明中标明此值是微信后
台推送的，是在第三方平台创建并审核通过后，微信服务器主动调用第
三方应用或平台创建时录入的“授权事件接收URL”，每隔130min就主动
以POST提交的方式推送验证票据component_verify_ticket的值。
再次梳理一下接口的详细调用过程，如图8-12所示。
1）开发者在微信开放平台创建第三方应用，其中包含“授权事件接
收URL”信息。
2）如果第三方应用审核通过，则系统会生成第三方应用的appid、
appsecret，供后续请求时验证客户端应用身份。
3）微信服务器调用“授权事件接收URL”，加密推送验证票据信
息。
4）第三方应用携带验证票据、appid、appsecret，获取接口调用凭
据令牌。
5）API平台服务接受令牌获取请求，并应答令牌值和有效期。
6）第三方应用携带令牌值和appid，获取预授权码。
7）API平台服务响应预授权码值和有效期。
8）第三方应用引导用户进入授权许可页面，跳转链接为：
用户同意将自己的公众号或小程序授权给第三方平台方，完成授权
流程。
●图8-12 微信公众平台第三方授权流程
9）授权流程完成后，页面自动跳转进入回调URL地址，并将授权
码和过期时间（redirect_url?auth_code=xxx&expires_in=600）加入请求
参数中。
10）通过授权码调用微信API。
通过以上步骤分析，微信开放平台授权与OAuth协议标准的授权码
流程的差异主要是上述的33）～5）步，通过服务器推送验证令牌，到
验证令牌→令牌→预授权码的逻辑顺序，再启动授权码流程。
8.5 小结
本章主要为读者介绍了API授权与访问控制的相关技术，其中对于
OAuth协议、RBAC模型做了详尽的介绍，并结合百度开放云平台、微
信公众平台的实践案例，讲解了国内头部互联网厂商对于OAuth协议的
具体实现以及对API授权调用的操作流程。通过这一章内容的学习，读
者应基本了解当前API授权和访问控制的主流技术。当然，此类相关的
技术细节还有很多，比如RBAC在API中的使用场景在AWS云、
Kubernetes、OpenStack等产品都有很好的实践，虽没在本章进行案例分
析，但仍希望读者自己在工作中花时间去研究、去熟悉此模型的使用实
践。
第9章 API消息保护
API的产生是为了方便不同系统之间或系统内部不同的组成部门之
间的信息交互，对于使用API作为媒介进行信息交互的双方来说，如何
保护数据在通信过程的安全成了整体安全中很重要的一个部分。本章将
为读者介绍API通信中传输层和应用层涉及消息保护的相关安全技术。
9.1 传输层消息保护
从API通信的组件架构来看，无论是C/S架构、B/S架构这类传统方
式的API调用，还是服务器端到服务器端、设备端到服务器端的移动互
联及IoT环境下的API调用，其API通信组件的基本形态都可以表示为两
个端点之间的端到端通信。系统内外部端到端通信示意图如图9-1所
示。
●图9-1 系统内外部端到端通信示意图
如何保障通信链路上两个端点之间端到端通信安全，确认通信双方
的身份，防止中间人攻击和非法截获传输数据，使用TLS成为保障API
通信安全中首选的解决方案。
9.1.1 TLS安全特性
TLS是目前互联网上广泛使用的安全传输协议，用于两个通信端点
之间的身份验证、加密和数据完整性保护，常见的应用场景有Web浏览
器会话、VPN、远程桌面等。TLS是从SSL协议演变而来，因其支持更
新和更安全的算法，而逐渐取得SSL协议。TLS协议是由TLS记录协议
和TLS握手协议构成，其中TLS记录协议负责底层的信息传输及认证加
密，TLS握手协议负责密钥协商交换等。
TLS的安全性主要来源于以下特性。
■ 身份认证：TLS在通信双方建立可信连接时，对通信双方进行身
份认证，尤其是服务器端，始终必须经过身份认证（客户端可选），其
身份认证方式采用证书认证，能有效地保证通信双方的可信性。
■ 通信加密：一旦通信建立，在通信双方之间建立加密通道，通道
仅对通信双方可见。通信双方通过协商密码的方式，建立共享密钥对通
信数据进行加密传输，能有效地防止中间人攻击。
■ 
完整性：在通信握手过程中使用MAC（消息验证码）机制，保
证了通信数据的完整性。
TLS版本从SSL发展而来，先后经历了4个版本：TLS 
1.0、TLS
1.1、TLS 1.2、TLS 1.3，目前推荐使用的为TLS 1.3版本。促进用户积极
用TLS 1.3版本替代旧版本的主要原因是近些年TLS 1.2的安全问题频
发，作为互联网上基础性的、使用广泛的加密协议，一旦产生漏洞将对
多个应用或服务产生影响，比如依赖于TLS的常用服务或协议HTTPS、
SFTP、IMAPS等。
与TLS旧版本相比，TLS 1.3的主要改变如下。
■ 启用新的密钥交换和身份认证机制。
■ 支持0-RTT模式，节省了连接建立的往返时间。
■ 禁止对加密报文进行压缩及会话重协商。
■ 减少了握手消息的明文传输。
■ 不再使用33DES、RC4、AES-CBC等加密组件以及SHA1、MD5
等哈希算法，仅支持AEAD校验数据完整性。
■ 不再使用DSA证书。
9.1.2 TLS握手过程
在TLS 
1.3的新特性中，读者了解到新版本的通信过程更快，那么
到底快在哪里呢？接下来将结合TLS 
1.3的握手过程，为读者分析其中
的原理。TLS 
1.3通信中涉及握手的场景主要有建立新的连接、会话恢
复两个场景，下面将依次来看看这两个场景下通信双方的握手过程。
（1）建立新的连接
当通信双方首次访问时，大多数情况下都需要建立连接。TLS 
1.3
的首次通信如果没有提前建立通信信道，则首次连接时采用建立新连接
的方式，其交互过程如图9-2所示。
TLS 1.3的新连接握手过程相对于TLS 1.2有了很大的优化，TLS 1.2
需要两个网络往返（2-RTT），而TLS 
1.3只需要一个网络往返（1-
RTT），更加高效。另外，TLS 1.3的新连接握手过程允许服务器对客户
端在初始握手时先不对客户端进行身份认证，当客户端请求某些敏感信
息时，再对客户端进行身份认证。
（2）TLS会话恢复
TLS会话恢复场景是客户端与服务器端已经完成新连接握手过程，
因为网络、超时等意外情况导致连接断开，需要恢复TLS会话的过程。
TLS 1.3的会话恢复过程如图93-3所示。
●图9-2 TLS 1.3新建连接握手交互图
●图9-3 TLS 1.3会话恢复示意图
TLS 1.2会话恢复需要一个网络往返（1-RTT），而TLS 1.3可以达
到0-RTT，因为在新连接握手过程已经完成了密钥协商和身份认证，会
话缓存中有客户端与服务器端的共享密钥，使得TLS 
1.3能够快速会话
恢复。
9.1.3 TLS证书使用
TLS的加密原理是通过非对称密钥加密来交换会话密钥，通过对称
密钥加密来加密信息，结合了非对称密钥加密的安全性强和对称密钥加
密的加解密效率高的优势，但在密钥交换过程中容易受到中间人攻击，
需要通过数字签名来确认身份，通过证书将第三方签名与公钥绑定。
证书的类型分为DV（域名验证）、OV（组织验证）、EV（扩展
验证）三种，由CFCA等认证机构颁发，金融等重要行业一般使用OV或
EV证书，需要进行证书申请，而DV证书可以自动签发。
证书标准遵循X.509规范，以HTTPS证书为例，查看证书详细信
息，如图9-4所示。
●图9-4 数字证书样例
HTTPS证书的主要字段如下。
■ 版本：证书的版本。
■ 序列号：证书的唯一标识，由证书颁发者CA签发。
■ 签名算法：证书的数字签名所用的算法。
■ 
签名哈希算法：对解密后的信息进行哈希计算，确保信息完整
性。
■ 
颁发者：证书颁发者的身份信息，如组织名称、域名和所在地
等。
■ 有效期：证书有效的开始日期和结束日期。
■ 使用者：证书申请者的身份信息，域名、组织名称、组织所在地
等。
■ 公钥：证书使用者的公钥、签名算法。
■ 公钥参数：公钥可选参数。
证书的规范有效使用依托于公钥基础设施PKI，它提供了公钥加密
和数字签名服务，包含证书生成、管理、存储、分发、吊销等，实现信
息传递的完整性、保密性以及不可抵赖性。
PKI主要由证书用户、注册机构RA、认证机构CA等部分构成，证
书的申请与使用主要步骤如下。
1）用户到注册机构RA申请证书。
2）生成CSR，同用户信息一并传至CA。
3）请求加密密钥，提交用户签名公钥。
4）生成加密密钥对，用签名公钥加密私钥并传至CA。
5）CA签名，生成证书，颁发证书，提供证书吊销列表。
6）用户从RA下载证书、安装证书。
7）客户端向服务器端请求证书，使用本地公钥验证证书签名，检
查证书吊销状态。
8）私钥泄露或证书不再使用，及时吊销处理。
9.2 应用层消息保护
使用TLS以及基于TLS之上的应用层协议（HTTPS、SFTP、IMAPS
等）解决了通信链路的安全问题。那么接下来，将为读者讲述API通信
交互中应用层协议内容的安全保护，为API通信提供端到端的安全保
护。
9.2.1 JWT及JOSE相关技术
应用层的消息保护技术很少单独存在，往往融入整个安全技术体系
之中。在第7章和第8章中，为读者详细介绍了OAuth协议、OpenID
Connect协议的相关内容，在这些协议的创建和拓展过程中，已将应用