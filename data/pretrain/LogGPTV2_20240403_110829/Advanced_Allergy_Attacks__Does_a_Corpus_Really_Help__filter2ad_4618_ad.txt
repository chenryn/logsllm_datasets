### Experiments on Modified Polygraph and Hamsa

We conducted experiments using a slightly modified version of Polygraph, provided by the authors of [16], and our own implementation of Hamsa. Our Hamsa implementation differs slightly from the one presented in [8] in that we do not require a token to appear in 15% or more of the worm flows for it to be used in signature generation. We believe this requirement can be easily evaded by attackers, as they can introduce noise as described in [16]. Additionally, some "invariant" parts of a worm, such as the return address in a stack buffer overflow, can vary significantly.

We tested the attacks against CNN.com over the same five days (February 24-28) as studied in Sections 4.1 and 5.1. For the type II attack, we generated a 7-day-old corpus by simulating 50,000 user sessions with data collected 7 days before the corresponding day (e.g., the experiment on February 24 used data from February 17). For the type III attack, we used a "fresh" corpus with 50,000 simulated user sessions based on data collected at 9 AM on the tested day.

For both Hamsa and the conjunction/token-subsequence signature generator of Polygraph, we constructed the worm pool to contain three copies of each allergic signature we wanted the ASG to generate. We then invoked the signature generation process once and evaluated the false positives caused by the generated signatures using 150,000 simulated user sessions. The measured false positives from the type II attack were always within 1% of the computed BLP value. For the type III attack, the measured false positives were lower than predicted, but the difference was always below 6.2%.

### Bayes Signature Generator in Polygraph

The setup for the Bayes signature generator in Polygraph is different because it generates one signature to cover all traffic in the worm pool, ensuring a false positive rate below the threshold. Therefore, multiple invocations may be necessary to achieve the desired level of damage. Our experiments showed that one invocation was sufficient for the type II attack, as the byte sequences involved rarely appeared in the corpus. However, the type III attack required multiple invocations. We modified the experiment to construct the worm pool with five target byte sequences not yet covered, with three copies each. We found that approximately 100 rounds were needed to filter all target byte sequences. The false positives obtained from the experiments were within a 2% range of those predicted by our BLP analysis.

### Discrepancies in False Positives

The discrepancies between the measured and predicted false positives can be attributed to the randomness in generating the corpus and the test traffic pool. This randomness may cause some target signatures to match more flows in the corpus than allowed, preventing their inclusion in the final set of signatures. This is likely why the measured false positives for the attacks against Hamsa and the conjunction/token-subsequence signature generator in Polygraph were 5% lower than expected. The fluctuations in the generation of the testing traffic pool also affected the measured false positive rates, accounting for the smaller differences in other experiments.

### Type III Attack on Google.com

For the type III attack targeting identification cookies from Google.com, we repeated the experiment five times, each with a different set of 50,000 cookies. The rest of the experimental setup remained the same: we invoked the signature generator once with the worm pool containing all target byte sequences for the experiments with Hamsa and the conjunction/token-subsequence generator of Polygraph, and performed the experiment in multiple rounds, each with five remaining target byte sequences for the Bayes signature generation. The generated signatures resulted in a 100% false positive against the tested sets of cookies as expected. The attack against Hamsa and the conjunction/token-subsequence generator of Polygraph required only one invocation, while the Bayes signature generation required around 130 rounds.

### Time Considerations for Type III Attacks

The need for multiple invocations of the signature generator is a drawback of type III attacks. Depending on the frequency at which the signature generation process can be invoked, the attack can take a long time to complete. To contain fast-propagating worms, the maximum time between two invocations cannot be too long. Assuming the signature generation can be invoked every 10 minutes, it would take around 8 hours to generate the top 50 allergic signatures in the type III attack against CNN.com, resulting in a BLP of more than 0.25.

### Summary of Advanced Allergy Attacks

We identified two advanced allergy attacks: the type II attack, which exploits the difficulty of capturing the evolution of normal traffic with a static corpus, and the type III attack, which uses a divide-and-conquer approach to induce the ASGs into generating a set of signatures, each with a sufficiently low false positive to pass the corpus-based defense but collectively blocking significant portions of normal traffic. We provided examples of these attacks against popular sites like CNN.com, Amazon.com, and Google.com, and proposed a metric called "broken link probability" (BLP) to measure the damages caused by these attacks.

### Mitigations and Challenges

While there are various mitigations to limit the damages caused by type II/III attacks, most come at the cost of accentuating the threat from innocuous pool poisoning. Keeping the corpus up-to-date can reduce the power of type II attacks but is costly and problematic. A fresh corpus allows instant effects for innocuous pool poisoning, and setting a lower threshold for allowable false positives in new signatures can also mitigate type III attacks. However, these defenses can run into the same problem faced by the Bayes signature generator, as demonstrated in [16]: it is impossible to be effective against real attacks while keeping the false positive low. An attacker can exploit this by mounting both an allergy attack and an innocuous pool poisoning attack simultaneously.

### Conclusion

Our discussion focused on attacks against HTTP requests, but type II and type III attacks can be applied to other kinds of traffic. Many important protocols contain fields that uniquely identify a particular user/communication session, and diversity in requested services is common in many types of traffic. These factors provide opportunities for type III attacks against non-HTTP traffic, as validated in ongoing work.