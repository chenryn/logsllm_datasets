periments on a slightly modiﬁed version of Polygraph provided by the authors
of [16], and our own implementation of Hamsa. Our implementation of Hamsa
deviates from that presented in [8] slightly: we do not require a token to appear
in 15% or more of the worm ﬂows in order to be used in the signature genera-
tion. We believe this requirement allows the attackers to evade the ASG easily,
given that the attacker can always introduce noise as in [16], and some of the
“invariant” parts of a worm may actually vary (e.g. in a stack buﬀer overﬂow,
the return address can be over written with many diﬀerent values). We note that
the tested attacks should also be eﬀective against the original Hamsa; we only
need to carry them out in multiple rounds, each generating 6 allergic signatures.
We have experimented with launching the two attacks against CNN.com on
the same 5 days as studied in Sect. 4.1 and 5.1 (24th - 28th Feb). For the
experiments on the type II attack, we generate a 7-day-old corpus by simulating
50,000 user sessions4 with the data collected 7 days before the corresponding day
0 (e.g. the experiment on the attack on 24th Feb uses a corpus generated from
data collected on 17th Feb). For the type III attack, we assume a “fresh” corpus
with 50,000 simulated user sessions based on the data collected at 9am of day 0.
For our experiments on Hamsa and the conjunction/token-subsequence signature
generator of Polygraph, we construct the worm pool to contain 3 copies of each
allergic signature we want the ASG to generate. After that, we invoke the tested
signature generation process once. We then evaluate the false positive caused by
the generated signatures with 150,000 simulated user sessions generated using
the data collected at 9am of the tested day 0. We ﬁnd that the measured false
positives from the type II attack is always within 1% of the computed BLP value.
As for the type III attack, the false positives measured in the experiments are
lower than predicted, but the diﬀerence is always below 6.2%.
The setup for the experiments on the Bayes signature generator in Polygraph
is a little diﬀerent, since the Bayes signature generation algorithm eﬀectively
generates one signature to cover all traﬃc in the worm pool, and guarantees
that this “combined” signature has a false positive rate below the threshold.
As a result, we may need to invoke the signature generation process multiple
times to achieve the level of damages expected. Our experiments show that one
invocation is suﬃcient for the tested type II attack, since the byte sequences
involved in the attack rarely appear in the corpus. On the other hand, the type
4 [12] used a training set and testing set of 45,111 and 125,301 ﬂows respectively.
252
S.P. Chung and A.K. Mok
III attack requires multiple invocation of the Bayes signature generation process.
Thus, we modify our experiment as follows: in each round of the experiment,
we construct the worm pool with 5 of the target byte sequences that are not
yet covered, 3 copies for each. We ﬁnd that a little less than 100 rounds is
needed to have all the target byte sequences ﬁltered. As before, we evaluated
the signatures generated for the two attacks with 150,000 simulated user sessions,
and ﬁnd the false positives obtained from the experiments are within 2% range
of that predicted by our BLP analysis.
The discrepancy between the measured false positive and that predicted by
the BLP analysis may be explained by the randomness in the generation of the
corpus and the test traﬃc pool. The former may result in some target signatures
matching more ﬂows in the corpus than allowed, and prevent their inclusion
in the ﬁnal set of signatures. We believe this is the main reason why the mea-
sured false positives of the attacks against Hamsa and the conjunction/token-
subsequence signature generation in Polygraph is 5% lower than expected. On
the other hand, the ﬂuctuation in the generation of the testing traﬃc pool aﬀects
the measured false positive rate of the generated signatures, which may account
for the smaller diﬀerences seen in the other experiments.
For the type III attack targeting identiﬁcation cookies from Google.com, we
repeat the experiment 5 times. In each experiment, we construct the corpus
used by the ASGs with a diﬀerent set of 50,000 cookies. The rest of the experi-
mental set up is the same as above; i.e. we invoke the signature generator once
with the worm pool containing all the target byte sequence for the experiments
with Hamsa and the conjunction/token-subsequence generator of Polygraph, and
perform the experiment in multiple rounds, each with 5 remaining target byte
sequences for the Bayes signature generation. The generated signatures are then
evaluated with 5 diﬀerent sets of 100,000 cookies. The signatures generated re-
sult in a 100% false positive against the tested sets of cookies as expected. Once
again, the attack against Hamsa and the conjunction/token-subsequence gener-
ator of Polygraph needs only one invocation of the signature generation process.
On the other hand, the attack against the Bayes signature generation requires
around 130 rounds to ﬁnish.
Obviously, the possible need to invoke the signature generator multiple times
is a drawback of the type III attacks in general. Depending on the frequency at
which the signature generation process can be invoked, the attack can take a long
time to complete. Nonetheless, in order to contain fast propagating worms, the
maximum time between two invocations cannot be too long; in [5], this is given
as “on the order of ten minutes”. Now, let’s assume the signature generation can
be invoked every 10 mins5; it will then take around 8 hours to generate the top
5 According to [11], if content ﬁltering is deployed under the “top 100 ISPs” scenario,
a reaction time of 10 mins is necessary to protect 90% of vulnerable hosts against a
worm capable of making 40 probes/sec, and the probe rate of Code-Red v2 is assumed
to be 10/sec. Also note is that an invocation of the signature generation process every
10 mins is certainly insuﬃcient in stopping SQL Slammer, which infected 90% of
vulnerable hosts in 10 mins.
Advanced Allergy Attacks: Does a Corpus Really Help?
253
Table 2. A summary of the four most powerful attacks discussed
Attack
Name
Encoded-
Date Attack
Timestamp-
cookie
Attack
Infrequent-
requests
Attack
ID-cookie
Attack
Type II/III? Target Site Target traﬃc compo-
nent
CNN.com Dates
URLs
Type II
encoded
in
Number of
signatures
7 sigs
Type II Amazon.com Timestamps in cook-
ies
7 sigs
Type III
CNN.com Requests
to pages
other than the most
popular ones
100 sigs
Type III Google.com Identiﬁcation cookies 256 sigs
Damage caused
BLP of more than
0.25 (when the cor-
pus
is 7 days or
older).
Block all traﬃc to
Amazon.com if
the
corpus is 7 days or
older.
BLP of more than 0.6
Block all traﬃc to
Google.com
50 allergic signatures in the type III attack against CNN.com (which will result
in a BLP of more than 0.25).
7 Conclusions
In this paper, we argued that testing signatures generated by a vulnerable ASG
against a static corpus of normal traﬃc before their deployment cannot prevent
the high false positives caused by an allergy attack. In particular, we have iden-
tiﬁed two advanced attacks that can evade such corpus-based defense. The ﬁrst
attack, called the type II allergy attack, exploits the diﬃculty of capturing the
evolution of normal traﬃc with a static corpus; as a result, allergic signatures
targeting traﬃc patterns that emerge after the generation of the corpus will go
undetected. The second attack, called the type III allergy attack, employs a more
brute-force, divide-and-conquer approach; it simply induces the target ASGs into
generating a set of signatures, each with a suﬃciently low false positive to go
pass the corpus-based defense, but as a whole will block out a signiﬁcant portion
of normal traﬃc. This attack is possible due to the natural diversity occurring
in normal traﬃc, which provides a way to “divide” them into small pieces, each
matched by a diﬀerent allergic signature.
We have provided multiple examples of both type II and type III attacks
against popular sites like CNN.com, Amazon.com and Google.com. In order to
analyze the amount of damages caused by some of these attacks, we proposed
a metric called the “broken link probability”, which measures the probability
that a surfer will try to access pages made unavailable by the attack during
his/her visit to the target site. The BLP is also a good estimate of the portion
of ﬂows in a corpus that will be ﬁltered by a candidate allergic signature, which
is necessary in designing type II and type III attacks. With the BLP and some
other techniques, we have analyzed the eﬀectiveness of all the proposed attacks.
A summary of the most powerful ones is given in Table 2.
254
S.P. Chung and A.K. Mok
Even though there are various mitigations that can limit (but not completely
stop) the damages caused by a type II/III allergy attack, it is important to note
that most of them come at a cost of accentuating the threat from innocuous
pool poisoning. For example, the power of a type II attack can be signiﬁcantly
reduced by keeping the corpus up-to-date which can be costly if not problem-
atical. More importantly, a fresh corpus allows instant eﬀect for innocuous pool
poisoning; the attacker can launch the intended attack immediately after send-
ing out the bogus traﬃc. The same applies for defending against type III attack
by setting a lower threshold for allowable false positives in new signatures; a
successful innocuous pool poisoning will require a much smaller volume of bogus
traﬃc. Another possible defense against the type III attack is to check the total
false positives caused by all the signatures generated in each invocation of the
signature generation process, just as the Bayes signature generation algorithm
in Polygraph does. This will have the eﬀect of reducing the number of allergic
signatures generated in each “round” of the attack, and thus increase the time
to complete a type III attack. Without being able to determine which signature
is bogus and which ﬁlters real worm traﬃc, such defense can run into the same
problem faced by the Bayes signature generator as demonstrated in [16]: it is
impossible to be eﬀective against real attacks while keeping the false positive
low. An attacker can exploit this fundamental weakness by, say, mounting both
an allergy attack and an innocuous pool poisoning attack simultaneously.
Finally, we emphasize that even though our discussion focused on attacks
against HTTP requests, type II and type III attacks can be used against other
kinds of traﬃc too. This is especially true for type III attacks. In fact, we ﬁnd
that many important protocols contain ﬁelds that uniquely identify a particular
user/communication session (e.g. the protocol for DNS and MSN), and diver-
sity in requested services is also commonly found in many types of traﬃc (e.g.
domain name to be resolved, recipient email address). All these can be seen as
opportunities for type III attacks against non-HTTP traﬃc as is being validated
in ongoing work.
References
1. Brumley, D., Newsome, J., Song, D., Wang, H., Jha, S.: Towards Automatic Gener-
ation of Vulnerability-Based Signatures. In: Proceedings of The 2006 IEEE Sympo-
sium on Security and Privacy, Oakland, May 2006, IEEE Computer Society Press,
Los Alamitos (2006)
2. Chung, S.P., Mok, A.K.: Allergy attack against automatic signature generation. In:
Zamboni, D., Kruegel, C. (eds.) RAID 2006. LNCS, vol. 4219, Springer, Heidelberg
(2006)
3. Costa, M., Crowcroft, J., Castro, M., Rowstron, A., Zhou, L., Zhang, L., Barham,
P.: Vigilante: End-to-end containment of internet worms. In: Proceedings of 20th
ACM Symposium on Operating Systems Principles, Brighton, October 2005, ACM
Press, New York (2005)
4. H.http://www.hitwise.com
Advanced Allergy Attacks: Does a Corpus Really Help?
255
5. Kim, H., Karp, B.: Autograph: Toward automated, distributed worm signature de-
tection. In: Proceedings of 13th USENIX Security Symposium, California (August
2004)
6. Kreibich, C., Crowcroft, J.: Honeycomb - Creating Intrusion Detection Signatures
Using Honeypots. In: Proceedings of the Second Workshop on Hot Topics in Net-
works (Hotnets II), Boston (November 2003)
7. Krugel, C., Kirda, E., Mutz, D., Robertson, W., Vigna, G.: Polymorphic worm
detection using structural information of executables. In: Valdes, A., Zamboni, D.
(eds.) RAID 2005. LNCS, vol. 3858, Springer, Heidelberg (2006)
8. Li, Z., Sanghi, M., Chen, Y., Kao, M., Chavez, B.: Hamsa: fast signature generation
for zero-day polymorphic worms with provable attack resilience. In: Proceedings of
The 2006 IEEE Symposium on Security and Privacy, Oakland, May 2006, IEEE
Computer Society Press, Los Alamitos (2006)
9. Locasto, M.E., Wang, K., Keromytis, A.D., Stolfo, S.J.: Flips: Hybrid adaptive in-
trusion prevention. In: Valdes, A., Zamboni, D. (eds.) RAID 2005. LNCS, vol. 3858,
Springer, Heidelberg (2006)
10. Miller, R.C., Bharat, K.: SPHINX: A Framework for Creating Personal, Site-
Speciﬁc Web Crawlers. In: Proceedings of 7th World Wide Web Conference, Bris-
bane (April 1998)
11. Moore, D., Shannon, C., Voelker, G.M., Savage, S.: Internet quarantine: Require-
ments for containing self-propagating code. In: Proceedings of The 22nd Annual
Joint Conference of the IEEE Computer and Communications Societies (INFO-
COM 2003), San Francisco, April 2003, IEEE Computer Society Press, Los Alami-
tos (2003)
12. Newsome, J., Karp, B., Song, D.: Polygraph: Automatically generating signatures
for polymorphic worms. In: Proceedings of The 2005 IEEE Symposium on Security
and Privacy, Oakland, May 2005, IEEE Computer Society Press, Los Alamitos
(2005)
13. Newsome, J., Karp, B., Song, D.: Paragraph: Thwarting signature learning by
training maliciously. In: Zamboni, D., Kruegel, C. (eds.) RAID 2006. LNCS,
vol. 4219, Springer, Heidelberg (2006)
14. Newsome, J., Song, D.: Dynamic taint analysis for automatic detection, analysis,
and signature generation of exploits on commodity software. In: Proceedings of
12th Annual Network and Distributed System Security Symposium (NDSS 05)
(February 2005)
15. Page, L., Brin, S., Motwani, R., Winograd, T.: The pagerank citation ranking:
Bringing order to the web. Technical report, Stanford Digital Library Technologies
Project (1998)
16. Perdisci, R., Dagon, D., Lee, W., Fogla, P., Sharif, M.: Misleading Worm Signature
Generators Using Deliberate Noise Injection. In: Proceedings of The 2006 IEEE
Symposium on Security and Privacy, Oakland, May 2006, IEEE Computer Society
Press, Los Alamitos (2006)
17. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm ﬁngerprinting. In:
Proceedings of 5th Symposium on Operating Systems Design and Implementation,
California (December 2004)
18. Tancer, B.: Obama clinton chart updated with edwards (January 2007), http://
www.hitwise.com/datacenter/industrysearchterms/all-categories.php