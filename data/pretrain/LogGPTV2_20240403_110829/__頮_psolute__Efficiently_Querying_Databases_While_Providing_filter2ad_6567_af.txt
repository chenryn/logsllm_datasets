### Storage Usage Analysis

**Table 1: Storage usage for varying data, record, and domain sizes.**

- **Index I (B+ tree):** Implemented with a fanout of 200 and 70% occupancy, the size is approximately 5.7ùëõ bytes.
- **Aggregate Tree DS:** Negligibly small in practice.
- **ORAM U State:** Size varies based on the data, record, and domain sizes.
- **ORAM S State:** Size also varies, but the S to U storage size ratio ranges from 85 in the smallest setting to over 2,000 in the largest.

*Italicized values are estimated.*

### Observations:
1. **Index Size:** Grows linearly with the data size.
2. **DS Size:** Practically negligible.
3. **Efficiency of Multiple Indexed Attributes:** Small I and DS sizes support multiple indexed attributes efficiently.
4. **S to U Storage Ratio:** Varies significantly, indicating potential trade-offs.
5. **Client Storage and ORAM Failure Probability:** One can trade client storage for ORAM failure probability, typically bounded to about \( \eta_1 = 2^{-32} \).

### Performance and Overhead

#### Parallelization and Variance
- **Parallelization Over ORAMs:** Queries are parallelized over \( m \) ORAMs, and the query completes when the last thread finishes.
- **Curse of the Last Reducer:** A common issue in distributed systems where one thread takes disproportionately longer to finish, often due to blocking I/O, network delay, or shared vCPU contention.
- **Impact on Performance:** More noticeable for smaller queries where small disruptions matter more.

#### Impact of Configuration Parameters

- **Privacy Budget \( \epsilon \):** The amount of noise grows exponentially as \( \epsilon \) decreases. High \( \epsilon \) values result in minimal noise contribution, while low \( \epsilon \) values dominate the overhead.
- **Record Size:** Directly proportional to the elapsed time.
- **Data Size \( n \):** Positive but non-linear correlation; a 10 times increase in \( n \) results in less than 10 times increase in time due to logarithmic ORAM overhead.
- **Domain Size \( N \):** Low and high values deliver worse performance than the middle value. Sparse datasets result in more nodes in the aggregate tree, contributing to total noise.
- **Selectivity:** Overhead grows with the result size, but not strictly proportionally for smaller queries.
- **Data and Query Distributions:** Best performance on uniform data and ranges. Skewed distributions introduce sparse and dense regions, increasing overhead.

### Scalability

- **Horizontal Scaling:** Essential for practical systems. Performance should improve proportionally with the number of ORAMs.
- **Scalability Experiments:** Default settings for both Œ†no‚àíùõæ and Œ†ùõæ methods, varying the number of ORAMs from 8 to 96.
- **Observations:**
  - Œ†ùõæ method provides better performance and storage efficiency.
  - Linear scaling with the number of ORAMs, except at \( m = 96 \) where some ORAMs share a single KVS.

### Optimizations and Benefits

- **ORAM Batching:** Substantially reduces overhead by minimizing I/O requests.
- **Lightweight ORAM Machines:** Removes memory and network bottlenecks when scaling.
- **Combined Improvements:** Up to an order of magnitude speedup.

### Multiple Indexed Attributes

- **Performance Impact:** Minimal increase in overhead due to a lower privacy budget.
- **Storage Impact:** Client storage increases slightly (by 9 MB), still constituting only 3.3% of server storage.

### Conclusion and Future Work

- **Epsolute System:** Provides strong security guarantees and excellent query performance for range and point queries.
- **Future Work:**
  - Extend approaches to use trusted execution environments (TEE) like SGX.
  - Explore multi-user settings without shared stateful clients.
  - Enable dynamic workloads with insertions and updates.
  - Consider adaptive and non-adaptive security models.
  - Explore other relational operations like JOIN and GROUP BY.

### Acknowledgments

- **Reviewers and Feedback:** Valuable contributions from anonymous reviewers and Arkady Yerukhimovich.
- **Support and Assistance:** Daria Bogatova for naming and visual aids, Johes Bater for Shrinkwrap code, and funding from NSF grants.

### References

- [1] Arvind Arasu, et al. "Secure Database-as-a-Service with Cipherbase." SIGMOD '13.
- [2] Arvind Arasu, et al. "Orthogonal Security With Cipherbase." CIDR'13.
- [3] Sumeet Bajaj and Radu Sion. "TrustedDB: A trusted hardware-based database with privacy and data confidentiality." IEEE TKDE 2013.
- [4] Johes Bater, et al. "SMCQL: Secure Querying for Federated Databases." Proc. VLDB Endow. 2017.
- [5] Johes Bater, et al. "Shrinkwrap: efficient sql query processing in differentially private data federations." PVLDB 2018.