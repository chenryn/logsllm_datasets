each message m is labeled in a machine readable format with
a purpose u (e.g., “treatment”, “healthcare”, etc.). This is
represented by the predicate purp(m, u).
Attributes and purposes are assumed to have separate
hierarchies, e.g., the attribute “medications” is contained
in “medical history”. This is formalized as the predicate
attr in(medications, medical-history). Similarly, the pred-
icate purp in(u, u(cid:48)) means that purpose u is a special case
of purpose u(cid:48), e.g., purp in(surgery, treatment). Finally,
doctorOf(p2, q, τ ) means that q is a doctor of p2 at time τ .
The policy above can be formalized in our logic as follows
(terms phi and treatment are constants).
ϕpol =∀p1,p2, m, u, q, t, τ. (send(p1, p2, m, τ ) ∧ purp(m, u) ∧
tagged(m, q, t))
⊃ attr in(t, phi)
∨ (doctorOf(p2, q, τ ) ∧ purp in(u, treatment))
∨ ∃τ(cid:48).(τ(cid:48) < τ ∧
consents(q, sendaction(p1, p2, (q, t)), τ(cid:48)))
In words, if entity p1 sends to entity p2 a message m at
time τ , m is tagged as carrying attribute t of individual q,
and m is labeled with purpose u, then either the attribute t
is not a form of protected health information (so the policy
does not apply) or the recipient p2 is a doctor of q at time τ
(atom doctorOf(p2, q, τ )) and u is a type of treatment, or q
has consented to this transmission in the past (last two lines
of ϕpol).
Finally,
respectively.
predicates attr in and purp in may be veriﬁed through a
function that checks stipulated hierarchies over attributes
and purposes,
the predicate
doctorOf(p2, q, τ ) may require human input to resolve be-
cause, in general, information about all of q’s doctors may
be unavailable to the audit mechanism. Our implementa-
tion (Section 4) requires the policy designer to categorize
predicates based on how they are veriﬁed, but our audit
algorithm uses a single, abstract representation of these ver-
iﬁcation methods, called partial structures, to which we turn
next.
2.1 Partial Structures and Semantics
We formally abstract the information about truth and fal-
sity of atoms available to our audit algorithm as functions
called partial structures and deﬁne semantics of logical for-
mulas over such structures. Given a possibly inﬁnite domain
D of terms, a partial structure (abbrev. structure) L is a
map from atoms over D to the three-value set {tt, ff, uu}.
We say that the atom P is true, false, or unknown in the
structure L if L(P ) is tt, ff, or uu, respectively. The possi-
bility of mapping an atom to “unknown” captures the com-
mon phenomena that, during audit, not every atom may be
classiﬁable as true or false. In particular, partial structures
abstract the following diﬀerent kinds of incompleteness in
information available to the audit algorithm.
• Future incompleteness:
Information about events in
the future cannot be available to an audit algorithm.
For instance, the policy may allow a disclosure if the
subject of the information disclosed is notiﬁed within a
month. However, if an audit occurs immediately after
a disclosure, it will not be known whether or not a
corresponding notiﬁcation will be sent in future. This
is easily modeled by a partial structure L satisfying
L(send(p1, p2, m, τ )) = uu for every τ greater than the
time of audit.
• Spatial incompleteness: Not all relevant audit logs may
be available to the audit system. For instance, with
reference to Example 2.1, it is conceivable that the
predicates send and consents are stored on separate
physical sites. If we audit at the ﬁrst site, information
about consents may be unavailable. This incomplete-
ness is easily modeled by requiring L(consents(p, a, τ ))
= uu for all p, a and τ .
• Subjective incompleteness: A mechanized audit sys-
tem is unlikely to resolve predicates that rely on human
input. In Example 2.1, assuming that the set of doc-
tors of a patient is not known to the audit algorithm,
resolving the predicate doctorOf(p2, q, τ ) may require
human input. Formally, this is modeled by a partial
structure L satisfying L(doctorOf(p2, q, τ )) = uu for
all p2 , q, and τ . Similarly, predicates that rely on
human belief or professional judgment, which consti-
tute a signiﬁcant fraction of all predicates used in a
prior formalization of HIPAA [15], can be modeled by
mapping them to uu in a structure.
Predicates may be veriﬁed in diﬀerent ways in an imple-
mentation. The predicates send and consents can be veri-
ﬁed by looking up respective logs. Predicates tagged(m, q, t)
and purp(m, u) can be veriﬁed by examining the tags in m,
i.e., through a pre-deﬁned computable function. Similarly,
Because our audit algorithm (Section 3) works with partial
structures, it takes into account all these forms of incom-
pleteness. We note that real audit logs often only list atoms
that are true (tt), and cannot distinguish atoms that are
false (ff) from those that are unknown (uu). Consequently,
for modeling real scenarios, we deﬁne partial structures L
from system logs and additional information about their
completeness, as explained in Section 4.1.
Semantics. We formalize the semantics of logical formulas
as the relation L |= ϕ, read “ϕ is true in the partial structure
L”. Restrictions c are a subsyntax of formulas ϕ, so we do
not deﬁne the relation separately for them.
- L |= P iﬀ L(P ) = tt
- L |= (cid:62)
- L |= ϕ ∧ ψ iﬀ L |= ϕ and L |= ψ
- L |= ϕ ∨ ψ iﬀ L |= ϕ or L |= ψ
- L |= ∀(cid:126)x.(c ⊃ ϕ) iﬀ for all (cid:126)t ∈ D either L |= c[(cid:126)t/(cid:126)x] or
L |= ϕ[(cid:126)t/(cid:126)x]
- L |= ∃(cid:126)x.(c ∧ ϕ) iﬀ there exists (cid:126)t ∈ D such that L |=
c[(cid:126)t/(cid:126)x] and L |= ϕ[(cid:126)t/(cid:126)x]
For dual atoms, we deﬁne L(P ) = L(P ), where tt = ff,
ff = tt, and uu = uu. We say that a formula ϕ is false on
the structure L if L |= ϕ. The following two properties hold:
1. Consistency: A formula ϕ cannot be simultaneously
true and false in the structure L, i.e., either L (cid:54)|= ϕ or
L (cid:54)|= ϕ
2. Incompleteness: A formula ϕ may be neither true nor
false in a structure L, i.e., L (cid:54)|= ϕ and L (cid:54)|= ϕ may both
hold.
The ﬁrst property follows by induction on ϕ. The second
property follows from a simple example. Consider a struc-
ture L and an atom P such that L(P ) = uu. Then, L (cid:54)|= P
and L (cid:54)|= P .
Structure Extension.
In practice, system logs evolve
over time by gathering more information. This leads to
a partial order, L1 ≤ L2 on structures (L2 extends L1),
meaning that L2 has more information than L1. Formally,
L1 ≤ L2 if for all ground atoms P (atoms P without free
variables), L1(P ) ∈ {tt, ff} implies L2(P ) = L1(P ). Thus,
as structures extend, the valuation of an atom may change
from uu to either tt or ff, but cannot change once it is ei-
ther tt or ff. The following property follows by induction
on ϕ:
• Monotonicity: L1 ≤ L2 and L1 |= ϕ imply L2 |= ϕ.
Replacing ϕ with ϕ, we also obtain that L1 ≤ L2 and L1 |= ϕ
imply L2 |= ϕ. Hence, if L1 ≤ L2 then L2 preserves both
the L1-truth and L1-falsity of every formula ϕ.
3. AUDIT ALGORITHM
Our main technical contribution is an iterative process
that checks for violations of policies written in the logic. At
each iteration, our algorithm takes as input a policy ϕ and
information about atoms abstracted as a partial structure
L, and outputs a residual policy ψ that contains exactly the
parts of ϕ that could not be veriﬁed due to lack of infor-
mation in L. Such an iteration is written reduce(L, ϕ) = ψ.
When more information becomes available, extending L to
L(cid:48) (L ≤ L(cid:48)), another iteration of the algorithm can be used
with inputs ψ and L(cid:48) to obtain a new formula ψ(cid:48). This
process can be continued until the output is either (cid:62) (no
violation), ⊥ (violation) or a human auditor inspects the
output. By design, our algorithm satisﬁes three important
properties:
• Termination: Each iteration terminates.
• Correctness: If reduce(L, ϕ) = ψ, then for all exten-
sions L(cid:48) of L, L(cid:48) |= ϕ iﬀ L(cid:48) |= ψ.
• Minimality: If reduce(L, ϕ) = ψ, then an atom occurs
in ψ only if it occurs in ϕ and its valuation on L is uu.
The technically diﬃcult part of reduce is its treatment of
quantiﬁers over inﬁnite domains. Consider, for instance, the
behavior of an algorithm satisfying the above three proper-
ties on input ∀x.ϕ. Because the output must be minimal,
in order to reduce ∀x.ϕ, a naive algorithm will instantiate x
with each possible element of the domain D and check the
truth or falsity of ϕ for that instance on L. This immedi-
ately leads to non-termination if the domain D is inﬁnite,
which does happen for real policies (e.g., HIPAA contains
quantiﬁcation over the inﬁnite domain of messages).
Given the need for inﬁnite domains, something intrinsic in
quantiﬁcation must limit the number of relevant instances
of x that need to be checked to a ﬁnite number. To this end,
we rely on the restrictions c in quantiﬁers, ∀(cid:126)x.(c ⊃ ϕ) and
∃(cid:126)x.(c ∧ ϕ), and use the technique of mode analysis from
logic programming [2] to ensure that the restriction c has
only a ﬁnite number of satisfying instances in any structure
and that these instances are computable.
Brieﬂy, mode analysis requires the policy designer to spec-
ify which argument positions of a predicate can be com-
puted ﬁnitely from others. For instance, in Example 2.1
we assumed that the purpose of a message is written on it
in machine-readable format and, hence, can be computed
from the message. Denoting required inputs by + and com-
putable outputs by −, we may give the predicate purp(m, u)
the mode purp(+,−), meaning that from the input m, the
output u can be computed. The mode purp(−, +) is in-
correct because given a ﬁxed second argument (purpose),
there may be an inﬁnite number of ﬁrst arguments (mes-
sages) annotated with that purpose, so the latter set cannot
be ﬁnitely computed. Similarly, if the predicate mult(x, y, z)
means that x = yz, where x, y, z are integers, then any of
the modes mult(+, +,−), mult(−, +, +), and mult(+,−, +)
are okay, but mult(−,−, +) is not.
Given the mode information of all predicates in a policy,
a static, linear-time check of the policy, called a mode check,
ensures that there are only a ﬁnite number of instances of
free variables that can satisfy a restriction c in the policy.
To keep the presentation accessible, we omit a technical de-
scription of mode checking, but its details are present in our
TR. We note that mode checking is very permissive even
though not every policy in the syntax of the logic passes the
mode check. In particular, our entire prior formalization of
HIPAA [15] passes the check.
tion, we deﬁne a function (cid:100)sat(L, c) that returns all substi-
To actually compute the satisfying instances of a restric-
tutions σ for free variables of c such that L |= cσ (Sec-
tion 3.1). This deﬁnition assumes a function sat(L, P ) that
returns all substitutions σ for free variables of P such that
L |= P σ if all input positions in P are ground. In practice,
sat(L, P ) is implemented by looking up system logs or call-
ing domain-speciﬁc solvers, depending on the predicate in
by induction on ϕ, using (cid:100)sat(L, c) as a black-box. Because
P (see Section 4 for the deﬁnition of sat that we use in our
implementation).
Finally, the main audit function reduce(L, ϕ) is deﬁned
sat(L, P ) may only be deﬁned for P with ground input ar-
guments, reduce(L, ϕ) is a partial function. However, we
show that if ϕ passes the mode check, then reduce(L, ϕ) is
deﬁned (Theorem 3.3).
3.1
At the core of our audit regime is a computable function
reduce(L, ϕ) = ψ, that instantiates quantiﬁers in, and sim-
pliﬁes, the prevalent policy ϕ using information from the
extant structure L to obtain a residual policy ψ. Given an
initial policy ϕ0 and a sequence of structures L1 ≤ L2 ≤
. . . ≤ Ln, the reduction algorithm can be applied repeatedly
to obtain ϕ1, . . . , ϕn such that reduce(Li, ϕi−1) = ϕi. We
write this process in symbols as ϕ0
Iterative Reduction
the function(cid:100)sat(L, c), which we deﬁne later. (cid:100)sat(L, c) com-
The deﬁnition of reduce is shown in Figure 1. It relies on
putes the ﬁnite set of substitutions σ such that L |= cσ. For
atoms P , reduce(L, P ) equals (cid:62), ⊥, or P , if L(P ) equals tt,
ff, or uu, respectively. The clauses for the connectives (cid:62), ⊥,
∧, and ∨ are straightforward. To evaluate reduce(L,∀(cid:126)x.(c ⊃
ϕ)), we ﬁrst determine the set of instances of (cid:126)x that satisfy
c by calling (cid:100)sat(L, c). For each such instance (cid:126)t1, . . . , (cid:126)tn, we
L1−−→ ϕ1 . . .
Ln−−→ ϕn.
reduce ϕ[(cid:126)ti/(cid:126)x] to ψi through a recursive call to reduce. Be-
cause all instances of ϕ must hold in order for ∀(cid:126)x.(c ⊃ ϕ)
to be true, the output is ψ1 ∧ . . . ∧ ψn ∧ ψ(cid:48), where the last
conjunct ψ(cid:48) records the fact that instances of (cid:126)x other than
(cid:126)t1, . . . , (cid:126)tn have not been considered. The latter is necessary
because there may be instances of (cid:126)x satisfying c in extensions
of L, but not L itself. Precisely, we deﬁne S = {(cid:126)t1, . . . , (cid:126)tn}
and ψ(cid:48) = ∀(cid:126)x.((c ∧ (cid:126)x (cid:54)∈ S) ⊃ ϕ). The new conjunct (cid:126)x (cid:54)∈ S
prevents the instances (cid:126)t1, . . . , (cid:126)tn from being checked again
in subsequent iterations. Formally, (cid:126)x (cid:54)∈ S encodes the nega-
tion of the usual ﬁnite-set membership. The treatment of
∃(cid:126)x.(c ∧ ϕ) is dual; in that case, the output contains disjunc-
tions because the truth of any one instance of ϕ suﬃces for
the formula to hold.
Our implementation also performs trivial rewriting to sim-
plify the output of reduce. Speciﬁcally, it rewrites ψ ∧ (cid:62) to
ψ, ψ ∧ ⊥ to ⊥, ψ ∨ (cid:62) to (cid:62), and ψ ∨ ⊥ to ψ.
The function (cid:100)sat(L, c) which com-
Deﬁnition of (cid:100)sat.
putes the set of substitutions σ such that L |= cσ, is deﬁned