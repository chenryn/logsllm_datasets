There are three publicly known attacks against CBC-mode (see §2):
BEAST (2011), Lucky 13 (2013), and POODLE (2014). Each CBC-
mode attack requires different countermeasures. BEAST could only
be fixed on the client-side, for example using record splitting. How-
ever, it was also recommended to switch to newer TLS versions
(TLS 1.1 is immune to the attack) or to avoid CBC-mode on the
server side. Because of lack of widespread support for TLS 1.1 and
TLS 1.2 at the time, this would mean switching to RC4 cipher suites.
In the case of Lucky 13, complex patches were rolled out on both
clients and servers. Again, TLS 1.2 was not widely available at the
time, so switching to authenticated encryption (AEAD) was not
practical. However, Lucky 13 in combination with the RC4 attacks
Lucky13POODLERC4SnowdenRC4 passwordsRC4 no moreSweet3201020304050607080901002012−01−012012−04−012012−07−012012−10−012013−01−012013−04−012013−07−012013−10−012014−01−012014−04−012014−07−012014−10−012015−01−012015−04−012015−07−012015−10−012016−01−012016−04−012016−07−012016−10−012017−01−012017−04−012017−07−012017−10−012018−01−012018−04−01Percent monthly connectionsVersionSSLv3TLSv10TLSv11TLSv12Lucky13POODLERC4SnowdenRC4 passwordsRC4 no moreSweet3201020304050607080902012−01−012012−04−012012−07−012012−10−012013−01−012013−04−012013−07−012013−10−012014−01−012014−04−012014−07−012014−10−012015−01−012015−04−012015−07−012015−10−012016−01−012016−04−012016−07−012016−10−012017−01−012017−04−012017−07−012017−10−012018−01−012018−04−01Percent monthly connectionsTypeAEADCBCRC4Lucky13POODLERC4RC4 passwordsRC4 no moreSweet3201020304050607080901002012−01−012012−04−012012−07−012012−10−012013−01−012013−04−012013−07−012013−10−012014−01−012014−04−012014−07−012014−10−012015−01−012015−04−012015−07−012015−10−012016−01−012016−04−012016−07−012016−10−012017−01−012017−04−012017−07−012017−10−012018−01−012018−04−01Percent monthly connectionsAEADRC4DES3DESIMC ’18, October 31-November 2, 2018, Boston, MA, USA
Kotzias et al.
Figure 4: TLS fingerprints with support for RC4, DES, 3DES
or AEAD cipher suites. CBC-mode support is near universal.
Chrome
Opera
Safari
№ CBC ciphersuites
04/02/2014 Reduced from 29 to 17
14/10/2014 Reduced to 10
31/03/2015 Reduced to 9
14/03/2018 Reduced to 5
20/08/2013 Reduced from 29 to 16
12/11/2013 Reduced to 10
03/03/2015 Reduced to 9
02/03/2016 Reduced to 7
25/01/2017 Reduced to 5
02/07/2013
27/08/2013 Reduced to 16
19/11/2013 Reduced to 10
10/03/2015 Reduced to 9
09/06/2015 Reduced to 7
07/02/2017 Reduced to 5
18/09/2014
01/09/2016 Reduced to 15
19/07/2017 Reduced to 12
Increased from 25 to 29
Increased from 28 to 30
Browser Ver.
Firefox
Date
27
33
37
60 beta
29
31
41
49
56
15
16
18
28
30
43
7.1
9
10.1
Table 3: Changes in the number of CBC ciphersuites offered
by major browsers.
Concerning the impact of Lucky 13 on CBC-mode usage, we
do not see a clear shift in traffic patterns. This may be because all
major implementations patched against the attack and this was
considered sufficient mitigation. We point to the rise in TLS 1.2
traffic and the use of AEAD cipher suites as a longer-term reaction
to the sequence of attacks on CBC-mode (including Lucky 13) and
RC4.
During our observation period basically all of the TLS clients in
our dataset support CBC-mode. However, while clients still sup-
ported CBC-mode, they gradually “downgraded” support for it over
time. Table 3 lists the changes in the TLS configurations of 4 major
browsers as regards as their support of CBC-mode cipher suites. It
shows that Firefox, Chrome, and Opera significantly downgraded
their support between August 2013 and February 2014. Safari did
so in September 2016. On the other hand, while clients are reducing
the number of CBC-mode cipher suites they offer, Figure 5 shows
that they still place CBC-mode quite high in their list of preferences,
with little change in the relative position of the first offered CBC-
mode cipher suite over time. Figure 5 shows the relative position
over time of various client-advertised ciphers. Ciphers found at the
top (AEAD, and CBC) are (on average) placed in the beginning of
the client advertised cipher list. Even today, as Figure 3 and Figure 4
show, almost all clients still offer CBC-mode cipher suites. Presum-
ably this is done in order to be able to establish secure connections
with servers that have not been updated to TLS 1.2 yet. According
to Censys, server side support of CBC ciphers has also dropped
significantly, with the percentage of servers choosing CBC-mode
cipher suites over other cipher suites offered going down from
54% in September 2015 to 35% in May 2018, with the highest drop
happening between late-2016 and mid-2017
Figure 5: Average relative position of the first AEAD, CBC,
RC4, DES or 3DES client-advertised cipher.
Figure 1 shows that TLS 1.0 stayed in use for years after BEAST
became public, though there is a steady decline over the period of
our study from nearly 100% in January 2012 to 2.8% in February
2018. Interestingly, there is a period of time from mid-2012 to late
2013 where TLS 1.1 gains traction; this may have been in response
to BEAST. The TLS 1.1 traffic drops off quickly as TLS 1.2 takes off
in late 2013. Figure 2 shows both that RC4 traffic did not increase
significantly post-BEAST, and also that CBC-mode remained pop-
ular right up until August 2015, when the amount of CBC-mode
traffic finally starts to show a decline. This is all suggestive that
client-side patches for BEAST were seen as sufficient mitigation for
the attack (which anyway required a specific browser vulnerability
to gain the fine control over the placement of chosen plaintext
blocks to make the attack feasible [26,41]).
We also see a drop off in SSL 3 traffic in Figure 1. However, this
predates the publication of the POODLE attack, regarded as the
“SSL 3 killer”. Thus we cannot directly say that POODLE influenced
the move away from SSL 3, though this could be the case if infor-
mation about the attack was circulating prior to publication as is
often the case.
POODLERC4 passwordsRC4 no moreSweet321020304050607080902014−02−012014−04−012014−06−012014−08−012014−10−012014−12−012015−02−012015−04−012015−06−012015−08−012015−10−012015−12−012016−02−012016−04−012016−06−012016−08−012016−10−012016−12−012017−02−012017−04−012017−06−012017−08−012017−10−012017−12−012018−02−012018−04−01Percent monthly fingerprintsAEADRC4DES3DES10203040506070802014−02−012014−04−012014−06−012014−08−012014−10−012014−12−012015−02−012015−04−012015−06−012015−08−012015−10−012015−12−012016−02−012016−04−012016−06−012016−08−012016−10−012016−12−012017−02−012017−04−012017−06−012017−08−012017−10−012017−12−012018−02−012018−04−01Average relative position (%)AEADCBCRC4DES3DESComing of Age: A Longitudinal Study of TLS Deployment
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Browser Ver.
Firefox
Chrome
Opera
IE/Edge2
Safari
Date
№ RC4 ciphersuites
Fallback only1[5]
04/12/2014 Reduced from 6 to 4
24/02/2015
12/05/2015 Only available for whitelist [5]
26/01/2016 Removed completely
20/08/2013 Reduced from 6 to 4
19/05/2015 Removed completely
02/07/2013
Increased from 2 to 6
27/08/2013 Reduced to 4
09/06/2015 Removed completely
20/05/2015 All RC4 ciphersuites removed
25/02/2012 Reduced from 7 to 6
30/09/2015 Reduced to 4
20/09/2016 Removed completely
27
36
38
44
29
43
15
16
30
13
6
9
10.1
1 RC4 only offered if connection without RC4 failed.
2 Not removed in Windows XP.
Table 4: Changes in the support of RC4 ciphersuites by major
browsers.
5.3 RC4 Attacks
Multiple attacks targeting RC4 were found in recent years [9, 48,
85]. It has been recommended since at least 2015 that RC4 should
no longer be used [67]. Note that this was a change from earlier
recommendations: after CBC-mode problems were discovered, RC4
was often recommended as an alternative cipher.
Figure 2 shows the percentage of connections that negotiate an
RC4 cipher suite and captures the drop of RC4 usage from 60% in
August 2013 to almost zero in March 2018. A similar observation
can be made for Figure 6 that shows the percentage of connections
in which clients advertise RC4 cipher suites. Table 4 shows the
dates at which each browser reduced and completely removed their
support for RC4.
A big drop in clients advertising RC4 connections can be ob-
served at the beginning of 2015 in Figure 6, correlating in time
with the decision of Chrome, Firefox and IE/Edge to completely
remove support for RC4. However, matching our fingerprints to
Notary traffic reveals that a residual number of clients continued
to advertise RC4 for some time after browsers officially dropped it,
indicating a user population that does not quickly update. This is
supported by our findings in §4.1.
Interestingly, the drop in advertised RC4 cipher suites, driven
mostly by changes in major browsers, comes almost 18 months after
the beginning of the reduction in the number of TLS connections
that negotiate RC4 seen in Figure 2. This demonstrates that removal
of RC4 started on the server side and only later happened on the
client side. This is further illustrated in Figure 4 which shows that
the removal of RC4, when counted by distinct TLS fingerprints, hap-
pened much more slowly. Indeed, 39.9% of the observed fingerprints
still support RC4 as of March 2018.
Censys does not contain an active scan that tests for just RC4
support. However, it shows that even today (May 2018) 1,342,659
servers (3.4%) will choose RC4 given an older Chrome cipher list
(down from 11.2% in September 2015). Curiously some server con-
figurations will choose RC4 even if they support much more secure
Figure 6: Percentage of connections where the client adver-
tises RC4 cipher suites. Lines represent the dates of high
profile attacks; black dots the dates that browsers dropped
RC4 support.
ciphers. For example, the website of one of the largest banks in
Iran, bankmellat.ir, will use RC4 despite much stronger ciphers
being offered. When removing RC4 from the list, it will switch to a
modern AEAD cipher. SSL Pulse [70] tests RC4 support for about
150K websites with selection based on Alexa’s list of most popular
sites. 19.1% of servers still support RC4 cipher suites (down from
92.8% in their first scan in October 2013). They also report that 1 site
still supports only RC4 (down from 4,248 or 2.6% of sites surveyed
in October 2013).
5.4 Heartbleed
As mentioned in §2, Heartbleed was an OpenSSL vulnerability in
the processing of the Heartbeat extension that could leak process
memory, including private keys. The group that discovered Heart-
bleed estimates that over 66% of servers on the Internet might have
been vulnerable to it before disclosure [80]; however, this number is
just based on the number of Apache and NGinx servers, and these
could have been using other libraries. Some sites might also have
deactivated this feature. Durumeric et al. [44] estimated that at
least 23.7% of servers were vulnerable at the time when Heartbleed
became public. In their first scan in 2014, they found 5.9% of servers
to be vulnerable and 11.4% of servers supporting the Heartbeat
extension.
Heartbleed was extensively featured in the media and received
a quick response from server operators; the number of vulnerable
servers dropped to less than 2% in a month [44]. Looking at Heart-
bleed today, according to Censys scans, 0.32% of servers were still
vulnerable in May 2018, pointing to a significant long tail effect.
34% of servers now support the Heartbeat extension. While purely
passive observation cannot show if hosts are still vulnerable to
Heartbleed, we can monitor whether the Heartbeat extension is
still being actively used in the wild: 3% of the observed TLS connec-
tion negotiations still use it (i.e., the extension is offered by client
and acknowledged by the server) in May 2018. We find this odd
in view of the fact that the Heartbeat extension is a DTLS-specific
feature that is used to keep connections alive and detect the path
RFC−7465FirefoxRC4RC4 npasswordsRC4 no moreChromeIE/EdgeOperaSafariGGGGGG1020304050607080901002012−01−012012−04−012012−07−012012−10−012013−01−012013−04−012013−07−012013−10−012014−01−012014−04−012014−07−012014−10−012015−01−012015−04−012015−07−012015−10−012016−01−012016−04−012016−07−012016−10−012017−01−012017−04−012017−07−012017−10−012018−01−012018−04−01Percent monthly connectionsIMC ’18, October 31-November 2, 2018, Boston, MA, USA
Kotzias et al.
Date
№ 3DES ciphersuites
27
33
29
16
6.2
9.0
04/02/2014 Reduced from 8 to 3
14/10/2014 Reduced to 1
20/08/2013 Reduced from 8 to 1
27/08/2013 Reduced from 8 to 1
18/09/2014 Reduced from 7 to 6
30/09/2015 Reduced to 3
Browser Ver.
Firefox
Chrome
Opera
Safari
Table 5: Changes in the number of 3DES ciphersuites offered
by major browsers.
Figure 7: Percentage of monthly connections where the client
advertises Export, NULL, or Anonymous ciphers.
MTU [77], both features that are not needed in TCP based TLS
connections.
5.5 FREAK, Logjam and Export Ciphers