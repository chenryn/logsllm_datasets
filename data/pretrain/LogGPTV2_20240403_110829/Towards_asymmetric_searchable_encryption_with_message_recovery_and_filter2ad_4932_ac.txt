Proof. To prove the theorem, we need to show that the
requirements in Deﬁnition 1 are satisﬁed.
Referring to the Encrypt algorithm, given a ciphertext
cw = (c1, c2, c3, c4, c5), it is straightforward to verify that
the following equalities hold with probability 1.
v2 · ˆe(v3,
c′
2
H1(ˆe(c′
1, v1))
)
c′
2
H1(ˆe(c′
1, H2(w)x1 ))
c′
2
H1(ˆe(gx1
1 ,
c′
4
3)x2 )) · w
(c′
)
)
= ˆe(gx1y
1
, w−1) · ˆe(gx1y
1
= ˆe(gx1y
1
, w−1) · ˆe(gx1y
1
,
,
= ˆe(gx1y
1
,
c′
4
(c′
3)x2
)
= ˆe(c′
1, v0)
c′
5 = H3(c′
1||c′
2||c′
3||c′
4||v5||ˆe(c′
1, v1))
H1(ˆe(gx1
c2
1 , c4
x2
3
c
= w, ˆe(c1, H2(w)) = ˆe(g1,
c4
cx2
3
)),
)) · c4
x2
3
c
Based on the deﬁnition of Test1, we can conclude that
Test1(c, tw,s, SKs) = 1 holds.
c5 = H3(c1||c2||c3||c4||H2(w)||ˆe(gx1
1 ,
c4
cx2
3
)).
Referring to the deﬁnition of the Decrypt algorithm, the
above equalities means that Decrypt(cw, SKr) = w. As a
result, the ﬁrst requirement in Deﬁnition 1 is satisﬁed.
As to the second requirement, we prove two things.
• If Decrypt(c, SKr) = w holds, we prove that the equal-
ity Test1(c, tw,s, SKs) = 1 holds. Let c = (c′
Referring to the deﬁnition of the Decrypt algorithm,
Decrypt(c, SKr) = w implies the following equalities.
1, c′
2, c′
3, c′
4, c′
5).
• If Test1(c, tw,s, SKs) = 1 holds, we prove that the
2, c′
equality Decrypt(c, SKr) = w holds. Let c = (c′
we can re-write it in the following form.
1, c′
3, c′
4, c′
5),
c′
1 = g
r′
1 , c′
1
2 = H1(ˆe(gx1
1 , H2(w)r′
1 )) · H2(w)r′
1 · w∗,
4 = g
x2r′
2
2
· H2(w)r′
1 · w†, c′
5 = c′
5,
c′
3 = g
r′
2 , c′
2
1, r′
for some r′
2, w∗, w†. The equalities associated with
labels (1) and (2) in the deﬁnition of Test1 lead to the
following equalities.
H1(ˆe(gx1
1 ,
c′
2
c′
3)x2 )) ·
4
(c′
c′
4
3)x2
(c′
= w
(6)
ˆe(gx1y
1
· H2(w)r′
1 · w†)
x2r′
2
2
, g
ˆe(gx1x2y
1
, g
r′
2
2 )
= ˆe(g
r′
1 , H2(w)x1y),
1
ˆe(c′
1, H2(w)) = ˆe(g1,
c′
4
(c′
3)x2
))
(7)
ˆe(gx1y
1
, w−1) · ˆe(gx1y
1
,
= ˆe(g
r′
1 , H2(w)x1y),
1
H1(ˆe(gx1
1 , H2(w)r′
H1(ˆe(g
r′
1
1 , H2(w)x1 ))
1 )) · H2(w)r′
1 · w∗
)
c′
5 = H3(c′
1||c′
2||c′
3||c′
4||H2(w)||ˆe(gx1
1 ,
c′
4
(c′
3)x2
)).
(8)
Based on these equalities and the deﬁnition of tw,s, we
have the following.
ˆe(v3, c′
ˆe(v4, c′
4)
3)
=
ˆe(gx1y
1
ˆe(gx1y
1
, c′
4)
, (c′
3)x2 )
c′
4
(c′
3)x2
)
= ˆe(gx1y
1
,
= ˆe(c′
1, v0)
c′
5 = H3(c′
1||c′
2||c′
3||c′
4||H2(w)||ˆe(c′
1, H2(w)x1 )).
The ﬁrst equality implies w† = 1, and the second
equality implies that w∗ = w. Clearly, Decrypt(c, SKr) =
w holds.
As to the third requirement, we prove two things.
• If Decrypt(c, SKr) = w holds, we prove that the equal-
3, c′
ity Test2(c, w, t∗,s, SKs) = 1 holds. Let c = (c′
4, c′
Based on these equalities associated with labels (6),(7),(8)
1, c′
2, c′
5).
and the deﬁnition of t∗,s, we have the following.
4.3 Security Analysis
ˆe(gz
1 ,
c′
4
c′
2
H1(ˆe(c′
1,H2(w)x1 ))·w
) = ˆe(gz
1 ,
c′
4
c′
2
c′
4
x2
)
(c′
3
H1(ˆe(g
x1
1 ,
)
= ˆe(gz
1 ,
c′
4
c′
4
3)x2
(c′
3)x2 )
= ˆe(gz
1 , (c′
= ˆe(gx2·z
, c′
3)
1
)
))·w
Let the pairing parameters param = (G, GT , ˆe, p) be de-
ﬁned in the same way as in the rKeyGen algorithm. We
brieﬂy review the Decision Linear (DLIN) assumption [3]
and Bilinear Diﬃe-Hellman (BDH) assumption [5].
The DLIN assumption is as follows: any P.P.T. attacker
adv can only distinguish T0 and T1 with a negligible advan-
tage | Pr[Adv(param, T0) = 1] − Pr[Adv(param, T1) = 1]|,
where x, y ∈R Zp, ga, gb, gc, θ ∈R G, and
T0 = (ga, gb, gc, gx
a , gy
b , gx+y
c
),
T1 = (ga, gb, gc, gx
a , gy
b , θ).
The BDH assumption is as follows: given (param, g, gx,
gy, gz) where x, y, z ∈R Zp and g is a generator of G, any
P.P.T. attacker adv can only compute ˆe(g, g)x·y·z with a neg-
ligible probability.
In proving one of the theorems, we also use the assumption
that inverting the bilinear map ˆe is hard, and this problem
has been shown to be equivalent to the discrete logarithm
problem in G and GT [10, 15]. Certainly, this assumption is
weaker than both DLIN and BDH assumptions.
Theorem 2. The proposed scheme achieves CI security
against a curious Type-I server S1 in the random oracle
model given: (1) (KeyGen′, Encrypt′, Decrypt′) and (Enc, Dec)
are IND-CPA secure; (2) the DLIN and BDH assumptions.
Proof. Under Deﬁnition 3, let Game0 be the attack game
deﬁned in Figure 2. Let the attacker’s advantage be ǫ0.
Next, consider a game Game1, where the challenger per-
forms in the same way as in Game0, except for the follow-
ing. For any TrapGen2 query with the input P Ks, the chal-
lenger returns t∗,s = (u1, u2), generated as follows: select
k′
2, k′′
2 ∈R M, γ ∈R Zp and α, β ∈R G, compute u1 =
Enc(γ||α||β, k′
2 , P Ks). In this game,
let the attacker’s advantage be ǫ1. Based on the IND-CPA
deﬁnition for encryption schemes, |ǫ1 − ǫ0| is negligible if
both (KeyGen′, Encrypt′, Decrypt′) and (Enc, Dec) are IND-
CPA secure.
1) and u2 = Encrypt′(k′′
Next, consider a game Game2, where the challenger per-
forms in the same way as in Game1, except for the following.
• At the beginning of the game, the challenger chooses
y∗ ∈R Zp and constructs a list for the random oracle
H2. If H2 is queried with input w, the challenger ﬁrst
checks the list. If there is already a hash value for w,
the challenger returns this value; otherwise, the chal-
lenger chooses rw ∈R Zp and returns grw
as the hash
1
value, and then adds (w, grw
1 , rw) to the list.
• For a TrapGen1 query with input w and P Ks, the
challenger generates the message-dependent trapdoor
tw,s = (v7, v8) as follows.
yw ∈R Zp, v0 = gx1·y∗·rw ·yw
1
, v1 = gx1·rw
1
,
ˆe(g1,
= ˆe(g1,
c′
2
H1(ˆe(c′
1, H2(w)x1 )) · w
)
c′
2
H1(ˆe(gx1
1 ,
c′
4
3)x2 )) · w
(c′
)
= ˆe(g1,
= ˆe(c′
)
c′
4
(c′
3)x2
1, H2(w))
c′
5 = H3(c′
1||c′
2||c′