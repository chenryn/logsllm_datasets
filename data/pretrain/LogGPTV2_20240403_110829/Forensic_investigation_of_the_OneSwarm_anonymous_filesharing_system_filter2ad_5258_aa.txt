title:Forensic investigation of the OneSwarm anonymous filesharing system
author:Swagatika Prusty and
Brian Neil Levine and
Marc Liberatore
Forensic Investigation of the OneSwarm
Anonymous Filesharing System
Swagatika Prusty
Dept. of Computer Science, Univ. of Massachusetts Amherst
{swag, brian, liberato}@cs.umass.edu
Brian Neil Levine
Marc Liberatore
ABSTRACT
OneSwarm is a system for anonymous p2p ﬁle sharing in use
by thousands of peers. It aims to provide Onion Routing-like
privacy and BitTorrent-like performance. We demonstrate
several ﬂaws in OneSwarm’s design and implementation
through three diﬀerent attacks available to forensic investiga-
tors. First, we prove that the current design is vulnerable to
a novel timing attack that allows just two attackers attached
to the same target to determine if it is the source of queried
content. When attackers comprise 15% of OneSwarm peers,
we expect over 90% of remaining peers will be attached to two
attackers and therefore vulnerable. Thwarting the attack in-
creases OneSwarm query response times, making them longer
than the equivalent in Onion Routing. Second, we show that
OneSwarm’s vulnerability to traﬃc analysis by colluding at-
tackers is much greater than was previously reported, and is
much worse than Onion Routing. We show for this second
attack that when investigators comprise 25% of peers, over
40% of the network can be investigated with 80% precision
to ﬁnd the sources of content. Our examination of the One-
Swarm source code found diﬀerences with the technical paper
that signiﬁcantly reduce security. For the implementation in
use by thousands of people, attackers that comprise 25% of
the network can successfully use this second attack against
98% of remaining peers with 95% precision. Finally, we show
that a novel application of a known TCP-based attack allows
a single attacker to identify whether a neighbor is the source
of data or a proxy for it. Users that turn oﬀ the default
rate-limit setting are exposed. Each attack can be repeated as
investigators leave and rejoin the network. All of our attacks
are successful in a forensics context: Law enforcement can
use them legally ahead of a warrant. Furthermore, private
investigators, who have fewer restrictions on their behavior,
can use them more easily in pursuit of evidence for such civil
suits as copyright infringement.
Categories and Subject Descriptors
C.2.4 [ Comp. Comm. Networks]: Distributed Systems
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
General Terms
Security, Legal Aspects, Design
Keywords
Digital Forensics, Child Sexual Exploitation, P2P Networks
1.
INTRODUCTION
OneSwarm [8, 9] is a peer-to-peer (p2p) system for anony-
mous ﬁle sharing that is actively used by thousands of peers
and has been downloaded by hundreds of thousands of users.
Like Gnutella, peers can query for content and download it
from other users. The main design goal of OneSwarm is to
resist monitoring and traﬃc analysis attacks that are easily
performed on p2p ﬁle sharing networks such as Gnutella
and BitTorrent [11]. In short, OneSwarm aims to provide
Onion Routing-like privacy and BitTorrent-like performance.
OneSwarm’s architecture is based on a dense topology of
peers to ensure availability of content, probabilistic forward-
ing of queries to neighbors to thwart traﬃc analysis, and
application-level delays to thwart timing attacks.
OneSwarm provides privacy using a much diﬀerent method
than Onion Routing (OR), which is the architectural basis for
Tor [6]. If a peer possesses queried content, it will not forward
the query, and it will answer the query only after some delay;
otherwise it forwards the query to each of its neighbors with
probability p, again after some delay. Thus, as the original
paper points out [8], colluding neighbors can determine the
chance that a target possesses content when the query is not
forwarded to them. For example, that analysis showed that
with p = 0.5 and a population of 1,000 users, the chances are
only 1% that 30 colluding attackers will succeed with 95%
precision in determining that a speciﬁc, targeted peer is the
source of a queried ﬁle. Users have downloaded and joined
the system with these expectations.
The network is sure to receive the attention of many civil
and government investigators. Our law enforcement part-
ners were able to download images of the sexual abuse of
prepubescent children through the OneSwarm system; our
past work with law enforcement has demonstrated the same
for Gnutella [11] and BitTorrent. We take the perspective of
criminal forensic investigators that seek to meet standards
of evidence for lawfully obtaining warrants for seizing and
searching computers observed to be sharing child pornogra-
phy. We note that, like all p2p networks, the vast majority
of users are sharing copyrighted materials rather than child
pornography, but as we explain below, investigations of copy-
right are easier than the criminal standard we hold to.
201In this paper, we demonstrate several ﬂaws in OneSwarm’s
design and implementation based on three diﬀerent attacks
that are available to investigators. First, we prove that One-
Swarm is vulnerable to a novel timing attack that allows
just two attackers attached to the same target to distinguish
whether it is the source of queried content. When attackers
comprise 15% of OneSwarm peers, we expect over 90% of re-
maining peers will be attached to two attackers and therefore
vulnerable. The attack itself is simple: two attackers simul-
taneously query for the same content and they compare the
summed response time. If the summed application delay is
no greater than 600ms above the summed network roundtrip
time to the target, then the neighbor target is the source.
We derive the proper application-level delays that can deter
this attack, but also show that the increased delays result
in signiﬁcantly higher path delays than are present in onion
routing [20] architectures. Our attack does not distinguish
whether a target is the source of a ﬁle or a trusted friend
of the source, but as we discuss, both are crimes within our
forensic goals.
Second, we show that OneSwarm’s vulnerability to at-
tackers that collude to compare probabilistically forwarded
traﬃc is much greater than was previously reported. We use
a corrected analysis that also considers the implications of
content popularity and is based on a realistic legal model.
As in papers that demonstrated ﬂaws in the Vanish p2p
system [7, 25], we show that the steep growth in eﬀectiveness
of the attack as the population of attackers grows was not
considered in the original analysis of OneSwarm. We show for
this second attack that when investigators comprise just 25%
of peers, over 40% of the network can be investigated with
80% precision to ﬁnd sources of content that is not popular.
The attack’s success increases with content popularity.
Third, we analyze the OneSwarm source code and ﬁnd
that diﬀerences with the technical paper signiﬁcantly reduce
the security of the system. Speciﬁcally, the probability of
forwarding is hard-coded to p = 0.95 instead of 0.5. For the
implementation in use by thousands of people, attackers that
comprise 25% of the network can successfully use this second
attack against 98% of remaining peers with 95% precision due
to this value of p. In comparison, should attackers comprise
25% of an Onion Routing network, at most 8% of the circuits
are vulnerable in an analogous attack.
Finally, we demonstrate a novel application of a known
TCP-based attack, which allows a single attacker to identify
whether a neighbor is the source of data or a proxy for it.
Using optimistic acknowledgements of data not yet received,
an attacker can drive up a target’s TCP send rate. If the
target is a proxy rather than a source, it will run out of data
to send before the true source can supply it. Hence, sources
and proxies are distinguishable. Since this requires a single
attacker, the entire network can be attacked with a trivial
number of attackers — however, only users that turn oﬀ the
default rate-limit setting are exposed. Onion Routing is not
vulnerable to this attack, due to chained proxies. For this
and the other two attacks, investigators can increase attack
success by repeatedly leaving and re-joining the network to
expose a new set of peers.
While our attacks are based on OneSwarm’s design, our
results are applicable to broad design principles for anony-
mous communication systems. For example, our TCP-based
attack works on anonymous systems that don’t use onion-
based encrypted layers when streaming data, and several
such open-source systems exist, including MUTE [16] and
RShare [17]. We revalidate the common wisdom that there is
a tradeoﬀ between privacy and performance, and we quantify
OneSwarm’s anonymity so that it can be compared directly
to Onion Routing. We also develop a diﬀerent attacker model,
one based on a conservative set of legal restrictions.
2. OVERVIEW OF ONESWARM
OneSwarm is a popular p2p system for anonymous ﬁle
sharing. There are North American (http://oneswarm.cs.
washington.edu), French (https://forum.oneswarm-fr.net),
and Russian (http://oneswarm.ru) communities each with
many thousands of users. Below, we include details of only
the OneSwarm mechanisms that are relevant to our analysis.
We examined the source code available from http://www.cs.
washington.edu/homes/isdal/OneSwarm-20110115.tar.bz2,
which is version 0.7. We note any relevant diﬀerences between
the technical paper and source code.
OneSwarm is based on a dense topology of peers that dis-
cover each other through a community server. Neighboring
peers can be trusted or untrusted. Trust is assigned by the
user, and trusted peers see none of the delays or other mech-
anisms that OneSwarm introduces, as if they were standard
BitTorrent peers. The content shared by trusted friends is
displayed explicitly in the OneSwarm GUI.
Topology Construction. Each peer has 26 neighbors, and
they can be added from out-of-band methods (such as email
or social networking sites) as trusted or untrusted friends, or
assigned as untrusted friends by the community server. The
simplest method of investigation is to be randomly assigned
to peers by the community server, and that is the case we
focus on here. The source code assigns peers between 22 and
39 neighbors; as peers quit, community server can assign more
peers to clients. When a target does have a trusted friend,
all privacy controls are turned oﬀ, and therefore becoming
a trusted friend is an appealing method of investigation;
we don’t investigate such an approach in this paper. But
we do quantify the aﬀect of trusted friends on our attacks,
and we summarize the legal implications, which favor law
enforcement, in Section 4.3.
Neighboring peers communicate via SSL over TCP. Key
exchange is based on an underlying DHT; we elide the de-
tails. The public/private keypair used by each peer does not
change and is stored on the local computer. The public keys
of neighbors are also stored on the user’s local computer.
The user’s keys and neighbors’ keys are never deleted (until
the application is uninstalled) and are useful corroborating
evidence.
Searching for Content. OneSwarm is strongly linked to
BitTorrent, and peers can search for content by ﬂooding a
query containing a text string or by a unique BitTorrent
infohash, which is a standard method of uniquely identifying
a torrent. When content is found, peers indicate they have
a path to the content, without disclosing whether they are
the source of the content or just a proxy to it. Pieces of the
torrent are then swarmed from all remote peers that provide
a path.
When a OneSwarm peer possesses queried content, it will
return a search reply message after some delay but not for-
ward the query any further. In the OneSwarm paper, the
delay is selected uniformly at random from 150–300ms. The
choice is consistent (random but deterministic) for the match-
202ing content (by info hash). Two neighbors that query a source
for the same ﬁle will see the same delays. A peer that queries
for two diﬀerent ﬁles from the source will see diﬀerent delays,
but when a query is repeated it will see a consistent delay.
In the source code, query replies are returned with a delay
of 170–340ms. In the case of infohash searches, the delay is
chosen on the basis of the infohash; for text searches, the
delay is selected based on the content that matches the query.
When intermediaries receive a search reply, they forward the
message along the reverse path back to the original querier.
The reply messages are forwarded by intermediaries with no
delay in the source code, though the paper speciﬁes that all
OneSwarm protocol messages are delayed.
If the peer does not possess the queried content, it forwards
the query to each of its neighbors with probability p; the
choice to forward a speciﬁc query to a speciﬁc neighbor is
random but deterministic. In the paper, forwarding of queries
is delayed again by 150–300ms, a value chosen at random but
again consistent for the speciﬁc query and the neighboring
peer. In the software, query replies are forwarded without
delay. In the paper, p = 0.5 is a suggested value, but it
is stated that “privacy-conscious users are free to decrease
their forwarding probability”. However, the software follows
a diﬀerent design. p is set to a much higher value of 0.95 and
there is not yet a user-visible method to change the value
of p; users must edit and recompile the source. As we show,
this setting greatly reduces the privacy of the system.
Once the querier receives a reply, the content is requested
and relayed through the path of OneSwarm peers using the
BitTorrent protocol. There are no direct downloads between
peers unless they are neighbors, but peers cannot naively
identify these direct connections.
OneSwarm messages have no time-to-live (TTL) ﬁelds, as
they would allow attackers to determine if a neighbor is a
source of a ﬁle by falsely setting the TTL of an outgoing
query to 1. Without TTLs, queries might cause congestion
collapse from unlimited traﬃc, and so OneSwarm uses an-
other mechanism. As search replies are returned along the
reverse path to the querier, search cancel messages are sent to
any neighbor that received the original query. These cancel
messages are sent without delay and are designed to catch
up to and stop the propagating query.
Like BitTorrent, OneSwarm allows a form of parallel down-
loading (called swarming) that Onion Routing implemen-
tations, like Tor, do not support well. Our analysis of
OneSwarm’s privacy is so that users can evaluate if the
performance beneﬁts are worth the decline in security in
comparison. The reason Onion Routing does not support
swarming well is that a separate 3-proxy tunnel is needed to
each peer oﬀering part of a torrent.
Other details of OneSwarm’s operation do not introduce
vulnerabilities that we’ve discovered, and we do not describe
them further here.
3. PROBLEM STATEMENT & MODEL
In this section, we provide a problem statement, attacker
model, and our assumptions. Related work appears inline.
3.1 Problem Statement
OneSwarm was designed to thwart third parties from
monitoring peers on its p2p network. For years, academic
projects [3, 15] have measured p2p networks. Private compa-
nies such as DtecNet, Peer Media Technologies, and Media
Defender have also monitored p2p networks to assist copy-
right holders in ﬁling civil copyright infringement lawsuits.
For more than a decade [22], p2p networks have been an
enormous venue for the distribution of child sexual abuse
imagery, according to the US Dept. of Justice [21], past
work by ourselves [11, 12], and others [5, 10]. Our work
with law enforcement identiﬁed over 425,000 Gnutella users,
as identiﬁed by application-level IDs, sharing known ﬁles
of child pornography (CP) during 2010 [11]. Our focus is
on US-based criminal investigations of OneSwarm peers for
two reasons. First, criminal investigators are at a disadvan-
tage compared to other civil investigators. The former are
far more restricted by the legal process deﬁned in the US
for law enforcement. Accordingly, this process provides a
lower bound on OneSwarm’s vulnerabilities. Second, our law
enforcement partners have veriﬁed there is CP shared on
OneSwarm, and thus it is of interest to them.
Investigator Goals. The investigator is essentially an at-
tacker, attempting to violate OneSwarm’s privacy promises,
though more limited in ability than is typically assumed [24].
Their goal is to identify a subset of all OneSwarm peers that
are each sharing (or conspiring to share) one or more ﬁles of
interest. The ﬁles are content that is known to be CP, and
this represents a small fraction of ﬁles shared on the network.
The overriding goal of the attacker is to gather evidence
suﬃcient for a search warrant so that the physical location
corresponding to a peer’s IP address can be searched, and
relevant physical evidence seized. Hence, we consider success