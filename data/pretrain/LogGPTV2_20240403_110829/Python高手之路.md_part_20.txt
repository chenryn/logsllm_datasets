糟糕的想法，没必要花时间在已经解决的问题上。
间为 O(log n)。
10.3有序列表和二分查找
142
>>>farm
如果想要立即插入，
bisect函数能够在保证列表有序的情况下给出要插入的新元素的索引位置。
首先，Python 提供了一个 bisect 模块，其包含了二分查找算法。非常容易使用，如示
>>> farm = sorted(['haystack', 'needle', 'cow', 'pig'])
但是有很多次，我看到有人试图实现自己的数据结构或算法去处理这样的场景。这是个
当处理大的列表时，有序列表比非有序列表有一定优势。例如，有序列表的元素获取时
>>> bisect.bisect_left(farm,'eggs')
>>
>>
>>
3
>>
第10章性能与优化
bisect.bisect(farm,
bisect.bisect_left(farm, 'needle
 bisect.bisect (farm, 'needle')
27 RETURN_VALUE
24CALL FUNCTION
21LOAD FAST
本电子书仅限学习交流使用，请勿用于商业用途
，可以使用 bisect 模块提供的 insort_left 和 insort_right
'chicken')
'chicken')
0
#
---
## Page 150
熊猫爱中国www.xiongmaoi.com
熊猫爱
10.4
不再有序。
示例10.7SortedList的实现
此外还有许多Python库实现了上面代码的各种不同版本，以及更多的数据类型，如二叉树
中国
有时能创建只拥有一些固定属性的简单对象是非常有用的。一个简单的实现可能需要下
显然，
class SortedList(list):
import bisect
可以使用这些函数创建一个一直有序的列表，如示例10.7所示。
['cow','eggs','haystack','needle','pig','turkey']
>>>farm
>>> bisect.insort(farm, /turkey')
['cow','eggs','haystack','needle','pig']
>>>farm
>>> bisect.insort (farm, 'eggs')
 namedtuple 和 slots
def index(self,value,start=None,stop=None):
def insort(self, item) :
definit_(self,iterable):
，不应该用直接的 append 或 extend 函数来追加或扩展这个列表，否则列表将
raise ValueError("%s is not in list"%value)
place = bisect.bisect_left(self[start:stop], value)
bisect.insort(self,
if place >>p.2
>>>p.z=42
>>>P.
(')u=d>>p.dict_
42
('y':2,x';1}
第10章性能与优化
9
self.x=x
属性中：
 self.y = y
self.x = x
dict
50.289MB
Mem usage
9.879MB
本电子书仅限学习交流使用，请勿用于商业用途
Increment
0.410MB
0.000MB
f=[Foobar（42) foriin range(100000)
def main():
@profile
Line Contents
---
## Page 152
熊猫爱中国www.xiongmaoi.com
熊猫爱中
理函数的部分代码：
Objects/typeobject.c 文件，就很容易理解这里 Python 做了什么。
个 list 对象中，从而避免分配整个字典对象。如果浏览一下 CPython 的源代码并且看看
_slots_属性，用来指定该类的实例可用的属性。其作用在于可以将对象属性存储在-
团
static Pyobject*
else{
if（slots==NULL）
nslots=0;
slots =_PyDict_GetItemId(dict, &PyId slots _);
/* Check for a
[...]
/* Copy slots into a list, mangle names and sort them.
if (nslots > 0 &&base->tp_itemsize != 0){
nslots = PyTuple_GET_SIZE(slots);
/* Are slots allowed? */
else
if(PyUnicode_Check(slots))
/*Make it into a tuple */
/* Have slots */
if (may_add_weak)
slots = PySequence_Tuple(slots);
Convert them back to tuple at the end.a
Sorted names are needed for
slots =PyTuple _Pack(1,slots）;
goto error;
PyErr_Format(PyExc_TypeError,
add_weak++;
add_dict++;
slots
本电子书仅限学习交流使用，请勿用于商业用途
base->tp_name);
sequence variable in dict, and count it */
class
10.4   namedtuple 和 slots
assignment.
下面给出了相关处
145
---
## Page 153
熊猫爱中国www.xiongmaoi.com
熊猫爱中
所示。
用整个字典。
序，然后再转换回元组并存储在类中。这样 Python 就可以快速地抽取值，而无需分配和使
146
class Foobar(object):
声明这样一个类并不难，如示例10.8所示。
正如你所看到的，Python 将_slots_的内容转化为一个元组，构造一个list 并排
第10章性能与优化
def
slots='x′
return(Pyobject *)type;
[...]
slotS=NULL;
et->ht_slots = slots;
et->ht_name = name;
Py_INCREF(name);
et =(PyHeapTypeObject *)type;
[...]
type = (PyTypeobject *)metatype->tp_alloc(metatype, nslots);
self.x=x
Py_DECREF(newslots);
slots = PyList _AsTuple(newslots);
if (PyList_Sort(newslots) == -1) {
if（newslots==NULL)
newslots = PyList _New(nslots - add_dict - add_weak);
if(slots == NULL)
init（self，x）:
goto error;
goto error;
goto error;
 Py_ DECREF (newslots) ;
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 154
熊猫爱中国www.xiongmaoi.com
熊uple 的类，因而有着共有的特征，如不可改变，条目数固定。namedtuple 所提供的能
示例10.10用namedtuple声明类
力在于可以通过命名属性获取元组的元素而不是通过索引，如示例10.10所示。
是按某种方式排过序的。
于静态类型或其他类似场合，那不是Python 程序的精神所在。
建大量的简单对象时使用_
示例10.9“使用了_slots_的对象的内存占用
>>>1ist(Foobar(42,43）)
>>> import collections
这也正是 collection 模块中 namedtuple 类的本质。它允许动态创建一个继承自
由于属性列表的固定性，因此不难想象类中列出的属性总是有一个值，且类中的字段总
AttributeError:'Foobar'object has no attribute'z'
Traceback (most recent call last):
>>> Foobar = collections.namedtuple('Foobar', ['x', 'y'l)
>>> Foobar = collections.namedtuple('Foobar',  ['x'l)
看似通过使用 Python 类的_slots_
File“",line 1,in
>>>Foobar（42,43）.z=0
AttributeError: can't set attribute
Traceback (most recent call last):
>>>Foobar（42,43).x=44
>>>Foobar(42,43).x
Foobar(x=42,y=43)
>>>Foobar(42，43)
Line#
Filename: slots.py
% python -m memory_profiler slots.py
X
 21.609 MB
Mem usage
9.879 MB
slots
-Increment
本电子书仅限学习交流使用，请勿用于商业用途
11.730 MB
0.000MB
_属性是有效且高效的选择。但这项技术不应该被滥用
属性可以将内存使用率提升一倍，这意味着在创
f= [ Foobar(42) for i in range(100000)
defmain():
@profile
Line Contents
10.4namedtuple和 slots
147
---
## Page 155
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
① 例如，小于 PyTuple_MAxSAVESIZE（默认是 20）的元组在CPython 中会使用更快的内存分配器。
示例10.12基本的memoization技术
数时结果才可以被缓存，也就是说函数不能有任何副作用或输出，也不能依赖任何全局状态。
10.5
开访问的。_asdict 可以将 namedtuple 转换为字典实例，
生Python 函数。同时它也享有已有的针对元组的优化。
同在于它同tuple 类兼容。因此，它可以作为参数传入任何期望 iterable 类型参数的原
示例10.11基于collections.namedtuple构建的类的内存占用
用如示例10.11所示。
改这个类的对象的任何属性，因为它继承自tuple 同时也因为_slots_
[42，43]
148
namedtuple 还提供了一些额外的方法，尽管以下划线作为前缀，但实际上是可以公
正弦函数 sin 就是一个可以用来memoize化的函数，如示例10.12 所示。
memoization是指通过缓存函数返回结果来加速函数调用的一种技术。仅当函数是纯函
因为这样的类是继承自tuple的，因此可以很容易将其转换为list。但不能添加或修