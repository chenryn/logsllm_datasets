title:Noninterference for a Practical DIFC-Based Operating System
author:Maxwell N. Krohn and
Eran Tromer
2009 30th IEEE Symposium on Security and Privacy
Noninterference for a Practical DIFC-Based Operating System
Maxwell Krohn
CyLab
Carnegie Mellon University
Pittsbrugh, PA
Eran Tromer
CS and AI Laboratory
Massachusetts Institute of Technology
Cambridge, MA
Abstract—The Flume system is an implementation of decentralized
information ﬂow control (DIFC) at the operating system level. Prior work
has shown Flume can be implemented as a practical extension to the
Linux operating system, allowing real Web applications to achieve useful
security guarantees. However, the question remains if the Flume system
is actually secure. This paper compares Flume with other recent DIFC
systems like Asbestos, arguing that the latter is inherently susceptible
to certain wide-bandwidth covert channels, and proving their absence
in Flume by means of a noninterference proof in the Communicating
Sequential Processes formalism.
I. INTRODUCTION
Recent work in operating systems [1], [2], [3] makes the case that
Distributed Information Flow Control (DIFC) [4] solves important
application-level security problems for real systems. For example,
modern dynamic web sites are trusted to safeguard private data for
millions of users, but they often fail in their task (e.g., [5], [6], [7],
[8], [9], [10]). Web applications built atop DIFC operating systems
can achieve better security properties, by factoring security-critical
code into small, isolated, trustworthy processes, while allowing the
rest of the application to balloon without affecting the TCB.
To achieve such a split between trustworthy and untrustworthy
components, DIFC must monitor and regulate the information ﬂows
among them. Enforcement today exists in two forms: static, as an
extension of a programming language’s type system; and dynamic,
as a feature of an OS’s system call interface. These two styles have
their strengths and weaknesses: DIFC for programming languages
gives ﬁne-grained guarantees about which parts of the program have
been inﬂuenced by which types of data, but it requires rewrites of
existing applications using one of a few compiled languages. DIFC
at the OS level gives coarser-grained information ﬂow tracking (each
process is its own security domain) but supports existing applications
and languages. In particular, popular Web applications written in
popular interpreted languages (e.g. Python, PHP, Perl and Ruby) can
achieve improved security on DIFC OSes. A case can be made for
both techniques, but to date, only DIFC at the language level has
enjoyed formal security guarantees.
This paper considers the Flume system: a DIFC OS implemented
as a 30,000-line extension to a standard Linux kernel [3]. Flume
allows legacy processes to run as before, while conﬁning those
that need strong security guarantees (like web servers and network
applications) to a tightly-controlled sandbox, from which all of their
communication must conform to DIFC-based rules. This technique
produces real security improvements in real web applications, like
the popular Python-based MoinMoin Wiki package. But all claims of
application-level security presuppose a correct OS kernel, appealing
to intuition alone to justify the OS’s security. Intuition can mislead:
other seemingly-secure OSes ([1], [11]) have inadvertently included
high-bandwidth covert channels in their very interface, allowing
information to leak against intended security policies (see Section III
for more details).
This paper presents the ﬁrst formal noninterference security argu-
ment for a real DIFC operating system — in this case, Flume. A DIFC
OS with provable security guarantees is an important foundation for
provable application-level security, both in web services (Flume’s ﬁrst
application) and in other security-sensitive applications.
The roadmap is follows. Section II reviews the Flume system and
its intended policies at a high level: ﬁrst and foremost, that untrust-
worthy applications can compute with private data without being
able to reveal (i.e. leak) it. Section III describes potential pitfalls,
motivating a formal approach. Section IV describes the important
parts of the Flume System using a formal process algebra, namely
Communicating Sequential Processes (CSP). This model captures a
trustworthy kernel, untrustworthy user-space applications, and user-
space applications with privilege, which can selectively reveal or
declassify sensitive data. Next, Section V proves that this model
fulﬁlls noninterference: that unprivileged user processes cannot leak
data from the system, whether via explicit communication or implicit
channels. Flume meets a CSP deﬁnition of noninterference that we
have minimally extended to accommodate user-space declassiﬁers.
Though the arguments focus on secrecy, the same model and proof
also applies to integrity.
In sum, this paper contributes the following new results:
1) A formal model for a real DIFC Linux-based operating system,
which captures a trustworthy kernel, and both privileged and
unprivileged user-space applications; and
2) A formal proof of noninterference.
There are important limitations. First, the actual Flume implemen-
tation is not guaranteed to follow the model described in the process-
algebra. Second, there are no guarantees that covert channels do not
exist in parts of the system that the model abstracts. In particular, the
Flume model does not capture physical hardware, so covert channels
might of course exist in Flume’s use of the processor, the disk,
memory, etc. What our result does imply is that those operating
systems the follow the given interface (like Flume) have a chance of
achieving good security properties; i.e., wide leaks are not “baked”
into their speciﬁcations. We leave a machine-checkable proof and a
veriﬁed implementation of the model to future work.
II. REVIEW OF FLUME
This section reviews Flume’s security primitives, previously re-
ported elsewhere [3]. Flume uses tags and labels to track data as it
ﬂows through a system. Let T be a very large set of opaque tokens
called tags. A tag carries no inherent meaning, but processes generally
associate each tag with some category of secrecy or integrity. For
example, a tag b ∈ T may label Bob’s private data.
Labels are subsets of T . Labels form a lattice under the partial
order of the subset relation [12]. Each Flume process p has two
labels, Sp for secrecy and Ip for integrity. Both labels serve to (1)
summarize which types of data have inﬂuenced p in the past and (2)
regulate where p can read and write in the future. Consider a process
1081-6011/09 $25.00 © 2009 IEEE
DOI 10.1109/SP.2009.23
61
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
p and a tag t. If t ∈ Sp, then the system conservatively assumes
that p has seen some private data tagged with t. In the future, p
can read more private data tagged with t but requires consent from
an authority who controls t before it can reveal any data publicly. If
there are multiple tags in Sp, then p requires independent consent for
each tag before writing publicly. Process p’s integrity label Ip serves
as a lower bound on the purity of its inﬂuences: if t ∈ Ip, then every
input to p has been endorsed as having integrity for t. To maintain
this property, the system only allows p to read from other sources
that also have t in their integrity labels. Files (and other objects) also
have secrecy and integrity labels; they can be thought of as passive
processes.
Distributed Information Flow Control (DIFC) is a generalization of
centralized IFC. In centralized IFC, only a trusted “security ofﬁcer”
can create new tags, subtract tags from secrecy labels (declassify
information), or add tags to integrity labels (endorse information).
In Flume DIFC, any process can create new tags, which gives that
process the privilege to declassify and/or endorse information for
those tags.
A. Capabilities
+ and t
Flume represents privilege using two capabilities per tag. Capa-
bilities are objects from the set O = T × {−, +}. For tag t, the
−. Each process p owns a set of
capabilities are denoted t
capabilities Op ⊆ O. A process with t+ ∈ Op owns the t+ capability,
giving it the privilege to add t to its labels; and a process with
− ∈ Op can remove t from its labels. In terms of secrecy, t
+ lets
t
a process add t to its secrecy label, granting itself the privilege to
− lets it remove t from its secrecy label,
receive secret t data, while t
effectively declassifying any secret t data it has seen. In terms of
− lets a process remove t from its integrity label, allowing
integrity, t
it to receive low-t-integrity data, while t+ lets it add t to its integrity
label, endorsing the process’s current state as high-t-integrity. A
− has dual privilege for t and can
process that owns both t
completely control how t appears in its labels. The set Dp where
+ and t
Dp (cid:2) {t | t
+ ∈ Op ∧ t
− ∈ Op}
represents all tags for which p has dual privilege.
Any process p can invent or “allocate” a new tag. Tag allocation
−}, granting p
yields a fresh tag t ∈ T and sets Op ← Op ∪ {t
dual privilege for t. Tag allocation should not expose any information
about system state.
, t
+
For a set of capabilities O ⊆ O, we deﬁne the notation:
− ∈ O} .
+ ∈ O} , O
− (cid:2) {t | t
+ (cid:2) {t | t
O
B. Global Capabilities
Flume also supports a global capability set ˆO, Every process has
access to every capability in ˆO, useful for implementing key security
policies (see Section II-D). A process p’s effective set of capabilities
is given by:
¯Op (cid:2) Op ∪ ˆO
could leak information to a process q by either adding or refraining
from adding a pre-speciﬁed tag to ˆO). A second restriction is that no
process p can enumerate ˆO or ¯Op (otherwise, p could poll (cid:7) ˆO(cid:7) while
q allocated new tags, allowing q to communicate bits to p). Processes
can, however, enumerate their non-global capabilities (those in Op),
since they do not share this resource with other processes.
A process p can grant capabilities in Op to process q so long as
p can send a message to q. p can also subtract capabilities from Op
as it sees ﬁt.
C. Security
The Flume model assumes many processes running on the same
machine and communicating via messages, or “ﬂows”. The model’s
goal is to track data ﬂow by regulating both process communication
and process label changes.
1) Safe Label Changes: In the Flume model (as in HiStar), the
labels Sp and Ip of a process p can be changed only by an explicit
request from p itself. Other models allow a process’s label to change
as the result of receiving a message [1], [13], [11], but implicit label
changes turn the labels themselves into covert channels [12], [2]
(see Section III). Only those label changes permitted by a process’s
capabilities are safe:
Deﬁnition 1 (Safe label change). For a process p, let the label L be
Sp or Ip, and let L(cid:2) be the requested new value of the label. The
change from L to L
(cid:2) is safe if and only if:
+ and L − L
(cid:2) − L ⊆ ( ¯Op)
L
(cid:2) ⊆ ( ¯Op)
−
.
(cid:2)
p. In set notation, t ∈ Sp − S
− ∈ ¯Op). Likewise, t can be added only if t
For example, say process p wishes to subtract tag t from Sp, to
(cid:2)
p, and
achieve a new secrecy label S
such a transition is safe only if p owns the subtraction capability for
t (i.e. t
+ ∈ ¯Op.
restricts process
communication to prevent data leaks. The Flume model restricts
communication among unprivileged processes as in traditional IFC:
p can send a message to q only if Sp ⊆ Sq (“no read up, no write
down” [14]) and Iq ⊆ Ip (“no read down, no write up” [15]).
Information ﬂow control
2) Safe Messages:
Flume relaxes these rules to better accommodate declassiﬁers.
Speciﬁcally, if two processes could communicate by changing their
labels, sending a message using the centralized IFC rules, and then
restoring their original labels, then the model can safely allow the
processes to communicate without actually performing label changes.
A process can make such a temporary label change only for tags in
¯Dp, i.e., those for which it has dual privilege. A process p with labels
Sp, Ip would get maximum latitude in sending messages if it were
to lower its secrecy to Sp − ¯Dp and raise its integrity to Ip ∪ ¯Dp. It
could receive the most messages if it were to raise secrecy to Sp ∪ ¯Dp
and lower integrity to Ip − ¯Dp.
The following deﬁnition captures these hypothetical label changes
to determine what messages are safe:
Deﬁnition 2 (Safe message). A message from p to q is safe iff
Similarly, its effective set of dual privileges is given by:
Sp − ¯Dp ⊆ Sq ∪ ¯Dq
and
Iq − ¯Dq ⊆ Ip ∪ ¯Dp .
¯Dp (cid:2) {t | t
+ ∈ ¯Op ∧ t
− ∈ ¯Op}
Tag allocation can update ˆO; an allocation parameter determines
−, or neither is added to ˆO (and thus
whether the new tag’s t
to every current and future process’s ¯Op).
+, t
Flume restricts access to the shared set ˆO, lest processes manip-
ulate it to leak data. A ﬁrst restriction is that processes can only
add a tag to ˆO during the tag’s allocation (otherwise a process p
3) External Sinks and Sources: Any data sink or source outside
of Flume’s control, such as a remote host, the user’s terminal, a
printer, and so forth, is modeled as an unprivileged process x with
permanently empty secrecy and integrity labels: Sx = Ix = {} and
also Ox = {}. As a result, a process p can only write to the network
or console if it could reduce its secrecy label to {} (the only label
62
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
p
01
Sp = {t}
q1
= {}
Sq1
q2
= {}
Sq2
q
00
Sq = {}
Fig. 1. The “leaking” system initializes.
0
p
01
Sp = {t}
q1
Sq1
= {t}
q2
= {}
Sq2
q
00
Sq = {}
Fig. 2. p sends a “0” to qi if the ith bit of the message is 0.
p
01
Sp = {t}
q1
Sq1
= {t}