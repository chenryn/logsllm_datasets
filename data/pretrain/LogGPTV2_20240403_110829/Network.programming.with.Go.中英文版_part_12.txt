}
func cdRequest(conn net.Conn, dir string) {
conn.Write([]byte(CD + " " + dir))
var response [512]byte
n, _ := conn.Read(response[0:])
s := string(response[0:n])
if s != "OK" {
fmt.Println("Failed to change dir")
}
}
func pwdRequest(conn net.Conn) {
conn.Write([]byte(PWD))
var response [512]byte
n, _ := conn.Read(response[0:])
s := string(response[0:n])
fmt.Println("Current dir \"" + s + "\"")
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
5.7 State 状态
Applications often make use of state information to simplify what is going on. For
example
应用程序经常保存状态消息来简化下面要做的事情，比如
 Keeping file pointers to current file location
 Keeping current mouse position
 Keeping current customer value.
 保存当前文件路径的文件指针状态
 保存当前的鼠标位置状态
 保存当前的客户值状态
In a distributed system, such state information may be kept in the client, in the
server, or in both.
在分布式的系统中，这样的状态消息可能是保存在客户端，服务器，也可能两边都保存。
The important point is to whether one process is keeping state information
about itself or about the other process. One process may keep as much state
information about itself as it wants, without causing any problems. If it needs to
keep information about the state of the other process, then problems arise: the
process' actual knowledge of the state of the other may become incorrect. This can
be caused by loss of messages (in UDP), by failure to update, or by s/w errors.
最重要的一点是，进程是否需要保存 自身进程或者其他进程的状态消息。一个进程保存再多自己
的状态信息，也不会引发其他问题。如果需要保存其他进程的状态消息，这个问题就复杂了：当前保
存的其他进程的状态消息和实际的状态消息可能是不一致的。这可能会引起消息丢失（在UDP 中）、
更新失败、或者s/w 错误等。
An example is reading a file. In single process applications the file handling code
runs as part of the application. It maintains a table of open files and the location
in each of them. Each time a read or write is done this file location is updated.
In the DCE file system, the file server keeps track of a client's open files, and
where the client's file pointer is. If a message could get lost (but DCE uses TCP)
these could get out of synch. If the client crashes, the server must eventually
timeout on the client's file tables and remove them.
一个例子就是读取文件。在单个进程中，文件处理代码是应用程序的一部分。它维持一个表，表中包
含所有打开的文件和文件指针位置。每次文件读写的时候，文件指针位置就会更新。在数据通信（DCE）
文件系统中，文件系统必须追踪客户端打开了哪些文件，客户端的文件指针在哪。如果一个消息丢失
了（但是DCE 是使用TCP 的），这些状态消息就不能保持同步了。如果出现客户端崩溃了，服务器
就必须对这个表触发超时并删除。
In NFS, the server does not maintain this state. The client does. Each file access
from the client that reaches the server must open the file at the appropriate point,
as given by the client, to perform the action.
在NFS 文件系统中，服务器并没有保存这个状态消息，而是有客户端保存的。客户端每次在服务器
进行的读取文件操作必须能在准确的文件位置打开文件，而这个文件位置是由客户端提供的，从而才
能进行后续的操作。
If the server maintains information about the client, then it must be able to recover
if the client crashes. If information is not saved, then on each transaction the
client must transfer sufficient information for the server to function.
如果由服务器保持客户端的状态消息，服务器必须在客户端崩溃的时候进行修复。如果服务器没有储
存状态消息，那么客户端的每次事务交互都需要提供足够的消息来让服务器进行操作。
If the connection is unreliable, then additional handling must be in place to ensure
that the two do not get out of synch. The classic example is of bank account
transactions where the messages get lost. A transaction server may need to be part
of the client-server system.
如果连接是不可靠的，那么必须要有额外的处理程序来确保双方没有失去同步。一个消息丢失的典型
例子就是银行账号交易系统。交易系统是客户端与服务器交互的一部分。
Application State Transition Diagram
应用状态转换图
A state transition diagram keeps track of the current state of an application and
the changes that move it to new states.
一个状态转换图清晰说明了当前应用的状态和进入到新的状态需要的转换。
Example: file transfer with login:
例如：带登陆功能的文件传输：
This can also be expressed as a table
这个也可以使用一个表来表示
Current state Transition Next state
login failed login
login
login succeeded file transfer
dir file transfer
get file transfer
file transfer
logout login
quit -
Client state transition diagrams
客户端状态转换图
The client state diagram must follow the application diagram. It has more detail
though: it writes and then reads
客户端状态转换图就和应用转换图一样。不同的就是要注意更多细节：它包含有读和 写操作
Current state Write Read Next state
FAILED login
login LOGIN name password
SUCCEEDED file transfer
SUCCEEDED file transfer
CD dir
FAILED file transfer
#lines + contents file transfer
file transfer GET filename
ERROR file transfer
#files + filenames file transfer
DIR
ERROR file transfer
quit none quit
logout none login
Server state transition diagrams
服务器状态转换图
The server state diagram must also follow the application diagram. It also has more
detail: it reads and then writes
服务器状态转换图也和应用转换图一样。不同的就是也要注意更多细节：它包含有 读和 写操作
Current state Read Write Next state
FAILED login
login LOGIN name password
SUCCEEDED file transfer
SUCCEEDED file transfer
CD dir
FAILED file transfer
#lines + contents file transfer
GET filename
file transfer ERROR file transfer
#files + filenames file transfer
DIR
ERROR file transfer
quit none quit
logout none login
Server pseudocode
服务器伪代码
state = login
while true
read line
switch (state)
case login:
get NAME from line
get PASSWORD from line
if NAME and PASSWORD verified
write SUCCEEDED
state = file_transfer
else
write FAILED
state = login
case file_transfer:
if line.startsWith CD
get DIR from line
if chdir DIR okay
write SUCCEEDED
state = file_transfer
else
write FAILED
state = file_transfer
...
We don't give the actual code for this server or client since it is pretty
straightforward.
由于这个伪代码已经足够清晰了，所以我们并不用给出具体的代码了。
5.8 Summary 总结
Building any application requires design decisions before you start writing code.
For distributed applications you have a wider range of decisions to make compared
to standalone systems. This chapter has considered some of those aspects and
demonstrated what the resultant code might look like.
任何应用程序在开始编写前都需要详尽的设计。开发一个分布式的系统比开发一个独立系统需要更宽
广的视野和思维来做决定和思考。这一章已经考虑到了一些这样的问题，并且展示了最终代码的大致
样子。
Chapter 6 第六章
Managing character sets and encodings 字符集和编码
There are many languages in use throughout the world, and they use many different
character sets. There are also many ways of encoding character sets into binary
formats of bytes. This chapter considers some of the issues in this.
全世界在用的语言众多，他们使用许多不同的字符集。同时有很多方法对字符集进行二进制字节编码。
本章将讨论几个关于编码的问题。
6.1 Introduction 引言
Once upon a time there was EBCDIC and ASCII... Actually, it was never that simple
and has just become more complex over time. There is light on the horizon, but some
estimates are that it may be 50 years before we all live in the daylight on this!
以前用EBCDIC 和ASCII 编码，(别看只有两种编码)，但事情从来没有简单过，恰恰相反变得越来
越复杂了。但据推测,编码简化就像(黎明前)地平线上闪过了一道光，但要等到天亮还得50 年。
Early computers were developed in the english-speaking countries of the US, the UK
and Australia. As a result of this, assumptions were made about the language and
character sets in use. Basically, the Latin alphabet was used, plus numerals,
punctuation characters and a few others. These were then encoded into bytes using
ASCII or EBCDIC.
早期计算机是从美国、英国、澳大利亚这些英语国家发展起来的，结果计算机字符集就以这些国家使
用的语言和字符进行设计，大体上，也就是拉丁字母，加上数字、标点和别的字符。他们使用 ASCII
或EBCDIC 进行编码。
The character-handling mechanisms were based on this: text files and I/O consisted
of a sequence of bytes, with each byte representing a single character. String
comparison could be done by matching corresponding bytes; conversions from upper
to lower case could be done by mapping individual bytes, and so on.
字符处理的机制是基于此的：文本文件和基于字节序列的基本输入输出，每个字节代表一个单独的字
符。字符串比较可以通过对比相对应的字节实现，字符串的大小写转换可以通过单个字节的操作完成，
等等。
There are about 6,000 living languages in the world (3,000 of them in Papua New
Guinea!). A few languages use the "english" characters but most do not. The Romanic
languages such as French have adornments on various characters, so that you can write
"j'ai arrêté", with two differently accented vowels. Similarly, the Germanic
languages have extra characters such as 'ß'. Even UK English has characters not in
the standard ASCII set: the pound symbol '£' and recently the euro '€'
世界上现存约有6000 种语言（居然有3000 种在巴布亚新几内亚）。一小部分使用英文字符，但更
多的则不是。想法文这样的拉丁语系语言还会有字符修饰符号，所以你可以用两种不同的重读元音来
拼写“j'ai arrêté”。同样地，德语也有像'ß'这样的字符，甚至是英式英语也会有不在ASCII 编码
中的字符：英镑和欧元('£'和 '€')
But the world is not restricted to variations on the Latin alphabet. Thailand has
its own alphabet, with words looking like this: "ภาษาไทย". There are many other
alphabets, and Japan even has two, Hiragana and Katagana.
但是世界上的语言并不严格局限在拉丁字母中，泰国有它自己的字母，像这样：“ภาษาไทย”。还有许多
的字母形式像是日文，他居然有两种，平假文和片假文。
There are also the hierographic languages such as Chinese where you can write "
百度一下，你就知道".
还有一些象形文字，比如汉语，你可以这样写“百度一下，你就知道”。
It would be nice from a technical viewpoint if the world just used ASCII. However,
the trend is in the opposite direction, with more and more users demanding that
software use the language that they are familiar with. If you build an application
that can be run in different countries then users will demand that it uses their
own language. In a distributed system, different components of the system may be
used by users expecting different languages and characters.
用理工科的眼光看，世界上只有ASCII 一种编码就清静了。但实际正是相反的趋势，越来越多的人
需要计算机软件中使用自己熟悉的语言。如果你的软件可以在不同的国家运行，那你的用户就需要软
件使用他们自己的语言。在分布式的系统中，使用不同的系统模块的人可能希望不同的语言和字符。
Internationalisation (i18n) is how you write your applications so that they can
handle the variety of languages and cultures. Localisation (l10n) is the process
of customising your internationalised application to a particular cultural group.
国际化(i18n)是指你的应用怎么处理不同的语言和文化。本地化(l10n)是说你怎么把国际化的应用
适配成小群体使用。
i18n and l10n are big topics in themselves. For example, they cover issues such as
colours: while white means "purity" in Western cultures, it means "death" to the
Chinese and "joy" to Egyptians. In this chapter we just look at issues of character
handling.
国际化和本地化各自都是一个很大的课题。举个例子，关于颜色的话题：白色在西方表示纯洁，在中
国表示死亡，在埃及表示喜悦。在这章中我们只关注字符的处理。
6.2 Definitions 定义
It is important to be careful about exactly what part of a text handling system you
are talking about. Here is a set of definitions that have proven useful.
我们所关心的是系统处理你所表述的内容，十分重要。下面是有人做的一套行之有效的定义方法。
Character
字符
A character is a "unit of information that roughly corresponds to a grapheme (written
symbol) of a natural language, such as a letter, numeral, or punctuation mark"
(Wikipedia). A character is "the smallest component of written language that has
a semantic value" (Unicode). This includes letters such as 'a' and 'À' (or letters
in any other language), digits such as '2', punctuation characters such as ',' and
various symbols such as the English pound currency symbol '£'.
字符是＂自然语言中用符号表示信息的单位，比如字母、数字、标点＂（维基百科），字符是有价值
的最小书写单位（Unicode）这就包括了a 和A，或其他语言字符，也包括数字2 和标点','，还有
像英镑这样的字符。
A character is some sort of abstraction of any actual symbol: the character 'a' is
to any written 'a' as a Platonic circle is to any actual circle. The concept of
character also includes control characters, which do not correspond to natural
language symbols but to other bits of information used to process texts of the
language.
字符实际上是符号的抽象组合，也就是说a 代表了所有手写的a，有点像柏拉图圆也是圆的关系。原
则上字符也包括控制字符，也就是实际中不存在只是为了处理语言的格式用的。
A character does not have any particular appearance, although we use the appearance
to help recognise the character. However, even the appearance may have to be
understood in a context: in mathematics, if you see the symbol π (pi) it is the
character for the ratio of circumference to radius of a circle, while if you are
reading Greek text, it is the sixteenth letter of the alphabet: "προσ" is the greek
word for "with" and has nothing to do with 3.14159...
字符本身并不没有特定形状，只是我们通过形状来识别它。即使如此，我们也要联系上下文才能理解：
数学中，如果你看到π (pi)这个字符，它表示圆周率，但是如果你读希腊文，它只是16 个字母；"προσ"
是希腊词语“with”，这个和 3.14159 没有半点关系。
Character repertoire/character set
字符体系和字符集
A character repertoire is a set of distinct characters, such as the Latin alphabet.
No particular ordering is assumed. In English, although we say that 'a' is earlier
in the alphabet than 'z', we wouldn't say that 'a' is less than 'z'. The "phone book"
ordering which puts "McPhee" before "MacRea" shows that "alphabetic ordering" isn't
critical to the characters.
字符集就是一个不同的且唯一的字符的集合，像拉丁字母，不需要指定顺序。在英语中，尽管我们说
a 是在 z 的前面，但我们不说 a 比z 要小。电话联系人的排序方式里，McPhee 在MacRea 的前面说
明了字母排序不是严格的按字符的顺序。
A repertoire specifies the names of the characters and often a sample of how the
characters might look. e.g the letter 'a' might look like 'a', 'a' or 'a'. But it
doesn't force them to look like that - they are just samples. The repertoire may
make distinctions such as upper and lower case, so that 'a' and 'A' are different.
But it may regard them as the same, just with different sample appearances. (Just
like some programming languages treat upper and lower as different - e.g. Go - but
some don't e.g. Basic.). On the other hand, a repertoire might contain different
characters with the same sample appearance: the repertoire for a Greek mathematician
would have two different characters with appearance π. This is also called a noncoded
character set.
字符体系就是字名和字形的结合，比如，a 可能写成a,a 或a，但这不是强制的，他们只是样本。字
符体系可能区分大小写，所以a 和A 是不同的。但他们的意思可能是一样的，就算是长的不一样。（有
点像编程语言对待大小写，有的大小写敏感，比如Go 语言，有的就是一样的，比如Basic。）。另
一方面，字符系统可能包括长的一样但意义不同的：希腊字母的数学符号就有两个意思，比如pai。
他们也被叫成无法编码的字符集。
Character code
字符编码
A character code is a mapping from characters to integers. The mapping for a character
set is also called a coded character set or code set. The value of each character
in this mapping is often called a code point. ASCII is a code set. The codepoint
for 'a' is 97 and for 'A' is 65 (decimal).
字符编码是字符到整数的映射。一个字符集的映射也被称为一个编码字符集或字符集。这个映射中的
每个字符的值通常被称为一个编码（code point)。 ASCII 也是一个字符集，'a'的编码是 97，'A'
是65（十进制）。
The character code is still an abstraction. It isn't yet what we will see in text
files, or in TCP packets. However, it is getting close. as it supplies the mapping
from human oriented concepts into numerical ones.
字符编码仍然是一个抽象的概念。它不是我们可以看到的文件或者TCP 的包。不过，确和这两个概
念很像，它就是一种把人抽象出来的概念转化为数字的映射关系。
Character encoding
字符编码
To communicate or store a character you need to encode it in some way. To transmit
a string, you need to encode all characters in the string. There are many possible
encodings for any code set.
字符的交互（传输）和存储都要以某种方式编码。要发送一个字符串，你需要将字符串中的所有字符
进行编码。每种字符集都有很多的编码方案。
For example, 7-bit ASCII code points can be encoded as themselves into 8-bit bytes
(an octet). So ASCII 'A' (with codepoint 65) is encoded as the 8-bit octet 01000001.
However, a different encoding would be to use the top bit for parity checking e.g.
with odd parity ASCII 'A" would be the octet 11000001. Some protocols such as Sun's
XDR use 32-bit word-length encoding. ASCII 'A' would be encoded as 00000000 00000000
0000000 01000001.
例如，7 位字节ASCII编码可以转换成8 位字节（8 进制）。所以，ASCII 的'A'（编码值65）可以
被编码为8 进制的01000001。不过，另一种不同的编码方式对最高位别有用途，如奇偶校验，带有
奇校验的ASCII 编码“A”将是这个8 进制数 11000001。还有一些协议，如Sun 的XDR，使用 32 位
字长编码ASCII 编码。所以，'A'将被编码为00000000 00000000000000001000001。
The character encoding is where we function at the programming level. Our programs
deal with encoded characters. It obviously makes a difference whether we are dealing
with 8-bit characters with or without parity checking, or with 32-bit characters.
字符编码​​是在程序应用层面使用的。应用程序处理编码的字符时，是否带包含奇偶校验处理8 位
字符或32 位字符，显然有很大的差别。