title:Can internet video-on-demand be profitable?
author:Cheng Huang and
Jin Li and
Keith W. Ross
Can Internet Video-on-Demand be Proﬁtable?
Cheng Huang
Microsoft Research
Redmond, WA 98052
Jin Li
Microsoft Research
Redmond, WA 98052
Keith W. Ross
Polytechnic University
Brooklyn, NY 11201
ABSTRACT
Video-on-demand in the Internet has become an immensely
popular service in recent years. But due to its high band-
width requirements and popularity, it is also a costly service
to provide. We consider the design and potential beneﬁts of
peer-assisted video-on-demand, in which participating peers
assist the server in delivering VoD content. The assistance is
done in such a way that it provides the same user quality ex-
perience as pure client-server distribution. We focus on the
single-video approach, whereby a peer only redistributes a
video that it is currently watching.
Using a nine-month trace from a client-server VoD deploy-
ment for MSN Video, we assess what the 95 percentile server
bandwidth costs would have been if a peer-assisted employ-
ment had been instead used. We show that peer-assistance
can dramatically reduce server bandwidth costs, particularly
if peers prefetch content when there is spare upload capac-
ity in the system. We consider the impact of peer-assisted
VoD on the cross-traﬃc among ISPs. Although this traﬃc is
signiﬁcant, if care is taken to localize the P2P traﬃc within
the ISPs, we can eliminate the ISP cross traﬃc while still
achieving important reductions in server bandwidth. We
also develop a simple analytical model which captures many
of the critical features of peer-assisted VoD, including its
operational modes.
Categories and Subject Descriptors
C.2 [Computer-Communication Networks]: Distributed
Systems
General Terms
Measurement, Performance
Keywords
peer-to-peer, video-on-demand, ISP-friendly
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’07, August 27–31, 2007, Kyoto, Japan.
Copyright 2007 ACM 978-1-59593-713-1/07/0008 ...$5.00.
1.
INTRODUCTION
Video-on-demand (VoD, also called on-demand video stream-
ing) has become an extremely popular service in the Inter-
net. For example, YouTube, a video-sharing service which
streams its videos to users on-demand, has about 20 million
views a day with a total viewing time of over 10,000 years to
date [1]. Other major Internet VoD publishers include MSN
Video, Google Video, Yahoo Video, CNN, and a plethora of
copycat YouTube sites.
Most of the VoD being streamed over the Internet today
is encoded in the 200-400 kbps range. At these rates, ISPs
(or CDNs) typically charge video publishers 0.1 to 1.0 cent
per video minute. It has been estimated that YouTube pays
over 1 million dollars a month in bandwidth costs. We show
in this paper that the MSN VoD service has a billing rate
corresponding to 2.20 Gbps (as of December 2006). These
costs are expected to go up, as demand increases and higher-
quality videos (with rates up to 3 Mbps or more) are made
available.
Currently, none of the Internet VoD providers earn signif-
icant revenues from their services. Internet VoD providers
will likely attempt to monetize their services in the near fu-
ture using embedded video advertisements, subscriptions, or
pay-per-views (or some combination thereof). But given the
enormous costs associated with client-server distribution –
due both to the increasing video quality and to the enormous
demand – the revenues very possibly will not cover the cost
of providing the service. In other words, although VoD has
become one of the most popular Internet services today, the
service is, and will likely continue to be, unproﬁtable with
client-server distribution.
In this paper, we consider the design and potential bene-
ﬁts of peer-assisted VoD. In peer-assisted VoD, there is still
a server (or server farm) which stores all of the publisher’s
videos and guarantees that users playback the video at the
playback rate without any quality degradation. But in peer-
assisted VoD, the peers that are viewing the publisher’s
videos also assist in redistributing the videos. Since peer-
assisted VoD can move a signiﬁcant fraction of the uploading
from the server to the peers, it can potentially dramatically
reduce the publisher’s bandwidth costs.
There are two broad design approaches to peer-assisted
VoD. In one approach, which we refer to as the single video
approach, a peer only redistributes the video it is currently
watching; it does not redistribute video that it may have
watched and stored in the past. The single-video approach
is similar to a torrent in BitTorrent [11,12], in which all peers
in the torrent share exactly one ﬁle. In the second approach,
which we refer to as the multiple video approach, a peer can
redistribute a video that it previously viewed but is currently
not viewing. Compared with the multiple-video approach,
the single-video approach is simpler in the client and tracker
design, and involves a straightforward end-user policy. Our
focus in this paper is on the single-video approach, which
intuitively should provide good performance if a large frac-
tion of the requests are for a relatively small number of the
publisher’s videos. If a publisher has N videos and uses the
single-video approach, then the distribution problem essen-
tially becomes N sub-distribution problems, one for each
video.
In a peer-assisted VoD system, when the peers alone can-
not redistribute the video among each other, the server makes
up the diﬀerence, so that each peer receives the video at the
(encoded) playback rate. The server is only active when
the peers alone cannot satisfy the demand. When the peers
alone can satisfy the demand, not only is the server inactive,
but the peers can potentially prefetch video from each other
using the peers’ surplus bandwidth. This prefetching allows
the peers build a reservoir of video, which can be tapped
when the aggregate upload bandwidth of peers becomes less
than the demand across all peers. The contributions of this
paper are as follows:
• We collect a nine-month trace from the MSN Video
service. This data covers over 520 million streaming re-
quests for more than 59,000 videos. During this period,
MSN used a client-server deployment. We process this
data to extract many of the key characteristics of a
large-scale Internet VoD deployment. Particular at-
tention is given to the characteristics that are relevant
to a peer-assisted deployment. To our knowledge, this
paper presents the ﬁrst measurement study of an on-
demand video streaming system in such a large scale.
• We present a simple theory for peer-assisted VoD. This
theory identiﬁes three basic operating modes of peer-
assisted VoD system:
the surplus mode, when the
aggregate upload bandwidth supply of the peers ex-
ceeds the aggregate bandwidth demand; the balanced
mode, when the bandwidth supply is in the vicinity of
the bandwidth demand; and the deﬁcit mode, when
the bandwidth supply is less than the demand. The
model captures many of the essential features of peer-
assisted VoD. In particular, it shows that when a ser-
vice provider is operating in the surplus mode, it can
increase the quality of the videos without incurring sig-
niﬁcant additional server bandwidth costs (using peer-
assisted distribution). However, when operating in the
deﬁcit mode, server bandwidth costs increase linearly
with video bit rates. These economic considerations
dictate that the natural mode of operation for peer-
assisted VoD is in the balanced mode.
• For the single-video approach, we describe three natu-
ral prefetching policies for exploiting surplus peer up-
load capacity. These policies are no-prefetching, water-
leveling, and greedy. We show that they can signiﬁ-
cantly reduce server bandwidth usage, with prefetch-
ing providing dramatic gains. Moreover, the prefetch-
ing policies perform close to a bound, and are therefore
nearly optimal.
• We use the nine-month MSN trace, which was col-
lected for a client-server deployment, to drive simula-
tions for peer-assisted deployments. Using this trace
simulation, we closely examine the impact of early peer
departures and user interactivity (e.g., pause/resume
and skipping content). The results show that if peer-
assisted distribution had been instead employed, sig-
niﬁcant reductions in bandwidth costs would have re-
sulted. Furthermore, early departures and user inter-
activity do not substantially reduce these gains. For
example, the client-server bandwidth requirement (us-
ing the 95 percentile rule) for the month of December
2006 was 2.20 Gbps; if peer-assisted distribution had
been deployed, with the greedy prefetch policy, the
server bandwidth requirement could have potentially
been reduced to 79 Mbps.
• We also explore the impact of peer-assisted VoD on
ISPs. Indeed, peer-assisted VoD shifts the uploading
burden from the servers to the peers (as does BitTor-
rent). The P2P uploading in turn can generate sig-
niﬁcant cross-ISP traﬃc. We examine an ISP-friendly
peer-assisted scheme, which localizes the P2P traﬃc
within ISPs (and hence generates no cross-ISP traf-
ﬁc). Using the trace data, we show that their are still
signiﬁcant server bandwidth cost reductions when the
peer-assisted VoD scheme is ISP friendly.
This paper is organized as follows. In Section 2 we de-
scribe the nine-month MSN trace and report on observa-
tions about the video popularity distribution, user demand
and upload resources, user interactivity and service evolu-
tion.
In Section 3 we present a theory for peer-assisted
VoD, which exposes many of the fundamental issues in peer-
assisted VoD. In Section 4, we use the MSN trace data to
drive simulations of peer-assisted distribution schemes. Here
we examine the impact of user interactivity, the possible
gains with peer-assistance and prefetching, total costs using
the 95 percentile rule, and the impact of the most and least
popular videos on the total cost. In Section 5 we examine
the costs that peer-assisted VoD place on local ISPs and ex-
plore how these costs can be minimized.
In Section 6 we
describe related work, and ﬁnally in Section 7 we conclude.
2. CHARACTERISTICS OF A LARGE SCALE
VOD SERVICE
We collected data from the popular MSN Video site for a
nine-month period, from April through December 2006. The
raw data captures all the activities at the MSN video site,
including live and on-demand streaming sessions for both
audio and video. We ﬁltered out the audio and live ses-
sions, as the main focus of this study is on on-demand video
streaming. The resulting ﬁltered trace contains in total over
520 million streaming requests for more than 59,000 video
ﬁles. All video streams were served from MSN servers (via a
CDN) to clients using RTSP, Microsoft’s HTTP streaming
protocol, or Media Server (MMS) protocol. (Peers did not
assist in the streaming during this time.)
In this section, we report observations from this data
set that shed insight on an eventual peer-assisted deploy-
ment for VoD. To our knowledge, this section presents the
ﬁrst measurement study of a large-scale on-demand video
streaming system. In Sections 4-5, we will use the trace data
to explore the design and potential beneﬁts of peer-assisted
VoD.
2.1 Trace Records
The MSN Video trace contains trace records, with each
record characterizing a portion of a streaming session, as de-
scribed below. Each trace record contains over 50 ﬁelds [2].
Using three ﬁeld categories, we now summarize the ﬁelds
that are of interest in this study:
1. Client Information Fields: All streaming clients are
Windows Media Players (WMP). Each trace record
contains the player ID, version, and language; the pub-
lic IP address of the client host; the host web browser
and version (the MSN Video service is accessible through
its website); and the OS/version and CPU of the host
machine.
2. Video Content Fields: Each trace record includes the
video ﬁle name, the video ﬁle length (in seconds), and
the size of the ﬁle. From the video length and the ﬁle
size, we compute the average bitrate of each video.1
3. Streaming Fields: Each trace record includes the time
when the client establishes a connection to the server;
where in the video the client starts playback; and how
many seconds of data the client has played.
It also
includes an indication of whether the playback is real-
time or fast-forward/backward. Note that although
Windows Media Service allows for a “fast caching”
mode, where data is streamed to clients faster than
playback rate (e.g. twice as fast as playback rate), this
mode is disabled in the MSN Video service. Hence, the
length of the client playback is equivalent to the length
of video streamed.
Each interactive operation (pause/resume, fast-forward,
fast-backward, and repositioning) generates a new trace record.
Hence, often there are multiple trace records from the same
player within the same streaming session.
2.2 Identifying Users and Streaming Sessions
For our analysis, we would like to be able to identify the
trace records that were generated by the same Windows
Media Player (WMP) (that is, generated by the same user).
As indicated above, each trace record includes a player ID,
which in principle can be used to identify the players. How-
ever, in our nine-month trace, only 7% of the trace records
include a useful player ID. This is because in the default
mode, a WMP sends an anonymous pseudo ID. It only sends
a useful player ID if the user voluntarily participates in the
quality feedback program.
In order to preserve the scale of the data set and not
discard 93% of the trace records unnecessarily, we use the
following method to classify the anonymous players. Each
trace record contains additional client information, includ-
ing the player’s host public IP address, WMP version/language,
OS/version/language, and the web browser/version. For
each record with an anonymous player ID, we hash the con-
catenation of this additional client information. We then
consider all records with the same hash as being generated
1This calculation will not work for Multi-Bit Rate (MBR)
videos, where each video ﬁle contains several independently
encoded streams at diﬀerent quality level (thus bitrates).
Nevertheless, there are not many MBR videos on the MSN
Video site (less than 1%), so we simply ﬁlter out all the
requests for such videos.
from the same player. We refer to each such player as a hash-
identiﬁed player, whereas we refer to each non-anonymized
player as an ID-identiﬁed player. To verify that records from
diﬀerent hashes indeed come from diﬀerent players, we ex-
amine the distribution of the number of media ﬁles streamed
by an ID-identiﬁed player and the number streamed by a
hash-identiﬁed player. If these distributions are similar, we
can conclude that the hash-identiﬁed players indeed corre-
spond to unique players. Figure 1 shows that these two
distributions align very closely, validating this method for
classifying the anonymous players.2
)
%
(
F
D
P
 60
 50
 40
 30
 20
 10
 0
 0
 2
ID-identified player
hash-identified player
ID-identified player
hash-identified player
 100
 10
 1
 0.1
)
%
(
F
D
P
 6
 4
 14
# of video files accessed per player
 10
 12
 8
 16
 18
 0
 2
 6
 4
 14
# of video files accessed per player
 10
 12
 8
 16
 18
(a) Linear scale
(b) Logarithmic scale
Figure 1: Video ﬁle access pattern (April 20)
Having now grouped the trace records by player, we now
further group the records by session. As mentioned previ-
ously, a single user-video session can generate more than
one trace record if the user interacts with the video dur-
ing playback. We deﬁne a streaming session as a series of
streaming requests from the same player to the same video
ﬁle, as long as the beginning time of one request is no more
than T seconds after the ending time of the previous request.
In this paper, we set T = 10s. From the original more than
520 million streaming requests, we obtain over 471 million
streaming sessions in total.
2.3 Video Popularity Distribution
The greater the locality of requests to a subset of the
videos, the greater the potential beneﬁt for peer-assisted
streaming. In this subsection we examine the distribution
of video popularity in the trace. To this end, we pick the
three days in April 2006 which have the minimum, median,
and maximum amount of traﬃc in the month. The popular-
ity distributions are plotted in Figure 2. First observe that,
despite the traﬃc variation among the three days, the pop-
ularity distributions are quite similar. Second observe there
is indeed a high-degree of locality. Third observe that the
distribution is more skewed than a Zipf distribution. This
is likely due to the fact that on any given day, there are
several highly popular news and business clips, with each of
these clips having roughly the same popularity (explaining
why Figure 2 is almost ﬂat for the ten most popular clips).
2.4 User Demand and Upload Resources
In order to further investigate the potential beneﬁts of
peer-assisted VoD, we would like to determine the aggregate
upload resources of the participating peers, and compare the