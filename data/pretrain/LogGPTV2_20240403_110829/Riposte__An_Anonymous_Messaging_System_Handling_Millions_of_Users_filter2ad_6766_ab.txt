about the behavior of malicious servers—they can misbehave
by publishing their secret keys, by colluding with coalitions
of up to t malicious servers and arbitrarily many clients, or
by mounting any other sort of attack against the system.
The threshold t depends on the particular cryptographic
primitives in use. For our most secure scheme, all but one of
the servers can collude without compromising client privacy
(t = |Servers| − 1). For our most efﬁcient scheme, no two
servers can collude (t = 1).
C. Security Goals
The Riposte system implements a write-private and
disruption-resistant database scheme. We describe the correct-
ness and security properties for such a scheme here.
Deﬁnition 1 (Correctness). The scheme is correct if, when all
servers execute the protocol faithfully, the plaintext state of
the database revealed at the end of a protocol run is equal
to the result of applying each valid client write requests to an
empty database (i.e., a database of all zeros).
Since we rely on all servers for availability, correctness need
only hold when all servers run the protocol correctly.
To be useful as an anonymous bulletin board, the database
scheme must be write-private and disruption resistant. We
deﬁne these security properties here.
(s, t)-Write Privacy. Intuitively, the system provides (s, t)-
write-privacy if an adversary’s advantage at guessing which
honest client wrote into a particular row of the database
is negligibly better than random guessing, even when the
adversary controls all but two clients and up to t out of s
323323
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
servers (where t is a parameter of the scheme). We deﬁne
this property in terms of a privacy game, given in full in
Appendix A.
Deﬁnition 2 ((s, t)-Write Privacy). We say that the protocol
provides (s, t)-write privacy if the adversary’s advantage in
the security game of Appendix A is negligible in the (implicit)
security parameter.
Riposte provides a very robust sort of privacy: the adversary
can select the messages that the honest clients will send and
can send maliciously formed messages that depend on the
honest clients’ messages. Even then, the adversary still cannot
guess which client uploaded which message.
Disruption resistance. The system is disruption resistant if
an adversary who controls n clients can write into at most
n database rows during a single time epoch. A system that
lacks disruption resistance might be susceptible to denial-of-
service attacks: a malicious client could corrupt every row in
the database with a single write request. Even worse, the write
privacy of the system might prevent the servers from learning
which client was the disruptor. Preventing such attacks is a
major focus of prior anonymous messaging schemes [14], [38],
[44], [75], [77]. Under our threat model, we trust all servers
for availability of the system (though not for privacy). Thus,
our deﬁnition of disruption resistance concerns itself only with
clients attempting to disrupt the system—we do not try to
prevent servers from corrupting the database state.
We formally deﬁne disruption resistance using the following
game, played between a challenger and an adversary. In this
game, the challenger plays the role of all of the servers and
the adversary plays the role of all clients.
1) The adversary sends n write requests to the challenger
(where n is less than or equal to the number of rows in
the database).
2) The challenger runs the protocol for a single time epoch,
playing the role of the servers. The challenger then com-
bines the servers’ database shares to reveal the plaintext
output.
The adversary wins the game if the plaintext output contains
more than n non-zero rows.
Deﬁnition 3 (Disruption Resistance). We say that the protocol
is disruption resistant if the probability that the adversary
wins the game above is negligible in the (implicit) security
parameter.
D. Intersection Attacks
Riposte makes it infeasible for an adversary to determine
which client posted which message within a particular time
epoch. If an adversary can observe trafﬁc patterns across many
epochs, as the set of online clients changes, the adversary can
make statistical inferences about which client is sending which
stream of messages [24], [51], [56]. These “intersection” or
“statistical disclosure” attacks affect many anonymity systems
and defending against them is an important, albeit orthogonal,
problem [56], [76]. Even so,
intersection attacks typically
become more difﬁcult to mount as the size of the anonymity
set increases, so Riposte’s support for very large anonymity
sets makes it less vulnerable to these attacks than are many
prior systems.
III. SYSTEM ARCHITECTURE
As described in the prior section, a Riposte deployment
consists of a small number of servers, who maintain the
database state, and a large number of clients. To write into the
database, a client splits its write request using secret sharing
techniques and sends a single share to each of the servers.
Each server updates its database state using the client’s share.
After collecting write requests from many clients, the servers
combine their shares to reveal the plaintexts represented by the
write requests. The security requirement is that no coalition
of t servers can learn which client wrote into which row of
the database.
A. A First-Attempt Construction: Toy Protocol
As a starting point, we sketch a simple “straw man” con-
struction that demonstrates the techniques behind our scheme.
This ﬁrst-attempt protocol shares some design features with
anonymous communication schemes based on client/server
DC-nets [14], [77].
In the simple scheme, we have two servers, A and B, and
each server stores an L-bit bitstring, initialized to all zeros. We
assume for now that the servers do not collude—i.e., that one
of the two servers is honest. The bitstrings represent shares of
the database state and each “row” of the database is a single
bit.
Consider a client who wants to write a “1” into row (cid:2) of
the database. To do so, the client generates a random L-bit
bitstring r. The client sends r to server A and r⊕ e(cid:2) to server
B, where e(cid:2) is an L-bit vector of zeros with a one at index (cid:2)
and ⊕ denotes bitwise XOR. Upon receiving the write request
from the client, each server XORs the received string into its
share of the database.
After processing n write requests, the database state at
server A will be:
dA = r1 ⊕ ··· ⊕ rn
and the database at server B will be:
dB = (e(cid:2)1 ⊕ ··· ⊕ e(cid:2)n ) ⊕ (r1 ⊕ ··· ⊕ rn)
= (e(cid:2)1 ⊕ ··· ⊕ e(cid:2)n ) ⊕ dA
At the end of the time epoch, the servers can reveal the
plaintext database by combining their local states dA and dB.
The construction generalizes to ﬁelds larger than F2. For
example, each “row” of the database could be a k-bit bitstring
instead of a single bit. To prevent impersonation, network-
tampering, and replay attacks, we use authenticated and en-
crypted channels with per-message nonces bound to the time
epoch identiﬁer.
This protocol satisﬁes the write-privacy property as long as
the two servers do not collude (assuming that the clients and
324324
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:16 UTC from IEEE Xplore.  Restrictions apply. 
servers deploy the replay attack defenses mentioned above).
Indeed, server A can information theoretically simulate its
view of a run of the protocol given only e(cid:2)1 ⊕ ··· ⊕ e(cid:2)n as
input. A similar argument shows that the protocol is write-
private with respect to server B as well.
This ﬁrst-attempt protocol has two major limitations. The
ﬁrst limitation is that it is not bandwidth-efﬁcient. If millions
of clients want to use the system in each time epoch, then the
database must be at least millions of bits in length. To ﬂip a
single bit in the database then, each client must send millions
of bits to each database, in the form of a write request.
The second limitation is that it is not disruption resistant:
a malicious client can corrupt
the entire database with a
single malformed request. To do so, the malicious client picks
random L-bit bitstrings r and r(cid:2), sends r to server A, and sends
r(cid:2) (instead of r⊕e(cid:2)) to server B. Thus, a single malicious client
can efﬁciently and anonymously deny service to all honest
clients.
Improving bandwidth efﬁciency and adding disruption re-
sistance are the two core contributions of this work, and we
return to them in Sections IV and V.
B. Collisions
Putting aside the issues of bandwidth efﬁciency and disrup-
tion resistance for the moment, we now discuss the issue of
colliding writes to the shared database. If clients write into
random locations in the database, there is some chance that
one client’s write request will overwrite a previous client’s
message. If client A writes message mA into location (cid:2), client
B might later write message mB into the same location (cid:2). In
this case, row (cid:2) will contain mA ⊕ mB, and the contents of
row (cid:2) will be unrecoverable.
To address this issue, we set the size of the database table
to be large enough to accommodate the expected number
of write requests for a given “success rate.” For example,
the servers can choose a table size that
is large enough
to accommodate 210 write requests such that 95% of write
requests will not be involved in a collision (in expectation).
Under these parameters, 5% of the write requests will fail and
those clients will have to resubmit their write requests in a
future time epoch.
We can determine the appropriate table size by solving
a simple “balls and bins” problem. If we throw m balls
independently and uniformly at random into n bins, how many
bins contain exactly one ball? Here, the m balls represent
the write requests and the n bins represent the rows of the
database.
Let Bij be the probability that ball i falls into bin j. For
be the event that exactly
all i and j, Pr[Bij] = 1/n. Let O(1)
(cid:4)
one ball falls into bin i. Then
1 − 1
m
n
n
O(1)
(cid:2)
(cid:3)
Pr
=
i
i
(cid:5)m−1
Expanding using the binomial theorem and ignoring low order
(cid:2)
terms we obtain
(cid:3)
(cid:6) m
(cid:7)3
Pr
O(1)
i
≈ m
n
−
(cid:6) m
(cid:7)2
n
+
1
2
n
325325
(cid:6) m
(cid:7)2
n
where the approximation ignores terms of order (m/n)4 and
o(1/n). Then n· Pr[O(1)
] is the expected number of bins with
exactly one ball which is the expected number of messages
successfully received. Dividing this quantity by m gives the
expected success rate so that:
i
E[SuccessRate] =
n
m Pr[O(1)
i
] ≈ 1 − m
n +
1
2
So, if we want an expected success rate of 95% then we need
n ≈ 19.5m. For example, with m = 210 writers, we would
use a table of size n ≈ 20, 000.
Handling collisions. We can shrink the table size n by coding
the writes so that we can recover from collisions. We show
how to handle two-way collisions. That is, when at most two
clients write to the same location in the database. Let us
assume that the messages being written to the database are
elements in some ﬁeld F of odd characteristic (say F = Fp
where p = 264 − 59). We replace the XOR operation used in
the basic scheme by addition in F.
To recover from a two-way collision we will need to double
the size of each cell in the database, but the overall number
of cells n will shrink by more than a factor of two.
When a client A wants to write the message mA ∈ F to
location (cid:2) in the database the client will actually write the
A) ∈ F2 into that location. Clearly if no collision
pair (mA, m2
occurs at location (cid:2) then recovering mA at the end of the epoch
is trivial: simply drop the second coordinate (it is easy to test
that no collision occurred because the second coordinate is a
square of the ﬁrst). Now, suppose a collision occurs with some
B) ∈ F2
client B who also added her own message (mB, m2
to the same location (cid:2) (and no other client writes to location
(cid:2)). Then at the end of the epoch the published values are
S1 = mA+mB (mod p)
and S2 = m2
A+m2
B (mod p)
From these values it is quite easy to recover both mA and mB
by observing that
2S2 − S2
1 = (mA − mB)
2
(mod p)
from which we obtain mA − mB by taking a square root
modulo p (it does not matter which of the two square roots we
use—they both lead to the same result). Since S1 = mA +mB
is also given it is now easy to recover both mA and mB.
Now that we can recover from two-way collisions we can
shrink the number of cells n in the table. Let O(2)
be the
event that exactly two balls fell into bin i. Then the expected
number of received messages is
i
i
i
i
]
m
2
1
n2
] =
(1)
] + 2n Pr[O(2)
n Pr[O(1)
(cid:9)
(cid:8)
(cid:8)
1 − 1
(cid:9)m−2. As before, dividing the
where Pr[O(2)