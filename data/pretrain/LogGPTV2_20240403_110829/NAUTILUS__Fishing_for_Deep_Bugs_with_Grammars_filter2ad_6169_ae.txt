NAUTILUS is versatile and can be used to fuzz any application
where the source code is available. In the following, we take a
deeper look into important representatives of aforementioned
categories.
CSmith [51] generates randomized test cases for C compil-
ers based on a grammar. This grammar derives a subset of C
programs by randomly applying production rules that avoids
undeﬁned/unspeciﬁed behavior in the C standard. CSmith, like
NAUTILUS, is able to work without a corpus. Yet, it just derives
inputs randomly, whereas NAUTILUS uses mutations based on
subtrees to generate diverse input that allows a path to be
further explored.
Radamsa [48] uses corpus to derive a CFG to represent its
structure, then generates new inputs derived by this grammar.
It also applies mutation to generate more diverse inputs: global
mutations mutate the CFG, while point mutations are applied
during input derivation. CFG creation as well as mutation
may however introduce semantic errors. NAUTILUS directly
leverages grammars that are for example provided by the
[47]
LangFuzz [36] and IFuzzer
ANTLR project [6], hence, can bypass semantic checks easily.
Moreover, subtree mutations ensure that this is always the case.
leverage a provided
(context-free) language grammar to extract code fragments
from a corpus. These code fragments are recombined to new
inputs. In contrast to LangFuzz, IFuzzer uses genetic program-
ming with a ﬁtness function (for diversity) to generate more
uncommon, but syntactically and semantically valid input.
Skyﬁre [49] is a seed generator that uses a grammar and a
corpus. The samples from the corpus are parsed (using the
grammar) to get selection probabilities for each production
rule. Then, low-probability rules are preferably used to derive
uncommon seeds. Leaves in seeds’ parsing tree representation
are then replaced with other terminals that can be generated
by the same rule. These seeds can then be used by fuzzers like
AFL.
The key aspect of the aforementioned fuzzers is grammar-
based recombination of samples to get uncommon, syntac-
tically and hopefully semantically correct input (see again
Table IV for an overview). NAUTILUS does not rely on a
corpus that may already encode what behavior is interesting.
Instead, it generates and recombines inputs guided by coverage
feedback. This allows NAUTILUS to make use of its growing
internal storage of (mostly) semantically correct
inputs to
greatly increase the chance of producing new additional inputs
that are also semantically correct. In addition, NAUTILUS
integrates techniques from mutation-based fuzzing: coverage
feedback guides mutation and derivation of inputs. This allows
NAUTILUS to ﬁnd interesting inputs without relying on a
corpus.
Additionally, some research has been conducted in the
ﬁeld of automatic grammar generation for fuzzing. Godefroid
et al. [34] use neural networks to construct PDF grammar
partially (limited to non-binary PDF data objects). Another
approach by Godefroid et al. [30] leverages SMT solvers to
generate a grammar. Similarly, Bastani et al. [23] implemented
a grammar synthesis tool based on an oracle (the target
program). Lastly, AUTOGRAM [37] automatically learns
grammars from Java code, however, the approach does not
seem to be adaptable to binary-only targets easily. These
techniques might further simplify generation of grammars used
in future fuzzing runs.
VIII. LIMITATIONS
NAUTILUS is signiﬁcantly faster and more ﬂexible than
it has some limitations
current alternative approaches, yet
13
that we discuss in the following. Similar to AFL and related
tools, it needs source level access to add the instrumentations
needed for coverage feedback. However, the methods described
themselves could just as easily be implemented on top of
Dynamic Binary Instrumentation [12], [43] or feedback mech-
anisms based on Intel PT [45]. Other grammar-based fuzzers
typically require both a grammar as well as a set of good inputs
that can be parsed with this grammar. NAUTILUS reduces
this limitation, but still requires a grammar. Additionally, for
maximum efﬁciency the grammar needs to contain a list of
important symbols such as identiﬁers or class names. Lastly,
while the scripting support is a very powerful primitive that
can generate a multitude of non-context-free constructs, there
are some common features (mostly ﬁle offsets) that sometimes
require a signiﬁcant restructuring of the grammar. While these
are nontrivial issues, the next section details how they can be
ﬁxed using existent techniques.
IX. FUTURE WORK
To further ease the use of our fuzzer, one could switch
the instrumentation-based backend with the AFL-QEMU mode
backend. Then even binary targets that use highly structured
input languages can be fuzzed effectively. When extending
the grammars by important symbols, we manually added the
output of the strings utility to the grammar. This step could
be easily automated to further reduce the amount of manual
work needed. Additionally,
the dependence on a grammar
can be drastically reduced by techniques that automatically
infer a grammar from the program itself such as the tools
proposed by Höschel et al. [37] or Bastani et al. [23], or by
using machine learning techniques [33]. While our scriptable
grammars are able to generate any decidable language, some
common language features need complex scripts. For example,
ﬁle offsets are hard to implement as the exact offset of a given
substring is typically not known at the time of script execution.
Thus, the script for the start rule needs to manually compute
all offsets. Adding support for labels would probably ease the
process of writing grammars for binary ﬁle formats. There
are also interesting research directions that might increase
fuzzing efﬁciency even more. As an example, other generation
methods might be developed that perform better than the naive
approach.
X. CONCLUSION
This work conﬁrms that the use of grammars increases the
effectiveness of fuzzing programs that interpret complex input.
Combining grammar fuzzing with the use of instrumentation
feedback improves the fuzzing process even more. Typically,
adding feedback to grammar-based fuzzing increases the code
coverage by at least a factor of two for our four targets: mruby,
PHP, Lua, and ChakraCore. When comparing against tools not
based on grammars, such as AFL, that only employ feedback
driven fuzzing, the improvements over the seed corpus are even
more drastic: In many cases we ﬁnd more than ten times as
much new coverage. Our results show that it is the combination
of grammars and instrumentation that leads to this signiﬁcantly
increase in performance. This combination allows the fuzzer
to automatically identify and recombine semantically valid
fragments of code to drastically increase the performance.
Additionally, we were found and reported thirteen new bugs
in those four targets and received 2,600 USD in bug bounties.
14
ACKNOWLEDGMENTS
This work was supported by Intel as part of the Intel
Collaborative Research Institute “Collaborative Autonomous &
Resilient Systems” (ICRI-CARS). This work was co-funded by
the DFG (projects P3 and S2 within CRC 1119 CROSSING,
and HWSec), by the German Federal Ministry of Education
and Research (BMBF, projects HWSec and iBlockchain) and
the Hessen State Ministry for Higher Education, Research
and the Arts (HMWK) within CRISP. The research leading
to these results has received funding from the European
Union’s Horizon 2020 Research and Innovation Programme
under Grant Agreement No. 786669. The content of this
document reﬂect the views only of their authors. The European
Commission/Research Executive Agency are not responsible
for any use that may be made of the information it contains.
Finally, we would like to thank Joel Frank for his valuable
feedback.
REFERENCES
[1] About the antlr parser generator [online]. http://www.antlr.org/
about.html. Accessed: 2018-04-17.
[2] Chakracore is the core part of the chakra javascript engine that
powers microsoft edge [online]. https://github.com/Microsoft/
ChakraCore. Accessed: 2018-06-13.
[3] Clang’s
code
coverage
source-base
[online].
//releases.llvm.org/6.0.0/tools/clang/docs/
SourceBasedCodeCoverage.html. Accessed: 2018-07-11.
gcov [online].
html. Accessed: 2018-07-11.
gramfuzz is a grammar-based fuzzer that
lets one deﬁne complex
grammars to generate text and binary data formats. [online]. https:
//github.com/d0c-s4vage/gramfuzz. Accessed: 2018-06-11.
https://gcc.gnu.org/onlinedocs/gcc/Gcov.
http:
[4]
[5]
[6] Grammars written for antlr v4 [online].
antlr/grammars-v4. Accessed: 2018-04-17.
https://github.com/
[7] mangleme. Accessed: 2018-08-03.
[8] mruby. http://mruby.org. Accessed: 2018-06-13.
[9] mruby/mruby: Lightweight ruby [online].
mruby/mruby. Accessed: 2018-06-13.
https://github.com/
[10] Peach fuzzer: Discover unknown vulnerabilities. [online]. https://
www.peach.tech/. Accessed: 2018-07-10.
[11] Php: Hypertext preprocessor [online]. http://php.net/. Accessed:
2018-06-13.
a
-
[12] Pin
dynamic
binary
instrumentation
https://software.intel.com/en-us/articles/
pin-a-dynamic-binary-instrumentation-tool.
2018-07-03.
tool
[online].
Accessed:
[13] The programming language lua [online]. https://www.lua.org/.
Accessed: 2018-06-13.
[14] PROTOS.
http://www.ee.oulu.fi/research/ouspg/protos.
Accessed: 2018-08-03.
[15] Security oriented fuzzer with powerful analysis options. https://
github.com/google/honggfuzz. Accessed: 2018-08-07.
shopify-scripts: Bug bounty program on hackerone.
hackerone.com/shopify-scripts/. Accessed: 2018-06-13.
https://
[16]
[17] Sulley: A pure-python fully automated and unattended fuzzing frame-
work. [online]. https://github.com/OpenRCE/sulley. Accessed:
2018-06-11.
[18] Technical "whitepaper" for aﬂ-fuzz [online].
http://lcamtuf.
coredump.cx/afl/technical_details.txt. Accessed: 2018-06-
12.
[19] american fuzzy loop. https://github.com/mirrorer/aﬂ, 2017.
[20]
https://github.com/google/syzkaller,
fuzzer.
syzkaller: Linux syscall
2017.
[21] Andrea Arcuri and Lionel Briand. A hitchhiker’s guide to statistical tests
for assessing randomized algorithms in software engineering. Software
Testing, Veriﬁcation and Reliability, 24(3):219–250, 2014.
[22] Domagoj Babi´c, Lorenzo Martignoni, Stephen McCamant, and Dawn
Song.
In
Proceedings of the 2011 International Symposium on Software Testing
and Analysis, pages 12–22. ACM, 2011.
Statically-directed dynamic automated test generation.
[23] Osbert Bastani, Rahul Sharma, Alex Aiken, and Percy Liang. Syn-
thesizing program input grammars. In ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI), 2017.
[24] Soﬁa Bekrar, Chaouki Bekrar, Roland Groz, and Laurent Mounier. A
taint based approach for smart fuzzing. In Software Testing, Veriﬁcation
and Validation (ICST), 2012 IEEE Fifth International Conference on,
pages 818–825. IEEE, 2012.
[25] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-
In ACM Conference on
based greybox fuzzing as markov chain.
Computer and Communications Security (CCS), 2016.
[26] Cristian Cadar, Daniel Dunbar, and Dawson R Engler. Klee: Unassisted
and automatic generation of high-coverage tests for complex systems
programs. 2008.
[27] Peng Chen and Hao Chen. Angora: Efﬁcient fuzzing by principled
search. In IEEE Symposium on Security and Privacy, 2018.
[28] Kyle Dewey, Jared Roesch, and Ben Hardekopf. Language fuzzing
the 29th
using constraint
ACM/IEEE international conference on Automated software engineer-
ing, pages 725–730. ACM, 2014.
logic programming.
In Proceedings of
[44]
Jesse
http://www.squarefree.com/2007/08/02/introducing-jsfunfuzz, 2007.
Introducing
Ruderman.
jsfunfuzz.
URL
[45] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian
Schinzel, and Thorsten Holz. kaﬂ: Hardware-assisted feedback fuzzing
for os kernels. 2017.
[46] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu
Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and
Giovanni Vigna. Driller: Augmenting fuzzing through selective sym-
bolic execution. In NDSS, volume 16, pages 1–16, 2016.
[48]
[47] Spandan Veggalam, Sanjay Rawat, Istvan Haller, and Herbert Bos.
Ifuzzer: An evolutionary interpreter fuzzer using genetic programming.
In European Symposium on Research in Computer Security, pages 581–
601. Springer, 2016.
Joachim Viide, Aki Helin, Marko Laakso, Pekka Pietikäinen, Mika Sep-
pänen, Kimmo Halunen, Rauli Puuperä, and Juha Röning. Experiences
with model inference assisted fuzzing. WOOT, 2:1–2, 2008.
Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. Skyﬁre: Data-driven
seed generation for fuzzing. In Security and Privacy (SP), 2017 IEEE
Symposium on, pages 579–594. IEEE, 2017.
[49]
[50] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. Taintscope: A
checksum-aware directed fuzzing tool for automatic software vulner-
ability detection. In Security and privacy (SP), 2010 IEEE symposium
on, pages 497–512. IEEE, 2010.
[51] Xuejun Yang, Yang Chen, Eric Eide, and John Regehr.
Finding
In ACM SIGPLAN Notices,
and understanding bugs in c compilers.
volume 46, pages 283–294. ACM, 2011.
[52] Zoltán Ésik and Szabolcs Iván. Büchi context-free languages. Theoret-
ical Computer Science, 412(8):805–821, 2011.
[29] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-based directed
whitebox fuzzing. In Proceedings of the 31st International Conference
on Software Engineering, pages 474–484. IEEE Computer Society,
2009.
[30] Patrice Godefroid, Adam Kiezun, and Michael Y. Levin. Grammar-
based whitebox fuzzing. SIGPLAN Not., 43(6):206–215, June 2008.
[31] Patrice Godefroid, Michael Y Levin, and David Molnar. Sage: whitebox
fuzzing for security testing. Queue, 10(1):20, 2012.
[32] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. Automated
whitebox fuzz testing. In NDSS, volume 8, pages 151–166, 2008.
[33] Patrice Godefroid, Hila Peleg, and Rishabh Singh. Learn&#38;fuzz:
the 32Nd
Machine learning for input fuzzing.
IEEE/ACM International Conference on Automated Software Engineer-
ing, 2017.
In Proceedings of
[34] Patrice Godefroid, Hila Peleg, and Rishabh Singh. Learn&Fuzz: Ma-
chine learning for input fuzzing. In Proceedings of the 32Nd IEEE/ACM
International Conference on Automated Software Engineering, ASE
2017, pages 50–59, Piscataway, NJ, USA, 2017. IEEE Press.
Istvan Haller, Asia Slowinska, Matthias Neugschwandtner, and Herbert
Bos. Dowsing for overﬂows: a guided fuzzer to ﬁnd buffer boundary
violations. In USENIX Security Symposium, pages 49–64, 2013.
[35]
[36] Christian Holler, Kim Herzig, and Andreas Zeller. Fuzzing with code
fragments. In USENIX Security Symposium, pages 445–458, 2012.
[37] Matthias Höschele and Andreas Zeller. Mining input grammars from
In Proceedings of the 31st IEEE/ACM International
dynamic taints.
Conference on Automated Software Engineering, 2016.
[38] Eric Jones, Travis Oliphant, Pearu Peterson, et al. SciPy: Open source
scientiﬁc tools for Python. http://www.scipy.org/. Accessed:
2018-08-03.
[39] Bruce McKenzie. Generating strings at random from a context free
grammar. 1997.
[40] Travis Oliphant et al. NumPy: Open source scientiﬁc tools for Python.
http://www.numpy.org/. Accessed: 2018-08-03.
[41] Van-Thuan Pham, Marcel Böhme, and Abhik Roychoudhury. Model-
based whitebox fuzzing for program binaries. In Automated Software
Engineering (ASE), 2016 31st IEEE/ACM International Conference on,
pages 543–553. IEEE, 2016.
[42] Paul Purdom. A sentence generator for testing parsers. BIT Numerical
Mathematics, 12(3):366–375, Sep 1972.
[43] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano
Giuffrida, and Herbert Bos. Vuzzer: Application-aware evolutionary
fuzzing. In Proceedings of the Network and Distributed System Security
Symposium (NDSS), 2017.
15