## Systemtap examples, Network - 5 Monitoring Network Packets Drops in Kernel  
### 作者                                                                                                       
digoal                                                                                                         
### 日期                                                                                                                        
2013-11-14                                                                                                  
### 标签                                                                                                     
PostgreSQL , Linux , systemtap , stap , dtrace , probe                                                                                                      
----                                                                                                               
## 背景         
```  
例子来自dropwatch.stp脚本, 可用于分析网络协议栈中丢包的确切位置. 确切的位置是使用symname或者symdata将内存地址翻译出来的函数信息, 翻译必须使用stap --all-modules选项以便加载所有的模块的符号表.  
       --all-modules  
              Equivalent to specifying "-dkernel" and a "-d" for each kernel module that is  currently  loaded.   Cau-  
              tion: this can make the probe modules considerably larger.  
脚本内容以及注解  
[root@db-172-16-3-150 network]# cd /usr/share/systemtap/testsuite/systemtap.examples/network  
[root@db-172-16-3-150 network]# cat dropwatch.stp  
#!/usr/bin/stap  
############################################################  
# Dropwatch.stp  
# Author: Neil Horman   
# An example script to mimic the behavior of the dropwatch utility  
# http://fedorahosted.org/dropwatch  
############################################################  
# Array to hold the list of drop points we find  
global locations  
# Note when we turn the monitor on and off  
probe begin { printf("Monitoring for dropped packets\n") }  
probe end { printf("Stopping dropped packet monitor\n") }  
# increment a drop counter for every location we drop at  
probe kernel.trace("kfree_skb") { locations[$location]   
# An example script to mimic the behavior of the dropwatch utility  
# http://fedorahosted.org/dropwatch  
############################################################  
# Array to hold the list of drop points we find  
global locations  
# Note when we turn the monitor on and off  
probe begin { printf("Monitoring for dropped packets\n") }  
probe end { printf("Stopping dropped packet monitor\n") }  
# increment a drop counter for every location we drop at  
probe kernel.trace("kfree_skb") { locations[$location] skbaddr = skb;  
                if (skb) {  
                        __entry->protocol = ntohs(skb->protocol);  
                }  
                __entry->location = location;  
        ),  
        TP_printk("skbaddr=%p protocol=%u location=%p",  
                __entry->skbaddr, __entry->protocol, __entry->location)  
);  
本文例子中每次排第一位的都是tcp_v4_rcv函数, 通过源码, 找到这个函数的定义, 在函数定义中可以找到kfree_skb函数, 也就是本文用到的trace.  
/usr/src/debug/kernel-2.6.32-358.el6/linux-2.6.32-358.el6.x86_64/net/ipv4/tcp_ipv4.c  
/*  
 *      From tcp_input.c  
 */  
int tcp_v4_rcv(struct sk_buff *skb)  
{  
        const struct iphdr *iph;  
        struct tcphdr *th;  
        struct sock *sk;  
        int ret;  
        struct net *net = dev_net(skb->dev);  
        if (skb->pkt_type != PACKET_HOST)  
                goto discard_it;  
        /* Count it even if it's bad */  
        TCP_INC_STATS_BH(net, TCP_MIB_INSEGS);  
        if (!pskb_may_pull(skb, sizeof(struct tcphdr)))  
                goto discard_it;  
        th = tcp_hdr(skb);  
        if (th->doff doff * 4))  
                goto discard_it;  
        /* An explanation is required here, I think.  
         * Packet length and doff are validated by header prediction,  
         * provided case of th->doff==0 is eliminated.  
         * So, we defer the checks. */  
        if (!skb_csum_unnecessary(skb) && tcp_v4_checksum_init(skb))  
                goto bad_packet;  
        th = tcp_hdr(skb);  
        iph = ip_hdr(skb);  
        TCP_SKB_CB(skb)->seq = ntohl(th->seq);  
        TCP_SKB_CB(skb)->end_seq = (TCP_SKB_CB(skb)->seq + th->syn + th->fin +  
                                    skb->len - th->doff * 4);  
        TCP_SKB_CB(skb)->ack_seq = ntohl(th->ack_seq);  
        TCP_SKB_CB(skb)->when    = 0;  
        TCP_SKB_CB(skb)->flags   = iph->tos;  
        TCP_SKB_CB(skb)->sacked  = 0;  
        sk = __inet_lookup_skb(&tcp_hashinfo, skb, th->source, th->dest);  
        if (!sk)  
                goto no_tcp_socket;  
process:  
        if (sk->sk_state == TCP_TIME_WAIT)  