    sns.__version__, matplotlib.__version__
    ('0.11.1', '3.4.2')
This works
    import seaborn as sns
    titanic = sns.load_dataset("titanic")
    sns.displot(
        data=titanic,
        x="age",
        y='fare',
        col="survived",
        common_bins=True,
    )
This does not
    import seaborn as sns
    titanic = sns.load_dataset("titanic")
    sns.displot(
        data=titanic,
        x="age",
        y='fare',
        col="survived",
        common_bins=False,
    )
    /home/samuel/miniconda3/envs/py38/lib/python3.8/site-packages/numpy/core/fromnumeric.py:87: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    /tmp/ipykernel_10645/1850804617.py in 
          2 
          3 titanic = sns.load_dataset("titanic")
    ----> 4 sns.displot(
          5     data=titanic,
          6     x="age",
    ~/miniconda3/envs/py38/lib/python3.8/site-packages/seaborn/distributions.py in displot(data, x, y, hue, row, col, weights, kind, rug, rug_kws, log_scale, legend, palette, hue_order, hue_norm, color, col_wrap, row_order, col_order, height, aspect, facet_kws, **kwargs)
       2230 
       2231             _assign_default_kwargs(hist_kws, p.plot_bivariate_histogram, histplot)
    -> 2232             p.plot_bivariate_histogram(**hist_kws)
       2233 
       2234     elif kind == "kde":
    ~/miniconda3/envs/py38/lib/python3.8/site-packages/seaborn/distributions.py in plot_bivariate_histogram(self, common_bins, common_norm, thresh, pthresh, pmax, color, legend, cbar, cbar_ax, cbar_kws, estimate_kws, **plot_kws)
        763                 vmax = self._quantile_to_level(full_heights, pmax)
        764             else:
    --> 765                 vmax = plot_kws.pop("vmax", np.max(full_heights))
        766         else:
        767             vmax = None
     in amax(*args, **kwargs)
    ~/miniconda3/envs/py38/lib/python3.8/site-packages/numpy/core/fromnumeric.py in amax(a, axis, out, keepdims, initial, where)
       2703     5
       2704     """
    -> 2705     return _wrapreduction(a, np.maximum, 'max', axis, None, out,
       2706                           keepdims=keepdims, initial=initial, where=where)
       2707 
    ~/miniconda3/envs/py38/lib/python3.8/site-packages/numpy/core/fromnumeric.py in _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs)
         85                 return reduction(axis=axis, out=out, **passkwargs)
         86 
    ---> 87     return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
         88 
         89 
    ValueError: could not broadcast input array from shape (16,53) into shape (16)
I thought asking for different bins size (in a more complicated example) would
work, but apparently adding a y variable make stuff blows up. Asking only for
a x variable or more rows/columns seems fine though, so I'm wondering if the
bivariate case is supposed to 1. work or 2. is allowing something which is not
supposed to be working and should instead report a warning/error for that
case.