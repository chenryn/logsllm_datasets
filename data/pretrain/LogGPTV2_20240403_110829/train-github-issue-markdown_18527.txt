In the bonfire problem, it states:
> Return the number of total permutations of the provided string that don't
> have repeated consecutive letters.  
>  For example, 'aab' should return 2 because it has 6 total permutations, but
> only 2 of them don't have the same letter (in this case 'a') repeating.
I believe this is incorrect.
The possible permutations of 'aab' are 'aab' 'aba' and 'baa' which should be
calculated as 3! / 2! (= 3), not 3! (= 6) as what was done in the description.
The total number of permutations should be 3 not 6. Then you want to eliminate
cases wherein identical letters are adjacent, namely, 'aab' and 'baa'. This
leaves 'aba' which means the answer ought to be 1, not 2.
Let me give another example. For the string 'aabb', the possible permutations
ought not be calculated as 4! (=24) then eliminate the ones with adjacent
identical characters. This leads to an incorrect answer of 8.
The possible permutations of 'aabb' is actually just 6, namely 'aabb', 'abab',
'baba', 'bbaa', 'abba', 'baab'. This can also be calculated 4! / (2! * 2!)
(=6). Then when the strings wherein there are adjacent identical characters
are eliminated, this leaves 'abab' and 'baba' which means the answer is 2 (not
8 as the test case indicates).
Please advise. Apologies if this is deemed a spam