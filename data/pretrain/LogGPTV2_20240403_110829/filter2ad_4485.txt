title:Towards the super fluid cloud
author:Filipe Manco and
João Martins and
Felipe Huici
Towards the Super Fluid Cloud
Filipe Manco, Joao Martins, Felipe Huici
NEC Europe Ltd.
ABSTRACT
Traditionally, the number of VMs running on a server and
how quickly these can be migrated has been less than opti-
mal mostly because of the memory and CPU requirements
imposed on the system by the full-ﬂedged OSes that the VMs
run. More recently, work towards VMs based on minimalis-
tic or specialized OSes has started pushing the envelope of
how reactive or ﬂuid the cloud can be. In this demo we will
demonstrate how to concurrently execute thousands of Xen-
based VMs on a single inexpensive server. We will also show
instantiation and migraion of such VMs in tens of millisec-
onds, and transparent, wide area migration of virtualized
middleboxes by combining such VMs with the multi-path
TCP (MPTCP) protocol.
Keywords
cloud; performance; server consolidation; virtualization; xen
1.
INTRODUCTION
In recent years, cloud and data centers deployments have
become pervasive, largely as a result of the availability of in-
expensive commodity servers, higher capacity network links
and ever improving virtualization technologies. Services such
as Amazon EC2 [1], Rackspace [11], and Microsoft Azure [9]
are now commonplace, and even network operators are look-
ing to get into the game by deploying so call micro-data
centers at Points-of-Presence sites [5] in order to run appli-
cations such as CDN caches or virtualized middlebox pro-
cessing [4] close to end users.
Traditionally, the number of VMs running on each server
has been low, in the order of ten or so, mostly because of the
memory and CPU requirements imposed on the system by
the full-ﬂedged OSes that the VMs run. Further, while it is
commonplace to speak of clouds being elastic because such
VMs can be easily instantiated, suspended and migrated,
their size and complexity means that performing such oper-
ations can take in the order of seconds or worse (e.g., when
migrating a VM hundreds of megabytes or bigger in size).
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the Owner/Author. Copyright is held by the owner/author(s).
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
ACM 978-1-4503-2836-4/14/08.
http://dx.doi.org/10.1145/2619239.2631449.
More recently, work towards VMs based on minimalistic
or specialized OSes (e.g., OSv [10], ClickOS [8], Mirage [7],
Erlang on Xen [3], HalVM [6], etc.) has started pushing the
envelope of how reactive or ﬂuid the cloud can be. These
VMs’ small CPU and memory footprints (as little as a few
megabytes) enable a number of scenarios that are not pos-
sible with traditional VMs.
First, such VMs have the potential be instantiated and
suspended in tens of milliseconds. This means that they
can be deployed on-the-ﬂy, even as new ﬂows arrive in a net-
work, and can be used to eﬀectively cope with ﬂash crowds.
Second, the ability to quickly migrate the VM and its state
would allow operators to run their servers at “hotter” load
levels without fear of overload, since processing could be
near instantaneously moved to a less loaded server. Finally,
these VMs’ small memory footprints could potentially allow
thousands or even more such VMs to run on a single, in-
expensive server; this would lead to important investment
and operating savings, and would allow for ﬁne granularity,
virtualized network processing (e.g., per-customer ﬁrewalls
or CPEs, to name a couple).
Realizing such a super ﬂuid cloud, however, poses a num-
ber of important challenges, since the virtualization tech-
nologies that these VMs run on (e.g., Xen or KVM) were
never designed to run this large number of concurrent VMs.
In the case of Xen [2], the system that this demo is based
on, attempts to tackle some of the issues such as limited
number of event channels or memory grants are under way,
but these are still in their infancy and are not necessarily
aiming to run the huge number of VMs we are envisioning.
In this demo we will demonstrate how to concurrently
execute thousands of MiniOS-based guests 1 on a single in-
expensive server. We will also show instantiation and migra-
tion of such VMs in tens of milliseconds, and transparent,
wide area migration of virtualized middleboxes by combining
such VMs with the multi-path TCP (MPTCP) protocol.
2. SYSTEM DESCRIPTION
We base our demo on Xen, a type 1 hypervisor (see ﬁg-
ure 1). In order to keep the hypervisor eﬃcient and secure,
device drivers and the system’s control plane are oﬄoaded
to a special virtual machine commonly running a standard
Linux distribution and called the control domain or dom0
for short.
The control plane is based around the XenStore, a proc-
like ﬁlesystem that keeps system and per-VM information
1MiniOS is a minimalistic, paravirtualized operating system
distributed with the Xen sources.
355Figure 1: System architecture.
such as virtual CPUs, virtual interfaces and memory assign-
ments. Users control Xen (e.g., to create VMs) by means of
its toolstack : the xl command line tool, which in turn uses
the libxl library to interact with Xen components. In terms
of network I/O, Xen uses a split-driver model: a virtualized
netfront driver resides in the VMs, and a complimentary
netback driver sits in dom0. dom0 further includes a back-
end software switch to direct traﬃc from network drivers to
the netback driver. Finally, event channels are essentially
virtual interrupts used to signal the availability of packets.
For the actual virtual machine (also called a guest), we
rely on MiniOS. More speciﬁcally, we use ClickOS virtual
machines, which are basically guests running the Click mod-
ular router software on top of MiniOS (please see [8]).
Our contribution: Our work uses these guests to analyze
bottlenecks when attempting to run large numbers of VMs,
and implements and conﬁgures a number of improvements
to the Xen ecosystem. These include (1) a lean version of
the libxl library called libxcl which reduces the number of
write operations to the XenStore from 37 to 17 per VM and
contains less generic code (e.g., it removes code that han-
dles full virtualization guests); (2) a new command line tool
called cosmos to make use of libxcl; (3) a simpliﬁed virtual
interface hotplug script for attaching interfaces to bridges;
(4) placement of all relevant ﬁles (hotplug scripts, VM conﬁg
ﬁles, VM images) on a RAM disk; (5) pinning of all vCPUs
and reservation of one for the XenStore and another one for
the XenConsole process; (6) addressing guests by ID rather
than name (the latter causes toolstack code to sequentially
go through all existing VM names); (7) use of multiple back-
end switches to overcome a maximum number of interfaces
per switch limitation; and (8) increasing the maximum num-
ber of open ﬁles and virtual terminals in Linux in order to
support the VMs’ consoles. Finally, we implement support
for suspending and resuming MiniOS guests which enables
migration scenarios.
3. DEMO DESCRIPTION
In the demo we will show our early work towards booting
large number of Xen-based guests on a single inexpensive
x86 server, as well as quick migration of these VMs. Fig-
ure 2 plots the individual boot times of up to 10,000 ClickOS
guests on a system with 4 AMD Opteron PI:EMAIL
CPUs and 64GB of memory (costing about $3,500). As
shown, the initial VMs take only tens of milliseconds to start,
while the last ones still take under one second. The cumula-
tive time to start all 10,000 VMs was about two hours, and
we test the VMs by having them respond to a ping.
In greater detail, we will show (1) between 1K-2K ClickOS
VMs booting and running; (2) operation times (create, sus-
Figure 2: Individual boot times for 10,000 ClickOS
virtual machines on a single x86 server.
pend, resume, migrate) when large numbers of VMs are al-
ready running; and (3) transparent and quick migration of
ClickOS middleboxes in a WAN by leveraging MPTCP. As
future work we are looking into how to improve the Xen
networking back-end to be able to cope with the potentially
large traﬃc that so many VMs might generate or receive.
4. REFERENCES
[1] Amazon. Amazon Elastic Compute Cloud (EC2).
https://aws.amazon.com/ec2/, May 2014.
[2] P. Barham, B. Dragovic, K. Fraser, S. Hand,
T. Harris, A. Ho, R. Neugebauer, I. Pratt, and
A. Warﬁeld. Xen and the Art of Virtualization. In
Proc. ACM SOSP, 2003, New York, NY, USA, 2003.
ACM.
[3] Erlang on Xen. Erlang on Xen.
http://erlangonxen.org/, May 2014.
[4] ETSI Portal. Network Functions Virtualisation: An
Introduction, Beneﬁts, Enablers, Challenges and Call
for Action.
http://portal.etsi.org/NFV/NFV_White_Paper.pdf,
October 2012.
[5] B. Frank, I. Poese, Y. Lin, G. Smaragdakis,
A. Feldmann, B. Maggs, J. Rake, S. Uhlig, and
R. Weber. Pushing cdn-isp collaboration to the limit.
SIGCOMM Comput. Commun. Rev., 43(3):34–44,
July 2013.
[6] HalVM. The Haskell Lightweight Virtual Machine
Source Archive.
https://github.com/GaloisInc/HaLVM, May 2014.
[7] A. Madhavapeddy, R. Mortier, C. Rotsos, D. Scott,
B. Singh, T. Gazagnaire, S. Smith, S. Hand, and
J. Crowcroft. Unikernels: Library operating systems
for the cloud. SIGPLAN Not., 48(4):461–472, Mar.
2013.
[8] J. Martins, M. Ahmed, C. Raiciu, V. Olteanu,
M. Honda, R. Bifulco, and F. Huici. ClickOS and the
Art of Network Function Virtualization. In Proc.
USENIX NSDI, April 2014.
[9] Microsoft Corporation. Azure: Microsoft’s Cloud
Platform. azure.microsoft.com/, May 2014.
[10] OSv. OSv - The Operating System Designed for the
Cloud. http://osv.io, May 2014.
[11] Rackspace. Public Cloud Hosting, Computing, Storage
and Networking. http://www.rackspace.com, May
2014.
Hardware (CPU, Memory, MMU, ...)Dom0(Linux)NICBLKXen Hypervisorcosmos/xcloxenstoredxenconsoledevtchnxenbusBackendClickOS(MiniOS)ClickOS(MiniOS)FrontendFrontendevtchnxenbusevtchnxenbus0.00.10.20.30.40.50.60.70.80.91.0 0 2000 4000 6000 8000 10000Operation duration (s)Number of VMs runningTotalXenStoreDom0 (Linux)Hypervisor356