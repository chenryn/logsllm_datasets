{"orchestrator.resource.name": {"dashed_name": "orchestrator-resource-name", "description": "Name of the resource being acted upon.", "example": "test-pod-cdcws", "flat_name": "orchestrator.resource.name", "ignore_above": 1024, "level": "extended", "name": "resource.name", "normalize": [], "short": "Name of the resource being acted upon."}}
{"orchestrator.resource.parent.type": {"dashed_name": "orchestrator-resource-parent-type", "description": "Type or kind of the parent resource associated with the event being observed. In Kubernetes, this will be the name of a built-in workload resource (e.g., Deployment, StatefulSet, DaemonSet).", "example": "DaemonSet", "flat_name": "orchestrator.resource.parent.type", "ignore_above": 1024, "level": "extended", "name": "resource.parent.type", "normalize": [], "short": "Type or kind of the parent resource associated with the event being observed."}}
{"orchestrator.resource.type": {"dashed_name": "orchestrator-resource-type", "description": "Type of resource being acted upon.", "example": "service", "flat_name": "orchestrator.resource.type", "ignore_above": 1024, "level": "extended", "name": "resource.type", "normalize": [], "short": "Type of resource being acted upon."}}
{"orchestrator.type": {"dashed_name": "orchestrator-type", "description": "Orchestrator cluster type (e.g. kubernetes, nomad or cloudfoundry).", "example": "kubernetes", "flat_name": "orchestrator.type", "ignore_above": 1024, "level": "extended", "name": "type", "normalize": [], "short": "Orchestrator cluster type (e.g. kubernetes, nomad or cloudfoundry)."}}
{"organization.id": {"dashed_name": "organization-id", "description": "Unique identifier for the organization.", "flat_name": "organization.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "short": "Unique identifier for the organization."}}
{"organization.name": {"dashed_name": "organization-name", "description": "Organization name.", "flat_name": "organization.name", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "organization.name.text", "name": "text", "type": "match_only_text"}], "name": "name", "normalize": [], "short": "Organization name."}}
{"package.architecture": {"dashed_name": "package-architecture", "description": "Package architecture.", "example": "x86_64", "flat_name": "package.architecture", "ignore_above": 1024, "level": "extended", "name": "architecture", "normalize": [], "short": "Package architecture."}}
{"package.build_version": {"dashed_name": "package-build-version", "description": "Additional information about the build version of the installed package.\nFor example use the commit SHA of a non-released package.", "example": "36f4f7e89dd61b0988b12ee000b98966867710cd", "flat_name": "package.build_version", "ignore_above": 1024, "level": "extended", "name": "build_version", "normalize": [], "short": "Build version information"}}
{"package.checksum": {"dashed_name": "package-checksum", "description": "Checksum of the installed package for verification.", "example": "68b329da9893e34099c7d8ad5cb9c940", "flat_name": "package.checksum", "ignore_above": 1024, "level": "extended", "name": "checksum", "normalize": [], "short": "Checksum of the installed package for verification."}}
{"package.description": {"dashed_name": "package-description", "description": "Description of the package.", "example": "Open source programming language to build simple/reliable/efficient software.", "flat_name": "package.description", "ignore_above": 1024, "level": "extended", "name": "description", "normalize": [], "short": "Description of the package."}}
{"package.install_scope": {"dashed_name": "package-install-scope", "description": "Indicating how the package was installed, e.g. user-local, global.", "example": "global", "flat_name": "package.install_scope", "ignore_above": 1024, "level": "extended", "name": "install_scope", "normalize": [], "short": "Indicating how the package was installed, e.g. user-local, global."}}
{"package.installed": {"dashed_name": "package-installed", "description": "Time when package was installed.", "flat_name": "package.installed", "level": "extended", "name": "installed", "normalize": [], "short": "Time when package was installed.", "type": "date"}}
{"package.license": {"dashed_name": "package-license", "description": "License under which the package was released.\nUse a short name, e.g. the license identifier from SPDX License List where possible (https://spdx.org/licenses/).", "example": "Apache License 2.0", "flat_name": "package.license", "ignore_above": 1024, "level": "extended", "name": "license", "normalize": [], "short": "Package license"}}
{"package.name": {"dashed_name": "package-name", "description": "Package name", "example": "go", "flat_name": "package.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "short": "Package name"}}
{"package.path": {"dashed_name": "package-path", "description": "Path where the package is installed.", "example": "/usr/local/Cellar/go/1.12.9/", "flat_name": "package.path", "ignore_above": 1024, "level": "extended", "name": "path", "normalize": [], "short": "Path where the package is installed."}}
{"package.reference": {"dashed_name": "package-reference", "description": "Home page or reference URL of the software in this package, if available.", "example": "https://golang.org", "flat_name": "package.reference", "ignore_above": 1024, "level": "extended", "name": "reference", "normalize": [], "short": "Package home page or reference URL"}}
{"package.size": {"dashed_name": "package-size", "description": "Package size in bytes.", "example": 62231, "flat_name": "package.size", "format": "string", "level": "extended", "name": "size", "normalize": [], "short": "Package size in bytes.", "type": "long"}}
{"package.type": {"dashed_name": "package-type", "description": "Type of package.\nThis should contain the package file type, rather than the package manager name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.", "example": "rpm", "flat_name": "package.type", "ignore_above": 1024, "level": "extended", "name": "type", "normalize": [], "short": "Package type"}}
{"package.version": {"dashed_name": "package-version", "description": "Package version", "example": "1.12.9", "flat_name": "package.version", "ignore_above": 1024, "level": "extended", "name": "version", "normalize": [], "short": "Package version"}}
{"process.args": {"dashed_name": "process-args", "description": "Array of process arguments, starting with the absolute path to the executable.\nMay be filtered to protect sensitive information.", "example": "[\"/usr/bin/ssh\", \"-l\", \"user\", \"10.0.0.16\"]", "flat_name": "process.args", "ignore_above": 1024, "level": "extended", "name": "args", "normalize": ["array"], "short": "Array of process arguments."}}
{"process.args_count": {"dashed_name": "process-args-count", "description": "Length of the process.args array.\nThis field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.", "example": 4, "flat_name": "process.args_count", "level": "extended", "name": "args_count", "normalize": [], "short": "Length of the process.args array.", "type": "long"}}
{"process.code_signature.digest_algorithm": {"dashed_name": "process-code-signature-digest-algorithm", "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.", "example": "sha256", "flat_name": "process.code_signature.digest_algorithm", "ignore_above": 1024, "level": "extended", "name": "digest_algorithm", "normalize": [], "original_fieldset": "code_signature", "short": "Hashing algorithm used to sign the process."}}
{"process.code_signature.exists": {"dashed_name": "process-code-signature-exists", "description": "Boolean to capture if a signature is present.", "example": "true", "flat_name": "process.code_signature.exists", "level": "core", "name": "exists", "normalize": [], "original_fieldset": "code_signature", "short": "Boolean to capture if a signature is present.", "type": "boolean"}}
{"process.code_signature.signing_id": {"dashed_name": "process-code-signature-signing-id", "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.", "example": "com.apple.xpc.proxy", "flat_name": "process.code_signature.signing_id", "ignore_above": 1024, "level": "extended", "name": "signing_id", "normalize": [], "original_fieldset": "code_signature", "short": "The identifier used to sign the process."}}
{"process.code_signature.status": {"dashed_name": "process-code-signature-status", "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.", "example": "ERROR_UNTRUSTED_ROOT", "flat_name": "process.code_signature.status", "ignore_above": 1024, "level": "extended", "name": "status", "normalize": [], "original_fieldset": "code_signature", "short": "Additional information about the certificate status."}}
{"process.code_signature.subject_name": {"dashed_name": "process-code-signature-subject-name", "description": "Subject name of the code signer", "example": "Microsoft Corporation", "flat_name": "process.code_signature.subject_name", "ignore_above": 1024, "level": "core", "name": "subject_name", "normalize": [], "original_fieldset": "code_signature", "short": "Subject name of the code signer"}}
{"process.code_signature.team_id": {"dashed_name": "process-code-signature-team-id", "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.", "example": "EQHXZ8M8AV", "flat_name": "process.code_signature.team_id", "ignore_above": 1024, "level": "extended", "name": "team_id", "normalize": [], "original_fieldset": "code_signature", "short": "The team identifier used to sign the process."}}
{"process.code_signature.timestamp": {"dashed_name": "process-code-signature-timestamp", "description": "Date and time when the code signature was generated and signed.", "example": "2021-01-01T12:10:30Z", "flat_name": "process.code_signature.timestamp", "level": "extended", "name": "timestamp", "normalize": [], "original_fieldset": "code_signature", "short": "When the signature was generated and signed.", "type": "date"}}
{"process.code_signature.trusted": {"dashed_name": "process-code-signature-trusted", "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.", "example": "true", "flat_name": "process.code_signature.trusted", "level": "extended", "name": "trusted", "normalize": [], "original_fieldset": "code_signature", "short": "Stores the trust status of the certificate chain.", "type": "boolean"}}
{"process.code_signature.valid": {"dashed_name": "process-code-signature-valid", "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.", "example": "true", "flat_name": "process.code_signature.valid", "level": "extended", "name": "valid", "normalize": [], "original_fieldset": "code_signature", "short": "Boolean to capture if the digital signature is verified against the binary content.", "type": "boolean"}}
{"process.command_line": {"dashed_name": "process-command-line", "description": "Full command line that started the process, including the absolute path to the executable, and all arguments.\nSome arguments may be filtered to protect sensitive information.", "example": "/usr/bin/ssh -l user 10.0.0.16", "flat_name": "process.command_line", "level": "extended", "multi_fields": [{"flat_name": "process.command_line.text", "name": "text", "type": "match_only_text"}], "name": "command_line", "normalize": [], "short": "Full command line that started the process.", "type": "wildcard"}}
{"process.elf.architecture": {"dashed_name": "process-elf-architecture", "description": "Machine architecture of the ELF file.", "example": "x86-64", "flat_name": "process.elf.architecture", "ignore_above": 1024, "level": "extended", "name": "architecture", "normalize": [], "original_fieldset": "elf", "short": "Machine architecture of the ELF file."}}
{"process.elf.byte_order": {"dashed_name": "process-elf-byte-order", "description": "Byte sequence of ELF file.", "example": "Little Endian", "flat_name": "process.elf.byte_order", "ignore_above": 1024, "level": "extended", "name": "byte_order", "normalize": [], "original_fieldset": "elf", "short": "Byte sequence of ELF file."}}
{"process.elf.cpu_type": {"dashed_name": "process-elf-cpu-type", "description": "CPU type of the ELF file.", "example": "Intel", "flat_name": "process.elf.cpu_type", "ignore_above": 1024, "level": "extended", "name": "cpu_type", "normalize": [], "original_fieldset": "elf", "short": "CPU type of the ELF file."}}
{"process.elf.creation_date": {"dashed_name": "process-elf-creation-date", "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.", "flat_name": "process.elf.creation_date", "level": "extended", "name": "creation_date", "normalize": [], "original_fieldset": "elf", "short": "Build or compile date.", "type": "date"}}
{"process.elf.exports": {"dashed_name": "process-elf-exports", "description": "List of exported element names and types.", "flat_name": "process.elf.exports", "level": "extended", "name": "exports", "normalize": ["array"], "original_fieldset": "elf", "short": "List of exported element names and types.", "type": "flattened"}}