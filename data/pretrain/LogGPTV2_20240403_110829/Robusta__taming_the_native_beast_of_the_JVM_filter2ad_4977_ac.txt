calls, as we will discuss.
One more complication arises when dealing with multiple
threads. The real interface pointer is a per-thread pointer,
but for eﬃciency Robusta’s fake interface pointer is shared
by all threads in the sandbox. This does not pose a problem
because the thread-local data in the interface structure is
used only by the JVM and not by native code.
In order
to support the correct behavior, a JNI wrapper only needs
to look up the real interface pointer for a particular thread
from the natp structure.
JNI checking. Robusta inserts safety checks in its JNI
wrappers before the real JNI functions are invoked. These
checks are necessary to maintain the integrity and conﬁ-
dentiality of the JVM. The inserted checks are similar to
what previous JNI checking systems perform, including Safe-
JNI [30] and Jinn [15]. For instance, when native code in-
vokes a Java method, Robusta checks that the type of each
parameter matches the Java method’s signature, preventing
type confusion attacks. Additionally, it veriﬁes that exactly
206the right number of parameters are provided. Robusta clas-
siﬁes the checks into two groups: integrity and conﬁdential-
ity. For example, during a ﬁeld-write JNI call, an integrity
check would ensure the new value is of the same type as the
target ﬁeld. Similarly, a conﬁdentiality check would ensure
private ﬁelds are not accessible.
Direct pointers to the Java heap. Java often needs to
pass references to an array of data to native code. The
JNI allows eﬃcient access to primitive arrays (i.e., arrays
with primitive types such as int) and strings through di-
rect pointers to the Java heap. This kind of direct access
is enabled by a set of Get/Release JNI functions. For in-
stance, given a reference to a Java integer array, GetInt-
ArrayElements returns the address of the ﬁrst element of
the array (or a copy, decided by the JVM). Native code is
then able to perform pointer arithmetic to access array el-
ements in the usual way. After native code is ﬁnished with
the array, ReleaseIntArrayElements releases the pointer.
Direct access to the JVM heap is dangerous and must
be prevented. To accommodate the Get/Release JNI func-
tions, Robusta performs a copy-in and copy-out operation
between the JVM heap and the sandbox’s heap.
In par-
ticular, when GetIntArrayElements is invoked, its wrapper
allocates a buﬀer in the sandbox, copies the elements of the
array into the buﬀer, and returns the buﬀer’s address to na-
tive code. When ReleaseIntArrayElements is invoked, its
wrapper copies the buﬀer’s contents back into the original
Java array.
This technique redirects pointers referencing the JVM heap
to the sandbox area. It incurs the extra runtime overhead
of copying the referenced data in and out of the sandbox.
However, there is no need for dynamic bounds checking for
pointer access in the sandbox and thus compares favorably
to SafeJNI [30], where every array access comes with a dy-
namic bounds check.
One optimization can be used to reduce the copy-in and
copy-out overhead. The implementation of GetIntArray-
Elements inside a JVM may already need to make a copy in
the JVM heap. In that case, we can change the implementa-
tion so that it makes a copy directly in the sandbox, avoid-
ing a second copying in its wrapper. If the JVM’s garbage
collector does not support pinning and is allowed to move
objects in the Java heap, then a copy operation is inevitable
because direct pointers to the array become invalid after the
GC moves the array. As it turns out, OpenJDK 1.7.0 always
makes a copy for GetIntArrayElements.
5. MANAGING NATIVE CODE SECURITY
The basic idea behind Robusta’s regulation of native sys-
tem calls is to consult Java’s security manager. The security
manager decides whether to deny a system call by referring
to a security policy. The beneﬁt of this design is that a single
security mechanism regulates both Java and native code se-
curity and as a result it is suﬃcient to have a single, uniform
security policy for an entire application of mixed Java and
native code. This design also enables Robusta to reuse much
of the infrastructure provided by Java security, including its
policy-speciﬁcation framework and enforcement mechanism;
only a minimum amount of extra code needs to be added to
make the idea work. We next discuss the major points in
our design.
A security policy can grant the native libraries of an ap-
plication two kinds of permissions: mode permissions and
system-access permissions. Mode permissions specify whether
a native library can be loaded into the JVM and whether
it should be sandboxed. A Java application that has been
granted the “loadLibrary.libraryName” runtime permission
is allowed to load the library with libraryName in the un-
constrained mode. If the application has been granted the
“loadSNL.libraryName” permission, then the application can
load the library in the sandboxed mode (SNL stands for
Sandboxed Native Library). If there is no mode permission
granted for a Java application, then by default it is not al-
lowed to load a native library. The mode policy is enforced
during library-loading time in Robusta.
We note that although the policy speciﬁcation for an ap-
plication allows a native library to be loaded in the sand-
boxed mode and another library in the unconstrained mode,
such a policy essentially grants all permissions to the ap-
plication because the unconstrained library can access any
resource freely. As in Java security, extreme care must be
taken to allow an application to load native libraries in the
unconstrained mode. On the other hand, mixing sandboxed
and unconstrained libraries might still be beneﬁcial from the
point of view of isolating faults in the sandboxed libraries.
System-access permissions specify what system accesses
an application is allowed to perform. Robusta’s system-
access permissions are the same as those provided by Java
security. For instance, a policy can grant a Java application
the permission to read ﬁles, but restrict it from writing ﬁles.
Robusta can enforce such policies in the native libraries of
a Java application. The enforcement is carried out in the
following way:
• All system calls in the native library are redirected
to the system-call trampolines in the sandbox. The
system-call trampolines then invoke trusted system-
call wrappers outside of the sandbox.
• The system-call wrappers invoke the checkPermission
method of Java’s security manager after construct-
ing the necessary permission objects. For the pre-
vious example policy, the checkPermission method
will grant the access for a ﬁle read, but will throw
a SecurityException for a ﬁle write.
We next make a few clariﬁcations. First, the above design
does not impede Java’s stack inspection.
In the presence
of native method calls, the method-call stack consists of a
mixed Java and native frames. When the JVM performs
stack inspection, it can ﬁnd the right protection domain even
for a native frame. Since a native frame is associated with
a native method in a Java class, the JVM can ﬁnd the pro-
tection domain based on the class.
Second, Robusta disallows spawning native threads. The
reason is twofold. First, creating native threads is strongly
discouraged in the JNI [17] because the native thread model
may not match the Java thread model and the mismatch
may cause synchronization problems between Java and na-
tive code. Second, creating a native thread might enable
the new thread to have more privileges than the original na-
tive thread (unless something similar to protection-domain
inheritance in Java is supported [9]). For these two reasons,
native code should call back to Java to create new Java
threads, which is allowed in Robusta.
2076.
IMPLEMENTATION AND EVALUATION
In this section, we discuss the prototype implementation
and experimental evaluation of Robusta.
6.1 Prototype implementation
Our proof-of-concept implementation is based on Open-
JDK 1.7.0. Robusta is compiled separately from the Open-
JDK into a shared library that the OpenJDK loads during
runtime. Various hooks are added to the OpenJDK to invoke
routines deﬁned in the Robusta library. For instance, a hook
is added so that, when the OpenJDK needs to load a native
library, the control is transferred to Robusta for loading the
library into the sandbox (if the library should be sandboxed
according to the policy). This design of minimizing changes
to the OpenJDK has the advantage of reducing the devel-
opment time of Robusta because OpenJDK’s re-compilation
delay is signiﬁcant (at least 10 minutes).
We modiﬁed the execution of those bytecode instructions
that invoke a native method (e.g., invokespecial with a
native method ID) so that they invoke native code in the
sandbox. The JVM provides two implementations for the
execution engine, a default ASM template version and a
(slower) C++ version. In order to fully evaluate Robusta,
we integrated Robusta with the ASM template version.
Robusta’s implementation is small.
It is comprised of
about 2,000 lines of C code, 7 JVM and 8 NaCl hooks,
and about 150 lines of C code for the utility module that
is loaded into the sandbox during initialization. Robusta
made few changes to the NaCl toolchain. One small modiﬁ-
cation by Seaborn [25] made the linker generate PLT (Pro-
cedure Linkage Table) entries for dynamically linked code.
The same veriﬁer in NaCl is used in Robusta for validating
code safety.
Robusta’s implementation is restricted to Linux and x86-
32.
It has not yet dealt with portability, both from the
OS and ISA points of view. However, since NaCl has been
ported to multiple ISAs and OSes, we believe most of Ro-
busta will be portable. The memory layout for dynamic
loading in Robusta targets the ELF format on Linux and
needs adjustment for Windows’s PE format.
6.2 Experimental evaluation
To evaluate Robusta, we conducted experiments to test its
functionality and performance overhead. Experiments were
carried out on a Linux Ubuntu 8.1 box with Intel Core2 Duo
CPU at 2.26GHz. When evaluating performance overhead,
all experiments were averaged over 10 runs.
Functionality testing. We created a set of microbench-
marks for testing the functionality and testing the security
of Robusta. These microbenchmarks include programs for
passing parameters of various types and sizes from Java
to native code, programs for getting and setting ﬁelds of
Java objects, programs for accessing Java arrays, programs
for allocating Java objects and arrays, and programs for
making system calls. We also included programs for test-
ing Robusta’s eﬀectiveness for preventing abusive JNI calls
and preventing unsafe system calls. These microbenchmarks
were fully evaluated before we conducted performance eval-
uation on larger Java programs.
Runtime overhead. The runtime overhead of Robusta
can roughly be put into two classes. First, there is the SFI
cost. For NaCl, this is the cost of masking indirect jump
instructions and the cost of making the program properly
aligned at 32-byte blocks. The second class of runtime over-
head happens during context switches. In Robusta, the exe-
cution context may switch between the JVM and the sand-
box in a number of situations: when the JVM invokes a
native method, the context is switched into the sandbox;
when native code ﬁnishes execution, the context is switched
outside of the sandbox; when native code invokes a JNI call
or a system call, the context is switched outside of the sand-
box to invoke trusted wrappers and is then switched back
into the sandbox. Each context switch comes with the cost
of saving and restoring states, and other costs depending on
the kinds of context switches (e.g., the cost of safety checking
in JNI calls and the cost of invoking the security manager
in system calls).
The runtime overhead depends greatly on how many con-
text switches a program makes. If a program stays in the
sandbox for a long time without performing a context switch
(for example, in computationally intensive programs), then
the runtime overhead should be small; the overhead would
be similar to the overhead of NaCl, which has been reported
to incur 5% of overhead on SPEC2000. On the other hand,
if a program makes frequent context switches between Java
and native code, then there should be a signiﬁcant runtime
overhead. Therefore, an interesting question is to explore the
relationship between the runtime overhead and how frequent
context switches happen. An answer helps to understand
what kinds of applications should be put under the control
of Robusta.
We compiled a set of medium-sized JNI programs, ex-
plained as follows.
• Java classes in java.util.zip invoke the popular Zlib
C library for performing general-purpose data com-
pression/decompression. We extracted from OpenJDK
the Java classes in java.util.zip, the Zlib 1.2.3 li-
brary, and the JNI glue code that links Zlib with Java.
• libec is a C library for elliptic curve cryptography.
OpenJDK provides JNI bindings for interfacing with
the library.
• Classes in java.lang.StrictMath invoke native meth-
ods implemented in fdlibm, the C “Freely Distributable
Math Library”. The library implements basic mathe-
matical functions such as sine, cosine, and tangent.
• libharu is an open-source PDF creation C library. As
it does not ship with JNI bindings, we created our own.
• We created JNI bindings to interface with the libjpeg
library, which provides JPEG compression.
Table 1 shows the code sizes of the benchmark programs.
For each program, the table lists its lines of Java code and
its lines of C code. The C code is divided into the category
of glue (JNI) code and the category of library C code.
The experiments were set up as follows:
• zip. Experiments were set up to compress ﬁles with
varying buﬀer sizes. The zip program compresses a ﬁle
by dividing the ﬁle into data segments of small sizes.
Its Java side passes a data segment through a buﬀer
208Program
zip
libec
libjpeg
libharu
StrictMath
Java LOC Glue/Library C LOC
2,295/11,319
416/19,049
96/20,346
114/120,959
153/8,505
3,351
2,689
31
188
1,128
Table 1: A set of benchmark programs and their
code sizes (reported by SLOCCount).
Program
zip (1KB)
zip (2KB)
zip (4KB)
zip (8KB)
zip (16KB)
libec (112)
libec (160)
libec (224)
libec (256)
libec (384)
libec (521)
libec (571)
libjpeg
libharu
StrictMath
Robusta increase Context switches
(per millisecond)
18.50
9.93
5.00
2.34
0.95
5.80
1.08
0.46
0.30
0.06
0.05
0.03
0.002
68.85
269.57
9.64%
7.51%
5.22%
2.42%
1.40%
3.41%
2.82%
6.20%
2.55%
-0.92%
-0.24%
5.03%
3.82%
48.22%
729.48%