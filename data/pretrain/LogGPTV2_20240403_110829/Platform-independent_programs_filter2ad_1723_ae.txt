### 8. Discussion

#### PIP Length
PIP (Platform-Independent Program) lengths can significantly exceed those of the input programs. This is expected, as the resulting program must be functionally equivalent to all input programs. In our current implementation, we have not made substantial efforts to reduce the size of the PIPs, although we recognize that optimizations could potentially minimize their size. We leave this as a topic for future work. Additionally, if PIPs are used in a steganographic context, further steganographic techniques may be necessary to mask other attributes, such as instruction and operand frequency.

#### More Gadget Headers
In Section 3.1, we only considered gadget headers that did not alter the system state except for the program counter, i.e., `(nop)* (jump)`. This simplifying assumption was made to ensure that the gadget header does not interfere with the semantics of the gadget body. We see three potential ways to relax this requirement:
1. **Undo Side-Effects**: Ensure any side-effects in the gadget header are "undone" in the gadget body. For example, a `push eax` in the header can be undone by a `pop eax` in the body before the actual machine-specific logic.
2. **Semantic Analysis**: Perform semantic analysis on the input program to ensure that any side effects in the header do not affect the overall program.
3. **No NOP Requirement**: The requirement for NOP instructions does not apply to most shellcode, as shellcode generally does not consider the effect of flags.

#### Large Input Programs
Given two input programs \( b_1 \) and \( b_2 \), a simple way to create a PIP is to generate \( h || b_1 || b_2 \), where \( h \) is a gadget header that identifies the running platform. However, this approach does not demonstrate a Turing-complete PIP scenario. A practical issue is that it may not be possible to find a header \( h \) with a jump target large enough to skip over \( b_1 \) to execute \( b_2 \). This problem can be solved by inserting a long jump trampoline that eventually leads to executing \( b_1 \) on machine \( m_1 \) and \( b_2 \) on machine \( m_2 \). This technique can be easily applied in RG (the generator).

#### Indirect Jumps and Self-Modifying Code
Our current prototype does not handle indirect jumps (e.g., `jmp *eax`) and self-modifying code. Both cases require additional analysis or techniques to ensure the jump target is correct. For instance, indirect jumps can be managed if we know the jump targets, using an analysis like VSA [5]. Alternatively, a run-time monitor could be included in the PIP to "fix up" jumps at run-time. These extensions involve more static and dynamic analysis than the fundamental possibility of automatic PIP generation, and thus are left for future work.

#### Generating Platforms
In our approach, we create a single program that exhibits different behaviors depending on the platform. A related problem is generating a new platform (e.g., an emulator or instruction set update) such that the same program string has a predetermined different behavior. For example, Intel could use such a procedure to design a micro-code update to turn a pre-determined program into malware. We leave these questions as open problems for future work.

### 6.4 Execution-Based Steganography
Recall from Section 1, the security scenarios where a PIP hides its execution behavior, e.g., execution-based steganography. To demonstrate the feasibility of these scenarios, we generated a PIP that acts as a simple "hello world" on ARM but as a virus on x86. We first created a virus for x86 (RG.poc) from scratch, which infects ELF files on the system whenever it executes. Then, we fed the virus into our PI generator along with a "hello world" program compiled for ARM to generate a PIP. The resulting PIP acts as a simple virus on x86. If we change the ELF header of the PIP to indicate the file is for ARM, the program runs as a simple "hello world" program on ARM. It is straightforward to generate a platform-independent virus by substituting the ARM virus for the "hello world" program. Thus, we conclude that both hiding the execution behaviors of a program and creating platform-independent viruses by generating a PIP are possible.

### 6.5 Performance Comparison
We measured the running time for executing three PIPs on x86 and ARM: the prime checker, "hello world," and localshell (from the previous sections). We ran "hello world" and the localshell 100 times on ARM and 1000 times on x86 in a loop to measure the time, averaging the results over 10 runs. Figure 7 shows the run-time performance on our x86 Pentium D machine, with native x86 as the baseline. We ran the PIP natively and the native ARM using a QEMU emulator on the same machine. The results show an average performance degradation of 0.1% on x86 and 5.5% on ARM. We attribute the greater performance degradation on ARM to the QEMU's emulation overhead. Therefore, we conclude that PIPs do not significantly degrade performance.

### 7. Related Work

#### Multi-Platform Executables
Significant effort has been directed towards running executables on multiple platforms. There are several approaches, including FatELF, Universal Binaries, and binary translation techniques. These methods aim to create a single executable that can run on different architectures or operating systems.

#### Binary Translation
Binary translation involves converting the binary code of one architecture to another. Techniques like Codesurfer/x86 [5] and dynamic binary translation [9] have been developed to achieve this. These methods often include optimization and analysis to ensure the translated code is efficient and correct.

#### Steganography
Steganography involves hiding information within other data. Cachin [6] and Hopper et al. [12] have proposed models and techniques for secure steganography. Our work extends this by focusing on hiding execution behavior rather than just data.

#### Polymorphic and Self-Modifying Code
Polymorphic and self-modifying code are used to evade detection by altering their appearance or behavior. Kolesnikov and Lee [13] and Mason et al. [14] have explored advanced polymorphic worms and English shellcode, respectively. Our work builds on these concepts to create PIPs that can exhibit different behaviors on different platforms.

### 9. Conclusion
In this paper, we have developed techniques for automatically generating a single program string that can run on multiple architectures. The central security implications of our algorithm are that the results of any static or dynamic analysis must be prefaced with the assumed platform. These implications lead directly to new security scenarios, such as execution-based steganography and rogue updates affecting security. Our techniques can also be used to ease cross-platform program (and shellcode) development. Finally, we show that, empirically, the amount of overlap between instruction sets means PIPs are likely hard to detect.

### 10. Acknowledgements
We thank Richard (Drew) Dean, Virgil D. Gligor, Melanie Thompson, and the anonymous reviewers for their helpful feedback. We also thank Jessica K. Hodgins, Lujo Bauer, and Raj Rajkumar for providing the variety of hardware needed for this paper. The authors were supported in part by funding from CMU CIT’s Dean Fellowship.

### References
[1] exploit-db. http://www.exploit-db.com/.
[2] FatELF. http://icculus.org/fatelf/.
[3] A. Appel. Modern Compiler Implementation in ML. Cambridge University Press, 1998.
[4] Apple. Universal binary programming guidelines. http://developer.apple.com/documentation/MacOSX/Conceptual/universal_binary/universal_binary.pdf.
[5] G. Balakrishnan, R. Gruian, T. Reps, and T. Teitelbaum. Codesurfer/x86 - a platform for analyzing x86 executables. In Proc. of the International Conference on Compiler Construction, Apr. 2005.
[6] C. Cachin. An information-theoretic model for steganography. In Proc. of the Second International Workshop on Information Hiding, pages 306–318, London, UK, 1998. Springer-Verlag.
[7] C. Cifuentes, M. V. Emmerik, and N. Ramsey. The design of a resourceable and retargetable binary translator. In Proc. of the 6th Working Conference on Reverse Engineering, pages 280–291, Oct. 1999.
[8] D. Dean. Personal email correspondence. Email exchange regarding prior work in multi-platform programs on August 4, 2009.
[9] K. Ebcioglu, E. Altman, M. Gschwind, and S. Sathaye. Dynamic binary translation and optimization. IEEE Transactions on Computers, 50(6):529–548, 2001.
[10] funkysh. Into my ARMs: Developing StrongARM/Linux shellcode. Phrack, 58, Dec. 2001.
[11] G. R. Gircys. Understanding and using COFF. O’Reilly & Associates, Inc., Sebastopol, CA, USA, 1988.
[12] N. Hopper, L. von Ahn, and J. Langford. Provably secure steganography. IEEE Trans. Comput., 58(5):662–676, 2009.
[13] O. Kolesnikov and W. Lee. Advanced polymorphic worms: Evading IDS by blending in with normal traffic. Technical Report GIT-CC-05-09, Georgia Institute of Technology, 2004.
[14] J. Mason, S. Small, F. Monrose, and G. MacManus. English shellcode. In Proc. of the 16th ACM conference on Computer and Communications Security, pages 524–533, New York, NY, USA, 2009.
[15] G. Neiger, A. Santoni, F. Leung, D. Rodgers, and R. Uhlig. Intel R® virtualization technology: Hardware support for efficient processor virtualization. Intel R® Technology Journal, 10(3):167–177, 2006.
[16] Nemo. Multi-arch shellcode. http://seclists.org/fulldisclosure/2005/Nov/387, 2005.
[17] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proc. of the 14th ACM Conference on Computer and Communications Security, pages 552–561, New York, NY, USA, 2007.
[18] G. J. Simmons. The prisoners’ problem and the subliminal channel. In Proc. of CRYPTO ’83, pages 51–67. Plenum Press, 1984.
[19] R. L. Sites, A. Chernoﬀ, M. B. Kirk, M. P. Marks, and S. G. Robinson. Binary translation. Commun. ACM, 36(2):69–81, 1993.
[20] A. Tevanian, M. DeMoney, K. Enderby, D. Wiebe, and G. Snyder. Method and apparatus for architecture independent executable files, 1993.
[21] CVE-2005-3252. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2005-3252, 2005.
[22] CVE-2010-0036. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0036, 2010.
[23] Y. Younan, P. Philippaerts, F. Piessens, W. Joosen, S. Lachmund, and T. Walter. Filter-resistant code injection on ARM. In Proc. of the 16th ACM conference on Computer and Communications Security, pages 11–20, New York, NY, USA, Nov. 2009.

### Appendix
```assembly
shellcode = "\x06\xeb\x55\x0e\x0f\x60\xa0\xe1\x32\x6e\x86\xe2\x06\xd0\xa0\xe1\x24\x70\x8f\xe2\x32\x7e\x47\xe2\x06\x60\x26\xe0\x32\x6e\x86\xe2\x07\x20\xd6\xe7\x30\x20\x82\xe2\x07\x20\xc6\xe7\x01\x60\x86\xe2\x4b\x0e\x56\xe3\xf9\xff\xff\xda\x06\x60\x26\xe0\xd2\xf0\xf2\xb0\xd1\xe0\x52\xb2\xd1\xd0\x51\xb2\xd1\x4c\x70\xb3\xe9\x40\x57\xb2\xd0\xd0\xd0\xbf\xeb\xd0\xd0\xba\x31\xc9\x83\xe9\xeb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xe8\x8e\x30\x01\x83\xeb\xfc\xe2\xf4\xd9\x55\x63\x42\xbb\xe4\x32\x6b\x8e\xd6\xa9\x88\x09\x43\xb0\x97\xab\xdc\x56\x69\xe7\xf2\x56\x52\x61\x6f\x5a\x67\xb0\xde\x61\x57\x61\x6f\xfd\x81\x58\xe8\xe1\xe2\x25\x0e\x62\x53\xbe\xcd\xb9\xe0\x58\xe8\xfd\x81\x7b\xe4\x32\x58\x58\xb1\xfd\x81\xa1\xf7\xc9\xb1\xe3\xdc\x58\x2e\xc7\xfd\x58\x69\xc7\xec\x59\x6f\x61\x6d\x62\x52\x61\x6f\xfd\x81\x0a\x90\x90\x90\xd0\x20\x70\xb1\xd1\xe0\xf1\xb0\xd2\xd0\xfd\xb9\xd0\xe0\x6f\xb5\xd0\xd0\xd0\xba\xd2\xd0\xf0\xd0\xd4\xe0\xfd\xb5\xdd\xe0\x70\xb1\xd2\xd0\x70\xb1\xe0\xf0\x70\xb3\xd1\x40\x57\xb2\xd0\xd0\xd0\xbf\xd5\xd0\x70\xb1\xd1\xeb\x70\xb3\xe0\xf0\x70\xb3\xd2\x40\x57\xb2\xd0\xd0\xd0\xbf\xd5\xd0\x70\xb1\xd0\xe0\x70\xb3\xd0\xf0\x70\xb3\xd1\x40\x57\xb2\xd0\xd0\xd0\xbf\xd0\x20\x70\xb1\xd2\xe0\x70\xb3\x0f\x40\x70\xb3\xd0\xd0\xd0\xbf\xd5\xd0\x70\xb1\xd1\xe0\x70\xb3\xd0\xd0\xd0\xbf\xd5\xd0\x70\xb1\xd0\xe0\x70\xb3\xd0\xd0\xd0\xbf\xd0\xd0\xf0\xb0\xd1\xe0\xf1\xb0\xd2\xf0\xf2\xb0\xd4\xf0\xfd\xb5\xd0\x90\x6f\xb5\xd0\xd0\xd0\xba\xff\xff\x43\x38\xd4\x90\xfd\xb5\xd0\x90\x6f\xb5\xd0\xd0\xd0\xba\xff\x32\x39\x3e\xd4\x90\xfd\xb5\xdd\xd0\x70\xb1\xdb\x40\x70\xb3\xd0\xd0\xd0\xbf\xd0\xd0\x70\xb3\xd1\x40\x70\xb3\xd0\xd0\xd0\xbf"
```

**Figure 8: Example generated PI (ARM/x86) remote bind-shell shellcode.**

**Figure 9: Hexdump of a Hello World PI program for ARM, MIPS, and x86 (244 bytes).**

```plaintext
00000000  7f 45 4c 46 01 01 01 00  02 00 03 00 01 00 00 00  |.ELF............|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 01 00 00 00  |................|
00000020  00 80 04 08 f4 00 00 00  00 10 00 00 90 eb 3e 20  |.............> |
00000030  07 00 00 10 00 00 04 24  a4 0f 02 24 0c 00 00 00  |......$...$....|
00000040  f8 ff 11 04 00 00 00 00  72 6c 64 0a 90 90 90 90  |.........rld....|
00000050  ba 0c 00 00 00 b8 04 00  80 e8 e4 ff ff ff 48 65  |.............He|
00000060  64 0a 90 90 01 00 a0 e3  04 70 a0 e3 00 00 00 ef  |d.......p......|
00000070  00 00 00 ef 00 00 a0 e1  72 6c 64 0a 00 00 00 00  |..........rld...|
00000080  00 00 00 00 00 00 00 00  54 80 04 08 34 00 00 00  |........T...4...|
00000090  34 00 20 00 01 00 00 00  00 00 00 00 00 80 04 08  |4. .......T.....|
000000a0  f4 00 00 00 05 00 00 00  17 00 00 2a 16 00 00 3a  |...........*...:|
000000b0  21 28 e0 03 0c 00 06 24  a1 0f 02 24 0c 00 00 00  |!($...$...$....|
000000c0  48 65 6c 6c 6f 20 77 6f  eb 17 31 db 43 8b 0c 24  |Hello wo..1.C.$|
000000d0  00 00 cd 80 31 c0 40 cd  6c 6c 6f 20 57 6f 72 6c  |....1.@.llo Worl|
000000e0  18 10 8f e2 0c 20 a0 e3  00 00 a0 e3 01 70 a0 e3  |....... .p......|
000000f0  48 65 6c 6c 6f 20 57 6f  72 6c 64 0a 00 00 00 00  |Hello World....|
```

**Figure 9: Hexdump of a Hello World PI program for ARM, MIPS, and x86 (244 bytes).**