# 添加数据库服务
让**至**应用完全运行的下一步是添加一个数据库服务，该服务将托管**至**应用数据库。我们将在我们的 Kubernetes 集群中运行这个服务，但是在 AWS 的实际生产用例中，我通常建议使用关系数据库服务(RDS)。
定义数据库服务需要两个主要的配置任务:
*   创建持久存储
*   创建数据库服务
# 创建持久存储
我们的数据库服务的一个关键需求是持久存储，对于我们的单节点本地 Kubernetes 开发环境来说， [**hostPath**](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) 卷类型代表了提供简单持久存储需求的标准选项。
虽然您可以通过直接在卷定义中指定路径来非常容易地创建一个 **hostPath** 卷(参见位于[https://kubernetes . io/docs/concepts/storage/volumes/# hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath)的示例 pod 定义)，但是这种方法的一个问题是，它会对底层卷类型产生硬依赖，并且如果您想要删除 pod 和与卷相关联的数据，还需要手动清理。
Docker Desktop Kubernetes 支持的一个非常有用的特性是包含一个名为`docker.io/hostpath`的动态卷供应器，它会自动为您创建类型为 **hostPath** 的卷，该卷可通过默认的*存储类*获得，您可以通过运行`kubectl get sc`命令来查看:
```
> kubectl get sc
NAME                 PROVISIONER          AGE
hostpath (default)   docker.io/hostpath   2d
```
存储类提供了对底层卷类型的抽象，这意味着您的 pods 可以从特定类请求存储。这包括一般要求，如卷大小，而不需要担心底层卷类型。在 Docker Desktop 的情况下，默认存储类是开箱即用的，它使用 **hostPath** 卷类型来提供存储请求。
但是，稍后当我们使用 EKS 在 AWS 中设置 Kubernetes 集群时，我们将配置一个默认存储类，该类使用 AWS 弹性块存储(EBS)作为底层卷类型。采用这种方法意味着我们不需要更改 pod 定义，因为我们将在每个环境中引用相同的存储类。
If you are using minikube, a dynamic provisioner called `k8s.io/minikube-hostpath` provides similar functionality to the Docker hostpath provisioner, but mounts volumes under `/tmp/hostpath-provisioner`.
要使用存储类，而不是直接用 pod 定义指定卷类型，您需要创建一个*持久卷声明*，它提供了卷大小和访问模式等存储要求的逻辑定义。让我们定义一个持久的卷声明，但是在此之前，我们需要在 todobackend 存储库中建立一个名为`k8s/db`的新文件夹，它将存储我们的数据库服务配置:
```
todobackend> mkdir -p k8s/db todobackend> touch k8s/db/storage.yaml
```
在这个文件夹中，我们将创建一个名为`k8s/db/storage.yaml`的文件，其中我们将定义一个持久卷声明:
```
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: todobackend-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi         
```
我们在一个专用文件中创建索赔(称为`todobackend-data`)，因为这将允许我们独立管理索赔的生命周期。上例中没有包括的一个属性是`spec.storageClassName`属性——如果省略该属性，将使用默认存储类，但是请记住，您可以创建和引用自己的存储类。`spec.accessModes`属性指定了应该如何装载存储–对于 AWS 中的本地存储和 EBS 存储，我们一次只需要一个容器就可以读写卷，这包含在`ReadWriteOnce`访问模式中。
`spec.resources.requests.storage`属性指定持久卷的大小，在本例中，我们将其配置为 8 GB。
If you are using Docker for Windows, you will be prompted to share your C:\ with Docker the first time you attempt to use the Docker hostPath provisioner.
如果您现在使用`kubectl`部署持久卷声明，您可以使用`kubectl get pvc`命令查看您新创建的声明:
```
> kubectl apply -f k8s/db/storage.yaml
persistentvolumeclaim "todobackend-data" created
> kubectl get pvc
NAME               STATUS  VOLUME                                    CAPACITY  ACCESS MODES STORAGECLASS  AGE
todobackend-data   Bound   pvc-afba5984-9223-11e8-bc1c-025000000001  8Gi       RWO              hostpath      5s
```
您可以看到，当您创建持久卷声明时，会动态创建一个持久卷。使用 Docker Desktop 时，这实际上是在路径`~/.docker/Volumes//`中创建的:
```
> ls -l ~/.docker/Volumes/todobackend-data
total 0
drwxr-xr-x 2 jmenga staff 64 28 Jul 17:04 pvc-afba5984-9223-11e8-bc1c-025000000001
```
如果您使用的是 Windows Docker，而您使用的是 Linux 的 Windows 子系统，您可以创建一个指向 Windows 主机上`.docker`文件夹的符号链接:
```
> ln -s /mnt/c/Users//.docker ~/.docker
> ls -l ~/.docker/Volumes/todobackend-data
total 0
drwxrwxrwx 1 jmenga jmenga 4096 Jul 29 17:04 pvc-c02a8614-932d-11e8-b8aa-00155d010401
```
请注意，如果您按照[第 1 章](01.html)、*容器和 Docker 基础*中的说明为 Linux 设置了 Windows 子系统，那么您已经将`/mnt/c/Users//`配置为您的主目录，因此您不需要执行上面的配置。
# 创建数据库服务
现在我们已经创建了一个持久的卷声明，我们可以定义数据库服务了。我们将在`todobackend`存储库中一个名为`k8s/db/deployment.yaml`的新文件中定义数据库服务，在这里我们创建一个服务和部署定义:
```
apiVersion: v1
kind: Service
metadata:
  name: todobackend-db
spec:
  selector:
    app: todobackend-db
  clusterIP: None 
  ports:
  - protocol: TCP
    port: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todobackend-db
  labels:
    app: todobackend-db
spec:
  selector:
    matchLabels:
      app: todobackend-db
  template:
    metadata:
      labels:
        app: todobackend-db
    spec:
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: todobackend-data
      containers:
      - name: db
        image: mysql:5.7
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "mysqlshow -h 127.0.0.1 -u $(MYSQL_USER) -p$(cat /tmp/secrets/MYSQL_PASSWORD)"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        args:
        - --ignore-db-dir=lost+found
        env:
        - name: MYSQL_DATABASE
          value: todobackend
        - name: MYSQL_USER
          value: todo
        - name: MYSQL_ROOT_PASSWORD
          value: super-secret-password
        - name: MYSQL_PASSWORD
          value: super-secret-password
```
我们首先定义一个名为`todobackend-db`的服务，发布默认的 MySQL TCP 端口`3306`。请注意，我们指定了`None`的`spec.clusterIP`值，这将创建一个无头服务。无头服务对于单实例服务很有用，它允许 pod 的 IP 地址用作服务端点，而不是使用带有虚拟 IP 地址的 **kube-proxy** 组件，该组件只能对单个端点进行负载平衡。定义一个无头服务仍然会为该服务发布一个 DNS 记录，但是会将该记录与 pod IP 地址相关联，确保**todo back 和**应用可以通过名称连接到`todobackend-db`服务。然后，我们为`todobackend-db`服务创建一个部署，并定义一个名为`data`的卷，该卷映射到我们之前创建的持久卷声明，并装载到 MySQL 容器中的数据库数据目录(`/var/lib/mysql`)中。请注意，我们指定了`args`属性(相当于 Docker/Docker Compose 中的 CMD/command 指令)，该属性配置 MySQL 忽略`lost+found`目录(如果存在的话)。虽然这在使用 Docker Desktop 时不会成为问题，但在 AWS 中会成为问题，原因与前面 Docker Swarm 一章中讨论的相同。最后，我们创建一个类型为`exec`的活动探测器，它执行`mysqlshow`命令来检查到 MySQL 数据库的连接是否可以在 MySQL 容器中本地建立。因为 MySQL 机密位于一个文件中，所以我们将 MySQL 命令包装在一个 shell 进程中(`/bin/sh`)，这允许我们使用`$(cat /tmp/secrets/MYSQL_PASSWORD)`命令替换。
Kubernetes allows you resolve environment variables at execution time by using the syntax `$()`. For example, the `$(MYSQL_USER)` value included in the preceding liveness probe will be resolved to the environment variable `MYSQL_USER` when the probe is executed. See [https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#use-environment-variables-to-define-arguments](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#use-environment-variables-to-define-arguments) for more details.
如果您现在部署数据库服务和部署资源，您可以使用`kubectl get svc`和`kubectl get endpoints`命令来验证您的无头服务配置:
```
> kubectl apply -f k8s/db/deployment.yaml
service "todobackend-db" created
deployment.apps "todobackend-db" created
> kubectl get svc NAME                 TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes           ClusterIP      10.96.0.1               443/TCP        8h
todobackend          LoadBalancer   10.103.210.17   localhost     80:31417/TCP   1d
todobackend-db       ClusterIP      None                    3306/TCP       6s
> kubectl get endpoints
NAME             ENDPOINTS                       AGE
kubernetes       192.168.65.3:6443               2d
todobackend      10.1.0.44:8000,10.1.0.46:8000   1d
todobackend-db   10.1.0.55:3306                  14s
```
请注意，`todobackend-db`服务部署的集群 IP 为 none，这意味着服务的发布端点是`todobackend-db` pod 的 IP 地址。
您还可以通过在本地主机上的`~/.docker/Volumes/todobackend-data`中列出物理卷目录的内容来验证数据卷是否已正确创建:
```
> ls -l ~/.docker/Volumes/todobackend-data/pvc-afba5984-9223-11e8-bc1c-025000000001
total 387152
-rw-r----- 1 jmenga wheel 56 27 Jul 21:49 auto.cnf
-rw------- 1 jmenga wheel 1675 27 Jul 21:49 ca-key.pem
...
...
drwxr-x--- 3 jmenga wheel 96 27 Jul 21:49 todobackend
```
如果您现在只删除数据库服务和部署，您应该能够验证持久卷没有被删除并保持不变，这意味着您可以重新创建数据库服务并重新连接到`data`卷而不会丢失数据:
```
> kubectl delete -f k8s/db/deployment.yaml
service "todobackend-db" deleted
deployment.apps "todobackend-db" deleted
> ls -l ~/.docker/Volumes/todobackend-data/pvc-afba5984-9223-11e8-bc1c-025000000001
total 387152
-rw-r----- 1 jmenga wheel 56 27 Jul 21:49 auto.cnf
-rw------- 1 jmenga wheel 1675 27 Jul 21:49 ca-key.pem
...