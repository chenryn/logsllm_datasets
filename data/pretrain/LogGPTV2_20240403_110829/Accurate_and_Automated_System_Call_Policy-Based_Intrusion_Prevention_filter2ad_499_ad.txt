### 3. Security Analysis

#### 3.1 Resistance to Code Injection Attacks

Code injection attacks typically exploit buffer overflows to overflow the arguments of a single system call. PAID mitigates these vulnerabilities through advanced system call argument checks and the random insertion of null system calls, significantly reducing its susceptibility to such attacks. If an attacker can directly manipulate dynamic-variable-type system call arguments for sensitive system calls, PAID may not prevent this type of data attack. However, such attacks are extremely rare in practice. Moreover, under PAID’s extensive system call argument checks, the likelihood of such attacks succeeding is even further reduced.

### 4. Performance Evaluation

#### 4.1 Prototype and Methodology

The current PAID compiler is based on GCC 3.1 and GNU ld 2.11.94 (linker), and it runs on RedHat Linux 7.2. It can successfully compile the entire GLIBC (version 2.2.5) and production-mode network server programs like Apache and Wu-ftpd. For this study, we used the network server applications listed in Table 1 and compared PAID’s performance and space requirements with those running under GCC 3.1 and Red Hat Linux 7.2, which represent the baseline case. To analyze detailed performance overhead, we conducted each experiment in two different configurations: plain PAID that only uses CSFGs (plain PAID), and PAID with both random null system calls and input argument checks (argument/random PAID).

To test the performance of each server program, we used two client machines to continuously send 2000 requests to the tested server program. The throughput of a network server application was calculated by dividing 2000 by the time interval between the first request and the termination of the last request. The latency was calculated by taking the average of the response time measurements for the 2000 requests.

The server machine used was a 1.5-GHz P4 with 256MB of memory. One client machine was a 300-MHz P2 with 128MB of memory, and the other client was a 1.1-GHz P3 with 512MB of memory. They were connected through an isolated 100Mbps Ethernet link. All machines ran RedHat Linux 7.2. For testing HTTP and FTP servers, the client machines continuously fetched a 60-KByte file from the server, and the two client programs were started simultaneously. For the POP3 server, the clients checked emails and retrieved a 60-KByte email from the server. All client programs were modified to send 2000 requests continuously to the server. To speed up the request sending process, client programs discarded the data returned from the server. All network server programs tested were statically linked, and the GLIBC-2.2.5 library was recompiled using the PAID compiler.

| Program   | Qpopper  | Apache   | Wu-ftpd  | Proftpd  | Pure-ftpd |
|-----------|----------|----------|----------|----------|-----------|
| Plain PAID Latency Penalty | 9.666%   | 5.436%   | 8.341%   | 5.901%   | 5.614%    |
| Argument/Random PAID Latency Penalty | 13.020%  | 6.918%   | 9.074%   | 8.233%   | 8.358%    |
| Plain PAID Throughput Penalty | 8.815%   | 5.158%   | 7.699%   | 5.572%   | 5.316%    |
| Argument/Random PAID Throughput Penalty | 11.520%  | 6.470%   | 8.319%   | 7.601%   | 7.713%    |

**Table 2. Latency and Throughput Penalties of Each Network Application Compiled Under Different PAID Configurations Compared to the Baseline Case.**

#### 4.2 Performance Overhead

PAID adds an extra .csfg section to an application’s binary image to store all CSFGs. Due to the .csfg section and the notify system call insertion, the binary image of a network application compiled under the PAID compiler is larger than that compiled under GCC. The binary image space overhead for the test applications ranges from 59.78% to 109.10% when compiled under plain PAID, and from 60.01% to 110.54% when compiled under argument/random PAID, as shown in Table 1. Most of the space overhead is due to the .csfg section, whose absolute size ranges from 337,856 bytes to 935,440 bytes for the argument/random version of PAID. Additionally, a 2-Mbyte saved stack data structure is allocated for each application to store the return addresses. In total, each application requires less than 3Mbytes of extra address space to work under PAID.

The performance overhead of PAID mainly comes from stack transition checks, argument checks, and the decision logic required to move to the next CSFG state. We measured the average additional processing overhead of each system call due to these checks, and the results are 5.98%, 6.6%, 7.73%, 9.12%, and 10.02% for Apache, Pure-ftpd, Proftpd, Wu-ftpd, and Qpopper, respectively. The overall latency and throughput penalties of PAID compared to the base case (generic GCC/Linux) are shown in Table 2. The overall latency penalty of plain PAID ranges from 5.436% (Apache) to 9.666% (Qpopper), and the throughput penalty ranges from 5.158% (Apache) to 8.815% (Qpopper). These results show that PAID’s run-time performance overhead is quite reasonable. This is also true for the argument/random PAID configuration. The latency penalty for argument/random PAID ranges from 6.918% (Apache) to 13.02% (Qpopper), and the throughput penalty ranges from 6.47% (Apache) to 11.52% (Qpopper). Compared to plain PAID, argument/random PAID incurs more overhead because each null system call inserted incurs expensive context switching overhead. As the number of null system calls increases, this overhead also increases, but the strength of protection against mimicry attacks improves as attack codes are forced to follow more closely the application’s original execution flow.

The largest number of stack frames that ever appear in the worst-performing test program, Qpopper, is 15. For other tested programs, the stack size rarely exceeds 20, with the common stack frame size between 3 and 10. This stack size distribution shows that for common network applications, PAID’s run-time verifier does not need to traverse a large portion of the CSFG for each system call instance, which is why PAID’s throughput and latency penalties are relatively modest.

| Application | Qpopper  | Apache   | Wu-ftpd  | Proftpd  | Pure-ftpd |
|-------------|----------|----------|----------|----------|-----------|
| System Call Sites | 38       | 26       | 54       | 13       | 54        |
| Total Arguments | 76       | 51       | 102      | 25       | 82        |
| Static Constants | 50       | 23       | 60       | 17       | 30        |
| Dynamic Constants | 5        | 4        | 5        | 4        | 4         |
| Dynamic Variables with Constraints | 8        | 5        | 9        | 4        | 7         |
| Dynamic Variables without Constraints | 11       | 9        | 16       | 11       | 16        |

**Table 3. Effects of System Call Argument Analysis.**

#### 4.3 Effectiveness of System Call Argument Analysis

We tested the effectiveness of PAID’s system call argument analysis mechanism on the following ten critical system calls: `open`, `execve`, `create`, `chdir`, `rename`, `mkdir`, `ioctl`, `link`, `unlink`, and `chroot`, as well as two wrapper system calls, `fopen` and `system`. Table 3 shows the results of applying the system call argument analysis to five network programs. Between 50% to 84% of all system call arguments are static constants, dynamic constants, or dynamic variables with constraints, depending on the application. This result demonstrates that system call argument analysis can indeed serve as a powerful tool to defeat mimicry attacks. Wu-ftpd and Apache have comparatively more dynamic constants than others, likely because they tend to retrieve operational information from configuration files or user input. Through our analysis, 21% to 59% of the variables whose values cannot be derived statically are either dynamic constants or variables with constraints.

Since all our test programs are network applications that process inputs from the network, it is unlikely that all system call argument values can be determined statically or at program initialization time. Surprisingly, Proftpd does not have any dynamic constants, and Pure-ftpd has a much higher percentage of system call arguments classified as dynamic variables. After examining the source code, we found two major reasons that prevent PAID from identifying their system call arguments as constants or constraints. First, Pure-ftpd uses customized string manipulation functions whose semantics are unknown to PAID, preventing constant propagation across these functions. Second, complicated program and data structures, such as function pointers and linked lists, prevent PAID from conducting precise slice analysis. Additionally, Pure-ftpd tends to invoke system calls right after receiving user inputs, using these inputs as system call arguments, resulting in many more dynamic variables than other applications.

### 5. Conclusion

This paper describes the design, implementation, and evaluation of PAID, a fully operational compiler-based host-based intrusion detection and prevention system. PAID can automatically derive a highly accurate system call model from the source code of an application and use it for intrusion detection with low run-time overhead. One key feature of PAID is its ability to exploit run-time information, specifically, the return address sequence on the user/kernel stack and results of notify system calls, to disambiguate the non-determinism inherent in a pure static analysis approach. Another unique feature of PAID is its ability to derive more precise constraints on the values of system call arguments than other existing systems. This paper presents the first quantitative measurements on the effectiveness of deriving system call argument constraints. These techniques effectively reduce the vulnerability window to mimicry attacks to a very small set of unlikely program patterns. As a result, PAID is one of the most comprehensive and efficient host-based intrusion detection systems in both research and commercial contexts. Performance measurements on a fully working PAID prototype show that the run-time latency and throughput penalties of PAID are under 13.02% and 11.52%, respectively, for a set of popular network applications, including the Apache web server, a POP3 server, and the wu-ftpd FTP daemon. This excellent performance improvement mainly comes from the fact that the system call model generated by the PAID compiler is very close to a DFA.

### References

[1] CERT Coordination Center. Cert summary cs-2003-01. http://www.cert.org/summaries/, 2003.

[2] H. H. Feng, J. T. Giffin, Y. Huang, S. Jha, W. Lee, and B. P. Miller. Formalizing sensitivity in static analysis for intrusion detection. In IEEE Symposium on Security and Privacy, Oakland, California, May 2004.

[3] H. H. Feng, O. M. Kolesnikov, P. Fogla, W. Lee, and W. Gong. Anomaly detection using call stack information. In Proceedings of the IEEE Symposium on Security and Privacy, pages 62–76, Berkeley, CA, May 2003. IEEE Press.

[4] J. T. Giffin, S. Jha, and B. P. Miller. Detecting manipulated remote call streams. USENIX Security Symposium, August 2002.

[5] J. T. Giffin, S. Jha, and B. P. Miller. Efficient context-sensitive intrusion detection. 11th Annual Network and Distributed System Security Symposium, February 2004. Codesurfer.

[6] GrammaTech, Inc. http://www.grammatech.com/products/codesurfer/.

[7] D. Grove and L. Torczon. Interprocedural constant propagation: A study of jump function implementations. In Proceedings of the ACM SIGPLAN 1993 conference on Programming language design and implementation, pages 90–99, 1993.

[8] S. Hofmeyr, S. Forrest, and A. Somayaji. Intrusion detection using sequences of system calls. Journal of Computer Security, 6(3), 1998.

[9] L. C. Lam and T. Chiueh. Automatic extraction of highly accurate application-specific sandboxing policy. In Seventh International Symposium on Recent Advances in Intrusion Detection, Sophia Antipolis, French Riviera, France, September 15-17 2004.

[10] R. Sekar, M. Bendre, P. Bollineni, and D. Dhurjati. A fast automaton-based method for detecting anomalous program behaviors. IEEE Symposium on Security and Privacy, pages 144–155, 2001.

[11] D. Wagner and D. Dean. Intrusion detection via static analysis. In Proceedings of the IEEE Symposium on Security and Privacy, pages 156–169, Oakland, CA, May 2001. IEEE Press.

[12] D. Wagner and P. Soto. Mimicry attacks on host-based intrusion detection systems. In Proceedings of the 9th ACM Conference on Computer and Communications Security, November 2002.

[13] C. Warrender, S. Forrest, and B. Pearlmutter. Detecting intrusions using system calls: Alternative data models. In 1999 IEEE Symposium on Security and Privacy, pages 133–145, Oakland, California, May 1999.

[14] M. N. Wegman and F. K. Zadeck. Constant propagation with conditional branches. ACM Transactions on Programming Languages and Systems, 13(2):181–210, April 1991.