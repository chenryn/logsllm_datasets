Γ; ∆, (A says F ) true ` A aﬃrms G
(saysL)
Γ; ∆, F true ` A aﬃrms G
Γ; ∆, A signed F ` A aﬃrms G
(signed)
Γ; ∆, F true ` A aﬃrms G
Γ; ∆, A signedA0 F ` A aﬃrms G
(signedL)
Figure 3. Summary of the logic
A. Summary of the Logic
This section summarizes our logic and a cut-elimination
theorem for it. See [30] for details of a closely related logic.
The standard connectives have been omitted to save space.
Theorem 1 (Admissibility of cut). The following hold in
the logic described above.
1. If Γ; ∆1 ` A true and Γ; ∆2, F true ` γ, then
Γ; ∆1∆2 ` γ.
2. If Γ; · ` F true and Γ, F valid; ∆ ` γ, then Γ; ∆ `
γ.
3. If Γ; ∆1 ` A aﬃrms F and Γ; ∆2, F true `
A aﬃrms G, then Γ; ∆1∆2 ` A aﬃrms G.
Proof. By nested induction, ﬁrst on the size of the cut for-
mula and then on the size of the two given derivations.
B. Sample Proofs
B.1. One-Time Delegation
This example extends the current framework already in
place at our institution (see Section 7). The two parties
involved, Bob and Alice, both carry smartphones capable
of generating proofs of access and communicating with the
embedded doorend computers. Bob is a graduate student
working for Alice. Alice is out of town, but Bob needs to
get into her ofﬁce to borrow a book. Alice would like to del-
egate to Bob the authority to open her door once, but only
once. After Bob has used the delegation to open the door, he
cannot use it again. In the current system, such a delegation
is impossible.
In order to let Bob get into her ofﬁce, (CIC-2525), Alice
creates a consumable credential.
C0 = Alice signedRAlicedelegate (Alice, Bob, CIC 2525 )
Bob now walks up to Alice’s door and asks it to open. The
door responds with a challenge.
G = Alice says (action(CIC 2525 , hopeni, nonce)) true
The challenge includes a nonce, generated by the doorend
computer, that will be used to ensure freshness of the re-
sponse. Bob then generates the following credential.
C1 = Bob signed action(CIC 2525 , hopeni, nonce)
From C0 and C1, Bob can construct a proof of
M : Alice says (action(CIC 2525 , hopeni, nonce)) true
C1 ; action(. . .) true ` action(. . .) true
hyp
C1 ; action(. . .) true ` Bob aﬃrms action(. . .)
C1 ; C1 ` Bob aﬃrms action(. . .)
C1 ; · ` Bob aﬃrms action(. . .)
C1 ; · ` Bob says action(. . .) true
copy0
saysR
aff
signed
C1 ; action(. . .) true ` action(. . .) true
hyp
C1 ; action(. . .) true ` Alice aﬃrms action(. . .)
aff
C1 ; Alice says action(. . .) true ` Alice aﬃrms action(. . .)
C1; delegate (Alice, Bob, CIC 2525 ) true ` Alice aﬃrms action(. . .)
C1 ; C0 ` Alice aﬃrms action(CIC 2525 , hopeni, nonce)
C1 ; C0 ` Alice says action(CIC 2525 , hopeni, nonce) true
saysR
signedL
saysL
delegate
Figure 4. Proof of Alice says action(...) true
which he submits for ratiﬁcation. If this is the ﬁrst time Bob
has tried to use the delegation, his request will be ratiﬁed,
and he will receive a ratiﬁcation credential.
C2 = RAlice signed(delegate (Alice, Bob, CIC 2525 ), M,
Alice says action(CIC 2525 , hopeni, nonce))
Bob can then append this credential to the others he col-
lected during proof construction and submit them, along
with the proof, to the doorend computer. The computer, af-
ter checking the signatures and populating its environments
will check that the proof goal is in fact satisﬁed by the cre-
dentials submitted, and if so will open the door for Bob.
C0 = Alice signedRAlicedelegate (Alice, Bob, CIC 2525 )
C1 = Bob signed action(CIC 2525 , hopeni, nonce)
C2 = RAlice signed hdelegate (Alice, Bob, CIC 2525 ), M,
Alice says action(CIC 2525 , hopeni, nonce)i
A simpliﬁed version of the proof derivation is presented in
Figure 4. It is easiest read from bottom up.
B.2. Commerce
The following is an example proof of Alice paying Bob
$100. In order for the payment to be accepted, Alice must
generate a proof that the Automated Clearing House (ACH)
says action(pay, hBob, $100i, nonce).
In order to initiate a purchase, the buyer (Alice) requests
from the seller (Bob), the items in her shopping cart. Bob
responds with a challenge to prove the goal
G = ACH says action(pay , hBob, $100i, nonce) true
Bob generates the nonce to ensure freshness, ensure that the
ratiﬁcation credentials are issued with respect to this proof,
and also to act as a transaction identiﬁer. First, Alice gen-
erates credential C0. During proof generation, Alice obtains
credentials C1–C5. Using these she will generate a proof,
which she will submit to BankA’s ratiﬁer for him to generate
the ﬁnal necessary credential (C6). Once Alice has all of the
credentials, she submits the proof and credentials to Bob.
Bob will verify that the credentials are valid, and check that
all consumable credentials have ratiﬁcation credentials and,
after populating his environments, that the proof is correct.
If the veriﬁcation succeeds, Bob will release the articles in
Alice’s shopping cart.
C0 = Alice signed (action(pay, hBob, $100i, nonce))
C1 = BankA signed (Alice speaksfor BankA.Alice)
C2 = ACH.BC signed (BankA speaksfor ACH.BC.BankA)
C3 = ACH signed (delegate (ACH, ACH.BC, pay))
C4 = ACH.BC signed (delegate (ACH.BC, ACH.BC.BankA, pay))
C5 = BankA signedRBankA (delegate (BankA, BankA.Alice, pay))
C6 = RBankA signed hdelegate (BankA, BankA.Alice, pay), M,
KACH says action(pay, hBob, $100i, nonce)i
Credential C0, signiﬁes Alice’s willingness to pay Bob.
Credentials C1, and C2 create speaksfor relationships be-
tween Alice and her bank, and between the bank and the
Bank Certiﬁer (BC) of the ACH. Credential C3 and C4 es-
tablish the delegation chain from the ACH through its Bank
Certiﬁer to Alice’s bank (BankA), the authority to make pay
statements.
Credential C5 is a consumable delegation from the bank
to Alice. This credential requires ratiﬁcation with respect to
the proof of
M : ACH says action(pay , hBob, $100i, nonce) true
after which Alice will get ratiﬁcation credential C6, which
she submits along with the proof to Bob for veriﬁcation.
Again, the proof in Figure 5 is easiest to read from the
bottom up, starting with the unlabeled proof tree.
B.3. Registration
Here we present an example utilizing consumable cre-
dentials in the framework of class registration. Consumable
credentials are used both to limit the number of students
signing up for a class, and to ensure that any class a student
is trying to register for does not conﬂict with other classes
he is already taking. This is done by modeling both the seats
in a class and the timeslots in a weekly schedule as con-
sumable resources. Additionally, students are allowed to
D4 :
C0−4; action(. . .) true ` action(. . .) true
hyp
C0−4; action(. . .) true ` Alice aﬃrms action(. . .)
C0−4; C0 ` Alice aﬃrms action(. . .)
C0−4; C0 ` Alice says action(. . .) true
C0−4; · ` Alice says action(. . .) true
saysR
copy0
aff
signed
C0−4; action(. . .) true ` action(. . .) true
hyp
C0−4; action(. . .) true ` BankA.Alice aﬃrms action(. . .)
aff
C0−4; BankA.Alice says action(. . .) true ` BankA.Alice aﬃrms action(. . .)
C0−4; A1 ` BankA.Alice aﬃrms action(. . .)
saysL
speaksfor
D3 :
D2 :
D4
C0−4; A1 ` BankA.Alice aﬃrms action(. . .)
C0−4; A1 ` BankA.Alice says action(. . .) true
saysR
C0−4; action(. . .) true ` action(. . .) true
hyp
C0−4; action(. . .) true ` BankA aﬃrms action(. . .)
aff
C0−4; BankA says action(. . .) true ` BankA aﬃrms action(. . .)
C0−4; A1, delegate (BankA, BankA.Alice, pay) true ` BankA aﬃrms action(. . .)
C0−4; C5, A1 ≡ (Alice speaksfor BankA.Alice true) ` BankA aﬃrms action(. . .)
C0−4; C5, C1 ` BankA aﬃrms action(. . .)
signedL
signed
saysL
delegate
D3
C0−4; C5, C1 ` BankA aﬃrms action(. . .)
C0−4; C5, C1 ` BankA says action(. . .) true
C0−4; C5 ` BankA says action(. . .) true
saysR
copy0
C0−4; action(. . .) true ` action(. . .) true
hyp
C0−4; action(. . .) true ` ACH.BC.BankA aﬃrms action(. . .)
aff
C0−4; ACH.BC.BankA says action(. . .) true ` ACH.BC.BankA aﬃrms action(. . .)
C0−4; C5, A2 ` ACH.BC.BankA aﬃrms action(. . .)
saysL
speaksfor
D1 :
D2
C0−4; C5, A2 ` ACH.BC.BankA aﬃrms action(. . .)
C0−4; C5, A2 ` ACH.BC.BankA says action(. . .) true
saysR
C0−4; action(. . .) true ` action(. . .) true
hyp
C0−4; action(. . .) true ` ACH.BC aﬃrms action(. . .)
aff
C0−4; ACH.BC says action(. . .) true ` ACH.BC aﬃrms action(. . .)
C0−4; C5, A2, delegate (ACH.BC, ACH.BC.BankA, pay) true ` ACH.BC aﬃrms action(. . .)
C0−4; C5, C4, A2 ≡ (BankA speaksfor ACH.BC.BankA true) ` ACH.BC aﬃrms action(. . .)
C0−4; C5, C4, C2 ` ACH.BC aﬃrms action(. . .)
signed
signed
saysL
delegate
D1
C0−4; C5, C4, C2 ` ACH.BC aﬃrms action(. . .)
C0−4; C5, C4, C2 ` ACH.BC says action(. . .) true
C0−4; C5, C4 ` ACH.BC says action(. . .) true
C0−4; C5 ` ACH.BC says action(. . .) true
saysR
copy0
copy0
C0−4; action(. . .) true ` action(. . .) true
hyp
C0−4; action(. . .) true ` ACH aﬃrms action(. . .)
aff
C0−4; ACH says action(. . .) true ` ACH aﬃrms action(. . .)
C0−4; C5, delegate (ACH, ACH.BC, pay) true ` ACH aﬃrms action(. . .)
C0−4; C5, C3 ` ACH aﬃrms action(pay, hBob, $100i, nonce)
C0−4; C5, C3 ` ACH says action(pay, hBob, $100i, nonce) true
C0−4; C5 ` ACH says action(pay, hBob, $100i, nonce) true
saysR
copy0
signed
Figure 5. Proof of ACH says action(...) true
saysL
delegate
C0 = Calendar signedRCal action(timeslot, hAlice, F 005 , Monday, 0800 –0900 i)
C1 = Calendar signedRCal action(timeslot, hAlice, F 005 , Wednesday, 0800 –0900 i)
C2 = Calendar signedRCal action(timeslot, hAlice, F 005 , Friday, 0800 –0900 i)
C3 = Registrar signedRSeat action(seat , hF 005 , CS101 i, nonce)
C4 = Registrar signedRCreditdelegate (Registrar, Alice, credit hours)
C5 = Alice signed action(credit hours, hAlice, F 005 , 4 creditsi, nonce)
C6 = Registrar signed (∀A.(Calendar says action(timeslot , hA, F 005 , Monday, 0800 –0900 i)
∧ Calendar says action(timeslot, hA, F 005 , Wednesday, 0800 –0900 i)
∧ Calendar says action(timeslot, hA, F 005 , Friday, 0800 –0900 i)
∧ Registrar says action(seat , hF 005 , CS101 i, nonce)
∧ Registrar says action(credit hours, hA, F 005 , 4 creditsi, nonce))
→ action(register , hA, CS101 , F 005 , 4 creditsi, nonce))
C7 = RCal signed haction(timeslot, hAlice, F 005 , Monday, 0800 –0900 i), M,
Registrar says action(register , hAlice, CS101 , F 005 , 4 credits i, nonce)i
C8 = RCal signed haction(timeslot, hAlice, F 005 , Wednesday, 0800 –0900 i), M,
Registrar says action(register , hAlice, CS101 , F 005 , 4 credits i, nonce)i
C9 = RCal signed haction(timeslot, hAlice, F 005 , Friday, 0800 –0900 i), M,
Registrar says action(register , hAlice, CS101 , F 005 , 4 credits i, nonce)i
C10 = RSeat signed haction(seat , hF 005 , CS101 i, nonce), M,
Registrar says action(register , hAlice, CS101 , F 005 , 4 credits i, nonce)i
C11 = RCredit signed hdelegate (Registrar, Alice, credit hours), M,
Registrar says action(register , hAlice, CS101 , F 005 , 4 credits i, nonce)i
Figure 6. Credentials that allow Alice to register for a class
take only a limited number of credit hours in each semester.
Each student must, therefore, also prove that by adding this
class to their schedule, they will not surpass that limit. As-
suming all these things are true, the student should be able
to generate the necessary proof to register for a class.
Alice wants to register for CS101, which meets on Mon-
day, Wednesday, and Friday from 8:00 to 9:00 AM. To do
so, she contacts the registrar, requesting that she be placed
in the class. The registrar responds with a challenge to
prove:
G = Registrar says action
(register , hAlice, CS101 , F 005 , 4 creditsi, nonce) true
When Alice’s registration period began, she was given
credentials C0–C2, (see Figure 6) along with similar ones
for all weekly timeslots. The registrar, being in charge of
seat assignments, also gave Alice credential C3. She ob-
tained credential C4 during proof generation, and generated
credential C5 herself. The registrar also gave her creden-
tial C6, specifying a subgoal that Alice must prove before
registration.
This last credential can be thought of as requiring the
student to be free on Monday, Wednesday, and Friday from
8:00 to 9:00 AM, a free seat to be available in the class,
and the student to have 4 available credit hours for which
they may sign up. Note that we omit nonces from action()
statements where they are unnecessary (e.g., C0–C2).
Alice now has enough credentials to prove
M : Registrar says action
(register , hAlice, CS101 , F 005 , 4 creditsi, nonce) true
She then submits this proof for ratiﬁcation of the consum-
able credentials it contains. Assuming all of the ratiﬁers
consent to the use of their credentials, Alice will receive
credentials C7–C11, allowing her to complete the proof.
The full proof is similar to those done in Appendices B.1
and B.2, though much larger. We do not show the full proof
here. Upon checking the proof, the registrar would then
register Alice for CS101, as desired.