is a valid signature on message m. If the veriﬁcation
fails, Bob aborts. If it succeeds, he outputs σ.
On the Structure of the Consistency Check: Because the
consistency check mechanism is non-obvious, we present an
informal justiﬁcation for it here. In the full version of this
paper, we prove the mechanism formally secure. Suppose that
we reorganized our protocol to omit Alice’s pad φ. Then we
would have
A + ˆt1
ˆt1
1
B =
kA · kB
( ˆt1
A + ˆt1
t2
A + t2
B) · pk = (t2
A + t2
B =
B) · G
skA · skB
kA · kB
If Bob behaves honestly, he should use 1/kB and skB/kB
as his inputs to the two multiplications. Suppose Bob cheats
by using different inputs; without loss of generality, we can
interpret his cheating as using inputs x + 1/kB and skB/kB, in
essence offsetting his input for the ﬁrst multiplication by some
value x relative to his input for the second multiplication:
A + ˆt1
ˆt1
B) · pk = (t2
( ˆt1
A + ˆt1
B = 1/k + x/kA
A + t2
B) · G + x · pk/kA
It is tempting to take advantage of the fact that ( ˆt1
and in order to pass the consistency check, Bob would need
to calculate pk/kA, for which the information in his view is
not sufﬁcient.
B) ·
A + ˆt1
R = G to design a similar mechanism to verify that the ﬁrst
multiplication is consistent with the instance key exchange,
but a check based upon this principle is insecure. Again, if
we suppose that Bob cheats by offsetting his input for the
multiplication by some value x relative to his input for the
Difﬁe-Hellman exchange that produces R, then
A + ˆt1
ˆt1
B = 1/k + x/kA
985
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
 Common Inputs
m ∈ {0,1}*
pk  ∈ G
Alice
Bob
 Private Input
 Algorithm
skA ∈ Z
A ← Z
q
q
φ,  k'
 Private Input
 Algorithm
skB ∈ Z
B ← Z
k
q
q
 · D
B
A
R'  := k'
A := H(R' ) + k'
A
k
D
B
D
B := k
 · G
B
φ  + 1/k
A
t
1
A
A
skA/k
t
2
A
α
t
α
t
Mul
Mul
β
αβ − t
β
αβ − t
1/k
B
t
1
B
B
skB/k
t
2
B
R := H(R' ) · D
(r
y) = R
x, r
B
 + R' 
(r
x, r
y) = R := k
 · D
B 
A
· G−  t
1 · R  
ηφ := H(  Γ 1)+  φ
Γ 1 :=  G +φ  · k
A
A
m' := H(m)
 · t
2
A
x
1
A
sigA := m' · t
 + r
1 ·  pk −  t
2 ·  G
Γ 2 :=  t
A
η sig := H(  Γ 2)+  sigA
A
R' 
ηφ 
η sig 
1 · R  
B
B
1
B
Γ 1 := t
φ  := ηφ −H(  Γ 1)
 − φ/k
θ := t
m' := H(m)
sigB := m' · θ + r
 · t
2
B
2 ·  G −  θ ·  pk
Γ 2 :=  t
sig := sigB+ηsig −H(Γ 2)
x mod q)
B
x
σ := (sig mod q, r
abort if Verifypk(σ) /= 1
 Output
σ ∈ (Z
q,Z
q)
Fig. 1: Illustrated Two-party Signing Scheme. Operations are
color-coded according to the logical component with which
they are associated: Multiplication ,
Instance Key Exchange ,
Consistency Check , and Veriﬁcation/Signing . We specify how to
instantiate the multiplication subprotocol (πMul) in Section VI-C.
( ˆt1
A + ˆt1
B) · R = G + x · kB · G
Unfortunately, the offset produced is made up entirely of
elements known to Bob. We rectify this by introducing into the
equation a term that Bob cannot predict. Alice intentionally
offsets her input to the multiplication using a pad φ. If Bob is
honest, then
t1
A + t1
t1
B
B = 1/k + φ/kB
· R = G + φ · kA · G − t1
A
· R
986
which implies that both Alice and Bob can compute t1
B
On the other hand, if Bob is dishonest, then
B = 1/k + φ/kB + x/kA + x · φ
· R = G + φ · kA · G + x · kB · G + x · φ · R − t1
A + t1
t1
t1
B
A
· R.
· R
Because x is unknown to Alice and φ is unknown to Bob,
neither party is capable of calculating the offset that has been
induced. Consequently, if Alice masks φ using the value of
· R that she expects Bob to have, then he will be able to
t1
B
remove the mask and retrieve φ if and only if he has behaved
honestly. Without knowledge of φ, he will not be able to pass
the second consistency check or reconstruct the signature. We
note that there is an assumption of circular security in this
construction, which is resolved in our proofs via use of the
Random Oracle Model.
B. Setup
We now present a simpliﬁed setup protocol for two parties.
This protocol does not implement the setup phase of the
FSampledECDSA functionality, as it does not support threshold
signing, but it does provide a similar functionality to the setup
protocol of Lindell [2]. In short, it implements the ECDSA
Gen algorithm, combining multiplicative secret key shares via a
simple Difﬁe-Hellman [5] key exchange. Proofs of knowledge
are necessary in order to ensure that if the protocol completes
then the parties are capable of signing, and thus the protocol
makes use of both a direct zero-knowledge proof-of-knowledge-
of-discrete-logarithm functionality F RDL
ZK , and a commit-and-
prove variant F RDL
Com-ZK. These can be concretely instantiated by
Schnorr proofs [25] and the Fiat-Shamir [48] or Fischlin [49]
transforms. Finally, the protocol initializes the OT-extensions, a
process modeled by notifying the F (cid:4)
COTe functionality that the
parties are ready, and implemented using the πSetup
KOS subprotocol.
To sign successfully, Alice and Bob must remember the state
associated with the OT-extensions and their secret keys.
Protocol 2. Two-party Setup
This protocol is parameterized by the Elliptic curve (G, G, q),
and relies upon the F (cid:4)
Com-ZK functionalities.
It takes no input and yields the joint public key pk along
with a secret key share skA to Alice, and to Bob a secret key
share skB along with pk.
Public Key Generation:
1) Alice and Bob sample skA ← Zq and skB ← Zq,
..= skA · G and Bob calculates
:
ZK , and F RDL
COTe, F RDL
..= skB · G.
2) Alice calculates pkA
3) Alice submits (skA, pkA) to the functionality F RDL
and Bob becomes aware of Alice’s commitments.
4) Bob submits (skB, pkB) to the F RDL
ZK functionality, and
Alice receives pkB as output, along with a bit indicating
that the proof was sound. If it was not, Alice aborts.
respectively.
Com-ZK,
2P-ECDSA
πSetup
pkB
(cid:8)
(cid:9)
5) Alice instructs the F RDL
Com-ZK functionality to release the
proof associated with her previous commitment. Bob
receives pkA as output, along with a bit indicating that
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:03 UTC from IEEE Xplore.  Restrictions apply. 
the proof was sound. If it was not, Bob aborts.
6) Alice and Bob compute the public key
pk ..= skA · pkB = skB · pkA
Auxilliary Setup:
7) Alice and Bob both send the (ready) messages to the
F (cid:4)
COTe Functionality to initialize OT-extensions.
V. 2-OF-n THRESHOLD SIGNING
We now demonstrate a simple extension of our two-party
ECDSA protocol for performing threshold signatures among
n parties, with a threshold of two. In Protocol 2, Alice and
Bob supplied individual secret keys skA, skB, which became
multiplicative shares of their joint secret key. In the threshold
setting we will be working with a set of parties P of size n,
each party i with a secret key share ski, and we demand that
if the setup does not abort then any pair of parties can sign
under the joint sk.
In order to achieve this, we specify that in the threshold
setting, the joint secret key sk is calculated as the sum of the
parties’ contributions, rather than as the product:
(cid:10)
sk ..=
ski
i∈[1,n]
In other words, the parties’ individual secret keys represent an n-
of-n sharing of sk. It is natural to use a threshold secret sharing
scheme to convert these into a 2-of-n sharing. Speciﬁcally, we
use Shamir Secret Sharing [17], and a simple consistency check
allows us to guarantee security against malicious adversaries.
From Shamir shares, any two parties can generate additive
shares of the joint secret key. However, our 2-of-2 signing
protocol (Protocol 1) required multiplicative shares as its input.
We will need to modify the signing protocol slightly to account
for the change. First, we present our 2-of-n setup procedure.
A. Setup
(cid:8)
(cid:9)
:
π2P-Setup
nP-ECDSA
Protocol 3. 2-of-n Setup
This protocol is parameterized by the Elliptic curve (G, G, q),
and relies F (cid:4)
COTe and F RDL
Com-ZK functionalities. It runs among
a group of parties P of size n, from whom it takes no input.
It yields as output for all parties a joint public key pk, and
for each individual party Pi a point p(i) on the polynomial
p and a secret key share ski.
Public Key Generation:
1) For all i ∈ [1, n], Party Pi samples ski ← Zq.
2) For all i ∈ [1, n], Party Pi calculates pki
..= ski · G and
submits (ski, pki) to the F RDL
Com-ZK functionality, which
notiﬁes all other parties that Pi is committed. When
Pi becomes aware of all other parties’ commitments, it
instructs F RDL
Com-ZK to release its proof to the others. If
any party’s proof fails to verify, then all parties abort.
3) All parties compute the shared public key
(cid:10)
pk ..=
pki
i∈[1,n]
4) For all i ∈ [1, n], Pi chooses a random line given by the
degree-1 polynomial pi(x), such that pi(0) = ski. For
all j ∈ [1, n], Pi sends pi(j) to Pj and receives pj(i).
5) For all i ∈ [1, n], Pi computes its point on the joint
polynomial p,
(cid:10)
p(i) ..=
pj(i)
j∈[1,n]
It also computes a commitment to its share of the secret
key, Ti ..= p(i)· G, and broadcasts Ti to all other parties.
6) All parties abort if ∃i ∈ [2, n] such that
λ(i−1),i · Ti−1 + λi,(i−1) · Ti (cid:8)= pk
where λ(i−1),i and λi,(i−1) are the appropriate Lagrange
coefﬁcients for Shamir-reconstruction between Pi−1 and
Pi. If any party holds a point p(i) that is inconsistent
with the polynomial held by the other parties, then this
check will fail.
Auxilliary Setup:
7) Every pair of parties Pi and Pj such that i < j send the
COTe functionality to initialize
(ready) message to the F (cid:4)
OT-extensions between themselves.
A Note on General Thresholds: We note that a slight
generalization of the π2P-Setup