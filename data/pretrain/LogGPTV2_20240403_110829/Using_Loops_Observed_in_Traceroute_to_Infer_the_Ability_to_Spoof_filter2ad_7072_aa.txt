title:Using Loops Observed in Traceroute to Infer the Ability to Spoof
author:Qasim Lone and
Matthew J. Luckie and
Maciej Korczynski and
Michel van Eeten
Using Loops Observed in Traceroute
to Infer the Ability to Spoof
Qasim Lone1(B), Matthew Luckie2, Maciej Korczy´nski1, and Michel van Eeten1
1 Delft University of Technology, Delft, The Netherlands
{Q.B.Lone,Maciej.Korczynski,M.J.G.vanEeten}@tudelft.nl
2 University of Waikato, Hamilton, New Zealand
PI:EMAIL
Abstract. Despite source IP address spooﬁng being a known vulner-
ability for at least 25 years, and despite many eﬀorts to shed light on
the problem, spooﬁng remains a popular attack method for redirection,
ampliﬁcation, and anonymity. To defeat these attacks requires operators
to ensure their networks ﬁlter packets with spoofed source IP addresses,
known as source address validation (SAV), best deployed at the edge
of the network where traﬃc originates. In this paper, we present a new
method using routing loops appearing in traceroute data to infer inade-
quate SAV at the transit provider edge, where a provider does not ﬁlter
traﬃc that should not have come from the customer. Our method does
not require a vantage point within the customer network. We present
and validate an algorithm that identiﬁes at Internet scale which loops
imply a lack of ingress ﬁltering by providers. We found 703 provider ASes
that do not implement ingress ﬁltering on at least one of their links for
1,780 customer ASes. Most of these observations are unique compared
to the existing methods of the Spoofer and Open Resolver projects. By
increasing the visibility of the networks that allow spooﬁng, we aim to
strengthen the incentives for the adoption of SAV.
1 Introduction
Despite source IP address spooﬁng being a known vulnerability for at least 25
years [6], and despite many eﬀorts to shed light on the problem (e.g. [7–9]), spoof-
ing remains a viable attack method for redirection, ampliﬁcation, and anonymity,
as evidenced in February 2014 during a 400 Gbps DDoS attack against Cloud-
fare [19]. That particular attack used an ampliﬁcation vector in some imple-
mentations of NTP [19]; a previous attack against Spamhaus [10] in March
2013 achieved 300+ Gbps using an ampliﬁcation vector in DNS. While some
application-layer patches can mitigate these attacks [20], attackers continuously
search for new vectors.
Defeating ampliﬁcation attacks, and other threats based on IP spooﬁng,
requires providers to ﬁlter incoming packets with spoofed source IP addresses [11]
– in other words, to implement BCP 38, a Best Current Practice also known as
source address validation (SAV). SAV suﬀers from misaligned incentives: a net-
work that adopts SAV incurs the cost of deployment, while the security beneﬁts
c(cid:2) Springer International Publishing AG 2017
M.A. Kaafar et al. (Eds.): PAM 2017, LNCS 10176, pp. 229–241, 2017.
DOI: 10.1007/978-3-319-54328-4 17
230
Q. Lone et al.
diﬀuse to all other networks. That being said, SAV is a widely supported norm
in the community. Increasing the visibility of which networks have or have not
adopted SAV reduces the incentive problem by leveraging reputation eﬀects and
the pressure of other providers and stakeholders. These factors put a premium
on our ability to measure SAV adoption.
In this paper, we report on the eﬃcacy of a new measurement technique that
is based on an idea of Jared Mauch. It allows an external observer to use tracer-
oute to infer the absence of ﬁltering by a provider AS at a provider-customer
interconnect. This study makes the following ﬁve contributions: (1) We show
that it is generally feasible for providers to deploy static ingress ACLs, as their
customers rarely change address space. (2) We describe a scalable algorithm
for accurately inferring the absence of ingress ﬁltering from speciﬁc patterns in
traceroute data. (3) We validate the algorithm’s correctness using ground truth
from 7 network operators. (4) We demonstrate the utility of the algorithm by
analyzing Internet-scale inferences we made. (5) We build a public website show-
ing the provider-customer edges that we inferred to imply the absence of ﬁltering,
combined with actionable data that operators can use to deploy ﬁltering.
2 Background on Ingress Filtering
The canonical documents describing the use of ingress ﬁltering methods for SAV
are RFCs 2827 [11] and 3704 [5], known in the network operations and research
communities as BCPs 38 and 84. BCP 38 describes the basic idea: the source
address of packets should be checked at the periphery of the Internet against
a set of permitted addresses. For an access network, this check could be at the
point of interconnection with a single customer; for an enterprise, this could be
on their edge routers to their neighbors; and for a transit provider, this could
be on the provider-edge router where a customer connects. For single-homed
customers, a transit provider can discard packets that have a source address
outside the set of preﬁxes the customer announces to the transit provider, using
Strict or Feasible Reverse Path Forwarding (RPF). A router using Strict RPF
will drop a packet if it arrived on a diﬀerent interface than the router would
choose when forwarding a packet to the packet’s source address; a router using
Feasible RPF will consider all paths it could use to reach the source address, not
just the best path.
BCP 84 discusses challenges in deploying ingress ﬁltering on multi-homed
networks. Both Strict and Feasible RPF are not always feasible if a customer is
multi-homed and does not announce all of its preﬁxes to each neighbor router, as
it might do for traﬃc engineering purposes. Instead, an operator might deﬁne a
set of preﬁxes covering source addresses in packets the router will forward, known
as an Ingress Access List, or Ingress ACL. BCP 84 states that while ingress ACLs
require manual maintenance if a neighbor acquires additional address space, they
are “the most bulletproof solution when done properly”, and the “best ﬁt ... when
the conﬁguration is not too dynamic, .. if the number of used preﬁxes is low.”
Using Loops Observed in Traceroute to Infer the Ability to Spoof
231
3 Related Work
Testing a network’s SAV compliance requires a measurement vantage point inside
(or adjacent to) the network, because the origin network of arbitrary spoofed
packets cannot be determined [5]. The approach of the Spoofer project [7] is to
allow volunteers to test their network’s SAV compliance with a custom client-
server system, where the client sends spoofed packets in coordination with the
server, and the server infers that the client can spoof if the server receives these
spoofed packets. However, the Spoofer project requires volunteer support to
run the client to obtain a view from a given network. In May 2016, CAIDA
released an updated client [1] that operates in the background, automatically
testing attached networks once per week, and whenever the system attaches to
a network it has not tested in the previous week. The number of preﬁxes tested
per month has increased from ≈400 in May 2016 to ≈6000 in December 2016 [1].
Jared Mauch deployed the ﬁrst technique to infer if a network had inade-
quate SAV without requiring a custom client-server system. As a product of the
Open Resolver Project [3], he observed DNS resolvers embedded in home routers
forwarding DNS queries from his system with IPX to other resolvers, without
rewriting the source IP address of the packet. These other resolvers returned the
subsequent answer directly to IPX, rather than to the DNS resolver in the home
router as they should have.
We emphasize that these methods are complementary, and that no one tech-
nique is able to test deployment of SAV for all networks.
4 Motivation of Ingress ACLs
As described in Sect. 2, the best place to deploy ﬁltering is at the edge. How-
ever, not all edge networks have the technical ability or motivation to ﬁlter
their own traﬃc. A transit provider, however, is often managed by skilled net-
work operators who may already deploy defenses to prevent their customers
from announcing inappropriate routes. The provider-customer interconnect for
an edge network represents the other straightforward place to deploy ingress
ﬁltering.
 25
 20
 15
 10
 5
s
e
S
A
b
u
t
S
f
o
n
o
i
t
c
a
r
F
 0
Jan
’98
BCP−38
BCP−84
IPv4
IPv6
Jan
’00
Jan
’02
Jan
’04
Jan
’06
Jan
’08
Jan
’10
Jan
’12
Jan
’14
Jan
’16
Fig. 1. Fraction of ASes whose preﬁx announcements changed month-to-month.
232
Q. Lone et al.
s
e
S
A
b
u
t
S
f
o
n
o
i
t
c
a
r
F
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
August 2016:
IPv4, 46693 ASes
IPv6, 7265 ASes
 1
 0.8
 0.6
 0.4
 0.2
d
e