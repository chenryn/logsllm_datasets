A1
CNEService#
MiuiInitServer
AudioServer
AudioServer
WhetstoneActivity
ManagerService
Regionalization Server
HwAttestationServer
HwPhoneServer
HwAttestationServer
HwSysResManagerService
Device*
Table 4: The exploitable vulnerabilities exposed by Invetter. We show the effect of these vulnerabilities in different versions
of AOSP, as well as XiaoMi Note2(XMN2, Android6.0), XiaoMi Mix2(XMM2, Android8.0), HuaWei Mate9(HWM9, Androi7.0),
HuaWei P9(HWP9, Android6.0), HuaWei P10(HWP10, Android8.0), and Samsung S6(SUS6, Android5.0). These vulnerabilities
can be categorized by: incorrectly trusting app-supplied data(•), incorrectly trusting code in the app process(◦) and weakened
validation in customized system services(⊗). By exploiting these vulnerabilities, attackers can conduct privilege escalation
attacks(A1), log overflow attacks(A2), and private leakage attacks(A3). The 5th column provides the details about each vul-
nerability. The row labeled with * can also be located by Kratos [26]. Since Atfwd(labeled with #) is hidden by the SEAndroid
policy, its vulnerabilities can be exploited only if SEAndroid is disabled or 3rd-party vendor modifies the policy. We submit-
ted these vulnerabilities to Google and other corresponding vendors. The last column lists the status, with C stands for this
vulnerability has been confirmed, N stands for we have notified them and currently not received their responses, and F stands
for it has been fixed in the latest version of Android image.
N
C
F
C
N
C
F
C
C
C
C
•
⊗
•
•
⊗
⊗
⊗
⊗
•
⊗
Finally, we find all four studied customized system images
weaken the security enforcements when they modify old or add new
services, resulting in 10 exploitable vulnerabilities. In fact, we find
that in most of the cases, vendors barely put any security checks
in their new service code, suggesting that third-party vendors are
less security-conscious overall compared to Google.
6.4 Case Study
We now choose a subset of the 20 cases to explain how the vul-
nerabilities manifest themselves and how they can be exploited.
For interested readers, our anonymous demonstration video can
be found at https://youtu.be/erLY_OMi4kQ. We are in the process
of responsibly disclosing the details to Google and other related
third-party vendors.
Hidden interfaces left by the microchip manufacturer (priv-
ilege escalation). Atfwd is a system app provided by the mi-
crochip manufacturer Qualcomm, and pre-installed on many
Qualcomm-based Android devices. Atfwd registers a system ser-
vice called AtCmdFwd, which accepts various commands through
app-accessible interfaces. Specifically, the commands accepted by
AtCmdFwd are illustrated in Table 5. Although it is designed to
reject commands from non-system apps, we show that due to an
insecure input validation, a malicious app can fake its identify. As
a result, malware can arbitrarily inject commands such as push
physical buttons, or trigger motions on the touch screen. Addi-
tionally, we notice that due to a similar insecure input validation,
AtCmdFwd exposes some sensitive system operations, for example,
erase the external/internal storage or reboot/shutdown the device.
Surprisingly, we are unable to locate the user of these exported in-
terfaces and unsure why they are pre-installed everywhere. Luckily,
in recent updates of SEAndroid policies, Atfwd becomes inaccessi-
ble to regular apps. However, its vulnerabilities can be exploited
if SEAndroid is disabled (in a lower version of Android), if a 3rd-
party vendor misconfigures the policy, or if an unrelated system
process is compromised first which can then reach the service. Our
Command
+CKPD
Event Handler
AtCkpdCmd
+CTSA
+CFUN
+CRSL
AtCtsaCmd
AtCfunCmd
AtCrslCmd
+CMAR
AtCmarCmd
CSS
$QCPWRDN AtQcpwrdnCmd
AtCssCmd
Description
Send an arbitrary
key/button press event
Send a touch screen
motion event
Reboot the device
Set audio stream
volume
Erase the
external/internal storage
Get default display
settings
Shutdown the device
Table 5: Commands accepted by AtCmdFwd. The first col-
umn shows the command tokens accepted by the system
service, and the second column presents the corresponding
event handler triggered by the commands. The final column
describes the effect of each command.
demonstration video shows that the interfaces can be utilized in a
zero-permission app.
Sending arbitrary accessibility event (privilege escalation).
Accessibility service is commonly registered to AccessibilityMan-
agerService by apps, providing convenience to assist the mobile
user’s operations, such as auto-filling data (e.g., password) or touch-
ing a point on the screen. Although accessibility services are origi-
nally designed to assist users with disabilities, it is not limited to
this purpose. For example, many UI testing frameworks use acces-
sibility service to gain access to specific app views, such as the
uiautomater in Android framework. Besides, some apps use acces-
sibility services to provide sensitive functionalities, such as reading
content of user’s current view, or alerting the user.
Interestingly, we find the input validation used in Accessibili-
tyManagerService is vulnerable. By exploiting this vulnerability,
a malicious app can deliver arbitrary accessibility events to any
targeted accessibility service. For example, we can target Notifi-
cation Check [7], a popular app used to manage various notifica-
tions on your phone. This app registers an Accessibility Service,
which allows it to listen for the arrival of notifications, i.e., accessi-
bility events with type TYPE_NOTIFICATION_STATE_CHANGED
dispatched by AccessibilityManagerService. With the event injection
capability, a malicious app can deliver crafted events to Notifica-
tion Check for phishing. Likewise, by sending a forged event to
the accessibility service which auto-fills user password, malware
can steal user password stored in this app, causing severe informa-
tion leakage. To emphasize, as the vulnerability lies in the system
framework AccessibilityManagerService, any app that registers their
app-specific service with it can become vulnerable. We tested the
vulnerability in the latest Android (8.0) and 3rd party Android
images. We confirm that it is still present.
Stealthy phishing attack (privilege escalation). The Android
OS provides a convenient functionality for developers to popup
a message on the screen, called Toast. When a toast is displayed,
it only fills the amount of space required for the message and
the current top activity remains visible and interactive. Originally,
the layout of Toast window is fixed (like a notification to user)
and cannot be customized by apps. However, Invetter finds an
interface in WindowManagerService which allows a malware to
create crafted Toast message with arbitrary scope of view space. As
a result, a malware can completely customize the toast window (e.g.,
a transparent TextField that captures the user input), and display it
on top of an arbitrary app. This is because there are two separated
paths based on different inputs that can popup a toast window. One
path requires the caller must have a SYSTEM_ALERT_WINDOW
permission. However, the other one does not apply any validation,
leading to the vulnerability introduced above. We confirm this
vulnerability with an exploitation on Nexus 6 (AOSP 7.0), which
can popup a phishing window without the user noticing.
Controlling the media player (privilege escalation). MediaSes-
sionService provides a method named dispathchMediaKeyEvent that
allows apps to send out media key events to control the current
running media player, such as stopping a media file or playing an-
other. This method is originally designed as a hidden method since
it is labeled as @hide in Android SDK. Normally, a developer can
not call this method in his app. However, since the Android SDK is
executed in app’s process, an app can overwrite the manager side
RPC code, and invoke this method anyways by creating its own me-
dia key event. MediaSessionService conducts a verification to make
sure the input key event is a kind of media key events, after that it
clears the caller’s identity in Binder by calling clearCallingIdentity,
which means that the sender of the media key event is erroneously
set to system. This insecure validation allows an attacker to create
various kinds of media key events to control the current running
media player. As an exploitation experiment, we select two popular
media players in China, NetEaseMusic and QQMusic as targets. Both
of them can be controlled by the malicious app we developed.
Forcing factory reset (privilege escalation). In the system im-
age of XiaoMi Note 2, Invetter discovers a sensitive service inter-
face, called doFactoryReset, which is not protected by any access
controls. This method resides in the customized system service
MiuiInitServer. Doing factory reset is a system level behavior that
should be protected with critical enforcements, and commonly, it
can only be accessed by pre-installed system apps. Actually, AOSP
has a similar method called factoryReset, which requires a privileged
permission (CONNECTIVITY_INTERNAL). However, Invetter finds
that no check is performed in XiaoMi’s system image and any app
can access it without any restriction. In this case, we identify a
weakened access control in the newly added system services by a
third-party vendor, which demonstrates that customized system
images may weaken the original security enforcements of Android.
Clearing Android Kernel Log (Log overflow). DropBoxMan-
agerService(DBMS) is a persistent, system-wide, blob-oriented log-
ging service of Android (not to be confused with the file sharing app
which is also called Dropbox). Commonly it is used for recording
chunks of data from various sources, such as application crashes,
kernel log records, etc. Invetter reports a public interface, add, in
this service which does not enforce any permission check. It only
conducts sensitive input validation based on the untrusted app-
supplied data. This makes it possible for a malicious app to access
this interface, although it is designed for system only. The app can
fake the log information to mislead security analysts who use the
log reports, or even can erase the original system logs with fake
data. This is because DBMS uses a fixed-length queue to manage
logs in a system directory, and old data is discarded directly when
the maximal size reaches.
Deleting system files (privilege escalation). To prevent less
privileged apps from accessing files stored by high privileged sys-
tem/app processes, the Android sandbox separately stores app files
in their own app’s directory. As a result, only privileged apps or
system can access the sensitive resources. However, Invetter re-
ports a unprotected public interface, called deleteFileUnderDir, in
a customized system service RegionalizationService from XiaoMi
Note 2. Using this interface, the caller can delete arbitrary files
owned by the current running process. Since this system service is
executed in the system process, the caller client can delete system
files by calling it. Since this critical interface is not protected by any
permission or secure input validation, malicious apps can trigger
the file deletion whenever the service is running. This vulnerability
is not acknowledged in our testing device due to an incompatibility,
but confirmed by our in-depth code review.
7 DISCUSSION
Native code. Since Invetter is implemented based on Soot, which
cannot analyze the native code of Android, Invetter currently can-
not find vulnerabilities inside Android native services. We manually
checked the native services in Android framework, and find that
only 15 services are not analyzed by Invetter, e.g., Camera Service.
Since the code base of these services are relatively low, we believe
the impact is small because Invetter can find most system services
in the Android framework. Besides, as discussed in §5, we proposed
an approach to find Java byte code clients of services, including
the native ones. Thus, although we still cannot analyze the native
services, we can analyze and find insecure code within the Java
clients of native services, which cannot be achieved by the existing
approaches.
Inferring sensitive inputs. It is an open problem to automatically
infer sensitive inputs crossing a trust boundary in any large soft-
ware (e.g., user-to-kernel and app-to-service). However, in more
limited scenarios, inferring sensitive data has been considered and
studied using various techniques. For example, TaintDroid [8] labels
the return value of a hand-curated list of Android APIs as sensitive
(e.g., getLastKnownLocation(). UIPicker [21] and SUPOR [16] use
learning-based approaches to identify sensitive inputs through UI.
Similar to our idea, they first manually label some sensitive UI el-
ements (e.g., input boxes) and then use machine learning to infer
other sensitive ones via co-location analysis. Unlike UI elements,
the scale and complexity of sensitive inputs in programs are much