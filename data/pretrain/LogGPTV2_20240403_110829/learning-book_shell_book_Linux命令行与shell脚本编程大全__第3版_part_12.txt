### 文件处理

#### 3.6 处理文件

##### 3.6.1 文件复制

- **文件信息**
  ```
  S 1a -1 test_*
  -rwrvr-- 1 chxlatine chxLatine 0 May 21 14:35 test_one
  -rwrvz=- 1 chxlatine chxlatine 0 May 21 15:15 test_tvo
  ```

  新文件 `test_two` 和文件 `test_one` 的修改时间并不相同。如果目标文件已经存在，`cp` 命令可能并不会提醒这一点。建议使用 `-i` 选项，强制 shell 询问是否需要覆盖已有文件。

  ```bash
  $ cp -i test_one test_tuo
  cp: overwrite *test_tvo'? n
  ```

  如果不回答 `y`，文件复制将不会继续。也可以将文件复制到现有目录中。

  ```bash
  $ cp -i test_one /home/christine/Documents/
  $ ls -1 /home/christine/Documents
  -rw-rv-r-- 1 chrietine christine 0 May 21 15:25 test_one
  ```

  新文件现在就在 `Documents` 目录中了，和源文件同名。注意，在目标目录名后面加上了一个正斜线（/），这表明 `Documents` 是一个目录而非文件。这样做有助于明确目的，并且在复制单个文件时非常重要。如果没有使用正斜线，而子目录 `/home/christine/Documents` 又不存在，就会创建一个名为 `Documents` 的文件，甚至不会显示错误消息！

  上一个例子采用了绝对路径，不过也可以使用相对路径。

  ```bash
  $ cp -i test_one Documents/
  $ ls -1 Documents
  total 0
  -rwrvz=- 1 chr1atine chx1atine 0 May 21 15:28 test_one
  ```

  本章前面介绍了特殊符号可以用在相对文件路径中。其中的单点符（`.`）就很适合用于 `cp` 命令。记住，单点符表示当前工作目录。如果需要将一个带有很长的源对象名的文件复制到当前工作目录中时，单点符能够简化该任务。

  ```bash
  $ ls -1 NetworkManager.conf
  -rw-rw-r-- 1 chx1atine chx1atine 76 May 21 15:55 NetworkManager.conf
  ```

  单点符在第一行命令的末尾。如果你的源对象名很长，使用单点符要比输入完整的目标对象名省事得多。

  **提示**：`cp` 命令的参数要比这里叙述的多得多。别忘了用 `man cp` 查看 `cp` 命令的所有可用参数。

- **递归复制**

  `cp` 命令的 `-R` 参数非常强大。可以用它在一条命令中递归地复制整个目录的内容。

  ```bash
  $ ls -d Scripts
  Scripts/
  $ ls -1 Scripts/
  total 25
  -rwxr-x-- 1 christine christine 254 Jan 2 14:18 SGID_search.sh
  -rwxr-x-- 1 christine christine 243 Jan 2 13:42 SUID_search.sh
  $ cp -R Scripts/ Mod_Scripts
  $ ls -d *Scripts
  Scripts/ Mod_Scripts/
  $ ls -1 Mod_Scripts
  total 25
  -rwxr-x-- 1 christine christine 929 May 21 16:16 file_mod.sh
  -rwxr-x-- 1 christine christine 243 May 21 16:16 SUID_search.sh
  -rwxr-x-- 1 christine christine 254 May 21 16:16 SGID_search.sh
  ```

  在执行 `cp -R` 命令之前，目录 `Mod_Scripts` 并不存在。它是随着 `cp -R` 命令被创建的，整个 `Scripts` 目录中的内容都被复制到其中。注意，在新的 `Mod_Scripts` 目录中，所有的文件都有对应的新日期。`Mod_Scripts` 目录现在已经成为了 `Scripts` 目录的完整副本。

  **说明**：在上面的例子中，`ls` 命令加入了 `-d` 选项。之前你已经见过 `-P` 选项了，不过 `-d` 选项可能还是第一次碰到。后者只列出目录本身的信息，不列出其中的内容。

- **通配符复制**

  也可以在 `cp` 命令中使用通配符。

  ```bash
  $ ls -1 Mod_Scripts
  total 26
  -rwxr-x-- 1 christine christine 929 May 21 16:16 file_mod.sh
  -rwxr-x-- 1 christine christine 54 May 21 16:27 my_script
  -rwxr-x-- 1 christine christine 243 May 21 16:16 SUID_search.sh
  -rwxr-x-- 1 christine christine 254 May 21 16:16 SGID_search.sh
  ```

  该命令将所有以 `script` 结尾的文件复制到 `Mod_Scripts` 目录中。在这里，只需要复制一个文件：`my_script`。

##### 3.6.2 制表键自动补全

在使用命令行时，很容易输错命令、目录名或文件名。特别是对于长目录名或文件名，输错的概率更高。这时制表键自动补全就派上用场了。制表键自动补全允许你在输入文件名或目录名时按一下制表键，让 shell 帮忙将内容补充完整。

```bash
$ ls really*
really_ridiculously_long_file_name
$ cp really_ridiculously_long_file_name Mod_Scripts/
$ ls -1 Mod_Scripts
total 26
-rwxr-x-- 1 christine christine 929 May 21 16:16 file_mod.sh
-rwxr-x-- 1 christine christine 54 May 21 16:27 my_script
-rwxr-x-- 1 christine christine 254 May 21 16:16 SGID_search.sh
-rwxr-x-- 1 christine christine 243 May 21 16:16 SUID_search.sh
```

在上面的例子中，我们输入了命令 `cp really`，然后按制表键，shell 就将剩下的文件名自动补充完整了！当然了，目标目录还是得输入的，不过仍然可以利用命令补全来避免输入错误。

使用制表键自动补全的关键在于要给 shell 足够的文件名信息，使其能够将需要的文件同其他文件区分开。假如有另一个文件名也是以 `really` 开头，那么就算按了制表键，也无法完成文件名的自动补全。这时候你会听到嘟的一声。要是再按一下制表键，shell 就会列出所有以 `really` 开头的文件名。这个特性可以让你观察究竟应该输入哪些内容才能完成自动补全。

##### 3.6.3 链接文件

链接文件是 Linux 文件系统的一个优势。如需要在系统上维护同一文件的两份或多份副本，除了保存多份单独的物理文件副本之外，还可以采用保存一份物理文件副本和多个虚拟副本的方法。这种虚拟的副本就称为链接。链接是目录中指向文件真实位置的占位符。在 Linux 中有两种不同类型的文件链接：

- 符号链接
- 硬链接

**符号链接**就是一个实实在在的文件，它指向存放在虚拟目录结构中某个地方的另一个文件。这两个通过符号链接在一起的文件，彼此的内容并不相同。

要为一个文件创建符号链接，原始文件必须事先存在。然后可以使用 `ln` 命令以及 `-s` 选项来创建符号链接。

```bash
$ ls -1 data_file
-rw-rw-r-- 1 chriatine chriatine 1092 May 21 17:27 data_file
$ ln -s data_file sl_data_file
$ ls -1 *data_file
-rw-rw-r-- 1 chriatine chriatine 1092 May 21 17:27 data_file
lrwxrwxrwx 1 chriatine chriatine 9 May 21 17:29 sl_data_file -> data_file
```

在上面的例子中，注意符号链接的名字 `sl_data_file` 位于 `ln` 命令中的第二个参数位置上。显示在长列表中符号文件名后的 `->` 符号表明该文件是链接到文件 `data_file` 上的一个符号链接。

另外还要注意的是，符号链接的文件大小与数据文件的文件大小。符号链接 `sl_data_file` 只有 9 个字节，而 `data_file` 有 1092 个字节。这是因为 `sl_data_file` 仅仅只是指向 `data_file` 而已。它们的内容并不相同，是两个完全不同的文件。

另一种证明链接文件是独立文件的方法是查看 inode 编号。文件或目录的 inode 编号是一个用于标识的唯一数字，这个数字由内核分配给文件系统中的每一个对象。要查看文件或目录的 inode 编号，可以给 `ls` 命令加入 `-i` 参数。

```bash
$ ls -i *data_file
296890 data_file 296891 sl_data_file
```

从这个例子中可以看出数据文件的 inode 编号是 296890，而 `sl_data_file` 的 inode 编号则是 296891。所以说它们是不同的文件。

**硬链接**会创建独立的虚拟文件，其中包含了原始文件的信息及位置。但是它们从根本上而言是同一个文件。引用硬链接文件等同于引用了源文件。要创建硬链接，原始文件也必须事先存在，只不过这次使用 `ln` 命令时不再需要加入额外的参数了。

```bash
$ ls -1 code_file
-rw-rw-r-- 1 chriatine chriatine 189 May 21 17:56 code_file
$ ln code_file hl_code_file
$ ls -li *code_file
296892 -rw-rw-r-- 2 chx1atine chx1atine 189 May 21 17:56 code_file
hl_code_file
```

在上面的例子中，我们使用 `ls -li` 命令显示了 `*code_files` 的 inode 编号以及长列表。注意，带有硬链接的文件共享 inode 编号。这是因为它们终归是同一个文件。还要注意的是，链接计数（列表中第三项）显示这两个文件都有两个链接。另外，它们的文件大小也一模一样。

**说明**：只能对处于同一存储媒体的文件创建硬链接。要想在不同存储媒体的文件之间创建链接，只能使用符号链接。

复制链接文件的时候一定要小心。如果使用 `cp` 命令复制一个文件，而该文件又已经被链接到了另一个源文件上，那么你得到的其实是源文件的一个副本。这很容易让人犯晕。用不着复制链接文件，可以创建原始文件的另一个链接。同一个文件拥有多个链接，这完全没有问题。但是，千万别创建软链接文件的软链接。这会形成混乱的链接链，不仅容易断裂，还会造成各种麻烦。

你可能觉得符号链接和硬链接的概念不好理解。幸好下一节中的文件重命名容易明白得多。

##### 3.6.4 重命名文件

在 Linux 中，重命名文件称为移动（moving）。`mv` 命令可以将文件和目录移动到另一个位置或重新命名。

```bash
$ ls -li f?11
296730 -rw-rw-r-- 1 christine christine 0 May 21 13:44 fall
296717 -rw-rw-r-- 1 christine christine 0 May 21 13:44 feel
296742 -rw-rw-r-- 1 christine christine 0 May 21 13:44 full
$ mv fall fyll
$ ls -li f?11
294561 -rw-rw-r-- 1 christine christine 0 May 21 13:44 fill
296742 -rw-rw-r-- 1 christine christine 0 May 21 13:44 full
296730 -rw-rw-r-- 1 chziatine chziatine 0 May 21 13:44 fyll
```

注意，移动文件会将文件名从 `fall` 更改为 `fyll`，但 inode 编号和时间戳保持不变。这是因为 `mv` 只影响文件名。

也可以使用 `mv` 来移动文件的位置。

```bash
$ ls -li /home/christine/fyll
296730 -rw-rw-r-- 1 chziatine chziatine 0 May 21 13:44 /home/christine/fyll
$ ls -li /home/christine/Pictures/
total 0
$ mv fyll Pictures/
$ ls -li /home/christine/Pictures/
total 0
296730 -rw-rw-r-- 1 chxiatine chxiatine 0 May 21 13:44 fyll
$ ls -li /home/christine/fyll
ls: cannot access /home/christine/fyll: No such file or directory
```

在上例中，我们使用 `mv` 命令把文件 `fyll` 从 `/home/christine` 移动到了 `/home/christine/Pictures`。和刚才一样，这个操作并没有改变文件的 inode 编号或时间戳。

跨门和 `cp` 命令类似，也可以在 `mv` 命令中使用 `-i` 参数。这样在命令试图覆盖已有的文件时，你就会得到提示。

唯一变化的就是文件的位置。`/home/christine` 目录下不再有文件 `fyll`，因为它已经离开了原先的位置，这就是 `mv` 命令所做的事情。

也可以使用 `mv` 命令移动文件位置并修改文件名称，这些操作只需一步就能完成。

```bash
$ ls -li Pictures/fyll
296730 -rw-rw-r-- 1 christine christine 0 May 21 13:44 Pictures/fyll
$ mv /home/christine/Pictures/fyll /home/christine/fall
$ ls -li /home/christine/fall
296730 -rw-rw-r-- 1 christine christine 0 May 21 13:44 /home/christine/fall
$ ls -li /home/christine/Pictures/fyll
ls: cannot access /home/christine/Pictures/fyll: No such file or directory
```

在这个例子中，我们将文件 `fyll` 从子目录 `Pictures` 中移动到了主目录 `/home/christine`，并将名字改为 `fall`。文件的时间戳和 inode 编号都没有改变。改变的只有位置和名称。

也可以使用 `mv` 命令移动整个目录及其内容。

```bash
$ ls -li Mod_Scripts
total 26
296886 -rwxr-x-- 1 christine christine 929 May 21 16:16 file_mod.sh
296887 -rwxr-x-- 1 christine christine 54 May 21 16:27 my_script
296885 -rwxr-x-- 1 christine christine 254 May 21 16:16 SGID_search.sh
296884 -rwxr-x-- 1 christine christine 243 May 21 16:16 SUID_search.sh
$ mv Mod_scripts old_Scripts
$ ls -li Mod_Scripts
ls: cannot access Mod_Scripts: No such file or directory
$ ls -li old_Scripts
total 26
296886 -rwxr-x-- 1 christine christine 929 May 21 16:16 file_mod.sh
296887 -rwxr-x-- 1 christine christine 54 May 21 16:27 my_script
296885 -rwxr-x-- 1 christine christine 254 May 21 16:16 SGID_search.sh
296884 -rwxr-x-- 1 christine christine 243 May 21 16:16 SUID_search.sh
```

目录内容没有变化。只有目录名发生了改变。

在知道了如何使用 `mv` 命令进行重命名（不对，应该是移动文件之后），你应该发现这其实非常容易。另一个简单但可能有危险的任务是删除文件。

##### 3.6.5 删除文件

迟早有一天，你得删除已有的文件。不管是清理文件系统还是删除某个软件包，总有要删除文件的时候。

在 Linux 中，删除（deleting）叫作移除（removing）。bash shell 中删除文件的命令是 `rm`。`rm` 命令的基本格式非常简单。

```bash
$ rm -i fall
$ ls -1 fall
ls: cannot access fall: No such file or directory
```

注意，`-i` 命令参数提示你是不是要真的删除该文件。bash shell 中没有回收站或垃圾箱，文件一旦删除，就无法再找回。因此，在使用 `rm` 命令时，要养成总是加入 `-i` 参数的好习惯。

也可以使用通配符删除成组的文件。别忘了使用 `-i` 选项保护好自己的文件。

```bash
$ rm -i f?11
rm: remove regular empty file 'fyll'? y
rm: remove regular empty file 'full'? y
$ ls -1 f?11
ls: cannot access f?11: No such file or directory
```

`rm` 命令的另外一个特性是，如果要删除很多文件且不受提示符的打扰，可以用 `-f` 参数强制删除。小心为妙！

### 3.7 处理目录

在 Linux 中，有些命令（比如 `cp` 命令）对文件和目录都有效，而有些只对目录有效。创建新目录需要使用本节讲到的一个特殊命令。删除目录也很有意思，本节也会讲到。

##### 3.7.1 创建目录

在 Linux 中创建目录很简单，用 `mkdir` 命令即可：

```bash
$ mkdir New_Dir
$ ls -ld New_Dir
drwxrwxr-x 2 chriatine chriatine 4096 May 22 09:48 New_Dir
```

系统创建了一个名为 `New_Dir` 的新目录。注意，新目录长列表是以 `d` 开头的。这表示 `New_Dir` 并不是文件，而是一个目录。

可以根据需要批量地创建目录和子目录。但是，如果你想单单靠 `mkdir` 命令来实现，就会得到下面的错误消息：

```bash
$ mkdir New_Dir/Sub_Dir/Under_Dir
mkdir: cannot create directory ‘New_Dir/Sub_Dir/Under_Dir’: No such file or directory
```

要想同时创建多个目录和子目录，需要加入 `-p` 参数：

```bash
$ mkdir -p New_Dir/Sub_Dir/Under_Dir
$ ls -R New_Dir
New_Dir:
Sub_Dir

New_Dir/Sub_Dir:
Under_Dir

New_Dir/Sub_Dir/Under_Dir:
```

这样就可以一次性创建所需的目录结构。