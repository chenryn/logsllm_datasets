(2) We have not found any anecdotal evidence that ASes may
Ô¨Ålter BGP UPDATE messages with AS path length of 75 or
longer and shorter than 255. This explains the observation
y, that is, no discernible reduction of messages in this
range, and the conjecture ¬ó well.
(3) We have found that Cisco routers with up-to-date IOS op-
erating systems are conÔ¨Ågured by default to drop UPDATE
messages with AS path length equal to or longer than
255 [46]. This has been implemented as a remedy to the
Cisco IOS bug (bug#: CSCdr54230), which makes the BGP
routers misbehave when processing UPDATE messages
with AS path longer than or equal to 255 [47]. Consid-
ering Cisco‚Äôs strong dominance in the network equipment
markets in the last few decades, it is understandable that the
majority of BGP messages longer than 255 are highly likely
to be Ô¨Åltered by any Cisco routers on their propagation
paths (that is, z and ¬ò).
Filtering practices in ISPs. From our personal conversations
with two ISPs, we have conÔ¨Årmed that BGP UPDATE message
Ô¨Åltering is indeed used in practice. We heard from one large
Swiss ISP that they Ô¨Ålter on AS path length > 40. We also
heard from a large ISP in Taiwan that they implement an
even stronger white-list Ô¨Åltering, which Ô¨Ålters arbitrary BGP
poisoning messages. This anecdotal evidence is well aligned
with the above passive measurements and our conjecture on
the Ô¨Åltering practice.
C. Contradictory Requirements of Two Defense Properties
	



	










	

	










Figure 10: Path leakage of a message poisoning AS H sent
by a destination AS D for the detour path {C, X, Y, Z, D}.
requirements contradict each other. To achieve path isolation
for more than 95% of detours, RAC defender has to include
more than 255 ASes in its BGP UPDATE messages (¬ßIV-A).
In contrast, the BGP UPDATE message must contain the AS
path shorter than 255 so that it is not Ô¨Åltered out and the detour
path establishment will be guaranteed (¬ßIV-B).
In the following sections from Section V to VII, we
investigate the consequences of the trade-off.
V. NON-ISOLATED DETOUR PATH AND PATH LEAKAGE
Strong isolation of detour paths is a highly desired defense
property; yet, it cannot be achieved if the RAC defender prefers
the guaranteed detour path establishment. In this section, we
investigate the problems when the established detour path
is not
isolated. Particularly, we introduce a metric called
path leakage, whose deÔ¨Ånition follows below, to measure the
negative consequence of having non-isolated detour paths.
Then, we optimize the RAC defense to minimize the path
leakage. In the following Section VI, we use the measured path
leakage and discuss how new attacks against the RAC defense
can be effective even with small amount of path leakage.
A. Metric to Evaluate Non-Isolated Detour Paths
The information about the bandwidth capacity of the inter-
domain links between ASes is known to be inaccessible for
public [51]. Hence, it is also difÔ¨Åcult to estimate the bandwidth
availability of a detour path.
Alternatively, we use the number of poisoned ASes that are
not on the detour paths to evaluate the bandwidth availability
of a detour path. This comes from the observation that both
the critical Ô¨Çow and some other non-critical Ô¨Çows are rerouted
to a non-isolated detour path and the detour path may carry
increasing number non-critical Ô¨Çows as the number of non-
critical ASes receiving the BGP poisoning message grows.
More formally, we introduce the notion of path leakage and
use it as a metric to quantify the bandwidth availability of a
detour path in our work.
We conclude our Ô¨Åndings that the two highly desired de-
fense properties ‚Äî path isolation and guaranteed detour estab-
lishment ‚Äî cannot be achieved at the same time because their
DeÔ¨Ånition 1 (Path leakage). An AS is said to have (or observe)
the path leakage of a BGP UPDATE message U when the AS
is not on the detour path but receives U. The amount of path
(cid:18)(cid:18)(cid:24)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:09 UTC from IEEE Xplore.  Restrictions apply. 
leakage of U is measured by the total number of ASes that
have the path leakage of U.
Figure 10 illustrates the path leakage of a message sent by
a destination AS D for the detour path {C, X, Y, Z, D}. D
constructs a poisoned UPDATE message to poison AS H and
broadcasts it to the network. When the BGP message is sent
to the ASes that are not on the detour path and is accepted
by them, the path is said to be leaked. In Figure 10, the BGP
poisoning message is accepted by the ASes that are not on the
detour path (e.g., E, F and G).
B. Minimization of Path Leakage Due to Non-isolated Detours
In this section, we further improve the RAC defense to
minimize the amount of path leakage a BGP poisoning message
can have. We Ô¨Årst deÔ¨Åne the problem of establishing a non-
isolated detour path with the minimum amount of path leakage
for a critical AS and destination AS (or C‚ÄìD) pair and then
Ô¨Ånd a sub-optimal solution we can calculate in practice.
We aim to establish a detour path with a BGP poisoning
UPDATE message that minimizes the amount of path leakage.3
We formally deÔ¨Åne an optimization problem as follows.
Non-isolated detour establishment problem [P1]. Let us
that a destination AS D creates an UPDATE
consider
through the detour path R =
message U and sends it
{C, R1, R2, ¬∑ ¬∑ ¬∑ , Rn, D}. Our optimization goal of this prob-
lem is to Ô¨Ånd the set of ASes P among all ASes in the Internet
that minimizes the amount of path leakage of U such that
|P| ‚â§ B, where B denotes the maximum allowed size of P.
We show that
this optimization problem [P1] can be
modeled to a variant of the min-cut problem,
is the
general version of the Minimum-Size Bounded-Capacity Cut
(MinSBCC) problem [28], see Appendix B for details. The
general MinSBCC problem is shown to be NP-complete
and has a known approximation [28]; yet, it is a bi-criteria
algorithm and thus it has no guarantee that the solution satisÔ¨Åes
the condition of the bounded number of ASes to be poisoned.
that
SimpliÔ¨Åed Heuristic Solutions. Since the problem of min-
imizing path leakage seems to be hard and the known ap-
proximation is inappropriate, we (1) simplify the problem
formulation of [P1], and (2) perform a greedy algorithm on
the simpliÔ¨Åed problem to Ô¨Ånd a sub-optimal solution.
First, we can simplify [P1] by poisoning only the neigh-
boring ASes of the ASes on the detour path. That is, instead
of choosing P (i.e., the set of ASes we poison) among all the
ASes in the Internet, we choose them from the neighboring
ASes of the ASes on the detour path. Our intuition is that
stopping the spread of path leakage at earlier location (i.e.,
closer to the detour path) would result in a better solution of
[P1], i.e., smaller amount of path leakage.
Second, we implement a greedy algorithm to solve the
simpliÔ¨Åed [P1]. Let us Ô¨Årst call Q the set of ASes that we
can poison (i.e., the set of all neighboring ASes of the ASes
on the detour path). To remove path leakage at any AS, all of
3Complete elimination of path leakage guarantees the path isolation, which
has been shown to be hard if the RAC defender prefers the guaranteed detour
path establishment.
)
s
d
n
a
s
u
o
h
t
(
e
g
a
s
s
e
M
g
n
s
o
P
P
G
B
i
i
i
e
v
e
c
e
R
t
a
h
t
s
e
S
A
f
o
r
e
b
m
u
N
60K
50K
40K
30K
20K
10K
0
0
100
200
300
400
500
600
700
800
900
1000
Indices of Tested Critical End-to-end Flows
Greedy algorithm
Randomization
No minimization
Figure 11: Amount of path leakage in three experiments: no
minimization, randomization and greedy algorithm.
the ASes in Q that can deliver U to that AS must be poisoned.
We call this set of ASes that needs to be poisoned for a given
ASi the isolating set Si ‚äÇ Q. Our greedy algorithm aims
to maximize the number of ASes that are not on the detour
path while the union of their isolating sets is still within the
bound B. In each round, ASi with the smallest |Si| is picked,
the selected Si is added to P, and all other Sj (i (cid:6)= j) are
re-calculated. The greedy algorithm Ô¨Ånally outputs P, the set
of ASes that we poison. We describe our greedy algorithm in
details in Appendix C.
Measuring the path leakage with the greedy algorithm. To
evaluate our greedy algorithm, we use the Chaos simulator [4]
and the enumerated detour paths between 1,000 randomly
selected C-D pairs to run several experiments. We set the
bound B to be 255; see Section IV-B. Since ASes prepend their
own AS numbers to the BGP UPDATE message when they
forward it, the poisoned message must reserve some empty
spaces for the ASes on the detour paths. Therefore, the number
of ASes to be poisoned is at most B ‚àí |R| ‚àí 2, where the
destination AS already takes two slots.
To show the effectiveness of our greedy algorithm, we
construct three different BGP poisoned UPDATE messages
and test how they result in different amount of path leakage.
1. No minimization. We poison only one AS ASL to avoid
the congested link on the default path, and append the
destination AS D to the BGP UPDATE message:
Uno minimization = {D, ASL, D}.
2. Randomization. We also randomly choose (252‚àí|R|) ASes
among all neighboring ASes to be poisoned in the BGP
UPDATE message:
Urandom = {D, ASL, AS1, AS2, ¬∑ ¬∑ ¬∑ , AS252‚àí|R|, D}.
3. Greedy algorithm. We include the (252‚àí|R|) ASes chosen
from our greedy algorithm in the BGP poisoned message:
Ugreedy = {D, ASL, AS1, AS2, ¬∑ ¬∑ ¬∑ , AS252‚àí|R|, D}.
Figure 11 shows the amount of path leakage when three
BGP poisoning messages are sent out. Without any path
leakage minimization attempt (i.e., no minimization), the BGP
poisoning message ends up being delivered to almost all 60K
ASes in the network. When we avoid randomly a set of
(252 ‚àí |R|) neighboring ASes, the amount of path leakage
only slightly reduces in a majority of cases in comparison
with the no minimization experiment. Compared to these two
methods, our greedy algorithm reduces the number of path
leakage signiÔ¨Åcantly; however, the amount of path leakage is
still enormous. For example, in 80% of cases, more than 10K
of ASes receive the BGP poisoning message.
(cid:18)(cid:18)(cid:24)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:09 UTC from IEEE Xplore.  Restrictions apply. 
VI. ADAPTIVE LINK FLOODING ATTACK VERSUS
ADAPTIVE RAC DEFENSE
In this section, we show that as a result of path leakage,
the RAC defense becomes vulnerable to a new adaptive attack,
the detour-learning attack (¬ßVI-A). In this
which we call
attack, the adversary exploits the visibility of the path leakage
in the network to learn the establishment of a new detour path
in real-time. Once the new detour path of the critical Ô¨Çow is
known to the adversary, she can immediately congest it and
denies the goal RAC defense (i.e., rerouting critical Ô¨Çows to
an uncongested path).
Moreover, we show that
the RAC defense is not able
to react against this detour-learning attack (e.g., switching
from a non-isolated detour path to another) due to the long
delay caused by the well-known path hunting problem when
it withdraws an established detour path (¬ßVI-B).
A. Detour-Learning Attack Based on Path Leakage
Adversary model. We Ô¨Årst deÔ¨Åne our adversary model, i.e.,
the goals and capabilities of the detour-learning attack as
follows:
1. Attack goals. The adversary aims to detect a new detour
path immediately (e.g., within a few seconds) once the de-
tour path is established. Then, the adversary picks one link
on the detected detour path and Ô¨Çoods it to continuously
congest the critical Ô¨Çow.
2. Attack capabilities. Similar to today‚Äôs typical DDoS attack-
ers, the adversary controls a botnet to congest the main
link target (i.e., a link on the default path of the critical
Ô¨Çow) as well as the new link target (i.e., a link on the
detected detour path). We assume that the adversary does
not have any routing capability (e.g., add/modify/remove
any inter-domain routes). Thus, the adversary cannot learn
any route changes (e.g., detour path establishment) directly
from routing table changes in the BGP routers. Moreover,
we assume that the adversary has no bots in the critical
ASes.4
3. Knowledge of the existence of RAC defense. We assume that
the adversary knows the existence of the RAC defense at a
destination network D and its critical AS C via analyzing
the BGP messages recorded by the public BGP datasets
(e.g., RIPE [12], RouteView [14]); see Appendix D for our
analysis on this assumption. The recorded RAC operations
are old (e.g., 10 minutes or more) and thus not directly
useful for learning the current detour path in real-time, but
can be used to detect the existence of the RAC defense and
infer its critical AS, which is persistent regardless of the
changing detour paths.
Learning real-time detour path changes. We show that the
adversary can easily detect in real-time that a new detour path
has been established by proactively measuring path from her
botnet. The accurate target-link selection for the continuous
link-Ô¨Çooding attack, however, is non-trivial, as we will point
out later. Finally, we propose a link selection algorithm that
outputs the target-link accurately and efÔ¨Åciently.
4If an adversary controls bots in the critical ASes, learning new detour paths
is reduced to a trivial forward route measurement task.








	



	



traceroute




	






Figure 12: Detecting the detour path establishment in real time.
The adversary periodically (e.g., every second) measures
the routes (e.g., via traceroute) from the ASes that contain