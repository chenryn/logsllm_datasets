9
return 0;
foo(c);
char
int e = c + d;
return bar(a);
 又返回到了main函数。注意函数调用和返回过程中的这些规则:
，那么参数a的值从哪里取得？请读者利用反汇编和gdb自己分析一下。
88
那么如果调用时的参数类型不对或者参数个数不对会怎么样呢？比如
 Old Style C风格的函数声明可以不指定参数个数和类型，
ebp寄存器并不是必须这么用，
，那么参数a和b分别取什么值？多的参数怎么办？foo调
函数的参数和返回值也不是必
，这样编
2
我
---
## Page 300
[29] Linux内核为每个新进程指定的栈空间的起始地址都会有些不同，所以每次运行这个程序得到的
打印结果是多少？如果把声明void foo(）;改成void foo(double);，
第19 章汇编与C之间的关系
地址都不一样，
上一页
void foo(double d)
，但通常都是Oxbf??????这样一个地址。
printf("%f\n"，d);
全国嵌入式人才培训基地
起始页
打印结果又是多少?
2.main函数和启动例程
300
下一页
---
## Page 301
前由汇编代码例18.1“最简单的汇编程序"生成的目标文件hello.o我们是用ia来链接的，
E选项只做预处理而不编译，如果不加这些选项则gcc执行完整的编译步骤，直到最后链接生成可执
-s选项生成汇编代码，
2. main函数和启动例程 造点评
用gcc链接呢？试试看。
这些选项都可以和-o搭配使用，给输出的文件重新命名而不使用gcc默认的文件名
行文件为止。如下图所示。
讲例18.1“最简单的汇编程序"时，我们的汇编和链接步骤是：
为什么汇编程序的入口是_start,
上一页
main.c
图19.2.gcc命令的选项
SS
S
gcc main.o
...................................
main.s
S-06
-c选项生成目标文件，此外在第2节“数组应用实例：统计随机数"还讲过-
第三步生成可执行文件：
gcc-c
- 
而C程序的入口是main函数呢？本节就来解释这个问题。在
_start':
第19 章汇编与C之间的关系
2.main函数和启动例程
全国嵌入式人才培训基地
，可不可以
下一
先
贝
---
## Page 302
所代表的地址，
那么crt1.o和crti.o里面都有什么呢？我们可以用readelf命令查看。在这里我们只关心符号表，
是/lib/ld-linux.so.2，稍后会解释什么是动态链接。
行文件main。-1c表示需要链接libc库，在第1节“数学函数"讲过-1c选项是gcc默认的，
也就是说，除了crt1.o之外其实还有crti.o，
main其实是调用1a做链接的，相当于这样的命令：
我们继续研究上一节的例 19.1“研究函数的调用过程”。如果分两步编译，第二步gcc main.。-o
如果目标文件是由C代码编译生成的，
而对于ia则不是默认选项,
现main函数，
供main函数的定义。
提示两个错误：一是_start有多个定义，
1main这一行表示main这个符号在crt1.o中用到了，
个
，比如是0x80483c4，
00000000
00000000
$ nm /usr/lib/crti.o
00000000
00000000
00000000
00000000
S
iinker
S
collect2:
(.text+0x18): undefined reference to ^main'
function
-tueup- - ueu o- o·ueu o'/a/sn/ o·o/aT/sn/ pt
所以报错。
，另外，
1i
/lib/ld-linux.so.2
C
二
nn
RD
从最后一行还可以看出这些错误提示是由ra给出的。由此可见，如果我们
 main
_init
_start
start
libc_csu_fini
，以前我们说main函数是程序的入口点其实不准确，_start才是真正的入口
，那么可执行文件main中的这条指令就被链接器改成了push 
_OFFSET_TABLE
init
用gcc做链接就没错了，
exit status
一个定义是由我们的汇编代码提供的，
等到和main.o链接成可执行文件时就知道这个地址是多
，这两个目标文件和我们的main.o链接在一起生成可执
，但是没有定义（U表示Undefined），
，但不知道这个地址是多少，所以
，整个程序的入口点是crt1.o中提供
，而我们的汇编程序中没有实
_在crt1.o中要用到main这个符号
 链接器不知道该用哪
另一个定义来
、不用写
因此需要
302
，如
---
## Page 303
不做深入讨论，用gcc的-v选项可以了解详细的编译过程：
其实上面我们写的1d命令做了很多简化，
示Text）。我们从上面的输出结果中选取几个符号用图示说明它们之间的关系：
是一种编辑器，vi和emacs编辑的是源文件,
件"我们看到链接器起到重定位的作用，
$0x80483c4。
other object file
图 19.3.C程序的链接过程
gnu/4.3,
gnu/4
main
el
/usr/lib/gcc/i486-linux-gnu/4.3.2/collect2 --eh-frame-hdr -m
D
 /usr/lib/gcc/i486-linux-gnu/4.3.2/ccl -quiet -v main.ci-
S
S-needed
FORTIFY
，表示组成可执行文件main的除了main.o、crt1.o和crti.o之外还有其它目标文件，本书
i386
链接器在这里起到符号解析（Symbol Resolution）的作用，
+++ 1*
built
-V main.c -o main
3.2/crtbegin.o
 i486-1inux-gnu
SOURCE=2
in
一
bar
main
main.o
s 1
C
T_init 
juy 1
bar
main
main
-quiet
link
-L/usr/1ib/gcc/i486-1inux-gnu/4.3.2
_init
!uy
crti.o
?
-dumpbase main.c -mtune=generic -auxbase
 这两种作用都是通过修改指令中的地址实现的，
gcc在链接时还用到了另外几个目标文件，
dynamic link
，而链接器编辑的是目标文件，
U main
_libc_
_start
crtl.o
 /usr/lib/gcc/i486-linux-
-lc
-L/usr/
_start_main
-lgcc
入
_libc_start_main
libc
 --as-needed 
，这个符号的类型是代码（T表
所以链接器也叫Link 
在第5.2节“可执行文
 -lgcc_s
所以上图多画
-0
链接器也
303
---
## Page 304
了解了这些原理之后，现在我们来看_start的反汇编:
而是在运行时做动态链接：
义符号
crt1.o中的未定义符号main在main.o中定义了,
义
链接生成的可执行文件main中包含了各目标文件所定义的符号，通过反汇编可以看到这些符号的定
3．动态链接器在共享库中查找这些符号的定义，完成链接过程。
1．操作系统在加载执行main这个程序时，
义符号。这个符号是在libc中定义的，libc并不像其它目标文件一样链接到可执行文件main中，
2i
么动态链接器来做动态链接（我们用-dynamic-linker/lib/ld-linux.so.2指定了动态链接
如果需要做动态链接，
器)
_libc_start_main在其它几个目标文件中也没有定义,
0804849c :
Disassembly of section .fini:
080482e0 :
08048274 :
Disassembly of section .init:
80483cb:
80483ad:
S
/usr/lib/gcc/i486-linux-gnu/4.3.2/../../../../lib/crtn.o
80483c8:
80483c4:
8
8
80482
804826
8048274:
3048394:
dunp[qo
e3:
e0:
:
file format elf32-i386
-d main 
8d
588
，就查看这个程序指定了哪些共享库（我们用-1c指定了1ibc）以及用什
J8
888
5
86
3
8
5
3
6
5
e5
8%
ed
e5
好好记
08
10
04
，首先查看它有没有需要动态链接的未定义符号。
所以链接在一起就没问题了。crt1.o还有一个未定
push
mov.
push
ushl
9
2
 所以在可执行文件main中仍然是个未
%el
%ebp
$0x8,%esp
$0xl0,%esp
%esp,ebp
%ebp
%esp,%ecx
%ebp,%ebp
bx
dqa'ds
0x4(%ecx)
esp,%ebp
L:
---
## Page 305
数终止进程而不返回到启动例程，
回值最终被传给_exit系统调用，
的函数，
也就是说,
回值被启动例程得到，
由于main函数是被启动例程调用的，
传了参数而不用是没有问题的，少传了参数却用了则会出问题。
数给main函数，这两个参数的含义我们学了指针以后再解释。我们到目前为止都把main函数的原型
解
这
汇编中肯定是找不到的，
的）
用main函数。
首
动态链接的过程。
三条指令位于.plt段而不是.text段，·plt段协助完成动态链接的过程。我们将在下一章详细讲
首先将一系列参数压栈，
，则它调用main函数的形式是：
 080482e0 :
int main(void)
#include 
exit(main(argc, argv));
Disassembly of section .plt:
Disassembly of section .text:
它首先做一些清理工作，
80482cf:
80482ca:
80482c4:
80482fc:
80482f7:
80482f6:
80482f5:
80482
80482
80482
80482e2:
···
30482
8
启动例程得到main函数的返回值后，
由于
ea:
2e9:
2e8:
2e5:
exit(4);
，如果将启动例程表示成等价的C代码（实际上启动例程一般是直接用汇编写
 这也是C标准允许的，
然而我们找到了这个：
8
开
e8
68
S
S
9
F
8
2
3
6
e
do
8
2
℃4 
01
ed
成为进程的退出状态。我们也可以在main函数中直接调用exit函
然后调用上一
88
：fo
例如：
ff
0
0
 所以从main函数return时仍返回到启动例程中，
0
ao
和和
环0
ff
80 
0
，如果你认真分析了上一
08
：会立刻用它做参数调用exit函数。exit也是libc中
_libc_start_main在完成初始化工作之后会调
 char *argv[]）,
，所以这个库函数的指令在可执行文件main的反
push
push
push
and
XO
r
80482c4
$0x80483c4
%esi
%ecx
%e:
%eax
*0x804a004
0x8
一节的习题，你就应该知道，
也就是说启动例程会传两个参
，main函数的返
main函数的返
---
## Page 306
含头文件unistd.h，以后还要详细解释这两个函数。
指不指定返回值也就无所谓了。
回值，
注意,
且被Shell解释成无符号数，如果将上面的代码改为exit(-1);或return-1;，则运行结果为
按照惯例，退出状态为0表示程序执行成功，
态：
这样和int main(void）{return 4；}的效果是一样的。在Shel中运行这个程序并查看它的退出状
1.函数调用
如果声明一个函数的返回值类型是int，
255
SS
SS
echoout
全国嵌入式人才培训基地
，退出状态非0表示出错。注意，退出状态只有8位，
起始页
，函数中每个分支控制流程必须写return语句指定返
上一级
，编译器是允许的，因为它都没有机会返回了，
 编译器通常是会报警告的，
3.变量的存储布局
，但如果某