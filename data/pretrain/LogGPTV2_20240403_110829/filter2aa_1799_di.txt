### ETW Registration and Initialization

#### ETW Registration
The `ETW registration` (internally referred to as `EtwRegistration`) object type allows a provider to be registered from a user-mode application. This registration process is essential for enabling the provider to generate and log events.

1. **Bugcheck Callback Registration**:
   - Registers the ETW bugcheck callback, which is used to dump logger session data in the bugcheck dump.

2. **Global Logger and Autologgers Initialization**:
   - Initializes and starts the Global logger and Autologgers sessions based on the `AutoLogger` and `GlobalLogger` registry keys located under `HKLM\System\CurrentControlSet\Control\WMI`.

3. **Kernel Event Providers Registration**:
   - Uses the `EtwRegister` kernel API to register various NT kernel event providers, such as Kernel Event Tracing, General Events, Process, Network, Disk, File Name, IO, and Memory providers.

4. **WNF State Publication**:
   - Publishes the ETW initialized WNF state name to indicate that the ETW subsystem is initialized.

5. **SystemStart Event Logging**:
   - Writes the `SystemStart` event to both the Global Trace logging and General Events providers. This event logs the approximate OS startup time, as shown in Figure 10-32.

6. **FileInfo Driver Loading**:
   - If required, loads the `FileInfo` driver, which provides supplemental information on file I/O to Superfetch. More details on Proactive memory management are available in Chapter 5 of Part 1.

#### Early Boot Phase Considerations
During early boot phases, the Windows registry and I/O subsystems are not fully initialized, preventing ETW from directly writing to log files. Once the Session Manager (`SMSS.exe`) has correctly initialized the software hive, the final phase of ETW initialization occurs. This phase informs each already-registered global ETW session that the file system is ready, allowing them to flush recorded events from the ETW buffers to the log file.

### ETW Sessions

#### Overview
One of the most important entities in ETW is the `Session` (internally called a logger instance), which acts as a bridge between providers and consumers. An event tracing session records events from one or more providers that a controller has enabled. A session typically contains all the information describing which events should be recorded by which providers and how these events should be processed.

#### Configuration
- **Event Filtering**: Each event generated by a provider can be filtered based on event level (information, warning, error, or critical), event keyword, event ID, and other characteristics.
- **Session Details**: The session configuration can define the time source for event timestamps (e.g., QPC, TSC, or system time), which events should have stack traces captured, and other details.

#### Session Creation and Management
- **APIs**: Sessions are created using the `StartTrace` API and configured using `ControlTrace` and `EnableTraceEx2`.
- **Command-line Tools**: Tools like `xperf`, `logman`, `tracelog`, and `wevtutil` use these APIs to start or control trace sessions.
- **Private Sessions**: A session can be private to the process that creates it, eliminating the overhead associated with kernel-mode transitions. Private ETW sessions can only record events for the threads of the process in which they are executing and cannot be used with real-time delivery.

#### Internal Architecture
- **Data Structures**: An ETW session is represented internally by an `ETW_LOGGER_CONTEXT` data structure, which contains pointers to the session memory buffers where events are written.
- **Validation and Allocation**: The `StartTrace` API validates parameters and copies them into a data structure used by the `NtTraceControl` API to invoke the internal `EtwpStartLogger` function. This function checks for free space in the global sessions array, generates a session GUID if not specified, and initializes the session.
- **Security Descriptor**: ETW queries the session’s security descriptor from the `HKLM\System\CurrentControlSet\Control\Wmi\Security` registry key. If no security descriptor exists, a default one is used.

#### Experiment: Enumerating ETW Sessions
- **XPERF Tool**: Use the `XPERF` tool, part of the Windows Performance Toolkit, to enumerate active ETW sessions. The command `xperf -Loggers` can be used, and the output can be redirected to a text file for easier analysis.
- **Example Output**: The tool decodes and displays session configuration data, including buffer sizes, number of buffers, and trace flags.
- **Performance Monitor**: The Windows Performance Monitor can also enumerate ETW sessions and display their configurations, including the security descriptor.

### ETW Providers

#### Overview
A provider is a component that produces events, and it must be registered with ETW before generating any events. A controller application enables the provider and associates it with an ETW session to receive events. If no session has enabled a provider, it will not generate any events.

#### Registration
- **APIs**: Different types of providers use specific APIs for registration, such as `EventRegister` for user-mode and `EtwRegister` for kernel-mode.
- **Internal Function**: All provider types eventually call the internal `EtwpRegisterProvider` function, which allocates and initializes an `ETW_GUID_ENTRY` data structure representing the provider.
- **Access Check**: For user-mode registrations, the NT kernel performs an access check on the calling process’s token, requesting the `TRACELOG_REGISTER_GUIDS` access right.
- **Hash Table**: The new `ETW_GUID_ENTRY` is inserted into a hash table in the global ETW per-silo data structure, using the provider’s GUID as the key.

#### Data Structures
- **ETW_REG_ENTRY**: Represents a single registration, tying the provider to the process and session that requested its registration.
- **ETW_GUID_ENTRY**: Contains important information such as the provider GUID, security descriptor, reference counter, and enablement information.

#### Example
Figure 10-34 illustrates the relationships between the `ETW_GUID_ENTRY` and `ETW_REG_ENTRY` data structures, showing how multiple processes can register for the same provider.

This structured and detailed approach ensures clarity and coherence in explaining the ETW registration, initialization, and session management processes.