它。此外，请大家同时确认一下 patchentrypoint.cpp，这个程序中的
PatchEntryPoint 函数可以将其他函数的入口临时改为死循环（FB
FE），目的是等待 DLL 注入完成。
5.2.5 DLL 的程序逻辑
接下来我们来看看 DLL 中包含怎样的逻辑。
请大家看 chap05\ropguard_cheap\ropguard 中的 dllmain.cpp，这里进行了
ROPGuard 类的定义以及全局声明。用 ReadROPSettings 读取配置，再
用 PatchFunctions 给各函数打补丁。
假设我们对 WinExec 函数打补丁，其结果是将 WinExec 的开头替换成
jmp 指令。
▼ kernel32:WinExec（打补丁前）
7C8623AD > 8BFF MOV EDI,EDI
7C8623AF 55 PUSH EBP
7C8623B0 8BEC MOV EBP,ESP
7C8623B2 83EC 54 SUB ESP,54
7C8623B5 53 PUSH EBX
我们将开头的 5 个字节改为 jmp 指令看看。
▼ kernel32:WinExec（打补丁后）
7C8623AD >-E9 4EDC2D84 JMP 00B40000
7C8623B2 83EC 54 SUB ESP,54
7C8623B5 53 PUSH EBX
由于 jmp 指令需要占用 5 个字节，因此函数开头原本的内容会被覆盖。
MOV EDI,EDI
PUSH EBP
MOV EBP,ESP
上面的内容会被替换成 JMP 00B40000。这样一来，当调用 WinExec
时，程序会跳转到 00B40000。
那么让我们看看 00B40000 的指令是什么。
// 00B40000
00B40000 81EC 04000000 SUB ESP,4
00B40006 60 PUSHAD
00B40007 54 PUSH ESP
00B40008 68 F876D329 PUSH 29D376F8
00B4000D E8 7E344C0F CALL ropguard.10003490
00B40012 81C4 24000000 ADD ESP,24
00B40018 8BFF MOV EDI,EDI
00B4001A 55 PUSH EBP
00B4001B 8BEC MOV EBP,ESP
00B4001D -E9 9023D27B JMP kernel32.7C8623B2
最后的 JMP kernel32.7C8623B2 会跳转到 WinExec 开头的 jmp 指令后
面。
而被 jmp 指令覆盖掉的那些指令，则被移动到了 00B40018 后面。
MOV EDI,EDI
PUSH EBP
MOV EBP,ESP
也就是说，我们等于恢复了原本的 WinExec 逻辑。
CALL ropguard.10003490 是一个判断逻辑，用来判断 WinExec 是否在
ROP 下被运行，也就是说，这里调用了一个检查子程序。
为各函数打好补丁之后，当这些函数被调用的时候，就会自动运行检查
子程序。
5.2.6 CALL-RETN 检查
我们来看一个最简单的 CALL-RETN 检 查（源代码见
chap05\ropguard_cheap\common）。
▼ ropcheck.cpp
// ropcheck.cpp
#include 
#include 
#include "ropsettings.h"
#include "debug.h"
#include 
#include 
#include 
#include 
using namespace std;
void ReportPossibleROP(string &report)
{
string messageboxtext;
messageboxtext = ""
"ROPGuard has detected a possible threat.\n"
"Problem details:\n\n" + report;
if(MessageBoxA(GetForegroundWindow(),
messageboxtext.c_str(), "ROPGuard", MB_OKCANCEL) == IDOK)
{
ExitProcess(1);
}
}
int PrecededByCall(unsigned char *address)
{
if(*(address-5) == 0xE8)
return 1; // ROP检查子程序，在CheckReturnAddress中调用
return 0;
}
int CheckReturnAddress(
DWORD returnAddress, DWORD functionAddress, DWORD *registers)
{
if(!PrecededByCall((unsigned char *)returnAddress)){
stringstream errorreport; // 调用CheckReturnAddress
errorreport preserveStack));
if(!CheckReturnAddress(returnAddress, functionAddress, registers)) // 开始检查
return;
// 在此处添加新的检查代码
return;
}
用汇编语言来表示 call 指令需要占用 5 个字节。
00469127 |. 3D 21210000 CMP EAX,2121
0046912C |. 72 0E JB SHORT 0046913C
0046912E E8 5DFF4990 CALL 90909090 // 占用5个字节
00469133 90 NOP
00469134 90 NOP
也就是 E8 + 调用地址，一共 5 个字节。
由于这 5 个字节肯定是以 E8 开头的，因此 PrecededByCall 中会判断“返
回目标地址向前 5 个字节是否为 E8”，如果是则返回 1，代表检测到匹
配的 call 指令，属于正常调用的返回。
如果返回目标地址向前 5 个字节不是 E8，则有可能是 ROP，因此返回
0，并显示 ReportPossibleROP 消息。
5.2.7 如何防止误判
这样简单粗暴的方法貌似很容易误判，因为并非所有的 call 都是 5 个字
节。
▼ 2 个字节的情况
00469127 |. 3D 21210000 CMP EAX,2121
0046912C |. 72 0E JB SHORT 0046913C
0046912E FFD0 CALL EAX 只有2个字节
00469130 90 NOP
00469131 90 NOP
▼ 还有 7 个字节的情况
00469127 3D 21210000 CMP EAX,2121
0046912C 72 0E JB SHORT 0046913C
0046912E 9A 90909090 9090 CALL FAR 9090:90909090
00469135 90 NOP 7个字节也可以
00469136 90 NOP
要防止误判，必须考虑到所有不同长度的 call 指令以及不同的指令值。
比如说，有些 call 只需要 3 个字节。
此外，我们还可以检查当前所在地址是否就是 call 的目标地址。例如
CALL EAX 时，可以检查 EAX 和 EIP 的值是否一致。
5.2.8 检查栈的合法性
除了 CALL-RETN 匹配性之外，还有什么可以检查的要素呢？
比如说，如果可以获取栈的地址范围，并检查 esp、ebp 寄存器的值是
否位于该范围内，也能够识别出异常调用。
int CheckStackPointer(unsigned long stackPtr)
{
unsigned long stackBottom, stackTop;
GetStackInfo(&stackBottom, &stackTop);
if((stackPtr  stackTop))
{
stringstream errorreport;
errorreport maxStackFrames; i++){
newFramePtr = (DWORD *)(*(framePtr));
returnAddress = (DWORD *)(*(framePtr+1));
if(!returnAddress) break;
if(!PrecededByCall((unsigned char *)returnAddress)) {
stringstream errorreport;
errorreport  stackTop))
{
stringstream errorreport;
errorreport << "Frame pointer is outside of stack.";
errorreport << " Frame pointer: ";
errorreport << std::hex << (unsigned long)framePtr;
errorreport << " Original frame pointer: ";
errorreport << std::hex << (unsigned long)
originalFramePtr;
ReportPossibleROP(errorreport.str());
return 0;
}
if((unsigned long)newFramePtr <= (unsigned long)framePtr){
stringstream errorreport;
errorreport << "Next frame pointer is not ";
errorreport << "below the previous one on stack.";
errorreport << " Frame pointer: ";
errorreport << std::hex << (unsigned long)framePtr;
errorreport << " Original frame pointer: ";
errorreport << std::hex << (unsigned long)
originalFramePtr;
ReportPossibleROP(errorreport.str());
return 0;
}
framePtr = newFramePtr;
}
return 1;
上面我们看了一些 ROP 检查的例子。
关于更加详细的内容，大家可以读一读各获奖者的论文、博客以及源代
码。此外，大家也可以尝试自己编写一些原创的检测子程序。
5.3 用 REMnux 分析恶意软件
5.3.1 什么是 REMnux
刚才我们介绍了关于漏洞和攻击的知识，接下来我们来看一看恶意软
件。
REMnux 是一个用于分析恶意软件的操作系统，基于 Ubuntu 开发，主
要用于在 VMware 等虚拟环境下运行。
大家可以从 sourceforge.net 下载最新版。
REMnux
http://zeltser.com/remnux/
http://sourceforge.net/projects/remnux/files/version3/
▲ 在 VMware 上运行 REMnux
用户名和密码如下所示。