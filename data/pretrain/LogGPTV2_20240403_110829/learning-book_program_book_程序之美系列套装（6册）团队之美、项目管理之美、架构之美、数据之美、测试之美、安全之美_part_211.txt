1191
---
## Page 1193
点线。有时，由于他们不太愿意向公众宣传而使大家缺乏了解，他
们大多对歌功颂德没有兴趣。由于它是个人价值的体现，因此在软
件项目中是十分自由的，甚至能够对开发目标设置优先级。在选择
和决定其个人工作优先级时，代码艺术始终是重要的动机。软件总
能完成，是源于有挑战的东西总能引起大家的高度重视。同时，大
家对目标和持续引领结果的兴趣，要小于对过程的兴趣。其选择的
路径往往和管理良好的商业软件所采用的路径不同，因为商业软件
通常要在质量上向最后期限做出妥协。如果认同妥协是一个基本原
则，那么通常认为是并源软件项目正处于向商业软件或“不够并源”
项目转变的信号。出现这种情况，往往是主要的软件并发成员成立
了一个公司来运行该项目，基金合伙人声称将控制主要的责献者，
或者项目本身已经停止了创新，逐渐转成了维护模式。
开源软件项目所承载的各种类型的组织结构都会遇到阻力。贡献者
加入KDE项目可能有多种原因，但享受项目的官僚作风肯定不是其
中的一个。加入开源软件项目的人，通常都十分清楚使用和保护其
自由选择权。同时，大家都认可需要一种组织形式，虽然可能是不
太正式的。虽然几乎所有技术挑战对于良好的团队来说都不是问
题，但正式的组织结构仍然可以提高效率。许多并源软件项目之所
以解散，都是因为策略上的范围决定是由最有影响力的团队成员独
断专行的。寻找一种正式的组织形式，是解决项目面临问题的有效
方法，此时如何不对未来的技术开发产生影响，是KDE发展历史上
的一个关键（或许是唯一的）步骤。实际的情况是，KDE社区寻找
到了一种稳定、被认可的组织结构，这对社区的长期稳定发展作了
重要的贡献。
在1996年，KDE创建了代表KDE贡献者的KDEe.V。一个e.V，或称
为"eingetragener联盟”是德国传统的非赢利组织，绝大多数的KDE贡
献者当时都聚集在该组织中。驱使成立该组织的主要动力是该项目
必须成为一个加入FreeQt基金会的合法主体。FreeQt基金会是Qt制
造商Trolltech公司和KDE项目之间的约定，用来确保KDE永远能够
将Qt作为免费的工具集来使用。它确保了即使Trolltech停止开发和
发布Qt的免费版本，那么最后发布的免费版本的使用也可以无须获
得Trolltech授权。由于Qt免费版本最早并不是采用GPL协议，因此该
协议是十分重要的。直到现在，该基金会巧妙地解决了版权、并发
人员权益等相关问题。该协议之所以重要，是因为KDE贡献者在投
身于一个存在商业化风险的项目时难免会犹豫不决，另外KDE作为
一个项目也必须拥有合理的权力。在此后不久，KDEe.V还注册并
持有了KDE商标，同时也承担起了举办KDE年会的职责。
1192
---
## Page 1194
关于KDE的架构和设计，该组织始终拥有很大的影响力，虽然它并
没有直接管理整个开发过程。由于它假定所有“已完成任务"的KDE
贡献者都是其成员，因此KDEe.V的意见将具有重大影响。同时，
它还是Akademy年度的组织者，这也是绝大多数贡献者唯一聚会和
讨论的机会。它同时还会吸纳投资，主要是发起成员的会员费和捐
赠款，因此还能够对诸如sprint-或targeted会议之类的并发活动提
供资金资助（有时也不提供）。该组织每年的预算和其产生效果相
比，总是令人惊讶的少。开发人员之间的会议经常是自发的，它的
资金起到了杠杆效应。积极的贡献者小组总会尽力完成工作，而无
需一个概述性的目标描述。
Akademy逐渐成了一个众所周知的协会，甚至是独立于KDE社区
的。因为绝大多数的贡献者的确需要一个个人级的会议。由于无法
向任何并发活动分配人力资源或资金，很多范围很广的讨论都需要
通过这样的会议来进行。通过这样的年会收集决策所需的信息，并
进行宽松的协调，这已经成了常态。这个年会通常都是在每年夏天
召开，其他开源软件项目的贡献者也会利用这个机会和KDE社区进
行交流与协商。2007年的年会上所做的决定之一就是将发布周期改
成6个月，这个建议是Ubuntu项目的MarcShuttleworth建议和拥护
的。
Akademy是KDE组织的唯一的全球性会议。除了这场大型会议之
外，还有许多由子项目组举行的小规模会议和一些sprint会议。这些
会议通常举办更加频繁、区域性更强，同时也更有针对性，因此
Akademy通常讨论的是架构性问题，而特定模块或应用程序的设计
问题的讨论则是通过这些小会议完成的。有些子项目组通常会在每
3个月聚会一次，如KOfice和Akonadi开发人员。
在这些选代的并发过程中还有相应的高等级或中等级的评审，它们
相当高效，同时也能够使并发人员对目标和下一阶段任务有清晰的
了解。年会的绝大多数参与者都从中获得了更大的动力，也有效地
提高了开发工作的效率。
KDE的组织和结构说明当前对于一个并源项目而言，无法通过一个
核心执行组来完成整个项目的组织。其结果就是需要一个选代的过
程来尝试和发现符合核心非技术目标的组织结构，以确保其开源，
确保项目基业长青，同时顺应社区的发展需要。对于这个领域而
言，自由不仅仅意味着自由的开发、创造并源的软件，同时意味着
大家不会受到第三方参与者的干扰和影响。诸如公司、政府组织等
1193
---
## Page 1195
外部参与者也会定期参加年会，它们对项目中的发现、经验和贡献
也很感兴趣。不过这些利益相关方（Stakeholder）必须避免通过投
入足够的资源来获得社区的更多投票权。这看起来有点痴心妄想，
不过在其他项目中也曾出现过，KDE社区也明百。因此并源软件项
目的永久和健康与是否确保项目的自由度是直接相关的。主要的技
术目标，是并发人员和提供资金、物资、组织及其他资源的责献者
的支撑因素，也是比较容易达成的。
其结果是形式一个建立了开发过程的、有生命力的、活跃的、充满
活力的社区，贡献者的变动是稳定和健康的，其过程中还充满了乐
趣。同时这反过来也对新责献者产生了更强的吸引力，它也是社区
最重要的资源之一。KDE成功地避免了创建越来越大的规范化组织
的趋势，同时也没有造就独裁者，大家都是尽可能地乐善好施。
KDE是开源社区的原型。
为了理解该社区的实际功能，如何实现架构决策，以及独特的并发
过程对技术性输出如何产生影响，我们接下来就进一步分析两个实
例：Akonadi，针对KDE4.0的个人信息管理基础设施层：
ThreadWeaver，一个用于高级并发管理的小型程序库。
[L]sprint是Scrum开发过程中的一次选代，通常称为"冲刺”。
12.3Akonadi
KDE4.0平台，既是一个开发平台，也是一个依赖许多“支撑部件”
的执行集成应用程序的运行时环境。这些关键的基础设施提供了一
些核心的服务，其他应用程序可以简单地在一个现代的桌面环境中
自由访问。它提供了一个稳固的硬件交互层，负责向桌面环境提供
硬件的相关信息，诸如USB存储设备变得可用、网络掉线等。
Phonon提供了一个在程序中很容易使用的多媒体层，通过它可以完
成各种媒体文件的播放和用户界面元素的控制。Plasma则提供了一
个丰富的、动态的、可缩放的（基于SVG）的用户界面，它要比标
准的办公应用更加丰富。
用户的个人信息，包括电子邮件、约会、任务、日志、博客、收藏
夹、聊天记录、地址薄等，其不仅包括大量的基础信息（数据的内
容）。它还交织着丰富的上下文关系，诸如用户的偏好、社会关
系，以及可以学习的工作上下文，这些对于桌面应用程序提供交互
体验而言都是很有价值的，有效地利用这些信息将可以提供易用
1194
---
## Page 1196
的、深入的、可靠的界面机制。Akonadi框架的目标是提供一个访问
和操作用户个人信息、关联的元数据以及这些数据之间关系的服务
平台。它将从不同来源收集相关的信息，诸如从电子邮件和群件服
务、wb和网格服务以及它所触及的本地应用程序和缓存中收集：
并提供相应的访问机制。Akonadi将成为KDE4.0桌面环境的一个支
撑部件，并且我们将会看到，它的目标甚至是超越于此。
在接下来的小节中，我们将介绍这个大型的、功能强大的框架的历
史，了解它曾经做过的社会、技术和组织方面的努力，以前作者未
来的愿景。同时，我们将进一步审视其技术解决方案，并说明选择
这些方案的理由。
12.3.1背景
在KDE发起小组的并发人员的早期交流中，就并始讨论桌面环境应
该为用户提供哪些应用程序才算完整，处理电子邮件，安排日程，
管理工作任务、地址薄都被认为是用户显然需要的，而且也是十分
重要的。因此KMail、Kaddressbook和KOrganizer（分别是用来处理
电子邮件、联系人和工作任务的应用程序）就成为第一批开发的项
目，很快也就提供了第一个可用的版本。用户的需求比较简单，接
收电子邮件的标准模式是通过本地电子邮件池或POP3服务。电子邮
件的内容并不大，电子邮件的文件夹通常是以mbox格式存储（每个
文件夹以一个连续的纯文本文件存储）。电子邮件中HTML格式的
内容对于KDE所针对的用户群体而言通常是不需要的，各种类型的
多媒体内容是很少见的，加密和数字签名也是相当少见的。沿着这
一思考线索，在地址簿、日历中的自定义数据格式都是基于文本
的，全部信息都将以易于管理的形式存储。要编写一个能够被其他
KDE开发人员，以及KDE第一次发布的用户而言，快速引用、功能
足够强大的基本的应用程序还是相对简单的。
个人信息管理（PIM）应用程序的早期和持续成功，被证明对于后
续的并发而言是一把双刃剑。随着因特网和计算机应用的不断普
及，PIM问题领域开始变得越来越复杂。诸如IMAP之类的访问电子
邮件的新形式，诸如maildir之类的电子邮件存储格式，都开始被集
成进来。很多工作小组开始通过群件服务来共享日程信息和地址
簿，或者通过如vcal/ical或vcard之类的新格式存储在本地。存储在
LDAP服务器上的公司和大学的姓名地址录逐渐发展到数万条之
多。希望使用KDE应用程序的用户并始认识到这些变化，并很快接
受了这些新功能。加上参与PIM应用程序开发的贡献者并不多，其
1195
---
## Page 1197
带来的结果是其基础架构并没有进行重新思考，也没有随着新功能
的增加来进行相应的清理和更新，代码的总体复杂度在不断提高。
诸如对电子邮件存储层的访问必须是同步的并且不支持并发，将整
个地址簿读到内存中是合理的，用户不会穿越不同时区之类的基本
假设在此时仍然是被认同的，也是并发工作的基础，毕竞这些修改
所带来的成本是超出时间和资源限制的。这对于电子邮件应用程序
KMail而言是绝对的问题，它将会造成后续的演化版本变得令人不
快、难以理解、难以扩展和维护，而且庞大和功能臃肿。甚至，这
些工作都是由不同的并发人员贡献的，没有人敢对其内核做太大的
修改，害怕引发基于他们工作的并发人员的愤怒，这将使他们无法
正常地阅读和编写电子邮件。
随着PIM应用程序使用越来越广泛地在不同领域使用，基于这些应
用程序的东西也越来越多，不仅仅涉及最初的忠实的并发人员，还
吸引了许多新的贡献者。越来越多KDE其他领域甚至是其他并源项
目的成员都希望加入这个社区，以便降低学习曲线、减少错误使用
的风险，例如它们影响一些企业级的加密功能，即使充分了解也无
法自己对其进行测试。另外（或许是部分原因）还有一些非技术的
因素，它会使社交气氛（KMail犹为明显）变得不太友好。讨论经
常变得激烈、不友好，从个人偏好出发的批评变得越来越常见，尝
试加入该团队的责献者并始发现气氛不太友好。不同应用程序的各
自工作几乎是相互隔离的。在KMail的维护团队中甚至出现了一些
不太发好的争论。这些对于KDE社区而言是十分罕见的，这也使得
其在社区内的声誉无法路身第一流。
在不断发展的个人应用程序之间，对集成与融合的需求越来越多，
用户也越来越希望能够通过一个公共的外壳应用程序访问电子邮件
和日程组件，基于这些组件的个人应用也将发生一些变化。他们就
开始着手实现更多的交互功能，在接口上达成了一致，就计划和开
发进度做了一些交流，开始考虑诸如通过Kontact群件提供的保护机
制来标识自己的成果、实现各自负责领域之间的命名统一。与此同
时，由于有许多外部的、商业性的利益相关方开始对KDEPIM应用
程序和Kontact产生了兴趣，因此纷纷推动KDEPIM社区采用整体的
方法实现一致的交流，因此能够更可靠、更专业化地实现相互之间
的交互。这些变化有效推动了PIM小组的发展进程，使其逐渐发展