Consider a simplified version of the .d.ts file for 'nouislider':
    declare namespace myFramework {
        interface Static {
            create(blahArray: any[]): Instance;
        } 
        interface Instance {
            /**
             * Returns 0, 1, or 2, depending on if the stars align.
             */
            doFoo(): number
        }
    }
    declare var myFramework: myFramework.Static;
`doFoo` currently returns one of 3 different values. `number` is a little more
broad than one would prefer, so one might be tempted to say "I know, I'll use
a const enum!":
    declare namespace myFramework {
        interface Static {
            create(blahArray: any[]): Instance;
        } 
        interface Instance {
            /**
             * Returns 0, 1, or 2, depending on if the stars align.
             */
            doFoo(): number
        }
        const enum FooReturnValue {
            StarsTotallyAlign,
            StarsTotallyDontAlign,
            EhCloseEnough
        }
    }
    declare var myFramework: myFramework.Static;
Now that person has two problems:
Severity | Code | Description | File | Line  
---|---|---|---|---  
Error | TS2300 | Duplicate identifier 'myFramework'. | myFramework.ts | 1  
Error | TS2300 | Duplicate identifier 'myFramework'. | myFramework.ts | 20  
Apparently, the `FooReturnValue` causes the namespace to be instantiated.
Note:One might say that the solution is to just absorb `Static` into the
`myFramework` namespace and just instantiate it there, which seems reasonable,
but it is still an odd quirk that there is no way to control that a const enum
can instantiate a module