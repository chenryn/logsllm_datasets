Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
This is not the droid you're looking for... 
Christian Papathanasiou 
Nicholas J. Percoco 
June 21st, 2010 
Trustwave 
- 2 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
Table of Contents 
1	
   EXECUTIVE SUMMARY............................................................................................ 3	
1.1	
About the authors.................................................................................................. 4	
2	
   INTRODUCTION TO GOOGLE ANDROID ................................................................. 5	
3	
   MOTIVATIONS BEHIND THIS WORK ...................................................................... 7	
4	
   LINUX KERNEL ROOTKITS...................................................................................... 9	
4.1	
Hurdles we faced when developing the Android rootkit........................................... 11	
4.1.1	
   Retrieving the sys_call_table address ......................................................... 11	
4.1.2	
   Compiling against the HTC Legend Linux kernel source code........................ 12	
4.1.3	
   Enabling system call debugging ................................................................. 14	
5	
   THE ANDROID ROOTKIT....................................................................................... 18	
5.1	
sys_read system call hooking ............................................................................... 18	
5.2	
Hiding from the user and from the OS................................................................... 19	
5.3	
Implications ........................................................................................................ 20	
6	
   CONCLUSIONS...................................................................................................... 22	
7	
   REFERENCES......................................................................................................... 23	
Trustwave 
- 3 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
1 Executive Summary 
Android is a software stack for mobile devices that includes an operating system, middleware 
and key applications and uses a modified version of the Linux kernel. In 2010 around 60,000 
cell phones running the Android operating system are shipping every day. Android platform 
ranks as the fourth most popular smartphone device-platform in the United States as of 
February 2010. As more and more device manufacture adopt the Android platform this market 
share is likely to grow and start to rival that belonging to other top players. 
To date, very little has been discussed regarding rootkits on mobile devices. Android forms a 
perfect platform for further investigation and research due to its use of the Linux kernel. The 
kernel is part of the almost 20-year open-source operating system whose source code is 
available to anyone. In addition, there exists a very established body of knowledge regarding 
kernel-level rootkits in Linux.  
As part of this research, we have developed a kernel-level Android rootkit in the form of a 
loadable kernel module. As a proof of concept, it is able to send an attacker a reverse TCP over 
3G/WiFI shell upon receiving an incoming call from a ‘trigger number’.  This ultimately results in 
full root access on the Android device.  
The implications of this are huge; an attacker can proceed to read all SMS messages on the 
device/incur the owner with long-distance costs, even potentially pin-point the mobile devices’ 
exact GPS location. Such a rootkit could be delivered over-the-air or installed alongside a rogue 
app. 
This whitepaper aims to take the reader down this path of development, describing how the 
PoC was written and laying the foundations for our research to be taken further and in-turn 
result in the development of controls to mitigate against such an attack.  
Trustwave 
- 4 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
1.1 About the authors 
Nicholas J. Percoco is the head of SpiderLabs at Trustwave - the advanced security team that 
has performed more than 750 cyber forensic investigations globally, thousands of penetration 
and application security tests for Trustwave clients. In addition, his team is responsible for the 
security research that feeds directly into Trustwave's products through real-time intelligence 
gathering. He has more than 15 years of information security experience. Nicholas acts as the 
lead security advisor to many of Trustwave's premier clients by assisting them in making 
strategic decisions around various security and compliance regimes. As a speaker, he has 
provided unique insight around security breaches and security trends to public and private 
audiences throughout North America, South America, Europe, and Asia including security 
conferences such as Black Hat, DEFCON, SecTor and You Sh0t the Sheriff. Prior to Trustwave, 
Nicholas ran security consulting practices at both VeriSign and Internet Security Systems. 
Nicholas holds a Bachelor of Science in Computer Science from Illinois State University. 
Christian Papathanasiou is a Security Consultant for Trustwave. He is part of SpiderLabs - the 
advanced security team at Trustwave responsible for incident response, penetration testing and 
application security tests for Trustwave’s clients. Christian’s research interests include Linux 
kernel rootkit/anti-rootkit technology, algorithmic trading and web application security. He has 
consulted internationally in the space/defense/commercial and financial sectors in all matters 
relating to Information Security. Christian has presented at various European Information 
Security conferences such as AthCon and Black Hat Europe. Christian holds an MSc with 
Distinction in Information Security from the Information Security Group at Royal Holloway, 
University of London and a CISSP. Christian is also a qualified Chemical Engineer having 
graduated with a MEng(Hons) in Chemical Engineering from the University of Manchester 
Institute of Science and Technology. 
Trustwave 
- 5 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
2 Introduction to Google Android  
Android is a software stack for mobile devices that includes an operating system, middleware 
and key applications and uses a modified version of the Linux kernel. Right now around 60,000 
cell phones running the Android operating system are shipping every day. Android platform 
ranks as the fourth most popular smartphone device-platform in the United States as of 
February 2010. As more and more device manufacture adopt this platform Android’s market 
share is likely to grow and start to rival that belonging to other top players. 
The Android architecture is comprised of multiple layers, a brief synopsis of which can be seen 
in figure 1.0.  
Figure 1.0 From Google (1) depicting the Google Android architecture and assorted 
subsystems. 
Trustwave 
- 6 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
At the very foundation of the Android platform lies the Linux 2.6.x kernel. This serves as a 
hardware abstraction layer and offers an existing memory management, process management, 
security and networking model on top of which the rest of the Android platform was built upon.  
The Linux kernel is where our rootkit will lie; this will be discussed later in the whitepaper.  
On top of the Linux kernel lie the native libraries. These provide most of the functionality of the 
Android system. Of interest here from a rootkit perspective are the SQLite, Webkit and SSL 
libraries.  
In the case of SQLite, it is the main storage/retrieval mechanism used by Android for such 
things such as call records and inbound/outbound SMS and MMS storage. Webkit is an open 
source library designed to allow web browsers to render web pages. Finally SSL is used for all 
crypto requirements. 
These three are interesting from a subversion perspective as retrieving SMS/MMS messages or 
intercepting browsing or by hooking the pseudo random number generator (PRNG) subsystem 
of the SSL library with static low numbers can all result in a loss of confidentiality and integrity. 
The main component of the Android runtime is the Dalvik VM. According to Wikipedia (2) 
“Dalvik is the virtual machine on Android mobile devices. It runs applications which have been 
converted into a compact Dalvik Executable (.dex) format suitable for systems that are 
constrained in terms of memory and processor speed.” 
Moving on to the application framework, at the higher operating system layers we have the 
user applications that your average user interacts with on their mobile phone. These include 
everyday apps such as the phone application, the home application and others that come with 
the phone, are downloaded from the Google Android Market, or installed by the end-user.  
What must be kept in mind from figure 1.0 is that all top layer applications utilize the Linux 
kernel for their I/O with the underlying hardware at one stage or another. Therefore by 
hijacking the Linux kernel we have in effect hijacked all higher layer applications and can 
modify phone behavior at will.  
It is important to note that complete abstraction of the platform’s kernel from the end-user is 
both an advantage from a usability standpoint, especially within a consumer device, and a 
disadvantage from security awareness standpoint. A process operating below the application 
framework layer behaving modestly can completely subvert the attention of the user fairly 
easily. Even a process which causes performance issues, will still subvert the attention to 
nothing more than an Android “bug”.  
Trustwave 
- 7 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
3 Motivations behind this work 
According to the Mobile Internet Report (3) published by Morgan Stanley, by 2020, there will be 
approximately 10 Billion mobile devices. This in effect means that over the next 10 years we will 
witness explosive permeation of mobile-internet enabled handsets with social networking and 
VoIP serving as key drivers for this growth. 
As of Q4 2009, 2.xG cellular networks have ubiquitous coverage of 90% of the global 
population with 4B+ subscribers on various cellular networks. At the time of the Morgan Stanley 
research report, there were 485M subscribers on 3G networks primarily concentrated in 
developed/western markets.  
Emerging market penetration is still low. However as socio-economic factors improve, and due 
to the social status that smartphones carry or are perceived to carry this figure is likely to 
explode over the next couple of years as well.   
60% of users carry their phones with them at all times, even when at home. When you look at 
just the population of users in the business world, this number is likely closer to 100%. Such 
locations could also include the boardroom; a chief executive is more likely to take his mobile to 
a meeting then he is his laptop for instance. Many high profile and busy individuals likely sleep 
with their phone.  
Your typical smartphone today has the processing power of your average PC 8 years ago but 
also goes much further then that; it provides always-online functionality through 3G 
connectivity and is location aware through GPS synchronization. 
With the rapid uptake of mobile banking and the slow shift to more standardized platforms, 
financial institutions are offering their clients services such as performing fund transfers while 
travelling, receiving online updates of stock price movements or even trading while stuck in 
traffic. Therefore, the necessity to trust the mobile device on which you are inputting your 
banking information is quickly becoming a growing concern. One would be hard pressed to find 
a user (even in the information security community) that would think twice before reading or 
accessing sensitive information via their smartphones, while those same individuals might not 
perform the same activity from a public computer or kiosk.  
These facts make smartphones very interesting targets for malware authors and not only. 
According to Stephen Gleave (4) “For years, communication service providers (CSPs) wanting 
an operating license have had to meet set conditions. One such condition is that they must 
work with law enforcement to gather intelligence that may be used as evidence in the 
prosecution of criminals. Governments around the world have passed legislation that mandates 
this co-operation and have continually strived to update these statutes as technology advances 
and criminal communications become more sophisticated”. 
Trustwave 
- 8 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
This was recently seen in the Etisalat and SS8 case as reported by BBC News (5) whereby a 
supposed performance update was pushed to all Blackberry Etisalat subscribers in the United 
Arab Emirates. In reality, this was a piece of malware written by the US Company- SS8, which 
according to their website is “a leader in communications intercept and a worldwide provider of 
regulatory compliant, electronic intercept and surveillance solutions”. 
We too will be approaching this topic from the perspective of an operator wishing to perform 
surveillance of deployed Android handsets in order to satisfy regional (un?)lawful-interception 
directives such as in the case of Etisalat. Hopefully, what we will accomplish, however, will be 
performed in a more elegant and stealthy fashion. 
To perform the below attacks as an attacker pre-supposes that a vector exists which can be 
exploited in order to obtain root access on the Android device and subsequently load the 
rootkit.   
Whilst work has been done by other researchers towards this avenue of attack, specifically by 
sending malformed SMS messages by Charlie Miller and Collin Mulliner  (6) this is not something 
we will be covering further in this paper. We pre-suppose that such a vector exists, waiting to 
be discovered, or that a mobile operator deploys the rootkit pre-packaged with all shipped 
Android phones they sell just waiting to be activated.  
Finally, we chose Android, not because we have a bone to pick with Google, but because it 
utilizes the Linux operating system on which there exists a very established body of knowledge 
regarding kernel-based rootkit creation.  
Extrapolating this knowledge to the Android platform is what we will now discuss but consider 
the reader of this whitepaper to be familiar with offensive Linux kernel module development.  
Trustwave 
- 9 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
4 Linux kernel rootkits 
According to Dino Dai Zovi (7) “Loadable Kernel Modules (LKMs) allow the running operating 
system kernel to be extended dynamically. Most modern UNIX-like systems, including Solaris, 
Linux, and FreeBSD, use or support loadable kernel modules which offer more flexibility than 
the traditional method of recompiling the monolithic kernel to add new hardware support or 
functionality; new drivers or functionality can be loaded at any time. A loaded kernel module 
has the same capabilities as code compiled into the kernel. 
Most modern processors support running in several privilege modes. Most processors support 
two modes, user mode and supervisor mode. Some processors, such as Intel 386 or greater 
processors, support more modes (although most operating systems only use two of them). User 
processes (even processes running as the superuser) run in user mode while only kernel 
routines run in supervisor mode. The mode distinction allows the operating system to force user 
processes to access hardware resources only through the operating system’s interfaces.The 
mode distinction is very important in the operating system’s virtual memory, multitasking, and 
hardware access subsystems. The method by which a user mode process requests service from 
the operating system is the system call. System calls are used for file operations (open, read, 
write, close), process operations (fork, exec), network operations (socket, connect, bind, listen, 
accept), and many other low-level system operations. 
System calls are typically listed in /usr/include/sys/syscall.h in Linux. In the kernel, the 
system calls are typically stored in a table, called the sys_call_table (an array of pointers) 
indexed by the system call number. When a process initiates a system call, it places the number 
of the desired system call in a global register or on the stack and initiates a processor interrupt 
or trap (depending on the processor architecture)”. 
Again from Dino Dai Zovi (7), “Rootkits” are software packages installed to allow a system 
intruder to keep privileged access. Traditional rootkits typically replace system binaries like ls, 
ps, and netstat to hide the attacker’s files, processes, and connections, respectively. These 
rootkits were easily detected by checking the integrity of system binaries against known good 
copies (from vendor media) or checksums (from RPM database or a File Integrity Monitoring 
(FIM) utility). Kernel rootkits do not replace system binaries; they subvert them through the 
kernel. 
For example, ps may get process information from /proc (procfs). A kernel rootkit may subvert 
the kernel to hide specific processes from procfs so ps or even a known good copy from vendor 
media will report false information. In addition, a malicious kernel module can even subvert the 
kernel so that it is not listed in kernel module listings (from the lsmod command). 
Trustwave 
- 10 - 
Copyright © 2010 Trustwave. All Rights Reserved. 
A Whitepaper for DEF CON 18, July, 2010 
Kernel rootkits do this by redirecting system calls. As a kernel module has as much power as 
any other kernel code, it can replace system call handlers with its own wrappers to hide files, 
processes, connections, etc. The file access system calls can also be overwritten to cause false 
data to be read from or written to files or devices on the system”. 
By redirecting system calls we mean using handler functions (hooks) that modify the flow of 
execution. A new hook registers its address as the location for a specific function, so that when 
the function is called, the hook is executed instead.  
Referring back to Figure 1.0 from Google (1), we see that by creating a Linux loadable kernel 
module (LKM), which hijacks system calls and modifies their behavior we can in effect modify 
phone behavior that will not only subvert the platform layers above the kernel, but also 
ultimately subvert the end-user himself.   
However, there are certain hurdles one must overcome before a LKM could be created and 
successfully loaded on the Android operating system.  
The main hurdle we had to overcome was to retrieve the sys_call_table address for the 
running kernel of the device whether this is the emulator itself or the actual mobile phone. 
In addition to the above, to get the module to compile against and successfully load on an 
actual mobile phone- the HTC Legend running Linux 2.6.29-9a3026a7, we need to compile 