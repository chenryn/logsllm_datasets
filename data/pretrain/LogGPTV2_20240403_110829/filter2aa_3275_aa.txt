**Copyright © 2010 Trustwave. All Rights Reserved.**

**A Whitepaper for DEF CON 18, July 2010**

**This is not the droid you're looking for...**

**Authors:**
- Christian Papathanasiou
- Nicholas J. Percoco

**Date: June 21, 2010**

**Trustwave**

---

**Table of Contents**

1. **Executive Summary** .................................................................................................................... 3
1.1. **About the Authors** .................................................................................................................. 4
2. **Introduction to Google Android** ................................................................................................. 5
3. **Motivations Behind This Work** ................................................................................................ 7
4. **Linux Kernel Rootkits** .............................................................................................................. 9
   4.1. **Hurdles We Faced When Developing the Android Rootkit** ............................................... 11
      4.1.1. **Retrieving the `sys_call_table` Address** ............................................................... 11
      4.1.2. **Compiling Against the HTC Legend Linux Kernel Source Code** ........................... 12
      4.1.3. **Enabling System Call Debugging** ......................................................................... 14
5. **The Android Rootkit** ............................................................................................................... 18
   5.1. **Hooking the `sys_read` System Call** ................................................................................ 18
   5.2. **Hiding from the User and the OS** ..................................................................................... 19
   5.3. **Implications** ..................................................................................................................... 20
6. **Conclusions** .............................................................................................................................. 22
7. **References** ............................................................................................................................... 23

---

**1. Executive Summary**

Android is a software stack for mobile devices that includes an operating system, middleware, and key applications, and it uses a modified version of the Linux kernel. As of 2010, approximately 60,000 cell phones running the Android operating system are shipped daily. The Android platform ranks as the fourth most popular smartphone device-platform in the United States as of February 2010. With more device manufacturers adopting the Android platform, its market share is likely to grow and rival that of other top players.

To date, there has been limited discussion regarding rootkits on mobile devices. Android, with its use of the Linux kernel, provides an ideal platform for further investigation and research. The Linux kernel, part of the nearly 20-year-old open-source operating system, has extensive documentation and a well-established body of knowledge on kernel-level rootkits.

As part of this research, we have developed a kernel-level Android rootkit in the form of a loadable kernel module. This proof-of-concept (PoC) can send an attacker a reverse TCP shell over 3G/Wi-Fi upon receiving an incoming call from a 'trigger number,' ultimately resulting in full root access on the Android device.

The implications of this are significant. An attacker can read all SMS messages, incur long-distance costs, and potentially pinpoint the exact GPS location of the mobile device. Such a rootkit could be delivered over-the-air or installed alongside a rogue app.

This whitepaper aims to guide the reader through the development process, describing how the PoC was written and laying the foundation for further research. This will ultimately result in the development of controls to mitigate such attacks.

---

**1.1. About the Authors**

**Nicholas J. Percoco** is the head of SpiderLabs at Trustwave, an advanced security team that has conducted over 750 cyber forensic investigations globally and thousands of penetration and application security tests for Trustwave clients. His team is responsible for the security research that feeds directly into Trustwave's products through real-time intelligence gathering. Nicholas has over 15 years of information security experience and acts as the lead security advisor to many of Trustwave's premier clients. He has provided unique insights into security breaches and trends at conferences such as Black Hat, DEFCON, SecTor, and You Sh0t the Sheriff. Prior to Trustwave, Nicholas ran security consulting practices at VeriSign and Internet Security Systems. He holds a Bachelor of Science in Computer Science from Illinois State University.

**Christian Papathanasiou** is a Security Consultant at Trustwave and a member of SpiderLabs, responsible for incident response, penetration testing, and application security tests for Trustwave’s clients. His research interests include Linux kernel rootkit/anti-rootkit technology, algorithmic trading, and web application security. Christian has consulted internationally in the space, defense, commercial, and financial sectors on all matters related to Information Security. He has presented at various European Information Security conferences, including AthCon and Black Hat Europe. Christian holds an MSc with Distinction in Information Security from the Information Security Group at Royal Holloway, University of London, and is a CISSP. He is also a qualified Chemical Engineer with an MEng(Hons) in Chemical Engineering from the University of Manchester Institute of Science and Technology.

---

**2. Introduction to Google Android**

Android is a software stack for mobile devices that includes an operating system, middleware, and key applications, and it uses a modified version of the Linux kernel. As of 2010, around 60,000 cell phones running the Android operating system are shipped daily. The Android platform ranks as the fourth most popular smartphone device-platform in the United States as of February 2010. As more device manufacturers adopt this platform, Android's market share is likely to grow and rival that of other top players.

The Android architecture is composed of multiple layers, as depicted in Figure 1.0.

**Figure 1.0:** From Google, depicting the Google Android architecture and associated subsystems.

At the foundation of the Android platform lies the Linux 2.6.x kernel, which serves as a hardware abstraction layer and provides memory management, process management, security, and networking. The Linux kernel is where our rootkit will reside, as discussed later in the whitepaper.

Above the Linux kernel are the native libraries, which provide most of the functionality of the Android system. From a rootkit perspective, the SQLite, WebKit, and SSL libraries are of particular interest. SQLite is the main storage/retrieval mechanism used by Android for call records and SMS/MMS storage. WebKit is an open-source library designed to render web pages, and SSL is used for cryptographic requirements.

These libraries are interesting from a subversion perspective because retrieving SMS/MMS messages, intercepting browsing, or hooking the pseudo-random number generator (PRNG) subsystem of the SSL library can result in a loss of confidentiality and integrity.

The main component of the Android runtime is the Dalvik VM, which runs applications converted into a compact Dalvik Executable (.dex) format suitable for systems constrained in terms of memory and processor speed.

Moving to the application framework, the higher operating system layers include user applications that interact with the mobile phone, such as the phone application, home application, and others downloaded from the Google Android Market or installed by the end-user. All top-layer applications utilize the Linux kernel for I/O with the underlying hardware, so hijacking the Linux kernel effectively hijacks all higher-layer applications and allows modification of phone behavior at will.

It is important to note that complete abstraction of the platform’s kernel from the end-user is both an advantage for usability, especially in consumer devices, and a disadvantage for security awareness. A process operating below the application framework layer can easily subvert the attention of the user, even if it causes performance issues, as these may be attributed to an Android "bug."

---

**3. Motivations Behind This Work**

According to the Mobile Internet Report published by Morgan Stanley, by 2020, there will be approximately 10 billion mobile devices. This means that over the next 10 years, we will witness explosive growth in mobile-internet enabled handsets, driven by social networking and VoIP.

As of Q4 2009, 2.xG cellular networks had ubiquitous coverage of 90% of the global population, with over 4 billion subscribers on various cellular networks. At the time of the Morgan Stanley report, there were 485 million subscribers on 3G networks, primarily in developed and western markets. Emerging market penetration is still low but is expected to increase as socio-economic factors improve and due to the social status associated with smartphones.

Sixty percent of users carry their phones with them at all times, even when at home. In the business world, this number is likely closer to 100%, including in boardrooms. Many high-profile and busy individuals likely sleep with their phones. Modern smartphones have the processing power of a PC from eight years ago and provide always-online functionality through 3G connectivity and location awareness via GPS.

With the rapid uptake of mobile banking and the shift to more standardized platforms, financial institutions are offering services such as fund transfers while traveling, online updates of stock price movements, and trading while on the go. Therefore, the necessity to trust the mobile device on which you input your banking information is becoming a growing concern. Users, even in the information security community, often do not hesitate to access sensitive information via their smartphones, while they might avoid doing so from a public computer or kiosk.

These factors make smartphones very attractive targets for malware authors. According to Stephen Gleave, communication service providers (CSPs) must work with law enforcement to gather intelligence that may be used as evidence in criminal prosecutions. This was recently seen in the Etisalat and SS8 case, where a supposed performance update was pushed to all BlackBerry Etisalat subscribers in the United Arab Emirates. In reality, this was malware written by the US company SS8, which provides regulatory-compliant electronic intercept and surveillance solutions.

We will approach this topic from the perspective of an operator wishing to perform surveillance of deployed Android handsets to satisfy regional lawful-interception directives, similar to the Etisalat case. Our goal is to achieve this in a more elegant and stealthy manner.

To perform the attacks described, we assume that a vector exists which can be exploited to obtain root access on the Android device and subsequently load the rootkit. While other researchers, such as Charlie Miller and Collin Mulliner, have explored sending malformed SMS messages, we will not cover this in detail. We assume that such a vector exists, waiting to be discovered, or that a mobile operator deploys the rootkit pre-packaged with all shipped Android phones, ready to be activated.

We chose Android because it uses the Linux operating system, which has a well-established body of knowledge on kernel-based rootkit creation. We will now discuss extrapolating this knowledge to the Android platform, assuming the reader is familiar with offensive Linux kernel module development.

---

**4. Linux Kernel Rootkits**

Loadable Kernel Modules (LKMs) allow the running operating system kernel to be extended dynamically. Most modern UNIX-like systems, including Solaris, Linux, and FreeBSD, support LKMs, which offer more flexibility than recompiling the monolithic kernel to add new hardware support or functionality. New drivers or functionality can be loaded at any time. A loaded kernel module has the same capabilities as code compiled into the kernel.

Modern processors support running in several privilege modes, typically user mode and supervisor mode. User processes, even those running as the superuser, run in user mode, while only kernel routines run in supervisor mode. This distinction allows the operating system to force user processes to access hardware resources only through the operating system’s interfaces. The method by which a user-mode process requests service from the operating system is the system call. System calls are used for file operations (open, read, write, close), process operations (fork, exec), network operations (socket, connect, bind, listen, accept), and many other low-level system operations.

System calls are typically listed in `/usr/include/sys/syscall.h` in Linux. In the kernel, the system calls are stored in a table called `sys_call_table`, an array of pointers indexed by the system call number. When a process initiates a system call, it places the number of the desired system call in a global register or on the stack and initiates a processor interrupt or trap.

Rootkits are software packages installed to allow a system intruder to maintain privileged access. Traditional rootkits replace system binaries like `ls`, `ps`, and `netstat` to hide the attacker’s files, processes, and connections. These rootkits were easily detected by checking the integrity of system binaries against known good copies or checksums. Kernel rootkits do not replace system binaries; they subvert them through the kernel. For example, a kernel rootkit can hide specific processes from `procfs` so that `ps` or a known good copy from vendor media will report false information. A malicious kernel module can even subvert the kernel so that it is not listed in kernel module listings (from the `lsmod` command).

Kernel rootkits redirect system calls by using handler functions (hooks) that modify the flow of execution. A new hook registers its address as the location for a specific function, so that when the function is called, the hook is executed instead.

By creating a Linux loadable kernel module (LKM) that hijacks system calls and modifies their behavior, we can modify phone behavior that subverts the platform layers above the kernel and ultimately subverts the end-user. However, there are certain hurdles to overcome before a LKM can be created and successfully loaded on the Android operating system.

The main hurdle we faced was retrieving the `sys_call_table` address for the running kernel, whether on the emulator or the actual mobile phone. Additionally, to compile the module against and successfully load it on an actual mobile phone, such as the HTC Legend running Linux 2.6.29-9a3026a7, we needed to compile the module against the HTC Legend's Linux kernel source code.

---

**4.1. Hurdles We Faced When Developing the Android Rootkit**

**4.1.1. Retrieving the `sys_call_table` Address**

**4.1.2. Compiling Against the HTC Legend Linux Kernel Source Code**

**4.1.3. Enabling System Call Debugging**

---

**5. The Android Rootkit**

**5.1. Hooking the `sys_read` System Call**

**5.2. Hiding from the User and the OS**

**5.3. Implications**

---

**6. Conclusions**

---

**7. References**

**Trustwave**

---