make应用隐含规则的方法。我们的源文件现在存放在各个子目录里，当make想要应
用标准的.o：.c规则时，必要条件将会是个具有相对路径的文件名，例如lib/ui
ui.c。make会自动将此相对路径传播至工作目标文件，而且会试图更新lib/ui/ui.o。因
此，make会自动地做正确的事。
最后还有一个小问题：尽管make会正确处理文件名路径，不过并非makefile所用到任
何工具都是如此。尤其是当你使用gcc时，自动产生的依存文件将不会包含工作目标目
标文件（targetobjectfile）的相对路径。也就是说，gcc-M的输出将会像这样：
ui.o:1ib/ui/ui.c include/ui/ui.h1ib/db/playlist.h
而不是我们所预期的：
1ib/ui/ui.o:1ib/ui/ui.c include/ui/ui.h 1ib/db/playlist.h
这将会中断头文件必要条件（headerfileprerequisite）的处理。为了修正此问题，我们
会修改sed命令以便加入相对路径信息：
S（SED）'s,\($（notdir$*)\.o\）*:,S（dir $@)\1 $@：，
“调整makefile以便处理各种工具的异常行为”是使用make的时候一般会考虑到的内
容。具可移植性的makefile通常很复杂，这是因为其中必须用到各种工具的异常行为。
现在我们拥有了一个合用的、非递归的makefile，不过它却存在维护的问题。各个
module.mk引l入文件几乎都一样。当其中有-个引l人文件需要变更时，很可能所有引人
文件都需要变更。对于小型项目来说，像我们的mp3player，这将会令人厌烦不已。对
于具有数百个引人文件的大型项目来说，这可能会让开发工作无法进行下去。这个时候
若能使用一致的变量名称以及调整引人文件的内容，将可协助我们修正这些问题。下面
是重构之后lib/codec引l人文件的样子：
local_src:= $(wildcard S(subdirectory)/*.c)
$(eval $(call make-1ibrary,$（subdirectory)/1ibcodec.a,$(local_src)))
此处不会以名称来指定源文件，我们会假设自已要重新编译目录中所有的.c文件。我们
目的顶层makefile中：
---
## Page 143
大型项目的管理
133
#$(call make-library.library-name,source-file-list）
define make-library
libraries += $1
S =+sanos
$1:S(call source-to-object,S2)
$（AR）$（ARFLAGS）$S@ S$^
endef
这个函数会把程序库和源文件添加到相应的变量里去，然后定义具体规则以便建立程序
库。注意，自动变量是如何以另一个美元符号来将S@和$~的求值动作延后到此规则执
行的时候进行的。source-to-object函数用来将源文件列表转换成相应的目标文件：
source-to-object=s（subst.c,.o,s（filter .c,s1))\
s（subst.y..o,S（filter $.y,S1))\
$（subst.l,.o,$（filter $.l,S1))
在这个makefile的前一个版本中，我们并未指出实际的解析器和扫描器源文件是
playlist.y和scanner.l。我们i只是将这些源文件列成它们所产生的.c文件。这迫使我们必
须明确列出它们以及使用一个额外的变量extra_clean。为了修正这个问题，我们会
直接在sources变量中使用.y和./文件，并且让source-to-object函数为我们进行
转换的工作。
除了修改source-to-object，我们还需要另个函数为我们处理yacc和lex的输出
文件，好让clean工作目标能够进行适当的清理工作。generated-source函数的参
数是一份源文件列表，它的输出是一份中间文件列表：
#$icall generated-source,source-file-list)
generated-source=S（substY..c,$（filter $.y,$1))\
$（subst.y..h,$（filter &.y,S1))\
S（subst .1,.c,$（filter 8.1,S1))
有了subdirectory函数的协助，可让我们省略local_dir变量。
subdirectory=S(patsubst 名/makefile，8,
S(word
S(wOrdS S(MAKEFILE_LIST)),$(MAKEFILE_LIST)）)
称。只要使用patsubst，我们就可以从最后被读进的makefile的名称中取出相对路径。
这让我们能够省略loca1_dir变量，并且减少引l人文件之间的差异。
最后一个优化动作（至少是对此例而言），就是使用wildcard来取得源文件列表。这个
方法适合使用在源文件树（sourcetree）未受污染的大多数环境中。然而，我们所工作
树中。这让程序员必须在时间和精力上付出实际的代价，因为当程序员以全局搜索找到
---
## Page 144
134
第六章
很旧、不用的程序代码并将它放回原处之后，程序员将会对它进行维护的工作，而新进
的程序员（或是老的程序员但对某个模块不熟悉）可能会想要对从未使用的程序代码进
行编译或调试的动作。如果你使用的是现代化的源代码控制系统，比如CVS，根本不需
要把不用的程序代码存放在源文件树中（因为它已经被存放在仓库中了），这个时候使
用wildcard就没什么问题了。
include指令还可以进行以下的优化：
modules:= 1ib/codec 1ib/db 1ib/uiapp/player
include S（addsuffix /module.mk,S(modules))
对于较大型的项目而言，当模块列表增长到成百上千个模块时，即使这么做也可能会导
致维护困难的问题。在此情况下，最好将modules模块定义成find命令：
modules := S（subst/module.mk,,$(shel1 find.-name module.mk))
include $(addsuffix /module.mk,$(modules))
这样我们就可以从find的输出中去除文件名的部分，所以modules变量会变得比模
块列表还具通用性。如果不需要这么做，我们当然会省略subst和addsuffix，并直接
把find的输出存入modules变量。例6-3完整地列出了这个非递归makefile的第二个
版本。
例6-3：非递归makefile的第二个版本
#S(call source-to-object,source-file-list)
source-to-object=S（subst.c,.o,S（filter 8.c,$1))\
$（subst.y,.o,s（filter .y,$1))\
$（subst.l,.o,S（filter 8.1,$1))
#$（subdirectory)
subdirectory=$（patsubst&/module.mk，，
PIOM)S
$（WOrdS$(MAKEFILE_LIST)),S(MAKEFILE_LIST)）)
#$(callmake-library,library-name,source-file-list)
define make-library
libraries += $1
sources+=$2
S1:S(call source-to-object.$2)
$(AR)S（ARFLAGS)SS@ $$^
endef
#$(callgenerated-source,source-file-list)
generated-source=$（subst.y..c,S（filter &.y,$1))
$（subst .y,.h,S（filter $.y.$1))
$（subst.l,.c,S（filter$.1,s1))
---
## Page 145
大型项目的管理
135
在这四个变量中收集来自每个模块的信息
#于此处将它们初始设定为简单变量。
modules
:=1ib/codec 1ib/dblib/uiapp/player
programs
:=
libraries
:=
sources
objects
=S（call source-to-object,$(sources))
dependencies = $(subst .o,.d,s(objects))
include_dirs:=lib include
CPPFLAGS
+=S（addprefix-I,$（include_dirs))
vpath &.h $（include_dirs)
MV:=mv-f
RM:=rm-f
SED :=sed
all:
include S（addsuffix/module.mk,$（modules）)
.PHONY:a11
all:$(programs)
.PHONY:1ibraries
libraries:$(libraries)
.PHONY:clean
clean:
$（RM） $（objects)S(programs）$（libraries）$（dependencies）
$（call generated-source,$(sources))
ifneq“$(MAKECMDGOALS)·"clean*
include $(dependencies)
endif
8.c8.h:8.y
S(YAcC.y)--defines $sθ.tmp
S（MV)$@.tmp $@
为每个模块使用一个引入文件是相当可行的做法，而且具有某些优点，但是我并不确定
是否值得这么做。就我个人的经验来说，对于一个大型的Java项目，在单一的顶层
makefile中直接插入所有的module.mk文件，将能提供一个可行的解决方案。此项目包
含了997个独立的模块，大约有两打的程序库以及半打的应用程序。分组后的程序代码
具备若干makefile，这些makefile的长度大约有2500行。一个共享的引l人文件包含了全
局变量、用户自定义函数以及模式规则一一这是另一个长度为2500行的makefile。
---
## Page 146
136
第六章
无论你选择的是单一的makefile还是将模块信息取出放到各个引入文件，非递归式
make对大型项目的编译而言，是一个可行的解决方案。它还可以用来解决你在递归式
make中所遇到的许多典型问题。我所知道的唯一缺点是，当开发人员想要进行递归式
make时，需要转移自己的思考模式（paradigmshift）。
大型系统的组件
今日有两种广受欢迎的开发风格：自由软件开发模式以及商业开发模式。
在自由软件开发模式中，每个开发者多半是靠自己。在此模式中，每个项目仅有一个
makefile文件以及一个README文件，开发者自觉只会获得非常少的协助。而项目的负
责人则想要把事情做好，以及想要从社群中获得大众的帮助，不过他们最想获得的是技
术上的帮助以及让他们持续下去的动力。这并不是批评。就此观点来看，软件应该会被
写得很好，而且不需要排定计划。
在商业开发模式中，存在着不同技术层次的开发者，他们都必须具备开发软件的能力，
以便对开发成果作出贡献。如果有任何开发者不知道怎样完成工作，或是系统无法正确
编译或运行，或是整个开发团队无所事事，都得付出昂贵的代价。要避免这些问题，应
置、新的开发计划和维护工作以及版本的管理。在这样的开发环境中，效率是整个开发
过程的重点所在。
商业开发模式通常会建立出复杂的编译系统。这主要是“为了降低软件开发成本必须增
加程序员效率”的压力所导致的结果。这应该会让利润有所增加。然而，此处所提到的
技术也同样适用于自由软件开发模式，只要它们有此需要。
这一节提到了许多功能，但没有太详细的讨论，也没有列举任何实例。那是因为其中有
太多的功能与你所使用的语言和操作环境有关。我将会在第八章和第九章以实际的例子
说明实现这些功能的方法。
需求
多商业开发环境中常被考虑到的重要需求。
也就是说，编译后所产生的目标文件应该放在独立的二进制文件树（binarytree）中。这
能够让许多其他的功能被加人。独立的二进制文件树可以提供许多好处：
---
## Page 147
大型项目的管理
137
当大型的二进制文件树的位置可以被指定时，就会容易管理磁盘资源。
可以平行管理二进制文件树的各个版本。例如，一个源文件树可以产生经过优化
（optimized）、含调试信息（debug）以及输出剖析信息（profiling）的二进制文件
版本。
件。
开发人员可以调出（checkout）部分的源文件树，并且让编译系统自动从引用源
不一定需要你将源文件与二进制文件分开，但是如果不分开的话，开发人员在编译
系统的时候，很有可能会搞不清楚二进制文件被存放在哪里。
你可以用只供读取的访问权限来保护源文件树。这么做还可以提供额外的保证，因
为编译结果可以真实反映仓库里的源代码。
某些工作目标，像clean，如果能够将文件树作为一个单元来处理，而不用在文
件树中搜索所要处理的文件，实现起来将会很容易（而且可以执行得非常快）。
以上各点，大部分本身就是重要的编译功能，也可能是项目的需求。
能够维护项目的引l用编译结果（referencebuilds）通常是一个重要的系统功能。它的概
念是：源文件的调出和编译只在夜间进行，这通常由一个cron任务来完成。因为这样
所产生的源文件和二进制文件树就CVS上的源文件而言，是没有被修改过的，所以我会
首先，需要检查源文件的程序人员和管理人员可以使用“引用源文件树”。这似乎没什
么，但是当文件和发行版本的数量越来越多时，只是为了查看一个文件而去CVS仓库调
出整个源文件树，可能极为不方便也相当不合理。此外，尽管CVS仓库浏览工具相当常
见，不过它们通常并未提供可以轻易搜索整个源文件树的功能。这个时候，使用标记或
是find/grep（或者grep-R）才是比较恰当的做法。
其次，而且是最重要的，“引l用二进制文件树”是个未受污染的源文件编译结果（clean
sourcebuilds）。开发人员每天早上开始工作的时候，他们就可以知道系统是否正常。如
果有面向批处理的测试结构（batch-orientedtestingframework）可用，你就可以对这
个未受污染的编译结果进行自动的测试。开发人员每天都可以检查测试报告，判断系统
的健康状态，而不用浪费自己的时间去执行测试的动作。如果开发人员只拥有源文件经
修改过的版本，因为他不想浪费额外的时间去进行未受污染的调出和编译动作，那么所
节省的成本将会打折扣。最后，开发人员可以对“引用编译结果”进行测试并比较特定
组件的功能性。
---
## Page 148
138
第六章
“引用编译结果”还可以使用在其他地方。对于由许多程序库组成的项目而言，程序设
library）中把他们没有修改过的程序库链接到自己的应用程序上。这让他们能够通过“从
自己本地的编译动作略过源文件树里的多数内容”来缩短开发周期。当然，如果开发人
员需要查看程序代码但并未拥有被完整调出的源文件树，能够在本地文件服务器上轻易
取得项目的源文件将会很方便。
要提高可靠度，一个简单而有效的方法就是将源文件树设定成只读（read-only）。这样
可确保“引用源文件树”能够准确反映当时被调出仓库的状态。你可以在需要特别注意
的地方这么做，因为许多编译动作有可能会想要写人源文件树，尤其是在产生源代码或
写出临时文件的时候。将源文件树设定成只读还可以避免漫不经心的用户意外地破坏源
文件树，这是一个最常出现的错误。
项目编译系统的另一个常见的需求，就是具备轻易处理不同编译、链接和部署配置的能
力。编译系统通常必须能够管理项目的各个版本（可能是源文件仓库中的各个分支）。
多数大型项目相当倚重第三方软件（不是可链接的程序库就是工具的形式）。如果没有
其他工具可用来管理软件的配置（通常就是没有），使用makefile和编译系统来做此管理
通常是一个合理的选择。
最后，当软件要发布给客户时，它通常会从开发的形式重新封装成发行的形式。这可以
很复杂，像为Windows制作setup.exe文件：也可以很简单，像编排HTML文件以及使
用jar来封装它。有时安装程序（installer）的编译动作会并入到正常的编译程序中。我
比较喜欢将编译和安装分成两个阶段，因为它们使用的似乎是两种完全不同的过程。无
论如何，这两项操作都会对编译系统造成影响。
文件系统的布局
一旦你选择支持多个二进制文件树（binarytree），就会引发文件系统布局的问题。在需
要多个二进制文件树的环境之中，通常会存在着许多二进制文件树。要维持这些树的正
确性，需要动些脑筋。
空间”（farm）。在这个磁盘的顶层（或附近）为每个二进制文件树配置一个目录。一个