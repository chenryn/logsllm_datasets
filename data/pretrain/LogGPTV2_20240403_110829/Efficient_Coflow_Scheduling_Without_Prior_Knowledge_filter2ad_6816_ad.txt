Once all reducers complete, the driver terminates the shufﬂe.
unregister(sId)
Deﬁning Dependencies Coﬂows can specify their parent(s)
during registration, and Aalo uses this information to gener-
ate CoﬂowIds (Pseudocode 2). In our running example, if
the shufﬂe (sId) depended on an earlier broadcast (bId) –
common in many Spark [50] jobs – the driver would have
deﬁned bId as a dependency during registration as follows.
val sId = register({bId})
sId and bId will share the same external CoﬂowId, but sId
will have lower priority if it contends with bId.
6.2 Coﬂow Scheduling in Aalo
Aalo daemons resynchronize every ∆ milliseconds. Each
daemon sends the locally-observed coﬂow sizes to the co-
ordinator every ∆ interval. Similarly, the coordinator sends
out the globally-coordinated coﬂow order and corresponding
399sizes every ∆ interval. Furthermore, the coordinator sends
out explicit ON/OFF signals for individual ﬂows in order
to avoid receiver-side contentions and to expedite sender-
receiver rate convergence.
In between updates, daemons make decisions based on
current knowledge, which can be off by at most ∆ millisec-
onds from the global information. Because trafﬁc-generating
coﬂows are large, daemons are almost always in sync about
their order; only tiny coﬂows are handled by local decisions
to avoid synchronization overheads.
Choice of ∆ Aalo daemons are more closely in sync as ∆
decreases. We suggest ∆ to be O(10) milliseconds, and our
evaluation shows that a 100-machine EC2 cluster can resyn-
chronize within 8 milliseconds on average (§7.6).
7 Evaluation
We evaluated Aalo through a series of experiments on 100-
machine EC2 [1] clusters using traces from production clus-
ters and an industrial benchmark. For larger-scale evalua-
tions, we used a trace-driven simulator that performs a de-
tailed replay of task logs. The highlights are:
• For communication-dominated jobs, Aalo improves the
average (95th percentile) CCT and job completion time
by up to 2.25× (2.93×) and 1.57× (1.77×), respec-
tively, over per-ﬂow fairness. Aalo improvements are, on
average, within 12% of Varys (§7.2).
• As suggested by our analysis, coordination is the key to
performance – independent local decisions (e.g., in [25])
can lead to more than 16× performance loss (§7.2.1).
• Aalo outperforms per-ﬂow fairness and Varys for multi-
wave (§7.3) and DAG (§7.4) workloads by up to 3.7×.
• Aalo’s improvements are stable over a wide range of pa-
rameter combinations for any K ≥ 2 (§7.5).
• Aalo coordinator can scale to O(10, 000) daemons with
minimal performance loss (§7.6).
7.1 Methodology
Workload Our workload is based on a Hive/MapReduce
trace collected by Chowdhury et al. [20, Figure 4] from
a 3000-machine, 150-rack Facebook cluster. The original
cluster had a 10 : 1 core-to-rack oversubscription ratio and a
total bisection bandwidth of 300 Gbps. We scale down jobs
accordingly to match the maximum possible 100 Gbps bi-
section bandwidth of our deployment while preserving their
communication characteristics.
Additionally, we use TPC-DS [6] queries from the Cloud-
era benchmark [7, 4] to evaluate Aalo on DAG workloads.
The query plans were generated using Shark [48].
Job/Coﬂow Bins We present our results by categorizing
jobs based on their time spent in communication (Table 2)
and by distinguishing coﬂows based on their lengths and
widths (Table 3). Speciﬁcally, we consider a coﬂow to be
short if its longest ﬂow is less than 5 MB and narrow if it
has at most 50 ﬂows. Note that coﬂow sizes, like jobs, fol-
low heavy-tailed distributions in data-intensive clusters [20].
Shufﬂe Dur. =75%!All Jobs!Normalized Comp. Time w.r.t. Aalo!Perc. of Job Duration Spent in Communication!Per-Flow Fairness (Avg)!Per-Flow Fairness (95th)!Varys (Avg)!Varys (95th)!EC2$E2E$Improv+EC2$Comm$Improv+0!1!2!3!4!5!6!=75%!All Jobs!Normalized Comp. Time w.r.t. Aalo!Perc. of Job Duration Spent in Communication!Per-Flow Fairness (Avg)!Per-Flow Fairness (95th)!Varys (Avg)!Varys (95th)!EC2$Coﬂow$Improv-0!1!2!3!4!5!6!Bin 1!Bin 2!Bin 3!Bin 4!ALL!Normalized Comp. Time w.r.t. Aalo!Coﬂow Types!Per-Flow Fairness (Avg)!Per-Flow Fairness (95th)!Varys (Avg)!Varys (95th)!0!0.5!1!0.01!0.1!1!10!100!1000!Fraction of Coﬂows!Coﬂow Completion Time (Seconds)!Varys!Non-Clairvoyant Scheduler!Per-Flow Fairness!Sim$Coﬂow$Improv$Avg/0!10!20!30!Bin 1!Bin 2!Bin 3!Bin 4!ALL!Normalized Comp. Time!Coﬂow Types!Per-Flow Fairness!Varys!Uncoordinated Non-Clairvoyant!1!0!0!10!20!30!Bin 1!Bin 2!Bin 3!Bin 4!ALL!Normalized Comp. Time w.r.t. Aalo!Coﬂow Types!Per-Flow Fairness!Varys!Uncoordinated Non-Clairvoyant!FIFO-LM!1!0!401Figure 9: [Simulation] CCT distributions for Aalo, Varys, per-ﬂow
fairness, and uncoordinated non-clairvoyant coﬂow scheduling. X-
axis is in log scale.
Number of Waves in Coﬂow
Max Waves = 1
Max Waves = 2
Max Waves = 4
1
2
3
4
100%
90% 10%
81%
9% 4% 6%
Table 4: Coﬂows binned by the number of waves.
What About Aalo Without Coordination? Given that
Aalo takes few milliseconds to coordinate, we need to un-
derstand the importance of coordination. Simulations show
that coﬂow scheduling without coordination can be signiﬁ-
cantly worse than even simple TCP fair sharing. On average,
Aalo performed 15.8× better than its uncoordinated coun-
terpart, bolstering our worst-case analysis (Theorem A.1).
Experiments with increasing ∆ suggest the same (§7.6).
What About FIFO with Limited Multiplexing in Baraat
[25]? We found that FIFO-LM can be signiﬁcantly worse
than Aalo (18.6×) due to its lack of coordination:
each switch takes locally-correct, but globally-inconsistent,
scheduling decisions. Fair sharing among heavy coﬂows fur-
ther worsens it. We had been careful – as the authors in [25]
have pointed out – to select the threshold that each switch
uses to consider a coﬂow heavy. Figure 8 shows the results
for FIFO-LM’s threshold set at the 80-th percentile of the
coﬂow size distribution; results for the threshold set to the
20-th, 40-th, 60-th, 70-th, and 90-th percentiles were worse.
Aalo and FIFO-LM performs similar for small coﬂows fol-
lowing light-tailed distributions (not shown).
How Far are We From the Optimal? Finding the opti-
mal schedule, even in the clairvoyant case, is an open prob-
lem [20]. Instead, we tried to ﬁnd an optimistic estimation
of possible improvements by comparing against an ofﬂine
2-approximation heuristic for coﬂows without coupled re-