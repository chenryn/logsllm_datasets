### Once All Reducers Complete, the Driver Terminates the Shuffle

When all reducers have completed their tasks, the driver terminates the shuffle process. This is followed by unregistering the shuffle ID (`unregister(sId)`).

### Defining Dependencies in Coflows

Coflows can specify their parent(s) during registration, and Aalo uses this information to generate Coflow IDs (as shown in Pseudocode 2). In our running example, if the shuffle (sId) depends on an earlier broadcast (bId)—a common scenario in many Spark jobs—the driver would define bId as a dependency during registration as follows:

```scala
val sId = register({bId})
```

In this case, `sId` and `bId` will share the same external Coflow ID, but `sId` will have a lower priority if it contends with `bId`.

### Coflow Scheduling in Aalo

Aalo daemons resynchronize every ∆ milliseconds. Each daemon sends the locally-observed coflow sizes to the coordinator at each ∆ interval. Similarly, the coordinator broadcasts the globally-coordinated coflow order and corresponding sizes every ∆ interval. Additionally, the coordinator sends explicit ON/OFF signals for individual flows to avoid receiver-side contentions and to expedite sender-receiver rate convergence.

Between updates, daemons make decisions based on current knowledge, which may be up to ∆ milliseconds out of sync with global information. Since traffic-generating coflows are typically large, daemons are almost always in sync regarding their order. Only small coflows are managed by local decisions to minimize synchronization overhead.

#### Choice of ∆

The synchronization accuracy of Aalo daemons improves as ∆ decreases. We recommend setting ∆ to O(10) milliseconds. Our evaluation shows that a 100-machine EC2 cluster can resynchronize within an average of 8 milliseconds (§7.6).

### Evaluation

We evaluated Aalo through a series of experiments on 100-machine EC2 clusters using traces from production clusters and an industrial benchmark. For larger-scale evaluations, we used a trace-driven simulator that performs a detailed replay of task logs. The key findings are:

- **Communication-Dominated Jobs**: Aalo improves the average (95th percentile) CCT and job completion time by up to 2.25× (2.93×) and 1.57× (1.77×), respectively, over per-flow fairness. Aalo's improvements are, on average, within 12% of Varys (§7.2).
- **Coordination Importance**: As suggested by our analysis, coordination is crucial for performance. Independent local decisions (e.g., in [25]) can lead to more than 16× performance loss (§7.2.1).
- **Multi-Wave and DAG Workloads**: Aalo outperforms per-flow fairness and Varys for multi-wave (§7.3) and DAG (§7.4) workloads by up to 3.7×.
- **Parameter Stability**: Aalo's improvements are stable over a wide range of parameter combinations for any K ≥ 2 (§7.5).
- **Scalability**: Aalo's coordinator can scale to O(10,000) daemons with minimal performance loss (§7.6).

### Methodology

#### Workload

Our workload is based on a Hive/MapReduce trace collected by Chowdhury et al. [20, Figure 4] from a 3000-machine, 150-rack Facebook cluster. The original cluster had a 10:1 core-to-rack oversubscription ratio and a total bisection bandwidth of 300 Gbps. We scaled down jobs to match the maximum possible 100 Gbps bisection bandwidth of our deployment while preserving their communication characteristics.

Additionally, we used TPC-DS [6] queries from the Cloudera benchmark [7, 4] to evaluate Aalo on DAG workloads. The query plans were generated using Shark [48].

#### Job/Coflow Bins

We categorize jobs based on their time spent in communication (Table 2) and distinguish coflows based on their lengths and widths (Table 3). Specifically, a coflow is considered short if its longest flow is less than 5 MB and narrow if it has at most 50 flows. Note that coflow sizes, like jobs, follow heavy-tailed distributions in data-intensive clusters [20].

### Simulation Results

#### Coflow Completion Time Distributions

Figure 9 shows the coflow completion time (CCT) distributions for Aalo, Varys, per-flow fairness, and uncoordinated non-clairvoyant coflow scheduling. The x-axis is in log scale.

#### Number of Waves in Coflows

Table 4 bins coflows by the number of waves, showing the distribution of coflows with different wave counts.

### Additional Analysis

#### Aalo Without Coordination

Given that Aalo takes a few milliseconds to coordinate, we need to understand the importance of coordination. Simulations show that coflow scheduling without coordination can be significantly worse than even simple TCP fair sharing. On average, Aalo performed 15.8× better than its uncoordinated counterpart, supporting our worst-case analysis (Theorem A.1). Experiments with increasing ∆ suggest the same (§7.6).

#### FIFO with Limited Multiplexing in Baraat [25]

FIFO-LM can be significantly worse than Aalo (18.6×) due to its lack of coordination. Each switch makes locally-correct but globally-inconsistent scheduling decisions, and fair sharing among heavy coflows further worsens the situation. We carefully selected the threshold that each switch uses to consider a coflow heavy, as pointed out by the authors in [25]. Figure 8 shows the results for FIFO-LM’s threshold set at the 80th percentile of the coflow size distribution; results for other thresholds (20th, 40th, 60th, 70th, and 90th percentiles) were worse. Aalo and FIFO-LM perform similarly for small coflows following light-tailed distributions (not shown).

#### How Far Are We from the Optimal?

Finding the optimal schedule, even in the clairvoyant case, is an open problem [20]. Instead, we compared against an offline 2-approximation heuristic for coflows without coupled re-scheduling to estimate possible improvements.