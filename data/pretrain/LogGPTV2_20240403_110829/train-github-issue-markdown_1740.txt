**I'm submitting a ...** (check one with "x")
    [ ] bug report => search github for a similar issue or PR before submitting
    [x] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
I am logging a feature request to support more dynamic i18n lookups.
**Current behavior**  
From what I can tell the current i18n approach can only target elements with a
static reference in the markup.  
(e.g. `English Text`)
**Expected behavior**  
One of the challenges I see with this is building a data driven ui with
translations. If you come from the `ng-translate` world it's not uncommon to
loop over a list of language keys and do lookups to resolve translated values.
It's not clear to me how to replicate this behavior using i18n in angular.  
It would be nice if i18n allowed us to specify the keys based on data binding
instead of hard coded references in the markup.
Example:
It looks like the ability to set your own @@keys was added in 4.0. Thinking
this key is perfect for the lookup, but it would need to be generated based on
bindings.
This would also assume that we are allowed to manually create the xlf file
instead of relying on the i18n compiler cli tool to generate it. The list of
keys could potentially come from an api and would not be a fixed list. There
would be no way for the generator to know the set until runtime.
I still think this can be made compatible with AoT. It would require one more
level of indirection in the translation lookup though.
Instead of  
`var currVal_2 = inlineInterpolate(1, â€˜Welcome ',
this.parentView.context.firstNameName, '');`
You could maybe have  
`var currVal_2 = inlineInterpolate(1, lookupKey('@@Welcome'),
this.parentView.context.firstNameName, '');`
**What is the motivation / use case for changing the behavior?**  
The motivation is a more flexible translation experience.
  * **Angular version:** 2.0.X
  * **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
  * **Language:** [all | TypeScript X.X | ES6/7 | ES5]
  * **Node (for AoT issues):** `node --version` =