return select_with_prob(Pynn);
return select_with_prob(Pynt);
return select_with_prob(Pnnn);
else
collaborate with coverage-oriented and thread-context instru-
mentations. This instrumentation should be general enough
to work for different multithreaded programs and extremely
lightweight to keep runtime overhead minimal.
POSIX compliant systems such as Linux, FreeBSD usually
provide APIs to control the low-level process or thread sched-
ules [23, 26]. In order to intervene in the interleavings during
the execution of the multithreading segments, we resort to
the POSIX API pthread_setschedparam to adjust the thread
priorities with an instrumented function named FS that will
be invoked during fuzzing. This function does two tasks:
a) During repeated execution (§5.2), whenever the thread
calls FS, it updates the scheduling policy to SCHED_RR,
and assigns a ranged random value to its priority. This
value is uniformly distributed random and diversiﬁes the
actual schedules across different threads. With this inter-
vention, we try to approximate the goal in §2.3.2.
b) For each newly mutated seed ﬁle, it calls pthread_self
in the entry of Ff ork to collect the thread IDs. It has two
purposes: 1) it informs the fuzzer that the current seed is
multithreading-relevant; 2) based on the invocation order
of FS, each thread can be associated with a unique ID Nctx
starting from 1,2, . . ., which composes “thread ID map”
and calculates thread-context in §4.3.
5 Dynamic Fuzzing
The dynamic fuzzing loop follows the workﬂow of a typical
GBF described in Algorithm 1. To improve the feedback on
multithreading context, we optimize seed selection (§5.1) and
repeated execution (§5.2) for fuzzing multithreaded programs,
based on the aforementioned instrumentations.
4.4 Schedule-intervention Instrumentation
When a user-space program does not specify any schedul-
ing policy or priority, the operating system determines the
actual schedule dynamically [23, 26]. Schedule-intervention
instrumentation aims to diversify the thread-interleavings to
5.1 Seed Selection
Seed selection decides which seeds to be mutated next. In
practice, this problem is reduced to: when traversing seed
queue QS, whether the seed t at the queue front will be selected
for mutation. Algorithm 3 depicts our solution. The intuition
USENIX Association
29th USENIX Security Symposium    2331
is that we prioritize those seeds with new (normal) coverage
or covering new thread-context.
In addition to following AFL’s strategy by using
has_new_trace(QS) to check whether there exists a seed, s, in
QS that covers a new transition (i.e., cov_new_trace(s)==true),
MUZZ also uses has_new_mt_ctx(QS) to check whether there
exists a seed in QS with a new thread-context (Sctx). If either is
satisﬁed, it means there exist some “interesting seeds” in the
queue. Speciﬁcally, if the current seed t covers a new thread-
context, the algorithm directly returns true. If it covers a new
trace, it has a probability of Pynt to be selected; otherwise,
the probability is Pynn. On the contrary, if no seeds in QS are
interesting, the algorithm selects t with a probability of Pnnn.
Analogous to AFL’s seed selection strategy [63], MUZZ sets
Pynt = 0.95, Pynn = 0.01, Pnnn = 0.15.
As to the implementation of cov_new_mt_ctx(t), we
track the thread-context of calling a multithreading API
in Fctx = {TJoin,TLock,TUnLock} (c.f. §4.3) and check
whether the context-signature Sctx has been met before
— when Sctx is new, cov_new_mt_ctx(t)=true; otherwise,
cov_new_mt_ctx(t)=false. Note that cov_new_trace(t)==true
does not imply cov_new_mt_ctx(t)==true. The reason is
that (1) we cannot instrument inside the body of thread-
ing API functions (as they are “external functions”) in-
side Fctx, hence cov_new_trace cannot track the transitions;
(2) cov_new_mt_ctx also facilitates the thread IDs that
cov_new_trace is unaware of.
5.2 Repeated Execution
Multithreaded programs introduce non-deterministic behav-
iors when different interleavings are involved. As mentioned
in §2.3.2, for a seed with non-deterministic behaviors, a GBF
typically repeats the execution on the target program against
the seed for more times. With the help of FS (c.f. §4.4), we
are able to tell whether or not the exhibited non-deterministic
behaviors result from thread-interleavings. In fact, since we
focus on multithreading only, based on the thread-fork in-
formation kept by FS, the fuzzer can distinguish the seeds
with non-deterministic behaviors purely by checking whether
the executions exercise multithreading context. Further, if
previous executions on a seed induce more distinct values
of Sctx (the number of these values for a provided seed t is
denoted as Cm (t)), we know that there must exist more thread-
interleavings. To determine the repeating times Nc applied on
t, we rely on Cm(t). In AFL, the repeating times on t is:
Nc(t) = N0 + Nv · Bv, Bv ∈ {0,1}
(4)
where N0 is the initial repeating times, Nv is a constant as the
“bonus” times for non-deterministic runs. Bv=0 if none of the
N0 executions exhibit non-deterministic behaviors; otherwise
Bv=1. We augment this to ﬁt for multithreading setting.
Nc(t) = N0 + min(cid:8)Nv,N0 ·Cm(t)(cid:9)
(5)
In both AFL and MUZZ, N0 = 8, Nv = 32. For all the Nc
executions, we track their execution traces and count how
many different states it exhibits. The rationale of adjusting
Nc is that, in real-world programs the possibilities of thread-
interleavings can vary greatly for different seeds. For example,
a seed may exhibit non-deterministic behaviors when execut-
ing compute in Figure 1 (e.g., races in g_var), but it exits
soon after failing an extra check inside compute (typically,
exit code >0). For sure, it will exhibit fewer non-deterministic
behaviors than a seed that is concurrently processed and the
program exits normally (typically, exit code =0).
for
5.3 Complementary Explanations
Here we provide some explanations to show why MUZZ’s
static and dynamic thread-aware strategies help to improve
the overall fuzzing effectiveness.
valuable
1) Mutations
on multithreading-relevant
seeds
are more
seed mutation/generation.
Multithreading-relevant seeds themselves have already
passed validity checks of the target program. Compared to a
seed that cannot even enter the thread-fork routines, it is usu-
ally much easier to generate a multithreading-relevant seed
mutant from an existing multithreading-relevant seed. This
is because the mutation operations (e.g., bitwise/bytewise
ﬂips, arithmetic adds/subs) in grey-box fuzzers are rather
random and it is rather difﬁcult to turn an invalid seed to be
valid. Therefore, from the mutation’s perspective, we prefer
multithreading-relevant seeds to be mutated.
1 → 1 → 2 → 2
2) MUZZ can distinguish more multithreading-
relevant states. For example, in Figure 1, it can distinguish
and 1 → 2 → 1 → 2 . Then
transitions
when two different seeds exercise the two transitions, MUZZ
is able to preserve both seeds. However, other GBFs such
as AFL cannot observe the difference. Conversely, when
we provide less feedback for seeds that do not involve
multithreading, MUZZ can distinguish less of these states and
put less multithreading-irrelevant seeds in the seed queue.
3) Large portions of multithreading-relevant seeds in
the seed queue beneﬁt subsequent mutations. Suppose at
some time of fuzzing, both MUZZ and AFL preserve 10 seeds
(Nall =10), and MUZZ keeps 8 multithreading-relevant seeds
(Nmt =8) while AFL keeps 6 (Nmt =6). Obviously, the probabil-
ity of picking MUZZ generated multithreading-relevant seeds
(80%) is higher than AFL’s (60%). After this iteration of mu-
tation, more seed mutants in MUZZ are likely multithreading-
relevant. The differences of seed quality (w.r.t. relevance to
multithreading) in the seed queue can be ampliﬁed with more
mutation iterations. For example, ﬁnally MUZZ may keep 18
multithreading-relevant seeds (Nmt =18), and 10 other seeds,
making Nall =28 and Nmt
= 18
28 = 64.3%; while AFL keeps 12
Nall
multithreading-relevant seeds (Nmt =12) and 14 other seeds,
making Nall =26 and Nmt
Nall
Properties 1), 2) and 3) collaboratively affects the fuzzing
effectiveness in a “closed- loop”. Eventually, both Nmt and
= 12
26 = 46.2%.
2332    29th USENIX Security Symposium
USENIX Association
Nmt
in MUZZ are likely to be bigger than those in AFL. Ow-
Nall
ing to more multithreading-relevant seeds in the queue and
property 1), we can expect that:
a) concurrency-vulnerabilities are more likely to be de-
tected with the new proof-of-crash ﬁles mutated from
multithreading-relevant ﬁles from the seed queue.
b) concurrency-bugs are more likely to be revealed with the
(seemingly normal) ﬁles in the seed queue that violate
certain concurrency conditions.
Providing more feedback for multithreading-relevant seg-
ments essentially provides a biased coverage criterion to spe-
cialize fuzzing on multithreaded programs. Other specializa-
tion techniques, such as the context-sensitive instrumentation
used by Angora [7], or the typestate-guided instrumentation
in UAFL [52], provide similar solutions and achieve inspiring
results. The novelty of MUZZ lies in that we facilitate the
multithreading-speciﬁc features as feedback to innovatively
improve the seed generation quality. It is worth noting that
our solution only needs lightweight thread-aware analyses
rather than deep knowledge of multithreading/concurrency;
thus, it can scale to real-world software.
6 Evaluation
We implemented MUZZ upon SVF [46], AFL [63] , and
ClusterFuzz [16]. The thread-aware ICFG construction
leverages SVF’s inter-procedural value-ﬂow analysis. The
instrumentation and dynamic fuzzing strategies lay in-
side AFL’s LLVM module. The vulnerability analysis and
concurrency-bug replaying components rely on ClusterFuzz’s
crash analysis module. We archive our supporting materials at
https://sites.google.com/view/mtfuzz. The archive
includes initial seeds for fuzzing, the detected concurrency-
vulnerabilities and concurrency-bugs, the implementation de-
tails, and other ﬁndings during evaluation.
Our evaluation targets the following questions:
RQ1 Can MUZZ generate more effective seeds that execute
multithreading-relevant program states?
RQ2 What
is
the capability of MUZZ in detecting
concurrency-vulnerabilities (Vm)?
RQ3 What is the effect of using MUZZ generated seeds to
reveal concurrency-bugs (Bm) with bug detectors?
6.1 Evaluation Setup
6.1.1 Settings of the grey-box fuzzers
We use the following fuzzers during evaluation.
1) MUZZ is our full-ﬂedged fuzzer that applies all the thread-
aware strategies in §4 and §5.
2) MAFL is a variant of MUZZ. It differs from MUZZ only
on the coverage-oriented instrumentation — MAFL uses
AFL-Ins while MUZZ uses M-Ins. We compare MAFL
with MUZZ to demonstrate the effectiveness of M-Ins, and
compare MAFL with AFL to stress other strategies.
3) AFL is by far the most widely-used GBF that facili-
tates general-purpose AFL-Ins instrumentation and fuzzing
strategies. It serves as the baseline fuzzer.
4) MOPT [33] is the recently proposed general-purpose
fuzzer that leverages adaptive mutations to increase the
overall fuzzing efﬁciency. It is claimed to be able to detect
170% more vulnerabilities than AFL in fuzzing (single-
thread) programs.
6.1.2 Statistics of the evaluation dataset
The dataset for evaluation consists of the following projects.
1) Parallel compression/decompression utilities including
pigz, lbzip2, pbzip2, xz and pxz. These tools have been
present in GNU/Linux distributions for many years and
are integrated into the GNU tar utility.
2) ImageMagick and GraphicsMagick are two widely-used
software suites to display, convert, and edit image ﬁles.
3) libvpx and libwebp are two WebM projects for VP8/VP9
and WebP codecs. They are used by popular browsers like
Chrome, Firefox, and Opera.
4) x264 and x265 are the two most established video encoders
for H.264/AVC and HEVC/H.265, respectively.
All these projects’ single-thread functionalities have been
intensively tested by mainstream GBFs such as AFL. We try
to use their latest versions at the time of our evaluation; the
only exception is libvpx, which we use version v1.3.0-5589 to
reproduce the ground-truth vulnerabilities and concurrency-
bugs. Among the 12 multithreaded programs, pxz, Graphic-
sMagick, and ImageMagick use OpenMP library, while the
others use native PThread.
Table 1 lists the statistics of the benchmarks. The ﬁrst two
columns show the benchmark IDs and their host projects. The
next column speciﬁes the command-line options. In particular,
four working threads are speciﬁed to enforce the program to
run in multithreading mode.
The rest of the columns are the static statistics. Column
“Binary Size” calculates the sizes of the instrumented bina-
ries. Column Tpp records the preprocessing time of static
analysis (c.f. §4.1). Among the 12 benchmarks, vpxdec takes
the longest time of approximately 30 minutes. Columns Nb,
Ni, and Nii depict the number of basicblocks, the number of
total instructions, and the number of deputy instructions for
M-Ins (c.f. §4.2), respectively. Recall that AFL-Ins instruments
evenly over entry instructions of all basicblocks, hence Nb also
denotes the number of deputy instructions in AFL, MAFL,
and MOPT. The last column, Nii−Nb
, is the ratio of more
Nb
instructions MUZZ instrumented versus AFL (or MAFL,
MOPT). This ratio ranges from 6.0% (pbzip2-c or pbzip2-
d) to 288.9% (x265). Fortunately, in practice, this does not
proportionally increase the runtime overhead. Many aspects
can affect this metric, including the characteristics of the tar-
get programs, the precision of the applied static analysis, and
the empirically speciﬁed thresholds Ps0 and Pm0.
Fuzzing Conﬁguration The experiments are conducted on
USENIX Association
29th USENIX Security Symposium    2333
Table 1: Static statistics of the 12 evaluated benchmarks; meanings of the columns are explained in §6.1.2.
ID
lbzip2-c
pbzip2-c
pbzip2-d
pigz-c
pxz-c
xz-c
gm-cnvt
im-cnvt
cwebp
vpxdec
x264
x265
Project
Command Line Options
lbzip2-2.5
pbzip2-v1.1.13
pbzip2-v1.1.13
pigz-2.4
pxz-4.999.9beta
XZ-5.3.1alpha
GraphicsMagick-1.4
ImageMagick-7.0.8-7
libwebp-1.0.2
libvpx-v1.3.0-5589
x264-0.157.2966
x265-3.0_Au+3
lbzip2 -k -t -9 -z -f -n4 FILE
pbzip2 -f -k -p4 -S16 -z FILE
pbzip2 -f -k -p4 -S16 -d FILE
pigz -p 4 -c -b 32 FILE
pxz -c -k -T 4 -q -f -9 FILE
xz -9 -k -T 4 -f FILE
gm convert -limit threads 4 FILE out.bmp
convert -limit thread 4 FILE out.bmp
cwebp -mt FILE -o out.webp
vpxdec -t 4 -o out.y4m FILE
x264 –threads=4 -o out.264 FILE
x265 –input FILE –pools 4 -F 2 -o
Tpp
Binary
Size
7.1s
377K
0.9s
312K
0.9s
312K
5.0s
117K
1.2s
42K
8.4s
182K
224.4s
7.6M
434.2s
19.4M
56.3s
1.8M
3.8M
431.6s
6.4M 1701.0s
9.7M
78.3s
Nb
Ni
Nii
4010
2030
2030
3614
3907
4892
63539
128359
12117
31638
38912
22992
24085
8345
8345
21022
30205
34716
383582
778631
134824
368879
410453
412555
6208