DO. It is illustrated in Figure 18a.
are random bits.
′(i)
(i)
(i)
, b
, b
, b
1
2
b
(i)
possible cases:
SCSP is given the server state S and a valid ciphertext∐︀⎜x⨆︁, ỹ︀.
Then it chooses two elements∐︁⎜xj⨆︁, yj̃︁,∐︁⎜xj+1⨆︁, yj+1̃︁ from the
OPE-table, such that yj ≤ y  depth(⎜xj+1⨆︁) then insert⎜x⨆︁ right to
⎜xj⨆︁
● else depth(⎜xj+1⨆︁)> depth(⎜xj⨆︁), insert⎜x⨆︁ left to⎜xj+1⨆︁
For all ancestors of⎜x⨆︁, b
⎜x⨆︁ (the equality test from Equation 9 returns 1 if the inputs are
different and 0 otherwise). For the node⎜x⨆︁ itself, there are two
● ⎜x⨆︁ is not a leaf: this occurs if one is trying to insert a value,
(i)
e = 0 because
● ⎜x⨆︁ is a leaf: this occurs either because yj= y holds as above
(i)
or⎜x⨆︁ is inserted at a leaf node. If yj= y holds, then b
e = 0
(i)
д = 0. If⎜x⨆︁ is inserted at a leaf node,
(i)
which also implies b
then b
done. Hence the simulator chooses b
between 0 and undefined.
are undefined because no comparison was
randomly
is 0 (resp. 1) if the path P goes to the
is 1 for all ancestors of
that was already in the tree. It holds b
yj is equal to y.
left (resp. to the right). The value of b
(i)
д = b
possible cases:
= b
(i)
(i)
(i)
(i)
and b
д
д
д
e
e
e
′(i)
To simulate the CSP’s view, SCSP chooses a random integer r
and random bits b
α
illustrated in Figure 18b.
and generates the output
and b
ω , b
α , b
ω
(i)
′(i)
(i)
′(i)
Efficient Secure Computation of Order-Preserving Encryption
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
o
o
a
b
, b
, b
o ,
a , b
a , b
o , b
′(i)
(i)
(i)
(i)
(i)⨆︁,∐︀b
(i)+ r
(i)⨆︁, r
(i)
⎜x
,⎜x
e ⊕ b
(i)
(i)
′(i)
′(i)
(i)
′(i)
(i)
(i)
e ⊕ b
̃︀,∐︀b
̃︀
д ⊕ b
д ⊕ b
(a) CSP View: for i= 1⋯l
(i)
(i)
(i)
′(i)
(i)+ r
′(i)
(i)⨆︁, r
′(i)⨆︁,∐︀b
e ⊕ b
⎜x
,⎜x
′(i)
(i)
′(i)
(i)
(i)
(i)
′(i)
(i)
ω ̃︀,∐︀b
̃︀
д ⊕ b
e ⊕ b
д ⊕ b
(b) CSP Simulator: for i= 1⋯l
ω , b
ω , b
α , b
α , b
, b
α
α
a
b
ω ,
Figure 18: CSP Simulation
Since values⎜x
(i)
(i)⨆︁, b
′(i)
e
(i)
(i)
д
, b
same in Figures 18a and 18b, and r
distinguishable from r
α , b
α
, b
(i)
′(i)
depend on the path, they are the
are in-
(cid:3)
, b
a , b
ω , b
′(i)
′(i)
a
ω .
(i)
(i)
′(i)
(i)
o , b
, b
, b
o
C USING OTHER COMPARISON PROTOCOLS
Our scheme works with any 2-PC for comparison. We describe in
this section how oblivious comparison can be implemented using
DGK comparison protocol [13]. This can done using other schemes
such as Lin-Tzeng [46]. We start by describing DGK protocol itself.
(12)
C.1 The DGK protocol
Let Pi and Pj be two parties with private input xi and xj respectively.
Let xb
j = xjl . . . xj1 denote the bit representation
i = xil . . . xi1 and xb
of xi and xj. To determine whether xi≤ xj or xi> xj, one computes
for each 1≤ u≤ l the following numbers zu:
allows to secret-share the result of the comparison between two
v=u+1(xiv⊕ xjv).
zu= s+ xiu− xju+ 3
l∑
v=u+1(xiv⊕xjv) will be zero exactly
The sum of exclusive-ors∑l
when xiv = xjv for u xj) and
parties. Assume Pi holds a pair(pki , ski) of public/private key for
an additively HE and let⎜⋅⨆︁i denote ciphertexts under pki. To check
whether xi≤ xj holds the protocol works as follows:
● Pi sends⎜xb
i⨆︁i=(⎜xil⨆︁i , . . . ,⎜xi1⨆︁i) to Pj
● Pj computes DgkEval() which consists of:
– Choose a random δji and compute s= 1− δji
– Compute⎜zu⨆︁ using Equation 12 for 1≤ u≤ l
′
– Compute⎜z
u⨆︁←⎜zu⨆︁ru for all u and random ru
– Choose a random permutation π of{1, . . . , l}
′
′
– Send back π(⎜z
1⨆︁i) to Pi and output δji
l⨆︁i , . . . ,⎜z
′
′
j) denote
Let(δji ,(⎜z
1⨆︁i))← DgkEval(⎜xb
i⨆︁i , xb
l⨆︁i , . . . ,⎜z
′
′
1⨆︁i) which
● Pi computes δij ← DgkDecrypt(⎜z
l⨆︁i , . . . ,⎜z
′
consists of setting δij ← 1 if one⎜z
u⨆︁i decrypts to 0 and
δij← 0 otherwise. Finally, Pi outputs δij.
this computation.
After the computation the parties Pi and Pj hold random bits δij and
δji and it holds δij⊕ δji=(x≤ y). In this protocol parties Pi and
Pj perform respectively𝒪(l) and𝒪(6l) asymmetric operations.
C.2 Oblivious Comparison Using DGK protocol
The DGK comparison protocol can be used for the oblivious compar-
ison as follows. For each node x in the OPE-tree, the DO stores both
⎜x⨆︁,⎜xb⨆︁ during the initialization. During the oblivious comparison
step, the CSP sends⎜x⨆︁,⎜xb⨆︁ to DA and nothing to the DO. For
the equality testing, the DA uses⎜x⨆︁ to evaluate a zero testing by
computing⎜(x−x)⋅r1+r2⨆︁ where r1, r2 are two numbers chosen ran-
′
′
1⨆︁))← DgkEval(⎜xb⨆︁, xb). Then
DA evaluates(ba,(⎜z
l⨆︁, . . . ,⎜z
′
the DA sends⎜(x− x)⋅ r1+ r2⨆︁ and(⎜z
1⨆︁) to the DO.
The DA also sends r2 and ba to the CSP. The DO evaluates bo←
′
′
l⨆︁i , . . . ,⎜z
DgkDecrypt(⎜z
1⨆︁i) and sends(x− x)⋅ r1+ r2 and bo
to the CSP. Finally the CSP sets be← 1 if(x− x)⋅ r1+ r2≠ r2 and
be← 0 otherwise, and bд= ba⊕ bo.
domly in the plaintext space. For the greater than comparison, the
′
l⨆︁, . . . ,⎜z
D OOPE WITH ESEDS-OPE
We now briefly describe how OOPE can be realized with ESEDS-
OPE [27] that is IND-CPA-DS-secure, and therefore, secure against
recent plaintext guessing attacks [20, 21, 35] on OPE. As explained
before, ESEDS-OPE combines the benefits of three previous order-
preserving encryption schemes: mOPE1 [38], mOPE3 [25] and
MOPE [8]. ESEDS-OPE consists of four algorithms: key generation,
encryption, decryption and search. The key generation algorithm
takes a security parameter and outputs a secret key. The decryption
algorithm takes the secret key and a ciphertext and outputs the
corresponding plaintext. Key generation and decryption algorithms
are run as before by the data owner alone.
The encryption algorithm takes the secret key, a plaintext and
the state of the encryption stored on the server. Then it requires the
data owner and the server to interactively perform a binary search
using Kerschbaum’s random tree traversal as in mOPE3. Finally,
the server inserts the new plaintext and rotates the resulting data
structure around a new random modulus. The extension to OOPE
will however concern only the tree traversal. In the OOPE protocol,
the three parties just have to traverse the tree with the extension
discussed in Section 7.1 by implementing the comparison and the
random coin in a garbled circuit.
The search algorithm takes the secret key, the state of the encryp-
tion and a range(︀a, b⌋︀. Let cα (resp. cβ ) be the ciphertext with the
α (resp. β) it holds α≥ a (resp. β≤ b). Then the search algorithm
smallest (resp. largest) order such that for the associated plaintext
requires the data owner and the server to interactively perform
two binary searches (using a non random tree traversal) to get cα
and cβ and then returns all ciphertexts between cα and cβ . Here as
well, the extension to OOPE only concerns the tree traversal. The
parties will just have to traverse the tree as in the original OOPE
protocol as described in Section 5.3 with the only difference that
they will not have to check for equality as the traversal here is no
longer random.