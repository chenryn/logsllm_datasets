    软件包中。它监控最近 Intel 处理器上的 CPU 缓存和内存带宽。它监控：
    ::: itemizedlist
    -   每个周期(IPC)的说明。
    -   最后一个级别缓存 MISSES 的数量。
    -   程序在 LLC 中给定 CPU 占用空间中执行的 KB 大小。
    -   到本地内存的带宽(MBL)。
    -   到远程内存的带宽(MBR)。
    :::
-   `x86_energy_perf_policy`{.literal}
    工具使管理员能够定义性能和能源效率的相对重要性。当处理器选择在性能和能源效率之间取舍的选择时，可以利用这些信息来影响支持此功能的处理器。
-   `tasket`{.literal} 工具由 `util-linux`{.literal}
    软件包提供。它允许管理员检索和设置正在运行的进程的处理器关联，或者启动具有指定处理器相关性的进程。
:::
::: itemizedlist
**其它资源**
-   `turbostat(8)`{.literal}、num `actl(8)`{.literal}、num
    `astat(8)`{.literal}、num
    `a(7)`{.literal}、`numad(8)`{.literal}、`pqos(8)`{.literal}、`x86_energy_perf_policy(8)和`{.literal}
    `taskset(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#types-of-system-topology_configuring-an-operating-system-to-optimize-cpu-utilization}系统拓扑类型 {.title}
:::
在现代计算中，CPU
的概念令人困惑，因为大多数现代系统都有多个处理器。系统拓扑是这些处理器互相连接和其他系统资源的方式。这会影响系统和应用程序的性能，以及系统的调优注意事项。
以下是现代计算中使用的两种主要拓扑类型：
::: variablelist
[`对称多处理器(SMP)拓扑`{.literal}]{.term}
:   SMP
    拓扑允许所有处理器在相同的时间里访问内存。但是，由于共享和相等内存访问本质上会强制从所有
    CPU 进行序列化内存访问，因此 SMP
    系统扩展限制现在通常被视为不可接受。因此，实际上，所有现代服务器系统都是
    NUMA 计算机。
[`非一致性内存访问(NUMA)拓扑`{.literal}]{.term}
:   NUMA 拓扑的开发时间比 SMP 拓扑更近。在 NUMA
    系统中，一个套接字上对多个处理器进行物理分组。每个套接字都有一个专用的内存和处理器区域，其对该内存具有本地访问权限，它们统称为节点。位于同一节点上的处理器能够快速访问该节点的内存数据库，而且对不在节点的内存库的访问速度也较慢。
    因此，访问非本地内存时性能会受到影响。因此，具有 NUMA
    拓扑的系统上对性能敏感的应用应该访问与执行应用的处理器位于同一节点上的内存，并尽可能避免访问远程内存。
    对性能敏感的多线程应用或许能够配置为在特定 NUMA
    节点上执行，而非特定的处理器。这是否适合取决于您的系统以及应用程序的要求。如果多个应用程序线程访问相同的缓存数据，则可能适合将这些线程配置为在同一处理器上执行。但是，如果访问和缓存同一处理器中执行的不同数据的多个线程可能会驱除以前的线程访问的缓存数据。这意味着每个线程\"缺少\"缓存并浪费执行时间从内存中获取数据并将其替换缓存中。使用
    `perf`{.literal} 工具检查是否有过多的缓存未命中。
:::
::: section
::: titlepage
## []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#displaying-system-topologies_configuring-an-operating-system-to-optimize-cpu-utilization}显示系统拓扑 {.title}
:::
许多命令可帮助理解系统的拓扑。这个步骤描述了如何确定系统拓扑。
::: itemizedlist
**流程**
-   显示您的系统拓扑概述：
    ``` screen
    $ numactl --hardware
    available: 4 nodes (0-3)
    node 0 cpus: 0 4 8 12 16 20 24 28 32 36
    node 0 size: 65415 MB
    node 0 free: 43971 MB
    [...]
    ```
-   要收集 CPU 架构的信息，如 CPU、线程、内核、插槽和 NUMA 节点的数量：
    ``` screen
    $ lscpu
    Architecture:          x86_64
    CPU op-mode(s):        32-bit, 64-bit
    Byte Order:            Little Endian
    CPU(s):                40
    On-line CPU(s) list:   0-39
    Thread(s) per core:    1
    Core(s) per socket:    10
    Socket(s):             4
    NUMA node(s):          4
    Vendor ID:             GenuineIntel
    CPU family:            6
    Model:                 47
    Model name:            Intel(R) Xeon(R) CPU E7- 4870  @ 2.40GHz
    Stepping:              2
    CPU MHz:               2394.204
    BogoMIPS:              4787.85
    Virtualization:        VT-x
    L1d cache:             32K
    L1i cache:             32K
    L2 cache:              256K
    L3 cache:              30720K
    NUMA node0 CPU(s):     0,4,8,12,16,20,24,28,32,36
    NUMA node1 CPU(s):     2,6,10,14,18,22,26,30,34,38
    NUMA node2 CPU(s):     1,5,9,13,17,21,25,29,33,37
    NUMA node3 CPU(s):     3,7,11,15,19,23,27,31,35,39
    ```
-   查看您系统的图形表示：
    ``` screen
    # {PackageManagerCommand} install hwloc-gui
    # lstopo
    ```
    ::: figure
    []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#idm139675546559392}
    **图 31.1. `lstopo`{.literal} 输出**
    ::: figure-contents
    ::: mediaobject
    ![lstopo](images/lstopo.png)
    :::
    :::
    :::
-   查看详细的文本输出：
    ``` screen
    # {PackageManagerCommand} install hwloc
    # lstopo-no-graphics
    Machine (15GB)
      Package L#0 + L3 L#0 (8192KB)
        L2 L#0 (256KB) + L1d L#0 (32KB) + L1i L#0 (32KB) + Core L#0
            PU L#0 (P#0)
            PU L#1 (P#4)
           HostBridge L#0
        PCI 8086:5917
            GPU L#0 "renderD128"
            GPU L#1 "controlD64"
            GPU L#2 "card0"
        PCIBridge
            PCI 8086:24fd
              Net L#3 "wlp61s0"
        PCIBridge
            PCI 8086:f1a6
        PCI 8086:15d7
            Net L#4 "enp0s31f6"
    ```
:::
::: itemizedlist
**其它资源**
-   `numactl(8)`{.literal}、`lscpu(1)和`{.literal} `lstopo(1)`{.literal}
    man page
:::
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#configuring-kernel-tick-time_configuring-an-operating-system-to-optimize-cpu-utilization}配置内核绑定时间 {.title}
:::
默认情况下，Red Hat Enterprise Linux 8 使用无空循环内核，它不会中断空闲
CPU 以降低功耗并允许新处理器利用深层次的睡眠状态。
Red Hat Enterprise Linux 8
还提供了动态无循环选项，对于对延迟敏感的工作负载（如高性能计算或实时计算）非常有用。默认情况下，动态无循环选项被禁用。红帽建议使用
`cpu-partitioning`{.literal} [**TuneD**]{.strong} 配置集为指定为
`isolated_cores`{.literal} 的内核启用动态无空选项。
这个步骤描述了如何手动启用动态无循环行为。
::: orderedlist
**流程**
1.  要在特定内核中启用动态无循环行为，请使用 `nohz_full`{.literal}
    参数在内核命令行上指定这些核心。在 16 个核心系统中，在
    `/etc/default/grub`{.literal} 文件的 `GRUB_CMDLINE_LINUX`{.literal}
    选项中附加此参数：
    ``` screen
    nohz_full=1-15
    ```
    这可实现内核 `1`{.literal} 到 `15`{.literal}
    上的动态无引号行为，将所有计时操作移至唯一未指定的核心（核心
    `0`{.literal}）。
2.  要永久启用动态无循环行为，请使用编辑后的默认 文件重新生成 GRUB2
    配置。在带有 BIOS 固件的系统中，执行以下命令：
    ``` screen
    # grub2-mkconfig -o /etc/grub2.cfg
    ```
    在带有 UEFI 固件的系统中，执行以下命令：
    ``` screen
    # grub2-mkconfig -o /etc/grub2-efi.cfg
    ```
3.  当系统引导时，手动将 `rcu`{.literal}
    线程移到非延迟敏感内核中，在本例中为 core `0`{.literal}:
    ``` screen
    # for i in `pgrep rcu[^c]` ; do taskset -pc 0 $i ; done
    ```
4.  可选： 在内核命令行中使用 `isolcpus`{.literal}
    参数，将某些核心与用户空间任务隔离。
5.  可选：将内核 `的回写 bdi-flush`{.literal} 线程的 CPU 关联性设置为
    housekeeping 内核：
    ``` screen
    echo 1 > /sys/bus/workqueue/devices/writeback/cpumask
    ```
:::
::: itemizedlist
**验证步骤**
-   系统重启后，验证是否启用了 `dyntick`{.literal} ：
    ``` screen
    # journalctl -xe | grep dynticks
    Mar 15 18:34:54 rhel-server kernel: NO_HZ: Full dynticks CPUs: 1-15.
    ```
-   验证动态无循环配置是否正常工作：
    ``` screen
    # perf stat -C 1 -e irq_vectors:local_timer_entry taskset -c 1 sleep 3
    ```
    该命令测量 CPU 1 上的粘滞，同时指示 CPU 1 休眠 3 秒。
-   默认内核计时器配置会在常规 CPU 上显示大约 3100 号：
    ``` screen
    # perf stat -C 0 -e irq_vectors:local_timer_entry taskset -c 0 sleep 3
     Performance counter stats for 'CPU(s) 0':
                 3,107      irq_vectors:local_timer_entry
           3.001342790 seconds time elapsed
    ```
-   配置动态无空循环内核后，您应该会看到大约 4 ticks：
    ``` screen
    # perf stat -C 1 -e irq_vectors:local_timer_entry taskset -c 1 sleep 3
     Performance counter stats for 'CPU(s) 1':
                     4      irq_vectors:local_timer_entry
           3.001544078 seconds time elapsed
    ```
:::
::: itemizedlist
**其它资源**
-   `perf(1)和`{.literal} `cpuset(7)`{.literal} man page
-   [关于 nohz_full
    内核参数红帽知识库文章](https://access.redhat.com/solutions/2273531){.link}
-   [如何验证 sysfs 中\"隔离\"和\"nohz_full\"CPU
    信息的列表？红帽知识库文章](https://access.redhat.com/solutions/3875421){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#overview-of-an-interrupt-request_configuring-an-operating-system-to-optimize-cpu-utilization}中断请求概述 {.title}
:::
中断请求或 IRQ
是从硬件部分向处理器发送立即关注的信号。系统中的每个设备都会被分配一个或多个
IRQ
号，以允许它发送唯一中断。启用中断时，接收中断请求的处理器会立即暂停当前应用线程的执行，以解决中断请求。
由于中断停止正常操作，高中断率可能会严重降低系统性能。可以通过配置中断关联或在批处理中发送多个较低优先级中断（联合多个中断）来减少中断所花费的时间。
中断请求具有关联关联性属性
`smp_affinity`{.literal}，定义处理中断请求的处理器。若要提高应用性能，可将中断关联和进程相关性分配到同一处理器或同一核心上的处理器。这允许指定的中断和应用程序线程共享缓存行。
在支持中断的系统中，修改中断请求的 `smp_affinity`{.literal}
属性可设置硬件，以便决定使用特定处理器为中断提供服务，而无需内核干预。
::: section
::: titlepage
## []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#balancing-interrupts-manually_configuring-an-operating-system-to-optimize-cpu-utilization}手动平衡中断 {.title}
:::
如果您的 BIOS 导出其 NUMA 拓扑，`irqbalance`{.literal}
服务可以在请求服务的本地节点上自动提供中断请求。
::: orderedlist
**流程**
1.  检查哪些设备与您要配置的中断请求对应。
2.  查找您的平台的硬件规格。检查系统上的芯片组是否支持分发中断。
    ::: orderedlist
    1.  如果存在，您可以按照以下步骤中所述配置中断交付。此外，检查您的芯片组用于平衡中断的算法。某些
        BIOS 拥有配置中断发送的选项。
    2.  如果没有，您的芯片组总是将所有中断路由到单个静态
        CPU。您无法配置使用哪个 CPU。
    :::
3.  检查您的系统上使用哪个 Advanced Programmable Interrupt
    Controller(APIC)模式：
    ``` screen
    $ journalctl --dmesg | grep APIC
    ```