现在，举一个与系统管理员更为相关的例子。每一个好的系统管理需要对服务器以及服
div区域是因为docutils（进行HTML转换用到的库）在产生的HTML页面中嵌入样式表
最后，我们做了一个字符串分割，提取在和标记之间的文本。我们分割
字符串，再通过docutils.core.publish_string()运行字符串，并将它格式化为HTML。
整个过程十分简单。首先加载docutils.core。然后定义了一个包含reStructuredText的
（stylesheet），以使转换的HTML页面看起来不是太平淡。
138|
This is just a simple
In [5]: print html[html.find('') + 6:html.find('')] 
In [4]: html = docutils.core.publish_string(source=rest, writer_name='html')
item three
item two
item one
Heading
asimov
vinge
Server Name
··
|第4章
..：
：
...:gibson
.：
...:card
-item three
-item one
Server Name
stephenson
asimov
192.168.1.8
192.168.1.2
IP Address
"id="subheading">SubHeading
192.168.1.32
192.168.1.16
192.168.1.8
192.168.1.4
192.168.1.2
IP Address
www.TopSage.com
database server
web server
mail server
Function
print server
database server
webserver
mail server
Function
---
## Page 153
为XHTML。可以编写命令行工具来调用Python库，并转换Textile文件，然后重定向输
在这本关于Python的书中介绍它呢？原因是Python库允许处理Textile标记，并将其转换
以及在线论坛中Texttile被广泛使用。那么，如果Textile是一种标记语言，为什么我们
为*simple*标记，产生有效的XHTML。在一些web应用中，例如内容管理系统、博客
另外一个非常好的纯文本标记模式是Textile。根据其网站的说明，Textile将纯文本替换
print server
192.168.1.32
file server
192.168.1.16
stephenson
Function
IPAddress
Server Name
In [9]: print html[html.find('') + 6:html.find('')]
writer_name='html')
In [8]: html = docutils.core.publish_string(source=server_list,
databaseserver
192.168.1.8
asimov
web server
192.168.1.4
vinge
mail server
card
stephenson
tr>gibson
td>192.168.1.2
/tr>
/colgroup>
/tr>
tr>
/tr>
/tr>
192.168.1.32
192.168.1.16
print server
file server
www.TopSage.com
文档与报告丨139
---
## Page 154
息之前也说过，是一个包括IP地址和功能的服务器列表：
的ins和outs进行介绍，我们会演示Textile的一个手工收集数据的示例。示例中收集的信
com/textile/提供了许多与使用Textile相关的不错的参考资料。由于不会过多地对Textile
我们在这里不会对Textile进行教学。在web上有大量这方面的资源。例如http://hobix.
演示了如何将一个Textil的符号列表转换为XHTML：
Textiler对象，并且在该对象上调用一个简单的方法来开始使用Textil。下面示例代码
get install python-textile命令安装。一旦被安装，就可以通过简单地加载创建一个
大的帮助。
XHTML。无论怎样做，Textile标记和Textile处理模块都可以根据归档的需求为你带来巨
140|第4章
（如果已经安装了）来完成安装。对于Ubuntu，包名是python-textile，可以使用apt-
出到XHTML文件中。或者可以在一些脚本中调用Textil转换模块，并编程处理返回的
In [1]:import textile
item two
In[3]:print t.process()
In [2]: t = textile.Textiler("'* item one
In [4]: t = textile.Textiler(server_list)
item three
In [1]: import textile
Server Name
In [5]: print t.process()
tr>
gibson|192.168.1.32|print server|
stephenson|192.168.1.16|file server
asimov|192.168.1.8|database server
vinge|192.168.1.4|web server|
5
li>item one
[3]: print server_list
..：
|gibson|192.168.1.32|print server|'
stephenson|192.168.1.16|file server
asimov|192.168.1.8|database server|
www.TopSage.com
---
## Page 155
接下来的两个示例将继续前面的内容，
Graphical Images
为一种更具表达力的格式。
是，接下来的示例主要集中在对已经采集的数据进行转换方面，即如何将这些数据转换
就更好了。从技术上说，ReST和Textile包括对共享数据的收集和格式化两个步骤，但
别的格式。这些格式应具有容易被用户理解的特点，如果还同时具有很强的吸引力，那
将信息交到用户手中之前，需要对信息进行格式化，将其转换为一种更为容易读取和识
信息格式化
HTML通过FTP传输到某处的web服务器），那么docutils或者Textile库都是非常有用的
工具。
这些数据之上完成一些操作（如将HTML依据接收者列表通过email进行发送，或是将
能。如果确实有一些数据需要转换为HTML，例如服务器列表，联系人列表，然后在
可以看到，使用ReST和Textile都可以有效地整合将纯文本数据转换为Python脚本的功
print server
192.168.1.32
gibson
file server
tr>
192.168.1.16
stephenson
databaseserver
192.168.1.8
asimov
vinge
mail server
192.168.1.2
card
Function
IP Address
tr>
/tr>
www.TopSage.com
，即解析Apache日志文件的客户端IP地址和传输
文档与报告丨141
---
## Page 156
数据：
户共享的信息。现在，我们根据shelve文件创建一个图表对象，实现更方便地阅读这些
的字节数。前一章中的示例产生了一个shelve文件，其中包括了一些我们希望与其他用
在获得用于生成图表的数据之后，使用gdchart来制作一个数据的图形表示。首先创建
XXX代替具体IP地址，因为这是从一个实际的服务器上获取的日志文件。
bytes_sent是第一个元素，list.sort()方法会按该字段进行排序。再次使用复合列表
序。使用一个列表对之前的元组进行反向排序。现在元组的内容由（ip_addres s，
个元素是关键字的值。items()方法能够按着使数据更有意义的方式来对数据进行排
方法。items()返回一个元组列表，这个元组中的第一个元素就是字典关键字，第二
创建的shelve文件。shelve对象类似内建的字典对象，我们能够调用其中的Items()
并输出到文件，然后关闭shelve对象。图4-1显示了生成的图表。
签，这两项都可以从Apache日志文件解析模块中获得。最后，使用draw()来绘制图表，
为单位定义图表的大小。使用冒号来设置背景、前景并创建标题。为图表设置数据和标
在这个示例中，首先加载了两个模块，gdchart和shelve。之后打开了在前一个示例中
142
一个图表对象gdchart.Bar，为其设置一些属性，并生成一个PNG文件。之后，以像素
#!/usr/bin/env python
chart = gdchart.Bar()
ip_addresses = ['xxx.xxx.xxx.xxx' for i in items_list]
bytes_sent = [i[o] for i in items_list]
items_list.sort()
items_list = [(i[1], i[o]) for i in shelve_file.items()]
import shelve
import gdchart
shelve_file.close()
chart.draw("bytes_ip_bar.png")
chart.setLabels(ip_addresses)
chart.setData(bytes_sent)
chart.bg_color :
chart.height = 400
chart.width = 400
第4章
"IP Address"
II
'white'
'black'
fori
www.TopSage.com
list]
---
## Page 157
了饼图：
下面是另一个可视的格式化shelve数据脚本示例，但是这次没有使用柱状图，而是使用
图4-1：每个IP地址请求字节数的柱状图
chart.color = color_list
for i in bytes_sent:
color_list=[]
chart.height = 800
chart.width = 800
items_list.sort(
import itertools
import
import gdchart
shelve
Bytes
Sent
20000
15000
25000
30000
35000
40000
45000
50000
55000
60000
5000
0000
70000
fori
xxx.xxx.xxx.xxx
xxX.xxX.xxX'xXX
in items
xXX.XXX'XXXXXX
www.TopSage.com
xXX.xXX*xXX.XXX
xxx*xxx*xxx.xxx
Usage
xxX.xxX.xxX'XXX
_list]
xxX*xxX*xxX*xXx
Address
hg
xXX.xXX.xXX'xXX
IPAddress
xxx*xxxxxX.xxx
xXX.xxX.xXX'XXX
xXX.XXX.xxX.xXX
xXX.xXX*xXX'XXX
xXX'XXX'XXX'XXX
xXX.xXX.xXX*XXX
XXX'XXX'XXX'XXX
xxX.xXX.xxX*XXX
xxX'xxX.xXX'xXX
文档与报告丨143
---
## Page 158
图4-2：每个IP地址请求字节数的饼图
对象（例如列表）。
色。我们建议学习一下itertools模块。这里有许多有趣的函数可以帮助我们处理选代
轮流使用三种灰度色。这里使用itertools模块中的cycle()函数来轮换所选择的三种颜
不是都使用黑色。因为这是一个饼图，若将所有数据饼块以黑色表示将无法阅读，因此
gdchart.Pie对象实例，而不是gdchart.Bar。接下来，为单独的数据点设置颜色，而
这个脚本与柱状图示例几乎相同，只是稍微做了一些修改。首先，脚本创建了一个
144
xxX.xXX.xXX.
shelve_file.close()
chart.draw("bytes_ip_pie.png")
chart.setlabels(ip_addresses)
chart.setData(*bytes_sent)
chart.title =
chart.plot_color ='black'
第4章
XXX
.xxX.XX