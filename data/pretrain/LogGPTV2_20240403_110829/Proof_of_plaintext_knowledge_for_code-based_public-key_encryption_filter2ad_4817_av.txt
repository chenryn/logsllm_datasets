where h denotes the size of HS. Then we prove in Lemma 37 that the game G⋆
3,0 is identical
to the game G⋆
3,1 using a statistical argument, which is only true in the selective setting, and
using the restrictions on the queries imposed by the security game. Namely, we show that for
all adversaries A′:
AdvG⋆
3,0
(A′) = AdvG⋆
3,1
(A′).
Putting everything together, we obtain:
Advone-AD-IND-static
MIFE,A
(λ) ≤ 2 · AdvDk(p)-mddh
G1,B1
(λ) + 2 · AdvUk(p)-mddh
G2,B2
(λ) +
2
p
.
Note that the Uk(p)-MDDH is implied by Dk(p)-MDDH for any matrix distribution Dk(p)
according to Lemma 3. In particular, it is implied by the well-known k-Lin assumption.
Lemma 33: Game G0,β to G1,β
There exists a PPT adversary B1,β such that:
AdvG0,β (A) − AdvG1,β (A) ≤ AdvDk-mddh
G1,B1,β
(λ) +
1
p
.
4.2 Achieving Adaptive Security
97
Proof of Lemma 33. Here, we switch ([A]1, [Asi]1) computed by OEnc(i,·,·) to ([A]1, [Asi +
u ]1) simultaneously for all queried i ∈ [n], where A ←R Dk(p), u ←R Zk+1
\ Span(A),
si ←R Zk
p.
p
This change is justiﬁed by the facts that:
1. The distributions: {si}i∈[n] and {si + s}i∈[n], where s ←R Zk
are identically distributed.
p and for all i ∈ [n], si ←R Zk
p,
2. By the Dk-MDDH assumption, we can switch ([A]1, [As]1) to ([A]1, [u]1), where A ←R
Dk, s ←R Zk
p, and u ←R Zk+1
p
.
3. The uniform distribution over Zk+1
p
and Zk+1
p
\ Span(A) are 1
p-close, for all A of rank k.
Combining these three facts, we obtain a PPT adversary B1,β such that
1
p
AdvG0,β (A) − AdvG1,β (A) ≤ AdvDk(p)-mddh
(λ) +
G1,B1,β
.
p
, Vi ←R Zk×(k+1)
Now we describe the adversary B1,β. Upon receiving an MDDH challenge (PG, [A]1, [h]1),
B1 picks Wi ←R Zm×(k+1)
, and zi ←R Zk
p for all i ∈ [n], thanks to which
it can compute and send (pk,{eki}i∈CS) to A, and simulate the oracle OKeygen, as described
in Figure 4.8. To simulate OEnc(i,·,·), B1,β picks si ←R Zk
p, sets [ci]1 := [A]1si + [h]1, and
computes the rest of the challenge ciphertext from [ci]1. Note that when [h]1 is a real MDDH
challenge, this simulates game G0,β, whereas it simulates G1,β when [h]1 is uniformly random
over Gk+1
(within 1
p statistical distance).
p
1
Lemma 34: Game G1,β to G2,β
AdvG1,β (A) = AdvG2,β (A).
Proof of Lemma 34. We argue that games G1,β and G2,β are the same, using the fact that for
all A ∈ Z(k+1)×k
such that A⊤a⊥ = 0 and (a⊥)⊤u = 1,
the following distributions are identical:
\ Span(A), and all a⊥ ∈ Zk+1
, u ∈ Zk+1
p
p
p
{Vi, zi}i∈[n] and {Vi − zi(a⊥)⊤ , zi}i∈[n],
p. This is the case because the matrices Vi
p
and
di := W⊤
i − a⊥z⊤
, and zi ←R Zk
where for all i ∈ [n], Vi ←R Zk×(k+1)
are picked uniformly, independently of the vectors zi. This way, we obtain
i yi +(cid:16)V⊤
i ]1 :=h(cid:0)Vi − zi(a⊥)⊤(cid:1)(cid:0)Asi + u(cid:1)i1
=(cid:2)Vi(cid:0)Asi + u(cid:1)(cid:3)1 − hzi(a⊥)⊤ui1
=(cid:2)Vi(cid:0)Asi + u(cid:1)(cid:3)1
i (cid:17) r = W⊤
i r − a⊥z⊤
i r
i yi + V⊤
+ [zi]1
+ [zi]1
[c′′
where we use the fact that (a⊥)⊤u = 1 is the last equality, and the fact that A⊤a⊥ = 0 in the
penultimate equality. This corresponds to game G2,β.
98
Chapter 4. Multi-Input Inner-Product Functional Encryption from Pairings
Lemma 35: Game G2,β to G3,β
There exists a PPT adversary B3,β such that:
AdvG2,β (A) − AdvG3,β (A) ≤ AdvUk(p)-mddh
G2,B3,β
(λ) +
1
p − 1
.
p,ez1, . . . ,ezn ←R Zp and r ←R Zk
Proof of Lemma 35. Here, we switch {[r]2, [hzi, ri]2}i∈HS used by OKeygen to {[r]2, [ezi]2}i∈HS,
where for all i ∈ [n], zi ←R Zk
p. This is justiﬁed by the fact that
{[r]2, [hzi, ri]2}i∈HS is identically distributed to [Ur]2 where U ←R Uk+h,k, where h denotes
the size of HS (wlog. we assume that the upper k rows of U are full rank), which is indis-
tinguishable from a uniformly random vector over Gk+h
, that is, of the form: {[r]2, [ezi]2}i∈HS,
according to the Uk+h,k(p)-MDDH assumption. To do the switch simultaneously for all calls
to OKeygen, that is, to switch {[rj]2, [hzi, rji]2}i∈HS,j∈[Q0] to {[rj]2, [ezj
i ]2}i∈HS,j∈[Q0], where Q0
p, and ezj
denotes the number of calls to OKeygen, and for all j ∈ [Q0], rj ←R Zk
i ←R Zp for all
i ∈ HS, we use the Q0-fold Uk+h,k(p)-MDDH assumption. Namely, we build a PPT adversary
B′
3,β such that:
2
AdvG2,β (A) − AdvG3,β (A) ≤ Adv
Q0- Uk+h,k(p)-mddh
G2,B′
3,β
(λ).
3,β proceeds as follows.
This, together with Lemma 3 (Uk(p)-MDDH ⇒ Q0-fold Uk+h,k(p)-MDDH), implies the lemma.
Adversary B′
-Simulation of (pk,{eki}i∈CS): Upon receiving an Q0-fold Uk+h,k(p)-MDDH challenge
2
(cid:16)PG, [U]2 ∈ G(k+h)×k
3,β samples A ←R Dk(p), u ←R Zk+1
B′
for all i ∈ [n]: Wi ←R Zm×(k+1)
pk := (PG, [A]1), {eki := (zi, [WiA]1, [ViA]1)}i∈CS) to A.
-Simulation of Enc(i, x0
, Vi ←R Zk×(k+1)
,hh1k···khQ0i2 ∈ G(k+n)×Q0
\ Span(A), a⊥ ←R Zk+1
p
p
p
p
2
i , x1
i ):
(cid:17) ,
s.t. A⊤a⊥ = 0 and u⊤a⊥ = 1,
p. It returns
. For all i ∈ CS: zi ←R Zk
p, computes [ci]1 := [Asi]1 + [u]1, [c′
i] := Wi[ci]1 + [xβ
i ]1, [c′′
i ]1 := Vi[ci]1,
B′
3,β picks si ←R Zk
and returns
−ci
c′
i
c′′
i
1
to A.
p
3,β sets [r]2 := [hj]2, where hj ∈ Zk
-Simulation of OKeygen(y1k···kyn):
On the j’th query y1k···kyn, B′
components of hj ∈ Zk+h
one of the h lowest components of hj, call it hj
i [hj]2 − a⊥[hj
to compute [di]2 := [W⊤
[W⊤
is a real MDDH challenge, B′
p denotes the k-upper
(recall that h denotes the size of HS). For each i ∈ HS, it uses
i (a diﬀerent one is used for each i ∈ HS),
i]2. For each i ∈ CS, it computes [di]2 :=
3,β simulate the game G2,β,
i yi]2 + V⊤
i [hj]2 − a⊥[hzi, hji]2.
Note that when hh1k···khQ0i2
whereas it simulates G3,β whenhh1k···khQ0i2
is uniformly random over G(k+h)×Q0
i yi]2 + V⊤
.
2
Lemma 36: Game G3,β to G⋆
3,β
4.2 Achieving Adaptive Security
99
There exists a PPT adversary A⋆ such that:
AdvG3,β (A) = (X + 1)2hm · AdvG⋆
3,β
(A⋆),
where h denotes the size of HS ⊆ [n], the set of honest input slots.
i , z1
i )i∈HS ←R [0, X]2hm, which it sends, together with CS, to the game G⋆
Proof of Lemma 36. Upon receiving a set CS ⊆ [n] from A, A⋆ guesses the challenge by picking
random: (z0
3,β, which
is a selective variant of game G3,β. Then it receives a public key pk and ciphertexts {cti}i∈HS.
Whenever A queries OKeygen, A⋆ forwards the query to its own oracle, and gives back the
answer to A. When A calls OEnc(i, x0
i ), if i ∈ CS, then A⋆ queries its own encryption
oracle on (i, x0
i ) and forwards the answer to A. If i ∈ HS, then A⋆ veriﬁes its guess was
i ) = (z0
i ). If the guess is incorrect, A⋆ ends the simulation,
i , z1
correct, that is, whether (x0
and sends α := 0 to the game G⋆
3,β. Otherwise, it returns cti to A, and keeps answering A’s
queries as explained. Finally (if it didn’t end the simulation before the end), it forwards A’s
output α to the game G⋆
When A⋆ guesses correctly, it simulates A’s view perfectly. When it fails to guess, it outputs
i , x1
i , x1
i , x1
3,β.
α := 0. Thus, the probability that A⋆ outputs 1 in G⋆
3,β is exactly (X +1)−2hm·AdvG3,β (A).
Lemma 37: Game G⋆
3,0 to G⋆
3,1
For all adversaries A′, we have:
AdvG⋆
3,0
(A′) = AdvG⋆
3,1
(A′).
Proof of Lemma 37. We show that game G⋆
3,1 are perfectly indistinguishable, using an
information theoretic argument that crucially relies on the fact that these games are selective,
and using the restrictions on the oracle queries imposed by the security game.
3,0 and G⋆
This proof is similar to the proof of Lemma 30 for the one-SEL-IND-static security of the
MIFE in Figure 4.1.
(Zm
Namely, We show that G⋆
p )n, for all {xb
3,β does not depend on β, using the fact that for all y1k···kyn ∈
p
i , yii }i∈HS ,
i (a⊥)⊤ ,ezi − hxβ
Zm×(k+1)
(note that here we crucially rely on the fact the games G⋆
i ∈ [0, X]m}i∈HS,b∈{0,1}, the following are identically distributed:
{Wi,ezi}i∈HS and {Wi − xβ
where ezi ←R Zp for all i ∈ HS, and a⊥ ←R Zk+1
For each query y1k···kyn, OKeygen(msk, y1k···kyn) picks values ezi ←R Zp and Wi ←R
fore, using the previous fact, we can switch ezi to ezi − hxβ
all i ∈ HS, without changing the distribution of the game.
i , x1
This way, for all i ∈ HS, OEnc(i, x0
i ) computes:
i = (Wi − xβ
i (a⊥)⊤ )ci + xβ
for i ∈ HS that are independent of y1k···kyn and the challenge {xb
3,0 and G⋆
i , yii and Wi to Wi − xβ
3,1 are selective here), there-
i (a⊥)⊤ , for
such that A⊤a⊥ = 0 and u⊤a⊥ = 1.
i (a⊥)⊤ )(Asi + u) + xβ
i := (Wi − xβ
c′
i = Wici,