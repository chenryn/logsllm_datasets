to pay for each certificate.
Even for smaller operators, free is an enabler. It allows for initial
setup without arranging for payment and then “fire and forget”
configuration without concerns that the credit card will become
invalid and result in reissuance failures.
Gradual deployment is essential. Let’s Encrypt is far from the
only attempt to provide universal free server authentication, but it
is the first to see widespread adoption. Other efforts include DNS
Authentication of Named Entities (DANE) [19], Sovereign Keys [39],
and MonkeySphere [70]. As a concrete comparison, the DNSSEC
root zone was signed in 2010 and DANE was published in 2012—
three years before Let’s Encrypt launched—yet there is essentially
no server deployment and no major Web client supports DANE.
While DANE suffers from a number of deficiencies [60], the primary
problem is hinted at by “no major Web client”. In order for servers
to use DANE, clients first have to change, but, conversely, without
any servers, clients have no incentive to support it. This is also
true for Sovereign Keys and other alternative proposals for Web
server authentication. By contrast, because Let’s Encrypt issued
ordinary Web PKI certificates that, thanks to the cross-signature,
were immediately valid in nearly any browser, it was able to deploy
rapidly without asking both sides to change.
There is an important lesson here for the future. The applica-
tion of blockchain technologies for cryptocurrency has led to a
number of proposals for rooting identity in a blockchain, so that
it would be possible to directly verify ownership of a given name
without requiring some third party to verify and then vouch for
that ownership, as with DV certificates. However, as with previous
proposals, actual deployment of such a system would require every
client to change, and until that happens, servers would need an
ordinary Web PKI certificate in any case. If history is any guide,
this chicken-and-egg problem will stall deployment. One potential
solution would be to issue Web PKI certificates but to attach proofs
of ownership rooted in the blockchain-based identity system. This
would allow all clients to talk to those servers while clients and Cer-
tificate Transparency monitors could validate that those certificates
had been properly issued and report any misissuance.
8.2 Remaining Security Concerns
As noted above, Let’s Encrypt has increased HTTPS deployment
but has not directly made the Web PKI itself appreciably more
secure. Important security challenges remain, including that domain
validation as a whole remains far from as secure as we would like
it to be. Moreover, debate continues about whether Let’s Encrypt
has had a negative impact on some aspects of Web PKI security.
Automation has improved but not solved validation. While
a fully-automated validation process has eliminated many of the
human sources of error that plagued other certificate authorities,
the approach is not foolproof.
Sept,2015|Symantec:2,740Jan,2019|NoTLS:20,362Jan,2019|Comodo:32,059Sept,2015|NoTLS:62,142Jan,2016|NoTLS:56,280Jan,2018|NoTLS:30,115Jan,2018|Comodo:32,404Jan,2019|Let'sEncrypt:30,229Jan,2019|DigiCert:20,811Sept,2015|Other:29,468Jan,2019|GlobalSign:5,766Jan,2019|cPanel:3,934Jan,2019|Amazon:3,787Jan,2019|GeoTrust:382Jan,2019|Thawte:93Jan,2019|Symantec:86Sept,2015|Comodo:17,624Jan,2018|Let'sEncrypt:18,326Jan,2019|Other:23,978Sept,2015|DigiCert:4,669Sept,2015|Thawte:3,907Jan,2018|Other:23,724Jan,2018|DigiCert:7,419Jan,2018|GlobalSign:5,662Jan,2018|cPanel:4,184Jan,2018|Amazon:2,439Jan,2018|GeoTrust:10,702Jan,2018|Symantec:3,282Sept,2015|GeoTrust:14,051Jan,2018|Thawte:3,231Jan,2016|GlobalSign:4,753Sept,2015|GlobalSign:6,888Jan,2016|DigiCert:4,718Jan,2016|Other:29,133Jan,2016|Comodo:23,905Jan,2016|Let'sEncrypt:330Jan,2016|GeoTrust:14,782Jan,2016|Symantec:3,659Jan,2016|Thawte:3,929Feb,2017|Let'sEncrypt:8,199Feb,2017|Other:23,676Feb,2017|DigiCert:4,694Feb,2017|GlobalSign:4,683Feb,2017|cPanel:3,847Feb,2017|Amazon:1,112Feb,2017|GeoTrust:13,062Feb,2017|Thawte:3,542Feb,2017|Symantec:3,753Feb,2017|Comodo:26,411Feb,2017|NoTLS:48,511Session 10E: CertificatesCCS ’19, November 11–15, 2019, London, United Kingdom2484One major security objective we have not yet accomplished with
Let’s Encrypt is strongly protecting validation against DNS- and
routing-layer attacks. An attacker who can use DNS or BGP hijack-
ing to redirect traffic—or who can compromise a network device
close to the server or the CA—can intercept domain validation traf-
fic and falsely request a certificate [26, 52, 84]. Domain owners can
make some of these attacks more difficult by limiting the CAs that
can issue for them using CAA [49], and vigilant operators can use
CT monitors (e.g., [41]) to detect false issuances and respond.
As a further mitigation against route hijacking and man-in-the-
middle attacks, Let’s Encrypt is experimenting with multiple per-
spective validation. In this approach (similar to [104]), control of
the domain is simultaneously verified from multiple vantage points
in different autonomous systems, a strong majority of which must
succeed for the certificate to be issued.
Unfortunately, none of these measures can protect against the
full spectrum of validation attacks. The fundamental problem is that
domain validation is itself not cryptographically protected, since it
is the bootstrapping mechanism by which sites join the PKI. After
a domain has been validated once, it might seem sensible to give it
some way to disable future non-cryptographic validation methods,
but, as with HPKP [50], this risks creating downtime for sites that
lose their validation keys—or, worse, when attackers temporarily
take over a domain and change the key to one they control. There
may be no easy solution.
Phishing remains a challenge for the Web in general. Prob-
ably the most frequent complaint about Let’s Encrypt is that it is
used in the perpetration of phishing attacks. By some measures,
more than half of phishing sites now use HTTPS [56], as do many
sites that distribute malware, and a large number of those sites
use certificates issued by Let’s Encrypt [34]. Some observers have
called for CAs to take a more active role in combating such sites.
In our view, CAs are not well positioned to detect phishing and
malware campaigns, or to police content more generally. They
simply do not have sufficient ongoing visibility into sites’ content,
which can change much faster than certificate issuance and revoca-
tion cycles. As a result, certificates cannot offer assurances related
to the safety of Web content.
Attempts to limit certificates (and thus HTTPS) to domains with
entirely safe content are likely to be highly problematic. Some sites
will be denied service because of false positives or questionable def-
initions of what constitutes safe content. Another problem is that
the only enforcement mechanism CAs have is to deny service to
entire domains. Should a major global news site have its certificates
revoked because a single ad on a single page had malware embed-
ded? Finer-grained mechanisms for protecting users are needed.
Let’s Encrypt once checked Google’s Safe Browsing API before
certificate issuance, but it has stopped doing so for these reasons.
Browsers and search engines have much greater content aware-
ness, and they can protect users at the page level (or better). For
instance, Google Safe Browsing [89] uses machine learning to con-
tinuously detect malicious content. The results are used to warn
Chrome users when they try to load pages with unsafe content.
Users are much better informed and protected when browsers in-
clude such anti-phishing and anti-malware features.
Fortunately, widespread HTTPS deployment has made it possible
for browsers to change their security indicator UIs in ways that
reduce the risk of user confusion. Rather than showing a positive
security indicator for HTTPS (which users might mistake for a
“seal of approval” on the site’s content), Chrome, Firefox, and other
browsers have begun to show negative security indicators for HTTP
sites [83]. This also further encourages sites to adopt HTTPS.
9 CONCLUSION
In this paper, we described how we created Let’s Encrypt, a free,
open, and automated HTTPS certificate authority (CA) designed
to accelerate universal adoption of HTTPS. We presented the ar-
chitecture of the CA software system (Boulder) and the structure
of the organization that operates it (ISRG). We also described the
design of ACME, the IETF-standard protocol we created to auto-
mate CA–server interactions and certificate issuance. Finally, we
measured the CA’s impact on the Web and the CA ecosystem.
Prior to our work, a major barrier to wider HTTPS adoption was
that deploying it was complicated, expensive, and error-prone for
server operators. Let’s Encrypt overcomes these through a strategy
of automation: identity validation, certificate issuance, and server
configuration are fully robotic, which also results in low marginal
costs and enables the CA to provide certificates at no charge.
We designed Let’s Encrypt to scale to the size of the entire Web.
In just over three years of operation, it is well on its way: it has
issued over 538 million certificates and accounts for more valid
browser-trusted certificates than all other CAs combined. We hope
that in the near future, clients will start using HTTPS as the default
Web transport. Eventually, we may marvel that there was ever a
time when Web traffic traveled over the Internet as plaintext.
ACKNOWLEDGMENTS
We thank the entire staff at Let’s Encrypt as well as the hun-
dreds of community members who have helped make this project
successful—without them, the Web would be far less secure. We also
thank J.C. Jones and the members of the IETF ACME working group.
Mark Reid and Daniel Thorn provided assistance with Firefox data.
This material is based upon work supported by the U.S. National Sci-
ence Foundation under Awards CNS-1345254, CNS-1409505, CNS-
1518888, and CNS-1823192, and by the Alfred P. Sloan Research
Fellowship. Let’s Encrypt gratefully acknowledges its sponsors and
donors, who are listed at https://letsencrypt.org/sponsors/.
REFERENCES
[1] Josh Aas. 2014. Let’s Encrypt: Delivering SSL/TLS Everywhere. Let’s Encrypt
Blog. https://letsencrypt.org/2014/11/18/announcing-lets-encrypt.html
[2] Josh Aas. 2015. Entering Public Beta. Let’s Encrypt Blog. https://letsencrypt.org/
2015/12/03/entering-public-beta.html
[3] Josh Aas. 2015. Let’s Encrypt is Trusted. Let’s Encrypt Blog. https://letsencrypt.
org/2015/10/19/lets-encrypt-is-trusted.html
[4] Josh Aas. 2015. Our First Certificate Is Now Live. Let’s Encrypt Blog. https://
letsencrypt.org/2015/09/14/our-first-cert.html
[5] Josh Aas. 2018. Issue with TLS-SNI-01 and Shared Hosting Infrastructure. Let’s
Encrypt Community Forum. https://community.letsencrypt.org/t/2018-01-09-
issue-with-tls-sni-01-and-shared-hosting-infrastructure/49996
[6] Josh Aas. 2018. Let’s Encrypt Root Trusted By All Major Root Programs. Let’s
Encrypt Blog. https://letsencrypt.org/2018/08/06/trusted-by-all-major-root-
programs.html
[7] Josh Aas. 2019. Transitioning to ISRG’s Root. Let’s Encrypt Blog. https://
letsencrypt.org/2019/04/15/transitioning-to-isrg-root.html
[8] Barry Abrahamson. 2016. HTTPS Everywhere: Encryption for All Word-
Press.com Sites. The WordPress.com Blog. https://en.blog.wordpress.com/
2016/04/08/https-everywhere-encryption-for-all-wordpress-com-sites/
Session 10E: CertificatesCCS ’19, November 11–15, 2019, London, United Kingdom2485[9] Mustafa Emre Acer, Emily Stark, Adrienne Porter Felt, Sascha Fahl, Radhika
Bhargava, Bhanu Dev, Matt Braithwaite, Ryan Sleevi, and Parisa Tabriz. 2017.
Where the wild warnings are: Root causes of Chrome HTTPS certificate errors.
In 24th ACM SIGSAC Conference on Computer and Communications Security
(CCS ’17). ACM, New York, NY, USA, 1407–1420.
https://doi.org/10.1145/
3133956.3134007
[10] C. Adams, S. Farrell, T. Kause, and T. Mononen. 2005.
Internet X.509 Public
Key Infrastructure Certificate Management Protocol (CMP). RFC 4210. IETF.
https://doi.org/10.17487/RFC4210
[11] David Adrian, Karthikeyan Bhargavan, Zakir Durumeric, Pierrick Gaudry,
Matthew Green, J. Alex Halderman, Nadia Heninger, Drew Springall, Em-
manuel Thomé, Luke Valenta, Benjamin VanderSloot, Eric Wustrow, Santiago
Zanella-Béguelin, and Paul Zimmermann. 2015. Imperfect Forward Secrecy:
How Diffie-Hellman Fails in Practice. In 22nd ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’15). ACM, New York, NY, USA, 5–17.
https://doi.org/10.1145/2810103.2813707
[12] Akamai. 2018. Certificate Provisioning System API v2. Akamai Devel-
oper. https://developer.akamai.com/api/core_features/certificate_provisioning_
system/v2.html
[13] Nadhem J. Al Fardan and Kenneth G. Paterson. 2013. Lucky Thirteen: Breaking
the TLS and DTLS Record Protocols. In 34th IEEE Symposium on Security and
Privacy (S&P ’13). IEEE, New York, NY, USA, 526–540. https://doi.org/10.1109/
SP.2013.42
[14] Johanna Amann, Oliver Gasser, Quirin Scheitle, Lexi Brent, Georg Carle, and
Ralph Holz. 2017. Mission Accomplished? HTTPS Security After DigiNotar.
In 17th ACM Internet Measurement Conference (IMC ’17). ACM, New York, NY,
USA, 325–340. https://doi.org/10.1145/3131365.3131401
[15] Apache HTTP Server Project. 2019. Apache Module mod_md. Apache HTTP
Server Version 2.5. https://httpd.apache.org/docs/trunk/mod/mod_md.html
[16] ASUS. 2019. How to Enable HTTPS and Create a Certificate by Using ASUS
Let’s Encrypt? Support FAQ. https://www.asus.com/us/support/FAQ/1034294/
[17] Nimrod Aviram, Sebastian Schinzel, Juraj Somorovsky, Nadia Heninger, Maik
Dankel, Jens Steube, Luke Valenta, David Adrian, J. Alex Halderman, Viktor
Dukhovni, Emilia Käsper, Shaanan Cohney, Susanne Engels, Christof Paar, and
Yuval Shavitt. 2016. DROWN: Breaking TLS Using SSLv2. In 25th USENIX Secu-
rity Symposium (USENIX Security ’16). USENIX Association, Berkeley, CA, USA,
689–706. https://www.usenix.org/system/files/conference/usenixsecurity16/
sec16_paper_aviram.pdf
[18] AVM GmbH. 2019. MyFRITZ! Internetzugriff auf Ihre FRITZ!Box nun ohne
Sicherheitshinweise im Browser. FRITZ! Labor. https://avm.de/fritz-labor/
weitere-produkte/neues-verbesserungen/lets-encrypt/
10.17487/RFC6454
[19] Richard Barnes. 2011. Use Cases and Requirements for DNS-Based Authentication
of Named Entities (DANE). RFC 6394. IETF. https://doi.org/10.17487/RFC6394
[20] Richard Barnes, Jacob Hoffman-Andrews, Daniel McCarney, and James Kasten.
2019. Automated Certificate Management Environment (ACME). RFC 8555. IETF.
https://doi.org/10.17487/RFC8555
[21] Adam Barth. 2011. The Web Origin Concept. RFC 6454. IETF. https://doi.org/
[22] Matthew Bernhard, Jonathan Sharman, Claudia Ziegler Acemyan, Philip Kortum,
Dan Wallach, and J. Alex Halderman. 2019. On the Usability of HTTPS Deploy-
ment. In 2019 ACM Conference on Human Factors in Computing Systems (CHI ’19).
ACM, New York, NY, USA, 10 pages. https://doi.org/10.1145/3290605.3300540
[23] Benjamin Beurdouche, Karthikeyan Bhargavan, Antoine Delignat-Lavaud,
Cédric Fournet, Markulf Kohlweiss, Alfredo Pironti, Pierre-Yves Strub, and
Jean Karim Zinzindohoue. 2015. A Messy State of the Union: Taming the Com-
posite State Machines of TLS. In 36th IEEE Symposium on Security and Privacy
(S&P ’15). IEEE, New York, NY, USA, 535–552. https://doi.org/10.1109/SP.2015.39
[24] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, and Nadim Kobeissi. 2017.
Formal Modeling and Verification for Domain Validation and ACME. In 21st
International Conference on Financial Cryptography and Data Security (FC ’17).
Springer, New York, NY, USA, 561–578. https://doi.org/10.1007/978-3-319-
70972-7_32
[25] Henry Birge-Lee, Yixin Sun, Annie Edmundson, Jennifer Rexford, and Prateek
Mittal. 2017. Using BGP to Acquire Bogus TLS Certificates. In HotPETS 2017.
2 pages. https://petsymposium.org/2017/papers/hotpets/bgp-bogus-tls.pdf
[26] Henry Birge-Lee, Yixin Sun, Anne Edmundson, Jennifer Rexford, and Prateek
Mittal. 2018. Bamboozling Certificate Authorities with BGP. In 27th USENIX Secu-
rity Symposium (USENIX Security ’18). USENIX Association, Berkeley, CA, USA,
833–849. https://www.usenix.org/system/files/conference/usenixsecurity18/
sec18-birge-lee.pdf
[27] Simon Blake-Wilson, Nelson Bolyard, Vipul Gupta, Chris Hawk, and Bodo
Moeller. 2006. Elliptic Curve Cryptography (ECC) Cipher Suites for Transport
Layer Security (TLS). RFC 4492. IETF. https://doi.org/10.17487/RFC4492
[28] CA/Browser Forum. 2019. Baseline Requirements for the Issuance and Man-
agement of Publicly-Trusted Certificates. Version 1.6.5. https://cabforum.org/
wp-content/uploads/CA-Browser-Forum-BR-1.6.5.pdf
[29] CA/Browser Forum. 2019. Guidelines For The Issuance And Management
https://cabforum.org/
Of Extended Validation Certificates. Version 1.6.9.
wp-content/uploads/CA-Browser-Forum-EV-Guidelines-v1.6.9.pdf
[30] Jeff Chester. 2018.
AT&T, Comcast and Verizon Expand “Big Data”
Tracking and Targeting of Consumers.
Center for Digital Democracy
Blog. https://www.democraticmedia.org/blog/att-comcast-verizon-expand-
big-data-tracking-targeting-consumers
[31] Comodo. 2015. SSL Certificate with Free Trust Logo. Internet Archive version.