    /* ===================================================================== */
    INT32 Usage()
    {
        cerr 
    #include 
    #include "pin.H"
    using std::cerr;
    using std::endl;
    // 在img加载时调用该函数，计算image中的静态指令数量
    VOID ImageLoad(IMG img, VOID* v)
    {
        UINT32 count = 0;
        for (SEC sec = IMG_SecHead(img); SEC_Valid(sec); sec = SEC_Next(sec))
        {
            for (RTN rtn = SEC_RtnHead(sec); RTN_Valid(rtn); rtn = RTN_Next(rtn))
            {
                // 准备处理RTN，RTN并不会分解成bbl，只是INS的一个序列
                RTN_Open(rtn);
                for (INS ins = RTN_InsHead(rtn); INS_Valid(ins); ins = INS_Next(ins))
                {
                    count++;
                }
                // 在处理完与RTN相关的数据后就进行释放，以节省空间
                RTN_Close(rtn);
            }
        }
        fprintf(stderr, "Image %s has  %d instructions\n", IMG_Name(img).c_str(), count);
    }
    /* ===================================================================== */
    /* Print Help Message                                                    */
    /* ===================================================================== */
    INT32 Usage()
    {
        cerr 
    #include 
    #include 
    /* ===================================================================== */
    /* Command line Switches */
    /* ===================================================================== */
    BOOL FollowChild(CHILD_PROCESS cProcess, VOID* userData)
    {
        fprintf(stdout, "before child:%u\n", getpid());
        return TRUE;
    }
    /* ===================================================================== */
    int main(INT32 argc, CHAR** argv)
    {
        PIN_Init(argc, argv);
        // 注册子进程刚创建时要执行的FollowChild函数
        PIN_AddFollowChildProcessFunction(FollowChild, 0);
        // 开始执行，不返回
        PIN_StartProgram();
        return 0;
    }
### **_15\. 在fork前和fork后插桩_**
功能：使用`PIN_AddForkFunction()`和`PIN_AddForkFunctionProbed()`回调函数来在以下的FPOINT处执行自定义函数：
    FPOINT_BEFORE       Call-back in parent, just before fork.
    FPOINT_AFTER_IN_PARENT  Call-back in parent, immediately after fork.
    FPOINT_AFTER_IN_CHILD   Call-back in child, immediately after fork.
`PIN_AddForkFunction()`工作在JIT模式下，`PIN_AddForkFunctionProbed()`工作在Probe模式下。
执行和查看输出：
    $ make fork_jit_tool.test
源码`source/tools/ManualExamples/fork_jit_tool.cpp`：
    #include 
    #include 
    #include 
    #include 
    #include "pin.H"
    #include 
    #include 
    using std::cerr;
    using std::endl;
    INT32 Usage()
    {
        cerr << "This pin tool registers callbacks around fork().\n"
                "\n";
        cerr << KNOB_BASE::StringKnobSummary();
        cerr << endl;
        return -1;
    }
    pid_t parent_pid;
    PIN_LOCK pinLock;
    VOID BeforeFork(THREADID threadid, const CONTEXT* ctxt, VOID* arg)
    {
        PIN_GetLock(&pinLock, threadid + 1);
        cerr << "TOOL: Before fork." << endl;
        PIN_ReleaseLock(&pinLock);
        parent_pid = PIN_GetPid();
    }
    VOID AfterForkInParent(THREADID threadid, const CONTEXT* ctxt, VOID* arg)
    {
        PIN_GetLock(&pinLock, threadid + 1);
        cerr << "TOOL: After fork in parent." << endl;
        PIN_ReleaseLock(&pinLock);
        if (PIN_GetPid() != parent_pid)
        {
            cerr << "PIN_GetPid() fails in parent process" << endl;
            exit(-1);
        }
    }
    VOID AfterForkInChild(THREADID threadid, const CONTEXT* ctxt, VOID* arg)
    {
        PIN_GetLock(&pinLock, threadid + 1);
        cerr << "TOOL: After fork in child." << endl;
        PIN_ReleaseLock(&pinLock);
        if ((PIN_GetPid() == parent_pid) || (getppid() != parent_pid))
        {
            cerr << "PIN_GetPid() fails in child process" << endl;
            exit(-1);
        }
    }
    int main(INT32 argc, CHAR** argv)
    {
        PIN_InitSymbols();
        if (PIN_Init(argc, argv))
        {
            return Usage();
        }
        // Initialize the pin lock
        PIN_InitLock(&pinLock);
        // Register a notification handler that is called when the application
        // forks a new process.
        PIN_AddForkFunction(FPOINT_BEFORE, BeforeFork, 0);
        PIN_AddForkFunction(FPOINT_AFTER_IN_PARENT, AfterForkInParent, 0);
        PIN_AddForkFunction(FPOINT_AFTER_IN_CHILD, AfterForkInChild, 0);
        // Never returns
        PIN_StartProgram();
        return 0;
    }
## **_4\. 回调_**
这部分主要介绍几个Pin的用于注册回调函数的API：
  * [INS_AddInstrumentFunction](https://software.intel.com/sites/landingpage/pintool/docs/98437/Pin/html/group__INS__INSTRUMENTATION.html#ga1333734dbf7d552365a24cd945d5691d) (INSCALLBACK fun, VOID *val)：注册以指令粒度插桩的函数
  * [TRACE_AddInstrumentFunction](https://software.intel.com/sites/landingpage/pintool/docs/98437/Pin/html/group__TRACE.html#gab2f19ff0a9198c83715eea79ada22503) (TRACECALLBACK fun, VOID *val)：注册以trace粒度插桩的函数
  * [RTN_AddInstrumentFunction](https://software.intel.com/sites/landingpage/pintool/docs/98437/Pin/html/group__RTN.html#ga63bd82d1e10ee8c83d67529845f5ca46) (RTNCALLBACK fun, VOID *val)：注册以routine粒度插桩的函数
  * [IMG_AddInstrumentFunction](https://software.intel.com/sites/landingpage/pintool/docs/98437/Pin/html/group__IMG.html#ga4a067152140ead3e23279ab2bd6cd723) (IMGCALLBACK fun, VOID *val)：注册以image粒度插桩的函数
  * [PIN_AddFiniFunction](https://software.intel.com/sites/landingpage/pintool/docs/98437/Pin/html/group__PIN__CONTROL.html#gaa78c7b560975a6feffa420fadedc0627) (FINICALLBACK fun, VOID *val)：注册在应用程序退出前执行的函数，该类函数不进行插桩，可以有多个。
  * [PIN_AddDetachFunction](https://software.intel.com/sites/landingpage/pintool/docs/98437/Pin/html/group__PIN__CONTROL.html#ga7501b4226bc92f358b7b361eea0929d2) (DETACHCALLBACK fun, VOID *val)：注册在Pin通过`PIN_Detach()`函数放弃对应用程序的控制权限之前执行的函数，一个进程只调用一次，可以被任何线程调用，此时Pin的内存并没有释放。
对于每个注册函数的第二个参数val将在“回调”时传递给回调函数。如果在实际的场景中不需要传递第二个参数，为了保证安全，可以传递将val的值设置为0进行传递。val的理想使用方式是传递一个指向类实例的指针，这样回调函数在取消引用该指针前需要将其转换回一个对象。
所有的注册函数都会返回一个PIN_CALLBACK对象，该对象可以在后续过程中用于操作注册的回调的相关属性。
### **_PIN回调操作相关API_**
在注册函数返回PIN_CALLBACK对象后，可以使用PIN_CALLBACKAPI对其进行操作，来检索和修改在Pin中已注册的回调函数的属性。
声明：
    typedef COMPLEX_CALLBACKVAL_BASE * PIN_CALLBACK
函数：
  1. CALLBACK_GetExecutionOrder()
声明：
    VOID   CALLBACK_GetExecutionOrder (PIN_CALLBACK callback)
作用：获取已注册回调函数的执行顺序。越靠前，越早被执行。
参数：callback，从 __Add_ Funcxtion()函数返回的注册的回调函数
  1. CALLBACK_SetExecutionOrder()
声明：
`VOID CALLBACK_SetExecutionOrder (PIN_CALLBACK callback, CALL_ORDER order)`
作用：设置已注册回调函数的执行顺序。越靠前，越早被执行。
参数：callback，从 __Add_ Funcxtion()函数返回的注册的回调函数；order，新设置的回调函数的执行顺序。
  1. PIN_CALLBACK_INVALID()
声明：
`const PIN_CALLBACK PIN_CALLBACK_INVALID(0)`
PIN回调的无效值。
### **_CALL_ORDER_**
`CALL_ORDER`是一个枚举类型，预定义了`IARG_CALL_ORDER`的值。其作用就是当指令有多个分析函数调用时，控制每个分析函数的调用顺序，默认值为`CALL_ORDER_DEFAULT`。
  * CALL_ORDER_FIRST：首先执行该调用，整数值为100.
  * CALL_ORDER_DEFAULT：未指定`IARG_CALL_ORDER`时的默认值，整数值为200.
  * CALL_ORDER_LAST：最后执行该调用，整数值为300.
在进行数值设定时，可以使用类似`CALL_ORDER_DEFAULT + 5`的格式来设置。
针对在相同插桩回调环境中的针对同一指令的、具备同样`CALL_ORDER`的多个分析调用，Pin会按照插入的顺序进行调用。
## **_5\. 修改程序指令_**
虽然Pin的主要用途是对二进制程序进行插桩，但是它也可以实现对程序指令的修改。
### **_5.1 实现方式_**
最简单的实现方式是插入一个分析routine来模拟指令执行，然后调用INS_Delete()来删除指令。也可以通过直接或间接插入程序执行流分支（使用`INS_InsertDirectJump`和`INS_InsertIndirectJump`）实现，这种方式会改变程序的执行流，但是会更容易实现指令模拟。
#### **_INS_InsertDirectJump()_**
声明：
`VOID INS_InsertDirectJump(INS ins, IPOINT ipoint, ADDRINT tgt)`
参数：
  * ins：输入的指令
  * ipoint：与ins相关的location（仅支持IPOINT_BEFORE和IPOINT_AFTER）
  * tgt：target的绝对地址
作用：插入相对于给定指令的直接跳转指令，与INS_Delete()配合使用可以模拟控制流转移指令。
#### **_INS_InsertIndirectJump()_**
声明：
    VOID INS_InsertIndirectJump (   INS     ins, IPOINT     ipoint, REG     reg)
参数：
  * ins：输入的指令
  * ipoint：与ins相关的location（仅支持IPOINT_BEFORE和IPOINT_AFTER
  * reg：target的寄存器
作用：插入相对于给定指令的间接跳转指令，与INS_Delete()配合使用可以模拟控制流转移指令。
### **_5.2 指令内存修改_**
对于原始指令使用到的内存的访问，可以通过使用INS_RewriteMemoryOperand来引用通过分析routine计算得到的值来替代。
需要注意的是，对于指令的修改操作，会在所有的指令插桩操作完成后进行，因此在进行指令插桩时，插桩routine看到的都是原始的、没有经过修改的程序指令。
#### **_INS_RewriteMemoryOperand()_**
声明：
    VOID INS_RewriteMemoryOperand(INS ins, UINt32 memindex, REG newBase)
参数：
  * ins：输入指令
  * memindex：控制需要重写的内存操作数（0，1，...）
  * newBase：包含新操作数地址的寄存器，通常是通过PIN_ClainToolRegister分配的临时寄存器
作用：更改此内存访问指令以饮用包含在给定特定寄存器中的虚拟内存地址。
在IA-32和Intel 64平台上，修改后的操作数仅使用具有新基址寄存器newBase的基址寄存器进行寻址。原始指令中该操作数的任何index，
scale或者offset filed都会被删除。
该函数可以用于重写内存操作数，包括隐式的（如call、ret、push、pop），唯一不能重写的指令是第二个操作数大于0的enter。
newBase中的地址是中是该操作数将访问的最低地址，如果操作数在内存访问之前被指令修改，如push，则newBase中的值将不是堆栈指针，而是指令访问的内存地址。
用于内存地址重写的一个样例插桩代码如下：
    // 映射originalEa到一个翻译后的地址
    static ADDRINT ProcessAddress(ADDRINT originalEa, ADDRINT size, UINT32 access);