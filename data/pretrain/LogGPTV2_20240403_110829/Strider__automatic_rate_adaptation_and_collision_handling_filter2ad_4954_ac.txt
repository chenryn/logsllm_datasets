To see whats going on, consider what we have after carrying out
the second step in the above algorithm:
(cid:3)
(cid:3)
1 ~yi = ~R
~R
1
(cid:3)
~R1x1i + ~R
1
= jR1j2x1i + I
(cid:3)
~R2x2i + : : : + ~R
1
(cid:3)
~RK xKi + ~R
1~n
(6)
where ~Ri is the i’th column vector in matrix R and I is collapsing
all the other terms except the contribution from the i’th symbol of
the ﬁrst block. This computation is performed for all i = 1; : : : L
symbols.
In Step 3, we collect these L symbols from the computation above
and attempt to decode the ﬁrst block. We can show that [31] the
decoding will be successful only if the minimum distance for block 1
(M D(1)), is above a threshold C (cid:3) (I + N ), where C is a constant
dependent on the static code, while I and N are the interference and
noise powers respectively. The minimum distance for block 1 after
M transmissions and the decoding condition while treating all other
blocks as interference can therefore be expressed as:
(cid:0) KX
(cid:12)(cid:12) MX
(cid:12)(cid:12)2
MX
R
+
i=1
i=1
i=1
j=2
M D(1; M ) =
jRi1j2 (cid:21) C(cid:3)
jRi1j2n2
(7)
The right half of the inequality thus consists of terms from the other
blocks which are treated as interference and the noise.
(cid:3)
i1Rij
There are two key takeaways from the equation above. First, as the
receiver gets more packets (i.e. with increasing M), the minimum
distance improves. Intuitively this makes sense, we expect our abil-
ity to decode to improve with every successive reception. Second,
since the entries of R are picked randomly, any two columns in the
matrix will be uncorrelated. The magnitude of the dot product of two
uncorrelated complex vectors of equal magnitude will be less than
the squared magnitude of either vector [31]. Hence, the right half
of the inequality above grows relatively slower than the ﬁrst block’s
minimum distance with M. Hence, with increasing M, the mini-
mum distance for block 1 monotonically increases, until it exceeds
the above threshold at which the static code can decode.
If block 1 is successfully decoded, we can subtract it and repeat
the process for block 2. However, for this block, the interference will
be only from blocks 3 to K, lesser than for the ﬁrst block. Thus by
stripping block 1 after decoding it, we reduce the minimum distance
required for block 2 to decode, and as long as it is greater than the
required threshold, the block will be decoded and the algorithm pro-
ceeds. All blocks will be decoded when the minimum distance for
each is greater than the corresponding required threshold.
4.2 Encoding Algorithm
Our key deduction from the above analysis is that the optimal de-
sign will have the property that all K blocks get decoded at once. To
1each block has a CRC at the end to check decoding success
MX
p
2
(cid:1)
i
Figure 2: Strider’s end-to-end design
see why, note that the receiver ACKs only when all K blocks are de-
coded, and that senders keep transmitting until an ACK is received. If
at any point only a subset of the K blocks are decoded, then the next
transmission will be wasted since it will contain components from the
already decoded blocks. However this is a contradiction, since an op-
timal design by deﬁnition would not waste any transmission. Hence,
the optimal design would guarantee that all K blocks get decoded at
once.
The above insight has the following important consequence: the
minimum distance of all the K blocks should be greater than the
required threshold for each block (deﬁned in Eq. 8 below), when even
any one of the blocks can be decoded. This ensures, that if any block
gets decoded, then all blocks get decoded. However the required
minimum distance depends on the actual noise power in the channel,
which the sender of course does not know. Hence the encoder just
ensures the following condition: after every transmission it estimates
the maximum possible noise power it can tolerate that still ensures
that the minimum distance of each block is higher than the required
threshold for each block. If the actual noise power is higher, then
the sender will have to transmit more encoded packets. If the noise
power is lesser than the maximum tolerable, then the receiver will
decode and ACK.
To determine the entries of R, we thus need to solve the following
set of equations where the left hand side of the ﬁrst equation repre-
sents the minimum distance M D(b; m) that block b would need after
m transmissions to decode,
jRibj2 (cid:21) C (cid:3)(cid:0) KX
(cid:12)(cid:12) mX
mX
(cid:12)(cid:12)2 +
(cid:3)
ibRij
R
jRibj2n
02
j=b+1
i=1
i=1
p
2
mX
KX
i=1
jRc;ij2 (cid:20) P 8c = 1; : : : ; m
(cid:1)
(8)
i=1
0
and n
is an unknown noise variable representing the maximum tol-
erable noise at the m’th transmission. The second equation ensures
that the total power of any transmission cannot exceed P . We have to
solve the above for every value of b = 1; : : : ; K and m = 1; : : : ; M.
The above set of equations constitute a non-linear optimization
problem that can be solved numerically [3], we omit the speciﬁcs
of the solution. However, we make two comments:
(cid:15) First, the solver only provides the magnitudes of the entries
in the matrix R, while the phases of the complex entries are
completely free. Strider picks these phases at random for each
entry.
(cid:15) Second, note that we have to compute R only once, and the
computation is performed ofﬂine. After that R is essentially a
codebook which all nodes know in advance. Hence the com-
putation above is not on the critical path.
To summarize, each row in R provides the coefﬁcients for cre-
ating a separate packet. So the above computation is run to create
a sufﬁciently large matrix of size P (cid:2) K, such that we can create
DataChunkStatic 1/5 RateChannel CodeCoded Data bitsQPSKModulatorCoded BlocksStrider EncoderChannelStrider Stripping DecoderNoisy symbolsof a blockDemodand Decodeusing static code Correctly decoded?Re-encode Decoderusing static code Re-encode Subtract fromReceived signalRe-encoded symbolsof a blockupto P packets. In practice we will likely require much less than P
transmissions and hence the receiver will only see a submatrix of R.
The sender picks the rows of R one after the other and uses them to
linearly combine the K blocks to produce packets for transmission.
The receiver decodes using the stripping decoder method described
before.
4.2.1 Why is the above design rateless?
Strider started out with the premise that it converts a conventional
static code that operates at a ﬁxed SNR into a rateless one that oper-
ates at any SNR. Remember that to decode the static code, the min-
imum distance of each block needs to be above a threshold. As dis-
cussed earlier, the minimum distance depends on two factors. First,
with increasing number of transmissions it monotonically increases.
Second, with increasing noise strength (i.e. with a weaker channel)
the required minimum distance increases. After the right number of
transmissions, the minimum distance for each block exceeds the cor-
responding required threshold, ensuring that the block decodes. Thus
the above design converts a ﬁxed static code into a rateless one. Fur-
ther, we show theoretically in Section 6 that the rateless conversion
is efﬁcient, i.e. if the static code achieves Shannon capacity at its de-
coding threshold SNR, Strider’s rateless conversion asymptotically
achieves Shannon capacity for Gaussian wireless channels across a
wide SNR range.
5. DECODING COLLISIONS
Strider also transforms the static code to be collision-resilient, i.e.
it enables us to decode all the component packets from collided sig-
nals. To see why, consider how the Strider decoding algorithm works
even when there are no collisions. The stripping decoder initially at-
tempts to decode the ﬁrst block, while treating all other blocks which
have been added to it as interference. If decoding is successful, it
subtracts the ﬁrst block and attempts to decode the second block
while treating all other blocks as interference and so on. As we can
see, Strider’s stripping decoder is intrinsically treating every received
packet as a set of collisions, where the collisions are between the
blocks in a chunk. And the decoding works by decoding one block at
a time, or in effect one component of the collision at a time. Hence
intuitively, we can model a collision from two senders as a collision
between blocks of both senders, and apply the same stripping decoder
algorithm as above. We expand on this insight below.
Lets assume we have a scenario where two nodes Alice and Bob
are hidden terminals and their transmissions collide at the AP. Since
they do not receive ACKs after their ﬁrst transmission, they re-encode
using Strider’s algorithm and transmit a new packet again, which will
likely collide. Lets assume the AP gets M collisions, we can repre-
sent the i’th received symbols in the M collisions as:
~yi = hAlR ~xAl
i + hBobR ~xBob
i + ~n
where hAl and hBob represent the channels, and xAl
rep-
i
resent the blocks for Alice and Bob respectively. For exposition sim-
plicity we assume that the channel does not change through the M
transmissions, but the results hold even if it does. We can rearrange
the above equation into the following:
and xBob
(9)
i
h
i"
#
i
~xAl
~xBob
i
~yi =
hAlR hBobR
+ ~n
(10)
In effect, the new set of equations is quite similar to Equation 5 for
the single sender case discussed in the previous section, except for the
fact that the size of the encoding matrix R as well as the data symbol
vector has doubled. Hence, we can use the same stripping decoder
method as above. Speciﬁcally, Strider uses the following algorithm:
1. Estimate hAl and hBob from the packet preambles. We discuss
how to estimate these quantities in detail in Sec. 5.0.2.
2. Calculate which node has the stronger channel, i.e. calculate
max(jhAlj2;jhBobj2). Next use Strider’s stripping decoder al-
gorithm on Eq. 10 to try and decode the blocks of the node with
the stronger channel.
3. If the previous step is successful, the signal after the contri-
bution from the decoded blocks have been stripped will only
consist of blocks from the weaker node’s blocks. The result-
ing equation will be exactly like a single sender case with no
collisions, hence we can use the standard stripping decoder al-
gorithm to decode.
Intuitively, assuming Alice has the stronger channel, the stripping
decoder is treating the packets from Bob as noise, and attempting
to decode Alice’s blocks.
If successful, it subtracts the contribu-
tions of all of Alice’s blocks and moves on to decode Bob’s blocks.
The steps above are reminiscent of successive interference cancel-
lation (SIC) [10]. However, there is one critical difference. Unlike
SIC, Strider does not need the colliding packets to be encoded at the
right bitrate. Traditional SIC requires that the bitrates of the colliding
packets be picked correctly so that the packet with higher power can
be decoded while treating the other as interference [9]. However, if
the nodes do not know that their packets are going to collide, they will
not pick the correct bitrates required for SIC to work. Consequently
SIC will fail to decode. Strider does not have this issue, since due
to its rateless property it ensures that after an appropriate number of
transmissions, the bitrate is sufﬁcient to kickstart the decoding of the
ﬁrst block, which then starts a chain reaction for all the other blocks.
5.0.2 Practical Challenges in Decoding Collisions
1) Asynchrony: The above description assumed that nodes were syn-
chronized across collisions i.e. transmitted packets collide exactly at
the same offset across collisions. However, in practice due to random
backoffs nodes will not be synchronized, and different collisions will
begin at different offsets.
2) Collisions between different senders, or different chunks from
the same senders: In practice, successive collisions could be be-
tween packets from different senders. Second, in Strider the packets
from the node with the stronger channel will get decoded ﬁrst, and