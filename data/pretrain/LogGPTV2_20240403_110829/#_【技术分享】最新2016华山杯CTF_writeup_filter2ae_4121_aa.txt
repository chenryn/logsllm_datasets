# 【技术分享】最新2016华山杯CTF writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客-FlappyPig
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：FlappyPig
稿费：700RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**2016 华山杯 网络安全技能大赛** **解题报告**
**队伍: FlappyPig**
# **Web渗透**
# **0x01 打不过~**
添加type=”submin”，点击提交抓包
有一串字符串，base64->md5，1931b。提交getflag
## 0x02 系统管理
源码有代码，先找0e开头的md5，然后user.php，直接反序列化绕过
## 0x03 简单js
看了下js,直接alert(a) 14208
## 0x04 弹弹弹！
## 0x05 233
Jsfuck，解密后是一句话
用工具解不开，直接自己写脚本吧ANSI->Unicode
## 0x06 无间道
这题怀疑出错了吧，函数的都没定义，咋传？还没get到出题人的意图，通过下一题直接读的源码
## 0x07 php很烦人
先看源码，用php://input改成admin，然后可以直接读文件，index中有个class.php
    file)){  
                echo file_get_contents($this->file);      
            }  
            return "__toString was called!";  
        }  
    }  
没法直接读f1a9.php,反序列化去读
## 0x08 More try
靠上个题读到源码，然后看了下role有注入，还有两层base64
Sqlmap有个base64encode.py的tamper，所以自己改下，改成两层
然后sqlmap.py –r –tamper=”base2.py” –v 3 ,the_key表，key字段
## 0x0A 三秒钟记忆
[http://huashan.xdsec.cn/pic/login](http://huashan.xdsec.cn/pic/login)
这里可以看到源码，
重置密码的地方可以二次注入
注册的时候带’的用户名，然后重置密码的时候会注入
‘ and LEFT ((select flag from flag),x)=’ flag_Xd{hSh_ctf:dutwq}’
如果充值成功了，密码就会变，所以就无法登陆了，写脚本跑下就好了,太慢了……
## 0x0B 疯狂的js
这个是plaidctf2014的原题，不过改了一个地方，
var args = [].slice.apply(arguments).sort().filter(function(x,i,a){return
a.indexOf(x) == i;});
if(args.length != 5) return "数够参数了吗？";
var flag = false; args.map(function(x){flag |= x >= 999;});
if(flag) return "有点大了哦";
    var m = args.map(cal);
    if(m.filter(function(x,i){return m[2]+3*i==x;}).length  m[i-1];}).length > 2) return "bala";
    if(m.filter(function(x,i){return x  1) return "balana~";
满足条件即可弹出flag
五次分别输入
2.0
2.00
6
76
949
# Reverse逆向破解
# 0x01 Crackme1. Warming Up
代码就是个简单变化，动态跟了几步，发现进行了如下操作：
    """
    xor 0x30 ^ 1
    xor 0x32 ^ 2
    xor 0x33 ^ 3
    xor 0x34 ^ 1
    xor 0x35 ^ 2
    """
最后进行字符串比较，反过来写下就可以，如下：
    target = "VgobmndVlBVE"
    result = ""
    for index, item in enumerate(target):
             result += chr(ord(item)^(((index)%3)+1))
    print result
## 0x02 Crackme2. 到手的钥匙
这题的逻辑就不是常人的，有两个用户名和密码。
开始那个还正常点
用户名：amdin，
密码的md5值知道，然后反查了下值为：xdadmin
但是输完并没有什么用，提交也不对：
后来发现另外一个函数也用到了用户名密码，如下：
输入3247,5569得到如下：
组合下输出的结果，提交不对，，，，，，，，，，
不对啊，，，，，，，，，，
仔细看代码，没别的逻辑了啊，，，，纠结了好久
突然队友提交了“用户名+密码+输出”的结果，通过。。。。。。。。
竟然通过了。。。。。。。。。
## 0x03 Crackme3. 探囊取物
题目是个图片，直接strings crackme3.jpg，得到一串01
目测可以拼出来字，一共1177个，11*107
## 0x04 Crackme4. 移动迷宫
代码就是个简单的走迷宫，图如下：
输入的东西，进行各简单变化，对应于走的方向，如下：
走的逻辑如下：
根据坐标生成方向即可，逆代码如下：
    map_info = "***********####******#**#*****##*##********#*********#*#####***###***#*********#*********#********##"  
    result = ""  
    x = 0  
    y = 0  
    pos_list = []  
    for i in range(len(map_info)):  
             result += map_info[i]  
             y = (i)%10  
             x = i/10  
             if (i+1)%10 == 0:  
                       result += "n"  
             if map_info[i] == "#":  
                       pos_list.append((x, y))  
    print map_info[0x28]  
    print result  
    print pos_list  
    last = 0  
    way_list = []  
    way_list.append((1,0))  
    way_list.append((0,-1))  
    way_list.append((0,-1))  
    way_list.append((1,0))  
    way_list.append((1,0))  
    way_list.append((1,0))  
    way_list.append((0,1))  
    way_list.append((0,1))  
    way_list.append((-1,0))  
    way_list.append((0,1))  
    way_list.append((0,1))  
    way_list.append((0,1))  
    way_list.append((1,0))  
    way_list.append((1,0))  
    way_list.append((0,-1))  
    way_list.append((1,0))  
    way_list.append((1,0))  
    way_list.append((1,0))  
    way_list.append((1,0))  
    way_list.append((0,1))  
    way_list.append((0,1))  
    way_list.append((0,1))  
    way_list.append((0,1))  
    way_list.append((-1,0))  
    print len(way_list)  
    map_dic = {}  
    map_dic[(-1, 0)] = 3  
    map_dic[(1, 0)] = 4  
    map_dic[(0, -1)] = 1  
    map_dic[(0, 1)] = 2  
    result = []  
    for i in way_list:  
             result.append(map_dic[i])  
    way_key = """0A1B  
    a2b3  
    4C5D  
    c6d7  
    8E9F  
    e0f1"""  
    way_key = way_key.split("n")  
    print result  
    print len(result)  
    result_info = ""  
    for i in range(4):  
             for j in range(6):  
                       result_info += way_key[j][result[i*6+j]-1]  
    print way_key  
    print result_info  
flag如下：最后一行
## 0x05 Crackme5. Do something
虽然题目给了个jpg，但其实是个程序，主要的判断逻辑如下：
    int __cdecl sub_401000(char *Src)  
    {  
      char Dst[20]; // [sp+0h] [bp-14h]@1  
      Dst[0] = byte_415282;  
      *(_DWORD *)&Dst[1] = 0;  
      *(_DWORD *)&Dst[5] = 0;  
      *(_DWORD *)&Dst[9] = 0;  
      *(_DWORD *)&Dst[13] = 0;  
      *(_WORD *)&Dst[17] = 0;  
      Dst[19] = 0;  
      strcpy_s(Dst, 17u, Src);  
      check_equ_401320(Dst[0], Dst[8]);  