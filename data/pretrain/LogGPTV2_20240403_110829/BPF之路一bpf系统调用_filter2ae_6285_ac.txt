    {
        return syscall(__NR_bpf, cmd, attr, size);
    }
    //创建一个映射, 参数含义: 映射类型, key所占自己, value所占字节, 最多多少个映射
    int bpf_create_map(enum bpf_map_type map_type, unsigned int key_size, unsigned int value_size, unsigned int max_entries)
    {
        union bpf_attr attr = {    //设置attr指向的对象
            .map_type = map_type,
            .key_size = key_size,
            .value_size = value_size,
            .max_entries = max_entries
        };
        return bpf(BPF_MAP_CREATE, &attr, sizeof(attr)); //进行系统调用
    }
    //在映射中更新一个键值对
    int bpf_update_elem(int fd, const void* key, const void* value, uint64_t flags)
    {
        union bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .value = ptr_to_u64(value),
            .flags = flags,
        };
        return bpf(BPF_MAP_UPDATE_ELEM, &attr, sizeof(attr));
    }
    //在映射中根据指针key指向的值搜索对应的值, 把值写入到value指向的内存中
    int bpf_lookup_elem(int fd, const void* key, void* value)
    {
        union bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .value = ptr_to_u64(value),
        };
        return bpf(BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));
    }
    int main(void){
        //首先创建一个数组映射, 键和值都是4字节类型, 最多0x100个映射
        int map_fd = bpf_create_map(BPF_MAP_TYPE_ARRAY, 4, 4, 0x100);
        printf("BPF_map_fd: %d\n", map_fd);
        //按照key->key+1的规律填充这个数组映射
        for(int idx=0; idx value: %d\n", key, value);
    }
运行结果
###  hash映射的使用
    //gcc ./bpf.c -o bpf
    #include 
    #include   //为了exit()函数
    #include     //为了uint64_t等标准类型的定义
    #include     //为了错误处理
    #include     //位于/usr/include/linux/bpf.h, 包含BPF系统调用的一些常量, 以及一些结构体的定义
    #include     //为了syscall()
    //类型转换, 减少warning, 也可以不要
    #define ptr_to_u64(x) ((uint64_t)x)
    //对于系统调用的包装, __NR_bpf就是bpf对应的系统调用号, 一切BPF相关操作都通过这个系统调用与内核交互
    int bpf(enum bpf_cmd cmd, union bpf_attr *attr, unsigned int size)
    {
        return syscall(__NR_bpf, cmd, attr, size);
    }
    //创建一个映射, 参数含义: 映射类型, key所占自己, value所占字节, 最多多少个映射
    int bpf_create_map(enum bpf_map_type map_type, unsigned int key_size, unsigned int value_size, unsigned int max_entries)
    {
        union bpf_attr attr = {    //设置attr指向的对象
            .map_type = map_type,
            .key_size = key_size,
            .value_size = value_size,
            .max_entries = max_entries
        };
        return bpf(BPF_MAP_CREATE, &attr, sizeof(attr)); //进行系统调用
    }
    //在映射中更新一个键值对
    int bpf_update_elem(int fd, const void* key, const void* value, uint64_t flags)
    {
        union bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .value = ptr_to_u64(value),
            .flags = flags,
        };
        return bpf(BPF_MAP_UPDATE_ELEM, &attr, sizeof(attr));
    }
    //在映射中根据指针key指向的值搜索对应的值, 把值写入到value指向的内存中
    int bpf_lookup_elem(int fd, const void* key, void* value)
    {
        union bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .value = ptr_to_u64(value),
        };
        return bpf(BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));
    }
    //字符串表
    char *strtab[] = {
        "The",
        "Dog",
        "DDDDog"
    };
    int main(void){
        //创建一个hash映射, 键为4字节的int, 值为一个char*指针, 因此大小分别是sizeof(int)与sizeof(char*), 最多0x100个
        int map_fd = bpf_create_map(BPF_MAP_TYPE_HASH, sizeof(int), sizeof(char*), 0x100);
        printf("BPF_map_fd: %d\n", map_fd);
        //用strtable初始化hash映射
        for(int idx=0; idx value: %s\n", key, value);
    }
运行例子
###  加载BPF程序
加载BPF程序涉及到如何用BPF汇编, 我们先不管BPF汇编, 直接使用固定的汇编代码, 然后加载后运行
    //gcc ./bpf.c -o bpf
    #include 
    #include   //为了exit()函数
    #include     //为了uint64_t等标准类型的定义
    #include     //为了错误处理
    #include     //位于/usr/include/linux/bpf.h, 包含BPF系统调用的一些常量, 以及一些结构体的定义
    #include     //为了syscall()
    //类型转换, 减少warning, 也可以不要
    #define ptr_to_u64(x) ((uint64_t)x)
    //对于系统调用的包装, __NR_bpf就是bpf对应的系统调用号, 一切BPF相关操作都通过这个系统调用与内核交互
    int bpf(enum bpf_cmd cmd, union bpf_attr *attr, unsigned int size)
    {
        return syscall(__NR_bpf, cmd, attr, size);
    }
    //用于保存BPF验证器的输出日志
    #define LOG_BUF_SIZE 0x1000
    char bpf_log_buf[LOG_BUF_SIZE];
    //通过系统调用, 向内核加载一段BPF指令
    int bpf_prog_load(enum bpf_prog_type type, const struct bpf_insn* insns, int insn_cnt, const char* license)
    {
        union bpf_attr attr = {
            .prog_type = type,        //程序类型
            .insns = ptr_to_u64(insns),    //指向指令数组的指针
            .insn_cnt = insn_cnt,    //有多少条指令
            .license = ptr_to_u64(license),    //指向整数字符串的指针
            .log_buf = ptr_to_u64(bpf_log_buf),    //log输出缓冲区
            .log_size = LOG_BUF_SIZE,    //log缓冲区大小
            .log_level = 2,    //log等级
        };
        return bpf(BPF_PROG_LOAD, &attr, sizeof(attr));
    }
    //BPF程序就是一个bpf_insn数组, 一个struct bpf_insn代表一条bpf指令
    struct bpf_insn bpf_prog[] = {
        { 0xb7, 0, 0, 0, 0x2 }, //初始化一个struct bpf_insn, 指令含义: mov r0, 0x2;
        { 0x95, 0, 0, 0, 0x0 }, //初始化一个struct bpf_insn, 指令含义: exit;
    };
    int main(void){
        //加载一个bpf程序
        int prog_fd = bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER, bpf_prog, sizeof(bpf_prog)/sizeof(bpf_prog[0]), "GPL");
        if(prog_fd<0){
            perror("BPF load prog");
            exit(-1);
        }
        printf("prog_fd: %d\n", prog_fd);
        printf("%s\n", bpf_log_buf);    //输出程序日志
    }
运行情况