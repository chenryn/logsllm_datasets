replacement (SR).
While SR could potentially improve video quality, it does involve
some complex tradeoffs. As segments in the buffer are discarded and
redownloaded, the additional downloads increase network data us-
age. In addition, SR uses up network bandwidth which could poten-
tially have been used instead to download future segments and may
lead to quality degradation in the future. Existing works [36, 40, 48]
find Youtube can perform extensive SR in a non-cellular setting.
However, how common SR is used across popular services and the
associated cost-benefit tradeoff for cellular networks is not well un-
derstood. We characterize this tradeoff for popular services, identify
underlying causes of inefficiencies, and propose improvements.
4.1.1 Usage and QoE impact of SR for popular VOD apps. To
understand the usage of SR by popular VOD apps, we run them with
the 14 collected network bandwidth profiles. We analyze the track
and index (the position of the segment within the video track) of
downloaded segments. As segments with the same index represent
the same content, when multiple segments with the same index
are observed in the traffic, we confirm that the player performs SR.
Among the players we study, we find H1 and H4 perform SR.
We conduct what-if analysis to characterize the extent of video
quality improvement and additional data usage caused by SR. When
SR occurs, among the segments with the same index, only the last
downloaded segment is preserved in the buffer and all previous
downloads are discarded. We confirm this using the buffer informa-
tion in the logcat of H1. We emulate the case with no SR by keeping
only the first downloaded segment for each index in the trace and
use it as a baseline comparison. Our analysis shows that SR as
currently implemented by H4, does not work well. The findings are
summarized as follows. H1 shows similar trends.
• SR as currently implemented can significantly increase data usage.
With 5 of the bandwidth profiles, the data consumption increases
by more than 75%. The median data usage increase is 25.66%.
• For most bandwidth profiles, the video quality improves
marginally. The median improvement in average bitrate across
the 14 profiles is 3.66%.
• Interestingly, we find SR can even degrade video quality. For one
profile, SR decreases the average bitrate by 4.09% and the duration
for which tracks higher than 1 Mbps are streamed reduces by
3.08%.
The video quality degradation we observed with SR is surprising,
as one would expect SR to only replace lower-bitrate segments
with higher-bitrate ones and therefore improve the average bitrate.
Diving deeper, for each experimental run, we emulate the client
buffer over time. When a new segment is downloaded, if the buffer
already contains a segment with the same index, we replace the
previously buffered segment with the newly downloaded one and
compare their quality. A somewhat counter-intuitive finding is
that the redownloaded segments are not always of higher quality.
Across the 14 bandwidth profiles, for all SR occurrences, on average
respectively 21.31% and 6.50% of redownloaded segments were of
lower quality or same quality as the replaced segment. These types
of replacements are intuitively undesirable, as they use up network
resources, but do not improve quality.
To understand why H4 redownloads segments with lower or
equal quality, we analyze when and how H4 performs SR. We make
the following observations.
• How SR is performed. We find that after H4 redownloads a
segment seg, it always redownloads all segments that are in the
buffer with indexes higher than seg. In other words, it performs
SR for multiple segments proactively and does not just replace a
segment in the middle of the buffer. In all SR occurrences across
the 14 profiles, the 90th percentile of the number of contiguously
replaced segments was 6 segments.
• When SR is triggered. Whenever H4 switches to a higher track,
it always starts replacing some segments in the buffer. For all
runs with the 14 bandwidth profiles, each time SR occurs, we
examine the quality of the first replaced segment among the
contiguous replaced ones. We find in 22.5% of SR cases, even the
first redownloaded segment had lower or equal quality compared
with the one already in the buffer. This implies that H4 may not
properly consider the video quality of buffered segments when
performing SR.
We show an example of H4 performing SR in Figure 10. At 150 s,
H4 switches from Track 3 to Track 4, which triggers SR. Instead
of downloading the segment corresponding to 580 s’ of content, it
goes back to redownload the segment corresponding to 500 s’ of
content. In fact, that segment was already downloaded at 85 s with
a higher quality from Track 8. As the new downloaded segment is
from Track 4, this indicates SR with lower quality. Even worse, H4
keeps redownloading all buffered segments after that. This even
causes a stall at 165 s, which otherwise could have been avoided.
Deducing the root causes of such suboptimal SR design from
commercial players such as H4 is challenging due to their propri-
etary nature. To gain a deeper understanding into the underlying
considerations behind SR policies, we next examine the SR design
of the popular open-source ExoPlayer and its QoE implications.
4.1.2
SR analysis with ExoPlayer. We find that ExoPlayer ver-
sion 1 uses SR and suffers from some similar issues as H4, i.e. it
can also redownload segments with lower or equal quality. To un-
derstand this, we first need to understand Exoplayer’s adaptation
logic. Before loading each segment the track selection algorithm
selects the track based on available network bandwidth and buffer
occupancy. When it decides to select a higher track X than the last
selected one Y, it initiates SR if the buffer occupancy is above a
threshold value. It identifies the segment with the smallest playback
IMC ’17, November 1–3, 2017, London, UK
Shichang Xu, Z. Morley Mao, Subhabrata Sen, and Yunhan Jia
Figure 10: H4 starts SR as long as it switches to a higher track and
does not consider the track of segments in the buffer.
index in the buffer that is from a track lower than the track Y that
ExoPlayer is about to select for the upcoming download. Beginning
with that segment, it discards all segments with a higher index from
the buffer. While this strategy guarantees that the first discarded
segment is replaced with higher quality one, the same does not
hold for the following segments being replaced.
The root cause of these SR-related issues is that the player does
not (i) make replacement decision for each segment individually and
(ii) limit SR to only replace segments with higher quality. To answer
the question why players including H4 and ExoPlayer do not do this,
we study the ExoPlayer code and discover that it does not provide
APIs to discard a single segment in the middle of the buffer. Further
investigation shows that this is caused by the underlying data
structure design. For efficient memory management, ExoPlayer uses
a double-ended queue to store segments ordered by the playback
index. Network activities put new segments on one end, while the
video renderer consumes segments on the other end, which ensures
that the memory can be efficiently recycled. Discarding a segment
in the middle is not supported, and thus to perform SR, the player
has to discard and redownload all segments with higher indexes
than the first chosen one.
We find that the underlying data structure and SR logic remain
the same in the latest Exoplayer version 2, but that SR is currently
deactivated and marked for future activation. To understand the rea-
sons behind ExoPlayer’s approach to SR, we contacted its designers.
They communicated that they were concerned about the additional
complexity and less efficient memory allocation associated with
allowing a single segment in the middle to be discarded, and un-
certainty about the benefits of SR. They were also concerned that
allowing discard for a single segment introduces some dependency
between the track selection algorithm and other modules such as
buffering policy.
4.1.3
SR Best practices and improvement evaluation. The re-
sponse from ExoPlayer developers motivates us to look into how
useful SR is when designed properly and whether it is worthwhile
to implement it. Intuitively a proper SR logic should have the fol-
lowing properties.
• The logic considers replacing a segment a time. Each segment is
replaced individually.
• Segments can only be replaced by higher quality segments.
Figure 11: The displayed track percentage with/without SR. Each
pair of bars are with the same network condition: left is without SR;
right is with SR.
• When buffer occupancy drops below a threshold, the player
should stop performing more replacements and resume fetching
future segments to avoid the danger of stalls.
Changing the Exoplayer memory management implementation
to enable discarding individual segments is a non-trivial endeavor.
Instead, for our evaluations, we modify the Exoplayer track se-
lection logic to work with HTTP caching to achieve the same
end-results. As an example, when segments are discarded from
the buffer, their track information is recorded. Later if the track
selection logic determines to redownloaded them with quality no
higher than the discarded ones, we change the track selection to
select the track of the discarded segment so that they can be recov-
ered directly from the local cache on the device without sending
traffic to the network. From the network perspective, this would
have the same effect as not discarding the segment.
To evaluate the QoE impact of the improved SR algorithm, we
play a publicly available DASH stream [7] using the 14 collected
real world bandwidth profiles. We find that, across the profiles, the
median and 90th percentile improvements in average bitrate are
11.6% and 20.9% respectively.
Subjective QoE studies(eg., [35]) show that the video bitrate is
not linearly proportional to user QoE. Rather, increasing the bitrate
when bitrate is low will cause a much sharper increase in user
experience. But when bitrate is already high, further increasing the
bitrate does not lead to significant additional QoE improvements. In
other words, it is more important to reduce the duration of time that
really low quality tracks are streamed. Thus we further break down
the track distribution of displayed segments without and with SR.
As shown in Figure 11, when network bandwidth shows significant
fluctuation and players have chances to switch between tracks, a
properly designed SR strategy can greatly reduce the duration of
streaming low tracks. For bandwidth profiles 3 and profile 4, the
duration of streaming tracks lower than 360p reduces by 32.0%
and 54.1% respectively. For profile 7 to profile 12, the duration of
streaming tracks worse than 480p reduces significantly, reduction
ranging from 30.6% to 64.0%.
SR increases video bitrate at the cost of increasing network data
usage. For ExoPlayer with our improved SR algorithm, the median
data usage increase across 14 profiles is 19.9%. For 5 profiles, the
Dissecting Cellular VOD Services
IMC ’17, November 1–3, 2017, London, UK
tracks of the same declared bitrate but different actual bitrates. As
illustrated in Figure 12, in variant 1 we shift the mapping between
the declared bitrate and corresponding media files. We replace the
media of each track to the one with the next lower quality level,
while keeping the declared bitrate the same. In variant 2, we simply
remove the lowest track and keep other tracks unchanged to keep
the same number of tracks as variant 1. Thus, comparing these two
variants, each track in variant 1 has the same declared bitrate as
the track of the same level in variant 2, but the actual bitrate is
the same as that of the next lower track in variant 2. We use D2
to play the two variants using a series of constant available band-
width profile. We observe that with the same bandwidth profile,
the selected tracks for the two variants are always of the same level
with the same declared bitrate. This suggests that it only considers
the declared bitrate in its decision on which track to select next,
else the player would select tracks with different levels for the two
variants but with the same actual bitrate.
As the average actual bitrate of videos from D2 is only half of
declared bitrate, failure to consider the actual bitrate can lead to low
bandwidth utilization, and thus deliver suboptimal QoE. We use D2
to play original videos from its server with a stable 2 Mbps available
bandwidth network profile. The average achieved throughput is
only 33.7% of the available bandwidth in the steady phase. Such low
bandwidth utilization indicates that D2 could potentially stream
higher quality video without causing stalls.
There are historical factors underlying the above behavior. HLS
was the first widely adopted HAS streaming protocol for mobile
apps, and some elements of its design meshed well with the needs
of the predominant encoding being used at the time, i.e. CBR. For
example, the HLS manifest uses a single declared bitrate value to
describe the bandwidth requirements for each track. This is the only
information available to the player’s track selection logic regard-
ing the bandwidth needs for a segment in a track, before actually
downloading the segment. HLS requires setting this value to the
peak value for any segment in the track [45]. With CBR encoding,
different segments in a track have similar actual bitrates, making
the declared bitrate a reasonable proxy for the actual resource
needs. Adaptation algorithms [31, 33, 34] therefore traditionally
have depended on the declared bitrate to select tracks.
More recently, HAS services have been increasingly adopting
VBR video encodings as shown in Figure 5, which offers a number of
advantages over CBR in terms of improved video quality. However,
different segments in a VBR encoded track can have very different
sizes due to factors such as different types of scenes and motion.
As the actual bitrate of different segments in the same track
can have significant variability, it becomes challenging to rely on
a single declared bitrate value to represent all the segments in a
track. With VBR encoding, setting the declared bitrate to average
actual bitrate can lead to stall events [27, 54]. On the other hand,
setting the declared bitrate to the peak rate and using that as an
estimate for a track’s bandwidth (as D2 seems to do) can lead to low
bandwidth utilization and suboptimal video quality. The solution to
the above is that (i) more granular segment size information should
be made available to the adaptation algorithm and (ii) the algorithm
should utilize that information to make more informed decisions
about track selection.
Figure 12: We modify the manifest and shift the mapping be-
tween declared bitrate and corresponding media files to generate
two streams with the same declared bitrate but different actual bi-
trate (D in the figure stands for declared bitrate).
usage increases by more than 40%. Across the 14 profiles, the me-
dian amount of wasted data, i.e. data associated with downloading
segments that were later discarded, as a proportion of the total
data usage was 10.8%. This implies that SR should be performed
carefully for users with limited data plans.
To better make tradeoff between data usage and video qual-
ity improvement, we suggest only discarding segments with low
quality when data usage is a concern. As we shall see, discarding
segments with lower bitrate has a bigger impact on improving QoE
and causes less waste data. To evaluate the proposed concept, we
change the SR algorithm to only replace segments no better than a
threshold of 720p, and characterize the impact on data usage and
video quality. We test with three profiles with the largest amount
of waste data. Compared with the case of using no such thresh-
old, for the 3 profiles, the wasted data reduced by 44% on average,
while the proportion of time that streaming quality better than 720p
was played stayed similar. The results therefore show that this is
a promising direction for exploring practical SR schemes. Further
work is needed in fine tuning the threshold selection.
In summary, we find proper usage of SR significantly reduces the
duration of streaming tracks with poor quality and improves QoE.
When making replacement decisions, players should consider each
segment individually and only replace segment with higher quality.
This requires underlying implementation to support discarding a
segment in the middle of the buffer. Due to the implementation
complexities, creating a library that supports such operations can
greatly benefit the app developer community.
4.2 Using Declared vs. Actual Bitrate
Servers specify the declared bitrate for each track in the manifest
as a proxy for its network resource needs, to help client players
select proper tracks based on the network bandwidth. However,
especially for VBR encoding which is increasingly popular, a single
declared bitrate value cannot accurately reflect the actual bitrate
across the video. For example, as shown in Figure 5, the declared
bitrate of videos from D2 can be twice of the average actual bitrate.
Despite the potentially significant difference between the declared
bitrate and actual bitrate, we find that the adaptation logic in some
players such as D2 relies purely on the declared bitrate to make
track selection decisions, leading to suboptimal QoE.
Since D2 uses DASH, it can in theory obtain actual segment bi-
trates from segment index boxes before playback. To verify whether
D2 takes the actual bitrate into consideration during track selection,
we carefully design black-box testing experiments to reveal its in-
ternal logic. We modify the manifest to generate two variants with
IMC ’17, November 1–3, 2017, London, UK
Shichang Xu, Z. Morley Mao, Subhabrata Sen, and Yunhan Jia
Figure 13: The displayed track percentage without/with consider-
ing actual segment bitrate. Each pair of bars are with the same net-
work condition. The left one the is the distribution only considering
declared bitrate. The right one is the distribution considering actual
bitrate.
HAS protocols are moving towards making this granular infor-
mation available, but challenges remain. DASH and newer versions
of HLS support storing each segment as a sub-range of a media
file and expose the segment byte ranges and durations in the mani-
fest file which can be used to determine the actual bitrate for each
segment. HLS also supports reporting the average bitrate in the
manifest along with the peak bitrate. Thus, in theory, an adaptation
logic should now be able to utilize this information. However, we
find that the information may still not be exposed to the adaptation
algorithm. We checked the implementation of ExoPlayer version
2, the latest version. It provides a unified interface to expose in-
formation based on which an adaptation algorithm selects tracks.
However, the interface only exposes limited information including
track format, declared bitrate, buffer occupancy and bandwidth
estimation. It does not expose the actual segment-level bitrate infor-
mation that is included in the manifest file. This implies that even
though app developers can implement customized sophisticated
adaptation algorithms, in Exoplayer, currently they still can not
leverage actual bitrate information to select tracks.
We next demonstrate that even a simple adaptation algorithm
that considers actual segment bitrates can improve QoE. We adjust
ExoPlayer’s default adaptation algorithm to select the track based
on the actual segment bitrate instead of the declared bitrate. To
evaluate the performance, we VBR-encode the Sintel test video [14]
and create an HLS stream consisting of 7 tracks. For each track
we set the peak bitrate (and therefore the declared bitrate) to be
twice of the average bitrate. We play the video both with the default
adaptation algorithm and the modified algorithm that considers
actual bitrate using the 14 collected network profiles.
As shown in Figure 13, when actual bitrate is considered, the
duration of playing content with low quality reduces significantly.