    eip=315eb380  esp=00127b9c  ebp=00128124  iopl=0  nv up ei pl nz ac po cy
    cs=001b  ss=0023   ds=0023  es=0023  fs=003b  gs=0000  efl=00000213
    wwlib!wdGetApplicationObject+0x2977a:
    315eb380  e968c8a500  jmp  wwlib!DllCanUnloadNow+0x5598ab  (32047bed)
    0:000> g
    //第0x21次附加字节,注意，该次要正确覆盖偏移为7618处的变量（计数器变量，表示当前字节数组的字符个数），不然之后会无法覆盖到目标指针，恶意代码作者提供的数据为0x23，计数器加1后恰好为0x24，这个可以保证后续正确覆盖对象指针！
    03bb75f8  09 c0 0c 0c 0c c0  09 0c-0c c0 09 0c 0d c0 09 0c   ................
    03bb7608  0c 09 c0 0b 18 20  17 15-0c 0c c0 09 c0 09 0c 20   ..... .........
    03bb7618  24 00 00 00 60 59 57 01-00  00 00 00 00 00 00 00  $...`YW.........
    03bb7628  00 00 00 00 00 00 00 00-00 00 00 00 00 00  00 00  ................
    03bb7638  00 00 00 00 00 00 00 00-00 00 00 00 00 00  00 00  ................
    03bb7648  00 00 00 00 60 59 57 01-00 00 00 00 00 00  00 00  ....`YW.........
    03bb7658  01 00 00 00 00 00 00 00-00 00 00 00 00 00  00 00  ................
    03bb7668  ff ff ff ff ff ff ff ff-00 00 00 00 00 00  00 00  ................
    eax=03bb0000  ebx=00000023ecx=00000020 edx=02000000  esi=03bb0948 edi=03bb0000
    eip=315eb380  esp=00127b9c ebp=00128124 iopl=0  nv up ei pl nz na pe cy
    cs=001b  ss=0023   ds=0023  es=0023  fs=003b   gs=0000   efl=00000207
    wwlib!wdGetApplicationObject+0x2977a:
    315eb380  e968c8a500  jmp  wwlib!DllCanUnloadNow+0x5598ab  (32047bed)
    0:000> dps  1575960
之后将覆盖我们关心的偏移为0x761c处的值0x01575960，而该值为mso模块创建的一个对象指针，覆盖完成后该值被替换成了0x09c00c0c。
最终“0x40”字节的数组内容如下：
这些附加的字节又从哪里来呢？由于有针对RTF格式混淆技术的运用，现有工具无法满足提取ole对象的目的，我们人工仔细分析了该RTF文档发现，该RTF文档包括如下几个部分：
1）文件头（被混淆过，会影响一些工具或者杀毒引擎的解析）  
2）一个ocx控件（用于加载OTKLOADR、msvcr71等）  
3）一个内嵌的word文档（用于进行堆喷射）。0x09c00c0c就指向堆喷射的数据区域  
4）关键控制字区域。（用于数组越界写，劫持控制流）  
5）overlay数据。（编码payload和伪word文档）
通过分析第4部分的关键控制字区域，我们看到了如下的敏感数据：
很明显，数据源于控制字\dfrxst。查阅RTF格式文档，相关说明如下：
该控制字用于构造RevsionMark相关的字符串，参数为字节。即构造unicode字符串也是以单字节的形式进行的。然而文档中对控制字 \dfrxst
对应的内部字节数组是多长并未明确指出。详细查看该部分其它的控制字，我们发现了一个类似的控制字有这样的描述：
根据此处的描述我们推断对于\dfrxst，内部分配的字节数组长度为0x20字节。然而在解析该控制字的代码中，控制数组字节数的常量被认为是0x20(32)个Unicode字符，写成了
0x20* sizeof(wchar_t)，结果为0x40，大于内存分配的长度0x20，结果导致数组越界写入。
之后进一步的分析我们发现，被0x09c00c0c替换掉的偏移0x761c处的对象与\shp控制字相关。因而该控制字在样本中是必要的。还有两个控制字\shpbxignore和\shpbyignore用于操作\shp对应的对象过程中执行流的调整（位于wwlib.31fd6d99处的函数调用中），以避免相关的逻辑执行导致对象数据构造复杂化。当然，这里样本中这么做取决于作者开发漏洞利用的方法。我们调试发现，控制了\shp对象数据后，还有其它劫持控制流的路径，本文不再详述。
**3\. 原理及利用流程总结**
Word（wwlib.dll）在解析RTF文档的控制字
“\dfrxst”时发生内存越界写，导致紧邻的对象指针被覆盖。通过堆喷射技术，精心构造被覆盖的对象，可以达到劫持控制流，从而执行任意代码的目的。CVE-2016-7193漏洞原理的伪码表示如下：
    #define MAX_CHARS 0x20
    class CParserObj {
    public:
        BYTE m_ByteArray[MAX_CHARS]; //offs 75f8h DWORD m_NrOfChars;//offs 7618h
        CXXObj *m_pShpObj; //offs 761ch
        ......
        RESULT ParseControlWord(BYTE ByteCode,PVOID Params); 
    }
    RESULT CParserObj:: ParseControlWord(BYTE ByteCode,PVOID Params) 
    {
        ......;
        switch(ByteCode)
        {
        case BYTE_CODE_ dfrxst:
            if(m_NrOfChars < MAX_CHARS * sizeof(WCHAR) //0x40 {
                m_ByteArray[m_NrOfChars++] = (BYTE)Params; 
                }
            break; 
        case ......:
            break; 
        default:
            break; 
        }
    return RESULT_ERROR_CODE; 
    }
### 三、ROP 链、shellcode 和 payload 简要分析
首先，样本在劫持控制流后，首先运行ROP链（基于msvcr71构造）将shellcode所在内存区修改为可执行属性，对应的代码和ROP链的信息如下：
内存属性修改成功后，接着跳入shellcode
然后执行解码器解码shellcode。该解码器很简单仅仅是xor解码。
最后执行解码后的shellcode，其功能包括：
1）暴力遍历句柄，寻找当前进程中对应RTF文档的句柄。  
2）创建RTF文档的内存映射。  
3）通过 egg hunt 技术定位位于RTF文档Overlay部分的大型shellcode，并跳入执行，加载执行payload。
本文分析的Payload中包含一个正常doc文件用于覆盖当前文档迷惑用户和一个要释放的商业远控木马用于控制目标主机。当然，这里的payload可以很方便地替换成其它的恶意程序，满足黑客个性化的需求。
### 四、结语
如今越来越多的APT攻击使用Office套件中的Nday甚至0day漏洞进行攻击，虽然微软提供了该漏洞相应的修复补丁，但大部分用户对于此类应用补丁的不重视造成了漏洞威胁依然存在。百度安全实验室建议用户提高安全意识，及时更新如Office、Flash、浏览器等常被漏洞利用的应用程序，对于安全性未知的程序应谨慎执行。
### 参考链接：
1、微软 MS16-121 安全公告 https://technet.microsoft.com/library/security/ms16-121
2、exploit生成器的相关信息 http://www.tuicool.com/articles/BNnqArU
https://www.youtube.com/watch?v=D3hwTBD0xE4
3、RTF官方文档 https://www.microsoft.com/en-us/download/details.aspx?id=10725
* * *