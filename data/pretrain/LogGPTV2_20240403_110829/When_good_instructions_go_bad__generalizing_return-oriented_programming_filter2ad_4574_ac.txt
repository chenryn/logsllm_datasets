m[&%i0] = v1
m[&%i2] = v2
Preset
%l7 = &%i0
Assembly
ld [%i0], %l6
(+2 Frames ) st %l6, [%l7]
%i0 = &v1
%l7 = &%i2
(+1 Frame )
%i0 = &v2
ret
restore
ld [%i0], %l6
st %l6, [%l7]
ret
restore
(v1 == v2)
%i0 = v1 (stored ) cmp %i0, %i2
%i2 = v2 (stored ) ret
restore
if (v1 == v2): %i0 = T2 (NOT_EQ) be,a 1 ahead
%i0 = T1
else:
%i0 = T2
%l0 = T1 (EQ) - 1 sub %l0,%l2,%i0
%l2 = -1
m[&%i6] = %o0
(+1 Frame )
%i3 = &%i6
jump T1 or T2
%i6 = T1 or T2
(stored )
ret
restore
st %o0, [%i3]
ret
restore
ret
restore
Figure 13: Branch Equal (if (v1 == v2): jump T1, else
T2)
else T2. The branch greater than or equal gadget (if (v1 >=
v2): jump T1, else T2) is equivalent to a similar reordering:
if (v2  0) {
printf(&("%d "), --v1);
}
printf(&("\n"));
system(&("/bin/sh"));
Figure 17: Gadget Exploit Code
program counter correspond to the correct register state (restored
from the stack). The memory layout of the safe call stack frame,
gadget variable area, and exploit frame collection is shown in Fig. 2
on page .
We assemble the exploit payload into an argv[1] payload and
an envp[0] payload, each of which is conﬁrmed to have no zero
bytes. The argv[1] payload overﬂows the %i6 and %i7 save areas
in main() of the vulnerable application to direct control to gadget
exploit stack frame collection in envp[0]. Although we use the