scgi_pass_request_body off 指令禁用传递请求体。
\$request_completion " OK"如果请求已完成，或者否则为空字符串
\$request_filename 基于根 或 别名 指令以及请求URI
的当前请求的文件路径，当前请求的文件路径，由
root或alias指令与URI请求生成。
\$request_id 16个随机字节生成的唯一请求标识符，十六进制（1.11.0）
\$request_length 请求长度（包括请求行，标题和请求体）（1.3.12,1.2.7）
\$request_method 请求方法，通常是" GET"或" POST"
\$request_time 请求处理时间，以秒为单位，分辨率为毫秒（1.3.9,1.2.6）;
从客户端读取第一个字节后经过的时间
\$request_uri
完整的原始请求URI（带参数），不包含主机名，如："/foo/bar.php?arg=baz"。
\$scheme 请求方案，" http"或" https"
\$sent_http_name 任意响应头字段;
变量名称的最后一部分是字段名称转换为小写，短划线由下划线替换
\$sent_trailer_name 在响应结束时发送的任意字段（1.13.2）;
变量名称的最后一部分是字段名称转换为小写， 短划线由下划线替换
\$server_addr
接受请求的服务器的地址,,计算此变量的值通常需要一次系统调用。为避免系统调用，
listen指令必须指定地址并使用该 bind 参数。
\$server_name 接受请求的服务器的名称
\$server_port 接受请求的服务器的端口
\$server_protocol 请求协议，通常是" HTTP/1.0"，" HTTP/1.1"或" HTTP / 2.0
"
\$status 回应状态（1.3.2,1.2.2）
\$tcpinfo_rtt, \$tcpinfo_rttvar, \$tcpinfo_snd_cwnd, \$tcpinfo_rcv_space
有关客户端TCP连接的信息; 在支持TCP_INFO 套接字选项的系统上可用
\$time_iso8601 当地时间采用ISO 8601标准格式（1.3.12,1.2.7）
\$time_local 通用日志格式的本地时间（1.3.12,1.2.7）
\$uri 请求中的当前URI规范化\$uri
在请求处理期间，值可能会发生变化例如在执行
内部重定向或使用索引文件时。不带请求参数的当前URI，\$uri不包含主机名，如"/foo/bar.html"。
# 网页报错汇总：
# NSD Operation DAY04
案例1：构建memcached服务
案例2：LNMP+memcached
案例3：PHP的本地Session信息
案例4：PHP实现session共享
本节从案例3开始将,出现关于memcached的问题再讲案例1
# 1 案例1：构建memcached服务
SQL:oracle,mysql,sql_server 关系型数据库:数据之间有极强的相关联性
NoSQL:memcache,redis,mongodb
非关系型数据库,又叫kv数据库,或者叫缓存数据库\\内存数据库(重启或者断电,所有数据将丢失)
Redis :将数据存到内存,会自动同步到硬盘
Memcached:将数据存到内存.数据会丢失,存毫无关系的一些数据,可用作上传中转的网站
Session是记录登录状态,会被定时删除,丢了无所谓,客户重新登录会再产生,因此可用memcahced数据库.
读取速度:CPU缓存\>内存\>磁盘\>数据库
Cpu参数L1:一级缓存 L2:二级缓存,数字越高,性能越好
1.1 问题
本案例要求先快速搭建好一台memcached服务器，并对memcached进行简单的增、删、改、查操作：
安装memcached软件，并启动服务
使用telnet测试memcached服务
对memcached进行增、删、改、查等操作
1.2 方案
memcached是高性能的分布式缓存服务器，用来集中缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的响应速度。访问拓扑如图-1所示。
![image001](media/image21.png){width="3.527083333333333in"
height="2.984027777777778in"}
使用1台RHEL7虚拟机作为memcached服务器（192.168.4.5）。
在RHEL7系统光盘中包含有memcached，因此需要提前配置yum源，即可直接使用yum安装，客户端测试时需要提前安装telnet远程工具。
验证时需要客户端主机安装telnet，远程memcached来验证服务器的功能：
-   add name 0 180 10 //变量不存在则添加
-   set name 0 180 10 //添加或替换变量
-   replace name 0 180 10 //替换
-   get name //读取变量
-   append name 0 180 10 //向变量中追加数据
-   delete name //删除变量
-   stats //查看状态
-   flush_all //清空所有
-   提示：0表示不压缩，180为数据缓存时间，10为需要存储的数据字节数量。
## 步骤一：构建memcached服务
### 1) 使用yum安装软件包memcached
Systemctl start aaa.service将会到 /usr/lib/systemd/system
目录里面寻找aaa.service 运行这个文本
例如:Systemctl start memcached
###  memcached配置文件（查看即可，不需要修改）
本次实验无关,作为了解
\[root@proxy \~\]# vim /usr/lib/systemd/system/memcached.service
\[Unit\]
Description=Memcached
Before=httpd.service
After=network.target
\[Service\]
Type=simple
EnvironmentFile=-/etc/sysconfig/memcached
ExecStart=/usr/bin/memcached -u \$USER -p \$PORT -m \$CACHESIZE -c
\$MAXCONN \$OPTIONS
\[Install\]
WantedBy=multi-user.target
\~
\[root@proxy \~\]# vim /etc/sysconfig/memcached #查看环境变量
PORT=\"11211\"
USER=\"memcached\"
MAXCONN=\"1024\"
CACHESIZE=\"64\"
OPTIONS=\"\"
\~
### 3）启动服务并查看网络连接状态验证是否开启成功：
\[root@proxy \~\]# ss -nutlp \| grep 11211 #查看memcached端口是否起来
\[root@proxy \~\]# ss -nutlp \| grep memcached #查看服务是否起来
\[root@proxy \~\]# netstat -antulp \| grep memcached #查看服务是否起来
tcp 0 0 0.0.0.0:11211 0.0.0.0:\* LISTEN 2839/memcached
tcp 0 0 :::11211 :::\* LISTEN 2839/memcached
udp 0 0 0.0.0.0:11211 0.0.0.0:\* 2839/memcached
udp 0 0 :::11211 :::\* 2839/memcached
\[root@proxy \~\]# setenforce 0
\[root@proxy \~\]# firewall-cmd \--set-default-zone=trusted
### ４）netstar 命令与ss命令
netstat命令可以查看系统中启动的端口信息，该命令常用选项如下：
-a显示所有端口的信息
-n以数字格式显示端口号
-t显示TCP连接的端口
-u显示UDP连接的端口
-l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
-p显示监听端口的服务名称是什么（也就是程序名称）
注意：在RHEL7系统中，使用ss命令可以替代netstat，功能与选项一样。
## 步骤二：使用telnet访问memcached服务器
### 1）使用yum安装telnet
\[root@proxy \~\]# yum -y install telnet
### ２) 使用telnet连接服务器测试memcached增、删、改、查等操作。
\[root@proxy \~\]# telnet 192.168.4.5 11211  #11211端口为memcached
Trying 192.168.4.5\...
Connected to 192.168.4.5.
Escape character is \'\^\]\'.
ERROR #无命令报错
set name 0 180 3 #定义变量:name 0:不压缩 180s:数据缓存时间
3:数据字节数量
Pil #变量值为:pil
STORED #执行成功
get name #获取name 变量
VALUE name 0 3
pil #输出的结果
END
get name #180s 后再获取变量
END #无输出,结束
##提示：0表示不压缩，180s为数据缓存时间，10为需要存储的数据字节数量。
add myname 0 180 10 //新建，myname不存在则添加，存在则报错
set myname 0 180 10 //添加或替换变量
replace myname 0 180 10 //替换，如果myname不存在则报错
get myname //读取变量
append myname 0 180 10 //向变量中追加数据
delete myname //删除变量
stats //查看状态
flush_all //清空所有
quit //退出登录
**\
**
# 2 案例2：LNMP+memcached
2.1 问题
沿用练习一，部署LNMP+memcached网站平台,通过PHP页面实现对memcached服务器的数据操作，实现以下目标：
部署LNMP实现PHP动态网站架构
为PHP安装memcache扩展
创建PHP页面，并编写PHP代码，实现对memcached的数据操作
2.2 方案
使用2台RHEL7虚拟机，其中一台作为memcached及LNMP服务器（192.168.4.5）、另外一台作为测试用的Linux客户机（192.168.4.10），如图-1所示。![image002](media/image22.png){width="4.042361111111111in"
height="1.4in"}
在RHEL7系统光盘中包含有我们需要的MariaDB、PHP，我们需要使用源码安装Nginx，使用RPM包安装FPM。另外如果希望使用PHP来操作memcached，注意必须要为PHP安装memcache扩展（php-pecl-memcache），否则PHP无法解析连接memcached的指令。客户端测试时需要提前安装telnet远程工具。
## 步骤一：部署LNMP环境
（如果环境中已经存在LNMP环境本步骤可以忽略）
### 1）使用yum安装基础依赖包
\[root@web1 \~\]# yum -y install gcc openssl-devel pcre-devel zlib-devel
.. ..
## 2）源码安装Nginx
\[root@web1 \~\]# tar -xf nginx-1.12.2.tar.gz
\[root@web1 \~\]# cd nginx-1.12.2
\[root@web1 nginx-1.12.2\]# ./configure \\
\> \--with-http_ssl_module
\[root@web1 nginx-1.12.2\]# make && make install
### 3）安装MariaDB数据库
\[root@web1 \~\]# yum -y install mariadb mariadb-server mariadb-devel
### 4）安装PHP
\[root@web1 \~\]# yum -y install php php-mysql
\[root@web1 \~\]# yum -y install php-fpm-5.4.16-42.el7.x86_64.rpm
#php-fpm-5.4.16-42.el7.x86_64.rpm,光盘中没有在提供的lnmp_soft.tar.gz包内
### 5）修改Nginx配置文件
\[root@web1 \~\]# vim /usr/local/nginx/conf/nginx.conf
location / {
root html;
index index.php index.html index.htm;
}
location \~ \\.php\$ {
root html;
fastcgi_pass 127.0.0.1:9000;
fastcgi_index index.php;
#fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
include fastcgi.conf;
}
## 步骤二：启动服务
（如果所有服务已经启动，也可以忽略这一步骤）
### 1）启动Nginx服务
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
\[root@web1 \~\]# systemctl stop httpd //如果该服务存在，则关闭该服务
\[root@web1 \~\]# /usr/local/nginx/sbin/nginx
\[root@web1 \~\]# netstat -utnlp \| grep :80
tcp 0 0 0.0.0.0:80 0.0.0.0:\* LISTEN 32428/nginx
### 2）启动MySQL服务
\[root@web1 \~\]# systemctl start mariadb
\[root@web1 \~\]# systemctl status mariadb
### 3）启动PHP-FPM服务
\[root@web1 \~\]# systemctl start php-fpm
\[root@web1 \~\]# systemctl status php-fpm
### 4）关闭SELinux、防火墙
\[root@web1 \~\]# setenforce 0
\[root@web1 \~\]# firewall-cmd \--set-default-zone=trusted
## 步骤三：创建PHP页面，使用PHP语言测试memcached服务
### 1）部署测试页面
创建PHP首页文档/usr/local/nginx/html/index.php，测试页面可以参考lnmp_soft/php_scripts/mem.php。
注意：192.168.2.5是memcached数据库。
\[root@web1 \~\]# vim /usr/local/nginx/html/test.php
\connect(\'192.168.2.5\',11211) or die (\'could not
connect!!\');
\$memcache-\>set(\'key\',\'test\'); //定义变量
\$get_values=\$memcache-\>get(\'key\'); //获取变量值
echo \$get_values;
?\>
### 2）客户端测试（结果会失败）
客户端使用浏览器访问服务器PHP首页文档，检验对memcached的操作是否成功：
\[root@web1 \~\]# firefox http://192.168.2.100/test.php
注意：这里因为没有给PHP安装扩展包，默认PHP无法连接memcached数据库，需要给PHP安装扩展模块才可以连接memcached数据库。
### 3）为PHP添加安装memcache扩展
\[root@web1 \~\]# yum -y install php-pecl-memcache
\[root@web1 \~\]# systemctl restart php-fpm
### 4）客户端再次测试（结果会成功显示数据结果）
\[root@web1 \~\]# firefox http://192.168.2.100/test.php
# Session与Cookie:
## 防止重复登录
例如访问京东:
客户端:输入账户密码\-\-\--\>
服务器:数据库中验证,通过允许登录并创建一个session文本id.txt,id号随机
服务器:返回登录后的页面,并且在数据包包头返回session文本的id号,