memory map. When we analyzed this structure, we noticed
that certain bits of the flag ﬁeld are not used. This allows us
to quickly distinguish among the two different types of pages.
Speciﬁcally, we reserve one bit to mark if a physical page
has been removed from the 1:1 mapping by PT-Rand. In other
words, if the bit is set, the kernel knows that the requested
access is a page table related access which requires handling
based on the PT-Rand region.
At run-time, kernel functions that need to translate a phys-
ical to a virtual memory address will check the flag ﬁeld of
the memory map. If the physical page is not accessible through
the 1:1 mapping, the kernel function will use the randomization
secret provided by PT-Rand to determine the virtual memory
address. Otherwise, the function uses the default translation
through the 1:1 mapping. Hence, PT-Rand preserves the high
efﬁciency for the majority of the page requests through the
1:1 mapping. In particular, we modiﬁed the __va macro to
perform the check on the flag ﬁeld. This function is the
central point for translating physical to virtual addresses. PT-
Rand does not cause any problems for external drivers, since
external kernel drivers (e.g., graphic card drivers) are supposed
to use these kernel functions to translate addresses.
During the implementation, we encountered that modifying
__va raises another challenge: in the early boot phase, i.e.,
before PT-Rand relocates the initial page tables, a few kernel
functions already invoke the modiﬁed macro. However, at this
point of system state, the memory map is not yet initialized.
Hence, the macro cannot yet access the flag ﬁeld. We solved
this problem by utilizing an unused macro called __boot_va
which performs the same operation as the uninstrumented
version of the __va macro. We patched all functions that
are executed before the memory map is initialized to use the
unmodiﬁed __boot_va macro.
VI. EVALUATION
In this section, we present the evaluation results for PT-
Rand. We ﬁrst analyze security aspects such as randomization
entropy and leakage resilience. Thereafter, we present a thor-
ough investigation of the performance overhead incurred by
PT-Rand. For this, we conducted micro-benchmarks on hot
code paths, measure performance overhead based on SPEC
CPU industry benchmarks, and quantify the impact on complex
applications such as browsers.
A. Security Considerations
Our main goal
is to prevent data-only attacks against
the kernel page tables at run time. For this, we random-
ize the location of page tables per boot. In general, any
randomization-based scheme must resist the following attack
8
vectors: (i) guessing attacks, (ii) memory disclosure through
code and data pointers, and (iii) memory disclosure through
spilled registers. In the following, we discuss each attack vector
to demonstrate the effectiveness of PT-Rand. We also include
an exploit in our study to demonstrate that exploit hardening
mechanisms at the kernel-level can be bypassed when PT-Rand
is not applied.
Guessing Attacks. Low randomization entropy allows the
attacker to guess the randomization secret with high probabil-
ity [47]. The randomization entropy of PT-Rand depends on:
(1) the number of guesses, (2) the size of the region where the
page tables are allocated, and (3) the overall size of memory
that is required to store all page tables.
We limit the number of attacker’s guesses by conﬁguring
the kernel to initiate a shutdown in case of an invalid memory
access in kernel memory. Note that this has no impact on
the kernel’s execution. In fact, this was the default behavior
of previous versions of the Linux kernel. As described in
Section V-B, we utilize an unused memory region of 1TB
(40 Bit) to randomize the memory allocations for the page
tables. However, the smallest memory unit in paging is a
4KB (12 Bit) page. This means when one page table entry
is placed randomly into the PT-Rand region, 4KB of memory
become readable. Hence, the attacker does not have to guess
the correct address of a particular page table entry but only
the start address of the page which contains the entry. As a
consequence, the total randomization entropy available for PT-
Rand is 28 Bit.
For a deterministic attack, the attacker has to manipulate a
speciﬁc page table entry S that protects a speciﬁc function
of the kernel. Alternatively,
it might be sufﬁcient for the
attacker to corrupt an arbitrary valid entry A of the page table.
However, it is not guaranteed that this modiﬁcation will allow
the attacker to compromise the kernel, thus, the attack success
is probabilistic. Hence, we calculate the success probability
that the attacker can correctly guess the address of the page
which contains S. We denote this probability with p(x) which
depends on the number of pages, denoted by x that contain
page table entries.
We can reduce the problem of calculating the success
probability sp(x) to a classical urn experiment without re-
placement and with three different colored balls: black, red,
and green. The black balls represent the unmapped pages. The
attacker loses the experiment by drawing a black ball (because
accessing an unmapped page crashes the operating system).
The red balls represent the valid pages, however, they do not
contain the attacker’s target page table entry S. The attacker
is allowed to continue and draw another ball, as long as the
attacker draws a red ball (access to a valid page). A green ball
represents the page containing the page table entry S that the
attacker aims to modify. With SG we denote the event that
the attacker draws the green ball eventually without drawing a
black ball (guessing the correct address of S without accessing
an unmapped page). Hence, the probability of SG is the sum
of the probabilities that the attacker draws the green ball in the
ﬁrst try plus the probability that the attacker draws the green
ball after drawing the i-th red ball where i ≥ 1. The resulting
probability of SG is computed as follows:
Figure 5: Probability for guessing attacks based on the number
of mapped pages in the PT-Rand region.
P r[SG] = p(x) =
x(cid:88)
i=1
1
228 +
(cid:1)(cid:0)228
(cid:0)x
(cid:1) ∗
i
i
1
228 − i
Figure 5 plots the probability that the attacker can succeed
in guessing a speciﬁc page table entry if up to 216 memory
pages for page tables are allocated. The graph shows that even
if a high number of page table entries (PTEs) are allocated,
the attacker’s success probability is still very low ranging from
3.725∗10−9 to 3.726∗10−9. We measured the number of page
tables for a variety of different systems and conﬁgurations.
For a normal desktop system, we observed that between 2,000
and 4,000 PTE pages were allocated. If we start a virtual
machine up to 16,000 pages for PTEs are allocated. Lastly, our
server (24 cores and 64GB RAM) running 9 virtual machines
in parallel allocates up to 33,000 pages for PTEs. As shown
in Figure 5, the probability grows linearly. Therefore, even
if the attacker attempts to decrease the entropy by forcing the
operating system to allocate more pages that contain page table
entries2 the attacker’s success probability is very low. Further,
PT-Rand can prevent attacks on the entropy by limiting the
amount of page tables to a number that will guarantee a user
conﬁgurable amount of entropy.
For this reason, even if the attacker tries to decrease
the randomization entropy by forcing PT-Rand to allocate a
large amount of memory within the PT-Rand region, e.g.,
by spawning new processes, the success probability will not
increase signiﬁcantly before such an attack can be detected,
e.g., by only allowing a ﬁxed number of allocated pages.
Memory References. Memory disclosure is another severe
threat to any kind of randomization scheme. For PT-Rand, we
assume that the attacker can disclose any kernel data structure,
and therefore, possible references to page tables. Hence, we
obfuscate the references to page tables in all kernel data
structures by substituting the virtual addresses with physical
2the attacker can force the operating system to create new page table entries
by starting new processes.
9
3,7252E-093,7254E-093,7256E-093,7258E-093,7260E-093,7262E-093,7264E-09010000200003000040000500006000070000ProbabilityNumber	of	PagesProbability	sp(x):	An	attacker	can	successfully	guess	the	address	of	a	specific	PTEthe real
addresses. Note, there is no correlation between virtual and
physical addresses. Therefore, the attacker does not gain any
information about
location of the page tables by
disclosing obfuscated addresses. Since our modiﬁed memory
allocator for page-table memory only returns obfuscated ref-
erences, the attacker cannot access page tables by reading
those pointers. The remaining potential source of leakage are
functions that did not use our modiﬁed allocator. Recall, all
functions that access the page tables now expect a physical
address. Hence, if these functions receive a virtual memory
address of a page table entry, they will automatically try to
translate them using the randomization secret. The result is
very likely an invalid address which will lead to a kernel crash.
Spilled Registers. As recently demonstrated in [11], even
temporarily spilled registers which contain a security-critical
value can compromise PT-Rand. To prevent any access to the
debug register (DR3) that contains the randomization secret, we
patched the Linux kernel code to never access DR3, i.e., DR3
cannot be accessed through any kernel API. Note that the CPU
does not spill debug registers during interrupts [27]. Further,
we prevent the compiler from writing the randomization secret
to the stack by performing all computations in registers and
never save or spill the result to memory. However, there might
be cases, where a register that contains an intermediate value
is spilled on the stack due to a hardware interrupt. In contrast
to software interrupts, which we disable during page walks,
hardware interrupts cannot be disabled. This opens a very small
time window that may enable the attacker to use a concurrent
thread to disclose register values, and potentially recover
parts of the randomization secret. We performed preliminary
experiments with a setting that favors the attacker to implement
this attack, and did not succeed. Nevertheless, we are currently
exploring two different strategies to mitigate such attacks. The
ﬁrst strategy is to further decrease the already small time
window where register values could potentially be leaked. In
particular, we envision to instrument the page table reads,
by rewriting them with inline assembly, such that the de-
obfuscated address is only present in the register for a couple
of instructions. After accessing the page-table memory all reg-
isters that contain (intermediate values of) the randomization
secret are set to zero. Alternatively, the second strategy ensures
that the attacker cannot use a concurrent thread to access the
stack of a victim thread that got interrupted and whose registers
got temporarily spilled to memory. This can be achieved by
using different page tables per kernel thread. Speciﬁcally, this
allows us to assign stack memory per kernel thread which
cannot be accessed by other (concurrent) threads. Therefore,
even if intermediate values are spilled to memory, the attacker
cannot leak them using concurrent threads. A simpler version
of this technique, where the kernel uses a different page table
per CPU, is already deployed in the grsecurity patch [50].
Real-world Exploit. We evaluated the effectiveness of PT-
Rand against a set of real-world vulnerabilities. In particular,
we use an information disclosure vulnerability in the Linux
to bypass KASLR3, and a vulnerable driver which
kernel
does not sanitize pointers provided by a user-mode application
(CVE-2013-2595) to read and write arbitrary kernel memory.
3. This vulnerability was silently ﬁxed by the Linux kernel maintainers
which is why there was no ofﬁcial CVE number assigned: https://git.kernel.
org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b2f739
Based on these attack primitives, we develop an attack which
allows us to execute arbitrary code in the kernel, despite having
the kernel protected with state-of-the-art CFI for the kernel.
The goal of our attack is to (i) change the memory permissions
of a page that contains the code of a pre-deﬁned kernel function
to writable, (ii) overwrite the function with our shellcode, and
(iii) ﬁnally trigger the execution of this function to instruct the
kernel to execute our shellcode with kernel privileges.
To retrieve the KASLR offset, we use the aforementioned
information disclosure vulnerability. The vulnerability allows
the attacker to disclose the absolute address of a kernel
function. Since we can determine the relative offset of this
function to the start address of the kernel code section, we
can compute the absolute address of the kernel after KASLR.
Based on this address, we can compute the address of every
function or global variable of the kernel since KASLR only
shifts the whole kernel by a randomized offset during boot.
In an ofﬂine analysis of the kernel image, we discovered a
global variable that holds a reference to the task_struct
of the initial process. The task_struct is a kernel data
structure in which the kernel maintains information about
each process,
like id, name and assigned virtual memory.
Speciﬁcally, it contains a pointer to the mm_struct which
maintains information about the memory that is assigned to the
process. Within this structure, we discovered a virtual memory
pointer to the root of the page table of the corresponding
process.
Using the arbitrary read capability and the 1:1 mapping,
we traverse the page table to the entry that maintains the
permissions for the system call sys_setns. Next, we set this
page to writable and overwrite the beginning of sys_setns
with our shellcode. In our proof-of-concept exploit, we re-
write the function to elevate the current process’ privileges
to root. Naturally, other payloads are possible as well, like
installing a kernel rootkit. After we modiﬁed the system call
function, we set the corresponding page table entry again back
to readable and executable, and invoke the system call to
trigger the execution of our shellcode.
As explained in detail, this attack does not involve changing
any code pointer. Hence, it resembles a data-only attack that
cannot be mitigated by defenses against control-ﬂow hijacking.
However, after hardening the kernel with PT-Rand, this attack
fails since we cannot reliably locate the correct page table entry
for system call task_struct.
Side-channel Attacks. As stated in Section IV-A, preventing
side-channel attacks is beyond the scope of this paper. How-
ever, since side-channel attacks have the potential to undermine
the security guarantees of PT-Rand, we will shortly discuss
how these attacks work and how the kernel could be extended