title:Dealerless Corporate Key Generation for Identity-Based Encryption
Schemes
author:Zhen Liu and
Duncan S. Wong and
Jack Poon
Dealerless Corporate Key Generation for Identity-Based
Encryption Schemes
Zhen Liu
Security and Data Sciences,
PI:EMAIL
ASTRI
Duncan S. Wong
AtCipher Inc.
PI:EMAIL
Jack Poon
AtCipher Inc.
PI:EMAIL
ABSTRACT
In Identity-Based Encryption (IBE) system, the Private Key
Generator (PKG) holds the master secret key and is respon-
sible for generating private keys for the users. This incurs
the key-escrow problem, i.e. the PKG can decrypt any user’
any ciphertexts without any possible detection. Also, com-
promising the master secret key will enable an adversary
to do anything to the whole system, and having the mas-
ter secret key be unavailable implies that new users cannot
obtain private keys from the PKG, and existing users can-
not get their private keys back from the PKG when they
lost them. To address the key-escrow problem and protect
the master secret key as much as possible with strong secu-
rity and availability, distributed PKG protocols supporting
threshold policy have been adopted in some IBE schemes.
In this paper, we propose a distributed PKG protocol that
supports the policy to be any monotonic access structures.
Also, we propose the ﬁrst distributed PKG protocol that
supports the dynamic changes of the PKGs and the policy,
while remaining the master secret key unchanged. The two
protocols do not need any third party acting as a trusted
dealer to present, and the master secret key should never be
generated or resided in any one single site. The protocols are
applicable to a generic IBE template, which covers many ex-
isting important IBE schemes. When applied to this generic
type of IBE schemes, the two distributed PKG protocols do
not aﬀect the encryption and decryption algorithms, and
only each user knows his own private key.
Keywords
Identity-Based Encryption, Distributed PKG, Dealerless
1.
INTRODUCTION
The notion of Identity-Based Encryption (IBE) was in-
troduced by Shamir [21] in 1984 as an approach to simplify
public key and certiﬁcate management in a public-key infras-
tructure (PKI). In 2001 Boneh and Franklin [6] proposed the
ﬁrst practical and fully functional IBE scheme, and following
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897849
that work, a rapid development of IBE has taken place, for
example, [3, 4, 22, 12, 16] are proposed to achieve stronger
security and better eﬃciency, [13, 5, 16] are proposed as
Hierarchical IBE, and [9, 19] are proposed as Anonymous
Hierarchical IBE.
In an IBE system, the public key of the user can be an
arbitrary string of bits, for example, an email address, a
phone number, or a staﬀ ID (if used only internally within
an organization), as long as the string can uniquely identify
the user in the system. This eliminates certiﬁcates alto-
gether, and the sender could just encrypt the message with
the identity of the receiver without having to ﬁrst obtain and
verify the receiver’s public-key certiﬁcate. Naturally, users
are not capable of generating a private key for an identity
themselves. There is a trusted party, called the Private Key
Generator (PKG), that is responsible for generating and is-
suing private keys to users. The PKG has a Master Secret
Key (MSK). When a user joins the system, to obtain his
private key corresponding to his identity, the user would go
to the PKG and prove his identity, and the PKG then gen-
erates the user’s private key using the MSK and the user’s
identity. As the PKG is able to use the MSK to compute
the private key corresponding to any identity, it can pas-
sively decrypt all ciphertexts in the system. This inherent
key escrow problem asks the users to completely trust the
PKG that it would not decrypt their ciphertexts. This has
been considered as a reason for the slow adoption of IBE
schemes. Also, the privacy of the PKG’s master secret key
is very crucial in an IBE system. In terms of security, com-
promising the master secret key will enable an adversary to
do anything to the whole system; and in terms of availabil-
ity, having the master secret key be unavailable implies that
new users cannot obtain private keys from the PKG, and
existing users cannot get their private keys back from the
PKG when they lost them.
To protect the master secret key as much as possible,
and address the key escrow problem simultaneously, Boneh
and Frankin [6] suggested distributing the master secret key
among multiple PKGs using techniques of threshold cryp-
tography.
In particular, in a (t, n)-distributed PKG, the
master secret key is distributed among n PKG sites (in
short, n PKGs) and each of the n PKGs holds a share
of the master secret key such that if and only if at least
t PKGs are available, these available PKGs can coopera-
tively perform the functionalities of the master secret key,
such as issuing a private key for a new user. Boneh and
Franklin [6] proposed Veriﬁable Secret Sharing (VSS) of the
master secret key among multiple PKGs using Shamir se-
211cret sharing with a dealer [20] to design a distributed PKG
and also hinted towards a completely distributed approach
(i.e. without dealer) using the Distributed Key Generation
(DKG) schemes of Gennaro et al.
[11]. Noticing the DKG
schemes [11] suggested in [6] to design a distributed PKG are
deﬁned for the synchronous communication model, having
bounded message delivery delays and processor speeds, Kate
and Goldberg [14] proposed asynchronous distributed PKGs
for three IBE schemes: namely, Boneh and Franklin’s IBE
[6], Sakai and Kasahara’s IBE [18], and Boneh and Boyen’s
(modiﬁed) IBE [8]. Another existing work on distributed
PKG for IBE is due to Geisler and Smart [10], where a dis-
tributed PKG for Sakai and Kasahara’s IBE [18] was pro-
posed.
However, in all the three existing work [6, 10, 14] on dis-
tributed PKG for IBE, only threshold policy is considered,
i.e., only (t, n)-distributed PKG is supported, and there are
some limitations on the values of t and n. For example,
in [10], for the case of honest-but-curious parties it is re-
quired that n > 2t, whilst for the case of malicious parties
it is required that n > 3t.
In practice, to support more
complicated cases such as ‘(CEO OR CFO) AND (CTO OR
2-out-of-3 Managers in (Alice, Bob, Carl))’, we need some
more versatile policies in addition to some threshold policy.
Furthermore, in practice we need to support the dynamic
change of the multiple PKGs and the policies, as some PKGs
may leave or some new PKGs may join, or the policies may
change even the PKGs remain unchanged. When dynamic
changes happen, we need the master secret key MSK and
the corresponding system master public key MPK to remain
unchanged, as this means that the dynamic changes of the
PKGs and the policies should not aﬀect the normal crypto-
graphic operations in the system, that is, existing users in
the system do not need to update their keys or any cryp-
tographic operations. Furthermore, for ensuring the high
security of the master secret key, it is important that the
master secret key should never be generated or resided in
any one single site in the system, not only during the initial
setup and user private key generation processes, but also
when dynamic changes happen.
1.1 Our Results
In this paper, we propose a distributed PKG protocol for
IBE, which generates and distributes the master secret key
among multiple PKGs according to any policy represented as
monotonic access structures. We also propose an extended
protocol to support the dynamic changes of the PKGs and
the policy, which re-distributes the master secret key among
new PKGs according to new policy while remaining the mas-
ter secret key and system master public key unchanged. The
two protocols do not need any third party acting as a trusted
dealer to present, and the master secret key should never be
generated or resided in any one single site. The two protocols
are designed and analyzed in the asynchronous communica-
tion model and against the covert adversaries, i.e. the PKGs
may deviate arbitrarily from the protocol speciﬁcation in an
attempt to cheat, but do not wish to be “caught” doing so.
To show that our protocols are applicable to many exist-
ing IBE schemes in a generic way, we investigate the key-
homomorphism property of IBE and deﬁne a Key Homo-
morphic IBE template using some concrete but still generic
terms, and describe the two protocols using these generic
terms. When the two distributed PKG protocols are ap-
plied to the IBE schemes satisfying the Key-Homomorphic
IBE template, the encryption and decryption algorithms are
not aﬀected, while the users’ privet key is generated in a dis-
tributed manner if and only if the available PKGs satisfy the
policy. During the user private key generation process, the
master secret key never appears in any one place, and only
the user knows his private key.
Paper Organization. In the next section, we review the deﬁ-
nitions of IBE and investigate the key homomorphism prop-
erty for IBE, then deﬁne a key-homomorphic IBE template
using some concrete but still generic terms. Some back-
ground of access policy are reviewed in Sec. 3. In Sec. 4, we
propose a distributed PKG protocol for the key-homomorphic
IBE template, describe the user private key generation pro-
cess under the distributed PKGs, and show that the encryp-
tion and decryption algorithms are not aﬀected. In Sec. 5,
we propose a protocol to support the dynamic changes of the
PKGs and the policy, and in Sec. 6 we conclude the paper.
2. KEY-HOMOMORPHIC IDENTITY-BASED
ENCRYPTION
In this section, we ﬁrst review the deﬁnitions of IBE and
deﬁne the key-homomorphism for IBE. Then we revisit these
by deﬁning a key-homomorphic IBE template, using some
concrete but still generic terms.
Definition 1. An Identity-Based Encryption scheme con-
sists of the following four polynomial time algorithms.
Setup(1λ) → (mpk, msk). The algorithm takes as input
a security parameter 1λ, and outputs a master pub-
lic/secret key pair (mpk, msk).
KeyGen(mpk, msk, id) → SKid. The algorithm takes as in-
put mpk, msk and an identity id ∈ {0, 1}∗, and outputs
the corresponding private key SKid.
Encrypt(mpk, M, id) → CTid. The algorithm takes as in-
put mpk, a message M from the message space M(mpk)
and an identity id, and outputs a ciphertext CTid.
Decrypt(mpk, CTid, SKid) → M . The algorithm takes as
input mpk, a ciphertext CTid and a private key SKid,
and outputs a message M or ⊥ indicating failure.
Correctness. It requires that for any (mpk, msk) ← Setup(1λ),
any id ∈ {0, 1}∗, SKid ← KeyGen(mpk, msk, id) and any
message M from the message space M(mpk),
Decrypt(mpk, Encrypt(mpk, M, id), SKid) = M.
Security. We refer to [7] for the security deﬁnitions.
Based on the above standard deﬁnitions of IBE, below we
deﬁne the key-homomorphism for IBE.
Definition 2. Let ˆ⊗ be an operation deﬁned over the dis-
tribution of mpk, ˆ⊕ be an operation deﬁned over the distri-
bution of msk, and ˆ(cid:12) be an operation deﬁned over the dis-
tribution of SK. An IBE is key-homomorphic IBE (km-IBE)
if the following conditions hold: for any (mpk(1), msk(1)) ←
Setup(1λ), (mpk(2), msk(2)) ← Setup(1λ), any id ← {0, 1}∗,
id ← KeyGen(mpk(2),
SK
ˆ⊕ = msk(1) ˆ⊕msk(2),
msk(2), id), let mpk
id ← KeyGen(mpk(1), msk(1), id), SK
(1)
ˆ⊗ = mpk(1) ˆ⊗mpk(2), msk
(2)
212ˆ(cid:12)
id = SK
(1)
SK
id
it holds that
ˆ(cid:12)SK
(2)
id , and SK
id ← KeyGen(mpk
(cid:1)
ˆ⊗, msk
ˆ⊕, id),
Decrypt(mpk
Decrypt(mpk
ˆ⊗
ˆ⊗
, Encrypt(mpk
ˆ⊗
, Encrypt(mpk
ˆ⊗
, M, id), SK
, M, id), SK
(cid:1)
id) = M,
ˆ(cid:12)
id) = M.
(1)
(2)
In other words, a km-IBE scheme has the following proper-
ties:
1. “Multiplying” two (master public key, master secret
key) pairs (mpk(1), msk(1)) and (mpk(2), msk(2)) will pro-
duce a new (master public key, master secret key) pair
ˆ⊕), which has the same distribution as the
(mpk
ones generated by Setup(). This is shown by Equa-
tion (1).
ˆ⊗, msk
2. For the same identity id, let SK
(2)
id be the
user private keys generated under (mpk(1), msk(1)) and
(1)
(mpk(2), msk(2)), respectively. “Multiplying” SK
id and
ˆ⊗, msk
ˆ⊕).
(2)
id will produce a user private key under (mpk
SK
This is shown by Equation (2).
(1)
id and SK
Key homomorphism is useful in maintaining the encryp-
tion and decryption eﬃciency while applying the distributed
PKG method to IBE, which will be shown later. Roughly
speaking, the distributed PKGs generate their (master pub-
lic key, master secret key) pairs, then “multiplying” the mas-
ter public keys will produce the system master public key.
Also, each user “multiplies” his user private keys obtained
from the distributed PKGs to produce his ﬁnal private key,
which can be used to decrypt the ciphertexts generated un-
der the system master public key and his identity.
An IBE template (Setup, KeyGen, Encrypt, Decrypt) is
There are some IBE schemes in the literature that are key-
homomorphic, for example, Boneh-Franklin IBE [7], Boneh-
Boyen IBE [3], Waters IBE [22], Boneh-Boyen-Goh IBE [5],
etc.. In order to describe/cover these schemes in a generic
way, below we revisit the deﬁnitions of km-IBE, using some
concrete but still generic/abstract terms. Also, these terms
will easy the description of the later Dealerless Distributed
PKG protocols.
2.1 A Key-Homomorphic IBE Template
deﬁned by (Fc, Fp, fs, fu,⊗,⊕,(cid:12)) as follows:
Setup(λ): Given a security parameter λ, the algorithm se-
lects the underlying groups G. Let p be the order of
the underlying groups, whose size is determined by the
security parameter λ. Let Fc(G) be a distribution over
G, Fp and fs be functions deﬁned over Z∗
p × Fc(G). (1)
The algorithm chooses CMPK ← Fc(G) randomly. (2)
The algorithm chooses random α ∈ Z∗
p, then computes
IMPK ← Fp(α, CMPK), IMSK ← fs(α, CMPK). The
algorithm outputs master public key mpk and master
secret key msk as
mpk := (IMPK, CMPK) ,
msk := (IMSK) .
Note that IMPK and IMSK are related to α while CMPK
is unrelated to α. The message space is M(CMPK).
(Fp(α, CMPK), CMPK), msk = (fs(α, CMPK)) where
α ∈ Z∗
p, CMPK ∈ Fc(G), and an identity id ∈ {0, 1}∗,
the algorithm chooses random r ∈ R, and outputs a
private key SKid that satisﬁes