### C. Evaluation of Blind CA

For our testing, we utilized a 475-byte X.509 certificate template, which included a 128-bit account/password and a 2048-bit public key. The certificate hash was generated using SHA-256.

#### CA Proof Generation and Verification Time

The size of a ZKBoo proof for a given computation is determined solely by the number of AND/ADD gates in the corresponding arithmetic circuit. In our implementation, the total number of AND/ADD gates was 78,064, resulting in a ZKBoo proof size of 625,768 bytes. On average, generating one ZKBoo proof took 22.3 ms over 50 rounds, with the evaluation of one AES block and one round of SHA-256 compression taking approximately 672 μs and 586 μs, respectively. It is important to note that we used a byte-oriented, optimized algorithm for AES, while a naive algorithm was employed for SHA-256, which involves time-consuming copy operations.

The verification time for one ZKBoo proof was about 16.3 ms. According to the design of ZKBoo, the upper bound of the verification time can be approximated by the corresponding proof generation time in the same setting. The size and computation time of a CA proof increase almost linearly with the number of ZKBoo proofs it contains. Generating and verifying a CA proof (consisting of 136 ZKBoo proofs) took approximately 2.9 s and 2.3 s, respectively. The total size of a CA proof was about 85.1 MB. Although this size is significant, we anticipate that proof generation will be an infrequent task in practical deployments. We also believe that further code optimization and the use of more advanced ZK techniques, such as Ligero [1], could significantly improve performance.

In Appendix §A, we provide an estimate of the performance impact of using generic MPC techniques for our applications.

### VII. Related Work

#### Secure Multi-Party Computation

Secure multi-party computation (MPC) is a technique that allows multiple parties to jointly compute a function over their private inputs without any party learning anything about the private inputs of the other parties beyond what can be inferred from the computation's output [25, 60]. Our system, SCI, can be seen as a special case of MPC, but using general-purpose protocols would be more expensive. Therefore, we benefit from the extensive literature on making fast MPC implementations [5, 9, 19, 31].

#### Group and Ring Signatures

In a group signature scheme [17], a trusted party issues credentials to a group of participants. Any participant can sign a message on behalf of the entire group, with the privacy guarantee that no one except the trusted party can determine which member signed the message. This does not provide the participation privacy we seek, as the trusted party learns all participants.

Ring signatures [54] do not require a trusted third party and allow signing on behalf of an ad hoc group of public keys. However, these public keys must be certified by traditional means, meaning ring signatures do not, by themselves, provide the level of participation privacy we aim for. That said, ring signatures offer a weaker form of participation privacy if there is some deniability in the registration of public keys suitable for ring signatures.

#### Anonymous Credentials

Anonymous credential systems allow a user to prove to another party that they have a valid certificate issued by a given CA without revealing the content of the certificate [12, 18, 32, 48]. Some systems focus on solving privacy issues during certificate issuance, allowing a user to obtain a signature for a certificate from a CA without revealing privacy-related information in the certificate or, in some cases, without revealing any part of the certificate [6, 49]. However, all these systems rely on a trusted third party that knows the user’s identity to perform an initial user registration. Our PAO protocol and blind CA do not.

#### Multi-Context TLS

Multi-context TLS (mcTLS) [44] is a modification to TLS that gives on-path middleboxes the ability to read or write specified contexts (i.e., portions of the plaintext messages) of a TLS session. Each context is encrypted under a separate symmetric key, allowing some to be shared with on-path middleboxes. This enables the injection of messages but is not backward-compatible with existing web infrastructure. Additionally, it cannot achieve service obliviousness, as the server must know which contexts were provided by the proxy.

#### Mailet

Li and Hopper designed a secure computation protocol for TLS GCM and used it to realize a censorship-circumvention system named Mailet [39]. Similar to our setting, they have a client and proxy that jointly compute a TLS record to allow authentication to a remote server (Twitter in the case of Mailet). While the application setting and goals are different, one might consider using their protocol to achieve SCI. Unfortunately, adopting their protocol would give the proxy the authentication key, allowing it to violate transcript integrity by forging messages. Moreover, Mailet relies on ad-hoc countermeasures that randomize the order and length of application-layer fields, but these won't work for many protocols (including SMTP). Finally, while it is theoretically possible to perform anonymous PAOs against authenticated HTTPS services, significant care would be needed to ensure proper understanding of the service semantics to guarantee security.

### VIII. Conclusion

In this work, we built the first blind CA: an authority that can validate identities and issue certificates without learning the identity. Blind CAs provide a way to construct anonymous credential systems that ensure participation privacy, meaning no single system learns about all the participants. This is crucial in settings where revealing the users of a system may put them at risk.

We introduced several first-of-their-kind sub-protocols to build a blind CA. Secure channel injection (SCI) allows a proxy to inject some (constrained) plaintext content into a stream of encrypted data from a client to a server. The client learns nothing about the injected data, while the proxy learns nothing about other messages sent in the stream. We then showed how SCI can be used to perform anonymous proofs of account ownership (PAO) for email accounts. The user can prove ownership of an email address on a service without revealing which one. Our blind CA protocol checks email ownership via an anonymous PAO and uses zero-knowledge proofs to validate and sign an X.509 certificate binding the email to a user’s chosen public key, all without ever learning the exact email or public key. Our prototype implementation demonstrates that blind CAs are efficient enough for practical use and work with existing SMTP services.

### Acknowledgments

This work was partially supported by a Junior Fellow award from the Simons Foundation, NSF grants CNS-1330308, CNS-1558500, CNS-1704527, TWC-1646671, TWC-1664445, CNS-1561209, CNS-1217821, CNS-1704788, AFOSR Award FA9550-15-1-0262, a Microsoft Faculty Fellowship, a Google Faculty Research Award, and a gift from Microsoft.

### References

[1] S. Ames, C. Hazay, Y. Ishai, and M. Venkitasubramaniam. Ligero: Lightweight sublinear arguments without a trusted setup. In ACM CCS, 2017.
...
[53] P. Rindal and M. Rosulek. Faster malicious 2-party secure computation with online/offline dual execution. IACR ePrint Archive, 2016.