C. Evaluation of blind CA
We used a 475-byte X.509 certiﬁcate template with a
128-bit account/password and 2048-bit public key in our
testing. The certiﬁcate hash is produced by SHA-256.
CA proof generation and veriﬁcation time. The size of
a ZKBoo proof for a given computation is only decided
by the number of AND/ADD gates in the corresponding
arithmetic circuit. In our implementation, The total num-
ber of AND/ADD gates is 78,064. The resulting ZKBoo
proof size was 625,768 bytes. The average computation
time for generating one ZKBoo proof was 22.3 ms (over
50 rounds): evaluating one AES block and one round of
SHA-256 compression took about 672 us and 586 us on
average. Note that we used a byte-oriented, optimized
algorithm for AES whereas a naive algorithm for SHA-
256, which involves time-consuming copy operations.
The veriﬁcation time for one ZKBoo proof was about
16.3 ms. Based on the design of ZKBoo, the upper bound
of the veriﬁcation time can be approximated by the cor-
responding proof generation time (in the same setting).
The size and computation time of a CA proof increase
almost linearly with the number of ZKBoo proofs it has.
It took about 2.9 s and 2.3 s to generate and verify a CA
proof (136 ZKBoo proofs) respectively. The total size of a
CA proof was about 85.1 M. While large, we expect that
generating proofs will be an infrequent task in deploy-
ments. We also believe that with further code optimization
and more advanced ZK techniques, e.g., using Ligero [1],
could signiﬁcantly improve performance.
In Appendix §A, we estimate the performance impact
of using generic MPC techniques for our applications.
VII. RELATED WORK
Secure multi–party computation. Secure multi-party
computation (MPC) is a technique for multiple parties to
jointly compute a function over all their private inputs,
while no party can learn anything about the private inputs
of the other parties beyond what can be informed from
6We obtained an IRB exemption to collect the trafﬁc. Here we only
used extracted timings from that dataset for our measurements.
(cid:18)(cid:17)(cid:19)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:08 UTC from IEEE Xplore.  Restrictions apply. 
the computation’s output [25, 60]. SCI can be seen as a
special-case of MPC, but using general-purpose protocols
would be more expensive and we limit their use. As such
we beneﬁt from the now long literature on making fast
MPC implementations [5, 9, 19, 31].
Group and ring signatures. In a group signature
scheme [17], a trusted party gives credentials to a group
of participants. Any participant can sign a message on
behalf of the entire group, with the privacy guarantee
that no one aside from the trusted party can learn which
member of the group signed the message. This does not
provide the participation privacy we seek: the trusted
party learns all participants.
Ring signatures [54] do not require a trusted third party,
but nevertheless allow signing on behalf of an ad hoc
group of public keys. The public keys, however, must be
certiﬁed by traditional means, meaning ring signatures
do not, by themselves, provide the level of participa-
tion privacy we seek. That said, ring signatures give a
weaker form of participation privacy should there be some
deniability in terms of having an ostensible reason for
registration of public keys suitable for ring signatures.
Anonymous credentials. Anonymous credentials sys-
tems allows a user to prove to another party that she has a
valid certiﬁcate issued by a given CA, without revealing
the content of the certiﬁcate [12,18,32,48]. Some systems
focus on solving privacy issues that arise during certiﬁcate
issuance, and allow a user to obtain the signature for a
certiﬁcate from a CA without revealing privacy-related
information in the certiﬁcate or, in some cases, without
revealing any part of the certiﬁcate [6, 49]. However, all
these systems rely on a trusted third party that knows the
user’s identity to perform an initial user registration. Our
PAO protocol and blind CA do not.
Multi-context TLS. Multi-context TLS (mcTLS) [44] is
a modiﬁcation to TLS that gives on-path middleboxes the
ability to read or write speciﬁed contexts (i.e., a portion
of the plaintext messages) of a TLS session. Each context
ends up encrypted under a separate symmetric key, and
so some can be shared with the on-path middleboxes.
This allows injection of messages, but is not backwards
compatible with existing web infrastructure. It also would
not be able to achieve service obliviousness, as the server
must know which contexts were provided by the proxy.
Mailet. Li and Hopper design a secure computation pro-
tocol for TLS GCM and use it to realize a censorship-
circumvention system named Mailet [39]. As in our set-
ting, they have a client and proxy that jointly compute
a TLS record to allow authentication to a remote server
(Twitter in the case of Mailet). While the application
setting and goals are different than ours, one might hope
to use their protocol to achieve SCI. Unfortunately, to
adopt their protocol, the proxy is given the authentication
key, allowing it to violate transcript integrity by forging
messages. Moreover, Mailet relies on ad-hoc counter-
measure that randomize order and length of application-
layer ﬁelds, but these won’t work for many protocols
(including SMTP). Finally, while we note that in theory
one can perform anonymous PAOs against authenticated
HTTPS services, signiﬁcant care would be needed to en-
sure proper understanding of the semantics of the service
in order to guarantee security.
VIII. CONCLUSION
In this work, we built the ﬁrst blind CA: an authority
that can validate identities and issue certiﬁcates without
learning the identity. Blind CAs provide a way to con-
struct anonymous credential systems that ensure partici-
pation privacy, meaning no single system learns of all the
participants. This is important in settings where revealing
the users of a system may already put them at risk.
We introduced a number of ﬁrst-of-their-kind sub-
protocols in order to build a blind CA. Secure channel
injection (SCI) allows a proxy to inject some (constrained)
plaintext content into a stream of encrypted data from
a client to server. The client learns nothing about the
injected data, while the proxy learns nothing about other
messages sent in the stream. We then showed how SCI
can be used to perform anonymous proofs of account
ownership (PAO) for email accounts. The user can prove
ownership of some email address on a service, but not
reveal to the veriﬁer which one. Our blind CA protocol
checks email ownership via an anonymous PAO, and
then uses zero-knowledge proofs to validate and sign an
X.509 certiﬁcate binding the email to a user’s chosen
public key, all without ever learning the exact email or
public key. Our prototype implementation shows that
blind CAs are efﬁcient enough for use in practice, and
that they work with existing SMTP services.
ACKNOWLEDGMENTS
This work was partially supported by a Junior Fellow
award from the Simons Foundation, NSF grants CNS-
1330308, CNS-1558500, CNS-1704527, TWC-1646671,
TWC-1664445, CNS-1561209, CNS-1217821, CNS-
1704788, AFOSR Award FA9550-15-1-0262, a Microsoft
Faculty Fellowship, a Google Faculty Research Award,
and a gift from Microsoft.
REFERENCES
[1] S. Ames, C. Hazay, Y. Ishai, and M. Venkitasubramaniam. Ligero:
Lightweight sublinear arguments without a trusted setup. In ACM
CCS, 2017.
[2] Arclab. A list of SMTP and POP3 server. https://www.arclab.com/
en/kb/email/list-of-smtp-and-pop3-servers-mailserver-list.html,
2016.
[3] M. Belenkiy, J. Camenisch, M. Chase, M. Kohlweiss, A. Lysyan-
skaya, and H. Shacham. Randomizable proofs and delegatable
anonymous credentials. In CRYPTO, 2009.
(cid:18)(cid:17)(cid:19)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:08 UTC from IEEE Xplore.  Restrictions apply. 
[4] M. Bellare and P. Rogaway. Random oracles are practical: A
paradigm for designing efﬁcient protocols. In ACM CCS, 1993.
[5] A. Ben-David, N. Nisan, and B. Pinkas. Fairplaymp: A system for
secure multi-party computation. In ACM CCS, 2008.
[6] V. Benjumea, J. Lopez, J. A. Montenegro, and J. M. Troya. A ﬁrst
approach to provide anonymity in attribute certiﬁcates. In PKC.
2004.
[7] G. Bertoni, J. Daemen, M. Peeters, and G. Van Assche. Keccak
and the sha-3 standardization. NIST, page 30, 2013.
[8] J. Boyar and R. Peralta. A depth-16 circuit for the AES S-box.
IACR Cryptology ePrint Archive, 2011:332, 2011.
[9] M. Burkhart, M. Strasser, D. Many, and X. Dimitropoulos. Sepia:
Privacy-preserving aggregation of multi-domain network events
and statistics. Network, 1:101101, 2010.
[10] J. Camenisch and A. Lysyanskaya. An efﬁcient system for
non-transferable anonymous credentials with optional anonymity
revocation. In EUROCRYPT, 2001.
[11] J. Camenisch and A. Lysyanskaya.
Signature schemes and
anonymous credentials from bilinear maps. In CRYPTO, 2004.
[12] J. Camenisch and E. Van Herreweghen. Design and implementa-
In ACM CCS,
tion of the idemix anonymous credential system.
2002.
[13] R. Canetti. Security and composition of multiparty cryptographic
protocols. J. Cryptology, 13(1):143–202, 2000.
[14] D. Chang
and M. Yung.
consequences).
their
008b781ca9928f2c0d20b91f768047fc.pdf, 2012.
Midgame
(and
http://crypto.2012.rump.cr.yp.to/
attacks
[15] Y. Chang and C. Lu. Oblivious polynomial evaluation and
oblivious neural learning. Theor. Comput. Sci., 341(1-3):39–54,
2005.
[16] D. Chaum. Security without identiﬁcation: Transaction systems
to make big brother obsolete. Communications of the ACM,
28(10):1030–1044, 1985.
[17] D. Chaum and E. Van Heyst. Group signatures. In Workshop on
the Theory and Application of of Cryptographic Techniques, 1991.
[18] A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, and B. Parno. Cin-
derella: Turning shabby x.509 certiﬁcates into elegant anonymous
credentials with the magic of veriﬁable computation.
In IEEE
S&P, 2016.
[19] D. Demmler, T. Schneider, and M. Zohner. Aby-A framework for
efﬁcient mixed-protocol secure two-party computation. In NDSS,
2015.
[20] dhuertas. AES algorithm implementation using C. https://github.
com/dhuertas/AES, 2016.
[21] T. Dierks and E. Rescorla”. The Transport Layer Security (TLS)
Protocol Version 1.1. RFC 4346, 2006.
[22] T. Dierks and E. Rescorla”. The Transport Layer Security (TLS)
Protocol Version 1.2. RFC 5246, 2008.
[23] Z. Durumeric, D. Adrian, A. Mirian, J. Kasten, E. Bursztein,
N. Lidzborski, K. Thomas, V. Eranti, M. Bailey, and J. A.
Halderman. Neither snow nor rain nor mitm...: An empirical
analysis of email delivery security. In ACM IMC, 2015.
[24] EEasy.
SMTP server
SMTPServerList.aspx, 2016.
list.
http://www.e-eeasy.com/
[25] C. Gentry. A fully homomorphic encryption scheme. PhD thesis,
Stanford University, 2009.
[26] S. Ghosh, J. B. Nielsen, and T. Nilges. Maliciously secure
In
oblivious linear function evaluation with constant overhead.
ASIACRYPT, 2017.
[27] I. Giacomelli, J. Madsen, and C. Orlandi. Zkboo: Faster zero-
knowledge for boolean circuits. In Usenix Security, 2016.
[28] O. Goldreich. The Foundations of Cryptography - Volume 2, Basic
Applications. Cambridge University Press, 2004.
[29] C. Hazay. Oblivious polynomial evaluation and secure set-
intersection from algebraic prfs. In TCC, 2015.
[30] C. Hazay and Y. Lindell. Efﬁcient oblivious polynomial evaluation
with simulation-based security. IACR Cryptology ePrint Archive,
2009:459.
[31] W. Henecka, A.-R. Sadeghi, T. Schneider, I. Wehrenberg, et al.
In
Tasty: Tool for automating secure two-party computations.
ACM CCS, 2010.
[32] S. Hohenberger, S. Myers, R. Pass, and A. Shelat. Anonize: A
large-scale anonymous survey system. In IEEE S&P, 2014.
[33] R. Holz, J. Amann, O. Mehani, M. Wachs, and M. A. Kaafar. TLS
in the wild: An internet-wide analysis of tls-based protocols for
electronic communication. NDSS, 2016.
[34] Internet Security Research Group. Let’s encrypt - Free SSL/TLS
certiﬁcates. https://letsencrypt.org/, 2016.
[35] keybase.io. Public key crypto for everyone. https://keybase.io/,
2016.
[36] A. Kiayias and M. Yung. Cryptographic hardness based on the
decoding of reed-solomon codes. IEEE Trans. Information Theory,
54(6):2752–2769, 2008.
[37] J. Klensin. Simple Mail Transfer Protocol. RFC 5321, 2008.
[38] H. Krawczyk, M. Bellare, and R. Canetti. HMAC: Keyed-Hashing
for Message Authentication. RFC 2104, 1997.
[39] S. Li and N. Hopper. Mailet: Instant social networking under
censorship. volume 2016, pages 175–192.
[40] G. Lindberg. Anti-spam recommendations for SMTP MTAs. RFC
2505, 1999.
[41] D. McGrew and D. Bailey. AES-CCM Cipher Suites for Transport
Layer Security (TLS). RFC 6655, 2012.
[42] M. S. Melara, A. Blankstein, J. Bonneau, E. W. Felten, and M. J.
In
Freedman. Coniks: Bringing key transparency to end users.
Usenix Security, 2015.
[43] M. Naor and B. Pinkas. Oblivious polynomial evaluation. SIAM
J. Comput., 35(5), 2006.
[44] D. Naylor, K. Schomp, M. Varvello, I. Leontiadis, J. Blackburn,
D. R. L´opez, K. Papagiannaki, P. Rodriguez Rodriguez, and
P. Steenkiste. Multi-context TLS (mcTLS): Enabling secure in-
network functionality in TLS. In ACM SIGCOMM, 2015.
[45] Nick Sullivan.
Padding oracles
suites.
and the decline of
https://blog.cloudﬂare.com/
cipher
cbc-mode
padding-oracles-and-the-decline-of-cbc-mode-ciphersuites/,
2016.
[46] J. B. Nielsen, T. Schneider, and R. Triﬁletti. Constant round
maliciously secure 2pc with function-independent preprocessing
using LEGO. In NDSS, 2017.
[47] Y. Nir and A. Langley.
Protocols. RFC 7539, 2015.
ChaCha20 and Poly1305 for IETF
[48] C. Paquin and G. Zaverucha. U-prove cryptographic speciﬁcation
v1.1. Technical report, 2013.
[49] S. Park, H. Park, Y. Won, J. Lee, and S. Kent.
Anonymous Certiﬁcate. RFC 5636, 2009.
Traceable
[50] T. R. Paul Grubbs, Jiahui Lu. Message franking via committing
authenticated encryption. In CRYPTO, 2016.
[51] B. Peterson. smtplib — SMTP protocol client. https://docs.python.
org/2/library/smtplib.html, 2016.
[52] rkern. Line proﬁler and kernprof. https://github.com/rkern/line
proﬁler, 2016.
[53] P. Rindal and M. Rosulek.
computation with online/oﬁne dual execution.
ePrint Archive, 2016.
Faster malicious 2-party secure