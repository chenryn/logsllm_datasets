For dnssec, use “dig +dnssec”
–
To ask for data without checks, use “dig +cdflag”
_
You can use stable bind8/9 to serve secure zones
–
Note: bind8 does NOT serve data with expired SIG record. This
data will disappear on bind8. Bind9 serves data with expired SIG
records
Tip
Setup bind
Tip
Bind: Create secure zonefile
~> dnssec-keygen -a RSASHA1 -b 2048 -n ZONE freeswan.nl
Kfreeswan.nl.+005+49601
~> dnssec-keygen -a RSASHA1 -b 768 -n ZONE freeswan.nl
Kfreeswan.nl.+005+56954
(creates .key and .private files)
~> cat *key >> /var/named/freeswan.nl
(increase serial number in zone)
~> dnssec-signzone -o freeswan.nl -k Kfreeswan.nl.+005+49601.key
/var/named/freeswan.nl Kfreeswan.nl.+005+56954.key
(upload to master and change named.conf to load zone “freeswan.nl.signed” instead
of “freeswan.nl”)
Test: dig +multiline +dnssec -t key freeswan.nl @ns.xtdnet.nl
Secure .nl: http://secreg.nlnetlabs.nl/
Secure .nl: http://secreg.nlnetlabs.nl/
Securely Resolving .nl domains
Use bakbeest.sidn.nl or alpha.nlnetlabs.nl
Tip
DNSSEC experiment for com/net/org
domains
See: www.dnssec.verisignlabs.com
- No personal experience
- Still needs pre-DS dnssec-makekeyset
tool which is no longer in the bind
  snapshot (java signer available)
- Trusted keys need to be pulled from
  zonedata
- Experiment is purely technical, no policy
issues addressed.
_
Net::DNS and Net:DNS::SEC (in CPAN)
–
Has bug for large TXT records (opportunistic encryption records)
_
DNSSEC-Maint and DNSSEC-Maint-Zone (RIPE NCC)
–
Supports notion of KSK and ZSK and 2 step rollovers
–
Very easy to use and maintain keys, zones and rollovers (!)
(we currently maintain about 150 dnssec zones)
• Maintkeydb  create RSASHA1 zonesigning 768 freeswan.nl
• Dnssigner -o freeswan.nl /var/named/freeswan.nl
• maintkeydb rollover freeswan.nl zonesigning yes
• Maintkeydb rollover freeswan.nl zonesigning yes [check]
_
You can use stable bind8/9 to serve secure zones
–
Note: bind8 does NOT serve data with expired SIG record. Records
will disappear when SIG expired on bind8. Bind9 serves data with
d
d
Mass Deployment
_
Location of DNS Zonefile now on secure signer
machine
_
New task: maintain secure zones
–
Don't let the SIG records expire!!
_
No more direct edits of zonefile
–
Or extra step if generating from database (and how secure is the
database machine?)
Changes in organisation
_
FreeS/WAN: IPsec Opportunistic Encryption
 -  supports dnssec since version 2.01
–
http://untappable.xtdnet.nl/ does DNSSEC aware OE
_
OpenSSH: host keys in DNS
–
Only patch for old version currently available
_
ISC dhclient: secure dynamic updates
_
NXT-walk software (tsk tsk)
_
Browser plugins???
Applications using DNSSEC
_
Bleeding edge: http://www.ripe.net/disi/
_
Documentation:
–
http://www.xtdnet.nl/paul/blackhat/ (updates of these slides)
–
http://www.xtdnet.nl/paul/dnssec/
–
http://www.ripe.net/training/dnssec/
–
http://www.dnssec.net/
_
Software
–
ftp://ftp.isc.org/isc/bind9/snapshots/
–
http://www.miek.nl/projects/resolver/resolver.html
_
Secure Registery experiments
–
http://secreg.nlnetlabs.nl/
DNSSEC References
 RFC 3445: KEY record limitation
RRlabel  TTL  IN  KEY     
KEY record may only be of protocol number 3 (DNSSEC). All other
pplications need to use the APPKEY record. IETF feared too many
pplication keys in APEX of zone.
Result: Breaks all FreeS/WAN Opportunistic Encryption machines on the
nternet!
ETF basicly broke the first and only DNSSEC aware application !!!
FreeS/WAN will likely ignore RFC3445, but will reverse the order of lookups. Where it used
o first try KEY record, then TXT record, as of version 2.01 it will first try TXT record, then
allback on nonrfc compliant KEY record).
_
Opportunistic Encryption: IPsec for the masses
http://www.freeswan.org/freeswan_snaps/CURRENT-SNAP/doc/quickstart.html
Tip
Part two: Opportunistic Encryption
_
IPsec basics
_
What is Opportunistic Encryption
_
Protecting the net with OE
_
Installing and Configuring OE
_
Securing the wireless: WaveSEC
_
Testing OE
 Overview presentation
PART TWO: IPsec
_
Phase 1: Diffie-Hellman Key Exchange
–
Ensures privacy
–
Vulnerable to Man in the middle attack
_
Phase 2: Identity exchange and verification
–
Exchange ID's
–
Both parties independantly check ID.
–
Both parties agree on encryption method, eg PreShared Secret (PSK) or
RSA key based. PSK or RSA key of other party needs to be known
beforehand!
–
Both parties agree on a stream cipher for the encryption, eg AES,3DES
–
Both parties agree to pass along certain packets, eg 10.0.1.0/24
_
ID's originally were just text based, eg “Paul”
 IPsec in a nutshell
_
Goal: IPsec connection without prior arrangement or exchange
of information with parties you never knew before, allowing
mass deployment of computers on the internet to talk securely
and privately. Force eavesdroppers from passive to active
attacks.
_
Support the notion of one OE security gateway protecting a
whole subnet.
_
Information needs to come from “trusted third party” to
prevent MITM attack in Phase 1.
_
The trick: Use the IP address as a pointer to external
information.
- Obviously we cannot use PSK, since everyone would be able to fetch the
   secret. We need to use a public key system, such as RSA or X.509
Opportunistic Encryption
_
Put special TXT record in the reverse, eg:
; RSA 2192 bits   bofh.xtdnet.nl   Thu Oct 17 12:32:33 2002
17.157.110.193.in-addr.arpa. IN TXT "X-IPsec-Server(10)=193.110.157.17"
" AQOkF1Ggd4iFfI2nQxJYbN9HGDhhIAKIXCoAPX+z+fNI9j7rxxR9QhThIZZeOx
+X9WB4hIa8/8xAnELmc RhkD8CxfznE4tCQ/Ws+9ibXUdD8Wee3JusSMrmLCu
IScNUQuBtRe+l+nn16dzvw3/PGB67gid+AvGvJJJnxiFjibd/4ayVebJRj 6Bu/FRex
pXr3jEgg0TJwxu9y1xBR7i0tRYCdSQPKNClNrgmX7YZTp4bu6gizhil63/sR6"
_
ISC DHCP server and client support this with DNS Dynamic
Updates.
_
If two parties both have their RSA key in the reverse DNS, they
can fetch each other's key and setup a secure connection.
_
FreeS/WAN upto 2.00 also supported putting the RSA key in a
KEY record instead of TXT record, but again: IETF killed this
with RFC3445. FS 2.01 only falls back on the KEY record.
DNS to advertise OE-capability and RSA key
_
If Phase 1 ID is of the format “@FQDN” (eg @vaio.xtdnet.nl)
then do not use reverse dns of IP address, but look for a TXT
record in the forward zone eg:
; RSA 2192 bits   vaio.xtdnet.nl   Thu Oct 17 12:32:33 2002
vaio.xtdnet.nl. IN TXT "X-IPsec-Server(10)=127.0.0.1""AQOkF1Ggd4iFfI2nQx
JYbN9HGDhhIAKIXCoAPX+z+fNI9j7rxxR9QhThIZZeOx+X9WB4hIa8/8xAnELmc
RhkD8CxfznE4tCQ/Ws+9ibXUdD8Wee3JusSMrmLCuIScNUQuBtRe+l+nn16dzvw
3/PGB67gid+AvGvJJJnxiFjibd/4ayVebJRj6Bu/FRexpXr3jEgg0TJwxu9y1xBR7i0tR
YCdSQPKNClNrgmX7YZTp4bu6gizhil63/sR6"
_
For now, at least the answering party needs reverse TXT,
otherwise man in the middle attack possible.
- We call this: initiator-only OE (iOE)
_
If two parties both have their RSA key in the reverse DNS, they
can fetch each other's key and setup a secure connection.
_
Note: if remote initiates, one clear packet will go over the wire
Most do not control their reverse DNS: iOE
_
Determining OE takes time (one or more DNS lookups).
_
Doing DNS lookups on very busy webservers takes resources.
_
Most OE attempts on responder will fail anyway, since
otherwise client would have initiated to us to begin with.
_
Passive OE: Only respond to incoming requests, do not start
outgoing requests. Ideal for busy webservers.
(www.freeswan.org does passive OE)
_
Note: two passive OE servers will talk in the clear!!
OE on the responding side
_
Use DHCP and dynamic updates to automaticly find OE
gateway and put our key in the reverse. Then we can setup OE
to OEGW
_
Make this OE gateway (your IPsec tunnel) the default route
OE to protect 802.11: WaveSEC
_
The reverse DNS  becomes meaningless, we must switch to iOE
or we will fail to connect to OE-capable hosts.
(FreeS/WAN tries to detect private space IP)
_
'normal' NAT-traversal can then happen.
_
If NAT gateway is OE-capable, there is no need for OE on the
inside machines (They can even be Windows,IP-phones,etc)
OE getting ugly: NAT-traversal
_
Typical setup: ADSL with one IP, no control of reverse
_
Run SNAT on internal interface
(not on external which is more common)
_
Run iOE on public interface (eg ppp0, eth1)
(perhaps slighly lower MTU if going through more tunnels, such as PPTP)
_
Remember: first inbound packet will be in the clear!
OE getting ugly: OE & NAT to protect subnet
_
If using SNAT, we can protect another subnet without
becoming critical infrastructure
(SNAT is needed because otherwise response packets from server to OE-client
will flow back in the clear, and dropped at the client)
DIA IMAGE
OE getting ugly: SNAT to protect subnet
_
PF_KEY sockets with OE extensions
–
KLIPS, the FreeS/WAN kernel code (Linux 2.0,2.2,2.4,2.5)
–
Linux 2.5 native IPsec stack (2.5.69+)
_
OE support in the IKE daemon
–
Pluto, the FreeS/WAN userland keying daemon
–
ipsec-tools (for native 2.5) doesn't support OE yet.
_
RSA public key in the DNS
–
For full OE: TXT record in the reverse
–
For iOE: TXT record in any forward
–
For compatibility with FreeS/WAN 1.9x-2.01: KEY records
_
No filters for UDP-500 (IKE), UDP-4500(NAT-T IKE),
PROTO50(ESP) and PROTO51(AH)
l
l
hi
f
bl
DNSSEC
Configuring OE: requirements
_
FreeS/WAN uses a routing hack to trick packets to enter the
ipsec device (pre netfilter/netlink legacy)
Example with OE disabled:
# ip ro li
193.110.157.0/24 dev eth0  proto kernel  scope link  src 193.110.157.17
127.0.0.0/8 dev lo  scope link
default via 193.110.157.254 dev eth0
When OE is enabled:
# ip ro li
193.110.157.0/24 dev eth0  proto kernel  scope link  src 193.110.157.17
193.110.157.0/24 dev ipsec0  proto kernel  scope link  src 193.110.157.17
127.0.0.0/8 dev lo  scope link
0.0.0.0/1 via 193.110.157.254 dev ipsec0
128.0.0.0/1 via 193.110.157.254 dev ipsec0
default via 193.110.157.254 dev eth0
_
Note: To do OE within the same subnet, repeat this trick for
OE: How it works: The routing hack
_
Old style route command output (you all use ip command
right?)
# route -n
Kernel IP routing table
Destination
Gateway         
Genmask         Flags Metric Ref Use
Iface
193.110.157.0
0.0.0.0
255.255.255.0   U     0      0        0
eth0
193.110.157.0
0.0.0.0
255.255.255.0   U     0      0        0
ipsec0
127.0.0.0
0.0.0.0
255.0.0.0          U     0      0        0
lo
0.0.0.0
193.110.157.254
128.0.0.0         UG    0      0
0 ipsec0
128.0.0.0
193.110.157.254
128.0.0.0         UG    0      0        0
ipsec00.0.0.0
193.110.157.254
0.0.0.0             UG