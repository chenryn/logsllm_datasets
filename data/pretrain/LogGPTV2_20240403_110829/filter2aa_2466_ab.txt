### DNSSEC and BIND Configuration

#### Using `dig` for DNSSEC
- To query with DNSSEC validation, use: `dig +dnssec`
- To query without DNSSEC checks, use: `dig +cdflag`

#### BIND Versions
- You can use stable versions of BIND 8 or 9 to serve secure zones.
- **Note:** BIND 8 does not serve data with expired SIG records. This data will be omitted. BIND 9, however, continues to serve data even if the SIG records have expired.

#### Setting Up BIND
1. **Generate Key Pairs:**
   ```sh
   dnssec-keygen -a RSASHA1 -b 2048 -n ZONE freeswan.nl
   Kfreeswan.nl.+005+49601
   dnssec-keygen -a RSASHA1 -b 768 -n ZONE freeswan.nl
   Kfreeswan.nl.+005+56954
   ```
   (This command creates `.key` and `.private` files.)

2. **Add Keys to Zone File:**
   ```sh
   cat *key >> /var/named/freeswan.nl
   ```
   (Increase the serial number in the zone file.)

3. **Sign the Zone:**
   ```sh
   dnssec-signzone -o freeswan.nl -k Kfreeswan.nl.+005+49601.key /var/named/freeswan.nl Kfreeswan.nl.+005+56954.key
   ```

4. **Upload to Master and Update `named.conf`:**
   - Upload the signed zone file to the master server.
   - Modify `named.conf` to load the signed zone file (`freeswan.nl.signed`) instead of the unsigned one (`freeswan.nl`).

#### Testing DNSSEC
- Use the following command to test the DNSSEC setup:
  ```sh
  dig +multiline +dnssec -t key freeswan.nl @ns.xtdnet.nl
  ```

- **Secure .nl Domains:**
  - Use `bakbeest.sidn.nl` or `alpha.nlnetlabs.nl` for resolving .nl domains securely.
  - More information: [http://secreg.nlnetlabs.nl/](http://secreg.nlnetlabs.nl/)

#### DNSSEC Experiment for com/net/org Domains
- See: [www.dnssec.verisignlabs.com](http://www.dnssec.verisignlabs.com)
- **Notes:**
  - No personal experience.
  - Requires the `dnssec-makekeyset` tool, which is no longer included in the BIND snapshot (a Java signer is available).
  - Trusted keys need to be pulled from zonedata.
  - The experiment is purely technical and does not address policy issues.

#### Tools and Libraries
- **Net::DNS and Net::DNS::SEC (CPAN)**
  - Known bug: Issues with large TXT records (e.g., opportunistic encryption records).

- **DNSSEC-Maint and DNSSEC-Maint-Zone (RIPE NCC)**
  - Supports the notion of KSK and ZSK and two-step rollovers.
  - Easy to use and maintain keys, zones, and rollovers.
  - Example commands:
    ```sh
    maintkeydb create RSASHA1 zonesigning 768 freeswan.nl
    dnssigner -o freeswan.nl /var/named/freeswan.nl
    maintkeydb rollover freeswan.nl zonesigning yes
    maintkeydb rollover freeswan.nl zonesigning yes [check]
    ```

#### Mass Deployment
- **Location of DNS Zonefile:**
  - Now on a secure signer machine.
- **New Task: Maintain Secure Zones**
  - Ensure that SIG records do not expire.
  - Direct edits of the zonefile are no longer recommended.
  - If generating from a database, consider the security of the database machine.

#### FreeS/WAN: IPsec Opportunistic Encryption
- Supports DNSSEC since version 2.01.
- For DNSSEC-aware OE, see: [http://untappable.xtdnet.nl/](http://untappable.xtdnet.nl/)

#### OpenSSH: Host Keys in DNS
- Only a patch for an old version is currently available.

#### ISC DHCP Client: Secure Dynamic Updates
- Supports secure dynamic updates.

#### NXT-Walk Software
- Further details needed.

#### Browser Plugins
- Currently under development.

### Applications Using DNSSEC
- **Bleeding Edge:**
  - [http://www.ripe.net/disi/](http://www.ripe.net/disi/)

### Documentation
- [http://www.xtdnet.nl/paul/blackhat/](http://www.xtdnet.nl/paul/blackhat/)
- [http://www.xtdnet.nl/paul/dnssec/](http://www.xtdnet.nl/paul/dnssec/)
- [http://www.ripe.net/training/dnssec/](http://www.ripe.net/training/dnssec/)
- [http://www.dnssec.net/](http://www.dnssec.net/)

### Software
- [ftp://ftp.isc.org/isc/bind9/snapshots/](ftp://ftp.isc.org/isc/bind9/snapshots/)
- [http://www.miek.nl/projects/resolver/resolver.html](http://www.miek.nl/projects/resolver/resolver.html)

### Secure Registry Experiments
- [http://secreg.nlnetlabs.nl/](http://secreg.nlnetlabs.nl/)

### DNSSEC References
- **RFC 3445: KEY Record Limitation**
  - The KEY record may only be used for protocol number 3 (DNSSEC). Other applications must use the APPKEY record.
  - **Impact:**
    - Breaks all FreeS/WAN Opportunistic Encryption machines on the internet.
    - IETF essentially broke the first and only DNSSEC-aware application.
    - FreeS/WAN will likely ignore RFC 3445 but will reverse the order of lookups. It will first try the TXT record and then fall back to the non-RFC compliant KEY record.

### Opportunistic Encryption: IPsec for the Masses
- [http://www.freeswan.org/freeswan_snaps/CURRENT-SNAP/doc/quickstart.html](http://www.freeswan.org/freeswan_snaps/CURRENT-SNAP/doc/quickstart.html)

### Part Two: Opportunistic Encryption

#### IPsec Basics
- **What is Opportunistic Encryption?**
  - Goal: Enable IPsec connections without prior arrangement or exchange of information, allowing mass deployment of secure and private communication.
  - **Phases:**
    - **Phase 1: Diffie-Hellman Key Exchange**
      - Ensures privacy.
      - Vulnerable to Man-in-the-Middle (MITM) attacks.
    - **Phase 2: Identity Exchange and Verification**
      - Exchange IDs.
      - Both parties independently check IDs.
      - Agree on encryption methods (e.g., PreShared Secret (PSK) or RSA key-based).
      - Agree on a stream cipher (e.g., AES, 3DES).
      - Agree on passing certain packets (e.g., 10.0.1.0/24).

- **ID Types:**
  - Originally text-based (e.g., "Paul").

- **Trusted Third Party:**
  - Needed to prevent MITM attacks in Phase 1.
  - Use the IP address as a pointer to external information.
  - Public key systems (e.g., RSA or X.509) are required.

#### Special TXT Records
- **Reverse DNS:**
  - Example:
    ```sh
    ; RSA 2192 bits   bofh.xtdnet.nl   Thu Oct 17 12:32:33 2002
    17.157.110.193.in-addr.arpa. IN TXT "X-IPsec-Server(10)=193.110.157.17"
    " AQOkF1Ggd4iFfI2nQxJYbN9HGDhhIAKIXCoAPX+z+fNI9j7rxxR9QhThIZZeOx
    +X9WB4hIa8/8xAnELmc RhkD8CxfznE4tCQ/Ws+9ibXUdD8Wee3JusSMrmLCu
    IScNUQuBtRe+l+nn16dzvw3/PGB67gid+AvGvJJJnxiFjibd/4ayVebJRj 6Bu/FRex
    pXr3jEgg0TJwxu9y1xBR7i0tRYCdSQPKNClNrgmX7YZTp4bu6gizhil63/sR6"
    ```

- **Forward DNS:**
  - Example:
    ```sh
    ; RSA 2192 bits   vaio.xtdnet.nl   Thu Oct 17 122:32:33 2002
    vaio.xtdnet.nl. IN TXT "X-IPsec-Server(10)=127.0.0.1""AQOkF1Ggd4iFfI2nQx
    JYbN9HGDhhIAKIXCoAPX+z+fNI9j7rxxR9QhThIZZeOx+X9WB4hIa8/8xAnELmc
    RhkD8CxfznE4tCQ/Ws+9ibXUdD8Wee3JusSMrmLCuIScNUQuBtRe+l+nn16dzvw
    3/PGB67gid+AvGvJJJnxiFjibd/4ayVebJRj6Bu/FRexpXr3jEgg0TJwxu9y1xBR7i0tR
    YCdSQPKNClNrgmX7YZTp4bu6gizhil63/sR6"
    ```

- **Initiator-Only OE (iOE):**
  - At least the answering party needs a reverse TXT record to prevent MITM attacks.
  - **Passive OE:**
    - Only respond to incoming requests; do not initiate outgoing requests.
    - Ideal for busy web servers.

#### NAT Traversal
- **Typical Setup:**
  - ADSL with one IP, no control of reverse DNS.
  - Run SNAT on the internal interface.
  - Run iOE on the public interface (e.g., ppp0, eth1).
  - First inbound packet will be in the clear.

- **Protecting Subnets:**
  - Use SNAT to protect another subnet without becoming critical infrastructure.

#### PF_KEY Sockets with OE Extensions
- **KLIPS (FreeS/WAN Kernel Code):**
  - Supported on Linux 2.0, 2.2, 2.4, 2.5.
- **Linux 2.5 Native IPsec Stack:**
  - Available in Linux 2.5.69+.
- **IKE Daemon Support:**
  - **Pluto (FreeS/WAN Userland Keying Daemon):**
    - Supports OE.
  - **ipsec-tools:**
    - Does not support OE yet.

#### RSA Public Key in DNS
- **For Full OE:**
  - TXT record in the reverse DNS.
- **For iOE:**
  - TXT record in any forward DNS.
- **For Compatibility with FreeS/WAN 1.9x-2.01:**
  - KEY records.

#### Configuring OE: Requirements
- **Routing Hack:**
  - FreeS/WAN uses a routing hack to trick packets into entering the IPsec device.
  - Example configuration:
    ```sh
    # ip ro li
    193.110.157.0/24 dev eth0  proto kernel  scope link  src 193.110.157.17
    127.0.0.0/8 dev lo  scope link
    default via 193.110.157.254 dev eth0
    When OE is enabled:
    # ip ro li
    193.110.157.0/24 dev eth0  proto kernel  scope link  src 193.110.157.17
    193.110.157.0/24 dev ipsec0  proto kernel  scope link  src 193.110.157.17
    127.0.0.0/8 dev lo  scope link
    0.0.0.0/1 via 193.110.157.254 dev ipsec0
    128.0.0.0/1 via 193.110.157.254 dev ipsec0
    default via 193.110.157.254 dev eth0
    ```

- **Old Style Route Command Output:**
  ```sh
  # route -n
  Kernel IP routing table
  Destination     Gateway         Genmask         Flags Metric Ref Use Iface
  193.110.157.0   0.0.0.0         255.255.255.0   U     0      0        0 eth0
  193.110.157.0   0.0.0.0         255.255.255.0   U     0      0        0 ipsec0
  127.0.0.0       0.0.0.0         255.0.0.0       U     0      0        0 lo
  0.0.0.0         193.110.157.254 128.0.0.0       UG    0      0        0 ipsec0
  128.0.0.0       193.110.157.254 128.0.0.0       UG    0      0        0 ipsec0
  0.0.0.0         193.110.157.254 0.0.0.0         UG    0      0        0 eth0
  ```

- **Note:**
  - To enable OE within the same subnet, repeat the routing hack.