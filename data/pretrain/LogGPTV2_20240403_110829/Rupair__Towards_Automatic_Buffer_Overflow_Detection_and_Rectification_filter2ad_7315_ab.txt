1
2
3
4
5
6
7
8
9
10
11
12
13
14
fn f(int i, int j, int k, int m) {
let mut buf1 = Vec::new();// S → S
buf1[i] = 10;
let buf2 = Vec::with_capacity(j * 4);// S → U
let buf4: Vec;
unsafe{
let p = buf2.as_ptr();
*(p + j - 1) = 20;
let mut buf3 = Vec::new();// U → U
buf3[k] = 30;
buf4 = Vec::with_capacity(k + m);// U → S
}
buf4[k + m] = 1;
}
Figure 3: Buffer Overflow Patterns. (The 4 patterns are writ-
ten as S → S, S → U , U → U and U → S, respectively.)
buffer buf1 is both allocated and accessed in safe code, thus belongs
814ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Baojian Hua, Wanrong Ouyang, Chengman Jiang, Qiliang Fan, and Zhizhong Pan
to the pattern S → S. Similarly, the buffer buf2, buf3 and buf4
belongs to the patterns S → U , U → U , and U → S, respectively.
Buffer allocation arguments should also be checked for integer
overflows [78], which may further trigger buffer overflows (i.e., the
IO2BO bug pattern). For instance, the arguments of allocation at
line 4 in Figure 3 may lead to integer overflows (it may allocate a
vector of length 0), so buffer access at line 8 may lead to overflows,
despite that the index p+j-1 is always in bound.
Finally, it should be noted that as Rust compiler allocates all sorts
of buffers in a single process address space, so any overflows in the
unsafe block will corrupt the whole process memory [51].
2.2 Automated Rectification
We argue that the aforementioned buffer overflow pattern can be
rectified through systematic program analysis and transformation.
In this section, we propose an approach to automatically rectify
insecure Rust programs, by generating secure and correct Rust
target programs.
Bug detection. Among all the 4 patterns, both S → S and U → S
patterns are safe, as Rust always enforces range checking for buffer
access in safe code. Hence, only patterns S → U and U → U can
trigger buffer overflows. Furthermore, as the pattern U → U is very
similar to bug patterns in C/C++ and has been thoroughly studied
[67, 78], so the only pattern of interest in this work is the pattern
S → U . To detect this kind of bug pattern, we should design and
implement a data-flow analysis algorithm, starting from all the use
sites of some buffer b in an unsafe block, to calculate b’s definition
sites in safe code (Section 3.3). Consider the program in Figure 3,
the buffer buf2 used at line 8 is defined at line 5. It should be noted
that a full-fledged data-flow algorithm is required here, because
the Rust programs being analyzed may contain complicated data
dependency generally. For instance, the buffer buf2 can be casted
into a pointer p to access memory through it (line 7 and 8), here a
standard alias data-flow analysis [17] is necessary.
Program rectification. After detecting bug candidates, Rupair
applies the following techniques to rectify these bugs and generate
secure and correct Rust programs. First, Rupair leverages SMT
solver to valid the bugs, by generating counterexamples (Section
3.4). Second, data guards are generated and inserted for each buffer
access in unsafe code blocks. Third, buffer allocation arguments
are checked and transformed in a semantic-equivalent manner, to
guarantee functionalities irrelevant to the insecure case are not
affected (3.5); finally, Rupair rectifies the bugs and validates the
rectified programs (Section 3.6 and 3.7).
3 SYSTEM DESIGN AND IMPLEMENTATION
In this section, we present the design and implementation of Rupair
in detail. Designed to automatically fix insecure cases with typical
insecure code patterns in Rust programs, Rupair takes as input the
Rust source code and output secure Rust code without any buffer
overflow vulnerabilities.
3.1 The Architecture
The architecture of the Rupair software prototype is given in Fig-
ure 4. Rupair consists of several key modules. The frontend takes
as input the Rust source programs, and builds both abstract syn-
tax tree (AST) and MIR intermediate representations. Next, the
analyzer module scans the two intermediate representations, by
using a data-flow analysis algorithm, to identify buffer overflow
candidates. The solver module validates real buffer overflows from
these candidates, by generating concrete counterexamples, and
triggering overflows. The rectification module rectifies the buggy
programs by a semantic-preserving program transformation. Next,
the validation module validates the functionality equivalence be-
tween the rectified programs with the original ones, and generates
the rectified programs, along with rectification reports to the Rust
developers.
In the following sections, we present design and implementation
details for each module.
3.2 The Frontend
The frontend of Rupair takes as input the Rust source files, and
builds two intermediate representations: the Rust abstract syntax
trees (AST) and the MIR. The AST is a tree representation of the
source programs, especially, AST contains necessary source type
informations for analysis in latter phases. The MIR is a control-flow
graph (CFG) representation, in which each block is a sequence of
statements. Blocks are connected by directed edges, which repre-
sents possible control transfers.
Rupair performs several rounds of static analysis on both AST
and MIR in advance, to collect important information: 1) unsafe
blocks, only functions that contain unsafe blocks will be further
processed by latter modules; 2) variables’ types, with a focus on
variables having vector types; 3) source maps, mapping between a
node in AST and the corresponding node in MIR. All these informa-
tion will be used by the following phases, especially the data-flow
analysis algorithm.
The design of Rupair differs from previous systems dramatically,
in that it leveraged two IRs for Rust programs. The key reason for
such a design will be discussed in Section 5.
3.3 Analysis Algorithm
Identifying precisely all buffer overflows statically is an undecidable
problem, thus fixing all potential buffer overflows is intractable. We
thus design an analysis algorithm, which is conservative in theory,
but we have found it to be effective and efficient in practice. The
key idea for this analysis algorithm is to: 1) identify all uses u of
buffers in any unsafe code block B, which can be performed by a
static program analysis, and 2) use a backward data-flow analysis to
locate the definition d for each variable use u, whenever d satisfies
some predefined buffer overflow detection criteria Q.
Algorithm 1 takes as input both a Rust program P and a set of
overflow patterns Q, and calculates and returns a set of buffer over-
flows candidates, in R. First, this algorithm builds an abstract syntax
tree A and a MIR M as aforementioned in Section 3.2. The algorithm
visits each unsafe block u in the tree A, and calculates a set of live
(thus used) variables in the block u by function liveVars(). The
liveVars() function implements the standard liveness analysis
analysis algorithm as found in any compiler literature, thus deserve
no further explanation. Next, this algorithm iterates each live vari-
able v of any specific buffer type Vec for some generic type
815Rupair: Towards Automatic Buffer Overflow Detection and Rectification for Rust
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 4: Rupair Architecture
Algorithm 1 : Calculating buffer overflow candidates
Input: P: The Rust program; Q: patterns used by heuristics
Output: A set of overflow candidates R
1: Cal-overflows(P, Q)
2: R = ϕ
3: A, M = buildAstMir(P)
4: for each unsafe block u ∈ A do
vs = liveVars(M, u)
5:
for each variable v ∈ vs do
6:
if type(v) == Vec then
7:
8:
9:
10:
11:
12: return R
ds = defSites(M, v)
for each d : v = alloc(e) ∈ ds do
if d ∈ safe block of A and e ∈ Q then
R ∪ = d
parameter T, and calculates variable v’s possible definition sites ds.
The calculation for ds implements a variant of the standard reach-
ing definition data-flow algorithm from program analysis. Next,
the algorithm examines each definition site d for the variable v,
and insert d into the buffer overflow candidates set R, when d is
declared in the safe code block and belongs to the overflow detec-
tion patterns in Q. Finally, the algorithm returns the calculated set
R containing all buffer overflow candidates.
Three important details in this algorithm deserve further expla-
nations. First, this algorithm, like any static analysis algorithms,
is conservative due to the incomplete nature of static analysis for
runtime behaviors. For instance, consider the following Rust code
fragment:
fn f(int x){
let mut buff = Vec::with_capacity(100);
unsafe{
if(x>=0)
buff[100] = 2;
else buff[20] = 3; } }
the variable buff lives at both line 5 and 6, thus the algorithm
identifies the buffer allocated at line 2 as a candidate. However, as
the execution of the if statement at line 4 is control-dependent on
1
2
3
4
5
6
the variable x, the buffer overflow will only be triggered for input
variable x ≥ 0 (the notorious off-by-one bug). In despite of the
conservativeness, we have observed, in our experiment (Section 4),
that this algorithm is effective in practice with low false positives.
Second, this algorithm makes use of a pattern set Q, to specify
possible forms of overflows. The pattern set Q is created in two ways.
First, we systematically studied the Rust language specification [13],
to identify all possible forms of overflows. For instance, the Rust
language does not check overflows for arithmetic operations but
allows wrapping around semantics by default [1], this fact indicates
that all arithmetic operations, such as e1 ⊕ e2 should be added
to the set Q, where both e1 and e2 are expressions and ⊕ is any
binary operators. Similarly, Rust does not check overflows for type
coercions [3], but adopts the C language convention to truncate
larger integers to smaller ones. Second, we systematically studied all
discovered Rust bugs and CVEs [64], and identified buffer overflow-
related bug patterns. Although this heuristic-based approach to
create the pattern set Q is not technically complicated, it’s laborious,
taking 2 persons a month to finish. Furthermore, it should be noted
that the key benefit of parameterizing this heuristics-base algorithm
with the pattern set Q is that new overflow patterns can be added
without changing the algorithm.
Finally, for a Rust function with M variables and N statements,
the runtime complexity of this algorithm is O(M ∗ N). However,
we have observed, during experiments, that this algorithm is very
efficient, for most benchmarks, it runs in nearly linear time.
It should be noted that this algorithm is intra-procedural thus
efficient. Although it’s of no difficulty to scale this algorithm to a
inter-procedural one, by creating a global call graph for the program
being analyzed. However, doing so will slow down the analysis
significantly, and we have found during experiments that this algo-
rithm is effective in processing most programs.
3.4 Counterexample Generation
To identify real overflows from all the overflow candidates reported
by the algorithm, we designed and implemented an automatic over-
flow validation module. The key insight for the design of this mod-
ule is to generate counterexamples, by leveraging Satisfiability
Modulo Theory (SMT) solvers.
RustSource Files  ASTMIRFront-endCandidatesAnalyzerCounterexampleSolverRectificationValidationRectified CodeErrorReport816ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Baojian Hua, Wanrong Ouyang, Chengman Jiang, Qiliang Fan, and Zhizhong Pan
Rupair’s current implementation uses the Z3 solver [27] to gen-
erate counterexamples. The Z3 solver is selected, among many other
solvers such as CVC4 [21], UCLID [42], etc., for several of its key
advantages: 1) Z3 has complete support for linear arithmetic theory,
which is used heavily by Rupair; 2) Z3 supports many convenient
language bindings such as C/C++, Python, OCaml, and Java etc.,
Rupair makes use of its Python binding; 3) we have found that Z3
is efficient enough to process the constraints generated by Rupair.
There are three steps to generate counterexamples using Z3. First,
Rupair generates constraints from Rust program’s intermediate
representations using Python binding; second, Rupair drives Z3 to
process these constraints and generate concrete counterexamples;
finally, Rupair feeds these counterexamples into the verifier module
to justify the correctness by triggering overflows.
To testify the correctness of the counterexamples, Rupair makes
of an instrumentation-based approach, in which Rupair explic-
itly sets variables values of the generated counterexamples and
performs regressions. A promising approach to speed up the over-
flows triggering is program slicing [16, 22, 75] to slice the relevant
program fragments automatically, but we have found the instru-
mentation approach is efficient enough in our experiments, thus
leave the use of slicing a future work.
3.5 Rectification
After real buffer overflows are identified, Rupair rectifies the buggy
programs by semantics-preserving program transformations. Ru-
pair adopts two steps to finish the rectification: argument lifting
and guard insertion.
Argument lifting. For the identified buffer overflow candidate
programs, Rupair first lifts function call arguments by defining a
transformation function L(·) on an expression e: L(e) ⇒ e′:
where the operator ⊕ stands for an arbitrary concrete operator such
as +, −, ∗, /, etc.. Although this transformation looks straightfor-
ward, it’s subtle to implement. First, the transformation function
L(·) is recursive, in that it transforms the sub-expression e1 and
e2 recursively. Second, the transformation function L(·) is type-
preserving, it synthesizes types T1, T2 and T3 for the newly gener-
ated variables x1, x2 and y, respectively. Rupair makes use of the
type information on Rust program ASTs to synthesize these types.
Finally, the transformation function L(·) can be generalized to any
function with n arguments f (e1, . . . , en), in which each argument
ei , 1 ≤ i ≤ n can also be transformed by the equation (1).
Guard insertion. Rupair inserts specific data guards ⊕′ for arbi-
trary operator ⊕. A data guard is sequence of statements performing
certain data validity checks. Rupair builds a secure library to per-
form secure operations using data guards. Rupair uses Rust’s trait
feature to define the secure operations, and the trait SafeLib
trait SafeLib{
fn checked_plus(&self, T y);
fn checked_sub(&self, T y);
L(f (e1 ⊕ e2)) ⇒T1 x1 = L(e1);
T2 x2 = L(e2);
T3 y = x1 ⊕′
x2;
f (y);
(1)
...
fn on_flow(&self);
}
contains not only safe wrapper functions, such as check_plus etc.,
but also overflow handling functions, such as on_flow(). The key
advantage of using a trait with a type parameter T is that this trait
can be used with any data types that may have overflow bugs. With
this secure library, Rupair performs guard insertion following a
simple yet effective template-driven strategy as defined by:
x ⊕′
y = x .checked_ ⊕ (y)
.on_flow(Error :: new(”Overflow for ⊕ ”))?;
(2)
By utilizing such data guards, Rupair checks the corresponding
operations and precludes attacks.
It should be noted that as guard insertion replaces insecure oper-
ations by secure counterparts, and inserts extra security checking
code into the rectified programs, this rectification incurs runtime
overhead. However, experiment results (Section 4) demonstrate
that this overhead is negligible for most test cases.
3.6 Validation
Automated program rectification may have undesirable side effects
to change the programs’ semantics or behaviors. In order to valid
the normal functionalities of the rectified programs and to compare