       DEV |       #Q       #D   Ratio |   BLKmin   BLKavg   BLKmax    Total  
---------- | -------- -------- ------- | -------- -------- -------- --------  
 (  8,  0) |       41       11     3.7 |        8       29      144      328  
Q2I – time it takes to process an I/O prior to it being inserted or merged onto a request queue – Includes split, and remap time  
I2D – time the I/O is “idle” on the request queue  
D2C – time the I/O is “active” in the driver and on the device  
Q2I + I2D + D2C = Q2C  
Q2C: Total processing time of the I/O  
```  
解释：  
```  
D2C: 表征块设备性能的关键指标  
Q2C: 客户发起请求到收到响应的时间  
D2C 平均时间：0.015828304 秒，即15.82毫秒  
Q2C 平均时间：0.015835360 秒，即15.83毫秒  
平均下来，D2C 阶段消耗时间占比 99.9554%  
```  
上述命令其实还会产生一些.dat文件，可以看到iops信息    
```  
#ll *.dat  
-rw-r--r-- 1 root root    6 Nov 21 14:51 8,0_iops_fp.dat  
-rw-r--r-- 1 root root   11 Nov 21 14:51 8,0_mbps_fp.dat  
-rw-r--r-- 1 root root 3006 Nov 21 14:51 sda.d2c_latency_8,0_d2c.dat  
-rw-r--r-- 1 root root    6 Nov 21 14:51 sys_iops_fp.dat  
-rw-r--r-- 1 root root   11 Nov 21 14:51 sys_mbps_fp.dat  
5. btt -q   
#btt -i sda.blktrace.bin -q sda.q2c_latency  
```  
以上文件解释：  
```  
sys_mbps_fs.dat: 本次统计中所有设备吞吐量    
sys_iops_fp.dat: 中是本次统计中所有设备的IOPS    
```  
每个请求的d2c的latency详情:  
```  
sda.d2c_latency_8,0_d2c.dat  
```  
修改blkparse的输出格式：  
```  
[root@localhost2 /data/sandbox]  
#blktrace -d /dev/sda -o - | blkparse -i - -f "%D %2c %8s %5T.%9t %5p %2a %3d\n"  
  8,0    9        1     0.000000000  8863  A   W  
```  
一次IO的生命周期：direct read 附录见测试代码  
```  
[root@localhost /home/ahao.mah/sdc]  
#blktrace -d /dev/sdc  -o - | blkparse -i -  
  8,32   7        1     0.000000000  2923  Q   R 272208 + 2 [direct_io_read_]  
  8,32   7        2     0.000002526  2923  G   R 272208 + 2 [direct_io_read_]  
  8,32   7        3     0.000003142  2923  P   N [direct_io_read_]  
  8,32   7        4     0.000004575  2923  I   R 272208 + 2 [direct_io_read_]  
  8,32   7        5     0.000005402  2923  U   N [direct_io_read_] 1  
  8,32   7        6     0.000006775  2923  D   R 272208 + 2 [direct_io_read_]  
  8,32   7        7     0.000200150 32031  C   R 272208 + 2 [0]  
以上就是一次IO请求的生命周期，从actions看到，分别是QGPIUDC    
Q：先产生一个该位置的IO意向插入到io队列，此时并没有真正的请求  
G：发送一个实际的Io请求给设备  
P（plugging）：插入：即等待即将到来的更多的io请求进入队列，以便系统能进行IO优化，减少执行IO请求时花的时间  
I：将IO请求进行调度，到这一步请求已经完全成型（formed）好了  
U (unplugging)：拔出，设备决定不再等待其他的IO请求并使得系统必须响应当前IO请求，将该IO请求传给设备驱动器。可以看到，在P和U之间会等待IO，然后进行调度。这里会对IO进行一点优化，但是程度很低，因为等待的时间很短，是纳秒级别的  
D：发布刚才送入驱动器的IO请求  
C：结束IO请求，这里会返回一个执行状态：失败或者成功，在进程号处为0表示执行成功，反之则反  
到此一个IO的周期就结束了  
```  
一次IO的生命周期：direct write 附录见测试代码  
```  
[root@localhost /home/ahao.mah/sdc]  
#taskset -c 1 ./direct_io_write_file_one &  
[1] 57376  
write success  
[1]+  Done                    taskset -c 1 ./direct_io_write_file_one  
```  
```  
[root@localhost /home/ahao.mah/blktrace/jiangyi]  
#time /usr/bin/blktrace  -w 100 -d /dev/sdc -o -  | /usr/bin/blkparse -w 100   -i -  
  8,32   1        1     0.000000000 57376  Q  WS 272208 + 2 [direct_io_write]  
  8,32   1        2     0.000005514 57376  G  WS 272208 + 2 [direct_io_write]  
  8,32   1        3     0.000006880 57376  P   N [direct_io_write]  
  8,32   1        4     0.000009793 57376  I  WS 272208 + 2 [direct_io_write]  
  8,32   1        5     0.000011264 57376  U   N [direct_io_write] 1  
  8,32   1        6     0.000013478 57376  D  WS 272208 + 2 [direct_io_write]  
  8,32   0        1     0.000281069     0  C  WS 272208 + 2 [0]  
```  
blktrace -a 参数可以指定监控的动作：  
```  
1.     blktrace /dev/block/mmcblk0p1 -o /data/trace    
命令解析：监控mmcblk0p1块设备，将生成的文件存储在/data目录下，一共生成4个文件，文件以trace开头，分别为  
  trace.blktrace.0    
  trace.blktrace.1   
  trace.blktrace.2  
  trace.blktrace.3  
  分别对应cpu0、cpu1、cpu2、cpu3  
2.     blktrace /dev/block/mmcblk0p1 -D /data/trace    
命令解析：监控mmcblk0p1块设备，在/data目录下建立一个名字为trace的文件夹，trace文件夹下存放的是名字为  
  mmcblk0p1.blktrace.0   
  mmcblk0p1.blktrace.1   
  mmcblk0p1.blktrace.2   
  mmcblk0p1.blktrace.3  
  分别对应cpu0 cpu1 cpu2 cpu3  
3.     blktrace /dev/block/mmcblk0p1 -o /data/trace -w 10    
命令解析：-w 选项表示多长时间之后停止监控(单位：秒）  -w 10 表示10秒之后停止监控  
4.     blktrace /dev/block/mmcblk0p1 -o /data/trace -a WRITE     
命令解析：-a 代表只监控写操作  
选项 -a action 表示要监控的动作，action的动作有：  
READ （读）  
WRITE（写）  
BARRIER  
SYNC  
QUEUE  
REQUEUE  
ISSUE  
COMPLETE  
FS  
PC  
```  
其他工具:blkiomon  
对设备/dev/sda的io监控120秒，每2秒显示一次  
```  
# blktrace /dev/sda -a issue -a complete -w 120 -o - | blkiomon  -I 2 -h -  
[root@localhost2 /data/sandbox/blktrace_test]  
# blktrace /dev/sda -a issue -a complete -w 120 -o - | blkiomon  -I 2 -h -  
time: Tue Nov 21 14:04:48 2017  
device: 8,0  
sizes read (bytes): num 0, min -1, max 0, sum 0, squ 0, avg 0.0, var 0.0  
sizes write (bytes): num 2, min 4096, max 49152, sum 53248, squ 2432696320, avg 26624.0, var 507510784.0  
d2c read (usec): num 0, min -1, max 0, sum 0, squ 0, avg 0.0, var 0.0  
d2c write (usec): num 2, min 8322, max 10708, sum 19030, squ 183916948, avg 9515.0, var 1423249.0  
throughput read (bytes/msec): num 0, min -1, max 0, sum 0, squ 0, avg 0.0, var 0.0  
throughput write (bytes/msec): num 2, min 492, max 4590, sum 5082, squ 21310164, avg 2541.0, var 4198401.0  
sizes histogram (bytes):  
            0:     0         1024:     0         2048:     0         4096:     1  
         8192:     0        16384:     0        32768:     0        65536:     1  
       131072:     0       262144:     0       524288:     0      1048576:     0  
      2097152:     0      4194304:     0      8388608:     0    > 8388608:     0  
d2c histogram (usec):  
            0:     0            8:     0           16:     0           32:     0  
           64:     0          128:     0          256:     0          512:     0  
         1024:     0         2048:     0         4096:     0         8192:     0  
        16384:     2        32768:     0        65536:     0       131072:     0  
       262144:     0       524288:     0      1048576:     0      2097152:     0  
      4194304:     0      8388608:     0     16777216:     0     33554432:     0  
    >33554432:     0  
bidirectional requests: 0  
```  
## 参考  
- https://developer.aliyun.com/article/698568  
- https://blog.csdn.net/RainbowBoy/article/details/80492336  
- https://www.cnblogs.com/chenxinshuo/p/11986858.html  
- [《debian 使用gdb实现rhel / centos pstack功能》](../202310/20231008_03.md)    
- [《PostgreSQL 无法kill(pg_terminate_backend, pg_cancel_backend)的情况分析 - 进程hang strace,pstack》](../201807/20180720_02.md)    
- [《如何查看sshd当前配置 (gcore, gdb 的妙用)》](../201607/20160722_03.md)    
- [《gdb - debug - core dump - How to Analyze a PostgreSQL Crash Dump File》](../202011/20201117_03.md)    
- [《[转载] gdb 调试打印完整字符串》](../201806/20180621_02.md)    
- [《USE GDB debug postgres》](../201206/20120626_03.md)    
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")