.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getdirentries ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _bsd_source || _svid_source
.fi
.sh description
read directory entries from the directory specified by
.i fd
into
.ir buf .
at most
.i nbytes
are read.
reading starts at offset
.ir *basep ,
and
.i *basep
is updated with the new position after reading.
.sh return value
.br getdirentries ()
returns the number of bytes read or zero when at the end of the directory.
if an error occurs, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
see the linux library source code for details.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br getdirentries ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
not in posix.1.
present on the bsds, and a few other systems.
use
.br opendir (3)
and
.br readdir (3)
instead.
.sh see also
.br lseek (2),
.br open (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/csinh.3
.so man3/rpc.3
.so man3/stailq.3
.so man3/tsearch.3
.so man3/casinh.3
.so man3/drand48_r.3
.so man3/gsignal.3
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\"
.\" modified 1993-07-24 by rik faith (PI:EMAIL)
.\" modified 2003-11-15 by aeb
.\"
.th getgrnam 3 2021-03-22 "" "linux programmer's manual"
.sh name
getgrnam, getgrnam_r, getgrgid, getgrgid_r \- get group file entry
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "struct group *getgrnam(const char *" name );
.bi "struct group *getgrgid(gid_t " gid );
.pp
.bi "int getgrnam_r(const char *restrict " name \
", struct group *restrict " grp ,
.bi "               char *restrict " buf ", size_t " buflen ,
.bi "               struct group **restrict " result );
.bi "int getgrgid_r(gid_t " gid ", struct group *restrict " grp ,
.bi "               char *restrict " buf ", size_t " buflen ,
.bi "               struct group **restrict " result );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getgrnam_r (),
.br getgrgid_r ():
.nf
    _posix_c_source
        || /* glibc \fp as follows:
.pp
.in +4n
.ex
struct group {
    char   *gr_name;        /* group name */
    char   *gr_passwd;      /* group password */
    gid_t   gr_gid;         /* group id */
    char  **gr_mem;         /* null\-terminated array of pointers
                               to names of group members */
};
.ee
.in
.pp
for more information about the fields of this structure, see
.br group (5).
.pp
the
.br getgrnam_r ()
and
.br getgrgid_r ()
functions obtain the same information as
.br getgrnam ()
and
.br getgrgid (),
but store the retrieved
.i group
structure
in the space pointed to by
.ir grp .
the string fields pointed to by the members of the
.i group
structure are stored in the buffer
.i buf
of size
.ir buflen .
a pointer to the result (in case of success) or null (in case no entry
was found or an error occurred) is stored in
.ir *result .
.pp
the call
.pp
    sysconf(_sc_getgr_r_size_max)
.pp
returns either \-1, without changing
.ir errno ,
or an initial suggested size for
.ir buf .
(if this size is too small,
the call fails with
.br erange ,
in which case the caller can retry with a larger buffer.)
.sh return value
the
.br getgrnam ()
and
.br getgrgid ()
functions return a pointer to a
.i group
structure, or null if the matching entry
is not found or an error occurs.
if an error occurs,
.i errno
is set to indicate the error.
if one wants to check
.i errno
after the call, it should be set to zero before the call.
.pp
the return value may point to a static area, and may be overwritten
by subsequent calls to
.br getgrent (3),
.br getgrgid (),
or
.br getgrnam ().
(do not pass the returned pointer to
.br free (3).)
.pp
on success,
.br getgrnam_r ()
and
.br getgrgid_r ()
return zero, and set
.ir *result
to
.ir grp .
if no matching group record was found,
these functions return 0 and store null in
.ir *result .
in case of error, an error number is returned, and null is stored in
.ir *result .
.sh errors
.tp
.br 0 " or " enoent " or " esrch " or " ebadf " or " eperm " or ..."
the given
.i name
or
.i gid
was not found.
.tp
.b eintr
a signal was caught; see
.br signal (7).
.tp
.b eio
i/o error.
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached.
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.b enomem
.\" not in posix
insufficient memory to allocate
.i group
structure.
.\" to allocate the group structure, or to allocate buffers
.tp
.b erange
insufficient buffer space supplied.
.sh files
.tp
.i /etc/group
local group database file
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br getgrnam ()
t}	thread safety	t{
mt-unsafe race:grnam locale
t}
t{
.br getgrgid ()
t}	thread safety	t{
mt-unsafe race:grgid locale
t}
t{
.br getgrnam_r (),
.br getgrgid_r ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, svr4, 4.3bsd.
.sh notes
the formulation given above under "return value" is from posix.1.
.\" posix.1-2001, posix.1-2008
it does not call "not found" an error, hence does not specify what value
.i errno
might have in this situation.
but that makes it impossible to recognize
errors.
one might argue that according to posix
.i errno
should be left unchanged if an entry is not found.
experiments on various
unix-like systems show that lots of different values occur in this
situation: 0, enoent, ebadf, esrch, ewouldblock, eperm, and probably others.
.\" more precisely:
.\" aix 5.1 - gives esrch
.\" osf1 4.0g - gives ewouldblock
.\" libc, glibc up to version 2.6, irix 6.5 - give enoent
.\" glibc since version 2.7 - give 0
.\" freebsd 4.8, openbsd 3.2, netbsd 1.6 - give eperm
.\" sunos 5.8 - gives ebadf
.\" tru64 5.1b, hp-ux-11i, sunos 5.7 - give 0
.sh see also
.br endgrent (3),
.br fgetgrent (3),
.br getgrent (3),
.br getpwnam (3),
.br setgrent (3),
.br group (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/sem_wait.3
.so man3/getutent.3
.so man3/remainder.3
.\" copyright (c) 2014 red hat, inc. all rights reserved.
.\" written by david howells (PI:EMAIL)
.\"
.\" %%%license_start(gplv2+_sw_onepara)
.\" this program is free software; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license
.\" as published by the free software foundation; either version
.\" 2 of the license, or (at your option) any later version.
.\" %%%license_end
.\"
.th thread-keyring 7 2020-08-13 linux "linux programmer's manual"
.sh name
thread-keyring \- per-thread keyring
.sh description
the thread keyring is a keyring used to anchor keys on behalf of a process.
it is created only when a thread requests it.
the thread keyring has the name (description)
.ir _tid .
.pp
a special serial number value,
.br key_spec_thread_keyring ,
is defined that can be used in lieu of the actual serial number of
the calling thread's thread keyring.
.pp
from the
.br keyctl (1)
utility, '\fb@t\fp' can be used instead of a numeric key id in
much the same way, but as
.br keyctl (1)
is a program run after forking, this is of no utility.
.pp
thread keyrings are not inherited across
.br clone (2)
and
.br fork (2)
and are cleared by
.br execve (2).
a thread keyring is destroyed when the thread that refers to it terminates.
.pp
initially, a thread does not have a thread keyring.
if a thread doesn't have a thread keyring when it is accessed,
then it will be created if it is to be modified;
otherwise the operation fails with the error
.br enokey .
.sh see also
.ad l
.nh
.br keyctl (1),
.br keyctl (3),
.br keyrings (7),
.br persistent\-keyring (7),
.br process\-keyring (7),
.br session\-keyring (7),
.br user\-keyring (7),
.br user\-session\-keyring (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/getrlimit.2
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sat jul 24 21:46:57 1993 by rik faith (PI:EMAIL)
.\" modified 961109, 031115, aeb
.\"
.th getmntent 3  2021-03-22 "" "linux programmer's manual"
.sh name
getmntent, setmntent, addmntent, endmntent, hasmntopt,
getmntent_r \- get filesystem descriptor file entry
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "file *setmntent(const char *" filename ", const char *" type );
.pp
.bi "struct mntent *getmntent(file *" stream );
.pp
.bi "int addmntent(file *restrict " stream ,
.bi "              const struct mntent *restrict " mnt );
.pp
.bi "int endmntent(file *" streamp );
.pp
.bi "char *hasmntopt(const struct mntent *" mnt ", const char *" opt );
.pp
/* gnu extension */
.b #include 
.pp
.bi "struct mntent *getmntent_r(file *restrict " streamp ,
.bi "              struct mntent *restrict " mntbuf ,
.bi "              char *restrict " buf ", int " buflen );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getmntent_r ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _bsd_source || _svid_source
.fi
.sh description
these routines are used to access the filesystem description file
.i /etc/fstab
and the mounted filesystem description file
.ir /etc/mtab .
.pp
the
.br setmntent ()
function opens the filesystem description file
.i filename
and returns a file pointer which can be used by
.br getmntent ().
the argument
.i type
is the type of access
required and can take the same values as the
.i mode
argument of
.br fopen (3).
the returned stream should be closed using
.br endmntent ()
rather than
.br fclose (3).
.pp
the
.br getmntent ()
function reads the next line of the filesystem
description file from
.i stream
and returns a pointer to a structure
containing the broken out fields from a line in the file.
the pointer
points to a static area of memory which is overwritten by subsequent
calls to
.br getmntent ().
.pp
the
.br addmntent ()
function adds the
.i mntent
structure
.i mnt
to
the end of the open
.ir stream .
.pp
the
.br endmntent ()
function closes the