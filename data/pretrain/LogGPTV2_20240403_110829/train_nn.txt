# getdirentries()

## Feature Test Macro Requirements for glibc
(See `feature_test_macros(7)`):
- Since glibc 2.19: `_default_source`
- For glibc 2.19 and earlier: `_bsd_source || _svid_source`

## Description
The `getdirentries()` function reads directory entries from the directory specified by the file descriptor `fd` into the buffer `buf`. The function reads at most `nbytes` bytes, starting at the offset pointed to by `basep`. After reading, `*basep` is updated with the new position.

## Return Value
- On success, `getdirentries()` returns the number of bytes read.
- If the end of the directory is reached, it returns 0.
- If an error occurs, -1 is returned, and `errno` is set to indicate the error.

## Errors
For detailed information on possible errors, refer to the Linux library source code.

## Attributes
For an explanation of the terms used in this section, see `attributes(7)`.

| Interface          | Attribute   | Value   |
|--------------------|-------------|---------|
| `getdirentries()`   | Thread Safety | mt-safe |

## Conforming to
This function is not part of POSIX.1. It is present on the BSDs and a few other systems. Instead, consider using `opendir(3)` and `readdir(3)`.

## See Also
- `lseek(2)`
- `open(2)`

## Colophon
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.

---

# getgrnam(), getgrnam_r(), getgrgid(), getgrgid_r()

## Name
- `getgrnam`, `getgrnam_r`, `getgrgid`, `getgrgid_r` — Get group file entry

## Synopsis
```c
#include <sys/types.h>
#include <grp.h>

struct group *getgrnam(const char *name);
struct group *getgrgid(gid_t gid);

int getgrnam_r(const char *restrict name, struct group *restrict grp,
               char *restrict buf, size_t buflen, struct group **restrict result);

int getgrgid_r(gid_t gid, struct group *restrict grp,
               char *restrict buf, size_t buflen, struct group **restrict result);
```

## Feature Test Macro Requirements for glibc
(See `feature_test_macros(7)`):
- `getgrnam_r()`, `getgrgid_r()`: `_POSIX_C_SOURCE`

## Description
The `group` structure is defined as follows:
```c
struct group {
    char   *gr_name;        // Group name
    char   *gr_passwd;      // Group password
    gid_t   gr_gid;         // Group ID
    char  **gr_mem;         // Null-terminated array of pointers to names of group members
};
```
For more information about the fields of this structure, see `group(5)`.

The `getgrnam_r()` and `getgrgid_r()` functions obtain the same information as `getgrnam()` and `getgrgid()`, but store the retrieved `group` structure in the space pointed to by `grp`. The string fields pointed to by the members of the `group` structure are stored in the buffer `buf` of size `buflen`. A pointer to the result (in case of success) or `NULL` (in case no entry was found or an error occurred) is stored in `*result`.

To determine an initial suggested size for `buf`, use:
```c
sysconf(_SC_GETGR_R_SIZE_MAX)
```
If this size is too small, the call fails with `ERANGE`, and the caller can retry with a larger buffer.

## Return Value
- `getgrnam()` and `getgrgid()` return a pointer to a `group` structure, or `NULL` if the matching entry is not found or an error occurs. If an error occurs, `errno` is set to indicate the error. Set `errno` to zero before the call if you want to check it after the call.
- The return value may point to a static area and may be overwritten by subsequent calls to `getgrent(3)`, `getgrgid()`, or `getgrnam()`. Do not pass the returned pointer to `free(3)`.
- On success, `getgrnam_r()` and `getgrgid_r()` return zero and set `*result` to `grp`. If no matching group record was found, these functions return 0 and store `NULL` in `*result`. In case of an error, an error number is returned, and `NULL` is stored in `*result`.

## Errors
- `ENOENT`, `ESRCH`, `EBADF`, `EPERM`, etc.: The given `name` or `gid` was not found.
- `EINTR`: A signal was caught; see `signal(7)`.
- `EIO`: I/O error.
- `EMFILE`: The per-process limit on the number of open file descriptors has been reached.
- `ENFILE`: The system-wide limit on the total number of open files has been reached.
- `ENOMEM`: Insufficient memory to allocate the `group` structure.
- `ERANGE`: Insufficient buffer space supplied.

## Files
- `/etc/group`: Local group database file

## Attributes
For an explanation of the terms used in this section, see `attributes(7)`.

| Interface          | Attribute   | Value   |
|--------------------|-------------|---------|
| `getgrnam()`        | Thread Safety | mt-unsafe race:grnam locale |
| `getgrgid()`        | Thread Safety | mt-unsafe race:grgid locale |
| `getgrnam_r()`, `getgrgid_r()` | Thread Safety | mt-safe locale |

## Conforming to
- POSIX.1-2001, POSIX.1-2008, SVR4, 4.3BSD

## Notes
The formulation given above under "Return Value" is from POSIX.1. It does not call "not found" an error, hence does not specify what value `errno` might have in this situation. Experiments on various Unix-like systems show that different values occur in this situation, such as 0, `ENOENT`, `EBADF`, `ESRCH`, `EWOULDBLOCK`, `EPERM`, and others.

## See Also
- `endgrent(3)`
- `fgetgrent(3)`
- `getgrent(3)`
- `getpwnam(3)`
- `setgrent(3)`
- `group(5)`

## Colophon
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.

---

# thread-keyring

## Name
- `thread-keyring` — Per-thread keyring

## Description
The thread keyring is a keyring used to anchor keys on behalf of a process. It is created only when a thread requests it. The thread keyring has the name (description) `_tid`.

A special serial number value, `key_spec_thread_keyring`, is defined that can be used in lieu of the actual serial number of the calling thread's thread keyring.

From the `keyctl(1)` utility, `@t` can be used instead of a numeric key ID, but this is of no utility as `keyctl(1)` is a program run after forking.

Thread keyrings are not inherited across `clone(2)` and `fork(2)` and are cleared by `execve(2)`. A thread keyring is destroyed when the thread that refers to it terminates.

Initially, a thread does not have a thread keyring. If a thread doesn't have a thread keyring when it is accessed, then it will be created if it is to be modified; otherwise, the operation fails with the error `ENOKEY`.

## See Also
- `keyctl(1)`
- `keyctl(3)`
- `keyrings(7)`
- `persistent-keyring(7)`
- `process-keyring(7)`
- `session-keyring(7)`
- `user-keyring(7)`
- `user-session-keyring(7)`

## Colophon
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.

---

# getmntent(), setmntent(), addmntent(), endmntent(), hasmntopt(), getmntent_r()

## Name
- `getmntent`, `setmntent`, `addmntent`, `endmntent`, `hasmntopt`, `getmntent_r` — Get filesystem descriptor file entry

## Synopsis
```c
#include <stdio.h>
#include <mntent.h>

FILE *setmntent(const char *filename, const char *type);

struct mntent *getmntent(FILE *stream);

int addmntent(FILE *restrict stream, const struct mntent *restrict mnt);

int endmntent(FILE *streamp);

char *hasmntopt(const struct mntent *mnt, const char *opt);

// GNU extension
#include <mntent.h>

struct mntent *getmntent_r(FILE *restrict streamp, struct mntent *restrict mntbuf,
                           char *restrict buf, int buflen);
```

## Feature Test Macro Requirements for glibc
(See `feature_test_macros(7)`):
- `getmntent_r()`: 
  - Since glibc 2.19: `_DEFAULT_SOURCE`
  - For glibc 2.19 and earlier: `_BSD_SOURCE || _SVID_SOURCE`

## Description
These routines are used to access the filesystem description file `/etc/fstab` and the mounted filesystem description file `/etc/mtab`.

- `setmntent()` opens the filesystem description file `filename` and returns a file pointer which can be used by `getmntent()`. The argument `type` is the type of access required and can take the same values as the `mode` argument of `fopen(3)`. The returned stream should be closed using `endmntent()` rather than `fclose(3)`.
- `getmntent()` reads the next line of the filesystem description file from `stream` and returns a pointer to a structure containing the broken-out fields from a line in the file. The pointer points to a static area of memory which is overwritten by subsequent calls to `getmntent()`.
- `addmntent()` adds the `mntent` structure `mnt` to the end of the open `stream`.
- `endmntent()` closes the stream opened by `setmntent()`.

## See Also
- `getrlimit(2)`

## Colophon
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.