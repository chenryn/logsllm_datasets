title:On the Accuracy of Password Strength Meters
author:Maximilian Golla and
Markus D&quot;urmuth
On the Accuracy of Password Strength Meters
Maximilian Golla
Ruhr University Bochum
Bochum, Germany
PI:EMAIL
Markus Dürmuth
Ruhr University Bochum
Bochum, Germany
PI:EMAIL
ABSTRACT
Password strength meters are an important tool to help users choose
secure passwords. Strength meters can only then provide reasonable
guidance when they are accurate, i. e., their score correctly reflect
password strength. A strength meter with low accuracy may do
more harm than good and guide the user to choose passwords with
a high score but low actual security. While a substantial number of
different strength meters is proposed in the literature and deployed
in practice, we are lacking a clear picture of which strength meters
provide high accuracy, and thus are most helpful for guiding users.
Furthermore, we lack a clear understanding of how to compare
accuracies of strength meters.
In this work, (i) we propose a set of properties that a strength
meter needs to fulfill to be considered to have high accuracy, (ii) we
use these properties to select a suitable measure that can deter-
mine the accuracy of strength meters, and (iii) we use the selected
measure to compare a wide range of strength meters proposed in
the academic literature, provided by password managers, operating
systems, and those used on websites. We expect our work to be
helpful in the selection of good password strength meters by service
operators, and to aid the further development of improved strength
meters.
CCS CONCEPTS
• Security and privacy → Authentication; Usability in security
and privacy; Web application security;
KEYWORDS
Strength Meter; Password; User Authentication
ACM Reference Format:
Maximilian Golla and Markus Dürmuth. 2018. On the Accuracy of Password
Strength Meters. In 2018 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM,
New York, NY, USA, 16 pages. https://doi.org/10.1145/3243734.3243769
1 INTRODUCTION
Password-based authentication is still in widespread use, specifi-
cally for online authentication on the Internet and for hard-disk
encryption. Passwords are easy to understand for laypersons, easy
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243769
to implement for the operator, don’t require additional hardware,
and are supported by a broad ecosystem such as password man-
agers. In all likelihood, password-based authentication will stay for
the foreseeable future.
Password strength meters (PSMs) are designed to help with one
of the central problems of passwords, namely weak user-chosen
passwords. From leaked password lists we learn that up to 20 %
of passwords are covered by a list of only 5 000 common pass-
words [63]. A PSM (also called strength meter, password checker,
or similar) displays an estimation of the strength of a password
when chosen by the user, and either helps or forces the user to pick
passwords that are strong enough to provide an acceptable level of
security.
The accuracy with which a PSM measures the actual strength
of passwords is crucial; as people are known to be influenced by
PSMs [61] (or even forced to comply), an inaccurate PSM can do
more harm than good. If weak passwords are rated strong users
might end up choosing this password, actually harming security;
similarly, if strong passwords are rated weak the meter drives
away people from those strong passwords. Traditionally, ad-hoc
approaches such as counts of lower- and uppercase characters, dig-
its, and symbols (LUDS) have been used to measure the strength
of passwords. Despite being well-known that these do not accu-
rately capture password strength [68], they are still used in practice.
More recently, more sound constructions for PSMs based on pre-
cise models capturing user choice have been proposed, e. g., based
on Markov models [13], based on probabilistic context-free gram-
mars (PCFGs) [34, 65], neural networks [46, 59], and others [71].
Surprisingly, very little work has been performed on a fair com-
parison of these different proposals, and it remains unclear which
password meter is best suited for the task of estimating password
strength. Even worse, we lack consensus on how to determine the
accuracy of strength meters, with different techniques used ranging
from Spearman and Kendall correlation to ad-hoc measures.
In this work, we propose a sound methodology for measuring
the accuracy of PSMs, based on a clear set of requirements and
careful selection of a metric, and we will use this metric to compare
a variety of different meters. In more detail, our contributions are:
(i) We discuss properties an accurate strength meter needs to
fulfill, and create a number of test cases from these requirements.
(ii) We report tests of 19 candidate measures (and have tested
several more) from a wide range of types and select good metrics
for the accuracy of strength meters.
(iii) We address the challenge of estimating the accuracy from
limited datasets and show that meters can be reasonably approxi-
mated with a small number of random samples.
(iv) We provide an extensive overview of the current state of
the art of strength meters.
(v) We use the derived measures and provide a comparison of a
broad selection of 45 password meters in 81 variations, ranging from
academic proposals over meters deployed in password managers
and operating systems to meters in practical use on websites.
More important than the results of this work, are the methods we
developed. They provide means to select suitable similarity metrics
that match the requirements for specific use cases. We hope that
it will foster the future development of strength meters and will
simplify the selection process for service operators.
2 RELATED WORK
In the following, we review some material related to password
strength including password choice, password guessability, and
metrics that were proposed for measuring strength.
2.1 Password Choice
Jakobsson and Dhiman [37] found that users produce passwords
using only a small set of rules and components such as dictionary
words, replacement strategies, and misspellings. Veras et al. [64] ex-
plored the semantics of passwords. They found male/female names
and concepts relating to love, profanity, animals, food, and money.
Recently, Ur et al. [60] investigated the relationship between users’
perceptions of the strength of specific passwords and their actual
strength. They report serious misconceptions on the consequences
of constructing passwords by using common phrases and including
digits and keyboard patterns. A possible countermeasure to prevent
users from choosing easy to guess passwords are so-called pass-
word composition policies (e. g., requiring the password to contain
a digit or symbol). Komanduri et al. [42] analyzed the effect of such
policies by investigating their impact on password strength, user
behavior, and user sentiment. Based on their findings, they pro-
duced recommendations for password-composition policies that
result in stronger passwords without burdening users too much. In
2014, Florêncio et al. [24] highlighted the importance to limit the
number of online guesses that can be made by rate-limiting and
blacklisting the most common passwords like “123456”. Recently,
Habib et al. [33] analyzed how users react to password creation
attempts failing because of blacklists. They conclude that blacklist
checks need to go beyond exact comparisons and also verify for
any form of reuse of blacklisted passwords. Furthermore, they rec-
ommend providing textual feedback to help users understand reuse
and simple modifications of blacklisted password attempts.
2.2 Password Guessing
Guessing passwords is in many ways related to password strength.
Assuming an attacker cannot just invert a password hash, the opti-
mal strategy to test passwords is in decreasing order of likelihood,
i. e., most frequent passwords first. There are different proposals to
enumerate passwords with decreasing likelihood, in other words,
with increasing strength. The most relevant for GPU-based pass-
word cracking use large dictionaries and ad-hoc mangling rules
to generate password candidates. Narayanan and Shmatikov [48]
proposed Markov-models to overcome some of the problems of
dictionary-based attacks. Dürmuth et al. [21] improved the ap-
proach by generating password candidates according to their oc-
currence probabilities, i. e., by outputting the most likely passwords
first. Weir et al. [70] suggested a method exploiting structural pat-
terns from a password leak using probabilistic context-free gram-
mars (PCFGs). Veras et al. [64] extended the approach by building
a semantically meaningful PCFG-based password guesser. An em-
pirical study on the effectiveness of different attacks was done by
Dell’Amico et al. [19]. Another study targeting probabilistic pass-
word modeling approaches was done Ma et al. [44]. Recently, Ur
et al. [62] did a large scale comparison and found running a single
guessing algorithm, often yields a very poor estimate of password
strength. In 2016, Melicher et al. [46] proposed using recurrent
neural networks (RNNs) for probabilistic password modeling.
2.3 Password Strength
Trying to estimate password strength as a measure to defend against
guessing attacks has a long history. In 1979, Morris and Thomp-
son [47] did password checking by attempting to crack hashed
passwords. The ones successfully cracked were marked as weak,
and the users were notified. In the following, one started to check
the strength of a password before it is accepted by a system via pro-
active password checkers or password strength meters, using certain
rules-sets that try to exclude weak passwords [7, 41, 56]. Schechter
et al. [53] classified passwords as weak by counting the number
of times a certain password is present in the password database.
Bonneau [8] proposed α-guesswork as a proper metric for esti-
mating the guessing entropy of a fraction α of accounts. Kelley
et al. [40] proposed a guess-number calculator to determine if and
when a given password-guessing algorithm, would guess a specific
password. Dell’Amico and Filippone [18] proposed a method to
estimate the number of guesses required to find a password.
Many of the password strength meters in the current literature
are based on the aforementioned password guessing approaches:
using neural networks by Melicher et al. [46] and Ur et al. [59], us-
ing PCFGs by Houshmand and Aggarwal [34] and Wang et al. [65],
and using Markov models by Castelluccia et al. [13]. Furthermore,
there is a meter using a set of advanced heuristics by Wheeler [71],
the official NIST entropy estimation [11], and others [22, 32, 61].
We provided a description of the meters in Section 6.3. Ur et al. [61]
found that strength meters, depending on the visual feedback, led
users to create longer passwords or caused them to place less im-
portance on satisfying the meter. Egelman et al. [22] studied the
impact of password strength meters on the password selection pro-
cess and found that meters result in stronger passwords when users
are forced to change existing passwords on “important” accounts.
de Carné de Carnavalet and Mannan [16] conducted an analysis
of deployed strength meters in 2014. They found evidence that the
commonly used meters are highly inconsistent and fail to provide
coherent feedback.
3 PASSWORD STRENGTH METERS
In this section, we discuss password strength meters and how to
measure their accuracy.
3.1 Approximating Strength
“Weak” passwords such as passw0rd or abc123 are not insecure
per se (e. g., based on some “magical” property they fulfill). They
are insecure as they are chosen commonly by humans, and thus
an adversary trying to guess passwords will guess those common
passwords early in an attack. (Similar observations have been made
recently by Wang et al. [65].)
An ideal strength meter, thus, assigns each password its likeli-
hood, e. g., approximated by the relative frequency from a large
enough password corpus. However, this straightforward idea is
hard to use in practice: The relative frequencies can in principle be
accurately approximated for “relatively likely” passwords (cf. [8]),
e. g., those that are particularly relevant for online guessing attacks.
Estimating frequencies for less likely passwords, relevant for offline
guessing attacks, is next to impossible due to the amount of data
required. Therefore, practical strength meters should aim at approx-
imating the true strength using compactly representable functions.
The traditional LUDS meter allows for a very compact represen-
tation (of a few bytes), at the cost of limited accuracy [68], while
other approaches based on Markov models [13] or PCFGs [65, 69]
have been demonstrated to be more accurate, at the expense of
increased storage size.
For the remainder of this work we assume a PSM is a mech-
anism f that takes as input a password, i. e., a string of charac-
ters Σn over an alphabet Σ, and outputs a score or strength value:
f : Σ∗ → R. We assume the score being a real-valued number.
Some meters aim at providing an estimate for the probability of a
password (e. g., [13, 34, 65]), i. e., values are in the interval [0, 1];
Others aim at estimating the guess number (e. g., [46, 59, 71]), i. e.,
are integer-valued; Most meters deployed at websites output a tex-
tual description of the password strength, e. g., [Too short, Weak,
Fair, Good, Strong] for Google’s PSM, in this case we convert
these textual descriptions to natural numbers between 1 and the
number of classes.
PSMs can be either informative when they are used merely to in-
form the user about the strength of the password (nudging the user
towards more secure choices), or enforcing when passwords that
are considered weak are not accepted by the system. Most deployed
systems we analyzed, fall actually in the middle, enforcing a certain
minimal strength, and informing (and nudging) the user towards
more secure passwords beyond those minimal requirements.
3.2 Measuring Accuracy
Accuracy is one of the central factors of PSMs, and several PSMs
have been proposed over the past few years. However, little work
was done towards a fair comparison of different meters, and even
on the question what constitutes a fair comparison, there is no
agreement.
The preferred method to measure the accuracy of a strength me-
ter is by comparing it to an ideal reference, measuring the similarity
between the reference and the meter output. This idea is based
on the intuition that weak passwords are those that are common
and have been used before [13, 65, 71]. However, the techniques
for comparing reference and tested meters in previous work were
ad-hoc and ranged from measures counting overestimation errors
to rank correlation metrics. In the following, we will systematically
study which measures are most suited for performing this com-
parison. Specifically, we will show that previously used similarity
measures have significant shortcomings limiting their validity and
usefulness.
Before discussing specific similarity measures, it is instructive to
consider properties that these measures should fulfill. To this goal,
we specify which differences the meter and the reference should
yield high and low similarity. There is no absolute truth in which
requirements are desirable or not, and for specific applications,
there may be additional requirements that are desired. We provide
a list of requirements based on extensive experience with passwords
and PSMs, and believe it captures requirements suitable for common
online use.
By explicitly stating the desired requirements the selection pro-
cess becomes much more transparent, and we will see that most
previously used similarity measures fail even to fulfill some funda-
mental requirements, highlighting the importance of a systematic
treatment. (Specific test cases derived from these abstract require-
ments are provided in the following section.)
(4) Sensitivity to Large Errors: While small differences don’t have
a significant effect on the usefulness of a strength meter, large
deviations, in particular, overestimates, can harm. A good measure
needs to be sensitive to large variations in strength even for a small
set of passwords.
(5) Approximation Precision: A similarity score is easier to com-
pute and thus more useful if it doesn’t need full knowledge of the
meter. Specifically, strength meters deployed on websites put limits
on the number of samples one can handle, either by the slowness of
the process or more specific restrictions, like the number of allowed
queries. Thus, a good measure should be easy to approximate from
a limited number of samples.
(1) Tolerance to Monotonic Transformations: The output score
given by strength meters is often not directly comparable. Their
score can be based on the number of guessing attempts, different
forms of entropy, on arbitrary scales like [Weak, Fair, Strong]
vs. [Terrible, Weak, Good, Excellent, Fantastic], and other
home-brewed measures of strength. Assuming that the underlying
sorting of passwords is identical, these differences can be modeled
as monotone functions. A good similarity measure should tolerate
such monotone transformation and assign high similarity to such
transformed strength estimations.
(2) Tolerance to Quantization: A particular case of monotone
transformations is quantization, e. g., strength meters that divide
the reported values into a small number of bins, often three to five.
A good similarity measure should tolerate such quantization. Note,
with a very low number of bins, e. g., 2 bins [reject, accept],
the comparison becomes less meaningful, and scores will typically
be low, even for otherwise reasonable measures. In the case of an
enforcing PSM, the strength policy becomes particularly interesting.
In this case, all passwords that are not accepted effectively end up
in the lowest bin (commonly called “Too short,” “Too easily guessed,”
or “Too weak”). The stricter the policy is set, the larger this lowest
bin gets, reducing the overall precision. A good similarity measure
should tolerate moderately large reject-bins.
(3) Tolerance to Noise: Small deviations in the strength estima-
tions are frequent, based on slight differences in the used models,
the training data, or other factors. A good measure should tolerate
such minor deviations.
Table 1: Evaluated Datasets
Name
RockYou
LinkedIn
000Webhost
Service
Social Games
Social Network
Year
2009
2012
2016 Web Hosting
Policy1
5+
6+
6+ [a-Z][0-9]
˜H∞
6.81
7.27
9.26
˜G0.25
15.89
19.08
20.69
4 EVALUATED PASSWORD DATASETS
In this section, we discuss factors that influence password choice,
introduce the password datasets that we will use to evaluate a broad
selection of PSMs, and describe our reference password distribution
which we will use for comparing different accuracy metrics.
4.1 Influencing Factors
When evaluating strength meters one must consider that password
strength is contextual and influenced by many factors [4, 23, 50].
(1) Password leaks originating from a single web service follow a
distribution partially specific for this site. For example, the password
“linkedin” appears in the LinkedIn leak with a probability of 0.12 %,
but does not appear in the RockYou leak. In contrast, the password
“rockyou” appears with a probability of 0.06 % in the RockYou leak,
but only appears with a probability of 0.000028 % in the LinkedIn
leak. Often passwords from a service reflect the category of the
service and include the name or semantic theme of the service [67].
(2) Website administrators often enforce password composition
policies [42] (e. g., requiring the password to contain a digit or
symbol or to be of a certain length) that force users into choosing
different passwords which are compliant with the respective policy.
(3) Florêncio et al. showed that not using any weak passwords
or not considering to reuse some passwords becomes impossible
with a growing number of accounts. If no password manager is
used, account grouping and reusing passwords becomes the only
viable solution [25]. Given a fixed time-effort budget [5] it is sub-
optimal to spend the same amount of effort for all accounts. Florên-
cio et al. [24] proposed to classify accounts into categories from
“don’t-care” to “ultra-sensitive” accounts based on, e. g., the conse-
quences of account compromise.
(4) A password strength meter might be tuned and more inten-
sively tested with a specific password leak. Specifically, academic
meter proposals, which are based on probabilistic password models,
require a lot of real-world password data. Some strength meters
even include small blacklists of very common passwords.
While it is difficult to avoid all factors, we try to minimize their
influence by testing three very different datasets in our experiments
that differ by service, policy, and leak date. We selected the datasets
to allow easy verification and generate reproducible results based on
publicly available data. Our findings are limited to predominantly
English speaking users and their password preference. To reason
about the strength of a password distribution considering a best-
case attacker, we provide the Min-entropy H∞ as lower bound
and partial guessing entropy (α-guesswork) Gα for alpha 0.25 as
described by Bonneau [8].
1We list the active policy, at the time when the data breach happened.
4.2 Datasets
An overview of the used datasets that are described in the following