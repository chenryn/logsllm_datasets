after-free vulnerabilities is based on performing a series of steps
that can hardly be characterized as fraudulent. The key concept of
use-after-free exploitation is that an adversary can leverage pointers
that (still) point to deallocated memory. Once a chunk of memory is
freed the system can reuse the released memory region as needed.
If the attacker can place her data in the freed area, and cause the
dereference of a pointer that still points to this space, then she can
tamper-with the dereferenced data, and, consequently the data ﬂow
of the program. Although, any (dangling) pointer can be abused in
this way, in the context of C++ programs, use-after-free vulnerabil-
ities are often used to hijack VTable pointers. These pointers are
c l a s s G i r l : p u b l i c P a r e n t {
p u b l i c :
void t a l k ( ) ;
} ;
i n t main ( i n t argc , char ∗ a r g v [ ] ) {
P a r e n t ∗p1 , ∗p2 ;
. . .
i n p u t == true ? p1 = new Boy ( )
p1−> t a l k ( ) ;
p2 = p1 ;
d e l e t e p1 ; /* Destructors of Boy/ Parent called */
/* p2 is now dangling */
. . .
/* use -after -free trigger */
p2−> t a l k ( ) ;
return 1 ;
: p1 = new G i r l ( ) ;
Figure 1: Example program to demonstrate how use-after-free
vulnerabilities can be (ab)used for VTable hijacking. In line 17
two pointers of type Parent are declared, namely p1 and p2.
We assume that input is true, and p1 is instantiated as Boy.
At line 21, p2 and p1 point to the same location, and at line 22
p1 is deleted. The destructor of Boy and then Parent is called
and then all space occupied by the Boy instance is released, but
p2 still points to the location that p1 was pointing at. If p2 is
accessed (line 26) the program behavior is undeﬁned.
abundant and they are used to trigger indirect branches at runtime;
therefore they are extremely useful for diverting the control ﬂow of
a running process in arbitrary ways.
Figure 1 illustrates the mechanics of a VTable hijacking attack.
The program contains three virtual class deﬁnitions: Parent (base
class, lines 1–4), Boy (inherits from Parent, lines 6–9), and Girl
(inherits from Parent, lines 11–14). In line 17, two pointers of
type Parent are declared, namely p1 and p2. Depending on the
value of input, which we assume to be inﬂuenced by user input,
pointer p1 can be either instantiated as Boy or Girl (line 19). As-
suming that input is indeed true, p1 will be instantiated as Boy.
Hence, when the virtual method talk is invoked (line 20), the par-
ticular implementation, as provided by Boy, will be executed. The
compiler emits the relevant code for performing this resolution (i.e.,
calling the correct virtual method, depending on the object type);
most compilers, implement this feature by using VTables.
In Figure 2(a), we illustrate the memory layout of the object that
p1 points at. The ﬁrst 8 bytes are occupied by vfPtr, a pointer
that contains the address of the VTable provided by Boy, followed
by class data (i.e., the internal variables of Boy). Notice that the
VTable itself (of Boy class) is stored in read-only memory and it
further contains pointers for resolving the implementations of the
virtual methods provided by both Boy and Parent. Embedding a
pointer that targets a VTable at the beginning of a virtual object is
critical to resolve the method to be called at runtime. Unfortunately,
the vfPtr pointer (Figure 2(a)) cannot be stored in read-only mem-
ory, since object instances are allocated on the stack, heap, or the
global data section(s)—therefore all VTable pointers (but not the
actual VTables) reside in writable memory.
449(cid:3)(cid:10)(cid:13)(cid:14)(cid:16)(cid:20)(cid:1)(cid:12)(cid:7)(cid:20)(cid:14)(cid:18)(cid:17)(cid:1)(cid:14)(cid:11)(cid:1)(cid:3)(cid:1)
(cid:3)(cid:1)
(cid:3)(cid:2)
(cid:19)(cid:11)(cid:4)(cid:17)(cid:16)
(cid:9)(cid:7)(cid:17)(cid:7)
(cid:4)(cid:2)
(cid:4)(cid:3)
(cid:4)(cid:2)(cid:1)(cid:11)(cid:16)(cid:1)(cid:8)(cid:9)(cid:12)(cid:9)(cid:17)(cid:9)(cid:8)
(cid:18)(cid:10)(cid:3)(cid:17)(cid:15)
(cid:8)(cid:6)(cid:17)(cid:6)
(cid:6)(cid:5)(cid:7)(cid:8)(cid:12)(cid:10)(cid:1)(cid:14)(cid:11)(cid:1)(cid:2)(cid:14)(cid:20)
(cid:1)(cid:15)(cid:17)(cid:16)(cid:1)(cid:17)(cid:14)(cid:1)(cid:13)(cid:6)(cid:9)(cid:8)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:15)(cid:17)(cid:16)(cid:1)(cid:17)(cid:14)(cid:1)(cid:15)(cid:4)(cid:11)(cid:14)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:15)(cid:17)(cid:16)(cid:1)(cid:17)(cid:14)(cid:1)(cid:15)(cid:5)(cid:6)(cid:12)(cid:7)(cid:10)(cid:13)(cid:1)(cid:2)(cid:3)
(a)
(b)
(cid:5)(cid:4)(cid:6)(cid:7)(cid:12)(cid:9)(cid:1)(cid:13)(cid:10)(cid:1)(cid:2)(cid:13)(cid:19)
(cid:1)(cid:14)(cid:17)(cid:15)(cid:1)(cid:17)(cid:13)(cid:1)(cid:13)(cid:6)(cid:9)(cid:8)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:14)(cid:17)(cid:15)(cid:1)(cid:17)(cid:13)(cid:1)(cid:15)(cid:4)(cid:11)(cid:14)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:14)(cid:17)(cid:15)(cid:1)(cid:17)(cid:13)(cid:1)(cid:15)(cid:5)(cid:6)(cid:12)(cid:7)(cid:10)(cid:13)(cid:1)(cid:2)(cid:3)
(cid:3)(cid:1)
(cid:3)(cid:2)
(cid:15)(cid:12)(cid:8)(cid:22)(cid:1)(cid:24)(cid:22)(cid:23)(cid:8)(cid:28)
(cid:19)(cid:8)(cid:18)(cid:16)(cid:10)(cid:16)(cid:21)(cid:26)(cid:24)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:19)(cid:8)(cid:18)(cid:16)(cid:10)(cid:16)(cid:21)(cid:26)(cid:24)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:19)(cid:8)(cid:18)(cid:16)(cid:10)(cid:16)(cid:21)(cid:26)(cid:24)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:19)(cid:8)(cid:18)(cid:16)(cid:10)(cid:16)(cid:21)(cid:26)(cid:24)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:19)(cid:8)(cid:18)(cid:16)(cid:10)(cid:16)(cid:21)(cid:26)(cid:24)(cid:1)(cid:27)(cid:13)(cid:5)(cid:25)(cid:23)
(cid:11)(cid:8)(cid:25)(cid:8)
(cid:7)(cid:6)(cid:8)(cid:9)(cid:18)(cid:12)(cid:3)(cid:18)(cid:21)(cid:21)(cid:17)(cid:16)(cid:20)(cid:14)(cid:1)(cid:11)(cid:8)(cid:25)(cid:8)
(cid:22)(cid:21)(cid:16)(cid:20)(cid:25)(cid:12)(cid:23)(cid:1)(cid:25)(cid:21)(cid:1)(cid:8)(cid:25)(cid:25)(cid:8)(cid:10)(cid:17)(cid:12)(cid:23)(cid:2)(cid:24)(cid:1)(cid:10)(cid:21)(cid:11)(cid:12)
(cid:7)(cid:6)(cid:8)(cid:9)(cid:18)(cid:12)(cid:1)(cid:21)(cid:13)(cid:1)(cid:4)(cid:21)(cid:28)
(cid:1)(cid:22)(cid:25)(cid:23)(cid:1)(cid:25)(cid:21)(cid:1)(cid:13)(cid:6)(cid:9)(cid:8)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:22)(cid:25)(cid:23)(cid:1)(cid:25)(cid:21)(cid:1)(cid:15)(cid:4)(cid:11)(cid:14)(cid:1)(cid:2)(cid:3)
(cid:1)(cid:22)(cid:25)(cid:23)(cid:1)(cid:25)(cid:21)(cid:1)(cid:15)(cid:5)(cid:6)(cid:12)(cid:7)(cid:10)(cid:13)(cid:1)(cid:2)(cid:3)
(c)
Figure 2: VTable hijacking mechanics. For the example program of Figure 1, we illustrate, in (a), the memory layout of the object
that p1 points to. The ﬁrst 8 bytes are occupied by vfPtr, which points to the VTable provided by Boy, followed by the respective
class data. The VTable of Boy, stored in read-only memory, contains pointers to the implementation of the methods Boy supports.
In (b), we illustrate what happens if p1 is deleted, and in (c), how the attacker can take advantage of the dangling pointer (p2). An
adversary can spray memory with the contents of a phony vfPtr that points to attacker-controlled data. Such data can resemble
a valid VTable: i.e., arranged so that if dereferenced through a dangling pointer (Figure 1, line 26), then a forged method will be
executed (e.g., mprotect), instead of the one intended by the original program.
Source Binary Modiﬁed Allocator Unmodiﬁed Allocator
Protection
Control-Flow Integrity
BinCFI [61], CCFIR [60], PathArmor [54], TypeArmor [55]
VTable protection
VTV [53], SafeDispatch [32]
vfGuard [43], VTint [59], T-VIP [24]
Use-after-free protection
Undangle [15], FreeSentry [57], DANGNULL [33]
Conservative GC [14]
Memory analyzers
Purify [28], Valgrind [39]
Secure allocators
Cling [11], DieHard [13, 40], CETS [38]
VTPin
Table 1: Existing mitigation mechanisms. Compared to competing solutions, VTPin does not require access to the source code of
the protected program, and does not interfere with the strategies and policies of the allocator used.
Going back to Figure 1, in line 21, p2 == p1. Essentially, at
this point the memory layout is the one presented in Figure 2(a):
both pointers p1 and p2 point to the vfPtr, which points to the
VTable provided by Boy. It line 22, p1 is deleted. Technically, the
destructor of Parent and Boy is called (in this exact order), and the
space occupied by the Boy instance is marked as free. This space
can be reused for future allocations, and, depending on the heap
allocator of the system, the contents of the area can be zeroed or left
as is. Finally, p2 still points to the location that p1 was pointing at:
i.e., at the vfPtr provided by Boy. At this point, the memory layout
is as depicted in Figure 2(b) and p2 is a dangling pointer. If p2 is
accessed, like for example in line 26 of Figure 1, where talk is
called, the program behavior is undeﬁned. There are basically three
possible scenarios: (a) the program crashes, assuming the freed
memory is zeroed; (b) the talk method of Boy is called, assuming
the freed memory has not been touched by the heap allocator; or
(c) arbitrary code gets executed, assuming the freed memory has
been deliberately reused.
Scenario (c) is the one of interest for exploitation purposes. As
illustrated in Figure 2(c), an adversary may spray [50] memory
with the contents of a malicious vfPtr that points to attacker-
controlled data. Such data can be VTable-looking: i.e., arranged so
that if dereferenced, a forged method will be invoked. Notice, that
the attacker does not inject code, since we assume non-executable
data [12], but rather memory addresses. For example, she can place
the address of mprotect at the tampered-with VTable, which, once
called, changes the permissions of the attacker-controlled memory
and makes it executable. At this point (Figure 2(c)), if p2 is used
(Figure 1, line 26), the attacker can hijack the control ﬂow of the
vulnerable process.
2.2 Existing Mitigations
Given their practical relevance, it comes as no surprise that the
research community has proposed many defenses to tackle VTable
hijacking (and related) attacks. We group all these efforts in the
following four categories and summarize our analysis in Table 1.
Control-ﬂow Integrity. Ensuring that a program executes only
control ﬂows that are part of its original Control Flow Graph (CFG)
is a core concept known as Control-ﬂow Integrity (CFI) [10]. CFI
can protect software against arbitrary control-ﬂow hijacking attacks,
despite the existence of vulnerabilities of any type (including use-
after-free). However, CFI, though being a strong defense, can be
hardly realized without approximating the ideal CFG [54, 55, 60,
61]. This approximation has security consequences: practically any
coarse-grained CFI scheme can be defeated [17, 19, 26, 27, 48] and
even ﬁne-grained schemes are prone to attacks [16, 21, 35, 47].
450VTable protection. Proposals for protecting VTable pointers can
be either applied to source code [32, 53] or directly at the binary
level [24, 43, 59]. In contrast to generic indirect branches targeted
by CFI solutions, VTable pointers should be contained in a well de-
ﬁned C++ class hierarchy, which is likely to be unknown if source
code is not available [47]. Generic binary-only solutions that sig-
niﬁcantly raise the bar against advanced code-reuse attacks do ex-
ist [55], however their effectiveness in the presence of complex
class hierarchies is questionable [35].
Use-after-free protection. Several proposals aim solely at prevent-
ing use-after-free vulnerabilities by carefully updating all pointers
of a program so that they do not point to memory areas that can
be reused [15, 33, 57]. Such approaches are very effective against
use-after-free exploitation and typically experience moderate over-
head. However, they all require analysis and restructuring of the
program source code, thus failing to protect binaries. Alternatively,
conservative garbage collectors [14] could be used to mitigate use-
after-free vulnerabilities at the binary level [11], but they typically
mandate custom allocators and their full-coverage application in-
curs nontrivial performance and memory impact (e.g., due to the
frequent garbage collection cycles required [29], as well as because
of accuracy problems [30]).
Memory analyzers. Another approach is based on tracking all
memory operations of a program for detecting safety errors [28,
39]. Such tools can accurately detect memory-related bugs, but
they incur overheads that prevent them from protecting deployed