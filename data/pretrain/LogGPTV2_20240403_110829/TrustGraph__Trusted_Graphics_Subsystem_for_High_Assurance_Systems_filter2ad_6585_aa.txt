title:TrustGraph: Trusted Graphics Subsystem for High Assurance Systems
author:Hamed Okhravi and
David M. Nicol
2009 Annual Computer Security Applications Conference
TrustGraph: Trusted Graphics Subsystem for High Assurance Systems
Hamed Okhravi
David M. Nicol
Department of Electrical and Computer Engineering
Department of Electrical and Computer Engineering
University of Illinois at Urbana-Champaign
University of Illinois at Urbana-Champaign
Urbana, USA
Email: PI:EMAIL
Urbana, USA
Email: PI:EMAIL
Abstract—High assurance MILS and MLS systems require
strict limitation of the interactions between different security
compartments based on a security policy. Virtualization can
be used to provide a high degree of separation in such
systems. Even with perfect isolation, however, the I/O devices
are shared between different security compartments. Among
the I/O controllers, the graphics subsystem is the largest
and the most complex. This paper describes the design and
implementation of TrustGraph, a trusted graphics subsystem
for high assurance systems. First, we explain the threats and
attacks possible against an unsecured graphics subsystem. We
then describe the design of TrustGraph, the security principles
it is built upon, and its implementation. Finally, we verify
our implementation through different levels of veriﬁcation
which include functionality testing for simple operations, attack
testing for security mechanisms, and formal veriﬁcation for the
critical components of the implementation. An analysis of the
graphics API covert channel attack is presented, its channel
capacity is measured, and the capacity is reduced using the
idea of fuzzy time.
Keywords-Trusted Graphics; Multi-Level Security; Virtual-
ization; Formal Veriﬁcation; Covert Channel Analysis
I. INTRODUCTION
High assurance secure systems require strict compliance
of the system activities with a security policy. Multiple in-
dependent levels of security (MILS) and multilevel security
(MLS) systems are two of such systems. A MILS policy
usually requires strict isolation between different compart-
ments of the processes and resources in the system with
little or no interaction between them. MLS systems on the
other hand allow limited communication between different
security levels according to the security policy (e.g. Bell-
LaPadula [8] and/or Biba [9] policy). High assurance MILS
and MLS workstations require strong compartmentalization
of the system to ensure that no information leakage or
interference can happen between different security levels.
Hence, an attractive approach for building such a system
is virtualization. A virtual machine monitor (VMM or hy-
pervisor) provides an abstraction of the system hardware
to the virtual machines (VM) running on top of it while
isolating each VM from another. In MILS or MLS systems
each level of security is designated a separate VM. The
VMM then enforces the security policy by blocking any
interaction between the virtual machines or allowing limited
communications according to the policy. When providing
strict isolation between the VMs, VMM is also referred to
as a “separation kernel.”
An inherent issue with virtualization is the problem of I/O.
Different approaches have been proposed for virtualizing I/O
[20]. In modern systems, three main approaches exist for
I/O virtualization. The ﬁrst approach is to have a separate
I/O device for each VM. In this case, each VM has its
own subsystem (driver and manager) to interact with its
I/O device, hence achieving strong isolation between the
VMs. However, this model imposes additional hardware
costs to the system and if the number of different security
compartments is large, it soon becomes impractical (e.g. a
system with ten different security compartments requires ten
separate displays.) The second approach is to have one copy
of each I/O device with all of the I/O drivers residing in the
VMM. The VMM then presents a virtual device to each VM.
In this case, the VMs share each I/O device and its driver.
KVM [25] uses this model. The downside is that this model
makes the VMM complex and large. The third model for
I/O virtualization is to have a separate I/O partition (a.k.a.
the privileged partition or dom0) on top of the VMM which
controls the I/O operations. Any request for the I/O from a
VM is sent to this partition by the VMM and the results are
forwarded back to the VMs. This model is used by Xen [7].
In the latter two approaches of I/O virtualization, the
subsystem that controls an I/O device is shared between the
different VMs. Sharing subsystems has an inherent security
problem; namely, information can leak and different security
levels can interfere through these I/O subsystems. Some
of the I/O controllers are simple and tiny which reduces
the chance of interference (e.g. the keyboard and mouse
drivers). A graphics subsystem, on the other hand, causes
many security concerns. It usually consists of a large piece
of code which handles the graphic operations and builds the
display output (e.g. the X Window System). The inherent
complexity of the graphics subsystem and the fact that it
handles data from different security levels, imposes a high
risk of information leakage and interference. In fact, the
applications frequently use the graphics subsystem resources
as a means of communication, not regulated by the security
policy [24].
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.31
254
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
This paper describes the design and implementation of
TrustGraph, a trusted graphics subsystem for high assur-
ance systems. In TrustGraph, the entities (resources) in the
graphics subsystem are labeled with appropriate security
tags to prevent unauthorized communication. Moreover, the
methods and operations are secured so that they comply with
the security policy.
TrustGraph can be deployed in a single secure operating
system or in a virtualized architecture. The implementation
is evaluated against the attacks and information leakages that
are possible under the vanilla graphics subsystems, but are
prevented in TrustGraph. In addition, the critical parts of the
implementation are veriﬁed using formal method techniques
(using ACL2). In fact, we have identiﬁed several ﬂaws
in our initial implementation by formal veriﬁcation which
were corrected. Moreover, an analysis of the potential covert
channels using the dynamics of the graphics subsystem is
performed and the capacity of such channels is estimated and
then reduced in TrustGraph using the idea of fuzzy time. We
have also used TrustGraph in a proof of concept end-to-end
virtualized system.
The contributions of this work are as follow:
(cid:129) Enumerating and describing different classes of attacks
possible using the API of a graphics subsystem.
(cid:129) Design and implementation of a secure graphics sub-
system on top of a simple and tiny graphics library.
(cid:129) To the best of our knowledge, TrustGraph is the ﬁrst
graphics subsystem with some of its critical compo-
nents formally model checked (the policy enforcement
and the window manager logic)
(cid:129) It is also the ﬁrst graphics subsystem that reduces the
channel capacity of the graphics API covert channel
attacks.
The rest of the paper is organized as follow. Section II
gives a background on the graphics subsystem and the terms
and concepts usually used in its context. The background
material presented should be enough for those without the
knowledge of graphics systems to understand the rest of
the paper. Section III describes the threat model as well as
the types of attacks and information leakage possible in a
graphics subsystem. The details are presented on how an un-
secured graphics I/O can violate the security policy and leak
sensitive data. We discuss the design of TrustGraph along
with the mechanisms used to counter the security threats
in section IV. The implementation details are provided in
section V. Section VI describes the evaluation of TrustGraph
against known attacks as well as the formal veriﬁcation of
the critical components of the implementation. The analysis
of the covert channels using the graphics API is also
presented in this section. Finally, we discuss the related work
in section VII before concluding the paper in section VIII.
II. BACKGROUND
A graphics subsystem is a software system responsible
for providing a graphical user interface (GUI) for the
applications and building the display output through the
graphics card. It allows the applications to interact with
the graphics hardware through an application programming
interface (API) which we simply refer to as the interface
hereafter. The graphics subsystem also handles the inputs
from the input devices such as mouse and keyboard and
directs them to the appropriate application. Examples of the
graphics subsystems include the X Window System [34]
for Linux-like operating systems, DirectFB for Linux and
embedded systems, and Quartz [38] for Mac OS X. The
graphics subsystem often includes an integrated windowing
system which is responsible for handling and managing the
windows on the screen.
The following terms and concepts are used in the context
of graphics. We use the generic terms with a bias towards
those adopted by DirectFB [1].
(cid:129) Window: A window is a visual area, usually rectangu-
lar, which displays the graphical outputs and accepts
the inputs for an application.
(cid:129) Layer: Each layer represents an independent graphics
buffer in the system. Different layers are blended into
the ﬁnal image using the transparency information for
each layer (i.e. alpha blending). For example, one layer
can be used for the background, another one for an
application window in the middle, and yet another one
for a video playing on top.
(cid:129) Surface: A surface is a reserved piece of memory (from
the video card or the system memory) which holds
the pixel data for a window. All drawing operations
requested by the application are done directly on this
piece of memory.
(cid:129) Event Buffer: An event buffer holds all of the input
events for a window (e.g. key strokes or mouse events).
(cid:129) Data Buffer: A buffer which holds the image or video
data to be displayed on a window.
(cid:129) Window Manager: A piece of software that manages a
set of windows. The window events such as resizing,
reordering, or moving call
the appropriate window
manager methods. The window Manager is also respon-
sible for redirecting the input events to the appropriate
window.
In this paper, we refer to the set of all windows (W),
surfaces (S), event buffers (EB), and data buffers (DB) as
the graphics resources (R) (or simply the resources.)
Figure 1 shows the simpliﬁed architecture of a graphics
subsystem. A typical sequence for establishing a GUI starts
from the application creating an interface (called the main
interface) to the graphics subsystem. The main interface
can optionally create a data buffer to load image or video
data. The main interface then creates one or more windows
255
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. The architecture of a graphics subsystem
Figure 2. Label ﬂow in TrustGraph
for that application through the window manager. Each
window then creates a surface and an event buffer to hold its
pixel values and the input events respectively. The window
manager then forwards the input events to the appropriate
application through its event buffer and eventually its main
interface.
Resource creations and acquisitions are done through a set
of graphics methods (M) (hereafter referred to as methods)
provided by the graphics subsystem through the interfaces.
For example, one method (Create-Surface) creates a surface
for a window (f : W → S) and another one (Get-Event-
Buffer) assigns an already existing event buffer to a window
(f : W → EB.) A complete list of the graphics methods is
provided in section IV-C1. There are also global operations
(OP) (hereafter referred to as operations) which operate on a
set of resources. For instance, taking a screenshot of the dis-
play is an operation which operate on the set of all windows
and their surfaces to dump an image of the display. Also
a graphics subsystem provides a set of drawing functions
(D) which are called by a window to manipulate its surface
(f : S → S.) As an example, when an application wants to
draw a rectangle on its window, a drawing function is called
which gets the surface of the window and changes its pixel
values to include a rectangle. A graphics subsystem (GS)
is a 5-tuple that includes the set of all graphics resources
(R =
(W, S, EB, DB)), the graphics methods (M), the
operations (OP), the drawing functions (D), and a window
manager (WM); i.e. GS = (cid:3)R | M | OP | D | W M(cid:4).
(cid:2)
III. THREAT MODEL
The threat model used in this paper assumes that the ap-
plications running at different security levels are not trusted.
They have the potential to leak information and violate the
security policy as a result of intentional malicious behavior
or unintentional bugs or programming errors. The trusted
computing base (TCB), on the other hand, includes the
hardware of the system (CPU, main memory, and devices),
the video card, and the logic used to provide the separation
between the processes at different security levels. This
logic can be a VMM (hypervisor or separation kernel) as
explained in the introduction or a trusted operating system;
although, it is easier to establish the isolation property of
a tiny VMM than an entire operating system. The security
policy can be any arbitrary policy such as MLS, MILS, or
type enforcement (TE). As a proof of concept, we implement
a Bell-LaPadula-like [8] security policy for MLS systems.
We assume that the only interaction between the appli-
cations and the graphics subsystem is done through the
interface deﬁned by the graphics subsystem. The subsystem
itself is protected from modiﬁcations by residing in a lower
software layer (i.e. in the VMM) or in a privileged virtual
machine (e.g. dom0 of Xen.) The goal is to prevent the
applications from violating the security policy by using the
graphics subsystem to communicate.
Now we describe various attacks and leakage points
which can be used to violate a security policy. A graphics
subsystem is a single piece of software which handles data
from multiple security levels. This makes it the weak link
in the security chain. The ﬁrst security issue in a graphics
subsystem is that all of the resources (windows, surfaces,
buffers, etc.) are security agnostic. A surface holding the
graphic data from a top secret application is not different
from the one holding unclassiﬁed data. The applications can
dynamically bind to these resources and read the potentially
sensitive data from them; thus it is possible for the appli-
cations to communicate through these resources or for an
application to snoop the graphics data of another application.
Another security threat in an unsecured graphics sub-
system is unsecured methods. These methods enable the
applications to build their GUI and interact with the graphics
hardware. There are two types of unsecured methods: those
used for creating or acquiring the resources and those used
to handle the inputs. The former can be used maliciously to
snoop the graphics data from the security-agnostic resources
while the latter can be used to sniff the input events from
256
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:43 UTC from IEEE Xplore.  Restrictions apply. 
another window. For instance, an application can retrieve
an interface to the surface of another window in a higher
security level and read its pixel data (using a method such
as GetSurface). Note that applications can enumerate all the
windows on the display. This is necessary for facilities such
as “alt-tab” or crash recovery applications. Moreover, a win-
dow that currently does not have the focus can acquire the
input events (using GrabKeyboard or GrabPointer methods).
As a result, the window of a malicious application which is
sitting behind the other windows and is not even visible can
sniff the password typed by the user on a top secret window.
Unsecured operations can also leak information. The
global operations such as copy-pasting and taking screen-
shots (e.g. using the PrintScreen key of the keyboard) can
easily leak data across the security levels.
In addition, overlapping windows can endanger the conﬁ-
dentiality of the system. A window can make itself transpar-
ent (or partially transparent). There are two security concerns