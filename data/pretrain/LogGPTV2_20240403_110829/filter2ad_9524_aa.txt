# 前言
笔者最近在研究java自动化代码审计这方面的内容，也看了一些相关的文章，其中主要是跟着[4ra1n师傅](https://4ra1n.love)的文章进行学习的。目前学到的有两种自动化审计思路，一是AST，二是ASM。前者基于java源代码，后者基于字节码。个人感觉后者的可操作性会更强一些。同时由于有[gadget-inspector](https://github.com/JackOfMostTrades/gadgetinspector)的铺垫，给我们提供了
**使用java代码模拟jvm执行字节码**
的思路，导致ASM这种自动化审计思路可以做到一定程度的动态化，实现了污点的动态流动，而不仅仅是停留在静态的代码层面。这也使得ASM这种思路更加具有可玩性。因此，笔者也选择了基于ASM来实现
**ACAF(Auto Code Audit Framework)** 。
在正式介绍之前，还是想先梳理一下笔者学习ASM自动化审计的过程。
最开始，笔者先入手的是[gadget-inspector](https://github.com/JackOfMostTrades/gadgetinspector)源码阅读，有一定的jvm基础，加上[三梦师傅](https://xz.aliyun.com/t/7058#toc-6)讲解的非常清晰的博客，花了几天把源码啃得七七八八了。
紧接着就开始跟着4ra1n师傅的博客学，学了一下他的[CodeInspector的实现](https://4ra1n.love/post/zA8rsm1ne/#%E6%80%BB%E7%BB%93)，以及[基于污点分析的JSP
Webshell检测](https://4ra1n.love/post/0GeHo6Oj0/)，后者可能跟本文不是直接相关，不过
**使用java代码模拟jvm执行字节码** 这种思路都是一样的。
值得一提的是，CodeInspector是基于gadget-inspector进行实现的，二者的区别在于，CodeInspector是针对springboot项目的自动化审计，而gadget-inspector是专门用来找反序列化链的。
4ra1n师傅在实现CodeInspector的时候，是以SSRF的例子来进行实现的，需要我们自行去分析 **常见导致SSRF的字节码**
，然后把这种特征硬编码到程序当中，才能实现检测。于是笔者就思考了一下能否将这个过程自动化，或者说，让这个工具的使用更加简单一些。于是笔者将CodeInspector进行了一定程度的抽象，写了个
**ACAF** 。最终实现的效果就是，用户仅仅需要提供 **漏洞代码的demo** ，然后 **手动将部分污点传播链路链接起来**
，就能实现自动化代码审计。
接下来，笔者将从 **使用方法、框架整体概览、漏洞代码特征抽取、手工链接污点传播链路、自动化审计、实际效果**
六个方面来对ACAF进行分析（前面说了一堆废话
# 使用方法
以ssrf的例子来说，用户只需要给出会造成ssrf漏洞的常见demo，如下，将漏洞demo写在`sinkMethod`方法中
    package com.er1cccc.acaf.example.ssrf;
    import com.er1cccc.acaf.config.ControllableParam;
    import com.er1cccc.acaf.config.PassthroughRegistry;
    import com.er1cccc.acaf.config.Sink;
    import okhttp3.OkHttpClient;
    import okhttp3.Request;
    import okhttp3.Response;
    import java.lang.reflect.Method;
    public class SsrfSink4 implements Sink {
        private ControllableParam params = new ControllableParam();
        public SsrfSink4(){
            params.put("url","http://localhost");
        }
        @Override
        public Object sinkMethod() throws Exception {
            OkHttpClient httpClient = new OkHttpClient();
            Request request = new Request.Builder().url((String) params.getParameter("url")).build();
            Response response = httpClient.newCall(request).execute();
            return null;
        }
    }
然后将 **手动将部分污点传播链路链接起来** （这部分在本文后面会详细讲解），实现`addPassthrough`方法，最终得到完整的demo代码
    public class SsrfSink4 implements Sink {
        private ControllableParam params = new ControllableParam();
        public SsrfSink4(){
            params.put("url","http://localhost");
        }
        @Override
        public Object sinkMethod() throws Exception {
            OkHttpClient httpClient = new OkHttpClient();
            Request request = new Request.Builder().url((String) params.getParameter("url")).build();
            Response response = httpClient.newCall(request).execute();
            return null;
        }
        @Override
        public void addPassthrough(PassthroughRegistry passthroughRegistry) {
            try{
                Class builder = new Request.Builder().getClass();
                Method urlMethod = builder.getMethod("url",String.class);
                Method buildMethod = builder.getMethod("build");
                Class okHttpClientClass = OkHttpClient.class;
                Method newCall = okHttpClientClass.getMethod("newCall", Request.class);
                Class call = newCall.getReturnType();
                Method execute = call.getMethod("execute");
                passthroughRegistry.addPassthrough(urlMethod,1);
                passthroughRegistry.addPassthrough(buildMethod,0);
                passthroughRegistry.addPassthrough(newCall,1);
                passthroughRegistry.addPassthrough(execute,0);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
然后写一个配置类
    package com.er1cccc.acaf.example.ssrf;
    import com.er1cccc.acaf.config.*;
    public class SSRFConfigurer implements ACAFConfigurer {
        @Override
        public void addSource(SourceRegistry sourceRegistry) {
        }
        @Override
        public void addSanitize(SanitizeRegistry sanitizeRegistry) {
        }
        @Override
        public void addSink(SinkRegistry sinkRegistry) {
            sinkRegistry.addSink(new SsrfSink4());
        }
    }
最后创建配置类，开始审计
    package com.er1cccc.acaf.example;
    import com.er1cccc.acaf.Launcher;
    import com.er1cccc.acaf.example.sql.SqlConfigurer;
    import com.er1cccc.acaf.example.ssrf.SSRFConfigurer;
    public class App {
        public static void main( String[] args ) throws Exception{
            Launcher.launch(new SSRFConfigurer(),args);
        }
    }
# 框架整体概览
最初笔者制定的框架结构图是长这个样子的。分别通过VulnTemplateSourceVisitor、VulnTemplateSanitizeVisitor、VulnTemplateSinkVisitor去观察用户给出的source、sanitizer和sink，分析字节码，抽取出特征，然后将特征保存到VulnDiscovery中，再由VulnDiscovery去完成审计功能。
然而，笔者在真正实现时发现，source和sanitize这部分可能不太有必要（灰色部分），因此就仅实现了sink的自定义。
先说说source为什么没有实现，一开始之所以规划了source、sanitizer和sink是因为想参考codeql，但是真正落到ACAF上发现，并没有必要去完全套用。codeql之所以提供了自定义source的功能，是因为它是一款针对多种编程语言，多种框架的普适性的代码审计工具，而ACAF的定位是仅仅针对spring
web项目的审计。在codeql中，source可能是无穷无尽的，没办法限定死，而ACAF中，也就是在spring
web的环境下，source比较局限，可以直接硬编码到框架中。
而sanitizer的话，是因为笔者在写这个框架过程中，暂时还没遇到过误报的情况，所以也感觉不太必要，因此就暂时没有实现。如果后续有这种需求，再考虑实现。
既然说到这里了，就稍微说说ACAF和codeql的区别。这也是笔者在实现这个框架之前思考过的一个问题，codeql已经做的非常出色了，我有没有必要再去重复造轮子？
## ACAF与codeql的区别
### 更加自动化
codeql需要使用者写ql语句对代码进行分析，需要一定的人工投入。而acaf仅需要用户给出项目的jar包/war包（未来可能扩充更多的形式）就能对项目进行常见漏洞的自动化审计，如果是特殊漏洞，用户需要给出漏洞的示例代码。这一点目前笔者仅仅给出了ssrf的几种示例demo，用来审计项目中是否存在ssrf漏洞。未来可能计划补充更多常见漏洞的demo，这样就能实现常见web漏洞的自动化审计。
**追问：** 那直接用codeql写出一些常见漏洞的查询语句不是更好？  
**答：**
在使用codeql前需要投入一定的时间成本去学习codeql的文档，而且codeql的语句也较为复杂。而ACAF仅仅需要用户给出java编写的漏洞demo，使用起来更加简单
### 开源问题
目前已知codeql有个很致命的点就是只能对源代码进行分析，如果仅有jar包是没法分析的。虽然说可以把jar包进行反编译成源代码然后再进行分析，但是在反编译过程中可能会遇到项目依赖过于复杂，反编译十分困难，出现反编译后无法编译回去的情况。而ACAF本身就是对jar包（class文件）进行分析，所以不存在这方面的问题。
# 漏洞代码特征抽取
前面说了，使用CodeInspector的时候，需要我们 **自行分析导致漏洞的字节码** ，然后 **自行找出漏洞字节码的特征**
，将其硬编码到程序当中，才能实现检测。而 **漏洞代码特征抽取** 这部分要完成的功能就是，只需要用户 **提供导致漏洞的java代码** ，让框架
**自动去分析它对应的字节码，提取出特征** 。
明确了这部分的目的之后，来看看代码实现。主要代码逻辑在`com.er1cccc.acaf.core.template.VulnTemplateSinkVisitor`，由于框架给出了接口，要求用户如果想自定义sink需要写一个类来实现`com.er1cccc.acaf.config.Sink`接口，进而实现接口中的`sinkMethod`方法，将漏洞demo写到这个方法中。因此，我们在使用asm观察的时候，就只需要去关注这个`sinkMethod`方法就好
在`com.er1cccc.acaf.core.template.VulnTemplateSinkVisitor#visitMethod`中，如果观察到`sinkMethod`方法，则进一步去观察方法体，使用`com.er1cccc.acaf.core.template.VulnTemplateSinkVisitor.VulnTemplateSinkMethodVisitor`进行观察
对于`sinkMethod`的方法体，我们着重观察的是方法体中的方法调用指令，重写`visitMethodInsn`方法对其进行观察。其他的字节码指令我们交给父类`CoreMethodAdapter`去帮助我们模拟出JVM的操作，实现污点的传递。关于模拟JVM操作不太理解的可以先按照
**前言** 中笔者的学习路径，先去学一下前面的基础。
接下来看看`visitMethodInsn`方法的实现，首先调用了`isGetParamMethod`方法。这个方法的作用就是判断本次方法调用是不是准备调用
**获取可控参数的方法** 。
这里详细解释一下，我们让用户提供漏洞demo，但是我们并不知道漏洞demo中究竟哪些参数可控才能导致该漏洞，因此，与用户约定，可控的参数统一通过`params.getParameter`来进行获取
如下，`new
Request.Builder().url()`方法的参数可控可以造成漏洞，因此我们通过`params.getParameter`来进行获取。
    public class SsrfSink4 implements Sink {
        private ControllableParam params = new ControllableParam();
        public SsrfSink4(){
            params.put("url","http://localhost");
        }
        @Override