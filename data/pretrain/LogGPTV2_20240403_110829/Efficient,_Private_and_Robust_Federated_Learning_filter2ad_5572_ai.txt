20%
SharingGen ValidityCheck CosineComp
512.1 KB / 0 KB
512.1 KB / 0 KB
512.1 KB / 0 KB
512.1 KB / 0 KB
512.1 KB / 0 KB
512.1 KB / 0 KB
15689.2 KB
14124.7 KB
12558.3 KB
46988.7 KB
42293.2 KB
37597.9 KB
0 KB
0 KB
0 KB
0 KB
0 KB
0 KB
TrustScore WeightedAgg TotalComm
16268.5 KB
14702.7 KB
13133.8 KB
47612.2 KB
42911.6 KB
38199.3 KB
66.4 KB
65.2 KB
62.8 KB
109.1 KB
104.2 KB
87.4 KB
0.8 KB
0.7 KB
0.6 KB
2.3 KB
2.1 KB
1.9 KB
multiplication in the online phase, followed by appending
its output to the view.
• In the trust score computation, Sim first calls FReLU simula-
tor SimFReLU(⟨cosi⟩) for each i ∈ [n], and then simulates T Si
computation by calling SimFBmulA(⟨ReLU(cosi)⟩, ⟨f laдi⟩B)
for each i ∈ [n].
• In the weighted aggregation, Sim calls FMult simulator
SimFMult(⟨ReLU(cosi)⟩, ⟨f laдi⟩B) for each i ∈ [n], and sums
parties’ trust scores.
We show that the real world distribution is computationally in-
distinguishable to the simulated distribution via a hybrid argument.
For this, we formally show the simulation by proceeding the se-
quence of hybrid arguments, H0, · · · , H4, where H0 is the real view
and H4 is the simulated view generated by Sim.
• Hybrid1: Let H1 be the same as H0, except the followings.
First, for the squared ℓ2 norm evaluation in the validity check-
ing phase, we use the simulator SimFMult(⟨дi⟩). Then the
FDReLU and FAND evaluations are replaced with the simula-
tors SimFDReLU(⟨∥дi ∥2⟩) and SimFAND(⟨f laдi,0⟩B , ⟨f laдi,1⟩B),
respectively. Given the simulation security of these protocols,
H1 is indistinguishable from H0.
• Hybrid2: Let H2 be the same as H1, except the FmatMulPre ex-
ecution is replaced with execution the SimFmatMulPre(⟨R⟩1, дs).
Because FmatMulPre is guaranteed to produce output indis-
tinguishable from that of real world, H2 and H1 are indistin-
guishable. Note that the matrix multiplication in the online
phase is evaluated non-interactively, thus the view is not
changed.
• Hybrid3: In this hybrid, for the boolean-integer multiplica-
tion evaluation and ReLU evaluation, we use the simulators
SimFReLU(⟨cosi⟩) and SimFBmulA(⟨ReLU(cosi)⟩, ⟨f laдi⟩B). It
follows from simulation security that H3 is indistinguishable
from H2.
• Hybrid4: Let H4 be the same as H3, except the weighted
aggregation evaluation is replaced with execution the simu-
lator SimFMult(⟨ReLU(cosi)⟩, ⟨f laдi⟩B). Because SimFMult is
guaranteed to produce output indistinguishable from real,
H4 and H3 are indistinguishable.
In summary, H4 is identically distributed to the simulator’s output,
completing the proof.
□
B.3 Proof of Theorem 3
Proof. The robustness of SecureFL is guaranteed by the soundness
of the validity checking and the robustness of FLTrust. Specifically,
in the validity checking, CS and SP check each party’s input дi, and
assign the result to f laдi. f laдi concludes that either the servers
accept дi (f laдi = 1) or the servers reject дi (f laдi = 0). Thus, any
misbehaving party must either submit a well-formed submission
or be treated as zero input. On the other hand, to further exclude
wrong inputs that are actually in the required domain, our SecureFL
employs the byzantine-robust aggregation rule, whose robustness
guarantee directly relies on the FLTrust’s protocol (the proof is in
Section IV-D of [11]). It preserves the accuracy of the global model,
even when a part of malicious clients perform strong byzantine
attacks. In summary, our SecureFL is robust.
□
B.4 Proof of Specialized Beaver’s Triplets
Proof. We give a sketch of the security proof here. Assume two
servers aim to compute ⟨x⟩ · ⟨y⟩ and ⟨x⟩ · ⟨z⟩. The Beaver’s triplets
are given, i.e., ⟨a⟩, ⟨b⟩, ⟨c⟩, ⟨b′⟩, ⟨c′⟩. Without loss of generality, we
59ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Meng Hao, et al.
Table 6: The ideal functionality FBmulA
Table 7: The ideal functionality FDReLU
assume SP is corrupted by an adversary, since the protocol is sym-
metric with respect to the two servers. The message of SP received
from CS is ⟨x⟩1 + ⟨a⟩1, ⟨y⟩1 + ⟨b⟩1, and ⟨z⟩1 + ⟨b′⟩1. Because the
triplets are randomly sample from the field, the above messages are
indistinguishable from random values. Therefore, the specialized
Beaver’s multiplication is secure for any adversary.
Table 8: The ideal functionality FReLU
p
p , where c = a · b
Algorithm 5 Beaver’s Triples Generation
p and ⟨b⟩ ∈ Zn
Input: Additive shares of random vectors ⟨a⟩ ∈ Zn
Output: Additive shares of vector ⟨c⟩ ∈ Zn
1: SP computes cta ← Enc(pk, ⟨a⟩0), ctb ← Enc(pk, ⟨b⟩0), and
sends cta, ctb to CS.
2: CS samples a random vector r ∈ Zn
p and computes ctr ←
Enc(pk, a). Then, she homomorphically evaluates ct′a ←
Enc(pk, ⟨a⟩0 · ⟨b⟩1) and ct′b ← Enc(pk, ⟨b⟩0 · ⟨a⟩1), along with
ctd ← Enc(pk, ⟨b⟩0 · ⟨a⟩1 + ⟨a⟩0 · ⟨b⟩1 + r). After that, CS sets
⟨c⟩1 = ⟨a⟩1 · ⟨b⟩1 − r, and sends ctd to SP.
3: SP decrypts the above ciphertexts d ← Dec(sk, ctd), and ob-
tains ⟨c⟩0 = ⟨a⟩0 · ⟨b⟩0 + d.
Algorithm 6 Beaver’s Multiplication Procedure
Input: Additive shares of inputs ⟨x⟩ ∈ Zn
with Beaver’s triples ⟨a⟩ ∈ Zn
p , ⟨b⟩ ∈ Zn
Output: Additive shares of vector ⟨z⟩ ∈ Zn
1: SP and CS first set ⟨e⟩ = ⟨x⟩ − ⟨a⟩ mod p and ⟨f⟩ = ⟨y⟩ − ⟨b⟩
2: SP and CS reconstruct e and f interactively.
3: SP sets ⟨z⟩0 = f · ⟨a⟩0 + e · ⟨b⟩0 + ⟨c⟩0 and CS sets ⟨z⟩1 =
p and ⟨y⟩ ∈ Zn
p and ⟨c⟩ ∈ Zn
p , where z = x · y
p , along
p
mod p
e · f + f · ⟨a⟩1 + e · ⟨b⟩1 + ⟨c⟩1.
C FUNCTIONALITIES AND PROTOCOLS
We introduce the ideal primitives and protocols used by SecureFL.
Boolean-integer multiplication. The functionality FBmulA of
boolean-integer multiplication (Algorithm 4 shows the protocol) is
described in Table 6. Security trivially follows 1-out-of-2 OTs.
Beaver’s multiplication procedure. Given two shared values
⟨x⟩, ⟨y⟩ and constant c, linear operations such as ⟨cx +y⟩ can be di-
rectly computed by parties via locally adding the shares. In addition,
multiplication operations on shared values can be implemented by
calling Beaver’s multiplicative triples [6]. The ideal functionality
FBeaver is: sampling a, b from Zp uniformly at random, and return-
ing ⟨a⟩0, ⟨b⟩0, ⟨ab⟩0 to the first party and ⟨a⟩1, ⟨b⟩1, ⟨ab⟩1 to the
second party. After generating the Beaver’s multiplicative triples,
two parties holding ⟨x⟩, ⟨y⟩ can implement multiplication opera-
tions FMult and receive as the output the shares of ⟨xy⟩ at the end
of the protocol. The protocols of FMult and FBeaver are shown in
Algorithm 5 and Algorithm 6. In addition, the functionality FAND
implements that on input ⟨x⟩B , ⟨y⟩B, SP and CS learn ⟨z⟩B
0 and
⟨z⟩B
1 , where z = x ⊕ y. The protocol of FAND can be realized using
bit-triples (a boolean variant of the Beaver’s triples) via an instance
of 1-out-of-16 OTs. We omit a detailed description of the protocol
due to space limits.
DReLU and ReLU. The functionalities FDReLU and FReLU of
DReLU/ReLU operations are discussed in Tables 7 and 8. For a finite
field Zp, DReLU(x) = 1 if x 
p − 1}, lwrap = 1{⟨x⟩0 + ⟨x⟩1 > (p − 1)/2} and rwrap = 1{⟨x⟩0 +
⟨x⟩1 > p + (p − 1)/2}. Then, DReLU(x) is (1 ⊕ lwrap) if wrap = 0,
else it is (1⊕rwrap) if wrap = 1. The detailed protocols for realizing
FDReLU and FReLU are discussed in Algorithms 2 and 3, where we
utilize the millionaire functionality FMill of [40]. We omit a detailed
description of the protocol for realizing FMill due to space limits.
ACSAC’21,December6–10,2021,VirtualEvent,USAMengHao,etal.B.4ProofofSpecializedBeaver’sTripletsProof.Wegiveasketchofthesecurityproofhere.Assumetwoserversaimtocompute⟨𝑥⟩·⟨𝑦⟩and⟨𝑥⟩·⟨𝑧⟩.TheBeaver’stripletsaregiven,i.e.,⟨𝑎⟩,⟨𝑏⟩,⟨𝑐⟩,⟨𝑏′⟩,⟨𝑐′⟩.Withoutlossofgenerality,weassumeSPiscorruptedbyanadversary,sincetheprotocolissym-metricwithrespecttothetwoservers.ThemessageofSPreceivedfromCSis⟨𝑥⟩1+⟨𝑎⟩1,⟨𝑦⟩1+⟨𝑏⟩1,and⟨𝑧⟩1+⟨𝑏′⟩1.Becausethetripletsarerandomlysamplefromthefield,theabovemessagesareindistinguishablefromrandomvalues.Therefore,thespecializedBeaver’smultiplicationissecureforanyadversary.CFUNCTIONALITIESANDPROTOCOLSWeintroducetheidealprimitivesandprotocolsusedbySecureFL.Boolean-integermultiplication.ThefunctionalityFBmulAofboolean-integermultiplication(Algorithm4showstheprotocol)isdescribedinTable6.Securitytriviallyfollows1-out-of-2OTs.Table6:TheidealfunctionalityFBmulAInput:•SP:⟨𝑥⟩𝐵0∈Z2,⟨𝑦⟩0∈Z𝑝.•CS:⟨𝑥⟩𝐵1∈Z2,and⟨𝑦⟩1,𝑟∈Z𝑝.Output:•SP:⟨𝑧⟩0=𝑥·𝑦−𝑟mod𝑝where𝑥=⟨𝑥⟩𝐵0⊕⟨𝑥⟩𝐵1and𝑦=⟨𝑦⟩0+⟨𝑦⟩1mod𝑝.•CS:⟨𝑧⟩1=𝑟.Beaver’smultiplicationprocedure.Giventwosharedvalues⟨𝑥⟩,⟨𝑦⟩andconstant𝑐,linearoperationssuchas⟨𝑐𝑥+𝑦⟩canbedi-rectlycomputedbypartiesvialocallyaddingtheshares.Inaddition,multiplicationoperationsonsharedvaluescanbeimplementedbycallingBeaver’smultiplicativetriples[6].TheidealfunctionalityFBeaveris:sampling𝑎,𝑏fromZ𝑝uniformlyatrandom,andreturn-ing⟨𝑎⟩0,⟨𝑏⟩0,⟨𝑎𝑏⟩0tothefirstpartyand⟨𝑎⟩1,⟨𝑏⟩1,⟨𝑎𝑏⟩1tothesecondparty.AftergeneratingtheBeaver’smultiplicativetriples,twopartiesholding⟨𝑥⟩,⟨𝑦⟩canimplementmultiplicationopera-tionsFMultandreceiveastheoutputthesharesof⟨𝑥𝑦⟩attheendoftheprotocol.TheprotocolsofFMultandFBeaverareshowninAlgorithm5andAlgorithm6.Inaddition,thefunctionalityFANDimplementsthatoninput⟨𝑥⟩𝐵,⟨𝑦⟩𝐵,SPandCSlearn⟨𝑧⟩𝐵0and⟨𝑧⟩𝐵1,where𝑧=𝑥⊕𝑦.TheprotocolofFANDcanberealizedusingbit-triples(abooleanvariantoftheBeaver’striples)viaaninstanceof1-out-of-16OTs.Weomitadetaileddescriptionoftheprotocolduetospacelimits.DReLUandReLU.ThefunctionalitiesFDReLUandFReLUofDReLU/ReLUoperationsarediscussedinTables7and8.ForafinitefieldZ𝑝,𝐷𝑅𝑒𝐿𝑈(𝑥)=1if𝑥𝑝−1},lwrap=1{⟨𝑥⟩0+⟨𝑥⟩1>(𝑝−1)/2}andrwrap=1{⟨𝑥⟩0+⟨𝑥⟩1>𝑝+(𝑝−1)/2}.Then,𝐷𝑅𝑒𝐿𝑈(𝑥)is(1⊕lwrap)ifwrap=0,elseitis(1⊕rwrap)ifwrap=1.ThedetailedprotocolsforrealizingFDReLUandFReLUarediscussedinAlgorithms2and3,whereweutilizethemillionairefunctionalityFMillof[41].WeAlgorithm5Beaver’sTriplesGenerationInput:Additivesharesofrandomvectors⟨a⟩∈Z𝑛𝑝and⟨b⟩∈Z𝑛𝑝Output:Additivesharesofvector⟨c⟩∈Z𝑛𝑝,wherec=a·b1:SPcomputes𝑐𝑡𝑎←Enc(𝑝𝑘,⟨a⟩0),𝑐𝑡𝑏←Enc(𝑝𝑘,⟨b⟩0),andsends𝑐𝑡𝑎,𝑐𝑡𝑏toCS.2:CSsamplesarandomvectorr∈Z𝑛𝑝andcomputes𝑐𝑡𝑟←Enc(𝑝𝑘,a).Then,shehomomorphicallyevaluates𝑐𝑡′𝑎←Enc(𝑝𝑘,⟨a⟩0·⟨b⟩1)and𝑐𝑡′𝑏←Enc(𝑝𝑘,⟨b⟩0·⟨a⟩1),alongwith𝑐𝑡𝑑←Enc(𝑝𝑘,⟨b⟩0·⟨a⟩1+⟨a⟩0·⟨b⟩1+𝑟).Afterthat,CSsets⟨c⟩1=⟨a⟩1·⟨b⟩1−r,andsends𝑐𝑡𝑑toSP.3:SPdecryptstheaboveciphertextsd←Dec(𝑠𝑘,𝑐𝑡𝑑),andob-tains⟨c⟩0=⟨a⟩0·⟨b⟩0+d.Algorithm6Beaver’sMultiplicationProcedureInput:Additivesharesofinputs⟨x⟩∈Z𝑛𝑝and⟨y⟩∈Z𝑛𝑝,alongwithBeaver’striples⟨a⟩∈Z𝑛𝑝,⟨b⟩∈Z𝑛𝑝and⟨c⟩∈Z𝑛𝑝Output:Additivesharesofvector⟨z⟩∈Z𝑛𝑝,wherez=x·y1:SPandCSfirstset⟨e⟩=⟨x⟩−⟨a⟩mod𝑝and⟨f⟩=⟨y⟩−⟨b⟩mod𝑝2:SPandCSreconstructeandfinteractively.3:SPsets⟨z⟩0=f·⟨a⟩0+e·⟨b⟩0+⟨c⟩0andCSsets⟨z⟩1=e·f+f·⟨a⟩1+e·⟨b⟩1+⟨c⟩1.omitadetaileddescriptionoftheprotocolforrealizingFMillduetospacelimits.Table7:TheidealfunctionalityFDReLUInput:•SP:⟨𝑥⟩0∈Z𝑝.•CS:⟨𝑥⟩1∈Z𝑝,𝑟∈Z2.Output:•SP:⟨𝑧⟩𝐵0=𝑐𝑜𝑚𝑝𝑎𝑟𝑒(𝑥,0)⊕𝑟where𝑥=⟨𝑥⟩0+⟨𝑥⟩1mod𝑝.•CS:⟨𝑧⟩𝐵1=𝑟.Table8:TheidealfunctionalityFReLUInput:•SP:⟨𝑥⟩0∈Z𝑝.•CS:⟨𝑥⟩1,𝑟∈Z𝑝.Output:•SP:⟨𝑧⟩0=DReLU(𝑥)·𝑥−𝑟mod𝑝where𝑥=⟨𝑥⟩0+⟨𝑥⟩1mod𝑝.•CS:⟨𝑧⟩1=𝑟.ACSAC’21,December6–10,2021,VirtualEvent,USAMengHao,etal.B.4ProofofSpecializedBeaver’sTripletsProof.Wegiveasketchofthesecurityproofhere.Assumetwoserversaimtocompute⟨𝑥⟩·⟨𝑦⟩and⟨𝑥⟩·⟨𝑧⟩.TheBeaver’stripletsaregiven,i.e.,⟨𝑎⟩,⟨𝑏⟩,⟨𝑐⟩,⟨𝑏′⟩,⟨𝑐′⟩.Withoutlossofgenerality,weassumeSPiscorruptedbyanadversary,sincetheprotocolissym-metricwithrespecttothetwoservers.ThemessageofSPreceivedfromCSis⟨𝑥⟩1+⟨𝑎⟩1,⟨𝑦⟩1+⟨𝑏⟩1,and⟨𝑧⟩1+⟨𝑏′⟩1.Becausethetripletsarerandomlysamplefromthefield,theabovemessagesareindistinguishablefromrandomvalues.Therefore,thespecializedBeaver’smultiplicationissecureforanyadversary.CFUNCTIONALITIESANDPROTOCOLSWeintroducetheidealprimitivesandprotocolsusedbySecureFL.Boolean-integermultiplication.ThefunctionalityFBmulAofboolean-integermultiplication(Algorithm4showstheprotocol)isdescribedinTable6.Securitytriviallyfollows1-out-of-2OTs.Table6:TheidealfunctionalityFBmulAInput:•SP:⟨𝑥⟩𝐵0∈Z2,⟨𝑦⟩0∈Z𝑝.•CS:⟨𝑥⟩𝐵1∈Z2,and⟨𝑦⟩1,𝑟∈Z𝑝.Output:•SP:⟨𝑧⟩0=𝑥·𝑦−𝑟mod𝑝where𝑥=⟨𝑥⟩𝐵0⊕⟨𝑥⟩𝐵1and𝑦=⟨𝑦⟩0+⟨𝑦⟩1mod𝑝.•CS:⟨𝑧⟩1=𝑟.Beaver’smultiplicationprocedure.Giventwosharedvalues⟨𝑥⟩,⟨𝑦⟩andconstant𝑐,linearoperationssuchas⟨𝑐𝑥+𝑦⟩canbedi-rectlycomputedbypartiesvialocallyaddingtheshares.Inaddition,multiplicationoperationsonsharedvaluescanbeimplementedbycallingBeaver’smultiplicativetriples[6].TheidealfunctionalityFBeaveris:sampling𝑎,𝑏fromZ𝑝uniformlyatrandom,andreturn-ing⟨𝑎⟩0,⟨𝑏⟩0,⟨𝑎𝑏⟩0tothefirstpartyand⟨𝑎⟩1,⟨𝑏⟩1,⟨𝑎𝑏⟩1tothesecondparty.AftergeneratingtheBeaver’smultiplicativetriples,twopartiesholding⟨𝑥⟩,⟨𝑦⟩canimplementmultiplicationopera-tionsFMultandreceiveastheoutputthesharesof⟨𝑥𝑦⟩attheendoftheprotocol.TheprotocolsofFMultandFBeaverareshowninAlgorithm5andAlgorithm6.Inaddition,thefunctionalityFANDimplementsthatoninput⟨𝑥⟩𝐵,⟨𝑦⟩𝐵,SPandCSlearn⟨𝑧⟩𝐵0and⟨𝑧⟩𝐵1,where𝑧=𝑥⊕𝑦.TheprotocolofFANDcanberealizedusingbit-triples(abooleanvariantoftheBeaver’striples)viaaninstanceof1-out-of-16OTs.Weomitadetaileddescriptionoftheprotocolduetospacelimits.DReLUandReLU.ThefunctionalitiesFDReLUandFReLUofDReLU/ReLUoperationsarediscussedinTables7and8.ForafinitefieldZ𝑝,𝐷𝑅𝑒𝐿𝑈(𝑥)=1if𝑥𝑝−1},lwrap=1{⟨𝑥⟩0+⟨𝑥⟩1>(𝑝−1)/2}andrwrap=1{⟨𝑥⟩0+⟨𝑥⟩1>𝑝+(𝑝−1)/2}.Then,𝐷𝑅𝑒𝐿𝑈(𝑥)is(1⊕lwrap)ifwrap=0,elseitis(1⊕rwrap)ifwrap=1.ThedetailedprotocolsforrealizingFDReLUandFReLUarediscussedinAlgorithms2and3,whereweutilizethemillionairefunctionalityFMillof[41].WeAlgorithm5Beaver’sTriplesGenerationInput:Additivesharesofrandomvectors⟨a⟩∈Z𝑛𝑝and⟨b⟩∈Z𝑛𝑝Output:Additivesharesofvector⟨c⟩∈Z𝑛𝑝,wherec=a·b1:SPcomputes𝑐𝑡𝑎←Enc(𝑝𝑘,⟨a⟩0),𝑐𝑡𝑏←Enc(𝑝𝑘,⟨b⟩0),andsends𝑐𝑡𝑎,𝑐𝑡𝑏toCS.2:CSsamplesarandomvectorr∈Z𝑛𝑝andcomputes𝑐𝑡𝑟←Enc(𝑝𝑘,a).Then,shehomomorphicallyevaluates𝑐𝑡′𝑎←Enc(𝑝𝑘,⟨a⟩0·⟨b⟩1)and𝑐𝑡′𝑏←Enc(𝑝𝑘,⟨b⟩0·⟨a⟩1),alongwith𝑐𝑡𝑑←Enc(𝑝𝑘,⟨b⟩0·⟨a⟩1+⟨a⟩0·⟨b⟩1+𝑟).Afterthat,CSsets⟨c⟩1=⟨a⟩1·⟨b⟩1−r,andsends𝑐𝑡𝑑toSP.3:SPdecryptstheaboveciphertextsd←Dec(𝑠𝑘,𝑐𝑡𝑑),andob-tains⟨c⟩0=⟨a⟩0·⟨b⟩0+d.Algorithm6Beaver’sMultiplicationProcedureInput:Additivesharesofinputs⟨x⟩∈Z𝑛𝑝and⟨y⟩∈Z𝑛𝑝,alongwithBeaver’striples⟨a⟩∈Z𝑛𝑝,⟨b⟩∈Z𝑛𝑝and⟨c⟩∈Z𝑛𝑝Output:Additivesharesofvector⟨z⟩∈Z𝑛𝑝,wherez=x·y1:SPandCSfirstset⟨e⟩=⟨x⟩−⟨a⟩mod𝑝and⟨f⟩=⟨y⟩−⟨b⟩mod𝑝2:SPandCSreconstructeandfinteractively.3:SPsets⟨z⟩0=f·⟨a⟩0+e·⟨b⟩0+⟨c⟩0andCSsets⟨z⟩1=e·f+f·⟨a⟩1+e·⟨b⟩1+⟨c⟩1.omitadetaileddescriptionoftheprotocolforrealizingFMillduetospacelimits.Table7:TheidealfunctionalityFDReLUInput:•SP:⟨𝑥⟩0∈Z𝑝.•CS:⟨𝑥⟩1∈Z𝑝,𝑟∈Z2.Output:•SP:⟨𝑧⟩𝐵0=𝑐𝑜𝑚𝑝𝑎𝑟𝑒(𝑥,0)⊕𝑟where𝑥=⟨𝑥⟩0+⟨𝑥⟩1mod𝑝.•CS:⟨𝑧⟩𝐵1=𝑟.Table8:TheidealfunctionalityFReLUInput:•SP:⟨𝑥⟩0∈Z𝑝.•CS:⟨𝑥⟩1,𝑟∈Z𝑝.Output:•SP:⟨𝑧⟩0=DReLU(𝑥)·𝑥−𝑟mod𝑝where𝑥=⟨𝑥⟩0+⟨𝑥⟩1mod𝑝.•CS:⟨𝑧⟩1=𝑟.ACSAC’21,December6–10,2021,VirtualEvent,USAMengHao,etal.B.4ProofofSpecializedBeaver’sTripletsProof.Wegiveasketchofthesecurityproofhere.Assumetwoserversaimtocompute⟨𝑥⟩·⟨𝑦⟩and⟨𝑥⟩·⟨𝑧⟩.TheBeaver’stripletsaregiven,i.e.,⟨𝑎⟩,⟨𝑏⟩,⟨𝑐⟩,⟨𝑏′⟩,⟨𝑐′⟩.Withoutlossofgenerality,weassumeSPiscorruptedbyanadversary,sincetheprotocolissym-metricwithrespecttothetwoservers.ThemessageofSPreceivedfromCSis⟨𝑥⟩1+⟨𝑎⟩1,⟨𝑦⟩1+⟨𝑏⟩1,and⟨𝑧⟩1+⟨𝑏′⟩1.Becausethetripletsarerandomlysamplefromthefield,theabovemessagesareindistinguishablefromrandomvalues.Therefore,thespecializedBeaver’smultiplicationissecureforanyadversary.CFUNCTIONALITIESANDPROTOCOLSWeintroducetheidealprimitivesandprotocolsusedbySecureFL.Boolean-integermultiplication.ThefunctionalityFBmulAofboolean-integermultiplication(Algorithm4showstheprotocol)isdescribedinTable6.Securitytriviallyfollows1-out-of-2OTs.Table6:TheidealfunctionalityFBmulAInput:•SP:⟨𝑥⟩𝐵0∈Z2,⟨𝑦⟩0∈Z𝑝.•CS:⟨𝑥⟩𝐵1∈Z2,and⟨𝑦⟩1,𝑟∈Z𝑝.Output:•SP:⟨𝑧⟩0=𝑥·𝑦−𝑟mod𝑝where𝑥=⟨𝑥⟩𝐵0⊕⟨𝑥⟩𝐵1and𝑦=⟨𝑦⟩0+⟨𝑦⟩1mod𝑝.•CS:⟨𝑧⟩1=𝑟.Beaver’smultiplicationprocedure.Giventwosharedvalues⟨𝑥⟩,⟨𝑦⟩andconstant𝑐,linearoperationssuchas⟨𝑐𝑥+𝑦⟩canbedi-rectlycomputedbypartiesvialocallyaddingtheshares.Inaddition,multiplicationoperationsonsharedvaluescanbeimplementedbycallingBeaver’smultiplicativetriples[6].TheidealfunctionalityFBeaveris:sampling𝑎,𝑏fromZ𝑝uniformlyatrandom,andreturn-ing⟨𝑎⟩0,⟨𝑏⟩0,⟨𝑎𝑏⟩0tothefirstpartyand⟨𝑎⟩1,⟨𝑏⟩1,⟨𝑎𝑏⟩1tothesecondparty.AftergeneratingtheBeaver’smultiplicativetriples,twopartiesholding⟨𝑥⟩,⟨𝑦⟩canimplementmultiplicationopera-tionsFMultandreceiveastheoutputthesharesof⟨𝑥𝑦⟩attheendoftheprotocol.TheprotocolsofFMultandFBeaverareshowninAlgorithm5andAlgorithm6.Inaddition,thefunctionalityFANDimplementsthatoninput⟨𝑥⟩𝐵,⟨𝑦⟩𝐵,SPandCSlearn⟨𝑧⟩𝐵0and⟨𝑧⟩𝐵1,where𝑧=𝑥⊕𝑦.TheprotocolofFANDcanberealizedusingbit-triples(abooleanvariantoftheBeaver’striples)viaaninstanceof1-out-of-16OTs.Weomitadetaileddescriptionoftheprotocolduetospacelimits.DReLUandReLU.ThefunctionalitiesFDReLUandFReLUofDReLU/ReLUoperationsarediscussedinTables7and8.ForafinitefieldZ𝑝,𝐷𝑅𝑒𝐿𝑈(𝑥)=1if𝑥𝑝−1},lwrap=1{⟨𝑥⟩0+⟨𝑥⟩1>(𝑝−1)/2}andrwrap=1{⟨𝑥⟩0+⟨𝑥⟩1>𝑝+(𝑝−1)/2}.Then,𝐷𝑅𝑒𝐿𝑈(𝑥)is(1⊕lwrap)ifwrap=0,elseitis(1⊕rwrap)ifwrap=1.ThedetailedprotocolsforrealizingFDReLUandFReLUarediscussedinAlgorithms2and3,whereweutilizethemillionairefunctionalityFMillof[41].WeAlgorithm5Beaver’sTriplesGenerationInput:Additivesharesofrandomvectors⟨a⟩∈Z𝑛𝑝and⟨b⟩∈Z𝑛𝑝Output:Additivesharesofvector⟨c⟩∈Z𝑛𝑝,wherec=a·b1:SPcomputes𝑐𝑡𝑎←Enc(𝑝𝑘,⟨a⟩0),𝑐𝑡𝑏←Enc(𝑝𝑘,⟨b⟩0),andsends𝑐𝑡𝑎,𝑐𝑡𝑏toCS.2:CSsamplesarandomvectorr∈Z𝑛𝑝andcomputes𝑐𝑡𝑟←Enc(𝑝𝑘,a).Then,shehomomorphicallyevaluates𝑐𝑡′𝑎←Enc(𝑝𝑘,⟨a⟩0·⟨b⟩1)and𝑐𝑡′𝑏←Enc(𝑝𝑘,⟨b⟩0·⟨a⟩1),alongwith𝑐𝑡𝑑←Enc(𝑝𝑘,⟨b⟩0·⟨a⟩1+⟨a⟩0·⟨b⟩1+𝑟).Afterthat,CSsets⟨c⟩1=⟨a⟩1·⟨b⟩1−r,andsends𝑐𝑡𝑑toSP.3:SPdecryptstheaboveciphertextsd←Dec(𝑠𝑘,𝑐𝑡𝑑),andob-tains⟨c⟩0=⟨a⟩0·⟨b⟩0+d.Algorithm6Beaver’sMultiplicationProcedureInput:Additivesharesofinputs⟨x⟩∈Z𝑛𝑝and⟨y⟩∈Z𝑛𝑝,alongwithBeaver’striples⟨a⟩∈Z𝑛𝑝,⟨b⟩∈Z𝑛𝑝and⟨c⟩∈Z𝑛𝑝Output:Additivesharesofvector⟨z⟩∈Z𝑛𝑝,wherez=x·y1:SPandCSfirstset⟨e⟩=⟨x⟩−⟨a⟩mod𝑝and⟨f⟩=⟨y⟩−⟨b⟩mod𝑝2:SPandCSreconstructeandfinteractively.3:SPsets⟨z⟩0=f·⟨a⟩0+e·⟨b⟩0+⟨c⟩0andCSsets⟨z⟩1=e·f+f·⟨a⟩1+e·⟨b⟩1+⟨c⟩1.omitadetaileddescriptionoftheprotocolforrealizingFMillduetospacelimits.Table7:TheidealfunctionalityFDReLUInput:•SP:⟨𝑥⟩0∈Z𝑝.•CS:⟨𝑥⟩1∈Z𝑝,𝑟∈Z2.Output:•SP:⟨𝑧⟩𝐵0=𝑐𝑜𝑚𝑝𝑎𝑟𝑒(𝑥,0)⊕𝑟where𝑥=⟨𝑥⟩0+⟨𝑥⟩1mod𝑝.•CS:⟨𝑧⟩𝐵1=𝑟.Table8:TheidealfunctionalityFReLUInput:•SP:⟨𝑥⟩0∈Z𝑝.•CS:⟨𝑥⟩1,𝑟∈Z𝑝.Output:•SP:⟨𝑧⟩0=DReLU(𝑥)·𝑥−𝑟mod𝑝where𝑥=⟨𝑥⟩0+⟨𝑥⟩1mod𝑝.•CS:⟨𝑧⟩1=𝑟.60