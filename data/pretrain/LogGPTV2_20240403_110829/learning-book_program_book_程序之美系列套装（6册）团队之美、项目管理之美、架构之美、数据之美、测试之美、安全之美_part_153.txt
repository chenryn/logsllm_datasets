OMG架构委员会的两任成员，IEEE软件顾问委员会的主席，最近，
他成为MentorGraphics的嵌人式软件部T门的首席科学家。
BertrandMeyer是ETHZurich的软件工程教授，也是Eiffel软件的首席
架构师，他领导并设计了EiffelStudio环境和大量的库。他是一些畅
销书的作者，其中包括获得Jolt大奖的《Object-OrientedSoftware
Construction》（PrenticeHall）。他也因为在对象技术和Eifel方面
的工作获得了ACM软件系统大奖和Dahl-Nygaard大奖，并获得了
St.Petersburg州立技术大学的荣誉博士学位。他的研究对象涉及面向
对象技术、编程语言、软件验证（包括测试、并发和规范方法）。
他也是一名活跃的顾问和讲师。
WilliamJ.Mitchell是MIT架构和媒体艺术与科学系的Alexander
Dreyfoos教授，他领导着MIT媒体实验室和MIT设计实验室的Smart
Cities团队。他以前曾担任MIT架构和计划学院的院长。他最近的新
书是《World's GreatestArchitect》和《ImaginingMIT》（都由MIT出
版社出版）。
DerekMurray是剑桥大学计算机实验室的博士生。他在2006年加入
Xen项目，主要工作是通过重新设计控制栈来改进Xen的安全性。他
现在的研究主要是改进大规模分布式系统的容错性，但他还是偶尔
858
---
## Page 860
会涉及系统核心。Derek在2006年从爱丁堡大学获得了高性能计算
专业的硕士学位，2005年获得了Glasgow大学的计算机学士学位。
RhysNewman在十多年前于牛津大学完成博士学位时，就开始使用
Java，那时Java还只有几年历史。在他早期的研究中，他利用纯
Java环境展示了高性能实时场景处理的实现方法，即使当时还是使
用早期JIT化的JIVM。从那时起，他同时在学界和业界工作，一次次
证明Java平台实际上有多灵活、多高效、多快。在超过20年的软件
工程生涯中，他获得了多个业界杰出技术奖项，最近他回到了牛
津，承担了网格计算领域的突破性研究工作。JPC是最新研究工作
的一部分。
MichaelNygard致力于在全国帮助开发者提高水平和减少痛苦。他
和他遇到的每一个人分享他对改进的热情和活力，有时甚至没有得
到对方的同意。Michael花了20年中的大部分时间学习对专业程序员
有意义的事，他关心艺术、质量和技艺。他总是愿意在那些全职
的、真心投入工作的开发者（那些“觉醒的"开发者）身上花时间。
在另一方面，他不能容忍缺乏兴趣或浪费潜力。Michael在近20年来
一直是专业的程序员和架构师。在这段时间里，他为美国政府、军
方、银行、金融业、农业和零售业交付了运营系统。通常，Michael
都要面对他自已开发的系统。这种实际运营的经历改变了他对软件
架构和开发的看法。他参与了一个Tier1零售网站的初期开发，并
且常常作为其他在线业务的“流动解决问题专家”。这些经验让他对
在相当不友好的环境下构建高性能、高可靠性的软件有了独特的看
法。最近，Michael编写了《Release It！Design and Deploy
Production-ReadySoftware》（PragmaticProgrammers），该书获得
了2008年的Jolt生产力大奖。他的其他文字可以在
http://www.michaelnygard.com/blog上读到。
IanRogers是曼彻斯特大学高级处理器技术研究组的研究员。他的博
士研究工作是关于Dymamite二进制翻译器的，该技术实现了商用，
现在是许多二进制翻译器产品的一部分，包括Apple的Rosetta。他
最近的学术研究工作一直是编程语言设计、运行时环境和虚拟机环
境，特别是如何自动创建它们并有效地使用并行技术。他是Jikes研
究虚拟机的主要贡献者，是开发团队的核心成员。
BrianSletten是自由的、受过艺术教育的软件工程师，关注forward-
learming技术。他曾担任过系统架构师、开发者、现场指导者和培训
师。他在世界各地的会议上发表演讲，并为一些在线出版物编写关
859
---
## Page 861
于面向Web技术的文章。他的经验涉及国防、金融和商业领域。他
曾设计并建造了网络矩阵式交换控制系统、在线游戏、3D仿真/可
视化环境、因特网分布式计算平台、P2P和基于Web的语义系统。他
拥有WilliamandMary大学的计算机科学学士学位，目前居住在弗吉
尼亚的Fairfax。他是Bosatsu咨询公司的总裁，该公司为Web架构、
面向资源的计算、语义Web、高级用户界面、可伸缩系统、安全和
其他20世纪末21世纪初的技术提供专业的咨询服务。
DiomidisSpinellis是希腊雅典经济与商业大学管理科学与技术系的
副教授。他的研究领域包括软件工程、计算机安全和编程语言。他
也编写了两本“开放源码方面"的书，由Addison-Wesley出版：
《CodeReading》（获得了2004年的软件开发生产力大奖）和
《CodeQuality》（获得了2007年软件开发生产力大奖，编辑注）。
他也写了几十篇科学论文。他是IEEESoftware编辑委员会的成员，
负责定期的"ToolsoftheTrade"栏目。Diomidis是FreeBSD的提交
者，也是UMLGraph和其他开源软件包、库和工具的开发者。他拥
有软件工程的硕士学位和计算机科学博士学位，都是在Imperial
CollegeLondon获得的。Diomidis是ACM的高级成员，也是IEEE和
UsenixAssociation的成员。
JimWaldo是Sun微系统实验室的杰出工程师，负责研究下一代大规
模分布式系统。他目前是ProjectDarkstar的技术负责人，该系统是
针对大规模多人在线游戏和虚拟世界而设计的多线程、分布式基础
设施。在此之前，他曾是Jini的首席架构师，Jini是基于Java的分布
式编程系统。Jim编写了《TheEvolutionofC++：LanguageDesignin
theMarketplace ofIdeas》（MIT出版社），也是《TheJini
Specification《Addison-Wesley》的合著者之一。他曾是美国国家学
术委员会的共同主席，编辑并出版了《EngagingPrivacyand
InformationTechnologyinaDigitalAge》一书。Jim也是哈佛大学的辅
助教师，在计算机科学系教授分布式计算和策略与技术相关的内
容。Jim拥有马萨诸塞大学（Amherst）的哲学博士学位。
DavidWeiss拥有UnionCollege的计算机科学学士学位，并拥有马里
兰大学的计算机科学硕士和博士学位。他目前是Avaya实验室的软
件技术研究部的领导，他关注软件开发效率改进的普遍问题和
Avaya软件并发过程改进的特殊问题。在第二个问题上，他领导了
Avaya软件技术研究中心。以前，他曾是朗迅技术贝尔实验室软件
生产研究部的主任，该部门负责研究如何改进软件并发的效率。在
加入贝尔实验室之前，他是软件生产力协会（SPC）复用和度量部
860
---
## Page 862
门的主任，该协会由14个大型的美国航空公司组成。在加入SPC之
前，Weiss博士在技术评估办公室度过了一年的时间，在那里他与同
事共同完成了StrategicDefenseInitiative的技术评估。在1985—1986
学年，他是WangInstitute的访问学者，在许多年里，他一直是华盛
顿特区Naval研究实验室（NRL）计算机科学和系统部门的研究员。
他也是一名程序员和数学家。Dave的主要研究方向是软件工程领
域，特别是软件开发过程和方法学、软件设计和软件测量。他最为
人知的是发明了软件测量的“目标-问题-测量指标"方法，软件系统
模块化结构的工作，以及软件生产线工程的工作。他是Synthesis过
程及其后继FAST过程的共同发明人。他与别人共同编著了两本书：
《SoftwareProduct-LineEngineering》和《SoftwareFundamentals：
CollectedPapersofDavidL.Parnas》（都由Addison-Wesley出版）。
译者简介
王海鹏1994年毕业于华东师范大学。拥有理学士（物理）和文学士
（英国语言文学）学位。独立的咨询顾问、培训讲师、译者和软件
开发者。已翻译十余本软件开发书籍，主题涵盖敏捷方法学、需求
工程、UML建模和测试。拥有15年软件开发经验，目前主要的研究
领域是软件架构和方法学，致力于提高软件开发的品质和效率。
蔡黄辉江苏启东人。1999年毕业于上海交通大学，毕业后一直从事
软件开发工作，主要使用Java做Web方面的底层开发。现居住在上
海。联系方式：PI:EMAIL。
徐锋中国系统分析员顾问团（CSAI）软件工程首席顾问，中国软件
技术大会杰出贡献专家，资深咨询顾问。主要研究领域为需求工
程、系统分析与设计、软件估算，致力于推动软件工程方法论的落
地应用。曾在《程序员》等媒体发表了《实战OO》、《项目管理
三步曲》、《大话Design》等多个专栏文章，著有《软件需求最佳
实践》、《UML面向对象建模基础》等多本书籍，翻译了《UML
2.0实战》、《AOSD中文版》、《CloudtoCode中文版》等多本相
关技术书籍。
序StephenJ.Mellor
使用随意的、非正式的工程技术去开发高性能、高可靠性和高品质
的软件系统会遇到非常多的困难。这些技术对于过去要求较低的系
统也许还能对付，而目前系统的复杂性已经达到了这样一种程度：
861
---
## Page 863
如果不开发并维护一个基础架构，利用它将系统组织成一致的整体
并避免零碎的实现，那么我们就无法应对，必将导致测试和集成失
败。
但是，建立一个架构是一项复杂的任务。很难得到合适的例子，因
为要么必须考虑专有权，要么刚好相反，有人需要向各式各样的环
境推销某一种架构风格。架构是很大的概念，这使得很难在不吓坏
读者的情况下来记录或描述。
但是，美丽的架构展示了一些普遍原则，下面我列出了几点：
一处一个事实
重复导致错误，所以应该避免。每个事实应该是单一的、不可分解
的单元，每个事实必须独立于其他事实。当改变发生时（这是不可
避免的），只有一个地方需要修改。数据库设计者很熟悉这一原
则，它以范式（normalization）之名规范化了。这个原则也不那么
规范地应用于行为，名为提取公因式（factoring），即同样的功能
提取出来，放到独立的模块中。
美丽的架构找到了一些方法来定位信息和行为。在运行时，形成了
分层，即系统可以按层来划分，每个层代表了一层抽象
（abstraction）或一个领域（domain）。
自动传播
一处一个事实听起来不错，但出于效率的考虑，某些数据或行为常
常会重复。为了维护一致性和正确性，这些事实的传播必须在构建
时自动进行。
美丽的架构是由一些构建工具支持的，结果导致了元编程
（metaprogramming），将一个事实从一处传播到多处，在那些地方
有效地使用它们。
架构也包含构建
架构不仅包含运行时系统，而且必须包含它的构建方式。只关注运
行时代码会导致架构随时间的推移而退化。
862
---
## Page 864
美丽的架构是经过深思熟虑的。它们不仅在运行时是美丽的，在构
建时也是美丽的；利用同样的数据、函数和技术来构建系统，就像
在运行时使用的那样。
最少量机制
实现某个功能的最佳方式要视情况而定，但是美丽的架构不会追求
“最佳”。例如，有许多种方式可以存储和查找数据，但如果系统利
用一种机制达到了性能要求，就会考虑编写、验证和维护较少的代
码，以及占用较少的内存。
美丽的架构使用一组最少的机制来满足整体的需求。找到每种情况
下的“最佳”，会导致各种容易出错的机制的产生，而用极简的方式
来添加机制则会得到更小的、更快的、更健壮的系统。
构建引擎
如果您希望构建脆弱的系统，就采用IvarJacobson的建议，将架构
建立在用例的基础上，每次实现一个功能（例如，使用“控制器"对
象）。但是，可扩展的系统依赖于虚拟机的构建，即由更高层提供
的数据来“编程”的引擎，一次实现多个应用功能。
这个原则以多种外观出现。虚拟机的“分层"可以追溯到Edsger
量，让数据来定义特定情况下的具体功能。这些引擎是高度可复用
的，也是美丽的。
O（G），增长的阶
在以前，我们会考虑算法的“阶”，例如，根据对一组一定数量的元
素进行排序的时间来分析排序的性能。许多书籍都是围绕这个主题
来写的。