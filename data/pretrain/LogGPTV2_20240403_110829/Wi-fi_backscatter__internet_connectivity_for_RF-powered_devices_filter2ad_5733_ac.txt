sitions of bits output by our receiver circuit. Thus, we keep the
microcontroller asleep until a new transition occurs at the com-
parator’s output. We then correlate the intervals between these
transitions with the reference intervals for the preamble. If the
transition intervals match the preamble, the receiver knows that
a packet is about to begin and thus enters the next mode.
• Packet decoding mode. In this mode, the microcontroller again
reduces the power consumption by sampling the signal only in
the middle of each transmitted bit. Speciﬁcally, the microcon-
troller wakes up brieﬂy to capture each sample, then sleeps until
the next bit, thus saving considerable power. After the known
packet length has expired, the microcontroller fully wakes up
and attempts to decode the packet by performing operations such
Figure 8—Receiver circuit at the tag to decode the transmis-
sions in Fig. 7. The receiver has four main components: an en-
velope detector to remove the 2.4 GHz carrier frequency, a peak
ﬁnder that stores the peak energy value of the Wi-Fi signals in its
capacitor, a set-threshold circuit that halves the threshold values,
and a comparator that outputs a one bit when the received energy is
greater than the threshold value and a zero bit otherwise.
as framing and CRC checks for the Wi-Fi Backscatter messages
transmitted on the downlink.
5. WI-FI BACKSCATTER IN A GENERAL WI-FI
NETWORK
Typical Wi-Fi networks have multiple Wi-Fi devices that all
share the same wireless medium; most of these devices are likely to
be unaware of the Wi-Fi Backscatter protocol. Wi-Fi Backscatter’s
downlink design addresses the problem of multiple Wi-Fi devices
by using a CTS_to_SELF packet that prevents other Wi-Fi devices
from interfering with its transmissions. The presence of multiple
Wi-Fi devices, however, is problematic for the uplink design in §3.
In particular, the Wi-Fi reader uses the channel measurements
from the helper’s packets to decode the information send by the Wi-
Fi Backscatter tag. The assumption, however, is that for every bit
sent by the Wi-Fi Backscatter tag, the Wi-Fi reader receives channel
measurements from at least a few helper packets. Since Wi-Fi uses
a random access MAC protocol, the number of packets per second
transmitted from the Wi-Fi helper depends on the trafﬁc in the net-
work. Ideally, if the Wi-Fi Backscatter tag can identify the helper
packets, it can ensure that there are an equal number of helper pack-
ets for each transmitted bit. This is however difﬁcult since our Wi-Fi
Backscatter tags cannot decode the Wi-Fi headers and hence cannot
accurately identify the helper packets.
Wi-Fi Backscatter addresses this problem by having the Wi-Fi
Backscatter device adapt its transmission rate for different network
trafﬁc loads. Speciﬁcally, the Wi-Fi reader computes the average
number of packets the helper (e.g., an AP) can transmit for the cur-
rent network conditions. Suppose the Wi-Fi helper can transmit, on
average, N packets per second given the current network load and
suppose the Wi-Fi reader requires the channel information from M
packets to reliably decode each bit. Given these parameters, the rate
at which the Wi-Fi Backscatter tag sends bits is given by N
M bits per
second. The Wi-Fi reader computes this bit rate and transmits this
information in the query packet addressed to the Wi-Fi Backscatter
tag. The latter uses this bit rate while transmitting bits on the uplink
to the Wi-Fi reader. We note the following key points:
• Dealing with bursty trafﬁc. While the above computation is based
on the average statistics, Internet trafﬁc in general is known for
its bursty nature. Thus, it is unlikely that every bit from the Wi-
Fi Backscatter tag affects the same number of helper packets.
To address this problem, the Wi-Fi reader uses the timestamp
information in the Wi-Fi header to bin the channel measurements
to the correct bit boundaries. Further, the Wi-Fi reader provides
conservative bit rate estimates to the Wi-Fi Backscatter device
to minimize the probability of not receiving channel information
for some of the transmitted bits.
612t
e
a
R
r
o
r
r
E
t
i
B
t
e
a
R
r
o
r
r
E
t
i
B
100
10-1
10-2
10-3
10-4
 30 pkts/bit
  6 pkts/bit
  3 pkts/bit
 0
 10
 20
 30
 40
 50
 60
 70
Distance between Wi-Fi reader and Wi-Fi Backscatter prototype (in cm)
(a) CSI
100
10-1
10-2
10-3
10-4
 0
 10
 20
 30
 40
 50
 60
 70
 30 pkts/bit
  6 pkts/bit
  3 pkts/bit
Distance between Wi-Fi reader and Wi-Fi Backscatter prototype (in cm)
(b) RSSI
Figure 10—Effect of distance on the uplink Bit Error Rate. Fig-
ure (a) and (b) show the results when the Wi-Fi reader decodes
using the CSI and RSSI information respectively. The ﬁgure also
plots the BER for different number of packets per transmitted bit.
The plots show that as the average number of Wi-Fi packets per bit
increases, both the BER and the range improve. Further, the CSI
measurements perform better than the RSSI. Finally, the receiver
can decode with BERs less than 10−2 up to ranges of about 65 cm
and 30 cm using CSI and RSSI respectively.
of around 50% at a distance of 10 km from a TV broadcast tower,
independent of the distance from the Wi-Fi reader.
7. UPLINK EVALUATION
First, we evaluate Wi-Fi Backscatter’s uplink communication
from our prototype device to the Wi-Fi reader. We measure the
impact of various parameters including the distance between our
prototype and the Wi-Fi reader, the transmission rate of the Wi-Fi
helper, and its distance from the prototype device.
7.1 Uplink BER versus Distance
We compute the uplink bit error rate (BER) observed at the Wi-
Fi reader as a function of the distance from the prototype device. In
this section, we focus on the efﬁciency of our decoding algorithm
from §3.2 that is designed to operate at short ranges. Later in §10,
we evaluate the long range uplink communication design from §3.4.
Experiments. We use Intel Link 5300 cards as both our Wi-Fi
helper and reader devices. The devices are conﬁgured to run on
Wi-Fi channel 6 in the 2.4 GHz range. The results for the other
2.4 GHz Wi-Fi channels are similar and are not presented for lack
of space. We inject trafﬁc from the Wi-Fi helper and conﬁgure the
Wi-Fi reader to be in monitor mode. The helper is placed three me-
ters away from the prototype device. The reader collects the CSI in-
formation for the helper’s packets, using the Intel CSI Tool toolkit
Figure 9—Wi-Fi Backscatter prototype antenna. The prototype
antenna is designed to operate across the 2.4 GHz Wi-Fi channels
and can both modulate the Wi-Fi channel as well as harvest RF
signals. Our antenna consists of an array of six small micro-strip
patch elements, each with dimensions 40.6 by 30.9 mm. We note
that in principle, one can decrease the size of this antenna by using
a number of other topologies that can achieve similar qualities. We
use this topology due to its fabrication simplicity.
• Leveraging trafﬁc from all Wi-Fi devices. In general, the Wi-Fi
reader can leverage transmissions from all Wi-Fi devices in the
network and combine the channel information across all of them
to achieve a high data rate in a busy network. Since most of the
trafﬁc in a wireless network is downlink trafﬁc [16], using the
AP as a helper and leveraging its transmissions can eliminate the
need for introducing additional trafﬁc.
• Using the AP’s beacon packets. The Wi-Fi reader can use the
periodic beacon packets transmitted by Wi-Fi APs to decode
the bits from the tag. Such an approach, while reducing the
data rates, would have minimal overhead on the Wi-Fi network
throughput. In §7.5, we evaluate the feasibility of this approach.
6. PROTOTYPE IMPLEMENTATION
We build a prototype of our Wi-Fi Backscatter tag that is opti-
mized to operate across the 2.4 GHz Wi-Fi channels. The prototype
has a 2.4 GHz antenna, shown in Fig. 9, that can both modulate the
Wi-Fi channel and harvest RF signals. The harvesting circuit we
use is similar to those proposed in prior systems [12, 26, 23]. Our
antenna is comprised of an array of six elements, each of which is
a small micro-strip patch that is connected to both an RF switch
and a full-wave diode rectiﬁer that provides RF-to-DC power con-
version. The ADG902 RF switch [1] from Analog Devices was se-
lected for its broad bandwidth, low power, and good switching iso-
lation at 2.4 GHz. Skyworks SMS7630 RF detector diodes [4] were
selected for their high rectiﬁcation efﬁciency at low RF power lev-
els. The antenna is connected to an MSP430G2553 running custom
ﬁrmware with receive and transmit logic implementations.
On the uplink, a hardware timer module of the TI MSP430
microcontroller is used to generate a bit clock and drives a sim-
ple ﬁrmware module. Each packet consists of a Wi-Fi Backscatter
preamble, payload and a postamble. The reader uses the preamble
and postamble to recover the bit clock from the transmitted sig-
nals. We use a 13-bit Barker code that is known for its good auto-
correlation properties [6]. For the downlink, we implement the cir-
cuit design in §4.2 that allows us to identify the presence of Wi-Fi
packets. We implement the energy saving mechanisms as described
in §4.2. Each packet has a preamble, a payload, and a postam-
ble. We note that the power consumption of our transmit circuit
is 0.65 µW, while that of the receiver circuit is 9.0 µW. Our results
show that the Wi-Fi power harvester can continuously run both the
transmitter and receiver from a distance of one foot from the Wi-Fi
reader. Additionally, in a dual-antenna system with both Wi-Fi and
TV harvesting, the full system could be powered with a duty cycle
613t
e
a
R
r
o
r
r
E
t
i
B
101
100
10-1
10-2
10-3
10-4
Our Algorithm
Random Frequency
)
s
p
b
(
e
a
R
t
t
i
l
i
B
e
b
a
e
v
e
h
c
A
 1000
 800
 600
 400
 200
 0
 0
 10
 20
 30
 40
 50
 60
 70
 500
 1000
 1500
 2000
 2500
 3000
Distance between Wi-Fi reader and Wi-Fi Backscatter prototype (in cm)
Helper Tranmission Rate (pkts/s)
Figure 11—Effect of frequency diversity on BER. The ﬁgure
shows the BER for two algorithms: one that randomly picks a Wi-
Fi sub-channel and decodes, and the second is Wi-Fi Backscatter’s
algorithm that leverages frequency diversity to combine informa-
tion across all the sub-channels. The ﬁgure shows that leveraging
frequency diversity provides substantial beneﬁts.
Figure 12—Uplink Bit rate versus transmission rate at the Wi-
Fi helper. The average achievable bit rate is the maximum bit rate,
amongst the tested rates of 100, 200, 500, and 1000 bits/s, that can
be decoded at the Wi-Fi reader with a BER less than 10−2. The plot
shows that the bit rate is around 100 bps and 1 kbps with transmis-
sion rates of 500 and 2070 packets/second.
from [13] on its three antennas. The Wi-Fi reader is conﬁgured
to perform the algorithm in §3.2 that ﬁrst identiﬁes the good Wi-
Fi sub-channels, combines them using maximum-ratio combining,
and ﬁnally uses majority voting across channel measurements to
decode the bits. We note that one of the antennas on our Intel device
almost always reported signiﬁcantly low CSI values. To avoid intro-
ducing bias, we included the CSI measurements from this antenna
in our algorithm. The prototype device is set to transmit at vari-
ous distances between ﬁve centimeters and 65 centimeters from the
Wi-Fi reader. In each run of the experiment, the prototype device
transmits a 90-bit payload message (including the Wi-Fi Backscat-
ter preamble). We repeat the experiment 20 times at each distance
value and compute the bit error rate (BER) by comparing the re-
ceived bits with those transmitted across all the packet transmis-
sions in the location. Since we transmit a total of 1800 bits, if we
do not see any bit errors, we set the BER to 5 × 10−4. The bit error
rate depends on the average number of channel measurements for
each bit; thus, we measure the BERs for different average number
of Wi-Fi packets from the helper we use to represent each bit.
Results. Fig. 10(a) shows the BER as a function of the distance be-
tween the Wi-Fi reader and the prototype device. Fig. 10 (b) shows
the corresponding results when using the RSSI information at the
Wi-Fi reader, instead of CSI. The plots show the following:
• The BER increases with the distance between the prototype de-
vice and the Wi-Fi reader. This is expected because as the dis-
tance increases, the reﬂections from the prototype device experi-
ence higher attenuation and hence are more susceptible to noise.
• As the number of packets per bit increases, the BER signiﬁ-
cantly reduces. This is because with more packets per bit, the
Wi-Fi reader receives more channel measurements and hence can
achieve higher reliability using the majority voting procedure.
• The CSI information provides higher ranges and better BERs
than the RSSI. This is because CSI gives us detailed channel in-
formation in each Wi-Fi OFDM sub-channel. In contrast, RSSI
is a single value averaged across all the sub-channels. Thus, CSI
values have more information and hence achieve lower BERs.
• Wi-Fi Backscatter can achieve distanced of up to 65 cms using
an average of 30 packets/bit, with the CSI information. The RSSI
information, on the other hand, provides a range of about 30 cms
assuming a target BER of 10−2. In §10, we show how to increase
this range further using our correlation mechanism.
Effect of frequency diversity. Next we evaluate the beneﬁts of
leveraging frequency diversity across all the Wi-Fi sub-channels.
Speciﬁcally, we compare two main schemes:
1. Random-Subchannel: We pick a random Wi-Fi sub-channel and
use it to decode bits from the prototype device.
2. Our algorithm: We use the algorithm described in §3.2 which
picks the best Wi-Fi sub-channels, combines them using maximum-
ratio combining, and then decodes bits from the prototype device.
Fig. 11 shows the BER results using the two algorithms for the
case where we use 30 Wi-Fi packets per bit. The plot shows that
using a random Wi-Fi sub-channel performs poorly and does not
operate reliably at distances greater than 15 centimeters. In contrast,
our algorithm signiﬁcantly reduces the BER and also operates at
much larger distances. This demonstrates that leveraging frequency
diversity provides substantial beneﬁts for our uplink channel.
7.2 Data Rate Versus Helper’s Transmission Rate
The above set of experiments analyzes the achievable bit rate
as a function of the average number of Wi-Fi packets required to
represent each bit. The actual bit rate achieved, however, depends
on the packet transmission rate at the Wi-Fi helper device. In this
section, we measure the bit rate achieved by our system for different
transmission rates at the Wi-Fi helper device.