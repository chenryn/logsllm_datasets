        make it clearer that an fd is an index into the process's fd table
            sometimes people are confused, thinking a file descriptor is just a
            number....
perfmonctl.2
    michael kerrisk
        this system call was removed in linux 5.10
pipe.2
    alejandro colomar
        synopsis: fix incorrect prototype
    michael kerrisk
        rearrange synopsis so that minority version pipe() is at end
ptrace.2
    dmitry v. levin  [alejandro colomar, mathieu desnoyers]
        mention ptrace_get_syscall_info in return value section
seccomp.2
    michael kerrisk
        reorder list of seccomp_set_mode_filter flags alphabetically
            (no content changes.)
    michael kerrisk
        see also: add seccomp_unotify(2)
select.2
    michael kerrisk
        strengthen the warning regarding the low value of fd_setsize
            all modern code should avoid select(2) in favor of poll(2)
            or epoll(7).
    michael kerrisk
        relocate sentence about the fd_set value-result arguments to bugs
syscalls.2
    michael kerrisk
        perfmonctl(2) was removed in linux 5.10
bswap.3
    alejandro colomar
        bswap_*() are implemented using functions
            even though it's true that they are macros,
            it's transparent to the user.
            the user will see their results casted to unsigned types
            after the conversion due to the underlying functions,
            so it's better to document these as the underlying functions,
            specifying the types.
cmsg.3
unix.7
    michael kerrisk
        refer to seccomp_unotify(2) for an example of scm_rights usage
cpow.3
    alejandro colomar
        use 'complex' after the type consistently
ctime.3
    michael kerrisk  [katsuhiro numata]
        restore documentation of 'tm_gmtoff' field
errno.3
    alejandro colomar  [florian weimer, mark kettenis]
        fix enodata text
            enodata is an xsi streams extension (not base posix).
exec.3
    josh triplett  [alejandro colomar]
        clarify that execvpe() uses path from the caller, not envp
    josh triplett  [alejandro colomar]
        fix description of 'e' variants
            the envp argument specifies the environment of the new process
            image, not "the environment of the caller".
fflush.3
    alejandro colomar
        see also: add fpurge(3)
getline.3
    наб  [ahelenia ziemiańska, alejandro colomar]
        !*lineptr is sufficient
            no implementation or spec requires *n to be 0 to allocate
            a new buffer.
getopt.3
    james o. d. hunt  [alejandro colomar]
        clarify behaviour
printf.3
    utkarsh singh  [alejandro colomar]
        add overall structure of format string
pthread_attr_setinheritsched.3
pthread_attr_setschedparam.3
    alejandro colomar
        synopsis: use 'restrict' in prototypes
pthread_mutexattr_setrobust.3
    michael kerrisk
        note that the *_np() apis are deprecated since glibc 2.34
    alejandro colomar
        synopsis: remove incorrect 'const'
pthread_mutex_consistent.3
    michael kerrisk
        note that pthread_mutexattr_setrobust() is now deprecated
pthread_yield.3
    michael kerrisk
        note that this function is deprecated since glibc 2.34
rpc.3
    alejandro colomar
        synopsis: fix prototypes (misc.)
scanf.3
    alyssa ross  [alejandro colomar]
        clarify that %n supports type modifiers
xdr.3
    alejandro colomar
        synopsis: fix prototype types
            use the same types glibc uses, and add a missing 'const'.
capabilities.7
    michael kerrisk
        cap_ipc_lock also governs memory allocation using huge pages
environ.7
    josh triplett  [alejandro colomar]
        remove obsolete admonishment of the gzip environment variable
kernel_lockdown.7
    dann frazier  [alejandro colomar]
        remove description of lifting via sysrq (not upstream)
            the patch that implemented lockdown lifting via sysrq ended up
            getting dropped[*] before the feature was merged upstream. having
            the feature documented but unsupported has caused some confusion
            for our users.
mount_namespaces.7
namespaces.7
    michael kerrisk
        relocate reference to pam_namespace(8) from namespaces.7 to
        mount_namespaces.7.
signal.7
    michael kerrisk
        add reference to seccomp_unotify(2)
            the seccomp user-space notification feature can cause changes in
            the semantics of sa_restart with respect to system calls that
            would never normally be restarted. point the reader to the page
            that provide further details.
vsock.7
    alyssa ross
        ioctls are on /dev/vsock, not sockets
.\" copyright (c) 2003 free software foundation, inc.
.\" and copyright (c) 2017 goldwyn rodrigues 
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" this file is distributed according to the gnu general public license.
.\" %%%license_end
.\"
.th io_submit 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
io_submit \- submit asynchronous i/o blocks for processing
.sh synopsis
.nf
.br "#include " "          /* defines needed types */"
.pp
.bi "int io_submit(aio_context_t " ctx_id ", long " nr \
", struct iocb **" iocbpp );
.fi
.pp
.ir note :
there is no glibc wrapper for this system call; see notes.
.sh description
.ir note :
this page describes the raw linux system call interface.
the wrapper function provided by
.i libaio
uses a different type for the
.i ctx_id
argument.
see notes.
.pp
the
.br io_submit ()
system call
queues \finr\fp i/o request blocks for processing in
the aio context \fictx_id\fp.
the
.i iocbpp
argument should be an array of \finr\fp aio control blocks,
which will be submitted to context \fictx_id\fp.
.pp
the
.i iocb
(i/o control block) structure defined in
.ir linux/aio_abi.h
defines the parameters that control the i/o operation.
.pp
.in +4n
.ex
#include 
struct iocb {
    __u64   aio_data;
    __u32   padded(aio_key, aio_rw_flags);
    __u16   aio_lio_opcode;
    __s16   aio_reqprio;
    __u32   aio_fildes;
    __u64   aio_buf;
    __u64   aio_nbytes;
    __s64   aio_offset;
    __u64   aio_reserved2;
    __u32   aio_flags;
    __u32   aio_resfd;
};
.ee
.in
.pp
the fields of this structure are as follows:
.tp
.i aio_data
this data is copied into the
.i data
field of the
.i io_event
structure upon i/o completion (see
.br io_getevents (2)).
.tp
.i aio_key
this is an internal field used by the kernel.
do not modify this field after an
.br io_submit ()
call.
.tp
.i aio_rw_flags
this defines the r/w flags passed with structure.
the valid values are:
.rs
.tp
.br rwf_append " (since linux 4.16)"
.\" commit e1fc742e14e01d84d9693c4aca4ab23da65811fb
append data to the end of the file.
see the description of the flag of the same name in
.br pwritev2 (2)
as well as the description of
.b o_append
in
.br open (2).
the
.i aio_offset
field is ignored.
the file offset is not changed.
.tp
.br rwf_dsync " (since linux 4.13)"
write operation complete according to requirement of
synchronized i/o data integrity.
see the description of the flag of the same name in
.br pwritev2 (2)
as well the description of
.b o_dsync
in
.br open (2).
.tp
.br rwf_hipri " (since linux 4.13)"
high priority request, poll if possible
.tp
.br rwf_nowait " (since linux 4.14)"
don't wait if the i/o will block for operations such as
file block allocations, dirty page flush, mutex locks,
or a congested block device inside the kernel.
if any of these conditions are met, the control block is returned
immediately with a return value of
.b \-eagain
in the
.i res
field of the
.i io_event
structure (see
.br io_getevents (2)).
.tp
.br rwf_sync " (since linux 4.13)"
write operation complete according to requirement of
synchronized i/o file integrity.
see the description of the flag of the same name in
.br pwritev2 (2)
as well the description of
.b o_sync
in
.br open (2).
.re
.tp
.i aio_lio_opcode
this defines the type of i/o to be performed by the
.i iocb
structure.
the
valid values are defined by the enum defined in
.ir linux/aio_abi.h :
.ip
.in +4n
.ex
enum {
    iocb_cmd_pread = 0,
    iocb_cmd_pwrite = 1,
    iocb_cmd_fsync = 2,
    iocb_cmd_fdsync = 3,
    iocb_cmd_poll = 5,
    iocb_cmd_noop = 6,
    iocb_cmd_preadv = 7,
    iocb_cmd_pwritev = 8,
};
.ee
.in
.tp
.i aio_reqprio
this defines the requests priority.
.tp
.i aio_fildes
the file descriptor on which the i/o operation is to be performed.
.tp
.i aio_buf
this is the buffer used to transfer data for a read or write operation.
.tp
.i aio_nbytes
this is the size of the buffer pointed to by
.ir aio_buf .
.tp
.i aio_offset
this is the file offset at which the i/o operation is to be performed.
.tp
.i aio_flags
this is the set of flags associated with the
.i iocb
structure.
the valid values are:
.rs
.tp
.br iocb_flag_resfd
asynchronous i/o control must signal the file
descriptor mentioned in
.i aio_resfd
upon completion.
.tp
.br iocb_flag_ioprio " (since linux 4.18)"
.\" commit d9a08a9e616beeccdbd0e7262b7225ffdfa49e92
interpret the
.i aio_reqprio
field as an
.b ioprio_value
as defined by
.ir linux/ioprio.h .
.re
.tp
.i aio_resfd
the file descriptor to signal in the event of asynchronous i/o completion.
.sh return value
on success,
.br io_submit ()
returns the number of \fiiocb\fps submitted (which may be
less than \finr\fp, or 0 if \finr\fp is zero).
for the failure return, see notes.
.sh errors
.tp
.b eagain
insufficient resources are available to queue any \fiiocb\fps.
.tp
.b ebadf
the file descriptor specified in the first \fiiocb\fp is invalid.
.tp
.b efault
one of the data structures points to invalid data.
.tp
.b einval
the aio context specified by \fictx_id\fp is invalid.
\finr\fp is less than 0.
the \fiiocb\fp at
.i *iocbpp[0]
is not properly initialized, the operation specified is invalid for the file
descriptor in the \fiiocb\fp, or the value in the
.i aio_reqprio
field is invalid.
.tp
.b enosys
.br io_submit ()
is not implemented on this architecture.
.tp
.b eperm
the
.i aio_reqprio
field is set with the class
.br ioprio_class_rt ,
but the submitting context does not have the
.b cap_sys_admin
capability.
.sh versions
the asynchronous i/o system calls first appeared in linux 2.5.
.sh conforming to
.br io_submit ()
is linux-specific and should not be used in
programs that are intended to be portable.
.sh notes
glibc does not provide a wrapper for this system call.
you could invoke it using
.br syscall (2).
but instead, you probably want to use the
.br io_submit ()
wrapper function provided by
.\" http://git.fedorahosted.org/git/?p=libaio.git
.ir libaio .
.pp
note that the
.i libaio
wrapper function uses a different type
.ri ( io_context_t )
.\" but glibc is confused, since  uses 'io_context_t' to declare
.\" the system call.
for the
.i ctx_id
argument.
note also that the
.i libaio
wrapper does not follow the usual c library conventions for indicating errors:
on error it returns a negated error number
(the negative of one of the values listed in errors).
if the system call is invoked via
.br syscall (2),
then the return value follows the usual conventions for
indicating an error: \-1, with
.i errno
set to a (positive) value that indicates the error.
.sh see also
.br io_cancel (2),
.br io_destroy (2),
.br io_getevents (2),
.br io_setup (2),
.br aio (7)
.\" .sh author
.\" kent yoder.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/getnetent.3
.\" copyright (c) 2004 andries brouwer (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th set_tid_address 2 2021-06-20 "linux" "linux programmer's manual"
.sh name
set_tid_address \- set pointer to thread id
.sh synopsis
.nf
.br "#include " "      /* definition of " sys_* " constants */"
.b #include 
.pp
.bi "pid_t syscall(sys_set_tid_address, int *" tidptr );
.fi
.pp
.ir note :
glibc provides no wrapper for
.br set_tid_address (),
necessitating the use of
.br syscall (2).
.sh description
for each thread, the kernel maintains two attributes (addresses) called
.i set_child_tid
and
.ir clear_child_tid .
these two attributes contain the value null by default.
.tp
.i set_child_tid
if a thread is started using
.br clone (2)
with the
.b clone_child_settid
flag,
.i set_child_tid
is set to the value passed in the
.i ctid
argument of that system call.
.ip
when
.i set_child_tid
is set, the very first thing the new thread does
is to write its thread id at this address.
.tp
.i clear_child_tid
if a thread is started using
.br clone (2)
with the
.b clone_child_cleartid
flag,
.i clear_child_tid
is set to the value passed in the
.i ctid
argument of that system call.
.pp
the system call
.br set_tid_address ()
sets the
.i clear_child_tid
value for the calling thread to
.ir tidptr .
.pp
when a thread whose
.i clear_child_tid
is not null terminates, then,
if the thread is sharing memory with other threads,
then 0 is written at the address specified in
.i clear_child_tid
and the kernel performs the following operation:
.pp
    futex(clear_child_tid, futex_wake, 1, null, null, 0);
.pp
the effect of this operation is to wake a single thread that
is performing a futex wait on the memory location.
errors from the futex wake operation are ignored.
.sh return value
.br set_tid_address ()
always returns the caller's thread id.
.sh errors
.br set_tid_address ()