# Intel AES-NI使用入门
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
[AESNI](https://en.wikipedia.org/wiki/AES_instruction_set)是Intel开发的一种x64架构的SIMD指令集，专门为[AES加密算法](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)提供硬件加速，对[SIMD](https://en.wikipedia.org/wiki/SIMD)有一定了解的人基本都知道AESNI的存在。但由于AES本身的不对称结构，以及AESNI的特殊设计，在实际使用AESNI时，还是有很多细节和理论知识需要了解，才能写出正确的代码。以[N1CTF
2021](https://ctf2021.nu1l.com/)中的easyRE为例，总结了一下自己对AESNI的理解，若有不对的地方敬请指正。
## AES的结构
以AES128为例，其结构是10轮4×4排列置换网络，尾轮相较普通轮缺少一个MixColumns变换。
需要注意的是虽然轮数是10，但是仔细看左上角可以发现进入首轮之前还有一个AddRondKey操作，所以共有11个轮密钥。加密的开头和结尾均为AddRondKey，这种设计叫做[白化](https://en.wikipedia.org/wiki/Key_whitening)。白化的用意也容易理解，由于其它3种操作不涉及密钥，仅为固定变换，如果放在加密的开头或结尾，任何人都可以直接进行逆变换解除之，这些操作的存在不能提升算法的安全性，因此没有意义。
## AESENC和AESENCLAST
这两条指令是AESNI中用于加密的指令，也是最容易理解的指令。任何SIMD指令都可以参考[Intel® Intrinsics
Guide](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html)，`AESENC`对输入依次进行ShiftRows，SubBytes，MixColumns，AddRoundKey操作。其中SubBytes是对字节的操作，因此可以和ShiftRows互换，与上面的图比较，可以发现`AESENC`恰好是上图的一个普通轮加密。
`AESENCLAST`对输入依次进行ShiftRows，SubBytes，AddRoundKey操作，相当于上图的尾轮加密。
第0个轮密钥异或操作可以用`PXOR`指令完成，因此一个完整的AES加密过程如下（pt是明文，k[x]是轮密钥，ct是密文）：
    pxor pt, k[0]
    aesenc pt, k[1]
    aesenc pt, k[2]
    ...
    aesenc pt, k[n-1]
    aesenclast pt, k[n]
    movdqa ct, pt
AES是9轮`AESENC`+1轮`AESENCLAST`这一点很容易记住，但第0个轮密钥是直接`PXOR`这一点很容易被忽视掉，需要多加注意。
## AES的解密算法和等价解密算法
AES的不对称设计十分具有迷惑性，再仔细观察上图右侧的解密过程，可以发现解密时也是白化+9轮普通轮+1轮尾轮。
这里要注意，如果直接按照加密的逆过程来考虑，那么解密应该是先解密尾轮，再解普通轮，然而上图显然不是这样。
如果不考虑轮的划分，只看分开的4种操作的话，解密的操作恰为加密操作的逆序。但若想将一系列的操作划分成不同的轮，就有很多种划分方式。上图是最常见的划分方式，其中
**解密轮并不是加密轮的逆运算** ，这一划分方式是AES的设计中第一个违反直觉的地方。
在上图的划分中，一个解密轮包括InvShiftRows，InvSubBytes，AddRoundKey，InvMixColumns操作，尾轮同样是移除InvMixColumns操作。
AES原名Rijndael，在[Rijndael最初的提案](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf)中，设计者另外给出了一种“等价解密算法”（参见5.3.3 The equivalent inverse cipher
structure），在等价解密中，解密轮的AddRoundKey和InvMixColumns操作顺序互换，形成了一种和加密轮相同，AddRoundKey均在最后的对称结构（InvSubBytes和InvShiftRows本身可以互换顺序）：
这一交换并非等价变换，InvMixColumns是对每一列的4个字节在GF(2^8)上乘上一个4×4矩阵，得到一个新的1×4向量，而AddRoundKey是对每个字节进行异或操作。在GF(2^8)上，异或操作即为加法运算，根据乘法分配律就可以推出，若将AddRoundKey移至InvMixColumns后，新的RoundKey应为原RoundKey乘上同样的4×4矩阵，才能保证运算结果不变。
再仔细观察解密的流程图，第0个轮密钥直接异或，最后一个轮密钥在解密的尾轮中，这两个轮密钥均不涉及InvMixcolumns的交换，因此在等价解密的过程中，除了需要将加密的轮密钥逆序外，
**第1~第n-1个轮密钥应先进行InvMixColumns，变换成解密用密钥** 。
AES加密和等价解密的轮之间具有一种奇特的对称美学，但轮密钥不同，这是AES的设计中第二个违反直觉的地方。
## AESDEC，AESDECLAST和AESIMC
根据AESNI的[设计白皮书](https://www.intel.com/content/dam/doc/white-paper/advanced-encryption-standard-new-instructions-set-paper.pdf)，Intel同样采用了等价解密，参考[Intel®
Intrinsics Guide](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html)，注意`AESDEC`指令不是`AESENC`指令的逆过程，`AESDECLAST`同样不是`AESENCLAST`的逆过程。一个完整的AES解密过程如下（pt是明文，k[x]是轮密钥，ct是密文）：
    pxor ct, k[n]
    aesdec ct, k'[n-1]
    aesdec ct, k'[n-2]
    ...
    aesdec ct, k'[1]
    aesdeclast ct, k[0]
    movdqa pt, ct
其中k[0]和k[n]和加密密钥相同，而k’[1]~k’[n-1]是加密密钥k[1]~k[n-1]经InvMixColumns变换的结果。为此，Intel特意提供了`AESIMC`指令，该指令即为进行单个的InvMixColumns操作。
## AESKEYGENASSIST和PCLMULQDQ
`AESKEYGENASSIST`用在密钥扩展中，具体的用法可以参考[设计白皮书]19页。
`PCLMULQDQ`全称Carry-Less Multiplication
Quadword，是对两个GF(2^128)域上的多项式相乘。`PCLMULQDQ`本身并不属于AESNI指令集，但除了用于加速CRC32外，`PCLMULQDQ`还能计算[GCM](https://en.wikipedia.org/wiki/Galois/Counter_Mode)的GMAC，因此经常出现在SIMD加密算法中。Libsodium中的[AES-256-GCM实现](https://github.com/jedisct1/libsodium/blob/master/src/libsodium/crypto_aead/aes256gcm/aesni/aead_aes256gcm_aesni.c)就是一个完美的示例。
## AESNI的进阶用法
###  分离AES的4种操作
最初尝试AESNI时曾经十分不解，为什么Intel要采用等价加密，使得生成解密密钥还要额外加上AESIMC操作，后来读完了白皮书才搞懂这一精巧的设计。
白皮书第34页给出了用AESNI单独实现AES的4种操作的方法：
    Isolating ShiftRows 
     PSHUFB xmm0, 0x0b06010c07020d08030e09040f0a0500 
    Isolating InvShiftRows 
     PSHUFB xmm0, 0x0306090c0f0205080b0e0104070a0d00 
    Isolating MixColumns 
     AESDECLAST xmm0, 0x00000000000000000000000000000000 
     AESENC xmm0, 0x00000000000000000000000000000000 
    Isolating InvMixColumns 
     AESENCLAST xmm0, 0x00000000000000000000000000000000 
     AESDEC xmm0, 0x00000000000000000000000000000000 
    Isolating SubBytes 
     PSHUFB xmm0, 0x0306090c0f0205080b0e0104070a0d00 
     AESENCLAST xmm0, 0x00000000000000000000000000000000 
    Isolating InvSubBytes 
     PSHUFB xmm0, 0x0b06010c07020d08030e09040f0a0500 
     AESDECLAST xmm0, 0x00000000000000000000000000000000
ShiftRows可以直接用SSSE3的`PSHUFB`指令完成，而SubBytes则是先反向shuffle，再用0密钥进行尾轮加密，消掉尾轮的另外两种操作。MixColumns则结合加密和解密，利用尾轮的特性将MixColumns保留下来。这个神奇的拼接方式令人啧啧称奇。
上一节提到由加密密钥变换为等价解密密钥要经过`AESIMC`操作，但如果已知等价解密密钥，如何获得加密密钥？AESNI里没有直接的MixColumns操作，但根据上文，可以用`AESDECLAST`和`AESENC`组合产生。
而查询[Intel® Intrinsics
Guide](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html)，发现Skylake微架构上，`AESIMC`的Latency和Throughput均是`AESENC`的两倍，因此斗胆猜测`AESIMC`内部也是`AESENCLAST`和`AESDEC`的拼接。
###  用AESNI加速其它算法
AESNI的灵活设计使得它可以用来实现更大的排列置换网络，前文提到AES原名Rijndael，而参考[Rijndael的提案](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf)，Rijndael实际上有块大小（不是密钥大小）为128，192，256的三种变种，只有128大小的Rijndael被选为AES。[白皮书](https://www.intel.com/content/dam/doc/white-paper/advanced-encryption-standard-new-instructions-set-paper.pdf)则给出了AESNI实现的其它Rijndael，例如Rijndael-256：
    #include 
    #include 
    void Rijndael256_encrypt(unsigned char* in,
                             unsigned char* out,
                             unsigned char* Key_Schedule,
                             unsigned long long length,
                             int number_of_rounds) {
      __m128i tmp1, tmp2, data1, data2;
      __m128i RIJNDAEL256_MASK =
          _mm_set_epi32(0x03020d0c, 0x0f0e0908, 0x0b0a0504, 0x07060100);
      __m128i BLEND_MASK =
          _mm_set_epi32(0x80000000, 0x80800000, 0x80800000, 0x80808000);
      __m128i* KS = (__m128i*)Key_Schedule;
      int i, j;
      for (i = 0; i > 64), hex(self.c & ((1 << 64)-1))))
    class Binary(Node):
        def __init__(self, a, b):
            super().__init__()
            self.a = a
            self.b = b
            a.parent = self
            b.parent = self
    class Add(Binary):
        def __init__(self, a, b):
            super().__init__(a, b)
        def do_emit(self, f):
            self.a.emit(f)
            self.b.emit(f)
            f.write("__m128i {}=_mm_add_epi64({},{});\n".format(
                self, self.a, self.b))
    class Sub(Binary):
        def __init__(self, a, b):
            super().__init__(a, b)
        def do_emit(self, f):
            self.a.emit(f)
            self.b.emit(f)
            f.write("__m128i {}=_mm_sub_epi64({},{});\n".format(
                self, self.a, self.b))
    class Xor(Binary):
        def __init__(self, a, b):
            super().__init__(a, b)
        def do_emit(self, f):
            self.a.emit(f)
            self.b.emit(f)
            f.write("__m128i {}=_mm_xor_si128({},{});\n".format(
                self, self.a, self.b))
    class Aes(Node):
        def __init__(self, base, key, is_enc, is_last):
            super().__init__()
            self.base = base
            self.key = key