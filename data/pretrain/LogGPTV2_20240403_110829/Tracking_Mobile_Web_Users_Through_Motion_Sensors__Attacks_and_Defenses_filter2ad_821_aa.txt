title:Tracking Mobile Web Users Through Motion Sensors: Attacks and Defenses
author:Anupam Das and
Nikita Borisov and
Matthew Caesar
Tracking Mobile Web Users Through Motion
Sensors: Attacks and Defenses
Anupam Das, Nikita Borisov and Matthew Caesar
University of Illinois at Urbana-Champaign
{das17, nikita, caesar}@illinois.edu
Abstract—Modern smartphones contain motion sensors, such
as accelerometers and gyroscopes. These sensors have many
useful applications; however, they can also be used to uniquely
identify a phone by measuring anomalies in the signals, which
are a result of manufacturing imperfections. Such measurements
can be conducted surreptitiously by web page publishers or ad-
vertisers and can thus be used to track users across applications,
websites, and visits.
We analyze how well sensor ﬁngerprinting works under real-
world constraints. We ﬁrst develop a highly accurate ﬁnger-
printing mechanism that combines multiple motion sensors and
makes use of inaudible audio stimulation to improve detection.
We evaluate this mechanism using measurements from a large
collection of smartphones, in both lab and public conditions. We
then analyze techniques to mitigate sensor ﬁngerprinting either
by calibrating the sensors to eliminate the signal anomalies, or
by adding noise that obfuscates the anomalies. We evaluate the
impact of calibration and obfuscation techniques on the classiﬁer
accuracy; we also look at how such mitigation techniques impact
the utility of the motion sensors.
I.
INTRODUCTION
Smartphones are equipped with motion sensors, such as
accelerometers and gyroscopes, that are available to applica-
tions and websites, and enable a variety of novel uses. These
same sensors, however, can threaten user privacy by enabling
sensor ﬁngerprinting. Manufacturing imperfections result in
each sensor having unique characteristics in their produced
signal. These characteristics can be captured in the form of a
ﬁngerprint and be used to track users across repeated visits.
The sensor ﬁngerprint can be used to supplement other privacy-
invasive tracking technologies, such as cookies, or canvas
ﬁngerprinting [1]. Since the ﬁngerprint relies on the physical
characteristics of a particular device, it is immune to defenses
such as clearing cookies and private browsing modes.
We carry out a detailed investigation into the feasibility
of ﬁngerprinting motion sensors in smartphones. Practical
ﬁngerprinting faces several challenges. During a typical web
browsing session, a smartphone is either held in a user’s
hand, resulting in noisy motion inputs, or is resting on a ﬂat
surface, minimizing the amount of sensor input. Additionally,
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23390
web APIs for accessing motion sensor data have signiﬁcantly
lower resolution than is available to the operating systems and
applications. We show that, using machine learning techniques,
it is possible to combine a large number of features from
both the accelerometer and gyroscope sensor streams and
produce highly accurate classiﬁcation despite these challenges.
In some cases, we can improve the classiﬁer accuracy by
using an inaudible sound, played through the speakers, to
stimulate the motion sensors. We evaluate our techniques in
a variety of lab settings; additionally, we collected data from
volunteer participants over the web, capturing a wide variety of
smartphone models and operating systems. In our experiments,
a web browsing session lasting in the orders of 30–40 seconds
is sufﬁcient
that can be used to
recognize the phone in the future with only 5–8 seconds worth
of web browsing session.
to generate a ﬁngerprint
We next investigate two potential countermeasures to sen-
sor ﬁngerprinting. First, we consider the use of calibration
to eliminate some of the errors that result from manufactur-
ing imperfections. Promisingly, we ﬁnd that calibrating the
accelerometer is easy and has a signiﬁcant impact on clas-
siﬁcation accuracy. Gyroscope calibration, however, is more
challenging without specialized equipment, and attempts to
calibrate the gyroscope by hand do not result in an effective
countermeasure.
An alternative countermeasure is obfuscation, which intro-
duces additional noise to the sensor readings in the hopes of
hiding the natural errors. Obfuscation has the advantage of
not requiring a calibration step; we ﬁnd that by adding noise
that is similar in magnitude to the natural errors that result
from manufacturing imperfection, we can reduce the accuracy
of ﬁngerprinting more effectively than by calibration. We also
investigate the possibility of using higher magnitude noise, as
well as adding temporal disturbances to obfuscate frequency
domain features. At high levels of noise, ﬁngerprinting accu-
racy is greatly reduced, though such noise is likely to impair
the utility of motion sensors.
Roadmap. The remainder of this paper is organized as
follows. We present background information and related work
in Section II. In Section III, we brieﬂy discuss why ac-
celerometers and gyroscopes can be used to generate unique
ﬁngerprints. In Section IV, we describe the different temporal
and spectral features considered in our experiments, along
with the classiﬁcation algorithms and metrics used in our
evaluations. We present our ﬁngerprinting results in Section
V. Section VI describes our countermeasure techniques to
sensor ﬁngerprinting. Section VII discusses some limitations
of our approach. Finally, we conclude in Section VIII.
II. FINGERPRINTING BACKGROUND
Human ﬁngerprints, due to their unique nature, are a very
popular tool used to identify people in forensic and biometric
applications [4], [5]. Researchers have long sought to ﬁnd
an equivalent of ﬁngerprints in computer systems by ﬁnding
characteristics that can help identify an individual device.
Such ﬁngerprints exploit variations in both the hardware and
software of devices to aid in identiﬁcation.
As early as 1960, the US government used unique transmis-
sion characteristics to track mobile transmitters [6]. Later, with
the introduction of cellular network researchers were able to
successfully distinguish transmitters by analyzing the spectral
characteristics of the transmitted radio signal [7]. Researchers
have suggested using radio-frequency ﬁngerprints to enhance
wireless authentication [8], [9], as well as localization [10].
Others have leveraged the minute manufacturing imperfections
in network interface cards (NICs) by analyzing the radio-
frequency of the emitted signals [11], [12]. Computer clocks
have also been used for ﬁngerprinting: Moon et al. showed
that network devices tend to have a unique and constant clock
skews [13]; Kohno et al. exploited this to distinguish network
devices through TCP and ICMP timestamps [14].
Software can also serve as a distinguishing feature, as
different devices have a different
installed software base.
Researchers have long been exploiting the difference in the
protocol stack installed on IEEE 802.11 compliant devices.
Desmond et al. [15] have looked at distinguishing unique
devices over Wireless Local Area Networks (WLANs) simply
by performing timing analysis on the 802.11 probe request
packets. Others have investigated subtle differences in the
ﬁrmware and device drivers running on IEEE 802.11 compliant
devices [16]. 802.11 MAC headers have also been used to
uniquely track devices [17]. Moreover, there are well-known
open source toolkits like Nmap [18] and Xprobe [19] that can
remotely ﬁngerprint an operating system by analyzing unique
responses from the TCP/IP networking stack.
a) Browser Fingerprinting: A common application of
ﬁngerprinting is to track a user across multiple visits to a web-
site, or a collection of sites. Traditionally, this was done with
the aid of cookies explicitly stored by the browser. However,
privacy concerns have prompted web browsers to implement
features that clear the cookie store, as well as private browsing
modes that do not store cookies long-term. This has prompted
site operators to develop other means of uniquely identifying
and tracking users. Eckersley’s Panopticon project showed that
many browsers can be uniquely identiﬁed by enumerating
installed fonts and other browser characteristics, easily ac-
cessible via JavaScript [20]. A more advanced technique uses
HTML5 canvas elements to ﬁngerprint the fonts and rendering
engines used by the browser [1]. Others have proposed the
use of performance benchmarks for differentiating between
JavaScript engines [21]. Lastly, browsing history can to used
to proﬁle and track online users [22]. Numerous studies have
found evidence of these and other techniques being used in
the wild [23]–[25]. A number of countermeasures to these
techniques exist; typically they disable or restrict the ability
of a website to probe the characteristics of a webbrowser.
Nikiforakis et al. propose using random noise to make ﬁn-
gerprints non-deterministic which essentially breaks linkability
across multiple visits [26]. We expect that smartphones are less
susceptible to browser ﬁngerprinting due to a more integrated
hardware and software base resulting in less variability, though
we are unaware of an exploration of smartphone browser
ﬁngerprinting.
Alternative to cookies people have also looked at leverag-
ing device IDs such as Unique Device Identiﬁer (UDID) for
Apple products and International Mobile Station Equipment
Identity (IMEI) for general mobile phones, to track devices
across multiple visits. However,
these device IDs are not
always accessible (Apple ceased the use of UDID since iOS
6 [27]) and even if it is accessible, in most cases it requires
explicit permission to access such device ID (on Android
accessing IMEI requires a special permission [28]).
b) Sensor Fingerprinting: Smartphones do, however,
possess an array of sensors that can be used to ﬁngerprint
them. Two studies have looked at ﬁngerprinting smartphone
microphones and speakers [29], [30]. These techniques, how-
ever, require access to the microphone, which is typically
controlled with a separate permission due to the obvious
privacy concerns with the ability to capture audio. Bojinov
et al. [3] consider using accelerometers, which are not con-
sidered sensitive and do not require a separate permission.
Their techniques, however, rely on having the user perform
a calibration of the accelerometer (see Section VI-A), the
parameters of which are used to distinguish phones. Dey
et al. [2] apply machine learning techniques to create an
accelerometer ﬁngerprint; most of their analysis focuses on
using the vibration motor to stimulate the accelerometer, but
they perform an experiment with 25 stationary phones and on
average they achieve approximately 88% precision and recall.
In contrast, our work studies phones that are in a natural
web-browsing setting, either in a user’s hand or resting on
a ﬂat surface. Additionally, we consider the simultaneous
TABLE I: Comparison with other works
Work
[2]
[2]
[3]
[3]
Our Work
Our Work
Our Work
Our Work
Our Work
Sensorsa
Settings
A
A
A
A
A,G
A,G
A,G
A,G
A,G
Lab
Lab
Lab
Public
Lab
Public
Lab
Lab
Lab+Public
Stimulation
Vibration
None
Flip phone
Flip phone
None
None
None
Phone in hand
Phone in hand+Audio
ahere ‘A’ means accelerometer and ‘G’ refers to gyroscope
b80 external chips, 25 phones and 2 tablets
cconsidering only devices with two submissions
# of Devices
107b
25
33
3583c
30
63
93
30
30
Features Explored
Features Used
36
36
2
2
70
70
70
70
70
80
80
2
2
100
100
100
100
100
2
Results (≈)
99% Accuracy
88% F-score
100% Accuracy
15.1% Accuracy
99% F-score
95% F-score
96% F-score
93% F-score
98% F-score
use of both accelerometer and gyroscope to produce a more
accurate ﬁngerprint. Inspired by prior work that uses the
gyroscope to recover audio signals [31], we also stimulate
the gyroscope with an inaudible tone. Finally, we propose
and evaluate several countermeasures to reduce ﬁngerprint-
ing accuracy without entirely blocking access to the motion
sensors. Table I highlights some comparisons with related
works. Recently, Song et al. [32] have proposed reducing
accelerometer accuracy as a means of defense against tap
inference on smartphones. Their approach involves hiding
small changes in accelerometer reading by reporting a constant
accelerometer value of 1g. We propose one similar technique
where we calibrate motion sensors so that they report similar
constant readings. However, as we will later on show that
such an approach is not sufﬁcient to hide uniqueness among
gyroscope sensors. We, therefore, explore several obfuscation
techniques in this paper.
III. A CLOSER LOOK AT MOTION SENSORS
In this section we brieﬂy take a closer look at motion
sensors like accelerometer and gyroscope that are embedded
in today’s smartphones. This will provide an understanding
of how they can be used to uniquely ﬁngerprint smartphones.
Accelerometer and gyroscope sensors in modern smartphones
are based on Micro Electro Mechanical Systems (MEMS).
STMicroelectronics [33] and InvenSense [34] are among the
top vendors supplying MEMS-based accelerometer and gy-
roscope sensor to different smartphone manufacturers [35].
Traditionally, Apple [36], [37]1 and Samsung [39], [40] favor
using STMicroelectronics motion sensors, while Google [41],
[42] tends to use InvenSense sensors.
A. Accelerometer
Accelerometer is a device that measures proper acceler-
ation. Proper acceleration is different from coordinate accel-
eration (linear acceleration) as it measures the g-force. For
example, an accelerometer at rest on a surface will measure
an acceleration of g = 9.81ms−2 straight upwards, while
for a free falling object it will measure an acceleration of
zero. MEMS-based accelerometers are based on differential
capacitors [43]. Figure 1 shows the internal architecture of a
MEMS-based accelerometer. As we can see there are several
pairs of ﬁxed electrodes and a movable seismic mass. Under
zero force the distances d1 and d2 are equal and as a result
the two capacitors are equal, but a change in force will cause
the movable seismic mass to shift closer to one of the ﬁxed
electrodes (i.e., d1 (cid:54)= d2) causing a change in the generated
capacitance. This difference in capacitance is detected and
ampliﬁed to produce a voltage proportional to the acceleration.
The slightest gap difference between the structural electrodes,
introduced during the manufacturing process, can cause a
change in the generated capacitance. Also the ﬂexibility of the
seismic mass can be slightly different from one chip to another.
These form of minute imprecisions in the electro-mechanical
structure induce subtle imperfections in accelerometer chips.
B. Gyroscope
Gyroscope measures the rate of rotation (in rads−1) along
the device’s three axes. MEMS-based gyroscopes use the
1iPhone 6 has been reported to use sensors made by InvenSense [38]
3
Fig. 1: Internal architecture of a MEMS accelerometer. Differential
capacitance is proportional to the applied acceleration.
Coriolis effect
to measure the angular rate. Whenever an
angular velocity of ˆω is exerted on a moving mass of weight
m, and velocity ˆv, the object experiences a Coriolis force in a
direction perpendicular to the rotation axis and to the velocity
of the moving object (as shown in ﬁgure 2). The Coriolis
force is calculated by the following equation ˆF = −2mˆω × ˆv.
Generally, the angular rate (ˆω) is measured by sensing the
magnitude of the Coriolis force exerted on a vibrating proof-
mass within the gyro [44]–[46]. The Coriolis force is sensed by
a capacitive sensing structure where a change in the vibration
of the proof-mass causes a change in capacitance which is then
converted into a voltage signal by the internal circuitry. Again
the slightest imperfection in the electro-mechanical structure
will introduce idiosyncrasies across chips.
Fig. 2: MEMS-based gyros use Coriolis force to compute angular
velocity. The Coriolis force induces change in capacitance which is
proportional to the angular velocity.
IV. FEATURES AND CLASSIFICATION ALGORITHMS
Here, we describe the data preprocessing step and the
features used in generating the sensor ﬁngerprint. We also
discuss the classiﬁcation algorithms and metrics used in our
evaluation.
A. Data Preprocessing
Data from motion sensors can be thought of as a stream
of timestamped real values. For both accelerometer and gy-
roscope we obtain values along three axes. So, for a given