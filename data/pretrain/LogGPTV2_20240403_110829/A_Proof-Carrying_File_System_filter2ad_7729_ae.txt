### 7. Related Work

A considerable body of prior work is related to PCFS. In this section, we focus on the most closely related research.

#### Relation to PCA
Proof-Carrying Authorization (PCA), the general architecture on which PCFS is built, has been implemented in several other systems [8, 9, 25]. However, PCFS differs from these systems in several key ways:

1. **Proof Verification Timing**:
   - In existing PCA-based systems, the proof constructed by the user is provided directly to the system interface at the time of access. This means that the proof verifier must be called every time an access request is made.
   - This design is effective when the time taken to check certificates and proofs (typically several milliseconds) is insignificant compared to the time taken to perform the actual operation. This has been the case in all PCA implementations to date.
   - In contrast, file system access is a fast operation, typically taking only a few microseconds or milliseconds. Checking multiple certificates and a proof at each access can result in noticeable delays for the user.
   - We confirmed this hypothesis through an earlier implementation of PCFS that used the PCA architecture directly. As a result, in the current design of PCFS, proofs are verified in advance, and capabilities issued in return are used to authorize access.

2. **Temporal Logic**:
   - The logic used in PCFS (discussed in Section 3) includes explicit time. This allows for accurate representation of expiration dates of policy rules in logical formulas and proofs.
   - In contrast, logics used in PCA systems so far are unaware of time, and rule expiration is enforced using an extra-logical mechanism.
   - Incorporating time into the logic also enables more expressive rules, such as those involving arithmetic over time.

3. **Authentication Mechanism**:
   - In all existing PCA implementations, the user is authenticated to the system interface using a challenge-response protocol with a fresh nonce. This nonce must be embedded in the proof used to authorize access because the interface does not learn the identity of the user.
   - This implies that the proof cannot be completed in advance of the access, although some parts independent of the nonce can be.
   - Due to efficiency concerns, we do not consider this style of authentication suitable for PCA. Instead, we believe that the authentication protocol should inform the system interface of the user's identity.
   - In distributed settings, a password or public key can be used for authentication. In centralized settings like PCFS, the system interface can learn the user ID of the calling process through a system call like `getuid()`.
   - This form of authentication allows proofs of access to be created and checked in advance, which is crucial for achieving efficiency in PCFS.

#### Other Related Work
- Many prior file systems have used capabilities to authorize access (e.g., [6, 20, 28, 31, 32]), but the use of proofs to generate capabilities is novel to our work.
- Chaudhuri's work [13] considers a formal analysis of the correctness of an implementation of authorization through cryptographic capabilities in the face of dynamic policies. The paper also discusses various strategies for enforcing time-dependent and state-dependent policies, but the mechanism for generating policies is treated abstractly. In contrast, in Theorem 4.1, we prove our enforcement correct with respect to a concrete logic and proof system.
- Numerous logics and logic-based languages have been proposed for representing access control policies (e.g., [4, 5, 10, 14, 18, 21, 30]). The `k says s` modality in BL is most closely related to a similar modality in Binder [14]. Our treatment of explicit time draws on work by DeYoung et al. [16]. The combination of time and interpreted predicates is novel to BL.
- The implementation of the proof search tool for BL builds upon work on uniform proofs for logic programming [27] and draws on ideas from the language Lolli [22].

### 8. Conclusion

PCFS combines strong logical foundations for access policies with efficient enforcement based on proofs and cryptographic capabilities. Thanks to a highly expressive logic for policies and conditions in capabilities, PCFS automatically enforces time-dependent policy rules and policies that depend on file system state. A significant contribution of our work is Theorem 4.1, which shows that enforcement of policies using procaps is sound with respect to enforcement with proofs directly (as in PCA).

Several interesting avenues remain for future work:
- Applying the PCFS architecture to build a networked file system, with the proof verifier and storage on separate nodes, and a decentralized store for procaps. Procaps already support decentralization, as their integrity is protected by the signature contained in them.
- Using capabilities to implement access control on devices with limited computational power (e.g., embedded devices), supported by the existing front end from PCFS running on a separate machine.
- Conducting more case studies of policies used in practice to see if they can be expressed and enforced in PCFS.

### References
[References listed as in the original text]

### Appendix: Description of the Logic BL

This appendix describes the proof system of the logic BL and its meta-theory. The syntax of the logic was presented in Section 3. Proof terms \( M \) are summarized below:

\[
M ::= x | \text{pf conjI } M_1 M_2 | \text{pf conjE1 } M | \text{pf conjE2 } M | \text{pf disjI1 } M | \text{pf disjI2 } M | \text{pf disjE } M ([x]M_1) ([y]M_2) | \text{pf topI} | \text{pf botE } M | \text{pf impI } ([x][v_1][v_2]M) | \text{pf impE } M_1 M_2 u_1 u_2 | \text{pf forallI } ([v]M) | \text{pf forallE } t M | \text{pf existsI } t M | \text{pf existsE } M_1 ([x][v]M_2) | \text{pf atI } M | \text{pf atE } M_1 ([x]M_2) | \text{pf saysI } M | \text{pf saysE } M_1 ([x]M_2) | \text{pf sinjI} | \text{pf sinjE } M_1 M_2 | \text{pf cinjI} | \text{pf cinjE } M_1 M_2
\]

Variables \( x, v \) in square brackets \([x], [v]\) are binding occurrences. Bound variables may be α-renamed implicitly.

Figures 4 and 5 list the rules of the natural deduction system for BL. All rules in Figure 4 are similar to corresponding rules in prior work by DeYoung [15, Chapter 5], done in the context of η-logic [16]. There are only two minor differences: (a) Our rules contain the view \( \alpha \) and the state \( E \), both of which remain unchanged in all rules of Figure 4, and (b) BL contains the connective \( \bot \) (rule \( \bot \text{E} \)), which η-logic does not. For descriptions of the rules in Figure 4, we refer the reader to the prior work by DeYoung.

Rules in Figure 5 are specific to BL. Rule (hyp) states that the assumption \( s \circ [u_1, u_2] \) entails \( s \circ [u_1, u_2] \) if \( u_1' \leq u_1 \) and \( u_2 \leq u_2' \), i.e., the interval \([u_1, u_2]\) is a subset of the interval \([u_1', u_2']\). This makes intuitive sense: if a formula \( s \) holds throughout an interval, it must hold on every subinterval as well. The proof term corresponding to this (trivial) derivation is \( x \), where \( x \) is also the name for the assumption \( s \circ [u_1', u_2'] \).

The rule (claims) is similar, except that it allows us to conclude \( s \circ [u_1, u_2] \) from the assumption \( k' \text{ claims } s \circ [u_1', u_2'] \). In this case, it must also be shown, among other things, that \( k' \) is stronger than the principal \( k \) in the view (premise \( \Psi \models k' \preceq k \)).

(saysI) is the only rule that changes the view. The notation \( \Gamma| \) in this rule denotes the subset of \( \Gamma \) that contains exactly the claims of principals, i.e., the set \(\{(k' \text{ claims } s' \circ [u_1', u_2']) \in \Gamma\}\). The rule means that \( (k \text{ says } s) \circ [u_1, u_2] \) holds in any view \( \alpha \) if \( s \circ [u_1, u_2] \) holds in the view \( k, u_1, u_2 \) using only claims of principals. Assumptions of the form \( s' \circ [u_1', u_2'] \) are eliminated from \( \Gamma \) in the premise because they may have been added in the view \( \alpha \), but may not hold in the view \( k, u_1, u_2 \). Its dual rule (saysE) states that if \( (k \text{ says } s) \circ [u_1, u_2] \) holds in view \( \alpha \), then \( s \circ [u_1, u_2] \) holds in the view \( k, u_1, u_2 \).