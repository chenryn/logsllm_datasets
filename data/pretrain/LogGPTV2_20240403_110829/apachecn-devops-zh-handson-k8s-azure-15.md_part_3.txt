为了简化应用部署，在**第 15 章**内的**网站**文件夹中提供了该应用的掌舵图。您可以通过部署掌舵图来部署应用。通过使用 Helm 图表进行部署，您可以使用命令行覆盖 Helm 值。您已经在*第 12 章“将应用连接到 Azure 数据库”*中做到了这一点，当时您将 WordPress 配置为使用外部数据库。
在此光盘作业中，您需要执行以下步骤:
1.  看看代码。
2.  获取 AKS 凭据。
3.  设置应用。
4.  (可选)获取服务的公共知识产权。
让我们开始构建光盘管道。完整的 CI 和 CD 管道已在**管道-cicd.yaml** 文件中提供，供您参考:
1.  To add the CD job to the pipeline, you'll need to edit the **pipeline.yaml** file. To do this, from within your forked repository, click on Code at the top of the screen and go to the **.github/workflows** folder. In that folder, click on the **pipeline.yaml** file. Once that file is open, click on the pen icon in the top right, as highlighted in *Figure 15.23:*
    ![Clicking on the pen icon to edit the pipeline.yaml file](img/B17338_15_23.jpg)
    图 15.23:编辑 pipeline.yaml 文件
2.  In the file, at the bottom, start by adding the following lines to define the CD job:
    46 张光盘:
    47 次运行:Ubuntu-最新
    48 项需求:竞争情报
    49 步:
    在此代码块中，您正在创建光盘作业。这将再次运行在**Ubuntu-最新的**跑步者上。在*第 48 行*中，您定义此工作依赖于 CI 工作。这意味着此作业将仅在配置项作业完成后启动，并且仅在配置项作业成功完成时运行。最后*第 49 行*打开**步**块，接下来你要填写。
3.  The first step will be a Git checkout. This will use the same step you use in the CI job as well:
    50 - 名称：Git 签出
    51 个用途:actions/checkout@v2
4.  Next, you'll need to log in to the Azure CLI and get the AKS credentials. You could do this by using the same approach as you did in the CI job, meaning you could do an Azure CLI login and then run the **az aks get-credentials** command on the runner. However, there is a single GitHub action that can achieve this for AKS:
    53 名称:蓝色立方集上下文
    54 种用途:Azure/aks-set-context@v1
    55 带:
    56 个信条:${{机密。AZURE_CREDENTIALS }}
    57 资源组:rg-hand onaks
    58 集群名称:handsonaks
    这一步使用微软的 **Azure/aks-set-context** 动作。您可以使用自己创建的 Azure 凭据机密对其进行配置，然后定义要使用的资源组和群集名称。这将配置 GitHub 操作运行器来使用那些 AKS 凭证。
5.  You can now create the application on the cluster. As mentioned in the introduction of this section, you will deploy the application using the Helm Chart created in the **website** folder for this chapter. To deploy this Helm Chart on your cluster, you can use the following code:
    60 -名称:头盔升级
    61 跑:|
    62 helm 升级网站第 15 章/网站-安装\
    63 集 image . repository = $ ACRNAME . azure Cr . io/网站/网站\
    64 集 image . tag = $ { { github . run _ number } }
    该代码块执行 **Helm 升级**命令。第一个论点(**网站**)指的是 Helm 版本的名称。第二个论点(**第 15 章/网站**)指的是掌舵图的位置。 **- install** 参数配置 Helm 的方式是，如果图表还没有安装，它将被安装。这将是您第一次运行此操作的情况。
    在下面两行中，您设置了 Helm 值。您将映像存储库设置到容器注册表中的**网站/网站** repo，并将标签设置为动作的运行号。这与您在配置项步骤中用于标记映像的值相同。
6.  Finally, there is one optional step you can include in your workflow. This is getting the public IP address of the service that will be created to serve your website. This is optional because you could get this IP address using **kubectl** in Azure Cloud Shell, but it has been provided for your convenience:
    66 -名称:获取服务 IP
    67 跑:|
    68 PUBLICIP=""
    69 while[-z $ PUblic IP]；做
    70 呼应“等待公共 IP……”
    71 PUBLICIP=$(kubectl get service 网站-o JSON path = ' { . status . Loadbalancer . ingress[0]。ip} ')
    72 [ -z "$PUBLICIP" ] &> 睡眠 10
    73 完成
    74 回声$PUBLICIP
    这个代码块将运行一个小的 Bash 脚本。虽然公共 IP 还没有设置，但它会继续使用 **kubectl** 从服务中获取公共 IP。一旦设置了公共 IP，公共 IP 将显示在 GitHub 操作日志中。
7.  You are now ready to save the updated pipeline and run it for the first time. To save the pipeline, click on the Start commit button at the top right of the screen and click on Commit changes in the pop-up window, as shown in *Figure 15.24:*
    ![Saving the updated pipeline](img/B17338_15_24.jpg)
    图 15.24:管道工作流
8.  Once you have committed the changes to GitHub, the workflow will be triggered to run. To follow the deployment, click on Actions at the top of the screen. Click on the top entry here to see the details of the run. Initially, the output will look similar to *Figure 15.25:*
    ![A detailed output of the action run while the action is running](img/B17338_15_25.jpg)
    图 15.25:动作运行时动作运行的详细输出
    如您所见，您现在可以访问此工作流运行中的两个作业，配置项作业和光盘作业。配置项作业运行时，光盘作业的日志将不可用。配置项作业成功完成后，您将能够访问光盘作业的日志。等待几秒钟，直到屏幕看起来像*图 15.26* ，表示工作流成功完成:
    ![A detailed output of the action run after both jobs are finished](img/B17338_15_26.jpg)
    图 15.26:两个作业完成后动作运行的详细输出
9.  Now, click on the CD job to see the logs of this job. Click on the arrow next to Get service IP to see the public IP of the service that got created, as shown in *Figure 15.27:*
    ![Logs of the CD job showing the public IP address of the service](img/B17338_15_27.jpg)
    图 15.27:显示服务公共 IP 地址的光盘作业日志
    在您的网络浏览器中打开一个新的选项卡来访问您的网站。您应该会看到类似于*的输出图 15.28:*
    ![Website running version 1](img/B17338_15_28.jpg)
    图 15.28:网站运行 g 版本 1
10.  Let's now test the end-to-end pipeline by making a change to the **index.html** file. To do this, in GitHub, click on Code at the top of the screen, open **Chapter15**, and click on the **index.html** file. In the resulting window, click on the pen icon in the top right, as shown in *Figure 15.29:*
    ![Clicking on the pen icon to edit the index.html file](img/B17338_15_29.jpg)
    图 15.29:点击笔图标编辑 index.html 文件
11.  You can now edit the file. Change the version of the website to **version 2** (or any other changes you might want to make), and then scroll to the bottom of the screen to save the changes. Click on the Commit changes button to commit the changes to GitHub, as shown in *Figure 15.30:*
    ![Saving the changes to the index.html file](img/B17338_15_30.jpg)
    图 15.30:将变更保存到 index.html 文件中
12.  This will trigger the workflow to be run. It will run through both the CI and CD jobs. This means that a new container will be built, with an updated **index.html** file. You can follow the status of the workflow run as you've done before, by clicking on Actions at the top of the screen and clicking on the top run. Wait until the job has finished, as shown in *Figure 15.31:*
    ![Action run after updating index.html](img/B17338_15_31.jpg)
    图 15.31:更新 index.html 后运行的操作
13.  如果您现在浏览回作为*第 9 步*的输出的 IP 地址，您应该会看到显示版本 2 的更新网页，如*图 15.32:* 所示
![The webpage has been updated to version 2](img/B17338_15_32.jpg)
图 15.32:网页已经更新到版本 2
这向您展示了管道成功地执行了，并且将您的代码更改带到了生产中。
#### 注意
在本例中，您直接更新了网站的生产版本，无需任何批准。GitHub Actions 还允许您配置手动批准，以防您想在将更改提升到生产之前测试它们。要配置手动批准，您可以使用 GitHub 操作中的环境功能。更多信息请参考[https://docs.github.com/en/actions/reference/environments](15.html)。
使用 GitHub 操作的配置项和光盘示例到此结束。让我们确保清理您为本章创建的资源。在云外壳中，执行以下命令:
helm 卸载网站
az 组删除-n rg-管道-是
由于这也标志着本书中示例的结束，如果不再需要集群，您现在也可以删除集群本身。如果您希望这样做，可以使用以下命令删除集群:
az 组删除-n rg-handsonaks -是
这样，当你读完这本书里的例子后，如果你不再使用这些资源，你就不用为它们付费了。
## 总结
您现在已经成功地为 Kubernetes 集群创建了配置项/光盘管道。CI 是频繁构建和测试软件的过程，而 CD 是定期部署软件的实践。
在本章中，您使用 GitHub Actions 作为构建 CI/CD 管道的平台。您从构建配置项管道开始。在这个管道中，您构建了一个容器映像，并将其推送到容器注册中心。
最后，您还添加了一个 CD 管道来将该容器映像部署到您的 Kubernetes 集群中。您能够验证通过对网页进行代码更改，管道被触发，代码更改被推送到您的集群。
您在本章中构建的 CI/CD 管道是一个入门管道，它为您可以用来将应用部署到生产中的更健壮的 CI/CD 管道奠定了基础。在生产中使用之前，您应该考虑向管道中添加更多的测试，并将其与不同的分支集成。
## 最后的想法
这一章也是这本书的结尾。在这本书的过程中，你已经通过一系列的实践例子学会了如何使用 AKS。
这本书从基础开始；您学习了容器和 Kubernetes，并创建了一个 AKS 集群。
下一节重点介绍 AKS 上的应用部署。您学习了将应用部署到 AKS 的不同方法，如何扩展应用，如何调试故障，以及如何使用 HTTPS 保护服务。
接下来的部分将重点讨论 AKS 中的安全性。您在 Kubernetes 中学习了基于角色的访问控制，以及如何将 AKS 与 Azure Active Directory 集成。然后，您了解了 pod 身份，pod 身份在后续几章中使用。之后，您学习了如何在 AKS 中安全地存储机密，然后我们专注于网络安全。
这本书的最后一部分集中在 AKS 与其他服务的一些高级集成上。您通过 Kubernetes API 部署了一个 Azure 数据库，并将其与集群上的 WordPress 应用集成在一起。然后，您探讨了如何使用 Azure 安全中心监控配置和修复集群上的威胁。然后在集群上部署 Azure 功能，并使用 KEDA 扩展它们。在最后一章中，您配置了一个 CI/CD 管道，根据代码更改自动将应用部署到 Kubernetes。
如果您已经成功地完成了本书中提供的所有示例，那么您现在应该已经准备好在 AKS 之上大规模地构建和运行应用了。****