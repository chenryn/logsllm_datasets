thing is of type T1 ∩ T2 if it can be described by both types,
e.g., if T1 is the C type for signed characters of range -128
to 127 and T2 is the C type for unsigned characters of range
0 to 255, then T1 ∩ T2 is the type for range 0 to 127. In
our type system, we use intersection types during constraint
solving where something is of type T1 ∩ T2 if it is the order-
theoretic meet (i.e., greatest lower bound) of T1 u T2.
The dual of intersection types is union type T1 ∪ T2,
corresponding to the order-theoretic join (i.e., lowest upper
bound) T1 t T2. The values of T1 ∪ T2 include the union
of values from both types. Note that union types are not the
same as sum types. A sum type adds a tag, while a union
type extends the range of values.
Output. The output of type inference is an upper and
lower bound on the type for each variable. The user is then
free to pick either as the inferred type. Of course if we
can completely infer the type we output the same type for
the upper and lower bound. However, outputting a range is
much more general, and can make explicit the uncertainty
due to the nature of the problem. For example, C unions
may be compiled down so that a single stack slot holds dif-
reg32_tnum32_tptr(α)⊥⊥int32_tuint32_treg16_tnum16_tint16_tuint16_treg8_treg1_tnum8_tint8_tuint8_tcode_tC types
int
unsigned int
short int
unsigned short int
char
unsigned char
* (pointer)
void *
void
union
struct, [] (array)
function
Corresponding types in our type system
int32 t
uint32 t
int16 t
uint16 t
int8 t
uint8 t
ptr(α)
ptr(>)
⊥
T ∪ T
{li : Ti}
τ mem → R → T (:τ fun)
Table 1. Mapping between the C types the
types in our type system.
ferent typed variables. The only reason we know the type
of the variable at any point in time is due to a user annota-
tion, which is completely lost during compilation. Our type
system allows us to express such uncertainty by expressing
one bound as a type conﬂict(⊥) and one as a C union (∪).
Correspondence to C Types. TIE’s type system contains
features of modern programming languages which are then
translated in a post-processing step to types in a speciﬁc
language. Currently TIE is targeted to output C types by
translating internally-inferred TIE types into C types using
the translation shown in Table 1. Structure types in C cor-
respond to record types in our language, as expected. The
void and void * rules may seem strange for those unfamiliar
with typing systems. It may seem that void * is a pointer to
void, however this is an unfortunate naming problem in C.
void corresponds to no type which is why we equate it with
⊥ in our system. 3 void * can point to anything at all, which
is why we equate it to ptr(>).
Evaluation Metrics. Our goal is to infer conservative yet
accurate types. Conservativeness means we want to infer no
more than the binary code tells us, e.g., never guess a type.
In addition, we want to be precise by inferring as much as
possible from the code.
More formally, let τt be a type variable for a term t.
We allow a typing algorithm to output both a lower bound
B↓(τt) and an upper bound B↑(τt) for a variable.
If the
typing algorithm wants to indicate a speciﬁc type it outputs
τ = B↓(τt) = B↑(τt).
An algorithm is conservative if the real type τ for a pro-
gram is between the upper and lower bound. More formally:
3Another option would be to introduce the unit type. We did not see
any advantage in doing so.
Deﬁnition 6.1. [CONSERVATIVENESS] For a term t, let τsrc
be the type of t in the source code. Given a well-typed
source code program, we say a typing algorithm for t is
conservative with respect to the real type of t (τsrc) if
B↓(τt)  for the upper bound
and ⊥ as a lower bound and always be conservative. There-
fore, we also deﬁne the notion of how precise the inferred
type is by measuring the distance between the upper and
lower bound. For example, if an algorithm outputs the same
upper and lower bound, and the output type is the same as
the source code type, the distance is 0 and the algorithm is
completely precise.
The distance is measured with respect to our type lattice.
If two types can form a type interval, i.e., one is a subtype
of the other, their distance is the number of edges separating
them on the lattice. If the two types are incompatible, their
distance is set to the maximum value. More formally, the
distance between types is deﬁned as:
Deﬁnition 6.2. [DISTANCE] For two types, τ1 and τ2, the
distance between them, denoted by ||τ1 − τ2||, is the differ-
ence between the level of each in the type lattice if τ1  − ⊥||.
˛˛˛˛+
i
||⊥ − >||
||
,
In our type system shown in Figure 6, the maximum
value of ||> − ⊥|| is 4.
Structural types. Our accuracy metric handles structures
as two dimensions in terms of distance: how many ﬁelds
were inferred vs. the real number of ﬁelds, and the distance
between the real type for a ﬁeld and its inferred type.
We formalize the distance between two structure types
A = {li : Si∈1..nA
} as ||A − B||
by measuring the difference between the number of ﬁelds
and type for each ﬁeld:
||A−B|| =
} and B = {li : T i∈1..nB
avg||Si − T i∈1.. max(nA,nB )
)
i
i
˛˛˛˛(1 − 1
nA
) − (1 − 1
nB
(1)
where nA and nB denote the number of ﬁelds for A and B,
respectively. The ﬁrst term shows the difference in the num-
ber of ﬁelds and the second term measures the distance of
each ﬁeld element using the subtype relation. Note that, to
be compatible with the levels in the type lattice the distances
are normalized over the total lattice height.
For example, suppose two record types U = {0 :
int32 t} and V = {0 : int32 t, 4 : uint32 t}. The
number of ﬁelds nU and nV are 1 and 2, respectively. Thus,
||U − V || = |(1 − 1
= 1. In addition,
||reg32 t− V || is computed as the difference of the levels
of reg32 t and V , which is ||reg32 t−{0 : >}|| +||{0 :
>} − V || = 1 + 1.5 = 2.5.
2)| + (0+4)/2
1) − (1 − 1
4
Statement
x := e
goto e
if e then goto et else goto ef
call f with m v∗ ret r
Generated constrains
τx = τe
τe = ptr(code t)
τe = reg1 t ∧ τt = ptr(code t) ∧ τf = ptr(code t)
τ0
(where F ‘ f : τmf → τv f → τr f , τ0
m = τmf ∧V
v(τv = τv f .[v]) ∧ τr = τr f
m = #update(τm))
Expression
x (variable)
v (integer)
−ne (unary neg)
e1 +32 e2
e1 +n6=32 e2
∼n e
e1  intn t
(τe1  Tγ ∧ Tγ  ptr(Tβ))
∨(τe1  ptr(Tβ))
τe1  Tγ ∧ Tγ  uintn t
τe1  reg1 t
τi = ptr(τm.[i]) ∧ τ = τm.[i] ∧ τ  Tγ ∧ Tγ  ptr(Tβ)
3. Addition is being used to add an integer of type
num32 t to a pointer of type τα. This case is sym-
metric to the above.
Unary negation (−n), bitwise complementing (∼n),
arithmetic operations on variables other than 32-bits, and
signed operations allow us to be much more speciﬁc in the
constraints generated. For example, unary negation and
signed comparison allow us to infer that the types of the
operands are at least of signed type. Note that the subtype
relation is covariant for the result type τ and contravari-
ant for the operand types since binary and unary operations
are functions with speciﬁc types, e.g., −n : intn t →
intn t.
Typing Memory Operations. Recall we model memory
as an array of elements indexed by an address. We denote
by [i] the DVSA value of i. The typing rules for load
and store should propagate types so that if we store a
value of type α at address [i1], and then subsequently load
a value from [i2], then the resulting type is α when [i1] =
[i2]. We ﬁrst describe how the typing rules express this idea,
and then discuss how equality between symbolic values is
calculated.
The load rule states that when we are given an index
i into memory m, then i) we can treat the type of i like a
pointer to the type of values at m.[i], and ii) the returned
type τ is the same as the type of values stored at m.[i], and
iii) since the load was t bytes, the resulting type must be a
subtype of t (i.e., τ size = 10;
Figure 8. Access to structural data (source
code and stack)
TIE also handles calls to functions without known pa-
rameter types, e.g., when one local procedure calls another
local procedure. During pre-processing TIE adds all func-
tion names to F . When a call is made to a function, TIE
matches up the callers arguments with the number of pa-
rameters inferred for the callee during DVSA. TIE then adds
the appropriate equality constraints, e.g., the type of the ﬁrst
passed argument must be the same as the ﬁrst parameter.
This process is dependent on calling conventions and plat-
form. For example, in the standard call of 32-bit x86 ar-