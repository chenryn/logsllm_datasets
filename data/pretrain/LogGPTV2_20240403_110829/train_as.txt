.\" rather than of what is mandated and permitted
.\" by current and future standards.
.\"
.\" although we strive to abide by the standards, in some cases our
.\" implementation is safe even when the standard does not demand safety,
.\" and in other cases our implementation does not meet the standard safety
.\" requirements.
.\" the latter are most likely bugs; the former, when marked
.\" as
.\" .ir preliminary ,
.\" should not be counted on: future standards may
.\" require changes that are not compatible with the additional safety
.\" properties afforded by the current implementation.
.\"
.\" furthermore,
.\" the posix standard does not offer a detailed definition of safety.
.\" we assume that, by "safe to call", posix means that,
.\" as long as the program does not invoke undefined behavior,
.\" the "safe to call" function behaves as specified,
.\" and does not cause other functions to deviate from their specified behavior.
.\" we have chosen to use its loose
.\" definitions of safety, not because they are the best definitions to use,
.\" but because choosing them harmonizes this manual with posix.
.\"
.\" please keep in mind that these are preliminary definitions and annotations,
.\" and certain aspects of the definitions are still under
.\" discussion and might be subject to clarification or change.
.\"
.\" over time,
.\" we envision evolving the preliminary safety notes into stable commitments,
.\" as stable as those of our interfaces.
.\" as we do, we will remove the
.\" .i preliminary
.\" keyword from safety notes.
.\" as long as the keyword remains, however,
.\" they are not to be regarded as a promise of future behavior.
.pp
other keywords that appear in safety notes are defined in subsequent sections.
.\"
.\"
.\" .ss unsafe features
.\" functions that are unsafe to call in certain contexts are annotated with
.\" keywords that document their features that make them unsafe to call.
.\" as-unsafe features in this section indicate the functions are never safe
.\" to call when asynchronous signals are enabled.
.\" ac-unsafe features
.\" indicate they are never safe to call when asynchronous cancellation is
.\" .\" enabled.
.\" there are no mt-unsafe marks in this section.
.\" .tp
.\" .\" .i code
.\" functions marked with
.\" .i lock
.\" as an as-unsafe feature may be
.\" .\" interrupted by a signal while holding a non-recursive lock.
.\" if the signal handler calls another such function that takes the same lock,
.\" the result is a deadlock.
.\"
.\" functions annotated with
.\" .i lock
.\" as an ac-unsafe feature may, if canceled asynchronously,
.\" fail to release a lock that would have been released if their execution
.\" had not been interrupted by asynchronous thread cancellation.
.\" once a lock is left taken,
.\" attempts to take that lock will block indefinitely.
.\" .tp
.\" .i corrupt
.\" functions marked with
.\" .\" .i corrupt
.\" as an as-unsafe feature may corrupt
.\" data structures and misbehave when they interrupt,
.\" or are interrupted by, another such function.
.\" unlike functions marked with
.\" .ir lock ,
.\" these take recursive locks to avoid mt-safety problems,
.\" but this is not enough to stop a signal handler from observing
.\" a partially-updated data structure.
.\" further corruption may arise from the interrupted function's
.\" failure to notice updates made by signal handlers.
.\"
.\" functions marked with
.\" .i corrupt
.\" as an ac-unsafe feature may leave
.\" data structures in a corrupt, partially updated state.
.\" subsequent uses of the data structure may misbehave.
.\"
.\" .\" a special case, probably not worth documenting separately, involves
.\" .\" reallocing, or even freeing pointers.  any case involving free could
.\" .\" be easily turned into an ac-safe leak by resetting the pointer before
.\" .\" releasing it; i don't think we have any case that calls for this sort
.\" .\" of fixing.  fixing the realloc cases would require a new interface:
.\" .\" instead of @code{ptr=realloc(ptr,size)} we'd have to introduce
.\" .\" @code{acsafe_realloc(&ptr,size)} that would modify ptr before
.\" .\" releasing the old memory.  the ac-unsafe realloc could be implemented
.\" .\" in terms of an internal interface with this semantics (say
.\" .\" __acsafe_realloc), but since realloc can be overridden, the function
.\" .\" we call to implement realloc should not be this internal interface,
.\" .\" but another internal interface that calls __acsafe_realloc if realloc
.\" .\" was not overridden, and calls the overridden realloc with async
.\" .\" cancel disabled.  --lxoliva
.\" .tp
.\" .i heap
.\" functions marked with
.\" .i heap
.\" may call heap memory management functions from the
.\" .br malloc (3)/ free (3)
.\" family of functions and are only as safe as those functions.
.\" this note is thus equivalent to:
.\"
.\"     | as-unsafe lock | ac-unsafe lock fd mem |
.\" .\" @sampsafety{@asunsafe{@asulock{}}@acunsafe{@aculock{} @acsfd{} @acsmem{}}}
.\" .\"
.\" .\" check for cases that should have used plugin instead of or in
.\" .\" addition to this.  then, after rechecking gettext, adjust i18n if
.\" .\" needed.
.\" .tp
.\" .i dlopen
.\" functions marked with
.\" .i dlopen
.\" use the dynamic loader to load
.\" shared libraries into the current execution image.
.\" this involves opening files, mapping them into memory,
.\" allocating additional memory, resolving symbols,
.\" applying relocations and more,
.\" all of this while holding internal dynamic loader locks.
.\"
.\" the locks are enough for these functions to be as-unsafe and ac-unsafe,
.\" but other issues may arise.
.\" at present this is a placeholder for all
.\" potential safety issues raised by
.\" .br dlopen (3).
.\"
.\" .\" dlopen runs init and fini sections of the module; does this mean
.\" .\" dlopen always implies plugin?
.\" .tp
.\" .i plugin
.\" functions annotated with
.\" .i plugin
.\" may run code from plugins that
.\" may be external to the gnu c library.
.\" such plugin functions are assumed to be
.\" mt-safe, as-unsafe and ac-unsafe.
.\" examples of such plugins are stack unwinding libraries,
.\" name service switch (nss) and character set conversion (iconv) back-ends.
.\"
.\" although the plugins mentioned as examples are all brought in by means
.\" of dlopen, the
.\" .i plugin
.\" keyword does not imply any direct
.\" involvement of the dynamic loader or the
.\" .i libdl
.\" interfaces,
.\" those are covered by
.\" .ir dlopen .
.\" for example, if one function loads a module and finds the addresses
.\" of some of its functions,
.\" while another just calls those already-resolved functions,
.\" the former will be marked with
.\" .ir dlopen ,
.\" whereas the latter will get the
.\" .ir plugin .
.\" when a single function takes all of these actions, then it gets both marks.
.\" .tp
.\" .i i18n
.\" functions marked with
.\" .i i18n
.\" may call internationalization
.\" functions of the
.\" .br gettext (3)
.\" family and will be only as safe as those
.\" functions.
.\" this note is thus equivalent to:
.\"
.\"     | mt-safe env | as-unsafe corrupt heap dlopen | ac-unsafe corrupt |
.\"
.\" .\" @sampsafety{@mtsafe{@mtsenv{}}@asunsafe{@asucorrupt{} @ascuheap{} @ascudlopen{}}@acunsafe{@acucorrupt{}}}
.\" .tp
.\" .i timer
.\" functions marked with
.\" .i timer
.\" use the
.\" .br alarm (3)
.\" function or
.\" similar to set a time-out for a system call or a long-running operation.
.\" in a multi-threaded program, there is a risk that the time-out signal
.\" will be delivered to a different thread,
.\" thus failing to interrupt the intended thread.
.\" besides being mt-unsafe, such functions are always
.\" as-unsafe, because calling them in signal handlers may interfere with
.\" timers set in the interrupted code, and ac-unsafe,
.\" because there is no safe way to guarantee an earlier timer
.\" will be reset in case of asynchronous cancellation.
.\"
.\"
.ss conditionally safe features
for some features that make functions unsafe to call in certain contexts,
there are known ways to avoid the safety problem other than
refraining from calling the function altogether.
the keywords that follow refer to such features,
and each of their definitions indicates
how the whole program needs to be constrained in order to remove the
safety problem indicated by the keyword.
only when all the reasons that
make a function unsafe are observed and addressed,
by applying the documented constraints,
does the function become safe to call in a context.
.tp
.i init
functions marked with
.i init
as an mt-unsafe feature perform
mt-unsafe initialization when they are first called.
.ip
calling such a function at least once in single-threaded mode removes
this specific cause for the function to be regarded as mt-unsafe.
if no other cause for that remains,
the function can then be safely called after other threads are started.
.\"
.\" functions marked with
.\" .i init
.\" as an as-unsafe or ac-unsafe feature use the gnu c library internal
.\" .i libc_once
.\" machinery or similar to initialize internal data structures.
.\"
.\" if a signal handler interrupts such an initializer,
.\" and calls any function that also performs
.\" .i libc_once
.\" initialization, it will deadlock if the thread library has been loaded.
.\"
.\" furthermore, if an initializer is partially complete before it is canceled
.\" or interrupted by a signal whose handler requires the same initialization,
.\" some or all of the initialization may be performed more than once,
.\" leaking resources or even resulting in corrupt internal data.
.\"
.\" applications that need to call functions marked with
.\" .i init
.\" as an as-safety or ac-unsafe feature should ensure
.\" the initialization is performed
.\" before configuring signal handlers or enabling cancellation,
.\" so that the as-safety and ac-safety issues related with
.\" .i libc_once
.\" do not arise.
.\"
.\" .\" we may have to extend the annotations to cover conditions in which
.\" .\" initialization may or may not occur, since an initial call in a safe
.\" .\" context is no use if the initialization doesn't take place at that
.\" .\" time: it doesn't remove the risk for later calls.
.tp
.i race
functions annotated with
.i race
as an mt-safety issue operate on
objects in ways that may cause data races or similar forms of
destructive interference out of concurrent execution.
in some cases,
the objects are passed to the functions by users;
in others, they are used by the functions to return values to users;
in others, they are not even exposed to users.
.\"
.\" we consider access to objects passed as (indirect) arguments to
.\" functions to be data race free.
.\" the assurance of data race free objects
.\" is the caller's responsibility.
.\" we will not mark a function as mt-unsafe or as-unsafe
.\" if it misbehaves when users fail to take the measures required by
.\" posix to avoid data races when dealing with such objects.
.\" as a general rule, if a function is documented as reading from
.\" an object passed (by reference) to it, or modifying it,
.\" users ought to use memory synchronization primitives
.\" to avoid data races just as they would should they perform
.\" the accesses themselves rather than by calling the library function.
.\" standard i/o
.\" .ri ( "file *" )
.\" streams are the exception to the general rule,
.\" in that posix mandates the library to guard against data races
.\" in many functions that manipulate objects of this specific opaque type.
.\" we regard this as a convenience provided to users,
.\" rather than as a general requirement whose expectations
.\" should extend to other types.
.\"
.\" in order to remind users that guarding certain arguments is their
.\" responsibility, we will annotate functions that take objects of certain
.\" types as arguments.
.\" we draw the line for objects passed by users as follows:
.\" objects whose types are exposed to users,
.\" and that users are expected to access directly,
.\" such as memory buffers, strings,
.\" and various user-visible structured types, do
.\" .i not
.\" give reason for functions to be annotated with
.\" .ir race .
.\" it would be noisy and redundant with the general requirement,
.\" and not many would be surprised by the library's lack of internal
.\" guards when accessing objects that can be accessed directly by users.
.\"
.\" as for objects that are opaque or opaque-like,
.\" in that they are to be manipulated only by passing them
.\" to library functions (e.g.,
.\" .ir file ,
.\" .ir dir ,
.\" .ir obstack ,
.\" .ir iconv_t ),
.\" there might be additional expectations as to internal coordination
.\" of access by the library.
.\" we will annotate, with
.\" .i race
.\" followed by a colon and the argument name,
.\" functions that take such objects but that do not take
.\" care of synchronizing access to them by default.
.\" for example,
.\" .i file
.\" stream
.\" .i unlocked
.\" functions
.\" .rb ( unlocked_stdio (3))
.\" will be annotated,
.\" but those that perform implicit locking on
.\" .i file
.\" streams by default will not,
.\" even though the implicit locking may be disabled on a per-stream basis.
.\"
.\" in either case, we will not regard as mt-unsafe functions that may
.\" access user-supplied objects in unsafe ways should users fail to ensure
.\" the accesses are well defined.
.\" the notion prevails that users are expected to safeguard against
.\" data races any user-supplied objects that the library accesses
.\" on their behalf.
.\"
.\" .\" the above describes @mtsrace; @mtasurace is described below.
.\"
.\" this user responsibility does not apply, however,
.\" to objects controlled by the library itself,
.\" such as internal objects and static buffers used
.\" to return values from certain calls.
.\" when the library doesn't guard them against concurrent uses,
.\" these cases are regarded as mt-unsafe and as-unsafe (although the
.\" .i race
.\" mark under as-unsafe will be omitted
.\" as redundant with the one under mt-unsafe).
.\" as in the case of user-exposed objects,
.\" the mark may be followed by a colon and an identifier.
.\" the identifier groups all functions that operate on a
.\" certain unguarded object; users may avoid the mt-safety issues related
.\" with unguarded concurrent access to such internal objects by creating a
.\" non-recursive mutex related with the identifier,
.\" and always holding the mutex when calling any function marked
.\" as racy on that identifier,
.\" as they would have to should the identifier be
.\" an object under user control.
.\" the non-recursive mutex avoids the mt-safety issue,
.\" but it trades one as-safety issue for another,
.\" so use in asynchronous signals remains undefined.
.\"
.\" when the identifier relates to a static buffer used to hold return values,
.\" the mutex must be held for as long as the buffer remains in use
.\" by the caller.
.\" many functions that return pointers to static buffers offer reentrant
.\" variants that store return values in caller-supplied buffers instead.
.\" in some cases, such as
.\" .br tmpname (3),
.\" the variant is chosen not by calling an alternate entry point,
.\" but by passing a non-null pointer to the buffer in which the
.\" returned values are to be stored.
.\" these variants are generally preferable in multi-threaded programs,
.\" although some of them are not mt-safe because of other internal buffers,
.\" also documented with
.\" .i race
.\" notes.
.tp
.i const
functions marked with
.i const
as an mt-safety issue non-atomically
modify internal objects that are better regarded as constant,
because a substantial portion of the gnu c library accesses them without
synchronization.
unlike
.ir race ,
which causes both readers and
writers of internal objects to be regarded as mt-unsafe,\" and as-unsafe,
this mark is applied to writers only.
writers remain\" equally
mt-unsafe\" and as-unsafe
to call,
but the then-mandatory constness of objects they
modify enables readers to be regarded as mt-safe\" and as-safe
(as long as no other reasons for them to be unsafe remain),
since the lack of synchronization is not a problem when the
objects are effectively constant.
.ip
the identifier that follows the
.i const
mark will appear by itself as a safety note in readers.
programs that wish to work around this safety issue,
so as to call writers, may use a non-recursive
read-write lock
associated with the identifier, and guard
.i all
calls to functions marked with
.i const
followed by the identifier with a write lock, and
.i all
calls to functions marked with the identifier
by itself with a read lock.
.\" the non-recursive locking removes the mt-safety problem,
.\" but it trades one as-safety problem for another,
.\" so use in asynchronous signals remains undefined.
.\"
.\" .\" but what if, instead of marking modifiers with const:id and readers
.\" .\" with just id, we marked writers with race:id and readers with ro:id?
.\" .\" instead of having to define each instance of 'id', we'd have a
.\" .\" general pattern governing all such 'id's, wherein race:id would
.\" .\" suggest the need for an exclusive/write lock to make the function
.\" .\" safe, whereas ro:id would indicate 'id' is expected to be read-only,
.\" .\" but if any modifiers are called (while holding an exclusive lock),
.\" .\" then ro:id-marked functions ought to be guarded with a read lock for
.\" .\" safe operation.  ro:env or ro:locale, for example, seems to convey
.\" .\" more clearly the expectations and the meaning, than just env or
.\" .\" locale.
.tp
.i sig
functions marked with
.i sig
as a mt-safety issue
.\" (that implies an identical as-safety issue, omitted for brevity)
may temporarily install a signal handler for internal purposes,
which may interfere with other uses of the signal,
identified after a colon.
.ip
this safety problem can be worked around by ensuring that no other uses
of the signal will take place for the duration of the call.
holding a non-recursive mutex while calling all functions that use the same
temporary signal;
blocking that signal before the call and resetting its
handler afterwards is recommended.
.\"
.\" there is no safe way to guarantee the original signal handler is
.\" restored in case of asynchronous cancellation,
.\" therefore so-marked functions are also ac-unsafe.
.\"
.\" .\" fixme: at least deferred cancellation should get it right, and would
.\" .\" obviate the restoring bit below, and the qualifier above.
.\"
.\" besides the measures recommended to work around the
.\" mt-safety and as-safety problem,
.\" in order to avert the cancellation problem,
.\" disabling asynchronous cancellation
.\" .i and
.\" installing a cleanup handler to restore the signal to the desired state
.\" and to release the mutex are recommended.
.tp
.i term
functions marked with
.i term
as an mt-safety issue may change the
terminal settings in the recommended way, namely: call
.br tcgetattr (3),
modify some flags, and then call
.br tcsetattr (3),
this creates a window in which changes made by other threads are lost.
thus, functions marked with
.i term
are mt-unsafe.
.\" the same window enables changes made by asynchronous signals to be lost.
.\" these functions are also as-unsafe,
.\" but the corresponding mark is omitted as redundant.
.ip
it is thus advisable for applications using the terminal to avoid
concurrent and reentrant interactions with it,
by not using it in signal handlers or blocking signals that might use it,
and holding a lock while calling these functions and interacting
with the terminal.
this lock should also be used for mutual exclusion with
functions marked with
.ir race:tcattr(fd) ,
where
.i fd
is a file descriptor for the controlling terminal.
the caller may use a single mutex for simplicity,
or use one mutex per terminal,
even if referenced by different file descriptors.
.\"
.\" functions marked with
.\" .i term
.\" as an ac-safety issue are supposed to
.\" restore terminal settings to their original state,
.\" after temporarily changing them, but they may fail to do so if canceled.
.\"
.\" .\" fixme: at least deferred cancellation should get it right, and would
.\" .\" obviate the restoring bit below, and the qualifier above.
.\"
.\" besides the measures recommended to work around the
.\" mt-safety and as-safety problem,
.\" in order to avert the cancellation problem,
.\" disabling asynchronous cancellation
.\" .i and
.\" installing a cleanup handler to
.\" restore the terminal settings to the original state and to release the
.\" mutex are recommended.
.\"
.\"
.ss other safety remarks
additional keywords may be attached to functions,
indicating features that do not make a function unsafe to call,
but that may need to be taken into account in certain classes of programs:
.tp
.i locale
functions annotated with
.i locale
as an mt-safety issue read from
the locale object without any form of synchronization.
functions
annotated with
.i locale
called concurrently with locale changes may
behave in ways that do not correspond to any of the locales active
during their execution, but an unpredictable mix thereof.
.ip
we do not mark these functions as mt-unsafe,\" or as-unsafe,
however,
because functions that modify the locale object are marked with
.i const:locale
and regarded as unsafe.
being unsafe, the latter are not to be called when multiple threads
are running or asynchronous signals are enabled,
and so the locale can be considered effectively constant
in these contexts,
which makes the former safe.
.\" should the locking strategy suggested under @code{const} be used,
.\" failure to guard locale uses is not as fatal as data races in
.\" general: unguarded uses will @emph{not} follow dangling pointers or
.\" access uninitialized, unmapped or recycled memory.  each access will
.\" read from a consistent locale object that is or was active at some
.\" point during its execution.  without synchronization, however, it
.\" cannot even be assumed that, after a change in locale, earlier
.\" locales will no longer be used, even after the newly-chosen one is
.\" used in the thread.  nevertheless, even though unguarded reads from
.\" the locale will not violate type safety, functions that access the
.\" locale multiple times may invoke all sorts of undefined behavior
.\" because of the unexpected locale changes.
.tp
.i env
functions marked with
.i env
as an mt-safety issue access the
environment with
.br getenv (3)
or similar, without any guards to ensure
safety in the presence of concurrent modifications.
.ip
we do not mark these functions as mt-unsafe,\" or as-unsafe,
however,
because functions that modify the environment are all marked with
.i const:env
and regarded as unsafe.