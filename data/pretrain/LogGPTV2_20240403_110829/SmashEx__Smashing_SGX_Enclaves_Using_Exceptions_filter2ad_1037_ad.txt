anchor. Therefore, SmashEx works on Open Enclave with SGX1.
In Intel SGX SDK, SmashEx needs to bypass the above check to
succeed. We examined the 8 exceptions (unconditionally supported
exceptions [15]) supported in SGX1. None can be used to trigger
the AEX at the enclave entry. As a result, we are not able to exploit
Intel SGX SDK on SGX1 with SmashEx.
However, this safety comes with a trade-off in functionality for
Intel SGX SDK: with this check in force, Intel SGX SDK disables
asynchronous events on SGX1 and does not support programming
primitives for user-defined signal handlers. The root vulnerability
(i.e., the lack of atomicity) is fundamental. We hypothesized that it
would affect SGX1 if Intel SGX SDK allowed execution of in-enclave
exception handlers, and confirmed our hypothesis by removing the
validity check in the Intel SGX SDK and repeating our attack. Our
PoC works successfully on Intel SDK for SGX1 with the one-line
validity check removed.
8.2 Extensibility to Other Enclave Runtimes
Apart from Intel SGX SDK and Open Enclave, we survey 12 other
enclave runtimes to understand how the vulnerability impacts them.
We report that 8 of them are vulnerable to SmashEx, and have
verified this by constructing SmashEx PoC exploits against them.
Derivatives of Intel SGX SDK & Open Enclave. In our survey,
8 enclave runtimes are based on either Intel SGX SDK or Open
Enclave SDK. Among them, 6 runtimes use Intel SGX SDK or Open
Enclave as it is, without any modification to the exception handling
logic. Those include Apache Teaclave [1], Rust SGX SDK [62], CoS-
MIX [48], and Veracruz [26] which are based on Intel SGX SDK,
and SGX-LKL [49] and EdgelessRT [11] which are based on Open
Enclave. Since all the relevant interfaces are still exposed and un-
changed, such runtimes inherit the vulnerability from the runtime
they are based on. The other 2 runtimes, Google Asylo [29] and
Ratel [24], use modified Intel SGX SDK. They have altered the be-
haviors of exception handling or other enclave interfaces relevant
to SmashEx and hence need to be examined individually. Google
Asylo [29] keeps the original exception handling interface and as
a result is vulnerable to SmashEx. However, it also provides an
alternative exception handling interface which uses a dedicated
stack and cannot be exploited by SmashEx. Ratel [24] is immune
to SmashEx because it uses a separate pre-allocated enclave stack
for exception handling. We discuss the dedicated-stack design in
details in Section 9.1.
Independent Runtimes. RedHat Enarx [12] has its own SGX run-
time independent of Intel SGX SDK and Open Enclave. Listing 3
shows how it sets up the exception handler stack shortly after
the enclave is re-entered for exception handling. Similarly to its
counterpart in Open Enclave, the code loads the saved rsp register
from the SSA region, shifts it by a fixed offset, and starts storing
untrusted register values at that location. We therefore conclude,
through our best-effort code inspection, that SmashEx would work
successfully on RedHat Enarx. Though open-source, RedHat Enarx
does not have fully functioning code base yet [13]. Thus, we were
not able to experimentally demonstrate and confirm that SmashEx
works on it.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
shl
mov
add
mov
sub
and
$12,
%rcx,
%rax,
%rax
%r11
%r11
# %rax = CSSA * 4096
# %r11 = &Layout
# %r11 = &aex[CSSA - 1]
RSP(%r11), %r10
%r10
$128,
$~0xf, %r10
# %r10 = aex[CSSA - 1].gpr.rsp
# Skip the red zone
# Align
mov
SRSP(%r11), %rax
# %rax = syscall return stack pointer
%rsp
xchg
pushq
push
savep
%r10,
$0
%r10
# Swap to trusted stack
# Align stack
# Save untrusted %rsp
# Save untrusted preserved registers
Listing 3: Exception handler stack setup in RedHat Enarx.
The other three runtimes developed independently of Intel SGX
SDK and Open Enclave SDKÐAlibaba Inclavare [14], Fortanix Rust
EDP [39], and Graphene-SGX [33, 58]Ðare deemed immune to
SmashEx through manual inspection. Alibaba Inclavare [14] and
Fortanix Rust EDP [39] both simply disable all in-enclave exception
handling, which limits the enclave functionality. Graphene-SGX [33,
58] introduces software-based atomicity to safely handle exceptions,
which we elaborate on in Section 9.3.
9 DEFENDING AGAINST SMASHEX
The proof-of-concept exploits for SmashEx are viable because the
enclave runtimes (a) use the common program stack for exception
handling; and (b) lack software- or hardware-enforced atomicity.
An ideal solution would be to defeat both (a) and (b). However, we
discuss the mitigations for these two issues separately. We summa-
rize how certain design choices render enclave runtimes immune
to SmashEx, by disabling either requirement (a) or (b):
• Use a dedicated stack for exception handling (e.g., Ratel [24]
and the alternative mechanism in Google Asylo [29]);
• Disable exception handling (e.g., Fortanix Rust EDP [39] and
Alibaba Inclavare [14]);
• Program the exception handler in a re-entrant way (e.g.,
Graphene-SGX [33]).
However, those designs come with significant downsides either
by limiting the enclave functionality or by introducing complexity.
9.1 Dedicated Exception Handler Stack
Unlike the original exception handler in Intel SGX SDK, the excep-
tion handling interfaces in Google Asylo and Ratel use a dedicated
stack separate from the one used by the interrupted thread. They
therefore avoid relying on the rsp value in the SSA region which
SmashEx exploits to control the anchor. However, since both of
9
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea787them reserve only one separate stack, exception handling through
such interfaces cannot be nested. In other words, if during the han-
dling of an exception, another exception occurs, this new exception
cannot be handled inside the enclave. This limits the compatibil-
ity between Google Asylo or Ratel and traditional programming
models where signals can be nested. One can adapt these runtimes
to support nested exceptions by reserving an individual stack for
each level of nested exceptions. However, the fixed memory size
required by each reserved stack may limit its scalability.
9.2 Disabling Exception Handling
Both Fortanix Rust EDP [39] and Alibaba Inclavare [14] are immune
to SmashEx because they do not support any in-enclave exception
handling. They configure enclaves so that the SGX hardware forbids
the untrusted software from re-entering the enclave via EENTER
after an AEX. Specifically, the configuration parameter, TCS.NSSA,
when set to 1, implies that the hardware can store at most 1 AEX
context inside the SSA at any time. Whenever the untrusted soft-
ware attempts to re-enter the enclave via EENTER following an AEX,
the hardware disallows it because of the insufficient AEX context
slots to hold another potential AEX after the re-entry. Without the
possibility of a re-entry, in-enclave exception handling is effectively
disabled. Making an enclave thread execution fully synchronous
this way simplifies the reasoning about re-entrancy. However, this
design choice limits the functionality of the enclave software. For
example, the try-catch exception handling primitive widely used
in modern high-level programming languages cannot leverage hard-
ware exception support inside an enclave, making them inefficient
and cumbersome to enable. It hinders the implementation of signal
handling mechanisms commonly provided by modern OSes such as
Linux, which are important to the functioning of user applications.
Such limitations degrade the compatibility of Alibaba Inclavare and
Fortanix Rust EDP with traditional programming models.
9.3 Re-entrant Exception Handling
An SGX runtime software may attempt to provide atomic primitives
for re-entrant exception handling. One example is Graphene-SGX.
register value inside the SSA region), and handles it differently in
different cases. For example, when Graphene-SGX finds that the
AEX occurred within the sanitization logic at the enclave entry, it
will emulate the unfinished sanitization logic. Instead of operating
on real registers as in normal execution, it operates on the register
values stored in the SSA region (see Listing 4). This separates the
execution of the sanitization logic and the exception handler. Thus,
when the enclave starts the post-sanitization processing of the
AEX, the stack has already been correctly set up and is no longer
controlled by the untrusted software.
leaq .Ltmp_rip_saved0(%rip), %rax
cmpq %rax, SGX_GPR_RIP(%rbx)
je .Lemulate_tmp_rip_saved0
leaq .Ltmp_rip_saved1(%rip), %rax
cmpq %rax, SGX_GPR_RIP(%rbx)
je .Lemulate_tmp_rip_saved1
leaq .Ltmp_rip_saved2(%rip), %rax
cmpq %rax, SGX_GPR_RIP(%rbx)
je .Lemulate_tmp_rip_saved2
jmp .Lemulate_tmp_rip_end
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15 .Lemulate_tmp_rip_saved0:
16
17
18
19
20 .Lemulate_tmp_rip_saved1:
21
22
23
24
25 .Lemulate_tmp_rip_saved2:
26
27
28
29 .Lemulate_tmp_rip_end:
30
31
# emulate jmp *%gs:SGX_TMP_RIP
movq %gs:SGX_TMP_RIP, %rax
movq %rax, SGX_GPR_RIP(%rbx)
movq SGX_GPR_RSP(%rbx), %rsi
// ...
# emulate movq SGX_CPU_CONTEXT_R15 - SGX_CPU_CONTEXT_RIP(%rsp), %r15
movq SGX_GPR_RSP(%rbx), %rax
movq SGX_CPU_CONTEXT_R15 - SGX_CPU_CONTEXT_RIP(%rax), %rax
movq %rax, SGX_GPR_R15(%rbx)
# emulate movq SGX_CPU_CONTEXT_RSP - SGX_CPU_CONTEXT_RIP(%rsp), %rsp
movq SGX_GPR_RSP(%rbx), %rax
movq SGX_CPU_CONTEXT_RSP - SGX_CPU_CONTEXT_RIP(%rax), %rax
movq %rax, SGX_GPR_RSP(%rbx)
Listing 5: Emulation of part of the enclave context
restoration code in the exception handler of Graphene-SGX.
movq SGX_CPU_CONTEXT_R15 - SGX_CPU_CONTEXT_RIP(%rsp), %r15
movq SGX_CPU_CONTEXT_RSP - SGX_CPU_CONTEXT_RIP(%rsp), %rsp
1 .Ltmp_rip_saved0:
2
3 .Ltmp_rip_saved1:
4
5 .Ltmp_rip_saved2:
6
jmp *%gs:SGX_TMP_RIP
// ...
movq SGX_GPR_RIP(%rbx), %rax
leaq .Locall_about_to_eexit_begin(%rip), %r11
cmpq %r11, %rax
jb .Lhandle_interrupted_ocall_case_c
leaq .Locall_about_to_eexit_end(%rip), %r11
cmpq %r11, %rax
jae .Lhandle_interrupted_ocall_case_c
1
2
3
4
5
6
7
8
9
10
11 .Lhandle_interrupted_ocall_case_c:
12
13
14
15
16
17
18
movq %rdi, SGX_GPR_RSI(%rbx) # external event for .Lreturn_from_ocall
leaq .Lreturn_from_ocall_after_stack_restore(%rip), %rax
movq %rax, SGX_GPR_RIP(%rbx)
movq %rsi, SGX_GPR_RSP(%rbx)
movq $0, %gs:SGX_PRE_OCALL_STACK
andq $(~(RFLAGS_DF | RFLAGS_AC)), SGX_GPR_RFLAGS(%rbx)
jmp .Leexit_exception