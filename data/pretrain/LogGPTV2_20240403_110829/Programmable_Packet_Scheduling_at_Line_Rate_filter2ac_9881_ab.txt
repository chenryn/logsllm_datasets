scheduling transaction before enqueuing an element into that
node’s PIFO; this element is either a packet or a reference to
a child PIFO of the node. Second, a scheduling transaction
that speciﬁes how the rank is computed for elements (packet
or PIFO references) that are enqueued into the node’s PIFO.
Figure 2b shows an example for HPFQ.
When a packet is enqueued into a scheduling tree, it ex-
ecutes one transaction at each node whose packet predicate
matches the arriving packet. These nodes form a path from
a leaf to the root of the tree and the transaction at each node
on this path updates the scheduling order at that node. One
element is enqueued into the PIFO at each node on the path
from the leaf to the root. At the leaf node, that element is the
packet itself; at the other nodes, it is a reference to the next
PIFO on the path towards the leaf. Packets are dequeued in
the order encoded by the tree of PIFOs (Figure 3).
2.3 Shaping transactions
So far, we have only considered work-conserving schedul-
ing algorithms. Shaping transactions allow us to program
non-work-conserving scheduling algorithms. Non-work-
conserving algorithms differ from work-conserving algo-
rithms in that they decide the time at which packets are
Left(0.1)Right(0.9)A(0.3)B(0.7)C(0.4)D(0.6)rootLeftRightrootTrue,WFQ_Rootp.class== Left,WFQ_Leftp.class== Right,WFQ_RightP1P2LRRLPIFO-LP3P4PIFO-RThis tree encodesthe orderLP3RP1RP2LP4i.e., P3, P1, P2, P4PIFO-Roottokens = tokens + r * ( now - last_time )
if ( tokens > B):
tokens = B
if (p. length  0): C.H dequeuesref, enqueuesit into P.S.3.   Time T’ (> T): P.S dequeuesfrom C.S.Shaping (C.H)Scheduling (C.S)Scheduling (P.S)1bArrivingElementmultiple nodes with shaping transactions along a packet’s
path from its leaf to the root.
3. THE EXPRESSIVENESS OF PIFOS
In addition to the three examples from §2, we now provide
several more examples (§3.1 through §3.4) and also describe
the limitations of our programming model (§3.5).
3.1 Least Slack-Time First
Least Slack-Time First (LSTF) [29, 31] schedules packets
at each switch in increasing order of packet slacks, i.e., the
time remaining until each packet’s deadline. Packet slacks
are initialized at an end host or edge switch and are decre-
mented by the wait time at each switch’s queue. We can
program LSTF using a simple scheduling transaction:
= p. slack + p. arrival_time
p. rank
The addition of the packet’s arrival time to the slack al-
ready carried in the packet ensures that packets are dequeued
in order of their slack at the time of dequeue, not enqueue.
Then, after packets are dequeued, we subtract the time at
which the packet is dequeued from the packet’s slack, which
has the effect of decrementing the slack by the wait time at
the switch’s queue. This subtraction can be achieved by pro-
gramming the egress pipeline of a programmable switch [17]
to decrement one header ﬁeld by another.
3.2 Stop-and-Go Queueing
if ( now >= frame_end_time ):
frame_begin_time = frame_end_time
frame_end_time
= frame_begin_time + T
p. rank = frame_end_time
Figure 6: Shaping transaction for Stop-and-Go Queueing.
Stop-and-Go Queueing [24] is a non-work-conserving al-
gorithm that provides bounded delays to packets using a
framing strategy. Time is divided into non-overlapping
frames of equal length T, where every packet arriving within
a frame is transmitted at the end of the frame, smoothing out
any burstiness in trafﬁc patterns induced by previous hops.
The shaping transaction in Figure 6 speciﬁes the scheme.
frame_begin_time and frame_end_time are two state vari-
ables that track the beginning and end of the current frame
in wall-clock time. When a packet is enqueued, its departure
time is set to the end of the current frame. Multiple packets
with the same departure time are sent out in ﬁrst-in ﬁrst-out
order, as guaranteed by a PIFO’s semantics for breaking ties
with equal ranks (§2).
3.3 Minimum rate guarantees
A common scheduling policy on many switches today is
providing a minimum rate guarantee to a ﬂow, provided the
sum of such guarantees does not exceed the link capacity.
A minimum rate guarantee can be programmed using PIFOs
with a two-level PIFO tree, where the root of the tree im-
plements strict priority scheduling across ﬂows. Flows be-
low their minimum rate are scheduled preferentially to ﬂows
# Replenish tokens
tb = tb + min_rate * ( now - last_time )
if ( tb > BURST_SIZE ):
tb = BURST_SIZE
# Check if we have enough tokens
if ( tb > p. size ):
p. over_min = 0 # under min . rate
tb = tb - p. size
else :
p. over_min = 1 # over min . rate
last_time = now
p. rank = p. over_min
Figure 7: Scheduling transaction for min. rate guarantees.
above their minimum rate. Then, at the next level of the tree,
the PIFOs implement the FIFO discipline for each ﬂow.
When a packet is enqueued, we execute a FIFO schedul-
ing transaction at its leaf node, setting its rank to the wall-
clock time on arrival. At the root, a PIFO reference (the
packet’s ﬂow identiﬁer) is pushed into the root PIFO using
a rank that reﬂects whether the ﬂow is above or below its
rate limit after the arrival of the current packet. To deter-
mine this, we run the scheduling transaction in Figure 7 that
uses a token bucket (the state variable tb) that can be ﬁlled
up until BURST_SIZE to decide if the arriving packet puts the
ﬂow above or below min_rate.
Note that a single PIFO node with the scheduling transac-
tion in Figure 7 is not sufﬁcient. It causes packet reordering
within a ﬂow: an arriving packet can cause a ﬂow to move
from a lower to a higher priority and, in the process, leave
before low priority packets from the same ﬂow that arrived
earlier. The two-level tree solves this problem by attaching
priorities to transmission opportunities for a speciﬁc ﬂow,
not speciﬁc packets. Now if an arriving packet causes a ﬂow
to move from low to high priority, the next packet scheduled
from this ﬂow is the earliest packet of that ﬂow chosen in
FIFO order, not the arriving packet.
3.4 Other examples
We now brieﬂy describe several more scheduling algo-
rithms that can be programmed using PIFOs.
1. Fine-grained priority scheduling. Many algorithms
schedule the packet with the lowest value of a ﬁeld ini-
tialized by the end host. These algorithms can be pro-
grammed by setting the packet’s rank to the appropri-
ate ﬁeld. Examples of such algorithms and the ﬁelds
they use are strict priority scheduling (IP TOS ﬁeld),
Shortest Flow First (ﬂow size), Shortest Remaining
Processing Time (remaining ﬂow size), Least Attained
Service (bytes received for a ﬂow), and Earliest Dead-
line First (time until a deadline).
2. Service-Curve Earliest Deadline First
(SC-
EDF) [34] schedules packets in increasing order of a
deadline computed from a ﬂow’s service curve, which
speciﬁes the service a ﬂow should receive over any
given time interval. We can program SC-EDF using a
scheduling transaction that sets a packet’s rank to the
deadline computed by the SC-EDF algorithm.
3. Rate-Controlled Service Disciplines (RCSD) [42]
such as Jitter-EDD [41] and Hierarchical Round
Robin [27] are a class of non-work-conserving sched-
ulers that can be implemented using a combination of
a rate regulator to shape trafﬁc and a packet scheduler
to schedule the shaped trafﬁc. An RCSD algorithm can
be programmed using PIFOs by setting the rate regu-
lator using a shaping transaction and the packet sched-
uler using a scheduling transaction.
4. Incremental deployment. Operators may wish to use
programmable scheduling only for a subset of their
trafﬁc. This can be programmed as a hierarchical
scheduling algorithm, with one FIFO class dedicated
to legacy trafﬁc and another to experimental trafﬁc.
Within the experimental class, an operator could pro-
gram any scheduling tree.
3.5 Limitations
Changing the scheduling order of all packets of a ﬂow.
Although a tree of PIFOs can enable algorithms where the
relative scheduling order of buffered packets changes in re-
sponse to new packet arrivals (§2.2), it does not permit arbi-
trary changes to the scheduling order of buffered packets. In
particular, it does not support changing the scheduling order
for all buffered packets of a ﬂow when a new packet from
that ﬂow arrives.
An example of an algorithm that needs this capability is
pFabric [12], which introduces “starvation prevention” to
schedule the packets of the ﬂow with the shortest remain-
ing size in FIFO order, in order to prevent packet reordering.
To see why this is beyond the capabilities of PIFOs, con-
sider the sequence of arrivals below, where pi(j) represents a
packet from ﬂow i with remaining size j, where the remain-
ing size is the number of unacknowledged bytes in a ﬂow.
1. Enqueue p0(7).
2. Enqueue p1(9), p1(8).
3. The scheduling order is: p0(7), p1(9), p1(8).
4. Enqueue p1(6).
5. The new order is: p1(9), p1(8), p1(6), p0(7).
Specifying these semantics are beyond the capabilities of
the PIFO abstractions we have developed.5 For instance,
adding a level of hierarchy with a PIFO tree does not help.
Suppose we programmed a PIFO tree implementing FIFO
at the leaves and picking among ﬂows at the root based on
the remaining ﬂow size. This would result in the schedul-
ing order p1(9), p0(7), p1(8), p1(6), after enqueuing p1(6).
The problem is that there is no way to change the scheduling
order for multiple references to ﬂow 1 in the root PIFO by
enqueuing only one reference to ﬂow 1.
A single PIFO can, however, implement pFabric with-
out starvation prevention, which is identical to the Short-
est Remaining Processing Time (SRPT) discipline (§3.4). It
5This is ironic because we started this project to implement
pFabric in a programmable manner, and have ended up being
able to do almost everything but that!
can also implement the Shortest Flow First (SFF) discipline
(§3.4), which performs almost as well as pFabric [12].
Trafﬁc shaping across multiple nodes in a scheduling
tree. Our programming model attaches a single shaping and
scheduling transaction to a tree node. This lets us enforce
rate limits on a single node, but not across multiple nodes.