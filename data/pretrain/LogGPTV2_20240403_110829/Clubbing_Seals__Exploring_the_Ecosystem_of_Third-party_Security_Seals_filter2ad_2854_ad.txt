seal providers, which again shows that the scans required to
obtain a security seal are far from rigorous.
5. ATTACKS
In the previous section, we showed that seal providers per-
form very poorly when it comes to the detection of vulner-
abilities on the websites that they certify. One, however,
could still argue that such products operate in a “best ef-
fort” manner and that, despite our ﬁndings, they still pro-
vide some tangible security beneﬁts. In this section, we show
that, paradoxically, third-party security seals can assist at-
tackers in identifying vulnerable targets, and even provide
them with the exact vulnerability.
In addition to attacks
against seal-using websites, we also show how an attacker
can, in some cases, use seal providers to attack non-seal
websites and how an interested party (attacker, or sketchy
webmaster of a vulnerable website) can trivially evade de-
tection by a seal provider.
9245.1 Security Seal as an Oracle
Being able to accurately determine whether a website con-
tains a vulnerability is incredibly useful for attackers since
it allows them to focus their attention on websites that are
likely to provide some yield.
The way security seals are currently displayed on websites,
enables an adversary to pick the easiest prey from a herd of
seal-utilizing websites. More precisely, security seals, which
are generally hosted on the servers of the seal providers,
should only be visible when a website is found to be secure.
This means that if a vulnerability is found on a website,
and the webmaster fails to mitigate it within the allotted
grace period, the seal will stop showing. During our vul-
nerable webshop experiment, as discussed in Section 4.3, we
discovered that when a seal provider wanted the seal to stop
showing, they would either make the image transparent or
provide an image with 1x1 dimensions.
Because of the diﬀerence in image size or content, it is
possible to determine the security status of seal-using web-
sites in an automated way. Thus, an attacker could set up
a crawler to daily visit seal-using websites and be alerted
whenever the image of a seal changes. To evaluate the fea-
sibility of this attack scenario, we conducted the following
experiment: for a two-month period, we visited the set of
8,302 seal-utilizing websites on a daily basis and extracted
the security seal that was shown on each website. In addi-
tion, we also stored the webpage of the security seal provider
that results when a user clicks on the image of each seal.
Table 5 shows the results of this two-month-long experi-
ment. From all the seal-using websites, we discovered that
333 websites (Column 2 of Table 5) were given an invisible
security seal for at least one day of our experiment. That
is, in 333 cases, a website’s seal transitioned from a showing
seal to an invisible one, or vice versa. This indicates that
either a website went from secure to vulnerable for at least
one day, or was vulnerable for a series of days and went back
to secure when the webmaster mitigated the discovered vul-
nerabilities. Related to this, for 189 websites in our dataset
(Column 3 of Table 5), the seals were constantly invisible
for the entire monitored period.1
This could either be due to an expired contract between
the seal-using website and the seal provider, or due to a web-
site being constantly vulnerable. In any case, from an at-
tacker’s point of view, an invisible seal should provide more
than enough motive to start attacking a website.
Apart from the side-channel of seals appearing and dis-
appearing, we discovered that for three seal providers, the
combination of seal appearance and status page was diﬀerent
when a website was no longer a client of the seal provider,
to when a website was vulnerable. For instance, for one seal
provider, the seal would remain intact but the status page
was indicating that the date of the last successful scan was
prior to the current date. As such, for these three cases,
shown in the last column of Table 5, we can relatively safely
conclude that the seal-using website was vulnerable during
our monitored period.
While a pointer towards a vulnerable website is already of
great help to attackers, a disappearing seal does not pinpoint
the exact vulnerability necessary to exploit a website. In the
1Note that the sum of these seals in Table 5 is 190, since one
website was including seals from two diﬀerent providers.
Seal Provider
McAfee SECURE
HackerProof
WebsiteProtection
Qualys
Trust-Guard
BeyondSecurity
ScanVerify
# Sites
w/
changing seals
260
3
19
27
5
19
0
# Sites
w/
blank seals
64
11
52
15
23
24
1
# Sites
most likely
vulnerable
-
-
46
20
-
38
-
Table 5: The number of websites whose security
seals never appeared, or disappeared and reap-
peared during our two-month-long experiment.
context of security seals, however, attackers can, in some
cases, elicit the exact vulnerability out of a seal provider.
In our evaluation of the thoroughness of the security checks
done by seal providers, we noticed that for each scan a very
similar set of requests were made. These requests checked,
among others, for the presence of certain ﬁles, whether a pa-
rameter was reﬂected without encoding, or whether a certain
SQL statement would be executed. By setting up a website
and purchasing a security seal (or getting a free trial), the
attacker can collect the series of requests and replay them
to the vulnerable website, thus discovering the exact vul-
nerability that caused the victim’s seal to disappear. In the
cases where the scan of a seal provider is dependent on the
web application discovered, the attacker could set up the
same web application as his victim and thus collect rele-
vant, probing requests. An attacker could even try to replay
the requests that he receives on his server directly on the
victim website and extract discovered vulnerabilities in a
MitM fashion. Note that once an attacker collects a trace
of attack requests, he can reuse them an “inﬁnite” number
of times against vulnerable websites of that seal provider.
It could be argued that if attackers had in their possession
a tool that could check the security of websites, they could
run that tool against an arbitrarily large number of web-
sites. However, we experienced that the security scanners
often made a substantial number of requests, in one case
up to 180,000, to the probed web server. Running such a
scan on a large number of websites would require access to
a considerable amount of resources, something the average
wrongdoer may not have. As such, it would not come as a
surprise if an attacker would prioritize attacking a website
known to contain a speciﬁc exploitable vulnerability. Lastly,
it is worth reminding the reader that, as shown in Section 3,
more than a third of all seal-utilizing websites are e-shops,
thus holding the promise of personal and ﬁnancial informa-
tion that are not typically present on an average website.
5.2 Cloaking
When an attacker compromises a website, it is in his best
interest to keep this hidden from the website owner. In case
the adversary uses the website to host malware and infect
the site’s visitors, the task of hiding the compromise becomes
more diﬃcult. Not only could a change in the website alarm
the website administrators, but regular crawls by various
search engines will also look for the presence of malware, in
order to protect the users of these search engines.
925To prevent detection, attackers make use of cloaking, where
the malware distinguishes between visits of crawlers and hu-
man users and only exposes itself to the latter. Among
others, attackers can use implementation-speciﬁc JavaScript
code to distinguish between JavaScript engines (and thus
their housing browsers), as well as cloaking at an IP-address
level [27].
For some seal providers, we noticed that their scanners do
not execute JavaScript. As such, an attacker can simply hide
the presence of malware by testing for JavaScript support.
Alternatively, attackers can, unfortunately, always resort to
cloaking at a network level. During the tests described in
Section 4.3 we witnessed that the scanning requests of seal
providers were always originating from the same IP range,
often a block that is registered to the seal provider. It would
thus be straightforward for an attacker to only expose his
malware in case a request does not originate from an IP ad-
dress related to a seal-provider. This way, an attacker could
easily compromise a seal-utilizing website, while the web-
site owner would remain under the impression the website
was still secure as a consequence of the daily or weekly suc-
cessful seal scans. Note that this detection can be done in
a straightforward manner, and is already used by attackers
for conducting blackhat SEO [17].
Next to attackers, website owners could also be interested
in hiding weaknesses from a seal provider.
In case a seal
provider ﬁnds vulnerabilities on a website, it may take a
considerable amount of time and resources for the website
administrator to mitigate them.
If this does not happen
within the grace period provided by the seal provider, the
security seal – a product the webmaster paid for – will dis-
appear. Hence, in some cases, it could prove very useful for
a webmaster, if the security provider is not able to ﬁnd any
vulnerabilities. As such, a webmaster may be tempted to
also employ a cloaking technique to deceive seal providers.
In our vulnerable webshop experiment, we managed to cir-
cumvent the detection of vulnerabilities by rerouting all traf-
ﬁc originating from seal providers to a static web page. For
all seal providers, this could be done by merely adding two
lines to our webserver’s conﬁguration ﬁle. This, unfortu-
nately, requires much less eﬀort than continuously mitigat-
ing vulnerabilities, and could thus be employed by sketchy
website owners who just want to convince their customers
their website is secure.
5.3 Abusing security seal services
In earlier sections, we showed how seal providers can be
abused to attack the websites that they certify as secure. In
this section, we describe how they can also be weaponized
against users, as well as against third-party websites.
Phishing
In an attempt to acquire sensitive credentials for websites,
adversaries often create phishing pages which typically re-
semble the original website which the phisher is targeting.
To trick a user in entering her credentials, attackers can try
a series of techniques to make the victim believe that she
is on the legitimate website. For instance, by registering a
domain that looks similar to the original domain, attackers
can often convince users they are on the genuine website.
Additionally, when the original website contains a security
seal, the attacker could replicate this seal on his phishing
webpage to increase his credibility. Moreover, if the claims
from seal providers are correct, i.e., that the appearance of a
seal leads to an increase of trust in the webpage, the victim
will feel safe on the phishing page.
To counter this type of attack, seal providers should only
allow a seal to be included from the authentic website which
they certify.
In our evaluation, we found that two seal
providers would not display a security seal in case the Ref-
erer header did not match the sealed website. The seal,
however, would appear if the referrer header of a user’s
HTTP request was absent, which can be trivially achieved
by the use of the appropriate value for the meta referrer
HTML tag. As a result, an attacker can currently include a
security seal on his phishing page from all ten seal providers
that we evaluated. Note that these seals are fully functional
in the sense that the potential phishing victims can click on
them and be assured, by a page hosted the seal-provider’s
domain, that the seal is legitimate (not just a copy) and
that the seal-bearing website is secure. If a user is already
considering a phishing page enough to click on the security
seal, it is unlikely that he will spot the fact that the domain
mentioned in the seal provider’s page is diﬀerent than the
one of the phishing page.
Attacking third-party websites
Since seal providers search for vulnerabilities on websites,
it is obvious that only the webmaster of a speciﬁc web-
site should be able to request a vulnerability scan for that
website. This is especially important since the attacks will
not be launched directly by the attacker, thus making him
harder to trace by the victim website at a later time.
Even though seal providers do attempt to verify owner-
ship of a website, we found that often their methods are
bypassable. For instance, several seal providers performed
owner veriﬁcation through the upload of a speciﬁc ﬁle on
the website that requested a seal. The uploaded ﬁle should
have a speciﬁc randomly-generated ﬁlename and contain a
randomly-generated string. For three seal providers, we dis-
covered that the contents of the uploaded ﬁle did not have
to be an exact match as the ones provided. Consequently,
if an attacker would be able to partially control the con-
tent on a URL containing the requested ﬁlename, he would
be able bypass the ownership veriﬁcation and get a security
report for that domain. While this may seem unlikely, for
several websites this can be easily achieved. On Twitter,
for example, users are appointed their own URL contain-
ing their username, so a user named foobar is reachable
at http://twitter.com/foobar. As such, an attacker can
register an account with a username equal to the ﬁlename
requested by the seal provider, and include the contents of
the ﬁle in his ﬁrst or last name. The seal provider will then
successfully discover the “uploaded ﬁle” and proceed to per-
form a security scan and report the discovered issues to the
attacker.
6. DISCUSSION
In previous sections we showed that, given the current
state-of-practice, third-party security seals are not only of
limited value, but that they can also be used to attack seal-
using websites, as well as their users, and third-party web-
sites. In this section, we brieﬂy describe the ways in which
seal providers can substantially better their services.
In terms of vulnerability discovery, we witnessed that the
vulnerability scanners of some seal providers were not ex-
926ecuting client-side JavaScript. Given the ubiquitousness of
JavaScript, we argue that JavaScript support is a necessary
feature of any modern vulnerability scanner. For the seal
providers that did ﬁnd some vulnerabilities, we believe that
their tools can be bettered if they are tried against web
applications with known vulnerabilities so that the develop-
ers can quantify the coverage of their tools and prioritize
the development of support for the missing functionality.
For the seal providers that found no vulnerabilities whatso-
ever, it is clear that either their tools are fully ineﬀective,
or that they are trying to combine incompatible technolo-
gies, e.g., searching for web application vulnerabilities using
a network-level scanner.
For the problem of cloaking, a straightforward solution is
to employ, from time to time, the use of VPN or cloud ser-
vices, to ensure that the IP addresses of the scanners are
not publicly traceable back to the seal provider. The result-
ing pages can then be compared to pages retrieved from the
seal provider’s usual IP block using a wide range of tech-
niques, such as text shingles [6], screenshot comparison, or
comparison of the HTML structure between the two pages.
Pages with large diﬀerences can be manually inspected by a
human analyst who can then reach out to the webmaster of
the seal-using website. To avoid being abused by phishing
pages, seal providers can stop showing the security seal when
the referrer header is absent, or does not match the certiﬁed
website. All browsers allow, by default, the sending of the
referrer header, thus the change will not aﬀect the majority
of web users who do not alter the default conﬁguration of
their browsing software.
The problem of seals being used as a vulnerability oracle
is, unfortunately, not straightforward to solve. When a seal
provider hides a seal as a reaction to a discovered vulnerabil-
ity, this event is detectable and abusable by an attacker, as
discussed in Section 5.1. Alternatively, if a seal provider does
not hide, or in some way alter, the presence of a seal when
a vulnerability is detected, then the certiﬁcation power of a
seal is compromised because any website can acquire it re-
gardless of the presence or absence of vulnerabilities. Thus,