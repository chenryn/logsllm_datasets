Certainly! Below is a more refined and professional version of the Kusto Query Language (KQL) query for detecting Gootkit malware delivery and Command and Control (C2) activity:

```kql
// Step 1: Identify alerts related to suspected Gootkit malware delivery
let GootkitDeliveryAlerts = AlertInfo
| where Title =~ "Suspected delivery of Gootkit malware";

// Step 2: Join with alert evidence to get additional details
let AlertEvidenceDetails = GootkitDeliveryAlerts
| join AlertEvidence on $left.AlertId == $right.AlertId;

// Step 3: Join with DeviceNetworkEvents to identify potential C2 activity
let GootkitC2Activity = AlertEvidenceDetails
| join DeviceNetworkEvents on $left.DeviceId == $right.DeviceId
| where InitiatingProcessFileName =~ "wscript.exe" 
    and InitiatingProcessCommandLine has ".zip" 
    and InitiatingProcessCommandLine has ".js";

// Step 4: Summarize the results
GootkitC2Activity
| summarize by 
    RemoteUrl, 
    RemoteIP, 
    DeviceId, 
    InitiatingProcessCommandLine, 
    Timestamp, 
    InitiatingProcessFileName, 
    AlertId, 
    Title, 
    AccountName
```

### Explanation:
1. **Step 1**: We start by filtering `AlertInfo` to find alerts that match the title "Suspected delivery of Gootkit malware".
2. **Step 2**: We then join this filtered set with `AlertEvidence` to get more detailed information about the alert.
3. **Step 3**: Next, we join the result with `DeviceNetworkEvents` to look for network events that indicate potential C2 activity. Specifically, we filter for events where the initiating process is `wscript.exe` and the command line contains both `.zip` and `.js`.
4. **Step 4**: Finally, we summarize the results, grouping by relevant fields such as `RemoteUrl`, `RemoteIP`, `DeviceId`, `InitiatingProcessCommandLine`, `Timestamp`, `InitiatingProcessFileName`, `AlertId`, `Title`, and `AccountName`.

This structured approach makes the query easier to read and understand, and it clearly separates the different steps involved in identifying Gootkit malware delivery and C2 activity.