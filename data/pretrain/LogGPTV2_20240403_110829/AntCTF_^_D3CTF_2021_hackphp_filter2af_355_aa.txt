# AntCTF ^ D3CTF 2021 hackphp
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00前言
从一题学习php模块的编写，学习WEB PWN，并演示WEB PWN中的堆UAF利用基本手法。
## 0x01 PHP模块的编写
php模块一般使用C/C++编写，编译后以库文件的形式进行加载，在Linux下为.so，Windows下为.dll。下面，我们来编写一个php模块的helloword，并在php里进行调用。  
首先下载php源码，进入php源码目录的ext目录,执行
    root@ubuntu:/home/sea/Desktop/php-src/ext# ./ext_skel.php --ext helloword
    Copying config scripts... done
    Copying sources... done
    Copying tests... done
    Success. The extension is now ready to be compiled. To do so, use the
    following steps:
    cd /path/to/php-src/helloword
    phpize
    ./configure
    make
    Don't forget to run tests once the compilation is done:
    make test
    Thank you for using PHP!
###  模块基本语法
该程序直接为我们生成了一个模板，我们可以直接查看源码
    /* helloword extension for PHP */
    #ifdef HAVE_CONFIG_H
    # include "config.h"
    #endif
    #include "php.h"
    #include "ext/standard/info.h"
    #include "php_helloword.h"
    /* For compatibility with older PHP versions */
    #ifndef ZEND_PARSE_PARAMETERS_NONE
    #define ZEND_PARSE_PARAMETERS_NONE() \
        ZEND_PARSE_PARAMETERS_START(0, 0) \
        ZEND_PARSE_PARAMETERS_END()
    #endif
    /* {{{ void helloword_test1()
     */
    PHP_FUNCTION(helloword_test1)
    {
        ZEND_PARSE_PARAMETERS_NONE();
        php_printf("The extension %s is loaded and working!\r\n", "helloword");
    }
    /* }}} */
    /* {{{ string helloword_test2( [ string $var ] )
     */
    PHP_FUNCTION(helloword_test2)
    {
        char *var = "World";
        size_t var_len = sizeof("World") - 1;
        zend_string *retval;
        ZEND_PARSE_PARAMETERS_START(0, 1)
            Z_PARAM_OPTIONAL
            Z_PARAM_STRING(var, var_len)
        ZEND_PARSE_PARAMETERS_END();
        retval = strpprintf(0, "Hello %s", var);
        RETURN_STR(retval);
    }
    /* }}}*/
    /* {{{ PHP_RINIT_FUNCTION
     */
    PHP_RINIT_FUNCTION(helloword)
    {
    #if defined(ZTS) && defined(COMPILE_DL_HELLOWORD)
        ZEND_TSRMLS_CACHE_UPDATE();
    #endif
        return SUCCESS;
    }
    /* }}} */
    /* {{{ PHP_MINFO_FUNCTION
     */
    PHP_MINFO_FUNCTION(helloword)
    {
        php_info_print_table_start();
        php_info_print_table_header(2, "helloword support", "enabled");
        php_info_print_table_end();
    }
    /* }}} */
    /* {{{ arginfo
     */
    ZEND_BEGIN_ARG_INFO(arginfo_helloword_test1, 0)
    ZEND_END_ARG_INFO()
    ZEND_BEGIN_ARG_INFO(arginfo_helloword_test2, 0)
        ZEND_ARG_INFO(0, str)
    ZEND_END_ARG_INFO()
    /* }}} */
    /* {{{ helloword_functions[]
     */
    static const zend_function_entry helloword_functions[] = {
        PHP_FE(helloword_test1,        arginfo_helloword_test1)
        PHP_FE(helloword_test2,        arginfo_helloword_test2)
        PHP_FE_END
    };
    /* }}} */
    /* {{{ helloword_module_entry
     */
    zend_module_entry helloword_module_entry = {
        STANDARD_MODULE_HEADER,
        "helloword",                    /* Extension name */
        helloword_functions,            /* zend_function_entry */
        NULL,                            /* PHP_MINIT - Module initialization */
        NULL,                            /* PHP_MSHUTDOWN - Module shutdown */
        PHP_RINIT(helloword),            /* PHP_RINIT - Request initialization */
        NULL,                            /* PHP_RSHUTDOWN - Request shutdown */
        PHP_MINFO(helloword),            /* PHP_MINFO - Module info */
        PHP_HELLOWORD_VERSION,        /* Version */
        STANDARD_MODULE_PROPERTIES
    };
    /* }}} */
    #ifdef COMPILE_DL_HELLOWORD
    # ifdef ZTS
    ZEND_TSRMLS_CACHE_DEFINE()
    # endif
    ZEND_GET_MODULE(helloword)
    #endif
其中由`PHP_FUNCTION`宏修饰的函数代表该函数可以直接在php中进行调用，由`PHP_RINIT_FUNCTION`修饰的函数将在一个新请求到来时被调用，其描述如下
> 当一个页面请求到来时候，PHP 会迅速开辟一个新的环境，并重新扫描自己的各个扩展，遍历执行它们各自的RINIT 方法(俗称 Request
> Initialization)，这时候一个扩展可能会初始化在本次请求中会使用到的变量等， 还会初始化用户端（即 PHP 脚本）中的变量之类的，内核预置了
> PHP_RINIT_FUNCTION() 这个宏函数来帮我们实现这个功能
由`PHP_MINIT_FUNCTION` 修饰的函数将在初始化module时运行。最终将需要在php中调用的函数指针写到一个统一的数组中。
    static const zend_function_entry helloword_functions[] = {
            PHP_FE(helloword_test1,         arginfo_helloword_test1)
            PHP_FE(helloword_test2,         arginfo_helloword_test2)
            PHP_FE_END
    };
然后由`zend_module_entry helloword_module_entry`进行注册，该结构体记录了整个模块需要提供的一些信息。
    zend_module_entry helloword_module_entry = {
            STANDARD_MODULE_HEADER,
            "helloword",                                    /* Extension name */
            helloword_functions,                    /* zend_function_entry */
            NULL,                                                   /* PHP_MINIT - Module initialization */
            NULL,                                                   /* PHP_MSHUTDOWN - Module shutdown */
            PHP_RINIT(helloword),                   /* PHP_RINIT - Request initialization */
            NULL,                                                   /* PHP_RSHUTDOWN - Request shutdown */
            PHP_MINFO(helloword),                   /* PHP_MINFO - Module info */
            PHP_HELLOWORD_VERSION,          /* Version */
            STANDARD_MODULE_PROPERTIES
    };
###  传参
在函数里，由`ZEND_PARSE_PARAMETERS_NONE()`修饰的代表无参数；而`ZEND_PARSE_PARAMETERS_START`规定了参数的个数，其定义如下
    #define ZEND_PARSE_PARAMETERS_START(min_num_args, max_num_args) ZEND_PARSE_PARAMETERS_START_EX(0, min_num_args, max_num_args)
而`Z_PARAM_OPTIONAL`代表参数可有可无，不是必须；`Z_PARAM_STRING(var,
var_len)`代表该参数是字符串对象，并且将其内容地址和长度分别赋值给var和var_len。  
还有很多类型，如下表：
    specifier    Fast ZPP API macro    args
    |    Z_PARAM_OPTIONAL
    a    Z_PARAM_ARRAY(dest)    dest - zval*
    A    Z_PARAM_ARRAY_OR_OBJECT(dest)    dest - zval*
    b    Z_PARAM_BOOL(dest)    dest - zend_bool
    C    Z_PARAM_CLASS(dest)    dest - zend_class_entry*
    d    Z_PARAM_DOUBLE(dest)    dest - double
    f    Z_PARAM_FUNC(fci, fcc)    fci - zend_fcall_info, fcc - zend_fcall_info_cache
    h    Z_PARAM_ARRAY_HT(dest)    dest - HashTable*
    H    Z_PARAM_ARRAY_OR_OBJECT_HT(dest)    dest - HashTable*
    l    Z_PARAM_LONG(dest)    dest - long
    L    Z_PARAM_STRICT_LONG(dest)    dest - long
    o    Z_PARAM_OBJECT(dest)    dest - zval*
    O    Z_PARAM_OBJECT_OF_CLASS(dest, ce)    dest - zval*
    p    Z_PARAM_PATH(dest, dest_len)    dest - char*, dest_len - int
    P    Z_PARAM_PATH_STR(dest)    dest - zend_string*
    r    Z_PARAM_RESOURCE(dest)    dest - zval*
    s    Z_PARAM_STRING(dest, dest_len)    dest - char*, dest_len - int
    S    Z_PARAM_STR(dest)    dest - zend_string*
    z    Z_PARAM_ZVAL(dest)    dest - zval*
         Z_PARAM_ZVAL_DEREF(dest)    dest - zval*
    +    Z_PARAM_VARIADIC('+', dest, num)    dest - zval*, num int
    *    Z_PARAM_VARIADIC('*', dest, num)    dest - zval*, num int
###  测试
编译以后得到了模块
    root@ubuntu:/home/sea/Desktop/php-src/ext/helloword/modules# ls
    helloword.la  helloword.so
安装该模块
    cp helloword.so /usr/local/lib/php/extensions/no-debug-non-zts-20190902
php.ini里添加
    extension=helloword.so
测试程序如下
运行结果
    root@ubuntu:/home/sea/Desktop/php-src/ext/helloword/modules# php 1.php
    The extension helloword is loaded and working!
可以看到模块成功被调用，并且在php中的调用十分方便，当成普通函数调用就可以了。
## 0x02 PHP模块逆向分析
将helloword.so模块用IDA打开分析
定位到函数表，可以发现供我们在php里调用的函数有两个，且这些函数名都以`zif`开头
进入`zif_helloword_test2`函数，可以看到，宏都被展开了，前面是对参数个数的判断，后面则是对变量进行赋值。
至此，对php模块，我们已经有了大致的了解。
## 0x03 hackphp
###  漏洞分析
首先用IDA分析，找到`zif`开头的函数
因此，在php中我们能调用该模块中的4个函数，分别为
    hackphp_create
    hackphp_delete
    hackphp_edit
    hackphp_get
hackphp_create函数接收一个整型参数，其功能是可以调用`_emalloc`创建一个堆，这里存在一个UAF漏洞，就是当`0512`时不会直接`return`，会执行到`efree`将申请的堆给释放掉，然后其指针仍然保留给了`buf`全局变量。
hackphp_delete函数无参数，其功能是将buf指向的堆efree掉，并清空buf指针
hackphp_edit函数接收一个字符串参数，并将其内容写入到buf里，这里注意的是，php里传入的字符串，即使其字符串中存在`\x00`，其length也不是以该字符截断的，该字符串对象的length成员表示其内容的`字节数`，并且在hackphp_edit函数中，使用了`memcpy`而不是`strncpy`这意味着hackphp_edit不会因为字符串中存在`\0`而截断，因此，我们可以用该函数进行字节编辑。
hackphp_get函数用于显示`buf`的内容，由于使用的是`zend_strpprintf(0LL,"%s",
buf)`因此会受到`\0`字符的截断。
漏洞分析完了，该模块存在一个UAF，但是由于使用的是`emalloc/efree`不能像glibc的`ptmalloc`那样进行花式利用，我们可以利用`double