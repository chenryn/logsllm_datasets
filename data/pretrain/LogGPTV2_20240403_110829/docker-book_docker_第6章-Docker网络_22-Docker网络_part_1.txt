# Docker容器网络
本节概述了Docker默认的网络行为，包括默认情况下创建的网络类型以及如何创建用户自定义网络。 本文也描述了在单个主机或集群上创建网络所需的资源。
有关Docker如何在Linux主机上与`iptables`进行交互的详细信息，请参阅[Docker和`iptables`](https://docs.docker.com/engine/userguide/networking/#docker-and-iptables) 。
## 默认网络
当您安装Docker时，它会自动创建三个网络，可使用`docker network ls`命令列出这些网络：
```
$ docker network ls
NETWORK ID          NAME                DRIVER
7fca4eb8c647        bridge              bridge
9f904ee27bf5        none                null
cf03ee007fb4        host                host
```
Docker内置如上三个网络。 运行容器时，可使用`--network` 标志来指定容器应连接到哪些网络。
`bridge` 网络代表所有Docker安装中存在的`docker0` 网络。 除非您使用`docker run --network=` 选项，否则Docker守护程序默认将容器连接到此网络。 可使用`ip addr show` 命令（或简写形式， `ip a` ），xia显示该网桥的信息。 （ `ifconfig`命令已被弃用，根据系统的不同，还可能会`command not found`错误。）
```
$ ip addr show
docker0   Link encap:Ethernet  HWaddr 02:42:47:bc:3a:eb
          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:47ff:febc:3aeb/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1
          RX packets:17 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1100 (1.1 KB)  TX bytes:648 (648.0 B)
```
> **如何在Docker for Mac或Docker for Windows上运行？**
>
> 如果您使用Docker for Mac（或在Docker for Windows上运行Linux容器）， `docker network ls` 命令将按照上述方式工作，但`ip addr show` 和`ifconfig` 命令可能会展示结果，但会给你本地主机的IP地址信息，而不是Docker容器网络。 这是因为Docker使用虚拟机中运行的网卡，而并非在宿主机的网卡。
>
> 要使用`ip addr show`或`ifconfig`命令浏览Docker网络，请前往[Docker Machine](https://docs.docker.com/machine/overview/) 查看相关文档；如您使用的是云提供商，如AWS上的[Docker Machine](https://docs.docker.com/machine/examples/ocean/)或Digital Ocean上的[Docker Machine](https://docs.docker.com/machine/examples/ocean/) 。可使用`docker-machine ssh ` 登录到本地或云托管的机器，也可根据云提供商站点上的描述，直接`ssh` 。
`none` 网络将容器添加到容器特定的网络，该容器缺少网卡。Attach到一个网络为`none` 模式的容器，将会看到类似如下的内容：
```
$ docker attach nonenetcontainer
root@0cb243cd1293:/# cat /etc/hosts
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
root@0cb243cd1293:/# ifconfig
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
root@0cb243cd1293:/#
```
> **注意** ：可使用`CTRL-p CTRL-q` 断开容器连接并离开。
`host` 网络模式将容器添加到在宿主机的网络栈上。就网络而言，宿主机和容器之间没有隔离。例如，如果您使用`host` 网络运行在80端口上运行一个Web服务器容器，则该容器可在宿主机的80端口上使用。
在Docker中，`none` 和 `host` 网络模式不能直接配置。 但是，您可以配置默认的`bridge` 网络，以及用户自定义的网桥。
## 默认网桥
所有Docker主机上都有默认的`bridge` 网络。 如不指定网络，容器将自动连接到默认的`bridge` 网络。
`docker network inspect`命令返回有关网络的信息：
```
$ docker network inspect bridge
[
   {
       "Name": "bridge",
       "Id": "f7ab26d71dbd6f557852c7156ae0574bbf62c42f539b50c8ebde0f728a253b6f",
       "Scope": "local",
       "Driver": "bridge",
       "IPAM": {
           "Driver": "default",
           "Config": [
               {
                   "Subnet": "172.17.0.1/16",
                   "Gateway": "172.17.0.1"
               }
           ]
       },
       "Containers": {},
       "Options": {
           "com.docker.network.bridge.default_bridge": "true",
           "com.docker.network.bridge.enable_icc": "true",
           "com.docker.network.bridge.enable_ip_masquerade": "true",
           "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
           "com.docker.network.bridge.name": "docker0",
           "com.docker.network.driver.mtu": "9001"
       },
       "Labels": {}
   }
]
```
运行以下两个命令启动两个`busybox` 容器，两个容器都连接到默认的`bridge` 网络。
```
$ docker run -itd --name=container1 busybox
3386a527aa08b37ea9232cbcace2d2458d49f44bb05a6b775fba7ddd40d8f92c
$ docker run -itd --name=container2 busybox
94447ca479852d29aeddca75c28f7104df3c3196d7b6d83061879e339946805c
```
启动两个容器后再检查`bridge` 网络。 这两个`busybox`容器都连接到网络。 可看到类似如下的结果：
```
$ docker network inspect bridge
{[
    {
        "Name": "bridge",
        "Id": "f7ab26d71dbd6f557852c7156ae0574bbf62c42f539b50c8ebde0f728a253b6f",
        "Scope": "local",
        "Driver": "bridge",
        "IPAM": {
            "Driver": "default",
            "Config": [
                {
                    "Subnet": "172.17.0.1/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Containers": {
            "3386a527aa08b37ea9232cbcace2d2458d49f44bb05a6b775fba7ddd40d8f92c": {
                "EndpointID": "647c12443e91faf0fd508b6edfe59c30b642abb60dfab890b4bdccee38750bc1",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            },
            "94447ca479852d29aeddca75c28f7104df3c3196d7b6d83061879e339946805c": {
                "EndpointID": "b047d090f446ac49747d3c37d63e4307be745876db7f0ceef7b311cbba615f48",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "9001"
        },
        "Labels": {}
    }
]
```
连接到默认`bridge` 网络的容器可通过IP地址进行通信。 **Docker不支持在默认网桥上自动发现服务。如果您希望容器能够通过容器名称来解析IP地址，那么可使用用户自定义网络** 。您可以使用遗留的`docker run --link` 选项将两个容器连接在一起，但在大多数情况下不推荐使用。
您可以`attach` 到正在运行的容器，查看容器内部的IP是什么。 
```
$ docker attach container1
root@3386a527aa08:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02
          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1
          RX packets:16 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1296 (1.2 KiB)  TX bytes:648 (648.0 B)
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
```
从容器内部，使用`ping` 命令测试与其他容器的网络连接。
```
root@3386a527aa08:/# ping -w3 172.17.0.3
PING 172.17.0.3 (172.17.0.3): 56 data bytes
64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.096 ms
64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.080 ms
64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.074 ms
--- 172.17.0.3 ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max = 0.074/0.083/0.096 ms
```
使用`cat`命令查看容器上的`/etc/hosts` 文件。 该命令显示容器识别的主机名和IP地址。
```
root@3386a527aa08:/# cat /etc/hosts
172.17.0.2	3386a527aa08
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
```
要从`container1` 容器离开，并保持容器的运行，请依次使用**CTRL-p CTRL-q** 。 如果你愿意，也可attch到`container2` ，并重复上面的命令。
默认的`docker0` 桥接网络支持使用端口映射和`docker run --link` ，以便在`docker0` 网络中的容器之间进行通信。 不推荐这种方法。 如果可以，请使用[用户定义的桥接网络](hhttps://docs.docker.com/engine/userguide/networking/#user-defined-networks)。
## 用户自定义的网络
建议使用用户自定义网桥来控制哪些容器可以相互通信，这样也可启用自动DNS去解析容器名称到IP地址。 Docker提供了创建这些网络的默认**网络驱动程序**。您可以创建一个新的**桥接网络**， **覆盖网络**或**MACVLAN网络** 。 您还可以创建一个**网络插件**或**远程网络**进行完整的自定义和控制。
**您可以根据需要创建任意数量的网络，并且可在任意时间将容器连接到这些网络中的零个或多个**。 此外，您可以将运行着的容器连接或断开网络，而无需重启容器。当容器连接到多个网络时，**其外部连接通过第一个非内部网络以词汇顺序提供**。
接下来的几节将详细介绍Docker的内置网络驱动程序。
### 网桥网络
`bridge` 网络是Docker中最常见的网络类型。 桥接网络类似于默认的`bridge` 网络，但添加一些新功能并删除一些旧的能力。 以下示例创建了桥接网络，并对这些网络上的容器执行一些实验。
```
$ docker network create --driver bridge isolated_nw
1196a4c5af43a21ae38ef34515b6af19236a3fc48122cf585e3f3054d509679b
$ docker network inspect isolated_nw
[
    {