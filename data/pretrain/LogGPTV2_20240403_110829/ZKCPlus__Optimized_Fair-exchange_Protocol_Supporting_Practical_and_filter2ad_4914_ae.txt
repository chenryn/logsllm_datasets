i
p
x′
i = max(x(0)
i
, x(1)
i
, x(2)
i
, x(3)
i
).
(33)
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3010t11
t21
...
tn1
(cid:8)
T
=
SELECT
t12
t22
...
tn2
. . .
. . .
...
. . .
t1l
t2l
...
tnl
(cid:9)
b1 = 𝜙(r1)
b2 = 𝜙(r2)
...
bn = 𝜙(rn)
b
c1
c2
. . .
cl WHERE
Figure 3: Database table modeled as a matrix
From {x(i)}i∈[0,3] to x′, the computation is data-parallel, so the argu-
ment of Section 3 applies. To justify the consistency between x and
{x(i)}i∈[0,3], we employ an adaptor ΠCom
link for interlinking function
⟨x(i), y(i)⟩ – ⟨x, y⟩ = 0,
(34)
f (x, x(0), x(1), x(2), x(3)) = 
i∈[0,3]
where y $← Fn
p is a randomly sampled challenge vector, and it
breaks into segments {y(i)}i∈[0,3] in the same way as x breaks into
{x(i)}i∈[0,3]. Except for negligible error n
|Fp|, f (x, x(0), x(1), x(2), x(3)) =
0 holds iff {x(i)}i∈[0,3] are consistent with x. Note (34) is a sum of
inner products, the argument in Appendix B.2 applies.
Fully connected layer In essence, fully connected layer per-
forms matrix-vector product of a weight matrix T and a flattened
feature map x, outputting x′ = Tx. We can reduce the matrix-vector
product to a group of inner products, and employ the CP-NIZK
argument in Appendix B.2 to prove it. Though not data-parallel,
this argument is composable with the data-parallel argument for
the previous layer via a shared commitment to x.
Based on these observations, in Section 6.4.1 we develop and
evaluate an end-to-end demonstration for exchanging CNN mod-
els [40, 50]. Alternatively, one may imagine an application of ex-
changing images using a pre-trained model acting as the predicate
𝜙, where B only pays for images classified as a particular type by
the pre-trained model. Similar applications extend to other valuable
digital assets, such as documents, videos, and software.
5.2 Pay to SQL query
ZKCPlus and the data-parallel CP-NIZK argument also find their
potential applications in could databases systems. A typical scenario
is that a client outsources a database to an untrusted server, and
then the server responds to the client’s queries [58, 59]. For fairness,
the client only pays for correct query results.
as a matrix of finite field elements T ∈ Fn×l
p
“commit” phase the table is committed by each column cj ∈ Fn
j ∈ [l]. In the “validate” phase, the clients sends a SQL query
As an explanatory example, we consider a database table modeled
. For ZKCPlus, in the
p for
SELECT [columns] WHERE [predicate],
which specifies the desired columns cj, with a “WHERE” clause
defining a predicate 𝜙 that restricts the rows used for computing the
query result. More specifically, 𝜙 runs on each row ri and outputs
a binary decision
bi = 𝜙(ri) = 𝜙(ti1, . . . , til).
(35)
As illustrated in Figure 3, applying the “WHERE” clause to each
row of the table is data-parallel, so we use the argument described
in Section 3 with reference to the initial commitments to columns
cj. In practice the “WEHER” clause usually consists of a sequence
of sub-clauses connected by logical operators such as “AND” and
“OR”, in which case the argument’s composability comes in handy.
The results bi aggregate into a binary mask b ∈ {0, 1}n. Then in the
“deliver” phase, the server runs “proof of delivery” on selected set
c′
j = cj ◦ b.
In Section 6.4.2 we evaluate a minimal demo of sub-string query
on a table containing one single column of string type. Apart from
the basic “SELECT” query, it is also possible for ZKCPlus to support
other SQL queries such as “COUNT”, “SUM”, etc.
6 Evaluation
In this section we give a brief description of our implementation,
and present comprehensive evaluations on its performance.
6.1 Implementation
We have built a fair-exchange platform on the testnet of Ethereum
with ZKCPlus. It consists of the following three main components.
• ZKCPlus-lib, a core library of our CP-NIZK argument scheme
• ZKCPlus-node, a node application dealing with communication,
• ZKCPlus-contract, a smart contract for payment management
smart contract invoking, etc., 35k LoC in Golang.
shipping with Golang bindings, 23k LoC in C++.
and commitment opening, 900 LoC in Solidity.
Our ZKCPlus implementation is built with the mcl library [33],
using a BN_SNARK1 curve which has the same parameters as the
BN128 curve of the libSNARK library [38] used by ZKCP. We utilize
Pippenger’s algorithm [48] for efficient multi-scalar multiplication,
which has O(n/ log n) computational complexity w.r.t. vector length
n. According to our benchmark, our mcl library [33] based multi-
scalar multiplication implementation shows comparable efficiency
as the libSNARK library [38] used by ZKCP, with the relative ratio
ranging from 0.8 to 1.4 as n varies from 25 to 214. As for the block
cipher, since the BN_SNARK1 curve has a 254-bit prime order p, we
use 110 rounds of MiMC-p/p with the exponent of the non-linear
permutation function d = 5 to thwart interpolation attacks [36].
We have realized the three applications described in Section 5,
i.e., pay to sudoku solutions, pay to CNN models, and pay to SQL
query results.
6.2 Experimental setup
For a direct comparison between ZKCPlus and ZKCP, we measure
their performances in the application of “pay to sudoku solution”.
We compare their respective setup cost, running time and com-
munication overhead. Then we make some modifications to the
original implementations of the two protocols to compare their
respective end-to-end throughput for varied-size data and prover
efficiency of their underlying zero-knowledge schemes. The ex-
periments are carried out with both of the seller and the buyer
running on Ubuntu 18.04 with 3.2 GHz CPU and 32 GB memory.
Considering the ZKCP implementation runs single-threaded, we
limit ZKCPlus to one thread as well.
Besides, we also evaluate the applications of ZKCPlus in “pay to
CNN model” and “pay to SQL query” scenarios. Here we shift to
another experimental setup, where the seller (server) runs with 24
threads on a machine with 2.9 GHz CPU and 256 GB memory, and
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3011Table 3: Setup cost of ZKCP and ZKCPlus
Setup time
CRS size
Solution size
9×9
16×16
25×25
36×25
49×49
ZKCP
17.88 s
39.18 s
87.21 s
180.12 s
322.54 s
ZKCPlus
0.03 s
ZKCPlus
1.02 MB
ZKCP
30.88 MB
69.75 MB
165.67 MB
336.61 MB
635.93 MB
Table 4: Seller running time of ZKCP and ZKCPlus
in “validate” and “deliver” phases
Solution size
9×9
16×16
25×25
36×25
49×49
Validate phase
Deliver phase
ZKCP
0.12 s
0.53 s
1.92 s
5.26 s
13.61 s
ZKCPlus
0.08 s
0.14 s
0.33 s
0.54 s
1.07 s
ZKCP
5.31 s
11.43 s
28.46 s
56.09 s
110.33 s
ZKCPlus
0.19 s
0.26 s
0.41 s
0.52 s
0.78 s
Figure 4: Running time of ZKCP and ZKCPlus
in “validate” and “deliver” phases
Figure 5: Communication cost of ZKCP and ZKCPlus
in “validate” and “deliver” phases
the buyer (client) with 6 threads on the aforementioned machine
with 3.2 GHz CPU and 32 GB memory. We evaluate the two appli-
cations in the running time of the seller and the buyer respectively,
as well as the communication cost between them. We also show
other metrics (i.e., gas cost of our smart contract) in Appendix G.
6.3 Comparison with ZKCP
6.3.1 Performance on “pay to sudoku solution” We first com-
pare the two protocols in the application of “pay to sudoku solution”,
considering their respective setup cost, runtime overhead and com-
munication cost, with the size of sudoku solutions varying from
9×9 to 256×256.
Setup cost In setup phase, ZKCPlus samples a vector of group
elements (with length n = 214 by default) as public and circuit-
independent parameters, while ZKCP yields a circuit-dependent
CRS involving some secret randomnesses. In Table 3 we list the
running time of setup phase and the size of generated CRS of ZKCP
and ZKCPlus for trading varied-size sudoku solutions respectively.
Note that ZKCP runs out of memory when the sudoku gets larger
than 49×49, so we only show the statistics we collected on the
smaller ones.
As Table 3 shows, ZKCPlus outperforms ZKCP in both setup
time and CRS size. The setup phase of ZKCPlus is extremely light-
weight with only tens of milliseconds running time and about 1
MB public parameters, while for ZKCP, the setup time and CRS size
rise up greatly as circuit size grows. For example, the generated
CRS reaches up to 635.93 MB for trading a 49×49 sudoku solution.
Runtime overhead We focus on the running time of the “val-
idate” and “deliver” phases, given that they are the dominating
factors for both protocols. In Figure 4, we show the total running
time of these two phases respectively for the seller and the buyer.
As shown in Figure 4, ZKCP incurs extremely asymmetrical
overheads for the two trading parties. The buyer is quite efficient but
the seller’s running time skyrockets. For a 49×49 sudoku solution,
it takes about 124 s for the seller to generate a proof, but only a
few milliseconds for the buyer to verify it. Also, ZKCP is memory-
consuming, that the seller runs out of memory when solution size
gets larger than 49×49.
By contrast, ZKCPlus reduces seller running time by 21-67×.
Specifically, for the 49×49 sudoku solution, the two phases only take
the seller about 1.8 s to run. Meanwhile, the buyer of ZKCPlus shows
competitive efficiency as that of ZKCP. ZKCPlus also demonstrates
higher scalability; For the largest 256×256 (64 KB) sudoku solution,
the two phases finish within about 35 s.
More detailed statistics on seller running time of the two phases
are shown in Table 4. For ZKCP, we calculate the running time
of the two phases according to their corresponding number of
constraints in the circuit. ZKCPlus seller is 1.6-12.7× more efficient
than ZKCP in “validate” phase, and 28.7-142.6× more efficient in
“deliver” phase.
Communication cost We show communication cost between
the two parties in “validate” and “deliver” phases in Figure 5. The
proof size in ZKCP is succinct due to the underlying zkSNARK
scheme. However, the overall communication cost still grows lin-
early due to its linear-size ciphertext. (Due to memory limitations,
the experiment cuts at 49× 49 solution size). Although the proof
size of our CP-NIZK argument is larger and not constant, it won’t
be a bottleneck since the cost is acceptable for off-chain communi-
cations.
6.3.2 Throughput of large-scale delivery To further evaluate
scalability of the two protocols, we measure their throughput for
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3012Figure 6: Throughput of ZKCP and ZKCPlus
in “deliver” phase
Figure 7: Proving time of ZKCP and ZKCPlus-SHA256 in
“deliver” phase (under the same encryption scheme)
Table 5: Performance of “pay to CNN model”
application on two CNN models
Buyer time
Seller time
Table 6: Performance of “pay to SQL query” application
on a sub-string query over 100,000 records
Communication cost
Seller time
Buyer time
Communication cost
3-layer CNN
VGG16 model
Validate phase
Deliver phase
Validate phase
Deliver phase
0.79 s
0.95 s
6.15 min
6.13 min
0.14 s
0.11 s
56.97 s
18.50 s
51.35 KB
211.47 KB
80.71 KB
298.10 MB
Validate phase
Deliver phase
5.70 s
0.31 s
0.77 s
0.08 s
988.18 KB
96.61 KB
large-sacle data delivery. For simplicity, we remove solution vali-
dation from ZKCP, and compare its throughput to that of ZKCPlus
in “deliver” phase only, with the data size varying from 32 B to 512