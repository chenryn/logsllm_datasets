问：
这样做有什么好处吗？
替这个功能呢？
答：
检查约束可确保输入数据的合理性。你不会在最
后发现一堆神秘的值。
462
第11章
---
## Page 495
约束、视图与事务
Frank的工作很无聊
Frank的工作是匹配联络人与各种职缺。他发现了一些模
式。例如，网站设计员的需求很多，但应征者很少；有很
多技术撰稿人在找工作，但这方面的职缺却不多。
Frank每天都在执行相同的查询，为求职的人们寻找合适
的职缺。
我每天都必须重复又重复
地创建相同的查询。好无聊
哦。
Q
为Frank设身处地
你的任务是扮演Frank的角色，并设
计出他每天都要写的查询。一个查询是
从job_desired表中找出所有网站设计
员（webdesigner）并附上
他们的联络信息，另一个
查询则是查找技术摄稿人
（technicalwriter）的职缺。
当前位置
463
---
## Page 496
创建视图
为Frank设身处地解答
你的任务是扮演Frank的备色，并设
SELECT mc sitst_name,mc.last_name,
计出他每天都要写的查询。一个查询是
mc.phone,mc.email
FROM my_contacts mc
从job_desired表中找出所有网站设计
NATURAL OJN jo6_desived jd
员（webdesigner）并附上
WHEREjd.title ='We6Designet’
他们的联络信息，另一个
Cres通常都以首字母大写
查海则是查找技术摄稿人
的格式输入职务名。
（technicalwriter）的职缺。
SELECT title,salary.desctiption,xip
FROM jo6_listings
WHERE title =‘Technical Wtitet
两组查询都不难，可是每天都要一再重复输人查询，枯燥单调真的
很容易造成失误。Frank需要能够存储查询、每日只查看一次结果
而且不需重复输入查询的方式。
他可以把查淘存储在文本文
件中，每天只要复制、粘贴它们
就好了。有什么难的？
文件可能被覆盖或修改。
文件可能意外地被覆盖或修改。把查询存储在
数据库内才是更好的方式。我们可以把查询变
成视图（view）。
464
第11章
---
## Page 497
约束、视图与事务
创建视图
创建视图非常简单，只需在查询中加入CREATEVIEW语句。让我
们一起为Frank的查询创建两个视图：
CREATE VIEW web _designers AS
SELEcT mc.first_name,mc.last_name,mc.phone,mc.email
FROMmy_contactsmc
NATURALJOINjob_desiredjd
这部分也能改用JNNER3ON
WHERE jd.title ='Web Designer';
ON_mc.contact_id =jd.contact_id。
CREATEVIEWtechwriterjobs AS
SELECT title salary,description,zip
FROM job_listings
WHEREtitle='TechnicalWriter';
哈哈，太简单了！不
过我该怎么利用刚创建
好的视围呢？
你觉得使用VIEW的SQL语句会是什
么样子？
当前位置
465
---
## Page 498
在SELECT语句中使用视图
查看你的视图
以刚才创建的web_designers视图为例：
CREATEVIEW web_designers AS
SELECT mc.first_name,mc.last_name,mc.phone,mc.email
FROM my_contactSmc
请记住，关键字AS可以省略不写。
NATURALJOINjob_desiredjd
WHERE jd.title='WebDesigner';
若想查看视图的内容，可以把它想成一张表，我们一样可
以使用SELECT选出它的内容：
SELECT*FROM web_designerS;
视图名称。
输出结果如下所示：
first_name
last_name
phone
emall
John
Martinez
5559872
PI:EMAIL
Samantha
Hoffman
5556948
PI:EMAIL
Todd
Hertz
5557888
PI:EMAIL
Fred
McDougal
5557744
PI:EMAIL
5
meu
7
依此类推，本表将列出所有符合
“We6Desisner”条件的记录。
466
第11章
---
## Page 499
约束、视图与事务
视图的实际行动
当在查询中实际使用视图时，它的行为方式与子查询一样。
下面即为前页使用视图的SELECT：
SELECT*FROM web_designerS;
这条语句的意思是：子查询要从my_contacts里返回正
在寻找网络设计员工作的联络人的first_name、last_name、
phone、email等信息。
SELECT*FROM
(SELECT mc.first_name,mc.last_name,mc.phone,mc.email
FROMmy_contactsmc
NATURALJOINjob_desiredjd
WHERE jd.title='Web Designer'AS web_designers;
7
这就是我们在视图中使用的
我们给子查询一个别名
东西。
以便壹询把它当成一级的
表。
为什么要有“ASweb_
designers”？为什么需要
这个部分？
FROM子句需要表。
当SELECT语句的结果是一个虚拟表时，若没
有别名，SQL就无法取得其中的表。
当前位置
467
---
## Page 500
深入讨论视图
何为视图
基本上视图是一个只有在查询中使用VIEW时才存在的表。它被
视为虚拟表（virtual table），因为其行为和表一样，也能执行表
可用的操作。
戴上X光眼镜，
但虚拟表不会一直保存在数据库里。
观察你的表
?
为什么视图对数据库有好处
视图把复杂查询简化为一个命令，带来更轻松的生活。
如果创建了视图，就不需重复创建复杂的联接与子查询。视图隐藏
了查询的复杂性。当SQL与PHP等编程语言结合后，把视图加人程
序代码会比加入长、复杂、充满联接的查询更简单。简单代表不容
这些表只是因为我们在
易打错字，程序代码也会更容易理解。
壹询里使用VJEW而存
在。
即使一直改变数据库结构，也不会破坏依赖表的应用程序。
我们一直没有提到数据库与应用程序的结合，但总有一天，各位要
把数据库的知识带到外面的世界，与其他技术一起创建应用程序。
为数据创建视图，可于改变底层表结构时以视图模仿数据库的原始结
构，因而无需修改使用旧结构的应用程序。
创建视图可以隐藏读者无需看到的信息。
有朝一日，假设Greg'sList的商业规模扩大到了需要记录信用卡
信息的程度。此时可创建一个视图指向信用卡拥有者的档案，但又不
会透露信用卡的详细信息。你可以只允许员工看到他们需要知道的信
息，同时又保护敏感信息不被外泄。
468
第11章
---
## Page 501
约束、视图与事务
嗯，我想到一个很难的问题。我可以创建一个视围，
列出每个在job_current表里同时也在Job_desired表里的人，
还要列出他们目前的薪资，根据salary_low找出他们的期待薪
资，并算出当前薪咨与期待薪咨的差距吗？换句话说，能找出
让联绝人愿意换工作的加薪额度吗？对了，也要给我联络人
的姓名、电子邮件地址和电活号码。
Frank的要求真不少啊！但只要能用SELECT的查询就能转换为视图。让我们从下列
问题开始，然后再把Frank想做的查询写成一个名为“job_raises”的视图。
这个查询需要哪些表？
哪些表的哪些列可用于计算需要的加薪额度？
该如何使用SQL，才能于结果中实际创建名为“raise”的列？
请写出Frank需要的查询：
提示：试着用两个联接结合三个表！
当前位置
469
---
## Page 502
习题解答
Frank的要求真不少啊！但只要能用SELECT的查询就能转换为视图。让我们I从下列
习题
问题开始，然后再把Frank想做的查询写成一个名为“job_raises”的视图。
解答
这个查询需要哪些表？
job_curtent、job_desized、my_contacts
哪些表的哪些列可用于计算需要的加薪额度？
job_current salary 列、jo6_desired 6salary_low列
该如何使用SQL，才能于结果中实际创建名为”raise”的列？
以最低期待薪资减去当前薪资并为结果赋子予别名。
请写出Frank需要的查询：
创建名为“jo6_
raises”的新视图。
V
CREATE VJEW jo6_raises AS
SELECT mc.fitst_name,mc.last_mame, mc,email, mc.phone, jc.contact_id. jc.salaty. jd.salary_low,
jd.salavy_low - jc.salary AS raise
创建视图后，壹询的制余部分使用了两个
FROM jo6_cartent jc
JNNER3OJN从三张表中取出数据。这里需
JNNER 3OJN jo6_desited jd
要一点数学计算来算出“加薪额度”列。
JNNER 2OJN my_contacts mc
WHERE jc.contact_id =jd.contact_id
把期待薪资减去当前
薪资并设定结果的别
AND jc.contact_id=mc.contact_id
名为“aise”。
这是个庞大的查询，但Frank只需要输入
SELECT*FROM job_raises;
就能看到他需要的信息。
470
第11章
---
## Page 503
约束、视图与事务
磨笔上陈
如果Frank用新的job_raises视图运行第470页上的查询，他该如何根
据姓氏字母排序？
答案请见第491页
利用视图进行插入、更新与删除
视图不仅能用于SELECT，从表中选择信息，有时候，它还可以用于
UPDATE、INSERT、DELETE数据。
所以我可以创建一个领围，用
于实际修改表？
的确可以，但不值得这么麻烦。
如果你的视图使用统计函数（例如SUM、COUNT、
AVG），则无法用视图改变数据。如果你的视图
包含GROUP BY、DISTINCT、HAVING，我们也
不可以改变任何数据。
在多数情况下，用传统方式做INSERT、
UPDATE、DELETE更容易，但接下来几页将示
范以视图改变数据的方式。
当前位置
471
---
## Page 504
查看你的小猪存钱罐
秘密在于假装视图是真正的表
让我们从新表piggY_bank制造一个视图。原始表包含我们
存下来的硬币。每个硬币都有自己的ID，硬币面额包括penny
（P）、neckel（N）、dime（D）、quarter（Q），并附有硬币铸造的年份。
CREATE TABLE piggY_bank
（
id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
COin CHAR(1) NOT NULL,
coin _year CHAR(4)
下表是piggy_bank里的现有数据：
id
coin
coin_year
1
Q
1950
2
P
1972
3
N
2005
4
Q
1999
5
Q
1981
D
1940
→
Q
1980
8
P
2001
9
D
1926
10
P
1999
设计一个只会呈现quarter的视图：
CREATEVIEWpb_quartersAS
SELECT * FROM piggY_bank
WHERE COin ='Q';
动见
如果运行下列查询，结果表会是什么样子？
SELECT*FROMpb_quarters;
472
第11章
---
## Page 505
约束、视图与事务
自己动手做。使用下列查询创建piggy_bank表以及视图pb_quarters、pb_dimes。
INSERT INTO piggY _bank VALUES ("','O', 1950), (','P', 1972),(*,'N', 2005), (*,*Q′,
1999),(*,O′,1981）,(*,'D′,1940）,(*,'Q′,1980）,(*,*P′,2001),(*,*D′,1926),(*,*P′,1999);
=        
CREATE VIEW pb _ dimeS AS SELECT * FROM pig9Y _ bank WHERE coin = 'D′ WITH CHECK OPTION;
请写下运行完上述INSERT、DELETE、UPDATE查询后的结果。完成
继续摇下来的习题时，
习题后，画出piggy_bank表最终的结果。
试着想出这个部分的作
用。
INSERT INTO pb_quarterS VALUES (*,'Q', 1993);
INSERT INTO pb _quarters VALUES (**,'D', 1942);
INSERT INTO pb_dimeS VALUES (*,'Q',2005);
DELETE FROM pb_quarters WHERE coin='NOR coin='P'OR coin'D';
UPDATE pb_quarterS SET coin ='Q'wHERE coin ='P';
当前位置
473
---
## Page 506
习题解答
自己动手做。使用下列查询创建piggy_bank表以及视图pb_quarters、pb_dimes。
解答
INSERT INTO pig9Y _ bank VALUES (**,*Q′, 1950), (**,P′, 1972),(**,*N', 2005), (**,*Q′,
1999),(*,*Q′,1981),(*,*D′,1940),(*,*O′,1980),(*,*P',2001),(*,D′,1926),(*,P’,1999);
CREATE VIEW pb _ quarters AS SELECT * FROM piggy _ bank WHERE coin = 'Q′;
CREATE VIEW pb _ dimes AS SELECT * FROM piggy _ bank WHERE COin = *D’ WITH CHECK OPTION;
7
继续接下来的习题时，
请写下运行完上述INSERT、DELETE、UPDATE查询后的结果。完
试着想出这个部分的
成习题后，画出piggy_bank表最终的结果。
作用。
INSERT INTO pb_quarters VALUES ('`,'Q′,1993);
上述查询将适当地运行。
INSERT INTO pb_quarters VALUES (*','D',1942);
上述查询插入新的值至原始表中，因为创建视图时带有
WHERE子句.甚至可能有人以为它不金成功。
INSERT INTO pb_dimes VALUES (*','Q', 2005);
上述查询因为CHECKOPTJON子句金产生错误信息。虽然它是
把数据输入视图的叠询，但在添加数据前必须先通过WHERE
子句的验证。
DELETE FROM pb_quarters WHERE coin ='N’OR coin ='POR coin ='D';
上述查询对表没有任何影响，因为它只能找到
coin
coin_year
面额是“Q”的硬币的记录。
1
Q
1950
2
P
1972
3
N
2005
UPDATE pb_quarters SET coin = *Q′ WHERE coin = 'P';
4
Q
1999
5
Q
1981
上述查询对表没有任何影响，因为在视
6
D
1940
图pb_uatters里没有coin=‘P’的值。
7
Q
1980
8
P
2001
6
D
1926
10
P
1999
原始表金变成：
11
Q
1993
12
D
1942
474
第11章
---
## Page 507
约束、视图与事务
带有CHECKOPTION的视图
在视图后添加CHECKOPTION，即要求RDBMS检查每个INSERT
CHECKOPTION
与DELETE语句—它会根据视图中的WHERE子句来检查这类查询是
否符合条件。CHECKOPTION究竞如何影响INSERT与DELETE语句
检查每个进
呢？
行INSERT或
在前页的习题中使用CHECKOPTION时，INSERT操作的数据如果不
DELETE的查询，
符合pb_dimes视图中的WHERE条件，插入操作即被拒绝。如果换成
UPDATE，也会出现错误信息：
它根据视图中的
UPDATE pb_dimes SET coin ='x';
WHERE子句来判
x不符合pb_dimes中的wHERE条件，因此不会得到更新。
断远些查询可否执
行。
如累使用MySQL，可以利用具
有CHECKOPTION的视田创建类似
于CHECKCONSTRAINT的机制吗？
可以，你的视图能够精确地反映表的内容，又能
强迫INSERT语句服从WHERE子句的条件。
就以Jim的性别列问题为例，我们可以创建一个my
contacts表的视图，让Jim通过视图更新数据。每次他试
着在性别列填入X时就会出现错误信息。
使用MySQL时，可用
CHECKOPTION模仿
CHECKCONSTRAIN的
如何为my_contacts创建一个视图，用于限
功能。
制Jim只能在性别字段里填人“M”或“F”呢？
当前位置
475
---
## Page 508
可更新视图与不可更新视图
视图有可能更新，如果··.··
在piggy_bank表的例子里，我们创建的两个视图都有更新功能。可更
新视图（updatableview）就是可以改变底层表的视图。重点在于可更新
可更新视图包括引
视图的内容需要包括它引用的表中所有设定为NOTNULL的列。如此一
来，以INSERT对视图添加内容时，即可确定每个必须有值的列确实都填
用表里所有为NOT
人内容了。
NULL的列。
基本上，这表示INSERT、UPDATE、DELETE也能使用我们创建的视图。只
要视图返回的列不是NULL，就可妥当添加内容至底层表中。
除了使用CHECKOPTION，我幕不出使用视围来
INSERT的必要性。
你说的没错，你不会经常使用视图来INSERT、
UPDATE、DELETE。
虽然有使用视图的正当理由（例如以MySQL强制实现数据的
完整性），但直接使用表操作INSERT、UPDATE、DELETE
等查询通常会更容易。如果视图只有一列且底层表的其他列
都可指定为NULL或默认值，用视图来INSERT确实更为方
便，这种情况下用视图来INSERT才会合理。也可为视图
加上WHERE子句以约束INSERT的内容，在MySQL中模
拟CHECK CONSTRAINT 的效果。
也可以只更新视图，此时的UPDATE查询不可包含统计类型
的运算符，如 SUM、COUNT、AVG，像BETWEEN、HAVING、
IN、NOTIN这类运算符均不可使用。
476
第11章
---
## Page 509