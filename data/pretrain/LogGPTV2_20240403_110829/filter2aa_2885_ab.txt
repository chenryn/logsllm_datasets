Essential Phone 
Programmatic factory reset 
AT&T 
ZTE Blade Spark 
Dump modem and logcat logs to external storage 
AT&T 
LG Phoenix 2 
Dump modem and logcat logs to external storage 
Verizon 
ZTE Blade Vantage 
Dump modem and logcat logs to external storage 
Multiple carriers 
LG G6 
Dump logcat logs to attacking app’s private 
directory 
Multiple carriers 
LG G6 
Lock the user out of their device (requiring a 
factory reset to recover in most cases) 
Multiple carriers 
LG G6 
Dump logcat log, kernel log, IMEI, and serial 
number to external storage 
T-Mobile 
Coolpad Defiant 
Obtain and modify user’s text messages 
T-Mobile 
Coolpad Defiant 
Send arbitrary text messages 
T-Mobile 
Coolpad Defiant 
Obtain phone numbers of user’s contacts 
T-Mobile 
Coolpad Defiant 
Programmatic factory reset 
T-Mobile 
Revvl Plus 
Obtain and modify user’s text messages 
T-Mobile 
Revvl Plus 
Send arbitrary text messages 
T-Mobile 
Revvl Plus 
Obtain phone numbers of user’s contacts 
T-Mobile 
Revvl Plus 
Programmatic factory reset 
T-Mobile 
ZTE Zmax Pro 
Obtain and modify user’s text messages 
T-Mobile 
ZTE Zmax Pro 
Send arbitrary text messages 
T-Mobile 
ZTE Zmax Pro 
Obtain phone numbers of user’s contacts 
T-Mobile 
ZTE Zmax Pro 
Dump modem and logcat logs to external storage 
Cricket Wireless 
Coolpad Canvas 
Change system properties as the phone user 
Cricket Wireless 
Coolpad Canvas 
Dump logcat log, kernel log, and tcpdump capture 
to external storage 
Total Wireless 
ZTE Zmax Champ 
Programmatic factory reset 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Total Wireless 
ZTE Zmax Champ 
Brick device with a consistent crashing in recovery 
mode 
Total Wireless 
ZTE Zmax Champ 
Dump modem and logcat logs to external storage 
3.2 Popular Android Devices in Asia 
We obtained three Android devices from their official vendor stores in Kuala Lumpur, Malaysia. 
Specifically, we bought the following devices: Oppo F5, Vivo V7, and Leagoo P1. At the time of purchase 
(early February 2018), the Oppo and Vivo devices we purchased were flagship models. Each of these 
devices had concerning vulnerabilities that are shown at the bottom of Table 1. The Oppo and Vivo devices 
contain vulnerabilities that can be used to facilitate surveillance of the end-user. The vulnerabilities appear 
to be unused by the device for any malicious purpose, although they can be leveraged by any third-party 
app that is aware of their presence. 
BBK Electronics10 produces a large range of electronics including three popular smartphone brands: Oppo, 
Vivo, and OnePlus. Oppo and Vivo Android devices are not well known in the US, but they are popular in 
Asia. Oppo was the top seller of smartphone units in China for 201611. Oppo and Vivo were the third and 
fourth largest suppliers of smartphones in India for the first quarter of 2018 with each vendor having 6% 
market share12. Furthermore, both Oppo and Vivo had 7.4% and 5.2%, respectively, global market share 
for smartphones shipped in the first quarter of 2017. Leagoo is smaller than the other two vendors, but has 
recently made headlines about launching its S9 device at Mobile World Congress 201813.  
To determine if the vulnerabilities we discovered were being actively used by malicious apps, we “scraped” 
118,000 apps from the Xiaomi app marketplace14. We did not find any instances of the vulnerabilities we 
discovered being used in the apps we processed. We are still in the processing of scraping additional app 
marketplaces to determine if these vulnerabilities are actively being exploited elsewhere. 
4. Arbitrary Command Execution as the system User 
We found 3 instances of arbitrary command execution as the system user from the following vendors: Asus, 
Oppo, and SKY. All of the instances were due to a platform app executing as the system user containing 
an exposed interface that allows any app co-located on the device to provide arbitrary commands to be 
executed. Executing commands as the system user is a powerful capability that can be used to 
surreptitiously surveil the user. Using this capability, a video can be recorded of the device’s screen, 
affording the user no privacy. Android allows the screen to be recorded by privileged processes via the 
/system/bin/screenrecord command. The Oppo F5 device does not allow the screen to be recorded 
through the standard screenrecord command, although the device allows screenshots to be taken of the 
screen via the screencap command. Beyond the lack of privacy due to observing all on-screen activity of 
the user, anything that the user enters can also be viewed and obtained (e.g., passwords, credit card numbers, 
10 http://www.gdbbk.com/ 
11 https://techcrunch.com/2017/02/05/oppo-topped-chinas-smartphone-market-in-2016/ 
12 https://economictimes.indiatimes.com/tech/hardware/xiaomi-jiophone-widen-leads-in-smartphone-feature-phone-markets-
respectively-counterpoint/articleshow/63887110.cms 
13 https://www.engadget.com/2018/03/03/for-this-iphone-clone-maker-its-all-about-survival/ 
14 http://app.mi.com/ 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
social security numbers, etc.). Command execution as the system user can allow an app to 
programmatically set itself as a notification listener. A notification listener can receive the text of the user’s 
notifications as notifications are received15. In the normal case, a user must explicitly enable an installed 
app as a notification listener using the Settings app. An app executing as the system user can 
programmatically add an app (e.g., the attacking app) to the list of approved notification listeners using the 
settings put secure enabled_notification_listeners / 
command. This enables the app to receive the text of the notifications, allowing the app to see received text 
messages, Facebook Messenger messages, WhatsApp messages, and also any arbitrary notification that is 
received. The logcat log is also accessible to the system user and can be written to a location that is visible 
to other applications. The data that can be obtained from the logcat log is provided in Section 5. Moreover, 
the attacking app can programmatically use the vulnerable platform app to set itself as the default Input 
Method Editor (IME) and capture the input that the user enters by replacing the default keyboard with one 
that the attacking app has implemented within its own code16. The new IME would raise suspicion if it did 
not resemble the target’s default keyboard. The key presses can be transferred to the malicious app from 
the malicious IME via a dynamically-registered broadcast receiver. The attacking app can also set one of 
its components as the default spell checker17. Table 3 shows the capabilities that were verified using the 
vulnerable platform app to execute commands as the system user. The differences are due to the Android 
Application Programming Interface (API) level and SELinux18 rules of the respective devices. 
Table 3. Verified Capabilities on the Devices with a Vulnerable Platform App. 
Device 
Asus ZenFone 
V Live 
Asus ZenFone 3 
Max 
Oppo F5 
SKY Elite 6.0L+ 
Obtain text messages 
X 
X 
X 
Obtain call log 
X 
X 
X 
Obtain contacts 
X 
X 
X 
Set as keyboard (keylogger) 
X 
X 
X 
X 
Set as notification listener 
X 
X 
X 
X 
Factory Reset 
X 
X 
X 
X 
Call phone number 
X 
X 
X 
X 
Take Screenshot 
X 
X 
X 
X 
Record video 
X 
X 
X 
Install app 
X 
Set as spell checker 
X 
X 
X 
Write logcat log 
X 
X 
X 
X 
Below are some commands that are verified to work when executed as the system user via a vulnerable 
app that exposes this capability on some of the devices we tested. Some of the commands below can be 
used to directly write the output, if any, to the attacking app’s private directory (see Section 4.1.1 and 
Section 4.1.2 for details) instead of using external storage for a temporary file transfer location. Notably, 
SELinux on the Asus ZenFone V Live prevents its vulnerable platform app from directly reading from or 
writing to a third-party app’s private directory; therefore, the approach is Section 4.1.1 is necessary for 
15 https://developer.android.com/reference/android/service/notification/NotificationListenerService 
16 https://developer.android.com/guide/topics/text/creating-input-method 
17 https://developer.android.com/guide/topics/text/spell-checker-framework 
18 https://source.android.com/security/selinux/concepts 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
make the vulnerable app write a shell script via logcat and transfer the command output via embedding the 
data in broadcast intents.  
Record the user’s screen for 60 seconds 
/system/bin/screenrecord --time-limit 60 /sdcard/sixtyseconds.mp4 
Take screenshot 
/system/bin/screencap -p /sdcard/notapic.png 
Set your app as a notification listener  
/system/bin/settings put secure enabled_notification_listeners 
com.my.app/.NotSomeNotificationListenerService 
Set your app as a spell checker providing partial keylogger functionality 
/system/bin/settings put secure selected_spell_checker 
com.my.app/.NotSomeSpellCheckingService 
Set your app as the default IME (e.g., keyboard) for keylogger functionality 
/system/bin/settings put secure enabled_input_methods :com.my.app/.NotSomeKeyboardService 
/system/bin/settings put secure default_input_method 
com.my.app/.NotSomeKeyboardService 
Obtain the logcat log 
/system/bin/logcat -d -f /sdcard/notthelogdump.txt 
/system/bin/logcat -f /sdcard/notthelog.txt 
Inject touch, gestures, key events, and text 
/system/bin/input tap 560 1130 
/system/bin/input swipe 540 600 540 100 200 
/system/bin/input keyevent 3 66 67 66 
/system/bin/input text scuba 
Call a phone number (can be used to call emergency numbers) 
am start -a android.intent.action.CALL_PRIVILEGED -d tel:800-555-5555 
Factory reset the device 
am broadcast -a android.intent.action.MASTER_CLEAR 
Get all of the user’s text messages  
content query --uri content://sms 
Get all of the user’s call log  
content query --uri content://call_log/calls 
Get all of the user’s contacts  
content query --uri content://contacts/people 
Set certain system properties (seems limited to persist.*) 
setprop persist.sys.diag.mdlog 1 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Change arbitrary settings 
settings put secure install_non_market_apps 1 
Disabled third-party apps 
pm disable com.some.undesirable.app 
4.1 Executing Scripts as the system User 
The three instances of command execution as the system user that we found all use the 
java.lang.Runtime.exec(String) API call to execute commands. This API call executes a single 
command and does not allow input and output redirection that the shell provides. This behavior is limiting, 
so we created a method to have the app that allows command execution to execute shell scripts without 
reading them from external storage. This relieves the attacking app from having to request the 
READ_EXTERNAL_STORAGE permission, although the attacking app can create the request to access external 
storage and use the vulnerable app to inject input events to grant itself the permission if runtime permission 
granting is present on the device. Nonetheless, to be stealthier, the approach we outline below alleviates 
access to the SD card for certain data (recording the screen, text messages, contacts, call log, etc.). All the 
vulnerable platform apps are able to read and execute a shell script in attacking app’s private directory and 
write the output to the attacking app’s private directory, except the Asus ZenFone V Live device. It’s 
vulnerable platform app will be blocked from reading from or writing to the attacking app’s private 
directory. Therefore, we provide two different methods for data transfer. Section 4.1.1 is the most robust 
and removes any difficulty with SELinux blocking a platform app reading from or writing to the attacking 
app’s private directory. Section 4.1.2 details the instance where the platform app is not prevented from 
writing directly to the attacking app’s private directory. 
4.1.1 Transferring Data Using a Dynamically-Registered Broadcast Receiver 