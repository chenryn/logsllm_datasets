title:Improving the Robustness of Private Information Retrieval
author:Ian Goldberg
Improving the Robustness of Private Information Retrieval
Ian Goldberg
David R. Cheriton School of Computer Science
University of Waterloo
200 University Ave. West
Waterloo, ON, Canada N2L 3G1
PI:EMAIL
Abstract
Since 1995, much work has been done creating proto-
cols for private information retrieval (PIR). Many variants
of the basic PIR model have been proposed, including such
modiﬁcations as computational vs.
information-theoretic
privacy protection, correctness in the face of servers that
fail to respond or that respond incorrectly, and protection
of sensitive data against the database servers themselves.
In this paper, we improve on the robustness of PIR in a
number of ways. First, we present a Byzantine-robust PIR
protocol which provides information-theoretic privacy pro-
tection against coalitions of up to all but one of the respond-
ing servers, improving the previous result by a factor of 3.
In addition, our protocol allows for more of the responding
servers to return incorrect information while still enabling
the user to compute the correct result.
We then extend our protocol so that queries have
information-theoretic protection if a limited number of
servers collude, as before, but still retain computational
protection if they all collude. We also extend the protocol
to provide information-theoretic protection to the contents
of the database against collusions of limited numbers of the
database servers, at no additional communication cost or
increase in the number of servers. All of our protocols re-
trieve a block of data with communication cost only O(ℓ)
times the size of the block, where ℓ is the number of servers.
Finally, we discuss our implementation of these proto-
cols, and measure their performance in order to determine
their practicality.
1. Introduction
Private information retrieval (PIR) [4] is the task of
fetching an item from a database server without the server
learning which item you are interested in. In the context
of PIR, an “item” is often thought of as a single bit out of
an n-bit database, but it could also be a “block” of size b
bits. In the latter case, the n-bit database is considered to be
composed of n/b blocks, each of size b bits. A number of
applications have been proposed for PIR, including patent
and pharmaceutical databases [1], online census informa-
tion [17], and real-time stock quotes [17]. The Pynchon
Gate [11] shows how to use PIR for an arguably more real-
istic purpose: retrieving pseudonymously addressed email;
it argues that PIR is a more suitable primitive for this appli-
cation than previous proposals.
A trivial solution to the PIR problem is simply to ask
the server for the whole database and look up the desired
bit or block yourself. To make things more interesting (not
to mention practical), we analyze the communication cost
of the protocol—the total number of bits transmitted—and
insist that it be sublinear; that is, less than n.
There are two main types of PIR: information-theoretic
and computational. In information-theoretic PIR, the server
is unable to determine any information about your query
even with unbounded computing power. In computational
PIR (CPIR) [3, 8], the privacy of the query need only
be guaranteed against servers restricted to polynomial-time
computations. Note that in the information-theoretic case
the unbounded power is only to be used to try to compro-
mise your privacy; in either case we still insist that you and
the servers use only polynomial-time computations in order
to perform the protocol.
It is an unsurprising fact that information-theoretic sub-
linear PIR is impossible with a single server. However, it is
possible when there are ℓ servers, each with a copy of the
database—assuming that the servers do not collude in order
to determine your query. A t-private ℓ-server PIR is a PIR
system in which the privacy of the query is information-
theoretically protected, even if up to t of the ℓ servers col-
lude. (Of course, it must be the case that t .
the mail
pseudonymous
at
arrives
for
a
server,
user,
des-
say
• The mail server encrypts the message using a key
known by the owner of the pseudonym, and puts the
encrypted message in the PIR database (distributing it
to ℓ database servers). Note that the server does not
know who the owner of the pseudonym is.
• At some point, Joe (the owner of the pseudonym) does
a PIR query on the database to retrieve the mail for
the pseudonym .
The privacy guarantees of the PIR technique assure
that, unless all ℓ database servers collude, they will be
unable to link the client of the query, Joe, to the value
of the query, .
• Joe decrypts and reads the resulting message.
The Pynchon Gate uses a PIR protocol from Chor et
al. [4], which is shown in Figure 1.
It is straightforward
to see that this is an (ℓ − 1)-private ℓ-server PIR with
information-theoretic protection.1 Its communication cost
is ℓ(r + b) = ℓ(n/b + b). Choosing b to be √n gives a cost
of 2ℓ√n.
However, as reported by Sassaman and Preneel [12],
this protocol has a weakness in the presence of Byzan-
tine servers: Joe will be unable to reconstruct the message.
Worse, although the Pynchon Gate guarantees Joe will be
able to tell that some server was Byzantine, he will be un-
able to tell which server it was. Therefore, it is important
to produce PIR protocols that not only can allow the client
to reconstruct the correct answer, but will also let the client
know which servers were Byzantine.
To accomplish this goal, we note that steps P2 and P3 of
the Pynchon Gate PIR protocol in Figure 1 form (ℓ − 1)-
private ℓ-way shares of the secret eβ (though not with
Shamir’s method). We replace these steps with a more gen-
eral t-private ℓ-way Shamir secret sharing of eβ. Note that
bitstrings of length r are equivalent to vectors of length r
over F2. We now consider eβ not as a vector over F2, but
rather as a vector of length r over some larger structure S.
We still have that the βth entry of eβ is 1, and the other en-
tries are 0, but now these entries are elements of S, and not
just F2. S might be a ﬁeld (such as GF (2d) for some d, or
Fp for some prime p) or a ring Zpq for some distinct primes
p and q. Let I be a set of Shamir indices in S; that is, if S
is a ﬁeld, I can just be the non-zero elements of S; if S is
Zpq, I can be the set {1, 2, . . . , min(p, q)− 1}, as in section
1The authors of the Pynchon Gate [11] mistakenly claim that, as an
optimization, the client may send ℓ − 1 of the servers a key for a stream ci-
pher instead of a randomly generated bit string of length r. In reality, doing
so reduces the protection provided from information-theoretic to computa-
tional.
Parameters:
ℓ: number of servers
n: size of the database (in bits)
b: size of each block (in bits)
Calculate:
r: number of blocks = n/b
Client (querying for block number β):
P1. Let eβ be the bit string of length r that is all 0s, except for position β, which is 1.
P2. Generate ℓ − 1 random bit strings ρ1, . . . , ρℓ−1, each of length r.
P3. Compute ρℓ = ρ1 ⊕ ··· ⊕ ρℓ−1 ⊕ eβ.
P4. Send ρi to server number i, for 1 ≤ i ≤ ℓ.