                    src = chr(a1) + chr(a2) + chr(a3) + chr(a4) + 'x00'
                    m2 = hashlib.md5()
                    m2.update(src)
                    if m2.hexdigest() == md5str:
                        print 'find'
    print src
abc处的3个字符做了base64加密之后进行比较,求得为E4t.
经过上面的比较后,程序用de处的两个字符对subkey文件内容进行异或,输出到subsubkey中。
再后面对整个flag做了次md5。但是因为整个flag中有10个字节不知道,爆破不太现实。
感觉subsubkey文件应该是有意义的,通过枚举de处的所有可能,得到所有的输出,通过file命令发现当de为ST时,subsubkey为一个rar文件,解压出来有剩下的8个字符。
Flag为:ZCTF{c0c_LIK3_E4t_ST6aw4ErrY}E4t.
Reverse300
Arm64的程序,最近新出的ida6.9支持arm64反编译,不过可惜没有正版ida。
看了下主要函数就几个,所以选择直接看汇编了。结合qemu,可以进行动态调试。
首先,ida对arm64程序的库函数识别不是很好(用的ida6.6),通过readelf解析出来的库函数对ida中的库函数手动修正。
之后就是纯看代码了,大概弄清楚了程序流程:
首先将输入的字符串每3个一组,变换成4个字节,得到buff2.
Buff2中每5个字节一组,做了一个矩阵乘法,得到buff3.
Buff3与固定字符串比较。代码大致如下:
    flag = 'zctf{1234567890}'.ljust(18, 'x00')
    d9 = []
    for i in range(len(flag)/3):
        d  = (ord(flag[3*i])>18)&0x3f
        d2 = (d>>12)&0x3f
        d3 = (d>>6)&0x3f
        d4 = d & 0x3f
        print hex(d1), hex(d2), hex(d3), hex(d4)
        if d1 != 0:
            d9.append(d1)
        if d2 != 0:
            d9.append(d2)
        if d3 != 0:
            d9.append(d3)
        else:
            d9.append(0x40)
        if d4 != 0:
            d9.append(d4)
        else:
            d9.append(0x40)
    d8 = [21, 8, 24, 7, 1, 25, 4, 20, 16, 0, 2, 13, 16, 10, 14, 18, 3, 20, 18, 25, 3, 12, 23, 0, 24]
    for i in range(len(d9)/5):
        for j in range(5):
            a = d9[i*5]*d8[j*5]+d9[i*5+1]*d8[j*5+1]+d9[i*5+2]*d8[j*5+2]+d9[i*5+3]*d8[j*5+3]+d9[i*5+4]*d8[j*5+4]
            print hex(a)
逆向代码:
    m = [[21.0, 8.0, 24.0, 7.0, 1.0], [25.0, 4.0, 20.0, 16.0, 0.0],
         [2.0, 13.0, 16.0, 10.0, 14.0], [18.0, 3.0, 20.0, 18.0, 25.0], [3.0, 12.0, 23.0, 0.0, 24.0]]
    flag_lists = [[1219.0, 1274.0, 1158.0, 1549.0, 1205.0], [2777.0, 2771.0, 2387.0, 3440.0, 2833.0],
                  [1422.0, 1753.0, 1723.0, 2369.0, 1483.0], [2071.0, 2283.0, 1936.0, 3483.0, 2435.0]]
    for flag in flag_lists:
        result3 = mat(m)**-1 * mat(flag).T
    print result3
    sbs = '''
       22.0000
       36.0000
       13.0000
       20.0000
       17.0000
       39.0000
       45.0000
       56.0000
       31.0000
       37.0000
       21.0000
       47.0000
        8.0000
       55.0000
       28.0000
       51.0000
       26.0000
       22.0000
       29.0000
       61.0000
    '''
    res2 = []
    for sb in sbs.strip().split('n'):
        res2.append(int(sb.split('.')[0]))
    for res in res2:
        print hex(res), hex(res&0x3f)
    from zio import *
    flag = ''
    for i in range(len(res2)/4):
        result = (res2[i*4]<<18)+(res2[i*4+1]<<12)+(res2[i*4+2]<<6)+res2[i*4+3]
        flag += l32(result)[0:3][::-1]
    print flag
解得flag为: ZCTF{x~Uo#w3ig}
Reverse500
创建了一个子进程,首先对主进程对输入的数据进行了变换,变换后放到004079D8处,然后子进程再进行判断。
父进程中变换的函数使用一堆jmp进行了混淆。
通过记录程序运行的eip,然后再进行分析,分析发现就是个base64解密,然后挨着的两两字符异或,得到buff2。
在子进程中,将buff2[i]^i与固定字符串比较。
    f = open('./reverse500.exe', 'rb')
    d = f.read()[0x506c:0x506c+54]
    result = ''
    for i in range(53):
        result += chr(ord(d[i])^i)
    result2 = ''
    result2 += result[0]
    for i in range(52):
        result2 += chr(ord(result2[i])^ord(result[i+1]))
    print result2
    print base64.b64decode('WkNURntJX1c0TlRfSm1QX2pNcF8mJl9CNFMxXzY0X0BeX15AIX0=')
得到flag为:ZCTF{I_W4NT_JmP_jMp_&&_B4S1_64_@^_^@!}
Simulator
实现了一个简单的虚拟机(或者叫模拟器)。
定位到虚拟机初始化的地方:
通过之后的分析,可以猜出vreg、vpc、vsp、vflag和vmem。
之后一共支持24条指令:
    0  initvm
    1  mov regi, imm  a1!=0
    mov regi, regj  a1=0
    2: a1 == 0: mov regi, byte [regj] 
    a1 == 1: mov regi, word [regj] 
    a1 == 2: mov regi, dword [regj] 
    3: a1 == 0: mov byte [regj], regi
    a1 == 1: mov word [regj], regi
    a1 == 2: mov dword [regj], regi
    4.  pop regi
    5.  push regi
    6.  a1 == 0: print regi #c
    a1 == 1: print regi #d
    a1 == 2: print regi #x
    a1 == 3: print vmem[regi]
    7.  a1 == 0: scanf regi #c
    a1 == 1: scanf regi #d
    a1 == 2: scanf regi #x
    a1 == 3: scanf vmem[regi]
    8.  ret
    9.  a1 == 0  jmp imm
    a1 == 1: jz imm
    a1 == 2  jnz imm
    a1 == 3: jl imm
    10. a1 == 0:  jmp regi
    a1 == 1: jz regi
    a1 == 2  jnz regi
    a1 == 3: jl regi
    11. a1 != 0:  add regi, imm
    a1 == 0: add regi, regj
    12. sub
    13. and
    14. or
    15. xor
    16. cmp
    17. exit
    18. a1 == 0: mov regi, byte mem[regj] 
    a1 == 1:mov regi, word mem[regj] 
    a1 == 2:mov regi, dword mem[regj] 
    19. a1 == 0: mov byte mem[regj], regi 
    a1 == 1:mov word mem[regj], regi 
    a1 == 2:mov dword mem[regj], regi 
    20. a1 != 0:call imm 
    a1 == 0:call regi
    21 nop
    22  inc regi
    23  dec regi
    24  test regi, regj
根据逆向出来的指令格式,去反汇编分析input.bin。
程序逐字节累加,然后比较。
    adds = [68, 116, 211, 300, 411, 529, 624, 673, 706, 813, 864, 959, 1014, 1086, 1137, 1232, 1285, 1390, 1499, 1616]
    value = 0
    result = ''
    for add in adds:
        result += chr(add-value)
        value = add
    print 'result:'+result
求得结果为D0_Yov_1!k3_7H3_5imu
最后6个字节的比较麻烦一些,直接用z3求解了。
    from z3 import *
    r10 = Real('r10')
    r11 = Real('r11')
    r12 = Real('r12')
    r13 = Real('r13')
    r14 = Real('r14')
    r15 = Real('r15')
    s = Solver()
    s.add(r10 + r11 == 0x65)
    s.add(r12 + r13 == 0x109-0x65)
    s.add(r14 + r15 == 0x1ba-0x109)
    s.add(r11 + r13 + r15 == 0xa3)
    s.add(r10 + r12 == 0x148-0xa3)
    s.add(r11 + r12 == 0xa8)
    print(s.check())
    print(s.model())
最终flag为: zctf{D0_Yov_1!k3_7H3_5imu14t0r?}
Android400
本apk为2048的游戏修改版,玩到一定的分数就会弹出输入flag的窗口,flag窗口的activity为Secret,该类会载入Auth这个lib
观察其create函数,重点看最后一行setOnClickListener,其绑定的按钮监听器为i
跟进类i的onClick函数,其中下面这段语句干了很多事。j.b函数取得了该apk的签名存到v1,重点看最后一行this.a.a的调用。
this.a.a函数实际调用Secret.a函数,该函数中主要的语句是下面这条。
其中Secret.a函数取得assets目录下的libListerner文件的内容,h.a函数将libListerner文件的内容用之前取得的签名作为密钥进行des解密,h.b函数将解密后的内容写入/data/data/com.zctf.zctf2048/libListener,也就是说这里如果想自己重新编译apk的话会比较麻烦。
随后程序调用h.a运行libListerner
随后程序会调用本地函数进行进一步处理。
用ida打开libAuth.so,跟进到程序Java_com_zctf_zctf2048_Auth_AskForAnswer调用的地方。其取得了传入的字符串后调用了sendAndAsk函数
跟进查看,发现程序尝试连接本机的8000端口(转成小端为8000),
并进行tea加密。
最后传输过去
可以推测libListerner会监听8000端口,做进一步处理
用ida打开liblistener之后,定位到main函数,发现不是很复杂,就直接静态看了。
首先进行了tea算法,然后进行了变形base64,然后做了一个简单的变换。
在解密的过程中,发现变形base64解密完成之后,就已经得到flag了,(tea解密都不用算)。
    table = [87, 12, 4294967283L, 4294967291L, 4294967282L, 15, 4294967262L, 68, 4294967293L, 4294967253L, 27, 4294967274L, 13, 4294967287L, 26, 11, 4294967229L, 36, 4294967268L, 58, 0, 4294967236L, 64, 4294967233L, 57, 4294967239L, 17, 2, 11, 4294967293L, 23, 4294967247L]
    def sub_8c20(a1, a2):
        v2 = 87
        if a2:
            v2 = 65
            if a2 <= 31:
                v2 = (a1 + table[a2])&0xff
        return v2
    v6 = 65
    result = ''
    for i in range(32):
        v6 = sub_8c20(v6, i)
        result += chr(v6)
    print result
    str2 = "GHgSTU45IMNesVlZadrXf17qBCJkxYWhijOyzbcR6tDPw023KLA8QEFuvmnop9+/"
    import base64
    def get_index(ch):
        for i in range(len(str2)):
            if str2[i] == ch:
                return i
        raise Exception('error')
    flag = ''
    from zio import *
    for i in range(len(result)/4):
        d1 = get_index(result[4*i])
        d2 = get_index(result[4*i+1])
        d3 = get_index(result[4*i+2])
        d4 = get_index(result[4*i+3])
        d = (d1<<18)+(d2<<12)+(d3<<6)+d4
        flag += l32(d)[0:3][::-1]
    print flag
最终flag为zctf{i_d0N()T_L1k3_2048}