File file = new File("resources/images/", FilenameUtils.getName(image));  
if (!file.exists()) { 
return Response.status(Status.NOT_FOUND).build(); 
} 
return Response.ok().entity(new FileInputStream(file)).build(); 
} 
如果不对用户发起请求的文件参数进行校验，会导致潜在的路径遍历漏洞。
应对所有文件的上传操作进行权限判断，无上传权限应直接提示无权限。
危险的文件后缀应严禁上传，包括： .jsp .jspx .war .jar .exe .bat .js .vbs .html .shtml
应依照业务逻辑对文件后缀进行前后端的白名单校验，禁止白名单之外的文件上传
图片类型 .jpg .png .gif .jpeg
文档类型 .doc .docx .ppt .pptx .xls .xlsx .pdf
以此类推
上传的文件保存时应使用uuid、雪花算法等算法进行强制重命名，以保证文件的不可预测性和唯一
性。
应对所有文件的下载操作依照 “除了公共文件，只有上传者才能下载” 的原则进行权限判断，防止越
权攻击。
潜在的路径遍历（写入文件）
当系统打开文件并写入数据，而该文件名来自于用户的输入数据。如果将未经过滤的文件名数据传递给
文件API，则攻击者可以写入任意数据到系统文件中。
脆弱代码：
解决方案：
@RequestMapping("/MVCUpload") 
public String MVCUpload(@RequestParam( "description" ) String description, @RequestParam("file") MultipartFile fi
// 首先进行逻辑校验，判断用户是否有权限访问接口 以及 用户对访问的资源是否有权限 
InputStream inputStream=file.getInputStream(); 
String fileName=file.getOriginalFilename(); 
// 文件名fileName未校验 ../ 或 ..\  并且也未校验文件后缀 
OutputStream outputStream=new FileOutputStream("/tmp/"+fileName);  
byte[] bytes=new byte[10]; 
int len=-1; 
// 将文件写入服务器中 
while((len=inputStream.read(bytes))!=-1){ 
outputStream.write(bytes,0,len); 
} 
outputStream.close(); 
inputStream.close(); 
// 记录审计日志 
return "success"; 
} 
import org.apache.commons.io.FilenameUtils; 
@RequestMapping("/MVCUpload") 
public String MVCUpload(@RequestParam( "description" ) String description, @RequestParam("file") MultipartFile fi
// 首先进行逻辑校验，判断用户是否有权限访问接口 以及 用户对访问的资源是否有权限 
InputStream inputStream=file.getInputStream(); 
String fileInput; 
if(file.getOriginalFilename() == null){ 
return "error"; 
} 
// 获取上传文件名后强制转化为小写并过滤空白字符 
fileInput=file.getOriginalFilename().toLowerCase().trim(); 
// 对变量fileInput所代表的文件路径去除目录和后缀名，可以过滤文件名中的 ../ 或 ..\  
String fileName=FilenameUtils.getBaseName(fileInput); 
// 获取文件后缀 
String ext=FilenameUtils.getExtension(fileInput);  
// 文件名应大于5小于30 
if ( 5 > fileName.length() || fileName.length() > 30 ) { 
return "error"; 
} 
// 文件名只能包含大小写字母、数字和中文 
if(fileName.matches("0-9a-zA-Z\u4E00-\u9FA5]+")){ 
return "error"; 
} 
// 依据业务逻辑使用白名单校验文件后缀 
if(!"jpg".equals(ext)){   
return "error"; 
} 
// 将文件写入服务器中，确保文件不写入web路径中 
OutputStream outputStream=new FileOutputStream("/tmp/"+ fileName + "." + ext); 
byte[] bytes=new byte[10]; 
int len=-1; 
while((len=inputStream.read(bytes))!=-1){ 
outputStream.write(bytes,0,len); 
} 
outputStream.close(); 
inputStream.close(); 
// 记录审计日志 
如果不对用户发起请求的文件参数进行校验，会导致潜在的路径遍历漏洞。
应对所有文件的上传操作进行权限判断，无上传权限应直接提示无权限。
危险的文件后缀应严禁上传，包括： .jsp .jspx .war .jar .exe .bat .js .vbs .html .shtml
应依照业务逻辑对文件后缀进行前后端的白名单校验，禁止白名单之外的文件上传
图片类型 .jpg .png .gif .jpeg
文档类型 .doc .docx .ppt .pptx .xls .xlsx .pdf
以此类推
上传的文件保存时应使用uuid、雪花算法等算法进行强制重命名，以保证文件的不可预测性和唯一
性。
应对所有文件的下载操作依照 “除了公共文件，只有上传者才能下载” 的原则进行权限判断，防止越
权攻击。
第十一条 确保多线程编程的安全性
确保在多线程编程中正确的访问共享变量，避免多个线程
同时修改一个共享变量。
编码类要求：
竞争条件
当两个或两个以上的线程对同一个数据进行操作的时候，可能会产生“竞争条件”的现象。这种现象产生
的根本原因是因为多个线程在对同一个数据进行操作，此时对该数据的操作是非“原子化”的，可能前一
个线程对数据的操作还没有结束，后一个线程又开始对同样的数据开始进行操作，这就可能会造成数据
结果的变化未知。
解决方案：
HashMap、HashSet是非线程安全的；
而Vector、HashTable内部的方法基本都是synchronized，所以是线程安全的。
而在高并发下应使用Concurrent包中的集合类。同时在单线程下禁止使用synchronized。
return "success"; 
} 
第十二条 设计错误、异常处理机制
应设计并建立防止系统死锁的机制及异常情况的处理和恢
复机制，避免程序崩溃。
编码类要求：
一、java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来
处理，比如：NullPointerException，IndexOutOfBoundsException 等等。
说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，可能存在数字格式错误，应通
过 catch NumberFormatException 来实现。
正例：
if (obj != null) { 
... 
} 
反例：
try { 
obj.method(); 
} catch ( NullPointerException e ) { 
... 
} 
二、异常捕获后不要用来做流程控制，条件控制。
说明：异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很
多。
三、catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代
码的 catch 尽可能进行区分异常类型，再做对应的异常处理。
说明：对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问
题，这是一种不负责任的表现。
正例：用户注册的场景中，如果用户用户名称已存在或用户输入密码过于简单，在程序上作出"用户
名或密码错误"，并提示给用户。
反例：用户提交表单场景中，如果用户输入的价格为感叹号，系统不做任何提示，系统在后台提示
报错。
四、捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给
它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。
五、事务场景中，抛出异常被 catch 后，如果需要回滚，一定要注意手动回滚事务。
六、finally 块中必须对临时文件、资源对象、流对象进行资源释放，有异常也要做 try-catch。
说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。
七、不要在 finally 块中使用 return。
说明：try 块中的 return 语句执行成功后，并不马上返回，而是继续执行 finally 块中的语句，如果此处
存在 return 语句，则在此直接返回，无情丢弃掉 try 块中的返回点。
反例：
private int x = 0; 
public int checkReturn(){ 
try { 
/* x 等于 1，此处不返回 */ 
return(++x); 
} finally { 
/* 返回的结果是 2 */ 
return(++x); 
} 
} 
八、捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。
说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。
九、在调用 RPC、二方包、或动态生成类的相关方法时，捕捉异常必须使用 Throwable类来进行拦截。 
说明：通过反射机制来调用方法，如果找不到方法，抛出 NoSuchMethodException。什么情况会抛出
NoSuchMethodError 呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不
匹配，或者在字节码修改框架（比如：ASM）动态创建或修改类时，修改了相应的方法签名。这些情
况，即使代码编译期是正确的，但在代码运行期时，会抛出 NoSuchMethodError。
十、方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下
会返回 null 值。 
说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来
说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。
十一、防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：
1. 数据库的查询结果可能为 null。
2. 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。
3. 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。
4. 对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。
5. 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。应使用 JDK8 的 Optional 类来防止
NPE 问题。
6. 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。
反例：
public int f() { return Integer 对象} // 如果为 null，自动解箱抛 NPE。 
十二、定义时区分 unchecked / checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出
Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：
DAOException / ServiceException 等。
十三、对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出；跨应用间 RPC
调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、errorMessage；而应用内部直接
抛出异常即可。
说明：关于 RPC 方法返回方式使用 Result 方式的理由：
1. 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。
2. 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题
的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是
问题。
第十三条 数据库操作使用参数化请求方式
对需要使用SQL语句进行的数据库操作，必须通过构造参
数化的SQL语句来准确的向数据库指出哪些应该被当作数
据，避免通过构造包含特殊字符的SQL语句进行SQL注入
等攻击。
SQL注入
SQL注入即是指应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在应用程序中事先
定义好的SQL语句中添加额外的SQL语句。
脆弱代码：
public void risk(HttpServletRequest request, Connection c, org.apache.log4j.Logger logger) { 
String text = request.getParameter("text"); 
// 使用sql拼接导致sql注入 
String sql = "select * from tableName where columnName = '" + text + "'"; 
try { 
Statement s = c.createStatement(); 
s.executeQuery(sql); 
} catch (SQLException e) { 
logger.warn("Exception", e); 
} 
} 
解决方案：
public void fix(HttpServletRequest request, Connection c, org.apache.log4j.Logger logger) { 
String text = request.getParameter("text"); 
// 使用 PreparedStatement 预编译并使用占位符防止sql注入
String sql = "select * from tableName where columnName = ?"; 
try { 
PreparedStatement s = c.prepareStatement(sql); 
s.setString(1, text); 
s.executeQuery(); 
} catch (SQLException e) { 
logger.warn("Exception", e); 
} 
} 
接口对输入参数进行校验时，如不必要的特殊符号应一律禁止输入，以避免冷僻的sql注入攻击。
Mybatis安全编码规范
在 Mybatis 中除了极为特殊的情况，应禁止使用 $ 拼接sql。
所有 Mybatis 的实体bean对象字段都应使用包装类。
1.Mybatis 关键词like的安全编码
脆弱代码：
模糊查询like 
Select * from news where title like '%#{title}%' 
但由于这样写程序会报错，研发人员将SQL查询语句修改如下： 
Select * from news where title like '%${title}%' 
在这种情况下程序不再报错，但是此时产生了SQL语句拼接问题 
如果java代码层面没有对用户输入的内容做处理势必会产生SQL注入漏洞 
解决方案：
可使用 concat 函数解决SQL语句动态拼接的问题
select * from news where tile like concat('%', #{title}, '%') 
注意！对搜索的内容必须进行严格的逻辑校验： 
1）例如搜索用户手机号，应限制输入数据只能输入数字，防止出现搜索英文或中文的无效搜索 
2）mybatis预编译不会转义 % 符号，应阻止用户输入 % 符号以防止全表扫描 
3）输入数据长度和搜索频率应进行限制，防止恶意搜索导致的数据库拒绝服务 
2.Mybatis sql的in语句的安全编码
脆弱代码：
在对同条件多值查询的时候，如当用户输入1001,1002,1003…100N时，如果考虑安全编码规范问题，其对应的SQL语句如下： 
Select * from news where id in (#{id}) 
但由于这样写程序会报错，研发人员将SQL查询语句修改如下： 
Select * from news where id in (${id}) 
修改SQL语句之后，程序停止报错，但是却引入了SQL语句拼接的问题 
如果研发人员没有对用户输入的内容做过滤，势必会产生SQL注入漏洞 
解决方案：
可使用Mybatis自带循环指令解决SQL语句动态拼接的问题
select * from news where id in 
#{item} 
3.Mybatis 排序语句order by 的安全编码
脆弱代码：
当根据发布时间、点击量等信息进行排序的时候，如果考虑安全编码规范问题，其对应的SQL语句如下： 
Select * from news where title = '电力' order by #{time} asc 
但由于发布时间time不是用户输入的参数，无法使用预编译。研发人员将SQL查询语句修改如下： 
Select * from news where title = '电力' order by ${time} asc 