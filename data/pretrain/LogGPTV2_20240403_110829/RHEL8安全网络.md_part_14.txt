3.  检查是否重定向了端口：
    ``` literallayout
    # firewall-cmd --list-all
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#removing-a-redirected-port_port-forwarding}删除重定向的端口 {.title}
:::
这个步骤描述了如何删除重定向的端口。
::: orderedlist
**流程**
1.  要删除重定向的端口：
    ``` literallayout
    # firewall-cmd --remove-forward-port=port=port-number:proto=:toport=port-number:toaddr=
    ```
2.  要删除重定向到不同地址的转发端口：
    ::: orderedlist
    1.  删除转发的端口：
        ``` literallayout
        # firewall-cmd --remove-forward-port=port=port-number:proto=:toport=port-number:toaddr=
        ```
    2.  禁用伪装：
        ``` literallayout
        # firewall-cmd --remove-masquerade
        ```
    :::
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#removing-tcp-port-80-forwarded-to-port-88-on-the-same-machine_port-forwarding}在同一台机器上将 TCP 端口 80 转发到端口 88 {.title}
:::
这个步骤描述了如何删除端口重定向。
::: orderedlist
**流程**
1.  列出重定向的端口：
    ``` literallayout
    ~]# firewall-cmd --list-forward-ports
    port=80:proto=tcp:toport=88:toaddr=
    ```
2.  从防火墙中删除重定向的端口：
    ``` literallayout
    ~]# firewall-cmd  --remove-forward-port=port=80:proto=tcp:toport=88:toaddr=
    ```
3.  使新设置具有持久性：
    ``` literallayout
    ~]# firewall-cmd --runtime-to-permanent
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_securing-networks.html#managing-icmp-requests_using-and-configuring-firewalld}管理 ICMP 请求 {.title}
:::
`Internet 控制消息协议`{.literal}
(`ICMP`{.literal})是一种支持协议，供各种网络设备用来发送错误消息和表示连接问题的操作信息，例如，请求的服务不可用。`ICMP`{.literal}
与 TCP 和 UDP 等传输协议不同，因为它不用于在系统之间交换数据。
不幸的是，可以使用 `ICMP`{.literal} 消息（特别是
`echo-request`{.literal} 和 `echo-reply`{.literal}
）来揭示关于您网络的信息，并将这些信息滥用于各种欺诈活动。因此，`firewalld`{.literal}
允许阻止 `ICMP`{.literal} 请求，来保护您的网络信息。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#listing-and-blocking-icmp-requests_managing-icmp-requests}列出和阻塞 ICMP 请求 {.title}
:::
::: title
**列出 `ICMP`{.literal} 请求**
:::
位于 `/usr/lib/firewalld/icmptypes/`{.literal} 目录中的单独的 XML
文件描述了 `ICMP`{.literal}
请求。您可以阅读这些文件来查看请求的描述。`firewall-cmd`{.literal}
命令控制 `ICMP`{.literal} 请求操作。
::: itemizedlist
-   要列出所有可用的 `ICMP`{.literal} 类型：
    ``` literallayout
    # firewall-cmd --get-icmptypes
    ```
-   IPv4、IPv6 或这两种协议都可以使用 `ICMP`{.literal} 请求。要查看
    `ICMP`{.literal} 请求使用了哪种协议：
    ``` literallayout
    # firewall-cmd --info-icmptype=
    ```
-   如果请求当前被阻止了，则 `ICMP`{.literal} 请求的状态显示为
    `yes`{.literal} ，如果没有被阻止，则显示为 `no`{.literal}。查看
    `ICMP`{.literal} 请求当前是否被阻断了：
    ``` literallayout
    # firewall-cmd --query-icmp-block=
    ```
:::
::: title
**阻止或取消阻止 `ICMP`{.literal} 请求**
:::
当您的服务器阻止了 `ICMP`{.literal}
请求时，它不会提供任何通常会提供的信息。但这并不意味着根本不给出任何信息。客户端会收到特定的
`ICMP`{.literal} 请求被阻止（拒绝）的信息。应仔细考虑阻止
`ICMP`{.literal} 请求，因为它可能会导致通信问题，特别是与 IPv6
流量有关的通信问题。
::: itemizedlist
-   要查看 `ICMP`{.literal} 请求当前是否被阻断了：
    ``` literallayout
    # firewall-cmd --query-icmp-block=
    ```
-   要阻止 `ICMP`{.literal} 请求：
    ``` literallayout
    # firewall-cmd --add-icmp-block=
    ```
-   要删除 `ICMP`{.literal} 请求的块：
    ``` literallayout
    # firewall-cmd --remove-icmp-block=
    ```
:::
::: title
**在不提供任何信息的情况下阻塞 `ICMP`{.literal} 请求**
:::
通常，如果您阻止了 `ICMP`{.literal} 请求，客户端会知道您阻止了 ICMP
请求。这样潜在的攻击者仍然可以看到您的 IP
地址在线。要完全隐藏此信息，您必须丢弃所有 `ICMP`{.literal} 请求。
::: itemizedlist
-   要阻止和丢弃所有 `ICMP`{.literal} 请求：
-   将区的目标设为 `DROP`{.literal} ：
    ``` literallayout
    # firewall-cmd --permanent --set-target=DROP
    ```
:::
现在，除您明确允许的流量外，所有流量（包括 `ICMP`{.literal}
请求）都将被丢弃。
阻止和丢弃某些 `ICMP`{.literal} 请求，而允许其他的请求：
::: orderedlist
1.  将区的目标设为 `DROP`{.literal} ：
    ``` literallayout
    # firewall-cmd --permanent --set-target=DROP
    ```
2.  添加 ICMP block inversion 以一次阻止所有 `ICMP`{.literal} 请求：
    ``` literallayout
    # firewall-cmd --add-icmp-block-inversion
    ```
3.  为您要允许的 `ICMP`{.literal} 请求添加 ICMP 块：
    ``` literallayout
    # firewall-cmd --add-icmp-block=
    ```
4.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
:::
[*block inversion*]{.emphasis} 会颠倒 `ICMP`{.literal}
请求块的设置，因此所有之前没有被阻止的请求都会被阻止，因为区的目标变成了
`DROP`{.literal}。被阻断的请求不会被阻断。这意味着，如果您想要取消阻塞请求，则必须使用
blocking 命令。
将块 inversion 恢复到完全 permissive 设置：
::: orderedlist
1.  将区的目标设置为 `default`{.literal} 或 `ACCEPT`{.literal}:
    ``` literallayout
    # firewall-cmd --permanent --set-target=default
    ```
2.  删除 `ICMP`{.literal} 请求的所有添加的块：
    ``` literallayout
    # firewall-cmd --remove-icmp-block=
    ```
3.  删除 `ICMP`{.literal} block inversion：
    ``` literallayout
    # firewall-cmd --remove-icmp-block-inversion
    ```
4.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#configuring-the-icmp-filter-using-gui_managing-icmp-requests}使用 GUI 配置 ICMP 过滤器 {.title}
:::
::: itemizedlist
-   要启用或禁用 `ICMP`{.literal} 过滤器，请启动
    [**[firewall-config]{.application}**]{.strong}
    工具,并选择其消息要被过滤的网络区。选择 `ICMP Filter`{.literal}
    选项卡，再选中您要过滤的每种 `ICMP`{.literal}
    消息的复选框。清除复选框以禁用过滤器。这个设置按方向设置，默认允许所有操作。
-   若要编辑 `ICMP`{.literal} 类型，可启动
    [**[firewall-config]{.application}**]{.strong} 工具，然后从标记为
    `Configuration`{.literal} 的菜单中选择 `Permanent`{.literal}
    模式。在 [Services]{.guibutton} 窗口的底部会显示附加图标。选择
    [Yes]{.guibutton} 启用伪装并转发到另一台机器工作。
-   若要启用反向 `ICMP Filter`{.literal}，可点击右侧的
    `Invert Filter`{.literal} 复选框。现在只接受标记为 `ICMP`{.literal}
    的类型，所有其他的均被拒绝。在使用 DROP 目标的区域里它们会被丢弃。
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_securing-networks.html#setting-and-controlling-ip-sets-using-firewalld_using-and-configuring-firewalld}使用 `firewalld`{.literal} 设置和控制 IP 集 {.title}
:::
要查看 `firewalld`{.literal} 所支持的 IP 集设置类型列表，请以 root
用户身份输入以下命令。
``` screen
~]# firewall-cmd --get-ipset-types
hash:ip hash:ip,mark hash:ip,port hash:ip,port,ip hash:ip,port,net hash:mac hash:net hash:net,iface hash:net,net hash:net,port hash:net,port,net
```
::: section
::: titlepage
## []{#using-and-configuring-firewalld_securing-networks.html#configuring-ip-set-options-using-cli_setting-and-controlling-ip-sets-using-firewalld}使用 CLI 配置 IP 设置选项 {.title}
:::
IP 集可以在 `firewalld`{.literal} 区中用作源，也可以用作富规则中的源。在
Red Hat Enterprise Linux 中，首选的方法是在直接规则中使用
`firewalld`{.literal} 创建的 IP 集。
::: itemizedlist
-   要列出 permanent 环境中 `firewalld`{.literal} 已知的 IP 集，请以
    `root`{.literal} 用户身份运行以下命令：
    ``` literallayout
    # firewall-cmd --permanent --get-ipsets
    ```
-   要添加新的 IP 集，请以 `root`{.literal} 用户身份使用 permanent
    环境来运行以下命令：
    ``` literallayout
    # firewall-cmd --permanent --new-ipset=test --type=hash:net
    success
    ```
    上述命令为 `IPv4`{.literal} 创建了一个名为 [*test*]{.emphasis} ，
    类型为 `hash:net`{.literal} 的新的 IP 集。要创建用于
    `IPv6`{.literal} 的 IP 集，请添加 `--option=family=inet6`{.literal}
    选项。要使新设置在运行时环境中有效，请重新加载
    `firewalld`{.literal}。
-   使用以下命令，以 `root`{.literal} 用户身份列出新的 IP 集：
    ``` screen
    # firewall-cmd --permanent --get-ipsets
    test
    ```
-   要获取有关 IP 集的更多信息，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --info-ipset=test
    test
    type: hash:net
    options:
    entries:
    ```
    请注意，IP 集目前没有任何条目。
-   要在 [*test*]{.emphasis} IP 集中添加一个条目，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --add-entry=192.168.0.1
    success
    ```
    前面的命令将 IP 地址 [*192.168.0.1*]{.emphasis} 添加到 IP 集合中。
-   要获取 IP 集中的当前条目列表，请以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --get-entries
    192.168.0.1
    ```
-   生成包含 IP 地址列表的文件，例如：
    ``` screen
    # cat > iplist.txt <<EOL
    192.168.0.2
    192.168.0.3
    192.168.1.0/24
    192.168.2.254
    EOL