### Directory Descriptions

#### userContent
This directory is designated for custom content that you wish to add to your Jenkins server. You can access the files in this directory via the following URLs:
- `http://myserver/hudson/userContent` (if Jenkins is running on an application server)
- `http://myserver/userContent` (if Jenkins is running in standalone mode)

#### users
If you are utilizing the native Jenkins user database, user accounts will be stored in this directory.

#### war
This directory contains the expanded web application. When you start Jenkins as a standalone application, it will extract the web application into this directory.

### The Jenkins Home Directory
The jobs directory is a critical component of the Jenkins directory structure and merits further discussion. An example of a real Jenkins jobs directory is shown in Figure 3.8, "The Jenkins jobs directory."

#### Jobs Directory
This directory includes a subdirectory for each Jenkins build job managed by the instance. Each job directory, in turn, contains two subdirectories: `builds` and `workspace`, along with other files. Notably, it includes the `config.xml` file, which holds the configuration details for the build job. Additionally, there are internal files such as `nextBuildNumber` (which tracks the next build number) and symbolic links to the most recent successful and stable builds.

- **Successful Build**: A build without any compilation errors.
- **Stable Build**: A successful build that has passed all configured quality criteria, such as unit tests and code coverage.

#### Workspace Directory
The workspace directory is where Jenkins builds your project. It contains the source code checked out by Jenkins and any files generated during the build. This directory is reused for each successive build, and its disk space requirements tend to be relatively stable.

#### Builds Directory
The builds directory maintains a history of executed builds. While direct intervention in these directories is rare, understanding their contents can be beneficial. An example of the builds directory is shown in Figure 3.9, "The builds directory," where three builds have been performed.

Jenkins stores build history and artifacts in directories labeled with timestamps (e.g., "2010-03-12_20-42-05"). Symbolic links with actual build numbers point to these build history directories.

Each build directory contains:
- **Build Result Log File**
- **Subversion Revision Number** (if using Subversion)
- **Changes Triggering the Build**
- **Other Data and Metrics** (e.g., unit test results, code coverage metrics)
- **Artifacts** (e.g., binary artifacts, Javadoc, code coverage metrics)

The size of the build directory will grow over time as build history accumulates. Consider this when designing your build server's directory structure, especially if your server uses multiple disk partitions. Limiting the number of stored builds can help manage disk space while retaining useful build statistics.

### Backing Up Your Jenkins Data
Regularly backing up your Jenkins data is crucial, particularly the Jenkins home directory, which contains server configuration details, build artifacts, and build histories. This directory should be backed up frequently and automatically. The Jenkins executable itself is less critical, as it can be reinstalled without affecting your build environment.

### Upgrading Your Jenkins Installation
Upgrading Jenkins is straightforward:
1. Replace the local `jenkins.war` file.
2. Restart Jenkins, ensuring no builds are running.

Since build environment configuration, plugins, and build history are stored in the Jenkins home directory, upgrading the executable will not impact your installation. You can check the current version in the bottom right corner of every screen.

For installations using Linux packages, Jenkins can be upgraded using the same process as other system packages. If running Jenkins as a standalone instance, you can also upgrade directly from the web interface in the Manage Jenkins section.

If running Jenkins on an application server like Tomcat or JBoss, remove compiled JSP pages in the `CATALINA_BASE/work` directory to prevent stale pages from being served.

Plugins can be upgraded independently using the Jenkins Plugin Manager. We will discuss plugins in more detail later in the book.

### Conclusion
In this chapter, we covered how to install and run Jenkins in different environments and provided basic maintenance tips. Jenkins is easy to install both as a standalone application and as a WAR file deployed to an existing application server. Key considerations for a build server include CPU, memory, and disk space.

### Chapter 4: Configuring Your Jenkins Server

#### Introduction
Before creating build jobs in Jenkins, some configuration is necessary to ensure smooth operation in your environment. Jenkins is highly configurable, and although most options have sensible defaults, it is important to understand your build server's setup.

#### The Configuration Dashboardâ€”The Manage Jenkins Screen
The Manage Jenkins screen (Figure 4.1, "You configure your Jenkins installation in the Manage Jenkins screen") is the central hub for system configuration. This screen changes based on installed plugins.

Key configuration options include:
- **Configure System**: Manage paths to tools like JDKs, Ant, Maven, security settings, email servers, and system-wide configurations.
- **Reload Configuration from Disk**: Reload system and build job configurations, useful for migrations and archiving.
- **Manage Plugins**: Install, update, and remove plugins.
- **System Information**: Display Java system properties and environment variables for troubleshooting.
- **System Log**: View Jenkins log files in real-time.
- **Load Statistics**: Track server load and build queue length.
- **Script Console**: Run Groovy scripts for advanced troubleshooting.
- **Manage Nodes**: Configure parallel and distributed builds.
- **Prepare for Shutdown**: Prevent new builds and allow clean shutdown.

#### Configuring the System Environment
The Configure System screen (Figure 4.2, "System configuration in Jenkins") is essential for setting up fundamental tools and parameters. It includes sections for general system-wide parameters and external tools.

- **Jenkins Home Directory**: Displayed for reference; can be changed using the `JENKINS_HOME` environment variable.
- **System Message**: Customizable text displayed at the top of the Jenkins home page.
- **Quiet Period**: Useful for SCM tools like CVS to ensure a stable repository state before triggering a build.
- **User Accounts and Security**: Manage user accounts and enable security features.

#### Configuring Global Properties
The Global Properties section (Figure 4.3, "Configuring environment variables in Jenkins") allows you to define centrally managed variables for use in all build jobs. These variables can be used in build scripts, but avoid using periods in property names.

#### Configuring Your JDKs
Jenkins provides excellent support for multiple JVMs. In the Configure System screen, you can manage JDK installations by providing a name and the path to the JDK. This ensures that your applications are built using the appropriate Java version, matching your production environment.

By configuring these settings, you can ensure that your Jenkins server is well-tuned to your specific needs and operates efficiently.