# 前言
当我们通过各种方法拿到一个服务器的权限的时候，我们下一步要做的就是`后渗透`了，而后门持久化也是我们后渗透很重要的一部分，下面我来总结一下`windows`下常见的后门持久化的方法
# 后门持久化
我的操作环境是：
  1. 无AV、管理员权限（提权、免杀等是后门持久化的铺垫，当然有的方法也并不是全部需要这些铺垫）
  2. 操作系统：`win7`，`windows server 2008R2`，`xp`
## shift后门
这个是比较老的方式了，这里简单讲一下，在windows中有一些辅助功能，能在用户未登录系统之前可以通过组合键来启动它，类似的辅助功能有：
  1. `C:\Windows\System32\sethc.exe` 粘滞键，启动快捷键：按五次shift键
  2. `C:\Windows\System32\utilman.exe` 设置中心，启动快捷键：Windows+U键
在低版本的windows中，我们可以直接把`setch.exe`替换成我们的后门程序，下面我们把`setch.exe`替换为`cmd.exe`
## 映像劫持
这个和shift后门差不多，只不过在低版本的windows中，我们可以简单地替换程序，但是在高版本的windows版本中替换的文件受到了系统的保护，所以这里我们要使用另外一个知识点：映像劫持。
"映像劫持"，也被称为"IFEO"（Image File Execution Options）
    就是Image File Execution Options（其实应该称为"image Hijack"。）是为一些在默认系统环境中运行时可能引发错误的程序执行体提供特殊的环境设定。由于这个项主要是用来调试程序用的，对一般用户意义不大。默认是只有管理员和local system有权读写修改。
    PS：来自百度百科
简单来说就是当目标程序被映像劫持时，当我们启动目标程序时，启动的是劫持后的程序而不是原来的程序
操作也很简单，在注册表的`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Image File Execution
Option`下添加一个项`sethc.exe`，然后在`sethc.exe`这个项中添加`debugger`键，键值为我们恶意程序的路径，如下图
效果如下
## 注册表自启动项
`MSF`的`Persistence`模块利用的就是写注册表自启动项来实现的，一般自启动项是这两个键：`Run`和`RunOnce`，两者的区别如下
  1. Run：该项下的键值即为开机启动项，每一次随着开机而启动。
  2. RunOnce：RunOnce和Run差不多，唯一的区别就是RunOnce的键值只作用一次，执行完毕后就会自动删除
常见注册表启动项键的位置：
用户级
    \HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
    \HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce
系统级
    \HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
    \HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce
    \HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run
    \HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\RunOnce
修改一下：  
执行结果：  
## 定时任务
windows下定时任务的命令有两个分别是：`at`和`schtasks`，他们两者主要区别是`at`命令在`win7`、`08`等高版本的windows中是不能将任务在前台执行的，也就是只会打开一个后台进程，而`schtasks`是将定时的任务在前台执行，下面我们逐个看看
`at`的一些参数
    AT [\\computername] time [/INTERACTIVE]
        [ /EVERY:date[,...] | /NEXT:date[,...]] "command"
`at`的执行如下：  
`schtasks`一些参数：
    schtasks /create /tn TaskName /tr TaskRun /sc schedule [/mo modifier] [/d day] [/m month[,month...] [/i IdleTime] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru {[Domain\]User | "System"} [/rp Password]] /?
`schtasks`的执行如下：  
## 用户登陆初始化
`Userinit`的作用是用户在进行登陆初始化设置时，`WinLogon`进程会执行指定的`login
scripts`，所以我们可以修改它的键值来添加我们要执行的程序
注册表路径为：`HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Winlogon\Userinit`，我们添加一个我们启动的程序，多个程序用逗号隔开
效果如下：
## Logon Scripts
`Logon Scripts`优先于av先执行，我们可以利用这一点来绕过av的敏感操作拦截
注册表路径为：`HKEY_CURRENT_USER\Environment`，创建一个键为：`UserInitMprLogonScript`，其键值为我们要启动的程序路径
效果如下：  
## 屏幕保护程序
在对方开启屏幕保护的情况下，我们可以修改屏保程序为我们的恶意程序从而达到后门持久化的目的  
其中屏幕保护的配置存储在注册表中，其位置为：`HKEY_CURRENT_USER\Control Panel\Desktop`，关键键值如下：
  1. `SCRNSAVE.EXE` \- 默认屏幕保护程序，我们可以把这个键值改为我们的恶意程序
  2. `ScreenSaveActive` \- 1表示屏幕保护是启动状态，0表示表示屏幕保护是关闭状态
  3. `ScreenSaverTimeout` \- 指定屏幕保护程序启动前系统的空闲事件，单位为秒，默认为900（15分钟）
设置如下：  
效果图：
## 自启动服务
自启动服务一般是在电脑启动后在后台加载指定的服务程序，我们可以将`exe`文件注册为服务，也可以将`dll`文件注册为服务
为了方便起见我们可以直接用`Metasploit`来注册一个服务
    meterpreter > run metsvc -A
运行之后msf会在`%TMP%`目录下创建一个随机名称的文件夹，然后在该文件夹里面生成三个文件：`metsvc.dll`、`metsvc-server.exe`、`metsvc.exe`
同时会新建一个服务，其显示名称为`Meterpreter`，服务名称为`metsvc`，启动类型为"自动"，默认绑定在31337端口。
如果想删除服务，可以执行
    meterpreter > run metsvc -r
## 影子用户
影子用户顾名思义就是一个隐藏用户，只能通过注册表查看这个用户，其它方式是找不到这个用户的信息的
在用户名后面加一个`$`可以创建一个匿名用户，创建完毕后我们再把这个用户添加到administrator组
    net user test$ test /add
    net localgroup administrators test$ /add
可以看到`net user`是看不到我们创建的用户，但是计算机管理-用户和组中可以看到
所以这时候我们就需要修改一下注册表，其键位置为：`HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users`
注意：`SAM`键值默认是只能`system`权限修改的，所以我们要修改一下`SAM`键的权限，给予`administrator`完全控制和读取的权限
然后我们将`administrator`用户对应的项中的F值复制到`test$`对应xiang中的F值，然后保存
然后我们将`test$`删除掉
    net user test$ /del
然后再双击导出的注册表文件，然后我们再看一下
`net user`和计算机管理-用户和组中都查看不到用户了，但是我们可以用`net user test$`查看用户信息
这个时候我们再用`net user test$ /del`是删除不掉这个用户的，只能通过注册表来删除。
## waitfor
关于`waitfor`手册中是这么解释的：
    在系统上发送或等待信号。waitfor可用于跨网络同步计算机。
`waitfor`的语法
    waitfor [/s  [/u [\] [/p []]]] /si 
    waitfor [/t ] 
参数解释：
    /s   指定远程计算机的名称或IP地址，默认为本地计算机
    /u []    使用指定用户帐户的凭据运行脚本。默认是使用当前用户的凭据。
    /p   指定/u参数中指定的用户帐户的密码。
    /si            发送指定激活信号。
    /t             指定等待信号的秒数。默认为无限期等待。 
        指定等待或发送的信号，不区分大小写，长度不能超过225个字符
关于`waitfor`更多的信息可以看一下微软提供的手册：[链接](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/waitfor "链接")
我们来测试一下看看
    waitfor test && calc 表示接收信号成功后执行计算器
    waitfor /s 192.168.163.143 /u qiyou /p qiyou /si test
结果如下  
但是这样只能执行一次，这对我们后门持久化很不利，所以我们得想办法让它持久化。
这里就要借用一下三好师傅的`powershell`脚本：[链接](https://github.com/3gstudent/Waitfor-Persistence/blob/master/Waitfor-Persistence.ps1
"链接")，三好师傅的分析：[链接](https://3gstudent.github.io/3gstudent.github.io/Use-Waitfor.exe-to-maintain-persistence/ "链接")
执行效果如下：
该方法的优点就是能主动激活，但是缺点也明显就是只能在同一网段才能接收和发送激活信号、服务器重启之后就不行了。
## CLR
CLR的简述（来自百度百科）
    CLR(公共语言运行库,Common Language Runtime)和Java虚拟机一样也是一个运行时环境，是一个可由多种编程语言使用的运行环境。CLR的核心功能包括：内存管理、程序集加载、安全性、异常处理和线程同步，可由面向CLR的所有语言使用。并保证应用和底层操作系统之间必要的分离。CLR是.NET Framework的主要执行引擎。
需要注意的是`CLR`能够劫持系统中全部`.net`程序，而且系统默认会调用`.net`程序，从而导致我们的后门自动触发，这是我们后门持久化的一个好的思路，下面来实现一下
修改一下注册表，注册表路径：`HKEY_CURRENT_USER\Software\Classes\CLSID\`，新建子项`{11111111-1111-1111-1111-111111111111}`（名字随便，只要不与注册表中存在的名称冲突就行），然后再新建子项`InProcServer32`，新建一个键`ThreadingModel`，键值为：`Apartment`，默认的键值为我们`dll`的路径
然后在cmd下设置一下：  
**PS：要注册为全局变量，不然只能在当前cmd窗口劫持.net程序**
    SETX COR_ENABLE_PROFILING=1 /M
    SETX COR_PROFILER={11111111-1111-1111-1111-111111111111} /M
然后执行一波，效果如下，可以看到已经成功劫持了  
## Hijack CAccPropServicesClass and MMDeviceEnumerator
什么是`COM`（来自`WIKI`）
    组件对象模型（英语：Component Object Model，缩写COM）是微软的一套软件组件的二进制接口标准。这使得跨编程语言的进程间通信、动态对象创建成为可能。COM是多项微软技术与框架的基础，包括OLE、OLE自动化、ActiveX、COM+、DCOM、Windows shell、DirectX、Windows Runtime。
这个和`CRL`劫持`.NET`程序类似，也是通过修改`CLSID`下的注册表键值，实现对`CAccPropServicesClass`和`MMDeviceEnumerator`的劫持，而系统很多正常程序启动时需要调用这两个实例，所以这个很适合我们的后门持久化。
经测试貌似64位系统下不行（或许是我姿势的问题），但是32位系统下可以，下面说一下32位系统利用方法：
在`%APPDATA%\Microsoft\Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}\`下放入我们的后门`dll`，重命名为`test._dl`
PS：如果`Installer`文件夹不存在，则依次创建`Installer\{BCDE0395-E52F-467C-8E3D-C4579291692E}`