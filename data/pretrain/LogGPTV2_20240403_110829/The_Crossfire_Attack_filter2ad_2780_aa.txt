title:The Crossfire Attack
author:Min Suk Kang and
Soo Bum Lee and
Virgil D. Gligor
2013 IEEE Symposium on Security and Privacy
The Crossﬁre Attack
Min Suk Kang
ECE Department and CyLab
Carnegie Mellon University
Email: PI:EMAIL
Soo Bum Lee
CyLab
Carnegie Mellon University
Email: PI:EMAIL
Virgil D. Gligor
ECE Department and CyLab
Carnegie Mellon University
Email: PI:EMAIL
Abstract—We present the Crossﬁre attack – a powerful
attack that degrades and often cuts off network connections to a
variety of selected server targets (e.g., servers of an enterprise,
a city, a state, or a small country) by ﬂooding only a few
network links. In Crossﬁre, a small set of bots directs low-
intensity ﬂows to a large number of publicly accessible servers.
The concentration of these ﬂows on the small set of carefully
chosen links ﬂoods these links and effectively disconnects
selected target servers from the Internet. The sources of the
Crossﬁre attack are undetectable by any targeted servers, since
they no longer receive any messages, and by network routers,
since they receive only low-intensity, individual ﬂows that are
indistinguishable from legitimate ﬂows. The attack persistence
can be extended virtually indeﬁnitely by changing the set of
bots, publicly accessible servers, and target links while main-
taining the same disconnection targets. We demonstrate the
attack feasibility using Internet experiments, show its effects
on a variety of chosen targets (e.g., servers of universities, US
states, East and West Coasts of the US), and explore several
countermeasures.
I. INTRODUCTION
Botnet-driven distributed denial-of-service (DDoS) at-
tacks which ﬂood selected Internet servers have been known
for some time [1, 2, 3, 4]. In contrast, link-ﬂooding attacks
that effectively disconnect chosen Internet servers have been
uncommon, possibly because of the complexity of selective
server targeting. Instead, most of these attacks cause route
instabilities [5] and Internet connectivity disruption [6, 7]
rather than selective end-server disconnection (reviewed in
Section VII). Nevertheless, when the aim of an attack is
to cut off critical infrastructure (e.g., energy distribution,
time-critical ﬁnance, command and control services) from
the Internet, link ﬂooding can be extremely effective; e.g.,
current peak rates of a single botnet-driven attack can easily
exceed 100 Gbps [8], making it possible to ﬂood the vast
majority of Internet links.
Link ﬂooding by botnets cannot be easily countered by
any of the current Internet defense methods for three reasons.
First, bots can use valid IP addresses, and thus defenses
based on detecting or preventing use of spoofed IP addresses
become irrelevant; e.g., defenses based on ingress ﬁlter-
ing [9], capability systems [10, 11], or accountable protocol
designs [12, 13]. Second, and more insidiously, botnets can
ﬂood links without using unwanted trafﬁc; e.g., they can
send packets to each other in a way that targets groups of
routers [7]. Third, a botnet can launch an attack with low-
intensity trafﬁc ﬂows that cross a targeted link at roughly the
same time and ﬂood it; e.g., a botnet controller could com-
pute a large set of IP addresses whose advertised routes cross
the same link (i.e., decoy IPs), and then direct its bots to
send low-intensity trafﬁc towards those addresses. This type
of attack, which we call the Crossﬁre attack1 and describe in
this paper, is undetectable by any server located at a decoy
IP address, and its effects are invisible to an ISP until (too)
late2. Furthermore, current
trafﬁc engineering techniques
are unable to counter these attacks. The latency of ofﬂine
trafﬁc engineering is impractically high (e.g., hours and
days [15, 16]) whereas online trafﬁc engineering techniques
cannot offer strong stability guarantees [17], particularly
when multiple ISPs need to coordinate their responses to
counter an attack, and hence cannot be deployed in the
Internet backbone. Worse yet, even if online techniques
could be deployed, an adversary attack could change the
set of target links in real time thereby circumventing online
trafﬁc engineering defenses; viz., discussion in Section IV.
In this paper, we present the Crossﬁre attack. This attack
can effectively cut off the Internet connections of a targeted
enterprise (e.g., a university campus, a military base, a set
of energy distribution stations); it can also disable up to
53% of the total number of Internet connections of some
US states, and up to about 33% of all the connections of
the West Coast of the US. The attack has the hallmarks of
Internet terrorism3: it is low cost using legitimate-looking
means (e.g., low-intensity, protocol conforming trafﬁc); its
locus cannot be anticipated and it cannot be detected until
substantial, persistent damage is done; and most importantly,
it is indirect: the immediate target of the attack (i.e., selected
Internet links) is not necessarily the intended victim (i.e., an
end-point enterprise, state, region, or small country). The
low cost of the attack (viz., Section IV), would also enable
1This attack should not be confused with that of Chou et al. [14], which
also uses the term “crossﬁre” for a different purpose; i.e., to illustrate
unintentionally dropped legitimate ﬂows.
2Of course, an adversary could easily change the set of bots used in the
attack; e.g., typical networks of 1M bots would allow one hundred disjoint,
and a very large number of different sets of 10K bots.
3Although common agreement on a general deﬁnition of terrorism does
not exist, the means of attack suggested here are common to most terrorist
attacks in real life.
1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.19
127
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:31 UTC from IEEE Xplore.  Restrictions apply. 
a perpetrator to blackmail the victim.
The main contributions of this paper can be summarized
as follows:
1) We introduce the Crossﬁre attack in the Internet and
show how it can isolate a target area by ﬂooding care-
fully chosen links. In particular, we show that it requires
relatively small botnets (e.g.,
ten thousand bots) and is
largely independent of the bot distribution. It has no effective
countermeasure at either target routers or end-point servers,
and as a result, it can degrade and even cut off connections
to selected Internet areas ranging from a single organization
to several US states, for a long time.
2) We show the feasibility of the Crossﬁre attack with
data obtained from large-scale experiments. In particular,
our analysis of Internet trafﬁc to targets shows that very
few carefully chosen links are responsible for delivering the
vast majority of all trafﬁc to a speciﬁc area, a fact which
makes this attack fairly easy to launch. Trafﬁc concentration
in a small set of links located a few (e.g., three to four)
hops away from a targeted area is intuitively attributable to
the shortest path routing by the Internet IGP/BGP protocols,
and easily discoverable by common tools such as traceroute.
We show that the attack trafﬁc on these links follows a
power-law distribution that depends on the targeted servers
and cannot be anticipated by generic Internet-connectivity
metrics; e.g., metrics based on router connectivity [18, 19]
or betweenness centrality [20].
3) We show that the Crossﬁre attack is persistent in the
sense that it cannot be stopped either by individual ISPs or
by end-point servers, which are effectively disconnected by
ﬂooded links at least three hops away, for a long time. Attack
persistence is caused by three independent factors. First, the
selected attack routes become stable after the removal of
all load balancing dynamics (which is consistent with prior
observations [21]). Second, the attack trafﬁc is shaped such
that (i) only a data plane of a link is ﬂooded while the
control plane remains unaffected, and hence dynamic re-
routing can be initiated only after data-plane ﬂood detection,
which gives an adversary ample time to select alternate sets
of links for the same target area; and (ii) early congestion
of links located upstream from a targeted link is avoided by
a priori estimation of the bandwidth available on the route
to that link. Third, the availability of multiple, disjoint sets
of target links distributed across multiple ISPs implies that
no single ISP can unilaterally detect and handle this attack.
4) We argue that collaborative on-line, rather than ofﬂine,
trafﬁc engineering techniques would become necessary to
reduce the persistence of such attacks. In the absence of
such measures, the Crossﬁre attack must be handled by
application protocol layers; e.g., overlays that detect effec-
tive host disconnection from the Internet and re-route trafﬁc
via different host routes [22, 23]. Botnet market disruption
and international prosecution of attack perpetrators may
complement technical countermeasures against these attacks.
Figure 1: The Elements of the Crossﬁre Attack

II. THE CROSSFIRE ATTACK
In this section, we present the steps of the Crossﬁre attack.
The adversary’s goal is to prevent legitimate trafﬁc from
ﬂowing into a speciﬁc geographic region of the Internet,
and the capability she needs to accomplish that goal is to
ﬂood a few network links in and around that region. We
begin by deﬁning the two most common terms used in this
paper: the target area and target link. Then, we describe how
an adversary designs an attack using the bots she controls.
Fig. 1 illustrates the concept of the Crossﬁre attack.
Target Area: A target area is a geographic region of the
Internet against which an adversary launches an attack;4 viz.,
the area enclosed by the circle in Fig. 1. A typical target
area includes the servers of an organization, a city, a state,
a region, and even a country, of the adversary’s choice.
Target Link: A target link is an element of a set of network
links the adversary needs to ﬂood so that the target area is
cut off from the rest of the Internet. These carefully chosen
network links are the actual target of the ﬂooding attack
whereas the target area is the real, intended target.
To launch a Crossﬁre attack against a target area, an
adversary selects a set of public servers within the target
area and a set of decoy servers surrounding the target area.
These servers can be easily found since they are chosen
from publicly accessible servers (viz., Section V-B). The set
of public servers is used to construct an attack topology
centered at the target area, and the set of decoy servers is
used to create attack ﬂows. Then, the adversary constructs
a “link map”, namely the map of layer-3 links from her bot
4The attack may have side effects and affect other non-targeted areas.
However, these side effects do not increase attack’s detectability. They can
be a desired feature whenever the adversary’s goal is to cut off most of the
trafﬁc at and around a target area, rather than to surgically isolate a small
number of speciﬁc servers.
128
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:31 UTC from IEEE Xplore.  Restrictions apply. 
addresses to those of the public servers. (The differences
between a link map and a typical router-topology map are
discussed below.) Once the link map is created, the adversary
uses it to select the best target links whose ﬂooding will
effectively cut off the target area from the Internet. Next,
the adversary coordinates the bot-decoy (server) ﬂows to
ﬂood the target links, which would eventually block most
of the ﬂows destined to the target area. This can be easily
done since target links are shared by ﬂows to the decoy
servers and target area. Finally, the adversary selects multiple
disjoint sets of target links for the same target area and ﬂoods
them one set at a time, in succession, to avoid triggering bot-
server route changes. The three main steps needed to launch
the Crossﬁre attack consist of the link map construction,
attack setup, and bot coordination, as shown in Fig. 2. Note
that, to extend the duration of the attack, the last step,
namely the bot coordination step, is executed repeatedly by
dynamically changing the sets of target links, which we will
explain in detail in Section II-D. We describe each of the
adversary’s steps below.
A. Link Map Construction
To ﬂood links leading to a target area, an adversary needs
to construct a link map of the Internet surrounding that area.
1) Traceroute from Bots to Servers:
To construct the link map, the adversary instructs her bots
to run traceroute and ﬁnd all the router-level routes to the
public servers in the target area and the decoy servers. The
result of a traceroute is a sequence of IP addresses that are
assigned to the interfaces of the routers on the route, where
a link is identiﬁed by the IP address of the adjacent router’s
interface. Thus, the sequence of IP addresses represents the
sequence of layer-3 links5 that the attack trafﬁc would travel.
A link map for the Crossﬁre attack is different from a typ-
ical router-topology map [18] that attempts to build a router-
level connectivity to analyze topological characteristics (e.g.,
node degree). This attack only needs the list of layer-3 links
and their relationships to compute a set of target links on
the bot-to-target area routes, while each link’s membership
to a speciﬁc router is irrelevant. Note that the link map
construction does not require IP alias resolution [24]; i.e.,
determining the set of IP interfaces owned by the same router
is unnecessary. As a consequence, an adversary can use the
ordinary traceroute for the link map construction regardless
of how inaccurate its IP alias resolution may be [25].
A bot runs multiple traceroutes to the same server in order
to determine the stability and multiplicity (or diversity) of a
route, both of which are used for selecting effective target
links (discussed in Section V-D in detail). The traceroute
5Although a single layer-3 link consists of several lower layer connec-
tions that are invisible to the adversary, the ﬂooding on the layer-3 link
is still effective whenever the adversary’s maximum bandwidth assumption
(e.g., 40 Gbps in our experiments) is correct along the layer-3 link.
$GYHUVDU\
%RWV
7UDFH'DWD
traceroute
ᬅᬅᬅᬅ
ᬆᬆᬆᬆ
traceroute
,QWHUQHW
3XEOLF
VHUYHUV
$
'HFR\VHUYHUV
7DUJHW$UHD
/LQN0DS&RQVWUXFWLRQ
ᬅᬅᬅᬅ 7UDFHURXWH%RWVĺ6HUYHUV
ᬆᬆᬆᬆ /LQN3HUVLVWHQFH
$GYHUVDU\
%RWV
/LQNPDS
ᬅᬅᬅᬅ
)ORZGHQVLW\
,QWHUQHW
ᬆᬆᬆᬆ
7DUJHW/LQNV
3XEOLF
VHUYHUV
'HFR\VHUYHUV
7DUJHW$UHD
%
$WWDFN6HWXS
ᬅᬅᬅᬅ )ORZ'HQVLW\&RPSXWDWLRQ
ᬆᬆᬆᬆ 7DUJHW/LQN6HOHFWLRQ
$GYHUVDU\
ᬅᬅᬅᬅ
&RPPDQGV
%RWV
$WWDFN )ORZV
ᬆᬆᬆᬆ
3XEOLF
VHUYHUV
'HFR\VHUYHUV
7DUJHW$UHD
,QWHUQHW
&
%RW&RRUGLQDWLRQ
ᬅᬅᬅᬅ $WWDFN)ORZ$VVLJQPHQW
ᬆᬆᬆᬆ 7DUJHW/LQN)ORRGLQJ

Figure 2: The steps of the Crossﬁre attack.
results are collected by the adversary and used to construct
the link map.
2) Link-Persistence:
The link map obtained in the previous step cannot be
directly used to ﬁnd target links since some of the routes
obtained may be unstable. Unstable routes would complicate
the attack since the adversary may end up chasing a moving
target. Route instability is primarily caused by ISPs’ load
balancing processes (i.e., forwarding trafﬁc through multiple
routes), which are supported by most commercial routers
[26]. A consequence of load balancing is that, for the
same bot-to-server pair, some links do not always appear
on the trace of the route produced by multiple invocations
129
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:31 UTC from IEEE Xplore.  Restrictions apply. 
of traceroute (viz., the arrowed links of step A-② in Fig.
2). These links are said to be transient, whereas those that
always appear on a route are said to be persistent. The
adversary identiﬁes transient links and removes them from
the set of potential target links. Our Internet experiment
shows that 72% of layer-3 links measured by traceroute are