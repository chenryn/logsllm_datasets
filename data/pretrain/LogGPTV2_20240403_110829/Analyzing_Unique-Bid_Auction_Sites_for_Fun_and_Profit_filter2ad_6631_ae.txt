# Optimized Text

## 5.4 Simulations with Winning Strategies
We conducted 50 simulations using the parameters outlined in Table 3. When a user employed the "Catch All Non-Disqualified Bids" strategy with \( n = 3 \), they won every single auction, with an average expense of £170.45 and an average profit of £129.55. Switching to the "Bid Block" strategy resulted in a 93% win rate, with an average expense of £163.51 and an average profit of £118.12. The "Catch All Non-Disqualified Bids" strategy is more conservative, minimizing the chances of other bidders, thus incurring higher expenses but ensuring a perfect win probability. The simpler "Bid Block" strategy spends slightly less but occasionally loses the auction, leading to a lower overall profit. We did not simulate the intermediate "Disqualifying First Places" strategy after observing the effectiveness of the "Bid Block" strategy.

## 6 Live Experiments with a Real Site

### 6.1 Background
Given the impressive performance of our strategies in simulations, we decided to test them in a real-world setting. We targeted one of the largest HUBA (Highest Unique Bid Auction) sites in the UK. This site runs bid-credit auctions where the winner receives £50 worth of credits. The maximum bid is £5, each bid costs £1, and the bids quota is 500. Each auction provides 4 free bids and 5 half-price bids, which cost only £0.5. The auction duration is up to 24 hours, and if the quota is not met, the site typically removes the quota restriction. The site publishes the Q (Qualified) and DQ (Disqualified) tables, but the internal ordering of the disqualified bid groups is not provided.

### 6.2 Reverse-Engineering the Protocol
The bidding process occurs within the bidder's browser. To replace the limited client running in the browser with our own agent, we needed to generate requests that conform to the server's expected protocol. Understanding the client-server communication protocol was essential, especially since SSL encryption is common on Internet auction sites, making simple sniffing insufficient. We used the HTTPFox plugin for Firefox to inspect all communication at the application level. This revealed a straightforward POST request with the bid value encoded in its fields. An HTTP header cookie received during the login phase identifies the bidder. The response to the POST request includes the signal.

During this inspection, we discovered a common flaw: while bid submission uses an encrypted channel, the sampling of the current auction's state and positional table data is transmitted over a non-encrypted channel, likely to reduce server load. This means that if a player can eavesdrop on outgoing traffic, they can see all the bids of other players who are currently viewing the site.

### 6.3 Results
We participated in 14 bid-credit auctions, using our "Bid Block" strategy, which is parameter-free and robust. Our Python script, based on Appendix B.3 with added protocol handling, won 13 out of these auctions, accumulating £650. In the first auction, we risked some money, which we recovered as bid credits from our winnings. For subsequent auctions, we used the credits we had won.

With these winnings, we also tested our strategy in two other types of auctions:
1. **SanDisk Clip**: An MP3 player worth £32. The maximum bid is £5, each bid costs £0.5, and the bids quota is 300. Each player gets 4 free bids and 5 half-priced bids.
2. **Amazon Kindle Fire**: A low-end fourth-generation Kindle reader worth £80. The maximum bid is £12, each bid costs £1, and the bids quota is 700. Each player gets 10 half-priced bids.

We won all 3 SanDisk Clip auctions and 4 out of 5 Kindle devices, adding £416 to our winnings. Since our goal was to test the practicality of the strategies, we did not claim the goods and let all our bid-credits expire.

### 6.4 Ethical Considerations
Conducting live experiments with unique-bid auctions affects both the site owner and auction participants. By not collecting the prizes, we ensured that the auction owner was not financially harmed and, in fact, increased their profits. Even without abandoning the winnings, our experiments would not have caused immediate monetary loss to the site, as all our bids were properly paid for. However, an automated strategy with a high win probability may undermine the perception of fairness in the auctions.

Our experiments did impact other bidders by lowering their individual chances of winning, which could be quantified as a monetary loss of a few pounds per auction for heavy bidders. At the time of our experiments in July 2011, the site's Terms of Service (ToS) did not prohibit automated bidding. After our work, the site updated the ToS to explicitly forbid automated bidding. Therefore, the site owner and other players, who should have read the ToS in effect at the time, could have anticipated the possibility of automated players. Thus, they assumed the risk knowingly or by default.

The ethical decisions we made were approved by the Tel Aviv University ethics committee.

## 7 Concluding Remarks
Unique-Bid auctions have attracted attention from both practitioners and the research community due to their attractive prices and unusual economic and game-theoretical structure. Our findings suggest that popular Unique-Bid auction systems are vulnerable to automated strategies that perform much better and discover more information than human players. Our strongest techniques exploit side signals revealed by the auction sites and use strategic bidding to amplify these signals. While side signals serve various legal and psychological purposes, their strategic implications must be considered more thoroughly.

## Appendix
We use Python-like pseudocode in the following algorithms.

### A. The Back-Propagation Algorithm (BPA)
```python
def BPA(Q, DQ, t):
    if len(t) == 1:
        return
    q_ops = editops(Q[t[-2]], Q[t[-1]])
    dq_ops = editops(DQ[t[-2]], DQ[t[-1]])
    for dq_op in dq_ops['equal']:
        copy_offers(DQ[t[-2]], DQ[t[-1]])
    for dq_op in dq_ops['insert']:
        dq_inserts.append(dq_op)
    if not verify_DQ_correctness(DQ[t[-2]]):
        continue
    for q_op in q_ops['equal']:
        copy_offers(Q[t[-2]], Q[t[-1]])
    for q_op in q_ops['insert']:
        nop  # No interesting effect on Q[t[-2]]
    for q_op in q_ops['delete']:
        for dq_op in dq_inserts:
            if dq_op['bidder_id'] == q_op['bidder_id']:
                if dq_op['offer'] not in DQ[t[-2]]['offers']:
                    Q[t[-2]][dq_op['idx']] = dq_op['offer']
    if not verify_Q_correctness(Q[t[-2]]):
        continue
    ret = BPA(Q, DQ, t[:-2])
    if ret:
        return
    print('Failed. Exhausted all paths')

def verify_DQ_correctness(DQ):
    # Ensures DQ offers are non-increasing
    pass

def verify_Q_correctness(Q):
    # Ensures Q offers are unique and strictly decreasing
    pass

def dq_group_count_at_interval(ofr1, ofr2):
    DQ.merge_collection(prev_bids)
    DQinterval = DQ[DQ.index(ofr1):DQ.index(ofr2)]
    count = 1
    for idx in range(len(DQinterval) - 1):
        id1 = DQinterval[idx]
        id2 = DQinterval[idx + 1]
        if id1 >= id2:
            count += 1
    return count
```

### B. Disqualifying First Places
```python
def disq_first_places_strategy(range_min, range_max):
    while True:
        if caught_top_place():
            continue
        disq_first_place(range_min, range_max)

def disq_first_place(range_min, range_max):
    middle = (range_min + range_max) / 2
    signal = bid(middle)
    if signal == 'HI':
        return disq_first_place(range_min, middle)
    elif signal == 'LOW':
        return disq_first_place(middle, range_max)
    elif signal == 'EQUAL':
        return middle
```

### C. Catch All Non-Disqualified Bids
```python
def catch_all_non_disqualified_bids():
    while True:
        if caught_top_places():
            continue
        action = find_non_disqualified_gaps()
        if action:
            bid(action)

def find_non_disqualified_gaps():
    for idx in range(len(prev_bids) - 1):
        ofr1 = prev_bids[idx]
        ofr2 = prev_bids[idx + 1]
        ngaps = dq_group_count_at_interval(ofr1, ofr2)
        if ngaps != 0:
            return (ofr1 + ofr2) / 2
```

### D. Bid Block
```python
def bid_block(range_min, range_max):
    first = disq_first_place(range_min, range_max)
    bid_value = first - 1
    while True:
        bid(bid_value)
        bid_value -= 1
```

## C. Simulation Parameters
| Parameter | Value |
| --- | --- |
| Auction Duration | 18000 sec |
| Number of Bidders | \(\mu = 132.41, \sigma = 29.216\) |
| Winnings | 300 |
| Max Bid Price | 10.00 |
| Cost per Bid | 6 |
| Free Bids | 2 |
| Bidders Ratio | \(\mu = 13.5, \sigma = 5.8\) (An average of 13.5 2-bids bidders per heavy bidder) |
| 2-Bids Times | Uniformly distributed |
| 2-Bids Bid-Value | Bimodal truncated normal (see Section 3.4.1) |
| Heavy Bursts Number | 2 or 4 (uniformly) |
| 2-Burst Parameters | Start times (sec): \(\mu_1 = 10365, \sigma_1 = 5628\); \(\mu_2 = 15772, \sigma_2 = 3820\) |
| Targeted Position | Number of Bids: \(\mu_1 = 13, \sigma_1 = 11\); \(\mu_2 = 3, \sigma_2 = 6\) |
| 4-Burst Parameters | Start times (sec): \(\mu_1 = 8572, \sigma_1 = 5069\); \(\mu_2 = 12754, \sigma_2 = 4302\); \(\mu_3 = 14756, \sigma_3 = 2883\); \(\mu_4 = 16703, \sigma_4 = 1865\) |
| Targeted Position | Number of Bids: \(\mu_1 = 18, \sigma_1 = 16\); \(\mu_2 = 13, \sigma_2 = 13\); \(\mu_3 = 9, \sigma_3 = 9\); \(\mu_4 = 2, \sigma_4 = 9\) |
| Consecutive Bids Delay | \(\mu = 11.82, \sigma = 17.70\) |

## References
1. HTTPFox - An HTTP analyzer addon for Firefox. <http://code.google.com/p/httpfox/>
2. Numpy - Scientific Computing Tools For Python. <http://numpy.scipy.org/>
3. PyModelFit: model-fitting framework. <http://packages.python.org/PyModelFit/>
4. SciPy - Scientific tools for Python. <http://www.scipy.org/>
5. Ariely, D., Ockenfels, A., & Roth, A. E. (2005). An Experimental Analysis of Ending Rules in Internet Auctions. RAND JOURNAL OF ECONOMICS, 36, 891–908.
6. Ariely, D., & Simonson, I. (2003). Buying, bidding, playing, or competing? Value assessment and decision dynamics in online auctions. Journal of Consumer Psychology, 13(1), 113–123.
7. Bajari, P., & Hortacsu, A. (2003). The winner’s curse, reserve prices, and endogenous entry: empirical insights from eBay auctions. RAND Journal of Economics, 329–355.
8. Bapna, R., Goes, P., & Gupta, A. (2003). Replicating online Yankee auctions to analyze auctioneers’ and bidders’ strategies. Information Systems Research, 14(3), 244–268.
9. Bertsimas, D., Hawkins, J., & Perakis, G. (2009). Optimal bidding in online auctions. Journal of Revenue and Pricing Management, 8(1), 21–41.
10. Eichberger, J., & Vinogradov, D. (2008). Least unmatched price auctions: A first approach. University of Heidelberg, Discussion Paper 471.
11. Gallice, A. (2009). Lowest Unique Bid Auctions with Signals. Carlo Alberto Notebooks 2009, 112.
12. Gonul, F., & Leszczyc, P. (2011). Snipe bidding behavior in eBay auctions. International Journal of Electronic Marketing and Retailing, 4(1), 16–29.
13. Houba, H. E. D., van der Laan, D., & Veldhuizen, D. (2008). The Unique-Lowest Sealed-Bid Auction. SSRN Electronic Journal.
14. Jank, W., & Shmueli, G. (2007). Modelling concurrency of events in online auctions via spatiotemporal semiparametric models. Journal of the Royal Statistical Society: Series C (Applied Statistics), 56(1), 1–27.
15. Jank, W., & Zhang, S. (2010). An Automated and Data-Driven Bidding Strategy for Online Auctions. INFORMS Journal on Computing, 23(2), 238–253.
16. Jiang, A., & Leyton-Brown, K. (2005). Estimating bidders valuation distributions in online auctions. In Proceedings of IJCAI-05 Workshop on Game Theoretic and Decision Theoretic Agents, pp. 98–107.
17. Klemperer, P. (2004). Auctions: Theory and Practice. SSRN Electronic Journal.
18. Krishna, V. (2002). Auction Theory. Academic Press.
19. Levenshtein, V. (1966). Binary codes capable of correcting deletions, insertions, and reversals. Soviet Physics Doklady, 10(8), 707–710.
20. Mehlenbacher, A. (2007). Multiagent System Platform for Auction Simulations. Department Discussion Papers, University of Victoria.
21. Milgrom, P. (2004). Putting Auction Theory to Work (Churchill Lectures in Economics). Cambridge University Press.
22. Mizuta, H., & Steiglitz, K. (2002). Agent-based simulation of dynamic online auctions. 1772–1777.
23. Ockenfels, A., & Roth, A. (2002). The timing of bids in internet auctions: Market design, bidder behavior, and artificial agents. AI magazine, 23(3), 79.
24. Pigolotti, S., Bernhardsson, S., Juul, J., Galster, G., & Vivo, P. (2011). Equilibrium strategy and population-size effects in lowest unique bid auctions. Arxiv preprint arXiv:1105.0819.
25. Rapoport, A., Otsubo, H., Kim, B., & Stein, W. (2009). Unique bid auction games. Jena Economic Research Papers, 5.
26. Raviv, Y., & Virag, G. (2009). Gambling by auctions. International Journal of Industrial Organization, 27(3), 369–378.
27. Scarsini, M., & Solan, E. (2010). Lowest Unique Bid Auctions. Arxiv preprint arXiv:1007.4264.
28. Shmueli, G., Russo, R. P., & Jank, W. (2007). The BARISTA: A model for bid arrivals in online auctions. Annals of Applied Statistics, 1(2), 412–441.
29. Steiner, I. (2010). Italy Shuts Down Lowest-Bid Auction Sites. eCommerce Bytes.
30. Wolf, J. R., Arkes, H. R., & Muhanna, W. A. (2005). Is Overbidding in Online Auctions the Result of a Pseudo-Endowment Effect? SSRN Electronic Journal.
31. Zeigler, B. P., Praehofer, H., & Kim, T. G. (2000). Theory of Modeling and Simulation, Second Edition. Academic Press.