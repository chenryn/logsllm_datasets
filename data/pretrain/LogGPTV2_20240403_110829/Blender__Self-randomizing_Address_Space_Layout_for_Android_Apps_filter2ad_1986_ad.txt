### Analysis of `libart.so` and Entropy Calculation

The `libart.so` libraries exhibit distinct characteristics due to the uniform distribution of their base addresses. This results in a 0.1 probability for any given output. The entropy for the `libart.so` library, denoted as \( H(X_{\text{libart.so}}) \), is 1. This indicates that over ten executions of the app, `libart.so` is mapped to different addresses each time.

To calculate the average entropy for all loaded libraries in application A, we use the following formula:
\[ R(A) = \frac{\sum_{m \in M} H(X_m)}{|M|} \]

We measured \( R(A) \) on a simple app (A) generated using the Android Gradle 1.2.3 blank app template. This app contains 109 native libraries at runtime, with 108 of them being shared libraries inherited from the zygote. We executed the app both without and with Blender protection ten times, recording the memory layout after the startup stage. Table 3 summarizes the average entropy results:

- **Original App:** 0.005
- **App with BlenderLRM only:** 0.981
- **App with full Blender support:** 0.991

The low entropy of the original system suggests minimal randomness. Using Blender's library randomization module significantly increases the entropy. Adding the ART runtime randomization module further increases the entropy by approximately 0.1. Although this increase is small, the security gain is substantial due to the large range of executable regions.

### Performance Evaluation

#### Startup Time

Blender performs library and ART randomization during the app's initial startup. To evaluate the overhead in terms of startup time, which is critical for user experience, we conducted experiments on a simple app. The app was created targeting Android 5.1 with one activity, generated using the Android Gradle 1.2.3 app template. In the app, we override the `attachBaseContext` method in the activity and log the current time (t1).

To accurately measure the startup elapsed time, we used a UI/application exerciser (monkey tool) to launch the application and recorded the launch time (t0) using the `$EPOCHREALTIME` value. The elapsed time from launch to application context is calculated as \( t1 - t0 \).

We measured the startup time for the following setups:
- **Original App**
- **App with Bootstrap Module (app re-delegation)**
- **App with BlenderLRM**
- **App with Full Blender (without BlenderART cache)**
- **App with Optimized Blender (with cache)**

Each setup was executed ten times, and the results are illustrated in Figure 8, showing the startup time in milliseconds for each launch and the average numbers for different setups.

- **App Re-delegation:** Introduces about 120 ms overhead.
- **BlenderART (without cache):** Requires code patching each time, resulting in a startup time of about 1.5 s, which is noticeable to users.
- **BlenderART (with cache):** Reduces the startup time to about 740 ms, with an overhead of about 360 ms, comparable to Morula [32].

It is important to note that this overhead only affects the app's first startup time.

### Memory Usage and Battery Capacity

Figure 9 shows the memory usage at the startup of apps for different setups. Table 4 provides benchmark scores for CPU, memory, I/O, 2D, and 3D performance, comparing the baseline, BlenderLRM, and full Blender configurations.

Figure 10 illustrates the battery capacity after multiple executions, highlighting the impact of different configurations on power consumption.

By providing these detailed measurements, we can better understand the trade-offs between security and performance when using Blender for address space layout randomization in Android apps.