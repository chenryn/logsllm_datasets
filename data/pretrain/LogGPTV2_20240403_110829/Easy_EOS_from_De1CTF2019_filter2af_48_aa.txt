# Easy EOS from De1CTF2019
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 逃得了初一是逃不过十五，终于在一次CTF中邂逅了 EOS 的相关题目
详细的题目描述可以参考已经发布的官方 wp
虽然说已经发布了 writeup，但由于其太过简练，没有接触的朋友们可能难以弄的很懂，由于我也是比赛后期通过部署链上公开的攻击代码得以get
flag的，这里就与大伙一起把这题弄得明白一点
稳重前面几部分都是写给没有接触过eos平台的读者的，若有一定基础则可以直接浏览后文🙏有疑惑的，都可以在文末留言
## 前期准备
有许多接触过区块链类型题目的伙伴都会发现，原来题目并不麻烦，但是搭环境太愁人。相比以太坊的 geth ，EOS平台下提供有官方终端的 cleos
和写app用的 eosjs 两者都不是很好入门，而且这两者只是一个接口应用，并非像 geth 已经提供了整套虚拟机，如果要正式的应付
eosio，大概是需要下面的套餐
简而言之，cleos提供一个接口，有这个接口我们就可以与其他区块链全节点进行交互
  1. 安装 cleos，这里可以参见官网，macos或者linux应该都较为方便，因为是做题，推荐直接安装pre-compiled的包而不是自己编译（亲测编译源码坑太多）
  2. 安装 cdt (contract development toolkit)，这一步是可选，cdt并非上图栈中的一部分，是用于开发eos合约的，因为现阶段也有线上的工具，大抵就和以太坊下的remix差不多，会用就好这里不赘述了
  3. 注册一个 [JUNGLE](https://jungletestnet.io/) 下的账户，参见官网流程即可，顺便到 facuet 领点 token 方便后续部署合约
## 观察目标合约
一般做以太坊的题目我会学我师父的用 [Etherscan](https://ropsten.etherscan.io/) 来初步探究，而 eos
下的区块链浏览器相较于以太坊更加丰富了（因为eos平台的交易量早就超过以太坊了啊），这里推荐使用
[blocks.io](https://jungle.bloks.io/account/de1ctf111eos?loadContract=true&tab=Tables&account=de1ctf111eos&scope=de1ctf111eos&limit=100&table=users)
功能较全也比较好看
已知目标合约
  * 合约用户名为 de1ctf111eos （这里啰嗦一下，EOS平台下一个用户和一个合约是一一对应的，不像以太坊里面有外部账户这种说法
  * 合约环境 Jungle Testnet 2.0
目标：You need to win at least 10 times，而且中途一旦输一次这个账户就不能接着玩了
我们从区块链浏览器里扒下这些信息
(1) 合约的外部函数
可以看到这里有 bet 和 sendmail
两个函数（同时大家也看到了可以在这里直接进行交易的提交，但由于我这里网速实在不好，一直弄不好scatter钱包所以没尝试，大家或许可以玩玩）
(2) 合约的数据表
可以看到这里有三个 table，简单查看一下内容，或者
  * mails表存放已经成功get flag对象及其邮箱
  * seed表，如其名，应该是存放这生成随机数用的种子
  * users表，存放了所有参与玩家的胜/败场次
信息收集大概够了，接下来我们介绍也就是官方给出的两种思路，随机数攻击和回滚攻击，本篇文章我们单介绍随机数破译
## 随机数攻击
既然是赌博游戏而且要求不输，自然就是“出老千”，如果能够逆向合约预判每一次的结果，那就可以战无不胜了。
做合约逆向前可以先学习一下这几篇博客
(1) [wasm汇编入门](https://developer.mozilla.org/zh-CN/docs/WebAssembly/Understanding_the_text_format)
(2) [静态逆向 wasm 的一些基础](https://xz.aliyun.com/t/5170)
(3) [合约逆向初探](https://www.bunnypub.net/zh-cn/water/topics/98321)（注意其中的 name
转化脚本可以学习）
另外可以用的工具的话好像网上有提供 idawasm 插件，radare2，和 jeb，不过这里我就只是使用 VS Code
来纯人工逆向了（工具集现在都没有很成型）
首先我们通过 apply 函数以及 execute 函数定位到外部函数 bet 的代码主体（部分）
      (func $f64 (type $t23) (param $p0 i32) (param $p1 i64) (param $p2 i32)
        (local $l0 i32) (local $l1 i32) (local $l2 i32) (local $l3 i32) (local $l4 i32) (local $l5 i32) (local $l6 i32)
        get_global $g0
        i32.const 32
        i32.sub
        tee_local $l0
        set_global $g0
        get_local $l0
        get_local $p1
        i64.store offset=24
        get_local $p1
        call $env.require_auth
        get_local $p0
        i32.const 5
        call $f66       ;; update seed and get bet
        set_local $l1
        get_local $p0
    .........( 省略 N 行 ）.........
        block $B7
          get_local $l1
          get_local $p2
          i32.ne        ;; seed compare
          br_if $B7
          get_local $l0
          get_local $l0
          i32.const 16
          i32.add
          i32.store offset=8
    ..............................
          get_local $l2
          get_local $l5
          get_local $p1
          get_local $l0
          i32.const 8
          i32.add
          call $f69
          get_local $l0
          i32.const 32
          i32.add
          set_global $g0
          return
        end
        get_local $l2
        get_local $l5
        get_local $p1
        get_local $l0
        i32.const 8
        i32.add
        call $f70
        get_local $l0
        i32.const 32
        i32.add
        set_global $g0)
观察代码后如果能基本逆向浓缩到这一步，基本快要接近成功了；（wast栈代码实在是非常啰嗦，就上下滑就已经十分辛苦了，这里没有代码高亮的支持大家就凑合的看好了）
从头往下看到的第一个函数调用即 call $f66
是一个关键函数，跟进后可以发现其函数内完成了新一轮随机种子计算并返回了一个结果，大概率该结果就是猜测的值了）
让我们比较细心的看一看这个 $f66
     (func $f66 (type $t4) (param $p0 i32) (param $p1 i32) (result i32)
        (local $l0 i32) (local $l1 i32) (local $l2 i32) (local $l3 i64)
    ..............................
        block $B0
          block $B1
            get_local $p0
            i64.load offset=72            ;; memory{p0 + 72}
            get_local $p0
            i32.const 80
            i32.add
            i64.load                          ;; memory{p0 + 80} 
            i64.const -4425754204123955200   ;; name{seed} 这里查 seed 作为表名
            i64.const 0                      ;; key 键值
            call $env.db_lowerbound_i64      ;; 返回 seed 表的  <=== (1)
            tee_local $l2
            i32.const 0
            i32.lt_s
            br_if $B1
            get_local $l1
            get_local $l2
            call $f79                        ;; <=== (2)  
            set_local $l2
            br $B0
          end
          get_local $l0
          i32.const 8
          i32.add
          get_local $l1
          get_local $p0
          i64.load
          get_local $l0
          call $f80                          ;; <=== (3)
          get_local $l0
          i32.load offset=12
          set_local $l2
        end
        get_local $l0                        ;; *
        get_local $l2                        ;; *
        i32.load offset=8                  ;; *
        call $f62                              ;; <=== (4) *
        i64.const 1000000                ;; *
        i64.div_s                              ;; *
        i32.wrap/i64                        ;; *
        i32.add                               ;; *
        i32.const 65537                   ;; *
        i32.rem_u                           ;; *
        i32.store offset=8                ;; *
        get_local $p0                        
        i64.load                             
        set_local $l3
        get_local $l0
        get_local $l0
        i32.const 8
        i32.add
        i32.store
        block $B2
          get_local $l2
          br_if $B2