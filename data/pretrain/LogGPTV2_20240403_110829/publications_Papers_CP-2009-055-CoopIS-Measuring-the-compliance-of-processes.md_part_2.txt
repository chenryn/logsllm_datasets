### Complaint Handling and Compliance Maturity

An airline may accept complaints through various communication channels, such as email, letter, or phone. If the airline only accepts complaints via email and letter, it is considered partially mature in terms of compliance maturity. However, if the implemented channels (email and letter) align with the recommendations of a reference model (M), we say that the airline is fully compliant with respect to the compliance degree.

### Granularity of Models

When comparing two models, M1 and M2, the level of detail in their activities (granularity) may differ. For example, in Figure 2, the activity "Prioritize Incident" exists in M1 but not in M2. Additionally, an activity in one model might correspond to a set of activities in another. For instance, "Categorize Incident" in M1 might map to multiple activities in M2. To account for these differences, we need to establish a correspondence between the activities of the two models. This correspondence is a mapping where the functionality of the activities is the same.

Existing approaches, such as schema or semantic matching, assume that this correspondence can be established automatically based on the labels. However, our use case shows that this assumption is not always realistic. For example, the activities "Create Incident" in M1 and "Create Customer’s Complaint" in M2 have the same functionality but different labels. Therefore, we favor manual mapping over automatic methods.

### Customization of the Reference Model

When measuring compliance, it is often important to treat certain parts of the reference model (M1) in a special way. For example, reference models typically do not specify the exact order in which activities must be executed. We refer to these special parts as partitions, which can be of type "Order" or "Exclusion."

- **Partition of Type "Order":** Activities within this partition can be executed in any order. For example, in partition P1, the activities "Categorize Incident" and "Prioritize Incident" can be performed in any sequence.
- **Partition of Type "Exclusion":** This partition allows the exclusion of certain activities from the compliance analysis. For instance, in partition P2, the activity "Preprocess Incident" is not supported by the Information System (IS) but is manually executed. To prevent this missing activity from affecting the compliance, it is excluded from the analysis.

### Iteration

A special case arises when an activity in process M2 is part of a cycle, while it is not in M1. This means the activity can be executed repeatedly in M2, whereas in M1, it must be performed correctly in only one iteration. For example, in our use case, the activities "Search for a Solution" and "Inform Customer" are repeated until the customer accepts the claim processing. The existence of this cycle improves the process quality and customer satisfaction. Even though ITIL does not explicitly recommend cycles, the airline considers this cycle in M2 as not affecting compliance with M1. In contrast, a cycle that merely involves redoing work negatively affects process efficiency. The challenge is that many reference models neither contain cycles nor specify the number of iterations, making it difficult to generalize the effect of cycles on compliance.

### Sequence-Based Compliance

Based on the requirements outlined in Section 4, we have developed an algorithm to measure the compliance of model M2 or M3 with model M1. The key feature of this algorithm is that it can judge one process as compliant with another even if they have different structures. For example, Figure 4 illustrates that the process models are different, but we will show that they are compliant.

#### Theoretical Foundations

Previous sections used the Event-Driven Process Chain (EPC) language to model processes due to its ease of understanding and widespread use in the industry. For the design of the compliance algorithm, we adopt a more formal approach based on Workflow nets (WF-nets). WF-nets are well-suited for process analysis, given the extensive research in this area. We define the degree of compliance based on the firing sequences of WF-nets.

**Definition 1 (Workflow Net):**
A Workflow net (WF-net) is a tuple M = (P, T, F, i, o) where:
- P is a finite set of places,
- T is a finite set of transitions,
- P ∩ T = ∅,
- F ⊆ (P × T) ∪ (T × P) is a set of arcs,
- i ∈ P is the unique source place such that •i = ∅,
- o ∈ P is the unique sink place such that o• = ∅,
- Every node x ∈ P ∪ T is on a path from i to o.

**Definition 2 (Firing Sequence):**
- A marking K : P → N defines the number of tokens per place.
- A transition t is enabled in a marking K if (∀p ∈ •t) K(p) ≥ 1.
- t fires from marking K to K' if t is enabled in K and (∀p ∈ •t) K(p) = K'(p) − 1 and (∀p ∈ t•) K(p) = K'(p) + 1.
- σ = t1, t2, ..., tn ∈ T* is a firing sequence leading from a marking K1 to Kn+1 if there are markings K2, ..., Kn such that K1[t1⟩K2[t2⟩...[tn⟩Kn+1.

To capture relevant behavior, we restrict ourselves to firing sequences representing properly terminated process instances.

**Definition 3 (Complete Sound Firing Sequences):**
- Ki is the initial marking with Ki(i) = 1 and (∀p ≠ i) Ki(p) = 0.
- Ko is the final marking with Ko(o) = 1 and (∀p ≠ o) Ko(p) = 0.
- σ is a complete sound firing sequence if Ki[σ⟩Ko.
- S(M) denotes the set of all complete sound firing sequences.

This definition ignores unsound behavior, such as deadlocks or livelocks. When no ambiguity occurs, we simply refer to σ as a firing sequence.

Since WF-nets can be considered directed graphs, we use the standard graph-theoretical notion of a cycle.

**Definition 4 (Cycle):**
A cycle in a WF-net M = (P, T, F, i, o) is a sequence of nodes (x1, ..., xn) ∈ (P ∪ T)*, such that (∀1 ≤ i < n) (xi, xi+1) ∈ F and x1 = xn.

The existence of cycles causes the set S(M) to be infinite. Therefore, we restrict the number of unroll factors for cycles by a variable parameter. This results in a finite subset of S(M) denoted by S(M). The set S(M) grows exponentially with the number of transitions |T|. However, Section 5.5 will show that our approach is practical. Our strategy to handle cycles and their contribution to compliance among competing requirements (see Section 4) is to equate cycles without correspondence in M1 with the action of redoing work. Superfluous work may negatively affect compliance values.

#### Measuring Compliance

To account for the special characteristics of compliance with reference models identified in Section 4, we use several parameters in our algorithm.

**Definition 5 (Granularity Mapping):**
Let M1 = (P1, T1, F1, i1, o1) and M2 = (P2, T2, F2, i2, o2) be two WF-nets, where M1 is the reference model and M2 is the process model. We use a mapping G : T2 → T1 to map activity labels in the process model to activity labels in the reference model. Since G can be non-injective, it can handle granularity differences between the two models. We refer to this mapping as the granularity mapping.

**Definition 6 (User-Selected Partition):**
Let M1 be a reference model as stated in Definition 5. A user-selected partition of M1 is a set of transitions p ⊆ T1, which can be of type "exclusion" or "order." User-selected partitions of type "exclusion" are represented with p¯, and those of type "order" with pˇ. M1 can have at most one user-selected partition of type "exclusion" and an arbitrary finite number of user-selected partitions of type "order." Let P denote the set of all user-selected partitions associated with M1.

Now that we have defined the parameters, we deduce the compliance measures.

**Definition 7 (Extended Firing Sequence Set, Mapped Firing Sequence Set):**
Let M1 and M2 be the reference model and the process model as stated in Definition 5. Let P be the set of all user-selected partitions related to M1, and let G be the granularity mapping between M1 and M2. Let σ1 ∈ T1* and σ2 ∈ T2*.

- **σext(P)** is the set of extended firing sequences of σ1, derived from σ1 by: (1) removing the transitions in p¯ from σ1 and (2) generating permutations of σ1 \ p¯ for all user-selected partitions pˇ.
- **|σext|** denotes the length of an arbitrary extended firing sequence σext of σ1.
- **σmap(G)** is the set of mapped firing sequences of σ2, derived from σ2 by applying G to all transitions of σ2. For each subsequence of transitions in σ2 that map to the same transition t1 ∈ T1, only one occurrence of t1 is placed in the resulting sequences, possibly at different positions, resulting in several mapped sequences.
- **|σmap|** denotes the length of an arbitrary mapped firing sequence σmap of σ2.

Note that |σext| is well-defined. The length of all extended sequences σext in σext(P) is equal since they differ only in the order of transitions. Similarly, |σmap| is well-defined. Removing transitions by p¯ ensures |σext| ≤ |σ1|, and mapping possible multiple transitions to one transition ensures |σmap| ≤ |σ2|.

**Definition 8 (Compliance Measures):**
Let M1, M2, G, and P be as stated in the definitions above. Let σ1 ∈ T1* and σ2 ∈ T2*.

- **Firing Sequence Compliance (fsc) of σ2 w.r.t. σ1:**

\[ \text{fsc}(\sigma_2, \sigma_1) = \frac{\sum_{\sigma_{\text{map}} \in \sigma_{\text{map}}(G)} \text{similarity}(\sigma_{\text{map}}, \sigma_{\text{ext}}(P))}{|\sigma_{\text{ext}}(P)| \times |\sigma_{\text{map}}(G)|} \]

Where similarity(σmap, σext) is a function that measures the similarity between the mapped and extended sequences.

This definition provides a systematic way to measure the compliance of a process model with a reference model, taking into account the special characteristics and requirements identified.