h
addTraverse(matrix, i, j, &res)
==
addTraverse(matrix, i, j, &res)
continue 
addTraverse(matrix,i,j, &res)
Q
continue
1
i++
continue
dir ==
2
?
Alt
M
s
L
3
#
×
m
D
4
$
C
R
F
"Dad", "Peace"]
5
%
N
G
9
>
B
>
工
8
8
W
￥
6
v
o
 letters of alphabet on only one
Alt
0
P
~
+
Shift
Menu|Ctrl
1
Enter
Backspace
---
## Page 577
503. Next Greater Element Il
代码
解题思路
给定一个单词列表，，
题目大意
Note:
·给出一个字符串数组，要求依次判断数组中的每个字符串是否都位于键盘上的同一个行，如果是就
 2. You may assume the input string will only contain letters of alphabet.
1. You may use one character in the keyboard more than once.
func findwords500(words []string） []string {
import "strings"
package leetcode
输出。这也是一道水题。
return output
output := make([]string, 0) 
rows := []string{"qwertyuiop",
if len(s) == 0 { 
if oneRow { 
oneRow := false 
lowers := strings.ToLower(s)
 output = append(output,s) 
if strings.ContainsAny(lowers, r) {
continue
if !oneRow {
 oneRow = !oneRow
break
只返回可以使用在键盘同一行的字母打印出来的单词。键盘如上图所示。
"asdfghjkl",
.wuqAxz_.
---
## Page 578
代码
题的做法继续模拟。更好的做法是用单调栈，栈中记录单调递增的下标。
这题是第496 题的加强版，在第 496 题的基础上增加了循环数组的条件。这一题可以依旧按照第 496
解题思路
数组。如果找到了就输出这个值，如果找不到就输出-1。
题目给出数组A，
题目大意
Note: The length of given array won't exceed 10000.
Example 1: 
to find its next greater number. If it doesn't exist, output -1 for this number.
greater number to its traversing-order next in the array, which means you could search circularly
the Next Greater Number for every element. The Next Greater Number of a number x is the first
 Given a circular array (the next element of the last element is the first element of the array), print
题目
func nextGreaterElements(nums []int) []int {
//解法一单调栈
package leetcode
The second 1's next greater number needs to search circularly, which is also
Explanation: The first l's next greater number is 2;
Output: [2,-1,2]
Input: [1,2,1] 
for i := 0; i  0 && nums[indexes[len(indexes)-1]] nums[i]{
!find {
= (j + 1) % len(nums)
break 
find = true
res = append(res, nums[j])
---
## Page 580
代码
解题思路
数
对于一个正整数，如果它和除了它自身以外的所有正因子之和相等，我们称它为"完美数"。给定一个整
题目大意
Note: The input number n will not exceed 100,000,000. (1e8)
·这一题也可以打表，1e8以下的完美数其实并不多，就5个。
func checkPerfectNumber_(num int) bool { 
//方法二打表
//方法一
import "math"
·给定一个整数，
n，如果他是完美数，返回 True，否则返回 False 
Explanation: 28 = 1 + 2 + 4 + 7 + 14
func checkPerfectNumber(num int) bool
packageleetcode
Output: True
Input: 28 
 return num == 6 1l num == 28 1l num == 496 1l num == 8128 1l num == 33550336 
if num  1.
Input: 2
F(O) = 0,
func findTreeSum(root *TreeNode, fre map[int]int) int {
if root == nil {
return val
fre[val]++
val := findTreeSum(root.Left, fre) + findTreesum(root.Right, fre) + root.val
sort.Ints(freList)
for k := range reFreMap {
findTreeSum(root, freMap)
if root != nil && root.Left == nil && root.Right == nil {
return reFreMap[freList[len(freList)-i]]
for k, v := range freMap {
 return 0
freList = append(freList, k)
return root.val
fre[root.val]++
reFreMap[v] = tmp 
tmp = append(tmp,k)
tmp := reFreMap[v] 
F(1) = 1 
---
## Page 584
代码
解题思路
提示：0≤N≤30
给定 N，计算 F(N)。
数字都是前面两项数字的和。也就是：
斐波那契数，通常用 F(n)表示，形成的序列称为斐波那契数列。该数列由O 和1 开始，后面的每一项
题目大意
Note:
 Example 3:
// 解法一 递归法 时间复杂度 0(2^n)，空间复杂度 0(n)
import "math"
package leetcode
·求斐波那契数列
F(N) = F(N － 1) + F(N － 2)，其中 N > 1.
F(O)
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
func fib(N int) int { 
Output: 3 
Input: 4
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Output:2 
Input: 3 
if
if N%2 != 0 { 