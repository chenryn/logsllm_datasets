paths   to   check   for   graphQL   instances.  
●
/graphql  
●
/graphiql  
●
/graphql.php  
●
/graphql/console  
Once   you   find   an   open   graphQL   instance   you   need   to   know   what   queries   it  supports.   
This   can   be   done   by   using   the   introspection   system,   more   details   can   be   found   here:  
●
https://graphql.org/learn/introspection/  
Issuing   the   following   requests   will   show   you   all   the   queries   that   are   available   on   the   
endpoint.   
●
example.com/graphql?query={__schema{types{name,fields{name}}}}  
As   you   can   see   there   is   a   type   called   “User”   and   it  has   two   fields   called   “username”   and   
“password”.   Types   that   start   with   a   “__”   can   be   ignored   as   those   are   part   of   the   
introspection   system.   Once   an   interesting   type   is   found   you   can   query   its  field   values   by   
issuing   the   following   query:  
●
http://example.com/graphql?query={TYPE_1{FIELD_1,FIELD_2 }}  
Once   the   query   is   submitted   it  will   pull   the   relevant   information   and   return   the   results   to   
you.   In   this   case   we   get   a   set   of   credentials   that   can   be   used   to   login   to   the   application.   
GraphQL   is   a   relatively   new   technology   that   is   starting   to   gain   some   traction   among   
startups   and   large   corporations.   Other   than   missing   authentication   by   default   graphQL   
endpoints   can   be   vulnerable   to   other   bugs   such   as   IDOR.  
Authentication  
If   an   application   requires   you   to   login   it  must   use   some   form  of   authentication   to   verify   
who   you   are.   Depending   on   what   authentication   method   an   application   is   using   there   
could   be   several   types   of   attacks   used   to   compromise   the   authentication   process.   
Compromising   the   authentication   process   will   typically   lead   to   account   takeover(ATO)   
vulnerabilities   and   depending   on   the   accounts   you   takeover   it  could   also   lead   to   
privilege   escalation.   In   the   below   sections   I   talk   about   the   most   common   authentication   
methods   and   their   pitfalls.  
HTTP  Basic  
This   is   probably   the   most   basic   and   easy   to   implement   type   of   authentication.   As   shown   
in   the   below   image   you   can   identify   HTTP   Basic   Auth   by   the   popup   it  displays   in   web  
browsers.  
After   typing   in   your   username   and   password   the   authentication   details   are   stored   in   an   
authorization   header   as   shown   below:  
Note   that   the   authorization   header   is   just   a   base64   encoded   string   of   the   username   and   
password.   If   we   were   to   decode   the   above   string   we   would   get   the   following:  
That's   one   of   the   biggest   downfalls   of   using   HTTP   Basic   Auth.   Each   time   you   send   a   
request   your   clear   text   username   and   password   are   sent   as   a   base64   encoded   
authentication   header   making   it  very   susceptible   to   eavesdropping   attacks.  
Json  Web  Token  (JWT)  
Introduction  
Json   Web   Tokens(JWTs)   are   extremely   popular   among   API   endpoints   as   they   are   easy   
to   implement   and   understand.  
When   a   user   attempts   to   login   the   system   will   send   its  credentials   to   the   back   end   API.   
After   that   the   backend   will   verify   the   credentials   and   if  they   are   correct   it  will   generate   a   
JWT   token.   This   token   is   then   sent   to   the   user,   after   that   any   request   sent   to   the   API   will   
have   this   JWT   token   to   prove   its  identity.  
As   shown   below   a   JWT   token   is   made   up   of   three   parts   separated   by   dots:  
●
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFt 
ZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwp 
MeJf36POk6yJV_adQssw5c  
The   token   can   easily   be   decoded   using   a   base64   decoder,   but   I   like   to   use   the   site   jwt.io   
to   decode   these   tokens   as   shown   above.   
Notice   how   there   are   three   parts   to   a   JWT   token:  
●
Header  
●
Payload  
●
Signature  
The   first   part   of   the   token   is   the   header,   this   is   where   you   specify   the   algorithm   used   to   
generate   the   signature.   The   second   part   of   the   token   is   the   payload,   this   is   where   you   
specify   the   information   used   for   access   control.   In   the   above   example   the   payload   
section   has   a   variable   called   “name”,   this   name   is   used   to   determine   who   the   user   is   
when   authenticating.   The   last   part   of   the   token   is   the   signature,   this   value   is   used   to   
make   sure   the   token   has   not   been   modified   or   tampered   with.   The   signature   is   made   by   
concatenating   the   header   and   the   payload   sections   then   it  signs   this   value   with   the   
algorithm   specified   in   the   header   which   in   this   case   is   “H256”.  
If   an   attacker   were   able   to   sign   their   own   key   they   would   be   able   to   impersonate   any   
user   on   the   system   since   the   backend   will   trust   whatever   information   is   in   the   payload   
section.   There   are   several   different   attacks   which   attempt   to   achieve   this   as   shown   in   
the   below   sections.  
Deleted   Signature  
Without   a   signature   anyone   could   modify   the   payload   section   completely   bypassing   the   
authentication   process.   If   you   remove   the   signature   from  a   JWT   token   and   it's   still   
accepted   then   you   have   just   bypassed   the   verification   process.   This   means   you   can   
modify   the   payload   section   to   anything   you   want   and   it  will   be   accepted   by   the   backend.   
Using   the   example   from  earlier   we   could   change   the   “name”   value   from  “john   doe”   to   
“admin”   potentially   signing   us   in   as   the   admin   user.  
None   Algorithm  
If   you   can   mess   with   the   algorithm   used   to   sign   the   token   you   might   be   able   to   break   the   
signature   verification   process.   JWT   supports   a   “none”   algorithm   which   was   originally   
used   for   debugging   purposes.   If   the   “none”   algorithm   is   used   any   JWT   token   will   be   
valid   as   long   as   the   signature   is   missing   as   shown   below:  
Note   that   this   attack   can   be   done   manually   or   you   can   use   a   Burp   plugin   called   “Json   
Web   Token   Attacker”   as   shown   in   the   below   image:  
I   personally   like   using   the   plugin   as   you   can   make   sure   you   don’t   mess   anything   up   and   
it's   generally   a   lot   faster   to   get   things   going.  
Brute   Force   Secret   Key  
JWT   tokens   will   either   use   an   HMAC   or   RSA   algorithm   to   verify   the   signature.   If   the   
application   is   using   an   HMAC   algorithm   it  will   use   a   secret   key   when   generating   the   
signature.   If   you   can   guess   this   secret   key   you   will   be   able   to   generate   signatures   
allowing   you   to   forge   your   own   tokens.    There   are   several   projects   that   can   be   used   to   
crack   these   keys   as   shown   below:  
●
https://github.com/AresS31/jwtcat  
●
https://github.com/lmammino/jwt-cracker  
●
https://github.com/mazen160/jwt-pwn  
●
https://github.com/brendan-rius/c-jwt-cracker  
The   list   can   go   on   for   days,   just   search   github   for   the   words   “jwt   cracker”   and   you   will   
find   all   kinds   of   tools   that   can   do   this   for   you.  
RSA   to   HMAC  
There   are   multiple   signature   methods   which   can    be   used   to   sign   a   JWT   token   as   
shown   in   the   list   below:  
●
RSA  
●
HMAC  
●
None  
RSA   uses   a   public/private   key   for   encryption,   if  you   are   unfamiliar   with   the   asymmetric   
encryption   processes   I   would   suggest   looking   it  up.   When   using   RSA   the   JWT   token   is   
signed   with   a   private   key   and   verified   with   the   public   key.   As   you   can   tell   by   the   name   
the   private   key   is   meant   to   be   private   and   the   public   key   is   meant   to   be   public.    HMAC   is   
a   little   different,   like   many   other   symmetric   encryption   algorithms   HMAC   uses   the   same   
key   for   encryption   and   decryption.  
In   the   code   when   you   are   using   RSA   and   HMAC   it  will   look   something   like   the   following:  
●
verify(“RSA”,key,token)  
●
verify(“HMAC”,key,token)  
RSA   uses   a   private   key   to   generate   the   signature   and   a   public   key   for   verifying   the  
signature   while   HMAC   uses   the   same   key   for   generating   and   verifying   the   signature.   
As   you   know   from  earlier   the   algorithm   used   to   verify   a   signature   is   determined   by   the   
JWT   header.   So   what   happens   if  an   attacker   changes   the   RSA   algorithm   to   HMAC.   In   
that   case   the   public   key   would   be   used   to   verify   the   signature   but   because   we   are   using   
HMAC   the   public   key   can   also   be   used   to   sign   the   token.   Since   this   public   key   is   
supposed   to   be   public   an   attacker   would   be   able   to   forage   a   token   using   the   public   key   
and   the   server   would   then   verify   the   token   using   the   same   public   key.   This   is   possible   
because   the   code   is   written   to   use   the   public   key   during   the   verification   process.   Under   
normal   conditions   the   private   key   would   be   used   to   generate   a   signature   but   because   
the   attacker   specified   an   HMAC   algorithm   the   same   key   is   used   for   signing   a   token   and   
verifying   a   token.   Since   this   key   is   public   an   attacker   can   forge   their   own   as   shown   in   
the   below   code.  
The   original   header   was   using   the   RS256   algorithm   but   we   changed   it  to   use   HS256.   
Next   we   changed   our   username   to   admin   and   signed   the   token   using   the   servers   public   
key.   When   this   is   sent   to   the   server   it  will   use   the   HS256   algorithm   to   verify   the   token   
instead   of   RS256.    Since   the   backend   code   was   set   up   to   use   a   public/private   key   the   
public   key   will   be   used   during   the   verification   process   and   our   token   will   pass.  
Summary  
Json   web   tokens(JWT)   are   a   relatively   new   way   to   handle   authentication   and   it  is   
relatively   simple   compared   to   other   methods.   However,   even   with   this   simplicity   there   
are   several   vulnerabilities   which   impact   JWTs.   If   an   attacker   is   able   to   forge   their   own   
ticket   its  game   over.   This   is   why   most   of   the   attacks   revolve   around   this   methodology.  
Security  Assertion  Markup  Language  (SAML)  
Introduction  
If   you're   dealing   with   a   fortune   500   company,   a   company   implementing   a   zero   trust   
network,   or   a   company   utilizing   single   sign   on   (SSO)   technology   then   you're   probably   
going   to   see   Security   Assertion   Markup   Language   (SAML).   According   to   Google   SSO   is   
“ an   authentication   scheme   that   allows   a   user   to   log   in   with   a   single   ID   and   password   to   any   of   
several   related,   yet   independent,   software   systems ”.  
The   above   illustration   describes   how   one   could   implement   SAML.   The   first   thing   you   
want   to   pay   attention   to   is   the   SSO   website   and   the   identity   provider   (ID).   Remember   
the   goal   of   SSO   is   to   use   one   set   of   credentials   across   multiple   websites,   so   we   need   a   
central   place   to   login   to   and   the   SSO   websites   acts   as   this   place.   Once   we   login   to   the   
SSO   website   the   credentials   will   be   sent   to   the   ID.   The   ID  will   check   the   supplied   
credentials   against   a   database   and   if  there   is   a   match   you   will   be   logged   in.   
Now   if  we   try   to   login   to   our   target   website   AKA   service   provider   (SP)  we   will   be   
forwarded   to   the   SSO   website.   Since   we   are   already   logged   into   the   SSO   website   we   
will   be   forwarded   back   to   the   SP   with   our   SAML   assertion   that   contains   our   identity.  
A   SAML   Assertion   is   the   XML   document   that   the   identity   provider   sends   to   the   service   
provider   which   contains   the   user   authorization.   The   SAML   assertion   will   contain   a   
subject   section   which   contains   the   authentication   information   such   as   a   
username.There   is   also   a   signature   section   which   contains   a   signature   value   that   
verifies   the   subject   section   hasn't   been   tampered   with.   Note   that   the   signature   section   
contains   a   tag   called   “Reference   URI”   which   points   to   the   section   the   signature   applies   
to.   In   the   below   SAML   assertion   we   see   the   signature   has   a    Reference   URI   of   
“_2fa74dd0-f1dd-0138-2aed-0242ac110033”,   notice   how   this   is   the   same   as   the   
“Assertion   ID”   which   means   this   signature   is   verifying   that   tag   and   everything   it  holds.  
Also   notice   in   the   above   image   there   is   a   tag   called   “NameID”   which   holds   the   user's   
username.   This   information   is   sent   to   the   service   provider   and   if  accepted   it  will   log   us   in   
as   that   user.  
XML   Signature   Removal  
When   a   service   provider   receives   a   SAML   assertion   the   endpoint   is   supposed   to   verify   
the   information   has   not   been   tampered   with   or   modified   by   checking   the   XML   signature.   
On   some   systems   it  is   possible   to   bypass   this   verification   by   removing   the   signature   
value   or   the   entire   signature   tag   from  the   assertion   or   message.  
One   of   the   first   things   I   try   is   to   make   the   “SignatureValue”   data   blank   so   it  looks   like   
“  ”,   in   certain   situations   this   is   enough   to   
completely   break   the   signature   check   allowing   you   to   modify   the   information   in   the   
assertion.  
Another   attack   is   to   completely   remove   the   signature   tags   from  the   request.   If   your   
using   the   SAML   Raider   plugin   in   Burp   you   can   do   this   by   clicking   the   “Remove   
SIgnatures”   button   as   shown   below:  
Note   you   can   also   remove   the   signature   by   hand   if  you   don't   want   to   use   the   plugin.   The   
end   result   will   be   a   message   or    assertion   tag   without   a   signature.  
Notice   how   the   above   illustration   is   missing   the   signature   section.   A   normal   service   
provider   would   reject   this   message   but   in   some   cases   it  will   still   be   accepted,   if  that's   the   
case   an   attacker   could   modify   the   information   in   the   “Subject”   tags   without   the   
information   being   verified.   This   would   allow   an   attacker   to   supply   another   user's   email   
giving   them   full   access   to   their   account.   
XMLComment   Injection  
An   XML   comment   is   the   same   as   a   comment   in   any   other   language,   it  is   used   by   
programmers   to   mention   something   in   the   code   and   they   are   ignored   by   compilers.   In   
XML   we   can   include   comments   anywhere   in   the   document   by   using   the   following   tag:  
●