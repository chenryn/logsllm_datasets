### 5.2 Security Model & Threats

Given the online-only nature of the community, traditional verification methods are infeasible. Cryptographic verifiability, although more robust than strictly necessary, is the only viable option when only the public inputs and outputs of the voting process can be truly observed. While cryptographic auditing may seem like a heavy-handed approach, it is the only effective one available.

For these reasons, we believe that systems like Helios have significant pedagogical value. The contrast between traditional and open-audit elections is particularly evident in an online setting. With Helios, voters are no longer entirely powerless and forced to trust a central system; instead, they are empowered to ensure that their votes are correctly captured and tallied without relying on any single entity.

#### 5.2.1 Security Model & Threats

We acknowledge the risk that if the Helios server is compromised before the end of an election, the secrecy of individual ballots may be jeopardized. However, assuming a sufficient number of auditors, even a fully corrupted Helios server would find it extremely difficult to alter the election results without a high probability of detection. We now explore various potential attacks and how they can be mitigated.

**Incorrect Shuffling or Decryption:**
A corrupt Helios server might attempt to shuffle or decrypt votes incorrectly. Given the high likelihood of detecting such attacks through cryptographic verification, even a single auditor can identify this type of tampering.

**Changing a Ballot or Impersonating a Voter:**
A corrupt Helios server could substitute a new ciphertext for a voter, either replacing their cast vote or injecting a vote when none was cast. Even if the ballot submission server is hosted separately and distributed among trustees, a corrupt Helios server with access to usernames and passwords can easily authenticate and cast a ballot on behalf of a user. In this case, all shuffling and decryption verifications will succeed because the corruption occurs before the encryption step.

In the current implementation of Helios, we aim to counter these attacks through extensive auditing. Previous analyses [7] have shown that a small random sample of voters verifying their votes can defeat such attacks. To encourage voter participation in the audit process, we have developed the Election Tallying Verification program, available in well-commented source form. This program outputs a copy of all cast ballots, allowing auditors to independently publish this information. We expect multiple auditors to follow this route, re-publishing the complete list of encrypted ballots along with their recomputed election outcomes. This auditing may include re-contacting individual voters to verify the hash of their cast encrypted ballot. We anticipate that a large majority, if not all, voters will respond to at least one auditor's request to verify their cast encrypted vote.

**Corrupting the Ballot:**
A corrupt Helios server might present a fraudulent ballot to a voter, making them believe they are selecting one candidate when they are actually voting for another. This attack would defeat the hashed-vote bulletin-board verification, even with multiple auditors, as the voter receives an incorrect receipt during the ballot casting process. Helios mitigates this risk by authenticating users only after the ballot has been filled out, making it harder to target individuals with corrupt ballots. However, a corrupt Helios server could still authenticate voters first (which they might not notice) or use other information (e.g., IP address) to identify and target specific victims.

To counter this attack, we provide the Ballot Encryption Verification program, also in source form for auditors to verify. This program can be run by individual voters to audit a few votes before casting their own. Alternatively, auditors, even those who are not eligible to vote, can prepare and audit ballots at will.

### 5.3 Performance

All performance measurements were conducted using the server hardware described in the previous section and a 2.2 GHz Macintosh laptop running Firefox 2 over a home broadband connection. We noted that Firefox 2's performance improved significantly when run on virtualized Linux on the same laptop, indicating that our measurements likely represent a worst-case scenario due to platform-specific performance peculiarities.

**Timing Measurements:**
We experimented with a 2-question election and 500 voters. All timings were performed multiple times to obtain a stable average, mostly free of testing noise. Note that time measurements related to a set of ballots are expected to scale linearly with the number of ballots and questions in the election. Our results are presented in Figure 7.

| Operation | Time |
| --- | --- |
| Ballot Encryption, in browser | 300 ms |
| Shuffling, on server | 133 s |
| Shuffle Proof, on server | 3 hours |
| Decryption, on server | 71 s |
| Decryption Proof, on server | 210 s |
| Complete Audit, on client | 4 hours |

**The Big Picture:**
It takes only a few minutes of computation to obtain results for a 500-voter election. The shuffling proof and verification steps require a few hours and are the most computationally intensive parts of the process. Both of these steps are highly parallelizable and could be significantly accelerated with additional hardware.

### 5.4 Extensions

There are several future directions for Helios:

- **Support for Other Types of Elections:**
  Helios currently supports simple elections where voters select one or more candidates. Adding write-ins and rank-based voting, along with the associated tallying mechanisms, could be useful. Homomorphic-based tabulation, while more demanding of browser-based cryptography, could also be implemented.

- **Java Virtual Machine Startup:**
  The Java Virtual Machine requires startup time, which we measured to be between 500 ms and 1.5 s on our client machine. During this time, the browser appears to freeze, which is a usability issue that will require further user testing. We can warn users about this behavior before starting the Ballot Preparation System, and since it occurs only once per user session, it is not too onerous.

- **Browser-Based Verification:**
  The current verification process for ballot encryption is somewhat tedious, requiring the use of a browser and a Python program. We could develop a JavaScript-only verification program that runs entirely in the voter’s browser to check that Helios is delivering authentic ballots. There are some issues to address, notably cross-domain requests, but it seems possible and desirable to achieve browser-only ballot encryption verification. Similarly, it is feasible to audit an entire election using JavaScript and LiveConnect for computationally intensive operations, allowing auditors to deliver the source code for these verification programs directly to voters.

- **Distributing the Shuffling and Decryption:**
  For enhanced privacy, Helios can be extended to support shuffling and decryption by multiple trustees. The Helios server would then focus on providing the bulletin board and voting booth functionality. Trustees would be provided with standalone Python programs for threshold key generation, partial shuffling, and threshold decryption, which they could individually audit. These extensions would bring Helios closer to classic cryptographic voting protocols and provide stronger privacy guarantees.

- **Improving Authentication:**
  Currently, our protocol requires that most voters audit their cast ballot, otherwise, the Helios server could impersonate voters and change the election outcome. Future versions of Helios should consider offloading authentication to a separate service. If feasible with browser-based cryptography, Helios should use digital signatures to authenticate each ballot in a publicly verifiable manner.

### 6 Related Work

There is a wealth of theoretical cryptographic voting work reviewed and cited in [11, 4]. We do not attempt to re-document this significant body of work here.

**Open-Audit Voting Implementations:**
There are only a few notable open-audit voting implementations. VoteHere’s advanced protocols for mixnets and coercion-free ballot casting [3] have been implemented and deployed in test environments. The Punchscan voting system [2] has also been implemented and used in a few real student government elections, with video evidence available for public viewing.

### 7 Conclusion

Helios is the first publicly available implementation of a web-based open-audit voting system. It fills an important niche: providing trustworthy elections for small clubs, online communities, and student governments without the significant overhead of coercion-freeness. We hope that Helios can serve as a valuable educational resource for open-audit voting by offering a service—outsourced, verifiable online elections—that could not be achieved without the paradigm-shifting contributions of cryptographic verifiability.

### 8 Acknowledgements

The author would like to thank Ronald L. Rivest, Shai Halevi, Chris Peikert, Susan Hohenberger, Alon Rosen, Steve Weis, and Greg Morrisett for alpha testing the Helios system, Adam Barth for pointing out the dynamic window creation technique for the Internet Explorer workaround, and the Usenix Security reviewers for insightful suggestions in improving and crystallizing the presentation of this work.

### References

[1] Clipperz. http://clipperz.org, last viewed on January 30th, 2008.
[2] PunchScan. http://punchscan.org, last viewed on January 30th, 2008.
[3] VoteHere. http://votehere.com, last viewed on January 30th, 2008.
[4] Ben Adida. Advances in Cryptographic Voting Systems. PhD thesis, August 2006. http://ben.adida.net/research/phd-thesis.pdf.
[5] Josh Benaloh. Simple Verifiable Elections. In EVT '06, Proceedings of the First Usenix/ACCURATE Electronic Voting Technology Workshop, August 1st 2006, Vancouver, BC, Canada. Available online at http://www.usenix.org/events/evt06/tech/.
[6] Josh Benaloh. Ballot Casting Assurance via Voter-Initiated Poll Station Auditing. In EVT '07, Proceedings of the Second Usenix/ACCURATE Electronic Voting Technology Workshop, August 6th 2007, Boston, MA, USA. Available online at http://www.usenix.org/events/evt07/tech/.
[7] C. Andrew Neff. Election Confidence. http://www.votehere.com/papers/ElectionConfidence.pdf, last viewed on January 30th, 2008.
[8] David Chaum and Torben P. Pedersen. Wallet Databases with Observers. In Ernest F. Brickell, editor, CRYPTO, volume 740 of Lecture Notes in Computer Science, pages 89–105. Springer, 1992.
[9] Amos Fiat and Adi Shamir. How to Prove Yourself: Practical Solutions to Identification and Signature Problems. In Andrew M. Odlyzko, editor, CRYPTO, volume 263 of Lecture Notes in Computer Science, pages 186–194. Springer, 1986.
[10] Google. Gmail. http://gmail.com.
[11] Dimitris Gritzalis, editor. Secure Electronic Voting. Kluwer Academic Publishers, 2002.
[12] Mark Herschberg. Secure Electronic Voting over the World Wide Web. Master’s thesis, May 1997. http://groups.csail.mit.edu/cis/voting/herschberg-thesis/.
[13] Ari Juels, Dario Catalano, and Markus Jakobsson. Coercion-Resistant Electronic Elections. In Vijay Atluri, Sabrina De Capitani di Vimercati, and Roger Dingledine, editors, WPES, pages 61–70. ACM, 2005.
[14] L. Masinter. The Data URL Scheme. http://tools.ietf.org/html/rfc2397, last viewed on January 30th, 2008.
[15] C. Andrew Neff. A Verifiable Secret Shuffle and Its Application to E-Voting. In CCS 2001, Proceedings of the 8th ACM Conference on Computer and Communications Security. November 6-8, 2001, Philadelphia, Pennsylvania, USA. ACM, 2001.
[16] Kazue Sako and Joe Kilian. Receipt-Free Mix-Type Voting Scheme - A Practical Solution to the Implementation of a Voting Booth. In EUROCRYPT, pages 393–403, 1995.
[17] Guido van Rossum. The Python Programming Language. http://python.org, last viewed on January 30th, 2008.
[18] Thomas D. Wu. The Secure Remote Password Protocol. In NDSS. The Internet Society, 1998. http://srp.stanford.edu/, last visited on January 30th, 2008.