cess is already ruled out by the online-only nature of the
community. Cryptographic veriﬁability, though it seems
stronger than absolutely necessary, is the only viable
option when only the public inputs and outputs—never
the “guts”—of the voting process can be truly observed.
Cryptographic auditing may be a big hammer, but it is
the only hammer.
For the same reason, we believe the pedagogical value
of a system like Helios is particularly strong. The con-
trast between classic and open-audit elections is partic-
ularly apparent in this online setting. With Helios, the
voter’s ability is transformed, from entirely powerless
and forced to trust a central system, to empowered with
the ability to ensure that one’s vote was correctly cap-
tured and tallied, without trusting anyone.
5.2 Security Model & Threats
We accept the risk that, if someone compromises the He-
lios server before the end of an election, the secrecy of
individual ballots may be compromised. On the other
hand, we claim that, assuming enough auditors, even a
fully corrupted Helios cannot cheat the election result
without a high chance of getting caught. We now explore
various attacks and how we expect them to be handled.
Incorrect Shufﬂing or Decryption. A corrupt Helios
server may attempt to shufﬂe votes incorrectly or de-
crypt shufﬂed votes incorrectly. Given the overwhelming
probability of catching these types of attacks via crypto-
graphic veriﬁcation, it takes only one auditor to detect
this kind of tampering.
Changing a Ballot or Impersonating a Voter. A cor-
rupt Helios may substitute a new ciphertext for a voter,
replacing his cast vote or injecting a vote when a voter
doesn’t cast one in the ﬁrst place. Even if the ballot sub-
mission server is eventually hosted separately and dis-
tributed among trustees, a corrupt Helios server knows
the username and password for all users, and can thus
easily authenticate and cast a ballot on behalf of a user.
In this case, all of the shufﬂing and decryption veriﬁca-
tions will succeed, because the corruption occurs before
the encryption step.
In the current implementation of Helios, we hope to
counter these attacks through extensive auditing. Previ-
ous analyses [7] have shown that it takes only a small
random sample of voters who verify their vote to defeat
this kind of attack. To encourage voters to audit their
votes, we created the Election Tallying Veriﬁcation pro-
gram, available in well commented source form. The
Election Tallying Veriﬁcation program outputs a copy of
all cast ballots, so that auditors can post this information
independently. We expect multiple auditors to follow this
route and re-publish the complete list of encrypted bal-
lots along with their re-computed election outcome. This
auditing may include re-contacting individual voters and
asking them to verify the hash of their cast encrypted bal-
lot. We also expect that a large majority of voters, maybe
all voters, in fact, will answer at least one auditor who
prompts them to verify their cast encrypted vote.
Corrupting the Ballot. A corrupt Helios may present
a corrupt ballot to Alice, making her believe that she’s se-
lecting one candidate when actually she is voting for an-
other. This kind of attack would defeat the hashed-vote
bulletin-board veriﬁcation, even with multiple auditors,
since Alice receives an entirely incorrect receipt during
the ballot casting process. Helios mitigates this risk by
authenticating users only after the ballot has been ﬁlled
USENIX Association  
17th USENIX Security Symposium 
345
out, so users cannot be individually targeted with corrupt
ballots as easily. However, a corrupt Helios may authen-
ticate voters ﬁrst (voters may not notice), or use other
information (e.g. IP address) to identify voters and target
certain victims for ballot corruption.
To counter this attack, we provide the Ballot Encryp-
tion Veriﬁcation program, again in source form for au-
ditors to verify. This program can be run by individual
voters when they choose to audit a handful of votes be-
fore they choose to truly cast one. Alternatively, auditors,
even auditors who are not eligible to vote in the election,
can prepare ballots and audit them at will.
Auditing is Crucial.
It should be clear from these de-
scriptions that Helios counters attacks through the power
of auditing. In addition to the raw tally, Helios publishes
a list of voter names and corresponding encrypted votes.
Helios then provides supporting evidence for the tally,
given the cast encrypted votes, in the form of a mixnet-
and-decryption proof. Veriﬁcation programs are avail-
able in source form for anyone to review the integrity of
the results.
However, only the individual voters can check the va-
lidity of the cast encrypted ballots.
It is expected that
multiple auditors will check the proof and, when sat-
isﬁed, republish the tally and the list of cast encrypted
ballots, where voters can check that their ballot was cor-
rectly recorded. Helios ensures that, if a large majority
of voters veriﬁes their vote, then the outcome is correct.
However, if voters do not verify their cast ballot, Helios
does not provide any veriﬁcation beyond classic voting
systems.
These expectations are somewhat tautological: voter-
veriﬁed elections function only when at least some frac-
tion of the voters are willing to participate in the veriﬁ-
cation process made available to them. Elections can be
made veriﬁable, but only voters can actually verify that
their secret ballot was correctly recorded.
5.3 Performance
For all performance measurements, we used the server
hardware described in the previous section, and, on the
client side, a 2.2Ghz Macintosh laptop running Firefox 2
over a home broadband connection. We note that perfor-
mance of Firefox 2 was greatly increased when running
on virtualized Linux on the same laptop, indicating that
our measurements are likely a worst-case scenario given
platform-speciﬁc performance peculiarities of Firefox.
and user input is suspended. To an uninformed user, this
is a usability impediment which will require further user
testing. That said, it is a behavior we can easily warn
users about before starting up the Ballot Preparation Sys-
tem, and because this happens only once per user session
– not once per ballot – it is not too onerous.
Timing Measurements. We experimented with a 2-
question election and 500 voters. All timings were per-
formed a sufﬁcient number of times to obtain a stable
average mostly free of testing noise. Note that time mea-
surements that pertain to a set of ballots are expected to
scale linearly with the number ballots and the number of
questions in the election. Our results are presented in
Figure 7.
Operation
Ballot Encryption, in browser
|p| = 1024 bits
Shufﬂing, on server
Shufﬂe Proof, on server
Decryption, on server
Decryption Proof, on server
Complete Audit, on client
Time
300ms
133 s
3 hours
71 s
210 s
4 hours
Figure 7: Timing Measurements
The Big Picture.
It takes only a few minutes of com-
putation to obtain results for a 500-voter election. The
shufﬂe proof and veriﬁcation steps require a few hours,
and are thus, by far, the most computation-intensive por-
tions of the process. We note that both of these steps
are highly parallelizable and thus could be signiﬁcantly
accelerated with additional hardware.
5.4 Extensions
There are many future directions for Helios.
Support for Other Types of Election. Helios cur-
rently supports only simple elections where Alice selects
1 or more out of the proposed candidates. Adding write-
ins and rank-based voting, as well as the associated tal-
lying mechanisms, could prove useful. Helios may also
eventually offer homomorphic-based tabulation, as they
are often easier to explain and verify, though they would
made greater demands of browser-based cryptography.
Java Virtual Machine Startup. The Java Virtual Ma-
chine requires startup time. Our rough measurements in-
dicate anywhere between 500ms and 1.5s on our client
machine. During this time, the browser appears to freeze
Browser-Based Veriﬁcation. The current veriﬁcation
process for the ballot encryption step is a bit tedious, re-
quiring the use of a browser and a Python program. We
could write a JavaScript-only veriﬁcation program that
346 
17th USENIX Security Symposium 
USENIX Association
could be provided directly by auditors while running en-
tirely in the voter’s browser to check that Helios is deliv-
ering authentic ballots. There are some issues to deal
with, notably cross-domain requests, but it does seem
possible and desirable to accomplish browser-only bal-
lot encryption veriﬁcation.
Similarly, it is certainly possible to audit an entire elec-
tion using JavaScript and LiveConnect for computation-
ally intensive operations. Letting auditors deliver the
source code for these veriﬁcation programs would allow
any voter to audit the entire process straight from their
browser.
many different settings. In the late 1990s, Hushmail be-
gan providing web-based encrypted email using a Java
applet. A couple of years later, George Danezis showed
how to use LiveConnect for fast JavaScript-based cryp-
tography, and the EVOX voting project [12] used similar
technology to encrypt votes in a blind-signature-based
scheme. The Stanford SRP project [18] also uses Live-
Connect for browser-based cryptography and indicates
how one can get LiveConnect to work in browsers other
than Firefox. The recent Clipperz Crypto Library [1]
provides web-based cryptography in pure JavaScript, in-
cluding a multi-precision integer library.
Distributing the Shufﬂing and Decryption. For im-
proved privacy guarantees, Helios can be extended to
support shufﬂing and decryption by multiple trustees.
The Helios server would then only focus on provid-
ing the bulletin board and voting booth functionality.
Trustees would be provided with standalone Python pro-
grams that perform threshold key generation, partial
shufﬂing and threshold decryption. They could individ-
ually audit the program’s source code. With these exten-
sions, Helios would resemble classic cryptographic vot-
ing protocols more closely, and would provide stronger
privacy guarantees.
Improving Authentication. Currently, our protocol
requires that most voters audit their cast ballot, otherwise
the Helios server could impersonate voters and change
the election outcome. Future version of Helios should
consider ofﬂoading authentication to a separate authenti-
cation service. If feasible with browser-based cryptogra-
phy, Helios should use digital signatures to authenticate
each ballot in a publicly veriﬁable manner.
6 Related Work
There is a plethora of theoretical cryptographic voting
work reviewed and cited in [11, 4]. We do not attempt to
re-document this signiﬁcant body of work here.
Open-audit voting implementations. There are only
a small handful of notable open-audit voting implemen-
tations. VoteHere’s advanced protocols for mixnets and
coercion-free ballot casting [3] have been implemented
and deployed in test environments. The Punchscan vot-
ing system [2] has also been implemented and used in a
handful of real student government elections, with video
evidence available for all to see.
7 Conclusion
Helios is the ﬁrst publicly available implementation of
a web-based open-audit voting system. It ﬁlls an inter-
esting niche: elections for small clubs, online communi-
ties, and student governments need trustworthy elections
without the signiﬁcant overhead of coercion-freeness.
We hope that Helios can be a useful educational resource
for open-audit voting by providing a valuable service –
outsourced, veriﬁable online elections – that could not be
achieved without the paradigm-shifting contributions of
cryptographic veriﬁability.
8 Acknowledgements
The author would like to thank Ronald L. Rivest, Shai
Halevi, Chris Peikert, Susan Hohenberger, Alon Rosen,
Steve Weis, and Greg Morrisett for alpha testing the
Helios system, Adam Barth for pointing out the dy-
namic window creation technique for the Internet Ex-
plorer work-around, and the Usenix Security reviewers
for insightful suggestions in improving and crystalizing
the presentation of this work.
References
[1] Clipperz. http://clipperz.org, last viewed
on January 30th, 2008.
[2] PunchScan.
http://punchscan.org,
viewed on January 30th, 2008.
[3] VoteHere.
http://votehere.com,
viewed on January 30th, 2008.
last
last
[4] Ben Adida. Advances in Cryptographic Voting Sys-
tems. PhD thesis, August 2006. http://ben.
adida.net/research/phd-thesis.pdf.
Browser-based cryptography. Cryptographic con-
structs have been implemented in browser-side code in
[5] Josh Benaloh. Simple Veriﬁable Elections. In EVT
’06, Proceedings of the First Usenix/ACCURATE
USENIX Association  
17th USENIX Security Symposium 
347
Electronic Voting Technology Workshop, August 1st
2006, Vancouver, BC,Canada., 2006. Available on-
line at http://www.usenix.org/events/
evt06/tech/.
[16] Kazue Sako and Joe Kilian. Receipt-free mix-type
voting scheme - a practical solution to the imple-
mentation of a voting booth.
In EUROCRYPT,
pages 393–403, 1995.
[17] Guido van Rossum. The Python Programming Lan-
guage. http://python.org, last viewed on
January 30th, 2008.
[18] Thomas D. Wu. The secure remote password pro-
tocol. In NDSS. The Internet Society, 1998. http:
//srp.stanford.edu/,
last visited on Jan-
uary 30th, 2008.
[6] Josh Benaloh. Ballot Casting Assurance via Voter-
Initiated Poll Station Auditing.
In EVT ’07, Pro-
ceedings of the Second Usenix/ACCURATE Elec-
tronic Voting Technology Workshop, August 6th
2007, Boston, MA, USA., 2007. Available on-
line at http://www.usenix.org/events/
evt07/tech/.
[7] C. Andrew Neff.
Election Conﬁdence.
http://www.votehere.com/papers/
ElectionConfidence.pdf,
January 30th, 2008.
last viewed on
[8] David Chaum and Torben P. Pedersen. Wallet
databases with observers. In Ernest F. Brickell, edi-
tor, CRYPTO, volume 740 of Lecture Notes in Com-
puter Science, pages 89–105. Springer, 1992.
[9] Amos Fiat and Adi Shamir. How to prove your-
self: Practical solutions to identiﬁcation and sig-
nature problems.
In Andrew M. Odlyzko, editor,
CRYPTO, volume 263 of Lecture Notes in Com-
puter Science, pages 186–194. Springer, 1986.
[10] Google. Gmail. http://gmail.com.
[11] Dimitris Gritzalis, editor. Secure Electronic Voting.
Kluwer Academic Publishers, 2002.
[12] Mark Herschberg. Secure electronic voting over
the world wide web. Master’s thesis, May
1997.
http://groups.csail.mit.edu/
cis/voting/herschberg-thesis/.
[13] Ari Juels, Dario Catalano, and Markus Jakobs-
son. Coercion-resistant electronic elections. In Vi-
jay Atluri, Sabrina De Capitani di Vimercati, and
Roger Dingledine, editors, WPES, pages 61–70.
ACM, 2005.
[14] L. Masinter. The Data URL Scheme. http:
last
//tools.ietf.org/html/rfc2397,
viewed on January 30th, 2008.
[15] C. Andrew Neff. A veriﬁable secret shufﬂe and
its application to e-voting. In CCS 2001, Proceed-
ings of the 8th ACM Conference on Computer and
Communications Security. November 6-8, 2001,
Philadelphia, Pennsylvania, USA., pages 116–125.
ACM, 2001.
348 
17th USENIX Security Symposium 
USENIX Association