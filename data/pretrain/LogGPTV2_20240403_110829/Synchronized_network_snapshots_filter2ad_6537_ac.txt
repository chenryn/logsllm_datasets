design of Speedlight. Speedlight leverages the match-action
stages and stateful memory found in emerging programmable
ASICs such as the Barefoot To"no [8]. Using these tools, each
processing unit can execute limited computation over packet
headers/metadata using state in the form of register arrays.
Though the ASICs are powerful, their limitations and other
network-speci"c concerns make the translation from the
preceding snapshot algorithm to Speedlight di$cult. This
407
Synchronized Network Snapshots
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
section describes the design of Speedlight’s data plane while
Section 6 describes the control plane that complements it.
5.1 Packet Headers
As mentioned in Section 4.2, network snapshots require ad-
ditional header information. Speedlight does not require
host cooperation, so headers are added by the !rst snapshot-
enabled router, and removed before delivery to hosts. The
required !elds are as follows. If channel state is not desired,
items preceeded by a − may be omitted.
• Packet Type can take one of two values: initiation or
data. Most tra"c is classi!ed as data; initiation packets
are special control messages that we describe in Section 6.
• Snapshot ID is set at each hop to be the processing
unit’s current snapshot ID. Conceptually, it speci!es the
snapshot to which the send of the packet is a member,
and informs the current processing node whether the
packet is part of a new one, or in-#ight from an old one.
− Channel ID uniquely identi!es each upstream neighbor.
If there are multiple channels between neighbors, there
should be an ID for each. Our reference implementation
assumes switched Ethernet and no packet re-submission,
so for ingress processing units, there is only one upstream
neighbor (the external neighbor), and for egress units,
the number of upstream neighbors is bounded by the
number of ingress ports on the local router.
5.2 Stateful Variables
Some amount of inter-packet persistent state is also required
in each processing unit. These mirror the state in Figure 3.
• Counters store target local state of the snapshot. These
are managed separately from the snapshot protocol. This
variable corresponds to state in Figure 3.
• Snapshot ID is an integer representing the node’s cur-
rent snapshot ID. This value corresponds to sid.
• Snapshot Value[max snapshot id] stores the snap-
shoted state and, if necessary, channel state. These must
be encoded into a value that !ts into available register
space. Equivalent to snaps.
− Last Seen[# of neighbors] tracks the last snapshot ID
from each upstream neighbor. See de!nition of Chan-
nel ID for a discussion of what constitutes an upstream
neighbor in our system. Corresponds to lastSeen.
to the snapshot logic, only intersecting if the target state
requires it (e.g., to ignore snapshot tra"c). The next step is
to examine the snapshot header.
The core of the snapshot processing procedure is similar to
the one described in Section 4.2. The processing unit updates
the neighbor’s last seen value and then tests to see if the
packet’s snapshot ID is less than, greater than, or equal to
the processing unit’s local ID. As mentioned in Section 4.2,
in-#ight packet handling is metric-speci!c and con!gured
by the network operator, and much of the algorithm can be
elided if channel state is not necessary.
Di!erences from the idealized algorithm. The primary
di$erences between Speedlight’s data plane and the algo-
rithm in Section 4.2 derive from hardware limitations in
high-speed programmable switches. One key limitation is
that today’s switches do not have the ability to loop through
(at line rate) intermediate snapshot IDs when the packet’s
ID and the local ID di$er by more than 1. Re-circulation
loops are not possible as they would violate FIFO ordering.
Instead, our implementation produces a complete and con-
sistent snapshot i$ the ID of all upstream neighbors and
the local processing unit di$er by at most 1. The following
section describes how we detect and mitigate inconsistency.
Another is that the space of possible snapshot IDs and
storage of the snapshot state are tightly constrained. As
such, Speedlight enables rollover of the snapshot ID to 0
after reaching the maximum ID. For this, we assume that
no ID in the system is ever ‘lapped’, i.e., that the maximum
di$erence between any two snapshot IDs in the system is
(max snapshot id − 1). This can be enforced by the snapshot
observers out-of-band. This assumption allows us to rely on
the contents of the Last Seen array as a reference to detect if
the packet’s ID and/or the local ID have rolled over.
Snapshot Noti"cations. We mask the above de!ciencies
using the control plane. Supporting that process is a noti!-
cation channel between the two planes. After any update of
either the local Snapshot ID or of any Last Seen array entry,
the data plane exports a noti!cation to the CPU to assist
in determining snapshot progress/completeness. For an up-
stream neighbor n, this noti!cation includes the former value
of LastSeen[n] along with the former and new Snapshot ID.
Depending on the case, the former and new values may not
be distinct. It will become clear in the following section why
we need all four values.
5.3 Packet Processing Procedure
Figures 4 and 5 show the operation of ingress and egress pro-
cessing units in Speedlight. Both approximate the algorithm
presented in Section 4 with a few notable di$erences.
In both types of processing units, the !rst step is to read the
target state and update it. The update process is orthogonal
6 CONTROL PLANE COORDINATION
Speedlight’s data plane is augmented with a control plane to
form a two-tier, mutualistic system in which each is respon-
sible for masking the limitations of the other. This section
examines some of the key scenarios in which the control
plane is necessary.
408
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Nofel Yaseen, John Sonchack, and Vincent Liu
()*
-
&’"#$%%
!"#$%%
+
,
Figure 6: The three ways in which a processing unit
can be induced to take a new snapshot. The initiation
can come from: (1) a neighboring device, (2) another
processing unit within the same device, or (3) from a
control plane initiation message that, for every port,
travels CPU→ingress→egress.
Synchronized snapshot initiation. One of the primary
responsibilities of Speedlight’s control plane is to initiate
snapshots in a timely fashion. At a high level, it does this
by (a) synchronizing clocks between the control planes of
di!erent network devices, and then (b) executing a global,
coordinated network snapshot initiation. Clock synchroniza-
tion is a well-studied "eld, and Speedlight leverages this
existing work. In our implementation, we use PTP, although
the choice of protocol is orthogonal to our design.
Coordinated snapshot initiation, (b), is executed using the
synchronized time. A snapshot observer "rst schedules a
snapshot i for a given time in the future by registering the
event with all device control planes. When the time comes,
the control planes broadcast a message to all local ingress
processing units. The message includes a snapshot header
with snapshot ID set to i, the newly initiated snapshot. The
ingress unit will process this snapshot header much like a
regular packet—initiating a new snapshot if i is larger than
the current snapshot ID. The control plane in this case is
treated as an additional neighbor for the last seen array,
though this value is only used for rollover detection and not
to detect snapshot completion. After processing is complete,
the ingress processing unit forwards the initiation to the
egress unit of the same port, which drops the packet after
processing. Unlike regular snapshot header processing, the
packet is not included in the update counter stage and is
never considered an in-#ight packet.
Including control plane initiation, there are three ways
by which a processing unit can be induced to take a new
snapshot. The three methods, illustrated in Figure 6, cover
normal snapshot-enabled packets from external (1) and in-
ternal (2) neighbors that have already begun the snapshot, as
well as the control plane initiation messages (3). With these
three initiation methods, Speedlight ensures a level of start-
time synchronization beyond what a similar counter polling
framework could achieve (see Section 8). That is in addition
to the consistency provided by the snapshot protocol itself.
Detecting snapshot completion and inconsistency. In a
classical distributed snapshot, a node’s local state is valid as
• lastRead[unit]: Latest "nalized snapshot for each unit.
− ctrlSnapID[unit]: Controller’s view of units’ current IDs.
− ctrlLastSeen[unit][neighbor]: Controller’s view of the last
seen array for each processing unit.
1 Function OnNotifyCS(unit, currentID, neighbor, currentLS):
2
if currentID ! ctrlSnapID[unit] then
3
4
5
6
7
8
9
10
11
12
13
14
15
/* New snapshot ID */
done ← min(ctrlLastSeen[unit][*])
for i ← done + 1 to currentID do
Mark i as inconsistent
ctrlSnapID[unit] ← currentID
if currentLS ! ctrlLastSeen[unit][neighbor] then
/* New last seen ID */
ctrlLastSeen[unit][neighbor] ← currentLS
toRead ← min(ctrlLastSeen[unit][*])
for i ← lastRead[unit] + 1 to toRead do
if i is not inconsistent then
Read snapshot value for i from unit
lastRead[unit] ← toRead
16 Function OnNotifyNoCS(unit, currentID):
17
if currentID ! lastRead[unit] then
18
19
20
21
22
validValue ← Read value for curr ent I D from unit
for i ← currentID to lastRead[unit] + 1 do
value ← Read snapshot value i from unit
If value is uninitialized use validValue, otherwise
validValue ← value
lastRead[unit] ← currentID
Figure 7: Control plane detection of complete and in-
consistent snapshots with and without channel state.
Note that min() must be rollback aware, but lastRead
can be used as a reference. Global state preceeded by
‘−’ are only necessary for channel state.
soon as it takes a local snapshot, and the state of the channel
is valid when it receives an up-to-date snapshot marker on
that channel. The global snapshot is complete when all such
state is valid. In Speedlight, the control plane is responsible
for gathering state and detecting the completion of snap-
shots. It is also responsible for detecting when snapshotted
values become inconsistent. This scenario only occurs when
channel state is required, and is not present in the original
Chandy-Lamport algorithm. Rather, it is the direct result of
the hardware limitations described in Section 5.
Figure 7 shows how a Speedlight control plane processes
snapshot noti"cations to detect completion/inconsistency
both with and without channel state.
(1) w/ Channel State: Recall that in the common case, a
processing unit is "nished with snapshot i when ∀u :
lastSeen[u] ≥ i. Hardware limitations introduce an extra
requirement: that the snapshot ID advances by exactly
1 each time. For example, if unit’s snapshot ID is 5 and
409
Synchronized Network Snapshots
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
it receives a message from the snapshot 2 epoch, ide-
ally the data plane would increment associated channel
state for snapshots 3–5. Unfortunately, current ASICs
cannot execute (at line rate) the required instructions
to keep those intermediate snapshot values consistent.
Speedlight marks them as inconsistent and handles no-
ti!cation drops conservatively.
(2) w/o Channel State: The simpler case, a processing unit
is done with a snapshot as soon as it increments its ID,
records its local state, and sends a noti!cation to the
CPU. The snapshot ID can still skip forward; however,
in this case, the CPU can infer the proper snapshot value.
See lines 19–21 in Figure 7. Note that we must check for
value initialization to account for noti!cation drops.
All values are shipped to the snapshot observer, which
assembles snapshots from all the devices with which it reg-
istered the snapshot. The observer computes completion
and executes retries. If a device fails, it may timeout and be
excluded from the global snapshot.
Ensuring liveness. An extension of the above two responsi-
bilities, the control plane is also responsible for ensuring that
snapshots are eventually initiated and completed at every
processing unit. There are two reasons why this may not
happen without assistance.
The !rst is packet drops of either the initiation message or
update noti!cations. Especially for ingress processing units
whose upstream neighbor is not snapshot enabled (e.g., a
unit connected to an end host), a dropped initiation means
that the processing unit will never advance its snapshot ID.
Dropped noti!cations can also be problematic as they may
cause snapshots to be incorrectly marked as inconsistent. To
address both issues, Speedlight control planes will resend
initiations for incomplete snapshots after a timeout. This is
safe as duplicate and outdated control plane initiations are
ignored by the data plane, and duplicate noti!cations are
dropped at the control plane. Speedlight’s control plane can
also proactively poll the data plane registers to help recover
from simple cases of noti!cation drops.
The second is a lack of tra"c when channel state is re-
quired. As completion of the snapshot is gated on receiving
an up-to-date snapshot marker from all upstream neighbors,
if there is no such tra"c on which to piggyback, the snap-
shot may never complete. This can happen due to tra"c
patterns, or it can be a natural consequence of the routing
con!guration (e.g., when using spanning trees or up-down
data center routing). Speedlight has separate mechanisms for
each situation. For a tra"c-related absence of packets, we
can inject broadcasts into the network that force propagation
of snapshot IDs. For a lack of tra"c due to network struc-
ture, operators can con!gure the removal of non-utilized
upstream neighbors from ctrlLastSeen consideration.
Node attachment. Finally, we discuss the process of adding
new devices to the network. For every snapshot, the snapshot
observer keeps a list of all currently active devices. When
adding a new device, it must be registered with the snapshot
observer before it is included in the next snapshot. New
devices will not start with the current snapshot ID. Instead
the control plane initializes all state (registers in the data
plane and tracking state at the control plane) to 0. As soon
as tra"c arrives from neighboring devices, the snapshot
will jump ahead to the current value, if it is not 0. If it does
jump ahead, the snapshot observer will ignore any spurious
snapshot completions as the device would not have been in
its expected device set when initiating the snapshot.
7 IMPLEMENTATION
We implemented a prototype of Speedlight with all of the
data plane and control plane functionality described in Sec-
tions 5 and 6 for Wedge 100BF-series switches [19]. Wedge
100BF switches are driven by the Barefoot To!no, a commod-
ity multi-Terabit data plane ASIC that integrates recent de-
signs for programmable line rate packet parsing [14], match-
action forwarding [9], and stateful processing [36].
7.1 Data Plane
The Speedlight data plane is a pipeline of P4 match-action
tables that compiles to the To!no. We created multiple ver-
sions for di#erent metrics, with and without wraparound
and channel state support. Each implementation contains
around 1000 lines of P4-14 code. Figures 4 and 5 show the
logical ingress and egress match-action pipelines, assuming
a snapshot that requires channel state.
Table 1 summarizes the key resources required by our pro-
totype, broken down by the resources’ logical functionality.
We make no guarantee of the optimality of our prototype;
the statistics represent a rough upper bound on the resource
utilization of Speedlight. Even so, the prototype occupies
less than 25% of any given type of dedicated resource—the
remainder can be used for other data plane functionality.
As Table 1 shows, the prototype utilizes 10 to 12 physical
processing stages in the To!no to satisfy sequential depen-
dencies in its control $ow. It does not prohibit those stages
from also implementing other ingress or egress data plane
functions. Anything independent of the snapshot logic, such
as forwarding or access control, can be compiled into the
same stages and operate in parallel.
Speedlight !ts well with other switch responsibilities. Its
data plane is most expensive in terms of stateful ALUs (sALU),
used to implement operations on register arrays, e.g., updat-
ing or initializing a snapshot. This is opposite of typical data
plane functionality, which tends to apply mostly stateless
operations to packet headers.
410
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Nofel Yaseen, John Sonchack, and Vincent Liu
Variant
Packet + Wrap + Chnl.
Count Around
State
$%&#’%(
$%&#’%(