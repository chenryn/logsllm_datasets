### Design of Speedlight

Speedlight leverages the match-action stages and stateful memory found in emerging programmable ASICs, such as the Barefoot Tofino. These tools enable each processing unit to perform limited computations over packet headers and metadata using register arrays. Although these ASICs are powerful, their limitations and other network-specific concerns make translating the preceding snapshot algorithm into Speedlight challenging. This section describes the design of Speedlight’s data plane, while Section 6 covers the complementary control plane.

#### 5.1 Packet Headers

As mentioned in Section 4.2, network snapshots require additional header information. Speedlight does not require host cooperation; thus, headers are added by the first snapshot-enabled router and removed before delivery to hosts. The required fields are as follows. If channel state is not needed, items preceded by a `−` may be omitted.

- **Packet Type**: Can take one of two values: `initiation` or `data`. Most traffic is classified as `data`; `initiation` packets are special control messages described in Section 6.
- **Snapshot ID**: Set at each hop to the processing unit’s current snapshot ID. It specifies the snapshot to which the packet belongs and informs the current processing node whether the packet is part of a new snapshot or an ongoing one.
- **Channel ID**: Uniquely identifies each upstream neighbor. If there are multiple channels between neighbors, each should have an ID. Our reference implementation assumes switched Ethernet with no packet re-submission. For ingress processing units, there is only one upstream neighbor (the external neighbor), and for egress units, the number of upstream neighbors is bounded by the number of ingress ports on the local router.

#### 5.2 Stateful Variables

Each processing unit requires some inter-packet persistent state, mirroring the state in Figure 3.

- **Counters**: Store the target local state of the snapshot, managed separately from the snapshot protocol.
- **Snapshot ID**: An integer representing the node’s current snapshot ID, corresponding to `sid`.
- **Snapshot Value[max snapshot id]**: Stores the snapshotted state and, if necessary, channel state. These must fit into available register space, equivalent to `snaps`.
- **Last Seen[# of neighbors]**: Tracks the last snapshot ID from each upstream neighbor. See the definition of Channel ID for what constitutes an upstream neighbor in our system, corresponding to `lastSeen`.

The core of the snapshot processing procedure is similar to that described in Section 4.2. The processing unit updates the neighbor’s last seen value and then tests whether the packet’s snapshot ID is less than, greater than, or equal to the processing unit’s local ID. In-flight packet handling is metric-specific and configured by the network operator, and much of the algorithm can be elided if channel state is not necessary.

**Differences from the Idealized Algorithm:**
- **Hardware Limitations**: High-speed programmable switches cannot loop through intermediate snapshot IDs when the packet’s ID and the local ID differ by more than 1. Instead, our implementation produces a complete and consistent snapshot if the ID of all upstream neighbors and the local processing unit differ by at most 1.
- **Snapshot ID Rollover**: Speedlight enables rollover of the snapshot ID to 0 after reaching the maximum ID. We assume that no ID in the system is ever 'lapped', i.e., the maximum difference between any two snapshot IDs in the system is `(max snapshot id − 1)`. This assumption allows us to rely on the contents of the Last Seen array to detect if the packet’s ID and/or the local ID have rolled over.

**Snapshot Notifications:**
We use the control plane to mask the above deficiencies. A notification channel between the data and control planes helps determine snapshot progress and completeness. After updating the local Snapshot ID or any Last Seen array entry, the data plane exports a notification to the CPU. For an upstream neighbor `n`, this notification includes the former value of `LastSeen[n]` along with the former and new Snapshot ID. Depending on the case, the former and new values may not be distinct.

#### 5.3 Packet Processing Procedure

Figures 4 and 5 show the operation of ingress and egress processing units in Speedlight, approximating the algorithm presented in Section 4 with a few notable differences.

- **Ingress and Egress Units**: The first step is to read the target state and update it. The update process is orthogonal to the snapshot logic, only intersecting if the target state requires it (e.g., to ignore snapshot traffic). The next step is to examine the snapshot header.

### 6 Control Plane Coordination

Speedlight’s data plane is augmented with a control plane to form a two-tier, mutualistic system where each masks the limitations of the other. This section examines key scenarios where the control plane is necessary.

#### Synchronized Snapshot Initiation

One of the primary responsibilities of Speedlight’s control plane is to initiate snapshots in a timely fashion. This is achieved by:

- **Clock Synchronization**: Synchronizing clocks between the control planes of different network devices.
- **Coordinated Snapshot Initiation**: Executing a global, coordinated network snapshot initiation using synchronized time. A snapshot observer schedules a snapshot for a given future time by registering the event with all device control planes. When the time comes, the control planes broadcast a message to all local ingress processing units, including a snapshot header with the snapshot ID set to the newly initiated snapshot.

**Initiation Methods:**
- **External Neighbor**: Normal snapshot-enabled packets from external neighbors.
- **Internal Neighbor**: Packets from internal neighbors that have already begun the snapshot.
- **Control Plane Initiation**: Messages from the control plane to initiate a new snapshot.

#### Detecting Snapshot Completion and Inconsistency

In a classical distributed snapshot, a node’s local state is valid once it takes a local snapshot, and the state of the channel is valid when it receives an up-to-date snapshot marker. The global snapshot is complete when all such state is valid. Speedlight’s control plane is responsible for gathering state and detecting the completion of snapshots, as well as detecting when snapshotted values become inconsistent.

- **With Channel State**: A processing unit is finished with snapshot `i` when `∀u : lastSeen[u] ≥ i`. Hardware limitations introduce an extra requirement: the snapshot ID must advance by exactly 1 each time.
- **Without Channel State**: A processing unit is done with a snapshot as soon as it increments its ID, records its local state, and sends a notification to the CPU.

All values are shipped to the snapshot observer, which assembles snapshots from all registered devices. The observer computes completion and executes retries. If a device fails, it may timeout and be excluded from the global snapshot.

#### Ensuring Liveness

The control plane ensures that snapshots are eventually initiated and completed at every processing unit. Issues include:

- **Packet Drops**: Dropped initiation messages or update notifications. Speedlight control planes will resend initiations for incomplete snapshots after a timeout.
- **Lack of Traffic**: When channel state is required, the snapshot may never complete if there is no traffic. Speedlight injects broadcasts into the network to force propagation of snapshot IDs.

#### Node Attachment

When adding new devices to the network, they must be registered with the snapshot observer before being included in the next snapshot. New devices start with all state initialized to 0. As soon as traffic arrives from neighboring devices, the snapshot will jump ahead to the current value, if it is not 0. Spurious snapshot completions are ignored until the device is in the expected device set.

### 7 Implementation

We implemented a prototype of Speedlight with all the data and control plane functionality described in Sections 5 and 6 for Wedge 100BF-series switches, driven by the Barefoot Tofino. The Speedlight data plane is a pipeline of P4 match-action tables, with multiple versions for different metrics, with and without wraparound and channel state support. Each implementation contains around 1000 lines of P4-14 code. Figures 4 and 5 show the logical ingress and egress match-action pipelines, assuming a snapshot that requires channel state.

**Resource Utilization:**
Table 1 summarizes the key resources required by our prototype, broken down by logical functionality. The prototype utilizes 10 to 12 physical processing stages in the Tofino to satisfy sequential dependencies in its control flow. It does not prohibit those stages from also implementing other ingress or egress data plane functions. Anything independent of the snapshot logic, such as forwarding or access control, can be compiled into the same stages and operate in parallel.

Speedlight fits well with other switch responsibilities, with its data plane being most expensive in terms of stateful ALUs (sALU), used to implement operations on register arrays, e.g., updating or initializing a snapshot. This is opposite to typical data plane functionality, which tends to apply mostly stateless operations to packet headers.