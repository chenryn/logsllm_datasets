forms a number of additional checks and operations.
All globals and allocated objects are registered in the
metapool to which they belong (derived from the target
partition of the return pointer). Loads and stores that use
pointers loaded from TU metapools are checked by look-
ing up the target address in the metapool lookup table.
Note that this works whether or not the pointer value
is a dangling pointer, and even for pointers (cid:147)manufac-
tured(cid:148) by casting arbitrary integers. Similarly, it checks
function pointers obtained from TU metapools to ensure
that they only access one of the target functions of that
pointer predicted by DSA. Run-time checks also ensure
that pointers to TK objects that are loaded from TU mem-
ory objects are checked since a TU object may have an
invalid value for the TK pointer. All array indexing oper-
ations for TK or TU metapools are checked in the lookup
table, which records the bounds for each object [14]5.
Note that the VM relies on the safe execution environ-
5Note that we permit a pointer to (cid:147)leave(cid:148) its target object and later
return, as long as it is not accessed while it is out of bounds [32].
ment to protect the VM code and data memory instead of
using the MMU and incurring the cost of switching page
tables on every VM invocation. Since the environment
prevents access to unregistered data objects or outside
the bounds of legal objects, we can simply monitor all
run-time kernel object registrations and ensure that they
do not reside in VM code or data pages.
A subset of the SVA instruction set, SVA-OS, provides
instructions designed to support an operating system’s
special interaction with the hardware [10, 11]. These in-
clude instructions for loading from/storing to I/O mem-
ory, con(cid:2)guring the MMU, and manipulating program
state. An important property is that a kernel ported to
SVA using the SVA-OS instructions contains no assem-
bly code; this simpli(cid:2)es the compiler’s task of safety
checking within SVA. Nevertheless, these instructions
provide low-level hardware interactions that can gener-
ate all the problems described in Section 2 if used incor-
rectly; it is very dif(cid:2)cult for the compiler to check their
correct use in the original design. In particular, the VM
does not perform any special checks for processor state
objects, direct stack manipulation, memory mapped I/O
locations, MMU con(cid:2)guration changes, or DMA opera-
tions. Also, it disallows self-modifying code.
For example, we tested two [39, 42] of the three re-
ported low-level errors we found for Linux 2.4.22, the
kernel version ported to SVA (we could not try the
third [3] for reasons explained in Section 7.1). Although
both are memory safety violations, neither of them was
detected or prevented by the original SVA.
the kernel deallocator. Our new design calls a single in-
struction named sva swap integer (see Table 1) that
saves the old processor state and loads the new state in a
single operation.
This design has all of the necessary features to pre-
serve memory safety when context switching. The
sva swap integer instruction allocates the memory
buffer to hold processor state within the VM’s memory
and returns an opaque integer identi(cid:2)er which can be
used to re-load the state in a subsequent call to sva -
swap integer. Combined with SVA’s original pro-
tections against manufactured pointers, this prevents the
kernel from modifying or deallocating the saved proces-
sor state buffer. The design also ensures correct deal-
location of the memory buffer used to hold processor
state. The VM tracks which identi(cid:2)ers are mapped to al-
located state buffers created by sva swap integer;
these memory buffer/identi(cid:2)er pairs are kept alive until
the state is placed back on the processor by another call
to sva swap integer. Once state is placed back on
the processor, the memory buffer is deallocated, and the
identi(cid:2)er invalidated to prevent the kernel from trying to
restore state from a deallocated state buffer.
Finally, sva swap integer will either succeed to
context switch and return an identi(cid:2)er for the saved pro-
cessor state, or it will fail, save no processor state, and
continue execution of the currently running thread. This
ensures that the kernel stack and the saved processor state
are always synchronized.
5 Design
Our design is an extension of the original Secure Virtual
Architecture (SVA) described in Section 4. SVA pro-
vides strong memory safety guarantees for kernel code
and an abstraction of the hardware that is both low-level
(e.g., context switching, I/O, and MMU con(cid:2)guration
policies are still implemented in the kernel), yet easy to
analyze (because the SVA-OS instructions for interact-
ing with hardware are slightly higher level than typical
processor instructions). Below, we describe our exten-
sions to provide memory safety in the face of errors in
kernel-hardware interactions.
5.1 Context Switching
Previously, the SVA system performed context switch-
ing using the sva load integer and sva save -
integer instructions [10], which saved from and
loaded into the processor the processor state (named In-
teger State). These instructions stored processor state in
a kernel allocated memory buffer which could be later
modi(cid:2)ed by memory-safe store instructions or freed by
5.2 Thread Management
A thread of execution consists of a stack and a saved
processor state that can be used to either initiate or con-
tinue execution of the thread. Thread creation is there-
fore comprised of three operations: allocating memory
for the new thread’s stack, initializing the new stack, and
creating an initial state that can be loaded on to the pro-
cessor using sva swap integer.
The VM needs to know where kernel stacks are lo-
cated in order to prevent them from being written by
load and store instructions. We introduce a new SVA in-
struction, sva declare stack, which a kernel uses
to declare that a memory object will be used as a
stack. During pointer analysis, any pointers passed
to sva declare stack and pointers that alias with
such pointers are marked with a special DeclaredStack
(cid:3)ag; this (cid:3)ag indicates that run-time checks are needed
on stores via such pointers to ensure that they are not
writing into a kernel stack. The compiler, on seeing
an sva declare stack instruction, will also verify,
statically (via pointer analysis) if possible but at run-time
if necessary, that the memory object used for the new
stack is either a global or heap object; this will prevent
Name
sva swap integer
sva declare stack
sva release stack
sva init stack
Description
Saves the current processor state into an internal memory buffer, loads previously saved
state referenced by its ID, and returns the ID of the new saved state.
Declares that a memory object is to be used as a new stack.
Declares that a memory object is no longer used as a stack.
Initializes a new stack.
Table 1: SVA Instructions for Context Switching and Thread Creation.
stacks from being embedded within other stacks. After
this check is done, sva declare stack will unregis-
ter the memory object from the set of valid memory ob-
jects that can be accessed via loads and stores and record
the stack’s size and location within the VM’s internal
data structures as a valid kernel stack.
To initialize a stack and the initial processor state
that will use the memory as a stack, we introduce
sva init stack;
this instruction will initialize the
stack and create a new saved Integer State which can
be used in sva swap integer to start executing
the new thread. The sva init stack instruction
veri(cid:2)es (either statically or at run-time) that its argu-
ment has previously been declared as a stack using
sva declare stack. When the new thread wakes
up, it will (cid:2)nd itself running within the function speci(cid:2)ed
by the call to sva init stack; when this function re-
turns, it will return to user-space at the same location as
the original thread entered.
Deleting a thread is composed of two operations. First,
the memory object containing the stack must be deal-
located. Second, any Integer State associated with the
stack that was saved on a context switch must be in-
validated. When the kernel wishes to destroy a thread,
it must call the sva release stack instruction; this
will mark the stack memory as a regular memory object
so that it can be freed and invalidates any saved Integer
State associated with the stack.
When a kernel stack is deallocated, there may be
pointers in global or heap objects that point to mem-
ory (i.e., local variables) allocated on that stack. SVA
must ensure that dereferencing such pointers does not
violate memory safety. Type-unsafe stack allocated ob-
jects are subject to load/store checks and are registered
with the SVA virtual machine [10].
In order for the
sva release stack instruction to invalidate such
objects when stack memory is reclaimed, the VM records
information on stack object allocations and associates
this information with the metadata about the stack in
which the object is allocated. In this way, when a stack is
deallocated, any live objects still registered with the vir-
tual machine are automatically invalidated as well; run-
time checks will no longer consider these stack allocated
objects to be valid objects. Type-known stack allocated
objects can never be pointed to by global or heap objects;
SVA already transforms such stack allocations into heap
allocations [15, 10] to make dangling pointer dereferenc-
ing to type-known stack allocated objects safe [15].
5.3 Memory Mapped I/O
To ensure safe use of I/O memory, our system must be
able to identify where I/O memory is located and when
the kernel is legitimately accessing it.
Identifying the location of I/O memory is straightfor-
ward.
In most systems, I/O memory is located at (or
mapped into) known, constant locations within the sys-
tem’s address space, similar to global variables. In some
systems, a memory-allocator-like function may remap
physical page frames corresponding to I/O memory to
a virtual memory address [5]. The insight is that I/O
memory is grouped into objects just like regular mem-
ory; in some systems, such I/O objects are even allocated
and freed like heap objects (e.g., Linux’s ioremap()
function [5]). To let the VM know where I/O memory
is located, we must modify the kernel to use a pseudo-
allocator that informs the VM of global I/O objects; we
can also modify the VM to recognize I/O (cid:147)allocators(cid:148)
like ioremap() just like it recognizes heap allocators
like Linux’s kmalloc() [5].
Given this information, the VM needs to determine
which pointers may point to I/O memory. To do so,
we modi(cid:2)ed the SVA points-to analysis algorithm [24]
to mark the target (i.e., the (cid:147)points-to set(cid:148)) of a pointer
holding the return address of the I/O allocator with a spe-
cial I/O (cid:3)ag. This also (cid:3)ags other pointers aliased to
such a pointer because any two aliased pointers point to
a common target [24].
We also modi(cid:2)ed the points-to analysis to mark I/O
memory as type-unknown. Even if the kernel accesses
I/O memory in a type-consistent fashion, the (cid:2)rmware
on the I/O device may not. Type-unknown memory in-
curs additional run-time checks but allows kernel code
to safely use pointer values in such memory as pointers.
We also extended SVA to record the size and virtual
address location of every I/O object allocation and deal-
location by instrumenting every call to the I/O allocator
and deallocator functions. At run-time, the VM records
these I/O objects in a per-metapool data structure that
is disjoint from the structure used to record the bounds
of regular memory objects. The VM also uses new run-
time checks for checking I/O load and store instructions.
Since I/O pointers can be indexed like memory point-
ers (an I/O device may have an array of control regis-
ters), the bounds checking code must check both regu-
lar memory objects and I/O memory objects. Load and
store checks on regular memory pointers without the I/O
(cid:3)ag remain unchanged; they only consider memory ob-
jects. New run-time checks are needed on both mem-
ory and I/O loads and stores for pointers that have both
the I/O (cid:3)ag and one or more of the memory (cid:3)ags (heap,
stack, global) to ensure that they only access regular or
I/O memory objects, respectively.
5.4 Safe DMA
We assume the use of an IOMMU for preventing DMA
operations from over(cid:3)owing object bounds or writing to
the wrong memory address altogether [13]. The SVA vir-
tual machine simply has to ensure that the I/O MMU is
con(cid:2)gured so that DMA operations cannot write to the
virtual machine’s internal memory, kernel code pages,
pages which contain type-safe objects, and stack objects.
We mark all memory objects that may be used for
DMA operations as type-unsafe, similar to I/O memory
that is accessed directly. We assume that any pointer that
is stored into I/O memory is a potential memory buffer
for DMA operations. We require alias analysis to iden-
tify such stores; it simply has to check that the target ad-
dress is in I/O memory and the store value is of pointer
type. We then mark the points-to set of the store value
pointer as type-unknown.
5.5 Virtual Memory
Our system must control the MMU and vet changes to its
con(cid:2)guration to prevent safety violations and preserve
compiler-inferred analysis results. Below, we describe
the mechanism by which our system monitors and con-
trols MMU con(cid:2)guration and then discuss how we use
this mechanism to enforce several safety properties.
5.5.1 Controlling MMU Con(cid:2)guration
SVA provides different MMU interfaces for hardware
TLB processors and software TLB processors [11]. For
brevity, we describe only the hardware TLB interface and
how our design uses it to control MMU con(cid:2)guration.
The SVA interface for hardware TLB systems (given
in Table 2) is similar to those used in VMMs like
Xen [16] and is based off the paravirtops inter-
face [50] found in Linux 2.6. The page table is a 3-
level page table, and there are instructions for chang-
ing mappings at each level. In this design, the OS (cid:2)rst
tells the VM which memory pages will be used for the
page table (it must specify at what level the page will
appear in the table); the VM then takes control of these
pages by zeroing them (to prevent stale mappings from
being used) and marking them read-only to prevent the
OS from accessing them directly. The OS must then
use special SVA instructions to update the translations
stored in these page table pages; these instructions al-
low SVA to (cid:2)rst inspect and modify translations before
accepting them and placing them into the page table.
The sva load pagetable instruction selects which
page table is in active use and ensures that only page
tables controlled by SVA are ever used by the proces-
sor. This interface, combined with SVA’s control-(cid:3)ow
integrity guarantees [10], ensure that SVA maintains con-
trol of all page mappings on the system.
5.5.2 Memory Safe MMU Con(cid:2)guration
For preventing memory safety violations involving the
MMU, the VM needs to track two pieces of information.
First, the VM must know the purpose of various ranges
of the virtual address space; the kernel must provide the
virtual address ranges of user-space memory, kernel data
memory, and I/O object memory. This information will
be used to prevent physical pages from being mapped
into the wrong virtual addresses (e.g., a memory mapped
I/O device being mapped into a virtual address used by a
kernel memory object). A special instruction permits the
kernel to communicate this information to the VM.
Second, the VM must know how physical pages are
used, how many times they are mapped into the virtual
address space, and whether any MMU mapping makes
them accessible to unprivileged (i.e., user-space) code.
To track this information, the VM associates with each
physical page a set of (cid:3)ags and counters. The (cid:2)rst set
of (cid:3)ags are mutually exclusive and indicate the purpose
of the page; a page can be marked as: L1 (Level-1 page
table page), L2 (Level-2 page table page), L3 (Level-
3 page table page), RW (a standard kernel page hold-
ing memory objects), IO (a memory mapped I/O page),
stack (kernel stack), code (kernel or SVA code), or
svamem (SVA data memory). A second (cid:3)ag, the TK
(cid:3)ag, speci(cid:2)es whether a physical page contains type-
known data. The VM also keeps a count of the number
of virtual pages mapped to the physical page and a count
of the number of mappings that make the page accessible
to user-space code.
The (cid:3)ags are checked and updated by the VM when-
ever the kernel requests a change to the page tables
or performs relevant memory or I/O object allocation.
Calls to the memory allocator are instrumented to set
the RW and,
the TK (cid:3)ag on pages
backing the newly allocated memory object. On sys-
tem boot, the VM sets the IO (cid:3)ag on physical pages
known to be memory-mapped I/O locations. The stack
if appropriate,
Name
sva end mem init
sva declare l1 page
sva declare l2 page
sva declare l3 page
sva remove l1 page
sva remove l2 page
sva remove l3 page
sva update l1 mapping
sva update l2 mapping