## 如何防止远程程序与RDS PG连接中断  
### 作者                                                                                                                                                                                                             
digoal                                                                                                                                                                                                             
### 日期                                                                                                                                                                                                             
2016-07-14                                                                                                                                                                                                      
### 标签                                                                                                                                                                                                             
PostgreSQL , tcp_keepalives_idle , TCP心跳 , 会话超时    
----                                                                                                                                                                                                             
## 背景                                                                                                 
偶尔有用户会遇到远程程序连接RDS PG，在不做任何操作一段时间后可能中断。      
其实可能是用户和RDS PG之间，某些网络设备设置了会话空闲超时，会主动中断会话。      
那么有什么方法能解决这个问题呢？      
运维的同学可能有这方面的经验，例如使用securecrt或者其他终端连接服务器时，可以设置这些管理工具的no-op，周期性的发一些空字符过去，保证会话上有流量。      
但是数据库连接怎么搞呢？      
PostgreSQL提供了tcp keep alive的参数可供用户设置。      
## 例子    
为了避免会话中断的问题, 可以通过tcp层的keepalive机制来达到传输心跳数据的目的.      
方法一，设置数据库参数     
PostgreSQL支持会话级别的设置, 数据库级别的设置在$PGDATA/postgresql.conf,      
建议设置如下三个参数的值    
```    
# - TCP Keepalives -    
# see "man 7 tcp" for details    
tcp_keepalives_idle = 60                # TCP_KEEPIDLE, in seconds;    
                                        # 0 selects the system default    
tcp_keepalives_interval = 10            # TCP_KEEPINTVL, in seconds;    
                                        # 0 selects the system default    
tcp_keepalives_count = 10                # TCP_KEEPCNT;    
                                        # 0 selects the system default    
```    
解释详见本文末尾[参考1].      
代码详见本文末尾[参考2].     
参数解释    
tcp_keepalives_idle : 定义这个tcp连接间隔多长后开始发送 第一个 tcp keepalive 包.    
tcp_keepalives_interval : 定义在以上发送第一个tcp keepalive包后如果在这个时间间隔内没有收到对端的回包, 则开始发送第二个tcp keepalive包. 在这个时间内再没有回包的话则发送第三个keepalive包....直到达到tcp_keepalives_count次则broken 连接.     
tcp_keepalives_count : 定义一共发送多少个tcp keepalive包, 达到这个数字后如果对端都没有回响应包, 则关闭这个连接.    
另外需要注意的是, 这几个PostgreSQL参数对PostgreSQL数据库服务端的backend process生效.    
所以如果发出第一个keepalive包后, 在tcp_keepalives_interval秒内有客户端回包, 则又回到tcp_keepalives_idle计数(注意此时计数是tcp_keepalives_idle 减去 tcp_keepalives_interval 秒).    
例如 :     
CLIENT (172.16.3.33) :     
```  
psql -h 172.16.3.150 -p 1919 -U postgres postgres    
postgres=# show tcp_keepalives_idle;    
 tcp_keepalives_idle     
---------------------    
 60    
(1 row)    
postgres=# show tcp_keepalives_interval;    
 tcp_keepalives_interval     
-------------------------    
 10    
(1 row)    
postgres=# show tcp_keepalives_count;    
 tcp_keepalives_count     
----------------------    
 10    
(1 row)    
```  
查找数据库端对应的process id.    
```  
postgres=# select pg_backend_pid();    
 pg_backend_pid     
----------------    
           11016    
(1 row)    
```   
SERVER (172.16.3.150) :       
在数据库端查看keepalive timer      
```  
root@digoal-PowerEdge-R610:~# netstat -anpo|grep 11016    
tcp        0      0 172.16.3.150:1919       172.16.3.33:50326       ESTABLISHED 11016/postgres: pos keepalive (39.73/0/0)    
```  
CLIENT (172.16.3.33) :     
在客户端查看keepalive timer    
```  
postgres=# \!    
[pg92@db-172-16-3-33 ~]$ netstat -anpo|grep 1919    
(Not all processes could be identified, non-owned process info    
 will not be shown, you would have to be root to see it all.)    
tcp        0      0 172.16.3.33:50326           172.16.3.150:1919           ESTABLISHED 20408/psql          keepalive (7143.19/0/0)    
```  
继承了操作系统的keepalive设置    
通过tcpdump可以观察间隔一定的时间, 会发出keepalive包.    
方法二、设置操作系统级的参数:    
```  
/etc/sysctl.conf    
net.ipv4.tcp_keepalive_intvl = 75    
net.ipv4.tcp_keepalive_probes = 9    
net.ipv4.tcp_keepalive_time = 7200    
```  
设置CLIENT服务器系统级的keepalive, 然后重新连接到数据库, 看看客户端的keepalive timer会不会发生变化    
```  
[root@db-172-16-3-33 ~]# sysctl -w net.ipv4.tcp_keepalive_time=70    
net.ipv4.tcp_keepalive_time = 70    
[root@db-172-16-3-33 ~]# su - pg92    
pg92@db-172-16-3-33-> psql -h 172.16.3.150 -p 1919 -U postgres postgres    
psql (9.2.4)    
Type "help" for help.    
postgres=# \!    
[pg92@db-172-16-3-33 ~]$ netstat -anpo|grep 1919    
(Not all processes could be identified, non-owned process info    
 will not be shown, you would have to be root to see it all.)    
tcp        0      0 172.16.3.33:50327           172.16.3.150:1919           ESTABLISHED 20547/psql          keepalive (55.44/0/0)    
```  
系统层设置的keepalive已经生效了.    
## 其他  
1\.     
通过tcpdump观察keepalive包, 也可以将这些包抓下来通过wireshark查看.    
```  
pg92@db-172-16-3-33-> psql -h 172.16.3.150 -p 1919 -U postgres postgres    
postgres=# set tcp_keepalives_idle=13;    
SET    
root@digoal-PowerEdge-R610:~# tcpdump -i eth0 -n 'tcp port 1919'    
08:43:27.647408 IP 172.16.3.150.1919 > 172.16.3.33.15268: Flags [P.], seq 4937:4952, ack 58, win 115, length 15    
08:43:27.647487 IP 172.16.3.33.15268 > 172.16.3.150.1919: Flags [.], ack 4952, win 488, length 0    
08:43:40.667410 IP 172.16.3.150.1919 > 172.16.3.33.15268: Flags [.], ack 58, win 115, length 0    
08:43:40.667536 IP 172.16.3.33.15268 > 172.16.3.150.1919: Flags [.], ack 4952, win 488, length 0    
08:43:53.691417 IP 172.16.3.150.1919 > 172.16.3.33.15268: Flags [.], ack 58, win 115, length 0    
08:43:53.691544 IP 172.16.3.33.15268 > 172.16.3.150.1919: Flags [.], ack 4952, win 488, length 0    
08:44:06.715416 IP 172.16.3.150.1919 > 172.16.3.33.15268: Flags [.], ack 58, win 115, length 0    
08:44:06.715544 IP 172.16.3.33.15268 > 172.16.3.150.1919: Flags [.], ack 4952, win 488, length 0    
08:44:19.739422 IP 172.16.3.150.1919 > 172.16.3.33.15268: Flags [.], ack 58, win 115, length 0    
08:44:19.739544 IP 172.16.3.33.15268 > 172.16.3.150.1919: Flags [.], ack 4952, win 488, length 0    
08:44:32.763416 IP 172.16.3.150.1919 > 172.16.3.33.15268: Flags [.], ack 58, win 115, length 0    
08:44:32.763546 IP 172.16.3.33.15268 > 172.16.3.150.1919: Flags [.], ack 4952, win 488, length 0    
```  
每个sock会话, 每隔13秒, 数据库服务端会发送心跳包.      
2\.     
由于每个tcp会话都需要1个计时器, 所以如果连接数很多, 开启keepalive也是比较耗费资源的.    
可以使用setsockopt关闭该会话keepalive的功能. 下一篇BLOG介绍如何禁用keepalive.      
3\.     
如果tcp_keepalives_idle小于tcp_keepalives_interval, 那么间隔多长时间发1个心跳包呢?    
例如tcp_keepalives_idle=2, tcp_keepalives_interval=10.    
答案是10, 因为检查计时需要10秒.    
```  
postgres=# set tcp_keepalives_idle=2;    
SET    
postgres=# set tcp_keepalives_interval=10;    
SET    
root@digoal-PowerEdge-R610-> tcpdump -i eth0 -n 'tcp port 1919'    
09:32:27.035424 IP 172.16.3.150.1919 > 172.16.3.33.47277: Flags [.], ack 195, win 115, length 0    
09:32:27.035608 IP 172.16.3.33.47277 > 172.16.3.150.1919: Flags [.], ack 366, win 54, length 0    
09:32:37.051426 IP 172.16.3.150.1919 > 172.16.3.33.47277: Flags [.], ack 195, win 115, length 0    
09:32:37.051569 IP 172.16.3.33.47277 > 172.16.3.150.1919: Flags [.], ack 366, win 54, length 0    
09:32:47.067423 IP 172.16.3.150.1919 > 172.16.3.33.47277: Flags [.], ack 195, win 115, length 0    
09:32:47.067552 IP 172.16.3.33.47277 > 172.16.3.150.1919: Flags [.], ack 366, win 54, length 0    
09:32:57.083428 IP 172.16.3.150.1919 > 172.16.3.33.47277: Flags [.], ack 195, win 115, length 0    
09:32:57.083574 IP 172.16.3.33.47277 > 172.16.3.150.1919: Flags [.], ack 366, win 54, length 0    
```  
## 参考  
1\. http://www.postgresql.org/docs/9.2/static/runtime-config-connection.html    
```  
tcp_keepalives_idle (integer)    
Specifies the number of seconds before sending a keepalive packet on an otherwise idle connection. A value of 0 uses the system default. This parameter is supported only on systems that support the TCP_KEEPIDLE or TCP_KEEPALIVE symbols, and on Windows; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.    
Note: On Windows, a value of 0 will set this parameter to 2 hours, since Windows does not provide a way to read the system default value.    
tcp_keepalives_interval (integer)    
Specifies the number of seconds between sending keepalives on an otherwise idle connection. A value of 0 uses the system default. This parameter is supported only on systems that support the TCP_KEEPINTVL symbol, and on Windows; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.    
Note: On Windows, a value of 0 will set this parameter to 1 second, since Windows does not provide a way to read the system default value.    
tcp_keepalives_count (integer)    
Specifies the number of keepalive packets to send on an otherwise idle connection. A value of 0 uses the system default. This parameter is supported only on systems that support the TCP_KEEPCNT symbol; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.    
Note: This parameter is not supported on Windows, and must be zero.   
```  
2\. /usr/share/doc/kernel/Documentation/networking/ip-sysctl.txt    
```  
tcp_keepalive_time - INTEGER    