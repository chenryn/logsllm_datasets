# Kleptographic Attacks on a Cascade of Mix Servers

**Authors:**
- Przemysław Kubiak
- Mirosław Kutyłowski
- Filip Zagórski

**Affiliation:**
Institute of Mathematics and Computer Science, Wrocław University of Technology

**Contact:**
- Przemysław Kubiak: [EMAIL]
- Mirosław Kutyłowski: [EMAIL]
- Filip Zagórski: [EMAIL]

## Abstract
A cascade of mix servers is a critical component in e-voting protocols and other schemes that aim to ensure user anonymity. This paper presents kleptographic attacks on such cascades, with a focus on the Prêt à Voter (PaV) e-voting protocol. The attacks can be generalized to any cascade of probabilistic mix servers.

## Categories and Subject Descriptors
- C.5 [Computer System Implementation]: Miscellaneous
- E.3 [Data Encryption]: Public key cryptosystems
- K.4.1 [Computers and Society]: Public Policy Issues—Abuse and crime involving computers
- K.6.5 [Management of Computing and Information Systems]: Security and Protection—Invasive software (e.g., viruses, worms, Trojan horses)

## General Terms
- Security, Verification

## Keywords
- Kleptography, Cascade of Mix Servers, Anonymity, Electronic Voting

## 1. Introduction
Designing secure e-voting protocols is one of the most challenging problems for e-government systems. Despite political pressure to deploy e-voting, security requirements are exceptionally high. Even though some countries have implemented e-voting, the technology's security remains a significant concern. Potential dangers include vote selling, manipulation of results, and loss of privacy. Several cases of such issues have been reported in implemented systems. Ensuring that votes are cast anonymously is a fundamental requirement for any election protocol.

This paper focuses on issues related to dishonest implementation of a cascade of anonymizing mix-servers. While these issues may seem irrelevant at a high level of abstraction, they can lead to severe faults in e-voting systems. Even if a system is theoretically secure, the protocol itself can contain features that result in insecure implementations. Examples of this are shown in [9]. The main conclusion is that e-voting systems must be designed holistically, with both high-level and low-level details co-designed.

### Kleptography
Kleptography [28], [29] (for more recent results, see [30], [32] and references therein) is one of the most dangerous techniques for breaking the security of cryptographic systems. It operates at the code level, where a malicious implementation neither changes the executed protocol nor can be detected without reverse engineering. The system’s manufacturer exploits the randomness used in the protocol to build a trapdoor. The resulting covert channel is protected by the manufacturer’s public key, making it inaccessible to anyone except the holder of the secret key. This makes kleptographic attacks superior to simple subliminal channels. Thorough reverse engineering of hardware or software is costly and rarely performed.

We focus on the recent Prêt à Voter (PaV) protocol [24], which aims to provide a simple, low-cost, yet secure version of Chaum’s visual voting scheme [4]. The same attacks apply to [23] and [22] as well. Another version of PaV [16], with multi-party creation of ballots and elements of visual encryption, has a serious drawback unrelated to kleptography. Specifically, the last authority processing the picture sent to the voting device for display knows that picture, making it vulnerable to coercion.

PaV serves as an example for describing our techniques, and most methods presented can be generalized to any probabilistic (ElGamal) mix-cascade supplied by a single dishonest manufacturer.

### Countermeasures
In Section 6, we present some countermeasures. The main solution is adapted from [2] and is more flexible than the one given in [5]. The paper [5] aims to protect a probabilistic mix cascade against malware, assuming the manufacturer is honest. However, this model does not preclude kleptographic attacks. Moreover, the solution in [5] applies only to disposable mix servers, not to those used for multiple batches. We also point out a small flaw in [5] that renders its solution ineffective.

### Notation
- **Alice**: A voter
- **Mallet**: An adversary
- **BB**: Bulletin board
- **N**: Number of elements in a single batch of a mix server
- **v**: Number of candidates
- **R**: Cryptographically secure pseudorandom bit generator
- **H**: Collision-resistant hash function

## 2. The Prêt à Voter Scheme

### 2.1 Ballot Preparation Procedure
The PaV scheme involves the following parties:
- **Clerks**: Authorities responsible for ballot generation, each leading a single re-encryption mix server.
- **Tellers**: Authorities responsible for decoding ballots.
- **Registrars**: Authorities responsible for delivering lists of candidates.

The clerks generate a batch of pairs of ElGamal ciphertexts, with the same plaintexts inside each pair. Let λ denote the number of mix servers in the cascade. The first mix server generates a batch of N pairs of ElGamal ciphertexts. Each subsequent server re-computes the ciphertexts, ensuring the correctness of the mixing is verified to prevent tampering.

### 2.2 Attack on the PaV Cascade
We assume all mix servers in the cascade are from the same manufacturer and use the same software. The output batches are available on the bulletin board after ballot card generation, reducing the information available to malicious mix servers. We also assume the mix servers are run by honest parties.

The attack takes advantage of the fact that the first server generates the input onions, knowing the whole initial exponent K1,j,α instead of just the initial accretion k1,j,α. For kleptographic cooperation, each server holds an ElGamal “public” key Yi = Gxi. The attack ensures that statistical properties of the protocol’s output are not disturbed. If the hash functions faddress and fvalue are not protected with key K∗i, twisted curves or the Probabilistic Bias Removal Method (PBRM) can be applied.

At first, we analyze a version of the PaV protocol where each onion sent by server i to server i + 1 carries a piece of information on some element a := Gk, where k is chosen at random by server i. If successful, both servers can compute Gk·xi+1. The key K∗i is available to both servers through the Diffie-Hellman protocol, and an external observer cannot derive K∗i. The values of the functions faddress and fvalue are also available to servers i and i + 1.

\[
f_{\text{address}}(x) = H_1(x, K^*_i) \mod n
\]
\[
f_{\text{value}}(x) = H_2(x, K^*_i) \mod b
\]

where H1 and H2 are different hash functions.