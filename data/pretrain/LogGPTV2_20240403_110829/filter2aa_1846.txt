# 如何在3个月内发现12个内核信息泄露漏洞
**作者：陈唐晖、李龙**  
**单位：百度安全实验室**  
**发表日期：2019年**

## 目录
1. 自我介绍
2. 漏洞概述
3. 漏洞研究
   - 堆栈数据污染
   - 数据检测技术
   - CVE实例分析
4. 研究成果
5. 总结与思考

## 1. 自我介绍
- **陈唐晖**
  - 百度安全实验室资深安全研发工程师
  - 百度杀毒和卫士主防设计者及负责人
  - 拥有超过十年的Windows内核研究和开发经验
  - 深谙Rootkit技术，具备深厚的内功和独特的技能
  - 偶然进入漏洞挖掘领域

## 2. 漏洞概述
### 什么是内核信息泄露漏洞？
Windows内核中存在许多信息泄露漏洞，这些漏洞可能导致绕过KASLR（Kernel Address Space Layout Randomization）或系统关键信息泄露。攻击者可以利用这些漏洞获取以下重要信息：
- 加密密钥
- 内核对象
- 关键模块地址
- 其他敏感信息

### 漏洞是如何产生的？
以CVE-2018-8443为例：
1. 用户态调用`ZwDeviceIoControlFile(..., 0x7d008004, Output,...);`
2. `ZwDeviceIoControlFile`通过系统调用进入内核
3. 返回用户态后，`Output`包含内核栈中未初始化的数据

## 3. 漏洞研究
### 现有的挖掘技术
- **BochsPwn**: 使用CPU指令模拟技术
- **DigTool**: 利用重量级VT技术
- **插桩技术**: 用于动态监控和检测

### 挖掘信息泄露漏洞的方法
#### 第一步：堆/栈数据污染方法
- **Hook KiFastCallEntry**:
  - 通过`IoGetStackLimits`获取内核栈内存
  - 填充特殊标志数据（如0xAA）
  ```c
  IoGetStackLimits(&LowLimit, &HighLimit);
  __asm {
      xor eax, eax;
      mov al, g_cFlags; // 0xAA
      mov edi, LowLimit;
      mov ecx, Esp_Value;
      sub ecx, LowLimit;
      cld;
      rep stosb;
  }
  ```

- **Hook ExAllocatePoolWithTag**:
  - 在分配内存时填充特殊标志数据
  ```c
  PVOID NTAPI HOOK_ExAllocatePoolWithTag(...) {
      PVOID Buffer = pfn_ExAllocatePoolWithTag(PoolType, NumberOfBytes, Tag);
      if (Buffer) {
          memset(Buffer, g_cFlags, NumberOfBytes); // 初始化特殊数据，如0xAA
      }
      return Buffer;
  }
  ```

#### 堆栈数据污染的思考
- 堆和栈数据污染技术相对简单，不存在方法优劣
- 内存中可能存在与污染标记相同的数据，导致误报的可能性
- 采用随机污染标记减少误报

#### 第二步：数据检测技术研究
目前已有基于CPU指令模拟和VT等数据检测技术。我们探索了三种新的数据检测技术：
- **Nirvana**: Microsoft提供的轻量级动态translation框架
- **memcpy/memmove**: 最轻量级的方法
- **movsd**: 优化后的memcpy指令

##### Nirvana检测技术
- **优点**:
  - 支持Windows Vista及更高版本
  - 使用系统提供接口，实现简单
  - 兼容性好
- **缺点**:
  - 只能检测栈数据，几乎无法检测堆数据
  - 抓不到泄露现场，分析和编写POC相对困难

##### memcpy检测技术
- **实现**:
  - Hook `memcpy/memmove`，检测`dst`是否为用户态内存，数据是否包含特殊标志
  ```c
  void * __cdecl HOOK_memcpy(void * dst, void * src, size_t count) {
      if ((ULONG_PTR)dst < MmSystemRangeStart) {
          UCHAR *pOffset = (PUCHAR)src;
          while (pOffset <= (PUCHAR)src + count - sizeof(DWORD)) {
              if (*(DWORD *)pOffset == g_dwDwordFlags) {
                  // checked
              }
              pOffset++;
          }
      }
      return dst;
  }
  ```
- **特点**:
  - 实现简单，性能突出
  - 兼容性好
  - 能够抓到漏洞第一现场，分析和编写POC简单

##### movsd检测技术
- **实现**:
  - 扫描nt模块代码段，替换所有`movsd`为`int 20h`
  - 自定义`int 20h`中断处理函数`KiTrap20`，在其中检测内存数据
  ```c
  __declspec(naked) VOID HOOK_KiTrap20() {
      __asm {
          pushfd;
          pushad;
          call DetectMemory;
          popad;
          popfd;
          rep movs dword ptr es:[edi], dword ptr[esi];
          iretd;
      }
  }
  ```
- **特点**:
  - 检测数据较`memcpy`覆盖更全面
  - 能够抓到漏洞第一现场，分析和编写POC简单

### 第三步：漏洞分析
- **捕获疑似漏洞**:
  - 通过调试器现场分析确认
  - 让代码执行回到用户态，确认用户态内存中是否存在特殊标志数据
  - 通过分析调用栈和逆向用户态的系统调用相关代码，编写POC
- **辅助工具**:
  - 内存追踪工具，支持内存trace和内存条件断点

### CVE实例分析
- **CVE-2018-8443**:
  - 回溯到`mpssvc.dll`，确认用户态内存是否包含特殊标记
  - 找到漏洞触发代码
  - 最终完成POC

## 4. 研究成果
- 三个月内挖掘出12个Windows内核信息泄露漏洞，均已分配CVE
- 其中7个CVE获得当时最高5000美元奖金

## 5. 总结与思考
- **未来方向**:
  - 用户态内存只读（去掉PTE写位）
  - 反向追踪
  - 更多创新技术的探索

感谢大家！

**陈唐晖**  
**邮箱：EMAIL**