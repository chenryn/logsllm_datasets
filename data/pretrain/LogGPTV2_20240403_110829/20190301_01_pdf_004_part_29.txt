# Autonomous Transaction Object Type Method

The following example demonstrates the effect of declaring an object method with `PRAGMA AUTONOMOUS_TRANSACTION`.

### Creating the Object Type and Body

First, we create the object type and its body. The member procedure within the object type body includes `PRAGMA AUTONOMOUS_TRANSACTION` in the declaration section, along with a `COMMIT` at the end of the procedure.

```sql
CREATE OR REPLACE TYPE insert_dept_typ AS OBJECT (
    deptno NUMBER(2),
    dname VARCHAR2(14),
    loc VARCHAR2(13),
    MEMBER PROCEDURE insert_dept
);

CREATE OR REPLACE TYPE BODY insert_dept_typ AS
    MEMBER PROCEDURE insert_dept IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        INSERT INTO dept VALUES (SELF.deptno, SELF.dname, SELF.loc);
        COMMIT;
    END;
END;
```

### Executing the Anonymous Block

In the following anonymous block, an insert is performed into the `dept` table, followed by the invocation of the `insert_dept` method of the object. The block ends with a `ROLLBACK` command.

```sql
BEGIN
    DECLARE
        v_dept insert_dept_typ := insert_dept_typ(60, 'FINANCE', 'CHICAGO');
    BEGIN
        INSERT INTO dept VALUES (50, 'HR', 'DENVER');
        v_dept.insert_dept;
        ROLLBACK;
    END;
END;
```

Since `insert_dept` has been declared as an autonomous transaction, its insert of department number 60 remains in the table, but the rollback removes the insertion of department 50.

### Querying the `dept` Table

```sql
SELECT * FROM dept ORDER BY deptno;

-- Output:
-- DEPTNO | DNAME      | LOC
-- --------+------------+----------
-- 10      | ACCOUNTING | NEW YORK
-- 20      | RESEARCH   | DALLAS
-- 30      | SALES      | CHICAGO
-- 40      | OPERATIONS | BOSTON
-- 60      | FINANCE    | CHICAGO
```

## Dynamic SQL

Dynamic SQL is a technique that allows the execution of SQL commands that are not known until runtime. Up to this point, the SQL commands illustrated in SPL programs have been static SQL, where the full command (except for variables) must be known and coded into the program before it can execute. Dynamic SQL enables the executed SQL to change during program runtime.

Additionally, dynamic SQL is the only method by which data definition commands, such as `CREATE TABLE`, can be executed from within an SPL program. However, the runtime performance of dynamic SQL is generally slower than static SQL.

### Using `EXECUTE IMMEDIATE`

The `EXECUTE IMMEDIATE` command is used to run SQL commands dynamically.

```sql
EXECUTE IMMEDIATE 'sql_expression;'
[ INTO { variable [, ...] | record } ]
[ USING expression [, ...] ]
```

- `sql_expression` is a string expression containing the SQL command to be dynamically executed.
- `variable` receives the output of the result set, typically from a `SELECT` command.
- The `USING` clause passes values to placeholders in the SQL command.

### Example: Basic Dynamic SQL Commands

```sql
DECLARE
    v_sql VARCHAR2(50);
BEGIN
    EXECUTE IMMEDIATE 'CREATE TABLE job (jobno NUMBER(3), jname VARCHAR2(9))';
    v_sql := 'INSERT INTO job VALUES (100, ''ANALYST'')';
    EXECUTE IMMEDIATE v_sql;
    v_sql := 'INSERT INTO job VALUES (200, ''CLERK'')';
    EXECUTE IMMEDIATE v_sql;
END;
```

### Example: Using the `USING` Clause

```sql
DECLARE
    v_sql VARCHAR2(50) := 'INSERT INTO job VALUES (:p_jobno, :p_jname)';
    v_jobno job.jobno%TYPE;
    v_jname job.jname%TYPE;
BEGIN
    v_jobno := 300;
    v_jname := 'MANAGER';
    EXECUTE IMMEDIATE v_sql USING v_jobno, v_jname;
    v_jobno := 400;
    v_jname := 'SALESMAN';
    EXECUTE IMMEDIATE v_sql USING v_jobno, v_jname;
    v_jobno := 500;
    v_jname := 'PRESIDENT';
    EXECUTE IMMEDIATE v_sql USING v_jobno, v_jname;
END;
```

### Example: Using Both `INTO` and `USING` Clauses

```sql
DECLARE
    v_sql VARCHAR2(60);
    v_jobno job.jobno%TYPE;
    v_jname job.jname%TYPE;
    r_job job%ROWTYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('JOBNO JNAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    v_sql := 'SELECT jobno, jname FROM job WHERE jobno = :p_jobno';
    EXECUTE IMMEDIATE v_sql INTO v_jobno, v_jname USING 100;
    DBMS_OUTPUT.PUT_LINE(v_jobno || ' ' || v_jname);
    EXECUTE IMMEDIATE v_sql INTO v_jobno, v_jname USING 200;
    DBMS_OUTPUT.PUT_LINE(v_jobno || ' ' || v_jname);
    EXECUTE IMMEDIATE v_sql INTO v_jobno, v_jname USING 300;
    DBMS_OUTPUT.PUT_LINE(v_jobno || ' ' || v_jname);
    EXECUTE IMMEDIATE v_sql INTO v_jobno, v_jname USING 400;
    DBMS_OUTPUT.PUT_LINE(v_jobno || ' ' || v_jname);
    EXECUTE IMMEDIATE v_sql INTO r_job USING 500;
    DBMS_OUTPUT.PUT_LINE(r_job.jobno || ' ' || r_job.jname);
END;
```

### Output

```
JOBNO JNAME
----- -------
100 ANALYST
200 CLERK
300 MANAGER
400 SALESMAN
500 PRESIDENT
```

### Static Cursors

Static cursors allow you to encapsulate a query and read the result set one row at a time. This is useful for creating SPL program logic that processes each row individually.

#### Declaring a Cursor

A cursor must be declared in the declaration section of the SPL program.

```sql
CURSOR name IS query;
```

- `name` is an identifier for the cursor.
- `query` is a `SELECT` command that defines the result set.

#### Examples of Cursor Declarations

```sql
CREATE OR REPLACE PROCEDURE cursor_example
IS
    CURSOR emp_cur_1 IS SELECT * FROM emp;
    CURSOR emp_cur_2 IS SELECT empno, ename FROM emp;
    CURSOR emp_cur_3 IS SELECT empno, ename FROM emp WHERE deptno = 10 ORDER BY empno;
BEGIN
    ...
END;
```

#### Opening a Cursor

Before a cursor can be used, it must be opened with the `OPEN` statement.

```sql
OPEN name;
```

- `name` is the identifier of a previously declared cursor.

#### Fetching Rows from a Cursor

Rows can be retrieved from the cursor's result set using the `FETCH` statement.

```sql
FETCH name INTO { record | variable [, variable_2 ]... };
```

- `record` is a previously defined record.
- `variable, variable_2...` are SPL variables that receive the field data from the fetched row.

#### Closing a Cursor

Once all desired rows have been retrieved, the cursor must be closed with the `CLOSE` statement.

```sql
CLOSE name;
```

- `name` is the identifier of a currently open cursor.

#### Example: Using `%ROWTYPE` with Cursors

Using the `%ROWTYPE` attribute, a record can be defined that contains fields corresponding to all columns fetched from a cursor.

```sql
CREATE OR REPLACE PROCEDURE emp_info
IS
    CURSOR empcur IS SELECT ename, deptno FROM emp;
    myvar empcur%ROWTYPE;
BEGIN
    OPEN empcur;
    LOOP
        FETCH empcur INTO myvar;
        EXIT WHEN empcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(myvar.ename || ' works in department ' || myvar.deptno);
    END LOOP;
    CLOSE empcur;
END;
```

### Output

```
SMITH works in department 20
ALLEN works in department 30
WARD works in department 30
JONES works in department 20
MARTIN works in department 30
BLAKE works in department 30
CLARK works in department 10
SCOTT works in department 20
KING works in department 10
TURNER works in department 30
ADAMS works in department 20
JAMES works in department 30
FORD works in department 20
MILLER works in department 10
```

### Cursor Attributes

Each cursor has a set of attributes that allow the program to test the state of the cursor. These attributes include:

- `%ISOPEN`: Tests whether the cursor is open.
- `%FOUND`: Tests whether the last fetch returned a row.
- `%NOTFOUND`: Tests whether the last fetch did not return a row.
- `%ROWCOUNT`: Returns the number of rows fetched or processed.

#### Example: Using `%ISOPEN`

```sql
CREATE OR REPLACE PROCEDURE cursor_example
IS
    ...
    CURSOR emp_cur_1 IS SELECT * FROM emp;
    ...
BEGIN
    ...
    IF emp_cur_1%ISOPEN THEN
        -- Cursor is open
    ELSE
        -- Cursor is not open
    END IF;
    ...
END;
```

This comprehensive guide provides a clear and professional overview of autonomous transactions, dynamic SQL, and static cursors, with detailed examples and explanations.