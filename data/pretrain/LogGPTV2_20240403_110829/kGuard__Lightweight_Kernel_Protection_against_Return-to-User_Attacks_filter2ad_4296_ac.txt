that branch as a bypass trampoline. Note that in ISAs
with overlapping variable-length instructions, it is possi-
ble to ﬁnd an embedded opcode sequence that translates
directly to a control branch in user space [40]. By over-
writing the value of a protected branch target with the
address of a bypass trampoline, the attacker can success-
fully execute a jump to user space. The ﬁrst CFA corre-
sponding to the initially exploited branch will succeed,
since the address of the trampoline remains inside the
privileged memory segment, while the second CFA that
guards the bypass trampoline is completely bypassed by
jumping directly to the branch instruction.
Similarly, jumping in the middle of an instruction that
contains an indirect branch within, could also be used to
subvert kGuard. At this point, we would like to stress that
if an attacker is armed with a powerful exploit for a vul-
nerability that allows him to overwrite arbitrary kernel
memory with arbitrary values, he can easily elevate his
privileges by overwriting the credentials associated with
a process under his control. In other words, the attacker
can achieve his goal without violating the control-ﬂow
by jumping into user-level shellcode.
3.5.2 Code Diversiﬁcation Against Bypasses
kGuard implements two diversiﬁcation techniques that
aid in thwarting attacks exploiting bypass trampolines.
Code inﬂation This technique reshapes the kernel’s
text area. We begin with randomizing the starting ad-
dress of the text segment. This is achieved by insert-
ing a random NOP sled at its beginning, which effec-
tively shifts all executable instructions by an arbitrary
offset. Next, we continue by inserting NOP sleds of ran-
dom length at the beginning of each CFA. The end result
is that the location of every indirect control transfer in-
struction is randomized, making it harder for an attacker
to guess the exact address of a conﬁned branch to use as
a bypass trampoline. The effects of the sleds are cumu-
lative because each one pushes all instructions and NOP
sleds following, further to higher memory addresses. The
size of the initial sled is chosen by kGuard based on the
target architecture. For example, in Linux and BSD the
kernel space is at least 1GB. Hence, we can achieve more
than 20 bits of entropy (i.e., the NOP sled can be ≥ 1MB)
without notably consuming address space.
The per-CFA NOP sled is randomly selected from a
user-conﬁgured range. By specifying the range, users
can trade higher overhead (both in terms of space and
speed), for a smaller probability that an attacker can re-
liably obtain the address of a bypass trampoline. An im-
portant assumption of the aforementioned technique is
the secrecy of the kernel’s text and symbols. If the at-
tacker has access to the binary image of the conﬁned ker-
nel or is armed with a kernel-level memory leak [32], the
probability of successfully guessing the address of a by-
pass trampoline increases. We posit that assigning safe
ﬁle permissions to the kernel’s text, modules, and debug-
ging symbols is not a limiting factor.6
In fact, this is
considered standard practice in OS hardening, and is au-
tomatically enabled in PaX and similar patches, as well
as the latest Ubuntu Linux releases. Also note that the
kernel should harden access to the system message ring
buffer (dmesg), in order to prevent the leakage of kernel
addresses.7
6This can be trivially achieved by changing the permissions in the
ﬁle system to disallow reads, from non-administrative users, in /boot
and /lib/modules in Linux/FreeBSD, /bsd in OpenBSD, etc.
7In Linux, this can be done by asserting the kptr_restrict [24]
sysctl option that hides exposed kernel pointers in /proc interfaces.
Initial build
1st relocation
2nd relocation
Front−ends
kernel
.text
kernel
.text
kernel
.text
w
o
d
n
i
w
n
o
i
t
a
c
o
l
e
r
NOP
sled
CFA
branch
kernel
.text
NOP
sled
CFA
branch
NOP
sled
NOP
sled
CFA
branch
NOP
sled
kernel
.text
kernel
.text
Figure 1: CFA motion synopsis. kGuard relocates each in-
line guard and protected branch, within a certain window, by
routinely rewriting the text segment of the kernel.
CFA motion The basic idea behind this technique is
the “continuous” relocation of the protected branches
and injected guards, by rewriting the text segment of the
kernel. Figure 1 illustrates the concept. During com-
pilation, kGuard emits information regarding each in-
jected CFA, which can be used later for relocating the
respective code snippets. Speciﬁcally, kGuard logs the
exact location of the CFA inside kernel’s text, the type
and size of the guard, the length of the prepended NOP
sled, as well as the size of the protected branch. Armed
with that information, we can then migrate every CFA
and indirect branch instruction separately, by moving it
inside the following window: sizeof(nop_sled)
+ sizeof(cfa) + sizeof(branch). Currently,
we only support CFA motion during kernel bootstrap. In
Linux, this is performed after the boot loader (e.g., LILO,
GNU GRUB) extracts the kernel image and right before
jumping to the setup() routine [8]. In BSDs, we per-
form the relocation after the boot program has executed
and right before transferring control to the machine-
dependent initialization routines (i.e., mi_startup()
in FreeBSD and main() in {Net, Open}BSD) [49]. Fi-
nally, note that CFA motion can also be performed at
runtime, on a live system, by trading runtime overhead
for safety. In Section 6, we discuss how we can expand
our current implementation, with moderate engineering
effort, to support real-time CFA migration.
To further protect against evasion, kGuard can be
combined with other techniques that secure kernel code
against code-injection [46] and code-reuse attacks [45,
51]. That said, mind that ret2usr violations are detected
at runtime, and hence one false guess is enough for iden-
tifying the attacker and restricting his capabilities (e.g.,
by revoking his access to prevent brute-force attacks). In
Section 6, we further discuss how kGuard can deal with
persistent threats.
*.c, *.i
C
*.cc, *.c++
*.cxx, *.cpp
C++
*.m, *.mi
Objective−C
*.java
...
Java
...
*.F, *.FOR
Fortran
GENERIC
Middle−end
GIMPLE
High
GIMPLE
Low
GIMPLE
SSA
GIMPLE
Back−end
RTL
kGuard
(RTL + CFAs)
*.s
Figure 2: Architectural overview of GCC. The compilation
process involves 3 distinct translators (frond-end, middle-end,
back-end), and more than 250 optimization passes. kGuard is
implemented as a back-end optimization pass.
4 Implementation
We implemented kGuard as a set of modiﬁcations to the
pipeline of a C compiler. Speciﬁcally, we instrument the
intermediate language (IL) used during the translation
process, in order to perform the CFA-based conﬁnement
discussed in Section 3. Our implementation consists of
a plugin for the GNU Compiler Collection (GCC) that
contains the “de-facto” C compiler for building Linux
and BSD kernels. Note that although other compilers,
such as Clang and PCC, are capable of building much
of Linux/FreeBSD and NetBSD/OpenBSD respectively,
they are not ofﬁcially supported by the corresponding de-
velopment groups, due to the excessive use of the GNU
C dialect in the kernel.
Starting with v4.5.1, GCC has been re-designed for
facilitating better isolation between its components, and
allowing the use of plugins for dynamically adding fea-
tures to the translators without modifying them. Fig-
ure 2 illustrates the internal architecture of GCC. The
compilation pipeline is comprised by 3 distinct com-
ponents, namely the front-end, middle-end, and back-
end, which transform the input into various ILs (i.e.,
GENERIC, GIMPLE, and RTL). The kGuard plugin
consists of ∼1000 lines of code in C and builds into a
position-independent (PIC) dynamic shared object that
is loaded by GCC. Upon loading kGuard, the plugin
manager of GCC invokes plugin_init() (i.e., the
initialization callback assumed to be exported by ev-
ery plugin), which parses the plugin arguments (if any)
and registers pass_branchprot as a new “optimiza-
tion” pass.8 Speciﬁcally, we chain our instrumentation
callback, namely branchprot_instrument(), af-
ter the vartrack RTL optimization pass, by call-
ing GCC’s register_callback() function and re-
questing to hook with the pass manager (see Figure 2).
8Currently, kGuard accepts 3 parameters: stub, nop, and log.
stub provides the runtime violation handler, nop stores the maximum
size of the random NOP sled inserted before each CFA, and log is used
to deﬁne an instrumentation logﬁle for CFA motion.
The reasons for choosing to implement the instrumen-
tation logic at the RTL level, and not as annotations to
the GENERIC or GIMPLE IL, are mainly the following.
First, by applying our assertions after most of the impor-
tant optimizations have been performed, which may re-
sult into moving or transforming instructions, we guaran-
tee that we instrument only relevant code. For instance,
we do not inject CFAs for dead code or control trans-
fers that, due to optimization transformations like inline
expansion, do not need to be conﬁned. Second, we se-
cure implicit control transfers that are exposed later in
the translation (e.g., after the High-GIMPLE IL has been
“lowered”). Third, we tightly couple the CFAs with the
corresponding unsafe control transfers. This way, we
protect the guards from being removed or shifted from
the respective points of check, due to subsequent opti-
mization passes (e.g., code motion). For more informa-
tion regarding the internals of RTL instrumentation, in-
terested readers are referred to Appendix B.
5 Evaluation
In this section, we present the results from the evaluation
of kGuard both in terms of performance and effective-
ness. Our testbed consisted of a single host, equipped
with two 2.66GHz quad-core Intel Xeon X5500 CPUs
and 24GB of RAM, running Debian Linux v6 (“squeeze”
with kernel v2.6.32). Note that while conducting our
performance measurements, the host was idle with no
other user processes running apart from the evaluation
suite. Moreover, the results presented here are mean val-
ues, calculated after running 10 iterations of each experi-
ment; the error bars correspond to 95% conﬁdence inter-
vals. kGuard and the corresponding Linux kernels were
compiled with GCC v4.5.1, and unless otherwise noted,
we used Debian’s default conﬁguration that results into a
complete build of the kernel, including all modules and
device drivers. Finally, we conﬁgured kGuard to use a
random NOP sled of 20 instructions on average. Mind
you that we also measured the effect of various NOP sled
sizes, which was insigniﬁcant for the range 0 – 20.
5.1 Preventing Real Attacks
The main goal of the effectiveness evaluation is to ap-
ply kGuard on commodity OSs, and determine whether
it can detect and prevent real-life ret2usr attacks. Table 1
summarizes our test suite, which consisted of a collec-
tion of 8 exploits that cover a broad spectrum of different
ﬂaws, including direct NULL pointer dereferences, con-
trol hijacking via tampered data structures (data pointer
corruption), function and data pointer overwrite, arbi-
trary kernel-memory nulliﬁcation, and ret2usr via kernel
stack-smashing.
x86 kernel
x86-64 kernel
call
20767
2253
6325
29345
jmp
1803
12
0
ret
—
113053
—
1815
113053
call
17740
1789
8780
28309
jmp
1732
0
0
ret
—
105895
—
1732
105895
CFAM
CFAMopt
CFAR
Total
Table 2: Number of indirect branches instrumented by
kGuard in the vanilla Linux kernel v2.6.32.39.
We instrumented 10 different vanilla Linux kernels,
ranging from v2.6.18 up to v2.6.34, both in x86 and x86-
64 architectures. Additionally, in this experiment, we
used a home-grown violation handler for demonstrating
the customization features of kGuard. Upon the detec-
tion of a ret2usr attack, the handler takes a snapshot of
the memory that contains the user-provided code for an-
alyzing the behavior of the offending process. Such a
feature could be useful in a honeypot setup for perform-
ing malware analysis and studying new ret2usr exploita-
tion vectors. All kernels were compiled with and with-
out kGuard, and tested against the respective set of ex-
ploits. In every case, we were able to successfully detect
and prevent the corresponding exploitation attempt. Also
note that the tested exploits circumvented the page map-
ping restrictions of Linux, by using one or more of the
techniques discussed in Section 2.3.
5.2 Translation Overhead
We ﬁrst quantify the additional time needed to inspect the
RTL IL and emit the CFAs (see Section 4). Speciﬁcally,
we measured the total build time with Unix’s time util-
ity, when compiling the v2.6.32.39 Linux kernel natively
and with kGuard. On average, we observed a 0.3% in-
crease on total build time on the x86 architecture, and
0.05% on the x86-64. Moreover, the size of the ker-
nel image/modules was increased by 3.5%/0.43% on the
x86, and 5.6%/0.56% on the x86-64.
In Table 2, we show the number of exploitable
branches instrumented by kGuard, categorized by ar-
chitecture, and conﬁnement and instruction type. As
expected, ret instructions dominate the computed
branches. Note that both in x86 and x86-64 scenar-
ios, we were able to optimize approximately 10% of
the total indirect calls via memory locations, using the
optimization scheme presented in Section 3.4. Over-
all, the drivers/ subsystem was the one with the
most instrumentations, followed by fs/, net/, and
kernel/. Additionally, a signiﬁcant amount of instru-
mented branches was due to architecture-dependent code
(arch/) and “inlined” C functions (include/).