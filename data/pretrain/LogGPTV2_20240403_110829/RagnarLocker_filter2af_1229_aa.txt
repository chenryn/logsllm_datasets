# 威胁披露机密信息：深入分析RagnarLocker勒索软件
|
##### 译文声明
本文是翻译文章，文章原作者 mcafee，文章来源：mcafee.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、摘要
RagnarLocker勒索软件在2019年12月底首次在野外出现，该勒索软件作为针对受感染网络发起攻击的一个组成部分。
勒索软件的代码较小，在删除其自定义加壳程序后仅有48KB，并且使用高级编程语言（C/C++）进行编码。如同所有勒索软件一样，该恶意软件的目标是对可以加密的所有文件进行加密，并提出勒索，要求用户支付赎金以进行解密。
就像我们最近见到的其他恶意软件，RagnarLocker的运营者威胁说如果不支付赎金，就会公开发布他们从受感染主机上获取到的信息。
在进行侦查之后，勒索软件运营者会进入到受害者的网络，在预部署阶段窃取信息，然后投放勒索软件，以对受害者计算机中的所有文件进行加密。
迄今为止，影响最大的一次RagnarLocker勒索软件攻击是针对一家大型企业，勒索软件运营者首先将其部署，然后要求勒索近1100万美元的赎金，以保证不将从公司内部窃取的信息泄露出去。在这篇文章中，我们就将分析在此次攻击中所使用的样本。
截止到撰写本文时，还没有免费的RagnarLocker解密工具可用。通过部署个人防病毒软件、终端产品和安全网关，可以有效防护免受威胁的侵害。
## 二、RagnarLocker概述
在将勒索软件脱壳后，得到的是一个32位的二进制文件，以EXE形式存在。
恶意软件基本信息：
我们可以看到，该样本是在2020年4月6日编译的。前面提到的攻击活动发生在编译恶意软件的几天之后，因此该样本是为受害者精心制作的，我们将在后面进行解释。
名称：malware.exe
大小：48460字节，不同样本之间存在差异，加壳的大小是可变的
文件类型：EXE 32位（不同样本之间存在差异）
SHA-256：7af61ce420051640c50b0e73e718dd8c55dddfcb58917a3bead9d3ece2f3e929
SHA-1：60747604d54a18c4e4dc1a2c209e77a793e64dde
编译时间：2020年4月6日（不同样本之间存在差异）
## 三、技术细节
正如我们经常在勒索软件中看到的那样，RagnarLocker会针对独联体（CIS）国家，在勒索软件中嵌入一些Unicode形式的自定义语言字符串。
嵌入在堆栈代码中的语言字符串：
硬编码的语言包括：格鲁吉亚语、俄语、乌克兰语、摩尔达维亚语、白俄罗斯语、阿塞拜疆语、土库曼语、吉尔吉斯语、哈萨克语、乌兹别克语、塔吉克语。  
在准备这些字符串之后，恶意软件使用函数`GetLocaleInfoW`来获取`LOCALE_SYSTEM_DEFAULT`语言作为一个字符串。在获取后，它将检查系统语言是否属于黑名单中的语言，如果匹配，勒索软件将使用`TerminateProcess`函数来结束其自身，并返回错误代码`0x29A`。这样的功能，我们之前已经在许多不同的恶意软件样本中见到过。
检查黑名单中的语言：
针对`LOCALE_SYSTEM_DEFAULT`的检查是为了防止特定国家的用户感染勒索软件，判断所在国家的依据主要是Windows中选择的语言。当然，并非所有这些国家的人都会在Windows中使用独联体国家的语言，他们也可能使用英语。与其他勒索软件一样，如果选择其他语言作为默认语言，则无法避免被感染。
在此之后，恶意软件将使用`GetComputerNameW`函数获取受感染计算机的名称，并使用`GetUserNameW`获取当前用户的用户名。
获取计算机名称和用户名：
之后，恶意软件将读取两个注册表项：
1、读取`HKLMSOFTWAREMicrosoftCryptography`和子项`MachineGuid`，以获取受害计算机的GUID；
2、读取`HKLMSOFTWAREMicrosoftWindows
NTCurrentVersion`和子项`ProductName`，以获取操作系统的名称。
为此，恶意软件在配置单元`HKEY_LOCAL_MACHINE`中使用了`RegOpenKeyExW`、`RegQueryValueExW`和`RegCloseKey`函数，在这里无需管理员权限即可读取该配置单元。
从注册表中读取操作系统名称和GUID：
接下来，RagnarLocker将使用函数`lstrcpyW`准备堆栈中的第一个字符串，然后再使用函数`lstrcatW`将字符串连接起来。
其顺序是：计算机的GUID、Windows操作系统名称、登录计算机的用户、受害计算机的名称。
获取用户和主机信息，并组合到字符串中：
在截图中，我修改了一些值，以避免暴露我的虚拟机详细信息。在获取上述信息并准备好字符串之后，恶意软件会对每个对象进行自定义哈希计算。
恶意软件将使用`VirtualAlloc`预留一些内存空间，并获取字符串的大小，在一个小循环中完成哈希值的计算。之后，它将使用函数`wsprintfW`对哈希值进行格式化，使其符合Unicode字符串的格式。
生成自定义哈希值，并将格式设置为Unicode字符串：
哈希值将按照以下顺序生成：
1、主机名称（例如：0xf843256f）；
2、登录到计算机的用户名（例如：0x56ef3218）；
3、受感染主机的GUID（例如：0x78ef216f）；
4、操作系统名称（例如：0x91fffe45）；
5、包含上述所有字符串的完整字符串（例如：0xe35d68fe）。
我已经对上述值进行了更改，以保护我的主机安全。
随后，恶意软件将使用函数`wsprintfW`和模板字符串`%s-%s-%s-%s-%s`对自定义哈希值以及它们之间的连字符进行格式化，但在这里，哈希值是按照以下的顺序：
1、GUID；
2、操作系统名称；
3、登录用户名；
4、受感染机器的名称；
5、将完整字符串与所有其他字符串连接在一起。
创建字符串的自定义哈希值，并按照特殊顺序对最后的字符串进行格式化：
该恶意软件将获取运行进程的命令行，并使用`GetCommandLineW`函数检查是否包含多个参数（第一个参数始终在C/C++中），获取带有参数的完整命令行。如果带有参数，则使用`CommandLineToArgvW`获取该参数。
如果存在多个参数，则恶意软件将不会再执行下一个步骤。为了保证技术细节部分的连续性，我们将仅介绍一个参数时发生的情况。在这种情况下，恶意软件将尝试使用带有所有哈希值格式化后的字符串名称来创建Windows事件，如前所述。在我们的案例中，该字符串为78ef216f-91fffe45-56ef3218-f843256f-e35d68fe。
在尝试创建事件后，恶意软件将使用`GetLastError`函数检查最后一个错误，并将其与`ERROR_ALREADY_EXISTS
(0xB7)`进行比较。如果事件已经存在，则恶意软件将检查计数器的值是否为0x8000
(32768)。如果不是该值，则会将计数器加一，然后再次尝试创建该事件，并检查最后一个错误，以此类推，直到其最终达到该值，或者达到计数器中的最大值（64233）。如果无法创建事件，则恶意软件将使用`GetCurrentProcess`函数，将伪句柄移动到自身的进程，随后使用函数`TerminateProcess`将其终止，并返回错误代码`0x29A`。
检查命令行后创建事件循环：
这样做有几个原因：
1、创建该事件，是为了避免同时重新启动该恶意软件的另一个实例。
2、如果启动了另一个恶意软件实例，则会检查计数器，以等待前一个实例完成后再继续执行该进程，这就避免了恶意软件检查加密文件的问题。
3、该参数的检查可用于避免事件行为，因此恶意软件将始终尝试加密文件。而这也正是为什么如果恶意软件运营者使用1作为参数执行恶意软件，就会导致针对该恶意软件的免疫无效的原因之一。
在此之后，恶意软件将尝试以传统的物理方式，访问连接到受害计算机的所有单元，并准备字符串`\.PHYSICALDRIVE%d`。该字符串将使用函数`wsprintfW`进行格式化，循环过程将从0一直到16。在进行格式化之后，恶意软件将使用`CreateFileW`并检查是否返回错误`ERROR_INVALID_HANDLE`，该报错表示无法访问该单元或该单元不存在。如果返回这个错误，则计数器加一，并继续使用计数器新的取值来格式化字符串。如果可以在原模式下打开设备的句柄，恶意软件将会使用`DeviceIoControl`函数发送两个命令。
这两个命令分别是：  
1、0x7C0F4 ->
IOCTL_DISK_SET_DISK_ATTRIBUTES，其属性为`DISK_ATTRIBUTE_READ_ONLY`和`DISK_ATTRIBUTE_OFFLINE`。
2、0x70140 ->
IOCTL_DISK_UPDATE_PROPERTIES，会让驱动器更新其分区表。在属性更新后，就可以在磁盘上以共享模式访问恶意软件。
控制物理磁盘，以对其进行访问：
勒索软件的下一个动作是检查存在的单元，确保可以毫无问题地访问这些单元。这一过程可以通过以下两种方式来完成，第一种是使用函数`FindFirstVolumeA`、`FindNextVolumeA`和`FindVolumeClose`。
获取卷盘符和信息，以检查其是否存在，确保可以访问：
前两个函数返回卷盘符和与之关联的特殊内部值。这个信息来自Windows，因此恶意软件需要将其转换为与卷关联的逻辑单元盘符。这一过程可以通过函数`GetVolumePathNamesForVolumeNameA`来完成，该函数将返回与所检查的卷相关联的逻辑盘符。
然后，通过该盘符可以使用函数`GetVolumeInformationA`来获取卷的信息（如果存在且已启用）。如果该卷不存在或无法检查，则该函数将运行失败，并且忽略该卷，将继续尝试计算机中的下一个卷。
另一项检查会使用到函数`GetLogicalDrives`，该函数将返回结构，并通过检查一个特定字节，判断该单元是否存在。
随后，恶意软件将准备密钥，后续将使用该密钥对文件进行加密。为此，它将使用函数`CryptAquireContextW`获取加密的上下文，该函数将使用`CryptGenRandom`生成随机数据，并使用SHA-512算法替换该值。这些值是Salsa20算法的密钥和随机数，将在以后用于加密文件。
获取加密上下文，生成一些数据，并准备计算SHA-512哈希值：
恶意软件会继续按照以下两个步骤解密某些字符串，其中在相对较大函数中的第一个步骤用于第一层，而第二个步骤用于第二层和服务的最终字符串。停止的服务是：
    vss
    sql
    memtas -> associated with MailEnable
    mepocs -> associated with MailEnable
    Sophos -> associated with Sophos Antivirus
    Veeam -> associated with a program to make backups and save in the cloud
    Backup -> associated with Asus WebStorage
    Pulseway -> associated with remote control software for IT departments
    Logme -> associated with remote control software
    Logmein -> associated with a remote control software
    Conectwise -> associated with a remote control software
    Splastop -> associated with a remote control software
    Mysql -> associated with a program of databases
    Dfs -> associated with the Distribute File System (Microsoft)
请注意，服务列表可能会取决于样本的不同而有所不同。
在解密字符串后，恶意软件使用`OpenSCManagerA`函数访问SCManager。如果不需要访问，它将忽略所有服务，并继续下一步。
如果可以打开其句柄，则将会使用函数`EnumServicesStatusA`获取服务的状态，如果服务已经停止，则会传递给下一个服务。恶意软件两次调用该函数，首先是获得该函数所需的正确大小，最后一次进行错误检查的过程会使用`GetLastError`检查值是否为`0xEA`（ERROR_ALREADY_EXISTS）。如果存在该错误值，则表明应用程序需要更多的内存来填充该函数给出的所有信息。
打开服务管理器和ENUMSERVICESTATUS：
这部分内存将被保留，以便稍后再调用该函数并获取实际状态，如果不被停止，恶意软件将使用函数`OpenServiceA`打开服务，并使用函数`QueryServiceStatusEx`查询服务的状态。如果服务没有停止，它将通过`EnumDependentServicesA`获取该服务的所有依赖关系，最后将通过`ControlService`函数控制该服务使其停止。
打开服务并进行控制：
之后，该恶意软件会解密一系列进程，如果在受感染的计算机中找到它们，将会尝试终止这些进程。对于这一解密过程，恶意软件使用一个字符串，该字符串将会被转换为整数，并使用整数作为临界值来解密列表。
对于这项任务，恶意软件将根据下列黑名单，创建系统中所有进程的快照：
    sql
    mysql
    veeam
    oracle
    ocssd