# TokyoWestern CTF WriteUp by r3kapig
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这次比赛由于我们队部分队员在新加坡，所以我们本来是打算随便玩玩的。然后玩着玩着我们就打到第四名了。战队目前正在招募队员，欢迎想与我们一起玩的同学加入我们，尤其是熟悉密码学或浏览器利用的大佬。给大家递茶。  
## scs7 | Crypto
思路：不知道加密方式，但是可以确定，明文正确的话，对应的密文前面是正确的，因此逐位爆破，并设立一个评分机制，每次选最高的，如果碰到评分一样的，那么全部进入下一分支，找后续一位评分最高的。
    from zio import *
    target=("crypto.chal.ctf.westerns.tokyo",14791)
    def cr(io,m):
        io.read_until("message: ")
        io.writeline(m)
        io.read_until(": ")
        c=io.read_until("n")[:-1]
        return c
    def score(get_c,c):
        score=0
        for i in range(len(get_c)):
            if get_c[i]!=c[i]:
                return score
            else:
                score+=1
        return score
    import string
    def guess_(i,pre):
        io = zio(target, timeout=10000, print_read=COLORED(NONE, 'red'),
                 print_write=COLORED(NONE, 'green'))
        io.read_until("encrypted flag: ")
        c = io.read_until("n")[:-1]
        max_score=0
        max_value=[]
        for g in string.printable:
            get_c=cr(io,pre+g+"a"*(47-len(pre+g)))
            tmp_score=score(get_c,c)
            #print g,tmp_score
            if tmp_score>max_score:
                max_score=tmp_score
                max_value=[g]
            elif tmp_score==max_score:
                max_value.append(g)
        return max_value,max_score
    import time
    def guess(i,pre=""):
        print "guess work with pre-str:",pre
        while 1:
            try:
                return guess_(i,pre)
            except Exception,e:
                print e
                time.sleep(2)
    pre="TWCTF{67ced"
    last_already_calc=0
    last_max_value=0
    last_max_score=[]
    for i in range(47):
        if last_already_calc==0:
            max_value,max_score=guess(i,pre)
        else:
            max_value, max_score=last_max_value,last_max_score
            last_already_calc=0
        if len(max_value)==1:
            pre=pre+max_value[0]
            print "succuess:",pre
            continue
        else:
            tmp_max_score=0
            tmp_max_value=[]
            tmp_chosen_value=0
            print "guess",max_value
            for multi_value in max_value:
                tmp_value,tmp_score=guess(i,pre+multi_value)
                if tmp_score>tmp_max_score:
                    tmp_max_score=tmp_score
                    tmp_max_value=tmp_value
                    tmp_chosen_value=multi_value
            pre=pre+tmp_chosen_value
            print "succuess:", pre
            last_max_score=tmp_max_score
            last_max_value=tmp_max_value
            last_already_calc=1
        print pre
## rsa | Crypto
    n=0x8529063EA0AD3B46296F92F72356772EA4E703F7B79220C18DE1B7E3CA0A7728D19E69DC48B8685CD604F5887A4F8F3A945A1CA1593CF086D348EC4DC92142083FC9E2203C6530311EE510BE50A42AEE4A63E7FA66BFCE3512FC2FB117402A55CDF0897770C1BB86F2D9306DA5B899D294EDBCB17AD87E17592CCC3F62B1305724181732AC7474CF23BEB722833373EF07B6A92188CF28BCFEF26B2368ADA38F7F4FD8921DBE3B6488E4B92028FFBD46AE26D8B43C9A86DBBC63F0B51398BB54098FF7004B646AFB42F24354AB6A2D30EFEEE8B333473ABE1CC92EB68A465819D9E9A0FF58FEAF2C722AE65B7CEDC9E30BE915029D69342523B981AD8395CDF7
    e=0x10001
数论题，推理如下  
eq = 1 mod p
有：  
p | eq-1  
同时乘q，即：  
n | (eq-1)q
所以：
    eq^2-q－kn=0
delta=1-4 _e_ (-kn)=1+4ken  
q=（1+sqrt(delta)）/（2e）
思路：转化到上式后，利用求根公式，delta需要为完全平方数，爆破k，直到得到一个完全平方数为止，测试是否为q，分解n，解密c
最终得到：  
delta=15437412055699760033228916416773388687758495883388405427219519968006361800232351092586513254042697417365303248564432783709932135844205171385876634738995524060511238569866876444551767422579436935801803651623293057191182325987659215635528040854348013316932722970176956521681782203617683425665727504728779196852929921  
q=117776309990537864360810812340917258096636219871129327152749744175094693075913995854147376703562090249517854407162616412941789644355136574651545193852293544566513866746012759544621873312628262933928953504305148673201262843795559879423287920215664535429854303448257904097546288383796049755601625835244054479553
脚本1: 爆破delta
    n=0x8529063EA0AD3B46296F92F72356772EA4E703F7B79220C18DE1B7E3CA0A7728D19E69DC48B8685CD604F5887A4F8F3A945A1CA1593CF086D348EC4DC92142083FC9E2203C6530311EE510BE50A42AEE4A63E7FA66BFCE3512FC2FB117402A55CDF0897770C1BB86F2D9306DA5B899D294EDBCB17AD87E17592CCC3F62B1305724181732AC7474CF23BEB722833373EF07B6A92188CF28BCFEF26B2368ADA38F7F4FD8921DBE3B6488E4B92028FFBD46AE26D8B43C9A86DBBC63F0B51398BB54098FF7004B646AFB42F24354AB6A2D30EFEEE8B333473ABE1CC92EB68A465819D9E9A0FF58FEAF2C722AE65B7CEDC9E30BE915029D69342523B981AD8395CDF7
    e=0x10001
    import primefac
    import gmpy2
    k=0
    while 1:
        k+=1
        delta=1+4*k*e*n
        if gmpy2.iroot(delta,2)[1]==True:
            print k
            print gmpy2.iroot(delta,2)
            gmpy2.iroot(delta,2)[0]
脚本2：计算flag
    n=0x8529063EA0AD3B46296F92F72356772EA4E703F7B79220C18DE1B7E3CA0A7728D19E69DC48B8685CD604F5887A4F8F3A945A1CA1593CF086D348EC4DC92142083FC9E2203C6530311EE510BE50A42AEE4A63E7FA66BFCE3512FC2FB117402A55CDF0897770C1BB86F2D9306DA5B899D294EDBCB17AD87E17592CCC3F62B1305724181732AC7474CF23BEB722833373EF07B6A92188CF28BCFEF26B2368ADA38F7F4FD8921DBE3B6488E4B92028FFBD46AE26D8B43C9A86DBBC63F0B51398BB54098FF7004B646AFB42F24354AB6A2D30EFEEE8B333473ABE1CC92EB68A465819D9E9A0FF58FEAF2C722AE65B7CEDC9E30BE915029D69342523B981AD8395CDF7
    e=0x10001
    sqt_delta=15437412055699760033228916416773388687758495883388405427219519968006361800232351092586513254042697417365303248564432783709932135844205171385876634738995524060511238569866876444551767422579436935801803651623293057191182325987659215635528040854348013316932722970176956521681782203617683425665727504728779196852929921
    q=(1+sqt_delta)/(2*e)
    import primefac
    print primefac.isprime(q)
    print q
    p=n/q
    d=primefac.modinv(e,(p-1)*(q-1))%((p-1)*(q-1))
    c=int(open("flag.encrypted","rb").read().encode("hex"),16)
    m=pow(c,d,n)
    print ("0"+hex(m)[2:-1]).decode("hex")
## mixed cipher | Crypto
rsa：n 1024bit 未知, e 65537  
aes：key 16字节随机，pkcs padding，密文前16字节是iv
    bulldozer
给除了最后一位外的所有位打马赛克
功能：
    encrypt
输入明文，输出rsa加密和aes加密后的密文
    decrypt
输入密文，输出rsa解密的明文的最后一位
    print_flag
输出aes对flag加密后密文，隐藏了iv
    print_key
输出rsa对aes的key的加密
每次连接，公钥和aeskey是唯一的  
每次aes的iv都是不一样的
本题目分为三部解决：（俄罗斯套娃）
1 算n  
因为可以随意加解密，所以利用整除性质可以算n  
x^e =c mod n  
所以 n | x^e -c  
构造足够多的x，然后可以知道些许右边，求最大公约数，即可得到n
2 RSA parity oracle
rsa的选择密文攻击，通过选择密文攻击可以得到被rsa加密的aes的key
3 伪随机数攻击  
知道key了后，利用生成iv时的伪随机数函数，收集足够多的密钥量后，可以预测iv
整体代码如下：  
主题代码部分：
    from zio import *
    import primefac
    from Crypto.Util.number import long_to_bytes,bytes_to_long
    target=("crypto.chal.ctf.westerns.tokyo",5643)
    e=65537
    def get_enc_key(io):
        io.read_until("4: get encrypted keyn")
        io.writeline("4")
        io.read_until("here is encrypted key :)n")
        c=int(io.readline()[:-1],16)
        return c
    def encrypt_io(io,p):
        io.read_until("4: get encrypted keyn")
        io.writeline("1")
        io.read_until("input plain text: ")
        io.writeline(p)
        io.read_until("RSA: ")
        rsa_c=int(io.readline()[:-1],16)
        io.read_until("AES: ")
        aes_c=io.readline()[:-1].decode("hex")
        return rsa_c,aes_c
    def decrypt_io(io,c):
        io.read_until("4: get encrypted keyn")
        io.writeline("2")
        io.read_until("input hexencoded cipher text: ")
        io.writeline(long_to_bytes(c).encode("hex"))
        io.read_until("RSA: ")
        return io.read_line()[:-1].decode("hex")
    def get_n(io):
        rsa_c,aes_c=encrypt_io(io,long_to_bytes(2))
        n=pow(2,65537)-rsa_c
        for i in range(3,6):
            rsa_c, aes_c = encrypt_io(io, long_to_bytes(i))
            n=primefac.gcd(n,pow(i,65537)-rsa_c)
        return n
    def check_n(io,n):
        rsa_c, aes_c = encrypt_io(io, "123")
        if pow(bytes_to_long("123"), e, n)==rsa_c:
            return True
        else:
            return False
    import gmpy2
    def guess_m(io,n,c):
        k=1
        lb=0
        ub=n
        while ub!=lb:
            print lb,ub
            tmp = c * gmpy2.powmod(2, k*e, n) % n
            if ord(decrypt_io(io,tmp)[-1])%2==1:
                lb = (lb + ub) / 2
            else: