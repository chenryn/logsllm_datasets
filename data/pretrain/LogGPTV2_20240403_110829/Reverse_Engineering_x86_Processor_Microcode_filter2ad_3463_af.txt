rdi
t1q
t2q
t3q
t4q
t5q
t6q
t7q
t8q
regmq
regq
pcq
zeroq
000000
000001
000010
000011
000100
000101
000110
000111
001000
001001
001010
001011
001100
001101
001110
001111
101000
101100
111000
111111
Table 6: General-purpose and microcode register encod-
ings.
1178    26th USENIX Security Symposium
USENIX Association
A.2 Hardware Analysis
In Section 6 we investigate the hardware of the AMD K8
Sempron 3100+. Hence, we decapsulated and backside-
thinned a die to obtain a high-level view of the CPU struc-
ture. The marked areas are adopted from [21], since they
show multiple similarities with our die shot in Figure 3.
Note that we focus on the microcode ROM (marked in
green) and neglect the rest of the chip.
A.3 Microprograms
In Section 7.1 we present a constructive application of
microcode updates, namely program instrumentation. To
demonstrate the feasibility, we implemented a proof-of-
concept instrumentation that counts the occurrences of the
x86 instruction div during execution. It should be noted
that the current implementation has some drawbacks, such
as reserving two general-purpose registers to steer the in-
strumentation. However, this is not a fundamental limita-
tion but an engineering issue. The implementation of our
proof-of-concept instrumentation is given in Listing 7.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
// set match register 0 to 0 x7e5
.start 0 x0
// load magic constant
mov t1d , 0 x0042
sll t1d , 16
add t1d , 0 xf00d
// compare and condense
sub t1d , esi
srl t2d , t1d , 16
or t1d , t2d
srl t2d , t1d , 8
or t1d , t2d
srl t2d , t1d , 4
or t1d , t2d
srl t2d , t1d , 2
or t1d , t2d
srl t2d , t1d , 1
or t1d , t2d
and t1d , 0 x1
// invert result
xor t1d , 0 x1
// conditionally count
ld t2d , [ edi ]
add t2d , t1d
st [ edi ], t2d
.sw_branch 0 x7e6
Listing 7: Microprogram that instruments the x86
instruction div and counts the occurrences.
Figure 3: Die shot of AMD K8 Sempron 3100+ with
different CPU parts. The image was taken with an optical
microscope with low magniﬁcation. The die is corrugated
due to a remaining thickness below 10 micrometers.
USENIX Association
26th USENIX Security Symposium    1179
As explained in Section 7.3, we exploit the x86 shrd in-
struction to implement both the bug attack and the timing
attack. The bug attack in our RTL is shown in Listing 8.
Note that in order to hook the shrd instruction, we have
to set a match register to the address 0xaca. The magic
constant as well as the bug value added to the ﬁnal com-
putation can be arbitrarily chosen.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
// set match register 0 to 0 xaca
.start 0 x0
// load magic constant
mov t1d , 0 x0042
sll t1d , 16
add t1d , 0 xf00d
// compare and condense
sub t1d , esi
srl t2d , t1d , 16
or t1d , t2d
srl t2d , t1d , 8
or t1d , t2d
srl t2d , t1d , 4
or t1d , t2d
srl t2d , t1d , 2
or t1d , t2d
srl t2d , t1d , 1
or t1d , t2d
and t1d , 0 x1
// invert result
xor t1d , 0 x1
// read immediate
sub t2d , pcd , 0 x1
ld t2d , [ t2d ]
and t2d , 0 xff
// implement semantics of shrd
srl regmd4 , t2d
mov t3d , 32
sub t3d , t2d
sll t2d , regmd6 , t3d
or regmd4 , t2d
// conditionally insert bug
add regmd4 , t1d
.sw_complete
Listing 8: Microprogram that intercepts the x86
instruction shrd and inserts a bug that can be
leveraged for a bug attack.
A.4 Using ASM.JS to remotely trigger a
x86 div microcode Trojan
As explained in Section 7.2, we use ASM.JS code in
Firefox 50 to trigger the implemented x86 div Trojan.
It is shown in Listing 9. Instead of using nop and int3
instructions, arbitrary payloads can be implemented. For
example, the attacker might deploy a remote shell as soon
as the microcode Trojan is triggered, which establishes a
connection to her remote control server.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
Listing 9: ASM.JS code within a remote web page
which emits a div ebx instruction and an attacker-
controlled payload in Firefox 50.0.
1180    26th USENIX Security Symposium
USENIX Association