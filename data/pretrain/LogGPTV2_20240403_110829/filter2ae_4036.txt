## 前言：
审计代码能力太弱了，每次一看到审计代码的题目就不知道要如何进行，恰好做Web题的时候发现了一个有关ThinkPHP6.0漏洞的题目，趁这个机会也练习一下。
## 0x00:漏洞介绍
>
> 2020年1月10日，ThinkPHP团队发布一个补丁更新，修复了一处由不安全的`SessionId`导致的任意文件操作漏洞。该漏洞允许攻击者在目标环境启用session的条件下创建任意文件以及删除任意文件，在特定情况下还可以getshell。
具体受影响版本为`ThinkPHP6.0.0-6.0.1`。
## 0x01:环境准备
    Windows:Apache + Thinkphp(6.0.0) + php7.2.10
先安装`composer`工具，我这里使用的是`phpstudy`,在php目录找到一个php7版本的即可，安装好之后
    composer create-project topthink/think tp 6.0.0
    #tp是文件夹命名
    #6.0.0是版本号
进入安装目录，执行命令
    php think run
    #会开启一个临时的开发环境的服务器，默认运行在localhost:8000
## 0x02:漏洞分析
根据官方Github上提供的
修改的文件是
    src/think/session/Store.php
先来看一下，添加`ctype_alnum`这个函数有什么作用
> 这个函数是用来检测输入的`$text`中所有的字符全部是字母和(或者)数字，返回 TRUE 否则返回FALSE
通过官方的修复可以推出来漏洞的成因，主要原因应该是出现在`Session`中，那下面就来分析一下`Session`的相关代码
    /vendor/topthink/framework/src/think/session/Store.php
    #TP6存储Session文件的目录
漏洞介绍中说到该漏洞允许攻击者在目标环境启用`session`的条件下可以 **删除任意文件** 和 **创建任意文件**
，那就先定位一下关键词`delete`，既然是任意文件删除，那么参数就一定是用户可控的。
含`delete`关键字的一共有三处，可以推测在函数`265`行的位置很可能是该漏洞的形成位置，因为涉及到了`SessionId`。而且漏洞介绍中也说了可以任意创建文件，在`delete`关键字上面就有一个`write`函数且包含有`SessionId`
跟踪一下这个`write`函数，在全局搜索函数中找到了`write()`和`delete()`函数的详细定义
    vendor/topthink/framework/src/think/session/driver/File.php
发现有一个`writeFile`函数，再跟进一下看看
发现了函数`file_put_contents()`，这里进行了写入文件操作，根据所含的参数进行反向分析一下，看能否找到可控点：
`file_put_contents`函数中的两个参数来源于`writeFile($path, $content)`函数中
而`writeFile`这个函数中的参数又是从`write()`函数的两个参数`$sessID、$sessData`中获取到的
全局搜索一下参数`write`函数
发现很可疑的`$sessionID`和`$data`，进去仔细查看一下，这里就可看出来了，这两个参数来源是来自`Save()`函数调用`write()`函数
而且`$sessionID`是从`getId()`函数得到了，可以直接搜这个函数，也可以进行猜测，既然有`getId`函数，就一定有`setId()`
兜兜转转又回到了官方修补的地方，再继续审计
    $this->id = is_string($id) && strlen($id) === 32 && ctype_alnum($id) ? $id : md5(microtime(true) . session_create_id());
当传入的参数`$id`满足32位的时候，便会将该值设置为`$this->id`。查找一下`setId`被调用的地方
    vendor/topthink/framework/src/think/middleware/SessionInit.php
简单分析一下，变量`cookieName`的值来源于`getName`函数
找一下属性`name`
所以`cookieName`的值为`PHPSESSID`，而`$sessionId`是`cookie`中名为`PHPSESSID`的值，因此是攻击者可控的，从而导致写入的文件名可控。
既然写入文件名可控，那么写入的内容是否可控那？在默认环境下，`session`的内容`vendor/topthink/framework/src/think/session/Store.php:261`的变量`$data`传入
找一下`$data`,发现默认为空值，默认环境是不开启session的
写入的内容就是创建`session`使用的内容。但是`session`的创建是由实际的后端业务逻辑来决定的，而默认环境下并没有创建`session`。因此，默认环境下无法做到任意文件写入。
参考了`Is4b3lla3`师傅的方法，尝试复现复现
在`app\controller\index.php`中修改下代码，如下：
     :)  ThinkPHP V613载初心不改 - 你值得信赖的PHP框架';
        }
        public function hello($name = 'ThinkPHP6')
        {
            return 'hello,' . $name;
        }
    }
除此之外，还需要开启一下`session`,删除`/app/middleware.php`最后一行的注释即可
## 0x04:本地复现
修改好文件之后，进行抓包
    注意:要删除官方修补添加的ctype_alnum函数，否则会实验不成功
只需要构造`PHPSESSID`的值即可，值为`string`且长度为`32`
在`\runtime\session`查看一下生成的session文件
查看一下内容
    a:1:{s:4:"name";s:8:"thinkphp";}
`session`的内容经过了序列化操作，只要将`session`的内容反序列化即可`getshell`，但前提是后端需要有类似的`Session::Set('name',$_POST['i'])`代码才可以利用。
## 0x05:总结：
  * 在环境开启Session的条件下，此漏洞经过构造可进行任意文件删除
  * 在环境开启Session且Session中的数据可控的情况下，可以通过此操作达到构造webshell的目的
## 0x06:[GYCTF2020]EasyThinking
用御剑扫发现有源码文件，下载下来发现是Thinkphp6.0
题目提示是漏洞搜索，那就很容易联想到TP6任意文件操作漏洞，先观察一下`Store.php`文件
    vendor/topthink/framework/src/think/session/Store.php
没有加上`ctype_alnum`函数，所以应该是存在这个漏洞的。
在注册时就会将session文件写入到`\runtime\session`中，所以从注册开始就进行修改，只要满足`32位`就可以
写好之后，发现有搜索功能，可以传入key值，感觉应该是搜索的内容直接被写入了SESSION，就先传入一句话木马试试
发现上传木马成功  
使用蚁剑进行连接
一看这种格式的就是需要绕过`disable_functions`,传一个`phpinfo`看看
先尝试下`bypass_disablefunc_via_LD_PRELOAD`方法，上传下文件
这种方法不行就换另外一种常见的，恰好是这题是php7的，可以使用下`bypass PHP7.0-7.3
disable_function`这个exp,上传进去访问后便可获取到flag
## 参考博客：