centralized EU-CMA deﬁnition, the adversary is additionally given the corrupted players’ views
of the key generation protocol as well as their views in the signing protocol for the messages it
chooses. A stronger simulation-based deﬁnition is also possible (see e.g. [17, 18, 27]). See Section
6.3 in which we show how to prove security of our protocol using this stronger simulation-based
deﬁnition.
2.3 Additively Homomorphic Encryption
Our protocol relies on an encryption scheme E that is additively homomorphic modulo a large
integer N . Let Epk(·) denote the encryption algorithm for E using public key pk. Given ciphertexts
c1 = Epk(a) and c2 = Epk(b), there is an eﬃciently computable function +E such that
c1 +E c2 = Epk(a + b mod N )
The existence of a ciphertext addition operation also implies a scalar multiplication operation,
which we denote by ×E. Given an integer a ∈ N and a ciphertext c = Epk(m), then we have
Informally, we say that E is semantically secure if for the probability distributions of the en-
a ×E c = Epk(am mod N )
cryptions of any two messages are computationally indistinguishable.
We instantiate our protocol using the additively homomorphic encryption scheme of Paillier
[31], and we recall the details here:
– Key-Gen: generate two large primes P, Q of equal length, and set N = P Q. Let λ(N ) =
N 2 such that its order
lcm(P − 1, Q− 1) be the Carmichael function of N . Finally choose Γ ∈ Z∗
is a multiple of N . The public key is (N, Γ ) and the secret key is λ(N ).
– Encryption: to encrypt a message m ∈ ZN , select x ∈R Z∗
– Decryption: to decrypt a ciphertext c ∈ ZN 2 , let L be a function deﬁned over the set {u ∈
ZN 2 : u = 1 mod N} computed as L(u) = (u − 1)/N . Then the decryption of c is computed as
L(cλ(N ))/L(Γ λ(N )) mod N .
N and return c = Γ mxN mod N 2.
6
Rosario Gennaro and Steven Goldfeder
– Homomorphic Properties: Given two ciphertexts c1, c2 ∈ ZN 2 deﬁne c1 +E c2 = c1c2 mod N 2. If
ci = E(mi) then c1 +E c2 = E(m1 + m2 mod N ). Similarly, given a ciphertext c = E(m) ∈ ZN 2
and a number a ∈ Zn we have that a ×E c = ca mod N 2 = E(am mod N ).
The security of Paillier’s cryptosystem relies on the N -residuosity decisional assumption [31],
which informally says that it is infeasible to distinguish random N -residues from random group
elements in Z∗
N 2.
2.4 Non-Malleable Equivocable Commitments
A trapdoor commitment scheme allows a sender to commit to a message with information-theoretic
privacy. i.e., given the transcript of the commitment phase the receiver, even with inﬁnite computing
power, cannot guess the committed message better than at random. On the other hand when it
comes to opening the message, the sender is only computationally bound to the committed message.
Indeed the scheme admits a trapdoor whose knowledge allows to open a commitment in any possible
way (we will refer to this also as equivocate the commitment). This trapdoor should be hard to
compute eﬃciently.
Formally a (non-interactive) trapdoor commitment scheme consists of four algorithms KG, Com,
Ver, Equiv with the following properties:
– KG is the key generation algorithm, on input the security parameter it outputs a pair {pk,
tk} where pk is the public key associated with the commitment scheme, and tk is called the
trapdoor.
– Com is the commitment algorithm. On input pk and a message M it outputs [C(M ), D(M )] =
Com(pk, M, R) where r are the coin tosses. C(M ) is the commitment string, while D(M ) is
the decommitment string which is kept secret until opening time.
– Ver is the veriﬁcation algorithm. On input C, D and pk it either outputs a message M or ⊥.
– Equiv is the algorithm that opens a commitment in any possible way given the trapdoor in-
formation. It takes as input pk, strings M, R with [C(M ), D(M )] = Com(pk, M, R), a message
M(cid:48) (cid:54)= M and a string T . If T = tk then Equiv outputs D(cid:48) such that Ver(pk, C(M ), D(cid:48)) = M(cid:48).
We note that if the sender refuses to open a commitment we can set D = ⊥ and Ver(pk, C,⊥) = ⊥.
Trapdoor commitments must satisfy the following properties
Correctness If [C(M ), D(M )] = Com(pk, M, R) then
Ver(pk, C(M ), D(M )) = M .
Information Theoretic Security For every message pair M, M(cid:48) the distributions C(M ) and
C(M(cid:48)) are statistically close.
Secure Binding We say that an adversary A wins if it outputs C, D, D(cid:48) such that Ver(pk, C, D) =
M , Ver(pk, C, D(cid:48)) = M(cid:48) and M (cid:54)= M(cid:48). We require that for all eﬃcient algorithms A, the
probability that A wins is negligible in the security parameter.
Such a commitment is non-malleable [13] if no adversary A, given a commitment C to a messages
m, is able to produce another commitment C(cid:48) such that after seeing the opening of C to m, A can
successfully decommit to a related message m(cid:48) (this is actually the notion of non-malleability with
respect to opening introduced in [10]).
The non-malleable commitment schemes in [10, 11] are not suitable for our purpose because
they are not “concurrently” secure, in the sense that the security deﬁnition holds only for t = 1
(i.e. the adversary sees only 1 commitment).
The stronger concurrent security notion of non-malleability for t > 1 is achieved by the schemes
presented in [8, 15, 30]), and any of them can be used in our threshold DSA scheme.
However in practice one can use any secure hash function H and deﬁne the commitment to
x as h = H(x, r), for a uniformly chosen r of length λ and assume that H behaves as a random
oracle. We use this eﬃcient random oracle version in our implementation.
Fast Multiparty Threshold ECDSA with Fast Trustless Setup
7
2.5 The Digital Signature Standard
The Digital Signature Algorithm (DSA) was proposed by Kravitz in 1991, and adopted by NIST
in 1994 as the Digital Signature Standard (DSS) [3, 26]. ECDSA, the elliptic curve variant of DSA,
has become quite popular in recent years, especially in cryptocurruencies.
All of our results in this paper apply to both the traditional DSA and ECDSA. We present our
The Public Parameters consist of a cyclic group G of prime order q, a generator g for G, a hash
results using the generic G-DSA notation from [17], which we recall here.
function H : {0, 1}∗ → Zq, and another hash function H(cid:48) : G → Zq.
.
Key-Gen On input the security parameter, outputs a private key x chosen uniformly at random in Zq,
Sig On input an arbitrary message M ,
and a public key y = gx computed in G.
• compute m = H(M ) ∈ Zq
• choose k ∈R Zq
• compute R = gk−1
• compute s = k(m + xr) mod q
• output σ = (r, s)
Ver On input M, σ and y,
• check that r, s ∈ Zq
• compute R(cid:48) = gms−1 mod qyrs−1 mod q in G
• Accept (output 1) iﬀ H(cid:48)(R(cid:48)) = r.
in G and r = H(cid:48)(R) ∈ Zq
The traditional DSA algorithm is obtained by choosing large primes p, q such that q|(p − 1)
p . In this case the multiplication operation in G is
and setting G to be the order q subgroup of Z∗
multiplication modulo p. The function H(cid:48) is deﬁned as H(cid:48)(R) = R mod q.
The ECDSA scheme is obtained by choosing G as a group of points on an elliptic curve of
cardinality q. In this case the multiplication operation in G is the group operation over the curve.
The function H(cid:48) is deﬁned as H(cid:48)(R) = Rx mod q where Rx is the x-coordinate of the point R.
2.6 Feldman’s VSS Protocol
Recall that in Shamir’s scheme [35], to share a secret σ ∈ Zq, the dealer generates a random degree
t polynomial p(·) over Zq such that p(0) = σ. The secret shares are evaluations of the polynomial
p(x) = σ + a1x + a2x2 + ··· + atxt mod q
Each player Pi receives a share σi = p(i) mod q.
In a veriﬁable secret sharing scheme, auxiliary information is published that allows players to
check that their shares are consistent and deﬁne a unique secret.
vi = gai in G for all i ∈ [1, t] and v0 = gσ in G.
Feldman’s VSS is an extension of Shamir secret sharing in which the dealer also publishes
Using this auxiliary information, each player Pi can check its share σi for consistency by veri-
fying:
gσi ?=
t(cid:89)
in G
vij
j
j=0
If the check does not hold for any player, it raises a complaint and the protocol terminates. Note
that this is diﬀerent than the way Feldman VSS was originally presented as it assumed an honest
majority and could recover if a dishonest player raised a complaint. However, since we assume
dishonest majority in this paper, the protocol will abort if a complaint is raised.
While Feldman’s scheme does leak gσ, it can be shown via a simulation argument that nothing
else is leaked, but we omit the details here.
8
Rosario Gennaro and Steven Goldfeder
2.7 Assumptions
N we denote the set of integers between 0 and N − 1 and relatively prime to N .
DDH. Let G be a cyclic group of prime order q, generated by g. The DDH Assumption states that
the following two distributions over G3 are computationally indistinguishable: DH = {(ga, gb, gab) for a, b ∈R
Zq} and R = {(ga, gb, gc) for a, b, c ∈R Zq}.
Strong-RSA. Let N be the product of two safe primes, N = pq, with p = 2p(cid:48) + 1 and q = 2q(cid:48) + 1
with p(cid:48), q(cid:48) primes. With φ(N ) we denote the Euler function of N , i.e. φ(N ) = (p− 1)(q − 1) = p(cid:48)q(cid:48).
With Z∗
Let e be an integer relatively prime to φ(N ). The RSA Assumption [33] states that it is infeasible
to compute e-roots in Z∗
N it is hard to ﬁnd x such that
xe = s mod N .
The Strong RSA Assumption (introduced in [2]) states that given a random element s in Z∗
it is hard to ﬁnd x, e (cid:54)= 1 such that xe = s mod N . The assumption diﬀers from the traditional
RSA assumption in that we allow the adversary to freely choose the exponent e for which she will
be able to compute e-roots.
N . That is, given a random element s ∈R Z∗
N
We now give formal deﬁnitions. Let SRSA(n) be the set of integers N , such that N is the
product of two n/2-bit safe primes.
Assumption 1 We say that the Strong RSA Assumption holds, if for all probabilistic polynomial
time adversaries A the following probability
P rob[ N ← SRSA(n) ; s ← Z∗
N : A(N, s) = (x, e) s.t. xe = s mod N ]
is negligible in n.
3 A share conversion protocol
Assume that we have two parties Alice and Bob holding two secrets a, b ∈ Zq respectively which
we can think of as multiplicative shares of a secret x = ab mod q. Alice and Bob would like to
compute secret additive shares α, β of x, that is random values such that α + β = x = ab mod q
with Alice holding a and Bob holding b.
Here we show a protocol based on an additively homomorphic scheme which has appeared many
times before in the literature (e.g. [9, 25, 27, 29]) but that we adapt to our needs. We assume that
Alice is associated with a public key EA for an additively homomorphic scheme E over an integer
N . Let K > q also be a bound which will be speciﬁed later.
In the following we will refer to this protocol as an MtA (for Multiplicative to Additive) share
conversion protocol. In our protocol we also assume that B = gb might be public. In this case
an extra check for Bob is used to force him to use the correct value b. We refer to this enhanced
protocol as MtAwc (as MtA “with check”).
1. Alice initiates the protocol by
2. Bob computes the ciphertext cB = b ×E cA +E EA(β(cid:48)) = EA(ab + β(cid:48)) where β(cid:48) is chosen
– sending cA = EA(a) to Bob
– proving in ZK that a  K 2q. Then note that Alice decrypts
the value α(cid:48) = ab + β(cid:48) mod N . Note that if β(cid:48)  K 2q we have that β(cid:48) ≥ N − ab with probability at most 1/q (i.e.
negligible).
Simulation. We ﬁrst point out that as a stand-alone protocol, we can prove security even without
the range proofs. Indeed, if the adversary corrupts Alice, then Bob’s message can be simulated
without knowledge of its input b. Indeed a simulator can just choose a random b(cid:48) ∈ Zq and act
as Bob. The distribution of the message decrypted by Alice in this simulation is identically to the
message decrypted when Bob uses the real b, because the “noise” β(cid:48) is uniformly distributed in
ZN .
If the adversary corrupts Bob, then Alice’s message can be simulated without knowledge of its
input a. Indeed a simulator can just choose a random a(cid:48) ∈ Zq and act as Alice. In this case the
view of Bob is computationally indistinguishable from the real one due to the semantic security of
the encryption scheme E.
However if the range proofs are not used, a malicious Alice or Bob can cause the protocol to
“fail” by choosing large inputs. As a stand-alone protocol this is not an issue since the parties are
not even aware that the reduction mod N took place and no information is leaked about the other
party’s input. However, when used inside our threshold DSA protocol, this attack will cause the
signature veriﬁcation to fail, and this information is linked to the size of the other party’s input.
Consider for example the case of Alice running the protocol with input a(cid:48) = q2 + a. If Bob’s
input is “small” then the reduction mod N will not take place and the protocol will succeed, and
eventually the signature produced by our threshold DSA protocol will verify (since a(cid:48) = a mod q).
But if Bob’s input is large the protocol will fail.
So we need security in the presence of an oracle that tells the parties if the reduction mod N
happens or not, but due to the ZK “range proofs” such reduction will only happen with negligible
probability and security holds.
Remark. An alternative approach. The above protocol is overwhelmingly correct, and hides b
perfectly. We could modify it so that β(cid:48) is always chosen uniformly at random in [0...N − K 2]. This
distribution is statistically close to the uniform one over ZN (since K > q), therefore the value b
is now hidden in a statistical sense. On the other hand the protocol is always correct.
Remark. On the ZK proofs and the size of the modulus N . For the ZK proofs required in the
protocol we use simpliﬁed versions of similar ZK proofs presented in [29] (and already used in
[17]). These are ZK arguments with security holding under the Strong RSA Assumption. Moreover
they require K ∼ q3 which in turns require N > q7. We point out that for typical choices of
parameters, N is approximately q8 (since q is typically 256-bit long while N is a 2048-bit RSA
modulus), so this requirement is not problematic4.
4 Our scheme