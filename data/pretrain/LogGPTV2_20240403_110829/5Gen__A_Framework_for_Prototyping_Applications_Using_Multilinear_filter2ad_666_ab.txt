reduction are a direct consequence of the technique used by cryfsm for constructing MBPs and
therefore automatically apply to all programs, whereas choosing an input base remains a manual
process because it must be guided by outside knowledge about the performance characteristics
of the mmap used to encode the MBPs. While the change of base and matrix pre-multiplication
optimizations are described by Boneh et al., we introduce dimension reduction as a new optimization
that is useful for ORE yet generalizable to other applications.
For each optimization, we use the integer d to represent the “input base”, the integer n to
represent the length (number of digits) of each input, the integer N to represent the input domain
size (so, we have that dn ≥ N), the integer m to represent the length of the MBP, and the integer
M to represent the total number of elements across all the matrices of the MBP.
At a high level, the optimizations are as follows.
• Condensing the input representation corresponds to processing multiple bits of the
input, by increasing d, to reduce the length of the MBP, at the expense of increasing the
number M of total elements.
• Matrix premultiplication also aims to reduce the parameter m, but without increasing
the parameter M.
• Dimension reduction aims to directly reduce the number M of total elements, but may
not be fully compatible with matrix premultiplication, depending on the function.
To help with the understanding of the intuition behind these optimizations, we use the simple
comparison state machine as a running example—however, we stress that these optimizations are
in no way speciﬁc to the comparison function, and can be applied more generally to any function
expressed as a layered state machine.
Condensing the input representation. The most immediate optimization that we apply is to
condense the representation of inputs fed to our state machines. MBPs are traditionally deﬁned as
operating on bitstrings, so it is natural to begin with state machines that use bits as their alphabet,
but using larger alphabets can cut down on the number of state transitions needed (at the potential
cost of increasing the state space).
As an example, for evaluating the comparison state machine, this optimization translates to
representing the input strings in a larger base d > 2, and to adjust the comparison state machine
to evaluate using base-d representations. The resulting state machine consists of d + 3 total states.
A naive representation of an input domain of size N with a state machine that processes the
inputs bit-by-bit (in other words, d = 2) would induce an MBP length of m = 2 · dlog2(N)e
and M = 50 · m total elements (in two 5 × 5 matrices). However, by using the corresponding
comparison state machine that recognizes the language when the inputs are in base-d, we can then
set m = 2 · dlogd(N)/ log2(d)e and M = 2 · (d + 3)2 · m.
Concretely, setting N = 1012, without condensing the input representation, we require m = 80
and M = 2000 for the resulting MBP. However, if we represent the input in base-4, we can then
obtain m = 20 and M = 1960, a strict improvement in parameters.
Matrix premultiplication. Boneh et al. [BLR+15] informally describe a simple optimization to
the comparison state machine, which we explain in more detail here. The natural state machine
for evaluating the comparison function on two n-bit inputs x and y reads the bits of x and y in the
order x1y1x2y2 ··· xnyn.
7
However, Boneh et al. show that a slight reordering of the processing of these input bits can
result in reduced MBP length without compromising in correctness. When the inputs are instead
read in the following order:
x1y1y2x2x3y3 ··· ynxn,
(1)
then, rather than producing one matrix for each input bit position during encryption, the two
matrices corresponding to y1 and y2 can be pre-multiplied, and the result is a single matrix rep-
resenting two digit positions. Naturally, this premultiplication can be performed for each pair of
adjacent bit positions belonging to the same input string (such as for x2x3, y3y4, and so on), and
hence the number of matrices produced is slightly over half of the number of matrices in the naive
ordering of input bits.
As a result, for evaluating the comparison state machine, where n is the length of the base-d
representation of an input, applying this optimization implies m = n + 1, a reduction from the
naive input ordering, which would result in m = 2n, and a reduction from M = 2 · (d + 3)2 · m to
M = (d + 3)2 · m. When applying this optimization in conjunction with representing the input in
base d = 4, for example, setting N = 1012 only requires m = 21 and M = 1029, a huge reduction
in cost that was emphasized by Boneh et al., and another strict improvement in parameters.
A new optimization: dimension reduction. We now describe a more sophisticated optimiza-
tion that can be applied to general MBPs which also results in a reduced ciphertext size. As an
example, we describe this optimization, called dimension reduction, as it applies to the comparison
function state machine (without applying the reordering of input bits from matrix premultipli-
cation), but we emphasize that the technique does not inherently use the structure of this state
machine in any crucial way, and can naturally be extended to general MBPs.
Our new optimization stems from the observation that, for each bit position in the automaton
evaluation, the transitions in the automaton do not involve all of the states in the automaton. This
is the same observation that motivates the use of layered state machines over ﬁnite state machines.
In particular, for the even-numbered bit positions, the transitions map from a set of d states
to a set of only 3 states. Similarly, for the odd-numbered bit positions, the transitions map from a
set of (at most) 3 states to a set of d states. As a result, the corresponding matrices for each bit
position need only be of dimension d×3 or 3× d (depending on the parity), as opposed to the naive
interpretation of the Boneh et al. construction which requires matrices of dimension (d+3)×(d+3).
Note, however, that the dimension reduction optimization is not fully compatible with matrix
premultiplication, since the eﬀectiveness of dimension reduction can degrade if matrix premulti-
plication is also applied. In particular, when applying matrix premultiplication to the comparison
state machine, we notice that there is less room for improvements with dimension reduction, as the
transitions for the position y1y2 correlate from a domain of d states to a range of also d states.
In §6.1, we concretely show how to apply a mixture of these optimizations to the comparison
automaton, and then use these optimizations to obtain asymptotically shorter ciphertexts for order-
revealing encryption.
8
vtable
mmap pp vtable
mmap sk vtable
mmap enc vtable
function
fread/fwrite
clear
init/clear
fread/fwrite
init/clear
fread/fwrite
set
add
mul
is zero
encode
comments
read/write public parameters
clear public params
initialize/clear secret key
read/write secret key
initialize/clear encoding
read/write encoding
copy encoding
implements Add
implements Mult
implements ZeroTest
implements Encode
Table 5.1: Interfaces exported by the libmmap library.
5 A Library for Multilinear Maps
In this section we describe our library, libmmap, which provides an API for interacting with diﬀerent
mmap backends. In this work we implement GGHLite (libgghlite) and CLT (libclt) backends2,
although we believe that it should be relatively straightforward to support future mmap implemen-
tations.
The libmmap library exports as its main interface a virtual method table mmap vtable, which
in turn contains virtual method tables for the public parameters (mmap pp vtable), the secret
key (mmap sk vtable), and the encoded values (mmap enc vtable). Table 5.1 lists the available
functions within each table. Each underlying mmap library must export functions matching these
function interfaces and write a wrapper within libmmap to match the virtual method table inter-
face. A user of libmmap then deﬁnes a pointer const mmap vtable * which points to the virtual
method table corresponding to the mmap of the user’s choice (in our case, either clt vtable or
gghlite vtable). In the following, we describe the two mmap schemes we support within libmmap:
libgghlite (§5.1) and libclt (§5.2).
Figure 5.1 presents estimates for the size of an encoding using GGHLite and CLT for security
parameters λ = 80 and λ = 40. We describe our parameter choices for arriving at these estimates
in Appendix A. As we can see, the CLT mmap produces smaller encodings than GGHLite as we
vary both λ and κ. This appears to be due to the growth of the lattice dimension in GGHLite
compared to the number of secret primes required by the CLT scheme, among other factors.
5.1 The GGHLite Multilinear Map
Building oﬀ of the original mmap candidate construction of Garg et al. (GGH) [GGH13a], Lan-
glois et al. [LSS14] proposed a modiﬁcation called GGHLite, along with parameter and performance
estimates for the resulting encodings of the scheme. More recently, Albrecht et al. [ACLL15] pro-
posed further modiﬁcations and optimizations on top of GGHLite, along with an implementation
2We also have a “dummy” mmap implementation for testing purposes.
9
)
B
M
(
e
z
i
S
g
n
i
d
o
c
n
E
100
10
1
0.1
0.01
0.001
2
5
10
GGHLite (λ = 80)
GGHLite (λ = 40)
20
15
Degree κ
CLT (λ = 80)
CLT (λ = 40)
25
30
Figure 5.1: Estimates for the size of a single encoding in megabytes (MB) produced for security parameters
λ = 80 and λ = 40 and varying the multilinearity degree κ ∈ [2, 30] for the GGHLite and CLT mmaps.
of their scheme under an open-source license. In this work, we refer to GGHLite as the construction
from the work of Albrecht et al., as opposed to the original work of Langlois et al.
Our GGHLite implementation. We use as our starting point the implementation of GGHLite3
released by Albrecht et al. [ACLL15]. We modiﬁed this implementation to add functionality for
handling the reading and writing of encodings, secret parameters, and public parameters to disk.
We also extended the implementation to handle more expressive index sets, which are used in MIFE
and obfuscation, as follows.
Typically, multilinear maps only support “levels”, where each encoding is created with respect
to an integer i ∈ [κ] (for an mmap of degree κ). The GGHLite implementation supports more
advanced labelings of encodings, by allowing for a universe U of κ indices to be deﬁned, and each
encoding can be created with respect to a singleton subset (containing only one element) of this
universe U. Multiplication of two encodings with respect to sets of indices S1 and S2 produces
an encoding with respect to the multiset union of S1 and S2. The zero-testing parameter is then
created to test for encodings which are labeled with respect to U. However, this functionality is still
not suﬃciently expressive to match the needs of our implementation and our deﬁnition of mmaps.
Consequently, we upgraded the handling of these encodings to support labelings of an encoding
with respect to any subset S of indices of the universe U. Then, when two encodings labeled with
two diﬀerent subsets are multiplied, the resulting encoding is labeled with respect to their multi-set
union. Finally, as before, the zero-testing parameter allows to check for encodings of 0 labeled at U,
only.
Finally, we isolated and rewrote the randomness generation procedures used by GGHLite, since
the original implementation relied on the randomness obtained from the GMP library, which is
not generated securely. We split this into a separate library, libaesrand, which uses AES-NI for
eﬃcient randomness generation, and which may be useful in other contexts.
Attacks on GGHLite. Recently, Hu and Jia [HJ16] showed how to perform “zeroizing” attacks
on GGHLite, to recover the secret parameters given certain public encodings of 0. However, since
neither MIFE nor obfuscation publish any encodings of 0, these applications seem to be unaﬀected
by the zeroizing attacks. More recently, Albrecht, Bai, and Ducas [ABD16] gave a quantum break
3https://bitbucket.com/malb/gghlite-flint
10
for GGHLite without using any encodings of 0 or the public zero-testing parameter. Subsequently,
Cheon, Jeong, and Lee [CJL16] showed how to give a (classical) polynomial-time attack on GGH-
Lite, again without using any encodings of 0. However, their attack requires exponential time if
the parameters of GGHLite are suﬃciently increased (by a polynomial amount).
In concurrent work, Miles, Sahai, and Zhandry [MSZ16a] gave a completely diﬀerent form
of attack, known as an “annihilation” attack, on applications of GGHLite, speciﬁcally, MIFE and
program obfuscation. They show that provably secure instantiations of these primitives from mmaps
are in fact insecure when the mmap is instantiated with GGHLite. Despite the annihilation attacks,
our implementations of these primitives from GGHLite still serve as a useful benchmark for the
eﬃciency of GGHLite and for the eﬃciency of future GGH-like schemes resistant to annihilation
attacks, which will inevitably arise from improvements to the GGH framework.
5.2 The CLT Multilinear Map
Coron, Lepoint, and Tibouchi [CLT13] proposed a candidate multilinear map over the integers,
which works over a composite modulus that is assumed to be hard to factor.
Our CLT implementation. Our implementation started with the implementation4 of CLT in
C++ by Coron et al. [CLT13]. We rewrote it in C and added functionality to save and restore en-
codings and the public parameters. As in the GGHLite case, we also modiﬁed its basic functionality
to support indices instead of levels.
Furthermore, in our extension of CLT, we improve the eﬃciency of the encoding process which
allows for us to apply the CLT multilinear map to the large parameter settings that we consider
in the remainder of this work. The original CLT implementation applies the Chinese Remainder
Theorem in the procedure that produces encodings of plaintext elements. Our implementation
employs a certain trade-oﬀ that allows for the application of the Chinese Remainder Theorem
in a recursive manner, resulting in more multiplications to compute the encoding, but with the
eﬃciency gain that the elements being multiplied are much smaller. Experimentally, this yields
a large speedup in the encoding time, more noticeably with larger parameters. In particular, for
λ = 80 and κ = 19, without this optimization, it takes 134 seconds to produce a CLT encoding,
whereas with our optimization, this time drops to 33 seconds.
Attacks on CLT. Similarly to other candidate constructions for multilinear maps, the CLT con-
struction was not based on an existing hardness assumption but rather introduced a new assump-
tion. Subsequently Cheon et al. [CHL+15] demonstrated a zeroizing attack against the construction
of CLT, which succeeds in recovering the secret parameters of the scheme. This attack was further
extended in the work of Coron et al. [CGH+15], which demonstrated how it can be generalized
and applied against some proposed countermeasures [BWZ14b, GGHZ14] to the attack by Cheon
et al. [CHL+15]. But again, as with the zeroizing attacks on GGHLite, these results do not apply
directly to the constructions we consider in this work.
6 Multi-Input Functional Encryption
The notion of multi-input functional encryption (MIFE), introduced by Goldwasser et al. [GGG+14],
extends the concept of functional encryption [BSW11] so that a decryption key is associated with
a multi-input function which is evaluated over multiple ciphertexts. More formally, a secret-key,
4https://github.com/tlepoint/multimap
11
ﬁxed-key MIFE scheme for a function f, on m inputs and with output in a range R, is a tuple of
algorithms (keygen, encrypt, eval) such that:
• keygen(1λ) → (pp, sk). The algorithm takes as input the security parameter and generates
the public parameters pp and a secret key sk.
• encrypt(sk, i, x) → ct. The algorithm takes as input the secret key sk, an input position index
i, and an input x, and outputs a ciphertext ct.
• eval(pp, ct1, . . . , ctm) → z. The algorithm takes as input a secret key sk and m ciphertexts
ct1, . . . , ctm, and produces an output z ∈ R.
Correctness requires that for any inputs x1, . . . , xm, for (pp, sk) ← keygen(1λ), letting cti =
encrypt(sk, i, xi) for each i ∈ [m], we have that
eval(pp, ct1, . . . , ctm) = f(x1, . . . , xm).
Informally, an MIFE scheme is secure if the information revealed by a collection of ciphertexts
is exactly the information that can be obtained by running eval, and no more. We omit formal
security deﬁnitions since we do not directly rely on them in this work.
Goldwasser et al. [GGG+14] gave a general MIFE construction that uses indistinguishability
obfuscation in a black-box manner. Boneh et al. [BLR+15] proposed a secret-key MIFE construction
that is based directly on mmaps (instead of obfuscation) in order to obtain better eﬃciency. A
particular instantiation of this MIFE construction, where the function used in the decryption
key is the comparison function, results in a construction for order revealing encryption (ORE),