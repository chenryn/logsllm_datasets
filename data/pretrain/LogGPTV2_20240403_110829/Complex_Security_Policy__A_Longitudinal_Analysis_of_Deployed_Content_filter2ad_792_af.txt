### Content Security Policy (CSP) Adoption and Challenges

#### 1. Limited Adoption of Nonces and Hashes
Despite the availability of nonces and hashes since 2014, they have not gained significant popularity. Instead, many policies still rely on `unsafe-inline`, which is easily bypassable by Cross-Site Scripting (XSS) attacks. This lack of adoption can be attributed to the complexity involved in deploying CSP securely. For instance, more than half of the websites (251 out of 449) that experimented with report-only mode never transitioned to enforcement mode. Additionally, operator feedback frequently mentioned that CSP was incompatible with their applications. Our survey supports this, as only 2 out of 30 respondents familiar with CSP claimed they could deploy it without causing issues.

#### 2. Challenges in Whitelisting
Deploying and maintaining limited whitelists is a significant challenge. Our case studies and general observations indicate that operators often include typo domains or leave unregistered domains in their whitelists, thereby undermining security. Approximately 13% of sites with content-restricting CSPs were found to have such vulnerabilities. The few sites that managed to implement a restricted whitelist reported that it took months or even years to curate. This extensive effort is a major deterrent for all but the largest organizations.

#### 3. CSP for TLS Enforcement
Previous studies have primarily focused on CSP's role in restricting script content, treating TLS enforcement and framing control as secondary. For example, Weichselbaum et al. [50] reported that only 3% of policies enforced TLS, while Calzavara et al. [8] noted that about 0.5% of the top 1 million sites used `upgrade-insecure-requests`. Our longitudinal analysis shows that CSP is a valuable tool for TLS enforcement, with about one-third of sites using it. Notably, 347 sites use the `upgrade-insecure-requests` directive to automatically upgrade HTTP resources to HTTPS. However, 77 out of 251 sites (31%) still link HTTP resources on their start pages, indicating that while `upgrade-insecure-requests` helps avoid mixed content warnings, full migration to HTTPS remains a challenge.

#### 4. CSP for Framing Control
Contrary to previous studies, our findings show that CSP is becoming increasingly popular for framing control, on par with content restriction and TLS enforcement. As of December 2018, 409 sites used CSP with `frame-ancestors`, while 3,253 sites used X-Frame-Options (XFO). Out of the 460 sites using CSP for framing control, 321 (70%) used whitelists that cannot be expressed by XFO, highlighting the additional flexibility CSP offers. However, about two-thirds of respondents were unaware of the benefits of `frame-ancestors`, suggesting a need for better education and documentation.

### Complexity and Perceived Difficulty

From both our longitudinal study and feedback from operators, it is clear that CSP for script content restriction is challenging to adopt. Despite modifications aimed at simplifying CSP (e.g., allowing inline scripts through nonces), we observed no significant uptake. Operators often find CSP too complex, leading them to avoid it for content restriction. For example, Google stopped using `strict-dynamic` due to its limitations, including lack of universal browser support and potential for Script Gadget attacks. The proposed solution, policy composition, involves setting two CSPs: one with a nonce and one with a whitelist. This approach, while effective, adds another layer of complexity.

### Success in Other Use Cases

While CSP has been less successful in mitigating XSS, it has become a useful tool for enforcing TLS and controlling framing. The `upgrade-insecure-requests` directive allows seamless migration to HTTPS, and `frame-ancestors` provides more flexible framing control than XFO. However, the overall adoption of these features is still hindered by the perceived complexity of CSP.

### Recommendations for Improving CSP Adoption

#### 1. Introduce `unsafe-nonced-elements`
To address the roadblock of event handlers, we propose extending CSP to allow nonced elements. This would permit event handlers on nonced elements without requiring `unsafe-inline`. While this introduces risks like nonce-reuse attacks and injections inside nonced elements, our analysis suggests that these risks are manageable and significantly lower than the current attack surface.

#### 2. Incorporate CSP into Development Cycles
Many operators attempt to retroactively deploy CSP, often resulting in trivially bypassable policies or giving up entirely. We recommend integrating CSP into the development cycle, with IDEs providing checks for CSP-incompatible code and third parties being explicit about their dependencies and impact on CSP. This would enable developers to make informed decisions and reduce CSP-related issues.

#### 3. Update Informational Materials
The complexity of CSP for script content restriction has given it a bad reputation. We advocate for clearer communication of the easy-to-deploy use cases, such as TLS enforcement and framing control. Browser vendors can also play a role by warning developers about inconsistently implemented mechanisms and providing quick fixes. We have initiated discussions with Chrome and Firefox to address these issues and improve CSP adoption.

### Conclusion

Our longitudinal analysis of CSP deployment from 2012 to 2018 highlights the challenges and successes of CSP. While it has become a valuable tool for TLS enforcement and framing control, the complexity of deploying secure content restrictions remains a significant barrier. By addressing these challenges and improving educational resources, we can enhance the adoption and effectiveness of CSP, ultimately improving web application security.