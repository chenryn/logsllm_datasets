%4 = icmp eq xa138, %3
%5 = xor %4, true
%6 = and %2, %5
ret %6 }
define void @main() {
% = call @p_bc(@pkt, @pkt)
%1 = call @p_ab(@pkt, @pkt)
%2 = and %, %1
call void @assert(%2)
ret void
}
@pkt = external global
The function @p_bc represents the function
P(B, C) = dst ip =24 10.1.3.0 ∧ dst ip =25 10.1.3.128
The function takes two parameters %si and %si+1 to support
packet transformations as described in §3.4.
The @main function is shown at the right side of the snip-
pet. @p_ab is the LLVM function representing P(A, B). @pkt
is a global variable representing a symbolic packet. Since
there is no transformation involved, the main function calls
the policy functions @p_bc and @p_ab with the same sym-
bolic packet. The call to @assert indicates the ﬁnal boolean
formula to be checked by the SAT solver. Next, LLVM
performs standard compiler optimization, including inlining
295
and simplifying expressions, whose results are shown on the
left:
define void @main() {
% = load @pkt.dst_ip
%1 = and %, xffffff
%2 = icmp eq %1, xa13
%3 = and %, xffffff8
%4 = icmp ne %3, xa138
%5 = and %2, %4
%6 = and %, xfffffe
%7 = icmp eq %6, xa12
%8 = and %5, %7
call void @assert(i1 %8)
ret void }
:formula
(let (?t1 (bvand p xffffff))
(let (?t2 (= ?t1 xa13))
(let (?t3 (bvand p xffffff8))
(let (?t4 (not (= ?t3 xa138)))
(let (?t5 (and ?t2 ?t4))
(let (?t6 (bvand p xfffffe))
(let (?t7 (= ?t6 xa12))
(let (?t8 (and ?t5 ?t7))
(?t8)))))))))
Then the result is directly translated into the input format
of the SAT solver, which is shown in the right. In this exam-
ple, it is a one-to-one translation except that @pkt.dst_ip is
renamed to p. After that, Anteater passes the formula into
the SAT solver to determine its satisﬁability. If the formula
is satisﬁable, the SAT solver will output an assignment to
pkt./p, which is a concrete example (the destination IP in
this case) of the packet which satisﬁes the desired constraint.
The work ﬂow of checking invariants is similar to that of
compiling a large C/C++ project. Thus Anteater uses oﬀ-
the-shelf solutions (i.e. make -j16) to parallelize the check-
ing. Anteater can generate @main functions for each instance
of the invariant, and check them independently (e.g., for
each starting vertex when checking loop-freeness). Paral-
lelism can therefore yield a dramatic speedup.
Anteater implements language bindings for both Ruby
and SLang, a declarative, Prolog-like domain-speciﬁc lan-
guage that we designed for writing customized invariants,
and implemented on top of Ruby-Prolog [34]. Operators can
express invariants via either Ruby scripts or SLang queries;
we found that both of them are able to express the three
invariants eﬃciently. The details of SLang are beyond the
scope of this paper.
5. EVALUATION
Our evaluation of Anteater has three parts. First (§5.1),
we applied Anteater to a large university campus network.
Our tests uncovered multiple faults, including forwarding
loops, traﬃc-blocking ACL rules that were no longer needed,
and redundant statically-conﬁgured FIB entries.
Second (§5.2), we evaluate how applicable Anteater is to
detecting router software bugs by classifying the reported
eﬀects of a random sample of bugs from the Quagga Bugzilla
database. We ﬁnd that the majority of these bugs have the
potential to produce eﬀects detectable by Anteater.
Third (§5.3), we conduct a performance and scalability
evaluation of Anteater. While far from ideal, Anteater takes
moderate time (about half an hour) to check for static prop-
erties in networks of up to 384 nodes.
We ran all experiments on a Dell Precision WorkStation
T5500 machine running 64-bit CentOS 5. The machine had
two 2.4 GHz quad-core Intel Xeon X5530 CPUs, and 48
GB of DDR3 RAM. It connected to the campus network
via a Gigabit Ethernet channel. Anteater ran on a NFS
volume mounted on the machine. The implementation used
LLVM 2.9 and JRuby 1.6.2. All SAT queries were resolved
by Boolector 1.4.1 with PicoSAT 936 and PrecoSAT 570 [8].
All experiments were conducted under 16-way parallelism.
Invariants
Loops
Alerts
Being ﬁxed
Stale conﬁg.
False pos.
No. of runs
9
9
0
0
7
Packet
loss
17
0
13
4
6
Consistency
2
0
1
1
6
Figure 8: Summary of evaluation results of Anteater on
our campus network.
5.1 Bugs found in a deployed network
We applied Anteater to our campus network. We collected
the IP forwarding tables and access control rules from 178
routers in the campus. The maximal length of loop-free
paths in the network is 9. The mean FIB size was 1,627
entries per router, which were inserted by a combination of
BGP, OSPF, and static routing. We also used a network-
wide map of the campus topology as an additional input.
We implemented the invariants of §3, and report their
evaluation results on our campus network. Figure 8 reports
the number of invariant violations we found with Anteater.
The row Alert shows the number of distinct violations de-
tected by an invariant, as a bug might violate multiple in-
variants at the same time. For example, a forwarding loop
creating a black hole would be detected by both the invariant
for detecting forwarding loops and the invariant for detecting
packet loss. We classiﬁed these alerts into three categories.
First, the row Being ﬁxed means the alerts are conﬁrmed
as bugs and currently being ﬁxed by our campus network
operators. Second, the row Stale conﬁguration means that
these alerts result from explicit and intentional conﬁguration
rules, but rules that are outdated and no longer needed. Our
campus network operators decided to not ﬁx these stale con-
ﬁgurations immediately, but plan to revisit them during the
next major network upgrade. Third, False positive means
that these alerts ﬂag a conﬁguration that correctly reﬂected
the operator’s intent and these alerts are not bugs. Finally,
No. of runs reports the total number of runs required to
issue all alerts; the SAT solver reports only one example
violation per run. For each run, we ﬁltered the violations
found by previous runs and rechecked the invariants until
no violations were reported.
5.1.1 Forwarding loops
Anteater detected nine potential forwarding loops in the
network. One of them is shown in Figure 9 highlighted by
a dashed circle. The loop involved two routers: node and
bypass-a. Router bypass-a had a static route for preﬁx
130.126.244.0/22 towards router node. At the same time,
Router node had a default route towards router bypass-a.
As shown in the FIBs, according to longest preﬁx match
rules, packets destined to 130.126.244.0/23 from router bypass-a
could reach the destination. Packets destined to the preﬁx
130.126.244.0/22 but not in 130.126.244.0/23 would fall into
the forwarding loop.
Incidentally, all nine loops happened between these two
routers. According to the network operator, router bd 3
used to connect with router node directly, and node used to
connect with the external network.
It was a single choke
point to aggregate traﬃc so that the operator could deploy
Intrusion Detection and Prevention (IDP) devices at one
Exit!
Core!
Dist!
…!
Firewall!
Core!
bypass-a!
node!
External 
Network!
Dist2!
bypass-b!
bd 1!
bd 2!
bd 3!
bypass-a:!
S 130.126.244.0/22 -> node!
O 130.126.244.0/23 -> node!
S  0.0.0.0/0 -> bypass-b!
node:!
C 130.126.244.0/23 -> DIRECT!
S 0.0.0.0 -> bypass-a!
Figure 9: Top: Part of the topology of the campus net-
work. Ovals and solid lines are routers and links respec-
tively. The oval with dashed lines circles the location
where a forwarding loop was detected. Bottom: Frag-
ments of data plane information in the network. S stands
for static, O stands for OSPF, and C stands for con-
nected.
single point. The IDP device, however, was unable to keep
up after the upgrade, so router bypass-a was introduced to
oﬄoad the traﬃc. As a side eﬀect, the forwarding loops were
also introduced when the operator conﬁgured forwarding for
that router incorrectly.
These loops are reachable from 64 of 178 routers in the
network. All loops have been conﬁrmed by the network op-
erator and they are currently being ﬁxed.
5.1.2 Packet loss
Anteater issued 17 packet loss alerts, scattered at routers
at diﬀerent levels of hierarchy. One is due to the lack of
default routes in the router; three are due to blocking traﬃc
towards unused IP spaces; and the other 13 alerts are be-
cause the network blocks traﬃc towards certain end-hosts.
We recognized that four alerts are legitimate operational
practice and classiﬁed them as false positives. Further in-
vestigation of the other 13 alerts shows that they are stale
conﬁguration entries: seven out of 13 are internal IP ad-
dresses that were used in the previous generation of the net-
work. The other six blocked IP addresses are external, and
they are related to security issues. For example, an external
IP was blocked in April 2009 because the host made phish-
ing attempts to the campus e-mail system. The block was
placed to defend against the attack without increasing the
load on the campus ﬁrewalls.
The operator conﬁrmed that these 13 instances can be
dated back as early as September 2008 and they are un-
necessary, and probably will be removed during next major
network upgrade.
296
5.1.3 Consistency
Based on conversations with our campus network opera-
tors, we know that campus routers in the same level of hier-
archy should have identical policies. Hence, we picked one
representative router in the hierarchy and checked the con-
sistency between this router and all others at the same level
of hierarchy. Anteater issued two new alerts: (1) The two
core routers had diﬀerent policies on IP preﬁx 10.0.3.0/24;
(2) Some building routers had diﬀerent policies on the pri-
vate IP address ranges 169.254.0.0/16 and 192.168.0.0/16.
Upon investigating the alert we found that one router ex-
posed its web-based management interface through 10.0.3.0/24.
The other alert was due to a legacy issue that could be
dated back to the early 1990’s: according to the design doc-
uments of the campus, 169.254.0.0/16 and 192.168.0.0/16
were intended to be only used within one building. Usually
each department had only one building and these IP spaces
were used in the whole department. As some departments
spanned their oﬃces across more than one building, net-
work operators had to maintain compatibility by allowing
this traﬃc to go one level higher in the hierarchy, and let
the router at higher level connect them together by creating
a virtual LAN for these buildings.
5.2 Applicability to router bugs
Like conﬁguration errors, defects in router software might
aﬀect the network. These defects tend to be out of the scope
of conﬁguration analysis, but Anteater might be able to de-
tect the subset of such defects which manifest themselves in
the data plane.
To evaluate the eﬀectiveness of Anteater’s data plane anal-
ysis approach for catching router software bugs, we stud-
ied 78 bugs randomly sampled from the Bugzilla repository
of Quagga [30]. Quagga is an open-source software router
which is used in both research and production [31]. We stud-
ied the same set of bugs presented in [41]. For each bug, we
studied whether it could aﬀect the data plane, as well as
what invariants are required to detect it. We found 86%
(67 out of 78) of the bugs might have visible eﬀects on data
plane, and potentially can be detected by Anteater.
Detectable with packet_loss and loop.
60 bugs could be
detected by the packet loss detection algorithm, and 46 bugs
could be detected by the loop detection algorithm. For ex-
ample, when under heavy load, Quagga 0.96.5 fails to up-
date the Linux kernel’s routing tables after receiving BGP
updates (Bug 122). This can result in either black holes or
forwarding loops in the data plane, which could be detected
by either packet_loss or loop.
Detectable with other invariants. 7 bugs can be detected by
other network invariants. For example, in Quagga 0.99.5, a
BGP session could remain active after it has been shut down
in the control plane (Bug 416). Therefore, packets would
continue to follow the path in the data plane, violating the
operator’s intent. This bug cannot be detected by either
packet_loss or loop, but it is possible to detect it via a
customized query: checking that there is no data ﬂow across
the given link. We reproduced this bug on a local Quagga
testbed and successfully detected it with Anteater.
No visible data plane eﬀects. 11 bugs lack visible eﬀects on
the data plane. For example, the terminal hangs in Quagga
0.96.4 during the execution of show ip bgp when the data
297
)
s
d
n
o
c
e
s
(
e
m
i
t
g
n
i
n
n
u
R
 2000
 1600
 1200
 800
 400
 0