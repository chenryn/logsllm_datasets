a higher bandwidth, as the bottleneck.
The third cluster corresponds to high bandwidth paths (upper
right corner). Since the current available bandwidth tools have a
relative measurement error around 30% [18], we show the two 30%
error margins as dotted lines in Figure 7. We consider the upper
bound for the available bandwidth provided by Pathneck to be valid
if it falls within these error bounds. We ﬁnd that most upper bounds
are valid. Only 5 data points fall outside of the region deﬁned by
the two 30% lines. Further analysis shows that the data point above
the region corresponds to a path with a bottleneck on the last link,
similar to the cases mentioned above. The four data points below
the region belong to paths with the same source node (lulea). We
have not been able to determine why the Pathneck bound is too low.
3.4 Impact of Conﬁguration Parameters
The Pathneck algorithms described in Section 2.3 use three con-
ﬁguration parameters: the threshold used to pick candidate choke
points (step = 100µs), the conﬁdence value (conf = 0.1), and the
detection rate (d rate = 0.5). We now investigate the sensitivity of
Pathneck to the value of these parameters.
To show how the 100µs threshold for the step size affects the al-
gorithm, we calculated the cumulative distribution function for the
step sizes for the choke points detected in the “GE” set of Internet
measurements (Table 4, to be described in Section 4.1). Figure 8
shows that over 90% of the choke points have gap increases larger
than 1000µs, while fewer than 1% of the choke points have gap
increases around 100µs. Clearly, changing the step threshold to a
larger value (e.g., 500µs) will not change our results signiﬁcantly.
To understand the impact of conf and d rate, we reran the Path-
neck detection algorithm by varying conf from 0.05 to 0.3 and
d rate from 0.5 to 1. Figure 9 plots the percentage of paths with
at least one choke point that satisﬁes both the conf and d rate
thresholds. The result shows that, as we increase conf and d rate,
fewer paths have identiﬁable choke points. This is exactly what we
would expect. With higher values for conf and d rate, it becomes
more difﬁcult for a link to be consistently identiﬁed as a choke link.
The fact that the results are much less sensitive to d rate than conf
shows that most of the choke point locations are fairly stable within
a probing set (short time duration).
The available bandwidth of the links on a path and the location
of both choke points and the bottleneck are dynamic properties.
The Pathneck probing trains effectively sample these properties,
but the results are subject to noise. Figure 9 shows the tradeoffs
involved in using these samples to estimate the choke point loca-
tions. Using high values for conf and d rate will result in a small
number of stable choke points, while using lower values will also
identify more transient choke points. Clearly the right choice will
depend on how the data is used. We see that for our choice of
conf and d rate values, 0.1 and 0.5, Pathneck can clearly identify
one or more choke points on almost 80% of the paths we probed.
The graph suggests that our selection of thresholds corresponds to
a fairly liberal notion of choke point.
4.
INTERNET BOTTLENECK
MEASUREMENT
It has been a common assumption in many studies that bottle-
necks often occur at edge links and peering links. In this section, we
test this popular assumption using Pathneck, which is sufﬁciently
light-weight to conduct large scale measurements on the Internet.
Using the same set of data, we also look at the stability of Internet
bottlenecks.
4.1 Data Collection
We chose a set of geographically diverse nodes from Planet-
lab [4] and RON [31] as probing sources. Table 4 lists all the nodes
that we used for collecting measurement data for the analysis in
this paper. Among them, “GE” is used in Sections 4.2, 4.3, and 5,
“ST” is used in Section 4.4, “OV” is used in Section 6.1, and “MH”
is used in Section 6.2. These nodes reside in 46 distinct ASes and
are connected to 30 distinct upstream providers, providing good
coverage for north America and parts of Europe.
We carefully chose a large set of destinations to cover as many
distinct inter-AS links as possible. Our algorithm selects destina-
tion IP addresses using the local BGP routing table information of
the probe source, using a similar method as described in [24]. In
most cases, we do not have access to the local BGP table for the
sources, but we almost always can obtain the BGP table for their
upstream provider, for example from public BGP data sources such
as RouteViews [6]. The upstream provider information can be iden-
tiﬁed by performing traceroute to a few randomly chosen locations
such as www.google.com and www.cnn.com from the probe
sources. In the case of multihomed source networks, we may not
be able to obtain the complete set of upstream providers.
Given a routing table, we ﬁrst pick a “.1” or “.129” IP address
for each preﬁx possible. The preﬁxes that are completely covered
by their subnets are not selected. We then reduce the set of IP ad-
dresses by eliminating the ones whose AS path starting from the
probe source are part of other AS paths. Here we make the sim-
pliﬁcation that there is only a single inter-AS link between each
pair of adjacent ASes. As the core of the Internet is repeatedly tra-
versed for the over 3,000 destinations we selected for each source,
we would expect that each of these inter-AS links is traversed many
times by our probing packets. Note that the destination IP addresses
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
s
h
t
a
p
f
o
n
o
i
t
c
a
r
F
0
1
2
3
4
5
0
0
5
10
15
Path source ID
20
25
(a) Distribution of number of choke links per source.
1
0.9
0.8
0.7
0.6
F
D
C
0.5
0.4
0.3
0.2
0.1
0
0
0.1
0.2
0.3
0.4
0.5
popularity
0.6
0.7
0.8
0.9
1
bottleneck link
choke link
(b) Popularity of choke links and bottleneck links.
Figure 10: Distribution and popularity of choke links.
obtained from this procedure do not necessarily correspond to real
end hosts.
In our experiments, each source node probes each destination
once using Pathneck. Pathneck is conﬁgured to use a probing set
of 10 probing trains and it then uses the results of the probing set to
calculate the location of the choke points as well as a rough estimate
for the available bandwidth for the corresponding choke links. We
again use the conf ≥ 0.1 and d rate ≥ 0.5 thresholds to select
choke points. Due to the small measurement time, we were able to
ﬁnish probing to around 3,500 destinations within 2 days.
4.2 Popularity
As described in previous sections, Pathneck is able to detect mul-
tiple choke links on a network path. In our measurements, Pathneck
detected up to 5 choke links per path. Figure 10(a) shows the num-
ber of paths that have 0 to 5 choke links. We found that, for all
probing sources, fewer than 2% of the paths report more than 3
choke links. We also noticed that a good portion of the paths have
no choke link. This number varies from 3% to 60% across different
probing sources. The reason why Pathneck cannot detect a choke
link is generally that the trafﬁc on those paths is too bursty so no
link meets the conf ≥ 0.1 and d rate ≥ 0.5 criteria.
In our measurements, we observe that some links are detected
as choke links in a large number of paths. For a link b that
is identiﬁed as a choke link by at least one Pathneck probe, let
N umP robe(b) denote the total number of probes that traverse b
and let N umP ositiveP robe(b) denote the total number of probes
that detect b as a choke link. We compute the P opularity(b) of
link b as follows:
P opularity(b) = N umP ositiveP robe(b)
N umP robe(b)
The popularity of a bottleneck link is deﬁned similarly. Fig-
ure 10(b) shows the cumulative distribution of the popularity of
choke links (dashed curve) and bottleneck links (solid curve) in our
measurements. We observe that half of the choke links are detected
in 20% or less of the Pathneck probings that traverse them. About
5% of the choke links are detected by all the probes. The same
observations hold for the popularity of bottleneck links.
4.3 Location
In general, a link b is considered to be an intra-AS link if both
ends of b belong to the same AS; otherwise, b is an inter-AS link. In
practice, it is surprisingly difﬁcult to identify a link at the bound-
ary between two ASes due to the naming convention [24] that is
currently used by some service providers. In our experiments, we
ﬁrst use the method described in [24] to map an IP address to its
AS. We then classify a link b into one of the following three cat-
egories: (i) Intra-AS link. A link b is intra-AS if both ends of b
and its adjacent links belong to the same AS. Note that we are very
conservative in requiring that intra-AS links fully reside inside a
network. (ii) Inter0-AS link. A link b is inter0-AS if the ends of b
do not belong to the same AS. The link b is likely to be an inter-AS
link, but it is also possible that b is one hop away from the actual
inter-AS link. (iii) Inter1-AS link. A link b is inter1-AS if both
ends of b belong to the same AS and it is adjacent to an inter0-AS
link. In this case, b appears to be one hop away from the link where
AS numbers change, but it might be the actual inter-AS link. Note
that, using our deﬁnitions, the inter0-AS links and inter1-AS links
should contain all the inter-AS links and some intra-AS links that
are one hop away from the inter-AS links.
Figure 11(a) shows the distribution of choke links and bottle-
neck links across these three categories. We observe that for some
probing sources up to 40% of both the bottleneck links and choke
links occur at intra-AS links. Considering our very conservative
deﬁnition of intra-AS link, this is surprising, given the widely used
assumption that bottlenecks often occur at the boundary links be-
tween networks.
For a choke link b in a probing set P , we compute its normal-
ized location (denoted by N L(b, P )) on the corresponding net-
work path as follows. Let A1, A2, ..., Ak denote the AS-level path,
where k is the length of the AS path. (i) If b is in the i-th AS along
the path, then N L(b, P ) = i/k. (ii) If b is the link between the i-th
and (i + 1)-th ASes, then N L(b, P ) = (i + 0.5)/k. Note that the
value of N L(b, P ) is in the range of [0, 1]. The smaller the value
of N L(b, P ), the closer the choke link b is to the probing source.
Given a set of probing sets P1, P2, ..., Pm (m > 0) that detect b as
a choke link, the normalized location of link b is computed as
(cid:1)m
N L(b) =
j=1 N L(b, Pj )
m
Since the bottleneck link is the primary choke link, the deﬁnition
of normalized location also applies to the bottleneck link.
Figure 11(b) shows the cumulative distribution of the normalized
locations of both bottleneck and choke links. The curves labeled
“(unweighted)” show the distribution when all links have an equal
weight, while for the curves labeled “(weighted)” we gave each link
a weight equal to the number of probing sets in which the link is
detected as a bottleneck or choke link. This is interesting because
we observed in Figure 10(b) that some links are much more likely
to be a bottleneck or a choke link than others. The results show
that about 65% of the choke links appear in the ﬁrst half of an
end-to-end path (i.e., N L(b, P ) ≤ 0.5). By comparing weighted
with unweighted curves, we also observe that high-frequency choke
links tend to be located closer to the source. Finally, by comparing
the curves for choke links and bottleneck links, we observe that
bottleneck locations are more evenly distributed along the end-to-
end path. These observations are in part inﬂuenced by the deﬁnition
of choke link and bottleneck, and by Pathneck’s bias towards earlier
choke links.
s
k
n
i
l
e
k
o
h
c
f
o
n
o
i
t
c
a
r
F
s
k
n
i
l
k
c
e
n
e
l
t
t
o
b
f
o
n
o
i
t
c
a
r
F
1
0.8
0.6
0.4
0.2
0
0
1
0.8
0.6
0.4
0.2
0
0
5
5
Inter0−AS
Inter1−AS
Intra−AS
10
15
Probing source id
20
25
F
D
C
Inter0−AS
Inter1−AS
Intra−AS
10
15
Probing source id
20
25
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
F
D
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
1
0
0
Intra-AS bottleneck link
Inter0-AS bottleneck link
Inter1-AS bottleneck link
Intra-AS choke link
Inter0-AS choke link
Inter1-AS choke link
0.2
0.4
0.6
0.8
Location of choke links (normalized by AS path length)
1
Bottleneck link(unweighted)
Bottleneck link(weighted)
Choke link (unweighted)
Choke link (weighted)
0.2
0.4
0.6