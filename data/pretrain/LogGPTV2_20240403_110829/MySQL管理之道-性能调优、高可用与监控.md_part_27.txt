ORDERBYa.title DESC
FROMa,b
WHEREa.contentLIKE'rc_%'AND a.id=b.id
FROMa,b
SELECTa.id,a.title,a.content,b.log_time,b.name
---
## Page 201
外，都应该写在where子句中。
一般情况下，having子句中的条件用于对一些集合函数的比较，如count(O 等。除此以
如果改用where子句替换having子句，性能就会不一样，如图5-70所示。
口
口
pid
结果
0281
20281
2028184782012-10-2711:41:25
结果
20281
20281
8
200
色
1669188
（只读
（只读）
19111
266578
8758
8454
820
7759
436
910
3001
2Profile
8436
001
2013-03-28
2013-
2013
2013
-04
FED
11:
图5-67
图5-68
208
信息
医
229
52
250
25
2525
3
66
4表
查询结果有重复数据
正确的查询结果
回
8888888888888888888888
国
5信
Y
@F
第5章
能调
优
·
187
---
## Page 202
188
·第二部分故障诊断与性能优化篇
维护上的开销。
子句时，才能享受到索引性能提升的好处。如果不使用索引，它就没有价值，而且会带来
了对各个表写人操作的开销。此外，索引还增加了数据库的规模。只有当某列被用于where
DELETE操作)，如果带有一个或多个索引，那么MySQL也要更新各个索引。这样就增加
极快的。遗憾的是，索引也有相关的开销。每次向表中写人时（如INSERT、UPDATEH或
5.5.3
适当的索引对应用的性能来说至关重要，而且在MySQL中建议使用索引，它的速度是
图5-71中的表 toid是单列索引，datetime也是单列索引l，我们看一下explain 执行计划。
1．单列索引和联合索引的对比
98
合理使用索引
aysql> explain select * fron sbtest group by id hauing id>48 1init 3;
row in set（0.自8 sec)
1|SIMPLE
1|SIMPLE
sbtest|index|NULL
3rows in set （0.00
table
Itype
C
type
Gria
图5-70优化器执行结果对比
pad
|possible_keys
sec)
图5-69查询结果
图5-71单列索引
|PRIMARY14
|key
PRIMARY14
key
key_len
|NULL|10008731
NULL|508936|Using where
ttttt
Irows
|Extra
+
Extra
---
## Page 203
注意，联合索引要遵循最左侧原则，例如，下面这些查询都能够使用这个 fname_Iname_age
索引：
划，如图5-72所示。
索引，但不能同时都用上，所以最终只选择了它认为最优的toid索引。
那如果把toid字段和 datetime字段建立为联合索引会怎样？再来看一下explain执行计
Select peopleid FROM people Where firstname=Mike'AND lastname=Sulivan'ANDage=17";
可以看出，效率高了许多，仅仅扫描了91行，减少了（653行－91行）562行的扫描。
A
DATE_FORMAT(CURDATE(),*%Y-%m-%d');
mysql>selectcreatetime fromaawhere createtime>
mysql>select createtime from aa where date(createtime)=curdate();
先来看两条SQL语句：
2.字段使用函数，将不能用到索引
这里需要特别注意！
SelectpeopleidFROMpeopleWherelastname='Sullivan'ANDage='17';
Select peopleid FROM peopleWhereage='17';
Select peopleid FROM peopleWhere lastname='Sullivan';
下面这些查询不能够使用这个fname_Iname_age 索引l：
SelectpeopleidFROMpeopleWherefirstname=Mike';
SelectpeopleidFROMpeopleWherefirstname='Mike'ANDlastname='Sullivan';
esult
总共扫描了653行，
1row in set(0.01 sec)
createtime
2012-07-1110:03:45
createtime
R
2Messag
A4Info
，当我们执行查询的时候，MySQL只能使用一个索引，虽然有两个
cin
图5-72联合索引
E014229570387
Refresh
第5章性能调优·189
---
## Page 204
190·第二部分故障诊断与性能优化篇
注意
where后面的字段使用函数，将不会用到索引，用优化器查看下情况（如图5-73所示）。
扫描。
nysql> explain select createtime fron a where createtime> DATE_FORMAT(cuRDATE(),3-m-2d');
wysq1> exp1lain SELECT CoUNT() FROM cdb_forum_post where DateDiff(NOM(),from_unixtine(dateline,2y-2n-2d*) = 0:
nysql)SELECT
再看下面这一个例子（如图5-74所示)：
rowinset（0.00sec)
id|select_type |table |type |possible_keys Ikey 1key_len |ref|rows|Extra
rowin set（0.onsec)
id|select_type|table|type|possible_keys|key|key_len|ref |rous |Extra|
MySQL目前还不支持函数索引。
row in set (0.0 sec)
11SIMPLE|aa 1range
这是开发人员在日常写SQL语句时容易忽视的一个问题。
3.致命的无引号导致全表扫描，无法用到索引
COUNT(*)
id|
两条SQL语句的结果一样，但写法不同，哪个性能好呢？答案是第2个，因为在
1row in set(0.00 sec)
2012-07-1110:03:45
4842
！
4042
|select_type|
SIHPLE
COUNT（）
(0.50sec)
COUNT（*)FROM
table
FROM cdb_forum_post where dateline >= UNIX_TIHESTANP(DATE_FORMAT(now(),'2y-n-&d’));
Forun_post
cdb_forun_post
type
type
where DateDiff（How（),from_unixtime(dateline,'2v-&n-&d'))-0;
图5-74函数不能用到索引
|possible_keys|
possible_keys 1
图5-73函数不能用到索引
key
key
key_len|ref
key_len1
ref
HULL
6using where;Using index
Extra
1Extra
---
## Page 205
到索引（如图5-77所示）。
很明显，用数字当字符类型，数字一定要加引号。
对比一下两个SQL的执行时间（如图5-78所示）。
由于name是字符型，那么where 条件必须要加引号，这条SQL改成下面这样即可用
优化器的执行情况如图5-76所示。
先来查看表结构和索引，如图5-75所示。
ELECT
tabl=
FFOM
rin
SELECT *FROM playerinfc
SELECT *FROM plaverinfo
set
(2.27
5
11
图5-78查询时间对比
图5-77使用到了索引
图5-76全表扫描
Nul]
图5-75表结构
ERL
where
NILL
01-
NILL
bey_len|rf
10451569
第5章性能调优·191
---
## Page 206
192
2·第二部分故障诊断与性能优化篇
序，也会出现Using filesort排序，如下面这个例子（如图5-84所示）。
索引，再来看看效果（如图5-83所示）。
引，优化器会选择那个最优的，所以我们可以考虑为 pid字段和 change_date 建立一个联合
通过性别男或女读取大概一半的记录。在这种情况下进行全表扫描浏览要更快。
分布的数据集时更是如此。对此，典型的例子是性别，它有两个均匀分布的值（男和女)。
引，
数)，优化器认为全表扫描比索引来得快。下面缩短了时间范围，如图5-80所示。
yqexaisltn（ifrnfisediet15a16ansta
row in set（0.88sec)
row in 5et （8.00
1|SIHPLE
可以看到，Using filesort 排序已经没有了。Group by 的优化方法也是一样的。
很遗憾，还是没有效果。前面已经说过，一条SQL只能有一个索引，如果有多条索
1ISINPLE
有时候，进行全表浏览要比必须读取索引和数据表更快，尤其是当索引包含的是平均
如果 order by后面有多个字段排序，它们的顺序要一致，如果一个是降序，一个是升
目前已经有了pid索引l，那么给change_date增加索引吗？我们来试试，如图5-82所示。
从优化器上来看，里面使用了排序Using filesort，这条 SQL优化的关键是看如何增加索
我们先看一条SQL，如图5-81所示。
6.order by、group by优化
5.考虑不为某些列建立索引
优化器执行的结果是全表扫描。虽然有索引，但没有用上，扫描的行数太多了（8位
现在，已经使用到了索引。
aysq1> explain select count(id) fron cin_offlinemessage wheredatetine>2012-3-15'and state-;
我们看下面的一个例子，这里要取出大于2012年3月15日的数据，如图5-79所示。
4.当取出的数据量超过表中数据的20%，优化器就不会使用索引，而是全表扫描
id1
ISIHPLE
sec)
|test_change|ref
图5-81使用了排序Usingfilesort
|Ix_pid
图5-80使用到索引
图5-79全表扫描
|Ix_pid|5
abe
key_len|ref
1key
_datetime
|const|2264|usingwhere;Using filesort
key
key_len1
|rous|Extra
| HULL|3534912|Using where
Extra
|Extra
---
## Page 207
row in set (8.08 sec)
id|select_type|
3rows in set （0.80 sec)
rowinset(0.oθsec)
id|select_type|table
1|SIHPLE
row in set(0.00 sec)
test_change
test_change
test_change
Table
在这里，Usingfilesort排序已经没有了。
1|SIHPLE
改为排序一致即可解决上述问题，如图5-85所示。
row in set (8.08 sec)
SIMPLE
11SIHPLE
一
1Hon_unique|Key_nane
table
test_change1
Fec
1|1x_pid
0|PRINARY
cash_change
-+---
图5-83pid字段和change_date建立联合索引
warnings:8
type
ref
图5-82change_date 增加索引
Ix_pid
possible_keys|
1Ix_p_c_d
Seq_in_index|Colunn_name |Collation |Cardinality|Sub_part |Packed|
possible_keys|key
图5-84排序不一致
IX_pid,Ix_p_c|IX_p_c
图5-85排序一致
1|change_date|A
11pid
1|change_id|A
--+---
_pid
1Ixp_c_d15
key_len
1A
-+-
ref
const
2264
ref
29501
1961
731
-+-
第5章性能调优·193
Extra
HULLINULL
HULLINULL
HULLIHULL