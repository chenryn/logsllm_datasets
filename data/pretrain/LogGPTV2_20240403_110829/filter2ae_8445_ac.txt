### 内存布局和 JavaScript 对象结构

在分析内存布局时，我们注意到以下内容：

```
0000027a`bf2900d8  fff88000`00000002
0000027a`bf2900e0  fff88000`00000003
0000027a`bf2900e8  fff88000`00000004
0000027a`bf2900f0  fff88000`00000005
0000027a`bf2900f8  4f4f4f4f`4f4f4f4f
```

这些值表示一个数组的内容，从 1 到 5 的数值作为 `JS::Value` 类型的五个整数。我们可以推测出某些位置可能存储了数组的大小和容量，但其他数据的具体含义尚不明确。

接下来，我们查看一些相关的数据类型定义：

```plaintext
0:000> dt JSObject
   +0x000 group_           : js::GCPtr
   +0x008 shapeOrExpando_  : Ptr64 Void

0:000> dt js::NativeObject
   +0x000 group_           : js::GCPtr
   +0x008 shapeOrExpando_  : Ptr64 Void
   +0x010 slots_           : Ptr64 js::HeapSlot
   +0x018 elements_        : Ptr64 js::HeapSlot

0:000> dt js::ArrayObject
   +0x000 group_           : js::GCPtr
   +0x008 shapeOrExpando_  : Ptr64 Void
   +0x010 slots_           : Ptr64 js::HeapSlot
   +0x018 elements_        : Ptr64 js::HeapSlot
```

`JS::ArrayObject` 定义在 `vm/ArrayObject.h` 文件中，是 `JS::NativeObject` 类的子类（而 `JS::NativeObject` 又是 `JS::ShapedObject` 的子类，最终继承自 `JSObject`）。它基本上也是所有其他 JavaScript 对象的子类。

SpiderMonkey 中的本地对象主要由两个组件组成：
- **形状对象**：描述对象的属性、类等信息（通过 `shapeOrExpando_` 字段指向）。
- **存储元素或属性值的槽**：用于存储实际的数据。

### 形状 (Shapes)

形状对象的作用是描述对象具有的各种属性。从概念上讲，它可以被视为一种哈希表，其中键是属性名称，值是实际存储属性内容的槽。

为了更好地理解形状和内联缓存的概念，建议观看 [@bmeurer](https://twitter.com/bmeurer) 和 [@mathias](https://twitter.com/mathias) 编写的演示文稿：[JavaScript 引擎基础：形状和内联缓存](https://mathiasbynens.be/notes/shapes-ics)。

考虑以下 JavaScript 代码：

```javascript
'use strict';
const Address = Math.atan2;
const A = {
    foo: 1337,
    blah: 'doar-e'
};
Address(A);
const B = {
    foo: 1338,
    blah: 'sup'
};
Address(B);
const C = {
    foo: 1338,
    blah: 'sup'
};
C.another = true;
Address(C);
```

将这段代码放在调试器中，逐步检查 shape 对象：

```plaintext
0:000> bp js!js::math_atan2
0:000> g
Breakpoint 0 hit
Time Travel Position: D454:D
js!js::math_atan2:
00007ff7`76c9e140 56              push    rsi
0:000> ?? vp[2].asBits_
unsigned int64 0xfffe01fc`e637e1c0
0:000> dt js::NativeObject 1fc`e637e1c0 shapeOrExpando_
   +0x008 shapeOrExpando_ : 0x000001fc`e63ae880 Void
0:000> ?? ((js::shape*)0x000001fc`e63ae880)
class js::Shape * 0x000001fc`e63ae880
   +0x000 base_            : js::GCPtr
   +0x008 propid_          : js::PreBarriered
   +0x010 immutableFlags   : 0x2000001
   +0x014 attrs            : 0x1 ''
   +0x015 mutableFlags     : 0 ''
   +0x018 parent           : js::GCPtr
   +0x020 kids             : js::KidsPointer
   +0x020 listp            : (null) 
0:000> ?? ((js::shape*)0x000001fc`e63ae880)->propid_.value
struct jsid
   +0x000 asBits           : 0x000001fc`e63a7e20
```

在这个例子中，`JS::Shape` 描述了一个属性；它的名称和槽号。通过父字段和其他字段，形状对象被链接在一起。槽号存储在 `immutableFlags` 字段的低位中。属性名称存储为 `propid_` 字段中的 `jsid`。

```plaintext
0:000> ?? (char*)((JSString*)0x000001fc`e63a7e20)->d.inlineStorageLatin1
char * 0x000001fc`e63a7e28
 "blah"
```

形状对象是链式连接的。如果我们转储其父级，可以找到描述第二个属性 `foo` 的形状：

```plaintext
0:000> ?? ((js::shape*)0x000001fc`e63ae880)->parent.value
class js::Shape * 0x000001fc`e63ae858
   +0x000 base_            : js::GCPtr
   +0x008 propid_          : js::PreBarriered
   +0x010 immutableFlags   : 0x2000000
   +0x014 attrs            : 0x1 ''
   +0x015 mutableFlags     : 0x2 ''
   +0x018 parent           : js::GCPtr
   +0x020 kids             : js::KidsPointer
   +0x020 listp            : 0x000001fc`e63ae880 js::GCPtr
0:000> ?? ((js::shape*)0x000001fc`e63ae880)->parent.value->propid_.value
struct jsid
   +0x000 asBits           : 0x000001fc`e633d700
0:000> ?? (char*)((JSString*)0x000001fc`e633d700)->d.inlineStorageLatin1
char * 0x000001fc`e633d708
 "foo"
```

继续执行并检查第二个对象是否共享相同的形状层次结构：

```plaintext
0:000> g
Breakpoint 0 hit
Time Travel Position: D484:D
js!js::math_atan2:
00007ff7`76c9e140 56              push    rsi
0:000> ?? vp[2].asBits_
unsigned int64 0xfffe01fc`e637e1f0
0:000> dt js::NativeObject 1fc`e637e1f0 shapeOrExpando_
   +0x008 shapeOrExpando_ : 0x000001fc`e63ae880 Void
```

如预期的那样，对象 `B` 确实共享相同的形状层次结构。当我们向对象 `C` 添加另一个属性时，会发生什么？

```plaintext
0:000> g
Breakpoint 0 hit
Time Travel Position: D493:D
js!js::math_atan2:
00007ff7`76c9e140 56              push    rsi
0:000> ?? vp[2].asBits_
union JS::Value
   +0x000 asBits_          : 0xfffe01e7`c247e1c0
0:000> dt js::NativeObject 1fc`e637e1f0 shapeOrExpando_
   +0x008 shapeOrExpando_ : 0x000001fc`e63b10d8 Void
0:000> ?? ((js::shape*)0x000001fc`e63b10d8)
class js::Shape * 0x000001fc`e63b10d8
   +0x000 base_            : js::GCPtr
   +0x008 propid_          : js::PreBarriered
   +0x010 immutableFlags   : 0x2000002
   +0x014 attrs            : 0x1 ''
   +0x015 mutableFlags     : 0 ''
   +0x018 parent           : js::GCPtr
   +0x020 kids             : js::KidsPointer
   +0x020 listp            : (null) 
0:000> ?? ((js::shape*)0x000001fc`e63b10d8)->propid_.value
struct jsid
   +0x000 asBits           : 0x000001fc`e63a7e60
0:000> ?? (char*)((JSString*)0x000001fc`e63a7e60)->d.inlineStorageLatin1
char * 0x000001fc`e63a7e68
 "another"
0:000> ?? ((js::shape*)0x000001fc`e63b10d8)->parent.value
class js::Shape * 0x000001fc`e63ae880
```

新的 `JS::Shape` 被分配（`0x000001e7c24b1150`），其父级是前一组形状（`0x000001e7c24b1150`），类似于在链表中添加节点。

### 槽 (Slots)

在上一节中，我们讨论了属性名称如何存储在内存中。那么属性的值在哪里呢？

为了回答这个问题，我们回到第一次调用 `Math.atan2` 时的状态：

```plaintext
Breakpoint 0 hit
Time Travel Position: D454:D
js!js::math_atan2:
00007ff7`76c9e140 56              push    rsi
0:000> ?? vp[2].asBits_
unsigned int64 0xfffe01fc`e637e1c0
```

因为我们已经转储了描述 `foo` 和 `blah` 属性的 `js::Shape` 对象，知道它们的属性值分别存储在槽 0 和槽 1 中。为了查看这些值，我们可以在 `js::NativeObject` 后面转储内存：

```plaintext
0:000> dqs 1fc`e637e1c0
000001fc`e637e1c0  000001fc`e637a520
000001fc`e637e1c8  000001fc`e63ae880
000001fc`e637e1d0  00000000`00000000
000001fc`e637e1d8  00007ff7`7707dac0 js!emptyElementsHeader+0x10
000001fc`e637e1e0  fff88000`00000539  ?? (char*)((JSString*)0x1fce63a7e40)->d.inlineStorageLatin1
char * 0x000001fc`e63a7e48
 "doar-e"
```

下面是一个描述对象层次结构的图表，以清除任何可能的混淆：

到目前为止，我们已经涵盖了大部分内容，这应该足以帮助我们理解接下来的内容。你可以使用此背景来检查大多数 JavaScript 对象。我遇到的唯一“特例”是存储长度属性的 JavaScript 数组，例如在 `js::ObjectElements` 对象中。

```plaintext
0:000> dt js::ObjectElements
   +0x000 flags            : Uint4B
   +0x004 initializedLength : Uint4B
   +0x008 capacity         : Uint4B
   +0x00c length           : Uint4B
```

希望这些信息对你有所帮助！