# 警告
对于初学者来说，使用 `apt-pinning` 命令可能会引发一些严重的问题。除非绝对必要，否则应避免使用此命令。

## 2.7.9 使用带有 unstable 软件包的 testing 版本

### 警告
新手应谨慎使用 `apt-pinning` 命令，因为它可能导致系统不稳定。仅在确实需要时才使用该命令。

如果您不希望安装推荐的特定软件包，您必须创建 `/etc/apt/preferences` 文件，并在文件顶部明确列出这些软件包及其优先级设置，如下所示：

```plaintext
Package: package-1
Pin: version *
Pin-Priority: -1

Package: package-2
Pin: version *
Pin-Priority: -1
```

以下是一个关于 `apt-pinning` 技术的例子，当使用 testing 版本时，可以实现从 unstable 中获取特定较新的上游版本软件包的日常升级。首先，在 `/etc/apt/sources.list` 文件中列出所有必需的仓库：

```plaintext
deb http://deb.debian.org/debian/ testing main contrib non-free
deb http://deb.debian.org/debian/ unstable main contrib non-free
deb http://security.debian.org/debian-security testing-security main contrib
```

接着，配置 `/etc/apt/preferences` 文件以指定优先级：

```plaintext
Package: *
Pin: release a=unstable
Pin-Priority: 100
```

如果要在此配置下从 unstable 仓库安装名为 `package-name` 的软件包及其依赖项，可执行以下命令（此时 unstable 的优先级变为 990）：

```bash
$ sudo apt-get install -t unstable package-name
```

在这种配置下，运行 `apt-get update` 和 `apt-get dist-upgrade` （或 `aptitude safe-upgrade` 和 `aptitude full-upgrade`）将从 testing 仓库升级那些从 testing 安装的软件包，并从 unstable 仓库升级那些从 unstable 安装的软件包。

### 小心
请勿移除 `/etc/apt/sources.list` 文件中的 `testing` 仓库记录。如果没有 `testing` 仓库，APT 系统会使用更新的 unstable 仓库来升级软件包。

### 提示
通常建议在上述操作后立即注释掉 `/etc/apt/sources.list` 文件中的 `unstable` 仓库条目。这有助于防止因处理大量仓库记录而导致的升级缓慢问题，同时也会阻止那些通过 unstable 安装的软件包自动升级。

### 提示
如果在 `/etc/apt/preferences` 文件中将 `Pin-Priority: 100` 替换为 `Pin-Priority: 1`，即使删除了 `/etc/apt/sources.list` 文件中的 `testing` 记录，已安装且优先级为 100 的软件包也不会通过 unstable 仓库进行升级。

若希望自动跟踪 unstable 仓库中的某些特定软件包，而无需每次安装时都使用 `-t unstable` 选项，您必须创建 `/etc/apt/preferences` 文件并在文件顶部按以下方式清晰地列出这些软件包：

```plaintext
Package: package-1
Pin: release a=unstable
Pin-Priority: 700

Package: package-2
Pin: release a=unstable
Pin-Priority: 700
```

例如，为了使用最新的 unstable 英文版 `Debian Reference`，应在 `/etc/apt/preferences` 文件中添加以下条目：

```plaintext
Package: debian-reference-en
Pin: release a=unstable
Pin-Priority: 700

Package: debian-reference-common
Pin: release a=unstable
Pin-Priority: 700
```

### 提示
即使您使用的是 stable 仓库，`apt-pinning` 技术仍然有效。根据经验，从 unstable 仓库安装文档包通常是安全的。

## 2.7.10 使用带有 experimental 软件包的 unstable 版本

### 警告
新手应谨慎使用 `apt-pinning` 命令，因为它可能导致系统不稳定。仅在确实需要时才使用该命令。

这是另一个使用 `apt-pinning` 的示例，主要使用 unstable 源，但包含了 experimental 源，用于安装上游更新的软件包。在 `/etc/apt/sources.list` 文件中包含以下条目：

```plaintext
deb http://deb.debian.org/debian/ unstable main contrib non-free
deb http://deb.debian.org/debian/ experimental main contrib non-free
deb http://security.debian.org/ testing-security main contrib
```

由于 experimental 源是非自动源，默认 Pin-Priority 值为 1（<100）。除非需要在下次更新时自动升级特定软件包，否则无需在 `/etc/apt/preferences` 文件中设置 Pin-Priority 值。

## 2.7.11 紧急降级

### 警告
新手应谨慎使用 `apt-pinning` 命令，因为它可能导致系统不稳定。仅在确实需要时才使用该命令。

### 小心
降级在 Debian 设计上不受官方支持，仅作为紧急恢复的一部分。尽管如此，降级在许多情况下也能很好地工作。对于重要系统，建议在恢复操作前备份所有重要数据，并重新安装新系统。

可以通过控制候选版本从新仓库降级到旧仓库，从而使损坏的系统恢复。这是一种避免许多冗长的 `dpkg -i broken-package_old-version.deb` 命令的方法。

搜索 `/etc/apt/sources.list` 文件中使用 unstable 的行，如：

```plaintext
deb http://deb.debian.org/debian/ sid main contrib non-free
```

将其替换为使用 testing 的行：

```plaintext
deb http://deb.debian.org/debian/ trixie main contrib non-free
```

然后，设置 `/etc/apt/preferences` 文件：

```plaintext
Package: *
Pin: release a=testing
Pin-Priority: 1010
```

运行以下命令使整个系统的软件包强制降级：

```bash
$ sudo apt-get update
$ sudo apt-get dist-upgrade
```

在紧急降级后，移除 `/etc/apt/preferences` 这个特殊的文件。

### 提示
这是一个好方法，尽可能多地移除（不是清除！）软件包以减少依赖问题。可能需要手动移除和安装一些软件包以完成降级。特别注意 Linux 内核、引导程序、udev、PAM、APT 和网络相关的软件包及其配置文件。

## 2.7.12 equivs 软件包

如果您从源代码编译了一个程序来代替 Debian 软件包，最好将其制作成一个真正的本地 Debian 软件包（*.deb）并使用私人仓库。

如果您选择从源代码编译一个程序并将它安装到 `/usr/local`，可能需要使用 `equivs` 工具来满足缺失的软件包依赖关系。

```plaintext
Package: equivs
Priority: optional
Section: admin
Description: Circumventing Debian package dependencies
This package provides a tool to create trivial Debian packages.
Typically these packages contain only dependency information, but they
can also include normal installed files like other packages do.

One use for this is to create a metapackage: a package whose sole
purpose is to declare dependencies and conflicts on other packages so
that these will be automatically installed, upgraded, or removed.

Another use is to circumvent dependency checking: by letting dpkg
think a particular package name and version is installed when it
isn’t, you can work around bugs in other packages’ dependencies.
(Please do still file such bugs, though.)
```

## 2.7.13 移植一个软件包到 stable 系统

### 小心
由于系统差异，不能保证这里描述的过程能顺利工作，可能需要额外的手工处理。

对于部分升级的 stable 系统，使用源代码包在运行环境中重新构建一个软件包是不错的选择，可以避免因依赖关系导致大量软件包升级。

在 stable 系统的 `/etc/apt/sources.list` 文件中添加以下条目：

```plaintext
deb-src http://deb.debian.org/debian unstable main contrib non-free
```

然后，安装编译所需的软件包并下载源代码包：

```bash
# apt-get update
# apt-get dist-upgrade
# apt-get install fakeroot devscripts build-essential
# apt-get build-dep foo
$ apt-get source foo
$ cd foo*
```

如果需要向后移植，可以从 backport 的软件包中更新一些工具链软件包，例如 `dpkg` 和 `debhelper`。

执行以下命令：

```bash
$ dch -i
```

更新软件包版本，例如在 `debian/changelog` 中附加一个 `+bp1`。

像下面那样构建软件包并将它们安装到系统中：

```bash
$ debuild
$ cd ..
# debi foo*.changes
```

## 2.7.14 用于 APT 的代理服务器

因为镜像整个 Debian 仓库的子区会浪费硬盘和网络带宽，当管理多个 LAN 上的系统时，部署一个本地代理服务器是个好主意。APT 可以通过配置来使用通用 web (http) 代理服务器，例如 squid（参见第 6.5 节），详情请参见 `apt.conf(5)` 和 `/usr/share/doc/apt/examples/configure-index.gz`。环境变量 `$http_proxy` 会覆盖 `/etc/apt/apt.conf` 文件中设置的代理服务器。

这里有一些专门针对 Debian 仓库的代理工具。在使用之前，请检查 BTS。

### 小心
当 Debian 重构其仓库结构时，这些专用代理工具往往需要软件包维护者重写代码，并可能在一段时间内无法使用。另一方面，通用 web (http) 代理服务器更强健并且更容易应对这种改变。

| 软件包 | 流行度 | 大小 | 说明 |
| --- | --- | --- | --- |
| approx | V:0,I:0 | 7124 | 缓存 Debian 仓库文件的代理服务器（已编译的 OCaml 程序） |
| apt-cacher | V:0,I:0 | 266 | 为 Debian 软件包和源代码文件进行缓存代理（Perl 程序） |
| apt-cacher-ng | V:4,I:4 | 1816 | 分发软件包的缓存代理（C++ 编译的程序） |

## 2.7.15 更多关于软件包管理的文档

您可以从以下文档中了解软件包管理的更多信息：

- **主要文档**：
  - `aptitude(8)`, `dpkg(1)`, `tasksel(8)`, `apt(8)`, `apt-get(8)`, `apt-config(8)`, `apt-secure(8)`, `sources.list(5)`, `apt.conf(5)`, `apt_preferences(5)`;
  - 来自 `apt-doc` 软件包的 `/usr/share/doc/apt-doc/guide.html/index.html` 和 `/usr/share/doc/apt-doc/offline.html/index.html`；
  - 来自 `aptitude-doc-en` 软件包的 `/usr/share/doc/aptitude/html/en/index.html`。

- **Debian 仓库的官方详细文档**：
  - "Debian Policy Manual Chapter 2 - The Debian Archive"
  - "Debian Developer's Reference, Chapter 4 - Resources for Debian Developers 4.6 The Debian archive"
  - "The Debian GNU/Linux FAQ, Chapter 6 - The Debian FTP archives"

- **为 Debian 用户构建 Debian 软件包的教程**：
  - "Debian 维护者指南"。

---

# 第三章
# 系统初始化

作为系统管理员，粗略地了解 Debian 系统的启动和配置方式是明智的。尽管准确的细节可以在安装的软件包及对应的文档中找到，但这些知识对大多数人来说都是必要的。

以下是 Debian 系统初始化的要点概述。由于 Debian 系统在不断发展，建议参考最新的文档。

- **Debian Linux 内核手册** 是关于 Debian 内核的主要信息来源。