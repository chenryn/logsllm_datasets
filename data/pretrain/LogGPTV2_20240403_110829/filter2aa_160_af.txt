IMAGE_SYM_CLASS_REGISTER 
4 
Register variable. The Value field specifies 
register number. 
IMAGE_SYM_CLASS_EXTERNAL_DEF 
5 
Symbol is defined externally. 
IMAGE_SYM_CLASS_LABEL 
6 
Code label defined within the module. The 
Value field specifies the offset of the 
symbol within the section. 
IMAGE_SYM_CLASS_UNDEFINED_LABEL 
7 
Reference to a code label not defined. 
IMAGE_SYM_CLASS_MEMBER_OF_STRUCT 
8 
Structure member. The Value field 
specifies nth member. 
IMAGE_SYM_CLASS_ARGUMENT 
9 
Formal argument (parameter)of a function. 
The Value field specifies nth argument. 
IMAGE_SYM_CLASS_STRUCT_TAG 
10 
Structure tag-name entry. 
IMAGE_SYM_CLASS_MEMBER_OF_UNION 
11 
Union member. The Value field specifies 
nth member. 
IMAGE_SYM_CLASS_UNION_TAG 
12 
Union tag-name entry. 
IMAGE_SYM_CLASS_TYPE_DEFINITION 
13 
Typedef entry. 
IMAGE_SYM_CLASS_UNDEFINED_STATIC 
14 
Static data declaration. 
IMAGE_SYM_CLASS_ENUM_TAG 
15 
Enumerated type tagname entry. 
IMAGE_SYM_CLASS_MEMBER_OF_ENUM 
16 
Member of enumeration. Value specifies 
nth member. 
IMAGE_SYM_CLASS_REGISTER_PARAM 
17 
Register parameter. 
IMAGE_SYM_CLASS_BIT_FIELD 
18 
Bit-field reference. Value specifies nth bit in 
the bit field. 
IMAGE_SYM_CLASS_BLOCK 
100 
A .bb (beginning of block) or .eb (end of 
block) record. Value is the relocatable 
address of the code location. 
IMAGE_SYM_CLASS_FUNCTION 
101 
Used by Microsoft tools for symbol records 
that define the extent of a function: begin 
function (named .bf), end function (.ef), and 
lines in function (.lf). For .lf records, Value 
gives the number of source lines in the 
function. For .ef records, Value gives the 
size of function code. 
IMAGE_SYM_CLASS_END_OF_STRUCT 
102 
End of structure entry. 
IMAGE_SYM_CLASS_FILE 
103 
Used by Microsoft tools, as well as 
traditional COFF format, for the source-file 
symbol record. The symbol is followed by 
auxiliary records that name the file. 
IMAGE_SYM_CLASS_SECTION 
104 
Definition of a section (Microsoft tools use 
STATIC storage class instead). 
IMAGE_SYM_CLASS_WEAK_EXTERNAL 
105 
Weak external. See Section 5.5.3, 
“Auxiliary Format 3: Weak Externals,” for 
more information. 
5.5. Auxiliary Symbol Records 
Auxiliary Symbol Table records always follow and apply to some standard Symbol Table record. 
An auxiliary record can have any format that the tools are designed to recognize, but 18 bytes 
must be allocated for them so that Symbol Table is maintained as an array of regular size. 
Currently, Microsoft tools recognize auxiliary formats for the following kinds of records: function 
definitions, function begin and end symbols (.bf and .ef), weak externals, filenames, and section 
definitions. 
The traditional COFF design also includes auxiliary-record formats for arrays and structures. 
Microsoft tools do not use these, and instead place that symbolic information in CodeView format 
in the debug sections. 
5.5.1. Auxiliary Format 1: Function Definitions 
A symbol table record marks the beginning of a function definition if all of the following are true: it 
has storage class EXTERNAL (2), a Type value indicating it is a function (0x20), and a section 
number greater than zero. Note that a symbol table record that has a section number of 
UNDEFINED (0) does not define the function and does not have an auxiliary record. Function-
definition symbol records are followed by an auxiliary record with the format described below. 
Offset 
Size 
Field 
Description 
0 
4 
TagIndex 
Symbol-table index of the corresponding .bf 
(begin function) symbol record. 
4 
4 
TotalSize 
Size of the executable code for the function 
itself. If the function is in its own section, 
the Size of Raw Data in the section header 
will be greater or equal to this field, 
depending on alignment considerations. 
8 
4 
PointerToLinenumber 
File offset of the first COFF line-number 
entry for the function, or zero if none exists. 
See Section 5.3, “COFF Line Numbers,” for 
more information. 
12 
4 
PointerToNextFunction 
Symbol-table index of the record for the 
next function. If the function is the last in 
the symbol table, this field is set to zero. 
16 
2 
Unused. 
5.5.2. Auxiliary Format 2: .bf and .ef Symbols 
For each function definition in the Symbol Table, there are three contiguous items that describe 
the beginning, ending, and number of lines. Each of these symbols has storage class FUNCTION 
(101): 
1 
A symbol record named .bf (begin function). The Value field is unused. 
2 
A symbol record named .lf (lines in function). The Value field gives the number of lines in the 
function. 
3 
A symbol record named .ef (end of function). The Value field has the same number as the 
Total Size field in the function-definition symbol record. 
The .bf and .ef symbol records (but not .lf records) are followed by an auxiliary record with the 
following format: 
Offset 
Size 
Field 
Description 
0 
4 
Unused. 
4 
2 
Linenumber 
Actual ordinal line number (1, 2, 3, etc.) within 
source file, corresponding to the .bf or .ef 
record. 
6 
6 
Unused. 
12 
4 
PointerToNextFunction 
(.bf only) 
Symbol-table index of the next .bf symbol 
record. If the function is the last in the symbol 
table, this field is set to zero. Not used for .ef 
records. 
16 
2 
Unused. 
5.5.3. Auxiliary Format 3: Weak Externals 
“Weak externals” are a mechanism for object files allowing flexibility at link time. A module can 
contain an unresolved external symbol (sym1), but it can also include an auxiliary record 
indicating that if sym1 is not present at link time, another external symbol (sym2) is used to 
resolve references instead. 
If a definition of sym1 is linked, then an external reference to the symbol is resolved normally. If a 
definition of sym1 is not linked, then all references to the weak external for sym1 refer to sym2 
instead. The external symbol, sym2, must always be linked; typically it is defined in the module 
containing the weak reference to sym1. 
Weak externals are represented by a Symbol Table record with EXTERNAL storage class, 
UNDEF section number, and a value of 0. The weak-external symbol record is followed by an 
auxiliary record with the following format: 
Offset 
Size 
Field 
Description 
0 
4 
TagIndex 
Symbol-table index of sym2, the symbol to be 
linked if sym1 is not found. 
4 
4 
Characteristics  
A value of 
IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY 
indicates that no library search for sym1 should be 
performed. 
A value of 
IMAGE_WEAK_EXTERN_SEARCH_LIBRARY 
indicates that a library search for sym1 should be 
performed. 
A value of 
IMAGE_WEAK_EXTERN_SEARCH_ALIAS 
indicates that sym1 is an alias for sym2. 
8 
10 
Unused. 
Note that the Characteristics field is not defined in WINNT.H; instead, the Total Size field is used. 
5.5.4. Auxiliary Format 4: Files 
This format follows a symbol-table record with storage class FILE (103). The symbol name itself 
should be .file, and the auxiliary record that follows it gives the name of a source-code file. 
Offset 
Size 
Field 
Description 
0 
18 
File Name 
ASCII string giving the name of the source file; padded 
with nulls if less than maximum length. 
5.5.5. Auxiliary Format 5: Section Definitions 
This format follows a symbol-table record that defines a section: such a record has a symbol 
name that is the name of a section (such as .text or .drectve) and has storage class STATIC (3). 
The auxiliary record provides information on the section referred to. Thus it duplicates some of the 
information in the section header. 
Offset 
Size 
Field 
Description 
0 
4 
Length 
Size of section data; same as Size of Raw Data 
in the section header. 
4 
2 
NumberOfRelocations 
Number of relocation entries for the section. 
6 
2 
NumberOfLinenumbers 
Number of line-number entries for the section. 
8 
4 
Check Sum 
Checksum for communal data. Applicable if the 
IMAGE_SCN_LNK_COMDAT flag is set in the 
section header. See “COMDAT Sections” 
below, for more information. 
12 
2 
Number 
One-based index into the Section Table for the 
associated section; used when the COMDAT 
Selection setting is 5. 
14 
1 
Selection 
COMDAT selection number. Applicable if the 
section is a COMDAT section. 
15 
3 
Unused. 
5.5.6. COMDAT Sections (Object Only) 
The Selection field of the Section Definition auxiliary format is applicable if the section is a 
COMDAT section: a section that can be defined by more than one object file. (The flag 
IMAGE_SCN_LNK_COMDAT is set in the Section Flags field of the section header.) The 
Selection field determines the way that the linker resolves the multiple definitions of COMDAT 
sections. 
The first symbol having the section value of the COMDAT section must be the section symbol. 
This symbol has the name of the section, Value field equal to 0, the section number of the 
COMDAT section in question, Type field equal to IMAGE_SYM_TYPE_NULL, Class field equal to 
IMAGE_SYM_CLASS_STATIC, and one auxiliary record. The second symbol is called “the 
COMDAT symbol” and is used by the linker in conjunction with the Selection field. 
Values for the Selection field are shown below. 
 Constant 
Value 
Description 
IMAGE_COMDAT_SELECT_NODUPLICATES 
1 
The linker issues a multiply defined symbol 
error if this symbol is already defined. 
IMAGE_COMDAT_SELECT_ANY 
2 
Any section defining the same COMDAT 
symbol may be linked; the rest are 
removed. 
IMAGE_COMDAT_SELECT_SAME_SIZE 
3 
The linker chooses an arbitrary section 
among the definitions for this symbol. A 
multiply defined symbol error is issued if all 
definitions don’t have the same size. 
IMAGE_COMDAT_SELECT_EXACT_MATCH 
4 
The linker chooses an arbitrary section 
among the definitions for this symbol. A 
multiply defined symbol error is issued if all 
definitions don’t match exactly. 
IMAGE_COMDAT_SELECT_ASSOCIATIVE 
5 
The section is linked if a certain other 
COMDAT section is linked. This other 
section is indicated by the Number field of 
the auxiliary symbol record for the section 
definition. Use of this setting is useful for 
definitions that have components in multiple 
sections (for example, code in one and 
data in another), but where all must be 
linked or discarded as a set. 
IMAGE_COMDAT_SELECT_LARGEST 
6 
The linker chooses the largest from the 
definitions for this symbol. If multiple 
definitions have this size the choice 
between them is arbitrary. 
5.6. COFF String Table 
Immediately following the COFF symbol table is the COFF string table. The position of this table is 
found by taking the symbol table address in the COFF header, and adding the number of symbols 
multiplied by the size of a symbol. 
At the beginning of the COFF string table are 4 bytes containing the total size (in bytes) of the rest 
of the string table. This size includes the size field itself, so that the value in this location would be 
4 if no strings were present. 
Following the size are null-terminated strings pointed to by symbols in the COFF symbol table. 
5.7. The Attribute Certificate Table (Image Only) 
Attribute Certificates may be associated with an image by adding an Attribute Certificate Table. 
There are a number of different types of Attribute Certificates. The meaning and use of each 
certificate type is not covered in this document. For this information see the Microsoft Distributed 
System Architecture, Attribute Certificate Architecture Specification. 
An Attribute Certificate Table is added at the end of the image, with only a .debug section 
following (if a .debug section is present). The Attribute Certificate Table contains one or more 
fixed length table entries which can be found via the Certificate Table field of the Optional Header 
Data Directories list (offset 128). Each entry of this table identifies the beginning location and 
length of a corresponding certificate. There is one Certificate Table entry for each certificate 
stored in this section. The number of entries in the certificate table can be calculated by dividing 
the size of the certificate table (found in offset 132) by the size of an entry in the certificate table 
(8). Note that the size of the certificate table includes only the table entries, not the actual 
certificates which the table entries, in turn, point to. 
The format of each table entry is: 
Offset 
Size 
Field 
Description 
0 
4 
Certificate Data 
File pointer to the certificate data. This will 
always point to an address that is octaword 
aligned (i.e., is a multiple of 8 bytes and so the 
low-order 3 bits are zero). 
0 
4 
Size of Certificate 
Unsigned integer identifying the size (in bytes) of 
the certificate. 
Notice that certificates always start on an octaword boundary. If a certificate is not an even 
number of octawords long, it is zero padded to the next octaword boundary. However, the length 
of the certificate does not include this padding and so any certificate navigation software must be 
sure to round up to the next octaword to locate another certificate. 
5.7.1. Certificate Data 
This is the binary data representing an Attribute Certificate. The format and meaning of each 
certificate is defined in Attribute Certificate Architecture Specification. The certificate starting 
location and length is specified by an entry in the Certificate Table. Each certificate is represented 
by a single Certificate Table entry. 
5.8 Delay-Load Import Tables (Image Only) 
These tables were added to the image in order to support a uniform mechanism for applications 
to delay the loading of a DLL until the first call into that DLL. The layout of the tables matches that 
of the traditional import tables (see Section “6.4. The .idata Section“ for details), so only a few 
details will be discussed here.  
5.8.1. The Delay-Load Directory Table 
The Delay-Load Directory Table is the counterpart to the Import Directory Table, and can be 
retrieved via the Delay Import Descriptor entry in the Optional Header Data Directories list (offset 
200). The Table is arranged as follows: 
Offset 
Size 
Field 
Description 
0 
4 
Attributes 
Must be zero. 
4 
4 
Name 
Relative virtual address of the name of the 
DLL to be loaded. The name resides in the 
read-only data section of the image. 
8 
4 
Module Handle 
Relative virtual address of the module 
handle (in the data section of the image) of 
the DLL to be delay-loaded. Used for 
storage by the routine supplied to manage 
delay-loading. 
12 
4 
Delay Import Address 
Table 
Relative virtual address of the delay-load 
import address table. See below for further 
details. 
16 
4 
Delay Import Name 