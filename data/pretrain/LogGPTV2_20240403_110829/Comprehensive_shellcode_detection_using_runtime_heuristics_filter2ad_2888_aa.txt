title:Comprehensive shellcode detection using runtime heuristics
author:Michalis Polychronakis and
Kostas G. Anagnostakis and
Evangelos P. Markatos
Comprehensive Shellcode Detection using Runtime
Heuristics
Michalis Polychronakis
Columbia University, USA
PI:EMAIL
Kostas G. Anagnostakis
Niometrics, Singapore
PI:EMAIL
Evangelos P. Markatos
FORTH-ICS, Greece
PI:EMAIL
ABSTRACT
A promising method for the detection of previously unknown code
injection attacks is the identiﬁcation of the shellcode that is part of
the attack vector using payload execution. Existing systems based
on this approach rely on the self-decrypting behavior of polymor-
phic code and can identify only that particular class of shellcode.
Plain, and more importantly, metamorphic shellcode do not carry
a decryption routine nor exhibit any self-modiﬁcations and thus
both evade existing detection systems.
In this paper, we present
a comprehensive shellcode detection technique that uses a set of
runtime heuristics to identify the presence of shellcode in arbitrary
data streams. We have identiﬁed fundamental machine-level oper-
ations that are inescapably performed by different shellcode types,
based on which we have designed heuristics that enable the detec-
tion of plain and metamorphic shellcode regardless of the use of
self-decryption. We have implemented our technique in Gene, a
code injection attack detection system based on passive network
monitoring. Our experimental evaluation and real-world deploy-
ment show that Gene can effectively detect a large and diverse set
of shellcode samples that are currently missed by existing detec-
tors, while so far it has not generated any false positives.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Invasive software
General Terms
Security
Keywords
Shellcode Detection, Payload Execution, Code Emulation
1.
INTRODUCTION
Code injection attacks have become one of the primary meth-
ods of malware spreading. In a typical code injection attack, the
attacker sends a malicious input that exploits a memory corrup-
tion vulnerability in a program running on the victim’s computer.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
The injected code, known as shellcode, carries out the ﬁrst stage of
the attack, which usually involves the download and execution of a
malware binary on the compromised host.
Once sophisticated tricks of the most skilled virus authors, ad-
vanced evasion techniques like code obfuscation and polymorphism
are now the norm in most instances of malicious code [19]. The
wide availability of ready-to-use shellcode construction and obfus-
cation toolkits and the discovery rate of new vulnerabilities have
rendered exploit or vulnerability speciﬁc detection techniques in-
effective [31]. A promising approach for the generic detection of
code injection attacks is to focus on the identiﬁcation of the shell-
code that is indispensably part of the attack vector, a technique ini-
tially known as abstract payload execution [33].
Identifying the
presence of the shellcode itself allows for the detection of previ-
ously unknown attacks without caring about the particular exploita-
tion method used or the vulnerability being exploited.
Initial implementations of this approach attempt to identify the
presence of shellcode in network inputs using static code analy-
sis [33–35]. However, methods based on static analysis cannot ef-
fectively handle malicious code that employs advanced obfuscation
tricks such as indirect jumps and self-modiﬁcations. Dynamic code
analysis using emulation is not hindered by such obfuscations and
can detect even extensively obfuscated shellcode. This kind of “ac-
tual” payload execution has proved quite effective in practice [22]
and is being used in network-level and host-level systems for the
zero-day detection of both server-side and client-side code injec-
tion attacks [9, 14, 15, 23, 38].
A limitation of the above techniques is that they are conﬁned to
the detection of a particular class of polymorphic shellcode that ex-
hibits self-decrypting behavior. Although shellcode “packing” and
encryption are commonly used for evading signature-based detec-
tors, attackers can achieve the same or even higher level of eva-
siveness without the use of self-decrypting code, rendering above
systems ineffective. Besides code encryption, polymorphism can
instead be achieved by mutating the actual instructions of the shell-
code before launching the attack—a technique known as metamor-
phism [32]. Metamorphism has been widely used by virus authors
and thus can trivially be applied for shellcode mutation. Surpris-
ingly, even plain shellcode, i.e., shellcode that does not change
across different instances, is also not detected by existing payload
execution methods. Technically, a plain shellcode is no different
than any instance of metamorphic shellcode, since both do not carry
a decryption routine nor exhibit any self-modiﬁcations or dynamic
code generation. Consequently, an attack that uses a previously
unknown static analysis-resistant plain shellcode will manage to
evade existing detection systems.
In this paper, we present a comprehensive shellcode detection
technique based on payload execution. In contrast to previous ap-
Abbreviation
PEB
BACKWD
SEH
SYSCALL
Matching Shellcode Behavior
kernel32.dll base address resolution
kernel32.dll base address resolution
Memory scanning / SEH-based GetPC code
Memory scanning
Table 1: Overview of the shellcode detection heuristics used in
Gene.
heuristics can easily be added due to the extensible nature of the
system.
Existing polymorphic shellcode detection methods focus on the
identiﬁcation of self-decrypting behavior, which can be simulated
without any host-level information [23]. For example, accesses to
addresses other than the memory area of the shellcode itself are
ignored. However, shellcode is meant to be injected into a running
process and it usually accesses certain parts of the process’ address
space, e.g., for retrieving and calling API functions. In contrast to
previous approaches, the emulator used in our system is equipped
with a fully blown virtual memory subsystem that handles all user-
level memory accesses and enables the initialization of memory
pages with arbitrary content. This allows us to populate the virtual
address space of the supposed process with an image of the mapped
pages of a process taken from a real system.
The purpose of this functionality is twofold: First, it enables
the construction of heuristics that check for memory accesses to
process-speciﬁc data structures. Although the heuristics presented
in this paper target Windows shellcode, and thus the address space
image used in conjunction with these heuristics is taken from a
Windows process, some other heuristic can use a different mem-
ory image, e.g., taken from a Linux process. Second, this allows to
some extent the correct execution of non-self-contained shellcode
that may perform accesses to known memory locations for evasion
purposes [10]. We discuss this issue further in Sec. 6.
3. RUNTIME HEURISTICS
Each heuristic used in Gene is composed of a sequence of con-
ditions that should all be satisﬁed in order during the execution of
malicious code. Table 1 gives an overview of the four heuristics
presented in this section. The heuristics focus on the identiﬁcation
of the ﬁrst actions of different shellcode types, according to their
functionality, regardless of any self-decrypting behavior.
3.1 Resolving kernel32.dll
The typical end goal of the shellcode is to give the attacker full
control of the victim system. This usually involves just a few sim-
ple operations, such as downloading and executing a malware bi-
nary on the compromised host. These operations require interac-
tion with the OS through the system call interface, or in case of
Microsoft Windows, through the user-level Windows API.
The Windows API is divided into several dynamic load libraries
(DLLs). In order to call an API function, the shellcode must ﬁrst
ﬁnd its absolute address in the address space of the process. This
can be achieved in a reliable way by searching for the Relative Vir-
tual Addresses (RVAs) of the function in the Export Directory Table
(EDT) of the DLL. The absolute Virtual Memory Address (VMA)
of the function can then be easily computed by adding the DLL’s
base address to the function’s RVA. In fact, kernel32.dll pro-
vides the quite convenient functions LoadLibrary, which loads
the speciﬁed DLL into the address space of the calling process and
returns its base address, and GetProcAddress, which returns
Figure 1: Overview of the proposed shellcode detection archi-
tecture.
proaches that use a single detection algorithm for a particular class
of shellcode, our method relies on several runtime heuristics tai-
lored to the identiﬁcation of different shellcode types. We have
designed four heuristics for the detection of plain and metamorphic
shellcode targeting Windows systems. Polymorphic shellcode is in
essence a self-decrypting version of a plain shellcode, and thus it
is also effectively detected, since the concealed plain shellcode is
revealed during execution. In fact, we also enable the detection of
polymorphic shellcode that uses SEH-based GetPC code, which is
currently not handled by existing polymorphic shellcode detectors.
Furthermore, instead of solely using a CPU emulator, our approach
couples the heuristics with an appropriate image of the complete
address space of a real process, enabling the correct execution of
shellcode that depends on certain kinds of host-level context.
We have implemented the above technique in Gene, a network-
level detector that scans all client-initiated streams for code injec-
tion attacks against network services. Gene is based on passive
network monitoring, which offers the beneﬁts of easy large-scale
deployment and protection of multiple hosts using a single sen-
sor, while it allows us to test the effectiveness of our technique
in real-world environments. Nevertheless, although Gene operates
at the network level, its core inspection engine can analyze arbi-
trary data coming from any source. This allows our approach to be
readily embedded in existing systems that employ emulation-based
detection in other domains, e.g., for the detection of malicious web-
sites [15] or in browser add-ons for the detection of drive-by down-
load attacks [14].
Our evaluation with publicly available shellcode samples and
shellcode construction toolkits, shows that Gene can effectively de-
tect many different shellcode instances without prior knowledge
about each particular implementation. At the same time, after ex-
tensive testing of the runtime heuristics using a large and diverse set
of generated and real data, in addition to a ﬁve-month deployment
in production networks, Gene has not generated any false positives.
2. ARCHITECTURE
The proposed shellcode detection system is built around a CPU
emulator that executes valid instruction sequences found in the in-
spected input. An overview of our approach is illustrated in Fig. 1.
Each input is mapped to an arbitrary location in the virtual address
space of a supposed process, and a new execution begins from each
and every byte of the input, since the position of the ﬁrst instruc-
tion of the shellcode is unknown and can be easily obfuscated. The
detection engine is based on multiple heuristics that match runtime
patterns inherent in different types of shellcode. During execution,
the system checks several conditions that should all be satisﬁed
in order for a heuristic to match some shellcode. Moreover, new
1
2
3
4
5
6
xor eax, eax
mov eax, fs:[eax+0x30] ; eax = PEB
mov eax, [eax+0x0C]
mov esi, [eax+0x1C]
; eax = 0
; eax = PEB.LoaderData
; esi = InInitializationOrder
lodsd
ModuleList.Flink
; eax = 2nd list entry
(kernel32.dll)
mov eax, [eax+0x08]
; eax = LDR_MODULE.BaseAddress
Figure 2: A typical example of code that resolves the base ad-
dress of kernel32.dll through the PEB.
the address of an exported function from the speciﬁed DLL. Af-
ter resolving these two functions, any other function in any DLL
can be loaded and used directly. However, custom function search-
ing using hashes is usually preferable in modern shellcode, since
GetProcAddress takes as argument the actual name of the func-
tion to be resolved, which increases the shellcode size considerably.
No matter which method is used, a common fundamental oper-
ation in all above cases is that the shellcode has to ﬁrst locate the
base address of kernel32.dll. Since this is an inherent opera-
tion that must be performed by any Windows shellcode that needs
to call a Windows API function, it is a perfect candidate for the
development of a generic shellcode detection heuristic.
3.1.1 Process Environment Block
Probably the most reliable and widely used technique for deter-
mining the base address of kernel32.dll takes advantage of
the Process Environment Block (PEB), a user-level structure that
holds extensive process-speciﬁc information. Figure 2 shows a typ-
ical example of PEB-based code for resolving kernel32.dll.
The shellcode ﬁrst gets a pointer to the PEB (line 2) through the
Thread Information Block (TIB), which is always accessible at a
zero offset from the segment speciﬁed by the FS register. A pointer
to the PEB exists 0x30 bytes into the TIB, as shown in Fig. 3. The
absolute memory address of the TIB and the PEB varies among
processes, and thus the only reliable way to get a handle to the PEB
is through the FS register, and speciﬁcally, by reading the pointer
located at address FS:[0x30].
Condition P1. This fundamental constraint is the basis of our
ﬁrst detection heuristic (PEB). If during the execution of some in-
put the following condition is true (P1): (i) the linear address of
FS:[0x30] is read, and (ii) the current or any previous instruc-
tion involved the FS register, then this input may correspond to a
shellcode that resolves kernel32.dll through the PEB.
The second predicate is necessary for two reasons. First, it is
useful for excluding random instructions in benign inputs that hap-
pen to read from the linear address of FS:[0x30] without in-
volving the FS register. For example, if FS:[0x30] corresponds
to address 0x7FFDF030 (as shown in the example of Fig. 3), the
following code will correctly not match the above condition:
mov ebx, 0x7FFD0000
mov eax, [ebx+0xF030] ; eax = FS:[0x30]
On the other hand, the memory access to FS:[0x30] can be
made through an instruction that does not use the FS register di-
rectly. For example, an attacker could take advantage of other seg-
ment registers and replace the ﬁrst two lines in Fig. 2 with:
mov ax, fs
mov bx, es
mov es, ax
mov eax, es:[0x30]
mov es, bx
; ax = fs
; preserve es
; es = fs
; load FS:[0x30] to eax
; restore es
The code loads the segment selector of the FS register to ES (mov
between segment registers is not supported), reads the pointer to
the PEB, and then restores the original value of the ES register.
The linear address of the TIB is also contained in the TIB itself
at the location FS:[0x18], as shown in Fig. 3. Thus, another way
of reading the pointer to the PEB without using the FS register in
the same instruction is the following:
xor eax,eax
xor eax,fs:[eax+0x18] ; eax = TIB address
mov eax,[eax+0x30]
; eax = PEB address
; eax = 0
Note in the above example that other instructions besides mov can
be used to indirectly read a memory address through the FS regis-
ter (xor in this case). No matter how obfuscated the code is, the
condition remains robust since it does not rely on the execution of
particular instructions.
Although condition P1 is quite restrictive, the possibility of en-
countering a random read from FS:[0x30] during the execu-
tion of some benign input is not negligible. Thus, it is desirable
to strengthen the heuristic with more operations exhibited by any
PEB-based kernel32.dll resolution code.
Condition P2. Having a pointer to the PEB, the next step of the
shellcode is to obtain a pointer to the PEB_LDR_DATA structure
that holds the list of loaded modules (line 3 in Fig. 2). Such a
pointer exists 0xC bytes into the PEB, in the LoaderData ﬁeld.
Since this is the only available reference to that data structure, the
shellcode unavoidably has to read the PEB.LoaderData pointer.
We can use this constraint as a second condition for the PEB heuris-
tic (P2): the linear address of PEB.LoaderData is read.
Condition P3. Moving on, the shellcode has to walk through the
loaded modules list and locate the second entry (kernel32.dll).
A pointer to the ﬁrst entry of the list exists in the InInitializa-
tionOrderModuleList.Flink ﬁeld located 0x1C bytes into
the PEB_LDR_DATA structure. The read operation from this mem-