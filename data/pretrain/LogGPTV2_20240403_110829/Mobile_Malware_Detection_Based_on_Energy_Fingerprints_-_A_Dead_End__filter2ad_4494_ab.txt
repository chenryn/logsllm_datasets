no energy in this short time span compared to
being always on. On average, the smartphone
consumes 51mW with an enabled WiFi con-
nection with a low CV. Remarkable among
these numbers is that the smartphone con-
sumes 34% less energy using WiFi instead of
3G. Additionally, the CV is much higher for the 3G connection, with measured abso-
lute numbers from 47.77 to 75.85mW . This is likely caused by different bitrates and
link qualities (GPRS, EDGE, UMTS, HSDPA) depending on the coverage area and the
signal strength at the time the test was conducted. It may even change for the same lo-
cation at different times. For the rest of this section, we compare the results of the other
tests against the values from this test where WiFi is always on and from the 3G case.
Background Processes. To get an idea of the energy consumption of the applications
running on a smartphone, we used PowerTutor to measure the energy usage of the au-
tomatically started preinstalled applications after each restart. The results can be found
in Table 2. What can be seen in this table is the fact that the foreground application—
which is the Launcher—consumes the largest amount of power. As it manages the live
wallpaper, PowerTutor will add the power consumption used by the OLED display to
show the wallpaper to the Launcher instead of to the Wallpaper application. However,
the same is not true for its CPU consumption. PowerTutor itself consumes about 3.0%
compared to the overall consumption, but this value is calculated out in all further tests.
All other values are left alone, as they present characteristics of the base system, such
as Android Services (by this term we mean several Android OS processes). Again, no
synchronization or other activities occurred during the short time tests, they will be
evaluated in Section 5.
8
Johannes Hoffmann, Stephan Neumann, Thorsten Holz
Brightness. The brightness of the dis-
play scales between 0 and 255, while
higher numbers represent a brighter dis-
play. The lowest user selectable value is
20. The value can be set manually or by
the system itself, which can determine
the brightness of the phone’s surround-
ings with a light sensor.
Table 2. Exemplary power consumption of differ-
ent apps after system start for a 5 minute interval.
Values in mW (missing energy was consumed in
unlisted components).
Application
Desktopclock
MyPhoneExplorer
Gallery3D
Android Services
Maps
PowerTutor
Wallpaper
Launcher
OLED CPU WiFi Total
0.03
0.00
0.05
0.00
0.07
0.00
0.23
0.11
0.92
0.34
1.87
0.00
0.00
4.31
0.00 39.80
0.00
0.00
0.00
0.00
0.00
0.00
0.00
39.79
0.03
0.00
0.07
0.12
0.00
1.87
4.31
0.01
We measured the power consump-
tion for different values and the results
can be found in Table 3. During this
test, the display was never turned off
which will prevent the phone from en-
tering the sleep state. Additionally, the
WiFi connection was enabled. With these settings, the battery lasts for about 10 hours
with a difference of 2 hours between the darkest and the brightest setting.
What can be seen is that the brighter the dis-
play is, the smaller the CV gets. This is caused by
the relative high amount of power which is con-
sumed by the display, even for dark settings. All
other energy consumers such as background pro-
cesses quickly loose their signiﬁcance in contrast to
this huge energy consumer, compared to the num-
bers from Table 2. These results show that the dis-
play’s energy demand plays a big role for the smart-
phone’s runtime.
Table 3. Average power consumption
for different brightness levels.
Setting
Consumption
Dark (20)
Auto (standard)
Medium (130)
Bright (255)
VC
445.89mW 2.50%
462.20mW 1.73%
494.61mW 1.13%
550.70mW 1.01%
4.2 Energy Greedy Functions
This section deals with software which aims to draw as much power as possible by var-
ious means. Such activities can be seen as a kind of DOS attack against the smartphone,
as it is unable to operate with a depleted battery.
Sleep Mode. We ﬁrst determine how much energy gets consumed by the CPU if it is
not allowed to reach its energy saving sleep modes. It is easy to do this in Android,
as one only has to set a partial wake lock. This will cause the screen to be turned off
after the normal timeout but the CPU keeps running. This feature is normally used for
tasks which run periodically in the background and that shall not be interrupted when
the phone would otherwise enter its sleep mode.
Such a setting will consume 81.50mW in total and causes a raise of 59.27% in
terms of used battery power. Although PowerTutor does not detect that our software sets
the wake lock, the Android system does and marks it correspondingly in the “battery
settings”. Note that this can be easily detected by the user. However, setting a wake lock
is not a feature that has to be used to hide malicious activities in the background—at
least not to such an extend. Such a setting, whether used by mistake or on purpose, can
easily be detected by any program monitoring the power consumption.
Mobile Malware Detection Based on Energy Fingerprints — A Dead End?
9
CPU Burn. The last test revealed a high rise in energy consumption if the CPU keeps
running all the time. This test will determine how big the impact is when the CPU will
not only run all the time, but also has to crunch some numbers. Table 4 shows the results
of the following two tests. In the ﬁrst one, the CPU is allowed to sleep when the screen
turns off. This way, the CPU will only have a maximum load when the phone is active.
In the second test the CPU is disallowed to enter it’s sleep state when the screen turns
off. During both tests, the program calls Math.sqrt() in a loop.
Table 4. Average power consumption for diff. power states.
MW Cons. Total Cons.
Function
Rise
54.02mW 110.29mW 105.57%
Sleepmode allowed
Sleepmode disallowed 518.84mW 602.92mW 1,013.95%
Both tests put a heavy bur-
den on the phone’s runtime.
While the ﬁrst test “only” con-
sumes about double the energy
than it would normally do, the
second test clearly shows that
a malicious program can totally
disrupt the battery lifetime. With a raise of over 1,000% in energy consumption, the
battery would only last for about 8 hours even though the screen turns off. But again,
the Android system detects that our application wastes so much energy and the user can
take countermeasures. Additionally, the phone gets quite hot under such load. Some AV
program could also easily detect such (mis)use and alert the user.
4.3 Location API
Next, we evaluate how much energy is consumed while the location API is used. We
cover the case where the last known position is reused and when an accurate GPS po-
sition is requested. Since location data represents a very sensitive piece of information,
we measure the energy required to steal it from the phone.
Last Known Position. In this ﬁrst test, our software will only use the last known po-
sition (LKP) which is returned by the Android API. Because no new position is de-
termined, the energy consumption is expected to be low. To mimic actual malware,
the returned coordinates are wrapped in an XML structure and sent over the network
through the WiFi or 3G connection. Table 5 shows the results; the position is retrieved
only once during the test. As expected, the power consumption is really low if the data
is only retrieved and not forwarded at all (WiFi is enabled, though). If it is sent over
the WiFi connection, the consumed energy raises a bit, but is still very low with a rise
of 0.25% over the normal consumption. This is basically only the amount of energy
needed to use the WiFi interface, which is evaluated in more detail in Section 4.4.
If position data (LKP) is sent over the 3G connection, 2.36% more energy is con-
sumed in contrast to the CV for an idling phone with an established 3G connection, cf.
Section 4.1. In Section 5, we evaluate whether the added consumption in the 3G case is
still measurable in real life scenarios and would therefore be detectable.
Determine GPS Location. This test makes use of the current GPS position which has to
be determined by the hardware GPS module. It is said that it consumes a lot of power;
we will see if this accusation is correct or not. The position is again retrieved only once
10
Johannes Hoffmann, Stephan Neumann, Thorsten Holz
by our software and sent over the network encapsulated in XML format. The results are
also presented in Table 5.
Table 5. Average power consumption for accessing the
location API. LKP = Last known position.
Connection Function MW Cons. Total Cons.
What can be seen is that
our software consumes more than
7mW additional power when the
GPS module gets active. We have
to note that PowerTutor measures
the GPS module’s power con-
sumption separately, but we added
it to our malware consumption as it
is the sole program using it. It does
not matter whether the data is sent
over the network or not in order to
introduce a huge gain in consumed energy. If sent over the 3G connection, a rise of
17.54% is measured, which is clearly above the noise ratio even for the 3G connection.
Rise
0.017mW 52.25mW 0.03%
LKP
LKP (sent) 0.126mW 51.39mW 0.25%
7.91mW 61.18mW 15.46%
GPS
7.97mW 63.28mW 15.58%
GPS (sent)
LKP (sent) 8.111mW 87.25mW 11.85%
GPS (sent) 12.01mW 107.79mW 17.54%
WiFi
3G
4.4 Data Heist
This section examines whether the acquisition and forwarding of (private) information
raises the energy consumption to an extent that it is detectable. This is a common feature
of current mobile malware [21].
WiFi
Connection
Function MW Cons. Total Cons.
Table 6. Average power consumption for data transmission.
Rise
349 Bytes (1 SMS) 0.112mW 51.55mW 0.22%
37.6kB (200 SMS) 1.182mW 53.39mW 2.31%
365kB (2,000 SMS) 1.949mW 54.73mW 3.81%
349 Bytes (1 SMS) 8.114mW 99.15mW 11.85%
37.6kB (200 SMS) 8.161mW 103.41mW 11.92%
365kB (2,000 SMS) 13.724mW 86.95mW 20.39%
Data Size. We ﬁrst mea-
sure the impact of the ﬁle
size of the data which is
sent over the Internet con-
nection. To get an idea of
how much data is trans-
ferred, our malware sends
data equivalent to the size
of 1, 200 and 2,000 short
messages encapsulated in
a XML structure over TCP/IP. Table 6 lists the power consumption for both Internet
connection types. As one can clearly see, more sent data consumes more energy. The
higher consumption whilst using WiFi is more visible than for 3G, as this connec-
tion type implies less noise. Sending small quantities of data quickly puts the energy
consumption over our threshold for this short duration with both connection types. In
Section 5, we evaluate if this is still true for real world scenarios.
3G
We also tested whether the data source has some impact on the energy consump-
tion. The results show that it does not matter if our data originates from some content
provider, the SD card and so on. Only the amount of data matters.
Encryption. Some sophisticated malware might encrypt the sent data to hide its inten-
tion. As encryption of course uses CPU cycles, we are interested if this overhead is
measurable. We performed the same measurements as above, but the data was addition-
ally encrypted with AES in Counter Mode with PKCS5Padding and a random key. We
Mobile Malware Detection Based on Energy Fingerprints — A Dead End?
11
have measured that our malware consumes 1.19mW of energy to encrypt 37.6kB of
data which is sent over the WiFi connection. Compared to our last test with data of the
same size, almost the same amount of energy is consumed: a rise of 2.33% instead of
2.31% is measured, which lets us conclude that the encryption only consumes 0.02%
more energy. Rather than using the 3G interface, we only performed the test with the
WiFi interface as the results are more clean due to lower noise. Additional encryption
is therefore not measurable as it is indistinguishable from noise, at least with a cipher
such as AES.
5 Long Time Tests
Job
Table 7. Joblist scenario A.
This section covers long time tests
which evaluate if and to what ex-
tend the aforementioned features are
measurable by means of their power
consumption under two more realistic
scenarios. The ﬁrst scenario (A) cov-
ers a real world scenario where the
smartphone is heavily used, while the
other (B) covers a scenario with light
usage. The details of the two scenarios
can be found in Tables 7 and 8. Both scenarios are run for 1 hour and repeated three
times, resulting in a total duration of three hours for each test run.
Duration
1x write SMS 1 minute (160 characters)
1x send SMS 1 minute (160 characters)
Use Browser 5 minutes (4 site accesses)
10 minutes (display off)
2 minutes
5 minutes
1x E-Mail 1 minute (120 characters)
Minute
5
10
20
25
35
50
55
Music
Facebook App
Angry Birds
Table 8. Joblist for scenario B.
In order to simulate an average Jon
Doe’s smartphone, several Widgets were
visible on the home screen (Facebook,
Twitter, a clock, and a weather forecast)
in scenario A. These were absent in sce-
nario B, but both additionally made use
of background mail fetching (POP3 with