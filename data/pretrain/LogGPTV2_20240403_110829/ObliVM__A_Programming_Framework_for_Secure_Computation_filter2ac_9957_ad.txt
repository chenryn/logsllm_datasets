11
12
13
14
15
16
17
18
19
rnd@m RND(public int32 m) = native lib.rand;
struct Pointer@m {
int32 index;
rnd@m pos;
};
struct SecStore@m {
CircuitORAM@m oram;
int32 cnt;
};
phantom void PI:EMAIL(int32 index,
int@m pos, T data) {
oram.add(index, pos, data);
}
phantom T SecStore@m
.readAndRemove(int32 index, rnd@m pos) {
return oram.readAndRemove(index, pos);
}
phantom Pointer@m SecStore@m.allocate() {
cnt = cnt + 1;
return Pointer@m(cnt, RND(m));
}
(a) Oblivious stack by non-specialist programmers.
(b) Code by expert programmers to help non-specialists implement
oblivious data structures.
Fig. 2: Programming abstractions for oblivious data structures.
Implementing oblivious data structure abstractions in
ObliVM. We assume that the reader is familiar with the oblivi-
ous data structure algorithmic techniques described by Wang et
al. [26]. To support efﬁcient data structure implementations,
an expert programmer implements two important objects (see
Figure 2b):
oram.readAndRemove call will declassify its argument rnd@m
pos inside the implementation of the function body. From an
algorithms perspective, this is because the leaf label pos will
be revealed during the readAndRemove operation, incurring a
memory trace where the value rnd@m pos will be observable
by the adversary.
• A Pointer object stores two important pieces of infor-
mation: an index variable that stores the logical identiﬁer
of the memory block pointed to (each memory block has
a globally unique index); and a pos variable that stores
the random leaf label in the ORAM tree of the memory
block.
• A SecStore object essentially implements an ORAM,
and provides the following member functions to an end-
user: The SecStore.remove function essentially is a
syntactic sugar for the ORAM’s readAndRemove inter-
face [29], [42], and the SecStore.add function is a
syntactic sugar for the ORAM’s Add interface [29], [42].
Finally, the SecStore.allocate function returns a new
Pointer object to the caller. This new Pointer object
is assigned a globally unique logical identiﬁer (using a
counter cnt that is incremented each time), and a fresh
random chosen leaf label RND(m).
Stack implementation by a non-specialist programmer.
Given abstractions provided by the expert programmer, a non-
specialist programmer can now implement a class of data
structures such as stack, queue, heap, AVL Tree, etc. Figure 2a
gives a stack example.
Role of afﬁne type system. We use Figure 2b as an example
to illustrate how our rnd types with their afﬁne type system
can ensure security. As mentioned earlier, rnd types have
an afﬁne type system. This means that each rnd can be
declassiﬁed (i.e., made public) at most once. In Figure 2b, the
C. Loop Coalescing and New Oblivious Graph Algorithms
We introduce a new programming abstraction called loop
coalescing, and show how this programming abstraction al-
lowed us to design novel oblivious graph algorithms such as
Dijkstra’s shortest path and minimum spanning tree for sparse
graphs. Loop coalescing is non-trivial to embed as a library
in ObliVM-lang. We therefore support this programming ab-
straction by introducing special syntax and modiﬁcations to
our compiler. Speciﬁcally, we introduce a new syntax called
bounded-for loop as shown in Figure 3. For succinctness, in
this section, we will present pseudo-code.
In the program in Figure 3, the bwhile(n) and bwhile(m)
syntax at Lines 1 and 3 indicate that the outer loop will be
executed for a total of n times, whereas the inner loop will
be executed for a total of m times – over all iterations of the
outer loop.
To deal with loop coalescing, the compiler partitions the
code within an bounded-loop into code blocks, each of which
will branch at the end. The number of execution times for
each code block will be computed as the bound number for the
inner most bounded-loop that contains the code block. Then
the compiler will transform a bounded loop into a normal loop,
whose body simulates a state machine that each state contains
a code block, and the branching statement at the end of each
code block will be translated into an assignment statement that
moves the state machine into a next state. The total number of
367
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:02 UTC from IEEE Xplore.  Restrictions apply. 
1 bwhile(n) (; u<n;) {
2      total = total + 1;
3      i=s[u];
4      bwhile (m) (i<s[u+1]) {
5          // do something
6          i=i+1;
7      }
8      u=u+1;
9 }
bwhile(n) (; u<n;) {
total = total + 1;
i=s[u];
bwhile (m) (i<s[u+1]) {
(cid:1866) (cid:3397) (cid:1865) (cid:3397) (cid:1866)
iterations in total
Block 1 (cid:3400) (cid:1866)
// do something
i=i+1;
}
u=u+1;
}
Block 2 (cid:3400) (cid:1865)
Block 3 (cid:3400) (cid:1866)
}
state = (u<n) ? 1 : -1;
for (__itr=0; __itr<n+m+n; __itr++) {
if (state==1) {   total=total+1; i=s[u];
state = (i<s[u+1]) ? 2 : 3
} else if (state==2) { // do something
i=i+1; state = (i<s[u+1]) ? 2 : 3
} else if (state==3) {
u=u+1; state = (u<n) ? 1 : -1
} // else execution is finished
Fig. 3: Loop coalescing. The outer loop will be executed at most n times in total, the inner loop will be executed at most m
times in total – over all iterations of the outer loop. A naive approach compiler would pad the outer and inner loop to n and m
respectively, incurring O(nm) cost. Our loop coalescing technique achieves O(n + m) cost instead.
Algorithms
Our Complexity
Generic ORAM
Complexity
Best Known
Sparse Graph
Dijkstra’s Algorithm O((E + V ) log2 V ) O((E + V ) log3 V ) O((E + V ) log3 V ) (Generic ORAM baseline [29])
log log V ) for E = O(V logγ V ), γ ≥ 0 [22]
O(E log
δ V ), δ ∈ (0, 1) [22]
3 V
O(E log
logδ V ) for E = O(V 2log
O(E log2 V ) for E = Ω(V 1+),  ∈ (0, 1] [22]
O((E + V ) log2 V ) O((E + V ) log3 V )
Prim’s Algorithm
3 V
Dense Graph
Depth First Search
O(V 2 log V )
O(V 2 log2 V )
O(V 2 log2 V ) [49]
TABLE II: Summary of algorithmic results. All costs reported are in terms of circuit size. The asymptotic notation omits
the bit-length of each word for simplicity. Our oblivious Dijkstra’s algorithm and oblivious Prim’s algorithm can be composed
using our novel loop coalescing programming abstraction and oblivious data structures. Our oblivious DFS algorithm requires
independent novel techniques. Due to space constraint, we only describe the oblivious Dijkstra’s algorithm as an example of
loop coalescing. We defer the full description of our oblivious MST and DFS algorithms to Appendix A.
Algorithm 1 Dijkstra’ algorithm with bounded for
Secret Input: s: the source node
Secret Input: e: concatenation of adjacency lists stored in a
single ORAM array. Each vertex’s neighbors are stored
adjacent to each other.
Secret Input: s[u]: sum of out-degree over vertices from 1 to
Algorithm 2 Oblivious Dijkstra’ algorithm
Secret Input: e, s: same as Algorithm 1
Output: dis: the shortest distance from s to each node
1: dis := [∞,∞, ...,∞]; dis[source] = 0
2: PQ.push(0, s); innerLoop := false
3: for i := 0 → 2V + E do
u.
Output: dis: the shortest distance from source to each node
1: dis := [∞,∞, ...,∞]
2: PQ.push(0, s)
3: dis[s] := 0
4: bwhile(V)(!PQ.empty())
5:
6:
7:
8:
9:
10:
11:
12:
13:
(dist, u) := PQ.deleteMin()
if(dis[u] == dist) then
dis[u] := −dis[u];
bfor(E)(i := s[u]; i < s[u + 1]; i = i + 1)
(u, v, w) := e[i];
newDist := dist + w
if (newDist < dis[v]) then
dis[v] := newDist
PQ.insert(newDist, u)
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
if not innerLoop then
(dist, u) := PQ.deleteMin()
if dis[u] == dist then
dis[u] := −dis[u]; i := s[u]
innerloop := true;
else
if i < s[u + 1] then
(u, v, w):= e[i]
newDist := dist + w
if newDist < dis[u] then
dis[u] := newDist
(cid:3)
PQ.insert(newDist, v
)
i = i + 1
else
innerloop := false;
iterations of the emitted normal loop is the summation of the
execution times for all code blocks. Figure 3 illustrates this
compilation process.
We now show how this loop coalescing technique leads to
new novel oblivious graph algorithms.
Oblivious Dijkstra shortest path for sparse graphs. It is
an open problem how to compute single source shortest path
(SSSP) obliviously for sparse graphs more efﬁciently than
generic ORAM approaches. Blanton et al. [49] designed a
solution for a dense graph, but
their technique cannot be
applied when the graph is sparse.
Recall that the priority-queue-based Dijkstra’s algorithm
has to update the weight whenever a shorter path is found to
any vertex. In an oblivious version of Dijkstra’s, this operation
368
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:02 UTC from IEEE Xplore.  Restrictions apply. 
dominates the overhead, as it is unclear how to realize it
more efﬁciently than using generic ORAMs. Our solution to
oblivious SSSP is more efﬁcient thanks to (1) avoiding this
weight update operation, and (2) a loop coalescing technique.
Avoiding weights updating. This is accomplished by two
changes to a standard priority-queue-based Dijkstra’s algo-
rithm, i.e., lines 6-7 and line 12 in Algorithm 1. The basic idea
is, whenever a shorter distance newDist from s to a vertex
u is found, instead of updating the existing weight of u in
the heap, we insert a new pair (newDis, u) into the priority
queue. This change can result in multiple entries for the same
vertex in the queue, leading to two concerns: (1) the size of
the priority queue cannot be bounded by V ; and (2) the same
vertex might be popped and processed multiple times from
the queue. Regarding the ﬁrst concern, we note the size of
the queue can be bounded by E = O(V 2) (since E = o(V 2)
for sparse graphs). Hence, each priority queue insert and
deleteMin operation can still be implemented obliviously in
O(log2 V ) [26]. The second concern is resolved by the check
in lines 6-7: every vertex will be processed at most once
because dis[v] will be set negative once vertex v is processed.
Loop coalescing. In Algorithm 1, the two nested loops (line
4 and line 8) use secret data as guards. In order not to leak the
secret loop guards, a naive approach is to iterate each loop a
maximal number of times (i.e., V +E, as V alone is considered
secret).
Using our loop coalescing technique, we can derive an
oblivious Dijkstra’s algorithm that asymptotically outperforms
a generic ORAM baseline for sparse graphs. The resulting
oblivious algorithm is described in Algorithm 2. Note that at
most V vertices and E edges will be visited, we coalesce the
two loops into a single one. The code uses a state variable
innerloop to indicate whether a vertex or an edge is being
processed. Each iteration deals with one of a vertex (lines 5-8),
an edge (lines 15-18), or the end of a vertex’s edges (line 13).
So there are 2V +E iterations in total. Note the ObliVM-lang
compiler will pad the if-branches in Algorithm 2 to ensure
obliviousness. Further, an oblivious priority queue is employed
for PQ.
Cost analysis. In Algorithm 2, each iteration of the loop
(lines 3-18) makes a constant number of ORAM accesses
and two priority queue primitives (insert and deleteMin,
both implemented in O(log2 V ) time). So, the total runtime is
O((V + E) log2 V ).
Additional algorithmic results. Summarized in Table II,
our loop coalescing technique also immediately gives a new
oblivious Minimum Spanning Tree (MST) algorithm whose
full description is deferred to Appendix A. Additionally, in
the process of developing rich libraries for ObliVM, we also
designed a novel oblivious Depth First Search (DFS) algorithm
that asymptotically outperforms a generic ORAM baseline
for dense graphs. The new DFS requires new algorithmic
techniques, and we defer its full description to Appendix A.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
int@(2 ∗ n) karatsubaMult@n(
int@n x, int@n y) {
int@2 ∗ n ret;
if (n < 18) {
} else {
karatsubaMult@(n − n/2)(a, c);
ret = x*y;
int@(n − n/2) a = x$n/2˜n$;
int@(n/2) b = x$0˜n/2$;
int@(n − n/2) c = y$n/2˜n$;
int@(n/2) d = y$0˜n/2$;
int@(2 ∗ (n − n/2)) t1 =
int@(2 ∗ (n/2)) t2 =
karatsubaMult@(n/2)(b, d);
int@(n − n/2 + 1) aPb = a + b;
int@(n − n/2 + 1) cPd = c + d;
int@(2 ∗ (n − n/2 + 1)) t3 =
int@(2 ∗ n) padt1 = t1;
int@(2 ∗ n) padt2 = t2;
int@(2 ∗ n) padt3 = t3;
ret = (padt1<<(n/2*2)) + padt2 +
((padt3 - padt1 - padt2)<<(n/2));
karatsubaMult@(n − n/2 + 1)(aPb, cPd);
}
}
return ret;
19
20
21
Fig. 4: Karatsuba multiplication in ObliVM-lang. In line 6
to line 9, x$i˜j$ is used to extract the i-th to the j-th bits
of x.
V.
IMPLEMENTING RICH CIRCUIT LIBRARIES IN SOURCE
LANGUAGE