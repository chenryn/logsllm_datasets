### Distributed ECDSA Protocol

#### Key Distribution
Party \( P_i \) also receives a MAC key \( \alpha_i \).

#### Distributed Signing

**Round 1 (Pre-signing):**
1. If no ECDSA tuples are currently stored, each party sends the command `Tuple` to \( F_R \) to receive back the public key \( PK \).
2. Each party \( P_i \) retrieves the shares of the next tuple: \( (x_i, (M_{i,j}, K_{j,i})_{j \neq i}, y_i, d_i, z_i) \).
3. Each party \( P_i \) sends \( x_i \cdot G \) and \( M_{i,j} \cdot G \) to each \( P_j \).
4. Upon receiving \( x_j \cdot G \) and \( M_{j,i} \cdot G \) for each \( j \neq i \), each party \( P_i \) checks that:
   \[
   M_{j,i} \cdot G = K_{j,i} \cdot G + \alpha_i \cdot (x_j \cdot G)
   \]
5. If the equation holds for each \( j \neq i \), then \( P_i \) computes:
   \[
   R \leftarrow \sum_{j=0}^{n-1} x_j \cdot G \quad \text{and sets} \quad r \leftarrow \pi(R)
   \]
   Otherwise, it sends an abort signal to the other parties and halts.

**Round 2 (Signing):**
1. Upon receiving a message \( m \), each party \( P_i \) computes:
   \[
   m' \leftarrow H(m) \quad \text{and} \quad \tau_i \leftarrow y_i \cdot m' + r \cdot d_i
   \]
2. Each party \( P_i \) broadcasts \( z_i \) and \( \tau_i \).
3. Upon receiving \( \tau_j \) and \( z_j \) for all \( j \neq i \), each party \( P_i \) computes:
   \[
   \tau \leftarrow \sum_{j=0}^{n-1} \tau_j \quad \text{and} \quad z \leftarrow \sum_{j=0}^{n-1} z_j
   \]
   and sets:
   \[
   s \leftarrow \frac{\tau}{z}
   \]
4. Each party \( P_i \) runs `VerifyPK(m, (r, s))`. If the result is 1, then \( P_i \) outputs \( (r, s) \). Otherwise, it outputs \( \bot \) and halts.

### From the Ring \( R \) to the Vectorial Representation and Its Compression

In Section II, we observed how DPFs permit the compression of 2-party secret-sharings of large unit vectors. Consider now the Module-LPN assumption. Each element of the ring \( R \) can be represented as a polynomial of degree at most \( N - 1 \). Therefore, we can convert it into an \( N \)-dimensional vector over \( \mathbb{F}_q \). When dealing with a monomial, the representation becomes a unit vector. The distribution \( HW_t \) samples random \( t \)-sparse polynomials in \( R \), so we can represent its outputs with sums of \( t \) unit vectors.

### Compressing the Terms \( x_i \) and \( y_i \)

When looking at a ring ECDSA tuple, we observe that the shares \( x_i \) and \( y_i \) of the \( i \)-th party are random elements in \( R \). To compress them, we rely on the Module-LPN assumption: for every \( r \in [c] \), each party \( P_i \) generates two \( t \)-sparse polynomials in \( R \):
\[
u_r^i(X) := \sum_{l \in [t]} \beta_r^i[l] \cdot X^{\omega_r^i[l]}, \quad v_r^i(X) := \sum_{l \in [t]} \gamma_r^i[l] \cdot X^{\eta_r^i[l]}
\]
by sampling the non-zero coefficients and the associated monomials. During the evaluation, using a random oracle, the parties will obtain \( c - 1 \) random elements \( a_0, a_1, \ldots, a_{c-2} \) in \( R \). The values of \( x_i \) and \( y_i \) will be computed as:
\[
x_i = \langle a, u_i \rangle = \sum_{j=0}^{c-2} a_j \cdot u_j^i + u_{c-1}^i, \quad y_i = \langle a, v_i \rangle = \sum_{j=0}^{c-2} a_j \cdot v_j^i + v_{c-1}^i
\]
By the \( R_c \)-LPNt assumption, \( x_i \) and \( y_i \) are indistinguishable from random.

### Compressing the BeDOZa Style MACs

It remains to explain how to derive the remaining parts of the ring ECDSA tuple. For every \( i \neq j \), \( M_{i,j} \) and \( K_{i,j} \) are random elements satisfying:
\[
M_{i,j} - K_{i,j} = \alpha_j \cdot x_i
\]
We recall that \( \alpha_j \in \mathbb{F}_q \), so we have:
\[
\alpha_j \cdot x_i = \alpha_j \cdot \langle a, u_i \rangle = \langle a, \alpha_j \cdot u_i \rangle
\]
If we secret-share \( \alpha_j \cdot u_r^i \) between \( P_i \) and \( P_j \), we leak no additional information to the parties, while obtaining:
\[
\alpha_j \cdot x_i = \langle a, \tilde{M}_{i,j} + \tilde{K}_{i,j} \rangle = \langle a, \tilde{M}_{i,j} \rangle + \langle a, \tilde{K}_{i,j} \rangle
\]
Thus, the values \( M_{i,j} := \langle a, \tilde{M}_{i,j} \rangle \) and \( K_{i,j} := -\langle a, \tilde{K}_{i,j} \rangle \) satisfy the above equation. For every \( r \in [c] \), \( \alpha_j \cdot u_r^i \) is a \( t \)-sparse polynomial, so we can compress a 2-party secret-sharing between \( P_i \) and \( P_j \) using \( t \) DPF keys. In total, this procedure requires \( c \cdot t \cdot n(n - 1) \) DPF keys.

### Compressing the Term \( d_i \)

Once we understand how to obtain compressed BeDOZa style MACs, it is easy to generalize the ideas for the terms \( (d_i)_{i \in [n]} \). The following relation holds:
\[
d_i = \sum_{i \neq j} y_i \cdot \sum_{i \in [n]} s_k \cdot y_i
\]
Since \( s_k \) belongs to \( \mathbb{F}_q \), we can apply the techniques described in the previous paragraph to compress a secret-sharing of \( s_k \cdot y_i = d_{0,i,j} \) between \( P_i \) and \( P_j \), while leaking no additional information to the parties. Specifically, we observe that \( s_k \cdot y_i = \langle a, s_k \cdot v_i \rangle \). Moreover, \( s_k \cdot v_r^i(X) \) is a \( t \)-sparse polynomial for every \( r \in [c] \), allowing us to compress a 2-party secret-sharing between \( P_i \) and \( P_j \) using \( t \) DPF keys. In total, this procedure requires \( c \cdot t \cdot n(n - 1) \) DPF keys.

### Compressing the Term \( z_i \)

This is probably the most complex part of the construction, but the main ideas are the same as before. We observe that the terms \( (z_i)_{i \in [n]} \) are random values satisfying:
\[
\sum_{i \in [n]} z_i = \sum_{i \in [n]} x_i \cdot \sum_{j \in [n]} y_j
\]
Our plan is to compress a secret-sharing of \( x_i \cdot y_j \) between \( P_i \) and \( P_j \) without leaking any additional information to the parties. This time, however, the major issue is that both \( x_i \) and \( y_j \) belong to the ring \( R \). By extending our analysis, we notice that:
\[
x_i \cdot y_j = \left( \sum_{r \in [c]} a_s \cdot v_s \right) \cdot \left( \sum_{r \in [c]} a_s \cdot v_s \right)
\]

### Pseudorandom Correlation Generator (PCGECDSA)

**Gen.** On input \( 1^\lambda \), do the following:
1. Sample a BeDOZa style MAC key \( \alpha_i \).
2. For every \( i \in [n] \), \( r \in [c] \), sample \( \omega_r^i, \eta_r^i \xleftarrow{\$} [N]^t \) and \( \beta_r^i, \gamma_r^i \xleftarrow{\$} \mathbb{F}_q^t \).
3. For every \( i, j \in [n] \) with \( i \neq j \), \( r \in [c] \), compute:
   \[
   U_{r,0}^{i,j}, U_{r,1}^{i,j} \xleftarrow{\$} \text{DSPFt}(1^\lambda, \omega_r^i, \alpha_j \cdot \beta_r^i), \quad V_{r,0}^{i,j}, V_{r,1}^{i,j} \xleftarrow{\$} \text{DSPFt}(1^\lambda, \eta_r^i, s_k \cdot \gamma_r^i)
   \]
4. For every \( i, j \in [n] \) with \( i \neq j \), \( r, s \in [c] \), compute:
   \[
   C_{r,s,0}^{i,j}, C_{r,s,1}^{i,j} \xleftarrow{\$} \text{DSPFt2}(1^\lambda, (\omega_r^i, \eta_s^j), (\beta_r^i \otimes \gamma_s^j))
   \]
5. For every \( i \in [n] \), output the seed:
   \[
   \kappa_i \leftarrow \left( \alpha_i, s_k, \{(\omega_r^i, \beta_r^i)\}_{r \in [c]}, \{(\eta_r^i, \gamma_r^i)\}_{r \in [c]}, \{U_{r,0}^{i,j}, U_{r,1}^{i,j}\}_{j \neq i, r \in [c]}, \{V_{r,0}^{i,j}, V_{r,1}^{i,j}\}_{j \neq i, r \in [c]}, \{C_{r,s,0}^{i,j}, C_{r,s,1}^{i,j}\}_{j \neq i, r, s \in [c]} \right)
   \]

**Eval.** On input the seed \( \kappa_i \), do the following:
1. For every \( r \in [c] \), define the two polynomials:
   \[
   u_r^i(X) := \sum_{l \in [t]} \beta_r^i[l] \cdot X^{\omega_r^i[l]}, \quad v_r^i(X) := \sum_{l \in [t]} \gamma_r^i[l] \cdot X^{\eta_r^i[l]}
   \]
2. For every \( r \in [c] \), compute:
   \[
   \tilde{M}_r^{i,j} \leftarrow \text{DSPFt}(U_{r,0}^{i,j}), \quad \tilde{K}_r^{j,i} \leftarrow \text{DSPFt}(V_{r,0}^{i,j})
   \]
   (viewing outputs of FullEval as degree \( N - 1 \) polynomials over \( \mathbb{F}_q \))
3. For every \( r, s \in [c] \), compute:
   \[
   w_{r,s}^i \leftarrow u_r^i \cdot v_s^i + \text{DSPFt2}(C_{r,s,0}^{i,j}) + \text{DSPFt2}(C_{r,s,1}^{i,j})
   \]
4. Define the vectors of polynomials:
   \[
   u_i := (u_0^i, u_1^i, \ldots, u_{c-1}^i), \quad v_i := (v_0^i, v_1^i, \ldots, v_{c-1}^i), \quad w_i := (w_{0,0}^i, w_{0,1}^i, \ldots, w_{c-1,c-1}^i)
   \]
5. For a random \( a \in \mathbb{R}^c \) with \( a_{c-1} = 1 \) provided by the random oracle \( O \), compute the final shares:
   \[
   x_i \leftarrow \langle a, u_i \rangle, \quad y_i \leftarrow \langle a, v_i \rangle, \quad z_i \leftarrow \langle a \otimes a, w_i \rangle, \quad d_i \leftarrow \langle a, \tilde{v}_i \rangle
   \]
   Output \( (\alpha_i, s_k, x_i, (M_{i,j}, K_{j,i})_{j \neq i}, y_i, z_i, d_i) \) in \( \mathbb{F}_q[X]/(F(X)) \).