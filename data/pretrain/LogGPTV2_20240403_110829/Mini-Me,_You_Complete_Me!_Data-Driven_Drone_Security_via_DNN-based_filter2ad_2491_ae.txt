# Control Parameter Attack Detection
The control parameter attack is only partially detected by CI. However, attacks triggered by control-semantic bugs (e.g., missing range checks) cannot be detected.

## Table 2: Mini-Me Training and Evaluation Results on Different Consumer-Grade Drone Platforms

| Vendor | Model | Firmware | CSO (%) | RPO (%) |
|--------|-------|----------|---------|---------|
| Bitcraze | Crazeflie 2.0 | cf2_2019.02 | 0.18 | 3.1 |
| 3D Robotics | 3DR IRIS+ | ArduCopter 3.4 | 0.22 | 2.1 |
| ArduPilot | APM SITL | ArduCopter 3.4 | 0.44 | 2.9 |
| ArduPilot | APM SITL | ArduCopter 3.6 | 0.48 | 2.7 |
| 3D Robotics | 3DR Solo | PX4 Pro 1.7 | 0.35 | 2.0 |

**CSO: Code Size Overhead, RPO: Runtime Performance Overhead**

## Actuator Spoofing Attack Detection
The error between the original control logic and the approximate model provided by Mini-Me has already exceeded the security range. We observe that the real-time estimation error exceeds the upper bound, allowing Mini-Me to detect this actuator spoofing attack.

## Hard Timer Attack
Task deadlines and queue monitoring in RAVs typically rely on timer-related values in global macro definitions. The hard timer attack, a type of system clock attack, writes maximum values into timers, compromising deadline-based task management and significantly slowing down real-time response. In our experiment, we launched the hard timer attack at time instance 10.0s, writing a large value into `TIMER_PERIOD`. This caused the failure of queues and task management in Crazyflie 2.0, resulting in a complete control program crash. The roll angle, used for RAV's attitude adjustment by the state estimator and other control algorithms, stopped updating as shown in Figure 14e. Our NN-based approximation model then calculated an estimation based on the last signals. Additionally, the original control algorithm showed extremely low responsiveness to sensor data readings. Consequently, Mini-Me successfully recognized this attack by monitoring the real-time estimation error in Figure 14j, which exceeded the upper bound of the benign error range.

## Performance Overhead

### Space Overhead
We measured the code size overhead on all five RAV models. During boot-up, the RAV software application initializes portions in volatile memory and loads the RTOS and program codes from flash memory, including read-only data and other system-level data such as event logs. As shown in Table 2, Mini-Me has an average space overhead of 0.34%, which is negligible for practical deployment on resource-constrained embedded systems like RAVs. Note that offline training libraries and modules are not included in the space overhead, as they are not used in the forecasting process once the trained model is deployed.

### Runtime Overhead
The runtime overhead measurements for all five RAV models are presented in Table 2. The deployment of Mini-Me does not violate any deadline constraints or scan cycles in our experiments. The average overhead for all five RAV models is 2.6%, as Mini-Me only calculates the inference output (i.e., real-time monitoring error) based on mathematical operations of the trained model, which run much faster in reduced precision. The training and hyperparameter tuning of the NN model is very time-consuming. In each tuning trial, we suggest a new set of hyperparameters and a network topology to train and cross-validate on test sets. These processes usually take hundreds of trials to determine the best model, but they are all performed offline for Mini-Me.

## Discussion

### Comparison with Prior Works
Based on the study cases above, we demonstrate the attack detection and protection capabilities of Mini-Me. Compared to recent control invariant-based works (CI [27], SAVIOR [59]) in Table 1, these mainly focus on external sensor spoofing attacks and barely explore the internal control logic of RAV software. Instead of building a similar estimation model based on high-level vehicle dynamics and sensors, Mini-Me is a fine-grained solution that explores the semantic information of controllers using dataflow analysis and creates a concise neural network-based "replica" with explainable intermediate concepts. Compared to bug tracking and parameter pinpoint tools like RVFuzeer [49] and Mayday [48] in Table 1, these primarily focus on semantic bug investigation and traceback of control program execution. Mini-Me organically combines the dataflow information of internal control program execution with external sensor measurements to build a more comprehensive and explainable estimation model.

Compared to other NN-based or learning-based system modeling solutions ([24, 40, 44, 71, 75]), Mini-Me can not only detect cyber-oriented attacks but also defend against malicious tampering of internal control logic. Prior works mainly focus on extracting operational stability-related vehicle dynamics to construct a systematical model with learning techniques. They did not sufficiently explore the internal semantic information in control logic. Thus, the sensor, actuator, and physical dynamics in such a "black box," especially for highly non-linear cyber-physical systems, result in non-transparent training and lack explainability [42], even with satisfying accuracy. In contrast, Mini-Me uses function-level time profiling and dataflow analysis to study the variable changes and mutual dependencies of control state variables and intermediate variables, providing concrete input and output sets for training a neural network-based approximate computing model. Furthermore, Mini-Me tunes and trains the LSTM-based neural network model and precisely estimates time-series data to defend against all five kinds of attacks listed in Table 1.

### Platform Applicability
Regarding Mini-Me’s applicability for different RAV models, its analysis (including automated LLVM passes, data flow analyses, neural network training, and error monitoring) is performed automatically and is agnostic to the RAV’s controller software. It can be easily expanded to other RAV platforms as described in Table 2, with very low code size overhead and runtime performance overhead. Most drones nowadays (including Crazyflie) run their controllers on ARM processors, which our evaluations are based on. In terms of minimum system requirements, Mini-Me does not require additional hardware and runs on the drone’s processor without impacting the main flight operation, as empirically shown by our experiments.

### Limitations and Stealthy Attacks
Mini-Me’s main objective is to detect attacks on the controller that result in fairly distinguishable behavioral divergence from its legitimate execution. However, recent studies on stealthy (or mimicry) attacks [29, 59] leverage gradual and minimal data value manipulations to evade anomaly detection solutions [27]. For instance, an attacker might be aware of the defense mechanism and launch stealthy attacks by crafting malicious parameter values, which will not make the monitoring model observe large enough deviation and therefore go undetected. The existing robustness design of RAV’s control model and algorithms is not sufficient to mitigate these threats. Detecting such attacks is a real challenge in practical settings without negatively affecting the false positive rates of the detector. Further research is required to ensure accurate detection of such attacks.

For Mini-Me’s accurate performance and attack detection, it is important to ensure that the DNN model imitates the original controller’s behavior in all feasible system states, including the execution paths of the controller software. In the case of complex and large-scale controller algorithms and software, complete code and system state space coverage could face scalability issues. As a result, reverse engineering analysis of the controller and construction of DNN models may require more static and dynamic techniques such as program-level symbolic executions [57], which we did not explore in this work.

## Related Works

### Drone Attacks
Prior attacks exploiting RAV’s attack surfaces focus on external sensor readings and remote configuration interfaces. Sensor spoofing [31, 68, 72] is one of the most common forms of cyber-attacks towards drones. Optical sensor flow attacks [31] demonstrate that attackers can form implicit control channels and take direct control over a drone by tricking the optical flow sensing. GPS spoofing attacks [72] achieve covert satellite-lock takeover by generating malicious signals to spoof the GPS receivers. Authors in [68] present an attack on drones equipped with vulnerable gyroscope sensors using intentional sound noise, which easily causes drone crashes. As a type of cyber-physical system (CPS), drones also face challenges from various CPS attacks such as false data injection attacks [56, 70, 76, 77] and control logic manipulation [38, 54]. Forged sensor data and malicious control programs can be sent and mislead the state estimators in drones for actuator operation corruption.

### Defenses
To defend against these threats, possible solutions focus on verifying the control logic with safety checks before its execution in system actuators. TSV [57] combines symbolic execution with model checking and improves proof-based approaches by lumping together safety constraints from transformed intermediate language expressions. Anomaly-based solutions [21, 61, 80] have been proposed to detect malicious and unexpected behaviors by strengthening the robustness and reliability of state estimators. Other recent works [26, 36, 83] focus on distinguishing anomalous behavioral patterns as opposed to the signature-based paradigm or detecting attacks with received sensor measurements. Regarding Mini-Me vs. CFG checking solutions (which we assume are the CFI techniques [15, 30, 35, 76]), controller attacks can exploit a variety of vulnerabilities such as control semantic bugs or data-oriented attacks that affect the controller’s operations without violating the control flow. While CFI techniques can detect control flow attacks, other attack types can evade CFI, as shown by past work. Mini-Me’s defense is attack type-agnostic and can detect controller misbehaviors (its I/O profiles from/to sensors/actuators) regardless of how the controller software is attacked. Learning-based defenses [24, 40, 44, 71, 75] use neural network-based models to monitor malicious intrusions at runtime. This kind of learning-based approach usually requires sensor readings, actuator behaviors, and accurate definitions of system dynamics. However, the generated systematical model is opaque during training and lacks explainability. Adaptive neural networks [23, 64, 82] are used as online approximators to estimate the nonlinear fault function in the fault-tolerant control scheme. However, their solutions cannot protect against real-time control logic attacks and have limited guarantees in highly nonlinear systems. For our solution, we do not need to extract physical dynamics or identify detailed specifications. Mini-Me automatically optimizes the neural network topology and generates safe predictions via the trained NN model for runtime attack monitoring.

## Conclusion
With many challenges arising about the vulnerabilities of embedded controllers in cyber-physical systems, we propose Mini-Me, an automated, precise, and robust framework for checking the validity of current control logic. We utilize the combination of reverse engineering techniques and dataflow analysis to identify variable changes and their dependencies in the critical controller functions of RAVs. We develop a lightweight neural network model to learn an extracted control function, which is deployed for the online detection of a wide array of data-oriented attacks. We show the novelty and effectiveness of Mini-Me in experiments on a real physical RAV system, Crazyflie 2.0, and simulated RAVs.

## Acknowledgments
This material is based upon work supported by the Department of Energy under Award Number DE-OE0000780, Cyber Resilient Energy Delivery Consortium (CREDC).

## References
[1] 2014. Gazebo: Open Source Robotics Foundation. http://gazebosim.org/.
[2] 2020. 3rd Eye Scene. https://github.com/csiro-robotics/3rdEyeScene.
[3] 2020. Optuna: A hyperparameter optimization framework. https://github.com/optuna/optuna.
[4] 2020. RetDec: a retargetable machine-code decompiler based on LLVM. https://retdec.com/.
[5] 2020. SITL Simulator (Software in the Loop). https://ardupilot.org/dev/docs/sitl-simulator-software-in-the-loop.html.
[6] 2021. Black Magic Probe. https://github.com/blacksphere/blackmagic/wiki.
[7] 2021. LLVM Alias Analysis Infrastructure. https://llvm.org/docs/AliasAnalysis.html.
[8] 2021. LLVM Pass Framework. https://llvm.org/docs/WritingAnLLVMPass.html.
[9] 2021. PX4 Pro Open Source Autopilot - Open Source for Drones. http://px4.io.
[10] Retrieved July 1, 2020. DHL parcelcopter launches initial operations for research purposes. https://www.dhl.com/en/press/releases/releases_2014/group/dhl_parcelcopter_launches_initial_operations_for_research_purposes.html.
[11] Retrieved July, 2020. ArduPilot: versatile, Trusted, Open Autopilot software for drones and other autonomous systems. https://ardupilot.org/about.
[12] Retrieved September 1, 2020. The Crazyflie 2.0, a lightweight, open source flying development platform. https://www.bitcraze.io/products/old-products/crazyflie-