✗
✔
✔
✔
✗
∗ The control parameter attack is only partially detected by CI. However, those attacks triggered by control-semantic bugs (e.g., missing range check) can not be detected
Table 2: Mini-Me training and evaluation results on differ-
ent consumer-grade drone platforms. (CSO: Code Size Over-
head, RPO: Runtime Performance Overhead)
Vendor
Model
Firmware
Bitcraze
3D Robotics
ArduPilot
ArduPilot
3D Robotics
Crazeflie 2.0
3DR IRIS+
APM SITL
APM SITL
3DR Solo
cf2_2019.02
ArduCopter 3.4
ArduCopter 3.4
ArduCopter 3.6
PX4 Pro 1.7
Performance
CSO (%) RPO (%)
0.18
0.22
0.44
0.48
0.35
3.1
2.1
2.9
2.7
2.0
error between original control logic and approximate model has
already exceeded the security range given by Mini-Me. We observe
that real-time estimation error exceeds the upper bound, thus our
solution Mini-Me can detect this actuator spoofing attack.
Hard Timer Attack. The task deadlines and queues monitoring
function in RAVs are usually relying on the timer-related values
in the global macro definition. As a type of system clock attack,
the hard timer attack will write maximum values into timers to
compromise the deadline-based task management and significantly
slow down the real-time response. We launch the hard timer attack
at time instance 10.0s to write a large value into TIMER_PERIOD.
This attack will cause the failure of queues and task management
in Crazyflie 2.0 and result in the entire control program crash. The
roll angle is used for RAV’s attitude adjustment by state estimator
and other control algorithms. When it stops updating as shown
in Figure 14e, our NN-based approximation model will calculate
estimation based on the last signals. In addition, the original control
algorithm has extremely low responsiveness towards the sensor
data readings. Therefore, Mini-Me successfully recognizes this kind
of attack by monitoring that real-time estimation error in Figure
14j has exceeded the upper bound of the benign error range.
5.4 Performance Overhead
Space overhead. We measure the code size overhead on all five RAV
models. During a boot-up routine, the RAV software application
initializes the portions in volatile memory and load RTOS and
program codes from the flash memory, which also includes the
read-only data along with other system-level data such as event
logs. As shown in Table 2, Mini-Me has an average space overhead
of 0.34%, which is negligible for practical deployment on resource-
constraint embedded systems like RAVs. Note that we do not include
the offline training libraries and modules in the space overhead
11
since they are not used in the forecasting process once the trained
model gets deployed.
Runtime overhead. The measurements of runtime overhead on
all the five RAV models are presented in Table 2. The deployment of
Mini-Me does not violate any deadline constraints or scan cycles
in our experiments. The overhead of all five RAV models is 2.6% on
average since Mini-Me only calculates the inference output (i.e.,
real-time monitoring error) based on mathematical operations of
the trained model, which run much faster in reduced precision.
The training and hyperparameter tuning of the NN model is very
time-consuming. In each tuning trial, we suggest a new set of hyper-
parameters and a network topology to train and do cross-validation
on test sets. These model training and optimization processes usu-
ally take hundreds of trials to determine the best model but they
are all offline for Mini-Me.
6 DISCUSSION
Comparison with Prior Works. Based on the study cases above,
we demonstrate the attack detection and protection of Mini-Me.
Compared to recent control invariant-based works (CI [27], SAV-
IOR [59]) in Table 1, they mainly focus on the external sensor spoof-
ing attacks and barely explore the internal control logic of RAV
software. Instead of building a similar estimation model based on
high-level vehicle dynamics and sensors, Mini-Me is a fine-grained
solution that explores the semantic information of controllers us-
ing dataflow analysis, and creates a concise neural network-based
“replica” with explainable intermediate concepts. Compared to bug
tracking and parameter pinpoint tools like RVFuzeer [49] and May-
day [48] in Table 1, they are mainly focusing on the semantic bug
investigation and traceback of control program execution. Mini-Me
organically combines the dataflow information of internal control
program execution with the external sensor measurements to build
a more comprehensive and explainable estimation model.
Compared to other NN-based or learning-based system model-
ing solutions ([24, 40, 44, 71, 75]), Mini-Me can not only detect the
cyber-oriented attacks but also defense against malicious tampering
of internal control logic. The prior works mainly focus on extract-
ing the operational stability-related vehicle dynamics to construct
a systematical model with learning techniques. They did not suffi-
ciently explore the internal semantic information in control logic.
Thus, the sensor, actuator, physical dynamics in such a “black box”,
especially for highly non-linear cyber-physical systems, will result
in non-transparent training and lack explainability [42] even with
satisfying accuracy. In contrast, Mini-Me uses function-level time
438profiling and dataflow analysis to study the variable changes and
mutual dependencies of control state variables and intermediate
variables, which provides us with concrete input and output sets
for training a neural network-based approximate computing model.
Furthermore, Mini-Me tunes and trains the LSTM-based neural
network model and precisely estimates time-series data to defense
all the five kinds of attacks listed in Table 1.
Platform Applicability. Regarding Mini-Me’s applicability for
different RAV models, Mini-Me’s analysis (including its automated
LLVM passes, data flow analyses, neural network training and error
monitoring) is performed automatically and is agnostic to the RAV’s
controller software, which can be easily expanded to other RAV
platforms as described in Table 2 with very low code size overhead
and runtime performance overhead. Most drones nowadays (in-
cluding Crazyflie) run their controllers on ARM processors, which
our evaluations are based on. In terms of the minimum system
requirements, Mini-Me does not require additional hardware and
runs on the drone’s processor with no impact on the main flight
operation as empirically shown by our experiments.
Limitations and Stealthy Attacks. Mini-Me’s main objective
is to detect attacks on the controller that result in fairly distinguish-
able behavioral divergence from its legitimate execution. How-
ever, there have been recent studies on stealthy (or mimicry) at-
tacks [29, 59] that leverage gradual and minimal data value manipu-
lations to evade anomaly detection solutions [27]. For instance, the
attacker might be aware of the defense mechanism and launch the
stealthy attacks by crafting malicious parameter values, which will
not make the monitoring model observe large enough deviation
and therefore go undetected. The existing robustness design of
RAV’s control model and algorithms is not sufficient to mitigate
these threats. Therefore, detecting such attacks is a real challenge
in practical settings without affecting the false positive rates of the
detector negatively. Further research is required to make sure such
attacks can be detected accurately.
For Mini-Me’s accurate performance and attack detection, it
is important to make sure that the DNN model will imitate the
original controller’s behavior in all feasible system states including
the execution paths of the controller software. In the case of com-
plex and large-scale controller algorithms and software, complete
code and system state space coverage could face scalability issues.
As the result, reverse engineering analysis of the controller and
construction of DNN models may require more static and dynamic
techniques such as program-level symbolic executions [57] that we
did not explore in this work.
7 RELATED WORKS
Drone Attacks. The prior attacks exploiting the RAV’s attack sur-
faces focus on the external sensor readings and remote configura-
tion interfaces. Sensor spoofing [31, 68, 72] has been identified as
one of the most common forms of cyber-attacks towards drones
these days. Optical sensor flow attack [31] demonstrate that attack-
ers can form implicit control channels and take direct control over
a drone by tricking the optical flow sensing. GPS spoofing attacks
[72] achieve convert satellite-lock takeover by generating the mali-
cious signals to spoof the GPS receivers. Authors in [68] present an
attack on drones equipped with vulnerable gyroscope sensors by
12
using intentional sound noise, which easily causes drone crashes.
As a type of cyber-physical system (CPS), drones are also facing
the challenges of various CPS attacks such as false data injection at-
tacks [56, 70, 76, 77] and control logic manipulation [38, 54]. Those
forged sensor data and malicious control programs can be sent
and mislead the state estimators in drones for actuators operation
corruption.
Defenses. To defend against these threats, possible solutions
focused on verifying the control logic with safety checks before
its execution in system actuators. TSV [57] goes even further to
combine symbolic execution with model checking and improves
the proof-based approaches by lumping together the safety con-
straints from transformed intermediate language expression. In
response, anomaly-based solutions [21, 61, 80] have been proposed
to detect malicious and unexpected behaviors by strengthening
the robustness and reliability of state estimators. Other recent
works [26, 36, 83] focus on distinguishing anomalous behavioral
patterns as opposed to the signature-based paradigm or detecting
attacks with received sensor measurements. Regarding Mini-Me
vs. CFG checking solutions (which we assume are the CFI tech-
niques [15, 30, 35, 76]), controller attacks can exploit a variety of
vulnerabilities such as control semantic bugs or data-oriented at-
tacks that affect the controller’s operations without violating the
control flow. While CFI techniques are able to detect the control
flow attacks, other attack types can evade CFI as shown by the past
work. Mini-Me’s defense is attack type-agnostic and can detect
controller misbehaviors (it’s I/O profiles from/to sensors/actuators)
no matter how the controller software gets attacked. The learning-
based defenses [24, 40, 44, 71, 75] use neural network-based models
to monitor malicious intrusions at runtime. This kind of learning-
based approach usually requires sensor readings, actuator behav-
iors and accurate definitions of system dynamics. However, the
generated systematical model is opaque during training and lacks
explainability. The adaptive neural networks [23, 64, 82] are used
as online approximators to estimate the nonlinear fault function in
the fault-tolerant control scheme. But their solutions cannot protect
against real-time control logic attacks and also have limited guaran-
tees in highly nonlinear systems. For our solution, we do not need
to extract the physical dynamics or identify detailed specifications.
Mini-Me automatically optimizes the neural network topology and
generates safe predictions via the trained NN model for runtime
attack monitoring.
8 CONCLUSION
With many challenges arising about the vulnerabilities of embed-
ded controllers in cyber-physical systems, we propose Mini-Me, an
automated, precise and robust framework for checking the validity
of current control logic. We utilize the combination of reverse en-
gineering technique and dataflow analysis to identify the variable
changes and their dependencies in the critical controller functions
of RAVs. We develop a lightweight neural network model to learn
an extracted control function, which is deployed for the online
detection of a wide array of data-oriented attacks. We show the
novelty and effectiveness of Mini-Me in the experiments on a real
physical RAV system Crazyflie 2.0 and simulated RAVs.
439ACKNOWLEDGMENTS
This material is based upon work supported by the Department
of Energy under Award Number DE-OE0000780, Cyber Resilient
Energy Delivery Consortium (CREDC).
REFERENCES
[1] 2014. Gazebo: Open Source Robotics Foundation. http://gazebosim.org/.
[2] 2020. 3rd Eye Scene. https://github.com/csiro-robotics/3rdEyeScene.
[3] 2020. Optuna: A hyperparameter optimization framework. https://github.com/
[4] 2020. RetDec: a retargetable machine-code decompiler based on LLVM. https:
optuna/optuna.
//retdec.com/.
html.
[5] 2020. SITL Simulator (Software in the Loop). https://ardupilot.org/dev/docs/sitl-
simulator-software-in-the-loop.html.
[6] 2021. Black Magic Probe. https://github.com/blacksphere/blackmagic/wiki.
[7] 2021. LLVM Alias Analysis Infrastructure. https://llvm.org/docs/AliasAnalysis.
[8] 2021. LLVM Pass Framework. https://llvm.org/docs/WritingAnLLVMPass.html.
[9] 2021. PX4 Pro Open Source Autopilot - Open Source for Drones. http://px4.io.
[10] Retrieved July 1, 2020. DHL parcelcopter launches initial operations for research
https://www.dhl.com/en/press/releases/releases_2014/group/dhl_
purposes.
parcelcopter_launches_initial_operations_for_research_purposes.html.
[11] Retrieved July, 2020. ArduPilot: versatile, Trusted, Open Autopilot software for
drones and other autonomous systems. https://ardupilot.org/about.
[12] Retrieved September 1, 2020. The Crazyflie 2.0, a lightweight, open source flying
development platform. https://www.bitcraze.io/products/old-products/crazyflie-