### Security Requirements and Original Functionality

The number of program points at which CapWeave introduced instrumentation, referred to as "Woven Points," was relatively small compared to the size of each benchmark. Additionally, the number of functions executed between a synchronous fork and join (referred to as "Interproc. Funcs") in the woven benchmarks was minimal and matched the number of functions executed in hand-woven benchmarks. However, the woven versions of bzip2, gzip, php-cgi, and wget incurred noticeable overhead.

We hypothesized that these programs would introduce the most overhead on small workloads because, in such cases, the fixed overhead of executing a synchronous fork and join dominates the overall runtime of the program.

### Performance on Larger Workloads

To measure the performance of the woven programs on larger workloads, we generated a 1 GB file of source code from the Capsicum kernel source tree and used it as a workload for bzip2, gzip, and wget. The results were as follows:

- **bzip2**: The unwoven version compressed the large file in 25 minutes and 31 seconds, while the woven version had a 4% overhead over the baseline time.
- **gzip**: The unwoven version compressed the large file in 5 minutes and 27 seconds, and the woven version had a 3% overhead over the baseline time.
- **wget**: The unwoven version downloaded the large file from a server on the same local network in 1 minute and 6 seconds. The woven version showed a -4% overhead, indicating that the overhead of weaving is obscured by network traffic noise.

Thus, the maximum overhead of the woven programs over the unwoven ones is 4%, with a geometric mean of all overheads being 1%. The overhead for php-cgi depends on how frequently an input PHP script opens files during execution.

### Overhead in tar and tcpdump

The woven versions of tar and tcpdump introduced significant overhead on operations that execute frequently, such as reading data into a buffer in tar or resolving network addresses to names in tcpdump. This per-operation overhead, particularly in tar, highlights another limitation of CapWeave: some policies may induce CapWeave to introduce costly primitives, such as `fork`, at program points that cause considerable overhead. In contrast, CapWeave might be able to instrument other program points with much less overhead.

While the overhead of the hand-woven program is less than that of the CapWeave-woven program, it is still considerable. Efficiently weaving tar remains a challenging problem that could benefit significantly from further automatic tool support. In future work, we aim to address this limitation by extending CapWeave to use a cost metric and generalizing the game solver to find optimal strategies for quantitative games [22].

### Related Work

#### Capability Systems
Karger [23] introduced a capability system to mitigate the effects of attacks by malicious programs. The Capsicum operating system [10] provides security primitives to isolate components of a program in sandboxes with different capabilities based on UNIX file descriptors. CapWeave eases the use of Capsicum by allowing policies to be stated as a separate specification that CapWeave weaves into the program automatically.

#### Security Monitors
Operating systems like Capsicum, HiStar [11], and Wedge [24] provide security system calls, enabling application developers to define program-specific policies. In contrast, Mandatory Access Control (MAC) operating systems, such as [25]â€“[27], only support system-wide policies described in terms of standard system events. These policies cannot refer to specific program events, but many practical policies can only be defined in terms of such events [28]. UNIX can monitor programs using the `setuid` system call, but this approach has the same limitations as MAC systems. Systems with security primitives allow applications to signal key events to the operating system, addressing these limitations.

#### Inline Reference Monitors (IRMs)
An IRM rewriter takes a policy expressed as an automaton and instruments a target program with an IRM, which executes in the same memory space as the program and halts it if it violates the policy [28], [30]. Edit automata [31] generalize IRMs by also suppressing or adding security-sensitive events. While IRMs can enforce policies over arbitrary events, they can only monitor managed code. Systems with security primitives, however, can safely and efficiently monitor programs composed largely of unmanaged code [10], [11].

#### Writing Programs for Security Monitors
Previous work on programming aids for systems with security primitives includes automatically verifying and instrumenting programs to use the Flume OS [9] and HiStar OS [33] primitives. However, the policy languages used in these approaches are not temporal and cannot be easily applied to other systems. CapWeave applies a known automata-theoretic weaving algorithm [15] and can, in principle, be applied in multiple settings. The main contribution of this paper is to describe how the automata-theoretic algorithm can be used to rewrite programs for a practical capability system.

#### Other Approaches
In the privsep project [35], OpenSSH was manually rewritten to use a trusted, privileged parent process and an unprivileged child process. The Privman [36] library allows manual compartmentalization of UNIX daemons. Previous work [37], [38] automatically partitions programs to process high and low-confidentiality data separately. The SOAPP project [39] proposes a semi-automatic technique where a programmer annotates a program with a hypothetical sandbox, and a program analysis validates the sandbox. CapWeave, in contrast, automatically infers where to invoke library functions and rewrites the program accordingly.

Skalka and Smith [40] present an algorithm to show statically that some capability-based security checks are always satisfied. Hamlen et al. [41] verify the correctness of programs rewritten by an IRM rewriter. Our work, however, focuses on inferring the correct placement of primitives to restrict the capabilities of unmanaged programs.

#### Safety Games
Safety games have been studied as a framework for synthesizing reactive programs and control mechanisms [14], [42]. Previous work describes algorithms that determine winning strategies for safety games [14]. Our key contribution is to demonstrate that such game-theoretic problems can be applied in practice to rewrite programs to enforce a security policy.

### Conclusion

New operating systems, such as the Capsicum capability system, provide powerful system-level primitives for secure programming, but these primitives are non-trivial to use. CapWeave, a policy-weaver for Capsicum, takes an uninstrumented program and a high-level policy from a programmer and automatically infers where to invoke security primitives and rewrites the program accordingly. In practice, CapWeave produces programs that match the behavior and performance of manually modified programs. CapWeave is designed to allow easy addition, removal, or updating of new programming libraries as they continue to be developed.

### Acknowledgments
We gratefully acknowledge the work of the Capsicum development team, particularly Pawel Dawidek, Khilan Gudka, and Ben Laurie. We thank Michael Zhivich and Jeffrey Seibert at MITLL for developing the CapWeave policy for PHP. We also thank our shepherd, Niels Provos. This work was supported, in part, by DARPA and AFRL under contracts FA8650-10-C-7088 and FA8750-10-C-0237. The views, opinions, and findings contained herein are those of the authors and should not be interpreted as representing the official views or policies of the Defense Advanced Research Projects Agency or the Department of Defense.

### References
[References listed here]

---

This optimized version aims to improve clarity, coherence, and professionalism, making the text more accessible and easier to understand.