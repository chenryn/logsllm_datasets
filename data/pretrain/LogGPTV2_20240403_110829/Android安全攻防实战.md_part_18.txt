// file from the -apk file
if dex_file 1= None:
strings = self,getStrings
(dex_fi1e-getAbsolutePath ()}
dex_file ,delete ()
 look for an odex file too, because some systen
packages do not
 1ist these in sourceDir
strings += self,getStrings (path.replace (*-apk*,
" ,odex*))
elif (*-odex" in path) :
strings = self .getStrings (path)
content_uris ,append( (path, fi1ter (lanbda s1 (=coNreNr://*
in s.upper ()) and (*coNTENT://* (= s-upper (1), strings)))
// In this you can see the script actually search for the literal
//*coNTENT://" or *content://" Ln the extracted .dex fi1e,
return content_uris
拓展阅读
●drozerMaster 代码仓库中 Provider.py 的下载地址：(https://github.com/ mwrlabs/
drozer/blob/master/src/drozer/modules/app/provider.py)。
·drozer Master 代码仓库中 Common/Provider.py 的下载地址：(https://github.
com/mwrlabs/drozer/blob/master/src/drozer/modules/common/provider.py)
●Android 开发者网站中“URI permissions”主题的地址：(http://developer.android.
com/guide/topics/security/permissions.htmlfuri)
● CVE-2013-231  MovatwiTouch content provider 漏 润: (http://web.nvd.nist.
125
---
## Page 144
Android安全攻防实战
gov/view/vuln/detail?vulnldCVE-2013-2318&cid3)。
●Marakana 网站—Android content provider 教程(http://marakana.com/s/post/
1375/android_content_provider_tutorial) -
4.8从有漏洞的contentprovider中提取数据
如果一些content provider的URI不需要读权限，而且/或者GrantURI已经被设
为了true，那么你或许可以用一些drozer工具提取其中的数据。此外，在某些情况下，
设置和执行读/写权限的方式不当，也会将content provider中的数据暴露给攻击者。
这个实验将涵盖一些简单的技巧，通过它们你可以探知content provider中存储
的数据的类型。这个实验紧接上一个实验，同时假设你已经枚举出了一些content
URI，并且已经确定与它们进行交互以及查询相关的URI，是不需要权限或者不需要
足够安全的权限的。
怎么做·
在寻找URI的过程中，你需要使用上一个实验中详细解释过的命令进行查
询。
run app -provider.info --permission nul1
run app-provider.finduri [package]
上面的命令将会给你一些相当有用的URI作为目标，然后你可以用下面这条命
令提取一些数据。
dz> run app·provider.query [URI]
下面是一个简单的例子，drozer 的帮助文档中，有许多与content provider相关的
脚本，用起来很简单。
dz> run app ·provider query content: //settings/secure
下面是一个来自一个有漏洞的 content provider 的样本的例子。在这个例子里，
攻击者使用drozer提取出了某个用户的银行交易相关信息。如图4.12所示的这个截
图就是这个query命令的输出结果。
126
---
## Page 145
第4章利用app中的漏润
90472717
37534618227
365244
806324
32324942225
60936472011
04325175937
05915449438
72143982265
799103
991376
86721944473
402726
869184
229566
16
|98536529734|672881
邮 4.12
有些content provider，特别是那些文件管理类的app 中的 content provider，支持
对文件进行查询。如果content provider没有对文件的类型或者app 可以读取的路径
进行一定的限制的话，那就意味着攻击者也许能够对content provider实际想要提供
的文件之外的目录进行路径遍历，或者在许多情况下，攻击者可以提取受害人设备
上敏感目录中的文件。要提取这些文件，你可以使用下面这条命令。
dz> run app provider,download [URI]
在上面这条命令里，[URI]就是你要通过content provider提取的文件的URI。如
果在contentprovider处理这类查询的部分实际实现代码中没有对输入进行过滤或保
护，你就可以注入文件路径，滥用这个缺乏保护的漏洞一一获取到设备文件系统的
其他区域中的文件及文件内容。你可以以下面这种格式，通过尝试不同文件路径的
方式达到这一目的。
dz> run app ·provider.download content: // [valid-URI] / . . / . . / [other file path]
[loca1-path]
在上面这条命令中，[valid-URI]是有漏洞的 content provider 的主机名（authority）
或者已经注册了处理代码的 URI。[other file path]是你要提取的文件的路径。面
[local-path]是你想把这个文件“下载”到哪里的一个文件路径。比如下面这个例子。
dz> run app -provider download content: //vulnerabledatabase/ . / ./ . /
system/etc/hosts /tmp/hostsFileExtracted. txt
如果你已经有过一些黑客或者Web应用安全审计经验，它和Web应用安全中的
路径遍历和本地文件包含（local file inclusion）漏洞非常相似。它也把Android app
暴露在许多同样的风险下。在许多真实的案例中，不少非常流行的app都曾经被报道
过存在这类漏洞。相关例子详见这个实验的“拓展阅读”一节。
如果你的 content provider 设置路径权限时，匹配类型（matching type）使用了
PATTERN_LITERAL，Android 权限框架将只有在所请求的路径与你定义的路径精确
127
---
## Page 146
Android安全攻防实战
匹配时，才会强制执行检查，保护你的content provider！图4.13所示的这张快照就
是个例子：
ole.sieve.DBContentProvider
Perr
图 4.13
当前这个例子来自MWR实验室的 Sieve这个Androidapp，这个app开发时，故
意嵌入了某些漏洞。在“拓展阅读”一些中会给出它的下载网页。
在上面这张快照中，我们可以看到这个app使用了PATTERN_LITERAL匹配模
式保护路径Keys。这也就意味着如果我们试图用drozer查询该路径的话，结果应该
会是下面这样的。
run app -provider.query content: //com.mwr.example .sieve .DBContentProvider/
Keys
如图4.14所示的这张截图就是上面这条命令的输出。
e_keYs,or granturLPerMt:
图 4.14
上面这张截图显示：drozer在与content provider交互时，如果没有必要的权限，
将会导致一个权限拒绝（permission denial）。但是，我们只要在路径后面加上一个/
符号，它仍然是有效的，但结果就变成下面这个样子了。
run app -provider.query content: //com.mmr.example.siever.
DBContentProvider/Keys/
图4.15所示的这张截图就是上面这条命令的输出。
Password
1pin
B 4.15
128
---
## Page 147
第4章利用app中的漏润
在路径上加上一个斜杠之后，PATTERN_LITERAL这个检查将不会发现路径
content:/com.mwr.example.sieve.DBConentProvider/Keys,而是发现路径 content://com.
mw.example.sieve.DBConentProvider/Keys/。也是说,app 查询 content provider 时
需要的是/Keys/路径的访问权限一但是这个东西并没有被定义过，因此也就不需要
任何权限一查询也就毫无疑问地被执行了。在上面这张截图中，我们可以看到这
点：一个恶意app 能够提取 Sieve 口令管理app 中的某个用户登录 PIN码的详细信息。
拓展阅读
° The Path traversal vulnerability on Shazam (Android) application article
(http://blog.seguesec.com/2012/09/path-traversal-vulnerability-onshazam-android-
application/).
 The Path traversal vulnerability in Adobe Rcader (Android) application
article(htp://blog.seguesec.com/2012/09/path-traversal-vulnerabilityon-adobe-read
er-android-application/).
° The WinZip for Android Content Handling Directory Traversal Vulnerability
article(http://vuln.sg/winzip101-en.html).
* The Android 2.3.4 Browser Local File Inclusion at CVE Details; CVE-2010-4804
(http:/www.cvedetails.com/cve/CVE-2010-4804/).
* drozer Sieve  A password manager app that showcases some common Android
vulnerabilitics(hps:/www.mwrinfosccurity.com/system/assets/380/original/sieve.
apk)
4.9向contentprovider插入数据
就像其他面向数据库的应用程序一样，content provider 可会被利用来向 SQLite
数据库或文件中插入数据。因为只有使用适当的写权限，任何contentprovider都不
会对这一功能有所限制。攻击者也许能够恶意地将数据插入到SQLite数据库中。这
个教程讨论的是：你可以怎样执行这类攻击。在第5章中，我们来考虑导致这类漏
洞的实际代码，并讨论一些补教的办法。
怎么做·
在我们往content provider里插入数据之前，我们先得知道数据的结构及各列的
名称等信息。你可以在drozer console里使用下面这条命令，把它们一一列出。
dz> run app·provider,columns [URI]
129
---
## Page 148
Android安全攻防实战
在上面这条命令里，[URI]就是你要找的UR1。例如，你要在Sieve身上用这招，
你应该执行下面这条命令。
dz> run app -provider columns content: //com.mwr example.sei.ve.
DBContentProvidez/Passwords
上面这条命令产生的输出结果显示在图4.16所示的这张截图中。
_id|service|username|password|enail|
图 4.16
为什么说逐一列出数据库中各列的列名很重要呢？这是因为：它可能有助于你
开展针对该content provider的进一步攻击。你可能需要了解一些关于数据库结构的
信息，以便弄清你需要做的是把哪些列或行中的数据提取出来，或往这些行或列中
插入数据。
在了解了一些数据库的结构以及正确构造查询语句所必须的列名之后，你就可
以用下面这个格式的命令把数据插进content provider了。
dz> run app·provider.insert [URI] [--boolean [name][value]] [--integer
[name] [value]]  [--string [name]   [value] ...
在上面这个命令格式中，[URI]是指向相关数据的 URI，--boolean，一integer 和
-string都是表示你所提供的数据片段都是什么类型的数据的标志位。这个模块支持
下列这些数据类型。
xos 5uxe-- uot-- raaqu--qeotg-- aqnop-- ueatoo
每种数据类型都需要一个[name]值（它表示列名）和一个[value]值（它表示你想
要插入的实际数值）。
以下面这条命令为例。
dz> run app·provider.insert --int _id 12 --int from_account 31337
- -int to_account --int amount 31337 content: //com.example.
vulnerabledatabase. contentprovider/statements
上面这是个虚构的例子，除非你特意开发了一些aPP 去处理它，否则
“ content:/com.example.vulnerabledatabase.contentprovider/statement” 这 个 URI 在的
设备上是根本不存在的。
下面这个是针对Sieve 的能够正常工作的例子。
dz> run app -provider insert content: //com.mwr example.sieve.
DBContentProvider/Passwords --int _id 3 --string username injected
130
---
## Page 149
第4章利用app中的淄润
myspamlgmai.1. com
执行上面这条命令之后，我们查询一下 Sieve的Passwords URI，如图4.17所示
的这些数据会被返回出来。
tdserviceusernaepassord
A(Ba
Ryspangral1
 4.17
我们可以很明显地看到：我们刚才注入的数据已经显示在数据库中了，它就在
id一栏为3的这一行里了。也就是说，我们已经成功地用一些自行构造的数据破坏
了Passwords数据库中的数据了。在这一实际的场景中，这会使攻击者可以修改用户
的登录口令或者删除用户，这会使用户登录相关账户时被拒绝。更特别的，在口令
管理 app 中，比如 Sieve，攻击者可以阻止用户访问他们保存的口令甚至是他们的
Gmail、推特或Linkedln账户。
关于这个例子的一个小注脚：我们注入的口令字符串“woopwoop”只不过是
个用来确认我们能够注入口令的标记而已一它只不过是一个易于识别的字符串罢
了。要是你真打算测试一下这个口令是不是真的好用的话，你会失望而归的。如果
真要注入一个能正常工作的口令，你应该先把口令的值用basc64编码一下，然后再
把它注入进去。
4.10枚举有SQL-注入漏洞的contentprovider
就像Web应用程序一样，Android一样也会使用不可信的输入来构造SQL查询
语句，而这不就是出漏洞的节奏嘛~~最常见的情况是：app会把有害的输入提交给
SQL，同时还不限制 content provider 的访间权限。
为什么你会希望阻止SQL注入类攻击呢？好吧，我们说这是因为你处于一类经
典的场景之中：在这一场景中，认证用户的方式是把用户名放到相关数据库中去进
行查询，看数据库中是否有相关信息。其代码类似于下面这种形式：
public boolean LsValidUser () (
u_username = EditText ( some user value )/
u_password - EditText ( solte user value )/
//some un-important code here...
username + "+ and pasovord - ** + u_pasaword +"*";
SQLiteDatabase db
//some un-important code here..
131
---
## Page 150
Android安全攻防实战
Cursor c = db.rawQuexy( p_query, nul1 )}
return c.getCount () != 0;
上面这段代码有什么问题呢？嗯，如果用户输入的是口令”or'1'=1这样的东西
的话，会发生什么情况呢？传给数据的查询语句就会变成下面这种样子。
select * from users_table vhere username = *" + u_username + * and
passvord - ** or '1'='1**
上面加租的字符表示来自用户的输入部分。这个查询语句形成了布尔代数中的
逻辑同义反复。也就是说，不论该查询语句查询的是什么表单或数据，它的结果将
总是为“真”。即数据库中所有的行都满足查询条件。然后，这也就等价于user_table
中的所有的行都会被返回出来。结果，即便输入的是一个无效的口令”or1=1，
c.getCountO这个方法也总是会返回一个非零的计数，这将导致认证被绕过！
考虑到不会有很多Android开发者会使用rawQuery方法，除非他们需要完成一
些确实很麻烦的SQL查询。我已经给出了另一个含有SQL注入漏洞的代码片段，在
真实世界中的 app 中会更多地遇见这类代码。所以在审计 Android app 中的注入漏洞