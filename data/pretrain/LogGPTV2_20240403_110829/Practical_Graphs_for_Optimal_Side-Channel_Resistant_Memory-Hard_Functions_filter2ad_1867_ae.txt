2
4π
e−2
4r∗π
2
4r∗π
2
(cid:33)
xr/r
xr ∗ − xn′+1
1 − x
(cid:33)
xr ∗
1 − x
= c6
(cid:3)
Assuming we can find appropriate constants, the Theorem 3.1
now follows directly from the above claims. Lemma 3.3 implies that
(1−c6)n′ nodes in Gm are (c4, r∗)-local expanders in expectation we
expect to have at least n′ − |S| 2
c5 − c6n′ nodes that are both (c4, r∗)-
local expanders and c5-good with respect to S. Lemma 3.2 then
implies that there is a path running through each of these nodes.
Thus, the meta-graph Gm of a random DRSample DAG G is (e, d)-
depth robust where d is a random variable with expectation E[d] =
n′ − |S| 2
c5 − c6n′. Furthermore, Lemma C.1 from the Appendix C
allows us to claim that for any constant ϵ > 0 we have d ≥ n′ −
c5 −c6n′−ϵn except with negligible probability in n assuming that
|S| 2
x  0,
(2) c2 ≤ 1 − 2c1
(3) c3 ≤ c1c2γ/τ from Theorem 2.4
c5 − c6 − ϵ from Lemma C.1 ,
Session E1:  Hardening CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1009(cid:18)
(4) 3c4 + c5 ≤ 1 from Lemma 3.2
1
(5)
1−c4
+ 2(1 − c4) ln(cid:16)
2c4 ln(cid:16) 1
(cid:17)
c4
(cid:17) − τ(1−γ)2c2
4
8
(cid:19)
 0 if n > 2
4 log n .
8by setting S = ∅ and letting T be the sinks of G
then Π
c2c3
(cid:16) 1−ϵ
(cid:17)
Algorithm 2: An algorithm for sampling a high aAT graph.
Function aATSample(H = ( ¯V = [n], ¯E), c ∈ (0, 1)):
V := [2n]
E := ¯E ∪ {(i, i + 1) : i ∈ [2n − 1]}
for v ∈ [n + 1, 2n] and i ∈ [2] do
edges of graph.
E := E ∪ {(v, GetParentc(v, i))}
of node v
end
return G := (V , E).
// Populate new
// Get i th parent
// DRSample
Function GetParentc (v,i):
if i = 1 then
u := i − 1
end
else if v ≤ n then
u := GetParentH(v, i)
m := ⌊c log(n)⌋
b := (v − n) mod ⌊n/m⌋
u := bm
end
else
end
return u
We sketch the proof below and begin with the construction
of G. (The pseudocode describing the construction can be found
in Algorithm 2.) Let n′ = n/2. We start with a graph Hn′ = ( ¯V , ¯E)
with ¯V = [n′]. We will add n′ nodes to form G = (V , E) with V = [n]
initially setting E = ¯E. Setting n′ = n/2 for each i ∈ [n′] we add
the edge (n′ + (i − 1), n′ + i) to E. Next let m = ⌊c3 log n⌋ and let
M = {u ∈ [n] : u ≡ 0 mod m} = ⌊n/m⌋. For each u = bm ∈ [n′]
and every v ∈ [n′ + 1, n] such that v − n′ ≡ b mod |M| we add the
edge (u, v) to E.
Clearly, G has indeg(G) = 2. For a node v ∈ [n′] we have that
indeg(v) ≤ indeg(Hn) ≤ 2. For v[n′ + 1, n] we have at most 2
incoming edges; (v − 1, v) and (bm, v) where b = v − n′ mod |M|.
Fix a pebbling P1, . . . , Pt of G and let ti denote the first time step
during which node i was pebbled. In the following discussion set
e = c1n′/log n, d = c2n′ and b = c3 log n′. Suppose that for some
i ∈ [tn′, tn−|M |] we have that |Pi| ≤ (1 − ϵ)e. Then we can show
that
ti +|M|
(cid:12)(cid:12)Pj
(cid:12)(cid:12) ≥ ϵed .
j=ti
ti +|M|
In particular, let G′ = G − V\ancestorsG−Pi ([i, i + |M|]). We note
that Hn − Pi is still (ϵe, d, b)-block-depth-robust. Thus, G′ is at least
(ϵe, d)-depth-robust so Theorem 2.4 implies that
′) ≥ ϵed .
Let ℓ1 ≥ tn/2 be the smallest time step for which(cid:12)(cid:12)Pℓ1
(cid:12)(cid:12) ≤ (1 − ϵ)e
if such a round exists and let v1 be given such that tv1  0 such that for all n > N the second term dominates
and we have
(cid:17). Thus, we
≥ c1(1 − ϵ)n
4 log n
(cid:16) nlog n
n
2|M| ed
n
2|M| ed
≥ min
t
∗
, 0} + i
∗ × ϵed
We have
2
= O
2
,
2
,
2
.
(cid:27)
.
j =1
j=1
(cid:16) 1−ϵ
c2c3
.
In particular this holds for any n > 2
n
remark 1. We note that aATSample (c.f. Algorithm 2) yields a
graph G which, except with negligible probability in n, has aAT(G) ≥
6.08×10−5
2/log n. In terms of provable security guarantees the lower
bound for aATSample improves on our lower bound for DRSample
by an order of magnitude, and it appears to improve on [31] by two
orders of magnitude — see Appendix D. Interestingly, while we can
establish better constants in our proof of security for aATSample the
simpler construction DRSample appears to perform better in practice.
5 EMPIRICAL ANALYSIS
In this section we describe the experiments we ran comparing
various graphs and interpret their results.
Depth-Reduction and aAT Attacks. To empirically investigate the
depth-robustness of a given graph G we implemented five algo-
rithms for constructing a depth-reducing set S for G and measured
the performance of the AB16 pebbling algorithm [5] when using
that set S. The AB16 attacks have been shown to be quite effec-
tive (i.e. have lower than desired amortized cumulative memory
complexity) against many practical iMHFs both theoretically [5,
7, 10, 20] and empirically (even when subject to reasonable con-
straints on parallelism and memory bandwidth) [6]. However, it
is important to note, that it remains unclear in which real world
scenarios the AB16 presents a (financially well motivated) attack
for real world parameters for Argon2i and the iMHF component of
Argon2id. Never-the-less, the empirical results showing the relative
advantage of the new graph distributions when attacked with AB16
type algorithms motivates further cryptanalysis of those graphs
distributions.
The details of AB16 algorithm are not particularly relevant to this
work and we refer the interested reader to [5] for more information.
Importantly though, the AB16 algorithm takes as input a depth
reducing set S as well as a key parameter д ∈ [depth(G − S), n] and
outputs a pebbling P with cost aAT(P) = O
this is already clear that for a given graph G the complexity of AB16
depends on the choice of the set S. In particular, the smaller the
(cid:16)|S|n + дn + n2d
(cid:17). From
д
set S for a given target depth of G − S the better for AB16. Indeed,
empirically measuring the aAT complexity of executions confirms
this intuition [6].9
We have implemented a variety of old and new improved algo-
rithms for selecting the set S and measured the lowest aAT com-
plexity of AB16 using one of the sampled S sets. More specifically,
our implementation takes as input a DAG G on n = 2k nodes
with k ∈ [14, 24] (sampled according to a particular graph dis-
tribution we are testing). Next, we enumerate over target depths
dtдt ∈ {2i : i ∈ [3, k − 2]} and for each target depth we use the
“Best Attack” heuristic to construct the smallest depth-reducing
set S. Next we iterate over values of the remaining key parameter
д ∈ [depth(G − S), n] and run the AB16 attack — our implementa-