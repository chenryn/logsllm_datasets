}
\],
\"exclude\": \[
{
\"pattern\":\"out\*\",
\"types\":\"alltest\"
},
{
\"pattern\":\"ppt\*\",
\"types\":\"alltest\"
}
\],
\"ttl\":7,
\"start\":1439178630272
}
}
index表示需要备份的索引模式及类型，多个用逗号分开
exclude表示无需备份的索引的模式及类型，多个用逗号分开
ttl字段表示索引自动备份的时间，也就是说7天之前的索引会被自动备份
start表示自动备份开始的时间，用时间戳表示，只取时分秒
返回：
{
\"result\":true
}
或者出错：
{
\"result\":false,
\"error\":\"xxx\"
}
##### 9.3恢复 {#恢复 .list-paragraph}
恢复是从指定的目录中把已归档的索引文件恢复到指定的集群。
恢复请求由前端发起
完整的恢复请求设计如下：
url:/restore
d:
{
\"index\":{
\"pattern\":\"yotta-20150303\",
\"types\":\"alltest,alltest_security\"}
}
后台服务器对发来的请求进行匹配，返回匹配成功需要恢复的索引信息，格式如下：
{
\"result\":true,
\"match\":
\[
{\"index\":\"yotta-20150303\",\"type\":\"alltest\"},{\"index\":\"yotta-20150303\",\"type\":\"alltest_security\"}
\]
}
若发生错误，也返回相应的信息，可能的情况包括：找不到指定的type，索引已经备份，集群不能连接、指定的目录不存在等，格式如下：
{
\"result\":false,
\"error\":\"xxx\"
}
##### 9.4配置 {#配置 .list-paragraph}
配置速度限制
请求：
url:/setting
d:
{
\"speed\":{
\"max\":10240000
}
}
返回：
{
\"result\":true
}
或者出错：
{
\"result\":false,
\"error\":\"xxx\"
}
查询当前设置
url:/setting
返回：
{
\"elastic\":{
\"host\":\"192.168.1.25\",
\"name\":\"darkrzy\",
\"port\",9300
},
\"store\":{
\"dir\":\"/data/elastic/store\"
},
\"speed\":{
\"max\":10240000
}
}
若有错误，返回
{
\"result\":false,
\"error\":\"xxx\"
}
###### 9.4.1配置文件项 {#配置文件项 .list-paragraph}
集群host(主机) 搜索集群的各个node，用IP地址表示，逗号分开归档目录
dir(目录) 归档以及恢复的目录
手动归档
pattern(归档的索引模式)
指索引文件的类型，以逗号分开，可以是索引文件的全名如yotta-20150401，也可以是前缀如yotta-201504\*
type(索引的类型) 指索引的type
自动归档
除了手动归档的参数外，自动归档还需要配置以下参数：
archived time(归档时间)
指索引文件的活跃时间，超过这个时间的索引文件会被自动归档，默认为7天，7天之前的索引会被自动归档。
exception(例外) 指定特定的不被归档的索引文件，模式参考pattern
手工恢复
pattern(待恢复的索引模式)
指索引文件的类型，以逗号分开，可以是索引全名如yotta-20150401，也可以是模板
type(索引文件的类型) 指索引文件的type
#### 10.数据聚合、关联、推送 {#数据聚合关联推送 .list-paragraph}
根据当前需求，日志分析软件通过利用平台本身的接口，提供了对业务、告警、终端信息的关联和聚合，最后将结果推送到外部数据库中存储。
##### 10.1业务数据聚合 {#业务数据聚合 .list-paragraph}
通过日志分析软件的检索系统的
transaction处理能力可以对分散的业务日志进行聚合，归纳出一个完整的业务流程。并可以通过配置项来灵活得自定义业务聚合方式。
###### 10.1.1Transaction设计 {#transaction设计 .list-paragraph}
一个transaction由一组相关的log组成，比如用户的一次搜索过程对应在整个系统中的所有日志等，
transaction命令将具有相同字段的值组合成一个group，并在单个group内进行transaction的识别
语法
transaction field-list \[maxspan=\\] \[maxevents=int\]
\[maxopentxn=int\]
\[maxopenevents=int\] \[startswith=\\]
\[endswith=\\]
\[contains=\\]
field-list :: field \[,field\]\*
timespan :: \\[s\|m\|h\|d\]
filterstring :: \ \| eval_expression
eval_expression :: eval(bool_expression)
filter_string：
1、\，为双引号括起来的字符串，可使用转义字符，表示单条日志是否包含该字符串
2、 eval(bool-expression), 对单条日志计算表达式的值，返回值true或者false
参数：
maxspan: transaction第一条日志和最后一条日志的最大时间间隔
maxevents ： 单个transaction的最大日志条数
maxopentxn：用于控制内存使用，获取的最多分组，用于过滤的计算
maxopenevents：用于控制内存使用，单个transaction最多从es取的log的条数
startswith : 满足的条件的日志为一个新的transaction的第一条日志
endswith : 满足条件的记录为transaction最后一条日志
contains:
如果transaction中的任何一条日志包含\或者满足bool-expression将保留该transaction，否则丢弃
###### 10.1.2业务数据聚合设计 {#业务数据聚合设计 .list-paragraph}
业务日志通过一系列从start with开始到end
with结束的步骤，可以将其聚合为整个业务。整个功能提供可灵活配置的接口来指定聚合方式的指定。样例如下：
busi_types = \[
{
busi_url =
\"/charge/business.action?BMEBusiness=charge.charge&\_cntRecTimeFlag=true\"
startswith = \"click on \\\"查询\\\"\"
endswith = \"click on \\\"提交\\\"\"
busi_type = \"缴费\"
busi_channel = \"营业厅\"
},
{
busi_url =
\"/custsvc/business.action?BMEBusiness=rec.chgprod&\_cntRecTimeFlag=true\"
startswith = \"click on \\\"套餐变更\\\"\"
endswith = \"click on \\\"确定\\\"\"
busi_type = \"套餐变更\"
busi_channel = \"营业厅\"
},
{
busi_url =
\"/charge/business.action?BMEBusiness=charge.personalBillQry\"
startswith = \"click on \\\"查询\\\"\"
endswith = \"click on \\\"返回\\\"\"
busi_type = \"账单查询\"
busi_channel = \"营业厅\"
}
\]
##### 10.2终端数据关联 {#终端数据关联 .list-paragraph}
通过日志分析软件数据处理系统的关联字典功能，提取出数据间的有关联的字段值，并根据新接入的数据进行实时更新。通过动态字典，能够使得不同来源的有关联的数据实现关联。
对于终端数据，有如下定义的字典；
dicts = \[
{
key_field = uiddevrecordid
field_names = \[strdevip\]
dict_name = id_ip.csv
domain = ops
schedule_interval_in_sec = 60
scan_period = 60 d
es_fetch_size = 100000
query = \"{ \\\"wildcard\\\": { \\\"tag\\\": { \\\"value\\\":
\\\"\*devbaseinfo\\\" } } }\"
},
{
key_field = dimensions.IP
field_names = \[dimensions.cookie_Login_Cookie\]
dict_name = ip_cookie.csv
domain = ops
schedule_interval_in_sec = 60
scan_period = 30 d
es_fetch_size = 100000
query = \"{ \\\"term\\\": { \\\"appname\\\": { \\\"value\\\":
\\\"userinfo\\\" } } }\"
}
\]
static_dicts = \[
{
key_field = cookie_Login_Cookie
field_names = \[depart_id, area_id\]
dict_name = cookie_office.csv
domain = ops
schedule_interval_in_sec = 60
scan_period = 30 d
es_fetch_size = 100000
}
\]
即从id_ip, ip_cookie,
cookie_office三个动态字典中提取出的有用字段，依序关联完成从终端的id到营业厅的关联关系。