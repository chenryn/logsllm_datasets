### 4.4 Supporting DOM Access

Normally, when a principal creates a JavaScript object, it receives a direct reference. However, this approach is not safe for DOM nodes because they contain read-only built-in properties that can access the global object and the entire DOM tree (e.g., `aNode.ownerDocument.defaultView` is `window` where `aNode` is a DOM node).

To address this, we ensure that only the host has direct access to DOM nodes. Third-party code can access DOM node creation operations only through proxies. As a result, all DOM nodes will have the host as the owner and be accessed by third-party code using proxies. Since object ownership information is no longer sufficient to determine who created a DOM node, we explicitly record this information in a field called "DOM-ownership."

#### JavaScript Code Generated from HTML

Certain DOM operations, such as setting the `innerHTML` property or calling `document.write`, can generate new JavaScript code from HTML. It is necessary to parse the HTML, identify script code, and rewrite it so that it executes in the same compartment as the principal invoking the HTML operation.

Malicious third parties might attempt to confuse our HTML parser with malformed HTML, causing it to miss some scripts that would otherwise be recognized and executed by the browser. To mitigate this, we use a solution similar to the one in Blueprint [35], which involves parsing the HTML, filtering the parse tree, and then converting the parse tree directly into actual DOM nodes using safe DOM API calls.

### 5. Implementation

We implemented JaTE in Firefox 33. The implementation consists of:
1. A Firefox extension that implements the JaTE network module.
2. The JaTE script, written in JavaScript, which is about 30KB in size when minified. The source code is released under the GPL [36].

#### 5.1 Use of Proxy

**Shadow Objects:**
To provide consistent semantics, ES6 proxies enforce several invariants within each trap handler. For example, a non-configurability invariant is enforced in the `get` trap to ensure that the return value is consistent for a frozen property. This prevents JaTE from creating a proxy for such a property. To work around this, instead of creating a proxy to an object `O`, JaTE creates a proxy to a shadow object `S` that contains a reference to `O`. The traps on the proxy are set to access `O`. Since `S` does not undergo any modification, all invariants enforced by ES6 proxies will always be satisfied.

**Fixing Built-in Functions:**
Proxy is still a new concept, and Firefox 33 does not yet fully conform to the ES6 specification. For example, some String prototype functions like `replace` and `match` that take a regular expression argument do not work if a proxy is supplied instead. To work around this, JaTE wraps such problematic functions to replace proxies with direct versions before calling the original function, and also creates proxies as needed for return values.

#### 5.2 JavaScript Rewriting

JaTE’s rewriting requires static recognition of certain keywords. We can perform this safely because all dynamic code is analyzed and rewritten just before execution. By considering all formats of JavaScript comments, our rewriting is resilient to lexer confusing attacks [5].

Code undergoes three transformations: direct `eval` rewriting, `this` rewriting, and global function declaration rewriting. These steps are efficient because they only require lexical analysis and maintaining the current parenthesis nesting level, rather than more extensive transformations that require full parsing.

During rewriting, we introduce some identifiers, such as `processThis`, `processEvalSrc`, etc., to the source code. In the actual implementation, these identifiers are randomly generated with a safe length to avoid collisions with names used by third-party code.

#### 5.3 Supporting ECMAScript 6

Although JaTE was developed to confine ES 5 code, it can support new ES 6 features. Some features require minor changes, such as `let` statements, which need a new rewriting rule to convert them to `var` declarations if they are in the global scope. Other new constructs like Arrow Functions, Proxies, and WeakMaps do not require changes to JaTE and are already supported.

### 6. Evaluation

#### 6.1 Performance Evaluation

**6.1.1 Page Load Overhead**

To calculate page load overhead, we developed a test extension for Firefox. The extension loads URLs sequentially from an input list, measuring the time it takes for the browser to emit the load event. The measurement is performed 10 times without any JaTE components and then repeated another 10 times with JaTE enabled. To avoid problems with network and caching, the extension disables caching and discards the load time for the first request of each site.

**Social Media Widgets:**
Since JaTE mediates all security-relevant operations, it can support any policy. We developed a suitable policy for our evaluation, starting with one-way isolation [16], which allows untrusted code to read or modify any data, but the modifications are visible only to untrusted code. We then tightened this policy to enforce confidentiality: all reads of primitive types return a “null” value. Specifically, the following rules are enforced:
- **Traversable objects:** Cross-compartment objects can be obtained but not modified or called. (Built-in functions can be called). This allows navigating the whole object graph.
- **Primitive zeroing:** Reading cross-compartment primitives always returns a default value, e.g., an empty string.
- **Global object shadowing:** Property writes on the global object do not affect other principals. The updated value is only visible to the current principal.

We relaxed this policy to support the functionality of Facebook’s “Like” button script. The script first creates a new global variable `FB`, which is not shared with other principals, making the default global object shadowing policy permissive enough. The script then looks for two `DIV` elements, one with `id="fb-root"` and one with `class="fb-like"`, by looping through all DOM nodes using `document.getElementsByTagName('*')`. The default policy allows calling built-in DOM functions and looping through the DOM nodes (traversable objects), but zeroes out their properties (primitive zeroing). Our policy relaxation avoids such zeroing and provides access to the two `DIV` elements. The script then writes into them and inserts a new `script` tag and a new `iframe`, both of which are allowed by the default policy since they pose no security threats with JaTE.

We used a similar process to create policies for Google+, Twitter, etc. Figure 5 shows the overhead for the confinement of each button. The interception overhead dominates because it includes rewriting these large scripts, while the policy checks only need to approve the creation of a handful of DOM nodes. We used a blank enclosing (i.e., first-party) page for each button, so the overhead figures represent the worst-case scenario.

**Figure 5: Performance for Social Media Widgets**

| Widget   | Size  | Intercept. Over. | Policy Over. |
|----------|-------|------------------|--------------|
| Facebook | 177kB | 12.06%           | 0.44%        |
| Google+  | 222kB | 18.79%           | 2.50%        |
| Twitter  | 361kB | 11.77%           | 2.99%        |
| StumbleUpon | 15kB | 8.02%            | 6%           |
| LinkedIn | 187kB | 9.24%            | 1.17%        |
| Average  | 12.97% | 2.62%            |

**6.1.2 User Interaction Overhead**

We measured the perceived overhead of JaTE on common user interactions, such as scrolling the page and moving to the next image in a gallery. These actions trigger one or more callbacks, which might schedule asynchronous callbacks of their own (e.g., making an HTTP request and evaluating the data when it arrives).

To estimate the interaction delay, we leveraged the single-threaded nature of JavaScript, instrumenting all mechanisms used to register callbacks (e.g., `addEventListener` and `XMLHttpRequest`) to wrap the callback in a special function that stores its running time. Since only one callback is executing at a time, the sum of the running times of all callbacks is the total time spent executing code for the interaction. Adding this number to the time spent loading new network resources yields a reasonable estimate of the perceived user delay for the action. Figure 6 shows the delay in JavaScript execution and the total overhead perceived by the user. Since the network delay is unaffected by confinement and usually dominates, the overhead is quite small.

**Figure 6: User Interaction Overhead**

| Interaction          | Website  | Delay Overhead |
|----------------------|----------|----------------|
| Scroll Page          | Yahoo    | 6.9%           |
| Next news item       | Yahoo    | 8.3%           |
| Scroll Page          | YouTube  | 7.4%           |
| Start a video        | YouTube  | 2.5%           |
| Instant search       | Google   | 1.3%           |
| Google map Panning   | Google   | 6.2%           |
| Google map Zooming   | Google   | 15.0%          |
| Item details         | Amazon   | 3.0%           |
| Search suggestions   | Amazon   | 5.3%           |
| Average              |          | 6.21%          |

**6.1.3 Rewriting Overhead**

We assessed the performance of the rewriter by rewriting six common scripts. Figure 7 shows the time required to rewrite the scripts. Our rewriter is much faster than JSand’s rewriter—JaTE’s 58ms vs. JSand’s 753ms for rewriting jQuery. This is because their rewriting is significantly more complex than ours. Even JaTE’s smaller overhead may be significant, e.g., 100ms on the Facebook “Like” button, and hence in our future work, we plan to implement it in C.

**Figure 7: Rewriting Overhead**

| Script                | Size  | Time  |
|-----------------------|-------|-------|
| Google AdSense        | 22kB  | 37ms  |
| Google Analytics      | 40kB  | 25ms  |
| Google Maps           | 50kB  | 47ms  |
| jQuery 2.1            | 83kB  | 58ms  |
| Twitter “Share” Button| 96kB  | 60ms  |
| Facebook “Like” Button| 160kB | 101ms |
| Total                 | 451kB | 328ms |

**6.1.4 Comparison with Related Work**

**Comparison with JSand:**
We compared the performance of JaTE with that of JSand, a JavaScript confinement solution based on SES. To compare JaTE’s and JSand’s performance, we replicated JSand’s benchmarks. Figure 8 shows the overhead for opening a blank page, loading the jQuery library, Google Maps, and finally interacting with Google Maps. Two reasons for the difference in performance are the full parsing required by JSand during rewriting, which affects page load times, and its compatibility layer: their confinement setup makes all global variables local, which requires expensive global object synchronization.

**Figure 8: JaTE vs. JSand Overhead Comparison**

| Test                  | Type        | JaTE  | JSand  |
|-----------------------|-------------|-------|--------|
| Blank Page            | Page Load   | 208%  | 169%   |
| jQuery                | Page Load   | 219%  | 1230%  |
| Google Maps           | Page Load   | 364%  | 31%    |
| Google Maps (Pan)     | Interaction | 98%   | 6.2%   |

**Comparison with Caja:**
We also compared JaTE against Caja using a subset of the demos provided by the Caja authors. The chosen subset consisted of programs that could easily be benchmarked: a canvas clock, a markdown converter, and a Game of Life. We modified the code for each demo to stop after a fixed amount of computations (e.g., 200 generations in Game of Life) and measured the average time required to complete the computation with Caja, JaTE, and without any confinement to assess the overhead.

For Caja, we tested both ES5/3 mode (compatible with ES3, uses rewriting to isolate code and a virtual DOM implementation) and ES5 mode (compatible with ES5, uses SES for isolation and the same virtual DOM implementation as ES5/3). Figure 9 shows the results; ES5/3 mode is slower than ES5 mode and JaTE because of its heavy runtime checks; Caja ES5 mode is faster than ES3/5 mode due to their use of SES (which realizes object capability without runtime checks), but still substantially slower than JaTE because of its virtual DOM implementation.

**Figure 9: Caja vs. JaTE Overhead Comparison**

| Demo                  | Caja ES5/3  | Caja ES5  | JaTE  |
|-----------------------|-------------|-----------|-------|
| Canvas Clock          | 100ms       | 50ms      | 20ms  |
| Markdown Converter    | 150ms       | 75ms      | 30ms  |
| Game of Life          | 200ms       | 100ms     | 40ms  |

### 6.2 Transparency Evaluation

There are three corner cases where JaTE can change the semantics of a script:
1. **Use of a cross-compartment caller:**
2. **Special forms of direct `eval`:**
3. **Modification of white-listed built-in functions:**

To assess the prevalence of these corner cases, we analyzed a large corpus of web pages and found that they occur infrequently. The impact on the overall transparency of JaTE is minimal.