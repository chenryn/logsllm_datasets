0,h + a(i)
, . . . , q(j,i)
(c) Pj sends d(j,i)
(d) Pi sets t(i,j)
(e) Split (t(i,j)
h = s(i,j)
, . . . , t(i,j)
h = q(j,i)
1
1
(t1, . . . , tτ ) and (q1, . . . , qτ ).
(f) Pi sets c(i)
(g) Pj sets c(j)
(h) Now we have
i,j = ((cid:104)g, t1(cid:105), . . . ,(cid:104)g, tτ(cid:105)) ∈ Fτ .
i,j = −((cid:104)g, q1(cid:105), . . . ,(cid:104)g, qτ(cid:105)) ∈ Fτ .
τ k) = g−1(a(i)) ∈ Fτ k
2 .
, for h = 1, . . . , τ k.
h · b(j), for h = 1, . . . , τ k. Set q(j,i)
h = q(j,i)
0,h .
τ k ) into τ vectors of k components each,
i,j = a(i) · b(j) ∈ Fτ
c(i)
i,j + c(j)
c(i) = a(i) · b(i) +(cid:88)
(c(i)
i,j + c(i)
j,i)
j(cid:54)=i
3: Each party Pi computes:
Combine:
1: Sample r, ˆr ← FRand(Fτ ).
2: Each party Pi sets
a(i) = (cid:104)a(i), r(cid:105),
ˆa(i) = (cid:104)a(i), ˆr(cid:105),
c(i) = (cid:104)c(i), r(cid:105)
ˆc(i) = (cid:104)c(i), ˆr(cid:105)
and
Each party Pi runs F(cid:74)·(cid:75).Input on their shares to obtain authenticated shares
Authenticate:
1: Sample s ← FRand(F).
(cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75),(cid:74)ˆa(cid:75),(cid:74)ˆc(cid:75).
Sacriﬁce: Check correctness of the triple ((cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75)) by sacriﬁcing(cid:74)ˆa(cid:75),(cid:74)ˆc(cid:75).
2: Call F(cid:74)·(cid:75).LinComb to store s ·(cid:74)a(cid:75) −(cid:74)ˆa(cid:75) under(cid:74)ρ(cid:75).
3: Call F(cid:74)·(cid:75).Open on input(cid:74)ρ(cid:75) to obtain ρ.
4: Call F(cid:74)·(cid:75).LinComb to store s ·(cid:74)c(cid:75) −(cid:74)ˆc(cid:75) −(cid:74)b(cid:75) · ρ under(cid:74)σ(cid:75).
5: Run F(cid:74)·(cid:75).Check((cid:74)ρ(cid:75),(cid:74)σ(cid:75), ρ, 0) and abort if F(cid:74)·(cid:75) aborts.
((cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75)) as a valid triple.
Output:
During this stage, a corrupt Pj may attempt to guess some bits of a by using values other
than b(j) in step (c). This is why we start with τ components for a instead of just one, ensuring
that a still has suﬃcient randomness to produce a triple. Note that there is no need for privacy
ampliﬁcation on b, which is already protected by the protocol because the shares b(j) are only used
to compute d(j,i) = q(j,i)
1,h + b(j), which is uniformly random because Pj learns only one of
0,h − q(j,i)
17
0,h and q(j,i)
q(j,i)
1,h .
After the Multiply step, the parties have an additively shared triple (a, b, c), which may be
incorrect if someone was dishonest. In the Combine step, they take random linear combinations
of the τ components of (a, b, c) using random r and ˆr in Fτ obtained from FRand. By using two sets
of random coeﬃcients, this produces two triples with the same b component; later, one of these will
be ‘sacriﬁced’ to check correctness of the other.
Authenticate their shares of a, ˆa, b, c and ˆc.
Using random combinations ensures that even if a few bits of the vector a are leaked to the
adversary, the values a, ˆa are still statistically close to uniform. The parties then use F(cid:74)·(cid:75) to
Finally, correctness of the triple(cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75) is checked in a Sacriﬁce phase, using(cid:74)ˆa(cid:75) and(cid:74)ˆc(cid:75).
The idea of this step is similar to the corresponding step in previous works [16, 18], with the key
diﬀerence that in our case both triples have the same b value. We observe that this still suﬃces to
check correctness of the triples, and means we only need to authenticate 5 values instead of 6.
5.1 Security analysis
Then, for each i (cid:54)∈ A, let δ(j,i)
We now give some more intuition behind the security of the protocol. Let us ﬁrst examine the
possible adversarial deviations in the Multiply step.
Suppose Pj is corrupt. Let a(j,i) ∈ Fτ and b(j,i) ∈ Fτ k be the actual values used by Pj in the
two executions of steps 1 and 3 with an honest Pi, instead of a(j) and b(j). Deﬁne the values a(j)
and b(j) to be those values used in the instance with an arbitrary (e.g. lowest index) honest party
Pi0.
b = b(j,i) − (b(j), . . . , b(j)) ∈ Fτ k be
j∈A δ(j,i)
, and
j∈A δ(j,i)
b as a length τ vector with components in Fk (similarly to th, qh in the protocol).
the deviation in Pj’s input with an honest Pi. Let δ(i)
consider δ(i)
the h-th component of c (for h ∈ [τ]), at the end of the Multiply stage, is
b(i) · δ(i)
Now by analyzing the possible adversarial deviations and summing up shares, we can see that
a = a(j,i) − a(j) ∈ Fτ and δ(j,i)
b =(cid:80)
a =(cid:80)
a [h]
.
(2)
(cid:104)(a(i)[h])B, δ(i)
and δ(i)
a
b
c[h] = a[h] · b +(cid:88)
(cid:124)
i(cid:54)∈A
+(cid:88)
(cid:124)
i(cid:54)∈A
b [h](cid:105)
(cid:125)
(cid:123)(cid:122)
=eah
(cid:123)(cid:122)
=ebh
(cid:125)
Intuitively, it is easy to see that any non-zero δ(i)
a errors will be blown up by the random honest
party’s share b(i), so should result in an incorrect triple with high probability. On the other hand,
the δ(i)
errors can be chosen so that eah only depends on single bits of the shares a(i). This means
b
that a corrupt party can attempt to guess a few bits (or linear combinations of bits) of a(i). If this
guess is incorrect then the resulting triple should be incorrect; however, if all guesses succeed then
the triple is correct and the sacriﬁce step will pass, whilst the adversary learns the bits that were
guessed.
This potential leakage (or selective failure attack) is mitigated by the Combine stage. The
intuition here is that, to be able to guess a single bit of the ﬁnal shares a(i), ˆa(i), the adversary must
have guessed many bits from the input vector a(i), which is very unlikely to happen. To prove this
intuition, we analyze the distribution of the honest party’s output shares using the Leftover Hash
Lemma, and show that if τ is large enough, the combined output is statistically close to uniform
to the adversary.
18
Protocol 5 Preprocessing input tuples, ΠInputTuple
Input: On input (Input, Pj) from all parties, do the following:
1: Pj samples r $← F, and calls F(cid:74)·(cid:75) with (Input, r, Pj).
2: All parties output(cid:74)r(cid:75) and Pj outputs r.
Regarding the Sacriﬁce stage, note that the check ﬁrst opens ρ = s· a− ˆa and then checks that
s · c − ˆc − b · ρ = 0
which is equivalent to s · (c − a · b) = ˆc − ˆa · b. If the triples are incorrect then this will only pass
with probability 1/|F|, since s is random and unknown when the triples are authenticated.
The following results (proven in Appendix C) state the security of our protocol. The ﬁrst
requires the combining parameter set to τ = 4, to obtain a a general result for any k-bit ﬁeld,
whilst the second (which is evident from the proof of the theorem) shows that for k-bit ﬁelds and
k/2-bit statistical security, τ = 3 suﬃces.
Theorem 3. If τ = 4 then the protocol ΠTriple (Protocol 4) securely implements FTriple in the
(FROT,F(cid:74)·(cid:75))-hybrid model with statistical security parameter k.
Corollary 1. If τ = 3 then ΠTriple securely implements FTriple in the (FROT,F(cid:74)·(cid:75))-hybrid model with
statistical security parameter k/2.
6 Complete preprocessing and online protocols
We now describe the complete protocols for preprocessing and the online phase of our MPC protocol.
6.1 Preprocessing
As well as multiplication triples, we also want the preprocessing to produce random, shared values
known by a single party (called input tuples), to allow that party to provide inputs in the online
phase, by instead oﬄoading this cost to the preprocessing.
In the online phase, they broadcast the diﬀerence of this and their actual input, so that the shared
random value can then be adjusted to the correct value by all parties. Note that this method avoids
phase. This is easy to do with Protocol 5: the relevant party simply inputs a random value to F(cid:74)·(cid:75).
having to use the Input command of FPrep (and hence of Π(cid:74)·(cid:75) in the actual protocol) in the online
The requirements for input tuple and triple generation are speciﬁed in the functionality FPrep
(Fig. 6), which also contains all features from F(cid:74)·(cid:75) (like FTriple). Given this and the proof of
Theorem 3, it is straightforward to show that the triple generation and input tuple generation
protocols securely implement FPrep.
Theorem 4. The protocols ΠTriple and ΠInputTuple together securely realize the functionality FPrep,
in the (F(cid:74)·(cid:75),FROT,FRand)-hybrid model.
19
Functionality FPrep
FPrep has all of the same features as F(cid:74)·(cid:75), with the following additional commands:
Input Tuple: On input (InputTuple, Pj, id) from all parties, sample Val[id] $← F, and output it to Pj.
Triple: On input (Triple, ida, idb, idc) from all parties, sample two random values a, b $← F and set
(Val[ida], Val[idb], Val[idc]) ← (a, b, a · b).
Figure 6: Ideal functionality for the SPDZ preprocessing phase.
Functionality FABB
Initialize: On input (Init, F) from all parties, store F.
Input: On input (Input, Pi, id, x) from Pi and (Input, Pi, id) from all other parties, with id a fresh iden-
tiﬁer and x ∈ F, store (id, x).
Add: On command (Add, id1, id2, id3) from all parties (where id1, id2 are present in memory), retrieve
(id1, x), (id2, y) and store (id3, x + y).
Multiply: On input (Mult, id1, id2, id3) from all parties (where id1, id2 are present in memory), retrieve
(id1, x), (id2, y) and store (id3, x · y).
Output: On input (Output, id) from all honest parties (where id is present in memory), retrieve (id, y)
and output it to the adversary. Wait for an input from the adversary; if this is Deliver then output
y to all parties, otherwise output Abort.
Figure 7: The ideal functionality for the MPC arithmetic black box.
6.2 Online phase
Given the preprocessing data from FPrep, the online phase is quite straightforward, essentially the
same as in SPDZ [18], and shown in Protocol 6. Note that all of the linear computations on
the value xi − r. Since r is uniformly random in F and unknown to all other parties, it acts as a
(cid:74)·(cid:75)-shared data are performed by calling the relevant command of F(cid:74)·(cid:75).
To share an input xi by party Pi, they take a preprocessed random value (cid:74)r(cid:75) and broadcast
one-time pad to perfectly hide xi. All parties can then locally compute(cid:74)r(cid:75) + (xi − r) to obtain(cid:74)xi(cid:75).
Multiplication of two shared values(cid:74)x(cid:75) and(cid:74)y(cid:75) uses Beaver’s circuit randomization technique.
Given a multiplication triple (cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75), ﬁrst the values x − a and y − b are opened; again, the
triple values perfectly mask the inputs, so this appears uniformly random to an adversary. Given
this, a sharing of the product x · y can be locally computed by all parties using the triple.
The ﬁnal functionality that the online phase implements is the arithmetic black box, shown in
Fig. 7. The following theorem proves UC security of the protocol.
Theorem 5. The protocol ΠOnline (Protocol 6) securely implements the functionality FABB (Fig. 7)
against a static, active adversary corrupting up to n − 1 parties in the FPrep-hybrid model.
Proof. Because most of the protocol purely consists of interaction with FPrep based on value iden-
tiﬁers, the simulation in Fig. 8 is straightforward. The only values sent in the protocol are masked
openings for multiplications and outputs.
20
parties output ⊥ and abort.
1: Broadcast  ← xi − ri.
Protocol 6 Operations for Secure Function Evaluation, ΠOnline
Initialize: The parties call FPrep for the handles of a number of multiplication triples ((cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75))
and mask values (ri,(cid:74)ri(cid:75)) as needed for the function being evaluated. If FPrep aborts then the
Input: To share an input xi, party Pi takes an available mask value (ri,(cid:74)ri(cid:75)) and does the following:
2: The parties compute(cid:74)xi(cid:75) ←(cid:74)ri(cid:75) + .
Add: On input ((cid:74)x(cid:75),(cid:74)y(cid:75)), locally compute(cid:74)x + y(cid:75) ←(cid:74)x(cid:75) +(cid:74)y(cid:75).
Multiply: On input ((cid:74)x(cid:75),(cid:74)y(cid:75)), the parties do the following:
1: Take one multiplication triple ((cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75)), compute (cid:74)(cid:75) ←(cid:74)x(cid:75) −(cid:74)a(cid:75), (cid:74)ρ(cid:75) ←(cid:74)y(cid:75) −(cid:74)b(cid:75) and
2: Set(cid:74)z(cid:75) ←(cid:74)c(cid:75) +  ·(cid:74)b(cid:75) + ρ ·(cid:74)a(cid:75) +  · ρ
Output: To output a share(cid:74)y(cid:75), do the following:3
2: Call FPrep with commands Open and then Check to open and verify(cid:74)y(cid:75). If the check fails,
1: Call FPrep.Check with input all opened values so far. If it fails, output ⊥ and abort.
call FPrep.Open on these shares to get , ρ respectively.
output ⊥ and abort, otherwise accept y as a valid output.
Simulator SOnline
Initialize: The simulation of this procedure is performed by running a local copy of FPrep. It is straight-
forward because the InputTuple and Triple commands of FPrep only involve value identiﬁers.
Input: Simulate according to the following two cases:
- For inputs from an honest party, broadcast a random value.
- For inputs from a corrupt party Pi, wait for Pi to broadcast the (possibly incorrect) value
(cid:48), compute x(cid:48)
i ← ri + (cid:48) and use x(cid:48)
i as input to FABB.
Add: This local procedure requires no simulation.
Multiply: Send random values for  and ρ to the adversary and wait for it to input (cid:48) and ρ(cid:48).
(, ρ) (cid:54)= ((cid:48), ρ(cid:48)), set Fail.
If
Output: Simulate the output stage as follows:
1. If Fail is set, abort in the ﬁrst call of FPrep.Check.
2. Receive the output y from FABB and forward it to the adversary in FPrep. If it returns y(cid:48) (cid:54)= y,
input Abort to FABB and abort in the simulation of the second Check call, otherwise input
Deliver to FABB and continue.
Figure 8: Simulator for the online phase.
Since each multiplication triple is only used once, the two values opened during a multiplication
call are uniformly random in both worlds. This means that up until the output stage, the two
views of the environment in both worlds are identically distributed and so indistinguishable.
The output stage is straightforward to simulate because the Check aborts exactly if the adversary
deviated.
21
7 Performance and implementation
We ﬁrst analyse the complexity of our preprocessing protocol, and then describe our implementation
and experiments.
7.1 Complexity
We measure the communication complexity of our protocol in terms of the total amount of data
sent across the network. Note that the number of rounds of communication is constant ((cid:28) 100),
so is unlikely to heavily impact performance when generating large amounts of preprocessing data.
Throughout this section, we exclude the cost of the λ base OTs (between every pair of parties) in
the initialization stages, as this is a one-time setup cost that takes less than a second using [13].
Input tuple generation. The main cost of authenticating one party’s ﬁeld element in a k-bit
ﬁeld with Π(cid:74)·(cid:75) is the n− 1 calls to ΠCOPEe, each of which sends k2 bits, plus sending n− 1 shares of
k bits, for a total of (n − 1)(k2 + k) bits. We ignore the cost of authenticating one extra value and
performing the MAC check, as this is amortized away when creating a large batch of input tuples.
Triple generation. To generate a triple, each pair of parties makes τ k calls to FROT, followed
by sending a further τ k2 bits in step (c) and then 5 calls to ΠCOPEe for authentication (ignoring
FRand and sending the input shares as these are negligible). Since each call to FROT requires
communicating λ bits, and ΠCOPEe requires k2 bits, this gives a total of n(n − 1)(τ λk + (τ + 5)k2)
bits sent across the network.
Table 2 shows these complexities for a few choices of ﬁeld size, with λ = 128 and τ chosen