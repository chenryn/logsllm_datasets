### References

- **[So02]** Dug Song, *fragroute*. Available at: <http://www.monkey.org/~dugsong/fragroute/>
- **[WS95]** Gary R. Wright and W. Richard Stevens, *TCP/IP Illustrated: Implementation*, Addison-Wesley, 1995.
- **[Yl02]** T. Ylonen et al., "SSH Transport Layer Protocol," Internet Draft, work in progress, 2002.

### Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP'03)
1081-6011/03 $17.00 © 2003 IEEE

---

### Appendix: Full List of Active Mappings

In [HKP01], the authors employed a "header-walking" technique—inspecting each TCP and IP header field—to enumerate all ambiguities, which would then be resolved using a normalizer. In our analysis of Active Mapping as an approach to the same problem, we adopt their list of normalizations, noting for each how it fits into the Active Mapping framework. The goal is to provide a comprehensive view of how Active Mapping can (or cannot) eliminate possible TCP/IP ambiguities by examining each case and specifying the appropriate mapping technique. For more detailed explanations of some of the normalizations, refer to [HKP01]. We note that not all suggested mappings have been implemented; however, most are straightforward given the ones we have implemented and tested.

#### Disposition Column
The Disposition column in the tables below will typically contain one of three main approaches, sometimes accompanied by a brief explanation:

- **Drop**: The stateless firewall should be configured to drop this packet.
- **Map**: We can send chosen probe packets to the host to determine its policy. The most common case, "Map for drop," indicates that the packet should be sent to a host—usually as part of an open connection—to see whether it is dropped or acknowledged.
- **Ignore**: No mapping is required for this test.

There is a tradeoff between accepting malformed packets that might be useful and allowing in malicious traffic. For some normalizations, a decision must be made about whether the anomaly in question might (or empirically does) arise in normal traffic. If it is decided that the anomalous packet would not arise normally, it may be dropped by a firewall or a partial normalizer running in front of the NIDS.

### IP Normalizations

| # | IP Field | Normalization Performed | Disposition |
|---|----------|-------------------------|-------------|
| 1 | Version | Non-IPv4 packets dropped. | Drop if NIDS is not IPv6-aware, else Ignore. |
| 2 | Header Len | Drop if hdr len too small. | Drop. |
| 3 | Header Len | Drop if hdr len too large. | Drop. |
| 4 | Diffserv | Clear field. | Ignore if internal routers don’t support; add Diffserv policy to NIDS otherwise. |
| 5 | ECT | Clear field. | Map for drop. |
| 6 | Total Len | Drop if tot len > link layer len. | Map for drop. |
| 7 | Total Len | Trim if tot len > 64KB. | Map to see if data > 64k is accepted or trimmed off, but don’t trigger known bugs. |
| 8 | IP Identifier | - | Ignore. |
| 9 | Protocol | - | Ignore unless the NIDS is aware of any other protocol. |
| 10 | Frag offset | - | N/A (done by NIDS). |
| 11 | DF | Clear DF. | Map PMTU (see §3.2). |
| 12 | DF | Drop if DF set and offset > 0. | Map for drop. One plausible interpretation is: do not further fragment this packet. Some Solaris machines generate these packets; it is not disallowed by RFC791 [Po81a]. Firewall should clear if possible; otherwise Map to see if packets with zero flag set are dropped. |
| 13 | Zero flag | Clear. | Firewall should clear if possible; otherwise Map to see if packets with zero flag set are dropped. |
| 14 | Src addr | Drop if class D or E. | Drop. |
| 15 | Src addr | Drop if MSByte=127 or 0. | Drop. |
| 16 | Src addr | Drop if 255.255.255.255. | Drop. |

### UDP Normalizations

| # | UDP Field | Normalization Performed | Disposition |
|---|-----------|-------------------------|-------------|
| 1 | Length | Drop if doesn’t match length as indicated by IP total length. | Map: assume minimum of UDP or IP length taken. Also map for drop. Optionally drop if router supports it. |
| 2 | Checksum | Verify, drop if incorrect. | Map for drop. Optionally just Drop if router supports it. |

### TCP Normalizations

| # | TCP Field | Normalization Performed | Disposition |
|---|-----------|-------------------------|-------------|
| 1 | Seq Num | Enforce data consistency in retransmitted segments. | Map (see §3.2). |
| 2 | Seq Num | Trim data to window. | Map: send out-of-window segment, then segments in reverse to start of window to prevent stream reassembly until all segments have been received; check ACK sequence point. |
| 3 | Seq Num | Cold-start: trim to keep-alive. | If NIDS can send packets, send keep-alive (incorrect ACK designed to elicit the current sequence point in an ACK from the internal host). Otherwise Ignore: this is a cold-start problem. |
| 4 | Ack Num | Drop ACK above sequence hole. | Map to see if the ACK is accepted. |
| 5 | SYN | Remove data if SYN=1. | Map to see if SYN accepted if no connection established. |
| 6 | SYN | If SYN=1 & RST=1, drop. | Map for drop. |
| 7 | SYN | If SYN=1 & FIN=1, clear FIN. | See if FIN is ACKed; the sender could plausibly say, “I want to initiate a connection, but have nothing to send,” making the connection half-open right away. |
| 8 | RST | If SYN=0 & ACK=0 & RST=0, drop. | Map for drop. |
| 9 | RST | Remove data if RST=1. | Map for drop. |
| 10 | RST | Make RST reliable. | If possible, have NIDS send-keep alive to ensure that RST was accepted (reliable RST). |
| 11 | PUSH | If PUSH=1 & ACK=0, drop. | Map for drop. |
| 12 | Header Len | Drop if less than 5. | Map for drop. |
| 13 | Header Len | Drop if beyond end of packet. | Map for drop. |
| 14 | Reserved | Clear. | Map for drop. |

### ICMP Normalizations

| # | ICMP Type | Normalization Performed | Disposition |
|---|-----------|-------------------------|-------------|
| 1 | Echo request | Drop if destination is a multicast or broadcast address. | Optionally Drop. |
| 2 | Echo request | Optionally drop if ping checksum incorrect. | Optionally Drop. |
| 3 | Echo request | Zero "code" field. | Optionally Drop. |
| 4 | Echo reply | Map for drop. | Optionally drop. |
| 5 | Echo reply | Optionally drop if ping checksum incorrect. | Optionally Drop. |
| 6 | Echo reply | Drop if no matching request. | Map for drop. |
| 7 | Echo reply | Zero "code" field. | Optionally Drop. |
| 8 | Source quench | - | Ignore. |
| 9 | Destination Unreachable | Unscramble embedded scrambled IP identifier. | Drop. |

---

This revised version provides a clearer and more organized presentation of the information, ensuring it is both professional and easy to follow.