  * **PR_SET_NO_NEW_PRIVS()** ：是在Linux 3.5 之后引入的特性，当一个进程或者子进程设置了PR_SET_NO_NEW_PRIVS 属性,则其不能访问一些无法共享的操作，如setuid、chroot等。配置seccomp-BPF的程序必须拥有Capabilities 中 的`CAP_SYS_ADMIN`，或者程序已经定义了`no_new_privs`属性。 若不这样做 非 root 用户使用该程序时 `seccomp`保护将会失效，设置了 `PR_SET_NO_NEW_PRIVS` 位后能保证 `seccomp` 对所有用户都能起作用
        prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0);
如果将其第二个参数设置为1，则这个操作能保证seccomp对所有用户都能起作用，并且会使子进程即`execve`后的进程依然受到seccomp的限制。
  * **PR_SET_SECCOMP()** ： 为进程设置seccomp； 通常的形式如下
        prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&prog);
SECCOMP_MODE_FILTER参数表示设置的seccomp的过滤模式，如果设置为`SECCOMP_MODE_STRICT`，则代表严格模式；若为过滤模式，则对应的系统调用限制通过`&prog`结构体定义（上面提到过的
`struct sock_fprog`）。
**严格模式的简单示例**
在严格模式下，进程可用的系统调用只有4个，因为`open()`也被禁用，所有在进入严格模式前，需要先打开文件，简单的示例如下：
> seccomp_strict.c：
    #include 
    #include 
    #include 
    #include 
    #include 
    void configure_seccomp() {
      printf("Configuring seccomp\n");
      prctl(PR_SET_SECCOMP, SECCOMP_MODE_STRICT);
    }
    int main(int argc, char* argv[]) {
      int infd, outfd;
      ssize_t read_bytes;
      char buffer[1024];
      if (argc  \n");
        return -1;
      }
      configure_seccomp(); /* 配置seccomp */
      printf("Opening '%s' for reading\n", argv[1]);
      if ((infd = open(argv[1], O_RDONLY)) > 0) { /* open() 被禁用，进程会在此终止*/
        printf("Opening '%s' for writing\n", argv[2]);
        if ((outfd = open(argv[2], O_WRONLY | O_CREAT, 0644)) > 0) {
            while((read_bytes = read(infd, &buffer, 1024)) > 0)
              write(outfd, &buffer, (ssize_t)read_bytes);
        }
      }
      close(infd);
      close(outfd);
      return 0;
    }
代码功能实现简单的文件复制，当seccomp施加严格模式的时候运行时，seccomp 会在执行`open(argv[1],
O_RDONLY)`函数调用时终止应用程序 。
    null@ubuntu:~/seccomp$ gcc -o seccomp_strict seccomp_strict.c
    null@ubuntu:~/seccomp$ ./seccomp_strict /etc/passwd output
    Configuring seccomp
    Opening '/etc/passwd' for reading
    Killed
**过滤模式的简单示例**
通过上面的介绍和程序流，如果我们想要为一个程序施加seccomp-BPF策略，那可以分为以下几个步骤，首先定义filter数组，之后定义prog参数，最后使用prctl施加策略。
示例一：禁止execve系统调用
> seccomp_filter_execv.c:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main()
    {
    struct sock_filter filter[] = {
        BPF_STMT(BPF_LD+BPF_W+BPF_ABS,0), //将帧的偏移0处，取4个字节数据，也就是系统调用号的值载入累加器
        BPF_JUMP(BPF_JMP+BPF_JEQ,59,0,1), //判断系统调用号是否为59，是则顺序执行，否则跳过下一条
        BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_KILL), //返回KILL
        BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_ALLOW), //返回ALLOW
    };
    struct sock_fprog prog = {
        .len = (unsigned short)(sizeof(filter)/sizeof(filter[0])),//规则条数
        .filter = filter,                                         //结构体数组指针
    };
        prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0);             //设置NO_NEW_PRIVS
        prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&prog);
        write(0,"test\n",5);
        system("/bin/sh");
        return 0;
    }
示例二：
> seccomp_filter.c:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    void configure_seccomp() {
      struct sock_filter filter [] = {
        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, (offsetof(struct seccomp_data, nr))), //将系统调用号载入累加器
        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, __NR_write, 0, 1), //测试系统调用号是否匹配'__NR__write',如果是允许其他syscall，如果不是则跳过下一条指令，
        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),
        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, __NR_open, 0, 3),//测试是否为'__NR_open',不是直接退出，
        BPF_STMT(BPF_LD | BPF_W | BPF_ABS, (offsetof(struct seccomp_data, args[1]))),//第二个参数送入累加器
        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, O_RDONLY, 0, 1),//判断是否是'O_RDONLY'的方式，是则允许
        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),
        BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL)
      };
      struct sock_fprog prog = {
           .len = (unsigned short)(sizeof(filter) / sizeof (filter[0])),
           .filter = filter,
      };
      printf("Configuring seccomp\n");
      prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);
      prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog);
    }
    int main(int argc, char* argv[]) {
      int infd, outfd;
      ssize_t read_bytes;
      char buffer[1024];
      if (argc  \n");
        return -1;
      }
      printf("Ducplicating file '%s' to '%s'\n", argv[1], argv[2]);
      configure_seccomp(); //配置seccomp
      printf("Opening '%s' for reading\n", argv[1]);
      if ((infd = open(argv[1], O_RDONLY)) > 0) {
        printf("Opening '%s' for writing\n", argv[2]);
        if ((outfd = open(argv[2], O_WRONLY | O_CREAT, 0644)) > 0) {
            while((read_bytes = read(infd, &buffer, 1024)) > 0)
              write(outfd, &buffer, (ssize_t)read_bytes);
        }
      }
      close(infd);
      close(outfd);
      return 0;
    }
在这种情况下， 在这种情况下，seccomp-BPF 程序将允许使用 `O_RDONLY` 参数打开第一个调用 , 但是在使用 `O_WRONLY |
O_CREAT` 参数调用 open 时终止程序。
    $ ./seccomp_filter /etc/passwd output
    Ducplicating file '/etc/passwd' to 'output'
    Configuring seccomp
    Opening '/etc/passwd' for reading
    Opening 'output' for writing
    Bad system call
## libseccomp
项目地址：libseccomp：
基于`prctl()`函数的机制不够灵活，`libseccomp`库可以提供一些函数实现prctl类似的效果，库中封装了一些函数，可以不用了解BPF规则而实现过滤。但是在c程序中使用它，需要装一些库文件：
    null@ubuntu:~/seccomp$ sudo apt install libseccomp-dev libseccomp2 seccomp
使用示例：
> simple_syscall_seccomp.c：
    //gcc -g simple_syscall_seccomp.c -o simple_syscall_seccomp -lseccomp
    #include 
    #include 
    #include 
    int main(void){
        scmp_filter_ctx ctx;
        ctx = seccomp_init(SCMP_ACT_ALLOW);
        seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), 0);
        seccomp_load(ctx);
        char * filename = "/bin/sh";
        char * argv[] = {"/bin/sh",NULL};
        char * envp[] = {NULL};
        write(1,"i will give you a shell\n",24);
        syscall(59,filename,argv,envp);//execve
        return 0;
    }
编译运行, 在执行 execve 时程序报错退出 :
    null@ubuntu:~/seccomp$ gcc -g simple_syscall_seccomp.c -o simple_syscall_seccomp -lseccomp
    null@ubuntu:~/seccomp$ ./simple_syscall_seccomp
    i will give you a shell
    Bad system call (core dumped)
解释一下上诉代码：
  * scmp_filter_ctx : 过滤器的结构体
  * seccomp_init : 初始化的过滤状态 ,函数原型：
        seccomp_init(uint32_t def_action)
可选的def_action有：
        SCMP_ACT_ALLOW：即初始化为允许所有系统调用，过滤为黑名单模式； 
    SCMP_ACT_KILL：则为白名单模式过滤。
    SCMP_ACT_KILL_PROCESS：整个进程将被内核终止
    SCMP_ACT_TRAP:如果所有系统调用都不匹配，则给线程发送一个SIGSYS信号
    SCMP_ACT_TRACE(uint16_t msg_num)：在使用ptrace根据进程时的相关选项
    SCMP_ACT_ERRNO(uint16_t errno)：不匹配会收到errno的返回值
    SCMP_ACT_LOG：不影响系统调用，但是会被记录；
  * [seccomp_rule_add](https://man7.org/linux/man-pages/man3/seccomp_rule_add.3.html) ： 添加一条规则，函数原型为：
        int seccomp_rule_add(scmp_filter_ctx ctx, uint32_t action,int syscall, unsigned int arg_cnt, ...);
其中`arg_cnt`参数表明是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，如果仅仅需要允许或者禁止所有某个系统调用，`arg_cnt`直接传入0即可，如
`seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), 0)` 即禁用execve，不管其参数如何。
如果`arg_cnt`的参数不为0， 那 `arg_cnt` 表示后面限制的参数的个数，也就是只有调用 execve，且参数满足要求时，才会拦截
syscall 。如果想要更细粒度的过滤系统调用，把参数也考虑进去,就要设置arg_cnt不为零，然后在利用宏做一些过滤。
举个例子， 拦截 write 函数 参数大于 0x10 时的系统调用 ：
> seccomp_write_limit.c：
        #include 
    #include 
    #include 
    int main(void){
      scmp_filter_ctx ctx;
      ctx = seccomp_init(SCMP_ACT_ALLOW);
      seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(write),1,SCMP_A2(SCMP_CMP_GT,0x10));//第2(从0)个参数大于0x10
      seccomp_load(ctx);
        write(1,"1234567812345678",0x10);//不被拦截
      write(1,"i will give you a shell\n",24);//会拦截   
      return 0;
    }
编译执行
        null@ubuntu:~/seccomp$ gcc -g seccomp_write_limit.c -o seccomp_write_limit -lseccomp
    null@ubuntu:~/seccomp$ ./seccomp_write_limit
    1234567812345678Bad system call (core dumped)
其中`SCMP_A2`代表为第二个参数指定比较结构，`SCMP_CMP_GT`代表 大于(greater than)，详细内容如下。
>
> libseccmop/include/[seccomp.h.in](https://github.com/seccomp/libseccomp/blob/3f0e47fe2717b73ccef68ca18f9f7297ee73ebb2/include/seccomp.h.in)：
        ...
    ...
    /**
     * Comparison operators
     */
    enum scmp_compare {
      _SCMP_CMP_MIN = 0,
      SCMP_CMP_NE = 1,        /**< not equal */