Chapter 6
Multi-Client Inner Product
Functional Encryption
Overview of our construction.
We build the ﬁrst MCFE for inner product from standard assumptions. Our construction
goes in four steps. First, we build an MCFE for inner product that only satisﬁes a weak
notion of security, namely, one-AD-IND-weak security (see Deﬁnition 51). That is, our scheme
is only secure when there is only one challenge ciphertext per input slot i ∈ [n] and label ℓ.
Moreover, the security notion does not take into account the information that can be extracted
from a partial decryption of ciphertexts. Recall that decryption usually operates on pk, msk,
and ciphertexts cti for all slots i ∈ [n]. But it is still possible to extract information from
ciphertexts cti for some, bot not all slots i ∈ [n]. The information on the underlying messages
that is leaked by such partial decryption is not captured by the weak security notion. The
security of this construction relies on the DDH assumption, in the random oracle model. This
work has appeared in [CDG+18a].
Second, we show how to transform our one-AD-IND secure MCFE for inner product into a
many-AD-IND secure MCFE, thereby allowing an adversary to obtain many challenge cipher-
texts, using an extra layer of single-input FE for inner product.
Third, we show how to remove the aforementioned limitation in the security model, using
a layer of secret sharing on top of the original MCFE. This layer ensures that given only
ciphertexts cti for some, but not all input slots i ∈ [n], one learns no information whatsoever
it takes as input any MCFE
on the underlying messages. This transformation is generic:
with xx-AD-IND-weak security and turns it into an xx-AD-IND secure MCFE, where xx ∈
{many,one}.
It can also be seen as a decentralized version of All-Or-Nothing Transforms
[Riv97, Boy99, CDH+00]. We propose a concrete instantiation in pairing-friendly groups,
under the Decisional Bilinear Diﬃe-Hellman problem, in the random oracle model. When
applied on our one-AD-IND-weak secure MCFE, we get an one-AD-IND secure MCFE.
Fourth, we propose an eﬃcient decentralized algorithm to generate a sum of private inputs,
which can convert our many-AD-IND secure MCFE for inner product into a decentralized
many-AD-IND secure MCFE. This technique is inspired from [KDK11], and only applies to
the functional decryption key generation algorithm, and so this is compatible with the two
above conversions. We now expose our MCFE and SSE constructions in more details.
MCFE for inner product with one-AD-IND-weak security. We brieﬂy showcase the
techniques that allow us to build eﬃcient MCFE for inner product. The schemes we introduce
later enjoy adaptive security (aka full security), where encryption queries are made adaptively
by the adversary against the security game, but for the sake of clarity, we will here give an
informal description of a selectively-secure scheme from the DDH assumption, where queries
117
118
Chapter 6. Multi-Client Inner Product Functional Encryption
Scheme
Setup :
Enc(pk, eki, xi, ℓ) :
KeyGen(pk, msk, y1k···kyn) :
Dec(pk, dky1k···kyn, ct1,··· , ctn, ℓ) :
MCFE
[ABDP15]
∀i ∈ [n]:
si ←R Zm
p
eki := si
[r] := H(ℓ)
i si
return [ci] := [xi + sir]
d :=Pi y⊤
returns (y1k···kyn, d)
Discrete logarithm of
Pi[c⊤
i yi] − [r · d]
where [r] := H(ℓ)
r ←R Zp
return ([r], [ci] := [xi + sir])
∀i ∈ [n]:
si ←R Zm
p
eki := [si]
i si
d :=Pi y⊤
returns (y1k···kyn, d)
Discrete logarithm of
Pi[c⊤
i yi] − [r · d]
Figure 6.1: Comparison of the Inner-Product FE scheme from [ABDP15] and a similar MCFE
obtained by introducing a hash function H.
are made beforehand. Namely, the standard security notion for FE is indistinguishability-
based, where the adversary has access to a encryption oracle, that on input (m0, m1) either
always encrypts m0 or always encrypts m1. While for the adaptive security, the adversary can
query this oracle adaptively, in the selective setting, all queries are made at the beginning,
before seeing the public parameters.
We ﬁrst design a secret-key MCFE scheme building up from the public-key FE scheme
introduced by [ABDP15] (itself a selectively-secure scheme) where we replace the global ran-
domness with a hash function (modeled as a random oracle for the security analysis), in order
to make the generation of the ciphertexts independent for each client. The comparison is illus-
trated in Figure 6.1. Note that for the ﬁnal decryption to be possible, one needs the function
evaluation to be small enough, within this discrete logarithm setting. This is one limitation,
which is still reasonable for real-world applications that use concrete numbers, that are not of
cryptographic size.
Correctness then follows from:
Xi
c⊤
i yi − r · d =Xi
(xi + sir)⊤yi − r ·Xi
y⊤
i si =Xi
x⊤
i yi.
In [CDG+18a, Appendix B], this scheme is proven selectively secure under the DDH as-
sumption. To obtain adaptive security, we adapt the adaptively secure inner product FE from
[ALS16] in the same manner than described for the FE from [ABDP15].
Secret Sharing Encapsulation. AS explained, in order to deal with partial ciphertexts,
we introduce a new tool, called Secret Sharing Encapsulation (SSE). In fact, the goal is to
allow a user to recover the ciphertexts from the n senders only when he gets the contributions
of all of them. At ﬁrst glance, one may think this could be achieved by using All-Or-Nothing
Transforms or (n, n)-Secret Sharing. However, these settings require an authority who operates
on the original messages or generates the shares. Consequently, they are incompatible with our
multi-client schemes. Our SSE tool can be seen as a decentralized version of All-Or-Nothing
Transforms or of (n, n)-Secret Sharing: for each label ℓ, each user i ∈ [n] can generate, on his
own, the share Sℓ,i. And, unless all the shares Si,ℓ have been generated, the encapsulated keys
are random and perfectly mask all the inputs.
We believe that SSE could be used in other applications. As an example, AONT was used
in some traitor tracing schemes [KY02, CPP05]. By using SSE instead of AONT, one can get
decentralized traitor tracing schemes in which the tracing procedure can only be run if all the
authorities agree on the importance of tracing a suspected decoder. This might be meaningful
in practice to avoid the abuse of tracing, in particular on-line tracing, which might break the
privacy of the users, in case the suspected decoders are eventually legitimate decoders.
6.1 MCFE with one-AD-IND-weak security
119
MCFE with one-AD-IND-weak security
Here we present a multi-client scheme MCFE for inner product over Z, that is, for the set of
functionalities {F m,X,Y
: Kn ×X1 ×···×Xn → Z, with Kn := [0, Y ]mn,
for all i ∈ [n], Xi := [0, X]m, Z := Z, such that for any (y1k···kyn) ∈ Kn, xi ∈ Xi, we have:
}n∈N deﬁned as F m,X,Y
n
n
F m,X,Y
n
(cid:0)(y1k···kyn), x1, . . . , xn(cid:1) =
nXi=1hxi, yii.
We prove its one-AD-IND-weak security under the Dk(p) in prime-order group (a particular
case being the DDH assumption). Note that we do not require pairing-friendly groups. As
explained in the introduction of this chapter, this scheme will be used to build many-AD-IND
secure MCFE for inner product. The scheme is described in Figure 6.2.
n
):
:=
Setup(1λ, F m,X,Y
(G, p, P ) ← GGen(1λ),
G
H : {0, 1}∗ → Gk+1 be a full do-
main hash function modeled as a random
oracle.
For all
eki := Si, pk = G, msk := {Si}i∈[n].
Return (pk, msk, (eki)i∈[n]).
i ∈ [n], Si ←R Zm×(k+1)
p
,
Enc(pk, eki, xi, ℓ):
Compute [r] := H(ℓ).
Return [ci] := [xi + Sir].
i yi
KeyGen(pk, msk, (y1k···kyn)):
d :=Pi∈[n] S⊤
Return dky1k···kyn := (y1k···kyn, d).
Dec(cid:0)pk, dky1k···kyn, [c1], . . . , [cn], ℓ):
Parse dky1k···kyn := (y1k···kyn, d).
Compute [r] := H(ℓ).
Return the discrete log of Pn
i=1[c⊤
[r⊤d].
i yi] −
Figure 6.2: Private-key, one-AD-IND-weak secure, multi-client FE scheme MCFE = (Setup, Enc,
KeyGen, Dec) for the class F m,X,Y
, one-AD-IND-weak secure under the Dk(p)-MDDH assumption in G.
n
Correctness of MCFE follows from:
i yi] − [r⊤d] =Xi
Xi
[c⊤
[(xi + Sir)⊤yi] − [r⊤Xi
S⊤
i yi] =Xi
[x⊤
i yi].
We knowPihxi, yii ≤ n·m·X·Y , which is bounded by a polynomial in the security param-
eter. Thus, decryption can eﬃciently recover the discrete log: Pihxi, yii mod p =Pihxi, yii,
where the equality holds sincePihxi, yii ≤ n · m · X · Y ≪ p.
Theorem 15: one-AD-IND-weak security
The scheme MCFE from Figure 6.2 is one-AD-IND-weak secure assuming the Dk(p)-
MDDH assumption in G, in the random oracle model.
Proof of Theorem 15. We proceed via a series of games Gi for i ∈ {0, . . . , 2}, described in
Figure 6.3. The transitions are summarized in Figure 5.5. Let A be a PPT adversary. For any
game G, we denote by AdvG(A) the probability that the game G outputs 1 when interacting
with A.
According to Deﬁnition 21, we have:
Advone-AD-IND-weak
MCF E,A
(λ) = |AdvG0(A) − AdvG4(A)|.
120
Chapter 6. Multi-Client Inner Product Functional Encryption
Games G0, G1, G2, (G3.q.1)q∈[Q+1], (G3.q.2, G3.q.3)q∈[Q] , G4
G := (G, p, g) ← GGen(1λ), pk := G. For all i ∈ [n], Si ←R Zm×(k+1)
A ← Dk(p), a⊥ ←R Zk+1
α ← AOEnc(·,·,·),OKeygen(·),OCorrupt(·),RO(·)(pk).
Return α if Condition 1 and Extra condition from Deﬁnition 25 of one-AD-IND-weak security
are satisﬁed, 0 otherwise.
, eki := Si, msk := {Si}i.
\ {0} s.t. A⊤a⊥ = 0
p
p
RO(ℓ):
// G0, G1 , G2, G3.q.1, G3.q.2, G3.q.3 , G4
[uℓ] := RF(ℓ) ,
[uℓ] := H(ℓ),
On the q’th (fresh) query: [uℓ] := A · RF′(ℓ) + RF′′(ℓ) · a⊥
Return [uℓ].
[uℓ] := [A · rℓ], with rℓ := RF′(ℓ)
OEnc(i, (x0
i ), ℓ):
// G0, G1, G2, G3.q.1, G3.q.2, G3.q.3 , G4
i + Siuℓ]
i , x1
[uℓ] := RO(ℓ),
[ci] := [x0
If [uℓ] is computed on the j-th RO-query, for j < q: [ci] := [x1
If [uℓ] is computed on the q-th RO-query: [ci] := [x1
[ci] := [x1
Return [ci]
i + Siuℓ]
i + Siuℓ]
i + Siuℓ]
OKeygen(y): ReturnPi S⊤
OCorrupt(i): Return Si.
i yi.
//G0, G1, G2, G3.q.1, G3.q.2, G3.q.3, G4
// G0, G1, G2, G3.q.1, G3.q.2, G3.q.3, G4
p, and Z∗
Figure 6.3: Games for the proof of Theorem 15. Here, RF, RF′, RF′′ are random functions
onto Gk+1, Zk
p, respectively, that are computed on the ﬂy. In each procedure, the
components inside a solid (dotted, gray) frame are only present in the games marked by a solid
(dotted, gray) frame. Note that A’s queries must satisfy the condition from Deﬁnition 25,
including the extra condition, since we are only proving one-AD-IND-weak security.
Game G1: we replace the hash function H by a truly random function onto G2, that is
computed on the ﬂy. This uses the pseudorandomness of the hash function H. Namely, in the
Random Oracle Model:
AdvG0(A) = AdvG1(A).
Game G2: here, the outputs of RO are uniformly random in the span of [A] for A ← Dk(p).
This uses the Q-fold Dk(p)-MDDH assumption, where Q is the number of call to RO(·), which
tightly reduces to its 1-fold variant, using the random-self reducibility (see Lemma 1). Namely,
there exists a PPT adversary B such that
AdvG1(A) − AdvG2(A) ≤ AdvDk(p)-mddh
G,B
(λ) +
1
p − 1
.
Note that we use the fact that the Condition 1 and Extra condition from Deﬁnition 25
of one-AD-IND-weak security are eﬃciently checkable. This allows adversary B to decide
eﬃciently whether to forward the output α of A, or 0 (in case the conditions are not satisﬁed)
to its own experiment.
Game G3.1.1:
is exactly game G2. Thus,
AdvG2(A) = AdvG3.1.1(A).
6.1 MCFE with one-AD-IND-weak security
121
From game G3.q.1 to game G3.q.2: we ﬁrst change the distribution of the output of RO
on its q’th query (note that two queries with the same input are counted once, that is, we
only count fresh queries), from uniformly random in the span of [A] to uniformly random over
Gk+1, using the Dk(p)-MDDH assumption. Then, we use the basis (Aka⊥) of Zk+1
, to write a
uniformly random vector over Zk+1
p, and u2 ←R Zp. Finally,
we switch to Au1 + u2 · a⊥ where u1 ←R Zk
p, which only changes the adversary
view by a statistical distance of 1/p. Thus, there exists a PPT adversary B3.q.1 such that
as Au1 + u2 · a⊥, where u1 ←R Zk
p, and u2 ←R Z∗
p
p
AdvG3.q.1(A) − AdvG3.q.2(A) ≤ AdvDk(p)-mddh
G,B3.q.1
(λ) +
1
p
.
Once again, we rely on the fact that Condition 1 and Extra condition from Deﬁnition 25
of one-AD-IND-weak security are eﬃciently checkable.
From game G3.q.2 to game G3.q.3: We prove:
AdvG3.q.2(A) = AdvG3.q.3(A).
Note that if the output of the q’th fresh query to RO is not used by OEnc, then the games
G3.q.2 and G3.q.3 are identical. We consider the case where the output of the q’th fresh query
to RO is used by OEnc. We show that we also have AdvG3.q.2(A) = AdvG3.q.3(A) in that case,
in two steps.
In Step 1, we show that for all PPT adversaries B3.q.2 and B⋆