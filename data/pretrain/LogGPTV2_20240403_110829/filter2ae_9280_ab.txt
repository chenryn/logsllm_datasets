在这些场景中，如果程序本身使用的 Chromium 存在漏洞，且访问的 URL 可被外部控制，那么就可能受到攻击最终导致服务器被外部攻击者控制。
以常见的使用 Chrome headless 的爬虫为例，如果在一些网站测试投放包含 exploit
的链接，有概率会被爬虫获取，相关爬取逻辑的通常做法是新建 tab 导航至爬取到的链接。此时，如果爬虫依赖的 chromium
应用程序更新不及时，且启动时设置了 --no-sandbox 参数，链接指向页面内的 exploit 会成功执行，进而允许攻击者控制爬虫对应的服务器。
为何 --no-sandbox 会如此泛滥呢？我们不妨来看一下，当我们在 ROOT 下启动 Chrome，会有什么样的提示呢？
![
](https://images.seebug.org/content/images/2021/07/62a2344d-2fcd-487f-ab9c-9e6fa5a5027d.png-w331s)
我们会得到 _Running as root without --no-sandbox is not supported_ 的错误提示，且无法启动
Chrome；
这对于以研发效率和产品功能优先的研发同学来说无异于提示 “请使用? --no-sandbox 来启动 Chrome”, 应用容器化的进程也加剧了使用
ROOT 用户启动应用程序的情况。
你不得不创建一个新的普通用户来启动 Chrome 服务，例如在 Dockerfile 里加入 _**RUN** __useradd chrome_ 和
_**USER** chrome_ 语句；
有些基于 Chrome 的著名第三方库甚至会在代码中隐形植入关闭 sandbox 的代码，当研发同学在 ROOT 下启动应用程序时，第三方库会默认关闭
sandbox，添加 --no-sandbox 参数，例如 Golang 第三方 package Chromedp 的代码：
此时，对于开发同学来说使用 --no-sandbox 参数甚至是无感的，直至自己的容器或服务器被攻击者入侵控制。
即使研发同学有启用 sandbox 来避免安全风险的意识，在容器化的应用内启动 chrome 也是不易的；为镜像创建一个新的非 ROOT
用户并非唯一的条件，Chrome sandbox 需要调用一些特定的 syscall 或 linux capabilities 权限用于启动 sandbox
逻辑，同时容器镜像需要打入 chrome-sandbox 二进制文件并写入环境变量以供 Chrome 进程找到 sandbox 程序。若未对 Chrome
容器进行特定的权限配置，chrome 将输出 _Operation not permitted_ 报错信息并退出。
所以，网络上有大量的文档和博客推荐启用 --no-sandbox 来解决 Chrome headless 的使用问题，这也间接助长了 --no-sandbox 参数这种错误用法的泛滥：
我们将在后面的章节里详细为您讲解 Chrome Sandbox 在容器以及容器集群中方便快捷且安全合理的部署解决方案。
##### **3.1.2 浅议攻击方式**
未知攻焉知防？虽然在已有 Exploit 的情况下进行漏洞利用并不困难，但知悉漏洞利用的流程和攻击行为有助于我们更好的构建安全能力。
以下以最近的 CVE-2021-21224 漏洞为例，当服务端上程序使用的 chromium 版本存在漏洞时，且未开启
Sandbox，可以利用这个漏洞来获取服务器的权限。
首先攻击者使用 metasploit 生成 shellcode，这里假设 chromium 是在 linux 上运行且架构为
x64。同时，考虑到爬虫运行结束后往往会结束浏览器进程，通过设置 PrependFork 为 true 可以保证 session 的持久运行。
生成 shellcode 后监听端口：
实战中，可以通过投递带 exploit 的链接到各个网站上，这里假设攻击者控制的服务器正在被爬取或者正在被渗透测试人员的扫描器扫描：
成功获取到爬虫 / 扫描器的服务器 session：
meterpreter 的进程是 fork 后的 chrome 子进程：
![
](https://images.seebug.org/content/images/2021/07/afd74e9e-1ebf-4856-a7b3-4aaff1d224b8.png-w331s)
可以猜想，不仅是各种内嵌浏览器的客户端程序易受chromium相关漏洞影响，可能有相当多的服务端程序也暴露在chromium
0Day/Nday的攻击下。chromium漏洞将会成为企业防御边界的新的突破口，而这个突破口是自内而外的，相比开放端口在外的服务漏洞，这种攻击可能会更隐蔽。
作为防御方，我们也可以利用chromium漏洞来反制一些攻击者，如果攻击者安全意识较差或者使用的工具安全性不强，防御方在服务器上托管带有exploit的网页，攻击者的爬虫/扫描器扫到了这些网页就可能被反制攻击。
#### 3.2 客户端
在面对Chromium组件风险时，客户端场景往往首当其冲。通常，其风险成立条件有两点：1. 使用了存在漏洞的Chromium组件；2.
可以指定Webview组件访问特定的网站地址。
##### 3.2.1 移动客户端
目前，移动客户端主要分两大“阵营”：安卓和iOS，最大相关风险是Webview类组件。前者 Android System
Webview是基于Chromium源代码开发的，所以当1 Day披露时，需要及时跟进影响；iOS
App一般会使用WKWebView和JavaScriptCore，Chromium 1 Day影响iOS应用的可能性较低。
1）客户端内置 Webview 浏览器窗口
除了使用系统自带的 Webview 组件，另外一种比较常见且更容易引起注意的方式是使用应用内置或独立于系统之外的浏览器组件；此时，应用会选用
Chromium 体系的概率较高。应用选择自己内置并维护浏览器组件的原因有很多，例如以下几类需求：
  * 在浏览器内核层回收更多用于 Debug 的客户端信息；
  * 支持如夜间模式、中文优化等用户需求；
  * 支持更多的视频格式和文件格式；
也有应用为了应对此前 App Store 在 WWDC 大会提出的限制（即 App Store 中的所有应用都必须启用 App Transport
Security 安全功能并全量走 HTTPS），使用改过的 Webview 组件曲线救国，以便达到 App Store 的合规需求。
也因为应用自己维护所使用的浏览器组件，当系统的 WebView 跟随系统升级而修复漏洞时，应用所使用的的浏览器组件并不跟着更新；
作为应用开发者自己维护的硬分支，Chromium
不断的功能变更和漏洞修复补丁都需要应用开发者自行合并和兼容；这不仅需要硬核的浏览器研发能力也需要日以继夜不断的坚持。
再加上，无论在移动端还是桌面客户端，在使用应用内 WebView 时为了更加轻便和简洁，浏览器组件多是以单进程的方式启动；
而在我们之前对 Sandbox 技术的介绍中，浏览器 Sandbox 和单进程 WebView 组件显然是冲突的；
这也使得历史上关闭 Sandbox 能力的客户端程序，在漏洞修复过程中，对于开启 Sandbox 的修复操作存在历史包袱。
无论如何，我们始终不建议移动端应用的 WebView 组件可以由用户控制并打开开放性的页面；
这会使得应用内加载的内容可能存在不可控或不可信的内容。WebView 组件可以打开的 URL，应该用白名单进行限制；特别是可以用 Deeplink
打开并且存在 URL 参数的 WebView。
##### **3.2.2 桌面客户端**
许多桌面客户端应用也是基于 Chromium 构建的。一类是基于 Chromium 定制的浏览器产品、或内置基于 Chromium 开发 Webview
组件的桌面客户端应用；另一类是基于 Electron 构建的桌面客户端应用。
前者与传统 Chrome 浏览器或是嵌入在移动客户端的 Webview 组件类似，如果未开启沙箱保护，面临很大的风险。而后者 Electron 则是在评估
Chromium 漏洞攻防利用场景时，比较容易被忽视的一块。Electron 基于 Chromium 和 Node
构建，其主要特性之一就是能在渲染进程中运行 Node.js。
目前有许多客户端工具基于它开发，涉及：VS Code、Typora、Slack 等。默认情况下，渲染器进程未受沙箱保护，这是因为：大多数 Node.js 的
API 都需要系统权限，没有文件系统权限的情况下 require() 是不可用的，而该文件系统权限在沙箱环境下是不可用的，但功能性进程受沙箱保护。?
Electron 除面临渲染引擎本身的安全风险外，主要风险源自于其本身的功能特性——nodeIntegration。当该选项被设置为 true，表示
renderer 有权限访问 node.js API，进而执行 “特权” 操作。这时如果攻击者能自由控制渲染的页面内容，则可直接实现 RCE。
### **IV. 风险收敛方案**
回到我们今天的主题： **修复和防御** 。
如上我们知道，Chromium
的安全问题是方方面面的，各类安全风险也会在不同的场景上产生，那么如何收敛就是企业安全建设永恒的话题；最后我们想分享我们的安全实践经验，力求解答在安全实践中我们遇到的以下几个问题，如：
Chrome 组件的漏洞都有哪些？Google 又是如何跟进它们的？我们又该如何评估和检测 Chrome 持续更新过程中所公开的 1Day
风险？最终如何修复？Linux 容器中开启 Chrome 沙盒的最佳实践又是什么？
#### **4.1 风险监测和评估**
##### **4.1.1 风险情报**
有两个渠道可以及时了解到 Chromium 漏洞披露情况：
**1) Chromium 工单系统**
该平台上收录了所有已公开的 Chrome 安全 Issue，可借助特定关键词检索。如检索已公开的高风险安全问题，可访问：
[https://bugs.chromium.org/p/chromium/issues/list?can=1&q=Security_Severity%3DHigh%20&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified&sort=-modified&num=100&start=](https://bugs.chromium.org/p/chromium/issues/list?can=1&q=Security_Severity%3DHigh%20&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified&sort=-modified&num=100&start=)
**2) Chrome 发布日志**
Chrome 稳定版本发布消息会在 
上发出，和稳定版本发布消息一起的还有该版本做了哪些安全更新以及对应漏洞的奖金。
事实上，甲方安全人员还可以借助一些技巧，提前了解安全问题的修复细节。
Gerrit 是基于 git 的一款 Code Review 平台，chrome team 使用该平台进行 code
review：。该平台上的主题会关联对应的 issue
id，通过对应修复 commit 的主题可以了解到 issue 的修复方案和代码。
chromium 使用  对 chromium 的 bug 进行跟踪。可以用短链来访问对应的
issue，例如 issue 1195777 可以用该链接访问：。
chromium 安全问题对应关联的 issue 在修复期间并且在补丁发布后也不一定是可见的，官方给出的披露原则是在补丁广泛应用后才会开放 issue
的限制。但是 Gerrit 上对 issue 修复代码的 code review 和关联信息是一直可见的，我们如果想了解某个 issue
具体的修复代码和方案可以在 Gerrit 上找到。
以 issue 1195777 为例，在 Gerrit 使用 bug 搜索关键字可以搜到对应 commit 的 code review 主题：