droid platform to enable background apps to stealthily request
permissions from illegitimate contexts. To elaborate, Android
provides mechanisms that give apps the ability to move within
the activity stack. In addition, activities can be made transpar-
ent, simply by setting a translucent theme. By combining both
of these mechanisms, a transparent background app can be
surreptitiously brought to the foreground for a limited amount
of time, only to immediately request a permission. Once the
request is completed by the user, the app can be moved to
the back of the task stack again. This way, a background app
gains the ability to request permissions without providing any
real context as the user is presented only with the context of
the legitimate foreground app due to the transparency of the
background app that is overlaid on top. It is important to note
that permission requests freeze the UI thread of the requesting
app so nothing will happen if the user clicks on the screen to
interact with the app itself on Android ≤10. This way, users
will not have the opportunity to detect the mismatch between
the supposed and actual foreground app by simply trying to
interact with the app. On Android 11, the permission dialog
disappears if the user clicks somewhere else than the dialog
itself. In this case, the adversarial app can simply move to the
background following the user click.
Bianchi et al. discusses some of the ways they discovered
how a background app can be moved to the foreground [6].
Here, we discuss some of these techniques that were previ-
ously discussed as well as some other ways we discovered
that could achieve the same goal.
• startActivity API. Android provides the startActivity
API to start new activities, as the name suggests. According
to Bianchi et al., using this API to start an activity from a ser-
vice, a broadcast receiver or a content provider will place the
activity at the top of the stack if NEW_TASK ﬂag is set. How-
ever, we found that simply calling startActivity without
setting this ﬂag in these components works similarly in recent
Android versions. In addition, they found that starting an activ-
ity from another activity while setting the singleInstance
ﬂag also places the new activity on top of the stack. We found
that setting this ﬂag is not necessary to achieve this anymore,
even simply starting an activity from a background activity
seems to bring the app to the foreground.
• moveTaskTo APIs. moveTaskToFront() API can be used
to bring an app to the foreground. This API requires the
REORDER_TASKS permission, which is of normal protection
level and is automatically granted at installation time. In addi-
tion, moveTaskToBack() API can be used to bring apps to the
back of the task stack. In this case, we observed that the app
continues to run in the background as Activity.onStop()
is not called unless the activity actually ﬁnishes its job.
• requestPermission API. According to Android’s ofﬁcial
developer guides, requestPermission(String[], int)
API can only be called from components with user inter-
face such as activities and fragments. This is in line with
the main goal of runtime permissions, to provide users a
sense of situational context before they make decisions re-
garding permissions. A similar version of this API with dif-
ferent parameters is also implemented in the Android sup-
port APIs to provide forward-compatibility to legacy apps.
This version, requestPermission(Activity, String[],
int), takes an extra activity parameter and requests the per-
mission from the context of this activity. This support API
makes it possible to request permissions from non-UI compo-
nents, such as services and broadcast receivers. In addition,
if this API is called from a non-UI component or from an
activity running in the background, the app will be automati-
cally brought to the foreground for the request on Android ≤
9. On Android 10 and 11, this API does not bring background
activities to the foreground.
Identity guarantee. According to this security guarantee,
users should be made aware of the identity of a requesting
app. Android attempts to achieve this by displaying the app’s
name in the permission dialog. Android allows apps to be
started automatically via the intent mechanism for IPC with-
out requiring user’s approval or intervention. This can create
an issue for permission requests since the user might not be
able to tell the identity of an automatically-launched app if
it were to immediately request a permission, as they have
not personally started or been interacting with this app. In
order to overcome this issue, Android displays the name of
the requesting app in permission dialogs in order to help users
quickly identify the app owning the current context.
Even though this mechanism initially seems like an effec-
tive solution to the app identiﬁcation problem for runtime
permissions, it is insufﬁcient since app names are in fact not
guaranteed by the Android ecosystem to uniquely identify
apps on user devices. Each Android app listed on the Google
Play (GP) store has a Google Play listing name that is dis-
played to the user while browsing this store, as well as an
internal app name that is deﬁned in the resource ﬁles of the
app’s apk and displayed when the user is interacting with
the app on their device, including in the permission dialogs.
Google Play does enforce certain restrictions on GP listing
names. For example, it produces warnings to developers when
their GP listing name is too similar to that of another app and
does not allow the developers to publish their apps in this
case, in an attempt to prevent typo-squatting and spooﬁng that
can be used in phishing attacks. However, the same kind of
scrutiny does not seem to be shown when it comes to internal
app names as the Android ecosystem does not enforce any
418    29th USENIX Security Symposium
USENIX Association
rules on these names. Our observation is that 1) the internal
name of an app can be vastly different than the app’s GP list-
ing name and 2) multiple apps can share the same app name,
even when installed on the same device. For example, we
have successfully published an app on Google Play, where the
internal name of our app was “this app” even though the GP
listing name was completely different, a case we will make
use of in our attacks as we will explain in more detail in the
rest of this section. We were also able to spoof the name of
a popular app (i.e., Viber) and successfully release our app
with this app name on GP. In short, the Android ecosystem
does not perform any veriﬁcation on the app names shown in
runtime permission dialogs to ensure their validity.
4.2 False Transparency Attacks
By combining the ability of apps to move within the task
stack in disguise and Android’s lack of app name veriﬁcation,
we built the false transparency attacks, where a transparent
background app temporarily moves to the foreground while
impersonating another, possibly more trustworthy app that
was already in use by the user (i.e., in the foreground) and
requests a permission it sees ﬁt. After the user either responds
to the permission request, the attack app immediately moves
to the background again to evade detection so that the user
can continue interacting with the legitimate foreground app
without noticing they have been attacked. We veriﬁed that this
is a general class of attacks that affects all Android versions
that support runtime permissions (Android 6-11).
A demonstration of our attack including the state of the
task stack before and during the attack can be observed in
action in Figure 1. Figure 1a displays the task stack imme-
diately before the attack takes place. As can be seen, Viber,
a popular communication app with millions of downloads,
is on the top of the task stack (shown in the bottom) and at
the back of the task stack there is another app also called
Viber, representing the attack app running in the background
targeting Viber for permissions. Here, it is worth noting that
we are showing the real content of the task stack for demon-
stration purposes and the attack app can in fact be easily
hidden from the task stack in order to evade detection by the
user, by utilizing the finishAndRemoveTask() API or the
android:excludeFromRecents tag in the Android manifest
ﬁle as discussed in Section 2.2.
At the time of the attack, the user will experience a user
interface (UI) that is similar to the one in Figure 1b. Here, the
app prompting the user for a permission appears to be Viber,
as both the UI displayed underneath the permission dialog
and the app name in the dialog indicate the app to be Viber.
However, the request is, as a matter of fact, triggered from
the transparent attack app that surreptitiously made its way
to the foreground and covered Viber. This can be observed
by displaying the state of the task stack at the time of the
attack, as shown in Figure 1d. As can be seen, the forged
Viber app that belongs to the attacker is in fact at the forefront
of the task stack (seen at the bottom) and the real Viber app
is immediately behind it at the time of the attack, creating
a confusion about the origin of the permission request for
users due to the identicalness of the shown user interface to
that of Viber. Additionally, the attacker was able to spoof
the internal app name of Viber in the permission dialog to
further mislead the user into thinking the permission request
indeed originated from Viber, as shown in Figure 1b. All in
all, the contextual cues given to the user in this attack scenario
(i.e., UI and app name) appear to be indistinguishable from a
benign scenario where Viber is the legitimate app requesting
a permission, from the perspective of device users.
We envision false transparency attacks to be useful for
adversaries in two main scenarios. First, when users do not
consider an app to be very trustworthy, they are much less
likely to grant a permission, as shown by previous work [2].
Hence, an adversary without much reputation can utilize false
transparency attacks to pose as a trusted app to obtain a per-
mission. Second, in some cases, it might be nearly impossible
for the adversary to provide a reasonable explanation to the
user why their app might need a certain permission. For ex-
ample, a malicious QR code app might also have the goal
of getting user’s contact list. The app can directly ask for
the dangerous permission, but this may make the user suspi-
cious: the user may deny the permission request or possibly
even uninstall the app. In this case, false transparency attacks
would give the adversary the opportunity to pose as a trusted
app that is known to require this permission for its utility (e.g.,
Viber requiring contacts) without arousing suspicion.
Plausible and realistic attacks. We intend for our attacks
to serve as a platform for adversaries to conveniently obtain
any set of dangerous permissions by exploiting users’ trust in
other apps without arousing suspicion. With each request, the
adversary is essentially exposing themselves to the user and
is risking the possibility of alerting the user to be suspicious
and take action accordingly (e.g., scan their apps to uninstall
questionable ones). Therefore, it would be in the adversary’s
best interest to request permissions sparingly, only when the
user is less likely to be alarmed due to the permission request.
In order to achieve this, we utilize several strategies as we
will now explain. We verify the validity of these strategies
with a user study which we will present in detail in Section 6.
First, users are accustomed to being asked for permissions
by an app running in the foreground under the runtime per-
mission model. We show with our user study that users are
indeed not very receptive of requests coming from no apparent
foreground app. Hence, we do not request permissions when
there is no app in the foreground. For this purpose, we utilize
the getRunningTasks() API, which previously provided the
identity (i.e., package name) of the app in the foreground, but
was deprecated in Android 5 due to privacy reasons. However,
we discovered that this API still provides limited amount
USENIX Association
29th USENIX Security Symposium    419
(a) Pre-attack task stack
(b) Single-target attack
(c) Multi-target attack
(d) Task stack during the attack
Figure 1: Background app requesting a permission pretending to be the foreground app (Viber).
of information that can be utilized to detect the existence
of a foreground app. More speciﬁcally, on Android 5-8 this
API outputs com.google.android.apps.nexuslauncher
if there is no app in the foreground, indicating the nexus
launcher. Otherwise, it outputs the package name of the app
calling the API (whether this app is in the foreground or not),
indicating the existence of a running foreground app. Starting
from Android 9, this API reports the most recent one between
the nexus launcher and the caller app’s own package name,
again without revealing other foreground apps to the caller. In
order to reliably use this information to detect the existence of
an app in the foreground on Android 9 and later, the adversary
ﬁrst needs to brieﬂy come to the foreground using one of the
techniques described in Section 4.1 while using a transparent
UI to evade detection then run getRunningTasks() after
going back to the background. This ensures that adversary’s
app is always more recent than the nexus launcher when there
is an app in the foreground.
Second, previous work has shown that when users make
decisions to grant or deny permissions, they consider the rel-
evance of a requested permission to the functionality of the
app. If they think the app should not require a certain per-
mission for its operation or it should still work without that
permission, they generally choose to not grant the permis-
sion [2,3]. Taking this observation into account, in our attacks
we avoid requesting permissions that are certainly irrelevant to
the functionality of the foreground app because such requests
will likely result in the user denying the permission. Here, we
consider a permission to be relevant to the functionality of an
app only if the app declares this permission in its manifest ﬁle
and intends to use it. In order to identify these relevant permis-
sions, we ﬁrst need a mechanism to detect the identity of the
victim app in the foreground (i.e., its package name) so that
we can determine its declared permissions. For this purpose,
we utilize ProcHarvester [7], which uses machine learning
techniques to identify the public parts of Android’s proc ﬁle
system (procfs) that can be used to infer the foreground app
on Android, even when access to procfs is mostly restricted by
Google due to privacy reasons. We modify ProcHarvester to
ﬁt realistic attack scenarios and implement real-time inference
of time series on top of ProcHarvester to detect the identity of
the foreground app in real time. After obtaining the package
name of the foreground app, we can use this information to
query PackageManager to obtain the permissions required
by this app and request only those permissions in our attacks.
Section 2 explains how this information can be obtained. The
details of our foreground app inference implementation will
be described in Section 5.
Third, users’ previous decisions in the context of permis-
sions affect how the victim app behaves in terms of future per-
mission requests. Hence, we argue that these decisions should
also be taken into account by the attacker to avoid alarming
the users. In particular, we argue that an attacker blindly re-
questing one of the permissions declared in a victim app’s
manifest ﬁle can still arouse suspicion due to the possibility
of the victim itself also requesting this permission during the
same launch/session. More speciﬁcally, this can happen if
an attacker requests a permission that was not granted to the
victim (i.e., never requested or denied previously) and the vic-
tim also requests this permission during the same launch for
its current utility, causing back-to-back permission requests.
Please note that the same thing is not possible for when attack-
ers request granted permissions because victim apps will not
be able to re-request permissions that were granted to them
due to the restrictions on the Android platform (i.e., Permis-
sion dialogs for granted permissions will not be shown.). We
420    29th USENIX Security Symposium
USENIX Association
show with our user study that multiple requests in a single
launch within a short time period indeed raise suspicion in
users, who then consider investigating the underlying reason
and taking action. For example, users might get suspicious of
the requesting app and remove it, which causes the attacker
to lose a victim app. They can also get suspicious of other
apps on their devices and consequently discover and uninstall
the attacker, or they can mistakenly put the blame on another
victim app and remove it instead. They can also become sus-
picious of the operating system itself and attempt to reformat
their device, by which the attacker faces the possibility of
being swiped off the device along with its victims. Since the
attacker has no control of when the victim can request permis-
sions, it is safer for them to target granted permissions which
they know cannot be requested during the same session to
minimize the risks. Additionally, we show with our user study
that the likeliness of a user granting a previously-granted per-
mission is statistically similar to that of granting a permission
for the ﬁrst time; hence, the adversary is not compromising
effectiveness with this choice. We implement this strategy in
our attacks and only request permissions granted to victims.
Previous work has also shown the reputation of an app de-
veloper to be another major decision factor for users to grant
permissions, consistently for all permissions [2]. For this rea-
son, we recommend that the attacker utilizes victim apps that
are highly-popular and have gained users’ trust in order for
the attacks to be successful. It is worth noting that we have
also devised a way for adversaries to expand their attacks to
multiple victim apps simultaneously by utilizing the lack of
app name veriﬁcation against Google Play (GP) listing names.
Such a multi-target attack scheme can be desirable over a
single-target scheme when the attacker needs multiple permis-
sions that can only be provided by a combination of victim
apps, in line with our idea of our attacks providing an attack
platform for adversaries to obtain any of their desired per-
missions. In addition, this scheme gives the adversary more
chances to deploy their attacks, as there are now multiple
apps that can be targeted. To elaborate, the attacker chooses a
name that can logically represent any foreground app when