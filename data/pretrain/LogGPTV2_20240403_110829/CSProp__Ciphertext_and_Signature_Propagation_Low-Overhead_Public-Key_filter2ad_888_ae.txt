36
48
Key Size (bits) Latency (ms) Memory Footprint (bytes) EC (mJ) Latency (ms) Memory Footprint (bytes) EC (mJ)
512
1024
2048
634
1665
3502
320
552
1006
540
828
1404
915
2135
4331
441
738
1206
882
1512
2016
Table 6: Proﬁle of the Data Exchanged Between an Iot Device and a Client in a Wireless Home Network
IoT Device
Operation
Total # of Captured Packets DNS RRsets
TLS Handshake Encryption Decryption
Signing Verifying Encryption Decryption
RSA
AES 128-bit
WYZE CAM V2 (camera)
Setup
Pairing
Live Streaming (2 Hrs)
897
25
1460282
68
2
108933
32
3
29535
168
9
30191
0
0
0
104
0
318
90
2
31239
232
5
964083
180
7
313664
introduce mCrypton [74], following the architecture of Cryp-
ton, but reducing key sizes [73]. Similarly, the Scalable Secu-
rity with Symmetric Keys (S3K) scheme [81], which is a key
management architecture, was proposed to provide a scalable
energy efﬁcient mechanism to establish trust relationships
among entities in IoT environments. These schemes depend
on pre-shared keys which might increase the risk to key dis-
closure and endanger the security services (this is not required
in CSProp). Another proposal is Hummingbird [46] which
uses a hybrid structure of block and stream ciphers with 16-bit
block size and 256-bit key length; an improved version of
this work has been developed by Engels et al. [47]. However,
Zhang et al. [99] show that the key can be recovered.
Asymmetric Lightweight Cryptography. Relatively fewer
efforts target lightweight cryptographic algorithm based on
asymmetric ciphers, due to the much higher cost of these
operations. Lithe [82] is proposed to provide integration of
security between the DLTS protocol at the transport layer
and the CoAP protocol at the application layer.The system in-
volves expensive cryptographic processing for both the record
and the handshake protocols. In contrast, CSProp requires
lightweight cryptographic operations suitable for resource-
constrained devices, optimizing TLS handshake latency and
energy consumption. Zhang et al. [100] propose a scheme
to provide resilience against a large number of sensor node
compromises. The scheme incurs lower overhead and higher
adaptability than existing techniques that utilize traditional
asymmetric algorithms. However, Albrecht et al. [8] show an
attack that fundamentally undermines the viability of using
perturbation polynomials for designing secure cryptographic
schemes. This attack does not apply to our case since the
security of CSProp is equivalent to the security of RSA.
Some similar works use cryptographic signature schemes
where a powerful server assists in helping a weak client. Bel-
lare and Sandhu [22] consider a group of two-party collabora-
tive RSA signature computation schemes. In contrast, CSProp
focuses on efﬁcient signature veriﬁcation (not generation),
which is a public key operation. The proposed protocols fol-
low a similar technique of partitioning the private key into
shares. In addition, the security of each protocol in [22] relies
on different assumptions on the underlying primitives which
make them susceptible to forgery attacks: we showed that
CSProp is immune to such attacks in Section 3.3. MacKenzie
and Reiter [75] also consider the problem of two-party sig-
nature generation. They assume that a user should have and
provide a personal password in addition to the split secretkey,
making them unsuitable for automated propagation. Damgård
and Mikkelsen [40] consider a protocol scenario where four
players collaborate to generate a digital signature considering
at least one player is malicious. They combine multiple tech-
niques including threshold cryptography signatures where a
secret RSA exponent is partitioned between the players. In
CSProp, we utilize the RSA public exponent instead of thresh-
old signature. Camenisch et al. [33] propose a scheme where a
client is authenticated by utilizing a password (similar to [75]),
along with a shared secret key split between an end-user and a
back-end server. Generating the signing key is initiated at the
client side after validating client’s password. CSProp neither
requires a password nor creates the key at the client side: keys
are generated by origin servers. Buldas et al. [32] propose a
smart-ID scheme where a private exponent is shared between
a client and a server for generating signatures. In comparison
with CSProp, like the other works discussed here, the scheme
is used to optimize private key operations rather than public
key operations as with CSProp. We believe our work is the
ﬁrst to enable server aided veriﬁcation and encryption, which
should be useful for weak edge devices in a larger network.
Proxy Assisted Cryptography. Our work bears similarity,
USENIX Association
30th USENIX Security Symposium    621
with prior work on proxy-based re-signature schemes, ﬁrst
introduced by Blaze et al. [24] and later revisited by Ateniese
and Hohenberge [16]. A signiﬁcant difference from these
works is that CSProp provides security by construction and
therefore does not require a trusted proxy to propagate signa-
tures. In contrast, these prior works require a trusted proxy
to take a signature as input and generate a new signature as
output using the public keys of both parties (the signer and
the veriﬁer). We note that this setting is also vulnerable to a
known attack on RSA [26, 91, 92].
Joye et al. [62] propose a solution to overcome hardware
restrictions enforced by vendors such as Intel Software Guard
Extensions (SGX). Although it uses a proxy, the application
is different: for CSProp, Patty is helping a weak Alice verify
a signature from a more powerful Bob. On the other hand,
in this work, Patty is helping a weak Bob sign a message
and transmit the signature to a powerful Alice, which is not a
common scenario for IoT settings. Critically, Patty needs to
know Bob’s private key, which is not required in our scheme.
For this reason, the warning in [62] that e(cid:48)|e is problematic
does not apply in our setting. This is because e(cid:48) in [62] is
generated using knowledge of Bob’s private key, whereas for
us e(cid:48) is computed publicly. Another major difference between
this work and ours is the model of security they consider: in
addition to the proxy being trusted in this scheme, both public
keys must be kept secret, which is incompatible with the
requirements of our target applications and the assumptions
in our threat model.
7 Concluding Remarks
IoT and embedded devices, in general, are resources-
constrained forcing designers to choose either security (e.g.,
by ofﬂoading security to gateway nodes) or performance (per-
forming the expensive cryptographic operations required for
end to end security). This paper contributes a new crypto-
graphic primitive, CSProp, that uses a low public exponent
to reduce the computational load required by the end devices.
We use CSProp to optimize the operation of two core security
protocols on the Internet: DNSSEC, and TLS resulting in
substantial improvements in latency and energy efﬁciency.
In Section 3.3, we presented the security proof of CSProp
using the existential unforgeability property and the crypto-
graphic game theory. One of our future research directions
is to implement propagation schemes lattice-based crypto-
graphic signature and encryption. Several recent proposals for
lattice-based signature and encryption exist, each one making
use of a slightly different hardness assumption and offering
slightly different functionality. It would be interesting to try
to design propagation schemes to transfer cryptographic con-
tent between the schemes so that the schemes with lower
overhead/less functionality can be used by the weak com-
putational devices in the network without sacriﬁcing secu-
rity/functionality for the stronger devices in the network. A
limitation of CSProp is that it helps only with operations that
use the public key (signature veriﬁcation, authentication, as
well as encryption). For that, other research extensions in-
clude integration with support for private key operations to
provide a complete solution for PKC in constrained devices;
we believe there is substantial need for such support since the
vast majority of lightweight cryptography focuses on symmet-
ric ciphers. We also plan to investigate models of propagator
deployment and discovery to enable systematic leveraging of
CSProp with applications that use PKC.
Acknowledgements
This material is based on work supported by Taibah University
(TU) and the Saudi Ministry of Education (MOE). This work
is partially supported by the University of California Ofﬁce
of the President UC Lab Fees grant number LFR-18-548554.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this work are those of the authors and do not
necessarily reﬂect the views of the funding agencies.
References
[1] Dns ampliﬁcation attacks. US-CERT, 2016. Avail-
able at https://www.us-cert.gov/ncas/alerts/
TA13-088A.
[2] ebacs: Ecrypt benchmarking of cryptographic sys-
tems, 2020. Available at http://bench.cr.yp.to/
results-encrypt.html.
[3] ebacs: Ecrypt benchmarking of cryptographic sys-
tems, 2020. Available at http://bench.cr.yp.to/
results-stream.html.
[4] Wyze cam v2 smart home camera, Visited on 2020-
03-28.
Available at https://www.amazon.com/
Wyze-Indoor-Wireless-Detection-Assistant/
dp/B076H3SRXG/ref=sr_1_3?dchild=1&
keywords=wyze+cam+v2&qid=1585439194&s=
electronics&sr=1-3.
[5] Arduino mkr wiﬁ 1010, Visited on 2020-04-01.
at https://store.arduino.cc/usa/
Available
mkr-wifi-1010.
[6] Joe Abley, K Lindqvist, et al. Operation of anycast
services. Technical report, BCP 126, RFC 4786, De-
cember, 2006.
[7] Mehmet Adalier et al. Efﬁcient and secure elliptic
curve cryptography implementation of curve p-256. In
Workshop on Elliptic Curve Cryptography Standards,
volume 66, 2015.
622    30th USENIX Security Symposium
USENIX Association
[8] Martin Albrecht, Craig Gentry, Shai Halevi, and
Jonathan Katz. Attacking cryptographic schemes based
on perturbation polynomials. In Proceedings of the
16th ACM conference on Computer and communica-
tions security, pages 1–10. ACM, 2009.
[9] Fatemah Alharbi, Jie Chang, Yuchen Zhou, Feng Qian,
Zhiyun Qian, and Nael Abu-Ghazaleh. Collaborative
client-side dns cache poisoning attack. In IEEE INFO-
COM 2019-IEEE Conference on Computer Communi-
cations, pages 1153–1161. IEEE, 2019.
[10] Arwa Alrawais, Abdulrahman Alhothaily, Xiuzhen
Cheng, Chunqiang Hu, and Jiguo Yu. Secureguard:
A certiﬁcate validation system in public key infras-
tructure. IEEE Transactions on Vehicular Technology,
67(6):5399–5408, 2018.
[11] P Antonov and V Antonova. Development of the
attack against rsa with low public exponent and related
messages. In Proceedings of the 2007 international
conference on Computer systems and technologies,
page 50. ACM, 2007.
[12] Arduino. Arduino software, Visited on 2020-04-
01. Available at https://www.arduino.cc/en/
main/software.
[13] Roy Arends, Rob Austein, Matt Larson, Dan Massey,
and Scott Rose. Rfc4033:dns security introduction and
requirements. Technical report, 2005.
[14] Roy Arends, Rob Austein, Matt Larson, Dan Massey,
and Scott Rose. Rfc4034:resource records for the dns
security extensions. Technical report, 2005.
[15] Arris Router. Watts up pro portable power me-
ter, Visited on 2020-03-28. Available at https:
//www.amazon.com/NVG468MQ-802-11ac-MoCA%
C2%AE2-0-Frontier-Wireless-AC/dp/
B073F17BSG/ref=sr_1_1?dchild=1&keywords=
Arris+NVG468MQ&qid=1585441528&sr=8-1.
[16] Giuseppe Ateniese and Susan Hohenberger. Proxy
re-signatures: new deﬁnitions, algorithms, and appli-
cations. In Proceedings of the 12th ACM conference
on Computer and communications security, pages 310–
319. ACM, 2005.
[17] Jean-Philippe Aumasson, Luca Henzen, Willi Meier,
and María Naya-Plasencia. Quark: A lightweight hash.
In International Workshop on Cryptographic Hard-
ware and Embedded Systems, pages 1–15. Springer,
2010.
[18] Sven Bauer. Attacking exponent blinding in rsa with-
out crt. In International Workshop on Constructive
Side-Channel Analysis and Secure Design, pages 82–
88. Springer, 2012.
[19] M Bellare and P Rogaway. Optimal asymmetric en-
cryption padding–how to encrypt with rsa. In Advances
in Cryptology–EUROCRYPT’94, pages 92–111.
[20] Mihir Bellare and Phillip Rogaway. Random oracles
are practical: A paradigm for designing efﬁcient pro-
tocols. In Proceedings of the 1st ACM conference on
Computer and communications security, pages 62–73.
ACM, 1993.
[21] Mihir Bellare and Phillip Rogaway. The exact security
of digital signatures-how to sign with rsa and rabin.
In International Conference on the Theory and Appli-
cations of Cryptographic Techniques, pages 399–416.
Springer, 1996.
[22] Mihir Bellare and Ravi S Sandhu. The security of prac-
tical two-party rsa signature schemes. IACR Cryptol.
ePrint Arch., 2001:60, 2001.
[23] Alex Biryukov and Léo Paul Perrin. State of the art in
lightweight symmetric cryptography. 2017.
[24] Matt Blaze, Gerrit Bleumer, and Martin Strauss. Divert-
ible protocols and atomic proxy cryptography. In Inter-
national Conference on the Theory and Applications of
Cryptographic Techniques, pages 127–144. Springer,
1998.
[25] Andrey Bogdanov, Lars R Knudsen, Gregor Leander,
Christof Paar, Axel Poschmann, Matthew JB Robshaw,
Yannick Seurin, and Charlotte Vikkelsoe. Present:
In International
An ultra-lightweight block cipher.
Workshop on Cryptographic Hardware and Embedded
Systems, pages 450–466. Springer, 2007.
[26] Dan Boneh. Twenty years of attacks on the rsa cryp-
tosystem. Notices of the AMS, 46(2):203–213, 1999.
[27] Dan Boneh, Glenn Durfee, and Yair Frankel. An attack
on RSA given a small fraction of the private key bits.
In Advances in Cryptology - ASIACRYPT ’98, Interna-
tional Conference on the Theory and Applications of
Cryptology and Information Security, Beijing, China,
October 18-22, 1998, Proceedings, pages 25–34, 1998.
[28] Dan Boneh and Shay Gueron. Surnaming schemes,