to 32-bits in length, and calculated the instruction density
as the number n of valid instructions divided by 232. The
instruction density was 90.12% for ARM, 68.46% for MIPS,
and 32.69% for x86.
We then calculated the number of 32-bit instructions that
are valid for 2 or more architectures. Table 3 shows our
results. Overall, 12.31% of all 32-bit numbers decode to a
valid instruction sequence on all 3 architectures. From this,
we draw two conclusions. First, the 12% overlap in instruc-
tions indicates it should be relatively easy to ﬁnd platform-
independent code. Second, as a consequence of the larger
overlap, detecting platform-independent code likely requires
more than simply looking for known ﬁxed sequences.
6.2 Gadget Headers
Nops. Recall from § 4.1 that a gadget header consists of
zero or more nops followed by a machine-identifying jump.
An atomic nop is the smallest basic unit of instructions that
decodes semantically as a nop. Since multiple atomic nops
can be strung together, roughly speaking, a limiting fac-
tor in the diversity of nop strings is the number of atomic
nops. We found 326 atomic nops for x86, 241 for ARM, and
14,709,948 for MIPS. MIPS has a large number of nops be-
cause arithmetic instructions, unlike x86 and ARM, do not
set processor status ﬂags. Thus, on MIPS, any arithmetic
operation that does not change the value, e.g., a value plus
zero, can be used as a nop in our setting.
Number of Gadget Headers. We enumerated gadget
headers using our template-based approach for maximum
size sequence n = 4, 8 and 12. We found headers for two-
machine combinations, when n = 4 and 8. We show the
number of 4 byte headers found for diﬀerent architecture
combinations in Table 4, and the number of 12 byte headers
in Table 5. Due to space, we leave out 8 byte headers for
machine pairs. The ﬁrst header we found for three architec-
tures — x86, little-endian ARM, and little-endian MIPS —
required 12 bytes. RG found 4 × 1014 total 3-architecture
gadget headers. It took 0.07 seconds to ﬁnd 4-byte gadget
554header templates, 16 seconds for 8-byte templates, and 7
hours for 12-byte templates.
We observe that there are a large number of headers. This
again supports the idea that ﬁnding headers is not as diﬃ-
cult as previously believed. We can also ﬁnd gadget headers
even across diﬀerent endian architectures. For example, Ta-
ble 4 shows that there are 768 valid headers for big-endian
ARM and little-endian MIPS. Finally, we observe that RG’s
template-based approach to ﬁnding headers is an important
component in generating platform-independent programs.
There are 296 possible 12-byte instruction sequences. Enu-
merating all of them to ﬁnd headers is computationally in-
feasible. Our template-based approach reduced the search
space signiﬁcantly, while still ﬁnding a large number of head-
ers.
x86
N/A
x86
ARM(L) 66,092
ARM(B) 0
MIPS(L) 774
MIPS(B) 0
ARM(L) ARM(B) MIPS(L) MIPS(B)
66,092
N/A
65,536
0
768
0
65,536
N/A
768
0
774
0
768
N/A
6
0
768
0
6
N/A
Table 4: Number of 4-byte long gadget headers. L
represents little endian and B represents big endian.
x86
N/A
ARM(L) ARM(B) MIPS(L) MIPS(B)
7.9×1018 4.3×109
5.5×1018 4.3×109
8.6×1015 5.4×1016 1.3×1019
8.6×1015 N/A
1.3×1019 5.4×1016
1.7×1018
1.3×1019 5.4×1016 1.7×1018 N/A
x86
ARM(L) 7.9×1018 N/A
ARM(B) 4.3×109
MIPS(L) 5.5×1018 5.4×1016 1.3×1019 N/A
MIPS(B) 4.3×109
Table 5: The number of 12-byte gadget headers.
6.3 Platform-Independent Programs
HelloWorld. One way to view gadgets is as a new pro-
gramming language for multiple platforms. As such, it is
ﬁtting to create a “hello world” program, shown in Appendix,
Figure 9. “hello world” demonstrates a large number of fea-
tures, including stringing together multiple gadget bodies,
a platform- independent write system call, etc. In our ex-
periment, we conﬁrmed that the program ran on x86, ARM,
and MIPS. Note that the Figure shows a complete ELF ﬁle
generated from our PI generator. In order to run on each
architecture, we changed the one-byte ELF header of a CPU-
type ﬁeld to the appropriate value.
Prime Checker. The prime checker program is a CPU-
intensive program that implements the Sieve of Eratosthenes
to ﬁnd all prime numbers up to 3,000,000. We compiled the
C program for both x86 and ARM, and fed the resulting
binaries to the PI generator in RG. Also, we used a variant
of a gadget header that does not require nop instructions
to minimize the size of the gadget. This is possible because
we can ignore the change of the machine state if the gadget
header is located at the beginning of a program (discussed
in § 8). In addition, we measure the performance of PIPs in
§ 6.5.
Shellcode. We experimented with creating PI shellcode us-
ing 8 standard shell code examples from Exploit-DB [1]. The
selected shellcodes include local shell, bindshell, and reverse
bind shell. In particular, the bindshell and the reverse bind-
shell are extremely popular in practice because they allow
an attacker to have remote access to the victim machine.
We ﬁrst conﬁrmed that RG could solve the PIP chal-
lenge for the 8 shellcodes. We manually created semanti-
Name
Local shell code (23 byte)
Local shell code 2 (32 byte)
Local shell code 3 (40 byte)
Binding shell code
Reverse binding shell
Killall5
Flush iptable
Fork bomb
Original
Size (byte)
x86
23
32
40
171
155
34
40
7
ARM
72
84
72
244
236
96
120
12
PIP
Size
(byte)
99
120
116
428
416
135
164
23
Gen.
Time
(sec)
0.028
0.024
0.028
0.028
0.028
0.028
0.028
0.028
Table 6: Shellcode PIP generation results.
Name
Local shell code (23 byte)
Local shell code 2 (28 byte)
Local shell code 3 (40 byte)
Binding shell code
Reverse binding shell
Killall5
Flush iptable
Fork bomb
PIP
(byte)
300
320
672
2564
2592
388
532
196
Size
Generation
Time (sec)
0.068
0.080
0.113
0.431
0.439
0.088
0.077
0.076
Table 7: Shellcode PI translation results.
cally equivalent shellcodes for ARM for each shellcode. We
fed the 8 ARM, x86 shellcode pairs to the PI generator, and
obtained 8 PI shellcodes as outputs. An overview of the size
and generation time is shown in Table 6. We veriﬁed that
each shellcode successfully executed the appropriate shell on
both x86 and ARM. The PI shellcode generated for x86 and
ARM that executes bind shell is listed in Appendix, Fig-
ure 8.
We next conﬁrmed that RG could solve the PI translation
challenge by automatically generating ARM shellcode from
the x86 shellcode. Table 7 shows the size of each of the PI-
shellcode and the generation time. The size is larger than in
the PI generator’s setting because, in the translation setting,
RG translates each input instruction into a gadget. In the
setting, we only need to generate a single gadget.
Vulnerabilities. We installed and created exploits and PI
shellcode for two vulnerable programs: Snort 2.4 [21] and
the iPhone’s coreaudio library [22]. For Snort, we installed
the vulnerable version on Debian Linux on our ARM and
x86 machine. We then created an exploit and used our PI
shellcode. We conﬁrmed that the shellcode worked as in-
tended on a real exploit.
In the iPhone experiment, we created an exploit and then
used RG to generate ARM shellcode from the x86 remote
bindshell shellcode. We conﬁrmed that the PI shellcode,
paired with the iPhone coreaudio exploit, gave us the ex-
pected shell.
6.3.1 OS-Independent Shellcode
We have used a variant of our technique to generate OS-
independent shellcode for Linux, FreeBSD, and OS X. OS-
independent shellcode uses a gadget header that identiﬁes
the running OS. We employ two heuristics. First, we have
a gadget header that checks the address of the running pro-
cess, which will diﬀer for each OS. Second, we designed gad-
get headers that checked the set of deﬁned system calls. For
example, system call number 395 is not deﬁned in Linux,
whereas it is used as getlcid system call in FreeBSD and
OS X. If we use this system call number in Linux, we get
a negative return value in eax register, but we get positive
return value on FreeBSD and Mac OS X.
555forms. Our approach is signiﬁcantly diﬀerent from previous
approaches because we do not require additional meta-data
with OS support, and we do not use emulation. Instead, we
create a single string that runs natively on each architec-
ture with the instruction stream itself identifying platform-
speciﬁc semantics.
Fat binaries are one approach where two independent pro-
gram images are combined with special meta-data that is
used at run-time to select the appropriate image [2, 4, 20].
Fat binaries require OS support to read in the appropriate
meta-data and execute the appropriate image.
Sometimes architectures provide backward- and cross- com-
patibility with similar instruction sets, e.g., early VAX ma-
chine has PDP-11 compatibility mode [19], and modern Intel
processors supports hardware-based virtualization for x86,
IA64, and AMD64 [15]. In our work, we target completely
diﬀerent instruction sets, and even show that it is possible to
automatically generate programs that work on architectures
with diﬀerent endianness.
All the above approaches use independent binary strings
for each architecture, which are semantically the same pro-
gram when they are run on a speciﬁc machine. To the best
of our knowledge, the ﬁrst PI program in the same sense of
this paper that we are aware of was manually created by
Drew Dean [8] in 2003. Two years later, Nemo also demon-
strated a proof-of-concept shellcode for PowerPC and x86
[16]. However, those programs were manually generated,
and did not oﬀer a generalized algorithm for generating
platform-independent programs.
Steganography. Simmons formulated steganographic se-
curity, in terms of the prisoners dilemma, which involves
two prisoners whose conversations are monitored by a war-
den. The warden throws the prisoners in solitary conﬁne-
ment if he detects that they are planning escape, so the pris-
oners’ goal is to talk about escape while evading detection
by the warden. [18]. Cachin [6] approaches the problem of
steganography from an information theoretic model. Hop-
per et al. [12] established a complexity-theoretic model for
steganography. Mason et al.
[14] have used steganographic
techniques to generate shellcode that looks like English.