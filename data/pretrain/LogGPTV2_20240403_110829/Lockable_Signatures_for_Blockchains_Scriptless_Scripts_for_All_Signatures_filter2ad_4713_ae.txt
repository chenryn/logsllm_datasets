Note that in an honest run of the protocol, this setup
is never published on the chain and
transaction tx Setup,i
only kept among the parties P0, Pi, Pi+1 locally. It acts as
a safeguard for the sender P1 who wants to ensure that no
two intermediate parties Pi, Pi+1 can release the payments
without his permission. Additionally, if the payment channel
2-PCi’s expiry time was ti, the setup transaction tx Setup,i is
set to have a expiry time tSetup,i = ti − T , where T is some
system parameter. This is to ensure that even if the sender P1
(or P0) goes ofﬂine and coins from tx Setup,i remain unspent,
parties Pi and Pi+1 can still get back the locked coins from
tx Setup,i. Once they get the coins back to 2-PCi from 3-PCi,
they can make payments in the remaining time T after which
the channel 2-PCi itself expires.
Lock Phase. Parties P0, Pi−1, Pi, Pi+1 (for i ∈ [2, n− 1]), run
the MPC Γ to set up the lock (cid:96)ki−1 that is received by Pi. The
locked signature in (cid:96)ki−1 is σi−1, which is a signature on the
transaction tx pay,i−1 under the key pk i−1 (or 3-PCi−1). Here
the transaction tx pay,i−1 pays v coins from 3-PCi−1 to a key
∗
i of party Pi. A critical requirement of the MPC protocol is
pk
that it must ensure that the locked signature σi−1 in the lock
(cid:96)ki−1 is actually the locking signature for lock (cid:96)ki−2, and so
on. This is done by checking that the parties provide as input
valid shares of the secret key contained in the commitment ci,
which is veriﬁed inside of the MPC protocol.
For the ﬁnal lock, party P0, Pn−1, Pn and (a special) party
Pn+1 (again played by the sender P1) setup the lock (cid:96)kn−1
whose locking signature σn is a signature on some (arbitrary)
message tx pay,n under the public key pk n (shared among
P0, Pn+1 and Pn).
Notice that tx pay,i−1 expires ∆ time units after tx pay,i. This
is to ensure that party Pi has enough time in the release phase
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
946
(described below), to learn σi−1 and get paid by tx pay,i−1 after
Pi+1 gets paid by tx pay,i. This requirement is the same as what
is required in [2], [3].
Release Phase. Once the payment locks have been established
until the recipient Pn, the sender P1 along with the receiver
Pn, jointly unlock (cid:96)kn−1. This is done by running the MPC
protocol Γ to compute σn on tx pay,n using their (P0, Pn, Pn+1)
shares of the secret key sk n.
Pn learns σn using which it reveals the signature σn−1 on
tx pay,n−1, by executing the Unlock algorithm. Party Pn then
sends σn−1 to party Pn−1 using which Pn−1 can unlock (cid:96)kn−2,
and so on. The cascade ends with party P2 learning σ1, thus
concluding one payment of v coins from P1 to Pn.
We stress that in case all parties are honest, then no
information about the payment is posted on the blockchain.
Thus subsequent payments can happen by simply overwriting
this information (i.e. the locks). On the other hand, if any
party Pi wants to close the channel with Pi−1, it can post
the transactions tx Setup,i−1 and tx pay,i−1 along with valid
signatures for both transactions before either of them expire.
Security Analysis. The following theorem states the security
of our protocol and we defer the proof to the full version.
Theorem 5.1: Let LS be a hiding and an unlockable lockable
signature scheme with respect to the signature scheme ΠDS
that is strongly unforgeable. Let (Commit, Open) be a UC-
secure commitment scheme and Γ be a UC-secure MPC
for general functions. Then, the PCN described in Figure 7
with access to (FB,Fsmt,Fclock) UC-realizes the functionality
FPCN (Figure 9).
C. Construction II: PCNs for BLS Signatures
We now describe our BLS-based PCN protocol where the
settings are identical to Section V-B. However, the structure
and properties of BLS signatures will allow us to design a
PCN with signiﬁcant efﬁciency improvements. For example,
the joint generation of a shared public key can be done “non-
interactively” by simply setting pk = pk 0 · pk 1 and sk =
sk 0 + sk 1. Then a valid signature under pk is an aggregate of
a signature under pk 0 and a signature under pk 1.
1) Overview: As before, we describe the payment protocol in
three (setup, locking, and release) phases. A formal description
of our scheme can be found in Figure 11.
Setup Phase. During this phase, parties P0, Pi and Pi+1
(for i ∈ [n − 1]), jointly generate pk i such that each party
has a 3-out of-3 share of the corresponding secret key sk i.
Similar to the generic construction, P0 and Pn+1 are special
parties whose role is played by the sender P1. To prevent
rogue key attacks [39], each party proves the knowledge
of its secret share using a NIZK for the language, LDL :=
(cid:8)stmt = pk : ∃sk s.t. (pk := gsk
1 )(cid:9). Since BLS signatures
are unique to the message and the public key, we do not need
an explicit commitment to the secret key.
Lock Phase. Our interactive payment lock phase between
P0, Pi−1, Pi, Pi+1 (for i ∈ [2, n − 1]), proceeds in rounds.
At the end Pi obtains a lock (cid:96)ki−1 := σi−1 · σi where σi−1
is a valid signature on tx pay,i−1 under 3-PCi−1 and σi is a
valid signature on tx pay,i under 3-PCi. The interactions are
designed to ensure that it is infeasible for Pi+1 to produce
σi without colluding with P0 and Pi. Similarly, Pi−1 cannot
output σi−1 without colluding with P0 and Pi. At the end of
the locking phase, parties P0, Pn−1, Pn and Pn+1 establish a
lock (cid:96)kn−1 := σn−1 · σn, where σn is a signature on some
(arbitrary) message tx pay,n generated by P0 and Pn.
Release Phase. This phase is initiated by P0 by computing σn.
Starting from Pn, all parties can progressively start unlocking
their signatures: For i ∈ [n, 2] party Pi learns σi−1 by simply
computing (cid:96)ki−1/σi, i.e. by extracting σi−1 from the aggregate
of the two signatures. Note that the uniqueness of the signature
allows us to ensure that the extraction is always successful for
intermediate users.
Security Analysis. The following theorem establishes the
security of our BLS-based PCN protocol and we defer the
proof to the full version.
Theorem 5.2: Let (PNIZK,LDL ,VNIZK,LDL) be a UC secure
NIZK and let (G0, G1, Gt) be a CDH-hard bilinear group.
Then the PCN protocol described in Figure 11 with access
to (FB,Fsmt,Fclock) UC-realizes the functionality FPCN (Fig-
ure 9) in the random oracle model.
D. On the Transaction Expiry Functionality
For our PCN protocols we assume that the blockchain offers
an expiration functionality, where transactions can be set to
expire after some time. In practice, the standard way to realise
such an expiry time of a transaction tx A is to set a nLockTime
ﬁeld in the script of another transaction tx B that spends from
tx A. Transaction tx B is accepted on the chain only if the
number in its nLockTime ﬁeld is larger than or equal to
the current chain height. Therefore, if tx A is on the chain
and remains unspent until the expiry time (the number in
nLockTime ﬁeld of tx B), transaction tx B can be posted on
the chain thereby spending from tx A.
Although the setup transaction tx Setup,i is only kept locally
and never posted on the chain, a malicious sender P1 may
post tx Setup,i on the blockchain and go ofﬂine. Parties Pi
and Pi+1 would end up locking their funds in 3-PCi forever.
To prevent such a DoS attack, the parties may generate a
revoke transaction tx revoke,i := tx (3-PCi, 2-PCi, vi) with its
nLockTime set such that it is enforceable only after time
tSetup,i. This feature is available in most scripting languages.
The revoke transaction tx revoke,i in this case can be posted on
the blockchain after time tSetup,i and the parties Pi and Pi+1
can get their funds back.
We could also adapt our protocol according to a recent
work [51], which would let us eliminate the need for the
nLockTime script entirely, while using time-lock puzzles [52]
and a script to delay the spending of the output of a transaction,
relative to the time of posting that transaction on chain1.
1Bitcoin
CHECKSEQUENCEVERIFY.
scripting language offers
this
feature with the
script
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
947
Input: For i ∈ [n − 1], parties Pi and Pi+1 share a payment channel 2-PCi with channel expiry ti. For each channel 2-PCi,
party Pi has a secret signing key sk (i)
. All parties are aware of the system
parameters ∆ ∈ N and T ∈ N. We consider party P1 the sender of the payment, to play the role of a P0 in the below protocol.
p,i and party Pi+1 has a secret signing key sk (i+1)
p,i
Payment Setup Phase
Parties P0, Pi, Pi+1 for i ∈ [n − 1] do the following:
1) They engage in the execution of the MPC protocol Γ for the following functionality:
(cid:17)
• Compute (pk i, sk i) ← ΠDS .KGen(1λ) and (ci, di) ← ΠC.Commit(1λ, sk i).
(cid:17)
, d(i+1)
• Sample uniformly at random
(cid:17)
(cid:16)
di = d(0)
(cid:16)
(cid:16)
(cid:16)
i ⊕ d(i)
pk i, ci, sk (0)
i ⊕ d(i+1)
.
, d(0)
pk i, ci, sk (i+1)
pk i, ci, sk (i)
• Return
, sk (i+1)
, d(i+1)
, sk (i)
i
, d(i)
i
sk (0)
d(0)
i
(cid:17)
(cid:16)
(cid:17)
and
, d(i)
i
,
,
i
i
i
i
i
i
i
i
i
2) Parties Pi and Pi+1 do the following:
• Generate tx Setup,i = tx (2-PCi, 3-PCi, vi) with transaction expiry time tSetup,i = ti − T , where 3-PCi := pk i
• Run the MPC protocol Γ to generate σs,i ← ΠDS .Sign
• Send (tx Setup,i, σs,i, tSetup,i) to P0
p,i ⊕ sk (i+1)
sk (i)
, tx Setup,i
p,i
(cid:16)
(cid:17)
to P0, Pi and Pi+1, respectively.
such that sk i = sk (0)
i ⊕ sk (i)
i ⊕ sk (i+1)
i
and
Payment Lock Phase
Parties P0, Pi−1, Pi, Pi+1 for i ∈ [2, n − 1] generate a payment lock for party Pi by doing the following:
1) Parties P0, Pi−1, Pi generate tx pay,i−1 = tx (3-PCi−1, pk
∗
i , v) with payment expiry time ˜ti−1 and parties P0, Pi, Pi+1
2) Party P0 sends (3-PCi−1, ci−1) to party Pi+1 and sends (3-PCi, ci) to party Pi−1
3) Parties P0, Pi−1, Pi and Pi+1 engage in the MPC protocol Γ, to compute (cid:96)ki−1 ← Lock (sk i−1, tx pay,i−1, sk i, tx pay,i).
Speciﬁcally, the MPC takes as input (pk i−1, ci−1, pk i, ci) from all parties these parties and as private inputs
∗
i+1, v(cid:1) with payment expiry time ˜ti, such that ˜ti−1 = ˜ti + ∆.
(cid:16)
(cid:110)(cid:16)
(cid:16)
(cid:17)
(cid:17)
generate tx pay,i = tx(cid:0)3-PCi, pk
(cid:110)(cid:16)
(cid:17)(cid:111)
(cid:16)
(cid:17)
(cid:17)
, d(0)
(cid:16)
,
i
i−1, d(i)
i−1
,
sk (i)
i
, d(i)
i
from Pi and
(cid:17)(cid:111)
i
i
i
from P0,
sk (0)
sk (i+1)
i−1, d(0)
i−1
, d(i+1)
i−1 , d(i−1)
sk (i−1)
sk (0)
i−1
(cid:16)
from Pi+1. The MPC computes the following functionality:
(cid:17)
i−1 ⊕ sk (i−1)
i−1 ⊕ d(i−1)
i−1 ⊕ d(i)
• Check whether sk (0)
d(0)
i−1, ci−1
(cid:16)
i ⊕ sk (i+1)
i ⊕ d(i+1)
and abort otherwise.
, ci
i ⊕ sk (i)
i ⊕ sk (i+1)
i−1, tx pay,i−1, sk (0)
• Return (cid:96)ki−1 = Lock
4) Parties P0, Pn−1, Pn, Pn+1 where Pn+1 is party P1, run the above steps that returns
(cid:16)
i−1 ⊕ sk (i)
i−1 = ΠC.Open
i ⊕ d(i)
d(0)
= ΠC.Open
i−1 ⊕ sk (i−1)
i−1 ⊕ sk (i)
sk (0)
i ⊕ sk (i)
sk (0)
from Pi−1,
sk (i)
(cid:17)
i
i
i