title:Practical client puzzles in the standard model
author:Lakshmi Kuppusamy and
Jothi Rangasamy and
Douglas Stebila and
Colin Boyd and
Juan Manuel Gonz&apos;alez Nieto
Practical Client Puzzles in the Standard Model
Lakshmi Kuppusamy
Jothi Rangasamy
Douglas Stebila
Colin Boyd
Juan González Nieto
Information Security Institute, Queensland University of Technology,
GPO Box 2434, Brisbane QLD 4001, Australia
{l.kuppusamy,j.rangasamy,stebila,c.boyd,j.gonzaleznieto}@qut.edu.au
ABSTRACT
Client puzzles are cryptographic problems that are neither
easy nor hard to solve. Most puzzles are based on either
number theoretic or hash inversions problems. Hash-based
puzzles are very eﬃcient but so far have been shown secure
only in the random oracle model; number theoretic puzzles,
while secure in the standard model, tend to be ineﬃcient.
In this paper, we solve the problem of constructing crypto-
graphic puzzles that are secure in the standard model and
are very eﬃcient. We present an eﬃcient number theoretic
puzzle that satisﬁes the puzzle security deﬁnition of Chen et
al. (ASIACRYPT 2009). To prove the security of our puzzle,
we introduce a new variant of the interval discrete logarithm
assumption which may be of independent interest, and show
this new problem to be hard under reasonable assumptions.
Our experimental results show that, for 512-bit modulus,
the solution veriﬁcation time of our proposed puzzle can be
up to 50× and 89× faster than the Karame- ˇCapkun puzzle
and the Rivest et al.’s time-lock puzzle respectively. In par-
ticular, the solution veriﬁcation time of our puzzle is only
1.4× slower than that of Chen et al.’s eﬃcient hash based
puzzle.
Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]:
Distributed Systems[Client/Server]; D.4.6 [Operating
Systems]: Security and Protection—Authentication
General Terms
Security
Keywords
client puzzle, denial of service, interval discrete log problem,
factorisation, puzzle unforgeability, puzzle diﬃculty
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-1303-2/12/05 ...$10.00.
1.
INTRODUCTION
Denial-of-service (DoS) attacks are a growing concern to
networked services like the Internet. In recent years, major
Internet e-commerce and government sites have been dis-
abled due to various DoS attacks. A common form of DoS
attack is a resource depletion attack, in which an attacker
tries to overload the server’s resources, such as memory or
computational power, rendering the server unable to service
honest clients. A promising way to deal with this problem
is for a defending server to identify and segregate malicious
traﬃc as earlier as possible.
Client puzzles, also known as proofs of work, have been
shown to be a promising tool to thwart DoS attacks in net-
work protocols, particularly in authentication protocols. A
puzzle is issued by the server in reply to each request when
the server is under attack. After receiving a puzzle, the
client has to solve it in order to convince the server to allo-
cate its resources. The main idea is that puzzle generation
and solution veriﬁcation should be easy for the server, while
computing the puzzle solution should be somewhat compu-
tationally hard for the client.
Many client puzzles have been proposed since they were
ﬁrst introduced by Dwork and Naor in 1992 [7]. An im-
portant recent development has been the analysis of client
puzzles in the provable security framework [6, 19]. The
computational problems underlying most puzzles are either
number-theoretic [7, 12, 21] or based on hash inversions [3,
6, 10, 11]. Hash-based puzzles are very eﬃcient — genera-
tion and veriﬁcation typically requires only one or two hash
function calls — but concrete realisations to date have been
shown secure only in the random oracle model. Number-
theoretic puzzles, on the other hand, have been shown secure
in the standard model but have tended to be relatively ineﬃ-
cient, typically requiring the server to perform a large integer
modular exponentiation making it unsuitable for high speed
applications. Recently, Rangasamy et al. [16] proposed an
eﬃcient modular exponentiation based client puzzle which
does not require any online exponentiations for puzzle gener-
ation and veriﬁcation. But the puzzle security relies on the
security of time-lock puzzle of Rivest et al.
[17] and does
not follow from standard model security assumptions. The
existence of a highly eﬃcient, standard-model secure client
puzzle has remained an open question until now.
1.1 Contributions
Our contributions in this work are as follows:
• We propose an eﬃcient number-theoretic client puzzle
Puzzle
Standard
model
Rivest et al. [17]
Karame- ˇCapkun [12]
Chen et al.
hash based puz [6]
Rangasamy et al. [16]
Our Puzzle
Yes
Yes
No
Yes
Yes
Generation
Cost
1 hash
2 HMAC (4 hash)
1 gcd
1 HMAC and
1 hash
1 hash
1 HMAC, ((cid:96) − 1) mod. add.
2((cid:96) − 1) mod. mul.
((cid:96) − 1) mod. mul.
1 large integer mul.
1 large integer add.
Generation
Time (µs)
Verification
verification
Cost
Time (µs)
4.80
8.37
5.92
16.66
1
31.43
1 hash
|n|-bit mod. exp.
2 HMAC (4 hash)
2k-bit mod. exp.
1 HMAC
1 hash
1 hash
3 mod. mul.
1 HMAC
large integer mul.
1 large integer add.
474.68
263.35
3.77
14.75
5.31
Table 1: Puzzle generation and veriﬁcation costs and time for low diﬃculty level Q, 512-bit RSA modulus n,
56-bit security parameter k. (cid:96) is set to 4 and 8 for Rangasamy et al.’s puzzle and our puzzle respectively.
DLPuz that does not require any online exponentia-
tions. In fact, our puzzle requires only a few modular
additions and multiplications for generation and ver-
iﬁcation which is a signiﬁcant improvement over the
existing practical standard model puzzles. Thus we
solve the problem of constructing cryptographic puz-
zles that are secure in the standard model and are very
eﬃcient. Table 1 lists the generation and veriﬁcation
costs and times for our puzzle and other puzzles.
• We compare the performance of our puzzle with the
performances of the puzzles listed in Table 1. Our ex-
perimental results show that the solution veriﬁcation
time of our puzzle is approximately 89 times faster
when compared to Rivest et al.’s time-lock puzzle and
by approximately 50 times faster when compared to
Karame and ˇCapkun, for 512-bit RSA moduli. The so-
lution veriﬁcation time of our puzzle is approximately
3 times faster than that of Rangasamy et al.’s eﬃcient
number theoretic puzzle. The puzzle veriﬁcation time
of our puzzle is only 1.4 times slower than Chen et al.’s
most eﬃcient hash based puzzle which is proven secure
in the random oracle model.
• We analyse the security of our puzzle using the puzzle
security model of Chen et al.
[6] and show that our
puzzle satisﬁes the unforgeability and diﬃculty prop-
erties.
• Though our puzzle enjoys a simple construction, its
security does not follow directly from existing crypto-
graphic assumptions. We introduce a new variant of
the composite interval discrete logarithm assumption
which we call the modular composite interval discrete
logarithm assumption, IDL∗. We show that this new
computational problem is as hard as the composite
interval discrete logarithm problem (IDL) and the fac-
torisation problem.
Outline.
The rest of the paper is organised as follows. Section 2
presents the background and motivation for our work.
In
Section 3, we present our new client puzzle scheme DLPuz.
In Section 4, we introduce a new variant IDL∗ of the com-
posite interval discrete logarithm assumption and analyse its
hardness. Section 5 describes the puzzle security model of
Chen et al. and provides the security analysis of DLPuz in
the standard model, relating its diﬃculty to the new IDL∗
problem. Finally, we present our experimental results in
Section 6 and conclude the paper with future work in Sec-
tion 7.
2. BACKGROUND
In this section, we review the relevant literature on client
puzzles, with an emphasis on standard model puzzles.
Client Puzzles. Client puzzles were ﬁrst proposed by Dwork
and Naor [7] as a countermeasure for email spam. Many
client puzzles [3, 6, 10, 11] are based on the diﬃculty of in-
verting a hash function. These hash-based puzzles are gen-
erally quite eﬃcient: typically they require only one or two
hash function calls for puzzle generation and veriﬁcation. In
this work we will focus on number theoretic puzzles, and will
review the various constructions below.
Until recently, the diﬃculty of solving puzzles was ad-
dressed in a mostly ad hoc manner. However, several prov-
able security models have been recently introduced: one by
Chen et al. [6] for analysing the diﬃculty of solving a single
puzzle, and one by Stebila et al. [19] for the case of solving
multiple puzzles.
Modular Exponentiation-Based Puzzles. In 1996, Rivest et
al. [17] introduced time-lock puzzles that can only be solved
by running a computer continuously for a certain amount
of time. An example construction of a time-lock puzzle was
given based on repeated squaring. Given a composite RSA
modulus n and a random element a in Z∗
n, the client’s task
is to do t repeated squaring on a: compute a2t
mod n.
The server can use its knowledge of φ(n) as a shortcut to
create the puzzle with two modular exponentiations, whereas
the client has to spend no less than the pre-determined
amount of time to solve the puzzle. However, because of
the high cost of puzzle generation and veriﬁcation at the
server, time-lock puzzles are not suitable for DoS defense.
In 2010, Karame and ˇCapkun [12] reduced the veriﬁcation
cost of the time-lock puzzles of Rivest et al.. The puzzle
scheme works as follows: Let (n, e, d) be a tuple of RSA pa-
rameters such that e · d = 1 mod φ(n). Here d is chosen
to be small such that d ≥ k, where k is a security param-
eter.
Instead of an RSA public key e, an enlarged public
key ¯e is given as the puzzle and a client needs to encrypt
a challenge string. The diﬃculty of a puzzle is adjusted by
increasing or decreasing the size of ¯e. The server veriﬁes a
solution by decrypting with d (which is small) and check-
ing whether the resulting value matches the challenge. The
speed-up achieved was a factor of log n
k , when log d = k + 1.
For example, when a 1024-bit modulus is used, the full 1024-
bit modular exponentiation required for solution veriﬁcation
in time-lock puzzles is reduced to a 1024-bit modular ex-
ponentiation with an 80-bit exponent. Although, this im-
provement is signiﬁcant compared with the performance of
known time-lock puzzles, the puzzle is still not suitable for
high-speed practical applications because of its higher veri-
ﬁcation cost.
length in bits of n, and φ(n) is the Euler phi function for
n. If S is a set, then x ←R S denotes choosing x uniformly
If A is an algorithm, then x ← A(y)
at random from S.
denotes assigning to x the output of A when run with the
input y. An interval of integers is denoted by [a, b]. If I is an
interval, we note in particular that I ← [a, b] denotes setting
I to be the interval with endpoints a and b, not selecting an
element from that interval. If k is a security parameter, then
negl(k) denotes a function that is negligible in k, namely
asymptotically smaller than the inverse of any polynomial
in k.
3.1 Deﬁning Client Puzzles
Recently, Rangasamy et al. [16] proposed a modular
Chen et al.
[6] gave the following deﬁnition of a client
exponentiation-based client puzzle which can be seen as an
eﬃcient alternative to Rivest et al.’s time-lock puzzle. Un-
like the Rivest et al.and Karame- ˇCapkun puzzle, Rangasamy
et al.’s puzzle does not require the server to perform any on-
line exponentiations. In fact, the server has to perform to-
tally two hash operations and few modular multiplications
for the puzzle generation and veriﬁcation. Although it is
a signiﬁcant improvement over the Karame- ˇCapkun puzzle
construction, the security of the puzzle does not rely on the
standard security assumptions.