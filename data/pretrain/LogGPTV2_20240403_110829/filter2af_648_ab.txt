        super.setFeature(featureId, state);
        // Xerces properties
        if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {
            final int suffixLength = featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();
            if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() &&
                featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {
                fLoadExternalDTD = state;
                return;
            }
            else if (suffixLength == Constants.DISALLOW_DOCTYPE_DECL_FEATURE.length() &&
                     featureId.endsWith(Constants.DISALLOW_DOCTYPE_DECL_FEATURE)) {
                fDisallowDoctype = state;
                return;
            }
        }
    }
后面的`Xerces properties`比较有意思，简而言之就是
设置了`http://apache.org/xml/features/nonvalidating/load-external-dtd`则设置`fLoadExternalDTD`为指定值（应该就是禁用DTD)
设置了`http://apache.org/xml/features/disallow-doctype-decl`则设置`fDisallowDoctype`为指定值（应该就是禁用Doctype）
到这里就应该差不多了，后面就是带入到`DocumentBuilder`的初始化过程中。
之后parse的过程类似，在`com/sun/org/apache/xerces/internal/impl/XMLDocumentScannerImpl.java:824`的next函数中，可以看到有一系列的case语句，应该是用来区分解析的XML位置的，在解析Doctype的`SCANNER_STATE_DOCTYPE`的case分支下可以看到
    switch(fScannerState){
        case SCANNER_STATE_COMMENT: {
            ...
        }
        case SCANNER_STATE_PI: {
            ...
        }
        case SCANNER_STATE_DOCTYPE: {
            if (fDisallowDoctype) {
                reportFatalError("DoctypeNotAllowed", null);
            }
            if (fSeenDoctypeDecl) {
                reportFatalError("AlreadySeenDoctype", null);
            }
            fSeenDoctypeDecl = true;
            // scanDoctypeDecl() sends XNI doctypeDecl event that
            // in SAX is converted to startDTD() event.
            if (scanDoctypeDecl(fSupportDTD)) {
                ...
        }
可以看到这里在一开始的部分，就对之前设置过了的`fDisallowDoctype`进行判断，如果设为false的话，就抛出异常
## 其余的一些方式
其余的防御方式还有类似的
    FEATURE = "http://xml.org/sax/features/external-parameter-entities";
    dbf.setFeature(FEATURE, false);
    FEATURE = "http://xml.org/sax/features/external-general-entities";
    dbf.setFeature(FEATURE, false);
仔细看下之前`reset()`的代码
    fExternalGeneralEntities = componentManager.getFeature(EXTERNAL_GENERAL_ENTITIES, true);
    fExternalParameterEntities = componentManager.getFeature(EXTERNAL_PARAMETER_ENTITIES, true);
再搜一下这些参数在解析时候的作用，就差不多能知道具体的原理了`com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java:1147`
    if (unparsed || (general && !fExternalGeneralEntities) ||
        (parameter && !fExternalParameterEntities) ||
        !fSupportDTD || !fSupportExternalEntities) {
        if (fEntityHandler != null) {
            fResourceIdentifier.clear();
            final String encoding = null;
            fResourceIdentifier.setValues(
                (externalEntity.entityLocation != null ? externalEntity.entityLocation.getPublicId() : null),
                extLitSysId, extBaseSysId, expandedSystemId);
            fEntityAugs.removeAllItems();
            fEntityAugs.putItem(Constants.ENTITY_SKIPPED, Boolean.TRUE);
            fEntityHandler.startEntity(entityName, fResourceIdentifier, encoding, fEntityAugs);
            fEntityAugs.removeAllItems();
            fEntityAugs.putItem(Constants.ENTITY_SKIPPED, Boolean.TRUE);
            fEntityHandler.endEntity(entityName, fEntityAugs);
        }
        return;
    }
    ... // 解析Doctype
可以看到在解析Doctype之前，就会对这些参数进行判断，如果设置了，最后就直接进入return逻辑，不会进入Doctype的解析。
所以在设置这两个参数之后，xml的解析不会抛出任何异常提示，只是单纯的不解析外部实体。
# XMLInputFactory
这个XML库是用流的方式解析的XML数据，前期处理的步骤有一些小差异
    XMLInputFactory xmlInputFactory = XMLInputFactory.newFactory();
    // "javax.xml.stream.supportDTD"
    xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    // "javax.xml.stream.isSupportingExternalEntities"
    xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader parse = xmlInputFactory.createXMLStreamReader(ResourceUtils.getPoc1());
    while (parse.hasNext()) {
        parse.next();
    }
一开始也是`setProperty`,将变量存在一个属性管理器中
    public void setProperty(String name, Object value) throws IllegalArgumentException {
        ...
        this.fPropertyManager.setProperty(name, value);
        ...
    }
然后初始化`XMLStreamReader`来到`com/sun/org/apache/xerces/internal/impl/XMLStreamReaderImpl.java:181`
    public XMLStreamReaderImpl(XMLInputSource inputSource, PropertyManager props) throws  XMLStreamException {
        init(props);
        //pass the input source to document scanner impl.
        setInputSource(inputSource);
    }
重点关注下初始化props的地方，里面有个reset，可以一直跟进到`com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java:1431`
发现又回到了XMLEntityManager的reset函数，但是这回是另外的一个重载函数(之前的是从`XMLComponentManager`进行reset)
    public void reset(PropertyManager propertyManager){
        // xerces properties
        fSymbolTable = (SymbolTable)propertyManager.getProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY);
        fErrorReporter = (XMLErrorReporter)propertyManager.getProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.ERROR_REPORTER_PROPERTY);
        try {
            fStaxEntityResolver = (StaxEntityResolverWrapper)propertyManager.getProperty(STAX_ENTITY_RESOLVER);
        } catch (XMLConfigurationException e) {
            fStaxEntityResolver = null;
        }
        fSupportDTD = ((Boolean)propertyManager.getProperty(XMLInputFactory.SUPPORT_DTD)).booleanValue();
        fReplaceEntityReferences = ((Boolean)propertyManager.getProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES)).booleanValue();
        fSupportExternalEntities = ((Boolean)propertyManager.getProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES)).booleanValue();
        // Zephyr feature ignore-external-dtd is the opposite of Xerces' load-external-dtd
        fLoadExternalDTD = !((Boolean)propertyManager.getProperty(Constants.ZEPHYR_PROPERTY_PREFIX + Constants.IGNORE_EXTERNAL_DTD)).booleanValue();
        // JAXP 1.5 feature
        XMLSecurityPropertyManager spm = (XMLSecurityPropertyManager) propertyManager.getProperty(XML_SECURITY_PROPERTY_MANAGER);
        fAccessExternalDTD = spm.getValue(XMLSecurityPropertyManager.Property.ACCESS_EXTERNAL_DTD);
        fSecurityManager = (XMLSecurityManager)propertyManager.getProperty(SECURITY_MANAGER);
        fLimitAnalyzer = new XMLLimitAnalyzer();
        //reset fEntityStorage
        fEntityStorage.reset(propertyManager);
        //reset XMLEntityReaderImpl
        fEntityScanner.reset(propertyManager);
        // initialize state
        //fStandalone = false;
        fEntities.clear();
        fEntityStack.removeAllElements();
        fCurrentEntity = null;
        fValidation = false;
        fExternalGeneralEntities = true;
        fExternalParameterEntities = true;
        fAllowJavaEncodings = true ;
    }
可以看到这三行对于`XMLInputFactory`参数的处理
    fSupportDTD = ((Boolean)propertyManager.getProperty(XMLInputFactory.SUPPORT_DTD)).booleanValue();
    fReplaceEntityReferences = ((Boolean)propertyManager.getProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES)).booleanValue();
    fSupportExternalEntities = ((Boolean)propertyManager.getProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES)).booleanValue();
设置完参数之后，就和之前差不多，来到之前跟过的XML解析的`scanEntityReference`部分。`com/sun/org/apache/xerces/internal/impl/XMLDocumentFragmentScannerImpl.java:1890`
    //1. if the entity is external and support to external entities is not required
    // 2. or entities should not be replaced
    //3. or if it is built in entity reference.
    boolean isEE = fEntityStore.isExternalEntity(name);
    if((isEE && !fSupportExternalEntities) || (!isEE && !fReplaceEntityReferences) || foundBuiltInRefs){
        fScannerState = SCANNER_STATE_REFERENCE;
        return ;
    }
    // start general entity
    if (!fEntityStore.isDeclaredEntity(name)) {
        //SUPPORT_DTD=false && ReplaceEntityReferences should throw exception
        if (!fSupportDTD && fReplaceEntityReferences) {
            reportFatalError("EntityNotDeclared", new Object[]{name});
            return;
        }
        //REVISIT: one more case needs to be included: external PE and standalone is no
        if ( fHasExternalDTD && !fStandalone) {
            if (fValidation)
                fErrorReporter.reportError(fEntityScanner, XMLMessageFormatter.XML_DOMAIN,"EntityNotDeclared",
                                           new Object[]{name}, XMLErrorReporter.SEVERITY_ERROR);
        } else
            reportFatalError("EntityNotDeclared", new Object[]{name});
    }
可以看到这里对`fSupportExternalEntities`和`fSupportDTD`都进行了判断，抛出对应的异常。
# 一些总结
虽然只分析了两种XML解析的方式，但比较庆幸的是，其余几种XML的解析库，底层调用的都是`com.sun.org.apache.xerces.internal`中xml解析的代码，还算是有一定的共性。
（但个人感觉参数的设置其实还是相当冗余和混乱的，没有一个统一的规范，比如`XMLInputFactory`的参数就可以看出，在很多环节做了很多重复判断）
大致可以根据防御的属性和XMLEntityManager中的注释可以做以下的分类
1、sax features
    // http://javax.xml.XMLConstants/feature/secure-processing
    XMLConstants.FEATURE_SECURE_PROCESSING
    // http://javax.xml.XMLConstants/property/accessExternalDTD
    XMLConstants.ACCESS_EXTERNAL_DTD
    // http://javax.xml.XMLConstants/property/accessExternalStylesheet
    XMLConstants.ACCESS_EXTERNAL_STYLESHEET
    // http://javax.xml.XMLConstants/property/accessExternalSchema
    XMLConstants.ACCESS_EXTERNAL_SCHEMA
`FEATURE_SECURE_PROCESSING`相当于`ACCESS_EXTERNAL_DTD`和`ACCESS_EXTERNAL_SCHEMA`
将外部实体中允许的协议设为空，相当于允许外部实体的加载，但是禁用协议，只允许一些常量的定义
2、指定部位的解析
    // sax features
    // http://xml.org/sax/features/external-general-entities
    fExternalGeneralEntities = componentManager.getFeature(EXTERNAL_GENERAL_ENTITIES, true);
    // http://xml.org/sax/features/external-parameter-entities
    fExternalParameterEntities = componentManager.getFeature(EXTERNAL_PARAMETER_ENTITIES, true);
    // xerces features
    // http://apache.org/xml/features/nonvalidating/load-external-dtd
    fLoadExternalDTD = componentManager.getFeature(LOAD_EXTERNAL_DTD, true);
相当于设置XMl解析的时候，解析指定的部分，所以这种参数的设置之后也不会抛出异常
3、StAX Property
    // javax.xml.stream.supportDTD
    fSupportDTD = ((Boolean)propertyManager.getProperty(XMLInputFactory.SUPPORT_DTD)).booleanValue();
    // javax.xml.stream.isSupportingExternalEntitie
    fSupportExternalEntities = ((Boolean)propertyManager.getProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES)).booleanValue();
    // javax.xml.stream.isReplacingEntityReferences
    fReplaceEntityReferences = ((Boolean)propertyManager.getProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES)).booleanValue();
感觉像是为XMLInput额外添加的属性，作用其实是和之前禁用的差不多，解析外部实体时会抛出异常。
4、disallow-doctype-decl
    http://apache.org/xml/features/disallow-doctype-decl
相当于在scanner解析的时候，做了一个判断，设置了之后则禁止Doctype的解析
# 最后的最后
算是大致搞懂了设置feature中的原理，虽然没有完整的跟完每一个的流程，但是最后的解析xml库确实是同一个，那大致原理应该也就类似，之前每个库可能前期会做很多设置，一味的跟这一部分其实没有太多意义。
最后的感觉就是，这种feature的设置，感觉应该是前期设计的时候没有考虑到XXE这部分，后期对在原有基础上的修改，增加了很多的属性，和很多的if判断，弄得代码禁用的方式有些千奇百怪，没有一个统一的方式（当然只是我猜的）。而且没有文档的情况下，开发人员也很难知道要设置哪些值，分别对应那些限制。
感谢能看到最后，由于个人能力有限分析的过程中有些没讲清楚，或者错误的地方欢迎各位指出：）