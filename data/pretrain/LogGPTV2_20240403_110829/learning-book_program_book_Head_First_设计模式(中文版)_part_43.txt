不用再将实现的细节暴露出
器。做法很筒单：
去了。
你只要调用valaes
itetatonO.就可以取
得一个选代器。
但还有更多！
ava提供你许多的“collection”类（例
如：Vecton和linkedlist）.让你能够存
取一群对象。
Linkedlist
Vector
它们具有不同的接口。
C
但尽管如此，几乎
这些类都金提供方
·…..·还有更多！
法让我们疑得进代
器。
而如果他们不支持进代器的话
也没关系，因为现在你已经知道
如何自己动手创建一个选代器了。
你现在的位置
347
---
## Page 384
选代器与集合
送代器与集合
我们所使用的这些类都属于JavaCollectionFramework的一部分。这
里所谓的“framework”（框架）指的是一群类和接口，其中包括了
ArrayList、Vector、LinkedList、Stack和IPriorityQueue。这些类都实现
了java.util.Collection接口。这个接口包含了许多有用的方法，可以操
纵一群对象。
让我们快速地浏览这个接口：
>
Collection
这里有许多好东西。你可以从集合中新
add)
增或删除元意，而无需知道这个集合是
addAB()
注意！
clear()
如何实现的。
Hashtable对于选代器的支
contains()
containsAR
持是“间接的”。当我们
hashCode()
equals(]
这是我们的老朋友，iterator(）方法。利用
在实现咖啡厅菜单的时候，
isEmpty0
这个方法，你可以取得任意类的选代器，
你可以从中取得一个选代
iterator
该选代器实现了Jterator接口。
器，但是这个选代器不是
remove()
moveA8)
直接从Hashtable取出，而
retainAI)
是由Hashtable的value取出
size0
其他的方法，包括：sixe(）.可以取得元
的。仔细想想，这很有道理：
toArray(
素的个数，而toArmay（）用来将集合转成数
Hashtable内部存储了两组对
组。
象：key和value。如果我们想
要遍历value，当然是要先从
Hashtable取得value，然后再
取得迭代器。
Colleetion和
Iterator的好处在于，每个Colleetion都
知递如何创建自己的lterator。只要调用
ArrayList上的iterator（），就可以返回一个
具体的lterator，而你根本不需要知递或关
心到底使用了哪个具体类，你只要使用它的
Iterator接口就可以了。
348
嘉6L
---
## Page 385
选代器与组合模式
Java5的选代器和集合
告诉你，在Java5中，
所有的集合都已经新增了
对逸历的支持，所以你
甚至不再需要请求选代
器了。
Java5包含一种新形式的for语句，称为for/in。这可以
让你在一个集合或者一个数组中遍历，而且不需要显
式创建选代器。
想使用for/in，语法是这样的：
在集合中的每
每次到继环的最后，
个对象之阅反
obj会被赋值为集合中
复进历。
的下一个元素。
for （object obj:collection）(
产生一个莱单项的
下面是利用for/in遍历ArrayList的例子：
Arraylist,
ArrayList items = new ArrayList ();
items.add (new MenuItem("Pancakes", “delicious pancakes", true,
items.add (new MenuItem(*Waffles", “yummy waffles", true, 1.99) ;
1.59)
items.add(new MenuItem("Toast", “perfect toast", true, 0.59);
for (MenuItem item: items)(
System.out.println("Breakfast item: " + item) ;
遍历并打印出每一个菜单项
注意！
你需要使用Java5的泛型（generic）新
特性来确保for/in的类型安全。在开始
使用generic和for/in之前，请务必继续
读下去。
你现在的位置》
349
---
## Page 386
代码帖
代码帖
厨师们决定午餐的菜单项能交替的改变：也就是说，他们希望在周一、周三、周五和周六提供一
些项，然后在周二、周四和周日提供另一些项。
有人已经为新的“轮换”餐厅菜单选代器书写了代码，但是他们开了一个玩笑，把它打乱并放
在冰箱上了。你能够把代码再组织回来吗？其中有些大括号的纸片掉在了地板上，因为太小，
不容易捡起来，所以如果有需要的话你可以自己加上大括号。
MenuItem menuItem = items[position];
position =position + 2;
return menuItem;
import java.util.Iterator;
import java.util.Calendar;
public Object next()
public AlternatingDinerMenuIterator (MenuItem[] items)
this.items =items;
Calendar rightNow =(
Calendar.getInstance();
position rightNow.get(calendar.DAY_OF_WEEK)
82；
public void remove()(
implements Iterator
MenuItem[] items;
int
position;
public class AlternatingDinerMenuIterator
public boolean hasNext()(
throw new UnsupportedoperationException(
"Alternating Diner Menu Iterator does not support remove()");
ae null)
if (position >= items.length 11items[position]
return false;
else{
return true;
350
第9章
---
## Page 387
选代器与组合模式
女招待准备好迎接精采时刻了吗？
我们花了很多时间在女招待上，但还是得承认，程序中调用三
次printMenuO，看来实在有点丑。
看清现实，每次我们一有新菜单加人，就必须打开女招待实现
并加入更多的代码。这算不算是“违反开放-关闭原则”？
调用cveateJtenator三次
public void printMenu()(
Iterator dinerIterator = dinerMenu.createIterator() ;
Iterator cafeIterator = cafeMenu.createIterator ();
System. out.println("MENU\n----\nBREAKFAST") ;
printMenu (pancakeIterator) ;
System.out,println("\nLUNCH");
printMenu (dinerIterator);
调用ptintMena(）三次。
System.out.println("\nDINNER") ;
printMenu(cafeIterator) ;
K
每次我们新增或删除一个莱单，就必
须打开这份代码来修改。
这不是女招待的错。对于将她从菜单的实现上解耦和提取遍历动作到选代器，我们都做得很好。
但我们仍然将菜单处理成分离而独立的对象一我们需要一种一起管理它们的方法。
BRAIN
LPOWER
女招待仍然需要调用printMenuO三次，每个菜单一次。你能够想到什么方式将菜单合并以便
只需调用一次就可以了？或者只传给女招待一个选代器，利用这个选代器就可以遍历所有的
菜单？
你现在的位置
351
---
## Page 388
新设计？
这做法不错，我们所要做的
事，就是将这些菜单全都打包进
个ArrayList，然后取得它的选代器，逸
历每个菜单。这么一来，女招待的代码
就变得很筒单，而且菜单再多也不
怕了。
听起来厨师已有定见，我们试试看：
现在我们只需夏一个菜
public class Waitress {
单Azraylist。
ArrayList menus;
public Waitress (ArrayList menus){
this.menus = menus;
我们遍历莱单，把
每个莱单的选代
public void printMenu () (
器传给重载的
Iterator menuIterator = menus.iterator();
while (menuIterator.hasNext ())(
princMena(）方法。
Menu menu = (Menu)menuIterator.next();
printMenu (menu.createIterator ()) ;
void printMenu(Iterator iterator) {
这里的代码不需
while (iterator.hasNext ())(
MenuItem menuItem = (MenuItem) iterator.next ();
要改变。
f
System.out.print(menuItem.getName () + ",") ;
System.out.print (menuItem.getPrice () + " -- ");
System.out.println (menuItem.getDescription ()) ;
看起来相当不错，虽然我们失去了菜单的名字，但是可以把名
字加进每个菜单中。
352
第9章
---
## Page 389
选代器与组合模式
正当我们认为这很安全的时候·····
现在他们希望能够加上一份餐后甜点的“子菜单”。
现在怎么办？我们不仅仅要支持多个菜单，甚至还要支持菜单
我刚刚听说餐厅将要创
中的菜单。
建一份点菜单，并将它插
进常规的菜单中。
如果我们能让甜点菜单变成餐厅菜单集合的一个元素，那该有
多好。但是根据现在的实现，根本做不到。
我们想要的（类似这样）：
所有菜单
这是我们的Araylist，持有每家
3
餐馆的莱单。
煎饼屋菜单
咖啡厅菜单
餐厅菜单
Artay
90
80
甜点菜单
Hashtable
ArtayCist
我们需要让餐厅菜单持有一份子菜单，但是不
O
能真的把它赋值给莱单项数组，因为类型不
同，所以不能这么做。
我们不能把甜点菜单赋值给菜单项数组。
PDG
但是这行不通！
又要修改了！
你现在的位置》
353
---
## Page 390
重构的时刻来临
我们需要什么？
该是做决策来改写厨师的实现以符合所有菜单（以
及子菜单）的需求的时候了。没错，我们要告诉厨
师，重新实现他们的菜单已经是不可避免的了。
事实是，我们已经到达了一个复杂级别，如果现在
不重新设计，就无法容纳未来增加的菜单或子菜单
等需求。
所以，在我们的新设计中，真正需要些什么呢？
■我们需要某种树形结构，可以容纳菜单、子菜
单和菜单项。
■我们需要确定能够在每个菜单的各个项之间游
走，而且至少要像现在用选代器一样方便。
■我们也需要能够更有弹性地在菜单项之间游走。
比方说，可能只需要遍历甜点菜单，或者可以
遍历餐厅的整个菜单（包括甜点菜单在内）。
时候到了，就必须重
构我们的代码，使它能够成
长。如累不这么做，就会导致僵
化和没有弹性的代码，完全录不
到萌发新生命的命望。
354
真6集
---
## Page 391
选代器与组合模式
因为我们需要表现莱单、嵌
套子莱单和莱单项，我们很
自然地采用树形结构以便符
合这样的需求。
我们需要容纳莱单.·
厅
以及子莱单
……还有更多的
莱单项。
我们仍然需要能在
我们也需要更有弹性的游走方式
树上的所有项之间
比方说，我们可能只需要遍历餐厅
游走。
的甜点莱单，也可能需要遍历餐厅
的全部莱单，包括甜点莱单。
你如何处理这个新的设计需求？在翻页之前请先想一想。
你现在的位置
355
---
## Page 392
定义组合模式
定义组合模式
这是一个树形结构
没错，我们要介绍另一个模式解决这个难题。我们并
没有放弃选代器—它仍然是我们解决方案中的一部
带子元素的元素
分一—然而，管理菜单的问题已经到了一个选代器无法
称为节点
解决的新维度。所以，我们将倒退几步，改用组合模式
(node)。
（CompositePattern）来实现这一部分。
Nbde
对于这个模式，我们不打算深入探讨，只在这里提出它
的正式定义：
组合模式允许你将对象组合成树形结构来
Lect
表现“整体/部分”层次结构。组合能让客户以
>
一致的方式处理个别对象以及对象组合。
没有子元素的元素称为叶节
点（leas)。
让我们以菜单为例思考这一切：这个模式能够创建一
个树形结构，在同一个结构中处理嵌套菜单和菜单项
组。通过将菜单和项放在相同的结构中，我们创建了一
个“整体/部分”层次结构，即由菜单和菜单项组成的对
象树。但是可以将它视为一个整体，像是一个丰富的大
菜单“译注：uberr来自德文，相当于英文的over”。
我们可以在树形
结构内表达莱单
一且有了丰富的大菜单，我们就可以使用这个模式
和莱单项。
来“统一处理个别对象和组合对象”。这意味着什么？
它意味着，如果我们有了一个树形结构的菜单、子菜单
和可能还带有菜单项的子菜单，那么任何一个菜单都是
一种“组合”。因为它既可以包含其他菜单，也可以包
含菜单项。个别对象只是菜单项一并未持有其他对象。
就像你将看到的，使用一个遵照组合模式的设计，让我
们能够写出简单的代码，就能够对整个菜单结构应用相
K↑>
同的操作（例如打印！）。
莱单（Memz）是节点.而莱单
项（Menatem）是叶节点。
356
第9章