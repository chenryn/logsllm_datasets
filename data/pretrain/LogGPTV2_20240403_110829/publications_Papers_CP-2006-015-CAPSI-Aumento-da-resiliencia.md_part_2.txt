interface WSDL do serviço, o serviço em sí é fornecido por um grupo de peers na secção C. A
secção C é uma rede peer-to-peer que disponibiliza os serviços definidos pelas interfaces
WSDL na secção B. Cada peer, na rede da secção B, disponibiliza o “mesmo” serviço, ou pelo
menos o resultado desse serviço é satisfatoriamente o mesmo. Ainda na secção B, é iniciado um
proxy, “dentro” da interface do Web service, que invoca a execução do serviço JXTA. Entre as
duas tecnologias, o proxy vai se ligar ao grupo ao qual está implicitamente associado
programaticamente, ou, alternativamente pode procurar um qualquer grupo que forneça o
serviço pretendido, por exemplo, através de um par atributo/valor.
Figura 1 Arquitectura
Mais detalhadamente os elementos desta arquitectura são:
Proxy: O proxy é uma aplicação iniciada pelo Web service que “fala” JXTA. Permite relegar a
execução do Web service para a infra-estrutura JXTA e receber um resultado. O proxy faz assim
o mapeamento entre serviços descritos usando WSDL da tecnologia Web Services e serviços
JXTA. Esta questão é apresentada mais detalhadamente na secção 4.5 Questões de
implementação.
Peer: um peer é um nó de uma rede peer-to-peer. Na nossa arquitectura temos dois tipos de
peers: o proxy e peer de grupo. Este último fornece serviços replicados. Cada peer pode conter
uma implementação diferente do mesmo serviço. Por Exemplo, dois peers podem fornecer o
mesmo serviço de acesso a uma base de dados relacional usando tecnologias diferentes,
C++/ODBC ou Java/JDBC.
Group service: um grupo é composto de peers que disponibilizam um dos serviços definidos no
servidor de Web services. A cada Web service corresponde pelo menos um grupo.
6ª Conferência da Associação Portuguesa de Sistemas de Informação
26, 27 e 28 de Outubro de 2005
Bragança – Portugal
Bully Service: bullyservice é um serviço que todos os grupos da infra-estrutura implementam.
Trata-se do algoritmo Bully para eleição de um coordenador e é executado no âmbito de um
grupo. Cada peer tem um Id associado. O algoritmo garante simplesmente que o peer com
maior Id será o peer fornecedor de serviços, se este peer falhar o algoritmo garante que o peer
activo com Id imediatamente inferior será o novo fornecedor do serviço.
DiscoveryService: DiscoveryService é um core service de qualquer implementação dos
protocolos JXTA. É especificado pelo Peer Discovery Protocol. Todos os grupos dispõem deste
serviço para que os seus peers possam descobrir outros peers, groups, pipes, sob a forma de
anúncios XML.
PipeService: PipeService é core service JXTA que permite que dois peers estabeleçam um
canal de comunicação.
Web Services Client: é uma aplicação que invoca um Web service. É uma aplicação que usa a
tecnologia Web Services para aceder a um fornecedor de um Web service. A aplicação cliente
pode conhecer o endereço e interface do serviço ou procurar o serviço através de um registo
UDDI.
Web Server: É um servidor de JSPs, Servlets ou Web services. Na nossa implementação foi
usado Tomcat 5.x e Axis 1.x.
Usamos JXTA por esta tecnologia, para além de ser uma grande aposta de padronização,
oferecer também os mecanismos necessários para a implementação da infra-estrutura. O
conceito de grupo é um conceito bem estudado na tecnologia JXTA. O âmbito de um grupo é
útil para implementação de uma camada de QoS como a procura de serviços por par
atributo/valor, mecanismos de autenticação, segurança, agregação de serviços, etc. A
disponibilização de serviços de grupo, group services, permite que cada peer que se junte a esse
grupo possa fornecer os serviços definidos para esse grupo. A qualquer altura um peer pode ser
introduzido, ou retirado, da rede para fornecer mais ou menos disponibilidade de serviços. Os
serviços que esse grupo implementa podem ser também implementados por um novo peer,
ainda que este não conheça a implementação do serviço. Estas ideias são exemplificadas na
secção 4.5 Questões de implementação.
Características da Arquitectura
A arquitectura apresentada na subsecção anterior possui como principais características:
interoperabilidade, que herda da tecnologia Web Services, sendo facilmente integrável com
outros Web services; escalabilidade por ser fácil acrescentar peers num grupo de um qualquer
serviço; transparência porque o tratamento de falhas é feito independentemente do cliente do
Web service; e apresenta um low overhead na medida em que a tecnologia JXTA usada possui
um conjunto de características que tornam fácil a implementação do sistema. Discutimos em
mais detalhe esta última característica na secção que se segue.
4.2 JXTA Core building blocks
JXTA, pronunciado juxta, de juxtapose - justaposto, é uma plataforma de programação de redes,
introduzida em 2001 pela SUN Microsystems, e desenhada para resolver uma série de
problemas da computação distribuída moderna, especialmente na área das redes peer-to-peer. A
tecnologia JXTA tem como principal objectivo fornecer uma plataforma com as funções básicas
para o desenvolvimento de redes peer-to-peer. Além disso pretende ter como principais
características: interoperabilidade entre diferentes peers que fornecem serviços peer-to-peer;
independência da plataforma em relação a linguagens de programação, protocolos de transporte
ou plataformas de distribuição; ubiquidade, permitindo que qualquer dispositivo com um
heartbeat digital possa ser acessível. Os conceitos JXTA incluem peers, peergroups, pipes,
messages, endpoints, serviços, advertisements, modules, rendezvous e segurança. Um peer é
qualquer dispositivo na rede capaz de fazer computações.
6ª Conferência da Associação Portuguesa de Sistemas de Informação
26, 27 e 28 de Outubro de 2005
Bragança – Portugal
Um peergroup é um conjunto de peers que partilham o mesmo conjunto de serviços e recursos.
Tipicamente estes grupos são criados com base no interesse mútuo dos peers. Peers interessados
num certo conjunto de serviços vão se agrupar, formando um âmbito de procura. Um peergroup
pode ainda servir de âmbito para autenticação e monitorização.
No protocolo de transporte de rede temos os conceitos de endpoints, pipes e messages.
Endpoints são interfaces de rede que indicam a fonte/destinatário de qualquer peça de
informação trocada. Pipes (dutos) são canais virtuais de comunicação unidireccionais e
assíncronos entre dois endpoints. Messages são containers para dados transmitidos num pipe de
um endpoint para outro.
Serviços são funcionalidades que um peer pode invocar remotamente para obter um resultado
útil. Podemos dividir serviços JXTA em duas categorias: peer services e group services. Peer
services são serviços associados exclusivamente a um peer. Quando esse peer sai da rede os
serviços desse peer deixam de estar disponíveis se nenhuma replicação explícita for feita.
Groups services são funcionalidades que um grupo oferece a qualquer membro desse grupo.
Esta funcionalidade pode ser disponibilizada por vários peers permitindo redundância. Desde
que um peer esteja num peer group os serviços desse grupo estão disponíveis. A plataforma
JXTA fornece um conjunto de serviços fundamentais para a gestão do grupo como: Discovery
Service, Membership Service, Access Service, Pipe Service, Resolver Service, Monitoring
Service. O utilizador pode definir serviços específicos num grupo.
Advertisements são anúncios XML de uma determinada entidade na rede. Peers, peer groups,
pipes e services são anunciados na rede JXTA usando advertisements.
Um Module é um pedaço de código (funcionalidade) que pode ser carregado e instanciado num
peer dinamicamente (em runtime). Os modules são publicados num peer group usando
advertisements que definem o seu comportamento geral, uma especificação e uma
implementação. Um peer pode carregar e instanciar uma implementação já existente noutro
peer, ou diferentes implementações da mesma funcionalidade podem ser feitas em diferentes
linguagens, em diferentes contextos.
Rendezvous peers são peers que agem como um ponto de encontro para os anúncios de serviços
e recursos ou simples presença de peers comuns. Relay peers são peers que permitem a rede
alargar-se para além de firewalls e NAT (Network Adress Translaction).
A segurança na tecnologia JXTA é fornecida pela possibilidade de encriptação de mensagens à
saída de cada endpoint, permitindo integridade, autenticação e confidencialidade.
4.3 Bully: Algoritmo de eleição de coordenador
Por vezes é necessário haver uma entidade coordenadora em sistemas distribuídos. Isto implica
o uso de algoritmos distribuídos, i. é, algoritmos onde a decisão é descentralizada. O Algortimo
Bully [Garcia Molina 1982] é um algoritmo clássico da computação distribuída que aborda o
problema da eleição de um coordenador num sistema distribuído. Foram propostas algumas
alterações desde então [Mamum e tal 2004, Stoller 1997]. O algoritmo Bully define para cada
peer uma prioridade (peso ou simples Id). O peer com Id mais elevado deve ser o coordenador.
Se um peer detectar que o coordenador falhou deve iniciar uma eleição. Se não houver nenhum
nó na rede com maior Id, este peer é o segundo nó com maior Id, e é eleito coordenador. Se não,
espera que um nó com maior Id se eleja como coordenador. Cada nó sabe o ID de todos os
outros nós no sistema distribuído. Todos os peers podem iniciar uma eleição se detectarem que
o coordenador não responde a um pedido de acknowledge. Um nó de rede pode estar num de
três estados: recém recuperado – desconhece o coordenador, em estado de eleição e em estado
normal. Em certas situações poderá ser acrescentado o estado de recuperação, onde o sistema
redistribui tarefas pelos peers. Cada nó no estado normal (e de recuperação se for o caso) sabe o
ID do coordenador corrente. Este algoritmo é síncrono na medida em que tempos de espera são
definidos dentro dos quais respostas têm de ser recebidas.
6ª Conferência da Associação Portuguesa de Sistemas de Informação
26, 27 e 28 de Outubro de 2005
Bragança – Portugal
No nosso sistema o algoritmo Bully foi usado para eleger o peer fornecedor de serviços activo.
Na presença de erros que originem a falha de disponibilidade do peer fornecedor, a execução do
algoritmo garante que outro peer ficará responsável pelo fornecimento do mesmo serviço.
4.4 Questões de implementação/Protótipo
A implementação foi feita usando a linguagem Java, a plataforma JXTA, e a tecnologia Web
Services através de Tomcat/Axis. A linguagem Java e a plataforma JXTA de desenvolvimento
Peer-to-Peer foram escolhidas devido às características de interoperabilidade e independência
da plataforma, importantes em aplicações Web. Tomcat foi excolhido por ser um servidor
simples e leve, juntamente com Axis, a extensão de Tomcat para Web services.
Interacção Web Services/JXTA
No servidor Tomcat/Axis é colocado o Web service. O Web service engloba um proxy que faz a
“tradução” entre Web services e JXTA. Na implementação do proxy deparámo-nos primeiro
com uma questão ligada a decisões de arquitectura da interface Java da tecnologia JXTA. O
protocolo define NetPeerGroup como o PeerGroup global que permite descoberta de peers e
troca de mensagens na rede JXTA global. O NetPeerGroup é uma instância única (singleton) da
classe PeerGroup. Por outro lado o netPeerGroup tem de ser instanciado no bootstrap de cada
peer. Como cada vez que o Web service é invocado, o proxy também o é, há simplesmente que
garantir que apenas uma instância de netPeerGroup possa ser criada usando o modificador static
juntamente com o método seguinte para criar o NetPeerGroup.
private synchronized void init() throws PeerGroupException {
try {
if (netPeerGroup == null)
netPeerGroup = PeerGroupFactory.newNetPeerGroup();
} catch (Exception e) { …}
}
Descrição de Web services e de Peer services.
Na tecnologia Web Services define-se um serviço e os seus detalhes de invocação com uma