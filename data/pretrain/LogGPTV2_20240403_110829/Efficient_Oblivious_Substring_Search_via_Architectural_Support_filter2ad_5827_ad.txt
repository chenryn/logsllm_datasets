off ← SelectOffset(bid, Meta)
Offsets ← Offsets ∪ {off}
Meta.invalid[off] ← true, Meta.cnt + +
1 Metadata ← FetchBucketsMetadata(lid), Offsets ← ∅
2 foreach Meta ∈ Metadata do
3
4
5
6 Blks ← FetchBlocks(lid, Offsets), dest.bid ← ⊥
7 foreach blk ∈ Blks do
8
9 write ← dest.bid = bid
10 foreach blk ∈ Stash do
11
12
13
14
15 foreach i ← 0 to log( N +1
2
16
17
18
19
20 WriteMetadata(lid, Metadata)
21 return dest
OblWrite(bid = blk.bid, dest, blk)
OblWrite(blk.bid = ⊥ ∧ write, blk, dest)
OblWrite(bid = blk.bid, blk.lid, lid′)
write ← write ∧ blk.bid (cid:44) bid
)−1 do
if Metadata[i].cnt ≥ D then
Blks ← FetchValidBlocksInBucket(lid, i)
Bucket ← EarlyReshuffle(Blks, Metadata[i])
WriteBucket(lid, i, bucket)
method chooses uniformly at random a block among the dummy
valid ones without revealing which blocks are dummies.
In the oblivious EarlyReshuffle procedure, Z blocks have to
be randomly placed over Z +D slots of the bucket. To this ex-
tent, the i-th block, i=1, . . . , Z, is obliviously written in the off -
th free slot of the bucket, where off is uniformly sampled from
{1, . . . , Z +D−i+1}; the block and leaf ids in the bucket metadata are
updated accordingly. Since the bucket is initialized with all dummy
blocks, after Z sweeps, each writing one block, D slots of the bucket
certainly contain a dummy block. As this strategy requires Z obliv-
ious writes over a bucket with Z +D slots, EarlyReshuffle costs
O(Z·(Z +D)·B) per bucket. We show in Appendix A.3 that this strat-
egy guarantees that each block is placed with uniform probability
over all the Z +D slots of the bucket.
In the oblivious FindBlock procedure, reported in Alg. 4, first
the metadata for all the buckets along the path with id lid are
fetched (line 1). Then, the procedure iterates over the metadata
to choose one block per bucket to be retrieved from the server
(lines 2-5). The offset of the chosen block in the bucket, computed
by the SelectOffset procedure (line 3), is appended to the set
Offsets (line 4). Furthermore, the bucket metadata are updated by
marking the chosen block as invalid and by increasing the number
of accesses to the bucket (line 5). Subsequently, the DORAM server,
upon receiving from the client the id of the path lid and, for each
bucket in this path, the offset of the block to be retrieved, sends
back the O(log(N)) blocks requested by the client (line 6), among
which the client obliviously searches the block with id bid through
a linear sweep (lines 7-8). Then, the DORAM client iterates over
the stash (lines 9-14) to either insert the block retrieved from the
server (line 12) or locate the block with id bid (line 11). Afterwards,
the FindBlock procedure, for each bucket, invokes, if necessary
(line 16), the EarlyReshuffle procedure (line 18), fetching the Z
valid blocks left in the bucket from the DORAM tree (line 17) and
Efficient Oblivious Substring Search via Architectural Support
ACSAC 2020, December 7–11, 2020, Austin, USA
lid: id of Path
Algorithm 5: Eviction in Circuit DORAM
Input: Path: path to be evicted
Data: Stash: S real/dummy blocks not evicted to the DORAM yet
1 dest ← ComputeDestinations(Path, lid)
2 max_depth ← −1, target ← dest[0], hold.bid = ⊥
3 foreach blk ∈ Stash do
4
5
6
depth ← MaxDepth(blk.lid, lid)
OblSwap(dest[0](cid:44)⊥∧depth>max_depth, hold, blk)
OblWrite(depth > max_depth, max_depth, depth)
7 for i ← 0 to log(N +1)−2 do
max_depth ← i, deeper_bucket ← (target(cid:44)i ∧ target(cid:44)⊥)
foreach blk ∈ Path[i] do
depth ← MaxDepth(blk.lid, lid)
swap ← (dest[i+1](cid:44)⊥ ∧ depth>max_depth) ∨
(dest[i+1]=⊥∧blk.bid=⊥)
OblSwap(swap ∧ ¬deeper_bucket, hold, blk)
OblWrite(depth>max_depth, max_depth, depth)
OblWrite(¬deeper_bucket, target, dest[i+1])
8
9
10
11
12
13
14
writing the whole bucket back after the reshuffle (line 19). Lastly,
the FindBlock procedure writes back the updated metadata to the
DORAM tree (line 20).
The Eviction procedure follows the blueprint of the oblivi-
ous one described in Path DORAM. Indeed, although buckets in
Ring DORAM has Z +D slots, at most Z of them may be filled with
real blocks; hence, buckets with Z slots can be employed during
evictions, as in Path DORAM. At the end of the Eviction, the
EarlyReshuffle procedure is invoked on each of these buckets
with Z blocks to construct a bucket with Z +D blocks, which is
written back to the DORAM tree after re-encryption. As in Path
DORAM, Eviction is split in two phases: in-place and stash evic-
tion. While the latter works exactly as in Path DORAM, in the
former, for each bucket, only the R≤Z valid real blocks must be
evicted, while all the other Z +D−R blocks can be discarded, as they
are either dummies or invalid real blocks. To avoid leaking R to
the adversary, during in-place eviction the client has to always
choose Z blocks for each bucket. In particular, for each bucket, the
client must choose Z blocks out of the V ≥Z valid blocks: R real
valid blocks and Z−R blocks among the V−R dummy valid blocks.
To this extent, we employ the Knuth’s algorithm reported in [25,
pag. 142], which chooses uniformly at random k elements out of h
ones, with k≤h; this algorithm can be trivially made oblivious by
relying on oblivious write/swap primitives while retaining O(h)
computational complexity. Once the offsets of the Z blocks are com-
puted, they are obliviously fetched from the bucket with Z linear
sweeps and evicted in deeper buckets. The overall computational
cost of Eviction procedure is O(log(N)·B·Z(log(N)·Z +S+Z +D)),
which is the sum of the costs of in-place eviction, stash eviction
and EarlyReshuffle for all the buckets along the evicted path,
respectively; this cost is amortized over A≥1 DORAM accesses.
3.3 Circuit DORAM
The simplicity of the client in Circuit ORAM makes its oblivious
design the easiest one among our three DORAMs. The FindBlock
procedure in our Circuit DORAM is equivalent to our Path DORAM,
reported in Alg. 2. Conversely, the Eviction procedure of Circuit
ORAM significantly differs from the one of Path and Ring ORAMs.
Specifically, the non-oblivious eviction involves two sweeps over
Table 2: Client-side asymptotic computational costs
FindBlock
Eviction
ORAM
our DORAM
our DORAM
O(log(N)·Z·B) O(log(N)·Z·B) O(B·log(N)·Z) O( log2(N)·Z 2·B
)
Path
) O( log2(N)·Z 2·B
)
O(log(N)·B) O(log(N)·B)
Ring
Circuit O(log(N)·Z·B) O(log(N)·Z·B) O(log(N)·Z·B) O(log(N)·Z·B)
O( B·log(N)·Z
ORAM
A
A
A
the metadata of the evicted path (which correspond to the block
ids and the corresponding leaf ids), and a single sweep over the
evicted path. In the oblivious Eviction procedure, reported in
Alg. 5, the two sweeps over the metadata are performed by the
ComputeDestinations procedure (line 1), which compute, for
the stash and for each bucket in the evicted path, the additional
metadata dest. To avoid leaking these metadata while computing
them, we employ oblivious writes to remove conditional dependent
updates to these metadata. In the subsequent sweep over the evicted
path (lines 2-14), dest specify how the blocks must be moved among
buckets: indeed, for each i ∈ {0, . . . , log(N +1)−1} (dest[0] refers
to the stash), dest[i] stores the bucket where the block of the i-
th bucket that can go deepest in the path must be moved, while
dest[i]=⊥ if no block from the the i-th bucket must be moved
down in the path. During the sweep over the evicted path, at most
one block, stored in hold, is simultaneously moved down along
this path; the variable target stores the destination bucket of such
block. Throughout the sweep over the evicted path, a procedure
MaxDepth allows to compute the deepest bucket of the path that
can store a given block by hinging upon the leaf id of the block at
hand and the id of the evicted path. First, the block in the stash that
can go deepest in the path is obliviously moved to hold through a
linear sweep of the stash (lines 3-6). Then, this block is moved to
its destination bucket, where it is swapped (line 12) with either a
dummy block, in case no block in the destination bucket must be
moved down (i.e., if dest[i+1]=⊥ in line 11), or with the block in the
destination bucket than can go deepest in the path (lines 11, 13). The
computational cost of oblivious Eviction is O(B·(S+log(N)·Z)),
given by the linear sweeps over the stash and the evicted path,
respectively.
To conclude, we summarize the computational costs of clients
of our DORAMs in Tab. 2. We observe that Circuit DORAM is
asymptotically faster than Ring and Path DORAMs; nonetheless,
as 3 paths have to be fetched and written back for each DORAM
access, a performance gain may be observed only for DORAMs
with a significant number of blocks. Instead, Ring DORAM saves
a factor of Z in the computational cost of the FindBlock proce-
dure; nonetheless, its oblivious algorithms involve cumbersome
operations, which may increase actual response time of DORAM
accesses.
3.4 Security Against Malicious Adversaries
In all our DORAMs, we add a mechanism to efficiently detect any
tampering (including replacement with old blocks) on any path
fetched from the DORAM, while storing in the enclave a single di-
gest for the whole DORAM. Specifically, we combine the DORAM
ACSAC 2020, December 7–11, 2020, Austin, USA
N. Mainardi, D. Sampietro, A. Barenghi, G. Pelosi
Algorithm 6: Oblivious Rank procedure with ABWT strat-
egy for a string s ∈ Σn with BWT L
Input: c: character of the alphabet Σ
i: integer in {0, . . . , n+1}
Output: ctr: number of occurrences of c in L[0, . . . , i]
Data: DORAM: DORAM storing the ABWT AP with sample period P
P ⌋)
1 Entry ← DORAM.Access(⌊ i
2 foreach char ∈ Σ do
4 for j ← 0 to P − 1 do
3
OblWrite(c = char, ctr, Entry.rank[char])
OblWrite(Entry.l[j] = c ∧ j ≤ i mod P, ctr, ctr + 1)
5
6 return ctr