lock that is easy to interpret as the state in which both tasks
have failed. The number of vanishing would have been big-
ger if not for the extensive use of priorities in the model, to
avoid the construction of unnecessary interleavings.
To investigate further we have used GreatSPN-to-
PROD and PROD. The closed and open models have been
translated into PROD using GreatSPN-to-PROD, and this
has required a little help from the user (indeed, as explained
in [9], PROD does not allow inhibitor arcs, so the translator
builds a complementary place for each inhibiting place, but
then user intervention is needed to deﬁne the initial mark-
ing of the complementary place and the associated arc func-
tions).
Using the macro of GreatSPN-to-PROD we are able
to easily check a number of properties (see [9] for more
details), and for the open model we have computed the
shortest path from the initial marking to the deadlock state
using the “PathTOdeadlock” macro. The resulting path is
displayed by PROD as follows:
0#PathTOdeadlock
Arrow 1: transition tk1|FAULT, x = 3 l = 0
Arrow 0: transition snd|tkfailed, x = 3
Arrow 0: transition failure, x = 3
Arrow 1: transition t2|tkfailed, l = 1 x = 3
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:05 UTC from IEEE Xplore.  Restrictions apply. 
Arrow 0: transition t2|tkfailed, l = 0 x = 3
Arrow 0: transition ds3|check-synch, x = 3
Arrow 1: transition ck2, l = 1
Arrow 0: transition ck5, l = 1
Arrow 0: transition other, l = 0
Arrow 0: transition ck2, l = 0
Arrow 0: transition ck5, l = 0
Arrow 0: transition ck7,
Arrow 0: transition ds1|not-reached,
Arrow 0: transition tk1|FAULT, x = 2 l = 0
Arrow 0: transition snd|tkfailed, x = 2
Arrow 0: transition failure, x = 2
Arrow 1: transition t2|tkfailed, l = 1 x = 2
Arrow 0: transition t2|tkfailed, l = 0 x = 2
Arrow 0: transition ds3|check-synch, x = 2
Arrow 1: transition ck2, l = 1
Arrow 0: transition ck5, l = 1
Arrow 0: transition other, l = 0
Arrow 0: transition ck2, l = 0
Arrow 0: transition ck5, l = 0
Arrow 0: transition ck7,
Arrow 0: transition ds1|not-reached,
where each line says that a given transition has ﬁred for
a given instantiation of the variables. The translator has
mapped the colour class L onto PROD colours 0 and 1, and
T onto 2 and 3. The initial information on the arrow is not
relevant in this context.
The closed model, as expected, has no deadlock, but we
would like to check whether there are states in which the
system is not performing any “useful activity”, so we have
checked if there are states in which the only enabled tran-
sition is tk2jRESTART. Again we have used a GreatSPN-
to-PROD macro called “AllMarkEnabOnly”, and we got:
0#AllMarkEnabOnly(tk2$RESTART(1))
Node 257, belongs to strongly connected
component %%0
dual_tk4$DS_TK_R: +++
dual_LR$LR: +++
dual_NR$NR: +++
NA: +++
tk6:  + 
bk3:  + 
wait$msg: 
idle: 
The only state satisfying this property is node 257, whose
description in terms of marking over places is also shown
by PROD. The construction of the shortest path to state 257
produces a path that is exactly equal to the one that leads to
a deadlock in the open model, as expected.
4 Changing the user task model
The user tasks considered in the previous section reach
the synchronization levels in order, that is to say: a new
ready message is sent only after a message of “reached syn-
chronization” on the previous level has been received, and
all tasks follow the same sequence of synchronization level.
This task model is adequate, for example, when the DS
is used to synchronize pieces of computations as in a se-
quence of fork and join statements, but it is not adequate in
other cases, for example, the case of the TIRAN mechanism
called distributed memory, that manages a replicated and
distributed set of variables. The distributed memory tasks,
that are running on different nodes, use the DS to synchro-
nize the distributed writes: there is one level per variable,
and there is no reason why levels should be ordered, since it
is indeed possible that a new request for a write on a variable
arrives before the previous request (on another variable) is
over.
The only component of the SWN affected by this change
is the task model of Fig. 3(a): the initial marking has been
changed so that in place tk1 there is now one token per ele-
ment in the Cartesian product of the color classes T and L,
and the successor function has been deleted from the func-
tion on the arc from transition rcv-global-synch to place tk1.
Also the colors have been changed, since there is no need
now to keep the color class L ordered and split in static sub-
classes, so the new deﬁnition is L = u Lv and Lv= f l1, l2g
The model has been produced by running again the same
script of algebra commands as in the previous section, sim-
ply substituting the old model of the tasks with the new
one. The analysis with GreatSPN reveals 97 tangible and
2595 vanishing states for the case of 2 tasks and 2 levels,
the steady-state analytical solution produces “reasonable”
results (all throughputs are different from zero and there is
throughput conservation along paths), but the model con-
tains an error, as we shall see in the following, caused by an
incomplete speciﬁcation of the DS behaviour.
Following the procedure described in the previous sec-
tion we have run the GreatSPN-to-PROD translator and
used the interactive facility of PROD to perform the reach-
ability analysis, on both the open and closed models.
The closed model has the following characteristics: 1
single non trivial terminal strongly connected component
(livelock) of 2491 states and 301 strongly connected com-
ponents of 1 state each. It is not surprising that the steady
state results are “reasonable”, since what is happening is
that the system evolves through a number of transient states
until it reaches the non trivial strongly connected compo-
nent, where the system stays forever. What is instead un-
clear is what causes such behaviour. Since the analysis of
a livelock of 2491 states is quite time-consuming we have
preferred to check the open model ﬁrst.
The open model presents 4 livelocks of 14 states each,
and a single deadlock. The deadlock is the expected one:
both tasks have failed and since there is no repair the model
is stuck. The livelocks are instead more subtle to under-
stand, but they are of limited size, so we have proceeded
as follows: we have used PROD to construct the shortest
path from the initial marking to one of the livelocks, and
to check the possible execution paths inside the livelock.
The ﬁrst observation that we could draw is that the 4 live-
locks present a very symmetric behaviour, that is to say they
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:05 UTC from IEEE Xplore.  Restrictions apply. 
represents the same behaviour but for different pairs (task,
level).
By taking a closer look at a single livelock we could ob-
serve that the problem found is related to the model compo-
nent called check synch. Indeed a possible state of the DS
table is that task t1 is in state NR for both levels l1 and l2
and that task t2 is in state R for both levels (implying that
two ready messages have been sent by t2, but since t1 has
not reached the synchronization point on either of the two
levels, no global synchronization has taken place). If at this
point task t1 fails, both its entries in the table become NA
(not available) and task t2 should be able to pass the syn-
chronization on both levels, but the check synch model is
such that the check ends when the ﬁrst synchronization is
reached.
Is this an error in the model or in the speciﬁcation? And
is our analysis of the causes of the problem right? That is
to say: it is true that the DS mechanism does not synchro-
nize tasks as soon as possible? We have decided to express
this question as a property to be checked by PROD. Infor-
mally the property should state that if the DS table is in
a state such that the synchronization over a level can take
place, then it should. But what does it mean “it should”?
We have formalized our intuition by saying that from any
state in which the column for level l of the DS table allows
the synchronization over l, then all paths out of that state
eventually lead to a state in which the ﬁring of the synchro-
nization transition takes place, passing only through states
that do not alter the column l of the table. If (cid:11) is the condi-
tion over the column of the table and (cid:12) is the condition of
reached synchronization, then we need to check that, for all
the states of the system:
NOT((cid:11)) OR (cid:11)Until(cid:12)
that is to say, either the table is in a state in which the syn-
chronization is not allowed, or the synchronization takes
place in a future state, but passing through states in which
(cid:11) keeps holding. Both (cid:11) and (cid:12) have to be expressed as
marking condition, that results in (cid:11), for the speciﬁc level
l1, being equal to the following in PROD syntax:
((
(not (NR >= )) and
(not (NR >= )) and
(not (LR >= )) and
(not (LR >= ))
) and
((R >= ) or (R >= ) or
(RS >= ) or (RS >= )
))
The condition for (cid:12) is much simpler, because when there is
a synchronization over level l1 a token of color l1 is put into
place reached-synch; this translates into:
( reached-synch >=  )
The test with PROD reveals that the property does not hold
on all reachable states neither in the open nor in the closed
model, and therefore the DS does not behave as expected.
5 Fixing the speciﬁcation
To ﬁx the problem we ﬁrst thought that it was enough
to change the check-synch method (and the corresponding
model), but this is not quite the case.
Indeed the check-
synch model of Figure 5 can be changed by deleting the
transition called “emptying”, so that all levels are checked,
but this does not work, as the composed model immedi-
ately reveals a deadlock since every time that a synchro-
nization on a level has been reached (ﬁring of transition
of label “reached”), this causes a synchronization with the
DS model, that synchronizes with the DStable model to
change the entries corresponding to the synchronized level,
but the DS model was not meant to iterate the interaction of
reached synchronization with the check-synch model more
than once, and this causes a deadlock. This problem is not a
wrong interpretation by the modellers of the speciﬁcations,
since there is clearly no iteration of the DS automaton over
reached synchronizations, but instead a case of underspeci-
ﬁcation of the system.
The solution adopted was to limit
the check-synch
method (and therefore model) to check the synchronization
over a single speciﬁc level that is an input parameter for the
method (a single token in place of the place of label “lev-
els”), and to change the behaviour of the DS automaton of
Figure 2 (model of Figure 4) so as to call the check-synch
a single time in normal situation (a ready message from a
user task is received), and as many times as there are levels
in the case of a user task failure. The modiﬁed check-synch
model is shown in Figure 7 and it is clearly simpler than be-
fore. The modiﬁed DS is shown in Figure 8: the model exe-
cution now cycles jLj times through the paths [check-synch,
reached, snd-global, ds7, t14] or [check-synch, not-reached,
t14], before coming back to the initial state represented by
place wait-msg.
The model of the whole system has again been pro-
duced with algebra and translated into PROD. The prop-
erty NOT((cid:11)) OR (cid:11)Until(cid:12) is now satisﬁed on all states, but
we still have a livelock in the closed model (of the 2443
states of the model 2110 belong to a livelock). Clearly the
model is not able to reproduce the initial state, but why?
We took a closer look to the model and decided to check
how many states of the model have the same values of
the table entries as in the initial marking, by checking the
following query on all nodes:
0# query node
NR == 1
that builds the set of markings with all table entries equal
to NR (place NR contains all pairs of tasks and levels).
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:16:05 UTC from IEEE Xplore.  Restrictions apply. 
idle
ck1|check-synch
L
ck2|levels
ck4|R
T,L
ck1
ck2
L
ck3
ck6|LR
T,L
ck4
  2π
T,L
ck7|NR
ck3
  2π
ck5|RS
T,L
ck5
KO
ck7
ck9
ck8|not-reached
OK
L
ck6|reached
T,L
ds5|DS_TK_R
rcv_R
T,L
ds5
  3π
ds5|synchro
  2π
ds8
ds7
  2π
sending
L
snd-global
reached-synch
L
ds1|not-reached
ds4|reached
ds2|TK_DS_R
T,L
ds8|ready
ds6
L
ds9|check-synch
tocheck|levels
L
t12
P13
ds3|check-synch
check-tks
wait-msg
t13
ds1|BK_DS_F
T
t14
ds-check-more
L
failure
tk_discon