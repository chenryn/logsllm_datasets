# Hooks in PostgreSQL

## 1. Introduction
This presentation will introduce a lesser-known feature of PostgreSQL: its hook system.

### Who is Guillaume Lelarge?
- **French translator** of the PostgreSQL manual
- **Member** of the pgAdmin team
- **Vice-treasurer** of PostgreSQL Europe
- **CTO** of Dalibo
- **Contact Information:**
  - Email: [PI:EMAIL]
  - Twitter: [@g_lelarge](https://twitter.com/g_lelarge)
  - Blog: [http://blog.guillaume.lelarge.info](http://blog.guillaume.lelarge.info)

## 2. PostgreSQL Extensibility
PostgreSQL is well known for its extensibility, allowing users to:
- Add custom types
- Define functions
- Create operators
- And more

However, the hook system, which allows for even more customization, is less well-known.

## 3. Hooks in PostgreSQL
Hooks in PostgreSQL are designed to interrupt and modify the usual behavior of the database. They allow developers to add new features without modifying the core code.

### Key Points:
- **Different Kinds of Hooks:** Mostly around the planner and executor.
- **Why They Are Not Well-Known:**
  - Recent addition (first hooks appeared in version 8.3).
  - Not well-documented.

## 4. Most Used Hooks
Here are some of the most commonly used hooks:

| Hook Name                | Initial Release |
|--------------------------|-----------------|
| `check_password_hook`    | 9.0             |
| `ClientAuthentication_hook` | 9.1            |
| `ExecutorStart_hook`     | 8.4             |
| `ExecutorRun_hook`       | 8.4             |
| `ExecutorFinish_hook`    | 8.4             |
| `ExecutorEnd_hook`       | 8.4             |
| `ExecutorCheckPerms_hook`| 9.1             |
| `ProcessUtility_hook`    | 9.0             |

### Executor Hooks:
- **Purpose:** To run functions that use information from the executor.
- **Use Cases:** Compute statistics, log queries, etc.

### `check_password_hook`:
- **Purpose:** Check passwords according to enterprise rules.
- **Use Cases:** Password strength, logging password changes, disallowing plain text passwords.

### `ClientAuthentication_hook`:
- **Purpose:** Add additional checks to allow or deny connections.
- **Use Cases:** Record login events, insert delays after failed authentication.

## 5. Other Hooks
Here are some other hooks available in PostgreSQL:

| Hook Name                | Used In          | Initial Release |
|--------------------------|------------------|-----------------|
| `explain_get_index_name_hook` | Explain      | 8.3             |
| `ExplainOneQuery_hook`   | IndexAdvisor     | 8.3             |
| `fmgr_hook`              | sepgsql          | 9.1             |
| `get_attavgwidth_hook`   |                  | 8.4             |
| `get_index_stats_hook`   |                  | 8.4             |
| `get_relation_info_hook` | plantuner        | 8.3             |
| `get_relation_stats_hook`|                  | 8.4             |
| `join_search_hook`       | saio             | 8.3             |
| `needs_fmgr_hook`        | sepgsql          | 9.1             |
| `object_access_hook`     | sepgsql          | 9.1             |
| `planner_hook`           | planinstr        | 8.3             |
| `shmem_startup_hook`     | pg_stat_statements | 8.4 |

### Example Hooks:
- **`shmem_startup_hook`:** Called when PostgreSQL initializes its shared memory segment.
- **`explain_get_index_name_hook`:** Called when EXPLAIN finds index names.
- **`planner_hook`:** Runs when the planner begins, allowing plugins to monitor or modify the planner's behavior.
- **`get_relation_info_hook`:** Allows modification of the information PostgreSQL gets from the catalogs for a particular relation.
- **`join_search_hook`:** Allows plugins to override the join search order portion of the planner.

## 6. Plugin Example: `PlpgSQL_plugin`
- **Used By:**
  - EDB's PL/pgSQL debugger
  - Profiler

## 7. How Hooks Work Inside PostgreSQL
- **Global Function Pointers:** Initially set to `NULL`.
- **Execution:**
  - PostgreSQL checks the global function pointer.
  - If set, it executes the function.

### Setting the Function Pointer:
- **Shared Library:** The hook function is available in a shared library.
- **Load Time:**
  - PostgreSQL calls the `_PG_init()` function of the shared library.
  - This function sets the pointer and usually saves the previous one.

### Unsetting the Function Pointer:
- **Unload Time:**
  - PostgreSQL calls the `_PG_fini()` function of the shared library.
  - This function unsets the pointer and restores the previous one.

## 8. Example: `ClientAuthentication_hook`
### Declaration:
- **Location:** `src/include/libpq/auth.h`, line 27
- **Code:**
  ```c
  typedef void (*ClientAuthentication_hook_type) (Port *, int);
  extern PGDLLIMPORT ClientAuthentication_hook_type ClientAuthentication_hook;
  ```

### Setting the Hook:
- **Location:** `src/backend/libpq/auth.c`, line 215
- **Code:**
  ```c
  ClientAuthentication_hook_type ClientAuthentication_hook = NULL;
  ```

### Checking and Executing the Hook:
- **Location:** `src/backend/libpq/auth.c`, line 580
- **Code:**
  ```c
  if (ClientAuthentication_hook)
      (*ClientAuthentication_hook) (port, status);
  ```

## 9. Writing Hooks
### `ClientAuthentication_hook` Details:
- **Control:**
  - After client authentication but before informing the user.
- **Use Cases:**
  - Record login events
  - Insert delays after failed authentication

### Modules Using `ClientAuthentication_hook`:
- **Examples:**
  - `auth_delay`
  - `sepgsql`
  - `connection_limits` ([GitHub](https://github.com/tvondra/connection_limits))

### Function Parameters:
- **Parameters:**
  - `f (Port *port, int status)`
  - `Port` structure: Contains remote host, remote port, database name, user name, GUC options, etc.
  - `Status` code: `STATUS_ERROR`, `STATUS_OK`

### Example: Forbid Connection if a File is Present
- **Initialization:**
  ```c
  static ClientAuthentication_hook_type next_client_auth_hook = NULL;

  void _PG_init(void) {
      next_client_auth_hook = ClientAuthentication_hook;
      ClientAuthentication_hook = my_client_auth;
  }
  ```
- **Hook Implementation:**
  ```c
  static void my_client_auth(Port *port, int status) {
      struct stat buf;
      if (next_client_auth_hook)
          (*next_client_auth_hook) (port, status);
      if (status != STATUS_OK)
          return;
      if (!stat("/tmp/connection.stopped", &buf))
          ereport(FATAL, (errcode(ERRCODE_INTERNAL_ERROR),
                          errmsg("Connection not authorized!!")));
  }
  ```

## 10. Executor Hooks
### Details:
- **`ExecutorStart_hook`:** Beginning of execution of a query plan.
- **`ExecutorRun_hook`:** Accepts direction and count, may be called multiple times.
- **`ExecutorFinish_hook`:** After the final `ExecutorRun` call.
- **`ExecutorEnd_hook`:** End of execution of a query plan.

### Use Cases:
- **Information Gathering:** Useful for getting information on executed queries.
- **Existing Modules:**
  - `pg_stat_statements`
  - `auto_explain`
  - `pg_log_userqueries` ([PGXN](http://pgxn.org/dist/pg_log_userqueries/))
  - `query_histogram` ([PGXN](http://pgxn.org/dist/query_histogram/))
  - `query_recorder` ([PGXN](http://pgxn.org/dist/query_recorder/))

### Example: Log Queries Executed by Superuser
- **Initialization:**
  ```c
  static ExecutorEnd_hook_type prev_ExecutorEnd = NULL;

  void _PG_init(void) {
      prev_ExecutorEnd = ExecutorEnd_hook;
      ExecutorEnd_hook = pgluq_ExecutorEnd;
  }
  ```
- **Hook Implementation:**
  ```c
  static void pgluq_ExecutorEnd(QueryDesc *queryDesc) {
      Assert(queryDesc != NULL);
      if (superuser())
          elog(log_level, "Superuser %s fired this query: %s",
               GetUserNameFromId(GetUserId()), queryDesc->sourceText);
      if (prev_ExecutorEnd)
          prev_ExecutorEnd(queryDesc);
      else
          standard_ExecutorEnd(queryDesc);
  }
  ```
- **Uninstallation:**
  ```c
  void _PG_fini(void) {
      ExecutorEnd_hook = prev_ExecutorEnd;
  }
  ```

## 11. `check_password` Hook
### Details:
- **Control:**
  - When `CREATE USER` or `ALTER USER` is executed, but before committing.
- **Use Cases:**
  - Check password strength
  - Log password changes
  - Disallow plain text passwords

### Function Parameters:
- **Parameters:**
  - `const char *username, const char *password, int password_type, Datum validuntil_time, bool validuntil_null`
  - `password_type`: `PASSWORD_TYPE_PLAINTEXT`, `PASSWORD_TYPE_MD5`

### Example: Disallow Plain Text Passwords
- **Initialization:**
  ```c
  void _PG_init(void) {
      check_password_hook = check_password;
  }
  ```
- **Hook Implementation:**
  ```c
  static void check_password(const char *username, const char *password, int password_type, Datum validuntil_time, bool validuntil_null) {
      if (password_type == PASSWORD_TYPE_PLAINTEXT) {
          ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg("Password must be encrypted")));
      }
  }
  ```

## 12. Compiling and Installing Hooks
### Makefile Example:
```makefile
MODULE_big = your_hook
OBJS = your_hook.o

ifdef USE_PGXS
PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)
else
subdir = contrib/your_hook
top_builddir = ../..
include $(top_builddir)/src/Makefile.global
include $(top_srcdir)/contrib/contrib-global.mk
endif
```

### Compilation:
```sh
$ make USE_PGXS=1
```

### Installation:
```sh
$ make USE_PGXS=1 install
```

### Usage:
- **Configuration:**
  - `postgresql.conf`: `shared_preload_libraries = 'your_hook'`
- **Restart PostgreSQL:**
  ```sh
  $ pg_ctl start
  ```

## 13. Future Hooks
- **Logging Hook:** Proposed by Martin Pihlak ([CommitFest](https://commitfest.postgresql.org/action/patch_view?id=717))
- **Planner Hook:** Proposed by Peter Geoghegan
  - `parse_analyze()`
  - `parse_analyze_varparams()`
  - Query normalization within `pg_stat_statements`

## 14. Conclusion
- **Hooks** are a powerful feature for extending PostgreSQL's capabilities.
- **Cautious Use:** Avoid adding too many hooks.
- **Future Enhancements:** More hooks are needed to further extend PostgreSQL's functionality.

### Resources:
- **Examples and Slides:**
  - [GitHub Repository](https://github.com/gleu/Hooks-in-PostgreSQL)