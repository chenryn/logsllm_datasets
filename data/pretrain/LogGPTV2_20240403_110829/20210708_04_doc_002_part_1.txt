Hooks in PostgreSQL
Hooks in PostgreSQL
1
Who's Guillaume Lelarge?
French translator of the PostgreSQL manual
●
Member of pgAdmin's team
●
Vice-treasurer of PostgreSQL Europe
●
CTO of Dalibo
●
Mail: PI:EMAIL
●
Twitter: g_lelarge
●
Blog: http://blog.guillaume.lelarge.info
●
2
PostgreSQL
Well known for its extensibility
●
For example, a user can add
●
– Types
– Functions
– Operators
– Etc
Less known is the hook system
●
3
Hooks
Interrupt, and modify behaviour
●
Different kinds of hooks
●
Not known because
●
– not explained in the documentation
– Usually quite recent
4
Most used hooks
Hook Initial release
check_password_hook 9.0
ClientAuthentication_hook 9.1
ExecutorStart_hook 8.4
ExecutorRun_hook 8.4
ExecutorFinish_hook 8.4
ExecutorEnd_hook 8.4
ExecutorCheckPerms_hook 9.1
ProcessUtility_hook 9.0
5
Other hooks
Hook Used in Initial release
explain_get_index_name_hook 8.3
ExplainOneQuery_hook IndexAdvisor 8.3
fmgr_hook sepgsql 9.1
get_attavgwidth_hook 8.4
get_index_stats_hook 8.4
get_relation_info_hook plantuner 8.3
get_relation_stats_hook 8.4
join_search_hook saio 8.3
needs_fmgr_hook sepgsql 9.1
object_access_hook sepgsql 9.1
planner_hook planinstr 8.3
shmem_startup_hook pg_stat_statements 8.4
6
And one plugin
PlpgSQL_plugin
●
Used by EDB's PL/pgsql debugger, and profiler
●
7
How do they work inside PG
Hooks consist of global function pointers
●
Initially set to NULL
●
When PostgreSQL wants to use a hook
●
– It checks the global function pointer
– And executes it if it is set
8
How do we set the function pointer?
A hook function is available in a shared library
●
At load time, PostgreSQL calls the _PG_init()
●
function of the shared library
This function needs to set the pointer
●
– And usually saves the previous one!
9
How do we unset the function
pointer?
At unload time, PostgreSQL calls the _PG_fini()
●
function of the shared library
This function needs to unset the pointer
●
– And usually restores the previous one!
10
Example with
ClientAuthentication_hook
Declaration
●
– extract from src/include/libpq/auth.h, line 27
/* Hook for plugins to get control in ClientAuthentication() */
typedef void (*ClientAuthentication_hook_type) (Port *, int);
extern PGDLLIMPORT ClientAuthentication_hook_type ClientAuthentication_hook;
11
Example with
ClientAuthentication_hook
Set
●
– extract from src/backend/libpq/auth.c, line 215
/*
* This hook allows plugins to get control following client authentication,
* but before the user has been informed about the results. It could be used
* to record login events, insert a delay after failed authentication, etc.
*/
ClientAuthentication_hook_type ClientAuthentication_hook = NULL;
12
Example with
ClientAuthentication_hook
Check, and execute
●
– extract from src/backend/libpq/auth.c, line 580
if (ClientAuthentication_hook)
(*ClientAuthentication_hook) (port, status);
13
Writing hooks
Details on some hooks
●
– ClientAuthentication
– Executor
– check_password
And various examples
●
14
ClientAuthentication_hook details
Get control
●
– After client authentication
– But before informing the user
Usefull to
●
– Record login events
– Insert a delay after failed authentication
15
ClientAuthentication_hook use
Modules using this hook
●
– auth_delay
– sepgsql
– connection_limits
(https://github.com/tvondra/connection_limits)
16
ClientAuthentication_hook function
Two parameters
●
– f (Port *port, int status)
Port is a complete structure described in
●
include/libpq/libpq-be.h
– remote_host, remote_hostname, remote_port,
database_name, user_name, guc_options,
etc.
Status is a status code
●
– STATUS_ERROR, STATUS_OK
17
Writing a ClientAuthentication_hook
Example: forbid connection if a file is present
●
Needs two functions
●
– One to install the hook
– Another one to check availability of the file, and
allow or deny connection
18
Writing a ClientAuthentication_hook
First, initialize the hook
●
static ClientAuthentication_hook_type next_client_auth_hook = NULL;
/* Module entry point */
void
_PG_init(void)
{
next_client_auth_hook = ClientAuthentication_hook;
ClientAuthentication_hook = my_client_auth;
}
19
Writing a ClientAuthentication_hook
Check availability of the file, and allow or deny
●
connection
static void my_client_auth(Port *port, int status)
{
struct stat buf;
if (next_client_auth_hook)
(*next_client_auth_hook) (port, status);
if (status != STATUS_OK)
return;
if(!stat("/tmp/connection.stopped", &buf))
ereport(FATAL, (errcode(ERRCODE_INTERNAL_ERROR),
errmsg("Connection not authorized!!")));
}
20
Executor hooks details
Start
●
– beginning of execution of a query plan
Run
●
– Accepts direction, and count
– May be called more than once
Finish
●
– After the final ExecutorRun call
End
●
– End of execution of a query plan
21
Executor hooks use
Usefull to get informations on executed queries
●
Already used by
●
– pg_stat_statements
– auto_explain
– pg_log_userqueries
http://pgxn.org/dist/pg_log_userqueries/
– query_histogram
http://pgxn.org/dist/query_histogram/
– query_recorder
http://pgxn.org/dist/query_recorder/
22
Writing an ExecutorEnd_hook
Example: log queries executed by superuser
●
only
Needs three functions
●
– One to install the hook
– One to uninstall the hook
– And a last one to do the job :-)
23
Writing a ExecutorEnd_hook
First, install the hook
●
/* Saved hook values in case of unload */
static ExecutorEnd_hook_type prev_ExecutorEnd = NULL;
void _PG_init(void)
{
prev_ExecutorEnd = ExecutorEnd_hook;
ExecutorEnd_hook = pgluq_ExecutorEnd;
}
24
Writing a ExecutorEnd_hook
The hook itself:
●
– check if the user has the superuser attribute
– log (or not) the query
– fire the next hook or the default one
static void
pgluq_ExecutorEnd(QueryDesc *queryDesc)
{
Assert(query != NULL);
if (superuser())
elog(log_level, "superuser %s fired this query %s",
GetUserNameFromId(GetUserId()),
query);
if (prev_ExecutorEnd)
prev_ExecutorEnd(queryDesc);
else
standard_ExecutorEnd(queryDesc);
}
25
Writing a ExecutorEnd_hook
Finally, uninstall the hook
●
void _PG_fini(void)
{
ExecutorEnd_hook = prev_ExecutorEnd;
}
26
check_password hook details
Get control
●
– When CREATE/ALTER USER is executed
– But before commiting
Usefull to
●
– Check the password according to some
enterprise rules
– Log change of passwords
– Disallow plain text passwords
Major issue
●
– Less effective with encrypted passwords :-/
27
check_password hook use
Usefull to check password strength
●
Already used by
●
– passwordcheck
28
check_password_hook function
Five parameters
●
– const char *username, const char *password,
int password_type, Datum validuntil_time,
bool validuntil_null
password_type
●
– PASSWORD_TYPE_PLAINTEXT
– PASSWORD_TYPE_MD5
29
Writing a check_password_hook
Example: disallow plain text passwords
●
Needs two functions
●
– One to install the hook
– One to check the password
30
Writing a check_password_hook
First, install the hook
●
void _PG_init(void)
{
check_password_hook = check_password;
}
31
Writing a check_password_hook
The hook itself:
●
– check if the password is encrypted
static void
check_password(const char *username,
const char *password, int password_type,
Datum validuntil_time, bool validuntil_null)
{
if (password_type == PASSWORD_TYPE_PLAINTEXT)
{
ereport(ERROR,
(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
errmsg("password is not encrypted")));
}
}
32
Compiling hooks
Usual Makefile
●
MODULE_big = your_hook
OBJS = your_hook.o
ifdef USE_PGXS
PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)
else
subdir = contrib/your_hook
top_builddir = ../..
include $(top_builddir)/src/Makefile.global
include $(top_srcdir)/contrib/contrib-global.mk
endif
33
Compiling hooks – example
Make is your friend (and so is pg_config)
●
$ make USE_PGXS=1
gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-
statement -Wendif-labels -Wformat-security -fno-strict-aliasing -fwrapv
-fexcess-precision=standard -fpic -I. -I. -I/opt/postgresql-
9.1/include/server -I/opt/postgresql-9.1/include/internal -D_GNU_SOURCE
-c -o your_hook.o your_hook.c
gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-
statement -Wendif-labels -Wformat-security -fno-strict-aliasing -fwrapv
-fexcess-precision=standard -fpic -shared -o your_hook.so
only_encrypted_passwords.o -L/opt/postgresql-9.1/lib -Wl,--as-needed -Wl,-
rpath,'/opt/postgresql-9.1/lib',--enable-new-dtags
34
Installing hooks – from source
Make is still your friend
●
$ make USE_PGXS=1 install
/bin/mkdir -p '/opt/postgresql-9.1/lib'
/bin/sh /opt/postgresql-9.1/lib/pgxs/src/makefiles/../../config/install-sh -c
-m 755 your_hook.so '/opt/postgresql-9.1/lib/your_hook.so'
35
Using hooks
Install the shared library
●
In postgresql.conf
●
– shared_preload_libraries
– And possibly other shared library GUCs
Restart PG
●
36
Using hooks – example
Install the hook...
●
In postgresql.conf
●
shared_preload_libraries = 'only_encrypted_passwords'
Restart PostgreSQL
●
$ pg_ctl start
server starting
2012-01-28 16:01:32 CET LOG: loaded library "only_encrypted_passwords"
37
Using hooks – example
Use the hook...
●
postgres=# CREATE USER u1 PASSWORD 'supersecret';
ERROR: password is not encrypted
postgres=# CREATE USER u1 PASSWORD 'md5f96c038c1bf28d837c32cc62fa97910a';
CREATE ROLE
postgres=# ALTER USER u1 PASSWORD 'f96c038c1bf28d837c32cc62fa97910a';
ERROR: password is not encrypted
postgres=# ALTER USER u1 PASSWORD 'md5f96c038c1bf28d837c32cc62fa97910a';
ALTER ROLE
38
Future hooks?
Logging hook, by Martin Pihlak
●
– https://commitfest.postgresql.org/action/patch_v
iew?id=717
Planner hook, by Peter Geoghegan
●
– parse_analyze() and
parse_analyze_varparams()
– Query normalisation within pg_stat_statements
39
Conclusion
Hooks are an interesting system to extend the
●
capabilities of PostgreSQL
Be cautious to avoid adding many of them
●
We need more of them :-)
●
Examples and slides available on:
●
– https://github.com/gleu/Hooks-in-PostgreSQL
40
Hooks in PostgreSQL
Hooks in PostgreSQL
1
This talk will present a quite unknown feature of
PostgreSQL: its hook system.
Who's Guillaume Lelarge?
French translator of the PostgreSQL manual
●
Member of pgAdmin's team
●
Vice-treasurer of PostgreSQL Europe
●
CTO of Dalibo
●
Mail: PI:EMAIL
●
Twitter: g_lelarge
●
Blog: http://blog.guillaume.lelarge.info
●
2
PostgreSQL
Well known for its extensibility
●
For example, a user can add
●
– Types
– Functions
– Operators
– Etc
Less known is the hook system
●
3
PostgreSQL is well known for its extensibility. Many
people know that you can add your own user types,
add functions that handle them, add operators
which use those functions, and lots of other stuff.
Heikki even did an interesting talk at last year's
FOSDEM about user types and how to use them.
Many procedural languages are supported.
Actually, the extensibility is so important to the
PostgreSQL project that one of the most interesting
features of 9.1 is the new EXTENSION object,
which helps the handling of external modules,
plugins, or whatever you want to call that.
With all this going on with the extensibility, it's quite
strange that the hook system is quite unknown,
even if the first hooks were available since the 8.3
release.
Hooks
Interrupt, and modify behaviour
●
Different kinds of hooks
●
Not known because
●
– not explained in the documentation
– Usually quite recent
4
The aim of hooks is to interrupt and modify the usual
behaviour of PostgreSQL. It allows a developer to
add new features without having to add it to the
core.
Of course, there are different kinds of hooks, mostly
around the planner and the executor.
It's not well known because it's a rather recent
feature. The first hook appeared in 8.3. Actually, 5
hooks appeared in 8.3, 8 in 8.4, 2 in 9.0, and 5 in
9.1. But the biggest issue is probably that it's not
discussed in the documentation.
Most used hooks
Hook Initial release
check_password_hook 9.0
ClientAuthentication_hook 9.1
ExecutorStart_hook 8.4
ExecutorRun_hook 8.4
ExecutorFinish_hook 8.4
ExecutorEnd_hook 8.4
ExecutorCheckPerms_hook 9.1
ProcessUtility_hook 9.0
5
There are many hooks available. These are the most
used hooks. We'll discuss them in the rest of these
slides.
All the Executor hooks help running functions that will
use information from the executor. Mostly used to
know which queries are executed, so that you can
compute statistics, or log them.
The check_password hook is a way to check
passwords according to enterprise rules.
The ClientAuthentication hook makes it possible to
add other checks to allow or deny connections.
Other hooks
Hook Used in Initial release
explain_get_index_name_hook 8.3
ExplainOneQuery_hook IndexAdvisor 8.3
fmgr_hook sepgsql 9.1
get_attavgwidth_hook 8.4
get_index_stats_hook 8.4
get_relation_info_hook plantuner 8.3
get_relation_stats_hook 8.4
join_search_hook saio 8.3
needs_fmgr_hook sepgsql 9.1
object_access_hook sepgsql 9.1
planner_hook planinstr 8.3
shmem_startup_hook pg_stat_statements 8.4
6
shmem_startup_hook, called when PostgreSQL initializes its shared
memory segment
explain_get_index_name_hook, called when explain finds indexes'
names
planner_hook, runs when the planner begins, so plugins can monitor or
even modify the planner's behavior (http://pgxn.org/dist/planinstr/) to
measure planner running time
get_relation_info_hook, allows modification of expansion of the
information PostgreSQL gets from the catalogs for a particular
relation, including adding fake indexes (
http://www.sai.msu.su/~megera/wiki/plantuner to enable planner
hints which allow enable/disable indexes, fix empty table)
ExplainOneQuery_hook see
http://archives.postgresql.org/pgsql-patches/2007-05/msg00421.php
join_search_hook, to let plugins override the join search order portion
of the planner; this is specifically intended to simplify developing a
replacement for GEQO planning, example module saio (
http://pgxn.org/dist/saio/), a join order search plugin using simulated
annealing which provides an experimental planner module that uses
a randomised algorithm to try to find the optimal join order
explain_get_index_name, to allow plugins to get control here so that
plans involving hypothetical indexes can be explained
fmgr_hook, function manager hook (security definer stuff?)
object_access_hook, module sepgsql
And one plugin
PlpgSQL_plugin