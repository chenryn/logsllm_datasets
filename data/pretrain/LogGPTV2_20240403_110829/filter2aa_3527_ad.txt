Java_sun_awt_image_ImageRepresentation_setICMpixels(JNIEnv *env, jclass cls, 
                                                    jint x, jint y, jint w, 
                                                    jint h, jintArray jlut, 
                                                    jbyteArray jpix, jint off, 
                                                    jint scansize, 
                                                    jobject jict) { 
    unsigned char *srcData = NULL; 
    jint srcDataLength; 
    int *dstData; 
    jint dstDataLength; 
    jint dstDataOff; 
    int *dstP, *dstyP; 
    unsigned char *srcyP, *srcP; 
    int *srcLUT = NULL; 
    int yIdx, xIdx; 
    int sStride; 
    int *cOffs; 
    int pixelStride; 
    jobject joffs = NULL; 
    jobject jdata = NULL; 
    if (x GetIntField(env, jict, g_ICRscanstrID); 
    pixelStride = (*env)->GetIntField(env, jict, g_ICRpixstrID); 
    joffs = (*env)->GetObjectField(env, jict, g_ICRdataOffsetsID); 
    jdata = (*env)->GetObjectField(env, jict, g_ICRdataID); 
    if (JNU_IsNull(env, joffs) || (*env)->GetArrayLength(env, joffs) GetArrayLength(env, jpix); 
    dstDataLength = (*env)->GetArrayLength(env, jdata); 
    cOffs = (int *) (*env)->GetPrimitiveArrayCritical(env, joffs, NULL); 
    if (cOffs == NULL) { 
        return JNI_FALSE; 
    } 
    dstDataOff = cOffs[0]; 
    /* the offset array is not needed anymore and can be released */ 
    (*env)->ReleasePrimitiveArrayCritical(env, joffs, cOffs, JNI_ABORT); 
    joffs = NULL; 
    cOffs = NULL; 
    /* do basic validation: make sure that offsets for 
    * first pixel and for last pixel are safe to calculate and use */ 
    CHECK_STRIDE(y, h, sStride); 
    CHECK_STRIDE(x, w, pixelStride); 
    CHECK_DST(x, y); 
    CHECK_DST(x + w -1, y + h - 1); 
    /* check source array */ 
    CHECK_SRC(); 
    srcLUT = (int *) (*env)->GetPrimitiveArrayCritical(env, jlut, NULL); 
    srcData = (unsigned char *) (*env)->GetPrimitiveArrayCritical(env, jpix, NULL); 
    dstData = (int *) (*env)->GetPrimitiveArrayCritical(env, jdata, NULL); 
    dstyP = dstData + dstDataOff + y*sStride + x*pixelStride; 
    srcyP = srcData + off; 
    for (yIdx = 0; yIdx < h; yIdx++, srcyP += scansize, dstyP+=sStride) { 
        srcP = srcyP; 
        dstP = dstyP; 
        for (xIdx = 0; xIdx < w; xIdx++, dstP+=pixelStride) { 
            *dstP = srcLUT[*srcP++]; 
        } 
    } 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
We see that they now check for integer overflow at every step of calculating the source and destination pointers 
and we can also see that the function will exit early in the presence of input that will cause an integer overflow. One 
potential path towards exploiting this vulnerability would be using the out-of-bounds write to replace a legitimate 
AccessControlContext with a malicious AccessControlContext that grants AllPermission. 
JavaFX Sub-component Weakness 
CVE-2013-2428 – Untrusted Pointer Dereference 
Core Issue 
CWE-822: Untrusted Pointer Dereference refers to a vulnerability that occurs when operations can be performed on 
a memory address of the attacker's choosing. The following code snippet will help with the explanation of this CWE. 
Within the constructor of the Gullible class, we execute the getDataPointer native function that returns a pointer to 
a data buffer. The dispose function executes the free native function if the dataPointer is not zero. The issue here 
lies in the visibility of the dataPointer instance variable. Since the variable is protected and since the class itself is 
public, the Gullible class could be subclassed. The following code snippet shows how this would work. 
Since dataPointer is a protected instance variable, the Malicious subclass is able to modify it. The cwe_822 static 
method instantiates a Malicious object, sets the data pointer to 0x41414141, and then calls the dispose method so 
public class Gullible { 
    protected long dataPointer; 
    public Gullible() { 
        dataPointer = getDataPointer(); 
    } 
    public dispose() { 
        if (dataPointer != 0) { 
            free(dataPointer); 
        } 
        dataPointer = 0; 
    } 
    private native long getDataPointer(); 
    private native void free(long dataPointer); 
} 
public class Malicious extends Gullible { 
    pubic setDataPointer(long inputDataPointer) { 
        dataPointer = inputDataPointer; 
    } 
    public static void cwe_822() { 
        Malicious m = new Malicious(); 
        m.setDataPointer(0x41414141); 
        m.dispose(); 
    } 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
that the free native function will get called. At this point native code is being executed against an arbitrary memory 
location. 
Root Cause Analysis 
CVE-2013-242814 is an example of untrusted pointer dereference that occurs in the 
com.sun.webpane.platform.WebPage class. The following code snippet will help with the explanation of the 
vulnerability. 
The WebPage class stores a pointer to a native object within the pPage instance variable. There are numerous 
native functions within the class, such as twkSetEditable. When calling a native function, several of the methods 
reference the pPage instance variable directly while others use the getPage accessor method. It is possible to 
subclass the WebPage class and override the getPage method due to the fact the getPage method is public, the 
WebPage class is public, and the com.sun.webpage.platform package is not restricted. Doing so will result in an 
attacker-controlled pointer being passed to the native function. 
Patch Analysis 
14 http://www.oracle.com/technetwork/topics/security/javacpuapr2013-1928497.html 
package com.sun.webpage.platform; 
... 
public class WebPage 
{ 
... 
  private long pPage = 0L; 
... 
  public long getPage() { 
    return this.pPage; 
  } 
... 
  public void setEditable(boolean paramBoolean) { 
    lockPage(); 
    try { 
      log.log(Level.FINE, "setEditable"); 
      if (this.isDisposed) { 
        log.log(Level.FINE, "setEditable() request for a disposed web page."); 
      } 
      else 
      { 
        twkSetEditable(getPage(), paramBoolean); 
      } 
    } finally { unlockPage(); } 
  } 
... 
  private native void twkSetEditable(long paramLong, boolean paramBoolean); 
... 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
CVE-2013-2428 was patched in two ways. The com.sun.webpane package was first restricted in JDK 7u13 by 
adding it to the restricted package list rendering the vulnerability useless. Oracle officially patched this CVE in JDK 
7u21 by changing the visibility of the getPage method from public to package-private and final.  
Leveraging Sub-component Weaknesses 
Exploit kit authors have jumped on the Java bandwagon offering a variety of exploits that leverage different 
vulnerability types. As stated previously, the kits on average need to offer 2+ Java exploits just to stay competitive 
in this market. Aligning this with the recent attacks using 0-day vulnerabilities; we derive unique insights into which 
software weaknesses are actually being leveraged in the threat landscape. 
To further our understanding of the landscape, our set of 52,000 unique Java malware samples were run through 
numerous anti-virus engines to classify the samples into a set of categories based on the CVE they utilized. This 
provided us with a list of the most common weaponized Java vulnerabilities over the last three years. In the graph 
below, the last three years of unique (by MD5 hash) Java malware samples per month are shown. 
Figure 12 - Actively Exploited CVEs 
0	
2000	
4000	
6000	
8000	
10000	
12000	
CVE-2013-1493	
CVE-2013-1480	
CVE-2013-0431	
CVE-2013-0422	
CVE-2012-5076	
CVE-2012-4681	
CVE-2012-1723	
CVE-2012-0507	
CVE-2011-3544	
CVE-2011-3521	
CVE-2010-4465	
Source: Reversing Labs	
final long getPage() { 
  return this.pPage; 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
It is interesting that this timeline mirrors the increase in vulnerability discoveries by the external community over the 
last 6 months. Starting in August, the number of unique malware instances quickly shot up to close to the 4,000 
mark. More surprising is the huge jump in unique instances that begin in December and hit a high in January of over 
12,000 against just 9 of the most common CVEs. Half of those unique instances were labeled as CVE-2012-1723, 
which is a type confusion vulnerability in the HotSpot sub-component. January 2013 also saw a large increase in 
use of CVE-2012-0507, another type confusion vulnerability in the Concurrency sub-component.  
Anti-virus engines do not always label samples correctly so the exact percentage of the unique samples per CVE 
inherently includes a small margin for error. As stated at the beginning of this paper we focus on the time period of 
2011 – 2013. This graph is limited to the active CVEs during this time. Due to the lack of data for CVEs found in 
2009-2010 in our sample set this may have resulted in a less than accurate representation of activity in early 2011. 
The key take away is that attackers are significantly upping their game by targeting more CVEs than ever and are 
increasingly successful at getting their exploits onto victim machines.  
Threat Landscape 
Aligning Component Weaknesses to Attacks 
As our goal is to understand the weaknesses at play in the landscape, we compared the list of actively targeted 
CVEs to the CVEs available through penetration testing tools and exploit kits tracked by Contagio15. By far, the most 
common vulnerability type for attack tools is the sandbox bypass using unsafe reflection to gain code execution. 
The table below details out the CVE/CWEs available to attackers and the toolsets they are available in. 
CVE 
CWE 
CWE Sub-category 
Exploit 
Kit 
Penetration 
Testing Tool 
CVE-2010-4452 
CWE-114 
Process Control 
N/A 
Yes 
Yes 
CVE-2011-3521 
CWE-265 
Privilege / Sandbox Issues 
CWE-843 
Type Confusion 
Yes 
No 
CVE-2011-3544 
CWE-265 
Privilege / Sandbox Issues 
CWE-272 
Least Privilege Violation 
Yes 
Yes 
CVE-2012-0507 
CWE-265 
Privilege / Sandbox Issues 
CWE-843 
Type Confusion 
Yes 
Yes 
CVE-2012-1723 
CWE-265 
Privilege / Sandbox Issues 
CWE-843 
Type Confusion 
Yes 
Yes 
CVE-2012-4681 
CWE-265 
Privilege / Sandbox Issues 
CWE-470 
Unsafe Reflection 
No 
Yes 
15 http://contagiodump.blogspot.ca/2010/06/overview-of-exploit-packs-update.html 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
CVE-2012-0500 
CWE-78: OS Command 
Injection 
N/A 
No 
Yes 
CVE-2012-5076 
CWE-265: Privilege / Sandbox 
Issues 
CWE-470 
Unsafe Reflection 
Yes 
Yes 
CVE-2012-5088 
CWE-265: Privilege / Sandbox 
Issues 
CWE-470 
Unsafe Reflection 
No 
Yes 
CVE-2013-0422 
CWE-265: Privilege / Sandbox 
Issues 
CWE-470 
Unsafe Reflection 
Yes 
Yes 
CVE-2013-0431 
CWE-265 
Privilege / Sandbox Issues 
CWE-470 
Unsafe Reflection 
Yes 
Yes 
CVE-2013-1480 
CWE-122 
Heap-based Buffer Overflow 
N/A 
No 
No 
CVE-2013-1488 
CWE-265 
Privilege / Sandbox Issues 
CWE-272 
Least Privilege Violation 
No 
Yes 
CVE-2013-1493 
CWE-122 
Heap-based Buffer Overflow 
N/A 
Yes 
Yes 
CVE-2013-2432 
CWE-265 
Privilege / Sandbox Issues 
CWE-843 
Type Confusion 
Yes 
Yes 
Figure 13 - Actively Targeted CVS 
Comparing the most popular software weakness across the attack tools to the most patched vulnerabilities, we see 
the following: 
• Most Common Weakness Included in Attack Tools 
1. CWE-265 Privilege / Sandbox Issues due to CWE-470 Unsafe Reflection 
2. CWE-265 Privilege / Sandbox Issues due to CWE-843 Type Confusion 
3. CWE-122 Heap-based Buffer Overflow 
4. CWE-265 Privilege / Sandbox Issues due to CWE-272 Least Privilege Violation 
• Java’s Most Patched Weakness 
1. CWE-265 Privilege / Sandbox Issues due to CWE-470 Unsafe Reflection 
2. CWE-265 Privilege / Sandbox Issues due to CWE-272 Least Privilege Violation 
3. CWE-122 Heap-based Buffer Overflow 
4. CWE-787: Out-of-bounds Write 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
One intriguing occurrence is that the type confusion style of sandbox bypass switches place in the ranks with the 
least privilege style of sandbox bypass when it came to inclusion in the attack tools. The next logical question is:  
Which weakness is utilized more often in the exploit kits?  The chart below describes the utilization breakdown for 
each software weakness across our malware sample set: 
Figure 14 - CWEs Utilized by Attackers 
The clear “winner” is the type confusion style of sandbox bypass vulnerability with over half of the unique Java 
malware samples. Heap-based buffer overflow vulnerabilities barely show up on the diagram due to the sheer 
volume of unique samples of sandbox issues.  
Techniques Beyond the Vulnerability 
As is to be expected, the techniques for exploiting a vulnerability in Java will vary highly based on the type of 
vulnerability but there are two primary techniques. The first is accomplished through “traditional” memory 
corruption exploitation techniques and, as such, is more often used with vulnerabilities in native code. The second is 
accomplished through the nullification of the SecurityManager and is more often used with vulnerabilities that make 