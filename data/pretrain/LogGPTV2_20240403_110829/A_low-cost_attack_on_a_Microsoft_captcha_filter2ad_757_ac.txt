cannot  be  segmented  by  the  vertical  method,  and  gives  the 
number of objects in each chunk. As will be discussed later on, 
CFS also contributes to further steps such as arc removal.  
4.4   Thick arc removal 
Thick arcs, if any, will be detected and removed after the above 
color filling process.  
Characteristics  of  arcs.  For  the  sake  of  usability,  thick 
foreground arcs do not intersect with challenge characters, unless 
they  are  connected  indirectly  through  a  thin  arc  (thin  arcs  do 
intersect with characters) or are forced to connect with others due 
to  the  drawback  introduced  by  the  method  of  fixing  broken 
characters in Section 4.1. We also observed that thick arcs have 
the  following  characteristics,  which  make  it  possible  to  identify 
and remove them automatically. 
• 
Pixel  count.  Often,  a  thick  arc  has  a  relatively  small  pixel 
count (i.e., the number of foreground pixels in the arc).  
• 
•  Location.  Thick  arcs  are  located  close  to  or  even  intersect 
with the image border, something which rarely occurs with 
valid characters unless they are connected to the thick arc. 
Shape. Thick arcs do not contain circles. Characters such as 
A, B, D, P, Q, 4, 6, 8 and 9 all contain one or more circles.   
Interplay  between  shape  and  location.  The  position  of 
thick  arcs  and 
their  geometric  shapes  are  somehow 
correlated.  For  example,  thick  arcs  located  at  the  start  and 
end of a challenge are typically tall but narrow (that is, the 
ratio of height over width is large); thick arcs in the middle 
part of a challenge tend to be wide but short (that is, the ratio 
of width over height is large). 
• 
Arc  removal  algorithm.  Our  algorithm  is  largely  based  on  the 
above observations, and includes the following steps.  
1)  Circle detection, which detects if an object contains a circle. 
If an object contains a circle, we know it is definitely not an 
arc, and all other arc removal methods can be skipped. The 
circle detection method works as follows.  
•  Draw a bounding box around an object, so that this 
bounding box does not touch any part of the object.  
•  Apply  the  color  filling  algorithm  to  the  top-left 
pixel,  i.e.,  flood  all  background  pixels  that  are 
connected to the top-left pixel, with a color that is 
different from foreground and background  
•  Scan the bounding box for pixels of the background 
color.  If  such  a  pixel  is  found,  then  a  circle  is 
detected. Otherwise, no circle is detected. 
Fig 6 shows two example cases. In Fig 6 (a), there is no pixel 
of the original background color once the filling algorithm is 
applied. That is, we are sure this object does not contain any 
circles. In contrast, the filling algorithm cannot get rid of all 
pixels  of  the  original  background  color  in  Fig  6  (b). 
Therefore,  by  detecting  these  pixels,  the  algorithm  is  sure 
that a circle exists in this object. (To improve the efficiency 
of the filling algorithm, the minimal gap between the object 
and the bounding box is just one pixel in both cases.) 
(a) 
(b) 
Fig 6. Circle detection: examples 
Then, we use the following 3 steps to detect and remove thick arcs 
as follows. At the end of each step, the histogram of the image is 
updated. 
2)  Scan  all  objects  that  contain  no  circles  for  discriminative 
features 
ignored).  Such 
discrimination  is  largely  about  pixel  count  checking.  If  an 
object  has  a  pixel  count  smaller  than  or  equal  to  50,  it  is 
removed  as  an  arc.  (We  observed  that  typically  a  character 
has  a  pixel  count  of  larger  than  50).  When  this  step  was 
applied to the challenge in Fig 5(a), an arc in the 2nd chunk 
was removed due to its small pixel count (see Fig 7). 
(other  objects 
safely 
are 
Fig 7. Arc removal - discriminative feature checking: an arc in 
the second chunk is removed. 
3)  Relative position checking.  This step examines the relative 
position of objects in a chunk, and is applied to all chunks 
that  contain  more  than  one  object  (note  that  connected 
characters are considered as a single object). The basic idea 
behind  this  step  is  that  the  relative  positions  of objects  can 
tell  arcs  and  real  characters  apart.  For  example,  typically 
characters  are  closer  to  the  baseline  (i.e.  the  horizontal 
central  of  a  chunk)  whereas  arcs  are  closer  to  the  top  or 
bottom 
In  addition,  characters  are 
horizontally juxtaposed, but never vertically. Once this step 
is completed, the histogram is updated. 
As  shown  in  Fig  8,  when  this  method  was  applied  to  the 
challenge  in  Fig  7,  further  arcs  were  removed.  Meanwhile, 
the  histogram  was  updated,  and  the  image  was  further 
segmented. 
image  borders. 
Fig 8. Arc removal - relative position checking: further 
arcs were removed and histogram was updated. 
The  relative  position  checking  has  proven  the  most  effective  in 
removing arcs in our attack. An incomplete list of typical relative 
position patterns is illustrated with real examples in Table 2. 
Table 2. Typical relative position patterns  
Relative position patterns 
Description 
Example 
Decision 
Layout 
O1 O2 
O3 
O3 
O1 O2 
O0 O1 O2 
O3 
O1 
O2  O3 
O4 
Three objects in a 
chunk: two objects 
more or less align along 
the baseline, the 3rd 
object under either of 
them 
Three objects in a 
chunk: two objects 
more or less align along 
the baseline, the 3rd 
object on top of either 
of them 
Four objects in a chunk: 
Three objects more or 
less align along the 
baseline, the 4th object 
under any of them 
Four objects in a chunk: 
Two objects more or 
less align along the 
baseline, the 3rd and 4th 
objects under and on 
top any of them 
respectively 
O3 is arc 
O3 is arc 
O3 is arc 
O1 and 
O4 are 
arcs 
Either O1 
or O2* 
• 
If neither of them contains a circle, then the object 
with a smaller pixel count is removed.  
This  process  repeats  until  the  image  has  exactly  8  objects 
remaining. 
Another example illustrating the whole arc removal process is in 
Fig  9,  where  (a)  was  an  image  segmented  by  vertical  and  CFS 
segmentations.  The  discriminative  feature  checking  failed  to 
detect  any  arc,  but  relative  position  checking  detected  an  arc  in 
both the 4th and 6th chunks. Fig 9 (b) was the result after those 
two  arcs  are  removed  and  the  histogram  was  updated.  Then, 
escaped arcs detection caught the last object as an arc. The final 
image at the end of the arc removal process is Fig 9 (c).  
(a) 
(b) 
 (c) 
Fig 9. Arc removal: another example. 
4.5  Locating connected characters 
After  removing  arcs,  an  immediate  step  is  to  locate,  if  any, 
connected  characters,  which  either  vertical  or  color  filling 
segmentation  has  failed  to  segment.  Among  n  objects  output  by 
the previous step, if n < 8, then at least one of the objects contains 
two  or  more  characters  and  these  characters  are  connected 
(typically by thin intersecting arcs). This step estimates how many 
characters are connected and locates them.  
The  following  design  and  implementation  features  of  the  MSN 
scheme  all  contribute  to  being  able  to  estimate  which  objects 
contain how many connected characters.  
• 
•  Connected characters in an object are horizontally but never 
vertically juxtaposed. Therefore, an object containing two or 
more  connected  characters  is  typically  wider  than  other 
objects.  
Fixed length: every challenge uses 8 characters.  
•  On  average  a  segmented  chunk  -  by  definition,  a  chunk 
cannot be further segmented by the vertical method but can 
by the CFS method - contains more than one character if the 
chunk  is  wider  than  35  pixels.  (This  width  was  measured 
after the following normalisation process was applied to the 
chunk: the left segmentation line is adjusted to cross the left-
most  foreground  pixel  in  the  chunk  vertically and  similarly 
for the right segmentation line.) 
According to the number of chunks, the width of each chunk, and 
the  number  of  objects  in  each chunk,  we  can  guess  with  a  high 
success  rate  which  chunk/object  contains  connected  characters 
and the number of these characters (or in other words, guess how 
many characters exist in each chunk).  
O1 
O2 
Two objects in a chunk: 
vertically juxtaposed 
*First apply the circle detection result obtained before: if only one of 
the  objects  contain  a  circle,  then  the  object  without  a  circle  is 
removed as an arc. If this does not work, then the object that is less 
aligned with the baseline is removed as an arc. 
4)  Detection  of  remaining  arcs.  The  above  steps  do  not 
necessarily identify all the arcs in an image. What is done in 
this step is as follows. First, count the number of remaining 
objects in the image (identified arcs are already removed and 
thus not counted). If this number is larger than 8, then there 
is  at  least  one  undetected  arc  in  the  image.  A  surprising 
observation  about  these  undetected  arc(s)  is  that  they  often 
are  the  first  or  last  object  in  the  current  image.  An  ad-hoc 
method works for most of the cases by simply checking the 
first and last objects with the following rules:  
• 
If  only  one  of  them  contains  a  circle,  the  object 
without a circle is removed as an arc.  
We  use  two  examples  to  show  how  our  algorithm  works.  The 
histogram  for  the  image  in  Fig  8  indicates  that  it  contains  four 
chunks. Since there are exactly 8 characters in these chunks, we 
know  there  are  the  following  five  exclusive  possibilities  for  the 
distribution of all the characters among the chunks3: 
(a)  There are four chunks, each having two characters. 
(b)  One  chunk  has  three  characters  and  there  are  two 
additional chunks each having two characters. 
(c)  One  chunk  has  four  characters  and  another 
two 
characters.  
(d)  There are two chunks each having three characters.  
(e)  One chunk has five characters. 
Since the 2nd, 3rd and 4th chunks in the image were all wider than 
35  pixels,  the  algorithm  determines  that  there  are  at  least  three 
chunks  each  having  more  than  one  character.  Consequently 
options (c), (d) and (e) are excluded - none of the options would 
allow more than two chunks that have more than one character. 
The  algorithm  also  knows  from  the  CFS  algorithm  that  the  2nd 
chunk  contains  three  objects,  and  therefore  option  (a)  is  also 
dropped. This leaves only option (b); thus the algorithm identifies 
that the 2nd chunk contains exactly three characters and the 3rd and 
4th chunks contains two characters each. 
Fig 10. “Approximation” for locating connected characters 
The second example (see Fig 10) is more subtle. The histogram 
for  this  image  indicates  it  contains  5  chunks.  Since  there  are 
exactly  8  characters  in  these  chunks,  we  know  there  are  the 
following  three  exclusive  possibilities  for  the  distribution  of  all 
the characters among the chunks: 
(a)  One of the chunks contains 4 characters  
(b)  One  chunk  has 
three  characters  and  another 
two 
characters. 
(c)  There are three chunks each having two characters. 
Since  the  3rd  and  4th  chunks  in  the  image  were  wider  than  35 
pixels, the algorithm determines that at least 2 doubles exists and 
consequently  option  (a)  is  excluded.  Since  there  were  only  two 
such  wider  chunks,  option  (c)  is  also  dropped.  This  leaves  only 
option (b). 
To determine which chunk contains a triple and which contains a 
double,  the  algorithm  compares  the  width  and  the  number  of 
objects  in  both  chunks.  The  algorithm  find  that  the  3rd  chunk 
“MG” is the widest chunk, however it also knows from the CFS 
algorithm that the 4th chunk “28G” contains 3 objects, this leaves 
only a maximum of 2 objects that can exist in the 3rd chunk; thus 
the algorithm identifies that the 3rd chunk contains two connected 
characters. 
It is feasible to achieve the same results without using the number 
of  chunks  but  relying  more  on  the  number  of  objects.  However 
this  alternative  method  requires  keeping  track  of  not  only  each 
object’s position in the image but also the position with respect to 
3 In the general case, it is also trivial to enumerate all possibilities 