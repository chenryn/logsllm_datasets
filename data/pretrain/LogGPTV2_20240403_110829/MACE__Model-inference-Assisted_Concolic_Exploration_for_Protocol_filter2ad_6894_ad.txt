frameBufferUpdateRequest message
keyEvent message
pointer event message
clientCutText message
byte 0x22
malformed client’s protocol version
frameBufferUpdateRequest message with
bpp=8 and true-color=false
malformed client’s protocol version
(a) Input Legend.
Label Description
R1
R2
R3
R4
R5
R6
N
T
server’s protocol version
server’s supported security types
serverInit message
framebufferUpdate message with default en-
coding
framebufferUpdate message with alternative
encoding
setColourMapEntries message
no explicit reply from server
socket closed by server
(b) Output Legend.
Figure 4: Explanation of States and Input/Output Messages of the State Machine from Figure 3.
pairing message types with parameters for 23 (out of 67)
message types, which is an improvement of 10 message
types over the test suite, which exercises only 13 differ-
ent message types.
We identiﬁed several causes of incompleteness in mes-
sage discovery. First, message validity is conﬁguration
dependent. For example, the spoolopen, spoolwrite,
spoolclose and spoolreturnqueue message types
need an attached printer to be deemed valid. Our experi-
mental setup did not emulate the complete environment,
precluding us from discovering some message types.
Second, a single echo message type generated by MACE
induced the server to behave inconsistently and we dis-
carded it due to our determinism requirement. Although
this is likely a bug in Samba, this behavior is not reliably
reproducible. We exclude this potential bug from the vul-
nerability reports that we provide later. Third, our infras-
tructure is unable to analyze the system calls and other
code executed in the kernel space. In effect, the com-
puted symbolic constraints are underconstrained. Thus,
some corner-cases, like a speciﬁc combination of the
message type and parameter (e.g., a speciﬁc ﬁle name),
might be difﬁcult to generate. This is a general problem
when the symbolic formula computed by symbolic exe-
cution is underconstrainted.
In our experiments, we used Samba’s default conﬁgu-
ration, in which encryption is disabled. The SMB proto-
col allows null-authentication sessions with empty pass-
word, similar to anonymous FTP. Thus, authentication
posed no problems for MACE.
MACE converged relatively quickly in both Vino and
Samba experiments (in three iterations or less). We at-
tribute this mainly to the granularity of abstraction. A
ﬁner-grained model would require more rounds to infer.
The granularity of abstraction is determined by the out-
put abstraction function, (Section 3.1).
6.3 Discovered Vulnerabilities
We use the inferred models to guide the state-space ex-
ploration of implementations of the inferred protocol.
After each inference iteration, we count the number of
newly discovered states, generate shortest transfer se-
quences (Section 3.3) for those states, initialize the server
with a shortest transfer sequence to the desired (newly
discovered) state, and then run 2.5 hours of state-space
exploration in parallel for each newly discovered state.
The input messages discovered during those 2.5 hours
of state-space exploration per state are then ﬁltered and
used for reﬁning the model (Section 4.4). For the base-
line dynamic symbolic execution without model guid-
ance, we run |Q| parallel jobs with different random
seeds for each job for 15 hours, where |Q| is the num-
ber of states in the ﬁnal converged model inferred for the
target protocol. Different random seeds are important,
as they assure that each baseline job explores different
trajectories within the program.
We rely upon the operating system runtime error de-
tection to detect vulnerabilities, but other detectors, like
Valgrind, could be used as well. Once MACE detects
a vulnerability, it generates an input sequence required
for reproducing the problem. When analyzing Linux ap-
plications, MACE reports a vulnerability when any of the
critical exceptions (SIGILL, SIGTRAP, SIGBUS, SIGFPE,
and SIGSEGV) is detected. For Windows programs,
http://valgrind.org/
a vulnerability is found when MACE traps a call to
ntdll.dll::KiUserExceptionDispatcher and the
value of the ﬁrst function argument represents one of the
critical exception codes.
MACE found a total of seven vulnerabilities in Vino
2.26.1, RealVNC 4.1.2, and Samba 3.3.4, within 2.5
hours of state-space exploration per state.
In compar-
ison, the baseline dynamic symbolic execution without
model-guidance, found only one of those vulnerabilities
(the least critical one), even when given the equivalent
of 15 hours per state. Four of the vulnerabilities MACE
found are new and also present in the latest version of the
software at the time of writing. The list of vulnerabilities
is shown in Table 2. The rest of this section provides a
brief description of each vulnerability.
Vino. MACE found three vulnerabilities in Vino; all
of them are new. The ﬁrst one (CVE-2011-0904) is
an out-of-bounds read from arbitrary memory locations.
When a certain type of the RFB message is received,
the Vino server parses the message and later uses two
of the message value ﬁelds to compute an unsanitized
array index to read from. A remote attacker can craft
a malicious RFB message with a very large value for
one of the ﬁelds and exploit a target host running Vino.
The Gnome project labeled this vulnerability with the
“Blocker” severity (bug 641802), which is the highest
severity in their ranking system, meaning that it must
be ﬁxed in the next release. MACE found this vulner-
ability after 122 minutes of exploration per state, in the
ﬁrst iteration (when the inferred state machine has seven
states, Table 1). The second vulnerability (CVE-2011-
0905) is an out-of-bounds read due to a similar usage
of unsanitized array indices; the Gnome project labeled
this vulnerability (bug 641803) as “Critical”, the second
highest problem severity. This vulnerability is marked
as a duplicate of CVE-2011-0904, for it can be ﬁxed by
patching the same point in the code. However, these two
vulnerabilities are reached through different paths in the
ﬁnite-state machine model and the out-of-bounds read
happens in different functions. These two vulnerabilities
are actually located in a library used by not only Vino,
but also a few other programs. According to Debian se-
curity tracker, kdenetwork 4:3.5.10-2 is also vulnerable.
The third vulnerability (CVE-2011-0906) is an inﬁnite
loop, found in the conﬁguration with authentication en-
abled. The problem appears when the Vino server re-
ceives an authentication input from the client larger than
the authentication checksum length that it expects. When
the authentication fails, the server closes the client con-
nection, but leaves the remaining data in the input buffer
http://security-tracker.debian.org/tracker/CVE-2011-0904
It also enters an deferred-authentication state
queue.
where all subsequent data from the client is ignored. This
causes an inﬁnite loop where the server keeps receiv-
ing callbacks to process inputs that it does not process
in deferred-authentication state. The server gets stuck in
the inﬁnite loop and stops responding, so we classify this
vulnerability as a denial-of-service vulnerability. Unlike
all other discovered vulnerabilities, we discovered this
one when L∗ hanged, rather than by catching signals or
trapping the exception dispatcher. Currently, we have no
way of detecting this vulnerability with the baseline, so
we do not report the baseline results for CVE-2011-0906.
Samba. MACE found 3 vulnerabilities in Samba. The
ﬁrst two vulnerabilities have been previously reported
and are ﬁxed in the latest version of Samba. One of
them (CVE-2010-1642) is an out-of-bounds read caused
by the usage of an unsanitized Security Blob Length
ﬁeld in SMB’s Session Setup AndX message. The other
(CVE-2010-2063) is caused by the usage of an unsani-
tized ﬁeld in the “Extra byte parameters” part of an SMB
Logoff AndX message. The third one is a null pointer
dereference caused by an unsanitized Byte Count ﬁeld
in the Session Setup AndX request message of the SMB
protocol. To the best of our knowledge, this vulnerability
has never been publicly reported but has been ﬁxed in the
latest release of Samba. We did not know about any of
these vulnerabilities prior to our experiments.
RealVNC. MACE found a new critical out-of-bounds
write vulnerability in RealVNC. One type of the RFB
message processed by RealVNC contains a length ﬁeld.
The RealVNC server parses the message and uses the
length ﬁeld as an index to access the process memory
without performing any sanitization, causing an out-of-
bounds write.
Win XP SMB. The implementation of Win SMB is
partially embedded into the kernel, and currently our dy-
namic symbolic execution system does not handle the
kernel operating system mode. Thus, we were able to
explore only the user-space components that participate
in handling SMB requests. Further, we found that many
involved components seem to serve multiple purposes,
not only handling SMB requests, which makes their ex-
ploration more difﬁcult. We found no vulnerabilities in
Win XP SMB.
6.4 Comparison with the Baseline
We ran several experiments to illustrate the improvement
of MACE over the baseline dynamic symbolic execution
approach. First, we measured the instruction coverage
of MACE on the analyzed programs and compared it
Program
Vulnerability Type
Disclosure ID
Iter.
Jobs
( |Q| )
Search Time
MACE
Baseline
Vino
Samba
Wild read (blocker)
Out-of-bounds read
Inﬁnite loop
Buffer overﬂow
Out-of-bounds read
Null-ptr dereference
CVE-2011-0904
CVE-2011-0905
CVE-2011-0906†
CVE-2010-2063
CVE-2010-1642
Fixed w/o CVE
RealVNC
Win XP SMB None
Out-of-bounds write CVE-2011-0907
None
per job
(min)
total
(hrs)
122
31
1
88
10
8
15
4
1
124
14
12
17
2
>150 >210
7
7
7
84
84
84
7
84
1/2
1/2
1/2
1/3
1/3
1/3
1/1
None
per job
(min)
>900
>900
N/A
total
(hrs)
>105
>105
N/A
>900 >1260
>900 >1260
602
>105
>105
430
>900
>900
Table 2: Description of the Found Vulnerabilities. The upper half of the table (Vino and Samba) contains results for the reference
implementations from which the protocol model was inferred, while the bottom half (Real VNC and Win XP SMB) contains the
results for the other implementations that were explored using the inferred model (from Vino and Samba). The disclosure column
lists Common Vulnerabilities and Exposures (CVE) numbers assigned to vulnerabilities MACE found. The new vulnerabilities
are italicized. The † symbol denotes a vulnerability that could not have been detected by the baseline approach, because it lacks
a detector that would register non-termination. We found it with MACE, because it caused L∗ to hang. The “Iter.” column lists
the iteration in which the vulnerability was found and the total number of iterations. The “Jobs” column contains the total number
of parallel state-space exploration jobs. The number of jobs is equal to the number of states in the ﬁnal converged inferred state
machine. The baseline experiment was done with the same number of jobs running in parallel as the MACE experiment. The
MACE column shows how much time passed before at least one parallel state-space exploration job reported the vulnerability and
the total runtime (number of jobs × time to the ﬁrst report) of all the jobs up to that point. The “Baseline” column shows runtimes
for the baseline dynamic symbolic execution without model guidance. We set the timeout for the MACE experiment to 2.5 hours
per job. The baseline approach found only one vulnerability, even when allowed to run for 15 hours (per job). The > t entries mean
that the vulnerability was not found within time t.
Program
(Protocol)
Sequential
Time
(Unique crashes)
(min) Baseline MACE improvement Baseline MACE
Instruction Coverage
Total crashes
Vino (RFB)
Samba (SMB)
RealVNC (RFB)
Win XP (SMB)†
1200
16775
1200
16775
129762
66693
39300
90431
138232
105946
47557
112820
6.53%
58.86%
21.01%
24.76%
0 (0)
20 (1)
0 (0)
0 (0)
2 (2)
21 (5)
7 (2)
0 (0)
Table 3: Instruction Coverage Results. The table shows the instruction coverage (number of unique executed instruction addresses)
of MACE after 2.5 hours of exploration per state in the ﬁnal converged inferred state machine, and the baseline dynamic symbolic
execution given the amount of time equivalent to (time MACE required for inferring the ﬁnal state machine + number of states in
the ﬁnal state machine × 2.5 hours), shown in the second column. For example, from Table 1, we can see that Samba inference
took the total of 2028 + 1840 + 307 = 4175 minutes and produced an 84-state model. Thus, the baseline approach was given
84 × 150 + 4175 = 16775 minutes to run. The last two columns show the total number of crashes each approach found, and the
number of unique crashes according to the location of the crash in parenthesis. Due to a limitation of our implementation of the
state-space exploration (user-mode only), the baseline result for Windows XP SMB (marked †) was so abysmal, that comparing to
the baseline would be unfair. Thus, we compute the Win XP SMB baseline coverage by running Samba’s gentest test suite.
against the baseline coverage. Second, we compared the
number of crashes detected by MACE and by the base-
line approach over the same amount of time. This num-
ber provides an indication of how diverse the execution
paths discovered by each approach are: more crashes im-
plies more diverse searched paths. Finally, we compared
the effectiveness of MACE and the baseline approach to
reach deep states in the ﬁnal inferred model.