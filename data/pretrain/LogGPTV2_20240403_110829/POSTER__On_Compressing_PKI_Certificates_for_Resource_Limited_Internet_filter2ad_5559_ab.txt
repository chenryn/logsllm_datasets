A certificate is a digital system or code that is responsible for data encryption, authentication, and verification. A cer-
tificate of authenticity can be issued by a certification authority (CA) that can be trusted. CAs must adhere to very strict
rules and policies when issuing certificates and are managed under government regulations. If a device has a certificate
issued by a trusted CA, the device and its partners can be trusted; thus, they can exchange data in a secure manner.
PKI exploits public key cryptography, the most common method used for authenticating message senders over the
Internet or for encrypting messages. Traditional cryptography is often involved in creating and sharing “secret keys” that
are used to encrypt and read messages. These secret (or private) key systems possess a fatal weakness in the fact that they
can be easily intercepted from the network. For this reason, PKI is preferred in the current Internet structure.
4 of 15
TABLE 1 ROM and RAM sizes list of various MCUs used for IoT systems
MCU
MSP430F1611 (Texas Instruments23)
Cortex M0+ (Atmel24)
Cortex M3 (Atmel25)
KWON ET AL.
Flash RAM
48 kB
10 kB
256 kB 32 kB
256 kB 52 kB
Certificate requirements for IoT devices
3.2
While maintaining the aforementioned security levels is attractive, unfortunately, the conventional PKI scheme is not
suitable for verifying data generated by lightweight terminals (eg, resource-limited IoT devices). Specifically, the typical
size of certificates exchanged in the existing Internet is 800 to 2000 Bytes. This is considerably large considering that the
maximum frame size of the widely used IEEE 802.15.43 standard is only 127 bytes. This is a significant burden to the IoT
network, in which nodes keep their radio off, and periodically wakes up to exchange data as a way to improve the nodes'
battery efficiency. Although revisions of the IEEE 802.15.4 protocol such as the 802.15.4e standard proposed expansions
that relaxes the per-frame size limitations and allow the transmission of more data in a single packet, we focus on the
original IEEE 802.15.4 protocol given that they are still more widely used compared to the revised protocols.
The certificate size not only affects the network performance but also impacts the limited storage capacity of IoT devices.
Table 1 shows the RAM and flash sizes of several popular microcontrollers (MCUs). These numbers indicate that for the
widely used TI MSP430 and ARM Cortex-series MCUs, the amount of RAM and flash memory available for certificate
storage is very limited. Furthermore, the limited space is stressed by the actual data gathered from the devices' sensors,
and the essential code stack for IoT system operation. Together with the network and application implementations, the
size of the certificates, and indeed the size of the program code to process the certificates, can utilize only a small amount
of space.
Based on these observations, we present a set of requirements that must be considered when implementing
certificate-based security to IoT networks.
• Memory size/usage requirements: The limited memory and storage capacities on the low-power, resource-limited
nodes used in IoT systems force the system developers to focus only on a limited scale of security operations. Fur-
thermore, with certificates used in the IoT security mechanisms, the number of certificates a single node can store is
naturally limited by a node's Flash size. Therefore, not only should we support a lightweight scheme for IoT security,
but we should also minimize the size of certificates we target to utilize. In doing so, we should initially try to main-
tain full compatibility with the Internet architecture and also present schemes that are more optimized for use in the
“Intra-net” of things.
• Energy requirements: Low-power is key to many IoT systems. Many devices operate on batteries with a tight lifetime
target and radio low-duty cycles.4 Applying security schemes to IoT devices should not (at the very best) increase the
power usage. This power usage includes the computational time to secure the packet (and links), and also include the
power caused by transmitting longer packets for security purposes.
• Network traffic requirements: Related to the energy requirements discussed above, the increased packet size can
force the radio to stay up longer and increase the energy usage of battery-operated IoT nodes. Furthermore, longer
packets lead to more congestion possibilities on the wireless medium,26 which can naturally introduce additional costs
due to packet scheduling. Supporting certificates in IoT platforms should take in consideration that including such
context in the packet directly can cause the packet sizes (and potentially the quantity due to message fragmentation)
to increase.
With these base requirements, we present our scheme to effectively support certificate-based security on IoT devices in
the following sections.
TLS and DTLS operations
3.3
TLS27 and DTLS28 are the most popular protocols used for enabling PKI-based security structures. Therefore, LightCert
is designed based on the use of TLS/DTLS. In the TLS/DTLS handshake process, if the client and the server agree on
the certificate key exchange process, the server sends a certificate message for authentication. The client may want to
re-establish the connection by sending a client hello using the existing session ID. If the session ID sent by the client
matches the session cache of the server, we can know that the purpose of this exchange is only to re-establish a previous
connection. Otherwise, the pairs will establish a new session ID and execute a full handshake process.
KWON ET AL.
5 of 15
Traditional networks can have long-living TLS/DTLS connections, but in the IoT domain, there is a high chance that
these connections will only last for short periods. Specifically, IoT devices typically have a tight limit on the amount of
memory space they can hold. In the TLS/DTLS process, the client and server nodes need memory space to store the cer-
tificates and associated session values to re-establish prior connections. However, with space limitations, all information
cannot be stored on the IoT node; thus, the certificate and its associated data may be deleted, for the sake of storing other
certificate data and can result in a continuous exchange of certificates with the same party.
We can also think of the IoT scenario where various users connect for a short time only to get simple information
from the nodes. For example, we might assume that users are getting information about a parking place in a public car
park. This is a common scenario for publicly-deployed IoT systems. Such a situation does not require the node to store
the user's certificate consistently, but since new connections are made frequently, the certificate exchange process often
occurs as well.
Threat model
3.4
The development of the IoT network has a tremendous impact on the spread of the Internet in various fields. This provides
great convenience to people, but at the same time provides an opportunity for hackers to attack. A fragmentary example
is when a hacker masquerades as a node and breaks into the IoT subnet. If all nodes in the network are free to exchange
information with third-party devices, users can be in a very dangerous situation.
LightCert targets to make improvements to the exchange process of certificates for authentication between devices
sending and receiving real data. For this, we assume that the gateway device can be trusted. Since we take a scenario
where the IoT is first installed by the users themselves, we do not see this as a strong assumption. Even if the gateway
was somehow considered to be malicious, since LightCert assures end-to-end reliability, the contents can still be pro-
tected. Therefore, while gateways are reliable, data exchanging entities are not fully trusted. In addition, all discussions
on LightCert presume a state where the nodes are already issued a certificate from an Internet entity that is sufficiently
trusted (eg, authorized CAs).
4
LIGHTCERT
Based on the requirements for a lightweight certificate for low-power IoT, as we mentioned in the previous section, we
now discuss in detail on the design of LightCert, our proposal for supporting Internet-level certificates on resource-limited
IoT platforms. Specifically, the contents of the certificate exchanged to establish a secure connection become a burden to
the IoT devices and network packets, given that IEEE 802.15.4-based low-power networks can only handle packet sizes of
up to 127 octets in the payload.3 Having to deliver large certificates leads to the need for packet fragmentation, increasing
the number of packets to be transmitted even for exchanging a small amount of “valid” information. This naturally leads
to resource drain, both in terms of bandwidth and energy.
LightCert offers a lightweight mechanism for handling security certificates on low-power resource-limited IoT devices
(typically 6LoWPAN/IPv6-based) by exploiting the two following facts. First, we transform the X.509 certificates29 in
ASN.1 format to a reduced format based on the concise binary object representation (CBOR) format.7 The CBOR format
offers a lightweight structure, which allows the original ASN.1 byte sequence to be represented using a smaller number of
bytes. We have attempted to make the certificate structurally lightweight by using the relatively free CBOR format rather
than the traditionally used ASN.1.
Second, we utilize the capability of the gateway (eg, 6LoWPAN border router) and hashing to minimize the payload
exchanged over the wireless network channel. Specifically, in LightCert, we adopt the fact that neighboring IoT nodes that
are typically bounded to the same subnet (eg, devices sharing the same 6LoWPAN border router) share many similarities.
In fact, this similarity in network configurations is what makes the 6LoWPAN IPv6 header compression process possible.
In 6LoWPAN, common (and preknown) portions of the IPv6 header or items that can be extracted from other parts of the
message such as version, payload length, and traffic class are eliminated from the packet that is transmitted
from the link layer. The 6LoWPAN border router takes the role of “reconstructing” the header if the packet needs to
leave the 6LoWPAN subnet. As for certificates, similar to the 6LoWPAN approach, there are many common contents that
can be shared within certificates for nodes in the same subnet. We can easily assume that nodes on the same subnet are
typically issued certificates from the same or a chain of CAs, and they also share similarities in the extension section
of the certificate due to their similar purposes. Therefore, instead of having each resource-limited IoT node issuing and
6 of 15
KWON ET AL.
forwarding packets with the full-sized security certificate, we implicitly omit common information and send only the
content that is “unique” to the specific node within the IoT-nodes' link layer transmissions.
To allow this, the gateway (eg, 6LoWPAN border router) oversees the process of managing the full certificate. Gateways
provide a mechanism for all nodes in its subnet to easily discover common parts within the certificate, which are then used
to facilitate easy certificate-size reduction within the IoT network. If all nodes generate the key values with a uniform hash
function shared in the same gateway's subnet scope, these keys can be used to compare mutual certificates. The common
parts obtained through the comparison process do not need to be explicitly sent; thus, this can reduce the payload that
an IoT node must send for maintaining a secure channel. Note that we focus mostly on the efficient transmission (and
reception) at resource-limited IoT devices and their link layer connections. The goal of LightCert is to assure that the IoT
nodes conserve their resources as much as possible while maintaining standards-compliant connectivity when reaching
the conventional Internet architecture. The following subsections will detail our proposed mechanism.
4.1 Reduced format
The focus of the reduced format, which is a modified version of the ASN.1-based certificate, is to achieve efficient reassem-
bly and lightweight exchange procedures. Even if the format is changed for lightweight operations, the certificate must
be able to be restored to its original form to guarantee the integrity. The majority of the X.509 certificate format follows
strict ordering, but the extensions field can be randomly arranged. Therefore, even when the certificate is reduced in
size, the reduced certificate must still maintain the orderings of the original (nonreduced) certificate, including the origi-
nal structure of the extensions field. To take a simpler formatting approach than ASN.1, LightCert reduces the certificates'
size by using the CBOR format.7
Each attribute in the reduced certificate consists of type, size, and contents. Type is used as an indicator of
the content type itself (eg, issuer, subject, validity period) from the original certificate. The object identifier (OID) that
is typically included in X.509 certificates is also represented using the type attribute. Size describes the length of the
following content, and it is an indicator of the exact bounds of each attribute. If the value of size is 0, it means that the
corresponding attribute values of both certificates are the same. In this case, only the order of the certificate is defined,
and the contents are not transmitted. Finally, content holds the actual data of the attribute.
Certificate registration
4.2
We present in Figure 1, the process of registering a certificate to the gateway. All nodes first connect to the gateway and
then request their certificate to be hashed at the gateway (Figure 1A). The PKI certificates currently being used have a
fixed format tailored to the certificate's version. To reduce the certificate size, the gateway operates a hash function, which
makes use of the subdivided certificate format as input parameters, except for the essential portions such as the public key
and signature (Figure 1B). Using the output of the hash, the gateway maps the key to the input structure and stores this
information in the “Field” table (Figure 1C). The “Field” table guarantees that the key values shared among the nodes in
the subnet come from the same certificate fields. This process also transforms the certificate into a reduced format, maps
to the IP address of the node, and stores this data in the “Complete” table (Figure 1D). The “Complete” table is managed
FIGURE 1 The process of registering a certificate, which takes
place when a node is connected to a gateway. IoT, Internet of Things
KWON ET AL.
7 of 15
FIGURE 2 The degree of certificate fragmentation to be used as the prehashing argument value for different compression levels.
A, Level 0; B, Level 1; C, Level 2
at the gateway to proxy the transfer of an IoT node's certificate. Finally, the node obtains a reduced format of the original
certificate, which is created using its own unique full certificate (Figure 1E).
LightCert defines three levels of certificate compression when dividing the arguments for the hash function. Specifically,
we take a closer look at X.509 certificates as depicted in Figure 2. When the gateway hashes the certificate in “Level 0,”
it splits the certificate based on the basic fields (Figure 2A) of the original certificate. If the content of a specific field