成功通关
## **7、Mafia**
三个限制
    截取长度50的字符串
    '"+-!\[]被替换为_
    alert被替换为_
绕过方法
    定义匿名函数，利用匿名函数的参数构造payload，同时使用正则表达式来绕过alert字符串的检测。
    利用数字和字符串之间的互相转换，来绕过针对alert的检测。
    在URL地址后面加上#${payload}，然后通过location.hash.slice(1)来获取payload，也能做到绕过检测。
构造payload：
    // 匿名函数
    ?mafia=Function(/ALERT(1337)/.source.toLowerCase())()
    // 数字转字符串，将30进制的数字8680439转换成字符串，就是alert
    ?mafia=eval(8680439..toString(30))(1337)
    // 在URL后面加上 #alert(1337)
    ?mafia=eval(location.hash.slice(1))#alert(1337)
成功通关
## **8、Ok, Boomer**
使用了DOMPurify这个第三方库来过滤非法字符
setTimeout(ok, 2000)中的ok可以接收一个函数或者字符串，如果我们能够向ok这个变量注入可执行的payload，那么也就能成功弹框
可以使用DOM Clobbering的方式，通过向HTML注入DOM元素，来实现操作JavaScript变量
首先，要构造一个变量ok，我们可以通过创建一个id=ok的DOM元素来实现，比如
然后，ok需要接受一个字符串作为值，而在对标签调用toString()方法时，会返回属性href的值，所以，我们可以选择标签作为构造对象
href的值要遵守protocol:uri的格式，然而，在href里直接使用javascript:协议是不行的
通过查看DOMPurify的源码可以发现，它支持的合法的协议有mailto, tel, xmpp等等，随便选择一个即可
    ?boomer=
    ?boomer=
成功通关
## **9、Area 51**
正则过滤了输入的debug参数
使用template把输入包裹进了注释
输入123看看
?debug=123
它会变异成
这种变异会产生新的注释，于是打破旧的注释
做个尝试
?debug=123
可以看到123出来了