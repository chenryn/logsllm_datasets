= 日志易机器学习手册
北京优特捷信息技术有限公司
v1.1, 2020-10-31
:description: 
:encoding: utf-8
:lang: zh_CN
:toc: left
:toclevels: 4
:toc-title:
:numbered:
:compat-mode!:
:autofit:
:numbered:
:chapter-label:
:specialnumbered!:
:experimental:
:listing-caption: Listing
:back-cover-image: image:resources/bckcover.jpg[]
:icons: font
:stylesheet: resources/css/yottastyle.css
ifdef::backend-pdf[]
:pagenums:
:tabsize: 4
:pygments-style: bw
:source-highlighter: pygments
endif::[]
== 机器学习应用概述
机器学习是利用样本数据或以往的经验，以此概括和优化计算机程序的过程。这种概括通常就被称为"模型"，人们采用模型来预测字段当下或未来的值，检测数据中的异常。
日志易机器学习应用，让日志易用户可以很方便的从界面化流程中，创建、验证和管理机器学习模型。和日志易的智能运维、安全分析应用不同的是，机器学习应用并没有针对特定场景优化和封装算法方案，用户需要自身具备一定的领域知识、机器学习知识，以及日志易 SPL 知识，才能恰当的使用日志易机器学习应用。
===  机器学习应用特性
机器学习应用包含以下特性：
* 内置多个不同的样本数据集，帮助新用户理解机器学习的概念。每个样本示例都预置了一个建模流程向导，以演示如何执行不同类型的机器学习分析和预测，包括使用内置数据时的最佳效果。用户可以按照样本分类和算法分类，来查看最贴近自己需求场景的示例。
* 向导式建模流程，针对不同的所选算法，会自动提供用于配置该算法的对应参数表单。模型训练完成后，向导还会提供可视化的模型评估和解释。此外，向导还可以实时输出界面表单配置自动生成的实际 SPL 语句，用户可以复制 SPL 语句用于日志易的任意其他功能页面上，比如搜索、告警、仪表盘等。
* 数十个常见的机器学习算法，基于业内最流行的 Python Scikit-Learn 机器学习库实现，可以很方便的进行后续扩展开发。
* 新增了多个 SPL 搜索指令，用以拟合和应用模型，以及列出，查看和删除已有模型。这些指令可以和原有的日志易 SPL 指令无缝衔接，共同处理数据。
=== 机器学习的类型
机器学习过程从一个问题开始。您可能会问以下问题之一：
* 我被黑客入侵了吗？
* 服务器负载出问题了么？
* 在接下来的一个小时内访问我的网站会到多少次？
* 特定社区中房屋的价格范围是多少？
机器学习有不同类型，每种类型又有多种不同的算法实现，您可以在了解类型和适用场景后，在后续章节中查看具体算法的原理和可调参数。
==== 回归(Regression)
回归建模可以从多种影响因素中预测出一些结果。回归是一种预测分析。 例如，在计算机上采集利用率指标，比如CPU百分比和磁盘读写量以后，可以使用回归建模来预测该机器现在和将来可能消耗的电量。
[source]
----
... | fit DecisionTreeRegressor temperature from date_month date_hour into temperature_model
----
==== 分类(Classification)
分类建模根据许多影响因素来预测类别或类别。 分类是一种预测分析。 例如，您可能拥有有关网站或软件产品中用户行为的数据。 您可以使用分类建模来预测该客户是否会流失。
[source]
----
... | fit RandomForestClassifier SLA_violation from * into sla_model
----
==== 预测(Forecasting)
预测是一种预测分析，可以预测单个值在时间上的未来变化。 预测会查看单个值的过去测量值，例如每日获利或每分钟CPU使用率，以预测将来的值。 例如，您可能在过去5年中按季度获得了销售结果。 使用预测模型预测下一个季度的销售额。
[source]
----
... | fit ARIMA Voltage order=4-0-1 holdback=10 forecast_k=10
----
==== 聚类(Clustering)
聚类将相似的数据点分组在一起。 例如，您可能希望根据客户的购买行为将他们分组，例如他们倾向于消费多少或一次购买多少商品。 使用聚类建模将指定的功能分组在一起。
[source]
----
... | fit DBSCAN * | stats count by cluster
----
==== 异常检测(Anomaly Detection)
异常检测基于机器学习计算期望值，将其与实际情况进行比较，并在两个值之间的差异较大时触发警报，从而在数据中找到异常值。
[source]
----
... | fit OneClassSVM * kernel="poly" nu=0.5 coef0=0.5 gamma=0.5 tol=1 degree=3 shrinking=f into Model_Name
----
== 机器学习指令介绍
目前支持命令有 fit，apply，listmodels，deletemodel，summarymodel 五种指令，下面分别介绍指令的使用场景和语法规则。
=== fit
功能：
    该命令可以对数据采用指定算法训练模型
语法：
    fit    []  [] from  [into ]  [override=true / false]
参数:
必选参数：
* 
** 格式：
** 描述：指定训练所使用的算法名称
* 
** 格式：,...
** 描述：指定训练时所使用的字段
可选参数：
* ：
** 格式： = ,  = ...
** 描述：指定训练所使用算法对应的参数
** 备注：每个算法的参数个数和名称有所区别，参数列表和名称请见下方链接
* ： 根据算法的特性来决定，如StandardScaler, TFIDF 就没有 target
** 格式：,...
** 描述：指定训练时要预测的字段
* ：
** 格式：
** 描述：指定生成的模型名称
** 限制：如果模型名已经存在，且不是partial_fit，会报错；有些模型如ARIMA， DBSCAN，SpectralClustering等不支持保存为模型，只支持一次性fit&apply
* :
** 格式：
** 描述：指定是否需要覆盖已保存的同名模型
** 默认值：false
Note: 部分算法支持增量的更新(`partial_fit`)， 使用方法可在param_list中指定，如 `partial_fit = True`，并非所有算法都支持，具体支持的算法在算法详解介绍中给出。
=== apply
功能：
    对数据采用已训练并保存下来的模型进行预测行为
语法：
    apply  
参数:
必选参数：
* 
** 格式：
** 描述：指定预测所使用的模型名称，模型名必须是已经保存的且没有被删除掉的
=== listmodels
功能：
    列出已经保存的所有模型名
语法：
    listmodels
参数: 无
示例：`| listmodels` 
=== deletemodel
功能：
    按名称删除已经保存的模型
语法：
    deletemodel 
参数:
必选参数：
* 
** 格式：
** 描述：指定要删除的模型名称，模型名必须是已经保存的且没有被删除掉的
示例：`| deletemodel count_predict2`
=== summarymodel
功能：
    按名称输出已经保存的某个模型的总结
语法：
    summarymodel 
参数:
必选参数：
* 
** 格式：
** 描述：指定要输出总结的模型名称，模型名必须是已经保存的且没有被删除掉的
** 限制：有些模型不支持summary指令，受模型本身实现所限
示例：`|  summarymodel  count_predict2`
[NOTE]
====
对于listmodels，deletemodel， summarymodel这三种命令，每个用户只能对自己的模型进行操作，不同用户的模型信息也保存在不同的位置。
====
== 机器学习算法介绍
日志易机器学习算法基于业界最流行的 Scikit-Learn 机器学习算法库封装，算法可调参数的描述引自 Scikit-Learn 官网文档，希望具体学习调参的读者，请跟进 Scikit-Learn: 。
=== 预处理
include::ml-chapters/Preprocessing.adoc[]
include::ml-chapters/FeatureExtraction.adoc[]
=== 回归
include::ml-chapters/GeneralizedLinearModel.adoc[]
include::ml-chapters/TreeBasedRegressor.adoc[]
include::ml-chapters/XGBRegressor.adoc[]
=== 分类
include::ml-chapters/GeneralizedLinearModelforClassification.adoc[]
include::ml-chapters/NaiveBayesClassifier.adoc[]
include::ml-chapters/TreeBasedClassifier.adoc[]
include::ml-chapters/SupportVectorMachine.adoc[]
=== 聚类
从统计学的观点来看，聚类就是给定一个包含N个数据点的数据集和一个距离度量函数F（例如计算簇内每两个数据点之间的平均距离的函数），要求将这个数据集划分为K个簇（或者不给出数量K，由算法自动发现最佳的簇数量），最后的结果是找到一种对于数据集的最佳划分，使得距离度量函数F的值最小。从机器学习的角度来看，聚类是一种非监督的学习算法，通过将数据集聚成n个簇，使得簇内点之间距离最小化，簇之间的距离最大化。
include::ml-chapters/Clustering.adoc[]
=== 异常检测
include::ml-chapters/AnomalyDetection.adoc[]
=== 时序预测
include::ml-chapters/TimeSeriesAnalysis.adoc[]