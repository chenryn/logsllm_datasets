title:DeepDroid: Dynamically Enforcing Enterprise Policy on Android Devices
author:Xueqiang Wang and
Kun Sun and
Yuewu Wang and
Jiwu Jing
DeepDroid: Dynamically Enforcing Enterprise Policy on Android Devices
Xueqiang Wang∗†, Kun Sun‡, Yuewu Wang∗ and Jiwu Jing∗
∗ Data Assurance and Communication Security Research Center,
Institute of Information Engineering, Chinese Academy of Sciences
{wangxueqiang, ywwang, jing}@is.ac.cn
†University of Chinese Academy of Sciences
‡Department of Computer Science, College of William and Mary
PI:EMAIL
Abstract—It is becoming a global trend for company
employees equipped with mobile devices to access compa-
ny’s assets. Besides enterprise apps, lots of personal apps
from various untrusted app stores may also be installed
on those devices. To secure the business environment,
policy enforcement on what, how, and when certain apps
can access system resources is required by enterprise IT.
However, Android, the largest mobile platform with a
market share of 81.9%, provides very restricted interfaces
for enterprise policy enforcement. In this paper, we present
DeepDroid, a dynamic enterprise security policy enforce-
ment scheme on Android devices. Different from existing
approaches, DeepDroid is implemented by dynamic mem-
ory instrumentation of a small number of critical system
processes without any ﬁrmware modiﬁcation. DeepDroid
can be easily deployed on various smartphone platforms
with a wide range of Android versions. Moreover, based
on the context information extracted from Binder intercep-
tion, a ﬁne-grained policy can be enforced. We develop a
prototype of DeepDroid and test it on various smartphones
and Android versions. The experimental results show
that DeepDroid can effectively enforce enterprise resource
access policies with negligible performance overhead.
I.
INTRODUCTION
Nowadays, an increasing number of employees are
allowed to use mobile devices in workplace and con-
nect to enterprise assets. Cisco surveyed that 51% of
end users rely on smartphones to perform their daily
business activities in 2013 [1]. This trend will continue
Permission to freely reproduce all or part of this paper for non-
commercial purposes is granted provided that copies bear this notice
and the full citation on the ﬁrst page. Reproduction for commercial
purposes is strictly prohibited without the prior written consent of the
Internet Society, the ﬁrst-named author (for reproduction of an entire
paper only), and the author’s employer if the paper was prepared
within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23263
to inﬂuence the design and usage of mobile devices in
the enterprise environments. While users are blurring the
lines between company and personal usage, enterprises
demand a secure and robust mobile device management
to protect their business assets. For instance, in a building
that forbids any audio recording, all mobile devices’
microphones should be disabled when the users check
in the building and be enabled when the users check
out.
The permission model on Android, the largest mobile
platform with a market share of 81% [2], only grants
an “all-or-nothing” installation option for mobile users
to either accept all the permissions an app asks for or
simply decline to install the app. After installation, the
app can keep accessing the approved system resources
all the time. In Android 4.3, an experimental feature
called “App Ops” [3] is added to permit mobile users
to conﬁgure one app’s runtime permissions. However,
this feature has been removed from Android 4.4.2 due
to “the increasing burden for user conﬁguration and the
impacts on advertisement market” [4]. SEAndroid has
evolved from Permissive mode in Android 4.2 and 4.3
to Enforcing mode in Android 4.4 and later to provide
ﬂexible mandatory access control (MAC) mechanism in
the Linux kernel. However, until now, even the newest
Android 5.0 has not fully integrated MAC mechanism
in Android middleware [5]. Moreover, SEAndroid is
not available on legacy systems running old versions of
Android.
Since Android 2.2, Google provides Device Adminis-
tration APIs [6] to help enforce enterprise security poli-
cies; however, these APIs only provide a limited set of
functionalities that vary among different Android releas-
es. The Mobile Device Management concept (MDM) [7]
has also been introduced to enterprise administrators
for a long time; however, OEMs usually develop their
own proprietary MDM solutions [8], [9]. For instance,
Samsung Knox provides a complete enterprise solution,
including secure boot, kernel
integrity checking, and
SEAndroid [9]; however, it is only available on Samsung
devices [10].
In this paper, we propose an enterprise-level security
policy enforcement mechanism called DeepDroid that
can be easily ported on various Android devices to
dynamically enforce a ﬁne-grained system service and re-
source access control policy by enterprise administrators.
The basic idea is to apply dynamic memory instrumen-
tation on the app runtime environment in Android. All
current versions of Android share a common structure
feature that system services and resource access are
controlled by a small number of system processes. Thus,
we only need to instrument these system processes whose
structures are almost the same on all Android versions.
DeepDroid dynamically hooks system server process in
Android and uses it as a centralized controller to enforce
the enterprise-level permissions when an app requests to
access a system service. It also tracks the zygote process
to authorize native code’s access requests. Moreover,
DeepDroid can intercept the Binder interactions between
apps and a few system processes to retrieve details of
apps’ requests for a ﬁne-grained access control.
DeepDroid needs root privilege to instrument and
track system processes. It can be satisﬁed in a corporate
environment where companies usually either rent or
purchase mobile devices from telecommunication com-
panies and request vendors to customize the software
image before distributing the devices to employees. S-
ince DeepDroid does not need to statically change the
Android middleware and the Linux kernel, it carries little
burden on vendors for device customization.
Our enterprise-level policy enforcement solution has
several good properties. First, it is portable. Our solution
can be deployed on almost all Android mobile devices
with very small customization efforts. Instead of tailoring
various Android systems from different OEMs, we use
dynamic instrumentation and process tracing techniques
to hook the Android app runtime environment. The code
base of our system remains largely unchanged when
deployed on different Android versions. Our solution
only requires minimal conﬁguration changes in Android
OS during the installation stage and does not need any
changes on any app. We have evaluated our system on a
variety of Android devices from different OEMs running
Android 2.3 through Android 4.4.
Second,
it
is ﬂexible
to provide ﬁne-grained
enterprise-level control over each app. The enterprise
administrators can dynamically update the policy rules
for each mobile device’s individual app. We cannot only
enforce a general rule to constrain one speciﬁc service/re-
source access for an app, but also achieve a context-
aware access control by inspecting the communications
between apps and service processes through Android
Binder. In this paper, we focus on providing security
mechanisms instead of developing detailed policy rules
given an enterprise’s security requirements.
Finally, it has minimal impacts on user experience.
DeepDroid is transparent to mobile users and supports
location-aware automatic conﬁguration. For instance, the
enterprise policy enforcement mechanism only needs to
be enabled when a user enters the workplace; when the
user leaves the workplace, the policy enforcement mech-
anism can be automatically disabled. Moreover, since
our mechanism only needs to instrument a very small
number of critical Android processes and perform simple
checkings, it has negligible performance overhead.
In summary, we make the following contributions.
• We solve the portability problems of enforcing
enterprise’s security policies on various Android de-
vices. Our approach is based on dynamic code instru-
mentation and process tracing, which enforce access
control policies in Android middleware and Linux
kernel, respectively. Our system can be ported on
different Android mobile devices with small changes.
• We can achieve a ﬁne-grained control policy over
each Android app. By hooking and tracing critical
Android components, we can extract request details to
better regulate one app’s operations. Thus, it enables
enterprise administrators to set ﬁne-grained policy
rules considering temporal and spatial constraints for
each app.
• We minimize the impacts of our mechanism on
Android system. Only a few critical processes (e.g.,
system server) need to be dynamically instrumented
in their memory spaces, and the performance overhead
is minimal. Also,
its impacts on Android system
is temporary and can be easily removed when the
policies are no longer desired. It is compatible with
the existing permission mechanism.
• We develop a DeepDroid prototype and evaluate
its effectiveness and efﬁciency on a number of main-
stream Android devices with various Android versions.
The evaluation results show that DeepDroid can work
2
process ensures that supplementary groups are properly
set to the app process by initiating setgroups. Next, the
app’s process will have the privilege to access resources
available to those groups.
III. GOALS, CHALLENGES AND ASSUMPTIONS
DeepDroid targets at effectively enforcing enterprise
security policies on Android devices, and it is designed
to meet the following goals:
Portability. Our scheme should be easily deployed to
various Android versions and different Android mobile
devices. Current state-of-the-art solutions add proprietary
enterprise mobile management interfaces into Android
source code, so the interfaces are typically customized
to speciﬁc Android versions and devices. When one
company wants to adopt one mobile device that has not
integrated the management interfaces, the development
cost will increase and the delivery time will be extended.
Our goal is to support various kinds of Android devices
through making minimal conﬁguration changes.
Fine granularity. Our scheme should support ﬁne-
grained service and resource access control on individual
apps. It cannot only supervise the permission privileges
of an app, but also regulate the service provision proce-
dure. Thus, our solution can support various enterprise
policies. For instance, during working hours, SMS is
only allowed between employees. In this case, we need
to limit
the receiver of a SMS message rather than
prohibiting all SMS messages blindly. Location Based
Service (LBS) apps may lead to location privacy leakage;
however, blindly forbidding location related operations
may generate except signals, which leak the information
that the user may be at workplace. This problem can
be solved by regulating each location operation and
replacing some sensitive locations with fake information.
Trustworthy. All access control policy rules should
be completely enforced, so that malicious apps cannot
violate any rules. We trust the Android middleware and
the low-level Linux kernel. In Android, resource access
operations through system services are controlled by
Android permission mechanism; however, an app may
access resources using native system calls that totally
bypass the permission checking. Thus,
to assure all
resource accesses are being supervised, our scheme must
enforce the policy rules in both Android middleware and
Linux kernel layers.
Ease of use. Our mechanism could be promptly acti-
vated and deactivated according to the enterprise policy
settings. For instance,
it should be quickly activated
when the user enters the workplace and removed imme-
diately when the user leaves the workplace. Moreover,
its impacts on Android system performance should be
minimal.
DeepDroid requires root privilege for installation.
This requirement is common among enterprise mobile
management solutions, and typically the root privilege
can be obtained from OEMs. With OEM support, since
DeepDroid does not change the framework and the
kernel of Android system, its installation is simple and
straightforward. We assume the enterprise administrators
can be trusted. Some keying material is shared between
the smartphone and enterprise policy center to generate
secret keys for communication protection. We assume
the keying material is well protected and secure.
We assume the Android OS kernel can be trusted.
Users have the freedom to install their favorite apps on
their Android smartphones. Though some apps may be
malicious, we assume they cannot compromise the OS
kernel or get the root privilege. A malicious or uncoop-
erative device user may attempt to disable our policy
enforcement mechanism, so we should guarantee that
DeepDroid is reliably active in the workplace. DeepDroid
opens a management interface for policy enforcement,
which may increase the attack surface for some new
attacks misusing the interface.
IV. DEEPDROID SYSTEM ARCHITECTURE
DeepDroid consists of two parts: Enterprise Policy
Center and DeepDroid On-device, as shown in Figure 2.
A. Enterprise Policy Center
Enterprise Policy Center consists of three modules
to authenticate the mobile devices, distribute enterprise
policies, and monitor the mobile devices, respectively.
The authentication module is responsible for authen-
ticating the mobile devices. After being successfully
authenticated, a device can share a temporary secret
key with enterprise policy center. A policy repository
provides policy rules according to enterprise’s security
requirements and the user’s role. Since all communica-
tions between the policy center and the mobile device
are protected by the secret key, the policy rules can
be securely distributed to mobile devices. Moreover, the
status of mobile devices should be continuously reported
to the policy center for logging and auditing purpose.
Particularly, the policy center can use encrypted heartbeat
4
TABLE II: Binder Resource Accessing Interfaces
Resource
IMEI
Phone #
location
contacts*
camera
account
Process
phone
phone
system server
system server
mediaserver
system server
SMS/MMS
phone
Service
iphonesubinfo
iphonesubinfo
location
activity
media.camera
account
isms
Function
Code
getDeviceInfo
getLine1Number
getLastKnownLocation
getContentProvider
connect
getAccounts
sendText
1
5
17
29
3
4
5
it is difﬁcult to deﬁne and enforce policy criterion on
high volume media-related resources (such as camera and
audio) without an efﬁcient support on image or voice
recognition. It is much easier for apps using Android
APIs to perform operations like locating or photograph-