title:Planet scale software updates
author:Christos Gkantsidis and
Thomas Karagiannis and
Pablo Rodriguez and
Milan Vojnovic
Planet Scale Software Updates
Christos Gkantsidis1, Thomas Karagiannis2, Pablo Rodriguez1, and Milan Vojnovi´c1
Riverside, CA, USA
{chrisgk,pablo,milanv}@microsoft.com PI:EMAIL
Cambridge, UK
1 Microsoft Research
2 UC Riverside
ABSTRACT
Fast and effective distribution of software updates (a.k.a. patches)
to millions of Internet users has evolved into a critical task over the
last years. In this paper, we characterize “Windows Update”, one
of the largest update services in the world, with the aim to draw
general guidelines on how to best design and architect a fast and
effective planet-scale patch dissemination system. To this end, we
analyze an extensive set of data traces collected over the period
of a year, consisting of billions of queries from over 300 million
computers. Based on empirical observations and analytical results,
we identify interesting properties of today’s update trafﬁc and user
behavior.
Building on this analysis, we consider alternative patch delivery
strategies such as caching and peer-to-peer and evaluate their per-
formance. We identify key factors that determine the effectiveness
of these schemes in reducing the server workload and the network
trafﬁc, and in speeding-up the patch delivery. Most of our ﬁndings
are invariant properties induced by either user behavior or architec-
tural characteristics of today’s Internet, and thus apply to the gen-
eral problem of Internet-wide dissemination of software updates.
Categories and Subject Descriptors: C.2.2 [Computer - Commu-
nication Networks]: Network Protocols-Applications D.2.7 [Soft-
ware Engineering]: Distribution, Maintenance, and Enhancement
General Terms: Management, Measurement, Performance, De-
sign.
Keywords: software updates, peer-to-peer, caching.
INTRODUCTION
1.
Large scale and fast dissemination of software updates to millions
of Internet users is becoming crucial to maintain high levels of pro-
tection and offer updated services and applications. As users be-
come more proactive in keeping their software updated, the amount
of trafﬁc generated by software updates and security patches is
rapidly increasing. In fact, during certain periods of time, patch
distribution can account for a large fraction of the trafﬁc in corpo-
rations and across the Internet (see Table 1).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’06, September 11–15, 2006, Pisa, Italy.
Copyright 2006 ACM 1-59593-308-5/06/0009 ...$5.00.
URLRank
Site
1
2
4
8
download.microsoft.com
www.download.windowsupdate.com
au.download.windowsupdate.com
download.windowsupdate.com
GBytes
535.5
344.8
246.4
96.0
%
9.80%
6.30%
4.50%
1.80%
Table 1: Patch trafﬁc generated by downloads of Service Pack 2
(SP2) inside a large corporation (1-30 Sep 04). Windows Update
dominates the top 10 sites rated by bandwidth consumption.
Patches upgrade existing software with the intent to ﬁx security
vulnerabilities, update drivers, distribute new virus deﬁnitions, or
release new functionality. The number of operating systems and
applications, such as web browsers, games, etc., that provide on-
line patching services is rapidly increasing. Despite the growing
popularity of software updates, little is known about the process of
creating and releasing patches, the trafﬁc characteristics of patch
distribution, and the potential of alternative distribution strategies.
In this paper, we analyze one of the largest update services in the
world, the Windows Update system. Windows Update provides an
automated update service for the Windows operating system, Ofﬁce
applications, and Exchange and SQL servers. Our goal is to ﬁnd
general principles and properties that can be used as guidelines to
design and better architect fast and cost effective planet-scale patch
dissemination. Based on a combination of empirical observations
and analytical results, we identify interesting properties of today’s
update trafﬁc and user behavior, such as the frequency of updates,
the possibility of grouping multiple patches, the spatial and tempo-
ral characteristics of user requests, and the percentage of computers
that are always online and, hence, can be instantaneously patched.
Furthermore, we study different patch delivery strategies (e.g.
caching and P2P) and evaluate their performance and their poten-
tial to improve speed of patch delivery. We identify key factors that
determine the effectiveness of these schemes both in terms of work-
load reduction on the central server and the overall Internet. For the
case of P2P, we ﬁnd analytical and empirical evidence showing that
P2P patching is highly effective in reducing the load on the central
servers. Nonetheless, P2P can generate signiﬁcant load into ISPs.
Hence, we analyze locality algorithms to reduce inter-ISP trafﬁc.
We have analyzed a vast number of data traces collected over the
period of a year at different points of the Windows Update service
infrastructure. In total, we have parsed several billions of queries
from almost 300 million computers. We believe that we have ob-
served a signiﬁcant fraction of all the computers in the Internet. To
the best of our knowledge, this is the ﬁrst study of a very popu-
lar update service, and we deem it can be used to draw important
conclusions regarding software update distribution.
We deem that most of our ﬁndings are induced by user behavior,
architectural characteristics of today’s Internet, or standard soft-
2.1 System description
The windows update architecture consists of a set of update servers
where users query for new updates and a large number of distribu-
tion servers from which users download updates (see Fig. 2). Each
user querying for updates will ﬁrst initiate a request to an update
server, and if available updates exist, will be redirected to one of
the distribution servers. Overall, there are two types of requests: a)
Requests through “Automatic Updates” that occur in pre-speciﬁed
time intervals or 5-10 minutes after boot time if the pre-speciﬁed
time expired in between reboots. b) Requests originating at the
Windows Update website after a manual query.
The automatic update system periodically queries for updates
with inter-polling times independent and identically distributed, uni-
form in [18, 22] hours (in fact, the left-end of the interval is slightly
smaller than 18). In most of our traces, only a very small percentage
of the queries happen through manual updates (we will indicate it
otherwise). In total, it is estimated that approximately 300 million
users are updated for every patch released.
Updates are distributed through the binary delta compression
scheme [16]. Delta compression ensures that each user will receive
only a “diff-ﬁle”, which will correspond to the difference (delta)
between the latest version released and the current version of the
ﬁle being updated at the user machine. Thus, for every ﬁle to be
patched, there exists a collection of different deltas that specify all
the possible diffs between older releases of the speciﬁc ﬁle and the
latest release. Each delta is OS-speciﬁc as well as country-speciﬁc
(i.e., deltas differ per country or OS).
Patches1 are regularly released every month. The set of patches
that ﬁx a given vulnerability is known as “Knowledge Bases”. At
larger time intervals (e.g., years), large collections of Knowledge
Bases are released at the same time, which are called Service Packs
(SPs). SPs consist of all the updates previously released up to that
point in time (i.e., all Knowledge Bases previously released) as well
as new ﬁles that introduce new functionality and/or major product
improvements. As such, Service Packs are signiﬁcantly larger in
size compared to monthly patches. For example, Service Pack 2
(SP2) consisted of 800 Knowledge Bases compared to 8-10 Knowl-
edge Bases that are usually included in a monthly release. SP2 in-
troduced automatic updates by default. Prior to SP2, updates were
made mostly manually.
2.2 Data characteristics
In order to proﬁle the distribution process of such a vast system
with myriads of interactions, we have collected an extensive num-
ber of traces, diverse in type and duration, at various points within
the aforementioned architecture. Our datasets are described in Ta-
ble 2. Overall our collected traces amount to approximately two
Terabytes worth of analyzed data.
3. CHARACTERISTICS OF PATCHES
Designing efﬁcient mechanisms for distributing software updates,
requires understanding their characteristics, e.g.
the number and
size of ﬁles affected, the frequency of update releases, and the re-
lations between the individual patches. The problem arises from
the fact that machines can have a large set of conﬁguration states.
Recall that a single software update may change many ﬁles but in-
dividual users may be interested in only a subset of them. The
primary reason is that users can patch at different times, ending up
with a different set of ﬁles or versions. Such differences in the con-
ﬁguration and the interests of the users signiﬁcantly complicate the
1We use the terms patches, updates, deltas, and diffs interchange-
ably.
Figure 1: Number of update queries and corresponding downloads
over three days. Note that a security patch is released during the
second day.
ware engineering processes and development cycles, and thus apply
to the general problem of Internet-wide dissemination of software
updates. Some of the ﬁndings of our paper are as follows:
a) Software patches can be efﬁciently clustered into a small number
of groups, decreasing the complexity and improving the effective-
ness of any dissemination solution.
b) Approximately 80% of IPs appear during the ﬁrst day of a patch
release, while the number of unique IPs drops abruptly with the
number of days. We also characterize the temporal correlation of
users and ﬁnd that for more than 90% of the IP population arrival
rates are quite bursty.
c) We ﬁnd that the percentage of machines that are always online
and thus could beneﬁt from an idealized instantaneous patching
system is approximately 20% of the population.
d) Computers that use the update service seem to be highly updated,
with more than 90% of all observed users updated with all security
patches. This is expected and shows the importance of automated
update systems.
e) We have estimated that the potential workload reduction pro-
vided by existing caches varies from 25% to 35%, while a full
cache deployment by ISPs would result in almost all requests for
an update covered by caches.
f) Despite the small size of patches and the diversity of requests,
P2P distribution can considerably reduce the load on the server if
users stay online for a short time after completing the download.
g) We quantify analytically the impact of P2P locality on ISP traf-
ﬁc. Based on analytical and experimental results, we show that lo-
cality can reduce inter-ISP trafﬁc by more than an order of magni-
tude. (Similar observations have been made in [11] for ﬁle sharing
applications.)
The rest of the paper is organized as follows: Section 2 describes
our data sets and the Windows Update system, Section 3 charac-
terizes patches and studies their clustering, Section 4 characterizes
user’s behaviors, Section 5 compares different dissemination strate-
gies, Sections 6 and 7 present related work and conclude the paper.
Proofs are deferred to the appendix of the technical report [6].
2. SYSTEM AND DATA DESCRIPTION
For this study we used a variety of datasets that span a large number
of signiﬁcant updates for over a year period. The discussion of the
various datasets presupposes knowledge of the Windows Update
(WU) system architecture and thus we will brieﬂy present here its
basic characteristics.
04/0105/0106/0107/0108/0100.511.522.533.5DateRequests per 10min (millions)Checking for updatesRequesting updatesSoftware updatereleaseTable 2: Characteristics of the collected data sets.
Set
I
II
III
IV
Period
4-6th Jan ’06
10-12 Aug ’04
14-16 Jan ’05
10-26 Oct ’05
14 June ’05
Aug ’05
2001-2006
10
Characteristics
300M polls/day
150M distinct IPs
70K distinct IPs
Collection point
All update servers
One download server
300K distinct IPs
Two download servers
-
XP build release tree
Type
Polls for updates.
IIS Logs
Service Pack 2 (SP2).
IIS Logs and packet-
level traces
Monthly patches.
IIS Logs and packet-
level traces
Update history for all
Windows XP ﬁles
Description