# One-Way Isolation: An Effective Approach for Realizing Safe Execution Environments

**Authors:**  
Weiqing Sun, Zhenkai Liang, V. N. Venkatakrishnan, and R. Sekar

**Affiliations:**  
- Weiqing Sun, Zhenkai Liang, R. Sekar: Department of Computer Science, Stony Brook University
- V.N. Venkatakrishnan: Department of Computer Science, University of Illinois at Chicago

**Contact:**  
- Email: [wsun, zliang, rsekar]@cs.stonybrook.edu
- V.N. Venkatakrishnan: vnv@uic.edu

**Abstract:**
In this paper, we present an approach for realizing a safe execution environment (SEE) that allows users to "try out" new software or configuration changes without the risk of damaging the system. A key feature of our SEE is its ability to faithfully reproduce the behavior of applications as if they were running natively on the host operating system. This is achieved through one-way isolation: processes within the SEE have read-access to the host OS environment but are prevented from writing outside the SEE. Consequently, SEE processes cannot affect the behavior of host OS processes or the integrity of data on the host. Our SEE supports a wide range of tasks, including studying malicious code, executing untrusted software, experimenting with configuration changes, and testing software patches. Users can inspect and either roll back or commit changes made within the SEE. We provide consistency criteria to ensure the semantic consistency of committed results and develop an efficient technique for the commit operation. Our implementation shows that most software, including complex server and client applications, can run successfully within the SEE with low performance overhead, typically below 10%.

**Acknowledgments:**
This research is supported in part by an ONR grant N000140110967 and an NSF grant CCR-0208877.

## 1. Introduction

### 1.1. Motivating Applications
System administrators and desktop users often need to experiment with potentially unsafe software or system changes. A high-fidelity safe execution environment (SEE) that can support these activities while protecting the system from potential harm would be highly valuable. Key applications of such an SEE include:

- **Running Untrusted Software:** Users frequently execute downloaded freeware/shareware or mobile code, which poses a significant risk to their systems. An SEE can minimize security risks while preserving the functionality provided by such software.
- **Vulnerability Testing:** System administrators may want to test whether a system is vulnerable to the latest email viruses, worms, or other attacks. An SEE allows them to perform such tests without compromising production systems.
- **Software Updates/Patches:** Large enterprises often delay applying security patches to allow for compatibility and interoperability testing. An SEE can facilitate this testing without requiring extended shutdowns of production systems.
- **System Reconfiguration:** Administrators may need to reconfigure software systems and test these changes before deploying them. An SEE automates this process and ensures that all modified files are backed up, avoiding manual errors.

### 1.2. SEE Requirements and the Need for a New Approach
To support the above applications, an SEE must provide the following features:

- **Confinement Without Undue Restrictions:** The effects of processes within the SEE should not escape and become visible to normal applications. Confinement can be achieved through access control restrictions, but such restrictions can prevent many applications from running successfully.
- **Accurate Environment Reproduction:** The behavior of applications within the SEE should be identical to their behavior outside the SEE. This requires accurately reproducing the environment, including configuration and data files, executables, and libraries.
- **Ability to Commit Results:** Users should be able to retain the results of successful activities. The SEE must provide a mechanism to "commit" these results, ensuring that the committed state is semantically consistent with the state outside the SEE.

Existing approaches, such as sandboxing and virtual machines, do not fully meet these requirements. Sandboxing restricts functionality, while VMs lack support for environment reproduction and committing. File versioning systems provide rollback capabilities but do not support selective rollback of changes made by different processes.

One-way isolation, as proposed in previous work, addresses the problem of effect containment for compromised processes. However, these solutions often suffer from high overheads and limited generality. Our previous work [12] developed a user-level tool for isolating the effects of COTS applications on Linux, but it had high overheads and could not faithfully reproduce isolation semantics for file metadata operations. This paper presents a more general and efficient approach that addresses these limitations.

### 1.3. Approach Overview
Our SEEs are based on the concept of one-way isolation, where the host environment is visible within the SEE, but the effects of SEE processes are isolated from outside applications. An SEE is created to run a process whose effects are to be shielded from the rest of the system. Children processes within an SEE share the same consistent view of the system state. Users can start a command shell within a new SEE to run untrusted programs and helper applications. Changes made within the SEE can be inspected, rolled back, or committed. The commit process merges the system state within the SEE with the state of the host OS, ensuring semantic consistency.

Our approach is implemented using interposition at the system call and virtual file system layers, allowing complex tasks like compilation and installation of large software packages to be performed successfully within the SEE. Network operations that correspond to "read" operations, such as querying a name server, are permitted. "Write" operations are allowed when the target is another application within an SEE or a special-purpose proxy that buffers write actions until commit time.

### 1.4. Paper Organization
The rest of the paper is organized as follows:
- **Section 2:** Provides an overview of our approach.
- **Section 3:** Describes our file system proxy, the Isolation File System (IFS).
- **Section 4:** Discusses the criteria and procedure for committing changes.
- **Section 5:** Covers other aspects of our approach.
- **Section 6:** Evaluates the functionality and performance.
- **Section 7:** Reviews related work.
- **Section 8:** Concludes the paper.

## 2. Design of Secure Execution Environment

### 2.1. Achieving One-Way Isolation
The primary goal of isolation in our approach is to contain the effects of SEE processes, preventing them from affecting processes outside the SEE. "Read" operations are allowed, while "write" operations are either restricted or redirected. Restriction involves preventing the operation, which is easy to implement but can prevent applications from running successfully. Redirection involves redirecting the operation to a different resource invisible outside the SEE. Static redirection is suitable for network operations, while dynamic redirection handles complexities like file dependencies.

By supporting both restriction and redirection, our approach ensures that most applications can run successfully within the SEE while maintaining system integrity.