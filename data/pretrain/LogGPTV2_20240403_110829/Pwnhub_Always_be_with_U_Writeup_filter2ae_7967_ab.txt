于是将脚本进行改进。
###  payload
编写出如下脚本
    from pwn import *
    import itertools
    import string
    dic = string.digits + 'abcdef-{}'
    s = remote("40.73.22.31", "2333")
    flag = 'flag{de12473b-'
    padd = '~!@#$%^&*()_+{}SKYISC(4&^@)#%^'
    while True:
        now = flag[-2:]
        for i in dic:
            tmp = now+i
            s.sendline(padd+tmp)
            res = s.recvline()
            if len(res)<224:
                flag +=i
                print flag
                break
运行后可以得到flag
    flag{de12473b-7105-4f6e-981c-1e4672e7a4b5}
## Farewell
###  题目概述
拿到题目后
    #!/usr/bin/env python3
    import sys
    import socket
    import secrets
    from Crypto.Cipher import AES
    from hashlib import sha256
    p = 449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839
    g = 2
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    if sys.argv[1] == 's': # server
        s.bind(('127.0.0.1', 23333))
        s.listen()
        s, _ = s.accept()
    elif sys.argv[1] == 'c': # client
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(('127.0.0.1', 23333))
    x = secrets.randbelow(p)
    s.send(str(pow(g, x, p)).encode())
    r = int(s.recv(2048))
    key = pow(r, x, p)
    aes = AES.new(sha256(str(key).encode()).digest())
    if sys.argv[1] == 's':
        flag = open('flag.txt').read()
        flag += ' ' * (32 - len(flag) % 32)
        s.send(aes.encrypt(flag))
    elif sys.argv[1] == 'c':
        print(aes.decrypt(s.recv(2048)))
发现题目是一个Diffle-Hellman密钥交换算法，同时题目用共享密钥key作为AES的密钥加密了flag  
题目给出了p和g，以及在流量包中有如下值
    str(pow(g, x, p)).encode()
    r
    aes.encrypt(flag)
所以题目思路比较清晰，即利用题目泄露的信息，计算出共享密钥，然后解密密文
###  Diffle-Hellman密钥交换算法
该交换算法原理如下  
1.Alice和Bob先说好一个大素数p和它的原始根g  
2.Alice随机产生一个数x， 计算C1=g^x mod p,然后把C1发给Bob；  
3.Bob随机产生一个数y，计算C2=g^y mod p,然后把C2发给Alice；  
4.Alice计算k=C2^x mod p;  
5.Bob计算k*=C1^y mod p;  
其中值得注意的是
    k= C2^x mod p= (g^y)^x mod p = (g^x)^y mod p = C1^y mod p = k*
即
    k=k*
那么在该题里，我们有p和g的值  
同时有`g^x mod p`和`r`的值  
只要我们能通过
    g^x mod p
计算出x，那么就可以利用
    r^x mod p
计算出共享密钥k
###  私钥计算
这里我们知道Diffle-Hellman密钥交换算法的安全性建立于有限域上计算离散对数非常困难，但由于这里的g非常小，所以我们可以利用如下脚本进行计算
    p
    g=2
    po = 312827656920665019052154527973062873164155435750834364099549354276600246039780808375717193869518770295806958147314654770520680676883270457649459743668787722703852223185610468575274145823739097462833932263058142549857140269637619269087411010174206045061016542198959480305747562269639856888526630582754886085323913120581662775122656234745332568520238838445916214100660745696922469287938919295619254972946705975683751437282135292172658670815955803075584269128554697234601952297591311295087027674743379383960411103043466786182497597866061129442701995358254124186369249520035589323173168805824570833282035445498782643378768358700682376307190201843700760320696872165065894961224809252051704551991788222733119953751476970741723581723530792919118911052397510799833080000512103966726938986113045128903532639271674853108472379556253636897190191182797552815462576549308131710191832665640046277651599574046021255652154555206626299039923531695289748325251163391286522402130644593746350983380447169395283756146065786333043918764637244487399476582803660120363329563190678655408546077633121456889790401760376550560489115040487451522266237283633048382172370079943143410743342217597309023634940063326550917247604702902550215759784529552401298569555386076473292117763682664669364246320241134117049920406912330431288119412796087737646208534116711021629494365386501930451907402808159838174943862279362834677757884050584093448170667659133693515258906880458166511868847468784977428190810086167564
    I = Integers(p)
    base =I(g)
    power = I(po)
    x = discrete_log(power,base,I.order()-1)
    print x
可以计算出x为

###  getflag
得到私钥后，就是计算共享密钥再解密AES了，可以写出如下脚本
    from Crypto.Cipher import AES
    from hashlib import sha256
    r
    x
    p
    g=2
    po
    key = pow(r,x,p)
    c = '0e10f06cc8a34a8b93d2f5afd2a32109413fc6c1bdf3985fa55a7427f5befb215afe920b4c9f1c5fd7cd8621eccbce74842474de9eab381535ca5a3d0d21d37a'
    aes = AES.new(sha256(str(key).encode()).digest())
    print aes.decrypt(c.decode('hex'))
运行后可得到flag
    flag{2D7A22A4-68C9-46A9-A209-E5623917A864}
## 后记
这次pwnhub的crypto比以往简单不少……做完后甚至有点不敢相信……