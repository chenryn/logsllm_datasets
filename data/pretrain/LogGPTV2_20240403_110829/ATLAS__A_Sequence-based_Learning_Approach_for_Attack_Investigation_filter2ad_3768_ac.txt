Short-term Memory (LSTM) [15] network, a subtype of Re-
current Neural Network (RNN) [41] to learn a model from
attack or non-attack sequences. LSTM is widely applied and
proven to be effective for sequence-based learning in different
tasks, such as machine translation [45] and sentimental analy-
sis [52]. The LSTM enables ATLAS to automatically learn a
model that differentiate reﬂected patterns in attack and non-
attack sequences. The model also includes a Convolutional
Neural Network (CNN) [52], which helps ATLAS capture
the stealthy and dynamic nature of APT attacks. Speciﬁcally,
the learning model uses (1) a Dropout layer for regulariza-
tion to reduce overﬁtting and improve generalization error,
(2) a Conv1D layer with Max Pooling to process lemmatized
sequences, (3) a dense, fully-connected layer with sigmoid
activation to predict the attack-relevancy probability of the
sequences. This model yields better accuracy compared to
other architectures we have experimented with. We detail full
architecture of the LSTM model in Appendix A, and com-
pare its classiﬁcation performance with traditional machine
learning models (e.g., Support Vector Machines) in Sec. 6.3.
4.3 Attack Investigation
We describe how ATLAS helps a security investigator conduct
attack investigation after a sequence-based model is trained.
The investigation often starts from one or more attack symp-
tom entities. For instance, an attack symptom might be a
malicious website or an IP address identiﬁed by a security
analyst or reported by network monitoring systems like Na-
gios [33] as threat alerts. Here, ATLAS helps automatically
discover more attack entities through the given attack symp-
tom entities by querying the sequence-based learning model
to ﬁnd out the entities related to the attack symptom. We
detail this process below.
Attack Entity Identiﬁcation. The goal of ATLAS’s investi-
gation phase is to recover all the attack entities related to
a given attack symptom entity. Here, ATLAS enumerates all
unknown entities and identiﬁes whether an entity in a causal
graph is an attack or non-attack entity. This process has a
time complexity of O(n) for traversing all unknown entities
(n) in the causal graph. We note that ATLAS is able to start an
investigation with a varying number of (one or more) attack
symptom entities since it exhaustively trains the model with a
varying number of attack entities (see Sec. 4.2.1).
To illustrate, Figure 5 (Middle) shows three graph nodes
that represent attack entities {A, C, F} in a causal graph. One or
more of these entities can be given as known attack symptom
entities during the investigation, and the rest of the entities,
whether they are attack or non-attack, are unknown. To iden-
tify the unknown attack entities, ATLAS ﬁrst obtains a set of
all unknown entities from a causal graph and constructs its
subsets that include one unknown entity. ATLAS then appends
the attack symptom entities to each subset; thus, each subset
contains all the known attack symptom entities and only one
unknown entity. For example, given the attack symptom entity
A in Figure 5 (Middle), ATLAS constructs its subsets {A, B},
. . . , {A, F}. ATLAS uses these subsets to extract sequences
from the causal graph as detailed in Sec. 4.2.1. The LSTM
model is then used to predict whether each sequence is attack
or non-attack through a prediction score. This process iden-
tiﬁes whether the unknown entity is closely relevant to the
attack symptom entity by inspecting whether the temporal-
ordered events of these two entities form an attack pattern that
the model previously learned. An identiﬁed attack sequence
indicates the unknown entity is a part of the attack entities. To
3012    30th USENIX Security Symposium
USENIX Association
metadata, make a normal read to the backdoor.exe ﬁle.
We note that ATLAS includes this as an attack event in the
neighborhood graph in Figure 6 (b) since it includes the at-
tack entity backdoor.exe. In general, if a process reads a
malicious ﬁle, the process likely becomes a part of the at-
tack, and it can be used by the attacker to launch further
attack actions. Yet, ATLAS does not include other events
(e.g., (SearchIndexer.exe_2, fork, ε, T12)) which
originate from the process SearchIndexer.exe_2, even if
they occur after the attack event (SearchIndexer.exe_2,
read, backdoor.exe, T11). Lastly, ATLAS reports the at-
tack events ordered by their timestamps from the constructed
neighborhood graph as shown in Figure 6 (c).
Handling Multi-host Attacks. To investigate an attack tar-
geting multiple hosts, a cyber analyst often starts from one
host and includes more hosts as the investigation progresses.
Thus, the attack entities recovered from a host are indicative
of including more hosts for cross-host attack investigation.
Consider an investigation of a compromised web server that
has a malicious program backdoor.exe in its web directory.
When ATLAS identiﬁes the attack entity of backdoor.exe,
it uses this entity as a new attack symptom entity to investi-
gate other hosts that have downloaded backdoor.exe. This
enables ATLAS to naturally support multi-host attack scenar-
ios in a scalable manner. As a result, ATLAS investigation
does not require association of the causal graph among differ-
ent hosts, which is often necessary for provenance tracking
techniques [19]. We show in our evaluation that the effec-
tiveness of ATLAS is not affected by the attacks performed
across multiple hosts, and it only needs to perform analysis
on audit logs from individual hosts to discover all attack en-
tities (see Sec. 6.2). To construct a multi-host attack story,
ATLAS merges the audit logs from the compromised hosts and
constructs a uniﬁed optimized causal graph (as detailed in
Sec. 4.1) representing the logs of compromised hosts. ATLAS
then uses the identiﬁed attack entities from those hosts to ex-
tract a neighborhood graph that includes all the attack events
in the causal graph. Lastly, ATLAS constructs a sequence that
details a temporal order of the attack events across multiple
hosts (an example case study is presented in detail in Sec. 6.5).
5
Implementation
We implemented ATLAS in Python 3.7.7, with around 3,000
lines of code (LoC) for all its components. Our prototype
processes Windows security events for system logs (with Sys-
mon enabled to log ﬁles operations and network connections),
Firefox logs for visited webpages, and TShark for DNS logs.
ATLAS uses the LSTM model as implemented in the Keras
library [6] with the TensorFlow [1] back-end. The LSTM
model is tuned with the parameters through grid search for
better generalization, and to prevent overﬁtting on the training
data (see Appendix A for model architecture details).
Figure 6: Illustration of an attack story recovery process.
illustrate, Figure 5 (Left) shows an example of sequence con-
struction for the subset {A, C} where A is an attack symptom
entity and C is an unknown entity. To extract the sequence
for A and C, ATLAS ﬁrst extracts the neighborhood graph to
ﬁnd their related events and reforms the neighborhood graph
nodes and edges into a sequence of timestamp-ordered events.
This process is applied to all the entity subsets, which results
in a set of different sequences with varying lengths. ATLAS
then lemmatizes the sequence and passes its word embed-
dings to the model. If the sequence is classiﬁed as an attack
sequence, ATLAS infers that the unknown entity in the subset
(i.e., C) is an attack entity.
Attack Story Recovery. The goal of ATLAS attack story re-
covery is to identify attack events associated with the identi-
ﬁed attack entities from the attack investigation phase. ATLAS
extracts the neighborhood graph of the identiﬁed attack en-
tities and obtains all included events as attack events. These
events are further ordered by their timestamps as the recov-
ered attack story. We note that the mapping between identiﬁed
attack entities to attack events is highly dependent on the at-
tack under investigation. For example, if ATLAS recovers 30
attack entities at attack investigation, there can be a varying
number of events associated with those 30 entities depend-
ing on the number of attack actions (e.g., read or write ﬁle).
Figure 6 (b)-(c) illustrates the steps that ATLAS constructs an
attack story from the causal graph illustrated in Figure 6 (a).
We consider that during the attack investigation phase ATLAS
has successfully recovered the attack entities {backdoor.exe
(backdoor ﬁle), backdoor.exe_4 (backdoor process) and
1.2.3.4 (malicious host)}. ATLAS uses these attack entities
to extract their neighborhood graph in Figure 6 (b), which
includes the attack events. This mapping between the attack
entities and events allows ATLAS to automatically extract
those related attack events without the need for the cyber
analyst to perform any manual investigation. For instance,
the non-attack entity SearchIndexer.exe_2 (the Windows
NT program) that continuously enumerates and reads ﬁles
USENIX Association
30th USENIX Security Symposium    3013
T9. readT8. readT10. writeT1. writeT3. readT4. forkT7. forkT12. forkT14. forkT13. readT15. readT17. readT11. readT16. writeT5. readT6. connectaFirefox.exe_1 writebackdoor.exeFirefox.exe_1 executebackdoor.exeServices.exe_3 readbackdoor.exeServices.exe_3 forkbackdoor.exe_4backdoor.exe_4 readfile.pdfbackdoor.exe_4 connect1.2.3.4SearchIndexer.exe_2 readbackdoor.exeSearchIndexer.exe_2Services.exe_3ftp.exe_5file.pdfbackdoor.exe_41.2.3.4backdoor.exefirefox.exe_1bcAttackNon-attackT2. executeT1. writeT3. readT4. forkT11. readSearchIndexer.exe_2Services.exe_3backdoor.exe_4backdoor.exefirefox.exe_1T2. executeT5. readT6. connectfile.pdf1.2.3.4To ensure the efﬁciency of the LSTM model, ATLAS short-
ens sequences to a predeﬁned threshold at training as this
leads to the vanishing gradients problem [14]. We have found
a sequence length of 400 yields similar or better accuracy on
the test data compared to other sequence lengths, as the ma-
jority of the extracted sequences are shorter than 400 words.
We note that the exclusion of such sequences does not lead to
losing the key semantics of the attack patterns. Speciﬁcally,
(1) compared to those normal activities which frequently ap-
peared in audit logs, most attacks are highly targeted to spe-
ciﬁc goals and hence tend to form shorter sequences, (2) the
graph optimization (Sec. 4.1) shortens long sequences, and
more importantly, (3) the long sequences of attack steps are
often covered by their sub-sequences with shorter lengths,
which are extracted through subsets of attack entities.
6 Evaluation
We begin by describing our experimental settings (Sec. 6.1).
We then present the effectiveness of ATLAS (Sec. 6.2), efﬁ-
ciency of each component (Sec. 6.3) and the run-time over-
head of attack identiﬁcation (Sec. 6.4). Lastly, we demonstrate
a case study to illustrate the use of ATLAS for attack investi-
gation in practice (Sec. 6.5).
6.1 Experimental Settings
Dataset. The lack of publicly available attack datasets and
system logs is a common challenge in forensic analysis. For
example, the data released by DARPA’s Transparent Com-
puting program do not include audit logs generated during
evaluation engagements [47]. To address these, we have im-
plemented ten attacks based on their detailed reports on real-
world APT campaigns and generated the audit logs in a con-
trolled testbed environment. Additionally, similar to previous
works that construct benign system events [20, 26, 36], we
emulate diverse normal user activities on the same machine
during each attack execution in a best-effort. More speciﬁ-
cally, we manually generated various benign user activities
including browsing different websites, executing different ap-
plications (e.g., reading emails, downloading attachments),
and connecting to other hosts. Similar to a typical work day
environment, such activities are randomly performed within
an 8-hour-window during the daytime. More details about nor-
mal user behaviors and log statistics collected can be found in
Appendix B. Table 2 details each attack that exploits different
vulnerabilities (i.e., CVEs). These attacks are selected to in-
clude different malware tactics such as phishing links, email
attachments, intermediate processes, and lateral movements
such as leaking sensitive data. The attacks S-1 to S-4 were
performed on single hosts and M-1 to M-6 were performed on
multiple hosts. For each multi-host attack, the emulation was
performed on two hosts where the second host was used as
the target for lateral movement. All attacks were developed
and executed on Windows 7 32-bit virtual machines and took
about an hour to complete. After the attacks were completed,
we collected the audit logs within a 24-hour-window. Table 2
column “Size (MB)” details the size of the collected logs,
and the column “Log Type” shows the total percentages of
different types of events in the audit logs. Overall, the 24-hour
emulation generated an average of 20,088 unique entities with
249K events for each attack.
Evaluation Setup. We have the ground-truth of attack entities
for each attack, known to us at attack execution. For instance, a
malicious URL set by us in an attack to upload sensitive data is
an attack entity. Other entities in a causal graph are labeled as
non-attack. These entities are used to construct the events and
sequences, following the procedures as we have elaborated in
Sec. 4.2 and Sec. 4.3. Table 3 presents the number of entities,
events, sequences, and balanced sequences for each attack. For
example, S-1 includes 22 attack and 7,445 non-attack entities.
These entities are associated with 4,598 and 90,467 attack
and non-attack events. These events are used to compose 42
attack and 14,243 non-attack lemmatized sequences. Lastly,
1,388 balanced attack and non-attack sequences are obtained
through the selective sequence sampling process and used
for model training. As detailed in Table 3, similar to realistic
attack investigating scenarios, the malicious activities only
constitute a vanishingly small percentage of the log data (less
than 0.14% attack entities in the whole audit logs). Hence,
we believe our dataset can reasonably reﬂect ATLAS’s true
efﬁcacy for real-world attack investigation.
We evaluate the effectiveness of ATLAS for each imple-
mented attack based on the model trained on other attacks.
For example, if we aim at identifying the multi-host attack
M-1, we use a model trained on audit logs of the multi-host
attacks M-2,. . .,M-6 excluding M-1. We separated single-host
and multi-host attacks in the training phase because both types
of attacks were implemented based on the same APT reports
(e.g., both S-1 and M-1 are implemented based on [17]). This
setting ensures that training and testing data do not overlap
with each other. Overall, ATLAS trains ten separate models to
evaluate each attack.
After the models are trained, the attack investigation is per-
formed in two steps as detailed in Sec. 4.3. First, we generate
sequences by randomly selecting a single attack symptom
entity from the ground-truth attack entities. These identiﬁed
attack symptom entities naturally represent real-world cases
where a security analyst often starts from (see Table 4- Col-
umn “Symptom Entity”). Second, we pass the sequences that
are generated by combining each unknown entity in a causal
graph with the symptom entity and check whether each con-
structed sequence is identiﬁed as attack or non-attack. This
enables us to ﬁnd unknown entities that are indeed relevant
to the attack (as detailed in Sec. 4.3). Since ATLAS inves-
tigation is entity-based, we present the attack investigation
results in terms of entities. Additionally, we present the attack
identiﬁcation results in terms of events similar to other attack
3014    30th USENIX Security Symposium
USENIX Association
Table 2: Overview of implemented APT attacks for ATLAS evaluation.
Attack
ID
S-1
S-2
S-3
S-4
M-1
M-2
M-3
M-4
M-5
M-6
Avg.
APT Campaign
Strategic web compromise [17]
Malvertising dominate [22]
Spam campaign [39]
Pony campaign [18]
Strategic web compromise [17]
Targeted GOV phishing [34]
Malvertising dominate [22]
Monero miner by Rig [28]
Pony campaign [18]
Spam campaign [39]
-
Exploiting CVE
by attack
2015-5122
2015-3105
2017-11882
2017-0199
2015-5122
2015-5119
2015-3105
2018-8174
2017-0199
2017-11882
-
PL
√
√
√
√
√
√
-
PA
√
√
√
√
-
Attack Features†
IG BD
INJ
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√