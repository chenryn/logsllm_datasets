for i := 1; i  0 && width+books[j-1][o] 0{
res = append(res, b)
count[b]-
for i := 0; i 0{
res = append(res, i)
count[i]-=
return res
//解法二模拟，时间复杂度o（n^2）
func relativeSortArrayl(arrl []int, arr2 []int) []int {
leftover, m, res := []int{}, make(map[int]int), []int{}
for _, v := range arrl {
m[v]++
---
## Page 1031
for _, s := range arr2 {
count := m[s]
for i:=0;i< count;i++{
res = append(res, s)
m[s] = 0
for v, count := range m {
for i:=0;i< count;i++{
1eftover = append(leftover,v)
1
sort.Ints(leftover)
res = append(res, leftover...)
return res
1123.LowestCommonAncestorofDeepestLeaves
题目
Given a rooted binary tree, return the lowest common ancestor of its deepest leaves.
Recall that:
● The node of a binary tree is a leof if and only if it has no children
●The dlepth of the root of the tree is O, and if the dlepth of a node is d, the depth of each of its
children is d+1.
● The lowest common oncestor of a set S of nodes is the node A with the largest depth such
that every node in S is in the subtree with root A.
Example 1:
Input: root = [1,2,3]
output: [1,2,3]
Explanation:
The deepest leaves are the nodes with values 2 and 3.
The lowest common ancestor of these leaves is the node with value 1.
The answer returned is a TreeNode object (not an array) with serialization "
[1,2,3]".
Example 2:
Input: root = [1,2,3,4]
output: [4]
Example 3:
---
## Page 1032
Input: root = [1,2,3,4,5]
Output: [2,4,5]
Constraints:
● The given tree will have between 1 and 10o0 nodles.
● Each node of the tree will have a distinct value between 1 and 1000.
题目大意
给你一个有根节点的二叉树，找到它最深的叶节点的最近公共祖先。
回想一下：
·叶节点是二叉树中没有子节点的节点
·树的根节点的深度为0，如果某一节点的深度为d，那它的子节点的深度就是d+1
·如果我们假定A是一组节点S的最近公共祖先，S中的每个节点都在以A为根节点的子树中，且
A的深度达到此条件下可能的最大值。
提示：
·给你的树中将有1到1000个节点。
·树中每个节点的值都在1到1000之间。
解题思路
·给出一颗树，找出最深的叶子节点的最近公共祖先LCA。
·这一题思路比较直接。先遍历找到最深的叶子节点，如果左右子树的最深的叶子节点深度相同，那
么当前节点就是它们的最近公共祖先。如果左右子树的最深的深度不等，那么需要继续递归往下找
符合题意的LCA。如果最深的叶子节点没有兄弟，那么公共父节点就是叶子本身，否则返回它的
LCA。
·有几个特殊的测试用例，见测试文件。特殊的点就是最深的叶子节点没有兄弟节点的情况。
代码
package leetcode
/**
* Definition for a binary tree node.
* type TreeNode struct {
Valint
Left *TreeNode
Right *TreeNode
*/
func 1caDeepestLeaves(root *TreeNode) *TreeNode {
if root == nil {
return ni1
---
## Page 1033
1ca, maxLevel := &TreeNode{}, 0
1caDeepestLeavesDFS(&1ca, &maxLevel, 0, root)
return lca
func 1caDeepestLeavesDFS(1ca **TreeNode, maxLevel *int, depth int, root
*TreeNode) int{
*maxLevel = max(*maxLevel, depth)
if root == nil{
return depth
depthLeft := 1caDeepestLeavesDFS(1ca, maxLevel, depth+1, root.Left)
depthRight := 1caDeepestLeavesDFS(1ca, maxLevel, depth+1, root.Right)
if depthLeft == *maxLevel && depthRight == *maxLevel{
1ca = root
3
return max(depthLeft, depthRight)
1128.NumberofEquivalentDominoPairs
题目
Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes [j] = [c, d] if and
only if either ( a==c and b==d ), or ( a==d and b==c ) - that is, one domino can be rotated to be
equal to another domino.
Return the number of pairs (i, j) for which 0 <= i < j < dominoes. 1ength, and
dominoes [i] is equivalent to dominoes [j] -
Example 1:
Input: dominoes = [[1,2],[2,1], [3,4], [5,6]]
output: 1
Constraints:
●1 <= dominoes.1ength <= 40000
●1<= dominoes[i][j]<= 9
题目大意
给你一个由一些多米诺骨牌组成的列表dominoes。如果其中某一张多米诺骨牌可以通过旋转0度或
180度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。形式上，dominoes[i]=[a，b]和