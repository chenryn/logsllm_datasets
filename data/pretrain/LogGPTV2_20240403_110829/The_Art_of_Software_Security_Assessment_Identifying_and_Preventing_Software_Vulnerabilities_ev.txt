readable. 
Reality: Keep this issue in mind when you're evaluating the significance of a finding 
that seems as though it would be difficult to discover externally. As far as a solution, 
you can attempt to obfuscate class files so that they're difficult to reverse-engineer. 
Ideally, however, attackers who have full application source code shouldn't be able to 
exploit the system. 
Note 
If you'd like to pull apart some Java class files, you should use a Java decompiler GUI 
based on Jad, the fast Java decompiler. You can find the Jad software and a list of 
GUIs available for Jad at www.kpdus.com/jad.html. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1086 
Web applications can be quite difficult to review: Many Web applications are 
composed largely of third-party code. Applications that are built around frameworks 
or make heavy use of prepackaged technology can be difficult to analyze. A security 
reviewer needs to be able to trace the flow of data from end to end in an application, 
and this process is quite difficult when large portions of the functionality aren't 
available without reverse-engineering. 
Furthermore, many Web applications are abstracted to the point that they become 
difficult to conceptualize. The abstraction provided by Web frameworks can lead to 
increased division of labor and more productive programmers, but they also spread 
the system's functionality over several different layers. A highly compartmentalized 
object-oriented system has appealing characteristics, but unless it's done extremely 
well, it tends to make security review more cumbersome. As a reviewer, you're 
primarily interested in end-to-end data flow and the enforcement of security controls. 
Understanding the complete data flow is very difficult when the functionality needed 
to handle one Web request is distributed over more than ten classes and XML 
configuration files, which is not uncommon. 
Reality: Web applications might have weaknesses that even focused source-code 
auditing has a hard time uncovering. 
8.4.9 Auditing Strategy 
Auditing a Web application can prove a formidable challenge. Naturally, it's helpful if 
you can explore the framework and technology that form the foundation of an 
application. If you're charged with auditing a specific set of Web applications, and you 
have enough time, this endeavor is certainly useful. However, if you have to review 
applications on a consulting basis or review applications from many development 
teams or across several business units in your organization, you might find it 
challenging to stay on top of all the different technologies being used and stay on top 
of your security expertise at the same time. The following sections offer a few Web 
application auditing strategies that extend the process presented in Chapter 4(? 
[????.]), "Application Review Process." These strategies should help you when 
auditing an unfamiliar and complex Web application. 
Focus on the Elements 
No matter how many business objects, XML parsers, or levels of indirection are 
involved in a system, Web applications perform some common, straightforward 
actions. Focusing on them can help you figure out how things work and where 
security controls are located (or should be located). Try to isolate the following 
activities: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1087 
Interaction with the Web server Try to determine where the Web application 
interacts with the query string and posted parameters. If you can trace the 
data from the client interaction with the Web server forward, you can often 
figure out how the system is organized. You want to look for each parameter 
users can tamper with, and do your best to trace that user-supplied data all 
the way through the Web application processing, if possible. 
Interaction with the session Sessions play an important role in modern Web 
applications, so examine each session variable and try to locate all the places 
in the application where the variable is accessed or modified. This information 
can often lead to insights on how to attack an application. 
Interaction with the host OS or file system This interaction is one of the 
weakest points of Web applications, short of database interaction. Every time 
the system opens a file or runs a program, you should carefully study how the 
filename, program name, or program arguments are constructed. If you can 
isolate these behaviors, you can usually find functionality to exploit. 
Interaction with a database SQL injection is the main vulnerability in Web 
applications, and it should be the main area of inquiry for your Web application 
audit. If you can figure out where the application interacts with the database, 
you can often isolate every end-activity of interest. Be sure to inspect 
database interaction carefully for SQL-injection possibilities. 
HTML display Every Web application has to render HTML to users in response 
to requests. Sometimes this mechanism can be quite obfuscated, but it can be 
a useful component to try to isolate. Check this code for cross-site scripting 
vulnerabilities at some point during the audit. 
Black Boxing 
Black box testing can be a critical tool if you're trying to make the most of a limited 
time frame. It can also be useful for testing code that's unapproachable or testing 
application components you don't have code for. Be sure to read the sidebar in this 
chapter on testing for SQL injection vulnerabilities. If you can cause a SQL injection 
vulnerability and then trace it back to its cause in the source code, you can often find 
a mistake developers repeat in other places in their Web applications. 
Attack from Multiple Angles 
It can help to change up your approach occasionally, especially if you feel as though 
you aren't making progress in wrapping your head around an obtuse Web system. 
One good approach is end-to-end analysis of the data. Trace a user's request from the 
Web server, back to the data tier, and back to the Web server. This approach can help 
you focus on the data flow that's critical for the application's security. 
You can also try to put yourself in an object-oriented frame of mind. Look at the 
system from a higher-level perspective, and study each component in isolation. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1088 
Document what each component does, and brainstorm potential problems that could 
happen when it's coupled with other components. 
Sometimes you can benefit from stepping back and reading about the infrastructure 
code the Web site uses. Learn more about the technology or even, time permitting, 
attempt to program simple Web functionality using the same technology and see 
what kind of issues you spot. 
If you simply need a break from the code, you can spend time constructing an 
automated attack against the login mechanism or session tokens. If you find a 
security vulnerability, you can write an automated script to exploit it, and then see 
how far you can leverage it. Spend some time performing a straight black box test of 
the application. 
Make No Assumptions 
Use your ignorance as an advantagecreativity is key. Modern enterprise Web 
applications are often entrenched in a particular design model or technology that can 
abstract away a lot of the details of how processing occurs. As an outside auditor, you 
bring a breath of fresh air to the table. Your goal is to understand how the system 
actually works, not how it's supposed to work. Sit down and give it your best shot, but 
try not to make any assumptions. Ideally, you'd like to be able to test various theories 
about the Web technology as you go. It's not uncommon for a senior developer to 
make a mistake such as a subtle misunderstanding of threading models in a Web 
technology. It might take someone with a fresh perspective to identify potential 
issues of this nature. 
Testing and Experimentation Are Critical 
Much of the system is probably written by a third party, considering the role 
application frameworks play in modern Web applications. Because you don't have 
source code to these components, you have to rely on your intuition and a healthy 
dose of testing against a live system. 
Be sure to test the middleware, the Web server, and the configuration. Try to bypass 
built-in authentication mechanisms by appending strange characters to the URL, such 
as %00, %2f, and %5c. Research vulnerabilities that have plagued other similar Web 
technologies, and see whether they can be applied in some fashion. Vet the 
configuration carefully, and make sure you can't get to any functionality that should 
be protected. Research vulnerability databases, such as the Security Focus Web site 
mentioned previously, for issues that affect the software or have affected the 
software in the past. 
Get Your Hands Dirty 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1089 
Are you following something along when it suddenly disappears into a complex chunk 
of framework code you don't have source code to? If you have the time and the 
location seems interesting, reverse-engineer it! Java code reverses quite nicely from 
bytecode, and x86 or SPARC assembly code isn't that difficult if you have good tools 
such as IDA Pro, covered in Chapter 4(? [????.]). 
Enumerate All the Functionality 
One way to make sure you give an application proper coverage is to try to enumerate 
all the functionality users can access, and then make sure you have examined that 
functionality closely. For example, list every URL that can be called, every servlet and 
servlet action, all directories in the Web tree, all include files, all configuration files, all 
open ports, and all third-party software components. 
Have a Goal and Go for It 
Sometimes brainstorming a particular goal and then attempting to find a way to 
accomplish that goal is a useful exercise. For example, you might say "I want to place 
a fraudulent order" or "I want to view someone else's account information." From 
there, you can examine all code that could be relevant to your attack, and try to 
brainstorm ways you could achieve this goal. 
8.4.10 Summary 
This chapter has introduced common technologies and approaches used in Web 
applications. You have learned about a range of vulnerabilities common to Web 
applications and their supporting components. Finally, you have seen some strategies 
for identifying and diagnosing these issues in real-world applications. In Chapter 18(? 
[????.]), you expand on this foundation to learn the specifics of Web technologies. 
Together with this chapter, it should give you all the tools you need to hit the ground 
running when faced with a Web application security assessment. 
8.5 Chapter 18.  Web Technologies 
"Your training starts now. When I'm through with you, you'll be a member of the elite 
agency that's been thanklessly defending this country since the second American 
Revolutionthe invisible one." 
Hunter, The Venture Bros. 
8.5.1 Introduction 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1090 
The Web has undergone major changes in the post dot-com era. Static content and 
simple page-structured front ends are being replaced with Web-based pipelines and 
rich Web applications. These new technologies are often collectively referred to as 
"Web 2.0." At its most basic level, the Web 2.0 approach doesn't add anything new to 
Web application security. However, it incorporates Web technologies at such a 
fundamental level that it's often more prone to standard Web vulnerabilities. 
This chapter explores the technologies and frameworks that make up the current Web. 
It begins with a discussion of the emerging Web 2.0 technologies and presents much 
of the high-level concepts you'll require in discussing Web applications. The focus is 
then changed to the specific implementation concerns associated with the six most 
popular Web application frameworks. By understanding both the technology trends 
and implementation, you will establish the foundation necessary to assess the vast 
majority of web applications. 
8.5.2 Web Services and Service-Oriented Architecture 
Web Services is a software model for distributed computing that has been gaining 
popularity in recent years. The Web Services infrastructure is similar to Java remote 
method invocation (RMI), Common Object Request Broker Architecture (CORBA), 
and Distributed Component Object Model (DCOM), in that it provides a framework for 
developers to create software components that can interact with other software 
components easily, regardless if they're running on the same machine or running on 
a server halfway around the world. This interaction is achieved by using 
machine-to-machine exchanges conducted over HTTP-based transports, usually for 
communicating XML messages. 
Web Services generally exposes interfaces in some machine-discoverable form, 
although there's no requirement for this format. Web Services Description 
Language (WSDL) is the most popular format for describing these interfaces; it 
defines the service name and location, method prototypes, and potentially 
documentation on the service. Tools are available for using these WSDL files to 
generate stub code (in various languages) for interacting with target Web Services. 
You can design your Web service around a document programming model, meaning 
you receive and send XML documents with peers and use standard XML manipulation 
APIs to decode, parse, and create documents. WSDL isn't tied to any implementation, 
so the responsibility for document consistency and accuracy is placed on the platform 
or developer. For this reason, hand-generated WSDL documents might very well 
contain errors or omit methods. Also, there's no current standard for locating WSDL 
documents, although they generally end in a .wsdl extension and are served 
somewhere on the target site. 
Service-oriented architecture (SOA) is an umbrella term for a loosely coupled 
collection of Web Services. This architecture has grown popular over the past several 
years, as HTTP has morphed into a fairly universal communication protocol. Most Web 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1091 
services use communication protocols based on Simple Object Access Protocol or 
Representational State Transfer (more on these protocols in the next section), 
although there's no requirement for a certain communication protocol. 
Whether Web services introduce any new vulnerabilities is somewhat a matter of 
opinion. Web services might be more prone to XML-related vulnerabilities (such as 
XML external entities [XXE] and XPath injection, explained in Chapter 17(? [????.]), 
"Web Applications"). Their analysis might also require more attention to certain 
classes of operational vulnerabilities. In particular, automated or certificate-based 
authentication mechanisms are necessary for server-to-server communications. 
Often both sides of communications aren't validated adequately, and interfaces 
intended for servers are publicly accessible. 
SOAP 
Simple Object Access Protocol (SOAP) is a protocol for exchanging XML 
messages, generally over an HTTP transport mechanism. The value of SOAP is that 
it's based entirely on simple, text-based, open standards. The major criticism of SOAP 
is that, in practice, it's complex and bandwidth intensive. For the most part, you can 
audit SOAP like any other Web application. It exposes methods that can be vulnerable 
to SQL or XML injection attacks, among others. 
The body of a SOAP request is contained in an envelope that identifies the requested 
service, method, and parameters. Extensions to SOAP can also add encryption and 
signature-based method authentication in addition to any HTTP-based methods; this 
component isn't addressed in detail in this chapter, however. The body of the SOAP 
message does provide additional potential for data filtering. Validation against an XML 
schema can help prevent a variety of attacks, including SQL injection, cross-site 
scripting (XSS), memory manipulation, and various XML-based attacks. A schema 
isn't a foolproof method, however; it might still allow harmful data through. When 
auditing, pay special attention to applications that rely entirely on schema-based 
protection and look for malicious data that can be validated successfully. 
REST 
Representational State Transfer (REST) includes almost any type of Web service 
communication protocol that isn't SOAP, so REST-based communication could take 
any form. Fortunately, XML is often used with REST, so most of the discussion on 
SOAP applies. JavaScript Object Notation (JSON) is another popular format for 
REST data exchange. Used mostly by client applications, it's simply a method of 
bundling data into a JavaScript object. The advantage of JSON is that it's generally 
smaller than the equivalent XML and is easy for Web browsers to consume. For this 
reason, JSON is commonly used in dynamic applications, not server-to-server 
communications. This means JSON is used in areas more prone to XSS vulnerabilities, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1092 
particularly stored XSS. So you need to pay careful attention to ensure that attackers 
can't supply raw JavaScript for a JSON-encoded object. 
AJAX 
Asynchronous JavaScript and XML (AJAX) is a term for the recent generation of 
highly interactive Web applications. These applications make extensive use of client 
scripting, style sheets, and asynchronous communication to create user interfaces 
that behave like typical rich client applications. The interesting thing about an AJAX 
application is that it's a client-side technology. By definition, this technology should 
have almost no impact on security. However, the extensive use of dynamic client 
content can start to blur the lines between what data should be on the client and what 
should be on the server. In reviewing these applications, pay special attention to 
information leakage to the client and insufficient data filtering at the server. This is no 
different from the vulnerabilities described in Chapter 17(? [????.]); it's just a 
mistake that's even easier to make in AJAX development. 
8.5.3 Web Application Platforms 
Now that you have a sense of the direction Web applications are headed in, next you 
need to understand details of the platforms that host these applications. Chapter 17(? 
[????.]) covered the common threads and vulnerability classes you need to be 
familiar with. However, the choice of platform can have a major impact on what 
vulnerabilities are more prevalent and how they show up. So the remainder of this 
chapter discusses the subtleties of the most popular platforms. This information is not 
exhaustive, but it should give you a foundation for identifying vulnerabilities in 
applications built on these platforms. 
8.5.4 CGI 
The Common Gateway Interface (CGI) standard specifies how a normal, 
run-of-the-mill executable interacts with a Web server to create dynamic Web 
content. It lays out how the two programs can use the features of their runtime 
environment to communicate everything necessary about a HTTP request and 
response. Specifically, the CGI program takes input about the HTTP request through 
its environment variables, its command line, and its standard input, and it returns all 
its HTTP response instructions and data over its standard output. 
It's unlikely you'll need to review the security of a straightforward CGI application, as 
it's been obsolete as a dynamic Web programming technique for at least a decade. 
However, modern Web technology borrows so much from the CGI interface, both 
implicitly and explicitly, that it's worthwhile to cover the technical nuances that are 
still around today. The following sections focus on the artifacts that are still causing 
security headaches for Web developers. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1093 
Indexed Queries 
In the CGI model, most of the information about the incoming HTTP request is placed 
in the CGI program's environment variables. They are covered in detail in the next 
section, but they will probably seem familiar to you, with names such as QUERY_STRING 
and SERVER_NAME. Most people are aware that the CGI program's standard input (stdin) 
is used to send the body of the HTTP request, which is generally referred to as 
"POSTing data." CGI uses its standard output to communicate its HTTP response to 
the Web server. 
Next, look at the command-line arguments. You've probably assumed that the GET 
query string parameters are passed over the command line. It turns out, however, 
that this assumption is almost entirely wrong. The query string is always in the 
QUERY_STRING environment variable, but it's almost never passed over the command 
line. This contention probably seems flat wrong to anyone who has witnessed the 
efficacy of URLs such as the following: 
GET /scripts/..%c1%c1../winnt/system32/cmd.exe?/c+dir+c:\ 
This Unicode attack works because it inadvertently initiates an antiquated form of 
HTTP request called an "indexed query." Indexed queries are old: They predate HTML 
forms and today's GET and POST methods. (At one point, they were almost added to 
the HTTP specification as the TEXTSEARCH query, but they never made it into the final 
draft.) Before HTML had input boxes and buttons, you could place only a search box 
on your Web site by using the  tag on your page. It causes a single input text 
box to be placed on your site, and still works if you want to see it in action. If a user 
enters data in the box and presses Enter, the Web browser issues an indexed query to 
the page. As an example, entering the string "jump car cake door" causes the browser 
to send the following query: 
GET /name/of/the/page.exe?jump+car+cake+door 
The Web server interprets this indexed query by running page.exe with an argument 
array argv[] of {"page.exe", "jump", "car", "cake", "door"}. The original string 
delimiter was the addition sign, not the ampersand, but other than that, it's close to 
the query string mechanism used today. 
So when a contemporary Web server sees a request with a query string, it checks to 
see whether it's an indexed query. If the query string contains an unescaped equal 
sign (=), the Web server decides it's a normal GET query string request, puts the query 
string in the QUERY_STRING environment variable, and doesn't pass any command-line 
arguments to the CGI program. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1094 
If the Web server sees a query string without an equal sign, it assumes it's an indexed 
query. It still places the entire query string in QUERY_STRING, but it also sets up 