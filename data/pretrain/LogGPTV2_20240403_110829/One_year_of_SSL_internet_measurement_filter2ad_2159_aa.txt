title:One year of SSL internet measurement
author:Olivier Levillain and
Arnaud &apos;Ebalard and
Benjamin Morin and
Herv&apos;e Debar
One Year of SSL Internet Measurement
Olivier Levillain*†
Arnaud Ébalard*
*ANSSI
51 boulebard Latour Maubourg
Paris, France
ﬁPI:EMAIL
Benjamin Morin*
Hervé Debar†
†Télécom Sud Paris
9 rue Charles Fourier
Evry, France
ﬁPI:EMAIL
ABSTRACT
Over the years, SSL/TLS has become an essential part of
internet security. As such, it should oﬀer robust and state-
of-the-art security, in particular for HTTPS, its ﬁrst appli-
cation. Theoretically, the protocol allows for a trade-oﬀ be-
tween secure algorithms and decent performance. Yet in
practice, servers do not always support the latest version of
the protocol, nor do they all enforce strong cryptographic
algorithms.
To assess the quality of HTTPS servers in the wild, we
enumerated HTTPS servers on the internet in July 2010 and
July 2011. We sent several stimuli to the servers to gather
detailed information. We then analysed some parameters of
the collected data and looked at how they evolved. We also
focused on two subsets of TLS hosts within our measure:
the trusted hosts (possessing a valid certiﬁcate at the time
of the probing) and the EV hosts (presenting a trusted, so-
called Extended Validation certiﬁcate). Our contributions
rely on this methodology: the stimuli we sent, the criteria
we studied and the subsets we focused on.
Moreover, even if EV servers present a somewhat im-
proved certiﬁcate quality over the TLS hosts, we show they
do not oﬀer overall high quality sessions, which could and
should be improved.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols; D.2.8 [Software Engineering]: Metrics
Keywords
SSL/TLS; HTTPS; Internet measure; certiﬁcates; X.509
1.
INTRODUCTION
SSL (Secure Sockets Layer) is a cryptographic protocol
designed by Netscape in 1995 to protect the conﬁdentiality
and integrity of HTTP connections. Since 2001, the proto-
col has been maintained by the IETF (Internet Engineering
(c) 2012 Association for Computing Machinery. ACM acknowledges that
this contribution was authored or co-authored by an employee, contractor
or afﬁliate of the national government of France. As such, the government
of France retains a nonexclusive, royalty-free right to publish or reproduce
this article, or to allow others to do so, for Government purposes only.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
Task Force) and has been renamed TLS (Transport Layer
Security).
SSL/TLS primary objective was to secure online-shopping
and banking web sites. With the so-called Web 2.0, its us-
age has broadened drastically: services provided by Google,
Yahoo!, Facebook or Twitter now oﬀer a secure access using
TLS. Furthermore, other services like SMTP or IMAP ben-
eﬁt from the security layer; there also exists several VPN
(Virtual Private Network) implementations relying on SSL;
ﬁnally, some Wiﬁ access points use TLS as an authentication
protocol (EAP-TLS).
Several ﬂaws have been discovered in TLS, leading to re-
visions of the standard. Moreover, TLS is subject to various
conﬁguration and implementation errors. As TLS usage is
so ubiquitous on the internet, it is legitimate to assess its se-
curity. Since HTTPS still represents most of the daily TLS
usage, we designed our experiments to get a clear view of
what browsers face on a daily basis, and whether this view is
satisfying or not. We performed several campaigns in 2010
and 2011, to enumerate the HTTPS servers answering on
TCP port 443. We used diﬀerent stimuli to gather precise
information about what was eﬀectively supported.
Many SSL/TLS handshake parameters can be considered
to assess the quality of a server’s answer. Some of them
are related to the protocol (version, ciphersuite, extensions)
and others can be found in certiﬁcate chains (signature al-
gorithms, root certiﬁcate, X.509 extensions). We selected
various criteria and looked at them through three diﬀer-
ent subsets of the measures: all the hosts, hosts presenting
trusted valid certiﬁcates, hosts presenting EV certiﬁcates.
Our contribution is therefore threefold:
• using several stimuli to enrich the data collected;
• proposing a variety of criteria to assess TLS quality;
• analysing the data through diﬀerent subsets.
As such, our work is in line with the suggestions of several re-
searchers in cybersecurity, who advocate that the ﬁeld would
beneﬁt from thorough experiments (e.g., last year’s keynote
speaker in ACSAC 2011 [1]).
2. STATE OF THE ART
2.1 SSL/TLS: a quick tour
SSL (Secure Sockets Layer) is a protocol originally de-
veloped by Netscape in 1995 to secure HTTP connections
using a new scheme, https://. The ﬁrst published version
was SSLv2 [17], rapidly followed by SSLv3 [16], which ﬁxed
11
Version Comments
SSLv2
Major structural ﬂaws [29].
Should not be used anymore.
PKCS#1 ﬂaw in early implementations [4].
Interoperability issues with newer versions.
TLSv1.0 Weakness of CBC using implicit IV [23, 12].
SSLv3
Workarounds exist in major software.
TLSv1.1 Minimum recommended version.
TLSv1.2 New ciphersuites (GCM mode, HMAC with
SHA2 hash functions).
Table 1: Summary of SSL/TLS versions.
major conceptual ﬂaws. Even if a compatibility mode was
described, SSLv2 and SSLv3 use diﬀerent message formats.
In 2001, the evolution and the maintenance of the pro-
tocol were handed to the IETF (Internet Engineering Task
Force) which renamed it TLS (Transport Layer Security).
TLSv1.0 [9] can be seen as a minor editorial update of SSLv3.
TLSv1.1 was published in 2006 [10] and TLSv1.2 in 2008 [11].
Table 1 summarizes the diﬀerent versions of SSL/TLS. To-
day, SSLv2 and SSLv3 should not be used anymore, and
TLS versions 1.1 and 1.2 should be preferred.
To establish a secure session between a client and a server,
SSL/TLS uses handshake messages to negotiate its param-
eters: the version of the protocol, the cryptographic algo-
rithms and the associated keys. The algorithms are de-
scribed by so-called ciphersuites which deﬁne how to:
• authenticate the server1;
• establish a shared secret used to derive keys;
• encrypt the application data;
• ensure the integrity of the application data.
Figure 1 presents a handshake between a client and a
server. First, the client contacts the server over TCP and
proposes several versions and ciphersuites; this initial mes-
sage, ClientHello, also contains a nonce.
If the server
ﬁnds an acceptable ciphersuite, it responds with several mes-
sages: ServerHello, containing the selected version and ci-
phersuite, the Certificate message, containing the chain of
certiﬁcates for the site contacted, and an empty ServerHel-
loDone message ending the server answer. Then, the client
checks the certiﬁcates received and sends a ClientKeyEx-
change message, carrying a random value encrypted with
the public key of the server2. At this point, the client and
the server share this secret value, since the server can de-
crypt the ClientKeyExchange message. Finally, the Change-
CipherSpec messages activate the negotiated suite and keys,
and the Finished messages ensure the integrity of the hand-
shake a posteriori, as they contain a hash of all the hand-
shake messages previously exchanged. Finished messages
1Mutual authentication is possible with TLS, but the algo-
rithms used to authenticate the client are negotiated inde-
pendently in the CertificateRequest message. This aspect
of TLS is out of the scope of this article.
2For the sake of simplicity, the negotiation presented here
uses RSA encryption as key exchange algorithm, but other
mechanisms exist, like DHE-RSA where an ephemeral Diﬃe-
Hellman is signed by the server with its private key.
12
Client
Server
ClientHello
S e r v e r H e l l o
C e r t i f i c a t e
S e r v e r H e l l o D o n e
ClientKeyExchange
ChangeCipherSpec
Finished
C h a n g e C i p h e r S p e c
F i n i s h e d
Application data
Plaintext
Protected
Figure 1: Example of a TLS negotiation.
are the ﬁrst ones protected with the algorithms and keys
negotiated.
At any moment, an Alert message can be sent to signal
a problem, for example if no ciphersuite is acceptable, or if
the client doesn’t validate the certiﬁcate sent by the server.
The certiﬁcates used in TLS follow the X.509 standard [7].
The TLS Public Key Infrastructure is based on several root
authorities trusted by default by clients like web browsers.
2.2 Known vulnerabilities
Early SSL/TLS versions had protocol issues. SSLv2 is
ﬂawed in numerous ways, the most problematic vulnerabil-
ity being that an attacker can easily tamper with the ne-
gotiation [29]. More recently, Ray devised an attack on the
renegotiation feature aﬀecting all TLS versions [24, 25].
SSL/TLS uses many cryptographic primitives, some of
which are weak, like DES or MD5 algorithms, and should not
be used anymore [15, 28]. Other algorithms were wrongly
implemented — Bleichenbacher described in 1998 an at-
tack on PKCS#1 [4] — or incorrectly speciﬁed — Rogaway
showed in 2002 that an adaptative chosen plaintext attack
was possible on CBC, which was patched in TLSv1.1 and
later proved to be exploitable in 2011 [23, 12].
It is also possible to encounter symmetric or asymmetric
weak keys which lead to the loss of conﬁdentiality in some
cases (e.g. RC4 40-bit keys present in export ciphersuites),
or allow the attacker to control the connection entirely (to-
day, 512-bit RSA keys can easily be factored then used either
for a man-in-the-middle attack or for oﬄine decryption).
Since the authentication of the visited sites relies on cer-
tiﬁcates, processes of generation, validation and revocation
thereof are critical.
• Examples of bad random number generators exist: a
bug in the Debian version of OpenSSL reduced the ef-
fective entropy to only a few dozens of bits from 2006
to 2008 [8]; more recently, Lenstra et al. showed that
some network devices did not produce enough entropy
and reused prime numbers between two RSA genera-
tions, allowing moduli to be factored by a simple gcd
algorithm [20].
• X.509 is a standard with many extensions, which have
not always been correctly interpreted. For instance,
the BasicConstraints extension is used to distinguish
server certiﬁcate from authority certiﬁcates; in 2002,
Marlinspike showed that the distinction was not im-
plemented in Webkit nor CryptoAPI [21]. He showed
other vulnerabilities on the major SSL/TLS implemen-
tations [22].
• Finally, recent incidents aﬀecting certiﬁcation authori-
ties [6, 30] have proved that the revocation system us-
ing CRLs (Certiﬁcate Revocation Lists) or OCSP (On-
line Certiﬁcate Status Protocol) did not really func-
tion: web browsers had to resort to black lists to limit
the consequences of compromised certiﬁcates.
The TLS ecosystem is complex and it can be diﬃcult for
a client to assess a server’s trustworthiness. This is particu-
larly true for web browsers, which face a lot of servers which
they have no prior knowledge of. That is why we decided to
evaluate what web browsers could encounter out there. Sev-
eral research teams recently led such campaigns in parallel.
These studies are examined in section 8.
3. METHODOLOGY OF THE MEASURES
3.1 Enumerating HTTPS hosts
Gathering data about what a browser faces on a daily
basis can be done in several ways:
• enumerating every routable address in the IPv4 space
to ﬁnd open HTTPS ports (TCP/443);
• contacting HTTPS hosts based on a list of DNS (Do-
main Name System) hostnames;
• collecting real HTTPS traﬃc from consenting users.
The ﬁrst method is the most exhaustive, because it tests
every IP in the world. However,
it leads to contacting
many non-HTTPS hosts. Also, it does not take into ac-
count the popularity of internet sites (i.e., discriminate sites
like www.google.com from randomhost.dyndns.org or even
an unnamed host).
The second option is more restrictive, but better rep-
resents user needs, and the proportion of HTTPS servers
among the hosts to contact is highly optimised. Besides,
this method is compliant with the TLS SNI (Server Name
Indication) extension [3], which allows a client to contact
diﬀerent virtual hosts at the same address.
Finally, the last one is completely passive and is really
centered on users’ habits. In this case it is important to have
access to the traﬃc of many diﬀerent consenting users to get
relevant data that would be comparable to other studies.
We chose the ﬁrst method to acquire a broad vision of the
HTTPS world. This method also allowed us to get consistent
answers to multiple stimuli for each given host.
3.2 Description of the campaigns
In July 2010 and July 2011, we launched several cam-
paigns to enumerate HTTPS hosts present in the IPv4 ad-
dress space. We used diﬀerent stimuli (diﬀerent Client-
Hello) to grasp the behaviour of the diﬀerent TLS stacks
encountered.
Phase 1: ﬁnding the HTTPS hosts
The ﬁrst task was to ﬁnd out which hosts were accept-
ing connections on TCP port 443. Using BGP (Border
Gateway Protocol) internet routing tables, we reduced the
search space from 4 billion IPv4 addresses (232) to 2 bil-
lion routable addresses. Instead of using existing tools such
as nmap to enumerate open 443 ports, we developped home-
made probes to randomize the set of routable addresses glob-
ally. For each host, the test consisted simply in a SYN-probe
to determine open ports.
To prevent this ﬁrst phase from being too intrusive, we
bounded our upstream rate at 100 kB/s, allowing us to ex-
plore the 2 billion addresses in about two weeks.
Phase 2: TLS sessions
Once a host oﬀering a service on port 443 was discovered,
we tried to communicate with it using one (or several) TLS
ClientHello.
In this second phase, we used a full TCP
handshake followed by several packets, but only with the
fraction of servers listening on port 443 (about 1 percent).
The second phase could thus be run in parallel with the ﬁrst
one.
To limit the computational impact on servers, we only
recorded the ﬁrst server answer (messages between Server-
Hello and ServerHelloDone) before ending the connection.
This way, we collected the protocol and ciphersuite chosen
by the server, as well as the certiﬁcate chain sent.
In the 2010 campaign, we sent only one ClientHello mes-
sage. On the contrary, as we were interested in server be-
haviour, in the July 2011 campaign, we sent several Client-
Hello messages containing diﬀerent protocol versions, ci-
phersuites and TLS extensions.
In addition to our samples, two campaigns were publicly
released by the Electronic Frontier Foundation (EFF) in De-
cember 2010, allowing us to extend the data to analyse, since
they employed a similar methodology to contact the servers
and record the answers [13]. Table 2 describes the speciﬁci-
ties of the ClientHello sent for each dataset. It contains our
campaign from July 2010 (NoExt1), our seven campaigns
from July 2011 (NoExt2, DHE, FF, EC, SSL2, SSL2+ and
TLS12) and also includes both EFF campaigns in italics.
3.3 Issues encountered
Our July 2010 and July 2011 campaigns each took two to
three weeks to complete. As explained earlier, this was nec-
essary to avoid link saturation during the host enumeration.
However, spanning our measures over several weeks has an
impact on the picture of the internet we are seeing. In fact,
while probing the diﬀerent hosts, three factors need to be
taken into account:
• the time spent acquiring the data; as the exposure time
in photography, it should ideally be as short as possi-
ble, to get consistent data;
• the network load induced; sending too many packets
can result in some of them getting lost at either end of
the connection;
• the use of dynamic IPs in some address blocks; some
ISPs change IP addresses every day or so.
Considering the network bandwidth at our disposal and the
way IPs were globally randomized, we are conﬁdent we did
13
Id
Date
SSLv2 Max version
NoExt1
EFF-1
EFF-2
NoExt2
DHE
FF
EC
SSL2
SSL2+
TLS12
2010/07
2010/08
2010/12
2011/07
2011/07
2011/07
2011/07
2011/07
2011/07
2011/07
no
yes
yes
no
no
no
no
yes
yes
no
TLSv1.0
TLSv1.0
TLSv1.0
TLSv1.0
TLSv1.0
TLSv1.0
TLSv1.0
SSLv2
TLSv1.0
TLSv1.2
Extensions
Ciphersuites
Standard Firefox suites
None
SSLv2 + some TLSv1.0 suites None
SSLv2 + some TLSv1.0 suites None
None
Standard Firefox suites
None
DHE suites only
Standard Firefox suites
EC, Reneg, Ticket
EC
EC suites only