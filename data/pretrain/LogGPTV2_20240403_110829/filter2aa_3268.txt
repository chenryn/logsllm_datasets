### Introduction
- **Experience**: 10 years in defensive cybersecurity.
- **Expertise**: File analysis and reverse engineering (RE).
- **Current Focus**: Research using machine learning.

### Level Setting
- **ROP (Return-Oriented Programming)**: A technique to bypass non-executable memory by executing small gadgets that typically end with a return instruction.
- **PIN (Dynamic Binary Instrumentation Framework from Intel)**: 
  - Does not require recompiling of source code.
  - Can instrument programs that dynamically generate code.

### Basic Idea
- **Control Flow Integrity (CFI)**: Ensuring that the control flow of a program adheres to a predefined set of valid targets.
- **Coarse-Grain Controls**:
  - Valid targets for calls and returns are known.
  - Functions and instructions after a call instruction are identified.
  - A whitelist containing these addresses is created.
  - Offsets to these locations are stored.
  - If an indirect call or return goes to a different location, it is flagged as ROP.

### How Do We Get These?
- **BranchTargetDetector (pintool)**:
  - Analyzes exported functions when a DLL is loaded.
  - Instruments all calls and returns.
  - Stores offsets and dumps them to a text file when the program exits.
  - **Pros**:
    - Provides real, actual used values.
  - **Cons**:
    - Not the fastest method.
    - Only gets values from functions PIN can detect and what it actually executes.
    - Requires multiple runs if the DLL is not loaded.

### Alternative Methods
- **pyew**:
  - Better at detecting functions.
  - Can extract flow graphs.
  - Can bulk run all DLLs.

### Data Management
- **Storing Offsets**:
  - Store offsets in a file per MD5 hash of the DLL.
  - Allows handling of different versions of the same DLL.

### ROP Detector
- **Process**:
  - When a DLL is loaded, load the whitelist for that DLL.
  - Instrument all indirect calls and returns.
  - Alert when the target is not on the whitelist.

### Example 1
- **Scenario**: Adobe Reader 9.3 on Windows XP.
- **DLL**: CoolType.dll.
- **Vulnerability**: CVE-2010-2883 (Stack-based buffer overflow).
- **Detection**:
  - `C:\Program Files\Adobe\Reader 9.0\Reader\icucnv36.dll`
  - `0x4a80cb3f: ret`
  - Target: `0x4a82a714 (0x2a714)`
- **Result**: Detected one ROP chain.

### Why Only One?
- **Issues**:
  - Dies on stack pivot.
  - PIN affects memory layout.
  - Suggestion: Run everything in PIN?

### Evaluation
- **Details**:
  - 45 chains in ROP sequence.
  - 14 unique addresses.
  - 2 indirect calls, 43 returns.
  - 3 of the 14 addresses on the whitelist.
  - Each address called only once.
  - 42 of 45 chains would be detected.

### Example 2
- **Scenario**: Adobe Reader 9.5 on Windows XP.
- **DLL**: ToolButton Use After Free.
- **Vulnerability**: CVE-2013-3346.
- **Result**: Adobe crashes; PIN affected memory layout again.

### The Neighborhood of Make Believe
- **Details**:
  - 208 chains in ROP sequence.
  - Dominated by 191 chain sled.
  - 15 unique addresses, all returns.
  - 3 of the 15 addresses on the whitelist.
  - 204 of 208 chains would be detected.

### Probability of Detection
- **Assuming 11/14 detections is average**:
  - 1 address: 78.6%
  - 2 addresses: 95.4%
  - 3 addresses: 99.0%
  - 4 addresses: 99.8%
  - 5 addresses: 99.96%
  - 10 addresses: 99.999980%

- **Assuming 50% detection rate**:
  - 1 address: 50.0%
  - 2 addresses: 75.0%
  - 3 addresses: 87.5%
  - 4 addresses: 93.8%
  - 5 addresses: 96.9%
  - 10 addresses: 99.9%

### Limitations
- **PIN**:
  - Breaks on stack pivot.
  - Slow.
  - Doesnâ€™t handle Jump Oriented Programming (JOP).
  - Only coarse-grained control flow integrity.

### To-Do List
- **Heap Problem**:
  - Smarter instrumentation.
  - Push analysis into a different thread.
  - Check for JOP.
  - Implement on OS X and Linux.
  - Implement fine-grained controls.
- **"The Beast Is In Your Memory" (BH 2014)**:
  - Defeated coarse-grained CFI.
  - EMET and this current implementation.
  - Defeated return frequency/sequence length heuristics.
  - Kbouncer and ROPecker.

### Fine-Grained CFI
- **Current Status**:
  - Will not detect specific function return pairs.
  - Should be able to determine these pairs during initial analysis.

### Smarter Ways
- **Debugger?**
- **Detours?**
- **Monitor Last Branch MSRs?**

### Contact Information
- **Contact Me**:
  - @trogdorsey
  - [GitHub Repository](https://github.com/trogdorsey/rop)

### Further Reading
- [Intel PIN Documentation](https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool)
- [Pyew Project](https://code.google.com/p/pyew/)
- [Kbouncer Paper](http://www.cs.columbia.edu/~vpappas/papers/kbouncer.pdf)
- [ROPecker Paper](https://users.ece.cmu.edu/~zongweiz/media/ropecker.pdf)
- [Black Hat Presentation](https://www.blackhat.com/us-14/briefings.html#the-beast-is-in-your-memory-return-oriented-programming-attacks-against-modern-control-flow-integrity-protection-techniques)