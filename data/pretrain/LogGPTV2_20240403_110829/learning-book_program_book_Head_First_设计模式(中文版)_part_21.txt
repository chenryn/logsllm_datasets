好了，这是纽约原料工厂的实现。这工
厂专精于大蒜番茄酱料、Reggiano干酪、
新鲜蛤·..
具体原料工厂必须实现这个提口.组
约原料工厂也不例外。
public class NYPizzaIngredientFactory implements PizzaIngredientFactory (
public Dough createDough(）(
return new ThinCrustDough();
/
public Sauce createSauce(){
种原科，我们都提供了
return new MarinaraSauce() ;
组约的版本。
public Cheese createCheese()(
return new ReggianoCheese() :
public Veggies[] createVeggies() {
Veggies veggies[] =(new Garlic(), new Onion(), new Mushroom(), new RedPepper() };
return veggies;
个
对于越菜，以一个缺莱数组为返回值。
public Pepperoni createPepperoni()(
在这里我们是直接把疑莱写死。其实我
return new SlicedPepperoni();
们可以把它改写得更好一点，但这对于
public Clams createClam() {
学习工厂模式并没有帮助，所以还是保
return new Freshclams ();
持这个筒单的做法就好了。
人
这是切片的象式腊肠，纽约
组约书海，所以有新鲜的给
和芝加哥都金用到它。在下
。芝加哥就必须使用冷冻
一页，在你自己实现芝加哥
工厂时，别忘了使用它。
的始刺。
你现在的位置
147
---
## Page 184
建造一个工厂
harpernyourpencil
写下ChicagoPizzalngredientFactory的代码。你可以参考
下面的类，写出你的实现：
ThickCrustDoug
sllcec
148
第4章
---
## Page 185
工厂模式
重做比萨
.....
工厂已经一切就绪，准备生产高质量原料了，现在我们只需要重做比萨，好让它
们只使用工厂生产出来的原料。我们先从抽象的Pizza类开始：
public abstract class Pizza (
String name;
每个比萨都持有一组在准备时全用到
Dough dough;
的原料。
Sauce sauce;
Veggies veggies[];
Cheese cheese;
Pepperoni pepperoni;
现在把peepave(）方法声9成抽象。在这个方法
Clams clam;
中，我们需要收集比萨所需的原科，而这些原
科当然是来自原科工厂了。
abstract void prepare();
void bake()(
System.out.println("Bake for 25 minutes at 350");
1
void cut()(
System.out.println("Cutting the pizza into diagonal slices");
}
void box(){
System.out.println("Place pizza in official PizzaStore box");
）
void setName(String name)(
this.name = name;
K
其他的方法维持不变，只有
String getName(){
ptepare(）需要改变。
return name;
public String toString()(
//这里是打印比萨的代码
你现在的位置
149
---
## Page 186
将原料解耦
继续重做比萨··.
现在已经有了一个抽象比萨，可以开始创建纽约和芝加哥风味的比萨了。从今以后，
加盟店必需直接从工厂取得原料，那些偷工减料的日子宣告结束了！
我们曾经写过工厂方法的代码，有NYCheesePizza和ChicagoCheesePizza类。比较一
下这两个类，唯一的差别在于使用区域性的原料，至于比萨的做法都一样（面团+酱
料+芝士），其他的比萨（蔬菜、蛤等）也是如此。它们都依循着相同的准备步
骤，只是使用不同的原料。
所以，其实我们不需要设计两个不同的类来处理不同风味的比萨，让原料工厂处理
这种区域差异就可以了。下面是CheesePizza：
要制作比萨，需要工厂提供
public class CheesePizza extends Pizza (
原科。所以每个比萨类都露
PizzaIngredientFactory ingredientFactory;
要从构造器参数中得到一个
this.ingredientFactory = ingredientFactory;
一个实例变量中。
voidprepare(){
System.out.println("Preparing " + name);
dough = ingredientFactory.createDough();
sauce = ingredientFactory.createSauce();
抽象工厂定义了一个接口，所有的
具体工厂都必须实现此接口，这个
接口包含一组方法用来生产户品。
这就是产品家族，每个
具体工厂都能够生户一
>
整组的产品。
>
AbstractFactory
CroatoProductA0
CreateProductB()
ProductA2
ProductA1
ConcreteFactory1
ConcreteFactory2
CrealeProductAO
CreateProductB()
CreateProductB(
AbstractProductB
c
个
这个具体工厂实现不同的产品家族。要创
ProductB1
建一个产品，客户只要使用其中的一个工
厂而完全不需实例化任何产易对象。
156
第4章
---
## Page 193
工厂模式
这是一张相当复杂的类图；让我们
比萨店的两个具体实例
(NYPixxaStone,ChicagoPizxaStove）是
从PizzaStore的观点来看一看它：