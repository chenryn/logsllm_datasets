### Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware

#### Overview
Firmalice is a tool designed to automatically detect authentication bypass vulnerabilities in binary firmware. The core intuition behind Firmalice is that any data exposed to the user via an output routine can be exploited by an attacker to deduce information about authentication credentials.

#### Data Exposure and Constraint Solving
- **Data Exposure**: Any data visible to the user through an output routine is considered exposed. This exposure not only reveals information about the output data but also any related or dependent data.
- **Constraint Solving**: For each privileged state, Firmalice attempts to concretize the user input to determine the possible values that can successfully reach the privileged program point. A properly authenticated path should allow a wide range of input values. Conversely, if the input concretizes to a limited set of values, it indicates that an attacker can use the exposed information to authenticate.

#### User Input and Output Identification
- **Choosing I/O**: Identifying what constitutes user input and output in firmware is not always straightforward. Firmalice uses several heuristics to identify input and output. Alternatively, it can accept a specification of the Application Binary Interface (ABI) of the firmware to differentiate between input and output.
- **Data Exposure**: If the user input depends on data exposed by the device's output, Firmalice generates a function that can produce valid inputs for a given output.

#### Analysis Termination
- **Authentication Bypass**: If the user input can be uniquely concretized, it indicates that the input required to reach a privileged program point can be determined by the attacker. In such cases, the associated path is labeled as an authentication bypass, and Firmalice terminates its analysis.

---

### 8.28 Cross-Architecture Bug Search in Binary Executives

#### Introduction
This paper introduces a system for extracting bug signatures from known vulnerabilities, which can then be used to search for similar bugs in different CPU architectures (x86, ARM, and MIPS).

---

### 8.29 Dynamic Hooks: Hiding Control Flow Changes within Non-Control Data

#### Introduction
[Summary to be provided]

---

### 8.30 Preventing Brute Force Attacks against Stack Canary Protection on Networking Servers

#### Introduction
[Summary to be provided]

---

### 8.31 WYSINWYX: What You See Is Not What You Execute

#### Introduction
[Summary to be provided]

---

### 8.32 Unleashing MAYHEM on Binary Code

#### Introduction
[Summary to be provided]

---

### 8.33 Under-Constrained Symbolic Execution: Correctness Checking for Real Code

#### Introduction
[Summary to be provided]

---

### 8.34 Enhancing Symbolic Execution with Veritesting

#### Introduction
[Summary to be provided]

---

### 8.35 Q: Exploit Hardening Made Easy

#### Introduction
[Summary to be provided]

---

### 8.36 A Survey of Symbolic Execution Techniques

#### Introduction
[Summary to be provided]

---

### 8.37 CUTE: A Concolic Unit Testing Engine for C

#### Introduction
[Summary to be provided]

---

### 8.38 TaintEraser: Protecting Sensitive Data Leaks Using Application-Level Taint Tracking

#### Introduction
[Summary to be provided]

---

### 8.39 DART: Directed Automated Random Testing

#### Introduction
[Summary to be provided]

---

### 8.40 EXE: Automatically Generating Inputs of Death

#### Introduction
[Summary to be provided]

---

### 8.41 IntPatch: Automatically Fix Integer-Overflow-to-Buffer-Overflow Vulnerability at Compile-Time

#### Introduction
[Summary to be provided]

---

### 8.42 Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software

#### Introduction
[Summary to be provided]

---

### 8.43 DTA++: Dynamic Taint Analysis with Targeted Control-Flow Propagation

#### Introduction
[Summary to be provided]

---

### 8.44 Superset Disassembly: Statically Rewriting x86 Binaries Without Heuristics

#### Introduction
[Summary to be provided]

---

### 8.45 Ramblr: Making Reassembly Great Again

#### Introduction
Ramblr is a tool that reassembles binary files by first disassembling the original binary, correctly identifying symbols and expected jump targets, inserting necessary patches, and then reassembling the patched binary.

---

### 8.46 FreeGuard: A Faster Secure Heap Allocator

#### Introduction
[Summary to be provided]

---

### 8.47 Jump-Oriented Programming: A New Class of Code-Reuse Attack

#### Introduction
[Summary to be provided]

---

### 8.48 Reassembleable Disassembling

#### Introduction
[Summary to be provided]

---

### 8.49 Understanding Integer Overflow in C/C++

#### Introduction
[Summary to be provided]

---

### Appendix

#### 9.1 More Linux Tools

- **dd**: Used for copying and converting files. Common parameters include `if` (input file), `of` (output file), `skip` (skip blocks), and `bs` (block size).
- **dmesg**: Displays kernel ring buffer messages. Useful for debugging and diagnostics.
- **file**: Detects the type of a given file.
- **edb**: A debugger supporting x86 and x86-64, similar to OllyDbg.
- **foremost**: Recovers files based on headers, footers, and internal data structures.
- **ldd**: Prints shared library dependencies of a program or library.
- **ltrace**: Tracks library function calls made by a process.
- **md5sum**: Computes and verifies MD5 message digests.

#### 9.2 More Windows Tools

[Details to be provided]

#### 9.3 Additional Resources

[Details to be provided]

#### 9.4 Linux System Call Table

[Details to be provided]

#### 9.5 Slides

[Details to be provided]