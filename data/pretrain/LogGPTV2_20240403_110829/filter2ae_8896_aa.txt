## Workshop 学习

本文主要介绍了如何利用CodeQL进行Java代码的安全分析，特别是针对Apache Struts框架中的反序列化漏洞（CVE-2017-9805）进行数据流分析。我们将探讨以下内容：
- 如何查找函数调用
- 如何查找属性使用
- 如何进行数据流分析
- 寻找fastjson jndi反序列化链

### 背景

在Apache Struts中，存在一个已知的反序列化漏洞（[CVE-2017-9805](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9805)），该漏洞是由于用户控制的输入直接传递给`XStream.fromXML`方法导致的。本Workshop将通过CodeQL的数据流分析功能来识别此类漏洞。

### 数据流分析概述

在Struts框架中，`ContentTypeHandler`接口定义了一个`toObject(Reader in, Object target)`方法，用于根据请求的内容类型处理请求。这里的`in`参数完全由用户控制，可以视为一个数据源（source）。另一方面，`com.thoughtworks.xstream.XStream.fromXML`方法存在反序列化问题，可以视为一个数据汇点（sink）。我们的目标是从`toObject`方法的`in`参数到`fromXML`方法的参数之间是否存在一条路径。

### 方法查询

#### 根据方法名查询

```ql
import java
from Method method
where method.hasName("toObject")
select method, method.getDeclaringType()
```

这段代码用于查找所有名为`toObject`的方法及其所属类。

#### 根据方法名和类名查询

```ql
import java
from Method method
where method.hasName("fromXML") and 
      method.getDeclaringType().hasQualifiedName("com.thoughtworks.xstream", "XStream")
select method
```

这段代码用于查找特定类`XStream`中名为`fromXML`的方法。

#### 根据方法名和接口名查询

```ql
import java
from Method method
where method.hasName("toObject") and 
      method.getDeclaringType().getAnAncestor().hasQualifiedName("org.apache.struts2.rest.handler", "ContentTypeHandler")
select method
```

这段代码用于查找实现`ContentTypeHandler`接口的所有子类中名为`toObject`的方法。

### 方法访问查询

为了找到方法的实际调用位置，我们可以使用`MethodAccess`：

```ql
import java
from MethodAccess call, Method method
where method.hasName("toObject") and 
      method.getDeclaringType().getAnAncestor().hasQualifiedName("org.apache.struts2.rest.handler", "ContentTypeHandler") and 
      call.getMethod() = method
select call
```

这段代码用于查找所有对`toObject`方法的调用。

### 获取方法参数和方法访问参数

- **获取方法参数**:

  ```ql
  import java
  from MethodAccess call, Method method
  where method.hasName("toObject") and 
        method.getDeclaringType().getAnAncestor().hasQualifiedName("org.apache.struts2.rest.handler", "ContentTypeHandler") and 
        call.getMethod() = method
  select method.getParameter(0)
  ```

- **获取方法访问参数**:

  ```ql
  import java
  from MethodAccess call, Method method
  where method.hasName("toObject") and 
        method.getDeclaringType().getAnAncestor().hasQualifiedName("org.apache.struts2.rest.handler", "ContentTypeHandler") and 
        call.getMethod() = method
  select call.getArgument(0)
  ```

### 数据流分析

为了从源到汇点进行数据流分析，我们需要继承`DataFlow::Configuration`类，并重载`isSource`和`isSink`方法：

```ql
import java
import semmle.code.java.dataflow.DataFlow

class StrutsUnsafeDeserializationConfig extends DataFlow::Configuration {
  StrutsUnsafeDeserializationConfig() { this = "StrutsUnsafeDeserializationConfig" }

  override predicate isSource(DataFlow::Node source) {
    exists(Method m |
      m.hasName("toObject") and 
      m.getDeclaringType().getAnAncestor().hasQualifiedName("org.apache.struts2.rest.handler", "ContentTypeHandler") and 
      source.asParameter() = m.getParameter(0)
    )
  }

  override predicate isSink(DataFlow::Node sink) {
    exists(Method m |
      m.hasName("fromXML") and 
      m.getDeclaringType().hasQualifiedName("com.thoughtworks.xstream", "XStream") and 
      sink.asExpr() = m.getAnArgument()
    )
  }
}
```

通过上述配置，我们可以检查从`toObject`方法的`in`参数到`fromXML`方法的参数之间的数据流路径。

以上就是如何使用CodeQL进行数据流分析以发现潜在的反序列化漏洞的完整过程。