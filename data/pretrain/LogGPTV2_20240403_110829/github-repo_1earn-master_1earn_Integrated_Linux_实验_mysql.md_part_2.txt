```bash
default_table_type = InnoDB
# 当创建新表时作为默认使用的表类型, 如果在创建表示没有特别执行表类型, 将会使用此值
default-time-zone = system
# 服务器时区
character-set-server = utf8
#server 级别字符集
default-storage-engine = InnoDB
# 默认存储引擎
```
### tmp && heap settings 相关选项
```bash
tmp_table_size = 512M
# 临时表的最大大小，如果超过该值，则结果放到磁盘中, 此限制是针对单个表的, 而不是总和.
max_heap_table_size = 512M
# 独立的内存表所允许的最大容量. 此选项为了防止意外创建一个超大的内存表导致永尽所有的内存资源.
```
### log settings 相关选项
```bash
log-bin = mysql-bin
# 打开二进制日志功能. 在复制 (replication) 配置中, 作为 MASTER 主服务器必须打开此项. 如果你需要从你最后的备份中做基于时间点的恢复, 你也同样需要二进制日志. 这些路径相对于 datadir
log_slave_updates = 1
# 表示 slave 将复制事件写进自己的二进制日志
log-bin-index = mysql-bin.index
# 二进制的索引文件名
relay-log = relay-log
# 定义 relay_log 的位置和名称，如果值为空，则默认位置在数据文件的目录，文件名为 host_name-relay-bin.nnnnnn（By default, relay log file names have the form host_name-relay-bin.nnnnnn in the data directory）；
relay_log_index = relay-log.index
#relay-log 的索引文件名
log-warnings = 1
# 将警告打印输出到错误 log 文件. 如果你对于 MySQL 有任何问题，你应该打开警告 log 并且仔细审查错误日志, 查出可能的原因.
log-error =  /usr/local/mysql/log/mysql.err
# 错误日志路径
log_output = FILE
# 参数 log_output 指定了慢查询输出的格式，默认为 FILE，你可以将它设为 TABLE，然后就可以查询 mysql 架构下的 slow_log 表了
log_slow_queries
# 指定是否开启慢查询日志(该参数要被 slow_query_log 取代，做兼容性保留)
slow_query_log = 1
# 指定是否开启慢查询日志. 慢查询是指消耗了比 “long_query_time” 定义的更多时间的查询. 如果 log_long_format 被打开, 那些没有使用索引的查询也会被记录. 如果你经常增加新查询到已有的系统内的话. 一般来说这是一个好主意,
long-query-time = 1
# 设定慢查询的阀值，超出次设定值的 SQL 即被记录到慢查询日志，缺省值为 10s. 所有的使用了比这个时间 (以秒为单位) 更多的查询会被认为是慢速查询. 不要在这里使用”1″, 否则会导致所有的查询, 甚至非常快的查询页被记录下来(由于 MySQL 目前时间的精确度只能达到秒的级别).
log_long_format
# 在慢速日志中记录更多的信息. 一般此项最好打开，打开此项会记录使得那些没有使用索引的查询也被作为到慢速查询附加到慢速日志里
slow_query_log_file =  /usr/local/mysql/log/slow.log
# 指定慢日志文件存放位置，可以为空，系统会给一个缺省的文件 host_name-slow.log
log-queries-not-using-indexes
# 如果运行的 SQL 语句没有使用索引，则 mysql 数据库同样会将这条 SQL 语句记录到慢查询日志文件中。
min_examined_row_limit=1000    
# 记录那些由于查找了多余 1000 次而引发的慢查询
long-slow-admin-statements    
# 记录那些慢的 optimize table，analyze table 和 alter table 语句
log-slow-slave-statements
# 记录由 Slave 所产生的慢查询
general_log = 1
# 将所有到达 MySQL Server 的 SQL 语句记录下来, 默认关闭
general_log_file =  /usr/local/mysql/log/mysql.log
#general_log 路径
max_binlog_size = 1G
# 如果二进制日志写入的内容超出给定值，日志就会发生滚动。你不能将该变量设置为大于 1GB 或小于 4096 字节。 默认值是 1GB。如果你正使用大的事务，二进制日志还会超过 max_binlog_size
max_relay_log_size = 1G
# 标记 relaylog 允许的最大值，如果该值为 0，则默认值为 max_binlog_size(1G)；如果不为 0，则 max_relay_log_size 则为最大的 relay_log 文件大小；
relay-log-purge = 1
# 是否自动清空不再需要中继日志时。默认值为 1(启用)
expire_logs_days = 30
# 超过 30 天的 binlog 删除
binlog_cache_size = 1M
# 在一个事务中 binlog 为了记录 SQL 状态所持有的 cache 大小, 如果你经常使用大的, 多声明的事务, 你可以增加此值来获取更大的性能. 所有从事务来的状态都将被缓冲在 binlog 缓冲中然后在提交后一次性写入到 binlog 中, 如果事务比此值大, 会使用磁盘上的临时文件来替代. 此缓冲在每个连接的事务第一次更新状态时被创建. session 级别
replicate-wild-ignore-table = mysql.%
# 复制时忽略数据库及表
slave_skip_errors=all
# 定义复制过程中从服务器可以自动跳过的错误号，当复制过程中遇到定义的错误号，就可以自动跳过，直接执行后面的 SQL 语句。
#slave_skip_errors 选项有四个可用值，分别为：off，all，ErorCode，ddl_exist_errors。
# 默认情况下该参数值是 off，我们可以列出具体的 error code，也可以选择 all，mysql5.6 及 MySQL Cluster NDB 7.3 以及后续版本增加了参数 ddl_exist_errors，该参数包含一系列 error code（1007,1008,1050,1051,1054,1060,1061,1068,1094,1146）
# 一些 error code 代表的错误如下：
# 1007：数据库已存在，创建数据库失败
# 1008：数据库不存在，删除数据库失败
# 1050：数据表已存在，创建数据表失败
# 1051：数据表不存在，删除数据表失败
# 1054：字段不存在，或程序文件跟数据库有冲突
# 1060：字段重复，导致无法插入
# 1061：重复键名
# 1068：定义了多个主键
# 1094：位置线程 ID
# 1146：数据表缺失，请恢复数据库
# 1053：复制过程中主服务器宕机
# 1062：主键冲突 Duplicate entry '%s' for key %d
```
### MyISAM 相关选项
```bash
key_buffer_size = 256M
# 指定用于索引的缓冲区大小，增加它可得到更好的索引处理性能。如果是以 InnoDB 引擎为主的 DB，专用于 MyISAM 引擎的 key_buffer_size 可以设置较小，8MB 已足够  如果是以 MyISAM 引擎为主，可设置较大，但不能超过 4G. 在这里，强烈建议不使用 MyISAM 引擎，默认都是用 InnoDB 引擎. 注意：该参数值设置的过大反而会是服务器整体效率降低！
sort_buffer_size = 2M
# 查询排序时所能使用的缓冲区大小。排序缓冲被用来处理类似 ORDER BY 以及 GROUP BY 队列所引起的排序. 一个用来替代的基于磁盘的合并分类会被使用. 查看 “Sort_merge_passes” 状态变量. 在排序发生时由每个线程分配 注意：该参数对应的分配内存是每连接独占！如果有 100 个连接，那么实际分配的总共排序缓冲区大小为 100 × 6 ＝600MB, 所以, 对于内存在 4GB 左右的服务器推荐设置为 6-8M。