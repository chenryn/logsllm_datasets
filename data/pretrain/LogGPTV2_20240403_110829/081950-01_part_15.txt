40 msg = Parser().parsestr(msg_content)
41
42
43 def decode_str(s):
44 value, charset = decode_header(s)[0]
45 if charset:
46 value = value.decode(charset)
47 return value
48
49
50 print("解析获取到的邮件内容如下：\n----------begin------------")
51 # 打印发件人信息
52 print(
53
f"{ decode_str(parseaddr(msg.get('From',''))[0])}"
54 )
55 # 打印收件人信息
56 print(
57
106
第2章 基础运维
f"{ decode_str(parseaddr(msg.get('To',''))[0])}"
58 )
59 # 打印主题信息
60 print(decode_str(msg["Subject"]))
61 # 打印第一条正文信息
62 part0 = msg.get_payload()[0]
63 content = part0.get_payload(decode=True)
64 print(content.decode(part0.get_content_charset())) #
65 print("----------end------------")
66
67 # 可以根据邮件索引号直接从服务器删除邮件
68 # server.dele(index)
69 # 关闭连接:
70 server.quit()
在代码的第64行，我们使用part0.get_content_charset()编码来解码邮件正文。执行上面的
代码得到如下结果。
+OK QQMail POP3 Server v1.0 Service Ready(QQMail v2.0)
邮件数量: 6个. 大小: 0.11MB
解析获取到的邮件内容如下：
----------begin------------
郑征
我自己的邮箱
这是主题：PYTHON POP测试
这是正文，你好啊，POP
------------------
Best regards!
----------end------------
对应的邮件截图如图2.27所示。
图2.27 运行结果
2.7.3 将报警信息实时发送至邮箱
在日常运维中经常用到监控，其常用的是短信报警、邮件报警等。相比短信报警，邮件报
警是一个非常低成本的解决方法，无须付给运营商短信费用，一条短信有字数限制，而邮件无
此限制，因此邮件报警可以看到更多警告信息。
107
Python自动化运维快速入门
下面使用Python发送邮件的功能来实现报警信息实时发送至邮箱，具体需求说明如下。
（1）文本文件 txt 约定格式：第一行为收件人列表，以逗号分隔；第二行为主题，第三
行至最后一行为正文内容，最后一行如果是文件，则作为附件发送，支持多个附件，以逗号分
隔。
下面是一个完整的例子。
PI:EMAIL,PI:EMAIL
xxx程序报警
报警信息…..
…..
……
/home/log/xxx.log,/tmp/yyy.log
（2）持续监控一个目录 A 下的 txt 文件，如果有新增或修改，则读取文本中的内容并发
送邮件。
（3）有报警需求的程序可生成（1）中格式的文本文件并传送至目录 A 即可。任意程序
基本都可以实现本步骤。
现在我们就使用Python来实现上述需求，涉及的Python知识点有：文件编码、读文件操
作、watchdog模块应用及发送邮件。
【示例2-32】首先编写一个发送邮件的类，其功能是解析文本文件内容并发送邮件。
文件txt2mail.py 内容如下：
1 # -*- coding: utf-8 -*-
2 import smtplib
3 import chardet
4 import codecs
5 import os
6 from email.mime.text import MIMEText
7 from email.header import Header
8 from email.mime.multipart import MIMEMultipart
9
10 # 第三方 SMTP 服务
11 class txtMail(object):
12
13 def __init__(self, host=None, auth_user=None, auth_password=None):
14 self.host = "smtp.163.com" if host is None else host # 设置发送邮件服务
器
15 self.auth_user = "xxxxx" if auth_user is None else auth_user # 上线时
使用专用报警账户的用户名
16 self.auth_password = (
17 "*******" if auth_password is None else auth_password
18 ) # 上线时使用专用报警账户的密码
19 self.sender = "PI:EMAIL"
20
21 def send_mail(self, subject, msg_str, recipient_list,
attachment_list=None):
22 message = MIMEMultipart()
108
第2章 基础运维
23 message["From"] = self.sender
24 message["To"] = Header(";".join(recipient_list), "utf-8")
25 message["Subject"] = Header(subject, "utf-8")
26 message.attach(MIMEText(msg_str, "plain", "utf-8"))
27
28 # 如果有附件，则添加附件
29 if attachment_list:
30 for att in attachment_list:
31 attachment = MIMEText(open(att, "rb").read(), "base64", "utf-8")
32 attachment["Content-Type"] = "application/octet-stream"
33 # 这里的filename可以任意写，写什么名字，邮件中显示什么名字
34 # attname=att.split("/")[-1]
35 filename = os.path.basename(att)
36 # attm["Content-Disposition"] = 'attachment;
filename=%s'%attname
37 attachment.add_header(
38 "Content-Disposition",
39 "attachment",
40 filename=("utf-8", "", filename),
41 )
42 message.attach(attachment)
43
44 smtpObj = smtplib.SMTP_SSL()
45 smtpObj.connect(self.host, smtplib.SMTP_SSL_PORT)
46 smtpObj.login(self.auth_user, self.auth_password)
47 smtpObj.sendmail(self.sender, recipient_list, message.as_string())
48 smtpObj.quit()
49 print("邮件发送成功")
50
51 def guess_chardet(self, filename):
52 """
53 :param filename: 传入一个文本文件
54 :return:返回文本文件的编码格式
55 """
56 encoding = None
57 try:
58 # 由于本需求所解析的文本文件都不大，可以一次性读入内存
59 # 如果是大文件，则读取固定字节数
60 raw = open(filename, "rb").read()
61 if raw.startswith(codecs.BOM_UTF8): # 处理 UTF-8 with BOM
62 encoding = "utf-8-sig"
63 else:
64 result = chardet.detect(raw)
65 encoding = result["encoding"]
66 except:
67 pass
68 return encoding
69
70 def txt_send_mail(self, filename):
71 '''
72 :param filename:
73 :return:
74 将指定格式的txt文件发送至邮件，txt文件样例如下
75 PI:EMAIL,someone2@xxx.com...#收件人，逗号分隔
76 xxx程序报警 #主题
109
Python自动化运维快速入门
77 程序xxx步骤yyy执行报错，错误代码zzz #正文
78 详细信息请看附件 #正文
79 file1,file2 #附件，逗号分隔，非必须
80 '''
81
82 with open(filename, encoding=self.guess_chardet(filename)) as f:
83 lines = f.readlines()
84 recipient_list = lines[0].strip().split(",")
85 subject = lines[1].strip()
86 msg_str = "".join(lines[2:])
87 attachment_list = []
88 for file in lines[-1].strip().split(","):
89 if os.path.isfile(file):
90 attachment_list.append(file)
91 #如果没有附件，则为None
92 if attachment_list == []:
93 attachment_list = None
94 self.send_mail(
95 subject=subject,
96 msg_str=msg_str,
97 recipient_list=recipient_list,
98 attachment_list=attachment_list,
99 )
100
101
102 if __name__ == "__main__":
103 mymail = txtMail()
104 mymail.txt_send_mail(filename="./test.txt")
上述代码实现了自定义的邮件类，功能是解析指定格式的文本文件并发送邮件，支持多个
附件上传。
接下来我们实现监控目录的功能，使用前面学习的watchdog模块。
文件watchDir.py内容如下：
1 # -*- coding: utf-8 -*-
2
3 import time
4 from watchdog.observers import Observer
5 from watchdog.events import FileSystemEventHandler
6 from txt2mail import txtMail
7
8
9 class FileEventHandler(FileSystemEventHandler):
10
11 def __init__(self):
12 FileSystemEventHandler.__init__(self)
13
14 def on_created(self, event):
15 if event.is_directory:
16 print("directory created:{0}".format(event.src_path))
17 else:
18 print("file created:{0}".format(event.src_path))
110
第2章 基础运维
19 if event.src_path.endswith(".txt"):
20 time.sleep（1）
21 mail = txtMail()
22 try:
23 mail.txt_send_mail(filename=event.src_path)
24 except:
25 print("文本文件格式不正确")
26
27 def on_modified(self, event):
28 if event.is_directory:
29 print("directory modified:{0}".format(event.src_path))
30 else:
31 print("file modified:{0}".format(event.src_path))
32 if event.src_path.endswith(".txt"):
33 time.sleep（1）
34 mail = txtMail()
35 try:
36 mail.txt_send_mail(filename=event.src_path)
37 except:
38 print("文本文件格式不正确")
39
40
41 if __name__ == "__main__":
42 observer = Observer()
43 event_handler = FileEventHandler()
44 dir = "./"
45 observer.schedule(event_handler, dir, False)
46 print(f"当前监控的目录：{dir}")
47 observer.start()
48 observer.join()
watchdir使用watchdog模块监控指定目录是否有后缀为txt的文本文件，如果有新增或修
改的文本文件，则调用txt2mail中的txtmail类的txt_send_mail方法；如果发送不成功则表明
文本文件格式错误，捕捉异常是为了避免程序崩溃退出。下面我们运行测试一下。
执行python watchdir.py后的结果如图2.28所示。
图2.28 运行结果
在./目录下创建一个test.txt文件，文件内容如图2.29所示。
保存后看到运行结果如图2.30所示。
图2.29 运行结果 图2.30 运行结果
登录邮件可看到如图2.31所示的收件信息。
111
Python自动化运维快速入门
图2.31 实时邮件发送
以上基本满足我们的日常监控需求，实际的生产环境中大家完全可以依据具体需求具体分
析，这个例子也许不是最好的解决方案，但希望能起到抛砖引玉的作用。
2.8
微信提醒
随着移动互联网的普及，微信几乎是人人必用的产品，使用程序来处理微信消息具有很广
泛的应用场景。本节介绍如何使用Python来处理微信消息，以及如何将警告信息发送到微信。
2.8.1 处理微信消息
Python处理微信消息的第三方模块主要有wxpy、itchat等。wxpy 在 itchat 的基础上通过