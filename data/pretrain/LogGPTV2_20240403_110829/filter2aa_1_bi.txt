   1
     2
   3
    This HTML places the form in an invisible iframe to hide it from the user’s view. Remember from
     Chapter 8
    that an
     iframe
    is an HTML element that embeds another document within the current HTML document. This particular iframe’s style is set to
     display:none
    , meaning it won’t be displayed on the page, making the form invisible
     1
    . Then, JavaScript code between the script tags
     3
    will submit the form with the ID
     csrf-form
     2
    without the need for user interaction. The code fetches the HTML form by referring to it by its ID,
     csrf-form
    . Then the code submits the form by calling the
     submit()
    method on it. With this new attack page, any victim who visits the malicious site will be forced to tweet.
    这个HTML代码将表单嵌入一个不可见的iframe中，以隐藏它，不让用户看到。你可能还记得第8章讲到过，iframe是一种HTML元素，用于在当前HTML文档中嵌入另一个文档。这个特定的iframe样式设置为display:none，意味着它不会在页面上显示，使得表单不可见。然后，script标签之间的JavaScript代码将在不需要用户交互的情况下提交ID为csrf-form的表单。代码通过引用ID csrf-form来获取HTML表单，然后通过调用submit()方法提交表单。有了这个新的攻击页面，任何访问恶意网站的受害者都将被迫发推文。
    What attackers can actually accomplish with a real CSRF vulnerability depends on where the vulnerability is found. For example, let’s say a request that empties a user’s online shopping cart has a CSRF vulnerability. When exploited in the wild, this vulnerability can at most cause annoyance to the site users. It doesn’t have the potential to cause any major financial harm or identity theft.
    攻击者能利用真实的 CSRF 漏洞实际上取决于漏洞的位置。例如，假设清空用户在线购物车的请求存在 CSRF 漏洞。当在野外利用此漏洞时，它最多只能对网站用户造成烦恼，没有潜在的造成任何重大的财务损失或身份盗窃。
    On the other hand, some CSRFs can lead to much bigger issues. If a CSRF vulnerability is present on requests used to change a user’s password, for example, an attacker can change other users’ passwords against their will and take over their entire accounts! And when a CSRF appears in functionalities that handle user finances, like account balance transfers, attackers can potentially cause unauthorized balance transfers out of the victim’s bank account. You can also use CSRFs to trigger injection vulnerabilities such as XSS and command injections.
    另一方面，有些 CSRF 可能会导致更大的问题。例如，如果请求中存在 CSRF 漏洞用于更改用户密码，攻击者可以未经其同意更改其他用户的密码并接管其整个帐户！而当 CSRF 出现在处理用户财务的功能中，例如帐户余额转账时，攻击者可能会导致未经授权的余额转账从受害者的银行账户中进行。您还可以使用 CSRF 触发 XSS 和命令注入等注入漏洞。
    Prevention
    The best way to prevent CSRFs is to use
     CSRF tokens
    . Applications can embed these random and unpredictable strings in every form on their website, and browsers will send this string along with every state-changing request. When the request reaches the server, the server can validate the token to make sure the request indeed originated from its website. This CSRF token should be unique for each session and/or HTML form so attackers can’t guess the token’s value and embed it on their websites. Tokens should have sufficient entropy so that they cannot be deduced by analyzing tokens across sessions.
    防止CSRF的最佳方法是使用CSRF令牌。应用程序可以将这些随机和不可预测的字符串嵌入其网站上的每个表单中，浏览器将随着每个状态更改请求发送该字符串。当请求到达服务器时，服务器可以验证令牌，以确保该请求确实源于其网站。这个CSRF令牌应该对于每个会话和/或HTML表单都是唯一的，这样攻击者就无法猜测令牌的值并嵌入它们的网站上。令牌应具有足够的熵，以便不能通过分析跨会话的令牌来推断出它们的价值。
    The server generates random CSRF tokens and embeds correct CSRF tokens in forms on the legitimate site. Notice the new input field used to specify a CSRF token:
    服务器会生成随机的CSRF令牌，并将正确的CSRF令牌嵌入到合法网站的表单中。请注意，新的输入字段用于指定CSRF令牌：
    Twitter’s server can require that the browser send the correct value of the
     csrf_token
    POST parameter along with the request for it to be successful. If the value of
     csrf_token
    is missing or incorrect, the server should see the request as fake and reject it.
    Twitter的服务器可能会要求浏览器在请求时发送正确的csrf_token POST参数值才能成功。如果csrf_token的值缺失或不正确，服务器应该将请求视为伪造并拒绝它。
    Here is the resulting POST request:
    这是产生的POST请求：
POST /send_a_tweet
Host: twitter.com
Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE
(POST request body)
tweet_content="Hello world!"&csrf_token=871caef0757a4ac9691aceb9aad8b65b
    Many frameworks have CSRF tokens built in, so often you can simply use your framework’s implementation.
    许多框架都内置了CSRF令牌，因此通常您可以直接使用框架的实现。
    Besides implementing CSRF tokens to ensure the authenticity of requests, another way of protecting against CSRF is with
     SameSite
    cookies. The
     Set-Cookie
    header allows you to use several optional flags to protect your users’ cookies, one of which is the
     SameSite
    flag. When the
     SameSite
    flag on a cookie is set to
     Strict
    , the client’s browser won’t send the cookie during cross-site requests:
    除了实现CSRF令牌以确保请求的真实性，另一种防止CSRF的方法是使用SameSite cookie。 Set-Cookie标头允许您使用几个可选标志来保护用户的cookie，其中之一是SameSite标志。当同站点标志的cookie被设置为“严格”时，客户端的浏览器不会在跨站点请求期间发送该cookie。
Set-Cookie: PHPSESSID=UEhQU0VTU0lE; Max-Age=86400; Secure; HttpOnly; SameSite=Strict
    Another possible setting for the
     SameSite
    flag is
     Lax
    , which tells the client’s browser to send a cookie only in requests that cause top-level navigation (when users actively click a link and navigate to the site). This setting ensures that users still have access to the resources on your site if the cross-site request is intentional. For example, if you navigate to Facebook from
    a third-party site, your Facebook logins will be sent. But if a third-party site initiates a POST request to Facebook or tries to embed the contents of Facebook within an iframe, cookies won’t be sent:
    另一种可能的SameSite标志设置为Lax，告诉客户端浏览器仅在引起顶级导航的请求中发送cookie（当用户积极点击链接并导航到网站时）。此设置确保用户仍然可以访问您网站上的资源，如果跨站请求是有意的。例如，如果您从第三方网站导航到Facebook，则会发送您的Facebook登录信息。但是，如果第三方网站发起POST请求到Facebook或尝试将Facebook内容嵌入iframe中，则不会发送cookie。
Set-Cookie: PHPSESSID=UEhQU0VTU0lE; Max-Age=86400; Secure; HttpOnly; SameSite=Lax
    Specifying the
     SameSite
    attribute is good protection against CSRF because both the
     Strict
    and
     Lax
    settings will prevent browsers from sending cookies on cross-site form POST or AJAX requests, and within iframes and image tags. This renders the classic CSRF hidden-form attack useless.
    指定SameSite属性是对抗CSRF的良好保护，因为严格（Strict）和宽松（Lax）设置都可以防止浏览器发送跨站表单POST或AJAX请求、iframe和图像标签中的cookie。这使得经典的CSRF隐藏表单攻击无效。
    In 2020, Chrome and a few other browsers made
     SameSite=Lax
    the default cookie setting if it’s not explicitly set by the web application. Therefore, even if a web application doesn’t implement CSRF protection, attackers won’t be able to attack a victim who uses Chrome with POST CSRF. The efficacy of a classic CSRF attack will likely be greatly reduced, since Chrome has the largest web browser market share. On Firefox, the
     SameSite
    default setting is a feature that needs to be enabled. You can enable it by going to
     about:config
    and setting
     network.cookie.sameSite.laxByDefault
    to
     true
    .
    在2020年，Chrome和少数其他浏览器将SameSite=Lax作为默认的Cookie设置，如果它未被 Web应用程序明确设置。因此，即使Web应用程序不实现CSRF保护，攻击者也无法攻击使用Chrome进行POST CSRF的受害者。经典 CSRF 攻击的功效可能会大大降低，因为 Chrome 拥有最大的网络浏览器市场份额。在 Firefox 上，SameSite 默认设置是需要启用的功能。您可以通过转到 about：config 并将 network.cookie.sameSite.laxByDefault 设置为 true 来启用它。
    Even when browsers adopt the
     SameSite-
    by-default policy, CSRFs are still possible under some conditions. First, if the site allows state-changing requests with the GET HTTP method, third-party sites can attack users by creating CSRF with a GET request. For example, if the site allows you to change a password with a GET request, you could post a link like this to trick users into clicking it:
     https://email.example.com/password_change?new_password=abc123
    .
    即使浏览器采用了SameSite-by-default政策，在某些情况下仍然可能存在CSRF攻击。首先，如果网站允许使用GET HTTP方法进行状态更改请求，第三方网站就可以通过GET请求创建CSRF攻击来攻击用户。例如，如果网站允许您使用GET请求更改密码，您可以发布此链接来欺骗用户单击它:https://email.example.com/password_change?new_password=abc123.
    Since clicking this link will cause top-level navigation, the user’s session cookies will be included in the GET request, and the CSRF attack will succeed:
    由于单击此链接将导致顶层导航，用户的会话 cookie 将包含在 GET 请求中，从而使 CSRF 攻击成功。
GET /password_change?new_password=abc123
Host: email.example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE
    In another scenario, sites manually set the
     SameSite
    attribute of a cookie to
     None
    . Some web applications have features that require third-party sites to send cross-site authenticated requests. In that case, you might explicitly set
     SameSite
    on a session cookie to
     None
    , allowing the sending of the cookie across origins, so traditional CSRF attacks would still work. Finally, if the victim is using a browser that doesn’t set the
     SameSite
    attribute to
     Lax
    by default (including Firefox, Internet Explorer, and Safari), traditional CSRF attacks will still work if the target application doesn’t implement diligent CSRF protection.
    在另一种情况下，站点手动设置了 SameSite 属性为 None 的 cookie。一些 Web 应用程序具有需要第三方站点发送跨站身份验证请求的功能。在这种情况下，您可以明确地将 SameSite 设置为 None 并在会话 cookie 上，允许跨源发送 cookie，因此传统 CSRF 攻击仍然有效。最后，如果受害者使用的浏览器不会默认将 SameSite 属性设置为 Lax（包括 Firefox、Internet Explorer 和 Safari），则如果目标应用程序没有实施认真的 CSRF 保护，则传统的 CSRF 攻击仍然有效。
    We’ll explore other ways of bypassing CSRF protection later in this chapter. For now, just remember: when websites don’t implement
     SameSite
    cookies or other CSRF protection for every state-changing request, the request becomes vulnerable to CSRF if the user is not using a
     SameSite
    -by-default browser. CSRF protection is still the responsibility of the website despite the adoption of
     SameSite
    -by-default.
    我们将在本章后面探索绕过CSRF保护的其他方法。目前，只需记住：当网站对于每个状态改变请求都没有实施SameSite cookie或其他CSRF保护时，如果用户没有使用SameSite-by-default浏览器，该请求将变得容易受到CSRF攻击。尽管采用SameSite-by-default，但CSRF保护仍然是网站的责任。
    Hunting for CSRFs
    CSRFs are common and easy to exploit. To look for them, start by discovering state-changing requests that aren’t shielded by CSRF protections. Here’s a three-step process for doing so. Remember that because browsers like Chrome offer automatic CSRF protection, you need to test with another browser, such as Firefox.
    CSRF攻击常见且易受攻击。要查找它们，首先要发现没有经过CSRF保护的状态更改请求。以下是三个步骤的过程。请记住，由于像Chrome这样的浏览器提供自动CSRF保护，因此您需要使用其他浏览器（例如Firefox）进行测试。
    Step 1: Spot State-Changing Actions
    Actions that alter the users’ data are called
     state-changing actions
    . For example, sending tweets and modifying user settings are both state-changing. The first step of spotting CSRFs is to log in to your target site and browse through it in search of any activity that alters data.
    改变用户数据的操作称为状态更改操作。例如，发送推文和修改用户设置都是状态更改操作。发现 CSRF 的第一步是登录到目标网站并浏览其中寻找任何更改数据的活动。
    For example, let’s say you’re testing
     email.example.com
    , a subdomain of
     example.com
    that handles email. Go through all the app’s functionalities, clicking all the links. Intercept the generated requests with a proxy like Burp and write down their URL endpoints.
    例如，假设您正在测试 email.example.com，这是处理电子邮件的 example.com 子域。浏览所有应用程序的功能，点击所有链接。使用 Burp 等代理拦截生成的请求，并记录其 URL 端点。
    Record these endpoints one by one, in a list like the following, so you can revisit and test them later:
    请把这些端点逐个记录在下面的列表中，方便以后回顾和测试：
     State-changing requests on
       email.example.com
    在 email.example.com 上的状态更改请求
     Change password:
      email.example.com/password_change
      POST request
      "POST请求"
      Request parameters:
       new_password
      请求参数：新密码
     Send email:
      email.example.com/send_email
      POST request
      `POST请求`
      Request parameters:
       draft_id
      ,
       recipient_id
      请求参数：draft_id，接收者id
     Delete email:
      email.example.com/delete_email
      POST request
      发布请求
      Request parameters:
       email_id
      请求参数：电子邮件 ID
    Step 2: Look for a Lack of CSRF Protections
    Now visit these endpoints to test them for CSRFs. First, open up Burp Suite and start intercepting all the requests to your target site in the Proxy tab. Toggle the
     Intercept
    button until it reads
     Intercept is on
    (
     Figure 9-3
    ).
    现在访问这些端点以测试是否存在 CSRF。首先，在代理选项卡中打开 Burp Suite 并开始拦截所有指向目标站点的请求。切换到截获按钮并将其调整为“截获已开启”(见图9-3)。
       Figure 9-3
      : Set to Intercept is on to capture your browser’s traffic. Click the
        Forward
      button to forward the current request to the server.
      图9-3：开启截取功能以捕获浏览器流量。点击前进按钮将当前请求发送至服务器。
    Let Burp run in the background to record other traffic related to your target site while you’re actively hunting for CSRFs. Keep clicking the
     Forward
    button until you encounter the request associated with the state-changing action. For example, let’s say you’re testing whether the password-change function you discovered is vulnerable to CSRFs. You’ve intercepted the request in your Burp proxy: