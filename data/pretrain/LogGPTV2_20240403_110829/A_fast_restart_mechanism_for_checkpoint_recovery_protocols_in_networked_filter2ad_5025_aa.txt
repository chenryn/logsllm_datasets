title:A fast restart mechanism for checkpoint/recovery protocols in networked
environments
author:Yawei Li and
Zhiling Lan
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
A Fast Restart Mechanism for Checkpoint/Recovery Protocols
in Networked Environments
Yawei Li and Zhiling Lan
Department ofComputer Science
Illinois Institute ofTechnology, IL 60626, USA
(liyawei, lan}@iit.edu
Abstract
Checkpoint/recovery has been studied extensively,
and various optimization techniques have been
presented for its improvement. Regardless of the
considerable research efforts,
little work has been
done on improving its restart latency. The time spent
on retrieving and loading the checkpoint image during
a recovery is non-trivial, especially in networked
environments. With the ever-increasing application
memory footprint and system failure rate,
is
becoming more ofan issue. In this paper, we present a
Fast REstart Mechanism called FREM It allows fast
restart of a failed process without requiring the
availability of
image. By
dynamically tracking the process data accesses after
each checkpoint, FREM masks restart
latency by
overlapping the computation of the resumed process
with the retrieval of its checkpoint image. We have
implemented FREM with the BLCR checkpointing tool
in Linux systems. Our experiments with the SPEC
benchmarks indicate that
it can effectively reduce
restart latency by 61.96% on average in networked
environments.
entire checkpoint
the
it
1. Introduction
in
fault
tolerance
networked
Checkpoint/recovery (C/R) has been widely used
for
computing
environments, such as parallel and distributed systems
It periodically stores a snapshot of the
[4, 9, 18].
running program, including CPU registers, signals, file
caches, and process address space, on stable storage
and uses it to restart execution in case of failure. A
networked system is generally composed of abundant
resources,
the
crashed program on an alternative resource from the
checkpoint image, rather than waiting for the repair of
such a
the failed resource. As a matter of fact,
remote-restart mechanism is
in Grid
in high performance
computing [24] as well as
computing [20].
thereby making it possible to restart
common
Existing research on C/R has mainly focused on
reducing checkpoint overhead, whereas little work has
the
image
image
restart
requires
checkpoint
been done on reducing its restart latency. Here, restart
latency refers to the time that elapses between the
initiation of the checkpoint
image retrieval and the
restart of the failed process. In the current C/R practice,
a
to be
completely available on the destination machine before
it can proceed. In networked environments where the
is accessed via interconnected
checkpoint
networks, restart
latency can be substantial. This is
especially problematic in the field of high performance
computing where applications typically are memory
demanding. Research has determined that the memory
footprint is a major contributor to the checkpoint image
size [7, 20]. Further, due to the ever-increasing system
size and complexity [4], failures occur more frequently
than before, thereby making restart latency a critical
concern in networked environments.
fields
various
including
operating
The recovery problem has been previously studied
in
systems,
databases, and internet services [1, 14, 15]. However,
existing solutions are either specific to particular
problem domains or hardly applicable to improve
checkpoint based restart. As mentioned earlier,
the
research
runtime
optimization of checkpointing, with little attention to
process recovery. Therefore, reducing restart latency
for general C/R protocols remains an open problem.
on C/R mainly
focuses
on
In this paper, we present FREM, a Fast REstart
to enhance general C/R protocols by
Mechanism,
concentrating on reducing restart
latency. The core
idea of FREM is to enable quick restart on a partial
checkpoint
image by recording the process data
accesses after each checkpoint. More specifically, at
runtime, through a user-transparent system support, it
tracks the memory access information of the process
(denoted as the touch set) following each checkpoint
within a specific time period (denoted as the tracking
window). At recovery time, rather than retrieving the
entire checkpoint
restart, FREM only
requires the touch set on the destination machine for
quick restart. The remainder of the checkpoint image is
then transferred after the process is restarted on the
destination machine. By doing so, FREM intends to
overlap application execution with the retrieval of the
image for
1-4244-2398-9/08/$20.00 ©2008 IEEE
217
DSN 2008: Li &Lan
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:19:10 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
checkpoint data which is not
thereby reducing restart latency.
immediately needed,
While the idea may be straightforward, the design
and implementation of FREM is challenging. The key
issues include how to accurately identify the touch set,
how to appropriately set the tracking window, and how
to effectively load the partial image on the destination
machine. To address these challenges, in this paper we
propose:
• A post-checkpoint tracking method for capturing
the touch set. Hardware and software complexities
in real systems introduce numerous complications to
the identification of the touch set. The proposed
method monitors the memory access pattern of the
process during the tracking window by considering
the underlying hardware and software features, and
records the precise access pattern as the touch set
along with the checkpoint image. More importantly,
such support is provided through a user-transparent
system implementation.
• A heuristic method for estimating the tracking
window. The tracking window, which determines
the size of the touch set, plays a crucial role in
FREM. The ideal scenario is such that the execution
time of the resumed process on the touch set exactly
matches
remaining
checkpoint
image. We present an upper bound
heuristic to estimate the window size, which intends
to make a balanced tradeoff between performance
and design simplicity.
time of
retrieval
the
the
• A revised page fault handling mechanism for
partial image loading. To restart the process with
its partial address space available, the kernel page
fault handler is modified to coordinate the regular
kernel paging mechanism with the special page fault
handling required by FREM.
We have implemented FREM with the BLCR [6]
checkpointing tool in Linux systems. Our experiments
with the SPEC CPU2006 benchmarks [21] show that
the average improvement achieved by FREM is
61.96% in terms of reducing restart latency. To the best
our knowledge, we are among the first
to exploit
runtime data access information to achieve fast process
restart
FREM
complements existing studies on checkpoint/restart by
enhancing the recovery process. As an example, FREM
can be integrated with MPICH-V [2] and LAM-MPI
[22]
high
performance computing [8].
fault management
environments.
networked
enhance
for
to
in
The remainder of this paper is organized as follows.
Section 2 discusses related work. Section 3 introduces
the main idea of FREM, followed by a description of
the detailed methods in Section 4. Section 5 presents
experimental
our
summarizes the paper and points out future directions.
Finally,
Section
results.
6
2. Related Work
The idea of fast restart is not new, and has been
studied in several
fields. For example, Baker and
Sullivan have discussed the use of a "recovery box" (a
protected area of non-volatile memory) in the Sprite
system to store crucial process state needed for fast
recovery [1]. In database systems, quickly resuming
transaction processing is the focus. For example, the
Oracle systems have used the "on-demand rollback"
technique to allow new transactions to execute while
the rollbacks are still being performed [14]. Recently,
more attention has been paid to fast recovery for
Internet services. A representative work is the ROC
project from Berkeley and Stanford [15]. It focuses on
providing a holistic solution for post-failure recovery
of Internet services by using fine-grained system
partitioning and recursive restart. Rao et al. have
proposed a class of hybrid protocols to maintain the
failure-free performance of sender-based protocols
while approaching the performance of receiver-based
protocols
FREM is
fundamentally different from these works in that
it
emphasizes the reduction ofrestart latency for general
C/R applications.
recovery
during
[19].
Existing studies on C/R mainly focus on checkpoint
optimization. One major direction is to determine an
optimal checkpoint frequency. Young has derived a
simple first order approximation of the optimal
checkpoint
interval, based on the assumption of
Poisson failure arrivals [26]. To allow failures during
checkpointing or recovery, Dali has proposed a higher
interval approximation model by extending
order
Young's work [3].
Vaidya has developed an
improved interval by differentiating checkpoint latency
and overhead [25]. Plank and Thomason have
investigated the optimal checkpoint interval for parallel
applications [18]. Additionally, there are numerous
papers on dynamic checkpoint scheduling, such as
aperiodic
cooperative
checkpointing [13]. The other major direction is to
reduce checkpoint overhead, especially the disk I/O
time. Latency hiding and memory exclusion are two
key techniques [16]. The studies in this category
include copy-on-write [9], diskless checkpointing [17],
and incremental checkpointing [5, 20]. Despite these
runtime optimizations, no dedicated attention is paid to
reducing
recovery.
Complementing the above studies on checkpoint
optimization, our proposed FREM emphasizes the
checkpointing
latency
during
restart
[10]
and
1-4244-2398-9/08/$20.00 ©2008 IEEE
218
DSN 2008: Li &Lan
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:19:10 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
i"
~o
checkpointing
I
I
I
I
I
I
I
IL __
I
I
I
I
I
I
I
t~
tracking
t:..
I ....•........•...........•..............................................•........•.............•...................'........•..........................................•....................•...........•...............................................•...•.-----~:
;;iIi1 iI......
1 i i
-----
••'
.•...•••••••.•..•.....•...••............
I
I
I
I
'tl +tw
next
checkp9int
address
Sf'.)8ce
I
I
I
I
I
I
I
. .
checkpoint
Im~ge
~.."••
t2'ULd
touch set
p~ges
~ touchset
~ descriptor
.
: ~
L __~
,
•
Figure 1. Main Idea of FREM
reduction of restart latency. Further,
FREM is applicable to general C/R protocols.
the principle of
There also exist several optimization techniques that
utilize memory paging mechanisms to achieve fast
process execution. For example, demand paging is a
well-known technique, which allows a process to begin
execution with part of its pages available in the
physical memory [23]. Unlike demand paging, FREM
selectively restores the pages that will be immediately
needed for fast recovery by tracking the pages used
after the checkpoint.
Similarly in the field of process migration, paging
mechanisms are also incorporated to achieve fast
process restart on the destination machine [11]. While
these migration methods
optimally
transferring process state between the source and
destination processes, FREM targets reducing restart
latency and does not require a live copy ofthe process
on the source machine.
focus
on
3. Main Idea
The main idea of FREM is illustrated in Figure 1.
There are two phases in FREM: (1) the post-checkpoint
tracking phase at runtime and (2) the fast restarting
phase during recovery.
The post-checkpoint tracking phase is composed of
two steps:
• At time to the checkpointing tool is invoked to dump
the process state onto stable storage, just as any
regular checkpoint mechanism does.
• Upon completion of the checkpoint at time tJ, FREM
starts to track the page-level memory accesses of the
process between t} and (t) +tw) where tw is the
tracking window size. The memory
access
information, called "the touch set" in this paper, is
formally defined as the intersection of the process
address space saved in a checkpoint and its working
set during the following tracking window. The goal
of this step is to capture the touch set and store its
information remotely on stable storage along with
the regular checkpoint
the end of the
tracking window. FREM takes advantage of the
paging mechanism supported by modem computer
systems to monitor the page access: it first clears the
access bit of each page table entry (PTE) at t}, which
will be set by the CPU when the corresponding page
is accessed; at
the end of the tracking window,
FREM collects the pages touched by the process by
scanning the status of the access bit of each PTE.
The touch set information consists of a set of page
address ranges accessed by the process during the
image at
1-4244-2398-9/08/$20.00 ©2008 IEEE
219
DSN 2008: Li &Lan
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:19:10 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
tracking window (denoted
descriptor).
During recovery, FREM takes four steps to achieve
touch
the
set
as
fast restart on the destination machine:
• At recovery time t3, FREM retrieves the touch set
descriptor.
• At time t4, based on the descriptor, FREM retrieves
the touch set as well as other necessary process state,
such as register contents and process signals from
the checkpoint image.
the process
• Upon completion of retrieving the touch set at time
restarted on the touch set.
t5,
Meanwhile,
to
simultaneously retrieve the remaining pages from the
image file.
FREM forks
another
thread
is
• At
time t6, when all
the remaining pages are
retrieved and loaded on the destination machine, the
process continues running on the complete address
space.
The rationale of FREM is that the touch set captures
the precise data access of the process during process
recovery. We exploit this feature to optimize the restart
procedure by overlapping the computation with the
communication and disk I/O as shown in Figure 1
(Step 3a -3b). The effectiveness of FREM requires that
the process only access a relatively small portion of its
address space within a given time window after a
checkpoint. This assumption is justified by two facts in
practice:
(1) many applications demonstrate good
temporal locality in data accesses, and (2) applications
using dynamic memory allocation may have a large
amount of unused or dead data in their checkpoint
image files [16].
4. Methodology
In this section, we elaborate our research methods.
They are developed to address the key challenges listed
in Section 1, namely how to accurately identify the
touch set, how to appropriately set the tracking window
size and how to effectively load the partial image on
the destination machine.
4.1. Identification of the Touch Set
Precisely identifying the touch set is crucial in the
design of FREM. There are two types of possible
errors:
(1) false positives where pages not of interest
are included in the touch set and (2) false negatives
where pages of interest are missing from the touch set.
These errors stem from the complicated features of
hardware and software design, which include hardware
bypassing, page swapping and dynamic memory
management.
4.1.1. Hardware bypassing. Although the access bit
of the PTE is often used to track page-level data
accesses, not every single memory access updates the
access bit in the PTE [27]. For example, a Translation
Lookaside Buffer (TLB) hit can cause the memory
access to bypass the PTEs. When a TLB hit occurs, the
process
translation
information from the TLB, rather than going through
the page table maintained by as. Hardware bypassing
can introduce false negatives in the identification of the
touch
support
software-managed TLBs, FREM can directly look into
the TLB to obtain the correct status of the access bit,
thereby solving the issue.
architectures
directly
address
reads
that
set.
the
the
In
But in the architectures without such support, such
as our target platform x86, using a hardware-managed
TLB, TLB peeking is forbidden. To address the issue,
FREM must ensure the consistency between the TLB
and the PTE entries. In our current design, at
the
beginning of the tracking window, FREM not only
clears the access bit in the PTE, but also invalidates the
corresponding TLB entry. By doing so, FREM
guarantees the first access of each page will cause a
TLB miss and consequently set the access bit of the