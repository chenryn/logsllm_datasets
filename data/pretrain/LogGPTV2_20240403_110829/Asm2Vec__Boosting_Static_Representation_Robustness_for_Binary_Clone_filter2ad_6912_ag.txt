.307
.633
.416
.541
.619
.539
.956
.961
Avg.
.117
.265
.001
.058
.008
.121
.004
.079
.118
.037
.722
.814
TABLE 2: Clone search between the original and obfuscated binary using the Precision at Position 1 (Precision@1) metric.
It captures the ratio of functions that are correctly matched at position 1, which is equal to Recall at Position 1 (Recall@1)
in this case. The difference between Asm2Vec and each baseline is signiﬁcant (p <0.01 in a Wilcoxon signed-rank test).
LLVM toolchain. According to Figure 7, there is a signiﬁcant
difference between the original and the ones obfuscated with
BCF and FLA. BCF doubles the number of vertices and
edges. FLA almost doubles the latter. With SUB, the number
of assembly instructions signiﬁcantly increases. We use the
same set of baselines and conﬁgurations from the previous
experiment except for BinGo and CACompare, since they
are unavailable for evaluation and the original papers do
not include such an experiment.
We ﬁrst compile a selected library without any obfusca-
tion techniques applied. After, we compile the library again
with a chosen obfuscation technique to have an original and
an obfuscated binary. We link their assembly functions by
using debug symbols and generate a one-to-one clone map-
ping between assembly functions. This mapping is used for
evaluation purposes only. After stripping binaries, we search
the original against the obfuscated. Then, we search for the
obfuscated against the original. We report the average. We
use the Precision@1 as our evaluation measure. In this case,
(cid:21)(cid:25)(cid:18)
Precision@1 equals Recall@1, since we treat ‘no-answer’
for a query as a zero precision.
Table 2 shows the results for O-LLVM. We ﬁnd that
instructions substitution can signiﬁcantly reduce the perfor-
mance of n-gram. SUB breaks the sequence by adding in-
structions in between. n-perm performs better than n-gram,
since it ignores the order of tokens. Graph-based features
can still recover more than 60% of clones, since the graph
structure is not heavily modiﬁed. Asm2Vec can achieve more
than 96% precision against assembly instruction substitu-
tion. Instructions are replaced with their equivalent form,
which in fact still shares similar lexical semantic to the
original. This information is well captured by Asm2Vec.
After applying BCF obfuscation, Asm2Vec can still
achieve more than 88% precision, where the control ﬂow
graph already looks very different from the original. It shows
that Asm2Vec is resilient
to the inserted junk code and
faked basic blocks. The FLA obfuscation destroys all the
subgraph structures. This is also reﬂected from the degraded
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:52 UTC from IEEE Xplore.  Restrictions apply. 
Figure 8: Baseline comparison for the third experiment. There are 139,936 assembly functions. We search each one against
the rest. The set is a mixture of different compilers, compiler optimization settings, and O-LLVM obfuscation settings. a)
Recall rates are plotted for different top-K retrieved results. b) Recall-Precision Curve. c) Sensitivity test on dimensionality.
performance of graph sub-structure features. Most of them
have a precision value around zero. Even in such situations,
Asm2Vec can still correctly match 84% of assembly function
clones. It shows that Asm2Vec is resilient to sub-structure
changes and linear layout changes. After applying all the
obfuscation techniques, Asm2Vec can still recover around
81% of assembly functions.
Asm2Vec can correctly pinpoint and identify critical
patterns from noise. Inserted junk basic blocks or noise
instructions follow the general syntax of random assembly
code, which can be easily predicted by neighbor instructions.
The function representation in Asm2Vec captures the missing
information that cannot be provided by neighbor instruc-
tions. It also weights this information to best distinguish
one function from another.
5.3. Searching against All Binaries
In this experiment, we use all the binaries in the pre-
vious two experiments. We evaluate whether Asm2Vec can
distinguish different assembly functions when the candidate
set is large. We also evaluate its performance with varying
retrieval thresholds to inspect whether true positives are
ranked at the top. Speciﬁcally, there are in total 60 binaries,
which are a mixture of libraries compiled for different
compiler options (O0-O3), different compilers (GCC and
CLANG), and different O-LLVM obfuscation conﬁgurations.
Following the experiment in Genius [6] and Discovre [7],
we consider assembly functions that have at least 5 basic
blocks. However, we do not use sampling. We use all of
them. In total, there are 139,936 assembly functions. For
each of them, we search against the rest to ﬁnd clones.
We sort the returned results and evaluate each of them in
sequence. We use the same set of baselines and conﬁguration
from the last experiment except for FuncSimSearch, since
it throws segmentation fault when indexing all the binaries.
We collect recall and precision at different top-k posi-
tions. We plot recall against k in Figure 8(a). We remove
Graphlet from the ﬁgure, since it does not perform any
better than Graphlet-Extended. Even with a large size of
assembly functions, Asm2Vec can still achieve a recall of
70% for the top 20 results. It signiﬁcantly outperforms other
traditional token-based and graph-based features. Moreover,
we observe that token-based approaches in general perform
better than subgraph-based approaches.
We plot precision against recall for each baseline in
Figure 8(b). This curve evaluates a clone search engine
with respect to the trade-off between precision and recall,
when varying the number of retrieved results. As shown in
the plot, Asm2Vec outperforms traditional representations of
assembly code. It achieves 82% precision for the returned
top clone search result where k = 1. The false positives
on average have 33 basic blocks (σ = 231). On the other
hand, all the functions in the dataset on average have 47
basic blocks (σ = 110) as a prior. By using a one-sided
Kolmogorov-Smirnov test, we can conclude that false posi-
tives have a smaller number of basic blocks than the overall
−16). We conduct a sensitivity test
population (p < 2.2e
based on top-200 results to evaluate different choices of
vector size. Figure 8 (c) shows that with difference vector
size Asm2Vec is stable for both efﬁcacy and efﬁciency. We
tried to incorporate more neighbor instructions. However,
this increases the possible patterns to be learned and requires
more data. In our experiment, we did not ﬁnd such design
effective.
5.4. Searching Vulnerability Functions
In the above experiments, we evaluate Asm2Vec’s overall
performance on matching general assembly functions. In
this case study, we apply Asm2Vec on a publicly available
vulnerability dataset4 presented in [18] to evaluate its perfor-
mance in actually recovering the reuse of the vulnerabilities
in functions. The dataset contains 3,015 assembly functions.
4. Available at https://github.com/nimrodpar/esh-dataset-1523
(cid:21)(cid:25)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:52 UTC from IEEE Xplore.  Restrictions apply. 
Vulnerability
CVE
Heartbleed 2014-0160
Shellshock 2014-6271
Venom 2015-3456
ESH [18]
Asm2Vec
FP ROC CROC FP ROC CROC
0
3
0
0.999 0.996
1
1
1
Clobberin’ Time 2014-9295 19 0.993 0.956
Shellshock #2 2014-7169
ws-snmp 2011-0444
wget 2014-4877
ffmpeg 2015-6826
0
1
0
0
1
1
1
1
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1
0.997
1
1
1
1
1
1
1
1
TABLE 3: Evaluating Asm2Vec on the vulnerability
dataset [18] using the False Positives (FP), Receiver Oper-
ating Characteristic (ROC), and Concentrated ROC (CROC)
metrics. For all
the cases, Asm2Vec retrieves all results
without any false positives.
For each of the 8 given vulnerabilities, the task is to retrieve
its variants from the dataset. The variants are either from
different source code versions or generated by different
versions of GCC, ICC and CLANG compilers. This dataset
is closely related to the real-life scenario.
Figure 9 shows an example of using Asm2Vec to search
for the Heartbleed vulnerability in the dataset. The query
is a function containing the Heartbleed vulnerability in
OpenSSL version 1.0.1f, compiled with Clang 3.5. There
are total 15 different functions containing this vulnerability.
The pie chart in each ranked entry indicates the similarity.
Each ranked entry contains the assembly function name and
its corresponding binary ﬁle. As shown in the ranked list,
Asm2Vec successfully retrieves all the 15 candidates in the
top 15 results. Therefore, it has a precision and recall of 1 for
this query. The ﬁrst entry corresponds to the same function
as the query. However, it does not have a similarity of 1
since the query’s representation is estimated but the one in
repository is trained. However, it is still ranked ﬁrst.
We implement Asm2Vec as an open source vulnerability
search engine and follow the same experimental protocol to
compare its performance with the state-of-the-art vulnerabil-
ity search solution in [18]. Table 3 shows the results. We use
the same performance metrics as [18]: False Positives (FP),
Receiver Operating Characteristic (ROC), and Concentrated
ROC (CROC). For all the vulnerabilities, Asm2Vec has zero
false positives and 100% recall. Therefore, it achieves a
ROC and a CROC of 1. It outperforms [18].
Tigress [25] is another advanced obfuscator. It trans-
forms the C Intermediate Language (CIL) using virtual-
ization and Just-In-Time (JIT) execution. Tigress failed to
obfuscate a complete library binary due to compilation er-
rors. Therefore we were unable to evaluate Asm2Vec against
Tigress in the same way as against O-LLVM in Section 5.2.
We increase the difﬁculty on the vulnerability search by
using the Tigress obfuscator. In this experiment, for each
of the 8 different vulnerabilities, we obfuscate the query
function with literals encoded, virtualization, and Just-In-
Time execution. Then, we try to recover their original
variants from the dataset. Encode Literals: Literal integers
are replaced with opaque expressions. Literal strings are
replaced with a function that generates them at runtime.
Virtualization: This transformation turns a function into an
Figure 9: Searching the Heartbleed vulnerable function in
the vulnerability dataset. The binary name indicates the
compiler, library name, and library version. For example,
clang.3.5 openssl.1.0.1f indicates that the binary is library
OpenSSL version 1.0.1f compiled with clang version 3.5.
interpreter with specialized byte code translation. By design,
it is difﬁcult for a static approach to detect clones protected
by this technique. JIT: It transforms the function to generate
its code at runtime. Almost every instruction is replaced with
a function call. By design, a static approach can hardly
recover any variants. Our result shows that Asm2Vec is
still able to recover 97.2% with literals encoded, 35% with
virualization, and 45% with JIT execution (see Table 4). We
inspect the result and ﬁnd that Asm2Vec tries to match any
similar information neglected by the obfuscator. However,
after applying three obfuscation techniques at the same time,
Asm2Vec can no longer recover any clone.
6. Related Work
Static approaches such as k-gram [26], LSH-S [16], n-
gram [8], BinClone [15], ILine [27], and Kam1n0 [17] rely
on operations or categorized operands as static features.
BinSequence [28] and Tracelet [14] model assembly code
as the editing distance between instruction sequences. All
these features failed to leverage the semantic relationship
between operations or categories. TEDEM [29] compares
basic blocks by their expression trees. However, even se-
mantically similar instructions result in different expressions
and side effects, which make them sensitive to instruction
changes. ILine [27], Discovre [7], Genius [6], BinSign [30],
and BinShape [31] construct descriptive statistic features,
such as ratio of arithmetic assembly instructions, ratio of
transfer instructions, number of basic blocks, and number
of function calls, among others. Instruction-based features
failed to consider the relationships between instructions and
are affected by instruction substitutions. In NLP tasks one
usually penalizes frequent words by ﬁltering, subsampling
or generalization. For assembly language we ﬁnd that fre-
quent words improve the robustness of the representation.
(cid:21)(cid:25)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:52 UTC from IEEE Xplore.  Restrictions apply. 
Name
CVE
# of Positives (k)
Encode Literal
Virtualization
JIT Execution
Heartbleed
2014-0160
15
100%
0%
53.3%
ShellshocK
2014-6271
9
77.8%
0%
0%
Searching with Obfuscation Options in Tigress
Shellshock #2
2014-7169
3
100%
100%
33.3%
Venom Clobberin’ Time
2014-9295
10
100%
20%
30%
2015-3456
6
100%
100%
83.3%
ws-snmp
2014-4877
7
100%
0%
0%
wget
2014-4877
3
100%
66.7%
0%
avg.
ffmpeg
2015-6826
7
100% 97.2%
0% 35.8%
100% 37.5%
TABLE 4: True Positive Rate (TPR) of the top-k results searching the obfuscated vulnerable function against the dataset
in [18]. k is chosen as the number of ground-truth clones in the dataset. For example, Venom CVE 2015-3456-4877 has 6
variants in the dataset. By inspecting the top-6 results from Asm2Vec we recovered 100% (6/6) for the query with literals
encoded, 100% (6/6) for the virtualized query, and 83.3% (5/6) for JIT-transformed query. After applying all the options at
the same time, Asm2Vec cannot recover any true positives.
Graph-based features are oblivious to CFG manipulations.
BinDiff [32] and BinSlayer [33] rely on CFG matching,
which is susceptible to CFG changes such as ﬂattening.
Gitz [34] is another static approach that used at the IR level.
However, it operates at the boundary of a basic block and
assumes basic block integrity, which is vulnerable to split-
ting. [35] proposes a graph convolution approach. It might
be able to mitigate graph manipulation. However, it relies
on supervised learning and requires a ground-truth mapping
of equivalent assembly functions to be trained. Asm2Vec
enriches static features by considering the lexical semantic
relationships between tokens appearing in assembly code.
It also avoids direct use of the graph-based features and is
more robust against CFG manipulations. However, the CFG
is useful in some malware analysis scenarios, especially for
matching template-generated and marco-generated functions
that share similar CFG structure. One direction is to combine
Asm2Vec and Tracelet [14] or subgraph search [17].
Dynamic methods measure semantic similarity by dy-
namically analyzing the behavior of the target assembly
code. BinHunt [36], iBinHunt [37], and ESH [18] use a
theorem prover to verify whether two basic blocks or strands
are equivalent. BinHunt and iBinHunt assume basic blocks
integrity. ESH assumes strand integrity. They are vulnera-
ble to block splitting. Jiang et al. [38], Blex [10], Multi-
MH [11], and BinGo [12] use randomly-sampled values
to compare I/O values. Random sampling may not cor-
rectly discriminate two logics. Consider that one expression
outputs 1 if v! = 100; otherwise, 0. Another expression
outputs 1 if v! = 20, otherwise, 0. Given a widely-used
sampling range [−1000, 1000], they have a high chance
of being equivalent. CACompare follows the similar idea
used in [39], [40], [41]. Besides of I/O values, it records
all intermediate execution results and library function calls
for matching. Using similar experiments to match assembly
functions, CACompare achieves the best performance among
the binary clone search literature at the time of writing this
paper. However, it depends on a single input value and only
covers one execution path. As stated by the authors, it is
vulnerable to CFG changes. Asm2Vec leverages the lexical
semantic rather than the symbolic relationship which is more
scalable and less vulnerable to added noisy logics. As a
static approach, Asm2Vec achieves competitive performance
compared to CACompare. CryptoHunt is a recent dynamic
approach for matching cryptographic functions. It can de-
tect wrapped cryptographic API calls. Asm2Vec focuses on
assembly code similarity, which is different to CryptoHunt.
Source code clone is another related area. CCFIND-
ERX [42] and CP-Miner [43] use lexical tokens as features
to ﬁnd code clones. Baxter et al. [44] and Deckard [45]
leverage abstract syntax trees for clone detection. ReDe-
bug [46] is another scalable source code search engine. Re-
cently, deep learning has been applied on this problem [47].
7. Limitations and Conclusion
limitations. First,
it
Asm2Vec suffers from several
is
designed for a single assembly code language and the clone
search engine is architecture-agnostic. At this stage, it is not
directly applicable for semantic clones across architectures.
In the future, we will align the lexical semantic space
between two different assembly languages by considering
their shared tokens, such as constants and libc calls. Second,
the current selective callee expansion mechanism cannot de-
termine the dynamic jumps, such as jump table. Third, as a
black box static approach, Asm2Vec cannot explain or justify
the returned results by showing the cloned subgraphs or
proving symbolic equivalence. It has limited interpretability.
In this paper, we propose a robust and accurate assem-
bly clone search approach named Asm2Vec, which learns
a vector representation of an assembly function by dis-
criminating it from the others. Asm2Vec does not require
any prior knowledge such as the correct mapping between
assembly functions or the compiler optimization level used.
It learns lexical semantic relationships of tokens appearing
in assembly code, and represents an assembly function as an
internally weighted mixture of latent semantics. Besides as-
sembly functions, it can be applied on different granularities
of assembly sequences, such as binaries, fragments, basic
blocks, or functions. We conduct extensive experiments
on assembly code clone search, using different compiler
optimization options and obfuscation techniques. Our results
suggest that Asm2Vec is accurate and robust against severe
changes in the assembly instructions and control ﬂow graph.
Acknowledgments
The authors would like to thank the reviewers for the
thorough reviews and valuable comments. This research is
supported by Defence Research and Development Canada
(cid:21)(cid:25)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:52 UTC from IEEE Xplore.  Restrictions apply. 
(contract no. W7701-155902/001/QCL), NSERC Discovery
Grants (RGPIN-2018-03872), and Canada Research Chairs
Program (950-230623).
References
[1] A. Mockus, “Large-scale code reuse in open source software,” in
Proceedings of the International Workshop on Emerging Trends in
FLOSS Research and Development.
IEEE, 2007.
[2] M. Sojer and J. Henkel, “Code reuse in open source software devel-
opment: Quantitative evidence, drivers, and impediments,” Journal of
the Association for Information Systems, vol. 11, no. 12, 2010.
[3] E. Juergens et al., “Why and how to control cloning in software
[4]
[5]
artifacts,” Technische Universit¨at M¨unchen, 2011.
S. Brown. (2016) Binary difﬁng with kam1n0. [Online]. Available:
https://www.whitehatters.academy/difﬁng-with-kam1n0/
J. Qiu, X. Su, and P. Ma, “Library functions identiﬁcation in binary
code by using graph isomorphism testings,” in Proceedings of the
22nd IEEE International Conference on Software Analysis, Evolution,
and Reengineering, 2015.
[6] Q. Feng, R. Zhou, C. Xu, Y. Cheng, B. Testa, and H. Yin, “Scalable
graph-based bug search for ﬁrmware images,” in Proceedings of the
2016 ACM SIGSAC Conference on Computer and Communications
Security, 2016.
S. Eschweiler, K. Yakdan, and E. Gerhards-Padilla, “discovre: Ef-
ﬁcient cross-architecture identiﬁcation of bugs in binary code,” in
Proceedings of the 23rd Symposium on Network and Distributed
System Security (NDSS), 2016.
[7]
[8] W. M. Khoo, A. Mycroft, and R. J. Anderson, “Rendezvous: a
search engine for binary code,” in Proceedings of the 10th Working
Conference on Mining Software Repositories, 2013.
[9] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, “Semantics-based
obfuscation-resilient binary code similarity comparison with appli-
cations to software plagiarism detection,” in Proceedings of the 22nd
ACM SIGSOFT International Symposium on Foundations of Software
Engineering, 2014.
[10] M. Egele, M. Woo, P. Chapman, and D. Brumley, “Blanket execution:
Dynamic similarity testing for program binaries and components,” in
Proceedings of the 23rd USENIX conference on Security, 2014.
[11] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz, “Cross-
architecture bug search in binary executables,” in Proceedings of the
IEEE Symposium on Security and Privacy (SP).
IEEE, 2015.
[12] M. Chandramohan, Y. Xue, Z. Xu, Y. Liu, C. Y. Cho, and H. B. K.
Tan, “Bingo: cross-architecture cross-os binary search,” in Proceed-
ings of the 2016 24th ACM SIGSOFT International Symposium on
Foundations of Software Engineering, 2016.
[13] Y. Hu, Y. Zhang, J. Li, and D. Gu, “Binary code clone detection
across architectures and compiling conﬁgurations,” in Proceedings of
the 25th International Conference on Program Comprehension, 2017.
[14] Y. David and E. Yahav, “Tracelet-based code search in executables,”
in Proceedings of the 37th ACM SIGPLAN Conference on Program-
ming Language Design and Implementation, 2014.
[15] M. R. Farhadi, B. C. M. Fung, P. Charland, and M. Debbabi, “Bin-
clone: Detecting code clones in malware,” in Proceedings of the 8th
International Conference on Software Security and Reliability, 2014.