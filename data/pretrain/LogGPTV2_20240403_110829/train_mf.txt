.tp
.b nt_s390_todcmp
s390 time-of-day (tod) clock comparator register
.tp
.b nt_s390_todpreg
s390 time-of-day (tod) programmable register
.tp
.b nt_s390_ctrs
s390 control registers
.tp
.b nt_s390_prefix
s390 prefix register
.tp
.b nt_s390_last_break
s390 breaking event address
.tp
.b nt_s390_system_call
s390 system call restart data
.tp
.b nt_s390_tdb
s390 transaction diagnostic block
.tp
.b nt_arm_vfp
arm vfp/neon registers
.tp
.b nt_arm_tls
arm tls register
.tp
.b nt_arm_hw_break
arm hardware breakpoint registers
.tp
.b nt_arm_hw_watch
arm hardware watchpoint registers
.tp
.b nt_arm_system_call
arm system call number
.pd
.re
.tp
.b n_name = gnu
extensions used by the gnu tool chain.
.rs
.tp
.b nt_gnu_abi_tag
operating system (os) abi information.
the desc field will be 4 words:
.ip
.pd 0
.rs
.ip \(bu 2
word 0: os descriptor
(\fbelf_note_os_linux\fr, \fbelf_note_os_gnu\fr, and so on)`
.ip \(bu
word 1: major version of the abi
.ip \(bu
word 2: minor version of the abi
.ip \(bu
word 3: subminor version of the abi
.re
.pd
.tp
.b nt_gnu_hwcap
synthetic hwcap information.
the desc field begins with two words:
.ip
.pd 0
.rs
.ip \(bu 2
word 0: number of entries
.ip \(bu
word 1: bit mask of enabled entries
.re
.pd
.ip
then follow variable-length entries, one byte followed by a null-terminated
hwcap name string.
the byte gives the bit number to test if enabled, (1u 
.\" and copyright 2003,2004 andi kleen, suse labs.
.\" numa_maps material copyright (c) 2005 silicon graphics incorporated.
.\"     christoph lameter, .
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th numa 7 2021-03-22 "linux" "linux programmer's manual"
.sh name
numa \- overview of non-uniform memory architecture
.sh description
non-uniform memory access (numa) refers to multiprocessor systems
whose memory is divided into multiple memory nodes.
the access time of a memory node depends on
the relative locations of the accessing cpu and the accessed node.
(this contrasts with a symmetric multiprocessor system,
where the access time for all of the memory is the same for all cpus.)
normally, each cpu on a numa system has a local memory node whose
contents can be accessed faster than the memory in
the node local to another cpu
or the memory on a bus shared by all cpus.
.ss numa system calls
the linux kernel implements the following numa-related system calls:
.br get_mempolicy (2),
.br mbind (2),
.br migrate_pages (2),
.br move_pages (2),
and
.br set_mempolicy (2).
however, applications should normally use the interface provided by
.ir libnuma ;
see "library support" below.
.ss /proc/[number]/numa_maps  (since linux 2.6.14)
.\" see also changelog-2.6.14
this file displays information about a process's
numa memory policy and allocation.
.pp
each line contains information about a memory range used by the process,
displaying\(emamong other information\(emthe effective memory policy for
that memory range and on which nodes the pages have been allocated.
.pp
.i numa_maps
is a read-only file.
when
.i /proc//numa_maps
is read, the kernel will scan the virtual address space of the
process and report how memory is used.
one line is displayed for each unique memory range of the process.
.pp
the first field of each line shows the starting address of the memory range.
this field allows a correlation with the contents of the
.i /proc//maps
file,
which contains the end address of the range and other information,
such as the access permissions and sharing.
.pp
the second field shows the memory policy currently in effect for the
memory range.
note that the effective policy is not necessarily the policy
installed by the process for that memory range.
specifically, if the process installed a "default" policy for that range,
the effective policy for that range will be the process policy,
which may or may not be "default".
.pp
the rest of the line contains information about the pages allocated in
the memory range, as follows:
.tp
.i n=
the number of pages allocated on
.ir  .
.i 
includes only pages currently mapped by the process.
page migration and memory reclaim may have temporarily unmapped pages
associated with this memory range.
these pages may show up again only after the process has
attempted to reference them.
if the memory range represents a shared memory area or file mapping,
other processes may currently have additional pages mapped in a
corresponding memory range.
.tp
.i file=
the file backing the memory range.
if the file is mapped as private, write accesses may have generated
cow (copy-on-write) pages in this memory range.
these pages are displayed as anonymous pages.
.tp
.i heap
memory range is used for the heap.
.tp
.i stack
memory range is used for the stack.
.tp
.i huge
huge memory range.
the page counts shown are huge pages and not regular sized pages.
.tp
.i anon=
the number of anonymous page in the range.
.tp
.i dirty=
number of dirty pages.
.tp
.i mapped=
total number of mapped pages, if different from
.ir dirty
and
.i anon
pages.
.tp
.i mapmax=
maximum mapcount (number of processes mapping a single page) encountered
during the scan.
this may be used as an indicator of the degree of sharing occurring in a
given memory range.
.tp
.i swapcache=
number of pages that have an associated entry on a swap device.
.tp
.i active=
the number of pages on the active list.
this field is shown only if different from the number of pages in this range.
this means that some inactive pages exist in the memory range that may be
removed from memory by the swapper soon.
.tp
.i writeback=
number of pages that are currently being written out to disk.
.sh conforming to
no standards govern numa interfaces.
.sh notes
the linux numa system calls and
.i /proc
interface are available only
if the kernel was configured and built with the
.br config_numa
option.
.ss library support
link with \fi\-lnuma\fp
to get the system call definitions.
.i libnuma
and the required
.i 
header are available in the
.i numactl
package.
.pp
however, applications should not use these system calls directly.
instead, the higher level interface provided by the
.br numa (3)
functions in the
.i numactl
package is recommended.
the
.i numactl
package is available at
.ur ftp://oss.sgi.com\:/www\:/projects\:/libnuma\:/download/
.ue .
the package is also included in some linux distributions.
some distributions include the development library and header
in the separate
.i numactl\-devel
package.
.sh see also
.br get_mempolicy (2),
.br mbind (2),
.br move_pages (2),
.br set_mempolicy (2),
.br numa (3),
.br cpuset (7),
.br numactl (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1993
.\"    the regents of the university of california.  all rights reserved.
.\" and copyright (c) 2020 by alejandro colomar 
.\"
.\" %%%license_start(bsd_3_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"
.th circleq 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
circleq_empty,
circleq_entry,
circleq_first,
circleq_foreach,
circleq_foreach_reverse,
circleq_head,
circleq_head_initializer,
circleq_init,
circleq_insert_after,
circleq_insert_before,
circleq_insert_head,
circleq_insert_tail,
circleq_last,
circleq_loop_next,
circleq_loop_prev,
circleq_next,
circleq_prev,
circleq_remove
\- implementation of a doubly linked circular queue
.sh synopsis
.nf
.b #include 
.pp
.b circleq_entry(type);
.pp
.b circleq_head(headname, type);
.bi "circleq_head circleq_head_initializer(circleq_head " head );
.bi "void circleq_init(circleq_head *" head );
.pp
.bi "int circleq_empty(circleq_head *" head );
.pp
.bi "void circleq_insert_head(circleq_head *" head ,
.bi "                           struct type *" elm ", circleq_entry " name );
.bi "void circleq_insert_tail(circleq_head *" head ,
.bi "                           struct type *" elm ", circleq_entry " name );
.bi "void circleq_insert_before(circleq_head *" head ", struct type *" listelm ,
.bi "                           struct type *" elm ", circleq_entry " name );
.bi "void circleq_insert_after(circleq_head *" head ", struct type *" listelm ,
.bi "                           struct type *" elm ", circleq_entry " name );
.pp
.bi "struct type *circleq_first(circleq_head *" head );
.bi "struct type *circleq_last(circleq_head *" head );
.bi "struct type *circleq_prev(struct type *" elm ", circleq_entry " name );
.bi "struct type *circleq_next(struct type *" elm ", circleq_entry " name );
.bi "struct type *circleq_loop_prev(circleq_head *" head ,
.bi "                           struct type *" elm ", circleq_entry " name );
.bi "struct type *circleq_loop_next(circleq_head *" head ,
.bi "                           struct type *" elm ", circleq_entry " name );
.pp
.bi "circleq_foreach(struct type *" var ", circleq_head *" head ,
.bi "                           circleq_entry " name );
.bi "circleq_foreach_reverse(struct type *" var ", circleq_head *" head ,
.bi "                           circleq_entry " name );
.pp
.bi "void circleq_remove(circleq_head *" head ", struct type *" elm ,
.bi "                           circleq_entry " name );
.fi
.sh description
these macros define and operate on doubly linked circular queues.
.pp
in the macro definitions,
.i type
is the name of a user-defined structure,
that must contain a field of type
.ir circleq_entry ,
named
.ir name .
the argument
.i headname
is the name of a user-defined structure
that must be declared using the macro
.br circleq_head ().
.ss creation
a circular queue is headed by a structure defined by the
.br circleq_head ()
macro.
this structure contains a pair of pointers,
one to the first element in the queue
and the other to the last element in the queue.
the elements are doubly linked
so that an arbitrary element can be removed without traversing the queue.
new elements can be added to the queue
after an existing element,
before an existing element,
at the head of the queue,
or at the end of the queue.
a
.i circleq_head
structure is declared as follows:
.pp
.in +4
.ex
circleq_head(headname, type) head;
.ee
.in
.pp
where
.i struct headname
is the structure to be defined, and
.i struct type
is the type of the elements to be linked into the queue.
a pointer to the head of the queue can later be declared as:
.pp
.in +4
.ex
struct headname *headp;
.ee
.in
.pp
(the names
.i head
and
.i headp
are user selectable.)
.pp
.br circleq_entry ()
declares a structure that connects the elements in the queue.
.pp
.br circleq_head_initializer ()
evaluates to an initializer for the queue
.ir head .
.pp
.br circleq_init ()
initializes the queue referenced by
.ir head .
.pp
.br circleq_empty ()
evaluates to true if there are no items on the queue.
.ss insertion
.br circleq_insert_head ()
inserts the new element
.i elm
at the head of the queue.
.pp
.br circleq_insert_tail ()
inserts the new element
.i elm
at the end of the queue.
.pp
.br circleq_insert_before ()
inserts the new element
.i elm
before the element
.ir listelm .
.pp
.br circleq_insert_after ()
inserts the new element
.i elm