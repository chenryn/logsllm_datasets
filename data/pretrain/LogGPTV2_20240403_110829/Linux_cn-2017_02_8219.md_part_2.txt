echo $NAME
mv "foo bar.txt" $NAME
```
您可以将其标记为可执行文件并在测试目录中运行它。确保您有一个名为 foo bar.txt（或您在脚本中使用的其它名字）的测试文件。
```
$ touch "foo bar.txt"
$ chmod +x despace
$ ./despace
foobar.txt
$ ls
foobar.txt
```
### 去除空格 v2.0
脚本可以正常工作，但不完全如您的文档所述。它目前非常具体，只适用于一个名为 `foo\ bar.txt` 的文件，其它都不适用。
POSIX 命令会将其命令自身称为 `$0`，并将其后键入的任何内容依次命名为 `$1`，`$2`，`$3` 等。您的 shell 脚本作为 POSIX 命令也可以这样计数，因此请尝试用 `$1` 来替换 `foo\ bar.txt` 。
```
#!/bin/sh
NAME=`ls $1 | tr -d ' '`
echo $NAME
mv $1 $NAME
```
创建几个新的测试文件，在名称中包含空格：
```
$ touch "one two.txt"
$ touch "cat dog.txt"
```
然后测试你的新脚本：
```
$ ./despace "one two.txt"
ls: cannot access 'one': No such file or directory
ls: cannot access 'two.txt': No such file or directory
```
看起来您发现了一个 bug！
这实际上不是一个 bug，一切都按设计工作，但不是你想要的。你的脚本将 `$1` 变量真真切切地 “扩展” 成了：“one two.txt”，捣乱的就是你试图消除的那个麻烦的空格。
解决办法是将变量用以引号封装文件名的方式封装变量：
```
#!/bin/sh
NAME=`ls "$1" | tr -d ' '`
echo $NAME
mv "$1" $NAME
```
再做个测试：
```
$ ./despace "one two.txt"
onetwo.txt
$ ./despace c*g.txt
catdog.txt
```
此脚本的行为与任何其它 POSIX 命令相同。您可以将其与其他命令结合使用，就像您希望的使用的任何 POSIX 程序一样。您可以将其与命令结合使用：
```
$ find ~/test0 -type f -exec /path/to/despace {} \;
```
或者你可以使用它作为循环的一部分：
```
$ for FILE in ~/test1/* ; do /path/to/despace $FILE ; done
```
等等。
### 去除空格 v2.5
这个去除脚本已经可以发挥功用了，但在技术上它可以优化，它可以做一些可用性改进。
首先，变量实际上并不需要。 shell 可以一次计算所需的信息。
POSIX shell 有一个操作顺序。在数学中使用同样的方式来首先处理括号中的语句，shell 在执行命令之前会先解析反引号 ``` 或 Bash 中的 `$()` 。因此，下列语句：
```
$ mv foo\ bar.txt `ls foo\ bar.txt | tr -d ' '`
```
会变换成：
```
$ mv foo\ bar.txt foobar.txt
```
然后实际的 `mv` 命令执行，就得到了 **foobar.txt** 文件。
知道这一点，你可以将该 shell 脚本压缩成：
```
#!/bin/sh
mv "$1" `ls "$1" | tr -d ' '`
```
这看起来简单的令人失望。你可能认为它使脚本减少为一个单行并没有必要，但没有几行的 shell 脚本是有意义的。即使一个用简单的命令写的紧缩的脚本仍然可以防止你发生致命的打字错误，这在涉及移动文件时尤其重要。
此外，你的脚本仍然可以改进。更多的测试发现了一些弱点。例如，运行没有参数的 `despace` 会产生一个没有意义的错误：
```
$ ./despace
ls: cannot access '': No such file or directory
mv: missing destination file operand after ''
Try 'mv --help' for more information.
```
这些错误是让人迷惑的，因为它们是针对 `ls` 和 `mv` 发出的，但就用户所知，它运行的不是 `ls` 或 `mv`，而是 `despace` 。
如果你想一想，如果它没有得到一个文件作为命令的一部分，这个小脚本甚至不应该尝试去重命名文件，请尝试使用你知道的变量以及 `test` 功能来解决。
### if 和 test
`if` 语句将把你的小 despace 实用程序从脚本蜕变成程序。这里面涉及到代码领域，但不要担心，它也很容易理解和使用。
`if` 语句是一种开关；如果某件事情是真的，那么你会做一件事，如果它是假的，你会做不同的事情。这个 `if-then` 指令的二分决策正好是计算机是擅长的；你需要做的就是为计算机定义什么是真或假以及并最终执行什么。
测试真或假的最简单的方法是 `test` 实用程序。你不用直接调用它，使用它的语法即可。在终端试试：
```
$ if [ 1 == 1 ]; then echo "yes, true, affirmative"; fi
yes, true, affirmative
$ if [ 1 == 123 ]; then echo "yes, true, affirmative"; fi
$
```
这就是 `test` 的工作方式。你有各种方式的简写可供选择，这里使用的是 `-z` 选项，它检测字符串的长度是否为零（0）。将这个想法翻译到你的 despace 脚本中就是：
```
#!/bin/sh
if [ -z "$1" ]; then
   echo "Provide a \"file name\", using quotes to nullify the space."
   exit 1
fi
mv "$1" `ls "$1" | tr -d ' '`
```
为了提高可读性，`if` 语句被放到单独的行，但是其概念仍然是：如果 `$1` 变量中的数据为空（零个字符存在），则打印一个错误语句。
尝试一下：
```
$ ./despace
Provide a "file name", using quotes to nullify the space.
$
```
成功！
好吧，其实这是一个失败，但它是一个*漂亮的*失败，更重要的是，一个*有意义*的失败。
注意语句 `exit 1` 。这是 POSIX 应用程序遇到错误时向系统发送警报的一种方法。这个功能对于需要在脚本中使用 despace ，并依赖于它成功执行才能顺利运行的你或其它人来说很重要。
最后的改进是添加一些东西，以保护用户不会意外覆盖文件。理想情况下，您可以将此选项传递给脚本，所以它是可选的；但为了简单起见，这里对其进行了硬编码。 `-i` 选项告诉 `mv` 在覆盖已存在的文件之前请求许可：
```
#!/bin/sh
if [ -z "$1" ]; then
   echo "Provide a \"file name\", using quotes to nullify the space."
   exit 1
fi
mv -i "$1" `ls "$1" | tr -d ' '`
```
现在你的 shell 脚本是有意义的、有用的、友好的 - 你是一个程序员了，所以不要停。学习新命令，在终端中使用它们，记下您的操作，然后编写脚本。最终，你会把自己从工作中解脱出来，当你的机器仆人运行 shell 脚本，接下来的生活将会轻松。
Happy hacking！
---
作者简介：
Seth Kenlon 是一位独立的多媒体艺术家，自由文化倡导者和 UNIX 极客。他是基于 Slackware 的多媒体制作项目（[http://slackermedia.ml）的维护者之一](http://slackermedia.ml%EF%BC%89%E7%9A%84%E7%BB%B4%E6%8A%A4%E8%80%85%E4%B9%8B%E4%B8%80)
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 译者：[hkurj](https://github.com/hkurj) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出