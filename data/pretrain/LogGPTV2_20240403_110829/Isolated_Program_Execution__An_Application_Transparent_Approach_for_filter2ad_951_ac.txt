trusted code to change permissions on the directories that
were not created by it.
Since the latest Inode information is held within the iso-
lation layer, system calls to access or manipulate meta data,
such as stat, need to be intercepted by the manager and
redirected if necessary. Moreover, since the correct permis-
sion information is not available to the ﬁle system, permis-
sion checking needs to be handled by the isolation layer.
To understand the need for this, consider the case when the
isolated process modiﬁes a ﬁle that it does not own but has
the write permission. The isolation engine will copy the ﬁle
into the modiﬁcation cache before making these changes.
During copying process, the operating system will automat-
ically set the ownership of the copy to that of the owner of
the isolated process. It would be preferable to change the
ownership back to the owner of the original ﬁle, but this
will be disallowed by the kernel unless the isolation engine
runs with root privileges. Since it was one of our design
goals to support isolation without requiring superuser priv-
ileges, we cannot change the ownership information on the
ﬁle. This means that the OS will interpret the permissions
incorrectly, thus requiring the isolation engine to take over
this task.
2.3.1. Conﬁnement Engine The untrusted program may
perform other operations that are unrelated to the ﬁle sys-
tem. Some of these operations do not cause difﬁculties in
preserving isolation semantics, e.g., system calls for obtain-
ing timing information, process ownership, host attributes,
etc. Others, such as those involving network communica-
tion or interaction with processes outside its isolation con-
text, will pose a problem. It is the responsibility of the con-
ﬁnement engine to deal with all system calls that are unre-
lated to ﬁle systems. It determines which system calls can
be permitted without compromising the isolation semantics.
The conﬁnement engine is built from security policy
speciﬁcations that specify which system calls can be per-
mitted, and in what context. These policies are speciﬁed us-
ing a language called BMSL (Behavior Monitoring Speciﬁ-
cation Language) [20, 22]. BMSL can express describe con-
ventional access control policies, history sensitive policies
(e.g., an application cannot access the network after reading
sensitive ﬁles) and resource usage policies (e.g., an applica-
tion can write no more than k bytes of data). These policies
are compiled using the BMSL compiler to produce the con-
ﬁnement engine. A detailed description of BMSL syntax,
semantics, and compilation can be found in [22].
The conﬁnement engine currently disallows networks re-
quests such as web access, DNS queries, and X-windows
operations. As outlined earlier, these limitations can be re-
laxed using service-speciﬁc proxies. For instance, we can
have a proxy that receives DNS requests from the isolated
process, and forwards them to the DNS server if it can be as-
certained that this query will not change the system state.
2.4. System Call Interceptor
The system call interceptor is implemented in such a way
that it is easily portable to other Unix variants (that do not
support ptrace for instance). The architecture of our inter-
ceptor is based on the design presented in [10].
The implementation of the interceptor (the tracing pro-
cess) is based on Linux’s ptrace system call, which al-
lows one process, called the monitoring process to trace an-
other process, called the monitored process. Tracing capa-
bilities include the ability to intercept system calls made by
the monitored process, and examination or modiﬁcation of
the virtual memory of the monitored process. When using
ptrace for monitoring and conﬁning untrusted processes,
we face a number of difﬁculties that can compromise secu-
rity. Below, we summarize how our implementation tackles
these difﬁculties.
Rogue processes may cause the interceptor to terminate.
A malicious process may try to terminate the process that
is monitoring it. For instance, it can send a kill signal to
the monitoring process. However, this must again be done
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:46 UTC from IEEE Xplore.  Restrictions apply. 
through a system call, which will be intercepted and aborted
by the montoring process.
Fork/clone race condition. When a monitored process ex-
ecutes a fork system call, the child process is not traced au-
tomatically. The monitoring process must explicitly request
tracing of the child process by invoking ptrace with the
child PID (process identiﬁer) as an argument. However, the
child PID is unavailable until the fork system call returns
to the parent. By then, it is possible that the child process
may have started running, and executed system calls that the
monitoring process would not permit. To solve this problem
we adopt a clever trick that was devised in the strace [3]
program. Speciﬁcally, when the monitoring process inter-
cepts the parent’s entry into fork system call, it replaces the
the instruction in the parent’s code at its instruction pointer
(IP) with a loop instruction. Note that the child will inherit
this code, as well as the value of IP. This means that when
control returns to the child, it will execute the loop instruc-
tion, and hence will be stuck in an inﬁnite loop. In partic-
ular, it won’t be able to make any system calls. When the
fork system call returns to the parent, the monitoring pro-
cess obtains the child PID, and issues a ptrace system call
to attach to the child. It then restores the original instructed
that was stored at the instruction pointer, so that the child
process can continue with its normal execution, but now un-
der the control of the monitoring process.
Even after the above enhancement, there still exists a
possibility of a race condition: if the child process receives
a signal, this will interrupt the loop and cause execution of
its signal handler, which can execute system calls that may
not be permitted by the monitor. To prevent this possibil-
ity, we note that if another process intentionally cooperates
with the child process to free it, then that process must it-
self be an untrusted process under the control of the moni-
toring process. The system call used by the cooperating pro-
cess to send a signal can then be intercepted by the monitor
and delayed until it has control of the child process.
Argument race condition. There is a delay between the
time when the arguments of a system call is checked by the
monitoring process and the time when the arguments are
actually read by the kernel. If the arguments are stored in
a memory region shared by several processes or threads, it
is possible for these processes/threads to modify the argu-
ments during that time delay. We address this problem by
moving security-critical arguments to a random location on
the stack [10]. In order for the attack to succeed in spite
of this change, collaborating threads (or processes) need to
scan the entire stack to ﬁnd the location where the argument
is stored, and this scan must be completed within the short
interval between the time when arguments are checked by
the monitoring process and the time they are used by the
kernel. If the random number is chosen over a reasonably
Figure 3. Graphical User Interface
large range, e.g., 107 or 108, then the likelihood of success-
ful attacks becomes very small.
2.5. User Interface
After the isolated process and its children ﬁnish execu-
tion, the information maintained in the mapping table is
sent to the user interface (GUI). The GUI sorts/groups ﬁle
changes by path names, and then presents them to the user
in a tree like representation as shown in Figure 3. The user
can select the kinds of changes that they wish to see, e.g.,
new ﬁles created, ﬁles overwritten, etc. For modiﬁed ﬁles,
users can view the difference between the original and the
new version by simply clicking on the ﬁle name.
Optionally, the user can use a shell that runs in the same
isolation context as the untrusted process, but has access to
the original ﬁle system through the /alcatraz virtual di-
rectory. Moreover, the children of this shell are permitted
to access X-windows, so that arbitrary helper applications
(e.g., image viewers) can be launched by the user to view
the modiﬁed ﬁles.
2.5.1. Commit Criteria. After examining the changes
made by the untrusted process, a user can determine
whether these changes can be committed to the sys-
tem. However, it is possible that other processes, running
outside of the isolation context of the untrusted pro-
cess, may have made modiﬁcations to the ﬁle system. If
these changes interfere with the changes made by the un-
trusted process, then commitment of the changes made
by the untrusted process can lead to an inconsistent sys-
tem state. Hence, we adopt an approach in which the com-
mit operation is allowed to go through only if the ﬁles
modiﬁed by the isolated process were neither read nor writ-
ten by outside processes since the instant the ﬁles were ﬁrst
accessed by the isolated process.
It may seem that this approach is too conservative and
may reject results that can be consistently committed. While
this may be true, we observe that aborts do not cause too
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:46 UTC from IEEE Xplore.  Restrictions apply. 
much difﬁculty in Alcatraz. In particular, the untrusted pro-
gram can be executed again. Since the changes made by
the untrusted program were discarded, rerunning the pro-
gram will likely produce the same results. At this point, the
same interference may not have taken place (assuming that
such interference was a rare coincidence), and hence the re-
sults can be committed.
Our current implementation of commitment contains a
race condition. In particular, interference (by processes out-
side of isolation) may happen during the time ﬁles are
copied from the modiﬁcation cache to the ﬁle system. This
race condition can be avoided using ﬁle system locks. Un-
fortunately, mandatory locks are not supported by default
on Linux due to the possibility that they may lead to dead-
locks. If this were not the case, then the race condition can
be avoided. In practice, however, we note that the race con-
dition is not a signiﬁcant problem in the context of untrusted
program execution, as it is unlikely that the ﬁles accessed
by such a program would also be accessed by other unre-
lated processes, that too within the short period taken for
ﬁle copying.
3. Implementation results
We have implemented Alcatraz on the Linux operating
system [1]. The implementation has been tested on Red Hat
Linux 7.2 and Red Hat Linux 8.0 distributions. The perfor-
mance ﬁgures given below were obtained on a PC running
Red Hat Linux 7.2 on a 1.7GHz P4 processor with 1GB
memory.
3.1. Example Applications
Our implementation was tested with three applications:
two freeware program that organize image/audio ﬁles, and
the installation of a software package.
Picturepages is a photo organizing program discussed
in Section 1.1. We tested it with a directory of jpeg photos.
Alcatraz reported the creation of a directory and changes to
the picture ﬁles. We further used an image viewer to exam-
ine some of the generated pictures to make sure that they
were properly modiﬁed.
The second program that was used is mpls, which takes
a list of mp3 ﬁles and creates a playlist sorted by artist, al-
bum, track, or title on the standard output. A directory con-
taining various mp3 ﬁles was used as the input. After the
program ﬁnished execution, the user-interface presented a
report that summarized that no changes were made to the
ﬁle system.
The third program we tested was the installation of
mozilla, a free web browser. The installation program
modiﬁed three conﬁguration ﬁles of a previous version
of mozilla and installed all ﬁles into a new directory.
All these changes were captured by Alcatraz and reported
through the user interface, as shown in Figure 3.
In all these examples, the isolation operation guaranteed
the safety of the user’s resources, as well as provided the
convenience of concise summaries on the outputs of these
executions.
3.2. Performance results
We have measured the performance using two sets of ap-
plications. The ﬁrst set of applications are the above exam-
ples. The second set included common UNIX utilities such
as make gcc, gzip, ghostscript, and tar.
The following testing data was used:
• for make gcc, we compiled the openssh package ver-
sion 3.7p1 under isolation. It contained 69849 lines of
C code.
• for tar, a directory tree containing several mp3 ﬁles
were used as the input for the archive operation. The
size of output ﬁle was 85MB.
• for gzip, the output of the above tar command was
• for ghostscript, a 10-page paper, containing 170K
used as input.
bytes, was used as the input.
In order to know how each module in Alcatraz contributes
to the overhead, we performed three time measurements of
the sample application. They are the execution time with-
out any system call interception, the execution time with
only the system call interceptor, and the execution time with
full isolation system, respectively. The normalized execu-
tion time (ratio to the execution time without isolation and
without system call interposition) is shown in Figure 4.
From the performance results, we can see that the isola-
tion mechanism itself (the difference between the overhead
of “Interception Only” and the overhead of “Isolation”)
contributes to a modest overhead of less than 20%. How-
ever, the system call interposition mechanism contributes
to a signiﬁcant overhead for some programs. This over-
head varies linearly with the frequency of system calls made
by an application. Compute-intensive applications such as
gzip and picturepages make much fewer system calls
per unit time of execution, while other applications such as
tar make system calls at a much higher rate.
System call interception overhead can be signiﬁcantly
reduced (to under 10%) using an in-kernel implementation.
However, if we had based Alcatraz on kernel-based inter-
ception, it would be harder to port, and moreover, cannot be
downloaded, installed or run by users that do not have supe-
ruser privilege. Compared to this drawback, the additional
overhead seems to be quite acceptable for the class of ap-
plications targeted by Alcatraz.
4. Related work
Sandboxing systems. Janus [9] incorporates a /proc ﬁle
system based system call interposition technique for the So-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:46 UTC from IEEE Xplore.  Restrictions apply. 