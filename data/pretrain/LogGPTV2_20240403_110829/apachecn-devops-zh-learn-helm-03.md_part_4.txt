在 Kubernetes 中，修改部署时会创建新的 Pods。在 Helm 中可以观察到同样的行为。升级过程中添加的值引入了 WordPress 部署的配置更改，结果创建了新的 WordPress Pods，并更新了配置。使用安装后较早使用的相同的`helm get` `manifest`和`kubectl get` `deployment`命令可以观察到这些变化。
在下一节中，我们将执行更多的升级，以演示在升级过程中，值 s 有时会有不同的行为。
## 在升级过程中重用和重置值
`helm upgrade`命令包括两个额外的标志，用于操作`helm install`命令中没有的值。
现在让我们看看这些标志:
*   `--reuse-values`:升级时，重用上一个版本的值。
*   `--reset-values`:升级时，将数值重置为图表默认值。
如果执行升级时未提供带有`--set`或`--values`标志的值，则默认情况下会添加`--reuse-values`标志。换句话说，如果未提供任何值，则在升级期间将再次使用以前版本使用的相同值:
1.  运行另一个`upgrade`命令，但不指定任何值:
    ```
    $ helm upgrade wordpress bitnami/wordpress -n chapter3 --version 8.1.0
    ```
2.  Run the `helm get values` command to inspect the values used in the upgrade:
    ```
    $ helm get values wordpress -n chapter3
    ```
    请注意，显示的值与之前的升级相同:
    ![Figure 3.26 – The output of the helm get values ](img/Figure_3.26.jpg)
    图 3.26–输出`helm get values`
    当升级期间从命令行提供值时，可以观察到不同的行为。如果通过`--set`或`--values`标志传递值，所有未提供的图表值都将重置为默认值。
3.  通过提供带有`--set` :
    ```
    $ helm upgrade wordpress bitnami/wordpress --set replicaCount=1 -n chapter3 --version 8.1.0
    ```
    的单个值来运行另一个升级
4.  升级后，运行`helm get values`命令:
    ```
    $ helm get values wordpress -n chapter3
    ```
输出将声明用户提供的唯一值是`replicaCount`的值:
![Figure 3.27 – The output for replicaCount ](img/Figure_3.27.jpg)
图 3.27`replicaCount`的输出
当升级期间至少提供一个值时，Helm 会自动应用`--reset-values`标志。这将导致所有值被设置回默认值，除了带有`--set`或 `--values`标志的单个属性。
用户可以手动提供`--reset-values`或`--reuse-values`标志，以明确确定升级期间值的行为。如果您希望下一次升级在从命令行覆盖之前将每个值重置为默认值，请使用`--reset-values`标志。如果您希望在从命令行设置不同值时重复使用上一版本的每个值，请提供`--reuse-values`标志。为了帮助简化升级期间的值管理，请尝试将您的值保存在文件中，该文件可用于为每次升级声明性地设置值。
如果您一直遵循本章中提供的每一个命令，那么现在您应该有了 WordPress 版本的四个版本。第四个版本不完全符合我们希望的应用配置方式，因为它只指定了`replicaCount`值，因为大多数值都被设置回默认值。在下一节中，我们将探讨如何将 WordPress 版本回滚到包含所需值集的 stabl e 版本。
# 回滚 WordPress 发布
虽然前进是的首选，但在某些情况下，返回到应用的早期版本更有意义。存在`helm rollback`命令来满足这个用例。让我们让将 WordPress 版本返回到之前的状态。
## 查看 WordPress 历史
每一个版本都有一个**版本**的历史。修订版用于跟踪特定版本中使用的值、Kubernetes 资源和图表版本。安装、升级或回滚图表时，会创建一个新版本。默认情况下，修订数据保存在 Kubernetes 机密中(其他选项是 ConfigMap 或本地内存，由`HELM_DRIVER`环境变量决定)。这允许您的 Helm 版本由 Kubernetes 集群上的不同用户管理和交互，前提是他们拥有**基于角色的访问控制**(**RBAC**)允许他们查看或修改您命名空间中的资源。
可以通过使用`kubectl`从`chapter3`命名空间获取机密来观察修订机密:
```
$ kubectl get secrets -n chapter3
```
这将返回所有的机密，但是您应该在输出中看到这四个:
```
sh.helm.release.v1.wordpress.v1
Sh.helm.release.v1.wordpress.v2
sh.helm.release.v1.wordpress.v3
sh.helm.release.v1.wordpress.v4
```
这些机密中的每一个都对应于版本修订历史的一个条目，可以通过运行`helm history`命令来查看:
```
$ helm history wordpress -n chapter3
```
此命令将显示每个版本的表格，类似于以下内容(为了可读性，省略了一些列):
```
REVISION  ...  STATUS     ...  DESCRIPTION
1              superseded      Install complete
2              superseded      Upgrade complete
3              superseded      Upgrade complete
4              deployed        Upgrade complete     
```
在这个输出中，每个版本都有一个编号，以及更新时间、状态、图表、升级的应用版本和升级描述。状态为`superseded`的修订已升级。上面写着`deployed`的版本是当前部署的版本。其他状态包括`pending`和`pending_upgrade`，表示安装或升级正在进行中。`failed`指未能安装或升级的特定版本，`unknown`对应状态未知的版本。你不太可能遇到状态为`unknown`的版本。
通过指定`--revision`标志，可以针对修订号使用前面描述的`helm get`命令。对于这个回滚，让我们确定具有全套所需值的版本。大家可能还记得，当前版本`revision 4`只包含`replicaCount`值，但`revision 3`应该包含所需值。这可以通过运行带有`--revision`标志的`helm get values`命令来验证:
```
$ helm get values wordpress --revision 3 -n chapter3
```
完整的值列表通过检查此修订版呈现:
![Figure 3.28 – The output of checking a specific revision ](img/Figure_3.28.jpg)
图 3.28–检查特定版本的输出
可以针对修订号运行其他`helm get`命令，以执行进一步检查。如有必要，还可以对`revision 3`执行`helm get manifest`命令，以检查将被恢复为红色的 Kubernetes 资源的状态。
在下一节中，我们将执行回滚。
## 运行回滚
`helm rollback`命令具有以下语法:
```
helm rollback  [REVISION] [flags]
```
用户提供版本名称和所需的修订号，将 Helm 版本回滚到以前的时间点。运行以下命令执行 WordPress 回滚到`revision 3`:
```
$ helm rollback wordpress 3 -n chapter3
```
`rollback`子命令提供了一个简单的输出，打印以下消息:
```
Rollback was a success! Happy Helming!
```
通过运行`helm` `history`命令，可以在发布历史中观察到该回滚:
```
$ helm history wordpress -n chapter3
```
在发布历史中，您会注意到添加了第五个版本，状态为`deployed`，描述为`Rollback to 3`。当应用回滚时，它会向发布历史记录中添加新的修订。这不能与升级混淆。最高版本号只是表示当前部署的版本。请务必检查版本的描述，以确定它是通过升级还是回滚创建的。
您可以通过再次运行`helm get values`来获取此版本的值，以确保回滚现在使用所需的值:
```
$ helm get values wordpress -n chapter3
```
输出将显示最新稳定版本的值:
![Figure 3.29 – The values from the latest stable release ](img/Figure_3.29.jpg)
图 3.29–最新稳定版本的值
您可能会注意到，我们没有在`rollback`子命令中明确设置图表版本或版本值。这是因为`rollback`子命令不是为接受这些输入而设计的；它旨在将图表回滚到以前的版本，并利用该版本的图表版本和值。请注意，`rollback`子命令不应该是日常 Helm 实践的一部分，它应该只保留给应用的当前状态不稳定并且必须恢复到以前的稳定点的紧急情况。
如果您已经成功地回滚了 WordPress 发行版，您就接近本章练习的结尾了。最后一步是通过利用`uninstall`子命令将 WordPress 应用从 Kubernetes 集群中移除，我们将在下一节对此进行描述。
# 卸载 WordPress 版本
卸载一个 Helm 版本意味着删除它管理的 Kubernetes 资源。此外，`uninstall`命令删除发布的历史记录。虽然这通常是我们想要的，但是指定`--keep-history`标志将指示 Helm 保留发布历史。
`uninstall`命令的语法非常简单:
```
helm uninstall RELEASE_NAME [...] [flags]
```
通过运行`helm uninstall`命令卸载 WordPress 版本:
```
$ helm uninstall wordpress -n chapter3
```
卸载后，您将看到以下消息:
```
release 'wordpress' uninstalled
```
您还会注意到`wordpress`版本不再存在于`chapter3`名称空间中:
```
$ helm list -n chapter3
```
输出将是一个空表。您也可以通过尝试使用`kubectl`获取 WordPress 部署来确认版本不再存在:
```
$ kubectl get deployments -l app=wordpress -n chapter3
No resources found in chapter3 namespace.
```
正如预期的那样，没有更多的 WordPress 部署可用。
```
$ kubectl get pvc -n chapter3
```
但是，您会注意到名称空间中仍然有一个`PersistentVolumeClaim`命令可用:
![Figure 3.30 – Output showing PersistentVolumeClaim ](img/Figure_3.30.jpg)
图 3.30–输出显示`PersistentVolumeClaim`
这个`PersistentVolumeClaim`资源没有被删除，因为它是由`StatefulSet`在后台创建的。在 Kubernetes，如果删除了`StatefulSet`，由`StatefulSet`创建的`PersistentVolumeClaim`资源不会自动移除。在`helm uninstall`过程中，`StatefulSet`被删除，但相关的`PersistentVolumeClaim`没有被删除。这是我们所期望的。使用以下命令可以手动删除`PersistentVolumeClaim`资源:
```
$ kubectl delete pvc -l release=wordpress -n chapter3
```
现在，我们已经安装并卸载了 Wordpress，让我们清理一下您的 Kubernetes 环境，以便为我们将在本书后面章节中执行的 e 练习有一个干净的设置。
# 清理你的环境
要清理您的 Kubernetes 环境，您可以通过运行以下命令删除本章的名称空间:
```
$ kubectl delete namespace chapter3
```
删除`chapter3`命名空间后，还可以停止 Minikube VM:
```
$ minikube stop
```
这将关闭虚拟机，但将保持其状态，以便您可以在下一个练习中快速重新开始工作。
# 总结
在本章中，您学习了如何安装 Helm 图表并管理其生命周期。我们从搜索 Helm Hub 开始，寻找要安装的 WordPress 图表。找到图表后，包含该图表的存储库将按照其 Helm Hub 页面中的说明进行添加。然后，我们继续检查 WordPress 图表，创建一组覆盖默认值的值。这些值被保存到`values`文件中，然后在安装过程中提供。
图表安装后，我们使用`helm upgrade`通过提供附加值来升级版本。在此之后，我们使用`helm rollback`执行了回滚，以将图表恢复到以前的状态。最后，我们用`helm uninstall`删除了练习结束时的 WordPress 版本。
本章教你如何利用 Helm 作为最终用户和图表消费者。您使用 Helm 作为包管理器，将 Kubernetes 应用安装到集群中。您还通过执行升级和回滚来管理应用的生命周期。了解此工作流程对于使用 Helm 管理安装至关重要。
在下一章中，我们将更详细地探讨 Helm 图表的概念和结构，以开始学习如何创建图表。
# 进一步阅读
要了解有关在本地添加存储库、检查图表以及使用本章中使用的四个生命周期命令(`install`、`upgrade`、`rollback`和`uninstall`)的更多信息，请访问[https://helm.sh/docs/intro/using_helm/](https://helm.sh/docs/intro/using_helm/)。
# 问题
1.  什么是 Helm 枢纽？用户如何与它交互以找到图表和图表库？
2.  `helm get`和`helm show`组命令有什么区别？你什么时候会使用一组命令而不是另一组命令？
3.  `helm install`和`helm upgrade`命令中的`--set`和`--values`标志有什么区别？用一个比用另一个有什么好处？
4.  什么命令可以用来提供版本的修订列表？
5.  默认情况下，在不提供任何值的情况下升级版本会发生什么？当您为升级提供值时，这种行为有何不同？
6.  假设你有五个版本。将释放回滚到`revision 3`后`helm history`命令会显示什么？
7.  假设您想要查看部署到 Kubernetes 名称空间的所有版本。应该运行什么命令？
8.  假设您运行`helm repo add`来添加图表库。您可以运行什么命令来列出该存储库下的所有图表？