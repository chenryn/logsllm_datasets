x34
x44
x54
x64
x74
x84
Figure 1: A database table (top) and its interval tree for columns 1
and 2 (bottom). Leaves are sorted based on the key xi1.
Note that the right-most component in (1) is simply acc(Tu), and
the left-most value is an encryption of the corresponding exponent.
Roughly, the right-most component is used by the server to process
all queries on a static database; the left-most component is used
by the server and data owner jointly when the data owner wishes to
update the database. In that case, we will rely on the fact that, given
the secret key sk, the value of an internal node can be computed as
a (randomized) function f of the values of its two children.
Figure 1 shows an example of an interval tree computed for
columns 1 and 2 of the depicted table.
For each table T in the outsourced database, and each pair of
columns i, j (where we may have i = j), Setup computes an AIT
for Si×j as described above. (Note that AIT does not use any Init
algorithm.) In addition, Setup computes a hash H of each row in
each table.5 Figure 2 gives pseudocode for Init and Setup of the
overall ADS. (Note that although the ASOSetup algorithm does
not appear explicitly, it is called by AITSetup when computing the
function fs,sk from Equation 1.) We assume the attributes of D are
public, or else are included as part of the digest.
Algorithm (skD, pkD) ← Init(1λ)
• (s, pkASO) ← ASOInit(1λ), where s is as in Section 3.1.
• Choose secret key sk for encryption scheme Enc.
• Output skD = (s, sk) and pkD = pkASO.
Algorithm ( ˜D, δ) ← Setup(D, skD)
• For each table T in D, with n rows:
for every pair of columns i, j:
i×j = {(x1i, x1j), . . . , (xni, xnj)}.
(ST
(a) Let ST
i×j) ← AITSetupfs,sk
(b) (δT
function fs,sk is deﬁned in Equation 1.
i×j, aitT
i×j,⊥), where
• For each table T in D, with n rows and m columns:
for every row i:
set hT
i = H(xi1, . . . , xim).
• The authenticated database ˜D includes all the aitT
i×j. The digest
i×j and all the hashes hT
i .
δ includes all the digests δT
Figure 2: The Init and Setup algorithms of INTEGRIDB.
Intuitively, the accumulation value stored in each node will be
used to handle JOIN and multidimensional range queries using
the underlying ASO scheme, as shown in Sections 4.2 and 4.3.
Section 4.4 shows how SQL functions can also be supported. The
encryption of the exponent in each node helps to perform updates
efﬁciently, as will be described in Section 4.5.
Digest size and setup complexity. Let mi and ni be the number of
columns and rows in table i. The size of the secret key is O(1). The
size of the digest δ is O((cid:80) m2
do in our implementation). The setup complexity is O((cid:80)
to O(1) by outsourcing the digest itself using a Merkle tree (as we
i ni).
i +(cid:80) ni), but this can be reduced
i m2
4.2
Join Queries
We ﬁrst describe how to handle a JOIN query involving two
columns, neither of which contains any duplicate values; we dis-
cuss how to deal with duplicates below. (Generalizing to more than
two columns is straightforward.) Consider a JOIN query involving
column i of table T and column j of table T (cid:48). Let Ci and C(cid:48)
j be the
set of values contained in each of the respective columns. Observe
i×i using kL = −∞ and kR = ∞
that a RangeCover query on ST
will return, in particular, the value stored at the root of the AIT
associated with ST
i×i; this value contains acc(Ci). An analogous
query on ST (cid:48)
j). Making an intersection query using
the ASO scheme results in the set C∗ = Ci ∩ C(cid:48)
j of all values in
5A Merkle tree over the elements of each row could also be used
here, but in practice (assuming the number of columns is small)
doing so will not have much effect.
j×j yields acc(C(cid:48)
11131924273647591119274713362441()x51()x71()x11()x81()x61()x31()x21()x31key47x41key11x113222()()113222valueEnc(()())||xsxsskxsxsg42valuexj are large.
k in the digest.
i×i (resp., ST (cid:48)
A point to stress here is that the client does not need Ci, C(cid:48)
common. For each such value x ∈ C∗, the server returns the entire
row in T (resp., T (cid:48)) containing x in the appropriate column; the
client veriﬁes the result by checking that x is in the correct position
of the claimed row k, and then hashing the row and ensuring that it
matches the corresponding hash value hT
j in
order to verify the intersection C∗; instead, it only needs acc(Ci),
acc(C(cid:48)
j). This ensures that the entire proof sent back by the server
is proportional to the size of the ﬁnal result, which is important
when C∗ is small even though Ci, C(cid:48)
Handling duplicates. The above approach can be modiﬁed easily
to deal with the (possible) presence of duplicates in one or both of
the columns. We view the columns as multisets when computing
their intersection. Then, for each unique x ∈ C∗ we use a Search
query on the AIT associated with ST
j×j); the result
indicates exactly how many entries in column i of T (resp., column
j of table T (cid:48)) have value x. The client then simply needs to verify
that the server returns the correct number of rows from each table.
Pseudocode for Prove and Verify algorithms for handling JOIN
queries, taking duplicates into account, is given in Figure 3. (To
make them easier to read, the algorithms are presented somewhat
informally and we omit small implementation optimizations. The
algorithms are presented assuming a JOIN query involving two
columns/tables, but can be extended for the general case.) We use
RC in place of RangeCover, and let Rx denote the set of rows
in T containing x in column i.
x similarly.) Algo-
rithms in Figure 3 refer to proving and verifying Rx and R(cid:48)
x for
x ∈ C∗; the result of the JOIN query can be easily computed from
{Rx, R(cid:48)
x}x∈C∗ and this is not much larger than the result itself.
Assume a JOIN query on columns T.i and T (cid:48).j.
Algorithm Prove
• (acc(Ci), πi) := AITProve(ST
j) := AITProve(ST (cid:48)
• (acc(C(cid:48)
• (C∗, π∩) := ASOProve(Ci, Cj, acc(Ci), acc(C(cid:48)
• For each unique element x ∈ C∗:
i×i, (RC,−∞,∞)).
j×j, (RC,−∞,∞)).
i×i, aitT
j×j, aitT (cid:48)
(Deﬁne R(cid:48)
j), “∩”).
j), π(cid:48)
– (|Rx|, πx) = AITProve(ST
x) := AITProve(ST (cid:48)
– (|R(cid:48)
x|, π(cid:48)
i×i, aitT
j×j, aitT (cid:48)
i×i, (Search, x)).
j×j, (Search, x)).
• R := {Rx, R(cid:48)
• π := (C∗, acc(Ci), acc(C(cid:48)
x}x∈C∗.
j), πi, π(cid:48)
j, π∩,{πx, π(cid:48)
x}x∈C∗ ).
Algorithm Verify
• Verify πi, π(cid:48)
• For all x ∈ C∗ and r ∈ Rx (resp., r(cid:48) ∈ R(cid:48)
j, π∩ and {πx, π(cid:48)
x}x∈C∗.
x), verify that:
– r (resp., r(cid:48)) contains x in T.i of T (resp., in T (cid:48).j of T (cid:48)).
k (resp., δT (cid:48)
– H(r) (resp., H(r(cid:48))) is equal to a (distinct) δT
k ).
Figure 3: Handling JOIN queries on two tables.
Security. We brieﬂy sketch why this is secure. The security of
AIT ensures that acc(Ci) and acc(C(cid:48)
Ci, C(cid:48)
curity of AIT then ensures that |Rx| (resp., |R(cid:48)
j. Security of ASO then guarantees that C∗ = Ci ∩ C(cid:48)
j) reﬂect the correct (multi)sets
j. Se-
x|) is a correct count
of the number of rows in T (resp., T (cid:48)) that contain x in column i
(resp., column j). The client then veriﬁers that each row in Rx, R(cid:48)
contains x in the appropriate column, and is unaltered.
Complexity. The proof size and veriﬁcation time are ˜O(|R|), where
R is the ﬁnal result. This is independent (up to logarithmic factors)
of the sizes of any intermediate results or the original tables.
4.3 Multidimensional Range Queries
x
Fix a table T , and let xij refer to the value in row i and column j
of T . Consider a two-dimensional range query on columns w and z
of T , with bounds [w−, w+] and [z−, z+], which should return
every row i in which w− ≤ xiw ≤ w+ and z− ≤ xiz ≤ z+.
(Extending our approach to larger dimensions is straightforward.
We also mention below how to handle OR instead of AND.)
We require a (known) column in T in which every element is
guaranteed to be distinct; we refer to this as the reference column.
Such a column is often present, anyway (e.g., serving as a row key);
if not, then such a column can be added before Setup is run. We
assume for simplicity in what follows that column 1 is the reference
column, and moreover that it simply contains the row number.
Let Rw denote the indices of the rows in which the element in
column w in within the speciﬁed bounds; i.e., i ∈ Rw if and only
if w− ≤ xiw ≤ w+. Deﬁne Rz similarly. In our protocol, the
client will (veriﬁably) learn R∗ = Rw ∩ Rz, from which veriﬁably
obtaining the rows themselves is trivial (using {hT
w×1, us-
ing bounds w−, w+, will return a set of nodes Nw = {n1, . . .} that
constitute the minimal covering set for the leaves in ST
w×1 contain-
ing keys (i.e., elements in column w) in the speciﬁed range. Each
node n ∈ Nw contains acc(Cn) such that
i }i∈R∗).
The key observation is that a RangeCover query on ST
Cn = Rw.
(2)
z×1, using bounds z−, z+,
Similarly, a RangeCover query on ST
will return a set of nodes Nz; each n ∈ Nz contains acc(Cn) with
Cn = Rz.
(3)
(cid:91)
n∈Nw
(cid:91)
(cid:32) (cid:91)
n∈Nz
We can therefore express the desired answer as
(cid:33)(cid:92)(cid:32) (cid:91)
(cid:33)
Cn
n∈Nw
Cn
;
n∈Nz
∗
R
=
correctness of this answer can then be veriﬁed using ASO, given
{acc(Cn)}n∈Nw and {acc(Cn)}n∈Nz .
Note that by using union instead of intersection we can handle
disjunctive queries in addition to conjunctive queries.
Security. The security of AIT ensures that the client obtains val-
ues {acc(Cn)}n∈Nw and {acc(Cn)}n∈Nz for sets {Cn}n∈Nw and
{Cn}n∈Nz such that Equations (2) and (3) hold. Security of ASO
then implies that the claimed value of R∗ is correct. Finally, the
row hashes guarantee that the returned rows have not been altered.
Complexity. Consider a multidimensional range query of dimen-
sion d. The proof size is O(d·log n) and the veriﬁcation complexity
is O(d log n + |R|). We stress that the proof size is independent
of the sizes of any intermediate results (e.g., the sets Rw, Rz from
above), or the size of the original table (up to logarithmic factors).
Although we introduce a logarithmic overhead in proof size and
veriﬁcation time as compared to [33], our scheme supports efﬁcient
updates (as we describe later).
4.4 SQL Functions
Here we describe how we can support various SQL functions
on entire columns of the original tables in the database. In some
sense, this is not very interesting since all the answers could be
precomputed for each column at the time the original database is
outsourced. These become more interesting, however, when we
consider nested queries in Section 4.6.
Summation. As acc(Cj) is stored in the root of ST
j×j (where Cj
denotes the set of elements in the jth column of T ), the client can
obtain and verify this value for any desired column j. Since ASO
supports sum queries, the client can then verify a claimed sum over
that column. The proof size and veriﬁcation time are both O(1).
Count and average. We can reduce a COUNT query (on a column
guaranteed to contain no duplicates) to two SUM queries as follows:
for each column j of the original table, we include an additional
column j(cid:48) in which each entry is one more than6 the corresponding
entry in column j. (I.e., xij(cid:48) = xij + 1 for all i.) Note that if
column j contains no duplicates, then neither does column j(cid:48). To
perform a COUNT query on column j, the client issues SUM queries
on columns j and j(cid:48) and then takes the difference.
An AVG query can be answered by simply dividing the result of
a SUM query by the result of a COUNT query.
Maximum and minimum. We can reduce MAX/MIN queries to a
single-dimensional range query. For example, to answer a query
“SELECT MAX(j) FROM T ,” the server ﬁrst computes jmax, the
maximum value in column j. It then returns a (veriﬁable) answer
to the query “SELECT * FROM T WHERE j ≥ jmax.” The client
veriﬁes the answer and, if multiple rows are returned, also checks
that the values in column j are all the same. (Note there may be
multiple rows containing jmax in column j.)
4.5 Updates
To insert/delete a row, the data owner and server jointly update
the corresponding AIT and ASO ADSs using their respective in-
terfaces; we provide further details below.
In addition, the data
owner adds/removes a hash of the inserted/deleted row.
Recall that the value stored at an internal node is an accumula-
tion value along with an encryption of the relevant exponent. The
data owner uses the encrypted values to update accumulation val-
ues during an insertion or deletion. For example, in Figure 4 there
is a rotation (to maintain a balanced tree) after an update in the in-
terval tree. Before the rotation we have gfA, gfB , gfC , gfB fC , and
gfAfB fC (and encryptions of the respective exponents) stored in
nodes A, B, C, Y , and X, respectively. To compute gfAfB after
the rotation, the data owner decrypts to recover fA, fB, computes
gfAfB , and sends updated values (including an encryption of the
new exponent) to the server. This can be done using O(1) rounds
of communication between the data owner and the server.
Complexity. The complexity of updating one AIT is O(log n),
where n is the number of rows in the table being updated. Since
each table corresponds to m2 interval trees, the overall complexity
√
of an update is O(m2 log n). The complexity of updates in [33] is
n), which is slower in practice because m (cid:28) n. (Typical
O(m
values might be m < 20 and n ≈ 106.)
SQL supports more general updates involving all rows satisfying
a given constraint. To perform this type of update, the data owner
can ﬁrst make a query with the same constraints to learn which