 创建表 films 和 distributors：
.sp
.nf
CREATE TABLE films (
    code        char(5) CONSTRAINT firstkey PRIMARY KEY,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
);
.sp
.fi
.sp
.nf
CREATE TABLE distributors (
     did    integer PRIMARY KEY DEFAULT nextval('serial'),
     name   varchar(40) NOT NULL CHECK (name <> '')
);
.sp
.fi
.PP
 创建一个带有 2 维数组的表：
.sp
.nf
CREATE TABLE array (
    vector  int[][]
);
.sp
.fi
.PP
 为表 films 定义一个唯一表约束。 唯一表约束可以在表的一个或多个字段上定义：
.sp
.nf
CREATE TABLE films (
    code        char(5),
    title       varchar(40),
    did         integer,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute,
    CONSTRAINT production UNIQUE(date_prod)
);
.sp
.fi
.PP
 定义一个检查列约束：
.sp
.nf
CREATE TABLE distributors (
    did     integer CHECK (did > 100),
    name    varchar(40)
);
.sp
.fi
.PP
 定义一个检查表约束：
.sp
.nf
CREATE TABLE distributors (
    did     integer,
    name    varchar(40)
    CONSTRAINT con1 CHECK (did > 100 AND name <> '')
);
.sp
.fi
.PP
 为表 films 定义一个主键表约束。 主键表约束可以定义在表上的一个或多个字段。
.sp
.nf
CREATE TABLE films (
    code        char(5),
    title       varchar(40),
    did         integer,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute,
    CONSTRAINT code_title PRIMARY KEY(code,title)
);
.sp
.fi
.PP
 为表 distributors 定义一个主键约束。 下面两个例子是等效的，第一个例子使用了表约束语法， 第二个使用了列约束表示法。
.sp
.nf
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    PRIMARY KEY(did)
); 
.sp
.fi
.sp
.nf
CREATE TABLE distributors (
    did     integer PRIMARY KEY,
    name    varchar(40)
);
.sp
.fi
.PP
 下面这个例子给字段 name 赋予了一个文本常量缺省值， 并且将字段 did 的缺省值安排为通过选择序列对象的下一个值生成。 modtime 的缺省值将是该行插入的时候的时间。
.sp
.nf
CREATE TABLE distributors (
    name      varchar(40) DEFAULT 'Luso Films',
    did       integer DEFAULT nextval('distributors_serial'),
    modtime   timestamp DEFAULT current_timestamp
);
.sp
.fi
.PP
 在表 distributors 上定义两个 NOT NULL 列约束，其中之一明确给出了名字：
.sp
.nf
CREATE TABLE distributors (
    did     integer CONSTRAINT no_null NOT NULL,
    name    varchar(40) NOT NULL
);
.sp
.fi
.PP
 为 name 字段定义一个唯一约束：
.sp
.nf
CREATE TABLE distributors (
    did     integer,
    name    varchar(40) UNIQUE
);
.sp
.fi
 上面的和下面这样作为一个表约束声明是一样的：
.sp
.nf
CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    UNIQUE(name)
);
.sp
.fi
.SH "COMPATIBILITY 兼容性"
.PP
\fBCREATE TABLE\fR 遵循 SQL92 和 SQL99 的一个子集，一些例外情况在下面列出。
.SS "TEMPORARY TABLES 临时表"
.PP
 尽管 CREATE TEMPORARY TABLE 的语法和 SQL 标准的类似， 但是效果是不同的。在标准里，临时表只是定义一次并且自动存在（从空内容开始）于任何需要它们的会话中。 PostgreSQL 要求每个会话为它们使用的每个临时表发出它们自己的 CREATE TEMPORARY TABLE 命令。 这样就允许不同的会话将相同的临时表名字用于不同的目的，而标准的实现方法则把一个临时表名字约束为具有相同的表结构。
.PP
 标准定义的临时表的行为被广泛地忽略了。PostgreSQL  在这方面上地行为类似于许多其它 SQL 数据库
.PP
 标准中在全局和局部地临时表之间的区别在 PostgreSQL  里不存在，因为这种区别取决于模块的概念，而 PostgreSQL  没有这个概念。出于兼容考虑，PostgreSQL 将接受临时表声明中的 GLOBAL 和 LOCAL 关键字， 但是他们没有作用。
.PP
 临时表的 ON COMMIT 子句也类似于 SQL 标准， 但是有些区别。如果忽略了 ON COMMIT 子句，SQL 声明缺省的行为是 ON COMMIT DELETE ROWS。 但是 PostgreSQL 里的缺省行为是 ON COMMIT PRESERVE ROWS。 在 SQL 里不存在 ON COMMIT DROP。
.SS "COLUMN CHECK CONSTRAINTS 字段检查约束"
.PP
 SQL 标准说 CHECK 字段约束只能引用他们施用的字段； 只有 CHECK 表约束才能引用多个字段。PostgreSQL 并不强制这个限制；它把字段和表约束看作相同的东西。
.SS "NULL ``CONSTRAINT'' NULL约束"
.PP
NULL "约束"（实际上不是约束）是 PostgreSQL 对 SQL 标准的扩展， 包括它是为了和其它一些数据库系统兼容（以及为了和 NOT NULL 约束对称）。因为它是任何字段的缺省，所以它的出现只是噪音而已。
.SS "INHERITANCE 继承"
.PP
 通过 INHERITS 子句的多重继承是 PostgreSQL 语言的扩展。 SQL99（但不包括 SQL92）使用不同的语法和语义定义了单继承。 SQL99 风格的继承还没有在 PostgreSQL 中实现。
.SS "OBJECT IDS 对象ID"
.PP
PostgreSQL 的 OID 的概念不标准。
.SS "ZERO-COLUMN TABLES 零行表"
.PP
PostgreSQL 允许创建没有字段的表 （比如，CREATE TABLE foo();）。这是对 SQL 标准的扩展， 标准不允许存在零字段表。零字段表本身没什么用，但是禁止他们会给 ALTER TABLE DROP COLUMN带来很奇怪的情况，所以，这个时候忽视标准的限制好想很清楚。
.SH "SEE ALSO 参见"
ALTER TABLE [\fBalter_table\fR(7)], DROP TABLE [\fBdrop_table\fR(l)]
.SH "译者"
.B Postgresql 中文网站
.B 何伟平 