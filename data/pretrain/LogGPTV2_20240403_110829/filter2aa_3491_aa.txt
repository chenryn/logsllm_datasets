# Over-the-Air Remote Code Execution on the DEF CON 27 Badge via NFMI

## World’s First NFMI Exploitation, Sort Of
or
OTARCEDC27NFMIOMGWTFBBQ

### Agenda
1. Introduction
2. Introduction to the Badge
3. Buffer Overflow and Proof of Concept
4. NFMI Specifications
5. Converting Analog Signals into Symbols
6. Converting Symbols to Bytes
7. Reverse Engineering CRC, Crafting Packets
8. Remotely Crashing the Badge
9. Hacking NFMI Firmware
10. OTA RCE Demos

> "Because Any Meeting without an Agenda is a Trap"

## Introduction
- **Seth Kintigh**
  - Hardware Security Development Lifecycle Engineer at Dell
  - Hobbyist programmer since 1987
  - Learned cipher breaking from his grandmother; mother was a meteorologist and COBOL programmer; father is an Electrical Engineer
  - Graduated from WPI with:
    - BS in Electrical Engineering (EE) with minors in Computer Science (CS) and Physics
    - MS in EE with a concentration in cryptography and information security
  - Started career as an EE but shifted to network security in 2004
  - Specializes in low-level and layered systems

## Near Field Magnetic Induction (NFMI)
- **Overview:**
  - A short-range wireless physical layer that communicates using a tight, low-power, non-propagating magnetic field between devices.
  - The transmitter coil modulates a magnetic field, which is measured by a receiver coil in another device.
  - Not radio! Radio waves decay at \( \frac{1}{r^2} \), while magnetic fields decay at \( \frac{1}{r^6} \).
  - Very short range, typically up to 2 meters, with badge-to-badge communication in the tens of centimeters.
  - Short range enhances security.
  - Low absorption by body tissue, making it suitable for "Body Area Networks."
  - More efficient than radio over short distances.
  - Used in some hearing aids and proximity cards as part of the NFC protocol.

- **Sources:**
  - [Wikipedia](https://en.wikipedia.org/wiki/Near-field_magnetic_induction_communication)
  - [NXP](https://www.nxp.com/products/wireless/miglo/nfmi-radio-for-wireless-audio-and-data-streaming:NXH2261UK)

## Almost No Information Available
- High levels of secrecy in hearing aid technology (possibly due to Apple earbuds).
- No datasheets or protocol information.
- No development kits or samples.
- NDA required with minimum orders in the hundreds of thousands of units.

## Software Defined Radio (SDR)
- Functions once performed by specialized hardware can now be done in software.
- **Tools Used:**
  - GNURadio for modulation and demodulation.
  - HackRF for tuning and receiving/transmitting signals.
  - Coil (electromagnet) instead of an antenna.
  - Python for additional tasks such as packet extraction, unmasking, symbol conversion, and CRC computation.

## Key Terms
- **Buffer Overflow:**
  - Writing data to a stack variable until the return address of a function is overwritten, allowing control flow to be redirected.
- **SWD/J-TAG:**
  - Low-level debugging interface for hardware, similar to GDB, allowing register and memory read/write, clock stepping, etc.
- **Convolutional Code:**
  - Error-correcting code that generates parity symbols via the sliding application of a boolean polynomial function to a data stream.

## The DEF CON 27 Badge Game
- **Badge Features:**
  - Communication via NFMI, LEDs, and beep depending on activity.
  - Part of a game requiring communication with "magic" versions of different badge types (Speaker, Village, Contest, Artist, Goon).
  - Prize: A piezoelectric rick-roll.
  - Made from crystalline stone, with detailed manufacturing process available.

- **Hardware:**
  - MCU, NFMI chip, LEDs, and piezoelectric speaker.
  - MCU communicates with the NFMI chip via UART.
  - During bootup, the MCU loads firmware, including an NFMI protocol patch, which is then sent to the NFMI chip.

- **Debug Interfaces:**
  - Pads for serial and SWD communication with the MCU.
  - Serial port for terminal interface.
  - JTAG/SWD for rewriting and full debugging control over the MCU.

## Padding UART for Fun and Profit
- **Transmission Process:**
  - Badge MCU transmits 8 bytes, padded to 18 bytes.
  - Sent via UART to the NFMI chip.
  - NFMI chip unpads and transmits.
  - Receiving NFMI repads data and sends it back via UART to the MCU.
  - MCU strips padding and places data in a ring buffer for processing.

## Buffer Overflow
- **Discovery:**
  - Found a buffer overflow during reverse engineering of the firmware.
  - Verified exploitability by simulating a large packet and writing it directly to the MCU’s ring buffer.
  - Badge executed the injected code, confirming the vulnerability.

## NFMI Specifications
- **Challenges:**
  - Limited information available.
  - Some details from marketing pamphlets, blogs, and FCC filings.
  - Center frequency, bandwidth, and modulation schemes are partially known.

## Analyzing the Analog Signal
- **Signal Structure:**
  - Pattern of 8 bursts every 4.8 seconds.
  - Each burst has 4 sections.
  - Section 1: Timing signal using trinary FSK modulation.
  - Section 2: Preambles.
  - Section 3: Additional timing data.
  - Section 4: Data packets, repeated 271 times.

- **Modulation:**
  - D8PSK/8-DPSK modulation.
  - PSK modulations transmit data by modulating a carrier frequency using cosine "I" and sine "Q" inputs.
  - Constellation of 8 points, each representing a phase (symbol).

- **Reverse Engineering:**
  - Used HackRF and GNURadio to demodulate the signal.
  - Published working examples on GitHub.

## Dealing with Noise and Nulls
- **Challenges:**
  - Varying copies of section 4, partly due to noise.
  - Structure includes null symbols, which initially appeared as noise.
  - Possible relation to NXP’s CoolFlux BSP audio chip, which uses nulls in OFDM-DQPSK signals.

- **Symbol Analysis:**
  - Plotted symbols by phase and delay to identify patterns and structure.

This document provides a comprehensive overview of the Over-the-Air Remote Code Execution on the DEF CON 27 Badge via NFMI, detailing the technical challenges, tools, and methods used in the process.