petition. The petition instance speciﬁes an identiﬁer gs ∈ G1
unique to the petition where its representation is unlinkable to
the other points of the scheme12, as well as the veriﬁcation key
of the authorities issuing the credentials and any application
speciﬁc parameters (e.g., the options and current votes) (). In
order to sign a petition, the citizens compute a value ζ = gk
s .
They then adapt the zero-knowledge proof of the ProveCred
algorithm of Section III-D to show that ζ is built from the
same attribute k in the credential; the petition contract checks
the proofs and the credentials, and checks that the signature
is fresh by verifying that ζ is not part of a spent list. If
all the checks pass, it adds the citizens’ signatures to a list
of records and adds ζ to the spent list to prevents a citizen
from signing the same petition multiple times (prevent double
spending) (). Also, the zero-knowledge proof ensures that ζ
has been built from a signed private key k; this means that
the users correctly executed the callback to prove that they are
citizens of C.
Security consideration. Coconut’s blindness property prevents
the authorities from learning the citizen’s secret key, and
misusing it to sign petitions on behalf of the citizen. Another
beneﬁt
lets citizens sign petitions anonymously;
citizens only have to go through the issuance phase once,
and can then re-use credentials multiple times while staying
anonymous and unlinkable across petitions. Coconut allows for
distributed credentials issuance, removing a central authority
and preventing a single entity from creating arbitrary creden-
tials to sign petitions multiple times.
is that
it
C. Censorship-resistant distribution of proxies
Proxies can be used to bypass censorship, but often become
the target of censorship themselves. We present a system based
on Coconut for censorship-resistant distribution of proxies
(CRS). In our CRS, the volunteer V runs proxies, and is known