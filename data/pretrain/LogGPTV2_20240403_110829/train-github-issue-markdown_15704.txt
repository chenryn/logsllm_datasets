Right now `test.step` resolves to `undefined`.
It would be great if it resolved to the value the callback resolves to, so we
could have tests like this:
    test('test something', async ({ pageObject, page }) => {
      await pageObject.navigateTo();
      const link = await test.step('is able to retrieve a link', async () => {
        const link = await pageObject.getLink();
        // tests...
        expect(link).toBe(blabla);
        return link;
      });
      await test.step('link is accessible', async () => {
        await page.goto(link)
        // tests...
        expect(page.locator('#my-element')).toBeVisible();
      });
    })
Right now the workaround is to have `let` variables before the step (notice
the `!` to avoid type errors):
    test('test something', async ({ pageObject, page }) => {
      await pageObject.navigateTo();
      let link!: string
      await test.step('is able to retrieve a link', async () => {
        link = await pageObject.getLink();
        // tests...
        expect(link).toBe(blabla);
      });
      await test.step('link is accessible', async () => {
        await page.goto(link)
        // tests...
        expect(page.locator('#my-element')).toBeVisible();
      });
    })
I'm free to work on this if it is something that would be accepted in the
library.