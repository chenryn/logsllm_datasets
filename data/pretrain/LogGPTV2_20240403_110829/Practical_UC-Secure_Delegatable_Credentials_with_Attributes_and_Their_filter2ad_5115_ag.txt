In this section, we describe a practical application of delegatable cre-
dentials with attributes to a membership service for a permissioned
blockchain. We also report on the implementation of this scheme,
demonstrating the practicality of our construction for real-world
applications.
Blockchain is a distributed immutable ledger widely used in
cryptocurrencies and beyond for different kinds of transactions.
Blockchain is the basis for Bitcoin [32], which greatly helped to pop-
ularize distributed cryptographic protocols. Bitcoin is an example
of a permissionless blockchain, i.e., anyone can submit transactions
and anyone with the sufficient computational power can join in
maintaining the ledger. However, for some applications including,
in particular, many enterprise scenarios, only designated parties
should be allowed to submit transactions or be able to modify the
state of the blockchain. Thus, mechanisms for identity verification
and for moderation of who can add and modify the blockchain
entries need to be in place. Furthermore, it is often necessary that
all transactions can be audited.
These requirements are addressed by permissioned blockchains,
sometimes also called private blockchains. To this end, a permis-
sioned blockchain entails a so-called membership service that issues
credentials to the members of the chain and provides mechanisms
to enable transaction signing, authentication, access control, revo-
cation of credentials, and auditing of the transactions. However,
all transactions being traceable can violate the privacy and secu-
rity requirements. Therefore, anonymous credentials are a perfect
fit to implement a privacy-preserving membership service. Below
we describe how to implement a membership service with ordi-
nary anonymous credentials and then show how to extend it to
incorporate delegateable credentials.
6.1 Privacy-Preserving Membership Service
The membership service realized with an anonymous credential
scheme works as follows.
Setup. The Certificate Authority (CA) is set up by generating
the signing key pair and making the public key available to the
blockchain participants.
Certificate Issuance. A blockchain participant generates a secret
key and creates a request for a membership certificate. The CA
issues a membership certificate as an anonymous credential. The
certificate also contains the attributes associated with the partici-
pant. These can then be used to implement (attribute-based) access
control for transactions. The certificate is stored together with the
corresponding credential secret key by the participant.
Signing Transactions. When a blockchain member needs to sign
a transaction, it generates a fresh unlinkable presentation token
that: 1) signs the transaction content; 2) proves a possession of
a valid membership credential issued by the CA; 3) discloses the
attributes that are required by the access control policy for the
transaction.
To enable certificate revocation and auditing, the token can also
prove in zero-knowledge: 4) that the certificate was not revoked
with respect to the revocation information published by the mem-
bership service (or a designated revocation authority); 5) provide a
ciphertext that contains the credential identifier encrypted under
the auditor’s public encryption key (so that only the auditor can
decrypt it) and a ZK proof that the same credential identifier is
contained in the membership certificate, without disclosing the
identifier itself.
Implementing a membership service like this preserves trans-
action privacy and unlinkability and enables transaction auditing
and membership revocation. However, when many different orga-
nizations run blockchain and many users from these organizations
participate in transactions, it is hardly practical to deploy a single
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA695membership service (the CA) because of the issuance workload
and also because it introduces a single point of trust and failure.
While introducing a two or more level hierarchy of CAs could be a
solution, this approach would have a serious impact on the privacy
and confidentiality of the system, as argued earlier. In the next
section we, therefore, describe how to use delegatable credentials
for this task to preserve privacy and unlinkability of transactions.
6.2 Hierarchical Membership Service from
Delegatable Credentials with Attributes
A membership service implemented with a two-level DAC is as
follows. The root CA will be the issuer providing Level-1 credentials
with the suitably chosen attributes to the local CAs. The local CAs
issue Level-2 credentials to the blockchain members, certifying the
attributes of every member. Blockchain members can use Level-2
credentials to unlinkably sign transactions, selectively disclosing
Level-2 attributes (and possibly Level-1 attributes, if required by
the application). Signatures on transactions can thus be verified
with the root CA’s public key only, without leaking any informa-
tion about the local CAs. With this approach, the issuance and
identity management workload is distributed among the different
organization running the system without compromising privacy.
The number of delegation levels can be increased to support differ-
ent hierarchies based on the organizational structure and will still
preserve the privacy of all intermediate CAs.
Enhancing Trust in the Root CA by Distribution. To avoid a single
point of trust and failure at the root CA, the first level issuance
procedures (issuance of Level-1 credentials) can be realized as a
multiparty computation. Due the algebraic properties of the Groth
signature scheme [29] that we use, such multiparty computation
can be efficiently implemented using known techniques [5, 22]. Es-
sentially, the parties will have to generate a random share, compute
its inverse and then three distributed exponentiations. Also, issuing
root credentials is probably the least frequent operation and less
critical for the system’s performance compared to the delegations
at other levels. Thus the loss of efficiency due to the distribution of
the root issuance will hardly have an effect in real deployments.
6.3 Implementation and Performance Analysis
We have implemented a prototype of our concrete instantiation
for delegatable credentials in the C programming language, using
the Apache Milagro Cryptographic Library (AMCL) with a 254-bit
Barreto-Naehrig curve [2]. This prototype generates and verifies
Level-2 attribute tokens. The prototype shows the practicality of
our construction: generating an attribute token without attributes
takes only 27 ms, and verification requires only 20 ms, on a 3.1GHz
Intel I7-5557U laptop CPU. Table 2 shows performance figures when
presenting tokens with attributes. Adding undisclosed attributes in
the first credential link (that is, increasing n1) adds roughly 6 ms to
the token generation time per attribute, while adding undisclosed
attributes in the second link (thus increasing n2) adds 11 ms. For
verification, every added undisclosed attribute increases verification
time by 5 ms. Table 2 also shows that our estimated timings in
Table 1 are accurate: the estimated values are close to the measured
timings and our estimates are even a bit conservative. We plan
n1
0
1
2
3
4
0
0
0
0
1
2
n2
0
0
0
0
0
1
2
3
4
1
1
PRESENT VERIFY EST. PRES. EST. VERIFY
26.9 ms
32.7 ms
38.1 ms
44.0 ms
49.5 ms
38.6 ms
49.4 ms
61.5 ms
72.6 ms
43.7 ms
49.3 ms
21.65 ms
27.45 ms
33.25 ms
39.05 ms
44.85 ms
27.13 ms
32.61 ms
38.09 ms
43.57 ms
32.93 ms
38.73 ms
20.2 ms
25.4 ms
30.9 ms
36.1 ms
41.4 ms
24.8 ms
29.2 ms
34.1 ms
38.7 ms
30.1 ms
35.4 ms
31.21 ms
38.53 ms
45.85 ms
53.17 ms
60.49 ms
40.84 ms
50.47 ms
60.10 ms
69.73 ms
48.16 ms
55.48 ms
Table 2: Performance measurements of presenting and veri-
fying Level-2 credentials, and our estimated timings follow-
ing the computation of Table 1. No attributes are disclosed.
to release our prototype implementation as open source software.
Currently it is available upon request.
7 CONCLUSION
The first practical delegatable credential system with attributes pre-
sented in this paper addresses the basic privacy and security needs
of a public key infrastructure and, in particular, the requirements of
a membership service of a permissioned blockchain. However, there
are a number of additional functionalities that could be considered,
such as key life cycle management, revocation, and support for
auditable tokens. We expect that the solutions for these extensions
known for the ordinary anonymous credentials to be applicable
here as well. Of course, any of these extensions would require to
modify our ideal functionality ℱdac, as would the extension of a
distributed issuance of Level-1 credentials. One way to do it is to
extend our ideal functionality ℱdac to accept as input and also out-
put commitments to attribute values, following the recent work by
Camenisch et al. [7]. This would allow for a modular construction of
a delegatable credential scheme with the extensions just discussed.
We consider all of this future work.
8 ACKNOWLEDGEMENTS
The authors thank the anonymous reviewers for their helpful com-
ments. This work was supported by the European Commission
through the Seventh Framework Programme, under grant agree-
ments #321310 for the ERC grant PERCY.
REFERENCES
[1] Masayuki Abe, Georg Fuchsbauer, Jens Groth, Kristiyan Haralambiev, and Miyako
Ohkubo. 2010. Structure-Preserving Signatures and Commitments to Group
Elements. In CRYPTO 2010 (LNCS), Tal Rabin (Ed.), Vol. 6223. Springer, Heidelberg,
209–236.
[2] Paulo S. L. M. Barreto and Michael Naehrig. 2006. Pairing-Friendly Elliptic Curves
of Prime Order. In SAC 2005 (LNCS), Bart Preneel and Stafford Tavares (Eds.),
Vol. 3897. Springer, Heidelberg, 319–331.
[3] Mira Belenkiy, Jan Camenisch, Melissa Chase, Markulf Kohlweiss, Anna Lysyan-
skaya, and Hovav Shacham. 2009. Randomizable Proofs and Delegatable Anony-
mous Credentials. In CRYPTO 2009 (LNCS), Shai Halevi (Ed.), Vol. 5677. Springer,
Heidelberg, 108–125.
[4] Mihir Bellare and Gregory Neven. 2006. Multi-signatures in the plain public-Key
model and a general forking lemma. In ACM CCS 06, Ari Juels, Rebecca N. Wright,
and Sabrina De Capitani di Vimercati (Eds.). ACM Press, 390–399.
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA696[5] Assaf Ben-David, Noam Nisan, and Benny Pinkas. 2008. FairplayMP: a system
for secure multi-party computation. In ACM CCS 08, Peng Ning, Paul F. Syverson,
and Somesh Jha (Eds.). ACM Press, 257–266.
[6] Jan Camenisch, Maria Dubovitskaya, Robert R. Enderlein, Anja Lehmann, Gre-
gory Neven, Christian Paquin, and Franz-Stefan Preiss. 2014. Concepts and
languages for privacy-preserving attribute-based authentication. J. Inf. Sec. Appl.
19, 1 (2014), 25–44.
[7] Jan Camenisch, Maria Dubovitskaya, and Alfredo Rial. 2016. UC Commit-
ments for Modular Protocol Design and Applications to Revocation and At-
tribute Tokens. In CRYPTO 2016, Part III (LNCS), Matthew Robshaw and Jonathan
Katz (Eds.), Vol. 9816. Springer, Heidelberg, 208–239. https://doi.org/10.1007/
978-3-662-53015-3_8
[8] Jan Camenisch, Robert R. Enderlein, Stephan Krenn, Ralf Küsters, and Daniel
Rausch. 2016. Universal Composition with Responsive Environments. In
ASIACRYPT 2016, Part II (LNCS), Jung Hee Cheon and Tsuyoshi Takagi
(Eds.), Vol. 10032. Springer, Heidelberg, 807–840.
https://doi.org/10.1007/
978-3-662-53890-6_27
[9] Jan Camenisch, Aggelos Kiayias, and Moti Yung. 2009. On the Portability of
Generalized Schnorr Proofs. In EUROCRYPT 2009 (LNCS), Antoine Joux (Ed.),
Vol. 5479. Springer, Heidelberg, 425–442.
[10] Jan Camenisch and Anna Lysyanskaya. 2004. Signature Schemes and Anonymous
Credentials from Bilinear Maps. In CRYPTO 2004 (LNCS), Matthew Franklin (Ed.),
Vol. 3152. Springer, Heidelberg, 56–72.
[11] Jan Camenisch and Victor Shoup. 2003. Practical Verifiable Encryption and
Decryption of Discrete Logarithms. In CRYPTO 2003 (LNCS), Dan Boneh (Ed.),
Vol. 2729. Springer, Heidelberg, 126–144.
[12] Jan Camenisch and Markus Stadler. 1997. Efficient Group Signature Schemes for
Large Groups (Extended Abstract). In CRYPTO’97 (LNCS), Burton S. Kaliski Jr.
(Ed.), Vol. 1294. Springer, Heidelberg, 410–424.
[13] Ran Canetti. 2000. Universally Composable Security: A New Paradigm for
Cryptographic Protocols. Cryptology ePrint Archive, Report 2000/067. (2000).
http://eprint.iacr.org/2000/067.
[14] Ran Canetti. 2001. Universally Composable Security: A New Paradigm for Cryp-
tographic Protocols. In 42nd FOCS. IEEE Computer Society Press, 136–145.
[15] Ran Canetti. 2004. Universally Composable Signature, Certification, and Au-
thentication. In 17th IEEE Computer Security Foundations Workshop, (CSFW-17
2004), 28-30 June 2004, Pacific Grove, CA, USA. IEEE Computer Society, 219.
https://doi.org/10.1109/CSFW.2004.24
[16] Melissa Chase, Markulf Kohlweiss, Anna Lysyanskaya, and Sarah Meiklejohn.
2012. Malleable Proof Systems and Applications. In EUROCRYPT 2012 (LNCS),
David Pointcheval and Thomas Johansson (Eds.), Vol. 7237. Springer, Heidelberg,