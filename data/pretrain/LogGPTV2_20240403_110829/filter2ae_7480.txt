上个月，Microsoft发布了针对SharePoint中两个远程代码执行（RCE）漏洞的补丁。这两个被评估为严重的漏洞允许攻击者发送任意命令请求，并在SharePoint应用程序和服务器账户中执行任意代码。Markus Wulftange向ZDI计划报告了这些漏洞，并提供了有关CVE-2019-0604的具体细节。

### 漏洞发现方法
在搜索新的漏洞时，一种有效的方法是从底层开始向上查找。这种方法涉及分析控制流和数据流，以确定数据是否可以到达潜在的安全漏洞点（sink）。其中一个常见的sink是使用XmlSerializer进行反序列化。

通常情况下，XmlSerializer被认为是安全的，因为它需要使用指定类型的数据进行检测，且不能出现在期望类型的对象图之外。然而，如果预期类型的数据也可以被操控，则该序列化器同样可能受到攻击。正如Alvaro Muñoz和Oleksandr Mirosh在其第13次JSON攻击[PDF](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf)中所记录的一样。

### 分析工具与过程
为了深入研究SharePoint 2016程序集，dnSpy是一个非常有用的工具，可用于.NET应用程序的反编译和调试。将dnSpy附加到运行SharePoint 2016的IIS工作进程w3wp.exe后，我们能够检查XmlSerializer(Type)构造函数的使用情况。接下来的任务是逐一审查每个XmlSerializer(Type)构造函数调用，并验证其类型是否完全可控。

一个值得注意的例子是在Microsoft.SharePoint.dll中的`Microsoft.SharePoint.BusinessData.Infrastructure.EntityInstanceIdEncoder.DecodeEntityInstanceId(string)`方法。此外，在`Microsoft.SharePoint.Portal.dll`中的`Microsoft.Office.Server.ApplicationRegistry.Infrastructure`命名空间内也有类似的功能。我们将重点放在前者进行进一步探讨。

在这个场景下，用于指定所需类型的`typeName`以及要反序列化的数据都来源于传递给方法的参数`encodedId`。只要能控制传入此方法的参数，就可以实现我们的目标。

### 数据源头追踪
下一步是追溯这些数据流的源头，看看它们是否来自外部可触发的位置，并且是否也能提供相应的参数值。对于熟悉ASP.NET的人来说，Page_Load(object, EventArgs)或OnLoad(EventArgs)等方法并不陌生。这些方法在ASP.NET生命周期中被调用，定义于扩展自System.Web.UI.Page类型的类中，表示.aspx文件的基础类型。

实际上，这里提到的三种类型都有对应的.aspx文件：
- Microsoft.SharePoint.ApplicationPages.ActionRedirectPage: /_layouts/15/ActionRedirect.aspx
- Microsoft.SharePoint.ApplicationPages.DownloadExternalData: /_layouts/15/downloadexternaldata.aspx
- Microsoft.SharePoint.Portal.WebControls.ProfileRedirect: /_layouts/15/TenantProfileAdmin/profileredirect.aspx

尽管在这三种情况下参数值均来自于HTTP请求，但它们都是URL查询字符串的一部分。这可能导致问题，因为十六进制编码会使长度增加四倍，从而超出HTTP请求行的最大限制。

经过更详细的调查后发现，`ItemPicker.ValidateEntity(PickerEntity)`方法似乎是一个更好的切入点。在这里，传递给`EntityInstanceIdEncoder.DecodeEntityInstanceId(string)`调用的`Key`属性来自于`PickerEntity`对象。该方法由`EntityEditor.Validate()`调用，后者遍历存储在`EntityEditor.Entities`属性中的每一个条目来进行验证。

### 攻击向量确认
现在我们已经找到了一条路径，使得通过`ItemPicker Web`控件发送的数据能够到达`EntityInstanceIdEncoder.DecodeEntityInstanceId(string)`，但仍需确认是否能够控制`PickerEntity`的`Key`属性。

`EntityEditor.Entities`属性取决于私有字段`m_listOrder`，后者仅在实例化期间及`EntityEditor.Validate()`方法中被赋值。在后者的情况下，它从另一个私有字段`m_listOrderTemp`获取值。而这个字段也只有在实例化期间及`EntityEditor.ParseSpanData`方法中被设置。该方法也由`EntityEditor.LoadPostData(string, NameValueCollection)`调用，其值为名为`hiddenSpanData`的HtmlInputHidden控件，用户可以控制其内容。

最后一步是检查`EntityEditor.ParseSpanData(string)`对传入数据所做的处理，确保最终会成为`PickerEntity`的`Key`部分。只有当输入包含特定结构时才会被解析并作为`Key`存储在`m_listOrderTemp`列表中。

因此，我们现在有了一个完整的攻击向量，允许我们从`ItemPicker`的post back处理器出发，到达`EntityInstanceIdEncoder.DecodeEntityInstanceId(string)`，同时还能控制输入。剩下的就是找到该Web控件的实际应用位置了。

### 寻找实际攻击点
`ItemPicker Web`控件实际上从未直接出现在任何.aspx页面中。但是当我们查看它的基类型`EntityEditorWithPicker`时，发现在`/_layouts/15/Picker.aspx`页面中有一个使用它的例子。该页面要求通过`PickerDialogType` URL参数指定对话框类型及其程序集限定名。

这里有两种可用的`ItemPickerDialog`类型：
- Microsoft.SharePoint.WebControls.ItemPickerDialog in Microsoft.SharePoint.dll
- Microsoft.SharePoint.Portal.WebControls.ItemPickerDialog in Microsoft.SharePoint.Portal.dll

使用第一种`ItemPickerDialog`类型会显示如下界面：
- 底部文本框与`ItemPicker`关联。
- 还有一个名为`ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData`的隐藏输入控件。

这就是我们寻找的`EntityInstanceIdEncoder.DecodeEntityInstanceId(string)` sink的数据源。

### 概念验证
当提交表单时，若`ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData`值以“**”开头（例如：“**dummy”），则会在`EntityInstanceIdEncoder.DecodeEntityInstanceId`处触发断点，并显示出以下调用栈：

```
...
```

对于另一种`ItemPickerDialog`类型，只有顶部两层条目有所不同。这证明了`ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData`的数据确实最终到达了`EntityInstanceIdEncoder.DecodeEntityInstanceId`。

剩下的任务仅仅是处理实体实例ID编码并找到合适的`XmlSerializer` payload。

原文来源：[ZDI博客](https://www.zerodayinitiative.com/blog/2019/3/13/cve-2019-0604-details-of-a-microsoft-sharepoint-rce-vulnerability)