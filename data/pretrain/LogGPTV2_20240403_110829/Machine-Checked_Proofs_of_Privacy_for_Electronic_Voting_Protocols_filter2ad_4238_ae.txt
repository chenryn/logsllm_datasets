tional equivalences for Tally and TallyMix.
D. Helios-hom
Similarly, PreHelios can be reﬁned in a similar way to prove
privacy properties for homomorphic variants of Helios.
The Helios-hom scheme is deﬁned as an instantiation of
a PreHelios scheme with some homomorphic public key
encryption scheme E(cid:3), and whose Tally algorithm is modiﬁed
to be as shown in Figure 8.
sbb ← valid ballots based on proof check from BB
f bb ← Policy(sbb)
c ← Add(f bb)
r ← Dec(c, sk)
TallyHom(BB, sk)
1 :
2 :
3 :
4 :
5 : pbb ← Publish(BB)
6 : Π ← P((pk, pbb, r), (sk, BB))
7 :
return (r, Π)
Fig. 8. Helios-hom TallyHom algorithm
Deﬁnition 12. Let E(cid:3) be a public-key encryption scheme, Add
be a candidate homomorphic operation, ΣR and Σ(cid:3)
R(cid:2) be two
proof systems, and ValidInd, Publish, Flabel, and Policy be
abstract algorithms as speciﬁed. Given ρ = addition ◦ Policy,
we deﬁne the Helios-hom scheme constructed from these
primitives as:
HH (E(cid:3), Σ(cid:3)
PH (E(cid:3), Σ(cid:3)
R(cid:2) , ΣR, ValidInd, Publish, Flabel, ρ) =
R(cid:2) , ΣR, ValidInd, Publish, Flabel, ρ) [TallyHom].
Theorem 4. Let E(cid:3)
encryption
scheme, Σ(cid:3)
R(cid:2) be two proof systems, and ValidInd,
Publish, Flabel, Policy be abstract algorithms as speciﬁed
such that:
homomorphic
R(cid:2) , Σ(cid:3)
be
a
∀ b, BB. b ∈ Policy(BB) =⇒ b ∈ BB; and
∀ sk, BB. Dec
∗(sk, BB)).
∗(sk, Policy(BB)) = Policy(Dec
the scheme
Let TallyHom be the tallying algorithm of
HH (E(cid:3), Σ(cid:3)
and
Tally be the tallying algorithm deﬁned by the scheme
PH (E(cid:3), Σ(cid:3)
with
ρ = addition ◦ Policy. We have TallyHom (cid:9) Tally.
R(cid:2) , ΣR, ValidInd, Publish, Flabel, Policy),
R(cid:2) , ΣR, ValidInd, Publish, Flabel, ρ)
Theorem 4 is proved in EasyCrypt. The equivalence fol-
lows from the homomorphic property of the encryption scheme
and the commutativity and membership properties of the
Policy algorithm. We then easily deduce privacy properties
of Helios-hom, via Lemma 2.
Corollary 3. Let E(cid:3) be an encryption scheme, with Add a
candidate homomorphic operation for E(cid:3), let ΣR, Σ(cid:3)
R(cid:2) be two
proof systems, Γ = LPKE(E(cid:3), Σ(cid:3)
R(cid:2) ), and ValidInd, Publish,
Flabel, and Policy be abstract algorithms as speciﬁed. The
scheme
HH (E(cid:3), Σ(cid:3)
R(cid:2) , ΣR, ValidInd, Publish, Flabel, Policy) ,
is ballot private, strongly consistent, and strongly correct
i. R is voting friendly; ii. Γ is IND-1-CCA;
provided that
iii. ΣR is zero-knowledge; iv. E(cid:3) and Add form a homomorphic
public-key encryption scheme; v. ValidInd returns true for valid
; vii. ∀ b, BB. b ∈
∗
ciphertexts; vi. Policy commutes with Dec
Policy(BB) =⇒ b ∈ BB.
E. Various realizations of Helios
We recall that Labelled-MiniVoting is parameterized by a
labelled public-key encryption scheme, a proof system, and
six abstract algorithms.
ValidInd : ((ID, L, C), PK) → {0, 1},
Publish : (ID, L, C)∗ → PBB,
Flabel : ID → L,
Count : (ID, Vo⊥)∗ → R,
Policy : (ID, Vo⊥)∗ → (ID, Vo⊥)∗,
(cid:6)
R :
(PK, PBB, R), (SK, (ID, L, C)∗)
(cid:7) → {0, 1}
To illustrate the versatility of our framework, we list some
interesting instances of these algorithms.
Typical choices for ValidInd include the constantly true
function, which lets the ballot box accept all non-duplicated
(cid:3) itself, which checks that the ballot
ballots, and algorithm V
is equipped with a valid proof before accepting it.
Many choices for Publish have been considered, from
trivial publication policies that reveal no information about the
ballot box (empty), or publish the ballot box itself (identity)
to more involved publication algorithms that reveal the last
cast ballot for each voter, with (last view) or without the id
(anonymous-view), or reveal a hash of each entry along with
the entry itself (hash-view). Further, entries could be reordered,
1002
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
or dummy entries inserted before publication of the bulleting
board.
Algorithm Flabel, which produces the label from the voter
id, is usually instantiated trivially, either as a constant function
(constant), or as the identity function (identity). Other inter-
esting choices would include pseudo-random labels (where, for
example, the label is produced during setup using a PRP whose
key is discarded afterwards) that could serve as pseudonyms.
The revote policy Policy can either enforce a single vote per
id or take multiple votes into account, for example where votes
can be bought or are linked to some form of stake. Single vote
policies can be as simple as choosing the last (last vote) or
ﬁrst vote cast by each voter, and as complex as those used in
Estonia (where priority is given to ballots cast in person, over
electronic ballots). Multiple vote policies could sum all votes,
or average all votes cast by each voter before computing the
ﬁnal result.
The relation R proved by the tallying authorities is usu-
ally instantiated either as the trivial true relation, or as the
relation that relates plaintexts and associated datas to all valid
ciphertexts that encrypt them (corr-dec).
Lastly, choices for the counting algorithm Count are as
numerous as there are types of democracy and elections. We
list the most common ones.
• addition. Tells how many votes each candidate received.
• multiset. Returns the sequence of all votes. Two main
categories are considered:
– order. All votes are given in lexicographic order.
– permutation. Votes are returned in a random order.
making the decision.
• majority. Discloses only the winner.
• weighted. Some voters may have a more important role in
• condorcet. Voters rank candidates in order of preference.
A single winner is selected by conducting a series of
ﬁctitious one-on-one elections between every possible
pairing of two candidates.
• STV (Single Transferable Vote). Voters rank the candidates
in order of preference. Votes for candidates above some
threshold are transfered to other candidates based on the
order of preference indicated on the ballots.
Hundreds of secure variants of Labelled-MiniVoting: These
options can be combined arbitrarily, subject to a few con-
straints, that are imposed in particular by voting-friendliness
and other non-cryptographic premises.
• If Publish : (ID, L, C)∗ → PBB returns an empty bulletin
board then R must be true.
• For Helios-hom, the counting function has to be addition
This yields 162 variants for Helios-hom, 54 variants for
Helios-hom-IDweed and 324 variants for Helios-mix. All
these variants were automatically generated and equipped
and the policy cannot be average.
• For Helios-hom-IDweed, Flabel must yield an injective
mapping from identities to labels, the counting function
has to be addition, and the policy cannot be average.
• For Helios-mix, the counting function has to be multiset,
and the policy cannot be average.
with (checked) EasyCrypt proofs of ballot privacy, strong
consistency, and strong correctness in less than 31 minutes
overall. An overview is provided in Table II. To avoid gener-
ating all the variants anytime a single instance is desired, we
also provide a simple design interface where the user selects
the options of her choice for each parameter. The resulting
voting scheme is then automatically generated along with
a proof of its security, checked with EasyCrypt. We note
in particular that, once all algorithms are fully instantiated,
the non-cryptographic premises of our security theorems and
corollaries are automatically discharged. This includes the
voting-friendliness properties of R w.r.t. the other algorithms
for all instances, the commutativity and regularity properties of
Policy for homomorphic instances, and the injectivity property
of Flabel for instances with reduced-weeding.
Insecure
variants of Labelled-MiniVoting:
Labelled-
MiniVoting has been designed to ensure that ballot privacy,
together with strong consistency and strong correctness, are
satisﬁed with only (minimal) assumptions on the cryptographic
primitives. Many features and restrictions have been hard-
coded (in the algorithms or the cryptographic primitives) such
that it should be difﬁcult to ﬁnd instantiations of Labelled-
MiniVoting that are not ballot private.
One such feature is the weeding process modeled by the
Valid algorithm. It has been well documented [15], [23], [24]
that not weeding ballots carefully leads to insecure schemes. In
particular, this is also why Helios as implemented in versions 3
and 4 do not satisfy ballot privacy. For the Helios variants that
we analyze weeding is encapsulated in the Valid algorithm.
F. Existing Variants
(cid:3), V
R(cid:2) = (P
Combining the results obtained in the previous sections
yields the security of several hundred variants of electronic
voting schemes. In this section, we point to some variants that
correspond to existing published schemes.
We consider more speciﬁc cryptographic primitives. Let E(cid:3)
be the exponential El Gamal encryption scheme [16], [29],
(cid:3)) the disjunctive Chaum-Pedersen proof
and Σ(cid:3)
system [18]8 over the relation R(cid:3)
that ensures that a vote
satisﬁes the requirements of the election. Additionally, let
Σcorr-dec be the Chaum-Pedersen proof system for correct
decryption. We assume the El Gamal encryption scheme with
Chaum-Pedersen proofs of knowledge (formally deﬁned as
Γ = LPKE(E(cid:3), ΣR(cid:2) )) to be IND-1-CCA (a pen-and-paper
proof is given in [15]). We further assume that the correct
decryption proof system Σcorr-dec is zero-knowledge. We can
then deduce the following results on the practical schemes
listed in Table I.
HELIOS VERSION 3 WITH HOMOMORPHIC TALLY. Helios
version 3 with homomorphic tally [2] (Helios-v3-hom, for
short) corresponds to Helios-hom instantiated with exponential
El Gamal encryption, last vote policy, no label, and addition as
8We use the strong Fiat-Shamir transformation.
1003
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:18 UTC from IEEE Xplore.  Restrictions apply. 
counting mode. Formally, Helios version 3 with homomorphic
tally is deﬁned as
Helios-v3-hom = HH (E(cid:3), Σ(cid:3)
R(cid:2) , Σcorr-dec, ValidIndV
(cid:2) ,
Publishlast view, Flabelempty, Policylast vote
) .
By setting the identity of the voters to be either true names
or aliases, we can cover here two sub-variants of Helios
version 3:
Helios-v3-hom with true identities. This version has been
used since the introduction of Helios in version 1 [2].
Helios-v3-hom with aliases. Version that was initially intro-
duced for the 2009 election at Louvain in Helios version
2 [3], and was later made more broadly available in
Helios version 3.
HELIOS VERSION 3 WITH MIXNETS. Helios version 3 with
mixnets [2] (called Helios-v3-mix, for short) corresponds to
Helios-mix instantiated with last vote policy, no labels, and
the multiset counting mode. Formally, Helios version 3 with
mixnets is deﬁned as
Helios-v3-mix = HM (E(cid:3), Σ(cid:3)
R(cid:2) , Σcorr-dec, ValidIndV
(cid:2) ,
Publishlast view, Flabelempty, Policylast vote
) .
Like homomorphic Helios-v3, this variant supports both elec-
tions where the name of voters is in the clear, or election with
aliases.
HELIOS VERSION 4. This version of Helios is closely related
to Helios version 3 with homomorphic tally. We point out
some small but important differences.
that contain additional
First, Helios version 4 uses more robust proofs of knowl-
information such as election
edge,
hash, or question number (that must therefore appear in the
label). Furthermore, to ease the readability of the ballot by
voters, Helios version 4 applies a hash over the ballot and
publishes it along with the ballot. Lastly, Helios v4 does not
support any mixnet-based variants, and is solely based on
homomorphic encryption. Therefore, algorithms ValidInd, ρ
and R are identical to Helios version 3 with homomorphic
tally, Publish produces a hash for each bulletin board entry that
is published alongside it, and Flabel is the constant function
returning election hash, question numbers and choice numbers.
The Helios version 4 [2] can formally be deﬁned as
Helios-v4 = HH (E(cid:3), Σ(cid:3)
R(cid:2) , Σcorr-dec), ValidIndV
(cid:2) ,
Publishhash-view, Flabelconstant, Policylast vote
) .
Note that our proofs do not cover Helios version 1 or version
2, since their underlying encryption scheme, based on the weak
Fiat-Shamir transformation, is not IND-1-CCA. Replacing the
weak Fiat-Shamir transformation with the strong Fiat-Shamir
transformation in their protocol descriptions would yield
Helios-v3-mix and Helios-v3, respectively, although particulars
of the primitives differ.
BASIC ELECTION SCHEME. One of the most basic election
schemes consists in sending votes encrypted with a public
1004
key to a (trusted) voting server. No revote is allowed. During
tally, the server simply shufﬂes the ballots and decrypts them
line by line. Of course, this does not offer any veriﬁability.
Such a basic election scheme is at the core of several simple
commercial voting systems currently in use.
Let E be a labelled public-key encryption scheme with an
empty label, and Σtrue = (P, Vtrue) a proof system where both
the veriﬁer Vtrue and relation are constantly true.
This basic voting scheme is formally deﬁned as
MV (E, Σtrue, ValidIndtrue, Publishno-revote, Flabelempty,
ρaddition◦no-revote) .
G. Weeding