**作者：ZAC安全  
原文链接：**
## **00 前言与基础概念**
RCE全称 remote command/code execute
远程代码执行和远程命令执行，那么RCE的作用呢？就相当于我可以在你的电脑中执行任意命令，那么就可以进而使用MSF/CS上线你的主机，就可以完全控制你的电脑了，所以做渗透中，个人认为危害最大的就是RCE，你SQL注入，我有RCE直接连接数据库，你有未授权/信息泄露，我直接查看这些信息，你有XSS，我直接改源码，你有弱口令，我直接扒下来电脑里存储的密码，大多数漏洞能做到的，RCE都可以轻而易举的做到，所以我在做挖洞或代审的时候也更会偏向RCE的挖掘，而我在网上发现RCE的利用方式有很多，并且像是XSS到RCE，XXE到RCE这种小众的利用手段有很多人都不知道，于是就有了此文，也算是自己的一个简单笔记总结文章吧，这篇文章写的我个人认为很全面了几乎涵盖大部分的RCE利用手段了，肯定还有很小众的RCE我没发现，不过全面的坏处就是不够深，都是比较浅的东西，想深入的还是多搜点其他大佬的文章吧
    基础的shell符号概念
    cmd1 | cmd2 只执行cmd2
    cmd1 || cmd2 只有当cmd1执行失败后，cmd2才被执行
    cmd1 & cmd2 先执行cmd1，不管是否成功，都会执行cmd2
    cmd1 && cmd2 先执行cmd1，cmd1执行成功后才执行cmd2，否则不执行cmd2
    Linux还支持分号（;），cmd1;cmd2按顺序依次执行，先执行cmd1再执行cmd2
    php中也可以用反引号 echo `whoami`;
## **01 exec无过滤拼接RCE**
首先是黑盒，平常我们看到了敏感的参数，比如ping啊，traceroute等测试连通性的，百分之80都基本都有命令拼接（但不一定有RCE），我们以某网关当例子
看到了ping和traceroute，输入127.0.0.1和1
然后抓包，第一个包，记住这个sessionid，要在第二个包的post中添加过去
第二个包，我们发现参数过滤了
没有关系，用traceroute试试
可以看到，拼接数据包的时候并没有过滤，这样我们就拿下rce了
那要是有源代码的话我们该如何审计呢，这里以某管理平台做例子，call_function参数直接post进来，然后switch判断是ping还是tracert，两边都一样，cmd直接拼接了post的参数，然后exec直接输出
那么直接构造参数就可以造成rce
我们除了exec，还可以全局搜索system，shell_exec等命令函数，原理一样不在赘述，以下为某防火墙的小通杀
## **02 任意文件写入**
当然，这些只是单纯的执行命令，在php中还有file_put_contents这种可以写入的函数，例子如下，这是之前bc站的源码，应该是一个小后门,google88990接受传参，然后file_put_contents直接拼接进去，写入文件
直接构造payload
    xxx/xxx/xxx/xx/xxx/GoogleChartMapMarker.php?google88990=phpinfo();
就可以直接getshell了
## **03 文件上传**
大家用的最最常见的rce方法应该就是文件上传了，这里拿我之前写过的一篇作为案例
这里下载源代码 RiteCMS - download
访问 admin.php ， 然后输入默认账密 admin admin ， 再次访问admin.php进入后台
File Manager
Upload file
选择文件
OK-Upload file
Admin.php 中，进入到 filemanage.inc.php 文件
进入之后看到fileupload函数，这里new一个类，把对象赋值到upload， 然后全局搜索
这里赋值了upload 和uploaddir 参数
继续往下走
在 73 行 有 move_uploaded_file 函 数 进 行 上 传 ， 前 面 的
this->uploadDir.directory.’/’
然后回到刚刚的filemanager.inc.php 文件
看到base_path，我们再去全局搜索一下
在settings.php 文件中可以到，返回了绝对路径的上一级目录然后跟踪 directory
参数
这里的目录是不固定的，如果判断为true，则是/files，如果为 false， 则 是 /media
然后继续往下走
如果为false进入else语句，调用savefile函数
这里的filename和file_name是一样的
该函数直接用 copy 函数将临时文件复制到后面的文件中，成功拿下rce
这是copy 函数中的参数来源
## **04 任意登录后台+后台RCE**
当然，有的时候可能会进行鉴权，比如只有在后台的时候才可以使用xx 方法，xx 功能，那么我们要配合信息泄露或者未授权进行组合combo，如下
我们可以看到，在shell_exec前会判断是否登录了
那么我们只要有方法不需要实际的账号密码可以进入后台，那么就是个前台rce，如下，只需要密码为 hassmedia 就可以成功的进入后台
## **05 SQL语句执行+写入权限+绝对路径**
还有一种常见的拿shell手段是利用sql语句，如下
某次渗透过程中扫描到了一个3.txt文件
可以看到有了绝对路径，那么我们现在就是需要找到sql注入点或者能执行sql的方法，访问phpmyadmin的时候直接进去了
权限有了，执行点有了，绝对路径也有了，接下来就是常规的写shell
原理就不赘述了，把两个重要语句贴下面了
当然，如果是sqlserver可以直接用xp_cmdshell
## **06 XSS+electron**
Sql到rce都有了，那么为何不试试xss到rce呢？先安装好node.js和electron
使用npm下载的话会比较慢，这里可以用另一种方法
    npm install -g cnpm --registry=https://registry.npm.taobao.org
    cnpm install electron -g
成功安装，然后开始搭建环境
三个文件搭建好，然后npm run start就可以了
那么如何利用这个去rce呢，简单的一句话，在index.js中如下
    const exec = require('child_process').exec
    exec('calc.exe',(err, stdout, stderr) => console.log(stdout))
下图可以看到成功弹出计算器，造成rce，那么我们在能xss的情况下，控制前端代码，并且是electron框架的时候，即可造成rce
大家所熟知的xss到rce应该就是某剑了，不过因为已经有很多大哥都写过文章了，这里就不在赘述了，感兴趣的可以去查一查，除了某剑还有某by也曾爆出过rce
https://evoa.me/archives/3/#%E8%9A%81%E5%89%91%E5%AE%A2%E6%88%B7%E7%AB%AFRCE%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B%E5%8F%8AElectron%E5%AE%89%E5%85%A8
如果使用shell.openExternal那段，命令里面只能使用file打开，或者打开网站，可利用性太小
打开个计算器还是没啥问题的
顺便说一下，网上很多都是用child_process，然后export
function，但是我实测后发现并不能复现不了，各位师傅可以去看看，最简化版应该就是以下这两行了
    const exec = require('child_process').exec
    exec('calc.exe')
## **07 XXE+php协议**
除了xss还有一种就是xxe到rce，这里为了方便就不在本地搭环境了，随便网上找了个靶场去打，可以看到数据是由xml进行传输的，那么我们只要注入恶意payload即可造成xxe攻击
但这种情况下，只能造成任意文件读取，xxe跟xss一样，都需要特定的环境才可以造成rce，比如说配合php的协议，expect等
那么我们的语句就可以变成
    ]>
也就造成了rce（懒得配环境了，感兴趣的可自行测试）
## **08 SSRF+远程文件下载**
还有一种rce的方式，是利用ssrf配合远程文件下载造成的rce，如下，搭建好网站
分析代码，我们可以看到函数downloadImage中，有个readfile，此处无过滤，这里就是一个简单的ssrf，但是在769行还有一个imageStream
我们跟进来发现其中有个file_put_contents，可以直接造成远程文件下载后写入
有了逻辑我们就可以简单的构造数据包如下：
成功写入
## **09 文件包含**
（组合拳0day分析与phpmyadmin分析）
我们再换一种思路，尝试利用文件包含组合拳getshell，以下用某设备的0day做示例
全局搜索include，发现一处可控的文件包含，这是直接post进来的
然后再次全局搜索file_put_contents，看看哪里可以写入，在set_authAction中找到了如下利用点，userName可控，fileCntent可控，filename直接拼接userName
那么AUTH_DIR和DS呢？这两个参数在最开始的时候已经定义了，DS为分隔符，然后AUTH_DIR拼接
但文件包含仅限于/tmp/app_auth/cfile/，我们需要找到一个能创建目录的利用点，全局搜索mkdir，发现dir可控，shell直接创建了，那么整个漏洞逻辑就出来了
先逐级创建目录
    Post创建目录 store=/tmp/app_auth&isdisk=1
    Post创建目录  store=/tmp/app_auth/cfile&isdisk=1
    post写入文件数据 serName=../../tmp/app_auth/cfile/sb&auth=
    Post数据包含 cf=sb.txt
成功getshell
以上是文件包含+txt文件任意写入+目录创建的组合拳
还有一个是最近爆出来的0day，phpmyadmin文件包含后台RCE，不过现在应该打了补丁，但是分析文章还没出来，算是1day吧
复现步骤
1.
    CREATE DATABASE test; CREATE TABLE test.bar ( baz VARCHAR(100) PRIMARY KEY ); INSERT INTO test.bar SELECT '';
2.然后点test库，再执行sql
    CREATE TABLE pma__userconfig ( id int(11) NOT NULL, id2 int(11) NOT NULL, config_data text NOT NULL, timevalue date NOT NULL, username char(50) NOT NULL ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
3.
    INSERT INTO pma__userconfig (id, id2, config_data, timevalue, username) VALUES (1, 2,'{\"DefaultTabDatabase\":\"..\/..\/Extensions\/tmp\/tmp\/sess_inhi60cjt8rojfmjl71jjo6npl\",\"lang\":\"zh_CN\",\"Console\/Mode\":\"collapse\"}','2022-05-07', 'root');
删除cookie
访问主页登录进去
登录进来之后访问两次
http://localhost/phpmyadmin4.8.5/index.php?db=test
成功RCE
下面就是代审环节：
入口点
index.php中用了Config文件
Config.php文件中使用了require 包含了common.inc.php文件
在lib/common.inc.php中我们可以看到又包含了另一个目录的common.inc.php
跟进去我们可以看到453行代码
这里有一个loadUserPreferences函数，是用来加载用户数据库里面的内容，全局搜索找到该函数位置
第972行使用了load函数