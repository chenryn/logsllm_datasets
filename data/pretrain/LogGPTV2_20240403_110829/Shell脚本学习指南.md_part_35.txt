## Page 211
产生脚本
7993
两边的反引号（或是现代Shell使用的s（...））将其转换为指定给dirpath的值在OIm
此不输出eval的任何错误信息，我们将其传送到/dev/null：
我们花了这么长的段落，解释一个短短的dirpath语句的设置，你就可以知道这有多麻
烦。简单来说，eval对程序语言来说是如虎添翼。
讨论完eval，接下来的程序就比较好了解了。首先是一些健康检查（sanitycheck），处
理所有可能会引发问题的异常情况：每一个好程序都应该有这类的检测，以避免声名狼
的垃圾信息输人、垃圾信息输出（garbage-in，garbage-out）症状。要留意的是最后一
个对空文件列表进行的健康检查：并不输出任何错误报告，这是因为任何程序在处理列
表时都可能会遇到空列表：如果没有事情要程序去微，则除了成功信息之外也没有必要
输出任何报告：
针对错误状态进行健康检查
if test'-z*Senvvar*
then
error Environment variable missing or empty
then
p.z-
then
elif test s# -eg 0
error Empty directory search path
then
exit 0.
f1
接下来还有三个嵌套循环：最外面的是处理参数文件或模式，居中循环则处理查找路径
下的目录，最里面循环匹配单一目录下的文件。按照这样的次序安排循环的目的，是为
了在移到下一个文件之前，让每个文件都能完整地处理。相反的循环顺序，只会让用户
更混淆，因为所有的文件报告都会混杂在一起，在开始中间循环前，我们将result设
为空字符串，因为稍后我们将用它来决定是否找到任何东西：
for pattern in *se*
Op
for dir in sdirpath
result=
do
for file in $dir/Spattern
do
在最里面的循环，test-f告诉我们Sfile是否存在以及是否是一个常规文件（如果
是符号性连接也为真，因为它终究会指向一个常规文件）。如果是，则将它记录到
www.TopSage.com
---
## Page 212
200
车8%
result中：，并以echo命令报告到标准输出，而如果献认的报告仅应用第一个，则我
们会跳出最内部与居中的循环。否则：循环会继续通过剩下的匹配文件，可能产生更多
的输出结果：
if. teet -f *$file*
then
result=*$filea
echo $result
-
-done
...... .....*.
one.....
这个程序里，不需要在中间循环中剩试$dir本身是否存在作为合法的目录，因为这部
分已纳人最内部循环里的sfL1e存在检测中，不过，具有一个较复杂的循环体，这样的
测试会比较理想，也很容易做到，仅需一条单独语句：test-dSdirllcontiniue
当居中循环完成时，我们已经以Spattern查找过所有查找路径下的目录了，而result
会握有最后匹配的名称，如果找不到匹配则为空。
我们测试展开式$result是否为空，如果是，则在标准错误输出上报告找不到的文件，
并将EXITCODE里的错误计数值加1（在warning函数里），然后继续外层的循环以处理
下一个文件：
done
在处理完外层的循环后，我们会在查找路径下的每个目录里进行每一个被要求的匹配，
并准备好返回给调用程序。现在，只剩下一个小问题待解决：用户退出码的值被限制为
范围0至125，如第6章的表6-5所示，这里我们将EXTTCODE的值，设置为125
test SEXITCODB-at 125 66 ExITCOOBx125
我们的程序可说是很完整：程序的最后一个语句：会返面退出状态给父进程，这是所有
模范UNIX程序应该做的，在这种方式下：父进程可测试退出状态，以知道子进程是成
功或者失败：
exit SBXITCODE
例8-1里，我们给出了pathfind的完整内容，其中去掉了注释，你看到的就是Shell看
到的程序。去掉注释与空行，整个程序约90行。
例8-1：查找输人文件的路径
/bin/sh-
 * +
..+$.
www.TopSage.com
---
## Page 213
产生脚本
201
在查找路径下学找一个或多个原始文件或文件模式，
查找路经乃由特定的环境安量所定义，
或是“filename： not found”的标准错误输出。
标准输出所产生的结果，通常是查找路径下找到的每个文件之第一个实体的完整路径，
如果所有文件都找到，则遇出码为0，
否则。即为找不到的文件个数（非0）
语祛：
pathfind[--al1]  [--?] [--help] [--version]  envvar pattern[s)
使用--al1选项时，在路径下的每个目录都会被查找，
而非停在第一个找到者。
IFS=*
OLDPATH=*$PATH*
PATH=/bin:/usr/bin
export PATK
error()
7
usage_and_exit 1
(1besn
(8)uzeed xeu [uoter8--]  [drou--]  [/dev/nul1 1 tr :
为错误情况进行健全检测
if test -z*Senvvar*
then
elif test
error Environment variable missing or empty
*xSdirpath* = *xSenvvar*
then
elif test -z*sdirpath*
error
*Broken sh cn
this platforn: cannot expand Senvvar*
then
elif test s# -eg 0
error Enpty directory search path
then
exit 0
fi
for pattern in *se*
do
result=
for dir in sdirpath
dlo
www.TopSage.com
---
## Page 215
产生脚本
203
for fi1e in $dir/$pattern
do
if test -f *sfile*
then
result=*sfile*
echo $result
x,, *-。 
fi
etop
done
done
test $8XITC0D8 -gt 125 && EXITC00g=125
限制通出状态是一般UNIX实现上的限制
exit SEXITCODE
本节最后展示程序的几个简单测试，使用UNIX系统都会有的一个查找路径—PATH。
每个测试会包括退出码的显示：S？，所以我们可以验证错误的处理。首先，我们检测在
线帮助（help）与版本（version）选项：
S pathfind -h
Usage: pathfind[-=al1] [--7] [--help][--version] envvair pattern [8]
$ ecbo $7
S pathfind --verslon
pathfind version 1.0
$ ecbo $7
下一步，我们使用错误的选项并且遗漏参数，看看会出现什么样的错误报告：
Unrecognized option: --he1p-me-out
(s] uzaaged zesua  [uogsxe--]  [dte  [--]  [tte--]  pugued  :afesn
$ echo $?
Environmerit variable mlsging or empty
$ pathfind
Usage: pathfind [--al1] [--7] [--help] [--veraion] envvar pattern(s)
S pathfind NOSUCHPaTH 18
Enpty directory search path
Usage: pathfind [--al1] --?]  [--help] [-=version]  envvar pattezn (s)
S echo $7
1
接下来我们提供一些无意义的文件名；
www.TopSage.com
---
## Page 216
204
第8章
$ pathfind -a PAr8 foobar
foobar: not found
$ ecbo $?
same with spaces: not found
$ pathfind -a Pars *nsne with 8paoes*
S ecbo $?
1
测试空的文件名列表：
$ pathfind PATH
$ ecbo $?
如果我们突然按Ctrl-C中断执行中的程序，看看会发生什么事：
$ pathfind PATH foo
:-
$ ecbo $?
130
退出码为128+2，是指标志数字2被捕据，并中止程序。在此特定的系统上，它是INT
标志，对应于键盘中断字符的交互式输入。
选今为止，错误报告都像预期的那样出现。现在让我们寻找一个已知存在的文件，然后
再试试-a选项：
/usr/Loea1/bin/Is
$ echo $?
V
$ pathfind -a PATH 1s
/usr/1oca1/bin/1s
/bin/1s
接下来，检查引号内通配字符模式的处理，其必须匹配我们已知存在的文件：
S pathfind -a PATH '?ah'
/usr/1oca1/bin/ksh
/usr/1oca1/bin/zsh
/usr/bin/rsh
bin/csh
/usr/bin/ssh
然后再以同样方式匹配不存在的模式：
$ pathfind -a PATH *junk*
*junk*: not found
www.TopSage.com
---