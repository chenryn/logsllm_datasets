(Alice拿起叉子)
(A-icé拿起汤匙）
Alice takes up ( Spoon ] (left).
this.nane = rame;
ui u + aweu   lu uznzaI 
:his.lefthard = lefthand;
this.name = name;
EaterThread 类 (EaterThread.java)
当线程启动后，
 yam yam!
，锁定左于（lefthand）获取的餐具。
会不断地重复调用 eat 万法。
---
## Page 88
直接执行这个程序，
Alice is eating now, yam yam!
Alice takes up 【 Fork ] (right).
Alice
Bobby
Bobby
Bobby
Bobby
Bobby
Altce
Alice
Alice
Alice
Alice takes up [ Spoon ] 
（中略）
publie void eatl) {
public void run()
 takes up
 puts down
 puts down
Lakes up ! Spoon ](right)
takes up
puts down 
puts down
takes up 
synchronized (lefthand) {
while {true} {
thas.righthand - righthand;
is eating now, yam yam! 
is eating now, yam yam!
 Single Threaded Execution-
synchronized (righthand) {
eat();
(left).");
System.out.printin(name + " puts down " + lefthand 
+"(right).");
: (niueA upA *mou butaea st u + aueu) uTautid ano waasAs 
System.cut.println(nane
(lett).");
【Spoon ] (left)
［ Fork ] (left).
［Fork ] (right)
[Spoon ] (right)
就会得到如图1-10所示的结果，程序会形成死锁的状态。
[ Fork l (left).
[Spoon ］ (left)
[Fork ] (right)
fleft)
能通过这座桥的，只有一个人
十
+
---
## Page 89
u
pub.ic class Gate f
顺带一提，像Mutex类这种川来进行其享互斥的机制，一般称为mutex。mutex
那么，接下来就是问题了。请创建List 1-16中所要使用的Mutex类。
6帝问题6-5所介绍的Before/AfterPatterm）。
问题1-7（创建mutex，互斥）
那么接下来就是问题了。请自山改写这个程序，避免掉发生死锁的可能性：
的时候停了下束，的确如前文所说，是停在 Alice 握着汤匙，而 Bobby握着叉
List 1-16
是mutual exclusion（F斥）的简称。
Alice takes up [
程序到后面
再来解答这个问题。
这个问题使用到第3章的Guarded Suspension Pattern，读者可以看完第3章后
广的地方不动了，
Bobby takes up
(在这里停住不动，按Ctrl+C结束程序，
Alice :akes up 【 Spoon ］
Bobby
Bobby
Bobby
Bobby
Bobby
Bopby
Hobby
Bobby
Bobby
Alice puts diown [ Spoon l (left),
Alice puts iow
Bobby
private int courter
 puts down
/ is eating now, yam yam!
takes ui [ Spoon ] (right)
takes lp 
PuES down
/takes up 【 Spocn ] (righl)
y rakes up [ rork j (left).
L.
puts down
puts down
is eating now, yan yam! 
Gate 类( Gate.java)
I Ferk ] (left).
[ Spoon ] (left)
[ Fork ! (lefl).
图1-10执行范例（发牛死锁的状况）
[Fork ”(right)
【 Fork]
[Spoon
[ fork ] (left).
[ Spoon 
（left}
](right)
(left}
(right)
Bobby拿了 Fcrk
Alice 拿了 spoon
（续上图）
---
## Page 90
private void check()
public St.ring toString() （/′并非 synchronized
public void pass (String name,String address) [//并非 synch.ronized
privale finai Mutex mutex = new Mutex();
private String nane - "Nobody";
if (name.charAt(O) != address.charAt(c)) 1
mutex.lock();
String s - nul;
return s;
EIY{
}final-y{
try{ 
mutex.lock();
finally{
 Single Threaded Execution-
System.out.println("*****BRCKEN *****"+toStrirg()):
mutex.uniock();
mttex.unlock();
check();
this.address = address;
this.name = rame;
this,counter++;
能通过这座桥的，只有一个人
---
## Page 92
Immutable-
破坏它也没办法
第2章
---
## Page 93
等3种方法，都不需要定义成 synchronized。
每个方法，都可以被多个线程同时执行，Person类有 getName、gctAddress、toString
字段值的方法。
使用 Immutable Pattern 的 Person 类
类的不变性（immutability）。String就是一·个 immutable 的类。
时候，请读者留意“这个类是 immutablc还是 mutable”，也就是说，请意识到这个
去使用共享互斥机制所会浪费的时间，故若能妥善运用，
能够保证实例状态绝不会改变的类（immutable类）。因为访问这个实例时，可以省
String 访问，因为实例的内部状态不会改变，所以线程并不需要考虑共享互斥。
性的方法。也就是说，String 实例所代表的字符串属性，绝对不会改变。
（address）等字段，
PrintPersonThread
Main
Person
.1
这时，即使有多个线程同时访问相同实例，Person类也是安全的。Pergon 类的
因为如此，String 类的力法，都不需要 synchronized。无论有多少线程如何对
Person 类字段的值，都只能通过构造器来设置类定义有用来引用字段值的
List 2-1中所枚举的 Person 类，是用来代表人的类，具有姓名（name）、地址
范例程序
immutable 的反义词是mutable（易变的或无常的）。设计类或是研究已有类的
Immutable Pattern
接下米就使用Immutable Pattem，写·个简单的程序吧。类的说明如表 2-1所
java.lang.String是用米长示字符串的类。String类并没有提供任何改变字符串属
immutable是“永恒的”、“不会改变的”的意思。
这--章中，要学习的就是ImmutablePattcrn。
名
称
表 2-1
用来显示 Person 实例的线程类
运行测试用的类
表示人的类
类览表
解
在Immutable Pattern 丨’，有着
，将能提高程序的性能，
---
## Page 94
Main 类
心写了指定的程序代码，编译器会替我们找出错误。
也不是 Immutable Patcrm 的必要条件，而是可以明确表达程序员的意图，就算不小
改字段值的安全措施，而且Person 类的字段 name 与 address 都声明成final。也就
只有类内部看的到：这也不是 Immutable Pattern的必要条件，而是预防了类擅自修
措施。
访问它。
说，只要 name与 address 的值第一次指定后，从此就不能再指定其他的们i了。这
Main类（List 2-2）会构造-一个Person 类（Alice），并以3个线程（PrintPersonThread）
Person 类被声明成 final。也就是说，Person类不允许别人定义它的了类。虽然
public class Main 
public final class Perscn ↑
 List 2-1..
List 2-2.
public static vcid mainistring[l args) {
public String toString() 1
publie Strirg getAddress() 1
private finai String namer 
public String gerNamei) l
public Person(String name, String address)
relurn "[ Person: name - " + name +", address = " + address
 retcrn address;
return: name;
this.address = address:
this.rlare = name;
new PrintPersorlhread(alice).slart();
Perscn alice = rew Person("Alice", "Alaska");
Main 类(Main.java)
Person 类( Person.java)
Immutable-
一想破坏它也没办法
---
## Page 95
toString 方法（这是 Java 的规定）
方法，用来狭取线程的名称。
在线程的方法，也就是说，这个方法可以获取调月currentThread方法的线程本身。
 PrintPersonThread 类
注.1：正确的说法是“用来状取现在的线程所对应的java.lang.Thread 类实例的方法”
prints " + perssn);
public class PrintPersorThread extenas Thread (
当字符出与实例表达式以+运算符连接的时候，
的部分，与
另外，
是用来获取“H己这个线程的名称：这里的Thrcad.currentThread，使用来获取现
Thread.currentThread().geLNare() + " prints " + persor.
PrintPersonThread类（List 2-3）用来不停地显示构造器中传入的Person类实例。
是等意的。
··+"
Thread.current rhread () , getNare ()
其三：
显示出的字符串是由下面的表达式所构成的：
List 2-3
public void run()
public PrirtPersonThread(Persor person) {
private Perso: persor:;
this.persor - person;
while （true) {
new PrintPersonThread(alice).start(l;
 Sysrem.out.printin(Thread.currentThread() -getName () + "
new
 PrintPersonThread 类（ PrintPersonThread.java)
 PrintPersorThread(alice).start();
会白动调用实例表达式的
---
## Page 96
样了。即使有多个线程同时对这个实例进行操作，实例也不会出错。因为实例的状
--个线程可以通行。但像Person 类这样，实例的状态绝对不会改变时，情况就不一
中，我们必须将可能修改、引用实例状态的地方设置为临界区间，使这个区域只有
synchronized的方法”（没有加I上.synchronized也要能够正确执行）做到。
中表现“多个线程同时执行也无妨”的方式。在Java 语言中则是以“不需要加上
则是以“final 字段”做到。
中表现“建立实例并初始化字段后，就不能再次更改其值”的方式。在Java语言中，
值并没有损坏。就算想破坏它也没有办法：
另外，方法名称也注明{concurrent}（concurrent是“并发”的意思）。这是UML
rn
person
在图 2-2中，字段名称加上{frozen}的限制（frozen 意指“冻结的"）。这是UML
 printpersonThread
执行范例如图2-1所示。的确有多个线程在调用toString方法，但（理所当然）
范例程序的类图如图2-2所示。
Thread-0 prints 
Thread-l prints
Thread-0 prints
Thread-2 prints 
Thread-2 prints [
Thread-2 prints !
以下省略。
Thread-0 prints [
Thread-1
Thread-l 
Thread-l
Thread-0 prints
Thread-0 prints
Thread-2 prints
，以CTRL+C 结束程序。
prints
prints
prints
Person: name
Person: name
Person:
 Person:
 Person:
Person:
Person:
 Person:
Person: name
Person: name
Person:
Persor: name
Person: nane
图2-2范例程序的类图
loStringiconcurrent ;
gctName[concurrent]
address{frozen)
namefrozen}
图2-1执行范例结果
name
name
rame
name
name
person
=
i1
Alice,
Alice,
Alice.
Alice,
Alice,
Alice,
Alice,
Alice,
Alice.
Alice,
Alice:
Alice:
Immutable-
address
address
address
address
address
address
address
address
address
address
 address = Alaska
address
没有修改子段的方法
 = Alaska
= Alaska
 = Alaska
字段个部是final的
= Alaska
想破坏它也没办法
-.-......-
= Alaska