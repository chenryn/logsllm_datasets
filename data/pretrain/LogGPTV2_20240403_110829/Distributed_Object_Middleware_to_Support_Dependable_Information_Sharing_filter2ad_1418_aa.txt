# Title: Distributed Object Middleware to Support Dependable Information Sharing between Organizations

## Authors:
- Nick Cook
- Santosh K. Shrivastava
- Stuart M. Wheater

### Affiliations:
- **Nick Cook, Santosh K. Shrivastava**
  - University of Newcastle
  - Department of Computing Science
  - Newcastle upon Tyne NE1 7RU, UK
  - Email: {nick.cook, santosh.shrivastava}@ncl.ac.uk
- **Stuart M. Wheater**
  - HP Arjuna Lab
  - Newcastle upon Tyne NE1 3DY, UK
  - Email: stuart.wheater@hp.com

## Abstract
Organizations increasingly rely on the Internet to offer and utilize services, leading to information sharing across organizational boundaries. However, this must not compromise the autonomy and privacy of the organizations involved, necessitating strict regulation of inter-organizational interactions. This paper presents the design of a novel distributed object middleware that ensures both safety and liveness in such contexts. The safety property guarantees that local policies are not violated despite failures or misbehavior by other parties. The liveness property ensures that, if no party misbehaves, agreed interactions will proceed even with a bounded number of temporary network and computer-related failures. The paper also describes a prototype implementation and example applications.

## 1. Introduction
Organizations increasingly use the Internet to offer their own services and to leverage the services of others, leading to multi-party information sharing across organizational boundaries. This trend is further driven by a focus on core business and the outsourcing of non-core operations to external entities. Despite the need for information sharing, the autonomy and privacy of organizations must be preserved, demanding strict regulation of inter-organizational interactions. Therefore, there is a need for dependable mechanisms for information sharing between organizations that may not fully trust each other.

This paper introduces the design of a novel distributed object middleware that ensures both safety and liveness in this context. It assumes that each organization has a set of local policies for information sharing consistent with the overall business contract. The safety property ensures that an organization's local policies are not compromised, even in the presence of failures or misbehavior by other parties. The middleware facilitates regulated information sharing through multi-party coordination protocols for non-repudiable access and validation of shared state. The liveness property ensures that, if no party misbehaves, agreed interactions will occur despite a limited number of temporary network and computer-related failures.

Section 2 outlines three scenarios from which the requirements are derived. Section 3 provides an overview of the distributed object middleware, called B2BObjects. The state coordination protocol is detailed in Section 4. Section 5 presents the Application Programmer Interface (API), a prototype implementation, and two proof-of-concept applications. Related work is discussed in Section 6, followed by a discussion of future work.

## 2. Application Requirements
This section describes three different application scenarios from which we derive the requirements for middleware support for dependable information sharing between organizations.

1. **Order Processing**: The process of ordering goods or services includes requisition, agreement, delivery, and payment. It must be validated to ensure adherence to organizational policies (e.g., creditworthiness) and agreements (e.g., no arbitrary order modifications). Payment should only be made if the ordered items or services are delivered. For complex orders, requisition and agreement can become more significant, involving multiple parties, negotiations, and commitments. In such cases, it is beneficial for the involved organizations to share and validate updates to the order and related agreements.

2. **Dispersal of Operational Support to the Customer**: In the telecommunications industry, Operational Support Systems (OSS) manage service configuration and fault-handling. Current OSS are often monolithic and centralized, giving customers little control over critical processes. With more sophisticated services, customers need to tailor their complete service, requiring the "dispersal of OSS" to allow customer control over relevant aspects. This requires regulated information sharing between organizations.

3. **Distributed Auction Service**: Autonomous, geographically dispersed auction houses collaborate to provide a trusted, distributed auction service to clients (buyers and sellers). Clients interact with servers controlled by the auction houses, which share and update auction state. The service must guarantee the same chance of a successful outcome regardless of the server used, effectively providing a distributed trusted third-party (TTP) service. The auction houses aim to maintain a long-term, successful service.

Each scenario involves multi-party interaction and information sharing. The key requirements are: (i) ensuring that local actions on shared information meet locally determined, evaluated, and enforced policies, and that legitimate actions are acknowledged by other parties; and (ii) ensuring that the actions of other parties comply with agreed rules and are irrefutably attributable. These requirements imply the collection and verification of non-repudiable evidence of the actions of all parties.

Figure 1 illustrates two interaction styles: direct interaction (1a) where organizations disclose state and interact directly, and indirect interaction (1b) where state disclosure is conditional and interaction is conducted via trusted agents. Both styles may be used, with initial direct interaction to agree on trusted agents, followed by indirect interaction. The dotted clouds represent the deployment of B2BObjects middleware.

## 3. Overview of B2BObjects Middleware
This section provides an overview of the B2BObjects middleware designed to address the requirement for information sharing between organizations. A detailed discussion of the state coordination protocol is deferred to Section 4, while the API and a prototype implementation are described in Section 5.

B2BObjects provides non-repudiable coordination of the state of object replicas. State changes are subject to a locally evaluated validation process, which can be application-specific and arbitrarily complex. Coordination protocols ensure multi-party agreement on access and validation of state. Figure 2 shows the logical view of shared objects in a virtual space (2a) and the physical realization through the regulated coordination of actions on object replicas held at each organization (2b).

Multi-party validation of state changes supports the notion of "joint ownership" of shared state. A state change proposal includes the new state and the proposer's signature. The proposal is sent to all other parties for local validation. Each recipient produces a response with a signed receipt and a decision on the validity of the state change. A new state is valid if there is unanimous agreement. The signing of evidence during state validation binds it to the relevant key-holder, and evidence is stored in local non-repudiation logs.

B2BObjects supports the evolution of enterprise applications to inter-organization applications. While an object's implementation is augmented, the application-level use of the object may remain unchanged. Figure 3 depicts the augmentation of an application object, showing how calls to the object are managed and checkpointed.

[The rest of the text can be similarly optimized and structured for clarity and coherence.]