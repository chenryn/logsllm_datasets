title:Distributed Object Middleware to Support Dependable Information Sharing
between Organisations
author:Nick Cook and
Santosh K. Shrivastava and
Stuart M. Wheater
Distributed Object Middleware to Support Dependable Information Sharing
between Organisations
Nick Cook, Santosh Shrivastava
University of Newcastle
Department of Computing Science
Newcastle upon Tyne NE1 7RU, UK
{nick.cook, santosh.shrivastava}@ncl.ac.uk
Stuart Wheater
HP Arjuna Lab
Newcastle upon Tyne NE1 3DY, UK
PI:EMAIL
Abstract
Organisations increasingly use the Internet to offer their
own services and to utilise the services of others. This nat-
urally leads to information sharing across organisational
boundaries. However, despite the requirement to share in-
formation, the autonomy and privacy requirements of or-
ganisations must not be compromised. This demands the
strict policing of inter-organisational interactions. Thus
there is a requirement for dependable mechanisms for in-
formation sharing between organisations that do not nec-
essarily trust each other. The paper describes the design
of a novel distributed object middleware that guarantees
both safety and liveness in this context. The safety prop-
erty ensures that local policies are not compromised despite
failures and/or misbehaviour by other parties. The liveness
property ensures that, if no party misbehaves, agreed inter-
actions will take place despite a bounded number of tem-
porary network and computer related failures. The paper
describes a prototype implementation with example appli-
cations.
1. Introduction
Organisations increasingly use the Internet to offer their
own services and to utilise the services of others. This natu-
rally leads to multi-party information sharing across organ-
isational boundaries. A trend that is reinforced by concen-
tration on core business and the “out-sourcing” of non-core
operations to external organisations. However, despite the
requirement to share information, the autonomy and privacy
requirements of organisations must not be compromised.
This demands the strict policing of inter-organisational in-
teractions. Thus the requirement is for dependable mech-
anisms for information sharing between organisations that
do not necessarily trust each other.
This paper describes the design of a novel distributed ob-
ject middleware that guarantees both safety and liveness in
the above context. It is assumed that each organisation has a
local set of policies for information sharing that is consistent
with the overall information sharing agreement (business
contract) between the organisations. The safety property
ensures that local policies of an organisation are not com-
promised despite failures and/or misbehaviour by other par-
ties. In essence, the middleware facilitates regulated infor-
mation sharing through multi-party coordination protocols
for non-repudiable access to and validation of shared state.
The liveness property ensures that, if no party misbehaves,
agreed interactions will take place despite a bounded num-
ber of temporary network and computer related failures.
Section 2 sketches three scenarios from which require-
ments are derived. Section 3 provides an overview of the
distributed object middleware we call B2BObjects1. The
state coordination protocol used is discussed in detail in
Section 4. Section 5 presents the Application Program-
mer Interface (API), a prototype implementation and two
proof-of-concept applications that use it. Related work is
surveyed in Section 6. The paper concludes with a discus-
sion of future work.
2. Application requirements
In this section we sketch three different application sce-
narios from which we derive requirements on middleware
support for dependable information sharing between organ-
isations.
1. Order processing. The process of ordering goods or ser-
vices includes: requisition; agreement; delivery and pay-
ment. The process must be validated to ensure that organi-
sational policy is adhered to (for example, that a customer is
credit-worthy) and that agreements between the parties are
observed (for example, that the supplier does not arbitrarily
1subject of a patent application by Hewlett Packard
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:46 UTC from IEEE Xplore.  Restrictions apply. 
modify an order). There is also a requirement that payment
is made if and only if the items or services ordered are de-
livered. For simple orders, this last aspect of the process
is the most signiﬁcant. When the ordering process is more
complex, requisition and agreement can acquire greater sig-
niﬁcance. Requisition may include a procurement process
involving multiple parties; there may be a need to negotiate
non-standard terms and conditions; order fulﬁllment may
entail commitments from more than one supplier or from
delivery agents; or the order may govern delivery of an on-
going service that should itself be regulated. In these cases
it can be argued that business is better supported if the or-
ganisations involved are able to share the order and related
agreements. This requires that all interested parties validate
updates to the shared information.
2. Dispersal of operational support to the customer.
In the telecommunications industry, Operational Support
Systems (OSS) manage service conﬁguration and fault-
handling on the customer’s behalf [10]. For the most part,
existing OSS are monolithic and centralised. Customers
have little or no direct control over critical business pro-
cesses that are carried out for them by the service provider.
With the advent of more sophisticated services, the cus-
tomer needs to be able to tailor their complete service. This
requires the “dispersal of OSS” so that the customer con-
trols the aspects that logically belong to them. The resultant
devolution of processes and information allows business re-
lationships to evolve to the beneﬁt of all involved. To fulﬁll
this promise, there is a requirement for regulated informa-
tion sharing between the organisations.
3. Distributed auction service.
In this scenario, au-
tonomous, geographically dispersed auction houses wish to
collaborate to deliver a trusted, distributed auction service
to their clients (buyers and sellers). The clients act upon
the state of an auction through servers that are controlled
by the auction houses. These servers share and update auc-
tion state. The clients expect the service to guarantee the
same chance of a successful outcome irrespective of which
individual server is used. In effect, the auction houses are
providing a distributed trusted third party (TTP) service to
deliver a regulated market-place for buyers and sellers. The
auction houses wish to maintain a long-lived, successful
service and, therefore, continued interaction.
Each of the above examples entails multi-party interac-
tion and information sharing. For each party the overarch-
ing requirements are: (i) that their own actions on shared in-
formation meet locally determined, evaluated and enforced
policy; and that their legitimate actions are acknowledged
and accepted by the other parties; and (ii) that the actions
of the other parties comply with agreed rules and are ir-
refutably attributable to those parties. These requirements
imply the collection, and veriﬁcation, of non-repudiable ev-
idence of the actions of parties who share and update infor-
mation. If middleware is provided that presents the abstrac-
tion of shared (interaction) state, then the requirements can
be met by regulating, and recording, access and update to
that state.
Figure 1 shows two interaction styles. In the ﬁrst (1a), or-
Org1
Org2
interaction
state  
Org3
Org1
Org2
TA1
TA2
interaction
state
TA3
Org3
(a) direct interaction
(b) interaction through trusted agents
Figure 1. Direct vs. indirect interaction styles
ganisations (Orgi) disclose state and interact directly. In the
second (1b), state disclosure is conditional and interaction
is conducted via trusted agents (TAi). It is possible to envis-
age circumstances where both styles will be used: there may
be an initial direct interaction to agree trusted agents before
continuing the interaction through those agents; or relation-
ships between organisations may change in such a way that
indirect interaction evolves to direct interaction. The dotted
clouds in Figure 1 represent the deployment of B2BObjects
middleware to meet the application requirements outlined
above. For simplicity, in the rest of the paper direct interac-
tion (1a) is assumed unless stated otherwise.
3. Overview of B2BObjects middleware
This section gives an overview of the B2BObjects mid-
dleware that is designed to address the requirement for in-
formation sharing between organisations. A detailed dis-
cussion of the state coordination protocol at the heart of the
middleware is deferred to Section 4. The API and a proto-
type implementation are described in Section 5.
B2BObjects provides non-repudiable coordination of the
state of object replicas. State changes are subject to a locally
evaluated validation process. State validation is application-
speciﬁc and may be arbitrarily complex (and may involve
back-end processes at each organisation). Coordination
protocols provide multi-party agreement on access to and
validation of state. As shown in Figure 2, the logical view
of shared objects in a virtual space (Figure 2a) is realised by
the regulated coordination of actions on object replicas held
at each organisation (Figure 2b).
Multi-party validation of state changes supports the no-
tion of the “joint ownership” of shared state. A state change
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:46 UTC from IEEE Xplore.  Restrictions apply. 
b
a
c
a
b
c
c
a
c
a
b
(a) logical view
Organisation
Virtual space
(b) physical realisation
x
B2BObject
Invocation
Application client
Object coordination
Figure 2. B2BObjects interaction
proposal comprises the new state and the proposer’s signa-
ture on that state. The proposal is dispatched to all other
parties for local validation. Each recipient produces a re-
sponse comprising a signed receipt and a signed decision
on the (local) validity of the state change. All parties re-
ceive each response and a new state is valid if the collective
decision is unanimous agreement to the change. The sign-
ing of evidence generated during state validation binds the
evidence to the relevant key-holder. Evidence is stored sys-
tematically in local non-repudiation logs.
B2BObjects supports the evolution of enterprise appli-
cations to inter-organisation applications. Although an ob-
ject’s implementation is augmented, the application-level
use of the object may remain unchanged. Figure 3 de-
picts this augmentation of an application object. Calls to
s
l
l
a
c
n
o
i
t
i
a
s
n
a
g
r
o
−
a
r
t
n
I
n
o
i
t
i
a
s
n
a
g
r
o
−
a
r
t
n
I
n
o
i
t
a
c
o
v
n
i
t
c
e
b
o
j
State mgt. &
check−pointing
Application
object logic
i
m
s
n
a
h
c
e
m