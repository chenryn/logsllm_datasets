α =0.75
α =1
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
100
90
80
70
60
50
40
30
20
10
800
1000
0
0
200
α =0
α =0.25
α =0.5
α =0.75
α =1
800
1000
400
600
Time ( in seconds)
400
600
Time ( in seconds)
(d) Brute force worm vs.
Hardened Proactive Protec-
tion
(e) Collaborative
Brute
force worm vs. Hardened
Proactive Protection
Figure 6: (a) shows the Slammer worm outbreak is controlled by Proactive Protection as in Section 4. (b)
is a brute-force Slammer worm, which Proactive Protection can no longer control. (c) is a collaborative
brute-force Slammer worm, which is even faster than the normal brute-force worm. (d) and (e) shows the
hardened Proactive Protection strategy can control even the brute-force Slammer worm.
The Proactive Protection + Reactive Antibody Defense
hybrid provides the best protection of the considered schemes
for both total eﬀectiveness and largest gain as the partial de-
ployment factor α increases. The kinks in the graph (e.g.,
at t = 30 where α = 0.25, 0.5, and 0.75) show where Re-
active Antibody Defense takes over from Proactive Protec-
tion. Proactive Protection + Reactive Address Blacklisting
performance is not terrible in either respect, though clearly
secondary. The smoother graph for Proactive Protection +
Local Containment is indicative of the trade-oﬀ between p
and the scan rate threshold β2 as discussed in Section 4.
7. RELATED WORK
Moore et al. [16] is the most closely related work compar-
ing defense systems. They analyze how the reaction time
for content ﬁltering and address blacklisting inﬂuences the
number of infected machines. Their conclusion that reac-
tion time is key for content ﬁltering and blacklisting concurs
with our results. Porras et. al. analyze a hybrid approach
that combines rate limiting and “friends” [22]. Their results
show that hybrid strategies do yield substantial improve-
ments. Our work provides a more complete setting, along
with more general theoretic and simulation results.
Many people have proposed systems for automatically cre-
ating content ﬁlters [13, 14, 16, 19, 21, 25]. This line of work
can beneﬁt from our theoretical analysis.
Address space randomization as been proposed by [1,
4, 7, 9, 10, 30]. Shacham et al. show the overall security
of address randomization is suspect as a complete defense
mechanism [23]. Our results, however, show address ran-
domization can be an eﬀective tool because it can slow down
extremely fast spreading worms such as hit-list worms.
Zou models worm scan strategies using similar susceptible-
infected models [31, 32]. Diﬀerent worm scanning strategies
can be plugged in to our taxonomy. Chen et al. show worm
scanning and infections can be modeled using discrete in-
stead of continuous methods [6].
8. CONCLUSION AND RECOMMENDATIONS
We provide the ﬁrst systematic study of worm defense
systems. We created a taxonomy consisting of four strate-
gies: Proactive Protection, Reactive Antibody Defense, Re-
active Address Blacklisting, Local Containment. Our tax-
onomy reveals for each strategy the key factors that deter-
mine its eﬀectiveness, and we provide theoretical analysis
and simulation-based evaluation of the eﬀectiveness of each
defense category.
Our analysis also shows that the eﬀectiveness of Local
Containment requires very high deployment ratio. Even if
half of the internet deploys the defense, it can only slow
down the worm propagation by a factor of two. Thus, even
though Local Containment may be a near-term approach in
mitigating worm attacks to a limited extend, it is not likely
to be a long-term promising approach as it does not provide
the right deployment incentive and not strong defense.
Our analysis also shows that the eﬀectiveness of Reac-
tive Address Blacklisting is based on its reaction time to
be short. However, since each newly infected host needs to
be put onto the (global) blacklist quickly after it became
infected, this oﬀers a severe challenge to defend again fast-
propagating worms. Thus, this defense may be useful for
slow-propagating worms, but is unlikely to be useful for fast-
propagating worms.
Our analysis indicates a hybrid approach of Proactive
Protection + Reactive Antibody Defense holds the most
promise for protecting against new ultra-fast smart worms.

100
90
80
70
60
50
40
30
20
10
α =0
α =0.25
α =0.5
α =0.75
α =1
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
100
90
80
70
60
50
40
30
20
10
α =0
α =0.25
α =0.5
α =0.75
α =1
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
100
90
80
70
60
50
40
30
20
10
α =0
α =0.25
α =0.5
α =0.75
α =1
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
α =0
α =0.25
α =0.5
α =0.75
α =1
100
90
80
70
60
50
40
30
20
10
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
0
0
1
2
3
Time ( in minutes)
(a) Proactive
(C.R H.L.)
4
5
0
0
0.2
0.4
0.6
Time ( in minutes)
0.8
1
0
0
0.2
0.4
0.6
Time ( in minutes)
0.8
1
0
0
0.2
0.4
0.6
0.8
Time ( in minutes)
1
1.2
1.4
Protection
(b) Reactive Antibody De-
fense (C.R H.L.)
(c) Reactive Address Black-
listing (C.R H.L.)
(d) Local Containment (C.R
H.L.)
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
100
90
80
70
60
50
40
30
20
10
0
0
20
α =0
α =0.25
α =0.5
α =0.75
α =1
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
100
90
80
70
60
50
40
30
20
10
80
100
0
0
20
α =0
α =0.25
α =0.5
α =0.75
α =1
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
100
90
80
70
60
50
40
30
20
10
80
100
0
0
20
α =0
α =0.25
α =0.5
α =0.75
α =1
)
%
i
(
s
e
n
h
c
a
m
d
e
t
c
e
f
n
i
100
90
80
70
60
50
40
30
20
10
80
100
0
0
20
α =0
α =0.25
α =0.5
α =0.75
α =1
80
100
60
40
Time ( in seconds)
Protection
(e) Proactive
(S.L H.L.)
(f) Reactive Antibody De-
fense (S.L H.L.)
(g) Reactive Address Black-
listing (S.L H.L.)
(h) Local Containment (S.L
H.L.)
60
40
Time ( in seconds)
60
40
Time ( in seconds)
60
40
Time ( in seconds)
Figure 8: Eﬀectiveness evaluation against the hit-list worms
For example, TaintCheck [21, 20] proposes using this hybrid
combination. This hybrid is synergistic because Proactive
Protection is a proactive, worm-agnostic defense that can
be deployed before an outbreak, while Reactive Antibody
Defense provides an eventual permanent ﬁx once a worm is
released.
9. ACKNOWLEDGEMENT
The authors would like to thank Vern Paxson for his valu-
able discussion. The authors would like to thank Nicholas
Weaver for providing his source code of his simulator to en-
able us to build our own simulator for the defense strategies
described in this paper. We would also like to thank Vyas
Sekar and the anonymous reviewers for their valuable feed-
back.
10. REFERENCES
[1] PaX. http://pax.grsecurity.net/.
[2] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S.
Palmer, D. Stefanovic, and D. D. Zovi. Intrusion
detection: Randomized instruction set emulation to
disrupt binary code injection attacks. In 10th ACM
International Conference on Computer and
Communications Security (CCS), October 2003.
[3] E. G. Barrantes, D. H. Ackley, S. Forrest, and
D. Stefanovic. Randomized instruction set emulation.
ACM Transactions on Information and System
Security, 8(1):3–40, 2005.
[4] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address
obfuscation: An eﬃcient approach to combat a broad
range of memory error exploits. In Proceedings of 12th
USENIX Security Symposium, 2003.
[5] S. Bhatkar, R. Sekar, and D. C. DuVarney. Eﬃcient
techniques for comprehensive protection from memory
error exploits. In Proceedings of the 14th USENIX
Security Symposium, 2005.
[6] Z. Chen, L. Gao, and K. Kwiat. Modeling the spread
of active worms. 2003.
[7] M. Chew and D. Song. Mitigating buﬀer overﬂows by
operating system randomization. Technical report,
Carnegie Mellon University, 2002.
[8] C. Cowan, S. Beattie, J. Johansen, and P. Wagle.
Pointguard: Protecting pointers from buﬀer overﬂow
vulnerabilities. In Proceedings of the 12th USENIX
Security Symposium, 2003.
[9] D. C. DuVarney, R. Sekar, and Y.-J. Lin. Benign
software mutations: A novel approach to protect
against large-scale network attacks. Center for
Cybersecurity White Paper, October 2002.
[10] S. Forrest, A. Somayaji, and D. H. Ackley. Building
diverse computer systems. In Proceedings of 6th
workshop on Hot Topics in Operating Systems, 1997.
[11] H. W. Hethcote. The Mathematics of Infectious
Diseases. SIAM Review, 42(4):599–653, 2000.
[12] G. S. Kc, A. D. Keromytis, and V. Prevelakis.
Countering code-injection attacks with instruction-set
randomization. In 10th ACM International Conference
on Computer and Communications Security (CCS),
October 2003.
[13] H.-A. Kim and B. Karp. Autograph: toward
automated, distributed worm signature detection. In
Proceedings of the 13th USENIX Security Symposium,
August 2004.
[14] C. Kreibich and J. Crowcroft. Honeycomb - creating
intrusion detection signatures using honeypots. In
Proceedings of the Second Workshop on Hot Topics in
Networks (HotNets-II), November 2003.
[15] M. Liljenstam and D. Nicol. Comparing passive and
active worm defenses. 2004.
[16] D. Moore, V. Paxson, C. Shannon, G. M. Voelker, and
S. Savage. Internet quarantine: Requirements for
containing self-propagating code. In Proceedings of
IEEE INFOCOM, March 2003.

[17] D. Moore, S. Savage, C. Shannon, S. Staniford, and
[24] S. Sidiroglou and A. D. Keromytis. Countering
N. Weaver. Inside the Slammer worm. IEEE Security
and Privacy, July 2003.
[18] D. Moore, C. Shannon, and J. Brown. Code-Red: a
case study on the spread and victims of an internet
worm. In Proceedings of ACM/USENIX Internet
Measurement Workshop, France, November 2002.
[19] J. Newsome, B. Karp, and D. Song. Polygraph:
Automatically generating signatures for polymorphic
worms. In Proceedings of the IEEE Symposium on
Security and Privacy, May 2005.
[20] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature
generation of exploits on commodity software.
Technical Report CMU-CS-04-140, Carnegie Mellon
University, 2004.
[21] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature
generation of exploits on commodity software. In
Proceedings of the 12th Annual Network and
Distributed Systems Security Symposium, February
2005.
[22] P. Porras, L. Briesemeister, K. Skinner, K. Levitt,
J. Rowe, and Y.-C. A. Ting. A hybrid quarantine
defense. In Proceedings of the 2004 ACM Workshop on
Rapid Malcode (WORM), Washington, DC, USA,
2004.
[23] H. Shacham, M. Page, B. Pfaﬀ, E.-J. Goh,
N. Modadugu, and D. Boneh. On the eﬀectiveness of
address-space randomization. In Proceedings of the
11th ACM Conference on Computer and
Communications Security, October 2004.
network worms through automatic patch generation.
In Proceedings of IEEE Symposium on Security and
Privacy, 2005.
[25] S. Singh, C. Estan, G. Varghese, and S. Savage.
Automated worm ﬁngerprinting. In Proceedings of the
6th ACM/USENIX Symposium on Operating System
Design and Implementation (OSDI), December 2004.
[26] N. Sovarel, D. Evans, and N. Paul. Where’s the feeb?
the eﬀectiveness of instruction set randomization. In
14th USENIX Security Symposium, August 2005.
[27] S. Staniford, V. Paxson, and N. Weaver. How to 0wn
the internet in your spare time. In Proceedings of 11th
USENIX Security Symposium, August 2002.
[28] J. Twycross and M. M. Williamson. Implementing and
testing a virus throttle. In Proceedings of 12th
USENIX Security Symposium, August 2003.
[29] M. M. Williamson. Throttling viruses: Restricting
propagation to defeat malicious mobile code. In
Proceedings of the 18th Annual Computer Security
Applications Conference, 2002.
[30] J. Xu, Z. Kalbarczyk, and R. K. Iyer. Transparent
runtime randomization for security. Technical report,
Center for Reliable and Higher Performance
Computing, University of Illinois at
Urbana-Champaign, May 2003.
[31] C. Zou, W. Gong, D. Towsley, and L. Gao. The
monitoring and early detection of internet worms.
IEEE/ACM Transaction on Networking, To appear.
[32] C. Zou, D. Towsley, and W. Gong. On the
performance of internet worm scanning strategies.
Journal of Performance Evaluation, To appear.
