I was playing around with unsafe blocks with the code listed below and it
failed with the following.  
System Info:
    rustc 1.0.0-nightly (d3732a12e 2015-02-06 23:30:17 +0000)
    host: 3.18.5-1-ARCH
    architecture: x86_64
Example:
    extern crate libc;
    pub struct TestBuffer {
        start: *mut T,
        size: usize,
        curr: isize,
    }
    impl TestBuffer {
        pub fn new(value: T, size: usize) -> TestBuffer {
            unsafe {
                let start = libc::malloc(
                    (std::mem::size_of::() * size)
                    as libc::size_t) as *mut T;
                std::ptr::write(&mut *start, value);
                TestBuffer{start: start, size: size, curr: 0}
            }
        }
    }
    impl Iterator for TestBuffer {
        type Item = T;
        fn next(&mut self) -> Option {
            if self.curr ::invoke::h6159218808669033746  
16: 0x7f93ced751a0 - rt::unwind::try::try_fn::h8268217050585033268  
17: 0x7f93ce75ca90 - rust_try_inner  
18: 0x7f93ce75ca80 - rust_try  
19: 0x7f93ced75450 - thunk::F.Invoke::invoke::h8703575304585054118  
20: 0x7f93ce6dce40 - sys:ðŸ§µ:thread_start::h35f66aa7ce5d7277LCB  
21: 0x7f93c870f250 - start_thread  
22: 0x7f93ce2d8219 - clone  
23: 0x0 -
    I'm still definitely a noobie just playing around, so this could definitely be my fault. Thanks in advance for the help. Any input or advice would also be appreciated.