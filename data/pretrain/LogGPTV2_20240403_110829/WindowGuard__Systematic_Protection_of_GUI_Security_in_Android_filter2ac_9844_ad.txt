Speciﬁcally, startActivity can resume an existing activity under
certain conditions, e.g., the activity’s launch mode is singleIn-
stance. The latter two APIs can move a task to the foreground
or background, which essentially changes the display owner at
will by any app as long as REORDER TASKS permission is
granted. WindowGuard hooks the internal functions in AMS
for each of these app APIs to check the caller origin. A user
conﬁrmation is further requested if the caller origin is not from
the display owner.
B. Security of App Navigation “Hubs”
The launcher and recent task list play crucial roles and act
as app navigation “hubs”. Due to the vendor customization or
availability of third-party alternatives, the security implication
of these components is unknown. In addition to the security
provided by the generic AWI model, WindowGuard provides
extra protection on these critical components.
Launcher: Launcher is the ﬁrst app activity to be started.
Other than the default launcher that comes with the stock
system, third-party launchers are also available. Our ﬁrst goal
is to securely start the launcher activity of user’s choice. After
system boot-up, AMS queries PMS about the information of
packages that can serve as the launcher. If multiple launcher
activities are returned, a dialog is prompted for user to make
a choice. At this stage, WindowGuard is able to prevent an
attacker from affecting user’s choice by manipulating windows
on screen, as the display owner is system UI (who owns the
dialog activity). WindowGuard trusts the user’s choice and
regards the chosen launcher activity as the only root of all
activity sessions in this system launch.
The second goal is to assure that an app is reliably started
when the user clicks its icon in the launcher. Here we discover
a security issue in the app launch process, which affects
all Android and launcher versions. When an app icon is
clicked in the launcher, an intent with NEW TASK and ACTIV-
ITY BROUGHT TO FRONT is sent to start the corresponding
app. The combined use of these intent ﬂags creates a new task
to host the app’s new activity. If the app’s task already exists,
the task will simply be brought to the foreground. However, in
this operation, AMS considers the task owner to be the package
name described in the taskAfﬁnity attribute of the root activity
(the bottom activity in the back stack), instead of the app of the
root activity itself. Although the two are by default the same,
the taskAfﬁnity attribute can be conﬁgured arbitrarily to some
other app’s package names without restriction. Therefore, a
malicious activity can spoof the system by specifying a victim
app’s package name as its taskAfﬁnity, and start the activity
in a new task. The task is then believed by the system to be
the victim app, but in fact, is controlled by the attacker. The
problem occurs when the user clicks on the victim app, yet
the malware task is started instead of the victim app itself.
To remedy this problem, WindowGuard monitors the requests
of activity launch in AMS. If it comes from the launcher,
WindowGuard saves the app to be started, and later veriﬁes
that if the focused task indeed belongs to the app by checking
the origin of the task’s root activity.
Recent Task List: The recent tasks screen contains a list of
all recently accessed tasks, and for each task it shows the task
owner’s name/icon and the task’s last screenshot. The user can
browse through the list and choose a task to resume. However,
the recent task list suffers from the similar problem of task
ownership confusion, because it regards the owner of a task to
be the app described in the taskAfﬁnity attribute of the task’s
root activity. As a result, the user could be easily spoofed by
a malicious task which camouﬂages as the victim app in the
recent task list. To impede such an attack, the system UI is
hooked such that it shows the name/icon of the root activity
app of a task, instead of what is described in the taskAfﬁnity
attribute. By this means, it faithfully reﬂects the real identities
of tasks in the system.
C. Preserving User Experience
WindowGuard implements the AWI model, which is de-
signed to adapt to the Android use and navigation pattern,
such that the user experience is not affected at all in normal
use until a security violation is detected. The security violation
may indicate a potential GUI attack or a legitimate use of GUI
features that do not strictly follow the norm of Android app
model. WindowGuard takes a light-weight response by brieﬁng
the user and asking for the user’s ﬁnal decision upon a security
event, such as block, allow for once, or add to white list, etc.
The alert messages, depending on the emergency and severity
of attacks, are delivered via a conﬁrmation dialog, a system
notiﬁcation or a toast message right after the violation occurs.
WindowGuard maintains a handful of white lists; one for
each security feature. Those on a particular white list are not
conﬁned by the corresponding security feature. WindowGuard
always respects the user’s decision and the diversity of user
needs; the white lists are promptly updated based on user input.
Moreover, all GUI security protection features can be lifted and
re-enforced in a centralized control panel, making it convenient
for the user to tune the security features based on preference.
V. EVALUATION
We now proceed to the empirical evaluation of the efﬁ-
cacy of WindowGuard in the following facets: effectiveness,
usability and performance impact.
A. Effectiveness
To evaluate the effectiveness of our solution, we install
the WindowGuard prototype on a Google Nexus 5 phone and
experiment with 15 attack samples from all 12 attack vectors
listed in Table I. The attack samples are either real-world
malware/adware, or are proof-of-concept apps we developed
based on previous research [2], [7], [13], [19], [25], [28].
The evaluation shows that WindowGuard is able to effectively
detect and defeat all attacks. We now show a few case studies
to demonstrate how the attack behaviors violate AWI and how
WindowGuard delivers the potential attack alert to the user.
Back button hijacking: Back button hijacking [28] is one
type of task hijacking attacks. The attack misleads the user to
a phishing activity after the user clicks the back button, instead
of the original activity the user just visited. Figure 5 shows the
task states in AMS. In Figure 5(a), victim activity A2 intends
to start a legitimate utility activity U to serve the user’s request
9
Fig. 5. System state and activity session in a back hijacking attack. A: victim
app; M: malware; U: legitimate utility app.
Fig. 6.
Screenshot of (a) Admin privilege conﬁrmation window; (b)
tapjacking attack window placed on top of (a) (message: “please update the
app to the latest version”); (c) Security alert dialog created by WindowGuard.
(e.g., playing a video). However, when activity U is created,
it is tricked to be emplaced on top of a phishing malware’s
task, whose enclosing activities M1 and M2 are camouﬂaged
as the appearance of A1 and A2. This happens due to the use
of NEW TASK intent ﬂag when starting activity U and the
abuse of taskAfﬁnity by the malware. When the user later taps
the back button, the phishing activity M2 is resumed by the
system, while the user still believes he/she has gone back to
the original activity A2. User’s sensitive information (such as
bank login information) is then stolen by the malware.
WindowGuard can readily detect the task hijacking be-
havior when activity U is launched on the malware task.
As shown in Figure 5(b), the activity session keeps track
of the visible activity windows from the launcher activity
all the way to activity U. When activity U is started, the
legitimacy of back stacks is checked by comparing related
back stacks (i.e. launcher task, task A and task M) against
the focused activity session. The disparity of the comparison
is obvious due to the relocation of activity U. In this case, a
notiﬁcation is created in the status bar to notify the user of
the possible security threat. Likewise, all other task hijacking
attacks violating the legitimacy of back stack can be defeated
by WindowGuard as well. On the other hand, this kind of
task manipulation behavior can also be used for legitimate
purpose. WindowGuard provides detailed information about
the security risk to the user, and it is up to the user to make
the ﬁnal judgment based on the context. For example, a useful
task management app may frequently use various task-related
features and inadvertently trigger the alarm. In this case, the
user can easily cease the surveillance of this particular app
in the WindowGuard control panel. In some other context, the
security alert is particularly alarming when the user is working
in a bank account, e.g., making a money transfer.
Tapjacking: Clickjacking attack is well known in web security.
The similar attack idea is brought to the Android environment,
called tapjacking. Tapjacking overlays windows on top of
screen and spoofs the user to perform undesirable operations.
Bankbot [23] is a family of banking malware discovered in
South Korea Android market in October 2014. It was designed
to steal authentication information from the clients of various
ﬁnancial institutions. To avoid itself from being uninstalled,
Bankbot disguises itself as Google play store app and attempts
to acquire admin privileges of the device. Granting admin
privilege requires user conﬁrmation, as shown in Figure 6(a).
Bankbot overlays a free window (system alert window) on
top of the admin privilege conﬁrmation activity, claiming that
the software needs update to the latest version. Although the
free window is opaque, it is intentionally conﬁgured to not
receive user tap input, such that the tapping of the button at
the bottom of the free window is in turn received by the active
window underneath it, i.e., the system conﬁrmation window.
As a result, the user agrees to the software update request
without realizing that he/she is in fact granting the admin
privilege to the malware. WindowGuard immediately detects
the attempt of free window launch and pauses it before asking
for the user’s decision from a security alert dialog, as shown
in Figure 6(c). The attack is detected because the current
display owner is the system settings, who owns the focused
conﬁrmation activity. Any window operations (including free
and activity window) that affect the focused activity window
are reported to the user and ask for user permission to proceed.
Ransomware: Screen-lock ransomware blackmails victim
users by locking the screen for money in exchange for the
accessibility to the system again. Ransomware has migrated to
Android and has been growing at an alarming rate in the past
few years. A ransomware usually renders a high-z-order free
window to overlay the full screen and hence blocks all user
inputs to the system, leaving the system effectively “locked
up”. The ransomware can even use a combined GUI attack
vectors, e.g., getting admin privilege via tapjacking, to become
more powerful and hard to remove, like a recent ransomware
called Lockerpin [26]. In addition, [28] demonstrates that a
ransomware can also launch activity windows to prohibit user
access to targeted victim apps, e.g., an anti-virus app. In either
experiment, WindowGuard can block the lock screen window
as long as the window’s initiator is not the current display
owner. Even if the user is spoofed and accidentally gets trapped
by a lock screen, the user can always escape by clicking the
home or recent button, which starts the launcher or system UI
activities. Changing the display owner to launcher or system
UI make the foreground malicious lock screen no longer valid
and the lock screen is immediately removed. A notiﬁcation
message is then created to inform the user about the security
enforcement just occurred.
10
(a)	(b)	A2	U	AMS	A1	M1	M2	A2	U	A1	M1	M2	A2	A1	M1	M2	AMS	AMS	L	M1	M2	A1	A2	L	M1	M2	A1	A2	U	(c)	?	L	L	L	Ac/vity	A2	intends	to	launch	ac/vity	U	However,	ac/vity	U	is	placed		on	malware’s	task	User	is	spoofed	aEer	tapping		back	buGon	Focused	Ac*vity		(a)	(b)	(c)	Security Feature
Activity Session Legitimacy
New Window Access Control
Existing Window Legitimacy
New Activity Control
Activity Resume Legitimacy
Any Feature(s)
Alert
Msg
T, N
D
T, N
D
D
# of
Apps
12
39
14
69
11
124
% of
Apps
0.10
0.32
0.12
0.57
0.09
1.03
TABLE II.
NUMBER AND PERCENTAGE OF LEGITIMATE APPS THAT
TRIGGER DIFFERENT SECURITY FEATURES OF WINDOWGUARD. TOTALLY
12,060 MOST POPULAR APPS FROM GOOGLE PLAY. ALERT MESSAGES ARE
IN FORMS OF - T: TOAST MESSAGE, N: SYSTEM NOTIFICATION, D:
CONFIRMATION DIALOG.
# of security
features triggered
# of Apps
1
107
2
15
3
0
4
2
5
0
TABLE III.
THE NUMBER OF APPS THAT TRIGGER DIFFERENT
NUMBERS OF SECURITY FEATURES.
B. Usability and Performance Impact
While providing comprehensive protection of the GUI
system, WindowGuard is designed to maximally preserve user
experience. In this section, we seek to understand the usability
impact of WindowGuard on the legitimate apps. To this end,
we collect 12,060 most popular apps from Google play, each
app with over 1 million installs. The experiment is conducted
on Nexus 5 devices with Android 4.4, the most distributed
Android version. To emulate user input, we employ Monkey,
a stress testing tool, to generate pseudo-random streams of
user events to exercise each app continuously for 5 minutes.
In order to take into account of app interactions, at least 30
other apps are installed at the same time when an app is
under test. The protection of WindowGuard is classiﬁed into 5
security features and each feature maintains a white list. Once
an app is white-listed by the user, it is exempt from the security
check of the corresponding feature. For example, if app A is
added to the white list of “Free Window Control”, app A can
launch free windows anytime without alerting the user or being
blocked by WindowGuard. Once a false alarm is raised, we
assume the app is immediately added to the white list of the
corresponding security feature by the user (either manually or
automatically after user consent). To measure how “annoying”
the security features affect the normal function, Table II reports
the percentage of apps that trigger each type of security alert
in our experiment.
As shown in Table II, WindowGuard has no impact on
most popular apps (98.97% apps). It indicates that most of
these popular apps follow the Android app model and the norm
of app navigation. Among these 1.03% of apps that trigger
WindowGuard’s alerts, most apps only trigger one security
feature, as shown in Table III. It means that WindowGuard
only interrupts the user once during the use of most of these
apps. It is noteworthy that the “New Window Access Control”
and “New Activity Control” features affect 0.32% and 0.57%
of all apps respectively. We ﬁnd that these apps launch free
or activity windows on top of other apps for a variety of
# of security
alerts
# of Apps
TABLE IV.
1
34
2
28
3
14
4
5
5
6
6
1
7
4