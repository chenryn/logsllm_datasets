方法，如下例所示：
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#idm140248049218864}
**例 5.10. 重新定义 should_run 方法**
::: example-contents
``` literallayout
@classmethod
    def should_run(cls, environment, data):
    """Run this spoke for Anaconda and Initial Setup"""
    return True
```
:::
:::
`pyanaconda`{.literal} 软件包提供了更多高级的功能，如
`@gtk_action_wait`{.literal} 和 `@gtk_action_nowait`{.literal}
修饰符，但它们不在本指南范围之内。有关更多示例，请参阅安装程序的源。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#tui-add-on-basic-features_developing-installer-add-ons}TUI 附加组件基本特性 {.title}
:::
Anaconda
还支持基于文本的界面(TUI)。这个界面在功能方面有更多限制，但在某些系统上，它可能是交互式安装的唯一选择。有关基于文本的界面和图形界面与
TUI 的限制的更多信息，请参阅 [Anaconda 简介
和附加组件](#developing-installer-add-ons_customizing-anaconda.html#introduction-to-anaconda-and-add-ons_developing-installer-add-ons "Anaconda 和附加组件介绍"){.link}。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要在附加组件中添加对文本接口的支持，请在 tui
目录下创建新的子软件包集合，如 [Anaconda
附加组件结构](#developing-installer-add-ons_customizing-anaconda.html#anaconda-add-on-structure_developing-installer-add-ons "Anaconda 附加组件结构"){.link}
所述。
:::
安装程序中的文本模式支持是基于 `simpleline`{.literal}
库，该库仅允许非常简单的用户交互。文本模式界面：
::: itemizedlist
-   不支持光标移动 - 相反，其行为类似一台行打印机。
-   不支持任何视觉增强，例如使用不同的颜色或字体。
:::
在内部，`line`{.literal}
工具包有三个主要类：`应用`{.literal}、`UIScreen`{.literal} 和
`Widget`{.literal}.Widget 是包含要在屏幕上打印的信息的单元。它们被放在
UIScreens 上，由 App 类的一个实例切换。在基本元素之上，`hub`{.literal}
`spoke 和对话框`{.literal} 都 以类似图形界面的方式包含各种小部件。
附加组件最重要的类是 `NormalTUISpoke`{.literal} ，其它各种类定义在
`pyanaconda.ui.tui.spokes`{.literal} 软件包中。所有这些类都基于
`TUIObject`{.literal} 类，这本身等同于 [附加 GUI 高级功能中讨论的
`GUI`{.literal}
Object](#developing-installer-add-ons_customizing-anaconda.html#addon_gui_advanced_features_developing-installer-add-ons "附加组件 GUI 高级功能"){.link}
类。每个 TUI spoke 都是继承于 `NormalTUISpoke`{.literal} 类的 Python
类，覆盖 API 定义的特殊参数和方法。因为文本界面比 GUI
简单，所以只有两个这样的参数：
::: itemizedlist
-   `title`{.literal} - 确定 spoke 的标题，类似于 GUI 中的标题参数.
-   `category`{.literal} - 确定作为字符串的 spoke
    类；类名称不在任何地方显示，它仅用于分组。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
TUI 处理类的方式与 GUI 不同。建议为您的新 spoke
分配一个预先存在的类。创建新类需要修补 Anaconda，这不会带来任何好处。
:::
每个 spoke 还应覆盖多种方法，即
`init`{.literal}、`initialize`{.literal}、`refresh`{.literal}、`refresh`{.literal}、`apply`{.literal}、`execute`{.literal}、`input`{.literal}、`prompt`{.literal}
和 `properties`{.literal}
（`ready`{.literal}、`completed`{.literal}、`mandatory`{.literal} 和
`status`{.literal}）。
::: itemizedlist
**其他资源**
-   [请参阅 Add-on GUI
    的支持](#developing-installer-add-ons_customizing-anaconda.html#adding-support-for-the-add-on-graphical-user-interface-gui_developing-installer-add-ons "对附加图形用户界面(GUI)添加支持"){.link}。
:::
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#defining-a-simple-tui-spoke_developing-installer-add-ons}定义一个简单的 TUI Spoke {.title}
:::
以下示例演示了在 Hello World 示例附加组件中一个简单的文本用户界面(TUI)
spoke 的实现：
::: itemizedlist
**先决条件**
-   您已在 tui 目录下创建了一组新的子软件包，如 [Anaconda
    附加组件结构](#developing-installer-add-ons_customizing-anaconda.html#anaconda-add-on-structure_developing-installer-add-ons "Anaconda 附加组件结构"){.link}
    中所述。
:::
::: itemizedlist
**步骤**
-   根据以下示例，创建带有所有必要定义的模块来添加对附加文本用户界面(TUI)的支持：
:::
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#def-simple-TUI}
**例 5.11. 定义一个简单的 TUI Spoke**
::: example-contents
``` literallayout
def init(self, app, data, storage, payload, instclass):
    """
    :see: simpleline.render.screen.UIScreen
    :param data: data object passed to every spoke to load/store data
                 from/to it
    :type data: pykickstart.base.BaseHandler
    :param storage: dummy object storing storage-related information
     :type storage: blivet.Blivet
    :param payload: object storing packaging-related information
    :type payload: pyanaconda.packaging.Payload
    """
    NormalTUISpoke.init(self, data, storage, payload)
    self.title = N_("Hello World")
    self._container = None
    self._hello_world_module = HELLO_WORLD.get_proxy()
    self._reverse = False
    self._entered_text = ""
def initialize(self):
    """
    The initialize method that is called after the instance is created.
    The difference between init and this method is that this may take
    a long time and thus could be called in a separate thread.
    :see: pyanaconda.ui.common.UIObject.initialize
    """
    NormalTUISpoke.initialize(self)
    self._reverse = self._hello_world_module.Reverse
    self._entered_text = "".join(self._hello_world_module.Lines)
def refresh(self, args=None):
    """
    The refresh method that is called every time the spoke is displayed.
    It should update the UI elements according to the contents of
    internal data structures.
    :see: pyanaconda.ui.common.UIObject.refresh
    :see: simpleline.render.screen.UIScreen.refresh
    :param args: optional argument that may be used when the screen is
                 scheduled
    :type args: anything
    """
    self._reverse = self._hello_world_module.Reverse
    self._entered_text = "".join(self._hello_world_module.Lines)
    self._container = ListColumnContainer(columns=1)
    self.window.add(self._container)
    self._container.add(CheckboxWidget(title="Reverse", completed=self._reverse),
                                   callback=self._change_reverse)
    self._container.add(EntryWidget(title="Hello world text", value=self._entered_text),
                                   callback=self._change_lines)
    self._window.add_separator()
def apply(self):
    """
    The apply method that is called when the spoke is left. It should
    update the contents of internal data structures with values set in the spoke.
    """
    self._hello_world_module.SetReverse(self._reverse)
    lines = self._entered_text.splitlines(True)
    self._hello_world_module.SetLines(lines)
def execute(self):
    """
    The execute method that is called when the spoke is left. It is
    supposed to do all changes to the runtime environment according to
    the values set in the spoke.
    """
    # nothing to do here
    pass
def input(self, args, key):
    """
    The input method that is called by the main loop on user's input.
    :param args: optional argument that may be used when the screen is
                 scheduled
    :type args: anything
    :param key: user's input
    :type key: unicode
    :return: if the input should not be handled here, return it, otherwise
                 return InputState.PROCESSED or InputState.DISCARDED if the input was
                 processed successfully or not respectively
    :rtype: enum InputState
    """
    if self._container.process_user_input(key):
        return InputState.PROCESSED_AND_REDRAW
    else:
        return super().input(args=args, key=key)
```
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果仅调用祖先的 `init`{.literal}，则不需要覆盖 `init`{.literal}
方法，但示例中的注释描述了以可理解的方式传递给 spoke 类构造器的参数。
:::
在上例中：
::: itemizedlist
-   `initialize`{.literal} 方法为 spoke
    的内部属性设置了一个默认值，其然后由 refresh 方法更新，并且 apply
    方法使用它来更新内部数据结构。
-   `execute`{.literal} 方法与 GUI
    中的等效方法具有相同的目的；在这种情况下，该方法没有任何效果。
-   `input`{.literal} 方法特定于文本界面；在 Kickstart 或 GUI
    中没有等效的方法。`input`{.literal} 方法负责用户交互。
-   `input`{.literal}
    方法处理输入的字符串，并根据其类型和值采取措施。上例要求输入任何值，然后将它存储为内部属性（密钥）。在更复杂的附加组件中，您通常需要执行一些不平凡的操作，如将字母解析为操作、将数字转换为整数、显示额外的屏幕或切换布尔值。
-   输入类的 `返回`{.literal} 值必须是 `InputState`{.literal} 枚举或
    `input`{.literal} 字符串本身，如果此 input
    应该由不同的屏幕处理。与图形模式相反，当离开 spoke 时不会自动调用
    `apply`{.literal} 方法；必须从 input
    方法显式调用它。同样适用于关闭（隐藏） spoke 屏幕：必须从
    `close`{.literal} 方法显式调用它。
:::
若要显示另一个屏幕，例如，您需要在不同的 spoke
中输入的附加信息，您可以实例化另一个 `TUIObject`{.literal} ,并使用
`ScreenHandler.push_screen_modal()`{.literal} 来显示它。
由于基于文本的界面的限制，TUI spoke
往往具有非常相似的结构，由用户应选中或取消选中并填充的复选框或条目列表组成。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#using-normaltuispoke-to-define-a-text-interface-spoke_developing-installer-add-ons}使用 NormalTUISpoke 来定义文本接口 Spoke {.title}
:::
[重新定义简单 TUI
Spoke](#developing-installer-add-ons_customizing-anaconda.html#defining-a-simple-tui-spoke_developing-installer-add-ons "定义一个简单的 TUI Spoke"){.link}
示例演示了如何实施 TUI
spoke，其中的方法处理打印和处理可用以及提供的数据。但是，有不同的方法来实现这一目标，即使用
`pyanaconda.ui.tui.spokes`{.literal} 软件包中的
`Normal EditTUISpoke`{.literal}
类。通过继承此类，您只需指定应在其中设置的字段和属性，就可实现典型的 TUI
spoke 。以下示例演示了这一点：
::: itemizedlist
**先决条件**
-   您已在 `TUI`{.literal} 目录下添加了一组新的子软件包，如 [Anaconda
    附加组件结构](#developing-installer-add-ons_customizing-anaconda.html#anaconda-add-on-structure_developing-installer-add-ons "Anaconda 附加组件结构"){.link}
    中所述。
:::
::: itemizedlist
**步骤**
-   根据以下示例，创建带有所有必要定义的模块，来对 Add-on
    文本用户界面(TUI)添加支持。
:::
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#us-normal-TUI-spoke}
**例 5.12. 使用 NormalTUISpoke 来定义文本接口 Spoke**
::: example-contents
``` literallayout
class HelloWorldEditSpoke(NormalTUISpoke):
    """Example class demonstrating usage of editing in TUI"""
    category = HelloWorldCategory
    def init(self, data, storage, payload):
        """
        :see: simpleline.render.screen.UIScreen
        :param data: data object passed to every spoke to load/store data
                     from/to it
        :type data: pykickstart.base.BaseHandler
        :param storage: object storing storage-related information
                        (disks, partitioning, bootloader, etc.)
        :type storage: blivet.Blivet
        :param payload: object storing packaging-related information
        :type payload: pyanaconda.packaging.Payload
        """
        NormalTUISpoke.init(self, data, storage, payload)
        self.title = N_("Hello World Edit")
        self._container = None
        # values for user to set
        self._checked = False
        self._unconditional_input = ""
        self._conditional_input = ""
    def refresh(self, args=None):
        """
        The refresh method that is called every time the spoke is displayed.
        It should update the UI elements according to the contents of
        self.data.
        :see: pyanaconda.ui.common.UIObject.refresh
        :see: simpleline.render.screen.UIScreen.refresh
        :param args: optional argument that may be used when the screen is
                     scheduled
        :type args: anything
        """
        super().refresh(args)
        self._container = ListColumnContainer(columns=1)
        # add ListColumnContainer to window (main window container)
        # this will automatically add numbering and will call callbacks when required
        self.window.add(self._container)
        self._container.add(CheckboxWidget(title="Simple checkbox", completed=self._checked),
                            callback=self._checkbox_called)
        self._container.add(EntryWidget(title="Unconditional text input",
                                        value=self._unconditional_input),
                            callback=self._get_unconditional_input)
        # show conditional input only if the checkbox is checked