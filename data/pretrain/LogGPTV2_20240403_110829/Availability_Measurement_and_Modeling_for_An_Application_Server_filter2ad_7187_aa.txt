title:Availability Measurement and Modeling for An Application Server
author:Dong Tang and
Dileep Kumar and
Sreeram Duvur and
Øystein Torbjørnsen
Availability Measurement and Modeling for An Application Server 
Dong Tang, Dileep Kumar, Sreeram Duvur, Oystein Torbjornsen
Sun Microsystems, Inc.
4150 Network Circle, Santa Clara, CA 95054
Email: dong.tang{dileep.kumar, sreeram.duvur, oystein.torbjornsen}@sun.com
Abstract
study
7. The
Application Server
is a standard middleware
platform for deploying web-based business applications
which typically require the underlying platform to deliver
high system availability and to minimize loss of
transactions. This paper presents a measurement-based
availability modeling and analysis for a fault tolerant
Application Server system – Sun Java System Application
Server, Enterprise Edition
applies
hierarchical Markov reward modeling techniques on the
target
software system. The model parameters are
conservatively estimated from lab or field measurements.
The uncertainty analysis method is used on the model to
obtain average
system availability and confidence
intervals by randomly sampling from possible ranges of
parameters that cannot be accurately measured in limited
time frames or may vary widely in customer sites. As
demonstrated in this paper,
lab
measurement, analytical modeling, and uncertainty
analysis is a useful evaluation approach which can
provide a conservative availability assessment at stated
confidence levels for a new software product.
the combined use of
1. Introduction
Application Server has become an important category
of general-purpose middleware for deploying web-based
business applications such as on-line banking, stock
trading, merchandise purchasing and auction services. The
system availability supported by Application Server is a
critical metric for evaluating this category of software.
Although recent
research effort has been made in
benchmarking dependability for OLTP systems [20] and
evaluating user-perceived availability for specific web-
based applications [6], there has been no published study
to demonstrate how to evaluate availability for
the
Application Server middleware using current modeling
and analysis techniques, combined with measurement.
In this paper, we present an availability evaluation
study, which combines measurement, modeling, and
statistical analysis techniques, for a particular Application
Server – Sun Java System Application Server, Enterprise
Edition 7 (JSAS EE7). The model parameters are
conservatively estimated based on data collected from lab
or field measurements. For parameters that cannot be
accurately measured in limited time frames or may vary
widely in customer sites, we apply the uncertainty analysis
method on the model by randomly sampling these
parameters in wide ranges to obtain average system
availability and confidence intervals.
operating
to derive
system (IBM/MVS). Later,
Previous studies [7, 10] have shown that in many
cases, it is possible to use a combination of measurement
and mathematical models
a quantitative
dependability assessment for the target software system.
Hsueh [4] was the first study to use Markov reward
models, combined with operational failure data, to model
an
similar
techniques were applied to the Tandem Guardian and
VAX/VMS operating systems [9]. The methodology was
further extended from using operational data to using test
data in evaluating availability for air
traffic control
software [16]. All of these studies rely on failure data in
estimating parameters plugged into the models which can
be solved to generate system availability or performability
measures. Methods to estimate parameters and associated
confidence levels, including situations in which failure
was not observed during the measurement period, have
been addressed in [8].
Markov reward model is one of the most powerful
and widely accepted mathematical models in availability
and reliability analysis [3, 19]. The state space based
model structure and the reward rate associated with each
state in Markov reward models provide capabilities to
evaluate availability, performability, service cost, and
various metrics of
the modeled system.
However, in modeling real systems, the number of states
in the model often exceeds the range that can be handled
manually and introduces the state explosion problem. To
simplify model specification, stochastic Petri nets have
been used to construct models and solutions are supported
in well-known tools [2, 14]. To reduce model complexity,
the hierarchical modeling approach has been proposed to
interest
for
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:03:23 UTC from IEEE Xplore.  Restrictions apply. 
decompose a complex model into multiple submodels and
implemented in modern modeling tools [13, 18].
The software tool used in this analysis is RAScad [17,
18], a Sun internal web-based Reliability, Availability,
and Serviceability (RAS) architecture modeling tool for
use in system design and development phases. RAScad
has been heavily used in designing new Sun hardware
products. It has also been used to develop availability
models for Sun Cluster software systems [12]. The model
and analysis presented in this paper were developed using
the RAScad
and
uncertainty analysis capabilities. The system metrics of
interest are availability, the associated yearly downtime,
and mean time between system failures.
hierarchical Markov modeling
The rest of the paper is organized as follow. Section 2
briefly introduces architecture for
the target system.
Section 3 describes test environment and measurements.
Sections 4 and 5 discuss assumptions and parameters used
in the model. Section 6 presents the model. Section 7
analyzes
results obtained from the model and conducts
uncertainty analysis. Section 8 concludes this study.
2. System Architecture
Figure 1 shows a general configuration for JSAS EE7
[15]. A Java 2 Enterprise Edition (J2EE) technology
based web services deployment model typically consists
of
three tiers: web server, application server, and
database. The web server tier, including load balancers,
communicates with the Internet and distributes incoming
requests to application server instances, performing a
reverse proxy function. The web server tier may also be
used to serve static content such as images and dynamic
content that need not be secure. The web server tier does
not retain memory of prior requests and is thus stateless.
An application server specific Load Balancer Plugin
(LBP) is installed on the web server. This plugin is aware
of the state of application servers and performs user
application session load balancing and proxy functions.
Load balancing decisions are recorded as HTTP cookies,
keeping the web server stateless. 
tier,
The application server
including its data
persistence support, processes user's requests in a stateful
context and potentially carry out single- or multi-step
business transactions. A transaction is typically a series of
dependent business logic functions that communicate with
the database tier. The database tier contains various
business data and users' information and is not necessarily
restricted to one database instance, as user application
transactions may span multiple databases. The database
tier is not necessarily always a relational database. It can
be any transactional data repository or even a message
broker that can store or transmit application data reliably.
To focus on the application server tier, we have omitted
showing the database tier, even though it is required and
used by our test applications.
Figure 1.  General Configuration of JSAS EE7
Target System Modeled
As shown in the figure, multiple Application Server
(AS) instances are organized as a cluster to serve user
requests from load balancers. The session conversational
state of AS instances is written to a highly available
database (HADB), developed based on the "Always-On"
availability technolog [11]. Multiple pairs of HADB
nodes are organized as Database Redundancy Units
(DRU) to provide redundancy. When an AS instance fails,
the LBP plugin in web servers can detect the failure and
forward subsequent requests to another AS instance which
can then restore the last saved conversational state from
HADB. The AS instances and HADB pairs constitute the
target system to be analyzed in this paper.
features,
The target system provides automatic recovery and
self-repair
including HTTP session failover,
which is necessary for tolerating faults in a stateful
environment. For example, an insurance quote or loan
application typically requires multiple screens of user
input. A failure at any step of process results in loss of
state information, and a complete transaction loss which
requires the transaction to restart from the beginning.
JSAS EE7 supports persistence of HTTP session data in
its bundled HADB which is available to all instances in a
cluster. In the event of an instance failure, session data can
be recovered by other instances in the cluster. In addition
to unplanned events, this capability, along with the HADB
self-repair capability described below, also provides for
minimal impact on planned maintenance.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:03:23 UTC from IEEE Xplore.  Restrictions apply. 
HADB is a highly scalable and available distributed
database. It consists of two mirrored DRUs which are
logical groupings of nodes. Each DRU contains the
complete set of session data evenly distributed over
multiple nodes, ensuring optimal throughput and response
time. A node is a collection of processes, a dedicated area
of main memory, and some physical disk space. Two
different nodes normally do not share a physical host. A
node may be active, providing data access and update, or
spare, ready to take over for the failure of an active node.
Nodes are grouped and provide a mutual watchdog
service in the group. 
For each node in a DRU, there is a mirrored node in
the other DRU. Should a node fail,
the failed node
attempts to restart itself and and to recover data from the
companion node. If the restart procedure is successful, the
recovered node will return the system back to its pre-
failure
attemp is not
successful,
repair
procedure on a spare node by reconstructing data on the
spare. Completion of this repair procedure will convert
the spare node to an active node. The failed node will
become a spare node after a physical repair action is
fulfilled.
companion node
configuration.
initiates
the
If
the
restart
a
3. Measurements
To assess the stability of the target software system,
multiple longevity tests were performed by running
representative application benchmarks on the following
configuration: Two Application Server instances running
on two 4-CPU Sun E450 systems and two pairs of HADB
nodes running on four Sun Ultra 80 systems. Table 1
shows the test configuration and their logical relationship
between layers. System load was generated through a
commercial workload generator running on a Microsoft
Windows machine. A load balancer was included in the
test configuration to perform sticky round-robin load
balancing between multiple server instances. In these
tests, the systems were utilized at a load factor of 60-70%
and multiple 7-day duration runs were performed.
Roughly seven million requests were processed by the
system in each run. 
Load Balancers
AS Instance 1
AS Instance 2
J2EE Web App/Nile Bookstore
J2EE Web App/Nile Bookstore
The stability test was conducted on two large
applications. The first application is a sophisticated, real-
world J2EE Web Application benchmark for running
digital marketplaces. It includes Catalog, Auction, Pricing,
and Order Management modules and is used in many
customer deployments. The application uses pooled JDBC
technology to access an Oracle database and the Java
LDAP Software Developer Kit (SDK) to access the Sun
Java System Directory Server. The average session size is
50KB, which is larger than the typical size of HTTP
sessions.
The second test application is the Nile Bookstore
benchmark, which uses the JSAS EE7 connection pooling
capabilities to access an Oracle database. The average
session size is roughly 30KB. This application is a
complete, end-to-end, e-commerce application server
benchmark that has been widely used by independent
testing laboratories. Both applications were stable during
the course of the test. Application redeployment or server
restart was not necessary. One of the tests – which was
continued for 24 days for sanity checking and availability
demonstration purposes – survived a system reboot due to
a recoverable hardware problem. 
To assess fault tolerance, a number of manual fault
injection tests were performed to ensure that system can
tolerate single faults, and behaves as expected. Some of
the faults injected are listed below:
  HADB node is brought down by killing all related
processes
  HADB node
communication
is
disrupted
by
unplugging network cable
  HADB node hardware power is unplugged
  Application Server node is brought down by killing
processes
  Application Server node host network cable is
unplugged
  Application Server node host power is unplugged
For all
the fault
injection tests listed above,
the
system continued functioning without any major departure
from the expected performance. In addition to these
manual fault injection tests, automated fault injections
were conducted extensively on the HADB system. Some
of the faults injected are listed below:
  Simultaneously kill all processes in a node to simulate
a full node failure
  Randomly kill one of
the processes to simulate
HADB Pair 1 (2 Nodes)
HADB Pair 2 (2 Nodes)
software bugs
Oracle Database & Sun Java System Directory Server
Solaris™ 9 OS running on Sun Enterprise 450 server
Table 1. Test Environment
  Ask processes to terminate immediately to simulate
fast fail scenarios
Both single-node and multi-node (not
failures were induced in the fault
in a pair)
injections. The
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:03:23 UTC from IEEE Xplore.  Restrictions apply. 
workloads were fluctuated from idle to fully loaded states,
in combination with rare conditions such as repair and
data reorganization modes, during the fault
injection
process. For over 3,000 fault injections covering a variety
of failure scenarios, all recoveries were successful. 
During these fault injection tests, measurements were
made to determine AS/HADB node recovery/restart times
under different failure scenarios. These fault
injection