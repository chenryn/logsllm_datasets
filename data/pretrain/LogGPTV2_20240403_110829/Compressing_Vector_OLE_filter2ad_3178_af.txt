this makes it a strong candidate in our scenario.
– Other Codes. As mentioned in Section 3.4, many other alternatives can be envisioned:
since we do not require the code to have structure, or decoding algorithms. There-
fore, any suﬃciently good heuristic mixing strategy (e.g. a strategy based on expander
graphs, such as the approach developped by Spielman in [Spi96]) will likely lead to a
secure LPN instance in our setting.
In the following, we will provide time-complexity estimations for the computational
eﬃciency of Gprimal and Gdual. In our estimates, we will consider implementing Gprimal with
a local code (with d = 10) and Gdual with an LDPC code (with d = 10). Other choices
of codes would lead to diﬀerent running times; in particular, more conservative choices
(quasi-cyclic codes, MDPC codes) should lead to worst performances (albeit remaining
quite eﬃcient), and Druk-Ishai codes should lead to somewhat comparable performances
22
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
(but this would heavily depend on the exact choice of parameters, since Druk-Ishai codes
are a family of codes, and not a speciﬁc code).
Simpliﬁed Full Domain Evaluation. To unify the discussion, we deﬁne m to be equal
to n in the case of Gprimal, and to n(cid:48) = c· n in the case of Gdual. We described in Section 4.1
a strategy to optimize the full evaluation procedure of the MPFSS. Using, e.g., the RSD-
based solution, the entire cost of MPFSS.FullEval is 2m PRG evaluations for ﬁeld sizes that
are roughly the size of the security parameter.
Time Complexity Estimates. The computational cost of our VOLE generators is dom-
inated by computing a linear mapping over the ﬁeld F and by computing MPFSS.FullEval.
The following estimates of the running time are not based on an actual implementation.
Instead, they are based on the cost of standard arithmetic and cryptographic operations on
a powerful personal computer, using benchmarks available in the literature for the running
time of these operations. We believe that our parameters should not incur signiﬁcant cache
misses, however this has not been empirically validated. Our reported numbers should
therefore be viewed as rough estimates that count only the cost of atomic operations on
the standard hardware speciﬁed below.
Emmart et al. [ELWW16] report 12.2 billion modular multiplications per second over
a ﬁeld Fp for a 128-bit prime p using a common graphics card (Nvidia GTX 980 Ti).
Hence, the linear mapping can be performed in approximately T /(12.2 · 109) seconds on a
personal computer with the appropriate graphics card (note that this estimation ignores
cache-misses), where T is the number of multiplications over F (for example, T = d · n
using a d-local code for Gprimal, and T ≤ (2c − 1)d · n using an LDPC code for Gdual with
n(cid:48) = cn).
Implementing the PRG using AES3, each PRG evaluation amounts to 2 calls to AES
(hence 256 bits of AES ciphertexts). A computer equipped with an Intel i7-6700 can encrypt
2607 megabytes per second using AES-128-GCM.4 Therefore, a computer equipped with
the same processor can execute a heuristically optimized full domain evaluation, dominated
by 4m AES encryption operations in m/(4.27 · 107) seconds. We report running time
estimates for Gprimal and Gdual in Table 3.
As an example for this estimate, consider a VOLE output size of 220 ﬁeld elements
for a prime ﬁeld with a 128-bit prime. In the primal generator, the linear mapping part
requires d · 220/12.2 · 109 ≈ 0.085 · d milliseconds. In the same setting, the MPFSS scheme
uses 4 · 220 AES operations which require 24.5 milliseconds. Taken together the time for
the primal VOLE generation for P1 is approximately 0.085 · d + 24.5 milliseconds (e.g. for
d = 10, the running time is approximaltely 25.4 milliseconds; it’s slightly larger for P0,
since P0 must evaluate a linear mapping twice). For the dual generator with the same n
and F we have that m = c· 220 (denoting c = n(cid:48)/n) and therefore the linear mapping takes
(2c − 1) · 220 · d/12.2 · 109 ≈ (2c − 1) · 0.085d ms, MPFSS.FullEval takes c · 24.5 ms and the
total is (2c − 1) · 0.085d + c · 24.5 ms (e.g. for c = 4 and d = 10, we get 102ms).
Note that for a smaller ﬁeld size, e.g. a prime ﬁeld of length 64 bits, the MPFSS.FullEval
is about twice as fast, using the “early termination” optimization of [BGI16]. This opti-
3 The PRG can either be deﬁned to use AES in counter mode, i.e. PRG(s) is AESs||0(0), AESs||0(1) for a
seed s ∈ {0, 1}127 or a ﬁxed key alternative AESk0 (s||0) ⊕ s||0, AESk1 (s||0) ⊕ s||0 for ﬁxed keys k0, k1.
The choice of AES is motivated by the hardware support for AES encryption and decryption in modern
CPUs.
4 See https://calomel.org/aesni_ssl_performance.html. Note that using AES-GCM is an overkill
here, since ﬁxed-key AES suﬃces for distributed point functions, hence this choice leads to a conservative
estimate.
Table 3. Estimated running time of Gprimal and Gdual, for a 128-bit ﬁeld size. Gprimal is instantiated with a
local code, while Gdual is instantiated with an LDPC code. We use d = 10 and c = 4 in the calculations. We
use the reported number [ELWW16] of 12.2 billion modular multiplications per second using a common
graphics card (Nvidia GTX 980 Ti), and the reported number of 2607 megabytes per second using AES-
128-GCM over an Intel i7-6700 processor (see the footnote).
Compressing Vector OLE
23
Gprimal
n
Linear Mapping (ms)
Full domain evaluation (ms)
Total running time for P0 (ms)
Total running time for P1 (ms)
210
212
214
216
0.001
0.024
0.026
0.025
0.003
0.10
0.11
0.10
0.013
0.38
0.41
0.40
0.054
1.53
1.65
1.59
218
0.21
6.14
6.56
6.35
220
0.86
24.5
26.3
25.4
222
3.44
98.2
105
102
Gdual
n
Linear Mapping (ms)
Full domain evaluation (ms)
Total running time for P0 (ms)
Total running time for P1 (ms)
210
0.006
0.10
0.11
0.10
212
0.02
0.38
0.43
0.41
214
0.09
1.53
1.72
1.63
216
0.38
6.14
6.89
6.51
218
1.50
24.5
27.6
26.1
220
6.02
98.2
110
104
222
24.1
393
441
417
Table 4. Actual running times for evaluating a compressive quasi-cyclic mapping which maps 4n ring
elements to n ring elements, over a ring whose modulus is a product of two 62-bit primes, on one core of
a personal computer equipped with a 2.8 GHz Intel i7-7600U.
n
QC-code encoding (ms)
210
212
0.14
0.67
214
2.9
216
14.4
218
66
220
338
mization results (for λ = 127 and |F| ≤ 264) in halving the time of MPFSS.FullEval and
therefore requiring about 13 ms for the primal generator (with d = 10 and n = 220).
Conservative Estimates from Quasi-Cyclic Codes. The above estimates are based
on reported running times for ﬁeld multiplications, and ignore potential cache-misses. We
complement the above estimation with a much more conservative estimate, based on the
actual running time for encoding with quasi-cyclic codes. Quasi-cyclic codes exhibit good
performances, although they perform much worse than LDPC codes or sparse codes (in
particular, they do not admit linear-time encoding). Therefore, the numbers below should
only be seen as a (very) conservative upper-bound on the running time of the linear-
mapping part (the running times given in the previous paragraphs for the full domain
evaluation are already conservative).
The encoding with quasi-cyclic codes were ran on one core of a personal computer
equipped with a 2.8 GHz Intel i7-7600U, with simple preprocessing and optimizations
to reduce the number of NTTs, using the library NFLLib. It is likely that the numbers
could be further improved with additional optimizations. The running time estimates are
reported on Table 4. As shown by the table, the actual running time of the linear mapping
for Gdual with (non-heavily optimized) quasi-cyclic codes is about twenty times slower than
our estimates with LDPC codes. For example, for n = 220, the total running time for P0
would be about 437 ms. We note that using variants of LPN with quasi-cyclic codes has
been widely investigated in the literature.
24
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
5.3 Distributed Generation of MPFSS
So far we thought of the VOLE generator Setup as being performed by a trusted dealer
who samples and sends seed0 and seed1 to the respective parties. In practice, the trusted
dealer can be emulated via secure two-party computation. For both of our VOLE generator
constructions, the complexity of Setup is dominated by the execution of MPFSS.Gen which
in turn consists of a series of executions of DPF.Gen. More speciﬁcally, for each DPF.Gen,
one party (VOLE sender) selects and knows the position of the designated DPF point and
the evaluation of the DPF is taken to be the product of the noise value yi known to the
VOLE sender and the secret x known to the second party (VOLE receiver). Note that this
is also the case for the batch-code based and RSD based constructions of MPFSS.
In the DPF.Gen construction of [BGI16] for point functions over the domain Fn the two
0 , s(0)
output keys are K0 = (s(0)
are two random seeds for the PRG and ν = min{(cid:100)log n − log
log |F|(cid:101), log n}. Gen proceeds
in ν + 1 steps. In the i-th step it expands s(i−1)
by using one PRG invocation for
each seed and obtains s(i)
1 and cwi. In the ﬁnal step the algorithm computes cwν+1 as a
function of the expanded seeds and the target value. We discuss and analyze two diﬀerent
approaches for distributing DPF.Gen.
0 , cw1, . . . , cwν+1) and K1 = (s(0)
and s(i−1)
1 , cw1, . . . , cwν+1) where s(0)
0 , s(i)
0
1
λ
1
Generic 2PC. Any protocol for 2PC can be used to compute the output of Gen securely.
Both the communication and computation of the protocol are dominated by two factors:
λ+ν OTs for a seed and location of the designated point and by 2(ν +µ) secure evaluations
of the PRG for µ = (cid:100) log |G|
λ+2 (cid:101). Setting λ = 127 and the PRG to two AES evaluations, as
suggested previously, results in 127 + ν OTs and 4(ν + µ) secure evaluations of AES (with
secret-shared inputs and outputs).
Assume that securely evaluating AES is implemented by an eﬃcient protocol such as
[RR16] or [WRK17]. Wang, Ranellucci and Katz [WRK17] use an Amazon EC2 c4.8xlarge
instance over a LAN, with statistical security parameter ρ = 2−40, and securely evaluate a
single AES instance in 16.6 milliseconds, while the amortized cost of 1024 AES evaluations
is 6.66 milliseconds in the malicious model. In the semi-honest model they achieve a single