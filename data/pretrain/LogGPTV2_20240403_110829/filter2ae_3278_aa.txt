# 概述：
这篇文章学习的是通过注入方式进行API钩取，在前面的[这篇文章](https://xz.aliyun.com/t/11963)中提到过，注入方式大致分为两类：DLL注入和代码注入。本次将学习的是通过DLL注入钩取目标进程的IAT表来完成API钩取的操作。
## 原理：
在PE文件的结构中的可选文件头内，有一个数据目录的结构体，即：IMAGE_DATA_DIRECTORY，存储了指向IAT结构的指针。那么如果该PE文件没有加壳，我们就可以通过解析该PE文件本身的二进制数据来找到其IAT结构的具体地址。
而我们知道，一个PE文件中所有引用的外部函数的真实地址都存储在IAT中，程序在运行时如果需要调用某个外部函数，就会在IAT表中查找这个函数的真实地址，从而转到相应的位置上进行操作。
例如如果程序中调用了一个外部函数A，它被加载入内存后的真实地址是：0x77C84590，而它的实际地址被存储在IAT中，其在内存中的位置是：0x01001110，那么该程序实际上的调用指令是：
    CALL DWORD PTR[01001110]
结合汇编知识可以知道这条指令实际上CALL的是0x01001110这个地址上存储的数据，即：
    CALL 77C84590
那么如果我们 **将IAT中存储的某个API函数的实际地址更改为我们自己编写的函数地址**
，那么当程序真正调用这个API函数时我们就可以将程序的执行流劫持到我们自己编写的函数流程中（ **如果对CTF
pwn有所了解的话会发现这个方法与GOT表覆盖的利用手法非常相似** ）。
**在劫持完成后还要根据操作目的对伪造函数的返回操作进行一定的设计**
。比如只是单纯的修改目标函数的参数的话，就要将程序的执行流返回正常的API函数再执行一次，而如果是想要直接截取这个函数的执行流程的话正常返回即可。
# 寻找目标API：
对于API钩取操作来说，重要的操作不只有如何钩取，钩取什么也是一个问题。Windows向用户提供了大量的API函数，经验不足的话是无法直接判断出需要钩取的API函数是什么，所以我们可以借助PE解析工具来查看目标程序的导入函数：
我们本次要完成的操作是将计算器的数字显示从阿拉伯数字更换为汉字，这个操作主要涉及的是界面的显示，所以API函数大概率是属于USER32.dll的，查找一下发现SetWindowTextW正好是完成这个功能的，即设置控件的标题文本。
所以我们本次操作的目标API函数即是SetWindowTextW。
# IATinjectDll.dll:
本部分是需要注入到目标进程中的DLL文件，先给出总的源码及注释：
    #include "windows.h"
    #include "tchar.h"
    #include "stdio.h"
    typedef BOOL(WINAPI* PFSETWINDOWTEXTW)(HWND hWnd, LPWSTR lpString); //定义SetWindowsTextW的函数指针
    FARPROC g_orgFunc = NULL;
    BOOL WINAPI MySetWindowsTextW(HWND hWnd, LPWSTR lpString) //截取原始SetWindowsTextW的字符串并将其修改
    {
        //wchar_t* cNum = (wchar_t*)L"零一二三四五六七八九";
        wchar_t cNum[] = L"零一二三四五六七八九";
        wchar_t temp[2] = { 0, }; //temp是一个数组的原因是由于Unicode编码下的一个中文字符使用两个字节存储
        int i = 0, len = 0, index = 0;
        len = wcslen(lpString);
        for (i = 0; i Name; pImportDesc++) //遍历IDT中各个导入文件
        {
            szLibName = (LPCSTR)((DWORD)hModule + pImportDesc->Name); //获取导入文件（DLL）的名称
            if (!_stricmp(DllName, szLibName)) //比较导入文件的名字与目标模块的名字是否一致
            {
                pThunk = (PIMAGE_THUNK_DATA)((DWORD)hModule + pImportDesc->FirstThunk); //找到对应DLL的IAT的地址
                for (; pThunk->u1.Function; pThunk++) //遍历IAT表找到目标API函数的地址
                {
                    if (pThunk->u1.Function == (DWORD)OrgFuncAddr)
                    {
                        VirtualProtect((LPVOID)&pThunk->u1.Function, 4, PAGE_EXECUTE_READWRITE, &dwOldProtect); //修改IAT相对应API函数地址出的内存为可对可写可执行的权限
                        pThunk->u1.Function = (DWORD)NewFuncAddr; //修改该位置上API函数的地址为我们自定义的新地址
                        VirtualProtect((LPVOID)&pThunk->u1.Function, 4, dwOldProtect, &dwOldProtect); //恢复该段内存的权限状态
                        return TRUE;
                    }
                }
            }
        }
        return FALSE;
    }
    BOOL APIENTRY DllMain( HINSTANCE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            //hook过程
            g_orgFunc = GetProcAddress(GetModuleHandle(L"user32.dll"), "SetWindowTextW"); //保存目标API函数的原始地址
            IAT_Hook("user32.dll", g_orgFunc, (PROC)MySetWindowsTextW); //钩取对应的API函数并将其修改为MySetWindowsTextW的地址
            break;
        case DLL_PROCESS_DETACH:
            //unhook过程
            IAT_Hook("user32.dll", (PROC)MySetWindowsTextW, g_orgFunc); //卸载DLL后将IAT中的目标API函数地址改为其初始地址
            break;
        }
        return TRUE;
    }
程序的大致流程如下：
  1. 设计完成钩取后劫持运行流的伪造函数（MySetWindowsTextW）
  2. 完成IAT钩取操作的主要函数（IAT_Hook）
  3. 分别完成DLL附加和DLL卸载两个过程中的对应函数操作的主函数（DllMain）
下面将分别对函数流程中比较重要的部分进行分析
## MySetWindowsTextW：
首先来看一下原始的SetWindowsTextW的函数结构：
    BOOL SetWindowTextW(
      [in]           HWND    hWnd,
      [in, optional] LPCWSTR lpString
    );
拥有两个参数：
  * hWnd：需要更改其文本的窗口或控件的句柄
  * lpString：需要显示的字符串的地址
本次需要完成的操作是将显示的阿拉伯数字更换为汉字，所以我们需要修改需要显示的字符串，也就是lpString这个参数。
下面来看一下实现更改的具体流程：
    for (i = 0; i Name; pImportDesc++) //遍历IDT中各个导入文件
        {
            szLibName = (LPCSTR)((DWORD)hModule + pImportDesc->Name); //获取导入文件（DLL）的名称
            if (!_stricmp(DllName, szLibName)) //比较导入文件的名字与目标模块的名字是否一致
            {
                //
                //
                //
            }
        }
再找目标DLL的IDT后，只需要读取其IMAGE_IMPORT_DESCRIPTOR中的FirstThunk成员即可找到其对应的IAT地址，之后只要遍历每一个Thunk中的数据即可找到目标API函数的真实函数地址，这里的Thunk即是IAT中记录每个导入函数的数据的结构体，它在为winnt.h中被解释为一个结构体：IMAGE_THUNK_DATA32，具体的成员如下：
    typedef struct _IMAGE_THUNK_DATA32 {
        union {
            DWORD ForwarderString;      // PBYTE 
            DWORD Function;             // PDWORD
            DWORD Ordinal;
            DWORD AddressOfData;        // PIMAGE_IMPORT_BY_NAME
        } u1;
    } IMAGE_THUNK_DATA32;
    typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
需要比较的成员是：Function，即是该API函数的真实地址数据，操作如下：
    pThunk = (PIMAGE_THUNK_DATA)((DWORD)hModule + pImportDesc->FirstThunk); //找到对应DLL的IAT的地址
                for (; pThunk->u1.Function; pThunk++) //遍历IAT表找到目标API函数的地址
                {
                    if (pThunk->u1.Function == (DWORD)OrgFuncAddr)
                    {
                        VirtualProtect((LPVOID)&pThunk->u1.Function, 4, PAGE_EXECUTE_READWRITE, &dwOldProtect); //修改IAT相对应API函数地址出的内存为可对可写可执行的权限
                        pThunk->u1.Function = (DWORD)NewFuncAddr; //修改该位置上API函数的地址为我们自定义的新地址
                        VirtualProtect((LPVOID)&pThunk->u1.Function, 4, dwOldProtect, &dwOldProtect); //恢复该段内存的权限状态
                        return TRUE;
                    }
其中VirtualProtect函数是用于修改该段内存的读写保护权限，因为要更改其中的数据且要执行，所以必须保证该段内存具有E/R/W的权限，而又因为只需要更改Function这一个成员，所以只需要更改4个字节（DWORD）的内存保护即可。
**注：在修改完数据后要将内存的保护权限更改为原来的值**
## DllMain：
这个函数就是关于DLL文件在载入和卸载过程中需要完成的操作，由于本次操作还要完成DLL卸载后操作，所以在DLL_PROCESS_DETACH事件发生时也会有对应的操作。
由于本次的API钩取只是修改数字的显示，而其他的控件文本要正常显示，所以还要将SetWindowTextW在IAT表中的地址更改回原始地址让其在其他控件的文本操作中能够正常执行，对应操作如下：
    BOOL APIENTRY DllMain( HINSTANCE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            //hook过程
            g_orgFunc = GetProcAddress(GetModuleHandle(L"user32.dll"), "SetWindowTextW"); //保存目标API函数的原始地址
            IAT_Hook("user32.dll", g_orgFunc, (PROC)MySetWindowsTextW); //钩取对应的API函数并将其修改为MySetWindowsTextW的地址
            break;
        case DLL_PROCESS_DETACH:
            //unhook过程
            IAT_Hook("user32.dll", (PROC)MySetWindowsTextW, g_orgFunc); //卸载DLL后将IAT中的目标API函数地址改为其初始地址
            break;
        }
        return TRUE;
    }
# IATHook.cpp
首先给出完整的源码及注释：