### Content Attributes and Key Revocation in ABE Systems

In various application scenarios, access to content is based on the prices paid by users. In such contexts, key revocation is a critical issue. Figure 2 illustrates an example where a user is currently allowed to access any series with the names "Hero," "Lost," or "Dexter" provided by Channel 4. The system administrator now wants to disable the user's access to the series "Lost" for reasons such as late payment. To achieve this, it is necessary to revoke the corresponding component of the user's secret key.

**Figure 2: Example Application Scenario of KP-ABE**

Similar to CP-ABE, the basic construction of the current KP-ABE scheme [12] defines a system master key component \( t_i \) for each attribute \( i \). The corresponding public key component is defined as \( T_i = g^{t_i} \). Encrypting a message with attribute \( i \) involves including a component \( T_i^s \) into the ciphertext, where \( s \) is a random number for that ciphertext. In the user's secret key, the component for attribute \( i \) has the form \( g^{qx(0) \cdot t_i} \), where \( qx(\cdot) \) is a polynomial uniquely defined for the user. Therefore, revoking a secret key component can be done in the same manner as in CP-ABE, i.e., the authority redefines the master key component as \( t'_i \) and provides \( t'_i \) to proxy servers as the proxy re-key. Under the assumption that proxy servers are honest, they will use these proxy re-keys to re-encrypt stored ciphertexts and update secret keys for all users except the one being revoked. The proof of the new KP-ABE scheme is similar to that of the CP-ABE scheme.

### Large Universe Construction

In addition to the basic construction, [12] also provides a KP-ABE construction for large universe cases. A significant advantage of this construction is that the number of public parameter components remains constant, regardless of the number of attributes in the system. However, our technique for generating proxy re-keys for CP-ABE and the basic KP-ABE scheme is not applicable here because the definitions of public parameter components and user secret key components differ from the previous format.

In this construction, \( n + 1 \) random points are selected from \( G_1 \), and a function \( T \) is defined to calculate the public key component for attribute \( X \) as:

\[
T(X) = g^{X^n \cdot \prod_{i=1}^{n+1} t_i \cdot \Delta_{i,N}(X)}
\]

where \( g_2 \) is another group element in \( G_1 \), \( N = \{1, 2, \ldots, n+1\} \), and \( \Delta_{i,N}(X) \) is the Lagrange coefficient. The ciphertext component for each attribute \( i \) is still in the form \( T_i^s \). Each attribute has two components in the user's secret key:

\[
D_i = g_2^{qx(0)} \cdot T(i)^{r_i}, \quad \text{and} \quad R_i = g^{r_i}
\]

where \( r_i \in \mathbb{Z}_p \) is a random number for attribute \( i \) in the user's secret key. For detailed construction, refer to [12].

In this construction, we cannot simply redefine the system master key component \( t_i \) to update the attribute for key revocation as before. Instead, we need to modify the Setup() algorithm of the original scheme. We assume the bit string for each attribute is defined in a fixed format "(attribute description, version j)". The version number \( j \) of each attribute in the universe will be published.

#### Setup(n)
1. Choose a random number \( y \in \mathbb{Z}_p \) and let \( g_1 = g^y \).
2. Choose a random element \( g_2 \) from \( G_1 \).
3. Select random numbers \( w_1, w_2, \ldots, w_{n+1} \) from \( \mathbb{Z}_p \).
4. Define \( t_i = g_2^{w_i} \) for \( 1 \leq i \leq n + 1 \).
5. Define the function \( T \) as:
   \[
   T(X) = g_2^{X^n + p(X)} \cdot \prod_{i=1}^{n+1} t_i^{\Delta_{i,N}(X)}
   \]
   where \( p(\cdot) \) is an \( n \)-degree polynomial defined by points \( (1, w_1), (2, w_2), \ldots, (n+1, w_{n+1}) \).

The public parameters are output as: \( PK = (g_1, g_2, t_1, \ldots, t_{n+1}) \). The master key is \( MK = (y, w_1, w_2, \ldots, w_{n+1}) \).

#### Algorithms
Encryption, Key Generation, and Decryption are defined exactly the same as in the original scheme. To enable the authority to generate proxy re-keys, we define the ReKeyGen algorithm as follows.

#### ReKeyGen(γ, MK)
- \( \gamma \) is the set of attributes needing redefinition.
- For each attribute \( X \in \gamma \), assuming its pre-image is a bit string "(attribute description, version j)", redefine it as "(attribute description, version j + 1)".
- Obtain \( H(\text{attribute name, version j + 1}) = X' \), where \( H() \) is a cryptographic hash function.
- Since \( H(\cdot) \) is collision-free, \( X' \) cannot be used for any other attributes.
- The proxy re-key for attribute \( X \) will be output as \( rk_X = (X')^{n + p(X')} \).
- The set of proxy re-keys \( rk_X \) for attributes in \( \gamma \) are sent to proxy servers.

Proxy servers, upon receiving the proxy keys, re-encrypt existing ciphertexts stored on them as follows.

#### ReEnc(E, rk, β)
- For each attribute \( i \in \beta \), update \( E_i \) as \( E_i \cdot (rk_i)^s \).

To update user secret keys, proxy servers update the \( R_i \) components for users as follows.

#### ReKey(R_i, rk_i)
- Update \( R_i \) as \( R_i \cdot (rk_i)^{-1} \).

It is easy to verify that the updated user secret key will be able to decrypt ciphertexts encrypted with updated attributes if the ciphertext attributes satisfy the access structure of the secret key. Formal security reduction of this scheme will be presented in the extended version of this paper.

### Comparison with [4]

Compared to [4], our scheme places minimal computational overhead on the authority and is more suitable for application scenarios where the content provider, such as an individual, outsources contents to powerful but semi-trustable servers like cloud servers and manages resources via resource-constrained devices like iPhones. On the other hand, [4] is more efficient in terms of overall system overhead and is more suitable for traditional applications where most computational tasks are executed locally.

### Application Considerations

Our scheme considers data sharing scenarios where data are encrypted and stored on semi-trustable servers. The authority generates proxy re-keys whenever an attribute revocation event occurs. These re-keys are then transmitted to proxy servers, who re-encrypt existing ciphertexts and update user secret key components if necessary. For simplicity, our scheme considers one revocation event, but multiple revocations can be handled by repeatedly executing these operations. This assumption, while convenient for theoretical analysis, can cause efficiency issues in practice due to the heavy computation load for re-encrypting stored files. Users may also not be available for key updates upon each revocation event.

To handle attribute revocation efficiently, we propose enabling proxy servers to manage revocation events in an aggregative way, making lazy re-encryption possible. Proxy servers keep a table of proxy re-keys for historical events, as shown in Figure 3.

**Figure 3: Proxy Re-Key List**

With this table, proxy servers do not need to re-encrypt data files upon each revocation event. Instead, they can re-encrypt the data files when accessed by a user, i.e., in a lazy re-encryption fashion. Assuming the version number associated with the ciphertext of a data file is \( k - i \), updating it to the latest version \( k \) requires calling the ReEnc algorithm once with proxy re-key \( Q_{i-1} \). Unaccessed data files will never get re-encrypted. This modification aggregates operations for multiple revocation events into one, saving computation overload for proxy servers. One issue is the high storage overhead if proxy servers keep all proxy re-keys. In practical systems, the list can be kept for a reasonable time period to reduce storage burden.

**Figure 4: Revoked User ID List of Attribute i**

User secret key updates can be addressed similarly, with proxy servers maintaining a revoked user identity list for each attribute. This ensures that only the relevant secret key components are updated.

### Conclusion and Future Work

In this paper, we address the important issue of attribute revocation in attribute-based systems, particularly in scenarios with semi-trustable proxy servers. Our proposed scheme supports attribute revocation with minimal load on the authority by combining proxy re-encryption with CP-ABE. The scheme is provably secure against chosen ciphertext attacks and is also applicable to the KP-ABE scheme. Future work includes combining secure computation techniques to ensure the honesty of proxy servers and allowing proxy servers to update user secret keys without disclosing user attribute information.

### Acknowledgments

This work was supported in part by the US National Science Foundation under grants CNS-0716306, CNS-0831628, CNS-0746977, and CNS-0831963.

### References

[1] J. Anderson. Computer Security Technology Planning Study. Air Force Electronic Systems Division, Report ESD-TR-73-51, 1972. http://seclab.cs.ucdavis.edu/projects/history/.

[2] J. Bethencourt, A. Sahai, and B. Waters. Ciphertext-Policy Attribute-Based Encryption. In Proc. of SP’07, Washington, DC, USA, 2007.

[3] M. Blaze, G. Bleumer, and M. Strauss. Divertible Protocols and Atomic Proxy Cryptography. In Proc. of EUROCRYPT ’98, Espoo, Finland, 1998.

[4] A. Boldyreva, V. Goyal, and V. Kumar. Identity-based Encryption with Efficient Revocation. In Proc. of CCS’08, Alexandria, Virginia, USA, 2008.

[5] D. Boneh and M. Franklin. Identity-Based Encryption from The Weil Pairing. In Proc. of CRYPTO’01, Santa Barbara, California, USA, 2001.

[6] S. Yu, K. Ren, W. Lou, and J. Li. Defending Against Key Abuse Attacks in KP-ABE Enabled Broadcast Systems. In Proc. of Securecomm’09, Athens, Greece, 2009.

[7] R. Canetti, S. Halevi, and J. Katz. Chosen Ciphertext Security from Identity Based Encryption. In Proc. of EUROCRYPT’04, Interlaken, Switzerland, 2004.

[8] R. Canetti and S. Hohenberger. Chosen-Ciphertext Secure Proxy Re-Encryption. In Proc. of CCS’07, New York, NY, USA, 2007.

[9] L. Cheung and C. Newport. Provably Secure Ciphertext Policy ABE. In Proc. of CCS’07, New York, NY, USA, 2007.

[10] R. H. Deng, J. Weng, S. Liu, and K. Chen. Chosen-Ciphertext Secure Proxy Re-encryption without Pairings. In Proc. of CANS’08, Berlin, Heidelberg, 2008.

[11] S. D. C. di Vimercati, S. Foresti, S. Jajodia, S. Paraboschi, and P. Samarati. Over-encryption: Management of Access Control Evolution on Outsourced Data. In Proc. of VLDB’07, Vienna, Austria, 2007.

[12] V. Goyal, O. Pandey, A. Sahai, and B. Waters. Attribute-Based Encryption for Fine-grained Access Control of Encrypted Data. In Proc. of CCS’06, Alexandria, Virginia, USA, 2006.

[13] S. Yu, K. Ren, and W. Lou. Attribute-Based On-Demand Multicast Group Setup with Membership Anonymity. In Proc. of SecureComm’08, Istanbul, Turkey, 2008.

[14] M. Kallahalla, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu. Plutus: Scalable Secure File Sharing on Untrusted Storage. In Proc. of FAST’03, Berkeley, California, USA, 2003.

[15] J. Li, K. Ren, B. Zhu, and Z. Wan. Privacy-Aware Attribute-Based Encryption with User Accountability. In Proc. of ISC’09, Pisa, Italy, 2009.

[16] X. Liang, Z. Cao, H. Lin, and J. Shao. Attribute Based Proxy Re-encryption with Delegating Capabilities. In Proc. of ASIACCS’09, Sydney, Australia, 2009.

[17] S. Yu, K. Ren, and W. Lou. Attribute-Based Content Distribution with Hidden Policy. In Proc. of NPSEC’08, Orlando, Florida, USA, 2008.

[18] M. Pirretti, P. Traynor, P. McDaniel, and B. Waters. Secure Atrribute-Based Systems. In Proc. of CCS’06, New York, NY, USA, 2006.

[19] A. Sahai and B. Waters. Fuzzy Identity-Based Encryption. In Proc. of EUROCRYPT’05, Aarhus, Denmark, 2005.