大家好，今天我将在这篇文章中详细介绍我最近的研究，即针对WAF规则使用一个特殊的侧信道形式进行攻击，即基于时间的形式。这部分研究目前还不是非常主流，但是其结果却是令人震惊的。这篇文章挺长的，那么从现在就开始吧。
## 侧信道攻击？
维基百科这么定义侧信道攻击：
_基于从计算机系统组成搜集到的信息进行的攻击，而不是针对系统实现算法本身的弱点。_
所以基础上来讲，我们需要提取或者搜集一些本不应该被公开读取到的敏感信息进行侧信道攻击。而这种攻击的成功实施往往是因为业务逻辑错误设计导致的。
今天我们谈论的攻击是基于时钟的，这种基于时间攻击专注在硬盘或者算法中的数据在CPU/内存的计算时间。只需要观察CPU处理数据的用时变化就可以从系统中获取敏感信息。
## WAF
WAF可以用于检测和阻止对易受攻击的Web应用程序的攻击。除了阻止恶意请求进入，WAF通常也用于隐藏一些敏感信息泄露传出的问题（例如错误的堆栈信息）。通常来说WAF通过正则表达式来区分正常和恶意请求。
## 为什么要识别规则
因为我们想要找到WAF规则中存在的漏洞问题，所以需要去识别WAF的规则，从而就能得知针对某种攻击WAF使用了哪种过滤策略，然后去调整我们的攻击方式从而避开检测。一旦攻击绕过了WAF那么就可以进一步发现WEB应用的更多漏洞。
在这篇文章中我使用了一种常见的指纹识别方法，称为正则表达式反转（regex-reverse），它通常依赖检测请求数据包的每个部分，来分析得出是该数据包的哪个部分导致异常发生。
## 理解WAF的安装
通常，WAF部署在如下4个网络拓扑中：
  1. 反向代理
WAF在客户端和服务器之间拦截请求。客户端直接请求连接在WAF上面，然后WAF将客户端请求数据包传递给服务器。如果请求被WAF阻止，那么该数据包就永远不会达到服务器。
  2. 服务器部署
WAF安装在它需要保护的那台服务器上，这种情况可以分为两种：a) WAF是作为插件安装的；b) WAF是作为开发引入到代码中的。
  3. 带外形式
这种情况下，WAF通常连入的是网络设备上的监控端口，获取到的是流量镜像副本。这种方式限制了WAF对请求数据包的阻断功能，只有在检测到恶意数据包时才能发送TCP重置数据包来中断流量。
  4. 云部署
这种包括了在网络云提供商内部部署WAF的方法。这种类似于反向代理形式，即每个单独的数据请求都会经过云和云WAF。
在我的实验当中，我使用了2个最为常见的WAF部署方式：反向代理方式和作为插件的服务器内部部署方式。
## WAF指纹识别的常规方法
通常任何WAF都是可以通过独特的HTTP头字段，cookie字段，阻断报错信息（例如响应码，响应页面）这些来进行识别的。有很多不错的WAF识别和绕过工具，例如WAFW00F（），WAFNinja（）等等。他们常常是通过侧信道来识别WAF的规则（例如一个请求是被阻断还是转发），进而绕过WAF。所以这些工具都对如下信息进行了观察分析：
  1. WAF拦截信息
表示WAF已经标记请求为恶意请求并且进行了阻断。通常，拦截后的响应页面或者一个HTTP头字段都定义了这个请求已经被拦截。响应码（403
Forbidden）也有可能表示已经拦截请求数据包。
  2. WEB错误信息
表示WEB在解析请求数据包时出错，但是错误信息页面会被WAF的自定义报错页面覆盖。这种请求下，WAF不会阻断请求，而是知识隐藏WEB本身的错误消息页面，以防止出现错误堆栈信息等导致的信息泄露。
  3. 正常响应
表示请求数据包已经经过WAF传递到达WEB服务器。但是请求在传递到服务器之间，WAF有可能对该请求进行了部分恶意字段删除的操作。
## 主要缺点
所以通过上文可以发现，仅通过观察响应数据包，无法明确区分出已经被转发和已经被阻断的请求（WAF拦截信息和WEB错误信息）。因为不管是WAF拦截了恶意数据还是WEB报错，页面显示出来的响应页面都可能是一样的。
## 为什么使用基于时间的攻击？
针对上述缺点的解决方案就是本文提出的基于时间的攻击。通过利用基于时间攻击，可以准确判断导致一种特殊响应形式的请求是被转发还是被阻断的；由于服务器针对产生报错的请求的响应时间远远大于转发正常请求的时间，所以在这种识别下会被忽略。实验结果表明，该攻击可以精确识别请求在遇到WAF后被如何处理（转发还是阻拦），且准确率可以达到95%。
## 攻击的思路
### 原理
这种攻击技术的主要原理就是，通常被阻断的恶意请求从WAF直接响应给客户端比转发后从服务器响应给客户端的时间花费会更少（ms为单位）。即被阻断的请求比被转发的请求耗时更短，所以阻断请求和转发请求之间的时间差等于应用逻辑的处理时间。
**假设** ：
_这里唯一的假设是当我们的WAF检测到恶意请求就会阻断请求并立即响应一个错误信息。但是其他WAF会存在删除恶意数据字段然后再将处理后的数据包转发给服务器_
。
### 方法
为了区分阻断请求和转发请求。我们需要传递两种不同类型的请求数据包：一种是正常无害的请求数据包，它将顺利通过WAF并被转发；一种是包含恶意负载字符串的请求，WAF很容易就可以检测到它。
我们最初解决这个问题的方法是将攻击分为两个阶段：
  1. 学习阶段
在此阶段，我们测试并记录阻断请求和转发请求的相应耗时，为之后的攻击阶段做准备。
  2. 攻击阶段