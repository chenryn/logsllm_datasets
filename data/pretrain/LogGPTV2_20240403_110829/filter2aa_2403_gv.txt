          sub  
w0, w0, #1 
          fmov 
s11, w0 
          fmov 
w0, s14 
          cbnz 
w0, .L7 
.L47: 
          fmov 
w0, s10 
          add  
w1, w1, 1 
          sub  
w0, w0, #1 
          fmov 
s10, w0 
          fmov 
w0, s13 
          cbnz 
w0, .L4 
.L2: 
          add   
w0, w1, 1 
          ldp   
d8, d9, [sp,96] 
          ldp   
x19, x20, [sp,16] 
          ldp   
d10, d11, [sp,112] 
          ldp   
x21, x22, [sp,32] 
          ldp   
d12, d13, [sp,128] 
          ldp   
x23, x24, [sp,48] 
          ldp   
d14, d15, [sp,144] 
          ldp   
x25, x26, [sp,64] 
          ldp   
x27, x28, [sp,80] 
          ldp   
x29, x30, [sp], 160 
          ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
904 
逆向工程权威指南（下册） 
100.7.6  Non-optimizing GCC 4.4.5（MIPS） 
指令清单 100.12  Non-optimizing GCC 4.4.5（MIPS）（IDA） 
f:                                             # CODE XREF: f+64 
                                                  # f+94 ... 
var_C           
= -0xC 
var_8           
= -8 
var_4           
= -4 
arg_0           
= 0 
arg_4           
= 4 
addiu   $sp, -0x28 
sw      $ra, 0x28+var_4($sp) 
sw      $fp, 0x28+var_8($sp) 
sw      $s0, 0x28+var_C($sp) 
move    $fp, $sp 
sw      $a0, 0x28+arg_0($fp) 
sw      $a1, 0x28+arg_4($fp) 
lw      $v0, 0x28+arg_0($fp) 
or      $at, $zero 
bnez    $v0, loc_40 
or      $at, $zero 
lw      $v0, 0x28+arg_4($fp) 
or      $at, $zero 
addiu   $v0, 1 
b       loc_AC 
or      $at, $zero 
loc_40:                                         # CODE XREF: f+24 
lw      $v0, 0x28+arg_4($fp) 
or      $at, $zero 
bnez    $v0, loc_74 
or      $at, $zero 
lw      $v0, 0x28+arg_0($fp) 
or      $at, $zero 
addiu    $v0, -1 
move    $a0, $v0 
li      $a1, 1 
jal     f 
or      $at, $zero 
b       loc_AC 
or      $at, $zero 
loc_74:                                         # CODE XREF: f+48 
lw      $v0, 0x28+arg_0($fp) 
or      $at, $zero 
addiu    $s0, $v0, -1 
lw      $v0, 0x28+arg_4($fp) 
or      $at, $zero 
addiu    $v0, -1 
lw      $a0, 0x28+arg_0($fp) 
move    $a1, $v0 
jal     f 
or      $at, $zero 
move    $a0, $s0 
move    $a1, $v0 
jal     f 
or      $at, $zero 
loc_AC:                                        # CODE XREF: f+38 
                                                # f+6C 
move    $sp, $fp 
lw      $ra, 0x28+var_4($sp) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
905 
lw      $fp, 0x28+var_8($sp) 
lw      $s0, 0x28+var_C($sp) 
addiu    $sp, 0x28 
jr      $ra 
or      $at, $zero 
100.8  练习题 2.17 
下列程序向 stdout 输出信息，而且每次输出的结果还不一样。请问它输出的是什么信息？ 
请下载编译后的可执行文件: 
 Linux x64（go.yurichev.com/17170）。 
 Mac OS X（go.yurichev.com/17171）。 
 Linux MIPS（go.yurichev.com/17172）。 
 Win32（go.yurichev.com/17173）。 
 Win64（go.yurichev.com/17174）。 
可能有个别版本的 Windows 无法执行这个程序。如果发生这种情况，请下载 MSVC 2012 redist.
（http://www. microsoft.com/en-us/download/details.aspx?id=30679）。 
100.9  练习题 2.18 
下列程序会验证密码。请找到它的密码。 
另外，它可以接受的密码不是唯一的。请尽可能地多列举一些密码。 
您还可以对它进行修改，改变程序的密码： 
 Win32（go.yurichev.com/17175）。 
 Linux x86（go.yurichev.com/17176）。 
 Mac OS X（go.yurichev.com/17177）。 
 Linux MIPS（go.yurichev.com/17178）。 
100.10  练习题 2.19 
这组题目和练习题 2.18 的练习内容相同： 
 Win32（go.yurichev.com/17179）。 
 Linux x86（go.yurichev.com/17180）。 
 Mac OS X（go.yurichev.com/17181）。 
 Linux MIPS（go.yurichev.com/17182）。 
100.11  练习题 2.20 
下列程序向 stdout 输出信息。请问它输出的是什么信息？ 
 Linux x64（go.yurichev.com/17183）。 
 Mac OS X（go.yurichev.com/17184）。 
 Linux ARM Raspberry Pi（go.yurichev.com/17185）。 
 Linux MIPS（go.yurichev.com/17186）。 
 Win64（go.yurichev.com/17187）。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 110011 章
章    高
高难
难度
度练
练习
习题
题  
这种难度题目的解答时间会很长。解答时间可能长达一整天。 
101.1  练习题 3.2 
下列可执行程序实现了某种著名的加密机制。请问它实现的是什么算法？ 
 Windows x86（go.yurichev.com/17188）。 
 Linux x86（go.yurichev.com/17189）。 
 Mac OS X（x64）（go.yurichev.com/17190）。 
 Linux MIPS（go.yurichev.com/17191）。 
101.2  练习题 3.3 
下列程序可打开并读取某个文件，而后计算某种值并在屏幕上输出浮点数。请问它实现的是什么功能？ 
 Windows x86（go.yurichev.com/17192）。 
 Linux x86（go.yurichev.com/17193）。 
 Mac OS X（x64）（go.yurichev.com/17194）。 
 Linux MIPS（go.yurichev.com/17195）。 
101.3  练习题 3.4 
这是一个用密码加、解密文件的工具。虽然我们找到了密文，但是找不到加密密码。此外，我们还知
道原文是英文的文本文件。虽然程序采用了较强的加密机制，但是它存在严重的功能缺陷。这种缺陷大大
降低了解密的难度。 
请找到程序的缺陷，并把密文还原为明文。 
 Windows x86（go.yurichev.com/17196）。 
 密文下载地址：http://go.yurichev.com/17197。 
101.4  练习题 3.5 
下列程序实现了版权保护机制。它会读取 key 文件，核对其中的用户名和序列号。 
本题的任务分为两个： 
 （低难度）使用 tracer 或别的 debugger，强制程序认可篡改过的 key 文件。 
 （中等难度）修改用户名，但是不得修改可执行程序。 
程序的下载地址如下： 
 Windows x86（go.yurichev.com/17198）。 
 Linux x86（go.yurichev.com/17199）。 
 Mac OS X（x64）（go.yurichev.com/17200）。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 101 章  高难度练习题 
907 
 Linux MIPS（go.yurichev.com/17201）。 
 Key 文件（go.yurichev.com/17202）。 
101.5  练习题 3.6 
下列程序属于羽量级的 web 服务器程序。虽然它支持静态文件，但是不支持 cgi 等动态脚本。这个程
序里有 4 个以上的安全漏洞。找到这些漏洞，并且想办法利用它们攻陷服务器。 
 Windows x86（go.yurichev.com/17203）。 
 Linux x86（go.yurichev.com/17204）。 
 Mac OS X（x64）（go.yurichev.com/17205）。 
101.6  练习题 3.8 
下列程序实现了著名的数据压缩算法。或许是因为原作者在输入代码时敲错了按键，它的解压缩功能
存在问题。我们能够在执行过程中看到它的 bug。 
压缩之前的原文件：go.yurichev.com/17206。 
压缩之后的压缩包：go.yurichev.com/17207。 
解压之后的（故障）文件：go.yurichev.com/17208。 
请找到程序中的 bug。如果可能的话，还请修改可执行文件，修补这个 bug。 
 Windows x86（go.yurichev.com/17209）。 
 Linux x86（go.yurichev.com/17210）。 
 Mac OS X（x64）（go.yurichev.com/17211）。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 110022 章
章    CCrraacckkm
mee//KKeeyyggeennm
mee  
有关软件知识产权保护措施的相关分析，请参见：http://crackmes.de/users/yonkie/。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附
附录
录 AA    xx8866  
A.1  数据类型 
16 位（8086/80286）、32 位（80386 等）和 64 位系统常用的数据类型有： 
byte（字节）：8 位数据。声明字节型数组和变量的汇编伪指令是 DB。计算机使用寄存器的低 8 位空间存储
字节型数据。也就是说，字节型数据通常存储在（寄存器助记符）AL/BL/CL/DL/AH/BH/ CH/DH/SIL/DIL/R*L 里。 
word（字）：16 位数据。声明字型数组和变量的汇编伪指令是 DW。计算机使用寄存器的 16 位空间存
储 word 型数据。也就是说，字型数据通常存储在（寄存器助记符）AX/BX/CX/DX/SI/DI/R*W 里。 
dword/double word：32 位数据。声明 DWord 型数组和变量的汇编伪指令是 DD。x86 CPU 的标准寄
存器及 x64 CPU 寄存器的 32 位空间都可存储 DWord 型数据。16 位应用程序则用寄存器对来存储 DWord
型数据。 
qword/quad word：64 位数据。声明 QWord 型数组和变量的汇编伪指令是 DQ。32 位系统使用一对寄
存器来存储 QWord 型数据。 
tbyte（10 字节型）：80 位，即 10 字节数据。符合 IEEE 754 标准的 FPU 寄存器都采用这种类型的数据。 
paragraph（16 字节型）：这种类型的数据主要出现在 MS-DOS 操作系统的程序里。 
Windows API 所定义的各种同名的数据类型（包括 BYTE WORD DWORD）及其数据存储空间，同样
遵循上述标准。 
A.2  通用寄存器 
x86-64 的 CPU 可以直接调用多数通用寄存器的 8 位（byte）和 16 位（word）存储空间。通用寄存器
有前向兼容的特性（可兼容最早的 8080CPU）。早期的 8 位 CPU（例如 8080）可以用一对 8 位寄存器存储
一个 16 位数据。如此一来，面向早期 8080 平台的程序就可以照常访问 16 位寄存器的低 8 位空间、高 8 位
空间，还能够把这两个寄存器的数据当作一个整体的 16 位寄存器使用。x86 平台的这种前向兼容的特性，
或许是为了方便人们在不同平台上移植程序。而采用 RISC 精简指令集的 CPU 则通常没有这种特性。 
此外，x86-64 CPU 上有 R 开头的寄存器，而 80386 以后的 CPU 都有 E 开头的寄存器。可见，R-寄存
器属于 64 位寄存器，而 E-寄存器属于 32 位寄存器。 
x86-64 CPU 还比 x86 CPU 多了 8 个通用寄存器，即 R8～R15 寄存器。 
在 Intel 官方手册中，这些寄存器的低 8 位空间（byte）的助记符带有“L”后缀（例如 R8L），而 IDA 程
序则给它们加上了后缀“B”（例如 R8B）。 
A.2.1  RAX/EAX/AX/AL 
7 
6 
5 
4 
3 
2 
1 
0 
RAXx64 
EAX 
AX 
AH 
AL 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
910 
逆向工程权威指南（下册） 
又称累加寄存器（Accumulator）。函数的返回值通常保存在这个寄存器里。 
A.2.2  RBX/EBX/BX/BL 
7 
6 
5 
4 
3 
2 
1 
0 
RBXx64 
EBX 
BX 
BH 
BL 
A.2.3  RCX/ECX/CX/CL 
7 
6 
5 
4 
3 
2 
1 
0 
RCXx64 
ECX 
CX 
CH 
CL 
又称计数器（Counter）。“REP”开头的指令、位移运算（SHL/SHR/RxL/RxR）通常都会影响这个寄存
器的状态。 
A.2.4  RDX/EDX/DX/DL 
7 
6 
5 
4 
3 
2 
1 
0 
RDXx64 
EDX 
DX 
DH 
DL 
A.2.5  RSI/ESI/SI/SIL 
7 
6 
5 
4 
3 
2 
1 
0 
RSIx64 