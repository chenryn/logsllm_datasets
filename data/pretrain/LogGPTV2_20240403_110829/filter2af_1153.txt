# GeForce Experience OS 命令注入漏洞

## 译文声明
本文为翻译文章，原作者为 rhinosecuritylabs，原文发布于 rhinosecuritylabs.com。译文仅供参考，具体内容及含义以原文为准。

## 0x01 漏洞概述
本文将介绍我如何发现并利用 NVIDIA GeForce Experience (GFE) 中的远程代码执行漏洞。该漏洞影响 GFE 版本号小于 3.19 的所有版本，并被分配了 CVE-2019-5678 编号。用户只需访问攻击者控制的网站并进行简单的键盘操作，其主机就可能被完全控制。当 GFE 启动时，会有一个名为 "Web Helper" 的本地服务随之启动，而此服务存在命令注入漏洞。

### 0x01.1 NVIDIA GFE 简介
根据英伟达官方网站的描述，GeForce Experience 是一款辅助应用程序，旨在帮助用户保持驱动程序更新、一键优化游戏设置，以及录制、捕捉和直播游戏内容。它作为英伟达产品的一部分，提供了丰富的功能以提升用户体验。

## 0x02 漏洞挖掘

### 0x02.1 发现漏洞
MWR Labs 曾发表一篇关于 GFE 本地权限提升 (LPE) 漏洞的文章，指出 GFE 会开启一个本地 API 服务器，允许用户通过该服务器控制 GFE 的各项功能。例如，当用户更改 GFE GUI 设置时，实际上是调用了这个本地 API。基于这一发现，我认为有必要深入研究该 API 是否存在其他潜在的安全隐患。GFE 开启的这个服务器基于 NodeJS Express 框架，相关源文件位于 "C:\Program Files (x86)\NVIDIA Corporation\NvNode" 目录下。

为了发送有效请求，HTTP 标头中必须包含一个在启动时随机生成的 token 值，该值存储在 "%LOCALAPPDATA%\NVIDIA Corporation\NvNode\nodejs.json" 文件中。此外，该文件还记录了一个随机开放端口。由于文件名固定不变，研究人员可以轻松在其本地计算机上找到它。以下展示了文件内容示例：

### 0x02.2 标头测试
首先，我尝试绕过标头验证机制来发送有效请求。从 `index.js: 185` 可知，系统仅对比用户发送的标头与本地 token，如果匹配失败则返回 403 错误。然而，我发现无法直接绕过这种验证方式。不过，我还注意到另一个有趣的现象：GFE 使用了跨源资源共享 (CORS)。在 `index.js: 185` 处，"Access-Control-Allow-Origin" 标头被设置为 "*" 并应用于所有请求。这意味着，一旦用户的 token 泄露，攻击者可以从任何来源（如受控网站）向服务器发起请求。同时，攻击者还可以使用 XMLHttpRequest (XHR) 发送自定义安全标头的请求。

### 0x02.3 API 测试
考虑到这一点，我开始测试能否通过成功发送请求来实现代码执行。我在全局范围内搜索 "exec" 关键词，最终在 NvAutoDownload.js 文件中找到了相应函数：
```javascript
// 示例代码
app.post('/gfeupdate/autoGFEInstall/', function(req, res) {
    if (req.headers['content-type'] === 'text/*') {
        const command = req.body;
        childproc.exec(command, (error, stdout, stderr) => {
            // ...
        });
    }
});
```
从上述代码可以看出，用户可以通过向 "/gfeupdate/autoGFEInstall/" 发送 POST 请求并将 Content-Type 设置为 "text/*" 来直接执行操作系统命令。我拦截了正常的请求，并修改其内容以确保其能够正常运行。上图所示的请求可以打开计算器程序 (calc.exe)。尽管如此，在实际情况下，攻击者并不知道用户的 token。因此，下一步是测试是否有可能读取存储 token 的文件。

## 0x03 利用方法
前文已讨论过，由于错误的 CORS 策略，可以通过浏览器实施攻击。但是，要使攻击成功，仍然需要获取受害者的 token。为此，我想到了一种解决方案，即诱导用户上传存储 token 的文件。虽然这听起来有些不可思议，但由于存储 token 的文件路径和名称都是固定的，因此只要诱使用户按几个键就可以实现命令注入。

### 0x03.1 攻击步骤
在 Chrome 浏览器中，可以通过按下特定组合键将任意内容复制到剪贴板；而在 Firefox 中，则需要鼠标配合。对于 Chrome 而言，只需按三个键——"CTRL+V+Enter" 即可完成整个过程。
1. “CTRL” - 将存储 token 的文件路径（"%LOCALAPPDATA%\NVIDIA Corporation\NvNode\nodejs.json"）复制到剪贴板，并打开文件上传对话框选择文件。
2. “V” - 将剪贴板中的内容粘贴到上传路径字段中。
3. “Enter” - 上传 nodejs.json 文件，并读取其内容。
4. 最后，将 token 值嵌入 XHR 请求，并发送给 GFE API 端点，从而导致命令执行。

攻击演示视频见附件或链接。

## 0x04 总结
尽管该攻击需要一定程度的用户交互，但所需的操作非常简单，欺骗用户按几个按钮并不是难事。真正的问题在于，本地服务器的 API 端点允许来自任何源的跨源资源共享请求，这意味着如果 token 泄露，攻击者可以通过浏览器对受害者本地计算机上的 GFE 任意 API 端点发起 XHR 请求。

最新版 GFE（3.19）已经修复了命令注入漏洞，请尽快升级！NVIDIA 似乎只是删除了导致命令注入的端点，而未修复过于宽松的 CORS 策略，且仍把 nodejs.json 文件存放在固定位置。因此，我们依然可以按照本文所述的方法与 GFE API 端点进行交互。

如果您不使用 GFE，建议将其卸载。我已将概念验证代码上传至 [GitHub](https://github.com/RhinoSecurityLabs/CVEs/tree/master/CVE-2019-5678)，感兴趣的话可以自行下载研究。