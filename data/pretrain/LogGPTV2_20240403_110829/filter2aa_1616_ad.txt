测，至于能不能做好完全是编写上的谨慎加技巧。
当然，一点把柄都不留下也是很非常困难的。
当然，
点把柄都不留下也是很非常困难的。
AV检测的弱点剖析
AV检测的弱点剖析
•
1 特征检测:
•
该方式受变形代码的影响非常大,很容易失效。虽然反病毒引擎中特征提取的方式非常
多，可以根据病毒库的不同对应不同的特征提取方式，但针对多态/变形情况，2～ 5
字节的特征是引擎在效率及误报方面所不能承受的
字节的特征是引擎在效率及误报方面所不能承受的。
•
2 启发式检测：
•
静态启发式检测受加壳
反汇编深度
花指令技巧
系统特性等因素困扰
不能完全
静态启发式检测受加壳，反汇编深度，花指令技巧，系统特性等因素困扰，不能完全
还原出程序的具体流程。
•
静态启发式的优势是它不受代码环境，程序分支影响，是对动态启发式分析的补充,目
前存在以下问题：
•
1）除了利用分析PE文件特异性来确定是否存在被感染的可能外，检测的手段还是偏少，
应结合文件代码段的分析。
）缺少对的同义
函数的语义识别
比如
•
2）缺少对的同义API函数的语义识别，比如
•
[CFile.OpenFile ]  [fopen]        [CreateFileA/W],
•
[CreaeProcess   ]  [ShellexEcute] [WinExec] 
•
等均是相同含义,但对静态分析来说却是不同的“对象”，这样会导致规则冗余。
等均是相同含义,但对静态分析来说却是不同的
对象
，这样会导致规则冗余。
AV检测的弱点剖析
AV检测的弱点剖析
•
3）需要增强文件格式规则的分类，防止exe规则与dll规则混用。
•
4）增强对特异性的分析而不是一定要恶意行为
4）增强对特异性的分析而不是
定要恶意行为。
•
5）增强关联性分析，例如分析恶意程序（Trojan/DL/W32/Delf.nl）静态启
发式分析到了
•
CODE:00412835 E8 EE 0B FF FF       call    sub_403428
•
CODE:0041283A                      loc_41283A:                           
•
CODE:0041283A 6A 01
push
1
; nShowCmd
•
CODE:0041283A 6A 01                push    1                ; nShowCmd
•
CODE:0041283C 6A 00                push    0                ; lpDirectory
•
CODE:0041283E 6A 00                push    0                ; lpParameters
•
CODE:00412840 68 64 2D 41 00       push    offset File ; 
"h
//
26
/
/ ili h
l"
"http://aa.xz26.com/gg/aili.html"  
•
CODE:00412845 68 84 2D 41 00       push    offset Operation ; "Open"
•
CODE:0041284A 6A 00                push    0                ; hwnd
•
CODE:0041284C E8 2F 30 FF FF
call
ShellExecuteA
CODE:0041284C E8 2F 30 FF FF       call    ShellExecuteA
AV检测的弱点剖析
AV检测的弱点剖析
如果此时报警
则该规则会产生误报
因为受自身分析程度的影响
•
如果此时报警，则该规则会产生误报，因为受自身分析程度的影响，
不能完全符合一种病毒家族的规则，这时需记录该位置，待全部分析
完毕，继续向该位置前，后扫描，寻找更多的“依据”，对该样本，
向后扫描会出现，创建临时文件的行为。
向后扫描会出现，创建临时文件的行为。
•
反病毒技术发展到今天，动态虚拟机的启发式已经非常成熟。不仅仅
是应用在对抗多态/变形病毒的方面，而是集脱壳启发式分析一体化
是应用在对抗多态/变形病毒的方面，而是集脱壳启发式分析
体化
的检测方案，目前在以下几方面仍需改进：
•
6) 受程序实际分支条件干扰，触发发条件影响，可能被病毒引向另
) 受程序实际分支条件干扰，触发发条件影响，可能被病毒引向另
一个流程。
•
Trojan.Win32.Small.cif(PECompact 2.x壳)
•
bytehero team动态虚拟机仿真环境下执行情况:
AV检测的弱点剖析
AV检测的弱点剖析
•
0x9000036B(0x03EDF88C)--->0x00415221  VirtualAlloc
•
0x90000241(0x03EDF88C)--->0x05200BAC  LoadLibraryA
•
0x90000197(0x03EDF88C)--->0x05200BCE
GetProcAddress
0x90000197(0x03EDF88C)
>0x05200BCE  GetProcAddress
•
...
•
0x90000333(0x03EDF88C)--->0x00409623  SetUnhandledExceptionFilter
•
0x9000020E(0x03EDF88C)--->0x004095CF  HeapSize
(
)
p
•
0x900001AC(0x03EDF88C)--->0x0040561A  GetStartupInfoA 
•
----》已经完成脱壳，此处调用静态分析，下方分析的结果是动态没有分析到恶意行
为，直接退出。
•
0x90002F75(0x03EDF88C)--->0x0040104D  GetModuleFileNameExA
•
0x900001B6(0x03EDF88C)--->0x00401086  GetSystemDirectoryA
•
0x9000013B(0x03EDF88C)--->0x00403BD7  GetCurrentProcess
0 90002F75(0 03EDF88C)
>0 00403BDD
G tM d l Fil N
E A
•
0x90002F75(0x03EDF88C)--->0x00403BDD  GetModuleFileNameExA
•
0x9000013B(0x03EDF88C)--->0x004028CA  GetCurrentProcess
•
0x90002F75(0x03EDF88C)--->0x004028D0  GetModuleFileNameExA
•
0x9000004F(0x03EDF88C)--->0x0040298C
CreateFileA
•
0x9000004F(0x03EDF88C)
>0x0040298C  CreateFileA
•
0x900000B6(0x03EDF88C)--->0x004010D5  ExitProcess
AV检测的弱点剖析
AV检测的弱点剖析
• Trojan.Win32.Small.cif在静态分析中的情况：
•
0xdb    : 0x40372c call[3] - > RegCreateKeyExA
•
0xdc
: 0x40378c call[3] - > RegSetValueExA
0xdc    : 0x40378c call[3] 
> RegSetValueExA
•
0xdd    : 0x40379b call[3] - > RegCloseKey
•
...
•
0x10c   : 0x403f51 call[5] - > FindNextFileA
•
0x10d
: 0x403f5f call[5] - > GetLastError
0x10d   : 0x403f5f call[5] 
> GetLastError
•
0x10e   : 0x403f66 call[5] - > FindClose
•
0x110   : 0x402207 call[4] - > GetFileAttributesA
•
...
•
0x3a8
: 0x4032bd call[3] - > GetCurrentProcess
0x3a8   : 0x4032bd call[3] 
> GetCurrentProcess
•
0x3a9   : 0x4032c4 call[3] - > OpenProcessToken
•
0x3aa   : 0x4032d9 call[3] - > LookupPrivilegeValueA
•
0x3ab   : 0x403301 call[3] - > AdjustTokenPrivileges
•
0x3ac
: 0x40330e call[3] - > CloseHandle
0x3ac   : 0x40330e call[3] 
> CloseHandle
•
0x3b1   : 0x403fe6 call[3] - > GetCurrentDirectoryA
•
0x3b2   : 0x40405e call[3] - > CreateFileA
•
0x3b3   : 0x404095 call[3] - > CloseHandle
•
0x3b6
: 0x4040ef call[3] - > GetSystemDirectoryA
0x3b6   : 0x4040ef call[3] 
> GetSystemDirectoryA
•
0x3b7   : 0x404194 call[3] - > CloseHandle
AV检测的弱点剖析
AV检测的弱点剖析
•
7)因为不可能仿真所有的windows API函数，那么anti-vm 也就是变
得容易了，这方面正不断的去完善。
•
8）一些特殊的结构没有模拟，例如：
•
__CxxFrameHandler 方式触发的病毒代码
t
d f
t
t
f
d
•
typedef struct _cxx_func_descr
•
{
•
u32  magic;      // 0x19930520
•
u32  unwind_count;
•
u32  *unwind_info;
•
u32  tryblock_count;
•
u32  *tryblock; // 关键跳转数据 ,指向下面的结构try_info
•
u32  unkown[3];
•
}cxx func descr;
}c
_ u c_desc ;
AV检测的弱点剖析
AV检测的弱点剖析
•
typedef struct _try_info{
•
u32 start_level;
32
d l
l
•
u32 end_level;
•
u32 catch_level;
•
u32 catchblock_count;
•
u32 *catchblock_info; //关键跳转数据，指向下面的catchblock 结构
•
}try_info;
typedef struct _catchblock_info{
•
u32  flags;
•
u32  *type info;
yp _
;
•
u32  offset;
•
u32  *call;          // catch 块处理函数
•
}catchblock info;
}catchblock_info;
未来可能的检测对抗？
未来可能的检测对抗？
•
目前在AV-Soft中静态/动态启发式分析是独立存在的模块，唯一的联系是受
引擎的调度控制。
•
面对未来复杂的病毒感染技术中可能要联合起来分析，比如单独的静态是不
能分析修正过的重定位信息的,下面这一句是被修正过的重定位数据，因为没
有导入该函数，静态检测将无法识别7C46E012这个API的地址值，需要动态分
析辅助
析辅助。
•
00404044    53            push ebx
•
00404045
E8 120E467C
call kernel32 Toolhelp32ReadProcessMemory
00404045    E8 120E467C   call kernel32.Toolhelp32ReadProcessMemory 
•
0040404A    E8 EFCFFFFF   call vir.0040103E
•
同样动态可以利用静态的流程跳跃，排除一些无效分支干扰。
同样动态可以利用静态的流程跳跃，排除
些无效分支干扰。
•
未来能否设计出即时执行虚拟机技术？能在任何代码环境下模拟执行,不受虚
拟环境影响。
谢谢！
谢谢！
Q&A
Q&A
Thanks for your attention....
neineit@gmail com
PI:EMAIL
www.bytehero.com
Reference
Reference
•
[1] SPTH         《Code Evolution: Follow nature's example》
•
[2] saec.        《Evolutionary Virus Propogation Technique》
•
[3] kaze.        《Stealth api-based decryptor》
•
[4] z0mbie       《Opcode Frequency Statistics》
•
[5] peter szor . 《The Art of Computer Virus Research and Defense》
[5] peter szor . 《The Art of Computer Virus Research and Defense》
•
[6] J. S. Bach.  《Artificial intelligence and viruses》
•
[7] Benny.      《Benny's Metamorphic Engine for Win32》
[8] 胡仕成
《Vi
C
E
l
i
G
i
Al
i h 》
•
[8] 胡仕成.      《Virus Co-Evolutionary Genetic Algorithm》
申明
申明
• 本文目的旨探索一种新的感染方式及如何
预防
本文仅做技术研究交流之用
不提
预防。本文仅做技术研究交流之用，不提
供源码及二进制程序。任何人都可以利用
此文进行自己的技术研究及代码实现。但
自己负担开发程序及造成非法行为的法律
自
负担开发程序及造成非法行为的法律
责任。