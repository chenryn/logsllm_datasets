On black-box monitoring techniques for
multi-component services
Ricardo Filipe, Jaime Correia, Filipe Araujo and Jorge Cardoso
CISUC, Department of Informatics Engineering, University of Coimbra
Coimbra, Portugal
Emails: PI:EMAIL, PI:EMAIL, PI:EMAIL and PI:EMAIL
Abstract—Despitetheadvantagesofmicroserviceandfunction- watch-dogs, dashboards, etc., have serious shortcomings for
oriented architectures, there is an increase in complexity to modern distributed systems. Although they can indeed create
monitor such highly dynamic systems. In this paper, we analyze
averygoodimageoftheinfrastructure,twoproblemssubsist:
twodistinctmethodstotacklethemonitoringprobleminasystem
first, they only supply an extended set of tools to react to al-
with reduced instrumentation. Our goal is to understand the
feasibility of such approach with one specific driver: simplicity. readyin-placeincidents,andsecondlytheylack“intelligence”,
We aim to determine the extent to which it is possible to if the system does not have observability, i.e., if we cannot
characterize the state of two generic tandem processes, using access metrics in precise spots that are hidden inside complex
as little information as possible.
black boxes.
Toanswerthisquestion,weresortedtoasimulationapproach.
Unfortunately, actual monitoring tools are built on the
Using a queue system, we simulated two services, that we could
manipulatewithdistinctoperationsetsforeachmodule.Weused premise of observable systems, with agents, instrumentation,
thetotalresponsetimeseenupstreamofthesystem.Havingthis or some sort of module heartbeats. Furthermore, some re-
setupandmetric,weappliedtwodistinctmethodstoanalyzethe sources may elude administrators control, such as objects lo-
results. First, we used supervised machine learning algorithms
catedinthird-partyproviders -e.g.contentdeliverynetworks.
toidentifywherethebottleneckishappening.Secondly,weused
While some frameworks aim to gather information from the
an exponential decomposition to identify the occupation in the
two components in a more black-box fashion. client-side point-of-view such as Pingdom [1], Bucky [2], or
Results show that both methodologies have their advantages enterprise solutions, such as Dynatrace [3], they are basically
and limitations. The separation of the signal more accurately aimed at creating simple dashboards and insights of the
identifies occupation in low occupied resources, but when a platform to trigger alerts to administrators based on a set of
service is totally dominating the overall time, it lacks precision.
custom rules. We want to go beyond this, and automatically
The machine learning has a more stable error, but needs the
infer service occupation, using as little data as possible from
training set. This study suggest that a black-box occupation
approach with both techniques is possible and very useful. the systems, possibly because such data is unavailable.
Index Terms—Black-box monitoring, Observability, Simula- In [4], we gathered clients’ data — collected by JavaScript
tion, Analytics
snippets—,toimprovemonitoringusingtheclient-sidepoint-
of-view, as a complement to traditional monitoring applica-
I. INTRODUCTION
tions.In[5],weusedmachinelearningtechniquestopinpoint
Microservicesystemsareamodernapproachusedbymajor two sources of system bottlenecks — CPU and network —,
technologicalcompaniestocreatehighlyavailable,elasticand using only the raw data visible by clients.
dynamic systems. This kind of architecture enables teams to
In this paper we further extend our previous work with two
work independently in different life-cycles and ensures that
generic layers that simulate two components of a system, as
modules are oblivious to changes in the surrounding system.
in[5],whereinternalobservabilitymaynotapply.Thissystem
Despite the changes in the development methodology, there
could be a microservice that is complex and contains several
are some challenges concerning monitoring and observability
queuesinside,oracoupleofmicroservices,oneaftertheother,
of production systems, as these become more complex. Dy-
ifintermediatetimingsofrequestsarenotavailable,i.e.,ifwe
namic scalability, network distribution, third-party resources,
cannot relate the times at which the first and second services
or dynamic architectures, are the sort of features that make
interact in response to an initial request to the first service.
microservicesystemssodifficulttoobserveandcontrol.When
To get insights about the two-layer system, we only used the
compared to monolithic solutions, this increases the possible
total time seen by the caller. This time aggregates the overall
points of failure and can severely decrease the quality-of-
invocation time that sums up the two services. Based on these
service. We need better tools and methods to understand the
time, our goal is to determine the overall occupation of both
overallstatusofthesystem.Moretraditionalapproachesbased
services. We created a simulation using a two queue system,
on filling the source code with instrumentation, or generic
withonegoal:understandtheserviceoccupationofeachlayer.
metrics such as CPU or network occupation, agents, logging,
We ran a simulation with two queuing systems and collected
978-1-5386-7659-2/18/$31.00c2018IEEE the response times. We then applied two methodologies to
extractoccupationofeachlayer(component)andextracterror request spent in the two components, from the beginning of
metrics: first, we used a similar approach as in [5], with the request until the end. In fact, our method of decomposing
supervised machine learning algorithms to identify service a system of two layers is very generic and can be used
capability. Secondly, we used another method that tries to in different scenarios, like a system with a database and
decompose the overall response time into the components’ network, or two modules interconnected, or even a chain of
times to identify the occupation of each. microservices.
Our results demonstrate that a methodology that extrap- In the next subsections, we present our methods to evaluate
olates information about a non-observable system of two a “black-box” approach of a two-layer system. First, we
layers is feasible and can improve performance monitoring. present an approach based on a machine learning supervised
There is no overhead associated with these methodologies, algorithm. Then, we describe our method based on the split
and both methods — machine learning and division of the of the signal. Both methods use the data collected from our
signal —, present advantages and complementary properties. experiment in Section III.
These methods can improve monitoring when instrumentation
or observability is difficult or unable to be achieved by A. Machine Learning Algorithm
administrators of the system.
We followed a machine learning approach to predict each
The rest of the paper is organized as follows. Section II
layer’s occupation from the experiment input data. We used a
describes the monitoring problem we tackle in this paper as
regressionmodel—insteadofaclassifier—sinceouroutput
well as the methods we propose. Section III analyze how we
is a continuous value, instead of a set of class labels [8]. We
made our experiment. In Section IV we present and evaluate
created a regression model for each layer, as illustrated in
the meaning of the results, discussing the strengths of both
Figure 1.
approaches and its limitations. In Section V we present the
In addition to the regression models, we also wanted to
related work and finally in Section VI concludes the paper
evaluatethepossibilityofhavingdecisiontreeclassifiers.This
and describes future directions.
is very appealing, since decision tree models are highly inter-
II. PROPOSEDMETHODOLOGY pretable, and therefore an advantage to system administrators
and operators.
In this section, we describe the problems and challenges
We train our model with 3,000 samples, or lines. Each
associated with observability of a system and the definition of
line has 2,000 requests made to the system, meaning that our
the metrics used.
classifier has 2,000 features – e.g. inputs. There is a 2001st
With the increase of complexity of applications, and the
value in each line, that corresponds to the layer 1 or layer
need to reduce time-to-market, monitoring becomes more
2 occupation (i.e., the real occupation of each layer). This
importantthanevertoensurethatcomponentfailuresandbot-
valueismandatory,sincewearetrainingasupervisedmachine
tlenecks donot affectuser’s quality-of-experience.Traditional
learningalgorithm.However,thisoutputisnotavailableinthe
monitoring approaches use a large set of tools and methods,
test cases, because we want to predict the occupation level, as
such as tracing, logging, correlation identifiers between ser-
illustrated in Figure 1.
vices or system tools, such as Nagios [6] or Zabbix [7].
Althoughfunctional,theseapproachesrequirethesystemtobe
prepared to give away information about its current internal
status. In legacy systems, or systems without some form of
instrumentationoragents,thismightbedifficult.Additionally,
the effort to create logging or tracing in a production system
may be too high.
In this paper, we present an approach that neither requires
Fig. 1: Representation of the regression models.
instrumentation, nor disperse logging tools over the system.
In [5], we followed a similar approach to pinpoint bottle-
Among the wide range of supervision machine learning
necks in two distinct layers: external network and internal
methods available in the literature [9], we focused on two
system. In this paper, we further evolve this methodology, by
models: Simple Linear Regression (SLR) and Support Vector
modeling a system in two components, and determining each
Machine (SVM). SLR assumes linearity between input and
component’s occupation, without using instrumentation in the
output,andSVMallowsanon-linearitybetweeninput-output,
middle.Understandingeachcomponent’soccupationmaygive
to the kernel. This turns them into good choices to do the
a huge advantage for administrators, whenever monitoring is
regression. Since we can manipulate the SVR kernel, we can
impracticable, either because it is too costly or because the
use out-of-the-box a non-linear kernel, like a Radial Basis
internal details of the system are unknown, e.g., because the
Function (RBF) or a polynomial kernel.
source code is unavailable or too complex. The only metric
that we used was the total time observed by the entity that Theliterature[9]alsoincludesawiderangeofdecisiontree
evoked the system. The total time represents the time that the models, but since we wanted to predict a real value, we opted
foradecisiontreeregressionmodel.Thiskindofmodelallows
us to have more insight about how it works, thus making it  z
more interpretable, a great advantage for sysops. h(λ,µ,z)= λe−λtµe−µt dt
To run the algorithms, under our training set, we used 0  1 e−zµ  (2)
=λµ −
the scikit learn framework [10]. This framework, written ezλµ−λezλ µ−λ
in python, is a common standard for data scientists and
people that want to generate models based on input data.
 z
For SVR, we used RBF and a polynomial kernel to evaluate
H(λ,µ,z)= h(t) dt
the differences, with normalized data (input and output), in
0
the [0,1] interval, to achieve better predictions. The decision  z  1 e−tµ 
= λµ − dt
tree regression model was evaluated with default parameters etλµ−λetλ µ−λ
0
and data. Concerning the evaluation, all experiments were λµe−zµ λezλ+ ezλ−1 µ−λezλ ezµ
performedusinga10-foldcrossvalidationwith20repetitions. =
λezλµ2−λ2ezλµ
(3)
B. Exponential Variable Sum Algorithm
Armed with the cumulative distribution function, and the
The problem of determining the occupation of two sequen- empirical cumulative distribution function, ecdf(x), from the
tial components, which we call layers, be they resources or observed sample S of total service time, we made an R script
distributedservices,observingonlyglobalresponsetimes,can todeterminethevariablesλandµ,bysolvingtheoptimization
be modeled as determining the two tandem random processes model in Equation 4. The objective is selecting the variables
responsible for generating an observed request time distribu- to minimize the mean square error between the empirical
tion. In other words, given a statistical distribution, since we cumulativefunctionofthesampleandH(z),effectivelyfitting
know a priori that the distribution is the sum of two factors, it to the data.
what we want is to separate these factors. Particularly, in this
paperweexplorethisapproachundertheassumptionsthatthe 1 n
service times are approximately exponentially distributed and Minimize (η i− i)2
n
λ,µ
the service is under relatively low load (occupation ρ<0.3), i=1
atthetimeofobservation.Aslongastheloadandparallelism subject to τ =max(S i), ∀i
τ
of each layer is known, the results can be used to extrapolate δ =