I is the set of edges in DUC such that there exists an edge e 
and EA
I from v2 to v1 iff v2 inherits v1 (v1, v2 ∈ VA). Similarly, define 
∈ EA
I, use case inclusion graph 
a use case inheritance graph DUC.GU
Ext  in  DUC  as 
DUC.GU
directed graphs for use case inheritance, inclusion and extension.  
Further,  let  DUC.GAUC  =  (VA,  VU,  EAUC)  be  the  actor-use  case 
association  (bipartite)  graph  in  DUC  where  EAUC  =  {(acm,  uci)  | 
actor acm is associated with use case uci where acm ∈ VA, uci ∈ 
VU}  (we  consider  the  edge  is  from  the  actor  to  the  use  case). 
I = (VA, EA
I), 
Collectively, DUC is defined as a tuple of (VA, VU, GA
Ext),  GAUC  = 
Ext  =  (VU,  EU
I  =  (VU,  EU
GU
(VA,VU, EAUC)). 
Note that there cannot be a cycle in actor or use case inheritance 
directed graphs since an element cannot (indirectly) inherit from 
itself.  Additionally,  for  this  first  phase  of  our  work,  we  assume 
that there is no cycle in use case inclusion and extension directed 
graphs.  We  make  this  assumption  based  on an email interaction 
with  OMG  to  get  a  clarification  on  the  issue  of  inclusion  and 
extension  cycles,  and  based  on  their  response  (cycles  unlikely), 
we  believe  our  assumption 
these 
assumptions,  we  can formulate an algorithm for overall security 
reasonable.  Given 
Inc  =  (VU,  EU
Inc),  GU
I),  GU
is 
assurance that employs a depth-first search strategy to check the 
corresponding SARs in Sections 4.1 to 4.3 between a visited node 
v and a newly reached node w by the edge (v, w), whenever we 
first  encounter  the  new  node  w  on  the  traversing  path.  In  the 
process,  we  must  also  check  the  SAR  AUC  for  association 
connections  from  each  actor  to  some  use  cases  to  guarantee  the 
security assurance between the actor and use cases. 
In  support  of  this  approach,  Figure  3  contains  common  user-
defined  types  and  variables  to  support  the  algorithms.  The  type 
Node  represents  UML  elements  (actors  and  use  cases)  in  a  use 
case diagram and has properties: security_level for the security 
level  assigned  to  that  element;  and,  visited  and  post  for  the 
depth-first  search  strategy  to  track  the  traversing  status  of  the 
node. Initially, the visited property of a node v is false (i.e., v has 
not been visited) and will be set to true when v is actually visited, 
starting  the  depth-first  search  from  v  at  the  beginning  of  the 
procedure DFS_T(G, SAR, v). The post property (initial value 
is 0) is set to the time (whose value is incrementally stored by the 
Postcount variable) that v has just finished its depth-first search 
originating  from  itself  (before  exiting  the  procedure  DFS_T(G, 
SAR,  v)).  Figure  3  also  contains  a  graph  definition,  and 
definitions for a use case diagram and its directed graphs for actor 
inheritance,  and  use  case  inheritance,  inclusion,  and  exclusion. 
We also have a global variable sp for the chosen MAC security 
property: “SS”, “LS”, and “SI” for Strict *, Liberal *, and Simple 
Integrity Properties, respectively. 
Typedef Security_Ordered_Set {label set with ≤ relation} 
Typedef Node { 
  name: String; 
  security_level: Security_Ordered_Set; // CLS/CLR of node 
  visited: Boolean 
  post: Integer;  
} 
Typedef Graph (V, E) where 
V = {v | v: Node} and E = {(v, w) | v, w: Node} 
Typedef Use_Case_Diagram {  
  VA, VU, GA
  GU
} 
postcount:: Integer; 
sp: String // MAC security property: “SS”, “LS” or “SI” 
I), GU
Ext), GAUC = (VA,VU, EAUC); 
Ext = (VU, EU
Inc = (VU, EU
I = (VU, EU
I = (VA, EA
I), GU
Inc), 
Figure 3. Common Types and Variables in our Algorithms. 
as 
parameter. 
Using  these  definitions,  Figure  4  contains  the  pseudo-code  of 
security assurance checking in a use case diagram, which includes 
the invocation of the SARs given in Sections 4.1 to 4.3. 
The  main  procedure UC_Diag_Sec has the concerned use case 
diagram  UCD 
procedure 
UCD_Sec_Check  is called to check each relationship graph in 
the use case diagram. UCD_Sec_Check will reset the status of 
all  of  the  nodes  and  then  call  the  depth-first  search  DFS_T  to 
check  each  connection  edge  based  on  the  appropriate  SAR  (by 
calling  Rule_Check). 
procedure 
UC_Diag_Sec  will  check  each  association  connection  (a,  u) 
from each actor a to some use case u in the use case diagram by 
calling Rule_Check(a, u, “AUC”).  
the  main 
Finally, 
First, 
the 
Boolean Rule_Check(src, dest:Node, R :String) { 
 c: Boolean; 
 switch R   // select corresponding rule 
   “AIS”,“UCIS”,“UCI”,“UCE”,“AUC”: 
     c=src.security_level ≥ dest.security_level 
   “AM”, “MM”: { 
       if (dest is IMuM)  
           c=src.security_level ≥ dest.security_level 
      else // dest is MuM 
           switch sp // select MAC property 
               “SS”: c=src.security_level = dest.security_level 
               “LS”: c=src.security_level ≤ dest.security_level 
               “SI”: c=src.security_level ≥ dest.security_level 
  return c; 
} 
DFS_T(G: Graph, R: String, v: Node) { 
v.visited = true; 
For each edge (v, w) in G.E { 
If (! Rule_Check(v, w, R)) Report SAR R is violated; 
If (! w.visited) // (v, w) is a TREE-EDGE; 
   DFS_T(G, R, w); 
Else If (w.post = 0) Report Cycle; // (v, w) is a BACK-EDGE; 
} // End For 
v.post = postcount ++; 
} 
UCD_Sec_Check(G: Graph, Rule: String) { 
   Postcount = 1; 
   For each v in in G.V { 
      v.visited = false; // reset all nodes as not visited 
      v.post = 0;} 
   For each v in in G.V  
      If (! v.visited)  DFS_T(G, Rule, v); 
} 
UC_Diag_Sec(UCD: Use_Case_Diagram) { 
// Actor inheritance security assurance check 
   UCD_Sec_Check(UCD.GA
// Use case inheritance security assurance check 
   UCD_Sec_Check(UCD.GU
// Use case inclusion security assurance check 
   UCD_Sec_Check(UCD.GU
// Use case extension security assurance check 
   UCD_Sec_Check(UCD.GU
// Actor-Use case association security assurance check 
   For each actor a in UCD.VA 
      For each edge (a, u) in UCD.EAUC  
         If (! Rule_Check(a, u, “AUC”)) Report SAR “AUC” violated; 
} 
Ext, “UCE”); 
I, “UCIS”); 
Inc, “UCI”); 
I, “AIS”); 
Figure 4. Security Assurance Check for Use Case Diagram. 
Inc| + |EU
the 
I| + |EU
running 
I| + |EU
The running time of UCD_Sec_Check is Θ(|V|+|E|) (where |V| 
and |E| are the numbers of nodes and edges of G, respectively), 
since the running time of depth-first search (by D DFS_T) on G 
=  (V,  E)  is  Θ(|V|  +  |E|)  ([8])  and  the  running  time  of 
Rule_Check 
time  of 
is  constant.  Thus, 
Ext| 
UC_Diag_Sec is Θ(|VA| + |VU| + |EA
+ |EAUC|). 
For the algorithm for the security assurance check of a sequence 
diagram, we define additional concepts.  Let Dseq be a sequence 
diagram and msg a message in Dseq with a sequence number based 
on the Dewey decimal numbering system. We define the nested 
message (directed) tree of an initiating sender s as either an actor 
or a class method, is denoted by (GMsg, s, uc) which has the root 
as a special node s and used for describing actions of use case uc; 
the other nodes are method names used for corresponding nested 
messages and the directed edges are the nested messages starting 
from s. As such, the Dewey decimal numbering for the tree (GMsg, 
s,  uc)  is  constructed  by  complying  with  the  depth-first  search 
strategy for checking edges in tree (GMsg, s, uc). Figure 5 shows 
the nested message tree (GMsg, Senior_Staff, Add_Survey_Header) 
with the nested levels on edges and the actor Senior_Staff as the 
initial sender for the use case Add_Survey_Header. 
For  our  purposes,  Dseq  contains:  a  set  of  instances  Dseq.Instance 
(modeling instances of classes and/or actors) that send and receive 
messages (by calling methods of those classes), the associated use 
case set Dseq.UCase, and a forest of nested message directed trees 
Dseq.MsgForest = {(GMsg, si, ucj) | i = 1,2,…, ucj ∈Dseq.UCase} of 
initiating senders si occurring in some sequence order. To verify 
security  assurance 
in 
Dseq.MsgForest, eventually call the DFS_T3 (Figure 4) (also using 
Rule_Check in Figure 4) to perform three checks:  
1.  Compare  the  CLS  of  uc  with  the  CLS  of  MuMs  (SAR 
in  Dseq,  we  visit  all  of 
trees 
the 
UCM); (2).  
2.  Compare  the  CLSs  of  calling  method  and  called  method 
(SAR MM);  
If  the  sender  is  an  actor,  compare  the  CLR  of the sender s 
with the CLS of each called method (SAR AM).  
3. 
Figure 6 contains the algorithm Seq_Diag_Sec of the assurance 
check for sequence diagram SeqD, with the running time as the 
sum of the number of trees in the forest Dseq.MsgForest and the 
total number of messages in Dseq.  
5.  PROTOTYPING EFFORT 
We have been integrating MAC definition and security assurance 
rules  (SARs)  as  given  in  Section  4  into  Borland’s  Together 
Control Center (TCC), which is a UML tool for analysis, design, 
development  and  deployment  of  applications.  TCC  provides  a 
rich set of Open APIs and a plug-in structure that has facilitated 
the integration of MAC and our security assurance rules (SARs) 
into TCC. Using TCCs OpenAPIs, functions, and objects, we are 
able  to  create  our  own  properties  for  security  levels  (CLS  and 
CLR) in MAC, which can be used to assign the security levels for 
each UML element. In addition, we can provide our own custom 
Java code that realizes the SARs presented in Sections 4.1 to 4.3 
and  the  algorithm  in  Section  4.4,  to  dynamically  and  statically 
check  the  security  in  a  UML  design.  A  dynamic  check  occurs 
whenever a user acts on a UML diagram by connecting two UML 
elements.  A static check is utilized when a user is checking an 
entire diagram at once, to determine if the design has any security 
conflicts or inconsistencies. 
Figure 5. (GMsg, Senior_Staff, Add_Survey_Header) Tree. 
DFS_T3(G: Graph, v: Node, uc: UCase) { 
    v.visited = true; 
    If (v is for a MuM && (uc.CLS > v.CLS) 
     Report SAR UCM is violated; 
For each edge (v, w) in G.E { 
If (! Rule_Check(v,w,”MM”)) Report SAR MM is violated; 
If (v is for an actor &&  (! Rule_Check(v,w,”AM”))  
     Report SAR AM is violated; 
If (!w.visited) then // (v, w) is a TREE-EDGE; 
DFS_T3(G, R, w); 
Else If (w.post = 0) then  
  Report Cycle; // since (v, w) is a BACK-EDGE; 
} // End For 
v.post = postcount ++; 
} 
SD_Sec_Check(G: Graph, s: Node, uc: UCase) { 
For each v in in G.V { 
v.visited = false; // reset all nodes as not visited 
v.post = 0;} 
DFS_T3(G, Rule, s, uc); 