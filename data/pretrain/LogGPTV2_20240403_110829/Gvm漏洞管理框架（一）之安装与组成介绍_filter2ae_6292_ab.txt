2.VTS（nasl脚本部分，部署GVM后默认没有，需要在gvm-setup的时候进行下载）
3.SCAP（SCAP漏洞关联信息，部署GVM后默认没有，需要在gvm-setup的时候进行下载）
重要文件的存储路径如下：
nasl脚本默认存放目录：/var/lib/openvas/pluginsscap-data默认存放目录：/var/lib/gvm/scap-data/
具体的文件结构列表可以查看镜像站：
_http://mirror.ufs.ac.za/misc/openvas-nvt-feed/_
http://mirror.ufs.ac.za/misc/openvas-scap-data/
在整套的GVM中scan模块不会单独使用而是使用web端的图形界面对scan模块进行控制，使用方便显示直观。但scan作为一个独立的模块可以单独运行。
scan模块官方预留的一些调试接口：
源码位置
|
接口说明
|
调用命令  
---|---|---  
openvas.c
|
可以在linux shell中使用命令 openvas 调用
|
可以在linux shell中使用命令 openvas 调用  
nasl.c
|
GVM scan模块预留的可以对nasl进行调试的接口，可以单独使用
|
在linux shell中使用命令 openvas-nasl 调用  
nasl_lint.c
|
针对nasl脚本语言的一种静态代码分析工具
|
在linux shell中使用命令 openvas-nasl-lint 调用  
**0x03 GVMD** **模块**
GVMD管理漏洞的配置信息和扫描的结果。通过基于XML的绿骨管理协议(GMP)提供对数据、控制命令和工作流程的访问。通过开放扫描器协议(OSP)控制OpenVAS
_（上文中的 scan模块）_扫描器。
GVMD包含一个postgresql数据库用来存放用户输入的信息、测试完成的结果、脚本的信息、漏洞与应用关联的信息，一套证书机制（用来将所有与GVMD进行的通信使用TLS加密以及进行身份验证和授权），一套脚本更新机制进行更新SCAP漏洞信息以及nasl脚本，和供其他工具模块连接的套接字接口。
如果是在kali中直接apt-get
gvm则无法知道postgresql数据库的密码，可以通过如下命令对数据库密码进行修改：（登录到数据库是为了方便观察GVM漏洞管理框架中数据库所存储数据的内容，更改数据库的密码并不会影响GVM漏洞管理框架的运行）
root@kali:/home/user# sudo -u postgres bashpostgres@kali:/home/user$ psql
gvmdpsql (14.0 (Debian 14.0-1))输入 “help” 来获取帮助信息.gvmd=#ALTER USER postgres
WITH PASSWORD ‘postgres’;
GVMD模块预留的一些接口：
源码位置
|
接口说明
|
调用命令  
---|---|---  
gvmd.c
|
管理进程的入口，其中可使用的功能包括设置web界面的管理用户及密码，更新脚本和漏洞信息，设置资源所有者，设置日志信息，设置等.
|
可以在linux shell中使用命令 gvmd 调用  
gvm-manage-certs
|
负责进行证书的管理
|
可以在linux shell中使用命令gvm-manage-certs调用  
gvm-feed-update
|
负责对网络测试脚本，漏洞库进行更新
|
在linux shell中使用命令 gvm-feed-update 调用  
**0x04 GVM web** **界面介绍**
GVM漏洞管理框架web界面由GSA模块生成，GSA(Greenbone Security
Assistant)是基于React框架开发的web界面，使用GMP软件内部协议与后台GVMD进行通信。GVM web界面默认开启端口：9392
https协议，只可以本机访问。可以更改/lib/systemd/system/greenbone-security-assistant.service配置文件中的信息改变监听ip和端口。
创建扫描任务步骤如下：
1.登录web页面，依次点击【scans】【tasks】【新建任务按钮】
2.在new task中可以添加扫描信息，这里的Min QoD会决定之后生成的报告中显示的数量
3.添加目标主机信息处可以指定IP地址端口以及登录凭证。这里支持SSH、SMB、ESXi、SNMP
4.最后点击【save】进行保存
这些信息将会被写入GVMD模块控制的postgresql数据库的数据public结构中。添加完毕后可以在底部看到新增的扫描，之后可以开始进行扫描。扫描器需要一段时间进行准备，之后就会开始扫描进程。
当扫描结束时生成的扫描报告分为这几个部分：
1.Results字段中存放漏洞信息，这里注意有一个124 of
162代表一共从162份报告中挑选了124份进行显示。报告的挑选与之前在添加目标时选择的min QoD有关。
具体内容将在以后的文章中进行讲解
请持续关注本公众号！
2.Hosts字段中存放主机信息，Auth字段的小盾牌代表远程登录成功。
3.此外还有端口信息、主机安装的应用（以CPE的方式进行显示可以点击链接对该CPE进行漏洞关联）。
4.操作系统信息也会使用CPE来表示、CVEs为漏洞编号与描述、closed
CVEs是在初始扫描时探测到可能的漏洞但在后续的探测中发现应该不存在此漏洞、TLS信息、报错信息和用户标签。
**0x05** **参考链接**
https://greenbone.github.io/docs/architecture.html
https://greenbone.github.io/docs/glossary.html#term-VT
https://docs.greenbone.net/GSM-Manual/gos-20.08/en/index.html
https://greenbone.github.io/docs/gvm-21.04/index.html
https://www.postgresql.org/download/linux/ubuntu/
https://classic.yarnpkg.com/en/docs/install#debian-stable
[https://blog.csdn.net/qq_40846669/article/details/119034841](https://blog.csdn.net/qq_40846669/article/details/119034841)
更多技术文章，微信公众号搜索“云影实验室”。
顺便插下招聘广告，安全研究员1名和安全开发工程师1名，有意者可以私信公众号。