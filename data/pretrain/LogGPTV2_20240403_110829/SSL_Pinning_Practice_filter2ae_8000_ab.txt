>
>
> 默认情况下,面向 Android 7.0 的应用仅信任系统提供的证书,且不再信任用户添加的证书颁发机构 (CA).如果面向 Android N
> 的应用希望信任用户添加的
> CA,则应使用[网络安全性配置](https://developer.android.com/preview/features/security-> config.html)以指定信任用户 CA 的方式.
## 0x05 网络安全性配置 network-security-config 使用参考
完整用法请阅读
这里列举几个常用的配法.
### 系统证书锁定配置参考
  * 信任系统证书 移除了  用户安装的证书的信任
  * release模式下只信任系统证书
  * debug模式下加入对信任用户安装的证书
### 根证书锁定配置参考
  * 强制锁定了两个根证书GoDaddy Class 2 Certification Authority Root Certificate和DigiCert
  * debug模式下加入对信任用户安装的证书
  * 超过2034-06-30锁定解除.
            www.mi.com
      VjLZe/p3W/PJnd6lL8JVNBCGQBZynFLdZSTIqcO0SJ8=
      VjLZe/p3W/PJnd6lL8JVNBCGQBZynFLdZSTIqcO0SJ8=
      http://report.m.com/log_report
     -->  
## 0x06 IoT设备上的证书锁定
设备ROM发版相对app发版要复杂许多,所以设备的证书锁定场景复杂性更高.这样先将设备抽象成两大类
  * 系统自带证书的通用操作系统比如AndroidTV.
  * 系统没有预制证书的实时操作系统(RTOS).
如果设备是第一类通用操作系统比较好处理
  * 如果证书是CA签发的,只需信任系统证书即可,最好同时开启系统分区保护.
  * 如果证书是自签发的,除了信任系统证书以外额外只信任此自签发证书即可,切勿为了跑通业务盲目信任所有证书.一些业务刚开发的时候可能还没买证书,所以初期代码是信任所有证书,后来买正式证书后忘记修复证书信任代码.例如没买证书之前curl使用了-k参数,买完证书后忘记统一除去此参数.
    -k, --insecure Allow connections to SSL sites without certs (H)
如果设备是第二类RTOS,首先得确认其是否支持SSL,其上运行的业务是否需要SSL.如果需要且支持,则可以通过自行预制根再参考前文完成锁定.
## 0x07 重复造轮子
PinKit是一个android下简化的证书锁定工具类
  * PinKit方便SDK集成,不与network-security-config冲突.
  * 网上代码大多取public key的hash进行base64 encod sha256当为Pin码,而浏览器上显示的是证书指纹的sha256.为了方便肉眼观察PinKit采用了同浏览器一致的证书指纹hex encode sha256当为Pin码
  * PinKit同TrustKit和AndroidPinning类似,都do the system's SSL validation : 先用系统的TrustManagerImpl和内置CA验一遍,再用锁定的CA验. (所以自签发证书这个库来锁需要注意下配置)  
这样更为稳妥,至少有系统默认的一套为你兜底. 但是貌似有些臃肿,和其两次做hostNameVerified类似.  
参考TrustKit完成SSLPinKitDemo如下
## 0x08 常见Q&A
测试如何抓包了?
判断下app是debug版本还是release版本,debug版本不锁证书或者在锁定列表里加入一个测试证书.
做了根证书锁定如果换CA怎么办了?
如果只是系统证书锁定则不考虑此场景,如果是根证书锁定则需加入一些更换可能性较高CA的根证书指纹做备份,建议选择安全性较高EV证书,当然也会贵一些了.注意根证书的超期时间,选择时效长一些的.
webview中是的请求是否要做证书锁定?
不建议,不推荐在webview中做证书锁定.
证书吊销,失效等问题是否需要业务自己再实现一次?
不需要,方案复用系统TM检测.在系统TrustManger基础上收缩CA根证书的范围.
会影响正常用户的代理(梯子软件)的使用吗?
一般是没有影响的.
## 0x09 X.509 v3 format
The basic X.509 v3 format described in ASN.1:
    ---------------------------------------------------------------------    -- X.509 signed certificate 
    ---------------------------------------------------------------------    SignedContent ::= SEQUENCE 
    {
      certificate         CertificateSigned,
      algorithm           Object Identifier,
      signature           BITSTRING
    }
    ---------------------------------------------------------------------    -- X.509 certificate to be signed
    ---------------------------------------------------------------------    CertificateToBeSigned ::= SEQUENCE 
    {
      version                 [0] CertificateVersion DEFAULT v1,
      serialNumber            CertificateSerialNumber,
      signature               AlgorithmIdentifier,
      issuer                  Name
      validity                Validity,
      subject                 Name
      subjectPublicKeyInfo    SubjectPublicKeyInfo,
      issuerUniqueIdentifier  [1] IMPLICIT UniqueIdentifier OPTIONAL,
      subjectUniqueIdentifier [2] IMPLICIT UniqueIdentifier OPTIONAL,
      extensions              [3] Extensions OPTIONAL
    }
## 0x10 Reference