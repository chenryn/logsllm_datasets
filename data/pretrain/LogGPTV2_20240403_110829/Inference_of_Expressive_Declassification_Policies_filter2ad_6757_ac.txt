policies that records for each variable an upper bound on
the information that may be stored in that variable at that
program point. A program counter map (or pc-map for
brevity) is used to track what information may be learned by
knowing that execution has reached this program point. It is
similar to the program counter policies used in security-type
systems [7], but contains additional structure to facilitate
precise inference of our security policies.
Program counter maps. The domain of a program
counter map is a subset of the branch points in the program’s
input x from H;
input y from H;
z := ...;
if (x > 42) then w := 0
else
// some complicated computation involving y
if (z = 0) then { P: w := 1 } else { w := 2 }
Figure 8. Program counter map example
control ﬂow graph. Given a pc-map pc for some program
point, a branch point b is in the domain of pc if and only if
the program point is control dependent on b. In the simple
imperative language of Section II-B, the only branch points
are the guards of if and while commands. A program point
is control dependent on the guard of an if command only
if the program point is within one of the two branches of
the command. Since we are concerned with termination-
insensitive security, a program point is control dependent on
the guard of a while loop only if the program point is within
the body of the loop. (If we were concerned with termination
sensitive security, program points after a possibly diverging
while loop would also be control dependent on the loop
guard.)
A branch point b in pc-map pc maps either to a security
policy, or a precise input expression. If b maps to security
policy p, then p is an upper bound of the information used to
decide which control ﬂow path to take at b: it is the policy
associated with the guard of the if or while statement. If,
however, we know (through some external analysis) that the
control ﬂow decision at b is determined by the evaluation
of some precise boolean input expression d, then b maps to
either d or ¬d, depending on which branch was taken.
Consider the example program in Fig. 8. Let P be the
program point just prior to assignment w := 1. At P control
ﬂow is dependent on the branch points x > 42 and z = 0,
and thus both of these branch points are in the domain of
the pc-map at program point P . The control ﬂow path taken
at branch point x > 42 is determined by the precise input
expression H[1] > 42, and moreover, at program point P ,
we know that H[1] > 42 is false. The control ﬂow path taken
at branch point z = 0 depends on information bounded above
by the policy Reveal(H[0]). However, (by assumption) we
do not know whether path taken at this branch is determined
by any precise security expression. The pc-map for P is thus
{x > 42 (cid:55)→ ¬(H[1] > 42),
z = 0 (cid:55)→ Reveal(H[0])}.
Merging contexts. At program points where control ﬂow
paths merge (such as the program point following an if
command, or the head of a loop), contexts must be soundly
merged. The merge of two contexts (cid:104)Γ1, pc1(cid:105) and (cid:104)Γ2, pc2(cid:105)
is (cid:104)Γ1 (cid:116) Γ2, pc1 (cid:116) pc2(cid:105), where Γ1 (cid:116) Γ2 denotes the merge
of the variable contexts, and pc1 (cid:116) pc2 denotes the merge of
the pc-maps.
186
Variable contexts are merged pointwise. That is, given
two variables contexts Γ1 and Γ2, for each variable x, Γ1 (cid:116)
Γ2 maps x to the policy p1 and p2, where Γ1(x) = p1 and
Γ2(x) = p2.
The merge of two pc-maps, pc1(cid:116)pc2, is deﬁned in Fig. 9.
The merge is pointwise, with the exception of when one
of pc1 and pc2 maps branch point b to a precise security
expression, and the other maps b to something else, either
a different precise security expression, or a security policy.
In that case, we no longer have precise information about
control ﬂow, and the merged pc-map pc1 (cid:116) pc2 maps b to a
sound but less precise security policy.
Both variable context and program counter merges may
yield policies with unnecessarily large representations. We
normalize the policies, as described in Section II, to ensure
policies are represented concisely. Normalization both im-
proves policy readability and is needed to ensure termination
of the analysis.
Improving precision of pc-maps. At control ﬂow points
that are immediate post dominators of branch points, we can
improve the precision of program counter maps, by restoring
the program counter map that was in place at the branch
point. Intuitively, once the post dominator of branch point
b has been reached, control ﬂow is not dependent on b.
From a (termination insensitive) information-ﬂow perspec-
tive, knowing that execution has reached the post dominator
of b reveals exactly as much information as knowing that
execution reached branch point b.
Given a control ﬂow graph of a program, we insert
additional nodes to distinguish immediate post dominators
of branch points. The transfer functions for these additional
nodes improve the precision of the pc-map by restoring it
to the pc-map of the post-dominated program point.
In the example program of Fig. 8, the ﬁnal program point
is the immediate post dominator of both branches x > 42
and z = 0. We restore the pc-map for the program point
immediately before the branch x > 42.
In the following subsections, we describe the transfer
functions for the remaining commands in our simple im-
perative language.
B. Transfer function for assignment
Intuitively, the transfer function for assignment x := a
must update the variable context to record the information
that may be learned by examining the contents of variable x
after the assignment. In addition to learning the evaluation of
expression a, one also learns that the assignment occurred.
This is known as an implicit information ﬂow [12], where
information ﬂows through the control structure of a program.
Our analysis precisely tracks implicit
information ﬂows
using the program counter maps.
Consider an assignment x := a occurring in con-
text (cid:104)Γ, pc(cid:105). Let pa = Γ(x1) and . . . and Γ(xn), where
pc1 (cid:116) pc2(b) =
pc1(b)
pc2(b)
pc1(b)
p1 and p2
Reveal(d, d(cid:48))
Reveal(d) and p if {pc1(b), pc2(b)} = {d, p} for some precise input expression d and policy p
if b ∈ dom (pc1) ∧ b (cid:54)∈ dom (pc2)
if b (cid:54)∈ dom (pc1) ∧ b ∈ dom (pc2)
if pc1(b) = pc2(b)
if pc1(b) = p1 and pc2(b) = p2 for some security policies p1 and p2
if {pc1(b), pc2(b)} = {d, d(cid:48)} for distinct precise input expressions d, d(cid:48)
Figure 9. Merge of program counter maps
x1, . . . , xn are the variables that occur in expression a.
Policy pa is an upper bound of the information that may
be learned from the evaluation of a. Let
the range of
pc be d1, . . . , dn, p1, . . . , pm for precise input expressions
d1, . . . , dn and security policies p1, . . . , pm. That is, any
branch point in the domain of pc maps to one of these precise
input expressions or security policies.
The transfer function for assignment maps variable x to
the policy
if d1 ∧ ··· ∧ dn then pa and p1 and . . . and pm.
(If there are no precise input expressions in the range
of pc,
then x is mapped to the policy
pa and p1 and . . . and pm.)
i.e., n = 0,
This rule records that the variable x contains information
bounded above by the policy pa and p1 and . . . and pm only
if the input expressions d1, . . . , dn are all true. Intuitively,
the security policy now associated with x describes what
information may be learned by examining the contents
of x: one learns information only if input expressions
d1, . . . , dn are all true, and if so, one learns both the eval-
uation of a (pa), and the fact that the assignment occurred
(p1 and . . . and pm, and implicitly, d1 ∧ ··· ∧ dn).
the program point
As an example, consider again the program in Fig. 8.
At
immediately following the com-
mand w := 1, the context maps variable w to the policy
if ¬(H[1] > 42) then Reveal(H[0]).
Improving precision at merge points. Consider the
following program.
input y from H;
input x from H;
if (z = 7) then w := x else w := y
input z from H;
At the program point immediately following the assign-
ment w := x, the context maps program variable w to the
policy if H[0] = 7 then Reveal(H[2]). At the program point
after assignment w := y, the context maps w to the pol-
icy if ¬(H[0] = 7) then Reveal(H[1]). Immediately follow-
ing the if command, the contexts from the two branches are
merged, resulting in w mapping to policy
if H[0] = 7 then Reveal(H[2]) else Reveal(H[1]),
187
a precise summary of what information may be learned by
observing the contents of w at that program point. Namely,
the value of expression H[0] = 7 may be learned, and if that
expression is true, then the 3rd most recent input on channel
H may be learned (Reveal(H[2])), otherwise the 2nd most
recent input on channel H may be learned (Reveal(H[1])).
The following program is semantically equivalent to the
program above.
input x from H;
w := y;
if (z = 7) then w := x else skip
input y from H;
input z from H;
However, using the transfer functions and merging de-
scribed so far, at the end of the command, w would have
the policy
Reveal(H[1]) and if H[0] = 7 then Reveal(H[2]),
which is sound, but not as precise as the previous policy.
To improve precision, when control ﬂow paths merge, if
variable x may have been updated on one path but not the
other, we insert a self-assignment x := x at the end of the
path on which x was not updated. Thus, we analyze the
example above as if it were the following.
input x from H;
w := y;
if (z = 7) then w := x else w := w
input y from H;
input z from H;
This additional analysis is sound (since the self-assignment
is semantically a no-op), and provides additional precision.
The resulting policy for w is precisely inferred to be
if H[0] = 7 then Reveal(H[2]) else Reveal(H[1]).
C. Mark commands
A mark command mark k is semantically a no-op. The
transfer function for mark commands is just the identity
function, and so a mark command does not directly update
the context.
However, we use mark commands to produce track poli-
cies if-executed r then p. We use a dominance algorithm to
identify assignments that are dominated by mark command
mark k (that is, in any execution of the program the mark
command must execute before the assignment). For any such
assignment x := a, we insert an additional node into the
control ﬂow graph immediately following the assignment
that indicates this. If the context on entry to one of these
inserted nodes is (cid:104)Γ, pc(cid:105), the transfer function for the node
updates the policy of variable x to if-executed k then p,
where Γ(x) = p. This records that the information that
may be learned by examining the contents of variable x at
this program point is conditional on the execution of mark
command mark k.
D. Transfer function for input commands
An input command input x from ν reads an input and
assigns it to variable x. Thus, following the command, vari-
able x contains the most recent input. The transfer function
for an input command thus treats it like an assignment
to the variable x of an expression with a security policy
Reveal(ν[0]). The actual policy associated with x following
the input depends on the program counter map, as described
in Section III-B.
In addition, the transfer function for an input command
increments the index of inputs on channel ν in all policies
in the context and program counter policy.
For example, if program variable y is mapped to policy
if ν[1] = 42 then Reveal(ν[0])
before command input x from ν, then after the command
the analysis will associate y with policy
if ν[2] = 42 then Reveal(ν[1]).
Bounded precision for inputs.
In order to ensure that
the analysis terminates, we cannot
track the history of
inputs with unbounded precision. For each input channel
ν, we assume an upper bound bν on the indices that we
track precisely, and summarize all indices greater than or
equal
to bν with an imprecise input expression ν[bν+].
For example, if bν = 2 and program variable z maps to
Reveal(ν[1] mod 5) before command input x from ν, then
after the command the analysis will associate z with policy
Reveal(ν[2+] mod 5).
A conditional policy, say if d then p1 else p2, is required to
have a precise expression its guard. If a guard becomes im-
precise, we must change the policy to a conjunction. Specif-
ically, if d is a precise expression, and e is the imprecise
expression obtained by incrementing the indices for inputs
on some channel, then conditional policy if d then p1 else p2
becomes Reveal(e) and p(cid:48)
2 are the
result of incrementing the indices of inputs on policies p1
and p2 respectively.
2, where p(cid:48)
1 and p(cid:48)
1 and p(cid:48)
For example, if program variable y maps to policy
if ν[1] = 42 then Reveal(ν[0])
before command input x from ν, and bν = 2, then after the
command the analysis will associate y with policy
Reveal(ν[2+] = 42) and Reveal(ν[1]).
188
E. Output commands and policy maps
The command output a to ν evaluates a and outputs it
on channel ν. The transfer function for this rule does not
modify the context. Instead the static analysis uses output
commands to build a policy map explaining the information
ﬂows in a program.
Intuitively, observation of the result of output command
output a to ν may reveal both the evaluation of expression
a, and also the fact that the output occurred. This is similar
to the information ﬂow that occurs through assignment, and
by a similar argument, a suitable policy for the output is
if d1 ∧ ··· ∧ dn then pa and p1 and . . . and pm
where d1, . . . , dn, p1, . . . , pm is the range of the pc-map at
the output command, and pa describes the information that
may be learned from the evaluation of a.
The ultimate goal of the inference is to generate a policy
map M that soundly describes what information may be
learned by observing the output channels of the program
when it executes. We deﬁne this policy map M as follows.
Suppose that the dataﬂow algorithm has terminated, and
found appropriate contexts for every program point. Further
suppose that the program contains exactly n output com-
mands to channel ν. Let p1, . . . , pn be the security policies
describing the information that may be learned by examining
the result of each of these n output commands. Then policy
map M maps channel ν to the conjunction of these policies:
M (ν) = p1 and . . . and pn
F. Soundness and termination
The inference algorithm is sound if the program c is
secure with respect to the policy map M produced at the end
of the dataﬂow, where security is as deﬁned in Deﬁnition 1.