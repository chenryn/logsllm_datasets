s0, s0, s0, s1 
          fcmp  
s0, s3 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
898 
逆向工程权威指南（下册） 
          csel  
w2, w2, w6, pl 
          subs  
w3, w3, #1 
          ben   
.L5 
          scvtf 
s0, w2 
          str   
w1, [x7, #:lo12:.LANCH0R]] 
          fmov  
d1, 4.0e+0 
          fcvt  
d0, s0 
          fmul  
d0, d0, d1 
          ldr   
d1, .LC0 
          fdiv  
d0, d0, d1 
          fcvt  
s0, d0 
          ret 
.LC0: 
          .word 
0 
          .word 
1093567616 
.V1: 
          .word 
1013904223 
.V2: 
          .word 
1664525 
.LANCH0R0: = . + 0 
v3.3095 
          .word 
305419896 
100.6.6  Optimizing GCC 4.4.5（MIPS） 
指令清单 100.9  Optimizing GCC 4.4.5（MIPS）（IDA） 
f1: 
          mov  
eax, DWORD PTR v1.2084[rip] 
          imul 
eax, eax, 1664525 
          add  
eax, 1013904223 
          mov  
DWORD PTR v1.2084[rip], eax 
          and  
eax, 8388607 
          or   
eax, 1073741824 
          mov  
DWORD PTR [rsp-4], eax 
          movss 
xmm0, DWORD PTR [rsp-4] 
          subss 
xmm0, DWORD PTR .LC0[rip] 
          ret 
f: 
          push  
rbp 
          xor   
ebp, ebp 
          push  
rbx 
          xor   
ebx, ebx 
          sub   
rsp, 16 
.L6: 
          xor   
eax, eax 
          call  
f1 
          xor   
eax, eax 
          movss 
DWORD PTR [rsp], xmm0 
          call  
f1 
          movss 
xmm1, DWORD PTR [rsp] 
          mulss 
xmm0, xmm0 
          mulss 
xmm1, xmm1 
          lea   
eax, [rbx+1] 
          addss 
xmm1, xmm0 
          movss 
xmm0, DWORD PTR .LC1[rip] 
          ucomiss xmm0, xmm1 
          cmova 
ebx, eax 
          add   
ebp, 1 
          cmp   
ebp, 1000000 
          jne  
.L6 
          cvtsi2ss 
    xmm0, ebx 
          unpcklps 
    xmm0, xmm0 
          cvtps2pd 
    xmm0, xmm0 
          mulsd 
xmm0, QWORD PTR .LC2[rip] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
899 
          divsd 
xmm0, QWORD PTR .LC3[rip] 
          add   
rsp, 16 
          pop   
rbx 
          pop   
rbp 
          unpcklpd 
    xmm0, xmm0 
          cvtpd2ps 
    xmm0, xmm0 
          ret 
v1.2084: 
          .long 
305419896 
.LC0: 
          .long 
1077936128 
.LC1: 
          .long 
1065353216 
.LC2: 
          .long 
0 
          .long 
1074790400 
.LC3: 
          .long 
0 
          .long 
1093567616 
100.7  练习题 2.16 
这个题目是一个著名的函数。请问它的计算结果是什么？如果输入了 4 和 2，该程序会出现栈溢出问题。
为什么会这样，代码里有错误么？ 
100.7.1  Optimizing MSVC 2012 x64 
m$ = 48 
n$ = 56 
f 
  PROC 
$LN14: 
  push 
rbx 
  sub  
rsp, 32 
  mov  
eax, edx 
  mov  
ebx, ecx 
  test 
ecx, ecx 
  je   
SHORT $LN11@f 
$LL5@f: 
  test 
eax, eax 
  jne  
SHORT $LN1@f 
  mov  
eax, 1 
  jmp  
SHORT $LN12@f 
$LN1@f: 
  lea  
edx, DWORD PTR [rax-1] 
  mov  
ecx, ebx 
  call 
f 
$LN12@f: 
  dec  
ebx 
  test 
ebx, ebx 
  jne  
SHORT $LL5@f 
$LN11@f: 
  inc  
eax 
  add  
rsp, 32 
  pop  
rbx 
  ret  
0 
f        ENDP 
100.7.2  Optimizing Keil（ARM mode） 
f PROC 
          PUSH  
{r4,lr} 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
900 
逆向工程权威指南（下册） 
          MOVS  
r4,r0 
          ADDEQ 
r0,r1,#1 
          POPEQ 
{r4,pc} 
          CMP   
r1,#0 
          MOVEQ 
r1,#1 
          SUBEQ 
r0,r0,#1 
          BEQ   
|L0.48| 
          SUB   
r1,r1,#1 
          BL    
f 
          MOV   
r1,r0 
          SUB   
r0,r4,#1 
|L0.48| 
          POP   
{r4,lr} 
          B     
f 
          ENDP 
100.7.3  Optimizing Keil（Thumb mode） 
f PROC 
          PUSH 
{r4,lr} 
          MOVS 
r4,r0 
          BEQ  
|L0.26| 
          CMP  
r1,#0 
          BEQ  
|L0.30| 
          SUBS 
r1,r1,#1 
          BL   
f 
          MOVS 
r1,r0 
|L0.18| 
          SUBS 
r0,r4,#1 
          BL  
f 
          POP  
{r4,pc} 
|L0.26| 
          ADDS 
r0,r1,#1 
          POP  
{r4,pc} 
|L0.30| 
          MOVS 
r1,#1 
          B    
|L0.18| 
          ENDP 
100.7.4  Non-optimizing GCC 4.9.1（ARM64） 
指令清单 100.10  Non-optimizing GCC 4.9.1（ARM64） 
f: 
          stp  
x29, x30, [sp, -48]! 
          add   
x29, sp, 0 
          str   
x19, [sp,16] 
          str   
w0, [x29,44] 
          str   
w1, [x29,40] 
          ldr   
w0, [x29,44] 
          cmp   
w0, wzr 
          bne   
.L2 
          ldr   
w0, [x29,40] 
          add   
w0, w0, 1 
          b     
.L3 
.L2: 
          ldr   
w0, [x29,40] 
          cmp   
w0, wzr 
          bne   
.L4 
          ldr   
w0, [x29,44] 
          sub   
w0, w0, #1 
          mov   
w1, 1 
          bl    
ack 
          b     
.L3 