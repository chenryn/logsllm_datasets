>> Hello world! 
The other notable special parsing mode available in both XHTML and
normal HTML is a comment block. In XML, it quite simply begins with “”. In the traditional HTML parser in Firefox versions prior
to 4, any occurrence of “--”, later followed by “>”, is also considered good
enough.
The Battle over Semantics
The low-level syntax of the language aside, HTML is also the subject of a fas-
cinating conceptual struggle: a clash between the ideology and the reality of
the online world. Tim Berners-Lee always championed the vision of a semantic
web, an interconnected system of documents in which every functional block,
such as a citation, a snippet of code, a mailing address, or a heading, has its
meaning explained by an appropriate machine-readable tag (say, , ,
, or  to ).
72 Chapter 4
This approach, he and other proponents argued, would make it easier
for machines to crawl, analyze, and index the content in a meaningful way,
and in the near future, it would enable computers to reason using the sum
ofhuman knowledge. According to this philosophy, the markup language
should provide a way to stylize the appearance of a document, but only as
anafterthought.
Sir Berners-Lee has never given up on this dream, but in this one regard,
the actual usage of HTML proved to be very different from what he wished for.
Web developers were quick to pragmatically distill the essence of HTML3.2
into a handful of presentation-altering but semantically neutral tags, such as
, , and , and saw no reason to explain further the structure of
their documents to the browser. W3C attempted to combat this trend but with
limited success. Although tags such as  have been successfully obso-
leted and largely abandoned in favor of CSS, this is only because stylesheets
offered more powerful and consistent visual controls. With the help of CSS,
the developers simply started relying on a soup of semantically agnostic 
and  tags to build everything from headings to user-clickable buttons, all
in a manner completely opaque to any automated content extraction tools.
Despite having had a lasting impact on the design of the language, in
some ways, the idea of a semantic web may be becoming obsolete: Online
content less frequently maps to the concept of a single, viewable document,
and HTML is often reduced to providing a convenient drawing surface and
graphic primitives for JavaScript applications to build their interfaces with.
Understanding HTML Parser Behavior
The fundamentals of HTML syntax outlined in the previous sections are usu-
ally enough to understand the meaning of well-formed HTML and XHTML
documents. When the XHTML dialect is used, there is little more to the
story: The minimal fault-tolerance of the parser means that anomalous syn-
tax almost always leads simply to a parsing error. Alas, the picture is very dif-
ferent with traditional, laid-back HTML parsers, which aggressively second-
guess the intent of the page developer even in very ambiguous or potentially
harmful situations.
Since an accurate understanding of user-supplied markup is essential to
designing many types of security filters, let’s have a quick look at some of these
behaviors and quirks. To begin, consider the following reference snippet:
(cid:2) (cid:3) (cid:4) (cid:5) (cid:6) (cid:7)
Web developers are usually surprised to learn that this syntax can be drasti-
cally altered without changing its significance to the browser. For example,
Internet Explorer will allow an NUL character (0x00) to be inserted in the
location marked at , a change that is likely to throw all naïve HTML filters
off the trail. It is also not widely known that the whitespaces at  and  can
Hypertext Markup Language 73
be substituted with uncommon vertical tab (0x0B) or form feed (0x0C) char-
acters in all browsers and with a nonbreaking UTF-8 space (0xA0) in Opera.*
Oh, and here's a really surprising bit: In Firefox, the whitespace at  can also
be replaced with a single, regular slash—yet the one at  can’t.
Moving on, the location marked  is also of note. In this spot, NUL
characters are ignored by most parsers, as are many types of whitespaces. Not
long ago, WebKit browsers accepted a slash in this location, but recent parser
improvements have eliminated this quirk.
Quote characters are a yet another topic of interest. Website developers
know that single and double quotes can be used to put a string containing
whitespaces or angle brackets in an HTML parameter, but it usually comes as
a surprise that Internet Explorer also honors backticks (`) instead of real
quotes in the location marked . Similarly, few people realize that in any
browser, an implicit whitespace is inserted after a quoted parameter, and
that the explicit whitespace at  can therefore be skipped without changing
the meaning of the tag.
The security impact of these patterns is not always easy to appreciate, but
consider an HTML filter tasked with scrubbing an  tag with an attacker-
controlled title parameter. Let’s say that in the input markup, this parameter
is not quoted if it contains no whitespaces and angle brackets—a design that
can be seen on a popular blogging site. This practice may appear safe at first,
but in the following two cases, a malicious, injected onerror parameter will
materialize inside a tag:
and
Yet another wonderful quote-related quirk in Internet Explorer makes
this job even more complicated. While most browsers recognize quoting only
when it is used at the beginning of a parameter value, Internet Explorer sim-
ply checks for any occurrence of an equal sign (=) followed by a quote and
will parse this syntax in a rather unexpected way:
Yes, we are still inside a tag!">
Interactions Between Multiple Tags
Parsing a single tag can be a daunting task, but as you might imagine, anom-
alous arrangements of multiple HTML tags will be even less predictable.
Consider the following trivial example:
* The behavior exhibited by Opera is particularly sneaky: The Unicode whitespace is not
recognized by many standard library functions used in server-side HTML sanitizers, such as
isspace(...) in libc. This increases the risk of implementation glitches.
74 Chapter 4
When presented with such syntax, most browsers only interpret  and
treat the “ tag first when encountering an
angle bracket and, in the end, will interpret both  and . In the spirit of
fault tolerance, until recently WebKit followed that model, too.
A similar behavior can be observed in previous versions of Firefox when
dealing with tag names that contain invalid characters (in this case, the equal
sign). Instead of doing its best to ignore the entire block, the parser would
simply reset and interpret the quoted tag:
">
The handling of tags that are not closed before the end of the file is
equally fascinating. For example, the following snippet will prompt most
browsers to interpret the  tag or ignore the entire string, but Internet
Explorer and Opera use a different backtracking approach and will see 
instead:
" [EOF]
In fact, Firefox versions prior to version 4 engaged in far-fetched repars-
ing whenever particular special tags, such as , were not closed before
the end of the document:
This text will be interpreted as a title
This text will be shown as document body!
[EOF]
The last two parsing quirks have interesting security consequences in any
scenario where the attacker may be able to interrupt page load prematurely.
Even if the markup is otherwise fairly well sanitized, the meaning of the doc-
ument may change in a very unexpected way.
Explicit and Implicit Conditionals
To further complicate the job of HTML parsing, some browsers exhibit behav-
iors that can be used to conditionally skip some of the markup in a document.
For example, in an attempt to help novice users of Microsoft’s Active Server
Pages development platform, Internet Explorer treats  blocks as a
completely nonstandard comment, hiding any markup between these two
character sequences. Another Internet Explorer–specific feature is explicit
conditional expressions interpreted by the parser and smuggled inside stan-
dard HTML comment blocks:
Markup that will be parsed only for Internet Explorer 6
Hypertext Markup Language 75
Many other quirks of this type are related to the idiosyncrasies of SGML
and XML. For example, due to the comment-handling behavior mentioned
earlier in an aside, browsers disagree on how to parse !- and ?-directives (such
as  or ), whether to allow XML-style CDATA blocks in
non-XHTML modes, and on what precedence to give to overlapping special
parsing mode tags (such as “ -->”).
HTML Parsing Survival Tips
The set of parsing behaviors discussed in the previous sections is by no means
exhaustive. In fact, an entire book has been written on this topic: Inquisitive
readers are advised to grab Web Application Obfuscation (Syngress, 2011) by
Mario Heiderich, Eduardo Alberto Vela Nava, Gareth Heyes, and David
Lindsay—and then weep about the fate of humanity. The bottom line is
thatbuilding HTML filters that try to block known dangerous patterns,
andallow the remaining markup as is, is simply not feasible.
The only reasonable approach to tag sanitization is to employ a realistic
parser to translate the input document into a hierarchical in-memory docu-
ment tree, and then scrub this representation for all unrecognized tags and
parameters, as well as any undesirable tag/parameter/value configurations.
At that point, the tree can be carefully reserialized into a well-formed, well-
escaped HTML that will not flex any of the error correction muscles in the
browser itself. Many developers think that a simpler design should be possi-
ble, but eventually they discover the reality the hard way.
Entity Encoding
Let’s talk about character encoding again. As noted on the first pages of this
chapter, certain reserved characters are generally unsafe inside text nodes
and tag parameter values, and they will often lead to outright syntax errors
inXHTML. In order to allow such characters to be used safely (and to allow
a convenient way to embed high-bit text), a simple ampersand-prefixed,
semicolon-terminated encoding scheme, known as entity encoding, is avail-
able to developers.
The most familiar use of this encoding method is the inclusion of certain
predefined, named entities. Only a handful of these are specified for XML,
but several hundred more are scattered in HTML specifications and sup-
ported by all modern browsers. In this approach, &lt; is used to insert a left
angle bracket; &gt; substitutes a right angle bracket; &amp; replaces the
ampersand itself; while, say, &rarr; is a nice Unicode arrow.
NOTE In XHTML documents, additional named entities can be defined using the 
directive and made to resolve to internally defined strings or to the contents of an exter-
nal file URL. (This last option is obviously unsafe if allowed when processing untrusted
content; the resulting attack is sometimes called External XML Entity, or XXE for
short.)
76 Chapter 4
In addition to the named entities, it is also possible to insert an arbitrary
ASCII or Unicode character using a decimal &#number; notation. In this
case, &#60; maps to a left angle bracket; &#62; substitutes a right one; and
&#128569; is, I kid you not, a Unicode 6.0 character named “smiling cat face
with tears of joy.” Hexadecimal notation can also be used if the number is
prefixed with “x”. In this variant, the left angle bracket becomes &#x3c;, etc.
The HTML parser recognizes entity encoding inside text nodes and
parameter values and decodes it transparently when building an in-memory
representation of the document tree. Therefore, the following two cases are
functionally identical:
and
The following two examples, on the other hand, will not work as
expected, as the encoding interferes with the structure of the tag itself:
and
The largely transparent behavior of entity encoding makes it important
to correctly resolve it prior to making any security decisions about the con-
tents of a document and, if applicable, to properly restore it in the sanitized
output later on. To illustrate, the following syntax must be recognized as an
absolute reference to a javascript: pseudo-URL and not to a cryptic fragment
ID inside a relative resource named “./javascript&”:
Unfortunately, even the simple task of recognizing and parsing HTML
entities can be tricky. In traditional parsing, for example, entities may often
be accepted even if the trailing semicolon is omitted, as long as the next
character is not an alphanumeric. (In Firefox, dashes and periods are also
accepted in entity names.) Numeric entities are even more problematic, as
they may have an overlong notation with an arbitrary number of trailing
zeros. Moreover, if the numerical value is higher than 232, the standard size
of an integer on many computer architectures, the corresponding character
may be computed incorrectly.
Hypertext Markup Language 77
Developers working with XHTML should be aware of a potential pitfall
in that dialect, too. Although HTML entities are not recognized in most of
the special parsing modes, XHTML differs from traditional HTML in that
tags such as  and  do not automatically toggle a special parsing
mode on their own. Instead, an explicit  block around any
scripts or stylesheets is required to achieve a comparable effect. Therefore,
the following snippet with an attacker-controlled string (otherwise scrubbed
for angle brackets, quotes, backslashes, and newlines) is perfectly safe in
HTML, but not in XHTML:
HTTP/HTML Integration Semantics
From Chapter 3, we recall that HTTP headers may give new meaning to the
entire response (Location, Transfer-Encoding, and so on), change the way the
payload is presented (Content-Type, Content-Disposition), or affect the client-
side environment in other, auxiliary ways (Refresh, Set-Cookie, Cache-Control,
Expires, etc.).
But what if an HTML document is delivered through a non-HTTP proto-
col or loaded from a local file? Clearly, in this case, there is no simple way to
express or preserve this information. We can part with some of it easily, but
parameters such as the MIME type or the character set are essential, and los-
ing them forces browsers to improvise later on. (Consider, for example, that
charsets such as UTF-7, UTF-16, and UTF-32 are not ASCII-compatible and,
therefore, HTML documents can’t even be parsed without determining
which of these transformations needs to be used.)
The security consequences of the browser-level heuristics used to detect
character sets and document types will be explored in detail in Chapter 13.
Meanwhile, the problem of preserving protocol-level information within a
document is somewhat awkwardly addressed by a special HTML directive,
. By the time the browser examines the markup, many
content-handling decisions must have already been made, but some tweaks
are still on the table; for example, it may be possible to adjust the charset to
agenerally compatible value or to specify Refresh, Set-Cookie, and caching
directives.
As an illustration of permissible syntax, consider the following directive
that, when appearing in an 8-bit ASCII document, will clarify for the browser
that the charset of the document is UTF-8 and not, say, ISO-8859-1:
78 Chapter 4
On the flip side, all of the following directives will fail, because at this point
it is too late to switch to an incompatible UTF-32 encoding, change the docu-
ment type to a video format, or execute a redirect instead of parsing the file:
Be mindful that when http-equiv values conflict with each other, or con-
tradict the HTTP headers received from the server earlier on, their behavior
is not consistent and should not be relied upon. For example, the first sup-
ported charset= value usually prevails (and HTTP headers have precedence
over  in this case), but with several conflicting Refresh values, the behav-
ior is highly browser-specific.
NOTE Some browsers will attempt to speculatively extract  information
before actually parsing the document, which may lead to embarrassing mistakes. For
example, a security bug recently fixed in Firefox 4 caused the browser to interpret the
following statement as a character set declaration: .6
Hyperlinking and Content Inclusion
One of the most important and security-relevant features of HTML is,
predictably, the ability to link to and embed external content. HTTP-level
features such as Location and Refresh aside, this can be accomplished in a
couple of straightforward ways.
Plain Links
The following markup demonstrates the most familiar and most basic
method for referencing external content from within a document:
Click me!
This hyperlink may point to any of the browser-recognized schemes,
including pseudo-URLs (data:, javascript:, and so on) and protocols handled
by external applications (such as mailto:). Clicking on the text (or any HTML
elements) nested inside such a  block will typically prompt the
browser to navigate away from the linking document and go to the specified
location, if meaningfully possible for the protocol used.
An optional target parameter may be used to target other windows or
document views for navigation. The parameter must specify the name of the
target view. If the name cannot be found, or if access is denied, the default
behavior is typically to open a new window instead. The conditions in which
access may be denied are the topic of Chapter 11.
Hypertext Markup Language 79