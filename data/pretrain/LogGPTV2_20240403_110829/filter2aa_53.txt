1
ClassLoader的理解
前⾔
ClassLoader的特性
最后
补上上次星球⽆奖问答环节的坑。(本来北⾠师傅在星球中没改⻢甲名字，后来才知道下⾯回答的是北⾠师
傅，emmmm尴尬尴尬)
起因是⼩伙伴在hvv的过程中发现WAF会拦截Webshell中defineClass这个函数，因为反射可以把我们需
要调⽤的⽅法放到⼀个字符串的位置，就可以产⽣各种变形，所以就想通过反射来绕过。
于是乎就劈⾥啪啦写了这样⼀段代码：
然后发现第⼀次连接可以，第⼆次再刷新就会⼀直提示类重复加载的错误。
前⾔
1 Method defineClass = Class.forName("java.lang.ClassLoader").getDec
laredMethod("defineClass", String.class, byte[].class, int.class,
 int.class);
2
3 defineClass.setAccessible(true);
4 defineClass.invoke(ClassLoader.getSystemClassLoader(), bytes, 0, b
ytes.length)
2
其实这个问题主要涉及到对JAVA中类加载机制的理解，于是就引申出来另⼀个问题：为什么冰蝎跟蚁剑原
来的shell就不会提示类重复加载的错误呢。在这篇⽂章⾥跟⼤家分享⼀下⾃⼰的理解。
关于类加载机制已经有很多⽂章，在这个问题上主要涉及到其中⼀个知识点：
⼀个类，如果由不同的类加载器实例加载的话，会在⽅法区产⽣两个不同的类，彼此不可⻅，并且在堆中
⽣成不同Class实例。
这⾥我们做⼀个⼩实验，⾸先写⼀个测试的⽬标类，就是简单的弹⼀个计算器。
编译然后获取class⽂件的base64结果，放⼊到下⾯代码中。
需要注意的是，完成之后需要在idea中把上⾯弹计算器的类给删掉，这样才能模拟加载⼀个不存在类的效
果。
ClassLoader的特性
 1 package com;
 2
 3 import java.io.IOException;
 4
 5 public class calc {
 6     public calc() {
 7     }
 8
 9     static {
10         try {
11             Runtime.getRuntime().exec("calc");
12         } catch (IOException e) {
13             e.printStackTrace();
14         }
15
16     }
17 }
 1 package loader;
 2
 3 import java.util.Base64;
 4
 5 public class test1 {
3
运⾏之后发现弹出了计算器，因为此时我们加载这个类的ClassLoader就是defineLoader1。
 6     public static class DefineLoader extends ClassLoader {
 7         public Class load(byte[] bytes) {
 8             return super.defineClass(null, bytes, 0, bytes.lengt
h);
 9         }
10     }
11
12     public static void main(String[] args) {
13         String cls = "yv66vgAAADQAJgoACAAXCgAYABkIABoKABgAGwcAHAo
ABQAdBwAeBwAfAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJs
ZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAApMY29tL2NhbGM7AQAIPGNsa
W5pdD4BAAFlAQAVTGphdmEvaW8vSU9FeGNlcHRpb247AQANU3RhY2tNYXBUYWJsZQ
cAHAEAClNvdXJjZUZpbGUBAAljYWxjLmphdmEMAAkACgcAIAwAIQAiAQAEY2FsYww
AIwAkAQATamF2YS9pby9JT0V4Y2VwdGlvbgwAJQAKAQAIY29tL2NhbGMBABBqYXZh
L2xhbmcvT2JqZWN0AQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVK
ClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZz
spTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAA
AAgABAAkACgABAAsAAAAvAAEAAQAAAAUqtwABsQAAAAIADAAAAAYAAQAAAAUADQAA
AAwAAQAAAAUADgAPAAAACAAQAAoAAQALAAAAYQACAAEAAAASuAACEgO2AARXpwAIS
yq2AAaxAAEAAAAJAAwABQADAAwAAAAWAAUAAAAIAAkACwAMAAkADQAKABEADAANAA
AADAABAA0ABAARABIAAAATAAAABwACTAcAFAQAAQAVAAAAAgAW";
14         byte[] bytes = Base64.getDecoder().decode(cls);
15
16         DefineLoader defineLoader1 = new DefineLoader();
17         try {
18             defineLoader1.load(bytes);
19         } catch (Exception e) {
20             e.printStackTrace();
21         }
22         DefineLoader defineLoader2 =new DefineLoader();
23         try {
24             Class.forName("com.calc",true,defineLoader1);
25         } catch (ClassNotFoundException e) {
26             e.printStackTrace();
27         }
28     }
29 }
4
接着修改Class.forname的类加载器为另⼀个defineLoader2再运⾏
这个时候因为使⽤的另⼀个不同的类加载器进⾏加载，所以就提示找不到这个类了
再做⼀个实验，打印两个Class的hashCode，发现两者确实是不同的。
1         try {
2             Class.forName("com.calc",true,defineLoader2);
3         } catch (ClassNotFoundException e) {
4             e.printStackTrace();
5         }
5
 1 package loader;
 2
 3 import java.util.Base64;
 4
 5 public class test1 {
 6     public static class DefineLoader extends ClassLoader {
 7         public Class load(byte[] bytes) {
 8             return super.defineClass(null, bytes, 0, bytes.lengt
h);
 9         }
10     }
11
12     public static void main(String[] args) {
13         String cls = "yv66vgAAADQAJgoACAAXCgAYABkIABoKABgAGwcAHAo
ABQAdBwAeBwAfAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJs
ZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAApMY29tL2NhbGM7AQAIPGNsa
W5pdD4BAAFlAQAVTGphdmEvaW8vSU9FeGNlcHRpb247AQANU3RhY2tNYXBUYWJsZQ
cAHAEAClNvdXJjZUZpbGUBAAljYWxjLmphdmEMAAkACgcAIAwAIQAiAQAEY2FsYww
AIwAkAQATamF2YS9pby9JT0V4Y2VwdGlvbgwAJQAKAQAIY29tL2NhbGMBABBqYXZh
L2xhbmcvT2JqZWN0AQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVK
ClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZz
spTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAA
AAgABAAkACgABAAsAAAAvAAEAAQAAAAUqtwABsQAAAAIADAAAAAYAAQAAAAUADQAA
AAwAAQAAAAUADgAPAAAACAAQAAoAAQALAAAAYQACAAEAAAASuAACEgO2AARXpwAIS
yq2AAaxAAEAAAAJAAwABQADAAwAAAAWAAUAAAAIAAkACwAMAAkADQAKABEADAANAA
AADAABAA0ABAARABIAAAATAAAABwACTAcAFAQAAQAVAAAAAgAW";
14         byte[] bytes = Base64.getDecoder().decode(cls);
15
16         DefineLoader defineLoader1 = new DefineLoader();
17         DefineLoader defineLoader2 =new DefineLoader();
18         try {
19             Class cls1 = defineLoader1.load(bytes);
20             System.out.println(cls1.hashCode());
21             Class cls2 = defineLoader2.load(bytes);
22             System.out.println(cls2.hashCode());
23         } catch (Exception e) {
24             e.printStackTrace();
6
在JAVA世界⾥，决定⼀个类的唯⼀性主要有两点：
类名
他的类加载器。
所以在每次打过去的类名都是相同的情况下，我们只要保证这两个类是由不同的加载器去加载的就可以解
决类重复加载的问题了。
所以冰蝎、蚁剑的jsp shell在每次调⽤之前都会去new⼀个新的类加载器来加载对应的字节码，这样就可
以保证不会出现类重复加载的问题。
那么应该怎么⽤反射写呢？
原来的shell中是写了⼀个⼦类继承ClassLoader，我们完全可以从jdk中找⼀个同样继承ClassLoader并且
没有改写defineClass的⼦类
25         }
26
27     }
28 }
⽐较两个类是否“相等”，只有在这两个类是由同⼀个类加载器加载的前提下才有意义，否则，即使这两
个类来源于同⼀个Class⽂件，被同⼀个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必
定不相等。
7
在这⾥我们选择java.security.SecureClassLoader这个类，每次去new⼀个这个类，然后
defineClass.invoke的时候把new出来的ClassLoader实例给传进去。
构造出来的shell如下：
 1 
13 
最后
9
但是在⼀些特殊情况下，⽐如说⽤TemplatesImpl打进去的时候，我们需要让恶意类来继承
AbstractTranslet这个⽗类才可以，但是JAVA的设定是不能继承多个类。所以很多⽂章都是⽤
TemplatesImpl的恶意类再去defineClass加载真正的内存⻢，这样就有点麻烦了。如果⽤本⽂中的写法，
就不需要再继承ClassLoader了。