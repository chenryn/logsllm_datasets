install command to install the necessary Ruby gems. Running the parsenmap.rb
script with no arguments displays the proper syntax of the script, which simply
requires an Nmap XML file as input.
~$ git clone https://github.com/R3dy/parsenmap.git
Cloning into 'parsenmap'...
remote: Enumerating objects: 18, done.
remote: Total 18 (delta 0), reused 0 (delta 0), pack-reused 18
Unpacking objects: 100% (18/18), done.
~$ cd parsenmap/
~$ bundle install
Fetching gem metadata from https://rubygems.org/.............
Resolving dependencies...
Using bundler 1.17.2
Using mini_portile2 2.4.0
Fetching nmap-parser 0.3.5
Installing nmap-parser 0.3.5
Fetching nokogiri 1.10.3
Installing nokogiri 1.10.3 with native extensions
Listing 3.8
Nmap XML host structure
Listing 3.9
Nmap XML parsing script
53
Parsing XML output with Ruby
Fetching rprogram 0.3.2
Installing rprogram 0.3.2
Using ruby-nmap 0.9.3 from git://github.com/sophsec/ruby-nmap.git
 (at master@f6060a7)
Bundle complete! 2 Gemfile dependencies, 6 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
~$ ./parsenmap.rb 
Generates a .txt file containing the open pots summary and the .nmap 
information
USAGE:  ./parsenmap 
This is a script that I know I’ll use often, so I prefer to create a symbolic link to the exe-
cutable somewhere that is accessible from my $PATH environment variable. You’re likely
to run into this with multiple scripts, so let’s create a bin directory in your home directory
and then modify ~/.bash_profile so it’s added to your $PATH. This way, you can create
sym links to any scripts you use frequently. First, create the directory using mkdir ~/bin.
Then append this small piece of bash script to the end of your ~/.bash_profile file. 
if [ -d "$HOME/bin" ] ; then
  PATH="$PATH:$HOME/bin"
fi
You’ll need to exit and restart your bash prompt or manually reload the profile with
source ~/.bash_profile for the changes to take effect. Next, create a symbolic link
to the parsenmap.rb script in your newly created ~/bin directory:
~$ ln -s ~/git/parsenmap/parsenmap.rb ~/bin/parsenmap
Now you should be able to call the script by executing the parsenmap command from
anywhere in the terminal. 
 Let’s take a look at the output generated from our 65k port scan. Change back into
the ~/capsulecorp/discovery directory, and run the following: parsenmap services/
full-sweep.xml. The long output in the next listing starts to give you an idea of the
amount of information you can gather during service discovery. Imagine how much data
there would be on a large enterprise pentest with hundreds or thousands of targets!
~$ parsenmap services/full-sweep.xml
10.0.10.1       53      domain                  generic dns response: REFUSED
10.0.10.1       80      http
10.0.10.27      22      ssh     OpenSSH 7.9     protocol 2.0
10.0.10.27      5900    vnc     Apple remote desktop vnc
10.0.10.88      5061    sip-tls
10.0.10.90      8060    upnp    MiniUPnP        1.4     Roku; UPnP 1.0
10.0.10.90      9080    glrpc
Listing 3.10
Bash script to append to ~/.bash_profile
Listing 3.11
Output from parsenmap.rb
54
CHAPTER 3
Discovering network services
10.0.10.90      46996   unknown
10.0.10.95      80      http    VMware ESXi Server httpd
10.0.10.95      427     svrloc
10.0.10.95      443     http    VMware ESXi Web UI
10.0.10.95      902     vmware-auth     VMware Authentication Daemon   
1.10    Uses VNC, SOAP
10.0.10.95      8000    http-alt
10.0.10.95      8300    tmi
10.0.10.95      9080    soap    gSOAP   2.8
10.0.10.125     80      http
10.0.10.138     80      http
10.0.10.151     57143
10.0.10.188     22      ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 Ubuntu
Linux; protocol 2.0
10.0.10.188     80      http    Apache httpd    2.4.29  (Ubuntu)
10.0.10.200     53      domain
10.0.10.200     88      kerberos-sec    Microsoft Windows Kerberos  
server time: 2019-05-21 19:57:49Z
10.0.10.200     135     msrpc   Microsoft Windows RPC
10.0.10.200     139     netbios-ssn     Microsoft Windows netbios-ssn
10.0.10.200     389     ldap    Microsoft Windows Active Directory LDAP 
Domain: capsulecorp.local0., Site: Default-First-Site-Name
10.0.10.200     445     microsoft-ds
10.0.10.200     464     kpasswd5
10.0.10.200     593     ncacn_http      Microsoft Windows RPC over HTTP 1.0
10.0.10.200     636     tcpwrapped
10.0.10.200     3268    ldap    Microsoft Windows Active Directory LDAP 
Domain: capsulecorp.local0., Site: Default-First-Site-Name
10.0.10.200     3269    tcpwrapped
10.0.10.200     3389    ms-wbt-server   Microsoft Terminal Services
10.0.10.200     5357    http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.200     5985    http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.200     9389    mc-nmf  .NET Message Framing
10.0.10.200     49666   msrpc   Microsoft Windows RPC
10.0.10.200     49667   msrpc   Microsoft Windows RPC
10.0.10.200     49673   ncacn_http      Microsoft Windows RPC over HTTP 1.0
10.0.10.200     49674   msrpc   Microsoft Windows RPC
10.0.10.200     49676   msrpc   Microsoft Windows RPC
10.0.10.200     49689   msrpc   Microsoft Windows RPC
10.0.10.200     49733   msrpc   Microsoft Windows RPC
10.0.10.201     80      http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.201     135     msrpc   Microsoft Windows RPC
10.0.10.201     139     netbios-ssn     Microsoft Windows netbios-ssn
10.0.10.201     445     microsoft-ds    Microsoft Windows Server 2008 R2
 – 2012 microsoft-ds
10.0.10.201     1433    ms-sql-s        Microsoft SQL Server 2014 
12.00.6024.00; SP3
10.0.10.201     2383    ms-olap4
10.0.10.201     3389    ms-wbt-server   Microsoft Terminal Services
10.0.10.201     5985    http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.201     47001   http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.201     49664   msrpc   Microsoft Windows RPC
10.0.10.201     49665   msrpc   Microsoft Windows RPC
10.0.10.201     49666   msrpc   Microsoft Windows RPC
10.0.10.201     49669   msrpc   Microsoft Windows RPC
55
Parsing XML output with Ruby
10.0.10.201     49697   msrpc   Microsoft Windows RPC
10.0.10.201     49700   msrpc   Microsoft Windows RPC
10.0.10.201     49720   msrpc   Microsoft Windows RPC
10.0.10.201     53532   msrpc   Microsoft Windows RPC
10.0.10.202     80      http    Microsoft IIS httpd     8.5
10.0.10.202     135     msrpc   Microsoft Windows RPC
10.0.10.202     443     http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.202     445     microsoft-ds    Microsoft Windows Server 2008 R2
 – 2012 microsoft-ds
10.0.10.202     3389    ms-wbt-server
10.0.10.202     5985    http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.202     8080    http    Jetty   9.4.z-SNAPSHOT
10.0.10.202     49154   msrpc   Microsoft Windows RPC
10.0.10.203     80      http    Apache httpd    2.4.39  (Win64)
OpenSSL/1.1.1b PHP/7.3.5
10.0.10.203     135     msrpc   Microsoft Windows RPC
10.0.10.203     139     netbios-ssn     Microsoft Windows netbios-ssn
10.0.10.203     443     http    Apache httpd    2.4.39  (Win64)
OpenSSL/1.1.1b PHP/7.3.5
10.0.10.203     445     microsoft-ds    Microsoft Windows Server 2008 R2
 - 2012 microsoft-ds
10.0.10.203     3306    mysql   MariaDB         unauthorized
10.0.10.203     3389    ms-wbt-server
10.0.10.203     5985    http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.203     8009    ajp13   Apache Jserv            Protocol v1.3
10.0.10.203     8080    http    Apache Tomcat/Coyote JSP engine 1.1
10.0.10.203     47001   http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.203     49152   msrpc   Microsoft Windows RPC
10.0.10.203     49153   msrpc   Microsoft Windows RPC
10.0.10.203     49154   msrpc   Microsoft Windows RPC
10.0.10.203     49155   msrpc   Microsoft Windows RPC
10.0.10.203     49156   msrpc   Microsoft Windows RPC
10.0.10.203     49157   msrpc   Microsoft Windows RPC
10.0.10.203     49158   msrpc   Microsoft Windows RPC
10.0.10.203     49172   msrpc   Microsoft Windows RPC
10.0.10.204     22      ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3
Ubuntu Linux; protocol 2.0
10.0.10.205     135     msrpc   Microsoft Windows RPC
10.0.10.205     139     netbios-ssn     Microsoft Windows netbios-ssn
10.0.10.205     445     microsoft-ds
10.0.10.205     3389    ms-wbt-server   Microsoft Terminal Services
10.0.10.205     5040    unknown
10.0.10.205     5800    vnc-http        TightVNC            
user: workstation01k; VNC TCP port: 5900
10.0.10.205     5900    vnc     VNC             protocol 3.8
10.0.10.205     49667   msrpc   Microsoft Windows RPC
10.0.10.206     135     msrpc   Microsoft Windows RPC
10.0.10.206     139     netbios-ssn     Microsoft Windows netbios-ssn
10.0.10.206     445     microsoft-ds
10.0.10.206     3389    ms-wbt-server   Microsoft Terminal Services
10.0.10.206     5040    unknown
10.0.10.206     5800    vnc-http        Ultr@VNC      
Name workstation02y; resolution: 1024x800; VNC TCP port: 5900
10.0.10.206     5900    vnc     VNC             protocol 3.8
10.0.10.206     49668   msrpc   Microsoft Windows RPC
56
CHAPTER 3
Discovering network services
10.0.10.207     25      smtp    Microsoft Exchange smtpd
10.0.10.207     80      http    Microsoft IIS httpd     10.0
10.0.10.207     135     msrpc   Microsoft Windows RPC
10.0.10.207     139     netbios-ssn     Microsoft Windows netbios-ssn
10.0.10.207     443     http    Microsoft IIS httpd     10.0
10.0.10.207     445     microsoft-ds    Microsoft Windows 
Server 2008 R2 - 2012 microsoft-ds
10.0.10.207     587     smtp    Microsoft Exchange smtpd
10.0.10.207     593     ncacn_http      Microsoft Windows RPC over HTTP 1.0
10.0.10.207     808     ccproxy-http
10.0.10.207     1801    msmq
10.0.10.207     2103    msrpc   Microsoft Windows RPC
10.0.10.207     2105    msrpc   Microsoft Windows RPC
10.0.10.207     2107    msrpc   Microsoft Windows RPC
10.0.10.207     3389    ms-wbt-server   Microsoft Terminal Services
10.0.10.207     5985    http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.207     6001    ncacn_http      Microsoft Windows RPC over HTTP 1.0
10.0.10.207     6002    ncacn_http      Microsoft Windows RPC over HTTP 1.0
10.0.10.207     6004    ncacn_http      Microsoft Windows RPC over HTTP 1.0
10.0.10.207     6037    msrpc   Microsoft Windows RPC
10.0.10.207     6051    msrpc   Microsoft Windows RPC
10.0.10.207     6052    ncacn_http      Microsoft Windows RPC over HTTP 1.0
10.0.10.207     6080    msrpc   Microsoft Windows RPC
10.0.10.207     6082    msrpc   Microsoft Windows RPC
10.0.10.207     6085    msrpc   Microsoft Windows RPC
10.0.10.207     6103    msrpc   Microsoft Windows RPC
10.0.10.207     6104    msrpc   Microsoft Windows RPC
10.0.10.207     6105    msrpc   Microsoft Windows RPC
10.0.10.207     6112    msrpc   Microsoft Windows RPC
10.0.10.207     6113    msrpc   Microsoft Windows RPC
10.0.10.207     6135    msrpc   Microsoft Windows RPC
10.0.10.207     6141    msrpc   Microsoft Windows RPC
10.0.10.207     6143    msrpc   Microsoft Windows RPC
10.0.10.207     6146    msrpc   Microsoft Windows RPC
10.0.10.207     6161    msrpc   Microsoft Windows RPC
10.0.10.207     6400    msrpc   Microsoft Windows RPC
10.0.10.207     6401    msrpc   Microsoft Windows RPC
10.0.10.207     6402    msrpc   Microsoft Windows RPC
10.0.10.207     6403    msrpc   Microsoft Windows RPC
10.0.10.207     6404    msrpc   Microsoft Windows RPC
10.0.10.207     6405    msrpc   Microsoft Windows RPC
10.0.10.207     6406    msrpc   Microsoft Windows RPC
10.0.10.207     47001   http    Microsoft HTTPAPI httpd 2.0     SSDP/UPnP
10.0.10.207     64327   msexchange-logcopier    
Microsoft Exchange 2010 log copier
10.0.10.220     8060    upnp    MiniUPnP        1.4     Roku; UPnP 1.0
10.0.10.220     56792   unknown
10.0.10.239     80      http    HP OfficeJet 4650 series printer 
http config            Serial TH6CM4N1DY0662
10.0.10.239     443     http    HP OfficeJet 4650 series printer 
http config            Serial TH6CM4N1DY0662
10.0.10.239     631     http    HP OfficeJet 4650 series printer 
http config            Serial TH6CM4N1DY0662
10.0.10.239     3910    prnrequest
10.0.10.239     3911    prnstatus
57
Parsing XML output with Ruby
10.0.10.239     8080    http    HP OfficeJet 4650 series printer 
http config            Serial TH6CM4N1DY0662
10.0.10.239     9100    jetdirect
10.0.10.239     9220    hp-gsg  HP Generic Scan Gateway 1.0
10.0.10.239     53048
10.0.10.160     22      ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 
Ubuntu Linux; protocol 2.0
That’s a lot of output, even for a small network. I’m sure you can imagine what this
might look like if you were conducting an enterprise pentest targeting an organiza-
tion with 10,000+ computer systems. As you’ve seen for yourself, scrolling through this
output line by line is not practical. Of course, you can use grep to limit your output to
specific targeted items one by one, but what if you miss stuff? I find that the only
answer is to separate everything into protocol-specific target lists. This way, I can run
individual tools that accept a text file with IP addresses as an input (most of them do),
and I can split my tasks into relational groups. For example, I test X, Y, and Z for all
web services; then I do A, B, and C against all the database services; and so on. 
 If you have a really large network, the number of unique protocols is in the dozens
or even the hundreds. That said, most of the time you’ll end up ignoring the less com-
mon protocols because there is so much low-hanging-fruit in the more common pro-
tocols, including HTTP/HTTPS, SMB, SQL (all flavors), and any arbitrary RMI ports
such as SSH, RDP, VNC, and so on. 
3.3.1
Creating protocol-specific target lists
To maximize this data, you can break it into smaller, more digestible chunks. Some-
times it’s best to throw everything into a good old-fashioned spreadsheet program, sort
and organize the information by column, split things into individual tabs, and create a
more readable set of data. For this reason, parsenmap outputs tab-delimited strings that
import nicely into Microsoft Excel or LibreOffice. Run the command again, but this
time use the greater-than operator to output the parsed ports into a file:
~$ parsenmap services/full-sweep.xml > services/all-ports.csv
This file can be opened in LibreOffice Calc, which should already be on your Ubuntu
pentest platform. After you select the file to open, you’ll be presented with a Text
Import wizard. Make sure to uncheck all of the separator options except Tab and
Merge Delimiters. 
 Now you can add the appropriate column headings and apply sorting and filter-
ing. If it pleases you, you can also use separate protocol-specific tabs. There is no right
or wrong way to do this—do whatever works best for you to trim the large data set into
manageable chunks that you can work with. In my case, I’ll create a few text files in my
discovery/hosts directory containing the IP addresses of hosts running specific proto-
cols. Based on the output from Nmap, I only need to create five files. I’ll list the name
of the file I will create as well as the port number that corresponds to each of the IP
addresses in that file (table 3.2).
58
CHAPTER 3
Discovering network services
In the next chapter, we’ll use these target files to start hunting for vulnerable attack
vectors. If you plan to follow along on your network, make sure you have created them
before moving forward. 
 If it isn’t already apparent, a pentest is a process that builds on itself. So far, we’ve
turned our list of IP address ranges into specific targets, and then turned those targets
into individual services. The next part of the information-discovery phase is vulnera-
bility discovery. Here is where you finally start interrogating discovered network ser-
vices for known security weaknesses such as insecure credentials, poor system
configurations, and missing software patches.
Summary
 Network services are the entry points that attackers target, like doors and win-
dows in a secure building.
 Service banners reveal useful information about which software is running on
your target host.
 Launch a small common port scan before sweeping for all 65k ports.
 It’s ok to use nmap’s –-top-ports flag, but it’s even better to provide your own
list of ports that you commonly have success attacking.
 XML output is the most desirable to parse. Parsenmap is a Ruby script freely
available on GitHub.
 Use the information obtained during this sub-phase to build protocol-specific
target lists that will feed into the next sub-phase: vulnerability discovery.
Table 3.2
Protocol-specific target lists
Filename
Associated protocol
Associated ports
discovery/hosts/web.txt
http/https
80,443,8080
discovery/hosts/windows.txt
microsoft-ds
139,445
discovery/hosts/mssql.txt
ms-sql-s
1,433
discovery/hosts/mysql.txt
mysql
3,306
discovery/hosts/vnc.txt
vnc
5800,5900
Exercise 3.1: Creating protocol-specific target lists
Use Nmap to enumerate listening services from your targets.txt file. Create an all-
ports.csv file in your services folder using the parsenmap.rb script. Use this file to identify
common services in your network scope: for example, http, mysql, and microsoft-ds.
Create a set of protocol-specific target lists in your hosts directory following the example
from table 3.2. 
The protocol-specific target lists you create during this exercise will serve as a basis
for your vulnerability discovery efforts, which you’ll learn about in the next chapter.