217, 131, 65, 35, 207, 112, 77, 209, 176, 122, 192, 147, 107, 80, 37], [52, 
183, 251, 29, 226, 175, 39, 75, 34, 254, 233, 96, 155, 144, 9, 254, 189, 
41, 169, 184, 91, 97, 87, 88, 251, 138, 114, 118, 91, 156, 198, 75, 222, 
19, 183, 52, 81, 194, 144, 13, 249, 111, 3, 73], [21, 107, 222, 106, 222, 
98, 190, 4, 244, 225, 112, 133, 120, 253, 141, 48, 52, 154, 63, 235, 190, 
78, 33, 209, 4, 172, 158, 187, 219, 151, 17, 233, 214, 32, 120, 38, 26, 0, 
250, 129, 251, 40, 89, 39], [25, 66, 117, 107, 200, 80, 88, 90, 24, 176, 
247, 95, 59, 121, 118, 67, 56, 133, 145, 167, 24, 46, 180, 145, 128, 220, 
200, 29, 172, 157, 100, 9, 97, 253, 8, 200, 52, 229, 147, 218, 254, 255, 
182, 170], [172, 79, 214, 26, 85, 230, 228, 223, 32, 227, 84, 74, 109, 209, 
222, 45, 48, 66, 23, 197, 52, 212, 179, 184, 90, 149, 199, 128, 153, 70, 3, 
73, 160, 39, 49, 165, 88, 252, 135, 9, 157, 140, 32, 33], [72, 233, 196, 
173, 35, 166, 146, 186, 61, 86, 64, 42, 25, 86, 66, 93, 12, 255, 63, 83, 
95, 219, 108, 152, 205, 31, 238, 77, 74, 156, 149, 228, 68, 244, 178, 78, 
181, 173, 251, 248, 185, 99, 181, 205], [106, 86, 224, 51, 91, 194, 158, 
83, 144, 77, 217, 95, 125, 119, 144, 47, 85, 220, 24, 40, 59, 77, 70, 190, 
188, 20, 105, 150, 79, 85, 194, 168, 64, 215, 234, 226, 4, 99, 157, 0, 186, 
74, 18, 94], [36, 23, 51, 78, 191, 254, 1, 166, 174, 62, 222, 243, 131, 
207, 37, 4, 199, 35, 169, 7, 216, 42, 190, 241, 120, 11, 166, 129, 117, 93, 
184, 50, 237, 84, 122, 67, 250, 248, 60, 96, 117, 91, 187, 79], [248, 17, 
173, 127, 98, 184, 11, 20, 50, 140, 249, 248, 24, 222, 34, 86, 71, 0, 237, 
138, 148, 107, 115, 104, 62, 191, 39, 221, 123, 115, 131, 229, 127, 56, 64, 
177, 106, 239, 26, 255, 100, 88, 1, 75], [144, 18, 85, 103, 3, 31, 157, 44, 
67, 24, 228, 226, 82, 208, 69, 17, 189, 216, 205, 140, 6, 1, 33, 11, 61, 
223, 12, 116, 123, 167, 151, 58, 167, 79, 96, 189, 151, 233, 92, 94, 22, 
60, 254, 254], [216, 167, 82, 244, 143, 231, 192, 63, 79, 49, 131, 176, 
212, 46, 141, 107, 125, 207, 201, 5, 103, 155, 107, 166, 210, 49, 182, 60, 
34, 26, 220, 198, 225, 160, 57, 52, 138, 27, 247, 181, 0, 67, 1, 205], [19, 
243, 215, 203, 156, 157, 71, 187, 142, 198, 244, 52, 100, 195, 129, 134, 
38, 227, 155, 241, 122, 192, 145, 179, 195, 16, 180, 70, 86, 219, 250, 67, 
127, 47, 178, 249, 19, 36, 183, 50, 154, 186, 239, 15], [163, 224, 95, 10, 
171, 106, 49, 57, 28, 178, 119, 6, 40, 228, 92, 163, 93, 225, 23, 37, 24, 
211, 72, 105, 209, 70, 0, 165, 70, 226, 43, 187, 167, 60, 143, 233, 207, 
209, 12, 207, 64, 246, 222, 16], [245, 140, 237, 250, 89, 99, 215, 112, 85, 
182, 51, 26, 62, 220, 116, 17, 196, 247, 172, 121, 22, 106, 91, 200, 115, 
240, 31, 78, 47, 126, 50, 114, 109, 88, 83, 120, 17, 95, 198, 206, 71, 112, 
172, 49], [254, 198, 189, 175, 121, 123, 248, 38, 163, 170, 91, 171, 125, 
66, 94, 37, 181, 207, 13, 60, 210, 178, 252, 39, 175, 18, 106, 94, 171, 
196, 182, 129, 101, 165, 103, 164, 234, 110, 146, 69, 36, 75, 58, 98], 
[184, 162, 160, 24, 71, 214, 24, 14, 196, 222, 67, 178, 163, 150, 206, 104, 
38, 176, 245, 98, 180, 213, 93, 134, 25, 198, 166, 10, 183, 99, 207, 127, 
163, 10, 141, 105, 52, 68, 18, 121, 217, 209, 124, 127], [142, 153, 245, 
130, 182, 55, 211, 250, 217, 10, 172, 119, 212, 171, 244, 99, 99, 41, 223, 
221, 128, 66, 31, 129, 195, 145, 241, 50, 77, 139, 29, 232, 60, 167, 110, 
139, 124, 135, 18, 197, 200, 85, 15, 159], [225, 159, 86, 55, 158, 137, 
229, 250, 129, 194, 200, 31, 147, 30, 219, 233, 147, 28, 6, 219, 81, 172, 
132, 162, 212, 115, 232, 60, 152, 105, 146, 77, 187, 9, 20, 191, 157, 96, 
131, 190, 125, 175, 141, 4], [110, 75, 232, 58, 102, 13, 222, 137, 137, 14, 
191, 155, 48, 100, 169, 184, 49, 249, 49, 39, 138, 124, 63, 73, 237, 150, 
244, 126, 127, 206, 91, 252, 110, 45, 189, 116, 188, 42, 18, 68, 194, 244, 
53, 2], [109, 116, 87, 241, 128, 121, 227, 188, 2, 6, 81, 194, 4, 225, 176, 
48, 8, 59, 243, 50, 234, 228, 192, 176, 168, 187, 248, 244, 27, 188, 107, 
204, 222, 202, 73, 141, 160, 139, 151, 206, 1, 227, 152, 81], [13, 149, 85, 
158, 164, 119, 149, 36, 138, 84, 173, 132, 39, 230, 96, 229, 84, 218, 14, 
153, 184, 98, 160, 129, 2, 161, 99, 41, 17, 114, 55, 67, 192, 102, 241, 
168, 149, 191, 216, 18, 229, 153, 94, 171]]
k. = GF(2)[]
#l. = GF(2^8, modulus = a^8 + a^4 + a^3 + a + 1)
# 0x39 a^5+a^4+a^3+1
l. = GF(2^8, modulus = a^8 + a^5+a^4+a^3+1)
res = []
cmpl = []
parser
C++
tokenize
token
3
Token1 2  3 9
token
S→A{+A}*
A→B{_A}*
B→
 X_X_X_X……+X_X_X……+……
for i in range(44):
    cmpl.append(l.fetch_int(cmps[i]))
for i in range(44):
   res2 = []
   for j in range(44):
       res2.append(l.fetch_int(datas[j][i]))
   res.append(res2)
res = Matrix(res)
resi = res.inverse()
de = ''
for i in range(44):
    t = 0
    for j in range(44):
        t += cmpl[j] * resi[j][i]
    de += (chr(t.integer_representation()))
print(de)
\\n             9
+              5
_              6
{              2
}              3
De1CTF         1
    4
X
De1CTFRC4RC4
DES-CBCIVDe1CTFPKCS1Padding
De1CTF\x02\x02
AES-CBC  AES128
caiPadding
AES
Padding
AES
DES
padding
DES
DESRC4
0b827a9e002e076de2d84cacb123bc1eb08ebec1a454e0f550c65d37c58c7daf2d4827342d3
b13d9730f25c17689198b10101010101010101010101010101010
91983da9b13a31ef0472b502073b68ddbddb3cc17d0b0b0b0b0b0b0b0b0b0b0b607adea582e
83f505b76fcb2e564e53a
a7afa7e823499e23365819edd506cc86e44f43892015ff27d8e16695fc99f81ed96659fd0ee
98f1f2e07070707070707
cdc535899f23f0b22e07070707070707
new = 'cdc535899f23f0b22e'.decode('hex')
for i in xrange(len(new)):
    rc4 = ARC4.new('De1CTF')
    print rc4.decrypt(new[i:])
4nd
p4r53r
AES RC4
16bytesDES
RC4
91983da9b13a31ef0472b502073b68ddbddb3cc17d0b0b0b0b0b0b0b0b0b0b0b
new = '91983da9b13a31ef0472b502073b68ddbddb3cc17d'.decode('hex')
for i in xrange(len(new)):
    rc4 = ARC4.new('De1CTF')
    print rc4.decrypt(new[i:])
h3ll0
3a31ef0472b502073b68ddbddb3cc17d
8e9b23a9e5959829f6f3060606060606
w0rld
l3x3r
1 RC4 w0rld
2 RC4 l3x3r
3 DES 1+2
4 RC4 h3llo
5 AES 3+4
6 RC4 4nd
7 RC4 p4r53r
8 DES 6+7
9 AES 5+8
Flag
FLw
 IDA 7.0… … 
OD 
IDA 6.8 nop  vm 
opcode 
 base  vm base  vm 
- [base] r1 head
- [base+0x4] r2 tail
- [base+0x8] temp
- [base+0xC] arr queue
- [base+0x10] mem
- [base+0x14] opcode_addr
- [base+0x18] input_str
……
26 
cin >> input_Str; arr[r2++] = strlen(s); // 
2d    // 
00 xx 
arr[r2++] = nxtop; // 
0c xx mem[nxtop] = arr[r1++]; // 
16 xx arr[r2++] = mem[nxtop]; // 
17 
arr[r2++] = mem[arr[r1++]]; // 
18 
mem[arr[r1++]] = arr[r1++]; // 
                          +
                       /    \\
                      +      _
                    /  \\    /  \\
                 h3llo  _  4nd p4r53r 
                       / \\
                   w0rld l3x3r
De1CTF{h3ll0+w0rld_l3x3r+4nd_p4r53r}
1c 
temp = arr[r1++] + (temp > 8) & 0xFF)
    flag += chr(tmp & 0xFF)
print(flag)
# De1CTF{Innocence_Eye&Daisy*}