title:LEAF: A Faster Secure Search Algorithm via Localization, Extraction,
and Reconstruction
author:Rui Wen and
Yu Yu and
Xiang Xie and
Yang Zhang
LEAF: A Faster Secure Search Algorithm via Localization,
Extraction, and Reconstruction
Rui Wen
CISPA Helmholtz Center
for Information Security
Xiang Xie
PlatON
ABSTRACT
Secure search looks for and retrieves records from a (possibly cloud-
hosted) encrypted database while ensuring the confidentiality of
the queries. Researchers are paying increasing attention to secure
search in recent years due to the growing concerns about database
privacy. However, the low efficiency of (especially multiplicative)
homomorphic operations in secure search has hindered its deploy-
ment in practice. To address this issue, Akavia et al. [CCS 2018, PETS
2019] proposed new protocols that bring down the number of mul-
tiplications in the search algorithm from 𝑂(𝑛2) to 𝑂(𝑛 log2 𝑛), and
then to 𝑂(𝑛 log 𝑛), where 𝑛 is the size of the database. In this paper,
we present the first secure search protocol – LEAF and its variant
LEAF+– which only requires 𝑂(𝑛) multiplications. Specifically, at
the core of LEAF are three novel methods we propose, referred to
as Localization, Extraction, and Reconstruction. In addition, LEAF
enjoys low communication complexity and only requires the client
to perform decryption, which adds its advantage in deployment on
weak-power devices such as mobile phones.
KEYWORDS
Secure Search; (Leveled) Fully Homomorphic Encryption.
ACM Reference Format:
Rui Wen, Yu Yu, Xiang Xie, and Yang Zhang. 2020. LEAF: A Faster Se-
cure Search Algorithm via Localization, Extraction, and Reconstruction. In
Proceedings of the 2020 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM,
New York, NY, USA, 14 pages. https://doi.org/10.1145/3372297.3417237
1 INTRODUCTION
With the advancement of cloud computing technologies, more and
more companies and individuals (client) start to hand over their
data to third-party cloud storage companies (server). In this context,
a client gives away her data to a server, who has full access to and
∗Part of this work was done while the first author was doing his final year project at
Shanghai Jiao Tong University.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417237
Yu Yu
Shanghai Jiao Tong University
Shanghai Qi Zhi Institute
Yang Zhang
CISPA Helmholtz Center
for Information Security
operates on the data in plaintext following the client’s instructions,
such as database queries and operations. In many such cases, pri-
vacy concerns arise especially when a client’s data contains highly
sensitive information, such as biomedical records, and the server is
not fully trustworthy.
Many advanced cryptographic techniques, such as multi-party
computation (MPC) and searchable encryption, can be leveraged to
perform data searching in the cloud in a privacy-preserving manner.
Among these techniques, fully homomorphic encryption (FHE)
based secure search has attracted a lot of attention in recent years.
Compared to MPC, secure search is more efficient communication
wise as it only requires a single round of interaction independent
of the matching function. Moreover, secure search does not reveal
any valid information contrary to searchable encryption, which
provides a stronger data privacy guarantee.
Secure search roughly contains two steps, i.e., matching and
searching. In the matching step, the server compares the encrypted
search query (from the client) with all encrypted items in the data-
base, and returns another encrypted array of 0s and 1s with 1
indicating the corresponding database item satisfying the query.
The searching step returns all 1’s indexes and corresponding items
to the client. Secure search suffers from high computation cost
due to the expensive FHE operations required, in particular, in the
searching step. In this paper, we focus on the searching step, and
will refer to the searching step as secure search without ambigu-
ity. The most intuitive method, namely Folklore, requires 𝑂(𝑛2)
times of homomorphic multiplication which is not practical in
real-world scenarios. In recent years, some solutions have been pro-
posed to make secure search more practical. For example, Akavia et
al. [1] proposed SPiRiT, which leverages the multi-ring technique
to reduce the required multiplication number to 𝑂(𝑛 log2 𝑛). More
recently, Akavia et al. [2] proposed a new algorithm which adopts a
low-degree approximation method for the OR operation to further
reduce the number of multiplication to 𝑂(𝑛 log 𝑛).
1.1 Our Contributions
In this paper, we propose the first FHE-based secure search algo-
rithm which only requires 𝑂(𝑛) times multiplication and, at the
same time, does not add depth in the asymptotic sense. As we will
explain in more detail in Section 2, depth is a unique and vital con-
cept we will meet when designing FHE-based algorithms. Higher
depth leads to more time per homomorphic operation costs. Our
algorithms, namely (LEAF) and its variant (LEAF+), rely on three
novel techniques: Localization, Extraction, and Reconstruction.
Table 1: Complexity comparison. In the Full LEAF scheme, the bootstrapping technique is applied after every homomorphic
encryption, therefore the cost of each multiplication operation is independent of 𝑛, and the total complexity of 𝑂(𝑛). We use
blue to represent the best complexity in practice, and use red to represent the optimal complexity in theory. As multiplication
takes much more time than addition, here the time complexity only considers multiplication.
Algorithm Name Degree of Function Number of Multiplications Time Complexity
Folklore
SPiRiT Det.
AGHL
LEAF
LEAF+
Full LEAF
𝑂(𝑛)
𝑂(log3 𝑛)
𝑂(log 𝑛)
𝑂(log2 𝑛)
𝑂(log 𝑛)
/
𝑂(𝑛2)
𝑂(𝑛 log2 𝑛)
𝑂(𝑛 log 𝑛)
𝑂(𝑛)
𝑂(𝑛)
𝑂(𝑛)
𝑂(𝑛2 log𝜔 𝑛)
𝑂(𝑛 log2 𝑛(log log 𝑛)𝜔)
𝑂(𝑛 log 𝑛(log log 𝑛)𝜔)
𝑂(𝑛(log log 𝑛)𝜔)
𝑂(𝑛(log log 𝑛)𝜔)
𝑂(𝑛)
Localization technique is used to localize the first matched item
in a smaller interval, it divides the original array into many equal
length’s smaller intervals, and returns the encrypted indexes of the
interval containing the matched item.
Extraction is designed to extract the interval containing the de-
sired item. Since both indexes and contents are homomorphically
encrypted, we cannot use indexes to extract the target interval di-
rectly. Therefore, we use extraction technique to extract the interval
while do not need to decrypt the index or increase depth.
Localization and extraction are able to reduce non-necessary
operations on non-target intervals, and allow us only apply the
search algorithm on the target interval. This results in LEAF and
LEAF+only requiring 𝑂(𝑛) times multiplication.
Finally, we utilize Reconstruction technique to combine two posi-
tion information together to generate the final output. This method
accepts two encrypted position indexes: one indicates the interval
the matched item located, the other indicates the offset the matched
item in the target interval. Without decryption, Reconstruction is
able to output the encrypted actual index in the original database.
We combine these three techniques to construct LEAF. Moreover,
on the basis of LEAF, we use lazy bootstrapping to refresh depth
at a specific stage to construct its variant LEAF+. We compare the
state-of-the-art secure search algorithms in Table 1, where 𝑛 is
the number of items and 𝜔 < 2.3727 is the matrix multiplication
exponent. As we can see, LEAF+ has reached the most advanced
level both in degree of function and number of multiplications.
Asymptotically, LEAF+ algorithm performs best. But compared
with LEAF, when 𝑛 is small, the optimization effect is less satisfac-
tory due to the increased time overhead and computational depth
associated with introducing the bootstrapping step. However, when
𝑛 is large, the optimization efficiency of LEAF+ algorithm is better.
Our algorithms (LEAF, LEAF+) support negligible error prob-
ability and do not need pre- and post-processing, which means
our algorithm has very low computational power requirements
for the client. In our protocol, the client only needs to do one en-
cryption and decryption operation, which is particularly useful
when the client is limited in its computational power, e.g., the client
is a mobile device. This feature greatly expands the application
scenarios of the algorithm. Meantime, our algorithms require com-
putations solely over 𝐺𝐹(2), which makes them better optimized
as smaller plaintext modulus requires lower depth and makes the
bootstrapping procedure cost fewer multiplication operations. Our
algorithms also support unrestricted search function, e.g., exact
match operation, compare operation, and range limited operation.
To illustrate our algorithms’ correctness and efficiency, we give a
correctness proof and derive the complexity specifically. Moreover,
we implement our algorithm and compare with the prior state-of-
the-art proposal to show our algorithm’s efficiency.
In summary, our key contributions are as follows:
• We propose a new secure search algorithm which requires
only 𝑂(𝑛) times of homomorphic multiplications, while the
state-of-the-art requires 𝑂(𝑛 log 𝑛) times of multiplications.
• We keep our algorithm’s depth invariant even after applying
retrieving method, which further speeds up our algorithm’s
efficiency.
• We give a concrete complexity analysis of our algorithm,
which allows potential users and researchers to estimate the
practical efficiency.
1.2 Organization
The rest of this paper is organized as follows: we present the whole
framework of secure search in Section 2, preliminary definitions
and notations are given in Section 3. The algorithm description
(LEAF) and its correctness proof is described in Section 4. Efficiency
analysis is provided in Section 5. A variant of the algorithm (LEAF+)
is given in Section 6. The experimental results are given in Section 7.
Further optimization is given in Section 8. Related works are given
in Section 9. Finally we conclude the paper in Section 10.
2 SECURE SEARCH: OVERVIEW
Due to the nature of cloud services, privacy has been a concern
since the day the cloud service appeared. Clients do not want the
server to learn anything sensitive. Thus, encrypt clients’ data would
be a natural solution. Privacy-preserving solutions are methods
that meet the requirements, including MPC, searchable encryption
and FHE. Among them, FHE has multiple advantages, such as low
communication complexity and stronger privacy guarantee. Using
FHE to realize searching on encrypted data is called secure search.
For the sake of simplicity, we assume there is only one client
(single client) and one server (single server) when we describe the
secure search process in our paper.
In theory, it is feasible to use FHE to securely compute any
(polynomial-time) algorithm including secure search. To use FHE,
one needs to represent the algorithm using a Boolean circuit. Fol-
lowing many FHE-relevant works (e.g., [10, 13]) by depth we refer
to the “multiplicative depth” of the circuit throughout this paper,
as illustrated in Figure 1. In homomorphic encryption, the time
required for the multiplication operation is much larger than the
addition operation, and the time consumption of the single multi-
plication operation is related to the circuit depth. How to design an
algorithm with fewer number of multiplications and low computa-
tion depth remains a huge challenge.
2.1 Secure Search Framework
Before presenting the secure search algorithm, we need to first
introduce some initial operations:
• Key Generation: Run the homomorphic encryption key
generation algorithm, generate a public key (𝑝𝑘) and a pri-
vate key (𝑠𝑘), publish the public key (𝑝𝑘), and keep the pri-
vate key (𝑠𝑘) by the client.
• Upload: The client encrypts items using the public key (𝑝𝑘),
as shown in Figure 2. in the client part. Then the client
uploads the encrypted items. It is worth noting that in this
step, the client can encrypt the newly added item with the
same public key and upload it to the server-side at any time.
• Data Structure: We utilize array as the data structure used
in the protocol. The items in the array are unsorted, which
eliminates the need for our protocol to preprocess uploaded
data and there is no need to guarantee the order in which
the data is stored in the database.
That is, we need to first use the public key to encrypt our data and
then upload them to the server. We use array as the data structure
to store data, every data has its own index, we only need to do these
steps once. If new data needs to be added, we can use the public
key to encrypt the new data and upload it, which also reflects the
benefits of not preprocessing the data, then we can execute our
search process:
• Input: The client selects the lookup value as needed, en-
crypts it using the public key (𝑝𝑘) generated in the Key
Generation step and sends it to the server.
AND
AND
MUL-depth:
1
XOR
XOR
+0
AND
+1 = 2
Figure 1: A function is represented by a Boolean circuit com-
posed of addition (XOR) and multiplication (AND), where
the multiplicative depth is the maximal number of ANDs
along the paths of the circuit (i.e., omitting XORs).
item1
item2
item3
item4
. . .
item𝑛
client
Homomorphic Encryption
item1
item2
item3
item4
. . .
item𝑛
Output:Homomorphic encrypted
target items:
item𝑖1,item𝑖2,...,item𝑖𝑘
Upload:Homomorphic encrypted items:
item1,item2,...,item𝑛
Input:Homomorphic encrypted
lookup value
item1
item2
item3
item4
. . .
Matching Step: Matching? Yes:1, No:0
server
0
1
0
1
Searching Step
index𝑖1
index𝑖2
. . .
. . .
item𝑛
1
index𝑖𝑘
Figure 2: The procedure of secure search using homomor-
phic encryption, the client encrypts its lookup value, and
the server returns the indexes and content of the corre-
sponding item. 𝑥 represents the ciphertext corresponding to
plaintext 𝑥.
• Matching: The server runs the specified matching function
to match the encrypted items in the database and returns
an array whose element is encrypted 0 or 1 to represent a