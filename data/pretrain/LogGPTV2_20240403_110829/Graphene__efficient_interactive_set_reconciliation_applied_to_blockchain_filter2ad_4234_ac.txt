a  n − x. This bound allows us to conservatively set
n−x∗ for Bloom filter R. In other words, since x∗  p − L) and (r + conf  |V |. Since the j edges in X are chosen uniformly at
random, and there are more possible edges on vertex set U ,
the probability that a given set of 2v edges forms in (U , X , k)
must be lower than in (V , X , k).
Fig. 6 shows the pseudocode for our algorithm, which re-
lies on two functions. The function decode(j,k,c) takes a
random sample from the set of hypergraphs Hj,p and deter-
mines if it forms a 2-core (i.e., if it decodes), returning True
or False. The function conf_int(s,t) returns the 2-sided
Figure 7: Size of optimal IBLTs (using Alg. 1) given a desired
decode rate; with a statically parameterized IBLT (k = 4, τ =
1.5) in black. For clarity, the plot is split on the x-axis. Decode
rates are shown in Fig. 5.
confidence interval of a proportion of s successes and t trials.
In practice, we call Alg. 1 only on values of k that we have
observed to be reasonable (e.g., 3 to 15), and prune the search
of each k when it is clear that it will not be smaller in size
than a known result.
We have released an open-source implementation of IBLTs
in C++ with a Python wrapper [5]. The release includes an
implementation of Alg. 1 and optimal parameters for several
decode rates. Compared to a version of our algorithm that
uses actual IBLTs, our hypergraph approach executes much
faster for all j. For example, to parameterize j = 100, our
approach completes in 29 seconds on average (100 trials).
Allocating actual IBLTs increases average run time to 426
seconds.
Fig. 7 shows the size of IBLTs when parameterized op-
timally for three different decode rates. If parameterized
correctly, the number of cells in an IBLT grows linearly, with
variations due to inherent discretization and fewer degrees
of freedom in small IBLTs.
4.2 Ping-Pong Decoding
Graphene takes advantage of its two IBLTs to increase the
decode rate for Protocol 2 in a novel fashion. IBLTs I and J
are different sizes, and may use a different number of hash
functions, but contain the same transactions. When an IBLT
fails to decode completely, it still can succeed partially. The
transactions that are decoded from J can be removed from I,
and decoding I can be retried. Transactions from I can then
be removed from J, and decoding J can be retried; and so on
in a ping-pong fashion. We note that if the count of a decoded