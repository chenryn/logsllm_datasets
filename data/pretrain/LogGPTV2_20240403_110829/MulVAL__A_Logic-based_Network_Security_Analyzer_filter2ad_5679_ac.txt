### 文本优化

#### 1. 系统管理员对易受攻击的libpng库进行了修补。
尽管工作站实际上存在四个漏洞，但只有一个漏洞导致了策略违规。工作站上的其他三个漏洞是内核中的本地可利用漏洞。由于只有可信用户能够访问这些主机，在修补了libpng漏洞后，我们的工具显示策略不再被违反。这些机器的正常运行时间通常以月为单位，升级内核需要重启。修补这些漏洞会导致可用性损失，这是应尽量避免的。管理员可以在不修补内核和重启工作站的情况下满足安全目标。我们预计该工具在关键任务系统（如服务数百万用户的商业邮件服务器和运行长时间计算的服务器）中非常有用。

#### 2. 多阶段攻击示例
现在，我们通过一个模拟攻击来说明我们的框架如何处理多阶段攻击。假设扫描器报告了以下两个漏洞：
- `vulExists(webServer, 'CVE-2002-0392', httpd)`
- `vulExists(fileServer, 'CAN-2003-0252', mountd)`

这两个漏洞都是远程可利用的，并可能导致权限提升。ICAT数据库中的相应Datalog子句如下：
- `vulProperty('CVE-2002-0392', remoteExploit, privEscalation)`
- `vulProperty('CAN-2003-0252', remoteExploit, privEscalation)`

机器和网络配置、主体和数据绑定以及安全策略与前一示例相同。

**结果**：MulVAL推理引擎分析了输入的Datalog元组。Prolog会话记录如下：
```
| ?- policyViolation(Adversary, Access, Resource).
Adversary = attacker
Access = read
Resource = projectPlan;
Adversary = attacker
Access = write
Resource = webPages;
Adversary = attacker
Access = write
Resource = projectPlan;
```

我们在附录A中展示了第一个违规行为的跟踪。以下是攻击如何导致策略违规的解释：

攻击者首先可以通过远程利用漏洞CVE-2002-0392来控制webServer。由于webServer可以访问fileServer，他随后可以通过利用漏洞CAN-2003-0252来攻破fileServer并成为其根用户。接下来，他可以修改fileServer上的任意文件。由于workStation上的可执行二进制文件挂载在fileServer上，它们的完整性将被攻击者破坏。最终，无辜用户可能会执行被篡改的客户端程序，从而让攻击者获得对workStation的访问权限，进而进一步危及存储在其上的文件。

修复此违规的一种方法是将webPages移至webServer，并阻止从dmz区域到内部区域的入站访问。在实施这些对策后，我们使用新的输入运行了MulVAL推理引擎，并验证了安全策略得到满足。

#### 3. 假设分析
漏洞推理工具的一个重要用途是进行“如果”分析。例如，管理员可能想知道：“如果明天出现两条CERT公告，我的网络是否仍然安全？”毕竟，使用防火墙的一个重要目的是防范潜在威胁。即使今天网络中没有已知漏洞，明天也可能发现新的漏洞。能够在假设情况下揭示网络弱点的分析对于提高安全性非常有用。在我们的框架中，进行这种假设分析非常容易。我们引入了一个谓词`bugHyp`来表示假设的软件漏洞。例如，以下是一个假设的web服务程序httpd在主机webServer上的漏洞：
- `bugHyp(webServer, httpd, remoteExploit, privEscalation)`

然后，这些假定的漏洞被引入到推理过程中：
- `vulExists(Host, VulID, Prog) :- bugHyp(Host, Prog, Range, Consequence).`
- `vulProperty(VulID, Range, Consequence) :- bugHyp(Host, Prog, Range, Consequence).`

如果网络的安全策略被违反，checktwo将报告违规情况；否则，网络可以承受两个假设的漏洞。

#### 4. 性能和可扩展性
我们在Red Hat Linux 9主机（内核版本2.4.20-8）上测量了扫描器的性能。CPU为730 MHz Pentium III处理器，内存为128MB。分析引擎运行在具有2.8GHz Pentium 4处理器和512MB RAM的Windows PC上。我们构建了与第5节所述网络配置相似但具有不同数量的Web服务器、文件服务器和工作站的例子。

要使用MulVAL推理引擎分析网络，需要在每个主机上运行MulVAL扫描器并将结果传输到运行分析引擎的主机。扫描器可以在多台机器上并行执行。分析引擎随后对从所有主机收集的数据进行操作。由于扫描器在各种主机上的功能相同，我们测量了单个主机上的扫描器运行时间。我们还测量了真实和合成基准的分析引擎运行时间（以秒为单位）：

- **MulVAL扫描器**
  - 单主机：236秒
  - 200主机：0.08秒
  - 400主机：0.22秒
  - 1000主机：0.75秒
  - 2000主机：3.85秒

- **MulVAL推理引擎**
  - 单主机：15.8秒
  - 200主机：0.08秒
  - 400主机：0.08秒
  - 1000主机：0.08秒
  - 2000主机：0.48秒

以下Prolog程序将确定是否存在两个任意假设漏洞导致的策略违规：
```prolog
checktwo(P, Acc, Data, Prog1, Prog2) :-
    program(Prog1),
    program(Prog2),
    Prog1 @< Prog2,
    cleanState,
    assert(bugHyp(H1, Prog1, Range1, Conseq1)),
    assert(bugHyp(H2, Prog2, Range2, Conseq2)),
    policyViolation(P, Acc, Data).
```

这两个`assert`语句引入了关于两个程序中假设漏洞的动态子句（Prolog回溯将遍历所有可能的组合）。如果未发现策略违规，执行将回溯并尝试另一组假设漏洞。`@<`是Prolog中的术语比较运算符，确保每种程序组合只尝试一次。如果存在两个程序，其假设漏洞将导致策略违规，那么MulVAL扫描器将在一台典型配置的Linux主机上运行所需的时间；原则上，扫描器可以在所有主机上并行运行。基准测试§5.1是第5.1节描述的真实世界3主机网络。每个标记为“n主机”的基准测试包括n个类似的Linux主机（大约三分之一是Web服务器，三分之一是文件服务器，三分之一是工作站），主机访问规则（即防火墙）类似于§5.1。我们的推理引擎可以在不到一分钟的时间内处理数千台主机的网络。

典型的网络可能有十几种主机：许多Web服务器、许多文件服务器、许多计算服务器和许多用户机器。根据网络拓扑和安装的软件（例如，所有Web服务器是否在同一防火墙位置，且是否都运行相同的软件？），可能每个主机组都可以被视为一个主机进行漏洞分析，因此n=12而不是n=12,000。正式表征这种分组成立的条件将是有用的。

为了测试假设分析的速度，我们构建了具有不同数量主机和不同数量程序的合成网络。每个程序运行在多台机器上。由于假设分析会遍历所有程序组合以注入漏洞，因此运行时间取决于程序数量和假设漏洞的数量。图3显示了不同主机数量、程序数量和注入漏洞数量下的性能。随着假设漏洞数量的增加，运行时间增加，因为分析引擎需要遍历\(\binom{n}{k}\)个程序组合，其中n是不同种类程序的数量，k是注入漏洞的数量。当k=0时，是没有注入假设漏洞的情况。随着k的增加，性能显著下降，但在一个具有1000台主机和20种不同程序的网络上，当k=2时，仅需273秒。由于假设分析可以在未知漏洞存在之前离线进行，因此不需要快速的实时响应时间。性能下降是可以接受的。图3显示我们的系统可以在合理的时间范围内对大型网络进行这种分析。

MulVAL推理引擎的输入大小如下：
- **代码库大小**：为了在Red Hat平台上实现我们的框架，我们调整了OVAL扫描器并编写了交互规则。我们的代码库大小如下：
  - OVAL扫描器：13484行
  - 交互规则：668行（原始）+ 393行（新）

我们的设计模块化和简洁性使我们能够通过编写约一千行代码有效地利用现有工具和数据库。我们注意到，交互规则的小尺寸和声明式风格使其易于理解和调试。交互规则模型了Unix风格的安全语义。我们预见，要对Windows平台进行推理，所需的工作量是相当的。这些规则独立于漏洞定义。

#### 5. 扫描分布式网络
我们测量了在多个主机上并行运行MulVAL扫描器的性能。我们使用了PlanetLab，这是一个由全球超过500台Linux主机通过互联网连接组成的测试平台[20]。我们选择了47台主机以获得地理多样性（美国、加拿大、瑞士、德国、西班牙、以色列、印度、香港、韩国、日本）。我们能够登录到39台主机，并成功在33台主机上安装了扫描器。我们运行了一个脚本，在33台主机上并行打开SSH会话并运行MulVAL扫描器。我们假设许多主机都在进行正常工作负载，因为我们没有尝试为其保留资源。第一台主机在1.18分钟内响应；前25台主机在10分钟内响应；前29台主机在15分钟内响应；此时我们终止了实验。

对于局域网，我们期望快速且均匀的响应时间。但对于分布式网络，我们建议异步扫描。每台机器在配置发生变化或定期时应扫描并报告配置信息。每当新的扫描数据到达或从OVAL或ICAT获取新的漏洞数据时，推理引擎可以在几秒钟内运行。

#### 6. 讨论
目前，MulVAL扫描器是通过对标准现成的OVAL扫描器进行增强来实现的。OVAL扫描器承担了收集机器配置信息和将配置与正式公告进行比较以确定系统是否存在漏洞的任务。这种方法的缺点是，当新的公告发布时，必须在每个主机上重新进行扫描。更理想的做法是将配置信息的收集与漏洞识别分开，这样当新的漏洞报告到来时，可以在预先收集的配置数据上进行分析。

此外，扫描还涉及许多其他问题，例如如何处理配置文件中的错误。完整的配置扫描讨论超出了本文的范围。