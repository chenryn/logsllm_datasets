### Reader Reference
For further details, please refer to references [3, 4, 19].

### Node Splitting and Tree Navigation
The `Split()` method is invoked by the internal `Insert()` method when a node split is necessary. Another external method is the `Consistent()` method, which specifies how to navigate through the index tree. The `Consistent()` method is called by the internal `Insert()` and `Search()` methods to guide tree navigation.

### SP-GiST: An Extensible Indexing Framework
SP-GiST (Space-Partitioned GiST) is an extensible indexing framework that supports a wide variety of space-partitioning trees, including disk-based versions of tries, quadtrees, and kd-trees. In Table 1, we illustrate the instantiation of a dictionary trie and a kd-tree using SP-GiST. From a developer's perspective, coding the external methods as shown in Table 1 is all that is required.

SP-GiST provides a set of common internal methods for all space-partitioning trees, such as `Insert()`, `Search()`, and `Delete()`. These internal methods form the core of SP-GiST and are consistent across all SP-GiST-based indexes. SP-GiST also provides a default clustering technique that maps index nodes into disk pages, based on the method described in reference [12], which is proven to generate minimal-height trees.

#### Example Trees
- **Point Quadtree**
  - Chicago
  - Toronto
  - Denver
  - Buffalo
  - Omaha
  - Mobile
  - Atlanta

- **kd-Tree**
  - Chicago
  - Toronto
  - Denver
  - Buffalo
  - Omaha
  - Mobile
  - Atlanta

**Figure 3.** Example point quadtree and kd-tree.

### Instantiation of Trie and kd-Tree Using SP-GiST
| Parameter | Trie | kd-Tree |
|-----------|------|---------|
| PathShrink | TreeShrink | NeverShrink |
| NodeShrink | True | False |
| BucketSize | B | 1 |
| NoOfSpacePartitions | 27 | 2 |
| NodePredicate | letter or blank | "left", "right", or blank |
| KeyType | String | Point |
| Consistent(E, q, level) | If (q[level] == E.letter) OR (E.letter == blank AND level > length(q)) Return True, else Return False | If (level is odd AND q.x satisfies E.p.x) OR (level is even AND q.y satisfies E.p.y) Return True, else Return False |
| PickSplit(P, level) | Find a common prefix among words in P. Update level = level + length of the common prefix. Let P predicate = the common prefix. Partition the data strings in P according to the character values at position "level". If any data string has length < level, insert data string in Partition "blank". If any of the partitions is still overfull, Return True, else Return False | Put the old point in a child node with predicate "blank". Put the new point in a child node with predicate "left" or "right". Return False |

**Table 1.** Instantiation of the trie and kd-tree using SP-GiST.

### Implementation Issues
In this section, we discuss the implementation issues in realizing SP-GiST inside PostgreSQL. First, we provide an overview of the main extensible features of PostgreSQL, and then we discuss the implementation of SP-GiST.

#### PostgreSQL Extensibility
PostgreSQL is an open-source object-relational database management system that is highly extensible. Most of its functionalities are table-driven, and information about available data types, access methods, operators, etc., is stored in the system catalog tables. PostgreSQL allows users to define new operators, operator classes, and interface routines, which can be implemented as dynamically loadable modules (e.g., shared libraries).

- **Defining New Operators**: In the operator definition, we specify the data types on which the operator works and a set of properties that the query optimizer can use.
- **Defining New Operator Classes**: Operator classes link access methods with data types and operators, and allow users to define support functions used by the access method for internal operations.
- **Defining New Interface Routines**: Each access method in PostgreSQL has a set of associated functions called interface routines.

#### Realizing SP-GiST Inside PostgreSQL
To realize SP-GiST inside PostgreSQL, we use the following features:

- **New Access Method Entry**: A new row is inserted into the `pg_am` table to introduce SP-GiST as a new access method. The `pg_am` table stores information about the available access methods.
- **Internal Methods as Interface Routines**: The internal methods are defined as the interface routines of the new access method.

**Table 2.** `pg_am` catalog table entry for SP-GiST.

| Column Name | Column Description | SP-GiST Function/Value |
|-------------|--------------------|-----------------------|
| amname | Name of the access method | SP GiST |
| amowner | User ID of the owner | 0 |
| amstrategies | Max number of operator strategies | 20 |
| amsupport | Max number of support functions | 20 |
| amorderstrategy | Strategy number for entries ordering | 0 |
| amcanunique | Support unique index flag | FALSE |
| amcanmulticol | Support multi-column flag | FALSE |
| amindexnulls | Support null entries flag | FALSE |
| amconcurrent | Support concurrent update flag | TRUE |
| amgettuple | "Next valid tuple" function | spgistgettuple |
| aminsert | "Insert this tuple" function | spgistinsert |
| ambeginscan | "Start new scan" function | spgistbeginscan |
| amrescan | "Restart this scan" function | spgistrescan |
| amendscan | "End this scan" function | spgistendscan |
| ammarkpos | "Mark current scan position" function | spgistmarkpos |
| amrestrpos | "Restore marked scan position" function | spgistrestrpos |
| ambuild | "Build new index" function | spgistbuild |
| ambulkdelete | Bulk-delete function | spgistbulkdelete |
| amvacuumcleanup | Post-VACUUM cleanup function | — |
| amcostestimate | Function to estimate cost of an index scan | spgistcostestimate |

By implementing SP-GiST inside PostgreSQL, we extend the access methods to include the family of space-partitioning trees, such as the kd-tree, trie, quadtree, and their variants.

#### Cost Estimation
Estimating the cost of the SP-GiST index scan is performed by the `spgistcostestimate()` function, which uses the generic cost estimate functions provided by PostgreSQL. Four cost parameters are estimated:

1. **Index Selectivity**: The estimated fraction of the underlying table rows that will be retrieved during the index scan. The selectivity depends on the operator being used in the query.
2. **Index Correlation**: Set to 0 because there is no correlation between the index order and the underlying table order.
3. **Index Startup Cost**: The CPU cost of evaluating any complex expressions that are arguments to the index. These expressions are evaluated once at the beginning of the index scan.
4. **Index Total Cost**: The sum of the startup cost plus the disk I/O cost. The estimated disk I/O cost depends on the index selectivity and the index size.

#### Definition of SP-GiST Operators
Different SP-GiST index structures have different sets of operators (external methods). For the trie index structure, we define three operators: ‘=’, ‘?=’, and ‘?#’, to support equality queries, prefix queries, and regular expression queries, respectively. For the kd-tree, we define two operators: ‘@’ and ‘∧’, to support equality and range queries, respectively. The nearest-neighbor search (NN search) is defined as the operator ‘@@’.

**Table 3.** Semantics of the query types.

| Query Type | Query Semantic |
|------------|----------------|
| Equality Query | Return the keys that exactly match the query predicate. |
| Prefix Query | Return the keys that have a prefix that matches the query predicate. |
| Regular Expression Query | Return the keys that match the query regular expression predicate. |
| Substring Query | Return the keys that have a substring that matches the query predicate. |
| Range Query | Return the keys that are within the query predicate range. |
| NN Query | Return the keys sorted based on their distances from the query predicate. |

**Table 4.** Trie and kd-tree operator definitions.

| Operator | Left Argument | Right Argument | Procedure | Commutator | Restrict |
|----------|---------------|----------------|-----------|------------|----------|
| =        | VARCHAR       | VARCHAR        | trieword_equal | ==         | eqsel    |
| ?=       | VARCHAR       | VARCHAR        | trieword_prefix | likesel   |          |
| @        | POINT         | POINT          | kdpoint_equal | @          | contsel  |
| ∧        | POINT         | BOX            | kdpoint_inside |            | contsel  |

#### Realization of SP-GiST External Methods
The SP-GiST external methods and interface parameters capture the differences among various types of SP-GiST index structures. To realize the external methods inside PostgreSQL, we use the access methods' support functions, which are provided within the definition of the operator classes.

The selectivity of each operator is estimated by the procedures defined in the `restrict` clause, such as `eqsel()`, `contsel()`, and `likesel()`. The query optimizer uses these procedures to estimate the index selectivity and the index scan cost.

This comprehensive approach ensures that SP-GiST can be effectively integrated into PostgreSQL, providing a flexible and powerful indexing framework for a wide range of applications.