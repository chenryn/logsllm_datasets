readerisreferredto[3,4,19].
Split() is invoked by the internal method Insert() when a
node-splitis needed. Anotherexternalmethodis the Con-
3.1 SP-GiST sistent()methodthatspecifieshowtonavigatethroughthe
indextree. Consistent()isinvokedbytheinternalmethods
SP-GiST is an extensible indexing framework that Insert()andSearch()toguidethetreenavigation.
broadens the class of supported indexes to include disk- InTable1,weillustratetheinstantiationofthedictionary
basedversionsofawidevarietyofspace-partitioningtrees, trie and the kd-tree using SP-GiST. Notice that from the
e.g., disk-based trie variants, quadtree variants, and kd- developer’spointofview,codingoftheexternalmethodsin
trees. Table1isallwhatthedeveloperneedstoprovide.
SP-GiST provides a set of internal methods that are SP-GiST provides a default clustering technique that
common for all space-partitioning trees, e.g., the Insert(), maps index nodes into disk pages [3, 4]. The clustering
Search(), and Delete() methods. The internal methodsare techniqueisbasedon [12] andisproventogeneratemini-
thecoreofSP-GiSTandarethesameforallSP-GiST-based mumpage-heighttrees.
Chicago
Toronto Chicago Toronto
Denver Buffalo Denver Buffalo Denver Mobile
Chicago Denver Toronto Omaha Mobile Chicago
Toronto
Omaha
Omaha Atlanta Omaha Atlanta Buffalo
Mobile Mobile
Buffalo Atlanta
Atlanta
(a)Pointquadtree (b)kd-tree
Figure3.Examplepointquadtreeandkd-tree.
trie kd-tree
Parameters PathShrink=TreeShrink,NodeShrink=True PathShrink=NeverShrink,NodeShrink=False
BucketSize=B BucketSize=1
NoOfSpacePartitions=27 NoOfSpacePartitions=2
NodePredicate=letterorblank NodePredicate=“left”,“right”,orblank
KeyType=String KeyType=Point
Consistent(E,q,level) If(q[level]==E.letter) If(levelisoddANDq.xsatisfiesE.p.x)
OR(E.letter==blankANDlevel>length(q)) OR(levelisevenANDq.ysatisfiesE.p.y)
ReturnTrue,elseReturnFalse ReturnTrue,elseReturnFalse
PickSplit(P,level) FindacommonprefixamongwordsinP Puttheoldpointinachildnodewith
Updatelevel=level+lengthofthecommonprefix predicate“blank”
LetPpredicate=thecommonprefix Putthenewpointinachildnodewith
PartitionthedatastringsinPaccordingto predicate“left”or“right”
thecharactervaluesatposition“level” ReturnFalse
Ifanydatastringhaslength<level,
InsertdatastringinPartition“blank”
Ifanyofthepartitionsisstilloverfull
ReturnTrue,elseReturnFalse
Table1.Instantiationsofthetrieandkd-treeusingSP-GiST.
4 Implementation Issues tions that perform the functionality of that access
method.Thesefunctionsarecalled,interfaceroutines.
In this section we discuss implementation issues in re- Theinterfaceroutinescanbeimplementedasloadable
alizing SP-GiST inside PostgreSQL. First, we give an modules.
overview of the main extensible features of PostgreSQL.
• Defining New Operators: In the operatordefinition,
Then,wediscusstheimplementationofSP-GiST.
wespecifythedatatypesonwhichtheoperatorworks.
Wealsospecifyasetofpropertiesthatthequeryopti-
4.1 PostgreSQLExtensibility
mizercanuseinevaluatingtheaccessmethods.
PostgreSQLisanopen-sourceobject-relationaldatabase
• Defining New Operator Classes: Operator classes
management system. PostgreSQL is extensible as most
specifythedatatypeandtheoperatorsonwhichacer-
of its functionalities are table-driven. Information about
tainaccessmethodcanwork.Inadditiontolinkingan
theavailabledatatypes,accessmethods,operators,etc., is
accessmethodwithdatatypesandoperators,operator
stored in the system catalog tables. PostgreSQL incorpo-
classes allow users to define a set of functionscalled
ratesuser-definedfunctionsintotheenginethroughdynam-
supportfunctions, thatareusedbythe accessmethod
icallyloadablemodules,e.g.,sharedlibraries. Theseload-
toperforminternalfunctions.
able modules can be used to implement the functionality
of new operators or access methods. The implementation
4.2 RealizingSP-GiSTInsidePostgreSQL
ofSP-GiSTinsidePostgreSQLmakesuseofthefollowing
features:
TheaccessmethodscurrentlysupportedbyPostgreSQL
• Defining New Interface Routines: Each access (version8.0.1)are: Heapaccess: Sequentialscanoverthe
method in PostgreSQL has a set of associated func- relation,B+-tree:Thedefaultindexaccessmethod,R-tree:
INSERTINTOpg amVALUES(‘SP GiST’,0,20,20,0,’f’,’f’,’f’,’t’,‘spgistgettuple’,
SP-GiSTinsert ‘spgistinsert’,‘spgistbeginscan’,‘spgistrescan’,‘spgistendscan’,‘spgistmarkpos’,
statement ‘spgistrestrpos’,‘spgistbuild’,‘spgistbulkdelete’,‘-’,‘spgistcostestimate’);
Columnname Columndescription SP-GiSTfunction/value
amname Nameoftheaccessmethod SP GiST
amowner UserIDoftheowner 0
amstrategies Maxnumberofoperatorstrategiesfor 20
thisaccessmethod
amsupport Maxnumberofsupportfunctionsfor 20
thisaccessmethod
amorderstrategy Thestrategynumberforentriesordering 0
amcanunique Supportuniqueindexflag FALSE
amcanmulticol Supportmulticolumnflag FALSE
amindexnulls Supportnullentriesflag FALSE
amconcurrent Supportconcurrentupdateflag TRUE
amgettuple “Nextvalidtuple”function ‘spgistgettuple’
aminsert “Insertthistuple”function ‘spgistinsert’
ambeginscan “Startnewscan”function ‘spgistbeginscan’
amrescan “Restartthisscan”function ‘spgistrescan’
amendscan “Endthisscan”function ‘spgistendscan’
ammarkpos “Markcurrentscanposition”function ‘spgistmarkpos’
amrestrpos “Restoremarkedscanposition”function ‘spgistrestrpos’
ambuild “Buildnewindex”function ‘spgistbuild’
ambulkdelete Bulk-deletefunction ‘spgistbulkdelete’
amvacuumcleanup Post-VACUUMcleanupfunction —
amcostestimate Functiontoestimatecostofanindexscan ‘spgistcostestimate’
Table2.pg amcatalogtableentryforSP-GiST.
To supportqueriesonspatial data, Hash: To supportsim- method), and the maximum number of possible sup-
ple equality queries, GiST: Generalized index framework port functions to 20. Since SP-GiST index entries
fortheB-tree-likestructures. ByrealizingSP-GiSTinside do not follow a certain order, we set the value of the
PostgreSQL, we extend the access methods to include the amorderstrategyto0.Thisvaluemeansthatthereisno
familyofspace-partitioningtrees,e.g.,thekd-tree,thetrie, strategy for ordering the index entries. The SP-GiST
thequadtree,andtheirvariants.Inthefollowing,wediscuss internalmethods(e.g., spgistgettuple(),spgistinsert(),
howweimplementSP-GiSTinsidePostgreSQL. etc.) are assigned to the correspondinginterface rou-
tinecolumns(e.g.,amgettuple,aminsert,etc.).
• RealizationofSP-GiSTInternalMethods
EstimatingthecostoftheSP-GiSTindexscanisper-
SP-GiST internal methods are the core part of formed by function spgistcostestimate(), which is as-
the SP-GiST framework, and they are shared among signedtocolumnamcostestimate.spgistcostestimate()
all the space partitioning tree structures. To realize uses the generic cost estimate functions provided by
the internal methods, we use PostgreSQL access PostgreSQL.Fourcostparametersareestimated:
methods’ interface routines (See Section 4.1). A
new row is inserted into the pg am table to introduce 1. Indexselectivity:Theindexselectivityisthees-
SP-GiSTtoPostgreSQLasanewaccessmethod(See timatedfractionoftheunderlyingtablerowsthat
Table 2). pg am is a system catalog table that stores will be retrievedduringthe indexscan. The se-
the information about the available access methods. lectivity depends on the operator being used in
The internal methods are defined as the interface the query. We associate with each operatorthat
routinesofthataccessmethod. we define, a procedure that estimates the selec-
tivityofthatoperator.
In Table 2 we illustrate the pg am table entry for
SP-GiST. The name of the new access method is set 2. Index correlation: The index correlation is set
to ’SP GiST’. We set the maximum number of the to 0 because there is no correlationbetween the
possible strategies (i.e., operators linked to an access indexorderandtheunderlyingtableorder.
Querytype QuerySemantic
Equalityquery Returnthekeysthatexactlymatchthequerypredicate.
Prefixquery Returnthekeysthathaveaprefixthatmatchesthequerypredicate.
Regularexpressionquery Returnthekeysthatmatchthequeryregularexpressionpredicate.
Substringquery Returnthekeysthathaveasubstringthatmatchesthequerypredicate.
Rangequery Returnthekeysthatarewithinthequerypredicaterange.
NNquery Returnthekeyssortedbasedontheirdistancesfromthequerypredicate.
Table3.Thesemanticofthequerytypes.
trie kd-tree
Equalityoperator‘=’ Prefixmatchoperator‘?=’ Equalityoperator‘@’ insideoperator‘∧’
CREATEOPERATOR=( CREATEOPERATOR?=( CREATEOPERATOR@( CREATEOPERATOR∧(
leftarg=VARCHAR, leftarg=VARCHAR, leftarg=POINT, leftarg=POINT,
rightarg=VARCHAR, rightarg=VARCHAR, rightarg=POINT, rightarg=BOX,
procedure=trieword equal, procedure=trieword prefix, procedure=kdpoint equal, procedure=kdpoint inside,
commutator==, restrict=likesel, commutator=@, restrict=contsel,
restrict=eqsel, restrict=eqsel,
); ); ); );
Table4.Thetrieandkd-treeoperatordefinitions.
3. Indexstartupcost: ThestartupcostistheCPU function for each index structure is defined in the
cost of evaluating any complex expressionsthat NN Consistent() external method (see Section 5).
are arguments to the index. These expressions For example, the kd-tree and quadtree may use the
are evaluatedonceatthe beginningofthe index Euclidean distance function, while the trie may use
scan. theHammingdistancefunction. Thesemanticsofthe
querytypesaregiveninTable3.
4. Indextotalcost: Thetotalcostisthesumofthe
startupcostplusthediskI/Ocost. Theestimated An example of the operators’ definitions is given in
diskI/Ocostdependsontheindexselectivityand Table 4. Each operator is linked to a procedure
theindexsize. that performs the operator’s functionality, e.g., tri-
word equal(), kdpoint equal(). Other properties can
SP-GiST internal methods are implemented as a dy- be defined for each operator. For example, the com-
namicallyloadablemodulethatisloadedbythePost- mutatorclausespecifiestheoperatorthatthequeryop-
greSQL dynamic loader when the index is first used. timizershoulduse, ifit decidesto switch theoriginal
Therefore,theimplementationoftheinternalmethods operator’sarguments.
is completely portable, and does not even require re-
Estimating the selectivity of each operator is per-
compilingPostgreSQL’scode.
formedbytheproceduresdefinedintherestrictclause.
We use procedures provided by PostgreSQL, e.g.,
• DefinitionofSP-GiSTOperators
eqsel(), contsel(), likesel(). eqsel() estimates the se-
lectivityof theequalityoperators. contsel()estimates
The various SP-GiST index structures have dif-
theselectivityofthecontainmentoperators(i.e.,range
ferent sets of operators (external methods) to work
search), whereas, likesel() estimates the selectivity of
on. For the trie index structure, we define the three
thesimilarityoperators,e.g.,LIKEoperator.Thequery
operators; ‘=’, ‘#=’, and ‘?=’, to supportthe equality
optimizeruses these proceduresto estimate the index
queries,the prefixqueries,andthe regularexpression
selectivityandtheindexscancost.
queries, respectively. For the regular expression
queries,theSP-GiSTtriesupportscurrently,thewild- • RealizationofSP-GiSTExternalMethods
cardcharacter; ‘?’, thatmatchesany single character.
In the case of the kd-tree, we define two operators; The SP-GiST external methods and interface pa-
‘@’and‘∧’,tosupporttheequalityandrangequeries, rameters capture the differences among the various
respectively.Wedefineoneoperatorforthesuffixtree, types of SP-GiST index structures. To realize the
i.e.,‘@=’,tosupportthesubstringmatchqueries.The external methods inside PostgreSQL, we use the
nearest-neighborsearch,NN search,(seeSection5)is access methods’ support functions. The support
definedasthe operator‘@@’ thatcanbe calledfrom functions are provided within the definition of the
the SQL like all other operators. The NN distance operator classes (See Section 4.1). The definitions