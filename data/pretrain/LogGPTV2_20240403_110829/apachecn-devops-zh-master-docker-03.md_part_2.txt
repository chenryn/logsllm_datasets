您也可以使用以下命令运行 Docker Hub 创建的映像，再次确保使用您自己的映像(如果有):
```
$ docker container run -d -p8080:80 --name example masteringdockerthirdedition/dockerfiles-example
```
我还以完全相同的方式添加了多阶段构建。Docker Hub 对构建没有任何问题，您可以从以下日志中看到，这些日志从 Docker 构建环境的一点信息开始:
```
Building in Docker Cloud's infrastructure...
Cloning into '.'...
KernelVersion: 4.4.0-1060-aws
Components: [{u'Version': u'18.03.1-ee-1-tp5', u'Name': u'Engine', u'Details': {u'KernelVersion': u'4.4.0-1060-aws', u'Os': u'linux', u'BuildTime': u'2018-06-23T07:58:56.000000000+00:00', u'ApiVersion': u'1.37', u'MinAPIVersion': u'1.12', u'GitCommit': u'1b30665', u'Arch': u'amd64', u'Experimental': u'false', u'GoVersion': u'go1.10.2'}}]
Arch: amd64
BuildTime: 2018-06-23T07:58:56.000000000+00:00
ApiVersion: 1.37
Platform: {u'Name': u''}
Version: 18.03.1-ee-1-tp5
MinAPIVersion: 1.12
GitCommit: 1b30665
Os: linux
GoVersion: go1.10.2
```
然后，构建从编译我们的代码开始，如下所示:
```
Starting build of index.docker.io/masteringdockerthirdedition/multi-stage:latest...
Step 1/8 : FROM golang:latest as builder
 ---> d0e7a411e3da
Step 2/8 : WORKDIR /go-http-hello-world/
Removing intermediate container ea4bd2a1e92a
 ---> 0735d98776ef
Step 3/8 : RUN go get -d -v golang.org/x/net/html
 ---> Running in 5b180ef58abf
Fetching https://golang.org/x/net/html?go-get=1
Parsing meta tags from https://golang.org/x/net/html?go-get=1 (status code 200)
get "golang.org/x/net/html": found meta tag get.metaImport{Prefix:"golang.org/x/net", VCS:"git", RepoRoot:"https://go.googlesource.com/net"} at https://golang.org/x/net/html?go-get=1
get "golang.org/x/net/html": verifying non-authoritative meta tag
Fetching https://golang.org/x/net?go-get=1
Parsing meta tags from https://golang.org/x/net?go-get=1 (status code 200)
golang.org/x/net (download)
Removing intermediate container 5b180ef58abf
 ---> e2d566167ecd
Step 4/8 : ADD https://raw.githubusercontent.com/geetarista/go-http-hello-world/master/hello_world/hello_world.go ./hello_world.go
 ---> c5489fee49e0
Step 5/8 : RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .
 ---> Running in 0c5892f9db02
Removing intermediate container 0c5892f9db02
 ---> 94087063b79a
```
现在，我们的代码已经编译完毕，接下来将应用二进制文件复制到最终的映像中:
```
Step 6/8 : FROM scratch
 ---> 
Step 7/8 : COPY --from=builder /go-http-hello-world/app .
 ---> e16f25bc4201
Step 8/8 : CMD ["./app"]
 ---> Running in c93cfe262c15
Removing intermediate container c93cfe262c15
 ---> bf3498b1f51e
Successfully built bf3498b1f51e
Successfully tagged masteringdockerthirdedition/multi-stage:latest
Pushing index.docker.io/masteringdockerthirdedition/multi-stage:latest...
Done!
Build finished
```
您可以使用以下命令，使用映像来拉取和启动容器:
```
$ docker image pull masteringdockerthirdedition/multi-stage
$ docker image ls
$ docker container run -d -p 8000:80 --name go-hello-world masteringdockerthirdedition/multi-stage
$ curl http://localhost:8000/
```
从下面的截图中可以看到，该映像的行为方式与我们在本地创建它时完全相同:
![](img/3e092fb2-c73e-41a6-8b86-35734fd9d03b.png)
如果您使用以下命令启动容器，则可以删除它们:
```
$ docker container stop example
$ docker container rm example
$ docker container stop go-hello-world
$ docker container rm go-hello-world
```
现在我们已经了解了自动化构建，我们可以讨论如何将映像推送到 Docker Hub。
# 宣传自己的形象
在[第 2 章](02.html)、*构建容器映像*中，我们讨论了在不使用 Dockerfile 的情况下创建映像。虽然这仍然不是一个好主意，应该只在您真正需要的时候使用，但是您可以将自己的映像推送到 Docker Hub。
When pushing images to Docker Hub in this way, ensure that you do not include any code, files, or environment variables you would not want to be publicly accessible.
为此，我们首先需要通过运行以下命令将本地 Docker 客户端链接到 Docker Hub:
```
$ docker login
```
然后系统会提示您输入您的 Docker 编号和密码:
![](img/87505ffd-86d7-430f-826b-a1cf9932b4d8.png)
此外，如果您正在使用 Docker for Mac 或 Docker for Windows，您现在将通过应用登录，并且应该能够从菜单访问 Docker Hub:
![](img/2433ddec-62d9-4ecf-81b1-1257083a4df3.png)
现在我们的客户被授权与 Docker Hub 交互，我们需要一个映像来构建。让我们来看看推送我们在[第 2 章](02.html)、*构建容器映像*中构建的抓图。首先，我们需要建立形象。为此，我使用以下命令:
```
$ docker build --tag masteringdockerthirdedition/scratch-example:latest .
```
如果您正在跟进，那么您应该用您自己的用户名或组织替换`masteringdockerthirdedition`:
![](img/04aca08c-a396-4472-8bc3-03b726896b27.png)
一旦构建了映像，我们可以通过运行以下命令将其推送到 Docker Hub:
```
$ docker image push masteringdockerthirdedition/scratch-example:latest
```
以下屏幕截图显示了输出:
![](img/2f9e0035-3858-4913-895e-6becdb40de32.png)
如您所见，因为我们在构建映像时定义了`masteringdockerthirdedition/scratch-example:latest`，Docker 自动将映像上传到该位置，这又为`Mastering Docker Third Edition`组织添加了一个新映像:
![](img/b231c61b-33ef-44c5-bc04-12411bd0fb40.png)
您将会注意到，在 Docker Hub 中，您对构建无能为力。这是因为该映像不是由 Docker Hub 构建的，因此，它并不真正了解构建该映像的过程。
# Docker 商店
大家可能还记得在[第 1 章](01.html)*Docker 概述*中，我们从 Docker 商店下载了 macOS 的 Docker 和 Windows 的 Docker。除了作为各种平台下载 **Docker CE** 和 **Docker EE** 的单一位置，它现在也是查找 **Docker 映像**和 **Docker 插件**的首选位置。
![](img/b86f1bae-110b-4f47-8388-c347e577d115.png)
虽然您只能在 Docker Store 中找到官方和认证的映像，但可以选择使用 Docker Store 界面来搜索 Docker Hub。此外，您还可以下载 Docker Hub 中没有的映像，例如 Citrix NetScaler CPX 快速映像:
![](img/9b47411c-b0aa-4ea5-8ac2-2ade614199e8.png)
如果您注意到，该映像附有价格(快速版本为 0.00 美元)，这意味着您可以通过 Docker Store 购买商业软件，因为它内置了支付和许可功能。如果您是软件发行商，您可以通过 Docker Store 签署和分发您自己的软件。
当我们讨论 Docker 插件时，我们将在后面的章节中更详细地讨论 Docker 商店。
# Docker 注册表
在本节中，我们将研究 Docker 注册表。 **Docker Registry** 是一个开源应用，你可以在任何你喜欢的地方运行并存储你的 Docker 映像。我们将看看 Docker 注册表和 Docker Hub 之间的比较，以及如何在两者之间进行选择。在本节结束时，您将学习如何运行自己的 Docker 注册表，并查看它是否适合您。
# Docker 登记处概述
如前所述，Docker Registry 是一个开源应用，您可以利用它在您选择的平台上存储您的 Docker 映像。如果你愿意，这可以让你 100%保密，或者根据需要共享。
如果您想部署自己的注册表，而不必为 Docker Hub 的所有私有功能付费，Docker Registry 很有意义。接下来，让我们看看 Docker Hub 和 Docker Registry 之间的一些比较，以帮助您做出明智的决定，选择哪个平台来存储您的映像。
Docker 注册表具有以下功能:
*   托管和管理您自己的注册表，从中您可以将所有存储库作为私有、公共或两者的混合来服务
*   根据托管的映像数量或提供的请求数量，根据需要扩展注册表