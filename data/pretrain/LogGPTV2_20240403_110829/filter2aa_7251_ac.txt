**最大数限制突破**
很多商品限制用户购买数量时,服务器仅在页面通过 js 脚本限制,未在服务器端校验用户提交的数量,通过抓包修改商品最大数限制,将请求中的商品数量改为大于最大数限制的值,查看能否以修改后的数量完成业务流程.
**本地 js 参数修改**
部分应用程序通过 Javascript 处理用户提交的请求,通过修改 Javascript 脚本,测试修改后的数据是否影响到用户.
---
## 接口利用
**相关文章**
- [安全建设-攻防思路与实践（一）](https://mp.weixin.qq.com/s/mnHGLZ_e3tWkxCL-DPAAvQ)
**相关案例**
- [$36k Google App Engine RCE](https://www.ezequiel.tech/p/36k-google-app-engine-rce.html)
**学习资源**
- [inonshk/31-days-of-API-Security-Tips](https://github.com/inonshk/31-days-of-API-Security-Tips)
- [31 Days of API Security](https://docs.google.com/spreadsheets/d/1jn3JnWzQFZW41gKo5Fhxwf2ke2w-pvrpCGhBmKhyIBE/edit#gid=0)
### BOLA
> Broken Object Level Authorization
这个是 OWASP API Security Project 中的一种漏洞,和 IDOR 很像,我的理解就是 API 渗透中的越权
- https://owasp.org/www-project-api-security/
**相关文章**
- [A Deep Dive On The Most Critical API Vulnerability — BOLA (Broken Object Level Authorization) ](https://medium.com/@inonst/a-deep-dive-on-the-most-critical-api-vulnerability-bola-1342224ec3f2)
**相关案例**
- [How I could have hacked your Uber account](https://appsecure.security/blog/how-i-could-have-hacked-your-uber-account)
- [Content Injection Vulnerability in WordPress](https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html)
- [How spending our Saturday hacking earned us 20k](https://web.archive.org/web/20190614232925/https://medium.com/intigriti/how-spending-our-saturday-hacking-earned-us-20k-60990c4678d4)
**Tips**
部分内容来自 [[A Deep Dive On The Most Critical API Vulnerability — BOLA (Broken Object Level Authorization](https://medium.com/@inonst/a-deep-dive-on-the-most-critical-api-vulnerability-bola-1342224ec3f2)]、[[31 Days of API Security](https://docs.google.com/spreadsheets/d/1jn3JnWzQFZW41gKo5Fhxwf2ke2w-pvrpCGhBmKhyIBE/edit#gid=0)]
- FUZZ 接口路径、接口名
    - https://github.com/ffffffff0x/AboutSecurity/tree/master/Dic/Web/api_param
- 大小写替换
    - `userinfo/view`
    - `userINFO/VIew`
- 测试不同版本的 API 接口
    - `/v1/userinfo/view`
    - `/v2/userinfo/view`
- 添加后缀
    - `userinfo/view.json`
    - `userinfo/view.action`
- 内容注入
    - `userinfo/view?id=123`
    - `userinfo/view?id=*`
    - `userinfo/view?id=ABC`
    - `userinfo/view?id=123ABC`
    - `userinfo/view?id=123ABC!@#`
    - `userinfo/view?id=1+2+3`
    - `userinfo/view?id=1%203`
- 添加参数
    - `userinfo/view`
    - `userinfo/view?id=xxx`
- 数组
    - `{"id":xxx}`
    - `{"id":[xxx]}`
- JSON 对象
    - `{"id":xxx}`
    - `{"id":{"id":xxx}}`
    - `{"id":{"id":[xxx]}}`
- 去 JSON
    - `{"id":xxx}`
    - `id=xxx`
- 更改请求内容类型
    - `Content-type: application/xml`
    - `Content-type: application/json`
- 通配符
    - `{""id"":""*""}`
- 尝试执行 JSON 参数污染
    ```bash
    POST api / get_profile
    {"user_id":，"user_id":}
    {"id":2,"id":1}
    ```
    或
    ```bash
    POST api / get_profile
    {"user_id":，"user_id":}
    ```
- 尝试执行 HTTP 参数污染:
    - `userinfo/view?id=xxx`
    - `userinfo/view?id=xxx&id=yyy`
    - `userinfo/view?id=xxx&id=yyy,zzz`
- 查找未启用授权机制的 API 主机、或 API 节点
- 测试不同平台的 API 点、如 APP、微信公众号
- 尝试使用 GET/POST/OPTIONS/PUT/TRACE 等方法
- DOS
    - `limit=999999999`
- 测试该 API 是否支持 SOAP，将内容类型更改为 `application/xml` ，在请求正文中添加简单的 XML，然后查看 API 如何处理它。
---
### 数据篡改
**商品编号更改**
例如积分兑换处,100 个积分只能换商品编号为 001,1000 个积分只能换商品编号 005,在 100 积分换商品的时候抓包把换商品的编号修改为 005,用低积分换区高积分商品.
- 案例:
    - [联想某积分商城支付漏洞再绕过](https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-041617)
**金额数据篡改**
抓包修改金额等字段,例如在支付页面抓取请求中商品的金额字段,修改成任意数额的金额并提交,查看能否以修改后的金额数据完成业务流程.
- 案例:
    - [12308订单支付时的总价未验证漏洞(支付逻辑漏洞)](https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0117083)
    - [UCloud 另一处严重支付逻辑错误 导致可刷余额](https://wy.2k8.org/bug_detail.php?wybug_id=wooyun-2014-048591l)
    - [destoon无限制增加帐号资金](https://woo.zone.ci/bug_detail.php?wybug_id=wooyun-2014-050481)
    - [大疆某处支付逻辑漏洞可1元买无人机](https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0194751)
    - [挖掘网站支付漏洞中突然想到的一个骚思路](https://www.t00ls.net/thread-53256-1-2.html)
    - http://www.0dayhack.net/index.php/634/
    - [当我尝试半价预定特斯拉汽车](https://mp.weixin.qq.com/s/iolYdCb9GX44HJD4inkuQA)
- Tips:
    - 数量改为小数、负数、0
    - 同时购买多个物品,部分商品数量改为负数
**商品数量篡改**
抓包修改商品数量等字段,将请求中的商品数量修改成任意数额,如负数并提交,查看能否以修改后的数量完成业务流程.
- 案例:
    - [百脑汇商城支付漏洞](http://woo.zone.ci/bug_detail.php?wybug_id=wooyun-2012-07997)
---
### 重放攻击
在短信、邮件调用业务或生成业务数据环节中(类:短信验证码,邮件验证码,订单生成,评论提交等),对其业务环节进行调用(重放)测试.如果业务经过调用(重放)后被多次生成有效的业务或数据结果.
**相关文章**
- [刷点赞、刷关注、刷收藏漏洞](https://blog.m1kh.com/index.php/archives/539/)
- [邮箱炸弹及绕过](https://blog.m1kh.com/index.php/archives/324/)
- [SRC另类思路分享：不受限制的资源调用](https://mp.weixin.qq.com/s/wwkAaRauMfIKVERd0-ZCfQ)
**恶意注册**
目标业务注册流程不规范,使用抓包工具抓包可捕获创建用户的请求包,修改发包可以直接注册用户
**短信炸弹**
在测试的过程中,我们发现众多的金融交易平台仅在前端通过 JS 校验时间来控制短信发送按钮,但后台并未对发送做任何限制,导致可通过重放包的方式大量发送恶意短信.
- 案例:
    - [一亩田交易网逻辑漏洞(木桶原理)](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-094545)
    - [短信轰炸之空格或 \n 绕过](https://cloud.tencent.com/developer/article/1541148)
    - [一次有趣的短信轰炸限制绕过](https://web.archive.org/web/20210811054855/https://blog.m1kh.com/index.php/archives/229/)
**内容编辑**
点击"获取短信验证码",并抓取数据包内容,通过分析数据包,可以发现参数的内容有客户端控制,可以修改为攻击者想要发送的内容
- 案例:
    - [Lack of URL normalization renders Blocked-Previews feature ineffectual](https://hackerone.com/reports/1102764)
---
### DoS
**相关文章**
- [Web层面上的那些拒绝服务攻击(DoS)](https://www.sec-in.com/article/445)
**资源生成大小可控**
当遇到请求验证码或二维码请求参数可控时，可以尝试修改图片尺寸参数，例如将原本长宽 20x20 尺寸的请求，改为 2000x2000 查看返回的图片尺寸是否修改.
- 相关文章
    - [验证码大小可控导致的拒绝服务攻击漏洞](https://zhuanlan.zhihu.com/p/41800341)
**Zip 炸弹**
当遇到相应业务允许上传模板文件时，可以尝试上传 zip,当存在自动解压条件时，可通过非递归 zip 炸弹文件耗尽服务器资源.
- 相关文章
    - [ZBLG:非递归zip炸弹，比例为28000000:1](https://bbs.pediy.com/thread-252487.htm)
**Xml DoS**
在 XXE 漏洞中常见的一种攻击方式,当服务端解析 xml文档，通过迭代解析和远程解析巨大文件，造成服务器资源的占用.
- Denial-of-Service
- External Entity
- Internal Entity
**reDOS**
`Regular expression Denial of Service`
实际上开发人员使用了正则表达式来对用户输入的数据进行有效性校验, 当编写校验的正则表达式存在缺陷或者不严谨时, 攻击者可以构造特殊的字符串来大量消耗服务器的系统资源，造成服务器的服务中断或停止。常见的点如注册时检查密码是否包含用户名。
- 正则知识点
    - [regex](../../../Develop/正则/regex.md)
- 相关文章
    - [Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)
    - [ReDOS初探](http://www.lmxspace.com/2019/02/16/ReDOS%E5%88%9D%E6%8E%A2/)
    - [深度分析PCRE回溯次数限制](http://www.lmxspace.com/2019/02/16/ReDOS%E5%88%9D%E6%8E%A2/)
    - [ReDoS-Attacks](https://www.checkmarx.com/wp-content/uploads/2015/03/ReDoS-Attacks.pdf)
**API参数可控**
当查询请求或插入请求参数可控时，一般我们会认为存在数据泄露、批量XXX漏洞，但这里也存在占用服务器资源的利用点，当无法实际越权时，可以尝试加大参数，或缩短时间间隔，耗尽服务器资源。
**Infinite loop**
通过控制参数,让服务器无限循环某个请求处理,从而消耗服务器资源.
- 相关案例
    - [sony infinite loop vulnerability leads to DOS](https://dxploiter.blogspot.com/2017/07/sony-infinite-loop-vulnerability-leads.html)
    - [A Infinite Loop Story.. Note: i have already covered this…](https://medium.com/@D0rkerDevil/a-infinite-loop-story-f2bc05771a88)