高级攻防下的WEBSHELL
About Me
0 1
•"张一臣 BeichenDream;
•"360政企安全-高级攻防实验室-安全研究资深工程师
•"JVM安全研究者
•"哥斯拉作者
目录
CONTENTS
0 1
01
PART"01
流量对抗
02
PART"02
武器化
03
PART"03
内存马
05
PART"05
Agent对抗
06
PART"06
正向代理
07
PART"07
哥斯拉插件扩展
04
PART"04
Java反射绕过
PART.01"
0 2
对抗流量审查
•" 伪装正常业务的流量
为什么要对抗流量审查
0 1
蚁剑
•"防止流量被他人窃取分析
•"不想被人发现异常流量
•"防止被WAF拦截
冰蝎
哥斯拉
三大常用webshell默认流量
将哥斯拉流量扩展成Html之扩展请求包
0 1
不支持扩展的shell不是好shell
扩展时尽量模仿正常业务请求流量
扩展时尽量模仿正常业务返回流量
模仿某搜索引擎流量
1. 截取任意post表单请求数据
2. 选取rsv_t参数作为密码
3. 重新生成一个shell 密码为rsv_t的参数
4. 设置请求追加数据
将哥斯拉流量扩展成Html之扩展返回包
0 1
不支持扩展的shell不是好shell
扩展时尽量模仿正常业务请求流量
扩展时尽量模仿正常业务返回流量
模仿某搜索引擎流量
5. 截取任意页面将shell放入任何位置
将哥斯拉流量扩展成Html之查看扩展成果
0 1
不支持扩展的shell不是好shell
扩展时尽量模仿正常业务请求流量
扩展时尽量模仿正常业务返回流量
模仿某搜索引擎流量
6. 查看成果 它就像是正常的业务流量一样且可以被渲染
将哥斯拉流量扩展成Json之扩展请求包
0 1
不支持扩展的shell不是好shell
扩展时尽量模仿正常业务请求流量
扩展时尽量模仿正常业务返回流量
模仿正常业务Json流量
1. 截取任意json请求数据
2. 生成一个默认的shell
3. 选取数据出现位置 这里选择encrypt参数尾部
4. 设置请求追加数据
将哥斯拉流量扩展成Json之扩展返回包
0 1
不支持扩展的shell不是好shell
扩展时尽量模仿正常业务请求流量
扩展时尽量模仿正常业务返回流量
5.  手动解析encrypt值分离出哥斯拉流量
6.  将Payload的返回值赋值给result->user
7.  将result对象作为json输出
模仿正常业务Json流量
将哥斯拉流量扩展成json之查看扩展成果
0 1
不支持扩展的shell不是好shell
扩展时尽量模仿正常业务请求流量
扩展时尽量模仿正常业务返回流量
9. 查看成果 它就像是正常的业务流量一样且可以被解析
模仿正常业务Json流量
哥斯拉流量扩展之查看扩展成果
0 1
不支持扩展的shell不是好shell
扩展时尽量模仿正常业务请求流量
扩展时尽量模仿正常业务返回流量
PART.02"
0 2
将Webshell武器化
•" Pty
•"内存加载
•" 后渗透
全交互的Pty"shell
0 1
•"Linux下采用python"pty模块
•"Windows"采用Winpty &"shellhost
•"客户端使用jediterm解析Pty数据流
内置多个权限提升模块
0 1
•"BadPotato
• SweetPotato
• EfsPotato
•"由于IIS是服务权限拥有模拟Token权限 所以提权利用使用稳定性比较高的Potato
•"权限提升后哥斯拉会保存高权限token以供后利用做准备
•"权限提升后可直接以高权限账户运行Mimikatz
•"这全过程都是在内存中运行的 没有任何文件落地
•"内存运行技术采用pe_to_shellcode
在内存中运行任意可执行程序
0 1
•"可自定义程序参数
•"支持x86/x64可执行程序
•"可自定义远程进程/pid
提权后一键运行Mimikatz
0 1
•"提权后可一键抓取系统密码
•"提权后可以以高权限执行shellcode
•"直接以高权限用户上线msf/cs
PART.03"
0 2
内存马
•" asp.net(iis)"""虚拟目录与MVC内存马
•" Java"Agent"通用内存马
•" 在仅执行命令情况下获得内存马
asp.net(iis)""内存马
0 1
•"为了获得更完整的控制功能
•"不会在磁盘残留文件
•"可绕过静态查杀
asp.net(iis)""虚拟目录内存马
0 1
•"asp.net在每个请求到达Page"Resource时会执行
HostingEnvironment.VirtualPathProvider.GetCacheKey获取缓存Key
asp.net(iis)""虚拟目录内存马
0 1
•"所以我们可以把HostingEnvironment.VirtualPathProvider
替换成我们自己的实现类 这样每次执行请求都会触发我们的恶意类
asp.net"MVC内存马
0 1
•"刚刚我们讲到了虚拟目录内存马 而在MVC中 如果控制器拦截了所有的请求
就无法触发GetCacheKey方法
•"在.NET3.5以后新增System.Web.Routing.RouteTable.Routes类
里面存放了MVC所有的路由数据每次请求过来会触发GetRouteData方法 我们
可以把我们的路由插到第一位 在 GetRouteData做请求处理
Java通用agent内存马
0 1
• 总所周知Java Agent内存马与操作系统有关
•"在不同JDK中tools库也不同
•"在JDK9以后把库统一并内置在了JDK
•"JDK9以后无法注入agent到自身进程
统一jdk tools GodzillaAgent
0 1
重写Java"tools库
native函数未链接时会抛出异常
利用这个特性可以遍历所有Machine获取到正确的Machine
编写通用内存马
0 1
•"大多数Java"web容器都是使用的标准servlet-api实现
•"servlet-api 有Servlet,Filter, Listener 三大应用组件
•"理论上来说要实现通用的内存马,我们要Hook所有的Servlet,Filter
•"在Tomcat,Weblogic,Jboos,WebSphere,Jetty经过测试完美运行
•"正常访问页面就是正常页面
仅命令执行获取内存马
0 1
1." 从外网下载Godzilla"Agent"Jar包
2." 找到文件上传把Godzilla"Agent传上去
3." 使用bash命令分块写入Godzilla"Agent"Jar包
PART.04"
0 2
Java反射防御机制绕过
•"bypass"jdk16"security"module"
•"bypass"jdk reflection Filter
绕过Java16新增的模块保护
0 1
•" Java16"新增模块保护功能 模块中的类只有在module-info显式导出时才能被其
他模块访问 导致大量不安全的类无法访问
•"不同的模块不能使用反射访问其私有字段以及私有方法 导致我们在jdk16之后
漏洞后利用开发受到大量限制 比如tomcat回显会反射Thread私有字段 在jdk16之
后无法再反射其私有字段
绕过Java16新增的模块保护
0 1
bypass"jdk16"security"module
先获取被反射类的Class模块然后通过Unsafe.objectFieldOffset
获取Class模块在内存的偏移地址
然后使用Unsafe.getAndSetObject方法将当前类的Class模块替
换成被反射类的Class模块 这样就可以反射其模块下所有类
的私有字段以及方法了
绕过Java Reflection Filter
0 1
•"Jdk 12-17"禁用了多个类成员字段 导致我们在编写
漏洞Exp以及后利用时受到限制
jdk.internal.reflect.Reflection
绕过Java Reflection Filter
0 1
由于受到Reflection Filter的限制
我们无法使用反射置空methodFilterMap和fieldFilterMap成员
但是我们可以获取到其class字节码定义一个匿名类
然后获取其字段在内存的偏移
然后使用unsafe"Api置空methodFilterMap和fieldFilterMap成员
PART.05"
0 2
Agent对抗
•" 通过JNI绕过Rasp
•"通过Class重加载绕过Rasp
通过JNI绕过Rasp
0 1
•"自写JNI"native绕过 PASS需要适配系统
•"通过Web容器内置native函数绕过