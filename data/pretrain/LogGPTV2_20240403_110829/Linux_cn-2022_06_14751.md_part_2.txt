```
Lisp 是动态类型语言，这意味着，你在给变量赋值时不需要声明它的类型。Lisp 默认会把整数当作整数来处理：
```
[1]> (setf foo 2)
[2]> (setf bar 3)
[3]> (+ foo bar)
5
```
如果你想让整数被当作字符串来处理，你可以给它加上引号：
```
[4]> (setf foo "2")
"2"
[5]> (setf bar "3")
"3"
[6]> (+ foo bar)
*** - +: "2" is not a number
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [7]>
```
在这个示例 REPL 会话中，变量 `foo` 和 `bar` 都被赋值为加了引号的数字，因此，Lisp 会把它们当作字符串来处理。数学运算符不能够用在字符串上，因此 REPL 进入了调试器模式。想要跳出这个调试器，你需要按下 `Ctrl+D` 才行（LCTT 译注：就 `clisp` 而言，使用 `quit` 关键字也可以退出）。
你可以使用 `typep` 函数对一些对象进行类型检查，它可以测试对象是否为某个特定数据类型。返回值 `T` 和 `NIL` 分别代表 `True` 和 `False`。
```
[4]> (typep foo 'string)
NIL
[5]> (typep foo 'integer)
T
```
`string` 和 `integer` 前面加上了一个单引号（`'`），这是为了防止 Lisp（错误地）把这两个单词当作是变量来求值：
```
[6]> (typep foo string)
*** - SYSTEM::READ-EVAL-PRINT: variable STRING has no value
[...]
```
这是一种保护某些术语（LCTT 译注：类似于字符串转义）的简便方法，正常情况下它是用 `quote` 函数来实现的：
```
[7]> (typep foo (quote string))
NIL
[5]> (typep foo (quote integer))
T
```
### 列表
不出人意料，你当然也可以在 Lisp 中创建列表：
```
[1]> (setf foo (list "hello" "world"))
("hello" "world")
```
你可以使用 `nth` 函数来索引列表：
```
[2]> (nth 0 foo)
"hello"
[3]> (pprint (string-capitalize (nth 1 foo)))
"World"
```
### 退出 REPL
要结束一个 REPL 会话，你需要按下键盘上的 `Ctrl+D`，或者是使用 Lisp 的 `quit` 关键字：
```
[99]> (quit)
$
```
### 编写脚本
Lisp 可以被编译，也可以作为解释型的脚本语言来使用。在你刚开始学习的时候，后者很可能是最容易的方式，特别是当你已经熟悉 Python 或 [Shell 脚本](https://opensource.com/article/20/4/bash-programming-guide) 时。
下面是一个用 Common Lisp 编写的简单的“掷骰子”脚本：
```
#!/usr/bin/clisp
(defun roller (num)  
  (pprint (random (parse-integer (nth 0 num))))
)
(setf userput *args*)
(setf *random-state* (make-random-state t))
(roller userput)
```
脚本的第一行注释（LCTT 译注：称之为“ 释伴   shebang ”）告诉了你的 POSIX 终端，该使用什么可执行文件来运行这个脚本。
`roller` 函数使用 `defun` 函数创建，它在内部使用 `random` 函数来打印一个伪随机数，这个伪随机数严格小于 `num` 列表中下标为 0 的元素。在脚本中，这个 `num` 列表还没有被创建，不过没关系，因为只有当脚本被调用时，函数才会执行。
接下来的那一行，我们把运行脚本时提供的任意参数，都赋值给一个叫做 `userput` 的变量。这个 `userput` 变量是一个列表，当它被传递给 `roller` 函数后，它就会变成参数 `num`。
脚本的倒数第二行产生了一个“随机种子”。这为 Lisp 提供了足够的随机性来生成一个几乎随机的数字。
最后一行调用了自定义的 `roller` 函数，并将 `userput` 列表作为唯一的参数传递给它。
将这个文件保存为 `dice.lisp`，并赋予它可执行权限：
```
$ chmod +x dice.lisp
```
最后，运行它，并给它提供一个数字，以作为它选择随机数的最大值：
```
$ ./dice.lisp 21
13
$ ./dice.lisp 21
7
$ ./dice.lisp 21
20
```
看起来还不错！
你或许注意到，你的模拟骰子有可能会是 0，并且永远达不到你提供给它的最大值参数。换句话说，对于一个 20 面的骰子，这个脚本永远投不出 20（除非你把 0 当作 20）。有一个简单的解决办法，它只需要用到在本文中介绍的知识，你能够想到吗？
### 学习 Lisp
无论你是想将 Lisp 作为个人脚本的实用语言，还是为了助力你的职业生涯，抑或是仅仅作为一个有趣的实验，你都可以去看看一年一度（LCTT 译注：应该是两年一度）的 [Lisp  游戏果酱   Game Jam ](https://itch.io/jam/spring-lisp-game-jam-2021)，从而收获一些特别有创意的用途（其中的大多数提交都是开源的，因此你可以查看代码以从中学习）。
Lisp 是一门有趣而独特的语言，它有着不断增长的开发者用户群、足够悠久的历史和新兴的方言，因此，它有能力让从事各个行业的程序员都满意。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lkxed](https://github.com/lkxed) 译者：[lkxed](https://github.com/lkxed) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出