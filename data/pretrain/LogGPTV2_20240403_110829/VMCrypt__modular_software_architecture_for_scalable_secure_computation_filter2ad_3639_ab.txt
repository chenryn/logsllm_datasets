ately after the server sends the last lookup table, the client
computes the output. The component builds and destructs
parts of its description during the notiﬁcation process, which
we describe in the next section.
Oblivious transfer is not executed before or after the gar-
bling; it is interleaved in the garbling. What makes this
possible is abstract class WireLabelTransport. VMCrypt
provides a server side implementation for this class called
WLTPServer (wire label transport protocol, server side) and
a client side called WLTPClient. The role of the wire label
transport protocol is to guarantee that when the notiﬁer on
the server side receives a segment of wire labels, the notiﬁer
on the client side already has them. This enables the server
to stream lookup tables, knowing that the client will be able
to decrypt them on the ﬂy and discard them immediately.
The obvious implication of this streaming is that no storage
is necessary for either wire labels or lookup tables. This is a
signiﬁcant advantage because the garbled circuit can be very
large. Moreover, time consuming read/write operations are
eliminated, thus reducing running time. A
We brieﬂy sketch the proof of security. The idea is identi-
cal to the classic proof [16]. The simulation begins when the
simulator S sends the evaluator E a garbled circuit with a
random output. Of course, the circuit is sent in chunks, and
OT is interleaved in the garbling. After all OT operations
are over, S learns the input of E. It then queries the ideal
functionality, learns the real output, and sends E a permuta-
tion that maps the random output to the real output. Since
the ideal and the real views of E are computationally indis-
tinguishable, the protocol is secure in the honest but curios
setting.
In the rest of this section we describe the wire label trans-
port protocol parameters, starting with the OT sub protocol.
VMCrypt provides two OT implementations [22, 12], but of
course any OT protocol can be passed as an argument. The
second parameter is an implementation of interface WireLa-
belGenerator. The role of this interface is to provide wire
label pairs for the wire label transport protocol. A stan-
dard implementation of this interface would simply return
two random strings as a WireLabelPair, but VMCrypt im-
plements the ”free XOR” idea [15] and therefore our imple-
mentation of this interface produces a pair ⟨r, r ⊕ R⟩, where
r is a freshly chosen random string, and R is a ﬁxed random
string. To use standard garbling, all that one needs to do is
provide the standard implementation for WireLabelGener-
ator, with the corresponding implementations of Function
for garbling and evaluation, and pass them as arguments to
the respective classes.
The third parameter to the wire label transport protocol is
a class that implements interface CircuitInput. For any i,
this interface provides a method that answers whether wire
i corresponds to a server input or not, and another method
that returns the value on this wire (0 or 1). The wire label
transport protocol uses the CircuitInput interface to ﬁnd
which input wire belongs to which party, and what is the
value of this input. Implementations of CircuitInput play
another important role: if a party has an input that is too
large to hold in memory (e.g., a database), then Circuit-
Input can read it from its origin segment by segment, as
opposed to loading it all at once in the beginning.
To avoid expensive OT per wire, we execute OT in bulk.
However, recall that we interleave OT in the garbling, which
means that we do not know in advance how many (and
which) wire labels require OT. To overcome this, we im-
plement what we call an OT bucket. Speciﬁcally, in the wire
717Component
Garble
Noti(cid:12)er
Component
Eval
Noti(cid:12)er
WireLabelTransfer Protocol (Server)
WireLabelTransfer Protocol (Client)
ComponentInput (Server)
OT (Server) WireLabelGenerator
ComponentInput (Client)
OT (Client)
DB
Server
Client
Figure 1: Overview of main VMCrypt modules
label transport protocol (server side) the OT bucket con-
tains pairs of random strings ⟨rj;0, rj;1⟩, as opposed to wire
label pairs. On the client side it contains one string rj;b per
pair, where b ∈ {0, 1} is the client input at wire index j.
Wire labels are transferred as follows. If ⟨W i;0, W i;1⟩ is a
wire label pair corresponding to a server input b, then W i;b
is sent to the client. Otherwise, ⟨W i;0 ⊕ r0, W i;1 ⊕ r1⟩ is
sent, where ⟨r0, r1⟩ is the pair of masks at the top of the
OT bucket. This works because the wire label transport
protocol examines future segments to ﬁnd what the client
will need when future wires are reached. When the bucket
is empty, the OT protocol is invoked to reﬁll it.
Earlier in this section we described the test tool, which
validates that a component indeed computes the function at
hand. This may not be suﬃcient for debugging, because a
developer may want to see how a signal passes through a
circuit. The developer may also want to collect statistics,
like network traﬃc, or number of gates. To support this,
VMCrypt provides class Monitor, which is a tool for visu-
alizing the execution of VMCrypt modules. The monitor
allows developers to see what is happening inside compo-
nents and protocols in real time. Modules report events by
calling monitor method report. They pass the event itself
and a string that includes values of relevant variables. The
monitor displays the ID of the component with each report.
The ID is a pair of integers (depth,index). When sub com-
ponents are built, they are assigned depth that is one higher
than their enclosing component, and a unique index within
this component. By providing the ID, VMCrypt helps de-
velopers identify which part of the component is reporting.
Events are implemented in classes ComponentEvent and Pro-
tocolEvent. They describe useful information such as when
components build and destruct, or when protocols start and
end. There are currently thirty one events in VMCrypt,
and they can be extended of course. Events also provide
runtime statistics, such as network traﬃc, execution times,
and execution progress.
3. THE COMPONENT MODULE
The component module is the heart of VMCrypt. It has
been redesigned four times from scratch to guarantee that
performance does not depend on circuit topology. We start
with the original design and explain how it evolved to the
current version.
First version. The ﬁrst version of the component mod-
ule was inspired by the minimum function, which plays a
central role in privacy-preserving systems [7, 28, 24, 1]. We
deﬁned two types of components: Gate and Circuit. We
also provided wires to connect them. Our idea was that de-
velopers would be able to construct small circuits, and then
use them as building blocks for larger circuits. For example,
a bit multiplexer (Figure 2 a) would be built in a low-level
manner, from gates and wires. A string multiplexer, on the
other hand, would be built from the bit multiplexer. Next,
a multiplexer and a comparator can be used to build a cir-
cuit for ﬁnding the minimum of two numbers (Figure 2 b),
which is then used to build a circuit for ﬁnding the mini-
mum of N numbers (Figure 2 c). This approach is similar
to programming in C + + in the sense that developers have
both the low-level power of C and the modularity provided
by an object-oriented language. Another advantage of this
approach is that developers can share components or replace
them with better implementations.
To instantiate a circuit for ﬁnding the minimum of N
numbers whose bit length is arity, VMCrypt developers
use the following standard Java syntax: Component c = new
MIN(N, arity). The problem is that, even for modest values
N = 1, 000, 000 and arity = 64, the number of wires needed
to connect the BinaryMIN circuits is 3∗ arity∗ (N − 1) = 194
million wires (excluding wires and gates inside the Bina-
ryMIN). Moreover, wires are implemented as lists (class Vec-
tor in Java) to allow fan out degree higher than 1. Thus, the
memory needed to instantiate the MIN circuit is prohibitive.
The code of this version was used in [8].
Second version. The objective of the second version
was to provide components for wireless circuit design. We
added a new component, called a Switch, that can route
signals to its sub components without wires. The idea is
simple: when the switch receives a signal and a wire index
(called a port), it compares the in-degree of the ﬁrst sub
component with the port. If the port is smaller, then the
sub component receives the signal. Otherwise, the in-degree
is subtracted from the port, and the switch iterates on the
next sub component (of course, like all other mechanisms,
718^
x
y
c
MUX
CMP
BinaryMIN
carry
x y
BinaryMIN
BinaryMIN
(a) BitMUX
(b) BinaryMIN
(c) MIN
Figure 2: Components of the MIN circuit due to [14, 28]
BinaryMIN
BinaryMIN BinaryMIN
BinaryMIN BinaryMIN
Map
Figure 3: The MIN component.
this is automatically taken care of by the component and is
transparent to the developer).
The switch brings up a diﬃcult dilemma that is general to
all the components. That is, should we equip a switch with
output wires or not? Without output wires components will
not be able to connect to each other. With them we create
the same amount of wires that we wanted to eliminate in
the ﬁrst place. Our solution was to replace output wires of
components other than gates with one pointer, and allow
input wires only in circuits. Thus, gates will still be able to
send signals to multiple components, but non-gate compo-
nents will only be able to send signals to one component. In
the rare case where this would be too restrictive, we provide
a Splitter, which enables routing to multiple components.
This dilemma represents a conﬂict between utility, usabil-
ity, and eﬃciency, that predominated throughout the entire
development process.
The other problem with the switch was that routing a
signal requires linear time (as opposed to constant when
using wires). This becomes quadratic per component, and
increases the running time considerably. To solve this prob-
lem we introduced the UniSwitch. This component contains
multiple copies of the same sub component. Thus, it can
route a signal in constant time by dividing the value of the
port by the in-degree of this sub component. The UniSwitch
turned out to be very useful as it enables constructing com-
ponents that mimic a for loop.
Let us use these components to build the MIN component
without wires. As shown in Figure 3, this component has a
BinaryMIN circuit at the root, and a UniSwitch containing
BinaryMIN at each layer, except the base, which is a Switch
containing two sub components: a UniSwitch and a compo-
nent called a Map. The map requires almost no memory as
it contains nothing inside. When it receives input on port i,
it simply outputs it on port m(j), where m is the function
implemented by the map (the identity in this case). The
map is used here to pass the signal one level up in case that
the tree is not perfect. Notice that all the components reside
inside a Switch whose input layer is the base layer.
Having built MIN, let us revisit the java statement Compo-
nent c = new MIN(N, arity), which motivated all the new
components in the second version. This statement no longer
creates millions of wires. However, since all the BinaryMIN
circuits are made of wires and gates, the MIN circuit still
requires an unacceptable amount of memory.
Third version. The third version of the component mod-
ule introduced the Bus. If VMCrypt has one most important
module, the bus would be it. The bus has a very simple
task:
it counts the number of signals leaving the compo-
nent. When this number reaches zero, the bus invokes the
destruct method of the component. This removes the com-
ponent from memory. All VMCrypt components have a bus,
except for gates, which self destruct.
Clearly, there is no point in having a bus if the entire
component resides in memory; the bus has a value only if
components are built after their instantiation. Thus, all
VMCrypt components (except gates) build when they re-
ceive their ﬁrst signal, and destruct immediately when they
output their last signal. We call this the noti(cid:12)cation prin-
ciple. To see the power of this principle, notice that even
when a component is built, its sub components will not be
built until they receive input, and this of course applies re-
cursively. Consequently, VMCrpyt components have a very
lean memory footprint.
Let us see how much memory the MIN component (Fig-
ure 3) requires now. The ﬁrst signal will build the base layer,
which contains two components, but only the UniSwitch will
build because the Map received no signal yet (assuming the
signal comes from the left). Inside the UniSwitch, only the
leftmost BinaryMIN circuit is built because the other ones
received no inputs yet. Because the BinaryMIN is also built
from sub components, only those that receive this signal will
be built, and so on. Eventually, the signal will hit a gate,
who will store it and wait for the other signal (assuming a
binary gate). When this signal arrives, the gate computes,
destructs, notiﬁes its output wire, and the process continues.
When the BinaryMIN ﬁres its last output, it is destructed by
its bus. In the case of a UniSwitch, even the reference to
this object is removed from memory. Hence, the UniSwitch
from the base layer becomes empty. Since each layer notiﬁes
the one above it, the Switch, which contains all these layers,
requires log(N ) references to components of type UniSwitch
that are either empty or contain one BinaryMIN. Notice that
719this is not a ﬂaw in VMCrypt; it is due to the underlying
recursive algorithm we are using. To further improve the
notiﬁcation process we added a Buffer to components of
type Circuit. The buﬀer will build the circuit and ﬂush
only after all signals have arrived. Overall, this reduces the
amount of time components (both inside and outside the
circuit) reside in memory as well as the number of these
components.
The notiﬁcation principle confronted us with the following
problem. Consider the MIN circuit from Figure 2 c. The
BinaryMin circuits (Figure 2 b) that make up this circuit
take a carry bit (either 0 or 1) as input. Thus, the moment
this value becomes available, all of them will be notiﬁed and
hence built. The amount of memory required for this build
is like having the entire MIN circuit in memory, which is
clearly unacceptable. In our component for set intersection