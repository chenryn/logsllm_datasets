    preferred.
  - Use the latest version of the .Net Framework available. At a minimum
    this should be .Net Framework version 4.6. If an older version is
    required, ensure the
    [“SchUseStrongCrypto”](https://technet.microsoft.com/library/security/2960358.aspx#ID0ETHAE)
    regkey is set to enable TLS 1.2 for the application in question.
  - Certificate Validation: Use APIs defined under the
    [System.Security.Cryptography.X509Certificates](https://msdn.microsoft.com/library/system.security.cryptography.x509certificates.aspx)
    namespace.
  - SSL/TLS/DTLS: Use APIs defined under the System.Net namespace (for
    example,
    [HttpWebRequest)](https://msdn.microsoft.com/library/system.net.httpwebrequest.aspx).
## Key Derivation Functions
Key derivation is the process of deriving cryptographic key material
from a shared secret or a existing cryptographic key. Products should
use recommended key derivation functions. Deriving keys from user-chosen
passwords, or hashing passwords for storage in an authentication system
is a special case not covered by this guidance; developers should
consult an expert.
The following standards specify KDF functions recommended for use:
  - NIST SP 800-108: *Recommendation For Key Derivation Using
    Pseudorandom Functions*. In particular, the KDF in counter mode,
    with HMAC as a pseudorandom function
  - NIST SP 800-56A (Revision 2): *Recommendation for Pair-Wise Key
    Establishment Schemes Using Discrete Logarithm Cryptography*. In
    particular, the “Single-Step Key Derivation Function” in Section
    5.8.1 is recommended.
To derive keys from existing keys, use the
[BCryptKeyDerivation](https://msdn.microsoft.com/library/windows/desktop/hh448506\(v=vs.85\).aspx)
API with one of the algorithms:
  - BCRYPT\_SP800108\_CTR\_HMAC\_ALGORITHM
  - BCRYPT\_SP80056A\_CONCAT\_ALGORITHM
To derive keys from a shared secret (the output of a key agreement) use
the
[BCryptDeriveKey](https://msdn.microsoft.com/library/windows/desktop/aa375393\(v=vs.85\).aspx)
API with one of the following algorithms:
  - BCRYPT\_KDF\_SP80056A\_CONCAT
  - BCRYPT\_KDF\_HMAC
## Certificate Validation
Products that use SSL, TLS, or DTLS should fully verify the X.509
certificates of the entities they connect to. This includes verification
of the certificates’:
  - Domain name.
  - Validity dates (both beginning and expiration dates).
  - Revocation status.
  - Usage (for example, “Server Authentication” for servers, “Client
    Authentication” for clients).
  - Trust chain. Certificates should chain to a root certification
    authority (CA) that is trusted by the platform or explicitly
    configured by the administrator.
If any of these verification tests fail, the product should terminate
the connection with the entity.
Clients that trust “self-signed” certificates (for example, a mail
client connecting to an Exchange server in a default configuration) may
ignore certificate verification checks. However, self-signed
certificates do not inherently convey trust, support revocation, or
support key renewal. You should only trust selfsigned certificates if
you have obtained them from another trusted source (for example, a
trusted entity that provides the certificate over an authenticated and
integrity-protected transport).
## Cryptographic Hash Functions
Products should use the SHA-2 family of hash algorithms (SHA256, SHA384,
and SHA512). Truncation of cryptographic hashes for security purposes to
less than 128 bits is not recommended.
### MAC/HMAC/keyed hash algorithms
A message authentication code (MAC) is a piece of information attached
to a message that allows its recipient to verify both the authenticity
of the sender and the integrity of the message using a secret key.
The use of either a hash-based MAC
([HMAC)](https://csrc.nist.gov/publications/nistpubs/800-107-rev1/sp800-107-rev1.pdf)
or [block-cipher-based
MAC](https://csrc.nist.gov/publications/nistpubs/800-38B/SP_800-38B.pdf)
is recommended as long as all underlying hash or symmetric encryption
algorithms are also recommended for use; currently this includes the
HMAC-SHA2 functions (HMAC-SHA256, HMAC-SHA384 and HMAC-SHA512).
Truncation of HMACs to less than 128 bits is not recommended.
## Design and Operational Considerations
  - You should provide a mechanism for replacing cryptographic keys as
    needed. Keys should be replaced once they have reached the end of
    their active lifetime or if the cryptographic key is compromised.
    Whenever you renew a certificate, you should renew it with a new
    key.
  - Products using cryptographic algorithms to protect data should
    include enough metadata along with that content to support migrating
    to different algorithms in the future. This should include the
    algorithm used, key sizes, initialization vectors, and padding
    modes.
      - For more information on Cryptographic Agility, see
        [Cryptographic Agility on
        MSDN.](https://msdn.microsoft.com/magazine/ee321570.aspx)
  - Where available, products should use established, platform-provided
    cryptographic protocols rather than re-implementing them. This
    includes signing formats (e.g. use a standard, existing format).
  - Symmetric stream ciphers such as RC4 should not be used. Instead of
    symmetric stream ciphers, products should use a block cipher,
    specifically AES with a key length of at least 128 bits.
  - Do not report cryptographic operation failures to end-users. When
    returning an error to a remote caller (e.g. web client, or client in
    a client-server scenario), use a generic error message only.
      - Avoid providing any unnecessary information, such as directly
        reporting out-of-range or invalid length errors. Log verbose
        errors on the server only, and only if verbose logging is
        enabled.
  - Additional security review is highly recommended for any design
    incorporating the following:
      - A new protocol that is primarily focused on security (such as an
        authentication or authorization protocol)
      - A new protocol that uses cryptography in a novel or non-standard
        way o Example considerations include:
          - Will a product that implements the protocol call any crypto
            APIs or methods as part of the protocol implementation?
          - Does the protocol depend on any other protocol used for
            authentication or authorization?
          - Will the protocol define storage formats for cryptographic
            elements, such as keys?
  - Self-signed certificates are not recommended for production
    environments. Use of a self-signed certificate, like use of a raw
    cryptographic key, does not inherently provide users or
    administrators any basis for making a trust decision.
      - In contrast, use of a certificate rooted in a trusted
        certificate authority makes clear the basis for relying on the
        associated private key and enables revocation and updates in the
        event of a security failure.
## Encrypting Sensitive Data prior to Storage
_DPAPI/DPAPI-NG_
For data that needs to be persisted across system reboots:
  - CryptProtectData
  - CryptUnprotectData
  - NCryptProtectSecret (Windows 8 CNG DPAPI)
For data that does not need to be persisted across system reboots:
  - CryptProtectMemory
  - CryptUnprotectMemory
For data that needs to be persisted and accessed by multiple domain
accounts and computers:
  - NCryptProtectSecret (in CNG DPAPI, available as of Windows 8)
  - [Microsoft Azure KeyVault
    ](https://azure.microsoft.com/services/key-vault/)
_SQL Server TDE_
You can use SQL Server Transparent Data Encryption (TDE) to protect
sensitive data.
You should use a TDE database encryption key (DEK) that meets the SDL
cryptographic algorithm and key strength requirements. Currently, only
AES\_128, AES\_192 and AES\_256 are recommended; TRIPLE\_DES\_3KEY is
not recommended.
There are some important considerations for using SQL TDE that you
should keep in mind:
  - SQL Server does not support encryption for
    [FILESTREAM](https://technet.microsoft.com/library/gg471497.aspx)
    data, even when TDE is enabled.
  - TDE does not automatically provide encryption for data in transit to
    or from the database; you should also enable encrypted connections
    to the SQL Server database. Please see
    [Enable
    Encrypted Connections to the Database Engine
    (SQL Server Configuration
    Manager)](https://technet.microsoft.com/library/ms191192.aspx)
    for guidance on enabling encrypted connections.
  - If you move a TDE-protected database to a different SQL Server
    instance, you should also move the certificate that protects the TDE
    Data Encryption Key (DEK) and install it in the master database of
    the destination SQL Server instance. Please see the TechNet article
    [Move a TDE
    Protected Database to Another SQL
    Server](https://technet.microsoft.com/library/ff773063.aspx)
    for more details.
_Credential Management_
Use the [Windows Credential Manager
API](https://msdn.microsoft.com/library/windows/desktop/aa374731.aspx#credentials_management_functions)
or [Microsoft Azure
KeyVault](https://azure.microsoft.com/services/key-vault/)
to protect password and credential data.
_Windows Store Apps_
Use the classes in the [Windows.Security.Cryptography](https://msdn.microsoft.com/library/windows/apps/windows.security.cryptography.aspx)
and
[Windows.Security.Cryptography.DataProtection](https://msdn.microsoft.com/library/windows/apps/windows.security.cryptography.dataprotection.aspx)
namespaces to protect secrets and sensitive data.
  - ProtectAsync
  - ProtectStreamAsync
  - UnprotectAsync
  - UnprotectStreamAsync
Use the classes in the
[Windows.Security.Credentials](https://msdn.microsoft.com/library/windows/apps/windows.security.credentials.aspx)
namespace to protect password and credential data.
_.NET_
For data that needs to be persisted across system reboots:
  - ProtectedData.Protect
  - ProtectedData.Unprotect
For data that does not need to be persisted across system reboots:
  - ProtectedMemory.Protect
  - ProtectedMemory.Unprotect
For configuration files, use
either
[RSAProtectedConfigurationProvider](https://msdn.microsoft.com/library/system.configuration.rsaprotectedconfigurationprovider.aspx)
or
[DPAPIProtectedConfigurationProvider](https://msdn.microsoft.com/library/system.configuration.dpapiprotectedconfigurationprovider.aspx)
to protect your configuration, using either RSA encryption or DPAPI,
respectively.
The RSAProtectedConfigurationProvider can be used across multiple
machines in a cluster. See [Encrypting
Configuration Information Using Protected
Configuration](https://msdn.microsoft.com/library/53tyfkaw.aspx)
for more information.