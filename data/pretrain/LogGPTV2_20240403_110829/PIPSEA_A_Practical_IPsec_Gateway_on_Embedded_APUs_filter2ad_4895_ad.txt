load size. Thus, the result shows the maximum throughput
that can be achieved for each algorithm with the embedded
APU. For example, the achievable throughput is up to 13.87
for AES-CBC encryption + HMAC-SHA1 and up to 39.37
Gbps for HMAC-SHA1 with 1280-byte packets.
In all cases, the larger the packet, the higher the through-
put. This is because the OpenCL kernel launch overhead is
relatively small for large packets. For example, the overhead
for 64-byte packets is about 30% of the total AES-CBC en-
cryption processing time. For 1024-byte packets, it is just
7%.
4.2 Performance of PIPSEA
We measure the performance PIPSEA for six combi-
nations of crypto algorithms and various packet sizes in-
cluding 64B, 256B, 512B, 1024B, 1280B, uniform random
lengths(64 ∼ 1280), and IMIX. The six combinations
include AES-CBC+HMAC-SHA1 (ENC/DEC), AES-CBC
(ENC/DEC), and HMAC-SHA1 (ENC/DEC), where ENC
and DEC stand for IPsec encapsulation and decapsulation,
respectively. Each incoming packet has a diﬀerent source
IP address and a diﬀerent destination IP address. Thus,
each packet requires a diﬀerent IPsec crypto algorithm be-
cause its crypto algorithm is determined by its source and
destination IP addresses.
(cid:12)
(cid:86)
(cid:83)
(cid:69)
(cid:42)
(cid:11)
(cid:3)
(cid:87)
(cid:88)
(cid:83)
(cid:75)
(cid:74)
(cid:88)
(cid:82)
(cid:85)
(cid:75)
(cid:55)
(cid:20)(cid:27)
(cid:20)(cid:25)
(cid:20)(cid:23)
(cid:20)(cid:21)
(cid:20)(cid:19)
(cid:27)
(cid:25)
(cid:23)
(cid:21)
(cid:19)
(cid:25)(cid:23)
No(cid:3)sched
(cid:20)(cid:21)(cid:27)(cid:19)
(cid:53)(cid:68)(cid:81)(cid:71)(cid:82)(cid:80)
(cid:44)(cid:48)(cid:44)(cid:59)
(cid:51)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:3)(cid:54)(cid:76)(cid:93)(cid:72)
Group(cid:3)crypto(cid:3)algo
Group(cid:3)crypto(cid:3)algo(cid:3)+(cid:3)len
All
Figure 9: Eﬀects of packet scheduling.
Eﬀects of the packet scheduling algorithm. Figure 9
shows the eﬀect of the proposed packet scheduling tech-
nique. Labels No sched, Group crypto algo, Group crypto
algo + len, and All stand for no packet scheduling, group-
ing only by crypto algorithms into the bins, grouping by
crypto algorithms and packet lengths, and fully applying
the proposed scheduling algorithm including bin sorting, re-
spectively. Packets of the random mix of the six crypto
algorithms is the input, and the granularity of packet length
ranges is 256.
In this evaluation, a chunk of 4096 packets and 64 bins
are used. The chunk size is the number of packets processed
in one OpenCL kernel launch. The chunk size is equal to
the number of total work-items that execute the kernel. In
addition, the number of bins is equal to the number of work-
groups that execute the kernel. Thus, the work-group size
is determined by the chunk size divided by the number of
bins. We vary the size of packets.
For small packets, the packet scheduling eﬀect is not sig-
niﬁcant because load imbalance due to diﬀerent algorithms
is not signiﬁcant. In addition, the packet scheduling over-
head is relatively large compared to the packet processing
time.
The eﬀect of each step in PIPSEA packet scheduling is
apparent for Random and IMIX. For IMIX, the throughput
with the packet scheduling is almost twice bigger than that
without the scheduling. The proposed packet scheduling
algorithm improves the throughput by 1.87 and 1.96 times
for Random and IMIX, respectively.
To see the eﬀectiveness of the bin sorting, we compare
Group crypto algo + len and All in Figure 9. The bin sort-
ing optimization improves the throughput by 1.19 and 1.24
times for Random and IMIX, respectively.
(cid:20)(cid:27)
(cid:20)(cid:25)
(cid:20)(cid:23)
(cid:20)(cid:21)
(cid:20)(cid:19)
(cid:27)
(cid:25)
(cid:23)
(cid:21)
(cid:19)
(cid:12)
(cid:86)
(cid:83)
(cid:69)
(cid:42)
(cid:11)
(cid:3)
(cid:87)
(cid:88)
(cid:83)
(cid:75)
(cid:74)
(cid:88)
(cid:82)
(cid:85)
(cid:75)
(cid:55)
(cid:25)(cid:23)
(cid:20)(cid:21)(cid:27)(cid:19)
(cid:51)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:3)(cid:54)(cid:76)(cid:93)(cid:72)
(cid:53)(cid:68)(cid:81)(cid:71)(cid:82)(cid:80)
(cid:44)(cid:48)(cid:44)(cid:59)
1024(cid:3)Packets(cid:3)(4(cid:3)bins)
2048(cid:3)Packets(cid:3)(8(cid:3)bins)
4096(cid:3)Packets(cid:3)(16(cid:3)bins)
8192(cid:3)Packets(cid:3)(32(cid:3)bins)
1024(cid:3)Packets(cid:3)(8(cid:3)bins)
2048(cid:3)Packets(cid:3)(16(cid:3)bins)
4096(cid:3)Packets(cid:3)(32(cid:3)bins)
8192(cid:3)Packets(cid:3)(64(cid:3)bins)
1024(cid:3)Packets(cid:3)(16(cid:3)bins)
2048(cid:3)Packets(cid:3)(32(cid:3)bins)
4096(cid:3)Packets(cid:3)(64(cid:3)bins)
8192(cid:3)Packets(cid:3)(128(cid:3)bins)
Figure 10: The throughput of PIPSEA with diﬀer-
ent chunk sizes and numbers of bins.
Eﬀects of the tuning parameters. We evaluate PIPSEA
with diﬀerent tuning parameters described in Section 3.6,
such as chunk size and the number of wait bins.
Figure 10 shows the throughput of PIPSEA with diﬀerent
chunk sizes and numbers of bins. A packet is processed
by one of the six IPsec crypto algorithm combinations at
random. The granularity of packet length ranges is 256B.
The experiment is performed with the dual-threaded packet
I/O model described in Section 3 .
For 64- and 1280-byte ﬁxed-length packets, we see that
the throughput is saturated with a chunk of 2048 packets
and 16 bins. With ﬁxed-length packets, since there are vari-
ations only in crypto algorithms, the chunk size is the more
important performance factor than the number of bins.
For both Random and IMIX packets, the throughput is
proportional to the chunk size with a ﬁxed number of bins.
In addition, since the possible number of combinations be-
tween diﬀerent packet length ranges and diﬀerent algorithms
is much bigger than 8 bins, the throughput is very low with
4 and 8 bins. For Random packets, we see that the through-
put is proportional to the number of bins with a ﬁxed chunk
size.
The highest throughput for Random is 14.82 Gbps with
a chunk of 8192 packets and 128 bins. The second highest
for Random is 13.58 Gbps with a chunk of 4096 packets and
64 bins. Thus, we may choose 8192 as the chunk size and
128 as the number of bins for PIPSEA as long as it does not
cause long packet latencies. However, a large chunk size may
1262(cid:12)
(cid:86)
(cid:83)
(cid:69)
(cid:42)
(cid:11)
(cid:3)
(cid:87)
(cid:88)
(cid:83)
(cid:75)
(cid:74)
(cid:88)
(cid:82)
(cid:85)
(cid:75)
(cid:55)
(cid:20)(cid:24)
(cid:20)(cid:19)
(cid:24)
(cid:19)
64
256
512
1536
(cid:25)(cid:23)
ets. These values are smaller than those of AES-CBC+HMAC-
SHA1 with the pre-generated packets stored in main mem-
ory due to the packet I/O overhead and the IPsec header
handling overhead.
In all cases, the throughput of Mix is better than that of
AES-CBC+HMAC-SHA1(ENC) that is the most time con-
suming crypto algorithm combination among the six com-
binations. This is because many crypto algorithms in Mix
compete for the wait bins.
(cid:44)(cid:48)(cid:44)(cid:59)
(cid:20)(cid:21)(cid:27)(cid:19)
(cid:51)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:3)(cid:54)(cid:76)(cid:93)(cid:72)
(cid:53)(cid:68)(cid:81)(cid:71)(cid:82)(cid:80)
Figure 11: Throughput with diﬀerent granularities
of packet length ranges.
lengthen the OpenCL kernel execution time and adversely
aﬀect the latency. Since the average latency of the former
is 5.38ms and that of the latter is 3.92ms, a chunk of 4096
packets and 64 bins is a better option.
Figure 11 shows the eﬀect of the granularity of packet
length ranges. For this evaluation, the input is the random
mix of the six crypto algorithms. The chunk size is 4096,
and the number of bins is 64. We evaluate four diﬀerent
granularities of packet length ranges, 64, 256, 512 and 1536.
The numbers of packet length ranges are 24, 6, 3 and 1 for
the granularities of 64, 256, 512 and 1536, respectively.
For the ﬁxed-length packets, the result shows that the
packet scheduling overhead due to the ﬁne-grained ranges
is negligible.
In addition, coarse-grained ranges adversely
aﬀect the throughput. For Random and IMIX, we see that
too ﬁne-grained or coarse-grained ranges adversely aﬀect the
throughput. For Random, the throughput with the granu-
larity of 64 is much smaller than others because the number
of bins is not enough such ﬁne-grained length ranges. Over-
all, too ﬁne-grained or coarse-grained length ranges are bad
to achieve high throughput.
(cid:21)(cid:24)
(cid:21)(cid:19)
(cid:20)(cid:24)
(cid:20)(cid:19)
(cid:24)
(cid:19)
(cid:12)
(cid:86)
(cid:83)
(cid:69)
(cid:42)
(cid:11)
(cid:3)
(cid:87)
(cid:88)
(cid:83)
(cid:75)
(cid:74)
(cid:88)
(cid:82)
(cid:85)
(cid:75)
(cid:55)
(cid:25)(cid:23)
(cid:21)(cid:24)(cid:25)
(cid:24)(cid:20)(cid:21)
AES(cid:882)CBC+HMAC(cid:882)SHA1(cid:3)(ENC)
AES(cid:882)CBC(cid:3)(ENC)
HMAC(cid:882)SHA1(cid:3)(ENC)
Mix
(cid:20)(cid:19)(cid:21)(cid:23)
(cid:20)(cid:21)(cid:27)(cid:19) (cid:53)(cid:68)(cid:81)(cid:71)(cid:82)(cid:80) (cid:44)(cid:48)(cid:44)(cid:59)
(cid:51)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:3)(cid:54)(cid:76)(cid:93)(cid:72)
AES(cid:882)CBC+HMAC(cid:882)SHA1(cid:3)(DEC)
AES(cid:882)CBC(cid:3)(DEC)
HMAC(cid:882)SHA1(cid:3)(DEC)
Figure 12: Throughput for diﬀerent crypto algo-
rithms.
Throughputs for diﬀerent crypto algorithms. Fig-
ure 12 shows throughputs of diﬀerent crypto algorithms with
a chunk of 4096 packets and 64 bins. In Figure 12, we vary
packet lengths. The bar labeled Mix stands for a random
mix of the six diﬀerent crypto algorithms.
In most of cases, the decapsulation throughput is higher
than the encapsulation throughput because the throughput
is measured over the incoming traﬃc, not outgoing traﬃc.
The throughput of AES-CBC+HMAC-SHA1(ENC) is 3.08
Gbps for 64-byte packets and 11.09 Gbps for 1280-byte pack-
(cid:21)
(cid:20)
(cid:19)
(cid:87)
(cid:88)
(cid:83)
(cid:75)
(cid:74)
(cid:88)
(cid:82)
(cid:85)
(cid:75)
(cid:55)
(cid:71)
(cid:72)
(cid:93)
(cid:76)
(cid:79)
(cid:68)
(cid:80)
(cid:85)
(cid:82)
(cid:49)
(cid:3)
(cid:25)(cid:23)
AES(cid:882)CBC+HMAC(cid:882)SHA1(cid:3)(ENC)
AES(cid:882)CBC(cid:3)(ENC)
HMAC(cid:882)SHA1(cid:3)(ENC)
Mix
(cid:20)(cid:21)(cid:27)(cid:19)
(cid:51)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:3)(cid:54)(cid:76)(cid:93)(cid:72)
(cid:53)(cid:68)(cid:81)(cid:71)(cid:82)(cid:80)
(cid:44)(cid:48)(cid:44)(cid:59)
AES(cid:882)CBC+HMAC(cid:882)SHA1(cid:3)(DEC)
AES(cid:882)CBC(cid:3)(DEC)
HMAC(cid:882)SHA1(cid:3)(DEC)
Figure 13: Comparison of the single-threaded and
dual-threaded packet I/O models.
(cid:41)
(cid:39)
(cid:38)
(cid:20)
(cid:19)(cid:17)(cid:27)
(cid:19)(cid:17)(cid:25)
(cid:19)(cid:17)(cid:23)
(cid:19)(cid:17)(cid:21)