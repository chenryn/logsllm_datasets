### Common Vulnerabilities and Application-Logic Attacks

In our evaluation, we identified several common vulnerabilities, including SQL injection, cross-site scripting (XSS), and Cross-Site Request Forgery (CSRF), as well as application-logic attacks. Despite the limited time available for each website, we discovered severe vulnerabilities such as XSS and SQL Injection in seven out of nine evaluated websites. Additionally, we found HTTP parameter tampering and application-flow vulnerabilities in three out of four webshops, which allowed us to order products and services at arbitrary prices.

These findings clearly refute the hypothesis that attackers with limited resources cannot find vulnerabilities in supposedly secure websites. In our manual analysis, we were able to register on the websites, access authenticated content, and manipulate shopping cart pricesâ€”actions that most automated scanners provided by seal providers do not support. Furthermore, we identified easily discoverable vulnerabilities, such as reflected XSS and a "textbook" SQL injection, in six out of nine websites, which were missed by the seal providers.

One incident highlights the haphazardness of some seal provider certifications. An e-shop, certified as secure by a third-party seal provider, generated an SQL error when we contacted them to request permission for a manual penetration test. The error was caused by a single quote introduced inadvertently in our message (e.g., "don't" instead of "do not").

### Vulnerable Webshop Experiment

To assess the accuracy of seal providers' tools in verifying a website's security, we set up a webshop with several severe vulnerabilities. We used an outdated version of PrestaShop, a popular open-source e-commerce application, and added various vulnerabilities to create a realistic attack surface. The webshop included both well-known vulnerabilities like SQL injection and XSS, as well as less common ones, such as remote JavaScript inclusion from a stale domain and a CSRF issue with OAuth login.

The following twelve vulnerabilities (V1 to V12) were present in our vulnerable web application:

1. **SQL Injection (V1)**: A classic example where a GET parameter was not properly sanitized, allowing execution of user-controlled SQL statements.
2. **SQL Injection - Ajax (V2)**: Similar to V1, but only Ajax requests could be made to this endpoint, requiring JavaScript execution to discover it.
3. **Sensitive Files (V3)**: A `phpinfo.php` file and a `.git` folder were uploaded, disclosing sensitive information.
4. **Stale Remote JavaScript Inclusion (V4)**: A JavaScript file was included from an unregistered domain, which could be registered and used to serve malicious code.
5. **OAuth - CSRF Parameter (V5)**: A "Login with Facebook" link without a state parameter, enabling a CSRF attack.
6. **Malware (V6)**: Each page contained a hidden link to a malicious executable.
7. **Directory Listing (V7)**: A directory storing images allowed listing, including malicious executables.
8. **Reflected XSS (V8)**: A GET parameter was reflected without encoding.
9. **Reflected XSS - Form Action (V9)**: Similar to V8, but the reflection occurred in the form action attribute.
10. **Reflected XSS - Additional Parameter (V10)**: Query parameters were reflected without encoding, but only under specific conditions.
11. **Reflected XSS - JavaScript Context (V11)**: A GET parameter was reflected in a JavaScript string context, allowing injection of arbitrary JavaScript.
12. **DOM-based XSS (V12)**: The URL fragment was written to the document without encoding.

From ten seal providers listed, we were able to purchase seals or get free trials from eight. Two providers required strict business validation, which we did not bypass.

### Seal Provider Performance

Table 3 shows the vulnerabilities detected by each seal provider. All names have been anonymized to focus on the overall coverage rather than individual performance. Notably, all seal providers found fewer than half of the vulnerabilities, with two failing to detect any. Analysis of server logs revealed that these providers primarily used Nmap and Nessus scans, which are insufficient for detecting web application vulnerabilities.

- **V8 and V9** (standard reflected XSS vulnerabilities) were found by most seal providers.
- **V1** (a textbook SQL injection) was detected by only half of the providers.
- **V2** (SQL injection via Ajax) was found only by Seal Providers 6 and 7, who executed JavaScript code.

### Malware Detection

Out of four seal providers claiming to check for malware, only two detected the malware on our webshop. One provider required FTP access to find the malware, indicating incomplete scanning capabilities.

### Comparison with Web Application Scanners

We compared the seal providers' coverage with three popular web application vulnerability scanners: Acunetix, HP WebInspect, and Burp Suite. These scanners, despite their limitations, generally provide better coverage. Table 4 shows the results, with the scanners detecting more vulnerabilities than most seal providers.

- **Acunetix**: 5/11 (45.5%)
- **HP WebInspect**: 5/11 (45.5%)
- **Burp Suite**: 6/11 (54.5%)

### Conclusion

The coverage of security seals is inadequate, even when multiple seals are employed. While some vulnerabilities in our webshop may be considered exotic, they are known to the security community and can be easily detected by automated scanners. The absence of support for these vulnerabilities suggests that automated scanners may struggle with newer, even if simpler, vulnerabilities. Overall, the current state of security seal verification leaves much to be desired.