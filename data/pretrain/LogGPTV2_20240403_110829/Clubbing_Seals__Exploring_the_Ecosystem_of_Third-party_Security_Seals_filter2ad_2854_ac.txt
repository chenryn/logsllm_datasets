several common vulnerabilities, such as SQL injection, cross-
site scripting and CSRF, as well as for application-logic at-
tacks. Despite the limited time available for evaluating each
website, we were able to ﬁnd several severe vulnerabilities,
such as XSS and SQL Injection, for seven out of the nine
evaluated websites. Additionally, we found HTTP param-
eter tampering vulnerabilities, as well as application-ﬂow
vulnerabilities, in three out of the four webshops that we
analyzed, allowing us to order products and services for ar-
bitrary prices.
These results clearly indicate that the hypothesis that at-
tackers with limited resources are unable to ﬁnd vulnerabil-
ities in sealed websites, is false. In our manual analysis, we
could register on the websites under evaluation, access con-
tent that requires authentication, and reason about prices in
shopping carts – actions that are not supported by the auto-
mated scanners of most seal providers. Besides these general
limitations that render seal providers unable to ﬁnd vulner-
abilities which require a series of coherent actions, we also
found easily discoverable vulnerabilities, which were missed
by the seal providers, in six out of nine websites. These
vulnerabilities consist of cross-site scripting vulnerabilities
where a GET or POST parameter was reﬂected without
proper encoding, and even a “textbook” SQL injection.
We also want to mention one incident that demonstrates
the haphazardness of the certiﬁcation of certain seal providers.
In one speciﬁc case, an e-shop, certiﬁed to be secure by a
third-party seal provider, gave us an SQL error while con-
tacting them to ask for permission for a manual penetration
test. When reviewing the case, we realized that we had used
a contraction in our message to the website where we inad-
vertently introduced a single quote, e.g., the phrase “do not”
contracted to “don’t”. The SQL error was generated by that
single quote in the message body.
4.3 Vulnerable Webshop Experiment
Being able to accurately assess the state of security of a
website, is one of the key requirements of a seal provider,
if the seal is to be trusted by consumers. That is, if triv-
ially vulnerable websites can be certiﬁed as secure, then the
certiﬁcation becomes void of meaning. To evaluate the accu-
racy of the tools used by seal providers to verify a website’s
security, we set up a webshop which included a number of se-
vere vulnerabilities. More speciﬁcally, we used an outdated
version of PrestaShop, a popular open source e-commerce
application, which suﬀers from a cross-site scripting vulner-
ability, and expanded the attack surface by including several
other vulnerabilities spanning many typical web application
vulnerability classes.
The vulnerable webshop reﬂects a realistic website con-
taining vulnerabilities we encountered in real-world websites
during our penetration testing. Next to a number of well
known vulnerabilities, such as SQL injection and XSS, we
also included vulnerabilities that are less popular, such as
a remote JavaScript inclusion from a stale domain and a
CSRF issue with OAuth login. In total, the following twelve
vulnerabilities (V1 to V12) were present in our vulnerable
web application:
• SQL Injection (V1): A textbook example of SQL in-
jection. One of the GET parameters was not properly
sanitized and a user-controlled SQL statement could
be executed.
• SQL Injection - Ajax (V2): Similar to V1, but
only Ajax requests were made to this endpoint. Con-
sequently, this endpoint could only be discovered by
executing JavaScript code.
• Sensitive ﬁles (V3): We uploaded a phpinfo.php
ﬁle, which discloses sensitive information of a PHP in-
stallation, and a .git folder, which can leak the con-
tents of several sensitive ﬁles.
• Stale remote JavaScript inclusion (V4): On each
page, a JavaScript ﬁle was included from an unregis-
tered domain. An attacker could register that domain,
and serve malicious JavaScript from it, which would be
executed on all pages of the vulnerable webshop.
• OAuth - CSRF parameter (V5): A “Login with
Facebook” link was added, which points to Facebook’s
OAuth endpoint. This link did not contain a state
parameter, which would allow an attacker to perform a
CSRF attack and make a victim log in as the attacker.
• Malware (V6): Every page of the webshop contained
a link to a malicious executable. This link was made
invisible using CSS in order to prevent infecting casual
visitors of our test website.
• Directory listing (V7): One of the directories that
stored images, allowed directory listing. This directory
also contained malicious executables.
• Reﬂected XSS (V8): A GET parameter on one page
of our web application was reﬂected without any en-
coding.
• Reﬂected XSS - form action (V9): Similar to V8,
but the endpoint was located in the action attribute
of a form element, as opposed to the href attribute of
a link as in V8.
• Reﬂected XSS - additional parameter (V10):
For this vulnerability, the query parameters were re-
ﬂected without encoding. This only happened when
the controller parameter was set to a certain value,
so a GET parameter needed to be added for the dis-
covery of this vulnerability.
• Reﬂected XSS - JavaScript context (V11): In
this case, again a GET parameter was reﬂected in a
page, but the “” characters were properly en-
coded. However, since the parameter was reﬂected in a
JavaScript string context, an attacker could terminate
the string with a quote, which was not escaped, and
inject arbitrary JavaScript code.
923• DOM-based XSS (V12): On several pages, the frag-
ment of the URL (the portion after the # sign in the
URL), was written to the document, without any en-
coding.
From the ten seal providers listed in Table 1, we were
able to purchase seals (or get free trials) from eight of them.
The two missing providers implemented strict checks for the
existence of a valid business which we did not attempt to
bypass.
Table 3 shows the vulnerabilities that were discovered by
each seal provider. The names of the seal providers have
been anonymized, as our study is not meant to promote
one product over another, but rather to show the coverage,
or lack thereof, by all companies. The ﬁrst thing that one
can notice is that all seal providers found less than half of
the vulnerabilities. Even more worrisome is that two seal
providers did not manage to ﬁnd any vulnerabilities. By
analyzing the requests made to our web server, we found
that these seal providers merely ran Nmap and Nessus scans,
which listed open ports and checked for the presence of cer-
tain ﬁles. These scanners are not meant to discover vulnera-
bilities in web applications, thus they are far from suﬃcient
to evaluate the security of a website.
V8 and V9, the two “standard” reﬂected XSS vulnerabil-
ities, were found by the majority of seal providers. Even
though V1 was a textbook example of SQL injection, only
half of the seal providers managed to ﬁnd this vulnerability.
Moreover, only Seal Provider 6 and 7 were able to ﬁnd the
SQL injection vulnerability in the Ajax endpoint (V1). In-
terestingly, these were also the only two seal providers whose
scanners executed the JavaScript code of our web applica-
tion. Since more and more websites rely on JavaScript for
delivering functionality to end users, a lack of support for
JavaScript will certainly limit the number of vulnerabilities
that a vulnerability scanner is able to ﬁnd.
From the four seal providers that claim to check for the
presence of malware, only two managed to ﬁnd the malware
present on our vulnerable web application. Note that we
purposefully uploaded malware that was detected as such
by the vast majority of antivirus engines on VirusTotal, to
ensure that the malicious executables would be ﬂagged by
any proper antivirus product. Interestingly, one of these seal
providers only managed to ﬁnd the malware binary after
they were given FTP access to our server, an optional fea-
ture they provide. The inability to ﬁnd publicly-reachable
malware by browsing our webshop, is another indication that
the security-scan employed by seal providers is incomplete.
Overall, it is clear that the coverage of security seals leaves
much to be desired. Even if a website would employ multiple
security seals, certain classes of vulnerabilities would still
remain fully undetected. While one can argue that some
of the vulnerabilities present in our webshop are of a more
exotic nature, such as V4 and V5, the fact is that these
vulnerabilities are known by the security community, and
can be easily discovered by an automated scanner as long
as the detection logic is present. The absence of support for
them, indicates that automated scanners may have trouble
detecting newer vulnerabilities, even if those are easier to
detect than traditional ones.
Finally, we compared the coverage of the seal providers
with that of three popular web application vulnerability
scanners. Web application vulnerability scanners typically
work in a fully automated way and, despite their shortcom-
Seal provider
Vulnerabilities
Seal Provider 1
Seal Provider 2
Seal Provider 3
Seal Provider 4
Seal Provider 5
Seal Provider 6
Seal Provider 7
Seal Provider 8
Seal Provider 1
Seal Provider 2
Seal Provider 3
Seal Provider 4
Seal Provider 5
Seal Provider 6
Seal Provider 7
Seal Provider 8
V1 V2 V3 V4 V5 V6
–
–
–
–
–
–

–
–
–
–
–
 –
–
  –
  –

 –
N/A
N/A


N/A
–
–
N/A
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
V7
–
–

–
–
–
–
–
–
–
–
V8 V9 V10 V11 V12 Coverage
–
–
–
–
–
–
  –
  –
  –
  –
  
0/11 (00.0%)
0/11 (00.0%)
3/12 (25.0%)
3/12 (25.0%)
3/11 (27.3%)
4/12 (33.3%)
4/12 (33.3%)
5/11 (45.5%)
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
Table 3: Vulnerability detection results. For each
seal provider, the vulnerabilities that were discov-
ered are indicated with a checkmark.
Vulnerability
Scanner
Acunetix
HP WebInspect
Burp Suite
Acunetix
HP WebInspect
Burp Suite
Vulnerabilities
V1 V2 V3 V4 V5 V6
 –
–
 –
–
  –
N/A
N/A
N/A
–
–
–
–
–
–
V7



V8 V9 V10 V11 V12 Coverage
  
  
  
5/11 (45.5%)
5/11 (45.5%)
6/11 (54.5%)
–
–
–
–
–
–
Table 4: Vulnerability detection results for Web Ap-
plication Vulnerability Scanners. For each vulnera-
bility scanner, the vulnerabilities that were discov-
ered are indicated with a checkmark.
ings [7], are a popular option for discovering vulnerabilities
in websites. As Table 4 shows, the coverage of the scanners is
higher than all but one of the tools employed by the security