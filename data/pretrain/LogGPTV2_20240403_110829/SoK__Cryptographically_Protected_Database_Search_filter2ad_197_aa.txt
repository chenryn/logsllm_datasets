title:SoK: Cryptographically Protected Database Search
author:Benjamin Fuller and
Mayank Varia and
Arkady Yerukhimovich and
Emily Shen and
Ariel Hamlin and
Vijay Gadepally and
Richard Shay and
John Darby Mitchell and
Robert K. Cunningham
2017 IEEE Symposium on Security and Privacy
SoK: Cryptographically Protected Database Search
Benjamin Fuller∗, Mayank Varia†, Arkady Yerukhimovich‡, Emily Shen‡, Ariel Hamlin‡,
Vijay Gadepally‡, Richard Shay‡, John Darby Mitchell‡, and Robert K. Cunningham‡
∗University of Connecticut
Email: PI:EMAIL
†Boston University
Email: PI:EMAIL
‡MIT Lincoln Laboratory
Email: {arkady, emily.shen, ariel.hamlin, vijayg, richard.shay, mitchelljd, rkc}@ll.mit.edu
Abstract—Protected database search systems cryptographically
isolate the roles of reading from, writing to, and administering the
database. This separation limits unnecessary administrator access
and protects data in the case of system breaches. Since protected
search was introduced in 2000, the area has grown rapidly;
systems are oﬀered by academia, start-ups, and established
companies.
However, there is no best protected search system or set of
techniques. Design of such systems is a balancing act between
security, functionality, performance, and usability. This challenge
is made more diﬃcult by ongoing database specialization, as
some users will want the functionality of SQL, NoSQL, or
NewSQL databases. This database evolution will continue, and
the protected search community should be able to quickly provide
functionality consistent with newly invented databases.
At the same time, the community must accurately and clearly
characterize the tradeoﬀs between diﬀerent approaches. To ad-
dress these challenges, we provide the following contributions:
1) An identiﬁcation of the important primitive operations
across database paradigms. We ﬁnd there are a small
number of base operations that can be used and combined
to support a large number of database paradigms.
2) An evaluation of the current state of protected search
systems in implementing these base operations. This evalu-
ation describes the main approaches and tradeoﬀs for each
base operation. Furthermore, it puts protected search in
the context of unprotected search, identifying key gaps in
functionality.
3) An analysis of attacks against protected search for diﬀerent
base queries.
4) A roadmap and tools for transforming a protected search
system into a protected database, including an open-source
performance evaluation platform and initial user opinions
of protected search.
Index Terms—searchable symmetric encryption, property pre-
serving encryption, database search, oblivious random access
memory, private information retrieval
I. INTRODUCTION
The importance of collecting, storing, and sharing data is
widely recognized by governments [1], companies [2], [3],
This material is based upon work supported under Air Force Contract
No. FA8721-05-C-0002 and/or FA8702-15-D-0001. Any opinions, ﬁndings,
conclusions or recommendations expressed in this material are those of the
author(s) and do not necessarily reﬂect the views of the U.S. Air Force. The
work of B. Fuller was performed in part while at MIT Lincoln Laboratory.
The work of M. Varia was performed under NSF Grant No. 1414119 and
additionally while a consultant at MIT Lincoln Laboratory.
and individuals [4]. When these are done properly, tremendous
value can be extracted from data, enabling better decisions,
improved health, economic growth, and the creation of entire
industries and capabilities.
Important and sensitive data are stored in database manage-
ment systems (DBMSs), which support ingest, storage, search,
and retrieval, among other functionality. DBMSs are vital to
most businesses and are used for many diﬀerent purposes. We
distinguish between the core database, which provides mecha-
nisms for eﬃciently indexing and searching over dynamic data,
and the DBMS, which is software that accesses data stored in
a database. A database’s primary purpose is eﬃcient storage
and retrieval of data. DBMSs perform many other functions
as well: enforcing data access policies, deﬁning data struc-
tures, providing external applications with strong transaction
guarantees, serving as building blocks in complex applications
(such as visualization and data presentation), replicating data,
integrating disparate data sources, and backing up important
sources. Recently introduced DBMSs also perform analytics
on stored data. We concentrate on the database’s core functions
of data insertion, indexing, and search.
As the scale, value, and centralization of data increase, so
too do security and privacy concerns. There is demonstrated
risk that the data stored in databases will be compromised.
Nation-state actors target other governments’ systems, cor-
porate repositories, and individual data for espionage and
competitive advantages [5]. Criminal groups create and use
underground markets to buy and sell stolen personal informa-
tion [6]. Devastating attacks occur against government [7] and
commercial [8] targets.
Protected database search technology cryptographically
separates the roles of providing, administering, and accessing
data. It reduces the risks of a data breach, since the server(s)
hosting the database can no longer access data contents.
Whereas most traditional databases require the server to be
able to read all data contents in order to perform fast search
and retrieval, protected search technology uses cryptographic
techniques on data that is encrypted or otherwise encoded, so
that the server can quickly answer queries without being able
to read the plaintext data.
© 2017, Benjamin Fuller. Under license to IEEE.
DOI 10.1109/SP.2017.10
172
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
A. Protected Search Systems Today
Protected database search has reached an inﬂection point in
maturity. In 2000, Song, Wagner, and Perrig provided the ﬁrst
scheme with communication proportional to the description
of the query and the server performing (roughly) a linear
scan of the encrypted database [9]. Building on this, the ﬁeld
quickly moved from theoretical interest to the design and
implementation of working systems.
Protected database search solutions encompass a wide vari-
ety of cryptographic techniques, including property-preserving
encryption [10], searchable symmetric encryption [11], private
information retrieval by keyword [12], and techniques from
oblivious random access memory (ORAM) [13]. Like the
cryptographic elements used in their construction, protected
search systems provide provable security based on the hardness
of certain computational problems. Provable security comes
with several other beneﬁts: a rigorous deﬁnition of security,
a thorough description of protocols, and a clear statement of
assumptions.
Many of these systems have been implemented. Protected
search implementations have been tested and found to scale
moderately well, reporting performance results on datasets of
billions of records [14]–[22].
In the commercial space, a number of established and
startup companies oﬀer products with protected search func-
tionality, including Bitglass [23], Ciphercloud [24], Cipher-
Query [25], Crypteron [26], IQrypt [27], Kryptnostic [28],
Google’s Encrypted BigQuery [29], Microsoft’s SQL Server
2016 [30], Azure SQL Database [31], PreVeil [32], Sky-
high [33], StealthMine [34], and ZeroDB [35]. While not
all commercial systems have undergone thorough security
analysis,
their core ideas come from published work. For
this reason, this paper focuses on systems with a published
description.
Designing a protected search system is a balance between
security, functionality, performance, and usability. Security
descriptions focus on the information that
is revealed, or
leaked,
to an attacker with access to the database server.
Functionality is primarily characterized by the query types
that a protected database can answer. Queries are usually
expressed in a standard language such as the structured query
language (SQL). Performance and usability are aﬀected by the
database’s data structures and indexing mechanisms, as well
as required computational and network cost.
There are a wide range of protected database systems that
are appropriate for diﬀerent applications. With such a range
of choices, it is natural to ask: Are there solutions for every
database setting? If so, which solution is best?
B. Our Contribution
The goal of this work is twofold: ﬁrst, to inform protected
search designers on the current and future state of database
technology, enabling focus on techniques that will be useful
in future DBMSs, and second, to help security and database
experts understand the tradeoﬀs between protected search
systems so they can make an informed decision about which
technology, if any, is most appropriate for their setting.
We accomplish these goals with the following contributions:
1) A characterization of database search functionality
in terms of base and combined queries. Traditional
databases eﬃciently answer a small number of queries,
called a basis. Other queries are answered by combining
these basis operations [36]. Protected search systems
have implicitly followed this basis and combination
approach.
Although there are many database paradigms, the num-
ber of distinct bases of operations is small. We advocate
for explicitly adopting this basis and combination ap-
proach.
2) An identiﬁcation of the bases of current protected search
systems and black-box ways to combine basis queries
to achieve richer functionality. We then put protected
search in the context of unprotected search by identify-
ing basis functions currently unaddressed by protected
search systems.
3) An evaluation of current attacks that exploit leakage of
various protected search approaches to learn sensitive
information. This gives a snapshot of the current security
of available base queries.
4) A roadmap and tools for transforming a protected search
system into a protected DBMS capable of deployment.
We present an open-source software package developed
by our team that aids with performance evaluation; our
tool has evaluated protected search at the scale of 10TB
of data. We also present preliminary user opinions of
protected search. Lastly, we summarize systems that
have made the transition to full systems, and we chal-
lenge other designers to think in terms of full DBMS
functionality.
C. Organization
The remainder of
this work is organized as follows:
Section II introduces background on databases and protected
search systems, Section III describes protected search base
queries and leakage attacks against these queries, Section IV
describes techniques for combining base queries and discusses
remaining functionality gaps, Section V shows how to trans-
form from queries to a full system, and Section VI concludes.
II. OVERVIEW OF DATABASE SYSTEMS
The answers to these questions are complex. Protected
search replicates the functionality of some database paradigms,
but the unprotected database landscape is diverse and rapidly
changing. Even for database paradigms with mature protected
search solutions, making an informed choice requires under-
standing the tradeoﬀs.
This section provides background on the databases and
protected search systems that we study in this paper. We
ﬁrst describe unprotected database paradigms and their query
bases. Next we deﬁne the types of users and operations of
a database. We then describe the protected search problem,
including its security goals and the security imperfections
173
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
known as leakage that schemes may exhibit. Finally, we give
examples of common leakage functions found in the literature.
A. Database Deﬁnition and Evolution
A database is a partially-searchable, dynamic data store that
is optimized to respond to targeted queries (e.g., those that
return less than 5% of the total data). Database servers respond
to queries through a well established API. Databases typically
perform search operations in time sublinear in the database
size due to the use of parallel architectures or data structures
such as binary trees and B-trees.
Several styles of database engines have evolved over the past
few decades. Relational or SQL-style databases dominated the
database market from the 1970s to the 1990s. Over the past
decade, there has been a focus on databases systems that sup-
port many sizes of data management workloads [37]. NoSQL
and NewSQL have emerged as new database paradigms,
gaining traction in the database market [38], [39].
1) SQL: Relational databases (often called SQL databases)
typically provide strong transactional guarantees and have
a well known interface. Relational databases are vertically
scalable: they achieve better performance through greater hard-
ware resources. SQL databases comply with ACID (Atomicity,
Consistency, Isolation, and Durability) requirements [40].
2) NoSQL: NoSQL (short for “not only SQL”) databases
emerged in the mid 2000s. NoSQL optimizes the architec-
ture for fast data ingest, ﬂexible data structures, and relaxed
transactional guarantees [41]. These changes were made to ac-
commodate increasing amounts of unstructured data. NoSQL
databases, for the most part, excel at horizontal scaling and
when data models closely align with future computation.
3) NewSQL: NewSQL systems bring together the scalabil-
ity of NoSQL databases and the transactional guarantees of
relational databases [42]. Several NewSQL variants are being
developed, such as in-memory databases that closely resemble
the data models and programming interface of SQL databases,
and array data stores that are optimized for numerical data
analysis.
4) Future Systems: We expect
the proliferation of cus-
tomized engines that are tuned to perform a relatively small
set of operations eﬃciently. While these systems will have
diﬀerent characteristics, we believe that each system will
eﬃciently implement a small set of basis operations. There are
several federated or polystore systems being developed [43]–
[45].
The heterogeneous nature of current and future databases
demands a variety of protected search systems. While provid-
ing such variety is challenging, there are a small number of
base operations that can be combined to provide much of the
functionality of the aforementioned systems.
B. Query Bases
To reduce the space of possible queries that must be
secured, we borrow an approach from developers of software
speciﬁcations and mathematical libraries [46]. In these ﬁelds,
it is common to determine a core set of low-level kernels and
then express other operations using these kernels. Similarly,
many database technologies have a query basis: a small set
of base operations that can be combined to provide complex
search functionality. Furthermore, multiple technologies share
the same query basis. In some cases the basis was not explicit
in the original design but was formalized in later work. Apache
Accumulo’s native API does not have a rigorous mathematical
design, but frameworks such as D4M [47], [48] and Pig [49]
used to manipulate data in Accumulo do.
Leveraging an underlying query basis will allow the pro-
tected search community to keep pace with new database
systems. We discuss three bases found in database systems.
First, relational algebra forms the backbone of many SQL
and NewSQL systems [42]. Second, associative arrays provide
a mathematical basis for SQL, NoSQL, and NewSQL sys-
tems [50]. Third, linear algebraic operations form a basis for
some NewSQL databases. These bases and database paradigms
are summarized in Table I.
1) Relational Algebra: Relational algebra, proposed by
Codd in 1970 as a model for SQL [36], consists of the fol-
lowing primitives: set union, set diﬀerence, Cartesian product