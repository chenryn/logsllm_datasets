    }
由于原作者一开始的出发点是想将编写一个类似命令行的工具的，因此可想而知ProcessImage函数处理逻辑也很简单，只需具备基本的解析功能即可，对比[frameworks/base/libs/hwui/jni/BitmapFactory.cpp:doDecode函数](https://cs.android.com/android/platform/superproject/+/master:frameworks/base/libs/hwui/jni/BitmapFactory.cpp?q=doDecode)，发现ProcessImage的函数核心逻辑差不多都是就是精简的doDecode
  1. 首先通过SkFILEStream::Make获得解析流
  2. 通过SkCodec::MakeFromStream从stream中提取出SkCodec对象指针
  3. 再通过SkAndroidCodec::MakeFromCodec从SkCodec对象指针中提取出SkAndroidCodec对象指针，该指针是具体测试的对象
  4. 通过SkAndroidCodec::getInfo获取图像的基本信息，用于后续数据伪造，伪造图像信息的主函数便是SkImageInfo::Make
  5. 最后测试的函数则是SkAndroidCodec::getAndroidPixels
  6. 如果结果正确则将图像的基本信息写入输出文件
    void ProcessImage() {
      const char *input_file = config::input_file.c_str();
      std::unique_ptr stream = SkFILEStream::Make(input_file);
      if (!stream) {
        printf("[-] Unable to open a stream from file %s\n", input_file);
        return;
      }
      SkCodec::Result result;
      std::unique_ptr c = SkCodec::MakeFromStream(std::move(stream),
                                                           &result);
      if (!c) {
        printf("[-] Failed to create image decoder with message '%s'\n",
               SkCodec::ResultToString(result));
        return;
      }
      std::unique_ptr codec;
      codec = SkAndroidCodec::MakeFromCodec(std::move(c));
      if (!codec) {
        printf("[-] SkAndroidCodec::MakeFromCodec returned null\n");
        return;
      }
      SkImageInfo info = codec->getInfo();
      const int width = info.width();
      const int height = info.height();
      printf("[+] Detected image characteristics:\n"
             "[+] Dimensions:      %d x %d\n"
             "[+] Color type:      %d\n"
             "[+] Alpha type:      %d\n"
             "[+] Bytes per pixel: %d\n",
             width, height, info.colorType(), info.alphaType(),
             info.bytesPerPixel());
      SkColorType decodeColorType = kN32_SkColorType;
      SkBitmap::HeapAllocator defaultAllocator;
      SkBitmap::Allocator* decodeAllocator = &defaultAllocator;
      SkAlphaType alphaType =
          codec->computeOutputAlphaType(/*requireUnpremultiplied=*/false);
      const SkImageInfo decodeInfo =
          SkImageInfo::Make(width, height, decodeColorType, alphaType);
      SkImageInfo bitmapInfo = decodeInfo;
      SkBitmap decodingBitmap;
      if (!decodingBitmap.setInfo(bitmapInfo) ||
          !decodingBitmap.tryAllocPixels(decodeAllocator)) {
        printf("[-] decodingBitmap.setInfo() or decodingBitmap.tryAllocPixels() "
               "failed\n");
        return;
      }
      result = codec->getAndroidPixels(
          decodeInfo, decodingBitmap.getPixels(), decodingBitmap.rowBytes());
      if (result == SkCodec::kSuccess) {
        printf("[+] codec->GetAndroidPixels() completed successfully\n");
        if (!config::output_file.empty()) {
          FILE *f = fopen(config::output_file.c_str(), "w+b");
          if (f != NULL) {
            const size_t bytes_to_write = height * decodingBitmap.rowBytes();
            if (fwrite(decodingBitmap.getPixels(), 1, bytes_to_write, f) !=
                bytes_to_write) {
              printf("[-] Unable to write %zu bytes to the output file\n",
                     bytes_to_write);
            } else {
              printf("[+] Successfully wrote %zu bytes to %s\n",
                     bytes_to_write, config::output_file.c_str());
            }
            fclose(f);
          } else {
            printf("[-] Unable to open output file %s\n",
                   config::output_file.c_str());
          }
        }
      } else {
        printf("[-] codec->GetAndroidPixels() failed with message '%s'\n",
               SkCodec::ResultToString(result));
      }
    }
## 在qemu中使用fork server模式，计算代码覆盖率，初始种子源
这里的原作者为了提高fuzz的效率是用来了forkserver模式，同时patch了afl-qemu模式的elfload文件，在相关函数入口点增加了记录的操作等
在计算代码覆盖率的话则是追踪了PC的覆盖率，可以转换为basicblock的覆盖率
初始种子源则是通过samsung各版本手机上的apk内寻找
## 编写有效的fuzzer
原作者的话最终选择是谷歌的测试架构，猜测是OSS的组件
## 编写exp的过程
原作花了三篇文章去讲述其编写rce exp的过程，主要过程是尝试控制pc指针，构造内存破坏原语，使用MMS触发，绕过ASLR，RCE
接下去的一些分析会需要一些基础，这里的话不再一一累述，有兴趣的同学可以去我的博客上逛下，之后会放一些整理归纳的文章
基础点：
Android堆（ps：在Android11之后就改为Scudo了）  
ASLR  
CFI  
一些漏洞利用技巧
###  选择品相好的bug
这里给出四个有品相较好的bug
  1. 与位图对象(Bitmap)关联的像素存储缓冲区
  2. 临时的输出缓存存储区
  3. 临时的RLE解析缓冲区
  4. 临时的zlib解析缓冲区
原作选择了第一个，理由有两点
  1. 它是第一个malloc溢出部分（后面跟着的是RLE等对象），所以它可以做到最大范围破坏随后分配的对象
  2. 它的size是受控的
这里举一个例子，针对1120字节大小缓冲区溢出（40 x 7 x
4)，破坏后面三个缓冲区。第一个（104字节）是位图结构，第二个（24字节）是RLE压缩的输入流，第三个（4120字节）是RLE解码器上下文结构。
这里看来从Bitmap的溢出漏洞出发去写exp是很比较好的思路
    [...]
    [+] Detected image characteristics:
    [+] Dimensions:      40 x 7
    [+] Color type:      4
    [+] Alpha type:      3
    [+] Bytes per pixel: 4
    malloc(      1120) = {0x408c13bba0 .. 0x408c13c000}
    malloc(       104) = {0x408c13df98 .. 0x408c13e000}
    malloc(        24) = {0x408c13ffe8 .. 0x408c140000}
    malloc(      4120) = {0x408c141fe8 .. 0x408c143000}
    ASAN:SIGSEGV
    =================================================================
    ==3746114==ERROR: AddressSanitizer: SEGV on unknown address 0x408c13c000 (pc 0x40071feb74 sp 0x4000d0b1f0 bp 0x4000d0b1f0 T0)
        #0 0x00249b74 in libhwui.so (QuramQmageGrayIndexRleDecode+0xd8)
        #1 0x002309d8 in libhwui.so (PVcodecDecoderIndex+0x110)
        #2 0x00230854 in libhwui.so (__QM_WCodec_decode+0xe4)
        #3 0x00230544 in libhwui.so (Qmage_WDecodeFrame_Low+0x198)
        #4 0x0022c604 in libhwui.so (QuramQmageDecodeFrame+0x78)
    [...]
确定使用Bitmap对象后，就需要查看与其相关的内存分配操作，其实说白了就是监控那些内存操作查看其是否会触发到Bitmap域内的函数，这里使用Frida脚本去hook堆相关的函数，并用堆栈跟踪记录所有这些调用
    [10036] calloc(1120, 1) => 0x7bc1e95900
        0x7cbba83684 libhwui.so!android::Bitmap::allocateHeapBitmap+0x34
        0x7cbba88b54 libhwui.so!android::Bitmap::allocateHeapBitmap+0x9c
        0x7cbd827178 libandroid_runtime.so!HeapAllocator::allocPixelRef+0x28
        0x7cbbd1ae80 libhwui.so!SkBitmap::tryAllocPixels+0x50
        0x7cbd820ae8 libandroid_runtime.so!0x187ae8
        0x7cbd81fc8c libandroid_runtime.so!0x186c8c
        0x70a04ff0 boot-framework.oat!0x2bbff0
    [10036] malloc(160) => 0x7b8cd569e0
        0x7cbddd35c4 libc++.so!operator new+0x24
        0x7cbe67e608
    [10036] malloc(24) => 0x7b8ca92580
        0x7cbb87baf4 libhwui.so!QuramQmageGrayIndexRleDecode+0x58
        0x7cbe67e608
    [10036] calloc(1, 4120) => 0x7bc202c000
        0x7cbb89fb14 libhwui.so!init_process_run_dec+0x20
        0x7cbb87bb34 libhwui.so!QuramQmageGrayIndexRleDecode+0x98
        0x7cbb8629d4 libhwui.so!PVcodecDecoderIndex+0x10c
        0x7cbb862850 libhwui.so!__QM_WCodec_decode+0xe0
        0x7cbb862540 libhwui.so!Qmage_WDecodeFrame_Low+0x194
        0x7cbb85e600 libhwui.so!QuramQmageDecodeFrame+0x74
可以看到这里的calloc函数就可溯源到android::Bitmap::allocateHeapBitmap函数，然后通过对比[开源代码](https://cs.android.com/android/platform/superproject/+/master:frameworks/base/libs/hwui/hwui/Bitmap.cpp;drc=master;l=116)中的调用这个函数时各个变量含义和IDA中这个函数的反汇编代码基本上可以理清这个函数底层的具体操作
    sk_sp Bitmap::allocateHeapBitmap(size_t size, const SkImageInfo& info, size_t rowBytes) {
        void* addr = calloc(size, 1);
        if (!addr) {
            return nullptr;
        }
        return sk_sp(new Bitmap(addr, size, info, rowBytes));
    }
    __int64 __usercall android::Bitmap::allocateHeapBitmap@(android::Bitmap *this@, const SkImageInfo *a2@, __int64 a3@, __int64 *a4@)
    {
      __int64 v4; // x21
      const SkImageInfo *SkImageInfoUnit; // x23
      android::Bitmap *v6; // x20
      __int64 *v7; // x19
      __int64 result; // x0
      __int64 addr; // x22
      __int64 bitmap; // x0
      __int64 v11; // x8
      __int64 bitmap_1; // x24