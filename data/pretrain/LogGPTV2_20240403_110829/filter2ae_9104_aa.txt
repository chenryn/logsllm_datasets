原文：http://d3adend.org/blog/?p=851 ， 本篇翻译自原文前部分，本文有增改
原作者： **Neil Bergman**
译： **Holic (知道创宇404安全实验室)**
译者测试环境：Maxthon 4.5.6，Android 5.1.1 / Android 4.2.2
* * *
[Maxthon
Browser（傲游浏览器）](https://play.google.com/store/apps/details?id=com.mx.browser&hl=en)
又是一个当下比较流行的 Android 浏览器，未使用Android 的 stock 浏览器（AOSP）。我在 Android
版的浏览器中发现了一些有趣的甚至有些严重的漏洞，可能导致远程代码执行和信息泄漏。
漏洞要点：
  * 暴露的 JavaScript 接口导致任意文件写入 - 恶意网页可以强制浏览器下载zip文件，浏览器将其放在 SD 卡上，然后通过调用带有 URL 参数的`installWebApp`方法解压缩。由于缺少对 zip 文件所包含的文件名进行输入验证，攻击者可以制作一个恶意的 zip 文件，造成路径穿越来覆盖浏览器沙盒中的任意文件。这个漏洞能被用来实现远程代码执行，相关内容我将在后面演示。
  * 登录页面暴露的 JavaScript 接口可以进行 UXSS 攻击 - 恶意网页可以通过调用 `catchform` 方法更改与其他域关联的自动填充登录页面表单数据。使用一些动态构建的 JS 代码，将自动登录信息注入到登录页面，而且浏览器没有正确输出编码数据，因此我们可以利用这一点开展登录页面的 UXSS 攻击。
  * 暴露的 JavaScript 接口允许将 SQL 语句注入到客户端的 SQLite 数据库 - 设计为保存自动填充表单信息的代码也易受 SQL 注入攻击。它可能破坏客户端数据库或者远程提取自动填充表中所有信息，包括保存的登录凭据。虽然我能够找到一些在 Android 应用程序中由 IPC 触发的客户端 SQL 注入漏洞的例子（例如来自Dominic Chell的此类[漏洞](https://www.mdsec.co.uk/2015/11/sql-injection-in-samsung-voice-framework-application/)），和一个由来自 Baidu X-Team [WAP 推送](https://www.exploit-db.com/exploits/35382/)触发的客户端 SQL 注入的例子。我目前找不到有关在 Android 平台从 SQLite 远程窃取数据的公开实例。因此，这可能是针对 Android 应用程序的远程客户端 SQL 注入的第一个公开实例，其中可以使用登录页面， UXSS exploit 作为外部通信技术将数据从 SQLite 数据库中窃取出来。如果有其他有趣的例子，请 Ping 我。
### JS 接口攻击面
傲游浏览器使用
[addJavascriptInterface](https://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface\(java.lang.Object,
java.lang.String\)) 方法将多个 Java 对象注入到加载网页的 Webview
中。在旧的设备（系统版本低于4.2）上，可以轻而易举地远程执行代码，参照：[gain RCE by abusing
reflection(pix)](http://d3adend.org/blog/?p=314)。在新的设备上，我们必须探索与 JS
接口相关的每个暴露的方法，来寻找可能被利用的有趣功能。
这个应用程序的 JS 接口攻击面很大，这使我们的工作变得更简单或者更难，就取决于你如何看待这个问题了。请考虑以下真实情况：所有的 Java 方法都通过
傲游浏览器暴露给网页中不受信任的 JS 代码。
**译者注：** _我们在逆向 Android
程序的时候，比如此例是浏览器应用，我们可以先在逆向工具中搜索一些敏感的方法/函数，像`jsCall`这种会涉及到与 js
交互断点方法，`getContent` 这种与文件内容有交互的方法等。_
_在 JEB 中，善用其强大的反编译和搜索功能：_
  * com.mx.jsobject.AppcenterLocalImpl
  * Methods: jsCall
  * com.mx.browser.navigation.reader.ca
  * Methods: getContent
  * com.mx.jsobject.JsObjAppcenter
  * Methods: jsCall
  * com.mx.jsobject.JsObjAutoFill
  * Methods: catchform, enableAutoFill, getLoginButtonSignatureCodes, getNonLoginButtonSignatureCodes, * getNonUsernameSignatureCodes, getTest, getUsernameSignatureCodes
  * com.mx.jsobject.JsObjGuestSignIn
  * Methods: getPostUrl, signin
  * com.mx.jsobject.JsObjMxBrowser
  * Methods: addLauncherShortcut, getAndroidId, getChannelId, getCountry, getDeviceId, getDeviceType, * getEncodedDeviceCloudId, getLanguage, getMxLang, getObjectName, getPlatformCode, getSysReleaseVersion, * getVersionCode, getVersionName, installWebApp, isAutoLoadImage, isSupportTimeLine, shareMsgToWXTimeLine, * shareToAll, shareToSinaWeibo, shareToSinaWeibo, shareToWXTimeLine, shareToWeChatTimeLine
  * com.mx.jsobject.JsObjNextPage
  * Methods: notifyFoundNextPage
  * com.mx.browser.readmode.JsObjReadDetect
  * Methods: notifyReadModeSuccess
  * com.mx.browser.readmode.JsObjReadNext
  * Methods: notifyReadModeFail, notifyReadModeSuccess
  * com.mx.jsobject.JsObjShareHelper
  * Methods: shareTo
  * com.mx.jsobject.JsTouchIconExtractor
  * Methods: onReceivedTouchIcons
  * com.mx.browser.readmode.ReadModeActivity$JsObjReadHtml
  * Methods: changeColorMode, getHtml, notifyFontSizeChanged, pageDown
  * com.mx.browser.navigation.reader. RssNewsReaderActivityJsObjRssReader
  * Methods: getAuthor, getContent, getObjectName, getSource, getTime, getTitle, loadImage, openImageBrowser
  * com.mx.browser.navigation.reader. RssNewsReaderActivityJsObjRssReader
  * Methods: getAuthor, getContent, getSouce, getTime, getTitle 
### 寻找任意文件写入漏洞
在反编译代码中查看了很多暴露的方法，我看到了一个叫 `installWebApp` 的方法。
        @JavascriptInterface public void installWebApp(String arg4) {
            String v0 = t.a(arg4);
            p.a(arg4, "/sdcard/webapp/" + v0, null);
            u.b("/sdcard/webapp/" + v0);
            d.b().a();
            Toast.makeText(this.mContext, "webapp installed", 1).show();
        }
然后我继续审计由 `installWebApp` 方法调用的所有方法的反编译代码。
1） `com.mx.c.t` 的一个方法是将 URL 转换为文件名。比如，如果你向该方法中提供
`http://www.example.org/blah.zip`，则它返回 `blah.zip`。 2） `com.mx.browser.f.p` 的
`a` 方法使用 Apache HttpClient 下载所提供的 URL，然后使用所提供的文件名（`/sdcard/webapp/[zip
filename]`）保存该文件。 3） `com.mx.c.u` 的 `b` 方法使用
[ZipFile](https://developer.android.com/reference/java/util/zip/ZipFile.html)和[ZipEntry](https://developer.android.com/reference/java/util/zip/ZipEntry.html)解压
SD 卡上的文件，相关类的代码如下所示。注意 zip 没有针对每条文件名的输入验证。
        public static void b(String arg8) {
            File v4;
            Object v0_2;
            try {
                File v0_1 = new File(arg8);
                String v1 = arg8.substring(0, arg8.length() - 4);
                new File(v1).mkdir();
                System.out.println(v1 + " created");
                ZipFile v2 = new ZipFile(v0_1);
                Enumeration v3 = v2.entries();
                do {
                label_20:
                    if(!v3.hasMoreElements()) {
                        return;
                    }
                    v0_2 = v3.nextElement();
                    v4 = new File(v1, ((ZipEntry)v0_2).getName());
                    v4.getParentFile().mkdirs();
                }
                while(((ZipEntry)v0_2).isDirectory());
                System.out.println("Extracting " + v4);
                BufferedInputStream v5 = new BufferedInputStream(v2.getInputStream(((ZipEntry)v0_2)));
                byte[] v0_3 = new byte[1024];
                BufferedOutputStream v4_1 = new BufferedOutputStream(new FileOutputStream(v4), 1024);
                while(true) {
                    int v6 = v5.read(v0_3, 0, 1024);
                    if(v6 == -1) {
                        break;
                    }
                    v4_1.write(v0_3, 0, v6);
                }
                v4_1.flush();