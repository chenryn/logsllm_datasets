describe the parameter c in detail in Section 9.
We can divide the a(cid:138)ack results in each round into four cases
as shown in Fig. 1. In the (cid:128)rst case, the a(cid:138)acker earns a reward
through innocent mining. Because she as an innocent miner should
compete with others who have total computational power 1 − τ α,
the probability of the (cid:128)rst case is (1−τ)α
. In the second case, the
1−τ α
pool propagates an FPoW found by an honest miner in the pool,
with a probability of
. In the third case, when a valid block
is found by an external honest miner (neither the a(cid:138)acker nor
someone within the target pool), the a(cid:138)acker can generate a fork
through the pool if she found and withheld an FPoW in advance.
(cid:140)e probability is τ α · 1−α−β
. (cid:140)e (cid:128)nal case occurs when a valid
1−τ α
block is found by an external honest miner, but the a(cid:138)acker has
not found and withheld an FPoW. (cid:140)e probability of this case is
1− α − β. As expected, the total probability of these four cases sums
to 1. (cid:140)en, we can derive the FAW a(cid:138)acker’s reward as follows.
β
1−τ α
Theorem 5.1. An FAW a(cid:136)acker can earn
Ra(τ) =
+ cτ α · 1 − α − β
1 − τ α
(1 − τ)α
1 − τ α
+
β
1 − τ α
·
τ α
β + τ α
.
(1)
(cid:18)
(cid:19)
(cid:138)e reward is maximized when the optimal τ value, τ , is
(1−α)(1−c)β +β 2c−β
√(1−α−β)2c2+((1−α−β)(α β +α−2))c−α(1+β)+1
α(1−α−β)(c(1−β)−1)
(2)
Proof Sketch. Because an a(cid:138)acker works as both an innocent
and in(cid:128)ltration miner, she is rewarded in both roles. Her reward
from innocent mining is
(1 − τ)α
1 − τ α
(case A in Fig. 1). To derive her reward from in(cid:128)ltration mining,
we (cid:128)rst describe the reward for the pool to which the in(cid:128)ltration
2Network capability has been used in previous work [18, 19], but γ in those works is
slightly di(cid:130)erent from c.
∂Ra
∂γ
=
α 2β 2 + (((2α 2 − 2α 3)β − 2α 2β 2)c + (2α 3 − 2α 2)β)γ + ((α 3 − α 4 + (α 4 − 2α 3)β + α 3β 2)c + α 3β + α 4 − α 3)γ 2
α 4γ 4 + (2α 4β − 2α 3)γ 3 + (α 2 − 4α 2β + α 2β 2)γ 2 + (2α β − 2α β 2)γ + β 2
(3)
= 0
of τ is chosen. Furthermore, Ra is an increasing function of c. As a
result, an FAW a(cid:138)ack produces an extra reward regardless of the
a(cid:138)acker’s computational power, as in the BWH a(cid:138)ack.
(cid:3)
(cid:140)eorem 5.2 states as mentioned intuitively in Section 4.1 that
the FAW a(cid:138)ack is at least as pro(cid:128)table as the BWH a(cid:138)ack. Note that
τ depends on a constant c, related to network topology [6, 28]. To
maximize reward, an a(cid:138)acker must know the value of c. For now,
we assume that c is given to the a(cid:138)acker, but learning c is not easy
in practice. Nevertheless, we show in Section 9 that the FAW a(cid:138)ack
still improves upon the BWH a(cid:138)ack even when c is unknown.
Next, our focus moves to the target pool’s loss. (cid:140)rough the
following theorem, it is shown that the target pool’s reward a(cid:137)er
the FAW a(cid:138)ack is always smaller than that it would be without,
though incentives do exist for the target pool manager to propagate
the FPoW found by the a(cid:138)acker’s in(cid:128)ltration mining even if he
notices the FPoW is stale.
Theorem 5.3. (cid:138)e reward for the target pool is Rp =
+
1−α−β
1−τ α , and this is always less than β + τ α, which is the target
cτ α
pool’s reward without the FAW a(cid:136)ack. Additionally, reward Rp is an
increasing function of c.
β
1−τ α
Figure 1: Four cases of FAW attack results against one pool.
A (cid:135)e attacker (cid:128)nds an FPoW through innocent mining, B
a miner other than the attacker in the target pool (cid:128)nds an
FPoW, C the attacker (cid:128)nds an FPoW in the target pool and
generates a fork, and D someone else (cid:128)nds an FPoW, but she
does not. Blocks found by an attacker are displayed in dark
gray. (cid:135)e attacker can earn rewards in cases A , B , and C .
miner belongs. (cid:140)e pool can earn a pro(cid:128)t in two cases: when an
honest miner in the pool generates an FPoW (case B ), and when
the a(cid:138)acker successfully generates a fork and her FPoW is selected
as the main chain (case C ). In case B , the pool earns the reward
through
β
1−τ α
the fork generated by the a(cid:138)acker. (cid:140)erefore, the pool can earn the
reward
. In case C , the reward for the pool is cτ α · 1−α−β
1−τ α
β
1 − τ α
+ cτ α · 1 − α − β
1 − τ α
.
τ α
β +τ α
(cid:140)en the pool manager pays a reward proportional to the at-
tacker’s submi(cid:138)ed (both full and partial) PoWs, and the a(cid:138)acker’s
estimated contribution from the pool manager is
. As a re-
sult, the a(cid:138)acker’s reward Ra can be expressed with Eq. (1). (cid:140)e
a(cid:138)acker’s reward Ra is a function of τ, and we can (cid:128)nd the value
of τ that maximizes Ra by solving Eq. (3). We call this value of τ as
τ. Finally, τ is expressed in Eq. (2).
(cid:3)
According to the theorem above, an a(cid:138)acker should distribute
her in(cid:128)ltration mining power as an optimal portion τ of her total
power to earn the maximum reward. Additionally, an FAW a(cid:138)ack
with optimal τ satis(cid:128)es the following theorem.
Theorem 5.2. An FAW a(cid:136)ack is always more pro(cid:128)table than hon-
est mining, and the reward from an FAW a(cid:136)ack has a lower bound
de(cid:128)ned by the reward from a BWH a(cid:136)ack.
Proof Sketch. We show that the a(cid:138)acker’s reward, Ra(τ), is
always greater than the honest miner’s reward α. First, the reward
Ra when c = 0 is equal to the reward from the BWH a(cid:138)ack since a
case where the FAW a(cid:138)acker receives zero reward due to a fork is
equivalent to the BWH a(cid:138)ack. Luu et al. [24] proved that the BWH
a(cid:138)acker’s reward can always be larger than α when a proper value
Proof Sketch. (cid:140)e target pool earns the reward
β
1−τ α
in case B
and cτ α
1−α−β
1−τ α
in case C . (cid:140)erefore, Rp can be expressed as
β
1 − τ α
+ cτ α
1 − α − β
1 − τ α
,
and Rp is a linear function of c with positive coe(cid:129)cient. (cid:140)is means
that Rp is an increasing function of c. Finally, we show that Rp is
always less than β + τ α.
β
+ cτ α
1 − α − β
1 − τ α
Rp =
1 − α − β
≤
1 − τ α
< β + τ α when 0 ≤ τ < 1
1 − τ α
1 − τ α
+ τ α
β
when c = 1
⇐⇒ β + τ α(1 − α − β) < (β + τ α)(1 − τ α)
⇐⇒ β + τ α − τ α
⇐⇒ τ
2
2
< τ α
α
⇐⇒ τ < 1
2 − τ α β < β − βτ α + τ α − τ
2
2
2
α
Because τ is less than 1, Rp is always less than β + τ α.
(cid:3)
Note that the target pool’s loss decreases as c increases. (cid:140)ere-
fore, the pool manager should try to increase c to reduce loss. (cid:140)us,
he should propagate his FPoWs as fast as he can, which incidentally
also increases the a(cid:138)acker’s extra reward (Ra in Eq. (1)).
5.2 (cid:134)antitative Analysis
In this section we consider a speci(cid:128)c case: an a(cid:138)acker with com-
putational power 0.2, who executes an FAW a(cid:138)ack against one
pool. We de(cid:128)ne the relative extra reward (RER) gained with respect
to the reward Rh of an honest miner, which is equivalent to his
computational power. (cid:140)e RER R
as
(cid:48)
a of an a(cid:138)acker can be expressed
In the same manner, the RER of the target pool is
R
(cid:48)
a = Ra − Rh
Rp − Rh
Rh
.
.
(cid:48)
p =
R
Rh
(A negative value indicates a loss.) Figs. 2a and 2b show the RER
of the a(cid:138)acker and a victim pool, respectively, given terms c and β
when the a(cid:138)acker’s computational power α is 0.2.
(cid:48)
a, ac-
(a) (cid:135)e RER (%) of an attacker, R
cording to target pool size β and net-
work capability c when the attacker’s
computational power α is 0.2.
Figure 2: (cid:134)antitative analysis results for the FAW attack
against one pool. When c increases, attacker’s reward in-
creases and the target pool’s loss decreases.
(cid:48)
(b) (cid:135)e RER (%) of a target pool, R
p ,
according to β and c when the at-
tacker’s computational power α is 0.2.
Negative RER means loss.
Fig. 2a demonstrates that an a(cid:138)acker can earn an extra reward
regardless of c or the target pool size β. (cid:140)erefore, an a(cid:138)acker
should always run the FAW a(cid:138)ack to increase her own reward.
Moreover, increasing c provides an even greater extra reward. As
noted previously, when c is zero, the RERs for BWH and FAW
a(cid:138)acks are the same. (cid:140)erefore, the extra reward for the FAW
a(cid:138)acker is always lower bounded by that for the BWH a(cid:138)acker.
(cid:140)us, the FAW a(cid:138)ack improves on the BWH a(cid:138)ack in all cases.
Conversely, Fig. 2b con(cid:128)rms that a target pool always su(cid:130)ers
a loss in the presence of an a(cid:138)acker. (A negative extra reward
indicates a loss.) However, the loss of the target pool decreases as
the value of c increases because when the FPoW generated by an
a(cid:138)acker in the target pool is selected as the main chain, the target
pool also earns a reward for the block.
5.3 Simulation Results
To verify the theoretical analysis developed, we simulated an FAW
a(cid:138)ack against one pool with a computational power of 0.2, using
a Monte Carlo method over 109 rounds, with an upper bound of
10−4 for error. Table 1 shows the a(cid:138)acker’s RER (%) according to
her computational power α and c when β is 0.2. She can always
earn the extra reward by executing the FAW a(cid:138)ack, and her extra
reward is equal to or greater than that for the BWH a(cid:138)acker.
6 FAW ATTACK AGAINST MULTIPLE POOLS
An a(cid:138)acker should maximize her reward by targeting n pools simul-
taneously. She distributes her in(cid:128)ltration power among n pools and
can (cid:128)nd at most n FPoWs, one for each of n di(cid:130)erent pools within a
Table 1: (cid:135)e RER (%) of an attacker when target pool size β is
0.2. (cid:135)e value a (b) gives RERs based on theoretical analysis
and simulation, respectively.
α
c
0
0.25
0.5
0.75
1
0.1
0.2
0.3
0.4
0.53 (0.53)
0.65 (0.67)
0.85 (0.85)
1.21 (1.22)
2.12 (2.12)
1.14 (1.14)
1.38 (1.38)
1.74 (1.74)
2.37 (2.37)