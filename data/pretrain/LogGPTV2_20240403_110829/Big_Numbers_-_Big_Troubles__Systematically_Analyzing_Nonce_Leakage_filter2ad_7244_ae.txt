exploitable. For example, the curve secp128r1 has cardinality
0xFFFFFFFD FFFFFFFE F80091C8 184ED68C. By using
Equation (14), an attacker could learn L = 31 nonce bits at
once. However, only every 231th signature will be vulnerable,
which renders actual attacks impractical.
Fixing this issue for ECDSA is analogous to DSA.9 Al-
though LibreSSL adopted the patch,10 our tool still reported
leakage. Further analysis revealed that the patched LibreSSL
version uses k-padding twice, once correctly during multi-
plication ec_GFp_simple_mul_ct and a second time inside
ecdsa_sign_setup. The second k-padding was not only un-
patched, leading to another instance of (V2), it even created
additional leakage. In particular, the multiplication routine
performs an additional leaky modular reduction if the nonce
(the scalar) is larger than the group order. This again high-
lights the importance of tool-aided side-analysis during the
patching process. Although we reported this issue to LibreSSL
on May 20, 2019, it is still unpatched.
Issues (V3), (V5). As with DSA, the issues with consttime
swap (V3) and k-paddding top (V5) as well as their patches
equally apply to ECDSA for the curves listed in Table 4. Since
the patched LibreSSL uses k-padding twice for ECDSA, it is
still vulnerable not only to (V2) but also to (V3).
Buffer Conversion (V6). We uncovered distinct vulner-
abilities in some ECDSA scalar multiplication routines
of OpenSSL11 leaking the byte length of the nonce. Be-
fore the actual scalar multiplication, the nonce is converted
from a Bignumber to a byte array with BN_bn2bin and
9See OpenSSL commit 99540ec.
10See LibreSSL commit 34b4fb9.
11This applies to the optimized NIST curve implementations, which are
obtained via the enable-ec_nistp_64_gcc_128 compilation ﬂag.
1 if (x_equal && y_equal && !z1_is_zero && !z2_is_zero)
2
point_double(...)
Listing 3: Simpliﬁed excerpt from vulnerable point_add
(V7) in OpenSSL/BoringSSL scalar multiplication.
flip_endian. In contrast to Bignumber-related issues sub-
ject to word-granular leakage, those functions operate on
bytes. By stripping leading zero bytes, they leak the byte
length of a nonce. For secp224r1 and secp256k1, L = 8 bits
leak every 256th signature, and L = 16 bits every 65536th
signature. secp521r1 is not byte aligned and leaks L = 1 bit
every 2nd signature, or L = 9 bits every 512th signature, etc.
Since the side channel only comprises a few instructions and
data bytes, we rate it as hard to exploit. Yet, an SGX attack
similar to Appendix B could target the stripped nonce buffer.
This issue was patched on August 3, 2019.12
Point Addition Vulnerability (V7). For ECDSA signatures,
the nonce k is multiplied with the generator G in Equation (7).
Analyzing OpenSSL and BoringSSL showed that the constant-
time scalar multiplication uses a non-constant-time point ad-
dition. This leaks nonce windows consisting of zeros. We
uncovered this leakage with our tool showing 100% correla-
tion on the bit length of k, as shown in Appendix A Figure 5.
For the multiplication, the scalar is split into multiple ﬁxed-
size windows. Each window is used as an index into a pre-
computed table to select the point to be added. If the window
is all-zero, the ﬁrst point is selected from the table. This ﬁrst
point represents inﬁnity and has all-zero coordinates. Point
addition has a special doubling case in Listing 3 line 2. Al-
though doubling itself is never performed, the check in line 1
reveals whether the added point is inﬁnity or not. Hence, an
attacker can learn whether the current nonce window is zero.
With a window size of w bits, roughly 2−wth of the nonce is
leaked per sign operation. E.g., for the common window size
of 5, around 3.2% of the nonce is leaked.
The leak occurs due to the order in which the branching
condition is evaluated. The if in line 1 consists of four sep-
arate conditions, which are compiled into multiple compare
and jump instructions (cf. Figure 5 in Appendix A). This cre-
ates a tiny leakage because a different number of instructions
are executed, depending on the secret scalar. When the added
point is not inﬁnity, already the ﬁrst comparison (x_equal)
fails, since the added points are unequal. If the added point
is inﬁnity, this causes the ﬂags x_equal and y_equal to be
true. This is because inﬁnity is represented with all-zero pro-
jective (x,y,z) coordinates. Only the last ﬂag !z2_is_zero
fails, which results in a few more executed instructions. Ex-
ploiting this leakage with a cache attack seems infeasible due
to the tiny difference in the executed code. However, in an
SGX setting, [17] could be used to single-step instructions.
12See https://github.com/openssl/openssl/pull/9511 as well as
commits 8b44198b and 805315d3
1776    29th USENIX Security Symposium
USENIX Association
Table 5: Curves vulnerable ((cid:32) ) to ECDSA point addition
leak (V7) in constant-time scalar multiplication for base
point (BP) or arbitrary point (AP).
Curve
BP AP Compile conﬁguration
S
S
n
e
p
O
S
S
g
n
i
r
o
B
L secp224r1 (cid:32) (cid:32) OPENSSL_SMALL
L secp224r1 (cid:35) (cid:32) enable-ec_nistp_64_gcc_128
secp256k1 (cid:35) (cid:32)
secp256k1 (cid:32) (cid:32) enable-ec_nistp_64_gcc_128 no-asm
secp521r1 (cid:32) (cid:32) enable-ec_nistp_64_gcc_128
secp256k1 (cid:35) (cid:32)
secp384r1 (cid:32) (cid:32)
secp521r1 (cid:32) (cid:32)
We systematically analyzed various point multiplication
implementations and list affected ones in Table 5. Base point
multiplication with precomputed lookup tables is used in
ECDSA, whereas arbitrary point multiplication is used in
ECDH. In OpenSSL, only optimized NIST implementations
are affected. Other conﬁgurations and curve settings are un-
affected because they use a blinded double-and-add imple-
mentation. In BoringSSL, all curves are vulnerable at least
under one conﬁguration. Since LibreSSL only uses blinded
double-and-add for scalar multiplication, it is also unaffected.
Our report led to an immediate ﬁx13 by BoringSSL, which
replaces the evaluation of the branching condition with bit-
wise operations, such that a short-circuit evaluation is no
longer possible. OpenSSL is currently in the process of patch-
ing14, since our responsible disclosure on May 31, 2019.
6.5 Modular Inversion
Euclid BN_div (V8). OpenSSL and LibreSSL implement
modular inversion via the Extended Euclidean algorithm. In
contrast to the binary extended Euclidean algorithm (BEEA),
which is known to be vulnerable [1, 23, 54], the inversion
used for DSA is denoted as constant-time in the source code.
With our tool, we uncovered a leak hidden deeply in this
constant-time modular inversion of OpenSSL. In particular,
the ﬁrst Euclidean iteration leaks the topmost nonce bit of
every signature to a side-channel attacker.
Since DATA accumulates leakage not only over the ﬁrst
but over all Euclidean iterations, our leakage models did not
show high correlation. Instead, we found this leak by carefully
analyzing the differences reported by the ﬁrst phase of DATA.
Algorithm 3 shows the leaky Extended Euclidean inversion.
The division BN_div in line 3 is not constant time, although
the BN_FLG_CONSTTIME ﬂag is used. Note that BN_div com-
putes both, the integer division D and the remainder M. In the
ﬁrst iteration, A holds the public modulus q, and B holds the
secret nonce k. Inside BN_div the BIGNUMs are aligned before
the actual division, as follows. The divisor (nonce k) is shifted
to the left such that its highest word is ﬁlled, having no leading
13See BoringSSL commit 12d9ed6.
14https://github.com/openssl/openssl/pull/9239
:a,n
(D,M) ← (A/B,A%B) // Leaky division (V8)
(A,B) ← (B,M)
(X,Y ) ← (D· X +Y,X)
sign ← −sign
Algorithm 3: OpenSSL/LibreSSL leaky inversion
input
output :inv // Inverse of a mod n
1 (A,B,X,Y,sign) ← (a,n,1,0,−1)
2 while B > 0 do
3
4
5
6
7 end
8 ensure A = 1
9 if sign top at various locations.
This vulnerability is conceptually the same as the small