具有层次使用结构的系统可以同时构造一层或几层。这些层次有时
候称为“抽象层”，但这是一种错误的名称。因为这些组件是独立的
程序，而不是完整的模块，它们不一定抽象（隐藏）了什么东西。
通常大型的软件系统包含太多的程序，这让程序间使用关系的描述
不太容易理解。在这种情况下，使用关系可以用于程序的组合，如
模块、类或包。这样的组合描述丧失了重要的信息，但有助于展示
“全局”。例如，你有时候可以在信息隐藏模块之间建立使用关系，
但是除非一个模块中所有的程序都属于实际使用层次的同一层，否
则就会丧失重要的信息。
在某些项目中，系统的使用关系开始并没有完全确定，要到系统实
现时才能确定，因为开发者会在实现过程中决定他们使用哪些程
序。但是，系统的架构师可能在设计时创建一种“允许使用"关系，
约束并发者的选择。今后，我们不会区分“使用"和“允许使用”。定
义良好的使用结构将创建系统的适当子集，可以用于驱动选代式或
增量式的并发循环。满足的关注点：产品化和生态系统。
1.3.3进程结构
886
---
## Page 888
组件与关系：信息隐藏模块结构和使用结构是静态的结构，存在于
设计时和编码时。我们现在转向运行时结构。参与进程结构的组件
是进程。进程是运行时的事件序列，由程序控制（Dijkstra
1968）。每个程序都作为一个或多个进程的一部分执行。一个进程
中的事件序列的执行独立于另一进程中的事件序列，除非这两个进
程彼此同步，例如一个进程等待来自另一个进程的信号或消息。进
程由支持系统分配资源，包括内存和处理器时间。系统可能包含固
定数量的进程，也可能在运行时创建和销毁进程。请注意，在Limux
和Windows操作系统中实现的线程也符合这个进程定义。进程是儿
种不同关系中的组件。下面是一些例子。
进程提供工作
一个进程可能会创建工作，该项工作必须由其他进程完成。这种结
构在确定系统是否死锁时是很重要的。
满足的关注点：性能和容量。
进程取得资源
在动态分配资源的系统中，一个进程可能控制由另一个进程使用的
资源，后者必须请求并归还这些资源。因为发起请求的进程可能从
几个控制器那里请求资源，所以每项资源可能都有一个不同的控制
进程。
满足的关注点：性能和容量。
进程共享资源
两个进程可能共享资源，如打印机、内存或端口等。如果两个进程
共享一项资源，就需要通过同步来防止使用冲突。每一种资源可能
有不同的关系。
满足的关注点：性能和容量。
进程包含在模块中
每个进程由一个程序控制，正如前面提到的，每个程序包含在一个
模块之中。因此，我们可以认为进程包含在模块之中。
887
---
## Page 889
满足的关注点：性能和容量。
1.3.4访问结构
系统中的数据可能划分成具有属性的段，如果程序对段中的任何数
据拥有访问权，就对该段中的所有数据拥有了访问权。请注意，为
了简化描述，我们应该让段的规模最大化，具体做法是添加一个条
件，即如果两个段被同一组程序访问，这两个段就应该合并。数据
访问结构包含两种类型的组件：程序和段。这种关系被命名“有权
访问”，它是程序和数据段之间的关系。如果这种结构让程序访问
的权限最小化，并且严格执行，我们就认为系统更安全。
满足的关注点：安全性。
1.3.5结构小结
表1-1总结了前面的软件结构，包括它们的定义和它们满足的关注
点。
表1-1：结构小结
结构
组件
关系
关注点
信息隐藏
信息隐藏模块
整体-部分
可变性
包含
模块化
可构建性
使用
程序
使用
产品化
生态系统
进程
进程（任务、线程）
提供工作
性能
取得资源
可变性
共享资源
容量
包含在模块中
数据访问
程序和数据段
有权访问
安全性
生态系统
1.4好的架构
我们曾提到，架构师玩的是折中的游戏。对于一组给定的功能需求
和品质需求，没有唯一的正确架构和唯一的"正确答案”。我们从经
验中得知，应该对架构进行评估，确定它是否满足其需求，然后再
投入资金来构建、测试和部署这个系统。评估试图回答前面小节中
888
---
## Page 890
讨论的一个或多个一般关注点问题，或回答特定系统的具体关注问
题。
架构评估有两种常见的方式（Clements、Kazman和Klein2002）。第
一种评估方式是确定架构的属性，通常通过建模或模拟系统的一个
或多个方面。例如，通过性能建模来评估吞吐量和伸缩性，通过失
效树模型来评估可靠性和可访问性。其他类型的模型包括复杂性和
耦合指标，用于评估可变性和可维护性。
第二种评估方式，也是最广泛使用的方式，就是通过对架构师提出
质询来评估该架构。有许多结构化的质询方法。例如，贝尔实验室
提出的软件架构复查委员会（SoftwareArchitectureReview
Board,SARB）过程利用了组织机构之内的专家，以及他们在电信和
相关应用中的深厚领域经验（Maranzano等2005）。
质询方法的另一种变体是架构折中分析方法（ArchitectureTrade-off
Analysis Method,ATAM）（Clements、Kazman和Klein2002），它寻
找架构不能满足品质关注点的风险。ATAM使用了场景分析，每种
场景都描述了特定的利益相关人对系统的品质关注点。架构师然后
解释该架构如何支持每一种场景。
主动复审是另一种质询方法，它改变了复审过程的并始方式，要求
架构师向复审者提供架构师认为重要而需要回答的问题（Hofiman
和Weiss2000，第17章）。然后，复查者利用已有的架构文档和描
述来回答这些问题。最后，在网络上查找"software architecture
reviewchecklist（软件架构复审检查清单）”，可以得到几十份检查
清单，其中某些清单非常通用，另一些则是针对具体的应用领域或
技术框架。
1.5美丽的架构
所有前面的方法都有助于我们判断一个架构是否“足够好”一也就是
说，是否有可能指导开发者和测试者构建一个系统，并满足系统的
利益相关人的功能和质量关注点。在我们每大使用的系统中存在看
许多好的架构。
但是，超越足够好的架构是怎样的呢？如果有一个“软件架构名人
量”，那会怎样？哪些架构会陈列在这个艺术馆的墙上？这个想法
可能没有你想象的那么遥远一在软件产品线领域，这样的“名人堂”
889
---
## Page 891
的确存在。!进入“软件产品线名人堂"的条件包括获得商业上的成
功、影响其他产品线的架构（其他产品线可能“借用、复制、窃取
这个架构）、拥有足够的文档从而让其他人“不必通过道听途说"就
能够理解该架构。
我们将为更一般的"架构名人堂"或“美丽架构艺术馆”的候选者设立
怎样的条件呢？首先我们应该认识到，这是一个软件系统的艺术
馆，而不是其他艺术馆，我们的系统构建的目的是为了使用。所
以，我们也许从一并始就应该关注该架构的实用性：它应该每天被
许多人使用。
但是，在使用架构之前，它必须先构建，所以我们应该关注该架构
的可构建性。我们会寻找那些具有定义良好的使用结构的架构，它
们支持增量式构建，这样，通过每次构建选代我们都能得到一个有
用的、可测试的系统。我们也会寻找那些具有定义良好的模块接
口、本来就很好测试的架构，这样，构建的过程就是透明的、可见
的。
接来下，我们想寻找那些展示了持久性的架构一也就是说，那些经
过了时间考验的架构。我们生活在一个技术环境以从未有过的加速
度变化的年代。美丽的架构应该预期到变更的需要，允许期望的修
改能够容易而有效地进行。我们想寻找那些避免了“衰老地平线”
（Klein2005）的架构，超过了这条“衰老地平线”，维护将变得代价
极大，以至于不可能进行。
最后，我们还想寻找这样一些架构，它们的特征让使用、构建、测
试这些架构的并发人员和测试人员，以及由它而形成的系统的用户
感到由衷的高兴。为什么开发人员会高兴？因为它让他们的工作变
得容易，而且更有可能得到一个高品质的系统。为什么测试人员会
高兴？作为测试过程的一部分，他们必须尝试模拟用户的行为。如
果他们高兴，可能用户也会感到高兴。如果厨师对他的烹调的菜品
感到不高兴，那么品尝这些菜品的顾客也可能会感到不高兴。
不同的系统和应用领域为这些架构提供了许多机会，展示它们特有
的令人高兴的特征，但概念完整性是一项跨越所有领域的特征，并
且总是让人感到高兴。一致的架构学习起来更容易、更快，当知道
了一点之后，你就可以并始预测其余的部分。不需要记住并处理特
殊的情况，代码更干净，测试集更小。一致的架构不会为做同一件
事情提供两种（或更多）方法，不会让用户浪费时间进行选择。正
890
---
## Page 892
如LudwigMiesvanderRohe所说的，好的设计，“少即是多”。爱因
斯坦可能会说，美丽的架构就是尽可能简单，但不要过于简单。
有了这些判别条件，我们推荐第一批进入“美丽架构艺术馆"的候选
者。
第一个是A-7E舰载飞行处理器（OnboardFlightProcessor,OFP）的架
构，它由海军研究实验室（NavalResearchLaboratory,NRL）在20世
纪70年代后期开发，在（Bass、Clements和Kazman2003）有介绍。
尽管这个系统从未实现量产，但它满足了所有其他的判别条件。这
个架构对软件架构的实践曾经产生了巨大的影响，它展示在真实世
界的系统中，将设计时的信息隐藏模块和使用结构与运行时的进程
结构分离。因为美国政府资助并开发了这个架构，所以所有项目文
档都提供给了公共领域。I21这个架构具有定义良好的使用结构，促
进了系统的增量式构建。最后，信息隐藏模块结构为分解系统提供
了清晰一致的准则，实现了很强的概念完整性。作为嵌入式系统软