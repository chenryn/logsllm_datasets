### 调用go函数
js初始化时对这个函数重新包装
    const binding = window["addLink"];
    window["addLink"] = async(...args) => {
        const me = window["addLink"];
        let callbacks = me['callbacks'];
        if (!callbacks) {
            callbacks = new Map();
            me['callbacks'] = callbacks;
        }
        const seq = (me['lastSeq'] || 0) + 1;
        me['lastSeq'] = seq;
        const promise = new Promise(fulfill => callbacks.set(seq, fulfill));
        binding(JSON.stringify({name: "addLink", seq, args}));
        return promise;
    };
    const bindingTest = window["Test"];
    window["Test"] = async(...args) => {
        const me = window["Test"];
        let callbacks = me['callbacks'];
        if (!callbacks) {
            callbacks = new Map();
            me['callbacks'] = callbacks;
        }
        const seq = (me['lastSeq'] || 0) + 1;
        me['lastSeq'] = seq;
        const promise = new Promise(fulfill => callbacks.set(seq, fulfill));
        binding(JSON.stringify({name: "Test", seq, args}));
        return promise;
    };
go处理逻辑
执行完go函数后会再执行一段js
    const DeliverResultJS = `
    (function deliverResult(name, seq, result) {
        window[name]['callbacks'].get(seq)(result);
        window[name]['callbacks'].delete(seq);
    })("%s", %v, "%s")
但是没看懂使用`promise`后回调调用的意义是什么。。
### Bypass headless detect
    // Pass the Webdriver Test.
    Object.defineProperty(navigator, 'webdriver', {
        get: () => false,
    });
    // Pass the Plugins Length Test.
    // Overwrite the plugins property to use a custom getter.
    Object.defineProperty(navigator, 'plugins', {
        // This just needs to have length > 0 for the current test,
        // but we could mock the plugins too if necessary.
        get: () => [1, 2, 3, 4, 5],
    });
    // Pass the Chrome Test.
    // We can mock this in as much depth as we need for the test.
    window.chrome = {
        runtime: {},
    };
    // Pass the Permissions Test.
    const originalQuery = window.navigator.permissions.query;
    window.navigator.permissions.query = (parameters) => (
        parameters.name === 'notifications' ?
        Promise.resolve({ state: Notification.permission }) :
        originalQuery(parameters)
    );
    //Pass the Permissions Test. navigator.userAgent
    Object.defineProperty(navigator, 'userAgent', {
        get: () => "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.0 Safari/537.36",
    });
    // 修改浏览器对象的属性
    Object.defineProperty(navigator, 'platform', {
        get: function () { return 'win32'; }
    });
    Object.defineProperty(navigator, 'language', {
        get: function () { return 'zh-CN'; }
    });
    Object.defineProperty(navigator, 'languages', {
        get: function () { return ["zh-CN", "zh"]; }
    });
### 记录url以及对前端框架的适配
    // history api hook 许多前端框架都采用此API进行页面路由，记录url并取消操作
    window.history.pushState = function(a, b, c) { 
        window.addLink(c, "HistoryAPI");
    }
    window.history.replaceState = function(a, b, c) { 
        window.addLink(c, "HistoryAPI");
    }
    Object.defineProperty(window.history,"pushState",{"writable": false, "configurable": false});
    Object.defineProperty(window.history,"replaceState",{"writable": false, "configurable": false});
    // 监听hash改变 Vue等框架默认使用hash部分进行前端页面路由
    window.addEventListener("hashchange", function() {
        window.addLink(document.location.href, "HashChange");
    });
    // 监听窗口的打开和关闭，记录新窗口打开的url，并取消实际操作
    // hook window.open 
    window.open = function (url) {
        console.log("trying to open window.");
        window.addLink(url, "OpenWindow");
    }
    Object.defineProperty(window,"open",{"writable": false, "configurable": false});
    // hook window close
    window.close = function() {console.log("trying to close page.");};
    Object.defineProperty(window,"close",{"writable": false, "configurable": false});
    // hook window.WebSocket 、window.EventSource 、 window.fetch 等函数
    var oldWebSocket = window.WebSocket;
    window.WebSocket = function(url, arg) {
        window.addLink(url, "WebSocket");
        return new oldWebSocket(url, arg);
    }
    var oldEventSource = window.EventSource;
    window.EventSource = function(url) {
        window.addLink(url, "EventSource");
        return new oldEventSource(url);
    }
    var oldFetch = window.fetch;
    window.fetch = function(url) {
        window.addLink(url, "Fetch");
        return oldFetch(url);
    }
### hook setTimeout/SetInterval
    // hook setTimeout
    //window.__originalSetTimeout = window.setTimeout;
    //window.setTimeout = function() {
    //    arguments[1] = 0;
    //    return window.__originalSetTimeout.apply(this, arguments);
    //};
    //Object.defineProperty(window,"setTimeout",{"writable": false, "configurable": false});
    // hook setInterval 时间设置为60秒 目的是减轻chrome的压力
    window.__originalSetInterval = window.setInterval;
    window.setInterval = function() {
        arguments[1] = 60000;
        return window.__originalSetInterval.apply(this, arguments);
    };
    Object.defineProperty(window,"setInterval",{"writable": false, "configurable": false});
这个hook操作没有明白，将setInterval强制设为了60s，我想应该来个判断，大于60s时再统一设置，60s，这样爬虫效率就变得太低了。
setTimeout取消了hook，毕竟只执行一次，可能不是很重要。
### hook ajax
hook 原生ajax并限制最大请求数，可能是怕自动点击造成ajax爆炸
    // 劫持原生ajax，并对每个请求设置最大请求次数
    window.ajax_req_count_sec_auto = {};
    XMLHttpRequest.prototype.__originalOpen = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
        // hook code
        this.url = url;
        this.method = method;
        let name = method + url;
        if (!window.ajax_req_count_sec_auto.hasOwnProperty(name)) {
            window.ajax_req_count_sec_auto[name] = 1
        } else {
            window.ajax_req_count_sec_auto[name] += 1
        }
        if (window.ajax_req_count_sec_auto[name]  " + this.id + this.name + this.getAttribute("class") + "|" + event_name;
        // console.log(name)
        // 对每个事件设定最大的添加次数，防止无限触发，最大次数为5
        if (!window.add_even_listener_count_sec_auto.hasOwnProperty(name)) {
            window.add_even_listener_count_sec_auto[name] = 1;
        } else if (window.add_even_listener_count_sec_auto[name] == 5) {
            return ;
        } else {
            window.add_even_listener_count_sec_auto[name] += 1;
        }
        if (this.hasAttribute("sec_auto_dom2_event_flag")) {
            let sec_auto_dom2_event_flag = this.getAttribute("sec_auto_dom2_event_flag");
            this.setAttribute("sec_auto_dom2_event_flag", sec_auto_dom2_event_flag + "|" + event_name);
        } else {
            this.setAttribute("sec_auto_dom2_event_flag", event_name);
        }
        old_event_handle.apply(this, arguments);
    };
    function dom0_listener_hook(that, event_name) {
        let name = " " + that.id + that.name + that.getAttribute("class") + "|" + event_name;
        // console.log(name);
        // 对每个事件设定最大的添加次数，防止无限触发，最大次数为5
        if (!window.add_even_listener_count_sec_auto.hasOwnProperty(name)) {
            window.add_even_listener_count_sec_auto[name] = 1;
        } else if (window.add_even_listener_count_sec_auto[name] == 5) {
            return ;
        } else {
            window.add_even_listener_count_sec_auto[name] += 1;
        }
        if (that.hasAttribute("sec_auto_dom2_event_flag")) {
            let sec_auto_dom2_event_flag = that.getAttribute("sec_auto_dom2_event_flag");
            that.setAttribute("sec_auto_dom2_event_flag", sec_auto_dom2_event_flag + "|" + event_name);
        } else {
            that.setAttribute("sec_auto_dom2_event_flag", event_name);
        }
    }
    // hook dom0 级事件监听
    Object.defineProperties(HTMLElement.prototype, {
        onclick: {set: function(newValue){onclick = newValue;dom0_listener_hook(this, "click");}},
        onchange: {set: function(newValue){onchange = newValue;dom0_listener_hook(this, "change");}},
        onblur: {set: function(newValue){onblur = newValue;dom0_listener_hook(this, "blur");}},
        ondblclick: {set: function(newValue){ondblclick = newValue;dom0_listener_hook(this, "dbclick");}},
        onfocus: {set: function(newValue){onfocus = newValue;dom0_listener_hook(this, "focus");}},
        onkeydown: {set: function(newValue){onkeydown = newValue;dom0_listener_hook(this, "keydown");}},
        onkeypress: {set: function(newValue){onkeypress = newValue;dom0_listener_hook(this, "keypress");}},
        onkeyup: {set: function(newValue){onkeyup = newValue;dom0_listener_hook(this, "keyup");}},
        onload: {set: function(newValue){onload = newValue;dom0_listener_hook(this, "load");}},
        onmousedown: {set: function(newValue){onmousedown = newValue;dom0_listener_hook(this, "mousedown");}},
        onmousemove: {set: function(newValue){onmousemove = newValue;dom0_listener_hook(this, "mousemove");}},
        onmouseout: {set: function(newValue){onmouseout = newValue;dom0_listener_hook(this, "mouseout");}},
        onmouseover: {set: function(newValue){onmouseover = newValue;dom0_listener_hook(this, "mouseover");}},
        onmouseup: {set: function(newValue){onmouseup = newValue;dom0_listener_hook(this, "mouseup");}},
        onreset: {set: function(newValue){onreset = newValue;dom0_listener_hook(this, "reset");}},
        onresize: {set: function(newValue){onresize = newValue;dom0_listener_hook(this, "resize");}},
        onselect: {set: function(newValue){onselect = newValue;dom0_listener_hook(this, "select");}},
        onsubmit: {set: function(newValue){onsubmit = newValue;dom0_listener_hook(this, "submit");}},
        onunload: {set: function(newValue){onunload = newValue;dom0_listener_hook(this, "unload");}},
        onabort: {set: function(newValue){onabort = newValue;dom0_listener_hook(this, "abort");}},
        onerror: {set: function(newValue){onerror = newValue;dom0_listener_hook(this, "error");}},
    })
## 表单填充,事件触发
### 表单填充
### input处理
    // 找出 type 为空 或者 type=text
    for _, node := range nodes {
        // 兜底超时
        tCtxN, cancelN := context.WithTimeout(ctx, time.Second*5)
        attrType := node.AttributeValue("type")
        if attrType == "text" || attrType == "" {
            inputName := node.AttributeValue("id") + node.AttributeValue("class") + node.AttributeValue("name")
            value := f.GetMatchInputText(inputName)
            // 寻找匹配类型的值
            var nodeIds = []cdp.NodeID{node.NodeID}
            // 先使用模拟输入
            _ = chromedp.SendKeys(nodeIds, value, chromedp.ByNodeID).Do(tCtxN)
            // 再直接赋值JS属性
            _ = chromedp.SetAttributeValue(nodeIds, "value", value, chromedp.ByNodeID).Do(tCtxN)
        } else if attrType == "email" || attrType == "password" || attrType == "tel" {
            value := f.GetMatchInputText(attrType)
            // 寻找匹配类型的值
            var nodeIds = []cdp.NodeID{node.NodeID}
            // 先使用模拟输入
            _ = chromedp.SendKeys(nodeIds, value, chromedp.ByNodeID).Do(tCtxN)
            // 再直接赋值JS属性
            _ = chromedp.SetAttributeValue(nodeIds, "value", value, chromedp.ByNodeID).Do(tCtxN)
        } else if attrType == "radio" || attrType == "checkbox" {
            var nodeIds = []cdp.NodeID{node.NodeID}
            _ = chromedp.SetAttributeValue(nodeIds, "checked", "true", chromedp.ByNodeID).Do(tCtxN)
        } else if attrType == "file" || attrType == "image" {
            var nodeIds = []cdp.NodeID{node.NodeID}
            wd, _ := os.Getwd()
            filePath := wd + "/upload/image.png"
            _ = chromedp.RemoveAttribute(nodeIds, "accept", chromedp.ByNodeID).Do(tCtxN)
            _ = chromedp.RemoveAttribute(nodeIds, "required", chromedp.ByNodeID).Do(tCtxN)
            // 对于一些简单的限制，可以去掉，比如找到文件上传的dom节点并删除 accept 和 required 属性：
            _ = chromedp.SendKeys(nodeIds, filePath, chromedp.ByNodeID).Do(tCtxN)
        }
        cancelN()
    }
### multiSelect
css语法获取select第一个元素，设置属性即可
    optionNodes, optionErr := f.tab.GetNodeIDs(`select option:first-child`)
        if optionErr != nil || len(optionNodes) == 0 {
            logger.Logger.Debug("fillMultiSelect: get select option element err")
            if optionErr != nil {
                logger.Logger.Debug(optionErr)
            }
            return
        }
        _ = chromedp.SetAttributeValue(optionNodes, "selected", "true", chromedp.ByNodeID).Do(tCtx)
        _ = chromedp.SetJavascriptAttribute(optionNodes, "selected", "true", chromedp.ByNodeID).Do(tCtx)