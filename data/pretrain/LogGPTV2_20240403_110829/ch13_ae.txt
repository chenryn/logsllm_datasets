生产工程师需要有行动的倾向。当我们研究问题、构建系统或创建团队时，一定存在一个实际问题，我们可以长期处理和修复。角色肯定有反应性部分，并且需要它，因为系统会一直出现故障。PE 需要为这些问题构建可持续的解决方案，因此需要专注于主动解决问题。如果我们陷入一种运维模式，一遍又一遍地完成同样的修补，我们就不会在角色中取得成功。
支持性沟通和影响技能
你不能是个混混。混混通常与人交往不好。我们这些在业内工作了很长时间的人会记得与 BOFH【Bastard Operator from Hell】相关的运维打交道的体验。处理故障和定期修复事情可能会让人们失望，并可能使他们变成愤怒的胡言乱语，所以我们需要确保我们雇用的人了解什么是直接的（且仍然算是文明的）方式，并保持与他人交谈。当有人想炫耀自己的知识，并拒绝一个可能没有他们那么多经验的人时，这真的让我恼火。生产工程师需要善于沟通，才能在角色中取得成功。好好说话的规则适用于此处，当你发现这些人时，应该指导他们以不同的方式沟通，如果他们不这样做，你应该积极管理他们，因为这类的恶习很容易渗透到整个团队中。技术知识和技能
生产工程师不仅需要说与软件工程师相同的语言，还需要能够讲其他人的语言。例如：网络工程师、计算容量工程师、数据中心工程师和项目经理。这意味着他们需要了解这些不同的学科，并能够从容面对各种问题，无论是硬件问题还是 UI 问题。例如，为了在渲染层中查找问题，PE 需要能够查看代码并了解它如何呈现数据。生产工程师不一定需要成为所有这些学科的专家，但他们不能回避他们。这就是为什么我们的面试寻找各种技术技能，我们也随着时间的推移培训工程师，以获得更多的知识。但我们找到知道想找到无所不知的人是不可能的，所以我们很小心，避免对人有不切实际的期望。
灵活性灵活性
PE 在不同的时间扮演不同的角色，需要了解何时使用某些技能。例如，在某些团队中，PE 需要作为沟通者或联络人。在其他情况下，他们可能需要是问题解决者、调试者或故障解决者。有时，他们可能需要对服务的关键组件进行编码。生产工程师的角色在业内无法仔细定义，这是我们可以接受的。我们特别选择有一个宽泛的定义，因为我们参与我前面描述的服务生命周期的不同阶段。团队的组成是确保角色成功的关键因素，我们需要在不同领域相互利用优势来解决问题。我们确实强调不要陷入“不是我的工作”的心态，而且 PE 需要乐于去做在工作描述中没有明确定义的事情。
协作与妥协协作与妥协
我们的模型是，我们与软件团队合作，而不是软件团队，反之亦然。一方面，我们希望 SWE 关注可靠性、稳定性和操作性。另一方面，作为 PE，我们需要确保我们并不总是使用稳定作为唯一衡量标准，并且需要关注功能和提供新服务。我们都需要共同努力，为业务、服务和团队做正确的事。有时，这意味着我们需要在运维问题上做出妥协，有时这意味着 SWE 需要在功能上做出妥协。任何考虑问题的角度都不应该赢得一切优先。如果我们一起工作时没有妥协，那么这可能导致不健康的工作关系。PE 领导层经常与 PE 团队讨论这一概念，因为很容易陷入一种运维模式，而无暇花时间进行自我反省。请确保我们实际上不是导致 Dev 和 Ops 之间裂痕的人。
愿意教导，避免 SPOF【单点失败】
从长远来看，我们扮演的角色都不是可持续的。PE 需要专注于构建软件、建立流程以及随时间演变，以便团队将来不再需要自己。PE 需要小心，避免称为团队中始终解决特定类型问题的人，或称为解决某类问题的专家。PE 需要确保他们正在构建工具，并培养用户称为专家。生产工程类似于工程学科中的行业，了解如何操作系统不是学校或大学所教的东西。由于这是你在工作中通过经验学到的东西，这意味着我们必须教别人如何做我们知道的事情。我发现，在职业生涯的开始阶段，很少有软件工程师经常考虑失败或试图构建能够抵御这些故障的系统。成功的 PE 肯定有一种心态，但我坚信，这是后天学习到的行为。我们有责任为周围的人灌输这种心态。实践更多的软件工程师知道如何做到这一点，但现实是，我们正在增加越来越多的新的软件工程师到我们的队伍中，我相信 PE 能帮助他们获得知识，如何更快地构建更具弹性的软件。这也意味着需要为此类培训和开发腾出空间，而不仅仅是期望团队中的生产工程师提供定时定量的产出。 
大卫：我们能谈谈如何培训新的生产工程师吗？Facebook 以其入职训练营而闻名；生产工程师会经历训练营吗？是否有属于训练营的 PE 课程？佩德罗：我们如何在训练营中取得更强势的地位，是 PE 起源故事的一部分，我之前没有分享过。当我到达 Facebook 时，运营部不允许加入现有的软件工程训练营。我看过关于训练营的事，在加入之前看过这些视频，很兴奋。然而，当我加入时，我被告知：“你在做的是运维，你为什么想要提交代码？”我很愤怒。我在 Facebook 度过了职业生涯的第一年左右，努力改变这种看法，证明人们错了。我来自计算机科学背景，我整个职业生涯都编写了代码。因为我选择参与运维，并不意味着我就要放弃编程，其实我喜欢通过软件解决广泛的运维问题。
工程师在 Facebook 工作的最初几周，他们学到的是作为运维工程师的基本知识：如何提交代码、了解 Facebook 的代码质量标准、使用我们的工具、将内容部署到生产中、了解如何监控和监控添加检测等。这似乎是非常相关的材料，我们也需要了解，但由于我们不允许参加 Bootcamp，我们最初不得不建立自己的版本。与此同时，我们中的一些人花更多的时间与训练营领导，通过许多对话，并通过雇用更多具有较强软件背景的人，我们最终能够获得进入。训练营现在已经成为所有生产工程师的入职过程的一部分。我们影响了许多课程，同时向软件工程师和生产工程师开放，以便每个人在加入团队之前获得一些有关系统的基本运维知识。
我们遵循与 Facebook 软件工程相同的团队选择模型。PE 花三到四周的时间在训练营中获得基本技术知识，然后花两个多星期进行团队选择。我们举办一个招聘会，因为缺少一个更好的术语，所有寻找人的团队会和所有寻找团队者的引导员聚在一起。我们尝试根据团队的需要和个人的技能组合和愿望来寻找匹配。例如，有些人对安全性有亲和力，而另一些人则对面向产品的服务或后端系统具有亲和力。在大多数情况下，这工作正常，但团队选择过程并不总是适用于所有人。我们雇佣的一些人希望在加入 Facebook 之前了解他们将要从事的团队。因此，我们花一点时间预先了解他们，然后缩小团队范围，使其更容易一点。随着时间的推移，我们发现仍有某种类型的工作不一定适用于加入 Facebook 的每个软件工程师。因此，我们创建了另一个迷你训练营，我们称之为PE 基础。该课程专门面向生产工程师、网络工程师和其他类似的运维团队。在 Bootcamp 中，我们试图在短时间内打包大量信息。我认为它总体上非常成功，但内容没有那么有意义，直到工程师加入他们的团队，并花了足够时间了解基础结构。在 PE 退出 Bootcamp 并加入他们的团队大约四周后，他们又回到了一组更需要动手的课程，这些课程解释了我们工具的细微差别。现在，他们已经接触了正在开发的系统，可以在他们心目中更好地了解我们的工具如何应用于他们的工作。
我们还在 PE 基础知识领域进行更多的入职文化介绍。例如，我们介绍如何应用一些健康的张力，而不过度。当我们与工程师讨论他们的解决方案时，我们需要小心，不要总是反对，因为有些东西可能并不完美。在这些入职演示中，我们不能总是说“不”，其他 PE 会分享他们经历的冲突，以便新人能够在他们心目中形成如何处理团队中潜在分歧的印象。PE 学习成为文化的一部分，使其他人能够解决自己的问题，而不是成为改变的阻碍者。大卫： 让我们以生产工程为模型，从更广泛的方面来了解一下。我们已经在 Facebook 上讨论了 PE 组织的独特性。你是否认为 PE 组织可以在 Facebook 之外实施，并且仍然感觉自己是一个 PE 组织？
佩德罗：是的，我认为类似的 PE 组织可以在其他地方创建。我相信 Facebook 的神秘力量实际上是源自我们雇佣的人，以及他们是如何把事情做好的。有很多文化因素可能需要存在，但我自信地认为，我们是不多的拥有自主、独立、赋权和健康辩论等文化的公司。我确实担心其他公司可能会采用 PE 这个名字，并且不会采纳伴随它们附带的文化影响。我与一些将建立 SRE 团队的大公司以外的许多团队进行了交谈，实际上，这只是一个重新命名的 SysAdmin 团队，具有完全独立的运维角色，对自动化、协作和平等没有兴趣。我相信这是因为他们希望能够吸引外部的人，但工作不一定改变。与软件工程师的接洽模式不会改变。影响变化的能力没有不同。领导层的关系和共同的问责制并不存在。我坚信软件团队最终应该对其运维负责，但我也承认，PE 可以帮忙确保团队不会过于繁忙。我想再次强调，PE 不应该为SWE 执行运维，它们应该与它们一起运维。如果存在这种与他人而不是为他人合作的机制，那么我认为此模型可以在其他地方工作。
大卫：那么，你如何知道组织是否与你定义它的方式相同？