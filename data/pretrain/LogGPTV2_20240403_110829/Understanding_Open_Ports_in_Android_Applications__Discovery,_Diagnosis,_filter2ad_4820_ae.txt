Representative Apps Affected
ID
Samsung Gear, Cloud Mail.Ru,
Vulnerability Patterns
No/insufﬁcient checks for
information transmission
No/insufﬁcient checks for
command execution
Crash-of-Service (CoS)
Stealthy Data Inﬂation
P1
P2
P3
P4
P5
Vaulty, ES File Explorer
Tencent XG Push SDK,
Baidu Root, Coolpad V1-C Phone
Skype, Instagram
Facebook SDK, Instagram
Insecure Analytics Interface
Sina Weibo, Alibaba & Baidu SDKs
P1: No or insufﬁcient checks for information trans-
mission. One major usage of (TCP) open ports is to transmit
data to the connecting parties. However, apps may employ
weak authentication or even no authentication, which allows
unauthorized access to sensitive contents. We identify this
type of vulnerabilities in ES File Explorer, Cloud Mail.Ru,
and a popular photo/video hiding app called Vaulty. For
example, Cloud Mail.Ru’s TCP port 1234 leaks users’ videos
at http://127.0.0.1:1234//filename, where the
name can be leaked by eavesdropping Cloud Mail.Ru’s broad-
cast messages [45]. Similarly, Vaulty leaks users’ sensitive
videos and pictures to a remote adversary through port 1562,
and the adversary does not even need to know the target
ﬁlename because only an integer starting from one is required.
ES File Explorer’s always-on TCP port 59777 performs some
security checks by validating the IP addresses of incoming
requests with a white list. However, there is also an implicitly
exposed [45] Activity component for adding a remote
adversary’s IP address to the white list.
[30] mentioned in Sec.
A particularly interesting example is Samsung Gear
and other built-in apps based on the Accessory ser-
vice
III-C. Samsung Acces-
sory provides an automatic (service) discovery feature
via TCP port 8230, but
replies with sensitive informa-
tion, e.g., GT-I9305;samsung;UserName(GT-I9305)
;SWatch;SAP_TokenId(omitted), to any connecting
party. Generally, it is important, yet challenging, to return only
appropriate information in such UPnP-like apps (e.g., 19 apps
using CyberGarage UPnP SDK; see Table III).
P2: No or insufﬁcient checks for command execution.
Another usage of open ports is to execute commands sent by
authorized clients. We can see such open-port usage in Tencent
XG Push SDK for executing push commands and the Coolpad
V1-C phone’s vpowerd system daemon for shutdown and
reboot commands. However, the command interfaces in both
cases are not well protected.
We also notice that some open ports are used as a de-
bugging interface. For example, MIT App Inventor [25] and
Titanium SDK [37] in Table III use open ports for instant
debugging or the so-called living programming [70]. This
debugging interface, however, must be disabled in release
versions; otherwise, sensitive debugging information could be
leaked. For example, Baidu Root, a popular rooting app in
China, suffers from this vulnerability in its TCP port 10010
(bound to the host IP address).
P3: Crash-of-Service. Apps could crash when receiving
malformed inputs from their open ports — we call this Crash-
of-Service (CoS). Traditionally, Android apps suffer from CoS
due to inter-component communications [49]. Now open ports
provide a new channel for launching CoS. For example, we
Fig. 6: The model of using open ports for analytics.
can crash Instagram by sending it an invalid HTTP URL via
the open ports. We also ﬁnd that SIP VoIP apps (e.g., built-in
apps using the standard VoIP port 5060 as discussed in Sec.
III-C) could be victims of CoS attacks. Here we analyze Skype
voice/video calls’ VoIP-like mechanism — it uses one UDP
port for receiving control messages from a Microsoft Azure
server, and another UDP port for exchanging media data with
the other Skype user in a P2P mode. Unfortunately, a remote
adversary can terminate the on-going Skype session by just
sending two packets to the ﬁrst UDP port. This leads to a very
effective CoS attack without even involving application-layer
packets.
P4: Stealthy data inﬂation. Many open ports are for
caching purposes (or as connection proxies in VPN apps). For
example, Facebook SDK uses its open ports to cache video-
based advertisements. Individual apps, such as Instagram, can
also build their own cache servers upon an open-source library
called AndroidVideoCache [7]. Since these apps typically
support opening arbitrary URLs via the open ports, one can
easily launch stealthy data inﬂation attacks. Speciﬁcally, an
adversary can send special URLs, e.g., an URL pointing to
a large ﬁle, to maliciously inﬂate victim apps’ cellular data
usage in the background. This process is fully stealthy without
catching user attention, and the data usage is attributed to the
victim app.
Our vulnerability reports on Facebook SDK and Instagram
were conﬁrmed by Facebook in March 2017 with two bug
bounty awards, which demonstrate the effectiveness of the
stealthy data inﬂation attack. Generally, it is applicable to
any open port with the caching or proxy functionality, e.g.,
most of the 997 apps with a local random TCP port (see Sec.
III-C1) and Corona Game Engine SDK (in Table III). The only
exception we have seen is the open port on YouTube, which
uses a checksum to restrict opening illegal URLs.
P5: Insecure analytics interface. Lastly, we present a
special vulnerability pattern that appears in open port used
as an analytics interface, which is used by host apps/SDKs’
campaign websites to retrieve analytics information. Fig. 6
depicts its basic architecture,
in which a victim user has
installed an app a that hosts an analytic open port p (with
a ﬁxed port number num). Whenever a user visits a web
page w (that has a campaign relationship with a) from her
mobile browser or from user-shared links in social apps, w
sends an HTTP request to http://127.0.0.1:num/cmd
with the by-default added HTTP referrer pointing to the URL
of w. The analytics app receives the request over its open port
10
Host App aBrowser/Social AppspCheck HTTP RefererExecute commandsBrowsing InterfaceWeb Page wHTTP requestResult, if anyIf HTTP referrer is legalPort(a) WeChat’s voice call (DoS at ∼26s).
(c) AirDroid’s ﬁle transmission (DoS at ∼13s).
Fig. 7: DoS attacks against open ports. The x-axis is the time in seconds, and the y-axis is the victim apps’ throughput (packets/sec).
(b) YouTube’s video streaming (DoS at ∼32s).
and checks whether the request is from a campaign website
through the HTTP referrer. If it is, the app executes one of its
pre-deﬁned commands as requested by the cmd parameter. A
common command is geolocation, upon executing which
the geographical location of the device is returned to the web
page.
However, such open-port usage is fundamentally insecure,
because any other local apps or even a remote adversary (if the
open port bound to the host IP address, which is often the case)
can set an arbitrary referrer in their HTTP requests to execute
privileged commands (e.g., retrieving IMEI and list of installed
apps). We uncover this class of vulnerabilities in Sina Weibo,
Alibaba AMap SDK, and two Baidu SDKs (which were ﬁxed
quite long ago and thus not in Table III). We reported these
issues to the vendors in the ﬁrst half of 2015, much earlier
than the subsequent industrial reports (e.g., WormHole [32])5.
B. Denial-of-Service Attack Evaluation
We now evaluate denial-of-service (DoS) attacks against
mobile open ports and their effectiveness. Note that
this
analysis differs from those in Sec. V-A in that DoS attacks
are typically possible even without exploiting any code-level
vulnerabilities. Different from the traditional DoS attacks that
often require a large number of bots (i.e., compromised com-
puters), we show that DoS targeting mobile open ports can
be performed by a single adversary using much less powerful
devices (e.g., just one laptop), because the victim has much
more limited computation, memory, and networking capabil-
ities. Speciﬁcally, an adversary can ﬁrst scan a WiFi/LTE
network to identify targets (those with open ports) and then
send large (number and/or size of) packets to deny victims
from certain services or downgrade their quality of service.
Therefore, this DoS attack is mostly effective for UDP ports
that are open for communication purposes (recall that we have
discovered 1,390 apps containing such ports; see Sec. III-C).
Fig. 7 shows the experimental results of DoS attacks
against WeChat, YouTube, and AirDroid in an isolated WiFi
network. The victim is a Samsung S6 edge+ phone, and we
use hping3 [19] on a MacBook Pro (with 2.9 GHz CPU
and 16GB memory) to ﬂood UDP ports opened by WeChat
and YouTube as well as TCP ports opened by AirDroid. Fig.
7(a) shows that the throughput of WeChat’s voice call drops
to 50% when the attack launches at
the 26-second mark,
and is fully denied at around 50 seconds (forcing WeChat to
automatically terminate the voice call). Fig. 7(b) and Fig. 7(c)
5A list of our original reports (in Chinese) can be found at https://tinyurl.
com/opWooyun, and cached at https://tinyurl.com/opDropbox.
11
(a) A list of networks scanned.
(b) Detailed results of one scan.
Fig. 8: User interfaces in NetMon for network scans.
respectively show that the throughput of video streaming on
YouTube and ﬁle transmission on AirDroid drop signiﬁcantly
right after the attack begins. Cellular networks, on the other
hand, are less affected by such DoS attacks according to
our tests, mainly because of their limited uplink throughput
(attackers have to also use cellular to launch DoS as user
devices in most cellular networks use private IP addresses; see
our measurements in Sec. V-C). We expect the effectiveness
of the attacks on cellular networks be signiﬁcantly improved
when client devices are assigned with public IP addresses and
in the upcoming 5G era [1], [20].
C. Inter-device Connectivity Measurement
Most of the vulnerabilities and attacks demonstrated so far
rely on connectivity to the victim device. To measure the extent
to which such inter-device connectivity is allowed in public and
private networks around the world, we embed a second service,
the network testing component, in NetMon. Fig. 8 presents
its two user interfaces, in which Fig. 8(a) shows a partial
list of networks scanned and the detailed results are shown
in Fig. 8(b). We can see that NetMon provides most of the
functionality in typical network scanning apps (for attracting
users to use this service in our app), and performs tests for
the inter-device connectivity. The following three policies are
tested in both WiFi and cellular networks, an effort never
pursued before.
Inter-Pingable: whether an ICMP Ping packet could be trans-
mitted from one device to another. This tests the basic
inter-device connectivity of a network. To measure it, we
leverage the ping program to issue ICMP requests to
neighboring hosts whose IP addresses share a common
24-bit preﬁx (i.e., ping around 28 IP addresses).
Inter-TCPable and Inter-UDPable: whether
TCP/UDP
packet could be transmitted from one device to another.
To test
them, NetMon launches TCP SYN and UDP
a
Wireshark IO Graphs: WeChat_UDP32857_phone010203040506070Time (s)0255075100125150Packets/sWireshark IO Graphs: Youtube_UDP6435208162432404856Time (s)0400800120016002000240028003200Packets/sWireshark IO Graphs: airdroid048121620242832Time (s)0250050007500100001250015000Packets/sscans to all Pingable hosts. In each scan, NetMon sends
a SYN packet or a small UDP packet to a target port
number (randomly selected from the list of TCP/UDP
open ports based on the results in Sec. III-C). If NetMon
could receive a response (including failure packets, e.g.,
RST for TCP and ICMP port unreachable for UDP), we
conclude that the inter-TCPable or inter-UDPable policy
is employed.
Through the crowdsourcing deployment discussed in Sec.
III-C, NetMon performs network connectivity tests in the wild.
Similar to its port monitoring component, the network testing
component
is also very energy efﬁcient — only 33.01KB
consumed on average in one scan in an LTE network. By
gathering and aggregating 6,391 network scans, we report the
result and analysis on the inter-device connectivity for the
ﬁrst time for 224 cellular networks and 2,181 WiFi networks
worldwide.
We ﬁnd that almost 50% of the cellular networks (111
networks, 49.6%) allow their devices to ping each other,
including AT&T, T-Mobile, Verizon Wireless, China Mobile,
EE (in UK), Orange (in France), Airtel (in India), Celcom (in
Malaysia), and SingTel (in Singapore). All of these 111 cellular
networks also allow cross-device TCP packets, but the inter-
UDPable tests fail in 14 networks, probably because they ﬁlter
the ICMP unreachable messages sent by a closed UDP port.
Note that we did not test networks that ﬁlter Ping packets while
allowing TCP/UDP packets.
WiFi networks seem to have even worse security in terms
of the inter-device connectivity in that 83.6% (1,823 out of
2,181) allow devices to ping each other. The inter-TCPable
and inter-UDPable policies are also generally supported among
the inter-Pingable WiFi networks with 95.6% and 88.3%
success rates, respectively. The unsuccessful cases are probably
due to their WiFi routers/APs ﬁltering TCP RST and ICMP
unreachable packets. University campus WiFi, enterprise ofﬁce
WiFi, airport WiFi, hotel WiFi, public transportation WiFi,
and department store WiFi are among those that support inter-
device connectivity. Allowing inter-device connectivity in these
public-domain WiFi will facilitate remote open-port attacks.
Furthermore, 23 cellular networks (10% of all cellular net-
works tested) and 10 WiFi networks (including the “eduroam”
WiFi provided by two universities in the US) assign public IP
addresses to their users, which allow not only intra-network
connectivity but connectivity from any host on the Internet.
This is astonishing as it opens up exploit opportunities to any
adversary on the Internet.
VI. MITIGATION SUGGESTIONS
To mitigate the threats of open ports, we propose counter-
measures for different stakeholders in the Android ecosystem,
including app developers, SDK producers, system vendors, and
network operators.
App developers. The ﬁrst thing developers need to assess
is whether an open port is necessary. For example, for local
inter-app communication, using LocalServerSocket [23]
is more secure than establishing ServerSocket. If open
ports are really needed, developers should minimize the attack
surface by avoiding insecure coding behaviors as discussed
in Sec. IV-E and employ effective authentication against un-
intended access. Moreover, we suggest developers to use our
NetMon app to evaluate a third-party SDK before including it.
SDK producers. Similarly, SDK producers should use
open ports only when there are no better alternatives. For
example, Facebook could reconsider its caching mechanism
via an open port
in its SDK. In particular, SDKs should
abandon using open ports for the analytics purpose, because it
is fundamentally insecure (see Sec. V-A).
System vendors. Besides having vendors assess open ports
in their built-in apps carefully, Google can consider taking
more proactive measures. For example, a new permission
dedicated for the open port functionality, beyond the general
INTERNET permission, could be introduced, so that both
developers and users are better aware of it. As explained in Sec.
IV-A, Google could also modify existing ServerSocket
APIs to better cope with open ports in mobile environment.
Network operators. To stop remote open-port attacks, a
quick mitigation is to restrict inter-device connectivity. For
cellular or certain public WiFi networks (e.g., in airports),
it is reasonable for them to prioritize the security for the
safety of their users. Private WiFi networks (e.g., enterprise
networks) may even leverage software-deﬁned networking to
better regulate such connectivity.
VII. RELATED WORK
Open port research. Traditionally, research on open ports
focus on DoS attacks [64] and Internet scanning studies [53],
[72]. This has been changed in the mobile era — more speciﬁc
attacks [57], [79], [83] have been demonstrated on open ports
of mobile apps. Another relevant study is on Android Unix
domain sockets [71], as discussed in our background section
(Sec. II). However, studies speciﬁcally focused on mobile open
ports are not available until recently [52].
Although OPAnalyzer [52] is closely related to our paper,
there are a number of signiﬁcant differences. The foremost
difference is in the objectives. We aim at a systematic un-
derstanding of open ports in the wild, while OPAnalyzer
focused on detecting vulnerable apps that satisfy the taint-
style code patterns. The approaches adopted are therefore
very different. For example, there are no crowdsourcing or
networking analysis in OPAnalyzer, and its static analysis
does not resolve open-port parameters for an in-depth analysis
(e.g., identifying SDKs and diagnosing insecure API usages)
as our paper does. Furthermore, OPAnalyzer does not show
any results for UDP ports and built-in apps.
Crowdsourcing for security. With the high popularity of
mobile apps, it becomes realistic to leverage the crowd to
discover security problems in the wild. By deploying NetMon
to Google Play for a crowdsourcing study, we are among
the ﬁrst in this line of research. Other related works include
Netalyzr [75] for studying middleboxes in cellular networks,
FBS-Radar [56] for uncovering fake base stations in the wild,
UpDroid [74] for monitoring sensitive API behaviors on non-
rooted devices, and Haystack [69] for detecting mobile apps’
privacy leakage via on-device app trafﬁc analysis [80].