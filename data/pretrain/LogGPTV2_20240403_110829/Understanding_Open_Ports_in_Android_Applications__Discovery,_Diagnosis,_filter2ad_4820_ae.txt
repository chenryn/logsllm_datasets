### Representative Apps Affected by Vulnerabilities

| ID | Apps |
| --- | --- |
| P1 | Samsung Gear, Cloud Mail.Ru, Vaulty, ES File Explorer |
| P2 | Tencent XG Push SDK, Baidu Root, Coolpad V1-C Phone |
| P3 | Skype, Instagram |
| P4 | Facebook SDK, Instagram |
| P5 | Sina Weibo, Alibaba & Baidu SDKs |

### Vulnerability Patterns

#### P1: No or Insufficient Checks for Information Transmission
One major use of open TCP ports is to transmit data to connecting parties. However, apps may employ weak or no authentication, allowing unauthorized access to sensitive content.

**Examples:**
- **ES File Explorer:** The always-on TCP port 59777 performs some security checks by validating IP addresses with a whitelist. However, an implicitly exposed Activity component can add a remote adversary’s IP address to the whitelist.
- **Cloud Mail.Ru:** TCP port 1234 leaks users’ videos at `http://127.0.0.1:1234//filename`, where the filename can be leaked by eavesdropping on broadcast messages.
- **Vaulty:** Leaks users’ sensitive videos and pictures through port 1562, requiring only an integer starting from one, not even the target filename.

**Samsung Gear and Other Built-in Apps:**
- **Accessory Service:** Provides automatic service discovery via TCP port 8230 but replies with sensitive information (e.g., GT-I9305;samsung;UserName(GT-I9305);SWatch;SAP_TokenId(omitted)) to any connecting party. It is challenging to return only appropriate information in such UPnP-like apps.

#### P2: No or Insufficient Checks for Command Execution
Open ports are also used to execute commands sent by authorized clients. However, these command interfaces are often not well protected.

**Examples:**
- **Tencent XG Push SDK:** Used for executing push commands.
- **Coolpad V1-C Phone's vpowerd System Daemon:** Used for shutdown and reboot commands.
- **Baidu Root:** A popular rooting app in China, suffers from this vulnerability in its TCP port 10010, which is bound to the host IP address.

**Debugging Interfaces:**
- **MIT App Inventor and Titanium SDK:** Use open ports for instant debugging or "living programming." These interfaces must be disabled in release versions to prevent sensitive debugging information from being leaked.

#### P3: Crash-of-Service (CoS)
Apps can crash when receiving malformed inputs from their open ports, leading to a Crash-of-Service (CoS).

**Examples:**
- **Instagram:** Can be crashed by sending it an invalid HTTP URL via the open ports.
- **SIP VoIP Apps:** Using standard VoIP port 5060 can be victims of CoS attacks.
- **Skype:** Uses UDP ports for control messages and media data exchange. A remote adversary can terminate an ongoing session by sending two packets to the first UDP port, leading to an effective CoS attack without involving application-layer packets.

#### P4: Stealthy Data Inflation
Many open ports are used for caching purposes or as connection proxies in VPN apps. These ports can be exploited to launch stealthy data inflation attacks.

**Examples:**
- **Facebook SDK:** Uses open ports to cache video-based advertisements. An adversary can send URLs pointing to large files to inflate the victim app's cellular data usage in the background.
- **Instagram:** Builds its own cache servers using the AndroidVideoCache library, which supports opening arbitrary URLs via the open ports.

**Mitigation:**
- **YouTube:** Uses a checksum to restrict opening illegal URLs, making it an exception to this vulnerability.

#### P5: Insecure Analytics Interface
Open ports used as analytics interfaces can be insecure, allowing any local app or remote adversary to set arbitrary referrers in HTTP requests to execute privileged commands.

**Examples:**
- **Sina Weibo, Alibaba AMap SDK, and Baidu SDKs:** These apps were found to have this class of vulnerabilities, which were reported and fixed in early 2015.

### Denial-of-Service (DoS) Attack Evaluation
We evaluate DoS attacks against mobile open ports and their effectiveness. Unlike traditional DoS attacks, these can be performed by a single adversary using less powerful devices due to the limited capabilities of mobile devices.

**Experimental Results:**
- **WeChat, YouTube, and AirDroid:** In an isolated WiFi network, hping3 was used to flood UDP and TCP ports, resulting in significant drops in throughput and service denial.

### Inter-device Connectivity Measurement
To measure the extent of inter-device connectivity in public and private networks, we embedded a network testing component in NetMon. This component tests the following policies in both WiFi and cellular networks:

- **Inter-Pingable:** Whether an ICMP Ping packet can be transmitted from one device to another.
- **Inter-TCPable and Inter-UDPable:** Whether TCP/UDP packets can be transmitted from one device to another.

**Findings:**
- **Cellular Networks:** Almost 50% allow devices to ping each other, including major networks like AT&T, T-Mobile, and China Mobile.
- **WiFi Networks:** 83.6% allow devices to ping each other, with high success rates for inter-TCPable and inter-UDPable policies.

### Mitigation Suggestions
To mitigate the threats of open ports, we propose countermeasures for different stakeholders in the Android ecosystem:

- **App Developers:**
  - Assess the necessity of open ports.
  - Use LocalServerSocket for local inter-app communication.
  - Minimize the attack surface and employ effective authentication.
  - Use NetMon to evaluate third-party SDKs.

- **SDK Producers:**
  - Use open ports only when there are no better alternatives.
  - Reconsider caching mechanisms via open ports.
  - Abandon using open ports for analytics purposes.

- **System Vendors:**
  - Carefully assess open ports in built-in apps.
  - Introduce a new permission dedicated to open port functionality.
  - Modify existing ServerSocket APIs to better cope with mobile environments.

- **Network Operators:**
  - Restrict inter-device connectivity in cellular and certain public WiFi networks.
  - Leverage software-defined networking to regulate connectivity in private networks.

### Related Work
- **Open Port Research:** Traditional research focuses on DoS attacks and Internet scanning studies. Recent studies have demonstrated specific attacks on mobile apps' open ports.
- **Crowdsourcing for Security:** With the popularity of mobile apps, crowdsourcing has become a viable method for discovering security issues in the wild. Our work with NetMon is among the first in this line of research.