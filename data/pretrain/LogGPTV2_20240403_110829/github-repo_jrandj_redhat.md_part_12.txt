		mount -a # confirm
		vi /etc/yum.repos.d/image.repo
		#####
        #[BaseOS]
		#name=BaseOS
		#baseurl=file:///mnt/cdrom/BaseOS
		#enabled=1
		#gpgenabled=1
		#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
		#
        #[AppStream]
		#name=AppStream
		#baseurl=file:///mnt/cdrom/AppStream
		#enabled=1
		#gpgenabled=1
		#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
        #####
		yum repolist # confirm
        ```
	* On rhcsa3, add HTTP port 8300/tcp to the SELinux policy database:
	    ```shell
		semange port -l | grep http # 8300 not in list for http_port_t
		semanage port -a -t http_port_t -p tcp 8300
        ```
	* On rhcsa3, create VDO volume vdo1 on the 4GB disk with logical size 16GB and mounted with Ext4 structures on `/mnt/vdo1`:
	    ```shell
		TBC
        ```
	* Configure NFS service on rhcsa3 and share `/rh_share3` with rhcsa4. Configure AutoFS direct map on rhcsa4 to mount `/rh_share3` on `/mnt/rh_share4`. User user80 (create on both systems) should be able to create files under the share on the NFS server and under the mount point on the NFS client:
	    ```shell
		# on rhcsa3
		mkdir /rh_share3
		chmod 777 rh_share3
		useradd user80
		passwd user80
		# enter Temp1234
		dnf install cifs-utils -y
		systemctl enable nfs-server.service --now
		firewall-cmd --add-service=nfs --permanent
		firewall-cmd --reload
		vi /etc/exports
		# add line rh_share3 rhcsa4(rw)
		exportfs -av
		# on rhcsa4
		useradd user80
		passwd user80
		# enter Temp1234
		mkdir /mnt/rh_share4
		chmod 777 rh_share4
		# mount rhcsa3:/rh_share3 /mnt/nfs
		# mount | grep nfs # get details for /etc/fstab
		# vi /etc/fstab
		# add line rhcsa3:/rh_share3 /mnt/rh_share4 nfs4 _netdev 0 0
		# above not required with AutoFS
		dnf install autofs -y
		vi /etc/auto.master
		# add line /mnt/rh_rhcsa3 /etc/auto.master.d/auto.home
		vi /etc/auto.master.d/auto.home
		# add line * -rw rhcsa3:/rh_share3
        ```
	* Configure NFS service on rhcsa4 and share the home directory for user user60 (create on both systems) with rhcsa3. Configure AutoFS indirect map on rhcsa3 to automatically mount the home directory under `/nfsdir` when user60 logs on to rhcsa3:
	    ```shell
		# on rhcsa3
		useradd user60
		passwd user60
		# enter Temp1234
		dnf install autofs -y
		mkdir /nfsdir
		vi /etc/auto.master
		# add line for /nfsdir /etc/auto.master.d/auto.home
		vi /etc/auto.master.d/auto.home
		# add line for * -rw rhcsa4:/home/user60
		systemctl enable autofs.service --now
		# on rhcsa4
		useradd user60
		passwd user60
		# enter Temp1234
		vi /etc/exports
		# add line for /home rhcsa3(rw)
		exportfs -va	
        ```
	* On rhcsa4, create Stratis pool pool1 and volume str1 on a 1GB disk, and mount it to `/mnt/str1`:
	    ```shell
		dnf provides stratis
		dnf install stratis-cli -y
		systemctl enable stratisd.service --now
		stratis pool create pool1 /dev/sdc
		stratis filesystem create pool1 vol1
		mkdir /mnt/str1
		mount /stratis/pool1/vol1 /mnt/str1
		blkid # get information for /etc/fstab
		vi /etc/fstab
		# add line for UUID /mnt/str1 xfs defaults 0 0	
        ```
	* On rhcsa4, expand Stratis pool pool1 using the other 1GB disk. Confirm that `/mnt/str1` sees the storage expansion:
	    ```shell
		stratis pool add-data pool1 /dev/sdb
		stratis blockdev # extra disk visible
        ```
	* On rhcsa3, create a group called group30 with GID 3000, and add user60 and user80 to this group. Create a directory called `/sdata`, enable setgid bit on it, and add write permission bit for the group. Set ownership and owning group to root and group30. Create a file called file1 under `/sdata` as user user60 and modify the file as user80 successfully:
	    ```shell
		TBC
        ```
	* On rhcsa3, create directory `/dir1` with full permissions for everyone. Disallow non-owners to remove files. Test by creating file `/tmp/dir1/stkfile1` as user60 and removing it as user80:
	    ```shell
		TBC
        ```
	* On rhcsa3, search for all manual pages for the description containing the keyword "password" and redirect the output to file `/tmp/man.out`:
	    ```shell
		man -k password >> /tmp.man.out
		# or potentially man -wK "password" if relying on the description is not enough
        ```
	* On rhcsa3, create file lnfile1 under `/tmp` and create one hard link `/tmp/lnfile2` and one soft link `/boot/file1`. Edit lnfile1 using the links and confirm:
	    ```shell
		cd /tmp
		touch lnfile1
		ln lnfile1 lnfile2
		ln -s /boot/file1 lnfile1
        ```
	* On rhcsa3, install module postgresql version 9.6:
	    ```shell
		dnf module list postgresql # stream 10 shown as default
		dnf module install postgresql:9.6
		dnf module list # stream 9.6 shown as installed
        ```
	* On rhcsa3, add the http service to the "external" firewalld zone persistently:
	    ```shell
		firewall-cmd --zone=external --add-service=http --permanent
        ```
	* On rhcsa3, set SELinux type shadow_t on a new file testfile1 in `/usr` and ensure that the context is not affected by a SELinux relabelling:
	    ```shell
		cd /usr
		touch /usr/testfile1
		ll -Zrt # type shown as unconfined_u:object_r:usr_t:s0
		semange fcontext -a -t /usr/testfile1
		restorecon -R -v /usr/testfile1
        ```
	* Configure password-less ssh access for user60 from rhcsa3 to rhcsa4:
	    ```shell
		sudo su - user60
		ssh-keygen # do not provide a password
		ssh-copy-id rhcsa4 # enter user60 pasword on rhcsa4
        ```
1. RHCSA 8 Practise Exam
	* Interrupt the boot process and reset the root password:
	    ```shell
		# interrupt boot process and add rd.break at end of linux line
		mount -o remount, rw /sysroot
		chroot /sysroot
		passwd 
		# enter new passwd
		touch /.autorelabel
		# you could also add enforcing=0 to the end of the Linux line to avoid having to do this
		# ctrl + D
		reboot
        ```
	* Repos are available from the repo server at http://repo.eight.example.com/BaseOS and http://repo.eight.example.com/AppStream for you to use during the exam. Setup these repos:
	    ```shell
		vi /etc/yum.repos.d/localrepo.repo
		#[BaseOS]
		#name=BaseOS
		#baseurl=http://repo.eight.example.com/BaseOS
		#enabled=1
		#
		#[AppStream]
		#name=AppStream
		#baseurl=http://repo.eight.example.com/AppStream
		#enabled=1
		dnf repolist # confirm
		# you could also use dnf config-manager --add-repo
        ```
	* The system time should be set to your (or nearest to you) timezone and ensure NTP sync is configured:
	    ```shell
		timedatectl set-timezone Australia/Sydney
		timedatectl set-ntp true
		timedatectl status # confirm status
        ```
	* Add the following secondary IP addresses statically to your current running interface. Do this in a way that doesn’t compromise your existing settings:
	    ```shell
		# IPV4 - 10.0.0.5/24
		# IPV6 - fd01::100/64
		nmcli con edit System\ eth0
		goto ipv4.addresses 
		add 10.0.0.5/24
		goto ipv6.addresses 
		add fd01::100/64
		back
		save
		nmcli con edit System\ eth1
		goto ipv4.addresses 
		add 10.0.0.5/24
		goto ipv6.addresses 
		add fd01::100/64
		back
		save
		nmcli con reload
		# enter yes when asked if you want to set to manual
        ```
	* Enable packet forwarding on system1. This should persist after reboot:
	    ```shell
		vi /etc/sysctl.conf
		# add line for net.ipv4.port_forward=1
        ```
	* System1 should boot into the multiuser target by default and boot messages should be present (not silenced):
	    ```shell
		systemctl set-default multi-user.target
		vi /etc/default/grub
		# remove rhgb quiet from GRUB_CMDLINE_LINUX
		grub2-mkconfig -o /boot/grub2/grub.cfg
		reboot
        ```
	* Create a new 2GB volume group named “vgprac”:
	    ```shell
		lsblk
		# /dev/sdb is available with 8GB
		# the file system already has ~36MB in use and is mounted to /extradisk1
		umount /dev/sdb
		parted /dev/sdb
		mklabel
		# enter msdos
		mkpart
		# enter primary
		# enter xfs
		# enter 0
		# enter 2.1GB
		set
		# enter 1
		# enter lvm
		# enter on
		vgcreate vgprac /dev/sdb1
		# enter y to wipe	
        ```
	* Create a 500MB logical volume named “lvprac” inside the “vgprac” volume group:
	    ```shell
		lvcreate --name lvprac -L 500MB vgprac
        ```
	* The “lvprac” logical volume should be formatted with the xfs filesystem and mount persistently on the `/mnt/lvprac` directory:
	    ```shell
		mkdir /mnt/lvprac
		mkfs.xfs /dev/mapper/vgprac-lvprac
		vi /etc/fstab
		# comment out line for old /dev/sdb
		# add line for /dev/mapper/vgprac-lvprac
		mount -a
		df -h # confirm mounted
        ```
	* Extend the xfs filesystem on “lvprac” by 500MB:
	    ```shell
		lvextend -r -L +500MB /dev/vgprac/lvprac
        ```
	* Use the appropriate utility to create a 5TiB thin provisioned volume:
	    ```shell
		lsblk
		# /dev/sdc is available with 8GB
		dnf install vdo kmod-vdo -y
		umount /extradisk2
		vdo create --name=myvolume --device=/dev/sdc --vdoLogicalSize=5T --force
		vi /etc/fstab
		# comment out line for old /dev/sdc
        ```
	* Configure a basic web server that displays “Welcome to the web server” once connected to it. Ensure the firewall allows the http/https services:
	    ```shell
		vi /var/www/html/index.html
		# add line "Welcome to the web server"
		systemctl restart httpd.service
		curl http://localhost
		# success
		# from server1
		curl http://server2.eight.example.com
		# no route to host shown
		# on server2
		firewall-cmd --add-port=80/tcp --permanent
		firewall-cmd --reload
		# from server1
		curl http://server2.eight.example.com
		# success
        ```
	* Find all files that are larger than 5MB in the /etc directory and copy them to /find/largefiles:
	    ```shell
		mkdir -p /find/largefiles
		find /etc/ -size +5M -exec cp {} /find/largefiles \;
		# the {} is substituted by the output of find, and the ; is mandatory for an exec but must be escaped
        ```
	* Write a script named awesome.sh in the root directory on system1. If “me” is given as an argument, then the script should output “Yes, I’m awesome.” If “them” is given as an argument, then the script should output “Okay, they are awesome.” If the argument is empty or anything else is given, the script should output “Usage ./awesome.sh me|them”:
	    ```shell
		vi /awesome.sh
		chmod +x /awesome.sh
		# contents of awesome.sh
		##!/bin/bash
		#if [ $1 = "me" ]; then
		#	echo "Yes, I'm awesome."
		#elif [ $1  = "them"]; then
		#	echo "Okay, they are awesome."
		#else
		#	echo "Usage /.awesome.sh me|them"
		#fi
		#note that = had to be used and not -eq
        ```
	* Create users phil, laura, stewart, and kevin. All new users should have a file named “Welcome” in their home folder after account creation. All user passwords should expire after 60 days and be at least 8 characters in length. Phil and laura should be part of the “accounting” group. If the group doesn’t already exist, create it. Stewart and kevin should be part of the “marketing” group. If the group doesn’t already exist, create it:
	    ```shell
		groupadd accounting
		groupadd marketing
		vi /etc/security/pwquality.conf
		# uncomment out the line that already had minlen = 8
		mkdir /etc/skel/Welcome
		useradd phil -G accounting
		useradd laura -G accounting
		useradd stewart -G marketing
		useradd kevin -G marketing
		chage -M 60 phil
		chage -M 60 laura
		chage -M 60 stewart
		chage -M 60 kevin
		chage -l phil # confirm
		# can also change in /etc/login.defs
        ```
	* Only members of the accounting group should have access to the `/accounting` directory. Make laura the owner of this directory. Make the accounting group the group owner of the `/accounting` directory:
	    ```shell
		mkdir /accounting
		chmod 770 /accounting
		chown laura:accounting /accounting
        ```
	* Only members of the marketing group should have access to the `/marketing` directory. Make stewart the owner of this directory. Make the marketing group the group owner of the `/marketing` directory:
	    ```shell
		mkdir /marketing
		chmod 770 /marketing
		chown stewart:marketing /marketing
        ```
	* New files should be owned by the group owner and only the file creator should have the permissions to delete their own files:
	    ```shell
		chmod +ts /marketing
		chmod +ts /accounting
        ```
	* Create a cron job that writes “This practice exam was easy and I’m ready to ace my RHCSA” to `/var/log/messages` at 12pm only on weekdays:
	    ```shell
		crontab -e
		#* 12 * * 1-5 echo "This practise exam was easy and I'm ready to ace my RHCSA" >> /var/log/messagees
		# you can look at info crontab if you forget the syntax
        ```
## RHCE
- [Understand core components of Ansible](#Understand-core-components-of-Ansible)
- [Install and configure an Ansible control node](#Install-and-configure-an-Ansible-control-node)
- [Configure Ansible managed nodes](#Configure-Ansible-managed-nodes)
- [Script administration tasks](#Script-administration-tasks)
- [Create Ansible plays and playbooks](#Create-Ansible-plays-and-playbooks)
- [Use Ansible modules for system administration tasks that work with](#Use-Ansible-modules-for-system-administration-tasks-that-work-with)
- [Work with roles](#Work-with-roles)
- [Use advanced Ansible features](#Use-advanced-Ansible-features)
### Understand core components of Ansible
1. Inventories