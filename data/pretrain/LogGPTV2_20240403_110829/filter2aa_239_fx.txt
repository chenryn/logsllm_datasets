    private void OnAddBook(object sender, RoutedEventArgs e)
    {
      ((this.FindResource("books") as ObjectDataProvider).Data as IList).
        Add(new Book("HTML and CSS: Design and Build Websites",
            "Wiley", "978-1118-00818-8"));
    }
赋予DataContext的对象必须实现INotifyCollectionChanged接口。这个接口定义了由
WPF应用程序使用的CollectionChanged事件。除了用自定义集合类实现这个接口之外，还
可以使用泛型集合类ObservableCollection，该类在WindowsBase程序集的
System.Collections.ObjectModel名称空间中定义。现在，把一个新列表项添加到集合中，
这个新列表项会立即显示在列表框中（代码文件
BooksDemo/Models/BooksRepository.cs）。
    public class BooksRepository
    {
      private ObservableCollection _books = new ObservableCollection(
);
      // etc.
      public IEnumerable GetBooks() => _books;
    }
34.7.12 动态添加选项卡中的项
在原则上，动态添加列表项与在选项卡控件中动态添加用户控件是一样的。目前，选
项卡中的项使用TabControl类中Items属性的Add方法来动态添加。下面的示例直接从代码
隐藏中引用TabControl。而使用数据绑定，选项卡中的项信息可以添加到
ObservableCollection中。
BookSample应用程序中的代码现在改为给TabControl使用数据绑定。首先，定义类
UIControlInfo，这个类包含的属性在TabControl中用于数据绑定。Title属性用于给选项卡
中的项显示标题信息，Content属性用于显示该项的内容：
    using System.Windows.Controls;
    namespace Wrox.ProCSharp.WPF
    {
      public class UIControlInfo
      {
        public string Title { get; set; }
        public UserControl Content { get; set; }
      }
    }
现在需要一个可观察的集合，以允许选项卡控件刷新其项的信息。userControls是
MainWindow类的一个成员变量。属性Controls用于数据绑定，它返回集合（代码文件
BooksDemoRibbon/MainWindow. xaml.cs）：
      private ObservableCollection _userControls =
          new ObservableCollection();
      public IEnumerable Controls => _userControls;
在XAML代码中修改了TabControl。ItemsSource属性绑定到Controls属性上。现在，需
要指定两个模板，一个模板ItemTemplate定义了项控件的标题，用ItemTemplate指定的
DataTemplate使用一个TextBlock元素，在项控件的标题中显示Text属性的值。另一个模板
是ContentTemplate，它指定使用ContentPresenter将绑定被绑定项的Content属性：
现在，事件处理程序可以改为创建新的UIControlInfo对象，把它们添加到可观察的集
合中，而不是创建TabItem控件。与使用代码隐藏相比，修改项和内容模板是定制外观的
一种更简单方式：
    private void OnShowBooksList(object sender, ExecutedRoutedEventArgs e)
    {
      var booksUI = new BooksUC();
      userControls.Add(new UIControlInfo
      {
        Title = "Books List",
        Content = booksUI
      });
    }
34.7.13 数据模板选择器
第33章介绍了如何用模板来定制控件，还讨论了如何创建数据模板，为特定的数据类
型定义外观。数据模板选择器可以为同一个数据类型动态地创建不同的数据模板。数据模
板选择器在派生自DataTemplateSelector基类的类中实现。
下面实现的数据模板选择器根据发布者选择另一个模板。在用户控件的资源中，定义
这些模板。一个模板可以通过键名wroxTemplate来访问；另一个模板的键名是
dummiesTemplate；第3个模板的键名是bookTemplate（代码文件
BooksDemoLib/Controls/BooksUC.xaml）：
要选择模板，BookDataTemplateSelector类必须重写来自基类DataTemplateSelector的
SelectTemplate方法。其实现方式根据Book类的Publisher属性选择模板（代码文件
BooksDemoLib/Utilities/Book-TemplateSelector.cs）：
    using System.Windows;
    using System.Windows.Controls;
    using BooksDemo;
    namespace BooksDemo.Utilities
    {
      public class BookTemplateSelector : DataTemplateSelector
      {
        public override DataTemplate SelectTemplate(object item,
          DependencyObject container)
        {
          if (item ! = null && item is Book)
          {
          var book = item as Book;
          switch (book.Publisher)
          {
            case "Wrox Press":
              return (container as FrameworkElement).FindResource(
                  "wroxTemplate") as DataTemplate;
            case "For Dummies":
              return (container as FrameworkElement).FindResource(
                  "dummiesTemplate") as DataTemplate;
            default:
              return (container as FrameworkElement).FindResource(
                  "bookTemplate") as DataTemplate;
          }
          }
          return null;
        }
      }
    }
要从XAML代码中访问BookDataTemplateSelector类，这个类必须在Window资源中定
义（代码文件BooksDemoLib/Controls/BooksUC.xaml）：
现在可以把选择器类赋予ListBox的ItemTemplateSelector属性：
运行这个应用程序，可以看到基于不同发布者的不同数据模板，如图34-22所示。
图34-22
34.7.14 绑定到XML上
WPF数据绑定还专门支持绑定到XML数据上。可以将XmlDataProvider用作数据源，
使用XPath表达式绑定元素。为了以层次结构显示，可以使用TreeView控件，通过
HierarchicalDataTemplate为对应项创建视图。
下面包含Book元素的XML文件将用作下一个例子的数据源（代码文件
XmlBindingSample/Books.xml）：
        Professional C# 2012
        Wrox Press
        Christian Nagel
        Jay Glynn
        Morgan Skinner
        Beginning Visual C# 2010
        Wrox Press
        Karli Watson
        Christian Nagel
        Jacob Hammer Pedersen
        Jon D. Reid
        Morgan Skinner
与定义对象数据提供程序类似，也可以定义XML数据提供程序。ObjectDataProvider
和XmlDataProvider都派生自同一个DataSourceProvider基类。在示例的XmlDataProvider
中，把Source属性设置为引用XML文件books.xml。XPath属性定义了一个XPath表达式，
以引用XML根元素Books。Grid元素通过DataContext属性引用XML数据源。通过网格的数
据上下文，因为所有Book元素都需要列表绑定，所以把XPath表达式设置为Book。在网格
中，把列表框元素绑定到默认的数据上下文中，并使用DataTemplate将标题包含在
TextBlock元素中，作为列表框的项。在网格中，还有3个标签元素，把它们的数据绑定设
置为XPath表达式，以显示标题、出版社和ISBN号（代码文件
XmlBindingSample/MainWindow.xaml）。
图34-23显示了XML绑定的结果。
图34-23
  注意： 如果XML数据应以层次结构的方式显示，就可以使用TreeView控件。
34.7.15 绑定的验证和错误处理
在把数据用于.NET对象之前，有几个选项可用于验证用户的数据，这些选项如下：
● 处理异常
● 数据错误信息的处理
● 数据错误信息的通知
● 自定义验证规则
1．处理异常
这里说明的一个选项是，如果在SomeData类中设置了无效值，则这个.NET类就抛出
一个异常。Value1属性只接受大于等于5且小于12的值（代码文件
ValidationSample/SomeData.cs）：
    public class SomeData
    {
      private int _value1;
      public int Value1 {
        get { return _value1; }
        set
        {
        if (value  12)
        {
          throw new ArgumentException(
              "value must not be less than 5 or greater than 12");
        }
        _value1 = value;
        }
      }
    }
在MainWindow类的构造函数中，初始化SomeData类的一个新对象，并把它传递给
DataContext，用于数据绑定（代码文件ValidationSample/MainWindow.xaml.cs）：
    public partial class MainWindow: Window
    {
      private SomeData _p1 = new SomeData { Value1 = 11 };
      public MainWindow()
      {
        InitializeComponent();
        this.DataContext = _p1;
      }
事件处理程序方法OnShowValue显示一个消息框，以显示SomeData实例的实际值：
    private void OnShowValue(object sender, RoutedEventArgs e)
    {
      MessageBox.Show(_p1.Value1.ToString());
    }
通过简单的数据绑定，把文本框的Text属性绑定到Value1属性上。如果现在运行应用
程序，并试图把该值改为某个无效值，那么单击Submit按钮可以验证该值永远不会改变。
WPF会捕获并忽略Value1属性的set访问器抛出的异常（代码文件
ValidationSample/MainWindow.xaml）。
    Value1:
要在输入字段的上下文发生变化时尽快显示错误，可以把Binding标记扩展的
ValidatesOnException属性设置为True。输入一个无效值（设置该值时，会很快抛出一个异
常），文本框就会以红线框出，如图34-24所示。
    Value1:
图34-24
要以另一种方式给用户返回错误信息，Validation类定义了附加属性ErrorTemplate，
可以定义一个定制的ControlTemplate，把它赋予ErrorTemplate。下面代码中的
ControlTemplate在已有的控件内容前面添加了一个红色的感叹号。
        ! 
用Validation.ErrorTemplate附加属性设置validationTemplate会激活带文本框的模板：
    Value1:
    <TextBox Margin="5" Grid.Row="0" Grid.Column="1"
      Text="{Binding Path=Value1, ValidatesOnExceptions=True}"