the message 𝑚. Concretely, Snipuzz sends the same probe message
𝑝𝑖 twice within an interval of one second. Two responses 𝑟𝑖, 𝑟′
𝑖
will be collected from the IoT device, correspondingly. The self-
similarity score 𝑠𝑖𝑖 is then calculated based on the two responses
𝑟𝑖, 𝑟′
𝑖 according to Equation (1). Note that, due to the randomness in
the responses, there could be differences between the two responses
𝑟𝑖, 𝑟′
𝑖 , even though they are from the same probe message. Therefore,
the self-similarity score could be smaller than 1.
To determine whether two responses belong to the same cate-
gory, Snipuzz computes the similarity score of two responses and
compares it with the self-similarity score. For example, for two
responses 𝑟𝑖 and 𝑟 𝑗, Snipuzz uses the Equation (1) to compute the
similarity score 𝑠𝑖 𝑗. After that, 𝑠𝑖 𝑗 will be compared with the self-
similarity. If 𝑠𝑖 𝑗 >= 𝑠𝑖𝑖 or 𝑠𝑖 𝑗 >= 𝑠 𝑗 𝑗 satisfies, responses 𝑟𝑖 and
Figure 3: An example of snippet determination.
𝑟 𝑗 will be considered belonging to the same category; otherwise,
responses 𝑟𝑖 and 𝑟 𝑗 are then assigned to the different categories.
For a newly received response 𝑟𝑖, Snipuzz will compare it with
all the responses in the corresponding response pool 𝑅 based on
the similarity score. If the new response 𝑟𝑖 does not belong to any
existing category, the response 𝑟𝑖 as well as the corresponding
probe message 𝑝𝑖 will be added into the Response Pool.
With the response pool 𝑅, Snipuzz categories each byte in the
message 𝑚. Specifically, the category of the 𝑖-th byte in message
𝑚 is assigned according to the category of response 𝑟𝑖. Then the
consecutive bytes with the same category will be merged into one
snippet. Figure 3 shows an example of the initial snippet determi-
nation on the message 𝑚 = {"on":true} according to the response
categories in Table 2.
4.2.2 Hierarchical Clustering. Although Snipuzz utilizes similarity
comparison to mitigate the mis-categorization caused by random-
ness in responses, two semantically identical responses may still be
mis-categorized into different categories. This could occur when
the responses contain contents extracted or copied from probe mes-
sages. For example, due to the quotation of specific error contents
from probe messages, the heuristic algorithm will not assign them to
one category. Specifically, the similarity score 𝑠34 of 𝑚 = {"on":true}
in Table 2 is 0.979, which is smaller than the self-similarity scores
𝑠33 = 1.000 and 𝑠44 = 1.000 (as there is no randomness in the re-
sponses). However, these two responses are semantically identical
and should be identified into one category, i.e., they are both error
messages, indicating parameter syntax errors are located in the
probe messages and the device is executing the same code block.
In order to solve the aforementioned problem, Snipuzz uses
agglomerative hierarchical clusters to refine message snippets. The
core idea of hierarchical clustering is to continuously merge the
two most similar clusters until only one cluster remains.
As shown in Algorithm 1, Snipuzz will initialize the snippets
according to Initial Snippets determined in Section 4.2.1 (line 1).
After that, each response category in the response pool will be
initialized as a cluster (line 2). Snipuzz will convert the responses
into feature vectors (line 3, detailed in the later paragraph) which
will be used to compute the distance between each pair of clusters
(lines 5-7). Then the two closest clusters will be merged and the
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea342Algorithm 1: Hierarchical Clustering for Snippets
Input: Initial Snippets 𝐹0, Response Pool 𝑅
Result: Snippets 𝐹
1 𝐹 ← 𝐹0;
2 𝐶 ← 𝑐𝑎𝑡𝑒𝑔𝑜𝑟𝑖𝑧𝑒(𝐹0);
3 𝑉 ← 𝑣𝑒𝑐𝑡𝑜𝑟𝑖𝑧𝑒(𝑅);
4 while size(𝐶) > 1 do
5
6
7
𝐷 ← 𝑑𝑖𝑠𝑡𝑎𝑛𝑐𝑒𝑖 𝑗 =(cid:13)(cid:13)𝑣𝑖 − 𝑣𝑗
(cid:13)(cid:13);
for 𝑖 ← 𝑠𝑖𝑧𝑒(𝐶) to 2 do
for 𝑗 ← 𝑠𝑖𝑧𝑒(𝐶)-1 to 1 do
end
end
𝑖, 𝑗 = 𝑎𝑟𝑔𝑚𝑖𝑛(𝐷);
𝐶 ← 𝑚𝑒𝑟𝑔𝑒_𝑐𝑙𝑢𝑠𝑡𝑒𝑟 (𝐶, 𝑖, 𝑗);
𝑉 ← 𝑢𝑝𝑑𝑎𝑡𝑒_𝑐𝑙𝑢𝑠𝑡𝑒𝑟_𝑐𝑒𝑛𝑡𝑒𝑟 (𝑉 , 𝑖, 𝑗);
𝐹 ← 𝐹 + 𝑔𝑒𝑛𝑒𝑟𝑎𝑡𝑒_𝑠𝑛𝑖𝑝𝑝𝑒𝑡𝑠(𝐶);
8
9
10
11
end
cluster center will be updated accordingly (lines 8-10). After per-
forming the cluster process, Snipuzz will generate new snippets
according to the current cluster result and add the new snippets
into the snippet segmentation result (line 11), which will be further
used for mutation.
Concretely, Snipuzz first extracts features from responses, which
vectorize responses into tuples of the self-similarity score, the
length of the response, the number of alphabetic segments, the
number of numeric segments, and the number of symbol segments.
Each segment consists of consecutive bytes that have the same type.
For instance, “123” is 1 numeric segment, and there are 2 alphabetic
segments and 1 numeric segment in “𝑎1𝑏”. More specifically, the
𝑟1 in Table 2 will be vectorized to 𝑣1 = (1, 91, 10, 2, 10). Similarly,
responses 𝑟3 and 𝑟4 will be converted to 𝑣2 = (1, 94, 11, 2, 13) and
𝑣3 = (1, 94, 11, 2, 13).
Figure 4 shows an example of clustering according to the message
𝑚 = {"on":true} in Table 2. According to the Algorithm 1, in the
preparation round (0th round) of clustering, each category in the
response pool will be initialized a single cluster. In the 1st round,
as clusters 2 and 3 are the two clusters with minimum distance
(∥𝑣2 − 𝑣3∥ = 0), the two clusters are merged into a new cluster.
Correspondingly, the message snippets ‘o’ and ‘n’ are merged into a
new snippet, marked with index #4. Similarly, in the next round, the
two closest clusters, the cluster 1 and the new cluster, are merged,
and a new snippet will also be generated. Finally, all snippets in the
message are merged into one new snippet, i.e., the message itself.
All the new generated snippets together with the initial snippets
will be used in message mutation in the next stage.
4.3 Mutation Schemes
Snippet Mutation. In order to conduct an efficient fuzzing, Snipuzz
mutates the snippets obtained in the stage of Snippet Determina-
tion. Note that the mutation schemes are performed on the entire
snippet instead of a single byte in a message.
• Empty. The empty of a data domain may crash the firmware
if the data domain is not properly checked. Therefore, Snipuzz
deletes an entire snippet to empty the data domain.
Figure 4: An example of hierarchical clustering.
• Byte Flip. To detect bugs in both the syntax parsers and the
functional code, Snipuzz flips all bytes in a snippet. This changes
the syntactic meaning of strings and will discover bugs when the
parser does not properly check syntax. On the other hand, Byte
Flip changes the values of data domains to examine firmware.
• Data Boundary. To detect the out-of-bound bugs that occur
during assignment, Snipuzz modifies the values of numeric data
to some boundary values (e.g., 65536).
• Dictionary. For the scheme of Dictionary, Snipuzz replaces a
snippet with a pre-defined string such as “true” and “false”, which
may directly explore more code coverage.
• Repeat. In order to detect bugs in syntax parsers, Snipuzz repeats
a snippet for multiple times. Meanwhile, the repetition of data
domain can detect defects caused by out-of-boundary problems.
Havoc. The conditions for triggering bugs may be complicated.
For example, it may require modifying different data domains in
the same message to trigger a bug. The aforementioned snippet
mutation schemes only mutate one snippet at a time. However,
the havoc mutation randomly selects some random snippets in a
message, and performs the aforementioned mutation schemes on
each of the selected snippets. Havoc mutation will not stop until
finding a new response category or the target IoT device crashes.
4.4 Network Traffic Monitor
The network communication of the device is monitored and a time-
out is set to determine whether the device has been crashed. In fact,
the monitoring of device network communication is not a single
step, and it occurs during the entire fuzzing process. In case of
timeout, Snipuzz will continue to send the same message sequence
for three times, as the cause of timeout could be network fluctua-
tions instead of device crashes. If the timeout occurs for three times,
Snipuzz will use the control command to physically restart the
device and send the same sequence of messages to the device again.
If the device still does not return the message on time, Snipuzz will
record the crash and the corresponding message sequence.
4.5 Implementation
The design of Snipuzz consists of four steps: Message Sequence
Acquisition, Snippet Determination, Mutation, and Network
Communication Monitoring. In the Message Sequence Acqui-
sition step, we use WireShark [45] in the program to detect and
record the communication packets between the API and the IoT
device, and manually cleaned these message sequences. The remain-
ing core functional steps are packaged in a prototype implemented
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea343with 4,000 lines of C# code. The network monitor will record every
message sent to the device, and send the information to the device
again when the device does not reply. A smart plug was used to
implement the physical restart function of the target device. When
Snipuzz needs to physically restart the device under test, it will
send control messages to the smart plug, and the plug will be closed
and then opened. In this way, the device under test will be powered
off briefly and restarted.
5 EXPERIMENTAL EVALUATION
5.1 Experiment Setup
Environment setup. To initialize IoT devices, we use the applica-
tions provided by the manufacturers to complete the pairing. In
order to better monitor the network communication, all devices
under test are connected to a local router. Our automatic packet
extractor and Snipuzz run on a Windows 10 desktop PC with Intel
Core i7 six-core x 3.70 GHz CPU and 16 GB RAM, which is also
connected to the router.
IoT Devices under test. We have selected 20 popular consumer
IoT devices from both online and offline markets worldwide, cover-
ing various well-known brands, such as Philips, Xiaomi, TP-Link,
and Netgear. The types of selected IoT devices include smart plugs,
smart bulbs, routers, home bridge, IP camera, and fingerprint ter-
minal. These devices are either recommended by Amazon or the
best-selling products available in supermarkets. Table 1 details the
information of the IoT devices under test.
Benchmark tools. In order to verify Snipuzz’s performance in
finding crashes and message segmentation, we used seven different
fuzzing schemes as benchmarks.
• IoTFuzzer [9]. The core idea of IotFuzzer is to find the func-
tions that send control commands to the IoT device by static
analysis on companion apps, and to mutate the value of specific
variables to perform fuzzing test without breaking the message
format. Note that we try our best efforts to replicate IoTFuzzer
since its source code is not publicly available, and we acknowl-
edge that this could provide slightly different results with respect
to the original version.
We implement the IoTFuzzer by replacing the mutation algo-
rithm in Snipuzz framework with the mutation strategies in
IoTFuzzer. Considering that the purpose of companion apps
analysis in IoTFuzzer is to ensure that only the data domain in
the communication message is mutated, to make the benchmark
as fair as possible, we use seeds same as the ones used in Snipuzz
and manually segment the data domain of each seed message
before feeding it to IoTFuzzer. We believe that such manual seg-
mentation is sufficient to provide an upper bound performance
of IoTFuzzer. Note that we remove the methods that are related
to the feedback mechanism and snippet segmentation because
these methods are not used in IoTFuzzer.
• Nemesys [22]. Nemesys is a protocol reverse engineering tool
for network message analysis. It utilizes the distribution of value
changes in a single message to infer the boundaries of each data
domain. Considering that Nemesys is a protocol inference method
instead of an off-the-shelf fuzzing tool, we implement the method
of Nemesys based on the Snipuzz framework to infer the snip-
pet boundary, replacing corresponding snippet determination
method (Section 4.2).
• BooFuzz [31]. As a successor of Sulley [19], BooFuzz is an ex-
cellent network protocol fuzzer that has been involved in several
recent fuzzing research [9, 37, 48]. Different from other automatic
fuzzers, BooFuzz requires human-guided message segmentation
strategies as inputs. In our research, we leverage this property
and manually define more fuzzing strategies to enrich the bench-
mark evaluation.
– BooFuzz-Default. In this strategy, we set each message in
the input as a complete string, that is, BooFuzz will use the
message as a string for mutation testing.
– BooFuzz-Byte. Each byte of the message in the input will be
used for a mutation test individually.
– BooFuzz-Reversal. Contrary to the idea of IoTFuzzer, in this
strategy, we focus on the mutation of non-data domain in the
message, while keeping data domain unchanged.
• Doona [44]. Doona is a fork of the Bruterforce Exploit Detec-
tor (BED) [6], which is designed to detect potential vulnerabili-
ties related to buffer and formats in network protocol. Different
from other tools, Doona does not take network communication
packets as seeds. The test cases of Doona are required to be
pre-defined for each device or protocol under test.
• Snipuzz-NoSnippet. Snipuzz uses the segmentation of mes-
sage snippets to enhance the fuzzing efficiency and the ability to
find crashes. In order to verify whether the snippet determina-
tion indeed benefits fuzzing, we implement Snipuzz-NoSnippet
based on Snipuzz. Snipuzz-NoSnippet does not have the snippet
determination component, and blindly mutates bytes in messages
without the knowledge of responses.
Except for Doona whose test cases are preset, all benchmark
tools and Snipuzz are tested with same input sets. These input sets
may be different in formats (e.g., BooFuzz requires to manually set
the input, and Numesys requires the input to in pcap file format),
but the content is the same.
There are many other popular fuzzing tools which are able to
test IoT devices via network communication, such as Peach [30]
and AFLNET [33]. However, since they are grey-box fuzzers that
requires to instrument firmware, it is infeasible and unfair to regard
those tools as baselines for black-box schemes.
5.2 Vulnerability Identification
Snipuzz. After performing fuzz testing using Snipuzz on
5.2.1
each of the 20 IoT devices for 24 hours, we detected 13 crashes in
5 devices as shown in Table 3. We further manually verified that
the detected crashes include 7 null pointer dereferences, 1 denial
of service, and 5 unknown crashes. The crashes found by Snipuzz
are triggered by the malformed inputs. These malformed inputs
break the message format in different ways. For example, deleting
placeholders, emptying the data domain, or fortunately changing
the type of data value.
Note that all the crashes identified by Snipuzz are on JSON-
based devices, although we successfully conducted experiments on
the 20 IoT devices with various communication formats, such as
JSON, SOAP, and K-V pair. The experiments also show that Snipuzz
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea344Table 3: Experiment Results. Snipuzz discovers the most number of categories and exposes the most number of bugs.
#
Devices
Snipuzz
IoTFuzzer
Doona
Base Station
YLDP05YL
YLDP13YL
A60
Mini C
BR30
Hue
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
UC: Unknown crash. NPD: Null pointer dereference. DoS: Denial of service. T: Vulnerability type. C: Number of crashes. 10/24: Number of response categories (10 minutes/24 hours).
∗: Remotely exploitable. NA: Since Doona is only applicable to some network protocols, devices that cannot be tested are represented by ‘NA’.
HS100
HS110
F7C027au
MSS310
B25AUS
Mini US
SP4L-AU
R6400
WL100
Alro Pro 2
F19821W
T-131P
NA/NA
10/14
7/13
7/16
NA/NA
6/14
8/16