字面上的 "
.TP
.B \e'
字面上的 '
.RE
.PD
.PP
除了 GNU Emacs 样式的转义序列，还有一系列反斜杠转义序列可用：
.RS
.PD 0
.TP
.B \ea
响铃
.TP
.B \eb
回退
.TP
.B \ed
删除
.TP
.B \ef
进纸
.TP
.B \en
新行符
.TP
.B \er
回车
.TP
.B \et
水平跳格
.TP
.B \ev
竖直跳格
.TP
.B \e\fInnn\fP
一个八比特字符，它的值是八进制值 \fInnn\fP (一到三个八进制数字)。
.TP
.B \ex\fIHH\fP
一个八比特字符，它的值是十六进制值 \fIHH\fP (一到两个十六进制数字)。
.RE
.PD
.PP
输入宏的文本时，必须使用单引号或双引号引用来表明是宏的定义。
没有引用的文本被当作函数名。在宏的定义体中，上述反斜杠转义被扩展。
反斜杠将引用宏文本中所有其他字符，包括 " 和 '。
.PP
.B Bash
允许使用内建命令
.B bind
来显示和修改当前 readline 按键关联。在交互使用中可以用内建命令
.B set
的
.B \-o 
选项切换到编辑模式 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节)。
.SS "Readline Variables"
.PP
readline 包含额外的可用于定制它的行为的变量。可以在
.I inputrc
文件中设置变量，使用如下形式的语句：
.RS
.PP
\fBset\fP \fIvariable\-name\fP \fIvalue\fP
.RE
.PP
除非另外说明，readline 变量的值总是
.B On
或
.BR Off。
变量和它们的默认值是：
.PP
.PD 0
.TP
.B bell\-style (audible)
控制了当 readline 需要鸣终端响铃时的动作。如果设置为 \fBnone\fP，
readline 不会鸣铃。如果设置为 \fBvisible\fP，readline 使用可视的响铃，如果可用的话。
如果设置为 \fBaudible\fP，readline 试着鸣终端响铃。
.TP
.B comment\-begin (``#'')
这个字符串在执行 readline 命令
.B insert\-comment
时被插入。这个命令在 emacs 模式下被关联为
.B M\-#，
在 vi 模式下是
.B #。
.TP
.B completion\-ignore\-case (Off)
如果设置为 \fBOn\fP，readline 进行大小写不敏感的文件名匹配和补全。
.TP
.B completion\-query\-items (100)
这个变量决定着何时向用户询问，是否查看由命令 \fBpossible\-completions\fP 产生的可能的补全数量。
它可以设为任何大于或等于 0 的值。如果可能的补全数量大于或等于这个变量的值，
用户将被提示是否愿意查看它们；否则将直接在终端上列出它们。
.TP
.B convert\-meta (On)
如果设置为 \fBOn\fP，readline 将把设置了最高位的字符转换为 ASCII 按键序列，方法是
去掉第八位，前缀一个转义字符 (实际上，使用 Esc 作为转义符 \fImeta prefix\fP)。
.TP
.B disable\-completion (Off)
如果设置为 \fBOn\fP，readline 将禁止词的补全。补全字符将被插入到行中，就好像它们被
映射为 \fBself-insert\fP。
.TP
.B editing\-mode (emacs)
控制 readline 的按键关联集合与 \fIemacs\fP 还是 \fIvi\fP 相似。
.B editing\-mode
可以设置为
.B emacs
或
.BR vi。
.TP
.B enable\-keypad (Off)
如果设置为 \fBOn\fP ，readline 在调用时将试图启用辅助键盘。
一些系统需要设置这个来启用方向键。
.TP
.B expand\-tilde (Off)
如果设置为 \fBOn\fP，readline 试图进行词的补全时会进行波浪线扩展。
.TP
.B history-preserve-point
如果设置为 \fBOn\fP，历史代码试着在 \fBprevious-history\fP 或 \fBnext-history\fP
取回的每个历史行的相同位置中加点。
.TP
.B horizontal\-scroll\-mode (Off)
如果设置为 \fBOn\fP，将使得 readline 使用单行来显示，如果它比屏幕宽度要长，就在
单一的屏幕行上水平滚动输入行，而不是自动回绕到新行。
.TP
.B input\-meta (Off)
如果设置为 \fBOn\fP，readline 将允许八比特输入 (也就是说，它不会将它读入的字符中最高位删除)，
不管它能支持什么样的终端要求。名称
.B meta\-flag
与此变量同义。
.TP
.B isearch\-terminators (``C\-[C\-J'')
用于终止增量的搜索，不再将字符当作命令执行的字符串。
如果这个变量没有赋值，字符串 \fIEsc\fP 和 \fIC\-J\fP 将终止增量的搜索。
.TP
.B keymap (emacs)
设置当前 readline 键盘映射。有效的键盘映射名称是 
\fIemacs, emacs\-standard, emacs\-meta, emacs\-ctlx, vi,
vi\-command\fP，还有 
.IR vi\-insert。
\fIvi\fP 等价于 \fIvi\-command\fP; \fIemacs\fP 等价于
\fIemacs\-standard\fP。默认值是
.IR emacs ;
.B editing\-mode
的值也会影响默认的键盘映射。
.TP
.B mark\-directories (On)
如果设置为 \fBOn\fP，补全的目录名会添加一个斜杠。
.TP
.B mark\-modified\-lines (Off)
如果设置为 \fBOn\fP，已被修改的历史行将显示为前缀一个星号 (\fB*\fP)。
.TP
.B mark\-symlinked\-directories (Off)
如果设置为 \fBOn\fP，补全的名称如果是到目录的符号链接，则将添加一个斜杠 (与
\fBmark\-directories\fP 的值同样处理)。
.TP
.B match\-hidden\-files (On)
这个变量，如果设置为 \fBOn\fP，将使得 readline 在进行文件名补全时，匹配以 `.' 开头的文件 (隐藏文件)，
除非用户在要补全的文件名中给出了前导的 `.'。
.TP
.B output\-meta (Off)
如果设置为 \fBOn\fP，readline 将直接显示设置了第八位的字符，而不是转化为一个带 meta 前缀的转义序列。
.TP
.B page\-completions (On)
如果设置为 \fBOn\fP，readline 将使用内建的类似 \fImore\fP 的分页程序，
来每次显示一屏可能的补全。
.TP
.B print\-completions\-horizontally (Off)
如果设置为 \fBOn\fP，readline 将匹配的补全按字母表顺序排序，然后水平排列显示出来，
而不是在屏幕上竖直排列显示。
.TP
.B show\-all\-if\-ambiguous (Off)
这将调整补全函数的默认行为。如果设置为
.BR on ,
拥有多于一个可能的补全的词将立即列出所有匹配，而不是鸣响铃。
.TP
.B visible\-stats (Off)
如果设置为 \fBOn\fP，在列出可能的补全时，将在文件名后面添加一个表示文件类型的字符，
文件类型由 \fIstat\fP(2) 报告。
.PD
.SS "Readline Conditional Constructs"
.PP
readline 实现了一种功能，本质上与 C 预处理器进行条件编译的功能类似，
允许根据测试的结果进行键盘关联和变量设置。其中使用了四种解释器指令。
.IP \fB$if\fP
.B $if
结构允许根据编辑模式，正在使用的终端，使用 readline 的应用程序来设定按键关联。
测试的文本包括一行，直到行尾；不必用字符来隔离它。
.RS
.IP \fBmode\fP
\fB$if\fP 结构的 \fBmode=\fP 形式用于测试 readline 处于 emacs 还是 vi 模式。
这可以与命令 \fBset keymap\fP 结合使用，例如，设置 \fIemacs\-standard\fP 和 \fIemacs\-ctlx\fP 
键盘映射，仅当 readline 以 emacs 模式启动。
.IP \fBterm\fP
\fBterm=\fP 形式用于包含与终端相关的按键关联，也许是将按键序列输出与终端的功能键相关联。
等号
.B =
右边的词被同终端的全名和名称中第一个 \fB\-\fP 前面的一部分相比较。
例如，允许
.I sun
同时匹配
.I sun
和
.IR sun\-cmd。
.IP \fBapplication\fP
\fBapplication\fP 结构用于包含应用程序相关的设置。每个使用 readline 的程序都设置 \fIapplication name\fP，
初始化文件可以测试它的值。它可用于将一个按键序列与对特定的程序有用的功能相关联。
例如，下列命令添加了一个按键序列，用以引用 bash 中当前的词或前一个词
.sp 1
.RS
.nf
\fB$if\fP Bash
# Quote the current or previous word
"\eC\-xq": "\eeb\e"\eef\e""
\fB$endif\fP
.fi
.RE
.RE
.IP \fB$endif\fP
上例中的这个命令，结束了一个 \fB$if\fP 命令。
.IP \fB$else\fP
如果测试失败，\fB$if\fP 指令中这个分支的命令将被执行。
.IP \fB$include\fP
这个指令使用单个文件名作为参数，从文件中读取命令和按键关联。例如，下列指令
将读取 \fI/etc/inputrc\fP：
.sp 1
.RS
.nf
\fB$include\fP \^ \fI/etc/inputrc\fP
.fi
.RE
.SS Searching
.PP
readline 提供了从命令历史中搜索包含给定字符串的行的命令 (参见下面的
.SM
.B HISTORY 历史
章节)。有两种搜索模式：
.I incremental
和
.IR non-incremental .
.PP
增量的搜索在用户结束输入搜索字符串时开始。在搜索字符串的每个字符被输入的同时，
readline 显示与已输入的字符串匹配的下一个历史条目。
增量的搜索只要求输入能找到期望的历史条目所需的那么多字符。
\fBisearch-terminators\fP 变量中的字符用来终止一次增量的搜索。如果
这个变量没有被赋值，Esc 和 Ctrl-J 字符串将结束一次增量的搜索。
Ctrl-G 将取消一次增量的搜索，恢复初始的行。当搜索终止时，包含搜索字符串
的历史条目成为当前行。
.PP
要从历史列表中找到其他匹配的条目，适当地键入 Ctrl-S 或 Ctrl-R。
这样将在历史中向前/向后搜索下一个匹配已输入的搜索字符串的条目。
其他关联到某个 readline 命令的按键序列将终止搜索并执行关联的命令。
例如，\fInewline\fP 将终止搜索，接受当前行，从而执行历史列表中的命令。
.PP
readline 可以记住上次增量搜索的字符串。如果键入两次 Ctrl-R，中间没有
输入任何字符来定义一个新的搜索字符串，那么将使用已记住的搜索字符串。
.PP
非增量的搜索将整个搜索字符串读入，然后才开始搜索匹配的历史条目。
搜索字符串可以由用户输入，或者是当前行的内容的一部分。
.SS "Readline Command Names"
.PP
下面列出的是命令的名称以及默认情况下它们关联的按键序列。
命令名称如果没有对应的按键序列，那么默认是没有关联的。在下列描述中，
点 (\fIpoint\fP) 指当前光标位置，标记 (\fImark\fP) 指命令 \fBset\-mark\fP 
保存的光标位置。point 和 mark 之间的文本被称为范围 (\fIregion\fP)。
.SS Commands for Moving 移动
.PP
.PD 0
.TP
.B beginning\-of\-line (C\-a)
移动到当前行的开始。
.TP
.B end\-of\-line (C\-e)
移动到当前行的结尾。
.TP
.B forward\-char (C\-f)
向前移动一字。
.TP
.B backward\-char (C\-b)
向后移动一字。
.TP
.B forward\-word (M\-f)
向前移动到下一词尾。词由字符 (字母和数字) 组成。
.TP
.B backward\-word (M\-b)
向后移动到当前或上一词首。
.TP
.B clear\-screen (C\-l)
清除屏幕，保留当前行在屏幕顶端。有参数时，刷新当前行，不清屏。
.TP
.B redraw\-current\-line
刷新当前行。
.PD
.SS Commands for Manipulating the History 操纵历史行
.PP
.PD 0
.TP
.B accept\-line (Newline, Return)
接受这一行，不管光标在什么位置。如果行非空，将根据变量
.SM
.B HISTCONTROL
的状态加入到历史列表中。如果行是修改过的历史行，将恢复该历史行到初始状态。
.TP
.B previous\-history (C\-p)
从历史列表中取得前一个命令，从列表中向后移动。
.TP
.B next\-history (C\-n)
从历史列表中取得后一个命令，从列表中向前移动。
.TP
.B beginning\-of\-history (M\-)
移动到输入历史行的末尾，也就是当前输入的行的末尾。
.TP
.B reverse\-search\-history (C\-r)
从当前行开始向后搜索，按照需要在历史中向\(lq上\(rq移动。这是一个增量的搜索。
.TP
.B forward\-search\-history (C\-s)
从当前行开始向前搜索，按照需要在历史中向\(lq下\(rq移动。这是一个增量的搜索。
.TP
.B non\-incremental\-reverse\-search\-history (M\-p)
从当前行开始向后，使用非增量搜索来查找用户给出的字符串。
.TP
.B non\-incremental\-forward\-search\-history (M\-n)
从当前行开始向前，使用非增量搜索来查找用户给出的字符串。
.TP
.B history\-search\-forward
从当前行开始向前搜索历史，查找从当前行首到 point 之间的字符串。
这是一个非增量的搜索。
.TP
.B history\-search\-backward
从当前行开始向后搜索历史，查找从当前行首到 point 之间的字符串。
这是一个非增量的搜索。
.TP
.B yank\-nth\-arg (M\-C\-y)
将前一个命令的第一个参数 (通常是上一行的第二个词) 插入到 point 位置。有参数
.IR n
时，将前一个命令的第 \fIn\fP 个词 (前一个命令中的词从 0 开始计数) 
插入到 point 位置。负数参数则插入前一个命令倒数第 \fIn\fP 个词。
.TP
.B
yank\-last\-arg (M\-.\^, M\-_\^)
插入前一个命令的最后一个参数 (上一历史条目的最后一个词)。有参数时，
行为类似于 \fByank\-nth\-arg\fP。后继的 \fByank\-last\-arg\fP 调用将