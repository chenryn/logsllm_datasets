C_SE_NC_1
C_BO_NA_1
C_SC_TA_1
C_DC_TA_1
C_RC_TA_1
C_SE_TA_1
C_SE_TB_1
C_SE_TC_1
C_BO_TA_1
M_EI_NA_1
C_IC_NA_1
C_CI_NA_1
C_RD_NA_1
C_CS_NA_1
C_RP_NA_1
C_TS_TA_1
P_ME_NA_1
P_ME_NB_1
P_ME_NC_1
P_AC_NA_1
F_FR_NA_1
F_SR_NA_1
F_SC_NA_1
F_LS_NA_1
F_AF_NA_1
F_SG_NA_1
F_DR_TA_1
F_SC_NB_1
Table 5: ASDU I-Format Type Identification Codes
Description
Single-point information
Double-point information
Step position information
Bitstring of 32 bits
Measured value, normalized value
Measured value, scaled value
Measured value, short floating point number
Integrated totals
Packed single-point information with status change detection
Measured value, normalized value without quality descriptor
Single-point information with time tag CP56Time2a
Double-point information with time tag CP56Time2a
Step position information with time tag CP56Time2a
Bitstring of 32 bit with time tag CP56Time2a
Measured value, normalized value with time tag CP56Time2a
Measured value, scaled value with time tag CP56Time2a
Measured value, short floating point number with time tag CP56Time2a
Integrated totals with time tag CP56Time2a
Event of protection equipment with time tag CP56Time2a
Packed start events of protection equipment with time tag CP56Time2a
Packed output circuit information of protection equipment with time tag CP56Time2a
Single command
Double command
Regulating step command
Set point command, normalized value
Set point command, scaled value
Set point command, short floating point number
Bitstring of 32 bits
Single command with time tag CP56Time2a
Double command with time tag CP56Time2a
Regulating step command with time tag CP56Time2a
Set point command, normalized value with time tag CP56Time2a
Set point command, scaled value with time tag CP56Time2a
Set point command, short floating-point number with time tag CP56Time2a
Bitstring of 32 bits with time tag CP56Time2a
End of initialization
Interrogation command
Counter interrogation command
Read command
Clock synchronization command
Reset process command
Test command with time tag CP56Time2a
Parameter of measured value, normalized value
Parameter of measured value, scaled value
Parameter of measured value, short floating-point number
Call directory, select file, call file, call section
Parameter activation
File ready
Section ready
Last section, last segment
Ack file, ack section
Segment
Directory
Query Log, Request archive file
Figure 12: Two of the simplest expected communication pat-
terns in our datasets. The left image shows a primary com-
munication pattern where an outstation transmits moni-
tored data via I-format APDUs and the control server peri-
odically acknowledges via S-format APDU. Similarly, the im-
age on the right shows an ideal secondary (redundant) con-
nection where the outstation and control server exchange
U16 and U32 APDUs (keep alive messages followed by their
acknowledgment).
after investigating the cause of these repeated APDUs, we found
that this was due to packet re-transmissions at the TCP layer and
not unexpected behavior of the endpoints.
209
Figure 13: Size of Markov chains for all connections (nodes
and edges). All abnormal secondary connections share a sin-
gle point at (1,1). All connections in the ellipse have "I100"
(interrogation command) while those in the rectangle do not
We now study the diversity of Markov chains inferred. Fig. 13
shows the size (in terms of nodes and edges) of the Markov chains
inferred in all connections. We can clearly see three clusters: The
first cluster has only one node and one edge—the point (1,1); the
second cluster is captured by the connections within the square;
and the third cluster is captured by the connections within the
ellipse.
Fig. 14 shows how all the connections in point (1,1) of Fig. 13 look
like: a sequence of repeated U16 messages sent by the server without
the corresponding acknowledgement U32 from the outstation. These
are precisely the connections we illustrated in Fig. 9, where U16
messages are ignored, and instead the Outstation resets the TCP
connection. Connections C2-O28, C2-O24, C1-O7, C1-O9, C1-O6,
C1-O8, C1-O35, C2-O30 (cluster 0 in the previous subsection), C1-
O15, and C1-O5 all fall into this category.
The other two clusters (square and ellipse) have a variety of
Markov chains, but the size of the Markov chain in the connec-
tions in the ellipse had much higher number of edges than the
others. After inspecting all connections in the ellipse, we observed
a command that is not present in any of the other clusters; the
interrogation command (an I-format message with typeID 100). I100
requests the outstation to send all of the IOAs it monitors, so it
basically sends a lot of information, resulting in a variety of new
(previously unseen) I types that do not report back to the control
center periodically.
Fig. 15 shows one of the communication patterns that included
I100 (one of the connections from the cluster in the ellipse from
Fig. 13). The Markov chain in this figure shows how the server
initiates data transfer by sending U1 STARTDT act, which is then
NodesEdgesO1-C4I36S00.20.40.60.81 Transition ProbabilityNodesEdgesO26-C4U16U3200.20.40.60.81 Transition ProbabilityIMC’20, October 27-29, 2020, Virtual Event, USA
Kelvin Mai, Xi Qin et al.
Figure 14: Simplest, but abnormal communication pattern
in our datasets. Abnormality due to missing U32 APDUs (ac-
knowledgements to keep-alive messages).
Figure 15: A connection from the cluster in the ellipse. Af-
ter a request to start sending I-Format APDUs U1 and the
ack U2 the first I-Format APDU sent is an I100 interrogation
command from the server, afterwards, the outstation starts
transmitting regular I-format APDUs such as I13, I36.
acknowledged with a U2 STARTDT con from the outstation. The
server then sends an interrogation command I100, which instructs
the outstation to report all of its field devices and their correspond-
ing measured values.
According to the IEC 104 standard, I100 is sent by the control
server whenever the server starts the request for I-Format messages,
which happens in the following three conditions: (1) on a newly-
established connection, (2) on a connection switch from secondary
to primary, and (3) operator or program-initiated. Condition (2)
explains why most of the connections in the ellipse in Fig. 13 are
in pairs (e.g, O20 connecting to both C3 and C4, or O29 connecting
to both C1 and C2). An example of these switchovers is illustrated
in Fig. 16.
We found the interrogation command also interesting from a
cybersecurity perspective. In the most recent cyberattacks on the
power grid of Ukraine [7], the attackers developed a malware called
Industroyer [2], which targeted IEC 104 networks. Once a TCP con-
nection gets established between a control server and an outstation,
Industroyer would start the ICS reconnaissance phase by sending
IEC 104 packets iteratively to the target ADSU address and IOAs,
attempting to discover as IOAs. Instead of iteratively discovering
IOAs, a single I100 interrogation command would have allowed
Industroyer to accomplish the same goal.
Figure 16: Markov chains showing a switchover between
servers C1 and C2, as indicated by having keep-alive mes-
sages in secondary connections (U16 and U32) and then the
initiation of a primary connection, as indicated by U1 and
U2 followed by I100 and then multiple I-format messages.
So far we have figured out that the point (1,1) in Fig. 13 represents
secondary connections that reset every attempt by the server to
establish a backup connection, and all the connections in the ellipse
of Fig. 13 have the interrogation command I100. We now turn our
attention to the cluster of connections within the square of Fig. 13.
By looking at the Markov chains of these connections, we found a
variety of behaviors, summarized in Table 6.
Table 6: Outstation Classification
Type
Description
No secondary connection and I-format only
With secondary connection and U16&U32
1
2
3
4
5
6 With secondary connection I-format and U16 only
Single server with both I and U formats
U-format only
I-format only to both servers
Figure 17: Outstation simplified Interaction for each type in
Table 6 and previously described at point (1,1) as Type 7, and
in the ellipse as Type 8.
Type 1 outstations are those that only have active connection
to its primary control server (the one sending I-Format messages)
210
U1600.10.20.30.40.50.60.70.80.91 Transition ProbabilityUncharted Networks: A First Measurement Study of the Bulk Power System
IMC’20, October 27-29, 2020, Virtual Event, USA
but they do not have redundant connection to a secondary control
server (the backup connection sending keep-alive messages).
Type 2, on the other hand, is an ideal situation specified in the
IEC 104 standard, where each outstation has a TCP connection to
its primary server for sending I-format messages while having a
secondary connection exchanging periodically keep-alive messages
to its backup server.
Type 3 outstations are simply redundant equipment that transmit
only U messages. We found this configuration in newer substations
(such as S10 in Fig. 6, which has 14 RTUs) where for example, each
generator is monitored by two redundant RTUs (outstations), one
RTU talks to two control servers (e.g., O10 talking to C3 and C4)
while the redudntant RTU simply sends keep-alive messages (O11).
Type 4 consist of only one outstation which has only one active
TCP connection at any given time sending I-format messages. This
outstation could be classified as a Type 1 connection, but the only
difference is that between datasets, it seems the connection switched
over to the other server, so it is the only “Type 1” connection that
we saw sending I-format messages to both servers.
Type 5 also consists of only one outstation that behaves in a
unique fashion: it is the only connection where in the middle of I-
format message transmissions, we see a keep-alive/test-connection
request (we only see keep-alive request in secondary connections).
To examine what happens in this connection, we looked at the IEC
104 standard and saw that when the timer T3 expires, a keep-alive
message will be sent (regardless if it is a primary or secondary
connection), and upon further inspection, we found several inter-
vals between I-format messages in this connection that last over 20
seconds (which is larger than the default T3 timer, thus forcing a
keep-alive message). Looking for an explanation for these long in-
tervals without I-messages, we found that the cause of transmission
(COT) of all I-format messages was spontaneous ("Spont") which
means the I-format messages are sent only after certain thresholds
in the measured values are reached (if the measured values do not
change enough to meet these thresholds, the values will not be sent
over the network), so our hypothesis for these long time-intervals,
is that the outstation was configured with large thresholds for spon-
taneous transmissions. This hypothesis was confirmed with our
contact at the utility company who mentioned the outstation some-
times showed stale data in the control room. This is again one of
the problems with federated SCADA systems, where unless there is
regulation mandating very detailed standards, the individual power
companies can select their own configuration parameters, which
sometimes lead to sub-optimal performance in the operation of the
system.
Finally, Type 6 are outstations O5 and O8. It appeared that O5
and O8 send I-messages to either C1 or C2, whichever is active,
and as the other server (inactive) tries to establish a redundant
connection, O5 and O8 would refuse the connection, hence only
see U16 message instead of the expected U16 & U32 pair.
Fig. 17 summarizes our analysis. In short we can see that most of
the outstations (34.3%) we analyze are in type 3, which means that
they are backup outstations, serving as reliable connections in case
the primary outstation stops responding. Type 3 is very similar to
Type 7, but with the difference that type 7 outstations have the mis-
configuration about resetting the TCP connection, fortunately Type
7 backup outstations are just a fourth of all the backup outstations.
The second most common type is type 4, which means that these
211
outstations changed their connections to the server among our
different packet captures (this type is related to Type 8 outstations,
where we actually see the server switch-over during our packet
capture); therefore we can conclude that a rotation from primary
to secondary servers is a common occurrence.
Our results satisfy Hypothesis 4, as we found small state ma-
chines useful in identifying a fixed number of communication pro-
files between control servers and outstations. The next step is to
analyze the semantics of the payload.
6.4 Physical Measurements
We are finally ready to explore Hypothesis 5, and determine if
through a network tap, we can create profiles from the physical
system under control; i.e., to understand the semantic-nature of
the information exchanged in the network. Recall that each ASDU
is identified by a specific typeID which defines the data format
(floating point, normalized, etc.), and that IEC 104 supports 54
ASDU typeIDs, illustrated in Table 5. Out of these 54 typeIDs, only
13 were observed in all our datasets. Table 7 shows distribution
for each of these 13 typeIDs. As seen, the most transmitted ASDU