# 四、了解 Helm 图表
在上一章中，您学习了如何从最终用户的角度使用 Helm，利用它作为包管理器将应用安装到 Kubernetes。以这种方式使用 Helm 不需要任何 Kubernetes 的专业知识或对应用的深刻理解，因为所有的资源和逻辑都包含在 Helm 图表中。您需要熟悉的唯一概念是图表提供的值，以便自定义您的安装。
我们现在将从使用 Helm 图表转向了解它们是如何工作和创建的。
为此，我们将涵盖以下主题:
*   理解 YAML 格式
*   理解图表模板
*   理解图表定义
*   生命周期管理
*   记录 Helm 图表
# 技术要求
本节要求将`helm`二进制文件安装在您的本地机器上。该工具的安装和配置在 [*第 2 章*](02.html#_idTextAnchor098) 【准备 Kubernetes 和 Helm 环境】中有所介绍。
# 了解 YAML 格式
**YAML 不是标记语言** **(YAML)** 是用于创建人类可读配置的文件格式。它是最常用于配置 Kubernetes 资源的文件格式，也是 Helm 图表中许多文件使用的格式。
YAML 文件遵循键值格式来声明配置。让我们来探索 YAML 的关键价值结构。
## 定义键值对
这里显示了 YAML 键值对的一个最基本的例子:
```
name: LearnHelm
```
在前面的例子中，`name`键被赋予了一个`LearnHelm`值。在 YAML，键和值用冒号(:)分隔。写在冒号左边的字符代表键，写在冒号右边的字符代表值。
YAML 格式的间距很重要。下面一行不构成键值对:
```
name:LearnHelm
```
请注意冒号和`LearnHelm`字符串之间缺少一个空格。这将导致解析错误。冒号和值之间必须有空格。
虽然前面的示例表示一个简单的键值对，但是 YAML 允许用户使用嵌套的元素或块来配置更复杂的配对。这里显示了一个示例:
```
resources:
  limits:
    cpu: 100m
    memory: 512Mi
```
前面的示例演示了一个 resources 对象，该对象包含两个键值对的映射:
![](img/012.jpg)
通过跟随 YAML 块下的缩进来确定键。每个缩进都会在键的名称中添加一个点(`.`)分隔符。当 YAML 区块中不再有任何凹痕时，就达到了该键的值。按照惯例，YAML 的缩进应该使用两个空格，但是用户可以提供任意多的空格，只要整个文档中的空格是一致的。
重要提示:
**标签**不被 YAML 支持，使用它们会导致解析错误。
了解了 YAML 键-值对之后，现在让我们来探索一些可以定义值的常见类型。
## 值类型
YAML 文件中的值可以是不同的类型。最常见的类型是字符串，它是一个文本值。字符串可以通过在引号中包装一个值来声明，但这并不总是必需的。如果一个值至少包含一个字母或特殊字符，则该值被视为一个字符串，带有或不带有引号。可以使用管道(`|`)符号设置多行字符串，如图所示:
```
configuration: |
  server.port=8443
  logging.file.path=/var/log
```
值也可以是整数。当值是没有用引号括起来的数字字符时，它就是整数。下面的 YAML 声明了一个整数值:
```
replicas: 1
```
将此与以下为字符串值分配副本的 YAML 进行比较:
```
replicas: '1'
```
也经常使用布尔值，可以用 true 或 false 来声明:
```
ingress:
  enable: true
```
该 YAML 将`ingress.enable`设置为`true`布尔值。其他可接受的布尔值有`yes`、`no`、`on`、`off`、`y`、`n`、`Y`和`N`。
还可以将值设置为更复杂的类型，如列表。YAML 列表中的项目由破折号(`-`)标识。
下面演示了一个 YAML 列表:
```
servicePorts:
  - 8080
  - 8443
```
该 YAML 将`servicePorts`设置为整数列表(如`8080`和`8443`)。该语法也可用于描述对象列表:
```
deployment:
  env:
    - name: MY_VAR
      value: MY_VALUE
    - name: SERVICE_NAME
      value: MY_SERVICE
```
在这种情况下，`env`被设置为包含`name`和`value`字段的对象列表。列表经常在 Kubernetes 和 Helm 配置中使用，了解它们对最大限度地利用 Helm 很有价值。
虽然 YAML 在 Kubernetes 和 Helm 的世界中更常用于易读性，但是也可以使用 JavaScript 对象符号 T2 格式。让我们简单描述一下这个形式 t。
JSON 格式
YAML 是另一种广泛使用的格式——JSON 的超集。JSON 是一串键值对，类似于 YAML。关键区别在于，虽然 YAML 依靠间距和缩进来正确配置键值对，但 JSON 依靠大括号和方括号。
以下示例将前面的 YAML 示例转换为 JSON 格式:
```
{
  'deployment': {
    'env': [
      {
        'name': 'MY_VAR',
        'value': 'MY_VALUE'
      },
      {
        'name': 'SERVICE_NAME',
        'value': 'MY_SERVICE'
      }
    ]
  }
```
JSON 中的所有键都用引号括起来，并放在冒号之前:
*   大括号(`{`)表示一个块，就像缩进表示 YAML 的一个块一样。
*   方括号(`[`)表示列表，类似于破折号表示 YAML 的列表。
YAML 和 JSON 格式有更多的构造，但是这个介绍提供了足够多的信息来理解它们如何在 Helm 图表中使用。
在下一节中，我们将讨论 Helm 图表文件结构，您可能会注意到它包含几个 YAML 和 JSON fil es。
Helm 图表结构
正如您将从前面几章中回忆到的，一个 Helm 图表是 Kubernetes 资源的一个打包，允许用户向 Kubernetes 部署不同复杂性的应用。但是，为了被视为 Helm 图表，必须遵循特定的文件结构:
```
my-chart/
  # chart files and directories
```
最佳做法是将顶级目录命名为 Helm 图表的名称。这不是一个技术要求，但是它使得识别 Helm 图表的名称变得简单得多。对于前面的示例文件结构，Helm 图表的名称可能是`my-chart`。
顶层目录下是组成 Helm 图表的文件和目录。下表显示了这些可能的文件和目录:
![](img/021.jpg)
在本章的中，我们将探索这些文件中的每一个，以了解如何创建一个 Helm 图表。我们将首先了解图表模板是如何工作的，以允许 Kubernetes 资源被动态生成。
# 了解图表模板
Helm 图的主要目的是创建和管理构成应用的 Kubernetes 资源。这是通过图表模板来完成的，用值作为参数来自定义这些模板。在本节中，我们将讨论 Helm 模板和值是如何工作的。
Helm 图表必须包含一个`templates/`目录，该目录定义了要部署的 Kubernetes 资源(尽管如果图表声明了依赖关系，则该目录不是严格必需的)。`templates/`目录下的内容是由 Kubernetes 资源组成的 YAML 文件。`templates/`目录的内容可能如下所示:
```
templates/
  configmap.yaml
  deployment.yaml
  service.yaml
```
`configmap.yaml`资源可能如下所示:
```
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}
data:
  configuration.txt: |-
    {{ .Values.configurationData }}
```
您可能会质疑前面的示例是否是有效的 YAML 语法。这是因为`configmap.yaml`文件实际上是一个 Helm 模板，它将根据某一组值修改该资源的配置，以生成有效的 YAML 资源。左大括号和右大括号代表在安装或升级过程中将被删除的 **Golang** ( **Go** )模板的输入文本。
让我们了解更多关于围棋模板以及如何使用它们来生成 Kubernetes 资源。
## 去做模板
**Go** 是谷歌在 2009 年开发的编程语言。它是 Kubernetes、Helm 以及 Kubernetes 和容器社区中的许多其他工具使用的编程语言。Go 编程语言的一个核心组件是模板，它可以用来生成不同格式的文件。就 Helm 而言，Go 模板用于在 Helm 图表的`templates/`目录下生成 Kubernetes YAML 资源。
Go 模板控制结构和处理，以两个开始的大括号(`{{`)开始，以两个结束的大括号(`}}`)结束。虽然这些标点符号可能会出现在`templates/`目录下的本地文件中，但它们会在安装或升级过程中被删除。
我们将在 [*第 5 章*](05.html#_idTextAnchor265)*构建你的第一个 Helm 图表*中深入探讨围棋模板化，在这里你将构建你自己的 Helm 图表。在本章中，我们将讨论 Go 模板的常见功能，作为对该功能的介绍，然后再进行一些实践。我们将从 Go 模板提供的一系列功能开始讨论，首先是参数选项。
### 用值和内置对象参数化字段
Helm 图表表在其图表目录中包含一个`values.yaml`文件。该文件声明了图表的所有默认值，这些值由 Go 模板引用，并由 Helm 处理以动态生成 Kubernetes 资源。
图表的`values.yaml`文件可以具有如下定义的值:
```
## chapterNumber lists the current chapter number
chapterNumber: 4
## chapterName gives a description of the current chapter
chapterName: Understanding Helm Charts
```
以井号(`#`)开头的行是注释(在执行过程中被忽略)，应该提供它们所描述的值的详细信息，以便用户理解应该如何应用它们。注释还可以包括值的名称，以允许在搜索值时出现注释。文件中的其他行代表键值对。本章开头介绍了 YAML 格式。