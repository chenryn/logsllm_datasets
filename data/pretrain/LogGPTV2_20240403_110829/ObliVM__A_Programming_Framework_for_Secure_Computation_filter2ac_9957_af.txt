### Design and Implementation of an Oblivious AVL Tree Algorithm

We designed an algorithm for an oblivious AVL tree but faced challenges in implementing it due to its high programming complexity. With the advent of ObliVM, we successfully implemented an AVL tree using 311 lines of code in ObliVM-lang, with a total development time of under 10 student-hours, including both implementation and debugging. It is important to note that previous languages for secure computation, including the state-of-the-art Wysteria [17], were unable to support the implementation of an oblivious AVL tree.

### End-to-End Application Performance

In the current version of ObliVM-GC, we have implemented a standard garbling scheme with Garbled Row Reduction [36] and Free-XOR [5]. Additionally, we have integrated an OT extension protocol proposed by Ishai et al. [3] and a basic OT protocol by Naor and Pinkas [55].

#### Evaluation Setup

For our evaluation, we consider a scenario where a client secret-shares its data between two non-colluding cloud providers. For large datasets (e.g., Heap, Map/Set), the client may need to place the inputs in an ORAM and then secret-share the resulting ORAM among the two cloud providers. We do not include this setup cost in our evaluation, as it can vary significantly based on the available bandwidth between the client and the cloud providers. Our evaluation assumes that this one-time setup has been completed.

#### Application Performance

In Table IV, we present the performance of three types of applications: basic instructions (e.g., addition, multiplication, and floating-point operations), linear or super-linear algorithms (e.g., Dijkstra, K-Means, Minimum Spanning Tree, and Histogram), and sublinear-time algorithms (e.g., Heap, Map/Set, Binary Search, Count Min Sketch, AMS Sketch). We report the circuit size, online, and total costs for various applications at typical data sizes.

We also compare ObliVM with the state-of-the-art automated secure computation system CMBC-GC [16]. Since the authors of CMBC-GC did not run all of these application benchmarks, we estimate their performance by first modifying our compiler to adopt a linear scan of memory upon dynamic memory accesses. This allows us to estimate the circuit size CMBC-GC would have obtained for the same applications. For the set of application benchmarks (e.g., K-Means, MST) reported in their paper, we confirmed that our circuit size estimates are always a lower bound of what CMBC-GC reported. We then estimate the runtime of CMBC-GC based on their reported 96K AND gates per second, assuming a network bandwidth of at least 2.8MBps.

#### Online and Offline Costs

To measure the online cost, we assume that all work independent of input data is performed offline, including garbling and input-independent OT preprocessing. Our current ObliVM implementation achieves an online speed of 1.8M gates/sec, consuming approximately 54MBps of network bandwidth. When no work is deferred to an offline phase, ObliVM achieves a garbling speed of 670K gates/sec, consuming 19MBps of network bandwidth.

#### Slowdown Relative to Non-Secure Baseline

Table V compares the slowdown of ObliVM relative to a non-secure baseline where computation is performed in cleartext. The slowdown ranges from 45x to 9.3 × 10^6x, depending on the application. We also provide an estimate of the performance if a JustGarble-like backend is used for ObliVM-generated circuits, based on our circuit sizes and the 11M AND gates/sec performance metric reported by JustGarble [4].

For example, the distributed genome-wide association study (GWAS) application, which was Task 1 in the iDash secure genomic analysis competition [56] with a total data size of 380KB, achieves a small slowdown because part of the computation is done locally. Alice and Bob each perform local preprocessing to obtain the allele frequencies of their own data before engaging in a secure computation protocol to compute χ2-statistics. On the other hand, benchmarks with floating-point operations, such as K-Means, incur a larger slowdown due to the special floating-point instructions available in modern processors.

### Conclusion and Future Work

We have designed ObliVM, a programming framework for automated secure computation. Additional examples and details can be found on our project website, http://www.oblivm.com, including popular streaming algorithms, graph algorithms, data structures, machine learning algorithms, and secure genome analysis [56].

#### Subsequent Works and Adoption of ObliVM

To the best of our knowledge, our framework is already being adopted in several projects:
1. **GraphSC** [24]: Extends ObliVM-GC to support parallel execution of gadgets on modern architectures, requiring about 1200 additional lines of code.
2. **MIPS Processor**: Our collaborators are implementing a MIPS processor over ObliVM, allowing maximum backward compatibility.
3. **Privacy-Preserving Software-Defined Networking**: Networking researchers have used ObliVM-GC to develop privacy-preserving software-defined networking applications [57].
4. **iDash Secure Genome Analysis Competition**: We participated in the iDash Secure Genome Analysis Competition [56], [58].
5. **Wagner et al.**: Used ObliVM to develop privacy-preserving applications.

These adoptions highlight the versatility and utility of ObliVM in various domains of secure computation.