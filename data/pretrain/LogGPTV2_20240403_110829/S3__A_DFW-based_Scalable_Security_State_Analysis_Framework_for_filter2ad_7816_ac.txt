distance between clusters [11]. We show in the Evaluation
section 6.4 through experimental results how SI has been used
for identifying optimal number of segments.
5.3 DFW Dynamic Trafﬁc Match and Flow
Update
Figure 5: Distributed Firewall (DFW) security policy rule
match and ﬂow table update.
The DFW utilizes OpenFlow and REST API network to
match the trafﬁc based on ﬁve tuples, i.e., {srcip, dstip, sport,
dstport, protocol}. We use the example Figure 5, to illustrate
DFW trafﬁc match and rule update operations.
• Step 1: The end-host (192.168.1.12) from intranet-
segment, attempts to send http trafﬁc to port 80 and ssh
trafﬁc to port 22 of host (172.16.0.14) situated in another
segment dmz-segment.
• Step 2: Initially, when ﬂow table is checked using ta-
ble_lookup, there is no rule present for the matching
trafﬁc rule. The ﬂow table only has rules with Flow ID
{1-3} - Figure 5 (a). The packet is sent to the controller
using action=OFPP_CONTROLLER.
• Step 3: The controller checks the security policies
deﬁned by the Security Policy Database (SPD) rules
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 479present in application plane, using northbound REST
API. The trafﬁc pattern matches the Rule ID {3} - Fig-
ure 5 (b), (c). The action deﬁned in the SPD for this
trafﬁc is ALLOW.
• Step 4: The ﬂow table is updated with new OpenFlow
rule - Flow ID {4}. The ﬁelds corresponding to layer 3,4
are updated and layer 2 ﬁelds are wildcarded - Figure 5
(d). Thus communication is enabled between two hosts.
If there is no match for the trafﬁc, in either ﬂow table or
SPD, the trafﬁc is discarded based on whitelisting policy.
5.4 Scalable Attack Graph Generation Cost
Analysis
Figure 6: Distributed Firewall-based Multi-Level AG Genera-
tion.
We consider the mapping between the physical network
and virtual network shown in Figure 6 (a). The physical topol-
ogy consists of two segments, i.e., Segment 1 and Segment
2, with V M1,V M2 ∈ Segment1 and V M3 ∈ Segment2. Each
VM consists of a number of services such as apache2, mysql,
etc. The connectivity relation between the VMs are used to
determine the AG for the entire network. For instance, if the
ﬁrewall rules are deﬁned between VMs and segments in a
coarse grained manner, the AG will be huge in size as shown
in Before DFW case in the above Figure 6. The trafﬁc across
each segment according to whitelisting policy might be lim-
ited, whereas, if we enforce white-listing policy at segment
and service (SSH, MySQL) level as shown in Figure 5 (c),
the amount trafﬁc can be scale of attack graph generated can
be ﬁnite for security analysis. Once the DFW is enforced at
different levels of network, i.e., at the granularity of per-VM,
per-segment, or entire network, we obtain a sparse AG, as
shown in After DFW in Figure 6 (a). We deﬁne the Incidence
and Laplacian matrices for the attack graph G below,
Deﬁnition 3. Incidence Matrix The incidence matrix In(G) of
graph G{V,E} is a |V|×|E| matrix, as shown in the Figure 6
(b), with one row for each node and one column for each edge.
For each edge e(i, j) ∈ E, column entry e of In(G) is zero,
except for ith and jth entries, which are +1 and -1, respectively
(if there is an edge from i to j, the value is +1, whereas it is -1
if there is an edge from j to i in the graph, the value is zero if
there is no edge e(i,j)).
Deﬁnition 4. Laplacian Matrix The Laplacian matrix L(G)
of graph G{V,E} as shown in the Figure 6 (c), is a |V|×|V|
symmetric matrix, with one row and column for each node. It
is deﬁned by
• L(G) (i,i): is the degree of node I (number of incident
edges).
• L(G) (i,j): -1 if i (cid:54)= j and there is an edge (i,j).
• L(G) (i,j): 0 otherwise.
The application of DFW at different levels of the physical
and logical network increases graph sparsity. The aggregated
graph has reduced state space compared to the original AG.
5.5 Sparse Graph Connectivity using DFW
The incidence graph In(G) and laplacian graph L(G) have the
following properties.
• L(G) is symmetric, i.e., eigenvalues of L(G) are real and
its eigenvectors are real and orthogonal. For example, let
e = [1, ...,1]T be a column vector. Then L(G)× e = 0.
• Matrices are independent of signs chosen for each col-
umn of In(G), In(G)× In(G)T = L(G).
• Let L(G)× v = λ× v and λ (cid:54)= 0, where v is eigenvector
and λ is eigenvalue of L(G),
λ = ||In(G)T − v||2/||v||2
∑e(i, j)∈E (v(i)− v( j))2
λ =
∑i v(i)2
(2)
• Eigenvalues of L(G) are non-negative, i.e., 0 = λ1 ≤
λ2... ≤ λn.
• The number of connected components of G is equal to
number of λi equal to 0. In particular, λ2 (cid:54)= 0 if & only if
G is connected.
Using the properties deﬁned above, we check the algebraic
connectivity of two graphs G and G’, which can be compared
to check the density reduction. The graph G(cid:48){V(cid:48),E(cid:48)} obtained
in the case of After DFW scenario, is composed on sub attack
graphs (sub-AGs), G1,G2...,Gn, i.e., G(cid:48){V(cid:48),E(cid:48)} = ∪N
i=1Gi, as
shown in Figure 6 (d). Since G(cid:48){V(cid:48),E(cid:48)} is obtained from
G{V,E} after collapsing vertices and edges at different layers
using a multi-level DFW, it naturally follows that G’ is a
subgraph of G, i.e., G(cid:48) ⊆ G. We utilize an important corollary
from spectral bisection algorithm [33] and the properties of
v1v6v4v3v7v5VM1VM2VM3DFW (segment level)Segment 1Segment 2DFW (cluster level)v2v6v4v5v2Attack Graph Before DFW Attack Graph After DFW VM1VM2VM3VM3VM2VM1𝐺𝑉,𝐸→𝐷𝐹𝑊𝐺′{𝑉′,𝐸′}–(1)𝐺′𝑉′,𝐸′=(∀𝑖=1𝑁𝐺𝑖(𝑉𝑖,𝐸𝑖))–(2)𝐶𝑜𝑠𝑡(∀𝑖=1𝑁𝐺𝑖)+𝐶𝑜𝑠𝑡𝐷𝐹𝑊≪𝐶𝑜𝑠𝑡(𝐺)–(3)(b) Incidence Matrix of Attack Graph: In(G)(c) Laplacian Matrix of Attack Graph: L(G)(a) Physical Nodes to Attack Graph Mapping(d) Graph Construction Cost e1e2e3e4e5e6e7e8e4e6e7480          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationlaplacian matrix discussed in this subsection to derive the
equation λ2(L(G(cid:48))) ≤ λ2(L(G)).
Result: G(cid:48){V(cid:48),E(cid:48)} ⊆ G{V,E} → λ2(L(G(cid:48))) ≤ λ2(L(G)),
i.e., on application of DFW, the algebraic connectivity, and in
effect, density of the AG reduces. Thus, our approach, helps in
creating scalable AGs (CAG) in a multi-tenant cloud network.
Cost Analysis: Upped bound on the cost can be obtained
by considering that graph G{V,E} is fully connected, in which
case, the micro-segmentation will not be able to achieve no-
ticeable beneﬁt. The cost of generating the full AG in the
absence of DFW, Cost(G), is much higher than in the case
of using DFW. The goal of micro-segmentation, however,
is to ensure that the graph is sparsely connected based on
white-listing approach.
i=1Cost(Gi) + Cost(DFW ) -
Figure 6 (d) and Cost(G(cid:48)) << Cost(G) since the effort
for generation of graphs G1, ..,Gi is computed in parallel
with the help of SDN controller. The only additional effort
Cost(DFW ) is needed for checking DFW rules, and maintain-
ing synchronization between different DFW agents present
on individual segments.
Consequently, Cost(G(cid:48)) = ∀N
6 Performance Evaluation
In order to evaluate and measure the performance of our pro-
posed approach. First, we created the system is shown in
Figure 2, which is a OpenStack [31] based system that is
running SDN controller and a number of virtual machines
(VMs) connected to OpenFlow switches. Our evaluation con-
sists of evaluating the scalability of AG when the number
of vulnerabilities increases, in which S3 proved to have a
reduced number of nodes and edges compared to not using
S3. Our second experimental evaluation is to measure the AG
generation time when the number of services increase, tak-
ing into account the generated number of segments as shown
in Table 2. Moreover, since S3 is utilizing SDN computing
capabilities, we conducted experiments to check how much
overhead our algorithm and AG module consume from the
SDN controller, which turned out not exceed 11% from the
overall SDN bandwidth and an optimal number of segments
in a scalable AG.
6.1 Attack Graph scalability Evaluation
As we mentioned in the introduction, the number of vulner-
abilities have a direct inﬂuence on the AG solubility due to
the overhead of managing and analyzing all the security state
those vulnerabilities cause. To show how scalable S3 is, we
simulated a system with a different number of vulnerabilities
as shown in Figure 7, the vulnerabilities in the OpenStack
based cloud system. The Figure 7 emphasizes on the relation-
ship between the number of vulnerabilities and the size of the
resulted AG in terms of nodes and edges, where the x-axis
shows the total number of vulnerabilities in the entire system,
Figure 7: Comparison for the number of Nodes and Edges be-
fore and after Using S3. Marked reduction in density achieved
using DFW
and the y-axis shows the number of nodes and edges in the
AG. The black and blue lines show the number of nodes and
edges in the AG before using our approach (which is equiva-
lent to MulVAL’s [27] approach), respectively. The red and
yellow lines show the number of nodes and edges in the AG
after using our approach, respectively. The total number of
nodes and edges before using S3 when the system has over
1000 vulnerabilities is about 13k nodes and 22k edges. This
is due to the absence of |DFW| rules affecting the reachabil-
ity between the individual components in the system. After
using S3, where the exact reachability information that is be-
ing enforced by the |DFW| is stated, the number of nodes
drop to about 5k and the number of edges is 7k, respectively -
Figure 7. This is a signiﬁcant reduction compared to an AG
without any |DFW| rules.
6.2 Attack Graph Generation Time and den-
sity Reduction Evaluation
It is crucial to generating AG in a timely manner. We created
several test cases to test the time required to generate the AG
when we have a different number of segments, and a differ-
ent number of services in each of those segments. We ﬁrst
started to measure the generation time of AG in a system that
contains 50-100 services, we inserted a mixture of vulnera-
bilities in the hosts such that we obtain the provided number
of segments shown in Table 2. Thus, in the ﬁrst experiment,
we are testing how much time is needed to generate an AG
for a system having 50-100 services with a various number of
vulnerabilities on those services that resulted in 5 segments.
Moreover, we are measuring the graph density of the resulted
AG using the following formula [10]:
| E |
Density =
| V | (| V | −1)
,
(3)
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 481Table 2: Sub-AG generation time, graph density, and the number of nodes and edges for each sub-AG when increasing the
number of services.
# Services
50-100 Services
100-200 Services
200-300 Services
300-500 Services
#Segments
5
Time (sec)
2.22
10
3.88
15
20
5
10
15
20
5
5.925
8.22
2.386
4.93
7.2112
10.229
3.56
10
7.15
15
20
5
10
15
20
10.6
13.96
6.46
11.05
15.91
19.7
# Edges
# Nodes
6552
5829
12186
18990
27450
14400
28494
40698
52956
18819
44100
63918
88065
34242
65922
93117
128580
10842
16895
24420
12805
25338
36191
47092
18101
39210
57951
79668
32533
60698
85623
116304
Density
19.3E-05
10.4E-05
6.6E-05
4.6E-05
8.8E-05
4.44E-05
3.1E-05
2.4E-05
5.7E-05
2.9E-05
1.9E-05
1.4E-05
3.2E-05
1.8E-05
1.3E-05
9.5E-06
where | E | is the total number of edges for the AG, and | V | is
the total number of nodes or vertices in the AG. Our evaluation
and approach show scalable AG generation. For instance, in
the last case in Table 2 where the system has 300-500 services
and it was divided based on the vulnerabilities in the system
into 20 segments, the AG generation time is about 20 seconds,
which is rational time for such a large system. In Table 3, we
show the average time for AG generation and the standard
deviation for the 5, 10, 15, and 20 segments cases respectively.
To prove the effectiveness of our DFW-based segmentation
approach, S3, we conducted additional experiments to exam-
ine the generation time by not considering the segmentation
and using a Firewall (centralized one); and segmentation by
DFW. Table 4 shows the AG generation time with and with-
out segmentation, for the speciﬁed number of hosts where
the vulnerabilities are simulated to give the shown number
of segments. The results when using |DFW| are signiﬁcantly