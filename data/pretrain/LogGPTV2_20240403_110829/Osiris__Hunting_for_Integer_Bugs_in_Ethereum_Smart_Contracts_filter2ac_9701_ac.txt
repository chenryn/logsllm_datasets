we came up with some heuristic rules that allow us to detect specic
cases of benign integer bugs. For example, Instead of immediately
Figure 1: An integer bug is reported as valid i it originates
from a source and ows to a sink.
consists in checking whether the binary representation of the trun-
cator contains any zeros (ignoring leading zeros). This pattern aims
at ltering out truncations that have been introduced by Solidity
in order to squeeze multiple variables in one data storage slot.
Signedness Bugs. We reuse the approach by Molnar et al. [21],
and adapt it to detect signedness bugs in Ethereum smart contracts.
The idea is to reconstruct signed/unsigned type information on all
integral values, from the executed EVM instructions. This infor-
mation is present in the source code but not in the bytecode. The
algorithm to infer this information automatically works as follows:
consider four dierent types for integer values: “Top”, “Signed”,
“Unsigned”, “Bottom”. “Top” means the value has not been observed
in the context of a signed or unsigned integer; “Signed” means that
the value has been used as a signed integer; “Unsigned” means the
value has been used as an unsigned integer; and “Bottom” means
that the value has been used inconsistently as both, a signed and
unsigned integer. These types form a lattice of four points. Our goal
is to nd symbolic variables that have type “Bottom”. Every variable
starts with the type “Top”. During execution we modify the type
of a variable, based on the type constraints of certain instructions.
For example, a signed comparison (e.g. SLT, SGT, etc.) between two
variables causes both variables to receive the type "Signed", whereas
an unsigned comparison (e.g. LT, GT, etc.) between two variables
causes both variables to receive the type "Unsigned". Any variable
that received both a signed and unsigned type, receives the type
“Bottom”.
3.3 Taint Analysis
Taint analysis is a technique that consists in tracking the propaga-
tion of data across the control ow of a program. Taint analysis is
extensively being used by numerous integer error detection tools
in order to reduce the number of false positives [3, 29, 36, 37]. It
is certainly possible to detect integer bugs without taint analysis.
However, there are cases where integer bugs might be benign. For
example, the Solidity compiler injects during compilation time in-
teger overows at certain locations in the bytecode in order to
optimise it for later execution. These overows are intentional and
should not be agged as malicious. Taint analysis can help to dis-
tinguish between benign overows introduced by the developer
or compiler, and malicious overows that are exploitable by an
attacker. In taint analysis we have the notion of so-called sources
and sinks, with the idea that data originates from a source and even-
tually ows into a sink. Taint is introduced by sources, which is
subsequently propagated across the state of a program. In the case
668
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
C. Ferreira Torres et al.
Bytecode/Solidity
Report
Symbolic 
Analysis
Taint Analysis
Integer Error 
Detection
Z3 Bit-Vector Solver
Figure 2: Architecture overview of O. The shaded boxes
represent its main components.
reporting an integer overow or underow as valid when we nd
it to be part of a branch condition, we check whether the predicate
is designed to actually catch the bug. We note that common checks
make use of the erroneous result to catch integer overows and
underows, for example if ((x + 1) < x) or if (x != (x * y) /
y). We observe that these checks often use the same variable, on the
right-hand side as well as on the left-hand side of the predicate. We
also observe that if a predicate catches an integer bug, it is inclined
to return soon or jump to a uniform error handling function. Hence,
we report an integer bug as invalid, if we nd the predicate to use
the same variable, on the right-hand side as well as on the left-hand
side, and one successor block of the branch condition in the control
ow graph ends in a JUMPI, REVERT or ASSERTFAIL.
4 OSIRIS
In this section, we provide an overview on the overall design and
implementation details of O3.
4.1 Design Overview
Figure 2 depicts the architecture overview of O. O can
take as input the bytecode or Solidity source code of a smart con-
tract. The latter gets internally compiled to EVM bytecode. O
outputs whether a contract contains any integer bug (e.g. overow,
underow, truncation, etc.). O consists of three main compo-
nents: symbolic analysis, taint analysis and integer error detection.
The symbolic analysis component constructs a Control Flow Graph
(CFG) and symbolically executes the dierent paths of the contract.
The symbolic analysis component passes the result of every exe-
cuted instruction to the taint analysis component as well as to the
integer error detection component. The taint analysis component
introduces, propagates and checks for taint across stack, memory
and storage. The integer error detection component checks whether
an integer bug is possible within the executed instruction.
4.2 Implementation
We implemented O on top of O’s [20] symbolic execution
engine. O faithfully simulates 124 out of the 134 EVM byte-
code instructions. The non-faithfully simulated instructions consist
of logging operations (i.e. LOG0, LOG1, LOG2, LOG3 and LOG4), oper-
ations regarding the output data from a previous contract call (i.e.
3O is available at https://github.com/christoftorres/Osiris
RETURNDATASIZE and RETURNDATACOPY), the operation to create a
new contract (i.e. CREATE) and operations to call other contracts (i.e.
DELEGATECALL and STATICCALL). Non-faithfully simulated means
that the engine faithfully simulates the stack, but does not im-
plement the complete logic of the operation as described in [38].
However, since all of these operations (except the logging opera-
tions) are related to contract calls and detecting integer bugs across
contract calls is out of-scope for this paper, we can safely ignore the
non-faithfully simulated instructions by O. O is written
in Python with roughly 1,200 lines of code (not counting O’s
symbolic execution engine). In the following, we briey describe
the implementation of each main component.
Symbolic Analysis. The symbolic analysis component starts by
constructing a CFG from the bytecode, where nodes in the graph
represent so-called basic blocks and edges represent jumps between
individual basic blocks. A basic block is a sequence of instructions
with no jumps going in or out of the middle of the block. O can
output a visual representation of the CFG depicting the individual
path conditions and highlighting the basic blocks that include inte-
ger bugs (see Figure 6 in Appendix A). After constructing the CFG,
the symbolic execution engine starts by executing the entry node of
the CFG. The engine consists of an interpreter loop that gets a basic
block as input and symbolically executes every single instruction
within that basic block. The loop continues until all the basic blocks
of the CFG have been executed or a timeout is reached. In the case
of a branch, the symbolic execution engine queries Z3 [4] in order
to determine which path is feasible. If both paths are feasible, then
the symbolic execution engine explores both paths in a Depth First
Search (DFS) manner. Loops are terminated once they exceed a
globally dened loop limit.
Taint Analysis. The taint analysis component is responsible
for introducing, propagating and checking of taint. The symbolic exe-
cution engine forwards every executed instruction to the taint anal-
ysis component. Afterwards, the taint analysis component checks
wether the executed instruction is part of the list of dened sources.
If that is the case, the taint analysis component introduces taint
by tagging the aected stack, memory or storage location. We
faithfully introduce and propagate taint across stack, memory and
storage. We implemented the stack using an array structure fol-
lowing LIFO logic. To represent memory and storage, we simply
used a Python dictionary that maps memory and storage addresses
to values. Since the EVM is a stack-based and register-less virtual
machine, the operands of an instruction are always passed via the
stack. Our taint propagation method identies the operands of
each EVM bytecode instruction and propagates the taint according
to the semantics of each instruction as dened in [38]. The taint
propagation logic tags according to the following principle: if an
instruction uses a tainted value to derive another value, then the
derived value becomes tainted as well. By following this principle,
we achieve a more precise taint propagation than, for instance,
M [23]. M propagates taint across the stack, but for
certain instructions it does not propagate taint across memory or
storage. For example, the instruction SHA3 computes the Keccak-
256 hash over a memory region that is determined by two operands
that are pushed onto the stack: oset and size. M simply
checks if at least one of the two operands is tainted. If so, it taints
O: Hunting for Integer Bugs in Ethereum Smart Contracts
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
the result that is pushed onto the stack. O on the other hand,
does not check the operands, but the memory region. O only
taints the result, if at least one of the values, that is stored in the
given memory region, is tainted. As a nal step, the taint analysis
component veries if a taint ow occurred, by checking whether
the executed instruction is part of the list of dened sinks and if
any of the values it used has been tainted by an integer bug.
Integer Error Detection. In contrast to the taint analysis com-
ponent, the integer error detection component is not called upon
every executed instruction. The integer error detection component
is only called at instructions that may result in integer bugs, such
as arithmetic instructions. For example, integer overow checks
are only performed if the symbolic analysis component executes an
ADD or a MUL instruction, whereas width conversion checks are only
performed if the symbolic analysis component executes an AND or a
SIGNEXTEND instruction. Moreover, calls to the integer error detec-
tion component are only performed if at least one of the operands
of the executed instruction is tainted. I these criteria are met, then
the symbolic execution engine eventually forwards the executed
instruction along with the current path conditions to the integer
error detection component. Afterwards, the component follows the
dierent techniques as described in Section 3.2 in order to detect the
specic integer bugs. For example, in the case of an AND instruction
with tainted operands, the symbolic analysis component will call
the integer overow detection method of the integer error detection
component. The integer overow detection method rst tries to in-
fer the sign and the width of the two integer operands as described
in Section 3.1 and then creates a formula with a constraint that is
only feasible if an integer overow is possible under the current
path conditions. This formula is afterwards passed on to the Z3
solver, which checks for its feasibility. If the solver nds a solution
to the formula, then the integer error detection component knows
that an integer overow is possible and returns an error back to
the symbolic analysis component. After that, the symbolic analysis
component calls the taint analysis component, which then taints
the result of the AND instruction where its source represents the
discovered integer bug.
5 EVALUATION
In this section we assess the correctness and eectiveness of O
via an empirical analysis and demonstrate its usefulness in detect-
ing real-world vulnerabilities in Ethereum smart contracts. The
empirical analysis is separated in a qualitative and a quantitative
analysis. Via the qualitative analysis we aim to determine the re-
liability of our tool by comparing our results with Z [18]. Via
the quantitative analysis we intend to demonstrate the scalability
of O and to measure the overall prevalence of integer bugs
contained in smart contracts that are currently deployed on the
Ethereum blockchain.
Experimental Setup. All experiments were conducted on our
high-performance computing cluster using 10 nodes with 960 GB
of memory. Every node has 2 Intel Xeon L5640 CPUs with 12 cores
each and clocked at 2,26 GHz, running a 64-bit Debian GNU/Linux
8.10 (jessie) with kernel version 3.16.0-4. We used version 4.6.0 of
Z3, as our constraint solver for the symbolic execution engine as
Unsafe
Safe
711
233
Tool
O
Z [18]
Table 2: Number of integer overows and underows de-
tected by Z and O.
No Result
Timeouts
172
628
0
22
35
14
well as for our integer error detection module. For the symbolic
execution engine we set a timeout of 100 ms per Z3 request. The
global timeout for the symbolic execution was set to 30 minutes per
contract. For our integer error detection module we set a timeout
of 15 seconds per Z3 request. The loop limit, depth limit (for DFS)
and gas limit for the symbolic execution engine was set to 10, 50
and 4 million, respectively.
5.1 Empirical Analysis
5.1.1 alitative Analysis.
Dataset. Kalra et al. [18] present a tool called Z, which is
capable of detecting integer overows and underows. The au-
thors evaluate their tool using a dataset of 1,524 contracts that
they obtained by periodically scraping explorers such as Etherscan,
Etherchain and EtherCamp over a period of three months [19] on
the main and test network. We decided to reuse this dataset in
order to compare our results with Z and to evaluate bugs that
Z does not detect such as division by zero or truncation bugs.
However, the published dataset does not contain any bytecode or
source code. Eventually, we were able to download the bytecode
and source code for 961 contracts, where 883 are unique.
Results. We run O on the 883 contracts and summarise our
results for each of the three types of bugs below.
Arithmetic Bugs. We compare O’s capability of detecting
integer overows and underows with Z. Table 2 shows that
O reports most contracts to be safe whereas Z reports most
contracts to be unsafe. “Safe” means that no overow or underow
has been detected, whereas “unsafe” means that either an overow
or an underow has been detected. The reason for discrepancy