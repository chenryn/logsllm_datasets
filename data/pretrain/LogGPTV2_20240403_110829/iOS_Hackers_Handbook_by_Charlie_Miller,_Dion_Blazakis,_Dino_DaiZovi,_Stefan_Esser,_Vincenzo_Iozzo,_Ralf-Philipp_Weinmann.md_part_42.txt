all the kernel patches you normally fi nd in an untethered jailbroken system. The
ramdisk is custom built on every execution, because depending on the switches
a user sets while performing the jailbreak, different fi les will be created in the
root directory of the ramdisk. The presence of these fi les is later detected by
the jailbreak executable on the ramdisk, which decides what features of redsn0w
should be activated. For example, the presence of a fi le called /noUntetherHacks
will skip the installation of untethering exploits.
When the ramdisk is booted, the kernel executes the included /sbin/launchd
binary from the ramdisk, which contains a small stub that initializes the jailbreak.
This binary fi rst mounts the root fi lesystem and the data partition into the
system. Both will be mounted as readable and writable because of the required
modifi cations. Eventually, an executable called jailbreak will take over and
perform all of the following steps.
Jailbreaking the Filesystem
By default, the fi lesystem of an iPhone is split into two partitions. The fi rst
partition is the root fi lesystem, which contains the iOS operating system
fi les and the set of standard applications like MobileMail or MobileSafari.
In earlier iOS versions, the root fi lesystem was approximately the size of
the fi les on the partition, with not much free space left. Nowadays the root
fi lesystem is around 1 GB in size and has around 200 MB of free space left,
although it is not supposed to be modifi ed and therefore is mounted read-only
by default. The rest of the device’s storage space is allocated to the second
partition, the data partition, which is mounted as readable and writable into
cc1100..iinndddd 330033 44//1166//22001122 55::4477::4433 PPMM
304 Chapter 10 n Jailbreaking
the directory /private/var. This is confi gured by the /etc/fstab fi le on the
root fi lesystem:
/dev/disk0s1 / hfs ro 0 1
/dev/disk0s2 /private/var hfs rw,nosuid,nodev 0 2
As you can see, the mount confi guration for the data partition contains the
fl ags nodev and nosuid. The nodev fl ag ensures that device nodes that might
exist on the writable data partition, due to a fi lesystem-level attack, will be
ignored. The nosuid fl ag tells the kernel to ignore the suid bit on executables
within the data partition. The suid bit is used to mark executables that need
to run as root, or generally as a different user than the one executing it. Both
these fl ags are, therefore, an additional small line of defense inside iOS against
privilege escalation exploits.
This default confi guration is a problem for all jailbreaks, no matter whether
bootrom-level or userland, because they usually require making modifi cations
to the root fi lesystem, for example to survive reboots or add additional daemons
and services. The fi rst action of each jailbreak after acquiring root permissions
is, therefore, to (re-)mount the root fi lesystem as readable and writable. To persist
this change across reboots, the next step is to replace the system’s /etc/fstab
fi le with something like this:
/dev/disk0s1 / hfs rw 0 1
/dev/disk0s2 /private/var hfs rw 0 2
This new fi lesystem confi guration loads the root fi lesystem as readable and
writable and removes the nosuid and nodev fl ags from the mount confi guration
of the second partition.
Installing the Untethering Exploit
Every time a new version of iOS comes out, previously known vulnerabil-
ities are closed. Therefore, there is a limited time window during which
redsn0w can jailbreak new fi rmware on old devices, but cannot install an
untethering exploit.
Once a new untethering exploit is available, redsn0w gets modifi ed by its
author to install it. And because every new set of exploits is different, they
always require different installation steps.
But, although the actual untether installation is different, it usually comes
down to just renaming or moving some fi les on the root fi lesystem and then
copying some additional fi les onto it. When you decompile the current version
of redsn0w, you can see that it supports installing untethers for most of the
iOS versions between 4.2.1 and 5.0.1, and see exactly what fi les are required for
each untether.
cc1100..iinndddd 330044 44//1166//22001122 55::4477::4433 PPMM
Chapter 10 n Jailbreaking 305
Installing the AFC2 Service
The Apple File Connection (AFC) is a fi le transfer service that runs on every
iPhone and allows you to access fi les within the media directory /var/mobile/
Media of the iPhone via USB. This service is provided by the lockdownd daemon
and is named com.apple.afc. However, lockdownd only provides access to the
service, its actual implementation is within the afcd daemon. It can be accessed
from a Mac through the MobileDevice.framework or through the iTunes-
MobileDevice.dll on a Windows PC.
A second lockdownd service is powered by afcd. It is registered with the
name com.apple.crashreportcopymobile. It is used to copy the CrashReporter
reports from the device to the computer, and it is limited to providing read and
write access to the /var/mobile/Library/Logs/CrashReporter directory and
its subdirectories only.
Because both these services run with the permissions of the mobile user
only and are locked into specifi c directories, they are too limited to be use-
ful to jailbreakers. Therefore, redsn0w and several other earlier jailbreaking
tools register an additional service with lockdownd called com.apple.afc2.
This service uses the afcd daemon to provide read and write access to the
whole fi lesystem with root permissions, which is a quite dangerous feature of
jailbreaks that the majority of users do not know about. It basically means that
attaching a jailbroken iPhone without a passcode, or in an unlocked state, to a
USB power station or another person’s computer gives the other side read and
write access to the whole fi lesystem without user interaction. They can steal
all your data or add rootkits.
The com.apple.afc2 service is installed by changing the lockdownd con-
fi guration within the /System/Library/Lockdown/Services.plist fi le. It is a
normal .plist fi le and therefore can be modifi ed with the standard tools or
API for .plist fi les. In case of redsn0w the new service is installed by adding
the following lines to the fi le:
com.apple.afc2
AllowUnactivatedService
Label
com.apple.afc2
ProgramArguments
/usr/libexec/afcd
--lockdown
-d
/
cc1100..iinndddd 330055 44//1166//22001122 55::4477::4433 PPMM
306 Chapter 10 n Jailbreaking
Because the fi lesystem jailbreak and the new AFC2 service are provided
by simple confi guration changes and do not require unsigned binaries to be
executed, they both work after reboot, even if a device has no untethered jailbreak
available.
Installing Base Utilities
Apple does not ship the iPhone with a UNIX shell, so it is no surprise that the
/bin and /usr/bin directories on the root fi lesystem are nearly empty and not
fi lled with all the executable binaries you expect to fi nd in these directories. In
fact, the latest version of iOS 5.0.1 ships with only fi ve preinstalled executables
in these directories:
n /bin/launchctl
n /usr/bin/awd_ice3
n /usr/bin/DumpBasebandCrash
n /usr/bin/powerlog
n /usr/bin/simulatecrash
Because of this, jailbreak utilities like redsn0w usually install a set of base
utilities in these directories that implement basic features, which make the
installation of the fi les of the jailbreak easier. The following list of tools was
extracted from the jailbreak binary on the redsn0w ramdisk. It shows the list of
base utilities installed by redsn0w. These tools are also used within the jailbreak
binary itself, for example to decompress tar archives or to change the content
of .plist fi les.
n /bin/mv
n /bin/cp
n /bin/tar
n /bin/gzip
n /bin/gunzip
n /usr/sbin/nvram
n /usr/bin/codesign_allocate
n /usr/bin/ldid
n /usr/bin/plutil
Aside from these fi les, some additional libraries and fi les are installed that
are useful only in the context of the jailbreak and not for the user of a UNIX
shell. Therefore, we do not list them. One interesting thing here is that the
current stock iOS fi rmware already comes with a /usr/sbin/nvram binary that
is overwritten by redsn0w.
cc1100..iinndddd 330066 44//1166//22001122 55::4477::4433 PPMM
Chapter 10 n Jailbreaking 307
Application Stashing
When applications are installed from the Apple App Store, they are installed
inside the directory /var/mobile/Applications, which resides on the big data
partition of the iPhone. Therefore, the number of applications that can be installed
depends on the amount of free space available on the data partition. This is
usually in gigabytes and therefore not really a limitation.
For jailbreak applications installed through Cydia, which is the jailbreaker’s
equivalent to the Apple App Store, this is different. These applications, like
Cydia itself and all the built-in binaries, are installed in the /Applications
directory, which is on the root fi lesystem. As mentioned before, the size of the
root fi lesystem depends on the fi rmware version, its size, and the device type.
Usually, it is between 1 GB and 1.5 GB in size, with about 200 MB of free space,
which does not leave much space for installable applications.
In addition, wallpapers and ringtones are also stored on the root fi lesystem in
the directories /Library/Wallpaper and /Library/Ringtones. Therefore, every
wallpaper or ringtone that is installed through Cydia will eat up the already
limited space for applications.
To solve this problem, the various jailbreaks implement the so called applica-
tion stashing. The idea is to create a new directory on the data partition of the
iPhone called /var/stash and move a number of directories that are normally
located on the root fi lesystem into this directory. The original directories are
then replaced by symbolic links to the new location.
The following list shows the directories that are currently stashed away into
the /var/stash directory:
n /Applications
n /Library/Ringtones
n /Library/Wallpaper
n /usr/include
n /usr/lib/pam
n /usr/libexec
n /usr/share
However, not all jailbreaking tools or versions of these tools perform the appli-
cation stashing. If this is the case, it will be detected and made up for by Cydia,
on its fi rst invocation. This is the long “Reorganizing Filesystem” step in Cydia.
Bundle Installation
The next step in the jailbreak installation process is the installation of the applica-
tion bundles. Depending on the tool used, this is either a custom bundle created
by an advanced user, or the Cydia bundle, which is usually shipped by default
cc1100..iinndddd 330077 44//1166//22001122 55::4477::4433 PPMM
308 Chapter 10 n Jailbreaking
with the jailbreak. For example, the bundles accepted by redsn0w are simple
tar archives that can optionally be packed with gzip. They are unpacked with
the previously installed base utilities, so that the jailbreak does not require code
for archive unpacking.
The bundle installation loops through each of the bundles contained on the
ramdisk and unpacks one after another. During unpacking, tar is told to pre-
serve UNIX permissions, which allows you to have bundles with the suid root
bit set. Cydia requires this, because without root permissions, it cannot install
new applications. It is interesting to note that due to some Apple trickery, GUI
applications may not have the suid bit set on their main binary. Cydia works
around by having a shell script called Cydia that will then call the suid root
main binary, which is called MobileCydia.
However, the installation of application bundles is not fi nished after they are
unpacked into the /Applications directory. Instead, all installed applications
have to be registered in a special systemwide installation cache that is stored
in the fi le /var/mobile/Library/Caches/com.apple.mobile.installation
.plist. This fi le is a normal .plist fi le with the following format:
LastDevDirStat
…
Metadata
…
System
com.apple.xxx
…
User
someuserapp
…
The cache contains a timestamp, some meta data, and information about all
system and user applications. System applications are all those inside the main
/Applications directory and user applications are those downloaded from the
Apple App Store inside /var/mobile/Applications. Therefore, all application
bundles have to be registered inside the System cache entry. Within redsn0w, this
is done by reading the application’s Info.plist fi le and using the information
contained to create a new cache entry. First, the CFBundleIdentifier key is read
and used as a new key for the cache. Then a new key called ApplicationType
with the value System is added to the dictionary inside the Info.plist fi le.
Finally, the new content of the whole dictionary is copied into the cache.
cc1100..iinndddd 330088 44//1166//22001122 55::4477::4433 PPMM
Chapter 10 n Jailbreaking 309
Post-Installation Process
After everything is installed, redsn0w invokes the sync() system call to ensure
that everything is written to the disk. Then, the root fi lesystem is remounted as
read-only again, which ensures that all write buffers are synced onto the disk.
The data partition, which is mounted to the /var directory, is then unmounted.
In case of a mount operation failure, the process is repeated until it is successful
or a number of retries is exceeded.
The jailbreak is then fi nished by rebooting the system with the reboot()
system call. In case of a tethered jailbreak, the device then reboots into a non-
jailbroken state, unless one of the installed bundles tampered with one of the
fi les required for booting. redsn0w is then required to reboot the device tethered
in a jailbroken state.
In the case of a fully untethered jailbreak, the device reboots into a jailbroken
state, because the installed untether exploits some application during the boot
process and then uses an additional kernel exploit to execute code inside the
kernel. You learn more about this kernel payload in the next section.
Executing Kernel Payloads and Patches
The previous chapter about kernel exploitation did not discuss kernel-level
payloads and instead postponed the topic to this chapter. The reason for this
is that the executing kernel payload is the actual break-the-jail part within a
jailbreak, and, therefore, the most important part of it. Because of this we believe
the topic to be better suited for this chapter.
Although each kernel exploit and each payload is different, you can distin-
guish four common components of kernel-level payloads used for jailbreaks:
n Kernel state reparation
n Privilege escalation
n Kernel patching
n Clean return
The following sections describe each of these points in detail.
Kernel State Reparation
Although different types of kernel vulnerabilities exist, the execution of arbitrary
code inside the kernel is usually the result of some kernel-level function pointer
being overwritten. Depending on the vulnerability type, this overwritten func-
tion pointer might be the only corruption in kernel memory. However, quite
often this is not the case. Vulnerability types like stack or heap buffer overfl ows
usually cause larger corrupted areas. Especially in the case of a heap buffer
cc1100..iinndddd 330099 44//1166//22001122 55::4477::4433 PPMM
310 Chapter 10 n Jailbreaking
overfl ow that attacks heap meta data structures, the kernel heap might be in an
unstable state after exploitation. This results in a kernel panic sooner or later.
It is therefore very important that every kernel exploit fi xes the memory or
state corruption it caused. This should start with restoring the overwritten
function pointer to the value it had before the corruption. However, in the gen-
eral case this is not enough. For heap exploits the kernel reparation might be a
very complex task, because it means the attacked heap meta data needs to be
repaired. Depending on the methods used for kernel heap massage, this can
also require scanning the kernel memory for leaked heap memory blocks that
need to be freed again to ensure that the kernel does not run out of memory.
In the case of stack data corruptions, whether the kernel stack needs to be
fi xed or not depends on the specifi c vulnerability. A stack buffer overfl ow inside
a system call doesn’t need to be fi xed, because it is possible to leave the kernel
thread with an exception, without causing a kernel panic.
Privilege Escalation
Because all applications on the iPhone run as lesser privileged users like mobile,