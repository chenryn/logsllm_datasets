### Owning Bad Guys and Mafia with JavaScript Botnets

**Authors:**
- Chema Alonso (Email: @chemaalonso)
- Manu “The Sur” (Email: [Not Provided])

**Institution:**
- Informatica 64 (http://www.informatica64.com)

**Abstract:**
"Man in the middle" (MITM) attacks are common and dangerous. Using a TOR connection or an anonymous proxy server implies accepting a MITM schema in one's internet connection. This paper describes how easily a JavaScript botnet can be constructed, the associated risks, and the types of individuals who use such services.

### Introduction to Botnets
Building a botnet is an idea that has crossed the minds of many security professionals. The allure of having a control panel to manage thousands of machines is tempting, but it is a step towards cybercrime and must be approached with extreme caution. In this article, we present a proof of concept for creating a botnet, but with a different philosophy. Our work is entirely passive, aimed at studying the risks associated with popular services like "Anonymous Proxies" and TOR networks, rather than controlling anyone's activities.

### Man in the Middle (MITM) Attacks
Before delving into the architecture, it is essential to review the concept of MITM techniques. These attacks are prevalent and effective in the networking field, often involving ARP Spoofing, Rogue DHCP, ICMP Spoofing, SLAAC, and DNS Poisoning. MITM schemes have also extended to web browsers (Man in the Browser) and mobile devices (Man in the Mobile), where they are used to steal login credentials and bank confirmation SMS.

#### Man in the Tab
More subtle are the "Man in the Tab" or "JavaScript in the middle" techniques, also known as browser cache poisoning. Here, the attacker controls only the content of a single tab, injecting malicious code into a web page. This is commonly used in Cross-Site Scripting (XSS) attacks, where the attacker injects code that runs in the browser tab. Another method involves compromising legitimate web servers to inject JavaScript code, redirecting visitors to a server hosting exploit kits.

**Figure 1:** Trojan JS/Redirector.GA

Some malware, like the Trojan JS/Redirector.GA, uses the Google Analytics JavaScript file to load a malicious payload from a controlled server, thereby infecting the user's browser.

### Inside the Infected Environment
Once a JavaScript file is loaded on a compromised page, the attacker can access all non-HTTP Only cookies and perform various attacks, including Clickjacking, Phishing, form interception, and loading remote code. Advanced tools like BeEF (Browser Exploitation Framework) provide a range of payloads for such scenarios.

**Figure 2:** BeEF Project

### Creating a JavaScript Botnet
To create a botnet, we decided to focus on the TOR network and anonymous proxy servers. We set up a machine to act as a MITM, enrolling it as both a TOR node and an anonymous proxy server. However, our TOR node was detected and blocked due to periodic security tests. With proxy servers, the situation was different.

**Figure 3:** DNS test log in TOR

### Architecture of the Solution: JavaScript Infection
To infect clients with malicious JavaScript files, we modified existing JavaScript files passing through the proxy server by adding code to load a payload each time the code is executed in a browser tab.

**Figure 4:** Malicious Proxy architecture

### Setting Up the Proxy Server: SQUID
To rewrite JavaScript files, we followed these steps:
1. Download the file from its original location.
2. Save it to a temporary location.
3. Add the JavaScript infection code at the end of the file.
4. Set the file expiration date to 3,000 days.
5. Deliver the new JavaScript file to the client.

We used the `URL_Rewrite_Program` option in SQUID to run a Perl program called `poison.pl` to perform these steps.

**Figure 5:** squid.conf file with activated `url_rewrite_program`

**Figure 6:** `poison.pl` module infects JavaScript files

We also installed the `mod_expires` module in Apache and modified the `.htaccess` file to change the expiration date of the objects.

**Figure 7:** .htaccess file of the temporary folder

### The Infection Process
The `pasarela.js` file loads a poisoned payload from a malicious server and reports the client's identity by loading an image with `jsonip.php`.

**Figure 8:** `pasarela.js` file copied into all JavaScript files

### Distributing the Malicious Proxy
To get "bad guys" to use our malicious proxy server, we registered it on a list of proxy servers. These lists are often recommended for obtaining anonymous IP addresses. We registered our IP address with port 31337 to attract attention.

**Figure 9:** Proxy servers service

These sites perform basic security tests, but once the proxy is listed, it appears on numerous other sites and applications without further verification.

**Figure 10:** Rogue Proxy IP appeared in thousands of sites

### Expansion of the Botnet
After distributing the IP address, we waited to see how many users would be infected. We implemented a small PHP panel to track the bots, which was later hacked by Spanish hackers after we presented it at RootedCON. Initially, the number of infections was so high that it overwhelmed our panel, requiring us to optimize queries and be more selective in data collection.

**Figure 11:** Map of active bots by countries

At one point, the panel tracked about 5,000 bots, with nearly 1,000 active in the last hour. Russia, Brazil, and Indonesia were the most active regions, aligning with the sources of much malware.

### Making Payloads
With `pasarela.js` in the browser, the possibilities for exploitation are vast. From launching DDoS attacks to defacing visited sites, phishing for login credentials, and stealing session cookies, the potential for damage is significant.

This research aims to highlight the risks associated with using anonymous proxy services and the ease with which a JavaScript botnet can be created and deployed.