part, the method is in the form of function pointer and stored in a
dictionary.
them. After all, they are just different versions of the same
library, providing identical or very similar services to the users.
For example, no matter how different an ad library’s Android
and iOS versions look like, they have to communicate with
the same server or at least the hosts in the same domains
(http://apiconﬁg.adwo.com for adwo), and they need to promote
the similar products. In our study, we developed a technique
that establishes such a correlation through the invariants shared
across the variations of the same library. More speciﬁcally, our
approach performs a static invariant discovery, using a training
set to select from a known list of invariants [21] suitable
for bridging the gap between the platforms. Such invariants
were later automatically extracted from the Android PhaLibs
(packages included in the clusters) as well as over 140,000
iOS apps (decrypted using Clutch [22] and dissembled using
capstone [23]) and used to identify the libraries embedded
within the iOS apps. Further we compared the suspicious
behaviors between the Android and iOS libraries of the same
origin to determine whether the activities deemed potentially
harmful on the Android side are also there within the iOS
counterpart. This is important because Apple is more rigorous in
security control than Android. It is possible that some Android-
side operations are no longer allowed on iOS (e.g., sending
SMS in background). For this purpose, we utilized VirusTotal
to indirectly validate the potentially harmful behaviors in iOS
apps, even though the AV system cannot directly work on the
Apple platform. Following we elaborate our techniques.
Cross-platform invariants. Invariants provide valuable infor-
mation about a program’s operations and data structures, which
is a good source for software testing [24], understanding [25]
and etc. A typical invariant inference approach usually in-
struments the source code of a targeted program, runs it on
different inputs for several times, and records the values of
each variables inside the program for inferring invariable values
at speciﬁc program points such as procedure entries and exits.
These existing techniques aim at discovering invariants
within the same program or between its variations built by the
same group of developers. What we are looking for, however,
is the connections between libraries on different platforms,
which are developed independently, involving different vari-
able/function names, control/data ﬂows and even different API
and system calls speciﬁc to the platforms (a property used in
the prior research as an invariant [21]). Also challenging here
is the scalability of the cross-platform analysis: as mentioned
earlier, we need to map 763 libraries and their 4,912 variations
(discovered from 1.3 million Android apps) to the binary code
of 140,000 iOS apps. Therefore, we cannot afford to execute
these programs to identify their runtime invariable data, and
have to resort to a static invariant analysis.
To ﬁnd out such cross-platform invariants, we looked into
a collection of program points typically used in invariant
discovery, as elaborated in the prior study [21], including
program entry, program exit and loop header. At different
program points, the invariants are different, which affects
the outcomes of the mapping. More speciﬁcally, procedure
entries and exits are widely used as the program points (e.g.,
by Daikon [21]) where invariants are collected. However,
when cross-examining procedures (i.e., methods) over different
platforms, we found that rarely they could be mapped to their
counterparts. Also unreliable is the code fragment within a
method, which cannot be used to link independently developed
libraries, as discovered in our study. Further complicating our
mission is the difﬁculty in even identifying libraries within
the binary code of an iOS app: unlike an Android library,
which is integrated into an app as a separate Java package, an
iOS library is typically broken down into methods and mixed
together with other libraries and program components. We
found in our research that the only reliable program unit for the
invariant discovery cross platforms is class. A class is related to
a certain object within the program, such as a button, and often
designed to handle certain events. At this level, we observe
some cross-platform links: e.g., the same button/webview
shows up on both Android and iOS libraries and a similar
click/load web page event needs to be handled by the
corresponding objects on these platforms. Also, a Java class is
easy to ﬁnd from Android bytecode; on the iOS front, all the
methods under a class are named by the class name followed
by their individual method names, which allows us to easily
group them together.
Based upon this observation, we further studied the cross-
platform invariant discovery over a training set with 20
manually paired Android and iOS libraries. These libraries
were collected from their ofﬁcial websites. Within each pair,
we manually labeled their corresponding classes (those with
the same functionalities) whenever possible. Altogether, 126
pairs of classes were identiﬁed and labeled. Over those library
pairs, we inspected the program points according to the list
of candidate invariants [21], using a dictionary (manually
constructed) to translate the instructions and APIs cross
platforms. More speciﬁcally, our approach ran SmartDroid [26]
to construct the control-ﬂow graph (CFG) for the methods under
each Android class and built the CFG for the iOS methods
based on capstone [23]. Then, we looked at the corresponding
program points (class construction, class destruction, view
appear, view disappear, or methods with sensitive events) within
the classes across the platforms to ﬁnd out those whose values
can be determined statically, and are also consistent across the
corresponding classes and different between unrelated classes.
What has been found was further manually inspected to ensure
363363
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
Scheme
Cyphertext text/code
Program logs
Certain Format
URL related
“adwo://”, “wgtroot://”, “mraid://”, “redir://”
“DUBu6wJ27y6xs7VWmNDw67DD”
“02e310a99f1640b53e88e9e408295a94”
“Load Timeout”, “FailedToReceiveAd : %@”
“[AdPack] interstitial displayed”
“”, “”
“yyyy-MM-dd’T’HH:mm:ssZZZ”
“&width=%d”, “&ad network=”
“http://track.adwo.com:18088/track/i”
“http://www.admarket.mobi/ftad/apiadreq”
that indeed the program features are present within the classes
on the both platforms and also reliable. This study shows
that constant strings (or substrings) turn out to be the most
reliable feature shared by the related libraries on both platforms.
Such strings include URLs, JSON Keys, program logs, etc.,
which are expected to be utilized by the libraries no matter
how it is implemented. Table I elaborates the strings and how
they are used. For example, within the AxAdObject class
of the library admixer, strings like “Load Timeout” and
“FailedToReceiveAd” appear on both the Android and
iOS side, which are the text the apps use to communicate
with the user, and strings like “&ad_network=” can also be
mapped, which are used to compare the input data from the
remote servers to ﬁnd out its type (e.g., different commands).
How strings are used?
Cross-platform example strings that we found
Keys for JSON or Dictionary
“AppSEC”, “mediaURL”, “guid key”
Resources
“offerwall-ﬂow.html”, “webview bar back.png”
Developers’ information
“PI:EMAIL”
Command and JS code
“adc bridge.ﬁreAppPresenceEvent( ´%@´, false);”
“window.mogoview.ﬁreChangeEvent(%@);”
TABLE I: Cross-platform strings and how they are used.
Figure 6 illustrates the results of using common strings as
invariants to pair libraries over a test set with 126 pairs of
classes and 20 pairs of libraries. As we can see, when the
number of matched constant strings (at least 5 letters long
and at different program points) within a pair of classes goes
above 8, the false detection rate (FDR, the ratio of incorrectly
mapped classes among all those paired across the platforms)
becomes only 1%. Although the coverage is 40% in this step,
we perform an extension on these pairs and ﬁnd much more
classes in the next step. Further, when the number of matched
class pairs (through the constant strings) exceeds 3, an Android
library is almost certain to be mapped to its iOS counterpart.
Therefore, these two thresholds (8 for pairing classes and 3 for
pairing libraries) were used in our research to discover Android-
related PhaLibs from iOS apps. Running this technique on
140,000 iOS apps, we successfully mapped 46 Android PhaLibs
to the iOS libraries integrated within 17680 apps. All these
matched libraries were manually validated, by inspecting their
corresponding functionalities, and we found that the relations
between the identiﬁed libraries (pairs of Android packages and
iOS apps) were all correct (Section IV-A).
Finding library members. As discussed above, across the
platforms, we can correlate an Android library to its counterpart
integrated within an iOS app. Particularly, the classes within
the app that have been mapped to their Android counterparts
based upon shared strings are all considered to be within the
same library. However, these libraries, which we call anchors,
are the only members of the library we can ﬁnd. Other library
o
i
t
a
r
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
False detection rate: 0.01
2
7 12 17 22 27 32 37 42 47 52 57 62 67 72 77 82 87 92
Number of strings
false detection rate
coverage
Fig. 6: False detection rate and coverage when using different number
of strings to map classes.
members also need to be discovered from the iOS app for
analyzing the library’s behaviors. This is nontrivial, due to the
way iOS libraries are integrated within the app: all the methods
are mixed together, and even though we can still group them
using their names into classes, there is no straightforward way
to link different classes together to ﬁnd a library. Our solution
is to statically analyze the code within the anchors to identify
their relations with other classes (e.g., an anchor’s method is
invoked by another class) and use such relations to ﬁnd other
members within the same library. Note that a direct invocation
from a class B to the anchor A does not necessarily mean that
they are inside the same library: for example, B could be a
function within the app that makes a call to the library where
A stays.
Speciﬁcally, in our research, we developed a technique that
automatically explores the anchors’ relations with other classes
to discover other members inside a library. Our approach is
based upon three kinds of inter-class relations: Call, Inherit and
Refer. When a method in Class A calls a method in Class B,
their relation is denoted by A →Call B. When A is inherited
from B, the relation is A →Inherit B. When an object of B
is used inside A, we describe the relation as A →Ref B. Note
that the relations here are directional: e.g., A →Call B does
not imply B →Call A.
Our approach uses the following rules to discover new library
members:
• For any class A inside a library, we consider another class
B also inside the same class if B is not a framework class,
which is determined using a manually constructed list with
972 system classes (on Apple SDK 8.3), and also A →Call B
or A →Inherit B or A →Ref B. In most cases, if a method
calls, inherits or refers to the object within another non-system
class, the latter should also be part of the library.
• For any anchor class A inside a library, we consider a
non-framework class B part of the library if B →Call A or
B →Inherit A or B →Ref A, and there exists another Android
class B(cid:2) that has the same relation with A’s counterpart A(cid:2),
and B and B(cid:2) share at least k common strings. In this case,
B is also labeled as an anchor.
Here k is set below 8, the threshold for selecting an anchor
without considering its relations with other classes. This is
because B’s relation with A, an anchor, is an additional feature
that can help classify B, and therefore its afﬁliation can be
364364
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
E
ref
anchor
other class
a library
call
F
A
ref
inherit
D
call
call
B
C
G
Fig. 7: An example showing how to extend classes using anchors in
a mapped library.
determined without solely relying on the common strings.
Indeed, in our research, we analyzed 222 such classes and
found that when k ≥ 3, B can always be classiﬁed into A’s
library, without any false positive.
Given a set of anchors identiﬁed from an iOS app solely
based upon common strings, the above two rules are then
applied iteratively to other classes within the app until no
new class can be added into the library. Figure 7 presents an
example for this cross-platform library identiﬁcation. In the
ﬁgure, the class A is an anchor and all other classes (B, C,
D in the ﬁgure) that it calls, inherits or refers should be put
into the library (due to the ﬁrst rule). Further, G is classiﬁed
into the library because of its relation with D. Also, though
E →ref A and F →call A, we only set F as an anchor and a
member of the library since it shares at least 3 common strings
with its Android counterpart while E does not.
In our research, we utilized a test set with 20 mapped
library pairs to evaluate the effectiveness of the above rules for
discovering iOS classes within a library. For each library pair,
the two rules were applied to extend the iOS library that initially
only contains anchors. Then by comparing each newly added
class with the ofﬁcial iOS library downloaded from the web, we
manually checked whether the class should be included in the
library. If not, a false positive is recorded. Once the iOS libraries
was fully extended, we manually checked all the classes our
approach identiﬁed. The FDR was 0.5%. A limitation of this
technique is that it cannot cover the independent classes with
no relation with other classes. To measure how many classes
were missed, we checked the ofﬁcial libraries and found that
the false negative rate is 28.84%.
Potentially harmful behavior. Successful mapping of an
Android PhaLib to an iOS library does not necessarily mean that
the latter is potentially harmful. Due to Apple’s strict security
control, including its app vetting and security protection at
the OS level, some potentially harmful behaviors within the
Android library could be dropped from its iOS counterpart.
Further, it is possible that an Android PhaLib is a repackaged
legitimate library, while its corresponding iOS library recovered
from apps has not been contaminated. As mentioned earlier,
conﬁrming potentially-harmful activities within an iOS app is
hard, due to the lack of ground truth (no public AV system
working on iOS apps). In our research, we came up with a
novel technique that leverages VirusTotal to determine the
presence of suspicious behavior within an iOS app. More
speciﬁcally, our approach is designed to ﬁnd a corresponding
behavior between the Android and iOS versions of a library,
and further determine whether such a behavior is considered
to be potentially harmful by VirusTotal: if so, then we get the
evidence that indeed the iOS library behaves in a way that
VirusTotal would consider to be potentially harmful when the
same behavior is observed from an Android app.
To this end, we ﬁrst need to model a library’s behaviors
across the platforms. Conventionally, a program’s behavior is
described by its API sequences, which has been extensively
used in PHA detection [27]. However, a direct application of
the model to serve our purpose faces a signiﬁcant challenge.
To see where the problem is, let us look at Figure 8, which
presents an API sequence within an Android library for adwo,
and another sequence in an iOS app that does the same
thing. The trouble here, as we can see from the ﬁgure, is that
not only a dictionary is needed to map the APIs from one
platform to the other, but some semantic knowledge should be
there to help understand that the operations performed by one
API on one platform (e.g., CTTelephonyNetworkInfo:
subscriberCellularProvider in the ﬁgure) may need
to be handled by multiple APIs on the other platform (e.g.,
ConnectivityManager.getActiveNetworkInfo()
and NetworkInfo.getTypeName() for ACCESS_
NETWORK_INFO). Precise mapping of such a relation (one to
many APIs for a speciﬁc set of operations) is hard and cannot
be easily done using a dictionary.
is
the
to
and
is
further
replaced
removing
and
the
category
READ_DEVICE_INFO
sequences,
(e.g,
An observation from the ﬁgure
replacing
that once we
each API with
generalize
its
CTTelephonyNetworkInfo:
by
subscriberCellularProvider
ACCESS_NETWORK_INFO)
the
consecutive occurrences of the same category (e.g., dropping
repeated ACCESS_NETWORK_INFO
the subsequence of
and keeping only one),
two sequences on the
Android and iOS fronts look very much alike, given
the translations between their API categories: e.g.,
the
Android API TelephonyManager.getDeviceId()
is mapped
also
ASIdentifierManager:advertisingIdentifier.
In the ﬁgure, we show the part of
the dictionary for
such API category translations. It is conceivable that this
generalization makes the dictionary construction easier and
the comparison across different API sequences feasible. In
the meantime, the treatment is also found to be sufﬁcient
speciﬁc for modeling an app’s behavior. Our research shows
that comparing two sequences at this API category level is
accurate, introducing 3.3% FDR according to our manual
validation. Intuitively, replacing an API with its category
avoids the trouble introduced by multiple APIs with similar
functionalities. Further, we found that oftentimes, before an
API is invoked, several other APIs ﬁrst need to be called to
prepare the parameters for such an invocation: for example, to
call methods in NSURLConnection, methods in Reachability
ﬁrst need to be triggered to check whether network service is