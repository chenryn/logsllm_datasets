exited on timeout or packet loss, and cwnd set to 10, allowing
a burst of ten packets to be sent initially.1
Congestion Avoidance. In this state TCP is sending close
to its estimate of the available bandwidth while also slowly
probing for additional bandwidth. Every RTT cwnd is in-
creased by one MSS sized packet. In practice, this is done
by increasing cwnd by a small amount((M SS ∗ cwnd)/M SS)
for every new ACK received. TCP exits congestion avoidance
either on an RTO Timeout or after receiving three duplicate
acknowledgments, indicating a lost packet.
Fast Recovery. In this state, TCP is recovering from a
lost packet indicated by three duplicate acknowledgements.
TCP assumes that packet loss signals network congestion, so
it cuts its sending rate in half by halving cwnd, and retransmits
the last unacknowledged packet. ssthresh is set to this new
value of cwnd, providing an approximate bandwidth estimate
in case of a timeout. TCP remains in fast recovery until all
data outstanding at the time it entered fast recovery has been
acknowledged or an RTO timeout occurs. This is achieved by
saving the last packet sent in high_water upon entry and
exiting once this packet has been acknowledged.
Exponential Backoff. In this state, TCP is retransmitting a
lost packet each time the RTO timer expires. With each timer
expiration, rto_timeout is doubled, resulting in an exponen-
tial backoff between retransmissions. This state is entered from
any other state when the RTO timer expires, indicating that
data is outstanding in the network but no acknowledgements
have been received in rto_timeout seconds (at least 2 RTTs).
This situation indicates the loss of a large number of packets
and, likely, signiﬁcant changes in network conditions. As a
result, ssthresh is set to half of cwnd, cwnd is set to 1
MSS, and the last unacknowledged packet is retransmitted.
TCP remains in this state, retransmitting this packet each time
the RTO timer expires, until an acknowledgement is received,
at which point it transitions to slow start.
1This initial window was originally 2-4 packets [4], but has been increased
to 10 packets in more recent standards [15] and implementations.
B. Variations and Optimizations
The classic TCP New Reno congestion control algo-
rithm we described above has seen a number of vari-
ations and optimizations over
the years. These include
SACK [8], DSACK [7], TLP [17], PRR [28], CUBIC [34],
and RACK [13]. These variations and optimizations consist
of fairly minor changes to the basic New Reno algorithm.
SACK [8], for example, provides the sender with additional
information about received packets and uses this information to
determine when to enter fast recovery. The logic of the decision
does not change: fast recovery is entered when three packets
above a loss have been received. SACK simply uses a more
accurate method to detect this condition. Similarly, PRR [28]
modiﬁes New Reno by adopting paced packet sending during
the self-loop in fast recovery. TLP [17] introduces a new, faster
timeout state before exponential backoff. CUBIC TCP [34]
changes precisely how cwnd is increased in congestion avoid-
ance and decreased during fast recovery.
While these changes affect the performance of TCP in
certain network conditions, they follow the same phases of
TCP congestion control. In this work, our attack generation
models all TCP congestion control as classic TCP New Reno
due to difﬁculty inferring more detailed congestion control
state from network trafﬁc alone (see Section IV-D). Never-
theless, we successfully tested modern Windows and Linux
TCP stacks with many of these variations and optimizations,
and we successfully identiﬁed attacks against them.
III. ATTACK MODEL
In this section we discuss the attacker capabilities and
congestion control attacks that we consider in this work.
A. Attacker and Attack Goals
A typical attacker might be a botnet trying to enhance
the power of a DDoS attack by using increased throughput
attacks to render TCP ﬂows insensitive to congestion. This
gives the attacker the power of a UDP ﬂood with the ubiquity
of TCP trafﬁc; perfect for the coremelt attack [41]. Alternately,
a nation-state actor could launch decreasing throughput attacks
to discourage or prevent use of certain undesirable services.
Decreasing Throughput. In this case, the attacker manip-
ulates the congestion control algorithm of a target connection
such that
it falsely detects congestion, resulting in a rate
reduction. This rate reduction can have signiﬁcant impact at
the application level, especially for inelastic data streams like
streaming video.
Example. Consider the Blind Throughput Reduction At-
tack [12]. In this attack, the attacker sends spoofed invalid
acknowledgements to the target connection’s receiver, which
cause the receiver to send duplicate acknowledgements to the
sender. These duplicate acknowledgements, when received in
the congestion avoidance or slow start states, mislead the
sender about the existence of lost packets and the level of
congestion in the network, causing the sender to transition to
the fast recovery state and slow down (see Fig. 3). The sender
will continue to slow down as long as the attacker emits its
spoofed acknowledgements.
4
Increasing Throughput. In this case, the attacker manip-
ulates the congestion control algorithm such that it perceives
signiﬁcant available bandwidth along with low latency and
loss. As a result, the sender rapidly increases its sending rate
beyond what is fair to competing connections. Any actual
congestion in the network will not be observed, which may
be used to damage or deny service to target links or to other
connections sharing the same links.
Example. Consider the Optimstic Ack Attack [37]. In this
attack, the receiver repeatedly sends acknowledgements for
data that has not actually been received yet
in order to
dramatically increase its sending rate and render the sender
insensitive to actual congestion in the network. Acknowledging
data not yet received in the congestion avoidance, slow start,
or fast recovery states misleads the sender about the data that
has been received and the RTT of the connection. As a result,
the sender does not react to actual congestion in the network
and is unfair to any competing connections.
Target Flows. Any TCP ﬂow that sends more than an
initial window (10 packets, about 15KB) of data is vulnerable
to these attacks. In this work, we focus on bulk data transfers
because they result in the widest array of attacks, are easiest
to automate, and easiest to explain; however, these attacks are
not restricted to such ﬂows. Short transfers, like web pages,
are also vulnerable to attacks on congestion control, and ﬂows
with a limited bitrate, like streaming video, are vulnerable to
decreasing throughput attacks. Interactive ﬂows are vulnerable
if their sending rate is limited by congestion control and not
by the availability of data from the application.
B. Attack, Strategy, Action
Congestion control constrains the sender’s data-transfer
rate, primarily through acknowledgements. Thus, we consider
attacks conducted through acknowledgement packets.
Congestion control manipulation attacks. These are attacks
conducted by manipulation of TCP acknowledgements in order
to mislead congestion control about current network conditions
and cause it to set an incorrect sending rate. They can result in
either increasing or decreasing the throughput, and sometimes
in connection stall. In order to achieve the high-level goals of
manipulating congestion control, an attacker applies an attack
strategy.
Attack strategy. Given a TCP stream, where a sender sends
data to a receiver, we deﬁne a concrete attack strategy as a
sequence of acknowledgment-based malicious actions and the
corresponding sender states (as described in Fig. 1) when each
action is performed.
Malicious actions. A malicious action itself requires an
attacker to (1) craft acknowledgements by leveraging protocol
semantics to mislead congestion control, (2) infer the state at
the sender, and (3) inject the malicious acknowledgment on
the path and in the target stream. For example, a malicious
action can be to craft an acknowledgment that acknowledges
data not yet received and inject it when the sender is assumed
to be in congestion avoidance.
Crafting malicious acknowledgements. TCP does not use
any cryptographic mechanisms to ensure authentication and
integrity of packets; thus, an attacker can fabricate packets
or modify intercepted ones with malicious payload. In order
to intercept, the attacker will need to be on the path and
be able to sniff the target stream. Moreover, these crafted
acknowledgement are semantic-aware, that is, the attacker is
aware of the meaning of the bytes acknowledged. For example,
in the example above, an attacker will need to know the highest
byte of data that was acknowledged in order to acknowledge
data that has not been received yet.
Inferring the state machine at the sender. We assume that
the attacker can observe the network trafﬁc, but it does not
have access to the source code and thus cannot instrument it.
Injecting malicious acknowledgments. This requires an
attacker to spoof packets and have knowledge of the TCP se-
quence number, the only protection TCP has against injection.
We do not consider blind attackers in this work, since, while
they can inject spoofed packets into the network, they have no
knowledge of sequence numbers or data being acknowledged
and thus are restricted to guessing this information. We dis-
tinguish between off-path and on-path attackers. An off-path
attacker can observe packets in the target connection or link
and inject spoofed packets. For example he can sniff trafﬁc
on the client’s local network — e.g., coffee house Wi-Fi. An
on-path attacker can intercept, modify, and control delivery of
legitimate packets in some target connection or link, as well
as inject new spoofed packets. For example, such an attacker
can be a switch on the path between client and server.
IV. TCPWN DESIGN
In this section we describe the design of TCPWN, our
automated platform for ﬁnding attacks on congestion control.
We ﬁrst provide a high-level overview, then discuss our model-
guided attack strategy generation and congestion control pro-
tocol state tracking.
A. Overview
We motivate our approach with the Optimistic Ack [37]
attack. Consider its interactions with the congestion control
state machine as shown in Fig. 3. In order to be successful, the
attacker must inject packets with an acknowledgement number
above the real cumulative acknowledgment number and below
the highest sequence number that the sender has sent, and it
has to do this in either the congestion avoidance, slow start,
or fast recovery states. Each time the sender receives one of
these new acknowledgements in those states, it causes a self-
loop transition (in blue in Fig. 3), increasing the congestion
window cwnd, which directly controls the sending rate.
Finding all these transitions (i.e. that impact the sending
rate at runtime) is challenging because of the large search
space. We address this challenge by using a model-based attack
strategy generation that ﬁnds all possible attack strategies
in a model of the congestion control (i.e. shown in Figure
1). We refer to these as abstract strategies. To test them in
real implementations, we translate them to concrete attack
strategies, obtained by mapping the abstract strategies to attack
actions corresponding to attacker capabilities and consisting of
speciﬁc content for a malicious packet and the state in which
it will be injected. An attack injector takes these concrete
packet-based attack strategies and injects them in our testing
5
Fig. 2. Design of TCPWN
(see Fig. 1). An abstract strategy S is a projection on the
condition of each transition along Pand is represented as the
following sequence of (state, condition) pair:
(In: SlowStart, Condition: ACK && Dup && dupACKctr≥3)
(In:
high_water)
(In: CongestionAvoidance, Condition: ACK && New)+
ACK && New && pkt.ack ≥
FastRecovery, Condition:
Fig. 3.
Interactions between New Reno congestion control and the Optimistic
Ack attack. Transitions in blue increase throughput while those in red decrease
throughput.
environment during an actual execution of the target imple-
mentation. Our attack injector requires information about the
current congestion control state of the sender. A state tracker
determines this current protocol state so that actions can be
performed as speciﬁed by the strategy. After the execution of
each attack, our system collects logs that capture performance
metric(s). By comparing the resulting performance with the
expected baseline performance, TCPWN identiﬁes whether the
strategy indeed leads to a successful attack. Fig. 2 shows the
conceptual design of our system, TCPWN.
Testing strategies with real
implementations provides
strong soundness properties since any strategy that TCPwn
identiﬁes as an attack caused noticeable performance changes
in a real TCP connection of the implementation under test.
This prevents most classes of false positives, except tests with
performance outside of the considered normal range (> 2
standard deviations from average). Our completeness is limited
by the accuracy of the congestion control model and state
tracking. Here, we choose to trade off some completeness for
the ability to test many implementations and use a generalized
congestion control model and inferred state tracking.
Example for TCPWN attack generation. We demonstrate
the attack strategy generation approach using the same example
as above, where the attacker’s goal is to increase the sending
rate; this can also be expressed as an increase in the sender’s
cwnd variable. Our abstract strategy generator identiﬁes each
of those paths in the FSM (Fig. 1) containing at least one
transition that
increments the cwnd variable. One of the
identiﬁed paths (say, P) looks as follows:
P: SlowStart → FastRecovery → CongestionAvoidance(cid:8)
where the self-loop in CongestionAvoidance increments cwnd
6
This strategy S dictates that when the sender is in SlowStart
and is sending data to the receiver, the attacker can send 3
duplicate ACKs to the sender so that it moves to FastRecovery.
Next
the attacker can send the sender 1 new ACK (that
acknowledges all the outstanding data). As a result, the sender
moves to CongestionAvoidance, and the attacker can keep
on sending new ACKs that optimistically acknowledge all
outstanding data even if the receiver has not received it yet.
+ (the superscript) signiﬁes that the attacker can apply this
segment of S repeatedly.
TCPWN maps S to several concrete strategies that can be
directly tested inside the testing environment running the given
implementation. TCPWN relies on a map which associates
the abstract network conditions to concrete basic actions.
For S, TCPWN generates 72 Concrete strategies, based on
actions mimicking both off-path and on-path attackers. One
such concrete strategy is:
(In: SlowStart, Action: 3 × Inject Dup-Ack)
(In: FastRecovery, Action: Inject Pre-Ack)
(In: CongestionAvoidance, Action: Inject Pre-Ack)+
This concrete strategy dictates that when the sender is in
SlowStart, the attacker can use the Dup-Ack basic action to in-
ject 3 duplicate ACKs. Similarly, for acknowledging all the out-
standing data in the next step, the attacker can use the Pre-Ack
basic action. Once the sender is in CongestionAvoidance, the
attacker can repeatedly apply Pre-Ack. We will describe all
supported basic actions in §IV-C.
B. Abstract Strategy Generation
We now describe in detail the core of our approach. We
observe that a successful attack will (1) trigger a transition
that causes an increase or decrease in the congestion window
cwnd and (2) traverses a cycle in the congestion control state
machine.
Changes to cwnd. The congestion window, cwnd, adjusts
the sending rate of TCP to avoid congestion collapse and
Abstract Strategy GeneratorVulnerablePathsAttack GoalLogsReports on AttacksAnalysisCongestion ControlModel (FSM)ConcreteStrategy GeneratorBasic attack actions mapAttackInjector〈ρ0,ρ1,...〉Basic ActionSequencesTestingEnvironment...AttackPacketsStateTrackerStateTrafficTrafficprovide fairness. 2 Further, congestion control modiﬁes cwnd
frequently during the course of its normal operation. These
modiﬁcations are done on many transitions of the congestion
control state machine and either increase or decrease cwnd
depending on the transition. As a result, an attacker can
increase or decrease cwnd, and therefore TCP’s sending rate,
merely by inducing TCP to follow speciﬁc normal transitions
in the congestion control state machine.
State Machine Cycles. Successful congestion control at-
tacks traverse a cycle in the congestion control state machine.
This is due to the highly dynamic and cyclical nature of
congestion control where a sender often traverses the same
set of states many times over the course of a connection and
multiple state transitions in a single second are common. As a
result, the impact on cwnd from a single transition is quickly
diminished by other transitions. For an attack to be effective
and achieve measurable, lasting impact, an attacker has to
frequently induce TCP to follow some desirable transition.
Such a series of desirable transitions will form either a cycle or
a unique path in the state machine. Given the relatively small
size (under 10 states) of the congestion control state machine
and the frequency of state transitions, anything but the shortest
connections would require a cycle to achieve a sufﬁciently long
series of desirable transitions.
Note that these characteristics are necessary but not sufﬁ-
cient for an attack on congestion control. For instance a cycle