title:A Lightweight Mechanism for Dependable Communication in Untrusted
Networks
author:Michael Rogers and
Saleem Bhatti
A lightweight mechanism for dependable communication in untrusted networks
Department of Computer Science, UCL, Gower St, London WC1E 6BT, UK
Michael Rogers
PI:EMAIL
Saleem Bhatti
School of Computer Science, University of St Andrews, St Andrews, Fife KY16 9SX, UK
PI:EMAIL
Abstract
We describe a method for enabling dependable forward-
ing of messages in untrusted networks. Nodes perform
only relatively lightweight operations per message, and
only the originator and destination need to trust each other.
Whereas existing protocols for dependable communication
rely on establishing a veriﬁable identity for every node, our
protocol can operate in networks with unknown or varying
membership and with no limits on the creation of new iden-
tities. Our protocol supports the maintenance of unlinkabil-
ity: relays cannot tell whether a given originator and des-
tination are communicating. The destination of each mes-
sage generates an unforgeable acknowledgement (U-ACK)
that allows relays and the originator to verify that the mes-
sage was delivered unmodiﬁed to the destination, but relays
do not need to share keys with the originator or destina-
tion, or to know their identities. Similarly, the endpoints do
not need to know the identities of the relays. U-ACKs can
be seen as a building block for dependable communication
systems; they enable nodes to measure the level of service
provided by their neighbours and optionally to adjust the
level of service they provide in return, creating an incentive
for nodes to forward messages. Our work is ongoing.
1. Introduction
Increasingly, the dependability of a networked commu-
nication system is considered a key issue for the operation
of a larger system as a whole. However, there are a num-
ber of challenges to achieving dependability, including the
possibility of malicious behaviour that aims to disrupt or
subvert communication. For a set of nodes, N , forming a
communication network, we need some way of assessing
whether correct forwarding behaviour is being observed.
Here, our deﬁnition of correct forwarding behaviour is very
simple: forwarding behaviour is deemed to be correct in the
network of nodes, N , if a node, ni ∈ N , the originator, can
send a message to another node, nj ∈ N, i (cid:2)= j, the desti-
nation, by relying on the message forwarding behaviour of
N .
Our scenario is a network of nodes, N , in which we as-
sume that only the originator, ni, and destination, nj, of
each message trust each other, and there is no other trust
relationship within the network. This means that ni and nj
may not be able to see or verify the identities of any other
nodes in the network. Nodes that forward a message but
are not the originator or the destination are termed relays.
In our discussion, we assume that any node may act as an
originator of its own messages as well as a destination or
relay for the messages of other nodes.
We assume that nodes communicate using the general
unit of communication, which we will term a message,
which is any self-contained block of data. Depending on the
application and the layer of operation in the communication
stack, a message could be a packet, a frame, a datagram,
an application data unit (ADU) such as a block in a ﬁle
transfer, etc. Our goal is to enable measurably dependable
forwarding of messages in a network of untrusted nodes.
Correct forwarding behaviour can be achieved with high
conﬁdence if all the nodes trust each other. Trust may be
established, for example, by the use of a certiﬁed or certiﬁ-
able identity for each node. Identities or pseudonyms may
also be derived from other information within the network,
such as network addresses, but these may be transient or
may not be strongly veriﬁable.
In certain circumstances,
where identity is available and veriﬁable to some degree, it
may be possible to detect failed, misbehaving or malicious
nodes [1, 2, 3].
However, in many environments, it may not be practi-
cal to insist on establishing the identity of every member
of N to provide the level of trust required to have conﬁ-
dence of correct forwarding behaviour. For example, the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:01 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007membership of the network may be changing constantly, or
it may not be possible to verify or certify the identity of a
node, n ∈ N . Even if it is possible to verify a node’s iden-
tity, that identity may be subverted without being detected.
In other cases, users may wish to maintain anonymity or
unlinkability, meaning that other network nodes should be
unable to determine whether a given pair of nodes are com-
municating. Additionally, maintaining unlinkability helps
to counter some denial of service attacks (DoS) which may
target nodes based on their identities. Examples of such en-
vironments include ad hoc wireless networks, peer-to-peer
networks and some online communities.
Another issue especially relevant to ad hoc networks and
peer-to-peer systems is resource usage. Many protocols
have recently been proposed to address the problem of users
who consume more resources than they contribute. Encour-
aging these ‘free riders’ to cooperate may have a signiﬁ-
cant impact on the performance and even viability of open
membership networks. Free riding also has security im-
plications, because denial of service (DoS) attacks are of-
ten based on resource exhaustion. Unfortunately, many of
the proposed solutions to the free riding problem require
detailed record-keeping and information-sharing that could
undermine the privacy of users [4, 5, 6]. Other proposals de-
pend on central coordination or identity management, intro-
ducing a single point of failure into otherwise decentralised
systems [7, 8, 9].
If pairs of adjacent nodes can measure the level of ser-
vice they receive from one another and use this informa-
tion to adjust the level of service they provide in return,
then each node has an incentive to cooperate in order to
continue receiving cooperation [10]. This local, recipro-
cal approach does not require central coordination, record-
keeping or information-sharing. Each node must be able to
identify and authenticate its neighbours, but these identities
can be local in scope, and a node is free to present a differ-
ent identity to each neighbour. If the level of service offered
to each neighbour is proportional to the level of service re-
ceived, there is no incentive for a node to present multiple
simultaneous identities to the same neighbour [11].
1.1. Structure of this paper
The next section describes the U-ACK protocol, which
enables nodes in a message-forwarding network to measure
the level of service provided by their neighbours. By mea-
suring dependability at the message level, a single incentive
mechanism can support a wide range of end-to-end services
without relays needing to be aware of the details of higher
protocol layers [12].
Our protocol uses end-to-end (originator to destination)
unforgeable acknowledgements (U-ACKs) that can be ver-
iﬁed by relays without establishing a security association
with either of the endpoints. Unlike a digital signature
scheme, relays do not need to share any keys with the orig-
inator or destination, or to know their identities. U-ACKs
are a general mechanism designed to be used in conjunction
with an application-speciﬁc dependability metric (ASDM)
that is a function of the messages sent and the U-ACKs re-
ceived.
Section 3 demonstrates that U-ACKs cannot be forged as
long as the underlying cryptographic primitives are secure.
Section 4 considers possible applications of the protocol,
and Section 5 discusses issues that would affect engineering
of the protocol. In Section 6 we review related work, and
Section 7 concludes the paper and gives a brief description
of our ongoing work and thoughts for the future.
2. Unforgeable acknowledgements
The unforgeable acknowledgement (U-ACK) protocol
handles two kinds of data: messages, which consist of a
header and a data payload, and acknowledgements. The
originator and destination of each message must share a se-
cret key that is not revealed to any other node, and each mes-
sage sent between the same endpoints must contain a unique
serial number or nonce to prevent replay attacks. This num-
ber need not be visible to intermediate nodes, and indeed the
protocol does not reveal any information that can be used to
determine whether two messages have the same originator
or destination, although such information might be revealed
by trafﬁc analysis or by other protocol layers.
Our protocol does not rely upon or mandate any partic-
ular key management scheme or key exchange mechanism;
any existing scheme appropriate to the application can be
used. We only assume that the originator and destination
have some way of establishing a shared secret key, k.
2.1. Overview
Unforgeable acknowledgements (U-ACKs) make use of
two standard cryptographic primitives: message authentica-
tion codes (MACs) and collision-resistant hashing (or sim-
ply hashing). Any node can generate a correct hash, but
only a node that knows the authentication key can gener-
ate a correct MAC. So, before transmitting a message, the
originator computes a MAC over the message using the se-
cret key, k, shared with the destination. Instead of attaching
the MAC to the message, the originator attaches the hash of
the MAC to the message. Relays store a copy of the hash
when they forward the message.
If the message reaches
its destination, the destination computes a MAC over the
received message using the secret key, k, shared with the
originator. If the hash of this MAC matches the hash re-
ceived with the message, then the destination has validated
the message, and sends the MAC as an acknowledgement,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:01 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007which is forwarded back along the path taken by the mes-
sage. Relays can verify that the acknowledgement hashes
to the same value that was attached to the message sent by
the originator, but they cannot forge acknowledgements for
undelivered messages because they lack the secret key, k, to
compute the correct MAC, and because the hash function is
collision resistant.
2.2. Description of the protocol
More formally,
let H(x) denote the hash of x,
let
M AC(y, z) denote a message authentication code com-
puted over the message z using the key y, and let {a, b}
denote the concatenation of a and b. Let k be the secret
key shared by the originator and destination, and let d be
the data to be sent. The relays between the originator and
destination are denoted r1 . . . rM .
The operation of the protocol proceeds as follows:
1. The originator ﬁrst attaches a unique nonce or serial
number, s, to the data, to produce the payload p1 =
{s, d}.
2. The originator calculates h1 = H(M AC(k, p1)) and
sends {h1, p1} to relay r1.
3. Each relay rm stores an identiﬁer (e.g. the network ad-
dress) of the previous node under the hash hm, and for-
wards {hm+1, pm+1} to the next node, where hm+1 =
hm unless rm modiﬁes the header, and pm+1 = pm
unless rm modiﬁes the payload.
4. On receiving {hM+1, pM+1} from rM , the destination
calculates H(M AC(k, pM+1)) and compares the re-
sult to hM+1. If the result does not match, then either
hM+1 (cid:2)= h1 or pM+1 (cid:2)= p1 – in other words either the
header or the payload has been modiﬁed by one of the
relays – and the destination does not acknowledge the
message.
5. If the message has not been modiﬁed,
the des-
tination returns the acknowledgement aM+1 =
M AC(k, pM+1) to relay rM .
6. Each relay rm calculates H(am+1), and if the result
matches a stored hash, forwards am to the previous
node stored under the hash, where am = am+1 unless
rm modiﬁes the acknowledgement.
7. When a relay receives an acknowledgement whose
hash matches the stored hash of a message it previ-
ously forwarded, it knows that neither the header, the
payload, nor the acknowledgement was modiﬁed by
any node between itself and the destination.
8. When the originator receives an acknowledgement
whose hash matches the stored hash of a message
it previously transmitted, it knows that neither the
header, the payload, nor the acknowledgement was
modiﬁed by any node between itself and the destina-
tion, and that the message was correctly delivered to
the destination, since only the destination could have
generated the acknowledgement.
2.3. Malicious nodes
It is important to note that while messages may carry
source or destination addresses, the U-ACK protocol does
not authenticate these addresses. A U-ACK proves one of
two things. To the originator, it proves that the downstream
neighbour delivered the message to its intended destina-
tion. To a relay, it proves that the downstream neighbour
delivered the message to the destination intended by the up-
stream neighbour – this does not necessarily correspond to
the message’s destination address, if any. The upstream and
downstream neighbours might collude to produce and ac-
knowledge messages with spoofed addresses, so U-ACKs
cannot be used to discover reliable routes to particular ad-
dresses. However, in the context of unlinkable communica-
tion this limitation becomes a strength: messages need not
carry any information to associate them with one another,
or with any particular originator or destination.
There is nothing to stop an attacker from modifying the
header of a message, perhaps replacing it with a hash gener-
ated by the attacker for acknowledgement by a downstream
accomplice. However, the attacker will then be unable to
provide a suitable acknowledgement to its upstream neigh-
bour, and thus from its neighbour’s point of view the at-
tacker will effectively have dropped the message and trans-
mitted one of its own instead, albeit one with an identical
payload. The upstream neighbour will not consider the at-
tacker to have delivered the message as requested, and may
reduce its level of service accordingly (this will depend on
how the application-speciﬁc dependability metric is evalu-
ated and used). Likewise if the attacker modiﬁes the pay-
load instead of the header, the destination will not acknowl-
edge the message and again the attacker will be unable to
provide an acknowledgement to its upstream neighbour.
With regard to dependability, any modiﬁcation to a mes-
sage or acknowledgement is equivalent to dropping the
message, and a node that modiﬁes messages or acknowl-
edgements is equivalent to a free rider.
2.4. Lost messages
Messages may be lost, reordered, or modiﬁed for a num-
ber of reasons, and it may not be possible to determine
whether such events are due to the normal behaviour of the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:01 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007network, or due to the malicious or incorrect behaviour of
relays. For example, in a wireless ad hoc network, loss, re-
ordering, bit errors and even duplication of messages may
be considered normal behaviour for the network.
In contrast to existing approaches that try to identify
the node or link responsible for each failure, we take the
pragmatic approach of measuring dependability without at-
tempting to distinguish between malicious, selﬁsh, and ac-
cidental failures. This makes it possible for our protocol
to operate in networks with a variable failure rate; with an
unknown, changing, or open membership; and where the
quality of service (QoS) of network parameters is dynami-
cally variable.
3. Unforgeability
The strength and scalability of our system comes from
its simplicity. Only originators and destinations can gen-
erate a set of check bits for a message, but any node can
verify those check bits without needing to know the iden-
tity of, or share state with, the originator or destination. The
key to our protocol is the unforgeability of acknowledge-
ments, so in this section we demonstrate that relays cannot
forge acknowledgements as long as the underlying crypto-
graphic primitives are secure. Four speciﬁc properties are
listed below with respect to the behaviour of the underlying