# 【技术分享】Android App常见安全问题演练分析系统-DIVA-Part 2

## 译文声明
本文为翻译文章，原文来源于infosecinstitute.com。具体内容及含义以原文为准。

**翻译者：houjingyi233**
**预估稿费：200 RMB**

**投稿方式**：
- 发送邮件至 linwei#360.cn
- 或通过网页版在线投稿

## 相关链接
- [【技术分享】Android App常见安全问题演练分析系统-DIVA-Part 1](http://bobao.360.cn/learning/detail/3048.html)
- APK下载：
- 源代码下载：

在前一部分中，我们讨论了不安全的日志输出、硬编码问题和不安全的数据存储。本部分将继续探讨Android应用程序中的其他常见安全问题。

### VII. 问题4：输入验证问题

#### 输入验证问题 - 第一部分
在APP中点击“7. INPUT VALIDATION ISSUES – PART 1”。如果你知道用户名，就能获取与之相关的数据。我们的目标是在不知道用户名的情况下获取所有数据。点击后，你将看到以下界面。

由于该页面具有搜索功能，我的第一个假设是应用程序可能会根据用户输入从数据库中进行搜索。是否存在SQL注入漏洞？我们需要测试一下。这次我们将进行黑盒测试而不是直接查看代码。让我们输入一个单引号，看看应用程序的响应。

虽然看起来没有反应，但在logcat中我发现了以下条目：

```
android.database.sqlite.SQLiteException: near "'": syntax error (code 1): , while compiling: SELECT * FROM sqliuser WHERE user = '
```

这表明可能存在SQL注入。程序使用SQL查询从SQLite数据库中获取信息，而我们输入的单引号导致语句中单引号未配对，从而出错。我们再加一个单引号，看看应用程序的反应。

现在看来程序正在搜索输入的数据，没有产生SQL错误。为了进一步确认，我们再加一个单引号，看看是否会引发SQL错误。

logcat中再次出现了以下结果：

```
android.database.sqlite.SQLiteException: near "''": syntax error (code 1): , while compiling: SELECT * FROM sqliuser WHERE user = ''
```

完美！现在确认了SQL注入，奇数个单引号会导致SQL错误，当引号刚好匹配时SQL查询会正常执行。下一步，我们使用一个总是返回true的字符串来获取数据库中的数据。

```
1' or '1' != '2
```

如图所示，通过执行恶意的SQL查询，我们能够获取应用程序数据库中的所有数据。下面是导致问题的`SQLInjectionActivity.class`中的一部分代码：

```java
cr = mDB.rawQuery("SELECT * FROM sqliuser WHERE user = '" + srchtxt.getText().toString() + "'", null);
```

这段代码正是问题的根源，应用程序接收用户输入，未经验证就直接将其加入到SQL查询语句中。

#### 输入验证问题 - 第二部分
在APP中点击“8. INPUT VALIDATION ISSUES – PART 2”。这个活动的功能是显示用户输入的网页。如图所示，当你输入www.baidu.com时，它会使用WebView加载该页面。

我们的目标是利用此功能访问设备上的敏感信息。先来看看其源代码，在`InputValidation2URISchemeActivity.java`中。

程序使用`loadUrl`方法加载用户输入的URL，该方法也可以加载本地文件。我们创建一个`1.txt`文件，并写入内容`123`。

将文件传到SD卡上，使用`file:///`格式读取文件。

成功读取了文件内容。

#### 输入验证问题 - 第三部分
在APP中点击“13. INPUT VALIDATION ISSUES – PART 3”。这个程序要求输入一个密码，我们的目标是在不知道密码的情况下使程序崩溃。

我们一次性输入大量字符串，程序就会崩溃并退出。我输入了一串`a`，现在让我们用`adb logcat`命令查看logcat中是否有对我们有用的信息。

从logcat中可以看出，崩溃显然是因为CPU试图跳转到地址`61616160`（`a`的ASCII值是`0x61`）。我们来看看`InputValidation3Activity.java`中的源代码。

这个校验是在native层做的，来看看`divajni.c`。

缓冲区大小是20，由于`strcpy`函数缺少边界检查导致缓冲区溢出，程序崩溃。理论上，这个漏洞还可以进一步利用。有兴趣深入研究的读者可以参考这篇文章[ARM栈溢出攻击实践：从虚拟环境搭建到ROP利用](http://www.freebuf.com/articles/terminal/107276.html)。

### VIII. 问题5：访问控制问题

#### 访问控制问题 - 第一部分
在APP中点击“9. ACCESS CONTROL ISSUES – PART 1”。你会看到以下界面。

我们可以通过点击上述活动中的“VIEW API CREDENTIALS”按钮来访问API凭据。

我们的目标是在不点击此按钮的情况下访问这些信息。看看`AndroidManifest.xml`文件中与Vendor API Credentials activity相关的信息。

如果你注意到以上信息，你会发现activity是通过intent filter“保护”的。但intent filter不应该被视为一种保护机制。当intent filter与像activity这样的组件一起使用时，组件是暴露在外的。这里的activity可以从外部被其他应用加载，这是非常不安全的。我们可以通过终端中的以下命令来验证：

```
adb shell am start -n jakhar.aseem.diva/.APICredsActivity
```

#### 访问控制问题 - 第二部分
在APP中点击“10. ACCESS CONTROL ISSUES – PART 2”。你会看到以下界面。

如果你是注册用户，就能访问tweeter API的凭据。我们的目标是在不注册的情况下访问它。再次看看`AndroidManifest.xml`文件。

看起来和前面并没有什么区别。我们试试以下命令看看能否成功：

```
adb shell am start -n jakhar.aseem.diva/.APICreds2Activity
```

运行上述命令后，我们会看到以下界面。

看来程序还有一些额外的检查。让我们看看源代码文件`APICreds2Activity.java`。

可以看出，当我们用ADB命令启动intent时需要一个额外的布尔类型参数。下面这一行解析字符串`chk_pin`：

```java
boolean bcheck = i.getBooleanExtra(getString(R.string.chk_pin), true);
```

我们可以在`strings.xml`中查找它实际对应的值。

下一行是检查`check_pin`值是否为`false`。这个条件是用来验证用户是否已经注册的，可以从`AccessControl2Activity.java`的以下代码中看出：

如果用户已注册，`check_pin`会被设置为`false`，否则被设置为`true`。当`check_pin`被设置为`false`时，应用程序不会进行其他检查。因此，让我们尝试将这个额外的参数传递给intent，看看它是否有效。

```
adb shell am start -n jakhar.aseem.diva/.APICreds2Activity -ez check_pin false
```

#### 访问控制问题 - 第三部分
在APP中点击“11. ACCESS CONTROL ISSUES – PART 3”。你会看到以下界面。

我们输入一个新的PIN码。一旦这样做，会出现一个新的按钮，如下所示。

点击这个按钮，它将启动一个新的activity，如下所示。

我们可以通过输入之前设置的PIN来访问私人笔记。

我们的目标是在不输入PIN码的情况下访问这些内容。`AndroidManifest.xml`文件显示程序注册了一个content provider，并且`android:exported`属性为`true`。

Content Providers使用以`content://`开头的URI来表示。我们需要找到访问数据的URI。首先使用apktool反编译apk得到smali代码。

在smali代码目录下搜索包含`content://`字符串的所有文件。

正如我们在`AndroidManifest.xml`文件中看到的那样，content provider被导出，因此我们可以在没有任何明确许可的情况下查询它。

### IX. 问题6：硬编码

在前面的部分中，我们已经研究过一个硬编码问题。在APP中点击“12. HARDCODING ISSUES – PART 2”。你会看到以下界面。

我们的目标是找到vendor key并提交给程序。下面是`Hardcode2Activity.class`中与此activity相关的反编译代码。有许多工具可以直接反编译apk得到Java代码，常用的有jadx、JEB、GDA等。这里我使用的是JEB。

看起来这个activity在加载时创建了`DivaJni`类的一个对象。查看其他文件发现有一个名为`DivaJni.class`的文件。

程序加载了一个名为`divajni`的库，解压apk进入lib目录。对于每种架构，都有一个`libdivajni.so`的实例。随便找一个运行`strings`命令，看看我们是否可以找到有趣的东西。

在Windows系统下运行这个命令可以使用Sysinternals Suite中的`strings.exe`。

```
olsdfgad;lh
```

这个字符串看起来很有趣，我们来试试。

我们找到了这个key。显然，将字符串硬编码在so文件中同样是不安全的。

至此，这个APP中的所有漏洞都已讲解完毕，希望能为大家学习Android应用程序漏洞提供帮助。

## 相关链接
- [【技术分享】Android App常见安全问题演练分析系统-DIVA-Part 1](http://bobao.360.cn/learning/detail/3048.html)