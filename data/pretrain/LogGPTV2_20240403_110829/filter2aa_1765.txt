Filter内存马
分类
filter 内存马是 servlet-api 内存马下的一种，在tomcat高版本中存在实现了动态注册 tomcat
组件的方法，其中就存在 addFilter 方法，用于动态注册 Filter .
Filter 生命周期
如果之前有调试tomcat源码的话可以知道 Filter 是在 tomcat 服务器启动时通过 init 方法启动
的，服务器关闭时通过 destroy 方法销毁。中间通过执行 doFilter 方法进行进行过滤。
public class demoFilter implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        System.out.println("Filter init.....");
    }
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, 
FilterChain chain) throws IOException, ServletException {
        System.out.println("Filter执行了");
        //考虑是否放行
        //放行
        chain.doFilter(request,response);
        System.out.println("filter返回了");
        request.getServletContext().addFilter();
    }
    @Override
    public void destroy() {
        System.out.println("Filter destroy.....");
    }
}
从源码角度来看看 Filter 的生命周期
1. 初始化：filter在服务器的初始化阶段完成。filter注册
org.apache.catalina.core.ApplicationContext
在服务器初始化阶段 ApplicationContext 类中会首先判断状态，之后进行 Filter 的初始化阶段，将
Filter 相关信息填充到 filterDefs ， filterMaps ， filterConfigs 两个参数。此处应该注意的是
context对象表示的是StandarContext对象
2. 首先是 filterDefs 参数填充：
3. 之后是 filterMaps 的填充：
4. 最后是 filterConfigs 的填充：这一步是在执行过滤器的 init 方法之后
5. 之后在 standardContext 类中进行类的初始化。这一步会调用 Filter 的 init 方法
6. Filter 执行：首先是 FilterChain 的创建和添加。 Filter 的创建是在初始化阶段，但是每一次
请求都会重新创建这个 FilterChain ，并且会将 servlet 放入 FilterChain 当中。
7. 在 createFilterChain 中会遍历初始化时填充的 filterMaps ,取出 filter 信息，然后组装
filterChain
8. 销毁：在服务器关闭时销毁。
Filter 内存马思路
按照上面源代码中 Filter 的初始化过程，我们通过获取 StandardContext 属性，然后模拟填充
过程，将三个参数填充完毕即可。然后在下一次请求的过程中就会自动将我们自定义的 filter 组
装到 FilterChain 当中。
源码参考：n1nty-Tomcat源代码调试笔记-看不见的shell这篇文章应该是最开始研究内存马的文章
了。原理就是一直通过反射获取到 StandardContext 属性，然后填充 Filter 的三个属性。
    Insert title here