In spite of the fact that we selected a subset of well-known
tools from the wide diversity of available tools, 25% of the
developers who answered our survey did not know about any
of them. Some developers learned about the tools from our
survey. Only 38.6% actually using any of the tools shows that
their adoption is limited. This can be partially explained by
the relative youth of the tools, as most tools are less than 5
years old. However, we believe that many other factors come
into play: tools may be research prototypes that are difficult
to install, not available or not maintained; they may not be
evaluated on popular cryptographic libraries, raising concerns
about applicability and scalability; they may be computation-
ally intensive, making their use in CI unlikely; they may not
be published in cryptographic engineering venues. In addition
to the specific recommendations from the previous section, we
recommend the community of tool developers to:
1) make their tools publicly available, easy to install, and
well-documented. Ideally, tools should be accompanied
with tutorials targeted to cryptographic developers; mak-
ing a tool easier to install by providing Linux distribution
packages lowers the barrier to adoption.
2) publish detailed evaluations on modern open-source li-
braries, creating or using a common set of benchmarks;
Supercop [79] is one such established benchmark;
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply. 
643
3) focus on efficient analysis of constant-timeness, rather
than computationally expensive analysis of quantitative
properties, which seem to be of lesser interest. Ideally,
tools should be fast enough to be used in CI settings;
4) make their tools work on code with inline assembly and
generated binaries to be fully usable by all developers.
5) promote their work in venues attended by cryptographic
engineers, including CHES, RWC, and HACS.
Ultimately, we recommend tool developers to follow Reid et
al.’s recent advice to “meet developers where they are” [71].
B. Compiler writers
Developers are very concerned that compilers may turn
constant-time code into non-constant-time code. To avoid this
issue, developers often use (inlined) assembly for writing
primitives. This approach guarantees that the compiler will not
introduce constant-time violations but may negatively affect
portability and makes analysis more complex. In order to make
integration of constant-time analysis smoother in the developer
workflow, we recommend compiler writers to:
1) improve mechanisms to carry additional data along the
compilation pipeline that may be needed by constant-time
verification tools. This would allow cryptographic library
developers to tag secrets in source code and use constant-
time analysis tools at intermediate or binary levels;
2) support secret types, as used by most constant-time analy-
ses, throughout compilation, and modify compiler passes
so that they do not introduce constant-time violations,
and prove preservation of the constant-time property for
their compilers. This would allow cryptographic library
developers to focus on just their source code;
3) more generally, offer security developers more control
over the compiler, so that code snippets that implement a
countermeasure (e.g. replacing branching statements on
booleans by conditional moves) are compiled securely.
C. Cryptographic library developers
Cryptographic library developers are aware of timing attacks
and most consider them part of their threat model. In order to
eliminate timing attacks, we recommend library developers:
1) make use of tools that check for information flow from
secrets into branch conditions, memory addresses, or
variable-time arithmetic. Ideally the use of such tools is
integrated into regular continuous-integration testing; if
this is too costly, a systematic application of such tools for
every release of the library may be a suitable alternative;
2) eliminate all timing leaks even if it is not immediately
obvious how to exploit them. Attacks only get better
and many examples of devastating timing attacks in the
past exploited known leakages with just slightly more
sophisticated attacks techniques;
3) state clearly which API functions inputs are considered
public or secret. With a suitable type system, such infor-
mation becomes part of the input types, but as long as
mainstream programming languages do not support such
a distinction in the type system, this information needs to
be consistently documented. Doing so makes it easier to
use tools for automated analysis and harder for program-
mers to misuse library functions due to misunderstandings
about which inputs are actually protected.
D. Standardization bodies
A recent paper [8] advocates for the importance of adopting
tools in cryptographic competitions, standardization processes,
and certifications. We recommend that submitters are strongly
encouraged to use automated tools for analyzing constant-
timeness, and that evaluators gradually increase their require-
ments as constant-time analysis technology matures. Standard-
ization bodies should try to avoid the use of cryptographic al-
gorithms leaking timing information. In the case of Dragonfly
Password Authenticated Scheme used in WPA3 by the Wi-
Fi Alliance, many timing attacks have been discovered [80],
[81] as the algorithm leaks timing information. However, many
deterministic algorithms with no leaks are known [82].
VI. CONCLUSION
We have collected data from 44 developers of 27 cryp-
tographic libraries, and analyzed the data to gain a better
understanding of the gap between the theory and practice of
constant-time programming. One main finding of our survey
is that developers are extremely aware of and generally con-
cerned by timing attacks, but currently seldom use analysis
tools to ensure that their code is constant-time. While constant-
time testing may not be the most important thing on crypto-
graphic developers’ to-do list, it should become best practice.
We think that this is only feasible by making tools more
usable, supporting developers’ current workflows, requiring
little work overhead, and giving easy-to-understand outputs.
Based on our survey, we have identified recommendations
for tool developers, compiler writers, cryptographic library
developers, and standardization bodies. We hope that these
different communities will take up our recommendations and
collectively contribute to the emergence of a new generation of
open-source cryptographic libraries with strong mathematical
guarantees. Although our recommendations are stated for
timing attacks, we believe that many of our recommendations
remain valid in the broader setting of high-assurance cryptog-
raphy. In particular, all our findings are directly applicable to
the many ongoing efforts to protect against micro-architectural
side channels, as summarized in [60]. Another interesting topic
would be a quantitative analysis of the usability of some of
the better known tools collected in this study to gain insight
into the exact magnitude of the mentioned usability problems.
ACKNOWLEDGEMENTS
This work has been supported by the European Commission
through the ERC Starting Grant 805031 (EPOQUE). J. Jancar
was supported by Czech Science Foundation project GA20-
03426S as well as by Red Hat Czech. Daniel De Almeida
Braga is funded by the Direction Générale de l’Armement
(Pôle de Recherche CYBER).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:33 UTC from IEEE Xplore.  Restrictions apply. 
644
REFERENCES
[1] P. C. Kocher, “Timing attacks on implementations of Diffie-Hellman,
in Cryptology –
RSA, DSS, and other
CRYPTO’96, ser. LNCS, N. Koblitz, Ed., vol. 1109. Springer, 1996,
pp. 104–113. [Online]. Available: http://www.cryptography.com/public/
pdf/TimingAttacks.pdf
systems,” in Advances
[2] D. Brumley
in
and D. Boneh,
SSYM’03: Proceedings
are
conference
practical,”
on USENIX Security Symposium - Volume 12.
ACM, 2003.
[Online]. Available: https://www.usenix.org/legacy/publications/library/
proceedings/sec03/tech/brumley/brumley.pdf
“Remote
of
timing
the
attacks
12th
[3] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-vm side
channels and their use to extract private keys,” in the ACM Conference
on Computer and Communications Security, CCS’12, T. Yu, G. Danezis,
and V. D. Gligor, Eds. ACM, 2012, pp. 305–316. [Online]. Available:
https://doi.org/10.1145/2382196.2382230
[4] NIST,
“Submission
the
requirements
and
for
process,”
CSRC/media/Projects/Post-Quantum-Cryptography/documents/
call-for-proposals-final-dec-2016.pdf
post-quantum
[Online].
cryptography
Available:
2016.
evaluation
criteria
standardization
https://csrc.nist.gov/
[5] M. Azouaoui, D. Bellizia, I. Buhan, N. Debande, S. Duval, C. Giraud,
É. Jaulmes, F. Koeune, E. Oswald, F. Standaert, and C. Whitnall, “A
systematic appraisal of side channel evaluation strategies,” in Security
Standardisation Research - 6th International Conference, SSR 2020,
London, UK, November 30 - December 1, 2020, Proceedings, ser.
Lecture Notes in Computer Science, T. van der Merwe, C. J. Mitchell,
and M. Mehrnezhad, Eds., vol. 12529.
Springer, 2020, pp. 46–66.
[Online]. Available: https://doi.org/10.1007/978-3-030-64357-7_3
[6] A. Langley. (2010) ctgrind. [Online]. Available: https://github.com/agl/
ctgrind
[7] J.
Jancar.
(2021) The state of
timeness of
https://neuromancer.sk/article/26
cryptographic
tooling for verifying constant-
[Online]. Available:
implementations.
[8] M. Barbosa, G. Barthe, K. Bhargavan, B. Blanchet, C. Cremers,
K. Liao, and B. Parno, “SoK: Computer-aided cryptography,” IACR
Cryptol. ePrint Arch., vol. 2019, p. 1393, 2019. [Online]. Available:
https://eprint.iacr.org/2019/1393
[9] P. Kocher, J. Horn, A. Fogh,
, D. Genkin, D. Gruss, W. Haas,
M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and
Y. Yarom, “Spectre attacks: Exploiting speculative execution,” in 40th
IEEE Symposium on Security and Privacy (S&P’19), 2019.
[10] Y. Tsunoo, E. Tsujihara, K. Minematsu, and H. Miyauchi, “Crypt-
analysis of block ciphers implemented on computers with cache,” in
Proceedings of the International Symposium on Information Theory and
Its Applications, ISITA 2002, 2002, pp. 803–806.
[11] Y. Tsunoo, T. Saito, T. Suzaki, M. Shigeri, and H. Miyauchi, “Cryptanal-
ysis of DES implemented on computers with cache,” in Cryptographic
Hardware and Embedded Systems – CHES 2003, ser. LNCS, vol. 2779.
Springer, 2003, pp. 62–76.
[12] D. J. Bernstein, “Cache-timing attacks on AES,” 2005, http://cr.yp.to/
antiforgery/cachetiming-20050414.pdf.
[13] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and counter-
measures: the case of AES,” in Topics in Cryptology – CT-RSA 2006,
ser. LNCS, vol. 3860. Springer, 2006, pp. 1–20.
[14] B. Canvel, A. P. Hiltgen, S. Vaudenay, and M. Vuagnoux, “Password
interception in a SSL/TLS channel,” in Advances in Cryptology -
CRYPTO 2003, 23rd Annual International Cryptology Conference,
ser. NCS, D. Boneh, Ed., vol. 2729.
Springer, 2003, pp. 583–599.
[Online]. Available: https://doi.org/10.1007/978-3-540-45146-4_34
[15] B. B. Brumley and N. Tuveri, “Remote timing attacks are still prac-
tical,” in Computer Security—ESORICS 2011, ser. LNCS, V. Atluri
and C. Diaz, Eds., vol. 6879.
Springer, 2011, pp. 355–371, http:
//eprint.iacr.org/2011/232/.
[16] N. J. A. Fardan and K. G. Paterson, “Lucky thirteen: Breaking the TLS
and DTLS record protocols,” in 2013 IEEE Symposium on Security
and Privacy (SP).
IEEE, 2013, pp. 526–540, http://ieeexplore.ieee.
org/stamp/stamp.jsp?arnumber=6547131.
[17] M. R. Albrecht and K. G. Paterson, “Lucky microseconds: A timing
attack on Amazon’s s2n implementation of TLS,” in Advances in
Cryptology – EUROCRYPT 2016, ser. LNCS, M. Fischlin and J.-S.
Coron, Eds., vol. 9665.
[Online].
Available: https://eprint.iacr.org/2015/1129
Springer, 2016, pp. 622–643.
[18] E. Brickell, “Technologies to improve platform security,” Invited talk at
CHES 2011, 2011. [Online]. Available: https://www.iacr.org/workshops/
ches/ches2011/presentations/Invited%201/CHES2011_Invited_1.pdf
[19] Y. Yarom, D. Genkin, and N. Heninger, “Cachebleed: a timing attack on
openssl constant-time RSA,” J. Cryptogr. Eng., vol. 7, no. 2, pp. 99–112,
2017. [Online]. Available: https://doi.org/10.1007/s13389-017-0152-y
[20] T. Kaufmann, H. Pelletier, S. Vaudenay,
and K. Villegas,
“When constant-time source yields variable-time binary: Exploiting
curve25519-donna built with MSVC 2015,” in Cryptology and
Network Security, ser. LNCS, S. Foresti and G. Persiano, Eds.,
vol. 10052.
[Online]. Available:
https://infoscience.epfl.ch/record/223794/files/32_1.pdf
Springer, 2016, pp. 573–582.
[21] J. Jancar, V. Sedlacek, P. Svenda, and M. Sýs, “Minerva: The curse of
ECDSA nonces; systematic analysis of lattice attacks on noisy leakage
of bit-length of ECDSA nonces,” IACR Trans. Cryptogr. Hardw.
Embed. Syst., vol. 2020, no. 4, pp. 281–308, 2020. [Online]. Available:
https://doi.org/10.13154/tches.v2020.i4.281-308
[22] L. G. Bruinderink, A. Hülsing, T. Lange, and Y. Yarom, “Flush, Gauss,
and Reload – a cache attack on the BLISS lattice-based signature
scheme,” in Cryptographic Hardware and Embedded Systems – CHES
2016, ser. LNCS, B. Gierlichs and A. Poschmann, Eds., vol. 9813.
Springer, 2016, pp. 323–345, https://eprint.iacr.org/2016/300/.
[23] P. Pessl, L. G. Bruinderink, and Y. Yarom, “To BLISS-B or not to be
– attacking strongSwan’s implementation of post-quantum signatures,”
in Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, CCS’17. ACM, 2017, https://eprint.iacr.org/
2017/490/.
[24] G. Barthe, S. Belaïd, T. Espitau, P. Fouque, M. Rossi, and
M. Tibouchi, “GALACTICS: gaussian sampling for
lattice-based
constant- time implementation of cryptographic signatures, revisited,”
in Proceedings of the 2019 ACM SIGSAC Conference on Computer and
Communications Security, CCS 2019. ACM, 2019, pp. 2147–2164.
[Online]. Available: https://doi.org/10.1145/3319535.3363223
[25] T. B. Paiva and R. Terada, “A timing attack on the HQC encryption
scheme,” in Selected Areas in Cryptography – SAC 2019, ser. LNCS,
K. G. Paterson and D. Stebila, Eds., vol. 11959. Springer, 2019, pp.
551–573.
[Online]. Available: https://www.ime.usp.br/~tpaiva/papers/
PaivaTerada_SAC2019_a_timing_attack_against_hqc.pdf
[26] G. Wafo-Tapa, S. Bettaieb, L. Bidoux, P. Gaborit, and E. Marcatel,
“A practicable timing attack against HQC and its countermeasure,”
Advances in Mathematics of Computation, 2020. [Online]. Available:
http://dx.doi.org/10.3934/amc.2020126
[27] Q. Guo, T. Johansson, and A. Nilsson, “A key-recovery timing attack
on post-quantum primitives using the fujisaki-okamoto transformation
and its application on FrodoKEM,” in Advances
in Cryptology
– CRYPTO 2020, ser. LNCS, D. Micciancio and T. Ristenpart,
Eds., vol. 12171. Springer, 2020, pp. 359–386. [Online]. Available:
https://eprint.iacr.org/2020/743
[28] D. Mayer and J. Sandin, “Time Trial: Racing Towards Practical
Remote Timing Attacks,” NCC Group, Tech. Rep., 2014, available
at https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/
TimeTrial.pdf.
[29] O. Reparaz, J. Balasch, and I. Verbauwhede, “Dude,
is my code
constant time?” in Design, Automation & Test in Europe Conference
& Exhibition, DATE 2017, Lausanne, Switzerland, March 27-31, 2017,
D. Atienza and G. D. Natale, Eds.
IEEE, 2017, pp. 1697–1702.
[Online]. Available: https://doi.org/10.23919/DATE.2017.7927267
[30] L. Daniel, S. Bardin, and T. Rezk, “Binsec/rel: Efficient relational
symbolic execution for constant-time at binary-level,” in 2020 IEEE
Symposium on Security and Privacy, SP 2020, San Francisco, CA, USA,
May 18-21, 2020.
IEEE, 2020, pp. 1021–1038. [Online]. Available:
https://doi.org/10.1109/SP40000.2020.00074
[31] S. Blazy, D. Pichardie, and A. Trieu, “Verifying constant-time
interpretation,” in Computer Security -
implementations by abstract
ESORICS 2017 - 22nd European Symposium on Research in Computer
Security, Oslo, Norway, September 11-15, 2017, Proceedings, Part
I,
ser. LNCS, S. N. Foley, D. Gollmann, and E. Snekkenes,
Eds., vol. 10492. Springer, 2017, pp. 260–277. [Online]. Available:
https://doi.org/10.1007/978-3-319-66402-6_16
[32] S. Wang,
P. Wang, X. Liu, D. Zhang,
Identifying cache-based timing channels
and D. Wu,
in production
“Cached:
Symposium, USENIX