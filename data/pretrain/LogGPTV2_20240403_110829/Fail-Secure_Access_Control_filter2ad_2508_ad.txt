PDP for the grid scenario (see Figure 4) is as follows.
Speciﬁcation 3 (S3):
pol(X) ← owner(X)
pol(X) ← pol(Y ) ∧ X:grant(Y )
X:grant(Y ) ← X:delegate(Y )∧
((¬X:revoke(Y )@rev) (cid:73) owner(X))
The PDP stores a credential owner(X) for each domain
owner X. We represent a delegation from the subject X
to the subject Y with the credential X :delegate(Y ). The
credential X :revoke(Y ) represents that the subject X has
revoked Y , and the remote query X:revoke(Y )@rev checks
whether the revocation server stores such revocations.
The top two BelLog rules encode the Datalog policy in
Figure 4. The last BelLog rule encodes the check for re-
voked credentials. Note that the for-loop is implicitly en-
coded, since this BelLog rule is evaluated for all principals
and subjects. The rule establishes that X grants Y if X del-
egates to Y and has not revoked this delegation. The failure
handler is invoked for each delegation separately whenever
the revocation check cannot be made. This follows the inner-
loop logic of Figure 4.
To summarize, these examples demonstrate the use of Bel-
Log and its modeling capabilities. We believe that the failure-
handling idioms considered in this paper, as well as other
common authorization idioms, map naturally to BelLog con-
structs. This makes BelLog a suitable language for spec-
ifying PDPs. Of course, there are limitations to BelLog’s
modeling power. Not all procedural constructs map natu-
rally to BelLog’s declarative speciﬁcations, for example see
the list iterator of the web app example. A further investi-
gation of BelLog’s expressiveness is orthogonal to our results
and outside the scope of this paper.
5. ANALYZING ACCESS CONTROL WITH
FAILURE HANDLING
The goal of our analysis is to check a PDP’s access deci-
sions in the presence of failures. In the following, we ﬁrst
show how one can simulate a PDP using entailment ques-
tions in BelLog. As an example, we use simulation to dis-
cover the previously described security ﬂaw in XACML 3.
Second, we show how given a BelLog PDP speciﬁcation P ,
and a fail-security requirement r, one can formulate the
problem of checking whether P meets r as a containment
problem in BelLog. We use this to determine whether P con-
forms to r for all possible PDP inputs in our attacker model.
As examples, we check whether the PDPs given in §2 meet
their requirements, and we use the analysis framework to
reveal ﬂaws that violate the fail-security requirements FR1
and FR2.
5.1 BelLog Analysis
Entailment. An entailment question asks whether a Bel-
Log program P derives an atom a for a given input I, namely
whether P ‘I a. Entailment is in ptime [32].
Containment. The syntax and semantics of BelLog con-
tainment are given in Figure 8. Informally, given two BelLog
programs P1 and P2 that specify PDPs, the containment
question c ⇒ P1 (cid:22) P2 is answered positively if P1 is not
more permissive than P2 for all PDP inputs that satisfy the
condition c. Note that a PDP has inﬁnitely many possible
inputs.
In the following, we write (cid:13) c ⇒ P1 = P2 for (cid:13) c ⇒
P1 (cid:22) P2 and (cid:13) c ⇒ P2 (cid:22) P1. To ease writing containment
conditions, we provide syntactic shorthands in Figure 9. We
also omit writing the condition t in containment questions.
Domain containment (see Figure 8c) is decidable because
there are ﬁnitely many inputs for a given domain. In fact,
it is co-np-complete [32]. In contrast, containment is in
general undecidable. Nevertheless, the containment prob-
(containment question) q ::= c ⇒ P1 (cid:22) P2
c ::= t | a = v | ∀X. c | ¬c | c ∧ c
(condition)
(truth value) v ∈ D
(variable) X ∈ V
(a) Syntax. Here a is an input atom, and P1 and P2 are BelLog
PDP speciﬁcations.
I (cid:13)Σ t
I (cid:13)Σ a = v
if I(a) = v
I (cid:13)Σ ∀X. c(X) if ∀X ∈ Σ. I (cid:13)Σ c(X)
if I 6(cid:13)Σ c
I (cid:13)Σ ¬c
I (cid:13)Σ c1 ∧ c2
if I (cid:13)Σ c1 and I (cid:13)Σ c2
(b) Satisfaction relation between an interpretation I and a con-
tainment condition c for a given domain Σ.
(domain containment)
(cid:13)Σ c ⇒ P1 (cid:22) P2 iﬀ ∀I ∈ I. ∀X ∈ Σ.
(I (cid:13)Σ c) → [[P1]]I(req) (cid:22) [[P2]]I(req)
(containment)
(cid:13) c ⇒ P1 (cid:22) P2 iﬀ ∀Σ ⊂ C. (cid:13)Σ c ⇒ P1 (cid:22) P2
(c) Semantics. The symbol req is the atom, and X is the list of
free variables in a condition c.
Figure 8. Syntax and semantics of BelLog containment.
lem is in co-nexp for BelLog programs whose inputs consist
of only unary predicate symbols [32]. Intuitively, the Bel-
Log programs that fall into this fragment can model PDPs
where (1) all credentials provided as input to the PDP are
associated to a single user, a single group, and a single re-
source; and (2) there are ﬁnitely many subjects who issue
credentials.
Implementation. We have implemented a BelLog inter-
preter for deciding entailment and an analysis tool for de-
ciding domain containment; both tools can be downloaded
at www.infsec.ethz.ch/research/software/bellog. The
BelLog interpreter translates BelLog entailment problems
into stratiﬁed Datalog entailment problems. The domain
containment tool translates domain policy containment prob-
lems into propositional validity problems.
5.2 Simulating PDPs
Given a PDP input and a request, one can use the PDP’s
speciﬁcation to simulate the PDP and check whether it grants
or denies the request also in the presence of failures. A PDP
can be simulated by posing entailment questions to its Bel-
Log speciﬁcation S as follows. First, the PDP input is en-
coded as a BelLog input I, and the request is encoded as
a BelLog atom r, as described in §4.3. Second, to check
whether the PDP grants or denies r, we pose the entailment
question S ‘I r
To illustrate, we simulate the XACML 3 PDP and de-
scribe how one can ﬁnd the attack described in §2. The
PDP’s speciﬁcation is S1, given in §4.3, and we consider
the following scenario. There are two policies, one issued
by Ann and one by Bob. Ann is the PDP’s administrator.
Let req be a request such that Ann’s policy grants req, while
Bob’s policy denies req. Imagine that Bob’s policy is autho-
rized to give decisions for req. The PDP must therefore
deny req because Ann and Bob’s policies are composed us-
a 6= v := ¬(a = v)
c1 ∨ c2 := ¬(¬c1 ∧ ¬c2)
a1 = a2 := (a1 = f ∧ a2 = f) ∨ (a1 = ⊥ ∧ a2 = ⊥)
∨ (a1 = > ∧ a2 = >) ∨ (a1 = t ∧ a2 = t)
Figure 9. Shorthands for writing containment conditions.
The symbols a, a1, and a2 denote BelLog atoms; c1 and c2
denote containment conditions.
ing the deny-overrides operator. The following BelLog input
models this scenario.
I = { admin(ann) ← t, pol(ann, req)@eval ← t
pol(bob, req)@eval ← f, auth(bob, req)@check ← t }.
Here the input I describes a no-failure scenario where the
PDP successfully evaluates both policies and successfully
checks that Bob’s policy is authorized.
To simulate how the PDP behaves in the presence of fail-
ures, we may check the PDP’s decision for the input
Ifail = {admin(ann) ← t, pol(ann, req)@eval ← t
pol(bob, req)@eval ← f, auth(bob, req)@check ← ⊥}.
The only diﬀerence here is that the PDP fails to check
whether Bob’s policy is authorized for req. We observe that
for this scenario we have S1 ‘Ifail pol_set(req), i.e. the PDP
grants req because the PDP’s failure handler drops Bob’s
policy decision. As the XACML committee discovered, this
behavior is undesirable because an adversary may gain ac-
cess by forcing the PDP to drop authorized policy decisions.
Preliminary experiments show that our simulation method
scales reasonably well. Simulating the XACML 3 PDP sce-
nario with 10, 100, and 1000 policies respectively takes 0.21,
0.41, and 1.81 seconds on a machine with a quad-core i7-4770
CPU and 32GB of RAM.
Note that our simulation method is similar to fault injec-
tion in software testing [31, 34]: The system’s behavior is
tested in various failure scenarios. The diﬀerence is that we
do not directly execute the PDP’s code and instead work
with its speciﬁcation.
5.3 Verifying Fail-security Requirements
To verify that a PDP speciﬁcation S meets a require-
ment r, we formulate a number of containment problems.
Each containment problem is deﬁned using two BelLog spec-
iﬁcations, where one of them is the PDP speciﬁcation S and
the other one constrains the PDP’s permissiveness, as pre-
scribed by the requirement r. In the following, we formulate
and verify whether the web app and grid PDPs from §2 meet
their fail-security requirements. We also give an example of
a generic fail-security requirement and show that it can be
veriﬁed similarly.
Authorizations in Web Applications. Consider the
PDP speciﬁcation S2 and the fail-security requirement FR1,
which states that when the PDP cannot compute an access
decision due to malformed or missing speciﬁcations, then it
uses the default speciﬁcation if logging is enabled; otherwise,
it denies access.
To determine whether S2 meets FR1, we ﬁrst write a con-
dition that is satisﬁed by the inputs for which the PDP
cannot compute an access decision due to failures. Since
the ACLs are composed with the permit-overrides operator,
the PDP grants a request if any of the ACLs grant the re-
quest, and it denies it if all the ACLs deny it; otherwise, the
PDP cannot compute a decision and it must, as prescribed
by FR1, evaluate the default ACL and check the logging
status. We encode the containment condition as
cerror = ¬(cid:16)(cid:0)isGranted(U, O)@acl1 = t ∨ ···
(cid:0)isGranted(U, O)@acl1 = f ∧ ···
∨ isGranted(U, O)@acln = t(cid:1)∨
∧ isGranted(U, O)@acln = f(cid:1)(cid:17)
.
We then construct the BelLog speciﬁcation Rerror:
Rerror = {pol(U, O) ← (isGranted(U, O)@def ∧ logging} .
The speciﬁcation Rerror evaluates to grant if the PDP’s de-
fault ACL evaluates to grant and logging is enabled; oth-
erwise it evaluates to deny. Finally, to check whether the
speciﬁcation S2 meets FR1, we formulate the containment
problem
cerror ⇒ S = Rerror .
Our analysis tool shows that the speciﬁcation S2 violates
the requirement FR1 for the PDP input
I = { isGranted(ann, ﬁle)@acl1 ← ⊥,
isGranted(ann, ﬁle)@acl2 ← t,
isGranted(ann, ﬁle)@def ← f,} .
S2 violates FR1 because it denies the request pol(ann, ﬁle)
even though ACL 2 grants this request.
To meet FR1, the PDP must correctly implement the
propagate failure-handling idiom and apply the failure han-
dler only if it fails to evaluate an ACL and all remaining
ACLs deny access. We correct the PDP’s speciﬁcation as
follows.
Speciﬁcation 4 (S4):
pol(U, O) ←(cid:0)isGranted(U, O)@acl1 ∨ ···
∨ isGranted(U, O)@acln(cid:1)
(cid:73)(cid:0)isGranted(U, O)@def ∧ logging(cid:1)
Our tool shows that S4 meets FR1 for a PDP with 10
ACLs, for all PDP inputs in a ﬁxed domain of 10 constants.
The veriﬁcation takes 0.03 seconds. Naturally, the veriﬁca-
tion time increases with the number of ACLs and the domain
size. For example, the veriﬁcation time for a PDP with 100
ACLs and inputs ranging over domains of size 10, 100, and
1000 is 0.13, 2.09, and 34.42 seconds, respectively.
We give the pseudo-code for the authorization method
that implements S4 in Figure 10. This method delays han-
dling failures until all ACLs have been evaluated. The PDP
correctly implements the propagate idiom, i.e. it consults the
ACL def only if no input ACL grants the request and the
PDP has failed to evaluate at least one of them (recorded
in the error variable).
Authorizations in Grids. Consider the PDP speciﬁca-
tion S3 and the fail-security requirement FR2, which states
that when the PDP cannot check whether a subject has at
isAuthorized(User u, Object o, List aclIDs)
error = false
for (id in aclIDs)
try
error = true
if error
return false
if (readAcl(id).grants(u,o)) return true
catch (NotFoundException e)
return def.grants(u,o) and logger.on()
Figure 10. A PDP module that meets FR1.
least one non-revoked delegation chain due to failures, the
PDP grants access if the subject is a direct delegate of the
owner; otherwise it denies access.
To verify that the speciﬁcation meets the requirement,
we formulate two containment problems. The ﬁrst problem
checks whether the PDP correctly evaluates the requests
made by direct delegates and the second one checks whether
the PDP correctly evaluates the requests made by non-direct
delegates. We formulate these containment problems as the
BelLog program
Rchain = { chain(X) ←owner(X)
chain(X) ←chain(Y ) ∧ Y :delegate(X)
∧ ¬Y :revoke(X)@rev
} .
Given a subject X, chain(X) is: (1) t if the PDP checks
that X has at least one non-revoked chain, (2) ⊥ if the PDP
fails to check whether X has at least one non-revoked chain,
and (3) f if X has no chains or the PDP checks that X has
only revoked chains. We use the containment condition
cdirect = (∃Y. owner(Y ) = t ∧ Y :delegate(X) = t ∧
Y :revoke(X)@rev 6= t) ,
which is satisﬁed by a PDP input iﬀ the subject X who
makes the request is a direct delegate and the owner has
either not revoked the delegation or the PDP cannot check
if the delegation is revoked.
We formulate the ﬁrst containment problem as
cdirect ⇒ S = Rdirect , where
Rdirect = Rchain ∪ {pol(X) ← chain(X)(cid:73) t} .
The condition cdirect restricts PDP inputs to direct delegates
and Rdirect speciﬁes which direct delegates S must grant and
deny access to. Since the PDP must grant access to a di-
rect delegate X iﬀ the PDP either checks, or fails to check,
that X has at least one non-revoked chain, Rdirect conﬂates
⊥ and t into the grant decision using the (_ (cid:73) t) pattern.
We formulate the second problem as
(¬cdirect) ⇒ S = Rnon−direct , where
Rnon−direct = Rchain ∪ {pol(X) ← chain(X) (cid:73) f} .
The condition ¬cdirect restricts PDP inputs to non-direct del-