### 3.6 Triggering ROP via Function Pointer Overwriting

With the watermarking payload now ready for execution, the final step in the ROP-based watermarking process is to initiate the hidden watermarking path. This involves transitioning from the normal program flow to the ROP execution of pre-selected gadgets, without raising suspicion.

To trigger the ROP execution, we use a function pointer. This design choice is advantageous because it allows for a simple overwriting of the function pointer's value to redirect control to the ROP gadgets. Additionally, it provides a natural way to load the initiating stub of the watermarking payload (as shown in Section 3.2) directly onto the stack as function parameters. Typically, this function pointer points to a dummy function added to the program. During normal execution, the function pointer calls this dummy function, which performs benign computations that do not interfere with the program's intended behavior.

#### Example of Function Pointer Usage

```cpp
class gadC {
private:
    int var_1;
    int var_2;
public:
    gadC(int init_1, int init_2) {
        var_1 = init_1;
        var_2 = init_2;
    }
};

gadC *gad = new gadC(addr, X);

// Alternatively, using an array
int *gad = new int[2];
gad[0] = addr;
gad[1] = X;

// Or using a struct
struct gadS {
    int var_1, var_2;
};

gadS *gad = new gadS;
gad->var_1 = addr;
gad->var_2 = X;
```

In these examples, `addr` represents the address of the gadget, and `X` is the operand for the gadget. The function pointer is then used to trigger the ROP execution by overwriting its value with the address of the first gadget in the chain.

### 3.7 Implementation

Our ROP-based watermarking toolkit is implemented using a set of Python scripts, including a gadget scanner, a trace processor, and a code re-writer, as illustrated in Figure 6.

**Figure 6: Implementation of ROP-based Watermarking**

- **Gadget Scanner**: Analyzes system libraries, selects available gadgets, and creates a gadget database. It also generates the ROP payload that chains the candidate gadgets into the watermarking code.
- **Trace Processor**: Analyzes the execution traces of the target program under a secret input to find suitable carriers for the watermarking payload. It identifies entry points and records the executed parts of the carriers.
- **Code Re-writer**: Modifies the program's source code to embed the watermark. It divides the payload into segments, generates code for building and linking them, distributes the code into the carriers, and plants the dummy function and the ROP trigger. The modified source code is then re-compiled to produce the watermarked program.

#### Secret Trace Analysis

Secret trace analysis is a critical part of the watermarking process. The analyzer records execution at the binary level, while the watermark is embedded in the source code. To bridge this gap, our trace processor includes a code marker and a trace analyzer.

- **Code Marker**: Creates a special copy of the program's source code by marking function entry and exit points, as well as conditional code blocks, with ineffective inline assembly sequences (tags). Each tag is formatted to be easily recognizable and includes the file ID and line number of the marked position. A global junk variable is added to the program, and each tag writes the file ID and line number to this variable.
- **Trace Analyzer**: Searches for the inserted tags in the recorded trace to determine which parts of the source code were executed.

The trace processor is implemented in 207 lines of script, with the code marker taking 135 lines and the trace analyzer taking 72 lines. The code re-writer script consists of 191 lines. The gadget scanner is extended from GALILEO [27], an existing gadget searching algorithm.

### 4. Evaluation

We evaluate our ROP-based watermarking in terms of security and overhead. Security is assessed based on stealth, credibility, and resilience. Credibility is self-evident as the watermark is extracted directly from the executed ROP gadgets. We focus on analyzing stealth and resilience, and also measure the static and dynamic overhead.

#### 4.1 Static Stealth

Static stealth measures how well the watermark blends into the program. Our ROP-based watermarking inserts a small amount of code to construct the payload, which appears as program data. The code is distributed over many carriers, enhancing its diversity and stealth.

We use the static stealth measurement introduced by Collberg et al. [11]:

- **Dictionary Creation**: A dictionary of instruction-level profiles is created by scanning the watermarking code.
- **Stealth Measurement**: The dictionary words are searched in the original and watermarked programs. More words found indicate better stealth.

**Figure 8: Locality Evaluation on Static Stealth**

We apply our ROP-based watermarking to six benchmark programs (bzip2, hmmer, lbm, mcf, sjeng, and soplex) to embed a 192-bit watermark. The results show that 70-85% of the dictionary words already exist in the original programs, and only 72-88% of the words are observed in the watermarked programs, making them indistinguishable.

#### 4.2 Dependency Analysis on Watermarking Components

We simulate a dependency analysis where an attacker locates a distinguishable component and tries to trace other parts. Existing watermarking schemes can be vulnerable to this, but our ROP-based watermarking payload remains in the data region, making it invisible to code analyses.

**Figure 9: Dependency Analysis Result of CT Watermarking**

In contrast, our ROP-based watermarking does not have explicit connections to the corresponding gadgets, making the watermarking semantics "invisible" to code analyses. We verify this by simulating a similar analysis, which fails to find any dependencies on the exposed string.

**Figure 10: Unintended Instructions Overwriting the Watermark String**

#### 4.3 Resilience

We test the resilience of our watermarked programs against common binary obfuscations and transformations:

- **Xenocode**: Performs binary-level obfuscation.
- **UPX**: Provides high-quality packing and compression.
- **LLVM Optimizer**: Enables various binary optimizations.

Results show that the watermarked programs can still correctly generate and chain the watermarking payload after transformations, indicating good resilience and compatibility with other protection mechanisms.

#### 4.4 Overhead

We compare the performance overhead of our ROP-based watermarking with graph-based watermarking. Our method involves less overhead in both execution time and heap space.

**Table 2: Runtime Overhead Comparison**

| Benchmark | ROP-based Watermarking (ms) | Graph-based Watermarking (ms) |
|-----------|-----------------------------|-------------------------------|
| bzip2     |                             |                               |
| hmmer     |                             |                               |

**Figure 11: Static Program Size Increments**

The runtime overhead of ROP-based watermarked programs is significantly smaller, sometimes more than two orders of magnitude smaller. Our method also experiences smaller increases in program size and heap-allocated data structures.

This comprehensive evaluation demonstrates the effectiveness and efficiency of our ROP-based watermarking approach.