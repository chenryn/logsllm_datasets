DEFCON 16
23 / 50
Anchor Function
This function is used to generate a local anchor
get pc proc near
mov ebx, [esp+0]
retn
get pc endp
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
24 / 50
Anchor Function
This function is used to generate a local anchor
get pc proc near
mov ebx, [esp+0]
retn
get pc endp
Or it can be inlined:
call $+5
pop ebx
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
24 / 50
Anchor to data
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
25 / 50
Carbon
Carbon is the 32-bit framework for interacting with the OS X
system libraries.
descended from the original Mac Toolbox
Apple encourages it to be used as a stepping stone to
Cocoa/Objective-C
HI, CG
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
26 / 50
Objective-C
Created in the mid 1980s by Stepstone
Popularized by NeXT in the late 1980s
Object Oriented inspired by Smalltalk
Small set of decorators on top of C
Functions aren’t called, messages are sent
Unicode strings are the standard, but stored internally as null
terminated UTF8 strings
Libraries are referred to as Frameworks
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
27 / 50
Frameworks
Objective-C has a rich set of base framework classes to call from
Common framework classes are prepended with NS (NeXTStep)
or CF (Core Foundation)
Other frameworks also make use of a two capital preﬁx
NS is frequently a wrapper for CF (toll-free bridge), NSString ==
CFString
The Objective-C system API for OS X is named Cocoa
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
28 / 50
AppKit
AppKit is the GUI framework classes available for Cocoa
iPhone uses UIKit instead, a scaled down version with some
custom libraries.
AppKit uses NS preﬁx, UIKit uses UI
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
29 / 50
Objective-C Methods
x = [object statement:arg1 second:arg2];
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
30 / 50
Objective-C Methods
x = [object statement:arg1 second:arg2];
Component:
Selector decorators
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
30 / 50
Objective-C Methods
x = [object statement:arg1 second:arg2];
Component:
Selector decorators
Component:
Recipient
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
30 / 50
Objective-C Methods
x = [object statement:arg1 second:arg2];
Component:
Selector decorators
Component:
Recipient
Component:
Selector
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
30 / 50
Objective-C Methods
x = [object statement:arg1 second:arg2];
Component:
Selector decorators
Component:
Recipient
Component:
Selector
Component:
Arguments
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
30 / 50
msgSend
Calls to selectors are just wrappers around C functions:
id objc msgSend(object, "statement:second:", arg1, arg2);
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
31 / 50
msgSend
Calls to selectors are just wrappers around C functions:
id objc msgSend(object, "statement:second:", arg1, arg2);
Component:
Recipient
Component:
Selector
Component:
Arguments
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
31 / 50
msgSendSuper
The objc msgSendSuper() function works in the same way that
obj msgSend() does, but passes it to the superclass. The recipient in
the call to the objc msgSendSuper() is an objc super data structure.
id objc msgSendSuper(struct objc super *super, SEL op, ...);
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
32 / 50
msgSend fpret
The objc msgSend fpret() function is identical to the standard
objc msgSend() function, diﬀering only in the fact that the return
value is a ﬂoating point instead of an integral type.
double objc msgSend fpret(id self, SEL op, ...);
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
33 / 50
msgSend stret
The objc msgSend stret() function is used to return a structure instead
of a value. The ﬁrst argument to the objc msgSend stret() function is
a pointer to memory large enough to contain the returning structure.
void objc msgSend stret(void * stretAddr, id theReceiver,
SEL theSelector, ...);
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
34 / 50
msgSendSuper stret
Send to the superclass, get a structure back.
void objc msgSendSuper stret(void * stretAddr, struct objc su
*super, SEL op, ...);
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
35 / 50
msgSend in asm
Since Objective C uses message passing between selectors, this means
there are no direct calls between functions.
mov
[esp+38h+var 30], eax
mov
eax, ds:off 400040
mov
[esp+38h+var 34], eax
mov
eax, ds:off 4000DC
mov
[esp+38h+var 38], eax
call
objc msgSend
mov
[esp+38h+var 28], 0
mov
[esp+38h+var 24], 404E0000h
mov
[esp+38h+var 2C], 0
mov
[esp+38h+var 30], eax
mov
eax, ds:off 40003C
mov
[esp+38h+var 38], esi
mov
[esp+38h+var 34], eax
call
objc msgSend
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
36 / 50
msgSend in asm
Determining the selectors automatically is not diﬃcult.
mov
esi, ds:off 4000D8
; "NSURLRequest"
mov
[esp+38h+var 30], eax
; arg1
mov
eax, ds:off 400040
; "URLWithString:"
mov
[esp+38h+msgSend selector], eax
mov
eax, ds:off 4000DC
; "NSURL"
mov
[esp+38h+msgSend recipient], eax
call
objc msgSend
; a = [NSURL URLWithString:]
mov
[esp+38h+var 28], 0
; arg3
mov
[esp+38h+var 24], 404E0000h
mov
[esp+38h+var 2C], 0
; arg2
mov
[esp+38h+var 30], eax
; arg1 (retVal from [NSURLWithString])
mov
eax, ds:off 40003C
; "requestWithURL:cachePolicy:timeoutInterval:"
mov
[esp+38h+msgSend recipient], esi
mov
[esp+38h+msgSend selector], eax
call
objc msgSend
; a=[NSURLRequest requestWithURL:cachePolicy:timeoutInterval:]
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
37 / 50
Selector Structures in the Binary
All of the information for selectors are stored in the OBJC segment of
the binaries
inst meth:00400220 DownloadDelegate mthd dd 0 ; DATA XREF:
class:DownloadDelegate
inst meth:00400224 dd 9
inst meth:00400228 dd offset aDownloadDidr 0, offset aV16@04@8i12, offset download didReceiveDataOfLength
; "download:didReceiveDataOfLength:"
inst meth:00400234 dd offset aDownloadDidrec, offset aV16@04@8@12, offset download didReceiveResponse
; "download:didReceiveResponse:"
inst meth:00400240 dd offset aDownloadDidcre, offset aV16@04@8@12, offset download didCreateDestination
; "download:didCreateDestination:"
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
38 / 50
Type Encodings
Table: Objective-C Type Encodings
Code
Description
Code
Description
c
char
C
unsigned char
s
short
S
unsigned short
i
int
I
unsigned int
l
long
L
unsigned long
q
long long
Q
unsigned long long
f
ﬂoat
d
double
B
C++ bool / C99 Bool
v
void
*
c string (char *)
@
object / id
#
class (Class)
:
selector (SEL)
[array type]
array
{name=type}
structure
(name=type)
union
?
unknown / function pointer
ˆtype
pointer to type
bnum
bitﬁeld of num bytes
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
39 / 50
Argument Type Encoding
In the method deﬁnition sections (as well as the ivars) the data types
for each argument are described using type encodings.
v16@0:4@8@12
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
40 / 50
Argument Type Encoding
In the method deﬁnition sections (as well as the ivars) the data types
for each argument are described using type encodings.
v16@0:4@8@12
-(void)
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
40 / 50
Argument Type Encoding
In the method deﬁnition sections (as well as the ivars) the data types
for each argument are described using type encodings.
v16@0:4@8@12
-(void)
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
40 / 50
Argument Type Encoding
In the method deﬁnition sections (as well as the ivars) the data types
for each argument are described using type encodings.
v16@0:4@8@12
-(void)method:
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
40 / 50
Argument Type Encoding
In the method deﬁnition sections (as well as the ivars) the data types
for each argument are described using type encodings.
v16@0:4@8@12
-(void)method:(id) object1
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
40 / 50
Argument Type Encoding
In the method deﬁnition sections (as well as the ivars) the data types
for each argument are described using type encodings.
v16@0:4@8@12
-(void)method:(id) object1 andthen:(id) object2
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
40 / 50
Argument Type Encoding
In the method deﬁnition sections (as well as the ivars) the data types
for each argument are described using type encodings.
v16@0:4@8@12
-(void)method:(id) object1 andthen:(id) object2
Stack oﬀsets are indicated and can be used to determine variable size
when not implicitly deﬁned
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
40 / 50
Standard Memory Management
Objective C uses reference counting to control memory allocations.
// Allocate memory
NSObject *object = [[NSObject alloc] init];
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
41 / 50
Standard Memory Management
Objective C uses reference counting to control memory allocations.
// Allocate memory
NSObject *object = [[NSObject alloc] init];
// removes the local reference
[object release];
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
41 / 50
Standard Memory Management
Objective C uses reference counting to control memory allocations.
// Allocate memory
NSObject *object = [[NSObject alloc] init];
// removes the local reference
[object release];
// adds a local reference to keep external objects in scope
[otherObject retain];
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
41 / 50
Autorelease Pools
To dispose of memory allocated by child functions, Objective C utilizes
an object called an Autorelease Pool.
-(void) someFunction
{
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
...
[pool release];
return;
}
pools can be nested within loops, so expect to see multiple instances
in larger functions
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
42 / 50
Garbage Collection
Garbage collection was added in OS X 10.5
Classes designed for GC can be identiﬁed by having a ﬁnalize
selector
can be triggered by the collectExhaustively and collectIfNeeded
selectors for NSGarbageCollector
Garbage collection is not available on the iPhone, so you
shouldn’t see it there
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
43 / 50
Categories
Categories are the ability to add functionality to a class from an
external source
This allows base foundation classes to be overridden
If there’s a category for any base class method signature, you
need to rethink assumptions on code behaviour
Category deﬁnitions are in the obviously labelled cat sections of
the binary
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
44 / 50
Timers
Commonly used in protection schemes
Objective-C supports multiple ways to create a timer
NSTimer or NSOperationQueue
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
45 / 50
Windows
Windows applications have had decades of people advancing
cracking/packing
Lots of documentation, but lots of hurdles
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
46 / 50
Mac
Compressed/packed executables are not commonplace on OS X
This section’s slides exists only on the CD and are a temporal
ﬁgment of your imagination
That means you should probably have either gone to my
presentation
or at least get the full version oﬀ my website
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
47 / 50
References:
http://felinemenace.org/ nemo/
itsme’s objc ﬁxer:
http://nah6.com/ itsme/cvs-xdadevtools/ida/idcscripts/ﬁxobjc.idc
ﬁleoﬀset’s otx parser
http://ﬁleoﬀset.blogspot.com/2008/02/lua-script.html
http://www.dribin.org/dave/blog/archives/2006/04/22/tracing objc/
http://unixjunkie.blogspot.com/
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
48 / 50
Coming Soon:
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
49 / 50
Total Slide Count
50
Hotchkies ( PI:EMAIL )
Under the iHood
DEFCON 16
50 / 50