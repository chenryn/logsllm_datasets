     * Like getpass(3) but with timeout and echo flags.
     */
    char *
    tgetpass(const char *prompt, int timeout, int flags,
        struct sudo_conv_callback *callback)
    {
        struct sigaction sa, savealrm, saveint, savehup, savequit, saveterm;
        struct sigaction savetstp, savettin, savettou;
        char *pass;
        static const char *askpass;//定义
        static char buf[SUDO_CONV_REPL_MAX + 1];
        int i, input, output, save_errno, neednl = 0, need_restart;
        debug_decl(tgetpass, SUDO_DEBUG_CONV)
        (void) fflush(stdout);
        if (askpass == NULL) {
        askpass = getenv_unhooked("SUDO_ASKPASS");//从环境变量获取
        if (askpass == NULL || *askpass == '\0')
            askpass = sudo_conf_askpass_path();
        }
        /* If no tty present and we need to disable echo, try askpass. */
        if (!ISSET(flags, TGP_STDIN|TGP_ECHO|TGP_ASKPASS|TGP_NOECHO_TRY) &&
        !tty_present()) {//注意TGP_ASKPASS这个flag
        if (askpass == NULL || getenv_unhooked("DISPLAY") == NULL) {
            sudo_warnx(U_("no tty present and no askpass program specified"));
            debug_return_str(NULL);
        }
        SET(flags, TGP_ASKPASS);//启用askpass选项
        }
        /* If using a helper program to get the password, run it instead. */
        if (ISSET(flags, TGP_ASKPASS)) {
        if (askpass == NULL || *askpass == '\0')
            sudo_fatalx(U_("no askpass program specified, try setting SUDO_ASKPASS"));
        debug_return_str_masked(sudo_askpass(askpass, prompt));//调用sudo_askpass,askpass作为参数
        }
        //...
    }
    //
    /*
     * Fork a child and exec sudo-askpass to get the password from the user.
     */
    static char *
    sudo_askpass(const char *askpass, const char *prompt)
    {
        static char buf[SUDO_CONV_REPL_MAX + 1], *pass;
        struct sigaction sa, savechld;
        int pfd[2], status;
        pid_t child;
        //...
        if (pipe(pfd) == -1)
        sudo_fatal(U_("unable to create pipe"));
        child = sudo_debug_fork();//fork处子进程
        //...
        if (child == 0) {
        /* child, point stdout to output side of the pipe and exec askpass */
        if (dup2(pfd[1], STDOUT_FILENO) == -1) {//stdout复制到pfd[1]这个输出管道
            sudo_warn("dup2");
            _exit(255);
        }
        if (setuid(ROOT_UID) == -1)
            sudo_warn("setuid(%d)", ROOT_UID);//检查suid
        if (setgid(user_details.gid)) {
            sudo_warn(U_("unable to set gid to %u"), (unsigned int)user_details.gid);//检查gid
            _exit(255);
        }
        if (setuid(user_details.uid)) {
            sudo_warn(U_("unable to set uid to %u"), (unsigned int)user_details.uid);//检查uid
            _exit(255);
        }
        closefrom(STDERR_FILENO + 1);
        execl(askpass, askpass, prompt, (char *)NULL);//去执行askpass指定的程序
        sudo_warn(U_("unable to run %s"), askpass);
        _exit(255);
        }
        /* Get response from child (askpass). */
        (void) close(pfd[1]);
        pass = getln(pfd[0], buf, sizeof(buf), 0);//调用getln获取密码，注意pwfeedback参数为0，表示不启用该选项。
        (void) close(pfd[0]);
        //...
        debug_return_str_masked(pass);
    }
`signo`定义为`static volatile sig_atomic_t
signo[NSIG];`，存储程序运行中接收到的各种信号以便对其处理，这里我们置为`\x00`即可。
`tgetpass_flags`保存一些选项对应的flag。在`sudo.h`中可以找到宏及表示的含义。其中`TGP_ASKPASS`为4，因此我们要启用`askpass`需要设置此值为`0x4`。
    /*
     * Flags for tgetpass()
     */
    #define TGP_NOECHO  0x00        /* turn echo off reading pw (default) */
    #define TGP_ECHO    0x01        /* leave echo on when reading passwd */
    #define TGP_STDIN   0x02        /* read from stdin, not /dev/tty */
    #define TGP_ASKPASS 0x04        /* read from askpass helper program */
    #define TGP_MASK    0x08        /* mask user input when reading */
    #define TGP_NOECHO_TRY  0x10        /* turn off echo if possible */
`user_details`保存了用户的信息，包括`uid`和`pid`。
    struct user_details {
        pid_t pid;
        pid_t ppid;
        pid_t pgid;
        pid_t tcpgid;
        pid_t sid;
        uid_t uid;
        uid_t euid;
        uid_t gid;
        uid_t egid;
        const char *username;
        const char *cwd;
        const char *tty;
        const char *host;
        const char *shell;
        GETGROUPS_T *groups;
        int ngroups;
        int ts_cols;
        int ts_lines;
    };
### 利用思路
在之前的分析中我们提到了`sudo_term_kill`为`\x00`，这导致我们如果想要溢出写`user_details`无法将`signo`覆写为零值，随后程序会认为产生异常信号而杀死进程。而在`pty`作为输入源的情况下这个值为`\x15`。因此我们首先确定要选择`pty`输入。其次，我们需要利用刚才分析的`askpass`的调用链来执行我们的程序以获得`root
shell`。由于`askpass`里的`getln`没有启用`pwfeedback`，所以我们需要先溢出写`user_details`，在这个溢出写的过程中同时改掉`tgetpass_flags`为`TGP_ASKPASS`。因为sudo有三次输入密码的机会，在第一次输入密码失败后由于我们设置了`askpass`，第二次会调用`askpass`指向的外部程序。
在这个程序中，我们设置suid并起一个shell，即可在第二次处理时获得`root shell`。
### exp
这里使用的exp来自[Plazmaz-CVE-2019-18634](https://github.com/Plazmaz/CVE-2019-18634)，其编写思路和我刚才描述的一致。注意在不同的环境下变量的偏移有所不同，最好拿IDA看一下在脚本中手动修改。
## 踩坑
这里的坑其实算是题外话，我之前调试的时候用的是开启了`asan`的binary，结果漏洞无法复现，在IDA中可以看到这里的赋值语句前面多了俩条件，使用gdb进行调试发现这里的`$rdx+0x7FFF8000`的前`0x20`都是0，因为`cp_1
>> 3`向右移动三位，因此对于`0x20 > 3) + 0x7FFF8000);
              if ( (char)v19 > (char)v9 || !(_BYTE)v19 )// 条件？注意前面是有符号比较,0xf9<0
              {
                *cp_1++ = v12;                      // 赋值部分
                goto LABEL_15;
              }
    /*
    .text:000000000007C6B1 loc_7C6B1:                              ; CODE XREF: getln+50E↓j
    .text:000000000007C6B1                 mov     rdx, r14
    .text:000000000007C6B4                 mov     rsi, r14
    .text:000000000007C6B7                 shr     rdx, 3
    .text:000000000007C6BB                 and     esi, 7
    .text:000000000007C6BE                 movzx   edx, byte ptr [rdx+7FFF8000h]
    .text:000000000007C6C5                 cmp     dl, sil
    .text:000000000007C6C8                 jg      short loc_7C6D2
    .text:000000000007C6CA                 test    dl, dl
    .text:000000000007C6CC                 jnz     loc_7C87D
    .text:000000000007C6D2
    */
## 总结
`sudo`作为特权系统软件，稍有不慎就可能被拿来提权，且用户态程序比内核简单许多，近些年已经爆出了诸多相关的漏洞，有很多因为配置问题在实际中几乎不可能被利用，而`CVE-2019-18634`的配置选项并非冷门，影响的范围较广，漏洞的原理较为简单，适合刚入门二进制漏洞的师傅们进行分析和调试。
## 参考
[CVE-2019-18634 sudo 提权漏洞分析]()
[Not hunter2: Buffer Overflow in Sudo via pwfeedback]()
[sudo 历史漏洞回顾]()