title:Measuring Popularity of Cryptographic Libraries in Internet-Wide Scans
author:Mat&apos;us Nemec and
Dusan Klinec and
Petr Svenda and
Peter Sekan and
Vashek Matyas
Measuring Popularity of Cryptographic Libraries
in Internet-Wide Scans
Matus Nemec
Masaryk University,
Ca’ Foscari University of Venice
PI:EMAIL
Dusan Klinec
EnigmaBridge, Masaryk University
PI:EMAIL
Petr Svenda
Masaryk University
PI:EMAIL
Peter Sekan
Masaryk University
PI:EMAIL
ABSTRACT
We measure the popularity of cryptographic libraries in large data-
sets of RSA public keys. We do so by improving a recently proposed
method based on biases introduced by alternative implementations
of prime selection in different cryptographic libraries. We extend
the previous work by applying statistical inference to approximate
a share of libraries matching an observed distribution of RSA keys
in an inspected dataset (e.g., Internet-wide scan of TLS handshakes).
The sensitivity of our method is sufficient to detect transient events
such as a periodic insertion of keys from a specific library into Cer-
tificate Transparency logs and inconsistencies in archived datasets.
We apply the method on keys from multiple Internet-wide scans
collected in years 2010 through 2017, on Certificate Transparency
logs and on separate datasets for PGP keys and SSH keys1. The
results quantify a strong dominance of OpenSSL with more than
84% TLS keys for Alexa 1M domains, steadily increasing since
the first measurement. OpenSSL is even more popular for GitHub
client-side SSH keys, with a share larger than 96%. Surprisingly,
new certificates inserted in Certificate Transparency logs on certain
days contain more than 20% keys most likely originating from Java
libraries, while TLS scans contain less than 5% of such keys.
Since the ground truth is not known, we compared our mea-
surements with other estimates and simulated different scenarios
to evaluate the accuracy of our method. To our best knowledge,
this is the first accurate measurement of the popularity of crypto-
graphic libraries not based on proxy information like web server
fingerprinting, but directly on the number of observed unique keys.
KEYWORDS
RSA algorithm, cryptographic library, prime generation
1Full details, processing scripts, datasets and supplementary materials can be found at
https://crocs.fi.muni.cz/papers/acsac2017.
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. Copyrights for components of this work owned by others than the 
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or 
republish, to post on servers or to redistribute to lists, requires prior specific permission 
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, Orlando, FL, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to the 
Association for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12. . . $15.00
https://doi.org/10.1145/3134600.3134612
Vashek Matyas
Masaryk University
PI:EMAIL
1 INTRODUCTION
With solid mathematical foundations for the currently used cryp-
tographic algorithms like RSA or AES, a successful attack (a com-
promise of used keys or exchanged messages, a forgery of signa-
tures, etc.) is achieved only very infrequently through mathematical
breakthroughs, but dominantly by a compromise of secrets at the
end-points, by attacks on the protocol level or via so-called imple-
mentation attacks, often combined with an immense computational
effort required from the attacker.
Implementation attacks exploit some shortcomings or a specific
behavior of the software leading to unintended data leakages in
otherwise mathematically secure algorithms. A large number of
practical attacks in recent years [31] testifies how difficult it is to
make an implementation secure, robust and without side-channel
leakage. Even major libraries such as OpenSSL, Java JCE or Mi-
crosoft CryptoAPI were hit by multiple problems including extrac-
tion of RSA private keys [11] or AES secret keys [10] remotely from
a targeted web server and generation of vulnerable keys by a weak
or a malfunctioning random generator [1, 24]. It is reasonable to
expect that similar problems will occur in future for these and other
cryptographic libraries as well.
The prediction of an impact for a future bug depends not only on
the nature of the bug (unknown in advance) but also on the overall
popularity of the affected cryptographic library within the targeted
usage domain. A security bug in OpenSSL will probably cause more
harm than a bug in an unknown or sparsely used library.
Yet the estimation of the popularity of a given library is a com-
plicated affair. As a library produces random keys, it is difficult to
attribute a particular key to its originating library based only on the
bits of the key. A common approach is to make indirect estimates
based on additional information such as specific strings inserted
into certificates, default libraries used by a software package which
is identified by other means (e.g., the Apache HTTP Server typ-
ically uses OpenSSL) or specific key properties (uncommon key
lengths or domain parameters). All these approaches leave a large
uncertainty about the real origin of the target key. A certificate can
be crafted by a different software than its key was, a server key may
be imported, and a combination of an algorithm and key length are
only rarely specific to a single library.
Our work aims to accurately measure the popularity of libraries
based on the subtle biases in bits of RSA public keys due to different
implementations of the prime pair selection process, as recently
described in [36]. The bias has almost no impact on the entropy
162of a key and poses no threat with respect to factorization attacks.
However, it allows for a probabilistic attribution of a key to the
originating library. We focus on answering the following questions:
(1) How many keys in an inspected dataset originate from specific
cryptographic libraries?
(2) How does the popularity of cryptographic libraries change over
time? Can we detect sudden temporary changes?
(3) What library generated a single given RSA key if the key usage
domain (TLS, SSH, etc.) is known?
In the original work, all libraries were assigned the same prior
probability – an assumption that is certainly inaccurate (intuitively,
OpenSSL is a far more common source of TLS keys than PGP soft-
ware). We propose an improved method that automatically extracts
the prior probability directly from a large dataset – obtaining the
popularity of libraries in the inspected dataset and subsequently
improving the classification accuracy of individual keys.
The answer to the first question tells us the popularity of cryp-
tographic libraries in different usage domains. Since the method is
based on the actual key counts instead of anecdotal proxies (e.g., in-
stalled packages or server strings), it is significantly more accurate.
Besides providing usage statistics, the popularity of the libraries is
important when estimating the potential impact of (past and future)
critical flaws, as well as when deciding where to most efficiently
spend the effort on development and security code review.
The availability of large Internet-wide scans of TLS handshakes
performed every week, Certificate Transparency logs and append-
only PGP keyserver databases, allow us to perform a study of cryp-
tographic library popularity over time, hence to find an answer to
the second question. When the scans are performed as frequently as
every week or even every day, temporary changes in the popularity
ratio can reveal sudden changes in the distributions of the keys,
possibly making a library more prominent than expected. Such
phenomena may indicate users reacting to a disclosed vulnerability
(e.g., by replacing their keys) or some significant changes in security
procedures of server implementations.
Finally, an accurate answer to the third question allows us to
reveal the originating library of a particular key. The previous
work [36] correctly labeled the origin of about 40% of random keys,
when a single public key was classified in a simulation with evenly
probable libraries. We improved the accuracy to over 94% for prior
probabilities of libraries typical for the TLS domain.
Contributions. Our paper brings the following contributions:
• A method for an accurate survey of popularity of cryptographic
libraries based on matching observed counts of RSA keys to
a mixture of biased reference distributions produced by the
libraries.
• Analyses of usage trends for large real-world archived datasets
of certificates for TLS, SSH and PGP from 2010 through 2017.
• Detection and analysis of abrupt transient events manifested
• Release of the classification tool and extensible catalog of more
than 60 profiles for open/closed-source software libraries, hard-
ware security modules, cryptographic smartcards and tokens.
The rest of the paper is organized as follows: Section 2 provides
the necessary background for understanding the RSA key classifi-
cation method based on slight biases in the distribution of keys and
by a sudden change in the ratio of libraries.
a basic overview of the automatic extraction of prior probabilities
from an inspected dataset. Section 3 explains the details of the li-
brary popularity measurement method and discusses the accuracy.
Section 4 applies our method to large current and archived datasets
to measure the popularity of libraries in time and discusses the
observed results. Section 5 provides a review of related work. The
paper is concluded in Section 6.
2 METHOD OVERVIEW
The authors of [36] demonstrated how different implementation
choices made by developers of cryptographic libraries lead to biases
in generated RSA keys. To generate an RSA key pair, two large
random primes p and q (typically half of the binary length of the
modulus) must be found. The modulus N is the product of the
primes. None of the sources of keys examined by [36] produced
moduli with uniformly distributed most significant byte, as one
might expect from cryptographic keys. Instead, the distributions of
moduli of each source were determined by the choice of the primes.
In order to reduce the uncertainty about the origin of a particular
key, three conditions must be satisfied: 1) bias is present in the key,
2) reference distributions of (ideally) all implementations are known,
and 3) a suitable method exists to match the reference data and the
observed data.
We use the same biases as observed in [36]. We collected refer-
ence distributions from additional sources and other versions of
cryptographic libraries, extending the knowledge of possible key
origins. The original classification method was based on conditional
probabilities and the application of Bayes’ rule. The origin (a group
of sources) of a key could be correctly estimated in 40% of attempts
– as opposed to 7.7% success of a random guess. We devised a new
method that estimates the proportion of sources in a given dataset
and more than doubles the average accuracy in TLS datasets.
2.1 Choice of key features
The most common reasons for the biases in the private primes were
efficiency improvements, a special form of the primes, bugs, and
uncommon implementation choices. The biases propagate to public
moduli to a certain degree – some are directly observable, some
require a large number of keys to distinguish and some cannot be
seen from the public values. This calls for a creation of a mask of the
public keys – instead of dealing with the full keys, some properties
are extracted and each key is represented by a vector of features.
We use the following features, inspired by the original approach:
(1) The most significant bits of the modulus (2nd to 7th bit): The
highest bits of the primes are often set to a constant, e.g.,
the two highest bits set to 1 to ensure the modulus has the
correct bit length. The high bits are sometimes manipulated
further, up to four bits were determined non-randomly. Even
without directly manipulating the top bits, the intervals from
which the primes are chosen are seen in the top bits of the
modulus.
(2) The modulus modulo 4: Due to bugs and unusual (for RSA)
implementation choices, the moduli might end up being
Blum integers – due to the primes always being equal to 3
modulo 4, the moduli are always equal to 1 modulo 4.
163versions. Most notably, the addition of new sources did not change
the results of clustering analysis as performed previously – the
number of groups and their division remains mostly unchanged.
Since we examine many libraries across several versions, we
often encounter very similar distributions (i.e., the algorithm did not
change across versions or multiple libraries use the same algorithm).