licious case and of 2−4 for the covert case.
In Tables 1 we present a summery of our experiments.
These results are with SHA-1 as the underlying hash func-
tion. The use of SHA-256 increases the total time by 5% −
10% and the communication of P2 (and the other weak par-
ties) by 30% on average in the ﬁrst protocol (since the size
of the commitments is aﬀected). We do not include the run-
ning time of the weaker parties since they were signiﬁcantly
smaller than S and P 1 (e.g., 2 seconds for protocol 2 with
AES).
We conclude from the above numbers that: (1) our ﬁrst
protocol requires more communication from the weak parties
which makes it suitable mainly for weak devices that have
high bandwidth; (2) the complexity of our second protocol
is almost independent in the number of parties. The com-
munication and running time of our ﬁrst protocol, however,
increases as the number of parties grows. The main over-
head in both protocols is the communication of the garbled
circuits.
Comparison to previous implementations. There are
many factors that aﬀect performance in practice. For exam-
2AES encryption is currently the standard benchmark for
2SFE implementations. Speciﬁcally, we use the circuit of
[52] in order to correctly compare it with the results of both
[52] and [55]. We remark that any optimization of the AES
circuit itself, e.g. as done in [8], could improve performance
in a similar way.
806ple, size and structure of the circuit, communication latency,
the security parameters, etc. However, the important and
most objective parameters for evaluating any system are the
total running time and the communication time. Thus, we
try to compare our results with previous ones with respect
to these parameters as much as possible 3
As we show in the full version, any secure 2SFE can be
used to achieve the security we require. The question, how-
ever, is whether current 2SFE constructions give us better
performance. The most eﬃcient 2SFE implementation for
semi-honest adversaries is the one of [29], which can securely
compute AES in 0.2s. For the case of a covert adversary, the
best result is 60 seconds [52] (in the random oracle model),
whereas our ﬁrst protocol takes around 9 seconds for 2 par-
ties.
As for the more interesting case of 2SFE secure in the
malicious model, the implementation of [52] runs in 1114
seconds, whereas the best known result is 192 seconds [55].
We note that the latter excludes communication and that
our second protocol is more than four times faster including
communication (which is of similar size to that of [55]).
A diﬀerent but relevant class of protocols is, of course, that
of secure multi -party SFE. In this case, the performance of
current implementations is a step behind that of 2SFE im-
plementations. For example, in the work of [13], one 32-bit
multiplication takes roughly 9ms. Since it is based on arith-
metic circuits, however, it is not clear how to best compare
it to our work. If we multiply its running time by the num-
ber of non-XOR gates of the AES circuit, we get around
125s—which is almost three times slower than our second
protocol. This performance, however, is for four parties with
at most one malicious party, whereas our protocol with four
parties allows up to three malicious parties. Moreover, it is
shown in [13] that as the number of parties grows, the per-
formance per multiplication gate gets worse (e.g., for seven
parties with at most two malicious, it takes 28ms) whereas
the performance of our protocol is almost independent of the
number of parties.
The work of [11] considers secure multi-party computa-
tion with boolean circuits, but only for semi-honest parties.
They do not use the AES benchmark but they show that it
takes roughly 3 − 8 seconds for three parties to evaluate a
circuit with 5500 AND gates. This means that in order to be
faster than our second protocol, a semi-honest-to-malicious
transformation would need to have an multiplicative over-
head smaller than 6. Recall that in the two-party case, the
eﬃciency ratio between semi-honest and malicious security
is more than several hundreds.
Side-channels in pipelined execution. We note that dur-
ing our experiments, we experienced diﬀerent timings for the
processing of the circuits that were evaluated and those that
were veriﬁed. This seems inevitable since the receiver works
harder in case he checks a garbled circuit. Indeed, simple so-
lutions like restricting the receiver to work in constant time
could work, at the cost of eﬃciency. However, clever tech-
niques that parallelize the work on several circuits could be
more eﬃcient. We leave this direction for future work.
3We note that some works try to compare the diﬀerent steps
of the protocols, but we ﬁnd such comparisons to be of little
value.
5 Acknowledgments
We would like to thank Benny Pinkas and Nigel P. Smart
for providing us the AES circuit from [52], and Peeter Laud
for his valuable comments.
6 References
[1] G. Asharov, A. Jain, A. Lopez-Alt, E. Tromer,
V. Vaikuntanathan, and D. Wichs. Multiparty computation
with low communication, computation and interaction via
threshold FHE. In EUROCRYPT, 2012.
[2] Y. Aumann and Y. Lindell. Security against covert
adversaries: Eﬃcient protocols for realistic adversaries. In
TCC, 2007.
[3] B. Barak and O. Goldreich. Universal arguments and their
applications. In CCC, 2002.
[4] A. Ben-David, N. Nisan, and B. Pinkas. Fairplaymp: a
system for secure multi-party computation. In CCS, 2008.
[5] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: A
framework for fast privacy-preserving computations. In
ESORICS, 2008.
[6] P. Bogetoft, D. Christensen, I. Damgard, M. Geisler,
T. Jakobsen, M. Krøigaard, J. Nielsen, J. B. Nielsen,
K. Nielsen, J. Pagter, M. Schwartzbach, and T. Toft.
Secure multiparty computation goes live. In FC, 2009.
[7] P. Bogetoft, I. Damgard, T. P. Jakobsen, K. Nielsen,
J. Pagter, and T. Toft. A practical implementation of
secure auctions based on multiparty integer computation.
In FC, 2006.
[8] J. Boyar and R. Peralta. A small depth-16 circuit for the
aes s-box. In Information Security and Privacy Research,
2012.
[9] R. Canetti. Security and composition of multi-party
cryptographic protocols. Journal of Cryptology, 2000.
[10] D. Chaum, C. Cr´epeau, and I. Damgard. Multiparty
unconditionally secure protocols. In STOC, 1988.
[11] S. G. Choi, K. Hwang, J. Katz, T. Malkin, and
D. Rubenstein. Secure multi-party computation of boolean
circuits with applications to privacy in on-line
marketplaces. In CT-RSA, 2012.
[12] R. Cleve. Limits on the security of coin ﬂips when half the
processors are faulty. In STOC, 1986.
[13] Ivan Damgaard, Martin Geisler, Mikkel Kroigaard, and
Jesper Buus Nielsen. Asynchronous multiparty
computation: Theory and implementation. In PKC, 2009.
[14] I. Damgard, S. Faust, and C. Hazay. Secure two-party
computation with low communication. In TCC, 2012.
[15] I. Damgard, M. Geisler, M. Krøigaard, and J.-B. Nielsen.
Asynchronous multiparty computation: Theory and
implementation. In PKC, 2009.
[16] I. Damgard and Y. Ishai. Constant-round multiparty
computation using a black-box pseudorandom generator. In
CRYPTO, 2005.
[17] I. Damgard, Y. Ishai, M. Krøigaard, J.-B. Nielsen, and
A. Smith. Scalable multiparty computation with nearly
optimal work and resilience. In CRYPTO, 2008.
[18] U. Feige, J. Killian, and M. Naor. A minimal model for
secure computation (extended abstract). In STOC, 1994.
[19] J. Garay, P. MacKenzie, M. Prabhakaran, and K. Yang.
Resource fairness and composability of cryptographic
protocols. TCC, 2006.
[20] R. Gennaro, C. Gentry, and B. Parno. Non-interactive
veriﬁable computing: outsourcing computation to
untrusted workers. In Advances in Cryptology - CRYPTO
’10, volume 6223 of Lecture Notes in Computer Science,
pages 465–482. Springer-Verlag, 2010.
[21] C. Gentry. Fully homomorphic encryption using ideal
lattices. In STOC, 2009.
[22] O. Goldreich. Foundations of Cryptography – Volume 2.
Cambridge University Press, 2004.
807Total Time
Communication Time
P1 / S Communication
P2 Communication
AES
Edit distance
Protocol 1 Protocol 1 Protocol 2 Protocol 2 Protocol 1
2 parties
2 parties
4 parties
4 parties
2 parties
9.12
6.5
14.8
9.5
45
32
46
32
33.5
26
Protocol 2
2 parties
240
185
27777KB
2443KB
27777KB
5539KB
216749KB 216749KB 165918KB 1296319KB
33KB
33KB
862KB
2KB
Table 1: Experimental results. Total time is the sum of communication time and computation time (in
seconds). P1 / S communication is the communication size of the party who communicates the most (either
P1 or S). P2 communication is the communication size of any one of the weaker players.
[23] O. Goldreich. Foundations of Cryptography – Volume 1.
[39] Y. Lindell and B. Pinkas. A proof of security of Yao’s
Cambridge University Press, 2006.
[24] O. Goldreich, S. Micali, and A. Wigderson. How to play
ANY mental game. In STOC, 1987.
[25] D. Gordon, J. Katz, V. Kolesnikov, T. Malkin, M. Raykova,
and Y. Vahlis. Secure computation with sublinear
amortized work. Technical Report 2011/482, IACR ePrint
Cryptography Archive, 2011.
protocol for two-party computation. Journal of Cryptology,
2009.
[40] Y. Lindell and B. Pinkas. Secure two-party computation
via cut-and-choose oblivious transfer. In TCC, 2011.
[41] Y. Lindell, B. Pinkas, and N. Smart. Implementing
two-party computation eﬃciently with security against
malicious adversaries. In SCN, 2008.
[26] S. Gordon and J. Katz. Partial fairness in secure two-party
[42] L. Malka. Vmcrypt: modular software architecture for
computation. EUROCRYPT, 2010.
scalable secure computation. In CCS, 2011.
[27] S. D. Gordon, C. Hazay, J. Katz, and Y. Lindell. Complete
[43] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay—a
fairness in secure two-party computation. Journal of the
ACM (JACM), 58(6):24, 2011.
secure two-party computation system. In USENIX
Security, 2004.
[28] W. Henecka, S. Kogl, A.-R. Sadeghi, T. Schneider, and
[44] S. Micali and P. Rogaway. Secure computation (abstract).
I. Wehrenberg. TASTY: tool for automating secure
two-party computations. In CCS, 2010.
[29] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure
two-party computation using garbled circuits. In USENIX
Security, 2011.
[30] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending
oblivious transfers eﬃciently. In CRYPTO, 2003.
[31] K. J¨arvinen, V. Kolesnikov, A.-R. Sadeghi, and
T. Schneider. Garbled circuits for leakage-resilience:
hardware implementation and evaluation of one-time
programs. In CHES, 2010.
[32] S. Kamara, P. Mohassel, and M. Raykova. Outsourcing
multi-party comptuation. Technical Report 2011/272,
IACR ePrint Cryptography Archive, 2011.
[33] J. Katz, R. Ostrovsky, and A. Smith. Round eﬃciency of
multi-party computation with a dishonest majority. In
EUROCRYPT, 2003.
[34] M. S. Kiraz and B. Schoenmakers. An eﬃcient protocol for
fair secure two-party computation. In CT-RSA, 2008.
[35] V. Kolesnikov and T. Schneider. Improved garbled circuit:
Free xor gates and applications. In ICALP, 2008.
[36] B. Kreuter, a. shelat, and C.-H. Shen. Towards billion-gate
secure computation with malicious adversaries. Technical
Report 2012/179, IACR ePrint Cryptography Archive,
2012.
[37] Y. Lindell. Parallel coin-tossing and constant-round secure
two-party computation. In CRYPTO, 2001.
[38] Y. Lindell and B. Pinkas. An eﬃcient protocol for secure
two-party computation in the presence of malicious
adversaries. In EUROCRYPT, 2007.
In CRYPTO, 1992.
[45] P. Mohassel and M. Franklin. Eﬃciency tradeoﬀs for
malicious two-party computation. In PKC, 2006.
[46] M. Naor and K. Nissim. Communication preserving
protocols for secure function evaluation. In STOC, 2001.
[47] M. Naor and B. Pinkas. Oblivious transfer and polynomial
evaluation. In STOC, 1999.
[48] M. Naor and B. Pinkas. Eﬃcient oblivious transfer
protocols. In SODA, 2001.
[49] M. Naor, B. Pinkas, and R. Sumner. Privacy preserving
auctions and mechanism design. In EC, 1999.
[50] C. Peikert, V. Vaikuntanathan, and B. Waters. A
framework for eﬃcient and composable oblivious transfer.
In CRYPTO, Berlin, Heidelberg, 2008.
[51] B. Pinkas. Fair secure two-party computation.
EUROCRYPT, 2003.
[52] B. Pinkas, T. Schneider, N. Smart, and S. Williams. Secure
two-party computation is practical. In ASIACRYPT, 2009.
[53] M. Rabin. How to exchange secrets by oblivious transfer.
Technical Report TR-81, Aiken Computation Lab, Harvard
University, 1981.
[54] A. Shamir. How to share a secret. Commun. ACM,
November 1979.
[55] A. Shelat and C. H. Shen. Two-output secure computation
with malicious adversaries. In EUROCRYPT, 2011.
[56] D. Woodruﬀ. Revisiting the eﬃciency of malicious
two-party computation. In EUROCRYPT, 2007.
[57] A. Yao. Protocols for secure computations. In FOCS, 1982.
[58] A. Yao. How to generate and exchange secrets. In FOCS,
1986.
808