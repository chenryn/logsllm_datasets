module, and a validation module. ETHBMC is implemented
in around 13,000 lines of Rust code.
Figure 2: High-level overview of ETHBMC and its inner workings.
ETHBMC utilizes its symbolic execution engine to explore
the available state space a program can reach (Section 5.1).
During this exploration, we can, at any time, translate the
necessary conditions (or constraints) needed to reach this
state into ﬁrst-order logic. When the exploration ﬁnishes, i.e.,
the execution terminates in a halting state, we encode the
attacker’s goal using additional constraints (Section 5.2). As
an example, we encode a constraint that the balance of the
attacker’s account must be higher at the last state of execution
than at the ﬁrst state. We then utilize our backend SMT solver
to solve the constraint system. As introduced in Section 2.3,
an SMT solver performs proof by enumeration: it tries to ﬁnd
a satisfying (concrete) assignment for the constraint system,
thus proving it can be solved. We model the full execution
of smart contracts. Thus, a satisfying assignment that both
reaches a valid halting state and fulﬁlls the attacker model,
proves a vulnerability in the contract. Additionally, the con-
USENIX Association
29th USENIX Security Symposium    2765
crete assignment, found by the SMT solver, is a valid input
(i.e., transaction) to the smart contract, which triggers the ex-
ploit. Finally, we verify that the exploit is a true positive by
running a concrete ofﬂine execution (see Section 5.3).
5.1 Symbolic Executor
The executor explores the contract in a breadth-ﬁrst search.
Whenever the executor needs to assert satisﬁability of a given
code path, we query our backend SMT solver. We evaluated
different solvers and found that Yices2 [15] outperforms other
approaches such as Boolector [44], and Z3 [12] in this prob-
lem domain (see Section 6.5). We explore all code paths until
either they reach a halting state, or the solver times out or
disproves the path. If we encounter a loop during execution,
we use loop-unrolling, i.e., we execute the loop n number of
times, after which we drop out of the loop. We use the same
strategy in limiting call depth, since in an environment with
multiple accounts, contracts could keep calling each other
in inﬁnite loops. Additionally, we employ several standard
symbolic execution optimization techniques: constant fold-
ing, arithmetic rewriting, and constraint set caching [7]. When
the executor comes to a hold, all end states are passed to the
detection module for further analysis.
5.2 Detection Module
We encode the attacker’s goal using additional path con-
straints, e.g., we push an additional constraint specifying that
after the current transaction executed, the balance of the at-
tacker account must be higher than at the start of the entire
analysis. When encountering a DELEGATECALL or CALLCODE
instruction, we create an additional state hijack, where we
try to hijack the control ﬂow of the contract. We add a
constraint to hijack, constraining the target address of the
CALLCODE/DELEGATECALL to be the attacker’s account ad-
dress. If this constraint is satisﬁable, we can redirect the con-
trol ﬂow. In a similar vein, we ﬂag states which execute a
SELFDESTRUCT instruction, to detect contracts that can be de-
stroyed by an outside attacker. Note that if the SELFDESTRUCT
instruction can be used to steal money from the account,
ETHBMC detects both cases. If we detect any type of vul-
nerability, we pass the corresponding state to the validation
module.
If we cannot detect any attack, we compute the set of
state altering states, i.e., the subset of σh which experienced
changes to their environment. Only these states can provoke
new paths in the executor, other states would result in the
same initial states as explored in the previous round. Thus,
we only explore these states further.
Table 2: Results of evaluating different analyzers on toy examples.
Tool
Keccak Mapping Memcopy
Inter-Contract
Parity
teEther
Manticore
Mythril
Vandal
MadMax
Securify
ETHBMC
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32) Correct
n/a
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35) Incorrect or not supported
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
5.3 Validation Module
In the last step, we try to generate valid transactions for every
state which has a feasible attack path. We utilize our the SMT
solver to generate the transaction data needed to trigger the
vulnerability. After successfully generating attack data, we
leverage the go-ethereum [20] tool suite, especially the EVM
utility, to simulate the attack in an ofﬂine fashion. This allows
us to simulate all the generated transactions and check if they
indeed match their required attack vector.
6 Evaluation
We evaluated ETHBMC in several different experiments and
focus on the main results in the following.
6.1 Empirical Analysis of Current Techniques
We start with comparing ETHBMC against the static analy-
sis tools examined in Section 3.3. We use the toy examples
presented in Section 3.1 as a set of trials. We embedded a
SELFDESTRUCT instruction in each contract, since all tools
offer a detection module for this. Additionally, we recreated
the Parity account hack examined in Section 3.2 to simulate
a complex, real-world scenario. A general overview of our
ﬁndings is presented in Table 2.
Analysis Setup Unfortunately, we could not get MAIAN
to work properly; multiple libraries required by the analyzer
are by now incompatible. The authors neither speciﬁed which
version they used in the original publication, nor responded to
multiple GitHub issues regarding these problems [47]. Again,
we only discuss Vandal since MadMax inherits its capabilities.
We evaluated against the latest version of the tools at the
time of writing. This corresponds to teEther at github commit
d7b7fd1 [32], Manticore in version 0.2.4 [48], Mythril in
0.20.0 [40], Vandal at github commit f7bfee7 [3], securify
at github commit 8fd230 [61] and Oyente at github commit
6c9d382 [40]. While Oyente offers a mode to detect exposed
SELFDESTRUCT instructions, we discovered during testing that
the mode seems to be inherently broken. As a sanity check
we tested a simple contract with a simply one line function
which selfdestructs the contract (i.e., Listing 1 without the
2766    29th USENIX Security Symposium
USENIX Association
surrounding if clause). Oyente ﬂags the contracts as non-
vulnerable. Thus, we exclude it from the experiment.
For the evaluation, we compiled all contracts to bytecode
and used this as input to the different analyzers. This guaran-
tees that the comparison is fair among all tools and no one
can get an advantage by leveraging source code information.
Keccak256 Function We start with the simple contract test-
ing the analyzer’s abilities to model hash functions, i.e. List-
ing 1. The contract compares the hashed input to a randomly-
chosen constant value. If the attacker wanted to pass the check
(line 2), they would have to supply a preimage. Since keccak
is a cryptographically secure hash function, this is infeasible
in practice and the contract is not vulnerable.
Manticore, Securify, and ETHBMC correctly identify the
contract as secure, all other tools report a vulnerability. How-
ever, according to our source code review, teEther should pass
the experiment. In a ﬁrst pass over the contract, teEther uses
binary slicing to ﬁnd paths resulting in potentially vulnerable
states. In a second path, it executes these paths symbolically to
ﬁnd an input which can potentially reach this state. However,
for this experiment, teEther reports that it cannot ﬁnd a poten-
tial path containing a SELFDESTRUCT instruction. According
to our understanding, it should only discard the possibility
of an exploitable contract in the second pass. Thus we list
teEther as incorrect for this experiment.
Due to the prevalence of the mapping data type, we con-
tinue our analysis with the contract listed in Listing 2, an at-
tacker could exploit the contract by ﬁrst calling createUser,
supplying her own account address as input, then calling
destruct with her assigned id. Only teEther and ETHBMC
ﬁnd the vulnerable state.
Memcopy-Style Operations The next experiment is meant
to test the executors’ handling of memcopy-style operations.
We use the contract depicted in Listing 3. Since the input is
deﬁned as string, the calldata gets copied to memory, using
a memcopy-like instruction.
On ﬁrst glance, Securify seemed to pass the experiment,
reporting a vulnerable state. However, this is in direct conﬂict
with our source code review in Section 3.3 as we discovered
that it simply ignores memcopy-esque instructions. We thus
perform a second validating experiment as follows:
f u n c t i o n a l i a s ( s t r i n g i n p u t , u i n t x , u i n t y ) p u b l i c {
require ( x == y ) ;
i f ( i n p u t [ x ]
!= i n p u t [ y ] ) {
s e l f d e s t r u c t ( msg . s e n d e r ) ;
1
2
3
4
5
6
}
}
Running the experiment two times, one as is, and one where
the condition on line 2 is negated, resulted in Securify ﬂagging
both instances as vulnerable. This conﬁrms our suspicion that
Securify does not correctly reason about this program, since
the instance presented above is clearly non-vulnerable. We
repeat this experiment for all tools with no change in outcome.
All tools except teEther and ETHBMC fail to ﬁnd a vulnerable
state.
Inter-Contract Analysis Analyzing inter-contract analysis
proved tricky for Mythril; the tool supports inter-contract
analysis, but the contract has to be already deployed on a
blockchain. Thus we exclude them from this test, only leaving
Manticore for evaluation since none of the other tools support
inter-contract analysis. The experiment is simulated using two
contracts Library and Target, mirroring the toy example
presented in Listing 4. We assume Target to be the contract
which gets analyzed. Both Manticore and ETHBMC ﬁnd
correct inputs for this example.
Parity Finally, we recreate the Parity account hack exam-
ined in Section 3.2 to simulate a complex, real-world scenario.
We run an archive Ethereum node which stores all past infor-
mation of the network. This allows us to retrieve state and
environment information for any past block. We use this in-
formation to analyze one of the exploited accounts, 10 blocks
before the hack took place.
Mythril offers an on-chain analysis mode, where it down-
loads all necessary live information from the blockchain. Un-
fortunately, it only supports analysis at the currently newest
block. We extend the tool to work with past blocks and are
currently in the process of submitting this patch to the up-
stream repository. However, when analyzing the parity con-
tract, Mythril does not report any vulnerabilities.
ETHBMC does support a mode similar to Mythril: we
extract the storage information at the speciﬁc block and pre-
conﬁgure the environment with them. When reaching any
call-based instruction, we extract any constant arguments and
load the corresponding receiver contract. ETHBMC ﬁnishes
analysis and correctly reports two ways to exploit the contract.
In the actual parity code, the constructor and initialization
code are split across two functions. Thus, an attacker can ei-
ther call the exposed constructor or the initialization method
directly. ETHBMC generates valid attack code for both vul-
nerabilities.
Manticore does not support any kind of online analysis.
Therefore, we extract the storage parameters at the correspond-
ing blocks and set up a test environment with both accounts
by utilizing their API. After processing the ﬁrst transaction,
Manticore reports that it has not detected any state which can
be explored further and ﬁnishes the analysis without reporting
any issues.
6.2 Large-Scale Analysis
To further evaluate ETHBMC, we conducted a large-scale
scan of all 2,194,650 accounts listed on Google BigQuery [11]
as of 24. December 2018. We split the scan into three stages,
enabling us to directly compare it against two previous
large-scale experiments performed: the ﬁrst by Krupp and
USENIX Association
29th USENIX Security Symposium    2767
Table 3: Large-scale analysis results displaying the amount of contracts found (with the amount of unique exploits generated in brackets)
Analyzer
ETHBMC
teEther
ETHBMC
MAIAN
ETHBMC
Steal Ether
Hijack
1,681
1,509
1,693
-
2,708
(1,893)
(1,541)
(1,964)
(3,916)
51
8
51
-
97
Suicidal
1,431
-
1,439
1,423
1,924
(54)
(54)
(123)
(1,474)
(1,482)
Total
2,856
1,509
2,921
1,423
(3,367)
(1,541)
(3,448)
(1,989)
4,301
(5,905)
Rossow [33] and a second one by Nikolic et al. [46]. Krupp
and Rossow presented teEther which uses binary slicing in
conjunction with symbolic execution. The tool focuses on ex-
tracting Ether, as well as as redirecting control ﬂow. Nikolic
et al. developed MAIAN, a concolic executor, to study sui-
cidal accounts, i.e., accounts which could be destroyed by
anyone. An overview of our ﬁndings is presented in Table 3
and discussed in detail below. Note that, as in the Parity ex-
ample, ETHBMC often found multiple ways to exploit the
same vulnerability, thus we list the number of unique exploits
found during analysis in brackets.
Experiment Design Since we run an archive node, we
can freely recreate account environments at any given block
height. We utilize this capability to ﬁrst recreate the environ-
ment at which Krupp and Rossow conducted their scan, ana-
lyzing all accounts listed by their dataset. Subsequently, we
extracted all contract addresses present at the time of Nikolic’s