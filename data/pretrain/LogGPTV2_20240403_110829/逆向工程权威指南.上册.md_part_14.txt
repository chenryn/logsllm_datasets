---
## Page 83
第7章scanf)
65
set 2nd argunent of printf(),
1 1oad vozd at address $sp+24:
1v
s25,tca1116(printf)($28)
$5,24($sp)
4
jalr
lu1
$4, thi ($1C2)
$4,$4, $1o ($1C2) : branch delay s1ot
$25
addlu
7 set return value to 0:
$31,36 ($sp)
nove
$2,$0
 return:
$sp, $sp,40 : branch delay slot
$31
addiu
IDA将本程序的栈结构显示如下。
指令清单7.5
Optimizing GCC 4.4.5 (IDA)
-text:00000000
- text:00000000
main:
.text:00000000 var_18
= -0x18
-text:00000000
 var_10
= -0×10
- text: 00000000
. text:00000000
var_4
:function prologue:
. text:00000000
lui
-text:00000004
addiu
de$
-text:00000008
1a
$gp,
(_gnu_1local_gp s 0xFFFF)
=0×28
. text:0000000c
5W
$ta.
0x28+vax_4($sp)
.text:00000010
8w
$gp, 0x28+var_18 ($sp)
} call puts []:
,text:00000014
1.w
St9,
(puts 6 0xFFFF) ($gp)
,text:00000018
1ui
$a0,
($LC0 >> 16) *Enter X:*
.text:0000001C
ja1r
Sa0, (SLC0 & 0xFFFF)  *Enter X:* : branch delay slot
= cal1 scanf (1:
. text:00000020
La
. text:00000024
1w
$gp, 0x28+var_18($sp)
.text :00000028
lui
Sa0,
P4。(91> 16) + *You entered d.., \n*
.text:0000004C
ja1r
$a0, ($LC2 s 0xFFFF)  *You entered ld...\n* : brach delay slot
-text:00000050
: function epilogue:
La
.text:00000054
1
$ra, 0x28+var_4($sp)
: set return value to 0:
.text:00000058
move
$v0, Szero
: return:
.text:0000005C
jr
addiu
$sp, 0x28 : branch 
$ra
. text:00000060
delay slot
7.2
全局变量
在本章前文的那个程序里，如果x不是局部变量而是全局变量，那会是什么情况？一旦x变量成为了
---
## Page 84
66
逆向工程权威指南（上册）
全局变量，函数内部的指令、以及整个程序中的任何部分都可以访间到它。虽然优秀的程序不应当使用全
局变量，但是我们应当了解它的技术特点。
include Cstdio.h
//now x is global variable
Int ×;
int main ()
printf ("Enter X:\n*);
scanf (*ld*, 5x);
printf (*You entered fd...\n*, x)=
return 0;
1:
7.2.1MSVC: x86
_DATA
SEGMENT
COMM
_x:DWORD
$SG2456
Enter X: ′, 0aH, 00H
$SG2457
$SG2458
DB
'd′,00H
DB
*You entered id... ', Oal, 0OH
PUBLIC
_DATA
ENDS
_nain
EXTRN
_scanf : PROC
N6IX3
:Function coepile flags: /0dtp
printf:PROC
X34"
SEGMENT
_nain
PROC
push
mov
ebp
Push
ebp,esp
OFFSET $SG2456
ca11
add
_printf
push
esp, 4
qend
OFFSET _x
ca11
_scanf
add
esp, 8
mov
x" 81d 08080 *xe9
push
push
eax
OFFSET $SG2458
ca11
_printf
xor
ppe
esp, 8
po
eax, eax
ebp
main
ENDP
0
_TEXT
ENDS
与前文不同的是，x变量的存储空间是数据段（_data域），反而没有使用数据栈。因此整个程序的所
有指令都可以直接访问全局变量x。在可执行文件中，未经初始化的变量不会占用任何存储空间。
在某些指令在变量访问这种未初始化的全局变量的时候，操作系统会分配一段数值为零的地址给它。
这是操作系统VM（虚拟内存）的管理模式所决定的。
如果对上述源代码稍做改动，加上变量初始化的指令：
int x=10;//设置默认值
那么对应的代码会变为：
---
## Page 85
第7章scanf）
67
_DATASEGMENT
X
DD
0aHl
上述指令将初始化x。其中DD代表DWORD，表示x是32位的数据。
若在IDA里打开对x进行初始化的可执行文件，我们将会看到数据段的开头部分看到初始化变量x。
紧随其后的空间用于存储本例中的字符串。
用IDA打开7.2节里那个不初始化变量x的例子，那么将会看到下述内容。
.data:0040FA80 _x
dd 7
 DATA XREF: _nain+10
data:0040FA80
7_main+22
data:0040FA84
dvord_40FA84
dd ?
1 DATA XREF: _nemset+1S
.data:0040FA84
unknown_1ibnane_1+28
data:0040FA88 dvord_40FA88
dd ?
: DATA XREF: _sbh_find_b1ock+5
.data: 0040FA88
data:0040FA8C
mwdT GIOAT : :
_abh_free_block+2BC
data:0040FA8C 1pMem
dd ?
7 DATA XREF: sbh_find_block+B
.data:0040FA8C
_sbh_free_b1ock+2CA
. data: 0040FA90
dvozd_40FA90
dd ?
2 DATA XREF: _V6_BeapA1loc+13
 data: 0040FA90
__cal1oc_inp1+72
.data:0040FA94 dvord_40FA94
dd ?
 DATA XREF: _sbh_free_b1ock+2FE
这段代码里有很多带“？”标记的变量，这是未初始化的x变量的标记。这意味着在程序加载到内存
之后，操作系统将为这些变量分配空间、并填入数字零”。但是在可执行文件里，这些未初始化的变量不占
用内存空间。为了方便使用巨型数组之类的大型数据，人们刻意做了这种设定。
7.2.2 MSVC:x86+OllyDbg
我们可以在OllyDbg观察程序的数据段里的变量。如图7.5所示。
P, 11Ne 9a w+ "
图7.5OllyDbug:运行 scanf函数之后的状态
全局变量x出现在数据段里。在调试器执行完PUSH指令之后，变量x的指针推即被推送入栈，我们
就可在栈里右键单击x的地址并选择“Follow in dump”，并在左侧的内存窗口观察它。
在控制台输入123之后，栈里的数据将会变成0x7B（左下窗口的高亮部分）。
您有没有想过，为什么第一个字节是0x7B？若考虑到数权，此处应该是0000007B。可见，这是x86系统
里低位优先的“小端字节序/LITTLE-ENDIAN”的典型特征。小端字节序属于“字节（顺）序/endianness”的一
种，它的第一个字节是数权最低的字节，数权最高的字节会排列在最后。本书将在第31章将详细介绍字节序。
此后，EAX寄存器将存储这个地址里的32位值，并将之传递给printfO函数。
本例中，变量x的内存地址是0x00C53394.
在OllyDbg里，按下Alt+M组合键可查看这个进程的内存映射（process memory map）。如图7.6所示，
这个地址位于程序 PE段的.data域。
①请参阅 IS007, 6.7.8 节,
---
## Page 86
68
逆向工程权威指南（上册）
图7.6OllyDbg:进程内存映射
7.2.3 GCC:x86
在汇编指令层面，Limux与Windows 的编译结果区别不大。它们的区别主要体现在字段（segament）名称和
字段属性上：LinuxGCC生成的未初始化变量会出现在_bss段，对应的ELF文件描述了这个字段数据的属性。
 Segment type: Uninitialized
; Segment pernissions: Bead/krite
如果给这个变量分配了初始值，比如说10，那么这个变量将会出现在_data段，并且具有下述属性。
 Segment type: Pure data
1 Segment permissions: Read/Write
7.2.4 MSVC: x64
指令清单7.6MSVC2012x64
COMM
_DATA
SBGMENT
$SG2924
X:DWORD
DB
Enter X: *, OaH, 00H
$SG2925
$SG2926
DB
DB
You entered sd... *, CaH, 00B
'd',008
_DATA
ENDS
_TEXT
SEGMENT
$183:
main
PROC
sub
rsp, 40
1ea
ca11
lea
printf
rdx, OFFSET PLAT:x
Lea
ca11
rCx, OFFSET FLAT:SSG2925 ;*1d*
scanf
nov
rcx, OFFsET FLAT:$SG2926 ; *You entered id...
edx, DWORD PTR x
ca11
lea
printf
return 0
xor
eax,
eax
add
ret
rsp,40
main
ENDP
-TEXr
ENDS
---
## Page 87
第7章scanf)
69
这段x64代码与x86的代码没有明显区别。请注意变量x的传递过程：scanf0函数通过LEA指令获取
x变量的指针；而printfO函数则是通过MOV指令获取x变量的值。“DWORDPTR”与机器码无关，它是
汇编语言的一部分，用来声明后面的变量为32位的值，以使MOV指令能够正确处理数据类型。
7.2.5ARM: Optimizing Keil 6/2013 (Thumb 模式)
text:000o0000: Segment type:
Pure code
.text:00000000
AREA .text, cocE
.text:0000000 main
.text:00000000
.text:00000002
PUSH
(R4, LR)
ADR
R0, aEntetX
: *Enter X:\n*
,text: 00000
BL
LDR
R1,x
__2printf
.text:00000008
.text:0000000A
ADR
B0, aD
; *ld*
.text:0000000c
BL
B0,
_0scanf
.text:00000010
.text:00000012
LDR
LDR
R1,[R0]
=K
-text:000014
ADR
R0, aYouEnteredD
: *You entered ld...\n*
.text:00000016
BL
MOVS
_2printf
.text:0000001c
.text:0000001A
POP
R0,#0
(R4, PC)
.text:00000020 aEnterX
DCB
*Enter X:*, 0xA, 0
.text:0000002A
DCB 0
: DATA XREF: maLn+2
.text :00000028
DCB 0
.text:0000002C off_2C
DCD x
: DATA XREF: main+8
.text:0000002C
.text:00000030 aD
0′P4。 800
main+10
CC0000001X0
DCB 0
: DATA XREF: main+A
text:00000034 aTouEnteredD_
DCB *You entered id...*, OxA, 0
: DATA XREF: main+14
-text:00000047
DCB 0
text:00000047:.text
.text:00000047
ends
.data:00000048 :Seqment type:
Pure data
.data:00000048
AREA ,data, DATA
. data:00000048
 ORG 0x48
.data:00000048 x
-data: 00000048
DCD 0xA
EXPORT x
J DATA XREF: main+8
.data:00000048 : .data
-data: 00000048
ends
: main+10
现在代码段（text），但是x变量却出现于数据段（.data）？原因在于x是变量。顾名思义，变量的值可变、属于
一种频繁变化的可变数据。在ARM系统里，代码段的程序代码可存储于处理器的 ROM（Rcad-Only Memory），
而可变变量存储于RAM（Random-Access Memory）中。与x86/x64系统相比，ARM系统的内存寻址能力很有限，
可用内存往往十分紧张。在ARM系统存在ROM的情况下，使用RAM内存存储常量则明显是一种浪费。此外，
ARM系统在启动之后RAM里的值都是随机数：想要使用RAM存储常量，还要单独进行初始化赋值才行。
在后续代码段的指令中，程序给变量x分配了个指针（即off_2c）。此后，程序都是通过这个指针对x
变量进行的操作。不这样做的话变量x可能被分配到距离程序代码段很远的内存空间，其偏移量有可能超
过有关寻址指令的寻址能力。Thumb模式下，ARM系统的LDR指令只能够使用周边1020字节之内的变
量：即使在32位ARM模式下，它也只能调用偏移量在±4095字节之内的变量。这个范围就是变量地址（与
调用指令之间）的偏移量的局限。为了保证它的地址离代码段足够近、能被代码调用，就需要就近分配x
变量的地址。由于在链接阶段（linker）x的地址可能会被随意分配，其至可能被分配到外部内存的地址，
所以编译器必须在前期阶段就把x的地址分配到就近的区域之内。
另外，如果声明某变量为常量/const，Keil编译程序会把这个变量分配到.constdata字段。这可能是为
---
## Page 88