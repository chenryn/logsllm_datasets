CWD (change working directory) and PORT (specify the
port number that the client will use for the data connection).
After this control connection is built between the client and
the server, the client sends a PORT command with a value
y, where y is an available port on the client, to the server
via this control connection. After this PORT command is
received, the server uses its well-known port 20 to connect
back to the port y of the client. This connection, between
the client’s port y and the server’s port 20, is called the data
connection. Note that the control connection is initiated by
the FTP client and the data connection is initiated by the
FTP server. This dual-connection feature of the FTP proto-
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Michigan State University. Downloaded on October 21, 2009 at 22:54 from IEEE Xplore.  Restrictions apply. 
Stateful Section:
(cid:1) ∈ {21}
R1 : I ∈ {0} ∧ SP ∈ {21} ∧ P ∈ {tcp} ∧ S = D(cid:1) ∧ D = S(cid:1) ∧ DP = SP
R2 : I ∈ {0} ∧ SP ∈ {20} ∧ P ∈ {tcp} ∧ S = D(cid:1) ∧ D = S(cid:1) ∧ T (cid:1) = 1 ∧ DP = A(cid:1) ∧ DP
R3 : I ∈ {1} ∧ DP ∈ {20} ∧ P ∈ {tcp} ∧ S = D(cid:1) ∧ D = S(cid:1) ∧ SP = DP
(cid:1) ∈ {20}
Stateless Section:
r1 : I ∈ {1} ∧ SP ∈ all ∧ DP ∈ {21} ∧ P ∈ {tcp} ∧ tag ∈ all → accept; insert
r2 : I ∈ {1} ∧ SP ∈ all ∧ DP ∈ {20} ∧ P ∈ {tcp} ∧ tag ∈ {1}→ accept
∧ P ∈ all
r3 : I ∈ {1} ∧ SP ∈ all ∧ DP ∈ all
∧ tag ∈ all → discard
r4 : I ∈ {0} ∧ SP ∈ {20}∧ DP ∈ all
∧ P ∈ {tcp} ∧ tag ∈ {1}→ accept; insert
r5 : I ∈ {0} ∧ SP ∈ {21}∧ DP ∈ all
∧ P ∈ {tcp} ∧ tag ∈ {1}→ accept
∧ tag ∈ all → discard
∧ P ∈ all
r6 : I ∈ {0} ∧ SP ∈ all ∧ DP ∈ all
(cid:1) ∧ DP
(cid:1) ∧ SP
→ tag := 1
(cid:1) ∈ {21}→ tag := 1
→ tag := 1
Figure 5. Tracking the FTP protocol
col is illustrated in Figure 6.
iMac
Figure 6. FTP Ptotocol
This ﬁrewall is speciﬁed in Figure 5. In this example, we
assume that each packet has eight ﬁelds. Six of them have
been discussed earlier: I (interface), S (source IP address),
D (destination IP address), P (protocol type), SP (source
port) and DP (destination port). The remaining two are as
follows:
name meaning
T
A
Application Type
Application Data
domain
[0, 1]
[0, 216)
For a packet, if the value of its ﬁeld T is 1, then the value of
its ﬁeld A is the port number of a port command; otherwise
ﬁeld A contains another FTP control command.
In this example, the ﬁrewall only possibly accepts the
following four types of packets: outgoing TCP packets to
port 21, incoming TCP packets from port 21, incoming TCP
packets from port 20, and outgoing TCP packets to port 20.
Next we discuss each of these four types of packets.
1. Outgoing TCP packets to port 21: Any packet p of this
type is accepted and inserted into the state. See rule r1
in Figure 5.
2. Incoming TCP packets from port 21: A packet p of
(cid:1) in the
(cid:1)’s desti-
(cid:1)’s
this type is accepted iff there exists a packet p
state such that p’s source IP address equals p
nation IP address, p’s destination IP address equals p
source IP address, p’s destination port number equals
(cid:1)’s source port number, and p
(cid:1)’s destination port num-
p
ber is 21. See the three rules r1, R1, and r5 in Figure
5.
3. Incoming TCP packets from port 20: A packet p of
(cid:1) in the
this type is accepted iff there exists a packet p
(cid:1)’s des-
state such that p’s source IP address equals p
tination IP address, p’s destination IP address equals
(cid:1)’s destination port number is
(cid:1)’s source IP address, p
p
(cid:1) contains a PORT command and p’s destination
21, p
port equals the port number in this PORT command of
(cid:1). See the three rules r1, R2, and r4 in Figure 5.
p
4. Outgoing TCP packets to port 20: A packet p of this
(cid:1) in the state
(cid:1)’s destina-
(cid:1)’s
(cid:1)’s
(cid:1)’s source port number
type is accepted iff there exists a packet p
such that p’s source IP address equals p
tion IP address, p’s destination IP address equals p
source IP address, p’s source port number equals p
destination port number, and p
is 20. See the three rules r4, R3, and r2 in Figure 5.
4 Removing Packets from Firewall State
After a packet is inserted into the state of a ﬁrewall, the
packet should be removed when it is no longer needed, oth-
erwise security could be breached. We show this point by
the ﬁrewall example in Figure 2 that tracks the Ping proto-
col. Suppose a local host named A sends a ping packet to
a remote host named B. According to the speciﬁcation of
this ﬁrewall in Figure 2, this ping packet is inserted into the
state of this ﬁrewall. When the corresponding pong packet
comes back from host B, it is accepted by the ﬁrewall be-
cause of the stored ping packet, and additionally this stored
ping packet should be removed from the state of the ﬁre-
wall. Otherwise, an attacker could replay the pong packet
for an unlimited number of times and each of the replayed
pong packets would be incorrectly allowed to proceed to the
victim host A.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Michigan State University. Downloaded on October 21, 2009 at 22:54 from IEEE Xplore.  Restrictions apply. 
6
Stateful Section:
R1 : I ∈ {0} ∧ P ∈ {icmp} ∧ T ∈ {pong} ∧ S = D(cid:1) ∧ D = S(cid:1) ∧ ID = ID
Stateless Section:
r1 : I ∈ {1} ∧ P ∈ {icmp}∧T ∈ {ping}∧tag ∈ all → accept; insert(10)
∧tag ∈ all → accept
r2 : I ∈ {1} ∧ P ∈ all
r3 : I ∈ {0} ∧ P ∈ {icmp}∧T ∈ {pong}∧tag ∈ {1}→ accept; remove
r4 : I ∈ {0} ∧ P ∈ {icmp}∧T ∈ {pong}∧tag ∈ {0}→ discard
r5 : I ∈ {0} ∧ P ∈ all
∧tag ∈ all → accept
∧T ∈ all
∧T ∈ all
(cid:1) ∧ SN = SN
(cid:1) → tag := 1
Figure 7. Tracking the Ping protocol (with packets removal)
A new command, “remove”,
is used to remove the
packets that are no longer needed from the state of a
ﬁrewall. Therefore,
there are two more possible deci-
sions that a stateless rule may use: “accept; remove” and
“accept; insert; remove”, in addition to the three decisions
(namely “accept”, “accept; insert”, and “discard”) that we
have seen earlier. The meaning of a stateless rule with de-
cision “accept; remove” is as follows. Given a packet p,
if p matches this rule (but p does not match any stateless
rule listed before this rule), then p is accepted. Moreover,
(cid:1) such that p satisﬁes the predi-
if the state has a packet p
(cid:1), then
cate of the ﬁrst stateful rule that p matches using p
(cid:1) is removed from the state. Similarly for the mean-
packet p
ing of a rule with decision “accept; insert; remove”. Con-
sider the example of the ﬁrewall in Figure 2 that tracks the
Ping protocol. When a ping packet is sent from a local host
to a remote host, the ping packet is inserted into the state
of the ﬁrewall by the stateless rule r1 : I ∈ {1} ∧ P ∈
{icmp}∧T ∈ {ping}∧tag ∈ all → accept; insert. When
the corresponding pong packet comes back from the remote
host, it is accepted by the stateless rule r3 and it should also
trigger the removal of the stored ping packet. Therefore, a
“remove” command should be added to rule r3. In other
words, rule r3 should be I ∈ {0} ∧ P ∈ {icmp} ∧ T ∈
{pong} ∧ tag ∈ {1} → accept; remove.
Usually the packet that initiates the “conversation” be-
tween two hosts is stored in the state of a ﬁrewall, and the
packet that terminates the “conversation” triggers the re-
moval of the stored packet. Examples of the packets that
can initiate a conversation are ping packets and TCP SYN
packets. Examples of the packets that can terminate a con-
versation are pong packets and TCP FIN packets.
To remove the packets that are no longer needed in the
state of a ﬁrewall, we cannot only rely on some packets to
trigger the removal for two reasons. First, these triggering
packets may get lost on their way. Second, the processes
that are supposed to send triggering packets may abnor-
mally terminate before sending out the triggering packets.
In either case, the packets that should be removed still re-
main in the state. To deal with these two cases, when a
packet is inserted into the state of a ﬁrewall, it is assigned a
TTL (Time To Live) value. The TTL value of every packet
in the state decreases as time goes by. When the TTL value
of a packet expires, the packet is automatically removed
from the state.
Different packets may need different TTL values. There-
fore, the “insert” command has a parameter t, which is
the TTL value for the packet to be inserted into the state
of a ﬁrewall. The meaning of a stateless rule with decision
“accept; insert(t)” is as follows. Given a packet p such that
p matches this rule (but p does not match any stateless rule
listed before this rule), provided that p is not an element of
the state, then p is inserted into the state with TTL value t.
On the other hand, if p already exists in the state, then the
TTL value of p in the state is reassigned the value t.
Figure 7 shows the complete ﬁrewall for tracking the
Ping protocol after we incorporate the TTL extension to the
“insert” command in rule r1 and add the “remove” com-
mand to rule r3.
In this example, the TTL value in the
“insert” command is 10 seconds.
5 Firewall States
Recall that each ﬁrewall has a variable set named the
state of the ﬁrewall. Initially, the state of a ﬁrewall is empty.
The transition between two states of a ﬁrewall is illustrated
in Figure 8.
discard a packet
current firewall state
accept a packet with
insertion or removal
next firewall state
accept a packet without
insertion or removal
Figure 8. Firewall state transition
A history of
is
S.1, p.1, S.2, p.2,··· , S.n such that
conditions hold.
a ﬁrewall
a ﬁnite
sequence
the following three
i. Each S.i is a state of the ﬁrewall. Note that S.1 is the
initial state of the ﬁrewall, which is an empty set.
7
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Michigan State University. Downloaded on October 21, 2009 at 22:54 from IEEE Xplore.  Restrictions apply. 
ii. Each p.i is a packet.
iii. For every i (1 ≤ i < n), if the ﬁrewall is in state S.i
and receives packet p.i, then the ﬁrewall accepts p.i
and the state of the ﬁrewall becomes S.(i + 1).
Note that in a ﬁrewall history, S.1, p.1, S.2, p.2,··· , S.n,
for every i (1 ≤ i < n), we have
if in state S.i, p.i is accepted, and
p.i is inserted into the state or p.i
triggers the removal of an packet;
S.i (cid:7)= S.(i + 1)
S.i = S.(i + 1) otherwise
A state of a ﬁrewall is called a reachable state iff the
state is in a history of the ﬁrewall.
5.1 Truly Stateful and Truly Stateless Firewalls
Before we deﬁne truly stateful ﬁrewalls, we ﬁrst deﬁne
two important concepts associated with each ﬁrewall: the
accepted set and the acceptable set.
A packet is called an accepted packet of a ﬁrewall iff the
packet can be accepted in every reachable state of the ﬁre-
wall. The set of all accepted packets of a ﬁrewall is called
the accepted set of the ﬁrewall. For a ﬁrewall f, we use f.a
to denote its accepted set.
A packet is called an acceptable packet of a ﬁrewall iff
the packet can be accepted in some (possibly every) reach-
able state of the ﬁrewall. The set of all acceptable packets
of a ﬁrewall is called the acceptable set of the ﬁrewall. For
a ﬁrewall f, we use f.b to denote its acceptable set.
Note that a stateless ﬁrewall can also be speciﬁed using
our model. When we specify a stateless ﬁrewall, we leave
the stateful section empty and specify no “insert” command
in any rule in the stateless section. In this case, the state
of the ﬁrewall remains empty and the ﬁrewall is therefore
stateless. For a stateless ﬁrewall f, we use f.a to denote the
set of all accepted packets of f and use f.b to denote the set
of all acceptable packets of f. From the deﬁnition of state-
ful ﬁrewalls and stateless ﬁrewalls, we have the following
theorem:
Theorem 1 Let f be a ﬁrewall.
i. f.a is a subset of f.b (f.a ⊆ f.b)