postgres@digoal-> pg_ctl start -D /data01/pg_root_1922  
server starting  
postgres@digoal->  0LOG:  00000: redirecting log output to logging collector process  
 0HINT:  Future log output will appear in directory "pg_log".  
 0LOCATION:  SysLogger_Start, syslogger.c:645  
postgres@digoal-> psql  
psql (9.4.4)  
Type "help" for help.  
postgres=# select count(*) from customer_reviews ;  
 count   
-------  
 17729  
(1 row)  
```  
修复前，在所有work节点，对应的database中创建pg_shard extension，因为需要用到一个修复函数。  
```  
psql -h 127.0.0.1 -p 1922 -c "create extension pg_shard;"  
psql -h 127.0.0.1 -p 1923 -c "create extension pg_shard;"  
psql -h 127.0.0.1 -p 1924 -c "create extension pg_shard;"  
psql -h 127.0.0.1 -p 1925 -c "create extension pg_shard;"  
```  
修复，连接到主节点，执行：  
```  
postgres=# select t1.shard_id,t1.node_name,t1.node_port,t2.node_name,t2.node_port from pgs_distribution_metadata.shard_placement t1 , pgs_distribution_metadata.shard_placement t2 where t1.shard_id=t2.shard_id and (t1.node_name||t1.node_port) <> (t2.node_name||t2.node_port) and t1.shard_state=3;  
 shard_id | node_name | node_port | node_name | node_port   
----------+-----------+-----------+-----------+-----------  
    10003 | localhost |      1922 | localhost |      1925  
    10004 | localhost |      1922 | localhost |      1923  
    10008 | localhost |      1922 | localhost |      1923  
    10011 | localhost |      1922 | localhost |      1925  
    10012 | localhost |      1922 | localhost |      1923  
    10015 | localhost |      1922 | localhost |      1925  
(6 rows)  
```  
用这个函数来修复，其实就是拷贝数据。源拷贝到目标。  
```  
public | master_copy_shard_placement     | void             | shard_id bigint, source_node_name text, source_node_port integer, target_node_name text, target_node_port integer    
```  
参数。千万不要搞反了。（pg_shard有保护措施，搞反了会报错）  
```  
postgres=# select master_copy_shard_placement(t1.shard_id,t1.node_name,t1.node_port,t2.node_name,t2.node_port) from pgs_distribution_metadata.shard_placement t1 , pgs_distribution_metadata.shard_placement t2 where t1.shard_id=t2.shard_id and (t1.node_name||t1.node_port) <> (t2.node_name||t2.node_port) and t1.shard_state=3;  
ERROR:  22023: source placement must be in finalized state  
LOCATION:  master_copy_shard_placement, repair_shards.c:109  
```  
修复：  
```  
postgres=# select master_copy_shard_placement(t1.shard_id,t2.node_name,t2.node_port,t1.node_name,t1.node_port) from pgs_distribution_metadata.shard_placement t1 , pgs_distribution_metadata.shard_placement t2 where t1.shard_id=t2.shard_id and (t1.node_name||t1.node_port) <> (t2.node_name||t2.node_port) and t1.shard_state=3;  
 master_copy_shard_placement   
-----------------------------  
(8 rows)  
```  
拷贝完成后，状态变为1了。  
```  
postgres=# select * from pgs_distribution_metadata.shard_placement;  
 id | shard_id | shard_state | node_name | node_port   
----+----------+-------------+-----------+-----------  
  2 |    10000 |           1 | localhost |      1923  
  3 |    10001 |           1 | localhost |      1923  
  4 |    10001 |           1 | localhost |      1924  
  5 |    10002 |           1 | localhost |      1924  
  6 |    10002 |           1 | localhost |      1925  
  7 |    10003 |           1 | localhost |      1925  
 10 |    10004 |           1 | localhost |      1923  
 11 |    10005 |           1 | localhost |      1923  
 12 |    10005 |           1 | localhost |      1924  
 13 |    10006 |           1 | localhost |      1924  
 14 |    10006 |           1 | localhost |      1925  
 15 |    10007 |           1 | localhost |      1925  
 18 |    10008 |           1 | localhost |      1923  
 19 |    10009 |           1 | localhost |      1923  
 20 |    10009 |           1 | localhost |      1924  
 21 |    10010 |           1 | localhost |      1924  
 22 |    10010 |           1 | localhost |      1925  
 23 |    10011 |           1 | localhost |      1925  
 26 |    10012 |           1 | localhost |      1923  
 27 |    10013 |           1 | localhost |      1923  
 28 |    10013 |           1 | localhost |      1924  
 29 |    10014 |           1 | localhost |      1924  
 30 |    10014 |           1 | localhost |      1925  
 31 |    10015 |           1 | localhost |      1925  
  1 |    10000 |           1 | localhost |      1922  
 16 |    10007 |           1 | localhost |      1922  
  8 |    10003 |           1 | localhost |      1922  
  9 |    10004 |           1 | localhost |      1922  
 17 |    10008 |           1 | localhost |      1922  
 24 |    10011 |           1 | localhost |      1922  
 25 |    10012 |           1 | localhost |      1922  
 32 |    10015 |           1 | localhost |      1922  
(32 rows)  
```  
分片数据修复后，查询结果和之前一致。在修复前，pg_shard根据状态过滤了不健康的副本的查询。因此产生的结果是一致的。  
```  
postgres=# select count(*) from customer_reviews;  
 count   
-------  
 17729  
(1 row)  
```  
## 参考  
1\. https://github.com/citusdata/pg_shard/tree/v1.2.2  
2\. https://www.citusdata.com/citus-products/pg-shard/pg-shard-quick-start-guide  
中期TODO，不支持分布式JOIN，不支持分布式事务，不支持非分布列的唯一约束，FK约束。  
短期TODO，不支持表结构修改，不支持删除表，不支持子查询。  
Limitations  
pg_shard is intentionally limited in scope during its first release, but is fully functional within that scope. We classify pg_shard's current limitations into two groups. In one group, we have features that we don't intend to support in the medium term due to architectural decisions we made:  
Transactional semantics for queries that span across multiple shards - For example, you're a financial institution and you sharded your data based on customer_id. You'd now like to withdraw money from one customer's account and debit it to another one's account, in a single transaction block.  
Unique constraints on columns other than the partition key, or foreign key constraints.  
Distributed JOINs also aren't supported in pg_shard - If you'd like to run complex analytic queries, please consider upgrading to CitusDB.  
Another group of limitations are shorter-term but we're calling them out here to be clear about unsupported features:  
Table alterations are not supported: customers who do need table alterations accomplish them by using a script that propagates such changes to all worker nodes.  
DROP TABLE does not have any special semantics when used on a distributed table. An upcoming release will add a shard cleanup command to aid in removing shard objects from worker nodes.  
Queries such as INSERT INTO foo SELECT bar, baz FROM qux are not supported.  
Besides these limitations, we have a list of features that we're looking to add. Instead of prioritizing this list ourselves, we decided to keep an open discussion on GitHub issues and hear what you have to say. So, if you have a favorite feature missing from pg_shard, please do get in touch!  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")