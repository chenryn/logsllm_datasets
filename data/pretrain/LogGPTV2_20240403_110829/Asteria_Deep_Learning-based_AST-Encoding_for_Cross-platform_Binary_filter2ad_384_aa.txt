title:Asteria: Deep Learning-based AST-Encoding for Cross-platform Binary
Code Similarity Detection
author:Shouguo Yang and
Long Cheng and
Yicheng Zeng and
Zhe Lang and
Hongsong Zhu and
Zhiqiang Shi
Asteria: Deep Learning-based AST-Encoding for
Cross-platform Binary Code Similarity Detection
Shouguo Yang∗†, Long Cheng‡, Yicheng Zeng∗†, Zhe Lang∗†, Hongsong Zhu∗†, Zhiqiang Shi∗†
∗Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China
†School of Cyber Security, University of Chinese Academy of Sciences, Beijing China
,
‡School of Computing, Clemson University, USA
{yangshouguo, zengyicheng, langzhe, zhuhongsong, shizhiqiang}@iie.ac.cn
PI:EMAIL
1
2
0
2
g
u
A
3
1
]
R
C
.
s
c
[
1
v
2
8
0
6
0
.
8
0
1
2
:
v
i
X
r
a
Abstract—Binary code similarity detection is a fundamental
technique for many security applications such as vulnerability
search, patch analysis, and malware detection. There is an
increasing need to detect similar code for vulnerability search
across architectures with the increase of critical vulnerabilities
in IoT devices. The variety of IoT hardware architectures and
software platforms requires to capture semantic equivalence of
code fragments in the similarity detection. However, existing ap-
proaches are insufﬁcient in capturing the semantic similarity. We
notice that the abstract syntax tree (AST) of a function contains
rich semantic information. Inspired by successful applications of
natural language processing technologies in sentence semantic
understanding, we propose a deep learning-based AST-encoding
method, named ASTERIA, to measure the semantic equivalence
of functions in different platforms. Our method leverages the
Tree-LSTM network to learn the semantic representation of a
function from its AST. Then the similarity detection can be
conducted efﬁciently and accurately by measuring the similarity
between two representation vectors. We have implemented an
open-source prototype of ASTERIA. The Tree-LSTM model is
trained on a dataset with 1,022,616 function pairs and evaluated
on a dataset with 95,078 function pairs. Evaluation results show
that our method outperforms the AST-based tool Diaphora and
the-state-of-art method Gemini by large margins with respect
to the binary similarity detection. And our method is several
orders of magnitude faster than Diaphora and Gemini for the
similarity calculation. In the application of vulnerability search,
our tool successfully identiﬁed 75 vulnerable functions in 5,979
IoT ﬁrmware images.
I. INTRODUCTION
Over recent years, we have witnessed the rapid development
and deployment of the Internet of Things (IoT). However, the
pressure of time to market of IoT development increasingly
raises security and privacy concerns [61]. Firmware of IoT
devices could contain vulnerabilities, which have already
caused destructive attacks [42]. IoT ﬁrmware security analysis
is considered an effective approach to ensuring the security of
IoT devices [26].
Due to the lack of source code, analyzing binary code has
naturally become an important means of ﬁrmware security
analysis. On the other hand, code is often reused to facilitate
fast software development. Unfortunately,
the reused code
such as a third-party library could cause the same vulnerability
to spread among different vendors and different versions of
ﬁrmware [27]. Moreover,
information such as
function names is generally stripped during the ﬁrmware
the symbol
compilation. Finding such vulnerable functions simply based
on function names is impossible. To this end, the binary code
similarity detection (BCSD) technique is applied to quickly
ﬁnd such homologous vulnerabilities in a large amount of
ﬁrmware [28]. The BCSD technique focuses on determin-
ing the similarity between two binary code pieces. As to
the vulnerability search, the BCSD focuses on ﬁnding other
homologous vulnerable functions given a known vulnerability
function. In addition to the vulnerability search, BCSD has
been widely used for other security applications such as code
plagiarism detection [19], [56], [49], malware detection [45],
[46], and patch analysis [39], [60], [33]. Despite many existing
research efforts, the diversity of IoT hardware architectures
and software platforms poses challenges to BCSD for IoT
ﬁrmware. There are many different instruction set architectures
(ISA) such as ARM, PowerPC, MIPS, and X86 for IoT
ﬁrmware. The instructions are different and the rules, such
as the calling convention and the stack layout, also differ
across different ISAs [52]. It is non-trivial to ﬁnd homologous
vulnerable functions across platforms.
BCSD can be generally classiﬁed into two categories: i)
dynamic analysis-based methods and ii) static analysis-based
methods. The methods based on dynamic analysis capture the
runtime behavior as function features by running a program,
where the function features can be I/O pairs of function [52]
or system calls during the program execution [34], etc. But
this kind of method is not scalable for large-scale ﬁrmware
analysis since running ﬁrmware requires speciﬁc devices and
emulating ﬁrmware is also difﬁcult [68], [40], [23]. The
methods based on static analysis mainly extract function
features from assembly code. An intuitive way is to calculate
the edit distance between assembly code sequences [29]. But
this method cannot be directly applied in cross-architecture
BCSD since instructions are different across architectures.
Architecture-independent statistical features of functions are
proposed for the similarity detection [36]. These features
are less affected across architectures such as the number of
function calls, strings, and constants. Furthermore, the control
ﬂow graph (CFG) at the assembly code level is utilized by
conducting a graph isomorphism comparison for improving
the similarity detection [36], [38]. Based on statistical features
and CFG, Gemini [62] leverages the graph embedding network
to encode functions to vectors for similarity detection. Static
analysis-based methods are faster and more scalable for large-
scale ﬁrmware analysis but often produce false positives
due to the lack of semantic information. Since homologous
vulnerable functions in different architectures usually share the
same semantics, it is desirable that a cross-platform BCSD
can capture the function semantic information in a scalable
manner.
• We present a new method named ASTERIA, to encode
ASTs at binary level with the Tree-LSTM network into
semantic representation vectors for BCSD. To facilitate
the model training, we utilize the Siamese Network to
integrate two identical Tree-LSTM model for AST simi-
larity detection. Furthermore, we introduce an additional
similarity calibration scheme to improve the similarity
calculation accuracy.
Abstract syntax tree (AST) is a tree representation of code,
which is usually used in semantic analysis of source code
compilation [47], and preserves well-deﬁned statement com-
ponents, explicit order of statements, and the execution logic.
AST contains rich semantic information and is easy to generate
by decompiling the function during binary analysis. Therefore,
the semantics contained in an AST can be potentially used for
identifying homologous functions across architectures. Con-
sidering the similarities between the natural language and the
assembly language such as words and instructions, sentences
and basic blocks, and the successful application of natural
language processing (NLP) technologies in programming lan-
guage analysis [53], in this work, we propose ASTERIA, a
deep learning-based AST-encoding method for cross-platform
function similarity detection.
Tree-LSTM network has been shown to provide a better
performance in predicting the semantic relatedness of two
sentences than the plain LSTM [58], [59]. We utilize the Tree-
LSTM network to encode ASTs into semantic representation
vectors. Given a binary program, we ﬁrst extract ASTs by
decompiling its functions. Then we preprocess the ASTs and
encode them into representation vectors by Tree-LSTM for
semantic representation. After the encoding, we adopt the
Siamese Network [24] to integrate two Tree-LSTM networks
for calculating the similarity between the encoding vectors
as the AST similarity. Then, we further calibrate the AST
similarity with function call relationships to calculate the ﬁnal
function similarity. We construct a large number of cross-
architecture AST pairs to train the Tree-LSTM network so
that it can recognize the semantic equivalent AST pairs. We
conduct a series of evaluations, and the results show that
our method outperforms the baseline approaches. In terms
of the similarity detection accuracy, our method ASTERIA
outperforms Diaphora [3] by 77% and Gemini by 4.4%.
Remarkably, our method takes an average of 8×10−9 seconds
for the similarity calculation of a pair of AST encodings,
which is 104 times faster than Gemini and 106 times faster
than Diaphora.
Contribution. The main contributions of this paper are as
follows:
• We implement and open-source a prototype of ASTERIA1.
For the model training, we build a large-scale cross-
platform dataset containing 49,725 binary ﬁles by cross-
compiling 260 open-source software. We compare our
model against the state-of-the-art approach Gemini [62]
and an AST-based method Diaphora [3]. The evaluation
results show that our ASTERIA outperforms Diaphora and
Gemini.
• In the application of IoT vulnerability search, we collect
5,979 ﬁrmware images and 7 vulnerable functions from
CVE database [2]. we perform a similarity detection
between ﬁrmware functions and vulnerable functions.
ASTERIA successfully identiﬁed 75 vulnerable functions
in IoT ﬁrmware images. From the analysis of the search
results, our method can efﬁciently and accurately capture
the semantic equivalence of code fragments for the cross-
platform BCSD.
II. PRELIMINARY
In this section, we ﬁrst brieﬂy describe the AST structure.
Then we compare the architectural stability of AST and CFG
across different platforms. Next we introduce the Tree-LSTM
network adopted in our method. Finally, we introduce the
problem deﬁnition of function similarity calculation.
Fig. 1: Source code of function histsizesetfn and the corre-
sponding decompiled AST of x86 architecture.
A. Abstract Syntax Tree
An AST is a tree representation of the abstract syntac-
tic structure of code in the compilation and decompilation
process. Different subtrees in an AST correspond to dif-
ferent code scopes in the source code. Figure 1 shows a
decompiled AST corresponding to the source code of function
histsizesetfn in zsh v5.6.2 in the left. The zsh is
a popular shell software designed for interactive use, and the
function histsizesetfn sets the value of a parameter. The
lines connecting the source code and AST in Figure 1 show
that a node in the AST corresponds to an expression or a
statement in the source code. A variable or a constant value is
represented by a leaf node in AST. We group nodes in an AST
into two categories: i) statement nodes and ii) expression nodes
according to their functionalities shown in Table I. Statement
nodes control the function execution ﬂow while expression
nodes perform various calculations. Statement nodes include
if, for, while, return, break and so on. Expression nodes include
common arithmetic operations and bit operations.
1https://github.com/Asteria-BCSD/Asteria
blockifleblockblockvarnumasgasgvarnumvarvarreturncallnumvoidhistsizesetfn(UNUSED(p), long v){    if (v< 1)histsiz = 1;    else histsiz = v;    resizehistents();}blockifleblockblockvarnumasgasgvarnumvarvarreturncallnumROOT273536112235357352135356203535ASTConvertingStatement
Node Type
Label
1
2
3
4
5
6
7
8
9
10∼17
if
block
for
while
switch
return
goto
continue
break
asgs
cmps
18∼23
Expression
ariths
24∼34
other
34∼43
assignment
Note
if statement
instructions executed sequentially
for loop statement
while loop statement
switch statement
return statement
unconditional jump
continue statement in a loop
break statement in a loop
assignments,
assignment,
or, xor, and, add, sub, mul, div
comparisons including equal, not
equal, greater
than,
greater than or equal to, and less
than or equal to.
arithmetic operations
or,
multiplication,
post-increase,
pre-increase, and pre-decrease
others including indexing, vari-
able, number, function call, string,
asm, and so on.