# Title: Experimental Analysis of the Errors Induced into Linux by Three Fault Injection Techniques

## Authors:
Tahar Jarboui, Jean Arlat, Yves Crouzet, and Karama Kanoun  
LAAS-CNRS, 7 avenue du Colonel Roche, 31077 Toulouse Cedex 4, France  
{jarboui, arlat, crouzet, kanoun}@laas.fr

## Abstract
This experimental study aims to investigate the extent to which different fault injection techniques lead to similar consequences (errors and failures) in the Linux kernel. The Linux kernel is chosen as a representative operating system due to its full controllability and observability, facilitated by its open-source nature. Three software-implemented fault injection techniques are considered: 
1. Providing invalid values to the parameters of kernel calls,
2. Corrupting the parameters of kernel calls, and
3. Corrupting the input parameters of internal kernel functions.

The experimental workload is designed to selectively activate each functional component of the kernel. Observations include typical kernel failure modes (e.g., exceptions and kernel hangs) and a detailed analysis of reported error codes.

## 1. Introduction
Numerous tools and techniques exist today to facilitate and automate fault injection experiments [1]. Software-implemented fault injection (SWIFI) has become particularly popular due to its wide applicability and ease of implementation. However, while several studies have demonstrated the range of faults that SWIFI can simulate (e.g., see [2-4]), further work is needed to better understand the actual behaviors induced by this technique. Understanding and characterizing these erroneous behaviors is crucial for integrating fault injection experiments into well-established dependability benchmarks.

Previous research on robustness testing, where an operating system is subjected to erroneous or stressful kernel calls, offers a promising approach to characterizing OS behavior in the presence of faults [5-7]. To enhance the acceptance and portability of such benchmarks, it is essential to rely on well-identified Application Programming Interfaces (APIs) to specify how to perturb the OS and to improve our understanding of the erroneous behaviors caused by various injection possibilities supported by SWIFI.

The ultimate goal of this work is to identify fault injection techniques that are representative of software faults that may impact operating systems. Operating systems (OS) are critical components of any computer system, and their malfunctions can significantly affect the overall system's dependability. As a pragmatic approach, we investigate the extent to which distinct fault injection techniques lead to similar consequences. In such cases, it is beneficial to select the technique that is easier to apply.

While perturbations affecting the OS can vary depending on the application domain (e.g., space systems are more exposed to hardware errors caused by radiation), all software systems are vulnerable to software faults. This paper focuses on software faults.

The Linux kernel was selected for our experiments because it provides a representative OS with high controllability and observability due to its open-source status. We use the error detection mechanisms of Linux to draw conclusions, focusing on the scheduling component.

The results reveal differences in system behavior when internal faults or API-level faults are present. There are also some similarities in the errors provoked by the two injection techniques used at the API level, with a slight advantage for the bit-flip technique, which induced more distinct erroneous behaviors. The set of invalid parameters used in these experiments could be expanded to include additional invalid cases. The initial results corroborate the insights obtained for the Chorus microkernel [5], where the failure modes induced by injecting bit-flips at the memory level and at the API level were different.

The rest of the paper is organized as follows: Section 2 presents the target system model, Section 3 describes the experimental framework, Section 4 provides result analysis and comparison between the three fault injection techniques, and Section 5 concludes the paper.

## 2. Target System Model
The target of our study is the Linux kernel, which can be triggered to switch to kernel mode through four main entry points:
1. An interrupt issued by a hardware device,
2. An exception signaled by the CPU,
3. A kernel call (or system call) issued by an application, and
4. A kernel thread.

The activation of kernel internal functions depends on these entry points and the current state of the kernel. In this paper, we focus on the third entry point: kernel calls issued via the API.

Based on the work presented in [8], we decomposed the Linux kernel into five functional components: scheduling, memory management, file system(s) management, and communication. Each functional component is composed of elementary functions. It is important to distinguish between elementary functions reachable from the API (kernel calls) and those that are not (internal functions). By modifying the gcc compiler, we generated a call graph for each kernel call during kernel compilation. A call graph consists of the elementary functions called by the considered kernel call. For each kernel call, we define depth levels. Figure 1 illustrates the call graph for the `sched_setscheduler` kernel call, which has three depth levels. The "system_call" node is present in all call graphs and represents the kernel call entry point.

The goal is to analyze the degree of similarity in the erroneous behaviors reported for the kernel as a consequence of fault injection at the first level (API) and lower levels. The dots at the end of arrows represent the fault injection locations. Injection at the first level corresponds to external faults, while injection at lower levels (inside the kernel) maps to internal faults. The injection techniques are detailed in the next section. Section 4 will present the results related to some kernel calls of the scheduling functional component.

## 3. Experimental Framework
In this study, three fault models are considered. A fault model is defined by the fault type and location. The fault types used are bit-flips and invalid parameters. Two fault locations are considered: the parameters of the targeted kernel call (external faults) or the parameters of the underlying kernel functions (internal faults).

External faults mimic faults from the application level and test the robustness of the kernel. Internal faults emulate various classes of faults, such as those classified by the Orthogonal Defect Classification (e.g., assignment, checking, interface, etc.). In this paper, we consider only the interface class, as shown in Figure 1.

We associate a fault injection technique with each fault model. The three injection techniques are:
1. Provision of API invalid parameters,
2. Bit-flip in API parameters, and
3. Bit-flip in internal function parameters.

The goal is to inject various faults, observe the resulting error sets, and compare them. We developed a versatile tool to support the application of the three injection techniques. Each technique requires four main steps:
1. Intercept the kernel calls issued by the process being traced using the Linux `ptrace()` interface. The kernel call targeted by the fault injection experiment is interrupted.
2. Inject a fault according to the associated model (i.e., technique). The injection process ensures synchronization between the fault and the workload, allowing for result comparison across the three techniques.
3. Resume the execution of the interrupted kernel call.
4. Observe the system behavior.

## Table 1: Data Type Classes Used by the Scheduling Component
| Data Type Class | Description |
|-----------------|-------------|
| Permission flag | -1, INT_MIN |
| Integer         | -1, INT_MIN |
| Process identifier | -1, INT_MIN |
| Read pointer    | -1, INT_MIN |
| Write pointer   | -1, INT_MIN |
| Time pointer    | -1, INT_MIN |

**Figure 1: Call Graph for `sched_setscheduler` Kernel Call**

```
system_call
API
sched_setscheduler
Level 1
setscheduler
Level 2
find_process_by_pid
move_first_runqueue
Level 3
Fault injection location
```

---

Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)  
0-7695-1597-5/02 $17.00 © 2002 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:15:42 UTC from IEEE Xplore. Restrictions apply.