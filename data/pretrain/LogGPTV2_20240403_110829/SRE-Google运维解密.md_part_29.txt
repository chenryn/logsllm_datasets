障的人来说，这是一个根深蒂固的理念，让他去解释“如何”去进行故障排查是一件很
有些人有，有些人没有。造成这种误解的原因通常是，因为对一个经常需要进行排除故
故障排查是运维分布式计算系统的一项关键技能。这项技能通常被认为是与生俱来的，
作者：Chris Jones
1.对通用的故障排查过程的理解（不依靠任何特定系统）。2.对发生故障的系统的足够
有效的故障排查手段
系统正常，只是该系统无数异常情况下的一种特例。
系统为何不能正常工作才行。
值得警惕的是，理解一个系统应该如何工作并不能使人成为专家。只能靠调查
JohnAllspaw
Brian Redman
---
## Page 159
注注
也可以采取措施修复一些表面问题。
纠正措施修复问题，防止问题重现，并且书写事后报告。当然，在找到根本原因之前，
两种方式中的任意一种，都可以重复测试假设，直到找到根本原因。这时，就可以采取
种方式可以让我们更好地理解系统目前的状态，以及造成系统问题的可能原因。用上述
动尝试“治疗”该系统，也就是对系统进行可控的调整，然后再观察操作的结果。第二
到的系统状态进行对比，从中找出支持假设或者不支持假设的证据。或者，我们可以主
接下来，我们可以用以下两种方式测试假设是否成立。首先，可以将我们的假设与观察
图12-1：通用的故障排查流程
运行机制，以及失败模型的了解，提出一些可能的失败原因。
监测指标（telemetry）注3和日志信息了解系统目前的状态。再结合我们对系统构建原理、
如图12-1所示的理想模型中，我们从收到系统问题报告开始处理问题。通过观察系统的
假设，进而针对这些假设进行测试和排除。
统的一些观察结果和对该系统运行机制的理论认知，我们不断提出一个造成系统问题的
从理论上讲，我们将故障排查过程定义为反复采用假设－排除手段的过程：2针对某系
理论
2
由于对系统不够了解而导致。下面列举了一系列常见的陷阱，读者应该小心避免：
造成低效的故障排查过程的原因通常集中在定位（triage）、检查和诊断环节上，主要
参见https://en.wikipedia.org/wiki/Hypothetico-deductive_model.
故障报告
治愈
常见的陷阱
测试/修复
诊断
检查
定位
1
1
新定位
改
如果情况发生
变
考虑重
理论
|117
135
---
## Page 160
注5
注4
118
问题原因和修复问题更容易。
解决问题。区分我们知道什么，我们不知道什么，我们还需要知道什么可以让查找
理解我们逻辑推理过程中的错误是避免这些问题发生的第一步，这样才能更有效地
越来越多。不可避免的，纯属巧合，
亦然。
成的，
最
释。
而且尤其要注意的是，当所有的可能都存在的时候，我们应该优先考虑最简单的解
运行的基本模式。要避免第3点，需要记住，不是所有的失败情况的出现概率都相
要避免第1点和第2点，需要更详细地学习系统的运行原理，同时了解分布式系统
时
后，我们要记住，相关性（correlation）不等于因果关系（causation）。
·试图解决与当前系统问题相关的一些问题，却没有认识到这些其实只是巧合
出现的现象，例如集群中的网络丢包现象和硬盘损坏现象可能是由同一个原因造
士消耗量曲线相关度极高（r=0.9416）。更多详情可参见http://tylervigen.com/view_correlation?id=1099。
参见https://xkcd.com/552
问题现象，
联合起来，
由 TheodoreWoodward,
注5
—就像谚语中说的“当你听到蹄子声响时，应该先想到马，而不是斑马。”注4
情况下，环境温度也有所上升，于是试图解决环境温度问题。）
或者这些问题其实是由于当前系统的问题造成的。（比如发现数据库压力大的
之前曾经发生过的系统问题，认为一旦发生过一次，就有可能再次发生。
虽然有可能发生，但是并不应该在解决问题初期做这个假设），或者念念不忘
将问题过早地归结为极为不可能的因素（例如认为是宇宙射线造成数据变化，
有效地测试假设。
不能正确修改系统的配置信息、输入信息或者系统运行环境，造成不能安全和
方向上浪费时间。
关注了错误的系统现象，或者错误地理解了系统现象的含义。这样会在错误的
，更糟的是，随着系统部署规模的不断增加，复杂性也在不断增加，监控指标
，比如说供电故障。但是网络丢包现象并不是造成硬盘损坏现象的原因，反之
第12章
，没法从理论上解释为什么美国计算机科学专业的PHD的毕业数量在2000年到2009年与人均芝
才可以解释系统目前的状态。
系统中可能同时存在多个问题，
有效的故障排查手段
马里兰州立大学医学系，19世纪40年代提出。
值得注意的是，在某些系统中某一类问题可能全被排除了。例如，在细心
而不是系统中存在一个非常罕见的问题，同时造成了所有的
一些现象会和另外一些现象几乎同时发生。
其是有的时候是因为系统中存在一
可参见https://en.wikipedia.
cam%27s
razor。但是需要
---
## Page 161
注8可以让提交错误报告的人查阅文献[Tat99]，这样他们能够提供更高质量的问题报告。
需要一定程度的冷静。
型问题就不合适了。合理判定一个问题的严重程度需要良好的工程师判断力，同时，也
同，有的问题只会影响特定用户在特定条件下的情况（可能还有临时解决方案），而有的
当你收到一个错误报告时，接下来的步骤是弄明白如何处理它。问题的严重程度大不相
定位
身上，而不是目前值班的成员（参见第29章）。
经常产生低质量报告。而且容易导致解决的压力集中在几个问题汇报人熟悉的团队成员
队都不鼓励将问题直接汇报给某个具体的人：这样需要额外步骤将错误报告转化成Bug，
报告。这样做的好处是保证每个问题都有调查历史和解决方案，可供未来引用。很多团
在Google，为每个错误报告提交一个Bug是常见做法，包括由E-mail和 IM收到的错误
也可以帮助错误汇报。
和传递错误报告。还可以为常见问题提供一个自服务分析工具或者自服务修复工具，这
记录系统中。很多团队都使用定制表单，或者小型的Web收集信息程序，同时自动发送
理想情况下，这些报告应该采用一致的格式，存储在一个可以搜索的系统中，例如Bug
统很慢”。有效的故障报告应该写清预期是什么，实际的结果是什么，以及如何重现。
每个系统故障都起源于一份故障报告，可以由自动报警产生，或者仅仅是你的同事说“系
故障报告
可以使处理问题的整个过程更容易，以及更有效。
在实践中，故障排查过程当然不一定和理想情况下的模型完全一致。有一些简单的步骤
实践
大型问题，立即声明一个全员参与的紧急情况可能是合理的（参见第14章），但是对小
问题代表了全球范围内某项服务的不可用。你的反应应该正确反映问题的危害程度：对
填入了黑盒探针结果的URL和on-call手册的相关链接，并且将这个Bug指派给
of things unknown”无法得到正确结果。报警系统自动创建了一个Bug，同时自动
了你，行动开始了！
BlackboxProbe_SearchFailure：你的黑盒监控系统在过去5分钟内搜索“theforms
在为莎士比亚搜索服务on-call的值班过程中，你收到了一个报警。Shakespeare-
莎士比亚搜索服务出问题了！
实践
119
注
137
---
## Page 162
138
注9小心虚假相关的可能性！
的跟踪系统的设计（参见文献[Sam14]）。
提供了非常有用的了解分布式系统工作情况的一种方式。但是不同的产品需要极为不同
解在某一时刻整个组件究竟在做什么。一些跟踪工具，例如Dapper（参见文献[Sig10]）
情况的好办法，可以通过几个图表的相关性确定问题根源。注9
监控指标是找到问题所在的开始。查看和操作time-series图表是理解某个系统组件工作
在理想情况下，监控系统记录了整个系统的监控指标，如第10章中论述的那样。这些
我们必须能够检查系统中每个组件的工作状态，以便了解整个系统是不是在正常工作。
检查
说更有点难以接受。
对新SRE来说，这个想法是反直觉，令人不安的。对以前曾经有过产品研发背景的人来
统要比让系统继续运行更好。
也同样适用于计算机系统：如果一个Bug有可能导致不可恢复的数据损坏，停止整个系
文献[Gaw09]）。相比保证乘客与飞机安全着陆，故障定位和排除是次要目标。这种方法
在初级飞行员的课程中讲到，在紧急情况中，飞行员的首要任务是保持飞机飞行（参见
时仍应该及时保存问题现场，比如服务日志等，以便后续进行问题根源分析时使用。
寻找问题根源的时候，不能使用系统的用户并没有得到任何帮助。当然，快速定位问题
载问题，或者关闭系统的某些功能以降低负载。缓解系统问题应该是你的第一要务。在
用户流量从问题集群导向其他还在正常工作的集群，或者将流量彻底抛弃以避免连锁过
正确的做法应该是：尽最大可能让系统恢复服务。这可能需要一些应急措施，比如，将
这是错误的！不要这样做。
在大型问题中，你的第一反应可能是立即开始故障排查过程，试图尽快找到问题根源。
120
日志是另外一个无价之宝。在日志中记录每个操作的信息和对应的系统状态可以让你了
可以让你在不重启进程的情况下详细检查某些或者全部操作，同时这项功能还允许
在日志中支持多级记录是很重要的，尤其是可以在线动态调整日志级别。这项功能
多信息，有助于利用一些工具进行事后分析。
文本日志对实时调试非常有用。将日志记录为结构化的二进制文件通常可以保存更
第12章
有效的故障排查手段
日志
---
## Page 163
返回了什么信息。
最后，你可能需要使用一个该系统的真实客户端，以便了解这个组件在收到请求后具体
用的规则文件列表，甚至允许单步跟踪某一条规则的计算过程。
查询数据的接口。例如，Google的Borgmon服务（参见第10章），可以显示出当前使
些RPC存在问题。有的系统的监控页面中显示了系统目前的配置文件信息，或者提供了
这些监控页面同时显示了每种类型的RPC错误率和延迟的直方图，这样可以快速查看哪
器通信，而不必去查阅具体的架构文档。
可以显示最近接收的RPC采样信息。这样我们可以直接了解该软件服务器正在与哪些机
暴露目前的系统状态是第三个重要工具。比如，Google软件服务器包含一系列监控页面，
了，但是并没有任何明显的分布模式。不幸的是，探针程序没有告诉你当探测失败
探针程序被设置为每分钟探测一次，在过去10分钟内，大概一半的探测请求成功