```
$ docker container exec nginx-test touch /tmp/testing
```
现在我们在`/tmp`中有了一个名为`testing`的文件，我们可以使用以下内容查看原始映像和运行容器之间的差异:
```
$ docker container diff nginx-test
```
这将返回文件列表；从下面的列表中可以看到，我们的测试文件以及 nginx 启动时创建的文件都在那里:
```
C /run
A /run/nginx.pid
C /tmp
A /tmp/testing
C /var/cache/nginx
A /var/cache/nginx/client_temp A /var/cache/nginx/fastcgi_temp A /var/cache/nginx/proxy_temp
A /var/cache/nginx/scgi_temp
A /var/cache/nginx/uwsgi_temp
```
值得指出的是，一旦我们停止并移除容器，这些文件将会丢失。在本章的下一节中，我们将查看 Docker 卷，并了解如何保存数据。
同样，如果您要继续，您应该使用您选择的命令删除在本节中启动的任何运行容器。
# Docker 网络和卷
在结束本章之前，我们将了解 Docker 网络和使用默认驱动程序的 Docker 卷的基础知识。让我们先来看看网络。
# Docker 网络
到目前为止，我们一直在单一的平面共享网络上推出我们的容器。虽然我们还没有谈到它，这意味着我们已经推出的容器将能够相互通信，而不必使用任何主机
网络。
我们现在不详细讨论，而是通过一个例子来说明。我们将运行一个双容器应用；第一个容器将运行 Redis，第二个是我们的应用，它使用 Redis 容器来存储系统状态。
**Redis** is an in-memory data structure store that can be used as a database, cache, or message broker. It supports different levels of on-disk persistence.
在启动应用之前，让我们下载将要使用的容器映像，并创建网络:
```
$ docker image pull redis:alpine
$ docker image pull russmckendrick/moby-counter
$ docker network create moby-counter
```
您应该会看到类似以下终端输出的内容:
![](img/437d8315-2fb0-4b30-919e-de523c2a9d8f.png)
现在我们已经提取了映像并创建了网络，我们可以启动我们的容器，从 Redis 容器开始:
```
$ docker container run -d --name redis --network moby-counter redis:alpine
```
如您所见，我们使用`--network`标志来定义我们的容器在其中启动的网络。现在，Redis 容器已经启动，我们可以通过运行以下命令来启动应用容器:
```
$ docker container run -d --name moby-counter --network moby-counter -p 8080:80 russmckendrick/moby-counter
```
再次，我们将容器放入`moby-counter`网络；这次，我们将容器上的港口`8080`映射到港口`80`。请注意，我们不需要担心暴露 Redis 容器的任何端口。这是因为 Redis 映像附带了一些暴露默认端口的默认值，对我们来说就是`6379`。这可以通过运行`docker container ls`看出:
![](img/1b81c8f6-2b54-40c8-bccd-b2ba1cd835e8.png)
现在剩下的就是访问应用；为此，打开浏览器，进入`http://localhost:8080/`。迎接你的应该是一个几乎空白的页面，信息是**点击添加标识**:
![](img/d2e7aade-e54d-49a5-8867-cd7fec245ee5.png)
单击页面上的任何位置都会添加 Docker 徽标，因此请单击离开:
![](img/d32f4117-a87d-48e6-a1ac-06550232f498.png)
到底发生了什么？从 moby-counter 容器提供服务的应用正在连接到`redis`容器，并使用该服务来存储您通过单击放置在屏幕上的每个徽标的屏幕坐标。
moby-counter 应用如何连接到`redis`容器？在`server.js`文件中，设置了以下默认值:
```
var port = opts.redis_port || process.env.USE_REDIS_PORT || 6379
var host = opts.redis_host || process.env.USE_REDIS_HOST || 'redis'
```
这意味着`moby-counter`应用正在寻找连接到端口`6379`上名为`redis`的主机。让我们尝试使用 exec 命令从`moby-counter`应用 ping`redis`容器，看看我们得到了什么:
```
$ docker container exec moby-counter ping -c 3 redis
```
您应该会看到类似于以下输出的内容:
![](img/4b88fe00-2244-44b4-88fe-1bd7efe6ef10.png)
可以看到，`moby-counter`容器将`redis`解析为`redis`容器的 IP 地址，也就是`172.18.0.2`。您可能认为应用的宿主文件包含一个`redis`容器的条目；让我们使用以下命令来看一看:
```
$ docker container exec moby-counter cat /etc/hosts
```
这将返回`/etc/hosts`的内容，在我的例子中，它看起来如下:
```
127.0.0.1 localhost
::1 localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.18.0.3 4e7931312ed2
```
除了末尾的条目，实际上是解析到本地容器主机名的 IP 地址，`4e7931312ed2`是容器的 ID；`redis`没有进入的迹象。接下来，让我们通过运行以下命令来检查`/etc/resolv.conf`:
```
$ docker container exec moby-counter cat /etc/resolv.conf
```
这返回了我们正在寻找的东西；如您所见，我们使用的是本地`nameserver`:
```
nameserver 127.0.0.11
options ndots:0
```
让我们使用以下命令对`redis`和`127.0.0.11`执行域名系统查找:
```
$ docker container exec moby-counter nslookup redis 127.0.0.11
```
这会返回`redis`容器的 IP 地址:
```
Server: 127.0.0.11
Address 1: 127.0.0.11
Name: redis
Address 1: 172.18.0.2 redis.moby-counter
```
让我们创建第二个网络并启动另一个应用容器:
```
$ docker network create moby-counter2
$ docker run -itd --name moby-counter2 --network moby-counter2 -p 9090:80 russmckendrick/moby-counter
```
现在我们已经启动并运行了第二个应用容器，让我们尝试从中 ping 通`redis`容器:
```
$ docker container exec moby-counter2 ping -c 3 redis
```
在我的例子中，我得到以下错误:
![](img/fe272858-2c80-4c3d-a694-619b4c7b0046.png)
让我们检查一下`resolv.conf`文件，看看是否已经在使用同一个名称服务器，如下所示:
```
$ docker container exec moby-counter2 cat /etc/resolv.conf
```
从以下输出可以看出，名称服务器确实已经在使用中:
```
nameserver 127.0.0.11
options ndots:0
```
由于我们已经在一个不同的网络中启动了`moby-counter2`容器，而名为`redis`的容器正在运行，因此我们无法解析该容器的主机名，因此它返回了一个错误的地址错误:
```
$ docker container exec moby-counter2 nslookup redis 127.0.0.11
Server: 127.0.0.11
Address 1: 127.0.0.11
nslookup: can't resolve 'redis': Name does not resolve
```
让我们看看在我们的第二个网络中启动第二个 Redis 服务器；正如我们已经讨论过的，我们不能有两个同名的容器，所以让我们创造性地将其命名为`redis2`。
由于我们的应用被配置为连接到解析为`redis`的容器，这是否意味着我们将不得不对我们的应用容器进行更改？不，但是道克已经帮你搞定了。
虽然您不能有两个同名的容器，但正如我们已经发现的，我们的第二个网络与我们的第一个网络完全隔离运行，这意味着我们仍然可以使用`redis`的域名。为此，我们需要添加`-- network-alias`标志，如下所示:
```
$ docker container run -d --name redis2 --network moby-counter2 --network-alias redis redis:alpine
```
如您所见，我们已经将容器命名为`redis2`，但将`--network-alias`设置为`redis`；这意味着，当我们执行查找时，我们看到返回了正确的 IP 地址:
```
$ docker container exec moby-counter2 nslookup redis 127.0.0.1
Server: 127.0.0.1
Address 1: 127.0.0.1 localhost
Name: redis
Address 1: 172.19.0.3 redis2.moby-counter2
```
可以看到，`redis`其实是`redis2.moby-counter2`的别名，然后解析为`172.19.0.3`。
现在，我们应该让两个应用在本地 Docker 主机上各自的隔离网络中并排运行，可在`http://localhost:8080/`和`http://localhost:9090/`访问。运行`docker network ls`将显示 Docker 主机上配置的所有网络，包括默认网络:
![](img/028c4da4-f1c6-4714-9720-ac7eeed8307d.png)
通过运行以下`inspect`命令，您可以了解有关网络配置的更多信息:
```
$ docker network inspect moby-counter
```
运行前面的命令会返回以下 JSON 数组:
```
[
 {
 "Name": "moby-counter",
 "Id": "c8b38a10efbefd701c83203489459d9d5a1c78a79fa055c1c81c18dea3f1883c",
 "Created": "2018-08-26T11:51:09.7958001Z",
 "Scope": "local",
 "Driver": "bridge",
 "EnableIPv6": false,
 "IPAM": {
 "Driver": "default",
 "Options": {},
 "Config": [
 {
 "Subnet": "172.18.0.0/16",
 "Gateway": "172.18.0.1"
 }
 ]
 },
 "Internal": false,
 "Attachable": false,
 "Ingress": false,
 "ConfigFrom": {
 "Network": ""
 },
 "ConfigOnly": false,
 "Containers": {
 "4e7931312ed299ed9132f3553e0518db79b4c36c43d36e88306aed7f6f9749d8": {
 "Name": "moby-counter",
 "EndpointID": "dc83770ae0939c98416ee69d939b30a1da391b11d14012c8188be287baa9c325",
 "MacAddress": "02:42:ac:12:00:03",
 "IPv4Address": "172.18.0.3/16",
 "IPv6Address": ""
 },
 "d760bc59c3ac5f9ba8b7aa8e9f61fd21ce0b8982f3a85db888a5bcf103bedf6e": {
 "Name": "redis",
 "EndpointID": "5af2bfd1ce486e38a9c5cddf9e16878fdb91389cc122cfef62d5e575a91b89b9",