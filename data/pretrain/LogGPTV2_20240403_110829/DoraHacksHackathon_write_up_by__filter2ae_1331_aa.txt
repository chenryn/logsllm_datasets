# DoraHacks区块链安全Hackathon 部分write up by 天枢
author: 天枢
## 前言
在参加护网杯的同时，天枢有一波区块链大佬小分队去参加了DoraHacks举办的比赛，小伙伴们非常给力的拿下第二名 这里分享一个这个比赛的部分题解
另外天枢还有一波小分队去参加了ISCC也取得了第二的好成绩（不说了，我去催他写writeup了...
Sissel大佬说道：
早先就对DoraHacks举办的各种hackathon有所耳闻，一直想来参加感受一次，这次很高兴天枢能够受邀参加本场区块链安全比赛，与诸位师傅共同度过一个知性而优雅的周末。各大厂商在周六都分享了许多有意思的思路、或是自家引以为傲的产品和解决方案，开拓了我和小伙伴们的眼界。一下午的展示中收获了良多干货，为第二天的比赛也开拓了思路。
本次见识到了平时只能在线上看到的诸位大师傅，也有幸享受到了师傅们精心准备的题目，包含了合约审计、漏洞利用、硬件方案、密码学、交易所安全等多个类型，受益良多。也吐槽一句，师傅们颜值都好高呀！
这里给出Q1、4、11、14、15 我们队的解答。
## 题目wp
### Q1 - 测试题
主办方提供了四个合约，需要我们给出漏洞点和修复方案，并对第二个和第四个合约写出攻击合约。
#### Auction.sol
    pragma solidity ^0.4.10;
    contract Auction {
        address public highestBidder;
        uint256 public highestBid;
        function Auction(uint256 _highestBid) {
            require(_highestBid > 0);
            // 设置起拍价格        
            highestBid = _highestBid;
            highestBidder = msg.sender;
        }
        function bid() payable {
            require(msg.value > highestBid);
            // 退还上一位竞拍者资金
            highestBidder.transfer(highestBid);
            highestBidder = msg.sender;
            highestBid = msg.value;
        }
        // 根据区块高度或者时间等，结束拍卖
        function auction_end() {
            // ...
        }
    }
很典型的King/拍卖合约，问题出在了出现下一个高价者时，上一个人退款时的transfer()。我们可以构造一个攻击合约，他的回调函数是payable，且函数中revert()或throw。即让我们的攻击合约，作为最高出价者，并且不能接受转账即可。
#### BankOwned.sol
    contract Owned {
        address public owner;
        function Owned() { owner = msg.sender; }
        modifier onlyOwner{ if (msg.sender != owner) revert(); _; }
    }
    contract Bank is Owned {
        address public owner = msg.sender;
        function transferOwner(address new_owner) public onlyOwner payable {
             owner = new_owner;
        }
        function withdraw(uint amount) public onlyOwner {
            require(amount  PersonInfo) contacts;
            function MyContacts() {
                owner = msg.sender;
            }
            function addContact(address _person, string _phoneNumber, string _note) public {
                PersonInfo info;
                info.person = _person;
                info.phoneNumber = _phoneNumber;
                info.note = _note;
                contacts[msg.sender] = info;
            }
    }
在函数里声明，会覆盖变量。
这里举个[启明的文章](https://paper.seebug.org/661/)，方便理解，师傅们在第一天的演讲中也提到了这一点。
    pragma solidity 0.4.24;
    contract test {
        struct aa{
            uint x;
            uint y;
        }
        uint public a = 4;
        uint public b = 6;
        function test1() returns (uint){
            aa x;
            x.x = 9;
            x.y = 7;
        }
    }
函数test1中定义了一个局部结构体变量x，但是没有对其进行初始化。根据solidity的变量存储规则，这时候x是存储在storage中的，而且是从索引0开始，那么对其成员变量x,y赋值之后，刚好覆盖了全局变量a和b。
#### PrivateBank.sol
    pragma solidity ^0.4.15;
    contract PrivateBank {
        mapping (address => uint) userBalance;
        function getBalance(address u) constant returns(uint){
            return userBalance[u];
        }
        function addToBalance() payable{
            userBalance[msg.sender] += msg.value;
        }   
        function withdrawBalance(){
            if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){
                throw;
            }
            userBalance[msg.sender] = 0;
        }   
    }
看名字都猜出来了，肯定是重入漏洞啦`msg.sender.call.value(userBalance[msg.sender])()`，攻击的话call一下就好了hhh。
    先让攻击合约充一点钱
    function () payable public{
        victim.call(bytes4(keccak256("withdrawBalance()")));
    }
### Q4 - 游戏逻辑题，找出三个漏洞
这个题最后只有我们天枢给出了主办方满意的回答，已经在赛后分享和大家讨论过了。
也是之前在创宇404的时候，和Lorexxar师傅经常一起审合约，养成的好习惯。很喜欢这道题，出题的师傅说，请大家把它仅仅当作游戏合约来看待，而不是蜜罐之类的hh。我还蛮喜欢这种心态的。
    pragma solidity ^0.4.0;
    // Bet Game
    contract BetGame {
        address owner;                                  // 合约持有者
        mapping(address => uint256) public balanceOf;   // 用户资金集
        uint256 public cutOffBlockNumber;               // 下注截止到cutOffBlockNumber,至少有1000个块的距离到创建合约的块
        uint256 public status;                          // 状态，根据每次下注修改状态
        mapping(address => uint256) public positiveSet; // 赌注正面赢: status == 1
        mapping(address => uint256) public negativeSet; // 赌注反面赢: status == 0
        uint256 public positiveBalance;                 // 正面下注资金总额
        uint256 public negativeBalance;                 // 反面下注资金总额
        modifier isOwner {
            assert(owner == msg.sender);
            _;
        }
        modifier isRunning {
            assert(block.number = cutOffBlockNumber);
            _;
        }
        constructor(uint256 _cutOffBlockNumber) public {
            owner = msg.sender;         
            balanceOf[owner] = 100000000000;
            cutOffBlockNumber = _cutOffBlockNumber;
        }
        function transfer(address to, uint256 value) public returns (bool success) {
            require(balanceOf[msg.sender] >= value);
            require(balanceOf[to] + value >= balanceOf[to]);
            balanceOf[msg.sender] -= value;
            balanceOf[to] += value;
            return true;
        }
        // 下注并影响状态，该操作必须在赌局结束之前
        function bet(uint256 value, bool positive) isRunning public returns(bool success) {
            require(balanceOf[msg.sender] >= value);
            balanceOf[msg.sender] -= value;
            if (positive == true) {
                positiveSet[msg.sender] += value;
                positiveBalance += value;
            } else {
                negativeSet[msg.sender] += value;
                negativeBalance += value;
            }
            bytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));
            uint8 flags = (uint8)(result & 0xFF);   // 取一个字节，根据值的大小决定状态
            if (flags > 128) {
                status = 1;
            } else {
                status = 0;
            }
            return true;
        }
        // 猜对就取回成本和猜对所得（猜错将不能取回成本），该操作必须在赌局结束以后
        function withdraw() isStop public returns (bool success){
            uint256 betBalance;
            uint256 reward;
            if (status == 1) { // positiveSet
                betBalance = positiveSet[msg.sender];
                if (betBalance > 0) {
                    balanceOf[msg.sender] += betBalance;
                    positiveSet[msg.sender] -= betBalance;
                    positiveBalance -= betBalance;
                    reward = (betBalance * negativeBalance) / positiveBalance;
                    negativeBalance -= reward;
                    balanceOf[msg.sender] += reward;
                } 
            } else if (status == 0) {
                betBalance = negativeSet[msg.sender];
                if (betBalance > 0) {
                    balanceOf[msg.sender] += betBalance;
                    negativeSet[msg.sender] -= betBalance;
                    negativeBalance -= betBalance;
                    reward = (betBalance * positiveBalance) / negativeBalance;
                    positiveBalance -= reward;
                    balanceOf[msg.sender] += reward;
                }
            }
            return true;
        }
    }
不按审合约正确的套路写了，这里给出我的答案，前三个是师傅的预期解。
#### 随机数分布不均
    if (flags > 128) {
        status = 1;
    } else {
        status = 0;
    }
正:反 = 129:127
#### 发奖金时逻辑有误
    negativeSet[msg.sender] -= betBalance;
    negativeBalance -= betBalance;
    reward = (betBalance * positiveBalance) / negativeBalance;
应该先计算reward，再变动参数，目前这样会导致用户多领款。
#### 游戏时长设计不合理
    modifier isRunning {
        assert(block.number = cutOffBlockNumber);
        _;