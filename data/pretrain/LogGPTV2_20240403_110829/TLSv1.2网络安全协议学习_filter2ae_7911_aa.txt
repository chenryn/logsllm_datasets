# TLSv1.2网络安全协议学习
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## TLS协议概述
TLS前身为NetScape公司设计的SSL协议，之后由IETF形成了TLS标准，现在已发展到TLSv1.3版本。
TLS工作在传输层之上，应用层之下。接收应用层报文的数据提供保密性与完整性服务。
TLSv1.2版本包含5个子协议：Handshake、ChangeCipherSpec、Alert、Application
如今，TLS协议已经得到了广泛的使用，常用的HTTPS就是基于TLS协议提供的安全性服务。
## TLS描述语言
为了无二意地表述TL协议的各个子协议，需要先引入TLS的描述语言。语法与C语言非常类似
**基本原则** ：
  * 基本数据块大小为1字节（1 byte）
  * 注释由 / _开始_ / 结束
  * [[ ]] 表示可选的部件
  * 包含无具体含义的单字节实体，类型标识为opaque
**定长向量** ：表示为 `T Vector[n]`。Vector为向量名，T为向量数据类型，n为向量的 **字节数**
**变长向量** ：表示为 `T Vector`。Vector为向量名，T为向量数据类型，min和max分别为向量最小和最大的
**字节数**
**枚举** ：用来表示某个变量可能的取值，表示为 `enum {e1(v1),e2(v2),···,en(vn)[[n]]}name`。其中
  * `name`是枚举变量的变量名
  * `ei`是枚举变量`name`可能的取值
  * `vi`是`ei`的具体指代数值
  * `n`表示可能取值的个数
**结构** ：用来表示一个特殊的变量，这个变量由不同类型的数据组成，表示为
    struct{
        T1 V1;
        T2 V2;
        ···
        Tn Vn;
    } [[name]]
其中
  * `Ti`表示变量类型
  * `Vi`表示变量名
  * `name`表示结构变量变量名
**变体** ：根据实际选择不同，成员变量可选择不同数据类型，表示为
    select(E){
        case e1: T1;
        case e2: T2;C
        ···
        case en: Tn;
    } [[fv]]
其中
  * `E`是要判定的变量
  * `ei`是`E`的取值
  * `Ti`是对应的数据类型
  * `fv`是变体变量变量名
## TLSv1.2 各个子协议
###  TLS Record协议
Record协议工作在其他子协议的更下层，简单而言，Record协议接收上层协议的内容，封装后交给传输层传输。
####  Record协议的功能
  * 消息传输：上层其他子协议将其数据提交给缓冲区，Record协议传输这些缓冲区中的数据。如果缓冲区超过长度限制，则需要进行分片；如果缓冲区过小，可以合并 **属于同一协议的** 小缓冲区内的内容
  * 完成加密和完整性验证：按照协商好的密码学套件和安全参数进行加密和完整性验证
  * 压缩： **设计上** 为了提高传输效率提供了压缩的功能。但是实践中，由于压缩功能存在安全性问题，所以一般没有实现。
####  Record协议封装过程图示
####  Record Header
Record协议包含一个5字节的首部，其中包含三个字段`ContentType`、`ProtocolVersion`和`length`
  * `ContentType`表示上层子协议的类型，长为1 byte，描述如下： 
        enum{
        change_cipher_spec(20), /*ChangeCipherSpec协议*/
        alert(21),/*Alert协议*/
        handshake(22),/*Handshake协议*/C
        application_data(23),/*ApplicationData协议*/
        (255) /*总共255个可选值*/C
    }ContentType
  * `ProtocolVersion`表示协议版本号，包含一个大版本一个小版本，长为2 byte，描述如下： 
        struct{
        uint8 major;
        uint8 minor;C
    }ProtocolVersion
各个版本对应的取值如下：
  * `length`表示数据的长度(不包括Record Header)，长为2 byte
Record协议封装后的报文分片描述如下（已加密）：
    struct{
        ContentType type;
        ProtocolVersion Version;
        uint16 length;
        select (SecurityParameters.cipher_type){
            case stream: GenericStreamCipher; /*流密码*/
            case block: GenericBlockCipher; /*分组密码*/
            case aead: GenericAEADCipher; /*AEAD模式*/
        }fragment /*数据分片*/
    }TLSCiphertext
###  TLS Handshake协议
####  Handshake功能
Handshake协议是TLS中最复杂的一个协议，在这个协议运行之后，需要完成如下事项：
  * 身份认证：确定客户端服务器的合法身份
  * 密码套件协商：商定相同的密码套件，否则无法通讯
  * 密钥协商：商定会话使用的密钥
####  Handshake对话过程
  * 先通俗地描述一下会话过程：客户端先与服务器取得联系。客户端随机告诉服务器，我可以使用RSA/AES和DSS/AES密码套件，需要选用哪一个密码套件进行会话。服务端告诉客户端选用RSA/AES密码套件通信，并且将证书发给客户端。客户端与服务器达成一致，切换密码套件，准备通信。
  * 形式化地描述：上述是一个简单的不太严谨的描述，下图是更加严谨的形式化的描述：
之后将会详细地阐释每个消息的含义
####  Handshake消息结构
用TLS描述语言描述如下
    enum {
        hello_request(0), client_hello(1), server_hello(2),  certificate(11), server_key_exchange (12),          certificate_request(13), server_hello_done(14),  certificate_verify(15),    
        client_key_exchange(16),  finished(20),
        (255)
    } HandshakeType; /*定义handshake消息类型*/
    struct{
        HandshakeType msg_type; /*Handshake消息类型*/
        uint24 length; /*消息长度*/
        select (HandshakeType){
            case hello_request: HelloRequest;
            case client_hello: ClientHello;
            case server_hello: ServerHello;
            case certificate: Certificate;
            case server_key_exchange: ServerKeyExchange;
            case certificate_request: CertificateRequest;
            case server_hello_done: ServerHelloDone;
            case certificate_verify: CertificateVerify;
            case client_key_exchange: ClientKeyExchange;
            case finished: Finished;C
        } body; /*消息体*/
    } Handshake;
####  Handshake：HelloRquest
**作用**
：用于和Client重新开始一次协商过程，Client应在之后发送一个ClientHello开始协商。如果此时Client正在进行一个协商，那么这条消息将被忽略。
**消息图示** ：
####  Handshake：ClientHello
ClientHello是一次握手流程中的第一条消息，随着这条消息Client发送其 **支持的功能** 和 **首选项** 给服务器。
**发送ClientHello的情况** ：
  * 新建连接时
  * 重新协商时
  * 响应重建连接请求（HelloRequest）时
**消息图示** ：
**ClientHello消息格式** ：
使用TLS描述性语言描述如下：
    struct {
        uint32 gmt_unix_time;  
        opaque random_bytes[28];
    } Random; /*Random类型包括时间和一个随机的字节数组*/
    opaque SessionID;  uint8 CipherSuite[2]; /*密码学套件，两个字节的ID*/
    enum {null(0), (255)} CompressionMethod; /*压缩方法，不启用*/
    enum {
        signature_algorithms(13), (65535)
    } ExtensionType; /*定义扩展类型*/
    struct {
        ExtensionType extension_type;  
        opaque extension_data;
    } Extension; /*扩展类型*/
    struct {
        ProtocolVersion client_version; /*协议版本*/
        Random random; /*随机数*/ 
        SessionID session_id; /*会话ID，方便会话重用*/
        CipherSuite cipher_suites;  /*密码套件（多个），客户端首选的密码套件放在第一位
                                               注意：如果SessionID不为0，即要重用一个会话时，这个字段必须至少包括重用会                                           话使用的密码套件。*/
        CompressionMethod compression_methods;  /*压缩方法*/
        select (extensions_present) { /*扩展*/
            case false:    
                struct {};  
            case true:
                Extension extensions;
        };
    } ClientHello;
**抓包实例** ：
推荐一个TLS协议学习网站https://tls.ulfheim.net/，不仅包含TLSv1.2，也可以学习到TLSv1.3
抓取到的ClientHello如下：
可以看到其中的各个字段值。
####  Handshake：ServerHello
当收到来自客户端的ClientHello的时候，如果在服务端能够找到对应的一套密码套件，那么服务器发送ServerHello消息响应客户端的ClientHello消息。如果不能找到匹配的算法，则返回一个警告。
**消息图示** ：
**ServerHello消息格式** ：
用TLS描述语言描述如下：
    /*ServerHello与ClientHello基本一致，主要区别在于cipher_suite只包含最终确定使用的那一个*/
    struct {
        ProtocolVersion server_version;
        Random random;  
        SessionID session_id;
        CipherSuite cipher_suite;  /*只有一个确定使用的密码套件*/
        CompressionMethod compression_method;  
        select (extensions_present) {
            case false:
                struct {};  
            case true:
                Extension extensions;
        };
    } ServerHello;
**抓包实例** ：
可以见得，这一条报文中包含了多条消息，证实了TLSv1.2会将小的消息在不影响语义的情况下合并在一起进行发送。
可以看到ServerHello的报文中的密码套件只有一个，这就是之后需要使用的密码套件
####  Handshake：Certificate
服务器向客户端发送的证书，使得客户端能够认证服务器的身份。在匿名通讯时，服务器不需要发送证书。
**消息图示** ：
**Certificate消息格式** ：
    opaque ASN.1Cert;
    struct {
        ASN.1Cert certificate_list;
    } Certificate;
ASN.1(抽象语法表示法1)，是支持复杂数据结构和对象的定义、传输、交换的一系列规则
**抓包实例** ：
这里的证书是一条证书链，通过一级一级的证书认证Server证书的合法性。
####  Handshake：ServerKeyExchange
服务器发送了ServerCertificate消息之后立即发送ServerKeyExchange消息。同时，仅当之前发送的消息不足以让客户端交换premaster
secret(预主密钥)的时候，才会发送ServerKeyExchange消息。例如，通过非对称加密方式加密 premaster secret
时不需要发送ServerKeyExchange消息，因为客户端已经可以利用公钥传递 premaster secret 了。
**消息图示** ：
**ServerKeyExchange消息格式** ：
    struct {