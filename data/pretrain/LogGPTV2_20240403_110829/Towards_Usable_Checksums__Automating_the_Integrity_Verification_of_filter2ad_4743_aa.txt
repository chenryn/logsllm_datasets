title:Towards Usable Checksums: Automating the Integrity Verification of
Web Downloads for the Masses
author:Mauro Cherubini and
Alexandre Meylan and
Bertil Chapuis and
Mathias Humbert and
Igor Bilogrevic and
K&apos;evin Huguenin
Towards Usable Checksums: Automating the Integrity
Verification of Web Downloads for the Masses
Mauro Cherubini
UNIL – HEC Lausanne
Switzerland
PI:EMAIL
Alexandre Meylan
UNIL – HEC Lausanne
Switzerland
PI:EMAIL
Mathias Humbert
Swiss Data Science Center
ETH Zurich and EPFL
Switzerland
PI:EMAIL
Igor Bilogrevic
Google Inc.
Switzerland
PI:EMAIL
Bertil Chapuis
UNIL – HEC Lausanne
Switzerland
PI:EMAIL
Kévin Huguenin
UNIL – HEC Lausanne
Switzerland
PI:EMAIL
ABSTRACT
Internet users can download software for their computers from
app stores (e.g., Mac App Store and Windows Store) or from other
sources, such as the developers’ websites. Most Internet users in the
US rely on the latter, according to our representative study, which
makes them directly responsible for the content they download. To
enable users to detect if the downloaded files have been corrupted,
developers can publish a checksum together with the link to the
program file; users can then manually verify that the checksum
matches the one they obtain from the downloaded file. In this pa-
per, we assess the prevalence of such behavior among the general
Internet population in the US (N = 2,000), and we develop easy-
to-use tools for users and developers to automate both the process
of checksum verification and generation. Specifically, we propose
an extension to the recent W3C specification for sub-resource in-
tegrity in order to provide integrity protection for download links.
Also, we develop an extension for the popular Chrome browser
that computes and verifies checksums of downloaded files automat-
ically, and an extension for the WordPress CMS that developers
can use to easily attach checksums to their remote content. Our
in situ experiments with 40 participants demonstrate the usability
and effectiveness issues of checksums verification, and shows user
desirability for our extension.
CCS CONCEPTS
• Security and privacy → Web protocol security; Usability in se-
curity and privacy; Hash functions and message authentication
codes;
KEYWORDS
checksums; web downloads; security; usability
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243746
ACM Reference Format:
Mauro Cherubini, Alexandre Meylan, Bertil Chapuis, Mathias Humbert,
Igor Bilogrevic, and Kévin Huguenin. 2018. Towards Usable Checksums:
Automating the Integrity Verification of Web Downloads for the Masses. In
2018 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY,
USA, 16 pages. https://doi.org/10.1145/3243734.3243746
1 INTRODUCTION
Nowadays, Internet is the main source for users to obtain programs
for their computers. A popular and convenient way to download
programs is to use official app stores such as Apple’s Mac App Store
and Microsoft’s Windows Store. Such platforms, however, have sev-
eral drawbacks for developers, including long review and validation
times, technical restrictions (e.g., sandboxing), incompatibility with
software licenses, and substantial commissions [45]. Therefore, it
is quite common that developers make their programs available
directly from their websites. This is the case of popular programs
such as VLC media player, OpenOffice, and GIMP.
When developers make programs available from their websites,
they can either host them directly on the same server as the website
or rely on so-called third-party hosting platforms, such as mirrors
and content delivery networks (CDNs) that provide substantial im-
provements for the users in terms of performance (e.g., bandwidth)
and availability. However, this latter solution means relinquishing
control over the program files and fully trusting the third-party
platform: If the CDN is hacked, the programs can be corrupted to
include all sorts of malware, thus infecting the computers of the
users willing to install and run the original program. Recently, both
the popular BitTorrent client Transmission [5, 29] and the Linux
Mint distribution [3, 50] were corrupted by injecting, in the original
programs, a ransomware in the former, and a backdoor in the lat-
ter. Such corruptions are particularly problematic for privacy and
security software (e.g., PGP) used by at-risk populations such as
journalists and political dissidents. This applies to all files that can
harm a user’s device; even PDF files can be infected. In general, it
is crucial for website administrators to make sure that the content
of the files downloaded by their visitors through external links
matches the content of the files at the time the link was created.
It would indeed be problematic (not only from a security point
Session 6D: Usable 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada1256CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Mauro Cherubini et al.
of view) if a picture linked from a website would be replaced by
another one.
A popular way for developers to enable users to detect acci-
dental or intentional modifications of their program files hosted
on external platforms, such as mirrors and CDNs, is to provide
so-called checksums on their websites. This practice is quite com-
mon in the open-source community but also for companies such as
Google (e.g., checksums for Android Studio). Such checksums are
usually derived from the output of cryptographic hash functions
(e.g., SHA-1), in the form of sequences of alphanumeric digits called
digests and displayed on the download webpages, or from digital
(detached) signatures provided in separate files. Users can verify
the integrity of the program files they download based on the pro-
vided checksums;1 however, it usually requires the users to execute
dedicated (command line)2 programs and to manually compare
long sequences, which has been proven, in contexts different from
web downloads (e.g., PGP key fingerprint verification), to suffer
from usability issues and to be error prone [26, 39]. Other solutions,
such as code-signing, also suffer from some limitations and only
partially address the aforementioned problem. These issues call for
automated and reliable methods.
In this paper, we consider the context of a website administrator
(e.g., a software developer or vendor) who includes a link on one
of their webpages for downloading a file such as a program. The
program file is hosted on a third-party server (i.e., different from
the server hosting the website, e.g., mirrors, CDNs) that is not con-
trolled by the website administrator. In order to check the integrity
of the file after download, this website administrator includes a
checksum of the program file on their website (not hosted on the
third party server) . The threat we consider is the case where the file
pointed to by the link is corrupted, for instance by the third-party
server operator or by hackers; furthermore, the checksum of the
corrupted file can partially match that of the original file (e.g., the
first ten digits match). And the users who download the file do not
verify its checksum or do so in an inattentive way. To the best of our
knowledge, no practical solution has been proposed for automati-
cally verifying web downloads and the general topic of the integrity
of programs downloaded on the Web has been mostly overlooked.
We explore this research gap and address these challenges by per-
forming a thorough analysis of the common practices regarding
the use of checksums and their usability and effectiveness, and by
proposing technical solutions to the issues we identify. Specifically,
our contributions are as follows:
• We conduct the first comprehensive study on the use of
checksums for verifying the integrity of web downloads. We
rely on several instruments: a large-scale online survey with
2,000 participants to assess Internet users’ knowledge of
checksums and security behavior in general with respect to
web downloads of program files; a website survey of 20 down-
load pages of popular programs to assess how developers
use checksums; and an in situ experiment with 40 partic-
ipants that uses an eye-tracker to precisely evaluate how
users verify checksums. It is the first time that eye-tracking
1Note that checksums only enable users to verify that the file they downloaded is
indeed the one the website administrator intended to share.
2By default, the major operating systems include only command-line tools to
compute checksums, e.g., shasum for macOS and Linux and certutil for Windows.
technologies are used for studying usability and attention
during the checksum verification process. We identify the
main challenges with checksums from the point of view of
usability, efficiency, security and adoption.
• To address the usability and effectiveness issues of check-
sums, we propose an extension to the current World Wide
Web Consortium (W3C) specification for subresource in-
tegrity (SRI) [49]; it standardizes the use of checksums for
external resources such as Javascript files, in order to cover
download links of program files. Our solution enables devel-
opers to rely on a standardized method that would signifi-
cantly reduce the user burden of checksum verification.
• We develop two novel extensions for improving checksum
verification. The first one is an automated checksum verifi-
cation browser extension that alerts users when there is a
potential mismatch between the checksum computed from
the downloaded file and that (or those) available on the de-
veloper’s website, even when the checksum is displayed in
the page (and not through SRI), as is the case today. The
second one is a checksum generation plugin for a popular
web content-management system (CMS), which automati-
cally implements our proposed extension to the W3C’s SRI
specification on the websites managed by such systems.
Our proposed solution would be deployed as follows: The use of
checksums for web downloads and their inclusion in links would be
standardized as an extension of SRI; alternatively, checksums would
be extracted from the “Download” webpages in an ad-hoc fashion.
The automatic extraction and verification of the checksums would
be implemented in the web browser (or in an extension).
The results of our large-scale online survey demonstrate that,
although 71% of the respondents declare to download program files
from sources where they could be potentially corrupted, only 1.7%
check the integrity of these downloads. Furthermore, when asked
about what they would do if they saw a checksum on a website they
downloaded a program from, only 5.2% of the participants stated
they would use it to verify the file’s integrity (out of 6 possible
options), thus revealing the sheer number of computer users who
know about this security technology. The results of our website sur-
vey show that a substantial fraction of download webpages include
only checksums generated with weak hash functions (MD5 and
SHA1). And, only a small fraction of the websites include instruc-
tions on how to verify file integrity with checksums or a description
of their utility. Finally, our in-person experiments demonstrate that,
despite being explicitly asked to verify the checksums, more than
one third of our participants fail to detect the mismatch (i.e., par-
tial pre-image attack) between the checksum displayed on a fake
download webpage and the one computed from the (corrupted)
downloaded file. Our eye-tracking analysis shows that users pay
more attention to the first digits of the checksums, which reduces
drastically the security provided by such checksums. It also sug-
gests that failure to detect mismatch between checksums is caused
by a low number of fixations. The user feedback also shows a good
desirability of verification mechanisms integrated in web browsers.
The rest of the paper is organized as follows. We survey the
related work in Section 2. We introduce the system and threat
models as well as the background about checksums and file integrity
Session 6D: Usable 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada1257Automating the Integrity Verification of Web Downloads for the Masses
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
verification in Section 3. We present the survey of websites that
use checksums in Section 4. We follow up with the online user
survey on Internet security behavior in Section 5. We then describe
the proposed solutions in Section 6, and present the in situ user
experiments with eye-tracking in Section 7. We discuss the main
findings and limitations in Section 8. We conclude the paper in
Section 9, by describing the outlook and perspectives for future
work.
2 RELATED WORK
From a high-level perspective, our work can be framed within
the broader category of online security behaviors as it touches
upon the subject of security warnings through the lenses of file
integrity verification. Hereafter we first present studies that focused
on Internet users download behavior, then we focus on the works
related to the effectiveness of security warnings and we then focus
on the sub-area dedicated to file integrity verification.
2.1 Download Behavior
Internet users are increasingly exposed to security threats, as found
by Furnell et al. [24]: They conducted a survey with 415 home users
to assess their perceptions of security issues, and their attitudes
towards the use of related safeguards. The survey revealed that, al-
though the responders had a high degree of confidence, they lacked
desirable knowledge of different safeguards that can increase their
security. They also found that there were notable shortcomings
among users who considered themselves “experts”. A similar survey
conducted more recently with 594 home computer users revealed
that security-related behavior is influenced by a combination of
cognitive (i.e., understanding of the related threats), social, and
psychological components (i.e., time pressure to complete the re-
lated task) [9]. Furthermore, a recent survey conducted in the UK
on businesses and charity organizations [37] revealed that secu-
rity knowledge of employees is the weakest link leading to many
successful cyber-attacks and that often times enforcing security
policies is ineffective. Download behavior is often also influenced
by security recommendations, as studied by Redmiles et al. [34, 35].
The authors conducted semi-structured interviews and deployed a
large-scale questionnaire to study security advice. In these studies,
they found that users evaluate digital-security recommendations
based on the trustworthiness of the source of the advice. When
advised by knowledgeable peers, users might trust the source over
the content of the recommendation. Unfortunately, none of these
studies focused specifically on Internet downloads, which is one of
the goals of this study.
2.2 Effectiveness of Security Warnings
A security warning is a cautionary message usually delivered by
the operating system or a third-party app to users when they are
about to perform an action on their system that could potentially
have negative consequences. Such actions include downloading or
opening a file containing a virus, visiting a website that contains
malware or has phishing intents, or simply installing an app from
an untrusted source. The users can either act on such warnings or
ignore them. Over the past decade, the research community has
extensively studied how users interact with such warnings, and
whether the warnings are effective and understandable [7, 10, 16,
18, 27, 30, 36, 40, 42]. These studies are relevant to our work as we
also designed an intervention through a browser extension.
The research on security warnings has shown that they are, on
the one hand, effective at reducing the rate at which users perform
potentially harmful actions after they have been warned [7, 36, 40].
On the other hand, users tend to ignore such warnings due to their
excessive frequency [11] and habituation effects [42]. In another
work, Modic and Anderson [30] studied what makes a warning ef-
fective, and they have found that warnings should (i) contain a clear