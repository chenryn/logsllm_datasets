title:A framework for early stage quality-fault tolerance analysis of embedded
control systems
author:Satya Gautam Vadlamudi and
P. P. Chakrabarti and
Dipankar Das and
Purnendu Sinha
A Framework For Early Stage Quality-Fault Tolerance Analysis Of
Embedded Control Systems
S. G. Vadlamudi and P. P. Chakrabarti
Dipankar Das and Purnendu Sinha
Department of Computer Science and Engineering
Electrical and Software Architecture Group
Indian Institute of Technology Kharagpur
Email: {satya,ppchak}@cse.iitkgp.ernet.in
Kharagpur, India
General Motors India Science Lab
Email: {dipankar.das,purnendu.sinha}@gm.com
Bangalore, India
Abstract‚ÄîThis work presents a static-analysis based method
for analyzing the robustness of a given embedded control
system design,
in the presence of quality-faults in sensors,
software components, and inter-connections. The method char-
acterizes the individual components of the system by storing
the relations between the precision of inputs and the precision
of outputs in what we call, lookup tables (LUTs). A network of
LUTs thus formed which represent the given control system is
converted into a satisÔ¨Åability modulo theory (SMT) instance,
such that a satisfying assignment corresponds to a potential
counterexample (the set of quality-faults which violate the given
fault-tolerance requirements) or hot-spot in the design. Hot-
spots obtained in this manner are counter-veriÔ¨Åed through
simulation to Ô¨Ålter the false-positives. Experimental results
on the fault-tolerant fuel controller from Simulink automotive
library demonstrate the efÔ¨Åcacy of the proposed approach.
Keywords-embedded systems; fault injection; fault tolerant
systems; quality faults; robustness;
I. INTRODUCTION
Embedded control systems are widely used in many
domains such as aeronautics, automotive, medical, nuclear,
etc. The applications range from safety-critical features like
computing when and how an airbag of a car must inÔ¨Çate,
to value and business enhancing features like controlling
fuel
injection in order to conform to the emission and
fuel consumption requirements. In this scenario, stringent
requirements on the reliability and fault-tolerance of safety
related systems, like IEC 61508 [2] are to be satisÔ¨Åed. Such
being the case, design for fault-tolerance is emerging as an
important aspect of the control system design-Ô¨Çow.
It must be noted here that merely providing some func-
tionality (not crashing or halting), in the face of component
failures, is not enough for a safety-critical control system
to be certiÔ¨Åed as fault-tolerant. For this, the system must
additionally provide outputs which are within an envelope of
acceptability for small internal/external signal Ô¨Çuctuations,
which means that the output values must conform to certain
requirements and constraints. Hence, for a control system,
there is a need to assure two aspects of fault-tolerance,
namely logical (availability), and quality (acceptability)
fault-tolerance.
Logical-faults occur when hardware, power-supply, sen-
sor, actuator, and software components fail in a manner
such that their outputs are rendered useless. These faults
are relatively infrequent one-time events which permanently
change the conÔ¨Åguration of the system. On the other hand,
quality-faults (which reason about the deviation from golden
or fault-free signal) are much more frequent than the logical-
faults since they are caused due to variations in the environ-
ment. Some causes of quality-faults are: bugs in the software
which are invoked in a few execution time-slots resulting
in erroneous outputs, shift in supply voltage to sensors,
noise in sensors and actuator components, missing output
data from sensors (like cameras), precision losses incurred
when a software component executes on an embedded
hardware platform with limited arithmetic capabilities (like
unavailable Ô¨Çoating point arithmetic), or due to the use of
a less accurate backup operation (like a TDNN or lookup
table) when the primary operation suffers from a logical-
fault, transient faults, and soft errors. [3] reports the severity
of transient and intermittent faults that can occur in COTS
chips due to the deep submicron technology used.
Therefore, an important step in the development of em-
bedded control systems is the fault-tolerance analysis, in the
face of anticipated component failures, and output degra-
dation of sensors and software components. Logical-faults
have been analyzed using logic-reasoning methods [1], and
methods like fault-tree analysis [10]. The analysis of quality-
faults is usually done by fault-injection and simulation [4].
These fault-simulation methods aim to examine a sample
space of possible quality degradations which is often very
large. For example, consider a system which has twenty
components, each of which can introduce some bounded
quality degradation. In this case, even if we were to study
a simplistic quality-fault sample space where a quality-fault
with a certain amplitude may either occur or not occur, we
have to test about one million testcases. Hence, the coverage
attained by simulation based methods is often very low,
resulting in low reliability of the design.
In the past, a framework has been proposed for deter-
mining the correctness and robustness of simulations of
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:30:28 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ¬©2011 IEEE315hybrid systems against Ô¨Çoating-point rounding errors and
system-modeling uncertainties [8]. Another algorithm based
on symbolic execution and non-linear optimization was pro-
posed which computes the maximum difference in program
outputs over all program paths when a program input is
perturbed [11]. The quality-fault tolerance problem can also
be looked as checking whether the given system is fail-
bounded [5], [13]. [14] evaluates the dependability of a fail-
bounded jet engine control system with respect to single
event upsets (SEUs) by injecting single bit-Ô¨Çip faults. Most
of the previous work is not applicable during early design
phases such as operation level and also does not consider
simultaneous faults at multiple locations in the design which
is necessary due to the independent nature of their causes.
In [6], a dynamic-analysis based framework is suggested for
the quality-fault tolerance analysis based on characterization
of subcomponents, but the simulation of large number of
cases on even the abstracted model can still take a lot of
time for Ô¨Ånding counterexamples.
In this paper, we propose a static-analysis based frame-
work for the quality-fault tolerance analysis of embedded
control systems that can be used for quickly obtaining the
counterexamples during the early stages of design resulting
in faster and lower number of design-test iterations, reducing
the overall design time. The method characterizes the indi-
vidual components of the system by storing the relations
between the precision of inputs and the precision of outputs
in what we call, lookup tables (LUTs). A network of LUTs
thus formed which represent the given control system is
converted into a satisÔ¨Åability modulo theory (SMT) instance,
such that a satisfying assignment corresponds to a potential
hot-spot (the set of quality-faults which violate the given
fault-tolerance requirements) in the design. By formulating
the problem as a discrete analysis problem, several well-
studied and highly optimized discrete search algorithms and
tools such as Yices SMT solver [7] can be used. Hot-
spots obtained in this manner are counter-veriÔ¨Åed through
simulation to Ô¨Ålter the false-positives. The probability of
false negatives being present makes the method incomplete
for ensuring the robustness of a design. However, we sug-
gest techniques to reduce this probability to achieve higher
conÔ¨Ådence.
The rest of the paper is organized as follows: Section II
presents the necessary background regarding the operation-
level models, and the quality-error modeling. In Section III,
we present the proposed method and explain it in details.
Section IV presents the experimental results on the fault-
tolerant fuel controller of Simulink automotive library which
demonstrate the efÔ¨Åcacy of proposed method. A brief discus-
sion on the merits and limitations of the proposed framework
is presented in section V, and Ô¨Ånally, we conclude in
section VI along with the directions for future work.
II. BACKGROUND
In this section, we present the necessary background on
the operation-level modeling, and the quality-fault abstrac-
tion.
A. Operation-level Models
PLANT 
Mechanical
components
OP1
FSM
OP4
Sensor 1
OP2
Time trigger
5ms
Actuator 1
LUT
based
value
estimate
FT selection
Actuator 2
User‚àíInput
(Env. Op.)
Sensor 2
OP3
Hybrid
Automt.
OP5
Sensors
Functions
Actuators
Figure 1. A schematic representation of an operation-level model consist-
ing of sensors, actuators, control and the plant model. The control consists
of software operations with a virtual functional connection between them.
The plant model is a mathematical model of the dynamics of mechanical
components of the system.
Operation-level modeling tools, such as Simulink, pro-
vide a versatile framework for modeling different kinds
of systems, including aeronautical, automotive [9], etc. An
operation-level model (ùëÄùëúùëù) consists of operations (ùëÇùëù)
which have a set of input (ùêºùëõùëúùëù) and output (ùëÇùë¢ùë°ùëúùëù) ports,
and signals (ùëÜùëñùëî) connecting different ports of these opera-
tions. Each operation corresponds to a functional component
of the system, which may be a software code-block, a me-
chanical component, an analog component, or even a sensor.
Each signal corresponds to a virtual data-connection between
operations and may correspond to physical quantities, like
output voltage generated by a Ô¨Ålter, or may correspond to a
data value generated by a software block.
The schematic of an operation-level model can be rep-
resented as a directed graph with operations corresponding
to nodes and signals corresponding to edges (ùëÜùëñùëî ‚äÜ ùëÇùëù √ó
ùëÇùëù). It broadly consists of Ô¨Åve sets of operations, namely
sensor operations, control operations, actuator operations,
plant operations, and environment operations (Figure 1).
Additionally, we note that signals connect sensors to the
control, control
to the actuators, actuators to the plant,
and plant to the sensors, in a cyclic manner. Environment
operations, for example, the ‚Äútime-trigger‚Äù and the ‚Äúuser-
input‚Äù in Figure 1, model the behavior of the environment
and the operator. It is notable that removing signals between
the plant and sensors (or actuators and the plant) causes
the underlying graph structure to be a directed acyclic
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:30:28 UTC from IEEE Xplore.  Restrictions apply. 
316graph (DAG). We call this modiÔ¨Åed operation-level model,
the open operation-level model, and the DAG structure is
represented as ùëÄùëúùëùùëíùëõ(ùëÇùëù, ùëÜùëñùëîùëúùëùùëíùëõ), where ùëÜùëñùëîùëúùëùùëíùëõ ‚äÇ ùëÜùëñùëî.
Loops in the control component may be logically treated
as being connected to a virtual actuator, an operation-free
signal in the plant, and a virtual sensor. In this case when the
signals between the plant and sensors are removed, the graph
structure of the operation-level model becomes a DAG. The
DAG structure makes it easy to formulate the control part of
the system as a satisÔ¨Åability modulo theory (SMT) instance,
for veriÔ¨Åcation purpose.
In most systems of interest, the control system is almost
entirely software based, thereby sensor outputs are imme-
diately converted to data items, and provided as inputs to
the control software components. Edges between operations
denote virtual data-transfer connection between them, which
map the output trajectory of a source operation as the input
trajectory for the destination operation. Note that the given
example schematic (Figure 1) has in-built redundancy, since
the input to ‚ÄúActuator2‚Äù may arrive from either ‚ÄúOP5‚Äù or
the lookup table ‚ÄúLUT based value estimation‚Äù, as selected
by the ‚ÄúFT selection‚Äù block.
The execution behaviour of the operation-level model
of the control and sensors is described by a discrete-time
semantics. At the beginning of each time slot, an input
signal sample is captured by each sensor. Thereafter, various
operations are performed on the outputs of the sensors, in
an order consistent with the topological ordering of the
operations of the DAG. Finally, the operation outputs which
are inputs to the actuators are latched at the beginning of the
next time-slot, and held for one time-slot. This is continued
for the length of given simulation-time.
B. Abstraction of quality errors
Quality-fault
tolerance analysis reasons about
the dif-
ference between signal
trajectories of an erroneous and
a golden (fault-free) signal, called the residue. The fault-
trajectory superimposed on a signal is essentially the residue
trajectory for that signal, when the given fault afÔ¨Çicts the
signal. Abstracting signal trajectory residues to a small set
of representative quality degradations is an important step
towards logical analysis of quality-faults. Modeling various
low level faults such as, stuck-at faults, bit-Ô¨Çip faults, etc.
suitably so that the impact can be tested as early as in the
operation level is beneÔ¨Åcial.
We abstract the effects of quality-faults, manifested as
residue signals, as either noise, shift, or spike errors (Figure
2), which are deÔ¨Åned as follows:
1) Shift: in a signal trajectory is denoted by the max-
imum average deviation in signal value among all
time windows (of small pre-deÔ¨Åned length) within
the simulation window (Figure 2b). The shift fault-
trajectory is a constant trajectory over the simulation
window.
value
value
time
time
(a) Non‚àífaulty signal
(b) Shift in trajectory
value
value
time
(c)Noise on trajectory
time
(d) Spikes on trajectory
Figure 2. The effects of different types of signal quality-faults considered
in this work.
2) Noise: in a signal trajectory is denoted by the ampli-
tude of the overlaying additive random noise signal
(Figure 2c). The noise fault-trajectory is a constant
random noise over the simulation window.
3) Spikes: in a signal
trajectory are denoted by the
number of spikes (Figure 2d). The fault-trajectory for
spikes is a set of pulses at different time-slots lasting
for 2 to 3 time units in the simulation window. The
peak value of these pulses is bound by the upper limit
of the operation-range or data-type (in case the signal
is a digital data).
It may be noted that all the aforesaid measures of quality
degradation are time-invariant and reason about residues
over bounded time intervals. However, while the shift and
noise fault-trajectories uniformly affect the signals over the
simulation window, the same is not the case with spikes. The