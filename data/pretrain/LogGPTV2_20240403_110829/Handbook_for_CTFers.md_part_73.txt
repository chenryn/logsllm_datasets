0030h:
002A0000
00000020002C1080
............
....ga.pExif..o
0040h:
0000006E013B00020000000B00000082
14OS00
47460003
EO0064000R500R10000000
...B.J...
0070h:
0064h:
005800
000000009100000010000626
86Z800
000200006016
0080h:
EA
1C0007
000007
A20000
000087
690004
...........
0090h:
DOADh:
00
TO0000
000000
0oBoh:
Tom Alphin.Micro
：03:12 13:48:32.
0ocoh:
736F667420 436P7270 6F726174696F6B
416C70
0oDoh:
06500000
03000200000014000000590
soft Corporation
OOEOh:
10800
0100h:
00000337370000929200020000000337
7......
............
0110h:
370000BA
TETEOZTETCVEZCOEVEBEOEOEZEOOOOO
00000000008600000.6900.21
...2008:02:1111
0130h:
IC VCZC OC VC SC OC OC ZC OO TC SCYE ZECC VC
OOEO IO SO OO OD TE SEVE ZE EE VETE TE OZ IE
:32:51.2008:02:1
0140h:030000000100060000011A0005:000000
................
111:32:51......
Fig, 9.9 EXIF information in binary
The EXIF data structure is roughly shown in Fig. 9.8 (referenced from http://
www.fifi.org/doc/jhead/exif-e.html). Open this image in the binary editor and com-
pare the EXIF structure to see some of the EXIF information (see Fig. 9.9). We can
use a binary editor to modify the information manually, or we can use tools such as
ExifTool to view and modify the EXIF file infomation.
Addatagtothisimagewith
the
command“exiftool
-comment=ExifModifyTesting /Lighthouse.jpg” and with the command “exiftool
 /Lighthouse.jpg" to view the EXIF information (see Fig. 9.10). We can use this to
hide some of the information in this way.
9.1.3 LSB
LSB is the Least Significant Bit. In most PNG images, each pixel consists of three
primary colors R, G, and B (some images also contain an A channel for transpar-
ency), and each color is typically represented by 8 bits of data (0x00 to 0xFF), Small
changes in pixels cannot be distinguished by the human eye if its lowest bit is
modified. We can hide the information by using the least significant bit of the R, G,
and B color components of each pixel so that each pixel can carry 3 bits of
information.
Prepare an image (see Fig. 9.11), and then hide a string in this image using an
LSB steganography.
---
## Page 645
9.1Steganograpby
633
Alphi
IPTC Digest
1533263933194
pplicatien Record Versior
693209d7c351232255ed533263933194
ation
PiC bigest
ght Flog
ModifyTesting
Width
764
Bits Per
Sample
Beseline DCT, Huffnon coding
bCr4:4:4 (1 1)
0.786
ite Dote
2808:02:11 11:32:51.77
Originet
8:02:11 11:32:51.77
Fig, 9.10 Use exifiool to get EXIF information
[ Aete#o
Fig, 9.11 Prepare an image
Example.
#coding:utf - 8
from PIL import Image
def 1sb_decode (1, infile, outfile) :
f = open (outfile, *vb*)
ing = Image .open (infile)
abyte=0
vidth = ing.size [0]
lenth = 1*8
height = ing. size [1]
count = 0
for h in range (0, height) :
for v in range (0, width) :
---
## Page 646
634
9Misc
pixel = ing-getpixel ( (v, h) )
for i in range (3) :
abyte = (abyte= lenth :
abyte = 0
if count >= lenth :
break
break
f .c1ose ()
def str2bin [s) :
str = **
for i in s :
stx += (bin [ord (4)> [2:1 ) xjust (8, 0′)
return str
def lsb_encode (infile, data, outfile) :
ing = Image open (infile)
vidth = ing-size [0]
height = ing.size [1]
mgg = stx2bin (data)
count = 0
nlen = len(neg)
for h in range (0, height) :
for v in range (0, vidth) :
pixe1 = ing-getpixel ( (v,h) )
rgb=[pixel[0] ,pixe1[1] ,pixe1 [2]]
for i in range (3) :
rgb [1] = (rgb [1]& 0xfe) +(int (msg [count]) &1)
count+=1
if count >= nlen :
mg-putpixel [ (w,h) , (xgb [0] ,zgb [1] , rgb [2]) ]
ing-putpixe1 ( (v, h) , (xgb [0] ,zgb [1] , zgb [2] ) ]
break
if count >=nlen :
if count >= nlen :
break
Ing save (outtile)
break
# Original image
old =*,/teating.png"
# Implicit image
new = ",/out .png"
# Information to be hidden
enc = *LS8_Encode_Testinga
# File for information extraction
flag = ", /get_lag. txt"
---
## Page 647
9.1 Steganography
635
[ Add
品
Fig, 9.12 The implicit image
1sb_decode (18, nev, flag)
lsb_encode (old, enc,nev)
Calling the Isb_encode( ) method generates the implicit image as shown in
Fig. 9.12 and the naked eye does not see the obvious changes.
In CTF, Stegsolve is a common tool for detecting LSB steganography evidence,
but it can also view the different channels of the image, and compare or XOR the
different images. Use Stegsolve to open the generated out.png image and extract the
least significant bit of the three channels R, G, and B. See Fig. 9.13, which can also
extract the string just hidden in the image.
For common steganography methods such as LSB in PNG and BMP images, we
can also use the zsteg tool (https://github.com/zed-Oxff/zsteg) to directly automate
the identification and extraction.
9.1.4BlindWatermarks
Digital watermarking technology can be used to embed information in digital media
such as pictures and audio, but it cannot be distinguished by human sight or hearing
and can only be read by special means.
jo ueuop ouanbang no pegeds a u pappe sq ueo saeu u sxeaem pug
the image. The spatial domain technique is a simple way to embed watermark
information directly in the signal space, and LSB can be considered as a way to
add watermarks in the spatial domain.
Here, we focus on blind watermarks added in the frequency domain. What is the
frequency domain? Figure 9.14 illustrates the time domain of a piece of music. The
music we normally hear is a wave that vibrates continuously in the time domain.
But this music can also be represented as a musical score as shown in Fig. 9.15,
where each note between the lines can be represented at a different pitch or
frequency. A musical score can be thought of as a representation of a piece of
music in the frequency domain, reflecting changes in the frequency of the music. If
---
## Page 648
636
9Misc
ss_Eneo de_Testi
ng.
333333333333
tttttttttttttetr
3333333333333333
3333333333333333
BtPlane
OLSBFnt
RGB
ORBG
OBRG
GBR
MOADLG
Sere Text
Fig, 9.13 Use Stegsolve extract the least significant bit of the three channels R,G,B
Fig, 9.14 The time don
ain of a piece of music
Fig, 9.15 Musical score
---
## Page 649
9.2 Compressed Archive Encryption
637
the waveform in the time domain is reduced to a sine wave, it can be represented in
the frequency domain by a single note.
The Fourier Transform is used to convert a signal represented in the time or
spatial domain into the frequency domain. The Fourier Transform is derived from
the study of the Fourier series. In the study of the Fourier series, a complex periodic
function can be represented as the sum of a series of simple sine waves. By applying
the Fourier transform to the signal function, the sine wave of each frequency can be
separated, and the spectrum of the different component frequencies can be obtained
seusis, o o sapau ueo no, ureuop Kouanban a u sxead se wo ussandx q
and Systems" textbook for more information.
After getting the frequency domain image of the image, the watermark is encoded
and then distributed to the frequencies, and then superimposed on the frequency
domain of the original image, apply the inverse Fourier Transform to the spectrum,
and then the image with the blind watermark is obtained. This operation is equivalent
to adding noise to the original signal, which spreads over the whole image and is not
likely to damage the image in the spatial domain.
To extract a blind watermark from an image, simply subtract the original image
and the image with the watermark in the frequency domain, and then decode the
watermark according to the original watermark encoding method.
The BlindWaterMark (htps://github.com/chishaxie/BlindWaterMark) tool can
be used to add and extract blind watermarks from images in CTF. Similar techniques
are often used in audio. For audio spectrum steganography, we can simply use tools
like Adobe Audition to view the spectrum directly and get the flag.
9.1.5Steganography Summary
There are many other ways that images can be steganographed. Broadly speaking, as
Kq puy o nop s e Xem r u aeu o u uappq s uoeuou a se Suo
ordinary means, it can be called image steganography. In this section, we only briefly
introduced some common ways of image steganography. After understanding the
qde3oueois o An ueo suopeu Kudeloueaans sleu jo saduud sseq uounuoo
images in different ways on their own.
9.2 Compressed Archive Encryption
1. Brute-force cracking
Brute-force cracking is the most direct and simple way to attack, suitable for simple
passwords or when the format or range of the password is known, related tools are
ARCHPR on Windows or Linux command-line tool fcrackzip.
---
## Page 650
638
9Misc
0000h1
0010h:
504B0304140000000800EA22A24E0738
PK..........".N..
0020h:
G3 LL 18 91 60 08 96 8L 96 32 L9 19 99 99 85 
0030h:
4BCE4F498D0F492D2EC9CC4B0700504B
KIo..I-.tK.PK
0040h:
0050h:
1000002010
00000000000000002100000032
1000800EA22A2
24E07
.p.....
. *........6*.N..
0060h:
65745F
........
...$...
0070h1
0000000000020008229190999
flag.txt.
...get_
0080h:
:0600
3A5BD601006C9TD75B00D501504B0506
0DAOh1
：10..1Y-[.O.PK..
0080h:00 00
0000002C00000O3S0010001000000000
Fig, 9.16 Modify binary data
2. ZIP pseudo-encryption
In a ZIP file, the file header and the core directory area of each file are marked with
common token bits. The generic token bit in the core directory area is offset from the
core directory area header 504B0102 by 8 bytes, which itself occupies 2 bytes, and
the lowest bit indicates whether the file is encrypted or not (see Fig. 9.16). The
passphrase will be asked when opening the archive again after changing the bit to
Ox01. However, at this time, the content of the file is not really encrypted, so it is
called pseudo-encryption and can be opened normally by changing the flag bit back 
to 0.
In addition to modifying the Universal Flags bit, it is also possible to extract files
from a zip file with pseudo-encryption using the “binwalk e” command of the
aforementioned Binwalk tool. In addition, it is possible to open pseudo-encrypted
ZIP archives directly in macOS.
Similarly, the generic flag bit at the file header is offset 6 bytes from the file
header 504B0304, which itself occupies 2 bytes, the lowest bit indicating whether
the file is encrypted or not. However, pseudo-encrypted tarballs with this bit changed
to Ox01 cannot be extracted directly by Binwalk or MacOS, and the flag bit needs to
be modified manually.
3. known-plaintext attacks
The password we set for the ZIP file is first converted into three 4-byte keys, and then
these three keys are used to encrypt all the files. If we can somehow get one of the
files in the zip file, and then compress it in the same way, there will be a 12-byte
difference in the size of the same file in the two zip files, and then we can use
ARCHPR to compare and filter them, we can get the key, and then recover the
Jop nem uo am ~spuomssed saoqs rog ax s o upuoose atg dz pasduouaun
ARCHPR to recover them, but we are more concerned about the contents of the
archive, so we often choose not to brute-force attack the passwords. This type of
attack is a known-plaintext attack. Due to space limitations, we will not go into the
specific principles of this attack here, and interested readers can search for relevant
information to leam more.
---
## Page 651
9.4 Forensic Techniques
639
9.3 Summary
There are few ways to attack a compressed archive, and it is generally difficult to
crack the files in an encrypted archive if a strong password is used and the files in the
archive are not compromised, or if different passwords or encryption methods are
used to encrypt different files in the same packet.
9.4 Forensic Techniques
In reality, electronic forensics refers to the process of obtaining, preserving, analyz-
ing, and presenting evidence of computer intrusion, sabotage, fraud, assault, and
other crimes in a way that conforms to legal norms, using computer software and
hardware technology. In CTF, forensics-related challenges are the process of
obtaining flags placed by challenge authors by analyzing files containing relevant
records and traces, such as traffic packets, log files, disk or memory images, and so
on. As a result, it may take a long time to analyze every one of them, so it is
necessary to know how to analyze them efficiently.
This section will introduce three common forensic scenarios in CTF, namely
traffic analysis, memory image forensics, and disk image forensics, and the reader
needs to have prior knowledge of computer network fundamentals, file system
fundamentals, and operating system fundamentals.
9.4.1Traffic Analysis
9.4.1.1Wireshark and Tshark
A traffic packet is generally a PCAP formatted traffic file obtained by capturing
 se s so o  o p    
graphical tool Wireshark and its command-line tool Tshark can analyze such traffic
packets. Wireshark is freeware (https://www.wireshark.org/) and supports the anal-
ysis of multiple protocols, as well as traffic capture.
After loading a traffic packet, you can se the network traffic in Wireshark, in
which protocol and status are distinguished by color. Enter a filter expression in the
filter field to filter the trafic and see the desired network traffic. If you want to filter
the network traffic of the FTP protocol, enter the FTP expression to see the result (see
Fig. 9.17).
Tshark is a command-line tool for Wireshark. Wireshark builds packet metadata
in memory, which will make an overhead in performance, therefore Tshark is useful
command-line parameters are very complex and can be found at https://www.
---
## Page 652
0+9
9Misc
542,234,217.142
10.154.43.159
158,43.199
40.168.43.199
0.254.217.4
130.158.40.139
Fig, 9.17 Wireshark show FTP protocol
TPd 3.9.2)
1P92
e1 538P1e
Iogin vith USER