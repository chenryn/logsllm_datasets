### Window Scaling and Firewall Configurations

1. **Window Scaling Not Supported**: In this configuration, window scaling is not enabled.
2. **Window Scaling with Factor**: The window size is calculated based on the window scaling factor.
3. **Fixed Size Greater than 128M**: The fixed window size can be set to 1G, as observed in nationwide cellular networks.

Additionally, there is a window size listed as “-2G,” which indicates that the left window is fully open, but no packets are allowed for the right window. This results in either a left-only or right-only window. Interestingly, many networks have been found to have left-only window firewalls. For nationwide carriers, this is often due to internal firewalls buffering out-of-order packets. However, this may not be the case for other carriers. Upon closer inspection, it was discovered that some firewalls actually set an even smaller right window (sometimes below 8K) based on the initial receive window size in the client-side SYN, rather than the window-scaling factor. This behavior aligns with ideal firewall design, which adjusts the window size based on the currently advertised receive window. The left window, however, remains fixed to accommodate retransmissions of lost packets. Since we did not test window sizes smaller than 64K, it is possible that some left-only window carriers could also be left&right. Regardless, these minor variations do not significantly impact the attack, as the window size can be determined offline.

### Window Moving Criteria

We found that 17 carriers have shiftable windows, all with left&right configurations, making it difficult to infer the exact sequence number but still susceptible to attacks. The majority of 30 carriers, however, allow the exact sequence number to be inferred.

### Intermediate Hop Feedback

**Methodology**:
To determine if any intermediate hop is responsive, we devised the following probing technique: from previous experiments, we gather an in-window and an out-of-window sequence number. We then conduct two TCP traceroutes using these sequence numbers. If any hop responds to the first traceroute (with the in-window sequence number) but not the second, we flag such a hop. Additionally, we send two traceroutes (ICMP error messages) embedding a correct four-tuple and a wrong one (with a modified port number). If any hop responds to the correct one but not the incorrect one, we consider single ICMP packet probing possible.

**Results**:
Out of the 47 carriers with sequence-number-checking firewalls, 24 have responsive intermediate hops that reply with TTL-expired ICMP packets. Eight carriers have NATs that allow single ICMP packet probing to infer active four-tuples.

### Vulnerable Applications

The TCP sequence number inference attack opens up new attack vectors, breaking the common assumption that communication is safe on encrypted/protected WiFi or cellular networks. This attack works regardless of the access technology as long as no application-layer protection is enabled. Below, we illustrate the broad impact of the attack by examining several affected applications.

#### Web-based Attacks

**Facebook/Twitter**:
- **Login Pages**: Both desktop and mobile browser login pages for Facebook and Twitter do not use SSL, making them vulnerable to phishing attacks where the login page can be replaced.
- **Post-login Actions**: When users are logged in, webpages by default are not SSL-enabled (unless turned on in account settings). This allows JavaScript injection, which can perform actions on behalf of the user, such as posting messages or following other users.
- **Firewall Configuration**: Both Facebook and Twitter servers have host-based stateful firewalls that satisfy requirement S1, enabling Reset-the-server hijacking. Gaining access to users' social networking accounts is a significant privacy breach.

**Banking**:
- **Non-SSL Login Pages**: Out of 68 banking websites surveyed, 4 were found to have non-SSL login pages. One website uses SSL for most pages but not for a specific account query page containing a login form. Another website has a login helper program download link in HTTP, allowing the binary to be replaced.
- **Financial Loss**: Successful attacks can cause direct financial loss. All bank servers deploy host-based stateful firewalls that satisfy requirement S1.

#### Application-based Attacks

**Facebook App**:
- **Built-in UI**: The latest version of the Facebook app (as of October 5, 2011) has a built-in UI for the login page, making it impossible to replace. However, two sensitive connections do not use SSL.
  - **Main Page**: Fetched through HTTP, subject to tampering.
  - **Critical JavaScript**: Fetched through HTTP, allowing attackers to inject malicious JavaScript to perform actions on behalf of the user.

**Windows Live Messenger App**:
- **Protocol**: The protocol is in plaintext without encryption in most client implementations, allowing attackers to inject arbitrary messages while a user is logged in. The protocol does not require any nonce carried in the server’s notification of incoming messages. An attacker can post malicious links (e.g., to spread viruses or spam).

**Stocks App**:
- **Google Finance**: The top stocks app on the Android market uses Google finance through HTTP to display stock prices. This allows attackers to inject misleading prices, potentially causing financial loss. Attackers can redirect requests to their own server to read which stocks the app is requesting and send corresponding fake prices.

**Advertisements**:
- **AdMob**: Advertisements provided through AdMob are fetched over HTTP. Attackers can replace original advertisements with their own to gain revenue. This attack is not intrusive and can be carried out repeatedly for long-term benefits, as long as the malware is kept on the device.

#### Server-side Attacks

**Establish Spoofed Connections**:
- **Mail Server Spamming**: Using spoofed IPs increases the probability that a spam email is accepted by the mail server, as IP-based spam blacklists are unlikely to catch all bad IPs at once. Without IP spoofing, a repeated spammer's IP is likely to be blacklisted quickly.
- **DoS of Servers**: Web servers and other public-facing servers are subject to DoS attacks due to a large number of spoofed connections. This is different from SYN flooding, as the connections are actually established, making SYN-cookie-based defense ineffective. We tested this against our own sshd server running on Ubuntu 11.04 and found that a 0.6 conn/s rate was enough to cause new legitimate SSH connections to be rejected sporadically when the number of active connections reached a certain limit.

### Discussion and Conclusion

After constructing a diverse set of attacks, we explore what went wrong and how to fundamentally correct them. We discuss the following aspects:

**Firewall Design**:
- **Information Leakage**: The more checks a firewall performs, the more information it can leak. For example, if it checks the four-tuple and allows only packets belonging to an existing session, an attacker can infer which four-tuples are active. Similarly, if it checks sequence numbers, the sequence number inference attack becomes possible. Our study suggests that firewall middlebox designs should be carefully evaluated for potential leakage of sensitive network state.

**Side-channels**:
- **Feedback Mechanisms**: Two side-channels serve as feedback for the sequence number inference: intermediate hop IPID and host packet counter. While randomized IPIDs can mitigate IPID issues, packet counters remain a challenge. Adding permission requirements to read packet counters might help, but many users may simply grant the permission. The firewall not checking the TCP timestamp option (likely due to overhead concerns) allows attackers to leverage the less noisy PAWSEstab counter, highlighting a performance vs. completeness trade-off in firewall design.

**Other Side-effects**:
- **Implementation and Setup**: Coarse-grained ISN predictability and server silence after being reset are side-effects of Linux TCP implementation and host-based firewalls. These well-intended implementations facilitate attacks. Even if these side-effects are eliminated, they only prevent Reset-the-server hijacking.

**HTTPS-only World**:
- **SSL and Security**: SSL should defeat most attacks, and our study aims to push for an HTTPS-only world. However, even with SSL, if a user types a URL like `www.chase.com`, the browser initiates a normal HTTP request first. An attacker can respond directly with a phishing page instead of redirecting to the HTTPS site, with the only difference being the absence of the HTTPS icon, which average users may not notice.

In conclusion, we are the first to report the TCP sequence number inference attack using state kept on middleboxes and the attacks built on it. We demonstrate that many networks and applications are affected today and provide insights into why they occur and how they can be mitigated.