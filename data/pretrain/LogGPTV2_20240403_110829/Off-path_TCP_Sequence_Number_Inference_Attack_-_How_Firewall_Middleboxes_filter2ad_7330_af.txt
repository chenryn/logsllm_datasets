(window scaling is not supported), 2). window scaling —
where the size is calculated based on the window scaling
factor, 3). ﬁxed > 128M — could be 1G as found in the
nation-wide cellular network. There is one last window size
listed as “-2G” which means that the left window is wide
open, but no packets are allowed for the right window.
Left-only or right-only window. Interestingly, we dis-
cover that many networks have left-only window ﬁrewalls.
For the nation-wide carrier, it is because the internal ﬁrewall
buffers out-of-order packets as discussed before. However,
we found this may not be the case for other carriers. Upon
a closer inspection, we realize that some ﬁrewalls actually
have an even smaller-than-64K right window set based
on the initial receive window size (sometimes below 8K)
carried in the client-side SYN (instead of based on the
window-scaling factor). This behavior matches the ideal
ﬁrewall
the window size based
on the currently advertised receive window. On the other
hand, the left window is still kept to be ﬁxed in case old
that dynamically adjust
packets are lost and retransmitted. Since we did not test
window sizes smaller than 64K, it is possible that some
of the left-only window carriers can in fact be left&right.
Regardless, such minor variations do not impact the attack
as the window size can be obtained ofﬂine.
Window moving criteria. We found 17 carriers to have
shiftable windows and all with left&right windows, making
it difﬁcult to infer the exact sequence number but still
susceptible to attacks. The other majority of 30 carriers,
however, allow the exact sequence number to be inferred.
B. Intermediate hop feedback
Methodology. We devise the following probing tech-
nique to infer if any intermediate hop is responsive: from
the previous experiments we can gather an in-window and
an out-of-window sequence number. We conduct two TCP
traceroutes with those two sequence numbers respectively.
If there is any hop that responds to the ﬁrst traceroute (with
in-window sequence number) but not to the second one, we
ﬂag such hop. Additionally, we send two traceroutes (ICMP
error messages) embedding a correct four-tuple and a wrong
one (with a modiﬁed port number). If any hop responds to
the correct one but not the incorrect one, we consider the
single ICMP packet probing as possible.
Results. Out of all the 47 carriers that have sequence-
number-checking ﬁrewalls, 24 carriers have responsive in-
termediate hops that reply with TTL-expired ICMP packets.
8 carriers have NAT that allow single ICMP packet probing
to infer active four tuples.
VII. VULNERABLE APPLICATIONS
The TCP sequence number inference attack opens up
a whole new set of attack venues. It breaks the common
assumption that communication is relatively safe on en-
crypted/protected WiFi or cellular networks that encrypt the
wireless trafﬁc. In fact, since our attack does not rely on
snifﬁng trafﬁc, it works regardless of the access technology
as long as no application-layer protection is enabled. In this
section, we illustrate the broad impact of the attack by a
mere glimpse at a number of impacted applications.
A. Web-based attack
Facebook/Twitter: We found that the login pages for
both desktop and mobile browser are not using SSL. They
are subject to phishing attack where the login page can be
replaced. Further, when users are logged in, webpages by
default are not SSL-enabled (unless turned on in the account
settings). It allows Javascript injection which simply sends
a HTTP post request to perform actions on behalf of the
users such as posting a message or following other users.
Both Facebook and Twitter servers have host-based stateful
ﬁrewalls that satisfy requirement S1, which enables Reset-
the-server hijacking. In both cases, gaining access to users’
social networking account is a huge privacy breach.
Banking: Similar to a previous study [17], we survey
68 banking websites from a keyword “bank” search from
359
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
Google, 4 of which are found to have non-SSL login
page. There is one other website which uses SSL in most
pages but not one speciﬁc account query page which also
contains a login form. Also, one website has a login helper
program download link in HTTP that allows the binary to
be replaced. In all cases, successful attacks can cause direct
ﬁnancial loss. We also veriﬁed that all bank servers deploy
host-based stateful ﬁrewalls which satisfy requirement S1.
B. Application-based attack
Facebook app: The latest version of the Facebook app as
of this writing was updated on October 5, 2011. We found
that it is impossible to replace the login page as it is part of
the built-in UI (i.e., not fetched over the network). However,
we do ﬁnd two sensitive connections not using SSL. Even
though we did not test our attacks speciﬁcally on them, it
is quite obvious that they are subject to our attacks.
• The main page (e.g., news feed) is fetched through
HTTP (html/text) which is subject to tampering.
• A critical Javascript is fetched through HTTP. An
attacker can inject malicious Javascripts to perform actions
on behalf of the user just as the web-based attack.
Windows Live Messenger app: The protocol [11] is in
plaintext without encryption in most client implementations,
which allows an attacker to inject arbitrary messages while a
user is logged in. The protocol does not require any nonce
carried in the server’s notiﬁcation of incoming messages.
We veriﬁed that an attacker can indeed succeed in posting
malicious links (e.g., to spread virus or spam).
Stocks app: The number one stocks app on the Android
market uses Google ﬁnance through HTTP to display stock
prices. It allows an attacker to inject misleading prices
which can cause potential ﬁnancial
loss. Moreover, we
veriﬁed that instead of blindly injecting HTTP responses
to a request (to guess for a particular stock), an attacker
can inject “HTTP 301 – Moved Permanently” message to
redirect the request to its own server which can read which
stocks the app is requesting and send the corresponding
fake prices. Unlike a browser with an address bar, such
redirection happens transparently.
Advertisement: We tested that advertisements provided
through AdMob are fetched over HTTP. An attacker can
thus replace the original advertisement with his own to gain
revenue. Note that this attack is not intrusive and can be
carried out repeatedly to achieve long-term beneﬁts, as long
as the malware is kept on the device.
C. Server-side attack
The “Establish spoofed connections” attack described in
§IV-B3 allows an attacker to establish connections with a
target server using many spoofed IPs. It can be applied in
the following scenarios:
Mail server spamming. Using spoofed IPs generally can
increase the probability that a spam email is accepted by
the mail server since IP-based spam blacklists are unlikely
to catch all bad IPs at once. Without IP spooﬁng, an IP
360
repeatedly sending spam is likely blacklisted very quickly.
We tested that we can successfully deliver emails by simply
sending a spoofed data packet (with SMTP commands) to
our departmental mail server and acknowledging server’s
response (via a number of spoofed ACK packets).
DoS of servers. Web server and other public-facing
servers are subject to DoS attacks due to a large number
of spoofed connections. Note that it is different from SYN
ﬂooding in that the connections are actually established,
so SYN-cookie-based defense is not effective. We experi-
mented the attack against our own sshd server running on
Ubuntu 11.04 (server kernel build) and found that the 0.6
conn/s rate is in fact enough to cause new legitimate ssh
connections rejected sporadically when the number of active
connections reach a certain limit. We suspect it is due to
a security kernel counter-measure triggered to block new
connections, which also causes the collateral damage.
VIII. DISCUSSION AND CONCLUSION
After constructing a diverse set of attacks, we explore
what actually went wrong and how we can fundamentally
correct them. We discuss the following four aspects.
Firewall design. It is interesting and surprising to realize
that the more checks the ﬁrewall performs, the more infor-
mation it can leak. For instance, if it checks the four-tuple
and allows only packets belonging to an existing session
to go through, then an attacker can infer which four tuples
are active. If it checks sequence number, then the sequence
number inference attack becomes possible. Similarly, if a
ﬁrewall checks acknowledgment number according to RFC
793 [25] where half of the acknowledge number space is
considered valid (as is in the latest Linux TCP stack im-
plementation), then it may allow an attacker to additionally
infer the appropriate acknowledgment number, which can
help preemptive-SYN attack eliminate the requirement of
IP spooﬁng in the client’s network. Our study suggests that
ﬁrewall middlebox designs should be carefully evaluated on
potential leakage of sensitive network state.
Side-channels. We have summarized two side-channels
that serve as feedbacks of the sequence number inference,
without which the attack would not be possible. They are
intermediate hop IPID and host packet counter. We study
whether they are fundamentally difﬁcult to eliminate. For
IPID, the answer is negative, as many host OSes such as
Linux already use randomized IPIDs. However, for packet
counter, it seems that such aggregated information is always
available on most OSes and considered harmless. Our study
suggests that such information can be abused. One way to
mitigate the problem is to add a permission requirement
to read such packet counters. However, many users may
simply grant the permission. The other important aspect is
that the ﬁrewall does not check the TCP timestamp option
(likely due to overhead concerns) which allows an attacker
to leverage the less noisy PAWSEstab counter. It suggests a
dilemma of the ﬁrewall design – it has to tradeoff between
performance and the completeness of checks.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply. 
Other side-effects. We discover several other notable
side-effects of the current host TCP implementation or
setup. For instance, the coarse-grained ISN predictability
is a byproduct of the Linux TCP implementation. Also,
the fact that a server can be kept silent after being reset is
caused by the side-effect of the server’s host-based ﬁrewalls.
Interestingly, such implementations and setups are well
intended, yet they in fact facilitate the attacks. In the end,
we do not think they are the culprit of the problem because
even if these two side-effects are eliminated, it prevents
only the Reset-the-server hijacking.
HTTPS-only world. In general, SSL should be able to
defeat most attacks. Hopefully one of the results of our
study is to help push the HTTPS-only world. We do note
that even if SSL is employed by the websites, there is a
special case where an attack may still succeed. Speciﬁcally,
when a user types in a URL such as www.chase.com,
the default browser behavior is to initiate a normal HTTP
request ﬁrst unless the user speciﬁcally types in https://
www.chase.com. It is generally the server that subsequently
redirects the browser to the https site via a “301 – Moved
Permanently” HTTP response. Instead of redirecting the
browser, an attacker can simply respond directly with a
phishing page to the initial HTTP request. In this case, the
only difference is that the browser will not show the https
icon. However, average users may not notice.
In conclusion, we are the ﬁrst to report the TCP sequence
number inference attack using state kept on middleboxes
and attacks built on it. We demonstrate that many networks
and applications are affected today. We also provide insights
on why they occur and how they can be mitigated.
REFERENCES
[1] CERT Advisory CA-1995-01 IP Spooﬁng Attacks and
http://www.cert.org/
Hijacked Terminal Connections.
advisories/CA-1995-01.html, Retrieved on 03/04/2012.
[2] CERT Advisory CA-2001-09 Statistical Weaknesses in
http://www.cert.org/
TCP/IP Initial Sequence Numbers.
advisories/CA-2001-09.html, Retrieved on 03/04/2012.
[3] Check Point – What’s New for FireWall-1/TCP Se-
quence Checking.
http://www.checkpoint.com/ngupgrade/
whatsnew/products/features/tcpseqcheck.html, Retrieved on
03/04/2012.
[4] Cisco Security Advisory: Cisco Secure PIX Firewall
http://www.cisco.com/en/US/
TCP Reset Vulnerability.
products/products security advisory09186a00800b1397.
shtml, Retrieved on 03/04/2012.
[5] Comet (programming). http://en.wikipedia.org/wiki/Comet
(programming), Retrieved on 03/04/2012.
[6] Linux Blind TCP Spooﬁng Vulnerability.
securityfocus.com/bid/580/info, Retrieved on 03/04/2012.
http://www.
[7] Linux: TCP Random Initial Sequence Numbers.
kerneltrap.org/node/4654, Retrieved on 03/04/2012.
[8] Stateful Firewall and Masquerading on Linux.
http://
www.puschitz.com/FirewallAndRouters.shtml, Retrieved on
03/04/2012.
http://
[9] TCP hijacking video demo. http://youtu.be/T65lQtgUJ2Y,
Retrieved on 03/04/2012.
[10] Access Point Name.
http://en.wikipedia.org/wiki/Access
Point Name, Retrived on 03/04/2012.
[13] R. Beverly, A. Berger, Y. Hyun, and k claffy. Understanding
the Efﬁcacy of Deployed Internet Source Address Validation
Filtering. In Proc. ACM SIGCOMM IMC, 2009.
[14] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel
leaks in web applications: a reality today, a challenge tomor-
row. In Proc. of IEEE Security and Privacy, 2010.
[15] Cisco. Cisco ASA 5500 Series Conﬁguration Guide using
the CLI, 8.2. http://www.cisco.com/en/US/docs/security/asa/
asa82/conﬁguration/guide/conns tcpnorm.html, Retrieved on
03/04/2012.
[16] R. Ensaﬁ, J. C. Park, D. Kapur, and J. R. Crandall.
Idle
Port Scanning and Non-interference Analysis of Network
Protocol Stacks using Model Checking. In Proc. of USENIX
Security Symposium, 2010.
[17] L. Falk, A. Prakash, and K. Borders. Analyzing websites for
user-visible security design ﬂaws. In Proc. of Usable privacy
and security, 2008.
[18] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission re-delegation: attacks and defenses. In Proc. of
USENIX Security Symposium, 2011.
[19] F. Gont and S. Bellovin. Defending Against Sequence
Number Attacks. RFC 6528, 2012.
[20] V. Jacobson, R. Braden, and D. Borman. TCP Extensions
for High Performance. RFC 1323, 1992.
[21] Juniper. Stateful Inspection Firewalls. http://www.abchost.
sk/download/204-4/juniper-stateful-inspection-ﬁrewall.pdf,
Retrieved on 03/04/2012.
[22] S. Kamara, S. Fahmy, E. Schultz, F. Kerschbaum, and
M. Frantzen. Analysis of Vulnerabilities in Internet Fire-
walls. In ”Computers & Security”, 2003.
[23] G. LEECH, P. RAYSON, and A. WILSON. Procfs Analy-
sis. http://www.nsa.gov/research/ ﬁles/selinux/papers/slinux/
node57.shtml, Retrieved on 03/04/2012.
[24] lkm. Blind TCP/IP hijacking is still alive.
Magazine, issue 64, 2007.
In Phrack
[25] J. Postel. TRANSMISSION CONTROL PROTOCOL. R-
FC 793, 1981.
[26] Z. Qian, Z. M. Mao, Y. Xie, and F. Yu.
Investigation of
Triangular Spamming: A Stealthy and Efﬁcient Spamming
Technique. In Proc. of IEEE Security and Privacy, 2010.
[27] A. Ramaiah, R. Stewart, and M. Dalal.
Improving TCP’s
Robustness to Blind In-Window Attacks. RFC 5961, 2010.
[28] E. S. Guha, K. Biswas, B. Ford, S. Sivakumar, and P. S-
risuresh. NAT Behavioral Requirements for TCP. RFC 5382,
2008.
[29] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapa-
dia, and X. Wang. Soundcomber: A Stealthy and Context-
Aware Sound Trojan for Smartphones. In NDSS, 2011.
[30] D. X. Song, D. Wagner, and X. Tian. Timing Analysis of
Keystrokes and Timing Attacks on SSH. In Proc. of USENIX
Security Symposium, 2001.
[31] J. Touch. Defending TCP Against Spooﬁng Attacks. R-
FC 4953, 2007.
[32] Z. Wang, Z. Qian, Q. Xu, Z. M. Mao, and M. Zhang. An
In
Untold Stody of Middleboxes in Cellular Networks.
SIGCOMM, 2011.
[33] P. A. Watson. Slipping in the Window: TCP Reset Attacks.
In CanSecWest, 2004.
[34] Q. Xu, J. Huang, Z. Wang, F. Qian, A. Gerber, and Z. M.
Mao. Cellular Data Network Infrastructure Characterization
and Implication on Mobile Content Placement. In Proc. ACM
SIGMETRICS, 2011.
[35] K. Zhang and X. Wang. Peeping Tom in the Neighborhood:
Keystroke Eavesdropping on Multi-User Systems. In Proc.
of USENIX Security Symposium, 2009.
[11] MSN Messenger Protocol. http://www.hypothetic.org/docs/
msn/, Retrived on 03/04/2012.
[12] S. M. Bellovin. A Look Back at “Security Problems in the
TCP/IP Protocol Suite”. In ACSAC, 2004.
361
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:32 UTC from IEEE Xplore.  Restrictions apply.