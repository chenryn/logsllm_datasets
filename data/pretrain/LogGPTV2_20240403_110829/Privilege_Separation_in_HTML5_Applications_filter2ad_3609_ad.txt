### Code Changes
Apart from the application-independent code, no changes were required. The parent and child shims ensure a seamless redesign. 

### Separation
Due to a bug in Chrome, the current Awesome Screenshot extension uses an NPAPI binary to save large (>2MB) images. For this work, we used the HTML5 version, which does not support saving large files. This is a temporary limitation.

We thoroughly tested the application's functionality and did not observe any incompatibilities.

### Unbundling
In the original version of Awesome Screenshot, the image editor (editor.html) accepts the image from background.html and allows the user to edit it, but runs with full extension privileges—an example of bundling. Similarly, popup.html only needs to forward the user’s choice to background.html but runs with all of the extension’s privileges.

In our privilege-separated implementation, the editor code, now stored in editor.txt, runs within a temporary origin. The policy grants it access to the sendRequest API for sending exit and ready messages and receiving image data from the background page.

### TCB Reduction
The image editor in the original Awesome Screenshot extension uses UI and image manipulation libraries (over 500KB of complex code), which run with the same privileges as the extension. This means these libraries can take screenshots, log browsing history, and access user data on any website. While some functions need these privileges, the entire codebase does not.

In our privilege-separated implementation, the amount of code running with full privileges (TCB) decreased by a factor of 58. We found that the UI and image manipulation libraries, specifically jQuery UI, use dynamic constructs like innerHTML and eval. Our design moves these potentially vulnerable constructs to an unprivileged child.

The child can still request privileged function calls via the interface provided by the parent. However, this interface is thin, well-defined, and easily auditable. In the non-privilege separated design, the UI and image libraries run with full privileges, requiring the entire codebase to be audited.

### Example Policy
In addition to unbundling the image editor from the screenshot component, the parent can enforce stronger, temporal policies. For instance, the parent can require that the captureVisibleTab function is only called once after the user clicks the capture button. Any subsequent calls must be preceded by another button click. Such temporal policies are impossible to express and enforce in current permission-based systems.

### 5.2 SourceKit Text Editor
SourceKit is an HTML5 text editor for documents stored on Dropbox. It uses open-source components like the Ajax.org cloud editor and Dojo toolkit, along with Dropbox REST APIs. SourceKit includes a file-browser pane and supports multiple files, themes, and syntax highlighting. The application consists of 15MB of JavaScript code, all of which runs with full privileges.

#### Privilege Separation
In our least-privilege design, the entire application runs in a single child. Redesigning SourceKit to move code to an unprivileged temporary origin was seamless due to library shims. A key change was replacing the included Dojo toolkit with its asynchronous version, as the synchronous XMLHttpRequest calls cannot be proxied by postMessage. The asynchronous version of Dojo is freely available on the Dojo website. This change is not included in the lines modified in Table 1.

#### Unbundling
Functionally, SourceKit is a single Chrome application with no bundling. Popular websites, such as GitHub, use the text editor module as an online text editor, where it runs bundled with the main application, inheriting its privileges and increasing the attack surface. Our redesign directly applies to these online text editors.

#### TCB Reduction
In our privilege-separated SourceKit, the amount of code running with full privileges reduced from 15MB to 5KB. This reduction is mainly due to moving the Dojo Toolkit, syntax highlighting code, and other UI libraries to an unprivileged principal. These libraries, particularly the Dojo Toolkit, rely on dangerous, dynamic constructs like eval, string arguments to setInterval, and innerHTML. In our redesign, this code executes unprivileged.

#### Code Change
In addition to switching to asynchronous APIs, we modified one internal function in SourceKit to use asynchronous APIs. Specifically, SourceKit relied on synchronous requests to load files from dropbox.com. We changed it to use an asynchronous mechanism instead, modifying only 13 lines of code.

#### Example Policy
In the original application, all code runs with the tabs permission, allowing access to the user’s browsing history and dropbox.com. In our privilege-separated design, the policy only allows the child access to the tabs.open and tabs.close Chrome APIs for accessing dropbox.com. It also forwards tab events only for dropbox.com URIs. Thus, the child has access to the user’s browsing history only for dropbox.com, not all websites. Implementing this policy requires only two lines of code.

SourceKit accesses Dropbox using the Dropbox OAuth APIs. At first run, SourceKit opens Dropbox in a new tab, where the user can grant the requisite OAuth access token. The parent can allow access to the tabs privileges only at first run and disable it once the child receives the OAuth token. Such temporal policies cannot be expressed by install-time permissions in existing platforms.

We can also enforce stronger policies for data separation. By default, the Dropbox JS API stores the OAuth access token in localStorage, accessible by all the code in the application. Instead, the policy code can store the OAuth token in the parent and append it to all dropbox.com requests, mitigating data exfiltration attacks. Such application-specific data-separation policies cannot be expressed in present permission systems.

### 5.3 SQL Buddy
SQL Buddy is an open-source tool for administering MySQL databases via a web browser. It is functionally similar to phpMyAdmin and supports creating, modifying, or deleting databases, tables, fields, or rows; SQL queries; and user management. SQL Buddy uses the MooTools JS library for an AJAX front-end and the MySQL user table for authentication.

#### Privilege Separation
We modified SQL Buddy to execute all its code in an unprivileged child. To ensure no code is interpreted by the browser, we required all PHP files to return a Content-Type header of text/plain. Only two new files, buddy.html and login.html, execute in the browser, initialized by the bootstrap code.

#### Unbundling
A typical SQL Buddy installation runs at www.example.net/sqlbuddy, easing database management for the application at www.example.net. Classic operating system mechanisms can isolate SQL Buddy and the main application on the server side. However, on the client side, SQL Buddy runs with full application privileges. An XSS vulnerability in SQL Buddy is equivalent to one in the main application, as it is not isolated. SQL Buddy inherits all the privileges of the application, including special client-side privileges like camera and geolocation access.

In our privilege-separated redesign, a restrictive policy on the child mitigates SQL Buddy bundling. The parent allows the child XMLHttpRequest access only to /sqlbuddy/.php URIs, isolating it from the main application.

#### Code Change
The key change to the SQL Buddy client-side code was converting the login script. The original system returned a new login page on a failed login. We changed it to return an error code over XMLHttpRequest, and the client-side code shows the new login page, preserving the application behavior. This change required modifying only 11 lines of code.

#### TCB Reduction
SQL Buddy uses the MooTools JavaScript library, which runs with full privileges of the application site (e.g., www.example.net). Over 100KB of JavaScript code runs with full privileges. This code uses dangerous, dynamic constructs like innerHTML and eval. In our design, the total amount of code running in the www.example.net origin is 2.5KB, with the JavaScript code utilizing dynamic constructs running in an unprivileged temporary origin.

#### Example Policy
Privilege separation reduces the ambient authority from these libraries. For example, the session cookie for www.example.net is never sent to the child; all HTTP traffic requiring the cookie goes through the parent. The policy strictly limits privileged API access to those calls required by SQL Buddy. Implementing this policy requires only two lines of JavaScript code.

### 5.4 Top 50 Google Chrome Extensions
To measure the opportunity for our technique, we quantified the extent of TCB inflation and bundling in Chrome extensions. We developed a syntactic static analysis engine for JavaScript using Pynarcissus and performed a manual review for additional confidence. We report results on 46 out of the top 50 extensions. Our analysis (conservatively) identifies all calls to privileged APIs (i.e., calls to the chrome object) and lists them in Figure 1. We believe our analysis is overly conservative, so these numbers represent only an undercount of over-privileging in these applications.

#### TCB Reduction
We show the distribution of the number of functions requiring any privileges as a percentage of the total number of functions. TCB inflation is pervasive in the extensions studied. In half the extensions, less than 5% of the total functions require any ambient privileges. In the current architecture, the remaining 95% run with full privileges, inflating the TCB.

#### Bundling
We manually analyzed the 20 most popular Google Chrome extensions and found that 19 exhibited bundling. The most common form of bundling occurs when the options page or popup window of an extension runs with full privileges, despite not requiring any. While the Google Chrome architecture enables privilege separation between content scripts and extension code, running all code in an extension with the same privileges is unnecessary.

Another form of over-privileging occurs due to the bundling of privileges in Chrome’s permission system. The tabs permission in the Chrome extension API, required by 42 of the 46 extensions, bundles together several powerful privileges. No extension requires the full privileges granted by the tabs permission, with the highest requirement being 44.83%. More than half of the extensions require only 6.9% of the API, indicating over-privileging. In our design, the policy acts on fine-grained function calls and replaces coarse-grained permissions.

### 6 Performance Benchmarks
Our approach has two possible overheads: runtime overhead caused by the parent’s mediation on privileged APIs and memory overhead. For example, Awesome Screenshot could be broken up into two extensions: a screenshot extension and an image editor extension. This would require two install decisions from the user and each additional extension would run in its own process on the Chrome platform. We measured the memory consumption and found an increase of 20MB. This demonstrates that our approach has no memory overhead compared to the 20MB overhead of creating a new extension.

### 7 Related Work
The concept of privilege separation was first formalized by Saltzer and Schroeder. Several works have used privilege separation for increased security. Notable examples include QMail, OpenSSH, and Google Chrome. Brumley and Song investigated automatic privilege separation of programmer-annotated C programs and implemented data separation. More recently, architectures like Wedge identified subtleties in privilege separating binary applications and enforcing a default-deny model. Our work shows how to achieve privilege separation in emerging HTML5 applications without requiring changes to the browser platform.

Several previous works on compartmentalizing web applications have suggested re-structuring the browser or the underlying execution platform. Examples include the Google Chrome extension platform, Escudo, MashupOS, Gazelle, OP, IPC Inspection, and CLAMP. Our work advocates that strong privilege separation can be achieved using modern browser abstractions, obviating the need for further platform changes. Temporary origins are similar to MashupOS’s "null-principal SERVICEINSTANCE" principle.