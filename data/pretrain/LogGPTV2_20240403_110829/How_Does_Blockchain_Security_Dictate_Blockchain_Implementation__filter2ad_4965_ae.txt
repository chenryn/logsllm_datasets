Bitcoin might be useful for the purposes of illustration here. Bitcoin
is secure in the synchronous setting, and the number of blocks
required for confirmation is normally considered to be independent
of the duration. The number of blocks required for confirmation
does depend on how sure one needs to be that an adversary cannot
double spend in any given time interval, but it’s also true that an
adversary’s chance of double spending in a given time interval
decreases exponentially in the number of blocks required for con-
firmation as well. So Bitcoin is an example of a protocol satisfying
(†a ) and (†b ) above.
13The choices ε /10 and 2n are arbitrarily chosen for the purpose of example. The
reader might wonder why one should specify a duration of 2n timeslots and then
terminate after n many. This is because the instructions of the first n timesteps can
depend on the intended duration. In Algorand, committee sizes will depend on the
intended duration, for example.
14Note that the requirement here is that the number of processors is bounded, rather
than the number of public keys.
Proof of Proposition 4.3. It is useful to consider a security
notion that is intermediate between security and uniform security.
For the purposes of the following definition, we say that a block
is confirmed at timeslot t if there exists at least one processor for
whom that is the case.
Definition 4.4 (Timeslot Security). A protocol is timeslot secure
if the following holds for every choice of security parameter ε > 0,
and for all timeslots t1, t2 in the duration: With probability > 1 − ε,
all blocks which are confirmed at t1 are compatible with all blocks
which are confirmed at t2.
So the difference between timeslot security and uniform security is
that the latter requires the probability of even a single disagreement
to be bounded, while the former only bounds the probability of
disagreement for each pair of timeslots. Similarly, the difference
between security and timeslot security is that, for each pair of times-
lots, the latter requires the probability of even a single disagreement
to be bounded, while the former only bounds the probability of
disagreement for each pair of processors at that timeslot pair.
Now suppose P is live and secure, and that the conditions of
Proposition 4.3 hold. Then it follows directly from the Union Bound
that, if the number of users is bounded, then some recalibration of P
is live and timeslot secure and satisfies the conditions of Proposition
4.3. Since a recalibration of a recalibration of P is a recalibration of
P, our main task is therefore to show that, if P is live and timeslot
secure and the conditions of Proposition 4.3 hold, then there exists
a recalibration of P that is uniformly live and uniformly secure.
So suppose (P, C) is live and timeslot secure, and that the condi-
tions of Proposition 4.3 hold. Suppose we are given ε0 and D0 as
inputs to our recalibration (P′, C′). We wish to find an appropriate
security parameter ε1 and a duration D1 ≥ D0 to give as inputs
to P and C, so that uniform security is satisfied with respect to ε0
and D0 if we run P with inputs ε1 and D1 and then terminate after
|D0| many timeslots. The difficulty is to ensure that ℓε1 remains
sublinear in D0. To achieve this, let n := |D0|, set ε1 := ε0/2n and
choose |D1| > n + ℓε1, so that D0 is the first n timeslots in D1. This
defines the recalibration. It remains to establish uniform liveness
and uniform security.
For uniform liveness we must have that, for each α ∈ (0, 1),
ℓε1  0, ℓε  0.
Suppose given α > 0, and put α′ := αε0/2. Then we have that, for
all sufficiently large n:
ε0,D0
′
(ε0/2n)
−1 = αn.
ℓε1  1−ε0,
there do not exist incompatible blocks B1, B2, timeslots t1, t2 ∈ D0
and p1, p2 such that Bi is confirmed for pi at ti for i ∈ {1, 2}. Let tlast
be the last timeslot of the duration D1 and define t∗ := tlast − ℓε1.
The basic idea is that the two following conditions hold with high
probability: (a) [t∗, tlast] is a growth interval, and (b) There does
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1015not exist t1 ∈ D0, processors p1, p2 and incompatible blocks B1, B2,
such that B1 is confirmed for p1 at t1 and B2 is confirmed for p2
at tlast. When both these conditions hold, and since t∗ > n, this
suffices to show that no incompatible and confirmed blocks exist
during the duration D0. Now let us see that in more detail.
By the choice of D1, t∗ > n. It follows from the definition of
liveness that (†1) below fails to hold with probability ≤ ε1:
(†1) [t∗, tlast] is a growth interval.
Note that, so long as (†1) holds, every user has more confirmed
blocks at tlast than any user does at any timeslot in D0. It also
follows from the Union Bound, and the definition of liveness and
timeslot security, that (†2) below fails to hold with probability
≤ nε1 = ε0/2:
(†2) There does not exist t1 ∈ D0, processors p1, p2 and incom-
patible blocks B1, B2, such that B1 is confirmed for p1 at t1
and B2 is confirmed for p2 at tlast.
Now note that:
(a) If (†1) and (†2) both hold, then there do not exist incompati-
ble blocks B1, B2, timeslots t1, t2 ∈ D0 and p1, p2 such that
Bi is confirmed for pi at ti for i ∈ {1, 2}.
(b) With probability > 1− ε1 − ε0/2 ≥ 1− ε0, (†1) and (†2) both
hold.
So uniform security is satisfied with respect to ε0 and D0, as re-
quired.
□
Definition 4.5. We say P has standard functionality if it is
uniformly live and uniformly secure. We say that a recalibration of
P is faithful if it has standard functionality when P does.
Proposition 4.3 justifies concentrating on protocols which have
standard functionality where it is convenient to do so, since proto-
cols which are live and secure will have recalibrations with standard
functionality, so long as the rather weak conditions of Proposition
4.3 are satisfied. Again, when we talk about the security and live-
ness of a protocol, it is really the extended protocol that we are
referring to.
5 CERTIFICATES IN THE SYNCHRONOUS
SETTING
5.1 The synchronous and unsized setting
As outlined in the introduction, part of the aim of this paper is to
give a positive answer to Q3, by showing that whether a protocol
produces certificates comes down essentially to properties of the
processor selection process. In the unsized setting protocols cannot
produce certificates. In the sized setting, recalibrated protocols will
automatically produce certificates, at least if they are of ‘standard
form’. For the partially synchronous setting, the results of [12] and
Section 3 already bear this out: The sized setting is required for
security and all secure protocols must produce certificates. The
following theorem now deals with the unsized and synchronous
setting. Recall that, in the unsized setting, the total resource balance
belongs to a determined interval [α0, α1]. We say that the protocol
operates ‘in the presence of a non-trivial adversary’ if the setting
allows that the adversary may have resource balance at least α0
throughout the duration.
Theorem 5.1. Consider the synchronous and unsized setting. If a
protocol is live then, in the presence of a non-trivial adversary, it does
not produce certificates.
Proof. The basic idea is that the adversary with resource bal-
ance at least α0 can ‘simulate’ their own execution of the protocol,
in which only they have non-zero resource balance, while the non-
faulty processors carry out an execution in which the adversary
does not participate. Simulating their own execution means that
the adversary carries out the protocol as usual, while ignoring
messages broadcast by the non-faulty processors, but does not ini-
tially broadcast messages when given permission to do so. Liveness
(together with the fact that the resource pool is undetermined) guar-
antees that, with high probability, both the actual and simulated
executions produce blocks which look confirmed from their own
perspective. These blocks will be incompatible with each other and,
once the adversary finally broadcasts the messages that they have
been given permission for, these blocks will all have subjective
certificates which are subsets of the set of broadcast messages. This
suffices to show that the protocol does not produce certificates.
More precisely, we consider two instances of the protocol In0 and
In1 in the synchronous and unsized setting, which have the same
values for all determined variables – including the same sufficiently
small security parameter ε and the same sufficiently long duration
D – and also have the same set of processors and the same message
delivery rule, but which differ as follows:
• In In0, a set of processors P0 control public keys in a set
U0, which are the only public keys that do not have zero
resource balance throughout the duration. The total resource
balance T has a fixed value, α say.
• In In1, it is the adversary who controls the public keys in U0,
and those keys have the same resource balance throughout
the duration as they do in In0. Now, however, another set
of processors P1 control public keys in a set U1 (disjoint
from U0), and the public keys in U1 also have total resource
balance α throughout the duration, i.e. the resource balances
of these keys always add to α.
In In1, we suppose that the adversary simulates the processors
in P0 for In0 (which can be done with the single processor pA),
which means that the adversary carries out the instructions for
those processors, with the two following exceptions. Until a certain
timeslot t∗, to be detailed subsequently, they:
(a) Ignore all messages broadcast by non-faulty processors, and;
(b) Do not actually broadcast messages when permitted, but
consider them received by simulated processors in P0 as per
the message delivery rule.
For In0 (so long as the duration is sufficiently long), liveness
guarantees the existence of a timeslot t0 for which the following
holds with probability > 1 − ε:
(⋄0) At t0 there exists a set of broadcast messages M0 and a block
B0 such that B0 ∈ C(M0).
For In1, liveness guarantees the existence of a timeslot t1 for
which the following holds with probability > 1 − ε:
(⋄1) At t1 there exists a set of broadcast messages M1 and a block
B1 such that B1 ∈ C(M1).
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1016Choose t∗ > t0, t1. Our framework stipulates that the instruc-
tions of the protocol for a given user at a given timeslot are a
deterministic function of their present state and the message set
and permission set received at that timeslot. It also stipulates that
the response of the permitter to a request (t′, U, M, A) is a proba-
bilistic function of the determined variables, (t′, U, M, A), and of
R (U, t′, M ). Since we are working in the unsized setting, In1 and
In0 have the same determined variables. It therefore follows by
induction on timeslots t ≤ t∗, that the following is true at all points
until the end of timeslot t:
(⋄2) The probability distribution for In0 on the set of permission
sets given by the permitter is identical to the probability
distribution for In1 on the set of permission sets given by
the permitter to the adversary.
Now suppose that at timeslot t∗ the adversary broadcasts all
messages for which they have been given permission by the per-
mitter. Note that, according to the assumptions of Section 2.4, any
block B0 broadcast by the adversary at t∗ will be incompatible with
any block B1 that has been broadcast by any honest user up to
that point. Combining (⋄0), (⋄1) and (⋄2), we see that (so long as
ε is sufficiently small that ε  ε for t∗ and In1: There exist incompatible blocks
B0, B1, and M0, M1 which are broadcast by the end of t∗, such that
Bi ∈ C(Mi ) for i ∈ {0, 1}. This suffices to show that the protocol
does not produce certificates.
□
5.2 The synchronous and sized setting
The example of sized Bitcoin. Our aim in this subsection is to
show that, if we work in the synchronous and sized setting, and if
a protocol is of ‘standard form’, then a recalibration will produce
certificates. To make this precise, however, it will be necessary
to recognise the potentially time dependent nature of proofs of
confirmation. To explain this idea, it is instructive to consider the
example of Bitcoin in the sized setting: The protocol is Bitcoin, but
now we are told in advance precisely how the hash rate capability
of the network varies over time, as well as bounds on the hash rate
of the adversary.15 To make things concrete, let us suppose that the
total hash rate is fixed over time, and that the adversary has 10%
of the hash rate at all times. Suppose that, during the first couple
of hours of running the protocol, the difficulty setting is such that
the network as a whole (with the adversary acting honestly) will
produce an expected one block every 10 minutes. Suppose further
that, after a couple of hours, we see a block B which belongs to
a chain C, in which it is followed by 10 blocks. In this case, the
constraints we have been given mean that it is very unlikely that B
does not belong to the longest chain. So, at that timeslot, C might
be considered a proof of confirmation for B, i.e. the existence of the
chain C can be taken as proof that B is confirmed. The nature of
this proof is time dependent, however. The same set of blocks (i.e.
C) a large number of timeslots later would not constitute proof of
confirmation.
If we now consider a PoS version of the example above, modi-
fied to work for Snow White rather than Bitcoin, then the proof
15Normally we think of PoW protocols as operating in the unsized setting, precisely
because such guarantees on the hash rate are not realistic.
produced will not be time dependent. This is because PoS proto-
cols function in the timed setting, i.e. when permission is given to
broadcast m in response to a request (t, U, M, A), other users are
able to determine t from m. In order to prove that (recalibrated)
protocols in the sized setting produce certificates, we will have to
make the assumption that we are also working in the timed setting.
Protocols in standard form. The basic intuition behind the pro-
duction of certificates in the sized setting can be seen from the
example of “Sized Bitcoin” above. Once a block is confirmed, non-
faulty processors will work ‘above’ this block. So long as those
processors possess a majority of the total resource balance, and so
long as the permitter reflects this fact in the permissions it gives,
then those non-faulty processors will broadcast a set of messages
which suffices (by its existence rather than the fact that it is the full
message state of any user) to give proof of confirmation. This proof
of confirmation might be temporary, but it will not be temporary
in the timed setting.