                                 OUT o_log2m integer,  
                                 OUT o_regwidth integer,  
                                 OUT o_expthresh bigint,  
                                 OUT o_sparseon integer)  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C STRICT IMMUTABLE;  
-- ----------------------------------------------------------------  
-- Murmur Hashing  
-- ----------------------------------------------------------------  
-- Hash a boolean.  
--  
CREATE FUNCTION hll_hash_boolean(boolean, integer default 0)  
     RETURNS hll_hashval  
     AS 'MODULE_PATHNAME', 'hll_hash_1byte'  
     LANGUAGE C STRICT IMMUTABLE;  
-- Hash a smallint.  
--  
CREATE FUNCTION hll_hash_smallint(smallint, integer default 0)  
     RETURNS hll_hashval  
     AS 'MODULE_PATHNAME', 'hll_hash_2byte'  
     LANGUAGE C STRICT IMMUTABLE;  
-- Hash an integer.  
--  
CREATE FUNCTION hll_hash_integer(integer, integer default 0)  
     RETURNS hll_hashval  
     AS 'MODULE_PATHNAME', 'hll_hash_4byte'  
     LANGUAGE C STRICT IMMUTABLE;  
-- Hash a bigint.  
--  
CREATE FUNCTION hll_hash_bigint(bigint, integer default 0)  
     RETURNS hll_hashval  
     AS 'MODULE_PATHNAME', 'hll_hash_8byte'  
     LANGUAGE C STRICT IMMUTABLE;  
-- Hash a byte array.  
--  
CREATE FUNCTION hll_hash_bytea(bytea, integer default 0)  
     RETURNS hll_hashval  
     AS 'MODULE_PATHNAME', 'hll_hash_varlena'  
     LANGUAGE C STRICT IMMUTABLE;  
-- Hash a text.  
--  
CREATE FUNCTION hll_hash_text(text, integer default 0)  
     RETURNS hll_hashval  
     AS 'MODULE_PATHNAME', 'hll_hash_varlena'  
     LANGUAGE C STRICT IMMUTABLE;  
-- ----------------------------------------------------------------  
-- Operators  
-- ----------------------------------------------------------------  
CREATE OPERATOR = (  
        LEFTARG = hll, RIGHTARG = hll, PROCEDURE = hll_eq,  
        COMMUTATOR = '=', NEGATOR = '<>',  
        RESTRICT = eqsel, JOIN = eqjoinsel,  
        MERGES  
);  
CREATE OPERATOR <> (  
        LEFTARG = hll, RIGHTARG = hll, PROCEDURE = hll_ne,  
        COMMUTATOR = '<>', NEGATOR = '=',  
        RESTRICT = neqsel, JOIN = neqjoinsel  
);  
CREATE OPERATOR || (  
       LEFTARG = hll, RIGHTARG = hll, PROCEDURE = hll_union  
);  
CREATE OPERATOR || (  
       LEFTARG = hll, RIGHTARG = hll_hashval, PROCEDURE = hll_add  
);  
CREATE OPERATOR || (  
       LEFTARG = hll_hashval, RIGHTARG = hll, PROCEDURE = hll_add_rev  
);  
CREATE OPERATOR # (  
       RIGHTARG = hll, PROCEDURE = hll_cardinality  
);  
-- ----------------------------------------------------------------  
-- Aggregates  
-- ----------------------------------------------------------------  
-- Union aggregate transition function, first arg internal data  
-- structure, second arg is a packed multiset.  
--  
CREATE FUNCTION hll_union_trans(internal, hll)  
     RETURNS internal  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
-- NOTE - unfortunately aggregate functions don't support default  
-- arguments so we need to declare 5 signatures.  
-- Add aggregate transition function, first arg internal data  
-- structure, second arg is a hashed value.  Remaining args are log2n,  
-- regwidth, expthresh, sparseon.  
--  
CREATE FUNCTION hll_add_trans4(internal,  
                               hll_hashval,  
                               integer,  
                               integer,  
                               bigint,  
                               integer)  
     RETURNS internal  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
CREATE FUNCTION hll_add_trans3(internal,  
                               hll_hashval,  
                               integer,  
                               integer,  
                               bigint)  
     RETURNS internal  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
CREATE FUNCTION hll_add_trans2(internal,  
                               hll_hashval,  
                               integer,  
                               integer)  
     RETURNS internal  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
CREATE FUNCTION hll_add_trans1(internal,  
                               hll_hashval,  
                               integer)  
     RETURNS internal  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
CREATE FUNCTION hll_add_trans0(internal,  
                               hll_hashval)  
     RETURNS internal  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
-- Converts internal data structure into packed multiset.  
--  
CREATE FUNCTION hll_pack(internal)  
     RETURNS hll  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
-- Computes cardinality of internal data structure.  
--  
CREATE FUNCTION hll_card_unpacked(internal)  
     RETURNS double precision  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
-- Computes floor(cardinality) of internal data structure.  
--  
CREATE FUNCTION hll_floor_card_unpacked(internal)  
     RETURNS int8  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
-- Computes ceil(cardinality) of internal data structure.  
--  
CREATE FUNCTION hll_ceil_card_unpacked(internal)  
     RETURNS int8  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C;  
-- Union aggregate function, returns hll.  
--  
CREATE AGGREGATE hll_union_agg (hll) (  
       SFUNC = hll_union_trans,  
       STYPE = internal,  
       FINALFUNC = hll_pack  
);  
-- NOTE - unfortunately aggregate functions don't support default  
-- arguments so we need to declare 5 signatures.  
-- Add aggregate function, returns hll.  
CREATE AGGREGATE hll_add_agg (hll_hashval) (  
       SFUNC = hll_add_trans0,  
       STYPE = internal,  
       FINALFUNC = hll_pack  
);  
-- Add aggregate function, returns hll.  
CREATE AGGREGATE hll_add_agg (hll_hashval, integer) (  
       SFUNC = hll_add_trans1,  
       STYPE = internal,  
       FINALFUNC = hll_pack  
);  
-- Add aggregate function, returns hll.  
CREATE AGGREGATE hll_add_agg (hll_hashval, integer, integer) (  
       SFUNC = hll_add_trans2,  
       STYPE = internal,  
       FINALFUNC = hll_pack  
);  
-- Add aggregate function, returns hll.  
CREATE AGGREGATE hll_add_agg (hll_hashval, integer, integer, bigint) (  
       SFUNC = hll_add_trans3,  
       STYPE = internal,  
       FINALFUNC = hll_pack  
);  
-- Add aggregate function, returns hll.  
CREATE AGGREGATE hll_add_agg (hll_hashval, integer, integer, bigint, integer) (  
       SFUNC = hll_add_trans4,  
       STYPE = internal,  
       FINALFUNC = hll_pack  
);  
```  
## 参考  
1\. http://tapoueh.org/blog/2013/02/25-postgresql-hyperloglog.html  
2\. http://blog.aggregateknowledge.com/2013/02/04/open-source-release-postgresql-hll/  
3\. https://github.com/aggregateknowledge/postgresql-hll  
4\. http://blog.aggregateknowledge.com/author/wwkae/  
5\. http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")