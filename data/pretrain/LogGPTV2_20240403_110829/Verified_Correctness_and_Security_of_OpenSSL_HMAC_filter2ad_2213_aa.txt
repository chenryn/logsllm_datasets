title:Verified Correctness and Security of OpenSSL HMAC
author:Lennart Beringer and
Adam Petcher and
Katherine Q. Ye and
Andrew W. Appel
Verified Correctness and Security 
of OpenSSL HMAC
Lennart Beringer, Princeton University; Adam Petcher, Harvard University and MIT Lincoln 
Laboratory; Katherine Q. Ye and Andrew W. Appel, Princeton University
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/beringer
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXVeriﬁed correctness and security of OpenSSL HMAC
Lennart Beringer
Princeton Univ.
Adam Petcher
Harvard Univ. and
MIT Lincoln Laboratory
Katherine Q. Ye
Princeton Univ.
Andrew W. Appel
Princeton Univ.
Abstract
We have proved, with machine-checked proofs in Coq,
that an OpenSSL implementation of HMAC with SHA-
256 correctly implements its FIPS functional speciﬁ-
cation and that its functional speciﬁcation guarantees
the expected cryptographic properties.
This is the
ﬁrst machine-checked cryptographic proof that combines
a source-program implementation proof, a compiler-
correctness proof, and a cryptographic-security proof,
with no gaps at the speciﬁcation interfaces.
The veriﬁcation was done using three systems within
the Coq proof assistant:
the Foundational Cryptogra-
phy Framework, to verify crypto properties of functional
specs; the Veriﬁed Software Toolchain, to verify C pro-
grams w.r.t. functional specs; and CompCert, for veriﬁed
compilation of C to assembly language.
1
Introduction
HMAC is a cryptographic authentication algorithm, the
“Keyed-Hash Message Authentication Code,” widely
used in conjunction with the SHA-256 cryptographic
hashing primitive. The sender and receiver of a mes-
sage m share a secret session key k. The sender com-
putes s = HMAC(k,m) and appends s to m. The receiver
computes s(cid:31) = HMAC(k,m) and veriﬁes that s(cid:31) = s. In
principle, a third party will not know k and thus cannot
compute s. Therefore, the receiver can infer that message
m really originated with the sender.
What could go wrong?
Algorithmic/cryptographic problems. The compres-
sion function underlying SHA might fail to have
the cryptographic property of being a pseudoran-
dom function (PRF); the SHA algorithm might not
be the right construction over its compression func-
tion; the HMAC algorithm might fail to have the
cryptographic property of being a PRF; we might
even be considering the wrong crypto properties.
Implementation problems. The SHA program (in C)
might incorrectly implement the SHA algorithm;
the HMAC program might incorrectly implement
the HMAC algorithm; the programs might be cor-
rect but permit side channels such as power analy-
sis, timing analysis, or fault injection.
Speciﬁcation mismatch. The speciﬁcation of HMAC
or SHA used in the cryptographic-properties [15]
proof might be subtly different from the one pub-
lished as the speciﬁcation of computer programs
[28, 27]. The proofs about C programs might in-
terpret the semantics of the C language differently
from the C compiler.
Based on Bellare and Rogaway’s probabilistic game
framework [16] for cryptographic proofs, Halevi [30] ad-
vocates creating an “automated tool to help us with the
mundane parts of writing and checking common argu-
ments in [game-based] proofs.” Barthe et al. [13] present
such a tool in the form of CertiCrypt, a framework that
“enables the machine-checked construction and veriﬁca-
tion” of proofs using the same game-based techniques,
written in code. Barthe et al.’s more recent EasyCrypt
system [12] is a more lightweight, user-friendly version
(but not foundational, i.e., the implementation is not
proved sound in any machine-checked general-purpose
logic). In this paper we use the Foundational Cryptogra-
phy Framework (FCF) of Petcher and Morrisett [38].
But the automated tools envisioned by Halevi—and
built by Barthe et al. and Petcher—address only the
“algorithmic/cryptographic problems.” We also need
machine-checked tools for functional correctness of C
programs—not just static analysis tools that verify the
absence of buffer overruns. And we need the functional-
correctness tools to connect, with machine-checked
proofs of equivalence, to the crypto-algorithm proofs. By
2015, proof systems for formally reasoning about crypto
algorithms and C programs have come far enough that it
is now possible to do this.
USENIX Association  
24th USENIX Security Symposium  207
15. HMAC cryptographic
security property
14. SHA cryptographic
security property
16.    Crypto security
proof
(nobody knows 
  how to prove this)
3. Bellare HMAC functional spec
4.    Equivalence
Proof
1. SHA functional spec 2. FIPS HMAC functional spec
10. SHA API spec
11.    Correctness
Proof
sha.c
12. HMAC API spec
13.    Correctness
Proof
hmac.c
Bold face
indicates new
results in 
this paper
End-to-End
machine-checked
crypto-security
+ implementation
proof
5.  Verifiable C
program logic
7.    Soundness   
Proof
6. C operational
semantics
9.    Correctness
Proof
8. Intel IA-32
operational semantics
CompCert 
verified optimizing 
C compiler
Figure 1: Architecture
of our assurance case.
sha.s
hmac.s
Here we present machine-checked proofs, in Coq, of
many components, connected and checked at their speci-
ﬁcation interfaces so that we get a truly end-to-end result:
Version 0.9.1c of OpenSSL’s HMAC and SHA-256 cor-
rectly implements the FIPS 198-1 and FIPS 180-4 stan-
dards, respectively; and that same FIPS 198-1 HMAC
standard is a PRF, subject to certain standard (unproved)
assumptions about the SHA-256 algorithm that we state
formally and explicitly.
Software is large, complex, and always under main-
tenance; if we “prove” something about a real program
then the proof (and its correspondence to the syntactic
program) had better be checked by machine. Fortunately,
as G¨odel showed, checking a proof is a simple calcula-
tion. Today, proof checkers can be simple trusted (and
trustworthy) kernel programs [7].
A proof assistant comprises a proof-checking kernel
with an untrusted proof-development system. The sys-
tem is typically interactive, relying on the user to build
the overall structure of the proof and supply the impor-
tant invariants and induction hypotheses, with many of
the details ﬁlled in by tactical proof automation or by de-
cision procedures such as SMT or Omega.
Coq is an open-source proof assistant under develop-
ment since 1984. In the 21st century it has been used for
practical applications such as Leroy’s correctness proof
of an optimizing C compiler [34]. But note, that com-
piler was not itself written in C; the proof theory of C
makes life harder, and only more recently have people
done proofs of substantial C programs in proof assistants
[32, 29].
Our entire proof (including the algorithmic/crypto-
graphic proofs, the implementation proofs, and the spec-
iﬁcation matches) is done in Coq, so that we avoid mis-
understandings at interfaces. To prove our main theorem,
we took these steps (cf. Figure 1):
1. Formalized.[5] We use a Coq formalization of the
FIPS 180-4 Secure Hash Standard [28] as a speci-
ﬁcation of SHA-256. (Henceforth, “formalized” or
“proved” implies “in the Coq proof assistant.”)
2. Formalized.* We have formalized the FIPS 198-1
Keyed-Hash Message Authentication Code [27] as
a speciﬁcation of HMAC. (Henceforth, the * indi-
cates new work ﬁrst reported in this paper; other-
wise we provide a citation to previous work.)
3. Formalized.* We have formalized Bellare’s func-
tional characterization of the HMAC algorithm.
4. Proved.* We have proved the equivalence of FIPS
198-1 with Bellare’s functional characterization of
HMAC.
5. Formalized.[6] We use Veriﬁable C, a program logic
(embedded in Coq) for specifying and proving func-
tional correctness of C programs.
6. Formalized.[35] Leroy has formalized the opera-
tional semantics of the C programming language.
208  24th USENIX Security Symposium 
USENIX Association
7. Proved.[6] Veriﬁable C has been proved sound.
That is, if you specify and prove any input-output
property of your C program using Veriﬁable C, then
that property actually holds in Leroy’s operational
semantics of the C language.
8. Formalized.[35] Leroy has formalized the opera-
tional semantics of the Intel x86 (and PowerPC and
ARM) assembly language.
9. Proved.[35] If the CompCert optimizing C compiler
translates a C program to assembly language, then
input-output property of the C program is preserved
in the assembly-language program.
10. Formalized.[5] We rely on a formalization (in Ver-
iﬁable C) of the API interface of the OpenSSL
header ﬁle for SHA-256,
including its semantic
connection to the formalization of the FIPS Secure
Hash Standard.
11. Proved.[5] The C program implementing SHA-256,
lightly adapted from the OpenSSL implementation,
has the input-output (API) properties speciﬁed by
the formalized API spec of SHA-256.
12. Formalized.* We have formalized the API interface
of the OpenSSL header ﬁle for HMAC, including
its semantic connection to our FIPS 198-1 formal-
ization.
13. Proved.* Our C program implementing HMAC,
lightly adapted from the OpenSSL implementation,
has the input-output (API) properties speciﬁed by
our formalization of FIPS 198-1.
14. Formalized.* Bellare et al. proved properties of
HMAC [15, 14] subject
to certain assumptions
about the underlying cryptographic compression
function (typically SHA). We have formalized those
assumptions.
15. Formalized.* Bellare et al.
proved that HMAC
implements a pseudorandom function (PRF); we
have formalized what exactly that means. (Bellare’s
work is “formal” in the sense of rigorous mathe-
matics and LATEX; we formalized our work in Coq
so that proofs of these properties can be machine-
checked.)
16. Proved.* We prove that, subject to these formal-
ized assumptions about SHA, Bellare’s HMAC al-
gorithm is a PRF; this is a mechanization of a vari-
ant of the 1996 proof [15] using some ideas from
the 2006 proofs [14].
Theorem. The assembly-language program, resulting
from compiling OpenSSL 0.9.1c using CompCert, cor-
rectly implements the FIPS standards for HMAC and
SHA, and implements a cryptographically secure PRF
subject to the usual assumptions about SHA.
Proof. Machine-checked, in Coq, by chaining together
speciﬁcations and proofs 1–16. Available open-source at
https://github.com/PrincetonUniversity/VST/, subdi-
rectories sha, fcf, hmacfcf.
The trusted code base (TCB) of our system is quite
small, comprising only items 1, 2, 8, 12, 14, 15. Items
4, 7, 9, 11, 13, 16 need not be trusted, because they are
proofs checked by the kernel of Coq. Items 3, 5, 6, 10
need not be trusted, because they are speciﬁcation inter-
faces checked on both sides by Coq, as Appel [5, §8]
explains.
One needs to trust the Coq kernel and the software that
compiles it; see Appel’s discussion [5, §12].
We do not analyze timing channels or other side chan-
nels. But the programs we prove correct are standard
C programs for which standard timing and side-channel
analysis tools and techniques can be used.
The HMAC brawl. Bernstein [19] and Koblitz and
Menezes [33] argue that the security guarantees proved
by Bellare et al. are of little value in practice, because
these guarantees do not properly account for the power
of precomputation by the adversary. In effect, they argue
that item 15 in our enumeration is the wrong speciﬁca-
tion for desired cryptographic properties of a symmetric-
key authentication algorithm. This may well be true; here
we use Bellare’s speciﬁcation in a demonstration of end-
to-end machine-checked proof. As improved speciﬁca-
tions and proofs are developed by the theorists, we can
implement them using our tools. Our proofs are sufﬁ-
ciently modular that only items 15 and 16 would change.
version
of OpenSSL. We
Which
veriﬁed
HMAC/SHA from OpenSSL 0.9.1c, dated March
1999, which does not include the home-brew object sys-
tem “engines” of more recent versions of OpenSSL. We
further simpliﬁed the code by specializing OpenSSL’s
use of generic “envelopes” to the speciﬁc hash function
SHA-256,
thus obtaining a statically linked code.
Veriﬁable C is capable of reasoning about function
pointers and home-brew object systems [6, Chapter
29]—it is entirely plausible that a formal speciﬁcation of
“engines” and “envelopes” could be written down—but
such proofs are more complex.
USENIX Association  
24th USENIX Security Symposium  209
2 Formalizing functional speciﬁcations
(Items 1, 2 of the architecture.) The FIPS 180-4 speciﬁ-
cation of the SHA function can be formalized in Coq as
this mathematical function:
Deﬁnition SHA-256 (str : list Z) : list Z :=
intlist-to-Zlist (
hash-blocks init-registers (generate-and-pad str)).
where hash-blocks, init-registers, and generate-and-pad
are translations of the FIPS standard. Z is Coq’s type
for (mathematical) integers; the (list Z) is the contents
of a string of bytes, considered as their integer values.
SHA-256 works internally in 32-bit unsigned modular
arithmetic; intlist-to-Zlist converts a sequence of 32-bit
machine ints to the mathematical contents of a byte-
sequence. See Appel [5] for complete details. The func-