ponents of this private key given the values that it knows.
To generate the ﬁrst component of the private key, observe
that
(xu · yID
= (gδu (ΠID(cid:48)∈S∗
= (gδu (ΠID(cid:48)∈S∗
−1 · (gγv gv)ID)r(cid:48)
)
−1 · (gγv gv)ID)r·
)
(gH2(ID(cid:48)))ID(cid:48)
(gH2(ID(cid:48)))ID(cid:48)
v )r(cid:48)
u
u
(gδu (ΠID(cid:48)∈S∗
u
(gH2(ID(cid:48)))ID(cid:48)
−1 · (gγv gv)ID)
)
−1)
)
−αb+1−v /ID
−1/ID · g
b+1−v
(ΠID(cid:48)∈S∗
(gb+1−v+H2(ID(cid:48)))ID(cid:48)
−1
= . . . (g(δu+γv ID)
b+1.
Note that H2(ID) = v. Since ID /∈ S∗, we see that ID /∈ S∗
and thus H2(ID(cid:48))− v (cid:54)= 0 for any ID(cid:48) ∈ S∗
0 = gb+1·
gρ
1 , the ﬁrst component in the private key can be computed
u. Since xα
u
u
as
i
u
u
)
−1/ID
b+1−v
and yr(cid:48)
i = (gγi gi)r(gγi
(gH2(ID(cid:48)))ID(cid:48)
· (ΠID(cid:48)∈S∗
are computable since gr(cid:48)
1 · (gδu (ΠID(cid:48)∈S∗
gρ
(g(δu+γv ID)
−1 · (gγv gv)ID)r·
(gb+1−v+H2(ID(cid:48)))ID(cid:48)
−1)
)
where the unknown term gb+1 is canceled out.
The
other terms gr(cid:48)
=
gr(gb+1−v)−1/ID and yr(cid:48)
b+1−v · gb+1−v+i)−1/ID
for i = 1, . . . , v − 1, v + 1, . . . , b. Since i (cid:54)= v, these values do
not require knowledge of gb+1.
Challenge: To generate a challenge (Hdr∗, K∗) under the
receiver set S∗, B sets
δ1+ΣID∈S∗
1
ID·γH2(ID) , z )
Hdr
and K∗ = T · e(g1, zρ), where z and T are input values given
to B. Observe that if z = gc for some (unknown) c ∈ Zp,
then
. . . , zδa+ΣID∈S∗
ID·γH2(ID) ,
= ( z
∗
a
ID·γH2(ID)
i
δi+ΣID∈S∗
z
= (gδi (ΠID∈S∗
= (xi · ΠID∈S∗
i
i
(gH2(ID))ID)
(yH2(ID))ID)c
−1 · ΠID∈S∗
i
(gγH2(ID) gH2(ID))ID)c
for i = 1, . . . , a. If T = e(z, gb+1) then K∗ = e(x0, g1)c and
thus (Hdr∗, K∗) is a valid challenge to A for the receiver set
S∗. On the other hand, when T is uniform and independent
in GT , then Hdr∗ is independent of K∗ in the adversary’s
view.
Phase 2: A issues private key queries. B responds as before.
Guess: A outputs a guess b(cid:48) ∈ {0, 1}. If b(cid:48) = 1 then it indi-
cates T = e(z, gb+1). Otherwise, it indicates T (cid:54)= e(z, gb+1).
When T is random in GT then Pr[B(z, g,−→g α,b, T ) = 0] =
1/2. When T = e(z, gb+1), B replied with a valid challenge
(Hdr∗, K∗). Then |Pr[b = b(cid:48)] − 1/2| ≥ . Therefore, B has
that
|Pr[B(z, g,−→g α,b, e(z, gb+1)) = 0]
− Pr[B(z, g,−→g α,b, T ) = 0]| ≥ .
This completes the proof of Theorem 1.
4.3 Performance
2
Let n be the total number of users the mIB-KEM can
handle, and let S be the set of receivers. Recall that the
values a, b are derived from the two publicly computable
p →
surjective functions H1 : Z∗
{1, . . . , b}.
p → {1, . . . , a} and H2 : Z∗
Table 1 shows the performance comparison between the
previous mIB-KEMs [2, 11, 1] and ours for n = ab, in terms
of header(Hdr) size, private key size, decryption cost, and
public parameters (PP) size. Note that the mID-KEM in
[1] is obtained from so-called wicked identity-based encryp-
tion based on the Boneh, Boyen, and Goh’s HIBE scheme
[5]. Unlike the previous schemes [2, 11, 1], our mIB-KEM
provides a tradeoﬀ between the Hdr and private key and PP
sizes. With appropriate parametrization, our scheme could
have sub-linear size Hdr and private keys simultaneously.
This sub-linearity depends on the choice of a and the num-
ber |S| of receivers. For example, let a = b =
n. When
|S| > a our scheme has sub-linear size Hdr and private keys,
but when |S| ≤ a the Hdr size could become (|S|+1) elements
in G only in the worst case.
√
We notice that the above mIB-KEMs [2, 11, 1] including
ours are all proven secure in the sID security model. Until
377
Table 1: Performance Comparison of mIB-KEMs for n(= ab)
Decryption
Private Key
Hdr size
Hardness
BSS [2]
CS [11]
AKN [1]
Ours
Assumption
DBDH
DBDH
DBDHE
DBDHE
Random
Oracle
Yes
No
No
No
(|S| + 1) G
(|S| + 1) G
2 G
(a + 1) G
size
1 G
2 G
n(n + 1) G
(b + 1) G
cost
2 p
2 p + b Ge
2 p + |S| Ge
2 p + b Ge
PP size
3 G
(b + 4) G
(n + 3) G
(a + b + 3) G
G: element in G,
p: pairing in G,
Ge: exponentiation in G.
now, two mIB-KEMs [3, 12] are suggested to obtain secu-
rity in the full model, but these schemes have suﬀered from
an exponential security degradation in N , where N is the
number of “target” users.
5. CCA-SECURE MIB-KEM
In this section we propose a CCA-secure mIB-KEM by
applying the ideas of hash-based method (so called “BMW
transformation”) in [9] to our CPA-secure construction. Un-
like the signature-based method [10] and message authenti-
cation code (MAC)-based method [8], the BMW transfor-
mation does not need to attach a one-time signature or a
MAC to a ciphertext. In particular, the BMW transforma-
tion is more suitable for key encapsulation than other meth-
ods [10, 8]. To employ the BMW transformation, we need
a family of collision resistant hash functions Hk : G → Zp
indexed by k ∈ K. We say that a family of hash functions
is (t, )-collision resistant if no t-time adversary is able to
ﬁnd two distinct values x, y such that Hk(x) = Hk(y) with
probability at least .
5.1 Scheme
Let G and GT be groups of prime order p, and let e :
G×G → GT be the bilinear map. We note that Decapsulate
algorithm requires the public parameters PP as input, as
opposed to the CPA-secure scheme in the previous section.
Setup(1k, n): In addition to the setup procedure for the
CPA-secure scheme, the algorithm picks a random element
h ∈ G and selects a random hash key k ∈ K for hash function
H. The public parameters PP (with the description of (G,
GT , e, p, Hk)) and the master key MK are given by
PP = (g, g1, h, x0, x1, . . . , xa, y1, . . . , yb, H1, H2), MK = α.
KeyGen(ID, MK, PP): The private key for ID ∈ Zp is com-
puted as follows: as before, ﬁnd two values u, v (where
1 ≤ u ≤ a and 1 ≤ v ≤ b) such that H1(ID) = u and
H2(ID) = v. Pick a random r ∈ Zp and set the private key
for ID as
di = ( xα
0 · (xu · yID
v )r, hr, gr,
yr
1, . . . , yr
v−1, yr
v+1, . . . , yr
b ) ∈ Gb+2.
Encapsulate(S, PP): A sender chooses a random s ∈ Zp
and set K = e(x0, g1)s ∈ GT . Next, the sender computes gs
and µ = Hk(gs). A header (Hdr) is generated as
Hdr = ( (x1 · hµ · ΠID∈S1 (yH2(ID))ID)s, . . . ,
(xa · hµ · ΠID∈Sa (yH2(ID))ID)s, gs ) ∈ Ga+1.
378
The algorithm outputs the pair (Hdr, K). The sender broad-
casts (S, Hdr, CM ).
Decapsulate(dID, S, Hdr, PP): As before, a receiver with
identity ID is assigned to index u, v such that H1(ID) = u
and H2(ID) = v. The receiver decrypts the Hdr using
his private key dID = (dID,1, dID,2, dID,3, kID,1, . . . , kID,v−1,
kID,v+1, . . . , kID,b). Let Hdr = (A1, . . . , Aa, B). Compute
µ(cid:48) = Hk(B) and check that the following equality
e(Au, g) = e(xu · hµ(cid:48) · ΠID∈Su (yH2(ID))ID, B)
holds. If not, output ⊥. Otherwise, output
K = e(dID,1 · dµ(cid:48)
(kID,H2(ID(cid:48)))ID(cid:48)
ID,2 · Π ID(cid:48)∈Su
ID(cid:48)(cid:54)=ID
, B) / e(Au, dID,3).
Note that the pair (dID,1 · dµ(cid:48)
ID,2 · Π ID(cid:48)∈Su
ID(cid:48)(cid:54)=ID
is chosen from the following distribution
(kID,H2(ID(cid:48)))ID(cid:48)
, dID,3)
( xα
0 · (xu · hµ(cid:48) · ΠID∈Su (yH2(ID))ID)r(cid:48)
,
gr(cid:48)
)
where r(cid:48) is uniform in Zp. We can show that the correctness
of decapsulation is checked by the similar calculation to the
one in Section 4.1.
To save the pairing computations in the decapsulation, we
can use the same technique described in [15]. In that case,
the decapsulation algorithm picks a random w ∈ Zp and
computes
ID,1 = (dID,1 · dµ(cid:48)
(cid:48)
d
(kID,H2(ID(cid:48)))ID(cid:48)
ID,2 · Π ID(cid:48)∈Su
ID(cid:48)(cid:54)=ID
(xu · hµ(cid:48) · ΠID∈Su (yH2(ID))ID)w,
)·
ID,3 = dID,3 · gw.
(cid:48)
d
ID,1, B)/e(Au, d(cid:48)
The algorithm then outputs K = e(d(cid:48)
Consequently, this is the same approach to that of [7].
5.2 Security
ID,3).
As opposed to the (b + 1)-BDHE assumption for the CPA
security in Section 4, the CCA security of the above mIB-
KEM is based on the (b + 2)-BDHE assumption.
Theorem 2. Suppose that the decision (t1, 1, b + 2)-BDHE
assumption holds in G and the family of hash function {Hk}
is (t2, 2)-collision resistant. Then the previous mIB-KEM is
(t3, 3, n, qID, qD)-CCA-secure in the sID security model for
t3 < t1 − Θ(τ bn) and 1 + 2 ≥ 3, where τ is the maximum
time for an exponentiation in G.
Proof. Suppose there exists an adversary A which has
advantage 3 in attacking the CCA security of the mIB-
KEM. We construct an algorithm B that uses A to solve
the decision (b + 2)-BDHE problem in G. For a gener-
ator g ∈ G and α ∈ Zp,
let gi = g(αi) ∈ G. On
input (z, g, g1, . . . , gb+1, gb+3, . . . , g2b+2, T ), B outputs 1 if
T = e(z, gb+2) and 0 otherwise. B works by interacting with
A as follows:
Init: A outputs a set S∗ that it intends to attack.
Setup: As before, B ﬁrst divides the challenge set S∗ into
subsets S∗
a after selecting two publicly computable
p →
surjective functions H1 : Z∗
{1, . . . , b}. Next, B computes µ∗ = Hk(z) and selects two