](https://images.seebug.org/content/images/2020/07/f38afab2-9d2a-4dc5-b712-75fbb8b76df7.png-w331s)
图3-14 云托管平台例3
#### 3.3 攻击流程
我们对这批攻击活动进行归纳分析后发现绝大部分攻击具有相同的攻击流程，其攻击的流程如图3-15。
![
](https://images.seebug.org/content/images/2020/07/b0e1c1a6-1025-4052-b3aa-4f1ea6a568c6.png-w331s)
3-15 攻击流程图
攻击者伪装成物流或船舶等公司人员，向目标企业投递携带附件的钓鱼邮件，附件类型包括：包含漏洞的恶意文档、GZ格式的压缩包、ISO文件和HTML文件。在多数情况下，这些附件起初都会包含或下载Guloader下载器（其他情况下为远控木马）。Guloader开始执行时，先对储存在代码部分的shellcode进行解密，再将解密后的shellcode注入到RegAsm.exe系统文件中；接着RegAsm.exe中的shellcode再从指定的云平台地址下载加密的payload，并在内存中解密执行payload（远控木马），最后通过C2对目标主机进行信息窃取和远程控制。
此次攻击活动中使用到的窃密和远控木马包括：Agent
Tesla（是一款知名的商业窃取木马，主要用于浏览器、邮件客户端、FTP工具、下载器等用户账号密码和WiFi凭证的窃取。）；Formbook（是一款信息窃取木马，其主要以窃取用户电脑机密信息为主，包括键盘记录、剪贴板记录、cookie会话与本地密码等等。）；Lokibot（一款窃密木马，其通过从多种流行的网络浏览器、FTP、电子邮箱客户端、以及PuTTY等IT管理工具中获取凭证，来窃取用户的密码和加密货币钱包）；NanoCore（是一款.net编写的远控软件，其具有键盘监控、实时视频操作、语音、命令行控制等完全控制远程主机的功能。）；Remcos（一款远控软件，包括下载并执行命令、键盘记录、屏幕记录以及使用摄像头和麦克风进行录音录像等功能。）。
鉴于我们分析的这些木马在功能和技术上与旧版类似，并没有发现太多的变化点，所以在此我们仅对其主要功能做了简单的描述，本文后续便不再过多的详细描述其具体的技术细节，如有需要大家可查看文末的参考文献。在下个章节，我们主要对SWEED组织新引入的Guloader恶意代码进行完整详细地剖析。
### 四 技术分析
正如前文所述，我们目前收集到的电子邮件的附件主要分为四类。虽然其释放恶意软件的形式不同，但它们的主要功能行为都基本一致。在这里，我们选取一个典型案例进行详细分析。
#### 4.1 钓鱼邮件
图4-1为攻击者针对美国一家防滑产品制造商进行攻击的钓鱼邮件，此邮件于美国山地时区时间2020年4月29日（周三）02:31被发送到该公司。邮件标题为“Purchase
Order /APO-074787648”，正文描述为“请查看清单和确认商品库存”，并附有同名恶意文档“Purchase Order
/APO-074787648”。
![
](https://images.seebug.org/content/images/2020/07/672c99b2-43e7-4999-8d18-479759286be0.png-w331s)
图4-1 钓鱼邮件内容
#### 4.2 恶意文档
样本“Purchase Order
/APO-074787648.ppsx”利用了沙虫漏洞CVE-2014-4114的补丁（MS14-060）绕过漏洞CVE-2014-6352。沙虫漏洞是Windows
OLE任意代码执行漏洞，该漏洞出现在Microsoft
Windows服务器上的OLE包管理器上。攻击者通过利用该漏洞在OLE打包文件（packer.dll）中下载并执行类似的INF文件，来达到执行任意命令的目的。虽然微软为沙虫漏洞发布补丁（MS14-60），但攻击者还可通过构造特定的CLSID和OLE
Verb来绕过MS14-160补丁的限制（CVE-2014-6352）。下面我们以本次行动中使用的恶意文档为例，对该漏洞的实现原理做简单的分析。
图4-2为此案例中使用的ppsx漏洞攻击文档内容。 ![
](https://images.seebug.org/content/images/2020/07/c959f21d-dd5d-45d6-ac09-82aba98d0dd2.png-w331s)
图4-2 ppsx漏洞文档内容
我们解压PPXS文档可以看到，在“Purchase Order APO-074787648.ppsx\ppt\slides
\slides.xml”中，指定了嵌入的对象id=rld3。 ![
](https://images.seebug.org/content/images/2020/07/45237a6d-5c28-41df-adf4-18a7b55d0a3e.png-w331s)
图4-3 “slides.xml”文件内容
在“Purchase Order
APO-074787648\ppt\slides_rels\slide1.xml.rels”中指定了rld3对应“ppt\embeddings\”目录下的oleObject1.bin文件。
![
](https://images.seebug.org/content/images/2020/07/41f4cb46-7ea8-4adf-9922-2a31da848711.png-w331s)
图4-4 “slide1.xml.rels”文件内容
“Purchase Order
APO-074787648.ppsx\ppt\embeddings\”目录下的“oleObject1.bin”文件内嵌一个OLE
Package对象，嵌入文件为PE可执行程序。
![
](https://images.seebug.org/content/images/2020/07/675d5a37-b4ef-4788-8835-49a0d1e7c77d.png-w331s)
图4-5 “oleObject1.bin”文件内容
CVE-2014-4114漏洞的成因是packager.dll中CPackage::Load方法加载对应的OLE复合文档对象时，针对不同类型的复合文档进行不同的处理流程，但其中对某些复合文档中嵌入的不可信来源文件没有做处理。由此攻击者可使用伪造OLE复合文档的CLSID来达到执行特定文件的目的。微软在MS14-060补丁中，通过添加MarkFileUnsafe函数对文件进行MOTW处理，将其Security
Zone标记为“此文件来自其他计算机”，运行时会弹出安全警告窗口。
![
](https://images.seebug.org/content/images/2020/07/94d546b6-a118-494e-94dc-3d17ea06d666.png-w331s)
图4-6 “%TEMP%\NEW ORDER.exe”标记为不可信文件
但就算受害者已安装MS14-060的补丁，攻击者还是可以通过构造特定的CLSID和OLE
Verb来改变执行流程，从而绕过该补丁（CVE-2014-6352漏洞）。对于一个exe文件，即使被标记为URLZONE_INTERNET，右键点击以管理员权限执行该exe文件，那当程序运行时便不会再弹出“安全警告”（如图4-6）的提示，而是以（如图4-7）UAC
提示窗弹出。
![
](https://images.seebug.org/content/images/2020/07/f14b9d4c-4d5d-4509-b177-f49ae29e7873.png-w331s)
图4-7 弹出的UAC提示窗
由此可知，当受害者打开此PPSX恶意文档时，自动播放模式便会开启，同时“%TEMP%\NEW
ORDER.exe”将被释放在临时目录中。如果受害者选择“是”，恶意代码将会被执行。而如果受害者的系统处于UAC关闭状态或在获取了管理员权限的情况下，该UAC安全警告窗口则不会弹出，“NEW
ORDER.exe”会被静默地执行。
#### 4.3 GuLoader
如上文所述，最后被执行的“NEW ORDER.exe”可执行文件实际上便是文章开头提到的Guloader恶意软件（在后续对“NEW
ORDER.exe”的详细分析中，我们均使用“Guloader”来替代该文件名）。Guloader是一款新型的恶意软件下载器，其本身具有复杂的执行流程，通过采用各种代码混淆和随机化、反沙箱、反调试和数据加密等机制来对抗安全产品的检测。下面我们将对该GuLoader进行深入的挖掘分析。
##### 4.3.1 执行流程
如图4-8所示，
GuLoader首先将储存在代码部分的加密Shellcode解密并执行。这段Shellcode的主要功能为：以挂起方式创建一个系统子进程，之后将本段Shellcode自身注入到子进程并修改程序入口点为Shellcode处执行。最后从托管服务器上下载加密的BIN文件，成功下载后将其解密和运行。
![
](https://images.seebug.org/content/images/2020/07/522606ca-636d-43bd-995c-217d4a0762dd.png-w331s)
图4-8 Guloader执行流程图
##### 4.3.2 EXE可执行文件
（1）代码混淆
Guloader可执行文件是由Visual Basic
6语言编写的。使用工具查看后发现，其并未使用商业壳进行自身保护，而是使用混淆壳尝试对抗安全产品的查杀。由于杀软对商业壳比较敏感，并且商业壳检测和脱壳技术也比较成熟，所以混淆壳不失为一个不错的选择。混淆壳一般不存在通用的检测方法，并且静态脱壳相对较难，所以其恶意行为不易被发现，从而可长时间的存活在目标机器上。对于逆向分析人员来讲，分析这种带混淆壳的样本往往会花费大量的精力，无形的增加了人力和时间成本。
图4-9是一段混淆代码的截取，这部分代码使用了数据混淆中的常量拆分，主要目的是隐藏真实的代码逻辑，让分析者内心奔溃。
![
](https://images.seebug.org/content/images/2020/07/9f47a694-7a90-4d99-b9cb-006c2861b0ab.png-w331s)
图4-9 部分混淆代码
（2）代码解密
恶意软件首先计算出用于解密shellcode的密钥，其值为：0x24EBE470。
![
](https://images.seebug.org/content/images/2020/07/66880358-d589-4afb-a768-55519a6f1eb7.png-w331s)
图4-10 获取密钥的恶意代码
接着，为shellcode申请内存空间，再使用密钥进行XOR运算解密Shellcode并执行。
![
](https://images.seebug.org/content/images/2020/07/3ecfda7c-a888-4784-8b59-2247a9cf78ca.png-w331s)
图4-11 解密和执行shellcode
4.3.3 ShellCode
解密后的shellcode前期也采取了大量的对抗手段，使用各种代码混淆、沙箱检测、反调试等技术手段来规避安全产品的行为监测和查杀。仅当通过各种检查判断条件后，恶意代码才开始执行主功能行为。下面我们将对恶意代码做详细的分析。
（1）检测功能
  * 代码混淆
将解密后的shellcode从内存中dump出来并使用IDA反编译，可以看到shellcode中使用的混淆技术。恶意代码在执行过程中插入混淆函数，该函数的过程被分割成多个跳转流程，一直到最后再
jmp到原来的正常代码中继续执行下面的流程。图4-12是shellcode在入口处调用的此类混淆函数的代码片段，很显然通过该方法，能够有效的扰乱分析者对样本进行分析，严重降低了分析效率。
![
](https://images.seebug.org/content/images/2020/07/4276aa8c-480c-417e-91c3-0b4113d2764f.png-w331s)
图4-12 混淆后的代码片段
  * 动态获取API函数
接着，恶意代码通过访问PEB->LDR中的InMemoryOrderModuleList获取kernel32.dll的基址。遍历提取该模块导出表结构中存放函数名的数组，并依次将名称字符串作为参数传入到哈希算法函数中做运算，再将结果与硬编码数据做比较，以此方法来查找GetProcAddress函数。
![
](https://images.seebug.org/content/images/2020/07/cbb81390-d72c-499f-8a85-a5a898f1eefd.png-w331s)
图4-13 查找GetProcAddress函数
此处使用的是djb2的算法，
djb2是一个产生随机分布的哈希函数，与LCG的算法相似。由于该函数构造简单，使用移位和相加的操作，所以常被用来处理字符串。具体算法见图4-14。
![
](https://images.seebug.org/content/images/2020/07/6eafaea9-fad0-425a-825e-e731838e811b.png-w331s)