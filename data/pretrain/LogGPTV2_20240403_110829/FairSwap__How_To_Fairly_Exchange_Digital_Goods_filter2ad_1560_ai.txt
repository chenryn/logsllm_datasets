Thus, the execution of Experiment Game 1 running with adversary SimR
form the real world execution of Π with the judge smart contract GL,H
is only possible, since SimR
1 learns x in the ﬁrst round.
jc
1 is indistinguishable
. Note, that this simulation
39
We will now show how to construct a simulator that does not require this additional input of
x but uses the programmability of the random oracle to simulate this knowledge. We will do this
in two steps, ﬁrst we simulate the key commitment without using the ”real” encryption key and
in a third experiment also simulate the encoding of z without knowledge of x. We only sketch the
main diﬀerences to the previous simulator and later give a detailed construction of SimR, which is
the ideal adversary in the execution of F L
cfe. The Simulator of Experiment Game 2 is very similar
to SimR
1 and only diﬀers in the following way:
Simulator SimR
2
1. In the ﬁrst round, SimR
2 does not generate a commitment (c, d) ← Commit(k) but randomly
samples c∗ ← {0, 1}µ and outputs c∗ instead of c to the corrupted receiver. At this point Z
cannot distinguish if it received c or c∗, as long as c∗ was sampled uniformly at random from
the same domain that the random oracle H uses.
3. In the reveal phase, SimR
2 now needs to open the commitment and present and opening
2 randomly chooses d∗ ← {0, 1}κ and sends
value d, such that Open(c∗, k, d∗) = 1. SimR
(program, id , k||d∗, c∗) to H to program the random oracle to respond to all oracle queries of
k||d∗ with c∗.
This will succeed if H was not queried or programmed on x||r before. Since Z is computationally
bounded, it can only guess r and program or query H on polynomial many points. Additionally, if
SimR
2 chooses a opening value such that the programming fails, he can try again with a diﬀerent
value. Now when Z checks the opening Open(c∗, k, d∗), it will try to detect this programming
behavior in the simulation, by querying H(isPrgrmd, x||r) from this session either over the ideal
adversary or a corrupted party. Since SimR
1 is the ideal adversary and controls all corrupted
parties, he can interject all queries to H from this session and simply send back a false response,
to lie about the programmed values. Therefore the result of the simulation of the commitment
will be indistinguishable to Z with overwhelming probability. Therefore the environment cannot
distinguish the execution of experiment Game 2 from the execution of Game 3, except with negligible
probability.
It remains to show that SimR can simulate the encoding z∗ without knowledge of x in the
ﬁrst round, such that it is indistinguishable towards Z. This is possible since the construction of
encryption scheme using the programmable random oracle makes it non-committing for only the
ideal adversary SimR. He proceeds as follows:
In the ﬁrst round he simulates the encoding z by sampling it uniformly at random, i.e. z =
(z1, . . . , zm) ← {0, 1}µ×m. Upon learning the actual plaintext x = (xi, . . . , xn) SimR needs to
output a key k such that Dec(k, z) = (x). Knowing x, he samples k ← {0, 1}κ and programs the
random oracle H to open all decryption queries as follows:
∀i ∈ m : H(program(k||i, oi ⊕ zi)
Should Z request the response of (isPrgrmd, k||i) for any i ∈ n the simulator SimR lies to Z
and claims that it was not programmed. This simulation is indistinguishable from the real world
execution as long as the programming is not detected by Z, which happens if it queries H(k||i) for
any i ∈ [n] or programmed any of these values himself before the programming took place. If the
40
adversary does not know k this happens only with negligible probability since he can only make
polynomially many queries or programming requests to H. Therefore the execution of experiment
Game 2 is computationally indistinguishable from experiment Game 3. For a detailed proof about
how these properties in the global random oracle model can be achieved for encryption, we refer
the reader to [14].
By showing that SimR can simulate the encoding z without the knowledge of x, we have
completed all necessary steps of the simulation and can construct the ideal world simulator SimR
and concluded the proof. To give the reader a complete overview of the ﬁnal simulator for the
ideal world execution we formalize it in detail below, combining the steps of the tree experiments
above.
Simulator SimR
1. Upon receiving (sell , id , φ, p,S) from F L
cfe in the ﬁrst round SimR randomly samples
z∗ ← {0, 1}m×µ. Additionally, he simulates the commitment as c∗ ← {0, 1}µ and
sends the message (sell , id , z∗, φ, c∗) to R∗. Next he computes rφ = root(Mtree(φ) and
on input (init, id , p, c∗, rφ, rz) and sends the output to R∗.
rz = root(Mtree(z∗), runs GL,H
jc
2. Wait to receive (accept, id ) from R∗ in the third round.
• If no such message is received, SimR simulates the refund the blocked coins in GL,H
jc
and terminates the simulation.
• If SimR receives the accept message he sends message (buy, id , φ, p) to F L
(accept, id ) to R∗.
3. In the reveal phase SimR learns x from the message (bought, id , x), which F L
by sending (active, id ) ← GL,H
the activation of GL,H
jc
jc
cfe and simulate
cfe sends to R∗.
Then he needs to simulate the messages of the honest sender in protocol.
• SimR selects k uniformly at random from {0, 1}κ and for all i ∈ [n] set oi := xi and
for all j ∈ {0, . . . , m − n} and φj := (i, opi, Ii) computes on+i := opi({oj}j∈Ii).
• Then map the encryption of z∗ and k to the correct values by programming the random
oracle H in the following way: for all i ∈ m send the messages (program(k||i, oi ⊕ zi)
to H. From now on querying H(k||i) results in ri = z∗
i ⊕ oi such that for all i ∈ n
Enc(k, z∗
• To generate the correct opening for the commitment, SimR samples d ← {0, 1}κ and
i ) = zi ⊕ H(k||i) = oi will decrypt z∗
i to oi.
programs the random oracle by sending H(program(k||d, c∗)).
Whenever Z queries H (over R∗ or SimR) on the programmed values, SimR interjects
these queries and instead of forwarding them to H, responds to them himself so he can
pretend that the values are not programmed. Finally, SimR runs (revealed , id , d, k) ←
GL,H
(reveal , id , d, k).
jc
4. SimR waits to receive a message from R∗ in round 4.
• If the message is a valid complaint (complain, id , π) SimR runs GL,H
message. If the judge contract accepts the complaint, he lets F L
nates.
jc
on input of this
cfe continue and termi-
41
• If the message is a false complaint or (ﬁnalize, id ) SimR instead sends (abort, id ) to
F L
cfe and immediately trigger the following execution including the unfreezing og coins.
Then SimR terminates.
• If instead R∗ does not send a message, SimR also sends (abort, id ) but waits for one
round before he triggers the further execution, including the payout of coins. Then
SimR terminates.
jc
C.4 Simulation with two malicious parties
It remains to prove security for th last case, where Z corrupts both, the sender and the receiver.
The case of malicious sender and receiver does not guarantee any fairness and might not even
terminate. Recall, that we allow any malicious party to loose money if it does not follow to the
protocol execution, aborts and declines the unfreezing request made by ledger (c.f. Section 3). A
simple example of such a case is when S∗ does not trigger the ﬁnalize message when interacting
with GL,H
. This will result in his money staying blocked forever. But even if the standalone case
of two dishonest parties does not make much sense for the proposed applications, we still need to
prove indistinguishability of the real and hybrid world, to guarantee security when composed with
other protocols.
Claim 4. There exists a eﬃcient algorithm SimSR such that for all ppt environments Z, that
corrupt both, sender and receiver it holds that the execution of Π in the (Gjc,L,H)-hybrid world
in presence of adversary A is computationally indistinguishable from the ideal world execution of
F L
cfe with the ideal adversary SimSR.
Proof. The simulation of the case with both malicious sender and receiver, is a mixture of the two
previous simulations. The simulator runs in the F L
cfe world and needs to simulate the execution of Π
in the real world, using the inputs of S∗ and R∗. Additionally, it needs to execute the functionality
F L
cfe on behalf of ˜S∗ and ˜R∗ to ensure the correct blockage of coins in L. Since this case repeats the
steps of the simulations with one malicious parties, we will only give a high level sketch of SimSR.
Whenever R∗ or S∗ instruct L not to pay out the coins, SimSR forwards this message to L to
enforce the identical behavior in the real and ideal world.
Simulator SimSR
1. Upon receiving message (init, id , p, c, rz, rφ) in the ﬁrst round, SimSR simulates the execu-
(init, id , p, c, rz, rφ)
tion of the hybrid functionality by sending (initialized , p, c, rφ, rz) = GL,H
to ˜S∗.
If S∗ did not send the message (init), SimSR aborts the simulation.
Otherwise, if message (sell , id , z, φ, c) was also received from ˜S∗ in the ﬁrst round, SimSR
sets x∗ = 1n×λ and sends (init, id , φ, p, x∗) to F L
cfe.
jc
2. When SimSR receives (accept, id ) by S∗ he sends (buy, id ,R) to F L
cfe. Additionally he runs
(accept, id ). If no message from R∗ was received, SimSR terminates the
(active, id ) = GL,H
simulation.
jc
3. Upon receiving (reveal , id , d, k) from ˜S∗ in round 3, such that Open(c, d, k) = 1, SimSR
42
jc
(reveal , id , d, k) to simulate the execution of Π.
cfe to output of x∗ to R. Additionally SimSR runs (revealed , id , d, k) ←
triggers F L
GL,H
If no message (reveal , id , d, k) from ˜S∗ is received, send (abort, id ) to F L
S∗ and simulate the refund in the hybrid world by running GL,H
cfe in the name of
until it terminates.
jc
4. SimSR waits to receive a message from R∗.
• If the message is a valid complaint (complain, id , π) SimSR runs GL,H
this message. If the judge contract accepts the complaint, he lets F L
terminates.
on input of
jc
cfe continue and
• If the message is a false complaint or (ﬁnalize, id ) SimSR instead sends (abort, id ) to
F L
cfe and immediately trigger the following execution including the unfreezing og coins.
Then SimSR terminates.
• If instead R∗ does not send a message in the fourth round, SimSR waits for S∗ to
send (ﬁnalize, id ) in round 5. If S∗ sends this message, SimSR triggers the further
execution, including the payout of coins. Then SimSR terminates. If S∗ on the other
hand does not send this message, SimSR also triggers the further execution of F L
cfe but
when L request the payout of the coins to S∗, he refuses the request in the name of
S∗.
The simulator ensures that the coins are unfrozen correctly in L by submitting a wrong ﬁle x∗ to
cfe. This allows him to wait for the payout phase and simulate the outcome of GL,H
F L
accordingly. If
the receiver can produce a valid complain, which will trigger GL,H
to output the coins to R, SimSR
triggers the veriﬁcation of the ﬁle, which will conclude that φ(x) (cid:54)= 1. Otherwise, if R does not
produce a valid complaint, SimSR triggers the payout to S in F L
cfe without checking if φ(x) = 1 by
sending (abort, id ). Now he waits for S∗ to send the ﬁnalize message. If this message is received
within the expected time, he simulates the payout of coins. Otherwise, he needs to simulate that
the coins are frozen in L. He does this by refusing the payout of coins in L when F L
cfe instructs it
to send the payment of p coins to S∗. This will block the execution and the money is frozen.
cfe outputs
a wrong ﬁle x, since SimSR could easily simulate the correct output from the internal execution
of GL,H
cfe with SimSR is indistinguishable from the hybrid
world execution to Z.
Since SimSR controls all outputs to the corrupted parties, it does not matter, that F L
. This ensures that the execution of F L
jc
jc
jc
D Formal background of state channels
Formally, a channel can always be described by its state γ, which is as an tuple with the following
parameters:
γ = (id ,R,S, p, q, nc, cash nc, τ )
If γ is a channel between the users S and R we call the users γ.owners = {S,R}.
In this
scenario, we use the identiﬁer id to reference the channel instead of the contract. For every owner,
the channel stores the values γ.q and γ.p, which denote the amount of coins that are controlled by
the channel. Some of these coins (denoted as γ.cash nc) can be saved for a speciﬁc use, and will be
handled by so called nanocontracts. The overall money that can be spend through the channel is
43
γ.cash = γ.q + γ.p + γ.cash nc. State Channels can contain nanocontracts, which are represented
in the state as γ.nc. This value can either be empty γ.nc = ⊥, which means that the channel
currently does not contain a nanocontract, or γ.nc = nc, which means the contract nc is run as a
nanocontract. A nanocontract is deﬁned by its code and internal storage stateinit , must have an
initiating function nc.init(stateinit ) and outputs a distribution of coins (outR, outS). For simplicity
we only consider one nanocontract nc per state channel but it could without loss of generality
also contain multiple internal contracts. Before sending this message, both parties should verify
whether it is possible to execute C without involvement of the other party within time τ and that
it has the expected function. If this check is not performed, their coins reserved for the execution
of id might get lost.
Whenever the parties want to update the money distribution or other internal values in a
channel γ they agree on a new channel γ∗ with the updated parameters. We say that γ∗ is a
successor of γ when the following checks hold:
• γ∗.id = γ.id ,
• γ∗.owners = γ.owners,
• γ∗.cash = γ.cash and
• γ∗.nc ∈ {nc,⊥}.
In short we write γ (cid:55)→ γ∗.
To create the channel, both S and R have to agree on a channel with state γ. Then both
send a message containing γ to the ideal channel contract functionality FL
Chan (C )8. If some party
aborts during this step or the funds are insuﬃcient, the deposited money can be refunded after the
timeout through FL
Chan (C ). Otherwise, a channel is created with state γ. It can now be updated
an arbitrary number of times as long as both parties agree. For this S and R update the state to
γ∗ with γ (cid:55)→ γ∗.
If S and R want to run a nanocontract nc in the channel, they use its state parameters
γ.cash nc, γ.nc, γ.τ . Both parties should verify beforehand whether it is possible to execute nc
without involvement of the other party within time γ.τ and that it has the expected function. If
this check is not performed, the coins γ.cash nc reserved for the execution of γ.nc might get lost.
As long as both parties agree, they can update the channel whenever they want to run nanocon-
tract nc. If they also agree on the outcome of the nanocontract execution, they update the channel
state again, such that it contains the correct redistribution of coins and the nanocontract is deleted.
Should they not agree on the outcome of the nanocontract, either party can enforce the execution
of the internal nanocontract and terminate the channel. The execution of the nanocontract works
analogue to the deployment and execution of a contract in the contract hybrid world.
8For more information how this ideal functionality is constructed refer to [20]
44