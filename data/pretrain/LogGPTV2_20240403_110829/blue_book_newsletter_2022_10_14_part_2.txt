    The data was extracted from [AMD's official page](https://www.amd.com/en/products/specifications/compare/processors/10466,11826,10471,11176).
    They all support the chosen RAM and the motherboard.
    I'm ruling out Ryzen 7 5800x because it's too expensive both on monetary and
    power consumption terms. Also ruling out Ryzen 5 5600G because it has
    comparatively bad properties.
    Between Ryzen 5 5600x and Ryzen 7 5700x, after checking these comparisons
    ([1](https://nanoreview.net/en/cpu-compare/amd-ryzen-7-5700x-vs-amd-ryzen-5-5600x),
    [2](https://www.amd.com/en/products/specifications/compare/processors/10466,11826,10471,11176))
    it looks like:
    * Single core performance is similar.
    * 7 wins when all cores are involved.
    * 7 is more power efficient.
    * 7 is better rated.
    * 7 is newer (1.5 years).
    * 7 has around 3.52 GB/s (7%) higher theoretical RAM memory bandwidth
    * They have the same cache
    * 7 has 5 degrees less of max temperature
    * They both support ECC
    * 5 has a greater market share
    * 5 is 47$ cheaper
    I think that for 47$ it's work the increase on cores and theoretical RAM memory
    bandwidth.
* New: [Analyze CPU coolers to buy.](nas.md#cpu-cooler)
    It looks that the [Ryzen CPUs don't require a cooler to work well](cpu.md#quick-shopping-tips). Usually it adds another 250W to the consumption. I don't plan to overclock it and I've heard that ZFS doesn't use too much CPU, so I'll start without it and monitor the temperature.
    If I were to take one, I'd go with air cooling with something like the [Dark Rock 4](https://www.bequiet.com/en/cpucooler/1376) but I've also read that Noctua are a good provider.
* New: [Analyze server cases to buy.](nas.md#server-case)
    I'm ruling out the next ones:
    * [Fractal Design
        R6](https://www.fractal-design.com/products/cases/define/define-r6/blackout/):
        More expensive than the Node 804 and it doesn't have hot swappable disks.
    * Silverstone Technology SST-CS381: Even though it's gorgeous it's too
        expensive.
    * Silverstone DS380: It only supports Mini-ITX which I don't have.
    The remaining are:
    | Model             | Fractal Node 804         | Silverstone CS380   |
    | ---               | ---                      | ---                 |
    | Form factor       | Micro - ATX              | Mid tower           |
    | Motherboard       | Micro ATX                | Micro ATX           |
    | Drive bays        | 8 x 3.5", 2 x 2.5"       | 8 x 3.5", 2 x 5.25" |
    | Hot-swap          | No                       | yes                 |
    | Expansion Slots   | 5                        | 7                   |
    | CPU cooler height | 160mm                    | 146 mm              |
    | PSU compatibility | ATX                      | ATX                 |
    | Fans              | Front: 4, Top: 4, Rear 3 | Side: 2, Rear: 1    |
    | Price             | 115                      | 184                 |
    | Size              | 34 x 31 x 39 cm          | 35 x 28 x 21 cm     |
    I like the Fractal Node 804 better and it's cheaper.
### [OpenZFS](zfs.md)
* New: [Choosing the cold spare disks.](zfs.md#choosing-the-cold-spare-disks)
    It's good to think how much time you want to have your raids to be inconsistent
    once a drive has failed.
    In my case, for the data I want to restore the raid as soon as I can, therefore
    I'll buy another rotational disk. For the SSDs I have more confidence that they
    won't break so I don't feel like having a spare one.
## Hardware
### [CPU](cpu.md)
* New: Introduce CPU, attributes and how to buy it.
    [A central processing unit or CPU](https://en.wikipedia.org/wiki/Central_processing_unit), also known as the brain of the server, is the electronic circuitry that executes instructions comprising a computer program. The CPU performs basic arithmetic, logic, controlling, and input/output (I/O) operations specified by the instructions in the program.
### [RAM](ram.md)
* New: Introduce RAM, it's properties and how to buy it.
    [RAM](https://en.wikipedia.org/wiki/Random-access_memory) is a form of computer
    memory that can be read and changed in any order, typically used to store
    working data and machine code.
# Operating Systems
## Linux
### [i3wm](i3wm.md)
* New: Introduce i3wm.
    [i3](https://i3wm.org/) is a tiling window manager.
* New: [Layout saving.](i3wm.md#layout-saving)
    Layout saving/restoring allows you to load a JSON layout file so that you can
    have a base layout to start working with after powering on your computer.
    First of all arrange the windows in the workspace, then you can save the layout
    of either a single workspace or an entire output:
    ```bash
    i3-save-tree --workspace "1: terminal" > ~/.i3/workspace-1.json
    ```
    You need to open the created file and remove the comments that match the desired
    windows under the `swallows` keys, so transform the next snippet:
    ```json
        ...
        "swallows": [
            {
            //  "class": "^URxvt$",
            //  "instance": "^irssi$"
            }
        ]
        ...
    ```
    Into:
    ```json
        ...
        "swallows": [
            {
                "class": "^URxvt$",
                "instance": "^irssi$"
            }
        ]
        ...
    ```
    Once is ready close all the windows of the workspace you want to restore (moving
    them away is not enough!).
    Then on a terminal you can restore the layout with:
    ```bash
    i3-msg 'workspace "1: terminal"; append_layout ~/.i3/workspace-1.json'
    ```
    !!! warning "It's important that you don't use a relative path"
        Even if you're in `~/.i3/` you have to use `i3-msg append_layout
        ~/.i3/workspace-1.json`.
    This command will create some fake windows (called placeholders) with the layout you had before, `i3`
    will then wait for you to create the windows that match the selection criteria.
    Once they are, it will put them in their respective placeholders.
    If you wish to create the layouts at startup you can add the next snippet to
    your i3 config.
    ```
    exec --no-startup-id "i3-msg 'workspace \"1: terminal\"; append_layout ~/.i3/workspace-1.json'"
    ```
### [Khal](khal.md)
* New: [Edit the events in a more pleasant way.](khal.md#edit-the-events-in-a-more-pleasant-way)
    The `ikhal` event editor is not comfortable for me. I usually only change the
    title or the start date and in the default interface you need to press many
    keystrokes to make it happen.
    A patch solution is to pass a custom script on the `EDITOR` environmental
    variable. Assuming you have [`questionary`](questionary.md) and [`ics`](ics.md)
    installed you can save the next snippet into an `edit_event` file in your
    `PATH`:
    ```python
    """Edit an ics calendar event."""
    import sys
    import questionary
    from ics import Calendar
    file = sys.argv[1]
    with open(file, "r") as fd:
        calendar = Calendar(fd.read())
    event = list(calendar.timeline)[0]
    event.name = questionary.text("Title: ", default=event.name).ask()
    start = questionary.text(
        "Start: ",
        default=f"{str(event.begin.hour).zfill(2)}:{str(event.begin.minute).zfill(2)}",
    ).ask()
    event.begin = event.begin.replace(
        hour=int(start.split(":")[0]), minute=int(start.split(":")[1])
    )
    with open(file, "w") as fd:
        fd.writelines(calendar.serialize_iter())
    ```
    Now if you open `ikhal` as `EDITOR=edit_event ikhal`, whenever you edit one
    event you'll get a better interface. Add to your `.zshrc` or `.bashrc`:
    ```bash
    alias ikhal='EDITOR=edit_event ikhal'
    ```
    The default keybinding for the edition is not very comfortable either, add the
    next snippet on your config:
    ```ini
    [keybindings]
    external_edit = e
    export = meta e
    ```