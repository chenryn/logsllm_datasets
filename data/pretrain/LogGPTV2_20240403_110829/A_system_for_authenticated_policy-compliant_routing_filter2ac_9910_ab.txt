packet should be routed and the resource principal speciﬁes the en-
tity willing to be charged for the routing request. (For now, we will
consider waypoints to correspond to a speciﬁc router within an AS.
We return to evaluate how adjusting the topological granularity of
Platypus waypoints in affects their utility in section 6.2.)
In Platypus, packets are stamped with a source-routing request
by inserting a Platypus header immediately after the IP header of
each packet and including some number of capabilities, encapsulat-
ing the existing payload. Figure 2 shows the Platypus header format
with one capability attached. The header contains ﬁelds for the pro-
tocol version (currently 0), a set of bit ﬂags (whose use is described
in Section 4.2), a length ﬁeld (speciﬁed in terms of 32-bit words), a
pointer to the current capability (also in terms of 32-bit words), and
an encapsulated protocol ﬁeld to facilitate de-encapsulation. Capa-
bilities are appended immediately after the Platypus header, and
may be added by in-network stampers while the packet is in transit.
Since anyone can use a capability to forward packets through the
speciﬁed waypoint and bill the indicated resource principal, Platy-
pus must ensure that eavesdroppers watching packets in the net-
work cannot use capabilities they observe in ﬂight for their own
packets. Similarly, attackers should not be able to modify capa-
4 bytes
Version Flags Capability List
Length
Capability List
Pointer
Encapsulated
Protocol
Platypus header
Original Source Address
Final Destination Address
Waypoint address
Capability, c
Resource principal
Key ID Flags
Binding, b
Figure 2: Platypus header format with a single capability and
binding attached.
bilities or construct new ones that enable them to use waypoints
for which they are not authorized, or to bill other resource princi-
pals. To prevent this, each capability in a packet is accompanied
by a binding that cryptographically ensures the capability is valid
and being used by the appropriate party. Bindings are a function
of the capability, the packet contents, and a secret known only to
the owner of the capability. When a Platypus packet arrives at a
waypoint, the Platypus router validates the corresponding capabil-
ity and its binding. If the capability/binding pair is valid, the router
updates the waypoint pointer (indicating the packet has already
passed through this waypoint), sets the packet’s current destina-
tion IP to the waypoint ﬁeld of the next capability in the capability
list, replaces the current source IP with its own (to prevent ingress
ﬁlters from dropping the packet), and forwards the packet on. If
no additional capabilities remain, the router replaces the original
destination address.
3.1 MAC-based authentication
Platypus prevents the forging of capabilities or their bindings
through what is known as the “double MAC” trick [2], which we
have proven to be secure if the underlying MAC is a pseudorandom
function, as most modern MACs are believed to be. We deﬁne a se-
cret temporal key, s = MACk(c), generated from the capability, c,
using a message authentication code (MAC) such as HMAC [18].
The MAC is keyed with k, the key of the speciﬁed waypoint. This
value s is securely transferred to the resource principal (in a man-
ner described in Section 4). In order to use a capability, an indi-
vidual packet must be stamped with the capability and a binding,
b = MACs(MASK(P )), where MASK(P ) is the invariant [13]
contents of the packet (not including Platypus headers) with the real
source and destination addresses substituted and the packet length
ﬁeld omitted. Both b and c are included in the packet, as shown
in Figure 2. In this way, the binding is dependent upon both the
secret key s and the packet’s contents, and thus cannot be reused
for other packets. Similarly, any changes to the capability c would
render bindings computed with the secret temporal key s invalid.
Figure 3 presents pseudocode for Platypus packet veriﬁcation
and forwarding. To verify a packet’s binding (and, therefore, capa-
bility), a Platypus router only needs the local waypoint key, k, since
b(cid:1) = MACMACk(c)(MASK(P )) = MACs(MASK(P )). If b (cid:5)= b(cid:1)
,
either the capability or the binding (or both) has been forged and
the packet should be discarded. An advantage of this construction
is that the router needs to maintain only a constant amount of state
R: Revocation set, ID: Current key ID
PROCESS(P : Packet)
c ← ∗(P.phdr.ptr)
if |c.id−ID| > 1 or c ∈ R then
ICMPERROR(P )
s ← MACk(c.way(cid:6)c.rp(cid:6)GETTIME(c.id))
b(cid:1) ← MACs(MASK(P ))
if c.b = b(cid:1) then
P.phdr.src ← P.src
ACCOUNT(c.rp, P )
if P.phdr.src = 0 then
P.phdr.ptr ← P.phdr.ptr + |c|
if P.phdr.ptr ≥ P.phdr.len then
P.dst ← P.phdr.dst
else
c ← ∗(P.phdr.ptr)
P.dst ← c.way
FORWARD(P )
else
ICMPERROR(P )
Figure 3: Pseudocode for Platypus forwarding. P is a packet,
P.src is the packet’s source IP address, and P.phdr is the Platy-
pus header in which src (dst) is the source (destination) ad-
dress, ptr is the pointer to the current capability and len is
the length of the capability list. c is a capability, c.way is the its
waypoint ﬁeld, c.rp is its resource principal ﬁeld, c.id is its key
ID, and c.b is the binding. (cid:6) denotes concatenation.
irrespective of the number of resource principals. In addition, re-
jected packets elicit ICMP responses to the sender to quell further
invalid transmissions (subject to standard ICMP rate limiting).
3.2 Key expiration and timing
If temporal secret keys were never to expire, ASes would have no
means to enforce changing policies—resource principals could use
their capabilities forever. In addition, if a key were transferred to a
third party or compromised, the resource principal would have no
way to regain control over its associated capability. To address these
issues, Platypus provides automatic key expiration. Once a tempo-
ral secret key expires, resource principals must retrieve a new one
from the key server. To simplify the task of authenticating resource
principals to the key server, we introduce the notion of a capability
master key, ck, which is shared between the resource principal and
the key server. The capability master key is not used to generate ca-
pabilities or bindings, it is only needed to retrieve a new temporal
secret key from the key server.
Platypus is designed to avoid the need for tight time synchroniza-
tion between stamping parties and Platypus routers. Each capability
includes a key identiﬁer (key ID) which is a small (4-bit) integer
that identiﬁes the temporal secret used to compute each packet’s
binding. This key ID value changes on a regular basis (e.g., every
hour) and a new corresponding temporal secret generated. Since the
key ID space is small, the key ID may wrap around often, yielding
what would be identical temporal secrets if s = MACk(c). We ad-
dress this issue by incorporating the current time during generation
of temporal secrets.1 In this way, temporal secrets are guaranteed
to be unique despite key ID wraparound.
1Speciﬁcally, for a given time t, where t is the seconds part of a 32-bit UNIX times-
tamp in UTC, and an expiration interval of 2n, the corresponding key ID i = (t >>
n) & 0xF. That is, the key ID is the last 4 bits of t after removal of the lower n bits;
the key ID changes every 2n seconds. To compute a temporal secret s as in Figure 3, a
call to GETTIME(i) = ((t >> n) & 0xFFFFFFF0) | i, which returns the time value
that corresponds to the given key ID.
Revocation List R Capability Master Key ck
Waypoint Key k
•
•
Key Server
Platypus Router
Resource Principal
Trusted Third Party
Others
•
•
•
•
Temporal Secret Key s
◦
◦
•
•
Binding b
◦
◦
◦
•
Table 1: Capability knowledge hierarchy. • denotes that the value is/can be known, ◦ indicates it is generated on the ﬂy.
To ensure that both stamping agents and routers agree on the
current key ID, capabilities are associated with a key expiration in-
terval upon issuance. The length of the expiration interval presents
a natural tradeoff between control and overhead—short expiration
intervals provide ﬁne-grained control over secrets, but require more
frequent key lookup. Expiration intervals must be chosen based
upon operational experience with Platypus to suit the needs of the
issuing AS and its resource principals. Our only synchronization
requirement is that stampers have clocks that do not drift on the
order of the expiration interval. In addition, to allow for transitions
between secrets, we consider 3 secrets to be valid at any time: those
for the current, previous, and next key IDs. To combat clock drift
between Platypus routers, we expect that the routers are loosely
time synchronized using a standard service such as NTP [25].
3.3 Security
Security in Platypus is provided by the fact that not all parties
have the information needed to bind known capabilities to new
packets or create new, usable capabilities. Table 1 shows the types
of information known to various parties. To generate a temporal se-
cret key, a party must have the waypoint key, k, which is known
only to the router and the router’s key server. Binding a capabil-
ity to a packet requires only the temporal secret key, s, which is
generated based upon k and the current time. Knowledge of one
capability’s temporal secret key, however, does not allow a party to
generate temporal secrets for others. Resource principals wishing
to transfer rights for a particular waypoint to trusted third party can
pass both the capability and corresponding temporal secret key.
While the capability can be passed in the clear, the temporal se-
cret key must be communicated privately, ensuring that only the
chosen third parties are able to receive it. These third parties can
then use s to generate bindings to stamp their own packets. Others,
including those snifﬁng packets on the network, can see capabilities
and their bindings, but lack the secret s required to generate valid
bindings. Periodic key expiration ensures that third parties cannot
use temporal secrets indeﬁnitely. In addition, any temporal secret
key may be revoked by the resource principal through communica-
tion with the key server as will be described in Section 4.1.
Unfortunately, since bindings include almost all the invariant
contents of a packet, intermediate nodes are restricted in power. For
example, since the binding covers the payload (including TCP port
numbers) Platypus packets are not compatible with port-altering
network address translators (NATs), nor can they be fragmented.
We do not consider the inability to fragment a signiﬁcant limita-
tion, as hosts typically perform path MTU discovery for all des-
tinations. The NAT restriction, however, may be more signiﬁcant.
Any port-altering NATs traversed by Platypus packets on their way
to a waypoint must be Platypus-aware. Once a packet has passed
through its ﬁnal Platypus waypoint, however, it may pass through
NATs without ill effect. Similarly, packets may traverse any number
of NATs before being stamped. Since most NATs are deployed at
the edges of networks, the above sufﬁces when packets are stamped
inside the network. End hosts wishing to stamp their own packets,
however, cannot be behind a port-altering NAT.
4. CAPABILITY MANAGEMENT
Platypus gains signiﬁcant ﬂexibility from the ability to trans-
fer capabilities. Entities can collect capabilities from multiple re-
source principals, constructing source routes to which no single
entity would otherwise have rights. We describe capability man-
agement in two phases: First, we discuss how resource principals
obtain temporal secrets for their own capabilities. We then present
two schemes for the restricted delegation of a resource principal’s
capabilities.
4.1 Distribution
To bootstrap the capability distribution process, we expect that
each AS provides an interface (likely a Web server) through which
resource principal accounts are established. This can occur in many
ways. For example: the server and resource principal set up a secure
channel (using SSL, for example), and, after negotiating payment,
the server sends a resource principal ID, randomly generated capa-
bility master key ck, and the capability information to the resource
principal.
To look up the current temporal secret s associated with a capa-
bility, a resource principal generates a request by encoding the ca-
pability and a special request opcode as a string and prepends it to
the key-lookup subdomain (speciﬁed during the bootstrap process)
in a DNS TXT lookup request, which is routed by DNS to an ap-
propriate key server. For example, a request for a capability issued
by ucsd.edu with key-lookup subdomain platypus.ucsd.edu
would be .platypus.ucsd.edu. The DNS response
is a similarly encoded DNS TXT record containing the temporal
secret for the requested key ID encrypted under the capability mas-
ter key. The resource principal decrypts and veriﬁes the response,
yielding the current temporal secret s for the speciﬁed capability.
The use of DNS for key lookup may seem clumsy; a more natural
approach might be to contact the key server directly. To contact the
server, however, a resource principal would have to ﬁrst perform
a DNS lookup for the key server and then transmit its lookup re-
quest, requiring multiple round trips. Instead, Platypus piggybacks
the request for a key, shortening the lookup latency to about one
RTT, allowing for extremely short expiration intervals. By using
DNS to distribute keys, Platypus realizes caching, distributed au-
thority, and failure resistance without having to build a separate
key distribution infrastructure. In particular, Platypus key lookups
are cacheable since requests are plain text and replies are encrypted
under the capability master key for the requested capability. If mul-
tiple requests are made for the same shared capability, DNS caching
will automatically decrease the load on the key server.
While expiration provides for coarse-grained control of tempo-
ral secrets, a resource principal may want to immediately revoke
the current temporal secret when it suspects compromise. Platypus
enables such revocation: to revoke a particular temporal secret, the
resource principal computes the MAC of the capability and the cur-
rent time under the capability master key and sends the {capability,
time} pair, MAC, and the revocation opcode encoded as a DNS re-
quest. Platypus routers periodically receive updated revocation lists
from their associated key servers and consult the revocation list
whenever validating capabilities. The revocation list for the current
key ID is ﬂushed before key ID rotation.
4.2 Reply capabilities
Protocols such as TCP work best when forward and reverse path
characteristics are similar. In order to use Platypus source routes,
however, both ends of a ﬂow must have their own capabilities and
perform their own routing. Fortunately, it may often be the case
that a ﬂow is for the beneﬁt of only one party—an HTTP ﬂow,
for example—who may wish to be solely responsible for the ﬂow.
Platypus allows for resource principals to include a capability and
its corresponding temporal secret as part of a packet stream for the
recipient to use in response.
For concreteness, we describe reply capabilities in the context of
an HTTP ﬂow. Suppose the client possesses a capability to route
through some Platypus router to reach a Web server. The client
wishes to provide a capability to the server for reply packets back
to the client. (Obviously, the server or some router near the server
must support Platypus stamping to make this possible.) Platypus
allows for an in-band exchange of capabilities and temporal secrets
by conducting a Difﬁe-Hellman key exchange using a special reply
capability ﬂag in the Platypus header. We omit the details for space,
but once the capability and corresponding secret is transferred to
the server (requiring a three-way handshake; conveniently the se-
cret can be included on the ﬁrst TCP data segment—the HTTP
GET—if no server authentication is required), the server simply
uses it to stamp all packets destined for the client.
There must be some degree of trust in this relationship: the client
must expect that the server is going to send it useful data if it is
willing to be provide a capability for the trafﬁc. However, the client
may not wish to divulge its capability and temporal secret key en-
tirely. In particular, the client may want to transfer the appropriate
capabilities with a restriction that they be used only to send pack-
ets to its address. Thus, the server would only be able to use the
restricted capability to route to the client, who would be able to de-
tect any abuse. Such a restricted delegation mechanism is of use in
a more general setting; we turn to this problem next, and use the
fully restricted variant for reply capabilities.
4.3 General delegation
In general, a resource principal may want to specify a particular
IP address preﬁx to which a third party may send packets using the
principal’s capability. Furthermore, the third party should be able
to sub-delegate (specify a subnet of the previously delegated pre-