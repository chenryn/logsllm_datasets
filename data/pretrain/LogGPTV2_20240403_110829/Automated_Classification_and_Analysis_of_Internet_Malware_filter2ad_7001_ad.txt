### Detection and Analysis of Malware Using Automated Clustering

#### 1. Introduction
While individual antivirus (AV) system detection rates may vary, over 96% of malware samples were detected by at least one AV system. However, many AV systems fail to detect these samples, highlighting the need for more comprehensive and consistent detection methods.

#### 2. Conciseness
Conciseness refers to the ability of a labeling system to group similar items into meaningful categories without unnecessary labels. In our evaluation, we compared the clustering created by AV systems with those generated by our system. We analyzed the number of unique labels produced by AV systems and the heuristically-generated families or groups of these labels. For example, the labels W32-Sdbot.AC and Sdbot.42 both belong to the "sdbot" family. AV systems vary widely in their conciseness, but our system strikes a balance, providing fewer labels than the total unique labels of AV systems but more than the number of AV system families. This is consistent with previous observations, where AV system families exhibit multiple different behaviors, but these behaviors share commonalities across individual labels.

#### 3. Consistency
Consistency measures the ability of a labeling system to identify similar or identical items in the same way. In our context, this means that identical behaviors should be placed in the same clusters. To evaluate consistency, we examined binaries that exhibited exactly identical behavior. In our large sample, approximately 2,200 binaries shared exactly identical behavior, forming 267 groups. Our system correctly placed all identical behaviors in the same clusters. However, AV systems only labeled exactly identical behavior with the same label 31% to 68% of the time, indicating a lack of consistency.

#### 4. Applications of Clustering and Behavioral Signatures
##### 4.1 Classifying Emerging Threats
Behavioral classification can effectively characterize emerging threats not yet known or detected by AV signatures. For example, cluster c156 consists of three malware samples with malicious bot-related behavior, including IRC command and control activities. Each sample in the cluster shares 96.92% of the 75 observed behaviors, indicating almost identical behavior. However, only F-Prot detects one of the samples, while other AV vendors fail to detect any. Our behavioral classification helps identify these samples as emerging threats through their extensive malicious behavioral profile.

##### 4.2 Resisting Binary Polymorphism
Behavioral classification can also assist in grouping undetected outlier samples (due to polymorphism or other deficiencies in AV signatures) with common families that share significant behaviors. For instance, cluster c80 consists of three samples with identical behaviors, including distinctive strings "bling.exe" and "m0rgan.org." These samples are consistently labeled as a malicious bot across most AV vendors, except Symantec, which fails to identify one of the samples. To maintain completeness, this outlier sample should be labeled similarly based on its behavioral profile.

##### 4.3 Examining Malware Behaviors
Automated security systems provide detailed information on individual malware and broad analysis of future malware trends. Using our system's behavioral signatures, we extracted the most prevalent behaviors in various categories. Table 10 shows the top five behaviors in each category. Network behaviors conform to common notions of how malware operates, with two of the top five involving mail ports, likely for spam. Port 6667 is a common IRC port used for remote control. Process behaviors often mimic common Windows utilities to avoid suspicion, such as svchost.exe and tasklist32.exe. File writes include common executable names and data files, such as winhlp32.dat, which is common to many Bancos trojans. Registry keys, particularly those related to wininet.dll, indicate heavy use of existing libraries for network support. Writing to PRNG keys indicates frequent randomization, and malware often examines and modifies registered applications, proxy settings, and mounted drives.

#### 5. Related Work
Our work is the first to apply automated clustering to understand malware behavior using resulting state changes on the host to identify various malware families. Previous research has focused on static and byte-level signatures, which are insufficient for emerging threats due to intentional evasion. Behavioral analysis has been proposed to address polymorphism and metamorphism. Emulating malware to discover spyware behavior using anti-spyware tools has also been explored. Our approach uses a higher abstraction layer, focusing on the resulting state changes rather than individual system calls, providing more semantic value in explaining behaviors.

#### 6. Limitations and Future Work
Our system has limitations common to dynamic analysis. Malware samples executed within VMware may not exhibit their malicious behavior if they employ anti-VM evasion techniques. To mitigate this, samples could be run on a real, non-virtualized system. Another limitation is the time period for collecting behaviors, which may miss time-dependent or delayed activities. Additionally, malware that depends on user input may not exhibit further malicious behavior. Varying the execution environment, including multiple operating system versions and network connectivity, may yield additional behaviors. Future work could include integrating low-level details of state changes and evaluating other high-level behavioral reports from existing systems.

#### 7. Conclusion
We demonstrated that existing host-based techniques, such as antivirus systems, fail to provide useful labels for the malware they encounter. Our dynamic approach executes malware in a virtualized environment and creates a behavioral fingerprint, which is then clustered using normalized compression distance. This technique provides a novel way of understanding the relationships between malware and is an important step forward in bridging existing malware classifications.

#### Acknowledgments
This work was supported in part by the Department of Homeland Security (DHS), the National Science Foundation (NSF), and corporate gifts from Intel Corporation and Cisco Corporation. We thank Jonathon Giï¬ƒn for valuable feedback and the anonymous reviewers for critical and useful comments.

#### References
[References listed here]