title:Towards Formal Security Analysis of Industrial Control Systems
author:Marco Rocchetto and
Nils Ole Tippenhauer
Towards Formal Security Analysis of Industrial Control
Systems
Marco Rocchetto
Security and Trust of Software Systems
University of Luxembourg
PI:EMAIL
Nils Ole Tippenhauer
Information Systems Technology and Design
Singapore University of Technology and Design
PI:EMAIL
ABSTRACT
We discuss the use of formal modeling to discover potential
attacks on Cyber-Physical systems, in particular Industrial
Control Systems. We propose a general approach to achieve
that goal considering physical-layer interactions, time and
state discretization of the physical process and logic, and
the use of suitable attacker proﬁles. We then apply the ap-
proach to model a real-world water treatment testbed using
ASLan++ and analyze the resulting transition system using
CL-AtSe, identifying four attack classes.
To show that the attacks identiﬁed by our formal assess-
ment represent valid attacks, we compare them against prac-
tical attacks on the same system found independently by six
teams from industry and academia. We ﬁnd that 7 out of
the 8 practical attacks were also identiﬁed by our formal as-
sessment. We discuss limitations resulting from our chosen
level of abstraction, and a number of modeling shortcuts to
reduce the runtime of the analysis.
1.
INTRODUCTION
A number of real-world examples (e.g., the ones reported
in [13]) have shown the paramount importance of improving
security in Cyber-Physical System (CPS). The exploitation
of security ﬂaws in CPS can potentially cause damage to na-
tions (e.g., the attack on Maroochy Shire Council’s sewage
control system in Queensland, Australia, in 2000 [12]) or
even the entire world (e.g., Stuxnet [42]). A CPS contains
both physical and virtual components, therefore a number
of new attacks that combine the two aspects can be ex-
ploited by an attacker [12].
In addition, the attacker can
take advantage of the physical layer interactions with the
system and then a number of new attacker properties must
be taken into account (e.g., the distance between the at-
tacker and the system) during the analysis of the security of
CPS [31, 39]. Therefore, the security assessment of CPS is a
challenging task, mainly due to the intrinsic complexity and
heterogeneity of such systems. On the one hand, this com-
plexity makes it diﬃcult to eﬃciently apply automated or
formal techniques for the security analysis of CPS [18,24,30].
On the other hand, the practical analysis of the security in
CPS might aﬀect the availability of the system and the ex-
ploitation may even result in expensive damage to the CPS.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02 - 06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053024
We argue that a formal design-time security analysis of
CPS would largely increase the security of CPS, and that
a number of key elements for such an analysis have already
been proposed in the security research community. In par-
ticular, formal methods for security analysis of information
systems have recently been extended to cyber-physical sys-
tems in [23,30]. In addition, generalized attacker and system
models have been proposed in [9, 30, 39]. Together, those
methods could allow to detect logical ﬂaws in the system
design, that may be diﬃcult to detect by empirical security
assessment [17]. One key component for such assessments is
a framework that allows to model the system and attacks in
suﬃcient detail. Using that framework, potential vulnera-
bilities of the system can be identiﬁed, and countermeasures
can be validated. A standardized language for the deﬁnition
of a CPS system model has not been deﬁned. A deﬁnition
of the system properties can be found in [12, 31] but it is
far from be exhaustive. Several properties of the system has
also been proposed as a result of the deﬁnition of a cyber-
physical attacker, e.g., [32, 39]. However, to the best of our
knowledge, there is still no general description of the proper-
ties that has to be considered when deﬁning a system model
of a CPS.
In this work, we bring together formal methods and at-
tacker models proposed for cyber-physical systems, and use
them to perform a comprehensive security assessment of a
real-world water treatment testbed. We validate the results
of our assessment by comparing it to attacks proposed in
related work, and results from practical assessment [2].
While the deﬁnition of attacks, attackers, and system model
should be a fairly standard procedure for the formal analysis
of systems, the comparison between theoretical and practical
results is often omitted in formal approaches. This analysis
can be used to emphasize the importance of a design-time
security analysis showing what it can prevent.
We summarize our main contribution as follows.
1. We propose an extensive system model of a real-world
water treatment testbed (SWaT), that considers both
network and physical layer interactions. Our model
has been deﬁned by following the description of the
system deﬁned during the design phase.
2. We categorize the possible attacks on SWaT, general-
izing our results for water treatment plants.
3. We consider diﬀerent attacker proﬁles and we show
how our analysis results changes with respect to dif-
ferent proﬁles.
4. We provide a comparison between the attacks found
by our formal analysis tool and the results of practical
assessments performed by six teams from industry and
academia.
114Structure.
In Section 2, we brieﬂy introduce the back-
ground. We deﬁne how to model a CPS and attackers for
CPS in Section 3.
In Section 4, we introduce a practical
use case, show how to model it, and present the results of
our formal assessment. In Section 5, we compare our formal
assessment results with ﬁndings from practical assessment
on the modeled system. Related work is summarized in Sec-
tion 6, and the paper is concluded in Section 7.
2. BACKGROUND
This work leverages related work from two publications:
an attacker model framework proposed in [31], and an exten-
sion of the Dolev-Yao (DY) attacker model [16] with physi-
cal interactions proposed in [30]. We combine the two ideas
and deﬁne how to formally validate a water treatment plant
against diﬀerent types of attackers (referred to as attacker
proﬁles in [31]). In the remainder of this section, we provide
more details on those two works, and introduce the formal
speciﬁcation language we use (ASLan++).
2.1 Attacker Model Framework
In [31], the authors deﬁne a taxonomy that they apply
to review related work on attacker models for the security
analysis of CPS. They use the results to deﬁne the main
concepts behind the formal security analysis of such sys-
tems and then they propose a framework (implemented in a
tool they called APE [28]) to encompass commonly used at-
tacker models. We ﬁrst present their terminology (relevant
for our work) and then we use those deﬁnitions to informally
describe their attacker model framework.
Terminology. A System under attack is an interacting or
connected group (soft- and hardware, humans) forming a
uniﬁed whole and serving a common purpose.
An Attacker is a group of human actors that collaborate
to achieve a goal related to the system under attack.
An Attacker Proﬁle describes templates or classes of at-
tackers. These proﬁles are a generic description of the set-
ting and intuition, and not an exhaustive listing of possible
actions, motivations, or capabilities of the attacker.
An Attacker Model (together with compatible system mod-
els) ideally fully characterizes the possible interactions be-
tween the attacker and the system under attack. In particu-
lar, the model deﬁnes constraints for the attacker (e.g. ﬁnite
computational resources, no access to shared keys)
A System Model characterizes relevant components of the
system under attack, to a level of detail that allows to deter-
mine all possible interaction of the attacker with the system.
We will not go into the details of the system model since our
work focuses on the attacker. Therefore, we will not distin-
guish between system models that consider risks and threats
linked to components of the system, and those that do not.
An Attack Model characterizes all potential interactions
between the attacker and a speciﬁc conﬁguration of the sys-
tem under attack and the speciﬁcation of the goal that the
attacker wants to achieve with respect to the system under
attack. One can consider an attack model as an instantia-
tion of the attacker model on a speciﬁc scenario (i.e., system
conﬁguration).
Attacker Model Framework. The attacker model frame-
work is deﬁned as an hierarchy of dimensions. Each dimen-
sions deﬁnes a relevant aspect for modeling the attacker for
CPS, e.g., the distance between the attacker and the CPS.
A metric is associated to each dimensions and, when the
dimensions are instantiated, the framework produces an at-
tacker proﬁle. An attacker proﬁle is then an instantiation
of the set of dimensions deﬁned by the attacker framework.
We discuss the details of the dimensions and metrics in Sec-
tion 3.2 when we deﬁne a mapping between attacker proﬁle
and attack model.
Figure 1: The extension of the Attacker Model
Framework. The dotted lines are the ones formal-
ized in this work.
As depicted in Figure 1, the attacker model framework
can produce a variety of diﬀerent attacker proﬁles. In [31],
the authors deﬁne six attacker proﬁle archetypes. Those
archetypes capture common intuitions behind the related
work they reviewed. Due to lack of space we cannot go into
the details of those archetypes but we report their informal
deﬁnitions.
A Basic User is someone who uses already established and
potentially automated techniques to attack a system. This
attacker has average access to hardware, software, and In-
ternet connectivity, similar to what an individual can obtain
through purchase with personal funds or by theft from an
employer.
An Insider, which for example can be disgruntled employ-
ees or a social engineering victim. The employment position
or the system privileges he owns (e.g., user, supervisor, ad-
ministrator) are tightly related to the damage he can cause
to the target.
Hacktivist. A portmanteau word which combines hacker
and activist, as deﬁned in [14]. This class of attackers uses
their hacking abilities to promote a political agenda.
Terrorist, also known as cyber-terrorist. Is a politically
motivated attacker who uses computers and information tech-
nology in general to cause severe disruption or widespread
fear.
Cybercriminal, sometimes generally called black hat hacker
or structured hacker. An attacker with extensive security
knowledge and skills. This category of attackers takes ad-
vantage of known vulnerabilities, and potentially has the
knowledge and intention of ﬁnding new zero-day vulnerabil-
ities.
Nation-State, an attacker sponsored by a nation/state.
Possibly belonging to (or that used to belong to) a state
organization for carrying out oﬀensive cyber operations.
2.2 Cyber-Physical Dolev-Yao
In [30], the authors deﬁne an extension of the DY attacker
model, called Cyber-Physical Dolev-Yao (CPDY). Before
going into the details of this extension we brieﬂy introduce
the DY attacker model.
The Dolev-Yao Model. The DY attacker model [16] is
a de-facto standard for the formal analysis in the commu-
nication security domain. As such, the attacker model is
commonly used for the identiﬁcation of cyber-related at-
tacks, mostly in security protocols (e.g., [4]). It also has been
used for other systems, e.g., Web applications and Service-
Oriented architectures as proposed in [3, 27]. Attacker mod-
els `a la DY have been proposed [32, 36] to reason on CPS.
In this work, we consider the standard DY [16] model of an
active attacker who controls the network but cannot break
cryptography.
Cyber-Physical extension. The extension (leveraging
Horn logic rules) allows the standard DY to perform physical-
layer interaction with the system. The authors motivate the
extension by showing (on a small CPS model) that the stan-
dard DY model is not enough for modeling attackers in a
AttackerFrameworkProfile 1SystemFrameworkAttack modelProfile 2Profile 3System AAbstraction115cyber-physical context. The CPDY extension is deﬁned by
two main sets of rules:
• Rules that represent physical-layer interaction in the
system, e.g., to deﬁne that a valve can be manually
operated.
• Rules that represent physical-layer capabilities of the
attacker, e.g., to deﬁne that if an attacker has physical
access to the CPS he can damage a component of the
CPS.
We do not go into the details of the rules in this section since
we will present our modeling technique in Section 3.
One obvious drawback of this extension is that the deﬁ-
nition of the laws of physics related to the various processes
in a CPS might not be straightforward. We discuss this in
more details later in Section 3.
2.3 Formal Speciﬁcation Language
We now deﬁne the terminology related to the system model
speciﬁcation that we use in the remainder of this paper.
We use a terminology that resembles the one used in the
ASLan++ language but we only informally describe the se-
mantics of the terminology (the formal deﬁnition is reported
in [7]). In our notation, a system model is formally repre-
sented by the following main concepts.
Entities, Agents and Roles. An entity in a system model
represents a component of the system (i.e., of the CPS).
Speciﬁcally, an entity describes both the behavior of the
components and the communication with other entities. As
an example, the behavior of a PLC is deﬁned by its logic
and it usually involves the interaction between the PLC and
other entities in the CPS. An entity can also be considered
as a set of components. In this case, the entities that have
been grouped together are called sub-entities. An agent of
the system model can play the role of a speciﬁc entity. There
are two types of agent: honest and dishonest. When an hon-
est agent plays the role of an entity, he behaves according
to the behavior of the entity. A dishonest agent represents
the attacker and then (depending on the attacker proﬁle de-
scribed later in this section) he can diverge from the honest
behavior of the entity. For example, he can inject malicious
payloads in the communication with other entities.
Communication and Channels. The network communi-
cation between diﬀerent entities occur on a network chan-
nel can be signed, encrypted, or both (i.e., secure). An at-
tacker model `a la Dolev-Yao [16] is assumed, therefore, if the
channel is unencrypted the attacker is able to read the mes-
sages exchanged through that channel. When the messages
are not signed nor encrypted the attacker is able to modify
the messages. In CPS, we also need to consider the analog
communication and physical layer interactions between en-
tities. For example, a sensor can communicate through an
analog channel with a PLC. With the level of abstraction
we have considered in this paper we do not take into ac-
count the implementation details of the diﬀerent protocols
involved in the analog or network communication. However,
if a modeler considers an attacker who can read the analog
communication then he has to explicitly model the message
exchange between entities in the system model. Otherwise,
he can group all the entities together and model the internal
behavior without the need of specifying the internal commu-
nication.
Semantics and Transition System. Once a system model
is speciﬁed in ASLan++, a translation (automatically per-
formed by a tool) must be performed to generate a tran-
sition system (deﬁned in the ASLan formal language [40]).
The transition system can be used as input for the tools
that performs the formal security analysis. The semantics
of the ASLan++ model is then expressed as a transition
Figure 2: Graphical representation of the process of
modeling and analyzing CPS. The dimensions of the
attacker model are discussed in detail in [31].
system where the initial status of each entity is described by
a predicate over all the variables used for the deﬁnition of
the behavior of the entity itself. The transitions represents
variation to the variables of the entities or on the knowledge
of the attacker. The attacker knowledge is represented by a
predicate as for any other entity. The ﬁnal state (goal state)
represents the goal that the attacker wants to achieve. We
describe the goals later in Section 3 and Section 4.
3. TOOL-ASSISTED ASSESSMENT
The overall assessment process proposed is summarized
in Figure 2. Following the structure of that ﬁgure, we now