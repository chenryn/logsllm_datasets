### 2.1.1 Monadic Interpretation of Says

The "Says" modality is often used to ascribe beliefs to principals and can express authorized credentials, but its precise interpretation is a nuanced and consequential matter. This section discusses the interpretation of the "Says" modality, particularly in the context of our proof representations.

**Monadic Interpretation of Says:**
Historically, the "Says" modality has been related to classical modalities. In the original presentation of Nexus Authorization Logic (NAL) [35], the interpretation of "Says" is considered lax and can be embedded in the logic S4 [16]. Intuitively, this lax interpretation allows for a more liberal ascription of beliefs to principals. Formally, a lax system includes the axiom:
\[ \forall X . X \Rightarrow A \text{ Says } X \]
In contrast, in a non-lax system, we can only deduce \( X \Rightarrow A \text{ Says } X \) if \( X \) is a theorem.

While the lax interpretation of "Says" has been adopted by other systems, several authors have highlighted potential dangers associated with it [1, 17, 19]. The authors of FOCAL, a more recent version of NAL, refer to the lax interpretation in NAL as a "bug" [19]. A thorough formal study identifies the core issue as the axiom of escalation [3]:
\[ \forall X, Y . (A \text{ Says } X) \Rightarrow (X \lor A \text{ Says } Y) \]

However, NAL is not classical—it lacks negation and the law of excluded middle—so it does not exhibit escalation. Furthermore, NAL enjoys the properties of "Says" transparency and handoff, which are desirable in any authorization logic. "Says" transparency means that any principal can be trusted to assert their own worldview, while "handoff" supports the delegation of authority in distributed settings. The use of NAL also has implementation benefits; lax logic can be interpreted monadically, and a monadic interpretation of "Says" readily supports a Curry-Howard isomorphism with typed monadic structures in a functional calculus (as shown in Section 2.1.4). Thus, terms in the calculus can serve as proof witnesses, enabling optimization techniques such as certain types of reduction.

In a proof-checking system, beliefs relevant to a judgment are explicitly provided as part of the judgment. In the PCNC implementation (see Section 5.1), beliefs provided to support a proof are always cryptographically signed and ascribed to a principal (the signer). Therefore, the problems with "importing beliefs" noted by Hirsch et al. [19] are mitigated in our setting. For these reasons, we build on NAL in PCNC.

### 2.1.2 Syntax and Proof Theory of NALlight

In Figure 2, we present the syntax and proof theory of the logic NALlight in a judgmental style. NALlight is a simplified fragment of NAL with a streamlined set of atomic principals \( A \) rather than the more complex principals used by Schneider et al. [35]. These principals are encoded using a subset of nullary atomic formulas, simplifying the encoding of formulas as types. We do not need two forms of universal quantification (i.e., over first- and higher-order constructs) as in the original system [35].

Our proof theory differs slightly from the original formulation but captures the same principles of deduction. We define Unit and Bind rules, which are known to be inter-derivable with the rule forms in the original definition (including idempotence, distribution, and necessitation). Additionally, we allow higher-order (vs. first-order) existential quantification. These design choices yield a tighter Curry-Howard correspondence with the system presented in Section 2.1.4. Note that NALlight does not support negation and the law of excluded middle, so it is not classical and not subject to escalation [3].

We use letters \( A, B, C \) to refer to principals, while \( F, G, H \) refer to formulas. Formulas include universal (\( \forall \)) and existential (\( \exists \)) quantification, and standard logical connectives (\( \land, \lor, \Rightarrow \)). Predicates \( f \) on terms \( t \) are left abstract and represent application-level assertions. In PCNC, we will be concerned with assertions about behavioral policies, allowing the verification of authorization and behavioral policy components to be synergized. We require that variables \( X \) are allowed to appear in term positions in predicates, supporting first-order quantification.

The logic includes the "Says" modality as a primitive. The "SpeaksFor" modality is defined as syntactic sugar in terms of higher-order quantification:
\[ A \text{ SpeaksFor } B \equiv \forall X . (A \text{ Says } X) \Rightarrow (B \text{ says } X) \]

A restricted form of delegation is also supported:
\[ A \text{ SpeaksFor } B \text{ on } (X_1 \cdots X_n : F) \equiv \forall X_1 \cdots \forall X_n . (A \text{ Says } F) \Rightarrow (B \text{ says } F) \]
where \( X_1 \cdots X_n \) only occur in term positions in \( F \)—i.e., they are first-order variables.

### 2.1.3 Complexity of Proof Inference and Verification

NALlight subsumes a higher-order constructive logic, making it highly expressive. At the low end of expressiveness, intuitionistic propositional logic is PSPACE-complete [38], while intuitionistic predicate logic is undecidable—and these are first-order. Both can be embedded in NALlight, which is a higher-order constructive predicate logic, so in general, NALlight proof inference is also undecidable. However, checking NALlight proofs is linear in the size of the proof term, as each deduction step involves only simple syntactic checks.

### 2.1.4 Proof Representation: System FSays

Judgments are of the form \( \Delta \vdash F \), where \( \Delta \) is a list of assumptions, considered equivalent up to reordering. Validity of judgments is defined as derivability by inductive application of the derivation rules defined in Figure 2. If \( \Delta \) is empty (and hence \( F \) is a tautology), we write \( \vdash F \).

To represent proofs in a compact and verifiable manner, we introduce the language System FSays, which enjoys a Curry-Howard types-as-formulas correspondence with NALlight. The syntax of System FSays is presented in Figure 3, where \( x \) and \( X \) are type and term variables, respectively. The language is an extension of System F with a "Says" monad to represent the "Says" modality in NALlight and other features to represent NALlight connectives. Types \( \tau \) of System FSays correspond tightly to NALlight formulas \( F \). The System F fragment of System FSays is adequate to represent implication and higher-order quantification as in NALlight, and the addition of sum (+) and product (×) types are adequate to represent disjunction and conjunction. The "Says" monad is realized using return and bind terms. Existential quantification is realized using standard pack and unpack terms.

We introduce System FSays specifically for PCNC, including three atomic predicate forms: reconfig, extend, and ≼. The first two are parameterized by NetKAT programs and are unary, while the latter is binary. The predicate reconfig(p) asserts the intent to install configuration program p, extend(p) asserts the intent to extend the current configuration with program p, and p ≼ q asserts semantic containment of p in q.

Type validity is defined in terms of judgments of the form \( S, \Gamma \vdash e : \tau \). Here, \( \Gamma \) is an environment binding free term variables to types, and \( S \) is the set of type variables in scope. Considering the type \( \tau \) as a NAL formula analogue, the term \( e \) is referred to as a witness. The type derivation rules have a tight correspondence with the NALlight natural deduction rules shown in Figure 2. These rules are mostly standard and include System F-style polymorphism, existential quantification, etc. As shown in Figure 3, to support judgments involving the "Says" modality, we include monadic typing rules for return and bind constructs. See the appendix for the full typing rules.

### 2.1.5 Types-as-Formulas Correspondence

Our main result for System FSays is the soundness of the representation—i.e., if a System FSays term is typeable at type \( \tau \), the formula corresponding to \( \tau \) is derivable. The issue of completeness is left as an interesting topic for future work, noting that we do not support arbitrary atomic formulas in System FSays nor an explicit false term.

Since the syntax of types and formulas used in System FSays and NALlight, respectively, do not match up, we define an interpretation of types as formulas denoted \( \langle \tau \rangle \):
\[ \langle \tau_1 \leq \tau_2 \rangle = \langle \tau_1 \rangle \leq \langle \tau_2 \rangle \]
\[ \langle \tau_1 + \tau_2 \rangle = \langle \tau_1 \rangle \lor \langle \tau_2 \rangle \]
\[ \langle \tau_1 \to \tau_2 \rangle = \langle \tau_1 \rangle \Rightarrow \langle \tau_2 \rangle \]
and so on. We extend this interpretation pointwise to type environments, which translate to lists of assumptions in NALlight. Then we can state the types-as-formulas correspondence isomorphism as follows, using this translation. The results follow by induction on derivations and are straightforward due to the tight correspondence.