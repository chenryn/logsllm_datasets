本文原文来自[From zero to tfp0 - Part 1:
Prologue](http://highaltitudehacks.com/2020/06/01/from-zero-to-tfp0-part-1-prologue/)。  
2019年1月22日，Google Project
zero安全研究员[@_bazad](https://twitter.com/_bazad)发了以下[推文](https://twitter.com/_bazad/status/1087782723970785281?ref_src=twsrc%5Etfw)。
    如果您对iOS内核引导自举安全研究(包括伪造PAC和调用任意内核函数的能力)感兴趣，请保留一台iOS 12.1.2的A12研究设备。
他发现的是MIG(Message Interface
generator，消息接口生成器)生成的代码中的引用计数漏洞。他提供了触发该漏洞并引起内核panic的POC。之后又提供了向用户态提供内核任务端口(tfp0)从而可以读写内核中任何内容的完整的POC。  
2019年1月29日，他又发布了以下[推文](https://twitter.com/_bazad/status/1090312918422282241)，将其称为voucher_swap。
    现在A12设备上能够在内核中执行代码，介绍一下voucher_swap：
    https://googleprojectzero.blogspot.com/2019/01/voucherswap-exploiting-mig-reference.html
越狱社区随后将该漏洞用于为iOS 12开发完整的越狱程序。本系列博客分为三个部分。  
第1部分介绍iOS安全基础知识，这是理解下面两部分的基础。这一部分讨论了分析kernelcache，Mach消息，Mach端口，MIG，堆分配基础，CoreTrust，PAC等等，以及一些流行的漏洞利用技术，例如伪造内核任务端口，通过task_for_pid()读取内核等等。如果你已经知道这些技术可以直接跳至第2部分。在第1部分中我将提到其他两部分，这两部分将进一步重申为什么理解这些概念是必要的。  
第2部分将讨论[@_bazad](https://twitter.com/_bazad)的voucher_swap以及实现tfp0的完整步骤。  
第3部分将讨论实现越狱的步骤，例如逃逸沙盒，CoreTrust，启用rootfs remount等等。  
在开始之前，需要准备以下文件。
  * 存在漏洞的xnu内核代码：[xnu-4903.221.2](https://opensource.apple.com/tarballs/xnu/xnu-4903.221.2.tar.gz)
  * voucher_swap EXP代码：[voucher_swap](https://bugs.chromium.org/p/project-zero/issues/attachment?aid=377026&signed_aid=RWxVCY6jN3pZa8F0_0iOhg==)
  * [Undecimus越狱的最新版本](https://github.com/pwn20wndstuff/Undecimus)
  * iPhone8的iOS12.0的[IPSW](http://updates-http.cdn-apple.com/2018FallFCS/fullrestores/091-63070/11855120-AC8E-11E8-8110-D73611761120/iPhone_4.7_P3_12.0_16A366_Restore.ipsw)
  * Hopper，IDA Pro或Binary-Ninja，你喜欢哪个都可以
  * jtool2
## XNU内核
iOS
kernelcache由核心内核及其内核扩展组成。内核代码本身是不开源的，但是它基于在macOS上使用的开源XNU内核的分支。可以从opensource.apple.com下载XNU内核。  
从最近几年开始，Apple也一直在开源ARM架构特定的代码，这些代码可以在ifdef CONFIG_EMBEDDED语句下找到。当然也有一些没有开源。  
通过源码审计就可能找到内核中的漏洞。但是，只有通过编译内核并查看BUILD目录才能找到某些漏洞(例如voucher_swap)，该目录包含MIG生成的代码。内核扩展中存在的漏洞通常是通过逆向找到的，因为kext代码通常不是开源的。有些漏洞仅存在于macOS，而有些漏洞仅存在于iOS。
## kernelcache
kernelcache是一个包括核心内核及其内核扩展的Mach-O二进制文件。在iOS
10之前它一直是加密的，令人意外的是之后Apple以性能为主要原因决定发布未加密的kernelcache。现在可以轻松从IPSW文件解压提取它。在此之前，获得kernelcache的方式通常是找到内核漏洞之后将它从内存中dump出来，或者获取加密密钥(从theiphonewiki或利用bootrom漏洞)之后解密。  
要获得解压的kernelcache，只需将ipsw文件解压并查找kernelcache文件。
    prateek:mv iPhone_4.7_P3_12.0_16A366_Restore.ipsw iPhone_4.7_P3_12.0_16A366_Restore.zip
    prateek:unzip iPhone_4.7_P3_12.0_16A366_Restore.zip
    Archive:  iPhone_4.7_P3_12.0_16A366_Restore.zip
      inflating: Restore.plist
       creating: Firmware/
       creating: Firmware/usr/
       creating: Firmware/usr/local/
      inflating: BuildManifest.plist
       creating: Firmware/AOP/
      inflating: Firmware/AOP/aopfw-t8010aop.im4p
      inflating: Firmware/D201_CallanFirmware.im4p
      ....
      inflating: kernelcache.release.iphone10
      inflating: Firmware/ICE16-3.00.01.Release.plist
      inflating: kernelcache.release.iphone9
      inflating: Firmware/ICE17-2.00.01.Release.plist
       creating: Firmware/Maggie/
可以使用jtool2列出所有内核扩展并将它们拆分为相应的kext文件。  
IDA通过魔术值检测kernelcache，并提供了将kernelcache拆分为相应的kext文件的选项。现在可以分别逆向这些内核扩展，以便挖掘其中的漏洞。  
在越狱的iOS设备上，解压后的kernelcache可以在/System/Library/Caches/com.apple.kernelcaches/kernelcache下找到。一些越狱使用这个文件来动态找到某些符号和偏移量的地址，而不是使用硬编码的偏移量。一个很好的例子就是@morpheus创建的Qilin工具包。
## kernelcache符号
符号化二进制文件可能需要很多人力工作。直到iOS 11 kernelcache一直带有某些符号。从iOS
12开始，Apple决定删除kernelcache的所有符号，但是Apple误发布了符号完整的beta版本的kernelcache。这个IPSW后来从下载中删除了。下图显示了jtool2分别在删除了符号的iOS
12 kernelcache和符号完整的iOS 12 beta kernelcache上获得的符号数量。  
符号完整的kernelcache随后被jtool2用来为删除了符号的kernelcache创建符号。jtool2其中一个最有用的功能是analyze命令，提供一个iOS
12 kernelcache，它会将符号缓存输出到文件。  
如下所示，大约有12000个符号。  
如果看到$$$，一种最简单的方法是使用IDA 7.2开始引入的Lumina功能获取符号。
## 编译内核
编译内核对于发现漏洞非常重要。实际上，我们在这里讨论的voucher_swap漏洞是不能通过审计xnu内核源码找到的。因为一些依赖关系，编译内核有点复杂，但是通过Google可以找到许多一步一步说明如何编译内核的文章，包括[@_bazad](https://twitter.com/_bazad)为XNU
4570.1.46(MacOS High Sierra
10.13)编写的自动化[脚本](https://gist.github.com/bazad/654959120a423b226dc564073b435453)。在第2部分研究voucher_swap时我们将查看存在于MIG生成的文件中的含有漏洞的源代码。
## Mach消息
XNU内核的独特功能之一是它广泛使用了Mach
IPC，它是从Mach微内核派生而来的，并且是迄今为止最快的IPC机制之一。iOS上的许多常用IPC机制(例如XPC)仍在底层使用Mach消息。下面是有关Mach消息的一些要点。
  * Mach IPC基于单向通信
  * Mach IPC中的通信以Mach消息的形式在端口之间进行。根据消息头中设置的特定位，消息可以是简单的也可以是复杂的
  * 发送和接收消息必须有关联的端口权限。下面是不同类型的权限：  
MACH_PORT_RIGHT_SEND-允许发送消息  
MACH_PORT_RIGHT_RECEIVE-允许接收消息  
MACH_PORT_RIGHT_SEND_ONCE-允许发送一次消息  