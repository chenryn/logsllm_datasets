blocks, i.e., input and output sharing, AND and XOR gates, arith-
metic addition and multiplication gates, share conversions, as well
as the available computation and communication resources. We au-
tomatically measure runtime, required communication and circuit
depth, i.e., round complexity, of each individual building block for
different input sizes and all available sharing types. Moreover, we
evaluate them with different degrees of parallelism, to consider the
efficiency gain of parallelization and also to determine the limits
of the available resources. To optimize for the best possible per-
formance, this probing takes place on the systems where the final
hybrid protocol will be deployed. By doing this, we can provide
an estimate for the runtime and bandwidth requirement of the
compiled hybrid MPC protocols without actually running them by
linear inter- and extrapolation of the previously measured smaller
building blocks.
Fig. 5 shows a comparison of empirically measured runtimes
(solid lines) and estimated runtimes (dashed lines) for three use
cases: Minimum-Euclidean-Distance (described in §5.2.1) and AES
evaluated with Yao’s garbled circuits and the GMW protocol, respec-
tively. We benchmark the building blocks for different input sizes,
which are evaluated in parallel. Extrapolating from runtime that
was measured on small building blocks to a full-sized circuit and the
influence of the network connection between the MPC parties leads
to imprecision in the runtime prediction. In our measurements we
found that the prediction was always within −50% and +50% of
the actual achieved runtime. For better runtime prediction a larger
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada856Total Runtime and Estimates for LAN connection
128
256
512
1024
4096
2048
8192
16384
Input size
Total Runtime and Estimates for WAN connection
]
s
m
[
e
m
i
t
n
u
R
104
103
102
105
104
]
s
m
[
e
m
i
t
n
u
R
128
256
512
1024
2048
4096
8192
16384
Input size
AES GMW
AES Yao
Min. Euclidean Dist.
Figure 5: Comparison of measured runtimes (solid lines) and
corresponding estimates (dashed lines) using a log-log plot.
number of measurements and more data points of the underlying
building blocks are required to limit the influence of noise on a busy
network or on shared hardware. As our results show, the runtime
estimate that is interpolated from measuring the underlying build-
ing blocks captures the relative runtime between the protocols well
and allows for identifying the most efficient sharing in the protocol
selection step for a given deployment scenario.
5 BENCHMARKS
In this section, we present an experimental evaluation of HyCC.
We study the efficiency of protocol selection, the circuits created
by HyCC, and their performance in hybrid MPC protocols for var-
ious use cases in two different deployment scenarios. The goal
of this evaluation is to illustrate that the circuits that were auto-
matically created by HyCC from ANSI C code are comparable to
hand-crafted hybrid circuits and significantly more efficient than
previous single-protocol compilers. As such, we are able to show
that HyCC is simplifying the ease-of-use of hybrid MPC, and is
thus a powerful tool to prototype a solution for a privacy problem,
which allows to identify whether generic MPC protocols achieve
sufficient efficiency or whether dedicated protocols need to be de-
veloped. We remark that the goal of this work is not to outperform
dedicated secure computation protocols, which are optimized to
achieve maximum efficiency for a specific use case. We begin with
an evaluation of the runtime of the protocol selection algorithm
presented in §4.2.
5.1 Protocol Selection
To illustrate that an exhaustive search is a sufficient solution for
the protocol selection problem in most practical cases, we measure
the runtime of the protocol selection algorithm in Fig. 6. Shown are
the runtimes averaged over k = 10 executions of a straight forward
(unoptimized) implementation running on a commodity laptop for
randomly generated graphs with n = 2 · w modules and increasing
graph width w. We observe the expected exponential growth in
runtime when increasing w. Albeit being a limiting factor of our
approach, to the best of our knowledge all applications in privacy
research studied so far have a very small branching factor in their
functionalities, which leads to very small width w. For example,
all use cases in this work have a width of at most w = 3, which is
solved in less than 0.01 seconds and we remark that even larger
graphs with a width of w = 10 are solved in seconds.
]
s
[
e
m
i
t
n
u
R
101
10−1
10−3
2
4
6
8
10
12
14
Graph width w
Figure 6: Runtime of the protocol selection algorithm for
different graph widths w.
5.2 Use Cases
Next, we evaluate the generated circuits and protocol selections
made by HyCC for different use cases in the ABY framework [18].
The ABY framework provides state-of-the-art implementations for
Yao’s protocol, GMW, OT-based additive secret sharing protocols,
and the corresponding conversion protocols, which makes it an
ideal backend to evaluate the created circuits. For the evaluation, we
use applications that illustrate the versatility of HyCC or that have
previously been used to benchmark MPC protocols and compilers.
Experimental setup. All applications are implemented based on
textbook algorithms and compiled with HyCC using a total opti-
mization time of T = 10 minutes. The generated circuits are eval-
uated on two identical machines with an Intel Core i7-4790 CPU
and 32 GiB RAM, connected via a 1 Gbps local network, denoted as
LAN. To simulate an Internet connection between the MPC parties,
denoted as WAN, we use the Linux tool tc to set a latency of 50 ms
(100 ms RTT) and limit the throughput to 100 Mbps. We set the
symmetric security parameter to 128 bit. Running times are median
numbers from 10 measurements. “—” denotes that no values were
given or benchmarked.
For all applications the number of non-linear (multiplicative)
gates, communication rounds, transferred bytes, and the protocol
runtime of the setup phase and of the online phase are measured.
For comparison purposes we provide these numbers not only for
the best protocol selection but also for different instantiations of the
same functionality, e.g., all modules evaluated in a Boolean circuit-
based protocol, or a hybrid of a Boolean circuit and arithmetic
sharing. As before, we use A for arithmetic sharing, B for Boolean
sharing using the GMW protocol, and Y for Yao’s garbled circuits.
We omitted A-only measurements for use cases that include bit-
operations (e.g., minimum, comparison), since these are extremely
costly in A sharing and therefore not implemented in ABY [18].
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada857DT INPUT_A_db [N ][ D ];
DT INPUT_B_sample [D ];
DT matches [N ];
DT dist1 = db1 - s1 ;
DT dist2 = db2 - s2 ;
return dist1 * dist1 + dist2 * dist2 ;
1 # define N 128
2 # define D 2
3
4 # include 
5 typedef int32_t DT ;
6
7 DT match ( DT db1 , DT db2 , DT s1 , DT s2 ) {
8
9
10
11 }
12
13 void mpc_main () {
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32 }
}
DT OUTPUT_res = min ;
DT dist = match ( INPUT_A_db [i ][0] , \
DT min = match ( INPUT_A_db [0][0] , \
for ( int i = 1; i < N; i ++) {
if ( dist < min ) {
INPUT_A_db [0][1] , INPUT_B_sample [0] , \
INPUT_B_sample [1]) ;
INPUT_A_db [i ][1] , INPUT_B_sample [0] , \
INPUT_B_sample [1]) ;
min = dist ;
}
Listing 4: Biometric matching code example.
Module
Table 1: Modules and their circuit sizes when compiling the
biometric matching example with HyCC.
non-lin.
depth
0
20
10
909
non-linear gates
A
0
2
—
128
Inputs Outputs
8,256
32
32
128
32
64
8,256
32
mpc_main
match (×128)
loop1 (×127)
total
B
0
1,785
120
2 · 105
Y
0
1,536
64
2 · 105
# bits
5.2.1 Biometric Matching (Minimum Euclidean Distance). The min-
imum Euclidean distance is the minimum of the distances from a
single coordinate to a list of coordinates. It is used in biometric
matching between a sample and a database, and is a well-known
benchmark for MPC, e.g., [9, 18, 24]. For illustration purposes a
code example for the biometric matching functionality is shown in
Listing 4 for a database of size n = 128 and dimension d = 2. The
identified modules and their circuit sizes when compiling this code
with HyCC are given in Tab. 1.
For the experimental evaluation we use databases consisting of
n ∈ {1,000; 4,096; 16,384} samples with dimension d = 4, where
each coordinate has bit length b = 32 bits. The performance results
are given in Tab. 2. We compare a hand-built hybrid ABY circuit [18]
with a circuit that is compiled with HyCC. The results show that
the circuits that we automatically compiled from a standard ANSI C
description achieve the same complexity as the circuits that were
hand-built and manually optimized in ABY. Here, a combination
of arithmetic sharing and Yao’s protocol (A+Y) achieves the best
runtime in all settings. The runtimes in both implementations show
a slight variation that is due to variance of the network connection.
We remark that the setup phase of the ABY circuit is more effi-
cient, because ABY allows single-instruction-multiple-data (SIMD)
preprocessing, which is currently not implemented in HyCC.
To show the efficiency gain of hybrid protocols over standalone
protocols, we give experiments using B or Y sharing only. These
protocols are significantly less efficient and for larger input sizes
even exceed the memory resources of our benchmark hardware.
5.2.2 Machine Learning. Machine learning (ML) has many appli-
cations and is a very active field of research. Protecting the privacy
of training data or ML inputs is also an active research area.
Supervised machine learning – Neural networks. Deep (Convolu-
tional) Neural Networks (CNNs) are one of the most powerful ML
techniques. Therefore many dedicated protocols for private data
classification using CNNs have been proposed recently [21, 38, 46].
We implemented CryptoNets [21] and the very recent MiniONN
CNN [38], which both have been proposed to detect characters
from the MNIST handwriting data set. Previously these use cases
needed to be carefully built by hand, while we achieve even better
performance when conveniently compiling easily understandable
C source code to a hybrid MPC protocol.
Tab. 3 shows machine learning performance results. For Cryp-
tonets, HyCC automatically determined A as the best sharing in
the LAN setting. When changing the activation function (from the
square function to f (x) = max(0, x), known as RELU function), or
when changing the number representation (fixed-point instead of
integer), a hybrid A+Y protocol becomes the fastest option.
For the MiniONN CNN, HyCC proposes to use A+Y, where Y
is mainly used to compute the RELU activation function, which
results in a hybrid protocol that requires only a third of the on-
line runtime, total runtime, and total communication compared to
the original MiniONN protocol [38]. When expressing the entire
MiniONN functionality solely as a Boolean circuit, more than 250
million non-linear gates are used. Using Yao’s protocol in the LAN
setting, sending the corresponding garbled circuit would take more
than one minute, assuming perfect bandwidth utilization. Thus, in
comparison to all existing Boolean circuit compilers for MPC, i.e.,
single protocol compilers, HyCC achieves a runtime that is more
than one order of magnitude faster.
Unsupervised machine learning – k-means. Clustering is another
data mining task, frequently used to identify centroids in unstruc-
tured data. One of the most well known clustering algorithms is k-
means, and multiple works proposed dedicated privacy-preserving
k-means protocols, e.g., [31, 49]. We evaluate a textbook algorithm
that detects c = 4 clusters in 2-dimensional data sets of size n = 500
using i = 8 iterations and show our results in Tab. 3. Also in this
use case, a hybrid A+Y protocol achieves the best runtime.
5.2.3 Gaussian elimination. Solving linear equations is required in
many applications with Gaussian elimination being the most well
known solving algorithm. We implement a textbook Gauss solver
with partial pivoting for n ∈ {10, 16} equations using a fixed-point
number representation and present results in Tab. 4. Fixed-point
numbers can be implemented in software, and thus also in HyCC,
with only a few lines of code, which is illustrated in Appendix A.
In all scenarios, HyCC identifies A+Y as the most efficient protocol,
where Y is mainly used to compute the row permutations and
divisions. Note that due to the significant circuit depth, we did not
Session 5B: SecComp 2CCS’18, October 15-19, 2018, Toronto, ON, Canada858Table 2: Minimum Euclidean distance benchmarks comparing a hand-built circuit (ABY [18]) with a compilation from HyCC
(best values marked in bold).
Circuit
Sharing
min. Euclid ABY [18] (n = 1,000)
min. Euclid HyCC (n = 1,000)
min. Euclid ABY [18] (n = 1,000)
min. Euclid HyCC (n = 1,000)
min. Euclid HyCC (n = 1,000)
min. Euclid HyCC (n = 1,000)
min. Euclid ABY [18] (n = 4,096)
min. Euclid HyCC (n = 4,096)
min. Euclid ABY [18] (n = 4,096)
min. Euclid HyCC (n = 4,096)
min. Euclid HyCC (n = 16,384)
min. Euclid HyCC (n = 16,384)
A+Y
A+Y
A+B
A+B
Y
B
A+Y
A+Y
A+B
A+B
A+Y
A+B
non-linear