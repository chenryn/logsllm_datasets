title:SymTCP: Eluding Stateful Deep Packet Inspection with Automated Discrepancy
Discovery
author:Zhongjie Wang and
Shitong Zhu and
Yue Cao and
Zhiyun Qian and
Chengyu Song and
Srikanth V. Krishnamurthy and
Kevin S. Chan and
Tracy D. Braun
SYMTCP: Eluding Stateful Deep Packet Inspection
with Automated Discrepancy Discovery
Zhongjie Wang∗, Shitong Zhu∗, Yue Cao∗, Zhiyun Qian∗, Chengyu Song∗,
∗Department of Computer Science and Engineering, University of California, Riverside,
Srikanth V. Krishnamurthy∗, Kevin S. Chan†, and Tracy D. Braun†
{zwang048, szhu014, ycao009}@ucr.edu, {zhiyunq, csong, krish}@cs.ucr.edu
†U.S. Army Research Lab, {kevin.s.chan.civ, tracy.d.braun.civ}@mail.mil
Abstract—A key characteristic of commonly deployed deep
packet inspection (DPI) systems is that they implement a simpli-
ﬁed state machine of the network stack that often differs from that
of endhosts. The discrepancies between the two state machines
have been exploited to bypass such DPI based middleboxes.
However, most prior approaches to do so rely on manually
crafted adversarial packets, which not only are labor-intensive but
may not work well across a plurality of DPI-based middleboxes.
Our goal in this work is to develop an automated way to craft
candidate adversarial packets, targeting TCP implementations in
particular. Our approach to achieving this goal hinges on the key
insight that while the TCP state machines of DPI implementations
are obscure, those of the endhosts are well established. Thus, in
our system SYMTCP, using symbolic execution, we systematically
explore the TCP implementation of an endhost,
identifying
candidate packets that can reach critical points in the code (e.g.,
which causes the packets to be accepted or dropped/ignored);
such automatically identiﬁed packets are then fed through the
DPI middlebox to determine if a discrepancy is induced and
the middlebox can be eluded. We ﬁnd that our approach is
extremely effective. It can generate tens of thousands of candidate
adversarial packets in less than an hour. When evaluating against
multiple state-of-the-art DPI systems such as Zeek and Snort, as
well as a state-level censorship system, viz. the Great Firewall of
China, we identify not only previously known evasion strategies,
but also novel ones that were never previously reported (e.g.,
involving the urgent pointer). The system can be extended
easily towards other combinations of operating systems and DPI
middleboxes, and serves as a valuable tool for testing future DPIs’
robustness against evasion attempts.
I.
INTRODUCTION
Deep packet inspection (DPI) has become a technology
commonly deployed in modern network security infrastruc-
tures. By assembling and checking application layer content,
DPI enables powerful functionalities that are not present in
traditional ﬁrewalls. These include malware detection [10],
remote exploit prevention [41], phishing attack detection [16],
data leakage prevention [46], government network surveil-
lance [7], [6], targeted advertising [28], [3], and trafﬁc dif-
ferentiation for tiered services [51], [32], [20].
Unfortunately, to assemble application layer content from
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24083
www.ndss-symposium.org
stateful protocols like TCP, DPI needs to engineer the cor-
responding state machine of the protocol. This introduces a
fundamental limitation of DPI, which is a susceptibility to
protocol ambiguities. In brief, most network protocol speciﬁ-
cations (e.g., RFCs for TCP [36]) are written in a natural lan-
guage (English), which makes them inherently ambiguous. To
make things worse, some parts of the speciﬁcations are delib-
erately left unspeciﬁed, which in turn leads to vendor-speciﬁc
implementations. Consequently, different network stack imple-
mentations (e.g., Windows and Linux) typically have inherent
discrepancies in their state machines [42], [13], [38]. In fact,
even different versions of the same network stack implemen-
tation, can have discrepancies. To ensure low overheads and
compatibility with most implementations, DPI middleboxes
usually implement their own simpliﬁed state machines, which
are bound to differ from the ones on endhosts.
As pointed out by previous works [37], [48], [29], such
discrepancies lead to certain network packets being accept-
ed/dropped by either a “DPI middlebox” or the endhost.
Exploiting this property, one can use insertion packets (i.e., a
packet which is accepted and acted upon by the DPI middlebox
to change its state, whereas the remote host drops/ignores it)
and evasion packets (i.e., a packet which is ignored by the DPI
middlebox but the remote host accepts and acts on it) [37] to
mislead the DPI’s protocol state machine. Speciﬁcally, such
packets cause the DPI to enter a different state than the one
on the endhost. Consequently, the DPI can no longer faithfully
assemble the same application layer content as the endhost,
failing to catch any malicious or sensitive payload.
To date, research on insertion and evasion packets are
based on manually crafting such packets targeting speciﬁc
DPI middleboxes [37], [48], [29]. Unfortunately, it is a labor-
intensive task to analyze each and every middlebox implemen-
tation and come up with the corresponding strategies for such
adversarial packet generation. One can potentially automate the
process by searching through all possible sequences of packets
to identify insertion and evasion packets. Unfortunately, the
search space is exponentially large, i.e., there are 2160 possi-
bilities to cover a 20-byte TCP header of even a single packet,
let alone testing a sequence of packets.
“Can we develop automated ways to construct packets that
can successfully de-synchronize the state of a DPI middlebox
from that of a (end) server?” This question is at the crux of the
work we target in this paper, answering which not only can
help test future generations of DPIs but also help stay on top
of the arms race against future censorship technologies. Our
focus here is on TCP, since it is the cornerstone upon which
most popular application-layer protocols are built. We develop
an approach that is driven by the insight that even though
the TCP state machines of DPI middleboxes are obscure, the
implementations of TCP on the endhosts are well established
(e.g., a very large fraction of the servers run Linux operating
systems). Given this, we explore the TCP state machine of
endhosts (using symbolic execution) and generate groups of
candidate packets based on what critical points and states they
can reach, i.e., states where packets are either accepted or
dropped/ignored due to various reasons. Next, we perform
differential testing by feeding such packets through the DPI
middlebox and observe whether they induce any discrepancies,
i.e., whether the DPI middlebox can still perform its intended
function of identifying connections that contain malicious/sen-
sitive payloads.
The major contributions of the work are the following:
• We formulate the problem of automatically identifying in-
sertion and evasion packets by focusing on exploring the
TCP state machine on endhosts, and conducting differential
testing against blackbox DPIs.
• We develop SYMTCP, a complete end-to-end approach
to automatically discover discrepancies between any TCP
implementation (currently Linux) and a blackbox DPI. We
have released the source code of SYMTCP and datasets at
https://github.com/seclab-ucr/sym-tcp.
• We evaluate our approach against three DPI middleboxes,
Zeek, Snort, and Great Firewall of China (GFW), and
automatically ﬁnd numerous evasion opportunities (several
are never reported in the literature). The system can extend
to other DPIs easily and serves as a useful testing tool
against future implementations of DPIs.
II. BACKGROUND
In this section, we ﬁrst provide a brief background on why
eluding attacks are possible against DPI. Subsequently, we pro-
vide some background on symbolic execution and associated
techniques since these are integral to building SYMTCP.
A. Eluding Attacks against Deep Packet Inspection
DPI is specially designed to examine content related
to higher-layers, such as the application layer (e.g., HTTP,
IMAP). To examine application-layer payloads, DPI ﬁrst re-
constructs data streams from network packets (TCP packets)
captured from an interface. Then it automatically assigns an
appropriate protocol parser to parse the raw data stream [19].
Finally, it performs “pattern matching” on the parsed output.
To illustrate as an example, consider the common case of
keyword-based ﬁltering of HTTP requests (e.g., deployed on
censorship ﬁrewalls). When the DPI module (referred to as
simply DPI for ease of exposition) detects a speciﬁc keyword
in the HTTP URI, it may take follow-up actions (e.g., blocking
the connection or silently recording the behavior). Sometimes
the pattern matching signatures can be more complex, wherein
the DPI examines a combination of ﬁelds from multiple
layers and data from both directions (to and from a server)
in a sequence [44]. For example, one endhost ﬁrst sends a
“HELLO” message to port 443, and then the other party
responds with an “OLLEH” message.
However, DPI suffers from the inherent vulnerability of
evasion because of discrepancies between its TCP implemen-
tation and that of the endhost (e.g., a server) arising because of
protocol ambiguities [37], [23]. An example is that Snort [43]
accepts a TCP RST packet as long as its sequence number is
within the receive window (which is too lenient), while the
latest Linux implementation will make sure that the sequence
number of the RST packet matches the next expected number
(rcv_next) exactly. This allows an attacker to send an
insertion RST packet with an intentionally marked “bad” in-
window sequence number, which terminates the connection on
Snort, whereas the remote host will actually drop/ignore such
a packet. Such discrepancies open up a gap for attackers to
elude the DPI by sending carefully crafted packets.
Besides discrepancies due to protocol
implementations,
lack of knowledge of the network topology could also intro-
duce additional ambiguities. For example, it is hard for a DPI
to infer whether a packet will reach the destination. Thus, the
attacker can send a packet with a smaller TTL to cause it not to
reach the remote host, however, such a packet has an inﬂuence
on the DPI.
Previous research works [48], [29] have exploited the net-
work ambiguities and protocol implementation discrepancies
to design evasion strategies against real-world DPI systems,
such as the national censorship systems in China and Iran,
and ISPs’ trafﬁc differentiation systems for tiered services.
Those evasion strategies are shown to have high success rates
in rendering the DPI ineffective. However, most of the common
discrepancies can be patched by the DPI devices, leading to
an arms race. In contrast, our system presents a major step
towards automating the evasion strategies, which not only can
serve as a valuable testing tool against future generations of
DPIs but also keep pace in the escalating arms race in the
context of DPI evasion.
B. Symbolic Execution vs. Concolic Execution vs. Selective
Symbolic Execution
Symbolic execution [26] is a powerful and precise soft-
ware analysis/testing technique that is widely employed for its
ability to break through complex and tight branch conditions
and reach deeper along execution paths, which is a distinct
advantage compared to other less precise techniques such
as fuzzing. In symbolic execution, instead of using concrete
values, variables are assigned symbolic values to explore the
execution space of a target program. The symbolic execution
engine simulates the program execution by interpreting each
instruction (either at an intermediate representation level like
LLVM-IR [11] or VEX [40], or at the binary level [49]),
and maintain symbolic expressions for each program vari-
able. En route, the engine collects path constraints in the
form of symbolic expressions. Whenever a branch with a
symbolic predicate is encountered, the engine checks whether
the corresponding true/false path is satisﬁable (with the help
of an SMT solver); if so, it forks the execution path into
two and adds a new path constraint according to the branch
condition (true or false). The disadvantage of symbolic
execution, however, is in its efﬁciency or scalability. Both
simulated execution and constraint solving can be extremely
slow even with optimizations such as caching and incremental
solving [11]. Moreover, the total number of feasible execution
2
III. THREAT MODEL AND PROBLEM DEFINITION
In this section, we ﬁrst describe our threat model. Subse-
quently, we formalize the problem that we set out to solve
when we design SYMTCP.
Fig. 1. Threat Model
A. Threat Model
paths in a common size modern software can be huge, leading
to the notorious path explosion problem.
Concolic execution [12] is a practical testing technique
that enhances symbolic execution with concrete execution.
The basic idea is to bind a concrete value to each symbolic
expression, and so, it can switch modes between symbolic
execution and concrete execution at any time. When a branch
with symbolic predicate is encountered, the concolic execution
engine ﬁrst uses the concrete value to decide which path to go;
subsequently, it also tries to generate a new concrete value for
the opposite branch. When a particular part of the code or a
function may cause path explosion or if the constraint solver
is unable to or inefﬁcient in solving, it can switch to concrete
execution which prevents forking and constraint solving, and
switch back at a later time. However, this may cause a loss in
terms of both completeness and soundness as a trade-off [4].
Most of the state-of-the-art symbolic execution engines like
Angr [40] and S2E [17] support concolic execution.
Selective symbolic execution [17] further extends the
idea of concolic execution and makes it more ﬂexible and
practical for testing large and complex software (like an
operating system kernel). In particular, a selective symbolic
execution engine allows the testing of only a sub-system of a
program (e.g., the TCP implementation). This is achieved by
transitioning between the concrete mode (where most symbolic
variables already have concrete values) and the symbolic mode
as follows:
• Transition from concrete to symbolic: the engine symbolizes
the inputs of the scope (data coming into the scope), such
as function parameters, to offer the possibility of exploring
all execution paths within the scope at the cost of under-
constraining, i.e., losing additional constraints imposed over
the inputs from external components.
• Transition from symbolic to concrete: the engine concretizes
symbolic variables, which can cause over-constraining as we
are arbitrarily choosing one of the possible values to assign
to any symbolic variable and this can harm completeness.
S2E [17] is a representative system that combines selective
symbolic execution with whole-system emulation to test the
Linux kernel. Its performance of symbolic execution is con-
trolled by selectively running part of the code of interest
(e.g., speciﬁc functions) in symbolic mode while keeping most
other parts and the external system running in the concrete
mode. S2E provides different levels of execution consistencies
that allow trade-offs between performance, completeness, and
soundness of analyses.
In our solution, to address the complexity of real-world
TCP implementations, we employ the selective symbolic ex-
ecution feature in S2E to effectively explore the TCP imple-
mentation in the Linux kernel.
The threat model that we consider is depicted as in Fig-
ure 1. We assume that a DPI engine is located in between
the client and the server, and is capable of reading all the
packets exchanged between the client and the server. We only
focus on the TCP protocol in this work since it is arguably the
most popular transport layer protocol. By eluding DPI from
the TCP-layer, we can disrupt TCP packet reassembly of the
DPI, and therefore can allow upper-layer protocols to elude
DPI (e.g., HTTP, HTTPS).
We assume that the DPI engine has its own TCP implemen-
tation that can reassemble and cast the captured IP packets into
TCP data streams. It then performs checks on the reassembled
data streams for whatever is needed based on the function of
the middlebox (e.g., censorship, network intrusion detection,
etc.), and its behavior is deterministic. We also assume that
the inspections will lead to observable effects, e.g., blocking
or resetting of a connection, if an alarm is triggered; otherwise
we cannot tell whether an eluding attack is successful or not.
The goal of a host (e.g., client) is to elude inspection
of the DPI engine, by sending carefully crafted packets that
exploit discrepancies between the TCP implementation of a
DPI and that of the host on the other end (e.g., server),
prior to sending the sensitive content. For ease of discussion,
throughout the rest of the paper, we consider the client to be
the one attempting to elude the inspection unless otherwise
explicitly stated. We consider the DPI’s TCP implementation
to be a blackbox, and thus, the client can send only probe
packets. The responses (or lack thereof) to the probe packets
allows the client to infer the state of DPI’s TCP state machine.
We assume that the server uses a publicly available TCP stack
implementation (e.g., Linux), and thus, the client can perform
analysis as a whitebox. These assumptions also imply that the
server is not colluding with the client by using a specialized or
custom TCP stack as otherwise arbitrary covert channels can
be established [33].
B. Problem Deﬁnition
Conceptually, an evasion packet is a TCP packet that is
accepted by the server but dropped/ignored by the DPI engine.