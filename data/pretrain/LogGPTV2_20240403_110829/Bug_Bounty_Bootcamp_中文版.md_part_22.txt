The script is complete! Save it in your current directory with the
filename *recon.sh* . The *.sh* extension is the conventional extension
for shell scripts. Make sure your terminal's working directory is the
same as the one where you've stored your script by running the command
`      cd /     `{.bold} `      location     `{.variable .bold}
`      /     `{.bold} `      of     `{.variable .bold}
`      /     `{.bold} `      your     `{.variable .bold}
`      /     `{.bold} `      script     `{.variable .bold} . Execute the
script in the terminal with this command:
脚本完成了！请将其保存在当前目录中，文件名为recon.sh。 .sh 扩展名是
shell
脚本的传统扩展名。确保您终端的工作目录与存储脚本的目录相同，方法是运行命令
cd /location/of/your/script。执行此命令在终端中运行脚本：
    $ ./recon.sh
You might see a message like this:
"您可能会看到这样的消息：" (Note: This is the translated content in
Simplified Chinese)
    permission denied: ./recon.sh
[ ]{#c05.xhtml#Page_82 .pagebreak title="82"} This is because the
current user doesn't have permission to execute the script. For security
purposes, most files aren't executable by default. You can correct this
behavior by adding executing rights for everyone by running this command
in the terminal:
这是因为当前用户没有执行脚本的权限。出于安全考虑，大多数文件默认情况下都不可执行。您可以通过在终端中运行此命令为所有人添加执行权限来更正此行为：
    $ chmod +x recon.sh
The `      chmod     ` command edits the permissions for a file, and
`      +x     ` indicates that we want to add the permission to execute
for all users. If you'd like to grant executing rights for the owner of
the script only, use this command instead:
\"chmod命令用于编辑文件的权限，+x表示我们希望为所有用户添加执行权限。如果您只想授予脚本所有者执行权限，请改用此命令：\"
"chmod命令编辑文件权限，+x表示我们想要为所有用户添加执行权限。如果您只想授予脚本所有者执行权限，请使用此命令："
    $ chmod 700 recon.sh
Now run the script as we did before. Try passing in *scanme.nmap.org* as
the first argument. You should see the output of the Nmap and Dirsearch
printed out:
现在像之前一样运行脚本。尝试将scanme.nmap.org作为第一个参数传递。你应该会看到Nmap和Dirsearch的输出被打印出来：
    $ ./recon.sh scanme.nmap.org
    Starting Nmap 7.60 ( https://nmap.org )
    Nmap scan report for scanme.nmap.org (45.33.32.156)
    Host is up (0.062s latency).
    Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2f
    Not shown: 992 closed ports
    PORT      STATE    SERVICE
    22/tcp    open     ssh
    25/tcp    filtered smtp
    80/tcp    open     http
    135/tcp   filtered msrpc
    139/tcp   filtered netbios-ssn
    445/tcp   filtered microsoft-ds
    9929/tcp  open     nping-echo
    31337/tcp open     Elite
    Nmap done: 1 IP address (1 host up) scanned in 2.16 seconds
    Extensions: php | HTTP method: get | Threads: 10 | Wordlist size: 6023
    Error Log: /Users/vickieli/tools/dirsearch/logs/errors.log
    Target: scanme.nmap.org
    [11:14:30] Starting:
    [11:14:32] 403 -  295B  - /.htaccessOLD2
    [11:14:32] 403 -  294B  - /.htaccessOLD
    [11:14:33] 301 -  316B  - /.svn  ->  http://scanme.nmap.org/.svn/
    [11:14:33] 403 -  298B  - /.svn/all-wcprops
    [11:14:33] 403 -  294B  - /.svn/entries
    [11:14:33] 403 -  297B  - /.svn/prop-base/
    [11:14:33] 403 -  296B  - /.svn/pristine/
    [11:14:33] 403 -  315B  - /.svn/text-base/index.php.svn-base
    [11:14:33] 403 -  297B  - /.svn/text-base/
    [11:14:33] 403 -  293B  - /.svn/props/
    [11:14:33] 403 -  291B  - /.svn/tmp/
    [11:14:55] 301 -  318B  - /images  ->  http://scanme.nmap.org/images/ 
    [11:14:56] 200 -    7KB - /index
    [11:14:56] 200 -    7KB - /index.html
    [11:15:08] 403 -  296B  - /server-status/
    [11:15:08] 403 -  295B  - /server-status
    [11:15:08] 301 -  318B  - /shared  ->  http://scanme.nmap.org/shared/
    Task Completed
### Saving Tool Output to a File {#c05.xhtml#h2-501546c05-0011}
To analyze the recon results later, you may want to save your scripts'
output in a separate file. This is where input and output redirection
come into play. *Input redirection* is using the content of a file, or
the output of another program, as the input to your script. *Output
redirection* is redirecting the output of a program to another location,
such as to a file or another program. Here are some of the most useful
redirection operators:
为了以后分析重新构建的结果，您可能希望将脚本输出保存在单独的文件中。这就是输入和输出重定向发挥作用的地方。输入重定向是使用文件的内容或另一个程序的输出作为脚本的输入。输出重定向是将程序的输出重定向到另一个位置，如文件或另一个程序。以下是一些最有用的重定向运算符：
1.  [ `        PROGRAM       `{.variable} [ `         >        `
    ]{.LiteralBold} `        FILENAME       `{.variable} ]{.RunInHead}
    Writes the program's output into the file with that name. (It will
    clear any content from the file first. It will also create the file
    if the file does not already exist.)
2.  [ `        PROGRAM       `{.variable} [ `         >>        `
    ]{.LiteralBold} `        FILENAME       `{.variable} ]{.RunInHead}
    Appends the output of the program to the end of the file, without
    clearing the file's original content.
3.  [ `        PROGRAM       `{.variable} [ `          $1_recon/nmap 3
    echo "The results of nmap scan are stored in $1_recon/nmap."
    /PATH/TO/dirsearch.py -u $1 -e php 4 --simple-report=$1_recon/dirsearch
    echo "The results of dirsearch scan are stored in $1_recon/dirsearch."
The `      echo     ` command [ 1 ]{.CodeAnnotation
aria-label="annotation1"} prints a message to the terminal. Next,
`      mkdir     ` creates a directory with the name *DOMAIN_recon* [ 2
]{.CodeAnnotation aria-label="annotation2"} . We store the results of
`      nmap     ` into a file named *nmap* in the newly created
directory [ 3 ]{.CodeAnnotation aria-label="annotation3"} . Dirsearch's
`      simple-report     ` flag [ 4 ]{.CodeAnnotation
aria-label="annotation4"} generates a report in the designated location.
We store the results of Dirsearch to a file named *dirsearch* in the new
directory.
echo 命令1 将消息打印到终端。接下来，mkdir 创建名为 DOMAIN_recon 2
的目录。我们将 nmap 的结果存储到新创建的目录中的名为 nmap 的文件中
3。Dirsearch 的 simple-report 标志 4 在指定位置生成报告。我们将
Dirsearch 的结果存储到新目录中名为 dirsearch 的文件中。
You can make your script more manageable by introducing variables to
reference files, names, and values. Variables in bash can be assigned
using the following syntax: `      VARIABLE_NAME     `{.variable}
`      =     ` `      VARIABLE_VALUE     `{.variable} . Note that there
should be no spaces around the equal sign. The syntax for referencing
variables is `      $     ` `      VARIABLE_NAME     `{.variable} .
Let's implement these into the script:
你可以通过引入变量来使你的脚本更易于管理，以便引用文件、名称和值。Bash中的变量可以使用以下语法进行分配：VARIABLE_NAME=VARIABLE_VALUE。请注意，等号周围不应该有空格。引用变量的语法是\$VARIABLE_NAME。让我们将这些引入脚本中：
    #!/bin/bash
    PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
    DOMAIN=$1
    DIRECTORY=${DOMAIN}_recon 1
    echo "Creating directory $DIRECTORY."
    mkdir $DIRECTORY
    nmap $DOMAIN > $DIRECTORY/nmap
    echo "The results of nmap scan are stored in $DIRECTORY/nmap."
    $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php –simple-report=$DIRECTORY/dirsearch 2
    echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
We use `      ${DOMAIN}_recon     ` instead of
`      $DOMAIN_recon     ` [ 1 ]{.CodeAnnotation
aria-label="annotation1"} because, otherwise, bash would recognize the
entirety of `      DOMAIN_recon     ` as the variable name. The curly
brackets tell bash that `      DOMAIN     ` is the variable name, and
`      _recon     ` is the plaintext we're appending to it. Notice that
we also stored the path to Dirsearch in a variable to make it easy to
change in the future [ 2 ]{.CodeAnnotation aria-label="annotation2"} .
我们使用\${DOMAIN}\_recon代替\$DOMAIN_recon
1，否则，bash会将DOMAIN_recon的全部识别为变量名。花括号告诉bashDOMAIN是变量名，\_recon是我们要添加的明文。请注意，我们还将Dirsearch的路径存储在变量中，以便将来轻松更改。
Using redirection, you can now write shell scripts that run many tools
in a single command and save their outputs in separate files.
使用重定向，你现在可以编写Shell脚本，在一个命令中执行多个工具，并将它们的输出保存在不同的文件中。
### Adding the Date of the Scan to the Output {#c05.xhtml#h2-501546c05-0012}
Let's say you want to add the current date to your script's output, or
select which scans to run, instead of always running both Nmap and
Dirsearch. If you want to write tools with more functionalities like
this, you have to understand some advanced shell scripting concepts.
假设你想要将当前日期添加到你的脚本输出中，或者选择运行哪个扫描工具，而不是总是运行Nmap和Dirsearch。如果你想要编写更多功能的工具，就必须理解一些高级的shell脚本概念。
For example, a useful one is *command substitution* , or operating on
the output of a command. Using `      $()     ` tells Unix to execute
the command surrounded by the parentheses and assign its output to the
value of a variable. Let's practice using this syntax:
例如，一个有用的语法是命令替换，或者操作命令的输出。使用\$()告诉Unix执行括号内的命令并将其输出赋值给一个变量的值。让我们练习使用这种语法：
    #!/bin/bash
    PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
    TODAY=$(date) 1
    echo "This scan was created on $TODAY" 2
    DOMAIN=$1
    DIRECTORY=${DOMAIN}_recon
    echo "Creating directory $DIRECTORY."
    mkdir $DIRECTORY
    nmap $DOMAIN > $DIRECTORY/nmap
    echo "The results of nmap scan are stored in $DIRECTORY/nmap."
    $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
    echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
At [ 1 ]{.CodeAnnotation aria-label="annotation1"} , we assign the
output of the `      date     ` command to the variable
`      TODAY     ` . The `      date     ` command displays the current
date and time. This lets us output a message indicating the day on which
we performed the scan [ 2 ]{.CodeAnnotation aria-label="annotation2"} .
在第1步，我们为变量TODAY分配date命令的输出。date命令显示当前日期和时间。这样，我们可以输出一个消息，指示执行扫描的日期。
### Adding Options to Choose the Tools to Run {#c05.xhtml#h2-501546c05-0013}
Now, to selectively run only certain tools, you need to use
conditionals. In bash, the syntax of an `      if     ` statement is as
follows. Note that the conditional statement ends with the
`      fi     ` keyword, which is `      if     ` backward:
现在，要选择性地运行某些工具，您需要使用条件语句。在Bash中，if语句的语法如下所示。请注意，条件语句以if关键字结尾，该关键字是if的反向形式：fi。
    if [ condition 1 ]
    then
      # Do if condition 1 is satisfied
    elif [ condition 2 ]
    then
      # Do if condition 2 is satisfied, and condition 1 is not satisfied
    else
      # Do something else if neither condition is satisfied
    fi
Let's say that we want users to be able to specify the scan
`      MODE     ` , as such:
让我们假设我们希望用户能够指定扫描模式：
    $ ./recon.sh scanmme.nmap.org MODE
We can implement this functionality like this:
我们可以这样实现此功能：
    #!/bin/bash
    PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
    TODAY=$(date)
    echo "This scan was created on $TODAY"
    DIRECTORY=${DOMAIN}_recon
    echo "Creating directory $DIRECTORY."
    mkdir $DIRECTORY 
    if [ $2 == "nmap-only" ] 1
    then
      nmap $DOMAIN > $DIRECTORY/nmap 2
      echo "The results of nmap scan are stored in $DIRECTORY/nmap."
    elif [ $2 == "dirsearch-only" ] 3
    then  