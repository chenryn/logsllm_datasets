# Routing in the Dark: Scalable Searches in Dark P2P Networks
**Authors:** Ian Clarke and Oskar Sandberg  
**Affiliation:** The Freenet Project  
**Year:** 2005

## Introduction
- We have long been interested in decentralized "Peer to Peer" (P2P) networks, particularly Freenet.
- However, decentralization alone is insufficient when individual users come under attack.
- Future networks may need to limit connections to trusted friends.
- The key question is: Can such networks be useful?

## Overview of P2P Networks
- In P2P networks, information is distributed across many interconnected computers.
- Users seek to find and access this information.
- Some P2P networks are centralized (e.g., Napster), some are semi-centralized (e.g., Kazaa), and others are fully distributed (e.g., Freenet).

## The Small World Phenomenon
- "Small world" networks are characterized by short paths between any two peers.
- This type of network is common in human social networks, as demonstrated by the Milgram experiment.
- While short paths exist, they may not be easy to discover.

## Navigable Small World Networks
- In navigable small world networks, there is a concept of similarity or "closeness" between peers.
- Similar peers are more likely to be connected than dissimilar ones.
- To route from one peer to another, you can simply move to the closest peer at each step.
- This routing method is known as "Greedy Routing."
- Freenet and Distributed Hash Tables (DHTs) use this principle to find data in a scalable, decentralized manner.

## Light P2P Networks
- Examples include Gnutella, Freenet, and DHTs.
- **Advantage:** Globally scalable with the right routing algorithm.
- **Disadvantage:** Vulnerable to "harvesting," where unauthorized parties can easily discover if you are part of the network.

## Dark or "Friend-to-Friend" P2P Networks
- Peers only communicate directly with "trusted" peers.
- Example: Waste.
- **Advantage:** Only your trusted friends know you are part of the network.

## Application
- How can we apply small world theory to routing in a Dark P2P network?
- A Darknet is essentially a social network of trusted relationships.
- If people can route in a social network, it should be possible for computers to do the same.
- Jon Kleinberg's 2000 work explains how small world networks can be navigable.

### Kleinberg’s Result
- Efficient routing depends on the proportion of connections that have different lengths relative to the "position" of the nodes.
- For nodes positioned in a ring, the proportion of connections of a certain length should be inversely proportional to the length.
- In this setup, a simple greedy routing algorithm performs in \(O(\log^2 n)\) steps.

### Kleinberg’s Result, Continued
- In a social network, how do we determine if one person is closer to the destination than another?
- In real life, people use various factors like location, job, and interests. However, computers cannot practically use these factors.
- Instead, we let the network itself provide the necessary information.

### Application, Continued
- Kleinberg’s model suggests that there should be few long connections and many short ones.
- We can assign numerical identities to nodes, placing them in a circle, and ensure that the distribution of connections follows the model.
- Greedy routing can then be performed based on these numerical identities.

## The Method
- When nodes join the network, they randomly choose a position on the circle.
- They then switch positions with other nodes to minimize the product of the edge distances.

### The Method, Continued
- Switching positions is essential.
- As the network grows and shrinks, maintaining permanent positions will be challenging.

## The Algorithm
- Two nodes are randomly chosen and attempt to switch positions.
- They calculate \(\ell_b\) as the product of the lengths of their current connections and \(\ell_a\) as the product of the lengths of their connections after switching.
- If \(\ell_b > \ell_a\), they switch. Otherwise, they switch with probability \(\frac{\ell_b}{\ell_a}\).

### The Algorithm, Continued
- Let \(d(z)\) be the degree (number of connections) of node \(z\), and let \(e_i(z)\) and \(e'_i(z)\) be the distances of \(z\)'s \(i\)-th connection before and after the switch.
- For nodes \(x\) and \(y\) attempting to switch, calculate:
  \[
  p = \frac{\ell_a}{\ell_b} = \frac{\prod_{i=1}^{d(x)} e_i(x) \cdot \prod_{i=1}^{d(y)} e_i(y)}{\prod_{i=1}^{d(x)} e'_i(x) \cdot \prod_{i=1}^{d(y)} e'_i(y)}
  \]
- Nodes \(x\) and \(y\) will complete the switch with probability \(\min(1, p)\). Otherwise, the network remains unchanged.

### The Algorithm, Continued
- This is an application of the Metropolis-Hastings algorithm.
- It tends to minimize the product of the connection distances.
- Because the probability of making a switch is never zero, the network avoids getting stuck in a local minimum.

### Node Selection for Switching
- Any method can theoretically work, but some are more effective than others.
- Switching only with neighbors does not work well in practice.
- Our current method involves a short random walk starting at one node and terminating at the other.

## Simulations
- [Further details on simulations and results can be added here.]

This revised version aims to make the text more coherent and professional, while maintaining the original content and structure.