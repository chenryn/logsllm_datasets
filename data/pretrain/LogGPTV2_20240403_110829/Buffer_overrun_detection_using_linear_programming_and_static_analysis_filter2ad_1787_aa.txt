title:Buffer overrun detection using linear programming and static analysis
author:Vinod Ganapathy and
Somesh Jha and
David Chandler and
David Melski and
David Vitek
Buffer Overrun Detection using Linear Programming and
Static Analysis ∗
Vinod Ganapathy, Somesh Jha
University of Wisconsin-Madison
David Chandler, David Melski, David Vitek
Grammatech Inc., Ithaca, NY 14850
[vg,jha]@cs.wisc.edu
[chandler,melski,dvitek]@grammatech.com
ABSTRACT
This paper addresses the issue of identifying buffer overrun vul-
nerabilities by statically analyzing C source code. We demonstrate
a light-weight analysis based on modeling C string manipulations
as a linear program. We also present fast, scalable solvers based
on linear programming, and demonstrate techniques to make the
program analysis context sensitive. Based on these techniques, we
built a prototype and used it to identify several vulnerabilities in
popular security critical applications.
Categories and Subject Descriptors
D.3.3 [Language Constructs and Features]: Constraints; G.1.6
[Optimization]: Linear Programming; D.2.5 [Software Engineer-
ing]: Testing and Debugging
General Terms
Algorithms, Languages, Reliability, Security
Keywords
Buffer overruns, static analysis, linear programming
1.
INTRODUCTION
Buffer overruns are one of the most exploited class of security
vulnerabilities. In a study by the SANS institute [3], buffer over-
runs in RPC services ranked as the top vulnerability to UNIX sys-
tems. A simple mistake on the part of a careless programmer can
cause a serious security problem with consequences as serious as a
remote user acquiring root privileges on the vulnerable machine.
To add to the problem, these vulnerabilities are easy to exploit, and
“cookbooks” [4] are available to construct such exploits. As ob-
served by several researchers [22, 30], C is highly vulnerable be-
cause there are several library functions that manipulate buffers in
an unsafe way.
Several approaches have been proposed to mitigate the problem:
these range from dynamic techniques [8, 10, 11, 13, 18, 24] that
prevent attacks based on buffer overruns, to static techniques [17,
∗
This work was supported in part by NSF grant CCR-9619219 and
ONR contracts N00014-01-1-0796 and N00014-01-1-0708.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
22, 26, 29, 30] that examine source code to eliminate these bugs
before the code is deployed. Unlike static techniques, dynamic
techniques do not eliminate bugs, and typically have the undesir-
able effect of causing the application to crash when an attack is
discovered.
In this paper, we describe the design and implementation of a
tool that statically analyzes C source code to detect buffer overrun
vulnerabilities. In particular, this paper demonstrates:
• The use of static analysis to model C string manipulations as a
linear program.
• The design and implementation of fast, scalable solvers based
on novel use of techniques from the linear programming literature.
The solution to the linear program determines buffer bounds.
• Techniques to make the program analysis context sensitive.
• The efﬁcacy of other program analysis techniques, such as static
slicing to understand and eliminate bugs from source code.
One of our principle design goals was to make the tool scale to
large real world applications. We used the tool to audit several pop-
ular and commercially used packages. The tool identiﬁed 14 previ-
ously unknown buffer overruns in wu-ftpd-2.6.2 (Section 6.1.1)
in addition to several known vulnerabilities in other applications.
The rest of the paper is laid out as follows: We discuss related
research in Section 2, followed by an overall description of our tool
in Section 3. Section 4 describes constraint resolution techniques
used by our tool, and Section 5 describes techniques to make the
program analysis context-sensitive. Section 6 contains experimen-
tal results, and Section 7 concludes.
2. RELATED WORK
Several techniques have been proposed to mitigate the problem
of buffer overruns. Dynamic techniques such as Stackguard [13],
RAD [10] help to detect and prevent stack smashing attacks by pro-
tecting the return address on the stack. ProPolice [18] generalizes
these techniques by protecting more entities such as frame pointers,
local variables and function arguments. Pointguard [14] protects all
pointer accesses by encrypting the pointers when they are stored in
memory, and decrypting them when they are loaded into registers.
Safe languages like Java introduce runtime array bounds checks to
preserve type-safety. However, redundant runtime checks can im-
pose performance overhead, and tools such as ABCD [8] aim to
eliminate redundant checks. CCured [11, 24] is a tool that uses
static analysis to judiciously insert runtime checks for correctness
of pointer manipulations to create a type-safe version of a C pro-
gram. These techniques prevent attacks based on unsafe memory
accesses, but fail to eliminate the bugs from source code.
This paper focuses on static analysis techniques that examine
source code for the presence of buffer overruns, and thus help the
developer in eliminating the overrun before source code is deployed.
345Several static analysis tools have been proposed. These tools can
be broadly classiﬁed as (a) Annotation driven tools (b) Tools that
use symbolic analysis and (c) Tools that extract a model from the
source code, and use it to detect the presence of bugs.
CSSV [17] and Splint [22] are annotation driven tools. In these
tools, user-supplied annotations, such as pre- and post-conditions
of a function, are used to aid static analysis. CSSV aims to ﬁnd
all buffer overﬂows with just a few false alarms. The basic idea
is to convert the C program into an integer program, with correct-
ness assertions included, and use a conservative static analysis al-
gorithm to detect faulty integer manipulations, which directly trans-
late to bugs in the C source code. The analysis is performed on
a per-procedure basis, and annotations (called contracts) are used
to make the analysis inter-procedural. The number of false alarms
generated by the tool depends on the accuracy of the contracts. The
analysis used by CSSV to check the correctness of integer manipu-
lations was heavyweight, and may scale poorly to large programs.
For instance, CSSV took > 200 seconds to analyze a string ma-
nipulation program with a total of about 400 lines of code. Splint
on the other hand, sacriﬁces soundness and completeness, and uses
a light-weight static analysis to detect bugs in source code. Splint
uses a ﬂow-sensitive intra-procedural program analysis, and user
supplied pre- and post-conditions are used to make the analysis
inter-procedural.
ARCHER [33] is a tool that functions by symbolically execut-
ing the code, while maintaining information about variables in a
database as execution proceeds. The current state of the program is
given by the values in the database. The execution of program state-
ments potentially causes a change in the state of the program. At
statements that access buffers, ARCHER checks, using the database,
whether the access is within the bounds of the array, and ﬂags an
error if not. Rugina and Rinard [26] describe a tool geared speciﬁ-
cally to detect out-of-bounds errors and race conditions on small di-
vide and conquer programs where they determine symbolic bounds
on array indices and use this information to detect illegal accesses.
Larson and Austin propose a testing tool [23] to detect input re-
lated faults. This tool uses actual program execution using a test
input, but enhances bug coverage by maintaining more information
about the possible values of variables along the path followed by
the test input. These techniques have the advantage that they can
be used to detect more than just array out of bounds accesses, as is
demonstrated in [23]. Moreover, the analysis is path sensitive since
an actual program path is followed, and hence false alarm rates are
low. However, the disadvantage is that the coverage of these tools
is limited to the set of program paths examined.
BOON [29, 30], like our tool, extracts a model from the source
code – namely, these tools model strings as abstract data types and
transform the buffer overrun detection problem into a range anal-
ysis problem. However, BOON does not employ precise pointer
analysis algorithms. Moreover, the analysis was ﬂow- and context-
insensitive. Our tool builds on the seminal ideas introduced in
BOON by using more precise pointer analysis algorithms, and en-
hances the program analysis to make it context-sensitive. Addition-
ally, our tool employs algorithms based on linear programming for
constraint resolution as opposed to the custom built range solver
employed by BOON. Our tool also equips the user with several
other static analysis algorithms such as static slicing, which enable
the user to understand the reason behind the bug.
3. OVERALL TOOL ARCHITECTURE
The tool has ﬁve components (Figure 1) that are described in
the remainder of this section. Section 3.1 describes the code un-
derstanding tool CodeSurfer. CodeSurfer is used by the constraint
.
C Source
PDGs
SDG
Linear
Constraints
Linear
Constraints
Codesurfer
Constraint
Generator
PDGs
SDG
Taint
Analyzer
Ranges
Constraint
Solver
Ranges
Detector
Front−End
Choice of two
possible solvers
Warnings
Figure 1: Overall Architecture of the Buffer Overrun Tool
(1) main(int argc, char* argv[]){
(2)
char header[2048], buf[1024],
*cc1, *cc2, *ptr;
ptr = fgets (buf, 1024, fp);
cc2 = copy_buffer(buf);
}
int counter;
FILE *fp;
...
ptr = fgets(header, 2048, fp);
cc1 = copy_buffer(header);
for (counter = 0; counter < 10; counter++){
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12) }
(13)
(14) char *copy_buffer(char *buffer){
(15)
(16)
(17)
(18)
(19) }
char *copy;
copy = (char *) malloc(strlen(buffer));
strcpy(copy, buffer);
return copy;
Figure 2: Running Example
generator, and the detector front-end which is a GUI to help the
user examine potential overruns. Section 3.2 describes constraint
generation. Section 3.3 presents taint analysis, which identiﬁes and
removes unconstrained constraint variables. Section 3.4 overviews
constraint resolution, and Section 3.5 explains the use of the so-
lution to the constraint system to detect potential buffer overruns.
The program in Figure 2 will serve as a running example.
3.1 CodeSurfer
The constraint generator and the detector front-end are both de-
veloped as plug-ins to CodeSurfer. CodeSurfer is a code under-
standing tool that was originally designed to compute precise inter-
procedural slices [20, 21]. CodeSurfer builds a whole program rep-
resentation that includes a system dependence graph (that is com-
posed of program dependence graphs for each procedure), an inter-
procedural control-ﬂow graph, abstract syntax trees (ASTs) for pro-
gram expressions, side-effect information, and points-to informa-
tion. CodeSurfer presents the user with a GUI for exploring its
internal program representations. The queries that CodeSurfer sup-
ports include forward and backward slicing from a program point,
precise inter-procedural chopping between two program points, ﬁnd-
ing data and control dependence predecessors and successors from
a program point, and examining the points-to set of a program vari-
able. CodeSurfer presents the user with a listing of their source
code that is “hot”, i.e., the user can click on a program point in
their code and ask any of the queries listed above.
CodeSurfer has two primary uses in our tool: (1) the constraint
generator is a CodeSurfer plug-in that makes use of CodeSurfer’s
ASTs and pointer analysis (based on Andersen’s analysis [6]). (2)
Constraint
header!used!max ≥ 2048
header!used!min ≤ 1
buffer!used!max ≥ buf!used!max
buffer!used!min ≤ buf!used!min
buffer!alloc!max ≥ buf!alloc!max
buffer!alloc!min ≤ buf!alloc!min
copy buffer$return!alloc!max ≥ copy!alloc!max
copy buffer$return!alloc!min ≤ copy!alloc!min