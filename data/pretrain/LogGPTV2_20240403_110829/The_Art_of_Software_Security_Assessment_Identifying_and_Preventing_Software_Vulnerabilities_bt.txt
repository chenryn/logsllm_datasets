Memory management is a core element of every program, whether it is performed 
explicitly by the developer or implicitly by the programming language and runtime. To 
complete your understanding of programming building blocks you need to examine 
the common issues in managing memory, and the security-relevant impact of 
mismanagement. The following sections explore these issues and present you with a 
few tools to help make you more productive in identifying memory management 
vulnerabilities. 
ACC Logs 
Errors in memory management are almost always the result of length miscalculations; 
so one of the first steps in auditing memory management is to develop a good process 
for identifying length miscalculations. Some miscalculations stand out, but others are 
quite easy to miss. So there's a tool help you identify even the most subtle length 
miscalculations, called allocation-check-copy (ACC) logs. An ACC log is simply 
intended to record any variations in allocation sizes, length checks, and data element 
copies that occur on a memory block. An ACC log is divided into three columns for 
each memory allocation. The first column contains a formula for describing the size of 
memory that's allocated, which can be a formula or a static number if the buffer is 
statically sized. The next column contains any length checks that data elements are 
subjected to before being copied into the allocated buffer. The third column is used to 
list which data elements are copied into the buffer and the way in which they are 
copied. Separate copies are listed one after the other. Finally, you can have an 
optional fourth column, where you note any interesting discrepancies you determined 
from the information in the other three columns. Look at a sample function in Listing 
7-33, and then examine its corresponding ACC log in Table 7-5. 
Listing 7-33. Length Miscalculation Example for Constructing an ACC Log 
int read_packet(int sockfd) 
{ 
    unsigned int challenge_length, ciphers_count; 
    char challenge[64]; 
    struct cipher *cipherlist; 
    int i; 
    challenge_length = read_integer(sockfd); 
    if(challenge_length > 64) 
        return -1; 
    if(read_bytes(sockfd, challenge, challenge_length)  
0xFFFFFFFF) / 
sizeof(struct cipher) 
Listing 7-33 shows some code that reads a packet from a fictitious protocol and 
allocates and reads different elements from the packet. A sample ACC log is shown is 
Table 7-5. 
In the ACC log, you record the specifics of how a buffer is allocated, what length 
checks are performed, and how data is copied into the buffer. This compact format 
quickly summarizes how dynamic memory allocations and copies are done and 
whether they are safe. Notice that the entry for the cipherlist variable mentions that 
ciphers are copied one at a time. This detail is important when you're determining 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
382 
whether an operation is safe. If this function did a single read of ciphers_count * 
sizeof(struct cipher), the allocation and copy lengths would be identical, so the code 
would be safe regardless of whether an integer overflow occurred. Checks sometimes 
happen before an allocation; if so, you might want to rearrange the first two columns 
to make the record easier to understand. 
ACC logs are intended to help you identify length checks that could cause problems; 
however, they aren't a complete assessment of the memory safety of an operation. 
To understand this point, look at the following example: 
    ciphers_count = read_integer(sockfd); 
    if(ciphers_count >= ((unsigned int)(~0)) 
                         /sizeof(struct cipher)) 
        return -1; 
    cipherlist = (struct cipher *) 
        allocate(ciphers_count * sizeof(struct cipher)); 
    if(cipherlist == NULL) 
        return -1; 
This code has a length check that you would add to your ACC record, but does this 
mean you can conclude this memory copy is secure? No. This function doesn't use a 
system allocator to allocate cipherlist; instead, it uses a custom allocate() function. 
To determine whether this code is secure, you need to consult your allocator 
scorecard (a tool introduced later in this section) as well. Only then could you 
conclude whether this allocation is safe. 
The following sections present several examples of buffer length miscalculations you 
can use to test out your ACC logging skills. These examples help expose you to a 
variety of situations in which length miscalculations occur, so you're comfortable as 
you encounter similar situations in your own code assessments. 
Unanticipated Conditions 
Length miscalculations can arise when unanticipated conditions occur during data 
processing. In the following example, the code is printing some user-supplied data 
out in hexadecimal: 
u_char *src, *dst, buf[1024]; 
for(src = user_data, dst = buf; *src; src++){ 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
383 
    snprintf(dst, sizeof(buf) - (dst  buf), "%2.2x", src); 
    dst += 2; 
} 
This developer makes the assumption, however, that snprintf() successfully writes 
the two bytes into the buffer because the loop always increments dst by 2 (as shown 
in the bolded line). If no bytes or only one byte were left in the buffer, dst would be 
incremented too far, and subsequent calls to snprintf() would be given a negative 
size argument. This size would be converted to a size_t and, therefore, interpreted as 
a large positive value, which would allow bytes to be written past the end of the 
destination buffer. 
Data Assumptions 
Quite often when auditing code dealing with binary data, you see that programmers 
tend to be more trusting of the content, particularly in applications involving 
proprietary file formats and protocols. This is because they haven't considered the 
consequences of certain actions or they assume that only their applications will 
generate the client data or files. Often developers assume that no one would bother 
to reverse-engineer the data structures necessary to communicate with their 
software. History has told a very different story, however. People can, and frequently 
do, reverse-engineer closed-source products for the purpose of discovering security 
problems. If anything, researchers are even more willing and prepared to scrutinize 
complex and proprietary protocols via manual analysis, blackbox testing, and 
automated fuzzing. 
Some of the simplest examples of data assumption errors are those in which 
developers make assumptions about a data element's largest possible size, even 
when a length is specified before the variable-length data field! Listing 7-34 shows an 
example from the NSS library used in Netscape Enterprise (and Netscape-derived 
Web servers) for handling SSL traffic. 
Listing 7-34. Buffer Overflow in NSS Library's ssl2_HandleClientHelloMessage 
  csLen         = (data[3] gs.recordLen != SSL_HL_CLIENT_HELLO_HBYTES 
                   + csLen + sdLen + challengeLen) { 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
384 
    SSL_DBG(( 
      "%d: SSL[%d]: bad client hello message, len=%d should=%d", 
      SSL_GETPID(), ss->fd, ss->gs.recordLen, 
      SSL_HL_CLIENT_HELLO_HBYTES+csLen+sdLen+challengeLen)); 
    goto bad_client; 
  } 
  ... 
  /* Squirrel away the challenge for later */ 
  PORT_Memcpy(ss->sec.ci.clientChallenge, challenge, 
  challengeLen); 
In Listing 7-34, the server takes a length field of challenge data supplied by the client, 
and then copies that much data from the packet into the ss->sec.ci.ClientChallenge 
buffer, which is statically sized to 32 bytes. The code simply neglects to check 
whether the supplied length is smaller than the destination buffer. This simple error is 
fairly commoneven more so in closed-source applications. 
Order of Actions 
Actions that aren't performed in the correct order can also result in length 
miscalculation. Listing 7-35 shows a subtle example of how this problem could occur. 
Listing 7-35. Out-of-Order Statements 
int log(int level, char *fmt, ...) 
{ 
    char buf[1024], *ptr = buf, *level_string; 
    size_t maxsize = sizeof(buf) - 1; 
    va_list ap; 
    ... 
    switch(level){ 
        case ERROR: 
            level_string = "error"; 
            break; 
        case WARNING: 
            level_string = "warning"; 
            break; 
        case FATAL: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
385 
            level_string = "fatal"; 
            break; 
        default: 
            level_string = ""; 
            break; 
    } 
    sprintf(ptr, "[%s]: ", level_string); 
    maxsize -= strlen(ptr); 
    ptr += strlen(ptr); 
    sprintf(ptr, "%s: ", get_time_string()); 
    ptr += strlen(ptr); 
    maxsize -= strlen(ptr); 
    va_start(ap, fmt); 
    vsnprintf(ptr, maxsize, fmt, ap); 
    va_end(ap); 
    ... 
Listing 7-35 contains an error where it writes the time string, returned from 
get_time_string(), into the buffer. The ptr variable is incremented to the end of the 
time string, and then the string length of ptr is subtracted from maxsize. These two 
operations happen in the wrong order. Because ptr has already been incremented, 
maxsize is decremented by zero. Therefore, maxsize fails to account for the time string, 
and a buffer overflow could occur when vsnprintf() is called with the incorrect length. 
Multiple Length Calculations on the Same Input 
A common situation that leads to length miscalculations in applications is data being 
processed more than once at different places in the programtypically with an initial 
pass to determine the length and then a subsequent pass to perform the data copy. 
In this situation, the auditor must determine whether any differences exist between 
the length calculation code fragment and the data copy code fragment. The following 
code from Netscape Enterprise/Mozilla's NSS library shows code responsible for 
processing UCS2 data strings. The function iterates through the string and calculates 
the amount of space needed for output, and if the destination buffer is large enough, 
the function stores it. Listing 7-36 shows the loop for this calculation. 
Listing 7-36. Netscape NSS Library UCS2 Length Miscalculation 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
386 
R_IMPLEMENT(PRBool) 
sec_port_ucs2_utf8_conversion_function 
( 
 PRBool toUnicode, 
 unsigned char *inBuf, 
 unsigned int inBufLen, 
 unsigned char *outBuf, 
 unsigned int maxOutBufLen, 
 unsigned int *outBufLen 
) 
{ 
 PORT_Assert((unsigned int *)NULL != outBufLen); 
 if( toUnicode ) { 
   .. 
 } else { 
   unsigned int i, len = 0; 
   PORT_Assert((inBufLen % 2) == 0); 
   if ((inBufLen % 2) != 0) { 
     *outBufLen = 0; 
     return PR_FALSE; 
   } 
   for( i = 0; i  2) ) { 
         i += 2; 
         len += 4; 
       } else { 
         return PR_FALSE; 
       } 
     } 
     else len += 3; 
   } 
Note that there's a small variance when the data copy actually occurs later in the 
same function, as shown in the following code: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
387 
    for( i = 0; i  0xxxxxx */ 
        /* 00000000 0abcdefg -> 0abcdefg */ 
        outBuf[len] = inBuf[i+H_1] & 0x7F; 
        len += 1; 
      } else if( inBuf[i+H_0]  110xxxxx 10xxxxxx */ 
        /* 00000abc defghijk -> 110abcde 10fghijk */ 
        outBuf[len+0] = 0xC0 | ((inBuf[i+H_0] & 0x07) > 6); 
        outBuf[len+1] = 0x80 | ((inBuf[i+H_1] & 0x3F) >> 0); 
        len += 2; 
        ... 
Do you see it? When the length calculation is performed, only one byte of output is 
expected when a NUL byte is encountered in the character stream because the H_0 
offset into inBuf is used twice in the length calculation. You can see that the developer 
intended to test the following byte to see whether the high-bit is set but uses H_0 
instead of H_1. The same mistake isn't made when the actual copy occurs. During the 
copy operation, you can clearly see that if the following byte has the highest bit set, 
two bytes are written to the output buffer because a second check is in the bolded if 
clause. Therefore, by supplying data containing the byte sequence 0x00, 0x80, you 
can cause more data to be written to the output buffer than was originally anticipated. 
As it turns out, the vulnerability can't be exploited in Netscape because the output 
buffer is rather large, and not enough input data can be supplied to overwrite 
arbitrary memory. Even though the error isn't exploitable, the function still performs 
a length calculation incorrectly, so it's worth examining. 
Allocation Functions 
Problems can occur when allocation functions don't act as the programmer expects. 
Why would they not act as expected? You supply a size, and the function returns a 
memory block of that size. It's simple, right? However, code doesn't always behave 
exactly as expected; when dealing with memory allocations you need to be aware of 
the unusual cases. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
388 
Larger applications often use their own internal memory allocation instead of calling 
the OS's allocation routines directly. These application-specific allocation routines can 
range from doing nothing except calling the OS routines (simple wrappers) to 
complex allocation subsystems that optimize the memory management for the 
application's particular needs. 
You can generally assume that system libraries for memory allocation are used 
extensively and are presumably quite sound; however, the same can't be said for 
application-specific allocators because they run the gamut in terms of quality. 
Therefore, code reviewers must watch for erroneous handling of requests instead of 
assuming these custom routines are sound. You should audit them as you would any 