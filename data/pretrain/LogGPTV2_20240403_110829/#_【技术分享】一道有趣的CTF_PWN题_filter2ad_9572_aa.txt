# 【技术分享】一道有趣的CTF PWN题
|
##### 译文声明
本文是翻译文章，文章来源：pastebinthehacker
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**翻译：**[ **hac425**](http://bobao.360.cn/member/contribute?uid=2553709124)
**稿费：200RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿**
这是CSAW CTF 2016的一道pwn300的题。这道题的利用思路不错,分享下。
题目源码以及分析的ida数据文件下载链接链接: 密码: jda9
**本地运行题目**
    socat TCP4-LISTEN:10001,fork EXEC:./hungman
运行这条命令可以让 程序的标准输入输出都重定向到 10001端口,所以我们可以nc连过去
**分析**
拿到一道题首先看看开启了哪些安全措施
通过运行这个程序我们可以很容易发现这是一个hangman游戏的实现。
经过初步运行程序大致了解程序的运行流程后就可以使用ida进行逆向分析了。我在逆向分析时遇到了一个大坑.由于太信任ida的f5插件,导致浪费了很多时间.对位于0x400F2D的函数
f5看看
这里我对一些变量改了下名,有没有觉得这里有些比较奇怪的语句.比如:
    *((_QWORD *)name + 1) = input;
    *((_DWORD *)name + 1) = len;
    memcpy(*((void **)name + 1), &s, len);
乍一看还以为这里有溢出呢, 实际上这里是ida的f5
插件出了些问题.导致反编译的时候出现一些奇怪的语句.所以这里只能去看汇编代码了.搞pwn关键是内存的布局,使用的情况.所以我们在看汇编代码重点要关注的是内存的分配与使用情况,
这个程序所用的结构体的各个数据区的分配,使用大体在下面.做了些注释
GetName 函数
    .text:0000000000400FC3                 mov     eax, [rbp+input_len]
    .text:0000000000400FC9                 cdqe
    .text:0000000000400FCB                 mov     rdi, rax        ; size
    .text:0000000000400FCE                 call    _malloc   ;分配空间存放刚刚输入的用户名
    .text:0000000000400FD3                 mov     [rbp+input], rax
    .text:0000000000400FDA                 mov     edi, 80h        ; size
    .text:0000000000400FDF                 call    _malloc   ;分配空间作为一个obj对象,存放玩家的信息
    .text:0000000000400FE4                 mov     [rbp+obj], rax
    .text:0000000000400FEB                 mov     rax, [rbp+obj]
    .text:0000000000400FF2                 mov     edx, 80h        ; n
    .text:0000000000400FF7                 mov     esi, 0          ; c
    .text:0000000000400FFC                 mov     rdi, rax        ; s
    .text:0000000000400FFF                 call    _memset
    .text:0000000000401004                 mov     rax, [rbp+obj]
    .text:000000000040100B                 mov     rdx, [rbp+input]
    .text:0000000000401012                 mov     [rax+8], rdx    ;将刚刚分配的一个缓冲器的指针存放到obj偏移8处
    .text:0000000000401016                 mov     rax, [rbp+obj]
    .text:000000000040101D                 mov     edx, [rbp+input_len]
    .text:0000000000401023                 mov     [rax+4], edx     ;把用户名的长度存放到 obj偏移4处
    .text:0000000000401026                 mov     eax, [rbp+input_len]
    .text:000000000040102C                 movsxd  rdx, eax        ; n
    .text:000000000040102F                 mov     rax, [rbp+obj]
    .text:0000000000401036                 mov     rax, [rax+8]
    .text:000000000040103A                 lea     rcx, [rbp+s]
    .text:0000000000401041                 mov     rsi, rcx        ; src
    .text:0000000000401044                 mov     rdi, rax        ; dest
    .text:0000000000401047                 call    _memcpy         ;用户名拷贝到obj偏移8处的指针所指的位置.
    .text:000000000040104C                 mov     rax, [rbp+obj]
    .text:0000000000401053                 mov     rbx, [rbp+var_18]
    .text:0000000000401057                 xor     rbx, fs:28h
    .text:0000000000401060                 jz      short loc_401067
    .text:0000000000401062                 call    ___stack_chk_fail
play_hangman_400B3A函数比较长,就不具体分析了.最后得到obj结构体的结构为
obj + 0: 所得分数
obj + 4: 名称
obj + 8: 存放用户名的指针
obj + 16: 用于存放被猜测的字符.
程序所使用的数据结构分析完了,下一步就是分析程序的逻辑.(逆向的两个主要工作就是分析清楚程序所使用的数据结构及程序的逻辑)程序在获取用户名之后就会进入到玩游戏的主循环.
    .text:0000000000400ABA LOOP_400ABA:                            ; CODE XREF: main_400A0D+11Ej
    .text:0000000000400ABA     mov     rax, cs:player_obj_6020E0
    .text:0000000000400AC1     mov     edx, [rbp+ur_fd]
    .text:0000000000400AC4     mov     esi, edx                    ; arg2: urandom fd
    .text:0000000000400AC6     mov     rdi, rax                    ; arg1: player object
    .text:0000000000400AC9     call    play_hangman_400B3A
    .....
    .text:0000000000400B28     jz      short BREAK_400B2D
    .text:0000000000400B2A     nop
    .text:0000000000400B2B     jmp     short LOOP_400ABA
play_hangman_400B3A函数是游戏的主体部分.他的第一步工作就是使用一个随机数生成字符串.其长度和我们输入的用户名的长度一致,之后就是一些游戏具体实现逻辑.让我们直接调到漏洞点吧.
**漏洞点**
****
    if ( *(_DWORD *)obj > score )  //如果分数大于预设的分数,值为64时,进入
    {
        puts("High score! change name?");
        __isoc99_scanf(" %c", &v3);
        if ( v3 == 121 )
        {
            s = malloc(0xF8uLL);
            memset(s, 0, 0xF8uLL);
            v8 = read(0, s, 0xF8uLL);
            *(_DWORD *)(obj + 4) = v8;
            v14 = strchr((const char *)s, 10);  //找换行符的位置
            if ( v14 )
            *v14 = 0;
            memcpy(*(void **)(obj + 8), s, v8); //将读取的字符串复制到原来用户名所在的内存区域
            free(s);
        }
        snprintf(buf_512, 0x200uLL, "Highest player: %s", *(_QWORD *)(obj + 8));
        score = *(_DWORD *)obj;
    }
如果你还记得的话,我们在刚开始构建obj结构体时,为用户名分配的内存大小是0x80的,然而这里程序没有考虑到这一点,而是直接读取最大字节数为0xf8的字符,然后复制到先前分配的那块内存中去.假设在开始设置用户名时我们输入10个字符,接着使我们游戏分数大于64,
接着我们就可以修改用户名,这时,将用户名设置为0xf8大小之后复制到原来存储用户名的内存区时就会触发一个堆溢出.通过分析程序开始到这里的内存使用情况,此时堆内存布局是这样的
我们就可以通过溢出name,进而覆盖obj对象的name指针,来实现一个漏洞利用.
**漏洞利用**
a. 首先我们需要使我们的分数达到64分以上,我们可以通过发生从 a 到 z的所有字符直到我们能够猜到大妈的所以字符.那么我们就能取得一个很高的分数.
b. 一旦我们重写了位于 obj 结构体中的 name 指针我们将很容易就可以实现任意地址读写,下面来分析下怎么实现任意地址读写.
    memcpy(*(void **)(obj + 8), s, v8);
    free(s);
    }
    snprintf(buf_512, 0x200uLL, "Highest player: %s", *(_QWORD *)(obj + 8));
    score = *(_DWORD *)obj;
当溢出发生后,紧接着就会把 obj + 8 处的存放的指针的数据打印出来,通过溢出我们是可以控制这个指针的值的. 那么任意地址读实现,我们可以用它来读取
got 表中的一些函数,进而实现对aslr的绕过.接下来我们在玩一次,并且比分也能在 64 以上,我们就能往刚刚设置的 地址处写入内容.进而任意地址写实现.
c. 我们现在有了一个任意地址读写的漏洞,该怎么去利用他呢.从一开始我们就检查了 程序开启的防护措施,
他开了 nx 也就是数据执行保护,RELPO 的属性是 Partial , 那么我们就可以通过覆写 got 表来实现漏洞利用.要使用 got
表覆写的话,自然而然的想到应该覆写 free 函数在 got表的地址为 system函数的地址,因为在调用 memcpy 函数之后,紧接着就调用了
free函数.