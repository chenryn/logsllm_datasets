# 【技术分享】常见的Web密码学攻击方式汇总
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**作者：**[ **Faith4444**](http://bobao.360.cn/member/contribute?uid=2664026655)
**稿费：500RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿**
**写在前面**
所有脚本的导图都是自己写的、画的，如果有不好的地方多多包涵，错误的地方也请指出，谢谢。
**分组密码的模式**
分组密码每次只能处理加密固定长度的分组，但是我们加密的明文可能会超过分组密码处理的长度。
这时便需要对所有分组进行迭代，而迭代的方式被称为分组密码的模式。常见的为针对ECB、CBC模式攻击(L-ctf提到其中一种)。
**ECB**
ECB模式的全称是Electronic CodeBook模式，将明文分组加密后直接成为密文分组，而密文则是由明文分组直接拼接而成，如图所示：
**Features：**
ECB模式是所有模式中最简单的一种。明文分组和密文分组是一一对应的，如果明文分组有相同的那么最后的密文中也会有相同的密文分组。
因为每个分组都独自进行加密解密，所以无需破解密文就能操纵部分明文，或者改变明文，在不知道加密算法的情况下得到密文，从而达到攻击效果，如图所示（翻转密文分组，那么明文分组也会被翻转）
**Example：**
某次CTF遇到的题目
**思路：**
以administrator权限登陆就就能获得Flag。判断权限则是根据cookie里面的uid参数，cookie包含username和uid两个参数，均为使用ECB加密的密文，然而username的密文是根据注册时的明文生成的。
因此我们可以根据username的明文操纵生成我们想要的uid的密文。经过fuzz发现明文分组块为16个字节，那么我们注册17字节的用户，多出的那一个字节就可以是我们我们希望的UID的值，而此时我们查看username的密文增加部分就是UID的密文，即可伪造UID。
注册aaaaaaaaaaaaaaaa1获得1的密文分组,注册aaaaaaaaaaaaaaaa2获得2的密文分组，以此类推
源码没找到，好像弄丢了，自己写了个差不多的,有兴趣可以练习
**ebc.php：**
    Username:
    Password:
     ';
    }
    else{
        $uid = DE__AES($_COOKIE['uid']);
        if ( $uid != '4'){
            echo 'uid:' .$uid .'';
            echo 'Hi ' . DE__AES($_COOKIE['username']) .'';
            echo 'You are not administrotor!!';
        }
        else {
              echo "Hi you are administrotor!!" .'';
            echo 'Flag is 360 become better';
        }
    }
    ?>
**ecb.py：**
    #coding=utf-8
    import urllib
    import urllib2
    import base64
    import cookielib
    import Cookie
    for num in range(1,50):
        reg_url='http://127.0.0.1/ecb.php?a=reg'
        index_url='http://127.0.0.1/ecb.php'
        cookie=cookielib.CookieJar()
        opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))
        opener.addheaders.append(('User-Agent','Mozilla/5.0'))
        num=str(num)
        values={'username':'aaaaaaaaaaaaaaaa'+num,'password':'123'}
        data=urllib.urlencode(values)
        opener.open(reg_url,data)
        text=opener.open(index_url,data)
        for ck in cookie:
            if ck.name=='username':
                user_name=ck.value
        user_name = urllib.unquote(user_name)
        user_name = base64.b64decode(user_name)
        hex_name = user_name.encode('hex')
        hex_name = hex_name[len(hex_name)/2:]
        hex_name = hex_name.decode('hex')
        uid = base64.b64encode(hex_name)
        uid = urllib.quote(uid)
        for ck in cookie:
            if ck.name=='uid':
                ck.value=uid
        text=opener.open(index_url).read()
        if 'Flag' in text:
            print text
            break
        else:
           print num
**CBC**
CBC模式的全称是Cipher Block
Chaining模式,在此模式中，先将明文分组与前一个密文分组(或为初始化向量IV)进行XOR运算，然后再进行加密。
解密则为密文分组先进行解密，然后再进行xor运算得到明文分组，解密过程如图所示(加密则相反)
**Features：**
因为CBC模式是将前一个密文分组和明文分组进行混合加密所以，是可以避免ECB模式的弱点。
但正因为如此，导致了解密时修改前一个密文分组就可以操纵后一个的解密后的明文分组，可以将前一个密文中的任意比特进行修改（0,1进行互换，也可以叫翻转）
因此CBC模式有两个攻击点：①vi向量，影响第一个明文分组 ②第n个密文分组，影响第n+1个明文分组
**Example：**
在比赛中遇到过很多次，基本上属于对一个密文分组进行翻转之后能够提升权限或者绕过验证的作用，自己写了一个差不多的，攻击密文的，大家可以看看
大概就是这样，要获得FLAG需要让ID=0，而我们是可以从URL中知道密文的
http://127.0.0.1/cbc2.php?a=89b52bac0331cb0b393c1ac828b4ee0f07861f030a8a3dc4b6e786f473b52182000a0d4ce2145994573a92d257a514d1
我们现在要对密文进行翻转攻击，但是并不清楚哪部分对应的是ID的上一个密文，可以直接脚本进行FUZZ，也可是使用burp(intruder)进行测试（选择攻击的密文）
选择攻击模式
攻击结果
burp的翻转并不是遍历所有翻转的可能每一位变动一次，比如101101的第一次为101100，那么的二次就是101110，第三次是101000，依次类推。
所以burp可能无法完全翻转出需要的payload，但是可以帮我确定需要翻转的位置，我们经过简单的计算就能得到自己需要的值
比如这里进过对比，我们轻松的找到了需要翻转的位置，但是却没有得到为0的翻转，数学不及格的我来算算。xor运算的特点:a xor b =c
abc三个数任意两个运算可得到第三个，所以
0b的10进制是11
11xor5=14
14xor0=14
14的十进制为0e
FUZZ反转成功。
最后在提醒下：AES128位一组，换成16进制其实我们反转的的是第一组。但影响的却是第二组
我们这个演示的是攻击密文的，攻击iv的，基本相似，有兴趣的可以去看看OWASP里面的，那个是攻击iv的
**cbc.php：**
    ';
             echo 'Flag is T00ls become better';
        }
        else{
    echo 'Your are noob!fuck noob!!';
            echo @'id:'.@$tmp[2].'';
            echo @'name:'.@$tmp[0].'';
            echo @'email:'.@$tmp[1].'';
        }
    }     
    function pad2Length($text, $padlen){    