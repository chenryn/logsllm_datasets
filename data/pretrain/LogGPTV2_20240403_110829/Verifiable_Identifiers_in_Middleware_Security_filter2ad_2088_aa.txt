title:Verifiable Identifiers in Middleware Security
author:Ulrich Lang and
Dieter Gollmann and
Rudolf Schreiner
Verifiable 
Identifiers 
in  Middleware 
Security
Dieter  Gollmann
Microsoft  Research
Cambridge,  UK
Rudolf  Schreiner
ObjectSecurity 
Ltd.
Cambridge,  UK
PI:EMAIL
rudolf@o  b j ectsecuri ty .com
it  is  difficult 
fies a  number  of  issues related  to  security  information
and  their  semantics  on  different  layers  of  abstraction.
In  particular 
to  express  caller  and  tar-
get  accurately  in  the  middleware  security  policy  with
the  information  available  on the  middleware  layer.  The
problems  discussed in  this  paper  were encountered  dur-
ing  the  development  of  MICOSec  [7], our  CORBA  Se-
curity  Services implementation 
for  the  MICO  ORB  [3].
This  section  briefly  reviews  CORBA  security  and
the  terminology  used.  Section  2 describes the  different
layers  of  abstraction 
in  a secure CORBA  environment
and identifies  the  boundaries  of the  middleware  (ORB)
layer.  Section  3  evaluates  the  usefulness  of  a  range
of  potential  ways  of  describing  the  main  ORB  layer
In  section
components:  caller,  message, and  target. 
4,  our  MICOSec  CORBA  Security  implementation 
is
presented.  Finally,  section  5 summarizes  the  observa-
tions  of  this  paper,  and  a conclusion  is given  in  section
6.  Note  that,  although  CORBA  was chosen as an  ex-
ample  for  middleware, 
the  observations  of  this  paper
apply  to  middleware  in  general.
1.1.  CORBA
[8]  enables  client  applications 
The  Common  Object  Request  Broker  Architecture
(CORBA) 
to  transpar-
ently  call  other  software  objects  across networks.  This
is  achieved  by  mediating  all  remote  method  invoca-
tions  through  an  Object  Request  Broker  (ORB)  which
hides  the  complexities  of  large,  dynamic,  and  hetero-
geneous distributed  systems.  This  allows  applications
to  invoke  remote  objects  almost  in  the  same  way  as
in  the  (non-distributed)  object-oriented  programming
paradigm.  On  a conceptual  level  the  ORB  is  often  re-
ferred  to  as a  "software  bus" , analogous  to  a hardware
bus  which  provides  hardware  devices with  an  abstract
interface  to  the  communications  mechanism.  The  ac-
tual  functionality  of  this  conceptual  entity 
is  imple-
mented  by  the  ORB  libraries  on  each node.  CORBA
Ulrich  Lang
University  of Cambridge
Computer  Laboratory
Cambridge,  UK
ulrich.lang@cl.cam.ac. uk
Abstract
in  order 
This  paper  discusses  the  difficulties 
of  describing  an
notion  of  the  security 
is  no  information 
there 
to  describe 
the  caller  and  target, 
"target" 
in  object-oriented 
to  use  descriptors 
from  other 
attributes 
middleware 
"caller"
systems
security  needs  such  se-
appropriate 
and 
such  as  CORBA.  Middleware 
curity  attributes 
to  be  able  to  express  middle-
ware 
layer  security  policies.  Our  analysis  points  out
that,  whilst 
available  on  the
ORB 
layer 
it  is  pos-
sible  in  practice 
layers.
In  CORBA  security, 
identifiers
on  the  caller  side  and  the  information 
the  object
reference  on  the  target  side  turn  out  to  be most  appro-
caller  and  target
priate  and  trustworthy 
As  a  proof
application 
of  concept  we  mention 
secu-
rity 
which  demonstrates 
of  our  approach.  Our  paper  shows  that 
to  expect  a  security  service 
from 
fully 
implications 
the  feasibility
it  is  unrealistic
to  be  able  to  abstract
security  mechanisms  without
and  semantic  mismatches.
objects  at  the  right  granularity. 
the  underlying 
on  granularity 
our  MICOSec  CORBA 
the  mechanism-specific 
from 
for  describing 
implementation 
layer 
1.  Introduction
One  of  the  main  purposes  of  abstraction 
in  mid-
dleware  architectures  is the  separation  of  the  underly-
ing  layers from  the  application  layer  above to  facilitate
portability  of  application  code,  as well  as enabling  in-
teroperability  across differing  underlying 
technologies.
The  CORBA  security  services specification  is based on
this  idea  and therefore  tries  to  abstract  the  application
logic  from  the  underlying  transport  and  security  mech-
anisms.  This  should  present  the  applications  with  a
generic  security  service  that  facilitates  portability, 
in-
teroperability  and  flexibility.
Our  analysis  of  the  CORBASec  architecture  identi-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
object  interfaces  are specified  in  a standardized  Inter-
face  Definition  Language  (IDL),  and  objects  can  be
located  with  Interoperable  Object  References  (IORs).
CORBA  also  specifies  a  number  of  additional  object
services such as naming,  events,  persistence,  time,  and
security.
1.2. CORBA  Security  Services
This  paper  is focused  on  the  CORBA  Security  ser-
[9} which  specifies the
vices specification  (CORBASec) 
following  security  functionality  components  [2} :
1.  Authentication: 
clients  and  targets  can verify  the
identity  of  the  other  party;
2.  Message Protection:  data  in  transit  can  be  pro-
tected  from  integrity  and  confidentiality  attacks;
3.  Authorization:  access to  objects  can be controlled;
Audit:  Audit 
have been invoked  by  which  clients;
logs  can  record  which  operations
5.  Non-Repudiation 
irrefutable  evidence
of  method  invocations  can  be generated  and  veri-
fied  (see [1]).
(optional): 
Some  services  are  implemented  by  CORBA  on  the
ORB  layer  (with  the  use of  so-called  interceptors),  e.g.
access control  and  audit.  However,  they  rely  strongly
on  the  services  provided  by  the  underlying  security
technology,  such  as  authentication  and  message pro-
tection.  So instead  of  implementing  all  security  func-
tionality 
itself,  CORBASec  acts  to  some extent  like  an
API  which  calls  underlying  security  mechanisms  such
as Kerberos  v5  [5], SESAME  [11], and  SPKM,  through
an  interface  modeled  after  GSS-APr 
[6].  Therefore
the  functionality  offered  by  CORBASec  is  always  lim-
ited  by  the  functionality  offered  by  the  underlying  se-
curity  mechanisms.
The  CORBA  Security  Services specification  was first
published  in  1995 and  consequently  went  through  sev-
eral  updates  to  mitigate  a  number  of  discovered  ar-
chitectural  problems,  in  particular 
regarding  interop-
In  version  1.5,  SSLIOP,  the
erability  and  portability. 
SSL-Inter-ORB-Protocol  was  added  to  the  specifica-
tion  to  meet  industry  demand.  The  current  draft  ver-
sion  1.8 comprises  around  450 pages.  There  are  also a
lSecure Sockets Layer (SSL) is also widely used as a basic se-
curity mechanism for CORBA security, but it does not integrate
well into the CORBA security architecture. This is because SSL
works as a secure transport mechanisms, i.e. it establishes a net-
work connection as part of the security context establishment.
Therefore SSL has to be integrated as an alternative transport
mechanism into the ORB. This way, the security context is set up
automatically when the ORB opens a new network connection.
Application
Layer
Interface
Layer
ORB Layer
Sec.  Mech.
Layer
OS  Layer
Figure  1. CORBA Layers
number  of additional  security-related  documents,  most
notably 
the  Security  Domain  Management  Member-
ship Service [lOJ revised submission,  and a final  submis-
sion  for  Common  Secure Interoperability 
v2  (CSlv2),
which  attempts  to  improve  CORBASec  interoperabil-
ity,  and  an  informal  draft 
for  an  Authorization  To-
ken  Layer  Acquisition  Service  (ATLAS},  which  allows
clients  to  pull  CSlv2  authorization 
tokens in  the  correct
format  for  the  target-side  from  a token  server .
2.  CORBA 
Abstraction
The  CORBA  architecture 
is  based on  a  number  of
layers  with  interfaces  between  them  that  help  achieve
the  basic CORBA  design goals.  Vertical  interfaces  pro-
vide  abstraction,  portability  of  applications,  and  flex-
ibility 
regarding  the  underlying  security  mechanisms.
There  are  also horizontal  interfaces  (i.e.  standard  pro-
tocols),  which  provide  interoperability.  For  our  discus-
sion,  only  the  vertical  interfaces  are  of  interest.
The  purpose  of  this  section  is  to  identify 
the  exact
boundaries  of  the  ORB  layer  and  to  show  how  it  fits
with 
the  layers  above  and  below.  Figure  1  shows  a
generic  secured  CORBA  application  with  a  stack  of
layers  above  and  below  the  ORB  layer .
The  bottom  of  the  stack  on  either  side  consists
of  the  underlying  operating  system  and  the  network
( OS  layer) .This 
layer  handles  all  basic  system  calls
and  communications  over  the  network. 
The  next
layer  above  (security  mechanism  layer)  comprises  what
the  CORBASec  specification  calls  "underlying  secu-
rity  technology"  .Note 
that  CORBASec  does not  itself
implement  any  authentication  and  message protection
functionality, 
it  merely  provides  the  architectural  ab-
straction  to the  underlying  security  mechanism.  Exam-
ples  for  mechanisms  on  this  layer  would  be  Kerberos,
SESAME,  or  SSL.
On  the  next  layer  (ORB  layer),  the  CORBASec  ar-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
chitecture  provides  the  abstraction  from  the  underlying
security  mechanism  layer.  Despite  the  fact  that  some
of  the  security  policies  and  enforcement  reside  on  this
layer,  in  particular  parts  of  access control,  audit,  and
domain  management,  CORBASec  relies  on  the  under-
lying  mechanism  for  most  of  its  functionality.  Typical
abstractions  on  this  layer  would  be  the  identities  of
i  Access  Control  Policy 
i
,
l~~J
~
caller  and  target.
The  next  layer  above  (interface  layer)  consists  of
client  stubs  and  target  skeletons,  which  contain  the
specific  information  about  the  target  interface.  Stubs
and  skeletons  are  generated  as part  of  the  IDL  inter-
face language mapping  process 2.  In  addition,  this  layer
contains  the  target-side  object  adapter,  which  has sev-
eral  purposes:  firstly 
it  abstracts  the  target  from  the
ORB  and therefore  enables portability  of target  objects
across different  ORBs,  and  secondly  it  generates Inter-
operable  Object  References (IORs)  for  the  objects  that