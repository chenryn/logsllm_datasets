# Verifiable Identifiers in Middleware Security

**Authors:**
- Ulrich Lang, University of Cambridge, Computer Laboratory, Cambridge, UK
- Dieter Gollmann, Microsoft Research, Cambridge, UK
- Rudolf Schreiner, ObjectSecurity Ltd., Cambridge, UK

**Contact:**
- Email: rudolf@objectsecurity.com

## Abstract
This paper discusses the challenges associated with describing security information and its semantics across different abstraction layers in middleware, particularly in CORBA. The primary focus is on accurately expressing caller and target identities in the middleware security policy using the available information. The issues discussed were encountered during the development of MICOSec [7], our implementation of CORBA Security Services for the MICO ORB [3]. 

The paper begins with a brief review of CORBA security and the terminology used. Section 2 describes the various abstraction layers in a secure CORBA environment and identifies the boundaries of the middleware (ORB) layer. Section 3 evaluates the effectiveness of different potential methods for describing the main ORB layer components: caller, message, and target. Section 4 presents our MICOSec CORBA Security implementation. Finally, Section 5 summarizes the key observations, and Section 6 provides a conclusion. Although CORBA is used as an example, the insights apply to middleware in general.

## 1. Introduction
One of the main purposes of abstraction in middleware architectures is to separate the underlying layers from the application layer to facilitate portability and interoperability. The CORBA security services specification aims to abstract the application logic from the underlying transport and security mechanisms, providing a generic security service that enhances portability, interoperability, and flexibility.

Our analysis of the CORBASec architecture highlights the difficulties in describing security attributes, such as caller and target, at the appropriate level of abstraction. We find that identifiers on the caller side and object references on the target side are the most suitable and trustworthy. Our MICOSec CORBA Security implementation serves as a proof of concept, demonstrating the feasibility of our approach. This paper also shows that it is unrealistic to expect a security service to fully abstract security mechanisms without considering the granularity and semantic mismatches of the underlying layers.

### 1.1. CORBA Overview
The Common Object Request Broker Architecture (CORBA) enables client applications to transparently call other software objects across networks. This is achieved by mediating all remote method invocations through an Object Request Broker (ORB), which hides the complexities of large, dynamic, and heterogeneous distributed systems. This allows applications to invoke remote objects almost as if they were local, following the object-oriented programming paradigm. On a conceptual level, the ORB is often referred to as a "software bus," analogous to a hardware bus that provides an abstract interface for communication. The actual functionality is implemented by ORB libraries on each node.

### 1.2. CORBA Security Services
This paper focuses on the CORBA Security services specification (CORBASec) [9], which defines the following security functionality components:

1. **Authentication**: Clients and targets can verify the identity of the other party.
2. **Message Protection**: Data in transit can be protected from integrity and confidentiality attacks.
3. **Authorization**: Access to objects can be controlled.
4. **Audit**: Logs can record which operations have been invoked by which clients.
5. **Non-Repudiation (optional)**: Irrefutable evidence of method invocations can be generated and verified.

Some services, such as access control and audit, are implemented by CORBA on the ORB layer using interceptors. However, they rely heavily on the services provided by the underlying security technology, such as authentication and message protection. Instead of implementing all security functionality, CORBASec acts as an API that calls underlying security mechanisms like Kerberos v5 [5], SESAME [11], and SPKM through an interface modeled after GSS-API [6]. Therefore, the functionality offered by CORBASec is limited by the capabilities of the underlying security mechanisms.

The CORBA Security Services specification was first published in 1995 and has undergone several updates to address architectural problems, particularly regarding interoperability and portability. In version 1.5, SSLIOP, the SSL-Inter-ORB-Protocol, was added to meet industry demand. The current draft version 1.8 comprises around 450 pages. Additional security-related documents include the Security Domain Management Membership Service [10] and a final submission for Common Secure Interoperability v2 (CSLv2), which aims to improve CORBASec interoperability. There is also an informal draft for an Authorization Token Layer Acquisition Service (ATLAS), which allows clients to pull CSLv2 authorization tokens in the correct format for the target-side from a token server.

## 2. CORBA Abstraction Layers
The CORBA architecture is based on several layers with interfaces between them, designed to achieve the basic CORBA goals. Vertical interfaces provide abstraction, portability of applications, and flexibility regarding the underlying security mechanisms. Horizontal interfaces (standard protocols) provide interoperability. For our discussion, only the vertical interfaces are of interest.

The purpose of this section is to identify the exact boundaries of the ORB layer and show how it fits with the layers above and below. Figure 1 illustrates a generic secured CORBA application with a stack of layers above and below the ORB layer.

- **OS Layer**: The bottom of the stack consists of the underlying operating system and network, handling basic system calls and network communications.
- **Security Mechanism Layer**: The next layer comprises what the CORBASec specification calls "underlying security technology." Examples include Kerberos, SESAME, or SSL. CORBASec does not implement these functionalities but provides the architectural abstraction.
- **ORB Layer**: The CORBASec architecture provides abstraction from the underlying security mechanism layer. Some security policies and enforcement, such as parts of access control, audit, and domain management, reside on this layer. Typical abstractions include the identities of the caller and target.
- **Interface Layer**: The next layer consists of client stubs and target skeletons, which contain specific information about the target interface. Stubs and skeletons are generated as part of the IDL interface language mapping process. This layer also includes the target-side object adapter, which abstracts the target from the ORB, enabling portability of target objects across different ORBs and generating Interoperable Object References (IORs) for the objects.

## 3. Evaluation of Identifier Methods
This section evaluates the usefulness of various potential methods for describing the main ORB layer components: caller, message, and target. The analysis points out that, while some descriptors from other layers may be available, the most appropriate and trustworthy identifiers are those on the caller side and the object reference on the target side.

## 4. MICOSec Implementation
In this section, we present our MICOSec CORBA Security implementation, which serves as a proof of concept for our approach. The implementation demonstrates the feasibility of using verifiable identifiers to express middleware security policies effectively.

## 5. Summary and Observations
This section summarizes the key observations from the paper, highlighting the importance of accurate and verifiable identifiers in middleware security. The findings are applicable to middleware in general, not just CORBA.

## 6. Conclusion
In conclusion, the paper underscores the need for appropriate and trustworthy security attributes in middleware. It is unrealistic to expect a security service to fully abstract security mechanisms without considering the granularity and semantic mismatches of the underlying layers. The MICOSec implementation provides a practical example of how verifiable identifiers can be used to enhance middleware security.

---

**Note:** This paper is authorized for use by Tsinghua University. Downloaded on March 25, 2021, at 07:08:51 UTC from IEEE Xplore. Restrictions apply.