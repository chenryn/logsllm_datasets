# Somerset Recon: Infecting the Embedded Supply Chain

## Introduction - Who We Are
**Zach Miller**
- Security Researcher at Somerset Recon
- Specializes in Reverse Engineering and Penetration Testing
- Twitter: @bit_twidd1er

**Alex Kissinger**
- Barista and Occasional Security Specialist at Somerset Recon
- Expertise in Cappuccinos, Hardware Hacking, and Reverse Engineering

## Previous Research

### Electronic Safe Lock Analysis
- **Project**: SecuRam Prologic B01 Bluetooth Electronic Safe Lock
- **Findings**:
  - Discovered vulnerabilities in the mobile application and wire protocol.
  - Successfully captured and decoded PIN numbers transmitted wirelessly.
  - Performed brute force attacks on PIN numbers over the wire.

### Hello Barbie
- **Project**: Mattel Hello Barbie Doll
- **Findings**:
  - Identified multiple vulnerabilities affecting the doll and its associated web and mobile technologies.

## Commonalities in Embedded Devices
- **Shared Feature**: All these devices utilize embedded debuggers for their development.

## Industries Utilizing Embedded Debuggers
- Automotive
- Industrial
- Medical
- Communications
- Digital Consumer
- And more...

## Our Targets

### Segger J-Link Debug Probe
- **Features**:
  - Supports JTAG/SWD/SWO and other protocols.
  - Functions as an In-Circuit Emulator (ICE) and In-Circuit System Programmer (ICSP).
  - Compatible with ARM/ARM Cortex, RISC-V, and RX targets.
  - Equipped with USB and Ethernet interfaces.
  - Cross-platform toolchain support.
  - Ultrafast download/upload to flash.
  - Unlimited software breakpoints.
- **Popularity**: "SEGGER J-Links are the most widely used line of debug probes available today" - [www.segger.com](http://www.segger.com)

### Attack Surface
- **Hardware Debug Probes**:
  - Runs a Real-Time Operating System (RTOS).
- **Software Packages**:
  - USB Driver
  - Multiple user-mode applications
  - Full-featured Integrated Development Environment (IDE)

### Segger J-Link - Hardware
- **Model**: J-Link EDU V9.3
- **Notable Features**:
  - Tag-Connectâ„¢ Interface

### Debugging a J-Link with a J-Link
- **Challenges**:
  - Security and Flash bits set in flash.
  - Refuses to connect and erase.
  - Potential workarounds exist.
- **References**:
  - JLink Mini EDU MCU Reference Manual
  - Chips are cool.

## Vulnerability Research - Reverse Engineering
- **Observations**:
  - Significant amount of cross-compiled code.
  - Interesting custom string manipulation functions (details to follow).
  - Frequent use of dangerous/banned functions.
  - Mostly basic applications, nothing overly complex.

### Binary Protections
- **Enabled**:
  - Data Execution Prevention (DEP)/No-eXecute (NX)
  - Address Space Layout Randomization (ASLR)
- **Disabled**:
  - Position Independent Executable (PIE)
  - Stack canaries in *nix binaries (present in Windows binaries)
- **Additional Protections**:
  - SafeSEH used in Windows binaries
  - No symbols available

## Fuzzing
- **Setup**:
  - Fuzzers tested various input vectors including files, network interfaces, and command-line arguments.
  - Used Peach for generational fuzzing.
  - Focused on structured, text-based formats.
  - Explored code paths requiring specific magic numbers.
- **Results**:
  - Tens of thousands of crashes.
  - Many exploitable crashes.
  - Numerous duplicate crashes.
  - Challenges in keeping J-Link devices attached to VMs.
- **Solutions**:
  - Developed a crash monitor to detect and handle disconnections.
  - Script to check and reattach J-Link devices using libvirt.

## Local Exploits

### CVE-2018-9094 - Format String Vulnerability
- **Details**:
  - Custom `printf`-style functions in J-Link.
  - Accepts a limited subset of format specifiers: `%d`, `%x`, `%p`, `%u`, etc.
  - Does not accept `%n` family of specifiers.
  - Accepts precision arguments: `.number`.
- **Impact**:
  - Reduced severity due to lack of `%n` specifiers.
  - Potential for use in an exploit chain to read arbitrary memory.
- **Example**:
  ```sh
  JFlashSPI_CL.exe -open xAAAA%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%X%s
  ```

### CVE-2018-9095 - Stack Buffer Overflow
- **Discovery**:
  - Found via fuzzing, accounting for most exploitable crashes (>99%).
  - Traditional stack buffer overflow.
  - Reads each line of a file into a 512-byte stack buffer.
- **Triage**:
  - GDB backtrace shows segmentation fault.
  - Corrupt stack detected.
- **Exploitation Steps**:
  1. Control over return address.
  2. Get the address of Libc.
  3. Use that to get the address of `system()`.
  4. Call `system()` with arguments.
  5. Achieve successful exploitation.
- **Detailed Triage**:
  - **Step 1**: Calculated offset using GDB Peda and cyclic patterns (De Bruijn sequence).
  - **Step 2**: Dumped all `got.plt` symbols using pwntools.
  - **Step 3**: Used ROP gadgets and gymnastics to dereference and manipulate addresses.
  - **Step 4**: Calculated offsets and performed ROP gymnastics to get the proper value in EAX.

This comprehensive overview highlights our research and findings, providing a detailed insight into the vulnerabilities and potential exploits in the embedded debugger ecosystem.