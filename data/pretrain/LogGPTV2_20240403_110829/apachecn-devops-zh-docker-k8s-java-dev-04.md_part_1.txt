# 四、创建 Java 微服务
我们在[第 3 章](03.html)、*使用微服务*中已经看到了很多微服务架构背后的理论。是时候做一些实践了；我们将实现我们自己的微服务。这将是一个简单的 REST 服务，接受`GET`、`POST`等`HTTP`方法来检索和更新实体。在用 Java 开发微服务时，有几个选择。在这一章中，我们将概述两种主要的方法，可能最流行的是 JEE7 和 Spring Boot。我们将简要了解如何使用 JEE·JAX-RS 对微服务进行编码。我们还将创建一个在 Spring Boot 运行的微服务。事实上，在[第 5 章](05.html)、*用 Java 应用*创建映像中，我们将从 Docker 容器中运行我们的 Spring Boot 微服务。正如我们在[第三章](03.html)、*中所说的与微服务*一起工作，微服务通常使用 REST 与外界进行通信。我们的 REST 微服务将尽可能简单；我们只需要使用 Docker 和 Kubernetes 部署一些东西。我们将不关注高级微服务特性，如身份验证、安全性、过滤器等，因为这超出了本书的范围。我们示例的目的是让您了解如何开发 REST 服务，然后使用 Docker 和 Kubernetes 部署它们。本章将涵盖以下主题:
*   REST 简介
*   使用 Java EE7 注释在 Java 中创建 REST 服务
*   使用 Spring Boot 创建 REST 服务
*   运行服务，然后用不同的 HTTP 客户端调用它
在这一章的最后，我们将熟悉一些有用的工具——我们将使用一些代码生成工具，比如 Spring Initialzr 来快速引导一个 Spring Boot 服务项目。在我们开始编写自己的微服务之前，让我们简单解释一下什么是 REST。
# REST 简介
REST 首字母缩略词代表代表性状态转移。这是一种建筑风格，也是一种基于网络的软件设计。它描述了一个系统如何与另一个系统进行状态通信。这非常适合微服务领域。从[第 3 章](03.html)、*与微服务*一起工作，基于微服务架构的软件应用是一堆相互独立的服务。
在我们更进一步之前，我们需要了解 REST 中的一些概念:
*   `resource`:这是 REST 架构中的主要概念。任何信息都可以是一种资源。银行账户、个人、映像、书。资源的表示必须是**无状态的**
*   `representation`:一种特定的资源表示方式。例如，银行帐户资源可以用 JSON、XML 或 HTML 来表示。不同的客户端可能请求不同的资源表示，一个可以接受 JSON，而另一个则需要 XML
*   `server`:服务提供商。它公开了客户端可以使用的服务
*   `client`:服务消费者。例如，这可能是另一个微服务、应用，或者只是运行 Angular 应用的用户网络浏览器
正如定义所说，REST 被用来在网络上传输这些资源表示。表示本身是通过某种媒体类型创建的。媒体类型可以不同。媒体类型的一些例子包括 JSON、XML 或 RDF。JSON 媒体类型被广泛接受，可能是最常用的。在我们的示例中，我们还将使用 JSON 与我们的服务进行通信。当然，REST 不是微服务通信的唯一选择；还有其他的，比如谷歌非常优秀的 gRPC，它带来了很多优势，比如 HTTP/2 和 protobuff。在 REST 架构中，资源由组件操纵。事实上，这些组件就是我们的微服务。组件通过标准的统一接口请求和操作资源。REST 不依赖于任何特定的协议；然而，REST 呼叫通常使用最流行的`HTTP`或`HTTPS`协议进行。在`HTTP`的情况下，这个统一接口由标准的 HTTP 方法组成，如`GET`、`PUT`、`POST`和`DELETE`。
REST is not tied to any specific protocol.
在我们开始实现响应`HTTP`调用的服务之前，了解一下我们将要使用的 HTTP 方法是值得的。我们现在将更加关注他们。
# HTTP 方法
基于 REST 的架构使用标准 HTTP 方法:`PUT`、`GET`、`POST`和`DELETE`。下表对这些操作进行了说明:
*   `GET`授予对资源的读取权限。调用`GET`应该不会产生任何副作用。这意味着`GET`运算是幂等的。资源从未通过`GET`请求改变；例如，请求没有副作用。这意味着它是幂等的
*   `PUT`创建新资源。类似`GET`，也应该是幂等的
*   `DELETE`移除一个或多个资源。重复调用`DELETE`操作不应给出不同的结果
*   `POST`将更新现有资源或创建新资源
RESTful 网络服务只是一个基于`REST`资源概念和使用 HTTP 方法的网络服务。它应该为公开的方法、支持的 MIME 类型(如 XML、文本或 JSON)以及服务处理的操作集(`POST`、`GET`、`PUT`和`DELETE`)定义基本 URI。根据 RESTful 原则，HTTP 对于 REST 来说非常简单和自然。这些原则是一组约束，确保客户端(例如服务消费者、其他服务或浏览器)能够以灵活的方式与服务器通信。现在让我们看看它们。
在 REST 原则客户端-服务器通信中，所有以 RESTful 风格构建的应用原则上也必须是客户端-服务器。应该有一个服务器(服务提供商)和一个客户端(服务消费者)。拥有这一点可以实现服务器和客户端的松散耦合和独立演进。这非常符合微服务的概念。从[第 3 章](03.html)、*开始，你会记得使用微服务*时，它们必须是独立的:
*   **无状态**:对服务器的每个`client`请求都要求完全表示其状态。服务器必须能够完全理解`client`请求，而不使用任何服务器上下文或服务器会话状态。换句话说，所有状态都必须在客户端进行管理。每个 REST 服务都应该是**无状态的**。后续请求不应依赖于临时存储的前一个请求的某些数据。信息应该是自我描述的。
*   **可缓存**:响应数据可以标记为可缓存或不可缓存。任何标记为可缓存的数据都可以重新用作对同一后续请求的响应。每个响应都应该指出它是否可以缓存。
*   **统一接口**:所有组件必须通过单一统一接口进行交互。因为所有组件交互都是通过这个接口进行的，所以与不同服务的交互非常简单。
*   **分层系统**:服务的消费者不应该假设直接连接到服务提供商。换句话说，在任何时候，客户端都无法判断它是连接到终端服务器还是中间服务器。中间层通过实现负载平衡来帮助实施安全策略并提高系统的可伸缩性。由于请求可以被缓存，客户端可能会从中间层获得缓存的响应。
*   **通过表示操纵资源**:一个资源可以有多个表示。应该可以通过带有这些表示的消息来修改资源。
*   **超媒体作为应用状态引擎(HATEOAS)**:RESTful 应用的消费者应该只知道一个固定的服务 URL。所有后续资源都应该可以从资源表示中包含的链接中发现。
前面的概念代表了 REST 的定义特征，并将 REST 体系结构与其他体系结构(如网络服务)区分开来。值得注意的是，REST 服务是一个 web 服务，但是 web 服务不一定是 REST 服务。REST 微服务应该代表实体的状态。例如，让我们的实体是一本书(连同它的属性，如标识、标题和作者)，表示为 XML、JSON 或纯文本。考虑 REST 最基本的方式是将其作为格式化服务 URL 的一种方式。例如，拥有我们的`book`资源，我们可以想象在服务中定义以下操作:
*   `/books`将允许访问所有的书籍
*   `/books/:id`将是查看基于其唯一 ID 检索的单本书的操作
*   向`/books`发送`POST`请求将是你如何实际创建一本新书并将其存储在数据库中
*   向`/books/:id`发送`PUT`请求将是你如何更新给定书籍的属性，同样由它的唯一标识来标识
*   向`/books/:id`发送`DELETE`请求将是您删除特定书籍的方式，同样通过其唯一标识来识别
值得尝试理解的是，REST 不是 HTTP。它经常使用 HTTP，因为在其最一般的形式中，REST 是关于将动词的概念映射到任意的名词集合，并且非常适合 HTTP 方法。HTTP 包含一组有用的通用动词(`GET`、`POST`、`PUT`、`PATCH`等等)。在 REST 中，我们不传输实际的对象，而是以特定的形式传输它的表示，如 XML、文本或 JSON。REST 作为一种建筑风格意味着它只是一个概念。如何实施取决于你。Java 非常适合开发 REST 服务。让我们看看我们怎么做。
# Java 中的 REST
在用 Java 开发 REST 服务时，我们至少有几个可以使用的框架选项。最受欢迎的将是带有 JAX RS 的纯 JEE7 或带有 Spring Boot 的 Spring Framework。您可以使用其中的任何一种，也可以将它们混合在一起。让我们现在更详细地看看这两个，从 JAX-RS 开始。
# 爪哇 EE7 - JAX-RS 与泽西岛
JAX-RS 的诞生源于 **Java 规范请求** ( **JSR** ) 311。正如官方定义所说，JAX-RS 是 RESTful 网络服务的 Java 应用编程接口。这是一个规范，为根据 REST 架构模式创建 web 服务提供支持。JAX-RS 使用 Java SE 5 中引入的 Java 注释来简化 web 服务客户端和端点的开发和部署。从 1.1 版本开始，JAX-RS 是 Java EE 的官方部分。作为 Java EE 的一个官方部分，一个显著的特点是开始使用 JAX-RS 不需要任何配置。
带有 JAX-RS 2.0 的 Java EE 7 带来了几个有用的特性，进一步简化了微服务的开发。JAX-RS 2.0 最重要的新特性之一是遵循 REST 的 HATEOAS 原则支持超媒体。`Jersey`，一个来自 Oracle 的库，可能是最广为人知的库，它实现了这个规范。
Jersey is the reference implementation for the JSR 311 specification.
泽西岛实现提供了一个库来实现 Java servlet 容器中的 RESTful 网络服务。在服务器端，Jersey 提供了一个 servlet 实现，它扫描预定义的类来识别 RESTful 资源。泽西岛让编写 RESTful 服务变得容易多了。它将你需要自己做的大量低级编码抽象出来。使用泽西岛，你用一种声明的方式。在您的`web.xml`文件中注册的 servlet 分析传入的`HTTP`请求，并选择正确的类和方法来响应该请求。它通过查看类和方法级别的注释来找到合适的执行方法。带注释的类可以驻留在不同的包中，但是您可以通过`web.xml`命令泽西 servlet 扫描某些包中的带注释的类。
JAX-RS 支持通过用于 XML 绑定的 **Java 架构** ( **JAXB** )来创建 XML 和 JSON。泽西的实现还提供了一个`client`库来与 RESTful 网络服务进行通信。
如前所述，我们使用 Java 注释开发 JAX-RS 应用。和它一起工作既轻松又愉快。现在让我们描述那些注释。
# JAX 遥感注释
下表列出了 JAX 遥感中最重要的注释:
| **标注** | **表示** |
| `@PATH` | 将路径设置为基础`URL + /your_path`。基本网址基于您的应用名称、servlet 和`web.xml`配置文件中的网址模式。 |
| `@POST` | 表示以下方法将响应`HTTP POST`请求。 |
| `@GET` | 表示以下方法将响应`HTTP GET`请求。 |
| `@PUT` | 表示以下方法将响应`HTTP PUT`请求。 |
| `@DELETE` | 表示以下方法将响应`HTTP DELETE`请求。 |
| `@Produces` | 定义哪个 MIME 类型是由一个用`@GET`注释的方法传递的。例如可以是`"text/plain"`、`"application/xml"`或者`"application/json"`。 |
| `@Consumes` | 定义此方法使用的 MIME 类型。 |
| `@PathParam` | 用于将 URL 中的值提取(注入)到方法参数中。例如，通过这种方式，您可以将资源的标识注入到方法中，以获得正确的对象。 |
| `@QueryParam` | 用于提取(注入)请求附带的 URI 查询参数。**统一资源标识符** ( **URI** )是一个字符串，用于标识互联网上的名称或资源。 |
| `@DefaultValue` | 指定默认值。对可选参数有用。 |
| `@CookieParam` | 允许您将客户端请求发送的 cookies 注入到您的 JAX-RS 资源方法中的注释。 |
| `@Provider` | `@Provider`注释用于 JAX-RS 运行时感兴趣的任何内容，例如`MessageBodyReader`和`MessageBodyWriter`。对于`HTTP`请求，`MessageBodyReader`用于将`HTTP`请求实体映射到方法参数。在响应端，使用`MessageBodyWriter`将返回值映射到`HTTP`响应实体体。如果应用需要提供额外的元数据，如`HTTP`头或不同的状态代码，方法可以返回一个包装实体的响应，并且可以使用`Response.ResponseBuilder`构建。 |
| `@ApplicationPath` | `@ApplicationPath`注释用于定义应用的网址映射。由`@ApplicationPath`指定的路径是由`resource`类中的`@Path`注释指定的所有资源 URIs 的基本 URI。您只能将`@ApplicationPath`应用于`javax.ws.rs.core.Application`的子类。 |
乍一看，注释名称可能不清楚或不言自明。让我们看看 REST 端点实现的示例，它会变得更加清晰。应用本身标有`@ApplicationPath`注释。默认情况下，在启动符合 JEE 标准的服务器期间，JAX-RS 将扫描 Java 应用归档中的所有资源，以找到暴露的端点。我们可以覆盖`getClasses()`方法，在 JAX-RS 运行时手动注册应用中的`resource`类。您可以在以下示例中看到它:
```
package pl.finsys.jaxrs_example 
@ApplicationPath("/myApp") 
public class MyApplication extends Application { 
   @Override 
   public Set> getClasses() { 
      final Set> classes = new HashSet<>(); 
      classes.add(MyBeansExposure.class); 
      return classes; 
   } 
} 
```
在前面的例子中，我们只是注册了一个 REST 应用，给了它`/myApp`基础 URI 路径。只有一个`REST`方法处理程序(端点)`MyBeansExposure`类，我们在 REST 应用中注册了它。在单独的 Java 类中实现的简化 REST 端点看起来可能与此相同:
```
package pl.finsys.jaxrs_example 
import javax.annotation.PostConstruct; 
import javax.enterprise.context.ApplicationScoped; 
import javax.ws.rs.DELETE; 
import javax.ws.rs.GET; 
import javax.ws.rs.POST; 
import javax.ws.rs.Path; 
import javax.ws.rs.PathParam; 
import javax.ws.rs.container.ResourceContext; 
import javax.ws.rs.core.Context; 
import javax.ws.rs.core.Response; 
@ApplicationScoped 
@Path("beans") 
public class MyBeansExposure { 
    @Context ResourceContext rc; 
    private Map myBeans; 
    @GET 
    @Produces("application/json") 
    public Collection allBeans() { 
        return Response.status(200).entity(myBeans.values()).build(); 
    } 
    @GET 
    @Produces("application/json") 
    @Path("{id}") 
    public Bean singleBean(@PathParam("id") String id) { 
        return Response.status(200).entity(myBeans.get(id)).build(); 
    } 
    @POST 
    @Consumes("application/json") 
    public Response add(Bean bean) { 
        if (bean != null) { 
            myBeans.put(bean.getName(), bean); 
        } 
        final URI id = URI.create(bean.getName()); 
        return Response.created(id).build(); 
    } 
    @DELETE 
    @Path("{id}") 
    public void remove(@PathParam("id") String id) { 
        myBeans.remove(id); 
    } 
} 
```
在前面的例子中可以看到，我们有类级`@Path`标注。每个标有`@GET`、`@PUT`、`@DELETE`或`@POST`注释的方法都会响应从基础`@Path`开始的对 URI 的调用。此外，我们可以在方法级别上使用`@Path`注释；它将在某种程度上扩展特定方法响应的 URI 路径。在我们的例子中，用 URI 路径`myApp/beans`执行的`HTTP GET`将调用`allBeans()`方法，返回 JSON 格式的 beans 集合。使用`myApp/beans/12` URI 路径执行的`GET`方法将调用`singleBean()`方法，并且`{id}`参数将因为`@PathParam`注释而转移到该方法。在`myApp|beans|12` URI 上调用`HTTP DELETE`方法将执行带有`id`参数值`12`的`remove()`方法。为了给你几乎无限的灵活性，`@Path`注释支持正则表达式。考虑以下示例:
```
package pl.finsys.jaxrs_example 
import javax.ws.rs.GET; 
import javax.ws.rs.Path; 
import javax.ws.rs.PathParam; 