Observe that this reﬂects the strongest possible adver-
sary model, which in principle could be relaxed by imposing
bounds during the preparation phase.
Remark 4: Diﬀerence to Remote Attestation. The
goal of remote attestation is to verify the integrity of re-
mote provers, e.g., over a network. In particular, in practice
a veriﬁer V usually cannot exclude that a malicous prover
may have more computational power than the honest prover.
Therefore, remote attestation schemes usually rely on secrets
shared between the veriﬁer and the honest prover.
This is fundamentally diﬀerent from software attestation
which cannot rely on cryptographic secrets to authenticate
the prover device to V. Hence, as already elaborated, exist-
ing works on software attestation typically assume that V
can authenticate the prover hardware using an out-of-band
channel, such as visual authentication.
5. GENERIC SOFTWARE ATTESTATION
In this section, we formalize a generic software attestation
scheme that captures most existing schemes in the litera-
ture. In particular, we formally deﬁne several aspects and
assumptions, most of them being only informally discussed
or implicitly deﬁned so far.
5.1 Protocol Speciﬁcation
The main components of our generic attestation scheme
(cf. Figure 1) are two deterministic algorithms:
• Memory address generator:
Gen : {0, 1}lg → {0, 1}lg × {0, 1}la , g (cid:55)→ (g(cid:48), a(cid:48))
• Compression function:
Chk : {0, 1}lr × Σ → {0, 1}lr , (r , s) (cid:55)→ r(cid:48)
Here lg, la and lr are the bit length of the state g of Gen,
the memory addresses a and the attestation response r(cid:48), re-
spectively, and Σ is the set of possible state entries (memory
words). Both algorithms are iteratively applied within the
scheme over N ∈ N rounds. For the sake of readability,
we provide an iterative deﬁnition of ChkN : For some r0 ∈
{0, 1}lr and (cid:126)s := (s1, . . . , sN ), we deﬁne rN ← ChkN (c, (cid:126)s) as
ri := Chk(ri−1, si) for i = 1, . . . , N .
Figure 1: The Generic Attestation Scheme Attest
The protocol works as follows: The veriﬁer V sends a ran-
dom attestation challenge (g0, r0) to the prover P, which is
used as seed for Gen and Chk. Speciﬁcally, P iteratively gen-
erates a sequence of memory addresses (a1, . . . , aN ) based
on g0 using Gen. For each i ∈ {1, . . . , N}, P reads the state
entry si = Read(S, ai) at address ai and iteratively com-
putes r(cid:48)i = Chk(r(cid:48)i−1, si) using r(cid:48)0 = r0. Finally, P sends r(cid:48)N
to V, which executes exactly the same computations2 as P
using the state S and compares the ﬁnal result with the re-
sponse r(cid:48)N from P. Eventually, V accepts iﬀ r(cid:48)N = rN and P
responded in time ≤ δ := N (δGen + δRead + δChk), where δGen,
δRead and δChk are upper time-bounds for running Gen, Read
and Chk, respectively, on a genuine and honest prover.
In practice the delay for submitting and receiving mes-
sages needs to be considered. The common approach is to
choose N , the number of rounds, big enough such that this
delay is small compared to the runtime of the protocol. For
simplicity, we assume that this is the case in the following
and hence ignore the time for sending messages.
Remark 5: Correctness. Observe that an honest prover
P always makes an honest veriﬁer V accept since both per-
form exactly the same computations on the same inputs and
the honest prover by assumption requires at most time δ.
Remark 6: Generality of the Protocol. Note that the
basic concept of our generic scheme and several instantia-
tions of this concept for speciﬁc platforms can be found in
the literature on software attestation (cf. Section 2). How-
ever, we aim at abstracting from the particularities of indi-
vidual platforms and instead design and analyze a construc-
tion that is as generic as possible. Further, some existing
software attestation schemes also use the memory addresses
ai and/or the index i as input to the checksum function
Chk. However, since there is a clear dependence between
the index i, the memory address ai and the memory block
si = Read(S, ai) and since the use of simple components
is a primary goal of software attestation, we restrict to the
case where only the memory blocks are used as input to the
checksum function.
5.2 Design Criteria and Properties
Next, we discuss the design criteria of the underlying al-
gorithms and formally deﬁne their properties required later
in the security analysis. Note that, although some of these
2Note that the veriﬁer could also compute the expected re-
sult before, after or in parallel to the protocol.
ProverPVeriﬁerVSSg0,r0Acceptiﬀr0N=rN∧t0−t≤δr0Nfori=1,...,Ndoendforsi←Read(S,ai)fori=1,...,NdoendforStorecurrenttimetStorecurrenttimet0(gi,ai)←Gen(gi−1)r0i←CHK(ri−1,si)si←Read(S,ai)ri←CHK(ri−1,si)(g0,r0)U←{0,1}lg+lr(gi,ai)←Gen(gi−1)r00←r05properties have been informally discussed or implicitly made
in prior work, they have never been formally speciﬁed and
analyzed before.
5.2.1 Implementation of the Core Functionalities
The generic protocol deploys three core functionalities:
Read, Gen and Chk, which of the execution time is of para-
mount importance for the security of software attestation.
Hence, we make the following assumptions that are strongly
dependent on the concrete implementation and prover hard-
ware and are hard to cover in a generic formal framework:
1. Optimality: There is no implementation of Read, Gen
and Chk (or their combination) that is more eﬃcient
(with respect to time and/or memory) than the imple-
mentation used by the honest prover in state S.
2. Atomicity: It is not possible to execute Read, Gen
and Chk only partially, e.g., by omitting some of the
underlying instructions.
We formally cover these assumptions by modelling Read, Gen
and Chk as oracles. That is, whenever P wants, e.g., to ex-
ecute Read(State(P), a), P sends a to the Read-oracle and
receives the corresponding result s. While sending and re-
ceiving messages between P and the oracles are modelled to
take no time, the determination of the response does. More
precisely when P invokes one of these oracles, it takes a cer-
tain amount of time before P gets the result. Within this
time period P is inactive and cannot perform any computa-
tions. We denote the response time of the Read, Gen and
Chk-oracle by δRead, δGen and δChk, respectively. Moreover the
inputs to and the outputs of the oracles need to be stored
in the primary memory of P.
Remark 7: Order of Computations. A consequence of
this modelling approach is that a malicious prover (cid:101)P can
order. For instance, before (cid:101)P can determine si it must ﬁrst
compute the outputs of Gen and Chk only in the correct
determine si−1. Given that concrete instantiations of the
generic scheme are iteratively executed, the limited size of
the primary memory (PM) (see below) and the fact that
accessing the secondary memory requires signiﬁcantly more
time than accessing PM, we consider this assumption to be
reasonable for most practical instantiations.
5.2.2 System-Level Properties
The size and utilization of the primary memory (PM)
plays a fundamental role for assessing the optimality of a
software attestation scheme with regard to the resources
used by a prover (cid:101)P. Therefore, a common assumption is
that PM is just big enough to honestly execute Attest, i.e.,
there is no free PM that could be used otherwise.3
Another crucial assumption of any software attestation
scheme not explicitly made in most previous works is that
the state S should not be compressible into PM. For in-
stance, consider the extreme case where all entries of S con-
tain the same value s. In this case a malicious prover (cid:101)P could
easily determine the correct attestation response by simply
3Possible measures to achieve this are either to choose Gen
and/or Chk accordingly or to execute Gen and/or Chk several
times per round on diﬀerent inputs to occupy more primary
memory.
storing s in PM while having a diﬀerent state State((cid:101)P) (cid:54)= S.
Hence, we require that (cid:101)P should not be able to determine a
randomly selected state entry si of S without accessing the
secondary memory with better probability than guessing:
Deﬁnition 3 (State Incompressibility). For a state S, let
DS denote the probability distribution of S in the following
sense: For any state entry x ∈ Σ it holds that
DS(x) := Pr
x = s|a U← {0, 1}la ∧ s := Read(S, a)
.
(cid:104)
(cid:105)
(cid:105) ≤ γ = max
S is called incompressible if for any algorithm Alg(cid:91)Read that
can be executed by the prover P and that does not invoke
Read, it holds that
(cid:104)(cid:101)s = s|a U← {0, 1}la ∧ s = Read(S, a) ∧(cid:101)s ← Alg(cid:91)Read(a)
Pr
x∈Σ
DS(x).
∧ TimeP (Alg(cid:91)Read) ≤ δRead
5.2.3 Cryptographic Properties
Although it is quite obvious that the security of the soft-
ware attestation scheme depends on the cryptographic prop-
erties of Gen and Chk, these requirements have not been sys-
tematically analyzed and formally speciﬁed before. While it
would be straightforward to model these functions as pseudo-
random number generators (PRNGs) and hash functions (or
even random oracles), respectively, there are some subtle dif-
ferences to the common cryptographic scenario which must
be carefully considered. As we elaborate below, Gen needs
to meet a property which is stronger than the common secu-
rity deﬁnition of cryptographic PRNGs while for Chk a sig-
niﬁcantly weaker condition than the classical security prop-
erties of hash functions is suﬃcient.
Pseudo-Randomness of the Outputs of Gen. To pre-
vent a malicious prover (cid:101)P from using pre-computed attesta-
tion responses, the memory addresses ai generated by Gen
should be “suﬃciently random”.
Ideally, all combinations
should be possible for (a1, . . . , aN ). While this is impossible
from an information-theoretic point of view, the best one
may ask for is that the memory addresses ai generated by
Gen should be computationally indistinguishable from uni-
formly random values within a certain time-bound t:
Deﬁnition 4 (Time-Bounded Pseudo-Randomness of Gen).
Gen : {0, 1}lg → {0, 1}lg +la is called (t, )-pseudo-random if
for any algorithm Alg that can be executed by P in Time(Alg) ≤
t it holds that
(cid:104)
(cid:12)(cid:12)(cid:12) Pr
(cid:104)
− Pr
b = 1|g0
U← {0, 1}lg
∧ (gi, ai) ← Gen(gi−1) : i ∈ {1, . . . , N}
∧ b ← Alg(a1, . . . , aN )
b = 1|ai
U← {0, 1}la : i ∈ {1, . . . , N}
(cid:105)
(cid:105)(cid:12)(cid:12)(cid:12) ≤ .
∧ b ← Alg(a1, . . . , aN )
Observe that this deﬁnition requires that Alg does not know
the seed g0 of Gen, which is not given in the generic soft-
ware attestation scheme.
In principle nothing prevents a
malicious prover (cid:101)P from using g0 to compute the addresses
from random values. The best we can do is to require that (cid:101)P
(a1, . . . , aN ) on its own, making them easily distinguishable
6cannot derive any meaningful information about ai+1 from
gi without investing a certain minimum amount of time.
Speciﬁcally, we assume that an algorithm with input g that
does not execute Gen cannot distinguish (g(cid:48), a(cid:48)) = Gen(g)
from uniformly random values. Formally:
Deﬁnition 5 (Time-Bounded Unpredictability of Gen). Gen :
{0, 1}lg → {0, 1}lg ×{0, 1}la is νGen-unpredictable if for any
algorithm Alg(cid:100)Gen that can be executed by P and that does not
(cid:12)(cid:12)(cid:12) Pr
b = 1|g U← {0, 1}lg ∧ (g(cid:48), a(cid:48)) ← Gen(g)
execute Gen, it holds that
∧ b ← Alg(cid:100)Gen(g, g(cid:48), a(cid:48))
∧ b ← Alg(cid:100)Gen(g, g(cid:48), a(cid:48))
(cid:105)
(cid:105)(cid:12)(cid:12)(cid:12) ≤ νGen.
− Pr
b = 1|g U← {0, 1}lg ∧ (g(cid:48), a(cid:48)) U← {0, 1}lg × {0, 1}la
(cid:104)
(cid:104)
hard for a malicious prover (cid:101)P to replace the correct input
Weakened Pre-image Resistance of Chk. The purpose
of the compression function ChkN is to map the state S of
the prover P to a smaller attestation response rN , which
reduces the amount of data to be sent from P to the veri-
ﬁer V. Observe that the output of ChkN depends also on
the challenge sent by the veriﬁer to avoid simple replay at-
tacks and the pre-computation of attestation responses. A
necessary security requirement on Chk is that it should be
(cid:126)s = (s1, . . . , sN ) to Chk with some other value (cid:126)˜s (cid:54)= (cid:126)s that
yields the same attestation response rN as (cid:126)s. This is similar
to the common notion of second pre-image resistance of cryp-
tographic hash functions. However, due to the time-bound
of the software attestation scheme it is suﬃcient that ChkN
fulﬁlls only a much weaker form of second pre-image resis-
tance since we need to consider only “blind” adversaries who
(in contrast to the classical deﬁnition of second pre-image
resistance) do not know the correct response rN to the ver-
iﬁer’s challenge (g0, r0). The reason is that, as soon as P
knows the correct response rN , he could send it to V and