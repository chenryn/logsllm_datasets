(cid:94)
pi ∧ ¬p4 ∧ ¬p5 ∧ ¬p6 ∧ (cid:94)
which is equivalent to
∧ (
(
i=0,...,3
¬pi ∧ (cid:94)
dti)
i=0,...,3
i=0,...,4
dti ∧ ¬dt5) ∧
at5(u1) ∧ ¬ht3(u1) ∧ ¬ht2(u1))
i=1,...,4
and it identiﬁes those states in which there is a token in
places p4, p5, and p6, task t5 has not yet been executed
whereas tasks t1, ..., t4 have been executed, user u1 has the
right to execute t5 and has executed neither t2 nor t3. This
is exactly the formula labeling node 1 in Figure 3.
e0−→
A symbolic behavior is a sequence of the form P0
e1−→ ··· en−1−→ Pn where Pi is a state formula and ei is
P1
a symbolic event such that (a) P0 ∧ I is satisﬁable, (b) Pi
is logically equivalent to wlp(ei, Pi+1) for i = 0, ..., n − 1,
and (c) Pn is F for I and F formulae characterizing the
initial and ﬁnal states, respectively. The crucial advantage
of symbolic events is the use of variables to represent users
instead of enumerating them. To illustrate, consider a sim-
ple security-sensitive workﬂow with just two tasks t1, t2 such
that t1 should be executed before t2 and there is a SoD con-
straint between them. If the cardinality of the set U of users
is n, then the cardinality of the set of all possible behaviors
is n2−n. By using symbolic events, we can represent all such
t2(u2)−→ P2
behaviors by a single symbolic behavior P0
with the proviso that u1 (cid:54)= u2 where u1, u2 are vari-
ables. Before stating formally this result, we need to in-
troduce the notion of security-sensitive transition system
T = (VCF ∪ VAuth, Ev T ) associated to a symbolic security-
sensitive transition system S = (VCF ∪ VAuth ∪ VUser, Ev S)
and a ﬁnite set U ⊆ U of users:
if the symbolic event
t(ui) : en S → act S is in Ev S, then Ev T contains an event
t(ui) : en → act where u is a user in U , en is the predicate
interpreting the formula obtained from en S by substituting
the variable ui with ui and all other user variables with users
in U (in all possible ways), and act is obtained from act S
by substituting ui with ui.
t1(u1)−→ P1
Theorem 3.1. Let S = (VCF ∪ VAuth ∪ VUser, Ev S) be
a symbolic security-sensitive transition system and T =
(VCF ∪ VAuth, Ev T ) be the associated security-sensitive tran-
sition system for the set U ⊆ U of users. If s0
t1(u1)→
−→ sn is a behavior of T for u0, ..., un−1 in
··· sn−1
t1(u1)−→
U , then there exists a symbolic behavior P0
··· tn−1(un−1)
−→ Pn such that si, vi |= Pi with vi(ui) = ui for
i = 0, ..., n − 1 and sn, vn−1 |= Pn.
t0(u0)−→ P1
t0(u0)→ s1
tn−1(un−1)
This result tells us that a symbolic behavior is an adequate
(and hopefully compact) representation of a set of behav-
iors. The proof is by a standard induction on the length of
the behaviors and exploits the fact that the enforcement of
authorization constraints depends only on two aspects: the
identity of users (via the state variables at’s modeling the
interface to the concrete authorization policy establishing if
a user has the right to execute a task) and the history of
the computation (via the state variables ht’s keeping track
of who has executed which tasks so that SoD and BoD con-
straints can be guaranteed to hold).
Computation of symbolic behaviors. Algorithm 1
computes the set of all possible symbolic behaviors of a sym-
bolic security-sensitive workﬂow. It takes as input the sym-
bolic security-sensitive workﬂow S together with the state
formula F deﬁning the set of ﬁnal states and returns a la-
beled graph RG, called reachability graph, whose set of la-
beled paths is the set of all symbolic behaviors of S ending
with F . The procedure incrementally builds the reachabil-
if subsumed(i,N ,N(cid:48)) then
connect(N(cid:48),i); T BV ← T BV − {i};
Algorithm 1 Building a symbolic reachability graph
Input: S = (VCF ∪ VAuth ∪ VUser, Ev S) and F
Output: RG = (N, λ, E)
1: i ← new(); N ← {i}; E ← ∅; λ[i] ← F ; T BV ← {i};
2: while T BV (cid:54)= ∅ do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14: end while
15: return (N, λ, E);
end if
for all ev ∈ Ev S do
P ← wlp(ev , λ[i]);
if P is satisﬁable then
end for
i ← pickOne(TBV ); TBV ← TBV − {i};
j ← new(); N ← N∪{j}; E ← E∪{(i, ev , j)};
λ[j] ← P ; TBV ← TBV ∪ {j};
end if
ity graph RG by updating the set N of nodes, the set E
of edges, and the labeling function λ from N to state for-
mulae.
Initially (line 1), a new node i is created (by in-
voking the auxiliary function new, which returns a “fresh”
node—i.e. distinct from any other node already in N —at
each invocation), N is assigned to the singleton containing
node i, which is also labeled (via λ) by the ﬁnal formula
F . The algorithm also maintains the set TBV of nodes
to be visited, which is made equal to N . Then, the main
loop (lines 2–14) is entered by checking if there are some
nodes to be visited (line 2). At each iteration, it is ﬁrst
(line 3) checked whether the set of states identiﬁed by the
wlp of the formula λ[i] with respect to the set Ev S of sym-
bolic events is included in the union of the sets of states
that have been already generated. This is done by invoking
subsumed(i,N ,N(cid:48)) which returns true iﬀ, for each symbolic
event ev ∈ Ev S, there exists a sub-set N(cid:48) of N − {i} and
j∈N(cid:48) λ[j] (notice that the
third argument N(cid:48) is passed by reference).
If this is the
case, we can avoid to add a new node ν to N labeled by
wlp(ev , λ[i]) as the symbolic behaviors arriving in ν have al-
ready been generated when visiting the nodes in N(cid:48). Thus,
we can delete node i from TBV , add a new node j labeled
by wlp(ev , λ[i]) together with an edge from j to i labeled
by ev and—by invoking the auxiliary function connect—
duplicate the initial part of each path passing through a
node n(cid:48) in N(cid:48) by replacing n(cid:48) with j provided that the newly
created path is a symbolic behavior of the symbolic transi-
tion system. To illustrate, consider node 7 in Figure 3 (col-
ored in red): wlp(ti(u), λ[7]) is unsatisﬁable for i = 1, 3, 4, 5
(and can thus be ignored) whereas wlp(t2(u3), λ[7]) is satisﬁ-
able and implies λ[13]; this is checked by invoking subsumed
wlp(ev , λ[i]) implies the formula(cid:87)
with N(cid:48) = {13}. Thus, we create a new node (say) 29,
with λ[29] equal to wlp(t2(u3), λ[7]), draw an edge from
29 to 7 with label t2(u3), duplicate the initial parts of the
t1(u3)−→ λ[13] and
t1(u4)−→ λ[13]) while replacing 13 with 29 (thus obtaining
t1(u3)−→ λ[29] and λ[18]
t1(u4)−→ λ[29]), and then check that
paths passing through node 13 (namely λ[17]
λ[18]
λ[17]
the newly created paths, namely
λ[17]
λ[18]
t2(u3)−→ λ[7]
t2(u3)−→ λ[7]
t4(u1)−→ λ[4]
t4(u1)−→ λ[4]
t3(u2)−→ λ[4]
t3(u2)−→ λ[4]
t1(u3)−→ λ[29]
t1(u4)−→ λ[29]
t5(u1)−→ λ[0] and
t5(u1)−→ λ[0] ,
are symbolic behaviors. It turns out that only the latter is
so, since the former violates the SoD constraint between t1
t2(u3)−→
and t2. We thus add only the path λ[18]
λ[7] to the graph in Figure 3. Nodes 5, 10, and 12 are
handled similarly. These extensions to the graph in Figure 3
are omitted to keep it readable.
t1(u4)−→ λ[29]
If node i is not subsumed by those in N (i.e. sub-
sumed(i,N ) returns false), we compute the wlp with respect
to all symbolic events (inner loop 6–11).
I.e., for each ev
in Ev S, we compute wlp(ev , λ[i]) labeling the node i being
visited (line 6) and verify if it deﬁnes a set of states which
is non-empty, by checking the satisﬁability of the resulting
formula (line 7).
If this is the case, we add a fresh node
j, labeled by the wlp just computed, to N , an edge from
i to j labeled by the name ev of the symbolic event ev ,
and add the newly created node j to the set TBV (lines 8
and 9). For instance, when computing the wlp of the for-
mula labeling node 0 in Figure 3, we found out that only
the symbolic event named t5(u1) generates a formula de-
noting a non-empty set of states and thus we added node 1
labeled by such a formula and an edge from 1 to 0 labeled by
t5(u1). After exiting the inner loop, if the set TBV of nodes
to be visited is non-empty, we consider another node to be
visited by invoking the auxiliary function pickOne(TBV )
which non-deterministically selects an element from TBV
(when this is empty, pickOne returns a distinguished ele-
ment), which is then deleted, and we start the main loop
again.
Theorem 3.2. Let I be the initial state formula. If Al-
gorithm 1 returns the reachability graph RG when taking
as input the symbolic security-sensitive transition system
S = (VCF ∪ VAuth ∪ VUser, Ev S) and the ﬁnal state for-
mula F , then the set of all symbolic behaviors of S is the
set of labeled paths in RG starting with a node labeled by a
formula whose conjunction with I is satisﬁable and ending
with a node labeled by F .
The proof of this theorem uses the deﬁnition of wlp and
the properties discussed above about the auxiliary functions
subsumed and connect.
It is possible to show that Algo-
rithm 1 always terminates by adapting the results in [8].
3.2 On-line
Theorem 3.2 implies that starting from an initial state
(i.e. one satisfying the initial formula I) in the reachabil-
ity graph computed by Algorithm 1, it is always possible
to reach a ﬁnal state (i.e. one satisfying the ﬁnal formula
F ). If no event can be enabled inﬁnitely often without be-
ing executed—called strong fairness—then a ﬁnal state is
eventually reached.
(As observed in [25], the assumption
of strong fairness is reasonable in the context of workﬂow
management since decisions to execute tasks are under the
responsibility of applications or humans.) This is the key
to prove the following result, underlying the correctness of
the automated technique—to be described below—for ex-
tracting (part of) the monitor from the reachability graph
computed by Algorithm 1.
Theorem 3.3. Let S = (VCF ∪ VAuth ∪ VUser, Ev S) be
a symbolic security-sensitive transition system and T =
(VCF ∪ VAuth, Ev T ) be the associated security-sensitive tran-
sition system for the ﬁnite set U ⊆ U of users. Fur-
thermore, let RG = (N, λ, E) be the symbolic reachabil-
ity graph computed by Algorithm 1 when taking as input
S and a ﬁnal state formula F .
If the state s satisﬁes a
formula λ[i] for some i ∈ N , then there exists a behavior
−→ sn of T such that (i)
s0
s0 = s, (ii) sn satisﬁes F , and (iii) (i, t(x), j) ∈ E with
t0 = t and s0(x) = u0.
t1(u1)→ ··· sn−1
t0(u0)→ s1
tn−1(un−1)
Thus, if T is in state s and we want to know if a certain user
u0 can execute task t0 while guaranteeing that the authoriza-
tion constraints are satisﬁed and the workﬂow terminates,
it is suﬃcient to ﬁnd a node of the reachability graph that
is satisﬁed by the s and one of the outgoing edges is labeled
by t0. Indeed, this is exactly the task a monitor is supposed
to perform! To make this operational, we observe that we