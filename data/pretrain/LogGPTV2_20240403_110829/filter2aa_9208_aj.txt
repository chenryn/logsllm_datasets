get somewhat similar but locale dependent date strings, set up your
locale environment variables appropriately (please see perllocale)
and try for example:
.Sp
.Vb 2
\&    use POSIX qw(strftime);
\&    $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;
.Ve
.Sp
Note that the \f(CW%a\fR and \f(CW%b\fR escapes, which represent the short forms
of the day of the week and the month of the year, may not necessarily
be three characters wide in all locales.
.IP "goto \s-1LABEL\s0" 8
.IX Item "goto LABEL"
.PD 0
.IP "goto \s-1EXPR\s0" 8
.IX Item "goto EXPR"
.IP "goto &NAME" 8
.IX Item "goto &NAME"
.PD
The \f(CW\*(C`goto\-LABEL\*(C'\fR form finds the statement labeled with \s-1LABEL\s0 and resumes
execution there.  It may not be used to go into any construct that
requires initialization, such as a subroutine or a \f(CW\*(C`foreach\*(C'\fR loop.  It
also can't be used to go into a construct that is optimized away,
or to get out of a block or subroutine given to \f(CW\*(C`sort\*(C'\fR.
It can be used to go almost anywhere else within the dynamic scope,
including out of subroutines, but it's usually better to use some other
construct such as \f(CW\*(C`last\*(C'\fR or \f(CW\*(C`die\*(C'\fR.  The author of Perl has never felt the
need to use this form of \f(CW\*(C`goto\*(C'\fR (in Perl, that is\*(--C is another matter).
(The difference being that C does not offer named loops combined with
loop control.  Perl does, and this replaces most structured uses of \f(CW\*(C`goto\*(C'\fR
in other languages.)
.Sp
The \f(CW\*(C`goto\-EXPR\*(C'\fR form expects a label name, whose scope will be resolved
dynamically.  This allows for computed \f(CW\*(C`goto\*(C'\fRs per \s-1FORTRAN\s0, but isn't
necessarily recommended if you're optimizing for maintainability:
.Sp
.Vb 1
\&    goto ("FOO", "BAR", "GLARCH")[$i];
.Ve
.Sp
The \f(CW\*(C`goto\-&NAME\*(C'\fR form is quite different from the other forms of
\&\f(CW\*(C`goto\*(C'\fR.  In fact, it isn't a goto in the normal sense at all, and
doesn't have the stigma associated with other gotos.  Instead, it
exits the current subroutine (losing any changes set by \fIlocal()\fR) and
immediately calls in its place the named subroutine using the current
value of \f(CW@_\fR.  This is used by \f(CW\*(C`AUTOLOAD\*(C'\fR subroutines that wish to
load another subroutine and then pretend that the other subroutine had
been called in the first place (except that any modifications to \f(CW@_\fR
in the current subroutine are propagated to the other subroutine.)
After the \f(CW\*(C`goto\*(C'\fR, not even \f(CW\*(C`caller\*(C'\fR will be able to tell that this
routine was called first.
.Sp
\&\s-1NAME\s0 needn't be the name of a subroutine; it can be a scalar variable
containing a code reference, or a block which evaluates to a code
reference.
.IP "grep \s-1BLOCK\s0 \s-1LIST\s0" 8
.IX Item "grep BLOCK LIST"
.PD 0
.IP "grep \s-1EXPR\s0,LIST" 8
.IX Item "grep EXPR,LIST"
.PD
This is similar in spirit to, but not the same as, \fIgrep\fR\|(1) and its
relatives.  In particular, it is not limited to using regular expressions.
.Sp
Evaluates the \s-1BLOCK\s0 or \s-1EXPR\s0 for each element of \s-1LIST\s0 (locally setting
\&\f(CW$_\fR to each element) and returns the list value consisting of those
elements for which the expression evaluated to true.  In scalar
context, returns the number of times the expression was true.
.Sp
.Vb 1
\&    @foo = grep(!/^#/, @bar);    # weed out comments
.Ve
.Sp
or equivalently,
.Sp
.Vb 1
\&    @foo = grep {!/^#/} @bar;    # weed out comments
.Ve
.Sp
Note that \f(CW$_\fR is an alias to the list value, so it can be used to
modify the elements of the \s-1LIST\s0.  While this is useful and supported,
it can cause bizarre results if the elements of \s-1LIST\s0 are not variables.
Similarly, grep returns aliases into the original list, much as a for
loop's index variable aliases the list elements.  That is, modifying an
element of a list returned by grep (for example, in a \f(CW\*(C`foreach\*(C'\fR, \f(CW\*(C`map\*(C'\fR
or another \f(CW\*(C`grep\*(C'\fR) actually modifies the element in the original list.
This is usually something to be avoided when writing clear code.
.Sp
See also \*(L"map\*(R" for a list composed of the results of the \s-1BLOCK\s0 or \s-1EXPR\s0.
.IP "hex \s-1EXPR\s0" 8
.IX Item "hex EXPR"
.PD 0
.IP "hex" 8
.IX Item "hex"
.PD
Interprets \s-1EXPR\s0 as a hex string and returns the corresponding value.
(To convert strings that might start with either 0, 0x, or 0b, see
\&\*(L"oct\*(R".)  If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.Sp
.Vb 2
\&    print hex '0xAf'; # prints '175'
\&    print hex 'aF';   # same
.Ve
.Sp
Hex strings may only represent integers.  Strings that would cause
integer overflow trigger a warning.  Leading whitespace is not stripped,
unlike \fIoct()\fR.
.IP "import" 8
.IX Item "import"
There is no builtin \f(CW\*(C`import\*(C'\fR function.  It is just an ordinary
method (subroutine) defined (or inherited) by modules that wish to export
names to another module.  The \f(CW\*(C`use\*(C'\fR function calls the \f(CW\*(C`import\*(C'\fR method
for the package used.  See also \*(L"use\*(R", perlmod, and Exporter.
.IP "index \s-1STR\s0,SUBSTR,POSITION" 8
.IX Item "index STR,SUBSTR,POSITION"
.PD 0
.IP "index \s-1STR\s0,SUBSTR" 8
.IX Item "index STR,SUBSTR"
.PD
The index function searches for one string within another, but without
the wildcard-like behavior of a full regular-expression pattern match.
It returns the position of the first occurrence of \s-1SUBSTR\s0 in \s-1STR\s0 at
or after \s-1POSITION\s0.  If \s-1POSITION\s0 is omitted, starts searching from the
beginning of the string.  The return value is based at \f(CW0\fR (or whatever
you've set the \f(CW$[\fR variable to\*(--but don't do that).  If the substring
is not found, returns one less than the base, ordinarily \f(CW\*(C`\-1\*(C'\fR.
.IP "int \s-1EXPR\s0" 8
.IX Item "int EXPR"
.PD 0
.IP "int" 8
.IX Item "int"
.PD
Returns the integer portion of \s-1EXPR\s0.  If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
You should not use this function for rounding: one because it truncates
towards \f(CW0\fR, and two because machine representations of floating point
numbers can sometimes produce counterintuitive results.  For example,
\&\f(CW\*(C`int(\-6.725/0.025)\*(C'\fR produces \-268 rather than the correct \-269; that's
because it's really more like \-268.99999999999994315658 instead.  Usually,
the \f(CW\*(C`sprintf\*(C'\fR, \f(CW\*(C`printf\*(C'\fR, or the \f(CW\*(C`POSIX::floor\*(C'\fR and \f(CW\*(C`POSIX::ceil\*(C'\fR
functions will serve you better than will \fIint()\fR.
.IP "ioctl \s-1FILEHANDLE\s0,FUNCTION,SCALAR" 8
.IX Item "ioctl FILEHANDLE,FUNCTION,SCALAR"
Implements the \fIioctl\fR\|(2) function.  You'll probably first have to say
.Sp
.Vb 1
\&    require "ioctl.ph"; # probably in /usr/local/lib/perl/ioctl.ph
.Ve
.Sp
to get the correct function definitions.  If \fIioctl.ph\fR doesn't
exist or doesn't have the correct definitions you'll have to roll your
own, based on your C header files such as \fI\fR.
(There is a Perl script called \fBh2ph\fR that comes with the Perl kit that
may help you in this, but it's nontrivial.)  \s-1SCALAR\s0 will be read and/or
written depending on the FUNCTION\*(--a pointer to the string value of \s-1SCALAR\s0
will be passed as the third argument of the actual \f(CW\*(C`ioctl\*(C'\fR call.  (If \s-1SCALAR\s0
has no string value but does have a numeric value, that value will be
passed rather than a pointer to the string value.  To guarantee this to be
true, add a \f(CW0\fR to the scalar before using it.)  The \f(CW\*(C`pack\*(C'\fR and \f(CW\*(C`unpack\*(C'\fR
functions may be needed to manipulate the values of structures used by
\&\f(CW\*(C`ioctl\*(C'\fR.
.Sp
The return value of \f(CW\*(C`ioctl\*(C'\fR (and \f(CW\*(C`fcntl\*(C'\fR) is as follows:
.Sp
.Vb 4
\&        if OS returns:          then Perl returns:
\&            -1                    undefined value
\&             0                  string "0 but true"
\&        anything else               that number
.Ve
.Sp
Thus Perl returns true on success and false on failure, yet you can
still easily determine the actual value returned by the operating
system:
.Sp
.Vb 2
\&    $retval = ioctl(...) || -1;
\&    printf "System returned %d\en", $retval;
.Ve
.Sp
The special string "\f(CW0\fR but true" is exempt from \fB\-w\fR complaints
about improper numeric conversions.
.Sp
Here's an example of setting a filehandle named \f(CW\*(C`REMOTE\*(C'\fR to be
non-blocking at the system level.  You'll have to negotiate \f(CW$|\fR
on your own, though.
.Sp
.Vb 1
\&    use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);
.Ve
.Sp
.Vb 2
\&    $flags = fcntl(REMOTE, F_GETFL, 0)
\&                or die "Can't get flags for the socket: $!\en";
.Ve
.Sp
.Vb 2
\&    $flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
\&                or die "Can't set flags for the socket: $!\en";
.Ve
.IP "join \s-1EXPR\s0,LIST" 8
.IX Item "join EXPR,LIST"
Joins the separate strings of \s-1LIST\s0 into a single string with fields
separated by the value of \s-1EXPR\s0, and returns that new string.  Example:
.Sp
.Vb 1
\&    $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);
.Ve
.Sp
Beware that unlike \f(CW\*(C`split\*(C'\fR, \f(CW\*(C`join\*(C'\fR doesn't take a pattern as its
first argument.  Compare \*(L"split\*(R".
.IP "keys \s-1HASH\s0" 8
.IX Item "keys HASH"
Returns a list consisting of all the keys of the named hash.
(In scalar context, returns the number of keys.)
.Sp
The keys are returned in an apparently random order.  The actual
random order is subject to change in future versions of perl, but it
is guaranteed to be the same order as either the \f(CW\*(C`values\*(C'\fR or \f(CW\*(C`each\*(C'\fR
function produces (given that the hash has not been modified).  Since
Perl 5.8.1 the ordering is different even between different runs of
Perl for security reasons (see \*(L"Algorithmic Complexity Attacks\*(R" in perlsec).
.Sp
As a side effect, calling \fIkeys()\fR resets the \s-1HASH\s0's internal iterator,
see \*(L"each\*(R".
.Sp
Here is yet another way to print your environment:
.Sp
.Vb 5
\&    @keys = keys %ENV;
\&    @values = values %ENV;
\&    while (@keys) {
\&        print pop(@keys), '=', pop(@values), "\en";
\&    }
.Ve
.Sp
or how about sorted by key:
.Sp
.Vb 3
\&    foreach $key (sort(keys %ENV)) {
\&        print $key, '=', $ENV{$key}, "\en";
\&    }
.Ve
.Sp
The returned values are copies of the original keys in the hash, so
modifying them will not affect the original hash.  Compare \*(L"values\*(R".
.Sp
To sort a hash by value, you'll need to use a \f(CW\*(C`sort\*(C'\fR function.
Here's a descending numeric sort of a hash by its values:
.Sp
.Vb 3
\&    foreach $key (sort { $hash{$b}  $hash{$a} } keys %hash) {
\&        printf "%4d %s\en", $hash{$key}, $key;
\&    }
.Ve
.Sp
As an lvalue \f(CW\*(C`keys\*(C'\fR allows you to increase the number of hash buckets
allocated for the given hash.  This can gain you a measure of efficiency if
you know the hash is going to get big.  (This is similar to pre-extending
an array by assigning a larger number to $#array.)  If you say
.Sp
.Vb 1
\&    keys %hash = 200;
.Ve
.Sp
then \f(CW%hash\fR will have at least 200 buckets allocated for it\-\-256 of them,