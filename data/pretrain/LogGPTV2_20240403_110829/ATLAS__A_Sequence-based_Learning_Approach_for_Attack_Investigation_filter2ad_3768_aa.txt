title:ATLAS: A Sequence-based Learning Approach for Attack Investigation
author:Abdulellah Alsaheel and
Yuhong Nan and
Shiqing Ma and
Le Yu and
Gregory Walkup and
Z. Berkay Celik and
Xiangyu Zhang and
Dongyan Xu
ATLAS: A Sequence-based Learning Approach 
for Attack Investigation
Abdulellah Alsaheel and Yuhong Nan, Purdue University; Shiqing Ma, 
Rutgers University; Le Yu, Gregory Walkup, Z. Berkay Celik, Xiangyu Zhang, 
and Dongyan Xu, Purdue University
https://www.usenix.org/conference/usenixsecurity21/presentation/alsaheel
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.ATLAS: A Sequence-based Learning Approach for Attack Investigation
Abdulellah Alsaheel∗1, Yuhong Nan∗1, Shiqing Ma2, Le Yu1, Gregory Walkup1,
Z. Berkay Celik1, Xiangyu Zhang1, and Dongyan Xu1
1Purdue University, {aalsahee, nan1, yu759, gwalkup, zcelik, xyzhang, dxu}@purdue.edu
2Rutgers University, PI:EMAIL
Abstract
Advanced Persistent Threats (APT) involve multiple attack
steps over a long period, and their investigation requires anal-
ysis of myriad logs to identify their attack steps, which are
a set of activities undertaken to run an APT attack. How-
ever, on a daily basis in an enterprise, intrusion detection
systems generate many threat alerts of suspicious events (at-
tack symptoms). Cyber analysts must investigate such events
to determine whether an event is a part of an attack. With
many alerts to investigate, cyber analysts often end up with
alert fatigue, causing them to ignore a large number of alerts
and miss true attack events. In this paper, we present ATLAS,
a framework that constructs an end-to-end attack story from
off-the-shelf audit logs. Our key observation is that different
attacks may share similar abstract attack strategies, regardless
of the vulnerabilities exploited and payloads executed. ATLAS
leverages a novel combination of causality analysis, natu-
ral language processing, and machine learning techniques to
build a sequence-based model, which establishes key patterns
of attack and non-attack behaviors from a causal graph. At
inference time, given a threat alert event, an attack symptom
node in a causal graph is identiﬁed. ATLAS then constructs
a set of candidate sequences associated with the symptom
node, uses the sequence-based model to identify nodes in a se-
quence that contribute to the attack, and uniﬁes the identiﬁed
attack nodes to construct an attack story. We evaluated ATLAS
with ten real-world APT attacks executed in a realistic vir-
tual environment. ATLAS recovers attack steps and construct
attack stories with an average of 91.06% precision, 97.29%
recall, and 93.76% F1-score. Through this effort, we provide
security investigators with a new means of identifying the
attack events that make up the attack story.
∗ The authors contributed equally.
1
Introduction
Forensic analysis approaches collect diverse audit logs from
multiple hosts, applications, and network interfaces. The mas-
sive volumes of logs are often analyzed ofﬂine or monitored in
real-time to debug system failures and identify sophisticated
threats and vulnerabilities. For instance, recent works con-
struct causal dependency graphs from audit logs [21, 27] and
use query systems to locate key attack phases (e.g., a compro-
mised process or malicious payload) [16,31]. Several research
systems aimed to extend machine learning (ML) techniques
to extract features/sequences from logs to automate intrusion
and failure detection [8, 36], while others built techniques
to discover associations among disparate log events through
event correlation [44]. Yet, while security investigators desire
to identify the attack steps, which are the speciﬁc activities
undertaken to conduct an attack, these approaches are largely
unable to precisely locate the critical attack steps which can
efﬁciently highlight the end-to-end attack story.
In this paper, we aim at identifying the key entities (nodes)
from audit logs that help cyber analysts construct the critical
steps of an APT attack. We introduce ATLAS, a framework for
attack story recovery that integrates natural language process-
ing (NLP) and deep learning techniques into data provenance
analysis to identify attack and non-attack sequences. ATLAS
operates in three phases: (a) it processes the system logs
and builds its own optimized causal dependency graph, (b) it
constructs semantically-augmented sequences–timestamped
events–from the causal graph through NLP techniques, and
(c) it learns a sequence-based model that represents the attack
semantics, which helps to recover key attack entities describ-
ing the attack story at inference time. These phases do not
impose additional overhead on a running system, and different
audit logs can be easily integrated into the ATLAS log parser
to construct causal graphs and obtain precise sequences and
models. During attack investigation, ATLAS enables cyber
analysts to identify those key attack steps through an attack
symptom event (alert), based on those sequences that share se-
mantically similar attack patterns to the ones it had previously
USENIX Association
30th USENIX Security Symposium    3005
learned. Such knowledge helps cyber analysts substantially
save time when investigating large causal graphs, and aids
them in constructing the attack story from a limited number
of attack symptoms.
Our approach is based on the insight that crucial steps of
different attacks in a causal dependency graph may share simi-
lar patterns. The patterns, transformed into sequences through
NLP techniques (i.e., lemmatization [37] and word embed-
ding [30]) that group together various inﬂected forms of rela-
tions between attack and non-attack entities. Such a sequence-
based representation naturally ﬁts the training of a model,
which equips the model with deeper memories with different
causal relations, and in turn, improves the sequence-model
accuracy in identifying attack steps from unknown audit logs.
However, there are three key challenges to this approach: (a)
the causal graph is often large and complex, which makes
sequence construction difﬁcult, (b) it requires a means to
precisely construct the sequences to model legitimate and sus-
picious activities effectively, and (c) an automated approach
is needed to identify the attack events from a given attack
symptom. To address these issues, ATLAS uses customized
graph-optimization algorithms to reduce the graph complex-
ity, implements a novel technique to extract the sequences of
attack patterns from events, and performs attack investigation
through an attack symptom to recover attack events that help
comprehensively build the attack story.
We implemented and deployed ATLAS to investigate real-
world attacks in a controlled environment. We developed four
single-host and six multi-host attacks through their detailed
APT campaign reports [17, 18, 22, 28, 34, 39]. We collected
around 6.7 GB of audit log data, including over 196K entities
(e.g., unique ﬁles, processes, and IP addresses) and 2.5 mil-
lion events spanning 24 hours for attack investigation. Our
evaluation results demonstrate that ATLAS achieves an aver-
age 91.06% precision and 97.29% recall in identifying attack
entities.2 In this work, we make the following contributions:
• We introduce ATLAS, a framework for attack story re-
covery, which leverages natural language processing and
sequence-based model learning techniques to help cyber
analysts recover attack steps from audit logs.
• We present a novel sequence representation that abstracts
the attack and non-attack semantic patterns through
lemmatization and word embeddings. The sequences
allow ATLAS to build an effective sequence-based model
to identify attack events that make up the attack story.
• We validate ATLAS on ten realistic APT attacks devel-
oped through their real-world reports in a controlled
environment. The results show that ATLAS identiﬁes the
key attack entries for an attack story with high accuracy
and minimal overhead.
2ATLAS and the audit logs used in our evaluations are available at
https://github.com/purseclab/ATLAS.
2 Motivation and Deﬁnitions
Motivating Example. We describe a real-world APT at-
tack [18] that we use throughout the paper. An attacker sends
a malicious Microsoft Word ﬁle (contract.doc) by email
to a targeted user in an enterprise. The user is deceived into
downloading and opening the Word ﬁle from Gmail using
Firefox. The document contains a piece of malicious code that
exploits a vulnerable Microsoft Word (winword.exe) and
issues HTTPS requests to download a malicious Microsoft
HTA script (template.hta). This script executes a malicious
Visual Basic script (maintenance.vbs) that includes Power-
Shell commands installing a backdoor to exﬁltrate sensitive
ﬁles. Lastly, the attacker laterally moves to other hosts.
Attack Investigation. The attack investigation often begins
by collecting data about the attack from the audit logs, such
as system events, DNS queries, and browser events. Attack
investigation tools often represent the audit logs in the form of
a causal graph (or provenance graph) that serves as a forensic
tool, allowing security investigators to perform root cause
analysis, and better understand the nature of an attack. Most
prior research (e.g., [11, 50]) recovers the attack story from
the causal graph as a sub-graph, where nodes and edges in
this graph have causality relations with the attack symptom(s)
for starting attack investigation. Figure 1 (a) shows a causal
graph of our example attack scenario generated by those tools.
The red dashed arrow represents the alert event (α, a sus-
picious network connection) that the attack investigation is
started from and the red dashed rectangular area illustrates
the recovered attack subgraph.
As detailed by a number of recent works [10, 16, 31], such
graphs are, however, still very large and difﬁcult to inter-
pret in practice even with different graph-optimization tech-
niques applied. These works largely rely on heuristics or
hard-coded rules, which are time-consuming to develop and
maintain. Thus, a domain-knowledge expert is required to
constantly update those rules to cover newly developed at-
tacks. ATLAS however, only requires more attack training
data to learn new attack patterns. Others proposed anomaly-
based approaches [8, 9, 11, 12, 50] that learn user behavior and
identify any behavior deviates from it as an anomaly. While
anomaly-based approaches can identify unknown attacks, they
can have many false positives as the user behavior changes
through time. To address this issue, ATLAS aims to learn both
attack patterns and user behavior to identify the similarities
and differences between the two. Similar to ATLAS, learning-
based approaches [36, 42, 43] use ML algorithms to model
attack events from logs. While these approaches can effec-
tively reduce the number of log entries, a signiﬁcant amount
of manual effort is still required to ﬁnd a high-level view of
the attack events. To address this issue, ATLAS investigation
aims to identify attack key entities (nodes), which enables it
to automatically identify a subset of associated attack events.
ATLAS Approach. ATLAS is motivated by the observation
3006    30th USENIX Security Symposium
USENIX Association
Figure 1: A real-world APT attack scenario reported by FireEye [18]. (a) shows a causal graph generated by prior approaches
[11, 50], the red dashed area represents the attack activities reported by those approaches (some nodes and edges were omitted
for brevity). (b) shows the attack story recovered by ATLAS as a temporal sequence of the attack steps, and (c) shows a concise
causal graph generated by ATLAS that describes the complete attack details.
that an APT attack can be summarized as a temporal sequence
of attack phases obtained from audit logs, such as the steps
1-14 illustrated in Figure 1 (b) similar to the attack steps de-
scribed in natural language. These attack steps often ﬁt in
speciﬁc contexts as unique sequences representing the se-
mantics of an attack, which can be differentiated from those
normal activities in audit logs. Such a sequence-based attack
representation naturally ﬁts the training of a model to identify
similar attack steps across different APT instances as they of-
ten share similar patterns regardless of their log-level details.
ATLAS, given an attack symptom node (a malicious IP address
that alert event α includes) at inference time, extracts a set
of candidate sequences associated with symptom node, and
uses a sequence-based model to identify which of those nodes
in the sequences contribute to the attack. Thereafter, it uses
identiﬁed attack nodes to construct the attack story, which
includes events of the identiﬁed attack nodes, thus making
attack investigation more concise and easier to interpret by
investigators. Figure 1 (c) illustrates the attack story recov-
ered by ATLAS for the motivating example, which includes
the complete key attack steps of the example attack. This
process signiﬁcantly reduces manual efforts for attack investi-
gation from large causal graphs, which excludes events that
do not contribute to the attack and reduce the time needed to
investigate large causal graphs.
2.1 Deﬁnitions
We formally deﬁne key terms used throughout (see Figure 2)
and present the threat model.
Causal Graph. A Causal Graph G is a data structure extracted
from audit logs and often used in provenance tracking, indi-
cating the causality relations among subjects (e.g., processes)
Figure 2: Illustration of causal graph, neighborhood graph,
events, and sequences.
and objects (e.g., ﬁles or connections). The causal graph con-
sists of nodes, which represent subjects and objects, connected
with edges, which represent actions (e.g., read or connect) be-
tween subjects and objects. We consider here a directed cyclic
causal graph, and its edges point from a subject to an object.
Entity. An entity e is a unique system subject or object ex-
tracted from the causal graph where it is represented as a
node 3. The entities we consider include processes, ﬁles, and
network connections (i.e., IP addresses and domain names).
For instance, winword.exe_21 is a subject that represents a
process instance of MS Word application with a process name
and ID, and 192.10.0.1:80 is an object that represents an
IP address with a port number.
Neighborhood Graph. Given a causal graph, two nodes u and
v are said to be neighbors if they are connected by an edge.
The neighborhood of a node n is the subgraph of G composed
of the node n and edges connecting neighbor nodes with the
node n. Similarly, given a set of nodes {n1, n2, . . . , nn}, we
3We use “entity” and “node” interchangeably across the paper. The term
“node” is speciﬁcally used when we explain the structure of the causal graph.
USENIX Association
30th USENIX Security Symposium    3007
αbackdoorfirefox.exewinword.exewininit.exeExplorer.exeoutlook.exeservices.exesvchost.execontract.doctemplate.hta1.2.3.4mshta.execmd.exepowershell.exebackdoor.exeAttack other hosts5.6.7.8file2.pdfExplorer.exeOther pdf filesservices.exefirefox.exewinword.execontract.doctemplate.hta1.2.3.4mshta.execmd.exepowershell.exebackdoor.exeAttack other hostsbackdoorsvchost.exeαall exfiltrated pdf filesmaintenance.vbs1cSystem dynamic library files (e.g., kernel32.dll)be1e2e3e5e4e9e7e8e10e11e12e6e13e20e24e25e26e21e22e28e15e17e18e19e56e29e38e40e39e27e33e34e35e36e37e42e48e49e50e51e52e53e54e55e43e44e47e45e46e41e14e16maintenance.vbse30e31e5e7e12e11e16e15e56e14e23e28e29e30e205.6.7.8firefox.exeWritecontract.docwinword.exeReadcontract.docwinword.exeConnect1.2.3.4winword.exeWritetemplate.htacmd.exeForkmshta.exemshta.exeReadtemplate.htapowershell.exeWritemaintenance.vbspowershell.exeForkcmd.exee23e21powershell.exeExecutemaintenance.vbspowershell.exeWritebackdoor.exesvchost.exeReadbackdoor.exesvchost.exeForkbackdoorbackdoorReadPDF filesbackdoorConnect5.6.7.8234567981011121314aFigure 3: Overview of ATLAS architecture.
extract one uniﬁed neighborhood graph that includes all nodes
and edges connecting them to their neighbors.
3 Approach Overview
Event. An event ε is a quartet (src, action, dest, t), the
source (src) and destination (dest) are two entities con-
nected with an action. The t is the event timestamp
that shows when an event occurred. Given an entity e,
its events can be extracted from e neighborhood graph,
which includes all actions associated with e’s neighbors.
For example, given an entity Firefox.exe and a neigh-
borhood graph that includes an action open and times-
tamp t from node Firefox.exe to node Word.doc, then
(Firefox.exe, open, Word.doc, t) is an event where a Fire-
fox process opens a Word ﬁle at time t.
Sequence. Given an entity e, a sequence S can be extracted
from a causal graph. The sequence S includes all events of
entity e’s neighborhood graph in a temporal order, such that
S{e} := {ε1, ε2, . . . , εn}. Similarly, if a set of entities are given,
we can extract a sequence that includes all events from their
uniﬁed neighborhood graph.
Figure 2 (a) illustrates a causal graph with six enti-
ties {eA, eB, . . . , eF}. Figure 2 (b) shows the neighborhood
graph of eB that includes node B, neighbor nodes {A, C}
and their connecting edges {EAB, EBC}. Similarly, the neigh-
borhood graph of entities set {eB, eC} includes the nodes
{A, B, C, D, E} and edges {EAB, EBC, ECD, ECE} shown in Fig-
ure 2 (b). The events of entity eB is εAB =
and εBC = shown in Figure 2 (c). The event
sequence from the entity set {eB, eC} is shown in Figure 2 (d).
Threat Model and Assumptions. We assume the underlying
OS and the auditing applications are part of the trusted com-
puting base (TCB) similar to prior research on provenance
tracking [2, 35]. Hence, the audit logs used to construct the
causal graph are tamperproof. We consider that the system is
benign at the outset, and the attack origin is external to the
enterprise, where the attacker uses remote network access to
inﬁltrate the systems. The attack goal is to exﬁltrate sensitive
data via a set of actions such as information gathering, user
manipulation, vulnerable software exploitation, injecting ma-
licious payloads, installing backdoors, and laterally moving
to other hosts to perform similar attack actions.
ATLAS, an attack investigation tool, integrates natural lan-
guage processing and deep learning techniques into data
provenance analysis to model sequence-based attack and non-
attack behavior. Figure 3 gives an overview of the ATLAS
architecture. It mainly consists of two components: sequence-
based model learning (a), and attack investigation (b).
During sequence-based model learning (a), ATLAS pro-
cesses system and application (e.g., browser) logs and builds a
causal graph ( 1 ). Here, we implement a set of pre-processing
optimizations to reduce the burden of obtaining complex
sequences. These optimizations do not affect ATLAS’s se-
quence semantics logic and improve the efﬁcacy of sequence
extraction from large-scale causal graphs. ATLAS then con-
structs sequences of different attack (suspicious or malicious)
and non-attack (normal) activities from the optimized causal
graph in order to model their behaviors ( 2 ). The constructed
non-attack sequences are then undersampled and attack se-
quences are oversampled as training data to balance the ratio
between attack and non-attack sequences ( 3 ). Lastly, ATLAS
uses word embedding to map the lemmatized sequences to
vectors of real numbers, which capture the context of an en-
tity in a sequence and the relation with other entities ( 4 ).
Through the steps above, the extracted sequences enforce the
memory of attack patterns through different causal relations,
which helps to build an accurate model that can identify the
attack traces across different instances (e.g., similar attacks
implemented on different victims). Such a sequence-based
representation naturally ﬁts the training of a learning model
(e.g., LSTMs), similar to models for machine translation and
audio, to identify potential future attacks ( 5 ). The learning
process is effective because the key steps of different attacks
often share similar patterns (semantics) at the entity and ac-
tion level. More speciﬁcally, different attack instances share a
generalized pattern regardless of their log-level details, and
temporal orders of a sequence effectively separate normal
behavior from suspicious behavior.
During attack investigation (b), learning a model from se-
quences allows a cyber analyst to reason about future attacks.
A cyber analyst starts an attack investigation from unknown
audit logs with an identiﬁed attack symptom entity such as a