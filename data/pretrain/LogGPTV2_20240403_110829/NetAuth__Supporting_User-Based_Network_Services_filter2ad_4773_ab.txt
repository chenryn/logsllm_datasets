NetAuth’s authorization model is fully implemented, and
we will describe it in a forthcoming paper.
A central tenet of our design is a clear separation be-
tween administration and use of our system. Even when
the same person is performing both roles, this separa-
tion enables allowed actions to be determined in advance,
instead of being interrupted in mid-task with authoriza-
tion questions (e.g., “do you accept this certiﬁcate?”).
It also supports a model of dedicated system adminis-
trators; further partitioning of the system administration
task is possible, for example to allow outsourcing of parts
of the policy.
In netAuth, user processes never have access to cryp-
tographic keys and cryptographic keys can only be used
in authorized ways. Hence, from the authorization con-
ﬁguration the system administrator can easily determine
which users are allowed to use a service and how services
can interact with each other.
NetAuth enables successive connections by the same
user to be directed to a single process dedicated to that
user. We shall see that this has both programming and
efﬁciency advantages.
In addition to its uses in tradi-
tional network services, it can be used to easily set up
back ends on the same system, and thus allow for further
opportunities for UBNS.
We next give an overview of network authentication
and UBNS mechanisms in netAuth.
Network authentication netAuth enables the owner of
a process to be changed upon successful network authen-
tication. Authentication is implemented as follows:
230 
17th USENIX Security Symposium 
USENIX Association
• the server system administrator must enable UBNS
change-of-ownership by specifying the netAuthen-
ticate privilege for the service.
• the client process requests the OS to create a con-
nection and a time-limited connection-speciﬁc dig-
itally signed authenticator5 [31].
• the server process explicitly requests the OS to per-
form network authentication. The user authentica-
tion is only usable by the designated server process
(it is non-transferable).
This mechanism requires that the client-side system ad-
ministrator enable the client to use netAuth authentica-
tion, and the server-side administrator provide the ne-
tAuthenticate privilege. As we shall see, application
code changes to support authentication are trivial on both
client and server sides.
Because public key signatures are used for authenti-
cation, the log containing these signed exchanges proves
that the client requested user authentication. This prop-
erty both helps to debug the mechanism and to ensure
that even the server administrator cannot fake a user au-
thentication. Lastly, since no passwords are used over the
network, this scheme is impervious to password guessing
attacks.
UBNS netAuth has a built-in mechanism to support
UBNS. All connections to a speciﬁed service from user
Ui can be served by a single server process pi unique
to that user. For users Uj, for which there does not ex-
ist a corresponding process pj, a listening process p pre-
accepts (see Section 4) the connection and creates a new
6. Figure 1(a) shows two types of queues of
process pj
unaccepted connections maintained by netAuth (one for
new users and the other for users for which there exists a
user process).
Per user server processes are created on demand for
efﬁciency and ﬂexibility. Successive connections for Ui
will reuse server process pi. NetAuth can also support
other commonly used methods such as pre-forking pro-
cesses or forking a process per connection.
This mechanism provides a very clean programming
model as it is trivial to create back-end services for each
user on demand. For example, Figure 1(b) shows a cal-
endar proxy which caches a user’s local and remote cal-
endars (and no one else’s) and provide feeds to a desk
planner, email to calendar appointment program, a re-
minder system, etc. The reminder mechanism might
know where the user is currently located and where the
appointment is, so that reminders can be given with suit-
able lead times. As the user’s connections are always
to the same process, requests are serialized for that user
preventing race condition (and the need to synchronize)
and enable easy adding of calendar applications without
conﬁguring for security (since the conﬁguration is in the
proxy). Such a model also allows different parts of the
application to execute on different systems. For example,
a user interface component could run on a notebook, and
a backend store could run on an always available server.
We next look at the uses of NetAuth in more detail.
4 NetAuth Application Programming In-
terface
There are several ways to set the owner of a network ser-
vice: (1) the service can be conﬁgured to run as a pseudo
user (e.g., apache) with enough privileges to satisfy any
request. (2) the service may need user authentication to
ensure that it is a valid user (e.g., for mail relay), but
all users are treated identically. This service too can be
owned by a pseudo user.
(3) the service provided de-
pends on the user, who therefore must be authenticated—
it is usually appropriate that the service process be owned
by its user (i.e., UBNS).
A UBNS service (a process run under the user’s ID)
performs the following steps: (a) it accepts a connection,
(b) performs user authentication to identify the user re-
questing the service, (c) creates a new process, and (d)
changes the ownership of the process to the authenticated
user. Once the ownership of the process is changed to the
user, it cannot be used by anyone else.
We next examine how this general paradigm is per-
formed in Unix and then in netAuth.
Figure 2(a) shows the call sequence for implementing
a user authenticated service using UNIX socket APIs.
The client creates a socket (socket), connects to the
server (connect), and then does a series of sends and
receives (send/recv), and when its done closes the
socket.
The server creates a socket (socket), associates it
with a network address on the server (bind), allocates a
pending queue of connection requests (listen), waits
for a new connection request to arrive (accept). To per-
form UBNS, it spawns a process (fork), and after de-
termining the user via network messages (not shown) it
then changes the owner of the process (setuid). At this
point the newly created service process is operating as
the user. It communicates back and forth with the client
and then closes the connection. Since there is typically
no way to reuse the process after it closes the socket, it
exits.
Figure 2(b) shows the equivalent sequencing for ne-
tAuth. On the client side, the only programming change
needed to adapt to netAuth is to replace connect with
connect by user (of course,
the application-level
authentication must be removed).
USENIX Association  
17th USENIX Security Symposium 
231
p
Un+1, Un+2, . . .
p0
U0
accept
queue
U0
p1
U1
. . .
accept
queue
U1
pn
Un
accept
queue
Un
Calendar Viewer
Reminder
Email to Calendar
calendar
proxy
(a) mapping all the connections of a user to the same
process
(b) calendar privilege separation example
Figure 1: Privilege separation in netAuth
CLIENT
socket
connect
send-recv
close
SERVER
socket
bind
listen
accept
fork
PARENT
setuid
send-recv
exit
CHILD
(a) UNIX
CLIENT
socket
connect by user
SYN1
send-recv
close
S
Y
N
2
o
n
w
a
r
d
s
SERVER
socket
bind
listen
pre accept
fork
PARENT
set net user
accept by user
send-recv
close
CHILD
(b) NetAuth
Figure 2: Sequence of system calls executed by a client and a server. The server forks a process to service a request;
the forked process is owned by the authenticated user.
232 
17th USENIX Security Symposium 
USENIX Association
On the server side, netAuth basically splits the accept
for a new connection into two phases:
• The ﬁrst phase is called the pre accept, which
determines when a new user (one that does not have
a service process) arrives. Hence, the pre accept
blocks until there is a waiting connection for some
user U without a corresponding service process
owned by U. (To prevent race conditions, a process
which has a temporary reservation for U by virtue
of having done a pre accept but not yet having
changed the owner is reserved by U.)
• The second phase is the accept by user to ac-
tually accept the connection, after having created a
process owned by the new user.
The accept is split into two APIs because there are now
two actions (1) determining that there is an unaccepted
connection for a new user (so that a new process can
be created) and (2) completing the accept by a (child)
process owned by the new user. (2) ensures that the ac-
cepted socket can be read or written (since the process is
owned by the user). Hence, the split accept ensures that
the accept by user only succeeds if the owner of the
process is the authenticated user on the connection.
The change of ownership of the process is performed
by set net user. The set net user changes the
owner of the process to the authenticated user and con-
sumes the netAuthenticate privilege for that pro-
cess. Thus, set net user serves as a highly restricted
version of setuid, and is far safer to use.
5
Implementation
In this section, we describe the netAuth architecture, the
protocol for user authentication, and the implementation.
We then describe some performance numbers.
5.1 Architecture
The design of netAuth emphasizes the separation of au-
thentication, authorization, and cryptographic mecha-
nisms away from the application.
The overall architecture is shown in Figure 3. Appli-
cations communicate with each other using APIs which
emphasize process authentication—the one component
of netAuth which must be visible to networked applica-
tion code. There are two types of communications, both
of which ﬂow over an IPsec tunnel between the hosts:
• the application’s protocol (or data, for performing
its function) and
• the netAuth authentication information.
The authentication information is managed by two ne-
tAuth daemons—netAuthClient and netAuthServer—
which perform both the public key operations for user
authentication and enable the process’ change of owner-
ship.
5.2 Authentication protocol
Because IPsec is used for communication, IPsec per-
forms host authentication. This means that the remote
service is authenticated, because the service type is deter-
mined by port and the IP is veriﬁed using IPsec’s public
key host authentication.
Before application communication is established, user
authentication is performed:
netAuthClient signs an authenticator which describes
the connection.
netAuthServer receives the authenticator and veriﬁes
its signature.
Public-key cryptographic operations can be considerably
more expensive than symmetric key algorithms. For-
tunately, signing (which is done on the relatively idle
client) takes signiﬁcantly longer than verifying (on a
busy server). For example, RSA public key signing times
(client) and veriﬁcation times (server) for 1024 and 2048
bit keys are shown in Table 17.
Once the netAuthClient has proved that it can
sign the authenticator, successive signings prove little
(since from the ﬁrst signing we know that the netAu-
thClient has the requisite private key). Hence, succes-
sive connects for that user employ a quick authentication
based on hash chains [23].
We use a separate connection to send our authen-
ticator, rather than the more traditional mechanism of
piggybacking authentication on the application connec-
tion. This is done both to increase the ﬂexibility of
communications and to allow connections to be re-
authenticated periodically. Re-authentication determines
whether the user’s account is still active, and hence a
re-authentication failure disables the user’s account and
stops their processes, something that is difﬁcult to do
with other protocols. We re-authenticate using the same
hash chain scheme as for successive connects for the
same user.
key size
1024
2048
signing
680 µs
2,780 µs
verifying
40 µs
80 µs
Table 1: RSA signing/veriﬁcation times in µseconds
USENIX Association  
17th USENIX Security Symposium 
233
application
netAuthClient
netAuthServer
application
IPsec tunnel
Figure 3: Architecture of netAuth
5.3 kernel-based implementation
The ﬁrst NetAuth implementation has been integrated
into the Linux kernel. Our implementation has three key
components:
• kernel extensions (code integrated into the main-
line kernel) implementing networking support for
processes with per-user privileges and providing the
new system calls pre accept, set net user
and accept by user.
• a loadable kernel module implementing netAuth
authorizations, uses the Linux Security Module
(LSM) framework [41].
The LSM framework segregates the placement of
hooks (scattered through the Linux kernel) from the
enforcement of access controls (centralized in an
LSM module). Thus changes in the mainline ker-
nel (mostly) do not affect LSM modules.
• Three user-space daemons which (1) download
the networking policy into the kernel using the
netlink facility (2) sign authenticators and (3)
verify authenticators.
The kernel implementation currently consists of about
3,700 lines of C code (∼3,000 in the kernel module and
∼700 in the kernel extensions).
5.4 Performance
We now report on NetAuth’s performance. All the ex-
periments were run using a server—an AMD 4200+ (2.2
GHz) machine with 2GB RAM—and a client—an AMD
4600+ (2.2 GHz) machine with 1GB RAM. Both com-
puters ran Linux kernel v2.6.17, used gigabit network-
ing, and were connected by a crossover cable8. We mea-
sured elapse times (from the applications) in all cases.
We performed two types of performance tests to
measure latency.
First, we measured the overhead
of netAuth authorization and compared it to unmodi-
ﬁed Linux, for the cases of the bind, connect and
connect-send-recv operations. Second, we mea-
sured latency for netAuth’s per-user services. For the
second part, there is no comparable Linux scenario and
hence we report absolute times there.
UNIX NetAuth Overhead
12.5%
14.28%
8.27%
(µs)
6.00
28.00
145.00
(µs)
6.75
32.00
157.00
bind
connect
connect-send-