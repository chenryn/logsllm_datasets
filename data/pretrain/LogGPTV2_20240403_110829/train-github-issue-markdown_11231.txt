The idea is allow a simple, dynamically modifiable priority for indices.
Something akin to:
    $ curl -XPUT host:9200/my-index/_settings -d '{
      "index.priority" : 1
    }'
By default, all priorities would default with `index.priority : 0`, thus being
of equal priority unless modified. From there, the comparison could go to
index creation date/time as the next priority level, then finally by name for
the final order.
> `index.priority` > `index.creation_date` > reverse sorted index name
This allows pretty much every use case to specify recovery order for best-case
recovery order for their use case. Time-based solutions would pretty much work
out of the box because the creation date would prioritize recovery of
_today's_ index first, thus giving the best chance to return to fully
replicated indexing as soon as possible. Similarly, falling back to the
reverse sorted index name gives arbitrary--yet predictable--sorting for
simultaneously-created indices (however unlikely) that have no time basis
(`index-z`, `index-y`, ...), but YMD-formatted date/time strings will properly
sort (`logstash-2015.05.03` will always come before `logstash-2015.05.02` or
earlier dates). Finally, the arbitrary priority allows users to take control
of the process for cases where there is no time basis, such as when a "main"
index is created, but then minor indices are created from time-to-time. Even
better, this would be as simple as setting it once with a high value, then not
setting or selectively setting the minor indices.