### Security Mechanisms and Vulnerability Analysis

#### 1. Invalidation of Security Mechanisms
We can intentionally weaken security mechanisms, such as sanitization or guard statements, which protect a security-sensitive API call. This can involve completely removing the protection or modifying necessary checks, such as length validations, to ensure they never trigger.

#### 2. Using Security Anti-Patterns
We can leverage typical patterns of vulnerable code. For example:
- **Faulty Check Patterns:** Many check patterns do not effectively prevent or detect integer overflows.
- **Format String Vulnerabilities:** Transforming `printf("%s", buf)` to `printf(buf)` can introduce a format string vulnerability.
- **TOCTTOU (Time-of-Check to Time-of-Use) Races:** These can be introduced by altering constructs like `open()/access()` or `stat()/open()`.

To prevent syntactically incorrect code, we apply our instrumentations conservatively, meaning we do not apply them if the specific instrumentation does not fully understand every element of the security mechanism at hand.

### Workflow

Figure 1 illustrates the individual stages of our system, while Listing 1 provides a high-level description of our algorithm for automatically inserting security-critical bugs:

1. **Preparing the Analysis:**
   - Invoke the preprocessor to handle preprocessor directives, resulting in pure C source code.
   - Compute the code property graph from the source code, representing the abstract syntax tree (AST), types, control flow, and data flow as nodes and edges.

2. **Enabling Interprocedural Data Flow Analysis:**
   - The reference implementation of code property graphs does not support interprocedural analysis out of the box.
   - Compute the call graph of the application and use a topological sorting to analyze subfunctions first.
   - Adjust the data-flow graph in the calling function based on which parameters a subfunction modifies.
   - Handle circular dependencies by picking a function with the least number of calls.
   - Incorporate means to read parameter modification status from external libraries, such as glibc.

3. **Finding Potentially Vulnerable Paths:**
   - Identify all sensitive sinks in the application, such as the length field of a `memcpy()`.
   - Trace the data sources of a sensitive sink to a user-controlled source (e.g., files, network connections, command-line arguments, standard input streams, environment variables).
   - Define user-controlled sources that are not specific to the vulnerability but to the application.

4. **Instrumenting Potentially Vulnerable Paths:**
   - Find relevant security mechanisms in the path.
   - Apply known vulnerability classes to find applicable instrumentations.
   - Use a randomly chosen instrumentation to make the path actually vulnerable.

### Running Example

Listing 2 shows a running example for automatic bug insertion. The program reads a length field from a file and uses it to copy up to 256 bytes of data from one buffer into another. It also invalidates the original buffer using `memset()`.

```c
int read_from_file(FILE *f) {
    int length;
    fread((char *)&length, sizeof(int), 1, f);
    return length;
}

void wrapper(FILE *f, int *the_len) {
    *the_len = read_from_file(f);
}

void copy_buffer(FILE *f_true, FILE *f_false, char *buf, int which_file, int use_wrapper) {
    int len;
    if (use_wrapper) {
        if (which_file) wrapper(f_true, &len);
        else wrapper(f_false, &len);
    } else {
        if (which_file) len = read_from_file(f_true);
        else len = read_from_file(f_false);
    }
    if (len > 256) {
        printf("ERROR: len is too big.\n");
        exit(1);
    }
    char local[256];
    memcpy(local, buf, len);
    memset(buf, 0, 512);
    do_something_with(local);
}
```

### Detailed Workflow Steps

#### 2.4.1 Preparing Analysis
- **Preprocessing:** Convert the source code into pure C code.
- **Code Property Graph:** Use robust, island-grammar-based parsing to represent the AST, types, control flow, and data flow in a graph database.

#### 2.4.2 Enabling Interprocedural Data Flow Analysis
- **Call Graph Computation:** Analyze subfunctions first using a topological sort.
- **Parameter Modification:** Adjust the data-flow graph in the calling function based on subfunction parameter modifications.
- **Circular Dependencies:** Handle by picking a function with the least number of calls.
- **External Libraries:** Read parameter modification status from provided files, such as glibc.

#### 2.4.3 Finding Potentially Vulnerable Locations
- **Sensitive Sinks:** Identify parameters of security-critical functions, such as `memcpy()`.
- **User-Controlled Sources:** Trace data sources to user-controlled inputs (e.g., files, network, command-line arguments, stdin, environment variables).

In the running example, possible data sources for the length value in the `memcpy()` are set by `wrapper()` (lines 16/17) and `read_from_file()` (lines 20/21).