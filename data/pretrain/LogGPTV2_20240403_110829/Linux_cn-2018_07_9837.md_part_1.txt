---
author: Robert Aboukhalil
category: 技术
comments_data:
- date: '2019-10-12 14:47:13'
  message: 非常有用，谢谢
  postip: 183.128.211.170
  username: 来自浙江杭州的 Chrome 71.0|Windows 10 用户
- date: '2019-10-12 14:47:16'
  message: 非常有用，谢谢
  postip: 183.128.211.170
  username: 来自浙江杭州的 Chrome 71.0|Windows 10 用户
- date: '2019-10-12 14:47:17'
  message: 非常有用，谢谢
  postip: 183.128.211.170
  username: 来自浙江杭州的 Chrome 71.0|Windows 10 用户
- date: '2019-10-12 14:47:17'
  message: 非常有用，谢谢
  postip: 183.128.211.170
  username: 来自浙江杭州的 Chrome 71.0|Windows 10 用户
- date: '2019-10-31 11:39:06'
  message: 很好，感谢了！
  postip: 163.177.68.30
  username: 来自广东深圳的 Safari 12.1|Mac 10.14 用户
count:
  commentnum: 5
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 8852
date: '2018-07-15 11:22:00'
editorchoice: false
excerpt: 进入这个古怪而神奇的 Bash 数组的世界。
fromurl: https://opensource.com/article/18/5/you-dont-know-bash-intro-bash-arrays
id: 9837
islctt: true
largepic: /data/attachment/album/201807/15/112215n3r55lbqpdb4tbg9.jpg
permalink: /article-9837-1.html
pic: /data/attachment/album/201807/15/112215n3r55lbqpdb4tbg9.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 进入这个古怪而神奇的 Bash 数组的世界。
tags:
- Bash
- 数组
thumb: false
title: 你所不了解的 Bash：关于 Bash 数组的介绍
titlepic: true
translator: BriFuture
updated: '2018-07-15 11:22:00'
---
> 
> 进入这个古怪而神奇的 Bash 数组的世界。
> 
> 
> 
![](/data/attachment/album/201807/15/112215n3r55lbqpdb4tbg9.jpg)
尽管软件工程师常常使用命令行来进行各种开发，但命令行中的数组似乎总是一个模糊的东西（虽然不像正则操作符 `=~` 那么复杂隐晦）。除开隐晦和有疑问的语法，[Bash](https://opensource.com/article/17/7/bash-prompt-tips-and-tricks) 数组其实是非常有用的。
### 稍等，这是为什么？
写 Bash 相关的东西很难，但如果是写一篇像手册那样注重怪异语法的文章，就会非常简单。不过请放心，这篇文章的目的就是让你不用去读该死的使用手册。
#### 真实（通常是有用的）示例
为了这个目的，想象一下真实世界的场景以及 Bash 是怎么帮忙的：你正在公司里面主导一个新工作，评估并优化内部数据管线的运行时间。首先，你要做个参数扫描分析来评估管线使用线程的状况。简单起见，我们把这个管道当作一个编译好的 C++ 黑盒子，这里面我们能够调整的唯一的参数是用于处理数据的线程数量：`./pipeline --threads 4`。
### 基础
我们首先要做的事是定义一个数组，用来容纳我们想要测试的 `--threads` 参数：
```
allThreads=(1 2 4 8 16 32 64 128)
```
本例中，所有元素都是数字，但参数并不一定是数字，Bash 中的数组可以容纳数字和字符串，比如 `myArray=(1 2 "three" 4 "five")` 就是个有效的表达式。就像 Bash 中其它的变量一样，确保赋值符号两边没有空格。否则 Bash 将会把变量名当作程序来执行，把 `=` 当作程序的第一个参数。
现在我们初始化了数组，让我们解析它其中的一些元素。仅仅输入 `echo $allThreads` ，你能发现，它只会输出第一个元素。
要理解这个产生的原因，需要回到上一步，回顾我们一般是怎么在 Bash 中输出变量。考虑以下场景：
```
type="article"
echo "Found 42 $type"
```
假如我们得到的变量 `$type` 是一个单词，我们想要添加在句子结尾一个 `s`。我们无法直接把 `s` 加到 `$type` 里面，因为这会把它变成另一个变量，`$types`。尽管我们可以利用像 `echo "Found 42 "$type"s"` 这样的代码形变，但解决这个问题的最好方法是用一个花括号：`echo "Found 42 ${type}s"`，这让我们能够告诉 Bash 变量名的起止位置（有趣的是，JavaScript/ES6 在 [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) 中注入变量和表达式的语法和这里是一样的）
事实上，尽管 Bash 变量一般不用花括号，但在数组中需要用到花括号。这反而允许我们指定要访问的索引，例如 `echo ${allThreads[1]}` 返回的是数组中的第二个元素。如果不写花括号，比如 `echo $allThreads[1]`，会导致 Bash 把 `[1]` 当作字符串然后输出。
是的，Bash 数组的语法很怪，但是至少他们是从 0 开始索引的，不像有些语言（说的就是你，`R` 语言）。
### 遍历数组
上面的例子中我们直接用整数作为数组的索引，我们现在考虑两种其他情况：第一，如果想要数组中的第 `$i` 个元素，这里 `$i` 是一个代表索引的变量，我们可以这样 `echo ${allThreads[$i]}` 解析这个元素。第二，要输出一个数组的所有元素，我们把数字索引换成 `@` 符号（你可以把 `@` 当作表示 `all` 的符号）：`echo ${allThreads[@]}`。
#### 遍历数组元素
记住上面讲过的，我们遍历 `$allThreads` 数组，把每个值当作 `--threads` 参数启动管线：
```
for t in ${allThreads[@]}; do
  ./pipeline --threads $t
done
```
#### 遍历数组索引
接下来，考虑一个稍稍不同的方法。不遍历所有的数组元素，我们可以遍历所有的索引：
```
for i in ${!allThreads[@]}; do
  ./pipeline --threads ${allThreads[$i]}
done
```
一步一步看：如之前所见，`${allThreads[@]}` 表示数组中的所有元素。前面加了个感叹号，变成 `${!allThreads[@]}`，这会返回数组索引列表（这里是 0 到 7）。换句话说。`for` 循环就遍历所有的索引 `$i` 并从 `$allThreads` 中读取第 `$i` 个元素，当作 `--threads` 选项的参数。
这看上去很辣眼睛，你可能奇怪为什么我要一开始就讲这个。这是因为有时候在循环中需要同时获得索引和对应的值，例如，如果你想要忽视数组中的第一个元素，使用索引可以避免额外创建在循环中累加的变量。
### 填充数组
到目前为止，我们已经能够用给定的 `--threads` 选项启动管线了。现在假设按秒计时的运行时间输出到管线。我们想要捕捉每个迭代的输出，然后把它保存在另一个数组中，因此我们最终可以随心所欲的操作它。
#### 一些有用的语法
在深入代码前，我们要多介绍一些语法。首先，我们要能解析 Bash 命令的输出。用这个语法可以做到：`output=$( ./my_script.sh )`，这会把命令的输出存储到变量 `$output` 中。
我们需要的第二个语法是如何把我们刚刚解析的值添加到数组中。完成这个任务的语法看起来很熟悉：
```
myArray+=( "newElement1" "newElement2" )